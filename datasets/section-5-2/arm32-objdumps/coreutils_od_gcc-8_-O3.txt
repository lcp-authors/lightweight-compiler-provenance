
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00010ef0 <.init>:
   10ef0:	push	{r3, lr}
   10ef4:	bl	129c0 <__assert_fail@plt+0x17bc>
   10ef8:	pop	{r3, pc}

Disassembly of section .plt:

00010efc <calloc@plt-0x14>:
   10efc:	push	{lr}		; (str lr, [sp, #-4]!)
   10f00:	ldr	lr, [pc, #4]	; 10f0c <calloc@plt-0x4>
   10f04:	add	lr, pc, lr
   10f08:	ldr	pc, [lr, #8]!
   10f0c:	strdeq	sp, [r1], -r4

00010f10 <calloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #118784	; 0x1d000
   10f18:	ldr	pc, [ip, #244]!	; 0xf4

00010f1c <fputs_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #118784	; 0x1d000
   10f24:	ldr	pc, [ip, #236]!	; 0xec

00010f28 <raise@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #118784	; 0x1d000
   10f30:	ldr	pc, [ip, #228]!	; 0xe4

00010f34 <strcmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #118784	; 0x1d000
   10f3c:	ldr	pc, [ip, #220]!	; 0xdc

00010f40 <fflush@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #118784	; 0x1d000
   10f48:	ldr	pc, [ip, #212]!	; 0xd4

00010f4c <free@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #118784	; 0x1d000
   10f54:	ldr	pc, [ip, #204]!	; 0xcc

00010f58 <ferror@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #118784	; 0x1d000
   10f60:	ldr	pc, [ip, #196]!	; 0xc4

00010f64 <_exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #118784	; 0x1d000
   10f6c:	ldr	pc, [ip, #188]!	; 0xbc

00010f70 <memcpy@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #118784	; 0x1d000
   10f78:	ldr	pc, [ip, #180]!	; 0xb4

00010f7c <__strtoull_internal@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #118784	; 0x1d000
   10f84:	ldr	pc, [ip, #172]!	; 0xac

00010f88 <mbsinit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #118784	; 0x1d000
   10f90:	ldr	pc, [ip, #164]!	; 0xa4

00010f94 <strtold@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #118784	; 0x1d000
   10f9c:	ldr	pc, [ip, #156]!	; 0x9c

00010fa0 <fwrite_unlocked@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #118784	; 0x1d000
   10fa8:	ldr	pc, [ip, #148]!	; 0x94

00010fac <memcmp@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #118784	; 0x1d000
   10fb4:	ldr	pc, [ip, #140]!	; 0x8c

00010fb8 <fputc_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #118784	; 0x1d000
   10fc0:	ldr	pc, [ip, #132]!	; 0x84

00010fc4 <dcgettext@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #118784	; 0x1d000
   10fcc:	ldr	pc, [ip, #124]!	; 0x7c

00010fd0 <realloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #118784	; 0x1d000
   10fd8:	ldr	pc, [ip, #116]!	; 0x74

00010fdc <textdomain@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #118784	; 0x1d000
   10fe4:	ldr	pc, [ip, #108]!	; 0x6c

00010fe8 <iswprint@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #118784	; 0x1d000
   10ff0:	ldr	pc, [ip, #100]!	; 0x64

00010ff4 <__fxstat64@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #118784	; 0x1d000
   10ffc:	ldr	pc, [ip, #92]!	; 0x5c

00011000 <fwrite@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #118784	; 0x1d000
   11008:	ldr	pc, [ip, #84]!	; 0x54

0001100c <lseek64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #118784	; 0x1d000
   11014:	ldr	pc, [ip, #76]!	; 0x4c

00011018 <__ctype_get_mb_cur_max@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #118784	; 0x1d000
   11020:	ldr	pc, [ip, #68]!	; 0x44

00011024 <__fpending@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #118784	; 0x1d000
   1102c:	ldr	pc, [ip, #60]!	; 0x3c

00011030 <mbrtowc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #118784	; 0x1d000
   11038:	ldr	pc, [ip, #52]!	; 0x34

0001103c <error@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #118784	; 0x1d000
   11044:	ldr	pc, [ip, #44]!	; 0x2c

00011048 <strtof@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #118784	; 0x1d000
   11050:	ldr	pc, [ip, #36]!	; 0x24

00011054 <puts@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #118784	; 0x1d000
   1105c:	ldr	pc, [ip, #28]!

00011060 <malloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #118784	; 0x1d000
   11068:	ldr	pc, [ip, #20]!

0001106c <__libc_start_main@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #118784	; 0x1d000
   11074:	ldr	pc, [ip, #12]!

00011078 <__vfprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #118784	; 0x1d000
   11080:	ldr	pc, [ip, #4]!

00011084 <__freading@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #28, 20	; 0x1c000
   1108c:	ldr	pc, [ip, #4092]!	; 0xffc

00011090 <__gmon_start__@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #28, 20	; 0x1c000
   11098:	ldr	pc, [ip, #4084]!	; 0xff4

0001109c <getopt_long@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #28, 20	; 0x1c000
   110a4:	ldr	pc, [ip, #4076]!	; 0xfec

000110a8 <__ctype_b_loc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #28, 20	; 0x1c000
   110b0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b4 <exit@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c0 <strlen@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110cc <strchr@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d8 <__errno_location@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e4 <__sprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f0 <__cxa_atexit@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110fc <setvbuf@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #4012]!	; 0xfac

00011108 <memset@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #4004]!	; 0xfa4

00011114 <fgetc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011120 <__printf_chk@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #3988]!	; 0xf94

0001112c <strtod@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #3980]!	; 0xf8c

00011138 <fileno@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3972]!	; 0xf84

00011144 <__fprintf_chk@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011150 <fclose@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3956]!	; 0xf74

0001115c <fseeko64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3948]!	; 0xf6c

00011168 <__overflow@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3940]!	; 0xf64

00011174 <setlocale@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011180 <strrchr@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3924]!	; 0xf54

0001118c <nl_langinfo@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3916]!	; 0xf4c

00011198 <__fread_unlocked_chk@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3908]!	; 0xf44

000111a4 <localeconv@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3900]!	; 0xf3c

000111b0 <clearerr_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3892]!	; 0xf34

000111bc <fopen64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c8 <bindtextdomain@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3876]!	; 0xf24

000111d4 <fread_unlocked@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111e0 <strncmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ec <abort@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f8 <__snprintf_chk@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3844]!	; 0xf04

00011204 <__assert_fail@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3836]!	; 0xefc

Disassembly of section .text:

00011210 <.text>:
   11210:	movw	r3, #10872	; 0x2a78
   11214:	movt	r3, #1
   11218:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1121c:	strd	r6, [sp, #8]
   11220:	mov	r6, r0
   11224:	mov	r7, r3
   11228:	strd	r8, [sp, #16]
   1122c:	mov	r5, r1
   11230:	movw	r4, #57744	; 0xe190
   11234:	movt	r4, #2
   11238:	strd	sl, [sp, #24]
   1123c:	mov	r8, #2
   11240:	str	lr, [sp, #32]
   11244:	sub	sp, sp, #84	; 0x54
   11248:	ldr	r0, [r1]
   1124c:	str	r3, [sp, #40]	; 0x28
   11250:	bl	16038 <__assert_fail@plt+0x4e34>
   11254:	movw	r1, #52988	; 0xcefc
   11258:	movt	r1, #1
   1125c:	ldr	fp, [pc, #4076]	; 12250 <__assert_fail@plt+0x104c>
   11260:	mov	r0, #6
   11264:	bl	11174 <setlocale@plt>
   11268:	movw	r1, #53800	; 0xd228
   1126c:	movt	r1, #1
   11270:	movw	r0, #53632	; 0xd180
   11274:	movt	r0, #1
   11278:	bl	111c8 <bindtextdomain@plt>
   1127c:	movw	r0, #53632	; 0xd180
   11280:	movt	r0, #1
   11284:	bl	10fdc <textdomain@plt>
   11288:	movw	r0, #22856	; 0x5948
   1128c:	movt	r0, #1
   11290:	bl	1be54 <__assert_fail@plt+0xac50>
   11294:	mov	r3, r7
   11298:	mov	r2, #0
   1129c:	mov	r0, #1
   112a0:	mov	r7, #4
   112a4:	str	r3, [r4, #44]	; 0x2c
   112a8:	mov	r3, #0
   112ac:	mov	sl, r0
   112b0:	mov	r1, #0
   112b4:	mov	lr, #5
   112b8:	mov	ip, #6
   112bc:	strd	r2, [r4, #52]	; 0x34
   112c0:	strd	r2, [r4, #60]	; 0x3c
   112c4:	str	r0, [r4, #56]	; 0x38
   112c8:	mov	r0, #8
   112cc:	strd	r2, [r4, #68]	; 0x44
   112d0:	strd	r2, [r4, #76]	; 0x4c
   112d4:	strd	r2, [r4, #88]	; 0x58
   112d8:	strd	r2, [r4, #96]	; 0x60
   112dc:	strd	r2, [r4, #104]	; 0x68
   112e0:	strd	r2, [r4, #112]	; 0x70
   112e4:	add	r3, fp, #244	; 0xf4
   112e8:	str	r0, [r4, #4]
   112ec:	mov	r0, #7
   112f0:	str	r1, [sp, #24]
   112f4:	str	r3, [sp, #36]	; 0x24
   112f8:	add	r3, sp, #64	; 0x40
   112fc:	str	r7, [r4, #68]	; 0x44
   11300:	mov	r7, r1
   11304:	str	r0, [r4]
   11308:	str	r3, [sp, #20]
   1130c:	strb	r1, [r4, #26]
   11310:	str	r1, [sp, #32]
   11314:	str	r1, [r4, #36]	; 0x24
   11318:	str	r1, [r4, #40]	; 0x28
   1131c:	str	r1, [r4, #48]	; 0x30
   11320:	str	r8, [r4, #60]	; 0x3c
   11324:	str	lr, [r4, #84]	; 0x54
   11328:	str	ip, [r4, #104]	; 0x68
   1132c:	str	r0, [r4, #120]	; 0x78
   11330:	ldr	r0, [sp, #20]
   11334:	mvn	ip, #0
   11338:	mov	r3, fp
   1133c:	mov	r1, r5
   11340:	ldr	r2, [pc, #3852]	; 12254 <__assert_fail@plt+0x1050>
   11344:	str	r0, [sp]
   11348:	mov	r0, r6
   1134c:	str	ip, [sp, #64]	; 0x40
   11350:	bl	1109c <getopt_long@plt>
   11354:	cmn	r0, #1
   11358:	beq	11b9c <__assert_fail@plt+0x998>
   1135c:	add	r0, r0, #3
   11360:	cmp	r0, #260	; 0x104
   11364:	ldrls	pc, [pc, r0, lsl #2]
   11368:	b	11c70 <__assert_fail@plt+0xa6c>
   1136c:	andeq	r1, r1, r4, asr #22
   11370:			; <UNDEFINED> instruction: 0x000124bc
   11374:	andeq	r1, r1, r0, ror ip
   11378:	andeq	r1, r1, r0, ror ip
   1137c:	andeq	r1, r1, r0, ror ip
   11380:	andeq	r1, r1, r0, ror ip
   11384:	andeq	r1, r1, r0, ror ip
   11388:	andeq	r1, r1, r0, ror ip
   1138c:	andeq	r1, r1, r0, ror ip
   11390:	andeq	r1, r1, r0, ror ip
   11394:	andeq	r1, r1, r0, ror ip
   11398:	andeq	r1, r1, r0, ror ip
   1139c:	andeq	r1, r1, r0, ror ip
   113a0:	andeq	r1, r1, r0, ror ip
   113a4:	andeq	r1, r1, r0, ror ip
   113a8:	andeq	r1, r1, r0, ror ip
   113ac:	andeq	r1, r1, r0, ror ip
   113b0:	andeq	r1, r1, r0, ror ip
   113b4:	andeq	r1, r1, r0, ror ip
   113b8:	andeq	r1, r1, r0, ror ip
   113bc:	andeq	r1, r1, r0, ror ip
   113c0:	andeq	r1, r1, r0, ror ip
   113c4:	andeq	r1, r1, r0, ror ip
   113c8:	andeq	r1, r1, r0, ror ip
   113cc:	andeq	r1, r1, r0, ror ip
   113d0:	andeq	r1, r1, r0, ror ip
   113d4:	andeq	r1, r1, r0, ror ip
   113d8:	andeq	r1, r1, r0, ror ip
   113dc:	andeq	r1, r1, r0, ror ip
   113e0:	andeq	r1, r1, r0, ror ip
   113e4:	andeq	r1, r1, r0, ror ip
   113e8:	andeq	r1, r1, r0, ror ip
   113ec:	andeq	r1, r1, r0, ror ip
   113f0:	andeq	r1, r1, r0, ror ip
   113f4:	andeq	r1, r1, r0, ror ip
   113f8:	andeq	r1, r1, r0, ror ip
   113fc:	andeq	r1, r1, r0, ror ip
   11400:	andeq	r1, r1, r0, ror ip
   11404:	andeq	r1, r1, r0, ror ip
   11408:	andeq	r1, r1, r0, ror ip
   1140c:	andeq	r1, r1, r0, ror ip
   11410:	andeq	r1, r1, r0, ror ip
   11414:	andeq	r1, r1, r0, ror ip
   11418:	andeq	r1, r1, r0, ror ip
   1141c:	andeq	r1, r1, r0, ror ip
   11420:	andeq	r1, r1, r0, ror ip
   11424:	andeq	r1, r1, r0, ror ip
   11428:	andeq	r1, r1, r0, ror ip
   1142c:	andeq	r1, r1, r0, ror ip
   11430:	andeq	r1, r1, r0, ror ip
   11434:	andeq	r1, r1, r0, ror ip
   11438:	andeq	r1, r1, r0, ror ip
   1143c:	andeq	r1, r1, r0, ror ip
   11440:	andeq	r1, r1, r0, ror ip
   11444:	andeq	r1, r1, r0, ror ip
   11448:	andeq	r1, r1, r0, ror ip
   1144c:	andeq	r1, r1, r0, ror ip
   11450:	andeq	r1, r1, r0, ror ip
   11454:	andeq	r1, r1, r0, ror ip
   11458:	andeq	r1, r1, r0, ror ip
   1145c:	andeq	r1, r1, r0, ror ip
   11460:	andeq	r1, r1, r0, ror ip
   11464:	andeq	r1, r1, r0, ror ip
   11468:	andeq	r1, r1, r0, ror ip
   1146c:	andeq	r1, r1, r0, ror ip
   11470:	andeq	r1, r1, r0, ror ip
   11474:	andeq	r1, r1, r0, ror ip
   11478:	andeq	r1, r1, r0, ror ip
   1147c:	ldrdeq	r1, [r1], -r0
   11480:			; <UNDEFINED> instruction: 0x00011ab8
   11484:	andeq	r1, r1, r0, ror ip
   11488:	andeq	r1, r1, r0, lsr #21
   1148c:	andeq	r1, r1, r0, ror ip
   11490:	andeq	r1, r1, r8, lsl #21
   11494:	andeq	r1, r1, r0, ror ip
   11498:	andeq	r1, r1, r0, ror sl
   1149c:	andeq	r1, r1, r8, asr sl
   114a0:	andeq	r1, r1, r0, ror ip
   114a4:	andeq	r1, r1, r0, ror ip
   114a8:	andeq	r1, r1, r8, asr sl
   114ac:	andeq	r1, r1, r0, ror ip
   114b0:	andeq	r1, r1, r8, lsl #20
   114b4:	strdeq	r1, [r1], -r0
   114b8:	andeq	r1, r1, r0, ror ip
   114bc:	andeq	r1, r1, r0, ror ip
   114c0:	andeq	r1, r1, r0, ror ip
   114c4:	andeq	r1, r1, r8, lsl #19
   114c8:	andeq	r1, r1, r0, ror ip
   114cc:	andeq	r1, r1, r0, ror ip
   114d0:	andeq	r1, r1, r0, ror ip
   114d4:	andeq	r1, r1, r0, ror ip
   114d8:	andeq	r1, r1, r0, ror sl
   114dc:	andeq	r1, r1, r0, ror ip
   114e0:	andeq	r1, r1, r0, ror ip
   114e4:	andeq	r1, r1, r0, ror ip
   114e8:	andeq	r1, r1, r0, ror ip
   114ec:	andeq	r1, r1, r0, ror ip
   114f0:	andeq	r1, r1, r0, ror ip
   114f4:	andeq	r1, r1, r0, ror ip
   114f8:	andeq	r1, r1, r0, ror ip
   114fc:	andeq	r1, r1, r0, ror r9
   11500:	andeq	r1, r1, r8, asr r9
   11504:	andeq	r1, r1, r0, asr #18
   11508:	andeq	r1, r1, r8, lsr #18
   1150c:	andeq	r1, r1, r8, lsl #21
   11510:	andeq	r1, r1, r0, lsl r9
   11514:	andeq	r1, r1, r0, ror ip
   11518:	strdeq	r1, [r1], -r8
   1151c:	andeq	r1, r1, r0, ror #17
   11520:	andeq	r1, r1, ip, lsr #17
   11524:	andeq	r1, r1, r0, ror ip
   11528:	andeq	r1, r1, r8, asr sl
   1152c:	andeq	r1, r1, r0, ror ip
   11530:	andeq	r1, r1, r0, ror ip
   11534:			; <UNDEFINED> instruction: 0x00011ab8
   11538:	andeq	r1, r1, r0, ror ip
   1153c:	andeq	r1, r1, r0, ror ip
   11540:	andeq	r1, r1, r0, ror ip
   11544:	muleq	r1, r4, r8
   11548:	andeq	r1, r1, ip, ror #16
   1154c:	andeq	r1, r1, r0, ror ip
   11550:	andeq	r1, r1, r4, asr r8
   11554:	strdeq	r1, [r1], -r4
   11558:	strdeq	r1, [r1], -r8
   1155c:	andeq	r1, r1, r0, ror ip
   11560:	andeq	r1, r1, r0, ror ip
   11564:	andeq	r1, r1, r0, ror ip
   11568:	andeq	r1, r1, r0, ror ip
   1156c:	andeq	r1, r1, r0, ror ip
   11570:	andeq	r1, r1, r0, ror ip
   11574:	andeq	r1, r1, r0, ror ip
   11578:	andeq	r1, r1, r0, ror ip
   1157c:	andeq	r1, r1, r0, ror ip
   11580:	andeq	r1, r1, r0, ror ip
   11584:	andeq	r1, r1, r0, ror ip
   11588:	andeq	r1, r1, r0, ror ip
   1158c:	andeq	r1, r1, r0, ror ip
   11590:	andeq	r1, r1, r0, ror ip
   11594:	andeq	r1, r1, r0, ror ip
   11598:	andeq	r1, r1, r0, ror ip
   1159c:	andeq	r1, r1, r0, ror ip
   115a0:	andeq	r1, r1, r0, ror ip
   115a4:	andeq	r1, r1, r0, ror ip
   115a8:	andeq	r1, r1, r0, ror ip
   115ac:	andeq	r1, r1, r0, ror ip
   115b0:	andeq	r1, r1, r0, ror ip
   115b4:	andeq	r1, r1, r0, ror ip
   115b8:	andeq	r1, r1, r0, ror ip
   115bc:	andeq	r1, r1, r0, ror ip
   115c0:	andeq	r1, r1, r0, ror ip
   115c4:	andeq	r1, r1, r0, ror ip
   115c8:	andeq	r1, r1, r0, ror ip
   115cc:	andeq	r1, r1, r0, ror ip
   115d0:	andeq	r1, r1, r0, ror ip
   115d4:	andeq	r1, r1, r0, ror ip
   115d8:	andeq	r1, r1, r0, ror ip
   115dc:	andeq	r1, r1, r0, ror ip
   115e0:	andeq	r1, r1, r0, ror ip
   115e4:	andeq	r1, r1, r0, ror ip
   115e8:	andeq	r1, r1, r0, ror ip
   115ec:	andeq	r1, r1, r0, ror ip
   115f0:	andeq	r1, r1, r0, ror ip
   115f4:	andeq	r1, r1, r0, ror ip
   115f8:	andeq	r1, r1, r0, ror ip
   115fc:	andeq	r1, r1, r0, ror ip
   11600:	andeq	r1, r1, r0, ror ip
   11604:	andeq	r1, r1, r0, ror ip
   11608:	andeq	r1, r1, r0, ror ip
   1160c:	andeq	r1, r1, r0, ror ip
   11610:	andeq	r1, r1, r0, ror ip
   11614:	andeq	r1, r1, r0, ror ip
   11618:	andeq	r1, r1, r0, ror ip
   1161c:	andeq	r1, r1, r0, ror ip
   11620:	andeq	r1, r1, r0, ror ip
   11624:	andeq	r1, r1, r0, ror ip
   11628:	andeq	r1, r1, r0, ror ip
   1162c:	andeq	r1, r1, r0, ror ip
   11630:	andeq	r1, r1, r0, ror ip
   11634:	andeq	r1, r1, r0, ror ip
   11638:	andeq	r1, r1, r0, ror ip
   1163c:	andeq	r1, r1, r0, ror ip
   11640:	andeq	r1, r1, r0, ror ip
   11644:	andeq	r1, r1, r0, ror ip
   11648:	andeq	r1, r1, r0, ror ip
   1164c:	andeq	r1, r1, r0, ror ip
   11650:	andeq	r1, r1, r0, ror ip
   11654:	andeq	r1, r1, r0, ror ip
   11658:	andeq	r1, r1, r0, ror ip
   1165c:	andeq	r1, r1, r0, ror ip
   11660:	andeq	r1, r1, r0, ror ip
   11664:	andeq	r1, r1, r0, ror ip
   11668:	andeq	r1, r1, r0, ror ip
   1166c:	andeq	r1, r1, r0, ror ip
   11670:	andeq	r1, r1, r0, ror ip
   11674:	andeq	r1, r1, r0, ror ip
   11678:	andeq	r1, r1, r0, ror ip
   1167c:	andeq	r1, r1, r0, ror ip
   11680:	andeq	r1, r1, r0, ror ip
   11684:	andeq	r1, r1, r0, ror ip
   11688:	andeq	r1, r1, r0, ror ip
   1168c:	andeq	r1, r1, r0, ror ip
   11690:	andeq	r1, r1, r0, ror ip
   11694:	andeq	r1, r1, r0, ror ip
   11698:	andeq	r1, r1, r0, ror ip
   1169c:	andeq	r1, r1, r0, ror ip
   116a0:	andeq	r1, r1, r0, ror ip
   116a4:	andeq	r1, r1, r0, ror ip
   116a8:	andeq	r1, r1, r0, ror ip
   116ac:	andeq	r1, r1, r0, ror ip
   116b0:	andeq	r1, r1, r0, ror ip
   116b4:	andeq	r1, r1, r0, ror ip
   116b8:	andeq	r1, r1, r0, ror ip
   116bc:	andeq	r1, r1, r0, ror ip
   116c0:	andeq	r1, r1, r0, ror ip
   116c4:	andeq	r1, r1, r0, ror ip
   116c8:	andeq	r1, r1, r0, ror ip
   116cc:	andeq	r1, r1, r0, ror ip
   116d0:	andeq	r1, r1, r0, ror ip
   116d4:	andeq	r1, r1, r0, ror ip
   116d8:	andeq	r1, r1, r0, ror ip
   116dc:	andeq	r1, r1, r0, ror ip
   116e0:	andeq	r1, r1, r0, ror ip
   116e4:	andeq	r1, r1, r0, ror ip
   116e8:	andeq	r1, r1, r0, ror ip
   116ec:	andeq	r1, r1, r0, ror ip
   116f0:	andeq	r1, r1, r0, ror ip
   116f4:	andeq	r1, r1, r0, ror ip
   116f8:	andeq	r1, r1, r0, ror ip
   116fc:	andeq	r1, r1, r0, ror ip
   11700:	andeq	r1, r1, r0, ror ip
   11704:	andeq	r1, r1, r0, ror ip
   11708:	andeq	r1, r1, r0, ror ip
   1170c:	andeq	r1, r1, r0, ror ip
   11710:	andeq	r1, r1, r0, ror ip
   11714:	andeq	r1, r1, r0, ror ip
   11718:	andeq	r1, r1, r0, ror ip
   1171c:	andeq	r1, r1, r0, ror ip
   11720:	andeq	r1, r1, r0, ror ip
   11724:	andeq	r1, r1, r0, ror ip
   11728:	andeq	r1, r1, r0, ror ip
   1172c:	andeq	r1, r1, r0, ror ip
   11730:	andeq	r1, r1, r0, ror ip
   11734:	andeq	r1, r1, r0, ror ip
   11738:	andeq	r1, r1, r0, ror ip
   1173c:	andeq	r1, r1, r0, ror ip
   11740:	andeq	r1, r1, r0, ror ip
   11744:	andeq	r1, r1, r0, ror ip
   11748:	andeq	r1, r1, r0, ror ip
   1174c:	andeq	r1, r1, r0, ror ip
   11750:	andeq	r1, r1, r0, ror ip
   11754:	andeq	r1, r1, r0, ror ip
   11758:	andeq	r1, r1, r0, ror ip
   1175c:	andeq	r1, r1, r0, ror ip
   11760:	andeq	r1, r1, r0, ror ip
   11764:	andeq	r1, r1, r0, ror ip
   11768:	andeq	r1, r1, r0, ror ip
   1176c:	andeq	r1, r1, r0, ror ip
   11770:	andeq	r1, r1, r0, ror ip
   11774:	andeq	r1, r1, r0, ror ip
   11778:	andeq	r1, r1, r8, ror #15
   1177c:	andeq	r1, r1, r0, lsl #15
   11780:	movw	r3, #57632	; 0xe120
   11784:	movt	r3, #2
   11788:	ldr	r2, [pc, #2760]	; 12258 <__assert_fail@plt+0x1054>
   1178c:	mov	lr, #1
   11790:	mov	r0, #4
   11794:	ldr	ip, [r3]
   11798:	movw	r1, #57736	; 0xe188
   1179c:	movt	r1, #2
   117a0:	str	r0, [sp]
   117a4:	movw	r0, #53924	; 0xd2a4
   117a8:	movt	r0, #1
   117ac:	str	lr, [sp, #8]
   117b0:	ldr	r1, [r1]
   117b4:	str	ip, [sp, #4]
   117b8:	ldr	r3, [sp, #36]	; 0x24
   117bc:	bl	15788 <__assert_fail@plt+0x4584>
   117c0:	movw	r3, #48760	; 0xbe78
   117c4:	movt	r3, #1
   117c8:	add	r0, r3, r0, lsl #2
   117cc:	ldr	r3, [r0, #804]	; 0x324
   117d0:	cmp	r3, #0
   117d4:	beq	117e0 <__assert_fail@plt+0x5dc>
   117d8:	cmp	r3, #1
   117dc:	bne	11330 <__assert_fail@plt+0x12c>
   117e0:	strb	r3, [r4, #8]
   117e4:	b	11330 <__assert_fail@plt+0x12c>
   117e8:	mov	r3, #1
   117ec:	strb	r3, [r4, #156]	; 0x9c
   117f0:	b	11330 <__assert_fail@plt+0x12c>
   117f4:	movw	r7, #57736	; 0xe188
   117f8:	movt	r7, #2
   117fc:	ldr	r0, [r7]
   11800:	cmp	r0, #0
   11804:	beq	11b88 <__assert_fail@plt+0x984>
   11808:	movw	r1, #52988	; 0xcefc
   1180c:	movt	r1, #1
   11810:	add	r3, sp, #72	; 0x48
   11814:	mov	r2, #10
   11818:	str	r1, [sp]
   1181c:	mov	r1, #0
   11820:	bl	1ab80 <__assert_fail@plt+0x997c>
   11824:	subs	r1, r0, #0
   11828:	bne	12900 <__assert_fail@plt+0x16fc>
   1182c:	ldrd	r2, [sp, #72]	; 0x48
   11830:	mov	r9, #0
   11834:	mvn	r8, #0
   11838:	cmp	r3, r9
   1183c:	cmpeq	r2, r8
   11840:	bhi	127f8 <__assert_fail@plt+0x15f4>
   11844:	mov	r7, #1
   11848:	str	r2, [sp, #24]
   1184c:	str	r7, [sp, #32]
   11850:	b	11330 <__assert_fail@plt+0x12c>
   11854:	movw	r3, #57624	; 0xe118
   11858:	movt	r3, #2
   1185c:	mov	r2, #0
   11860:	mov	r7, #1
   11864:	strb	r2, [r3]
   11868:	b	11330 <__assert_fail@plt+0x12c>
   1186c:	movw	r3, #57736	; 0xe188
   11870:	movt	r3, #2
   11874:	ldr	r0, [r3]
   11878:	cmp	r0, #0
   1187c:	beq	12888 <__assert_fail@plt+0x1684>
   11880:	bl	142a4 <__assert_fail@plt+0x30a0>
   11884:	and	sl, sl, r0
   11888:	mov	r7, #1
   1188c:	uxtb	sl, sl
   11890:	b	11330 <__assert_fail@plt+0x12c>
   11894:	movw	r0, #53980	; 0xd2dc
   11898:	movt	r0, #1
   1189c:	bl	142a4 <__assert_fail@plt+0x30a0>
   118a0:	and	sl, sl, r0
   118a4:	uxtb	sl, sl
   118a8:	b	11330 <__assert_fail@plt+0x12c>
   118ac:	ldr	r8, [pc, #2472]	; 1225c <__assert_fail@plt+0x1058>
   118b0:	mov	r2, #0
   118b4:	movw	r7, #57736	; 0xe188
   118b8:	movt	r7, #2
   118bc:	mov	r1, r2
   118c0:	ldr	r3, [pc, #2456]	; 12260 <__assert_fail@plt+0x105c>
   118c4:	ldr	r0, [r7]
   118c8:	str	r8, [sp]
   118cc:	bl	1ab80 <__assert_fail@plt+0x997c>
   118d0:	cmp	r0, #0
   118d4:	bne	12918 <__assert_fail@plt+0x1714>
   118d8:	mov	r7, #1
   118dc:	b	11330 <__assert_fail@plt+0x12c>
   118e0:	movw	r0, #53964	; 0xd2cc
   118e4:	movt	r0, #1
   118e8:	bl	142a4 <__assert_fail@plt+0x30a0>
   118ec:	and	sl, sl, r0
   118f0:	uxtb	sl, sl
   118f4:	b	11330 <__assert_fail@plt+0x12c>
   118f8:	movw	r0, #53984	; 0xd2e0
   118fc:	movt	r0, #1
   11900:	bl	142a4 <__assert_fail@plt+0x30a0>
   11904:	and	sl, sl, r0
   11908:	uxtb	sl, sl
   1190c:	b	11330 <__assert_fail@plt+0x12c>
   11910:	movw	r0, #53956	; 0xd2c4
   11914:	movt	r0, #1
   11918:	bl	142a4 <__assert_fail@plt+0x30a0>
   1191c:	and	sl, sl, r0
   11920:	uxtb	sl, sl
   11924:	b	11330 <__assert_fail@plt+0x12c>
   11928:	movw	r0, #53948	; 0xd2bc
   1192c:	movt	r0, #1
   11930:	bl	142a4 <__assert_fail@plt+0x30a0>
   11934:	and	sl, sl, r0
   11938:	uxtb	sl, sl
   1193c:	b	11330 <__assert_fail@plt+0x12c>
   11940:	movw	r0, #55880	; 0xda48
   11944:	movt	r0, #1
   11948:	bl	142a4 <__assert_fail@plt+0x30a0>
   1194c:	and	sl, sl, r0
   11950:	uxtb	sl, sl
   11954:	b	11330 <__assert_fail@plt+0x12c>
   11958:	movw	r0, #53940	; 0xd2b4
   1195c:	movt	r0, #1
   11960:	bl	142a4 <__assert_fail@plt+0x30a0>
   11964:	and	sl, sl, r0
   11968:	uxtb	sl, sl
   1196c:	b	11330 <__assert_fail@plt+0x12c>
   11970:	movw	r0, #53936	; 0xd2b0
   11974:	movt	r0, #1
   11978:	bl	142a4 <__assert_fail@plt+0x30a0>
   1197c:	and	sl, sl, r0
   11980:	uxtb	sl, sl
   11984:	b	11330 <__assert_fail@plt+0x12c>
   11988:	movw	r7, #57736	; 0xe188
   1198c:	movt	r7, #2
   11990:	ldr	r0, [r7]
   11994:	cmp	r0, #0
   11998:	moveq	r3, #3
   1199c:	streq	r3, [r4, #152]	; 0x98
   119a0:	beq	119e0 <__assert_fail@plt+0x7dc>
   119a4:	ldr	r8, [pc, #2224]	; 1225c <__assert_fail@plt+0x1058>
   119a8:	mov	r2, #0
   119ac:	add	r3, sp, #72	; 0x48
   119b0:	mov	r1, r2
   119b4:	str	r8, [sp]
   119b8:	bl	1ab80 <__assert_fail@plt+0x997c>
   119bc:	subs	r1, r0, #0
   119c0:	bne	128b4 <__assert_fail@plt+0x16b0>
   119c4:	ldrd	r2, [sp, #72]	; 0x48
   119c8:	mov	r9, #0
   119cc:	mvn	r8, #0
   119d0:	cmp	r3, r9
   119d4:	cmpeq	r2, r8
   119d8:	bhi	128cc <__assert_fail@plt+0x16c8>
   119dc:	str	r2, [r4, #152]	; 0x98
   119e0:	mov	r3, #1
   119e4:	mov	r7, r3
   119e8:	strb	r3, [r4, #26]
   119ec:	b	11330 <__assert_fail@plt+0x12c>
   119f0:	movw	r0, #53972	; 0xd2d4
   119f4:	movt	r0, #1
   119f8:	bl	142a4 <__assert_fail@plt+0x30a0>
   119fc:	and	sl, sl, r0
   11a00:	uxtb	sl, sl
   11a04:	b	11330 <__assert_fail@plt+0x12c>
   11a08:	ldr	ip, [pc, #2124]	; 1225c <__assert_fail@plt+0x1058>
   11a0c:	mov	r7, #1
   11a10:	mov	r2, #0
   11a14:	movw	r8, #57736	; 0xe188
   11a18:	movt	r8, #2
   11a1c:	mov	r1, r2
   11a20:	ldr	r3, [pc, #2108]	; 12264 <__assert_fail@plt+0x1060>
   11a24:	strb	r7, [r4, #25]
   11a28:	ldr	r0, [r8]
   11a2c:	str	ip, [sp]
   11a30:	bl	1ab80 <__assert_fail@plt+0x997c>
   11a34:	cmp	r0, #0
   11a38:	beq	11330 <__assert_fail@plt+0x12c>
   11a3c:	ldr	r3, [pc, #2072]	; 1225c <__assert_fail@plt+0x1058>
   11a40:	mov	r2, #78	; 0x4e
   11a44:	ldr	ip, [r8]
   11a48:	ldr	r1, [sp, #64]	; 0x40
   11a4c:	sub	r3, r3, #228	; 0xe4
   11a50:	str	ip, [sp]
   11a54:	bl	1aaf0 <__assert_fail@plt+0x98ec>
   11a58:	movw	r0, #53968	; 0xd2d0
   11a5c:	movt	r0, #1
   11a60:	bl	142a4 <__assert_fail@plt+0x30a0>
   11a64:	and	sl, sl, r0
   11a68:	uxtb	sl, sl
   11a6c:	b	11330 <__assert_fail@plt+0x12c>
   11a70:	movw	r0, #53960	; 0xd2c8
   11a74:	movt	r0, #1
   11a78:	bl	142a4 <__assert_fail@plt+0x30a0>
   11a7c:	and	sl, sl, r0
   11a80:	uxtb	sl, sl
   11a84:	b	11330 <__assert_fail@plt+0x12c>
   11a88:	movw	r0, #53952	; 0xd2c0
   11a8c:	movt	r0, #1
   11a90:	bl	142a4 <__assert_fail@plt+0x30a0>
   11a94:	and	sl, sl, r0
   11a98:	uxtb	sl, sl
   11a9c:	b	11330 <__assert_fail@plt+0x12c>
   11aa0:	movw	r0, #53944	; 0xd2b8
   11aa4:	movt	r0, #1
   11aa8:	bl	142a4 <__assert_fail@plt+0x30a0>
   11aac:	and	sl, sl, r0
   11ab0:	uxtb	sl, sl
   11ab4:	b	11330 <__assert_fail@plt+0x12c>
   11ab8:	movw	r0, #53976	; 0xd2d8
   11abc:	movt	r0, #1
   11ac0:	bl	142a4 <__assert_fail@plt+0x30a0>
   11ac4:	and	sl, sl, r0
   11ac8:	uxtb	sl, sl
   11acc:	b	11330 <__assert_fail@plt+0x12c>
   11ad0:	movw	r7, #57736	; 0xe188
   11ad4:	movt	r7, #2
   11ad8:	ldr	r3, [r7]
   11adc:	ldrb	r3, [r3]
   11ae0:	sub	r3, r3, #100	; 0x64
   11ae4:	cmp	r3, #20
   11ae8:	ldrls	pc, [pc, r3, lsl #2]
   11aec:	b	12930 <__assert_fail@plt+0x172c>
   11af0:	muleq	r1, r4, ip
   11af4:	andeq	r2, r1, r0, lsr r9
   11af8:	andeq	r2, r1, r0, lsr r9
   11afc:	andeq	r2, r1, r0, lsr r9
   11b00:	andeq	r2, r1, r0, lsr r9
   11b04:	andeq	r2, r1, r0, lsr r9
   11b08:	andeq	r2, r1, r0, lsr r9
   11b0c:	andeq	r2, r1, r0, lsr r9
   11b10:	andeq	r2, r1, r0, lsr r9
   11b14:	andeq	r2, r1, r0, lsr r9
   11b18:	andeq	r1, r1, r0, lsr #25
   11b1c:			; <UNDEFINED> instruction: 0x00011cbc
   11b20:	andeq	r2, r1, r0, lsr r9
   11b24:	andeq	r2, r1, r0, lsr r9
   11b28:	andeq	r2, r1, r0, lsr r9
   11b2c:	andeq	r2, r1, r0, lsr r9
   11b30:	andeq	r2, r1, r0, lsr r9
   11b34:	andeq	r2, r1, r0, lsr r9
   11b38:	andeq	r2, r1, r0, lsr r9
   11b3c:	andeq	r2, r1, r0, lsr r9
   11b40:	andeq	r1, r1, r8, ror ip
   11b44:	mov	r4, #0
   11b48:	movw	r1, #53988	; 0xd2e4
   11b4c:	movt	r1, #1
   11b50:	movw	r3, #57628	; 0xe11c
   11b54:	movt	r3, #2
   11b58:	movw	r0, #57732	; 0xe184
   11b5c:	movt	r0, #2
   11b60:	movw	r2, #53628	; 0xd17c
   11b64:	movt	r2, #1
   11b68:	stm	sp, {r1, r4}
   11b6c:	movw	r1, #50120	; 0xc3c8
   11b70:	movt	r1, #1
   11b74:	ldr	r0, [r0]
   11b78:	ldr	r3, [r3]
   11b7c:	bl	1a06c <__assert_fail@plt+0x8e68>
   11b80:	mov	r0, r4
   11b84:	bl	110b4 <exit@plt>
   11b88:	mov	r7, #1
   11b8c:	mov	r3, #32
   11b90:	str	r3, [sp, #24]
   11b94:	str	r7, [sp, #32]
   11b98:	b	11330 <__assert_fail@plt+0x12c>
   11b9c:	cmp	sl, #0
   11ba0:	beq	121bc <__assert_fail@plt+0xfb8>
   11ba4:	ldrb	r3, [r4, #26]
   11ba8:	cmp	r3, #0
   11bac:	beq	11bc4 <__assert_fail@plt+0x9c0>
   11bb0:	ldr	r3, [r4, #36]	; 0x24
   11bb4:	cmp	r3, #0
   11bb8:	movwne	r1, #54004	; 0xd2f4
   11bbc:	movtne	r1, #1
   11bc0:	bne	1286c <__assert_fail@plt+0x1668>
   11bc4:	movw	fp, #57712	; 0xe170
   11bc8:	movt	fp, #2
   11bcc:	ldrb	r2, [r4, #156]	; 0x9c
   11bd0:	cmp	r7, #0
   11bd4:	ldr	r3, [fp]
   11bd8:	sub	r6, r6, r3
   11bdc:	bne	11cc4 <__assert_fail@plt+0xac0>
   11be0:	cmp	r6, #2
   11be4:	beq	11d0c <__assert_fail@plt+0xb08>
   11be8:	cmp	r6, #3
   11bec:	beq	12484 <__assert_fail@plt+0x1280>
   11bf0:	cmp	r6, #1
   11bf4:	beq	11ce4 <__assert_fail@plt+0xae0>
   11bf8:	cmp	r2, #0
   11bfc:	beq	11d38 <__assert_fail@plt+0xb34>
   11c00:	cmp	r6, #1
   11c04:	ble	11d38 <__assert_fail@plt+0xb34>
   11c08:	mov	r2, #5
   11c0c:	movw	r1, #54052	; 0xd324
   11c10:	movt	r1, #1
   11c14:	mov	r0, #0
   11c18:	bl	10fc4 <dcgettext@plt>
   11c1c:	ldr	r3, [fp]
   11c20:	mov	r4, r0
   11c24:	add	r3, r3, #1
   11c28:	ldr	r0, [r5, r3, lsl #2]
   11c2c:	bl	199a8 <__assert_fail@plt+0x87a4>
   11c30:	mov	r1, #0
   11c34:	mov	r3, r0
   11c38:	mov	r2, r4
   11c3c:	mov	r0, r1
   11c40:	bl	1103c <error@plt>
   11c44:	mov	r2, #5
   11c48:	movw	r1, #54072	; 0xd338
   11c4c:	movt	r1, #1
   11c50:	mov	r0, #0
   11c54:	bl	10fc4 <dcgettext@plt>
   11c58:	mov	r1, #0
   11c5c:	mov	r3, r0
   11c60:	movw	r2, #54604	; 0xd54c
   11c64:	movt	r2, #1
   11c68:	mov	r0, r1
   11c6c:	bl	1103c <error@plt>
   11c70:	mov	r0, #1
   11c74:	bl	14f70 <__assert_fail@plt+0x3d6c>
   11c78:	mov	r3, #16
   11c7c:	mov	r2, #6
   11c80:	ldr	r1, [sp, #40]	; 0x28
   11c84:	mov	r7, #1
   11c88:	strd	r2, [r4]
   11c8c:	str	r1, [r4, #44]	; 0x2c
   11c90:	b	11330 <__assert_fail@plt+0x12c>
   11c94:	mov	r3, #10
   11c98:	mov	r2, #7
   11c9c:	b	11c80 <__assert_fail@plt+0xa7c>
   11ca0:	movw	r3, #10868	; 0x2a74
   11ca4:	movt	r3, #1
   11ca8:	mov	r2, #0
   11cac:	mov	r7, #1
   11cb0:	str	r2, [r4]
   11cb4:	str	r3, [r4, #44]	; 0x2c
   11cb8:	b	11330 <__assert_fail@plt+0x12c>
   11cbc:	mov	r3, #8
   11cc0:	b	11c98 <__assert_fail@plt+0xa94>
   11cc4:	cmp	r2, #0
   11cc8:	beq	11d38 <__assert_fail@plt+0xb34>
   11ccc:	cmp	r6, #2
   11cd0:	beq	11d0c <__assert_fail@plt+0xb08>
   11cd4:	cmp	r6, #3
   11cd8:	beq	12484 <__assert_fail@plt+0x1280>
   11cdc:	cmp	r6, #1
   11ce0:	bne	11c00 <__assert_fail@plt+0x9fc>
   11ce4:	cmp	r2, #0
   11ce8:	ldr	r0, [r5, r3, lsl #2]
   11cec:	bne	12590 <__assert_fail@plt+0x138c>
   11cf0:	ldrb	r3, [r0]
   11cf4:	cmp	r3, #43	; 0x2b
   11cf8:	beq	12590 <__assert_fail@plt+0x138c>
   11cfc:	mov	r7, #0
   11d00:	mov	r6, #1
   11d04:	str	r7, [sp, #36]	; 0x24
   11d08:	b	11d40 <__assert_fail@plt+0xb3c>
   11d0c:	add	r3, r3, #1
   11d10:	cmp	r2, #0
   11d14:	ldr	r0, [r5, r3, lsl #2]
   11d18:	bne	124e0 <__assert_fail@plt+0x12dc>
   11d1c:	ldrb	r3, [r0]
   11d20:	cmp	r3, #43	; 0x2b
   11d24:	beq	124e0 <__assert_fail@plt+0x12dc>
   11d28:	sub	r3, r3, #48	; 0x30
   11d2c:	cmp	r3, #9
   11d30:	bls	124e0 <__assert_fail@plt+0x12dc>
   11d34:	mov	r6, #2
   11d38:	mov	r7, #0
   11d3c:	str	r7, [sp, #36]	; 0x24
   11d40:	ldrb	r3, [r4, #157]	; 0x9d
   11d44:	cmp	r3, #0
   11d48:	beq	11d6c <__assert_fail@plt+0xb68>
   11d4c:	ldr	r2, [r4, #44]	; 0x2c
   11d50:	movw	r3, #10868	; 0x2a74
   11d54:	movt	r3, #1
   11d58:	cmp	r2, r3
   11d5c:	beq	124c4 <__assert_fail@plt+0x12c0>
   11d60:	movw	r3, #19396	; 0x4bc4
   11d64:	movt	r3, #1
   11d68:	str	r3, [r4, #44]	; 0x2c
   11d6c:	ldrb	r3, [r4, #25]
   11d70:	cmp	r3, #0
   11d74:	beq	11da8 <__assert_fail@plt+0xba4>
   11d78:	ldrd	r0, [r4, #136]	; 0x88
   11d7c:	mov	r2, #0
   11d80:	mov	r3, #0
   11d84:	ldrd	r8, [r4, #144]	; 0x90
   11d88:	strd	r2, [sp, #40]	; 0x28
   11d8c:	adds	r2, r0, r8
   11d90:	adcs	r3, r1, r9
   11d94:	bcs	128a4 <__assert_fail@plt+0x16a0>
   11d98:	ldrd	r0, [sp, #40]	; 0x28
   11d9c:	strd	r2, [r4, #160]	; 0xa0
   11da0:	orrs	r1, r0, r1
   11da4:	bne	12864 <__assert_fail@plt+0x1660>
   11da8:	ldr	r3, [r4, #36]	; 0x24
   11dac:	cmp	r3, #0
   11db0:	beq	121c4 <__assert_fail@plt+0xfc0>
   11db4:	cmp	r6, #0
   11db8:	ldrgt	r3, [fp]
   11dbc:	ldrle	r5, [pc, #1188]	; 12268 <__assert_fail@plt+0x1064>
   11dc0:	addgt	r5, r5, r3, lsl #2
   11dc4:	str	r5, [r4, #12]
   11dc8:	bl	13b74 <__assert_fail@plt+0x2970>
   11dcc:	ldr	r3, [r4, #20]
   11dd0:	mov	r6, r0
   11dd4:	mov	r5, r0
   11dd8:	cmp	r3, #0
   11ddc:	beq	1218c <__assert_fail@plt+0xf88>
   11de0:	ldrd	r0, [r4, #136]	; 0x88
   11de4:	bl	13dc8 <__assert_fail@plt+0x2bc4>
   11de8:	ldr	r3, [r4, #20]
   11dec:	and	r0, r0, r6
   11df0:	uxtb	r2, r0
   11df4:	mov	r5, r2
   11df8:	str	r2, [sp, #40]	; 0x28
   11dfc:	cmp	r3, #0
   11e00:	beq	1218c <__assert_fail@plt+0xf88>
   11e04:	ldrb	r3, [r4, #157]	; 0x9d
   11e08:	cmp	r3, #0
   11e0c:	moveq	r7, #0
   11e10:	moveq	r3, r7
   11e14:	beq	11e2c <__assert_fail@plt+0xc28>
   11e18:	ldr	r3, [r4, #136]	; 0x88
   11e1c:	ldr	r2, [r4, #140]	; 0x8c
   11e20:	subs	r7, r7, r3
   11e24:	ldr	r3, [sp, #36]	; 0x24
   11e28:	sbc	r3, r3, r2
   11e2c:	ldr	lr, [r4, #36]	; 0x24
   11e30:	str	r7, [r4, #128]	; 0x80
   11e34:	str	r3, [r4, #132]	; 0x84
   11e38:	cmp	lr, #0
   11e3c:	beq	126fc <__assert_fail@plt+0x14f8>
   11e40:	ldr	r0, [r4, #40]	; 0x28
   11e44:	movw	ip, #48760	; 0xbe78
   11e48:	movt	ip, #1
   11e4c:	mov	r5, #1
   11e50:	add	lr, r0, lr, lsl #5
   11e54:	ldr	r3, [r0, #4]
   11e58:	mov	r1, r5
   11e5c:	add	r3, ip, r3, lsl #2
   11e60:	ldr	r6, [r3, #132]	; 0x84
   11e64:	mov	r2, r6
   11e68:	b	11e70 <__assert_fail@plt+0xc6c>
   11e6c:	mov	r2, r3
   11e70:	udiv	r3, r1, r2
   11e74:	mls	r3, r2, r3, r1
   11e78:	mov	r1, r2
   11e7c:	cmp	r3, #0
   11e80:	bne	11e6c <__assert_fail@plt+0xc68>
   11e84:	udiv	r2, r6, r2
   11e88:	add	r0, r0, #32
   11e8c:	cmp	lr, r0
   11e90:	mul	r5, r5, r2
   11e94:	mov	r6, r5
   11e98:	bne	11e54 <__assert_fail@plt+0xc50>
   11e9c:	ldr	r3, [sp, #32]
   11ea0:	cmp	r3, #0
   11ea4:	beq	12218 <__assert_fail@plt+0x1014>
   11ea8:	ldr	r2, [sp, #24]
   11eac:	cmp	r2, #0
   11eb0:	beq	11ec4 <__assert_fail@plt+0xcc0>
   11eb4:	udiv	r3, r2, r5
   11eb8:	mls	r3, r5, r3, r2
   11ebc:	cmp	r3, #0
   11ec0:	beq	12720 <__assert_fail@plt+0x151c>
   11ec4:	mov	r2, #5
   11ec8:	movw	r1, #54164	; 0xd394
   11ecc:	movt	r1, #1
   11ed0:	mov	r0, #0
   11ed4:	bl	10fc4 <dcgettext@plt>
   11ed8:	mov	r1, #0
   11edc:	mov	r2, r0
   11ee0:	str	r5, [sp]
   11ee4:	mov	r0, r1
   11ee8:	ldr	r3, [sp, #24]
   11eec:	bl	1103c <error@plt>
   11ef0:	str	r6, [r4, #28]
   11ef4:	ldr	lr, [r4, #36]	; 0x24
   11ef8:	cmp	lr, #0
   11efc:	beq	11f70 <__assert_fail@plt+0xd6c>
   11f00:	movw	ip, #48760	; 0xbe78
   11f04:	movt	ip, #1
   11f08:	ldr	r5, [r4, #28]
   11f0c:	mov	r0, #0
   11f10:	ldr	r2, [r4, #40]	; 0x28
   11f14:	add	lr, r2, lr, lsl #5
   11f18:	mov	r1, r2
   11f1c:	ldr	r6, [r1, #4]
   11f20:	add	r1, r1, #32
   11f24:	ldr	r7, [r1, #-8]
   11f28:	add	r6, ip, r6, lsl #2
   11f2c:	ldr	r3, [r6, #132]	; 0x84
   11f30:	udiv	r3, r5, r3
   11f34:	mla	r3, r7, r3, r3
   11f38:	cmp	r0, r3
   11f3c:	movcc	r0, r3
   11f40:	cmp	lr, r1
   11f44:	bne	11f1c <__assert_fail@plt+0xd18>
   11f48:	ldr	r1, [r2, #4]
   11f4c:	add	r2, r2, #32
   11f50:	ldr	r6, [r2, #-8]
   11f54:	add	r1, ip, r1, lsl #2
   11f58:	ldr	r3, [r1, #132]	; 0x84
   11f5c:	udiv	r3, r5, r3
   11f60:	mls	r3, r6, r3, r0
   11f64:	str	r3, [r2, #-4]
   11f68:	cmp	r2, lr
   11f6c:	bne	11f48 <__assert_fail@plt+0xd44>
   11f70:	ldrb	fp, [r4, #26]
   11f74:	cmp	fp, #0
   11f78:	beq	12278 <__assert_fail@plt+0x1074>
   11f7c:	ldr	r3, [r4, #152]	; 0x98
   11f80:	movw	r2, #57732	; 0xe184
   11f84:	movt	r2, #2
   11f88:	mov	r5, fp
   11f8c:	str	r2, [sp, #24]
   11f90:	movw	r2, #49660	; 0xc1fc
   11f94:	movt	r2, #1
   11f98:	str	r2, [sp, #32]
   11f9c:	movw	r2, #49656	; 0xc1f8
   11fa0:	movt	r2, #1
   11fa4:	cmp	r3, #100	; 0x64
   11fa8:	movcc	r3, #100	; 0x64
   11fac:	str	r2, [sp, #36]	; 0x24
   11fb0:	mov	r0, r3
   11fb4:	str	r3, [sp, #72]	; 0x48
   11fb8:	bl	1a27c <__assert_fail@plt+0x9078>
   11fbc:	ldrd	r6, [r4, #136]	; 0x88
   11fc0:	str	r0, [sp, #20]
   11fc4:	ldrb	r3, [r4, #25]
   11fc8:	ldr	r9, [r4, #152]	; 0x98
   11fcc:	cmp	r3, #0
   11fd0:	beq	12008 <__assert_fail@plt+0xe04>
   11fd4:	ldrd	r0, [r4, #160]	; 0xa0
   11fd8:	mov	r3, #0
   11fdc:	cmp	r3, r1
   11fe0:	cmpeq	r9, r0
   11fe4:	bhi	127dc <__assert_fail@plt+0x15d8>
   11fe8:	subs	ip, r0, r9
   11fec:	sbc	r3, r1, r3
   11ff0:	str	ip, [sp, #56]	; 0x38
   11ff4:	str	r3, [sp, #60]	; 0x3c
   11ff8:	ldrd	r2, [sp, #56]	; 0x38
   11ffc:	cmp	r3, r7
   12000:	cmpeq	r2, r6
   12004:	bls	127dc <__assert_fail@plt+0x15d8>
   12008:	cmp	r9, #0
   1200c:	beq	120b0 <__assert_fail@plt+0xeac>
   12010:	mov	r9, #0
   12014:	ldr	r3, [r4, #20]
   12018:	mov	r8, fp
   1201c:	cmp	r3, #0
   12020:	bne	12054 <__assert_fail@plt+0xe50>
   12024:	b	12170 <__assert_fail@plt+0xf6c>
   12028:	bl	110d8 <__errno_location@plt>
   1202c:	ldr	r0, [r0]
   12030:	bl	13cac <__assert_fail@plt+0x2aa8>
   12034:	mov	sl, r0
   12038:	bl	13b74 <__assert_fail@plt+0x2970>
   1203c:	ldr	r3, [r4, #20]
   12040:	and	r0, r0, sl
   12044:	and	r0, r0, r8
   12048:	uxtb	r8, r0
   1204c:	cmp	r3, #0
   12050:	beq	12170 <__assert_fail@plt+0xf6c>
   12054:	mov	r0, r3
   12058:	bl	11114 <fgetc@plt>
   1205c:	cmn	r0, #1
   12060:	beq	12028 <__assert_fail@plt+0xe24>
   12064:	adds	r6, r6, #1
   12068:	and	r5, r5, r8
   1206c:	adc	r7, r7, #0
   12070:	cmp	r0, #0
   12074:	mov	sl, r0
   12078:	uxtb	r5, r5
   1207c:	blt	12178 <__assert_fail@plt+0xf74>
   12080:	bl	110a8 <__ctype_b_loc@plt>
   12084:	ldr	r2, [r0]
   12088:	lsl	r3, sl, #1
   1208c:	ldr	r1, [r4, #152]	; 0x98
   12090:	ldrh	r3, [r2, r3]
   12094:	tst	r3, #16384	; 0x4000
   12098:	beq	11fc4 <__assert_fail@plt+0xdc0>
   1209c:	ldr	r3, [sp, #20]
   120a0:	strb	sl, [r3, r9]
   120a4:	add	r9, r9, #1
   120a8:	cmp	r9, r1
   120ac:	bcc	12014 <__assert_fail@plt+0xe10>
   120b0:	ldrb	r3, [r4, #25]
   120b4:	cmp	r3, #0
   120b8:	beq	120cc <__assert_fail@plt+0xec8>
   120bc:	ldrd	r2, [r4, #160]	; 0xa0
   120c0:	cmp	r7, r3
   120c4:	cmpeq	r6, r2
   120c8:	bcs	125bc <__assert_fail@plt+0x13b8>
   120cc:	ldr	r3, [sp, #72]	; 0x48
   120d0:	cmp	r3, r9
   120d4:	beq	1223c <__assert_fail@plt+0x1038>
   120d8:	ldr	r3, [r4, #20]
   120dc:	mov	r8, fp
   120e0:	cmp	r3, #0
   120e4:	bne	12118 <__assert_fail@plt+0xf14>
   120e8:	b	12170 <__assert_fail@plt+0xf6c>
   120ec:	bl	110d8 <__errno_location@plt>
   120f0:	ldr	r0, [r0]
   120f4:	bl	13cac <__assert_fail@plt+0x2aa8>
   120f8:	mov	sl, r0
   120fc:	bl	13b74 <__assert_fail@plt+0x2970>
   12100:	ldr	r3, [r4, #20]
   12104:	and	r0, r0, sl
   12108:	and	r0, r0, r8
   1210c:	uxtb	r8, r0
   12110:	cmp	r3, #0
   12114:	beq	12170 <__assert_fail@plt+0xf6c>
   12118:	mov	r0, r3
   1211c:	bl	11114 <fgetc@plt>
   12120:	cmn	r0, #1
   12124:	beq	120ec <__assert_fail@plt+0xee8>
   12128:	adds	r6, r6, #1
   1212c:	and	r5, r5, r8
   12130:	adc	r7, r7, #0
   12134:	cmp	r0, #0
   12138:	mov	sl, r0
   1213c:	uxtb	r5, r5
   12140:	blt	12178 <__assert_fail@plt+0xf74>
   12144:	beq	125bc <__assert_fail@plt+0x13b8>
   12148:	bl	110a8 <__ctype_b_loc@plt>
   1214c:	ldr	r2, [r0]
   12150:	lsl	r3, sl, #1
   12154:	ldrh	r3, [r2, r3]
   12158:	tst	r3, #16384	; 0x4000
   1215c:	beq	11fc4 <__assert_fail@plt+0xdc0>
   12160:	ldr	r3, [sp, #20]
   12164:	strb	sl, [r3, r9]
   12168:	add	r9, r9, #1
   1216c:	b	120b0 <__assert_fail@plt+0xeac>
   12170:	and	r5, r5, r8
   12174:	uxtb	r5, r5
   12178:	ldr	r0, [sp, #20]
   1217c:	bl	15c8c <__assert_fail@plt+0x4a88>
   12180:	ldr	r3, [sp, #40]	; 0x28
   12184:	and	r3, r3, r5
   12188:	and	r5, r3, #1
   1218c:	ldrb	r3, [r4, #24]
   12190:	cmp	r3, #0
   12194:	bne	121d4 <__assert_fail@plt+0xfd0>
   12198:	eor	r0, r5, #1
   1219c:	uxtb	r0, r0
   121a0:	add	sp, sp, #84	; 0x54
   121a4:	ldrd	r4, [sp]
   121a8:	ldrd	r6, [sp, #8]
   121ac:	ldrd	r8, [sp, #16]
   121b0:	ldrd	sl, [sp, #24]
   121b4:	add	sp, sp, #32
   121b8:	pop	{pc}		; (ldr pc, [sp], #4)
   121bc:	mov	r0, #1
   121c0:	b	121a0 <__assert_fail@plt+0xf9c>
   121c4:	movw	r0, #54160	; 0xd390
   121c8:	movt	r0, #1
   121cc:	bl	142a4 <__assert_fail@plt+0x30a0>
   121d0:	b	11db4 <__assert_fail@plt+0xbb0>
   121d4:	movw	r3, #57728	; 0xe180
   121d8:	movt	r3, #2
   121dc:	ldr	r0, [r3]
   121e0:	bl	15b78 <__assert_fail@plt+0x4974>
   121e4:	cmn	r0, #1
   121e8:	bne	12198 <__assert_fail@plt+0xf94>
   121ec:	bl	110d8 <__errno_location@plt>
   121f0:	ldr	r4, [r0]
   121f4:	mov	r2, #5
   121f8:	movw	r1, #49672	; 0xc208
   121fc:	movt	r1, #1
   12200:	mov	r0, #0
   12204:	bl	10fc4 <dcgettext@plt>
   12208:	mov	r2, r0
   1220c:	mov	r0, #1
   12210:	mov	r1, r4
   12214:	bl	1103c <error@plt>
   12218:	cmp	r5, #15
   1221c:	ldrgt	lr, [r4, #36]	; 0x24
   12220:	strgt	r5, [r4, #28]
   12224:	bgt	11f08 <__assert_fail@plt+0xd04>
   12228:	mov	r3, #16
   1222c:	sdiv	r3, r3, r5
   12230:	mul	r5, r5, r3
   12234:	str	r5, [r4, #28]
   12238:	b	11ef4 <__assert_fail@plt+0xcf0>
   1223c:	add	r1, sp, #72	; 0x48
   12240:	ldr	r0, [sp, #20]
   12244:	bl	1a450 <__assert_fail@plt+0x924c>
   12248:	str	r0, [sp, #20]
   1224c:	b	120d8 <__assert_fail@plt+0xed4>
   12250:	andeq	ip, r1, r8, lsr #1
   12254:	andeq	ip, r1, r8, ror #2
   12258:	andeq	ip, r1, r4, lsr #3
   1225c:	andeq	ip, r1, ip, lsl #3
   12260:	andeq	lr, r2, r8, lsl r2
   12264:	andeq	lr, r2, r0, lsr #4
   12268:	andeq	ip, r1, r0, lsr #1
   1226c:			; <UNDEFINED> instruction: 0x0001c1b0
   12270:	andeq	ip, r1, r4, asr #32
   12274:	andeq	ip, r1, r8, lsr #1
   12278:	mov	r0, #2
   1227c:	ldr	r1, [r4, #28]
   12280:	bl	1a3e0 <__assert_fail@plt+0x91dc>
   12284:	ldr	r3, [r4, #28]
   12288:	str	r0, [sp, #72]	; 0x48
   1228c:	ldrb	r2, [r4, #25]
   12290:	ldrd	r6, [r4, #136]	; 0x88
   12294:	add	r0, r0, r3
   12298:	cmp	r2, #0
   1229c:	str	r0, [sp, #76]	; 0x4c
   122a0:	beq	12390 <__assert_fail@plt+0x118c>
   122a4:	mov	sl, r2
   122a8:	b	12334 <__assert_fail@plt+0x1130>
   122ac:	subs	ip, r2, r6
   122b0:	lsl	r5, fp, #2
   122b4:	ldr	r0, [r4, #28]
   122b8:	sbc	r3, r3, r7
   122bc:	mov	r1, #0
   122c0:	str	ip, [sp, #48]	; 0x30
   122c4:	str	r3, [sp, #52]	; 0x34
   122c8:	add	r3, sp, #80	; 0x50
   122cc:	add	r3, r3, r5
   122d0:	ldr	r8, [r3, #-8]
   122d4:	ldrd	r2, [sp, #48]	; 0x30
   122d8:	cmp	r1, r3
   122dc:	mov	r1, r8
   122e0:	cmpeq	r0, r2
   122e4:	movhi	r0, r2
   122e8:	ldr	r2, [sp, #20]
   122ec:	bl	14ad8 <__assert_fail@plt+0x38d4>
   122f0:	ldr	r3, [r4, #28]
   122f4:	and	sl, sl, r0
   122f8:	ldr	r2, [sp, #64]	; 0x40
   122fc:	cmp	r2, r3
   12300:	bcc	12400 <__assert_fail@plt+0x11fc>
   12304:	bne	12848 <__assert_fail@plt+0x1644>
   12308:	eor	fp, fp, #1
   1230c:	add	r3, sp, #80	; 0x50
   12310:	str	r8, [sp]
   12314:	add	r3, r3, fp, lsl #2
   12318:	mov	r0, r6
   1231c:	mov	r1, r7
   12320:	ldr	r3, [r3, #-8]
   12324:	bl	13fe4 <__assert_fail@plt+0x2de0>
   12328:	ldr	r3, [sp, #64]	; 0x40
   1232c:	adds	r6, r6, r3
   12330:	adc	r7, r7, #0
   12334:	ldrd	r2, [r4, #160]	; 0xa0
   12338:	cmp	r3, r7
   1233c:	cmpeq	r2, r6
   12340:	bhi	122ac <__assert_fail@plt+0x10a8>
   12344:	mov	r3, #0
   12348:	str	sl, [sp, #20]
   1234c:	str	r3, [sp, #64]	; 0x40
   12350:	mov	r2, #10
   12354:	mov	r0, r6
   12358:	ldr	r3, [r4, #44]	; 0x2c
   1235c:	mov	r1, r7
   12360:	blx	r3
   12364:	ldrb	r3, [r4, #25]
   12368:	cmp	r3, #0
   1236c:	beq	12380 <__assert_fail@plt+0x117c>
   12370:	ldrd	r2, [r4, #160]	; 0xa0
   12374:	cmp	r7, r3
   12378:	cmpeq	r6, r2
   1237c:	bcs	12734 <__assert_fail@plt+0x1530>
   12380:	ldr	r0, [sp, #72]	; 0x48
   12384:	bl	15c8c <__assert_fail@plt+0x4a88>
   12388:	ldr	r5, [sp, #20]
   1238c:	b	12180 <__assert_fail@plt+0xf7c>
   12390:	mov	r5, fp
   12394:	b	123cc <__assert_fail@plt+0x11c8>
   12398:	bne	1282c <__assert_fail@plt+0x1628>
   1239c:	eor	fp, fp, #1
   123a0:	add	r3, sp, #80	; 0x50
   123a4:	str	r8, [sp]
   123a8:	lsl	r5, fp, #2
   123ac:	mov	r0, r6
   123b0:	mov	r1, r7
   123b4:	add	r3, r3, r5
   123b8:	ldr	r3, [r3, #-8]
   123bc:	bl	13fe4 <__assert_fail@plt+0x2de0>
   123c0:	ldr	r3, [sp, #64]	; 0x40
   123c4:	adds	r6, r6, r3
   123c8:	adc	r7, r7, #0
   123cc:	add	r3, sp, #80	; 0x50
   123d0:	ldr	r2, [sp, #20]
   123d4:	add	r3, r3, r5
   123d8:	ldr	r8, [r3, #-8]
   123dc:	ldr	r0, [r4, #28]
   123e0:	mov	r1, r8
   123e4:	bl	14ad8 <__assert_fail@plt+0x38d4>
   123e8:	ldr	r3, [r4, #28]
   123ec:	and	sl, sl, r0
   123f0:	uxtb	sl, sl
   123f4:	ldr	r2, [sp, #64]	; 0x40
   123f8:	cmp	r2, r3
   123fc:	bcs	12398 <__assert_fail@plt+0x1194>
   12400:	cmp	r2, #0
   12404:	mov	r8, r2
   12408:	str	sl, [sp, #20]
   1240c:	beq	12350 <__assert_fail@plt+0x114c>
   12410:	ldr	r3, [r4, #36]	; 0x24
   12414:	movw	r9, #48760	; 0xbe78
   12418:	movt	r9, #1
   1241c:	mov	lr, #0
   12420:	mov	ip, #1
   12424:	strd	r6, [sp, #24]
   12428:	ldr	sl, [r4, #40]	; 0x28
   1242c:	mov	r7, r5
   12430:	mov	r5, r4
   12434:	mov	r4, r3
   12438:	add	sl, sl, #4
   1243c:	cmp	lr, r4
   12440:	beq	12528 <__assert_fail@plt+0x1324>
   12444:	ldr	r3, [sl, lr, lsl #5]
   12448:	mov	r1, ip
   1244c:	add	r3, r9, r3, lsl #2
   12450:	ldr	r0, [r3, #132]	; 0x84
   12454:	mov	r2, r0
   12458:	b	12460 <__assert_fail@plt+0x125c>
   1245c:	mov	r2, r3
   12460:	udiv	r3, r1, r2
   12464:	mls	r3, r2, r3, r1
   12468:	mov	r1, r2
   1246c:	cmp	r3, #0
   12470:	bne	1245c <__assert_fail@plt+0x1258>
   12474:	udiv	r2, r0, r2
   12478:	add	lr, lr, #1
   1247c:	mul	ip, ip, r2
   12480:	b	1243c <__assert_fail@plt+0x1238>
   12484:	cmp	r2, #0
   12488:	moveq	r6, #3
   1248c:	beq	11d38 <__assert_fail@plt+0xb34>
   12490:	add	r3, r3, #1
   12494:	ldr	r1, [sp, #20]
   12498:	ldr	r0, [r5, r3, lsl #2]
   1249c:	bl	12bb8 <__assert_fail@plt+0x19b4>
   124a0:	cmp	r0, #0
   124a4:	bne	1278c <__assert_fail@plt+0x1588>
   124a8:	mov	r6, #3
   124ac:	ldrb	r3, [r4, #156]	; 0x9c
   124b0:	cmp	r3, #0
   124b4:	beq	11d38 <__assert_fail@plt+0xb34>
   124b8:	b	11c08 <__assert_fail@plt+0xa04>
   124bc:	mov	r0, #0
   124c0:	bl	14f70 <__assert_fail@plt+0x3d6c>
   124c4:	movw	r3, #19896	; 0x4db8
   124c8:	movt	r3, #1
   124cc:	mov	r2, #8
   124d0:	mov	r1, #7
   124d4:	stm	r4, {r1, r2}
   124d8:	str	r3, [r4, #44]	; 0x2c
   124dc:	b	11d6c <__assert_fail@plt+0xb68>
   124e0:	add	r1, sp, #72	; 0x48
   124e4:	bl	12bb8 <__assert_fail@plt+0x19b4>
   124e8:	cmp	r0, #0
   124ec:	beq	1272c <__assert_fail@plt+0x1528>
   124f0:	ldrb	r3, [r4, #156]	; 0x9c
   124f4:	cmp	r3, #0
   124f8:	bne	1274c <__assert_fail@plt+0x1548>
   124fc:	ldr	r1, [fp]
   12500:	mov	r7, #0
   12504:	mov	r6, #1
   12508:	ldrd	r2, [sp, #72]	; 0x48
   1250c:	str	r7, [sp, #36]	; 0x24
   12510:	ldr	r0, [r5, r1, lsl #2]
   12514:	add	r1, r5, r1, lsl #2
   12518:	add	r5, r5, #4
   1251c:	strd	r2, [r4, #136]	; 0x88
   12520:	str	r0, [r1, #4]
   12524:	b	11d40 <__assert_fail@plt+0xb3c>
   12528:	sub	r2, r8, #1
   1252c:	add	r3, sp, #80	; 0x50
   12530:	add	r2, r2, ip
   12534:	add	r9, r3, r7
   12538:	ldrd	r6, [sp, #24]
   1253c:	mov	r1, #0
   12540:	mov	r4, r5
   12544:	udiv	r2, r2, ip
   12548:	ldr	r9, [r9, #-8]
   1254c:	add	r0, r9, r8
   12550:	mul	r2, ip, r2
   12554:	sub	r2, r2, r8
   12558:	bl	11108 <memset@plt>
   1255c:	add	r1, sp, #80	; 0x50
   12560:	eor	r3, fp, #1
   12564:	str	r9, [sp]
   12568:	add	r3, r1, r3, lsl #2
   1256c:	mov	r0, r6
   12570:	mov	r1, r7
   12574:	mov	r2, r8
   12578:	ldr	r3, [r3, #-8]
   1257c:	bl	13fe4 <__assert_fail@plt+0x2de0>
   12580:	ldr	r3, [sp, #64]	; 0x40
   12584:	adds	r6, r6, r3
   12588:	adc	r7, r7, #0
   1258c:	b	12350 <__assert_fail@plt+0x114c>
   12590:	ldr	r1, [sp, #20]
   12594:	bl	12bb8 <__assert_fail@plt+0x19b4>
   12598:	cmp	r0, #0
   1259c:	beq	11cfc <__assert_fail@plt+0xaf8>
   125a0:	ldrd	r2, [sp, #64]	; 0x40
   125a4:	mov	r7, #0
   125a8:	add	r5, r5, #4
   125ac:	mov	r6, r7
   125b0:	str	r7, [sp, #36]	; 0x24
   125b4:	strd	r2, [r4, #136]	; 0x88
   125b8:	b	11d40 <__assert_fail@plt+0xb3c>
   125bc:	ldr	r8, [sp, #20]
   125c0:	mvn	r0, r9
   125c4:	mov	r2, #0
   125c8:	adds	r0, r0, r6
   125cc:	mvn	r1, #0
   125d0:	adc	r1, r1, r7
   125d4:	ldr	r3, [r4, #44]	; 0x2c
   125d8:	strb	r2, [r8, r9]
   125dc:	mov	r2, #32
   125e0:	movw	r9, #49652	; 0xc1f4
   125e4:	movt	r9, #1
   125e8:	sub	r8, r8, #1
   125ec:	blx	r3
   125f0:	ldr	sl, [sp, #24]
   125f4:	ldrb	r1, [r8, #1]!
   125f8:	ldr	r3, [sl]
   125fc:	cmp	r1, #0
   12600:	beq	126cc <__assert_fail@plt+0x14c8>
   12604:	sub	r2, r1, #7
   12608:	cmp	r2, #6
   1260c:	ldrls	pc, [pc, r2, lsl #2]
   12610:	b	1295c <__assert_fail@plt+0x1758>
   12614:			; <UNDEFINED> instruction: 0x000126b4
   12618:	muleq	r1, ip, r6
   1261c:	andeq	r2, r1, r8, lsl #13
   12620:	andeq	r2, r1, r0, ror r6
   12624:	andeq	r2, r1, ip, asr r6
   12628:	andeq	r2, r1, r4, asr #12
   1262c:	andeq	r2, r1, r0, lsr r6
   12630:	mov	r2, #2
   12634:	mov	r1, #1
   12638:	mov	r0, r9
   1263c:	bl	10fa0 <fwrite_unlocked@plt>
   12640:	b	125f4 <__assert_fail@plt+0x13f0>
   12644:	movw	r0, #49644	; 0xc1ec
   12648:	movt	r0, #1
   1264c:	mov	r2, #2
   12650:	mov	r1, #1
   12654:	bl	10fa0 <fwrite_unlocked@plt>
   12658:	b	125f4 <__assert_fail@plt+0x13f0>
   1265c:	mov	r2, #2
   12660:	mov	r1, #1
   12664:	ldr	r0, [sp, #32]
   12668:	bl	10fa0 <fwrite_unlocked@plt>
   1266c:	b	125f4 <__assert_fail@plt+0x13f0>
   12670:	movw	r0, #49648	; 0xc1f0
   12674:	movt	r0, #1
   12678:	mov	r2, #2
   1267c:	mov	r1, #1
   12680:	bl	10fa0 <fwrite_unlocked@plt>
   12684:	b	125f4 <__assert_fail@plt+0x13f0>
   12688:	mov	r2, #2
   1268c:	mov	r1, #1
   12690:	ldr	r0, [sp, #36]	; 0x24
   12694:	bl	10fa0 <fwrite_unlocked@plt>
   12698:	b	125f4 <__assert_fail@plt+0x13f0>
   1269c:	movw	r0, #49640	; 0xc1e8
   126a0:	movt	r0, #1
   126a4:	mov	r2, #2
   126a8:	mov	r1, #1
   126ac:	bl	10fa0 <fwrite_unlocked@plt>
   126b0:	b	125f4 <__assert_fail@plt+0x13f0>
   126b4:	movw	r0, #49664	; 0xc200
   126b8:	movt	r0, #1
   126bc:	mov	r2, #2
   126c0:	mov	r1, #1
   126c4:	bl	10fa0 <fwrite_unlocked@plt>
   126c8:	b	125f4 <__assert_fail@plt+0x13f0>
   126cc:	ldr	r2, [r3, #20]
   126d0:	ldr	r1, [r3, #24]
   126d4:	cmp	r2, r1
   126d8:	addcc	r0, r2, #1
   126dc:	movcc	r1, #10
   126e0:	strcc	r0, [r3, #20]
   126e4:	strbcc	r1, [r2]
   126e8:	bcc	11fc4 <__assert_fail@plt+0xdc0>
   126ec:	mov	r0, r3
   126f0:	mov	r1, #10
   126f4:	bl	11168 <__overflow@plt>
   126f8:	b	11fc4 <__assert_fail@plt+0xdc0>
   126fc:	ldr	r3, [sp, #32]
   12700:	cmp	r3, #0
   12704:	moveq	r5, #1
   12708:	beq	12228 <__assert_fail@plt+0x1024>
   1270c:	ldr	r3, [sp, #24]
   12710:	cmp	r3, #0
   12714:	moveq	r6, #1
   12718:	moveq	r5, r6
   1271c:	beq	11ec4 <__assert_fail@plt+0xcc0>
   12720:	ldr	r3, [sp, #24]
   12724:	str	r3, [r4, #28]
   12728:	b	11ef4 <__assert_fail@plt+0xcf0>
   1272c:	mov	r6, #2
   12730:	b	124ac <__assert_fail@plt+0x12a8>
   12734:	mov	r0, #0
   12738:	bl	13cac <__assert_fail@plt+0x2aa8>
   1273c:	ldr	r3, [sp, #20]
   12740:	and	r3, r3, r0
   12744:	str	r3, [sp, #20]
   12748:	b	12380 <__assert_fail@plt+0x117c>
   1274c:	ldr	r3, [fp]
   12750:	ldr	r1, [sp, #20]
   12754:	ldr	r0, [r5, r3, lsl #2]
   12758:	bl	12bb8 <__assert_fail@plt+0x19b4>
   1275c:	cmp	r0, #0
   12760:	beq	124fc <__assert_fail@plt+0x12f8>
   12764:	ldrd	r2, [sp, #64]	; 0x40
   12768:	mov	r1, #1
   1276c:	add	r5, r5, #8
   12770:	mov	r6, #0
   12774:	ldr	r7, [sp, #72]	; 0x48
   12778:	strd	r2, [r4, #136]	; 0x88
   1277c:	ldr	r3, [sp, #76]	; 0x4c
   12780:	strb	r1, [r4, #157]	; 0x9d
   12784:	str	r3, [sp, #36]	; 0x24
   12788:	b	11d40 <__assert_fail@plt+0xb3c>
   1278c:	ldr	r3, [fp]
   12790:	add	r1, sp, #72	; 0x48
   12794:	add	r3, r3, #2
   12798:	ldr	r0, [r5, r3, lsl #2]
   1279c:	bl	12bb8 <__assert_fail@plt+0x19b4>
   127a0:	cmp	r0, #0
   127a4:	beq	124a8 <__assert_fail@plt+0x12a4>
   127a8:	ldr	r1, [fp]
   127ac:	mov	r6, #1
   127b0:	ldrd	r2, [sp, #64]	; 0x40
   127b4:	strb	r6, [r4, #157]	; 0x9d
   127b8:	ldr	r7, [sp, #72]	; 0x48
   127bc:	ldr	r0, [r5, r1, lsl #2]
   127c0:	add	r1, r5, r1, lsl #2
   127c4:	add	r5, r5, #8
   127c8:	strd	r2, [r4, #136]	; 0x88
   127cc:	ldr	r3, [sp, #76]	; 0x4c
   127d0:	str	r0, [r1, #8]
   127d4:	str	r3, [sp, #36]	; 0x24
   127d8:	b	11d40 <__assert_fail@plt+0xb3c>
   127dc:	ldr	r0, [sp, #20]
   127e0:	bl	15c8c <__assert_fail@plt+0x4a88>
   127e4:	mov	r0, #0
   127e8:	bl	13cac <__assert_fail@plt+0x2aa8>
   127ec:	and	r5, r5, r0
   127f0:	uxtb	r5, r5
   127f4:	b	12180 <__assert_fail@plt+0xf7c>
   127f8:	mov	r2, #5
   127fc:	mov	r8, r1
   12800:	movw	r1, #53896	; 0xd288
   12804:	movt	r1, #1
   12808:	bl	10fc4 <dcgettext@plt>
   1280c:	mov	r4, r0
   12810:	ldr	r0, [r7]
   12814:	bl	199a8 <__assert_fail@plt+0x87a4>
   12818:	mov	r3, r0
   1281c:	mov	r2, r4
   12820:	mov	r1, r8
   12824:	mov	r0, #1
   12828:	bl	1103c <error@plt>
   1282c:	movw	r1, #49776	; 0xc270
   12830:	movt	r1, #1
   12834:	ldr	r3, [pc, #-1488]	; 1226c <__assert_fail@plt+0x1068>
   12838:	movw	r0, #54212	; 0xd3c4
   1283c:	movt	r0, #1
   12840:	movw	r2, #1418	; 0x58a
   12844:	bl	11204 <__assert_fail@plt>
   12848:	movw	r1, #49776	; 0xc270
   1284c:	movt	r1, #1
   12850:	ldr	r3, [pc, #-1516]	; 1226c <__assert_fail@plt+0x1068>
   12854:	movw	r0, #54212	; 0xd3c4
   12858:	movt	r0, #1
   1285c:	movw	r2, #1404	; 0x57c
   12860:	bl	11204 <__assert_fail@plt>
   12864:	movw	r1, #54120	; 0xd368
   12868:	movt	r1, #1
   1286c:	mov	r2, #5
   12870:	mov	r0, #0
   12874:	bl	10fc4 <dcgettext@plt>
   12878:	mov	r2, r0
   1287c:	mov	r1, #0
   12880:	mov	r0, #1
   12884:	bl	1103c <error@plt>
   12888:	movw	r1, #49776	; 0xc270
   1288c:	movt	r1, #1
   12890:	ldr	r3, [pc, #-1576]	; 12270 <__assert_fail@plt+0x106c>
   12894:	movw	r0, #53912	; 0xd298
   12898:	movt	r0, #1
   1289c:	movw	r2, #985	; 0x3d9
   128a0:	bl	11204 <__assert_fail@plt>
   128a4:	mov	r0, #1
   128a8:	mov	r1, #0
   128ac:	strd	r0, [sp, #40]	; 0x28
   128b0:	b	11d98 <__assert_fail@plt+0xb94>
   128b4:	ldr	ip, [r7]
   128b8:	sub	r3, r8, #228	; 0xe4
   128bc:	mov	r2, #83	; 0x53
   128c0:	ldr	r1, [sp, #64]	; 0x40
   128c4:	str	ip, [sp]
   128c8:	bl	1aaf0 <__assert_fail@plt+0x98ec>
   128cc:	mov	r2, #5
   128d0:	mov	r5, r1
   128d4:	movw	r1, #53896	; 0xd288
   128d8:	movt	r1, #1
   128dc:	bl	10fc4 <dcgettext@plt>
   128e0:	mov	r4, r0
   128e4:	ldr	r0, [r7]
   128e8:	bl	199a8 <__assert_fail@plt+0x87a4>
   128ec:	mov	r3, r0
   128f0:	mov	r2, r4
   128f4:	mov	r1, r5
   128f8:	mov	r0, #1
   128fc:	bl	1103c <error@plt>
   12900:	ldr	ip, [r7]
   12904:	mov	r2, #119	; 0x77
   12908:	ldr	r3, [pc, #-1692]	; 12274 <__assert_fail@plt+0x1070>
   1290c:	ldr	r1, [sp, #64]	; 0x40
   12910:	str	ip, [sp]
   12914:	bl	1aaf0 <__assert_fail@plt+0x98ec>
   12918:	ldr	ip, [r7]
   1291c:	sub	r3, r8, #228	; 0xe4
   12920:	mov	r2, #106	; 0x6a
   12924:	ldr	r1, [sp, #64]	; 0x40
   12928:	str	ip, [sp]
   1292c:	bl	1aaf0 <__assert_fail@plt+0x98ec>
   12930:	mov	r2, #5
   12934:	movw	r1, #53824	; 0xd240
   12938:	movt	r1, #1
   1293c:	mov	r0, #0
   12940:	bl	10fc4 <dcgettext@plt>
   12944:	ldr	r3, [r7]
   12948:	mov	r2, r0
   1294c:	mov	r1, #0
   12950:	mov	r0, #1
   12954:	ldrb	r3, [r3]
   12958:	bl	1103c <error@plt>
   1295c:	ldr	r2, [r3, #20]
   12960:	ldr	r0, [r3, #24]
   12964:	cmp	r2, r0
   12968:	addcc	r0, r2, #1
   1296c:	strcc	r0, [r3, #20]
   12970:	strbcc	r1, [r2]
   12974:	bcc	125f4 <__assert_fail@plt+0x13f0>
   12978:	mov	r0, r3
   1297c:	bl	11168 <__overflow@plt>
   12980:	b	125f4 <__assert_fail@plt+0x13f0>
   12984:	mov	fp, #0
   12988:	mov	lr, #0
   1298c:	pop	{r1}		; (ldr r1, [sp], #4)
   12990:	mov	r2, sp
   12994:	push	{r2}		; (str r2, [sp, #-4]!)
   12998:	push	{r0}		; (str r0, [sp, #-4]!)
   1299c:	ldr	ip, [pc, #16]	; 129b4 <__assert_fail@plt+0x17b0>
   129a0:	push	{ip}		; (str ip, [sp, #-4]!)
   129a4:	ldr	r0, [pc, #12]	; 129b8 <__assert_fail@plt+0x17b4>
   129a8:	ldr	r3, [pc, #12]	; 129bc <__assert_fail@plt+0x17b8>
   129ac:	bl	1106c <__libc_start_main@plt>
   129b0:	bl	111ec <abort@plt>
   129b4:	andeq	fp, r1, r0, asr lr
   129b8:	andeq	r1, r1, r0, lsl r2
   129bc:	strdeq	fp, [r1], -r0
   129c0:	ldr	r3, [pc, #20]	; 129dc <__assert_fail@plt+0x17d8>
   129c4:	ldr	r2, [pc, #20]	; 129e0 <__assert_fail@plt+0x17dc>
   129c8:	add	r3, pc, r3
   129cc:	ldr	r2, [r3, r2]
   129d0:	cmp	r2, #0
   129d4:	bxeq	lr
   129d8:	b	11090 <__gmon_start__@plt>
   129dc:	andeq	fp, r1, r0, lsr r6
   129e0:	andeq	r0, r0, ip, lsl #2
   129e4:	ldr	r0, [pc, #24]	; 12a04 <__assert_fail@plt+0x1800>
   129e8:	ldr	r3, [pc, #24]	; 12a08 <__assert_fail@plt+0x1804>
   129ec:	cmp	r3, r0
   129f0:	bxeq	lr
   129f4:	ldr	r3, [pc, #16]	; 12a0c <__assert_fail@plt+0x1808>
   129f8:	cmp	r3, #0
   129fc:	bxeq	lr
   12a00:	bx	r3
   12a04:	andeq	lr, r2, r8, ror #2
   12a08:	andeq	lr, r2, r8, ror #2
   12a0c:	andeq	r0, r0, r0
   12a10:	ldr	r0, [pc, #36]	; 12a3c <__assert_fail@plt+0x1838>
   12a14:	ldr	r1, [pc, #36]	; 12a40 <__assert_fail@plt+0x183c>
   12a18:	sub	r1, r1, r0
   12a1c:	asr	r1, r1, #2
   12a20:	add	r1, r1, r1, lsr #31
   12a24:	asrs	r1, r1, #1
   12a28:	bxeq	lr
   12a2c:	ldr	r3, [pc, #16]	; 12a44 <__assert_fail@plt+0x1840>
   12a30:	cmp	r3, #0
   12a34:	bxeq	lr
   12a38:	bx	r3
   12a3c:	andeq	lr, r2, r8, ror #2
   12a40:	andeq	lr, r2, r8, ror #2
   12a44:	andeq	r0, r0, r0
   12a48:	push	{r4, lr}
   12a4c:	ldr	r4, [pc, #24]	; 12a6c <__assert_fail@plt+0x1868>
   12a50:	ldrb	r3, [r4]
   12a54:	cmp	r3, #0
   12a58:	popne	{r4, pc}
   12a5c:	bl	129e4 <__assert_fail@plt+0x17e0>
   12a60:	mov	r3, #1
   12a64:	strb	r3, [r4]
   12a68:	pop	{r4, pc}
   12a6c:	andeq	lr, r2, ip, lsl #3
   12a70:	b	12a10 <__assert_fail@plt+0x180c>
   12a74:	bx	lr
   12a78:	strd	r4, [sp, #-20]!	; 0xffffffec
   12a7c:	movw	r3, #57744	; 0xe190
   12a80:	movt	r3, #2
   12a84:	strd	r6, [sp, #8]
   12a88:	mov	ip, #0
   12a8c:	mov	r4, r0
   12a90:	str	lr, [sp, #16]
   12a94:	sub	sp, sp, #36	; 0x24
   12a98:	mov	r5, r1
   12a9c:	ldr	r7, [r3]
   12aa0:	add	r6, sp, #27
   12aa4:	strb	r2, [sp, #27]
   12aa8:	ldr	r2, [r3, #4]
   12aac:	strb	ip, [sp, #28]
   12ab0:	sub	r7, r6, r7
   12ab4:	cmp	r2, #10
   12ab8:	beq	12b3c <__assert_fail@plt+0x1938>
   12abc:	cmp	r2, #16
   12ac0:	beq	12b84 <__assert_fail@plt+0x1980>
   12ac4:	cmp	r2, #8
   12ac8:	beq	12b10 <__assert_fail@plt+0x190c>
   12acc:	cmp	r7, r6
   12ad0:	movcs	r7, r6
   12ad4:	bcs	12ae8 <__assert_fail@plt+0x18e4>
   12ad8:	sub	r2, r6, r7
   12adc:	mov	r1, #48	; 0x30
   12ae0:	mov	r0, r7
   12ae4:	bl	11108 <memset@plt>
   12ae8:	movw	r3, #57732	; 0xe184
   12aec:	movt	r3, #2
   12af0:	ldr	r1, [r3]
   12af4:	mov	r0, r7
   12af8:	bl	10f1c <fputs_unlocked@plt>
   12afc:	add	sp, sp, #36	; 0x24
   12b00:	ldrd	r4, [sp]
   12b04:	ldrd	r6, [sp, #8]
   12b08:	add	sp, sp, #16
   12b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b10:	lsr	r2, r4, #3
   12b14:	and	r3, r4, #7
   12b18:	lsr	r1, r5, #3
   12b1c:	add	r3, r3, #48	; 0x30
   12b20:	orr	r2, r2, r5, lsl #29
   12b24:	mov	r5, r1
   12b28:	strb	r3, [r6, #-1]!
   12b2c:	mov	r4, r2
   12b30:	orrs	r3, r4, r5
   12b34:	bne	12b10 <__assert_fail@plt+0x190c>
   12b38:	b	12acc <__assert_fail@plt+0x18c8>
   12b3c:	mov	r0, r4
   12b40:	mov	r1, r5
   12b44:	mov	r2, #10
   12b48:	mov	r3, #0
   12b4c:	bl	1bc7c <__assert_fail@plt+0xaa78>
   12b50:	add	ip, r2, #48	; 0x30
   12b54:	mov	r0, r4
   12b58:	mov	r1, r5
   12b5c:	mov	r2, #10
   12b60:	mov	r3, #0
   12b64:	strb	ip, [r6, #-1]!
   12b68:	bl	1bc7c <__assert_fail@plt+0xaa78>
   12b6c:	cmp	r5, #0
   12b70:	mov	r5, r1
   12b74:	cmpeq	r4, #9
   12b78:	mov	r4, r0
   12b7c:	bhi	12b3c <__assert_fail@plt+0x1938>
   12b80:	b	12acc <__assert_fail@plt+0x18c8>
   12b84:	movw	r0, #49592	; 0xc1b8
   12b88:	movt	r0, #1
   12b8c:	and	r2, r4, #15
   12b90:	lsr	r3, r4, #4
   12b94:	ldrb	r2, [r0, r2]
   12b98:	lsr	r1, r5, #4
   12b9c:	orr	r3, r3, r5, lsl #28
   12ba0:	mov	r5, r1
   12ba4:	mov	r4, r3
   12ba8:	orrs	r3, r4, r5
   12bac:	strb	r2, [r6, #-1]!
   12bb0:	bne	12b8c <__assert_fail@plt+0x1988>
   12bb4:	b	12acc <__assert_fail@plt+0x18c8>
   12bb8:	strd	r4, [sp, #-12]!
   12bbc:	mov	r4, r0
   12bc0:	str	lr, [sp, #8]
   12bc4:	sub	sp, sp, #12
   12bc8:	ldrb	r0, [r0]
   12bcc:	cmp	r0, #0
   12bd0:	beq	12c1c <__assert_fail@plt+0x1a18>
   12bd4:	cmp	r0, #43	; 0x2b
   12bd8:	mov	r5, r1
   12bdc:	addeq	r4, r4, #1
   12be0:	mov	r1, #46	; 0x2e
   12be4:	mov	r0, r4
   12be8:	bl	110cc <strchr@plt>
   12bec:	cmp	r0, #0
   12bf0:	movne	r2, #10
   12bf4:	beq	12c2c <__assert_fail@plt+0x1a28>
   12bf8:	movw	ip, #49612	; 0xc1cc
   12bfc:	movt	ip, #1
   12c00:	mov	r3, r5
   12c04:	mov	r0, r4
   12c08:	mov	r1, #0
   12c0c:	str	ip, [sp]
   12c10:	bl	1ab80 <__assert_fail@plt+0x997c>
   12c14:	clz	r0, r0
   12c18:	lsr	r0, r0, #5
   12c1c:	add	sp, sp, #12
   12c20:	ldrd	r4, [sp]
   12c24:	add	sp, sp, #8
   12c28:	pop	{pc}		; (ldr pc, [sp], #4)
   12c2c:	ldrb	r3, [r4]
   12c30:	cmp	r3, #48	; 0x30
   12c34:	movne	r2, #8
   12c38:	bne	12bf8 <__assert_fail@plt+0x19f4>
   12c3c:	ldrb	r3, [r4, #1]
   12c40:	and	r3, r3, #223	; 0xdf
   12c44:	cmp	r3, #88	; 0x58
   12c48:	movne	r2, #8
   12c4c:	moveq	r2, #16
   12c50:	b	12bf8 <__assert_fail@plt+0x19f4>
   12c54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c58:	mov	r5, #0
   12c5c:	mov	r4, r0
   12c60:	strd	r6, [sp, #8]
   12c64:	mov	r7, #0
   12c68:	mov	r0, r1
   12c6c:	cmp	r5, r7
   12c70:	mov	r1, r7
   12c74:	strd	r8, [sp, #16]
   12c78:	strd	sl, [sp, #24]
   12c7c:	cmpeq	r4, r0
   12c80:	str	lr, [sp, #32]
   12c84:	sub	sp, sp, #44	; 0x2c
   12c88:	ldr	r8, [sp, #84]	; 0x54
   12c8c:	strd	r4, [sp]
   12c90:	strd	r0, [sp, #8]
   12c94:	bls	12d70 <__assert_fail@plt+0x1b6c>
   12c98:	asr	r1, r8, #31
   12c9c:	subs	r6, r4, #1
   12ca0:	mov	r9, r2
   12ca4:	movw	r2, #49616	; 0xc1d0
   12ca8:	movt	r2, #1
   12cac:	sbc	r3, r5, #0
   12cb0:	mov	r0, r8
   12cb4:	movw	sl, #49620	; 0xc1d4
   12cb8:	movt	sl, #1
   12cbc:	str	r2, [sp, #28]
   12cc0:	mul	r2, r6, r1
   12cc4:	mov	fp, sl
   12cc8:	umull	r6, r7, r6, r8
   12ccc:	strd	r0, [sp, #16]
   12cd0:	movw	r1, #48760	; 0xbe78
   12cd4:	movt	r1, #1
   12cd8:	mla	r3, r8, r3, r2
   12cdc:	str	r1, [sp, #24]
   12ce0:	add	r7, r3, r7
   12ce4:	b	12d3c <__assert_fail@plt+0x1b38>
   12ce8:	ldr	r3, [sp, #24]
   12cec:	cmp	r1, #32
   12cf0:	mov	r0, #0
   12cf4:	add	r2, r3, r1, lsl #2
   12cf8:	bls	12d08 <__assert_fail@plt+0x1b04>
   12cfc:	add	r2, sp, #36	; 0x24
   12d00:	strb	r1, [sp, #36]	; 0x24
   12d04:	strb	r0, [sp, #37]	; 0x25
   12d08:	ldr	r3, [sp, #80]	; 0x50
   12d0c:	sub	r1, r8, sl
   12d10:	mov	r0, fp
   12d14:	mov	r8, sl
   12d18:	add	r1, r1, r3
   12d1c:	bl	1a878 <__assert_fail@plt+0x9674>
   12d20:	ldrd	r2, [sp, #16]
   12d24:	subs	r6, r6, r2
   12d28:	sbc	r7, r7, r3
   12d2c:	ldrd	r2, [sp, #8]
   12d30:	cmp	r5, r3
   12d34:	cmpeq	r4, r2
   12d38:	beq	12d70 <__assert_fail@plt+0x1b6c>
   12d3c:	subs	r4, r4, #1
   12d40:	mov	r0, r6
   12d44:	ldrd	r2, [sp]
   12d48:	mov	r1, r7
   12d4c:	sbc	r5, r5, #0
   12d50:	bl	1bc7c <__assert_fail@plt+0xaa78>
   12d54:	ldrb	r1, [r9], #1
   12d58:	mov	sl, r0
   12d5c:	and	r1, r1, #127	; 0x7f
   12d60:	cmp	r1, #127	; 0x7f
   12d64:	bne	12ce8 <__assert_fail@plt+0x1ae4>
   12d68:	ldr	r2, [sp, #28]
   12d6c:	b	12d08 <__assert_fail@plt+0x1b04>
   12d70:	add	sp, sp, #44	; 0x2c
   12d74:	ldrd	r4, [sp]
   12d78:	ldrd	r6, [sp, #8]
   12d7c:	ldrd	r8, [sp, #16]
   12d80:	ldrd	sl, [sp, #24]
   12d84:	add	sp, sp, #32
   12d88:	pop	{pc}		; (ldr pc, [sp], #4)
   12d8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12d90:	mov	r5, #0
   12d94:	mov	r4, r0
   12d98:	strd	r6, [sp, #8]
   12d9c:	mov	r7, #0
   12da0:	mov	r6, r1
   12da4:	cmp	r5, r7
   12da8:	strd	r8, [sp, #16]
   12dac:	strd	sl, [sp, #24]
   12db0:	cmpeq	r0, r1
   12db4:	str	lr, [sp, #32]
   12db8:	sub	sp, sp, #36	; 0x24
   12dbc:	strd	r4, [sp, #16]
   12dc0:	strd	r6, [sp, #24]
   12dc4:	ldr	r7, [sp, #76]	; 0x4c
   12dc8:	bls	12ecc <__assert_fail@plt+0x1cc8>
   12dcc:	mov	r8, r3
   12dd0:	asr	r3, r7, #31
   12dd4:	mov	r6, r2
   12dd8:	mov	r2, r7
   12ddc:	subs	r4, r0, #1
   12de0:	mov	r1, r5
   12de4:	movw	fp, #57744	; 0xe190
   12de8:	movt	fp, #2
   12dec:	strd	r2, [sp, #8]
   12df0:	sbc	r3, r5, #0
   12df4:	ldr	r2, [sp, #12]
   12df8:	strd	r0, [sp]
   12dfc:	mul	r2, r4, r2
   12e00:	umull	r4, r5, r4, r7
   12e04:	mla	r3, r7, r3, r2
   12e08:	add	r5, r3, r5
   12e0c:	b	12e38 <__assert_fail@plt+0x1c34>
   12e10:	ldrd	r2, [r6], #8
   12e14:	bl	1a878 <__assert_fail@plt+0x9674>
   12e18:	ldrd	r2, [sp, #8]
   12e1c:	ldrd	r0, [sp, #24]
   12e20:	subs	r4, r4, r2
   12e24:	sbc	r5, r5, r3
   12e28:	ldrd	r2, [sp]
   12e2c:	cmp	r3, r1
   12e30:	cmpeq	r2, r0
   12e34:	beq	12ecc <__assert_fail@plt+0x1cc8>
   12e38:	ldm	sp, {r3, ip}
   12e3c:	mov	r0, r4
   12e40:	mov	r1, r5
   12e44:	subs	r3, r3, #1
   12e48:	sbc	ip, ip, #0
   12e4c:	stm	sp, {r3, ip}
   12e50:	ldrd	r2, [sp, #16]
   12e54:	bl	1bc7c <__assert_fail@plt+0xaa78>
   12e58:	mov	r2, r0
   12e5c:	ldrb	ip, [fp, #8]
   12e60:	mov	r0, r8
   12e64:	sub	r3, r7, r2
   12e68:	mov	r7, r2
   12e6c:	ldr	r2, [sp, #72]	; 0x48
   12e70:	cmp	ip, #0
   12e74:	add	r3, r3, r2
   12e78:	mov	r1, r3
   12e7c:	beq	12e10 <__assert_fail@plt+0x1c0c>
   12e80:	ldrb	r2, [r6, #7]
   12e84:	ldrb	r3, [r6, #3]
   12e88:	ldrb	ip, [r6, #6]
   12e8c:	bfi	r9, r2, #0, #8
   12e90:	ldrb	r2, [r6, #2]
   12e94:	bfi	sl, r3, #0, #8
   12e98:	ldrb	r3, [r6, #5]
   12e9c:	bfi	r9, ip, #8, #8
   12ea0:	ldrb	ip, [r6, #1]
   12ea4:	bfi	sl, r2, #8, #8
   12ea8:	ldrb	r2, [r6, #4]
   12eac:	bfi	r9, r3, #16, #8
   12eb0:	ldrb	r3, [r6], #8
   12eb4:	bfi	sl, ip, #16, #8
   12eb8:	bfi	r9, r2, #24, #8
   12ebc:	bfi	sl, r3, #24, #8
   12ec0:	mov	r2, r9
   12ec4:	mov	r3, sl
   12ec8:	b	12e14 <__assert_fail@plt+0x1c10>
   12ecc:	add	sp, sp, #36	; 0x24
   12ed0:	ldrd	r4, [sp]
   12ed4:	ldrd	r6, [sp, #8]
   12ed8:	ldrd	r8, [sp, #16]
   12edc:	ldrd	sl, [sp, #24]
   12ee0:	add	sp, sp, #32
   12ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ee8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12eec:	mov	r5, #0
   12ef0:	mov	r4, r1
   12ef4:	strd	r6, [sp, #8]
   12ef8:	strd	sl, [sp, #24]
   12efc:	mov	fp, #0
   12f00:	mov	sl, r0
   12f04:	cmp	fp, r5
   12f08:	mov	r0, r1
   12f0c:	strd	r8, [sp, #16]
   12f10:	mov	r1, r5
   12f14:	str	lr, [sp, #32]
   12f18:	sub	sp, sp, #36	; 0x24
   12f1c:	cmpeq	sl, r4
   12f20:	ldr	r7, [sp, #76]	; 0x4c
   12f24:	strd	sl, [sp]
   12f28:	strd	r0, [sp, #8]
   12f2c:	bls	12ffc <__assert_fail@plt+0x1df8>
   12f30:	asr	r1, r7, #31
   12f34:	subs	r4, sl, #1
   12f38:	mov	r6, r2
   12f3c:	movw	r2, #57744	; 0xe190
   12f40:	movt	r2, #2
   12f44:	mov	r8, r3
   12f48:	sbc	r3, fp, #0
   12f4c:	str	r2, [sp, #28]
   12f50:	mul	r2, r4, r1
   12f54:	mov	r0, r7
   12f58:	umull	r4, r5, r4, r7
   12f5c:	strd	r0, [sp, #16]
   12f60:	mla	r3, r7, r3, r2
   12f64:	add	r5, r3, r5
   12f68:	b	12f90 <__assert_fail@plt+0x1d8c>
   12f6c:	ldr	r2, [r6], #4
   12f70:	bl	1a878 <__assert_fail@plt+0x9674>
   12f74:	ldrd	r2, [sp, #16]
   12f78:	subs	r4, r4, r2
   12f7c:	sbc	r5, r5, r3
   12f80:	ldrd	r2, [sp, #8]
   12f84:	cmp	fp, r3
   12f88:	cmpeq	sl, r2
   12f8c:	beq	12ffc <__assert_fail@plt+0x1df8>
   12f90:	subs	sl, sl, #1
   12f94:	mov	r0, r4
   12f98:	ldrd	r2, [sp]
   12f9c:	mov	r1, r5
   12fa0:	sbc	fp, fp, #0
   12fa4:	bl	1bc7c <__assert_fail@plt+0xaa78>
   12fa8:	ldr	r3, [sp, #28]
   12fac:	mov	r2, r0
   12fb0:	mov	r0, r8
   12fb4:	ldrb	ip, [r3, #8]
   12fb8:	sub	r3, r7, r2
   12fbc:	mov	r7, r2
   12fc0:	ldr	r2, [sp, #72]	; 0x48
   12fc4:	cmp	ip, #0
   12fc8:	add	r3, r3, r2
   12fcc:	mov	r1, r3
   12fd0:	beq	12f6c <__assert_fail@plt+0x1d68>
   12fd4:	ldrb	lr, [r6, #3]
   12fd8:	ldrb	ip, [r6, #2]
   12fdc:	ldrb	r2, [r6, #1]
   12fe0:	bfi	r9, lr, #0, #8
   12fe4:	ldrb	r3, [r6], #4
   12fe8:	bfi	r9, ip, #8, #8
   12fec:	bfi	r9, r2, #16, #8
   12ff0:	bfi	r9, r3, #24, #8
   12ff4:	mov	r2, r9
   12ff8:	b	12f70 <__assert_fail@plt+0x1d6c>
   12ffc:	add	sp, sp, #36	; 0x24
   13000:	ldrd	r4, [sp]
   13004:	ldrd	r6, [sp, #8]
   13008:	ldrd	r8, [sp, #16]
   1300c:	ldrd	sl, [sp, #24]
   13010:	add	sp, sp, #32
   13014:	pop	{pc}		; (ldr pc, [sp], #4)
   13018:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1301c:	mov	r5, #0
   13020:	mov	r4, r1
   13024:	strd	r6, [sp, #8]
   13028:	strd	sl, [sp, #24]
   1302c:	mov	fp, #0
   13030:	mov	sl, r0
   13034:	cmp	fp, r5
   13038:	mov	r0, r1
   1303c:	strd	r8, [sp, #16]
   13040:	mov	r1, r5
   13044:	str	lr, [sp, #32]
   13048:	sub	sp, sp, #36	; 0x24
   1304c:	cmpeq	sl, r4
   13050:	ldr	r7, [sp, #76]	; 0x4c
   13054:	strd	sl, [sp]
   13058:	strd	r0, [sp, #8]
   1305c:	bls	1312c <__assert_fail@plt+0x1f28>
   13060:	asr	r1, r7, #31
   13064:	subs	r4, sl, #1
   13068:	mov	r6, r2
   1306c:	movw	r2, #57744	; 0xe190
   13070:	movt	r2, #2
   13074:	mov	r8, r3
   13078:	sbc	r3, fp, #0
   1307c:	str	r2, [sp, #28]
   13080:	mul	r2, r4, r1
   13084:	mov	r0, r7
   13088:	umull	r4, r5, r4, r7
   1308c:	strd	r0, [sp, #16]
   13090:	mla	r3, r7, r3, r2
   13094:	add	r5, r3, r5
   13098:	b	130c0 <__assert_fail@plt+0x1ebc>
   1309c:	ldr	r2, [r6], #4
   130a0:	bl	1a878 <__assert_fail@plt+0x9674>
   130a4:	ldrd	r2, [sp, #16]
   130a8:	subs	r4, r4, r2
   130ac:	sbc	r5, r5, r3
   130b0:	ldrd	r2, [sp, #8]
   130b4:	cmp	fp, r3
   130b8:	cmpeq	sl, r2
   130bc:	beq	1312c <__assert_fail@plt+0x1f28>
   130c0:	subs	sl, sl, #1
   130c4:	mov	r0, r4
   130c8:	ldrd	r2, [sp]
   130cc:	mov	r1, r5
   130d0:	sbc	fp, fp, #0
   130d4:	bl	1bc7c <__assert_fail@plt+0xaa78>
   130d8:	ldr	r3, [sp, #28]
   130dc:	mov	r2, r0
   130e0:	mov	r0, r8
   130e4:	ldrb	ip, [r3, #8]
   130e8:	sub	r3, r7, r2
   130ec:	mov	r7, r2
   130f0:	ldr	r2, [sp, #72]	; 0x48
   130f4:	cmp	ip, #0
   130f8:	add	r3, r3, r2
   130fc:	mov	r1, r3
   13100:	beq	1309c <__assert_fail@plt+0x1e98>
   13104:	ldrb	lr, [r6, #3]
   13108:	ldrb	ip, [r6, #2]
   1310c:	ldrb	r2, [r6, #1]
   13110:	bfi	r9, lr, #0, #8
   13114:	ldrb	r3, [r6], #4
   13118:	bfi	r9, ip, #8, #8
   1311c:	bfi	r9, r2, #16, #8
   13120:	bfi	r9, r3, #24, #8
   13124:	mov	r2, r9
   13128:	b	130a0 <__assert_fail@plt+0x1e9c>
   1312c:	add	sp, sp, #36	; 0x24
   13130:	ldrd	r4, [sp]
   13134:	ldrd	r6, [sp, #8]
   13138:	ldrd	r8, [sp, #16]
   1313c:	ldrd	sl, [sp, #24]
   13140:	add	sp, sp, #32
   13144:	pop	{pc}		; (ldr pc, [sp], #4)
   13148:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1314c:	mov	r5, #0
   13150:	mov	r4, r1
   13154:	strd	r6, [sp, #8]
   13158:	strd	r8, [sp, #16]
   1315c:	mov	r9, #0
   13160:	mov	r8, r0
   13164:	cmp	r9, r5
   13168:	mov	r0, r1
   1316c:	strd	sl, [sp, #24]
   13170:	mov	r1, r5
   13174:	str	lr, [sp, #32]
   13178:	sub	sp, sp, #36	; 0x24
   1317c:	cmpeq	r8, r4
   13180:	ldr	r6, [sp, #76]	; 0x4c
   13184:	strd	r8, [sp]
   13188:	strd	r0, [sp, #8]
   1318c:	bls	1324c <__assert_fail@plt+0x2048>
   13190:	asr	r1, r6, #31
   13194:	subs	r4, r8, #1
   13198:	mov	r7, r2
   1319c:	movw	r2, #57744	; 0xe190
   131a0:	movt	r2, #2
   131a4:	mov	fp, r3
   131a8:	sbc	r3, r9, #0
   131ac:	str	r2, [sp, #20]
   131b0:	mul	r2, r4, r1
   131b4:	mov	r0, r6
   131b8:	umull	r4, r5, r4, r6
   131bc:	strd	r0, [sp, #24]
   131c0:	mla	r3, r6, r3, r2
   131c4:	add	r5, r3, r5
   131c8:	b	131f0 <__assert_fail@plt+0x1fec>
   131cc:	ldrh	r2, [r7], #2
   131d0:	bl	1a878 <__assert_fail@plt+0x9674>
   131d4:	ldrd	r2, [sp, #24]
   131d8:	subs	r4, r4, r2
   131dc:	sbc	r5, r5, r3
   131e0:	ldrd	r2, [sp, #8]
   131e4:	cmp	r9, r3
   131e8:	cmpeq	r8, r2
   131ec:	beq	1324c <__assert_fail@plt+0x2048>
   131f0:	subs	r8, r8, #1
   131f4:	mov	r0, r4
   131f8:	ldrd	r2, [sp]
   131fc:	mov	r1, r5
   13200:	sbc	r9, r9, #0
   13204:	bl	1bc7c <__assert_fail@plt+0xaa78>
   13208:	ldr	r3, [sp, #20]
   1320c:	mov	r2, r0
   13210:	mov	r0, fp
   13214:	ldrb	ip, [r3, #8]
   13218:	sub	r3, r6, r2
   1321c:	mov	r6, r2
   13220:	ldr	r2, [sp, #72]	; 0x48
   13224:	cmp	ip, #0
   13228:	add	r3, r3, r2
   1322c:	mov	r1, r3
   13230:	beq	131cc <__assert_fail@plt+0x1fc8>
   13234:	ldrb	r2, [r7, #1]
   13238:	ldrb	r3, [r7], #2
   1323c:	bfi	sl, r2, #0, #8
   13240:	bfi	sl, r3, #8, #8
   13244:	uxth	r2, sl
   13248:	b	131d0 <__assert_fail@plt+0x1fcc>
   1324c:	add	sp, sp, #36	; 0x24
   13250:	ldrd	r4, [sp]
   13254:	ldrd	r6, [sp, #8]
   13258:	ldrd	r8, [sp, #16]
   1325c:	ldrd	sl, [sp, #24]
   13260:	add	sp, sp, #32
   13264:	pop	{pc}		; (ldr pc, [sp], #4)
   13268:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1326c:	mov	r5, #0
   13270:	mov	r4, r1
   13274:	strd	r6, [sp, #8]
   13278:	strd	r8, [sp, #16]
   1327c:	mov	r9, #0
   13280:	mov	r8, r0
   13284:	cmp	r9, r5
   13288:	mov	r0, r1
   1328c:	strd	sl, [sp, #24]
   13290:	mov	r1, r5
   13294:	str	lr, [sp, #32]
   13298:	sub	sp, sp, #36	; 0x24
   1329c:	cmpeq	r8, r4
   132a0:	ldr	r6, [sp, #76]	; 0x4c
   132a4:	strd	r8, [sp]
   132a8:	strd	r0, [sp, #8]
   132ac:	bls	1336c <__assert_fail@plt+0x2168>
   132b0:	asr	r1, r6, #31
   132b4:	subs	r4, r8, #1
   132b8:	mov	r7, r2
   132bc:	movw	r2, #57744	; 0xe190
   132c0:	movt	r2, #2
   132c4:	mov	fp, r3
   132c8:	sbc	r3, r9, #0
   132cc:	str	r2, [sp, #20]
   132d0:	mul	r2, r4, r1
   132d4:	mov	r0, r6
   132d8:	umull	r4, r5, r4, r6
   132dc:	strd	r0, [sp, #24]
   132e0:	mla	r3, r6, r3, r2
   132e4:	add	r5, r3, r5
   132e8:	b	13310 <__assert_fail@plt+0x210c>
   132ec:	ldrsh	r2, [r7], #2
   132f0:	bl	1a878 <__assert_fail@plt+0x9674>
   132f4:	ldrd	r2, [sp, #24]
   132f8:	subs	r4, r4, r2
   132fc:	sbc	r5, r5, r3
   13300:	ldrd	r2, [sp, #8]
   13304:	cmp	r9, r3
   13308:	cmpeq	r8, r2
   1330c:	beq	1336c <__assert_fail@plt+0x2168>
   13310:	subs	r8, r8, #1
   13314:	mov	r0, r4
   13318:	ldrd	r2, [sp]
   1331c:	mov	r1, r5
   13320:	sbc	r9, r9, #0
   13324:	bl	1bc7c <__assert_fail@plt+0xaa78>
   13328:	ldr	r3, [sp, #20]
   1332c:	mov	r2, r0
   13330:	mov	r0, fp
   13334:	ldrb	ip, [r3, #8]
   13338:	sub	r3, r6, r2
   1333c:	mov	r6, r2
   13340:	ldr	r2, [sp, #72]	; 0x48
   13344:	cmp	ip, #0
   13348:	add	r3, r3, r2
   1334c:	mov	r1, r3
   13350:	beq	132ec <__assert_fail@plt+0x20e8>
   13354:	ldrb	r2, [r7, #1]
   13358:	ldrb	r3, [r7], #2
   1335c:	bfi	sl, r2, #0, #8
   13360:	bfi	sl, r3, #8, #8
   13364:	sxth	r2, sl
   13368:	b	132f0 <__assert_fail@plt+0x20ec>
   1336c:	add	sp, sp, #36	; 0x24
   13370:	ldrd	r4, [sp]
   13374:	ldrd	r6, [sp, #8]
   13378:	ldrd	r8, [sp, #16]
   1337c:	ldrd	sl, [sp, #24]
   13380:	add	sp, sp, #32
   13384:	pop	{pc}		; (ldr pc, [sp], #4)
   13388:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1338c:	mov	r5, #0
   13390:	mov	r4, r0
   13394:	strd	r6, [sp, #8]
   13398:	mov	r7, #0
   1339c:	mov	r6, r1
   133a0:	cmp	r5, r7
   133a4:	strd	r8, [sp, #16]
   133a8:	strd	sl, [sp, #24]
   133ac:	cmpeq	r0, r1
   133b0:	str	lr, [sp, #32]
   133b4:	sub	sp, sp, #28
   133b8:	ldr	r8, [sp, #68]	; 0x44
   133bc:	strd	r4, [sp]
   133c0:	strd	r6, [sp, #8]
   133c4:	str	r3, [sp, #20]
   133c8:	bls	13440 <__assert_fail@plt+0x223c>
   133cc:	asr	fp, r8, #31
   133d0:	subs	r6, r0, #1
   133d4:	mov	r9, r2
   133d8:	sbc	r3, r5, #0
   133dc:	mov	sl, r8
   133e0:	mul	r2, r6, fp
   133e4:	umull	r6, r7, r6, r8
   133e8:	mla	r3, r8, r3, r2
   133ec:	add	r7, r3, r7
   133f0:	subs	r4, r4, #1
   133f4:	mov	r0, r6
   133f8:	ldrd	r2, [sp]
   133fc:	mov	r1, r7
   13400:	sbc	r5, r5, #0
   13404:	bl	1bc7c <__assert_fail@plt+0xaa78>
   13408:	mov	r3, r0
   1340c:	sub	r1, r8, r0
   13410:	ldrb	r2, [r9], #1
   13414:	mov	r8, r3
   13418:	ldr	r0, [sp, #20]
   1341c:	ldr	r3, [sp, #64]	; 0x40
   13420:	add	r1, r1, r3
   13424:	bl	1a878 <__assert_fail@plt+0x9674>
   13428:	ldrd	r2, [sp, #8]
   1342c:	subs	r6, r6, sl
   13430:	sbc	r7, r7, fp
   13434:	cmp	r5, r3
   13438:	cmpeq	r4, r2
   1343c:	bne	133f0 <__assert_fail@plt+0x21ec>
   13440:	add	sp, sp, #28
   13444:	ldrd	r4, [sp]
   13448:	ldrd	r6, [sp, #8]
   1344c:	ldrd	r8, [sp, #16]
   13450:	ldrd	sl, [sp, #24]
   13454:	add	sp, sp, #32
   13458:	pop	{pc}		; (ldr pc, [sp], #4)
   1345c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13460:	mov	r5, #0
   13464:	mov	r4, r0
   13468:	strd	r6, [sp, #8]
   1346c:	mov	r7, #0
   13470:	mov	r6, r1
   13474:	cmp	r5, r7
   13478:	strd	r8, [sp, #16]
   1347c:	strd	sl, [sp, #24]
   13480:	cmpeq	r0, r1
   13484:	str	lr, [sp, #32]
   13488:	sub	sp, sp, #28
   1348c:	ldr	r8, [sp, #68]	; 0x44
   13490:	strd	r4, [sp]
   13494:	strd	r6, [sp, #8]
   13498:	str	r3, [sp, #20]
   1349c:	bls	13514 <__assert_fail@plt+0x2310>
   134a0:	asr	fp, r8, #31
   134a4:	subs	r6, r0, #1
   134a8:	mov	r9, r2
   134ac:	sbc	r3, r5, #0
   134b0:	mov	sl, r8
   134b4:	mul	r2, r6, fp
   134b8:	umull	r6, r7, r6, r8
   134bc:	mla	r3, r8, r3, r2
   134c0:	add	r7, r3, r7
   134c4:	subs	r4, r4, #1
   134c8:	mov	r0, r6
   134cc:	ldrd	r2, [sp]
   134d0:	mov	r1, r7
   134d4:	sbc	r5, r5, #0
   134d8:	bl	1bc7c <__assert_fail@plt+0xaa78>
   134dc:	mov	r3, r0
   134e0:	sub	r1, r8, r0
   134e4:	ldrsb	r2, [r9], #1
   134e8:	mov	r8, r3
   134ec:	ldr	r0, [sp, #20]
   134f0:	ldr	r3, [sp, #64]	; 0x40
   134f4:	add	r1, r1, r3
   134f8:	bl	1a878 <__assert_fail@plt+0x9674>
   134fc:	ldrd	r2, [sp, #8]
   13500:	subs	r6, r6, sl
   13504:	sbc	r7, r7, fp
   13508:	cmp	r5, r3
   1350c:	cmpeq	r4, r2
   13510:	bne	134c4 <__assert_fail@plt+0x22c0>
   13514:	add	sp, sp, #28
   13518:	ldrd	r4, [sp]
   1351c:	ldrd	r6, [sp, #8]
   13520:	ldrd	r8, [sp, #16]
   13524:	ldrd	sl, [sp, #24]
   13528:	add	sp, sp, #32
   1352c:	pop	{pc}		; (ldr pc, [sp], #4)
   13530:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13534:	mov	r5, #0
   13538:	mov	r4, r0
   1353c:	strd	r6, [sp, #8]
   13540:	mov	r7, #0
   13544:	mov	r6, r1
   13548:	cmp	r5, r7
   1354c:	strd	r8, [sp, #16]
   13550:	strd	sl, [sp, #24]
   13554:	cmpeq	r0, r1
   13558:	str	lr, [sp, #32]
   1355c:	sub	sp, sp, #84	; 0x54
   13560:	strd	r4, [sp, #16]
   13564:	strd	r6, [sp, #24]
   13568:	ldr	r6, [sp, #124]	; 0x7c
   1356c:	bls	13698 <__assert_fail@plt+0x2494>
   13570:	asr	r3, r6, #31
   13574:	mov	r8, r2
   13578:	mov	r2, r6
   1357c:	subs	r4, r0, #1
   13580:	movw	r9, #49620	; 0xc1d4
   13584:	movt	r9, #1
   13588:	movw	ip, #57744	; 0xe190
   1358c:	movt	ip, #2
   13590:	strd	r2, [sp, #8]
   13594:	sbc	r3, r5, #0
   13598:	ldr	r2, [sp, #12]
   1359c:	mov	r7, r8
   135a0:	mov	r8, r0
   135a4:	str	ip, [sp, #32]
   135a8:	str	r9, [sp, #36]	; 0x24
   135ac:	mov	r9, r5
   135b0:	mul	r2, r4, r2
   135b4:	umull	r4, r5, r4, r6
   135b8:	mla	r3, r6, r3, r2
   135bc:	add	r5, r3, r5
   135c0:	b	135f8 <__assert_fail@plt+0x23f4>
   135c4:	vldmia	r7!, {d0}
   135c8:	bl	15f00 <__assert_fail@plt+0x4cfc>
   135cc:	add	r2, sp, #40	; 0x28
   135d0:	ldr	r1, [sp, #4]
   135d4:	ldr	r0, [sp, #36]	; 0x24
   135d8:	bl	1a878 <__assert_fail@plt+0x9674>
   135dc:	ldrd	r2, [sp, #8]
   135e0:	subs	r4, r4, r2
   135e4:	sbc	r5, r5, r3
   135e8:	ldrd	r2, [sp, #24]
   135ec:	cmp	r9, r3
   135f0:	cmpeq	r8, r2
   135f4:	beq	13698 <__assert_fail@plt+0x2494>
   135f8:	subs	r8, r8, #1
   135fc:	mov	r0, r4
   13600:	ldrd	r2, [sp, #16]
   13604:	mov	r1, r5
   13608:	sbc	r9, r9, #0
   1360c:	bl	1bc7c <__assert_fail@plt+0xaa78>
   13610:	ldr	r2, [sp, #32]
   13614:	mov	r3, r0
   13618:	mov	r1, #40	; 0x28
   1361c:	sub	r6, r6, r3
   13620:	add	r0, sp, #40	; 0x28
   13624:	ldrb	ip, [r2, #8]
   13628:	ldr	r2, [sp, #120]	; 0x78
   1362c:	cmp	ip, #0
   13630:	add	r2, r6, r2
   13634:	mov	r6, r3
   13638:	mov	r3, ip
   1363c:	str	r2, [sp, #4]
   13640:	mov	r2, ip
   13644:	beq	135c4 <__assert_fail@plt+0x23c0>
   13648:	ldrb	lr, [r7, #7]
   1364c:	mov	r3, #0
   13650:	mov	r2, r3
   13654:	ldrb	ip, [r7, #6]
   13658:	bfi	sl, lr, #0, #8
   1365c:	ldrb	lr, [r7, #5]
   13660:	bfi	sl, ip, #8, #8
   13664:	ldrb	ip, [r7, #4]
   13668:	bfi	sl, lr, #16, #8
   1366c:	ldrb	lr, [r7, #3]
   13670:	bfi	sl, ip, #24, #8
   13674:	ldrb	ip, [r7, #2]
   13678:	bfi	fp, lr, #0, #8
   1367c:	ldrb	lr, [r7, #1]
   13680:	bfi	fp, ip, #8, #8
   13684:	ldrb	ip, [r7], #8
   13688:	bfi	fp, lr, #16, #8
   1368c:	bfi	fp, ip, #24, #8
   13690:	vmov	d0, sl, fp
   13694:	b	135c8 <__assert_fail@plt+0x23c4>
   13698:	add	sp, sp, #84	; 0x54
   1369c:	ldrd	r4, [sp]
   136a0:	ldrd	r6, [sp, #8]
   136a4:	ldrd	r8, [sp, #16]
   136a8:	ldrd	sl, [sp, #24]
   136ac:	add	sp, sp, #32
   136b0:	pop	{pc}		; (ldr pc, [sp], #4)
   136b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   136b8:	mov	r5, #0
   136bc:	mov	r4, r0
   136c0:	strd	r6, [sp, #8]
   136c4:	mov	r7, #0
   136c8:	mov	r6, r1
   136cc:	cmp	r5, r7
   136d0:	strd	r8, [sp, #16]
   136d4:	strd	sl, [sp, #24]
   136d8:	cmpeq	r0, r1
   136dc:	str	lr, [sp, #32]
   136e0:	sub	sp, sp, #84	; 0x54
   136e4:	strd	r4, [sp, #16]
   136e8:	strd	r6, [sp, #24]
   136ec:	ldr	r6, [sp, #124]	; 0x7c
   136f0:	bls	1381c <__assert_fail@plt+0x2618>
   136f4:	asr	r3, r6, #31
   136f8:	mov	r8, r2
   136fc:	mov	r2, r6
   13700:	subs	r4, r0, #1
   13704:	movw	r9, #49620	; 0xc1d4
   13708:	movt	r9, #1
   1370c:	movw	ip, #57744	; 0xe190
   13710:	movt	ip, #2
   13714:	strd	r2, [sp, #8]
   13718:	sbc	r3, r5, #0
   1371c:	ldr	r2, [sp, #12]
   13720:	mov	r7, r8
   13724:	mov	r8, r0
   13728:	str	ip, [sp, #32]
   1372c:	str	r9, [sp, #36]	; 0x24
   13730:	mov	r9, r5
   13734:	mul	r2, r4, r2
   13738:	umull	r4, r5, r4, r6
   1373c:	mla	r3, r6, r3, r2
   13740:	add	r5, r3, r5
   13744:	b	1377c <__assert_fail@plt+0x2578>
   13748:	vldmia	r7!, {d0}
   1374c:	bl	15a38 <__assert_fail@plt+0x4834>
   13750:	add	r2, sp, #40	; 0x28
   13754:	ldr	r1, [sp, #4]
   13758:	ldr	r0, [sp, #36]	; 0x24
   1375c:	bl	1a878 <__assert_fail@plt+0x9674>
   13760:	ldrd	r2, [sp, #8]
   13764:	subs	r4, r4, r2
   13768:	sbc	r5, r5, r3
   1376c:	ldrd	r2, [sp, #24]
   13770:	cmp	r9, r3
   13774:	cmpeq	r8, r2
   13778:	beq	1381c <__assert_fail@plt+0x2618>
   1377c:	subs	r8, r8, #1
   13780:	mov	r0, r4
   13784:	ldrd	r2, [sp, #16]
   13788:	mov	r1, r5
   1378c:	sbc	r9, r9, #0
   13790:	bl	1bc7c <__assert_fail@plt+0xaa78>
   13794:	ldr	r2, [sp, #32]
   13798:	mov	r3, r0
   1379c:	mov	r1, #40	; 0x28
   137a0:	sub	r6, r6, r3
   137a4:	add	r0, sp, #40	; 0x28
   137a8:	ldrb	ip, [r2, #8]
   137ac:	ldr	r2, [sp, #120]	; 0x78
   137b0:	cmp	ip, #0
   137b4:	add	r2, r6, r2
   137b8:	mov	r6, r3
   137bc:	mov	r3, ip
   137c0:	str	r2, [sp, #4]
   137c4:	mov	r2, ip
   137c8:	beq	13748 <__assert_fail@plt+0x2544>
   137cc:	ldrb	lr, [r7, #7]
   137d0:	mov	r3, #0
   137d4:	mov	r2, r3
   137d8:	ldrb	ip, [r7, #6]
   137dc:	bfi	sl, lr, #0, #8
   137e0:	ldrb	lr, [r7, #5]
   137e4:	bfi	sl, ip, #8, #8
   137e8:	ldrb	ip, [r7, #4]
   137ec:	bfi	sl, lr, #16, #8
   137f0:	ldrb	lr, [r7, #3]
   137f4:	bfi	sl, ip, #24, #8
   137f8:	ldrb	ip, [r7, #2]
   137fc:	bfi	fp, lr, #0, #8
   13800:	ldrb	lr, [r7, #1]
   13804:	bfi	fp, ip, #8, #8
   13808:	ldrb	ip, [r7], #8
   1380c:	bfi	fp, lr, #16, #8
   13810:	bfi	fp, ip, #24, #8
   13814:	vmov	d0, sl, fp
   13818:	b	1374c <__assert_fail@plt+0x2548>
   1381c:	add	sp, sp, #84	; 0x54
   13820:	ldrd	r4, [sp]
   13824:	ldrd	r6, [sp, #8]
   13828:	ldrd	r8, [sp, #16]
   1382c:	ldrd	sl, [sp, #24]
   13830:	add	sp, sp, #32
   13834:	pop	{pc}		; (ldr pc, [sp], #4)
   13838:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1383c:	mov	r5, #0
   13840:	mov	r4, r1
   13844:	strd	r6, [sp, #8]
   13848:	strd	sl, [sp, #24]
   1384c:	mov	fp, #0
   13850:	mov	sl, r0
   13854:	cmp	fp, r5
   13858:	mov	r0, r1
   1385c:	strd	r8, [sp, #16]
   13860:	mov	r1, r5
   13864:	str	lr, [sp, #32]
   13868:	sub	sp, sp, #68	; 0x44
   1386c:	cmpeq	sl, r4
   13870:	ldr	r6, [sp, #108]	; 0x6c
   13874:	strd	sl, [sp]
   13878:	strd	r0, [sp, #8]
   1387c:	bls	13974 <__assert_fail@plt+0x2770>
   13880:	asr	r1, r6, #31
   13884:	subs	r4, sl, #1
   13888:	mov	r8, r2
   1388c:	movw	r2, #57744	; 0xe190
   13890:	movt	r2, #2
   13894:	sbc	r3, fp, #0
   13898:	mov	r0, r6
   1389c:	str	r2, [sp, #24]
   138a0:	mul	r2, r4, r1
   138a4:	umull	r4, r5, r4, r6
   138a8:	strd	r0, [sp, #16]
   138ac:	movw	r1, #49620	; 0xc1d4
   138b0:	movt	r1, #1
   138b4:	mla	r3, r6, r3, r2
   138b8:	str	r1, [sp, #28]
   138bc:	add	r5, r3, r5
   138c0:	b	138f8 <__assert_fail@plt+0x26f4>
   138c4:	vldmia	r8!, {s0}
   138c8:	bl	15dbc <__assert_fail@plt+0x4bb8>
   138cc:	add	r2, sp, #32
   138d0:	mov	r1, r7
   138d4:	ldr	r0, [sp, #28]
   138d8:	bl	1a878 <__assert_fail@plt+0x9674>
   138dc:	ldrd	r2, [sp, #16]
   138e0:	subs	r4, r4, r2
   138e4:	sbc	r5, r5, r3
   138e8:	ldrd	r2, [sp, #8]
   138ec:	cmp	fp, r3
   138f0:	cmpeq	sl, r2
   138f4:	beq	13974 <__assert_fail@plt+0x2770>
   138f8:	subs	sl, sl, #1
   138fc:	mov	r0, r4
   13900:	ldrd	r2, [sp]
   13904:	mov	r1, r5
   13908:	sbc	fp, fp, #0
   1390c:	bl	1bc7c <__assert_fail@plt+0xaa78>
   13910:	ldr	r2, [sp, #24]
   13914:	mov	r3, r0
   13918:	mov	r1, #31
   1391c:	sub	r6, r6, r3
   13920:	add	r0, sp, #32
   13924:	ldrb	ip, [r2, #8]
   13928:	ldr	r2, [sp, #104]	; 0x68
   1392c:	cmp	ip, #0
   13930:	add	r7, r6, r2
   13934:	mov	r6, r3
   13938:	mov	r2, ip
   1393c:	mov	r3, ip
   13940:	beq	138c4 <__assert_fail@plt+0x26c0>
   13944:	ldrb	lr, [r8, #3]
   13948:	mov	r3, #0
   1394c:	mov	r2, r3
   13950:	ldrb	ip, [r8, #2]
   13954:	bfi	r9, lr, #0, #8
   13958:	ldrb	lr, [r8, #1]
   1395c:	bfi	r9, ip, #8, #8
   13960:	ldrb	ip, [r8], #4
   13964:	bfi	r9, lr, #16, #8
   13968:	bfi	r9, ip, #24, #8
   1396c:	vmov	s0, r9
   13970:	b	138c8 <__assert_fail@plt+0x26c4>
   13974:	add	sp, sp, #68	; 0x44
   13978:	ldrd	r4, [sp]
   1397c:	ldrd	r6, [sp, #8]
   13980:	ldrd	r8, [sp, #16]
   13984:	ldrd	sl, [sp, #24]
   13988:	add	sp, sp, #32
   1398c:	pop	{pc}		; (ldr pc, [sp], #4)
   13990:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13994:	mov	r5, #0
   13998:	mov	r4, r0
   1399c:	strd	r6, [sp, #8]
   139a0:	mov	r7, #0
   139a4:	mov	r0, r1
   139a8:	cmp	r5, r7
   139ac:	mov	r1, r7
   139b0:	strd	r8, [sp, #16]
   139b4:	strd	sl, [sp, #24]
   139b8:	cmpeq	r4, r0
   139bc:	str	lr, [sp, #32]
   139c0:	sub	sp, sp, #60	; 0x3c
   139c4:	ldr	fp, [sp, #96]	; 0x60
   139c8:	strd	r4, [sp, #8]
   139cc:	strd	r0, [sp, #16]
   139d0:	ldr	r8, [sp, #100]	; 0x64
   139d4:	bls	13ac0 <__assert_fail@plt+0x28bc>
   139d8:	asr	r1, r8, #31
   139dc:	subs	r6, r4, #1
   139e0:	mov	sl, r2
   139e4:	movw	r2, #49636	; 0xc1e4
   139e8:	movt	r2, #1
   139ec:	sbc	r3, r5, #0
   139f0:	mov	r0, r8
   139f4:	str	r2, [sp, #32]
   139f8:	mul	r2, r6, r1
   139fc:	umull	r6, r7, r6, r8
   13a00:	strd	r0, [sp, #24]
   13a04:	movw	r1, #49624	; 0xc1d8
   13a08:	movt	r1, #1
   13a0c:	mla	r3, r8, r3, r2
   13a10:	str	r1, [sp, #36]	; 0x24
   13a14:	movw	r1, #49628	; 0xc1dc
   13a18:	movt	r1, #1
   13a1c:	add	r7, r3, r7
   13a20:	str	r1, [sp, #40]	; 0x28
   13a24:	subs	r4, r4, #1
   13a28:	mov	r0, r6
   13a2c:	ldrd	r2, [sp, #8]
   13a30:	mov	r1, r7
   13a34:	sbc	r5, r5, #0
   13a38:	bl	1bc7c <__assert_fail@plt+0xaa78>
   13a3c:	ldrb	r3, [sl], #1
   13a40:	mov	r9, r0
   13a44:	cmp	r3, #13
   13a48:	ldrls	pc, [pc, r3, lsl #2]
   13a4c:	b	13b30 <__assert_fail@plt+0x292c>
   13a50:	andeq	r3, r1, r8, lsl #21
   13a54:	andeq	r3, r1, r0, lsr fp
   13a58:	andeq	r3, r1, r0, lsr fp
   13a5c:	andeq	r3, r1, r0, lsr fp
   13a60:	andeq	r3, r1, r0, lsr fp
   13a64:	andeq	r3, r1, r0, lsr fp
   13a68:	andeq	r3, r1, r0, lsr fp
   13a6c:	andeq	r3, r1, r4, lsr #22
   13a70:	andeq	r3, r1, r8, lsl fp
   13a74:	andeq	r3, r1, ip, lsl #22
   13a78:	andeq	r3, r1, r0, lsl #22
   13a7c:	strdeq	r3, [r1], -r4
   13a80:	andeq	r3, r1, r8, ror #21
   13a84:	ldrdeq	r3, [r1], -ip
   13a88:	ldr	r2, [sp, #32]
   13a8c:	sub	r1, r8, r9
   13a90:	movw	r0, #49620	; 0xc1d4
   13a94:	movt	r0, #1
   13a98:	add	r1, r1, fp
   13a9c:	bl	1a878 <__assert_fail@plt+0x9674>
   13aa0:	ldrd	r2, [sp, #24]
   13aa4:	mov	r8, r9
   13aa8:	subs	r6, r6, r2
   13aac:	sbc	r7, r7, r3
   13ab0:	ldrd	r2, [sp, #16]
   13ab4:	cmp	r5, r3
   13ab8:	cmpeq	r4, r2
   13abc:	bne	13a24 <__assert_fail@plt+0x2820>
   13ac0:	add	sp, sp, #60	; 0x3c
   13ac4:	ldrd	r4, [sp]
   13ac8:	ldrd	r6, [sp, #8]
   13acc:	ldrd	r8, [sp, #16]
   13ad0:	ldrd	sl, [sp, #24]
   13ad4:	add	sp, sp, #32
   13ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   13adc:	movw	r2, #49652	; 0xc1f4
   13ae0:	movt	r2, #1
   13ae4:	b	13a8c <__assert_fail@plt+0x2888>
   13ae8:	movw	r2, #49644	; 0xc1ec
   13aec:	movt	r2, #1
   13af0:	b	13a8c <__assert_fail@plt+0x2888>
   13af4:	movw	r2, #49660	; 0xc1fc
   13af8:	movt	r2, #1
   13afc:	b	13a8c <__assert_fail@plt+0x2888>
   13b00:	movw	r2, #49648	; 0xc1f0
   13b04:	movt	r2, #1
   13b08:	b	13a8c <__assert_fail@plt+0x2888>
   13b0c:	movw	r2, #49656	; 0xc1f8
   13b10:	movt	r2, #1
   13b14:	b	13a8c <__assert_fail@plt+0x2888>
   13b18:	movw	r2, #49640	; 0xc1e8
   13b1c:	movt	r2, #1
   13b20:	b	13a8c <__assert_fail@plt+0x2888>
   13b24:	movw	r2, #49664	; 0xc200
   13b28:	movt	r2, #1
   13b2c:	b	13a8c <__assert_fail@plt+0x2888>
   13b30:	str	r3, [sp, #44]	; 0x2c
   13b34:	bl	110a8 <__ctype_b_loc@plt>
   13b38:	ldr	r3, [sp, #44]	; 0x2c
   13b3c:	mov	r2, #4
   13b40:	mov	r1, #1
   13b44:	ldr	lr, [r0]
   13b48:	add	r0, sp, #52	; 0x34
   13b4c:	lsl	ip, r3, #1
   13b50:	ldrh	ip, [lr, ip]
   13b54:	str	r3, [sp]
   13b58:	ldr	r3, [sp, #36]	; 0x24
   13b5c:	tst	ip, #16384	; 0x4000
   13b60:	ldr	ip, [sp, #40]	; 0x28
   13b64:	moveq	r3, ip
   13b68:	bl	110e4 <__sprintf_chk@plt>
   13b6c:	add	r2, sp, #52	; 0x34
   13b70:	b	13a8c <__assert_fail@plt+0x2888>
   13b74:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13b78:	movw	r4, #57744	; 0xe190
   13b7c:	movt	r4, #2
   13b80:	strd	r6, [sp, #8]
   13b84:	movw	r6, #49668	; 0xc204
   13b88:	movt	r6, #1
   13b8c:	movw	r7, #49688	; 0xc218
   13b90:	movt	r7, #1
   13b94:	strd	r8, [sp, #16]
   13b98:	movw	r8, #54604	; 0xd54c
   13b9c:	movt	r8, #1
   13ba0:	str	sl, [sp, #24]
   13ba4:	mov	r9, #1
   13ba8:	str	lr, [sp, #28]
   13bac:	b	13bd8 <__assert_fail@plt+0x29d4>
   13bb0:	bl	10fc4 <dcgettext@plt>
   13bb4:	movw	r3, #57728	; 0xe180
   13bb8:	movt	r3, #2
   13bbc:	str	r0, [r4, #16]
   13bc0:	ldr	r5, [r3]
   13bc4:	mov	r3, #1
   13bc8:	str	r5, [r4, #20]
   13bcc:	strb	r3, [r4, #24]
   13bd0:	cmp	r5, #0
   13bd4:	bne	13c2c <__assert_fail@plt+0x2a28>
   13bd8:	ldr	r3, [r4, #12]
   13bdc:	mov	r1, r6
   13be0:	ldr	r5, [r3]
   13be4:	add	r3, r3, #4
   13be8:	subs	r0, r5, #0
   13bec:	str	r5, [r4, #16]
   13bf0:	beq	13c44 <__assert_fail@plt+0x2a40>
   13bf4:	str	r3, [r4, #12]
   13bf8:	bl	10f34 <strcmp@plt>
   13bfc:	cmp	r0, #0
   13c00:	movw	r1, #49672	; 0xc208
   13c04:	movt	r1, #1
   13c08:	mov	r2, #5
   13c0c:	beq	13bb0 <__assert_fail@plt+0x29ac>
   13c10:	mov	r0, r5
   13c14:	mov	r1, r7
   13c18:	bl	111bc <fopen64@plt>
   13c1c:	cmp	r0, #0
   13c20:	mov	r5, r0
   13c24:	str	r0, [r4, #20]
   13c28:	beq	13c60 <__assert_fail@plt+0x2a5c>
   13c2c:	ldrb	r3, [r4, #25]
   13c30:	cmp	r3, #0
   13c34:	beq	13c44 <__assert_fail@plt+0x2a40>
   13c38:	ldrb	r3, [r4, #26]
   13c3c:	cmp	r3, #0
   13c40:	beq	13c98 <__assert_fail@plt+0x2a94>
   13c44:	mov	r0, r9
   13c48:	ldrd	r4, [sp]
   13c4c:	ldrd	r6, [sp, #8]
   13c50:	ldrd	r8, [sp, #16]
   13c54:	ldr	sl, [sp, #24]
   13c58:	add	sp, sp, #28
   13c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c60:	bl	110d8 <__errno_location@plt>
   13c64:	ldr	sl, [r0]
   13c68:	mov	r1, #3
   13c6c:	mov	r0, r5
   13c70:	mov	r9, #0
   13c74:	ldr	r2, [r4, #16]
   13c78:	bl	191fc <__assert_fail@plt+0x7ff8>
   13c7c:	mov	r3, r0
   13c80:	mov	r2, r8
   13c84:	mov	r0, r5
   13c88:	mov	r1, sl
   13c8c:	bl	1103c <error@plt>
   13c90:	ldr	r5, [r4, #20]
   13c94:	b	13bd0 <__assert_fail@plt+0x29cc>
   13c98:	mov	r0, r5
   13c9c:	mov	r1, r3
   13ca0:	mov	r2, #2
   13ca4:	bl	110fc <setvbuf@plt>
   13ca8:	b	13c44 <__assert_fail@plt+0x2a40>
   13cac:	strd	r4, [sp, #-16]!
   13cb0:	movw	r4, #57744	; 0xe190
   13cb4:	movt	r4, #2
   13cb8:	str	r6, [sp, #8]
   13cbc:	ldr	r6, [r4, #20]
   13cc0:	str	lr, [sp, #12]
   13cc4:	cmp	r6, #0
   13cc8:	moveq	r0, #1
   13ccc:	beq	13d18 <__assert_fail@plt+0x2b14>
   13cd0:	ldr	r2, [r6]
   13cd4:	mov	r5, r0
   13cd8:	movw	r1, #49668	; 0xc204
   13cdc:	movt	r1, #1
   13ce0:	ldr	r3, [r4, #12]
   13ce4:	tst	r2, #32
   13ce8:	moveq	r5, #0
   13cec:	ldr	r0, [r3, #-4]
   13cf0:	bl	10f34 <strcmp@plt>
   13cf4:	cmp	r0, #0
   13cf8:	mov	r0, r6
   13cfc:	bne	13d40 <__assert_fail@plt+0x2b3c>
   13d00:	bl	111b0 <clearerr_unlocked@plt>
   13d04:	cmp	r5, #0
   13d08:	moveq	r0, #1
   13d0c:	bne	13d98 <__assert_fail@plt+0x2b94>
   13d10:	mov	r3, #0
   13d14:	str	r3, [r4, #20]
   13d18:	movw	r3, #57732	; 0xe184
   13d1c:	movt	r3, #2
   13d20:	ldr	r3, [r3]
   13d24:	ldr	r3, [r3]
   13d28:	tst	r3, #32
   13d2c:	bne	13d60 <__assert_fail@plt+0x2b5c>
   13d30:	ldrd	r4, [sp]
   13d34:	ldr	r6, [sp, #8]
   13d38:	add	sp, sp, #12
   13d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d40:	bl	15b78 <__assert_fail@plt+0x4974>
   13d44:	cmp	r0, #0
   13d48:	beq	13d04 <__assert_fail@plt+0x2b00>
   13d4c:	cmp	r5, #0
   13d50:	bne	13d98 <__assert_fail@plt+0x2b94>
   13d54:	bl	110d8 <__errno_location@plt>
   13d58:	ldr	r5, [r0]
   13d5c:	b	13d04 <__assert_fail@plt+0x2b00>
   13d60:	mov	r2, #5
   13d64:	movw	r1, #49692	; 0xc21c
   13d68:	movt	r1, #1
   13d6c:	mov	r0, #0
   13d70:	bl	10fc4 <dcgettext@plt>
   13d74:	mov	r1, #0
   13d78:	mov	r2, r0
   13d7c:	mov	r0, r1
   13d80:	bl	1103c <error@plt>
   13d84:	ldrd	r4, [sp]
   13d88:	mov	r0, #0
   13d8c:	ldr	r6, [sp, #8]
   13d90:	add	sp, sp, #12
   13d94:	pop	{pc}		; (ldr pc, [sp], #4)
   13d98:	mov	r1, #3
   13d9c:	mov	r0, #0
   13da0:	ldr	r2, [r4, #16]
   13da4:	bl	191fc <__assert_fail@plt+0x7ff8>
   13da8:	mov	r3, r0
   13dac:	mov	r1, r5
   13db0:	mov	r0, #0
   13db4:	movw	r2, #54604	; 0xd54c
   13db8:	movt	r2, #1
   13dbc:	bl	1103c <error@plt>
   13dc0:	mov	r0, #0
   13dc4:	b	13d10 <__assert_fail@plt+0x2b0c>
   13dc8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13dcc:	mov	r4, r0
   13dd0:	mov	r5, r1
   13dd4:	orrs	r3, r4, r5
   13dd8:	strd	r6, [sp, #8]
   13ddc:	strd	r8, [sp, #16]
   13de0:	str	sl, [sp, #24]
   13de4:	str	lr, [sp, #28]
   13de8:	sub	sp, sp, #8256	; 0x2040
   13dec:	sub	sp, sp, #48	; 0x30
   13df0:	beq	13fdc <__assert_fail@plt+0x2dd8>
   13df4:	movw	r8, #57744	; 0xe190
   13df8:	movt	r8, #2
   13dfc:	ldr	r7, [r8, #20]
   13e00:	cmp	r7, #0
   13e04:	movwne	sl, #54604	; 0xd54c
   13e08:	movne	r9, #1
   13e0c:	movtne	sl, #1
   13e10:	beq	13f4c <__assert_fail@plt+0x2d48>
   13e14:	mov	r0, r7
   13e18:	bl	11138 <fileno@plt>
   13e1c:	mov	r1, r0
   13e20:	add	r2, sp, #8
   13e24:	mov	r0, #3
   13e28:	bl	10ff4 <__fxstat64@plt>
   13e2c:	cmp	r0, #0
   13e30:	bne	13f70 <__assert_fail@plt+0x2d6c>
   13e34:	ldr	r3, [sp, #24]
   13e38:	and	r3, r3, #53248	; 0xd000
   13e3c:	cmp	r3, #32768	; 0x8000
   13e40:	beq	13ef0 <__assert_fail@plt+0x2cec>
   13e44:	mov	r1, #1
   13e48:	mov	r0, r7
   13e4c:	mov	r2, r4
   13e50:	mov	r3, r5
   13e54:	str	r1, [sp]
   13e58:	bl	15cec <__assert_fail@plt+0x4ae8>
   13e5c:	cmp	r0, #0
   13e60:	beq	13ecc <__assert_fail@plt+0x2cc8>
   13e64:	ldr	r7, [r8, #20]
   13e68:	mov	r6, #8192	; 0x2000
   13e6c:	b	13e74 <__assert_fail@plt+0x2c70>
   13e70:	ldr	r7, [r8, #20]
   13e74:	mov	r1, #0
   13e78:	mov	r2, #1
   13e7c:	str	r7, [sp]
   13e80:	cmp	r1, r5
   13e84:	add	r0, sp, #112	; 0x70
   13e88:	cmpeq	r6, r4
   13e8c:	mov	r1, #8192	; 0x2000
   13e90:	movhi	r6, r4
   13e94:	mov	r3, r6
   13e98:	bl	11198 <__fread_unlocked_chk@plt>
   13e9c:	subs	r4, r4, r0
   13ea0:	sbc	r5, r5, #0
   13ea4:	cmp	r6, r0
   13ea8:	beq	13ec4 <__assert_fail@plt+0x2cc0>
   13eac:	ldr	r3, [r8, #20]
   13eb0:	ldr	r3, [r3]
   13eb4:	tst	r3, #32
   13eb8:	bne	13fb0 <__assert_fail@plt+0x2dac>
   13ebc:	tst	r3, #16
   13ec0:	bne	13fa4 <__assert_fail@plt+0x2da0>
   13ec4:	orrs	r3, r4, r5
   13ec8:	bne	13e70 <__assert_fail@plt+0x2c6c>
   13ecc:	mov	r0, r9
   13ed0:	add	sp, sp, #8256	; 0x2040
   13ed4:	add	sp, sp, #48	; 0x30
   13ed8:	ldrd	r4, [sp]
   13edc:	ldrd	r6, [sp, #8]
   13ee0:	ldrd	r8, [sp, #16]
   13ee4:	ldr	sl, [sp, #24]
   13ee8:	add	sp, sp, #28
   13eec:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef0:	ldrd	r0, [sp, #56]	; 0x38
   13ef4:	ldr	r2, [sp, #64]	; 0x40
   13ef8:	sub	r3, r2, #1
   13efc:	cmp	r3, #536870912	; 0x20000000
   13f00:	movcs	r2, #512	; 0x200
   13f04:	asr	r3, r2, #31
   13f08:	cmp	r2, r0
   13f0c:	sbcs	r3, r3, r1
   13f10:	bge	13e68 <__assert_fail@plt+0x2c64>
   13f14:	cmp	r1, r5
   13f18:	cmpeq	r0, r4
   13f1c:	bcs	13fb8 <__assert_fail@plt+0x2db4>
   13f20:	subs	r4, r4, r0
   13f24:	sbc	r5, r5, r1
   13f28:	mov	r0, #0
   13f2c:	bl	13cac <__assert_fail@plt+0x2aa8>
   13f30:	and	r9, r9, r0
   13f34:	bl	13b74 <__assert_fail@plt+0x2970>
   13f38:	ldr	r7, [r8, #20]
   13f3c:	uxtb	r9, r9
   13f40:	and	r9, r9, r0
   13f44:	cmp	r7, #0
   13f48:	bne	13e14 <__assert_fail@plt+0x2c10>
   13f4c:	mov	r2, #5
   13f50:	movw	r1, #49704	; 0xc228
   13f54:	movt	r1, #1
   13f58:	mov	r0, #0
   13f5c:	bl	10fc4 <dcgettext@plt>
   13f60:	mov	r2, r0
   13f64:	mov	r1, #0
   13f68:	mov	r0, #1
   13f6c:	bl	1103c <error@plt>
   13f70:	bl	110d8 <__errno_location@plt>
   13f74:	ldr	r6, [r0]
   13f78:	mov	r1, #3
   13f7c:	mov	r0, #0
   13f80:	mov	r9, r0
   13f84:	ldr	r2, [r8, #16]
   13f88:	bl	191fc <__assert_fail@plt+0x7ff8>
   13f8c:	mov	r3, r0
   13f90:	mov	r2, sl
   13f94:	mov	r1, r6
   13f98:	mov	r0, r9
   13f9c:	bl	1103c <error@plt>
   13fa0:	b	13f28 <__assert_fail@plt+0x2d24>
   13fa4:	orrs	r3, r4, r5
   13fa8:	bne	13f28 <__assert_fail@plt+0x2d24>
   13fac:	b	13ecc <__assert_fail@plt+0x2cc8>
   13fb0:	mov	r9, #0
   13fb4:	b	13ecc <__assert_fail@plt+0x2cc8>
   13fb8:	mov	r1, #1
   13fbc:	mov	r2, r4
   13fc0:	mov	r3, r5
   13fc4:	mov	r0, r7
   13fc8:	str	r1, [sp]
   13fcc:	bl	15cec <__assert_fail@plt+0x4ae8>
   13fd0:	cmp	r0, #0
   13fd4:	movne	r9, #0
   13fd8:	b	13ecc <__assert_fail@plt+0x2cc8>
   13fdc:	mov	r9, #1
   13fe0:	b	13ecc <__assert_fail@plt+0x2cc8>
   13fe4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13fe8:	movw	ip, #57624	; 0xe118
   13fec:	movt	ip, #2
   13ff0:	strd	r6, [sp, #8]
   13ff4:	strd	r8, [sp, #16]
   13ff8:	strd	sl, [sp, #24]
   13ffc:	mov	fp, r2
   14000:	str	lr, [sp, #32]
   14004:	sub	sp, sp, #28
   14008:	strd	r0, [sp, #8]
   1400c:	ldrb	r1, [ip]
   14010:	str	ip, [sp, #20]
   14014:	cmp	r1, #0
   14018:	movweq	r4, #57744	; 0xe190
   1401c:	movteq	r4, #2
   14020:	beq	14038 <__assert_fail@plt+0x2e34>
   14024:	ldrb	r1, [ip, #1]
   14028:	movw	r4, #57744	; 0xe190
   1402c:	movt	r4, #2
   14030:	cmp	r1, #0
   14034:	beq	14220 <__assert_fail@plt+0x301c>
   14038:	ldr	r3, [r4, #36]	; 0x24
   1403c:	mov	r5, #0
   14040:	strb	r5, [r4, #32]
   14044:	cmp	r3, r5
   14048:	beq	14260 <__assert_fail@plt+0x305c>
   1404c:	movw	r3, #48760	; 0xbe78
   14050:	movt	r3, #1
   14054:	movw	r9, #57732	; 0xe184
   14058:	movt	r9, #2
   1405c:	str	r3, [sp, #16]
   14060:	b	140ec <__assert_fail@plt+0x2ee8>
   14064:	mov	r2, r5
   14068:	ldrd	r0, [sp, #8]
   1406c:	ldr	r3, [r4, #44]	; 0x2c
   14070:	blx	r3
   14074:	ldr	ip, [r4, #40]	; 0x28
   14078:	mov	r1, r7
   1407c:	mov	r0, r6
   14080:	ldr	r2, [sp, #64]	; 0x40
   14084:	add	ip, ip, r8
   14088:	ldr	lr, [ip, #28]
   1408c:	add	r3, ip, #12
   14090:	str	lr, [sp, #4]
   14094:	ldr	lr, [ip, #24]
   14098:	str	lr, [sp]
   1409c:	ldr	sl, [ip, #8]
   140a0:	blx	sl
   140a4:	ldr	r3, [r4, #40]	; 0x28
   140a8:	add	r8, r3, r8
   140ac:	ldrb	r3, [r8, #21]
   140b0:	cmp	r3, #0
   140b4:	bne	14140 <__assert_fail@plt+0x2f3c>
   140b8:	ldr	r0, [r9]
   140bc:	ldr	r3, [r0, #20]
   140c0:	ldr	r2, [r0, #24]
   140c4:	cmp	r3, r2
   140c8:	bcs	14288 <__assert_fail@plt+0x3084>
   140cc:	ldr	r2, [r4, #36]	; 0x24
   140d0:	add	r5, r5, #1
   140d4:	add	ip, r3, #1
   140d8:	mov	r1, #10
   140dc:	str	ip, [r0, #20]
   140e0:	strb	r1, [r3]
   140e4:	cmp	r2, r5
   140e8:	bls	14260 <__assert_fail@plt+0x305c>
   140ec:	lsl	r8, r5, #5
   140f0:	ldr	r2, [sp, #16]
   140f4:	cmp	r5, #0
   140f8:	ldr	r3, [r4, #40]	; 0x28
   140fc:	ldr	r6, [r4, #28]
   14100:	add	r3, r3, r8
   14104:	ldr	r3, [r3, #4]
   14108:	sub	r7, r6, fp
   1410c:	add	r3, r2, r3, lsl #2
   14110:	ldr	r3, [r3, #132]	; 0x84
   14114:	udiv	r6, r6, r3
   14118:	udiv	r7, r7, r3
   1411c:	beq	14064 <__assert_fail@plt+0x2e60>
   14120:	movw	r3, #52988	; 0xcefc
   14124:	movt	r3, #1
   14128:	ldr	r2, [r4]
   1412c:	movw	r1, #49620	; 0xc1d4
   14130:	movt	r1, #1
   14134:	mov	r0, #1
   14138:	bl	11120 <__printf_chk@plt>
   1413c:	b	14074 <__assert_fail@plt+0x2e70>
   14140:	ldr	r2, [r8, #24]
   14144:	movw	r3, #52988	; 0xcefc
   14148:	movt	r3, #1
   1414c:	movw	r1, #49620	; 0xc1d4
   14150:	movt	r1, #1
   14154:	ldr	ip, [r8, #28]
   14158:	mov	r0, #1
   1415c:	mul	ip, ip, r7
   14160:	sdiv	r6, ip, r6
   14164:	mla	r2, r2, r7, r6
   14168:	bl	11120 <__printf_chk@plt>
   1416c:	movw	r0, #49748	; 0xc254
   14170:	movt	r0, #1
   14174:	ldr	r3, [r9]
   14178:	mov	r2, #3
   1417c:	mov	r1, #1
   14180:	bl	10fa0 <fwrite_unlocked@plt>
   14184:	cmp	fp, #0
   14188:	beq	141e8 <__assert_fail@plt+0x2fe4>
   1418c:	bl	110a8 <__ctype_b_loc@plt>
   14190:	ldr	r3, [sp, #64]	; 0x40
   14194:	mov	r8, r0
   14198:	add	r7, r3, fp
   1419c:	mov	r6, r3
   141a0:	ldrb	r3, [r6], #1
   141a4:	mov	r1, #46	; 0x2e
   141a8:	ldr	r0, [r8]
   141ac:	lsl	r2, r3, #1
   141b0:	ldrh	r2, [r0, r2]
   141b4:	ldr	r0, [r9]
   141b8:	tst	r2, #16384	; 0x4000
   141bc:	moveq	r3, r1
   141c0:	movne	r1, r3
   141c4:	ldr	r2, [r0, #20]
   141c8:	ldr	lr, [r0, #24]
   141cc:	add	ip, r2, #1
   141d0:	cmp	r2, lr
   141d4:	strcc	ip, [r0, #20]
   141d8:	strbcc	r3, [r2]
   141dc:	bcs	14218 <__assert_fail@plt+0x3014>
   141e0:	cmp	r6, r7
   141e4:	bne	141a0 <__assert_fail@plt+0x2f9c>
   141e8:	ldr	r0, [r9]
   141ec:	ldr	r3, [r0, #20]
   141f0:	ldr	r2, [r0, #24]
   141f4:	cmp	r3, r2
   141f8:	addcc	r1, r3, #1
   141fc:	movcc	r2, #60	; 0x3c
   14200:	strcc	r1, [r0, #20]
   14204:	strbcc	r2, [r3]
   14208:	bcc	140b8 <__assert_fail@plt+0x2eb4>
   1420c:	mov	r1, #60	; 0x3c
   14210:	bl	11168 <__overflow@plt>
   14214:	b	140b8 <__assert_fail@plt+0x2eb4>
   14218:	bl	11168 <__overflow@plt>
   1421c:	b	141e0 <__assert_fail@plt+0x2fdc>
   14220:	ldr	r1, [r4, #28]
   14224:	cmp	r1, r2
   14228:	bne	14038 <__assert_fail@plt+0x2e34>
   1422c:	mov	r0, r3
   14230:	ldr	r1, [sp, #64]	; 0x40
   14234:	bl	10fac <memcmp@plt>
   14238:	cmp	r0, #0
   1423c:	bne	14038 <__assert_fail@plt+0x2e34>
   14240:	ldrb	r3, [r4, #32]
   14244:	cmp	r3, #0
   14248:	bne	14260 <__assert_fail@plt+0x305c>
   1424c:	movw	r0, #49744	; 0xc250
   14250:	movt	r0, #1
   14254:	bl	11054 <puts@plt>
   14258:	mov	r3, #1
   1425c:	strb	r3, [r4, #32]
   14260:	ldr	r2, [sp, #20]
   14264:	mov	r3, #0
   14268:	strb	r3, [r2, #1]
   1426c:	add	sp, sp, #28
   14270:	ldrd	r4, [sp]
   14274:	ldrd	r6, [sp, #8]
   14278:	ldrd	r8, [sp, #16]
   1427c:	ldrd	sl, [sp, #24]
   14280:	add	sp, sp, #32
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	mov	r1, #10
   1428c:	add	r5, r5, #1
   14290:	bl	11168 <__overflow@plt>
   14294:	ldr	r3, [r4, #36]	; 0x24
   14298:	cmp	r5, r3
   1429c:	bcc	140ec <__assert_fail@plt+0x2ee8>
   142a0:	b	14260 <__assert_fail@plt+0x305c>
   142a4:	ldrb	r3, [r0]
   142a8:	cmp	r3, #0
   142ac:	beq	14a90 <__assert_fail@plt+0x388c>
   142b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   142b4:	strd	r6, [sp, #8]
   142b8:	movw	r7, #57744	; 0xe190
   142bc:	movt	r7, #2
   142c0:	ldr	r3, [r7, #36]	; 0x24
   142c4:	mov	r6, r0
   142c8:	strd	r8, [sp, #16]
   142cc:	strd	sl, [sp, #24]
   142d0:	movw	sl, #52429	; 0xcccd
   142d4:	movt	sl, #52428	; 0xcccc
   142d8:	add	fp, r7, #48	; 0x30
   142dc:	str	lr, [sp, #32]
   142e0:	sub	sp, sp, #20
   142e4:	str	r0, [sp, #12]
   142e8:	ldr	r0, [r7, #40]	; 0x28
   142ec:	ldr	r2, [r7, #48]	; 0x30
   142f0:	cmp	r2, r3
   142f4:	bls	14814 <__assert_fail@plt+0x3610>
   142f8:	adds	r4, r0, r3, lsl #5
   142fc:	beq	14ab4 <__assert_fail@plt+0x38b0>
   14300:	ldrb	r1, [r6]
   14304:	sub	r3, r1, #97	; 0x61
   14308:	cmp	r3, #23
   1430c:	ldrls	pc, [pc, r3, lsl #2]
   14310:	b	14518 <__assert_fail@plt+0x3314>
   14314:	strdeq	r4, [r1], -ip
   14318:	andeq	r4, r1, r8, lsl r5
   1431c:	muleq	r1, r4, r4
   14320:	andeq	r4, r1, ip, lsr r4
   14324:	andeq	r4, r1, r8, lsl r5
   14328:	andeq	r4, r1, r4, ror r3
   1432c:	andeq	r4, r1, r8, lsl r5
   14330:	andeq	r4, r1, r8, lsl r5
   14334:	andeq	r4, r1, r8, lsl r5
   14338:	andeq	r4, r1, r8, lsl r5
   1433c:	andeq	r4, r1, r8, lsl r5
   14340:	andeq	r4, r1, r8, lsl r5
   14344:	andeq	r4, r1, r8, lsl r5
   14348:	andeq	r4, r1, r8, lsl r5
   1434c:	andeq	r4, r1, ip, lsr r4
   14350:	andeq	r4, r1, r8, lsl r5
   14354:	andeq	r4, r1, r8, lsl r5
   14358:	andeq	r4, r1, r8, lsl r5
   1435c:	andeq	r4, r1, r8, lsl r5
   14360:	andeq	r4, r1, r8, lsl r5
   14364:	andeq	r4, r1, ip, lsr r4
   14368:	andeq	r4, r1, r8, lsl r5
   1436c:	andeq	r4, r1, r8, lsl r5
   14370:	andeq	r4, r1, ip, lsr r4
   14374:	ldrb	r3, [r6, #1]
   14378:	cmp	r3, #70	; 0x46
   1437c:	beq	148a8 <__assert_fail@plt+0x36a4>
   14380:	cmp	r3, #76	; 0x4c
   14384:	beq	1482c <__assert_fail@plt+0x3628>
   14388:	cmp	r3, #68	; 0x44
   1438c:	beq	1482c <__assert_fail@plt+0x3628>
   14390:	sub	r3, r3, #48	; 0x30
   14394:	add	r1, r6, #1
   14398:	cmp	r3, #9
   1439c:	bhi	14a84 <__assert_fail@plt+0x3880>
   143a0:	add	r0, r6, #2
   143a4:	mov	r8, #0
   143a8:	b	143bc <__assert_fail@plt+0x31b8>
   143ac:	mvn	r2, r3
   143b0:	umull	ip, r2, sl, r2
   143b4:	cmp	r8, r2, lsr #3
   143b8:	bhi	14938 <__assert_fail@plt+0x3734>
   143bc:	ldrb	r2, [r0]
   143c0:	add	r8, r8, r8, lsl #2
   143c4:	mov	r5, r0
   143c8:	add	r0, r0, #1
   143cc:	add	r8, r3, r8, lsl #1
   143d0:	sub	r3, r2, #48	; 0x30
   143d4:	cmp	r3, #9
   143d8:	bls	143ac <__assert_fail@plt+0x31a8>
   143dc:	cmp	r5, r1
   143e0:	beq	149e8 <__assert_fail@plt+0x37e4>
   143e4:	cmp	r8, #8
   143e8:	bhi	143fc <__assert_fail@plt+0x31f8>
   143ec:	add	r3, r7, r8, lsl #2
   143f0:	ldr	r9, [r3, #88]	; 0x58
   143f4:	cmp	r9, #0
   143f8:	bne	14834 <__assert_fail@plt+0x3630>
   143fc:	movw	r1, #49908	; 0xc2f4
   14400:	movt	r1, #1
   14404:	mov	r2, #5
   14408:	mov	r0, #0
   1440c:	bl	10fc4 <dcgettext@plt>
   14410:	mov	r4, r0
   14414:	ldr	r0, [sp, #12]
   14418:	bl	199a8 <__assert_fail@plt+0x87a4>
   1441c:	mov	r1, #0
   14420:	mov	r3, r0
   14424:	str	r8, [sp]
   14428:	mov	r0, r1
   1442c:	mov	r2, r4
   14430:	bl	1103c <error@plt>
   14434:	mov	r0, #0
   14438:	b	14558 <__assert_fail@plt+0x3354>
   1443c:	ldrb	r3, [r6, #1]
   14440:	sub	r2, r3, #67	; 0x43
   14444:	cmp	r2, #16
   14448:	ldrls	pc, [pc, r2, lsl #2]
   1444c:	b	1479c <__assert_fail@plt+0x3598>
   14450:	andeq	r4, r1, ip, lsl #15
   14454:	muleq	r1, ip, r7
   14458:	muleq	r1, ip, r7
   1445c:	muleq	r1, ip, r7
   14460:	muleq	r1, ip, r7
   14464:	muleq	r1, ip, r7
   14468:	andeq	r4, r1, r4, ror r5
   1446c:	muleq	r1, ip, r7
   14470:	muleq	r1, ip, r7
   14474:	andeq	r4, r1, r4, ror r5
   14478:	muleq	r1, ip, r7
   1447c:	muleq	r1, ip, r7
   14480:	muleq	r1, ip, r7
   14484:	muleq	r1, ip, r7
   14488:	muleq	r1, ip, r7
   1448c:	muleq	r1, ip, r7
   14490:	andeq	r4, r1, ip, ror r7
   14494:	movw	r3, #14736	; 0x3990
   14498:	movt	r3, #1
   1449c:	add	r5, r6, #1
   144a0:	mov	r8, #3
   144a4:	mov	r2, #6
   144a8:	mov	r9, #1
   144ac:	stm	r4, {r2, r9}
   144b0:	str	r3, [r4, #8]
   144b4:	str	r8, [r4, #24]
   144b8:	ldrb	r3, [r5]
   144bc:	cmp	r3, #122	; 0x7a
   144c0:	moveq	r3, #1
   144c4:	movne	r3, #0
   144c8:	addeq	r5, r5, #1
   144cc:	cmp	r5, r6
   144d0:	strb	r3, [r4, #21]
   144d4:	beq	14a98 <__assert_fail@plt+0x3894>
   144d8:	ldr	r3, [r7, #36]	; 0x24
   144dc:	mov	r6, r5
   144e0:	ldrb	r2, [r5]
   144e4:	add	r3, r3, #1
   144e8:	cmp	r2, #0
   144ec:	str	r3, [r7, #36]	; 0x24
   144f0:	bne	142e8 <__assert_fail@plt+0x30e4>
   144f4:	mov	r0, #1
   144f8:	b	14558 <__assert_fail@plt+0x3354>
   144fc:	movw	r3, #11348	; 0x2c54
   14500:	movt	r3, #1
   14504:	add	r5, r6, #1
   14508:	mov	r8, #3
   1450c:	mov	r2, #5
   14510:	mov	r9, #1
   14514:	b	144ac <__assert_fail@plt+0x32a8>
   14518:	mov	r2, #5
   1451c:	movw	r1, #49992	; 0xc348
   14520:	movt	r1, #1
   14524:	mov	r0, #0
   14528:	bl	10fc4 <dcgettext@plt>
   1452c:	ldrb	r4, [r6]
   14530:	mov	r5, r0
   14534:	ldr	r0, [sp, #12]
   14538:	bl	199a8 <__assert_fail@plt+0x87a4>
   1453c:	mov	r1, #0
   14540:	mov	r2, r5
   14544:	str	r0, [sp]
   14548:	mov	r3, r4
   1454c:	mov	r0, r1
   14550:	bl	1103c <error@plt>
   14554:	mov	r0, #0
   14558:	add	sp, sp, #20
   1455c:	ldrd	r4, [sp]
   14560:	ldrd	r6, [sp, #8]
   14564:	ldrd	r8, [sp, #16]
   14568:	ldrd	sl, [sp, #24]
   1456c:	add	sp, sp, #32
   14570:	pop	{pc}		; (ldr pc, [sp], #4)
   14574:	ldr	r9, [r7, #68]	; 0x44
   14578:	add	r5, r6, #2
   1457c:	mov	r8, #4
   14580:	sub	r1, r1, #100	; 0x64
   14584:	cmp	r1, #20
   14588:	ldrls	pc, [pc, r1, lsl #2]
   1458c:	b	1487c <__assert_fail@plt+0x3678>
   14590:	andeq	r4, r1, r0, lsr #14
   14594:	andeq	r4, r1, ip, ror r8
   14598:	andeq	r4, r1, ip, ror r8
   1459c:	andeq	r4, r1, ip, ror r8
   145a0:	andeq	r4, r1, ip, ror r8
   145a4:	andeq	r4, r1, ip, ror r8
   145a8:	andeq	r4, r1, ip, ror r8
   145ac:	andeq	r4, r1, ip, ror r8
   145b0:	andeq	r4, r1, ip, ror r8
   145b4:	andeq	r4, r1, ip, ror r8
   145b8:	andeq	r4, r1, ip, ror r8
   145bc:	andeq	r4, r1, r8, lsr #13
   145c0:	andeq	r4, r1, ip, ror r8
   145c4:	andeq	r4, r1, ip, ror r8
   145c8:	andeq	r4, r1, ip, ror r8
   145cc:	andeq	r4, r1, ip, ror r8
   145d0:	andeq	r4, r1, ip, ror r8
   145d4:	andeq	r4, r1, r4, asr r6
   145d8:	andeq	r4, r1, ip, ror r8
   145dc:	andeq	r4, r1, ip, ror r8
   145e0:	andeq	r4, r1, r4, ror #11
   145e4:	movw	r3, #48760	; 0xbe78
   145e8:	movt	r3, #1
   145ec:	add	r8, r3, r8, lsl #2
   145f0:	cmp	r9, #5
   145f4:	add	r0, r4, #12
   145f8:	ldr	r8, [r8, #392]	; 0x188
   145fc:	beq	14974 <__assert_fail@plt+0x3770>
   14600:	cmp	r9, #4
   14604:	beq	14a10 <__assert_fail@plt+0x380c>
   14608:	movw	r1, #54376	; 0xd468
   1460c:	movt	r1, #1
   14610:	str	r8, [sp]
   14614:	movw	r3, #49896	; 0xc2e8
   14618:	movt	r3, #1
   1461c:	mov	r2, #9
   14620:	str	r1, [sp, #4]
   14624:	mov	r1, #1
   14628:	bl	110e4 <__sprintf_chk@plt>
   1462c:	cmp	r9, #2
   14630:	beq	14a00 <__assert_fail@plt+0x37fc>
   14634:	cmp	r9, #3
   14638:	beq	149d8 <__assert_fail@plt+0x37d4>
   1463c:	cmp	r9, #1
   14640:	bne	1487c <__assert_fail@plt+0x3678>
   14644:	movw	r3, #13192	; 0x3388
   14648:	movt	r3, #1
   1464c:	mov	r2, #3
   14650:	b	144ac <__assert_fail@plt+0x32a8>
   14654:	movw	r3, #48760	; 0xbe78
   14658:	movt	r3, #1
   1465c:	add	r8, r3, r8, lsl #2
   14660:	cmp	r9, #5
   14664:	add	r0, r4, #12
   14668:	ldr	r8, [r8, #324]	; 0x144
   1466c:	beq	148f0 <__assert_fail@plt+0x36ec>
   14670:	movw	r3, #49772	; 0xc26c
   14674:	movt	r3, #1
   14678:	cmp	r9, #4
   1467c:	movw	r1, #49768	; 0xc268
   14680:	movt	r1, #1
   14684:	movne	r1, r3
   14688:	mov	r2, #9
   1468c:	movw	r3, #49884	; 0xc2dc
   14690:	movt	r3, #1
   14694:	str	r1, [sp]
   14698:	mov	r1, #1
   1469c:	bl	110e4 <__sprintf_chk@plt>
   146a0:	mov	r2, #1
   146a4:	b	146fc <__assert_fail@plt+0x34f8>
   146a8:	movw	r3, #48760	; 0xbe78
   146ac:	movt	r3, #1
   146b0:	add	r8, r3, r8, lsl #2
   146b4:	cmp	r9, #5
   146b8:	add	r0, r4, #12
   146bc:	ldr	r8, [r8, #256]	; 0x100
   146c0:	beq	148fc <__assert_fail@plt+0x36f8>
   146c4:	movw	r3, #49760	; 0xc260
   146c8:	movt	r3, #1
   146cc:	cmp	r9, #4
   146d0:	movw	r1, #49756	; 0xc25c
   146d4:	movt	r1, #1
   146d8:	movne	r1, r3
   146dc:	mov	r2, #9
   146e0:	movw	r3, #49896	; 0xc2e8
   146e4:	movt	r3, #1
   146e8:	str	r8, [sp]
   146ec:	str	r1, [sp, #4]
   146f0:	mov	r1, #1
   146f4:	bl	110e4 <__sprintf_chk@plt>
   146f8:	mov	r2, #2
   146fc:	sub	r3, r9, #1
   14700:	cmp	r3, #4
   14704:	ldrls	pc, [pc, r3, lsl #2]
   14708:	b	1487c <__assert_fail@plt+0x3678>
   1470c:	andeq	r4, r1, r4, ror #17
   14710:	ldrdeq	r4, [r1], -r8
   14714:	andeq	r4, r1, ip, asr #17
   14718:	andeq	r4, r1, r0, asr #17
   1471c:			; <UNDEFINED> instruction: 0x000148b4
   14720:	movw	r3, #48760	; 0xbe78
   14724:	movt	r3, #1
   14728:	add	r8, r3, r8, lsl #2
   1472c:	cmp	r9, #5
   14730:	add	r0, r4, #12
   14734:	ldr	r8, [r8, #188]	; 0xbc
   14738:	beq	149a8 <__assert_fail@plt+0x37a4>
   1473c:	cmp	r9, #4
   14740:	beq	14a44 <__assert_fail@plt+0x3840>
   14744:	movw	r1, #49892	; 0xc2e4
   14748:	movt	r1, #1
   1474c:	movw	r3, #49884	; 0xc2dc
   14750:	movt	r3, #1
   14754:	mov	r2, #9
   14758:	str	r1, [sp]
   1475c:	mov	r1, #1
   14760:	bl	110e4 <__sprintf_chk@plt>
   14764:	cmp	r9, #2
   14768:	bne	14908 <__assert_fail@plt+0x3704>
   1476c:	movw	r3, #12904	; 0x3268
   14770:	movt	r3, #1
   14774:	mov	r2, #0
   14778:	b	144ac <__assert_fail@plt+0x32a8>
   1477c:	add	r5, r6, #2
   14780:	mov	r8, #2
   14784:	ldr	r9, [r7, #60]	; 0x3c
   14788:	b	14580 <__assert_fail@plt+0x337c>
   1478c:	add	r5, r6, #2
   14790:	mov	r8, #1
   14794:	ldr	r9, [r7, #56]	; 0x38
   14798:	b	14580 <__assert_fail@plt+0x337c>
   1479c:	sub	r3, r3, #48	; 0x30
   147a0:	add	r0, r6, #1
   147a4:	cmp	r3, #9
   147a8:	bhi	14a74 <__assert_fail@plt+0x3870>
   147ac:	add	ip, r6, #2
   147b0:	mov	r8, #0
   147b4:	b	147c8 <__assert_fail@plt+0x35c4>
   147b8:	mvn	r2, r3
   147bc:	umull	lr, r2, sl, r2
   147c0:	cmp	r8, r2, lsr #3
   147c4:	bhi	14938 <__assert_fail@plt+0x3734>
   147c8:	ldrb	r2, [ip]
   147cc:	add	r8, r8, r8, lsl #2
   147d0:	mov	r5, ip
   147d4:	add	ip, ip, #1
   147d8:	add	r8, r3, r8, lsl #1
   147dc:	sub	r3, r2, #48	; 0x30
   147e0:	cmp	r3, #9
   147e4:	bls	147b8 <__assert_fail@plt+0x35b4>
   147e8:	cmp	r0, r5
   147ec:	beq	149f4 <__assert_fail@plt+0x37f0>
   147f0:	cmp	r8, #8
   147f4:	bhi	14808 <__assert_fail@plt+0x3604>
   147f8:	add	r3, r7, r8, lsl #2
   147fc:	ldr	r9, [r3, #52]	; 0x34
   14800:	cmp	r9, #0
   14804:	bne	14580 <__assert_fail@plt+0x337c>
   14808:	movw	r1, #49804	; 0xc28c
   1480c:	movt	r1, #1
   14810:	b	14404 <__assert_fail@plt+0x3200>
   14814:	mov	r2, #32
   14818:	mov	r1, fp
   1481c:	bl	1a4d0 <__assert_fail@plt+0x92cc>
   14820:	str	r0, [r7, #40]	; 0x28
   14824:	ldr	r3, [r7, #36]	; 0x24
   14828:	b	142f8 <__assert_fail@plt+0x30f4>
   1482c:	ldr	r9, [r7, #120]	; 0x78
   14830:	add	r5, r6, #2
   14834:	bl	111a4 <localeconv@plt>
   14838:	ldr	r0, [r0]
   1483c:	ldrb	r3, [r0]
   14840:	cmp	r3, #0
   14844:	moveq	r0, #1
   14848:	beq	14850 <__assert_fail@plt+0x364c>
   1484c:	bl	110c0 <strlen@plt>
   14850:	cmp	r9, #7
   14854:	beq	14880 <__assert_fail@plt+0x367c>
   14858:	cmp	r9, #8
   1485c:	bne	14874 <__assert_fail@plt+0x3670>
   14860:	movw	r3, #13616	; 0x3530
   14864:	movt	r3, #1
   14868:	add	r8, r0, #23
   1486c:	mov	r2, #4
   14870:	b	144ac <__assert_fail@plt+0x32a8>
   14874:	cmp	r9, #6
   14878:	beq	14894 <__assert_fail@plt+0x3690>
   1487c:	bl	111ec <abort@plt>
   14880:	movw	r3, #14004	; 0x36b4
   14884:	movt	r3, #1
   14888:	add	r8, r0, #23
   1488c:	mov	r2, #4
   14890:	b	144ac <__assert_fail@plt+0x32a8>
   14894:	movw	r3, #14392	; 0x3838
   14898:	movt	r3, #1
   1489c:	add	r8, r0, #14
   148a0:	mov	r2, #4
   148a4:	b	144ac <__assert_fail@plt+0x32a8>
   148a8:	add	r5, r6, #2
   148ac:	ldr	r9, [r7, #104]	; 0x68
   148b0:	b	14834 <__assert_fail@plt+0x3630>
   148b4:	movw	r3, #11660	; 0x2d8c
   148b8:	movt	r3, #1
   148bc:	b	144ac <__assert_fail@plt+0x32a8>
   148c0:	movw	r3, #12008	; 0x2ee8
   148c4:	movt	r3, #1
   148c8:	b	144ac <__assert_fail@plt+0x32a8>
   148cc:	movw	r3, #12312	; 0x3018
   148d0:	movt	r3, #1
   148d4:	b	144ac <__assert_fail@plt+0x32a8>
   148d8:	movw	r3, #12616	; 0x3148
   148dc:	movt	r3, #1
   148e0:	b	144ac <__assert_fail@plt+0x32a8>
   148e4:	movw	r3, #13192	; 0x3388
   148e8:	movt	r3, #1
   148ec:	b	144ac <__assert_fail@plt+0x32a8>
   148f0:	movw	r1, #49764	; 0xc264
   148f4:	movt	r1, #1
   148f8:	b	14688 <__assert_fail@plt+0x3484>
   148fc:	movw	r1, #49752	; 0xc258
   14900:	movt	r1, #1
   14904:	b	146dc <__assert_fail@plt+0x34d8>
   14908:	cmp	r9, #3
   1490c:	bne	14920 <__assert_fail@plt+0x371c>
   14910:	movw	r3, #12312	; 0x3018
   14914:	movt	r3, #1
   14918:	mov	r2, #0
   1491c:	b	144ac <__assert_fail@plt+0x32a8>
   14920:	cmp	r9, #1
   14924:	bne	1487c <__assert_fail@plt+0x3678>
   14928:	movw	r3, #13404	; 0x345c
   1492c:	movt	r3, #1
   14930:	mov	r2, #0
   14934:	b	144ac <__assert_fail@plt+0x32a8>
   14938:	mov	r2, #5
   1493c:	movw	r1, #50048	; 0xc380
   14940:	movt	r1, #1
   14944:	mov	r0, #0
   14948:	bl	10fc4 <dcgettext@plt>
   1494c:	mov	r4, r0
   14950:	ldr	r0, [sp, #12]
   14954:	bl	199a8 <__assert_fail@plt+0x87a4>
   14958:	mov	r1, #0
   1495c:	mov	r3, r0
   14960:	mov	r2, r4
   14964:	mov	r0, r1
   14968:	bl	1103c <error@plt>
   1496c:	mov	r0, #0
   14970:	b	14558 <__assert_fail@plt+0x3354>
   14974:	movw	r1, #50080	; 0xc3a0
   14978:	movt	r1, #1
   1497c:	str	r8, [sp]
   14980:	mov	r2, #9
   14984:	movw	r3, #49896	; 0xc2e8
   14988:	movt	r3, #1
   1498c:	str	r1, [sp, #4]
   14990:	mov	r1, #1
   14994:	bl	110e4 <__sprintf_chk@plt>
   14998:	movw	r3, #11660	; 0x2d8c
   1499c:	movt	r3, #1
   149a0:	mov	r2, #3
   149a4:	b	144ac <__assert_fail@plt+0x32a8>
   149a8:	movw	r1, #50076	; 0xc39c
   149ac:	movt	r1, #1
   149b0:	mov	r2, #9
   149b4:	movw	r3, #49884	; 0xc2dc
   149b8:	movt	r3, #1
   149bc:	str	r1, [sp]
   149c0:	mov	r1, #1
   149c4:	bl	110e4 <__sprintf_chk@plt>
   149c8:	movw	r3, #11660	; 0x2d8c
   149cc:	movt	r3, #1
   149d0:	mov	r2, #0
   149d4:	b	144ac <__assert_fail@plt+0x32a8>
   149d8:	movw	r3, #12312	; 0x3018
   149dc:	movt	r3, #1
   149e0:	mov	r2, r9
   149e4:	b	144ac <__assert_fail@plt+0x32a8>
   149e8:	mov	r5, r1
   149ec:	ldr	r9, [r7, #120]	; 0x78
   149f0:	b	14834 <__assert_fail@plt+0x3630>
   149f4:	mov	r8, #4
   149f8:	ldr	r9, [r7, #68]	; 0x44
   149fc:	b	14580 <__assert_fail@plt+0x337c>
   14a00:	movw	r3, #12616	; 0x3148
   14a04:	movt	r3, #1
   14a08:	mov	r2, #3
   14a0c:	b	144ac <__assert_fail@plt+0x32a8>
   14a10:	movw	r1, #50084	; 0xc3a4
   14a14:	movt	r1, #1
   14a18:	str	r8, [sp]
   14a1c:	mov	r2, #9
   14a20:	movw	r3, #49896	; 0xc2e8
   14a24:	movt	r3, #1
   14a28:	str	r1, [sp, #4]
   14a2c:	mov	r1, #1
   14a30:	bl	110e4 <__sprintf_chk@plt>
   14a34:	movw	r3, #12008	; 0x2ee8
   14a38:	movt	r3, #1
   14a3c:	mov	r2, #3
   14a40:	b	144ac <__assert_fail@plt+0x32a8>
   14a44:	movw	r1, #50072	; 0xc398
   14a48:	movt	r1, #1
   14a4c:	mov	r2, #9
   14a50:	movw	r3, #49884	; 0xc2dc
   14a54:	movt	r3, #1
   14a58:	str	r1, [sp]
   14a5c:	mov	r1, #1
   14a60:	bl	110e4 <__sprintf_chk@plt>
   14a64:	movw	r3, #12008	; 0x2ee8
   14a68:	movt	r3, #1
   14a6c:	mov	r2, #0
   14a70:	b	144ac <__assert_fail@plt+0x32a8>
   14a74:	mov	r5, r0
   14a78:	mov	r8, #4
   14a7c:	ldr	r9, [r7, #68]	; 0x44
   14a80:	b	14580 <__assert_fail@plt+0x337c>
   14a84:	mov	r5, r1
   14a88:	ldr	r9, [r7, #120]	; 0x78
   14a8c:	b	14834 <__assert_fail@plt+0x3630>
   14a90:	mov	r0, #1
   14a94:	bx	lr
   14a98:	movw	r1, #49776	; 0xc270
   14a9c:	movt	r1, #1
   14aa0:	ldr	r3, [pc, #40]	; 14ad0 <__assert_fail@plt+0x38cc>
   14aa4:	movw	r0, #50036	; 0xc374
   14aa8:	movt	r0, #1
   14aac:	movw	r2, #997	; 0x3e5
   14ab0:	bl	11204 <__assert_fail@plt>
   14ab4:	movw	r1, #49776	; 0xc270
   14ab8:	movt	r1, #1
   14abc:	ldr	r3, [pc, #16]	; 14ad4 <__assert_fail@plt+0x38d0>
   14ac0:	movw	r0, #49788	; 0xc27c
   14ac4:	movt	r0, #1
   14ac8:	mov	r2, #648	; 0x288
   14acc:	bl	11204 <__assert_fail@plt>
   14ad0:	andeq	ip, r1, r4, asr #32
   14ad4:	andeq	fp, r1, r0, lsr #30
   14ad8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14adc:	strd	r6, [sp, #8]
   14ae0:	strd	r8, [sp, #16]
   14ae4:	subs	r8, r0, #0
   14ae8:	str	sl, [sp, #24]
   14aec:	str	lr, [sp, #28]
   14af0:	beq	14ba4 <__assert_fail@plt+0x39a0>
   14af4:	movw	r7, #57744	; 0xe190
   14af8:	movt	r7, #2
   14afc:	ldr	r3, [r7, #28]
   14b00:	cmp	r3, r8
   14b04:	bcc	14ba4 <__assert_fail@plt+0x39a0>
   14b08:	ldr	r3, [r7, #20]
   14b0c:	mov	r0, #0
   14b10:	mov	r5, r2
   14b14:	str	r0, [r2]
   14b18:	cmp	r3, r0
   14b1c:	beq	14b9c <__assert_fail@plt+0x3998>
   14b20:	mov	r9, r1
   14b24:	mov	r6, #1
   14b28:	b	14b58 <__assert_fail@plt+0x3954>
   14b2c:	bl	110d8 <__errno_location@plt>
   14b30:	ldr	r0, [r0]
   14b34:	bl	13cac <__assert_fail@plt+0x2aa8>
   14b38:	mov	r4, r0
   14b3c:	bl	13b74 <__assert_fail@plt+0x2970>
   14b40:	ldr	r3, [r7, #20]
   14b44:	and	r0, r0, r4
   14b48:	and	r6, r6, r0
   14b4c:	cmp	r3, #0
   14b50:	beq	14b80 <__assert_fail@plt+0x397c>
   14b54:	ldr	r0, [r5]
   14b58:	sub	r4, r8, r0
   14b5c:	mov	r1, #1
   14b60:	add	r0, r9, r0
   14b64:	mov	r2, r4
   14b68:	bl	111d4 <fread_unlocked@plt>
   14b6c:	ldr	r3, [r5]
   14b70:	cmp	r4, r0
   14b74:	add	r3, r3, r0
   14b78:	str	r3, [r5]
   14b7c:	bne	14b2c <__assert_fail@plt+0x3928>
   14b80:	mov	r0, r6
   14b84:	ldrd	r4, [sp]
   14b88:	ldrd	r6, [sp, #8]
   14b8c:	ldrd	r8, [sp, #16]
   14b90:	ldr	sl, [sp, #24]
   14b94:	add	sp, sp, #28
   14b98:	pop	{pc}		; (ldr pc, [sp], #4)
   14b9c:	mov	r6, #1
   14ba0:	b	14b80 <__assert_fail@plt+0x397c>
   14ba4:	movw	r1, #49776	; 0xc270
   14ba8:	movt	r1, #1
   14bac:	ldr	r3, [pc, #12]	; 14bc0 <__assert_fail@plt+0x39bc>
   14bb0:	movw	r0, #50088	; 0xc3a8
   14bb4:	movt	r0, #1
   14bb8:	movw	r2, #1293	; 0x50d
   14bbc:	bl	11204 <__assert_fail@plt>
   14bc0:	andeq	ip, r1, ip, asr r0
   14bc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bc8:	movw	r5, #57744	; 0xe190
   14bcc:	movt	r5, #2
   14bd0:	ldr	r3, [r5, #4]
   14bd4:	mov	ip, #0
   14bd8:	strd	r6, [sp, #8]
   14bdc:	mov	r7, r1
   14be0:	mov	r1, #32
   14be4:	ldr	r6, [r5]
   14be8:	strd	r8, [sp, #16]
   14bec:	strd	sl, [sp, #24]
   14bf0:	mov	sl, r0
   14bf4:	mov	fp, r2
   14bf8:	str	lr, [sp, #32]
   14bfc:	sub	sp, sp, #36	; 0x24
   14c00:	cmp	r3, #10
   14c04:	add	r4, sp, #27
   14c08:	sub	r6, r4, r6
   14c0c:	strb	r1, [sp, #27]
   14c10:	strb	ip, [sp, #28]
   14c14:	beq	14d50 <__assert_fail@plt+0x3b4c>
   14c18:	cmp	r3, #16
   14c1c:	beq	14d14 <__assert_fail@plt+0x3b10>
   14c20:	cmp	r3, #8
   14c24:	beq	14ce0 <__assert_fail@plt+0x3adc>
   14c28:	cmp	r6, r4
   14c2c:	movcs	r6, r4
   14c30:	bcs	14c44 <__assert_fail@plt+0x3a40>
   14c34:	sub	r2, r4, r6
   14c38:	mov	r1, #48	; 0x30
   14c3c:	mov	r0, r6
   14c40:	bl	11108 <memset@plt>
   14c44:	movw	r4, #57732	; 0xe184
   14c48:	movt	r4, #2
   14c4c:	mov	r0, r6
   14c50:	ldr	r1, [r4]
   14c54:	bl	10f1c <fputs_unlocked@plt>
   14c58:	ldr	r0, [r4]
   14c5c:	ldr	r2, [r5, #128]	; 0x80
   14c60:	ldr	r1, [r5, #132]	; 0x84
   14c64:	ldr	r3, [r0, #20]
   14c68:	adds	sl, sl, r2
   14c6c:	ldr	r2, [r0, #24]
   14c70:	adc	r7, r7, r1
   14c74:	cmp	r3, r2
   14c78:	addcc	r1, r3, #1
   14c7c:	movcc	r2, #40	; 0x28
   14c80:	strcc	r1, [r0, #20]
   14c84:	strbcc	r2, [r3]
   14c88:	bcs	14dac <__assert_fail@plt+0x3ba8>
   14c8c:	mov	r0, sl
   14c90:	mov	r1, r7
   14c94:	mov	r2, #41	; 0x29
   14c98:	bl	12a78 <__assert_fail@plt+0x1874>
   14c9c:	cmp	fp, #0
   14ca0:	beq	14cc4 <__assert_fail@plt+0x3ac0>
   14ca4:	ldr	r0, [r4]
   14ca8:	ldr	r3, [r0, #20]
   14cac:	ldr	r2, [r0, #24]
   14cb0:	cmp	r3, r2
   14cb4:	addcc	r2, r3, #1
   14cb8:	strcc	r2, [r0, #20]
   14cbc:	strbcc	fp, [r3]
   14cc0:	bcs	14da0 <__assert_fail@plt+0x3b9c>
   14cc4:	add	sp, sp, #36	; 0x24
   14cc8:	ldrd	r4, [sp]
   14ccc:	ldrd	r6, [sp, #8]
   14cd0:	ldrd	r8, [sp, #16]
   14cd4:	ldrd	sl, [sp, #24]
   14cd8:	add	sp, sp, #32
   14cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ce0:	mov	r2, r0
   14ce4:	mov	r3, r7
   14ce8:	lsr	r0, r2, #3
   14cec:	and	r1, r2, #7
   14cf0:	lsr	ip, r3, #3
   14cf4:	add	r1, r1, #48	; 0x30
   14cf8:	orr	r0, r0, r3, lsl #29
   14cfc:	mov	r3, ip
   14d00:	strb	r1, [r4, #-1]!
   14d04:	mov	r2, r0
   14d08:	orrs	r1, r2, r3
   14d0c:	bne	14ce8 <__assert_fail@plt+0x3ae4>
   14d10:	b	14c28 <__assert_fail@plt+0x3a24>
   14d14:	movw	lr, #49592	; 0xc1b8
   14d18:	movt	lr, #1
   14d1c:	mov	r2, r0
   14d20:	mov	r3, r7
   14d24:	and	r0, r2, #15
   14d28:	lsr	r1, r2, #4
   14d2c:	ldrb	r0, [lr, r0]
   14d30:	lsr	ip, r3, #4
   14d34:	orr	r1, r1, r3, lsl #28
   14d38:	mov	r3, ip
   14d3c:	mov	r2, r1
   14d40:	orrs	r1, r2, r3
   14d44:	strb	r0, [r4, #-1]!
   14d48:	bne	14d24 <__assert_fail@plt+0x3b20>
   14d4c:	b	14c28 <__assert_fail@plt+0x3a24>
   14d50:	mov	r8, r0
   14d54:	mov	r9, r7
   14d58:	mov	r0, r8
   14d5c:	mov	r1, r9
   14d60:	mov	r2, #10
   14d64:	mov	r3, #0
   14d68:	bl	1bc7c <__assert_fail@plt+0xaa78>
   14d6c:	add	r2, r2, #48	; 0x30
   14d70:	mov	r0, r8
   14d74:	mov	r1, r9
   14d78:	mov	r3, #0
   14d7c:	strb	r2, [r4, #-1]!
   14d80:	mov	r2, #10
   14d84:	bl	1bc7c <__assert_fail@plt+0xaa78>
   14d88:	cmp	r9, #0
   14d8c:	mov	r9, r1
   14d90:	cmpeq	r8, #9
   14d94:	mov	r8, r0
   14d98:	bhi	14d58 <__assert_fail@plt+0x3b54>
   14d9c:	b	14c28 <__assert_fail@plt+0x3a24>
   14da0:	mov	r1, fp
   14da4:	bl	11168 <__overflow@plt>
   14da8:	b	14cc4 <__assert_fail@plt+0x3ac0>
   14dac:	mov	r1, #40	; 0x28
   14db0:	bl	11168 <__overflow@plt>
   14db4:	b	14c8c <__assert_fail@plt+0x3a88>
   14db8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14dbc:	mov	r5, r1
   14dc0:	mov	r4, r0
   14dc4:	strd	r6, [sp, #8]
   14dc8:	strd	r8, [sp, #16]
   14dcc:	movw	r8, #57732	; 0xe184
   14dd0:	movt	r8, #2
   14dd4:	ldr	r3, [r8]
   14dd8:	mov	r9, r2
   14ddc:	str	lr, [sp, #24]
   14de0:	sub	sp, sp, #36	; 0x24
   14de4:	ldr	r2, [r3, #20]
   14de8:	ldr	r1, [r3, #24]
   14dec:	cmp	r2, r1
   14df0:	addcc	r0, r2, #1
   14df4:	movcc	r1, #40	; 0x28
   14df8:	strcc	r0, [r3, #20]
   14dfc:	strbcc	r1, [r2]
   14e00:	bcs	14f60 <__assert_fail@plt+0x3d5c>
   14e04:	movw	r3, #57744	; 0xe190
   14e08:	movt	r3, #2
   14e0c:	ldr	r7, [r3]
   14e10:	mov	r1, #0
   14e14:	mov	r0, #41	; 0x29
   14e18:	add	r6, sp, #27
   14e1c:	ldr	r2, [r3, #4]
   14e20:	strb	r0, [sp, #27]
   14e24:	strb	r1, [sp, #28]
   14e28:	sub	r7, r6, r7
   14e2c:	cmp	r2, #10
   14e30:	beq	14ed8 <__assert_fail@plt+0x3cd4>
   14e34:	cmp	r2, #16
   14e38:	beq	14f20 <__assert_fail@plt+0x3d1c>
   14e3c:	cmp	r2, #8
   14e40:	beq	14eac <__assert_fail@plt+0x3ca8>
   14e44:	cmp	r7, r6
   14e48:	movcs	r7, r6
   14e4c:	bcs	14e60 <__assert_fail@plt+0x3c5c>
   14e50:	sub	r2, r6, r7
   14e54:	mov	r1, #48	; 0x30
   14e58:	mov	r0, r7
   14e5c:	bl	11108 <memset@plt>
   14e60:	mov	r0, r7
   14e64:	ldr	r1, [r8]
   14e68:	bl	10f1c <fputs_unlocked@plt>
   14e6c:	cmp	r9, #0
   14e70:	beq	14e94 <__assert_fail@plt+0x3c90>
   14e74:	ldr	r0, [r8]
   14e78:	ldr	r3, [r0, #20]
   14e7c:	ldr	r2, [r0, #24]
   14e80:	cmp	r3, r2
   14e84:	addcc	r2, r3, #1
   14e88:	strcc	r2, [r0, #20]
   14e8c:	strbcc	r9, [r3]
   14e90:	bcs	14f54 <__assert_fail@plt+0x3d50>
   14e94:	add	sp, sp, #36	; 0x24
   14e98:	ldrd	r4, [sp]
   14e9c:	ldrd	r6, [sp, #8]
   14ea0:	ldrd	r8, [sp, #16]
   14ea4:	add	sp, sp, #24
   14ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   14eac:	lsr	r2, r4, #3
   14eb0:	and	r3, r4, #7
   14eb4:	lsr	r1, r5, #3
   14eb8:	add	r3, r3, #48	; 0x30
   14ebc:	orr	r2, r2, r5, lsl #29
   14ec0:	mov	r5, r1
   14ec4:	strb	r3, [r6, #-1]!
   14ec8:	mov	r4, r2
   14ecc:	orrs	r3, r4, r5
   14ed0:	bne	14eac <__assert_fail@plt+0x3ca8>
   14ed4:	b	14e44 <__assert_fail@plt+0x3c40>
   14ed8:	mov	r0, r4
   14edc:	mov	r1, r5
   14ee0:	mov	r2, #10
   14ee4:	mov	r3, #0
   14ee8:	bl	1bc7c <__assert_fail@plt+0xaa78>
   14eec:	add	r2, r2, #48	; 0x30
   14ef0:	mov	r0, r4
   14ef4:	mov	r1, r5
   14ef8:	mov	r3, #0
   14efc:	strb	r2, [r6, #-1]!
   14f00:	mov	r2, #10
   14f04:	bl	1bc7c <__assert_fail@plt+0xaa78>
   14f08:	cmp	r5, #0
   14f0c:	mov	r5, r1
   14f10:	cmpeq	r4, #9
   14f14:	mov	r4, r0
   14f18:	bhi	14ed8 <__assert_fail@plt+0x3cd4>
   14f1c:	b	14e44 <__assert_fail@plt+0x3c40>
   14f20:	movw	r0, #49592	; 0xc1b8
   14f24:	movt	r0, #1
   14f28:	and	r2, r4, #15
   14f2c:	lsr	r3, r4, #4
   14f30:	ldrb	r2, [r0, r2]
   14f34:	lsr	r1, r5, #4
   14f38:	orr	r3, r3, r5, lsl #28
   14f3c:	mov	r5, r1
   14f40:	mov	r4, r3
   14f44:	orrs	r3, r4, r5
   14f48:	strb	r2, [r6, #-1]!
   14f4c:	bne	14f28 <__assert_fail@plt+0x3d24>
   14f50:	b	14e44 <__assert_fail@plt+0x3c40>
   14f54:	mov	r1, r9
   14f58:	bl	11168 <__overflow@plt>
   14f5c:	b	14e94 <__assert_fail@plt+0x3c90>
   14f60:	mov	r0, r3
   14f64:	mov	r1, #40	; 0x28
   14f68:	bl	11168 <__overflow@plt>
   14f6c:	b	14e04 <__assert_fail@plt+0x3c00>
   14f70:	subs	r6, r0, #0
   14f74:	str	r7, [sp, #-8]!
   14f78:	str	lr, [sp, #4]
   14f7c:	sub	sp, sp, #64	; 0x40
   14f80:	beq	14fc8 <__assert_fail@plt+0x3dc4>
   14f84:	movw	r3, #57720	; 0xe178
   14f88:	movt	r3, #2
   14f8c:	ldr	r4, [r3]
   14f90:	mov	r2, #5
   14f94:	movw	r1, #50124	; 0xc3cc
   14f98:	movt	r1, #1
   14f9c:	mov	r0, #0
   14fa0:	bl	10fc4 <dcgettext@plt>
   14fa4:	movw	r3, #57920	; 0xe240
   14fa8:	movt	r3, #2
   14fac:	mov	r2, r0
   14fb0:	mov	r1, #1
   14fb4:	ldr	r3, [r3]
   14fb8:	mov	r0, r4
   14fbc:	bl	11144 <__fprintf_chk@plt>
   14fc0:	mov	r0, r6
   14fc4:	bl	110b4 <exit@plt>
   14fc8:	mov	r2, #5
   14fcc:	movw	r1, #50164	; 0xc3f4
   14fd0:	movt	r1, #1
   14fd4:	movw	r7, #57732	; 0xe184
   14fd8:	movt	r7, #2
   14fdc:	bl	10fc4 <dcgettext@plt>
   14fe0:	movw	r3, #57920	; 0xe240
   14fe4:	movt	r3, #2
   14fe8:	ldr	ip, [r3]
   14fec:	mov	r1, r0
   14ff0:	mov	r0, #1
   14ff4:	mov	r3, ip
   14ff8:	mov	r2, ip
   14ffc:	str	ip, [sp]
   15000:	bl	11120 <__printf_chk@plt>
   15004:	mov	r2, #5
   15008:	movw	r1, #50328	; 0xc498
   1500c:	movt	r1, #1
   15010:	mov	r0, r6
   15014:	bl	10fc4 <dcgettext@plt>
   15018:	ldr	r1, [r7]
   1501c:	bl	10f1c <fputs_unlocked@plt>
   15020:	mov	r2, #5
   15024:	movw	r1, #50512	; 0xc550
   15028:	movt	r1, #1
   1502c:	mov	r0, r6
   15030:	bl	10fc4 <dcgettext@plt>
   15034:	ldr	r1, [r7]
   15038:	bl	10f1c <fputs_unlocked@plt>
   1503c:	mov	r2, #5
   15040:	movw	r1, #50568	; 0xc588
   15044:	movt	r1, #1
   15048:	mov	r0, r6
   1504c:	bl	10fc4 <dcgettext@plt>
   15050:	ldr	r1, [r7]
   15054:	bl	10f1c <fputs_unlocked@plt>
   15058:	mov	r2, #5
   1505c:	movw	r1, #50960	; 0xc710
   15060:	movt	r1, #1
   15064:	mov	r0, r6
   15068:	bl	10fc4 <dcgettext@plt>
   1506c:	ldr	r1, [r7]
   15070:	bl	10f1c <fputs_unlocked@plt>
   15074:	mov	r2, #5
   15078:	movw	r1, #51036	; 0xc75c
   1507c:	movt	r1, #1
   15080:	mov	r0, r6
   15084:	bl	10fc4 <dcgettext@plt>
   15088:	ldr	r1, [r7]
   1508c:	bl	10f1c <fputs_unlocked@plt>
   15090:	mov	r2, #5
   15094:	movw	r1, #51324	; 0xc87c
   15098:	movt	r1, #1
   1509c:	mov	r0, r6
   150a0:	bl	10fc4 <dcgettext@plt>
   150a4:	ldr	r1, [r7]
   150a8:	bl	10f1c <fputs_unlocked@plt>
   150ac:	mov	r2, #5
   150b0:	movw	r1, #51876	; 0xcaa4
   150b4:	movt	r1, #1
   150b8:	mov	r0, r6
   150bc:	bl	10fc4 <dcgettext@plt>
   150c0:	ldr	r1, [r7]
   150c4:	bl	10f1c <fputs_unlocked@plt>
   150c8:	mov	r2, #5
   150cc:	movw	r1, #51924	; 0xcad4
   150d0:	movt	r1, #1
   150d4:	mov	r0, r6
   150d8:	bl	10fc4 <dcgettext@plt>
   150dc:	ldr	r1, [r7]
   150e0:	bl	10f1c <fputs_unlocked@plt>
   150e4:	mov	r2, #5
   150e8:	movw	r1, #51980	; 0xcb0c
   150ec:	movt	r1, #1
   150f0:	mov	r0, r6
   150f4:	bl	10fc4 <dcgettext@plt>
   150f8:	ldr	r1, [r7]
   150fc:	bl	10f1c <fputs_unlocked@plt>
   15100:	mov	r2, #5
   15104:	movw	r1, #52296	; 0xcc48
   15108:	movt	r1, #1
   1510c:	mov	r0, r6
   15110:	bl	10fc4 <dcgettext@plt>
   15114:	ldr	r1, [r7]
   15118:	bl	10f1c <fputs_unlocked@plt>
   1511c:	mov	r2, #5
   15120:	movw	r1, #52572	; 0xcd5c
   15124:	movt	r1, #1
   15128:	mov	r0, r6
   1512c:	bl	10fc4 <dcgettext@plt>
   15130:	ldr	r1, [r7]
   15134:	bl	10f1c <fputs_unlocked@plt>
   15138:	mov	r2, #5
   1513c:	movw	r1, #52740	; 0xce04
   15140:	movt	r1, #1
   15144:	mov	r0, r6
   15148:	bl	10fc4 <dcgettext@plt>
   1514c:	ldr	r1, [r7]
   15150:	bl	10f1c <fputs_unlocked@plt>
   15154:	mov	r2, #5
   15158:	movw	r1, #52992	; 0xcf00
   1515c:	movt	r1, #1
   15160:	mov	r0, r6
   15164:	bl	10fc4 <dcgettext@plt>
   15168:	ldr	r1, [r7]
   1516c:	bl	10f1c <fputs_unlocked@plt>
   15170:	mov	r2, #5
   15174:	movw	r1, #53236	; 0xcff4
   15178:	movt	r1, #1
   1517c:	mov	r0, r6
   15180:	bl	10fc4 <dcgettext@plt>
   15184:	ldr	r1, [r7]
   15188:	bl	10f1c <fputs_unlocked@plt>
   1518c:	mov	r2, #5
   15190:	movw	r1, #53332	; 0xd054
   15194:	movt	r1, #1
   15198:	mov	r0, r6
   1519c:	bl	10fc4 <dcgettext@plt>
   151a0:	ldr	r1, [r7]
   151a4:	bl	10f1c <fputs_unlocked@plt>
   151a8:	ldr	lr, [pc, #560]	; 153e0 <__assert_fail@plt+0x41dc>
   151ac:	ldr	ip, [lr]
   151b0:	ldr	r4, [lr, #4]
   151b4:	ldrd	r8, [lr, #8]
   151b8:	subs	r1, ip, #0
   151bc:	str	ip, [sp, #8]
   151c0:	ldrd	r2, [lr, #16]
   151c4:	str	r4, [sp, #12]
   151c8:	ldrd	r4, [lr, #24]
   151cc:	strd	r8, [sp, #16]
   151d0:	ldrd	r8, [lr, #32]
   151d4:	strd	r2, [sp, #24]
   151d8:	ldrd	r2, [lr, #40]	; 0x28
   151dc:	strd	r4, [sp, #32]
   151e0:	ldrd	r4, [lr, #48]	; 0x30
   151e4:	strd	r8, [sp, #40]	; 0x28
   151e8:	strd	r2, [sp, #48]	; 0x30
   151ec:	strd	r4, [sp, #56]	; 0x38
   151f0:	movwne	r5, #50120	; 0xc3c8
   151f4:	add	r4, sp, #8
   151f8:	movtne	r5, #1
   151fc:	bne	152f4 <__assert_fail@plt+0x40f0>
   15200:	ldr	r4, [r4, #4]
   15204:	movw	r1, #53564	; 0xd13c
   15208:	movt	r1, #1
   1520c:	mov	r2, #5
   15210:	cmp	r4, #0
   15214:	beq	15308 <__assert_fail@plt+0x4104>
   15218:	mov	r0, #0
   1521c:	bl	10fc4 <dcgettext@plt>
   15220:	mov	r1, r0
   15224:	movw	r3, #53588	; 0xd154
   15228:	movt	r3, #1
   1522c:	movw	r2, #53628	; 0xd17c
   15230:	movt	r2, #1
   15234:	mov	r0, #1
   15238:	bl	11120 <__printf_chk@plt>
   1523c:	mov	r1, #0
   15240:	mov	r0, #5
   15244:	bl	11174 <setlocale@plt>
   15248:	cmp	r0, #0
   1524c:	movweq	r5, #50120	; 0xc3c8
   15250:	movteq	r5, #1
   15254:	beq	15278 <__assert_fail@plt+0x4074>
   15258:	movw	r1, #53644	; 0xd18c
   1525c:	movt	r1, #1
   15260:	mov	r2, #3
   15264:	movw	r5, #50120	; 0xc3c8
   15268:	movt	r5, #1
   1526c:	bl	111e0 <strncmp@plt>
   15270:	cmp	r0, #0
   15274:	bne	153c0 <__assert_fail@plt+0x41bc>
   15278:	mov	r2, #5
   1527c:	movw	r1, #53720	; 0xd1d8
   15280:	movt	r1, #1
   15284:	mov	r0, #0
   15288:	bl	10fc4 <dcgettext@plt>
   1528c:	mov	r1, r0
   15290:	movw	r3, #50120	; 0xc3c8
   15294:	movt	r3, #1
   15298:	movw	r2, #53588	; 0xd154
   1529c:	movt	r2, #1
   152a0:	mov	r0, #1
   152a4:	bl	11120 <__printf_chk@plt>
   152a8:	mov	r2, #5
   152ac:	movw	r1, #53748	; 0xd1f4
   152b0:	movt	r1, #1
   152b4:	mov	r0, #0
   152b8:	bl	10fc4 <dcgettext@plt>
   152bc:	movw	r2, #54252	; 0xd3ec
   152c0:	movt	r2, #1
   152c4:	cmp	r4, r5
   152c8:	movw	r3, #52988	; 0xcefc
   152cc:	movt	r3, #1
   152d0:	mov	r1, r0
   152d4:	moveq	r3, r2
   152d8:	mov	r2, r4
   152dc:	mov	r0, #1
   152e0:	bl	11120 <__printf_chk@plt>
   152e4:	b	14fc0 <__assert_fail@plt+0x3dbc>
   152e8:	ldr	r1, [r4, #8]!
   152ec:	cmp	r1, #0
   152f0:	beq	15200 <__assert_fail@plt+0x3ffc>
   152f4:	mov	r0, r5
   152f8:	bl	10f34 <strcmp@plt>
   152fc:	cmp	r0, #0
   15300:	bne	152e8 <__assert_fail@plt+0x40e4>
   15304:	b	15200 <__assert_fail@plt+0x3ffc>
   15308:	mov	r0, r4
   1530c:	bl	10fc4 <dcgettext@plt>
   15310:	mov	r1, r0
   15314:	movw	r3, #53588	; 0xd154
   15318:	movt	r3, #1
   1531c:	movw	r2, #53628	; 0xd17c
   15320:	movt	r2, #1
   15324:	mov	r0, #1
   15328:	bl	11120 <__printf_chk@plt>
   1532c:	mov	r1, r4
   15330:	mov	r0, #5
   15334:	bl	11174 <setlocale@plt>
   15338:	cmp	r0, #0
   1533c:	beq	15358 <__assert_fail@plt+0x4154>
   15340:	movw	r1, #53644	; 0xd18c
   15344:	movt	r1, #1
   15348:	mov	r2, #3
   1534c:	bl	111e0 <strncmp@plt>
   15350:	cmp	r0, #0
   15354:	bne	153b4 <__assert_fail@plt+0x41b0>
   15358:	mov	r2, #5
   1535c:	movw	r1, #53720	; 0xd1d8
   15360:	movt	r1, #1
   15364:	mov	r0, #0
   15368:	bl	10fc4 <dcgettext@plt>
   1536c:	mov	r1, r0
   15370:	movw	r3, #50120	; 0xc3c8
   15374:	movt	r3, #1
   15378:	movw	r2, #53588	; 0xd154
   1537c:	movt	r2, #1
   15380:	mov	r0, #1
   15384:	bl	11120 <__printf_chk@plt>
   15388:	movw	r1, #53748	; 0xd1f4
   1538c:	movt	r1, #1
   15390:	mov	r2, #5
   15394:	mov	r0, #0
   15398:	bl	10fc4 <dcgettext@plt>
   1539c:	movw	r4, #50120	; 0xc3c8
   153a0:	movt	r4, #1
   153a4:	movw	r3, #54252	; 0xd3ec
   153a8:	movt	r3, #1
   153ac:	mov	r1, r0
   153b0:	b	152d8 <__assert_fail@plt+0x40d4>
   153b4:	movw	r5, #50120	; 0xc3c8
   153b8:	movt	r5, #1
   153bc:	mov	r4, r5
   153c0:	mov	r2, #5
   153c4:	movw	r1, #53648	; 0xd190
   153c8:	movt	r1, #1
   153cc:	mov	r0, #0
   153d0:	bl	10fc4 <dcgettext@plt>
   153d4:	ldr	r1, [r7]
   153d8:	bl	10f1c <fputs_unlocked@plt>
   153dc:	b	15278 <__assert_fail@plt+0x4074>
   153e0:	andeq	ip, r1, r8, rrx
   153e4:	mov	r0, #1
   153e8:	b	14f70 <__assert_fail@plt+0x3d6c>
   153ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153f0:	mov	r4, r1
   153f4:	strd	r6, [sp, #8]
   153f8:	mov	r6, r2
   153fc:	strd	r8, [sp, #16]
   15400:	mov	r8, r3
   15404:	strd	sl, [sp, #24]
   15408:	mov	sl, r0
   1540c:	str	lr, [sp, #32]
   15410:	sub	sp, sp, #12
   15414:	str	r2, [sp]
   15418:	bl	110c0 <strlen@plt>
   1541c:	ldr	fp, [r4]
   15420:	cmp	fp, #0
   15424:	beq	15534 <__assert_fail@plt+0x4330>
   15428:	cmp	r6, #0
   1542c:	mov	r7, r0
   15430:	beq	154e0 <__assert_fail@plt+0x42dc>
   15434:	mov	r5, #0
   15438:	mvn	r9, #0
   1543c:	str	r5, [sp, #4]
   15440:	mov	r2, r7
   15444:	mov	r1, sl
   15448:	mov	r0, fp
   1544c:	bl	111e0 <strncmp@plt>
   15450:	cmp	r0, #0
   15454:	mov	r0, fp
   15458:	bne	15498 <__assert_fail@plt+0x4294>
   1545c:	bl	110c0 <strlen@plt>
   15460:	ldr	r3, [sp]
   15464:	cmp	r0, r7
   15468:	mov	r2, r8
   1546c:	mov	r1, r6
   15470:	mla	r0, r8, r9, r3
   15474:	beq	154d8 <__assert_fail@plt+0x42d4>
   15478:	cmn	r9, #1
   1547c:	moveq	r9, r5
   15480:	beq	15498 <__assert_fail@plt+0x4294>
   15484:	bl	10fac <memcmp@plt>
   15488:	ldr	r3, [sp, #4]
   1548c:	cmp	r0, #0
   15490:	movne	r3, #1
   15494:	str	r3, [sp, #4]
   15498:	ldr	fp, [r4, #4]!
   1549c:	add	r5, r5, #1
   154a0:	add	r6, r6, r8
   154a4:	cmp	fp, #0
   154a8:	bne	15440 <__assert_fail@plt+0x423c>
   154ac:	ldr	r3, [sp, #4]
   154b0:	cmp	r3, #0
   154b4:	mvnne	r9, #1
   154b8:	mov	r0, r9
   154bc:	add	sp, sp, #12
   154c0:	ldrd	r4, [sp]
   154c4:	ldrd	r6, [sp, #8]
   154c8:	ldrd	r8, [sp, #16]
   154cc:	ldrd	sl, [sp, #24]
   154d0:	add	sp, sp, #32
   154d4:	pop	{pc}		; (ldr pc, [sp], #4)
   154d8:	mov	r9, r5
   154dc:	b	154b8 <__assert_fail@plt+0x42b4>
   154e0:	mov	r5, r6
   154e4:	mvn	r9, #0
   154e8:	mov	r2, r7
   154ec:	mov	r1, sl
   154f0:	mov	r0, fp
   154f4:	bl	111e0 <strncmp@plt>
   154f8:	cmp	r0, #0
   154fc:	mov	r0, fp
   15500:	bne	1551c <__assert_fail@plt+0x4318>
   15504:	bl	110c0 <strlen@plt>
   15508:	cmp	r0, r7
   1550c:	beq	154d8 <__assert_fail@plt+0x42d4>
   15510:	cmn	r9, #1
   15514:	moveq	r9, r5
   15518:	movne	r6, #1
   1551c:	ldr	fp, [r4, #4]!
   15520:	add	r5, r5, #1
   15524:	cmp	fp, #0
   15528:	bne	154e8 <__assert_fail@plt+0x42e4>
   1552c:	str	r6, [sp, #4]
   15530:	b	154ac <__assert_fail@plt+0x42a8>
   15534:	mvn	r9, #0
   15538:	b	154b8 <__assert_fail@plt+0x42b4>
   1553c:	strd	r4, [sp, #-16]!
   15540:	str	r6, [sp, #8]
   15544:	mov	r6, r0
   15548:	ldr	r0, [r1]
   1554c:	str	lr, [sp, #12]
   15550:	cmp	r0, #0
   15554:	beq	15598 <__assert_fail@plt+0x4394>
   15558:	mov	r4, r1
   1555c:	mov	r5, #0
   15560:	b	15574 <__assert_fail@plt+0x4370>
   15564:	ldr	r0, [r4, #4]!
   15568:	add	r5, r5, #1
   1556c:	cmp	r0, #0
   15570:	beq	15598 <__assert_fail@plt+0x4394>
   15574:	mov	r1, r6
   15578:	bl	10f34 <strcmp@plt>
   1557c:	cmp	r0, #0
   15580:	bne	15564 <__assert_fail@plt+0x4360>
   15584:	mov	r0, r5
   15588:	ldrd	r4, [sp]
   1558c:	ldr	r6, [sp, #8]
   15590:	add	sp, sp, #12
   15594:	pop	{pc}		; (ldr pc, [sp], #4)
   15598:	ldrd	r4, [sp]
   1559c:	mvn	r0, #0
   155a0:	ldr	r6, [sp, #8]
   155a4:	add	sp, sp, #12
   155a8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ac:	cmn	r2, #1
   155b0:	strd	r4, [sp, #-16]!
   155b4:	mov	r5, r1
   155b8:	movweq	r1, #54500	; 0xd4e4
   155bc:	movwne	r1, #54528	; 0xd500
   155c0:	str	r6, [sp, #8]
   155c4:	movteq	r1, #1
   155c8:	movtne	r1, #1
   155cc:	str	lr, [sp, #12]
   155d0:	mov	r6, r0
   155d4:	sub	sp, sp, #8
   155d8:	mov	r2, #5
   155dc:	mov	r0, #0
   155e0:	bl	10fc4 <dcgettext@plt>
   155e4:	mov	r4, r0
   155e8:	mov	r2, r5
   155ec:	mov	r1, #8
   155f0:	mov	r0, #0
   155f4:	bl	185a0 <__assert_fail@plt+0x739c>
   155f8:	mov	r5, r0
   155fc:	mov	r1, r6
   15600:	mov	r0, #1
   15604:	bl	19998 <__assert_fail@plt+0x8794>
   15608:	mov	r1, #0
   1560c:	mov	r3, r5
   15610:	str	r0, [sp]
   15614:	mov	r2, r4
   15618:	mov	r0, r1
   1561c:	bl	1103c <error@plt>
   15620:	add	sp, sp, #8
   15624:	ldrd	r4, [sp]
   15628:	ldr	r6, [sp, #8]
   1562c:	add	sp, sp, #12
   15630:	pop	{pc}		; (ldr pc, [sp], #4)
   15634:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15638:	mov	r4, r1
   1563c:	movw	r1, #54560	; 0xd520
   15640:	movt	r1, #1
   15644:	strd	r6, [sp, #8]
   15648:	mov	r6, r0
   1564c:	mov	r7, r2
   15650:	mov	r0, #0
   15654:	strd	r8, [sp, #16]
   15658:	mov	r2, #5
   1565c:	strd	sl, [sp, #24]
   15660:	movw	sl, #57720	; 0xe178
   15664:	movt	sl, #2
   15668:	str	lr, [sp, #32]
   1566c:	sub	sp, sp, #12
   15670:	bl	10fc4 <dcgettext@plt>
   15674:	ldr	r1, [sl]
   15678:	bl	10f1c <fputs_unlocked@plt>
   1567c:	ldr	fp, [r6]
   15680:	cmp	fp, #0
   15684:	beq	15724 <__assert_fail@plt+0x4520>
   15688:	movw	r3, #54584	; 0xd538
   1568c:	movt	r3, #1
   15690:	mov	r9, #0
   15694:	str	r3, [sp]
   15698:	movw	r3, #54592	; 0xd540
   1569c:	movt	r3, #1
   156a0:	mov	r5, r9
   156a4:	str	r3, [sp, #4]
   156a8:	b	156e0 <__assert_fail@plt+0x44dc>
   156ac:	mov	r0, fp
   156b0:	mov	r9, r4
   156b4:	bl	199a8 <__assert_fail@plt+0x87a4>
   156b8:	mov	r3, r0
   156bc:	mov	r1, #1
   156c0:	ldr	r2, [sp]
   156c4:	mov	r0, r8
   156c8:	bl	11144 <__fprintf_chk@plt>
   156cc:	ldr	fp, [r6, #4]!
   156d0:	add	r5, r5, #1
   156d4:	add	r4, r4, r7
   156d8:	cmp	fp, #0
   156dc:	beq	15724 <__assert_fail@plt+0x4520>
   156e0:	cmp	r5, #0
   156e4:	mov	r1, r4
   156e8:	ldr	r8, [sl]
   156ec:	mov	r2, r7
   156f0:	mov	r0, r9
   156f4:	beq	156ac <__assert_fail@plt+0x44a8>
   156f8:	bl	10fac <memcmp@plt>
   156fc:	cmp	r0, #0
   15700:	bne	156ac <__assert_fail@plt+0x44a8>
   15704:	mov	r0, fp
   15708:	bl	199a8 <__assert_fail@plt+0x87a4>
   1570c:	mov	r3, r0
   15710:	mov	r1, #1
   15714:	ldr	r2, [sp, #4]
   15718:	mov	r0, r8
   1571c:	bl	11144 <__fprintf_chk@plt>
   15720:	b	156cc <__assert_fail@plt+0x44c8>
   15724:	ldr	r0, [sl]
   15728:	ldr	r3, [r0, #20]
   1572c:	ldr	r2, [r0, #24]
   15730:	cmp	r3, r2
   15734:	bcs	15764 <__assert_fail@plt+0x4560>
   15738:	add	r1, r3, #1
   1573c:	mov	r2, #10
   15740:	str	r1, [r0, #20]
   15744:	strb	r2, [r3]
   15748:	add	sp, sp, #12
   1574c:	ldrd	r4, [sp]
   15750:	ldrd	r6, [sp, #8]
   15754:	ldrd	r8, [sp, #16]
   15758:	ldrd	sl, [sp, #24]
   1575c:	add	sp, sp, #32
   15760:	pop	{pc}		; (ldr pc, [sp], #4)
   15764:	mov	r1, #10
   15768:	add	sp, sp, #12
   1576c:	ldrd	r4, [sp]
   15770:	ldrd	r6, [sp, #8]
   15774:	ldrd	r8, [sp, #16]
   15778:	ldrd	sl, [sp, #24]
   1577c:	ldr	lr, [sp, #32]
   15780:	add	sp, sp, #36	; 0x24
   15784:	b	11168 <__overflow@plt>
   15788:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1578c:	mov	r5, r1
   15790:	strd	r6, [sp, #8]
   15794:	mov	r6, r2
   15798:	mov	r7, r3
   1579c:	strd	r8, [sp, #16]
   157a0:	mov	r8, r0
   157a4:	str	lr, [sp, #24]
   157a8:	sub	sp, sp, #12
   157ac:	ldrb	r4, [sp, #48]	; 0x30
   157b0:	cmp	r4, #0
   157b4:	bne	15860 <__assert_fail@plt+0x465c>
   157b8:	ldr	r0, [r2]
   157bc:	cmp	r0, #0
   157c0:	movne	r9, r2
   157c4:	bne	15848 <__assert_fail@plt+0x4644>
   157c8:	movw	r1, #54500	; 0xd4e4
   157cc:	movt	r1, #1
   157d0:	mov	r2, #5
   157d4:	mov	r0, #0
   157d8:	bl	10fc4 <dcgettext@plt>
   157dc:	mov	r9, r0
   157e0:	mov	r2, r5
   157e4:	mov	r1, #8
   157e8:	mov	r0, #0
   157ec:	bl	185a0 <__assert_fail@plt+0x739c>
   157f0:	mov	r4, r0
   157f4:	mov	r1, r8
   157f8:	mov	r0, #1
   157fc:	bl	19998 <__assert_fail@plt+0x8794>
   15800:	mov	r1, #0
   15804:	mov	r3, r4
   15808:	str	r0, [sp]
   1580c:	mov	r2, r9
   15810:	mov	r0, r1
   15814:	bl	1103c <error@plt>
   15818:	mov	r0, r6
   1581c:	mov	r1, r7
   15820:	ldr	r2, [sp, #40]	; 0x28
   15824:	bl	15634 <__assert_fail@plt+0x4430>
   15828:	ldr	r3, [sp, #44]	; 0x2c
   1582c:	blx	r3
   15830:	mvn	r0, #0
   15834:	b	1587c <__assert_fail@plt+0x4678>
   15838:	ldr	r0, [r9, #4]!
   1583c:	add	r4, r4, #1
   15840:	cmp	r0, #0
   15844:	beq	157c8 <__assert_fail@plt+0x45c4>
   15848:	mov	r1, r5
   1584c:	bl	10f34 <strcmp@plt>
   15850:	cmp	r0, #0
   15854:	bne	15838 <__assert_fail@plt+0x4634>
   15858:	mov	r0, r4
   1585c:	b	1587c <__assert_fail@plt+0x4678>
   15860:	mov	r2, r3
   15864:	mov	r1, r6
   15868:	ldr	r3, [sp, #40]	; 0x28
   1586c:	mov	r0, r5
   15870:	bl	153ec <__assert_fail@plt+0x41e8>
   15874:	cmp	r0, #0
   15878:	blt	15894 <__assert_fail@plt+0x4690>
   1587c:	add	sp, sp, #12
   15880:	ldrd	r4, [sp]
   15884:	ldrd	r6, [sp, #8]
   15888:	ldrd	r8, [sp, #16]
   1588c:	add	sp, sp, #24
   15890:	pop	{pc}		; (ldr pc, [sp], #4)
   15894:	cmn	r0, #1
   15898:	beq	157c8 <__assert_fail@plt+0x45c4>
   1589c:	movw	r1, #54528	; 0xd500
   158a0:	movt	r1, #1
   158a4:	mov	r2, #5
   158a8:	mov	r0, #0
   158ac:	bl	10fc4 <dcgettext@plt>
   158b0:	mov	r9, r0
   158b4:	b	157e0 <__assert_fail@plt+0x45dc>
   158b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   158bc:	strd	r6, [sp, #8]
   158c0:	ldr	r7, [r1]
   158c4:	str	r8, [sp, #16]
   158c8:	str	lr, [sp, #20]
   158cc:	cmp	r7, #0
   158d0:	beq	15910 <__assert_fail@plt+0x470c>
   158d4:	mov	r6, r3
   158d8:	mov	r8, r0
   158dc:	mov	r4, r2
   158e0:	mov	r5, r1
   158e4:	b	158f4 <__assert_fail@plt+0x46f0>
   158e8:	ldr	r7, [r5, #4]!
   158ec:	cmp	r7, #0
   158f0:	beq	15910 <__assert_fail@plt+0x470c>
   158f4:	mov	r1, r4
   158f8:	mov	r2, r6
   158fc:	mov	r0, r8
   15900:	add	r4, r4, r6
   15904:	bl	10fac <memcmp@plt>
   15908:	cmp	r0, #0
   1590c:	bne	158e8 <__assert_fail@plt+0x46e4>
   15910:	mov	r0, r7
   15914:	ldrd	r4, [sp]
   15918:	ldrd	r6, [sp, #8]
   1591c:	ldr	r8, [sp, #16]
   15920:	add	sp, sp, #20
   15924:	pop	{pc}		; (ldr pc, [sp], #4)
   15928:	movw	r3, #57912	; 0xe238
   1592c:	movt	r3, #2
   15930:	str	r0, [r3]
   15934:	bx	lr
   15938:	movw	r3, #57912	; 0xe238
   1593c:	movt	r3, #2
   15940:	strb	r0, [r3, #4]
   15944:	bx	lr
   15948:	movw	r3, #57732	; 0xe184
   1594c:	movt	r3, #2
   15950:	strd	r4, [sp, #-16]!
   15954:	ldr	r0, [r3]
   15958:	str	r6, [sp, #8]
   1595c:	str	lr, [sp, #12]
   15960:	sub	sp, sp, #8
   15964:	bl	1b9e4 <__assert_fail@plt+0xa7e0>
   15968:	cmp	r0, #0
   1596c:	beq	15998 <__assert_fail@plt+0x4794>
   15970:	movw	r4, #57912	; 0xe238
   15974:	movt	r4, #2
   15978:	ldrb	r6, [r4, #4]
   1597c:	bl	110d8 <__errno_location@plt>
   15980:	mov	r5, r0
   15984:	cmp	r6, #0
   15988:	beq	159c4 <__assert_fail@plt+0x47c0>
   1598c:	ldr	r3, [r0]
   15990:	cmp	r3, #32
   15994:	bne	159c4 <__assert_fail@plt+0x47c0>
   15998:	movw	r3, #57720	; 0xe178
   1599c:	movt	r3, #2
   159a0:	ldr	r0, [r3]
   159a4:	bl	1b9e4 <__assert_fail@plt+0xa7e0>
   159a8:	cmp	r0, #0
   159ac:	bne	15a0c <__assert_fail@plt+0x4808>
   159b0:	add	sp, sp, #8
   159b4:	ldrd	r4, [sp]
   159b8:	ldr	r6, [sp, #8]
   159bc:	add	sp, sp, #12
   159c0:	pop	{pc}		; (ldr pc, [sp], #4)
   159c4:	movw	r1, #49692	; 0xc21c
   159c8:	movt	r1, #1
   159cc:	mov	r2, #5
   159d0:	mov	r0, #0
   159d4:	bl	10fc4 <dcgettext@plt>
   159d8:	mov	r6, r0
   159dc:	ldr	r0, [r4]
   159e0:	cmp	r0, #0
   159e4:	beq	15a1c <__assert_fail@plt+0x4818>
   159e8:	ldr	r4, [r5]
   159ec:	bl	18e2c <__assert_fail@plt+0x7c28>
   159f0:	mov	r3, r0
   159f4:	movw	r2, #54600	; 0xd548
   159f8:	movt	r2, #1
   159fc:	mov	r0, #0
   15a00:	str	r6, [sp]
   15a04:	mov	r1, r4
   15a08:	bl	1103c <error@plt>
   15a0c:	movw	r3, #57636	; 0xe124
   15a10:	movt	r3, #2
   15a14:	ldr	r0, [r3]
   15a18:	bl	10f64 <_exit@plt>
   15a1c:	mov	r3, r6
   15a20:	movw	r2, #54604	; 0xd54c
   15a24:	movt	r2, #1
   15a28:	ldr	r1, [r5]
   15a2c:	bl	1103c <error@plt>
   15a30:	b	15a0c <__assert_fail@plt+0x4808>
   15a34:	andeq	r0, r0, r0
   15a38:	vcmpe.f64	d0, #0.0
   15a3c:	vldr	d7, [pc, #300]	; 15b70 <__assert_fail@plt+0x496c>
   15a40:	movw	ip, #11557	; 0x2d25
   15a44:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15a48:	mov	r4, #32
   15a4c:	strd	r6, [sp, #8]
   15a50:	mov	r6, r1
   15a54:	and	r1, r2, #1
   15a58:	strd	r8, [sp, #16]
   15a5c:	mov	r9, r3
   15a60:	mov	r7, r0
   15a64:	str	lr, [sp, #24]
   15a68:	ubfx	r0, r2, #1, #1
   15a6c:	vpush	{d8}
   15a70:	sub	sp, sp, #44	; 0x2c
   15a74:	vmov.f64	d8, d0
   15a78:	add	r3, sp, #29
   15a7c:	add	r8, sp, #28
   15a80:	vmrs	APSR_nzcv, fpscr
   15a84:	strh	ip, [sp, #28]
   15a88:	mov	ip, #43	; 0x2b
   15a8c:	strb	ip, [r3, r1]
   15a90:	add	r3, r3, r1
   15a94:	ubfx	r1, r2, #2, #1
   15a98:	add	ip, r3, r0
   15a9c:	vnegmi.f64	d6, d0
   15aa0:	vmovpl.f64	d6, d0
   15aa4:	tst	r2, #16
   15aa8:	movne	lr, #71	; 0x47
   15aac:	moveq	lr, #103	; 0x67
   15ab0:	strb	r4, [r3, r0]
   15ab4:	mov	r3, #48	; 0x30
   15ab8:	ubfx	r2, r2, #3, #1
   15abc:	add	r0, ip, r1
   15ac0:	vcmpe.f64	d6, d7
   15ac4:	strb	r3, [ip, r1]
   15ac8:	mov	r1, #42	; 0x2a
   15acc:	add	r3, r0, r2
   15ad0:	strb	r1, [r0, r2]
   15ad4:	mov	r0, #46	; 0x2e
   15ad8:	mov	r2, #0
   15adc:	strb	r0, [r3, #1]
   15ae0:	strb	r1, [r3, #2]
   15ae4:	strb	lr, [r3, #3]
   15ae8:	vmrs	APSR_nzcv, fpscr
   15aec:	strb	r2, [r3, #4]
   15af0:	movmi	r4, #1
   15af4:	movpl	r4, #15
   15af8:	mov	r1, r6
   15afc:	mvn	r3, #0
   15b00:	strd	r8, [sp]
   15b04:	mov	r2, #1
   15b08:	mov	r0, r7
   15b0c:	str	r4, [sp, #8]
   15b10:	vstr	d8, [sp, #16]
   15b14:	bl	111f8 <__snprintf_chk@plt>
   15b18:	cmp	r4, #16
   15b1c:	mov	r5, r0
   15b20:	movle	r1, #0
   15b24:	movgt	r1, #1
   15b28:	orrs	r1, r1, r0, lsr #31
   15b2c:	add	r4, r4, #1
   15b30:	bne	15b50 <__assert_fail@plt+0x494c>
   15b34:	cmp	r0, r6
   15b38:	bcs	15af8 <__assert_fail@plt+0x48f4>
   15b3c:	mov	r0, r7
   15b40:	bl	1112c <strtod@plt>
   15b44:	vcmp.f64	d0, d8
   15b48:	vmrs	APSR_nzcv, fpscr
   15b4c:	bne	15af8 <__assert_fail@plt+0x48f4>
   15b50:	mov	r0, r5
   15b54:	add	sp, sp, #44	; 0x2c
   15b58:	vpop	{d8}
   15b5c:	ldrd	r4, [sp]
   15b60:	ldrd	r6, [sp, #8]
   15b64:	ldrd	r8, [sp, #16]
   15b68:	add	sp, sp, #24
   15b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b70:	andeq	r0, r0, r0
   15b74:	andseq	r0, r0, r0
   15b78:	strd	r4, [sp, #-12]!
   15b7c:	mov	r4, r0
   15b80:	str	lr, [sp, #8]
   15b84:	sub	sp, sp, #12
   15b88:	bl	11138 <fileno@plt>
   15b8c:	cmp	r0, #0
   15b90:	mov	r0, r4
   15b94:	blt	15c18 <__assert_fail@plt+0x4a14>
   15b98:	bl	11084 <__freading@plt>
   15b9c:	cmp	r0, #0
   15ba0:	bne	15be4 <__assert_fail@plt+0x49e0>
   15ba4:	mov	r0, r4
   15ba8:	bl	15c2c <__assert_fail@plt+0x4a28>
   15bac:	cmp	r0, #0
   15bb0:	beq	15c14 <__assert_fail@plt+0x4a10>
   15bb4:	bl	110d8 <__errno_location@plt>
   15bb8:	mov	r5, r0
   15bbc:	mov	r0, r4
   15bc0:	ldr	r4, [r5]
   15bc4:	bl	11150 <fclose@plt>
   15bc8:	cmp	r4, #0
   15bcc:	mvnne	r0, #0
   15bd0:	strne	r4, [r5]
   15bd4:	add	sp, sp, #12
   15bd8:	ldrd	r4, [sp]
   15bdc:	add	sp, sp, #8
   15be0:	pop	{pc}		; (ldr pc, [sp], #4)
   15be4:	mov	r0, r4
   15be8:	bl	11138 <fileno@plt>
   15bec:	mov	r1, #1
   15bf0:	mov	r2, #0
   15bf4:	mov	r3, #0
   15bf8:	str	r1, [sp]
   15bfc:	bl	1100c <lseek64@plt>
   15c00:	mvn	r3, #0
   15c04:	mvn	r2, #0
   15c08:	cmp	r1, r3
   15c0c:	cmpeq	r0, r2
   15c10:	bne	15ba4 <__assert_fail@plt+0x49a0>
   15c14:	mov	r0, r4
   15c18:	add	sp, sp, #12
   15c1c:	ldrd	r4, [sp]
   15c20:	ldr	lr, [sp, #8]
   15c24:	add	sp, sp, #12
   15c28:	b	11150 <fclose@plt>
   15c2c:	str	r4, [sp, #-8]!
   15c30:	subs	r4, r0, #0
   15c34:	str	lr, [sp, #4]
   15c38:	sub	sp, sp, #8
   15c3c:	beq	15c58 <__assert_fail@plt+0x4a54>
   15c40:	bl	11084 <__freading@plt>
   15c44:	cmp	r0, #0
   15c48:	beq	15c58 <__assert_fail@plt+0x4a54>
   15c4c:	ldr	r3, [r4]
   15c50:	tst	r3, #256	; 0x100
   15c54:	bne	15c70 <__assert_fail@plt+0x4a6c>
   15c58:	mov	r0, r4
   15c5c:	add	sp, sp, #8
   15c60:	ldr	r4, [sp]
   15c64:	ldr	lr, [sp, #4]
   15c68:	add	sp, sp, #8
   15c6c:	b	10f40 <fflush@plt>
   15c70:	mov	r1, #1
   15c74:	mov	r2, #0
   15c78:	mov	r3, #0
   15c7c:	mov	r0, r4
   15c80:	str	r1, [sp]
   15c84:	bl	15cec <__assert_fail@plt+0x4ae8>
   15c88:	b	15c58 <__assert_fail@plt+0x4a54>
   15c8c:	strd	r4, [sp, #-12]!
   15c90:	mov	r5, r0
   15c94:	str	lr, [sp, #8]
   15c98:	sub	sp, sp, #12
   15c9c:	bl	110d8 <__errno_location@plt>
   15ca0:	mov	r4, r0
   15ca4:	mov	r2, #0
   15ca8:	ldr	r3, [r4]
   15cac:	mov	r0, r5
   15cb0:	str	r2, [r4]
   15cb4:	str	r3, [sp]
   15cb8:	str	r3, [sp, #4]
   15cbc:	bl	10f4c <free@plt>
   15cc0:	ldr	r3, [r4]
   15cc4:	add	r2, sp, #8
   15cc8:	clz	r3, r3
   15ccc:	lsr	r3, r3, #5
   15cd0:	add	r3, r2, r3, lsl #2
   15cd4:	ldr	r3, [r3, #-8]
   15cd8:	str	r3, [r4]
   15cdc:	add	sp, sp, #12
   15ce0:	ldrd	r4, [sp]
   15ce4:	add	sp, sp, #8
   15ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15cf0:	mov	r4, r0
   15cf4:	ldr	ip, [r0, #4]
   15cf8:	strd	r6, [sp, #8]
   15cfc:	str	lr, [sp, #20]
   15d00:	ldr	lr, [r0, #8]
   15d04:	str	r8, [sp, #16]
   15d08:	sub	sp, sp, #8
   15d0c:	ldr	r5, [sp, #32]
   15d10:	cmp	lr, ip
   15d14:	beq	15d3c <__assert_fail@plt+0x4b38>
   15d18:	mov	r0, r4
   15d1c:	str	r5, [sp, #32]
   15d20:	add	sp, sp, #8
   15d24:	ldrd	r4, [sp]
   15d28:	ldrd	r6, [sp, #8]
   15d2c:	ldr	r8, [sp, #16]
   15d30:	ldr	lr, [sp, #20]
   15d34:	add	sp, sp, #24
   15d38:	b	1115c <fseeko64@plt>
   15d3c:	ldr	ip, [r0, #16]
   15d40:	ldr	lr, [r0, #20]
   15d44:	cmp	lr, ip
   15d48:	bne	15d18 <__assert_fail@plt+0x4b14>
   15d4c:	ldr	r8, [r0, #36]	; 0x24
   15d50:	cmp	r8, #0
   15d54:	bne	15d18 <__assert_fail@plt+0x4b14>
   15d58:	mov	r6, r2
   15d5c:	mov	r7, r3
   15d60:	bl	11138 <fileno@plt>
   15d64:	mov	r2, r6
   15d68:	mov	r3, r7
   15d6c:	str	r5, [sp]
   15d70:	bl	1100c <lseek64@plt>
   15d74:	mvn	r3, #0
   15d78:	mvn	r2, #0
   15d7c:	cmp	r1, r3
   15d80:	cmpeq	r0, r2
   15d84:	beq	15db4 <__assert_fail@plt+0x4bb0>
   15d88:	ldr	r3, [r4]
   15d8c:	strd	r0, [r4, #80]	; 0x50
   15d90:	bic	r3, r3, #16
   15d94:	str	r3, [r4]
   15d98:	mov	r0, r8
   15d9c:	add	sp, sp, #8
   15da0:	ldrd	r4, [sp]
   15da4:	ldrd	r6, [sp, #8]
   15da8:	ldr	r8, [sp, #16]
   15dac:	add	sp, sp, #20
   15db0:	pop	{pc}		; (ldr pc, [sp], #4)
   15db4:	mvn	r8, #0
   15db8:	b	15d98 <__assert_fail@plt+0x4b94>
   15dbc:	vcmpe.f32	s0, #0.0
   15dc0:	vldr	s15, [pc, #304]	; 15ef8 <__assert_fail@plt+0x4cf4>
   15dc4:	movw	ip, #11557	; 0x2d25
   15dc8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15dcc:	mov	r4, #32
   15dd0:	strd	r6, [sp, #8]
   15dd4:	mov	r6, r1
   15dd8:	and	r1, r2, #1
   15ddc:	strd	r8, [sp, #16]
   15de0:	mov	r9, r3
   15de4:	mov	r7, r0
   15de8:	str	lr, [sp, #24]
   15dec:	ubfx	r0, r2, #1, #1
   15df0:	vpush	{d8-d9}
   15df4:	sub	sp, sp, #44	; 0x2c
   15df8:	vcvt.f64.f32	d8, s0
   15dfc:	add	r3, sp, #29
   15e00:	vmov.f32	s18, s0
   15e04:	add	r8, sp, #28
   15e08:	vmrs	APSR_nzcv, fpscr
   15e0c:	strh	ip, [sp, #28]
   15e10:	mov	ip, #43	; 0x2b
   15e14:	strb	ip, [r3, r1]
   15e18:	add	r3, r3, r1
   15e1c:	ubfx	r1, r2, #2, #1
   15e20:	add	ip, r3, r0
   15e24:	vnegmi.f32	s14, s0
   15e28:	vmovpl.f32	s14, s0
   15e2c:	tst	r2, #16
   15e30:	movne	lr, #71	; 0x47
   15e34:	moveq	lr, #103	; 0x67
   15e38:	strb	r4, [r3, r0]
   15e3c:	mov	r3, #48	; 0x30
   15e40:	ubfx	r2, r2, #3, #1
   15e44:	add	r0, ip, r1
   15e48:	vcmpe.f32	s14, s15
   15e4c:	strb	r3, [ip, r1]
   15e50:	mov	r1, #42	; 0x2a
   15e54:	add	r3, r0, r2
   15e58:	strb	r1, [r0, r2]
   15e5c:	mov	r0, #46	; 0x2e
   15e60:	mov	r2, #0
   15e64:	strb	r0, [r3, #1]
   15e68:	strb	r1, [r3, #2]
   15e6c:	strb	lr, [r3, #3]
   15e70:	vmrs	APSR_nzcv, fpscr
   15e74:	strb	r2, [r3, #4]
   15e78:	movmi	r4, #1
   15e7c:	movpl	r4, #6
   15e80:	mov	r1, r6
   15e84:	mvn	r3, #0
   15e88:	strd	r8, [sp]
   15e8c:	mov	r2, #1
   15e90:	mov	r0, r7
   15e94:	str	r4, [sp, #8]
   15e98:	vstr	d8, [sp, #16]
   15e9c:	bl	111f8 <__snprintf_chk@plt>
   15ea0:	cmp	r4, #8
   15ea4:	mov	r5, r0
   15ea8:	movle	r1, #0
   15eac:	movgt	r1, #1
   15eb0:	orrs	r1, r1, r0, lsr #31
   15eb4:	add	r4, r4, #1
   15eb8:	bne	15ed8 <__assert_fail@plt+0x4cd4>
   15ebc:	cmp	r0, r6
   15ec0:	bcs	15e80 <__assert_fail@plt+0x4c7c>
   15ec4:	mov	r0, r7
   15ec8:	bl	11048 <strtof@plt>
   15ecc:	vcmp.f32	s0, s18
   15ed0:	vmrs	APSR_nzcv, fpscr
   15ed4:	bne	15e80 <__assert_fail@plt+0x4c7c>
   15ed8:	mov	r0, r5
   15edc:	add	sp, sp, #44	; 0x2c
   15ee0:	vpop	{d8-d9}
   15ee4:	ldrd	r4, [sp]
   15ee8:	ldrd	r6, [sp, #8]
   15eec:	ldrd	r8, [sp, #16]
   15ef0:	add	sp, sp, #24
   15ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ef8:	addeq	r0, r0, r0
   15efc:	andeq	r0, r0, r0
   15f00:	vcmpe.f64	d0, #0.0
   15f04:	vldr	d7, [pc, #292]	; 16030 <__assert_fail@plt+0x4e2c>
   15f08:	movw	ip, #11557	; 0x2d25
   15f0c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15f10:	mov	r4, #32
   15f14:	strd	r6, [sp, #8]
   15f18:	mov	r7, r0
   15f1c:	and	r0, r2, #1
   15f20:	strd	r8, [sp, #16]
   15f24:	mov	r9, r3
   15f28:	mov	r6, r1
   15f2c:	str	lr, [sp, #24]
   15f30:	ubfx	r1, r2, #1, #1
   15f34:	vpush	{d8}
   15f38:	sub	sp, sp, #44	; 0x2c
   15f3c:	vmov.f64	d8, d0
   15f40:	add	r3, sp, #29
   15f44:	add	r8, sp, #28
   15f48:	vmrs	APSR_nzcv, fpscr
   15f4c:	strh	ip, [sp, #28]
   15f50:	mov	ip, #43	; 0x2b
   15f54:	strb	ip, [r3, r0]
   15f58:	add	r3, r3, r0
   15f5c:	ubfx	r0, r2, #2, #1
   15f60:	add	ip, r3, r1
   15f64:	vnegmi.f64	d6, d0
   15f68:	vmovpl.f64	d6, d0
   15f6c:	tst	r2, #16
   15f70:	movne	lr, #71	; 0x47
   15f74:	moveq	lr, #103	; 0x67
   15f78:	strb	r4, [r3, r1]
   15f7c:	mov	r3, #48	; 0x30
   15f80:	ubfx	r2, r2, #3, #1
   15f84:	add	r1, ip, r0
   15f88:	vcmpe.f64	d6, d7
   15f8c:	strb	r3, [ip, r0]
   15f90:	movw	r0, #11818	; 0x2e2a
   15f94:	movt	r0, #19498	; 0x4c2a
   15f98:	add	r3, r1, r2
   15f9c:	str	r0, [r1, r2]
   15fa0:	mov	r2, #0
   15fa4:	strb	lr, [r3, #4]
   15fa8:	strb	r2, [r3, #5]
   15fac:	vmrs	APSR_nzcv, fpscr
   15fb0:	movmi	r4, #1
   15fb4:	movpl	r4, #15
   15fb8:	mov	r1, r6
   15fbc:	mvn	r3, #0
   15fc0:	strd	r8, [sp]
   15fc4:	mov	r2, #1
   15fc8:	mov	r0, r7
   15fcc:	str	r4, [sp, #8]
   15fd0:	vstr	d8, [sp, #16]
   15fd4:	bl	111f8 <__snprintf_chk@plt>
   15fd8:	cmp	r4, #16
   15fdc:	mov	r5, r0
   15fe0:	movle	r1, #0
   15fe4:	movgt	r1, #1
   15fe8:	orrs	r1, r1, r0, lsr #31
   15fec:	add	r4, r4, #1
   15ff0:	bne	16010 <__assert_fail@plt+0x4e0c>
   15ff4:	cmp	r0, r6
   15ff8:	bcs	15fb8 <__assert_fail@plt+0x4db4>
   15ffc:	mov	r0, r7
   16000:	bl	10f94 <strtold@plt>
   16004:	vcmp.f64	d0, d8
   16008:	vmrs	APSR_nzcv, fpscr
   1600c:	bne	15fb8 <__assert_fail@plt+0x4db4>
   16010:	mov	r0, r5
   16014:	add	sp, sp, #44	; 0x2c
   16018:	vpop	{d8}
   1601c:	ldrd	r4, [sp]
   16020:	ldrd	r6, [sp, #8]
   16024:	ldrd	r8, [sp, #16]
   16028:	add	sp, sp, #24
   1602c:	pop	{pc}		; (ldr pc, [sp], #4)
   16030:	andeq	r0, r0, r0
   16034:	andseq	r0, r0, r0
   16038:	strd	r4, [sp, #-16]!
   1603c:	subs	r4, r0, #0
   16040:	str	r6, [sp, #8]
   16044:	str	lr, [sp, #12]
   16048:	beq	160e0 <__assert_fail@plt+0x4edc>
   1604c:	mov	r1, #47	; 0x2f
   16050:	bl	11180 <strrchr@plt>
   16054:	subs	r5, r0, #0
   16058:	beq	160b8 <__assert_fail@plt+0x4eb4>
   1605c:	add	r6, r5, #1
   16060:	sub	r3, r6, r4
   16064:	cmp	r3, #6
   16068:	ble	160b8 <__assert_fail@plt+0x4eb4>
   1606c:	movw	r1, #54664	; 0xd588
   16070:	movt	r1, #1
   16074:	mov	r2, #7
   16078:	sub	r0, r5, #6
   1607c:	bl	111e0 <strncmp@plt>
   16080:	cmp	r0, #0
   16084:	bne	160b8 <__assert_fail@plt+0x4eb4>
   16088:	movw	r1, #54672	; 0xd590
   1608c:	movt	r1, #1
   16090:	mov	r2, #3
   16094:	mov	r0, r6
   16098:	bl	111e0 <strncmp@plt>
   1609c:	cmp	r0, #0
   160a0:	movne	r4, r6
   160a4:	bne	160b8 <__assert_fail@plt+0x4eb4>
   160a8:	add	r4, r5, #4
   160ac:	movw	r3, #57704	; 0xe168
   160b0:	movt	r3, #2
   160b4:	str	r4, [r3]
   160b8:	movw	r2, #57920	; 0xe240
   160bc:	movt	r2, #2
   160c0:	ldr	r6, [sp, #8]
   160c4:	movw	r3, #57708	; 0xe16c
   160c8:	movt	r3, #2
   160cc:	str	r4, [r2]
   160d0:	str	r4, [r3]
   160d4:	ldrd	r4, [sp]
   160d8:	add	sp, sp, #12
   160dc:	pop	{pc}		; (ldr pc, [sp], #4)
   160e0:	movw	r3, #57720	; 0xe178
   160e4:	movt	r3, #2
   160e8:	movw	r0, #54608	; 0xd550
   160ec:	movt	r0, #1
   160f0:	ldr	r3, [r3]
   160f4:	mov	r2, #55	; 0x37
   160f8:	mov	r1, #1
   160fc:	bl	11000 <fwrite@plt>
   16100:	bl	111ec <abort@plt>
   16104:	mov	r2, #5
   16108:	strd	r4, [sp, #-16]!
   1610c:	mov	r5, r0
   16110:	str	r6, [sp, #8]
   16114:	mov	r6, r1
   16118:	mov	r1, r0
   1611c:	mov	r0, #0
   16120:	str	lr, [sp, #12]
   16124:	bl	10fc4 <dcgettext@plt>
   16128:	cmp	r5, r0
   1612c:	mov	r4, r0
   16130:	beq	16148 <__assert_fail@plt+0x4f44>
   16134:	mov	r0, r4
   16138:	ldrd	r4, [sp]
   1613c:	ldr	r6, [sp, #8]
   16140:	add	sp, sp, #12
   16144:	pop	{pc}		; (ldr pc, [sp], #4)
   16148:	bl	1ba6c <__assert_fail@plt+0xa868>
   1614c:	ldrb	r3, [r0]
   16150:	bic	r3, r3, #32
   16154:	cmp	r3, #85	; 0x55
   16158:	bne	161c0 <__assert_fail@plt+0x4fbc>
   1615c:	ldrb	r3, [r0, #1]
   16160:	bic	r3, r3, #32
   16164:	cmp	r3, #84	; 0x54
   16168:	bne	16240 <__assert_fail@plt+0x503c>
   1616c:	ldrb	r3, [r0, #2]
   16170:	bic	r3, r3, #32
   16174:	cmp	r3, #70	; 0x46
   16178:	bne	16240 <__assert_fail@plt+0x503c>
   1617c:	ldrb	r3, [r0, #3]
   16180:	cmp	r3, #45	; 0x2d
   16184:	bne	16240 <__assert_fail@plt+0x503c>
   16188:	ldrb	r3, [r0, #4]
   1618c:	cmp	r3, #56	; 0x38
   16190:	bne	16240 <__assert_fail@plt+0x503c>
   16194:	ldrb	r3, [r0, #5]
   16198:	cmp	r3, #0
   1619c:	bne	16240 <__assert_fail@plt+0x503c>
   161a0:	ldrb	r2, [r4]
   161a4:	movw	r3, #54764	; 0xd5ec
   161a8:	movt	r3, #1
   161ac:	movw	r4, #54776	; 0xd5f8
   161b0:	movt	r4, #1
   161b4:	cmp	r2, #96	; 0x60
   161b8:	movne	r4, r3
   161bc:	b	16134 <__assert_fail@plt+0x4f30>
   161c0:	cmp	r3, #71	; 0x47
   161c4:	bne	16240 <__assert_fail@plt+0x503c>
   161c8:	ldrb	r3, [r0, #1]
   161cc:	bic	r3, r3, #32
   161d0:	cmp	r3, #66	; 0x42
   161d4:	bne	16240 <__assert_fail@plt+0x503c>
   161d8:	ldrb	r3, [r0, #2]
   161dc:	cmp	r3, #49	; 0x31
   161e0:	bne	16240 <__assert_fail@plt+0x503c>
   161e4:	ldrb	r3, [r0, #3]
   161e8:	cmp	r3, #56	; 0x38
   161ec:	bne	16240 <__assert_fail@plt+0x503c>
   161f0:	ldrb	r3, [r0, #4]
   161f4:	cmp	r3, #48	; 0x30
   161f8:	bne	16240 <__assert_fail@plt+0x503c>
   161fc:	ldrb	r3, [r0, #5]
   16200:	cmp	r3, #51	; 0x33
   16204:	bne	16240 <__assert_fail@plt+0x503c>
   16208:	ldrb	r3, [r0, #6]
   1620c:	cmp	r3, #48	; 0x30
   16210:	bne	16240 <__assert_fail@plt+0x503c>
   16214:	ldrb	r3, [r0, #7]
   16218:	cmp	r3, #0
   1621c:	bne	16240 <__assert_fail@plt+0x503c>
   16220:	ldrb	r2, [r4]
   16224:	movw	r3, #54768	; 0xd5f0
   16228:	movt	r3, #1
   1622c:	movw	r4, #54772	; 0xd5f4
   16230:	movt	r4, #1
   16234:	cmp	r2, #96	; 0x60
   16238:	movne	r4, r3
   1623c:	b	16134 <__assert_fail@plt+0x4f30>
   16240:	movw	r3, #54780	; 0xd5fc
   16244:	movt	r3, #1
   16248:	cmp	r6, #9
   1624c:	movw	r4, #54760	; 0xd5e8
   16250:	movt	r4, #1
   16254:	movne	r4, r3
   16258:	b	16134 <__assert_fail@plt+0x4f30>
   1625c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16260:	strd	r6, [sp, #8]
   16264:	strd	r8, [sp, #16]
   16268:	mov	r8, r3
   1626c:	strd	sl, [sp, #24]
   16270:	mov	fp, r0
   16274:	mov	sl, r1
   16278:	str	lr, [sp, #32]
   1627c:	sub	sp, sp, #140	; 0x8c
   16280:	ldr	r3, [sp, #180]	; 0xb4
   16284:	str	r2, [sp, #28]
   16288:	and	r4, r3, #2
   1628c:	ubfx	r3, r3, #1, #1
   16290:	str	r3, [sp, #44]	; 0x2c
   16294:	bl	11018 <__ctype_get_mb_cur_max@plt>
   16298:	ldr	r3, [sp, #176]	; 0xb0
   1629c:	str	r0, [sp, #76]	; 0x4c
   162a0:	cmp	r3, #10
   162a4:	ldrls	pc, [pc, r3, lsl #2]
   162a8:	b	17c44 <__assert_fail@plt+0x6a40>
   162ac:	andeq	r6, r1, ip, lsr #14
   162b0:	andeq	r6, r1, r8, asr #16
   162b4:	andeq	r6, r1, r4, asr #27
   162b8:			; <UNDEFINED> instruction: 0x000168b4
   162bc:	andeq	r6, r1, r4, lsr r6
   162c0:			; <UNDEFINED> instruction: 0x000166b0
   162c4:	andeq	r6, r1, r8, lsl #15
   162c8:	strdeq	r6, [r1], -r0
   162cc:	ldrdeq	r6, [r1], -r8
   162d0:	ldrdeq	r6, [r1], -r8
   162d4:	ldrdeq	r6, [r1], -r8
   162d8:	ldr	r3, [sp, #176]	; 0xb0
   162dc:	cmp	r3, #10
   162e0:	beq	1630c <__assert_fail@plt+0x5108>
   162e4:	mov	r1, r3
   162e8:	movw	r0, #54784	; 0xd600
   162ec:	movt	r0, #1
   162f0:	bl	16104 <__assert_fail@plt+0x4f00>
   162f4:	str	r0, [sp, #188]	; 0xbc
   162f8:	movw	r0, #54780	; 0xd5fc
   162fc:	movt	r0, #1
   16300:	ldr	r1, [sp, #176]	; 0xb0
   16304:	bl	16104 <__assert_fail@plt+0x4f00>
   16308:	str	r0, [sp, #192]	; 0xc0
   1630c:	cmp	r4, #0
   16310:	movne	r4, #0
   16314:	beq	179d0 <__assert_fail@plt+0x67cc>
   16318:	mov	r5, #0
   1631c:	ldr	r0, [sp, #192]	; 0xc0
   16320:	mov	r9, r5
   16324:	str	r5, [sp, #64]	; 0x40
   16328:	bl	110c0 <strlen@plt>
   1632c:	mov	r3, #1
   16330:	ldr	r2, [sp, #44]	; 0x2c
   16334:	cmp	r0, r5
   16338:	moveq	r2, r5
   1633c:	str	r3, [sp, #32]
   16340:	str	r3, [sp, #48]	; 0x30
   16344:	str	r5, [sp, #52]	; 0x34
   16348:	str	r3, [sp, #60]	; 0x3c
   1634c:	ldr	r3, [sp, #180]	; 0xb4
   16350:	str	r0, [sp, #56]	; 0x38
   16354:	str	r5, [sp, #68]	; 0x44
   16358:	str	r5, [sp, #80]	; 0x50
   1635c:	str	r5, [sp, #84]	; 0x54
   16360:	and	r3, r3, #1
   16364:	str	r2, [sp, #88]	; 0x58
   16368:	str	r3, [sp, #92]	; 0x5c
   1636c:	ldr	r3, [sp, #180]	; 0xb4
   16370:	and	r3, r3, #4
   16374:	str	r3, [sp, #96]	; 0x60
   16378:	ldr	r3, [sp, #192]	; 0xc0
   1637c:	str	r3, [sp, #72]	; 0x48
   16380:	mov	r3, fp
   16384:	mov	r7, #0
   16388:	mov	fp, r9
   1638c:	mov	r9, r3
   16390:	cmn	r8, #1
   16394:	beq	16998 <__assert_fail@plt+0x5794>
   16398:	subs	r6, r8, r7
   1639c:	movne	r6, #1
   163a0:	cmp	r6, #0
   163a4:	beq	169b0 <__assert_fail@plt+0x57ac>
   163a8:	ldr	r0, [sp, #28]
   163ac:	ldr	r3, [sp, #48]	; 0x30
   163b0:	cmp	r3, #0
   163b4:	add	r3, r0, r7
   163b8:	str	r3, [sp, #36]	; 0x24
   163bc:	beq	16e3c <__assert_fail@plt+0x5c38>
   163c0:	ldr	r2, [sp, #56]	; 0x38
   163c4:	cmp	r2, #0
   163c8:	beq	1733c <__assert_fail@plt+0x6138>
   163cc:	cmp	r2, #1
   163d0:	mov	r3, r2
   163d4:	movls	r3, #0
   163d8:	movhi	r3, #1
   163dc:	cmn	r8, #1
   163e0:	add	r5, r7, r2
   163e4:	movne	r3, #0
   163e8:	cmp	r3, #0
   163ec:	beq	163f8 <__assert_fail@plt+0x51f4>
   163f0:	bl	110c0 <strlen@plt>
   163f4:	mov	r8, r0
   163f8:	cmp	r5, r8
   163fc:	bhi	1733c <__assert_fail@plt+0x6138>
   16400:	ldr	r0, [sp, #36]	; 0x24
   16404:	ldr	r2, [sp, #56]	; 0x38
   16408:	ldr	r1, [sp, #72]	; 0x48
   1640c:	bl	10fac <memcmp@plt>
   16410:	cmp	r0, #0
   16414:	bne	1733c <__assert_fail@plt+0x6138>
   16418:	ldr	r3, [sp, #44]	; 0x2c
   1641c:	cmp	r3, #0
   16420:	bne	17ae8 <__assert_fail@plt+0x68e4>
   16424:	ldr	r3, [sp, #36]	; 0x24
   16428:	ldrb	r5, [r3]
   1642c:	cmp	r5, #126	; 0x7e
   16430:	ldrls	pc, [pc, r5, lsl #2]
   16434:	b	178d0 <__assert_fail@plt+0x66cc>
   16438:	andeq	r6, r1, ip, lsl #22
   1643c:	ldrdeq	r7, [r1], -r0
   16440:	ldrdeq	r7, [r1], -r0
   16444:	ldrdeq	r7, [r1], -r0
   16448:	ldrdeq	r7, [r1], -r0
   1644c:	ldrdeq	r7, [r1], -r0
   16450:	ldrdeq	r7, [r1], -r0
   16454:	andeq	r6, r1, r4, ror #20
   16458:	andeq	r6, r1, ip, asr sl
   1645c:	andeq	r6, r1, ip, ror #20
   16460:	strdeq	r6, [r1], -r0
   16464:	andeq	r6, r1, r0, ror #23
   16468:	andeq	r6, r1, r8, lsl #18
   1646c:			; <UNDEFINED> instruction: 0x00016bbc
   16470:	ldrdeq	r7, [r1], -r0
   16474:	ldrdeq	r7, [r1], -r0
   16478:	ldrdeq	r7, [r1], -r0
   1647c:	ldrdeq	r7, [r1], -r0
   16480:	ldrdeq	r7, [r1], -r0
   16484:	ldrdeq	r7, [r1], -r0
   16488:	ldrdeq	r7, [r1], -r0
   1648c:	ldrdeq	r7, [r1], -r0
   16490:	ldrdeq	r7, [r1], -r0
   16494:	ldrdeq	r7, [r1], -r0
   16498:	ldrdeq	r7, [r1], -r0
   1649c:	ldrdeq	r7, [r1], -r0
   164a0:	ldrdeq	r7, [r1], -r0
   164a4:	ldrdeq	r7, [r1], -r0
   164a8:	ldrdeq	r7, [r1], -r0
   164ac:	ldrdeq	r7, [r1], -r0
   164b0:	ldrdeq	r7, [r1], -r0
   164b4:	ldrdeq	r7, [r1], -r0
   164b8:	andeq	r6, r1, r8, ror #24
   164bc:	andeq	r6, r1, ip, asr ip
   164c0:	andeq	r6, r1, ip, asr ip
   164c4:	andeq	r6, r1, r0, asr ip
   164c8:	andeq	r6, r1, ip, asr ip
   164cc:	andeq	r6, r1, r4, lsr sp
   164d0:	andeq	r6, r1, ip, asr ip
   164d4:	andeq	r6, r1, r4, lsr #27
   164d8:	andeq	r6, r1, ip, asr ip
   164dc:	andeq	r6, r1, ip, asr ip
   164e0:	andeq	r6, r1, ip, asr ip
   164e4:	andeq	r6, r1, r4, lsr sp
   164e8:	andeq	r6, r1, r4, lsr sp
   164ec:	andeq	r6, r1, r4, lsr sp
   164f0:	andeq	r6, r1, r4, lsr sp
   164f4:	andeq	r6, r1, r4, lsr sp
   164f8:	andeq	r6, r1, r4, lsr sp
   164fc:	andeq	r6, r1, r4, lsr sp
   16500:	andeq	r6, r1, r4, lsr sp
   16504:	andeq	r6, r1, r4, lsr sp
   16508:	andeq	r6, r1, r4, lsr sp
   1650c:	andeq	r6, r1, r4, lsr sp
   16510:	andeq	r6, r1, r4, lsr sp
   16514:	andeq	r6, r1, r4, lsr sp
   16518:	andeq	r6, r1, r4, lsr sp
   1651c:	andeq	r6, r1, r4, lsr sp
   16520:	andeq	r6, r1, r4, lsr sp
   16524:	andeq	r6, r1, ip, asr ip
   16528:	andeq	r6, r1, ip, asr ip
   1652c:	andeq	r6, r1, ip, asr ip
   16530:	andeq	r6, r1, ip, asr ip
   16534:	andeq	r6, r1, r4, asr sp
   16538:	ldrdeq	r7, [r1], -r0
   1653c:	andeq	r6, r1, r4, lsr sp
   16540:	andeq	r6, r1, r4, lsr sp
   16544:	andeq	r6, r1, r4, lsr sp
   16548:	andeq	r6, r1, r4, lsr sp
   1654c:	andeq	r6, r1, r4, lsr sp
   16550:	andeq	r6, r1, r4, lsr sp
   16554:	andeq	r6, r1, r4, lsr sp
   16558:	andeq	r6, r1, r4, lsr sp
   1655c:	andeq	r6, r1, r4, lsr sp
   16560:	andeq	r6, r1, r4, lsr sp
   16564:	andeq	r6, r1, r4, lsr sp
   16568:	andeq	r6, r1, r4, lsr sp
   1656c:	andeq	r6, r1, r4, lsr sp
   16570:	andeq	r6, r1, r4, lsr sp
   16574:	andeq	r6, r1, r4, lsr sp
   16578:	andeq	r6, r1, r4, lsr sp
   1657c:	andeq	r6, r1, r4, lsr sp
   16580:	andeq	r6, r1, r4, lsr sp
   16584:	andeq	r6, r1, r4, lsr sp
   16588:	andeq	r6, r1, r4, lsr sp
   1658c:	andeq	r6, r1, r4, lsr sp
   16590:	andeq	r6, r1, r4, lsr sp
   16594:	andeq	r6, r1, r4, lsr sp
   16598:	andeq	r6, r1, r4, lsr sp
   1659c:	andeq	r6, r1, r4, lsr sp
   165a0:	andeq	r6, r1, r4, lsr sp
   165a4:	andeq	r6, r1, ip, asr ip
   165a8:	strdeq	r6, [r1], -r8
   165ac:	andeq	r6, r1, r4, lsr sp
   165b0:	andeq	r6, r1, ip, asr ip
   165b4:	andeq	r6, r1, r4, lsr sp
   165b8:	andeq	r6, r1, ip, asr ip
   165bc:	andeq	r6, r1, r4, lsr sp
   165c0:	andeq	r6, r1, r4, lsr sp
   165c4:	andeq	r6, r1, r4, lsr sp
   165c8:	andeq	r6, r1, r4, lsr sp
   165cc:	andeq	r6, r1, r4, lsr sp
   165d0:	andeq	r6, r1, r4, lsr sp
   165d4:	andeq	r6, r1, r4, lsr sp
   165d8:	andeq	r6, r1, r4, lsr sp
   165dc:	andeq	r6, r1, r4, lsr sp
   165e0:	andeq	r6, r1, r4, lsr sp
   165e4:	andeq	r6, r1, r4, lsr sp
   165e8:	andeq	r6, r1, r4, lsr sp
   165ec:	andeq	r6, r1, r4, lsr sp
   165f0:	andeq	r6, r1, r4, lsr sp
   165f4:	andeq	r6, r1, r4, lsr sp
   165f8:	andeq	r6, r1, r4, lsr sp
   165fc:	andeq	r6, r1, r4, lsr sp
   16600:	andeq	r6, r1, r4, lsr sp
   16604:	andeq	r6, r1, r4, lsr sp
   16608:	andeq	r6, r1, r4, lsr sp
   1660c:	andeq	r6, r1, r4, lsr sp
   16610:	andeq	r6, r1, r4, lsr sp
   16614:	andeq	r6, r1, r4, lsr sp
   16618:	andeq	r6, r1, r4, lsr sp
   1661c:	andeq	r6, r1, r4, lsr sp
   16620:	andeq	r6, r1, r4, lsr sp
   16624:	andeq	r6, r1, r4, lsl #24
   16628:	andeq	r6, r1, ip, asr ip
   1662c:	andeq	r6, r1, r4, lsl #24
   16630:	andeq	r6, r1, r0, asr ip
   16634:	ldr	r3, [sp, #180]	; 0xb4
   16638:	cmp	r4, #0
   1663c:	and	r3, r3, #1
   16640:	str	r3, [sp, #92]	; 0x5c
   16644:	ldr	r3, [sp, #180]	; 0xb4
   16648:	and	r3, r3, #4
   1664c:	str	r3, [sp, #96]	; 0x60
   16650:	moveq	r3, #1
   16654:	streq	r3, [sp, #60]	; 0x3c
   16658:	beq	16de8 <__assert_fail@plt+0x5be4>
   1665c:	mov	r3, #0
   16660:	mov	r2, #1
   16664:	mov	r4, r3
   16668:	mov	r9, r3
   1666c:	str	r2, [sp, #32]
   16670:	str	r2, [sp, #44]	; 0x2c
   16674:	str	r3, [sp, #48]	; 0x30
   16678:	str	r2, [sp, #52]	; 0x34
   1667c:	str	r2, [sp, #56]	; 0x38
   16680:	str	r3, [sp, #60]	; 0x3c
   16684:	str	r2, [sp, #64]	; 0x40
   16688:	str	r2, [sp, #68]	; 0x44
   1668c:	str	r3, [sp, #80]	; 0x50
   16690:	str	r3, [sp, #84]	; 0x54
   16694:	str	r3, [sp, #88]	; 0x58
   16698:	movw	r3, #54780	; 0xd5fc
   1669c:	movt	r3, #1
   166a0:	str	r3, [sp, #72]	; 0x48
   166a4:	mov	r3, #2
   166a8:	str	r3, [sp, #176]	; 0xb0
   166ac:	b	16380 <__assert_fail@plt+0x517c>
   166b0:	ldr	r3, [sp, #180]	; 0xb4
   166b4:	cmp	r4, #0
   166b8:	and	r3, r3, #1
   166bc:	str	r3, [sp, #92]	; 0x5c
   166c0:	ldr	r3, [sp, #180]	; 0xb4
   166c4:	and	r3, r3, #4
   166c8:	str	r3, [sp, #96]	; 0x60
   166cc:	bne	17aa0 <__assert_fail@plt+0x689c>
   166d0:	cmp	sl, #0
   166d4:	beq	1784c <__assert_fail@plt+0x6648>
   166d8:	mov	r3, #34	; 0x22
   166dc:	mov	r2, r4
   166e0:	mov	r1, #1
   166e4:	mov	r9, r2
   166e8:	strb	r3, [fp]
   166ec:	movw	r3, #54760	; 0xd5e8
   166f0:	movt	r3, #1
   166f4:	mov	r4, r1
   166f8:	str	r1, [sp, #32]
   166fc:	str	r2, [sp, #44]	; 0x2c
   16700:	str	r1, [sp, #48]	; 0x30
   16704:	str	r2, [sp, #52]	; 0x34
   16708:	str	r1, [sp, #56]	; 0x38
   1670c:	str	r1, [sp, #60]	; 0x3c
   16710:	str	r2, [sp, #64]	; 0x40
   16714:	str	r2, [sp, #68]	; 0x44
   16718:	str	r3, [sp, #72]	; 0x48
   1671c:	str	r2, [sp, #80]	; 0x50
   16720:	str	r2, [sp, #84]	; 0x54
   16724:	str	r2, [sp, #88]	; 0x58
   16728:	b	16380 <__assert_fail@plt+0x517c>
   1672c:	mov	r3, #0
   16730:	mov	r2, #1
   16734:	mov	r9, r3
   16738:	str	r2, [sp, #32]
   1673c:	str	r3, [sp, #44]	; 0x2c
   16740:	str	r3, [sp, #48]	; 0x30
   16744:	str	r3, [sp, #52]	; 0x34
   16748:	str	r3, [sp, #60]	; 0x3c
   1674c:	strd	r2, [sp, #64]	; 0x40
   16750:	str	r3, [sp, #72]	; 0x48
   16754:	str	r3, [sp, #80]	; 0x50
   16758:	str	r3, [sp, #88]	; 0x58
   1675c:	ldr	r3, [sp, #180]	; 0xb4
   16760:	and	r3, r3, r2
   16764:	str	r3, [sp, #92]	; 0x5c
   16768:	ldr	r3, [sp, #180]	; 0xb4
   1676c:	and	r3, r3, #4
   16770:	str	r3, [sp, #96]	; 0x60
   16774:	ldr	r3, [sp, #176]	; 0xb0
   16778:	mov	r4, r3
   1677c:	str	r3, [sp, #56]	; 0x38
   16780:	str	r3, [sp, #84]	; 0x54
   16784:	b	16380 <__assert_fail@plt+0x517c>
   16788:	mov	r3, #1
   1678c:	mov	r4, #0
   16790:	mov	r9, r4
   16794:	str	r3, [sp, #32]
   16798:	str	r3, [sp, #44]	; 0x2c
   1679c:	str	r3, [sp, #48]	; 0x30
   167a0:	str	r4, [sp, #52]	; 0x34
   167a4:	str	r3, [sp, #56]	; 0x38
   167a8:	str	r3, [sp, #60]	; 0x3c
   167ac:	str	r3, [sp, #88]	; 0x58
   167b0:	movw	r3, #54760	; 0xd5e8
   167b4:	movt	r3, #1
   167b8:	str	r4, [sp, #64]	; 0x40
   167bc:	str	r4, [sp, #68]	; 0x44
   167c0:	str	r3, [sp, #72]	; 0x48
   167c4:	ldr	r3, [sp, #180]	; 0xb4
   167c8:	str	r4, [sp, #80]	; 0x50
   167cc:	str	r4, [sp, #84]	; 0x54
   167d0:	and	r3, r3, #1
   167d4:	str	r3, [sp, #92]	; 0x5c
   167d8:	ldr	r3, [sp, #180]	; 0xb4
   167dc:	and	r3, r3, #4
   167e0:	str	r3, [sp, #96]	; 0x60
   167e4:	mov	r3, #5
   167e8:	str	r3, [sp, #176]	; 0xb0
   167ec:	b	16380 <__assert_fail@plt+0x517c>
   167f0:	mov	r3, #1
   167f4:	mov	r4, #0
   167f8:	mov	r9, r4
   167fc:	str	r3, [sp, #32]
   16800:	str	r4, [sp, #44]	; 0x2c
   16804:	str	r3, [sp, #48]	; 0x30
   16808:	str	r3, [sp, #60]	; 0x3c
   1680c:	ldr	r3, [sp, #180]	; 0xb4
   16810:	str	r4, [sp, #52]	; 0x34
   16814:	str	r4, [sp, #56]	; 0x38
   16818:	str	r4, [sp, #64]	; 0x40
   1681c:	str	r4, [sp, #68]	; 0x44
   16820:	and	r3, r3, #1
   16824:	str	r4, [sp, #72]	; 0x48
   16828:	str	r4, [sp, #80]	; 0x50
   1682c:	str	r4, [sp, #84]	; 0x54
   16830:	str	r3, [sp, #92]	; 0x5c
   16834:	ldr	r3, [sp, #180]	; 0xb4
   16838:	str	r4, [sp, #88]	; 0x58
   1683c:	and	r3, r3, #4
   16840:	str	r3, [sp, #96]	; 0x60
   16844:	b	16380 <__assert_fail@plt+0x517c>
   16848:	mov	r3, #0
   1684c:	mov	r2, #1
   16850:	ldr	r1, [sp, #176]	; 0xb0
   16854:	mov	r4, r3
   16858:	mov	r9, r3
   1685c:	movw	r3, #54780	; 0xd5fc
   16860:	movt	r3, #1
   16864:	str	r2, [sp, #32]
   16868:	str	r2, [sp, #44]	; 0x2c
   1686c:	str	r4, [sp, #48]	; 0x30
   16870:	strd	r2, [sp, #68]	; 0x44
   16874:	ldr	r3, [sp, #180]	; 0xb4
   16878:	str	r2, [sp, #52]	; 0x34
   1687c:	str	r1, [sp, #56]	; 0x38
   16880:	str	r4, [sp, #60]	; 0x3c
   16884:	str	r2, [sp, #64]	; 0x40
   16888:	and	r3, r3, r2
   1688c:	str	r4, [sp, #80]	; 0x50
   16890:	str	r4, [sp, #84]	; 0x54
   16894:	str	r4, [sp, #88]	; 0x58
   16898:	str	r3, [sp, #92]	; 0x5c
   1689c:	ldr	r3, [sp, #180]	; 0xb4
   168a0:	and	r3, r3, #4
   168a4:	str	r3, [sp, #96]	; 0x60
   168a8:	mov	r3, #2
   168ac:	str	r3, [sp, #176]	; 0xb0
   168b0:	b	16380 <__assert_fail@plt+0x517c>
   168b4:	mov	r3, #1
   168b8:	mov	r2, #0
   168bc:	mov	r4, r2
   168c0:	mov	r9, r2
   168c4:	str	r3, [sp, #32]
   168c8:	str	r3, [sp, #44]	; 0x2c
   168cc:	str	r2, [sp, #48]	; 0x30
   168d0:	str	r3, [sp, #52]	; 0x34
   168d4:	str	r3, [sp, #56]	; 0x38
   168d8:	str	r3, [sp, #60]	; 0x3c
   168dc:	str	r3, [sp, #64]	; 0x40
   168e0:	str	r3, [sp, #68]	; 0x44
   168e4:	str	r3, [sp, #88]	; 0x58
   168e8:	movw	r3, #54780	; 0xd5fc
   168ec:	movt	r3, #1
   168f0:	str	r3, [sp, #72]	; 0x48
   168f4:	ldr	r3, [sp, #180]	; 0xb4
   168f8:	str	r2, [sp, #80]	; 0x50
   168fc:	str	r2, [sp, #84]	; 0x54
   16900:	and	r3, r3, #1
   16904:	b	16898 <__assert_fail@plt+0x5694>
   16908:	mov	r5, #102	; 0x66
   1690c:	mov	r6, #0
   16910:	ldr	r3, [sp, #44]	; 0x2c
   16914:	cmp	r3, #0
   16918:	bne	177c8 <__assert_fail@plt+0x65c4>
   1691c:	ldr	r2, [sp, #52]	; 0x34
   16920:	eor	r3, fp, #1
   16924:	ands	r3, r2, r3
   16928:	beq	16960 <__assert_fail@plt+0x575c>
   1692c:	cmp	sl, r4
   16930:	mov	fp, r3
   16934:	movhi	r2, #39	; 0x27
   16938:	strbhi	r2, [r9, r4]
   1693c:	add	r2, r4, #1
   16940:	cmp	sl, r2
   16944:	movhi	r1, #36	; 0x24
   16948:	strbhi	r1, [r9, r2]
   1694c:	add	r2, r4, #2
   16950:	add	r4, r4, #3
   16954:	cmp	sl, r2
   16958:	movhi	r1, #39	; 0x27
   1695c:	strbhi	r1, [r9, r2]
   16960:	cmp	sl, r4
   16964:	add	r7, r7, #1
   16968:	movhi	r3, #92	; 0x5c
   1696c:	strbhi	r3, [r9, r4]
   16970:	add	r4, r4, #1
   16974:	cmp	r4, sl
   16978:	ldr	r3, [sp, #32]
   1697c:	strbcc	r5, [r9, r4]
   16980:	cmp	r6, #0
   16984:	add	r4, r4, #1
   16988:	moveq	r3, #0
   1698c:	cmn	r8, #1
   16990:	str	r3, [sp, #32]
   16994:	bne	16398 <__assert_fail@plt+0x5194>
   16998:	ldr	r3, [sp, #28]
   1699c:	ldrb	r6, [r3, r7]
   169a0:	adds	r6, r6, #0
   169a4:	movne	r6, #1
   169a8:	cmp	r6, #0
   169ac:	bne	163a8 <__assert_fail@plt+0x51a4>
   169b0:	mov	r3, r9
   169b4:	mov	r9, fp
   169b8:	mov	fp, r3
   169bc:	ldr	r3, [sp, #68]	; 0x44
   169c0:	cmp	r4, #0
   169c4:	movne	r3, #0
   169c8:	cmp	r3, #0
   169cc:	bne	17bc0 <__assert_fail@plt+0x69bc>
   169d0:	ldr	r3, [sp, #44]	; 0x2c
   169d4:	ldr	r2, [sp, #52]	; 0x34
   169d8:	eor	r3, r3, #1
   169dc:	ands	r2, r3, r2
   169e0:	beq	17af8 <__assert_fail@plt+0x68f4>
   169e4:	ldr	r3, [sp, #80]	; 0x50
   169e8:	cmp	r3, #0
   169ec:	beq	17afc <__assert_fail@plt+0x68f8>
   169f0:	ldr	r3, [sp, #32]
   169f4:	cmp	r3, #0
   169f8:	bne	17b70 <__assert_fail@plt+0x696c>
   169fc:	ldr	r3, [sp, #84]	; 0x54
   16a00:	adds	r3, r3, #0
   16a04:	movne	r3, #1
   16a08:	cmp	sl, #0
   16a0c:	movne	r3, #0
   16a10:	cmp	r3, #0
   16a14:	ldreq	r2, [sp, #80]	; 0x50
   16a18:	beq	17afc <__assert_fail@plt+0x68f8>
   16a1c:	ldr	r2, [sp, #84]	; 0x54
   16a20:	mov	sl, r2
   16a24:	mov	r0, #0
   16a28:	mov	r4, #1
   16a2c:	mov	r1, #39	; 0x27
   16a30:	str	r0, [sp, #44]	; 0x2c
   16a34:	strb	r1, [fp]
   16a38:	str	r0, [sp, #48]	; 0x30
   16a3c:	str	r4, [sp, #52]	; 0x34
   16a40:	str	r4, [sp, #56]	; 0x38
   16a44:	str	r4, [sp, #64]	; 0x40
   16a48:	str	r0, [sp, #68]	; 0x44
   16a4c:	str	r3, [sp, #80]	; 0x50
   16a50:	str	r2, [sp, #84]	; 0x54
   16a54:	str	r0, [sp, #88]	; 0x58
   16a58:	b	16698 <__assert_fail@plt+0x5494>
   16a5c:	mov	r5, #98	; 0x62
   16a60:	b	1690c <__assert_fail@plt+0x5708>
   16a64:	mov	r5, #97	; 0x61
   16a68:	b	1690c <__assert_fail@plt+0x5708>
   16a6c:	ldr	r3, [sp, #48]	; 0x30
   16a70:	str	r3, [sp, #40]	; 0x28
   16a74:	mov	r3, #116	; 0x74
   16a78:	ldr	r2, [sp, #68]	; 0x44
   16a7c:	cmp	r2, #0
   16a80:	bne	16c7c <__assert_fail@plt+0x5a78>
   16a84:	ldr	r2, [sp, #60]	; 0x3c
   16a88:	cmp	r2, #0
   16a8c:	bne	16bd8 <__assert_fail@plt+0x59d4>
   16a90:	ldr	r3, [sp, #44]	; 0x2c
   16a94:	mov	r6, #0
   16a98:	cmp	r3, #0
   16a9c:	beq	16c48 <__assert_fail@plt+0x5a44>
   16aa0:	mov	r3, fp
   16aa4:	ldr	r2, [sp, #184]	; 0xb8
   16aa8:	cmp	r2, #0
   16aac:	beq	16acc <__assert_fail@plt+0x58c8>
   16ab0:	ubfx	r1, r5, #5, #8
   16ab4:	mov	r0, r2
   16ab8:	and	r2, r5, #31
   16abc:	ldr	r1, [r0, r1, lsl #2]
   16ac0:	lsr	r2, r1, r2
   16ac4:	tst	r2, #1
   16ac8:	bne	16910 <__assert_fail@plt+0x570c>
   16acc:	ldr	r2, [sp, #40]	; 0x28
   16ad0:	cmp	r2, #0
   16ad4:	addeq	r7, r7, #1
   16ad8:	bne	16910 <__assert_fail@plt+0x570c>
   16adc:	cmp	r3, #0
   16ae0:	beq	16974 <__assert_fail@plt+0x5770>
   16ae4:	cmp	sl, r4
   16ae8:	mov	fp, #0
   16aec:	movhi	r3, #39	; 0x27
   16af0:	strbhi	r3, [r9, r4]
   16af4:	add	r3, r4, #1
   16af8:	add	r4, r4, #2
   16afc:	cmp	sl, r3
   16b00:	movhi	r2, #39	; 0x27
   16b04:	strbhi	r2, [r9, r3]
   16b08:	b	16974 <__assert_fail@plt+0x5770>
   16b0c:	ldr	r3, [sp, #48]	; 0x30
   16b10:	str	r3, [sp, #40]	; 0x28
   16b14:	eor	r3, fp, #1
   16b18:	ldr	r2, [sp, #52]	; 0x34
   16b1c:	ands	r2, r2, r3
   16b20:	beq	177e0 <__assert_fail@plt+0x65dc>
   16b24:	cmp	sl, r4
   16b28:	movhi	r3, #39	; 0x27
   16b2c:	strbhi	r3, [r9, r4]
   16b30:	add	r3, r4, #1
   16b34:	cmp	sl, r3
   16b38:	movhi	r1, #36	; 0x24
   16b3c:	strbhi	r1, [r9, r3]
   16b40:	add	r3, r4, #2
   16b44:	cmp	sl, r3
   16b48:	movhi	r1, #39	; 0x27
   16b4c:	strbhi	r1, [r9, r3]
   16b50:	add	r3, r4, #3
   16b54:	cmp	sl, r3
   16b58:	bls	1782c <__assert_fail@plt+0x6628>
   16b5c:	mov	r4, r3
   16b60:	mov	r3, #92	; 0x5c
   16b64:	mov	fp, r2
   16b68:	mov	r2, r4
   16b6c:	strb	r3, [r9, r4]
   16b70:	ldr	r3, [sp, #176]	; 0xb0
   16b74:	add	r4, r4, #1
   16b78:	cmp	r3, #2
   16b7c:	beq	17894 <__assert_fail@plt+0x6690>
   16b80:	add	r3, r7, #1
   16b84:	cmp	r3, r8
   16b88:	bcs	16ba0 <__assert_fail@plt+0x599c>
   16b8c:	ldr	r1, [sp, #28]
   16b90:	ldrb	r3, [r1, r3]
   16b94:	sub	r3, r3, #48	; 0x30
   16b98:	cmp	r3, #9
   16b9c:	bls	178a4 <__assert_fail@plt+0x66a0>
   16ba0:	mov	r3, #0
   16ba4:	mov	r5, #48	; 0x30
   16ba8:	ldr	r6, [sp, #64]	; 0x40
   16bac:	cmp	r6, #0
   16bb0:	beq	16aa4 <__assert_fail@plt+0x58a0>
   16bb4:	mov	r6, #0
   16bb8:	b	16acc <__assert_fail@plt+0x58c8>
   16bbc:	ldr	r3, [sp, #48]	; 0x30
   16bc0:	str	r3, [sp, #40]	; 0x28
   16bc4:	ldr	r2, [sp, #60]	; 0x3c
   16bc8:	mov	r5, #13
   16bcc:	mov	r3, #114	; 0x72
   16bd0:	cmp	r2, #0
   16bd4:	beq	16a90 <__assert_fail@plt+0x588c>
   16bd8:	mov	r5, r3
   16bdc:	b	1690c <__assert_fail@plt+0x5708>
   16be0:	ldr	r3, [sp, #48]	; 0x30
   16be4:	str	r3, [sp, #40]	; 0x28
   16be8:	mov	r3, #118	; 0x76
   16bec:	b	16a84 <__assert_fail@plt+0x5880>
   16bf0:	ldr	r3, [sp, #48]	; 0x30
   16bf4:	str	r3, [sp, #40]	; 0x28
   16bf8:	mov	r5, #10
   16bfc:	mov	r3, #110	; 0x6e
   16c00:	b	16a84 <__assert_fail@plt+0x5880>
   16c04:	ldr	r3, [sp, #48]	; 0x30
   16c08:	cmn	r8, #1
   16c0c:	str	r3, [sp, #40]	; 0x28
   16c10:	beq	17058 <__assert_fail@plt+0x5e54>
   16c14:	subs	r3, r8, #1
   16c18:	movne	r3, #1
   16c1c:	cmp	r3, #0
   16c20:	bne	16c2c <__assert_fail@plt+0x5a28>
   16c24:	cmp	r7, #0
   16c28:	beq	16c70 <__assert_fail@plt+0x5a6c>
   16c2c:	mov	r6, #0
   16c30:	ldr	r3, [sp, #64]	; 0x40
   16c34:	cmp	r3, #0
   16c38:	beq	16aa0 <__assert_fail@plt+0x589c>
   16c3c:	ldr	r3, [sp, #44]	; 0x2c
   16c40:	cmp	r3, #0
   16c44:	bne	16aa0 <__assert_fail@plt+0x589c>
   16c48:	mov	r3, fp
   16c4c:	b	16acc <__assert_fail@plt+0x58c8>
   16c50:	ldr	r3, [sp, #48]	; 0x30
   16c54:	str	r3, [sp, #40]	; 0x28
   16c58:	b	16c24 <__assert_fail@plt+0x5a20>
   16c5c:	ldr	r3, [sp, #48]	; 0x30
   16c60:	str	r3, [sp, #40]	; 0x28
   16c64:	b	16c2c <__assert_fail@plt+0x5a28>
   16c68:	ldr	r6, [sp, #48]	; 0x30
   16c6c:	str	r6, [sp, #40]	; 0x28
   16c70:	ldr	r3, [sp, #68]	; 0x44
   16c74:	cmp	r3, #0
   16c78:	beq	16c30 <__assert_fail@plt+0x5a2c>
   16c7c:	mov	r3, #2
   16c80:	mov	fp, r9
   16c84:	str	r3, [sp, #176]	; 0xb0
   16c88:	ldr	r3, [sp, #60]	; 0x3c
   16c8c:	cmp	r3, #0
   16c90:	ldr	r3, [sp, #176]	; 0xb0
   16c94:	movne	r3, #4
   16c98:	str	r3, [sp, #176]	; 0xb0
   16c9c:	mov	lr, #0
   16ca0:	mov	r0, fp
   16ca4:	ldr	r2, [sp, #28]
   16ca8:	ldr	r3, [sp, #180]	; 0xb4
   16cac:	ldr	r1, [sp, #188]	; 0xbc
   16cb0:	bic	ip, r3, #2
   16cb4:	ldr	r3, [sp, #176]	; 0xb0
   16cb8:	stm	sp, {r3, ip, lr}
   16cbc:	mov	r3, r8
   16cc0:	ldr	ip, [sp, #192]	; 0xc0
   16cc4:	str	r1, [sp, #12]
   16cc8:	mov	r1, sl
   16ccc:	str	ip, [sp, #16]
   16cd0:	bl	1625c <__assert_fail@plt+0x5058>
   16cd4:	mov	r4, r0
   16cd8:	mov	r0, r4
   16cdc:	add	sp, sp, #140	; 0x8c
   16ce0:	ldrd	r4, [sp]
   16ce4:	ldrd	r6, [sp, #8]
   16ce8:	ldrd	r8, [sp, #16]
   16cec:	ldrd	sl, [sp, #24]
   16cf0:	add	sp, sp, #32
   16cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf8:	ldr	r3, [sp, #48]	; 0x30
   16cfc:	str	r3, [sp, #40]	; 0x28
   16d00:	ldr	r3, [sp, #176]	; 0xb0
   16d04:	cmp	r3, #2
   16d08:	beq	17080 <__assert_fail@plt+0x5e7c>
   16d0c:	ldr	r3, [sp, #88]	; 0x58
   16d10:	cmp	r3, #0
   16d14:	moveq	r5, #92	; 0x5c
   16d18:	moveq	r3, r5
   16d1c:	beq	16a84 <__assert_fail@plt+0x5880>
   16d20:	add	r7, r7, #1
   16d24:	mov	r3, fp
   16d28:	mov	r6, #0
   16d2c:	mov	r5, #92	; 0x5c
   16d30:	b	16adc <__assert_fail@plt+0x58d8>
   16d34:	ldr	r3, [sp, #64]	; 0x40
   16d38:	cmp	r3, #0
   16d3c:	bne	17bb4 <__assert_fail@plt+0x69b0>
   16d40:	ldr	r2, [sp, #48]	; 0x30
   16d44:	mov	r3, fp
   16d48:	mov	r6, r2
   16d4c:	str	r2, [sp, #40]	; 0x28
   16d50:	b	16aa4 <__assert_fail@plt+0x58a0>
   16d54:	ldr	r3, [sp, #176]	; 0xb0
   16d58:	cmp	r3, #2
   16d5c:	beq	17af0 <__assert_fail@plt+0x68ec>
   16d60:	cmp	r3, #5
   16d64:	ldr	r3, [sp, #48]	; 0x30
   16d68:	str	r3, [sp, #40]	; 0x28
   16d6c:	bne	16d98 <__assert_fail@plt+0x5b94>
   16d70:	ldr	r3, [sp, #96]	; 0x60
   16d74:	cmp	r3, #0
   16d78:	beq	177f4 <__assert_fail@plt+0x65f0>
   16d7c:	add	r3, r7, #2
   16d80:	cmp	r3, r8
   16d84:	bcs	16d98 <__assert_fail@plt+0x5b94>
   16d88:	ldr	r2, [sp, #36]	; 0x24
   16d8c:	ldrb	r5, [r2, #1]
   16d90:	cmp	r5, #63	; 0x3f
   16d94:	beq	178dc <__assert_fail@plt+0x66d8>
   16d98:	mov	r6, #0
   16d9c:	mov	r5, #63	; 0x3f
   16da0:	b	16c30 <__assert_fail@plt+0x5a2c>
   16da4:	ldr	r3, [sp, #176]	; 0xb0
   16da8:	cmp	r3, #2
   16dac:	ldr	r3, [sp, #48]	; 0x30
   16db0:	beq	17598 <__assert_fail@plt+0x6394>
   16db4:	mov	r5, #39	; 0x27
   16db8:	str	r3, [sp, #40]	; 0x28
   16dbc:	str	r6, [sp, #80]	; 0x50
   16dc0:	b	16c30 <__assert_fail@plt+0x5a2c>
   16dc4:	ldr	r3, [sp, #180]	; 0xb4
   16dc8:	cmp	r4, #0
   16dcc:	and	r3, r3, #1
   16dd0:	str	r3, [sp, #92]	; 0x5c
   16dd4:	ldr	r3, [sp, #180]	; 0xb4
   16dd8:	and	r3, r3, #4
   16ddc:	str	r3, [sp, #96]	; 0x60
   16de0:	bne	17c00 <__assert_fail@plt+0x69fc>
   16de4:	str	r4, [sp, #60]	; 0x3c
   16de8:	cmp	sl, #0
   16dec:	bne	17be4 <__assert_fail@plt+0x69e0>
   16df0:	mov	r3, #1
   16df4:	movw	r2, #54780	; 0xd5fc
   16df8:	movt	r2, #1
   16dfc:	mov	r4, r3
   16e00:	mov	r3, #2
   16e04:	mov	r9, sl
   16e08:	str	r4, [sp, #32]
   16e0c:	str	sl, [sp, #44]	; 0x2c
   16e10:	str	sl, [sp, #48]	; 0x30
   16e14:	str	r4, [sp, #52]	; 0x34
   16e18:	str	r4, [sp, #56]	; 0x38
   16e1c:	str	r4, [sp, #64]	; 0x40
   16e20:	str	sl, [sp, #68]	; 0x44
   16e24:	str	r2, [sp, #72]	; 0x48
   16e28:	str	sl, [sp, #80]	; 0x50
   16e2c:	str	sl, [sp, #84]	; 0x54
   16e30:	str	sl, [sp, #88]	; 0x58
   16e34:	str	r3, [sp, #176]	; 0xb0
   16e38:	b	16380 <__assert_fail@plt+0x517c>
   16e3c:	ldrb	r5, [r0, r7]
   16e40:	cmp	r5, #126	; 0x7e
   16e44:	ldrls	pc, [pc, r5, lsl #2]
   16e48:	b	171ac <__assert_fail@plt+0x5fa8>
   16e4c:	andeq	r7, r1, r8, ror r1
   16e50:	andeq	r7, r1, ip, lsr #3
   16e54:	andeq	r7, r1, ip, lsr #3
   16e58:	andeq	r7, r1, ip, lsr #3
   16e5c:	andeq	r7, r1, ip, lsr #3
   16e60:	andeq	r7, r1, ip, lsr #3
   16e64:	andeq	r7, r1, ip, lsr #3
   16e68:	andeq	r7, r1, r8, ror #2
   16e6c:	andeq	r7, r1, r8, asr r1
   16e70:	ldrdeq	r7, [r1], -ip
   16e74:	andeq	r7, r1, r8, asr #2
   16e78:	strheq	r7, [r1], -ip
   16e7c:	muleq	r1, ip, r1
   16e80:	andeq	r7, r1, r8, lsr #2
   16e84:	andeq	r7, r1, ip, lsr #3
   16e88:	andeq	r7, r1, ip, lsr #3
   16e8c:	andeq	r7, r1, ip, lsr #3
   16e90:	andeq	r7, r1, ip, lsr #3
   16e94:	andeq	r7, r1, ip, lsr #3
   16e98:	andeq	r7, r1, ip, lsr #3
   16e9c:	andeq	r7, r1, ip, lsr #3
   16ea0:	andeq	r7, r1, ip, lsr #3
   16ea4:	andeq	r7, r1, ip, lsr #3
   16ea8:	andeq	r7, r1, ip, lsr #3
   16eac:	andeq	r7, r1, ip, lsr #3
   16eb0:	andeq	r7, r1, ip, lsr #3
   16eb4:	andeq	r7, r1, ip, lsr #3
   16eb8:	andeq	r7, r1, ip, lsr #3
   16ebc:	andeq	r7, r1, ip, lsr #3
   16ec0:	andeq	r7, r1, ip, lsr #3
   16ec4:	andeq	r7, r1, ip, lsr #3
   16ec8:	andeq	r7, r1, ip, lsr #3
   16ecc:	ldrdeq	r7, [r1], -r0
   16ed0:	andeq	r7, r1, r8, lsr r1
   16ed4:	andeq	r7, r1, r8, lsr r1
   16ed8:	strheq	r7, [r1], -r0
   16edc:	andeq	r7, r1, r8, lsr r1
   16ee0:	andeq	r7, r1, r4, lsr #1
   16ee4:	andeq	r7, r1, r8, lsr r1
   16ee8:	andeq	r7, r1, r4, lsl r1
   16eec:	andeq	r7, r1, r8, lsr r1
   16ef0:	andeq	r7, r1, r8, lsr r1
   16ef4:	andeq	r7, r1, r8, lsr r1
   16ef8:	andeq	r7, r1, r4, lsr #1
   16efc:	andeq	r7, r1, r4, lsr #1
   16f00:	andeq	r7, r1, r4, lsr #1
   16f04:	andeq	r7, r1, r4, lsr #1
   16f08:	andeq	r7, r1, r4, lsr #1
   16f0c:	andeq	r7, r1, r4, lsr #1
   16f10:	andeq	r7, r1, r4, lsr #1
   16f14:	andeq	r7, r1, r4, lsr #1
   16f18:	andeq	r7, r1, r4, lsr #1
   16f1c:	andeq	r7, r1, r4, lsr #1
   16f20:	andeq	r7, r1, r4, lsr #1
   16f24:	andeq	r7, r1, r4, lsr #1
   16f28:	andeq	r7, r1, r4, lsr #1
   16f2c:	andeq	r7, r1, r4, lsr #1
   16f30:	andeq	r7, r1, r4, lsr #1
   16f34:	andeq	r7, r1, r4, lsr #1
   16f38:	andeq	r7, r1, r8, lsr r1
   16f3c:	andeq	r7, r1, r8, lsr r1
   16f40:	andeq	r7, r1, r8, lsr r1
   16f44:	andeq	r7, r1, r8, lsr r1
   16f48:	andeq	r7, r1, ip, ror #1
   16f4c:	andeq	r7, r1, ip, lsr #3
   16f50:	andeq	r7, r1, r4, lsr #1
   16f54:	andeq	r7, r1, r4, lsr #1
   16f58:	andeq	r7, r1, r4, lsr #1
   16f5c:	andeq	r7, r1, r4, lsr #1
   16f60:	andeq	r7, r1, r4, lsr #1
   16f64:	andeq	r7, r1, r4, lsr #1
   16f68:	andeq	r7, r1, r4, lsr #1
   16f6c:	andeq	r7, r1, r4, lsr #1
   16f70:	andeq	r7, r1, r4, lsr #1
   16f74:	andeq	r7, r1, r4, lsr #1
   16f78:	andeq	r7, r1, r4, lsr #1
   16f7c:	andeq	r7, r1, r4, lsr #1
   16f80:	andeq	r7, r1, r4, lsr #1
   16f84:	andeq	r7, r1, r4, lsr #1
   16f88:	andeq	r7, r1, r4, lsr #1
   16f8c:	andeq	r7, r1, r4, lsr #1
   16f90:	andeq	r7, r1, r4, lsr #1
   16f94:	andeq	r7, r1, r4, lsr #1
   16f98:	andeq	r7, r1, r4, lsr #1
   16f9c:	andeq	r7, r1, r4, lsr #1
   16fa0:	andeq	r7, r1, r4, lsr #1
   16fa4:	andeq	r7, r1, r4, lsr #1
   16fa8:	andeq	r7, r1, r4, lsr #1
   16fac:	andeq	r7, r1, r4, lsr #1
   16fb0:	andeq	r7, r1, r4, lsr #1
   16fb4:	andeq	r7, r1, r4, lsr #1
   16fb8:	andeq	r7, r1, r8, lsr r1
   16fbc:	andeq	r7, r1, ip, rrx
   16fc0:	andeq	r7, r1, r4, lsr #1
   16fc4:	andeq	r7, r1, r8, lsr r1
   16fc8:	andeq	r7, r1, r4, lsr #1
   16fcc:	andeq	r7, r1, r8, lsr r1
   16fd0:	andeq	r7, r1, r4, lsr #1
   16fd4:	andeq	r7, r1, r4, lsr #1
   16fd8:	andeq	r7, r1, r4, lsr #1
   16fdc:	andeq	r7, r1, r4, lsr #1
   16fe0:	andeq	r7, r1, r4, lsr #1
   16fe4:	andeq	r7, r1, r4, lsr #1
   16fe8:	andeq	r7, r1, r4, lsr #1
   16fec:	andeq	r7, r1, r4, lsr #1
   16ff0:	andeq	r7, r1, r4, lsr #1
   16ff4:	andeq	r7, r1, r4, lsr #1
   16ff8:	andeq	r7, r1, r4, lsr #1
   16ffc:	andeq	r7, r1, r4, lsr #1
   17000:	andeq	r7, r1, r4, lsr #1
   17004:	andeq	r7, r1, r4, lsr #1
   17008:	andeq	r7, r1, r4, lsr #1
   1700c:	andeq	r7, r1, r4, lsr #1
   17010:	andeq	r7, r1, r4, lsr #1
   17014:	andeq	r7, r1, r4, lsr #1
   17018:	andeq	r7, r1, r4, lsr #1
   1701c:	andeq	r7, r1, r4, lsr #1
   17020:	andeq	r7, r1, r4, lsr #1
   17024:	andeq	r7, r1, r4, lsr #1
   17028:	andeq	r7, r1, r4, lsr #1
   1702c:	andeq	r7, r1, r4, lsr #1
   17030:	andeq	r7, r1, r4, lsr #1
   17034:	andeq	r7, r1, r4, lsr #1
   17038:	andeq	r7, r1, r8, asr #32
   1703c:	andeq	r7, r1, r8, lsr r1
   17040:	andeq	r7, r1, r8, asr #32
   17044:	strheq	r7, [r1], -r0
   17048:	mov	r3, #0
   1704c:	cmn	r8, #1
   17050:	str	r3, [sp, #40]	; 0x28
   17054:	bne	16c14 <__assert_fail@plt+0x5a10>
   17058:	ldr	r3, [sp, #28]
   1705c:	ldrb	r3, [r3, #1]
   17060:	adds	r3, r3, #0
   17064:	movne	r3, #1
   17068:	b	16c1c <__assert_fail@plt+0x5a18>
   1706c:	mov	r3, #0
   17070:	str	r3, [sp, #40]	; 0x28
   17074:	ldr	r3, [sp, #176]	; 0xb0
   17078:	cmp	r3, #2
   1707c:	bne	16d0c <__assert_fail@plt+0x5b08>
   17080:	ldr	r3, [sp, #44]	; 0x2c
   17084:	cmp	r3, #0
   17088:	bne	179c8 <__assert_fail@plt+0x67c4>
   1708c:	mov	r6, r3
   17090:	add	r7, r7, #1
   17094:	mov	r3, fp
   17098:	mov	r5, #92	; 0x5c
   1709c:	b	16adc <__assert_fail@plt+0x58d8>
   170a0:	ldr	r6, [sp, #48]	; 0x30
   170a4:	mov	r3, #0
   170a8:	str	r3, [sp, #40]	; 0x28
   170ac:	b	16c30 <__assert_fail@plt+0x5a2c>
   170b0:	mov	r3, #0
   170b4:	str	r3, [sp, #40]	; 0x28
   170b8:	b	16c24 <__assert_fail@plt+0x5a20>
   170bc:	mov	r3, #0
   170c0:	str	r3, [sp, #40]	; 0x28
   170c4:	mov	r3, #118	; 0x76
   170c8:	b	16a84 <__assert_fail@plt+0x5880>
   170cc:	ldr	r6, [sp, #48]	; 0x30
   170d0:	mov	r3, #0
   170d4:	str	r3, [sp, #40]	; 0x28
   170d8:	b	16c70 <__assert_fail@plt+0x5a6c>
   170dc:	mov	r3, #0
   170e0:	str	r3, [sp, #40]	; 0x28
   170e4:	mov	r3, #116	; 0x74
   170e8:	b	16a78 <__assert_fail@plt+0x5874>
   170ec:	ldr	r3, [sp, #176]	; 0xb0
   170f0:	cmp	r3, #2
   170f4:	beq	17604 <__assert_fail@plt+0x6400>
   170f8:	cmp	r3, #5
   170fc:	mov	r3, #0
   17100:	str	r3, [sp, #40]	; 0x28
   17104:	beq	16d70 <__assert_fail@plt+0x5b6c>
   17108:	mov	r6, #0
   1710c:	mov	r5, #63	; 0x3f
   17110:	b	16c30 <__assert_fail@plt+0x5a2c>
   17114:	ldr	r3, [sp, #176]	; 0xb0
   17118:	cmp	r3, #2
   1711c:	beq	1758c <__assert_fail@plt+0x6388>
   17120:	mov	r3, #0
   17124:	b	16db4 <__assert_fail@plt+0x5bb0>
   17128:	mov	r3, #0
   1712c:	str	r3, [sp, #40]	; 0x28
   17130:	mov	r3, #114	; 0x72
   17134:	b	16a78 <__assert_fail@plt+0x5874>
   17138:	mov	r3, #0
   1713c:	mov	r6, r3
   17140:	str	r3, [sp, #40]	; 0x28
   17144:	b	16c70 <__assert_fail@plt+0x5a6c>
   17148:	mov	r3, #0
   1714c:	str	r3, [sp, #40]	; 0x28
   17150:	mov	r3, #110	; 0x6e
   17154:	b	16a78 <__assert_fail@plt+0x5874>
   17158:	mov	r3, #0
   1715c:	str	r3, [sp, #40]	; 0x28
   17160:	mov	r3, #98	; 0x62
   17164:	b	16a84 <__assert_fail@plt+0x5880>
   17168:	mov	r3, #0
   1716c:	str	r3, [sp, #40]	; 0x28
   17170:	mov	r3, #97	; 0x61
   17174:	b	16a84 <__assert_fail@plt+0x5880>
   17178:	ldr	r3, [sp, #60]	; 0x3c
   1717c:	cmp	r3, #0
   17180:	bne	17570 <__assert_fail@plt+0x636c>
   17184:	ldr	r3, [sp, #92]	; 0x5c
   17188:	cmp	r3, #0
   1718c:	addne	r7, r7, #1
   17190:	bne	16390 <__assert_fail@plt+0x518c>
   17194:	str	r3, [sp, #40]	; 0x28
   17198:	b	16a90 <__assert_fail@plt+0x588c>
   1719c:	mov	r3, #0
   171a0:	str	r3, [sp, #40]	; 0x28
   171a4:	mov	r3, #102	; 0x66
   171a8:	b	16a84 <__assert_fail@plt+0x5880>
   171ac:	mov	r3, #0
   171b0:	str	r3, [sp, #40]	; 0x28
   171b4:	ldr	r3, [sp, #76]	; 0x4c
   171b8:	cmp	r3, #1
   171bc:	bne	17624 <__assert_fail@plt+0x6420>
   171c0:	bl	110a8 <__ctype_b_loc@plt>
   171c4:	ldr	r2, [r0]
   171c8:	sxth	r3, r5
   171cc:	lsl	r3, r3, #1
   171d0:	ldr	r1, [sp, #76]	; 0x4c
   171d4:	ldrh	r3, [r2, r3]
   171d8:	mov	r0, r1
   171dc:	and	r3, r3, #16384	; 0x4000
   171e0:	cmp	r3, #0
   171e4:	ldr	r3, [sp, #60]	; 0x3c
   171e8:	movne	r6, #1
   171ec:	moveq	r6, #0
   171f0:	movne	r2, #0
   171f4:	andeq	r2, r3, #1
   171f8:	cmp	r2, #0
   171fc:	beq	16c30 <__assert_fail@plt+0x5a2c>
   17200:	ldr	r2, [sp, #60]	; 0x3c
   17204:	mov	r6, #0
   17208:	add	r1, r0, r7
   1720c:	mov	ip, #39	; 0x27
   17210:	str	r6, [sp, #100]	; 0x64
   17214:	mov	r0, #0
   17218:	ldr	lr, [sp, #36]	; 0x24
   1721c:	str	r8, [sp, #36]	; 0x24
   17220:	ldr	r6, [sp, #40]	; 0x28
   17224:	ldr	r8, [sp, #44]	; 0x2c
   17228:	b	172d8 <__assert_fail@plt+0x60d4>
   1722c:	cmp	r8, #0
   17230:	bne	1780c <__assert_fail@plt+0x6608>
   17234:	ldr	r0, [sp, #52]	; 0x34
   17238:	eor	r3, fp, #1
   1723c:	ands	r3, r0, r3
   17240:	beq	17270 <__assert_fail@plt+0x606c>
   17244:	cmp	sl, r4
   17248:	add	r0, r4, #1
   1724c:	strbhi	ip, [r9, r4]
   17250:	cmp	sl, r0
   17254:	movhi	fp, #36	; 0x24
   17258:	strbhi	fp, [r9, r0]
   1725c:	add	r0, r4, #2
   17260:	mov	fp, r3
   17264:	cmp	sl, r0
   17268:	add	r4, r4, #3
   1726c:	strbhi	ip, [r9, r0]
   17270:	cmp	sl, r4
   17274:	movhi	r3, #92	; 0x5c
   17278:	strbhi	r3, [r9, r4]
   1727c:	add	r3, r4, #1
   17280:	cmp	sl, r3
   17284:	bls	17294 <__assert_fail@plt+0x6090>
   17288:	lsr	r0, r5, #6
   1728c:	add	r0, r0, #48	; 0x30
   17290:	strb	r0, [r9, r3]
   17294:	add	r3, r4, #2
   17298:	cmp	sl, r3
   1729c:	bls	172ac <__assert_fail@plt+0x60a8>
   172a0:	ubfx	r0, r5, #3, #3
   172a4:	add	r0, r0, #48	; 0x30
   172a8:	strb	r0, [r9, r3]
   172ac:	add	r7, r7, #1
   172b0:	and	r5, r5, #7
   172b4:	cmp	r1, r7
   172b8:	add	r5, r5, #48	; 0x30
   172bc:	add	r4, r4, #3
   172c0:	bls	17820 <__assert_fail@plt+0x661c>
   172c4:	mov	r0, r2
   172c8:	cmp	sl, r4
   172cc:	strbhi	r5, [r9, r4]
   172d0:	add	r4, r4, #1
   172d4:	ldrb	r5, [lr, #1]!
   172d8:	cmp	r2, #0
   172dc:	bne	1722c <__assert_fail@plt+0x6028>
   172e0:	eor	r3, r0, #1
   172e4:	cmp	r6, #0
   172e8:	and	r3, r3, fp
   172ec:	uxtb	r3, r3
   172f0:	beq	17304 <__assert_fail@plt+0x6100>
   172f4:	cmp	sl, r4
   172f8:	movhi	r6, #92	; 0x5c
   172fc:	strbhi	r6, [r9, r4]
   17300:	add	r4, r4, #1
   17304:	add	r7, r7, #1
   17308:	cmp	r7, r1
   1730c:	bcs	17800 <__assert_fail@plt+0x65fc>
   17310:	cmp	r3, #0
   17314:	beq	17844 <__assert_fail@plt+0x6640>
   17318:	cmp	sl, r4
   1731c:	add	r3, r4, #1
   17320:	mov	r6, #0
   17324:	strbhi	ip, [r9, r4]
   17328:	cmp	sl, r3
   1732c:	add	r4, r4, #2
   17330:	mov	fp, r6
   17334:	strbhi	ip, [r9, r3]
   17338:	b	172c8 <__assert_fail@plt+0x60c4>
   1733c:	ldr	r3, [sp, #36]	; 0x24
   17340:	ldrb	r5, [r3]
   17344:	cmp	r5, #126	; 0x7e
   17348:	ldrls	pc, [pc, r5, lsl #2]
   1734c:	b	171ac <__assert_fail@plt+0x5fa8>
   17350:	andeq	r7, r1, r0, ror r5
   17354:	andeq	r7, r1, ip, lsr #3
   17358:	andeq	r7, r1, ip, lsr #3
   1735c:	andeq	r7, r1, ip, lsr #3
   17360:	andeq	r7, r1, ip, lsr #3
   17364:	andeq	r7, r1, ip, lsr #3
   17368:	andeq	r7, r1, ip, lsr #3
   1736c:	andeq	r6, r1, r4, ror #20
   17370:	andeq	r6, r1, ip, asr sl
   17374:	ldrdeq	r7, [r1], -ip
   17378:	andeq	r7, r1, r4, ror #10
   1737c:	strheq	r7, [r1], -ip
   17380:	andeq	r6, r1, r8, lsl #18
   17384:	andeq	r7, r1, r8, asr r5
   17388:	andeq	r7, r1, ip, lsr #3
   1738c:	andeq	r7, r1, ip, lsr #3
   17390:	andeq	r7, r1, ip, lsr #3
   17394:	andeq	r7, r1, ip, lsr #3
   17398:	andeq	r7, r1, ip, lsr #3
   1739c:	andeq	r7, r1, ip, lsr #3
   173a0:	andeq	r7, r1, ip, lsr #3
   173a4:	andeq	r7, r1, ip, lsr #3
   173a8:	andeq	r7, r1, ip, lsr #3
   173ac:	andeq	r7, r1, ip, lsr #3
   173b0:	andeq	r7, r1, ip, lsr #3
   173b4:	andeq	r7, r1, ip, lsr #3
   173b8:	andeq	r7, r1, ip, lsr #3
   173bc:	andeq	r7, r1, ip, lsr #3
   173c0:	andeq	r7, r1, ip, lsr #3
   173c4:	andeq	r7, r1, ip, lsr #3
   173c8:	andeq	r7, r1, ip, lsr #3
   173cc:	andeq	r7, r1, ip, lsr #3
   173d0:	andeq	r7, r1, ip, asr #1
   173d4:	andeq	r7, r1, ip, asr #10
   173d8:	andeq	r7, r1, ip, asr #10
   173dc:	strheq	r7, [r1], -r0
   173e0:	andeq	r7, r1, ip, asr #10
   173e4:	andeq	r7, r1, r0, lsr #1
   173e8:	andeq	r7, r1, ip, asr #10
   173ec:	andeq	r7, r1, r4, lsl r1
   173f0:	andeq	r7, r1, ip, asr #10
   173f4:	andeq	r7, r1, ip, asr #10
   173f8:	andeq	r7, r1, ip, asr #10
   173fc:	andeq	r7, r1, r0, lsr #1
   17400:	andeq	r7, r1, r0, lsr #1
   17404:	andeq	r7, r1, r0, lsr #1
   17408:	andeq	r7, r1, r0, lsr #1
   1740c:	andeq	r7, r1, r0, lsr #1
   17410:	andeq	r7, r1, r0, lsr #1
   17414:	andeq	r7, r1, r0, lsr #1
   17418:	andeq	r7, r1, r0, lsr #1
   1741c:	andeq	r7, r1, r0, lsr #1
   17420:	andeq	r7, r1, r0, lsr #1
   17424:	andeq	r7, r1, r0, lsr #1
   17428:	andeq	r7, r1, r0, lsr #1
   1742c:	andeq	r7, r1, r0, lsr #1
   17430:	andeq	r7, r1, r0, lsr #1
   17434:	andeq	r7, r1, r0, lsr #1
   17438:	andeq	r7, r1, r0, lsr #1
   1743c:	andeq	r7, r1, ip, asr #10
   17440:	andeq	r7, r1, ip, asr #10
   17444:	andeq	r7, r1, ip, asr #10
   17448:	andeq	r7, r1, ip, asr #10
   1744c:	andeq	r7, r1, ip, ror #1
   17450:	andeq	r7, r1, ip, lsr #3
   17454:	andeq	r7, r1, r0, lsr #1
   17458:	andeq	r7, r1, r0, lsr #1
   1745c:	andeq	r7, r1, r0, lsr #1
   17460:	andeq	r7, r1, r0, lsr #1
   17464:	andeq	r7, r1, r0, lsr #1
   17468:	andeq	r7, r1, r0, lsr #1
   1746c:	andeq	r7, r1, r0, lsr #1
   17470:	andeq	r7, r1, r0, lsr #1
   17474:	andeq	r7, r1, r0, lsr #1
   17478:	andeq	r7, r1, r0, lsr #1
   1747c:	andeq	r7, r1, r0, lsr #1
   17480:	andeq	r7, r1, r0, lsr #1
   17484:	andeq	r7, r1, r0, lsr #1
   17488:	andeq	r7, r1, r0, lsr #1
   1748c:	andeq	r7, r1, r0, lsr #1
   17490:	andeq	r7, r1, r0, lsr #1
   17494:	andeq	r7, r1, r0, lsr #1
   17498:	andeq	r7, r1, r0, lsr #1
   1749c:	andeq	r7, r1, r0, lsr #1
   174a0:	andeq	r7, r1, r0, lsr #1
   174a4:	andeq	r7, r1, r0, lsr #1
   174a8:	andeq	r7, r1, r0, lsr #1
   174ac:	andeq	r7, r1, r0, lsr #1
   174b0:	andeq	r7, r1, r0, lsr #1
   174b4:	andeq	r7, r1, r0, lsr #1
   174b8:	andeq	r7, r1, r0, lsr #1
   174bc:	andeq	r7, r1, ip, asr #10
   174c0:	andeq	r7, r1, ip, rrx
   174c4:	andeq	r7, r1, r0, lsr #1
   174c8:	andeq	r7, r1, ip, asr #10
   174cc:	andeq	r7, r1, r0, lsr #1
   174d0:	andeq	r7, r1, ip, asr #10
   174d4:	andeq	r7, r1, r0, lsr #1
   174d8:	andeq	r7, r1, r0, lsr #1
   174dc:	andeq	r7, r1, r0, lsr #1
   174e0:	andeq	r7, r1, r0, lsr #1
   174e4:	andeq	r7, r1, r0, lsr #1
   174e8:	andeq	r7, r1, r0, lsr #1
   174ec:	andeq	r7, r1, r0, lsr #1
   174f0:	andeq	r7, r1, r0, lsr #1
   174f4:	andeq	r7, r1, r0, lsr #1
   174f8:	andeq	r7, r1, r0, lsr #1
   174fc:	andeq	r7, r1, r0, lsr #1
   17500:	andeq	r7, r1, r0, lsr #1
   17504:	andeq	r7, r1, r0, lsr #1
   17508:	andeq	r7, r1, r0, lsr #1
   1750c:	andeq	r7, r1, r0, lsr #1
   17510:	andeq	r7, r1, r0, lsr #1
   17514:	andeq	r7, r1, r0, lsr #1
   17518:	andeq	r7, r1, r0, lsr #1
   1751c:	andeq	r7, r1, r0, lsr #1
   17520:	andeq	r7, r1, r0, lsr #1
   17524:	andeq	r7, r1, r0, lsr #1
   17528:	andeq	r7, r1, r0, lsr #1
   1752c:	andeq	r7, r1, r0, lsr #1
   17530:	andeq	r7, r1, r0, lsr #1
   17534:	andeq	r7, r1, r0, lsr #1
   17538:	andeq	r7, r1, r0, lsr #1
   1753c:	andeq	r7, r1, r8, asr #32
   17540:	andeq	r7, r1, ip, asr #10
   17544:	andeq	r7, r1, r8, asr #32
   17548:	strheq	r7, [r1], -r0
   1754c:	mov	r3, #0
   17550:	str	r3, [sp, #40]	; 0x28
   17554:	b	16c2c <__assert_fail@plt+0x5a28>
   17558:	mov	r3, #0
   1755c:	str	r3, [sp, #40]	; 0x28
   17560:	b	16bc4 <__assert_fail@plt+0x59c0>
   17564:	mov	r3, #0
   17568:	str	r3, [sp, #40]	; 0x28
   1756c:	b	16bf8 <__assert_fail@plt+0x59f4>
   17570:	ldr	r3, [sp, #44]	; 0x2c
   17574:	cmp	r3, #0
   17578:	beq	16b10 <__assert_fail@plt+0x590c>
   1757c:	ldr	r3, [sp, #52]	; 0x34
   17580:	mov	fp, r9
   17584:	str	r3, [sp, #60]	; 0x3c
   17588:	b	16c88 <__assert_fail@plt+0x5a84>
   1758c:	ldr	r3, [sp, #44]	; 0x2c
   17590:	cmp	r3, #0
   17594:	bne	179c8 <__assert_fail@plt+0x67c4>
   17598:	str	r3, [sp, #40]	; 0x28
   1759c:	cmp	sl, #0
   175a0:	ldr	r3, [sp, #84]	; 0x54
   175a4:	clz	r3, r3
   175a8:	lsr	r3, r3, #5
   175ac:	moveq	r3, #0
   175b0:	cmp	r3, #0
   175b4:	strne	sl, [sp, #84]	; 0x54
   175b8:	movne	sl, #0
   175bc:	bne	175ec <__assert_fail@plt+0x63e8>
   175c0:	cmp	sl, r4
   175c4:	movhi	r3, #39	; 0x27
   175c8:	strbhi	r3, [r9, r4]
   175cc:	add	r3, r4, #1
   175d0:	cmp	sl, r3
   175d4:	movhi	r2, #92	; 0x5c
   175d8:	strbhi	r2, [r9, r3]
   175dc:	add	r3, r4, #2
   175e0:	cmp	sl, r3
   175e4:	movhi	r2, #39	; 0x27
   175e8:	strbhi	r2, [r9, r3]
   175ec:	mov	r3, #0
   175f0:	add	r4, r4, #3
   175f4:	str	r6, [sp, #80]	; 0x50
   175f8:	mov	fp, r3
   175fc:	mov	r5, #39	; 0x27
   17600:	b	16acc <__assert_fail@plt+0x58c8>
   17604:	ldr	r3, [sp, #44]	; 0x2c
   17608:	cmp	r3, #0
   1760c:	bne	179c8 <__assert_fail@plt+0x67c4>
   17610:	mov	r6, #0
   17614:	mov	r5, #63	; 0x3f
   17618:	str	r3, [sp, #40]	; 0x28
   1761c:	mov	r3, fp
   17620:	b	16acc <__assert_fail@plt+0x58c8>
   17624:	mov	r2, #0
   17628:	mov	r3, #0
   1762c:	cmn	r8, #1
   17630:	strd	r2, [sp, #128]	; 0x80
   17634:	bne	17644 <__assert_fail@plt+0x6440>
   17638:	ldr	r0, [sp, #28]
   1763c:	bl	110c0 <strlen@plt>
   17640:	mov	r8, r0
   17644:	str	r9, [sp, #100]	; 0x64
   17648:	mov	r3, #0
   1764c:	strd	sl, [sp, #104]	; 0x68
   17650:	ldr	sl, [sp, #28]
   17654:	str	r5, [sp, #112]	; 0x70
   17658:	mov	r5, r3
   1765c:	ldr	r9, [sp, #68]	; 0x44
   17660:	str	r4, [sp, #116]	; 0x74
   17664:	add	r4, r7, r5
   17668:	add	r3, sp, #128	; 0x80
   1766c:	add	fp, sl, r4
   17670:	sub	r2, r8, r4
   17674:	mov	r1, fp
   17678:	add	r0, sp, #124	; 0x7c
   1767c:	bl	1bab8 <__assert_fail@plt+0xa8b4>
   17680:	subs	r1, r0, #0
   17684:	beq	176c4 <__assert_fail@plt+0x64c0>
   17688:	cmn	r1, #1
   1768c:	beq	17a1c <__assert_fail@plt+0x6818>
   17690:	cmn	r1, #2
   17694:	beq	17a3c <__assert_fail@plt+0x6838>
   17698:	cmp	r9, #0
   1769c:	bne	176f4 <__assert_fail@plt+0x64f0>
   176a0:	ldr	r0, [sp, #124]	; 0x7c
   176a4:	add	r5, r5, r1
   176a8:	bl	10fe8 <iswprint@plt>
   176ac:	cmp	r0, #0
   176b0:	add	r0, sp, #128	; 0x80
   176b4:	moveq	r6, #0
   176b8:	bl	10f88 <mbsinit@plt>
   176bc:	cmp	r0, #0
   176c0:	beq	17664 <__assert_fail@plt+0x6460>
   176c4:	ldr	r3, [sp, #60]	; 0x3c
   176c8:	add	r9, sp, #100	; 0x64
   176cc:	mov	r0, r5
   176d0:	ldm	r9, {r9, sl, fp}
   176d4:	eor	r2, r6, #1
   176d8:	ldr	r5, [sp, #112]	; 0x70
   176dc:	and	r2, r2, r3
   176e0:	uxtb	r2, r2
   176e4:	ldr	r4, [sp, #116]	; 0x74
   176e8:	cmp	r0, #1
   176ec:	bhi	17208 <__assert_fail@plt+0x6004>
   176f0:	b	171f8 <__assert_fail@plt+0x5ff4>
   176f4:	cmp	r1, #1
   176f8:	beq	176a0 <__assert_fail@plt+0x649c>
   176fc:	add	r2, r4, #1
   17700:	add	r3, sl, r1
   17704:	add	r2, sl, r2
   17708:	add	r4, r3, r4
   1770c:	ldrb	r3, [r2], #1
   17710:	sub	r3, r3, #91	; 0x5b
   17714:	cmp	r3, #33	; 0x21
   17718:	ldrls	pc, [pc, r3, lsl #2]
   1771c:	b	177a8 <__assert_fail@plt+0x65a4>
   17720:			; <UNDEFINED> instruction: 0x000177b4
   17724:			; <UNDEFINED> instruction: 0x000177b4
   17728:	andeq	r7, r1, r8, lsr #15
   1772c:			; <UNDEFINED> instruction: 0x000177b4
   17730:	andeq	r7, r1, r8, lsr #15
   17734:			; <UNDEFINED> instruction: 0x000177b4
   17738:	andeq	r7, r1, r8, lsr #15
   1773c:	andeq	r7, r1, r8, lsr #15
   17740:	andeq	r7, r1, r8, lsr #15
   17744:	andeq	r7, r1, r8, lsr #15
   17748:	andeq	r7, r1, r8, lsr #15
   1774c:	andeq	r7, r1, r8, lsr #15
   17750:	andeq	r7, r1, r8, lsr #15
   17754:	andeq	r7, r1, r8, lsr #15
   17758:	andeq	r7, r1, r8, lsr #15
   1775c:	andeq	r7, r1, r8, lsr #15
   17760:	andeq	r7, r1, r8, lsr #15
   17764:	andeq	r7, r1, r8, lsr #15
   17768:	andeq	r7, r1, r8, lsr #15
   1776c:	andeq	r7, r1, r8, lsr #15
   17770:	andeq	r7, r1, r8, lsr #15
   17774:	andeq	r7, r1, r8, lsr #15
   17778:	andeq	r7, r1, r8, lsr #15
   1777c:	andeq	r7, r1, r8, lsr #15
   17780:	andeq	r7, r1, r8, lsr #15
   17784:	andeq	r7, r1, r8, lsr #15
   17788:	andeq	r7, r1, r8, lsr #15
   1778c:	andeq	r7, r1, r8, lsr #15
   17790:	andeq	r7, r1, r8, lsr #15
   17794:	andeq	r7, r1, r8, lsr #15
   17798:	andeq	r7, r1, r8, lsr #15
   1779c:	andeq	r7, r1, r8, lsr #15
   177a0:	andeq	r7, r1, r8, lsr #15
   177a4:			; <UNDEFINED> instruction: 0x000177b4
   177a8:	cmp	r4, r2
   177ac:	bne	1770c <__assert_fail@plt+0x6508>
   177b0:	b	176a0 <__assert_fail@plt+0x649c>
   177b4:	mov	r3, #2
   177b8:	ldr	fp, [sp, #100]	; 0x64
   177bc:	str	r3, [sp, #176]	; 0xb0
   177c0:	ldr	sl, [sp, #104]	; 0x68
   177c4:	b	16c88 <__assert_fail@plt+0x5a84>
   177c8:	ldr	r2, [sp, #52]	; 0x34
   177cc:	mov	fp, r9
   177d0:	ldr	r3, [sp, #60]	; 0x3c
   177d4:	and	r3, r3, r2
   177d8:	str	r3, [sp, #60]	; 0x3c
   177dc:	b	16c88 <__assert_fail@plt+0x5a84>
   177e0:	cmp	sl, r4
   177e4:	movhi	r2, fp
   177e8:	bhi	16b60 <__assert_fail@plt+0x595c>
   177ec:	mov	r2, r4
   177f0:	b	16b70 <__assert_fail@plt+0x596c>
   177f4:	mov	r6, r3
   177f8:	mov	r5, #63	; 0x3f
   177fc:	b	16c30 <__assert_fail@plt+0x5a2c>
   17800:	ldr	r8, [sp, #36]	; 0x24
   17804:	ldr	r6, [sp, #100]	; 0x64
   17808:	b	16adc <__assert_fail@plt+0x58d8>
   1780c:	mov	fp, r9
   17810:	ldr	r8, [sp, #36]	; 0x24
   17814:	ldr	r3, [sp, #52]	; 0x34
   17818:	str	r3, [sp, #60]	; 0x3c
   1781c:	b	16c88 <__assert_fail@plt+0x5a84>
   17820:	ldr	r8, [sp, #36]	; 0x24
   17824:	ldr	r6, [sp, #100]	; 0x64
   17828:	b	16974 <__assert_fail@plt+0x5770>
   1782c:	mov	r3, #0
   17830:	add	r4, r4, #4
   17834:	mov	fp, r2
   17838:	mov	r6, r3
   1783c:	mov	r5, #48	; 0x30
   17840:	b	16acc <__assert_fail@plt+0x58c8>
   17844:	mov	r6, r3
   17848:	b	172c8 <__assert_fail@plt+0x60c4>
   1784c:	mov	r3, #1
   17850:	movw	r2, #54760	; 0xd5e8
   17854:	movt	r2, #1
   17858:	mov	r4, r3
   1785c:	mov	r9, sl
   17860:	str	r3, [sp, #32]
   17864:	str	sl, [sp, #44]	; 0x2c
   17868:	str	r3, [sp, #48]	; 0x30
   1786c:	str	sl, [sp, #52]	; 0x34
   17870:	str	r3, [sp, #56]	; 0x38
   17874:	str	r3, [sp, #60]	; 0x3c
   17878:	str	sl, [sp, #64]	; 0x40
   1787c:	str	sl, [sp, #68]	; 0x44
   17880:	str	r2, [sp, #72]	; 0x48
   17884:	str	sl, [sp, #80]	; 0x50
   17888:	str	sl, [sp, #84]	; 0x54
   1788c:	str	sl, [sp, #88]	; 0x58
   17890:	b	16380 <__assert_fail@plt+0x517c>
   17894:	mov	r3, #0
   17898:	mov	r5, #48	; 0x30
   1789c:	mov	r6, r3
   178a0:	b	16acc <__assert_fail@plt+0x58c8>
   178a4:	cmp	sl, r4
   178a8:	mov	r5, #48	; 0x30
   178ac:	movhi	r3, #48	; 0x30
   178b0:	strbhi	r3, [r9, r4]
   178b4:	add	r3, r2, #2
   178b8:	add	r4, r2, #3
   178bc:	cmp	sl, r3
   178c0:	movhi	r1, #48	; 0x30
   178c4:	strbhi	r1, [r9, r3]
   178c8:	mov	r3, #0
   178cc:	b	16ba8 <__assert_fail@plt+0x59a4>
   178d0:	ldr	r3, [sp, #48]	; 0x30
   178d4:	str	r3, [sp, #40]	; 0x28
   178d8:	b	171b4 <__assert_fail@plt+0x5fb0>
   178dc:	ldr	r2, [sp, #28]
   178e0:	ldrb	r2, [r2, r3]
   178e4:	sub	r1, r2, #33	; 0x21
   178e8:	cmp	r1, #29
   178ec:	ldrls	pc, [pc, r1, lsl #2]
   178f0:	b	16c2c <__assert_fail@plt+0x5a28>
   178f4:	andeq	r7, r1, ip, ror #18
   178f8:	andeq	r6, r1, ip, lsr #24
   178fc:	andeq	r6, r1, ip, lsr #24
   17900:	andeq	r6, r1, ip, lsr #24
   17904:	andeq	r6, r1, ip, lsr #24
   17908:	andeq	r6, r1, ip, lsr #24
   1790c:	andeq	r7, r1, ip, ror #18
   17910:	andeq	r7, r1, ip, ror #18
   17914:	andeq	r7, r1, ip, ror #18
   17918:	andeq	r6, r1, ip, lsr #24
   1791c:	andeq	r6, r1, ip, lsr #24
   17920:	andeq	r6, r1, ip, lsr #24
   17924:	andeq	r7, r1, ip, ror #18
   17928:	andeq	r6, r1, ip, lsr #24
   1792c:	andeq	r7, r1, ip, ror #18
   17930:	andeq	r6, r1, ip, lsr #24
   17934:	andeq	r6, r1, ip, lsr #24
   17938:	andeq	r6, r1, ip, lsr #24
   1793c:	andeq	r6, r1, ip, lsr #24
   17940:	andeq	r6, r1, ip, lsr #24
   17944:	andeq	r6, r1, ip, lsr #24
   17948:	andeq	r6, r1, ip, lsr #24
   1794c:	andeq	r6, r1, ip, lsr #24
   17950:	andeq	r6, r1, ip, lsr #24
   17954:	andeq	r6, r1, ip, lsr #24
   17958:	andeq	r6, r1, ip, lsr #24
   1795c:	andeq	r6, r1, ip, lsr #24
   17960:	andeq	r7, r1, ip, ror #18
   17964:	andeq	r7, r1, ip, ror #18
   17968:	andeq	r7, r1, ip, ror #18
   1796c:	ldr	r1, [sp, #44]	; 0x2c
   17970:	cmp	r1, #0
   17974:	bne	17bd4 <__assert_fail@plt+0x69d0>
   17978:	cmp	sl, r4
   1797c:	mov	r7, r3
   17980:	movhi	r1, #63	; 0x3f
   17984:	mov	r5, r2
   17988:	mov	r3, fp
   1798c:	strbhi	r1, [r9, r4]
   17990:	add	r1, r4, #1
   17994:	cmp	sl, r1
   17998:	movhi	r0, #34	; 0x22
   1799c:	strbhi	r0, [r9, r1]
   179a0:	add	r1, r4, #2
   179a4:	cmp	sl, r1
   179a8:	movhi	r0, #34	; 0x22
   179ac:	strbhi	r0, [r9, r1]
   179b0:	add	r1, r4, #3
   179b4:	add	r4, r4, #4
   179b8:	cmp	sl, r1
   179bc:	movhi	r0, #63	; 0x3f
   179c0:	strbhi	r0, [r9, r1]
   179c4:	b	16ba8 <__assert_fail@plt+0x59a4>
   179c8:	mov	fp, r9
   179cc:	b	16c88 <__assert_fail@plt+0x5a84>
   179d0:	ldr	r3, [sp, #188]	; 0xbc
   179d4:	ldrb	r3, [r3]
   179d8:	cmp	r3, #0
   179dc:	beq	16318 <__assert_fail@plt+0x5114>
   179e0:	ldr	r2, [sp, #188]	; 0xbc
   179e4:	cmp	sl, r4
   179e8:	bls	17a08 <__assert_fail@plt+0x6804>
   179ec:	strb	r3, [fp, r4]
   179f0:	add	r4, r4, #1
   179f4:	ldrb	r3, [r2, #1]!
   179f8:	cmp	r3, #0
   179fc:	beq	16318 <__assert_fail@plt+0x5114>
   17a00:	cmp	sl, r4
   17a04:	bhi	179ec <__assert_fail@plt+0x67e8>
   17a08:	ldrb	r3, [r2, #1]!
   17a0c:	add	r4, r4, #1
   17a10:	cmp	r3, #0
   17a14:	bne	179e4 <__assert_fail@plt+0x67e0>
   17a18:	b	16318 <__assert_fail@plt+0x5114>
   17a1c:	add	r9, sp, #100	; 0x64
   17a20:	mov	r0, r5
   17a24:	ldr	r2, [sp, #60]	; 0x3c
   17a28:	mov	r6, #0
   17a2c:	ldm	r9, {r9, sl, fp}
   17a30:	ldr	r5, [sp, #112]	; 0x70
   17a34:	ldr	r4, [sp, #116]	; 0x74
   17a38:	b	176e8 <__assert_fail@plt+0x64e4>
   17a3c:	cmp	r4, r8
   17a40:	add	r9, sp, #100	; 0x64
   17a44:	mov	r1, r4
   17a48:	mov	r2, fp
   17a4c:	ldm	r9, {r9, sl, fp}
   17a50:	mov	r3, r5
   17a54:	mov	r0, r5
   17a58:	ldr	r5, [sp, #112]	; 0x70
   17a5c:	ldr	r4, [sp, #116]	; 0x74
   17a60:	bcs	17a94 <__assert_fail@plt+0x6890>
   17a64:	ldrb	r6, [r2]
   17a68:	cmp	r6, #0
   17a6c:	bne	17a80 <__assert_fail@plt+0x687c>
   17a70:	b	17bcc <__assert_fail@plt+0x69c8>
   17a74:	ldrb	r6, [r2, #1]!
   17a78:	cmp	r6, #0
   17a7c:	beq	17b64 <__assert_fail@plt+0x6960>
   17a80:	add	r3, r3, #1
   17a84:	add	r1, r7, r3
   17a88:	cmp	r8, r1
   17a8c:	bhi	17a74 <__assert_fail@plt+0x6870>
   17a90:	mov	r0, r3
   17a94:	mov	r6, #0
   17a98:	ldr	r2, [sp, #60]	; 0x3c
   17a9c:	b	176e8 <__assert_fail@plt+0x64e4>
   17aa0:	mov	r3, #1
   17aa4:	mov	r4, #0
   17aa8:	mov	r9, r4
   17aac:	str	r3, [sp, #32]
   17ab0:	str	r3, [sp, #44]	; 0x2c
   17ab4:	str	r3, [sp, #48]	; 0x30
   17ab8:	str	r4, [sp, #52]	; 0x34
   17abc:	str	r3, [sp, #56]	; 0x38
   17ac0:	str	r3, [sp, #60]	; 0x3c
   17ac4:	str	r3, [sp, #88]	; 0x58
   17ac8:	movw	r3, #54760	; 0xd5e8
   17acc:	movt	r3, #1
   17ad0:	str	r4, [sp, #64]	; 0x40
   17ad4:	str	r4, [sp, #68]	; 0x44
   17ad8:	str	r3, [sp, #72]	; 0x48
   17adc:	str	r4, [sp, #80]	; 0x50
   17ae0:	str	r4, [sp, #84]	; 0x54
   17ae4:	b	16380 <__assert_fail@plt+0x517c>
   17ae8:	mov	fp, r9
   17aec:	b	16c9c <__assert_fail@plt+0x5a98>
   17af0:	ldr	r3, [sp, #48]	; 0x30
   17af4:	b	17610 <__assert_fail@plt+0x640c>
   17af8:	mov	r2, r3
   17afc:	ldr	r3, [sp, #72]	; 0x48
   17b00:	cmp	r3, #0
   17b04:	moveq	r2, #0
   17b08:	andne	r2, r2, #1
   17b0c:	cmp	r2, #0
   17b10:	beq	17b40 <__assert_fail@plt+0x693c>
   17b14:	mov	r2, r3
   17b18:	ldrb	r3, [r3]
   17b1c:	cmp	r3, #0
   17b20:	beq	17b40 <__assert_fail@plt+0x693c>
   17b24:	cmp	sl, r4
   17b28:	bls	17b50 <__assert_fail@plt+0x694c>
   17b2c:	strb	r3, [fp, r4]
   17b30:	add	r4, r4, #1
   17b34:	ldrb	r3, [r2, #1]!
   17b38:	cmp	r3, #0
   17b3c:	bne	17b24 <__assert_fail@plt+0x6920>
   17b40:	cmp	sl, r4
   17b44:	movhi	r3, #0
   17b48:	strbhi	r3, [fp, r4]
   17b4c:	b	16cd8 <__assert_fail@plt+0x5ad4>
   17b50:	ldrb	r3, [r2, #1]!
   17b54:	add	r4, r4, #1
   17b58:	cmp	r3, #0
   17b5c:	bne	17b24 <__assert_fail@plt+0x6920>
   17b60:	b	17b40 <__assert_fail@plt+0x693c>
   17b64:	mov	r0, r3
   17b68:	ldr	r2, [sp, #60]	; 0x3c
   17b6c:	b	176e8 <__assert_fail@plt+0x64e4>
   17b70:	mov	ip, #5
   17b74:	mov	r3, r8
   17b78:	ldr	r1, [sp, #84]	; 0x54
   17b7c:	str	ip, [sp]
   17b80:	ldr	r2, [sp, #180]	; 0xb4
   17b84:	ldr	ip, [sp, #188]	; 0xbc
   17b88:	ldr	r0, [sp, #184]	; 0xb8
   17b8c:	str	r2, [sp, #4]
   17b90:	ldr	r2, [sp, #28]
   17b94:	str	ip, [sp, #12]
   17b98:	ldr	ip, [sp, #192]	; 0xc0
   17b9c:	str	r0, [sp, #8]
   17ba0:	mov	r0, fp
   17ba4:	str	ip, [sp, #16]
   17ba8:	bl	1625c <__assert_fail@plt+0x5058>
   17bac:	mov	r4, r0
   17bb0:	b	16cd8 <__assert_fail@plt+0x5ad4>
   17bb4:	mov	r6, r3
   17bb8:	str	r3, [sp, #40]	; 0x28
   17bbc:	b	16c48 <__assert_fail@plt+0x5a44>
   17bc0:	mov	r3, #2
   17bc4:	str	r3, [sp, #176]	; 0xb0
   17bc8:	b	16c88 <__assert_fail@plt+0x5a84>
   17bcc:	ldr	r2, [sp, #60]	; 0x3c
   17bd0:	b	176e8 <__assert_fail@plt+0x64e4>
   17bd4:	mov	r3, #5
   17bd8:	mov	fp, r9
   17bdc:	str	r3, [sp, #176]	; 0xb0
   17be0:	b	16c9c <__assert_fail@plt+0x5a98>
   17be4:	mov	r1, #1
   17be8:	mov	r9, #0
   17bec:	mov	r3, r9
   17bf0:	mov	r2, r9
   17bf4:	str	r1, [sp, #32]
   17bf8:	str	sl, [sp, #84]	; 0x54
   17bfc:	b	16a24 <__assert_fail@plt+0x5820>
   17c00:	mov	r3, #0
   17c04:	mov	r2, #1
   17c08:	mov	r9, r3
   17c0c:	mov	r4, r3
   17c10:	str	r2, [sp, #32]
   17c14:	strd	r2, [sp, #44]	; 0x2c
   17c18:	strd	r2, [sp, #56]	; 0x38
   17c1c:	str	r3, [sp, #80]	; 0x50
   17c20:	str	r3, [sp, #84]	; 0x54
   17c24:	str	r3, [sp, #88]	; 0x58
   17c28:	movw	r3, #54780	; 0xd5fc
   17c2c:	movt	r3, #1
   17c30:	str	r2, [sp, #52]	; 0x34
   17c34:	str	r2, [sp, #64]	; 0x40
   17c38:	str	r2, [sp, #68]	; 0x44
   17c3c:	str	r3, [sp, #72]	; 0x48
   17c40:	b	16380 <__assert_fail@plt+0x517c>
   17c44:	bl	111ec <abort@plt>
   17c48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17c4c:	mov	r4, r0
   17c50:	mov	r5, r3
   17c54:	strd	r6, [sp, #8]
   17c58:	movw	r7, #57640	; 0xe128
   17c5c:	movt	r7, #2
   17c60:	strd	r8, [sp, #16]
   17c64:	strd	sl, [sp, #24]
   17c68:	mov	sl, r1
   17c6c:	mov	fp, r2
   17c70:	str	lr, [sp, #32]
   17c74:	sub	sp, sp, #60	; 0x3c
   17c78:	bl	110d8 <__errno_location@plt>
   17c7c:	mov	r8, r0
   17c80:	cmn	r4, #-2147483647	; 0x80000001
   17c84:	ldr	r6, [r7]
   17c88:	movne	r0, #0
   17c8c:	moveq	r0, #1
   17c90:	ldr	r3, [r8]
   17c94:	orrs	r0, r0, r4, lsr #31
   17c98:	str	r3, [sp, #28]
   17c9c:	bne	17e2c <__assert_fail@plt+0x6c28>
   17ca0:	ldr	r3, [r7, #4]
   17ca4:	cmp	r3, r4
   17ca8:	bgt	17d08 <__assert_fail@plt+0x6b04>
   17cac:	add	r1, r7, #8
   17cb0:	sub	r2, r4, r3
   17cb4:	str	r3, [sp, #52]	; 0x34
   17cb8:	cmp	r6, r1
   17cbc:	add	r2, r2, #1
   17cc0:	beq	17e04 <__assert_fail@plt+0x6c00>
   17cc4:	mov	r1, #8
   17cc8:	mov	r0, r6
   17ccc:	mvn	r3, #-2147483648	; 0x80000000
   17cd0:	str	r1, [sp]
   17cd4:	add	r1, sp, #52	; 0x34
   17cd8:	bl	1a568 <__assert_fail@plt+0x9364>
   17cdc:	mov	r6, r0
   17ce0:	str	r0, [r7]
   17ce4:	ldr	r0, [r7, #4]
   17ce8:	mov	r1, #0
   17cec:	ldr	r2, [sp, #52]	; 0x34
   17cf0:	sub	r2, r2, r0
   17cf4:	add	r0, r6, r0, lsl #3
   17cf8:	lsl	r2, r2, #3
   17cfc:	bl	11108 <memset@plt>
   17d00:	ldr	r3, [sp, #52]	; 0x34
   17d04:	str	r3, [r7, #4]
   17d08:	ldr	r1, [r5, #4]
   17d0c:	add	r0, r6, r4, lsl #3
   17d10:	add	ip, r5, #8
   17d14:	mov	r3, fp
   17d18:	mov	r2, sl
   17d1c:	ldr	r7, [r0, #4]
   17d20:	str	r0, [sp, #36]	; 0x24
   17d24:	str	ip, [sp, #40]	; 0x28
   17d28:	orr	r0, r1, #1
   17d2c:	ldr	r9, [r6, r4, lsl #3]
   17d30:	str	ip, [sp, #8]
   17d34:	ldr	lr, [r5, #44]	; 0x2c
   17d38:	str	r0, [sp, #4]
   17d3c:	ldr	ip, [r5]
   17d40:	mov	r1, r9
   17d44:	str	ip, [sp, #32]
   17d48:	ldr	ip, [r5, #40]	; 0x28
   17d4c:	str	ip, [sp, #12]
   17d50:	ldr	ip, [sp, #32]
   17d54:	str	lr, [sp, #16]
   17d58:	str	r0, [sp, #44]	; 0x2c
   17d5c:	mov	r0, r7
   17d60:	str	ip, [sp]
   17d64:	bl	1625c <__assert_fail@plt+0x5058>
   17d68:	cmp	r9, r0
   17d6c:	bhi	17ddc <__assert_fail@plt+0x6bd8>
   17d70:	add	r9, r0, #1
   17d74:	movw	r3, #57924	; 0xe244
   17d78:	movt	r3, #2
   17d7c:	cmp	r7, r3
   17d80:	str	r9, [r6, r4, lsl #3]
   17d84:	beq	17d90 <__assert_fail@plt+0x6b8c>
   17d88:	mov	r0, r7
   17d8c:	bl	15c8c <__assert_fail@plt+0x4a88>
   17d90:	mov	r0, r9
   17d94:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   17d98:	ldr	ip, [r5]
   17d9c:	mov	r3, fp
   17da0:	mov	r2, sl
   17da4:	mov	r1, r9
   17da8:	mov	r7, r0
   17dac:	ldr	lr, [sp, #36]	; 0x24
   17db0:	ldr	r4, [r5, #40]	; 0x28
   17db4:	str	r0, [lr, #4]
   17db8:	ldr	lr, [r5, #44]	; 0x2c
   17dbc:	str	ip, [sp]
   17dc0:	ldr	ip, [sp, #44]	; 0x2c
   17dc4:	str	ip, [sp, #4]
   17dc8:	ldr	ip, [sp, #40]	; 0x28
   17dcc:	str	r4, [sp, #12]
   17dd0:	str	lr, [sp, #16]
   17dd4:	str	ip, [sp, #8]
   17dd8:	bl	1625c <__assert_fail@plt+0x5058>
   17ddc:	ldr	r3, [sp, #28]
   17de0:	mov	r0, r7
   17de4:	str	r3, [r8]
   17de8:	add	sp, sp, #60	; 0x3c
   17dec:	ldrd	r4, [sp]
   17df0:	ldrd	r6, [sp, #8]
   17df4:	ldrd	r8, [sp, #16]
   17df8:	ldrd	sl, [sp, #24]
   17dfc:	add	sp, sp, #32
   17e00:	pop	{pc}		; (ldr pc, [sp], #4)
   17e04:	mov	r1, #8
   17e08:	mvn	r3, #-2147483648	; 0x80000000
   17e0c:	str	r1, [sp]
   17e10:	add	r1, sp, #52	; 0x34
   17e14:	bl	1a568 <__assert_fail@plt+0x9364>
   17e18:	ldrd	r2, [r7, #8]
   17e1c:	mov	r6, r0
   17e20:	str	r0, [r7]
   17e24:	strd	r2, [r0]
   17e28:	b	17ce4 <__assert_fail@plt+0x6ae0>
   17e2c:	bl	111ec <abort@plt>
   17e30:	strd	r4, [sp, #-16]!
   17e34:	mov	r5, r0
   17e38:	str	r6, [sp, #8]
   17e3c:	str	lr, [sp, #12]
   17e40:	bl	110d8 <__errno_location@plt>
   17e44:	mov	r4, r0
   17e48:	cmp	r5, #0
   17e4c:	ldr	r0, [pc, #32]	; 17e74 <__assert_fail@plt+0x6c70>
   17e50:	mov	r1, #48	; 0x30
   17e54:	movne	r0, r5
   17e58:	ldr	r6, [r4]
   17e5c:	bl	1a708 <__assert_fail@plt+0x9504>
   17e60:	str	r6, [r4]
   17e64:	ldrd	r4, [sp]
   17e68:	ldr	r6, [sp, #8]
   17e6c:	add	sp, sp, #12
   17e70:	pop	{pc}		; (ldr pc, [sp], #4)
   17e74:	andeq	lr, r2, r4, asr #6
   17e78:	ldr	r3, [pc, #12]	; 17e8c <__assert_fail@plt+0x6c88>
   17e7c:	cmp	r0, #0
   17e80:	moveq	r0, r3
   17e84:	ldr	r0, [r0]
   17e88:	bx	lr
   17e8c:	andeq	lr, r2, r4, asr #6
   17e90:	ldr	r3, [pc, #12]	; 17ea4 <__assert_fail@plt+0x6ca0>
   17e94:	cmp	r0, #0
   17e98:	moveq	r0, r3
   17e9c:	str	r1, [r0]
   17ea0:	bx	lr
   17ea4:	andeq	lr, r2, r4, asr #6
   17ea8:	ldr	r3, [pc, #52]	; 17ee4 <__assert_fail@plt+0x6ce0>
   17eac:	cmp	r0, #0
   17eb0:	push	{lr}		; (str lr, [sp, #-4]!)
   17eb4:	lsr	lr, r1, #5
   17eb8:	and	r1, r1, #31
   17ebc:	moveq	r0, r3
   17ec0:	add	r3, r0, #8
   17ec4:	ldr	ip, [r3, lr, lsl #2]
   17ec8:	lsr	r0, ip, r1
   17ecc:	eor	r2, r2, r0
   17ed0:	and	r0, r0, #1
   17ed4:	and	r2, r2, #1
   17ed8:	eor	r1, ip, r2, lsl r1
   17edc:	str	r1, [r3, lr, lsl #2]
   17ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee4:	andeq	lr, r2, r4, asr #6
   17ee8:	ldr	r3, [pc, #16]	; 17f00 <__assert_fail@plt+0x6cfc>
   17eec:	cmp	r0, #0
   17ef0:	movne	r3, r0
   17ef4:	ldr	r0, [r3, #4]
   17ef8:	str	r1, [r3, #4]
   17efc:	bx	lr
   17f00:	andeq	lr, r2, r4, asr #6
   17f04:	ldr	r3, [pc, #48]	; 17f3c <__assert_fail@plt+0x6d38>
   17f08:	cmp	r0, #0
   17f0c:	mov	ip, #10
   17f10:	moveq	r0, r3
   17f14:	cmp	r2, #0
   17f18:	cmpne	r1, #0
   17f1c:	str	ip, [r0]
   17f20:	beq	17f30 <__assert_fail@plt+0x6d2c>
   17f24:	str	r1, [r0, #40]	; 0x28
   17f28:	str	r2, [r0, #44]	; 0x2c
   17f2c:	bx	lr
   17f30:	str	r4, [sp, #-8]!
   17f34:	str	lr, [sp, #4]
   17f38:	bl	111ec <abort@plt>
   17f3c:	andeq	lr, r2, r4, asr #6
   17f40:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17f44:	strd	r6, [sp, #8]
   17f48:	mov	r7, r0
   17f4c:	mov	r6, r1
   17f50:	strd	r8, [sp, #16]
   17f54:	mov	r8, r2
   17f58:	mov	r9, r3
   17f5c:	str	lr, [sp, #24]
   17f60:	sub	sp, sp, #28
   17f64:	ldr	r4, [sp, #56]	; 0x38
   17f68:	ldr	ip, [pc, #104]	; 17fd8 <__assert_fail@plt+0x6dd4>
   17f6c:	cmp	r4, #0
   17f70:	moveq	r4, ip
   17f74:	bl	110d8 <__errno_location@plt>
   17f78:	ldr	ip, [r4, #44]	; 0x2c
   17f7c:	mov	r5, r0
   17f80:	mov	r1, r6
   17f84:	add	lr, r4, #8
   17f88:	mov	r3, r9
   17f8c:	ldr	r6, [r5]
   17f90:	mov	r2, r8
   17f94:	mov	r0, r7
   17f98:	str	ip, [sp, #16]
   17f9c:	ldr	ip, [r4, #40]	; 0x28
   17fa0:	str	lr, [sp, #8]
   17fa4:	str	ip, [sp, #12]
   17fa8:	ldr	ip, [r4, #4]
   17fac:	str	ip, [sp, #4]
   17fb0:	ldr	ip, [r4]
   17fb4:	str	ip, [sp]
   17fb8:	bl	1625c <__assert_fail@plt+0x5058>
   17fbc:	str	r6, [r5]
   17fc0:	add	sp, sp, #28
   17fc4:	ldrd	r4, [sp]
   17fc8:	ldrd	r6, [sp, #8]
   17fcc:	ldrd	r8, [sp, #16]
   17fd0:	add	sp, sp, #24
   17fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   17fd8:	andeq	lr, r2, r4, asr #6
   17fdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17fe0:	cmp	r2, #0
   17fe4:	ldr	r4, [pc, #192]	; 180ac <__assert_fail@plt+0x6ea8>
   17fe8:	movne	r4, r2
   17fec:	strd	r6, [sp, #8]
   17ff0:	strd	r8, [sp, #16]
   17ff4:	mov	r9, r1
   17ff8:	mov	r8, r0
   17ffc:	strd	sl, [sp, #24]
   18000:	str	lr, [sp, #32]
   18004:	sub	sp, sp, #36	; 0x24
   18008:	bl	110d8 <__errno_location@plt>
   1800c:	ldr	r5, [r4, #4]
   18010:	mov	r6, r0
   18014:	add	r7, r4, #8
   18018:	mov	r1, #0
   1801c:	mov	r3, r9
   18020:	ldr	ip, [r4, #44]	; 0x2c
   18024:	mov	r2, r8
   18028:	mov	r0, r1
   1802c:	ldr	sl, [r6]
   18030:	orr	r5, r5, #1
   18034:	str	ip, [sp, #16]
   18038:	ldr	ip, [r4, #40]	; 0x28
   1803c:	stmib	sp, {r5, r7, ip}
   18040:	ldr	ip, [r4]
   18044:	str	ip, [sp]
   18048:	bl	1625c <__assert_fail@plt+0x5058>
   1804c:	add	r1, r0, #1
   18050:	mov	r0, r1
   18054:	str	r1, [sp, #28]
   18058:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   1805c:	ldr	ip, [r4, #44]	; 0x2c
   18060:	mov	fp, r0
   18064:	mov	r3, r9
   18068:	mov	r2, r8
   1806c:	ldr	r1, [sp, #28]
   18070:	str	ip, [sp, #16]
   18074:	ldr	ip, [r4, #40]	; 0x28
   18078:	stmib	sp, {r5, r7, ip}
   1807c:	ldr	ip, [r4]
   18080:	str	ip, [sp]
   18084:	bl	1625c <__assert_fail@plt+0x5058>
   18088:	mov	r0, fp
   1808c:	str	sl, [r6]
   18090:	add	sp, sp, #36	; 0x24
   18094:	ldrd	r4, [sp]
   18098:	ldrd	r6, [sp, #8]
   1809c:	ldrd	r8, [sp, #16]
   180a0:	ldrd	sl, [sp, #24]
   180a4:	add	sp, sp, #32
   180a8:	pop	{pc}		; (ldr pc, [sp], #4)
   180ac:	andeq	lr, r2, r4, asr #6
   180b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   180b4:	cmp	r3, #0
   180b8:	ldr	r4, [pc, #220]	; 1819c <__assert_fail@plt+0x6f98>
   180bc:	movne	r4, r3
   180c0:	strd	r6, [sp, #8]
   180c4:	mov	r6, r2
   180c8:	strd	r8, [sp, #16]
   180cc:	mov	r9, r0
   180d0:	strd	sl, [sp, #24]
   180d4:	mov	sl, r1
   180d8:	str	lr, [sp, #32]
   180dc:	sub	sp, sp, #44	; 0x2c
   180e0:	bl	110d8 <__errno_location@plt>
   180e4:	ldr	r5, [r4, #4]
   180e8:	mov	r7, r0
   180ec:	mov	r1, #0
   180f0:	add	r8, r4, #8
   180f4:	mov	r3, sl
   180f8:	ldr	ip, [r4, #44]	; 0x2c
   180fc:	mov	r2, r9
   18100:	mov	r0, r1
   18104:	ldr	lr, [r7]
   18108:	cmp	r6, r1
   1810c:	orreq	r5, r5, #1
   18110:	str	ip, [sp, #16]
   18114:	ldr	ip, [r4, #40]	; 0x28
   18118:	stmib	sp, {r5, r8, ip}
   1811c:	ldr	ip, [r4]
   18120:	str	lr, [sp, #28]
   18124:	str	ip, [sp]
   18128:	bl	1625c <__assert_fail@plt+0x5058>
   1812c:	add	r1, r0, #1
   18130:	mov	fp, r0
   18134:	mov	r0, r1
   18138:	str	r1, [sp, #36]	; 0x24
   1813c:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   18140:	ldr	ip, [r4, #44]	; 0x2c
   18144:	mov	r3, sl
   18148:	mov	r2, r9
   1814c:	ldr	r1, [sp, #36]	; 0x24
   18150:	str	ip, [sp, #16]
   18154:	ldr	ip, [r4, #40]	; 0x28
   18158:	str	r0, [sp, #32]
   1815c:	stmib	sp, {r5, r8, ip}
   18160:	ldr	ip, [r4]
   18164:	str	ip, [sp]
   18168:	bl	1625c <__assert_fail@plt+0x5058>
   1816c:	ldr	lr, [sp, #28]
   18170:	cmp	r6, #0
   18174:	ldr	r0, [sp, #32]
   18178:	str	lr, [r7]
   1817c:	strne	fp, [r6]
   18180:	add	sp, sp, #44	; 0x2c
   18184:	ldrd	r4, [sp]
   18188:	ldrd	r6, [sp, #8]
   1818c:	ldrd	r8, [sp, #16]
   18190:	ldrd	sl, [sp, #24]
   18194:	add	sp, sp, #32
   18198:	pop	{pc}		; (ldr pc, [sp], #4)
   1819c:	andeq	lr, r2, r4, asr #6
   181a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   181a4:	movw	r5, #57640	; 0xe128
   181a8:	movt	r5, #2
   181ac:	ldr	r3, [r5, #4]
   181b0:	strd	r6, [sp, #8]
   181b4:	str	r8, [sp, #16]
   181b8:	str	lr, [sp, #20]
   181bc:	ldr	r7, [r5]
   181c0:	cmp	r3, #1
   181c4:	ble	181e8 <__assert_fail@plt+0x6fe4>
   181c8:	mov	r4, #1
   181cc:	add	r6, r7, #4
   181d0:	ldr	r0, [r6, r4, lsl #3]
   181d4:	add	r4, r4, #1
   181d8:	bl	15c8c <__assert_fail@plt+0x4a88>
   181dc:	ldr	r3, [r5, #4]
   181e0:	cmp	r3, r4
   181e4:	bgt	181d0 <__assert_fail@plt+0x6fcc>
   181e8:	ldr	r0, [r7, #4]
   181ec:	movw	r4, #57924	; 0xe244
   181f0:	movt	r4, #2
   181f4:	cmp	r0, r4
   181f8:	beq	1820c <__assert_fail@plt+0x7008>
   181fc:	bl	15c8c <__assert_fail@plt+0x4a88>
   18200:	mov	r3, #256	; 0x100
   18204:	str	r3, [r5, #8]
   18208:	str	r4, [r5, #12]
   1820c:	ldr	r4, [pc, #44]	; 18240 <__assert_fail@plt+0x703c>
   18210:	cmp	r7, r4
   18214:	beq	18224 <__assert_fail@plt+0x7020>
   18218:	mov	r0, r7
   1821c:	bl	15c8c <__assert_fail@plt+0x4a88>
   18220:	str	r4, [r5]
   18224:	mov	r3, #1
   18228:	ldrd	r6, [sp, #8]
   1822c:	str	r3, [r5, #4]
   18230:	ldrd	r4, [sp]
   18234:	ldr	r8, [sp, #16]
   18238:	add	sp, sp, #20
   1823c:	pop	{pc}		; (ldr pc, [sp], #4)
   18240:	andeq	lr, r2, r0, lsr r1
   18244:	ldr	r3, [pc, #4]	; 18250 <__assert_fail@plt+0x704c>
   18248:	mvn	r2, #0
   1824c:	b	17c48 <__assert_fail@plt+0x6a44>
   18250:	andeq	lr, r2, r4, asr #6
   18254:	ldr	r3, [pc]	; 1825c <__assert_fail@plt+0x7058>
   18258:	b	17c48 <__assert_fail@plt+0x6a44>
   1825c:	andeq	lr, r2, r4, asr #6
   18260:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18264:	movw	r4, #57640	; 0xe128
   18268:	movt	r4, #2
   1826c:	strd	r6, [sp, #8]
   18270:	strd	r8, [sp, #16]
   18274:	strd	sl, [sp, #24]
   18278:	mov	sl, r0
   1827c:	str	lr, [sp, #32]
   18280:	sub	sp, sp, #44	; 0x2c
   18284:	bl	110d8 <__errno_location@plt>
   18288:	ldr	r3, [r0]
   1828c:	mov	r8, r0
   18290:	ldr	r2, [r4, #4]
   18294:	ldr	r5, [r4]
   18298:	str	r3, [sp, #28]
   1829c:	cmp	r2, #0
   182a0:	bgt	182fc <__assert_fail@plt+0x70f8>
   182a4:	add	r3, r4, #8
   182a8:	str	r2, [sp, #36]	; 0x24
   182ac:	rsb	r2, r2, #1
   182b0:	cmp	r5, r3
   182b4:	beq	183c8 <__assert_fail@plt+0x71c4>
   182b8:	mov	r1, #8
   182bc:	mov	r0, r5
   182c0:	mvn	r3, #-2147483648	; 0x80000000
   182c4:	str	r1, [sp]
   182c8:	add	r1, sp, #36	; 0x24
   182cc:	bl	1a568 <__assert_fail@plt+0x9364>
   182d0:	mov	r5, r0
   182d4:	str	r0, [r4]
   182d8:	ldr	r0, [r4, #4]
   182dc:	mov	r1, #0
   182e0:	ldr	r2, [sp, #36]	; 0x24
   182e4:	sub	r2, r2, r0
   182e8:	add	r0, r5, r0, lsl #3
   182ec:	lsl	r2, r2, #3
   182f0:	bl	11108 <memset@plt>
   182f4:	ldr	r3, [sp, #36]	; 0x24
   182f8:	str	r3, [r4, #4]
   182fc:	movw	r4, #57924	; 0xe244
   18300:	movt	r4, #2
   18304:	ldr	r9, [r5]
   18308:	add	fp, r4, #264	; 0x108
   1830c:	mvn	r3, #0
   18310:	ldr	r7, [r4, #260]	; 0x104
   18314:	mov	r2, sl
   18318:	ldr	r6, [r5, #4]
   1831c:	str	fp, [sp, #8]
   18320:	mov	r1, r9
   18324:	ldr	ip, [r4, #256]	; 0x100
   18328:	orr	r7, r7, #1
   1832c:	ldr	lr, [r4, #300]	; 0x12c
   18330:	mov	r0, r6
   18334:	str	ip, [sp]
   18338:	str	r7, [sp, #4]
   1833c:	str	lr, [sp, #16]
   18340:	ldr	ip, [r4, #296]	; 0x128
   18344:	str	ip, [sp, #12]
   18348:	bl	1625c <__assert_fail@plt+0x5058>
   1834c:	cmp	r9, r0
   18350:	bhi	183a0 <__assert_fail@plt+0x719c>
   18354:	add	r9, r0, #1
   18358:	cmp	r6, r4
   1835c:	str	r9, [r5]
   18360:	beq	1836c <__assert_fail@plt+0x7168>
   18364:	mov	r0, r6
   18368:	bl	15c8c <__assert_fail@plt+0x4a88>
   1836c:	mov	r0, r9
   18370:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   18374:	ldr	r3, [r4, #256]	; 0x100
   18378:	mov	r2, sl
   1837c:	mov	r1, r9
   18380:	mov	r6, r0
   18384:	ldr	lr, [r4, #296]	; 0x128
   18388:	ldr	ip, [r4, #300]	; 0x12c
   1838c:	str	r0, [r5, #4]
   18390:	stm	sp, {r3, r7, fp, lr}
   18394:	mvn	r3, #0
   18398:	str	ip, [sp, #16]
   1839c:	bl	1625c <__assert_fail@plt+0x5058>
   183a0:	ldr	r3, [sp, #28]
   183a4:	mov	r0, r6
   183a8:	str	r3, [r8]
   183ac:	add	sp, sp, #44	; 0x2c
   183b0:	ldrd	r4, [sp]
   183b4:	ldrd	r6, [sp, #8]
   183b8:	ldrd	r8, [sp, #16]
   183bc:	ldrd	sl, [sp, #24]
   183c0:	add	sp, sp, #32
   183c4:	pop	{pc}		; (ldr pc, [sp], #4)
   183c8:	mov	r0, #8
   183cc:	mvn	r3, #-2147483648	; 0x80000000
   183d0:	add	r1, sp, #36	; 0x24
   183d4:	str	r0, [sp]
   183d8:	mov	r0, #0
   183dc:	bl	1a568 <__assert_fail@plt+0x9364>
   183e0:	ldrd	r2, [r4, #8]
   183e4:	mov	r5, r0
   183e8:	str	r0, [r4]
   183ec:	strd	r2, [r0]
   183f0:	b	182d8 <__assert_fail@plt+0x70d4>
   183f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   183f8:	movw	r4, #57640	; 0xe128
   183fc:	movt	r4, #2
   18400:	strd	r6, [sp, #8]
   18404:	strd	r8, [sp, #16]
   18408:	strd	sl, [sp, #24]
   1840c:	mov	sl, r0
   18410:	mov	fp, r1
   18414:	str	lr, [sp, #32]
   18418:	sub	sp, sp, #44	; 0x2c
   1841c:	bl	110d8 <__errno_location@plt>
   18420:	ldr	r3, [r0]
   18424:	mov	r8, r0
   18428:	ldr	r2, [r4, #4]
   1842c:	ldr	r5, [r4]
   18430:	str	r3, [sp, #28]
   18434:	cmp	r2, #0
   18438:	bgt	18494 <__assert_fail@plt+0x7290>
   1843c:	add	r3, r4, #8
   18440:	str	r2, [sp, #36]	; 0x24
   18444:	rsb	r2, r2, #1
   18448:	cmp	r5, r3
   1844c:	beq	18570 <__assert_fail@plt+0x736c>
   18450:	mov	r1, #8
   18454:	mov	r0, r5
   18458:	mvn	r3, #-2147483648	; 0x80000000
   1845c:	str	r1, [sp]
   18460:	add	r1, sp, #36	; 0x24
   18464:	bl	1a568 <__assert_fail@plt+0x9364>
   18468:	mov	r5, r0
   1846c:	str	r0, [r4]
   18470:	ldr	r0, [r4, #4]
   18474:	mov	r1, #0
   18478:	ldr	r2, [sp, #36]	; 0x24
   1847c:	sub	r2, r2, r0
   18480:	add	r0, r5, r0, lsl #3
   18484:	lsl	r2, r2, #3
   18488:	bl	11108 <memset@plt>
   1848c:	ldr	r3, [sp, #36]	; 0x24
   18490:	str	r3, [r4, #4]
   18494:	movw	r4, #57924	; 0xe244
   18498:	movt	r4, #2
   1849c:	ldr	r9, [r5]
   184a0:	add	r0, r4, #264	; 0x108
   184a4:	mov	r3, fp
   184a8:	ldr	r7, [r4, #260]	; 0x104
   184ac:	mov	r2, sl
   184b0:	ldr	r6, [r5, #4]
   184b4:	str	r0, [sp, #8]
   184b8:	mov	r1, r9
   184bc:	ldr	ip, [r4, #256]	; 0x100
   184c0:	orr	r7, r7, #1
   184c4:	ldr	lr, [r4, #300]	; 0x12c
   184c8:	mov	r0, r6
   184cc:	str	ip, [sp]
   184d0:	str	r7, [sp, #4]
   184d4:	str	lr, [sp, #16]
   184d8:	ldr	ip, [r4, #296]	; 0x128
   184dc:	str	ip, [sp, #12]
   184e0:	bl	1625c <__assert_fail@plt+0x5058>
   184e4:	cmp	r9, r0
   184e8:	bhi	18548 <__assert_fail@plt+0x7344>
   184ec:	add	r9, r0, #1
   184f0:	cmp	r6, r4
   184f4:	str	r9, [r5]
   184f8:	beq	18504 <__assert_fail@plt+0x7300>
   184fc:	mov	r0, r6
   18500:	bl	15c8c <__assert_fail@plt+0x4a88>
   18504:	mov	r0, r9
   18508:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   1850c:	ldr	ip, [r4, #256]	; 0x100
   18510:	mov	r1, r9
   18514:	mov	r3, fp
   18518:	mov	r2, sl
   1851c:	mov	r6, r0
   18520:	ldr	r9, [r4, #296]	; 0x128
   18524:	ldr	lr, [r4, #300]	; 0x12c
   18528:	str	r0, [r5, #4]
   1852c:	str	ip, [sp]
   18530:	ldr	ip, [pc, #100]	; 1859c <__assert_fail@plt+0x7398>
   18534:	str	r7, [sp, #4]
   18538:	str	ip, [sp, #8]
   1853c:	str	r9, [sp, #12]
   18540:	str	lr, [sp, #16]
   18544:	bl	1625c <__assert_fail@plt+0x5058>
   18548:	ldr	r3, [sp, #28]
   1854c:	mov	r0, r6
   18550:	str	r3, [r8]
   18554:	add	sp, sp, #44	; 0x2c
   18558:	ldrd	r4, [sp]
   1855c:	ldrd	r6, [sp, #8]
   18560:	ldrd	r8, [sp, #16]
   18564:	ldrd	sl, [sp, #24]
   18568:	add	sp, sp, #32
   1856c:	pop	{pc}		; (ldr pc, [sp], #4)
   18570:	mov	r0, #8
   18574:	mvn	r3, #-2147483648	; 0x80000000
   18578:	add	r1, sp, #36	; 0x24
   1857c:	str	r0, [sp]
   18580:	mov	r0, #0
   18584:	bl	1a568 <__assert_fail@plt+0x9364>
   18588:	ldrd	r2, [r4, #8]
   1858c:	mov	r5, r0
   18590:	str	r0, [r4]
   18594:	strd	r2, [r0]
   18598:	b	18470 <__assert_fail@plt+0x726c>
   1859c:	andeq	lr, r2, ip, asr #6
   185a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   185a4:	mov	r4, #0
   185a8:	mov	r5, #0
   185ac:	strd	r6, [sp, #8]
   185b0:	cmp	r1, #10
   185b4:	str	lr, [sp, #16]
   185b8:	sub	sp, sp, #100	; 0x64
   185bc:	strd	r4, [sp, #48]	; 0x30
   185c0:	beq	18608 <__assert_fail@plt+0x7404>
   185c4:	mov	r3, sp
   185c8:	strd	r4, [sp, #8]
   185cc:	str	r1, [sp, #48]	; 0x30
   185d0:	mov	r1, r2
   185d4:	mvn	r2, #0
   185d8:	ldrd	r6, [sp, #48]	; 0x30
   185dc:	strd	r6, [sp]
   185e0:	strd	r4, [sp, #16]
   185e4:	strd	r4, [sp, #24]
   185e8:	strd	r4, [sp, #32]
   185ec:	strd	r4, [sp, #40]	; 0x28
   185f0:	bl	17c48 <__assert_fail@plt+0x6a44>
   185f4:	add	sp, sp, #100	; 0x64
   185f8:	ldrd	r4, [sp]
   185fc:	ldrd	r6, [sp, #8]
   18600:	add	sp, sp, #16
   18604:	pop	{pc}		; (ldr pc, [sp], #4)
   18608:	bl	111ec <abort@plt>
   1860c:	strd	r4, [sp, #-20]!	; 0xffffffec
   18610:	mov	r4, #0
   18614:	mov	r5, #0
   18618:	strd	r6, [sp, #8]
   1861c:	cmp	r1, #10
   18620:	str	lr, [sp, #16]
   18624:	sub	sp, sp, #100	; 0x64
   18628:	strd	r4, [sp, #48]	; 0x30
   1862c:	beq	18678 <__assert_fail@plt+0x7474>
   18630:	mov	ip, r2
   18634:	mov	r2, r3
   18638:	strd	r4, [sp, #8]
   1863c:	str	r1, [sp, #48]	; 0x30
   18640:	mov	r3, sp
   18644:	mov	r1, ip
   18648:	ldrd	r6, [sp, #48]	; 0x30
   1864c:	strd	r6, [sp]
   18650:	strd	r4, [sp, #16]
   18654:	strd	r4, [sp, #24]
   18658:	strd	r4, [sp, #32]
   1865c:	strd	r4, [sp, #40]	; 0x28
   18660:	bl	17c48 <__assert_fail@plt+0x6a44>
   18664:	add	sp, sp, #100	; 0x64
   18668:	ldrd	r4, [sp]
   1866c:	ldrd	r6, [sp, #8]
   18670:	add	sp, sp, #16
   18674:	pop	{pc}		; (ldr pc, [sp], #4)
   18678:	bl	111ec <abort@plt>
   1867c:	mov	r2, #0
   18680:	mov	r3, #0
   18684:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18688:	strd	r6, [sp, #8]
   1868c:	cmp	r0, #10
   18690:	strd	r8, [sp, #16]
   18694:	strd	sl, [sp, #24]
   18698:	str	lr, [sp, #32]
   1869c:	sub	sp, sp, #124	; 0x7c
   186a0:	strd	r2, [sp, #72]	; 0x48
   186a4:	strd	r2, [sp, #80]	; 0x50
   186a8:	strd	r2, [sp, #88]	; 0x58
   186ac:	strd	r2, [sp, #96]	; 0x60
   186b0:	strd	r2, [sp, #104]	; 0x68
   186b4:	strd	r2, [sp, #112]	; 0x70
   186b8:	beq	1885c <__assert_fail@plt+0x7658>
   186bc:	mov	r6, r1
   186c0:	movw	r4, #57640	; 0xe128
   186c4:	movt	r4, #2
   186c8:	str	r0, [sp, #72]	; 0x48
   186cc:	ldrd	r0, [sp, #72]	; 0x48
   186d0:	strd	r0, [sp, #24]
   186d4:	strd	r2, [sp, #32]
   186d8:	strd	r2, [sp, #40]	; 0x28
   186dc:	strd	r2, [sp, #48]	; 0x30
   186e0:	strd	r2, [sp, #56]	; 0x38
   186e4:	strd	r2, [sp, #64]	; 0x40
   186e8:	bl	110d8 <__errno_location@plt>
   186ec:	mov	r8, r0
   186f0:	ldr	r5, [r4]
   186f4:	ldr	r2, [r4, #4]
   186f8:	ldr	r9, [r0]
   186fc:	cmp	r2, #0
   18700:	bgt	1875c <__assert_fail@plt+0x7558>
   18704:	add	r3, r4, #8
   18708:	str	r2, [sp, #72]	; 0x48
   1870c:	rsb	r2, r2, #1
   18710:	cmp	r5, r3
   18714:	beq	18830 <__assert_fail@plt+0x762c>
   18718:	mov	r3, #8
   1871c:	mov	r0, r5
   18720:	add	r1, sp, #72	; 0x48
   18724:	str	r3, [sp]
   18728:	mvn	r3, #-2147483648	; 0x80000000
   1872c:	bl	1a568 <__assert_fail@plt+0x9364>
   18730:	mov	r5, r0
   18734:	str	r0, [r4]
   18738:	ldr	r0, [r4, #4]
   1873c:	mov	r1, #0
   18740:	ldr	r2, [sp, #72]	; 0x48
   18744:	sub	r2, r2, r0
   18748:	add	r0, r5, r0, lsl #3
   1874c:	lsl	r2, r2, #3
   18750:	bl	11108 <memset@plt>
   18754:	ldr	r3, [sp, #72]	; 0x48
   18758:	str	r3, [r4, #4]
   1875c:	ldr	sl, [r5]
   18760:	add	r0, sp, #32
   18764:	mvn	r3, #0
   18768:	mov	r2, r6
   1876c:	ldr	r7, [sp, #28]
   18770:	ldr	r4, [r5, #4]
   18774:	mov	r1, sl
   18778:	str	r0, [sp, #8]
   1877c:	ldr	lr, [sp, #24]
   18780:	orr	r7, r7, #1
   18784:	ldr	ip, [sp, #64]	; 0x40
   18788:	mov	r0, r4
   1878c:	ldr	fp, [sp, #68]	; 0x44
   18790:	str	lr, [sp]
   18794:	str	r7, [sp, #4]
   18798:	str	ip, [sp, #12]
   1879c:	str	fp, [sp, #16]
   187a0:	bl	1625c <__assert_fail@plt+0x5058>
   187a4:	cmp	sl, r0
   187a8:	bhi	1880c <__assert_fail@plt+0x7608>
   187ac:	add	sl, r0, #1
   187b0:	movw	r3, #57924	; 0xe244
   187b4:	movt	r3, #2
   187b8:	cmp	r4, r3
   187bc:	str	sl, [r5]
   187c0:	beq	187cc <__assert_fail@plt+0x75c8>
   187c4:	mov	r0, r4
   187c8:	bl	15c8c <__assert_fail@plt+0x4a88>
   187cc:	mov	r0, sl
   187d0:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   187d4:	ldr	r3, [sp, #24]
   187d8:	mov	r2, r6
   187dc:	mov	r1, sl
   187e0:	mov	r4, r0
   187e4:	ldr	lr, [sp, #64]	; 0x40
   187e8:	ldr	ip, [sp, #68]	; 0x44
   187ec:	str	r0, [r5, #4]
   187f0:	add	r5, sp, #32
   187f4:	stm	sp, {r3, r7}
   187f8:	mvn	r3, #0
   187fc:	str	r5, [sp, #8]
   18800:	str	lr, [sp, #12]
   18804:	str	ip, [sp, #16]
   18808:	bl	1625c <__assert_fail@plt+0x5058>
   1880c:	mov	r0, r4
   18810:	str	r9, [r8]
   18814:	add	sp, sp, #124	; 0x7c
   18818:	ldrd	r4, [sp]
   1881c:	ldrd	r6, [sp, #8]
   18820:	ldrd	r8, [sp, #16]
   18824:	ldrd	sl, [sp, #24]
   18828:	add	sp, sp, #32
   1882c:	pop	{pc}		; (ldr pc, [sp], #4)
   18830:	mov	r0, #8
   18834:	mvn	r3, #-2147483648	; 0x80000000
   18838:	add	r1, sp, #72	; 0x48
   1883c:	str	r0, [sp]
   18840:	mov	r0, #0
   18844:	bl	1a568 <__assert_fail@plt+0x9364>
   18848:	ldrd	r2, [r4, #8]
   1884c:	mov	r5, r0
   18850:	str	r0, [r4]
   18854:	strd	r2, [r0]
   18858:	b	18738 <__assert_fail@plt+0x7534>
   1885c:	bl	111ec <abort@plt>
   18860:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18864:	cmp	r0, #10
   18868:	strd	r6, [sp, #8]
   1886c:	mov	r6, #0
   18870:	mov	r7, #0
   18874:	strd	r8, [sp, #16]
   18878:	strd	sl, [sp, #24]
   1887c:	str	lr, [sp, #32]
   18880:	sub	sp, sp, #124	; 0x7c
   18884:	strd	r6, [sp, #72]	; 0x48
   18888:	strd	r6, [sp, #80]	; 0x50
   1888c:	strd	r6, [sp, #88]	; 0x58
   18890:	strd	r6, [sp, #96]	; 0x60
   18894:	strd	r6, [sp, #104]	; 0x68
   18898:	strd	r6, [sp, #112]	; 0x70
   1889c:	beq	18a48 <__assert_fail@plt+0x7844>
   188a0:	mov	sl, r2
   188a4:	movw	r5, #57640	; 0xe128
   188a8:	movt	r5, #2
   188ac:	str	r0, [sp, #72]	; 0x48
   188b0:	mov	r9, r1
   188b4:	ldrd	r2, [sp, #72]	; 0x48
   188b8:	strd	r2, [sp, #24]
   188bc:	strd	r6, [sp, #32]
   188c0:	strd	r6, [sp, #40]	; 0x28
   188c4:	strd	r6, [sp, #48]	; 0x30
   188c8:	strd	r6, [sp, #56]	; 0x38
   188cc:	strd	r6, [sp, #64]	; 0x40
   188d0:	bl	110d8 <__errno_location@plt>
   188d4:	mov	r7, r0
   188d8:	ldr	r4, [r5]
   188dc:	ldr	r2, [r5, #4]
   188e0:	ldr	fp, [r0]
   188e4:	cmp	r2, #0
   188e8:	bgt	18944 <__assert_fail@plt+0x7740>
   188ec:	add	r3, r5, #8
   188f0:	str	r2, [sp, #72]	; 0x48
   188f4:	rsb	r2, r2, #1
   188f8:	cmp	r4, r3
   188fc:	beq	18a1c <__assert_fail@plt+0x7818>
   18900:	mov	r3, #8
   18904:	mov	r0, r4
   18908:	add	r1, sp, #72	; 0x48
   1890c:	str	r3, [sp]
   18910:	mvn	r3, #-2147483648	; 0x80000000
   18914:	bl	1a568 <__assert_fail@plt+0x9364>
   18918:	mov	r4, r0
   1891c:	str	r0, [r5]
   18920:	ldr	r0, [r5, #4]
   18924:	mov	r1, #0
   18928:	ldr	r2, [sp, #72]	; 0x48
   1892c:	sub	r2, r2, r0
   18930:	add	r0, r4, r0, lsl #3
   18934:	lsl	r2, r2, #3
   18938:	bl	11108 <memset@plt>
   1893c:	ldr	r3, [sp, #72]	; 0x48
   18940:	str	r3, [r5, #4]
   18944:	ldr	ip, [sp, #24]
   18948:	add	r0, sp, #32
   1894c:	mov	r3, sl
   18950:	mov	r2, r9
   18954:	ldr	r6, [sp, #28]
   18958:	ldr	r8, [r4]
   1895c:	ldr	r5, [r4, #4]
   18960:	str	ip, [sp]
   18964:	orr	r6, r6, #1
   18968:	ldr	ip, [sp, #64]	; 0x40
   1896c:	mov	r1, r8
   18970:	str	r6, [sp, #4]
   18974:	ldr	lr, [sp, #68]	; 0x44
   18978:	str	r0, [sp, #8]
   1897c:	mov	r0, r5
   18980:	str	ip, [sp, #12]
   18984:	str	lr, [sp, #16]
   18988:	bl	1625c <__assert_fail@plt+0x5058>
   1898c:	cmp	r8, r0
   18990:	bhi	189f8 <__assert_fail@plt+0x77f4>
   18994:	add	r8, r0, #1
   18998:	movw	r3, #57924	; 0xe244
   1899c:	movt	r3, #2
   189a0:	cmp	r5, r3
   189a4:	str	r8, [r4]
   189a8:	beq	189b4 <__assert_fail@plt+0x77b0>
   189ac:	mov	r0, r5
   189b0:	bl	15c8c <__assert_fail@plt+0x4a88>
   189b4:	mov	r0, r8
   189b8:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   189bc:	ldr	lr, [sp, #24]
   189c0:	mov	r1, r8
   189c4:	mov	r3, sl
   189c8:	mov	r2, r9
   189cc:	mov	r5, r0
   189d0:	ldr	r8, [sp, #64]	; 0x40
   189d4:	ldr	ip, [sp, #68]	; 0x44
   189d8:	str	r0, [r4, #4]
   189dc:	str	lr, [sp]
   189e0:	add	lr, sp, #32
   189e4:	str	r6, [sp, #4]
   189e8:	str	lr, [sp, #8]
   189ec:	str	r8, [sp, #12]
   189f0:	str	ip, [sp, #16]
   189f4:	bl	1625c <__assert_fail@plt+0x5058>
   189f8:	mov	r0, r5
   189fc:	str	fp, [r7]
   18a00:	add	sp, sp, #124	; 0x7c
   18a04:	ldrd	r4, [sp]
   18a08:	ldrd	r6, [sp, #8]
   18a0c:	ldrd	r8, [sp, #16]
   18a10:	ldrd	sl, [sp, #24]
   18a14:	add	sp, sp, #32
   18a18:	pop	{pc}		; (ldr pc, [sp], #4)
   18a1c:	mov	r0, #8
   18a20:	mvn	r3, #-2147483648	; 0x80000000
   18a24:	add	r1, sp, #72	; 0x48
   18a28:	str	r0, [sp]
   18a2c:	mov	r0, #0
   18a30:	bl	1a568 <__assert_fail@plt+0x9364>
   18a34:	ldrd	r2, [r5, #8]
   18a38:	mov	r4, r0
   18a3c:	str	r0, [r5]
   18a40:	strd	r2, [r0]
   18a44:	b	18920 <__assert_fail@plt+0x771c>
   18a48:	bl	111ec <abort@plt>
   18a4c:	ldr	r3, [pc, #492]	; 18c40 <__assert_fail@plt+0x7a3c>
   18a50:	lsr	ip, r2, #5
   18a54:	and	r2, r2, #31
   18a58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18a5c:	movw	r5, #57640	; 0xe128
   18a60:	movt	r5, #2
   18a64:	strd	r6, [sp, #8]
   18a68:	strd	r8, [sp, #16]
   18a6c:	strd	sl, [sp, #24]
   18a70:	mov	sl, r0
   18a74:	mov	fp, r1
   18a78:	ldrd	r0, [r3]
   18a7c:	str	lr, [sp, #32]
   18a80:	sub	sp, sp, #92	; 0x5c
   18a84:	ldrd	r8, [r3, #8]
   18a88:	add	r6, sp, #48	; 0x30
   18a8c:	strd	r0, [sp, #40]	; 0x28
   18a90:	ldrd	r0, [r3, #16]
   18a94:	strd	r8, [sp, #48]	; 0x30
   18a98:	ldrd	r8, [r3, #24]
   18a9c:	strd	r0, [sp, #56]	; 0x38
   18aa0:	ldrd	r0, [r3, #32]
   18aa4:	strd	r8, [sp, #64]	; 0x40
   18aa8:	ldrd	r8, [r3, #40]	; 0x28
   18aac:	strd	r0, [sp, #72]	; 0x48
   18ab0:	strd	r8, [sp, #80]	; 0x50
   18ab4:	ldr	r3, [r6, ip, lsl #2]
   18ab8:	mvn	r1, r3, lsr r2
   18abc:	and	r1, r1, #1
   18ac0:	eor	r2, r3, r1, lsl r2
   18ac4:	str	r2, [r6, ip, lsl #2]
   18ac8:	bl	110d8 <__errno_location@plt>
   18acc:	ldr	r3, [r0]
   18ad0:	mov	r8, r0
   18ad4:	ldr	r2, [r5, #4]
   18ad8:	ldr	r4, [r5]
   18adc:	str	r3, [sp, #28]
   18ae0:	cmp	r2, #0
   18ae4:	bgt	18b40 <__assert_fail@plt+0x793c>
   18ae8:	add	r3, r5, #8
   18aec:	str	r2, [sp, #36]	; 0x24
   18af0:	rsb	r2, r2, #1
   18af4:	cmp	r4, r3
   18af8:	beq	18c14 <__assert_fail@plt+0x7a10>
   18afc:	mov	r1, #8
   18b00:	mov	r0, r4
   18b04:	mvn	r3, #-2147483648	; 0x80000000
   18b08:	str	r1, [sp]
   18b0c:	add	r1, sp, #36	; 0x24
   18b10:	bl	1a568 <__assert_fail@plt+0x9364>
   18b14:	mov	r4, r0
   18b18:	str	r0, [r5]
   18b1c:	ldr	r0, [r5, #4]
   18b20:	mov	r1, #0
   18b24:	ldr	r2, [sp, #36]	; 0x24
   18b28:	sub	r2, r2, r0
   18b2c:	add	r0, r4, r0, lsl #3
   18b30:	lsl	r2, r2, #3
   18b34:	bl	11108 <memset@plt>
   18b38:	ldr	r3, [sp, #36]	; 0x24
   18b3c:	str	r3, [r5, #4]
   18b40:	ldr	ip, [sp, #40]	; 0x28
   18b44:	mov	r3, fp
   18b48:	mov	r2, sl
   18b4c:	ldr	r7, [sp, #44]	; 0x2c
   18b50:	ldr	r9, [r4]
   18b54:	ldr	r5, [r4, #4]
   18b58:	str	ip, [sp]
   18b5c:	orr	r7, r7, #1
   18b60:	ldr	ip, [sp, #80]	; 0x50
   18b64:	mov	r1, r9
   18b68:	str	r7, [sp, #4]
   18b6c:	ldr	lr, [sp, #84]	; 0x54
   18b70:	mov	r0, r5
   18b74:	str	r6, [sp, #8]
   18b78:	str	ip, [sp, #12]
   18b7c:	str	lr, [sp, #16]
   18b80:	bl	1625c <__assert_fail@plt+0x5058>
   18b84:	cmp	r9, r0
   18b88:	bhi	18bec <__assert_fail@plt+0x79e8>
   18b8c:	add	r9, r0, #1
   18b90:	movw	r3, #57924	; 0xe244
   18b94:	movt	r3, #2
   18b98:	cmp	r5, r3
   18b9c:	str	r9, [r4]
   18ba0:	beq	18bac <__assert_fail@plt+0x79a8>
   18ba4:	mov	r0, r5
   18ba8:	bl	15c8c <__assert_fail@plt+0x4a88>
   18bac:	mov	r0, r9
   18bb0:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   18bb4:	mov	r1, r9
   18bb8:	ldr	ip, [sp, #40]	; 0x28
   18bbc:	mov	r3, fp
   18bc0:	mov	r2, sl
   18bc4:	mov	r5, r0
   18bc8:	ldr	r9, [sp, #80]	; 0x50
   18bcc:	ldr	lr, [sp, #84]	; 0x54
   18bd0:	str	r0, [r4, #4]
   18bd4:	str	ip, [sp]
   18bd8:	str	r7, [sp, #4]
   18bdc:	str	r6, [sp, #8]
   18be0:	str	r9, [sp, #12]
   18be4:	str	lr, [sp, #16]
   18be8:	bl	1625c <__assert_fail@plt+0x5058>
   18bec:	ldr	r3, [sp, #28]
   18bf0:	mov	r0, r5
   18bf4:	str	r3, [r8]
   18bf8:	add	sp, sp, #92	; 0x5c
   18bfc:	ldrd	r4, [sp]
   18c00:	ldrd	r6, [sp, #8]
   18c04:	ldrd	r8, [sp, #16]
   18c08:	ldrd	sl, [sp, #24]
   18c0c:	add	sp, sp, #32
   18c10:	pop	{pc}		; (ldr pc, [sp], #4)
   18c14:	mov	r0, #8
   18c18:	mvn	r3, #-2147483648	; 0x80000000
   18c1c:	add	r1, sp, #36	; 0x24
   18c20:	str	r0, [sp]
   18c24:	mov	r0, #0
   18c28:	bl	1a568 <__assert_fail@plt+0x9364>
   18c2c:	ldrd	r2, [r5, #8]
   18c30:	mov	r4, r0
   18c34:	str	r0, [r5]
   18c38:	strd	r2, [r0]
   18c3c:	b	18b1c <__assert_fail@plt+0x7918>
   18c40:	andeq	lr, r2, r4, asr #6
   18c44:	ldr	ip, [pc, #476]	; 18e28 <__assert_fail@plt+0x7c24>
   18c48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18c4c:	movw	r4, #57640	; 0xe128
   18c50:	movt	r4, #2
   18c54:	ldrd	r2, [ip, #8]
   18c58:	strd	r6, [sp, #8]
   18c5c:	lsr	r7, r1, #5
   18c60:	mov	r6, r0
   18c64:	strd	r8, [sp, #16]
   18c68:	str	lr, [sp, #32]
   18c6c:	and	lr, r1, #31
   18c70:	ldrd	r0, [ip]
   18c74:	strd	sl, [sp, #24]
   18c78:	sub	sp, sp, #84	; 0x54
   18c7c:	add	r5, sp, #40	; 0x28
   18c80:	strd	r0, [sp, #32]
   18c84:	strd	r2, [sp, #40]	; 0x28
   18c88:	ldrd	r0, [ip, #16]
   18c8c:	ldrd	r2, [ip, #24]
   18c90:	strd	r0, [sp, #48]	; 0x30
   18c94:	ldrd	r0, [ip, #32]
   18c98:	strd	r2, [sp, #56]	; 0x38
   18c9c:	ldrd	r2, [ip, #40]	; 0x28
   18ca0:	strd	r0, [sp, #64]	; 0x40
   18ca4:	strd	r2, [sp, #72]	; 0x48
   18ca8:	ldr	r1, [r5, r7, lsl #2]
   18cac:	mvn	r3, r1, lsr lr
   18cb0:	and	r3, r3, #1
   18cb4:	eor	r1, r1, r3, lsl lr
   18cb8:	str	r1, [r5, r7, lsl #2]
   18cbc:	bl	110d8 <__errno_location@plt>
   18cc0:	mov	r9, r0
   18cc4:	ldr	sl, [r0]
   18cc8:	ldr	r2, [r4, #4]
   18ccc:	ldr	r7, [r4]
   18cd0:	cmp	r2, #0
   18cd4:	bgt	18d30 <__assert_fail@plt+0x7b2c>
   18cd8:	add	r3, r4, #8
   18cdc:	str	r2, [sp, #28]
   18ce0:	rsb	r2, r2, #1
   18ce4:	cmp	r7, r3
   18ce8:	beq	18dfc <__assert_fail@plt+0x7bf8>
   18cec:	mov	r1, #8
   18cf0:	mov	r0, r7
   18cf4:	mvn	r3, #-2147483648	; 0x80000000
   18cf8:	str	r1, [sp]
   18cfc:	add	r1, sp, #28
   18d00:	bl	1a568 <__assert_fail@plt+0x9364>
   18d04:	mov	r7, r0
   18d08:	str	r0, [r4]
   18d0c:	ldr	r0, [r4, #4]
   18d10:	mov	r1, #0
   18d14:	ldr	r2, [sp, #28]
   18d18:	sub	r2, r2, r0
   18d1c:	add	r0, r7, r0, lsl #3
   18d20:	lsl	r2, r2, #3
   18d24:	bl	11108 <memset@plt>
   18d28:	ldr	r3, [sp, #28]
   18d2c:	str	r3, [r4, #4]
   18d30:	ldr	ip, [sp, #32]
   18d34:	mvn	r3, #0
   18d38:	mov	r2, r6
   18d3c:	ldr	r8, [sp, #36]	; 0x24
   18d40:	ldr	fp, [r7]
   18d44:	ldr	r4, [r7, #4]
   18d48:	str	ip, [sp]
   18d4c:	orr	r8, r8, #1
   18d50:	ldr	ip, [sp, #72]	; 0x48
   18d54:	mov	r1, fp
   18d58:	str	r8, [sp, #4]
   18d5c:	ldr	lr, [sp, #76]	; 0x4c
   18d60:	mov	r0, r4
   18d64:	str	r5, [sp, #8]
   18d68:	str	ip, [sp, #12]
   18d6c:	str	lr, [sp, #16]
   18d70:	bl	1625c <__assert_fail@plt+0x5058>
   18d74:	cmp	fp, r0
   18d78:	bhi	18dd8 <__assert_fail@plt+0x7bd4>
   18d7c:	add	fp, r0, #1
   18d80:	movw	r3, #57924	; 0xe244
   18d84:	movt	r3, #2
   18d88:	cmp	r4, r3
   18d8c:	str	fp, [r7]
   18d90:	beq	18d9c <__assert_fail@plt+0x7b98>
   18d94:	mov	r0, r4
   18d98:	bl	15c8c <__assert_fail@plt+0x4a88>
   18d9c:	mov	r0, fp
   18da0:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   18da4:	ldr	r3, [sp, #32]
   18da8:	mov	r2, r6
   18dac:	mov	r1, fp
   18db0:	mov	r4, r0
   18db4:	ldr	lr, [sp, #72]	; 0x48
   18db8:	ldr	ip, [sp, #76]	; 0x4c
   18dbc:	str	r0, [r7, #4]
   18dc0:	stm	sp, {r3, r8}
   18dc4:	mvn	r3, #0
   18dc8:	str	r5, [sp, #8]
   18dcc:	str	lr, [sp, #12]
   18dd0:	str	ip, [sp, #16]
   18dd4:	bl	1625c <__assert_fail@plt+0x5058>
   18dd8:	mov	r0, r4
   18ddc:	str	sl, [r9]
   18de0:	add	sp, sp, #84	; 0x54
   18de4:	ldrd	r4, [sp]
   18de8:	ldrd	r6, [sp, #8]
   18dec:	ldrd	r8, [sp, #16]
   18df0:	ldrd	sl, [sp, #24]
   18df4:	add	sp, sp, #32
   18df8:	pop	{pc}		; (ldr pc, [sp], #4)
   18dfc:	mov	r0, #8
   18e00:	mvn	r3, #-2147483648	; 0x80000000
   18e04:	add	r1, sp, #28
   18e08:	str	r0, [sp]
   18e0c:	mov	r0, #0
   18e10:	bl	1a568 <__assert_fail@plt+0x9364>
   18e14:	ldrd	r2, [r4, #8]
   18e18:	mov	r7, r0
   18e1c:	str	r0, [r4]
   18e20:	strd	r2, [r0]
   18e24:	b	18d0c <__assert_fail@plt+0x7b08>
   18e28:	andeq	lr, r2, r4, asr #6
   18e2c:	ldr	ip, [pc, #472]	; 1900c <__assert_fail@plt+0x7e08>
   18e30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e34:	mov	r5, r0
   18e38:	movw	r4, #57640	; 0xe128
   18e3c:	movt	r4, #2
   18e40:	ldrd	r2, [ip]
   18e44:	ldrd	r0, [ip, #8]
   18e48:	strd	r6, [sp, #8]
   18e4c:	strd	r8, [sp, #16]
   18e50:	strd	sl, [sp, #24]
   18e54:	str	lr, [sp, #32]
   18e58:	sub	sp, sp, #84	; 0x54
   18e5c:	strd	r2, [sp, #32]
   18e60:	strd	r0, [sp, #40]	; 0x28
   18e64:	ldr	r6, [sp, #44]	; 0x2c
   18e68:	ldrd	r2, [ip, #16]
   18e6c:	ldrd	r0, [ip, #24]
   18e70:	mvn	lr, r6
   18e74:	and	lr, lr, #67108864	; 0x4000000
   18e78:	eor	lr, lr, r6
   18e7c:	ldrd	r6, [ip, #40]	; 0x28
   18e80:	strd	r2, [sp, #48]	; 0x30
   18e84:	ldrd	r2, [ip, #32]
   18e88:	str	lr, [sp, #44]	; 0x2c
   18e8c:	strd	r0, [sp, #56]	; 0x38
   18e90:	strd	r2, [sp, #64]	; 0x40
   18e94:	strd	r6, [sp, #72]	; 0x48
   18e98:	bl	110d8 <__errno_location@plt>
   18e9c:	mov	r8, r0
   18ea0:	ldr	r9, [r0]
   18ea4:	ldr	r2, [r4, #4]
   18ea8:	ldr	r6, [r4]
   18eac:	cmp	r2, #0
   18eb0:	bgt	18f0c <__assert_fail@plt+0x7d08>
   18eb4:	add	r3, r4, #8
   18eb8:	str	r2, [sp, #28]
   18ebc:	rsb	r2, r2, #1
   18ec0:	cmp	r6, r3
   18ec4:	beq	18fe0 <__assert_fail@plt+0x7ddc>
   18ec8:	mov	r1, #8
   18ecc:	mov	r0, r6
   18ed0:	mvn	r3, #-2147483648	; 0x80000000
   18ed4:	str	r1, [sp]
   18ed8:	add	r1, sp, #28
   18edc:	bl	1a568 <__assert_fail@plt+0x9364>
   18ee0:	mov	r6, r0
   18ee4:	str	r0, [r4]
   18ee8:	ldr	r0, [r4, #4]
   18eec:	mov	r1, #0
   18ef0:	ldr	r2, [sp, #28]
   18ef4:	sub	r2, r2, r0
   18ef8:	add	r0, r6, r0, lsl #3
   18efc:	lsl	r2, r2, #3
   18f00:	bl	11108 <memset@plt>
   18f04:	ldr	r3, [sp, #28]
   18f08:	str	r3, [r4, #4]
   18f0c:	ldr	sl, [r6]
   18f10:	add	r0, sp, #40	; 0x28
   18f14:	mvn	r3, #0
   18f18:	mov	r2, r5
   18f1c:	ldr	r7, [sp, #36]	; 0x24
   18f20:	ldr	r4, [r6, #4]
   18f24:	mov	r1, sl
   18f28:	str	r0, [sp, #8]
   18f2c:	ldr	lr, [sp, #32]
   18f30:	orr	r7, r7, #1
   18f34:	ldr	ip, [sp, #72]	; 0x48
   18f38:	mov	r0, r4
   18f3c:	ldr	fp, [sp, #76]	; 0x4c
   18f40:	str	lr, [sp]
   18f44:	str	r7, [sp, #4]
   18f48:	str	ip, [sp, #12]
   18f4c:	str	fp, [sp, #16]
   18f50:	bl	1625c <__assert_fail@plt+0x5058>
   18f54:	cmp	sl, r0
   18f58:	bhi	18fbc <__assert_fail@plt+0x7db8>
   18f5c:	add	sl, r0, #1
   18f60:	movw	r3, #57924	; 0xe244
   18f64:	movt	r3, #2
   18f68:	cmp	r4, r3
   18f6c:	str	sl, [r6]
   18f70:	beq	18f7c <__assert_fail@plt+0x7d78>
   18f74:	mov	r0, r4
   18f78:	bl	15c8c <__assert_fail@plt+0x4a88>
   18f7c:	mov	r0, sl
   18f80:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   18f84:	ldr	r3, [sp, #32]
   18f88:	mov	r2, r5
   18f8c:	add	r5, sp, #40	; 0x28
   18f90:	mov	r1, sl
   18f94:	mov	r4, r0
   18f98:	ldr	lr, [sp, #72]	; 0x48
   18f9c:	ldr	ip, [sp, #76]	; 0x4c
   18fa0:	str	r0, [r6, #4]
   18fa4:	stm	sp, {r3, r7}
   18fa8:	mvn	r3, #0
   18fac:	str	r5, [sp, #8]
   18fb0:	str	lr, [sp, #12]
   18fb4:	str	ip, [sp, #16]
   18fb8:	bl	1625c <__assert_fail@plt+0x5058>
   18fbc:	mov	r0, r4
   18fc0:	str	r9, [r8]
   18fc4:	add	sp, sp, #84	; 0x54
   18fc8:	ldrd	r4, [sp]
   18fcc:	ldrd	r6, [sp, #8]
   18fd0:	ldrd	r8, [sp, #16]
   18fd4:	ldrd	sl, [sp, #24]
   18fd8:	add	sp, sp, #32
   18fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   18fe0:	mov	r0, #8
   18fe4:	mvn	r3, #-2147483648	; 0x80000000
   18fe8:	add	r1, sp, #28
   18fec:	str	r0, [sp]
   18ff0:	mov	r0, #0
   18ff4:	bl	1a568 <__assert_fail@plt+0x9364>
   18ff8:	ldrd	r2, [r4, #8]
   18ffc:	mov	r6, r0
   19000:	str	r0, [r4]
   19004:	strd	r2, [r0]
   19008:	b	18ee8 <__assert_fail@plt+0x7ce4>
   1900c:	andeq	lr, r2, r4, asr #6
   19010:	ldr	ip, [pc, #480]	; 191f8 <__assert_fail@plt+0x7ff4>
   19014:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19018:	mov	r5, r0
   1901c:	movw	r4, #57640	; 0xe128
   19020:	movt	r4, #2
   19024:	ldrd	r2, [ip]
   19028:	strd	r6, [sp, #8]
   1902c:	mov	r6, r1
   19030:	ldrd	r0, [ip, #8]
   19034:	strd	r8, [sp, #16]
   19038:	strd	sl, [sp, #24]
   1903c:	str	lr, [sp, #32]
   19040:	sub	sp, sp, #84	; 0x54
   19044:	ldrd	r8, [ip, #40]	; 0x28
   19048:	strd	r2, [sp, #32]
   1904c:	strd	r0, [sp, #40]	; 0x28
   19050:	ldrd	r2, [ip, #16]
   19054:	ldr	r7, [sp, #44]	; 0x2c
   19058:	ldrd	r0, [ip, #24]
   1905c:	strd	r2, [sp, #48]	; 0x30
   19060:	ldrd	r2, [ip, #32]
   19064:	mvn	lr, r7
   19068:	and	lr, lr, #67108864	; 0x4000000
   1906c:	eor	lr, lr, r7
   19070:	str	lr, [sp, #44]	; 0x2c
   19074:	strd	r0, [sp, #56]	; 0x38
   19078:	strd	r2, [sp, #64]	; 0x40
   1907c:	strd	r8, [sp, #72]	; 0x48
   19080:	bl	110d8 <__errno_location@plt>
   19084:	mov	r9, r0
   19088:	ldr	sl, [r0]
   1908c:	ldr	r2, [r4, #4]
   19090:	ldr	r7, [r4]
   19094:	cmp	r2, #0
   19098:	bgt	190f4 <__assert_fail@plt+0x7ef0>
   1909c:	add	r3, r4, #8
   190a0:	str	r2, [sp, #28]
   190a4:	rsb	r2, r2, #1
   190a8:	cmp	r7, r3
   190ac:	beq	191cc <__assert_fail@plt+0x7fc8>
   190b0:	mov	r1, #8
   190b4:	mov	r0, r7
   190b8:	mvn	r3, #-2147483648	; 0x80000000
   190bc:	str	r1, [sp]
   190c0:	add	r1, sp, #28
   190c4:	bl	1a568 <__assert_fail@plt+0x9364>
   190c8:	mov	r7, r0
   190cc:	str	r0, [r4]
   190d0:	ldr	r0, [r4, #4]
   190d4:	mov	r1, #0
   190d8:	ldr	r2, [sp, #28]
   190dc:	sub	r2, r2, r0
   190e0:	add	r0, r7, r0, lsl #3
   190e4:	lsl	r2, r2, #3
   190e8:	bl	11108 <memset@plt>
   190ec:	ldr	r3, [sp, #28]
   190f0:	str	r3, [r4, #4]
   190f4:	ldr	ip, [sp, #32]
   190f8:	add	r0, sp, #40	; 0x28
   190fc:	mov	r3, r6
   19100:	mov	r2, r5
   19104:	ldr	r8, [sp, #36]	; 0x24
   19108:	ldr	fp, [r7]
   1910c:	ldr	r4, [r7, #4]
   19110:	str	ip, [sp]
   19114:	orr	r8, r8, #1
   19118:	ldr	ip, [sp, #72]	; 0x48
   1911c:	mov	r1, fp
   19120:	str	r8, [sp, #4]
   19124:	ldr	lr, [sp, #76]	; 0x4c
   19128:	str	r0, [sp, #8]
   1912c:	mov	r0, r4
   19130:	str	ip, [sp, #12]
   19134:	str	lr, [sp, #16]
   19138:	bl	1625c <__assert_fail@plt+0x5058>
   1913c:	cmp	fp, r0
   19140:	bhi	191a8 <__assert_fail@plt+0x7fa4>
   19144:	add	fp, r0, #1
   19148:	movw	r3, #57924	; 0xe244
   1914c:	movt	r3, #2
   19150:	cmp	r4, r3
   19154:	str	fp, [r7]
   19158:	beq	19164 <__assert_fail@plt+0x7f60>
   1915c:	mov	r0, r4
   19160:	bl	15c8c <__assert_fail@plt+0x4a88>
   19164:	mov	r0, fp
   19168:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   1916c:	ldr	lr, [sp, #32]
   19170:	mov	r2, r5
   19174:	mov	r3, r6
   19178:	mov	r1, fp
   1917c:	mov	r4, r0
   19180:	ldr	r5, [sp, #72]	; 0x48
   19184:	ldr	ip, [sp, #76]	; 0x4c
   19188:	str	r0, [r7, #4]
   1918c:	str	lr, [sp]
   19190:	add	lr, sp, #40	; 0x28
   19194:	str	r8, [sp, #4]
   19198:	str	lr, [sp, #8]
   1919c:	str	r5, [sp, #12]
   191a0:	str	ip, [sp, #16]
   191a4:	bl	1625c <__assert_fail@plt+0x5058>
   191a8:	mov	r0, r4
   191ac:	str	sl, [r9]
   191b0:	add	sp, sp, #84	; 0x54
   191b4:	ldrd	r4, [sp]
   191b8:	ldrd	r6, [sp, #8]
   191bc:	ldrd	r8, [sp, #16]
   191c0:	ldrd	sl, [sp, #24]
   191c4:	add	sp, sp, #32
   191c8:	pop	{pc}		; (ldr pc, [sp], #4)
   191cc:	mov	r0, #8
   191d0:	mvn	r3, #-2147483648	; 0x80000000
   191d4:	add	r1, sp, #28
   191d8:	str	r0, [sp]
   191dc:	mov	r0, #0
   191e0:	bl	1a568 <__assert_fail@plt+0x9364>
   191e4:	ldrd	r2, [r4, #8]
   191e8:	mov	r7, r0
   191ec:	str	r0, [r4]
   191f0:	strd	r2, [r0]
   191f4:	b	190d0 <__assert_fail@plt+0x7ecc>
   191f8:	andeq	lr, r2, r4, asr #6
   191fc:	strd	r4, [sp, #-12]!
   19200:	mov	r4, #0
   19204:	mov	r5, #0
   19208:	str	lr, [sp, #8]
   1920c:	sub	sp, sp, #100	; 0x64
   19210:	cmp	r1, #10
   19214:	strd	r4, [sp]
   19218:	strd	r4, [sp, #8]
   1921c:	strd	r4, [sp, #16]
   19220:	strd	r4, [sp, #24]
   19224:	strd	r4, [sp, #32]
   19228:	strd	r4, [sp, #40]	; 0x28
   1922c:	beq	1925c <__assert_fail@plt+0x8058>
   19230:	mov	ip, #67108864	; 0x4000000
   19234:	mov	r3, sp
   19238:	str	r1, [sp]
   1923c:	mov	r1, r2
   19240:	mvn	r2, #0
   19244:	str	ip, [sp, #12]
   19248:	bl	17c48 <__assert_fail@plt+0x6a44>
   1924c:	add	sp, sp, #100	; 0x64
   19250:	ldrd	r4, [sp]
   19254:	add	sp, sp, #8
   19258:	pop	{pc}		; (ldr pc, [sp], #4)
   1925c:	bl	111ec <abort@plt>
   19260:	ldr	ip, [pc, #156]	; 19304 <__assert_fail@plt+0x8100>
   19264:	cmp	r2, #0
   19268:	cmpne	r1, #0
   1926c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19270:	strd	r6, [sp, #8]
   19274:	mov	r6, r2
   19278:	str	r8, [sp, #16]
   1927c:	mov	r8, r3
   19280:	strd	sl, [sp, #20]
   19284:	ldrd	r4, [ip]
   19288:	str	lr, [sp, #28]
   1928c:	sub	sp, sp, #48	; 0x30
   19290:	mov	lr, #10
   19294:	ldrd	r2, [ip, #8]
   19298:	ldrd	sl, [ip, #16]
   1929c:	strd	r4, [sp]
   192a0:	ldrd	r4, [ip, #32]
   192a4:	str	lr, [sp]
   192a8:	strd	r2, [sp, #8]
   192ac:	strd	sl, [sp, #16]
   192b0:	ldrd	r2, [ip, #24]
   192b4:	ldrd	sl, [ip, #40]	; 0x28
   192b8:	strd	r2, [sp, #24]
   192bc:	strd	r4, [sp, #32]
   192c0:	strd	sl, [sp, #40]	; 0x28
   192c4:	beq	19300 <__assert_fail@plt+0x80fc>
   192c8:	mov	r7, r1
   192cc:	mov	r3, sp
   192d0:	mov	r1, r8
   192d4:	mvn	r2, #0
   192d8:	str	r7, [sp, #40]	; 0x28
   192dc:	str	r6, [sp, #44]	; 0x2c
   192e0:	bl	17c48 <__assert_fail@plt+0x6a44>
   192e4:	add	sp, sp, #48	; 0x30
   192e8:	ldrd	r4, [sp]
   192ec:	ldrd	r6, [sp, #8]
   192f0:	ldr	r8, [sp, #16]
   192f4:	ldrd	sl, [sp, #20]
   192f8:	add	sp, sp, #28
   192fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19300:	bl	111ec <abort@plt>
   19304:	andeq	lr, r2, r4, asr #6
   19308:	ldr	ip, [pc, #156]	; 193ac <__assert_fail@plt+0x81a8>
   1930c:	cmp	r2, #0
   19310:	cmpne	r1, #0
   19314:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19318:	strd	r6, [sp, #8]
   1931c:	mov	r6, r2
   19320:	str	r8, [sp, #16]
   19324:	mov	r8, r3
   19328:	strd	sl, [sp, #20]
   1932c:	ldrd	r4, [ip]
   19330:	str	lr, [sp, #28]
   19334:	sub	sp, sp, #48	; 0x30
   19338:	mov	lr, #10
   1933c:	ldrd	r2, [ip, #8]
   19340:	ldrd	sl, [ip, #16]
   19344:	strd	r4, [sp]
   19348:	ldrd	r4, [ip, #32]
   1934c:	str	lr, [sp]
   19350:	strd	r2, [sp, #8]
   19354:	strd	sl, [sp, #16]
   19358:	ldrd	r2, [ip, #24]
   1935c:	ldrd	sl, [ip, #40]	; 0x28
   19360:	strd	r2, [sp, #24]
   19364:	strd	r4, [sp, #32]
   19368:	strd	sl, [sp, #40]	; 0x28
   1936c:	beq	193a8 <__assert_fail@plt+0x81a4>
   19370:	ldr	r2, [sp, #80]	; 0x50
   19374:	mov	r7, r1
   19378:	mov	r3, sp
   1937c:	mov	r1, r8
   19380:	str	r7, [sp, #40]	; 0x28
   19384:	str	r6, [sp, #44]	; 0x2c
   19388:	bl	17c48 <__assert_fail@plt+0x6a44>
   1938c:	add	sp, sp, #48	; 0x30
   19390:	ldrd	r4, [sp]
   19394:	ldrd	r6, [sp, #8]
   19398:	ldr	r8, [sp, #16]
   1939c:	ldrd	sl, [sp, #20]
   193a0:	add	sp, sp, #28
   193a4:	pop	{pc}		; (ldr pc, [sp], #4)
   193a8:	bl	111ec <abort@plt>
   193ac:	andeq	lr, r2, r4, asr #6
   193b0:	ldr	ip, [pc, #512]	; 195b8 <__assert_fail@plt+0x83b4>
   193b4:	cmp	r0, #0
   193b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   193bc:	ldrd	r4, [ip, #16]
   193c0:	strd	r6, [sp, #8]
   193c4:	clz	r6, r1
   193c8:	mov	r7, r1
   193cc:	strd	r8, [sp, #16]
   193d0:	mov	r8, r0
   193d4:	lsr	r6, r6, #5
   193d8:	strd	sl, [sp, #24]
   193dc:	mov	fp, r2
   193e0:	mov	sl, #10
   193e4:	ldrd	r2, [ip]
   193e8:	moveq	r6, #1
   193ec:	str	lr, [sp, #32]
   193f0:	sub	sp, sp, #92	; 0x5c
   193f4:	cmp	r6, #0
   193f8:	ldrd	r0, [ip, #8]
   193fc:	strd	r2, [sp, #40]	; 0x28
   19400:	strd	r4, [sp, #56]	; 0x38
   19404:	ldrd	r2, [ip, #24]
   19408:	strd	r0, [sp, #48]	; 0x30
   1940c:	ldrd	r0, [ip, #32]
   19410:	str	sl, [sp, #40]	; 0x28
   19414:	ldrd	r4, [ip, #40]	; 0x28
   19418:	strd	r2, [sp, #64]	; 0x40
   1941c:	strd	r0, [sp, #72]	; 0x48
   19420:	strd	r4, [sp, #80]	; 0x50
   19424:	bne	195b4 <__assert_fail@plt+0x83b0>
   19428:	movw	r5, #57640	; 0xe128
   1942c:	movt	r5, #2
   19430:	str	r8, [sp, #80]	; 0x50
   19434:	str	r7, [sp, #84]	; 0x54
   19438:	bl	110d8 <__errno_location@plt>
   1943c:	ldr	r3, [r0]
   19440:	mov	r9, r0
   19444:	ldr	r2, [r5, #4]
   19448:	ldr	r4, [r5]
   1944c:	str	r3, [sp, #28]
   19450:	cmp	r2, #0
   19454:	movgt	r1, sl
   19458:	bgt	194c0 <__assert_fail@plt+0x82bc>
   1945c:	add	r3, r5, #8
   19460:	str	r2, [sp, #36]	; 0x24
   19464:	rsb	r2, r2, #1
   19468:	cmp	r4, r3
   1946c:	beq	19588 <__assert_fail@plt+0x8384>
   19470:	mov	r1, #8
   19474:	mov	r0, r4
   19478:	mvn	r3, #-2147483648	; 0x80000000
   1947c:	str	r1, [sp]
   19480:	add	r1, sp, #36	; 0x24
   19484:	bl	1a568 <__assert_fail@plt+0x9364>
   19488:	mov	r4, r0
   1948c:	str	r0, [r5]
   19490:	ldr	r0, [r5, #4]
   19494:	mov	r1, #0
   19498:	ldr	r2, [sp, #36]	; 0x24
   1949c:	sub	r2, r2, r0
   194a0:	add	r0, r4, r0, lsl #3
   194a4:	lsl	r2, r2, #3
   194a8:	bl	11108 <memset@plt>
   194ac:	ldr	r3, [sp, #36]	; 0x24
   194b0:	ldr	r1, [sp, #40]	; 0x28
   194b4:	ldr	r8, [sp, #80]	; 0x50
   194b8:	str	r3, [r5, #4]
   194bc:	ldr	r7, [sp, #84]	; 0x54
   194c0:	mvn	r3, #0
   194c4:	mov	r2, fp
   194c8:	ldr	r6, [sp, #44]	; 0x2c
   194cc:	ldr	sl, [r4]
   194d0:	ldr	r5, [r4, #4]
   194d4:	orr	r6, r6, #1
   194d8:	stm	sp, {r1, r6}
   194dc:	add	r1, sp, #48	; 0x30
   194e0:	str	r8, [sp, #12]
   194e4:	mov	r0, r5
   194e8:	str	r1, [sp, #8]
   194ec:	mov	r1, sl
   194f0:	str	r7, [sp, #16]
   194f4:	bl	1625c <__assert_fail@plt+0x5058>
   194f8:	cmp	sl, r0
   194fc:	bhi	19560 <__assert_fail@plt+0x835c>
   19500:	add	r7, r0, #1
   19504:	movw	r3, #57924	; 0xe244
   19508:	movt	r3, #2
   1950c:	cmp	r5, r3
   19510:	str	r7, [r4]
   19514:	beq	19520 <__assert_fail@plt+0x831c>
   19518:	mov	r0, r5
   1951c:	bl	15c8c <__assert_fail@plt+0x4a88>
   19520:	mov	r0, r7
   19524:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   19528:	ldr	r3, [sp, #40]	; 0x28
   1952c:	mov	r2, fp
   19530:	mov	r1, r7
   19534:	mov	r5, r0
   19538:	ldr	lr, [sp, #80]	; 0x50
   1953c:	ldr	ip, [sp, #84]	; 0x54
   19540:	str	r0, [r4, #4]
   19544:	add	r4, sp, #48	; 0x30
   19548:	stm	sp, {r3, r6}
   1954c:	mvn	r3, #0
   19550:	str	r4, [sp, #8]
   19554:	str	lr, [sp, #12]
   19558:	str	ip, [sp, #16]
   1955c:	bl	1625c <__assert_fail@plt+0x5058>
   19560:	ldr	r3, [sp, #28]
   19564:	mov	r0, r5
   19568:	str	r3, [r9]
   1956c:	add	sp, sp, #92	; 0x5c
   19570:	ldrd	r4, [sp]
   19574:	ldrd	r6, [sp, #8]
   19578:	ldrd	r8, [sp, #16]
   1957c:	ldrd	sl, [sp, #24]
   19580:	add	sp, sp, #32
   19584:	pop	{pc}		; (ldr pc, [sp], #4)
   19588:	mov	r1, #8
   1958c:	mvn	r3, #-2147483648	; 0x80000000
   19590:	mov	r0, r6
   19594:	str	r1, [sp]
   19598:	add	r1, sp, #36	; 0x24
   1959c:	bl	1a568 <__assert_fail@plt+0x9364>
   195a0:	ldrd	r2, [r5, #8]
   195a4:	mov	r4, r0
   195a8:	str	r0, [r5]
   195ac:	strd	r2, [r0]
   195b0:	b	19490 <__assert_fail@plt+0x828c>
   195b4:	bl	111ec <abort@plt>
   195b8:	andeq	lr, r2, r4, asr #6
   195bc:	ldr	ip, [pc, #536]	; 197dc <__assert_fail@plt+0x85d8>
   195c0:	cmp	r0, #0
   195c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   195c8:	ldrd	r4, [ip, #16]
   195cc:	strd	r6, [sp, #8]
   195d0:	mov	r6, r1
   195d4:	mov	r7, r0
   195d8:	strd	r8, [sp, #16]
   195dc:	mov	r9, #10
   195e0:	strd	sl, [sp, #24]
   195e4:	mov	sl, r2
   195e8:	mov	fp, r3
   195ec:	str	lr, [sp, #32]
   195f0:	clz	lr, r1
   195f4:	sub	sp, sp, #92	; 0x5c
   195f8:	ldrd	r2, [ip]
   195fc:	lsr	lr, lr, #5
   19600:	moveq	lr, #1
   19604:	ldrd	r0, [ip, #8]
   19608:	cmp	lr, #0
   1960c:	strd	r4, [sp, #56]	; 0x38
   19610:	ldrd	r4, [ip, #40]	; 0x28
   19614:	str	lr, [sp, #28]
   19618:	strd	r2, [sp, #40]	; 0x28
   1961c:	ldrd	r2, [ip, #24]
   19620:	strd	r0, [sp, #48]	; 0x30
   19624:	ldrd	r0, [ip, #32]
   19628:	str	r9, [sp, #40]	; 0x28
   1962c:	strd	r2, [sp, #64]	; 0x40
   19630:	strd	r4, [sp, #80]	; 0x50
   19634:	strd	r0, [sp, #72]	; 0x48
   19638:	bne	197d8 <__assert_fail@plt+0x85d4>
   1963c:	movw	r5, #57640	; 0xe128
   19640:	movt	r5, #2
   19644:	str	r7, [sp, #80]	; 0x50
   19648:	str	r6, [sp, #84]	; 0x54
   1964c:	bl	110d8 <__errno_location@plt>
   19650:	ldr	r3, [r0]
   19654:	mov	r8, r0
   19658:	ldr	r2, [r5, #4]
   1965c:	ldr	r4, [r5]
   19660:	str	r3, [sp, #24]
   19664:	cmp	r2, #0
   19668:	movgt	r1, r9
   1966c:	bgt	196d4 <__assert_fail@plt+0x84d0>
   19670:	add	r3, r5, #8
   19674:	str	r2, [sp, #36]	; 0x24
   19678:	rsb	r2, r2, #1
   1967c:	cmp	r4, r3
   19680:	beq	197ac <__assert_fail@plt+0x85a8>
   19684:	mov	r1, #8
   19688:	mov	r0, r4
   1968c:	mvn	r3, #-2147483648	; 0x80000000
   19690:	str	r1, [sp]
   19694:	add	r1, sp, #36	; 0x24
   19698:	bl	1a568 <__assert_fail@plt+0x9364>
   1969c:	mov	r4, r0
   196a0:	str	r0, [r5]
   196a4:	ldr	r0, [r5, #4]
   196a8:	mov	r1, #0
   196ac:	ldr	r2, [sp, #36]	; 0x24
   196b0:	sub	r2, r2, r0
   196b4:	add	r0, r4, r0, lsl #3
   196b8:	lsl	r2, r2, #3
   196bc:	bl	11108 <memset@plt>
   196c0:	ldr	r3, [sp, #36]	; 0x24
   196c4:	ldr	r1, [sp, #40]	; 0x28
   196c8:	ldr	r7, [sp, #80]	; 0x50
   196cc:	str	r3, [r5, #4]
   196d0:	ldr	r6, [sp, #84]	; 0x54
   196d4:	mov	r3, fp
   196d8:	mov	r2, sl
   196dc:	ldr	r0, [sp, #44]	; 0x2c
   196e0:	ldr	r9, [r4]
   196e4:	ldr	r5, [r4, #4]
   196e8:	orr	r0, r0, #1
   196ec:	str	r1, [sp]
   196f0:	add	r1, sp, #48	; 0x30
   196f4:	str	r0, [sp, #4]
   196f8:	str	r1, [sp, #8]
   196fc:	mov	r1, r9
   19700:	str	r7, [sp, #12]
   19704:	str	r6, [sp, #16]
   19708:	str	r0, [sp, #28]
   1970c:	mov	r0, r5
   19710:	bl	1625c <__assert_fail@plt+0x5058>
   19714:	cmp	r9, r0
   19718:	bhi	19784 <__assert_fail@plt+0x8580>
   1971c:	add	r6, r0, #1
   19720:	movw	r3, #57924	; 0xe244
   19724:	movt	r3, #2
   19728:	cmp	r5, r3
   1972c:	str	r6, [r4]
   19730:	beq	1973c <__assert_fail@plt+0x8538>
   19734:	mov	r0, r5
   19738:	bl	15c8c <__assert_fail@plt+0x4a88>
   1973c:	mov	r0, r6
   19740:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   19744:	ldr	lr, [sp, #40]	; 0x28
   19748:	mov	r1, r6
   1974c:	mov	r3, fp
   19750:	mov	r2, sl
   19754:	mov	r5, r0
   19758:	ldr	r6, [sp, #80]	; 0x50
   1975c:	ldr	ip, [sp, #84]	; 0x54
   19760:	str	r0, [r4, #4]
   19764:	str	lr, [sp]
   19768:	ldr	lr, [sp, #28]
   1976c:	str	lr, [sp, #4]
   19770:	add	lr, sp, #48	; 0x30
   19774:	str	r6, [sp, #12]
   19778:	str	lr, [sp, #8]
   1977c:	str	ip, [sp, #16]
   19780:	bl	1625c <__assert_fail@plt+0x5058>
   19784:	ldr	r3, [sp, #24]
   19788:	mov	r0, r5
   1978c:	str	r3, [r8]
   19790:	add	sp, sp, #92	; 0x5c
   19794:	ldrd	r4, [sp]
   19798:	ldrd	r6, [sp, #8]
   1979c:	ldrd	r8, [sp, #16]
   197a0:	ldrd	sl, [sp, #24]
   197a4:	add	sp, sp, #32
   197a8:	pop	{pc}		; (ldr pc, [sp], #4)
   197ac:	mov	r1, #8
   197b0:	mvn	r3, #-2147483648	; 0x80000000
   197b4:	ldr	r0, [sp, #28]
   197b8:	str	r1, [sp]
   197bc:	add	r1, sp, #36	; 0x24
   197c0:	bl	1a568 <__assert_fail@plt+0x9364>
   197c4:	ldrd	r2, [r5, #8]
   197c8:	mov	r4, r0
   197cc:	str	r0, [r5]
   197d0:	strd	r2, [r0]
   197d4:	b	196a4 <__assert_fail@plt+0x84a0>
   197d8:	bl	111ec <abort@plt>
   197dc:	andeq	lr, r2, r4, asr #6
   197e0:	ldr	r3, [pc]	; 197e8 <__assert_fail@plt+0x85e4>
   197e4:	b	17c48 <__assert_fail@plt+0x6a44>
   197e8:	andeq	lr, r2, r8, lsr r1
   197ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   197f0:	movw	r4, #57640	; 0xe128
   197f4:	movt	r4, #2
   197f8:	strd	r6, [sp, #8]
   197fc:	strd	r8, [sp, #16]
   19800:	strd	sl, [sp, #24]
   19804:	mov	sl, r0
   19808:	mov	fp, r1
   1980c:	str	lr, [sp, #32]
   19810:	sub	sp, sp, #44	; 0x2c
   19814:	bl	110d8 <__errno_location@plt>
   19818:	ldr	r3, [r0]
   1981c:	mov	r8, r0
   19820:	ldr	r2, [r4, #4]
   19824:	ldr	r5, [r4]
   19828:	str	r3, [sp, #28]
   1982c:	cmp	r2, #0
   19830:	bgt	1988c <__assert_fail@plt+0x8688>
   19834:	add	r3, r4, #8
   19838:	str	r2, [sp, #36]	; 0x24
   1983c:	rsb	r2, r2, #1
   19840:	cmp	r5, r3
   19844:	beq	19968 <__assert_fail@plt+0x8764>
   19848:	mov	r1, #8
   1984c:	mov	r0, r5
   19850:	mvn	r3, #-2147483648	; 0x80000000
   19854:	str	r1, [sp]
   19858:	add	r1, sp, #36	; 0x24
   1985c:	bl	1a568 <__assert_fail@plt+0x9364>
   19860:	mov	r5, r0
   19864:	str	r0, [r4]
   19868:	ldr	r0, [r4, #4]
   1986c:	mov	r1, #0
   19870:	ldr	r2, [sp, #36]	; 0x24
   19874:	sub	r2, r2, r0
   19878:	add	r0, r5, r0, lsl #3
   1987c:	lsl	r2, r2, #3
   19880:	bl	11108 <memset@plt>
   19884:	ldr	r3, [sp, #36]	; 0x24
   19888:	str	r3, [r4, #4]
   1988c:	ldr	ip, [r4, #16]
   19890:	mov	r3, fp
   19894:	mov	r2, sl
   19898:	ldr	r7, [r4, #20]
   1989c:	ldr	r0, [pc, #240]	; 19994 <__assert_fail@plt+0x8790>
   198a0:	ldr	r9, [r5]
   198a4:	orr	r7, r7, #1
   198a8:	ldr	r6, [r5, #4]
   198ac:	str	ip, [sp]
   198b0:	ldr	ip, [r4, #56]	; 0x38
   198b4:	mov	r1, r9
   198b8:	str	r7, [sp, #4]
   198bc:	ldr	lr, [r4, #60]	; 0x3c
   198c0:	str	r0, [sp, #8]
   198c4:	mov	r0, r6
   198c8:	str	ip, [sp, #12]
   198cc:	str	lr, [sp, #16]
   198d0:	bl	1625c <__assert_fail@plt+0x5058>
   198d4:	cmp	r9, r0
   198d8:	bhi	19940 <__assert_fail@plt+0x873c>
   198dc:	add	r9, r0, #1
   198e0:	movw	r3, #57924	; 0xe244
   198e4:	movt	r3, #2
   198e8:	cmp	r6, r3
   198ec:	str	r9, [r5]
   198f0:	beq	198fc <__assert_fail@plt+0x86f8>
   198f4:	mov	r0, r6
   198f8:	bl	15c8c <__assert_fail@plt+0x4a88>
   198fc:	mov	r0, r9
   19900:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   19904:	ldr	ip, [r4, #16]
   19908:	mov	r1, r9
   1990c:	mov	r3, fp
   19910:	mov	r2, sl
   19914:	mov	r6, r0
   19918:	ldr	r9, [r4, #56]	; 0x38
   1991c:	ldr	lr, [r4, #60]	; 0x3c
   19920:	str	r0, [r5, #4]
   19924:	str	ip, [sp]
   19928:	ldr	ip, [pc, #100]	; 19994 <__assert_fail@plt+0x8790>
   1992c:	str	r7, [sp, #4]
   19930:	str	ip, [sp, #8]
   19934:	str	r9, [sp, #12]
   19938:	str	lr, [sp, #16]
   1993c:	bl	1625c <__assert_fail@plt+0x5058>
   19940:	ldr	r3, [sp, #28]
   19944:	mov	r0, r6
   19948:	str	r3, [r8]
   1994c:	add	sp, sp, #44	; 0x2c
   19950:	ldrd	r4, [sp]
   19954:	ldrd	r6, [sp, #8]
   19958:	ldrd	r8, [sp, #16]
   1995c:	ldrd	sl, [sp, #24]
   19960:	add	sp, sp, #32
   19964:	pop	{pc}		; (ldr pc, [sp], #4)
   19968:	mov	r0, #8
   1996c:	mvn	r3, #-2147483648	; 0x80000000
   19970:	add	r1, sp, #36	; 0x24
   19974:	str	r0, [sp]
   19978:	mov	r0, #0
   1997c:	bl	1a568 <__assert_fail@plt+0x9364>
   19980:	ldrd	r2, [r4, #8]
   19984:	mov	r5, r0
   19988:	str	r0, [r4]
   1998c:	strd	r2, [r0]
   19990:	b	19868 <__assert_fail@plt+0x8664>
   19994:	andeq	lr, r2, r0, asr #2
   19998:	ldr	r3, [pc, #4]	; 199a4 <__assert_fail@plt+0x87a0>
   1999c:	mvn	r2, #0
   199a0:	b	17c48 <__assert_fail@plt+0x6a44>
   199a4:	andeq	lr, r2, r8, lsr r1
   199a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   199ac:	movw	r4, #57640	; 0xe128
   199b0:	movt	r4, #2
   199b4:	strd	r6, [sp, #8]
   199b8:	strd	r8, [sp, #16]
   199bc:	strd	sl, [sp, #24]
   199c0:	mov	sl, r0
   199c4:	str	lr, [sp, #32]
   199c8:	sub	sp, sp, #44	; 0x2c
   199cc:	bl	110d8 <__errno_location@plt>
   199d0:	ldr	r3, [r0]
   199d4:	mov	r8, r0
   199d8:	ldr	r2, [r4, #4]
   199dc:	ldr	r5, [r4]
   199e0:	str	r3, [sp, #28]
   199e4:	cmp	r2, #0
   199e8:	bgt	19a44 <__assert_fail@plt+0x8840>
   199ec:	add	r3, r4, #8
   199f0:	str	r2, [sp, #36]	; 0x24
   199f4:	rsb	r2, r2, #1
   199f8:	cmp	r5, r3
   199fc:	beq	19b0c <__assert_fail@plt+0x8908>
   19a00:	mov	r1, #8
   19a04:	mov	r0, r5
   19a08:	mvn	r3, #-2147483648	; 0x80000000
   19a0c:	str	r1, [sp]
   19a10:	add	r1, sp, #36	; 0x24
   19a14:	bl	1a568 <__assert_fail@plt+0x9364>
   19a18:	mov	r5, r0
   19a1c:	str	r0, [r4]
   19a20:	ldr	r0, [r4, #4]
   19a24:	mov	r1, #0
   19a28:	ldr	r2, [sp, #36]	; 0x24
   19a2c:	sub	r2, r2, r0
   19a30:	add	r0, r5, r0, lsl #3
   19a34:	lsl	r2, r2, #3
   19a38:	bl	11108 <memset@plt>
   19a3c:	ldr	r3, [sp, #36]	; 0x24
   19a40:	str	r3, [r4, #4]
   19a44:	ldr	ip, [r4, #16]
   19a48:	mvn	r3, #0
   19a4c:	mov	r2, sl
   19a50:	ldr	r7, [r4, #20]
   19a54:	ldr	fp, [pc, #220]	; 19b38 <__assert_fail@plt+0x8934>
   19a58:	ldr	r9, [r5]
   19a5c:	orr	r7, r7, #1
   19a60:	ldr	r6, [r5, #4]
   19a64:	str	ip, [sp]
   19a68:	ldr	ip, [r4, #56]	; 0x38
   19a6c:	mov	r1, r9
   19a70:	stmib	sp, {r7, fp}
   19a74:	ldr	lr, [r4, #60]	; 0x3c
   19a78:	mov	r0, r6
   19a7c:	str	ip, [sp, #12]
   19a80:	str	lr, [sp, #16]
   19a84:	bl	1625c <__assert_fail@plt+0x5058>
   19a88:	cmp	r9, r0
   19a8c:	bhi	19ae4 <__assert_fail@plt+0x88e0>
   19a90:	add	r9, r0, #1
   19a94:	movw	r3, #57924	; 0xe244
   19a98:	movt	r3, #2
   19a9c:	cmp	r6, r3
   19aa0:	str	r9, [r5]
   19aa4:	beq	19ab0 <__assert_fail@plt+0x88ac>
   19aa8:	mov	r0, r6
   19aac:	bl	15c8c <__assert_fail@plt+0x4a88>
   19ab0:	mov	r0, r9
   19ab4:	bl	1a2c4 <__assert_fail@plt+0x90c0>
   19ab8:	ldr	r3, [r4, #16]
   19abc:	mov	r2, sl
   19ac0:	mov	r1, r9
   19ac4:	mov	r6, r0
   19ac8:	ldr	lr, [r4, #56]	; 0x38
   19acc:	ldr	ip, [r4, #60]	; 0x3c
   19ad0:	str	r0, [r5, #4]
   19ad4:	stm	sp, {r3, r7, fp, lr}
   19ad8:	mvn	r3, #0
   19adc:	str	ip, [sp, #16]
   19ae0:	bl	1625c <__assert_fail@plt+0x5058>
   19ae4:	ldr	r3, [sp, #28]
   19ae8:	mov	r0, r6
   19aec:	str	r3, [r8]
   19af0:	add	sp, sp, #44	; 0x2c
   19af4:	ldrd	r4, [sp]
   19af8:	ldrd	r6, [sp, #8]
   19afc:	ldrd	r8, [sp, #16]
   19b00:	ldrd	sl, [sp, #24]
   19b04:	add	sp, sp, #32
   19b08:	pop	{pc}		; (ldr pc, [sp], #4)
   19b0c:	mov	r0, #8
   19b10:	mvn	r3, #-2147483648	; 0x80000000
   19b14:	add	r1, sp, #36	; 0x24
   19b18:	str	r0, [sp]
   19b1c:	mov	r0, #0
   19b20:	bl	1a568 <__assert_fail@plt+0x9364>
   19b24:	ldrd	r2, [r4, #8]
   19b28:	mov	r5, r0
   19b2c:	str	r0, [r4]
   19b30:	strd	r2, [r0]
   19b34:	b	19a20 <__assert_fail@plt+0x881c>
   19b38:	andeq	lr, r2, r0, asr #2
   19b3c:	cmp	r1, #0
   19b40:	strd	r4, [sp, #-16]!
   19b44:	mov	ip, r3
   19b48:	str	r6, [sp, #8]
   19b4c:	mov	r4, r0
   19b50:	str	lr, [sp, #12]
   19b54:	sub	sp, sp, #32
   19b58:	ldr	r5, [sp, #48]	; 0x30
   19b5c:	ldr	r6, [sp, #52]	; 0x34
   19b60:	beq	19ca4 <__assert_fail@plt+0x8aa0>
   19b64:	mov	r3, r1
   19b68:	mov	r1, #1
   19b6c:	stm	sp, {r2, ip}
   19b70:	movw	r2, #54888	; 0xd668
   19b74:	movt	r2, #1
   19b78:	bl	11144 <__fprintf_chk@plt>
   19b7c:	mov	r2, #5
   19b80:	movw	r1, #54908	; 0xd67c
   19b84:	movt	r1, #1
   19b88:	mov	r0, #0
   19b8c:	bl	10fc4 <dcgettext@plt>
   19b90:	movw	ip, #2022	; 0x7e6
   19b94:	mov	r3, r0
   19b98:	mov	r1, #1
   19b9c:	movw	r2, #55636	; 0xd954
   19ba0:	movt	r2, #1
   19ba4:	mov	r0, r4
   19ba8:	str	ip, [sp]
   19bac:	bl	11144 <__fprintf_chk@plt>
   19bb0:	mov	r1, r4
   19bb4:	mov	r0, #10
   19bb8:	bl	10fb8 <fputc_unlocked@plt>
   19bbc:	mov	r2, #5
   19bc0:	movw	r1, #54912	; 0xd680
   19bc4:	movt	r1, #1
   19bc8:	mov	r0, #0
   19bcc:	bl	10fc4 <dcgettext@plt>
   19bd0:	mov	r2, r0
   19bd4:	mov	r1, #1
   19bd8:	movw	r3, #55084	; 0xd72c
   19bdc:	movt	r3, #1
   19be0:	mov	r0, r4
   19be4:	bl	11144 <__fprintf_chk@plt>
   19be8:	mov	r1, r4
   19bec:	mov	r0, #10
   19bf0:	bl	10fb8 <fputc_unlocked@plt>
   19bf4:	cmp	r6, #9
   19bf8:	ldrls	pc, [pc, r6, lsl #2]
   19bfc:	b	19f10 <__assert_fail@plt+0x8d0c>
   19c00:	muleq	r1, r0, ip
   19c04:	andeq	r9, r1, r0, asr #25
   19c08:	strdeq	r9, [r1], -ip
   19c0c:	andeq	r9, r1, ip, lsr sp
   19c10:	andeq	r9, r1, r4, lsl #27
   19c14:			; <UNDEFINED> instruction: 0x00019dbc
   19c18:	andeq	r9, r1, r4, lsl #28
   19c1c:	andeq	r9, r1, r8, asr lr
   19c20:			; <UNDEFINED> instruction: 0x00019eb0
   19c24:	andeq	r9, r1, r8, lsr #24
   19c28:	movw	r1, #55388	; 0xd85c
   19c2c:	movt	r1, #1
   19c30:	mov	r2, #5
   19c34:	mov	r0, #0
   19c38:	bl	10fc4 <dcgettext@plt>
   19c3c:	ldr	lr, [r5, #4]
   19c40:	mov	r2, r0
   19c44:	mov	r1, #1
   19c48:	mov	r0, r4
   19c4c:	ldr	r3, [r5, #8]
   19c50:	ldr	ip, [r5, #32]
   19c54:	str	lr, [sp]
   19c58:	ldr	lr, [r5, #12]
   19c5c:	str	ip, [sp, #28]
   19c60:	ldr	ip, [r5, #28]
   19c64:	str	r3, [sp, #4]
   19c68:	ldr	r3, [r5, #16]
   19c6c:	str	lr, [sp, #8]
   19c70:	ldr	lr, [r5, #20]
   19c74:	str	ip, [sp, #24]
   19c78:	ldr	ip, [r5, #24]
   19c7c:	str	r3, [sp, #12]
   19c80:	ldr	r3, [r5]
   19c84:	str	lr, [sp, #16]
   19c88:	str	ip, [sp, #20]
   19c8c:	bl	11144 <__fprintf_chk@plt>
   19c90:	add	sp, sp, #32
   19c94:	ldrd	r4, [sp]
   19c98:	ldr	r6, [sp, #8]
   19c9c:	add	sp, sp, #12
   19ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ca4:	mov	r3, r2
   19ca8:	mov	r1, #1
   19cac:	str	ip, [sp]
   19cb0:	movw	r2, #54900	; 0xd674
   19cb4:	movt	r2, #1
   19cb8:	bl	11144 <__fprintf_chk@plt>
   19cbc:	b	19b7c <__assert_fail@plt+0x8978>
   19cc0:	mov	r2, #5
   19cc4:	movw	r1, #55120	; 0xd750
   19cc8:	movt	r1, #1
   19ccc:	mov	r0, #0
   19cd0:	bl	10fc4 <dcgettext@plt>
   19cd4:	ldr	r3, [r5]
   19cd8:	mov	r2, r0
   19cdc:	mov	r1, #1
   19ce0:	mov	r0, r4
   19ce4:	add	sp, sp, #32
   19ce8:	ldrd	r4, [sp]
   19cec:	ldr	r6, [sp, #8]
   19cf0:	ldr	lr, [sp, #12]
   19cf4:	add	sp, sp, #16
   19cf8:	b	11144 <__fprintf_chk@plt>
   19cfc:	mov	r2, #5
   19d00:	movw	r1, #55136	; 0xd760
   19d04:	movt	r1, #1
   19d08:	mov	r0, #0
   19d0c:	bl	10fc4 <dcgettext@plt>
   19d10:	ldm	r5, {r3, ip}
   19d14:	mov	r2, r0
   19d18:	mov	r1, #1
   19d1c:	mov	r0, r4
   19d20:	str	ip, [sp, #48]	; 0x30
   19d24:	add	sp, sp, #32
   19d28:	ldrd	r4, [sp]
   19d2c:	ldr	r6, [sp, #8]
   19d30:	ldr	lr, [sp, #12]
   19d34:	add	sp, sp, #16
   19d38:	b	11144 <__fprintf_chk@plt>
   19d3c:	mov	r2, #5
   19d40:	movw	r1, #55160	; 0xd778
   19d44:	movt	r1, #1
   19d48:	mov	r0, #0
   19d4c:	bl	10fc4 <dcgettext@plt>
   19d50:	ldm	r5, {r3, lr}
   19d54:	mov	r2, r0
   19d58:	mov	r1, #1
   19d5c:	mov	r0, r4
   19d60:	ldr	ip, [r5, #8]
   19d64:	str	lr, [sp, #48]	; 0x30
   19d68:	str	ip, [sp, #52]	; 0x34
   19d6c:	add	sp, sp, #32
   19d70:	ldrd	r4, [sp]
   19d74:	ldr	r6, [sp, #8]
   19d78:	ldr	lr, [sp, #12]
   19d7c:	add	sp, sp, #16
   19d80:	b	11144 <__fprintf_chk@plt>
   19d84:	mov	r2, #5
   19d88:	movw	r1, #55188	; 0xd794
   19d8c:	movt	r1, #1
   19d90:	mov	r0, #0
   19d94:	bl	10fc4 <dcgettext@plt>
   19d98:	ldmib	r5, {r3, ip, lr}
   19d9c:	mov	r2, r0
   19da0:	mov	r1, #1
   19da4:	mov	r0, r4
   19da8:	str	r3, [sp]
   19dac:	ldr	r3, [r5]
   19db0:	stmib	sp, {ip, lr}
   19db4:	bl	11144 <__fprintf_chk@plt>
   19db8:	b	19c90 <__assert_fail@plt+0x8a8c>
   19dbc:	mov	r2, #5
   19dc0:	movw	r1, #55220	; 0xd7b4
   19dc4:	movt	r1, #1
   19dc8:	mov	r0, #0
   19dcc:	bl	10fc4 <dcgettext@plt>
   19dd0:	ldmib	r5, {ip, lr}
   19dd4:	mov	r2, r0
   19dd8:	mov	r1, #1
   19ddc:	mov	r0, r4
   19de0:	ldr	r3, [r5, #16]
   19de4:	str	ip, [sp]
   19de8:	ldr	ip, [r5, #12]
   19dec:	str	r3, [sp, #12]
   19df0:	ldr	r3, [r5]
   19df4:	str	lr, [sp, #4]
   19df8:	str	ip, [sp, #8]
   19dfc:	bl	11144 <__fprintf_chk@plt>
   19e00:	b	19c90 <__assert_fail@plt+0x8a8c>
   19e04:	mov	r2, #5
   19e08:	movw	r1, #55256	; 0xd7d8
   19e0c:	movt	r1, #1
   19e10:	mov	r0, #0
   19e14:	bl	10fc4 <dcgettext@plt>
   19e18:	ldr	lr, [r5, #4]
   19e1c:	mov	r2, r0
   19e20:	mov	r1, #1
   19e24:	mov	r0, r4
   19e28:	ldr	r3, [r5, #8]
   19e2c:	ldr	ip, [r5, #20]
   19e30:	str	lr, [sp]
   19e34:	ldr	lr, [r5, #12]
   19e38:	str	ip, [sp, #16]
   19e3c:	ldr	ip, [r5, #16]
   19e40:	str	r3, [sp, #4]
   19e44:	ldr	r3, [r5]
   19e48:	str	lr, [sp, #8]
   19e4c:	str	ip, [sp, #12]
   19e50:	bl	11144 <__fprintf_chk@plt>
   19e54:	b	19c90 <__assert_fail@plt+0x8a8c>
   19e58:	mov	r2, #5
   19e5c:	movw	r1, #55296	; 0xd800
   19e60:	movt	r1, #1
   19e64:	mov	r0, #0
   19e68:	bl	10fc4 <dcgettext@plt>
   19e6c:	ldmib	r5, {r3, ip}
   19e70:	mov	r2, r0
   19e74:	mov	r1, #1
   19e78:	mov	r0, r4
   19e7c:	ldr	lr, [r5, #24]
   19e80:	str	r3, [sp]
   19e84:	ldr	r3, [r5, #12]
   19e88:	str	lr, [sp, #20]
   19e8c:	ldr	lr, [r5, #20]
   19e90:	str	ip, [sp, #4]
   19e94:	ldr	ip, [r5, #16]
   19e98:	str	r3, [sp, #8]
   19e9c:	ldr	r3, [r5]
   19ea0:	str	ip, [sp, #12]
   19ea4:	str	lr, [sp, #16]
   19ea8:	bl	11144 <__fprintf_chk@plt>
   19eac:	b	19c90 <__assert_fail@plt+0x8a8c>
   19eb0:	mov	r2, #5
   19eb4:	movw	r1, #55340	; 0xd82c
   19eb8:	movt	r1, #1
   19ebc:	mov	r0, #0
   19ec0:	bl	10fc4 <dcgettext@plt>
   19ec4:	ldmib	r5, {ip, lr}
   19ec8:	mov	r2, r0
   19ecc:	mov	r1, #1
   19ed0:	mov	r0, r4
   19ed4:	ldr	r3, [r5, #28]
   19ed8:	str	ip, [sp]
   19edc:	ldr	ip, [r5, #12]
   19ee0:	str	r3, [sp, #24]
   19ee4:	ldr	r3, [r5, #24]
   19ee8:	str	lr, [sp, #4]
   19eec:	ldr	lr, [r5, #16]
   19ef0:	str	ip, [sp, #8]
   19ef4:	ldr	ip, [r5, #20]
   19ef8:	str	r3, [sp, #20]
   19efc:	ldr	r3, [r5]
   19f00:	str	lr, [sp, #12]
   19f04:	str	ip, [sp, #16]
   19f08:	bl	11144 <__fprintf_chk@plt>
   19f0c:	b	19c90 <__assert_fail@plt+0x8a8c>
   19f10:	movw	r1, #55440	; 0xd890
   19f14:	movt	r1, #1
   19f18:	b	19c30 <__assert_fail@plt+0x8a2c>
   19f1c:	strd	r4, [sp, #-12]!
   19f20:	str	lr, [sp, #8]
   19f24:	sub	sp, sp, #12
   19f28:	ldr	r5, [sp, #24]
   19f2c:	ldr	ip, [r5]
   19f30:	cmp	ip, #0
   19f34:	beq	19f50 <__assert_fail@plt+0x8d4c>
   19f38:	mov	lr, r5
   19f3c:	mov	ip, #0
   19f40:	ldr	r4, [lr, #4]!
   19f44:	add	ip, ip, #1
   19f48:	cmp	r4, #0
   19f4c:	bne	19f40 <__assert_fail@plt+0x8d3c>
   19f50:	stm	sp, {r5, ip}
   19f54:	bl	19b3c <__assert_fail@plt+0x8938>
   19f58:	add	sp, sp, #12
   19f5c:	ldrd	r4, [sp]
   19f60:	add	sp, sp, #8
   19f64:	pop	{pc}		; (ldr pc, [sp], #4)
   19f68:	push	{lr}		; (str lr, [sp, #-4]!)
   19f6c:	sub	sp, sp, #52	; 0x34
   19f70:	ldr	ip, [sp, #56]	; 0x38
   19f74:	ldr	lr, [ip]
   19f78:	cmp	lr, #0
   19f7c:	str	lr, [sp, #8]
   19f80:	beq	1a018 <__assert_fail@plt+0x8e14>
   19f84:	ldr	lr, [ip, #4]
   19f88:	cmp	lr, #0
   19f8c:	str	lr, [sp, #12]
   19f90:	beq	1a02c <__assert_fail@plt+0x8e28>
   19f94:	ldr	lr, [ip, #8]
   19f98:	cmp	lr, #0
   19f9c:	str	lr, [sp, #16]
   19fa0:	beq	1a034 <__assert_fail@plt+0x8e30>
   19fa4:	ldr	lr, [ip, #12]
   19fa8:	cmp	lr, #0
   19fac:	str	lr, [sp, #20]
   19fb0:	beq	1a03c <__assert_fail@plt+0x8e38>
   19fb4:	ldr	lr, [ip, #16]
   19fb8:	cmp	lr, #0
   19fbc:	str	lr, [sp, #24]
   19fc0:	beq	1a044 <__assert_fail@plt+0x8e40>
   19fc4:	ldr	lr, [ip, #20]
   19fc8:	cmp	lr, #0
   19fcc:	str	lr, [sp, #28]
   19fd0:	beq	1a04c <__assert_fail@plt+0x8e48>
   19fd4:	ldr	lr, [ip, #24]
   19fd8:	cmp	lr, #0
   19fdc:	str	lr, [sp, #32]
   19fe0:	beq	1a054 <__assert_fail@plt+0x8e50>
   19fe4:	ldr	lr, [ip, #28]
   19fe8:	cmp	lr, #0
   19fec:	str	lr, [sp, #36]	; 0x24
   19ff0:	beq	1a05c <__assert_fail@plt+0x8e58>
   19ff4:	ldr	lr, [ip, #32]
   19ff8:	cmp	lr, #0
   19ffc:	str	lr, [sp, #40]	; 0x28
   1a000:	beq	1a064 <__assert_fail@plt+0x8e60>
   1a004:	ldr	ip, [ip, #36]	; 0x24
   1a008:	cmp	ip, #0
   1a00c:	str	ip, [sp, #44]	; 0x2c
   1a010:	movne	lr, #10
   1a014:	moveq	lr, #9
   1a018:	add	ip, sp, #8
   1a01c:	stm	sp, {ip, lr}
   1a020:	bl	19b3c <__assert_fail@plt+0x8938>
   1a024:	add	sp, sp, #52	; 0x34
   1a028:	pop	{pc}		; (ldr pc, [sp], #4)
   1a02c:	mov	lr, #1
   1a030:	b	1a018 <__assert_fail@plt+0x8e14>
   1a034:	mov	lr, #2
   1a038:	b	1a018 <__assert_fail@plt+0x8e14>
   1a03c:	mov	lr, #3
   1a040:	b	1a018 <__assert_fail@plt+0x8e14>
   1a044:	mov	lr, #4
   1a048:	b	1a018 <__assert_fail@plt+0x8e14>
   1a04c:	mov	lr, #5
   1a050:	b	1a018 <__assert_fail@plt+0x8e14>
   1a054:	mov	lr, #6
   1a058:	b	1a018 <__assert_fail@plt+0x8e14>
   1a05c:	mov	lr, #7
   1a060:	b	1a018 <__assert_fail@plt+0x8e14>
   1a064:	mov	lr, #8
   1a068:	b	1a018 <__assert_fail@plt+0x8e14>
   1a06c:	push	{r3}		; (str r3, [sp, #-4]!)
   1a070:	push	{lr}		; (str lr, [sp, #-4]!)
   1a074:	sub	sp, sp, #56	; 0x38
   1a078:	ldr	ip, [sp, #64]	; 0x40
   1a07c:	add	r3, sp, #64	; 0x40
   1a080:	str	r3, [sp, #12]
   1a084:	cmp	ip, #0
   1a088:	str	ip, [sp, #16]
   1a08c:	beq	1a124 <__assert_fail@plt+0x8f20>
   1a090:	ldr	ip, [sp, #68]	; 0x44
   1a094:	cmp	ip, #0
   1a098:	str	ip, [sp, #20]
   1a09c:	beq	1a148 <__assert_fail@plt+0x8f44>
   1a0a0:	ldr	ip, [sp, #72]	; 0x48
   1a0a4:	cmp	ip, #0
   1a0a8:	str	ip, [sp, #24]
   1a0ac:	beq	1a150 <__assert_fail@plt+0x8f4c>
   1a0b0:	ldr	ip, [sp, #76]	; 0x4c
   1a0b4:	cmp	ip, #0
   1a0b8:	str	ip, [sp, #28]
   1a0bc:	beq	1a158 <__assert_fail@plt+0x8f54>
   1a0c0:	ldr	ip, [sp, #80]	; 0x50
   1a0c4:	cmp	ip, #0
   1a0c8:	str	ip, [sp, #32]
   1a0cc:	beq	1a160 <__assert_fail@plt+0x8f5c>
   1a0d0:	ldr	ip, [sp, #84]	; 0x54
   1a0d4:	cmp	ip, #0
   1a0d8:	str	ip, [sp, #36]	; 0x24
   1a0dc:	beq	1a168 <__assert_fail@plt+0x8f64>
   1a0e0:	ldr	ip, [sp, #88]	; 0x58
   1a0e4:	cmp	ip, #0
   1a0e8:	str	ip, [sp, #40]	; 0x28
   1a0ec:	beq	1a170 <__assert_fail@plt+0x8f6c>
   1a0f0:	ldr	ip, [sp, #92]	; 0x5c
   1a0f4:	cmp	ip, #0
   1a0f8:	str	ip, [sp, #44]	; 0x2c
   1a0fc:	beq	1a178 <__assert_fail@plt+0x8f74>
   1a100:	ldr	ip, [sp, #96]	; 0x60
   1a104:	cmp	ip, #0
   1a108:	str	ip, [sp, #48]	; 0x30
   1a10c:	beq	1a180 <__assert_fail@plt+0x8f7c>
   1a110:	ldr	r3, [sp, #100]	; 0x64
   1a114:	cmp	r3, #0
   1a118:	str	r3, [sp, #52]	; 0x34
   1a11c:	movne	ip, #10
   1a120:	moveq	ip, #9
   1a124:	ldr	r3, [sp, #60]	; 0x3c
   1a128:	add	lr, sp, #16
   1a12c:	str	lr, [sp]
   1a130:	str	ip, [sp, #4]
   1a134:	bl	19b3c <__assert_fail@plt+0x8938>
   1a138:	add	sp, sp, #56	; 0x38
   1a13c:	pop	{lr}		; (ldr lr, [sp], #4)
   1a140:	add	sp, sp, #4
   1a144:	bx	lr
   1a148:	mov	ip, #1
   1a14c:	b	1a124 <__assert_fail@plt+0x8f20>
   1a150:	mov	ip, #2
   1a154:	b	1a124 <__assert_fail@plt+0x8f20>
   1a158:	mov	ip, #3
   1a15c:	b	1a124 <__assert_fail@plt+0x8f20>
   1a160:	mov	ip, #4
   1a164:	b	1a124 <__assert_fail@plt+0x8f20>
   1a168:	mov	ip, #5
   1a16c:	b	1a124 <__assert_fail@plt+0x8f20>
   1a170:	mov	ip, #6
   1a174:	b	1a124 <__assert_fail@plt+0x8f20>
   1a178:	mov	ip, #7
   1a17c:	b	1a124 <__assert_fail@plt+0x8f20>
   1a180:	mov	ip, #8
   1a184:	b	1a124 <__assert_fail@plt+0x8f20>
   1a188:	movw	r3, #57732	; 0xe184
   1a18c:	movt	r3, #2
   1a190:	str	r4, [sp, #-8]!
   1a194:	mov	r0, #10
   1a198:	ldr	r1, [r3]
   1a19c:	str	lr, [sp, #4]
   1a1a0:	bl	10fb8 <fputc_unlocked@plt>
   1a1a4:	mov	r2, #5
   1a1a8:	movw	r1, #55500	; 0xd8cc
   1a1ac:	movt	r1, #1
   1a1b0:	mov	r0, #0
   1a1b4:	bl	10fc4 <dcgettext@plt>
   1a1b8:	mov	r1, r0
   1a1bc:	movw	r2, #55520	; 0xd8e0
   1a1c0:	movt	r2, #1
   1a1c4:	mov	r0, #1
   1a1c8:	bl	11120 <__printf_chk@plt>
   1a1cc:	mov	r2, #5
   1a1d0:	movw	r1, #55544	; 0xd8f8
   1a1d4:	movt	r1, #1
   1a1d8:	mov	r0, #0
   1a1dc:	bl	10fc4 <dcgettext@plt>
   1a1e0:	mov	r1, r0
   1a1e4:	movw	r3, #53588	; 0xd154
   1a1e8:	movt	r3, #1
   1a1ec:	movw	r2, #53628	; 0xd17c
   1a1f0:	movt	r2, #1
   1a1f4:	mov	r0, #1
   1a1f8:	bl	11120 <__printf_chk@plt>
   1a1fc:	mov	r2, #5
   1a200:	movw	r1, #55564	; 0xd90c
   1a204:	movt	r1, #1
   1a208:	mov	r0, #0
   1a20c:	bl	10fc4 <dcgettext@plt>
   1a210:	mov	r1, r0
   1a214:	movw	r2, #55604	; 0xd934
   1a218:	movt	r2, #1
   1a21c:	mov	r0, #1
   1a220:	ldr	r4, [sp]
   1a224:	ldr	lr, [sp, #4]
   1a228:	add	sp, sp, #8
   1a22c:	b	11120 <__printf_chk@plt>
   1a230:	strd	r4, [sp, #-16]!
   1a234:	mov	r4, r0
   1a238:	mov	r5, r2
   1a23c:	str	r6, [sp, #8]
   1a240:	mov	r6, r1
   1a244:	str	lr, [sp, #12]
   1a248:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a24c:	cmp	r0, #0
   1a250:	beq	1a264 <__assert_fail@plt+0x9060>
   1a254:	ldrd	r4, [sp]
   1a258:	ldr	r6, [sp, #8]
   1a25c:	add	sp, sp, #12
   1a260:	pop	{pc}		; (ldr pc, [sp], #4)
   1a264:	cmp	r4, #0
   1a268:	beq	1a278 <__assert_fail@plt+0x9074>
   1a26c:	cmp	r6, #0
   1a270:	cmpne	r5, #0
   1a274:	beq	1a254 <__assert_fail@plt+0x9050>
   1a278:	bl	1a834 <__assert_fail@plt+0x9630>
   1a27c:	str	r4, [sp, #-8]!
   1a280:	str	lr, [sp, #4]
   1a284:	bl	1b950 <__assert_fail@plt+0xa74c>
   1a288:	cmp	r0, #0
   1a28c:	beq	1a29c <__assert_fail@plt+0x9098>
   1a290:	ldr	r4, [sp]
   1a294:	add	sp, sp, #4
   1a298:	pop	{pc}		; (ldr pc, [sp], #4)
   1a29c:	bl	1a834 <__assert_fail@plt+0x9630>
   1a2a0:	str	r4, [sp, #-8]!
   1a2a4:	str	lr, [sp, #4]
   1a2a8:	bl	1b950 <__assert_fail@plt+0xa74c>
   1a2ac:	cmp	r0, #0
   1a2b0:	beq	1a2c0 <__assert_fail@plt+0x90bc>
   1a2b4:	ldr	r4, [sp]
   1a2b8:	add	sp, sp, #4
   1a2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2c0:	bl	1a834 <__assert_fail@plt+0x9630>
   1a2c4:	str	r4, [sp, #-8]!
   1a2c8:	str	lr, [sp, #4]
   1a2cc:	bl	1b950 <__assert_fail@plt+0xa74c>
   1a2d0:	cmp	r0, #0
   1a2d4:	beq	1a2e4 <__assert_fail@plt+0x90e0>
   1a2d8:	ldr	r4, [sp]
   1a2dc:	add	sp, sp, #4
   1a2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e4:	bl	1a834 <__assert_fail@plt+0x9630>
   1a2e8:	strd	r4, [sp, #-16]!
   1a2ec:	mov	r5, r0
   1a2f0:	mov	r4, r1
   1a2f4:	str	r6, [sp, #8]
   1a2f8:	str	lr, [sp, #12]
   1a2fc:	bl	1b98c <__assert_fail@plt+0xa788>
   1a300:	cmp	r0, #0
   1a304:	beq	1a318 <__assert_fail@plt+0x9114>
   1a308:	ldrd	r4, [sp]
   1a30c:	ldr	r6, [sp, #8]
   1a310:	add	sp, sp, #12
   1a314:	pop	{pc}		; (ldr pc, [sp], #4)
   1a318:	adds	r4, r4, #0
   1a31c:	movne	r4, #1
   1a320:	cmp	r5, #0
   1a324:	moveq	r4, #1
   1a328:	cmp	r4, #0
   1a32c:	beq	1a308 <__assert_fail@plt+0x9104>
   1a330:	bl	1a834 <__assert_fail@plt+0x9630>
   1a334:	cmp	r1, #0
   1a338:	orreq	r1, r1, #1
   1a33c:	str	r4, [sp, #-8]!
   1a340:	str	lr, [sp, #4]
   1a344:	bl	1b98c <__assert_fail@plt+0xa788>
   1a348:	cmp	r0, #0
   1a34c:	beq	1a35c <__assert_fail@plt+0x9158>
   1a350:	ldr	r4, [sp]
   1a354:	add	sp, sp, #4
   1a358:	pop	{pc}		; (ldr pc, [sp], #4)
   1a35c:	bl	1a834 <__assert_fail@plt+0x9630>
   1a360:	strd	r4, [sp, #-16]!
   1a364:	mov	r4, r0
   1a368:	mov	r5, r2
   1a36c:	str	r6, [sp, #8]
   1a370:	mov	r6, r1
   1a374:	str	lr, [sp, #12]
   1a378:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a37c:	cmp	r0, #0
   1a380:	beq	1a394 <__assert_fail@plt+0x9190>
   1a384:	ldrd	r4, [sp]
   1a388:	ldr	r6, [sp, #8]
   1a38c:	add	sp, sp, #12
   1a390:	pop	{pc}		; (ldr pc, [sp], #4)
   1a394:	cmp	r4, #0
   1a398:	beq	1a3a8 <__assert_fail@plt+0x91a4>
   1a39c:	cmp	r6, #0
   1a3a0:	cmpne	r5, #0
   1a3a4:	beq	1a384 <__assert_fail@plt+0x9180>
   1a3a8:	bl	1a834 <__assert_fail@plt+0x9630>
   1a3ac:	cmp	r2, #0
   1a3b0:	cmpne	r1, #0
   1a3b4:	str	r4, [sp, #-8]!
   1a3b8:	moveq	r2, #1
   1a3bc:	str	lr, [sp, #4]
   1a3c0:	moveq	r1, r2
   1a3c4:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a3c8:	cmp	r0, #0
   1a3cc:	beq	1a3dc <__assert_fail@plt+0x91d8>
   1a3d0:	ldr	r4, [sp]
   1a3d4:	add	sp, sp, #4
   1a3d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3dc:	bl	1a834 <__assert_fail@plt+0x9630>
   1a3e0:	mov	r2, r1
   1a3e4:	mov	r1, r0
   1a3e8:	str	r4, [sp, #-8]!
   1a3ec:	mov	r0, #0
   1a3f0:	str	lr, [sp, #4]
   1a3f4:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a3f8:	cmp	r0, #0
   1a3fc:	beq	1a40c <__assert_fail@plt+0x9208>
   1a400:	ldr	r4, [sp]
   1a404:	add	sp, sp, #4
   1a408:	pop	{pc}		; (ldr pc, [sp], #4)
   1a40c:	bl	1a834 <__assert_fail@plt+0x9630>
   1a410:	cmp	r1, #0
   1a414:	cmpne	r0, #0
   1a418:	str	r4, [sp, #-8]!
   1a41c:	moveq	r2, #1
   1a420:	movne	r2, r1
   1a424:	str	lr, [sp, #4]
   1a428:	movne	r1, r0
   1a42c:	moveq	r1, r2
   1a430:	mov	r0, #0
   1a434:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a438:	cmp	r0, #0
   1a43c:	beq	1a44c <__assert_fail@plt+0x9248>
   1a440:	ldr	r4, [sp]
   1a444:	add	sp, sp, #4
   1a448:	pop	{pc}		; (ldr pc, [sp], #4)
   1a44c:	bl	1a834 <__assert_fail@plt+0x9630>
   1a450:	cmp	r0, #0
   1a454:	strd	r4, [sp, #-16]!
   1a458:	mov	r5, r1
   1a45c:	ldr	r4, [r1]
   1a460:	str	r6, [sp, #8]
   1a464:	str	lr, [sp, #12]
   1a468:	beq	1a4b0 <__assert_fail@plt+0x92ac>
   1a46c:	lsr	r3, r4, #1
   1a470:	add	r3, r3, #1
   1a474:	adds	r4, r4, r3
   1a478:	bcs	1a4ac <__assert_fail@plt+0x92a8>
   1a47c:	mov	r2, #1
   1a480:	mov	r1, r4
   1a484:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a488:	cmp	r0, #0
   1a48c:	beq	1a4a4 <__assert_fail@plt+0x92a0>
   1a490:	ldr	r6, [sp, #8]
   1a494:	str	r4, [r5]
   1a498:	ldrd	r4, [sp]
   1a49c:	add	sp, sp, #12
   1a4a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4a4:	cmp	r4, #0
   1a4a8:	beq	1a490 <__assert_fail@plt+0x928c>
   1a4ac:	bl	1a834 <__assert_fail@plt+0x9630>
   1a4b0:	cmp	r4, #0
   1a4b4:	mov	r2, #1
   1a4b8:	moveq	r4, #64	; 0x40
   1a4bc:	mov	r1, r4
   1a4c0:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a4c4:	cmp	r0, #0
   1a4c8:	bne	1a490 <__assert_fail@plt+0x928c>
   1a4cc:	b	1a4ac <__assert_fail@plt+0x92a8>
   1a4d0:	cmp	r0, #0
   1a4d4:	strd	r4, [sp, #-16]!
   1a4d8:	mov	r5, r1
   1a4dc:	ldr	r4, [r1]
   1a4e0:	str	r6, [sp, #8]
   1a4e4:	mov	r6, r2
   1a4e8:	str	lr, [sp, #12]
   1a4ec:	beq	1a534 <__assert_fail@plt+0x9330>
   1a4f0:	lsr	r3, r4, #1
   1a4f4:	add	r3, r3, #1
   1a4f8:	adds	r4, r4, r3
   1a4fc:	bcs	1a530 <__assert_fail@plt+0x932c>
   1a500:	mov	r1, r4
   1a504:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a508:	cmp	r0, #0
   1a50c:	beq	1a524 <__assert_fail@plt+0x9320>
   1a510:	ldr	r6, [sp, #8]
   1a514:	str	r4, [r5]
   1a518:	ldrd	r4, [sp]
   1a51c:	add	sp, sp, #12
   1a520:	pop	{pc}		; (ldr pc, [sp], #4)
   1a524:	cmp	r4, #0
   1a528:	cmpne	r6, #0
   1a52c:	beq	1a510 <__assert_fail@plt+0x930c>
   1a530:	bl	1a834 <__assert_fail@plt+0x9630>
   1a534:	cmp	r4, #0
   1a538:	bne	1a54c <__assert_fail@plt+0x9348>
   1a53c:	mov	r4, #64	; 0x40
   1a540:	udiv	r4, r4, r2
   1a544:	cmp	r2, #64	; 0x40
   1a548:	addhi	r4, r4, #1
   1a54c:	mov	r2, r6
   1a550:	mov	r1, r4
   1a554:	mov	r0, #0
   1a558:	bl	1bb28 <__assert_fail@plt+0xa924>
   1a55c:	cmp	r0, #0
   1a560:	bne	1a510 <__assert_fail@plt+0x930c>
   1a564:	b	1a530 <__assert_fail@plt+0x932c>
   1a568:	ldr	ip, [r1]
   1a56c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a570:	strd	r6, [sp, #8]
   1a574:	mov	r7, r1
   1a578:	mov	r6, r0
   1a57c:	str	r8, [sp, #16]
   1a580:	mvn	r8, r3
   1a584:	lsr	r8, r8, #31
   1a588:	str	lr, [sp, #20]
   1a58c:	asr	r1, ip, #1
   1a590:	ldr	lr, [sp, #24]
   1a594:	adds	r4, ip, r1
   1a598:	mvnvs	r4, #-2147483648	; 0x80000000
   1a59c:	cmp	r3, r4
   1a5a0:	movge	r1, #0
   1a5a4:	andlt	r1, r8, #1
   1a5a8:	cmp	r1, #0
   1a5ac:	movne	r4, r3
   1a5b0:	smull	r0, r1, r4, lr
   1a5b4:	cmp	r1, r0, asr #31
   1a5b8:	bne	1a668 <__assert_fail@plt+0x9464>
   1a5bc:	cmp	r0, #63	; 0x3f
   1a5c0:	mov	r5, r0
   1a5c4:	ble	1a634 <__assert_fail@plt+0x9430>
   1a5c8:	cmp	r6, #0
   1a5cc:	sub	r1, r4, ip
   1a5d0:	streq	r6, [r7]
   1a5d4:	cmp	r1, r2
   1a5d8:	bge	1a608 <__assert_fail@plt+0x9404>
   1a5dc:	adds	r4, ip, r2
   1a5e0:	bvs	1a664 <__assert_fail@plt+0x9460>
   1a5e4:	cmp	r4, r3
   1a5e8:	movle	r3, #0
   1a5ec:	andgt	r3, r8, #1
   1a5f0:	cmp	r3, #0
   1a5f4:	bne	1a664 <__assert_fail@plt+0x9460>
   1a5f8:	smull	r0, r1, r4, lr
   1a5fc:	cmp	r1, r0, asr #31
   1a600:	mov	r5, r0
   1a604:	bne	1a664 <__assert_fail@plt+0x9460>
   1a608:	mov	r1, r5
   1a60c:	mov	r0, r6
   1a610:	bl	1b98c <__assert_fail@plt+0xa788>
   1a614:	cmp	r0, #0
   1a618:	beq	1a648 <__assert_fail@plt+0x9444>
   1a61c:	ldr	r8, [sp, #16]
   1a620:	str	r4, [r7]
   1a624:	ldrd	r4, [sp]
   1a628:	ldrd	r6, [sp, #8]
   1a62c:	add	sp, sp, #20
   1a630:	pop	{pc}		; (ldr pc, [sp], #4)
   1a634:	mov	r0, #64	; 0x40
   1a638:	sdiv	r4, r0, lr
   1a63c:	mls	r5, lr, r4, r0
   1a640:	sub	r5, r0, r5
   1a644:	b	1a5c8 <__assert_fail@plt+0x93c4>
   1a648:	adds	r5, r5, #0
   1a64c:	movne	r5, #1
   1a650:	cmp	r6, #0
   1a654:	movne	r6, r5
   1a658:	moveq	r6, #1
   1a65c:	cmp	r6, #0
   1a660:	beq	1a61c <__assert_fail@plt+0x9418>
   1a664:	bl	1a834 <__assert_fail@plt+0x9630>
   1a668:	mvn	r0, #-2147483648	; 0x80000000
   1a66c:	b	1a638 <__assert_fail@plt+0x9434>
   1a670:	mov	r1, #1
   1a674:	str	r4, [sp, #-8]!
   1a678:	str	lr, [sp, #4]
   1a67c:	bl	1b8dc <__assert_fail@plt+0xa6d8>
   1a680:	cmp	r0, #0
   1a684:	beq	1a694 <__assert_fail@plt+0x9490>
   1a688:	ldr	r4, [sp]
   1a68c:	add	sp, sp, #4
   1a690:	pop	{pc}		; (ldr pc, [sp], #4)
   1a694:	bl	1a834 <__assert_fail@plt+0x9630>
   1a698:	mov	r1, #1
   1a69c:	str	r4, [sp, #-8]!
   1a6a0:	str	lr, [sp, #4]
   1a6a4:	bl	1b8dc <__assert_fail@plt+0xa6d8>
   1a6a8:	cmp	r0, #0
   1a6ac:	beq	1a6bc <__assert_fail@plt+0x94b8>
   1a6b0:	ldr	r4, [sp]
   1a6b4:	add	sp, sp, #4
   1a6b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6bc:	bl	1a834 <__assert_fail@plt+0x9630>
   1a6c0:	str	r4, [sp, #-8]!
   1a6c4:	str	lr, [sp, #4]
   1a6c8:	bl	1b8dc <__assert_fail@plt+0xa6d8>
   1a6cc:	cmp	r0, #0
   1a6d0:	beq	1a6e0 <__assert_fail@plt+0x94dc>
   1a6d4:	ldr	r4, [sp]
   1a6d8:	add	sp, sp, #4
   1a6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6e0:	bl	1a834 <__assert_fail@plt+0x9630>
   1a6e4:	str	r4, [sp, #-8]!
   1a6e8:	str	lr, [sp, #4]
   1a6ec:	bl	1b8dc <__assert_fail@plt+0xa6d8>
   1a6f0:	cmp	r0, #0
   1a6f4:	beq	1a704 <__assert_fail@plt+0x9500>
   1a6f8:	ldr	r4, [sp]
   1a6fc:	add	sp, sp, #4
   1a700:	pop	{pc}		; (ldr pc, [sp], #4)
   1a704:	bl	1a834 <__assert_fail@plt+0x9630>
   1a708:	strd	r4, [sp, #-16]!
   1a70c:	mov	r4, r1
   1a710:	str	r6, [sp, #8]
   1a714:	mov	r6, r0
   1a718:	mov	r0, r1
   1a71c:	str	lr, [sp, #12]
   1a720:	bl	1b950 <__assert_fail@plt+0xa74c>
   1a724:	subs	r5, r0, #0
   1a728:	beq	1a74c <__assert_fail@plt+0x9548>
   1a72c:	mov	r2, r4
   1a730:	mov	r1, r6
   1a734:	bl	10f70 <memcpy@plt>
   1a738:	mov	r0, r5
   1a73c:	ldrd	r4, [sp]
   1a740:	ldr	r6, [sp, #8]
   1a744:	add	sp, sp, #12
   1a748:	pop	{pc}		; (ldr pc, [sp], #4)
   1a74c:	bl	1a834 <__assert_fail@plt+0x9630>
   1a750:	strd	r4, [sp, #-16]!
   1a754:	mov	r4, r1
   1a758:	str	r6, [sp, #8]
   1a75c:	mov	r6, r0
   1a760:	mov	r0, r1
   1a764:	str	lr, [sp, #12]
   1a768:	bl	1b950 <__assert_fail@plt+0xa74c>
   1a76c:	subs	r5, r0, #0
   1a770:	beq	1a794 <__assert_fail@plt+0x9590>
   1a774:	mov	r2, r4
   1a778:	mov	r1, r6
   1a77c:	bl	10f70 <memcpy@plt>
   1a780:	mov	r0, r5
   1a784:	ldrd	r4, [sp]
   1a788:	ldr	r6, [sp, #8]
   1a78c:	add	sp, sp, #12
   1a790:	pop	{pc}		; (ldr pc, [sp], #4)
   1a794:	bl	1a834 <__assert_fail@plt+0x9630>
   1a798:	strd	r4, [sp, #-16]!
   1a79c:	mov	r4, r1
   1a7a0:	str	r6, [sp, #8]
   1a7a4:	mov	r6, r0
   1a7a8:	add	r0, r1, #1
   1a7ac:	str	lr, [sp, #12]
   1a7b0:	bl	1b950 <__assert_fail@plt+0xa74c>
   1a7b4:	subs	r5, r0, #0
   1a7b8:	beq	1a7e4 <__assert_fail@plt+0x95e0>
   1a7bc:	mov	r3, #0
   1a7c0:	mov	r1, r6
   1a7c4:	mov	r2, r4
   1a7c8:	strb	r3, [r5, r4]
   1a7cc:	bl	10f70 <memcpy@plt>
   1a7d0:	mov	r0, r5
   1a7d4:	ldrd	r4, [sp]
   1a7d8:	ldr	r6, [sp, #8]
   1a7dc:	add	sp, sp, #12
   1a7e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7e4:	bl	1a834 <__assert_fail@plt+0x9630>
   1a7e8:	strd	r4, [sp, #-16]!
   1a7ec:	str	r6, [sp, #8]
   1a7f0:	mov	r6, r0
   1a7f4:	str	lr, [sp, #12]
   1a7f8:	bl	110c0 <strlen@plt>
   1a7fc:	add	r4, r0, #1
   1a800:	mov	r0, r4
   1a804:	bl	1b950 <__assert_fail@plt+0xa74c>
   1a808:	subs	r5, r0, #0
   1a80c:	beq	1a830 <__assert_fail@plt+0x962c>
   1a810:	mov	r2, r4
   1a814:	mov	r1, r6
   1a818:	bl	10f70 <memcpy@plt>
   1a81c:	mov	r0, r5
   1a820:	ldrd	r4, [sp]
   1a824:	ldr	r6, [sp, #8]
   1a828:	add	sp, sp, #12
   1a82c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a830:	bl	1a834 <__assert_fail@plt+0x9630>
   1a834:	movw	r3, #57636	; 0xe124
   1a838:	movt	r3, #2
   1a83c:	str	r4, [sp, #-8]!
   1a840:	ldr	r4, [r3]
   1a844:	mov	r2, #5
   1a848:	movw	r1, #55684	; 0xd984
   1a84c:	movt	r1, #1
   1a850:	mov	r0, #0
   1a854:	str	lr, [sp, #4]
   1a858:	bl	10fc4 <dcgettext@plt>
   1a85c:	mov	r3, r0
   1a860:	movw	r2, #54604	; 0xd54c
   1a864:	movt	r2, #1
   1a868:	mov	r1, #0
   1a86c:	mov	r0, r4
   1a870:	bl	1103c <error@plt>
   1a874:	bl	111ec <abort@plt>
   1a878:	push	{r0, r1, r2, r3}
   1a87c:	mov	r1, #1
   1a880:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a884:	movw	r4, #57732	; 0xe184
   1a888:	movt	r4, #2
   1a88c:	ldr	r0, [r4]
   1a890:	strd	r6, [sp, #8]
   1a894:	str	lr, [sp, #16]
   1a898:	sub	sp, sp, #12
   1a89c:	add	ip, sp, #36	; 0x24
   1a8a0:	ldr	r2, [sp, #32]
   1a8a4:	mov	r3, ip
   1a8a8:	str	ip, [sp, #4]
   1a8ac:	bl	11078 <__vfprintf_chk@plt>
   1a8b0:	subs	r5, r0, #0
   1a8b4:	blt	1a8d8 <__assert_fail@plt+0x96d4>
   1a8b8:	mov	r0, r5
   1a8bc:	add	sp, sp, #12
   1a8c0:	ldrd	r4, [sp]
   1a8c4:	ldrd	r6, [sp, #8]
   1a8c8:	ldr	lr, [sp, #16]
   1a8cc:	add	sp, sp, #20
   1a8d0:	add	sp, sp, #16
   1a8d4:	bx	lr
   1a8d8:	ldr	r0, [r4]
   1a8dc:	bl	10f58 <ferror@plt>
   1a8e0:	subs	r4, r0, #0
   1a8e4:	bne	1a8b8 <__assert_fail@plt+0x96b4>
   1a8e8:	movw	r3, #57636	; 0xe124
   1a8ec:	movt	r3, #2
   1a8f0:	ldr	r6, [r3]
   1a8f4:	bl	110d8 <__errno_location@plt>
   1a8f8:	ldr	r7, [r0]
   1a8fc:	mov	r2, #5
   1a900:	mov	r0, r4
   1a904:	movw	r1, #55704	; 0xd998
   1a908:	movt	r1, #1
   1a90c:	bl	10fc4 <dcgettext@plt>
   1a910:	mov	r2, r0
   1a914:	mov	r0, r6
   1a918:	mov	r1, r7
   1a91c:	bl	1103c <error@plt>
   1a920:	b	1a8b8 <__assert_fail@plt+0x96b4>
   1a924:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a928:	movw	r4, #57732	; 0xe184
   1a92c:	movt	r4, #2
   1a930:	mov	r3, r1
   1a934:	mov	r2, r0
   1a938:	ldr	r0, [r4]
   1a93c:	mov	r1, #1
   1a940:	strd	r6, [sp, #8]
   1a944:	str	r8, [sp, #16]
   1a948:	str	lr, [sp, #20]
   1a94c:	bl	11078 <__vfprintf_chk@plt>
   1a950:	subs	r5, r0, #0
   1a954:	blt	1a970 <__assert_fail@plt+0x976c>
   1a958:	mov	r0, r5
   1a95c:	ldrd	r4, [sp]
   1a960:	ldrd	r6, [sp, #8]
   1a964:	ldr	r8, [sp, #16]
   1a968:	add	sp, sp, #20
   1a96c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a970:	ldr	r0, [r4]
   1a974:	bl	10f58 <ferror@plt>
   1a978:	subs	r4, r0, #0
   1a97c:	bne	1a958 <__assert_fail@plt+0x9754>
   1a980:	movw	r3, #57636	; 0xe124
   1a984:	movt	r3, #2
   1a988:	ldr	r6, [r3]
   1a98c:	bl	110d8 <__errno_location@plt>
   1a990:	ldr	r7, [r0]
   1a994:	mov	r2, #5
   1a998:	mov	r0, r4
   1a99c:	movw	r1, #55704	; 0xd998
   1a9a0:	movt	r1, #1
   1a9a4:	bl	10fc4 <dcgettext@plt>
   1a9a8:	mov	r2, r0
   1a9ac:	mov	r0, r6
   1a9b0:	mov	r1, r7
   1a9b4:	bl	1103c <error@plt>
   1a9b8:	b	1a958 <__assert_fail@plt+0x9754>
   1a9bc:	push	{r1, r2, r3}
   1a9c0:	mov	r1, #1
   1a9c4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a9c8:	mov	r5, r0
   1a9cc:	strd	r6, [sp, #8]
   1a9d0:	str	lr, [sp, #16]
   1a9d4:	sub	sp, sp, #8
   1a9d8:	add	ip, sp, #32
   1a9dc:	ldr	r2, [sp, #28]
   1a9e0:	mov	r3, ip
   1a9e4:	str	ip, [sp, #4]
   1a9e8:	bl	11078 <__vfprintf_chk@plt>
   1a9ec:	subs	r4, r0, #0
   1a9f0:	blt	1aa14 <__assert_fail@plt+0x9810>
   1a9f4:	mov	r0, r4
   1a9f8:	add	sp, sp, #8
   1a9fc:	ldrd	r4, [sp]
   1aa00:	ldrd	r6, [sp, #8]
   1aa04:	ldr	lr, [sp, #16]
   1aa08:	add	sp, sp, #20
   1aa0c:	add	sp, sp, #12
   1aa10:	bx	lr
   1aa14:	mov	r0, r5
   1aa18:	bl	10f58 <ferror@plt>
   1aa1c:	subs	r5, r0, #0
   1aa20:	bne	1a9f4 <__assert_fail@plt+0x97f0>
   1aa24:	movw	r3, #57636	; 0xe124
   1aa28:	movt	r3, #2
   1aa2c:	ldr	r6, [r3]
   1aa30:	bl	110d8 <__errno_location@plt>
   1aa34:	ldr	r7, [r0]
   1aa38:	mov	r2, #5
   1aa3c:	mov	r0, r5
   1aa40:	movw	r1, #55704	; 0xd998
   1aa44:	movt	r1, #1
   1aa48:	bl	10fc4 <dcgettext@plt>
   1aa4c:	mov	r2, r0
   1aa50:	mov	r0, r6
   1aa54:	mov	r1, r7
   1aa58:	bl	1103c <error@plt>
   1aa5c:	b	1a9f4 <__assert_fail@plt+0x97f0>
   1aa60:	mov	r3, r2
   1aa64:	mov	r2, r1
   1aa68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aa6c:	mov	r1, #1
   1aa70:	mov	r5, r0
   1aa74:	strd	r6, [sp, #8]
   1aa78:	str	r8, [sp, #16]
   1aa7c:	str	lr, [sp, #20]
   1aa80:	bl	11078 <__vfprintf_chk@plt>
   1aa84:	subs	r4, r0, #0
   1aa88:	blt	1aaa4 <__assert_fail@plt+0x98a0>
   1aa8c:	mov	r0, r4
   1aa90:	ldrd	r4, [sp]
   1aa94:	ldrd	r6, [sp, #8]
   1aa98:	ldr	r8, [sp, #16]
   1aa9c:	add	sp, sp, #20
   1aaa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaa4:	mov	r0, r5
   1aaa8:	bl	10f58 <ferror@plt>
   1aaac:	subs	r5, r0, #0
   1aab0:	bne	1aa8c <__assert_fail@plt+0x9888>
   1aab4:	movw	r3, #57636	; 0xe124
   1aab8:	movt	r3, #2
   1aabc:	ldr	r6, [r3]
   1aac0:	bl	110d8 <__errno_location@plt>
   1aac4:	ldr	r7, [r0]
   1aac8:	mov	r2, #5
   1aacc:	mov	r0, r5
   1aad0:	movw	r1, #55704	; 0xd998
   1aad4:	movt	r1, #1
   1aad8:	bl	10fc4 <dcgettext@plt>
   1aadc:	mov	r2, r0
   1aae0:	mov	r0, r6
   1aae4:	mov	r1, r7
   1aae8:	bl	1103c <error@plt>
   1aaec:	b	1aa8c <__assert_fail@plt+0x9888>
   1aaf0:	sub	r0, r0, #1
   1aaf4:	movw	ip, #57636	; 0xe124
   1aaf8:	movt	ip, #2
   1aafc:	cmp	r0, #3
   1ab00:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab04:	sub	sp, sp, #20
   1ab08:	ldr	r5, [ip]
   1ab0c:	bhi	1ab5c <__assert_fail@plt+0x9958>
   1ab10:	movw	ip, #55736	; 0xd9b8
   1ab14:	movt	ip, #1
   1ab18:	cmp	r1, #0
   1ab1c:	ldr	r0, [ip, r0, lsl #2]
   1ab20:	blt	1ab60 <__assert_fail@plt+0x995c>
   1ab24:	ldr	r6, [r3, r1, lsl #4]
   1ab28:	movw	r4, #55752	; 0xd9c8
   1ab2c:	movt	r4, #1
   1ab30:	mov	r1, r0
   1ab34:	mov	r2, #5
   1ab38:	mov	r0, #0
   1ab3c:	bl	10fc4 <dcgettext@plt>
   1ab40:	ldr	ip, [sp, #24]
   1ab44:	mov	r2, r0
   1ab48:	mov	r3, r4
   1ab4c:	mov	r0, r5
   1ab50:	mov	r1, #0
   1ab54:	stm	sp, {r6, ip}
   1ab58:	bl	1103c <error@plt>
   1ab5c:	bl	111ec <abort@plt>
   1ab60:	mov	r3, #0
   1ab64:	movw	r4, #55752	; 0xd9c8
   1ab68:	movt	r4, #1
   1ab6c:	add	r6, sp, #12
   1ab70:	strb	r2, [sp, #12]
   1ab74:	sub	r4, r4, r1
   1ab78:	strb	r3, [sp, #13]
   1ab7c:	b	1ab30 <__assert_fail@plt+0x992c>
   1ab80:	cmp	r2, #36	; 0x24
   1ab84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ab88:	strd	r6, [sp, #8]
   1ab8c:	strd	r8, [sp, #16]
   1ab90:	strd	sl, [sp, #24]
   1ab94:	str	lr, [sp, #32]
   1ab98:	sub	sp, sp, #36	; 0x24
   1ab9c:	bhi	1b814 <__assert_fail@plt+0xa610>
   1aba0:	cmp	r1, #0
   1aba4:	mov	r6, r2
   1aba8:	mov	r5, r1
   1abac:	mov	sl, r0
   1abb0:	addeq	r5, sp, #28
   1abb4:	mov	r9, r3
   1abb8:	bl	110d8 <__errno_location@plt>
   1abbc:	mov	r3, #0
   1abc0:	mov	fp, r0
   1abc4:	str	r3, [r0]
   1abc8:	ldrb	r4, [sl]
   1abcc:	bl	110a8 <__ctype_b_loc@plt>
   1abd0:	ldr	r2, [r0]
   1abd4:	lsl	r3, r4, #1
   1abd8:	ldrh	r3, [r2, r3]
   1abdc:	tst	r3, #8192	; 0x2000
   1abe0:	beq	1abfc <__assert_fail@plt+0x99f8>
   1abe4:	mov	r3, sl
   1abe8:	ldrb	r4, [r3, #1]!
   1abec:	lsl	r1, r4, #1
   1abf0:	ldrh	r1, [r2, r1]
   1abf4:	tst	r1, #8192	; 0x2000
   1abf8:	bne	1abe8 <__assert_fail@plt+0x99e4>
   1abfc:	cmp	r4, #45	; 0x2d
   1ac00:	beq	1ac9c <__assert_fail@plt+0x9a98>
   1ac04:	mov	r2, r6
   1ac08:	mov	r3, #0
   1ac0c:	mov	r1, r5
   1ac10:	mov	r0, sl
   1ac14:	bl	10f7c <__strtoull_internal@plt>
   1ac18:	ldr	r8, [r5]
   1ac1c:	mov	r6, r0
   1ac20:	mov	r7, r1
   1ac24:	cmp	r8, sl
   1ac28:	beq	1ac84 <__assert_fail@plt+0x9a80>
   1ac2c:	ldr	r4, [fp]
   1ac30:	cmp	r4, #0
   1ac34:	bne	1ac74 <__assert_fail@plt+0x9a70>
   1ac38:	ldr	r3, [sp, #72]	; 0x48
   1ac3c:	cmp	r3, #0
   1ac40:	beq	1ac50 <__assert_fail@plt+0x9a4c>
   1ac44:	ldrb	sl, [r8]
   1ac48:	cmp	sl, #0
   1ac4c:	bne	1b008 <__assert_fail@plt+0x9e04>
   1ac50:	strd	r6, [r9]
   1ac54:	mov	r0, r4
   1ac58:	add	sp, sp, #36	; 0x24
   1ac5c:	ldrd	r4, [sp]
   1ac60:	ldrd	r6, [sp, #8]
   1ac64:	ldrd	r8, [sp, #16]
   1ac68:	ldrd	sl, [sp, #24]
   1ac6c:	add	sp, sp, #32
   1ac70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac74:	cmp	r4, #34	; 0x22
   1ac78:	bne	1ac9c <__assert_fail@plt+0x9a98>
   1ac7c:	mov	r4, #1
   1ac80:	b	1ac38 <__assert_fail@plt+0x9a34>
   1ac84:	ldr	r3, [sp, #72]	; 0x48
   1ac88:	cmp	r3, #0
   1ac8c:	beq	1ac9c <__assert_fail@plt+0x9a98>
   1ac90:	ldrb	sl, [sl]
   1ac94:	cmp	sl, #0
   1ac98:	bne	1aca4 <__assert_fail@plt+0x9aa0>
   1ac9c:	mov	r4, #4
   1aca0:	b	1ac54 <__assert_fail@plt+0x9a50>
   1aca4:	mov	r1, sl
   1aca8:	mov	r0, r3
   1acac:	bl	110cc <strchr@plt>
   1acb0:	cmp	r0, #0
   1acb4:	movne	r4, #0
   1acb8:	movne	r6, #1
   1acbc:	movne	r7, r4
   1acc0:	beq	1ac9c <__assert_fail@plt+0x9a98>
   1acc4:	sub	r3, sl, #69	; 0x45
   1acc8:	cmp	r3, #47	; 0x2f
   1accc:	ldrls	pc, [pc, r3, lsl #2]
   1acd0:	b	1add8 <__assert_fail@plt+0x9bd4>
   1acd4:	muleq	r1, r4, sp
   1acd8:	ldrdeq	sl, [r1], -r8
   1acdc:	muleq	r1, r4, sp
   1ace0:	ldrdeq	sl, [r1], -r8
   1ace4:	ldrdeq	sl, [r1], -r8
   1ace8:	ldrdeq	sl, [r1], -r8
   1acec:	muleq	r1, r4, sp
   1acf0:	ldrdeq	sl, [r1], -r8
   1acf4:	muleq	r1, r4, sp
   1acf8:	ldrdeq	sl, [r1], -r8
   1acfc:	ldrdeq	sl, [r1], -r8
   1ad00:	muleq	r1, r4, sp
   1ad04:	ldrdeq	sl, [r1], -r8
   1ad08:	ldrdeq	sl, [r1], -r8
   1ad0c:	ldrdeq	sl, [r1], -r8
   1ad10:	muleq	r1, r4, sp
   1ad14:	ldrdeq	sl, [r1], -r8
   1ad18:	ldrdeq	sl, [r1], -r8
   1ad1c:	ldrdeq	sl, [r1], -r8
   1ad20:	ldrdeq	sl, [r1], -r8
   1ad24:	muleq	r1, r4, sp
   1ad28:	muleq	r1, r4, sp
   1ad2c:	ldrdeq	sl, [r1], -r8
   1ad30:	ldrdeq	sl, [r1], -r8
   1ad34:	ldrdeq	sl, [r1], -r8
   1ad38:	ldrdeq	sl, [r1], -r8
   1ad3c:	ldrdeq	sl, [r1], -r8
   1ad40:	ldrdeq	sl, [r1], -r8
   1ad44:	ldrdeq	sl, [r1], -r8
   1ad48:	ldrdeq	sl, [r1], -r8
   1ad4c:	ldrdeq	sl, [r1], -r8
   1ad50:	ldrdeq	sl, [r1], -r8
   1ad54:	ldrdeq	sl, [r1], -r8
   1ad58:	ldrdeq	sl, [r1], -r8
   1ad5c:	muleq	r1, r4, sp
   1ad60:	ldrdeq	sl, [r1], -r8
   1ad64:	ldrdeq	sl, [r1], -r8
   1ad68:	ldrdeq	sl, [r1], -r8
   1ad6c:	muleq	r1, r4, sp
   1ad70:	ldrdeq	sl, [r1], -r8
   1ad74:	muleq	r1, r4, sp
   1ad78:	ldrdeq	sl, [r1], -r8
   1ad7c:	ldrdeq	sl, [r1], -r8
   1ad80:	ldrdeq	sl, [r1], -r8
   1ad84:	ldrdeq	sl, [r1], -r8
   1ad88:	ldrdeq	sl, [r1], -r8
   1ad8c:	ldrdeq	sl, [r1], -r8
   1ad90:	muleq	r1, r4, sp
   1ad94:	mov	r1, #48	; 0x30
   1ad98:	ldr	r0, [sp, #72]	; 0x48
   1ad9c:	bl	110cc <strchr@plt>
   1ada0:	cmp	r0, #0
   1ada4:	beq	1add8 <__assert_fail@plt+0x9bd4>
   1ada8:	ldrb	r3, [r8, #1]
   1adac:	cmp	r3, #68	; 0x44
   1adb0:	beq	1b368 <__assert_fail@plt+0xa164>
   1adb4:	cmp	r3, #105	; 0x69
   1adb8:	beq	1b020 <__assert_fail@plt+0x9e1c>
   1adbc:	cmp	r3, #66	; 0x42
   1adc0:	moveq	r3, #2
   1adc4:	movne	r3, #1
   1adc8:	moveq	ip, #1000	; 0x3e8
   1adcc:	movne	ip, #1024	; 0x400
   1add0:	str	r3, [sp, #12]
   1add4:	b	1ade4 <__assert_fail@plt+0x9be0>
   1add8:	mov	r3, #1
   1addc:	mov	ip, #1024	; 0x400
   1ade0:	str	r3, [sp, #12]
   1ade4:	sub	sl, sl, #66	; 0x42
   1ade8:	cmp	sl, #53	; 0x35
   1adec:	ldrls	pc, [pc, sl, lsl #2]
   1adf0:	b	1afcc <__assert_fail@plt+0x9dc8>
   1adf4:			; <UNDEFINED> instruction: 0x0001b2b4
   1adf8:	andeq	sl, r1, ip, asr #31
   1adfc:	andeq	sl, r1, ip, asr #31
   1ae00:	andeq	fp, r1, r4, asr r2
   1ae04:	andeq	sl, r1, ip, asr #31
   1ae08:	ldrdeq	fp, [r1], -r0
   1ae0c:	andeq	sl, r1, ip, asr #31
   1ae10:	andeq	sl, r1, ip, asr #31
   1ae14:	andeq	sl, r1, ip, asr #31
   1ae18:	ldrdeq	sl, [r1], -r4
   1ae1c:	andeq	sl, r1, ip, asr #31
   1ae20:	strdeq	fp, [r1], -ip
   1ae24:	andeq	sl, r1, ip, asr #31
   1ae28:	andeq	sl, r1, ip, asr #31
   1ae2c:	andeq	fp, r1, r0, lsr #3
   1ae30:	andeq	sl, r1, ip, asr #31
   1ae34:	andeq	sl, r1, ip, asr #31
   1ae38:	andeq	sl, r1, ip, asr #31
   1ae3c:	andeq	fp, r1, r0, asr #2
   1ae40:	andeq	sl, r1, ip, asr #31
   1ae44:	andeq	sl, r1, ip, asr #31
   1ae48:	andeq	sl, r1, ip, asr #31
   1ae4c:	andeq	sl, r1, ip, asr #31
   1ae50:	andeq	fp, r1, r4, ror r0
   1ae54:	andeq	sl, r1, ip, asr #29
   1ae58:	andeq	sl, r1, ip, asr #31
   1ae5c:	andeq	sl, r1, ip, asr #31
   1ae60:	andeq	sl, r1, ip, asr #31
   1ae64:	andeq	sl, r1, ip, asr #31
   1ae68:	andeq	sl, r1, ip, asr #31
   1ae6c:	andeq	sl, r1, ip, asr #31
   1ae70:	andeq	sl, r1, ip, asr #31
   1ae74:	andeq	fp, r1, r4, asr r0
   1ae78:			; <UNDEFINED> instruction: 0x0001afb4
   1ae7c:	andeq	sl, r1, ip, asr #31
   1ae80:	andeq	sl, r1, ip, asr #31
   1ae84:	andeq	sl, r1, ip, asr #31
   1ae88:	ldrdeq	fp, [r1], -r0
   1ae8c:	andeq	sl, r1, ip, asr #31
   1ae90:	andeq	sl, r1, ip, asr #31
   1ae94:	andeq	sl, r1, ip, asr #31
   1ae98:	ldrdeq	sl, [r1], -r4
   1ae9c:	andeq	sl, r1, ip, asr #31
   1aea0:	strdeq	fp, [r1], -ip
   1aea4:	andeq	sl, r1, ip, asr #31
   1aea8:	andeq	sl, r1, ip, asr #31
   1aeac:	andeq	sl, r1, ip, asr #31
   1aeb0:	andeq	sl, r1, ip, asr #31
   1aeb4:	andeq	sl, r1, ip, asr #31
   1aeb8:	andeq	sl, r1, ip, asr #31
   1aebc:	andeq	fp, r1, r0, asr #2
   1aec0:	andeq	sl, r1, ip, asr #31
   1aec4:	andeq	sl, r1, ip, asr #31
   1aec8:	andeq	fp, r1, ip, lsr r0
   1aecc:	asr	r3, ip, #31
   1aed0:	mov	r2, ip
   1aed4:	cmp	r7, #0
   1aed8:	mov	r1, #0
   1aedc:	strd	r2, [sp]
   1aee0:	bne	1b420 <__assert_fail@plt+0xa21c>
   1aee4:	umull	r6, r7, r6, ip
   1aee8:	mov	r2, r6
   1aeec:	mov	r3, r7
   1aef0:	cmp	r1, #0
   1aef4:	bne	1b334 <__assert_fail@plt+0xa130>
   1aef8:	cmp	r3, #0
   1aefc:	mov	lr, r1
   1af00:	bne	1b54c <__assert_fail@plt+0xa348>
   1af04:	umull	r2, r3, r2, ip
   1af08:	mov	r0, r2
   1af0c:	mov	r1, r3
   1af10:	cmp	lr, #0
   1af14:	bne	1b334 <__assert_fail@plt+0xa130>
   1af18:	cmp	r1, #0
   1af1c:	bne	1b528 <__assert_fail@plt+0xa324>
   1af20:	umull	r0, r1, r0, ip
   1af24:	mov	r2, r0
   1af28:	mov	r3, r1
   1af2c:	cmp	lr, #0
   1af30:	bne	1b334 <__assert_fail@plt+0xa130>
   1af34:	cmp	r3, #0
   1af38:	bne	1b1d8 <__assert_fail@plt+0x9fd4>
   1af3c:	umull	r2, r3, r2, ip
   1af40:	mov	r0, r2
   1af44:	mov	r1, r3
   1af48:	cmp	lr, #0
   1af4c:	bne	1b334 <__assert_fail@plt+0xa130>
   1af50:	cmp	r1, #0
   1af54:	bne	1b3d8 <__assert_fail@plt+0xa1d4>
   1af58:	umull	r0, r1, r0, ip
   1af5c:	mov	r2, r0
   1af60:	mov	r3, r1
   1af64:	cmp	lr, #0
   1af68:	bne	1b334 <__assert_fail@plt+0xa130>
   1af6c:	cmp	r3, #0
   1af70:	mov	r7, lr
   1af74:	bne	1b3b4 <__assert_fail@plt+0xa1b0>
   1af78:	umull	r2, r3, r2, ip
   1af7c:	mov	r6, r2
   1af80:	mov	lr, r3
   1af84:	cmp	r7, #0
   1af88:	bne	1b334 <__assert_fail@plt+0xa130>
   1af8c:	cmp	lr, #0
   1af90:	bne	1b378 <__assert_fail@plt+0xa174>
   1af94:	umull	r2, r3, r6, ip
   1af98:	mov	r0, r2
   1af9c:	mov	r2, r3
   1afa0:	subs	r3, r7, #0
   1afa4:	bne	1b334 <__assert_fail@plt+0xa130>
   1afa8:	mov	r6, r0
   1afac:	mov	r7, r2
   1afb0:	orr	r4, r4, r3
   1afb4:	ldr	r2, [sp, #12]
   1afb8:	add	r3, r8, r2
   1afbc:	str	r3, [r5]
   1afc0:	ldrb	r3, [r8, r2]
   1afc4:	cmp	r3, #0
   1afc8:	beq	1ac50 <__assert_fail@plt+0x9a4c>
   1afcc:	orr	r4, r4, #2
   1afd0:	b	1ac50 <__assert_fail@plt+0x9a4c>
   1afd4:	cmp	r7, #0
   1afd8:	asr	r1, ip, #31
   1afdc:	mov	lr, #0
   1afe0:	bne	1b344 <__assert_fail@plt+0xa140>
   1afe4:	umull	r2, r3, r6, ip
   1afe8:	mov	r6, r2
   1afec:	mov	r7, r3
   1aff0:	cmp	lr, #0
   1aff4:	beq	1afb4 <__assert_fail@plt+0x9db0>
   1aff8:	mvn	r6, #0
   1affc:	mov	r4, #1
   1b000:	mov	r7, r6
   1b004:	b	1afb4 <__assert_fail@plt+0x9db0>
   1b008:	mov	r0, r3
   1b00c:	mov	r1, sl
   1b010:	bl	110cc <strchr@plt>
   1b014:	cmp	r0, #0
   1b018:	bne	1acc4 <__assert_fail@plt+0x9ac0>
   1b01c:	b	1afcc <__assert_fail@plt+0x9dc8>
   1b020:	ldrb	r3, [r8, #2]
   1b024:	mov	ip, #1024	; 0x400
   1b028:	cmp	r3, #66	; 0x42
   1b02c:	movne	r3, #1
   1b030:	moveq	r3, #3
   1b034:	str	r3, [sp, #12]
   1b038:	b	1ade4 <__assert_fail@plt+0x9be0>
   1b03c:	lsr	r3, r7, #31
   1b040:	adds	r6, r6, r6
   1b044:	adc	r7, r7, r7
   1b048:	cmp	r3, #0
   1b04c:	beq	1afb4 <__assert_fail@plt+0x9db0>
   1b050:	b	1aff8 <__assert_fail@plt+0x9df4>
   1b054:	lsr	r3, r7, #23
   1b058:	lsl	r7, r7, #9
   1b05c:	cmp	r3, #0
   1b060:	lsl	r3, r6, #9
   1b064:	orr	r7, r7, r6, lsr #23
   1b068:	bne	1aff8 <__assert_fail@plt+0x9df4>
   1b06c:	mov	r6, r3
   1b070:	b	1afb4 <__assert_fail@plt+0x9db0>
   1b074:	asr	r3, ip, #31
   1b078:	mov	r2, ip
   1b07c:	cmp	r7, #0
   1b080:	mov	r1, #0
   1b084:	strd	r2, [sp]
   1b088:	bne	1b494 <__assert_fail@plt+0xa290>
   1b08c:	umull	r6, r7, r6, ip
   1b090:	mov	r0, r6
   1b094:	mov	fp, r7
   1b098:	cmp	r1, #0
   1b09c:	bne	1b334 <__assert_fail@plt+0xa130>
   1b0a0:	cmp	fp, #0
   1b0a4:	mov	lr, r1
   1b0a8:	bne	1b624 <__assert_fail@plt+0xa420>
   1b0ac:	umull	r0, r1, r0, ip
   1b0b0:	mov	r2, r0
   1b0b4:	mov	r3, r1
   1b0b8:	cmp	lr, #0
   1b0bc:	bne	1b334 <__assert_fail@plt+0xa130>
   1b0c0:	cmp	r3, #0
   1b0c4:	bne	1b64c <__assert_fail@plt+0xa448>
   1b0c8:	umull	r2, r3, r2, ip
   1b0cc:	mov	r0, r2
   1b0d0:	mov	r1, r3
   1b0d4:	cmp	lr, #0
   1b0d8:	bne	1b334 <__assert_fail@plt+0xa130>
   1b0dc:	cmp	r1, #0
   1b0e0:	bne	1b5cc <__assert_fail@plt+0xa3c8>
   1b0e4:	umull	r0, r1, r0, ip
   1b0e8:	mov	r2, r0
   1b0ec:	mov	r3, r1
   1b0f0:	cmp	lr, #0
   1b0f4:	bne	1b334 <__assert_fail@plt+0xa130>
   1b0f8:	cmp	r3, #0
   1b0fc:	bne	1b3fc <__assert_fail@plt+0xa1f8>
   1b100:	umull	r2, r3, r2, ip
   1b104:	mov	r0, r2
   1b108:	mov	r1, r3
   1b10c:	cmp	lr, #0
   1b110:	bne	1b334 <__assert_fail@plt+0xa130>
   1b114:	cmp	r1, #0
   1b118:	beq	1af58 <__assert_fail@plt+0x9d54>
   1b11c:	umull	r6, r7, r0, ip
   1b120:	mov	fp, lr
   1b124:	mov	sl, r7
   1b128:	umlal	sl, fp, r1, ip
   1b12c:	cmp	fp, #0
   1b130:	bne	1b834 <__assert_fail@plt+0xa630>
   1b134:	mov	r2, r6
   1b138:	mov	r3, sl
   1b13c:	b	1af64 <__assert_fail@plt+0x9d60>
   1b140:	asr	r3, ip, #31
   1b144:	mov	r2, ip
   1b148:	cmp	r7, #0
   1b14c:	mov	r1, #0
   1b150:	strd	r2, [sp]
   1b154:	bne	1b4b8 <__assert_fail@plt+0xa2b4>
   1b158:	umull	r6, r7, r6, ip
   1b15c:	mov	r0, r6
   1b160:	mov	fp, r7
   1b164:	cmp	r1, #0
   1b168:	bne	1b334 <__assert_fail@plt+0xa130>
   1b16c:	cmp	fp, #0
   1b170:	mov	lr, r1
   1b174:	beq	1af58 <__assert_fail@plt+0x9d54>
   1b178:	umull	r6, r7, r0, ip
   1b17c:	mov	r3, r1
   1b180:	mov	r2, r7
   1b184:	umlal	r2, r3, fp, ip
   1b188:	cmp	r3, #0
   1b18c:	strd	r2, [sp, #16]
   1b190:	bne	1b718 <__assert_fail@plt+0xa514>
   1b194:	mov	r2, r6
   1b198:	ldr	r3, [sp, #16]
   1b19c:	b	1af64 <__assert_fail@plt+0x9d60>
   1b1a0:	asr	r3, ip, #31
   1b1a4:	mov	r2, ip
   1b1a8:	cmp	r7, #0
   1b1ac:	mov	r1, #0
   1b1b0:	strd	r2, [sp]
   1b1b4:	bne	1b500 <__assert_fail@plt+0xa2fc>
   1b1b8:	umull	r6, r7, r6, ip
   1b1bc:	mov	r2, r6
   1b1c0:	mov	r3, r7
   1b1c4:	cmp	r1, #0
   1b1c8:	bne	1b334 <__assert_fail@plt+0xa130>
   1b1cc:	cmp	r3, #0
   1b1d0:	mov	lr, r1
   1b1d4:	beq	1af3c <__assert_fail@plt+0x9d38>
   1b1d8:	umull	r6, r7, r2, ip
   1b1dc:	mov	fp, lr
   1b1e0:	mov	sl, r7
   1b1e4:	umlal	sl, fp, r3, ip
   1b1e8:	cmp	fp, #0
   1b1ec:	bne	1b7f8 <__assert_fail@plt+0xa5f4>
   1b1f0:	mov	r0, r6
   1b1f4:	mov	r1, sl
   1b1f8:	b	1af48 <__assert_fail@plt+0x9d44>
   1b1fc:	asr	r3, ip, #31
   1b200:	mov	r2, ip
   1b204:	cmp	r7, #0
   1b208:	mov	r1, #0
   1b20c:	strd	r2, [sp]
   1b210:	bne	1b4dc <__assert_fail@plt+0xa2d8>
   1b214:	umull	r6, r7, r6, ip
   1b218:	mov	sl, r6
   1b21c:	mov	lr, r7
   1b220:	cmp	r1, #0
   1b224:	bne	1aff8 <__assert_fail@plt+0x9df4>
   1b228:	cmp	lr, #0
   1b22c:	mov	r7, r1
   1b230:	bne	1b5f0 <__assert_fail@plt+0xa3ec>
   1b234:	umull	sl, fp, sl, ip
   1b238:	mov	r0, sl
   1b23c:	mov	r2, fp
   1b240:	cmp	r7, #0
   1b244:	mov	r6, r0
   1b248:	mov	r7, r2
   1b24c:	beq	1afb4 <__assert_fail@plt+0x9db0>
   1b250:	b	1aff8 <__assert_fail@plt+0x9df4>
   1b254:	asr	r3, ip, #31
   1b258:	mov	r2, ip
   1b25c:	cmp	r7, #0
   1b260:	mov	r1, #0
   1b264:	strd	r2, [sp]
   1b268:	bne	1b470 <__assert_fail@plt+0xa26c>
   1b26c:	umull	r6, r7, r6, ip
   1b270:	mov	r0, r6
   1b274:	mov	fp, r7
   1b278:	cmp	r1, #0
   1b27c:	bne	1b334 <__assert_fail@plt+0xa130>
   1b280:	cmp	fp, #0
   1b284:	mov	lr, r1
   1b288:	beq	1b0e4 <__assert_fail@plt+0x9ee0>
   1b28c:	umull	r6, r7, r0, ip
   1b290:	mov	r3, r1
   1b294:	mov	r2, r7
   1b298:	umlal	r2, r3, fp, ip
   1b29c:	cmp	r3, #0
   1b2a0:	strd	r2, [sp, #16]
   1b2a4:	bne	1b788 <__assert_fail@plt+0xa584>
   1b2a8:	mov	r2, r6
   1b2ac:	ldr	r3, [sp, #16]
   1b2b0:	b	1b0f0 <__assert_fail@plt+0x9eec>
   1b2b4:	lsr	r3, r7, #22
   1b2b8:	lsl	r7, r7, #10
   1b2bc:	cmp	r3, #0
   1b2c0:	lsl	r3, r6, #10
   1b2c4:	orr	r7, r7, r6, lsr #22
   1b2c8:	beq	1b06c <__assert_fail@plt+0x9e68>
   1b2cc:	b	1aff8 <__assert_fail@plt+0x9df4>
   1b2d0:	asr	r3, ip, #31
   1b2d4:	mov	r2, ip
   1b2d8:	cmp	r7, #0
   1b2dc:	mov	r1, #0
   1b2e0:	strd	r2, [sp]
   1b2e4:	bne	1b448 <__assert_fail@plt+0xa244>
   1b2e8:	umull	r6, r7, r6, ip
   1b2ec:	mov	r2, r6
   1b2f0:	mov	r3, r7
   1b2f4:	cmp	r1, #0
   1b2f8:	bne	1aff8 <__assert_fail@plt+0x9df4>
   1b2fc:	cmp	r3, #0
   1b300:	mov	r7, r1
   1b304:	bne	1b5ac <__assert_fail@plt+0xa3a8>
   1b308:	umull	r2, r3, r2, ip
   1b30c:	mov	r6, r2
   1b310:	mov	lr, r3
   1b314:	cmp	r7, #0
   1b318:	bne	1aff8 <__assert_fail@plt+0x9df4>
   1b31c:	cmp	lr, #0
   1b320:	bne	1b570 <__assert_fail@plt+0xa36c>
   1b324:	umull	r2, r3, r6, ip
   1b328:	mov	r0, r2
   1b32c:	mov	r2, r3
   1b330:	b	1b240 <__assert_fail@plt+0xa03c>
   1b334:	mvn	r6, #0
   1b338:	mov	r3, #1
   1b33c:	mov	r7, r6
   1b340:	b	1afb0 <__assert_fail@plt+0x9dac>
   1b344:	umull	sl, fp, r6, ip
   1b348:	mov	r3, lr
   1b34c:	mov	r2, fp
   1b350:	umlal	r2, r3, r7, ip
   1b354:	cmp	r3, #0
   1b358:	bne	1b750 <__assert_fail@plt+0xa54c>
   1b35c:	mov	r6, sl
   1b360:	mov	r7, r2
   1b364:	b	1aff0 <__assert_fail@plt+0x9dec>
   1b368:	mov	r3, #2
   1b36c:	mov	ip, #1000	; 0x3e8
   1b370:	str	r3, [sp, #12]
   1b374:	b	1ade4 <__assert_fail@plt+0x9be0>
   1b378:	umull	r0, r1, r6, ip
   1b37c:	mov	r3, r7
   1b380:	mov	r2, r1
   1b384:	strd	r0, [sp, #16]
   1b388:	umlal	r2, r3, lr, ip
   1b38c:	cmp	r3, #0
   1b390:	beq	1afa0 <__assert_fail@plt+0x9d9c>
   1b394:	ldrd	sl, [sp]
   1b398:	mov	r7, #1
   1b39c:	ldr	r0, [sp, #16]
   1b3a0:	ldr	r3, [sp, #20]
   1b3a4:	mul	r2, r6, fp
   1b3a8:	mla	r2, lr, sl, r2
   1b3ac:	add	r2, r2, r3
   1b3b0:	b	1afa0 <__assert_fail@plt+0x9d9c>
   1b3b4:	umull	sl, fp, r2, ip
   1b3b8:	mov	r1, lr
   1b3bc:	mov	r0, fp
   1b3c0:	umlal	r0, r1, r3, ip
   1b3c4:	cmp	r1, #0
   1b3c8:	bne	1b6a8 <__assert_fail@plt+0xa4a4>
   1b3cc:	mov	r6, sl
   1b3d0:	mov	lr, r0
   1b3d4:	b	1af84 <__assert_fail@plt+0x9d80>
   1b3d8:	umull	sl, fp, r0, ip
   1b3dc:	mov	r7, lr
   1b3e0:	mov	r6, fp
   1b3e4:	umlal	r6, r7, r1, ip
   1b3e8:	cmp	r7, #0
   1b3ec:	bne	1b850 <__assert_fail@plt+0xa64c>
   1b3f0:	mov	r2, sl
   1b3f4:	mov	r3, r6
   1b3f8:	b	1af64 <__assert_fail@plt+0x9d60>
   1b3fc:	umull	sl, fp, r2, ip
   1b400:	mov	r7, lr
   1b404:	mov	r6, fp
   1b408:	umlal	r6, r7, r3, ip
   1b40c:	cmp	r7, #0
   1b410:	bne	1b6e0 <__assert_fail@plt+0xa4dc>
   1b414:	mov	r0, sl
   1b418:	mov	r1, r6
   1b41c:	b	1b10c <__assert_fail@plt+0x9f08>
   1b420:	umull	sl, fp, r6, ip
   1b424:	mov	r3, r1
   1b428:	mov	r2, fp
   1b42c:	umlal	r2, r3, r7, ip
   1b430:	cmp	r3, #0
   1b434:	strd	r2, [sp, #16]
   1b438:	bne	1b6c4 <__assert_fail@plt+0xa4c0>
   1b43c:	mov	r2, sl
   1b440:	ldr	r3, [sp, #16]
   1b444:	b	1aef0 <__assert_fail@plt+0x9cec>
   1b448:	umull	sl, fp, r6, ip
   1b44c:	mov	r3, r1
   1b450:	mov	r2, fp
   1b454:	umlal	r2, r3, r7, ip
   1b458:	cmp	r3, #0
   1b45c:	strd	r2, [sp, #16]
   1b460:	bne	1b7a4 <__assert_fail@plt+0xa5a0>
   1b464:	mov	r2, sl
   1b468:	ldr	r3, [sp, #16]
   1b46c:	b	1b2f4 <__assert_fail@plt+0xa0f0>
   1b470:	umull	sl, fp, r6, ip
   1b474:	mov	r3, r1
   1b478:	mov	r2, fp
   1b47c:	umlal	r2, r3, r7, ip
   1b480:	cmp	r3, #0
   1b484:	bne	1b670 <__assert_fail@plt+0xa46c>
   1b488:	mov	r0, sl
   1b48c:	mov	fp, r2
   1b490:	b	1b278 <__assert_fail@plt+0xa074>
   1b494:	umull	sl, fp, r6, ip
   1b498:	mov	r3, r1
   1b49c:	mov	r2, fp
   1b4a0:	umlal	r2, r3, r7, ip
   1b4a4:	cmp	r3, #0
   1b4a8:	bne	1b734 <__assert_fail@plt+0xa530>
   1b4ac:	mov	r0, sl
   1b4b0:	mov	fp, r2
   1b4b4:	b	1b098 <__assert_fail@plt+0x9e94>
   1b4b8:	umull	sl, fp, r6, ip
   1b4bc:	mov	r3, r1
   1b4c0:	mov	r2, fp
   1b4c4:	umlal	r2, r3, r7, ip
   1b4c8:	cmp	r3, #0
   1b4cc:	bne	1b7c0 <__assert_fail@plt+0xa5bc>
   1b4d0:	mov	r0, sl
   1b4d4:	mov	fp, r2
   1b4d8:	b	1b164 <__assert_fail@plt+0x9f60>
   1b4dc:	umull	sl, fp, r6, ip
   1b4e0:	mov	r3, r1
   1b4e4:	mov	r2, fp
   1b4e8:	strd	sl, [sp, #16]
   1b4ec:	umlal	r2, r3, r7, ip
   1b4f0:	cmp	r3, #0
   1b4f4:	bne	1b768 <__assert_fail@plt+0xa564>
   1b4f8:	mov	lr, r2
   1b4fc:	b	1b220 <__assert_fail@plt+0xa01c>
   1b500:	umull	sl, fp, r6, ip
   1b504:	mov	r3, r1
   1b508:	mov	r2, fp
   1b50c:	umlal	r2, r3, r7, ip
   1b510:	cmp	r3, #0
   1b514:	strd	r2, [sp, #16]
   1b518:	bne	1b86c <__assert_fail@plt+0xa668>
   1b51c:	mov	r2, sl
   1b520:	ldr	r3, [sp, #16]
   1b524:	b	1b1c4 <__assert_fail@plt+0x9fc0>
   1b528:	umull	sl, fp, r0, ip
   1b52c:	mov	r7, lr
   1b530:	mov	r6, fp
   1b534:	umlal	r6, r7, r1, ip
   1b538:	cmp	r7, #0
   1b53c:	bne	1b888 <__assert_fail@plt+0xa684>
   1b540:	mov	r2, sl
   1b544:	mov	r3, r6
   1b548:	b	1af2c <__assert_fail@plt+0x9d28>
   1b54c:	umull	r6, r7, r2, ip
   1b550:	mov	fp, r1
   1b554:	mov	sl, r7
   1b558:	umlal	sl, fp, r3, ip
   1b55c:	cmp	fp, #0
   1b560:	bne	1b6fc <__assert_fail@plt+0xa4f8>
   1b564:	mov	r0, r6
   1b568:	mov	r1, sl
   1b56c:	b	1af10 <__assert_fail@plt+0x9d0c>
   1b570:	umull	r0, r1, r6, ip
   1b574:	mov	r3, r7
   1b578:	mov	r2, r1
   1b57c:	strd	r0, [sp, #16]
   1b580:	umlal	r2, r3, lr, ip
   1b584:	cmp	r3, #0
   1b588:	beq	1b240 <__assert_fail@plt+0xa03c>
   1b58c:	ldrd	sl, [sp]
   1b590:	mov	r7, #1
   1b594:	ldr	r0, [sp, #16]
   1b598:	ldr	r3, [sp, #20]
   1b59c:	mul	r2, r6, fp
   1b5a0:	mla	r2, lr, sl, r2
   1b5a4:	add	r2, r2, r3
   1b5a8:	b	1b240 <__assert_fail@plt+0xa03c>
   1b5ac:	umull	sl, fp, r2, ip
   1b5b0:	mov	r0, fp
   1b5b4:	umlal	r0, r1, r3, ip
   1b5b8:	cmp	r1, #0
   1b5bc:	bne	1b8a4 <__assert_fail@plt+0xa6a0>
   1b5c0:	mov	r6, sl
   1b5c4:	mov	lr, r0
   1b5c8:	b	1b314 <__assert_fail@plt+0xa110>
   1b5cc:	umull	r6, r7, r0, ip
   1b5d0:	mov	fp, lr
   1b5d4:	mov	sl, r7
   1b5d8:	umlal	sl, fp, r1, ip
   1b5dc:	cmp	fp, #0
   1b5e0:	bne	1b7dc <__assert_fail@plt+0xa5d8>
   1b5e4:	mov	r2, r6
   1b5e8:	mov	r3, sl
   1b5ec:	b	1b0f0 <__assert_fail@plt+0x9eec>
   1b5f0:	umull	r0, r1, sl, ip
   1b5f4:	mov	r3, r7
   1b5f8:	mov	r2, r1
   1b5fc:	umlal	r2, r3, lr, ip
   1b600:	cmp	r3, #0
   1b604:	beq	1b240 <__assert_fail@plt+0xa03c>
   1b608:	ldr	r3, [sp, #4]
   1b60c:	mov	r7, #1
   1b610:	mul	r2, sl, r3
   1b614:	ldr	r3, [sp]
   1b618:	mla	r2, lr, r3, r2
   1b61c:	add	r2, r2, r1
   1b620:	b	1b240 <__assert_fail@plt+0xa03c>
   1b624:	umull	r6, r7, r0, ip
   1b628:	mov	r3, r1
   1b62c:	mov	r2, r7
   1b630:	umlal	r2, r3, fp, ip
   1b634:	cmp	r3, #0
   1b638:	strd	r2, [sp, #16]
   1b63c:	bne	1b8c0 <__assert_fail@plt+0xa6bc>
   1b640:	mov	r2, r6
   1b644:	ldr	r3, [sp, #16]
   1b648:	b	1b0b8 <__assert_fail@plt+0x9eb4>
   1b64c:	umull	sl, fp, r2, ip
   1b650:	mov	r7, lr
   1b654:	mov	r6, fp
   1b658:	umlal	r6, r7, r3, ip
   1b65c:	cmp	r7, #0
   1b660:	bne	1b68c <__assert_fail@plt+0xa488>
   1b664:	mov	r0, sl
   1b668:	mov	r1, r6
   1b66c:	b	1b0d4 <__assert_fail@plt+0x9ed0>
   1b670:	ldrd	r2, [sp]
   1b674:	mov	r0, sl
   1b678:	mov	r1, #1
   1b67c:	mul	r6, r6, r3
   1b680:	mla	r7, r2, r7, r6
   1b684:	add	fp, r7, fp
   1b688:	b	1b278 <__assert_fail@plt+0xa074>
   1b68c:	ldrd	r6, [sp]
   1b690:	mov	r0, sl
   1b694:	mov	lr, #1
   1b698:	mul	r2, r2, r7
   1b69c:	mla	r1, r3, r6, r2
   1b6a0:	add	r1, r1, fp
   1b6a4:	b	1b0d4 <__assert_fail@plt+0x9ed0>
   1b6a8:	ldrd	r0, [sp]
   1b6ac:	mov	r6, sl
   1b6b0:	mov	r7, #1
   1b6b4:	mul	r2, r2, r1
   1b6b8:	mla	lr, r3, r0, r2
   1b6bc:	add	lr, lr, fp
   1b6c0:	b	1af84 <__assert_fail@plt+0x9d80>
   1b6c4:	ldm	sp, {r0, r3}
   1b6c8:	mov	r2, sl
   1b6cc:	mov	r1, #1
   1b6d0:	mul	r3, r6, r3
   1b6d4:	mla	r3, r0, r7, r3
   1b6d8:	add	r3, r3, fp
   1b6dc:	b	1aef0 <__assert_fail@plt+0x9cec>
   1b6e0:	ldrd	r6, [sp]
   1b6e4:	mov	r0, sl
   1b6e8:	mov	lr, #1
   1b6ec:	mul	r2, r2, r7
   1b6f0:	mla	r1, r3, r6, r2
   1b6f4:	add	r1, r1, fp
   1b6f8:	b	1b10c <__assert_fail@plt+0x9f08>
   1b6fc:	ldrd	sl, [sp]
   1b700:	mov	r0, r6
   1b704:	mov	lr, #1
   1b708:	mul	r2, r2, fp
   1b70c:	mla	r1, r3, sl, r2
   1b710:	add	r1, r1, r7
   1b714:	b	1af10 <__assert_fail@plt+0x9d0c>
   1b718:	ldm	sp, {r1, r3}
   1b71c:	mov	r2, r6
   1b720:	mov	lr, #1
   1b724:	mul	r3, r0, r3
   1b728:	mla	r3, fp, r1, r3
   1b72c:	add	r3, r3, r7
   1b730:	b	1af64 <__assert_fail@plt+0x9d60>
   1b734:	ldrd	r2, [sp]
   1b738:	mov	r0, sl
   1b73c:	mov	r1, #1
   1b740:	mul	r6, r6, r3
   1b744:	mla	r7, r2, r7, r6
   1b748:	add	fp, r7, fp
   1b74c:	b	1b098 <__assert_fail@plt+0x9e94>
   1b750:	mul	r3, r6, r1
   1b754:	mov	lr, #1
   1b758:	mov	r6, sl
   1b75c:	mla	r7, ip, r7, r3
   1b760:	add	r7, r7, fp
   1b764:	b	1aff0 <__assert_fail@plt+0x9dec>
   1b768:	ldrd	r2, [sp]
   1b76c:	mov	r1, #1
   1b770:	ldr	sl, [sp, #16]
   1b774:	mul	lr, r6, r3
   1b778:	ldr	r3, [sp, #20]
   1b77c:	mla	lr, r2, r7, lr
   1b780:	add	lr, lr, r3
   1b784:	b	1b220 <__assert_fail@plt+0xa01c>
   1b788:	ldm	sp, {r1, r3}
   1b78c:	mov	r2, r6
   1b790:	mov	lr, #1
   1b794:	mul	r3, r0, r3
   1b798:	mla	r3, fp, r1, r3
   1b79c:	add	r3, r3, r7
   1b7a0:	b	1b0f0 <__assert_fail@plt+0x9eec>
   1b7a4:	ldm	sp, {r0, r3}
   1b7a8:	mov	r2, sl
   1b7ac:	mov	r1, #1
   1b7b0:	mul	r3, r6, r3
   1b7b4:	mla	r3, r0, r7, r3
   1b7b8:	add	r3, r3, fp
   1b7bc:	b	1b2f4 <__assert_fail@plt+0xa0f0>
   1b7c0:	ldrd	r2, [sp]
   1b7c4:	mov	r0, sl
   1b7c8:	mov	r1, #1
   1b7cc:	mul	r6, r6, r3
   1b7d0:	mla	r7, r2, r7, r6
   1b7d4:	add	fp, r7, fp
   1b7d8:	b	1b164 <__assert_fail@plt+0x9f60>
   1b7dc:	ldrd	sl, [sp]
   1b7e0:	mov	r2, r6
   1b7e4:	mov	lr, #1
   1b7e8:	mul	r3, r0, fp
   1b7ec:	mla	r3, r1, sl, r3
   1b7f0:	add	r3, r3, r7
   1b7f4:	b	1b0f0 <__assert_fail@plt+0x9eec>
   1b7f8:	ldrd	sl, [sp]
   1b7fc:	mov	r0, r6
   1b800:	mov	lr, #1
   1b804:	mul	r2, r2, fp
   1b808:	mla	r1, r3, sl, r2
   1b80c:	add	r1, r1, r7
   1b810:	b	1af48 <__assert_fail@plt+0x9d44>
   1b814:	movw	r3, #55856	; 0xda30
   1b818:	movt	r3, #1
   1b81c:	movw	r1, #55868	; 0xda3c
   1b820:	movt	r1, #1
   1b824:	movw	r0, #55884	; 0xda4c
   1b828:	movt	r0, #1
   1b82c:	mov	r2, #85	; 0x55
   1b830:	bl	11204 <__assert_fail@plt>
   1b834:	ldrd	sl, [sp]
   1b838:	mov	r2, r6
   1b83c:	mov	lr, #1
   1b840:	mul	r3, r0, fp
   1b844:	mla	r3, r1, sl, r3
   1b848:	add	r3, r3, r7
   1b84c:	b	1af64 <__assert_fail@plt+0x9d60>
   1b850:	ldrd	r6, [sp]
   1b854:	mov	r2, sl
   1b858:	mov	lr, #1
   1b85c:	mul	r3, r0, r7
   1b860:	mla	r3, r1, r6, r3
   1b864:	add	r3, r3, fp
   1b868:	b	1af64 <__assert_fail@plt+0x9d60>
   1b86c:	ldm	sp, {r0, r3}
   1b870:	mov	r2, sl
   1b874:	mov	r1, #1
   1b878:	mul	r3, r6, r3
   1b87c:	mla	r3, r0, r7, r3
   1b880:	add	r3, r3, fp
   1b884:	b	1b1c4 <__assert_fail@plt+0x9fc0>
   1b888:	ldrd	r6, [sp]
   1b88c:	mov	r2, sl
   1b890:	mov	lr, #1
   1b894:	mul	r3, r0, r7
   1b898:	mla	r3, r1, r6, r3
   1b89c:	add	r3, r3, fp
   1b8a0:	b	1af2c <__assert_fail@plt+0x9d28>
   1b8a4:	ldrd	r0, [sp]
   1b8a8:	mov	r6, sl
   1b8ac:	mov	r7, #1
   1b8b0:	mul	r2, r2, r1
   1b8b4:	mla	lr, r3, r0, r2
   1b8b8:	add	lr, lr, fp
   1b8bc:	b	1b314 <__assert_fail@plt+0xa110>
   1b8c0:	ldm	sp, {r1, r3}
   1b8c4:	mov	r2, r6
   1b8c8:	mov	lr, #1
   1b8cc:	mul	r3, r0, r3
   1b8d0:	mla	r3, fp, r1, r3
   1b8d4:	add	r3, r3, r7
   1b8d8:	b	1b0b8 <__assert_fail@plt+0x9eb4>
   1b8dc:	cmp	r1, #0
   1b8e0:	cmpne	r0, #0
   1b8e4:	beq	1b930 <__assert_fail@plt+0xa72c>
   1b8e8:	strd	r4, [sp, #-16]!
   1b8ec:	umull	r4, r5, r0, r1
   1b8f0:	str	r6, [sp, #8]
   1b8f4:	str	lr, [sp, #12]
   1b8f8:	adds	r3, r5, #0
   1b8fc:	movne	r3, #1
   1b900:	cmp	r4, #0
   1b904:	blt	1b910 <__assert_fail@plt+0xa70c>
   1b908:	cmp	r3, #0
   1b90c:	beq	1b93c <__assert_fail@plt+0xa738>
   1b910:	bl	110d8 <__errno_location@plt>
   1b914:	mov	r3, #12
   1b918:	ldrd	r4, [sp]
   1b91c:	ldr	r6, [sp, #8]
   1b920:	add	sp, sp, #12
   1b924:	str	r3, [r0]
   1b928:	mov	r0, #0
   1b92c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b930:	mov	r1, #1
   1b934:	mov	r0, r1
   1b938:	b	10f10 <calloc@plt>
   1b93c:	ldrd	r4, [sp]
   1b940:	ldr	r6, [sp, #8]
   1b944:	ldr	lr, [sp, #12]
   1b948:	add	sp, sp, #16
   1b94c:	b	10f10 <calloc@plt>
   1b950:	cmp	r0, #0
   1b954:	beq	1b960 <__assert_fail@plt+0xa75c>
   1b958:	blt	1b968 <__assert_fail@plt+0xa764>
   1b95c:	b	11060 <malloc@plt>
   1b960:	mov	r0, #1
   1b964:	b	11060 <malloc@plt>
   1b968:	str	r4, [sp, #-8]!
   1b96c:	str	lr, [sp, #4]
   1b970:	bl	110d8 <__errno_location@plt>
   1b974:	mov	r3, #12
   1b978:	ldr	r4, [sp]
   1b97c:	add	sp, sp, #4
   1b980:	str	r3, [r0]
   1b984:	mov	r0, #0
   1b988:	pop	{pc}		; (ldr pc, [sp], #4)
   1b98c:	cmp	r0, #0
   1b990:	beq	1b9b8 <__assert_fail@plt+0xa7b4>
   1b994:	cmp	r1, #0
   1b998:	str	r4, [sp, #-8]!
   1b99c:	str	lr, [sp, #4]
   1b9a0:	beq	1b9c0 <__assert_fail@plt+0xa7bc>
   1b9a4:	blt	1b9d4 <__assert_fail@plt+0xa7d0>
   1b9a8:	ldr	r4, [sp]
   1b9ac:	ldr	lr, [sp, #4]
   1b9b0:	add	sp, sp, #8
   1b9b4:	b	10fd0 <realloc@plt>
   1b9b8:	mov	r0, r1
   1b9bc:	b	1b950 <__assert_fail@plt+0xa74c>
   1b9c0:	bl	15c8c <__assert_fail@plt+0x4a88>
   1b9c4:	ldr	r4, [sp]
   1b9c8:	add	sp, sp, #4
   1b9cc:	mov	r0, #0
   1b9d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9d4:	bl	110d8 <__errno_location@plt>
   1b9d8:	mov	r3, #12
   1b9dc:	str	r3, [r0]
   1b9e0:	b	1b9c4 <__assert_fail@plt+0xa7c0>
   1b9e4:	strd	r4, [sp, #-16]!
   1b9e8:	mov	r4, r0
   1b9ec:	str	r6, [sp, #8]
   1b9f0:	str	lr, [sp, #12]
   1b9f4:	bl	11024 <__fpending@plt>
   1b9f8:	ldr	r5, [r4]
   1b9fc:	mov	r6, r0
   1ba00:	mov	r0, r4
   1ba04:	bl	15b78 <__assert_fail@plt+0x4974>
   1ba08:	mov	r4, r0
   1ba0c:	and	r5, r5, #32
   1ba10:	cmp	r5, #0
   1ba14:	bne	1ba4c <__assert_fail@plt+0xa848>
   1ba18:	cmp	r0, #0
   1ba1c:	beq	1ba38 <__assert_fail@plt+0xa834>
   1ba20:	cmp	r6, #0
   1ba24:	bne	1ba64 <__assert_fail@plt+0xa860>
   1ba28:	bl	110d8 <__errno_location@plt>
   1ba2c:	ldr	r4, [r0]
   1ba30:	subs	r4, r4, #9
   1ba34:	mvnne	r4, #0
   1ba38:	mov	r0, r4
   1ba3c:	ldrd	r4, [sp]
   1ba40:	ldr	r6, [sp, #8]
   1ba44:	add	sp, sp, #12
   1ba48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba4c:	cmp	r0, #0
   1ba50:	bne	1ba64 <__assert_fail@plt+0xa860>
   1ba54:	bl	110d8 <__errno_location@plt>
   1ba58:	str	r4, [r0]
   1ba5c:	mvn	r4, #0
   1ba60:	b	1ba38 <__assert_fail@plt+0xa834>
   1ba64:	mvn	r4, #0
   1ba68:	b	1ba38 <__assert_fail@plt+0xa834>
   1ba6c:	mov	r0, #14
   1ba70:	str	r4, [sp, #-8]!
   1ba74:	str	lr, [sp, #4]
   1ba78:	bl	1118c <nl_langinfo@plt>
   1ba7c:	cmp	r0, #0
   1ba80:	beq	1baa4 <__assert_fail@plt+0xa8a0>
   1ba84:	ldrb	r2, [r0]
   1ba88:	movw	r3, #55924	; 0xda74
   1ba8c:	movt	r3, #1
   1ba90:	ldr	r4, [sp]
   1ba94:	add	sp, sp, #4
   1ba98:	cmp	r2, #0
   1ba9c:	moveq	r0, r3
   1baa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1baa4:	ldr	r4, [sp]
   1baa8:	add	sp, sp, #4
   1baac:	movw	r0, #55924	; 0xda74
   1bab0:	movt	r0, #1
   1bab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bab8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1babc:	mov	r5, r2
   1bac0:	strd	r6, [sp, #8]
   1bac4:	subs	r6, r0, #0
   1bac8:	mov	r7, r1
   1bacc:	str	lr, [sp, #16]
   1bad0:	sub	sp, sp, #12
   1bad4:	addeq	r6, sp, #4
   1bad8:	mov	r0, r6
   1badc:	bl	11030 <mbrtowc@plt>
   1bae0:	cmp	r5, #0
   1bae4:	cmnne	r0, #3
   1bae8:	mov	r4, r0
   1baec:	bhi	1bb08 <__assert_fail@plt+0xa904>
   1baf0:	mov	r0, r4
   1baf4:	add	sp, sp, #12
   1baf8:	ldrd	r4, [sp]
   1bafc:	ldrd	r6, [sp, #8]
   1bb00:	add	sp, sp, #16
   1bb04:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb08:	mov	r0, #0
   1bb0c:	bl	1bb60 <__assert_fail@plt+0xa95c>
   1bb10:	cmp	r0, #0
   1bb14:	bne	1baf0 <__assert_fail@plt+0xa8ec>
   1bb18:	ldrb	r3, [r7]
   1bb1c:	mov	r4, #1
   1bb20:	str	r3, [r6]
   1bb24:	b	1baf0 <__assert_fail@plt+0xa8ec>
   1bb28:	umull	r2, r3, r1, r2
   1bb2c:	cmp	r3, #0
   1bb30:	bne	1bb3c <__assert_fail@plt+0xa938>
   1bb34:	mov	r1, r2
   1bb38:	b	1b98c <__assert_fail@plt+0xa788>
   1bb3c:	str	r4, [sp, #-8]!
   1bb40:	str	lr, [sp, #4]
   1bb44:	bl	110d8 <__errno_location@plt>
   1bb48:	mov	r3, #12
   1bb4c:	ldr	r4, [sp]
   1bb50:	add	sp, sp, #4
   1bb54:	str	r3, [r0]
   1bb58:	mov	r0, #0
   1bb5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb60:	push	{lr}		; (str lr, [sp, #-4]!)
   1bb64:	sub	sp, sp, #268	; 0x10c
   1bb68:	movw	r2, #257	; 0x101
   1bb6c:	add	r1, sp, #4
   1bb70:	bl	1bbb8 <__assert_fail@plt+0xa9b4>
   1bb74:	cmp	r0, #0
   1bb78:	movne	r0, #0
   1bb7c:	bne	1bbb0 <__assert_fail@plt+0xa9ac>
   1bb80:	movw	r1, #55932	; 0xda7c
   1bb84:	movt	r1, #1
   1bb88:	add	r0, sp, #4
   1bb8c:	bl	10f34 <strcmp@plt>
   1bb90:	cmp	r0, #0
   1bb94:	beq	1bbb0 <__assert_fail@plt+0xa9ac>
   1bb98:	add	r0, sp, #4
   1bb9c:	movw	r1, #55936	; 0xda80
   1bba0:	movt	r1, #1
   1bba4:	bl	10f34 <strcmp@plt>
   1bba8:	adds	r0, r0, #0
   1bbac:	movne	r0, #1
   1bbb0:	add	sp, sp, #268	; 0x10c
   1bbb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbb8:	strd	r4, [sp, #-16]!
   1bbbc:	mov	r5, r1
   1bbc0:	mov	r1, #0
   1bbc4:	mov	r4, r2
   1bbc8:	str	r6, [sp, #8]
   1bbcc:	str	lr, [sp, #12]
   1bbd0:	bl	11174 <setlocale@plt>
   1bbd4:	subs	r6, r0, #0
   1bbd8:	beq	1bc58 <__assert_fail@plt+0xaa54>
   1bbdc:	bl	110c0 <strlen@plt>
   1bbe0:	cmp	r4, r0
   1bbe4:	bhi	1bc04 <__assert_fail@plt+0xaa00>
   1bbe8:	cmp	r4, #0
   1bbec:	moveq	r0, #34	; 0x22
   1bbf0:	bne	1bc28 <__assert_fail@plt+0xaa24>
   1bbf4:	ldrd	r4, [sp]
   1bbf8:	ldr	r6, [sp, #8]
   1bbfc:	add	sp, sp, #12
   1bc00:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc04:	add	r2, r0, #1
   1bc08:	mov	r1, r6
   1bc0c:	mov	r0, r5
   1bc10:	bl	10f70 <memcpy@plt>
   1bc14:	ldrd	r4, [sp]
   1bc18:	mov	r0, #0
   1bc1c:	ldr	r6, [sp, #8]
   1bc20:	add	sp, sp, #12
   1bc24:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc28:	sub	r4, r4, #1
   1bc2c:	mov	r1, r6
   1bc30:	mov	r2, r4
   1bc34:	mov	r0, r5
   1bc38:	bl	10f70 <memcpy@plt>
   1bc3c:	mov	r3, #0
   1bc40:	mov	r0, #34	; 0x22
   1bc44:	strb	r3, [r5, r4]
   1bc48:	ldrd	r4, [sp]
   1bc4c:	ldr	r6, [sp, #8]
   1bc50:	add	sp, sp, #12
   1bc54:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc58:	cmp	r4, #0
   1bc5c:	mov	r0, #22
   1bc60:	strbne	r6, [r5]
   1bc64:	ldrd	r4, [sp]
   1bc68:	ldr	r6, [sp, #8]
   1bc6c:	add	sp, sp, #12
   1bc70:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc74:	mov	r1, #0
   1bc78:	b	11174 <setlocale@plt>
   1bc7c:	cmp	r3, #0
   1bc80:	cmpeq	r2, #0
   1bc84:	bne	1bc9c <__assert_fail@plt+0xaa98>
   1bc88:	cmp	r1, #0
   1bc8c:	cmpeq	r0, #0
   1bc90:	mvnne	r1, #0
   1bc94:	mvnne	r0, #0
   1bc98:	b	1bcb8 <__assert_fail@plt+0xaab4>
   1bc9c:	sub	sp, sp, #8
   1bca0:	push	{sp, lr}
   1bca4:	bl	1bcc8 <__assert_fail@plt+0xaac4>
   1bca8:	ldr	lr, [sp, #4]
   1bcac:	add	sp, sp, #8
   1bcb0:	pop	{r2, r3}
   1bcb4:	bx	lr
   1bcb8:	push	{r1, lr}
   1bcbc:	mov	r0, #8
   1bcc0:	bl	10f28 <raise@plt>
   1bcc4:	pop	{r1, pc}
   1bcc8:	cmp	r1, r3
   1bccc:	cmpeq	r0, r2
   1bcd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcd4:	mov	r4, r0
   1bcd8:	movcc	r0, #0
   1bcdc:	mov	r5, r1
   1bce0:	ldr	lr, [sp, #36]	; 0x24
   1bce4:	movcc	r1, r0
   1bce8:	bcc	1bde4 <__assert_fail@plt+0xabe0>
   1bcec:	cmp	r3, #0
   1bcf0:	clzeq	ip, r2
   1bcf4:	clzne	ip, r3
   1bcf8:	addeq	ip, ip, #32
   1bcfc:	cmp	r5, #0
   1bd00:	clzeq	r1, r4
   1bd04:	addeq	r1, r1, #32
   1bd08:	clzne	r1, r5
   1bd0c:	sub	ip, ip, r1
   1bd10:	sub	sl, ip, #32
   1bd14:	lsl	r9, r3, ip
   1bd18:	rsb	fp, ip, #32
   1bd1c:	orr	r9, r9, r2, lsl sl
   1bd20:	orr	r9, r9, r2, lsr fp
   1bd24:	lsl	r8, r2, ip
   1bd28:	cmp	r5, r9
   1bd2c:	cmpeq	r4, r8
   1bd30:	movcc	r0, #0
   1bd34:	movcc	r1, r0
   1bd38:	bcc	1bd54 <__assert_fail@plt+0xab50>
   1bd3c:	mov	r0, #1
   1bd40:	subs	r4, r4, r8
   1bd44:	lsl	r1, r0, sl
   1bd48:	orr	r1, r1, r0, lsr fp
   1bd4c:	lsl	r0, r0, ip
   1bd50:	sbc	r5, r5, r9
   1bd54:	cmp	ip, #0
   1bd58:	beq	1bde4 <__assert_fail@plt+0xabe0>
   1bd5c:	lsr	r6, r8, #1
   1bd60:	orr	r6, r6, r9, lsl #31
   1bd64:	lsr	r7, r9, #1
   1bd68:	mov	r2, ip
   1bd6c:	b	1bd90 <__assert_fail@plt+0xab8c>
   1bd70:	subs	r3, r4, r6
   1bd74:	sbc	r8, r5, r7
   1bd78:	adds	r3, r3, r3
   1bd7c:	adc	r8, r8, r8
   1bd80:	adds	r4, r3, #1
   1bd84:	adc	r5, r8, #0
   1bd88:	subs	r2, r2, #1
   1bd8c:	beq	1bdac <__assert_fail@plt+0xaba8>
   1bd90:	cmp	r5, r7
   1bd94:	cmpeq	r4, r6
   1bd98:	bcs	1bd70 <__assert_fail@plt+0xab6c>
   1bd9c:	adds	r4, r4, r4
   1bda0:	adc	r5, r5, r5
   1bda4:	subs	r2, r2, #1
   1bda8:	bne	1bd90 <__assert_fail@plt+0xab8c>
   1bdac:	lsr	r3, r4, ip
   1bdb0:	orr	r3, r3, r5, lsl fp
   1bdb4:	lsr	r2, r5, ip
   1bdb8:	orr	r3, r3, r5, lsr sl
   1bdbc:	adds	r0, r0, r4
   1bdc0:	mov	r4, r3
   1bdc4:	lsl	r3, r2, ip
   1bdc8:	orr	r3, r3, r4, lsl sl
   1bdcc:	lsl	ip, r4, ip
   1bdd0:	orr	r3, r3, r4, lsr fp
   1bdd4:	adc	r1, r1, r5
   1bdd8:	subs	r0, r0, ip
   1bddc:	mov	r5, r2
   1bde0:	sbc	r1, r1, r3
   1bde4:	cmp	lr, #0
   1bde8:	strdne	r4, [lr]
   1bdec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bdf0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bdf4:	mov	r7, r0
   1bdf8:	ldr	r6, [pc, #72]	; 1be48 <__assert_fail@plt+0xac44>
   1bdfc:	ldr	r5, [pc, #72]	; 1be4c <__assert_fail@plt+0xac48>
   1be00:	add	r6, pc, r6
   1be04:	add	r5, pc, r5
   1be08:	sub	r6, r6, r5
   1be0c:	mov	r8, r1
   1be10:	mov	r9, r2
   1be14:	bl	10ef0 <calloc@plt-0x20>
   1be18:	asrs	r6, r6, #2
   1be1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1be20:	mov	r4, #0
   1be24:	add	r4, r4, #1
   1be28:	ldr	r3, [r5], #4
   1be2c:	mov	r2, r9
   1be30:	mov	r1, r8
   1be34:	mov	r0, r7
   1be38:	blx	r3
   1be3c:	cmp	r6, r4
   1be40:	bne	1be24 <__assert_fail@plt+0xac20>
   1be44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1be48:	andeq	r2, r1, ip, lsl #2
   1be4c:	andeq	r2, r1, r4, lsl #2
   1be50:	bx	lr
   1be54:	ldr	r3, [pc, #12]	; 1be68 <__assert_fail@plt+0xac64>
   1be58:	mov	r1, #0
   1be5c:	add	r3, pc, r3
   1be60:	ldr	r2, [r3]
   1be64:	b	110f0 <__cxa_atexit@plt>
   1be68:			; <UNDEFINED> instruction: 0x000122b0

Disassembly of section .fini:

0001be6c <.fini>:
   1be6c:	push	{r3, lr}
   1be70:	pop	{r3, pc}
