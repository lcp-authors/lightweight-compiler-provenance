
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010d94 <.init>:
   10d94:	push	{r3, lr}
   10d98:	bl	11048 <__assert_fail@plt+0x48>
   10d9c:	pop	{r3, pc}

Disassembly of section .plt:

00010da0 <calloc@plt-0x14>:
   10da0:	push	{lr}		; (str lr, [sp, #-4]!)
   10da4:	ldr	lr, [pc, #4]	; 10db0 <calloc@plt-0x4>
   10da8:	add	lr, pc, lr
   10dac:	ldr	pc, [lr, #8]!
   10db0:	andeq	r5, r1, r0, asr r2

00010db4 <calloc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #592]!	; 0x250

00010dc0 <fputs_unlocked@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #584]!	; 0x248

00010dcc <strcmp@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #576]!	; 0x240

00010dd8 <posix_fadvise64@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #568]!	; 0x238

00010de4 <fflush@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #560]!	; 0x230

00010df0 <free@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #552]!	; 0x228

00010dfc <_exit@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #544]!	; 0x220

00010e08 <memcpy@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #536]!	; 0x218

00010e14 <mbsinit@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #528]!	; 0x210

00010e20 <memcmp@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #520]!	; 0x208

00010e2c <getc_unlocked@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #512]!	; 0x200

00010e38 <dcgettext@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #504]!	; 0x1f8

00010e44 <dup2@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e50 <realloc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #488]!	; 0x1e8

00010e5c <textdomain@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #480]!	; 0x1e0

00010e68 <iswprint@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #472]!	; 0x1d8

00010e74 <fwrite@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e80 <lseek64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #456]!	; 0x1c8

00010e8c <__ctype_get_mb_cur_max@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #448]!	; 0x1c0

00010e98 <__fpending@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #440]!	; 0x1b8

00010ea4 <ferror_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #432]!	; 0x1b0

00010eb0 <mbrtowc@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #424]!	; 0x1a8

00010ebc <error@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #416]!	; 0x1a0

00010ec8 <open64@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #408]!	; 0x198

00010ed4 <puts@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #400]!	; 0x190

00010ee0 <malloc@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #392]!	; 0x188

00010eec <__libc_start_main@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #384]!	; 0x180

00010ef8 <__freading@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #376]!	; 0x178

00010f04 <__gmon_start__@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #368]!	; 0x170

00010f10 <freopen64@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #360]!	; 0x168

00010f1c <getopt_long@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #352]!	; 0x160

00010f28 <__ctype_b_loc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #344]!	; 0x158

00010f34 <exit@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #336]!	; 0x150

00010f40 <strlen@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #328]!	; 0x148

00010f4c <__errno_location@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #320]!	; 0x140

00010f58 <__cxa_atexit@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #312]!	; 0x138

00010f64 <memset@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #304]!	; 0x130

00010f70 <__printf_chk@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #296]!	; 0x128

00010f7c <fileno@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #288]!	; 0x120

00010f88 <__fprintf_chk@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #280]!	; 0x118

00010f94 <fclose@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #272]!	; 0x110

00010fa0 <fseeko64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #264]!	; 0x108

00010fac <setlocale@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #256]!	; 0x100

00010fb8 <strrchr@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #248]!	; 0xf8

00010fc4 <nl_langinfo@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #240]!	; 0xf0

00010fd0 <bindtextdomain@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #232]!	; 0xe8

00010fdc <strncmp@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #224]!	; 0xe0

00010fe8 <abort@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #216]!	; 0xd8

00010ff4 <close@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #208]!	; 0xd0

00011000 <__assert_fail@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #200]!	; 0xc8

Disassembly of section .text:

0001100c <.text>:
   1100c:	mov	fp, #0
   11010:	mov	lr, #0
   11014:	pop	{r1}		; (ldr r1, [sp], #4)
   11018:	mov	r2, sp
   1101c:	push	{r2}		; (str r2, [sp, #-4]!)
   11020:	push	{r0}		; (str r0, [sp, #-4]!)
   11024:	ldr	ip, [pc, #16]	; 1103c <__assert_fail@plt+0x3c>
   11028:	push	{ip}		; (str ip, [sp, #-4]!)
   1102c:	ldr	r0, [pc, #12]	; 11040 <__assert_fail@plt+0x40>
   11030:	ldr	r3, [pc, #12]	; 11044 <__assert_fail@plt+0x44>
   11034:	bl	10eec <__libc_start_main@plt>
   11038:	bl	10fe8 <abort@plt>
   1103c:	ldrdeq	r5, [r1], -r8
   11040:	andeq	r1, r1, r0, lsr #7
   11044:	andeq	r5, r1, r8, ror r2
   11048:	ldr	r3, [pc, #20]	; 11064 <__assert_fail@plt+0x64>
   1104c:	ldr	r2, [pc, #20]	; 11068 <__assert_fail@plt+0x68>
   11050:	add	r3, pc, r3
   11054:	ldr	r2, [r3, r2]
   11058:	cmp	r2, #0
   1105c:	bxeq	lr
   11060:	b	10f04 <__gmon_start__@plt>
   11064:	andeq	r4, r1, r8, lsr #31
   11068:	ldrdeq	r0, [r0], -r4
   1106c:	ldr	r0, [pc, #24]	; 1108c <__assert_fail@plt+0x8c>
   11070:	ldr	r3, [pc, #24]	; 11090 <__assert_fail@plt+0x90>
   11074:	cmp	r3, r0
   11078:	bxeq	lr
   1107c:	ldr	r3, [pc, #16]	; 11094 <__assert_fail@plt+0x94>
   11080:	cmp	r3, #0
   11084:	bxeq	lr
   11088:	bx	r3
   1108c:	andeq	r6, r2, r8, lsr #2
   11090:	andeq	r6, r2, r8, lsr #2
   11094:	andeq	r0, r0, r0
   11098:	ldr	r0, [pc, #36]	; 110c4 <__assert_fail@plt+0xc4>
   1109c:	ldr	r1, [pc, #36]	; 110c8 <__assert_fail@plt+0xc8>
   110a0:	sub	r1, r1, r0
   110a4:	asr	r1, r1, #2
   110a8:	add	r1, r1, r1, lsr #31
   110ac:	asrs	r1, r1, #1
   110b0:	bxeq	lr
   110b4:	ldr	r3, [pc, #16]	; 110cc <__assert_fail@plt+0xcc>
   110b8:	cmp	r3, #0
   110bc:	bxeq	lr
   110c0:	bx	r3
   110c4:	andeq	r6, r2, r8, lsr #2
   110c8:	andeq	r6, r2, r8, lsr #2
   110cc:	andeq	r0, r0, r0
   110d0:	push	{r4, lr}
   110d4:	ldr	r4, [pc, #24]	; 110f4 <__assert_fail@plt+0xf4>
   110d8:	ldrb	r3, [r4]
   110dc:	cmp	r3, #0
   110e0:	popne	{r4, pc}
   110e4:	bl	1106c <__assert_fail@plt+0x6c>
   110e8:	mov	r3, #1
   110ec:	strb	r3, [r4]
   110f0:	pop	{r4, pc}
   110f4:	andeq	r6, r2, ip, asr #2
   110f8:	b	11098 <__assert_fail@plt+0x98>
   110fc:	push	{fp, lr}
   11100:	mov	fp, sp
   11104:	mov	r4, r0
   11108:	cmp	r0, #0
   1110c:	bne	111a8 <__assert_fail@plt+0x1a8>
   11110:	movw	r1, #21291	; 0x532b
   11114:	movt	r1, #1
   11118:	mov	r0, #0
   1111c:	mov	r2, #5
   11120:	bl	10e38 <dcgettext@plt>
   11124:	mov	r1, r0
   11128:	movw	r0, #24936	; 0x6168
   1112c:	movt	r0, #2
   11130:	ldr	r2, [r0]
   11134:	mov	r0, #1
   11138:	bl	10f70 <__printf_chk@plt>
   1113c:	bl	111ec <__assert_fail@plt+0x1ec>
   11140:	movw	r1, #21934	; 0x55ae
   11144:	movt	r1, #1
   11148:	mov	r0, #0
   1114c:	mov	r2, #5
   11150:	bl	10e38 <dcgettext@plt>
   11154:	movw	r5, #24900	; 0x6144
   11158:	movt	r5, #2
   1115c:	ldr	r1, [r5]
   11160:	bl	10dc0 <fputs_unlocked@plt>
   11164:	movw	r1, #21391	; 0x538f
   11168:	movt	r1, #1
   1116c:	mov	r0, #0
   11170:	mov	r2, #5
   11174:	bl	10e38 <dcgettext@plt>
   11178:	ldr	r1, [r5]
   1117c:	bl	10dc0 <fputs_unlocked@plt>
   11180:	movw	r1, #21436	; 0x53bc
   11184:	movt	r1, #1
   11188:	mov	r0, #0
   1118c:	mov	r2, #5
   11190:	bl	10e38 <dcgettext@plt>
   11194:	ldr	r1, [r5]
   11198:	bl	10dc0 <fputs_unlocked@plt>
   1119c:	bl	1121c <__assert_fail@plt+0x21c>
   111a0:	mov	r0, r4
   111a4:	bl	10f34 <exit@plt>
   111a8:	movw	r0, #24888	; 0x6138
   111ac:	movt	r0, #2
   111b0:	ldr	r5, [r0]
   111b4:	movw	r1, #21252	; 0x5304
   111b8:	movt	r1, #1
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	bl	10e38 <dcgettext@plt>
   111c8:	mov	r2, r0
   111cc:	movw	r0, #24936	; 0x6168
   111d0:	movt	r0, #2
   111d4:	ldr	r3, [r0]
   111d8:	mov	r0, r5
   111dc:	mov	r1, #1
   111e0:	bl	10f88 <__fprintf_chk@plt>
   111e4:	mov	r0, r4
   111e8:	bl	10f34 <exit@plt>
   111ec:	push	{fp, lr}
   111f0:	mov	fp, sp
   111f4:	movw	r1, #21565	; 0x543d
   111f8:	movt	r1, #1
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	bl	10e38 <dcgettext@plt>
   11208:	movw	r1, #24900	; 0x6144
   1120c:	movt	r1, #2
   11210:	ldr	r1, [r1]
   11214:	pop	{fp, lr}
   11218:	b	10dc0 <fputs_unlocked@plt>
   1121c:	push	{r4, r5, fp, lr}
   11220:	add	fp, sp, #8
   11224:	sub	sp, sp, #56	; 0x38
   11228:	movw	r0, #22232	; 0x56d8
   1122c:	movt	r0, #1
   11230:	add	r1, r0, #32
   11234:	mov	r5, sp
   11238:	mov	r2, #48	; 0x30
   1123c:	vld1.64	{d16-d17}, [r1]
   11240:	add	r1, r5, #32
   11244:	add	r3, r0, #16
   11248:	vld1.64	{d18-d19}, [r0], r2
   1124c:	vld1.64	{d20-d21}, [r3]
   11250:	vldr	d22, [r0]
   11254:	vst1.64	{d16-d17}, [r1]
   11258:	add	r0, r5, #16
   1125c:	vst1.64	{d20-d21}, [r0]
   11260:	mov	r0, r5
   11264:	vst1.64	{d18-d19}, [r0], r2
   11268:	vstr	d22, [r0]
   1126c:	ldr	r1, [sp]
   11270:	cmp	r1, #0
   11274:	beq	1129c <__assert_fail@plt+0x29c>
   11278:	mov	r5, sp
   1127c:	movw	r4, #21490	; 0x53f2
   11280:	movt	r4, #1
   11284:	mov	r0, r4
   11288:	bl	10dcc <strcmp@plt>
   1128c:	cmp	r0, #0
   11290:	ldrne	r1, [r5, #8]!
   11294:	cmpne	r1, #0
   11298:	bne	11284 <__assert_fail@plt+0x284>
   1129c:	ldr	r4, [r5, #4]
   112a0:	movw	r1, #21716	; 0x54d4
   112a4:	movt	r1, #1
   112a8:	mov	r0, #0
   112ac:	mov	r2, #5
   112b0:	bl	10e38 <dcgettext@plt>
   112b4:	mov	r1, r0
   112b8:	movw	r2, #21520	; 0x5410
   112bc:	movt	r2, #1
   112c0:	movw	r3, #21739	; 0x54eb
   112c4:	movt	r3, #1
   112c8:	mov	r0, #1
   112cc:	bl	10f70 <__printf_chk@plt>
   112d0:	movw	r5, #21490	; 0x53f2
   112d4:	movt	r5, #1
   112d8:	cmp	r4, #0
   112dc:	moveq	r4, r5
   112e0:	mov	r0, #5
   112e4:	mov	r1, #0
   112e8:	bl	10fac <setlocale@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	11330 <__assert_fail@plt+0x330>
   112f4:	movw	r1, #21779	; 0x5513
   112f8:	movt	r1, #1
   112fc:	mov	r2, #3
   11300:	bl	10fdc <strncmp@plt>
   11304:	cmp	r0, #0
   11308:	beq	11330 <__assert_fail@plt+0x330>
   1130c:	movw	r1, #21783	; 0x5517
   11310:	movt	r1, #1
   11314:	mov	r0, #0
   11318:	mov	r2, #5
   1131c:	bl	10e38 <dcgettext@plt>
   11320:	movw	r1, #24900	; 0x6144
   11324:	movt	r1, #2
   11328:	ldr	r1, [r1]
   1132c:	bl	10dc0 <fputs_unlocked@plt>
   11330:	movw	r1, #21854	; 0x555e
   11334:	movt	r1, #1
   11338:	mov	r0, #0
   1133c:	mov	r2, #5
   11340:	bl	10e38 <dcgettext@plt>
   11344:	mov	r1, r0
   11348:	movw	r2, #21739	; 0x54eb
   1134c:	movt	r2, #1
   11350:	mov	r0, #1
   11354:	mov	r3, r5
   11358:	bl	10f70 <__printf_chk@plt>
   1135c:	movw	r1, #21881	; 0x5579
   11360:	movt	r1, #1
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	bl	10e38 <dcgettext@plt>
   11370:	mov	r1, r0
   11374:	movw	r0, #21649	; 0x5491
   11378:	movt	r0, #1
   1137c:	movw	r3, #21935	; 0x55af
   11380:	movt	r3, #1
   11384:	cmp	r4, r5
   11388:	moveq	r3, r0
   1138c:	mov	r0, #1
   11390:	mov	r2, r4
   11394:	bl	10f70 <__printf_chk@plt>
   11398:	sub	sp, fp, #8
   1139c:	pop	{r4, r5, fp, pc}
   113a0:	push	{fp, lr}
   113a4:	mov	fp, sp
   113a8:	sub	sp, sp, #24
   113ac:	mov	r4, r1
   113b0:	mov	r5, r0
   113b4:	ldr	r0, [r1]
   113b8:	bl	123e8 <__assert_fail@plt+0x13e8>
   113bc:	movw	r1, #21935	; 0x55af
   113c0:	movt	r1, #1
   113c4:	mov	r0, #6
   113c8:	bl	10fac <setlocale@plt>
   113cc:	movw	r6, #21524	; 0x5414
   113d0:	movt	r6, #1
   113d4:	movw	r1, #21496	; 0x53f8
   113d8:	movt	r1, #1
   113dc:	mov	r0, r6
   113e0:	bl	10fd0 <bindtextdomain@plt>
   113e4:	mov	r0, r6
   113e8:	bl	10e5c <textdomain@plt>
   113ec:	movw	r0, #7624	; 0x1dc8
   113f0:	movt	r0, #1
   113f4:	bl	152dc <__assert_fail@plt+0x42dc>
   113f8:	movw	r0, #24800	; 0x60e0
   113fc:	movt	r0, #2
   11400:	ldr	r0, [r0]
   11404:	mov	r1, #0
   11408:	movw	r2, #21534	; 0x541e
   1140c:	movt	r2, #1
   11410:	movw	r3, #4348	; 0x10fc
   11414:	movt	r3, #1
   11418:	mov	r6, #1
   1141c:	stm	sp, {r0, r6}
   11420:	str	r3, [sp, #8]
   11424:	str	r2, [sp, #12]
   11428:	str	r1, [sp, #16]
   1142c:	movw	r2, #21490	; 0x53f2
   11430:	movt	r2, #1
   11434:	movw	r3, #21520	; 0x5410
   11438:	movt	r3, #1
   1143c:	mov	r0, r5
   11440:	mov	r1, r4
   11444:	bl	12320 <__assert_fail@plt+0x1320>
   11448:	movw	r6, #24880	; 0x6130
   1144c:	movt	r6, #2
   11450:	ldr	r0, [r6]
   11454:	sub	r1, r5, r0
   11458:	cmp	r1, #2
   1145c:	blt	114a4 <__assert_fail@plt+0x4a4>
   11460:	movw	r1, #21548	; 0x542c
   11464:	movt	r1, #1
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	bl	10e38 <dcgettext@plt>
   11474:	mov	r5, r0
   11478:	ldr	r0, [r6]
   1147c:	add	r0, r4, r0, lsl #2
   11480:	ldr	r0, [r0, #4]
   11484:	bl	13c20 <__assert_fail@plt+0x2c20>
   11488:	mov	r3, r0
   1148c:	mov	r0, #0
   11490:	mov	r1, #0
   11494:	mov	r2, r5
   11498:	bl	10ebc <error@plt>
   1149c:	mov	r0, #1
   114a0:	bl	110fc <__assert_fail@plt+0xfc>
   114a4:	cmp	r0, r5
   114a8:	bne	114b8 <__assert_fail@plt+0x4b8>
   114ac:	movw	r0, #22462	; 0x57be
   114b0:	movt	r0, #1
   114b4:	bl	114c0 <__assert_fail@plt+0x4c0>
   114b8:	ldr	r0, [r4, r0, lsl #2]
   114bc:	bl	114c0 <__assert_fail@plt+0x4c0>
   114c0:	push	{fp, lr}
   114c4:	mov	fp, sp
   114c8:	sub	sp, sp, #24
   114cc:	mov	r9, r0
   114d0:	movw	r1, #22462	; 0x57be
   114d4:	movt	r1, #1
   114d8:	bl	10dcc <strcmp@plt>
   114dc:	mov	r8, r0
   114e0:	mov	r7, #0
   114e4:	mov	r0, #0
   114e8:	bl	117f8 <__assert_fail@plt+0x7f8>
   114ec:	mov	r6, r0
   114f0:	cmp	r8, #0
   114f4:	beq	1151c <__assert_fail@plt+0x51c>
   114f8:	movw	r0, #24896	; 0x6140
   114fc:	movt	r0, #2
   11500:	ldr	r2, [r0]
   11504:	movw	r1, #22313	; 0x5729
   11508:	movt	r1, #1
   1150c:	mov	r0, r9
   11510:	bl	11ff8 <__assert_fail@plt+0xff8>
   11514:	cmp	r0, #0
   11518:	beq	11760 <__assert_fail@plt+0x760>
   1151c:	movw	r0, #24896	; 0x6140
   11520:	movt	r0, #2
   11524:	ldr	r0, [r0]
   11528:	mov	r1, #2
   1152c:	bl	11eb4 <__assert_fail@plt+0xeb4>
   11530:	sub	r5, fp, #8
   11534:	mov	r0, r5
   11538:	bl	14034 <__assert_fail@plt+0x3034>
   1153c:	movw	sl, #21932	; 0x55ac
   11540:	movt	sl, #1
   11544:	b	11558 <__assert_fail@plt+0x558>
   11548:	mov	r0, r4
   1154c:	mov	r1, r7
   11550:	bl	11b30 <__assert_fail@plt+0xb30>
   11554:	mov	r7, #0
   11558:	mov	r4, r7
   1155c:	movw	r0, #24896	; 0x6140
   11560:	movt	r0, #2
   11564:	ldr	r0, [r0]
   11568:	mov	r1, sl
   1156c:	mov	r2, #3
   11570:	mov	r3, r5
   11574:	bl	14044 <__assert_fail@plt+0x3044>
   11578:	cmn	r0, #1
   1157c:	beq	115a4 <__assert_fail@plt+0x5a4>
   11580:	cmp	r0, #0
   11584:	beq	11790 <__assert_fail@plt+0x790>
   11588:	ldr	r1, [fp, #-4]
   1158c:	mov	r0, r6
   11590:	bl	1182c <__assert_fail@plt+0x82c>
   11594:	mov	r7, r0
   11598:	cmp	r4, #0
   1159c:	beq	11558 <__assert_fail@plt+0x558>
   115a0:	b	11548 <__assert_fail@plt+0x548>
   115a4:	str	r8, [sp, #4]
   115a8:	cmp	r4, #0
   115ac:	bne	117b0 <__assert_fail@plt+0x7b0>
   115b0:	movw	r1, #7068	; 0x1b9c
   115b4:	movt	r1, #1
   115b8:	mov	r0, r6
   115bc:	bl	11b7c <__assert_fail@plt+0xb7c>
   115c0:	movw	r8, #24912	; 0x6150
   115c4:	movt	r8, #2
   115c8:	ldr	r0, [r8]
   115cc:	cmp	r0, #0
   115d0:	beq	117ec <__assert_fail@plt+0x7ec>
   115d4:	movw	sl, #24916	; 0x6154
   115d8:	movt	sl, #2
   115dc:	movw	r4, #7176	; 0x1c08
   115e0:	movt	r4, #1
   115e4:	movw	r5, #24924	; 0x615c
   115e8:	movt	r5, #2
   115ec:	movw	r7, #24920	; 0x6158
   115f0:	movt	r7, #2
   115f4:	mov	r0, #1
   115f8:	str	r0, [sp, #12]
   115fc:	str	r9, [sp, #8]
   11600:	mov	r0, r6
   11604:	movw	r1, #7096	; 0x1bb8
   11608:	movt	r1, #1
   1160c:	bl	11b7c <__assert_fail@plt+0xb7c>
   11610:	ldr	r1, [sl]
   11614:	cmp	r1, #0
   11618:	bne	11630 <__assert_fail@plt+0x630>
   1161c:	b	11694 <__assert_fail@plt+0x694>
   11620:	ldr	r1, [r0, #20]
   11624:	str	r1, [sl]
   11628:	cmp	r1, #0
   1162c:	beq	11694 <__assert_fail@plt+0x694>
   11630:	ldr	r0, [r1]
   11634:	ldr	r9, [r1, #24]
   11638:	bl	10ed4 <puts@plt>
   1163c:	ldr	r0, [sl]
   11640:	mov	r1, #1
   11644:	strb	r1, [r0, #13]
   11648:	ldr	r1, [r8]
   1164c:	sub	r1, r1, #1
   11650:	str	r1, [r8]
   11654:	cmp	r9, #0
   11658:	bne	1166c <__assert_fail@plt+0x66c>
   1165c:	b	11620 <__assert_fail@plt+0x620>
   11660:	ldr	r9, [r9, #4]
   11664:	cmp	r9, #0
   11668:	beq	11620 <__assert_fail@plt+0x620>
   1166c:	ldr	r1, [r9]
   11670:	ldr	r2, [r1, #16]
   11674:	subs	r2, r2, #1
   11678:	str	r2, [r1, #16]
   1167c:	bne	11660 <__assert_fail@plt+0x660>
   11680:	ldr	r2, [r7]
   11684:	str	r1, [r2, #20]
   11688:	ldr	r1, [r9]
   1168c:	str	r1, [r7]
   11690:	b	11660 <__assert_fail@plt+0x660>
   11694:	ldr	r0, [r8]
   11698:	cmp	r0, #0
   1169c:	ldr	r9, [sp, #8]
   116a0:	beq	1170c <__assert_fail@plt+0x70c>
   116a4:	mov	r0, #0
   116a8:	movw	r1, #22025	; 0x5609
   116ac:	movt	r1, #1
   116b0:	mov	r2, #5
   116b4:	bl	10e38 <dcgettext@plt>
   116b8:	str	r0, [sp, #12]
   116bc:	mov	r0, #0
   116c0:	mov	r1, #3
   116c4:	mov	r2, r9
   116c8:	bl	13ae0 <__assert_fail@plt+0x2ae0>
   116cc:	mov	r3, r0
   116d0:	mov	r0, #0
   116d4:	mov	r1, #0
   116d8:	ldr	r2, [sp, #12]
   116dc:	bl	10ebc <error@plt>
   116e0:	mov	r0, r6
   116e4:	mov	r1, r4
   116e8:	bl	11b7c <__assert_fail@plt+0xb7c>
   116ec:	ldr	r0, [r5]
   116f0:	cmp	r0, #0
   116f4:	bne	116e0 <__assert_fail@plt+0x6e0>
   116f8:	ldr	r0, [r8]
   116fc:	mov	r1, #0
   11700:	str	r1, [sp, #12]
   11704:	cmp	r0, #0
   11708:	bne	11600 <__assert_fail@plt+0x600>
   1170c:	movw	r0, #24896	; 0x6140
   11710:	movt	r0, #2
   11714:	ldr	r0, [r0]
   11718:	bl	11ef0 <__assert_fail@plt+0xef0>
   1171c:	cmp	r0, #0
   11720:	bne	11734 <__assert_fail@plt+0x734>
   11724:	mov	r0, #1
   11728:	ldr	r1, [sp, #12]
   1172c:	bic	r0, r0, r1
   11730:	bl	10f34 <exit@plt>
   11734:	bl	10f4c <__errno_location@plt>
   11738:	ldr	r4, [r0]
   1173c:	ldr	r0, [sp, #4]
   11740:	cmp	r0, #0
   11744:	bne	11768 <__assert_fail@plt+0x768>
   11748:	movw	r1, #22052	; 0x5624
   1174c:	movt	r1, #1
   11750:	mov	r0, #0
   11754:	mov	r2, #5
   11758:	bl	10e38 <dcgettext@plt>
   1175c:	b	11778 <__assert_fail@plt+0x778>
   11760:	bl	10f4c <__errno_location@plt>
   11764:	ldr	r4, [r0]
   11768:	mov	r0, #0
   1176c:	mov	r1, #3
   11770:	mov	r2, r9
   11774:	bl	13ae0 <__assert_fail@plt+0x2ae0>
   11778:	mov	r3, r0
   1177c:	movw	r2, #22319	; 0x572f
   11780:	movt	r2, #1
   11784:	mov	r0, #1
   11788:	mov	r1, r4
   1178c:	bl	10ebc <error@plt>
   11790:	movw	r0, #21936	; 0x55b0
   11794:	movt	r0, #1
   11798:	movw	r1, #21945	; 0x55b9
   1179c:	movt	r1, #1
   117a0:	movw	r3, #21957	; 0x55c5
   117a4:	movt	r3, #1
   117a8:	movw	r2, #458	; 0x1ca
   117ac:	bl	11000 <__assert_fail@plt>
   117b0:	movw	r1, #21982	; 0x55de
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	mov	r2, #5
   117c0:	bl	10e38 <dcgettext@plt>
   117c4:	mov	r4, r0
   117c8:	mov	r0, #0
   117cc:	mov	r1, #3
   117d0:	mov	r2, r9
   117d4:	bl	13ae0 <__assert_fail@plt+0x2ae0>
   117d8:	mov	r3, r0
   117dc:	mov	r0, #1
   117e0:	mov	r1, #0
   117e4:	mov	r2, r4
   117e8:	bl	10ebc <error@plt>
   117ec:	mov	r0, #1
   117f0:	str	r0, [sp, #12]
   117f4:	b	1170c <__assert_fail@plt+0x70c>
   117f8:	push	{r4, r5, fp, lr}
   117fc:	add	fp, sp, #8
   11800:	mov	r5, r0
   11804:	mov	r0, #28
   11808:	bl	14a64 <__assert_fail@plt+0x3a64>
   1180c:	mov	r4, r0
   11810:	cmp	r5, #0
   11814:	beq	11824 <__assert_fail@plt+0x824>
   11818:	mov	r0, r5
   1181c:	bl	14b38 <__assert_fail@plt+0x3b38>
   11820:	str	r0, [r4]
   11824:	mov	r0, r4
   11828:	pop	{r4, r5, fp, pc}
   1182c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11830:	add	fp, sp, #28
   11834:	sub	sp, sp, #12
   11838:	cmp	r0, #0
   1183c:	beq	11b10 <__assert_fail@plt+0xb10>
   11840:	mov	r6, r1
   11844:	mov	r4, r0
   11848:	ldr	r7, [r0, #8]
   1184c:	cmp	r7, #0
   11850:	beq	11884 <__assert_fail@plt+0x884>
   11854:	cmp	r6, #0
   11858:	ldrne	r1, [r7]
   1185c:	cmpne	r1, #0
   11860:	bne	11898 <__assert_fail@plt+0x898>
   11864:	movw	r0, #22126	; 0x566e
   11868:	movt	r0, #1
   1186c:	movw	r1, #21945	; 0x55b9
   11870:	movt	r1, #1
   11874:	movw	r3, #22072	; 0x5638
   11878:	movt	r3, #1
   1187c:	mov	r2, #140	; 0x8c
   11880:	bl	11000 <__assert_fail@plt>
   11884:	mov	r0, r6
   11888:	bl	117f8 <__assert_fail@plt+0x7f8>
   1188c:	mov	r5, r0
   11890:	str	r0, [r4, #8]
   11894:	b	118e8 <__assert_fail@plt+0x8e8>
   11898:	mov	r9, r7
   1189c:	mov	r0, r6
   118a0:	bl	10dcc <strcmp@plt>
   118a4:	cmp	r0, #0
   118a8:	beq	118e4 <__assert_fail@plt+0x8e4>
   118ac:	mov	r1, #8
   118b0:	movwlt	r1, #4
   118b4:	ldr	r2, [r7, r1]
   118b8:	cmp	r2, #0
   118bc:	beq	118f4 <__assert_fail@plt+0x8f4>
   118c0:	ldrb	r0, [r2, #12]
   118c4:	cmp	r0, #0
   118c8:	movne	r4, r7
   118cc:	movne	r9, r2
   118d0:	ldr	r1, [r2]
   118d4:	cmp	r1, #0
   118d8:	mov	r7, r2
   118dc:	bne	1189c <__assert_fail@plt+0x89c>
   118e0:	b	11864 <__assert_fail@plt+0x864>
   118e4:	mov	r5, r7
   118e8:	mov	r0, r5
   118ec:	sub	sp, fp, #28
   118f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118f4:	mov	r8, #8
   118f8:	cmp	r0, #0
   118fc:	movwlt	r8, #4
   11900:	mov	r0, r6
   11904:	bl	117f8 <__assert_fail@plt+0x7f8>
   11908:	str	r0, [r7, r8]
   1190c:	cmp	r9, #0
   11910:	ldrne	r1, [r9]
   11914:	cmpne	r1, #0
   11918:	bne	1193c <__assert_fail@plt+0x93c>
   1191c:	movw	r0, #22145	; 0x5681
   11920:	movt	r0, #1
   11924:	movw	r1, #21945	; 0x55b9
   11928:	movt	r1, #1
   1192c:	movw	r3, #22072	; 0x5638
   11930:	movt	r3, #1
   11934:	mov	r2, #163	; 0xa3
   11938:	bl	11000 <__assert_fail@plt>
   1193c:	mov	r5, r0
   11940:	mov	r0, r6
   11944:	bl	10dcc <strcmp@plt>
   11948:	cmp	r0, #0
   1194c:	beq	1191c <__assert_fail@plt+0x91c>
   11950:	mov	r7, #1
   11954:	mov	r1, #1
   11958:	mvnlt	r1, #0
   1195c:	str	r1, [sp, #8]
   11960:	mov	r1, #8
   11964:	str	r0, [sp]
   11968:	cmp	r0, #0
   1196c:	movwlt	r1, #4
   11970:	ldr	r0, [r9, r1]
   11974:	str	r0, [sp, #4]
   11978:	cmp	r0, r5
   1197c:	beq	119d0 <__assert_fail@plt+0x9d0>
   11980:	mov	r8, #255	; 0xff
   11984:	ldr	sl, [sp, #4]
   11988:	cmp	sl, #0
   1198c:	ldrne	r1, [sl]
   11990:	cmpne	r1, #0
   11994:	beq	119f8 <__assert_fail@plt+0x9f8>
   11998:	mov	r0, r6
   1199c:	bl	10dcc <strcmp@plt>
   119a0:	cmp	r0, #0
   119a4:	beq	119f8 <__assert_fail@plt+0x9f8>
   119a8:	cmn	r0, #1
   119ac:	bgt	119bc <__assert_fail@plt+0x9bc>
   119b0:	strb	r8, [sl, #12]
   119b4:	add	r0, sl, #4
   119b8:	b	119c4 <__assert_fail@plt+0x9c4>
   119bc:	strb	r7, [sl, #12]
   119c0:	add	r0, sl, #8
   119c4:	ldr	sl, [r0]
   119c8:	cmp	sl, r5
   119cc:	bne	11988 <__assert_fail@plt+0x988>
   119d0:	mov	r0, r9
   119d4:	ldrsb	r2, [r0, #12]!
   119d8:	uxtb	r1, r2
   119dc:	cmp	r1, #0
   119e0:	ldr	r3, [sp, #8]
   119e4:	cmnne	r2, r3
   119e8:	bne	11a18 <__assert_fail@plt+0xa18>
   119ec:	add	r1, r1, r3
   119f0:	strb	r1, [r0]
   119f4:	b	118e8 <__assert_fail@plt+0x8e8>
   119f8:	movw	r0, #22188	; 0x56ac
   119fc:	movt	r0, #1
   11a00:	movw	r1, #21945	; 0x55b9
   11a04:	movt	r1, #1
   11a08:	movw	r3, #22072	; 0x5638
   11a0c:	movt	r3, #1
   11a10:	mov	r2, #177	; 0xb1
   11a14:	bl	11000 <__assert_fail@plt>
   11a18:	ldr	r7, [sp, #4]
   11a1c:	mov	r1, r7
   11a20:	ldrsb	r2, [r1, #12]!
   11a24:	cmp	r3, r2
   11a28:	bne	11a6c <__assert_fail@plt+0xa6c>
   11a2c:	add	r1, r9, #8
   11a30:	ldr	r3, [sp]
   11a34:	cmp	r3, #0
   11a38:	addlt	r1, r9, #4
   11a3c:	add	r2, r7, #4
   11a40:	addlt	r2, r7, #8
   11a44:	ldr	r2, [r2]
   11a48:	str	r2, [r1]
   11a4c:	mov	r1, #4
   11a50:	cmp	r3, #0
   11a54:	movwlt	r1, #8
   11a58:	str	r9, [r7, r1]
   11a5c:	mov	r1, #0
   11a60:	strb	r1, [r7, #12]
   11a64:	mov	r2, r0
   11a68:	b	11af4 <__assert_fail@plt+0xaf4>
   11a6c:	ldr	r2, [sp]
   11a70:	cmn	r2, #1
   11a74:	bgt	11a94 <__assert_fail@plt+0xa94>
   11a78:	ldr	r6, [r7, #8]
   11a7c:	ldr	r2, [r6, #4]
   11a80:	str	r2, [r7, #8]
   11a84:	str	r7, [r6, #4]
   11a88:	add	lr, r9, #4
   11a8c:	add	r2, r6, #8
   11a90:	b	11aac <__assert_fail@plt+0xaac>
   11a94:	ldr	r6, [r7, #4]
   11a98:	ldr	r2, [r6, #8]
   11a9c:	str	r2, [r7, #4]
   11aa0:	str	r7, [r6, #8]
   11aa4:	add	lr, r9, #8
   11aa8:	add	r2, r6, #4
   11aac:	mov	r7, r6
   11ab0:	rsb	ip, r3, #0
   11ab4:	ldr	r6, [r2]
   11ab8:	str	r6, [lr]
   11abc:	str	r9, [r2]
   11ac0:	mov	r2, #0
   11ac4:	strb	r2, [r9, #12]
   11ac8:	strb	r2, [r1]
   11acc:	mov	r2, r7
   11ad0:	ldrsb	r6, [r2, #12]!
   11ad4:	cmp	r3, r6
   11ad8:	bne	11aec <__assert_fail@plt+0xaec>
   11adc:	mov	r3, ip
   11ae0:	mov	r1, r0
   11ae4:	strb	r3, [r1]
   11ae8:	b	11af4 <__assert_fail@plt+0xaf4>
   11aec:	cmp	r6, ip
   11af0:	strbeq	r3, [r1]
   11af4:	mov	r0, #0
   11af8:	strb	r0, [r2]
   11afc:	ldr	r0, [r4, #8]
   11b00:	cmp	r9, r0
   11b04:	strne	r7, [r4, #4]
   11b08:	streq	r7, [r4, #8]
   11b0c:	b	118e8 <__assert_fail@plt+0x8e8>
   11b10:	movw	r0, #22067	; 0x5633
   11b14:	movt	r0, #1
   11b18:	movw	r1, #21945	; 0x55b9
   11b1c:	movt	r1, #1
   11b20:	movw	r3, #22072	; 0x5638
   11b24:	movt	r3, #1
   11b28:	mov	r2, #126	; 0x7e
   11b2c:	bl	11000 <__assert_fail@plt>
   11b30:	push	{r4, r5, fp, lr}
   11b34:	add	fp, sp, #8
   11b38:	mov	r5, r1
   11b3c:	mov	r4, r0
   11b40:	ldr	r1, [r1]
   11b44:	ldr	r0, [r0]
   11b48:	bl	10dcc <strcmp@plt>
   11b4c:	cmp	r0, #0
   11b50:	popeq	{r4, r5, fp, pc}
   11b54:	ldr	r0, [r5, #16]
   11b58:	add	r0, r0, #1
   11b5c:	str	r0, [r5, #16]
   11b60:	mov	r0, #8
   11b64:	bl	147a8 <__assert_fail@plt+0x37a8>
   11b68:	ldr	r1, [r4, #24]
   11b6c:	str	r5, [r0]
   11b70:	str	r1, [r0, #4]
   11b74:	str	r0, [r4, #24]
   11b78:	pop	{r4, r5, fp, pc}
   11b7c:	ldr	r0, [r0, #8]
   11b80:	cmp	r0, #0
   11b84:	bxeq	lr
   11b88:	push	{fp, lr}
   11b8c:	mov	fp, sp
   11b90:	bl	11d14 <__assert_fail@plt+0xd14>
   11b94:	pop	{fp, lr}
   11b98:	bx	lr
   11b9c:	movw	r0, #24912	; 0x6150
   11ba0:	movt	r0, #2
   11ba4:	ldr	r1, [r0]
   11ba8:	add	r1, r1, #1
   11bac:	str	r1, [r0]
   11bb0:	mov	r0, #0
   11bb4:	bx	lr
   11bb8:	ldr	r1, [r0, #16]
   11bbc:	cmp	r1, #0
   11bc0:	bne	11bd0 <__assert_fail@plt+0xbd0>
   11bc4:	ldrb	r1, [r0, #13]
   11bc8:	cmp	r1, #0
   11bcc:	beq	11bd8 <__assert_fail@plt+0xbd8>
   11bd0:	mov	r0, #0
   11bd4:	bx	lr
   11bd8:	movw	r1, #24916	; 0x6154
   11bdc:	movt	r1, #2
   11be0:	ldr	r2, [r1]
   11be4:	movw	ip, #24920	; 0x6158
   11be8:	movt	ip, #2
   11bec:	ldr	r3, [ip]
   11bf0:	cmp	r2, #0
   11bf4:	addne	r1, r3, #20
   11bf8:	str	r0, [r1]
   11bfc:	str	r0, [ip]
   11c00:	mov	r0, #0
   11c04:	bx	lr
   11c08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c0c:	add	fp, sp, #24
   11c10:	mov	r4, r0
   11c14:	ldr	r1, [r0, #16]
   11c18:	mov	r0, #0
   11c1c:	cmp	r1, #0
   11c20:	beq	11c48 <__assert_fail@plt+0xc48>
   11c24:	movw	r6, #24924	; 0x615c
   11c28:	movt	r6, #2
   11c2c:	ldr	r1, [r6]
   11c30:	cmp	r1, #0
   11c34:	beq	11cc0 <__assert_fail@plt+0xcc0>
   11c38:	mov	r7, r4
   11c3c:	ldr	r2, [r7, #24]!
   11c40:	cmp	r2, #0
   11c44:	bne	11c5c <__assert_fail@plt+0xc5c>
   11c48:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c4c:	mov	r7, r2
   11c50:	ldr	r2, [r7, #4]!
   11c54:	cmp	r2, #0
   11c58:	beq	11c48 <__assert_fail@plt+0xc48>
   11c5c:	ldr	r3, [r2]
   11c60:	cmp	r3, r1
   11c64:	bne	11c4c <__assert_fail@plt+0xc4c>
   11c68:	ldr	r2, [r4, #20]
   11c6c:	cmp	r2, #0
   11c70:	beq	11cbc <__assert_fail@plt+0xcbc>
   11c74:	mov	r9, #0
   11c78:	movw	r8, #22319	; 0x572f
   11c7c:	movt	r8, #1
   11c80:	ldr	r0, [r6]
   11c84:	ldr	r3, [r0]
   11c88:	ldr	r5, [r0, #20]
   11c8c:	mov	r0, #0
   11c90:	mov	r1, #0
   11c94:	mov	r2, r8
   11c98:	bl	10ebc <error@plt>
   11c9c:	ldr	r0, [r6]
   11ca0:	cmp	r0, r4
   11ca4:	beq	11cc8 <__assert_fail@plt+0xcc8>
   11ca8:	str	r9, [r0, #20]
   11cac:	str	r5, [r6]
   11cb0:	cmp	r5, #0
   11cb4:	bne	11c80 <__assert_fail@plt+0xc80>
   11cb8:	b	11ce8 <__assert_fail@plt+0xce8>
   11cbc:	str	r1, [r4, #20]
   11cc0:	str	r4, [r6]
   11cc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11cc8:	ldr	r0, [r7]
   11ccc:	ldr	r1, [r0]
   11cd0:	ldr	r2, [r1, #16]
   11cd4:	sub	r2, r2, #1
   11cd8:	str	r2, [r1, #16]
   11cdc:	ldr	r0, [r0, #4]
   11ce0:	str	r0, [r7]
   11ce4:	ldr	r5, [r6]
   11ce8:	mov	r0, #1
   11cec:	cmp	r5, #0
   11cf0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11cf4:	mov	r1, #0
   11cf8:	ldr	r2, [r5, #20]
   11cfc:	str	r1, [r5, #20]
   11d00:	cmp	r2, #0
   11d04:	mov	r5, r2
   11d08:	bne	11cf8 <__assert_fail@plt+0xcf8>
   11d0c:	str	r2, [r6]
   11d10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11d14:	push	{r4, r5, r6, sl, fp, lr}
   11d18:	add	fp, sp, #16
   11d1c:	mov	r4, r0
   11d20:	ldr	r0, [r0, #4]
   11d24:	cmp	r0, #0
   11d28:	beq	11d48 <__assert_fail@plt+0xd48>
   11d2c:	mov	r5, r1
   11d30:	bl	11d14 <__assert_fail@plt+0xd14>
   11d34:	mov	r1, r5
   11d38:	mov	r5, #1
   11d3c:	cmp	r0, #0
   11d40:	beq	11d54 <__assert_fail@plt+0xd54>
   11d44:	b	11d88 <__assert_fail@plt+0xd88>
   11d48:	ldr	r0, [r4, #8]
   11d4c:	cmp	r0, #0
   11d50:	beq	11d90 <__assert_fail@plt+0xd90>
   11d54:	mov	r0, r4
   11d58:	mov	r6, r1
   11d5c:	blx	r1
   11d60:	mov	r5, #1
   11d64:	cmp	r0, #0
   11d68:	bne	11d88 <__assert_fail@plt+0xd88>
   11d6c:	ldr	r0, [r4, #8]
   11d70:	cmp	r0, #0
   11d74:	beq	11d9c <__assert_fail@plt+0xd9c>
   11d78:	mov	r1, r6
   11d7c:	bl	11d14 <__assert_fail@plt+0xd14>
   11d80:	cmp	r0, #0
   11d84:	moveq	r5, #0
   11d88:	mov	r0, r5
   11d8c:	pop	{r4, r5, r6, sl, fp, pc}
   11d90:	mov	r0, r4
   11d94:	pop	{r4, r5, r6, sl, fp, lr}
   11d98:	bx	r1
   11d9c:	mov	r5, #0
   11da0:	mov	r0, r5
   11da4:	pop	{r4, r5, r6, sl, fp, pc}
   11da8:	movw	r1, #24928	; 0x6160
   11dac:	movt	r1, #2
   11db0:	str	r0, [r1]
   11db4:	bx	lr
   11db8:	movw	r1, #24932	; 0x6164
   11dbc:	movt	r1, #2
   11dc0:	strb	r0, [r1]
   11dc4:	bx	lr
   11dc8:	push	{r4, r5, r6, sl, fp, lr}
   11dcc:	add	fp, sp, #16
   11dd0:	sub	sp, sp, #8
   11dd4:	movw	r0, #24900	; 0x6144
   11dd8:	movt	r0, #2
   11ddc:	ldr	r0, [r0]
   11de0:	bl	14f98 <__assert_fail@plt+0x3f98>
   11de4:	cmp	r0, #0
   11de8:	beq	11e10 <__assert_fail@plt+0xe10>
   11dec:	movw	r0, #24932	; 0x6164
   11df0:	movt	r0, #2
   11df4:	ldrb	r0, [r0]
   11df8:	cmp	r0, #0
   11dfc:	beq	11e30 <__assert_fail@plt+0xe30>
   11e00:	bl	10f4c <__errno_location@plt>
   11e04:	ldr	r0, [r0]
   11e08:	cmp	r0, #32
   11e0c:	bne	11e30 <__assert_fail@plt+0xe30>
   11e10:	movw	r0, #24888	; 0x6138
   11e14:	movt	r0, #2
   11e18:	ldr	r0, [r0]
   11e1c:	bl	14f98 <__assert_fail@plt+0x3f98>
   11e20:	cmp	r0, #0
   11e24:	subeq	sp, fp, #16
   11e28:	popeq	{r4, r5, r6, sl, fp, pc}
   11e2c:	b	11ea0 <__assert_fail@plt+0xea0>
   11e30:	movw	r1, #22303	; 0x571f
   11e34:	movt	r1, #1
   11e38:	mov	r0, #0
   11e3c:	mov	r2, #5
   11e40:	bl	10e38 <dcgettext@plt>
   11e44:	mov	r4, r0
   11e48:	movw	r0, #24928	; 0x6160
   11e4c:	movt	r0, #2
   11e50:	ldr	r6, [r0]
   11e54:	bl	10f4c <__errno_location@plt>
   11e58:	ldr	r5, [r0]
   11e5c:	cmp	r6, #0
   11e60:	bne	11e7c <__assert_fail@plt+0xe7c>
   11e64:	movw	r2, #22319	; 0x572f
   11e68:	movt	r2, #1
   11e6c:	mov	r0, #0
   11e70:	mov	r1, r5
   11e74:	mov	r3, r4
   11e78:	b	11e9c <__assert_fail@plt+0xe9c>
   11e7c:	mov	r0, r6
   11e80:	bl	13ad0 <__assert_fail@plt+0x2ad0>
   11e84:	mov	r3, r0
   11e88:	str	r4, [sp]
   11e8c:	movw	r2, #22315	; 0x572b
   11e90:	movt	r2, #1
   11e94:	mov	r0, #0
   11e98:	mov	r1, r5
   11e9c:	bl	10ebc <error@plt>
   11ea0:	movw	r0, #24804	; 0x60e4
   11ea4:	movt	r0, #2
   11ea8:	ldr	r0, [r0]
   11eac:	bl	10dfc <_exit@plt>
   11eb0:	b	10dd8 <posix_fadvise64@plt>
   11eb4:	cmp	r0, #0
   11eb8:	bxeq	lr
   11ebc:	push	{r4, sl, fp, lr}
   11ec0:	add	fp, sp, #8
   11ec4:	sub	sp, sp, #16
   11ec8:	mov	r4, r1
   11ecc:	bl	10f7c <fileno@plt>
   11ed0:	mov	r1, #0
   11ed4:	str	r1, [sp]
   11ed8:	stmib	sp, {r1, r4}
   11edc:	mov	r2, #0
   11ee0:	mov	r3, #0
   11ee4:	bl	11eb0 <__assert_fail@plt+0xeb0>
   11ee8:	sub	sp, fp, #8
   11eec:	pop	{r4, sl, fp, pc}
   11ef0:	push	{r4, r5, fp, lr}
   11ef4:	add	fp, sp, #8
   11ef8:	sub	sp, sp, #8
   11efc:	mov	r4, r0
   11f00:	bl	10f7c <fileno@plt>
   11f04:	cmn	r0, #1
   11f08:	ble	11f80 <__assert_fail@plt+0xf80>
   11f0c:	mov	r0, r4
   11f10:	bl	10ef8 <__freading@plt>
   11f14:	cmp	r0, #0
   11f18:	beq	11f44 <__assert_fail@plt+0xf44>
   11f1c:	mov	r0, r4
   11f20:	bl	10f7c <fileno@plt>
   11f24:	mov	r1, #1
   11f28:	str	r1, [sp]
   11f2c:	mov	r2, #0
   11f30:	mov	r3, #0
   11f34:	bl	10e80 <lseek64@plt>
   11f38:	and	r0, r0, r1
   11f3c:	cmn	r0, #1
   11f40:	beq	11f80 <__assert_fail@plt+0xf80>
   11f44:	mov	r0, r4
   11f48:	bl	11f90 <__assert_fail@plt+0xf90>
   11f4c:	cmp	r0, #0
   11f50:	beq	11f80 <__assert_fail@plt+0xf80>
   11f54:	bl	10f4c <__errno_location@plt>
   11f58:	ldr	r5, [r0]
   11f5c:	mov	r0, r4
   11f60:	bl	10f94 <fclose@plt>
   11f64:	cmp	r5, #0
   11f68:	beq	11f78 <__assert_fail@plt+0xf78>
   11f6c:	bl	10f4c <__errno_location@plt>
   11f70:	str	r5, [r0]
   11f74:	mvn	r0, #0
   11f78:	sub	sp, fp, #8
   11f7c:	pop	{r4, r5, fp, pc}
   11f80:	mov	r0, r4
   11f84:	sub	sp, fp, #8
   11f88:	pop	{r4, r5, fp, lr}
   11f8c:	b	10f94 <fclose@plt>
   11f90:	push	{r4, sl, fp, lr}
   11f94:	add	fp, sp, #8
   11f98:	mov	r4, r0
   11f9c:	cmp	r0, #0
   11fa0:	beq	11fb8 <__assert_fail@plt+0xfb8>
   11fa4:	mov	r0, r4
   11fa8:	bl	10ef8 <__freading@plt>
   11fac:	cmp	r0, #0
   11fb0:	movne	r0, r4
   11fb4:	blne	11fc4 <__assert_fail@plt+0xfc4>
   11fb8:	mov	r0, r4
   11fbc:	pop	{r4, sl, fp, lr}
   11fc0:	b	10de4 <fflush@plt>
   11fc4:	ldrb	r1, [r0, #1]
   11fc8:	tst	r1, #1
   11fcc:	bxeq	lr
   11fd0:	push	{fp, lr}
   11fd4:	mov	fp, sp
   11fd8:	sub	sp, sp, #8
   11fdc:	mov	r1, #1
   11fe0:	str	r1, [sp]
   11fe4:	mov	r2, #0
   11fe8:	mov	r3, #0
   11fec:	bl	121d0 <__assert_fail@plt+0x11d0>
   11ff0:	mov	sp, fp
   11ff4:	pop	{fp, pc}
   11ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ffc:	add	fp, sp, #28
   12000:	sub	sp, sp, #4
   12004:	mov	r4, r2
   12008:	mov	r8, r1
   1200c:	mov	r5, r0
   12010:	mov	r0, r2
   12014:	bl	10f7c <fileno@plt>
   12018:	mov	r6, #0
   1201c:	cmp	r0, #0
   12020:	beq	12060 <__assert_fail@plt+0x1060>
   12024:	cmp	r0, #1
   12028:	beq	1206c <__assert_fail@plt+0x106c>
   1202c:	cmp	r0, #2
   12030:	beq	12048 <__assert_fail@plt+0x1048>
   12034:	mov	r0, #2
   12038:	mov	r1, #2
   1203c:	bl	10e44 <dup2@plt>
   12040:	subs	r6, r0, #2
   12044:	movwne	r6, #1
   12048:	mov	r0, #1
   1204c:	mov	r1, #1
   12050:	bl	10e44 <dup2@plt>
   12054:	subs	r7, r0, #1
   12058:	movwne	r7, #1
   1205c:	b	12070 <__assert_fail@plt+0x1070>
   12060:	mov	r7, #0
   12064:	mov	r9, #0
   12068:	b	12120 <__assert_fail@plt+0x1120>
   1206c:	mov	r7, #0
   12070:	mov	sl, #0
   12074:	mov	r0, #0
   12078:	mov	r1, #0
   1207c:	bl	10e44 <dup2@plt>
   12080:	cmp	r0, #0
   12084:	mov	r9, #0
   12088:	beq	120a0 <__assert_fail@plt+0x10a0>
   1208c:	mov	r0, #0
   12090:	bl	12184 <__assert_fail@plt+0x1184>
   12094:	mov	r9, #1
   12098:	cmp	r0, #0
   1209c:	beq	120fc <__assert_fail@plt+0x10fc>
   120a0:	cmp	r7, #0
   120a4:	beq	120bc <__assert_fail@plt+0x10bc>
   120a8:	mov	sl, #1
   120ac:	mov	r0, #1
   120b0:	bl	12184 <__assert_fail@plt+0x1184>
   120b4:	cmp	r0, #0
   120b8:	beq	120fc <__assert_fail@plt+0x10fc>
   120bc:	cmp	r6, #0
   120c0:	beq	12118 <__assert_fail@plt+0x1118>
   120c4:	mov	r0, #2
   120c8:	bl	12184 <__assert_fail@plt+0x1184>
   120cc:	mov	r6, #1
   120d0:	cmp	r0, #0
   120d4:	bne	1211c <__assert_fail@plt+0x111c>
   120d8:	bl	10f4c <__errno_location@plt>
   120dc:	mov	r4, r0
   120e0:	ldr	r8, [r0]
   120e4:	mov	r0, #2
   120e8:	bl	10ff4 <close@plt>
   120ec:	mov	r5, #0
   120f0:	cmp	sl, #0
   120f4:	bne	12158 <__assert_fail@plt+0x1158>
   120f8:	b	12160 <__assert_fail@plt+0x1160>
   120fc:	bl	10f4c <__errno_location@plt>
   12100:	mov	r4, r0
   12104:	ldr	r8, [r0]
   12108:	mov	r5, #0
   1210c:	cmp	r6, #0
   12110:	bne	12148 <__assert_fail@plt+0x1148>
   12114:	b	12150 <__assert_fail@plt+0x1150>
   12118:	mov	r6, #0
   1211c:	mov	r7, sl
   12120:	mov	r0, r5
   12124:	mov	r1, r8
   12128:	mov	r2, r4
   1212c:	bl	10f10 <freopen64@plt>
   12130:	mov	r5, r0
   12134:	bl	10f4c <__errno_location@plt>
   12138:	mov	r4, r0
   1213c:	ldr	r8, [r0]
   12140:	cmp	r6, #0
   12144:	beq	12150 <__assert_fail@plt+0x1150>
   12148:	mov	r0, #2
   1214c:	bl	10ff4 <close@plt>
   12150:	cmp	r7, #0
   12154:	beq	12160 <__assert_fail@plt+0x1160>
   12158:	mov	r0, #1
   1215c:	bl	10ff4 <close@plt>
   12160:	cmp	r9, #0
   12164:	beq	12170 <__assert_fail@plt+0x1170>
   12168:	mov	r0, #0
   1216c:	bl	10ff4 <close@plt>
   12170:	cmp	r5, #0
   12174:	streq	r8, [r4]
   12178:	mov	r0, r5
   1217c:	sub	sp, fp, #28
   12180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12184:	push	{r4, sl, fp, lr}
   12188:	add	fp, sp, #8
   1218c:	mov	r4, r0
   12190:	movw	r0, #22322	; 0x5732
   12194:	movt	r0, #1
   12198:	mov	r1, #0
   1219c:	bl	10ec8 <open64@plt>
   121a0:	mov	r1, #1
   121a4:	cmp	r0, r4
   121a8:	beq	121c8 <__assert_fail@plt+0x11c8>
   121ac:	cmp	r0, #0
   121b0:	blt	121c4 <__assert_fail@plt+0x11c4>
   121b4:	bl	10ff4 <close@plt>
   121b8:	bl	10f4c <__errno_location@plt>
   121bc:	mov	r1, #9
   121c0:	str	r1, [r0]
   121c4:	mov	r1, #0
   121c8:	mov	r0, r1
   121cc:	pop	{r4, sl, fp, pc}
   121d0:	push	{r4, r5, r6, r7, fp, lr}
   121d4:	add	fp, sp, #16
   121d8:	sub	sp, sp, #8
   121dc:	mov	r5, r3
   121e0:	mov	r6, r2
   121e4:	mov	r4, r0
   121e8:	ldr	r0, [r0, #4]
   121ec:	ldr	r1, [r4, #8]
   121f0:	cmp	r1, r0
   121f4:	bne	12210 <__assert_fail@plt+0x1210>
   121f8:	ldrd	r0, [r4, #16]
   121fc:	cmp	r1, r0
   12200:	bne	12210 <__assert_fail@plt+0x1210>
   12204:	ldr	r0, [r4, #36]	; 0x24
   12208:	cmp	r0, #0
   1220c:	beq	12228 <__assert_fail@plt+0x1228>
   12210:	mov	r0, r4
   12214:	mov	r2, r6
   12218:	mov	r3, r5
   1221c:	sub	sp, fp, #16
   12220:	pop	{r4, r5, r6, r7, fp, lr}
   12224:	b	10fa0 <fseeko64@plt>
   12228:	ldr	r7, [fp, #8]
   1222c:	mov	r0, r4
   12230:	bl	10f7c <fileno@plt>
   12234:	str	r7, [sp]
   12238:	mov	r2, r6
   1223c:	mov	r3, r5
   12240:	bl	10e80 <lseek64@plt>
   12244:	and	r2, r0, r1
   12248:	cmn	r2, #1
   1224c:	mvneq	r0, #0
   12250:	subeq	sp, fp, #16
   12254:	popeq	{r4, r5, r6, r7, fp, pc}
   12258:	strd	r0, [r4, #80]	; 0x50
   1225c:	ldr	r0, [r4]
   12260:	bic	r0, r0, #16
   12264:	str	r0, [r4]
   12268:	mov	r0, #0
   1226c:	sub	sp, fp, #16
   12270:	pop	{r4, r5, r6, r7, fp, pc}
   12274:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12278:	add	fp, sp, #24
   1227c:	sub	sp, sp, #8
   12280:	movw	r6, #24904	; 0x6148
   12284:	movt	r6, #2
   12288:	ldr	r7, [r6]
   1228c:	mov	r4, #0
   12290:	str	r4, [r6]
   12294:	cmp	r0, #2
   12298:	bne	12308 <__assert_fail@plt+0x1308>
   1229c:	mov	r8, r3
   122a0:	mov	r5, r2
   122a4:	str	r4, [sp]
   122a8:	movw	r2, #22332	; 0x573c
   122ac:	movt	r2, #1
   122b0:	movw	r3, #22348	; 0x574c
   122b4:	movt	r3, #1
   122b8:	bl	10f1c <getopt_long@plt>
   122bc:	cmp	r0, #104	; 0x68
   122c0:	beq	122fc <__assert_fail@plt+0x12fc>
   122c4:	cmp	r0, #118	; 0x76
   122c8:	bne	12308 <__assert_fail@plt+0x1308>
   122cc:	ldr	r3, [fp, #8]
   122d0:	add	r1, fp, #16
   122d4:	str	r1, [sp, #4]
   122d8:	movw	r0, #24900	; 0x6144
   122dc:	movt	r0, #2
   122e0:	ldr	r0, [r0]
   122e4:	str	r1, [sp]
   122e8:	mov	r1, r5
   122ec:	mov	r2, r8
   122f0:	bl	14654 <__assert_fail@plt+0x3654>
   122f4:	mov	r0, #0
   122f8:	bl	10f34 <exit@plt>
   122fc:	ldr	r1, [fp, #12]
   12300:	mov	r0, #0
   12304:	blx	r1
   12308:	movw	r0, #24880	; 0x6130
   1230c:	movt	r0, #2
   12310:	str	r4, [r0]
   12314:	str	r7, [r6]
   12318:	sub	sp, fp, #24
   1231c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12320:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12324:	add	fp, sp, #24
   12328:	sub	sp, sp, #8
   1232c:	mov	r8, r3
   12330:	mov	r5, r2
   12334:	movw	r6, #24904	; 0x6148
   12338:	movt	r6, #2
   1233c:	ldr	r7, [r6]
   12340:	mov	r2, #1
   12344:	str	r2, [r6]
   12348:	mov	r2, #0
   1234c:	str	r2, [sp]
   12350:	ldr	r3, [fp, #12]
   12354:	movw	r4, #21935	; 0x55af
   12358:	movt	r4, #1
   1235c:	movw	r2, #22332	; 0x573c
   12360:	movt	r2, #1
   12364:	cmp	r3, #0
   12368:	movne	r2, r4
   1236c:	movw	r3, #22348	; 0x574c
   12370:	movt	r3, #1
   12374:	bl	10f1c <getopt_long@plt>
   12378:	cmn	r0, #1
   1237c:	beq	123ac <__assert_fail@plt+0x13ac>
   12380:	ldr	r1, [fp, #16]
   12384:	cmp	r0, #104	; 0x68
   12388:	beq	123a4 <__assert_fail@plt+0x13a4>
   1238c:	cmp	r0, #118	; 0x76
   12390:	beq	123b8 <__assert_fail@plt+0x13b8>
   12394:	movw	r0, #24804	; 0x60e4
   12398:	movt	r0, #2
   1239c:	ldr	r0, [r0]
   123a0:	b	123a8 <__assert_fail@plt+0x13a8>
   123a4:	mov	r0, #0
   123a8:	blx	r1
   123ac:	str	r7, [r6]
   123b0:	sub	sp, fp, #24
   123b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123b8:	ldr	r3, [fp, #8]
   123bc:	add	r1, fp, #20
   123c0:	str	r1, [sp, #4]
   123c4:	movw	r0, #24900	; 0x6144
   123c8:	movt	r0, #2
   123cc:	ldr	r0, [r0]
   123d0:	str	r1, [sp]
   123d4:	mov	r1, r5
   123d8:	mov	r2, r8
   123dc:	bl	14654 <__assert_fail@plt+0x3654>
   123e0:	mov	r0, #0
   123e4:	bl	10f34 <exit@plt>
   123e8:	push	{r4, r5, fp, lr}
   123ec:	add	fp, sp, #8
   123f0:	cmp	r0, #0
   123f4:	beq	12488 <__assert_fail@plt+0x1488>
   123f8:	mov	r4, r0
   123fc:	mov	r1, #47	; 0x2f
   12400:	bl	10fb8 <strrchr@plt>
   12404:	cmp	r0, #0
   12408:	mov	r5, r4
   1240c:	addne	r5, r0, #1
   12410:	sub	r0, r5, r4
   12414:	cmp	r0, #7
   12418:	blt	1246c <__assert_fail@plt+0x146c>
   1241c:	sub	r0, r5, #7
   12420:	movw	r1, #22452	; 0x57b4
   12424:	movt	r1, #1
   12428:	mov	r2, #7
   1242c:	bl	10fdc <strncmp@plt>
   12430:	cmp	r0, #0
   12434:	bne	1246c <__assert_fail@plt+0x146c>
   12438:	movw	r1, #22460	; 0x57bc
   1243c:	movt	r1, #1
   12440:	mov	r0, r5
   12444:	mov	r2, #3
   12448:	bl	10fdc <strncmp@plt>
   1244c:	cmp	r0, #0
   12450:	beq	1245c <__assert_fail@plt+0x145c>
   12454:	mov	r4, r5
   12458:	b	1246c <__assert_fail@plt+0x146c>
   1245c:	add	r4, r5, #3
   12460:	movw	r0, #24872	; 0x6128
   12464:	movt	r0, #2
   12468:	str	r4, [r0]
   1246c:	movw	r0, #24876	; 0x612c
   12470:	movt	r0, #2
   12474:	str	r4, [r0]
   12478:	movw	r0, #24936	; 0x6168
   1247c:	movt	r0, #2
   12480:	str	r4, [r0]
   12484:	pop	{r4, r5, fp, pc}
   12488:	movw	r0, #24888	; 0x6138
   1248c:	movt	r0, #2
   12490:	ldr	r3, [r0]
   12494:	movw	r0, #22396	; 0x577c
   12498:	movt	r0, #1
   1249c:	mov	r1, #55	; 0x37
   124a0:	mov	r2, #1
   124a4:	bl	10e74 <fwrite@plt>
   124a8:	bl	10fe8 <abort@plt>
   124ac:	push	{r4, r5, r6, sl, fp, lr}
   124b0:	add	fp, sp, #16
   124b4:	mov	r4, r0
   124b8:	movw	r0, #24944	; 0x6170
   124bc:	movt	r0, #2
   124c0:	cmp	r4, #0
   124c4:	moveq	r4, r0
   124c8:	bl	10f4c <__errno_location@plt>
   124cc:	mov	r5, r0
   124d0:	ldr	r6, [r0]
   124d4:	mov	r0, r4
   124d8:	mov	r1, #48	; 0x30
   124dc:	bl	14a9c <__assert_fail@plt+0x3a9c>
   124e0:	str	r6, [r5]
   124e4:	pop	{r4, r5, r6, sl, fp, pc}
   124e8:	movw	r1, #24944	; 0x6170
   124ec:	movt	r1, #2
   124f0:	cmp	r0, #0
   124f4:	movne	r1, r0
   124f8:	ldr	r0, [r1]
   124fc:	bx	lr
   12500:	movw	r2, #24944	; 0x6170
   12504:	movt	r2, #2
   12508:	cmp	r0, #0
   1250c:	movne	r2, r0
   12510:	str	r1, [r2]
   12514:	bx	lr
   12518:	movw	r3, #24944	; 0x6170
   1251c:	movt	r3, #2
   12520:	cmp	r0, #0
   12524:	movne	r3, r0
   12528:	ubfx	r0, r1, #5, #3
   1252c:	add	r0, r3, r0, lsl #2
   12530:	ldr	r3, [r0, #8]
   12534:	and	r1, r1, #31
   12538:	eor	r2, r2, r3, lsr r1
   1253c:	and	r2, r2, #1
   12540:	eor	r2, r3, r2, lsl r1
   12544:	str	r2, [r0, #8]
   12548:	mov	r0, #1
   1254c:	and	r0, r0, r3, lsr r1
   12550:	bx	lr
   12554:	movw	r2, #24944	; 0x6170
   12558:	movt	r2, #2
   1255c:	cmp	r0, #0
   12560:	movne	r2, r0
   12564:	ldr	r0, [r2, #4]
   12568:	str	r1, [r2, #4]
   1256c:	bx	lr
   12570:	movw	r3, #24944	; 0x6170
   12574:	movt	r3, #2
   12578:	cmp	r0, #0
   1257c:	movne	r3, r0
   12580:	mov	r0, #10
   12584:	str	r0, [r3]
   12588:	cmp	r1, #0
   1258c:	cmpne	r2, #0
   12590:	bne	125a0 <__assert_fail@plt+0x15a0>
   12594:	push	{fp, lr}
   12598:	mov	fp, sp
   1259c:	bl	10fe8 <abort@plt>
   125a0:	str	r1, [r3, #40]	; 0x28
   125a4:	str	r2, [r3, #44]	; 0x2c
   125a8:	bx	lr
   125ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125b0:	add	fp, sp, #28
   125b4:	sub	sp, sp, #20
   125b8:	mov	r8, r3
   125bc:	mov	r9, r2
   125c0:	mov	sl, r1
   125c4:	mov	r7, r0
   125c8:	ldr	r0, [fp, #8]
   125cc:	movw	r5, #24944	; 0x6170
   125d0:	movt	r5, #2
   125d4:	cmp	r0, #0
   125d8:	movne	r5, r0
   125dc:	bl	10f4c <__errno_location@plt>
   125e0:	mov	r4, r0
   125e4:	ldm	r5, {r0, r1}
   125e8:	ldr	r2, [r5, #40]	; 0x28
   125ec:	ldr	r3, [r5, #44]	; 0x2c
   125f0:	ldr	r6, [r4]
   125f4:	add	r5, r5, #8
   125f8:	stm	sp, {r0, r1, r5}
   125fc:	str	r2, [sp, #12]
   12600:	str	r3, [sp, #16]
   12604:	mov	r0, r7
   12608:	mov	r1, sl
   1260c:	mov	r2, r9
   12610:	mov	r3, r8
   12614:	bl	12624 <__assert_fail@plt+0x1624>
   12618:	str	r6, [r4]
   1261c:	sub	sp, fp, #28
   12620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12628:	add	fp, sp, #28
   1262c:	sub	sp, sp, #156	; 0x9c
   12630:	mov	r9, r3
   12634:	str	r2, [fp, #-84]	; 0xffffffac
   12638:	mov	r6, r1
   1263c:	mov	r7, r0
   12640:	ldr	r0, [fp, #12]
   12644:	and	r1, r0, #4
   12648:	str	r1, [sp, #32]
   1264c:	and	r1, r0, #1
   12650:	str	r1, [sp, #36]	; 0x24
   12654:	ubfx	sl, r0, #1, #1
   12658:	bl	10e8c <__ctype_get_mb_cur_max@plt>
   1265c:	str	r0, [sp, #40]	; 0x28
   12660:	ldr	r0, [fp, #24]
   12664:	str	r0, [sp, #76]	; 0x4c
   12668:	ldr	r0, [fp, #20]
   1266c:	str	r0, [sp, #68]	; 0x44
   12670:	ldr	r0, [fp, #8]
   12674:	str	r0, [fp, #-60]	; 0xffffffc4
   12678:	mov	r0, #0
   1267c:	str	r0, [sp, #72]	; 0x48
   12680:	mov	r0, #0
   12684:	str	r0, [sp, #92]	; 0x5c
   12688:	mov	r0, #0
   1268c:	str	r0, [fp, #-72]	; 0xffffffb8
   12690:	mov	r0, #0
   12694:	mov	r1, #0
   12698:	str	r1, [fp, #-56]	; 0xffffffc8
   1269c:	mov	r1, #0
   126a0:	str	r1, [sp, #56]	; 0x38
   126a4:	mov	r5, #1
   126a8:	str	r7, [sp, #80]	; 0x50
   126ac:	mov	r4, r6
   126b0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   126b4:	cmp	r6, #10
   126b8:	bhi	13620 <__assert_fail@plt+0x2620>
   126bc:	add	r1, pc, #20
   126c0:	mov	r8, #0
   126c4:	mov	r2, #1
   126c8:	mov	r3, #0
   126cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   126d0:	mov	lr, r9
   126d4:	ldr	pc, [r1, r6, lsl #2]
   126d8:			; <UNDEFINED> instruction: 0x000127b0
   126dc:	andeq	r2, r1, r0, ror #15
   126e0:	andeq	r2, r1, r0, lsr #15
   126e4:	muleq	r1, r8, r7
   126e8:	ldrdeq	r2, [r1], -r4
   126ec:	andeq	r2, r1, r4, lsr r8
   126f0:	andeq	r2, r1, r0, asr #15
   126f4:	muleq	r1, r0, r8
   126f8:	andeq	r2, r1, r4, lsl #14
   126fc:	andeq	r2, r1, r4, lsl #14
   12700:	andeq	r2, r1, ip, lsr #14
   12704:	movw	r0, #22542	; 0x580e
   12708:	movt	r0, #1
   1270c:	mov	r1, r6
   12710:	bl	13c2c <__assert_fail@plt+0x2c2c>
   12714:	str	r0, [sp, #68]	; 0x44
   12718:	movw	r0, #22544	; 0x5810
   1271c:	movt	r0, #1
   12720:	mov	r1, r6
   12724:	bl	13c2c <__assert_fail@plt+0x2c2c>
   12728:	str	r0, [sp, #76]	; 0x4c
   1272c:	mov	r8, #0
   12730:	tst	sl, #1
   12734:	bne	1276c <__assert_fail@plt+0x176c>
   12738:	ldr	r0, [sp, #68]	; 0x44
   1273c:	ldrb	r0, [r0]
   12740:	cmp	r0, #0
   12744:	beq	1276c <__assert_fail@plt+0x176c>
   12748:	ldr	r1, [sp, #68]	; 0x44
   1274c:	add	r1, r1, #1
   12750:	mov	r8, #0
   12754:	cmp	r8, r4
   12758:	strbcc	r0, [r7, r8]
   1275c:	ldrb	r0, [r1, r8]
   12760:	add	r8, r8, #1
   12764:	cmp	r0, #0
   12768:	bne	12754 <__assert_fail@plt+0x1754>
   1276c:	ldr	r6, [sp, #76]	; 0x4c
   12770:	mov	r0, r6
   12774:	bl	10f40 <strlen@plt>
   12778:	str	r0, [fp, #-72]	; 0xffffffb8
   1277c:	str	r6, [sp, #92]	; 0x5c
   12780:	mov	r2, #1
   12784:	mov	r3, sl
   12788:	ldr	ip, [fp, #-84]	; 0xffffffac
   1278c:	mov	lr, r9
   12790:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12794:	b	12890 <__assert_fail@plt+0x1890>
   12798:	mov	r0, #1
   1279c:	b	127e0 <__assert_fail@plt+0x17e0>
   127a0:	tst	sl, #1
   127a4:	bne	127e0 <__assert_fail@plt+0x17e0>
   127a8:	mov	r2, r0
   127ac:	b	12808 <__assert_fail@plt+0x1808>
   127b0:	mov	r6, #0
   127b4:	mov	r8, #0
   127b8:	mov	r2, r0
   127bc:	b	1288c <__assert_fail@plt+0x188c>
   127c0:	mov	r0, #1
   127c4:	str	r0, [fp, #-72]	; 0xffffffb8
   127c8:	mov	r8, #0
   127cc:	mov	r6, #5
   127d0:	b	1284c <__assert_fail@plt+0x184c>
   127d4:	mov	r2, #1
   127d8:	tst	sl, #1
   127dc:	beq	12808 <__assert_fail@plt+0x1808>
   127e0:	mov	r1, #1
   127e4:	str	r1, [fp, #-72]	; 0xffffffb8
   127e8:	mov	r8, #0
   127ec:	mov	r6, #2
   127f0:	movw	r1, #22544	; 0x5810
   127f4:	movt	r1, #1
   127f8:	str	r1, [sp, #92]	; 0x5c
   127fc:	mov	r2, r0
   12800:	mov	r3, #1
   12804:	b	12890 <__assert_fail@plt+0x1890>
   12808:	mov	r8, #1
   1280c:	mov	r6, #2
   12810:	cmp	r4, #0
   12814:	movne	r0, #39	; 0x27
   12818:	strbne	r0, [r7]
   1281c:	movw	r0, #22544	; 0x5810
   12820:	movt	r0, #1
   12824:	str	r0, [sp, #92]	; 0x5c
   12828:	mov	r0, #1
   1282c:	str	r0, [fp, #-72]	; 0xffffffb8
   12830:	b	1288c <__assert_fail@plt+0x188c>
   12834:	mov	r6, #5
   12838:	tst	sl, #1
   1283c:	beq	12864 <__assert_fail@plt+0x1864>
   12840:	mov	r0, #1
   12844:	str	r0, [fp, #-72]	; 0xffffffb8
   12848:	mov	r8, #0
   1284c:	movw	r0, #22540	; 0x580c
   12850:	movt	r0, #1
   12854:	str	r0, [sp, #92]	; 0x5c
   12858:	mov	r2, #1
   1285c:	mov	r3, #1
   12860:	b	12890 <__assert_fail@plt+0x1890>
   12864:	cmp	r4, #0
   12868:	movne	r0, #34	; 0x22
   1286c:	strbne	r0, [r7]
   12870:	mov	r8, #1
   12874:	movw	r0, #22540	; 0x580c
   12878:	movt	r0, #1
   1287c:	str	r0, [sp, #92]	; 0x5c
   12880:	mov	r0, #1
   12884:	str	r0, [fp, #-72]	; 0xffffffb8
   12888:	mov	r2, #1
   1288c:	mov	r3, #0
   12890:	ldr	r0, [fp, #16]
   12894:	cmp	r0, #0
   12898:	movwne	r0, #1
   1289c:	and	r0, r0, r3
   128a0:	str	r0, [fp, #-88]	; 0xffffffa8
   128a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128a8:	cmp	r0, #0
   128ac:	movwne	r0, #1
   128b0:	and	r1, r0, r3
   128b4:	and	r1, r2, r1
   128b8:	str	r1, [sp, #48]	; 0x30
   128bc:	str	r6, [fp, #-60]	; 0xffffffc4
   128c0:	subs	r6, r6, #2
   128c4:	clz	r1, r6
   128c8:	lsr	r1, r1, #5
   128cc:	and	r1, r1, r3
   128d0:	str	r1, [sp, #60]	; 0x3c
   128d4:	str	r6, [fp, #-80]	; 0xffffffb0
   128d8:	mov	r1, r6
   128dc:	movwne	r1, #1
   128e0:	str	r3, [fp, #-76]	; 0xffffffb4
   128e4:	eor	r3, r3, #1
   128e8:	str	r3, [sp, #88]	; 0x58
   128ec:	orr	r3, r1, r3
   128f0:	str	r3, [sp, #64]	; 0x40
   128f4:	and	r1, r1, r2
   128f8:	str	r1, [fp, #-68]	; 0xffffffbc
   128fc:	and	r0, r0, r1
   12900:	str	r0, [fp, #-64]	; 0xffffffc0
   12904:	str	r2, [sp, #84]	; 0x54
   12908:	eor	r0, r2, #1
   1290c:	str	r0, [sp, #52]	; 0x34
   12910:	mov	r6, #0
   12914:	cmn	lr, #1
   12918:	beq	12928 <__assert_fail@plt+0x1928>
   1291c:	cmp	r6, lr
   12920:	bne	12934 <__assert_fail@plt+0x1934>
   12924:	b	134a0 <__assert_fail@plt+0x24a0>
   12928:	ldrb	r0, [ip, r6]
   1292c:	cmp	r0, #0
   12930:	beq	134a0 <__assert_fail@plt+0x24a0>
   12934:	str	r5, [fp, #-48]	; 0xffffffd0
   12938:	mov	sl, #0
   1293c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12940:	cmp	r0, #0
   12944:	beq	12978 <__assert_fail@plt+0x1978>
   12948:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1294c:	add	r5, r6, r0
   12950:	cmp	r0, #2
   12954:	bcc	12970 <__assert_fail@plt+0x1970>
   12958:	cmn	lr, #1
   1295c:	bne	12970 <__assert_fail@plt+0x1970>
   12960:	mov	r0, ip
   12964:	bl	10f40 <strlen@plt>
   12968:	ldr	ip, [fp, #-84]	; 0xffffffac
   1296c:	mov	lr, r0
   12970:	cmp	r5, lr
   12974:	bls	12984 <__assert_fail@plt+0x1984>
   12978:	mov	r0, #0
   1297c:	str	r0, [fp, #-52]	; 0xffffffcc
   12980:	b	129d0 <__assert_fail@plt+0x19d0>
   12984:	mov	r5, r4
   12988:	mov	r4, lr
   1298c:	add	r0, ip, r6
   12990:	ldr	r1, [sp, #92]	; 0x5c
   12994:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12998:	bl	10e20 <memcmp@plt>
   1299c:	cmp	r0, #0
   129a0:	mov	r1, r0
   129a4:	movwne	r1, #1
   129a8:	ldr	r2, [sp, #88]	; 0x58
   129ac:	orr	r1, r1, r2
   129b0:	tst	r1, #1
   129b4:	beq	13564 <__assert_fail@plt+0x2564>
   129b8:	clz	r0, r0
   129bc:	lsr	r0, r0, #5
   129c0:	str	r0, [fp, #-52]	; 0xffffffcc
   129c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   129c8:	mov	lr, r4
   129cc:	mov	r4, r5
   129d0:	ldrb	r5, [ip, r6]
   129d4:	cmp	r5, #126	; 0x7e
   129d8:	bhi	12d94 <__assert_fail@plt+0x1d94>
   129dc:	mov	r9, #1
   129e0:	mov	r2, #110	; 0x6e
   129e4:	mov	r0, #97	; 0x61
   129e8:	add	r3, pc, #4
   129ec:	mov	r1, #0
   129f0:	ldr	pc, [r3, r5, lsl #2]
   129f4:	andeq	r2, r1, ip, lsl #25
   129f8:	muleq	r1, r4, sp
   129fc:	muleq	r1, r4, sp
   12a00:	muleq	r1, r4, sp
   12a04:	muleq	r1, r4, sp
   12a08:	muleq	r1, r4, sp
   12a0c:	muleq	r1, r4, sp
   12a10:	andeq	r2, r1, r8, asr lr
   12a14:	andeq	r2, r1, ip, ror #24
   12a18:	andeq	r2, r1, r4, ror #24
   12a1c:	andeq	r2, r1, r8, ror ip
   12a20:	strdeq	r2, [r1], -ip
   12a24:	andeq	r2, r1, ip, asr ip
   12a28:	andeq	r2, r1, r4, ror ip
   12a2c:	muleq	r1, r4, sp
   12a30:	muleq	r1, r4, sp
   12a34:	muleq	r1, r4, sp
   12a38:	muleq	r1, r4, sp
   12a3c:	muleq	r1, r4, sp
   12a40:	muleq	r1, r4, sp
   12a44:	muleq	r1, r4, sp
   12a48:	muleq	r1, r4, sp
   12a4c:	muleq	r1, r4, sp
   12a50:	muleq	r1, r4, sp
   12a54:	muleq	r1, r4, sp
   12a58:	muleq	r1, r4, sp
   12a5c:	muleq	r1, r4, sp
   12a60:	muleq	r1, r4, sp
   12a64:	muleq	r1, r4, sp
   12a68:	muleq	r1, r4, sp
   12a6c:	muleq	r1, r4, sp
   12a70:	muleq	r1, r4, sp
   12a74:	andeq	r2, r1, r8, lsl #28
   12a78:	andeq	r2, r1, ip, lsl #28
   12a7c:	andeq	r2, r1, ip, lsl #28
   12a80:	andeq	r2, r1, r4, lsl #24
   12a84:	andeq	r2, r1, ip, lsl #28
   12a88:	strdeq	r2, [r1], -r0
   12a8c:	andeq	r2, r1, ip, lsl #28
   12a90:	andeq	r2, r1, r4, lsl #26
   12a94:	andeq	r2, r1, ip, lsl #28
   12a98:	andeq	r2, r1, ip, lsl #28
   12a9c:	andeq	r2, r1, ip, lsl #28
   12aa0:	strdeq	r2, [r1], -r0
   12aa4:	strdeq	r2, [r1], -r0
   12aa8:	strdeq	r2, [r1], -r0
   12aac:	strdeq	r2, [r1], -r0
   12ab0:	strdeq	r2, [r1], -r0
   12ab4:	strdeq	r2, [r1], -r0
   12ab8:	strdeq	r2, [r1], -r0
   12abc:	strdeq	r2, [r1], -r0
   12ac0:	strdeq	r2, [r1], -r0
   12ac4:	strdeq	r2, [r1], -r0
   12ac8:	strdeq	r2, [r1], -r0
   12acc:	strdeq	r2, [r1], -r0
   12ad0:	strdeq	r2, [r1], -r0
   12ad4:	strdeq	r2, [r1], -r0
   12ad8:	strdeq	r2, [r1], -r0
   12adc:	strdeq	r2, [r1], -r0
   12ae0:	andeq	r2, r1, ip, lsl #28
   12ae4:	andeq	r2, r1, ip, lsl #28
   12ae8:	andeq	r2, r1, ip, lsl #28
   12aec:	andeq	r2, r1, ip, lsl #28
   12af0:	andeq	r2, r1, ip, asr #25
   12af4:	muleq	r1, r4, sp
   12af8:	strdeq	r2, [r1], -r0
   12afc:	strdeq	r2, [r1], -r0
   12b00:	strdeq	r2, [r1], -r0
   12b04:	strdeq	r2, [r1], -r0
   12b08:	strdeq	r2, [r1], -r0
   12b0c:	strdeq	r2, [r1], -r0
   12b10:	strdeq	r2, [r1], -r0
   12b14:	strdeq	r2, [r1], -r0
   12b18:	strdeq	r2, [r1], -r0
   12b1c:	strdeq	r2, [r1], -r0
   12b20:	strdeq	r2, [r1], -r0
   12b24:	strdeq	r2, [r1], -r0
   12b28:	strdeq	r2, [r1], -r0
   12b2c:	strdeq	r2, [r1], -r0
   12b30:	strdeq	r2, [r1], -r0
   12b34:	strdeq	r2, [r1], -r0
   12b38:	strdeq	r2, [r1], -r0
   12b3c:	strdeq	r2, [r1], -r0
   12b40:	strdeq	r2, [r1], -r0
   12b44:	strdeq	r2, [r1], -r0
   12b48:	strdeq	r2, [r1], -r0
   12b4c:	strdeq	r2, [r1], -r0
   12b50:	strdeq	r2, [r1], -r0
   12b54:	strdeq	r2, [r1], -r0
   12b58:	strdeq	r2, [r1], -r0
   12b5c:	strdeq	r2, [r1], -r0
   12b60:	andeq	r2, r1, ip, lsl #28
   12b64:	andeq	r2, r1, r8, lsr ip
   12b68:	strdeq	r2, [r1], -r0
   12b6c:	andeq	r2, r1, ip, lsl #28
   12b70:	strdeq	r2, [r1], -r0
   12b74:	andeq	r2, r1, ip, lsl #28
   12b78:	strdeq	r2, [r1], -r0
   12b7c:	strdeq	r2, [r1], -r0
   12b80:	strdeq	r2, [r1], -r0
   12b84:	strdeq	r2, [r1], -r0
   12b88:	strdeq	r2, [r1], -r0
   12b8c:	strdeq	r2, [r1], -r0
   12b90:	strdeq	r2, [r1], -r0
   12b94:	strdeq	r2, [r1], -r0
   12b98:	strdeq	r2, [r1], -r0
   12b9c:	strdeq	r2, [r1], -r0
   12ba0:	strdeq	r2, [r1], -r0
   12ba4:	strdeq	r2, [r1], -r0
   12ba8:	strdeq	r2, [r1], -r0
   12bac:	strdeq	r2, [r1], -r0
   12bb0:	strdeq	r2, [r1], -r0
   12bb4:	strdeq	r2, [r1], -r0
   12bb8:	strdeq	r2, [r1], -r0
   12bbc:	strdeq	r2, [r1], -r0
   12bc0:	strdeq	r2, [r1], -r0
   12bc4:	strdeq	r2, [r1], -r0
   12bc8:	strdeq	r2, [r1], -r0
   12bcc:	strdeq	r2, [r1], -r0
   12bd0:	strdeq	r2, [r1], -r0
   12bd4:	strdeq	r2, [r1], -r0
   12bd8:	strdeq	r2, [r1], -r0
   12bdc:	strdeq	r2, [r1], -r0
   12be0:	andeq	r2, r1, r8, lsl ip
   12be4:	andeq	r2, r1, ip, lsl #28
   12be8:	andeq	r2, r1, r8, lsl ip
   12bec:	andeq	r2, r1, r4, lsl #24
   12bf0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bf4:	cmp	r0, #0
   12bf8:	beq	12e6c <__assert_fail@plt+0x1e6c>
   12bfc:	ldr	r0, [fp, #16]
   12c00:	b	12e70 <__assert_fail@plt+0x1e70>
   12c04:	mov	r9, #0
   12c08:	cmp	r6, #0
   12c0c:	beq	12e08 <__assert_fail@plt+0x1e08>
   12c10:	mov	sl, #0
   12c14:	b	12bf0 <__assert_fail@plt+0x1bf0>
   12c18:	mov	r9, #0
   12c1c:	cmn	lr, #1
   12c20:	beq	12dec <__assert_fail@plt+0x1dec>
   12c24:	cmp	r6, #0
   12c28:	bne	12c10 <__assert_fail@plt+0x1c10>
   12c2c:	cmp	lr, #1
   12c30:	beq	12e08 <__assert_fail@plt+0x1e08>
   12c34:	b	12c10 <__assert_fail@plt+0x1c10>
   12c38:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c3c:	cmp	r0, #2
   12c40:	bne	12e34 <__assert_fail@plt+0x1e34>
   12c44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c48:	tst	r0, #1
   12c4c:	bne	1357c <__assert_fail@plt+0x257c>
   12c50:	mov	sl, #0
   12c54:	mov	r0, #92	; 0x5c
   12c58:	b	12e48 <__assert_fail@plt+0x1e48>
   12c5c:	mov	r0, #102	; 0x66
   12c60:	b	12e58 <__assert_fail@plt+0x1e58>
   12c64:	mov	r2, #116	; 0x74
   12c68:	b	12c78 <__assert_fail@plt+0x1c78>
   12c6c:	mov	r0, #98	; 0x62
   12c70:	b	12e58 <__assert_fail@plt+0x1e58>
   12c74:	mov	r2, #114	; 0x72
   12c78:	ldr	r0, [sp, #64]	; 0x40
   12c7c:	tst	r0, #1
   12c80:	mov	r0, r2
   12c84:	bne	12e58 <__assert_fail@plt+0x1e58>
   12c88:	b	1357c <__assert_fail@plt+0x257c>
   12c8c:	ldr	r0, [sp, #84]	; 0x54
   12c90:	tst	r0, #1
   12c94:	beq	12f48 <__assert_fail@plt+0x1f48>
   12c98:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c9c:	tst	r0, #1
   12ca0:	bne	1357c <__assert_fail@plt+0x257c>
   12ca4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12ca8:	cmp	r0, #2
   12cac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12cb0:	movwne	r0, #1
   12cb4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12cb8:	orr	r0, r0, r2
   12cbc:	tst	r0, #1
   12cc0:	beq	1333c <__assert_fail@plt+0x233c>
   12cc4:	mov	r0, r8
   12cc8:	b	13370 <__assert_fail@plt+0x2370>
   12ccc:	mov	sl, #0
   12cd0:	mov	r5, #63	; 0x3f
   12cd4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12cd8:	cmp	r0, #5
   12cdc:	beq	130fc <__assert_fail@plt+0x20fc>
   12ce0:	cmp	r0, #2
   12ce4:	bne	1319c <__assert_fail@plt+0x219c>
   12ce8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12cec:	tst	r0, #1
   12cf0:	mov	r9, #0
   12cf4:	beq	12bf0 <__assert_fail@plt+0x1bf0>
   12cf8:	b	1357c <__assert_fail@plt+0x257c>
   12cfc:	mov	r0, #118	; 0x76
   12d00:	b	12e58 <__assert_fail@plt+0x1e58>
   12d04:	mov	r5, #39	; 0x27
   12d08:	mov	r0, #1
   12d0c:	str	r0, [sp, #56]	; 0x38
   12d10:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12d14:	cmp	r0, #2
   12d18:	bne	12f68 <__assert_fail@plt+0x1f68>
   12d1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d20:	tst	r0, #1
   12d24:	bne	1357c <__assert_fail@plt+0x257c>
   12d28:	ldr	r2, [sp, #72]	; 0x48
   12d2c:	cmp	r2, #0
   12d30:	mov	r0, r2
   12d34:	movwne	r0, #1
   12d38:	clz	r1, r4
   12d3c:	lsr	r1, r1, #5
   12d40:	orrs	r0, r0, r1
   12d44:	moveq	r2, r4
   12d48:	str	r2, [sp, #72]	; 0x48
   12d4c:	moveq	r4, r0
   12d50:	cmp	r8, r4
   12d54:	movcc	r0, #39	; 0x27
   12d58:	strbcc	r0, [r7, r8]
   12d5c:	add	r0, r8, #1
   12d60:	cmp	r0, r4
   12d64:	movcc	r1, #92	; 0x5c
   12d68:	strbcc	r1, [r7, r0]
   12d6c:	add	r0, r8, #2
   12d70:	cmp	r0, r4
   12d74:	movcc	r1, #39	; 0x27
   12d78:	strbcc	r1, [r7, r0]
   12d7c:	add	r8, r8, #3
   12d80:	mov	r0, #0
   12d84:	str	r0, [fp, #-56]	; 0xffffffc8
   12d88:	mov	sl, #0
   12d8c:	mov	r9, #1
   12d90:	b	12bf0 <__assert_fail@plt+0x1bf0>
   12d94:	str	r4, [sp, #24]
   12d98:	ldr	r0, [sp, #40]	; 0x28
   12d9c:	cmp	r0, #1
   12da0:	bne	12f70 <__assert_fail@plt+0x1f70>
   12da4:	str	lr, [sp, #28]
   12da8:	bl	10f28 <__ctype_b_loc@plt>
   12dac:	ldr	ip, [fp, #-84]	; 0xffffffac
   12db0:	ldr	r0, [r0]
   12db4:	add	r0, r0, r5, lsl #1
   12db8:	ldrb	r0, [r0, #1]
   12dbc:	ubfx	r9, r0, #6, #1
   12dc0:	mov	r1, #1
   12dc4:	ldr	r4, [sp, #24]
   12dc8:	ldr	r0, [sp, #52]	; 0x34
   12dcc:	orr	r0, r9, r0
   12dd0:	mov	r2, r1
   12dd4:	cmp	r1, #1
   12dd8:	bhi	131a4 <__assert_fail@plt+0x21a4>
   12ddc:	tst	r0, #1
   12de0:	beq	131a4 <__assert_fail@plt+0x21a4>
   12de4:	ldr	lr, [sp, #28]
   12de8:	b	12bf0 <__assert_fail@plt+0x1bf0>
   12dec:	cmp	r6, #0
   12df0:	ldrbeq	r0, [ip, #1]
   12df4:	cmpeq	r0, #0
   12df8:	beq	12e08 <__assert_fail@plt+0x1e08>
   12dfc:	mvn	lr, #0
   12e00:	mov	sl, #0
   12e04:	b	12bf0 <__assert_fail@plt+0x1bf0>
   12e08:	mov	r1, #1
   12e0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12e10:	cmp	r0, #2
   12e14:	bne	12e2c <__assert_fail@plt+0x1e2c>
   12e18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e1c:	tst	r0, #1
   12e20:	mov	r9, r1
   12e24:	beq	12bf0 <__assert_fail@plt+0x1bf0>
   12e28:	b	1357c <__assert_fail@plt+0x257c>
   12e2c:	mov	r9, r1
   12e30:	b	12bf0 <__assert_fail@plt+0x1bf0>
   12e34:	mov	sl, #0
   12e38:	mov	r0, #92	; 0x5c
   12e3c:	ldr	r1, [sp, #48]	; 0x30
   12e40:	cmp	r1, #0
   12e44:	beq	12e58 <__assert_fail@plt+0x1e58>
   12e48:	mov	r9, #0
   12e4c:	cmp	sl, #0
   12e50:	beq	13408 <__assert_fail@plt+0x2408>
   12e54:	b	13444 <__assert_fail@plt+0x2444>
   12e58:	mov	r9, #0
   12e5c:	ldr	r1, [sp, #84]	; 0x54
   12e60:	tst	r1, #1
   12e64:	mov	sl, #0
   12e68:	bne	12ea8 <__assert_fail@plt+0x1ea8>
   12e6c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12e70:	cmp	r0, #0
   12e74:	mov	r0, r5
   12e78:	beq	12e9c <__assert_fail@plt+0x1e9c>
   12e7c:	ubfx	r0, r5, #5, #3
   12e80:	ldr	r1, [fp, #16]
   12e84:	ldr	r0, [r1, r0, lsl #2]
   12e88:	and	r1, r5, #31
   12e8c:	mov	r2, #1
   12e90:	tst	r0, r2, lsl r1
   12e94:	mov	r0, r5
   12e98:	bne	12ea8 <__assert_fail@plt+0x1ea8>
   12e9c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ea0:	cmp	r1, #0
   12ea4:	beq	13400 <__assert_fail@plt+0x2400>
   12ea8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12eac:	tst	r1, #1
   12eb0:	bne	1357c <__assert_fail@plt+0x257c>
   12eb4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12eb8:	cmp	r1, #2
   12ebc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12ec0:	movwne	r1, #1
   12ec4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ec8:	orr	r1, r1, r2
   12ecc:	tst	r1, #1
   12ed0:	beq	12edc <__assert_fail@plt+0x1edc>
   12ed4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ed8:	b	12f18 <__assert_fail@plt+0x1f18>
   12edc:	cmp	r8, r4
   12ee0:	movcc	r1, #39	; 0x27
   12ee4:	strbcc	r1, [r7, r8]
   12ee8:	add	r1, r8, #1
   12eec:	cmp	r1, r4
   12ef0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ef4:	movcc	r2, #36	; 0x24
   12ef8:	strbcc	r2, [r7, r1]
   12efc:	add	r1, r8, #2
   12f00:	cmp	r1, r4
   12f04:	movcc	r2, #39	; 0x27
   12f08:	strbcc	r2, [r7, r1]
   12f0c:	add	r8, r8, #3
   12f10:	mov	r1, #1
   12f14:	str	r1, [fp, #-56]	; 0xffffffc8
   12f18:	cmp	r8, r4
   12f1c:	movcc	r1, #92	; 0x5c
   12f20:	strbcc	r1, [r7, r8]
   12f24:	add	r8, r8, #1
   12f28:	cmp	r8, r4
   12f2c:	strbcc	r0, [r7, r8]
   12f30:	and	r5, r5, r9
   12f34:	add	r8, r8, #1
   12f38:	add	r6, r6, #1
   12f3c:	cmn	lr, #1
   12f40:	bne	1291c <__assert_fail@plt+0x191c>
   12f44:	b	12928 <__assert_fail@plt+0x1928>
   12f48:	mov	r9, #0
   12f4c:	ldr	r0, [sp, #36]	; 0x24
   12f50:	cmp	r0, #0
   12f54:	mov	sl, #0
   12f58:	mov	r5, #0
   12f5c:	beq	12e6c <__assert_fail@plt+0x1e6c>
   12f60:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12f64:	b	12f38 <__assert_fail@plt+0x1f38>
   12f68:	mov	r9, #1
   12f6c:	b	12bf0 <__assert_fail@plt+0x1bf0>
   12f70:	mov	r0, #0
   12f74:	str	r0, [fp, #-36]	; 0xffffffdc
   12f78:	str	r0, [fp, #-40]	; 0xffffffd8
   12f7c:	cmn	lr, #1
   12f80:	bne	12f94 <__assert_fail@plt+0x1f94>
   12f84:	mov	r0, ip
   12f88:	bl	10f40 <strlen@plt>
   12f8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f90:	mov	lr, r0
   12f94:	add	r0, ip, r6
   12f98:	str	r0, [sp, #20]
   12f9c:	mov	r9, #1
   12fa0:	mov	r7, #0
   12fa4:	sub	r4, fp, #40	; 0x28
   12fa8:	str	lr, [sp, #28]
   12fac:	str	r7, [sp, #44]	; 0x2c
   12fb0:	add	r7, r7, r6
   12fb4:	add	r1, ip, r7
   12fb8:	sub	r2, lr, r7
   12fbc:	sub	r0, fp, #44	; 0x2c
   12fc0:	mov	r3, r4
   12fc4:	bl	150d0 <__assert_fail@plt+0x40d0>
   12fc8:	cmp	r0, #0
   12fcc:	beq	1348c <__assert_fail@plt+0x248c>
   12fd0:	cmn	r0, #1
   12fd4:	beq	1344c <__assert_fail@plt+0x244c>
   12fd8:	cmn	r0, #2
   12fdc:	ldr	lr, [sp, #28]
   12fe0:	beq	13454 <__assert_fail@plt+0x2454>
   12fe4:	cmp	r0, #2
   12fe8:	mov	r1, #0
   12fec:	movwcc	r1, #1
   12ff0:	ldr	r2, [sp, #60]	; 0x3c
   12ff4:	eor	r2, r2, #1
   12ff8:	orrs	r1, r2, r1
   12ffc:	ldr	r4, [sp, #24]
   13000:	bne	130c0 <__assert_fail@plt+0x20c0>
   13004:	ldr	r1, [sp, #44]	; 0x2c
   13008:	ldr	r2, [sp, #20]
   1300c:	add	r1, r2, r1
   13010:	mov	r2, #1
   13014:	ldrb	r3, [r1, r2]
   13018:	sub	r3, r3, #91	; 0x5b
   1301c:	cmp	r3, #33	; 0x21
   13020:	bhi	130b4 <__assert_fail@plt+0x20b4>
   13024:	add	r7, pc, #0
   13028:	ldr	pc, [r7, r3, lsl #2]
   1302c:	andeq	r3, r1, r4, ror r5
   13030:	andeq	r3, r1, r4, ror r5
   13034:	strheq	r3, [r1], -r4
   13038:	andeq	r3, r1, r4, ror r5
   1303c:	strheq	r3, [r1], -r4
   13040:	andeq	r3, r1, r4, ror r5
   13044:	strheq	r3, [r1], -r4
   13048:	strheq	r3, [r1], -r4
   1304c:	strheq	r3, [r1], -r4
   13050:	strheq	r3, [r1], -r4
   13054:	strheq	r3, [r1], -r4
   13058:	strheq	r3, [r1], -r4
   1305c:	strheq	r3, [r1], -r4
   13060:	strheq	r3, [r1], -r4
   13064:	strheq	r3, [r1], -r4
   13068:	strheq	r3, [r1], -r4
   1306c:	strheq	r3, [r1], -r4
   13070:	strheq	r3, [r1], -r4
   13074:	strheq	r3, [r1], -r4
   13078:	strheq	r3, [r1], -r4
   1307c:	strheq	r3, [r1], -r4
   13080:	strheq	r3, [r1], -r4
   13084:	strheq	r3, [r1], -r4
   13088:	strheq	r3, [r1], -r4
   1308c:	strheq	r3, [r1], -r4
   13090:	strheq	r3, [r1], -r4
   13094:	strheq	r3, [r1], -r4
   13098:	strheq	r3, [r1], -r4
   1309c:	strheq	r3, [r1], -r4
   130a0:	strheq	r3, [r1], -r4
   130a4:	strheq	r3, [r1], -r4
   130a8:	strheq	r3, [r1], -r4
   130ac:	strheq	r3, [r1], -r4
   130b0:	andeq	r3, r1, r4, ror r5
   130b4:	add	r2, r2, #1
   130b8:	cmp	r2, r0
   130bc:	bcc	13014 <__assert_fail@plt+0x2014>
   130c0:	ldr	r7, [sp, #44]	; 0x2c
   130c4:	add	r7, r0, r7
   130c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   130cc:	bl	10e68 <iswprint@plt>
   130d0:	cmp	r0, #0
   130d4:	movwne	r0, #1
   130d8:	and	r9, r9, r0
   130dc:	sub	r4, fp, #40	; 0x28
   130e0:	mov	r0, r4
   130e4:	bl	10e14 <mbsinit@plt>
   130e8:	ldr	lr, [sp, #28]
   130ec:	cmp	r0, #0
   130f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   130f4:	beq	12fac <__assert_fail@plt+0x1fac>
   130f8:	b	13494 <__assert_fail@plt+0x2494>
   130fc:	ldr	r0, [sp, #32]
   13100:	cmp	r0, #0
   13104:	beq	1319c <__assert_fail@plt+0x219c>
   13108:	add	r0, r6, #2
   1310c:	cmp	r0, lr
   13110:	bcs	1319c <__assert_fail@plt+0x219c>
   13114:	add	r1, ip, r6
   13118:	ldrb	r1, [r1, #1]
   1311c:	cmp	r1, #63	; 0x3f
   13120:	bne	1319c <__assert_fail@plt+0x219c>
   13124:	ldrb	r9, [ip, r0]
   13128:	sub	r2, r9, #33	; 0x21
   1312c:	cmp	r2, #29
   13130:	bhi	1319c <__assert_fail@plt+0x219c>
   13134:	mov	r3, #1
   13138:	movw	r1, #20929	; 0x51c1
   1313c:	movt	r1, #14336	; 0x3800
   13140:	tst	r1, r3, lsl r2
   13144:	beq	1319c <__assert_fail@plt+0x219c>
   13148:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1314c:	tst	r1, #1
   13150:	bne	1357c <__assert_fail@plt+0x257c>
   13154:	cmp	r8, r4
   13158:	movcc	r1, #63	; 0x3f
   1315c:	strbcc	r1, [r7, r8]
   13160:	add	r2, r8, #1
   13164:	cmp	r2, r4
   13168:	movcc	r1, #34	; 0x22
   1316c:	strbcc	r1, [r7, r2]
   13170:	add	r2, r8, #2
   13174:	cmp	r2, r4
   13178:	movcc	r1, #34	; 0x22
   1317c:	strbcc	r1, [r7, r2]
   13180:	add	r2, r8, #3
   13184:	cmp	r2, r4
   13188:	movcc	r1, #63	; 0x3f
   1318c:	strbcc	r1, [r7, r2]
   13190:	add	r8, r8, #4
   13194:	mov	r6, r0
   13198:	mov	r5, r9
   1319c:	mov	r9, #0
   131a0:	b	12bf0 <__assert_fail@plt+0x1bf0>
   131a4:	add	r1, r2, r6
   131a8:	str	r1, [sp, #44]	; 0x2c
   131ac:	add	r1, r6, #1
   131b0:	mov	r3, #0
   131b4:	ldr	lr, [sp, #28]
   131b8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   131bc:	tst	r0, #1
   131c0:	bne	132b4 <__assert_fail@plt+0x22b4>
   131c4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   131c8:	tst	r2, #1
   131cc:	bne	1357c <__assert_fail@plt+0x257c>
   131d0:	cmp	r6, #2
   131d4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   131d8:	movwne	r3, #1
   131dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   131e0:	orr	r3, r3, r2
   131e4:	tst	r3, #1
   131e8:	bne	13224 <__assert_fail@plt+0x2224>
   131ec:	cmp	r8, r4
   131f0:	movcc	r2, #39	; 0x27
   131f4:	strbcc	r2, [r7, r8]
   131f8:	add	r3, r8, #1
   131fc:	cmp	r3, r4
   13200:	movcc	r2, #36	; 0x24
   13204:	strbcc	r2, [r7, r3]
   13208:	add	r3, r8, #2
   1320c:	cmp	r3, r4
   13210:	movcc	r2, #39	; 0x27
   13214:	strbcc	r2, [r7, r3]
   13218:	add	r8, r8, #3
   1321c:	mov	r2, #1
   13220:	str	r2, [fp, #-56]	; 0xffffffc8
   13224:	cmp	r8, r4
   13228:	movcc	r2, #92	; 0x5c
   1322c:	strbcc	r2, [r7, r8]
   13230:	add	r3, r8, #1
   13234:	cmp	r3, r4
   13238:	bcs	13258 <__assert_fail@plt+0x2258>
   1323c:	and	r7, r5, #192	; 0xc0
   13240:	mov	r2, #48	; 0x30
   13244:	orr	r7, r2, r7, lsr #6
   13248:	ldr	r6, [sp, #80]	; 0x50
   1324c:	strb	r7, [r6, r3]
   13250:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13254:	ldr	r7, [sp, #80]	; 0x50
   13258:	add	r3, r8, #2
   1325c:	cmp	r3, r4
   13260:	bcs	13280 <__assert_fail@plt+0x2280>
   13264:	lsr	r7, r5, #3
   13268:	mov	r2, #6
   1326c:	bfi	r7, r2, #3, #29
   13270:	ldr	r6, [sp, #80]	; 0x50
   13274:	strb	r7, [r6, r3]
   13278:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1327c:	ldr	r7, [sp, #80]	; 0x50
   13280:	mov	r2, #6
   13284:	bfi	r5, r2, #3, #29
   13288:	add	r8, r8, #3
   1328c:	mov	r3, #1
   13290:	b	132d8 <__assert_fail@plt+0x22d8>
   13294:	ldr	r7, [sp, #80]	; 0x50
   13298:	cmp	r8, r4
   1329c:	strbcc	r5, [r7, r8]
   132a0:	ldrb	r5, [ip, r1]
   132a4:	add	r1, r1, #1
   132a8:	add	r8, r8, #1
   132ac:	tst	r0, #1
   132b0:	beq	131c4 <__assert_fail@plt+0x21c4>
   132b4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   132b8:	tst	r2, #1
   132bc:	beq	132d0 <__assert_fail@plt+0x22d0>
   132c0:	cmp	r8, r4
   132c4:	movcc	r2, #92	; 0x5c
   132c8:	strbcc	r2, [r7, r8]
   132cc:	add	r8, r8, #1
   132d0:	mov	r2, #0
   132d4:	str	r2, [fp, #-52]	; 0xffffffcc
   132d8:	and	sl, r3, #1
   132dc:	ldr	r2, [sp, #44]	; 0x2c
   132e0:	cmp	r2, r1
   132e4:	bls	133f0 <__assert_fail@plt+0x23f0>
   132e8:	cmp	sl, #0
   132ec:	movwne	sl, #1
   132f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   132f4:	mvn	r7, r2
   132f8:	orr	r7, r7, sl
   132fc:	tst	r7, #1
   13300:	bne	13294 <__assert_fail@plt+0x2294>
   13304:	cmp	r8, r4
   13308:	ldrcc	r7, [sp, #80]	; 0x50
   1330c:	movcc	r2, #39	; 0x27
   13310:	strbcc	r2, [r7, r8]
   13314:	add	r7, r8, #1
   13318:	cmp	r7, r4
   1331c:	ldrcc	r6, [sp, #80]	; 0x50
   13320:	movcc	r2, #39	; 0x27
   13324:	strbcc	r2, [r6, r7]
   13328:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   1332c:	add	r8, r8, #2
   13330:	mov	r2, #0
   13334:	str	r2, [fp, #-56]	; 0xffffffc8
   13338:	b	13294 <__assert_fail@plt+0x2294>
   1333c:	cmp	r8, r4
   13340:	movcc	r0, #39	; 0x27
   13344:	strbcc	r0, [r7, r8]
   13348:	add	r0, r8, #1
   1334c:	cmp	r0, r4
   13350:	movcc	r1, #36	; 0x24
   13354:	strbcc	r1, [r7, r0]
   13358:	add	r0, r8, #2
   1335c:	cmp	r0, r4
   13360:	movcc	r1, #39	; 0x27
   13364:	strbcc	r1, [r7, r0]
   13368:	add	r0, r8, #3
   1336c:	mov	r2, #1
   13370:	cmp	r0, r4
   13374:	movcc	r1, #92	; 0x5c
   13378:	strbcc	r1, [r7, r0]
   1337c:	str	r2, [fp, #-56]	; 0xffffffc8
   13380:	add	r8, r0, #1
   13384:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13388:	cmp	r1, #2
   1338c:	beq	133e0 <__assert_fail@plt+0x23e0>
   13390:	add	r1, r6, #1
   13394:	mov	r9, #0
   13398:	mov	sl, #1
   1339c:	mov	r5, #48	; 0x30
   133a0:	cmp	r1, lr
   133a4:	bcs	12bf0 <__assert_fail@plt+0x1bf0>
   133a8:	ldrb	r1, [ip, r1]
   133ac:	sub	r1, r1, #48	; 0x30
   133b0:	uxtb	r1, r1
   133b4:	cmp	r1, #9
   133b8:	bhi	12bf0 <__assert_fail@plt+0x1bf0>
   133bc:	cmp	r8, r4
   133c0:	movcc	r1, #48	; 0x30
   133c4:	strbcc	r1, [r7, r8]
   133c8:	add	r1, r0, #2
   133cc:	cmp	r1, r4
   133d0:	movcc	r2, #48	; 0x30
   133d4:	strbcc	r2, [r7, r1]
   133d8:	add	r8, r0, #3
   133dc:	b	12bf0 <__assert_fail@plt+0x1bf0>
   133e0:	mov	r0, #48	; 0x30
   133e4:	mov	sl, #1
   133e8:	mov	r9, #0
   133ec:	b	12e9c <__assert_fail@plt+0x1e9c>
   133f0:	sub	r6, r1, #1
   133f4:	cmp	sl, #0
   133f8:	movwne	sl, #1
   133fc:	mov	r0, r5
   13400:	cmp	sl, #0
   13404:	bne	13444 <__assert_fail@plt+0x2444>
   13408:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1340c:	tst	r1, #1
   13410:	beq	13444 <__assert_fail@plt+0x2444>
   13414:	cmp	r8, r4
   13418:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1341c:	movcc	r1, #39	; 0x27
   13420:	strbcc	r1, [r7, r8]
   13424:	add	r1, r8, #1
   13428:	cmp	r1, r4
   1342c:	movcc	r2, #39	; 0x27
   13430:	strbcc	r2, [r7, r1]
   13434:	add	r8, r8, #2
   13438:	mov	r1, #0
   1343c:	str	r1, [fp, #-56]	; 0xffffffc8
   13440:	b	12f28 <__assert_fail@plt+0x1f28>
   13444:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13448:	b	12f28 <__assert_fail@plt+0x1f28>
   1344c:	mov	r9, #0
   13450:	b	1348c <__assert_fail@plt+0x248c>
   13454:	mov	r9, #0
   13458:	cmp	r7, lr
   1345c:	bcs	1348c <__assert_fail@plt+0x248c>
   13460:	ldr	ip, [fp, #-84]	; 0xffffffac
   13464:	ldr	r7, [sp, #44]	; 0x2c
   13468:	ldr	r0, [sp, #20]
   1346c:	ldrb	r0, [r0, r7]
   13470:	cmp	r0, #0
   13474:	beq	13494 <__assert_fail@plt+0x2494>
   13478:	add	r7, r7, #1
   1347c:	add	r0, r6, r7
   13480:	cmp	r0, lr
   13484:	bcc	13468 <__assert_fail@plt+0x2468>
   13488:	b	13494 <__assert_fail@plt+0x2494>
   1348c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13490:	ldr	r7, [sp, #44]	; 0x2c
   13494:	mov	r1, r7
   13498:	ldr	r7, [sp, #80]	; 0x50
   1349c:	b	12dc4 <__assert_fail@plt+0x1dc4>
   134a0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   134a4:	eor	r0, r1, #2
   134a8:	orr	r0, r0, r8
   134ac:	clz	r0, r0
   134b0:	lsr	r0, r0, #5
   134b4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   134b8:	tst	r2, r0
   134bc:	bne	1357c <__assert_fail@plt+0x257c>
   134c0:	cmp	r1, #2
   134c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   134c8:	movwne	r0, #1
   134cc:	orr	r0, r2, r0
   134d0:	tst	r0, #1
   134d4:	ldreq	r0, [sp, #56]	; 0x38
   134d8:	eoreq	r0, r0, #1
   134dc:	tsteq	r0, #1
   134e0:	bne	13514 <__assert_fail@plt+0x2514>
   134e4:	mov	r9, lr
   134e8:	tst	r5, #1
   134ec:	bne	135e4 <__assert_fail@plt+0x25e4>
   134f0:	ldr	r0, [sp, #72]	; 0x48
   134f4:	cmp	r0, #0
   134f8:	beq	13514 <__assert_fail@plt+0x2514>
   134fc:	mov	r5, #0
   13500:	cmp	r4, #0
   13504:	ldr	r0, [sp, #84]	; 0x54
   13508:	mov	sl, r2
   1350c:	ldr	r6, [sp, #72]	; 0x48
   13510:	beq	126ac <__assert_fail@plt+0x16ac>
   13514:	ldr	r1, [sp, #92]	; 0x5c
   13518:	clz	r0, r1
   1351c:	lsr	r0, r0, #5
   13520:	orr	r0, r0, r2
   13524:	tst	r0, #1
   13528:	bne	13554 <__assert_fail@plt+0x2554>
   1352c:	ldrb	r0, [r1]
   13530:	cmp	r0, #0
   13534:	beq	13554 <__assert_fail@plt+0x2554>
   13538:	add	r1, r1, #1
   1353c:	cmp	r8, r4
   13540:	strbcc	r0, [r7, r8]
   13544:	add	r8, r8, #1
   13548:	ldrb	r0, [r1], #1
   1354c:	cmp	r0, #0
   13550:	bne	1353c <__assert_fail@plt+0x253c>
   13554:	cmp	r8, r4
   13558:	movcc	r0, #0
   1355c:	strbcc	r0, [r7, r8]
   13560:	b	135d8 <__assert_fail@plt+0x25d8>
   13564:	ldr	ip, [fp, #-84]	; 0xffffffac
   13568:	mov	lr, r4
   1356c:	mov	r4, r5
   13570:	b	1357c <__assert_fail@plt+0x257c>
   13574:	ldr	r7, [sp, #80]	; 0x50
   13578:	ldr	ip, [fp, #-84]	; 0xffffffac
   1357c:	mov	r0, #0
   13580:	ldr	r1, [fp, #12]
   13584:	bic	r1, r1, #2
   13588:	ldr	r2, [sp, #84]	; 0x54
   1358c:	tst	r2, #1
   13590:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13594:	mov	r2, r3
   13598:	movwne	r2, #4
   1359c:	cmp	r3, #2
   135a0:	movne	r2, r3
   135a4:	str	r2, [sp]
   135a8:	str	r1, [sp, #4]
   135ac:	str	r0, [sp, #8]
   135b0:	ldr	r0, [sp, #68]	; 0x44
   135b4:	str	r0, [sp, #12]
   135b8:	ldr	r0, [sp, #76]	; 0x4c
   135bc:	str	r0, [sp, #16]
   135c0:	mov	r0, r7
   135c4:	mov	r1, r4
   135c8:	mov	r2, ip
   135cc:	mov	r3, lr
   135d0:	bl	12624 <__assert_fail@plt+0x1624>
   135d4:	mov	r8, r0
   135d8:	mov	r0, r8
   135dc:	sub	sp, fp, #28
   135e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135e4:	mov	r0, #5
   135e8:	str	r0, [sp]
   135ec:	ldr	r0, [fp, #12]
   135f0:	str	r0, [sp, #4]
   135f4:	ldr	r0, [fp, #16]
   135f8:	str	r0, [sp, #8]
   135fc:	ldr	r0, [sp, #68]	; 0x44
   13600:	str	r0, [sp, #12]
   13604:	ldr	r0, [sp, #76]	; 0x4c
   13608:	str	r0, [sp, #16]
   1360c:	mov	r0, r7
   13610:	ldr	r1, [sp, #72]	; 0x48
   13614:	ldr	r2, [fp, #-84]	; 0xffffffac
   13618:	mov	r3, r9
   1361c:	b	135d0 <__assert_fail@plt+0x25d0>
   13620:	bl	10fe8 <abort@plt>
   13624:	mov	r3, r2
   13628:	mov	r2, #0
   1362c:	b	13630 <__assert_fail@plt+0x2630>
   13630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13634:	add	fp, sp, #28
   13638:	sub	sp, sp, #36	; 0x24
   1363c:	mov	r4, r2
   13640:	str	r2, [sp, #24]
   13644:	mov	r5, r1
   13648:	mov	r6, r0
   1364c:	str	r0, [sp, #20]
   13650:	movw	r8, #24944	; 0x6170
   13654:	movt	r8, #2
   13658:	cmp	r3, #0
   1365c:	movne	r8, r3
   13660:	bl	10f4c <__errno_location@plt>
   13664:	str	r0, [sp, #28]
   13668:	ldm	r8, {r3, r9}
   1366c:	ldr	r1, [r8, #40]	; 0x28
   13670:	ldr	r2, [r8, #44]	; 0x2c
   13674:	ldr	r7, [r0]
   13678:	str	r7, [sp, #32]
   1367c:	add	sl, r8, #8
   13680:	cmp	r4, #0
   13684:	orreq	r9, r9, #1
   13688:	stm	sp, {r3, r9, sl}
   1368c:	str	r1, [sp, #12]
   13690:	str	r2, [sp, #16]
   13694:	mov	r0, #0
   13698:	mov	r1, #0
   1369c:	mov	r2, r6
   136a0:	mov	r3, r5
   136a4:	mov	r7, r5
   136a8:	bl	12624 <__assert_fail@plt+0x1624>
   136ac:	mov	r5, r0
   136b0:	add	r4, r0, #1
   136b4:	mov	r0, r4
   136b8:	bl	147e4 <__assert_fail@plt+0x37e4>
   136bc:	mov	r6, r0
   136c0:	ldr	r0, [r8]
   136c4:	ldr	r1, [r8, #40]	; 0x28
   136c8:	ldr	r2, [r8, #44]	; 0x2c
   136cc:	stm	sp, {r0, r9, sl}
   136d0:	str	r1, [sp, #12]
   136d4:	str	r2, [sp, #16]
   136d8:	mov	r0, r6
   136dc:	mov	r1, r4
   136e0:	ldr	r2, [sp, #20]
   136e4:	mov	r3, r7
   136e8:	bl	12624 <__assert_fail@plt+0x1624>
   136ec:	ldr	r0, [sp, #24]
   136f0:	ldr	r1, [sp, #32]
   136f4:	ldr	r2, [sp, #28]
   136f8:	str	r1, [r2]
   136fc:	cmp	r0, #0
   13700:	strne	r5, [r0]
   13704:	mov	r0, r6
   13708:	sub	sp, fp, #28
   1370c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13710:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13714:	add	fp, sp, #24
   13718:	movw	r8, #24808	; 0x60e8
   1371c:	movt	r8, #2
   13720:	ldr	r4, [r8]
   13724:	movw	r5, #24812	; 0x60ec
   13728:	movt	r5, #2
   1372c:	ldr	r0, [r5]
   13730:	cmp	r0, #2
   13734:	blt	13760 <__assert_fail@plt+0x2760>
   13738:	add	r7, r4, #12
   1373c:	mov	r6, #0
   13740:	ldr	r0, [r7, r6, lsl #3]
   13744:	bl	15020 <__assert_fail@plt+0x4020>
   13748:	add	r0, r6, #1
   1374c:	ldr	r1, [r5]
   13750:	add	r2, r6, #2
   13754:	cmp	r2, r1
   13758:	mov	r6, r0
   1375c:	blt	13740 <__assert_fail@plt+0x2740>
   13760:	ldr	r0, [r4, #4]
   13764:	movw	r7, #24992	; 0x61a0
   13768:	movt	r7, #2
   1376c:	cmp	r0, r7
   13770:	beq	13788 <__assert_fail@plt+0x2788>
   13774:	bl	15020 <__assert_fail@plt+0x4020>
   13778:	movw	r0, #24816	; 0x60f0
   1377c:	movt	r0, #2
   13780:	mov	r6, #256	; 0x100
   13784:	strd	r6, [r0]
   13788:	movw	r6, #24816	; 0x60f0
   1378c:	movt	r6, #2
   13790:	cmp	r4, r6
   13794:	beq	137a4 <__assert_fail@plt+0x27a4>
   13798:	mov	r0, r4
   1379c:	bl	15020 <__assert_fail@plt+0x4020>
   137a0:	str	r6, [r8]
   137a4:	mov	r0, #1
   137a8:	str	r0, [r5]
   137ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137b0:	movw	r3, #24944	; 0x6170
   137b4:	movt	r3, #2
   137b8:	mvn	r2, #0
   137bc:	b	137c0 <__assert_fail@plt+0x27c0>
   137c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137c4:	add	fp, sp, #28
   137c8:	sub	sp, sp, #44	; 0x2c
   137cc:	mov	r7, r3
   137d0:	str	r2, [sp, #36]	; 0x24
   137d4:	str	r1, [sp, #32]
   137d8:	mov	r5, r0
   137dc:	bl	10f4c <__errno_location@plt>
   137e0:	cmp	r5, #0
   137e4:	blt	13950 <__assert_fail@plt+0x2950>
   137e8:	cmn	r5, #-2147483647	; 0x80000001
   137ec:	beq	13950 <__assert_fail@plt+0x2950>
   137f0:	movw	r4, #24808	; 0x60e8
   137f4:	movt	r4, #2
   137f8:	ldr	r6, [r4]
   137fc:	str	r0, [sp, #28]
   13800:	ldr	r0, [r0]
   13804:	str	r0, [sp, #24]
   13808:	movw	r8, #24812	; 0x60ec
   1380c:	movt	r8, #2
   13810:	ldr	r1, [r8]
   13814:	cmp	r1, r5
   13818:	ble	13824 <__assert_fail@plt+0x2824>
   1381c:	mov	sl, r6
   13820:	b	1388c <__assert_fail@plt+0x288c>
   13824:	str	r1, [fp, #-32]	; 0xffffffe0
   13828:	mov	r0, #8
   1382c:	str	r0, [sp]
   13830:	movw	r9, #24816	; 0x60f0
   13834:	movt	r9, #2
   13838:	subs	r0, r6, r9
   1383c:	movne	r0, r6
   13840:	add	r2, r5, #1
   13844:	sub	r2, r2, r1
   13848:	sub	r1, fp, #32
   1384c:	mvn	r3, #-2147483648	; 0x80000000
   13850:	bl	148cc <__assert_fail@plt+0x38cc>
   13854:	mov	sl, r0
   13858:	str	r0, [r4]
   1385c:	cmp	r6, r9
   13860:	ldrdeq	r0, [r9]
   13864:	stmeq	sl, {r0, r1}
   13868:	ldr	r1, [r8]
   1386c:	add	r0, sl, r1, lsl #3
   13870:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13874:	sub	r1, r2, r1
   13878:	lsl	r2, r1, #3
   1387c:	mov	r1, #0
   13880:	bl	10f64 <memset@plt>
   13884:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13888:	str	r0, [r8]
   1388c:	mov	r9, sl
   13890:	ldr	r6, [r9, r5, lsl #3]!
   13894:	ldr	r4, [r9, #4]!
   13898:	ldm	r7, {r0, r1}
   1389c:	ldr	r2, [r7, #40]	; 0x28
   138a0:	ldr	r3, [r7, #44]	; 0x2c
   138a4:	orr	r8, r1, #1
   138a8:	add	r1, r7, #8
   138ac:	stm	sp, {r0, r8}
   138b0:	str	r1, [sp, #20]
   138b4:	add	r0, sp, #8
   138b8:	stm	r0, {r1, r2, r3}
   138bc:	mov	r0, r4
   138c0:	mov	r1, r6
   138c4:	ldr	r2, [sp, #32]
   138c8:	ldr	r3, [sp, #36]	; 0x24
   138cc:	bl	12624 <__assert_fail@plt+0x1624>
   138d0:	cmp	r6, r0
   138d4:	bhi	13938 <__assert_fail@plt+0x2938>
   138d8:	add	r6, r0, #1
   138dc:	str	r6, [sl, r5, lsl #3]
   138e0:	movw	r0, #24992	; 0x61a0
   138e4:	movt	r0, #2
   138e8:	cmp	r4, r0
   138ec:	beq	138f8 <__assert_fail@plt+0x28f8>
   138f0:	mov	r0, r4
   138f4:	bl	15020 <__assert_fail@plt+0x4020>
   138f8:	mov	r0, r6
   138fc:	bl	147e4 <__assert_fail@plt+0x37e4>
   13900:	mov	r4, r0
   13904:	str	r0, [r9]
   13908:	ldr	r0, [r7]
   1390c:	ldr	r1, [r7, #40]	; 0x28
   13910:	ldr	r2, [r7, #44]	; 0x2c
   13914:	stm	sp, {r0, r8}
   13918:	ldr	r0, [sp, #20]
   1391c:	add	r3, sp, #8
   13920:	stm	r3, {r0, r1, r2}
   13924:	mov	r0, r4
   13928:	mov	r1, r6
   1392c:	ldr	r2, [sp, #32]
   13930:	ldr	r3, [sp, #36]	; 0x24
   13934:	bl	12624 <__assert_fail@plt+0x1624>
   13938:	ldr	r0, [sp, #28]
   1393c:	ldr	r1, [sp, #24]
   13940:	str	r1, [r0]
   13944:	mov	r0, r4
   13948:	sub	sp, fp, #28
   1394c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13950:	bl	10fe8 <abort@plt>
   13954:	movw	r3, #24944	; 0x6170
   13958:	movt	r3, #2
   1395c:	b	137c0 <__assert_fail@plt+0x27c0>
   13960:	mov	r1, r0
   13964:	mov	r0, #0
   13968:	b	137b0 <__assert_fail@plt+0x27b0>
   1396c:	mov	r2, r1
   13970:	mov	r1, r0
   13974:	mov	r0, #0
   13978:	b	13954 <__assert_fail@plt+0x2954>
   1397c:	push	{r4, r5, r6, sl, fp, lr}
   13980:	add	fp, sp, #16
   13984:	sub	sp, sp, #48	; 0x30
   13988:	mov	r4, r2
   1398c:	mov	r5, r0
   13990:	mov	r6, sp
   13994:	mov	r0, r6
   13998:	bl	139b8 <__assert_fail@plt+0x29b8>
   1399c:	mov	r0, r5
   139a0:	mov	r1, r4
   139a4:	mvn	r2, #0
   139a8:	mov	r3, r6
   139ac:	bl	137c0 <__assert_fail@plt+0x27c0>
   139b0:	sub	sp, fp, #16
   139b4:	pop	{r4, r5, r6, sl, fp, pc}
   139b8:	vmov.i32	q8, #0	; 0x00000000
   139bc:	mov	r2, #32
   139c0:	mov	r3, r0
   139c4:	vst1.32	{d16-d17}, [r3], r2
   139c8:	vst1.32	{d16-d17}, [r3]
   139cc:	add	r2, r0, #16
   139d0:	vst1.32	{d16-d17}, [r2]
   139d4:	cmp	r1, #10
   139d8:	strne	r1, [r0]
   139dc:	bxne	lr
   139e0:	push	{fp, lr}
   139e4:	mov	fp, sp
   139e8:	bl	10fe8 <abort@plt>
   139ec:	push	{r4, r5, r6, r7, fp, lr}
   139f0:	add	fp, sp, #16
   139f4:	sub	sp, sp, #48	; 0x30
   139f8:	mov	r4, r3
   139fc:	mov	r5, r2
   13a00:	mov	r6, r0
   13a04:	mov	r7, sp
   13a08:	mov	r0, r7
   13a0c:	bl	139b8 <__assert_fail@plt+0x29b8>
   13a10:	mov	r0, r6
   13a14:	mov	r1, r5
   13a18:	mov	r2, r4
   13a1c:	mov	r3, r7
   13a20:	bl	137c0 <__assert_fail@plt+0x27c0>
   13a24:	sub	sp, fp, #16
   13a28:	pop	{r4, r5, r6, r7, fp, pc}
   13a2c:	mov	r2, r1
   13a30:	mov	r1, r0
   13a34:	mov	r0, #0
   13a38:	b	1397c <__assert_fail@plt+0x297c>
   13a3c:	mov	r3, r2
   13a40:	mov	r2, r1
   13a44:	mov	r1, r0
   13a48:	mov	r0, #0
   13a4c:	b	139ec <__assert_fail@plt+0x29ec>
   13a50:	push	{r4, r5, r6, sl, fp, lr}
   13a54:	add	fp, sp, #16
   13a58:	sub	sp, sp, #48	; 0x30
   13a5c:	mov	r4, r1
   13a60:	mov	r5, r0
   13a64:	mov	r0, #32
   13a68:	movw	r1, #24944	; 0x6170
   13a6c:	movt	r1, #2
   13a70:	add	r3, r1, #16
   13a74:	vld1.64	{d16-d17}, [r1], r0
   13a78:	mov	r6, sp
   13a7c:	vld1.64	{d18-d19}, [r3]
   13a80:	add	r3, r6, #16
   13a84:	vld1.64	{d20-d21}, [r1]
   13a88:	vst1.64	{d18-d19}, [r3]
   13a8c:	mov	r1, r6
   13a90:	vst1.64	{d16-d17}, [r1], r0
   13a94:	vst1.64	{d20-d21}, [r1]
   13a98:	mov	r0, r6
   13a9c:	mov	r1, r2
   13aa0:	mov	r2, #1
   13aa4:	bl	12518 <__assert_fail@plt+0x1518>
   13aa8:	mov	r0, #0
   13aac:	mov	r1, r5
   13ab0:	mov	r2, r4
   13ab4:	mov	r3, r6
   13ab8:	bl	137c0 <__assert_fail@plt+0x27c0>
   13abc:	sub	sp, fp, #16
   13ac0:	pop	{r4, r5, r6, sl, fp, pc}
   13ac4:	mov	r2, r1
   13ac8:	mvn	r1, #0
   13acc:	b	13a50 <__assert_fail@plt+0x2a50>
   13ad0:	mov	r1, #58	; 0x3a
   13ad4:	b	13ac4 <__assert_fail@plt+0x2ac4>
   13ad8:	mov	r2, #58	; 0x3a
   13adc:	b	13a50 <__assert_fail@plt+0x2a50>
   13ae0:	push	{r4, r5, r6, sl, fp, lr}
   13ae4:	add	fp, sp, #16
   13ae8:	sub	sp, sp, #48	; 0x30
   13aec:	mov	r4, r2
   13af0:	mov	r5, r0
   13af4:	mov	r6, sp
   13af8:	mov	r0, r6
   13afc:	bl	139b8 <__assert_fail@plt+0x29b8>
   13b00:	mov	r0, r6
   13b04:	mov	r1, #58	; 0x3a
   13b08:	mov	r2, #1
   13b0c:	bl	12518 <__assert_fail@plt+0x1518>
   13b10:	mov	r0, r5
   13b14:	mov	r1, r4
   13b18:	mvn	r2, #0
   13b1c:	mov	r3, r6
   13b20:	bl	137c0 <__assert_fail@plt+0x27c0>
   13b24:	sub	sp, fp, #16
   13b28:	pop	{r4, r5, r6, sl, fp, pc}
   13b2c:	push	{fp, lr}
   13b30:	mov	fp, sp
   13b34:	sub	sp, sp, #8
   13b38:	mvn	ip, #0
   13b3c:	str	ip, [sp]
   13b40:	bl	13b4c <__assert_fail@plt+0x2b4c>
   13b44:	mov	sp, fp
   13b48:	pop	{fp, pc}
   13b4c:	push	{r4, r5, r6, r7, fp, lr}
   13b50:	add	fp, sp, #16
   13b54:	sub	sp, sp, #48	; 0x30
   13b58:	mov	r7, r3
   13b5c:	mov	r5, r0
   13b60:	mov	r0, #32
   13b64:	movw	r3, #24944	; 0x6170
   13b68:	movt	r3, #2
   13b6c:	add	r4, r3, #16
   13b70:	vld1.64	{d16-d17}, [r3], r0
   13b74:	mov	r6, sp
   13b78:	vld1.64	{d18-d19}, [r4]
   13b7c:	add	r4, r6, #16
   13b80:	vld1.64	{d20-d21}, [r3]
   13b84:	vst1.64	{d18-d19}, [r4]
   13b88:	mov	r3, r6
   13b8c:	vst1.64	{d16-d17}, [r3], r0
   13b90:	vst1.64	{d20-d21}, [r3]
   13b94:	mov	r0, r6
   13b98:	bl	12570 <__assert_fail@plt+0x1570>
   13b9c:	ldr	r2, [fp, #8]
   13ba0:	mov	r0, r5
   13ba4:	mov	r1, r7
   13ba8:	mov	r3, r6
   13bac:	bl	137c0 <__assert_fail@plt+0x27c0>
   13bb0:	sub	sp, fp, #16
   13bb4:	pop	{r4, r5, r6, r7, fp, pc}
   13bb8:	mov	r3, r2
   13bbc:	mov	r2, r1
   13bc0:	mov	r1, r0
   13bc4:	mov	r0, #0
   13bc8:	b	13b2c <__assert_fail@plt+0x2b2c>
   13bcc:	push	{fp, lr}
   13bd0:	mov	fp, sp
   13bd4:	sub	sp, sp, #8
   13bd8:	mov	ip, r2
   13bdc:	mov	r2, r1
   13be0:	mov	r1, r0
   13be4:	str	r3, [sp]
   13be8:	mov	r0, #0
   13bec:	mov	r3, ip
   13bf0:	bl	13b4c <__assert_fail@plt+0x2b4c>
   13bf4:	mov	sp, fp
   13bf8:	pop	{fp, pc}
   13bfc:	movw	r3, #24824	; 0x60f8
   13c00:	movt	r3, #2
   13c04:	b	137c0 <__assert_fail@plt+0x27c0>
   13c08:	mov	r2, r1
   13c0c:	mov	r1, r0
   13c10:	mov	r0, #0
   13c14:	b	13bfc <__assert_fail@plt+0x2bfc>
   13c18:	mvn	r2, #0
   13c1c:	b	13bfc <__assert_fail@plt+0x2bfc>
   13c20:	mov	r1, r0
   13c24:	mov	r0, #0
   13c28:	b	13c18 <__assert_fail@plt+0x2c18>
   13c2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c30:	add	fp, sp, #24
   13c34:	sub	sp, sp, #16
   13c38:	mov	r4, r1
   13c3c:	mov	r5, r0
   13c40:	mov	r7, #0
   13c44:	mov	r0, #0
   13c48:	mov	r1, r5
   13c4c:	mov	r2, #5
   13c50:	bl	10e38 <dcgettext@plt>
   13c54:	cmp	r0, r5
   13c58:	beq	13c64 <__assert_fail@plt+0x2c64>
   13c5c:	sub	sp, fp, #24
   13c60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c64:	bl	15098 <__assert_fail@plt+0x4098>
   13c68:	mov	r6, r0
   13c6c:	mov	r8, #56	; 0x38
   13c70:	mov	r0, #45	; 0x2d
   13c74:	stm	sp, {r0, r8}
   13c78:	str	r7, [sp, #8]
   13c7c:	str	r7, [sp, #12]
   13c80:	mov	r0, r6
   13c84:	mov	r1, #85	; 0x55
   13c88:	mov	r2, #84	; 0x54
   13c8c:	mov	r3, #70	; 0x46
   13c90:	bl	13d28 <__assert_fail@plt+0x2d28>
   13c94:	cmp	r0, #0
   13c98:	beq	13cb4 <__assert_fail@plt+0x2cb4>
   13c9c:	ldrb	r1, [r5]
   13ca0:	movw	r2, #22546	; 0x5812
   13ca4:	movt	r2, #1
   13ca8:	movw	r0, #22550	; 0x5816
   13cac:	movt	r0, #1
   13cb0:	b	13cf8 <__assert_fail@plt+0x2cf8>
   13cb4:	mov	r0, #48	; 0x30
   13cb8:	mov	r1, #51	; 0x33
   13cbc:	str	r8, [sp]
   13cc0:	stmib	sp, {r0, r1}
   13cc4:	str	r0, [sp, #12]
   13cc8:	mov	r0, r6
   13ccc:	mov	r1, #71	; 0x47
   13cd0:	mov	r2, #66	; 0x42
   13cd4:	mov	r3, #49	; 0x31
   13cd8:	bl	13d28 <__assert_fail@plt+0x2d28>
   13cdc:	cmp	r0, #0
   13ce0:	beq	13d08 <__assert_fail@plt+0x2d08>
   13ce4:	ldrb	r1, [r5]
   13ce8:	movw	r2, #22554	; 0x581a
   13cec:	movt	r2, #1
   13cf0:	movw	r0, #22558	; 0x581e
   13cf4:	movt	r0, #1
   13cf8:	cmp	r1, #96	; 0x60
   13cfc:	moveq	r0, r2
   13d00:	sub	sp, fp, #24
   13d04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d08:	movw	r1, #22540	; 0x580c
   13d0c:	movt	r1, #1
   13d10:	movw	r0, #22544	; 0x5810
   13d14:	movt	r0, #1
   13d18:	cmp	r4, #9
   13d1c:	moveq	r0, r1
   13d20:	sub	sp, fp, #24
   13d24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d28:	push	{r4, r5, r6, r7, fp, lr}
   13d2c:	add	fp, sp, #16
   13d30:	sub	sp, sp, #16
   13d34:	mov	r4, r3
   13d38:	mov	r5, r2
   13d3c:	mov	r7, r1
   13d40:	mov	r6, r0
   13d44:	mov	r0, r1
   13d48:	bl	14f28 <__assert_fail@plt+0x3f28>
   13d4c:	ldrb	r1, [r6]
   13d50:	cmp	r0, #0
   13d54:	andne	r1, r1, #223	; 0xdf
   13d58:	mov	r0, #0
   13d5c:	cmp	r1, r7
   13d60:	bne	13da0 <__assert_fail@plt+0x2da0>
   13d64:	cmp	r7, #0
   13d68:	moveq	r0, #1
   13d6c:	subeq	sp, fp, #16
   13d70:	popeq	{r4, r5, r6, r7, fp, pc}
   13d74:	ldr	r0, [fp, #20]
   13d78:	ldr	r1, [fp, #16]
   13d7c:	ldr	r2, [fp, #12]
   13d80:	ldr	r3, [fp, #8]
   13d84:	str	r2, [sp]
   13d88:	str	r1, [sp, #4]
   13d8c:	str	r0, [sp, #8]
   13d90:	mov	r0, r6
   13d94:	mov	r1, r5
   13d98:	mov	r2, r4
   13d9c:	bl	13da8 <__assert_fail@plt+0x2da8>
   13da0:	sub	sp, fp, #16
   13da4:	pop	{r4, r5, r6, r7, fp, pc}
   13da8:	push	{r4, r5, r6, r7, fp, lr}
   13dac:	add	fp, sp, #16
   13db0:	sub	sp, sp, #8
   13db4:	mov	r4, r3
   13db8:	mov	r5, r2
   13dbc:	mov	r7, r1
   13dc0:	mov	r6, r0
   13dc4:	mov	r0, r1
   13dc8:	bl	14f28 <__assert_fail@plt+0x3f28>
   13dcc:	ldrb	r1, [r6, #1]
   13dd0:	cmp	r0, #0
   13dd4:	andne	r1, r1, #223	; 0xdf
   13dd8:	mov	r0, #0
   13ddc:	cmp	r1, r7
   13de0:	bne	13e18 <__assert_fail@plt+0x2e18>
   13de4:	cmp	r7, #0
   13de8:	moveq	r0, #1
   13dec:	subeq	sp, fp, #16
   13df0:	popeq	{r4, r5, r6, r7, fp, pc}
   13df4:	ldr	r0, [fp, #16]
   13df8:	ldr	r1, [fp, #12]
   13dfc:	ldr	r3, [fp, #8]
   13e00:	str	r1, [sp]
   13e04:	str	r0, [sp, #4]
   13e08:	mov	r0, r6
   13e0c:	mov	r1, r5
   13e10:	mov	r2, r4
   13e14:	bl	13e20 <__assert_fail@plt+0x2e20>
   13e18:	sub	sp, fp, #16
   13e1c:	pop	{r4, r5, r6, r7, fp, pc}
   13e20:	push	{r4, r5, r6, r7, fp, lr}
   13e24:	add	fp, sp, #16
   13e28:	sub	sp, sp, #8
   13e2c:	mov	r4, r3
   13e30:	mov	r5, r2
   13e34:	mov	r7, r1
   13e38:	mov	r6, r0
   13e3c:	mov	r0, r1
   13e40:	bl	14f28 <__assert_fail@plt+0x3f28>
   13e44:	ldrb	r1, [r6, #2]
   13e48:	cmp	r0, #0
   13e4c:	andne	r1, r1, #223	; 0xdf
   13e50:	mov	r0, #0
   13e54:	cmp	r1, r7
   13e58:	bne	13e88 <__assert_fail@plt+0x2e88>
   13e5c:	cmp	r7, #0
   13e60:	moveq	r0, #1
   13e64:	subeq	sp, fp, #16
   13e68:	popeq	{r4, r5, r6, r7, fp, pc}
   13e6c:	ldr	r0, [fp, #12]
   13e70:	ldr	r3, [fp, #8]
   13e74:	str	r0, [sp]
   13e78:	mov	r0, r6
   13e7c:	mov	r1, r5
   13e80:	mov	r2, r4
   13e84:	bl	13e90 <__assert_fail@plt+0x2e90>
   13e88:	sub	sp, fp, #16
   13e8c:	pop	{r4, r5, r6, r7, fp, pc}
   13e90:	push	{r4, r5, r6, r7, fp, lr}
   13e94:	add	fp, sp, #16
   13e98:	mov	r4, r3
   13e9c:	mov	r5, r2
   13ea0:	mov	r7, r1
   13ea4:	mov	r6, r0
   13ea8:	mov	r0, r1
   13eac:	bl	14f28 <__assert_fail@plt+0x3f28>
   13eb0:	ldrb	r1, [r6, #3]
   13eb4:	ldr	r3, [fp, #8]
   13eb8:	cmp	r0, #0
   13ebc:	andne	r1, r1, #223	; 0xdf
   13ec0:	mov	r0, #0
   13ec4:	cmp	r1, r7
   13ec8:	popne	{r4, r5, r6, r7, fp, pc}
   13ecc:	cmp	r7, #0
   13ed0:	beq	13ee8 <__assert_fail@plt+0x2ee8>
   13ed4:	mov	r0, r6
   13ed8:	mov	r1, r5
   13edc:	mov	r2, r4
   13ee0:	pop	{r4, r5, r6, r7, fp, lr}
   13ee4:	b	13ef0 <__assert_fail@plt+0x2ef0>
   13ee8:	mov	r0, #1
   13eec:	pop	{r4, r5, r6, r7, fp, pc}
   13ef0:	push	{r4, r5, r6, r7, fp, lr}
   13ef4:	add	fp, sp, #16
   13ef8:	mov	r4, r3
   13efc:	mov	r5, r2
   13f00:	mov	r7, r1
   13f04:	mov	r6, r0
   13f08:	mov	r0, r1
   13f0c:	bl	14f28 <__assert_fail@plt+0x3f28>
   13f10:	ldrb	r1, [r6, #4]
   13f14:	cmp	r0, #0
   13f18:	andne	r1, r1, #223	; 0xdf
   13f1c:	mov	r0, #0
   13f20:	cmp	r1, r7
   13f24:	popne	{r4, r5, r6, r7, fp, pc}
   13f28:	cmp	r7, #0
   13f2c:	beq	13f44 <__assert_fail@plt+0x2f44>
   13f30:	mov	r0, r6
   13f34:	mov	r1, r5
   13f38:	mov	r2, r4
   13f3c:	pop	{r4, r5, r6, r7, fp, lr}
   13f40:	b	13f4c <__assert_fail@plt+0x2f4c>
   13f44:	mov	r0, #1
   13f48:	pop	{r4, r5, r6, r7, fp, pc}
   13f4c:	push	{r4, r5, r6, sl, fp, lr}
   13f50:	add	fp, sp, #16
   13f54:	mov	r4, r2
   13f58:	mov	r6, r1
   13f5c:	mov	r5, r0
   13f60:	mov	r0, r1
   13f64:	bl	14f28 <__assert_fail@plt+0x3f28>
   13f68:	ldrb	r1, [r5, #5]
   13f6c:	cmp	r0, #0
   13f70:	andne	r1, r1, #223	; 0xdf
   13f74:	mov	r0, #0
   13f78:	cmp	r1, r6
   13f7c:	popne	{r4, r5, r6, sl, fp, pc}
   13f80:	cmp	r6, #0
   13f84:	beq	13f98 <__assert_fail@plt+0x2f98>
   13f88:	mov	r0, r5
   13f8c:	mov	r1, r4
   13f90:	pop	{r4, r5, r6, sl, fp, lr}
   13f94:	b	13fa0 <__assert_fail@plt+0x2fa0>
   13f98:	mov	r0, #1
   13f9c:	pop	{r4, r5, r6, sl, fp, pc}
   13fa0:	push	{r4, r5, fp, lr}
   13fa4:	add	fp, sp, #8
   13fa8:	mov	r5, r1
   13fac:	mov	r4, r0
   13fb0:	mov	r0, r1
   13fb4:	bl	14f28 <__assert_fail@plt+0x3f28>
   13fb8:	ldrb	r1, [r4, #6]
   13fbc:	cmp	r0, #0
   13fc0:	andne	r1, r1, #223	; 0xdf
   13fc4:	mov	r0, #0
   13fc8:	cmp	r1, r5
   13fcc:	popne	{r4, r5, fp, pc}
   13fd0:	cmp	r5, #0
   13fd4:	beq	13fe4 <__assert_fail@plt+0x2fe4>
   13fd8:	mov	r0, r4
   13fdc:	pop	{r4, r5, fp, lr}
   13fe0:	b	13fec <__assert_fail@plt+0x2fec>
   13fe4:	mov	r0, #1
   13fe8:	pop	{r4, r5, fp, pc}
   13fec:	push	{r4, sl, fp, lr}
   13ff0:	add	fp, sp, #8
   13ff4:	mov	r4, r0
   13ff8:	mov	r0, #0
   13ffc:	bl	14f28 <__assert_fail@plt+0x3f28>
   14000:	ldrb	r1, [r4, #7]
   14004:	cmp	r0, #0
   14008:	beq	14020 <__assert_fail@plt+0x3020>
   1400c:	tst	r1, #223	; 0xdf
   14010:	moveq	r0, #1
   14014:	popeq	{r4, sl, fp, pc}
   14018:	mov	r0, #0
   1401c:	pop	{r4, sl, fp, pc}
   14020:	cmp	r1, #0
   14024:	moveq	r0, #1
   14028:	popeq	{r4, sl, fp, pc}
   1402c:	mov	r0, #0
   14030:	pop	{r4, sl, fp, pc}
   14034:	mov	r1, #0
   14038:	str	r1, [r0]
   1403c:	str	r1, [r0, #4]
   14040:	bx	lr
   14044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14048:	add	fp, sp, #28
   1404c:	sub	sp, sp, #52	; 0x34
   14050:	mov	r8, r3
   14054:	mov	r5, r0
   14058:	vmov.i32	q8, #0	; 0x00000000
   1405c:	add	r0, sp, #16
   14060:	vst1.64	{d16-d17}, [r0]!
   14064:	vst1.64	{d16-d17}, [r0]
   14068:	cmp	r2, #0
   1406c:	beq	14090 <__assert_fail@plt+0x3090>
   14070:	mov	r4, r2
   14074:	mov	r6, r1
   14078:	add	r7, sp, #16
   1407c:	ldrb	r0, [r6], #1
   14080:	mov	r1, r7
   14084:	bl	14180 <__assert_fail@plt+0x3180>
   14088:	subs	r4, r4, #1
   1408c:	bne	1407c <__assert_fail@plt+0x307c>
   14090:	mov	r0, r5
   14094:	bl	10e2c <getc_unlocked@plt>
   14098:	mov	r6, r0
   1409c:	cmp	r0, #0
   140a0:	blt	140d0 <__assert_fail@plt+0x30d0>
   140a4:	add	r4, sp, #16
   140a8:	mov	r0, r6
   140ac:	mov	r1, r4
   140b0:	bl	1419c <__assert_fail@plt+0x319c>
   140b4:	cmp	r0, #0
   140b8:	beq	140d0 <__assert_fail@plt+0x30d0>
   140bc:	mov	r0, r5
   140c0:	bl	10e2c <getc_unlocked@plt>
   140c4:	mov	r6, r0
   140c8:	cmn	r0, #1
   140cc:	bgt	140a8 <__assert_fail@plt+0x30a8>
   140d0:	ldm	r8, {r0, r7}
   140d4:	str	r0, [sp, #12]
   140d8:	cmp	r6, #0
   140dc:	blt	14170 <__assert_fail@plt+0x3170>
   140e0:	str	r8, [sp, #8]
   140e4:	mov	r8, #0
   140e8:	add	r9, sp, #12
   140ec:	add	sl, sp, #16
   140f0:	mov	r4, #0
   140f4:	b	14110 <__assert_fail@plt+0x3110>
   140f8:	strb	r6, [r7, r4]
   140fc:	add	r4, r4, #1
   14100:	mov	r0, r5
   14104:	bl	10e2c <getc_unlocked@plt>
   14108:	mov	r6, r0
   1410c:	lsr	r8, r0, #31
   14110:	ldr	r0, [sp, #12]
   14114:	cmp	r4, r0
   14118:	bne	1413c <__assert_fail@plt+0x313c>
   1411c:	mov	r0, #1
   14120:	str	r0, [sp]
   14124:	mov	r0, r7
   14128:	mov	r1, r9
   1412c:	mov	r2, #1
   14130:	mvn	r3, #0
   14134:	bl	148cc <__assert_fail@plt+0x38cc>
   14138:	mov	r7, r0
   1413c:	tst	r8, #1
   14140:	bne	14158 <__assert_fail@plt+0x3158>
   14144:	mov	r0, r6
   14148:	mov	r1, sl
   1414c:	bl	1419c <__assert_fail@plt+0x319c>
   14150:	cmp	r0, #0
   14154:	beq	140f8 <__assert_fail@plt+0x30f8>
   14158:	mov	r0, #0
   1415c:	strb	r0, [r7, r4]
   14160:	ldr	r0, [sp, #12]
   14164:	ldr	r1, [sp, #8]
   14168:	stm	r1, {r0, r7}
   1416c:	b	14174 <__assert_fail@plt+0x3174>
   14170:	mvn	r4, #0
   14174:	mov	r0, r4
   14178:	sub	sp, fp, #28
   1417c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14180:	lsr	r2, r0, #5
   14184:	ldr	ip, [r1, r2, lsl #2]
   14188:	and	r0, r0, #31
   1418c:	mov	r3, #1
   14190:	orr	r0, ip, r3, lsl r0
   14194:	str	r0, [r1, r2, lsl #2]
   14198:	bx	lr
   1419c:	lsr	r2, r0, #5
   141a0:	ldr	r1, [r1, r2, lsl #2]
   141a4:	and	r0, r0, #31
   141a8:	mov	r2, #1
   141ac:	and	r0, r1, r2, lsl r0
   141b0:	cmp	r0, #0
   141b4:	movwne	r0, #1
   141b8:	bx	lr
   141bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141c0:	add	fp, sp, #28
   141c4:	sub	sp, sp, #28
   141c8:	str	r3, [sp, #12]
   141cc:	str	r2, [sp, #8]
   141d0:	mov	r6, r0
   141d4:	add	r4, r1, #1
   141d8:	cmp	r1, #0
   141dc:	movweq	r4, #64	; 0x40
   141e0:	str	r4, [sp, #16]
   141e4:	mov	r0, r4
   141e8:	mov	r1, #4
   141ec:	bl	14844 <__assert_fail@plt+0x3844>
   141f0:	mov	r5, r0
   141f4:	mov	r0, r4
   141f8:	mov	r1, #4
   141fc:	bl	14844 <__assert_fail@plt+0x3844>
   14200:	mov	r4, r0
   14204:	add	r0, sp, #20
   14208:	bl	14034 <__assert_fail@plt+0x3034>
   1420c:	mov	r7, #0
   14210:	b	14240 <__assert_fail@plt+0x3240>
   14214:	add	r8, sl, #1
   14218:	mov	r0, r8
   1421c:	mov	r1, #1
   14220:	bl	14844 <__assert_fail@plt+0x3844>
   14224:	mov	r9, r0
   14228:	str	sl, [r4, r7, lsl #2]
   1422c:	ldr	r1, [sp, #24]
   14230:	mov	r2, r8
   14234:	bl	10e08 <memcpy@plt>
   14238:	str	r9, [r5, r7, lsl #2]
   1423c:	add	r7, r7, #1
   14240:	mov	r0, r6
   14244:	ldr	r1, [sp, #8]
   14248:	ldr	r2, [sp, #12]
   1424c:	add	r3, sp, #20
   14250:	bl	14044 <__assert_fail@plt+0x3044>
   14254:	mov	sl, r0
   14258:	ldr	r0, [sp, #16]
   1425c:	cmp	r7, r0
   14260:	blt	14298 <__assert_fail@plt+0x3298>
   14264:	mov	r0, #4
   14268:	str	r0, [sp]
   1426c:	mov	r0, r5
   14270:	add	r1, sp, #16
   14274:	mov	r2, #1
   14278:	mvn	r3, #0
   1427c:	bl	148cc <__assert_fail@plt+0x38cc>
   14280:	mov	r5, r0
   14284:	ldr	r1, [sp, #16]
   14288:	mov	r0, r4
   1428c:	mov	r2, #4
   14290:	bl	1476c <__assert_fail@plt+0x376c>
   14294:	mov	r4, r0
   14298:	cmn	sl, #1
   1429c:	bne	14214 <__assert_fail@plt+0x3214>
   142a0:	mov	r0, #0
   142a4:	str	r0, [r5, r7, lsl #2]
   142a8:	str	r0, [r4, r7, lsl #2]
   142ac:	ldr	r0, [sp, #24]
   142b0:	bl	15020 <__assert_fail@plt+0x4020>
   142b4:	ldr	r0, [fp, #8]
   142b8:	str	r5, [r0]
   142bc:	ldr	r0, [fp, #12]
   142c0:	cmp	r0, #0
   142c4:	beq	142d0 <__assert_fail@plt+0x32d0>
   142c8:	str	r4, [r0]
   142cc:	b	142d8 <__assert_fail@plt+0x32d8>
   142d0:	mov	r0, r4
   142d4:	bl	15020 <__assert_fail@plt+0x4020>
   142d8:	mov	r0, r7
   142dc:	sub	sp, fp, #28
   142e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142e8:	add	fp, sp, #24
   142ec:	sub	sp, sp, #32
   142f0:	mov	r4, r2
   142f4:	mov	r8, r0
   142f8:	ldr	r6, [fp, #12]
   142fc:	ldr	r7, [fp, #8]
   14300:	cmp	r1, #0
   14304:	beq	1432c <__assert_fail@plt+0x332c>
   14308:	mov	r5, r1
   1430c:	str	r4, [sp]
   14310:	str	r3, [sp, #4]
   14314:	movw	r2, #22648	; 0x5878
   14318:	movt	r2, #1
   1431c:	mov	r0, r8
   14320:	mov	r1, #1
   14324:	mov	r3, r5
   14328:	b	14344 <__assert_fail@plt+0x3344>
   1432c:	str	r3, [sp]
   14330:	movw	r2, #22660	; 0x5884
   14334:	movt	r2, #1
   14338:	mov	r0, r8
   1433c:	mov	r1, #1
   14340:	mov	r3, r4
   14344:	bl	10f88 <__fprintf_chk@plt>
   14348:	movw	r1, #22667	; 0x588b
   1434c:	movt	r1, #1
   14350:	mov	r0, #0
   14354:	mov	r2, #5
   14358:	bl	10e38 <dcgettext@plt>
   1435c:	mov	r3, r0
   14360:	movw	r0, #2022	; 0x7e6
   14364:	str	r0, [sp]
   14368:	movw	r2, #23385	; 0x5b59
   1436c:	movt	r2, #1
   14370:	mov	r0, r8
   14374:	mov	r1, #1
   14378:	bl	10f88 <__fprintf_chk@plt>
   1437c:	movw	r4, #21934	; 0x55ae
   14380:	movt	r4, #1
   14384:	mov	r0, r4
   14388:	mov	r1, r8
   1438c:	bl	10dc0 <fputs_unlocked@plt>
   14390:	movw	r1, #22671	; 0x588f
   14394:	movt	r1, #1
   14398:	mov	r0, #0
   1439c:	mov	r2, #5
   143a0:	bl	10e38 <dcgettext@plt>
   143a4:	mov	r2, r0
   143a8:	movw	r3, #22842	; 0x593a
   143ac:	movt	r3, #1
   143b0:	mov	r0, r8
   143b4:	mov	r1, #1
   143b8:	bl	10f88 <__fprintf_chk@plt>
   143bc:	mov	r0, r4
   143c0:	mov	r1, r8
   143c4:	bl	10dc0 <fputs_unlocked@plt>
   143c8:	cmp	r6, #9
   143cc:	bhi	14408 <__assert_fail@plt+0x3408>
   143d0:	add	r0, pc, #0
   143d4:	ldr	pc, [r0, r6, lsl #2]
   143d8:	andeq	r4, r1, r0, lsl #8
   143dc:	andeq	r4, r1, r4, lsl r4
   143e0:	andeq	r4, r1, r4, asr #8
   143e4:	andeq	r4, r1, ip, ror #8
   143e8:	muleq	r1, r4, r4
   143ec:			; <UNDEFINED> instruction: 0x000144bc
   143f0:	andeq	r4, r1, r4, ror #9
   143f4:	andeq	r4, r1, ip, lsl r5
   143f8:			; <UNDEFINED> instruction: 0x000145bc
   143fc:	andeq	r4, r1, r4, ror #10
   14400:	sub	sp, fp, #24
   14404:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14408:	movw	r1, #23195	; 0x5a9b
   1440c:	movt	r1, #1
   14410:	b	1456c <__assert_fail@plt+0x356c>
   14414:	movw	r1, #22876	; 0x595c
   14418:	movt	r1, #1
   1441c:	mov	r0, #0
   14420:	mov	r2, #5
   14424:	bl	10e38 <dcgettext@plt>
   14428:	mov	r2, r0
   1442c:	ldr	r3, [r7]
   14430:	mov	r0, r8
   14434:	mov	r1, #1
   14438:	sub	sp, fp, #24
   1443c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14440:	b	10f88 <__fprintf_chk@plt>
   14444:	movw	r1, #22892	; 0x596c
   14448:	movt	r1, #1
   1444c:	mov	r0, #0
   14450:	mov	r2, #5
   14454:	bl	10e38 <dcgettext@plt>
   14458:	mov	r2, r0
   1445c:	ldr	r3, [r7]
   14460:	ldr	r0, [r7, #4]
   14464:	str	r0, [sp]
   14468:	b	14558 <__assert_fail@plt+0x3558>
   1446c:	movw	r1, #22915	; 0x5983
   14470:	movt	r1, #1
   14474:	mov	r0, #0
   14478:	mov	r2, #5
   1447c:	bl	10e38 <dcgettext@plt>
   14480:	mov	r2, r0
   14484:	ldr	r3, [r7]
   14488:	ldmib	r7, {r0, r1}
   1448c:	stm	sp, {r0, r1}
   14490:	b	14558 <__assert_fail@plt+0x3558>
   14494:	movw	r1, #22943	; 0x599f
   14498:	movt	r1, #1
   1449c:	mov	r0, #0
   144a0:	mov	r2, #5
   144a4:	bl	10e38 <dcgettext@plt>
   144a8:	mov	r2, r0
   144ac:	ldr	r3, [r7]
   144b0:	ldmib	r7, {r0, r1, r7}
   144b4:	stm	sp, {r0, r1, r7}
   144b8:	b	14558 <__assert_fail@plt+0x3558>
   144bc:	movw	r1, #22975	; 0x59bf
   144c0:	movt	r1, #1
   144c4:	mov	r0, #0
   144c8:	mov	r2, #5
   144cc:	bl	10e38 <dcgettext@plt>
   144d0:	mov	r2, r0
   144d4:	ldr	r3, [r7]
   144d8:	ldmib	r7, {r0, r1, r6, r7}
   144dc:	stm	sp, {r0, r1, r6, r7}
   144e0:	b	14558 <__assert_fail@plt+0x3558>
   144e4:	movw	r1, #23011	; 0x59e3
   144e8:	movt	r1, #1
   144ec:	mov	r0, #0
   144f0:	mov	r2, #5
   144f4:	bl	10e38 <dcgettext@plt>
   144f8:	mov	r2, r0
   144fc:	ldr	r3, [r7]
   14500:	ldmib	r7, {r0, r1, r6}
   14504:	ldr	r5, [r7, #16]
   14508:	ldr	r7, [r7, #20]
   1450c:	stm	sp, {r0, r1, r6}
   14510:	str	r5, [sp, #12]
   14514:	str	r7, [sp, #16]
   14518:	b	14558 <__assert_fail@plt+0x3558>
   1451c:	movw	r1, #23051	; 0x5a0b
   14520:	movt	r1, #1
   14524:	mov	r0, #0
   14528:	mov	r2, #5
   1452c:	bl	10e38 <dcgettext@plt>
   14530:	mov	r2, r0
   14534:	ldr	r3, [r7]
   14538:	ldmib	r7, {r0, r1, r6}
   1453c:	ldr	r5, [r7, #16]
   14540:	ldr	r4, [r7, #20]
   14544:	ldr	r7, [r7, #24]
   14548:	stm	sp, {r0, r1, r6}
   1454c:	str	r5, [sp, #12]
   14550:	str	r4, [sp, #16]
   14554:	str	r7, [sp, #20]
   14558:	mov	r0, r8
   1455c:	mov	r1, #1
   14560:	b	1460c <__assert_fail@plt+0x360c>
   14564:	movw	r1, #23143	; 0x5a67
   14568:	movt	r1, #1
   1456c:	mov	r0, #0
   14570:	mov	r2, #5
   14574:	bl	10e38 <dcgettext@plt>
   14578:	mov	ip, r0
   1457c:	ldr	r3, [r7]
   14580:	ldr	r0, [r7, #4]
   14584:	ldr	r1, [r7, #8]
   14588:	ldr	r6, [r7, #12]
   1458c:	ldr	r5, [r7, #16]
   14590:	ldr	r4, [r7, #20]
   14594:	ldr	r2, [r7, #24]
   14598:	ldr	lr, [r7, #28]
   1459c:	ldr	r7, [r7, #32]
   145a0:	stm	sp, {r0, r1, r6}
   145a4:	str	r5, [sp, #12]
   145a8:	str	r4, [sp, #16]
   145ac:	str	r2, [sp, #20]
   145b0:	str	lr, [sp, #24]
   145b4:	str	r7, [sp, #28]
   145b8:	b	14600 <__assert_fail@plt+0x3600>
   145bc:	movw	r1, #23095	; 0x5a37
   145c0:	movt	r1, #1
   145c4:	mov	r0, #0
   145c8:	mov	r2, #5
   145cc:	bl	10e38 <dcgettext@plt>
   145d0:	mov	ip, r0
   145d4:	ldr	r3, [r7]
   145d8:	ldmib	r7, {r0, r1, r6}
   145dc:	ldr	r5, [r7, #16]
   145e0:	ldr	r4, [r7, #20]
   145e4:	ldr	r2, [r7, #24]
   145e8:	ldr	r7, [r7, #28]
   145ec:	stm	sp, {r0, r1, r6}
   145f0:	str	r5, [sp, #12]
   145f4:	str	r4, [sp, #16]
   145f8:	str	r2, [sp, #20]
   145fc:	str	r7, [sp, #24]
   14600:	mov	r0, r8
   14604:	mov	r1, #1
   14608:	mov	r2, ip
   1460c:	bl	10f88 <__fprintf_chk@plt>
   14610:	sub	sp, fp, #24
   14614:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14618:	push	{r4, sl, fp, lr}
   1461c:	add	fp, sp, #8
   14620:	sub	sp, sp, #8
   14624:	mov	lr, #0
   14628:	ldr	ip, [fp, #8]
   1462c:	ldr	r4, [ip, lr, lsl #2]
   14630:	add	lr, lr, #1
   14634:	cmp	r4, #0
   14638:	bne	1462c <__assert_fail@plt+0x362c>
   1463c:	sub	r4, lr, #1
   14640:	str	ip, [sp]
   14644:	str	r4, [sp, #4]
   14648:	bl	142e4 <__assert_fail@plt+0x32e4>
   1464c:	sub	sp, fp, #8
   14650:	pop	{r4, sl, fp, pc}
   14654:	push	{r4, r5, fp, lr}
   14658:	add	fp, sp, #8
   1465c:	sub	sp, sp, #48	; 0x30
   14660:	mov	ip, #0
   14664:	ldr	r4, [fp, #8]
   14668:	add	lr, sp, #8
   1466c:	ldr	r5, [r4]
   14670:	str	r5, [lr, ip, lsl #2]
   14674:	cmp	r5, #0
   14678:	beq	1468c <__assert_fail@plt+0x368c>
   1467c:	add	ip, ip, #1
   14680:	add	r4, r4, #4
   14684:	cmp	ip, #10
   14688:	bcc	1466c <__assert_fail@plt+0x366c>
   1468c:	str	lr, [sp]
   14690:	str	ip, [sp, #4]
   14694:	bl	142e4 <__assert_fail@plt+0x32e4>
   14698:	sub	sp, fp, #8
   1469c:	pop	{r4, r5, fp, pc}
   146a0:	push	{fp, lr}
   146a4:	mov	fp, sp
   146a8:	sub	sp, sp, #8
   146ac:	add	ip, fp, #8
   146b0:	str	ip, [sp, #4]
   146b4:	str	ip, [sp]
   146b8:	bl	14654 <__assert_fail@plt+0x3654>
   146bc:	mov	sp, fp
   146c0:	pop	{fp, pc}
   146c4:	push	{fp, lr}
   146c8:	mov	fp, sp
   146cc:	movw	r0, #24900	; 0x6144
   146d0:	movt	r0, #2
   146d4:	ldr	r1, [r0]
   146d8:	movw	r0, #21934	; 0x55ae
   146dc:	movt	r0, #1
   146e0:	bl	10dc0 <fputs_unlocked@plt>
   146e4:	movw	r1, #23255	; 0x5ad7
   146e8:	movt	r1, #1
   146ec:	mov	r0, #0
   146f0:	mov	r2, #5
   146f4:	bl	10e38 <dcgettext@plt>
   146f8:	mov	r1, r0
   146fc:	movw	r2, #23275	; 0x5aeb
   14700:	movt	r2, #1
   14704:	mov	r0, #1
   14708:	bl	10f70 <__printf_chk@plt>
   1470c:	movw	r1, #23297	; 0x5b01
   14710:	movt	r1, #1
   14714:	mov	r0, #0
   14718:	mov	r2, #5
   1471c:	bl	10e38 <dcgettext@plt>
   14720:	mov	r1, r0
   14724:	movw	r2, #21520	; 0x5410
   14728:	movt	r2, #1
   1472c:	movw	r3, #21739	; 0x54eb
   14730:	movt	r3, #1
   14734:	mov	r0, #1
   14738:	bl	10f70 <__printf_chk@plt>
   1473c:	movw	r1, #23317	; 0x5b15
   14740:	movt	r1, #1
   14744:	mov	r0, #0
   14748:	mov	r2, #5
   1474c:	bl	10e38 <dcgettext@plt>
   14750:	mov	r1, r0
   14754:	movw	r2, #23356	; 0x5b3c
   14758:	movt	r2, #1
   1475c:	mov	r0, #1
   14760:	pop	{fp, lr}
   14764:	b	10f70 <__printf_chk@plt>
   14768:	b	1476c <__assert_fail@plt+0x376c>
   1476c:	push	{r4, r5, r6, sl, fp, lr}
   14770:	add	fp, sp, #16
   14774:	mov	r4, r2
   14778:	mov	r5, r1
   1477c:	mov	r6, r0
   14780:	bl	15130 <__assert_fail@plt+0x4130>
   14784:	cmp	r0, #0
   14788:	popne	{r4, r5, r6, sl, fp, pc}
   1478c:	cmp	r6, #0
   14790:	beq	147a4 <__assert_fail@plt+0x37a4>
   14794:	cmp	r5, #0
   14798:	cmpne	r4, #0
   1479c:	bne	147a4 <__assert_fail@plt+0x37a4>
   147a0:	pop	{r4, r5, r6, sl, fp, pc}
   147a4:	bl	14b58 <__assert_fail@plt+0x3b58>
   147a8:	push	{fp, lr}
   147ac:	mov	fp, sp
   147b0:	bl	14bf0 <__assert_fail@plt+0x3bf0>
   147b4:	bl	147bc <__assert_fail@plt+0x37bc>
   147b8:	pop	{fp, pc}
   147bc:	cmp	r0, #0
   147c0:	bxne	lr
   147c4:	push	{fp, lr}
   147c8:	mov	fp, sp
   147cc:	bl	14b58 <__assert_fail@plt+0x3b58>
   147d0:	push	{fp, lr}
   147d4:	mov	fp, sp
   147d8:	bl	15064 <__assert_fail@plt+0x4064>
   147dc:	bl	147bc <__assert_fail@plt+0x37bc>
   147e0:	pop	{fp, pc}
   147e4:	b	147a8 <__assert_fail@plt+0x37a8>
   147e8:	push	{r4, r5, fp, lr}
   147ec:	add	fp, sp, #8
   147f0:	mov	r4, r1
   147f4:	mov	r5, r0
   147f8:	bl	14c20 <__assert_fail@plt+0x3c20>
   147fc:	cmp	r0, #0
   14800:	popne	{r4, r5, fp, pc}
   14804:	cmp	r5, #0
   14808:	beq	14818 <__assert_fail@plt+0x3818>
   1480c:	cmp	r4, #0
   14810:	bne	14818 <__assert_fail@plt+0x3818>
   14814:	pop	{r4, r5, fp, pc}
   14818:	bl	14b58 <__assert_fail@plt+0x3b58>
   1481c:	push	{fp, lr}
   14820:	mov	fp, sp
   14824:	bl	15068 <__assert_fail@plt+0x4068>
   14828:	bl	147bc <__assert_fail@plt+0x37bc>
   1482c:	pop	{fp, pc}
   14830:	push	{fp, lr}
   14834:	mov	fp, sp
   14838:	bl	15078 <__assert_fail@plt+0x4078>
   1483c:	bl	147bc <__assert_fail@plt+0x37bc>
   14840:	pop	{fp, pc}
   14844:	push	{fp, lr}
   14848:	mov	fp, sp
   1484c:	mov	r2, r1
   14850:	mov	r1, r0
   14854:	mov	r0, #0
   14858:	bl	1476c <__assert_fail@plt+0x376c>
   1485c:	pop	{fp, pc}
   14860:	mov	r2, r1
   14864:	mov	r1, r0
   14868:	mov	r0, #0
   1486c:	b	14830 <__assert_fail@plt+0x3830>
   14870:	mov	r2, #1
   14874:	b	14878 <__assert_fail@plt+0x3878>
   14878:	push	{r4, r5, fp, lr}
   1487c:	add	fp, sp, #8
   14880:	mov	r4, r1
   14884:	ldr	r5, [r1]
   14888:	cmp	r0, #0
   1488c:	beq	148a4 <__assert_fail@plt+0x38a4>
   14890:	mov	r1, #1
   14894:	add	r1, r1, r5, lsr #1
   14898:	adds	r5, r5, r1
   1489c:	bcc	148bc <__assert_fail@plt+0x38bc>
   148a0:	bl	14b58 <__assert_fail@plt+0x3b58>
   148a4:	cmp	r5, #0
   148a8:	bne	148bc <__assert_fail@plt+0x38bc>
   148ac:	mov	r1, #64	; 0x40
   148b0:	udiv	r5, r1, r2
   148b4:	cmp	r2, #64	; 0x40
   148b8:	addhi	r5, r5, #1
   148bc:	mov	r1, r5
   148c0:	bl	1476c <__assert_fail@plt+0x376c>
   148c4:	str	r5, [r4]
   148c8:	pop	{r4, r5, fp, pc}
   148cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   148d0:	add	fp, sp, #24
   148d4:	mov	r8, r1
   148d8:	ldr	r6, [r1]
   148dc:	add	r1, r6, r6, asr #1
   148e0:	cmp	r1, r6
   148e4:	mvnvs	r1, #-2147483648	; 0x80000000
   148e8:	cmp	r1, r3
   148ec:	mov	r5, r1
   148f0:	movgt	r5, r3
   148f4:	cmn	r3, #1
   148f8:	movle	r5, r1
   148fc:	ldr	r4, [fp, #8]
   14900:	cmn	r4, #1
   14904:	ble	1492c <__assert_fail@plt+0x392c>
   14908:	cmp	r4, #0
   1490c:	beq	14980 <__assert_fail@plt+0x3980>
   14910:	cmn	r5, #1
   14914:	ble	14954 <__assert_fail@plt+0x3954>
   14918:	mvn	r7, #-2147483648	; 0x80000000
   1491c:	udiv	r1, r7, r4
   14920:	cmp	r1, r5
   14924:	bge	14980 <__assert_fail@plt+0x3980>
   14928:	b	14990 <__assert_fail@plt+0x3990>
   1492c:	cmn	r5, #1
   14930:	ble	14970 <__assert_fail@plt+0x3970>
   14934:	cmn	r4, #1
   14938:	beq	14980 <__assert_fail@plt+0x3980>
   1493c:	mov	r1, #-2147483648	; 0x80000000
   14940:	sdiv	r1, r1, r4
   14944:	mvn	r7, #-2147483648	; 0x80000000
   14948:	cmp	r1, r5
   1494c:	bge	14980 <__assert_fail@plt+0x3980>
   14950:	b	14990 <__assert_fail@plt+0x3990>
   14954:	beq	14980 <__assert_fail@plt+0x3980>
   14958:	mov	r1, #-2147483648	; 0x80000000
   1495c:	sdiv	r1, r1, r5
   14960:	mvn	r7, #-2147483648	; 0x80000000
   14964:	cmp	r1, r4
   14968:	bge	14980 <__assert_fail@plt+0x3980>
   1496c:	b	14990 <__assert_fail@plt+0x3990>
   14970:	mvn	r7, #-2147483648	; 0x80000000
   14974:	sdiv	r1, r7, r4
   14978:	cmp	r5, r1
   1497c:	blt	14990 <__assert_fail@plt+0x3990>
   14980:	mul	r1, r5, r4
   14984:	mov	r7, #64	; 0x40
   14988:	cmp	r1, #63	; 0x3f
   1498c:	bgt	14998 <__assert_fail@plt+0x3998>
   14990:	sdiv	r5, r7, r4
   14994:	mul	r1, r5, r4
   14998:	cmp	r0, #0
   1499c:	moveq	r7, #0
   149a0:	streq	r7, [r8]
   149a4:	sub	r7, r5, r6
   149a8:	cmp	r7, r2
   149ac:	bge	14a58 <__assert_fail@plt+0x3a58>
   149b0:	add	r5, r6, r2
   149b4:	mov	r1, #0
   149b8:	cmp	r5, r3
   149bc:	mov	r2, #0
   149c0:	movwgt	r2, #1
   149c4:	cmn	r3, #1
   149c8:	movwgt	r1, #1
   149cc:	cmp	r5, r6
   149d0:	bvs	14a40 <__assert_fail@plt+0x3a40>
   149d4:	ands	r1, r1, r2
   149d8:	bne	14a40 <__assert_fail@plt+0x3a40>
   149dc:	cmn	r4, #1
   149e0:	ble	14a08 <__assert_fail@plt+0x3a08>
   149e4:	cmp	r4, #0
   149e8:	beq	14a54 <__assert_fail@plt+0x3a54>
   149ec:	cmn	r5, #1
   149f0:	ble	14a2c <__assert_fail@plt+0x3a2c>
   149f4:	mvn	r1, #-2147483648	; 0x80000000
   149f8:	udiv	r1, r1, r4
   149fc:	cmp	r1, r5
   14a00:	bge	14a54 <__assert_fail@plt+0x3a54>
   14a04:	b	14a40 <__assert_fail@plt+0x3a40>
   14a08:	cmn	r5, #1
   14a0c:	ble	14a44 <__assert_fail@plt+0x3a44>
   14a10:	cmn	r4, #1
   14a14:	beq	14a54 <__assert_fail@plt+0x3a54>
   14a18:	mov	r1, #-2147483648	; 0x80000000
   14a1c:	sdiv	r1, r1, r4
   14a20:	cmp	r1, r5
   14a24:	bge	14a54 <__assert_fail@plt+0x3a54>
   14a28:	b	14a40 <__assert_fail@plt+0x3a40>
   14a2c:	beq	14a54 <__assert_fail@plt+0x3a54>
   14a30:	mov	r1, #-2147483648	; 0x80000000
   14a34:	sdiv	r1, r1, r5
   14a38:	cmp	r1, r4
   14a3c:	bge	14a54 <__assert_fail@plt+0x3a54>
   14a40:	bl	14b58 <__assert_fail@plt+0x3b58>
   14a44:	mvn	r1, #-2147483648	; 0x80000000
   14a48:	sdiv	r1, r1, r4
   14a4c:	cmp	r5, r1
   14a50:	blt	14a40 <__assert_fail@plt+0x3a40>
   14a54:	mul	r1, r5, r4
   14a58:	bl	147e8 <__assert_fail@plt+0x37e8>
   14a5c:	str	r5, [r8]
   14a60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a64:	mov	r1, #1
   14a68:	b	14a6c <__assert_fail@plt+0x3a6c>
   14a6c:	push	{fp, lr}
   14a70:	mov	fp, sp
   14a74:	bl	14b9c <__assert_fail@plt+0x3b9c>
   14a78:	bl	147bc <__assert_fail@plt+0x37bc>
   14a7c:	pop	{fp, pc}
   14a80:	mov	r1, #1
   14a84:	b	14a88 <__assert_fail@plt+0x3a88>
   14a88:	push	{fp, lr}
   14a8c:	mov	fp, sp
   14a90:	bl	15074 <__assert_fail@plt+0x4074>
   14a94:	bl	147bc <__assert_fail@plt+0x37bc>
   14a98:	pop	{fp, pc}
   14a9c:	push	{r4, r5, r6, sl, fp, lr}
   14aa0:	add	fp, sp, #16
   14aa4:	mov	r4, r1
   14aa8:	mov	r5, r0
   14aac:	mov	r0, r1
   14ab0:	bl	147a8 <__assert_fail@plt+0x37a8>
   14ab4:	mov	r6, r0
   14ab8:	mov	r1, r5
   14abc:	mov	r2, r4
   14ac0:	bl	10e08 <memcpy@plt>
   14ac4:	mov	r0, r6
   14ac8:	pop	{r4, r5, r6, sl, fp, pc}
   14acc:	push	{r4, r5, r6, sl, fp, lr}
   14ad0:	add	fp, sp, #16
   14ad4:	mov	r4, r1
   14ad8:	mov	r5, r0
   14adc:	mov	r0, r1
   14ae0:	bl	147d0 <__assert_fail@plt+0x37d0>
   14ae4:	mov	r6, r0
   14ae8:	mov	r1, r5
   14aec:	mov	r2, r4
   14af0:	bl	10e08 <memcpy@plt>
   14af4:	mov	r0, r6
   14af8:	pop	{r4, r5, r6, sl, fp, pc}
   14afc:	push	{r4, r5, r6, sl, fp, lr}
   14b00:	add	fp, sp, #16
   14b04:	mov	r4, r1
   14b08:	mov	r5, r0
   14b0c:	add	r0, r1, #1
   14b10:	bl	147d0 <__assert_fail@plt+0x37d0>
   14b14:	mov	r6, r0
   14b18:	mov	r0, #0
   14b1c:	strb	r0, [r6, r4]
   14b20:	mov	r0, r6
   14b24:	mov	r1, r5
   14b28:	mov	r2, r4
   14b2c:	bl	10e08 <memcpy@plt>
   14b30:	mov	r0, r6
   14b34:	pop	{r4, r5, r6, sl, fp, pc}
   14b38:	push	{r4, sl, fp, lr}
   14b3c:	add	fp, sp, #8
   14b40:	mov	r4, r0
   14b44:	bl	10f40 <strlen@plt>
   14b48:	add	r1, r0, #1
   14b4c:	mov	r0, r4
   14b50:	pop	{r4, sl, fp, lr}
   14b54:	b	14a9c <__assert_fail@plt+0x3a9c>
   14b58:	push	{fp, lr}
   14b5c:	mov	fp, sp
   14b60:	movw	r0, #24804	; 0x60e4
   14b64:	movt	r0, #2
   14b68:	ldr	r4, [r0]
   14b6c:	movw	r1, #23432	; 0x5b88
   14b70:	movt	r1, #1
   14b74:	mov	r0, #0
   14b78:	mov	r2, #5
   14b7c:	bl	10e38 <dcgettext@plt>
   14b80:	mov	r3, r0
   14b84:	movw	r2, #22319	; 0x572f
   14b88:	movt	r2, #1
   14b8c:	mov	r0, r4
   14b90:	mov	r1, #0
   14b94:	bl	10ebc <error@plt>
   14b98:	bl	10fe8 <abort@plt>
   14b9c:	clz	r2, r1
   14ba0:	lsr	r2, r2, #5
   14ba4:	clz	r3, r0
   14ba8:	lsr	r3, r3, #5
   14bac:	orrs	r2, r3, r2
   14bb0:	movwne	r1, #1
   14bb4:	movwne	r0, #1
   14bb8:	cmp	r1, #0
   14bbc:	beq	14bec <__assert_fail@plt+0x3bec>
   14bc0:	mvn	r2, #-2147483648	; 0x80000000
   14bc4:	udiv	r2, r2, r1
   14bc8:	cmp	r2, r0
   14bcc:	bcs	14bec <__assert_fail@plt+0x3bec>
   14bd0:	push	{fp, lr}
   14bd4:	mov	fp, sp
   14bd8:	bl	10f4c <__errno_location@plt>
   14bdc:	mov	r1, #12
   14be0:	str	r1, [r0]
   14be4:	mov	r0, #0
   14be8:	pop	{fp, pc}
   14bec:	b	10db4 <calloc@plt>
   14bf0:	cmp	r0, #0
   14bf4:	movweq	r0, #1
   14bf8:	cmn	r0, #1
   14bfc:	ble	14c04 <__assert_fail@plt+0x3c04>
   14c00:	b	10ee0 <malloc@plt>
   14c04:	push	{fp, lr}
   14c08:	mov	fp, sp
   14c0c:	bl	10f4c <__errno_location@plt>
   14c10:	mov	r1, #12
   14c14:	str	r1, [r0]
   14c18:	mov	r0, #0
   14c1c:	pop	{fp, pc}
   14c20:	push	{fp, lr}
   14c24:	mov	fp, sp
   14c28:	cmp	r0, #0
   14c2c:	beq	14c48 <__assert_fail@plt+0x3c48>
   14c30:	cmp	r1, #0
   14c34:	beq	14c54 <__assert_fail@plt+0x3c54>
   14c38:	cmn	r1, #1
   14c3c:	ble	14c60 <__assert_fail@plt+0x3c60>
   14c40:	pop	{fp, lr}
   14c44:	b	10e50 <realloc@plt>
   14c48:	mov	r0, r1
   14c4c:	pop	{fp, lr}
   14c50:	b	14bf0 <__assert_fail@plt+0x3bf0>
   14c54:	bl	15020 <__assert_fail@plt+0x4020>
   14c58:	mov	r0, #0
   14c5c:	pop	{fp, pc}
   14c60:	bl	10f4c <__errno_location@plt>
   14c64:	mov	r1, #12
   14c68:	str	r1, [r0]
   14c6c:	mov	r0, #0
   14c70:	pop	{fp, pc}
   14c74:	mov	r1, r0
   14c78:	sub	r2, r0, #65	; 0x41
   14c7c:	mov	r0, #1
   14c80:	cmp	r2, #26
   14c84:	subcs	r2, r1, #97	; 0x61
   14c88:	cmpcs	r2, #26
   14c8c:	bcs	14c94 <__assert_fail@plt+0x3c94>
   14c90:	bx	lr
   14c94:	sub	r1, r1, #48	; 0x30
   14c98:	cmp	r1, #10
   14c9c:	movcs	r0, #0
   14ca0:	bx	lr
   14ca4:	mov	r1, r0
   14ca8:	sub	r2, r0, #65	; 0x41
   14cac:	mov	r0, #1
   14cb0:	cmp	r2, #26
   14cb4:	subcs	r1, r1, #97	; 0x61
   14cb8:	cmpcs	r1, #26
   14cbc:	movcs	r0, #0
   14cc0:	bx	lr
   14cc4:	mov	r1, #0
   14cc8:	cmp	r0, #128	; 0x80
   14ccc:	movwcc	r1, #1
   14cd0:	mov	r0, r1
   14cd4:	bx	lr
   14cd8:	sub	r1, r0, #9
   14cdc:	clz	r1, r1
   14ce0:	lsr	r1, r1, #5
   14ce4:	sub	r0, r0, #32
   14ce8:	clz	r0, r0
   14cec:	lsr	r0, r0, #5
   14cf0:	orr	r0, r0, r1
   14cf4:	bx	lr
   14cf8:	mov	r1, r0
   14cfc:	mov	r0, #1
   14d00:	cmp	r1, #32
   14d04:	bxcc	lr
   14d08:	cmp	r1, #127	; 0x7f
   14d0c:	movne	r0, #0
   14d10:	bx	lr
   14d14:	sub	r1, r0, #48	; 0x30
   14d18:	mov	r0, #0
   14d1c:	cmp	r1, #10
   14d20:	movwcc	r0, #1
   14d24:	bx	lr
   14d28:	sub	r1, r0, #33	; 0x21
   14d2c:	mov	r0, #0
   14d30:	cmp	r1, #94	; 0x5e
   14d34:	movwcc	r0, #1
   14d38:	bx	lr
   14d3c:	sub	r1, r0, #97	; 0x61
   14d40:	mov	r0, #0
   14d44:	cmp	r1, #26
   14d48:	movwcc	r0, #1
   14d4c:	bx	lr
   14d50:	sub	r1, r0, #32
   14d54:	mov	r0, #0
   14d58:	cmp	r1, #95	; 0x5f
   14d5c:	movwcc	r0, #1
   14d60:	bx	lr
   14d64:	sub	r1, r0, #33	; 0x21
   14d68:	cmp	r1, #93	; 0x5d
   14d6c:	bhi	14ef8 <__assert_fail@plt+0x3ef8>
   14d70:	mov	r0, #1
   14d74:	add	r2, pc, #0
   14d78:	ldr	pc, [r2, r1, lsl #2]
   14d7c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d84:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d94:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14da0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14da4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14da8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14db0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14db4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14db8:	strdeq	r4, [r1], -r8
   14dbc:	strdeq	r4, [r1], -r8
   14dc0:	strdeq	r4, [r1], -r8
   14dc4:	strdeq	r4, [r1], -r8
   14dc8:	strdeq	r4, [r1], -r8
   14dcc:	strdeq	r4, [r1], -r8
   14dd0:	strdeq	r4, [r1], -r8
   14dd4:	strdeq	r4, [r1], -r8
   14dd8:	strdeq	r4, [r1], -r8
   14ddc:	strdeq	r4, [r1], -r8
   14de0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14de4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14de8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14df0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14df4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14df8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dfc:	strdeq	r4, [r1], -r8
   14e00:	strdeq	r4, [r1], -r8
   14e04:	strdeq	r4, [r1], -r8
   14e08:	strdeq	r4, [r1], -r8
   14e0c:	strdeq	r4, [r1], -r8
   14e10:	strdeq	r4, [r1], -r8
   14e14:	strdeq	r4, [r1], -r8
   14e18:	strdeq	r4, [r1], -r8
   14e1c:	strdeq	r4, [r1], -r8
   14e20:	strdeq	r4, [r1], -r8
   14e24:	strdeq	r4, [r1], -r8
   14e28:	strdeq	r4, [r1], -r8
   14e2c:	strdeq	r4, [r1], -r8
   14e30:	strdeq	r4, [r1], -r8
   14e34:	strdeq	r4, [r1], -r8
   14e38:	strdeq	r4, [r1], -r8
   14e3c:	strdeq	r4, [r1], -r8
   14e40:	strdeq	r4, [r1], -r8
   14e44:	strdeq	r4, [r1], -r8
   14e48:	strdeq	r4, [r1], -r8
   14e4c:	strdeq	r4, [r1], -r8
   14e50:	strdeq	r4, [r1], -r8
   14e54:	strdeq	r4, [r1], -r8
   14e58:	strdeq	r4, [r1], -r8
   14e5c:	strdeq	r4, [r1], -r8
   14e60:	strdeq	r4, [r1], -r8
   14e64:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e68:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e6c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e70:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e78:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e7c:	strdeq	r4, [r1], -r8
   14e80:	strdeq	r4, [r1], -r8
   14e84:	strdeq	r4, [r1], -r8
   14e88:	strdeq	r4, [r1], -r8
   14e8c:	strdeq	r4, [r1], -r8
   14e90:	strdeq	r4, [r1], -r8
   14e94:	strdeq	r4, [r1], -r8
   14e98:	strdeq	r4, [r1], -r8
   14e9c:	strdeq	r4, [r1], -r8
   14ea0:	strdeq	r4, [r1], -r8
   14ea4:	strdeq	r4, [r1], -r8
   14ea8:	strdeq	r4, [r1], -r8
   14eac:	strdeq	r4, [r1], -r8
   14eb0:	strdeq	r4, [r1], -r8
   14eb4:	strdeq	r4, [r1], -r8
   14eb8:	strdeq	r4, [r1], -r8
   14ebc:	strdeq	r4, [r1], -r8
   14ec0:	strdeq	r4, [r1], -r8
   14ec4:	strdeq	r4, [r1], -r8
   14ec8:	strdeq	r4, [r1], -r8
   14ecc:	strdeq	r4, [r1], -r8
   14ed0:	strdeq	r4, [r1], -r8
   14ed4:	strdeq	r4, [r1], -r8
   14ed8:	strdeq	r4, [r1], -r8
   14edc:	strdeq	r4, [r1], -r8
   14ee0:	strdeq	r4, [r1], -r8
   14ee4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ee8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ef0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ef4:	bx	lr
   14ef8:	mov	r0, #0
   14efc:	bx	lr
   14f00:	sub	r0, r0, #9
   14f04:	cmp	r0, #23
   14f08:	movhi	r0, #0
   14f0c:	bxhi	lr
   14f10:	bic	r0, r0, #-16777216	; 0xff000000
   14f14:	movw	r1, #31
   14f18:	movt	r1, #128	; 0x80
   14f1c:	mov	r2, #1
   14f20:	and	r0, r2, r1, lsr r0
   14f24:	bx	lr
   14f28:	sub	r1, r0, #65	; 0x41
   14f2c:	mov	r0, #0
   14f30:	cmp	r1, #26
   14f34:	movwcc	r0, #1
   14f38:	bx	lr
   14f3c:	mov	r1, r0
   14f40:	sub	r2, r0, #48	; 0x30
   14f44:	mov	r0, #1
   14f48:	cmp	r2, #22
   14f4c:	bhi	14f64 <__assert_fail@plt+0x3f64>
   14f50:	mov	ip, #1
   14f54:	movw	r3, #1023	; 0x3ff
   14f58:	movt	r3, #126	; 0x7e
   14f5c:	tst	r3, ip, lsl r2
   14f60:	bxne	lr
   14f64:	sub	r1, r1, #97	; 0x61
   14f68:	cmp	r1, #6
   14f6c:	movcs	r0, #0
   14f70:	bxcs	lr
   14f74:	bx	lr
   14f78:	sub	r1, r0, #65	; 0x41
   14f7c:	cmp	r1, #26
   14f80:	addcc	r0, r0, #32
   14f84:	bx	lr
   14f88:	sub	r1, r0, #97	; 0x61
   14f8c:	cmp	r1, #26
   14f90:	subcc	r0, r0, #32
   14f94:	bx	lr
   14f98:	push	{r4, r5, r6, sl, fp, lr}
   14f9c:	add	fp, sp, #16
   14fa0:	mov	r4, r0
   14fa4:	bl	10e98 <__fpending@plt>
   14fa8:	mov	r5, r0
   14fac:	mov	r0, r4
   14fb0:	bl	10ea4 <ferror_unlocked@plt>
   14fb4:	mov	r6, r0
   14fb8:	mov	r0, r4
   14fbc:	bl	11ef0 <__assert_fail@plt+0xef0>
   14fc0:	cmp	r6, #0
   14fc4:	beq	14fe4 <__assert_fail@plt+0x3fe4>
   14fc8:	mvn	r4, #0
   14fcc:	cmp	r0, #0
   14fd0:	bne	15018 <__assert_fail@plt+0x4018>
   14fd4:	bl	10f4c <__errno_location@plt>
   14fd8:	mov	r1, #0
   14fdc:	str	r1, [r0]
   14fe0:	b	15018 <__assert_fail@plt+0x4018>
   14fe4:	cmp	r0, #0
   14fe8:	mov	r4, r0
   14fec:	mvnne	r4, #0
   14ff0:	cmp	r5, #0
   14ff4:	bne	15018 <__assert_fail@plt+0x4018>
   14ff8:	cmp	r0, #0
   14ffc:	beq	15018 <__assert_fail@plt+0x4018>
   15000:	bl	10f4c <__errno_location@plt>
   15004:	ldr	r0, [r0]
   15008:	subs	r4, r0, #9
   1500c:	mvnne	r4, #0
   15010:	mov	r0, r4
   15014:	pop	{r4, r5, r6, sl, fp, pc}
   15018:	mov	r0, r4
   1501c:	pop	{r4, r5, r6, sl, fp, pc}
   15020:	push	{r4, r5, r6, sl, fp, lr}
   15024:	add	fp, sp, #16
   15028:	mov	r4, r0
   1502c:	bl	10f4c <__errno_location@plt>
   15030:	mov	r5, r0
   15034:	ldr	r6, [r0]
   15038:	mov	r0, r4
   1503c:	bl	10df0 <free@plt>
   15040:	str	r6, [r5]
   15044:	pop	{r4, r5, r6, sl, fp, pc}
   15048:	push	{fp, lr}
   1504c:	mov	fp, sp
   15050:	bl	10f4c <__errno_location@plt>
   15054:	mov	r1, #12
   15058:	str	r1, [r0]
   1505c:	mov	r0, #0
   15060:	pop	{fp, pc}
   15064:	b	14bf0 <__assert_fail@plt+0x3bf0>
   15068:	cmp	r1, #0
   1506c:	orreq	r1, r1, #1
   15070:	b	14c20 <__assert_fail@plt+0x3c20>
   15074:	b	14b9c <__assert_fail@plt+0x3b9c>
   15078:	clz	r3, r2
   1507c:	lsr	ip, r3, #5
   15080:	clz	r3, r1
   15084:	lsr	r3, r3, #5
   15088:	orrs	r3, r3, ip
   1508c:	movwne	r1, #1
   15090:	movwne	r2, #1
   15094:	b	15130 <__assert_fail@plt+0x4130>
   15098:	push	{fp, lr}
   1509c:	mov	fp, sp
   150a0:	mov	r0, #14
   150a4:	bl	10fc4 <nl_langinfo@plt>
   150a8:	movw	r1, #21935	; 0x55af
   150ac:	movt	r1, #1
   150b0:	cmp	r0, #0
   150b4:	movne	r1, r0
   150b8:	ldrb	r2, [r1]
   150bc:	movw	r0, #23449	; 0x5b99
   150c0:	movt	r0, #1
   150c4:	cmp	r2, #0
   150c8:	movne	r0, r1
   150cc:	pop	{fp, pc}
   150d0:	push	{r4, r5, r6, r7, fp, lr}
   150d4:	add	fp, sp, #16
   150d8:	sub	sp, sp, #8
   150dc:	mov	r7, r2
   150e0:	mov	r4, r1
   150e4:	add	r5, sp, #4
   150e8:	cmp	r0, #0
   150ec:	movne	r5, r0
   150f0:	mov	r0, r5
   150f4:	bl	10eb0 <mbrtowc@plt>
   150f8:	mov	r6, r0
   150fc:	cmp	r7, #0
   15100:	beq	15124 <__assert_fail@plt+0x4124>
   15104:	cmn	r6, #2
   15108:	bcc	15124 <__assert_fail@plt+0x4124>
   1510c:	mov	r0, #0
   15110:	bl	1516c <__assert_fail@plt+0x416c>
   15114:	cmp	r0, #0
   15118:	ldrbeq	r0, [r4]
   1511c:	streq	r0, [r5]
   15120:	moveq	r6, #1
   15124:	mov	r0, r6
   15128:	sub	sp, fp, #16
   1512c:	pop	{r4, r5, r6, r7, fp, pc}
   15130:	cmp	r2, #0
   15134:	beq	15164 <__assert_fail@plt+0x4164>
   15138:	mvn	r3, #0
   1513c:	udiv	r3, r3, r2
   15140:	cmp	r3, r1
   15144:	bcs	15164 <__assert_fail@plt+0x4164>
   15148:	push	{fp, lr}
   1514c:	mov	fp, sp
   15150:	bl	10f4c <__errno_location@plt>
   15154:	mov	r1, #12
   15158:	str	r1, [r0]
   1515c:	mov	r0, #0
   15160:	pop	{fp, pc}
   15164:	mul	r1, r2, r1
   15168:	b	14c20 <__assert_fail@plt+0x3c20>
   1516c:	push	{r4, sl, fp, lr}
   15170:	add	fp, sp, #8
   15174:	sub	sp, sp, #264	; 0x108
   15178:	add	r1, sp, #7
   1517c:	movw	r2, #257	; 0x101
   15180:	bl	151d0 <__assert_fail@plt+0x41d0>
   15184:	mov	r4, #0
   15188:	cmp	r0, #0
   1518c:	bne	151c4 <__assert_fail@plt+0x41c4>
   15190:	add	r0, sp, #7
   15194:	movw	r1, #23455	; 0x5b9f
   15198:	movt	r1, #1
   1519c:	bl	10dcc <strcmp@plt>
   151a0:	cmp	r0, #0
   151a4:	beq	151c4 <__assert_fail@plt+0x41c4>
   151a8:	add	r0, sp, #7
   151ac:	movw	r1, #23457	; 0x5ba1
   151b0:	movt	r1, #1
   151b4:	bl	10dcc <strcmp@plt>
   151b8:	mov	r4, r0
   151bc:	cmp	r0, #0
   151c0:	movwne	r4, #1
   151c4:	mov	r0, r4
   151c8:	sub	sp, fp, #8
   151cc:	pop	{r4, sl, fp, pc}
   151d0:	b	151d4 <__assert_fail@plt+0x41d4>
   151d4:	push	{r4, r5, r6, r7, fp, lr}
   151d8:	add	fp, sp, #16
   151dc:	mov	r6, r2
   151e0:	mov	r4, r1
   151e4:	bl	15270 <__assert_fail@plt+0x4270>
   151e8:	cmp	r0, #0
   151ec:	beq	1521c <__assert_fail@plt+0x421c>
   151f0:	mov	r7, r0
   151f4:	bl	10f40 <strlen@plt>
   151f8:	cmp	r0, r6
   151fc:	bcs	1523c <__assert_fail@plt+0x423c>
   15200:	add	r2, r0, #1
   15204:	mov	r0, r4
   15208:	mov	r1, r7
   1520c:	bl	10e08 <memcpy@plt>
   15210:	mov	r5, #0
   15214:	mov	r0, r5
   15218:	pop	{r4, r5, r6, r7, fp, pc}
   1521c:	mov	r5, #22
   15220:	cmp	r6, #0
   15224:	movne	r0, #0
   15228:	strbne	r0, [r4]
   1522c:	movne	r0, r5
   15230:	popne	{r4, r5, r6, r7, fp, pc}
   15234:	mov	r0, r5
   15238:	pop	{r4, r5, r6, r7, fp, pc}
   1523c:	mov	r5, #34	; 0x22
   15240:	cmp	r6, #0
   15244:	beq	15264 <__assert_fail@plt+0x4264>
   15248:	sub	r6, r6, #1
   1524c:	mov	r0, r4
   15250:	mov	r1, r7
   15254:	mov	r2, r6
   15258:	bl	10e08 <memcpy@plt>
   1525c:	mov	r0, #0
   15260:	strb	r0, [r4, r6]
   15264:	mov	r0, r5
   15268:	pop	{r4, r5, r6, r7, fp, pc}
   1526c:	b	15270 <__assert_fail@plt+0x4270>
   15270:	mov	r1, #0
   15274:	b	10fac <setlocale@plt>
   15278:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1527c:	mov	r7, r0
   15280:	ldr	r6, [pc, #72]	; 152d0 <__assert_fail@plt+0x42d0>
   15284:	ldr	r5, [pc, #72]	; 152d4 <__assert_fail@plt+0x42d4>
   15288:	add	r6, pc, r6
   1528c:	add	r5, pc, r5
   15290:	sub	r6, r6, r5
   15294:	mov	r8, r1
   15298:	mov	r9, r2
   1529c:	bl	10d94 <calloc@plt-0x20>
   152a0:	asrs	r6, r6, #2
   152a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   152a8:	mov	r4, #0
   152ac:	add	r4, r4, #1
   152b0:	ldr	r3, [r5], #4
   152b4:	mov	r2, r9
   152b8:	mov	r1, r8
   152bc:	mov	r0, r7
   152c0:	blx	r3
   152c4:	cmp	r6, r4
   152c8:	bne	152ac <__assert_fail@plt+0x42ac>
   152cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152d0:	andeq	r0, r1, ip, ror ip
   152d4:	andeq	r0, r1, r4, ror ip
   152d8:	bx	lr
   152dc:	ldr	r3, [pc, #12]	; 152f0 <__assert_fail@plt+0x42f0>
   152e0:	mov	r1, #0
   152e4:	add	r3, pc, r3
   152e8:	ldr	r2, [r3]
   152ec:	b	10f58 <__cxa_atexit@plt>
   152f0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>

Disassembly of section .fini:

000152f4 <.fini>:
   152f4:	push	{r3, lr}
   152f8:	pop	{r3, pc}
