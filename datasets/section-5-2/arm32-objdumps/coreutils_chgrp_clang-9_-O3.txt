
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	11504 <__assert_fail@plt+0x48>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <fstatfs64@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <fstatfs64@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	fp, r1, ip, ror #28

00011198 <fstatfs64@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <calloc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <endgrent@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <raise@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <strcmp@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <getpwuid@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <fflush@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <memmove@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <free@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <_exit@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <memcpy@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <__strtoull_internal@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <mbsinit@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <stpcpy@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <dcgettext@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <realloc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <textdomain@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <__fxstatat64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <iswprint@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <__fxstat64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <fwrite@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <lseek64@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <__ctype_get_mb_cur_max@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <__fpending@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <mbrtowc@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <error@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <open64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <malloc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <__libc_start_main@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <__freading@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <__gmon_start__@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <getopt_long@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <__ctype_b_loc@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <exit@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #110592	; 0x1b000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <bcmp@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #110592	; 0x1b000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <strlen@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #110592	; 0x1b000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <strchr@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #110592	; 0x1b000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <openat64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #110592	; 0x1b000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <fchown@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #110592	; 0x1b000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <__errno_location@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #110592	; 0x1b000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <__cxa_atexit@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #110592	; 0x1b000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <memset@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #110592	; 0x1b000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <__printf_chk@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #110592	; 0x1b000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <fileno@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #110592	; 0x1b000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__fprintf_chk@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #110592	; 0x1b000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <fclose@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #110592	; 0x1b000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <fseeko64@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #110592	; 0x1b000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <fcntl64@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #110592	; 0x1b000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <setlocale@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #110592	; 0x1b000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <strrchr@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #110592	; 0x1b000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <nl_langinfo@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #110592	; 0x1b000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <readdir64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #110592	; 0x1b000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <fdopendir@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #110592	; 0x1b000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <dirfd@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #110592	; 0x1b000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <fchdir@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #110592	; 0x1b000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <qsort@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #110592	; 0x1b000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <fchownat@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #110592	; 0x1b000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <bindtextdomain@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #110592	; 0x1b000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <__xstat64@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #110592	; 0x1b000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <strncmp@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #110592	; 0x1b000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <abort@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #110592	; 0x1b000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <close@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #110592	; 0x1b000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <__lxstat64@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #110592	; 0x1b000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <closedir@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #110592	; 0x1b000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <getgrgid@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #110592	; 0x1b000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <getgrnam@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #110592	; 0x1b000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <__assert_fail@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #110592	; 0x1b000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

Disassembly of section .text:

000114c8 <.text>:
   114c8:	mov	fp, #0
   114cc:	mov	lr, #0
   114d0:	pop	{r1}		; (ldr r1, [sp], #4)
   114d4:	mov	r2, sp
   114d8:	push	{r2}		; (str r2, [sp, #-4]!)
   114dc:	push	{r0}		; (str r0, [sp, #-4]!)
   114e0:	ldr	ip, [pc, #16]	; 114f8 <__assert_fail@plt+0x3c>
   114e4:	push	{ip}		; (str ip, [sp, #-4]!)
   114e8:	ldr	r0, [pc, #12]	; 114fc <__assert_fail@plt+0x40>
   114ec:	ldr	r3, [pc, #12]	; 11500 <__assert_fail@plt+0x44>
   114f0:	bl	112f4 <__libc_start_main@plt>
   114f4:	bl	11474 <abort@plt>
   114f8:	andeq	fp, r1, ip, lsl r0
   114fc:	andeq	r1, r1, ip, ror #17
   11500:			; <UNDEFINED> instruction: 0x0001afbc
   11504:	ldr	r3, [pc, #20]	; 11520 <__assert_fail@plt+0x64>
   11508:	ldr	r2, [pc, #20]	; 11524 <__assert_fail@plt+0x68>
   1150c:	add	r3, pc, r3
   11510:	ldr	r2, [r3, r2]
   11514:	cmp	r2, #0
   11518:	bxeq	lr
   1151c:	b	1130c <__gmon_start__@plt>
   11520:	andeq	fp, r1, ip, ror #21
   11524:	andeq	r0, r0, ip, lsl r1
   11528:	ldr	r0, [pc, #24]	; 11548 <__assert_fail@plt+0x8c>
   1152c:	ldr	r3, [pc, #24]	; 1154c <__assert_fail@plt+0x90>
   11530:	cmp	r3, r0
   11534:	bxeq	lr
   11538:	ldr	r3, [pc, #16]	; 11550 <__assert_fail@plt+0x94>
   1153c:	cmp	r3, #0
   11540:	bxeq	lr
   11544:	bx	r3
   11548:	andeq	sp, r2, r0, ror r1
   1154c:	andeq	sp, r2, r0, ror r1
   11550:	andeq	r0, r0, r0
   11554:	ldr	r0, [pc, #36]	; 11580 <__assert_fail@plt+0xc4>
   11558:	ldr	r1, [pc, #36]	; 11584 <__assert_fail@plt+0xc8>
   1155c:	sub	r1, r1, r0
   11560:	asr	r1, r1, #2
   11564:	add	r1, r1, r1, lsr #31
   11568:	asrs	r1, r1, #1
   1156c:	bxeq	lr
   11570:	ldr	r3, [pc, #16]	; 11588 <__assert_fail@plt+0xcc>
   11574:	cmp	r3, #0
   11578:	bxeq	lr
   1157c:	bx	r3
   11580:	andeq	sp, r2, r0, ror r1
   11584:	andeq	sp, r2, r0, ror r1
   11588:	andeq	r0, r0, r0
   1158c:	push	{r4, lr}
   11590:	ldr	r4, [pc, #24]	; 115b0 <__assert_fail@plt+0xf4>
   11594:	ldrb	r3, [r4]
   11598:	cmp	r3, #0
   1159c:	popne	{r4, pc}
   115a0:	bl	11528 <__assert_fail@plt+0x6c>
   115a4:	mov	r3, #1
   115a8:	strb	r3, [r4]
   115ac:	pop	{r4, pc}
   115b0:	andeq	sp, r2, ip, lsl #3
   115b4:	b	11554 <__assert_fail@plt+0x98>
   115b8:	push	{fp, lr}
   115bc:	mov	fp, sp
   115c0:	sub	sp, sp, #56	; 0x38
   115c4:	mov	r4, r0
   115c8:	cmp	r0, #0
   115cc:	bne	118a8 <__assert_fail@plt+0x3ec>
   115d0:	movw	r1, #45163	; 0xb06b
   115d4:	mov	r0, #0
   115d8:	mov	r2, #5
   115dc:	movt	r1, #1
   115e0:	bl	1124c <dcgettext@plt>
   115e4:	movw	r5, #53680	; 0xd1b0
   115e8:	mov	r1, r0
   115ec:	mov	r0, #1
   115f0:	movt	r5, #2
   115f4:	ldr	r2, [r5]
   115f8:	mov	r3, r2
   115fc:	bl	1139c <__printf_chk@plt>
   11600:	movw	r1, #45248	; 0xb0c0
   11604:	mov	r0, #0
   11608:	mov	r2, #5
   1160c:	movt	r1, #1
   11610:	bl	1124c <dcgettext@plt>
   11614:	movw	r7, #53636	; 0xd184
   11618:	movt	r7, #2
   1161c:	ldr	r1, [r7]
   11620:	bl	111bc <fputs_unlocked@plt>
   11624:	movw	r1, #45356	; 0xb12c
   11628:	mov	r0, #0
   1162c:	mov	r2, #5
   11630:	movt	r1, #1
   11634:	bl	1124c <dcgettext@plt>
   11638:	ldr	r1, [r7]
   1163c:	bl	111bc <fputs_unlocked@plt>
   11640:	movw	r1, #45557	; 0xb1f5
   11644:	mov	r0, #0
   11648:	mov	r2, #5
   1164c:	movt	r1, #1
   11650:	bl	1124c <dcgettext@plt>
   11654:	ldr	r1, [r7]
   11658:	bl	111bc <fputs_unlocked@plt>
   1165c:	movw	r1, #45788	; 0xb2dc
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	1124c <dcgettext@plt>
   11670:	ldr	r1, [r7]
   11674:	bl	111bc <fputs_unlocked@plt>
   11678:	movw	r1, #45907	; 0xb353
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	movt	r1, #1
   11688:	bl	1124c <dcgettext@plt>
   1168c:	ldr	r1, [r7]
   11690:	bl	111bc <fputs_unlocked@plt>
   11694:	movw	r1, #46035	; 0xb3d3
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	movt	r1, #1
   116a4:	bl	1124c <dcgettext@plt>
   116a8:	ldr	r1, [r7]
   116ac:	bl	111bc <fputs_unlocked@plt>
   116b0:	movw	r1, #46141	; 0xb43d
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	1124c <dcgettext@plt>
   116c4:	ldr	r1, [r7]
   116c8:	bl	111bc <fputs_unlocked@plt>
   116cc:	movw	r1, #46212	; 0xb484
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	1124c <dcgettext@plt>
   116e0:	ldr	r1, [r7]
   116e4:	bl	111bc <fputs_unlocked@plt>
   116e8:	movw	r1, #46677	; 0xb655
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	1124c <dcgettext@plt>
   116fc:	ldr	r1, [r7]
   11700:	bl	111bc <fputs_unlocked@plt>
   11704:	movw	r1, #46722	; 0xb682
   11708:	mov	r0, #0
   1170c:	mov	r2, #5
   11710:	movt	r1, #1
   11714:	bl	1124c <dcgettext@plt>
   11718:	ldr	r1, [r7]
   1171c:	bl	111bc <fputs_unlocked@plt>
   11720:	movw	r1, #46776	; 0xb6b8
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	movt	r1, #1
   11730:	bl	1124c <dcgettext@plt>
   11734:	ldr	r2, [r5]
   11738:	mov	r1, r0
   1173c:	mov	r0, #1
   11740:	mov	r3, r2
   11744:	bl	1139c <__printf_chk@plt>
   11748:	movw	r0, #47728	; 0xba70
   1174c:	mov	r2, #48	; 0x30
   11750:	mov	r6, sp
   11754:	movw	r5, #46909	; 0xb73d
   11758:	movt	r0, #1
   1175c:	movt	r5, #1
   11760:	add	r1, r0, #32
   11764:	add	r3, r0, #16
   11768:	vld1.64	{d18-d19}, [r0], r2
   1176c:	vld1.64	{d16-d17}, [r1]
   11770:	vld1.64	{d20-d21}, [r3]
   11774:	vldr	d22, [r0]
   11778:	add	r1, r6, #32
   1177c:	add	r0, r6, #16
   11780:	vst1.64	{d16-d17}, [r1]
   11784:	movw	r1, #47105	; 0xb801
   11788:	vst1.64	{d20-d21}, [r0]
   1178c:	mov	r0, r6
   11790:	movt	r1, #1
   11794:	vst1.64	{d18-d19}, [r0], r2
   11798:	vstr	d22, [r0]
   1179c:	mov	r0, r5
   117a0:	bl	111d4 <strcmp@plt>
   117a4:	cmp	r0, #0
   117a8:	ldrne	r1, [r6, #8]!
   117ac:	cmpne	r1, #0
   117b0:	bne	1179c <__assert_fail@plt+0x2e0>
   117b4:	movw	r1, #47200	; 0xb860
   117b8:	ldr	r6, [r6, #4]
   117bc:	mov	r0, #0
   117c0:	mov	r2, #5
   117c4:	movt	r1, #1
   117c8:	bl	1124c <dcgettext@plt>
   117cc:	movw	r2, #46948	; 0xb764
   117d0:	movw	r3, #47223	; 0xb877
   117d4:	mov	r1, r0
   117d8:	mov	r0, #1
   117dc:	movt	r2, #1
   117e0:	movt	r3, #1
   117e4:	bl	1139c <__printf_chk@plt>
   117e8:	cmp	r6, #0
   117ec:	mov	r0, #5
   117f0:	mov	r1, #0
   117f4:	moveq	r6, r5
   117f8:	bl	113e4 <setlocale@plt>
   117fc:	cmp	r0, #0
   11800:	beq	11838 <__assert_fail@plt+0x37c>
   11804:	movw	r1, #47263	; 0xb89f
   11808:	mov	r2, #3
   1180c:	movt	r1, #1
   11810:	bl	11468 <strncmp@plt>
   11814:	cmp	r0, #0
   11818:	beq	11838 <__assert_fail@plt+0x37c>
   1181c:	movw	r1, #47267	; 0xb8a3
   11820:	mov	r0, #0
   11824:	mov	r2, #5
   11828:	movt	r1, #1
   1182c:	bl	1124c <dcgettext@plt>
   11830:	ldr	r1, [r7]
   11834:	bl	111bc <fputs_unlocked@plt>
   11838:	movw	r1, #47338	; 0xb8ea
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	1124c <dcgettext@plt>
   1184c:	movw	r2, #47223	; 0xb877
   11850:	mov	r1, r0
   11854:	mov	r0, #1
   11858:	mov	r3, r5
   1185c:	movt	r2, #1
   11860:	bl	1139c <__printf_chk@plt>
   11864:	movw	r1, #47365	; 0xb905
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	1124c <dcgettext@plt>
   11878:	mov	r1, r0
   1187c:	movw	r0, #47133	; 0xb81d
   11880:	movw	r3, #46676	; 0xb654
   11884:	cmp	r6, r5
   11888:	mov	r2, r6
   1188c:	movt	r0, #1
   11890:	movt	r3, #1
   11894:	moveq	r3, r0
   11898:	mov	r0, #1
   1189c:	bl	1139c <__printf_chk@plt>
   118a0:	mov	r0, r4
   118a4:	bl	11330 <exit@plt>
   118a8:	movw	r0, #53632	; 0xd180
   118ac:	movw	r1, #45124	; 0xb044
   118b0:	mov	r2, #5
   118b4:	movt	r0, #2
   118b8:	movt	r1, #1
   118bc:	ldr	r5, [r0]
   118c0:	mov	r0, #0
   118c4:	bl	1124c <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	movw	r0, #53680	; 0xd1b0
   118d0:	mov	r1, #1
   118d4:	movt	r0, #2
   118d8:	ldr	r3, [r0]
   118dc:	mov	r0, r5
   118e0:	bl	113b4 <__fprintf_chk@plt>
   118e4:	mov	r0, r4
   118e8:	bl	11330 <exit@plt>
   118ec:	push	{fp, lr}
   118f0:	mov	fp, sp
   118f4:	sub	sp, sp, #144	; 0x90
   118f8:	mov	r7, r0
   118fc:	ldr	r0, [r1]
   11900:	mov	r4, r1
   11904:	bl	16c64 <__assert_fail@plt+0x57a8>
   11908:	movw	r1, #46676	; 0xb654
   1190c:	mov	r0, #6
   11910:	movt	r1, #1
   11914:	bl	113e4 <setlocale@plt>
   11918:	movw	r5, #46952	; 0xb768
   1191c:	movw	r1, #46915	; 0xb743
   11920:	movt	r5, #1
   11924:	movt	r1, #1
   11928:	mov	r0, r5
   1192c:	bl	11450 <bindtextdomain@plt>
   11930:	mov	r0, r5
   11934:	bl	11264 <textdomain@plt>
   11938:	movw	r0, #11564	; 0x2d2c
   1193c:	movt	r0, #1
   11940:	bl	1b020 <__assert_fail@plt+0x9b64>
   11944:	sub	r0, fp, #24
   11948:	bl	11e7c <__assert_fail@plt+0x9c0>
   1194c:	movw	r5, #46939	; 0xb75b
   11950:	movw	r6, #47520	; 0xb9a0
   11954:	mov	r9, #0
   11958:	mov	r0, #16
   1195c:	mvn	r8, #0
   11960:	movt	r5, #1
   11964:	movt	r6, #1
   11968:	mov	r1, #0
   1196c:	str	r1, [sp, #12]
   11970:	mov	sl, r0
   11974:	mov	r0, r7
   11978:	mov	r1, r4
   1197c:	mov	r2, r5
   11980:	mov	r3, r6
   11984:	str	r9, [sp]
   11988:	bl	11318 <getopt_long@plt>
   1198c:	cmp	r0, #71	; 0x47
   11990:	ble	11b28 <__assert_fail@plt+0x66c>
   11994:	sub	r1, r0, #72	; 0x48
   11998:	cmp	r1, #46	; 0x2e
   1199c:	bhi	11a70 <__assert_fail@plt+0x5b4>
   119a0:	add	r2, pc, #4
   119a4:	mov	r0, #17
   119a8:	ldr	pc, [r2, r1, lsl #2]
   119ac:	andeq	r1, r1, r0, ror r9
   119b0:	andeq	r1, r1, r4, ror lr
   119b4:	andeq	r1, r1, r4, ror lr
   119b8:	andeq	r1, r1, r4, ror lr
   119bc:	andeq	r1, r1, r8, ror #20
   119c0:	andeq	r1, r1, r4, ror lr
   119c4:	andeq	r1, r1, r4, ror lr
   119c8:	andeq	r1, r1, r4, ror lr
   119cc:	andeq	r1, r1, r0, ror #21
   119d0:	andeq	r1, r1, r4, ror lr
   119d4:	andeq	r1, r1, r8, ror #21
   119d8:	andeq	r1, r1, r4, ror lr
   119dc:	andeq	r1, r1, r4, ror lr
   119e0:	andeq	r1, r1, r4, ror lr
   119e4:	andeq	r1, r1, r4, ror lr
   119e8:	andeq	r1, r1, r4, ror lr
   119ec:	andeq	r1, r1, r4, ror lr
   119f0:	andeq	r1, r1, r4, ror lr
   119f4:	andeq	r1, r1, r4, ror lr
   119f8:	andeq	r1, r1, r4, ror lr
   119fc:	andeq	r1, r1, r4, ror lr
   11a00:	andeq	r1, r1, r4, ror lr
   11a04:	andeq	r1, r1, r4, ror lr
   11a08:	andeq	r1, r1, r4, ror lr
   11a0c:	andeq	r1, r1, r4, ror lr
   11a10:	andeq	r1, r1, r4, ror lr
   11a14:	andeq	r1, r1, r4, ror lr
   11a18:	andeq	r1, r1, r0, lsr #21
   11a1c:	andeq	r1, r1, r4, ror lr
   11a20:	andeq	r1, r1, r4, ror lr
   11a24:	strdeq	r1, [r1], -r8
   11a28:	andeq	r1, r1, r4, ror lr
   11a2c:	andeq	r1, r1, r8, lsl #22
   11a30:	andeq	r1, r1, r4, ror lr
   11a34:	andeq	r1, r1, r4, ror lr
   11a38:	andeq	r1, r1, r4, ror lr
   11a3c:	andeq	r1, r1, r4, ror lr
   11a40:	andeq	r1, r1, r4, ror lr
   11a44:	andeq	r1, r1, r4, ror lr
   11a48:	andeq	r1, r1, r4, ror lr
   11a4c:	andeq	r1, r1, r4, ror lr
   11a50:	andeq	r1, r1, r4, ror lr
   11a54:	andeq	r1, r1, r4, ror lr
   11a58:	andeq	r1, r1, r4, ror lr
   11a5c:	andeq	r1, r1, r4, ror lr
   11a60:	andeq	r1, r1, r4, ror lr
   11a64:	andeq	r1, r1, r4, lsl fp
   11a68:	mov	r0, #2
   11a6c:	b	11970 <__assert_fail@plt+0x4b4>
   11a70:	sub	r0, r0, #256	; 0x100
   11a74:	cmp	r0, #3
   11a78:	bhi	11e74 <__assert_fail@plt+0x9b8>
   11a7c:	add	r1, pc, #0
   11a80:	ldr	pc, [r1, r0, lsl #2]
   11a84:	muleq	r1, r4, sl
   11a88:	andeq	r1, r1, r0, lsr #22
   11a8c:			; <UNDEFINED> instruction: 0x00011ab0
   11a90:	andeq	r1, r1, r0, asr #21
   11a94:	mov	r8, #1
   11a98:	mov	r0, sl
   11a9c:	b	11970 <__assert_fail@plt+0x4b4>
   11aa0:	mov	r0, #1
   11aa4:	str	r0, [fp, #-24]	; 0xffffffe8
   11aa8:	mov	r0, sl
   11aac:	b	11970 <__assert_fail@plt+0x4b4>
   11ab0:	mov	r0, #1
   11ab4:	str	r0, [sp, #12]
   11ab8:	mov	r0, sl
   11abc:	b	11970 <__assert_fail@plt+0x4b4>
   11ac0:	movw	r0, #53640	; 0xd188
   11ac4:	movw	r1, #53648	; 0xd190
   11ac8:	movt	r0, #2
   11acc:	movt	r1, #2
   11ad0:	ldr	r0, [r0]
   11ad4:	str	r0, [r1]
   11ad8:	mov	r0, sl
   11adc:	b	11970 <__assert_fail@plt+0x4b4>
   11ae0:	mov	r0, #16
   11ae4:	b	11970 <__assert_fail@plt+0x4b4>
   11ae8:	mov	r0, #1
   11aec:	strb	r0, [fp, #-20]	; 0xffffffec
   11af0:	mov	r0, sl
   11af4:	b	11970 <__assert_fail@plt+0x4b4>
   11af8:	mov	r0, #1
   11afc:	strb	r0, [fp, #-11]
   11b00:	mov	r0, sl
   11b04:	b	11970 <__assert_fail@plt+0x4b4>
   11b08:	mov	r8, #0
   11b0c:	mov	r0, sl
   11b10:	b	11970 <__assert_fail@plt+0x4b4>
   11b14:	str	r9, [fp, #-24]	; 0xffffffe8
   11b18:	mov	r0, sl
   11b1c:	b	11970 <__assert_fail@plt+0x4b4>
   11b20:	mov	r0, sl
   11b24:	b	11968 <__assert_fail@plt+0x4ac>
   11b28:	cmn	r0, #3
   11b2c:	beq	11b40 <__assert_fail@plt+0x684>
   11b30:	cmn	r0, #2
   11b34:	bne	11b94 <__assert_fail@plt+0x6d8>
   11b38:	mov	r0, #0
   11b3c:	bl	115b8 <__assert_fail@plt+0xfc>
   11b40:	movw	r0, #53544	; 0xd128
   11b44:	movw	r2, #46978	; 0xb782
   11b48:	mov	r1, #0
   11b4c:	movw	r7, #46962	; 0xb772
   11b50:	movt	r0, #2
   11b54:	movt	r2, #1
   11b58:	str	r1, [sp, #8]
   11b5c:	movw	r1, #46909	; 0xb73d
   11b60:	movt	r7, #1
   11b64:	movt	r1, #1
   11b68:	ldr	r3, [r0]
   11b6c:	movw	r0, #53636	; 0xd184
   11b70:	str	r2, [sp, #4]
   11b74:	movw	r2, #46948	; 0xb764
   11b78:	str	r7, [sp]
   11b7c:	movt	r0, #2
   11b80:	movt	r2, #1
   11b84:	ldr	r0, [r0]
   11b88:	bl	1916c <__assert_fail@plt+0x7cb0>
   11b8c:	mov	r0, #0
   11b90:	bl	11330 <exit@plt>
   11b94:	cmn	r0, #1
   11b98:	bne	11e74 <__assert_fail@plt+0x9b8>
   11b9c:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11ba0:	mov	r5, #16
   11ba4:	cmp	r0, #0
   11ba8:	bne	11bb4 <__assert_fail@plt+0x6f8>
   11bac:	mov	r0, r8
   11bb0:	b	11bf4 <__assert_fail@plt+0x738>
   11bb4:	cmp	sl, #16
   11bb8:	bne	11bec <__assert_fail@plt+0x730>
   11bbc:	mov	r0, #0
   11bc0:	cmp	r8, #1
   11bc4:	bne	11bf4 <__assert_fail@plt+0x738>
   11bc8:	movw	r1, #46991	; 0xb78f
   11bcc:	mov	r0, #0
   11bd0:	mov	r2, #5
   11bd4:	movt	r1, #1
   11bd8:	bl	1124c <dcgettext@plt>
   11bdc:	mov	r2, r0
   11be0:	mov	r0, #1
   11be4:	mov	r1, #0
   11be8:	bl	112d0 <error@plt>
   11bec:	mov	r0, r8
   11bf0:	mov	r5, sl
   11bf4:	movw	r9, #53648	; 0xd190
   11bf8:	movw	r8, #53624	; 0xd178
   11bfc:	cmp	r0, #0
   11c00:	mov	r2, #2
   11c04:	movt	r9, #2
   11c08:	movt	r8, #2
   11c0c:	movwne	r0, #1
   11c10:	strb	r0, [fp, #-12]
   11c14:	ldr	r1, [r9]
   11c18:	ldr	r0, [r8]
   11c1c:	cmp	r1, #0
   11c20:	sub	r3, r7, r0
   11c24:	movwne	r2, #1
   11c28:	cmp	r3, r2
   11c2c:	bge	11c78 <__assert_fail@plt+0x7bc>
   11c30:	cmp	r0, r7
   11c34:	bge	11cb8 <__assert_fail@plt+0x7fc>
   11c38:	movw	r1, #47049	; 0xb7c9
   11c3c:	mov	r0, #0
   11c40:	mov	r2, #5
   11c44:	movt	r1, #1
   11c48:	bl	1124c <dcgettext@plt>
   11c4c:	mov	r5, r0
   11c50:	add	r0, r4, r7, lsl #2
   11c54:	ldr	r0, [r0, #-4]
   11c58:	bl	18c28 <__assert_fail@plt+0x776c>
   11c5c:	mov	r3, r0
   11c60:	mov	r0, #0
   11c64:	mov	r1, #0
   11c68:	mov	r2, r5
   11c6c:	bl	112d0 <error@plt>
   11c70:	mov	r0, #1
   11c74:	bl	115b8 <__assert_fail@plt+0xfc>
   11c78:	cmp	r1, #0
   11c7c:	beq	11ce4 <__assert_fail@plt+0x828>
   11c80:	add	r2, sp, #16
   11c84:	mov	r0, #3
   11c88:	bl	1145c <__xstat64@plt>
   11c8c:	cmp	r0, #0
   11c90:	bne	11d94 <__assert_fail@plt+0x8d8>
   11c94:	ldr	r6, [sp, #44]	; 0x2c
   11c98:	mov	r7, r5
   11c9c:	mov	r0, r6
   11ca0:	bl	11ec4 <__assert_fail@plt+0xa08>
   11ca4:	str	r0, [fp, #-4]
   11ca8:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11cac:	cmp	r0, #0
   11cb0:	bne	11dd8 <__assert_fail@plt+0x91c>
   11cb4:	b	11e40 <__assert_fail@plt+0x984>
   11cb8:	movw	r1, #47033	; 0xb7b9
   11cbc:	mov	r0, #0
   11cc0:	mov	r2, #5
   11cc4:	movt	r1, #1
   11cc8:	bl	1124c <dcgettext@plt>
   11ccc:	mov	r2, r0
   11cd0:	mov	r0, #0
   11cd4:	mov	r1, #0
   11cd8:	bl	112d0 <error@plt>
   11cdc:	mov	r0, #1
   11ce0:	bl	115b8 <__assert_fail@plt+0xfc>
   11ce4:	add	r1, r0, #1
   11ce8:	mov	r7, r5
   11cec:	str	r1, [r8]
   11cf0:	ldr	r5, [r4, r0, lsl #2]
   11cf4:	mov	r0, #0
   11cf8:	ldrb	r1, [r5]
   11cfc:	cmp	r1, #0
   11d00:	beq	11d0c <__assert_fail@plt+0x850>
   11d04:	mov	r0, r5
   11d08:	bl	198a4 <__assert_fail@plt+0x83e8>
   11d0c:	str	r0, [fp, #-4]
   11d10:	mvn	r6, #0
   11d14:	ldrb	r0, [r5]
   11d18:	cmp	r0, #0
   11d1c:	beq	11dcc <__assert_fail@plt+0x910>
   11d20:	mov	r0, r5
   11d24:	bl	114b0 <getgrnam@plt>
   11d28:	cmp	r0, #0
   11d2c:	bne	11dbc <__assert_fail@plt+0x900>
   11d30:	movw	r0, #46676	; 0xb654
   11d34:	add	r3, sp, #16
   11d38:	mov	r1, #0
   11d3c:	mov	r2, #10
   11d40:	movt	r0, #1
   11d44:	str	r0, [sp]
   11d48:	mov	r0, r5
   11d4c:	bl	1999c <__assert_fail@plt+0x84e0>
   11d50:	cmp	r0, #0
   11d54:	ldreq	r0, [sp, #20]
   11d58:	cmpeq	r0, #0
   11d5c:	beq	11dc4 <__assert_fail@plt+0x908>
   11d60:	movw	r1, #47500	; 0xb98c
   11d64:	mov	r0, #0
   11d68:	mov	r2, #5
   11d6c:	movt	r1, #1
   11d70:	bl	1124c <dcgettext@plt>
   11d74:	mov	r4, r0
   11d78:	mov	r0, r5
   11d7c:	bl	18c28 <__assert_fail@plt+0x776c>
   11d80:	mov	r3, r0
   11d84:	mov	r0, #1
   11d88:	mov	r1, #0
   11d8c:	mov	r2, r4
   11d90:	bl	112d0 <error@plt>
   11d94:	bl	11378 <__errno_location@plt>
   11d98:	movw	r1, #47074	; 0xb7e2
   11d9c:	ldr	r4, [r0]
   11da0:	mov	r0, #0
   11da4:	mov	r2, #5
   11da8:	movt	r1, #1
   11dac:	bl	1124c <dcgettext@plt>
   11db0:	ldr	r1, [r9]
   11db4:	mov	r5, r0
   11db8:	b	11e24 <__assert_fail@plt+0x968>
   11dbc:	ldr	r6, [r0, #8]
   11dc0:	b	11dc8 <__assert_fail@plt+0x90c>
   11dc4:	ldr	r6, [sp, #16]
   11dc8:	bl	111b0 <endgrent@plt>
   11dcc:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11dd0:	cmp	r0, #0
   11dd4:	beq	11e40 <__assert_fail@plt+0x984>
   11dd8:	ldr	r0, [sp, #12]
   11ddc:	eor	r0, r0, #1
   11de0:	tst	r0, #1
   11de4:	bne	11e40 <__assert_fail@plt+0x984>
   11de8:	add	r0, r9, #8
   11dec:	bl	18c40 <__assert_fail@plt+0x7784>
   11df0:	cmp	r0, #0
   11df4:	str	r0, [fp, #-16]
   11df8:	bne	11e40 <__assert_fail@plt+0x984>
   11dfc:	bl	11378 <__errno_location@plt>
   11e00:	movw	r1, #47074	; 0xb7e2
   11e04:	ldr	r4, [r0]
   11e08:	mov	r0, #0
   11e0c:	mov	r2, #5
   11e10:	movt	r1, #1
   11e14:	bl	1124c <dcgettext@plt>
   11e18:	movw	r1, #49919	; 0xc2ff
   11e1c:	mov	r5, r0
   11e20:	movt	r1, #1
   11e24:	mov	r0, #4
   11e28:	bl	18700 <__assert_fail@plt+0x7244>
   11e2c:	mov	r3, r0
   11e30:	mov	r0, #1
   11e34:	mov	r1, r4
   11e38:	mov	r2, r5
   11e3c:	bl	112d0 <error@plt>
   11e40:	ldr	r0, [r8]
   11e44:	mvn	r1, #0
   11e48:	mvn	r2, #0
   11e4c:	mov	r3, r6
   11e50:	str	r1, [sp]
   11e54:	str	r1, [sp, #4]
   11e58:	sub	r1, fp, #24
   11e5c:	str	r1, [sp, #8]
   11e60:	orr	r1, r7, #1024	; 0x400
   11e64:	add	r0, r4, r0, lsl #2
   11e68:	bl	11f54 <__assert_fail@plt+0xa98>
   11e6c:	eor	r0, r0, #1
   11e70:	bl	11330 <exit@plt>
   11e74:	mov	r0, #1
   11e78:	bl	115b8 <__assert_fail@plt+0xfc>
   11e7c:	mov	r1, #0
   11e80:	mov	r2, #2
   11e84:	str	r1, [r0, #8]
   11e88:	str	r2, [r0]
   11e8c:	mov	r2, #1
   11e90:	str	r1, [r0, #16]
   11e94:	str	r1, [r0, #20]
   11e98:	strh	r2, [r0, #12]
   11e9c:	strb	r1, [r0, #4]
   11ea0:	bx	lr
   11ea4:	push	{r4, sl, fp, lr}
   11ea8:	add	fp, sp, #8
   11eac:	mov	r4, r0
   11eb0:	ldr	r0, [r0, #16]
   11eb4:	bl	12e18 <__assert_fail@plt+0x195c>
   11eb8:	ldr	r0, [r4, #20]
   11ebc:	pop	{r4, sl, fp, lr}
   11ec0:	b	12e18 <__assert_fail@plt+0x195c>
   11ec4:	push	{r4, sl, fp, lr}
   11ec8:	add	fp, sp, #8
   11ecc:	sub	sp, sp, #24
   11ed0:	mov	r4, r0
   11ed4:	bl	114a4 <getgrgid@plt>
   11ed8:	cmp	r0, #0
   11edc:	beq	11ef0 <__assert_fail@plt+0xa34>
   11ee0:	ldr	r0, [r0]
   11ee4:	bl	198a4 <__assert_fail@plt+0x83e8>
   11ee8:	sub	sp, fp, #8
   11eec:	pop	{r4, sl, fp, pc}
   11ef0:	add	r2, sp, #3
   11ef4:	mov	r0, r4
   11ef8:	mov	r1, #0
   11efc:	bl	16b70 <__assert_fail@plt+0x56b4>
   11f00:	bl	198a4 <__assert_fail@plt+0x83e8>
   11f04:	sub	sp, fp, #8
   11f08:	pop	{r4, sl, fp, pc}
   11f0c:	push	{r4, sl, fp, lr}
   11f10:	add	fp, sp, #8
   11f14:	sub	sp, sp, #24
   11f18:	mov	r4, r0
   11f1c:	bl	111e0 <getpwuid@plt>
   11f20:	cmp	r0, #0
   11f24:	beq	11f38 <__assert_fail@plt+0xa7c>
   11f28:	ldr	r0, [r0]
   11f2c:	bl	198a4 <__assert_fail@plt+0x83e8>
   11f30:	sub	sp, fp, #8
   11f34:	pop	{r4, sl, fp, pc}
   11f38:	add	r2, sp, #3
   11f3c:	mov	r0, r4
   11f40:	mov	r1, #0
   11f44:	bl	16b70 <__assert_fail@plt+0x56b4>
   11f48:	bl	198a4 <__assert_fail@plt+0x83e8>
   11f4c:	sub	sp, fp, #8
   11f50:	pop	{r4, sl, fp, pc}
   11f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f58:	add	fp, sp, #28
   11f5c:	sub	sp, sp, #252	; 0xfc
   11f60:	str	r3, [sp, #12]
   11f64:	str	r2, [sp, #20]
   11f68:	ldr	r2, [fp, #8]
   11f6c:	ldr	r3, [fp, #12]
   11f70:	ldr	r5, [fp, #16]
   11f74:	and	r3, r3, r2
   11f78:	mov	r2, #0
   11f7c:	cmn	r3, #1
   11f80:	str	r3, [sp, #24]
   11f84:	bne	11fa8 <__assert_fail@plt+0xaec>
   11f88:	ldrb	r3, [r5, #12]
   11f8c:	cmp	r3, #0
   11f90:	bne	11fa8 <__assert_fail@plt+0xaec>
   11f94:	ldr	r2, [r5]
   11f98:	sub	r2, r2, #2
   11f9c:	clz	r2, r2
   11fa0:	lsr	r2, r2, #5
   11fa4:	lsl	r2, r2, #3
   11fa8:	orr	r1, r2, r1
   11fac:	mov	r2, #0
   11fb0:	bl	19920 <__assert_fail@plt+0x8464>
   11fb4:	str	r0, [sp, #36]	; 0x24
   11fb8:	bl	13980 <__assert_fail@plt+0x24c4>
   11fbc:	cmp	r0, #0
   11fc0:	beq	12bdc <__assert_fail@plt+0x1720>
   11fc4:	ldr	r1, [sp, #20]
   11fc8:	mov	r9, r0
   11fcc:	movw	r0, #48244	; 0xbc74
   11fd0:	movw	r2, #48219	; 0xbc5b
   11fd4:	mov	r6, #1
   11fd8:	movt	r0, #1
   11fdc:	movt	r2, #1
   11fe0:	cmn	r1, #1
   11fe4:	moveq	r2, r0
   11fe8:	sub	r0, fp, #136	; 0x88
   11fec:	add	r0, r0, #96	; 0x60
   11ff0:	str	r2, [sp, #8]
   11ff4:	str	r0, [sp, #4]
   11ff8:	b	12070 <__assert_fail@plt+0xbb4>
   11ffc:	movw	r1, #48265	; 0xbc89
   12000:	mov	r0, #0
   12004:	mov	r2, #5
   12008:	movt	r1, #1
   1200c:	bl	1124c <dcgettext@plt>
   12010:	ldr	r1, [sp, #28]
   12014:	mov	r4, r0
   12018:	mov	r0, #4
   1201c:	bl	18700 <__assert_fail@plt+0x7244>
   12020:	mov	r2, r0
   12024:	mov	r0, #1
   12028:	mov	r1, r4
   1202c:	bl	1139c <__printf_chk@plt>
   12030:	mov	r0, r7
   12034:	bl	12e18 <__assert_fail@plt+0x195c>
   12038:	mov	r0, sl
   1203c:	bl	12e18 <__assert_fail@plt+0x195c>
   12040:	ldr	r4, [sp, #16]
   12044:	ldr	r5, [fp, #16]
   12048:	ldrb	r0, [r5, #4]
   1204c:	cmp	r0, #0
   12050:	beq	12184 <__assert_fail@plt+0xcc8>
   12054:	ldr	r6, [sp, #32]
   12058:	ldr	r0, [sp, #36]	; 0x24
   1205c:	and	r6, r6, r4
   12060:	bl	13980 <__assert_fail@plt+0x24c4>
   12064:	mov	r9, r0
   12068:	cmp	r0, #0
   1206c:	beq	12be0 <__assert_fail@plt+0x1724>
   12070:	ldrh	r0, [r9, #56]	; 0x38
   12074:	ldr	r8, [r9, #24]
   12078:	ldr	r7, [r9, #28]
   1207c:	add	sl, r9, #64	; 0x40
   12080:	sub	r0, r0, #1
   12084:	cmp	r0, #9
   12088:	bhi	122a4 <__assert_fail@plt+0xde8>
   1208c:	add	r1, pc, #0
   12090:	ldr	pc, [r1, r0, lsl #2]
   12094:	strheq	r2, [r1], -ip
   12098:	andeq	r2, r1, r0, asr #4
   1209c:	andeq	r2, r1, r4, lsr #5
   120a0:	muleq	r1, r8, r1
   120a4:	andeq	r2, r1, r4, lsr #5
   120a8:	muleq	r1, r8, r2
   120ac:	andeq	r2, r1, ip, lsr #7
   120b0:	andeq	r2, r1, r4, lsr #5
   120b4:	andeq	r2, r1, r4, lsr #5
   120b8:	andeq	r2, r1, ip, asr #3
   120bc:	ldrb	r0, [r5, #4]
   120c0:	cmp	r0, #0
   120c4:	beq	122a4 <__assert_fail@plt+0xde8>
   120c8:	ldr	r0, [r5, #8]
   120cc:	mov	r4, #1
   120d0:	cmp	r0, #0
   120d4:	beq	12058 <__assert_fail@plt+0xb9c>
   120d8:	add	r1, r9, #160	; 0xa0
   120dc:	mov	r8, r6
   120e0:	ldrd	r2, [r0]
   120e4:	ldr	r6, [r1]
   120e8:	ldr	r5, [r1, #4]
   120ec:	eor	r1, r5, r3
   120f0:	eor	r2, r6, r2
   120f4:	orrs	r1, r2, r1
   120f8:	bne	12588 <__assert_fail@plt+0x10cc>
   120fc:	ldrd	r0, [r0, #8]
   12100:	ldrd	r2, [sl]
   12104:	ldr	r5, [fp, #16]
   12108:	mov	r6, r8
   1210c:	eor	r1, r3, r1
   12110:	eor	r0, r2, r0
   12114:	orrs	r0, r0, r1
   12118:	bne	12058 <__assert_fail@plt+0xb9c>
   1211c:	movw	r6, #49919	; 0xc2ff
   12120:	mov	r0, r7
   12124:	movt	r6, #1
   12128:	mov	r1, r6
   1212c:	bl	111d4 <strcmp@plt>
   12130:	cmp	r0, #0
   12134:	beq	12aac <__assert_fail@plt+0x15f0>
   12138:	movw	r1, #47862	; 0xbaf6
   1213c:	mov	r0, #0
   12140:	mov	r2, #5
   12144:	movt	r1, #1
   12148:	bl	1124c <dcgettext@plt>
   1214c:	mov	r4, r0
   12150:	mov	r0, #0
   12154:	mov	r1, #4
   12158:	mov	r2, r7
   1215c:	bl	18658 <__assert_fail@plt+0x719c>
   12160:	mov	r5, r0
   12164:	mov	r0, #1
   12168:	mov	r1, #4
   1216c:	mov	r2, r6
   12170:	bl	18658 <__assert_fail@plt+0x719c>
   12174:	mov	r3, r5
   12178:	ldr	r5, [fp, #16]
   1217c:	str	r0, [sp]
   12180:	b	12ad4 <__assert_fail@plt+0x1618>
   12184:	ldr	r0, [sp, #36]	; 0x24
   12188:	mov	r1, r9
   1218c:	mov	r2, #4
   12190:	bl	151e0 <__assert_fail@plt+0x3d24>
   12194:	b	12054 <__assert_fail@plt+0xb98>
   12198:	ldrb	r0, [r5, #13]
   1219c:	str	r6, [sp, #32]
   121a0:	mov	sl, #0
   121a4:	mov	r6, #1
   121a8:	str	r7, [sp, #28]
   121ac:	cmp	r0, #0
   121b0:	bne	123c8 <__assert_fail@plt+0xf0c>
   121b4:	ldr	r4, [r9, #32]
   121b8:	movw	r1, #47986	; 0xbb72
   121bc:	mov	sl, #0
   121c0:	mov	r0, #0
   121c4:	movt	r1, #1
   121c8:	b	12214 <__assert_fail@plt+0xd58>
   121cc:	ldr	r0, [r9, #48]	; 0x30
   121d0:	cmp	r0, #0
   121d4:	bne	121e4 <__assert_fail@plt+0xd28>
   121d8:	ldr	r0, [r9, #16]
   121dc:	cmp	r0, #0
   121e0:	beq	125b8 <__assert_fail@plt+0x10fc>
   121e4:	ldrb	r0, [r5, #13]
   121e8:	str	r6, [sp, #32]
   121ec:	mov	sl, #0
   121f0:	mov	r6, #1
   121f4:	str	r7, [sp, #28]
   121f8:	cmp	r0, #0
   121fc:	bne	123c8 <__assert_fail@plt+0xf0c>
   12200:	ldr	r4, [r9, #32]
   12204:	movw	r1, #47969	; 0xbb61
   12208:	mov	sl, #0
   1220c:	mov	r0, #0
   12210:	movt	r1, #1
   12214:	mov	r2, #5
   12218:	bl	1124c <dcgettext@plt>
   1221c:	mov	r5, r0
   12220:	mov	r0, #4
   12224:	mov	r1, r7
   12228:	bl	18700 <__assert_fail@plt+0x7244>
   1222c:	mov	r3, r0
   12230:	mov	r0, #0
   12234:	mov	r1, r4
   12238:	mov	r2, r5
   1223c:	b	1253c <__assert_fail@plt+0x1080>
   12240:	ldr	r0, [sp, #36]	; 0x24
   12244:	mov	r1, r9
   12248:	bl	1996c <__assert_fail@plt+0x84b0>
   1224c:	cmp	r0, #0
   12250:	beq	122a4 <__assert_fail@plt+0xde8>
   12254:	movw	r1, #48011	; 0xbb8b
   12258:	mov	r0, #0
   1225c:	mov	r2, #5
   12260:	movt	r1, #1
   12264:	bl	1124c <dcgettext@plt>
   12268:	mov	r4, r0
   1226c:	mov	r0, #0
   12270:	mov	r1, #3
   12274:	mov	r2, r7
   12278:	bl	1897c <__assert_fail@plt+0x74c0>
   1227c:	mov	r3, r0
   12280:	mov	r0, #0
   12284:	mov	r1, #0
   12288:	mov	r2, r4
   1228c:	bl	112d0 <error@plt>
   12290:	mov	r4, #0
   12294:	b	12058 <__assert_fail@plt+0xb9c>
   12298:	ldrb	r0, [r5, #4]
   1229c:	cmp	r0, #0
   122a0:	beq	12508 <__assert_fail@plt+0x104c>
   122a4:	ldr	r0, [sp, #24]
   122a8:	str	r6, [sp, #32]
   122ac:	cmn	r0, #1
   122b0:	bne	122cc <__assert_fail@plt+0xe10>
   122b4:	ldr	r0, [r5]
   122b8:	cmp	r0, #2
   122bc:	bne	122cc <__assert_fail@plt+0xe10>
   122c0:	ldr	r0, [r5, #8]
   122c4:	cmp	r0, #0
   122c8:	beq	12594 <__assert_fail@plt+0x10d8>
   122cc:	ldrb	r0, [r5, #12]
   122d0:	cmp	r0, #0
   122d4:	beq	12378 <__assert_fail@plt+0xebc>
   122d8:	ldr	r0, [r9, #80]	; 0x50
   122dc:	and	r0, r0, #61440	; 0xf000
   122e0:	cmp	r0, #40960	; 0xa000
   122e4:	bne	12378 <__assert_fail@plt+0xebc>
   122e8:	ldr	r0, [sp, #36]	; 0x24
   122ec:	add	sl, sp, #40	; 0x28
   122f0:	mov	r2, r8
   122f4:	mov	r3, sl
   122f8:	ldr	r1, [r0, #32]
   122fc:	mov	r0, #0
   12300:	str	r0, [sp]
   12304:	mov	r0, #3
   12308:	bl	11270 <__fxstatat64@plt>
   1230c:	cmp	r0, #0
   12310:	beq	12378 <__assert_fail@plt+0xebc>
   12314:	ldrb	r0, [r5, #13]
   12318:	mov	r4, #0
   1231c:	mov	r6, #1
   12320:	str	r7, [sp, #28]
   12324:	cmp	r0, #0
   12328:	bne	12370 <__assert_fail@plt+0xeb4>
   1232c:	bl	11378 <__errno_location@plt>
   12330:	movw	r1, #48197	; 0xbc45
   12334:	ldr	r4, [r0]
   12338:	mov	r0, #0
   1233c:	mov	r2, #5
   12340:	movt	r1, #1
   12344:	bl	1124c <dcgettext@plt>
   12348:	ldr	r1, [sp, #28]
   1234c:	mov	r5, r0
   12350:	mov	r0, #4
   12354:	bl	18700 <__assert_fail@plt+0x7244>
   12358:	mov	r3, r0
   1235c:	mov	r0, #0
   12360:	mov	r1, r4
   12364:	mov	r2, r5
   12368:	bl	112d0 <error@plt>
   1236c:	mov	r4, #0
   12370:	add	sl, sp, #40	; 0x28
   12374:	b	12a94 <__assert_fail@plt+0x15d8>
   12378:	ldr	r2, [fp, #8]
   1237c:	cmn	r2, #1
   12380:	beq	123d0 <__assert_fail@plt+0xf14>
   12384:	ldr	r1, [sl, #24]
   12388:	ldr	r3, [fp, #12]
   1238c:	sub	r0, r1, r2
   12390:	cmn	r3, #1
   12394:	clz	r0, r0
   12398:	lsr	r0, r0, #5
   1239c:	beq	123f0 <__assert_fail@plt+0xf34>
   123a0:	cmp	r1, r2
   123a4:	beq	123dc <__assert_fail@plt+0xf20>
   123a8:	b	123f0 <__assert_fail@plt+0xf34>
   123ac:	ldrb	r0, [r5, #13]
   123b0:	str	r6, [sp, #32]
   123b4:	mov	sl, #0
   123b8:	mov	r6, #1
   123bc:	str	r7, [sp, #28]
   123c0:	cmp	r0, #0
   123c4:	beq	12510 <__assert_fail@plt+0x1054>
   123c8:	mov	r5, #1
   123cc:	b	126f8 <__assert_fail@plt+0x123c>
   123d0:	ldr	r0, [fp, #12]
   123d4:	cmn	r0, #1
   123d8:	beq	125a4 <__assert_fail@plt+0x10e8>
   123dc:	ldr	r0, [sl, #28]
   123e0:	ldr	r1, [fp, #12]
   123e4:	sub	r0, r0, r1
   123e8:	clz	r0, r0
   123ec:	lsr	r0, r0, #5
   123f0:	ldrh	r1, [r9, #56]	; 0x38
   123f4:	cmp	r1, #6
   123f8:	bhi	12414 <__assert_fail@plt+0xf58>
   123fc:	mov	r2, #1
   12400:	mov	r3, #86	; 0x56
   12404:	tst	r3, r2, lsl r1
   12408:	ldrne	r1, [r5, #8]
   1240c:	cmpne	r1, #0
   12410:	bne	12464 <__assert_fail@plt+0xfa8>
   12414:	mov	r4, #1
   12418:	cmp	r0, #0
   1241c:	str	r7, [sp, #28]
   12420:	beq	12a90 <__assert_fail@plt+0x15d4>
   12424:	ldr	r0, [sp, #36]	; 0x24
   12428:	ldr	r6, [r0, #32]
   1242c:	ldrb	r0, [r5, #12]
   12430:	cmp	r0, #0
   12434:	beq	12548 <__assert_fail@plt+0x108c>
   12438:	ldr	r0, [sp, #24]
   1243c:	cmn	r0, #1
   12440:	beq	12678 <__assert_fail@plt+0x11bc>
   12444:	ldr	r0, [sl, #16]
   12448:	and	r0, r0, #61440	; 0xf000
   1244c:	cmp	r0, #32768	; 0x8000
   12450:	beq	125d8 <__assert_fail@plt+0x111c>
   12454:	cmp	r0, #16384	; 0x4000
   12458:	bne	12678 <__assert_fail@plt+0x11bc>
   1245c:	mov	r5, #18688	; 0x4900
   12460:	b	125dc <__assert_fail@plt+0x1120>
   12464:	ldrd	r2, [r1]
   12468:	ldr	r5, [sl, #100]	; 0x64
   1246c:	ldr	r6, [sl, #96]	; 0x60
   12470:	eor	r3, r5, r3
   12474:	ldr	r5, [fp, #16]
   12478:	eor	r2, r6, r2
   1247c:	orrs	r2, r2, r3
   12480:	bne	12414 <__assert_fail@plt+0xf58>
   12484:	ldrd	r2, [r1, #8]
   12488:	ldr	r1, [sl, #4]
   1248c:	ldr	r6, [sl]
   12490:	eor	r1, r1, r3
   12494:	eor	r2, r6, r2
   12498:	orrs	r1, r2, r1
   1249c:	bne	12414 <__assert_fail@plt+0xf58>
   124a0:	movw	r6, #49919	; 0xc2ff
   124a4:	mov	r0, r7
   124a8:	movt	r6, #1
   124ac:	mov	r1, r6
   124b0:	bl	111d4 <strcmp@plt>
   124b4:	cmp	r0, #0
   124b8:	beq	129f8 <__assert_fail@plt+0x153c>
   124bc:	movw	r1, #47862	; 0xbaf6
   124c0:	mov	r0, #0
   124c4:	mov	r2, #5
   124c8:	movt	r1, #1
   124cc:	bl	1124c <dcgettext@plt>
   124d0:	mov	r4, r0
   124d4:	mov	r0, #0
   124d8:	mov	r1, #4
   124dc:	mov	r2, r7
   124e0:	bl	18658 <__assert_fail@plt+0x719c>
   124e4:	mov	r5, r0
   124e8:	mov	r0, #1
   124ec:	mov	r1, #4
   124f0:	mov	r2, r6
   124f4:	bl	18658 <__assert_fail@plt+0x719c>
   124f8:	mov	r3, r5
   124fc:	ldr	r5, [fp, #16]
   12500:	str	r0, [sp]
   12504:	b	12a20 <__assert_fail@plt+0x1564>
   12508:	mov	r4, #1
   1250c:	b	12058 <__assert_fail@plt+0xb9c>
   12510:	ldr	r4, [r9, #32]
   12514:	mov	r0, #0
   12518:	mov	r1, #3
   1251c:	mov	r2, r7
   12520:	mov	sl, #0
   12524:	bl	1897c <__assert_fail@plt+0x74c0>
   12528:	movw	r2, #47515	; 0xb99b
   1252c:	mov	r3, r0
   12530:	mov	r0, #0
   12534:	mov	r1, r4
   12538:	movt	r2, #1
   1253c:	bl	112d0 <error@plt>
   12540:	mov	r5, #1
   12544:	b	126f8 <__assert_fail@plt+0x123c>
   12548:	ldr	r2, [sp, #20]
   1254c:	ldr	r3, [sp, #12]
   12550:	mov	r0, #256	; 0x100
   12554:	mov	r1, r8
   12558:	str	r0, [sp]
   1255c:	mov	r0, r6
   12560:	bl	11444 <fchownat@plt>
   12564:	cmp	r0, #0
   12568:	beq	129d8 <__assert_fail@plt+0x151c>
   1256c:	bl	11378 <__errno_location@plt>
   12570:	ldr	r0, [r0]
   12574:	mov	r6, #0
   12578:	cmp	r0, #95	; 0x5f
   1257c:	bne	126a0 <__assert_fail@plt+0x11e4>
   12580:	mov	r5, #0
   12584:	b	129e0 <__assert_fail@plt+0x1524>
   12588:	ldr	r5, [fp, #16]
   1258c:	mov	r6, r8
   12590:	b	12058 <__assert_fail@plt+0xb9c>
   12594:	ldrb	r0, [r5, #12]
   12598:	add	sl, r9, #64	; 0x40
   1259c:	cmp	r0, #0
   125a0:	bne	122d8 <__assert_fail@plt+0xe1c>
   125a4:	mov	r0, #1
   125a8:	ldrh	r1, [r9, #56]	; 0x38
   125ac:	cmp	r1, #6
   125b0:	bls	123fc <__assert_fail@plt+0xf40>
   125b4:	b	12414 <__assert_fail@plt+0xf58>
   125b8:	mov	r0, #1
   125bc:	mov	r1, r9
   125c0:	mov	r2, #1
   125c4:	str	r0, [r9, #16]
   125c8:	ldr	r0, [sp, #36]	; 0x24
   125cc:	bl	151e0 <__assert_fail@plt+0x3d24>
   125d0:	mov	r4, #1
   125d4:	b	12058 <__assert_fail@plt+0xb9c>
   125d8:	mov	r5, #2304	; 0x900
   125dc:	mov	r0, r6
   125e0:	mov	r1, r8
   125e4:	mov	r2, r5
   125e8:	bl	11360 <openat64@plt>
   125ec:	mov	r7, r0
   125f0:	cmn	r0, #1
   125f4:	ble	1262c <__assert_fail@plt+0x1170>
   125f8:	mov	r0, #3
   125fc:	mov	r1, r7
   12600:	sub	r2, fp, #136	; 0x88
   12604:	bl	11288 <__fxstat64@plt>
   12608:	cmp	r0, #0
   1260c:	beq	12950 <__assert_fail@plt+0x1494>
   12610:	bl	11378 <__errno_location@plt>
   12614:	ldr	r5, [r0]
   12618:	mov	r4, r0
   1261c:	mov	r0, r7
   12620:	bl	11480 <close@plt>
   12624:	str	r5, [r4]
   12628:	b	126a0 <__assert_fail@plt+0x11e4>
   1262c:	bl	11378 <__errno_location@plt>
   12630:	mov	r4, r0
   12634:	ldr	r0, [r0]
   12638:	cmp	r0, #13
   1263c:	bne	126a0 <__assert_fail@plt+0x11e4>
   12640:	ldr	r0, [sl, #16]
   12644:	and	r0, r0, #61440	; 0xf000
   12648:	cmp	r0, #32768	; 0x8000
   1264c:	bne	12678 <__assert_fail@plt+0x11bc>
   12650:	orr	r2, r5, #1
   12654:	mov	r0, r6
   12658:	mov	r1, r8
   1265c:	bl	11360 <openat64@plt>
   12660:	mov	r7, r0
   12664:	cmn	r0, #1
   12668:	bgt	125f8 <__assert_fail@plt+0x113c>
   1266c:	ldr	r0, [r4]
   12670:	cmp	r0, #13
   12674:	bne	126a0 <__assert_fail@plt+0x11e4>
   12678:	ldr	r0, [sp, #36]	; 0x24
   1267c:	ldr	r2, [sp, #20]
   12680:	ldr	r3, [sp, #12]
   12684:	mov	r5, #0
   12688:	mov	r1, r8
   1268c:	str	r5, [sp]
   12690:	ldr	r0, [r0, #32]
   12694:	bl	11444 <fchownat@plt>
   12698:	cmp	r0, #0
   1269c:	beq	129dc <__assert_fail@plt+0x1520>
   126a0:	ldr	r0, [fp, #16]
   126a4:	mov	r5, #0
   126a8:	ldrb	r0, [r0, #13]
   126ac:	cmp	r0, #0
   126b0:	bne	126f4 <__assert_fail@plt+0x1238>
   126b4:	bl	11378 <__errno_location@plt>
   126b8:	ldr	r1, [sp, #8]
   126bc:	ldr	r4, [r0]
   126c0:	mov	r0, #0
   126c4:	mov	r2, #5
   126c8:	mov	r5, #0
   126cc:	bl	1124c <dcgettext@plt>
   126d0:	ldr	r1, [sp, #28]
   126d4:	mov	r6, r0
   126d8:	mov	r0, #4
   126dc:	bl	18700 <__assert_fail@plt+0x7244>
   126e0:	mov	r3, r0
   126e4:	mov	r0, #0
   126e8:	mov	r1, r4
   126ec:	mov	r2, r6
   126f0:	bl	112d0 <error@plt>
   126f4:	mov	r6, #1
   126f8:	mov	r4, #0
   126fc:	ldr	r0, [fp, #16]
   12700:	ldr	r0, [r0]
   12704:	cmp	r0, #2
   12708:	beq	12044 <__assert_fail@plt+0xb88>
   1270c:	eor	r1, r4, #1
   12710:	orrs	r1, r5, r1
   12714:	eorseq	r1, r6, #1
   12718:	beq	1275c <__assert_fail@plt+0x12a0>
   1271c:	cmp	r0, #0
   12720:	bne	12044 <__assert_fail@plt+0xb88>
   12724:	cmp	r6, #0
   12728:	mov	r5, #1
   1272c:	mov	r0, #3
   12730:	str	r4, [sp, #16]
   12734:	movwne	r5, #4
   12738:	cmp	r4, #0
   1273c:	moveq	r5, r0
   12740:	cmp	sl, #0
   12744:	bne	127b0 <__assert_fail@plt+0x12f4>
   12748:	mov	r7, #0
   1274c:	mov	sl, #0
   12750:	cmp	r5, #1
   12754:	beq	11ffc <__assert_fail@plt+0xb40>
   12758:	b	12830 <__assert_fail@plt+0x1374>
   1275c:	ldr	r1, [sp, #20]
   12760:	cmn	r1, #1
   12764:	beq	12778 <__assert_fail@plt+0x12bc>
   12768:	ldr	r1, [sl, #24]
   1276c:	ldr	r2, [sp, #20]
   12770:	cmp	r1, r2
   12774:	bne	12794 <__assert_fail@plt+0x12d8>
   12778:	ldr	r1, [sp, #12]
   1277c:	cmn	r1, #1
   12780:	beq	1271c <__assert_fail@plt+0x1260>
   12784:	ldr	r1, [sl, #28]
   12788:	ldr	r2, [sp, #12]
   1278c:	cmp	r1, r2
   12790:	beq	1271c <__assert_fail@plt+0x1260>
   12794:	cmp	r6, #0
   12798:	mov	r5, #1
   1279c:	mov	r0, #3
   127a0:	str	r4, [sp, #16]
   127a4:	movwne	r5, #2
   127a8:	cmp	r4, #0
   127ac:	moveq	r5, r0
   127b0:	ldr	r4, [sl, #24]
   127b4:	mov	r0, r4
   127b8:	bl	111e0 <getpwuid@plt>
   127bc:	cmp	r0, #0
   127c0:	beq	127cc <__assert_fail@plt+0x1310>
   127c4:	ldr	r0, [r0]
   127c8:	b	127dc <__assert_fail@plt+0x1320>
   127cc:	mov	r0, r4
   127d0:	mov	r1, #0
   127d4:	sub	r2, fp, #136	; 0x88
   127d8:	bl	16b70 <__assert_fail@plt+0x56b4>
   127dc:	bl	198a4 <__assert_fail@plt+0x83e8>
   127e0:	ldr	r4, [sl, #28]
   127e4:	mov	r7, r0
   127e8:	mov	r0, r4
   127ec:	bl	114a4 <getgrgid@plt>
   127f0:	cmp	r0, #0
   127f4:	beq	12810 <__assert_fail@plt+0x1354>
   127f8:	ldr	r0, [r0]
   127fc:	bl	198a4 <__assert_fail@plt+0x83e8>
   12800:	mov	sl, r0
   12804:	cmp	r5, #1
   12808:	beq	11ffc <__assert_fail@plt+0xb40>
   1280c:	b	12830 <__assert_fail@plt+0x1374>
   12810:	mov	r0, r4
   12814:	mov	r1, #0
   12818:	sub	r2, fp, #136	; 0x88
   1281c:	bl	16b70 <__assert_fail@plt+0x56b4>
   12820:	bl	198a4 <__assert_fail@plt+0x83e8>
   12824:	mov	sl, r0
   12828:	cmp	r5, #1
   1282c:	beq	11ffc <__assert_fail@plt+0xb40>
   12830:	ldr	r0, [fp, #16]
   12834:	ldr	r6, [r0, #20]
   12838:	ldr	r4, [r0, #16]
   1283c:	mov	r0, r4
   12840:	mov	r1, r6
   12844:	bl	12c7c <__assert_fail@plt+0x17c0>
   12848:	cmp	r4, #0
   1284c:	mov	r8, r0
   12850:	mov	r0, r4
   12854:	mov	r1, r6
   12858:	movne	r0, r7
   1285c:	cmp	r6, #0
   12860:	movne	r1, sl
   12864:	bl	12c7c <__assert_fail@plt+0x17c0>
   12868:	cmp	r5, #4
   1286c:	beq	128c0 <__assert_fail@plt+0x1404>
   12870:	cmp	r5, #3
   12874:	beq	1289c <__assert_fail@plt+0x13e0>
   12878:	cmp	r5, #2
   1287c:	bne	12c78 <__assert_fail@plt+0x17bc>
   12880:	mov	r5, r0
   12884:	mov	r0, #0
   12888:	cmp	r4, #0
   1288c:	beq	128dc <__assert_fail@plt+0x1420>
   12890:	movw	r1, #48321	; 0xbcc1
   12894:	movt	r1, #1
   12898:	b	12b50 <__assert_fail@plt+0x1694>
   1289c:	cmp	r0, #0
   128a0:	beq	128f0 <__assert_fail@plt+0x1434>
   128a4:	mov	r5, r0
   128a8:	mov	r0, #0
   128ac:	cmp	r4, #0
   128b0:	beq	12a60 <__assert_fail@plt+0x15a4>
   128b4:	movw	r1, #48425	; 0xbd29
   128b8:	movt	r1, #1
   128bc:	b	12b50 <__assert_fail@plt+0x1694>
   128c0:	mov	r5, r0
   128c4:	mov	r0, #0
   128c8:	cmp	r4, #0
   128cc:	beq	1293c <__assert_fail@plt+0x1480>
   128d0:	movw	r1, #48627	; 0xbdf3
   128d4:	movt	r1, #1
   128d8:	b	12b50 <__assert_fail@plt+0x1694>
   128dc:	cmp	r6, #0
   128e0:	beq	12b30 <__assert_fail@plt+0x1674>
   128e4:	movw	r1, #48360	; 0xbce8
   128e8:	movt	r1, #1
   128ec:	b	12b50 <__assert_fail@plt+0x1694>
   128f0:	movw	r0, #48591	; 0xbdcf
   128f4:	movw	r1, #48517	; 0xbd85
   128f8:	cmp	r6, #0
   128fc:	mov	r2, #5
   12900:	movt	r0, #1
   12904:	movt	r1, #1
   12908:	movne	r1, r0
   1290c:	movw	r0, #48551	; 0xbda7
   12910:	cmp	r4, #0
   12914:	movt	r0, #1
   12918:	movne	r1, r0
   1291c:	mov	r0, #0
   12920:	bl	1124c <dcgettext@plt>
   12924:	mov	r6, r0
   12928:	mov	r0, #0
   1292c:	bl	12e18 <__assert_fail@plt+0x195c>
   12930:	mov	r5, r8
   12934:	mov	r8, #0
   12938:	b	12b5c <__assert_fail@plt+0x16a0>
   1293c:	cmp	r6, #0
   12940:	beq	12b3c <__assert_fail@plt+0x1680>
   12944:	movw	r1, #48659	; 0xbe13
   12948:	movt	r1, #1
   1294c:	b	12b50 <__assert_fail@plt+0x1694>
   12950:	ldr	r0, [sp, #4]
   12954:	ldrd	r2, [sl, #96]	; 0x60
   12958:	ldrd	r0, [r0]
   1295c:	eor	r1, r3, r1
   12960:	eor	r0, r2, r0
   12964:	orrs	r0, r0, r1
   12968:	bne	12a74 <__assert_fail@plt+0x15b8>
   1296c:	ldrd	r0, [sl]
   12970:	ldr	r2, [fp, #-136]	; 0xffffff78
   12974:	ldr	r3, [fp, #-132]	; 0xffffff7c
   12978:	eor	r1, r1, r3
   1297c:	eor	r0, r0, r2
   12980:	orrs	r0, r0, r1
   12984:	bne	12a74 <__assert_fail@plt+0x15b8>
   12988:	ldr	r0, [fp, #8]
   1298c:	cmn	r0, #1
   12990:	beq	129a4 <__assert_fail@plt+0x14e8>
   12994:	ldr	r0, [fp, #-112]	; 0xffffff90
   12998:	ldr	r1, [fp, #8]
   1299c:	cmp	r0, r1
   129a0:	bne	129c0 <__assert_fail@plt+0x1504>
   129a4:	ldr	r0, [fp, #12]
   129a8:	cmn	r0, #1
   129ac:	beq	12b94 <__assert_fail@plt+0x16d8>
   129b0:	ldr	r0, [fp, #-108]	; 0xffffff94
   129b4:	ldr	r1, [fp, #12]
   129b8:	cmp	r0, r1
   129bc:	beq	12b94 <__assert_fail@plt+0x16d8>
   129c0:	bl	11378 <__errno_location@plt>
   129c4:	ldr	r5, [r0]
   129c8:	mov	r4, r0
   129cc:	mov	r0, r7
   129d0:	bl	11480 <close@plt>
   129d4:	str	r5, [r4]
   129d8:	mov	r5, #0
   129dc:	mov	r6, #1
   129e0:	mov	r4, #1
   129e4:	ldr	r0, [fp, #16]
   129e8:	ldr	r0, [r0]
   129ec:	cmp	r0, #2
   129f0:	beq	12044 <__assert_fail@plt+0xb88>
   129f4:	b	1270c <__assert_fail@plt+0x1250>
   129f8:	movw	r1, #47817	; 0xbac9
   129fc:	mov	r0, #0
   12a00:	mov	r2, #5
   12a04:	movt	r1, #1
   12a08:	bl	1124c <dcgettext@plt>
   12a0c:	mov	r4, r0
   12a10:	mov	r0, #4
   12a14:	mov	r1, r7
   12a18:	bl	18700 <__assert_fail@plt+0x7244>
   12a1c:	mov	r3, r0
   12a20:	mov	r0, #0
   12a24:	mov	r1, #0
   12a28:	mov	r2, r4
   12a2c:	bl	112d0 <error@plt>
   12a30:	movw	r1, #47920	; 0xbb30
   12a34:	ldr	r6, [sp, #32]
   12a38:	mov	r0, #0
   12a3c:	mov	r2, #5
   12a40:	movt	r1, #1
   12a44:	bl	1124c <dcgettext@plt>
   12a48:	mov	r2, r0
   12a4c:	mov	r0, #0
   12a50:	mov	r1, #0
   12a54:	bl	112d0 <error@plt>
   12a58:	mov	r4, #0
   12a5c:	b	12058 <__assert_fail@plt+0xb9c>
   12a60:	cmp	r6, #0
   12a64:	beq	12b48 <__assert_fail@plt+0x168c>
   12a68:	movw	r1, #48473	; 0xbd59
   12a6c:	movt	r1, #1
   12a70:	b	12b50 <__assert_fail@plt+0x1694>
   12a74:	bl	11378 <__errno_location@plt>
   12a78:	ldr	r5, [r0]
   12a7c:	mov	r4, r0
   12a80:	mov	r0, r7
   12a84:	bl	11480 <close@plt>
   12a88:	str	r5, [r4]
   12a8c:	mov	r4, #0
   12a90:	mov	r6, #1
   12a94:	mov	r5, #1
   12a98:	ldr	r0, [fp, #16]
   12a9c:	ldr	r0, [r0]
   12aa0:	cmp	r0, #2
   12aa4:	beq	12044 <__assert_fail@plt+0xb88>
   12aa8:	b	1270c <__assert_fail@plt+0x1250>
   12aac:	movw	r1, #47817	; 0xbac9
   12ab0:	mov	r0, #0
   12ab4:	mov	r2, #5
   12ab8:	movt	r1, #1
   12abc:	bl	1124c <dcgettext@plt>
   12ac0:	mov	r4, r0
   12ac4:	mov	r0, #4
   12ac8:	mov	r1, r7
   12acc:	bl	18700 <__assert_fail@plt+0x7244>
   12ad0:	mov	r3, r0
   12ad4:	mov	r0, #0
   12ad8:	mov	r1, #0
   12adc:	mov	r2, r4
   12ae0:	bl	112d0 <error@plt>
   12ae4:	movw	r1, #47920	; 0xbb30
   12ae8:	mov	r0, #0
   12aec:	mov	r2, #5
   12af0:	movt	r1, #1
   12af4:	bl	1124c <dcgettext@plt>
   12af8:	mov	r2, r0
   12afc:	mov	r0, #0
   12b00:	mov	r1, #0
   12b04:	bl	112d0 <error@plt>
   12b08:	ldr	r4, [sp, #36]	; 0x24
   12b0c:	mov	r1, r9
   12b10:	mov	r2, #4
   12b14:	mov	r0, r4
   12b18:	bl	151e0 <__assert_fail@plt+0x3d24>
   12b1c:	mov	r0, r4
   12b20:	bl	13980 <__assert_fail@plt+0x24c4>
   12b24:	mov	r4, #0
   12b28:	mov	r6, r8
   12b2c:	b	12058 <__assert_fail@plt+0xb9c>
   12b30:	movw	r1, #48395	; 0xbd0b
   12b34:	movt	r1, #1
   12b38:	b	12b50 <__assert_fail@plt+0x1694>
   12b3c:	movw	r1, #48687	; 0xbe2f
   12b40:	movt	r1, #1
   12b44:	b	12b50 <__assert_fail@plt+0x1694>
   12b48:	movw	r1, #48517	; 0xbd85
   12b4c:	movt	r1, #1
   12b50:	mov	r2, #5
   12b54:	bl	1124c <dcgettext@plt>
   12b58:	mov	r6, r0
   12b5c:	ldr	r1, [sp, #28]
   12b60:	mov	r0, #4
   12b64:	bl	18700 <__assert_fail@plt+0x7244>
   12b68:	mov	r2, r0
   12b6c:	mov	r0, #1
   12b70:	mov	r1, r6
   12b74:	mov	r3, r5
   12b78:	str	r8, [sp]
   12b7c:	bl	1139c <__printf_chk@plt>
   12b80:	mov	r0, r5
   12b84:	bl	12e18 <__assert_fail@plt+0x195c>
   12b88:	mov	r0, r8
   12b8c:	bl	12e18 <__assert_fail@plt+0x195c>
   12b90:	b	12030 <__assert_fail@plt+0xb74>
   12b94:	ldr	r1, [sp, #20]
   12b98:	ldr	r2, [sp, #12]
   12b9c:	mov	r0, r7
   12ba0:	bl	1136c <fchown@plt>
   12ba4:	cmp	r0, #0
   12ba8:	bne	12610 <__assert_fail@plt+0x1154>
   12bac:	mov	r0, r7
   12bb0:	bl	11480 <close@plt>
   12bb4:	cmp	r0, #0
   12bb8:	mov	r4, #1
   12bbc:	bne	126a0 <__assert_fail@plt+0x11e4>
   12bc0:	mov	r5, #0
   12bc4:	mov	r6, #1
   12bc8:	ldr	r0, [fp, #16]
   12bcc:	ldr	r0, [r0]
   12bd0:	cmp	r0, #2
   12bd4:	beq	12044 <__assert_fail@plt+0xb88>
   12bd8:	b	1270c <__assert_fail@plt+0x1250>
   12bdc:	mov	r6, #1
   12be0:	bl	11378 <__errno_location@plt>
   12be4:	ldr	r4, [r0]
   12be8:	mov	r5, r0
   12bec:	cmp	r4, #0
   12bf0:	beq	12c30 <__assert_fail@plt+0x1774>
   12bf4:	ldr	r0, [fp, #16]
   12bf8:	mov	r6, #0
   12bfc:	ldrb	r0, [r0, #13]
   12c00:	cmp	r0, #0
   12c04:	bne	12c30 <__assert_fail@plt+0x1774>
   12c08:	movw	r1, #47784	; 0xbaa8
   12c0c:	mov	r0, #0
   12c10:	mov	r2, #5
   12c14:	mov	r6, #0
   12c18:	movt	r1, #1
   12c1c:	bl	1124c <dcgettext@plt>
   12c20:	mov	r2, r0
   12c24:	mov	r0, #0
   12c28:	mov	r1, r4
   12c2c:	bl	112d0 <error@plt>
   12c30:	ldr	r0, [sp, #36]	; 0x24
   12c34:	bl	137b8 <__assert_fail@plt+0x22fc>
   12c38:	cmp	r0, #0
   12c3c:	beq	12c6c <__assert_fail@plt+0x17b0>
   12c40:	movw	r1, #47800	; 0xbab8
   12c44:	ldr	r4, [r5]
   12c48:	mov	r0, #0
   12c4c:	mov	r2, #5
   12c50:	mov	r6, #0
   12c54:	movt	r1, #1
   12c58:	bl	1124c <dcgettext@plt>
   12c5c:	mov	r2, r0
   12c60:	mov	r0, #0
   12c64:	mov	r1, r4
   12c68:	bl	112d0 <error@plt>
   12c6c:	mov	r0, r6
   12c70:	sub	sp, fp, #28
   12c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c78:	bl	11474 <abort@plt>
   12c7c:	push	{r4, r5, r6, sl, fp, lr}
   12c80:	add	fp, sp, #16
   12c84:	mov	r4, r1
   12c88:	cmp	r0, #0
   12c8c:	beq	12ce0 <__assert_fail@plt+0x1824>
   12c90:	mov	r5, r0
   12c94:	cmp	r4, #0
   12c98:	beq	12cf4 <__assert_fail@plt+0x1838>
   12c9c:	mov	r0, r5
   12ca0:	bl	11348 <strlen@plt>
   12ca4:	mov	r6, r0
   12ca8:	mov	r0, r4
   12cac:	bl	11348 <strlen@plt>
   12cb0:	add	r0, r6, r0
   12cb4:	add	r0, r0, #2
   12cb8:	bl	193a0 <__assert_fail@plt+0x7ee4>
   12cbc:	mov	r1, r5
   12cc0:	mov	r6, r0
   12cc4:	bl	11240 <stpcpy@plt>
   12cc8:	mov	r1, #58	; 0x3a
   12ccc:	strh	r1, [r0], #1
   12cd0:	mov	r1, r4
   12cd4:	bl	11240 <stpcpy@plt>
   12cd8:	mov	r0, r6
   12cdc:	pop	{r4, r5, r6, sl, fp, pc}
   12ce0:	cmp	r4, #0
   12ce4:	beq	12d00 <__assert_fail@plt+0x1844>
   12ce8:	mov	r0, r4
   12cec:	pop	{r4, r5, r6, sl, fp, lr}
   12cf0:	b	198a4 <__assert_fail@plt+0x83e8>
   12cf4:	mov	r0, r5
   12cf8:	pop	{r4, r5, r6, sl, fp, lr}
   12cfc:	b	198a4 <__assert_fail@plt+0x83e8>
   12d00:	mov	r6, #0
   12d04:	mov	r0, r6
   12d08:	pop	{r4, r5, r6, sl, fp, pc}
   12d0c:	movw	r1, #53672	; 0xd1a8
   12d10:	movt	r1, #2
   12d14:	str	r0, [r1, #4]
   12d18:	bx	lr
   12d1c:	movw	r1, #53672	; 0xd1a8
   12d20:	movt	r1, #2
   12d24:	strb	r0, [r1]
   12d28:	bx	lr
   12d2c:	push	{r4, r5, r6, sl, fp, lr}
   12d30:	add	fp, sp, #16
   12d34:	sub	sp, sp, #8
   12d38:	movw	r0, #53636	; 0xd184
   12d3c:	movt	r0, #2
   12d40:	ldr	r0, [r0]
   12d44:	bl	1a728 <__assert_fail@plt+0x926c>
   12d48:	cmp	r0, #0
   12d4c:	beq	12d74 <__assert_fail@plt+0x18b8>
   12d50:	movw	r5, #53672	; 0xd1a8
   12d54:	movt	r5, #2
   12d58:	ldrb	r0, [r5]
   12d5c:	cmp	r0, #0
   12d60:	beq	12da0 <__assert_fail@plt+0x18e4>
   12d64:	bl	11378 <__errno_location@plt>
   12d68:	ldr	r0, [r0]
   12d6c:	cmp	r0, #32
   12d70:	bne	12da0 <__assert_fail@plt+0x18e4>
   12d74:	movw	r0, #53632	; 0xd180
   12d78:	movt	r0, #2
   12d7c:	ldr	r0, [r0]
   12d80:	bl	1a728 <__assert_fail@plt+0x926c>
   12d84:	cmp	r0, #0
   12d88:	subeq	sp, fp, #16
   12d8c:	popeq	{r4, r5, r6, sl, fp, pc}
   12d90:	movw	r0, #53548	; 0xd12c
   12d94:	movt	r0, #2
   12d98:	ldr	r0, [r0]
   12d9c:	bl	11210 <_exit@plt>
   12da0:	movw	r1, #48728	; 0xbe58
   12da4:	mov	r0, #0
   12da8:	mov	r2, #5
   12dac:	movt	r1, #1
   12db0:	bl	1124c <dcgettext@plt>
   12db4:	ldr	r6, [r5, #4]
   12db8:	mov	r4, r0
   12dbc:	bl	11378 <__errno_location@plt>
   12dc0:	ldr	r5, [r0]
   12dc4:	cmp	r6, #0
   12dc8:	bne	12de4 <__assert_fail@plt+0x1928>
   12dcc:	movw	r2, #47515	; 0xb99b
   12dd0:	mov	r0, #0
   12dd4:	mov	r1, r5
   12dd8:	mov	r3, r4
   12ddc:	movt	r2, #1
   12de0:	b	12e04 <__assert_fail@plt+0x1948>
   12de4:	mov	r0, r6
   12de8:	bl	188a0 <__assert_fail@plt+0x73e4>
   12dec:	movw	r2, #48740	; 0xbe64
   12df0:	mov	r3, r0
   12df4:	str	r4, [sp]
   12df8:	mov	r0, #0
   12dfc:	mov	r1, r5
   12e00:	movt	r2, #1
   12e04:	bl	112d0 <error@plt>
   12e08:	movw	r0, #53548	; 0xd12c
   12e0c:	movt	r0, #2
   12e10:	ldr	r0, [r0]
   12e14:	bl	11210 <_exit@plt>
   12e18:	push	{r4, r5, r6, sl, fp, lr}
   12e1c:	add	fp, sp, #16
   12e20:	mov	r4, r0
   12e24:	bl	11378 <__errno_location@plt>
   12e28:	ldr	r6, [r0]
   12e2c:	mov	r5, r0
   12e30:	mov	r0, r4
   12e34:	bl	11204 <free@plt>
   12e38:	str	r6, [r5]
   12e3c:	pop	{r4, r5, r6, sl, fp, pc}
   12e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e44:	add	fp, sp, #28
   12e48:	sub	sp, sp, #28
   12e4c:	cmp	r1, #4096	; 0x1000
   12e50:	bcs	12e6c <__assert_fail@plt+0x19b0>
   12e54:	mov	sl, r0
   12e58:	and	r0, r1, #516	; 0x204
   12e5c:	mov	r6, r1
   12e60:	cmp	r0, #516	; 0x204
   12e64:	tstne	r6, #18
   12e68:	bne	12e88 <__assert_fail@plt+0x19cc>
   12e6c:	bl	11378 <__errno_location@plt>
   12e70:	mov	r1, #22
   12e74:	mov	r4, #0
   12e78:	str	r1, [r0]
   12e7c:	mov	r0, r4
   12e80:	sub	sp, fp, #28
   12e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e88:	mov	r0, #1
   12e8c:	mov	r1, #96	; 0x60
   12e90:	mov	r5, r2
   12e94:	bl	1a650 <__assert_fail@plt+0x9194>
   12e98:	cmp	r0, #0
   12e9c:	beq	1347c <__assert_fail@plt+0x1fc0>
   12ea0:	mov	r4, r0
   12ea4:	mvn	r0, #99	; 0x63
   12ea8:	tst	r6, #2
   12eac:	mov	r1, r6
   12eb0:	str	r0, [r4, #32]
   12eb4:	bic	r0, r6, #516	; 0x204
   12eb8:	str	r5, [r4, #44]	; 0x2c
   12ebc:	str	r4, [sp, #24]
   12ec0:	orrne	r1, r0, #4
   12ec4:	str	r1, [r4, #48]	; 0x30
   12ec8:	ldr	r0, [sl]
   12ecc:	cmp	r0, #0
   12ed0:	beq	12f34 <__assert_fail@plt+0x1a78>
   12ed4:	add	r7, sl, #4
   12ed8:	mov	r4, #0
   12edc:	bl	11348 <strlen@plt>
   12ee0:	cmp	r0, r4
   12ee4:	movhi	r4, r0
   12ee8:	ldr	r0, [r7], #4
   12eec:	cmp	r0, #0
   12ef0:	bne	12edc <__assert_fail@plt+0x1a20>
   12ef4:	add	r0, r4, #1
   12ef8:	ldr	r4, [sp, #24]
   12efc:	cmp	r0, #4096	; 0x1000
   12f00:	movls	r0, #4096	; 0x1000
   12f04:	ldr	r1, [r4, #36]	; 0x24
   12f08:	add	r0, r0, #256	; 0x100
   12f0c:	adds	r1, r0, r1
   12f10:	bcc	12f48 <__assert_fail@plt+0x1a8c>
   12f14:	ldr	r0, [r4, #24]
   12f18:	bl	12e18 <__assert_fail@plt+0x195c>
   12f1c:	mov	r0, #0
   12f20:	str	r0, [r4, #24]
   12f24:	bl	11378 <__errno_location@plt>
   12f28:	mov	r1, #36	; 0x24
   12f2c:	str	r1, [r0]
   12f30:	b	13474 <__assert_fail@plt+0x1fb8>
   12f34:	mov	r0, #4096	; 0x1000
   12f38:	ldr	r1, [r4, #36]	; 0x24
   12f3c:	add	r0, r0, #256	; 0x100
   12f40:	adds	r1, r0, r1
   12f44:	bcs	12f14 <__assert_fail@plt+0x1a58>
   12f48:	str	r1, [r4, #36]	; 0x24
   12f4c:	ldr	r0, [r4, #24]
   12f50:	bl	1a6d4 <__assert_fail@plt+0x9218>
   12f54:	cmp	r0, #0
   12f58:	beq	13154 <__assert_fail@plt+0x1c98>
   12f5c:	str	r0, [r4, #24]
   12f60:	ldr	r0, [sl]
   12f64:	cmp	r0, #0
   12f68:	beq	13168 <__assert_fail@plt+0x1cac>
   12f6c:	mov	r0, #176	; 0xb0
   12f70:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   12f74:	cmp	r0, #0
   12f78:	beq	1346c <__assert_fail@plt+0x1fb0>
   12f7c:	ldr	r1, [r4, #24]
   12f80:	mov	r7, r0
   12f84:	mov	r0, #0
   12f88:	mov	r2, #196608	; 0x30000
   12f8c:	strb	r0, [r7, #168]	; 0xa8
   12f90:	str	r2, [r7, #58]	; 0x3a
   12f94:	mvn	r2, #0
   12f98:	str	r4, [r7, #44]	; 0x2c
   12f9c:	str	r2, [r7, #48]	; 0x30
   12fa0:	str	r0, [r7, #52]	; 0x34
   12fa4:	str	r0, [r7, #12]
   12fa8:	str	r0, [r7, #16]
   12fac:	str	r0, [r7, #20]
   12fb0:	str	r1, [r7, #28]
   12fb4:	str	r0, [r7, #32]
   12fb8:	cmp	r5, #0
   12fbc:	beq	13174 <__assert_fail@plt+0x1cb8>
   12fc0:	ldrb	r0, [r4, #49]	; 0x31
   12fc4:	ubfx	r0, r0, #2, #1
   12fc8:	ldr	r4, [sl]
   12fcc:	str	r0, [sp, #12]
   12fd0:	cmp	r4, #0
   12fd4:	beq	13188 <__assert_fail@plt+0x1ccc>
   12fd8:	tst	r6, #2048	; 0x800
   12fdc:	str	r5, [sp, #16]
   12fe0:	str	r7, [sp, #20]
   12fe4:	bne	131ac <__assert_fail@plt+0x1cf0>
   12fe8:	mov	r0, #0
   12fec:	mov	r8, #0
   12ff0:	mov	r5, #0
   12ff4:	str	r0, [sp, #8]
   12ff8:	b	1304c <__assert_fail@plt+0x1b90>
   12ffc:	cmp	r8, #0
   13000:	str	r4, [r7, #8]
   13004:	beq	13028 <__assert_fail@plt+0x1b6c>
   13008:	ldr	r0, [sp, #8]
   1300c:	str	r7, [sp, #8]
   13010:	str	r7, [r0, #8]
   13014:	ldr	r4, [sl, #4]!
   13018:	add	r5, r5, #1
   1301c:	cmp	r4, #0
   13020:	bne	1304c <__assert_fail@plt+0x1b90>
   13024:	b	13300 <__assert_fail@plt+0x1e44>
   13028:	mov	r0, r7
   1302c:	str	r7, [sp, #8]
   13030:	b	13038 <__assert_fail@plt+0x1b7c>
   13034:	str	r8, [r7, #8]
   13038:	mov	r8, r7
   1303c:	ldr	r4, [sl, #4]!
   13040:	add	r5, r5, #1
   13044:	cmp	r4, #0
   13048:	beq	13300 <__assert_fail@plt+0x1e44>
   1304c:	mov	r0, r4
   13050:	bl	11348 <strlen@plt>
   13054:	mov	r9, r0
   13058:	cmp	r0, #3
   1305c:	bcc	1308c <__assert_fail@plt+0x1bd0>
   13060:	add	r0, r9, r4
   13064:	ldrb	r0, [r0, #-1]
   13068:	cmp	r0, #47	; 0x2f
   1306c:	bne	1308c <__assert_fail@plt+0x1bd0>
   13070:	sub	r0, r4, #2
   13074:	ldrb	r1, [r0, r9]
   13078:	cmp	r1, #47	; 0x2f
   1307c:	bne	1308c <__assert_fail@plt+0x1bd0>
   13080:	sub	r9, r9, #1
   13084:	cmp	r9, #1
   13088:	bhi	13074 <__assert_fail@plt+0x1bb8>
   1308c:	add	r0, r9, #176	; 0xb0
   13090:	bic	r0, r0, #7
   13094:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   13098:	cmp	r0, #0
   1309c:	beq	132f0 <__assert_fail@plt+0x1e34>
   130a0:	add	r6, r0, #168	; 0xa8
   130a4:	mov	r7, r0
   130a8:	mov	r1, r4
   130ac:	mov	r2, r9
   130b0:	mov	r0, r6
   130b4:	bl	1121c <memcpy@plt>
   130b8:	ldr	r0, [sp, #24]
   130bc:	ldr	r1, [sp, #20]
   130c0:	mov	r4, #0
   130c4:	cmp	r8, #0
   130c8:	strb	r4, [r6, r9]
   130cc:	ldr	r2, [r0, #24]
   130d0:	str	r1, [r7, #4]
   130d4:	add	r1, r7, #44	; 0x2c
   130d8:	stm	r1, {r0, r4, r9}
   130dc:	mov	r1, #196608	; 0x30000
   130e0:	str	r1, [r7, #58]	; 0x3a
   130e4:	str	r4, [r7, #12]
   130e8:	str	r4, [r7, #16]
   130ec:	str	r4, [r7, #20]
   130f0:	str	r6, [r7, #24]
   130f4:	mov	r1, r8
   130f8:	movwne	r1, #1
   130fc:	str	r2, [r7, #28]
   13100:	ldr	r2, [sp, #12]
   13104:	str	r4, [r7, #32]
   13108:	tst	r2, r1
   1310c:	beq	13134 <__assert_fail@plt+0x1c78>
   13110:	mov	r0, #2
   13114:	str	r0, [r7, #112]	; 0x70
   13118:	mov	r0, #11
   1311c:	str	r4, [r7, #116]	; 0x74
   13120:	strh	r0, [r7, #56]	; 0x38
   13124:	ldr	r0, [sp, #16]
   13128:	cmp	r0, #0
   1312c:	bne	13034 <__assert_fail@plt+0x1b78>
   13130:	b	12ffc <__assert_fail@plt+0x1b40>
   13134:	mov	r1, r7
   13138:	mov	r2, #0
   1313c:	bl	134f0 <__assert_fail@plt+0x2034>
   13140:	strh	r0, [r7, #56]	; 0x38
   13144:	ldr	r0, [sp, #16]
   13148:	cmp	r0, #0
   1314c:	bne	13034 <__assert_fail@plt+0x1b78>
   13150:	b	12ffc <__assert_fail@plt+0x1b40>
   13154:	ldr	r0, [r4, #24]
   13158:	bl	12e18 <__assert_fail@plt+0x195c>
   1315c:	mov	r0, #0
   13160:	str	r0, [r4, #24]
   13164:	b	13474 <__assert_fail@plt+0x1fb8>
   13168:	mov	r7, #0
   1316c:	cmp	r5, #0
   13170:	bne	12fc0 <__assert_fail@plt+0x1b04>
   13174:	mov	r0, #1
   13178:	ldr	r4, [sl]
   1317c:	str	r0, [sp, #12]
   13180:	cmp	r4, #0
   13184:	bne	12fd8 <__assert_fail@plt+0x1b1c>
   13188:	ldr	r4, [sp, #24]
   1318c:	mov	r8, #0
   13190:	mov	r0, #176	; 0xb0
   13194:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   13198:	cmp	r0, #0
   1319c:	bne	13358 <__assert_fail@plt+0x1e9c>
   131a0:	mov	r0, #0
   131a4:	str	r0, [r4]
   131a8:	b	13428 <__assert_fail@plt+0x1f6c>
   131ac:	add	r0, sl, #4
   131b0:	mov	r9, #0
   131b4:	mov	r8, #0
   131b8:	mov	r5, #0
   131bc:	str	r0, [sp, #8]
   131c0:	ldr	r0, [sp, #12]
   131c4:	eor	r0, r0, #1
   131c8:	str	r0, [sp, #12]
   131cc:	mov	r0, #0
   131d0:	str	r0, [sp, #4]
   131d4:	b	13208 <__assert_fail@plt+0x1d4c>
   131d8:	cmp	r8, #0
   131dc:	str	r9, [r5, #8]
   131e0:	beq	132e4 <__assert_fail@plt+0x1e28>
   131e4:	ldr	r0, [sp, #4]
   131e8:	str	r5, [sp, #4]
   131ec:	str	r5, [r0, #8]
   131f0:	ldr	r0, [sp, #8]
   131f4:	mov	r5, sl
   131f8:	add	r5, sl, #1
   131fc:	ldr	r4, [r0, sl, lsl #2]
   13200:	cmp	r4, #0
   13204:	beq	13300 <__assert_fail@plt+0x1e44>
   13208:	mov	r0, r4
   1320c:	mov	sl, r5
   13210:	bl	11348 <strlen@plt>
   13214:	mov	r7, r0
   13218:	add	r0, r0, #176	; 0xb0
   1321c:	bic	r0, r0, #7
   13220:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   13224:	cmp	r0, #0
   13228:	beq	132f0 <__assert_fail@plt+0x1e34>
   1322c:	add	r6, r0, #168	; 0xa8
   13230:	mov	r5, r0
   13234:	mov	r1, r4
   13238:	mov	r2, r7
   1323c:	mov	r0, r6
   13240:	bl	1121c <memcpy@plt>
   13244:	ldr	r0, [sp, #24]
   13248:	ldr	r1, [sp, #20]
   1324c:	strb	r9, [r6, r7]
   13250:	ldr	r2, [r0, #24]
   13254:	str	r1, [r5, #4]
   13258:	mov	r1, #196608	; 0x30000
   1325c:	str	r0, [r5, #44]	; 0x2c
   13260:	str	r9, [r5, #48]	; 0x30
   13264:	str	r7, [r5, #52]	; 0x34
   13268:	str	r1, [r5, #58]	; 0x3a
   1326c:	str	r9, [r5, #12]
   13270:	str	r9, [r5, #16]
   13274:	str	r9, [r5, #20]
   13278:	str	r6, [r5, #24]
   1327c:	clz	r1, r8
   13280:	lsr	r1, r1, #5
   13284:	str	r2, [r5, #28]
   13288:	ldr	r2, [sp, #12]
   1328c:	str	r9, [r5, #32]
   13290:	orrs	r1, r2, r1
   13294:	bne	132bc <__assert_fail@plt+0x1e00>
   13298:	mov	r0, #2
   1329c:	str	r0, [r5, #112]	; 0x70
   132a0:	str	r9, [r5, #116]	; 0x74
   132a4:	mov	r0, #11
   132a8:	strh	r0, [r5, #56]	; 0x38
   132ac:	ldr	r0, [sp, #16]
   132b0:	cmp	r0, #0
   132b4:	bne	132d8 <__assert_fail@plt+0x1e1c>
   132b8:	b	131d8 <__assert_fail@plt+0x1d1c>
   132bc:	mov	r1, r5
   132c0:	mov	r2, #0
   132c4:	bl	134f0 <__assert_fail@plt+0x2034>
   132c8:	strh	r0, [r5, #56]	; 0x38
   132cc:	ldr	r0, [sp, #16]
   132d0:	cmp	r0, #0
   132d4:	beq	131d8 <__assert_fail@plt+0x1d1c>
   132d8:	str	r8, [r5, #8]
   132dc:	mov	r8, r5
   132e0:	b	131f0 <__assert_fail@plt+0x1d34>
   132e4:	mov	r0, r5
   132e8:	str	r5, [sp, #4]
   132ec:	b	132dc <__assert_fail@plt+0x1e20>
   132f0:	ldr	r7, [sp, #20]
   132f4:	cmp	r8, #0
   132f8:	bne	13448 <__assert_fail@plt+0x1f8c>
   132fc:	b	13460 <__assert_fail@plt+0x1fa4>
   13300:	ldr	r0, [sp, #16]
   13304:	ldr	r7, [sp, #20]
   13308:	cmp	r0, #0
   1330c:	beq	13344 <__assert_fail@plt+0x1e88>
   13310:	ldr	r4, [sp, #24]
   13314:	cmp	r5, #2
   13318:	bcc	13348 <__assert_fail@plt+0x1e8c>
   1331c:	mov	r0, r4
   13320:	mov	r1, r8
   13324:	mov	r2, r5
   13328:	bl	13688 <__assert_fail@plt+0x21cc>
   1332c:	mov	r8, r0
   13330:	mov	r0, #176	; 0xb0
   13334:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   13338:	cmp	r0, #0
   1333c:	bne	13358 <__assert_fail@plt+0x1e9c>
   13340:	b	131a0 <__assert_fail@plt+0x1ce4>
   13344:	ldr	r4, [sp, #24]
   13348:	mov	r0, #176	; 0xb0
   1334c:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   13350:	cmp	r0, #0
   13354:	beq	131a0 <__assert_fail@plt+0x1ce4>
   13358:	ldr	r2, [r4, #24]
   1335c:	mov	r1, #0
   13360:	mov	r3, #196608	; 0x30000
   13364:	str	r0, [r4]
   13368:	str	r1, [r0, #52]	; 0x34
   1336c:	strb	r1, [r0, #168]	; 0xa8
   13370:	str	r4, [r0, #44]	; 0x2c
   13374:	str	r3, [r0, #58]	; 0x3a
   13378:	str	r2, [r0, #28]
   1337c:	mov	r2, #9
   13380:	str	r1, [r0, #32]
   13384:	strh	r2, [r0, #56]	; 0x38
   13388:	str	r8, [r0, #8]
   1338c:	str	r1, [r0, #12]
   13390:	str	r1, [r0, #16]
   13394:	str	r1, [r0, #20]
   13398:	mov	r1, #1
   1339c:	str	r1, [r0, #48]	; 0x30
   133a0:	ldrh	r0, [r4, #48]	; 0x30
   133a4:	movw	r1, #258	; 0x102
   133a8:	tst	r0, r1
   133ac:	beq	133e8 <__assert_fail@plt+0x1f2c>
   133b0:	movw	r0, #11800	; 0x2e18
   133b4:	movw	r2, #21560	; 0x5438
   133b8:	movw	r3, #21592	; 0x5458
   133bc:	mov	r1, #0
   133c0:	movt	r0, #1
   133c4:	movt	r2, #1
   133c8:	movt	r3, #1
   133cc:	str	r0, [sp]
   133d0:	mov	r0, #31
   133d4:	bl	15b4c <__assert_fail@plt+0x4690>
   133d8:	cmp	r0, #0
   133dc:	str	r0, [r4, #56]	; 0x38
   133e0:	bne	13400 <__assert_fail@plt+0x1f44>
   133e4:	b	13428 <__assert_fail@plt+0x1f6c>
   133e8:	mov	r0, #32
   133ec:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   133f0:	cmp	r0, #0
   133f4:	str	r0, [r4, #56]	; 0x38
   133f8:	beq	13428 <__assert_fail@plt+0x1f6c>
   133fc:	bl	1a7ac <__assert_fail@plt+0x92f0>
   13400:	ldr	r4, [sp, #24]
   13404:	ldr	r0, [r4, #48]	; 0x30
   13408:	tst	r0, #516	; 0x204
   1340c:	beq	1348c <__assert_fail@plt+0x1fd0>
   13410:	add	r0, r4, #60	; 0x3c
   13414:	mvn	r1, #0
   13418:	bl	16aa8 <__assert_fail@plt+0x55ec>
   1341c:	mov	r0, r4
   13420:	sub	sp, fp, #28
   13424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13428:	cmp	r8, #0
   1342c:	bne	13448 <__assert_fail@plt+0x1f8c>
   13430:	b	13460 <__assert_fail@plt+0x1fa4>
   13434:	mov	r0, r8
   13438:	bl	12e18 <__assert_fail@plt+0x195c>
   1343c:	cmp	r4, #0
   13440:	mov	r8, r4
   13444:	beq	13460 <__assert_fail@plt+0x1fa4>
   13448:	ldrd	r4, [r8, #8]
   1344c:	cmp	r5, #0
   13450:	beq	13434 <__assert_fail@plt+0x1f78>
   13454:	mov	r0, r5
   13458:	bl	11498 <closedir@plt>
   1345c:	b	13434 <__assert_fail@plt+0x1f78>
   13460:	mov	r0, r7
   13464:	bl	12e18 <__assert_fail@plt+0x195c>
   13468:	ldr	r4, [sp, #24]
   1346c:	ldr	r0, [r4, #24]
   13470:	bl	12e18 <__assert_fail@plt+0x195c>
   13474:	mov	r0, r4
   13478:	bl	12e18 <__assert_fail@plt+0x195c>
   1347c:	mov	r4, #0
   13480:	mov	r0, r4
   13484:	sub	sp, fp, #28
   13488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1348c:	mov	r1, #32768	; 0x8000
   13490:	tst	r0, #512	; 0x200
   13494:	and	r1, r1, r0, lsl #11
   13498:	orr	r1, r1, #18688	; 0x4900
   1349c:	orr	r2, r1, #524288	; 0x80000
   134a0:	bne	134c4 <__assert_fail@plt+0x2008>
   134a4:	movw	r0, #48748	; 0xbe6c
   134a8:	mov	r1, r2
   134ac:	movt	r0, #1
   134b0:	bl	1ab18 <__assert_fail@plt+0x965c>
   134b4:	cmn	r0, #1
   134b8:	str	r0, [r4, #28]
   134bc:	bgt	13410 <__assert_fail@plt+0x1f54>
   134c0:	b	134e0 <__assert_fail@plt+0x2024>
   134c4:	ldr	r0, [r4, #32]
   134c8:	movw	r1, #48748	; 0xbe6c
   134cc:	movt	r1, #1
   134d0:	bl	16bcc <__assert_fail@plt+0x5710>
   134d4:	cmn	r0, #1
   134d8:	str	r0, [r4, #28]
   134dc:	bgt	13410 <__assert_fail@plt+0x1f54>
   134e0:	ldr	r0, [r4, #48]	; 0x30
   134e4:	orr	r0, r0, #4
   134e8:	str	r0, [r4, #48]	; 0x30
   134ec:	b	13410 <__assert_fail@plt+0x1f54>
   134f0:	push	{r4, r5, r6, sl, fp, lr}
   134f4:	add	fp, sp, #16
   134f8:	sub	sp, sp, #8
   134fc:	mov	r4, r1
   13500:	ldr	r1, [r0, #48]	; 0x30
   13504:	ldr	r3, [r4, #48]	; 0x30
   13508:	add	r5, r4, #64	; 0x40
   1350c:	cmp	r3, #0
   13510:	andeq	r3, r1, #1
   13514:	orreq	r2, r3, r2
   13518:	cmp	r2, #0
   1351c:	andseq	r1, r1, #2
   13520:	beq	1357c <__assert_fail@plt+0x20c0>
   13524:	ldr	r1, [r4, #24]
   13528:	mov	r0, #3
   1352c:	mov	r2, r5
   13530:	bl	1145c <__xstat64@plt>
   13534:	cmp	r0, #0
   13538:	beq	135fc <__assert_fail@plt+0x2140>
   1353c:	bl	11378 <__errno_location@plt>
   13540:	mov	r6, r0
   13544:	ldr	r0, [r0]
   13548:	cmp	r0, #2
   1354c:	bne	135ac <__assert_fail@plt+0x20f0>
   13550:	ldr	r1, [r4, #24]
   13554:	mov	r0, #3
   13558:	mov	r2, r5
   1355c:	bl	1148c <__lxstat64@plt>
   13560:	cmp	r0, #0
   13564:	bne	135a8 <__assert_fail@plt+0x20ec>
   13568:	mov	r0, #0
   1356c:	str	r0, [r6]
   13570:	mov	r0, #13
   13574:	sub	sp, fp, #16
   13578:	pop	{r4, r5, r6, sl, fp, pc}
   1357c:	ldr	r1, [r0, #32]
   13580:	ldr	r2, [r4, #24]
   13584:	mov	r0, #256	; 0x100
   13588:	mov	r3, r5
   1358c:	str	r0, [sp]
   13590:	mov	r0, #3
   13594:	bl	11270 <__fxstatat64@plt>
   13598:	cmp	r0, #0
   1359c:	beq	135fc <__assert_fail@plt+0x2140>
   135a0:	bl	11378 <__errno_location@plt>
   135a4:	mov	r6, r0
   135a8:	ldr	r0, [r6]
   135ac:	vmov.i32	q8, #0	; 0x00000000
   135b0:	add	r1, r5, #80	; 0x50
   135b4:	str	r0, [r4, #32]
   135b8:	mov	r0, #0
   135bc:	str	r0, [r5, #96]	; 0x60
   135c0:	vst1.64	{d16-d17}, [r1]
   135c4:	add	r1, r5, #64	; 0x40
   135c8:	vst1.64	{d16-d17}, [r1]
   135cc:	add	r1, r5, #48	; 0x30
   135d0:	vst1.64	{d16-d17}, [r1]
   135d4:	add	r1, r5, #32
   135d8:	vst1.64	{d16-d17}, [r1]
   135dc:	add	r1, r5, #16
   135e0:	vst1.64	{d16-d17}, [r1]
   135e4:	mov	r1, #100	; 0x64
   135e8:	vst1.64	{d16-d17}, [r5], r1
   135ec:	str	r0, [r5]
   135f0:	mov	r0, #10
   135f4:	sub	sp, fp, #16
   135f8:	pop	{r4, r5, r6, sl, fp, pc}
   135fc:	ldr	r0, [r4, #80]	; 0x50
   13600:	and	r0, r0, #61440	; 0xf000
   13604:	cmp	r0, #40960	; 0xa000
   13608:	beq	13670 <__assert_fail@plt+0x21b4>
   1360c:	cmp	r0, #32768	; 0x8000
   13610:	beq	13664 <__assert_fail@plt+0x21a8>
   13614:	cmp	r0, #16384	; 0x4000
   13618:	bne	1367c <__assert_fail@plt+0x21c0>
   1361c:	ldrb	r1, [r4, #168]	; 0xa8
   13620:	mov	r0, #1
   13624:	cmp	r1, #46	; 0x2e
   13628:	bne	13680 <__assert_fail@plt+0x21c4>
   1362c:	ldrb	r1, [r4, #169]	; 0xa9
   13630:	cmp	r1, #0
   13634:	beq	1364c <__assert_fail@plt+0x2190>
   13638:	cmp	r1, #46	; 0x2e
   1363c:	bne	13680 <__assert_fail@plt+0x21c4>
   13640:	ldrb	r1, [r4, #170]	; 0xaa
   13644:	cmp	r1, #0
   13648:	bne	13680 <__assert_fail@plt+0x21c4>
   1364c:	ldr	r1, [r4, #48]	; 0x30
   13650:	mov	r0, #5
   13654:	cmp	r1, #0
   13658:	movweq	r0, #1
   1365c:	sub	sp, fp, #16
   13660:	pop	{r4, r5, r6, sl, fp, pc}
   13664:	mov	r0, #8
   13668:	sub	sp, fp, #16
   1366c:	pop	{r4, r5, r6, sl, fp, pc}
   13670:	mov	r0, #12
   13674:	sub	sp, fp, #16
   13678:	pop	{r4, r5, r6, sl, fp, pc}
   1367c:	mov	r0, #3
   13680:	sub	sp, fp, #16
   13684:	pop	{r4, r5, r6, sl, fp, pc}
   13688:	push	{r4, r5, r6, r7, fp, lr}
   1368c:	add	fp, sp, #16
   13690:	mov	r6, r0
   13694:	ldr	r7, [r0, #44]	; 0x2c
   13698:	ldr	r0, [r0, #40]	; 0x28
   1369c:	mov	r5, r2
   136a0:	mov	r4, r1
   136a4:	cmp	r0, r2
   136a8:	bcs	136e0 <__assert_fail@plt+0x2224>
   136ac:	add	r1, r5, #40	; 0x28
   136b0:	cmn	r1, #-1073741823	; 0xc0000001
   136b4:	str	r1, [r6, #40]	; 0x28
   136b8:	bhi	13784 <__assert_fail@plt+0x22c8>
   136bc:	ldr	r0, [r6, #8]
   136c0:	lsl	r1, r1, #2
   136c4:	bl	1a6d4 <__assert_fail@plt+0x9218>
   136c8:	cmp	r0, #0
   136cc:	beq	13784 <__assert_fail@plt+0x22c8>
   136d0:	str	r0, [r6, #8]
   136d4:	cmp	r4, #0
   136d8:	bne	136ec <__assert_fail@plt+0x2230>
   136dc:	b	13700 <__assert_fail@plt+0x2244>
   136e0:	ldr	r0, [r6, #8]
   136e4:	cmp	r4, #0
   136e8:	beq	13700 <__assert_fail@plt+0x2244>
   136ec:	str	r4, [r0], #4
   136f0:	ldr	r4, [r4, #8]
   136f4:	cmp	r4, #0
   136f8:	bne	136ec <__assert_fail@plt+0x2230>
   136fc:	ldr	r0, [r6, #8]
   13700:	mov	r1, r5
   13704:	mov	r2, #4
   13708:	mov	r3, r7
   1370c:	bl	11438 <qsort@plt>
   13710:	ldr	r0, [r6, #8]
   13714:	cmp	r5, #1
   13718:	ldr	r4, [r0]
   1371c:	mov	r1, r4
   13720:	beq	137a8 <__assert_fail@plt+0x22ec>
   13724:	mov	r2, r0
   13728:	ldr	r1, [r2, #4]!
   1372c:	str	r1, [r4, #8]
   13730:	subs	r1, r5, #2
   13734:	beq	137a0 <__assert_fail@plt+0x22e4>
   13738:	tst	r1, #1
   1373c:	beq	13754 <__assert_fail@plt+0x2298>
   13740:	ldr	r1, [r0, #8]!
   13744:	ldr	r2, [r0, #-4]
   13748:	str	r1, [r2, #8]
   1374c:	sub	r1, r5, #3
   13750:	mov	r2, r0
   13754:	cmp	r5, #3
   13758:	beq	137a4 <__assert_fail@plt+0x22e8>
   1375c:	mov	r0, r2
   13760:	ldm	r2, {r3, r7}
   13764:	subs	r1, r1, #2
   13768:	str	r7, [r3, #8]
   1376c:	ldr	r3, [r0, #8]!
   13770:	ldr	r2, [r2, #4]
   13774:	str	r3, [r2, #8]
   13778:	mov	r2, r0
   1377c:	bne	13760 <__assert_fail@plt+0x22a4>
   13780:	b	137a4 <__assert_fail@plt+0x22e8>
   13784:	ldr	r0, [r6, #8]
   13788:	bl	12e18 <__assert_fail@plt+0x195c>
   1378c:	mov	r0, #0
   13790:	str	r0, [r6, #40]	; 0x28
   13794:	str	r0, [r6, #8]
   13798:	mov	r0, r4
   1379c:	pop	{r4, r5, r6, r7, fp, pc}
   137a0:	mov	r0, r2
   137a4:	ldr	r1, [r0]
   137a8:	mov	r0, #0
   137ac:	str	r0, [r1, #8]
   137b0:	mov	r0, r4
   137b4:	pop	{r4, r5, r6, r7, fp, pc}
   137b8:	push	{r4, r5, r6, r7, fp, lr}
   137bc:	add	fp, sp, #16
   137c0:	mov	r4, r0
   137c4:	ldr	r0, [r0]
   137c8:	cmp	r0, #0
   137cc:	beq	1380c <__assert_fail@plt+0x2350>
   137d0:	ldr	r1, [r0, #48]	; 0x30
   137d4:	cmp	r1, #0
   137d8:	bmi	13800 <__assert_fail@plt+0x2344>
   137dc:	ldr	r5, [r0, #8]
   137e0:	cmp	r5, #0
   137e4:	ldreq	r5, [r0, #4]
   137e8:	bl	12e18 <__assert_fail@plt+0x195c>
   137ec:	ldr	r0, [r5, #48]	; 0x30
   137f0:	cmn	r0, #1
   137f4:	mov	r0, r5
   137f8:	bgt	137dc <__assert_fail@plt+0x2320>
   137fc:	b	13804 <__assert_fail@plt+0x2348>
   13800:	mov	r5, r0
   13804:	mov	r0, r5
   13808:	bl	12e18 <__assert_fail@plt+0x195c>
   1380c:	ldr	r5, [r4, #4]
   13810:	cmp	r5, #0
   13814:	bne	13830 <__assert_fail@plt+0x2374>
   13818:	b	13848 <__assert_fail@plt+0x238c>
   1381c:	mov	r0, r5
   13820:	bl	12e18 <__assert_fail@plt+0x195c>
   13824:	cmp	r6, #0
   13828:	mov	r5, r6
   1382c:	beq	13848 <__assert_fail@plt+0x238c>
   13830:	ldrd	r6, [r5, #8]
   13834:	cmp	r7, #0
   13838:	beq	1381c <__assert_fail@plt+0x2360>
   1383c:	mov	r0, r7
   13840:	bl	11498 <closedir@plt>
   13844:	b	1381c <__assert_fail@plt+0x2360>
   13848:	ldr	r0, [r4, #8]
   1384c:	bl	12e18 <__assert_fail@plt+0x195c>
   13850:	ldr	r0, [r4, #24]
   13854:	bl	12e18 <__assert_fail@plt+0x195c>
   13858:	ldr	r0, [r4, #48]	; 0x30
   1385c:	tst	r0, #512	; 0x200
   13860:	bne	1389c <__assert_fail@plt+0x23e0>
   13864:	mov	r6, #0
   13868:	tst	r0, #4
   1386c:	bne	138c0 <__assert_fail@plt+0x2404>
   13870:	ldr	r0, [r4, #28]
   13874:	bl	1142c <fchdir@plt>
   13878:	cmp	r0, #0
   1387c:	beq	13968 <__assert_fail@plt+0x24ac>
   13880:	bl	11378 <__errno_location@plt>
   13884:	ldr	r6, [r0]
   13888:	ldr	r0, [r4, #28]
   1388c:	bl	11480 <close@plt>
   13890:	cmp	r6, #0
   13894:	beq	138b0 <__assert_fail@plt+0x23f4>
   13898:	b	138c0 <__assert_fail@plt+0x2404>
   1389c:	ldr	r0, [r4, #32]
   138a0:	mov	r6, #0
   138a4:	cmp	r0, #0
   138a8:	bmi	138c0 <__assert_fail@plt+0x2404>
   138ac:	bl	11480 <close@plt>
   138b0:	cmp	r0, #0
   138b4:	beq	138c0 <__assert_fail@plt+0x2404>
   138b8:	bl	11378 <__errno_location@plt>
   138bc:	ldr	r6, [r0]
   138c0:	add	r5, r4, #60	; 0x3c
   138c4:	mov	r0, r5
   138c8:	bl	16acc <__assert_fail@plt+0x5610>
   138cc:	cmp	r0, #0
   138d0:	bne	138f8 <__assert_fail@plt+0x243c>
   138d4:	mov	r0, r5
   138d8:	bl	16b20 <__assert_fail@plt+0x5664>
   138dc:	cmp	r0, #0
   138e0:	bmi	138c4 <__assert_fail@plt+0x2408>
   138e4:	bl	11480 <close@plt>
   138e8:	mov	r0, r5
   138ec:	bl	16acc <__assert_fail@plt+0x5610>
   138f0:	cmp	r0, #0
   138f4:	beq	138d4 <__assert_fail@plt+0x2418>
   138f8:	ldr	r0, [r4, #52]	; 0x34
   138fc:	cmp	r0, #0
   13900:	beq	13908 <__assert_fail@plt+0x244c>
   13904:	bl	15e68 <__assert_fail@plt+0x49ac>
   13908:	ldrh	r0, [r4, #48]	; 0x30
   1390c:	movw	r1, #258	; 0x102
   13910:	tst	r0, r1
   13914:	beq	13948 <__assert_fail@plt+0x248c>
   13918:	ldr	r0, [r4, #56]	; 0x38
   1391c:	cmp	r0, #0
   13920:	beq	13928 <__assert_fail@plt+0x246c>
   13924:	bl	15e68 <__assert_fail@plt+0x49ac>
   13928:	mov	r0, r4
   1392c:	bl	12e18 <__assert_fail@plt+0x195c>
   13930:	cmp	r6, #0
   13934:	beq	13960 <__assert_fail@plt+0x24a4>
   13938:	bl	11378 <__errno_location@plt>
   1393c:	str	r6, [r0]
   13940:	mvn	r0, #0
   13944:	pop	{r4, r5, r6, r7, fp, pc}
   13948:	ldr	r0, [r4, #56]	; 0x38
   1394c:	bl	12e18 <__assert_fail@plt+0x195c>
   13950:	mov	r0, r4
   13954:	bl	12e18 <__assert_fail@plt+0x195c>
   13958:	cmp	r6, #0
   1395c:	bne	13938 <__assert_fail@plt+0x247c>
   13960:	mov	r0, #0
   13964:	pop	{r4, r5, r6, r7, fp, pc}
   13968:	mov	r6, #0
   1396c:	ldr	r0, [r4, #28]
   13970:	bl	11480 <close@plt>
   13974:	cmp	r6, #0
   13978:	beq	138b0 <__assert_fail@plt+0x23f4>
   1397c:	b	138c0 <__assert_fail@plt+0x2404>
   13980:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13984:	add	fp, sp, #24
   13988:	sub	sp, sp, #8
   1398c:	ldr	r6, [r0]
   13990:	mov	r5, #0
   13994:	cmp	r6, #0
   13998:	beq	14140 <__assert_fail@plt+0x2c84>
   1399c:	mov	r4, r0
   139a0:	ldr	r0, [r0, #48]	; 0x30
   139a4:	tst	r0, #8192	; 0x2000
   139a8:	bne	14140 <__assert_fail@plt+0x2c84>
   139ac:	ldrh	r1, [r6, #60]	; 0x3c
   139b0:	mov	r2, #3
   139b4:	strh	r2, [r6, #60]	; 0x3c
   139b8:	cmp	r1, #1
   139bc:	beq	13a5c <__assert_fail@plt+0x25a0>
   139c0:	cmp	r1, #2
   139c4:	bne	13a80 <__assert_fail@plt+0x25c4>
   139c8:	ldrh	r2, [r6, #56]	; 0x38
   139cc:	bic	r3, r2, #1
   139d0:	cmp	r3, #12
   139d4:	bne	13a84 <__assert_fail@plt+0x25c8>
   139d8:	mov	r0, r4
   139dc:	mov	r1, r6
   139e0:	mov	r2, #1
   139e4:	bl	134f0 <__assert_fail@plt+0x2034>
   139e8:	cmp	r0, #1
   139ec:	strh	r0, [r6, #56]	; 0x38
   139f0:	bne	14054 <__assert_fail@plt+0x2b98>
   139f4:	ldr	r0, [r4, #48]	; 0x30
   139f8:	tst	r0, #4
   139fc:	bne	14054 <__assert_fail@plt+0x2b98>
   13a00:	mov	r1, #32768	; 0x8000
   13a04:	tst	r0, #512	; 0x200
   13a08:	and	r1, r1, r0, lsl #11
   13a0c:	orr	r1, r1, #18688	; 0x4900
   13a10:	orr	r2, r1, #524288	; 0x80000
   13a14:	bne	13d88 <__assert_fail@plt+0x28cc>
   13a18:	movw	r0, #48748	; 0xbe6c
   13a1c:	mov	r1, r2
   13a20:	movt	r0, #1
   13a24:	bl	1ab18 <__assert_fail@plt+0x965c>
   13a28:	cmn	r0, #1
   13a2c:	str	r0, [r6, #36]	; 0x24
   13a30:	bgt	13da4 <__assert_fail@plt+0x28e8>
   13a34:	bl	11378 <__errno_location@plt>
   13a38:	ldr	r0, [r0]
   13a3c:	mov	r1, #7
   13a40:	strh	r1, [r6, #56]	; 0x38
   13a44:	str	r0, [r6, #32]
   13a48:	str	r6, [r4]
   13a4c:	ldrh	r0, [r6, #56]	; 0x38
   13a50:	cmp	r0, #11
   13a54:	beq	14064 <__assert_fail@plt+0x2ba8>
   13a58:	b	14098 <__assert_fail@plt+0x2bdc>
   13a5c:	mov	r0, r4
   13a60:	mov	r1, r6
   13a64:	mov	r2, #0
   13a68:	bl	134f0 <__assert_fail@plt+0x2034>
   13a6c:	strh	r0, [r6, #56]	; 0x38
   13a70:	mov	r5, r6
   13a74:	mov	r0, r5
   13a78:	sub	sp, fp, #24
   13a7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a80:	ldrh	r2, [r6, #56]	; 0x38
   13a84:	cmp	r2, #1
   13a88:	bne	13ae4 <__assert_fail@plt+0x2628>
   13a8c:	cmp	r1, #4
   13a90:	bne	13b98 <__assert_fail@plt+0x26dc>
   13a94:	ldrb	r0, [r6, #58]	; 0x3a
   13a98:	tst	r0, #2
   13a9c:	beq	13aa8 <__assert_fail@plt+0x25ec>
   13aa0:	ldr	r0, [r6, #36]	; 0x24
   13aa4:	bl	11480 <close@plt>
   13aa8:	ldr	r5, [r4, #4]
   13aac:	cmp	r5, #0
   13ab0:	bne	13acc <__assert_fail@plt+0x2610>
   13ab4:	b	13c30 <__assert_fail@plt+0x2774>
   13ab8:	mov	r0, r5
   13abc:	bl	12e18 <__assert_fail@plt+0x195c>
   13ac0:	cmp	r8, #0
   13ac4:	mov	r5, r8
   13ac8:	beq	13c28 <__assert_fail@plt+0x276c>
   13acc:	ldrd	r8, [r5, #8]
   13ad0:	cmp	r9, #0
   13ad4:	beq	13ab8 <__assert_fail@plt+0x25fc>
   13ad8:	mov	r0, r9
   13adc:	bl	11498 <closedir@plt>
   13ae0:	b	13ab8 <__assert_fail@plt+0x25fc>
   13ae4:	mov	r7, r6
   13ae8:	ldr	r6, [r7, #8]
   13aec:	cmp	r6, #0
   13af0:	beq	13c54 <__assert_fail@plt+0x2798>
   13af4:	mov	r0, r7
   13af8:	str	r6, [r4]
   13afc:	bl	12e18 <__assert_fail@plt+0x195c>
   13b00:	ldr	r0, [r6, #48]	; 0x30
   13b04:	cmp	r0, #0
   13b08:	beq	13c9c <__assert_fail@plt+0x27e0>
   13b0c:	ldrh	r0, [r6, #60]	; 0x3c
   13b10:	mov	r7, r6
   13b14:	cmp	r0, #4
   13b18:	beq	13ae8 <__assert_fail@plt+0x262c>
   13b1c:	cmp	r0, #2
   13b20:	bne	14018 <__assert_fail@plt+0x2b5c>
   13b24:	mov	r0, r4
   13b28:	mov	r1, r6
   13b2c:	mov	r2, #1
   13b30:	bl	134f0 <__assert_fail@plt+0x2034>
   13b34:	cmp	r0, #1
   13b38:	strh	r0, [r6, #56]	; 0x38
   13b3c:	bne	14010 <__assert_fail@plt+0x2b54>
   13b40:	ldr	r0, [r4, #48]	; 0x30
   13b44:	tst	r0, #4
   13b48:	bne	14010 <__assert_fail@plt+0x2b54>
   13b4c:	mov	r1, #32768	; 0x8000
   13b50:	tst	r0, #512	; 0x200
   13b54:	and	r1, r1, r0, lsl #11
   13b58:	orr	r1, r1, #18688	; 0x4900
   13b5c:	orr	r2, r1, #524288	; 0x80000
   13b60:	bne	13fe8 <__assert_fail@plt+0x2b2c>
   13b64:	movw	r0, #48748	; 0xbe6c
   13b68:	mov	r1, r2
   13b6c:	movt	r0, #1
   13b70:	bl	1ab18 <__assert_fail@plt+0x965c>
   13b74:	cmn	r0, #1
   13b78:	str	r0, [r6, #36]	; 0x24
   13b7c:	bgt	14004 <__assert_fail@plt+0x2b48>
   13b80:	bl	11378 <__errno_location@plt>
   13b84:	ldr	r0, [r0]
   13b88:	mov	r1, #7
   13b8c:	strh	r1, [r6, #56]	; 0x38
   13b90:	str	r0, [r6, #32]
   13b94:	b	14010 <__assert_fail@plt+0x2b54>
   13b98:	tst	r0, #64	; 0x40
   13b9c:	beq	13bb8 <__assert_fail@plt+0x26fc>
   13ba0:	ldrd	r2, [r4, #16]
   13ba4:	ldrd	r8, [r6, #64]	; 0x40
   13ba8:	eor	r1, r9, r3
   13bac:	eor	r2, r8, r2
   13bb0:	orrs	r1, r2, r1
   13bb4:	bne	13a94 <__assert_fail@plt+0x25d8>
   13bb8:	ldr	r7, [r4, #4]
   13bbc:	cmp	r7, #0
   13bc0:	beq	13d34 <__assert_fail@plt+0x2878>
   13bc4:	tst	r0, #4096	; 0x1000
   13bc8:	bne	13cec <__assert_fail@plt+0x2830>
   13bcc:	ldr	r3, [r6, #24]
   13bd0:	mov	r0, r4
   13bd4:	mov	r1, r6
   13bd8:	mvn	r2, #0
   13bdc:	bl	142fc <__assert_fail@plt+0x2e40>
   13be0:	cmp	r0, #0
   13be4:	beq	13d4c <__assert_fail@plt+0x2890>
   13be8:	bl	11378 <__errno_location@plt>
   13bec:	ldr	r0, [r0]
   13bf0:	str	r0, [r6, #32]
   13bf4:	ldrh	r0, [r6, #58]	; 0x3a
   13bf8:	orr	r0, r0, #1
   13bfc:	strh	r0, [r6, #58]	; 0x3a
   13c00:	ldr	r0, [r4, #4]
   13c04:	cmp	r0, #0
   13c08:	beq	13d4c <__assert_fail@plt+0x2890>
   13c0c:	ldmib	r0, {r1, r2}
   13c10:	cmp	r2, #0
   13c14:	ldr	r1, [r1, #24]
   13c18:	str	r1, [r0, #24]
   13c1c:	mov	r0, r2
   13c20:	bne	13c0c <__assert_fail@plt+0x2750>
   13c24:	b	13d4c <__assert_fail@plt+0x2890>
   13c28:	mov	r0, #0
   13c2c:	str	r0, [r4, #4]
   13c30:	mov	r0, #6
   13c34:	strh	r0, [r6, #56]	; 0x38
   13c38:	mov	r0, r4
   13c3c:	mov	r1, r6
   13c40:	bl	14220 <__assert_fail@plt+0x2d64>
   13c44:	mov	r5, r6
   13c48:	mov	r0, r5
   13c4c:	sub	sp, fp, #24
   13c50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13c54:	ldr	r0, [r7, #4]
   13c58:	ldr	r1, [r0, #12]
   13c5c:	cmp	r1, #0
   13c60:	beq	13cc4 <__assert_fail@plt+0x2808>
   13c64:	str	r0, [r4]
   13c68:	mov	r2, #0
   13c6c:	ldr	r1, [r4, #24]
   13c70:	ldr	r0, [r0, #40]	; 0x28
   13c74:	strb	r2, [r1, r0]
   13c78:	mov	r0, r4
   13c7c:	mov	r1, #3
   13c80:	bl	145ac <__assert_fail@plt+0x30f0>
   13c84:	cmp	r0, #0
   13c88:	beq	13dc4 <__assert_fail@plt+0x2908>
   13c8c:	mov	r6, r0
   13c90:	mov	r0, r7
   13c94:	bl	12e18 <__assert_fail@plt+0x195c>
   13c98:	b	14018 <__assert_fail@plt+0x2b5c>
   13c9c:	mov	r0, r4
   13ca0:	bl	15144 <__assert_fail@plt+0x3c88>
   13ca4:	ldr	r1, [r4, #48]	; 0x30
   13ca8:	cmp	r0, #0
   13cac:	beq	13ccc <__assert_fail@plt+0x2810>
   13cb0:	orr	r0, r1, #8192	; 0x2000
   13cb4:	str	r0, [r4, #48]	; 0x30
   13cb8:	mov	r0, r5
   13cbc:	sub	sp, fp, #24
   13cc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13cc4:	mov	r5, r0
   13cc8:	b	13dd8 <__assert_fail@plt+0x291c>
   13ccc:	movw	r0, #258	; 0x102
   13cd0:	tst	r1, r0
   13cd4:	beq	13e74 <__assert_fail@plt+0x29b8>
   13cd8:	ldr	r0, [r4, #56]	; 0x38
   13cdc:	cmp	r0, #0
   13ce0:	beq	13e7c <__assert_fail@plt+0x29c0>
   13ce4:	bl	15e68 <__assert_fail@plt+0x49ac>
   13ce8:	b	13e7c <__assert_fail@plt+0x29c0>
   13cec:	bic	r0, r0, #4096	; 0x1000
   13cf0:	str	r0, [r4, #48]	; 0x30
   13cf4:	ldrd	r8, [r7, #8]
   13cf8:	cmp	r9, #0
   13cfc:	bne	13d20 <__assert_fail@plt+0x2864>
   13d00:	mov	r0, r7
   13d04:	bl	12e18 <__assert_fail@plt+0x195c>
   13d08:	cmp	r8, #0
   13d0c:	mov	r7, r8
   13d10:	beq	13d2c <__assert_fail@plt+0x2870>
   13d14:	ldrd	r8, [r7, #8]
   13d18:	cmp	r9, #0
   13d1c:	beq	13d00 <__assert_fail@plt+0x2844>
   13d20:	mov	r0, r9
   13d24:	bl	11498 <closedir@plt>
   13d28:	b	13d00 <__assert_fail@plt+0x2844>
   13d2c:	mov	r0, #0
   13d30:	str	r0, [r4, #4]
   13d34:	mov	r0, r4
   13d38:	mov	r1, #3
   13d3c:	bl	145ac <__assert_fail@plt+0x30f0>
   13d40:	cmp	r0, #0
   13d44:	str	r0, [r4, #4]
   13d48:	beq	13d5c <__assert_fail@plt+0x28a0>
   13d4c:	ldr	r6, [r4, #4]
   13d50:	mov	r0, #0
   13d54:	str	r0, [r4, #4]
   13d58:	b	14018 <__assert_fail@plt+0x2b5c>
   13d5c:	ldrb	r0, [r4, #49]	; 0x31
   13d60:	tst	r0, #32
   13d64:	bne	14140 <__assert_fail@plt+0x2c84>
   13d68:	ldr	r0, [r6, #32]
   13d6c:	cmp	r0, #0
   13d70:	beq	13c38 <__assert_fail@plt+0x277c>
   13d74:	ldrh	r0, [r6, #56]	; 0x38
   13d78:	cmp	r0, #4
   13d7c:	beq	13c38 <__assert_fail@plt+0x277c>
   13d80:	mov	r0, #7
   13d84:	b	13c34 <__assert_fail@plt+0x2778>
   13d88:	ldr	r0, [r4, #32]
   13d8c:	movw	r1, #48748	; 0xbe6c
   13d90:	movt	r1, #1
   13d94:	bl	16bcc <__assert_fail@plt+0x5710>
   13d98:	cmn	r0, #1
   13d9c:	str	r0, [r6, #36]	; 0x24
   13da0:	ble	13a34 <__assert_fail@plt+0x2578>
   13da4:	ldrh	r0, [r6, #58]	; 0x3a
   13da8:	orr	r0, r0, #2
   13dac:	strh	r0, [r6, #58]	; 0x3a
   13db0:	str	r6, [r4]
   13db4:	ldrh	r0, [r6, #56]	; 0x38
   13db8:	cmp	r0, #11
   13dbc:	beq	14064 <__assert_fail@plt+0x2ba8>
   13dc0:	b	14098 <__assert_fail@plt+0x2bdc>
   13dc4:	ldrb	r0, [r4, #49]	; 0x31
   13dc8:	mov	r5, #0
   13dcc:	tst	r0, #32
   13dd0:	bne	14140 <__assert_fail@plt+0x2c84>
   13dd4:	ldr	r5, [r7, #4]
   13dd8:	mov	r0, r7
   13ddc:	str	r5, [r4]
   13de0:	bl	12e18 <__assert_fail@plt+0x195c>
   13de4:	ldr	r0, [r5, #48]	; 0x30
   13de8:	cmn	r0, #1
   13dec:	beq	13e50 <__assert_fail@plt+0x2994>
   13df0:	ldrh	r0, [r5, #56]	; 0x38
   13df4:	cmp	r0, #11
   13df8:	beq	1421c <__assert_fail@plt+0x2d60>
   13dfc:	ldr	r0, [r5, #40]	; 0x28
   13e00:	ldr	r1, [r4, #24]
   13e04:	mov	r2, #0
   13e08:	strb	r2, [r1, r0]
   13e0c:	ldr	r0, [r5, #48]	; 0x30
   13e10:	cmp	r0, #0
   13e14:	beq	13f6c <__assert_fail@plt+0x2ab0>
   13e18:	ldrh	r0, [r5, #58]	; 0x3a
   13e1c:	tst	r0, #2
   13e20:	bne	13fa4 <__assert_fail@plt+0x2ae8>
   13e24:	tst	r0, #1
   13e28:	bne	141d4 <__assert_fail@plt+0x2d18>
   13e2c:	ldr	r1, [r5, #4]
   13e30:	movw	r3, #48747	; 0xbe6b
   13e34:	mov	r0, r4
   13e38:	mvn	r2, #0
   13e3c:	movt	r3, #1
   13e40:	bl	142fc <__assert_fail@plt+0x2e40>
   13e44:	cmp	r0, #0
   13e48:	bne	13f7c <__assert_fail@plt+0x2ac0>
   13e4c:	b	141d4 <__assert_fail@plt+0x2d18>
   13e50:	mov	r0, r5
   13e54:	bl	12e18 <__assert_fail@plt+0x195c>
   13e58:	bl	11378 <__errno_location@plt>
   13e5c:	mov	r5, #0
   13e60:	str	r5, [r0]
   13e64:	str	r5, [r4]
   13e68:	mov	r0, r5
   13e6c:	sub	sp, fp, #24
   13e70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e74:	ldr	r0, [r4, #56]	; 0x38
   13e78:	bl	12e18 <__assert_fail@plt+0x195c>
   13e7c:	ldr	r1, [r6, #52]	; 0x34
   13e80:	add	r7, r6, #168	; 0xa8
   13e84:	str	r1, [r6, #40]	; 0x28
   13e88:	add	r2, r1, #1
   13e8c:	mov	r1, r7
   13e90:	ldr	r0, [r4, #24]
   13e94:	bl	111f8 <memmove@plt>
   13e98:	mov	r0, r7
   13e9c:	mov	r1, #47	; 0x2f
   13ea0:	bl	113f0 <strrchr@plt>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13ee4 <__assert_fail@plt+0x2a28>
   13eac:	cmp	r0, r7
   13eb0:	bne	13ec0 <__assert_fail@plt+0x2a04>
   13eb4:	ldrb	r1, [r6, #169]	; 0xa9
   13eb8:	cmp	r1, #0
   13ebc:	beq	13ee4 <__assert_fail@plt+0x2a28>
   13ec0:	add	r8, r0, #1
   13ec4:	mov	r0, r8
   13ec8:	bl	11348 <strlen@plt>
   13ecc:	mov	r9, r0
   13ed0:	add	r2, r0, #1
   13ed4:	mov	r0, r7
   13ed8:	mov	r1, r8
   13edc:	bl	111f8 <memmove@plt>
   13ee0:	str	r9, [r6, #52]	; 0x34
   13ee4:	ldr	r0, [r4, #24]
   13ee8:	movw	r1, #258	; 0x102
   13eec:	str	r0, [r6, #24]
   13ef0:	str	r0, [r6, #28]
   13ef4:	ldrh	r0, [r4, #48]	; 0x30
   13ef8:	tst	r0, r1
   13efc:	beq	13f40 <__assert_fail@plt+0x2a84>
   13f00:	movw	r0, #11800	; 0x2e18
   13f04:	movw	r2, #21560	; 0x5438
   13f08:	movw	r3, #21592	; 0x5458
   13f0c:	mov	r1, #0
   13f10:	movt	r0, #1
   13f14:	movt	r2, #1
   13f18:	movt	r3, #1
   13f1c:	str	r0, [sp]
   13f20:	mov	r0, #31
   13f24:	bl	15b4c <__assert_fail@plt+0x4690>
   13f28:	str	r0, [r4, #56]	; 0x38
   13f2c:	str	r6, [r4]
   13f30:	ldrh	r0, [r6, #56]	; 0x38
   13f34:	cmp	r0, #11
   13f38:	beq	14064 <__assert_fail@plt+0x2ba8>
   13f3c:	b	14098 <__assert_fail@plt+0x2bdc>
   13f40:	mov	r0, #32
   13f44:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   13f48:	cmp	r0, #0
   13f4c:	str	r0, [r4, #56]	; 0x38
   13f50:	beq	14054 <__assert_fail@plt+0x2b98>
   13f54:	bl	1a7ac <__assert_fail@plt+0x92f0>
   13f58:	str	r6, [r4]
   13f5c:	ldrh	r0, [r6, #56]	; 0x38
   13f60:	cmp	r0, #11
   13f64:	beq	14064 <__assert_fail@plt+0x2ba8>
   13f68:	b	14098 <__assert_fail@plt+0x2bdc>
   13f6c:	mov	r0, r4
   13f70:	bl	15144 <__assert_fail@plt+0x3c88>
   13f74:	cmp	r0, #0
   13f78:	beq	141d4 <__assert_fail@plt+0x2d18>
   13f7c:	bl	11378 <__errno_location@plt>
   13f80:	ldr	r0, [r0]
   13f84:	str	r0, [r5, #32]
   13f88:	ldr	r0, [r4, #48]	; 0x30
   13f8c:	orr	r0, r0, #8192	; 0x2000
   13f90:	str	r0, [r4, #48]	; 0x30
   13f94:	ldrh	r0, [r5, #56]	; 0x38
   13f98:	cmp	r0, #2
   13f9c:	bne	141e0 <__assert_fail@plt+0x2d24>
   13fa0:	b	14204 <__assert_fail@plt+0x2d48>
   13fa4:	ldr	r0, [r4, #48]	; 0x30
   13fa8:	tst	r0, #4
   13fac:	bne	141cc <__assert_fail@plt+0x2d10>
   13fb0:	ldr	r6, [r5, #36]	; 0x24
   13fb4:	tst	r0, #512	; 0x200
   13fb8:	bne	141a0 <__assert_fail@plt+0x2ce4>
   13fbc:	mov	r0, r6
   13fc0:	bl	1142c <fchdir@plt>
   13fc4:	cmp	r0, #0
   13fc8:	beq	141cc <__assert_fail@plt+0x2d10>
   13fcc:	bl	11378 <__errno_location@plt>
   13fd0:	ldr	r0, [r0]
   13fd4:	str	r0, [r5, #32]
   13fd8:	ldr	r0, [r4, #48]	; 0x30
   13fdc:	orr	r0, r0, #8192	; 0x2000
   13fe0:	str	r0, [r4, #48]	; 0x30
   13fe4:	b	141cc <__assert_fail@plt+0x2d10>
   13fe8:	ldr	r0, [r4, #32]
   13fec:	movw	r1, #48748	; 0xbe6c
   13ff0:	movt	r1, #1
   13ff4:	bl	16bcc <__assert_fail@plt+0x5710>
   13ff8:	cmn	r0, #1
   13ffc:	str	r0, [r6, #36]	; 0x24
   14000:	ble	13b80 <__assert_fail@plt+0x26c4>
   14004:	ldrh	r0, [r6, #58]	; 0x3a
   14008:	orr	r0, r0, #2
   1400c:	strh	r0, [r6, #58]	; 0x3a
   14010:	mov	r0, #3
   14014:	strh	r0, [r6, #60]	; 0x3c
   14018:	ldr	r0, [r6, #4]
   1401c:	ldr	r1, [r0, #28]
   14020:	ldr	r0, [r0, #40]	; 0x28
   14024:	sub	r2, r0, #1
   14028:	ldrb	r1, [r1, r2]
   1402c:	cmp	r1, #47	; 0x2f
   14030:	ldr	r1, [r4, #24]
   14034:	moveq	r0, r2
   14038:	mov	r2, #47	; 0x2f
   1403c:	strb	r2, [r1, r0]!
   14040:	ldr	r2, [r6, #52]	; 0x34
   14044:	add	r0, r1, #1
   14048:	add	r1, r6, #168	; 0xa8
   1404c:	add	r2, r2, #1
   14050:	bl	111f8 <memmove@plt>
   14054:	str	r6, [r4]
   14058:	ldrh	r0, [r6, #56]	; 0x38
   1405c:	cmp	r0, #11
   14060:	bne	14098 <__assert_fail@plt+0x2bdc>
   14064:	add	r0, r6, #112	; 0x70
   14068:	ldrd	r0, [r0]
   1406c:	eor	r2, r0, #1
   14070:	orrs	r2, r2, r1
   14074:	beq	1414c <__assert_fail@plt+0x2c90>
   14078:	eor	r0, r0, #2
   1407c:	orrs	r0, r0, r1
   14080:	bne	1421c <__assert_fail@plt+0x2d60>
   14084:	mov	r0, r4
   14088:	mov	r1, r6
   1408c:	mov	r2, #0
   14090:	bl	134f0 <__assert_fail@plt+0x2034>
   14094:	strh	r0, [r6, #56]	; 0x38
   14098:	cmp	r0, #1
   1409c:	bne	1413c <__assert_fail@plt+0x2c80>
   140a0:	ldr	r0, [r6, #48]	; 0x30
   140a4:	add	r8, r6, #64	; 0x40
   140a8:	cmp	r0, #0
   140ac:	bne	140b8 <__assert_fail@plt+0x2bfc>
   140b0:	ldrd	r0, [r8]
   140b4:	strd	r0, [r4, #16]
   140b8:	ldrh	r0, [r4, #48]	; 0x30
   140bc:	movw	r1, #258	; 0x102
   140c0:	tst	r0, r1
   140c4:	beq	1415c <__assert_fail@plt+0x2ca0>
   140c8:	mov	r0, #24
   140cc:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   140d0:	cmp	r0, #0
   140d4:	beq	14188 <__assert_fail@plt+0x2ccc>
   140d8:	ldrd	r2, [r8]
   140dc:	mov	r7, r0
   140e0:	add	r0, r6, #160	; 0xa0
   140e4:	stm	r7, {r2, r3}
   140e8:	add	r2, r7, #8
   140ec:	ldrd	r0, [r0]
   140f0:	stm	r2, {r0, r1, r6}
   140f4:	mov	r1, r7
   140f8:	ldr	r0, [r4, #56]	; 0x38
   140fc:	bl	167a8 <__assert_fail@plt+0x52ec>
   14100:	cmp	r0, r7
   14104:	beq	1414c <__assert_fail@plt+0x2c90>
   14108:	mov	r4, r0
   1410c:	mov	r0, r7
   14110:	bl	12e18 <__assert_fail@plt+0x195c>
   14114:	cmp	r4, #0
   14118:	beq	14188 <__assert_fail@plt+0x2ccc>
   1411c:	ldr	r0, [r4, #16]
   14120:	mov	r1, #2
   14124:	mov	r5, r6
   14128:	strh	r1, [r6, #56]	; 0x38
   1412c:	str	r0, [r6]
   14130:	mov	r0, r5
   14134:	sub	sp, fp, #24
   14138:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1413c:	mov	r5, r6
   14140:	mov	r0, r5
   14144:	sub	sp, fp, #24
   14148:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1414c:	mov	r5, r6
   14150:	mov	r0, r5
   14154:	sub	sp, fp, #24
   14158:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1415c:	ldr	r0, [r4, #56]	; 0x38
   14160:	mov	r1, r8
   14164:	bl	1a7c8 <__assert_fail@plt+0x930c>
   14168:	cmp	r0, #0
   1416c:	mov	r5, r6
   14170:	movne	r0, #2
   14174:	strhne	r0, [r6, #56]	; 0x38
   14178:	strne	r6, [r6]
   1417c:	mov	r0, r5
   14180:	sub	sp, fp, #24
   14184:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14188:	bl	11378 <__errno_location@plt>
   1418c:	mov	r1, #12
   14190:	str	r1, [r0]
   14194:	mov	r0, r5
   14198:	sub	sp, fp, #24
   1419c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141a0:	ldr	r1, [r4, #32]
   141a4:	cmp	r1, r6
   141a8:	bne	141b4 <__assert_fail@plt+0x2cf8>
   141ac:	cmn	r1, #100	; 0x64
   141b0:	bne	1421c <__assert_fail@plt+0x2d60>
   141b4:	add	r0, r4, #60	; 0x3c
   141b8:	bl	16ad4 <__assert_fail@plt+0x5618>
   141bc:	cmp	r0, #0
   141c0:	bmi	141c8 <__assert_fail@plt+0x2d0c>
   141c4:	bl	11480 <close@plt>
   141c8:	str	r6, [r4, #32]
   141cc:	ldr	r0, [r5, #36]	; 0x24
   141d0:	bl	11480 <close@plt>
   141d4:	ldrh	r0, [r5, #56]	; 0x38
   141d8:	cmp	r0, #2
   141dc:	beq	14204 <__assert_fail@plt+0x2d48>
   141e0:	ldr	r0, [r5, #32]
   141e4:	mov	r1, #7
   141e8:	cmp	r0, #0
   141ec:	movweq	r1, #6
   141f0:	strh	r1, [r5, #56]	; 0x38
   141f4:	bne	14204 <__assert_fail@plt+0x2d48>
   141f8:	mov	r0, r4
   141fc:	mov	r1, r5
   14200:	bl	14220 <__assert_fail@plt+0x2d64>
   14204:	ldrb	r0, [r4, #49]	; 0x31
   14208:	tst	r0, #32
   1420c:	movne	r5, #0
   14210:	mov	r0, r5
   14214:	sub	sp, fp, #24
   14218:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1421c:	bl	11474 <abort@plt>
   14220:	push	{r4, r5, r7, sl, fp, lr}
   14224:	add	fp, sp, #16
   14228:	sub	sp, sp, #24
   1422c:	ldrh	r2, [r0, #48]	; 0x30
   14230:	movw	r3, #258	; 0x102
   14234:	add	lr, r1, #64	; 0x40
   14238:	add	r4, r1, #160	; 0xa0
   1423c:	tst	r2, r3
   14240:	beq	14278 <__assert_fail@plt+0x2dbc>
   14244:	ldrd	r2, [lr]
   14248:	mov	r1, sp
   1424c:	stm	sp, {r2, r3}
   14250:	ldrd	r2, [r4]
   14254:	str	r3, [sp, #12]
   14258:	str	r2, [sp, #8]
   1425c:	ldr	r0, [r0, #56]	; 0x38
   14260:	bl	167f0 <__assert_fail@plt+0x5334>
   14264:	cmp	r0, #0
   14268:	beq	142f8 <__assert_fail@plt+0x2e3c>
   1426c:	bl	12e18 <__assert_fail@plt+0x195c>
   14270:	sub	sp, fp, #16
   14274:	pop	{r4, r5, r7, sl, fp, pc}
   14278:	ldr	r1, [r1, #4]
   1427c:	cmp	r1, #0
   14280:	beq	142f0 <__assert_fail@plt+0x2e34>
   14284:	ldr	r2, [r1, #48]	; 0x30
   14288:	cmp	r2, #0
   1428c:	bmi	142f0 <__assert_fail@plt+0x2e34>
   14290:	ldr	ip, [r0, #56]	; 0x38
   14294:	ldrd	r2, [ip, #16]
   14298:	orrs	r2, r2, r3
   1429c:	beq	142f8 <__assert_fail@plt+0x2e3c>
   142a0:	ldrd	r2, [r4]
   142a4:	ldrd	r4, [ip]
   142a8:	eor	r3, r5, r3
   142ac:	eor	r2, r4, r2
   142b0:	orrs	r2, r2, r3
   142b4:	bne	142f0 <__assert_fail@plt+0x2e34>
   142b8:	add	r3, ip, #8
   142bc:	ldm	lr, {r2, r5}
   142c0:	ldm	r3, {r4, r7}
   142c4:	eor	r7, r7, r5
   142c8:	eor	r2, r4, r2
   142cc:	orrs	r2, r2, r7
   142d0:	bne	142f0 <__assert_fail@plt+0x2e34>
   142d4:	add	r2, r1, #64	; 0x40
   142d8:	add	r1, r1, #160	; 0xa0
   142dc:	ldm	r2, {r2, r5}
   142e0:	stm	r3, {r2, r5}
   142e4:	ldr	r0, [r0, #56]	; 0x38
   142e8:	ldrd	r2, [r1]
   142ec:	strd	r2, [r0]
   142f0:	sub	sp, fp, #16
   142f4:	pop	{r4, r5, r7, sl, fp, pc}
   142f8:	bl	11474 <abort@plt>
   142fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14300:	add	fp, sp, #28
   14304:	sub	sp, sp, #108	; 0x6c
   14308:	mov	r7, r3
   1430c:	mov	r4, r2
   14310:	mov	r8, r1
   14314:	mov	sl, r0
   14318:	cmp	r3, #0
   1431c:	beq	143a8 <__assert_fail@plt+0x2eec>
   14320:	movw	r1, #48747	; 0xbe6b
   14324:	mov	r0, r7
   14328:	movt	r1, #1
   1432c:	bl	111d4 <strcmp@plt>
   14330:	cmp	r0, #0
   14334:	mov	r6, r0
   14338:	movwne	r6, #1
   1433c:	ldr	r0, [sl, #48]	; 0x30
   14340:	tst	r0, #4
   14344:	bne	143b8 <__assert_fail@plt+0x2efc>
   14348:	cmn	r4, #1
   1434c:	mov	r1, #0
   14350:	mov	r9, #0
   14354:	movwgt	r1, #1
   14358:	orrs	r1, r1, r6
   1435c:	bne	143e0 <__assert_fail@plt+0x2f24>
   14360:	ands	r0, r0, #512	; 0x200
   14364:	beq	143e0 <__assert_fail@plt+0x2f24>
   14368:	add	r4, sl, #60	; 0x3c
   1436c:	mov	r0, r4
   14370:	bl	16acc <__assert_fail@plt+0x5610>
   14374:	cmp	r0, #0
   14378:	bne	143e8 <__assert_fail@plt+0x2f2c>
   1437c:	mov	r0, r4
   14380:	bl	16b20 <__assert_fail@plt+0x5664>
   14384:	cmn	r0, #1
   14388:	ble	143e8 <__assert_fail@plt+0x2f2c>
   1438c:	mov	r4, r0
   14390:	mov	r9, #0
   14394:	mov	r7, #0
   14398:	ldr	r5, [sl, #48]	; 0x30
   1439c:	tst	r5, #2
   143a0:	beq	1442c <__assert_fail@plt+0x2f70>
   143a4:	b	14474 <__assert_fail@plt+0x2fb8>
   143a8:	mov	r6, #1
   143ac:	ldr	r0, [sl, #48]	; 0x30
   143b0:	tst	r0, #4
   143b4:	beq	14348 <__assert_fail@plt+0x2e8c>
   143b8:	mov	r5, #0
   143bc:	cmp	r4, #0
   143c0:	bmi	14468 <__assert_fail@plt+0x2fac>
   143c4:	ands	r0, r0, #512	; 0x200
   143c8:	beq	14468 <__assert_fail@plt+0x2fac>
   143cc:	mov	r0, r4
   143d0:	bl	11480 <close@plt>
   143d4:	mov	r0, r5
   143d8:	sub	sp, fp, #28
   143dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143e0:	cmn	r4, #1
   143e4:	bgt	14420 <__assert_fail@plt+0x2f64>
   143e8:	ldr	r0, [sl, #48]	; 0x30
   143ec:	mov	r1, #32768	; 0x8000
   143f0:	and	r1, r1, r0, lsl #11
   143f4:	tst	r0, #512	; 0x200
   143f8:	orr	r1, r1, #18688	; 0x4900
   143fc:	orr	r2, r1, #524288	; 0x80000
   14400:	bne	1449c <__assert_fail@plt+0x2fe0>
   14404:	mov	r0, r7
   14408:	mov	r1, r2
   1440c:	bl	1ab18 <__assert_fail@plt+0x965c>
   14410:	mov	r4, r0
   14414:	mov	r9, #1
   14418:	cmp	r0, #0
   1441c:	bmi	144b8 <__assert_fail@plt+0x2ffc>
   14420:	ldr	r5, [sl, #48]	; 0x30
   14424:	tst	r5, #2
   14428:	bne	14474 <__assert_fail@plt+0x2fb8>
   1442c:	cmp	r7, #0
   14430:	beq	1444c <__assert_fail@plt+0x2f90>
   14434:	movw	r1, #48747	; 0xbe6b
   14438:	mov	r0, r7
   1443c:	movt	r1, #1
   14440:	bl	111d4 <strcmp@plt>
   14444:	cmp	r0, #0
   14448:	beq	14474 <__assert_fail@plt+0x2fb8>
   1444c:	tst	r5, #512	; 0x200
   14450:	bne	14510 <__assert_fail@plt+0x3054>
   14454:	mov	r0, r4
   14458:	bl	1142c <fchdir@plt>
   1445c:	mov	r5, r0
   14460:	cmp	r9, #0
   14464:	bne	14558 <__assert_fail@plt+0x309c>
   14468:	mov	r0, r5
   1446c:	sub	sp, fp, #28
   14470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14474:	mov	r2, sp
   14478:	mov	r0, #3
   1447c:	mov	r1, r4
   14480:	bl	11288 <__fxstat64@plt>
   14484:	cmp	r0, #0
   14488:	beq	144c8 <__assert_fail@plt+0x300c>
   1448c:	mvn	r5, #0
   14490:	cmp	r9, #0
   14494:	beq	14468 <__assert_fail@plt+0x2fac>
   14498:	b	14558 <__assert_fail@plt+0x309c>
   1449c:	ldr	r0, [sl, #32]
   144a0:	mov	r1, r7
   144a4:	bl	16bcc <__assert_fail@plt+0x5710>
   144a8:	mov	r4, r0
   144ac:	mov	r9, #1
   144b0:	cmp	r0, #0
   144b4:	bpl	14420 <__assert_fail@plt+0x2f64>
   144b8:	mvn	r5, #0
   144bc:	mov	r0, r5
   144c0:	sub	sp, fp, #28
   144c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c8:	add	r0, r8, #64	; 0x40
   144cc:	ldm	sp, {r2, r3}
   144d0:	ldrd	r0, [r0]
   144d4:	eor	r1, r1, r3
   144d8:	eor	r0, r0, r2
   144dc:	orrs	r0, r0, r1
   144e0:	bne	14540 <__assert_fail@plt+0x3084>
   144e4:	add	r0, r8, #160	; 0xa0
   144e8:	ldr	r2, [sp, #96]	; 0x60
   144ec:	ldr	r3, [sp, #100]	; 0x64
   144f0:	ldrd	r0, [r0]
   144f4:	eor	r1, r1, r3
   144f8:	eor	r0, r0, r2
   144fc:	orrs	r0, r0, r1
   14500:	bne	14540 <__assert_fail@plt+0x3084>
   14504:	ldr	r5, [sl, #48]	; 0x30
   14508:	tst	r5, #512	; 0x200
   1450c:	beq	14454 <__assert_fail@plt+0x2f98>
   14510:	ldr	r1, [sl, #32]
   14514:	cmp	r1, r4
   14518:	bne	14524 <__assert_fail@plt+0x3068>
   1451c:	cmn	r1, #100	; 0x64
   14520:	bne	145a8 <__assert_fail@plt+0x30ec>
   14524:	cmp	r6, #0
   14528:	beq	1457c <__assert_fail@plt+0x30c0>
   1452c:	add	r0, sl, #60	; 0x3c
   14530:	bl	16ad4 <__assert_fail@plt+0x5618>
   14534:	cmp	r0, #0
   14538:	bpl	14590 <__assert_fail@plt+0x30d4>
   1453c:	b	14594 <__assert_fail@plt+0x30d8>
   14540:	bl	11378 <__errno_location@plt>
   14544:	mov	r1, #2
   14548:	str	r1, [r0]
   1454c:	mvn	r5, #0
   14550:	cmp	r9, #0
   14554:	beq	14468 <__assert_fail@plt+0x2fac>
   14558:	bl	11378 <__errno_location@plt>
   1455c:	ldr	r7, [r0]
   14560:	mov	r6, r0
   14564:	mov	r0, r4
   14568:	bl	11480 <close@plt>
   1456c:	str	r7, [r6]
   14570:	mov	r0, r5
   14574:	sub	sp, fp, #28
   14578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1457c:	tst	r5, #4
   14580:	bne	14594 <__assert_fail@plt+0x30d8>
   14584:	cmp	r1, #0
   14588:	bmi	14594 <__assert_fail@plt+0x30d8>
   1458c:	mov	r0, r1
   14590:	bl	11480 <close@plt>
   14594:	str	r4, [sl, #32]
   14598:	mov	r5, #0
   1459c:	mov	r0, r5
   145a0:	sub	sp, fp, #28
   145a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a8:	bl	11474 <abort@plt>
   145ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145b0:	add	fp, sp, #28
   145b4:	sub	sp, sp, #68	; 0x44
   145b8:	ldr	sl, [r0]
   145bc:	mov	r4, r1
   145c0:	mov	r5, r0
   145c4:	str	r0, [fp, #-44]	; 0xffffffd4
   145c8:	ldr	r6, [sl, #12]
   145cc:	cmp	r6, #0
   145d0:	beq	14618 <__assert_fail@plt+0x315c>
   145d4:	mov	r0, r6
   145d8:	bl	11420 <dirfd@plt>
   145dc:	cmn	r0, #1
   145e0:	str	r0, [fp, #-32]	; 0xffffffe0
   145e4:	ble	1464c <__assert_fail@plt+0x3190>
   145e8:	mov	r1, r5
   145ec:	str	r6, [sp, #12]
   145f0:	str	r4, [sp, #4]
   145f4:	mov	r7, #0
   145f8:	ldr	r0, [r1, #44]!	; 0x2c
   145fc:	str	r1, [sp, #20]
   14600:	mvn	r1, #0
   14604:	cmp	r0, #0
   14608:	movweq	r1, #34464	; 0x86a0
   1460c:	movteq	r1, #1
   14610:	str	r1, [sp, #32]
   14614:	b	14944 <__assert_fail@plt+0x3488>
   14618:	ldr	r3, [r5, #48]	; 0x30
   1461c:	mvn	r0, #99	; 0x63
   14620:	mov	r2, #0
   14624:	and	r1, r3, #516	; 0x204
   14628:	cmp	r1, #512	; 0x200
   1462c:	ldr	r1, [sl, #24]
   14630:	ldreq	r0, [r5, #32]
   14634:	tst	r3, #16
   14638:	beq	14674 <__assert_fail@plt+0x31b8>
   1463c:	tst	r3, #1
   14640:	bne	14668 <__assert_fail@plt+0x31ac>
   14644:	mov	r2, #32768	; 0x8000
   14648:	b	14674 <__assert_fail@plt+0x31b8>
   1464c:	ldr	r0, [sl, #12]
   14650:	bl	11498 <closedir@plt>
   14654:	mov	r6, #0
   14658:	str	r6, [sl, #12]
   1465c:	cmp	r4, #3
   14660:	beq	146bc <__assert_fail@plt+0x3200>
   14664:	b	15054 <__assert_fail@plt+0x3b98>
   14668:	ldr	r3, [sl, #48]	; 0x30
   1466c:	cmp	r3, #0
   14670:	movne	r2, #32768	; 0x8000
   14674:	sub	r3, fp, #32
   14678:	bl	16c04 <__assert_fail@plt+0x5748>
   1467c:	cmp	r0, #0
   14680:	str	r0, [sl, #12]
   14684:	beq	146b0 <__assert_fail@plt+0x31f4>
   14688:	ldrh	r0, [sl, #56]	; 0x38
   1468c:	cmp	r0, #11
   14690:	bne	146dc <__assert_fail@plt+0x3220>
   14694:	mov	r0, r5
   14698:	mov	r1, sl
   1469c:	mov	r2, #0
   146a0:	bl	134f0 <__assert_fail@plt+0x2034>
   146a4:	strh	r0, [sl, #56]	; 0x38
   146a8:	mov	r7, r5
   146ac:	b	147a8 <__assert_fail@plt+0x32ec>
   146b0:	mov	r6, #0
   146b4:	cmp	r4, #3
   146b8:	bne	15054 <__assert_fail@plt+0x3b98>
   146bc:	mov	r0, #4
   146c0:	strh	r0, [sl, #56]	; 0x38
   146c4:	bl	11378 <__errno_location@plt>
   146c8:	ldr	r0, [r0]
   146cc:	str	r0, [sl, #32]
   146d0:	mov	r0, r6
   146d4:	sub	sp, fp, #28
   146d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146dc:	ldrb	r0, [r5, #49]	; 0x31
   146e0:	mov	r7, r5
   146e4:	tst	r0, #1
   146e8:	beq	147a8 <__assert_fail@plt+0x32ec>
   146ec:	mov	r0, r7
   146f0:	mov	r1, sl
   146f4:	add	r8, sl, #64	; 0x40
   146f8:	bl	14220 <__assert_fail@plt+0x2d64>
   146fc:	mov	r0, r7
   14700:	mov	r1, sl
   14704:	mov	r2, #0
   14708:	bl	134f0 <__assert_fail@plt+0x2034>
   1470c:	ldrh	r0, [r7, #48]	; 0x30
   14710:	movw	r1, #258	; 0x102
   14714:	tst	r0, r1
   14718:	beq	1478c <__assert_fail@plt+0x32d0>
   1471c:	mov	r0, #24
   14720:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   14724:	cmp	r0, #0
   14728:	beq	14850 <__assert_fail@plt+0x3394>
   1472c:	ldrd	r2, [r8]
   14730:	mov	r5, r0
   14734:	add	r0, sl, #160	; 0xa0
   14738:	ldr	r7, [fp, #-44]	; 0xffffffd4
   1473c:	stm	r5, {r2, r3}
   14740:	add	r2, r5, #8
   14744:	ldrd	r0, [r0]
   14748:	stm	r2, {r0, r1, sl}
   1474c:	mov	r1, r5
   14750:	ldr	r0, [r7, #56]	; 0x38
   14754:	bl	167a8 <__assert_fail@plt+0x52ec>
   14758:	cmp	r0, r5
   1475c:	beq	147a8 <__assert_fail@plt+0x32ec>
   14760:	mov	r8, r0
   14764:	mov	r0, r5
   14768:	bl	12e18 <__assert_fail@plt+0x195c>
   1476c:	cmp	r8, #0
   14770:	beq	14850 <__assert_fail@plt+0x3394>
   14774:	ldr	r7, [fp, #-44]	; 0xffffffd4
   14778:	ldr	r0, [r8, #16]
   1477c:	mov	r1, #2
   14780:	strh	r1, [sl, #56]	; 0x38
   14784:	str	r0, [sl]
   14788:	b	147a8 <__assert_fail@plt+0x32ec>
   1478c:	ldr	r0, [r7, #56]	; 0x38
   14790:	mov	r1, r8
   14794:	bl	1a7c8 <__assert_fail@plt+0x930c>
   14798:	cmp	r0, #0
   1479c:	movne	r0, #2
   147a0:	strhne	r0, [sl, #56]	; 0x38
   147a4:	strne	sl, [sl]
   147a8:	mov	r1, r7
   147ac:	mov	r5, r7
   147b0:	str	r4, [sp, #4]
   147b4:	str	r6, [sp, #12]
   147b8:	ldr	r0, [r1, #44]!	; 0x2c
   147bc:	str	r1, [sp, #20]
   147c0:	mvn	r1, #0
   147c4:	cmp	r0, #0
   147c8:	movweq	r1, #34464	; 0x86a0
   147cc:	movteq	r1, #1
   147d0:	cmp	r4, #2
   147d4:	str	r1, [sp, #32]
   147d8:	bne	147f4 <__assert_fail@plt+0x3338>
   147dc:	mov	r7, #1
   147e0:	cmp	r4, #3
   147e4:	bne	14944 <__assert_fail@plt+0x3488>
   147e8:	sub	r0, r4, #3
   147ec:	mov	r5, #0
   147f0:	b	14888 <__assert_fail@plt+0x33cc>
   147f4:	ldr	r0, [r5, #48]	; 0x30
   147f8:	and	r0, r0, #56	; 0x38
   147fc:	cmp	r0, #24
   14800:	bne	14880 <__assert_fail@plt+0x33c4>
   14804:	ldr	r0, [sl, #84]	; 0x54
   14808:	cmp	r0, #2
   1480c:	bne	14880 <__assert_fail@plt+0x33c4>
   14810:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14814:	mov	r0, sl
   14818:	bl	154d8 <__assert_fail@plt+0x401c>
   1481c:	movw	r1, #26984	; 0x6968
   14820:	cmp	r0, r1
   14824:	ble	1486c <__assert_fail@plt+0x33b0>
   14828:	movw	r1, #26985	; 0x6969
   1482c:	cmp	r0, r1
   14830:	movwne	r1, #16719	; 0x414f
   14834:	movtne	r1, #21318	; 0x5346
   14838:	cmpne	r0, r1
   1483c:	beq	14880 <__assert_fail@plt+0x33c4>
   14840:	movw	r1, #40864	; 0x9fa0
   14844:	cmp	r0, r1
   14848:	beq	14880 <__assert_fail@plt+0x33c4>
   1484c:	b	147dc <__assert_fail@plt+0x3320>
   14850:	bl	11378 <__errno_location@plt>
   14854:	mov	r1, #12
   14858:	mov	r6, #0
   1485c:	str	r1, [r0]
   14860:	mov	r0, r6
   14864:	sub	sp, fp, #28
   14868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1486c:	movw	r1, #19778	; 0x4d42
   14870:	movt	r1, #65363	; 0xff53
   14874:	cmp	r0, r1
   14878:	cmpne	r0, #0
   1487c:	bne	147dc <__assert_fail@plt+0x3320>
   14880:	sub	r0, r4, #3
   14884:	mov	r5, #1
   14888:	clz	r0, r0
   1488c:	lsr	r7, r0, #5
   14890:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14894:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14898:	ldrb	r0, [r0, #49]	; 0x31
   1489c:	tst	r0, #2
   148a0:	beq	148bc <__assert_fail@plt+0x3400>
   148a4:	mov	r0, r2
   148a8:	movw	r1, #1030	; 0x406
   148ac:	mov	r2, #3
   148b0:	bl	1a938 <__assert_fail@plt+0x947c>
   148b4:	mov	r2, r0
   148b8:	str	r0, [fp, #-32]	; 0xffffffe0
   148bc:	cmp	r2, #0
   148c0:	bmi	148dc <__assert_fail@plt+0x3420>
   148c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   148c8:	mov	r1, sl
   148cc:	mov	r3, #0
   148d0:	bl	142fc <__assert_fail@plt+0x2e40>
   148d4:	cmp	r0, #0
   148d8:	beq	1493c <__assert_fail@plt+0x3480>
   148dc:	and	r0, r7, r5
   148e0:	cmp	r0, #1
   148e4:	bne	148f4 <__assert_fail@plt+0x3438>
   148e8:	bl	11378 <__errno_location@plt>
   148ec:	ldr	r0, [r0]
   148f0:	str	r0, [sl, #32]
   148f4:	ldrh	r0, [sl, #58]	; 0x3a
   148f8:	orr	r0, r0, #1
   148fc:	strh	r0, [sl, #58]	; 0x3a
   14900:	ldr	r0, [sl, #12]
   14904:	bl	11498 <closedir@plt>
   14908:	ldr	r5, [fp, #-44]	; 0xffffffd4
   1490c:	mov	r4, #0
   14910:	str	r4, [sl, #12]
   14914:	ldrb	r0, [r5, #49]	; 0x31
   14918:	tst	r0, #2
   1491c:	beq	14930 <__assert_fail@plt+0x3474>
   14920:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14924:	cmp	r0, #0
   14928:	bmi	14930 <__assert_fail@plt+0x3474>
   1492c:	bl	11480 <close@plt>
   14930:	mov	r7, #1
   14934:	str	r4, [sl, #12]
   14938:	b	14944 <__assert_fail@plt+0x3488>
   1493c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14940:	mov	r7, #0
   14944:	ldr	r0, [sl, #40]	; 0x28
   14948:	ldr	r1, [sl, #28]
   1494c:	mov	r9, #0
   14950:	sub	r2, r0, #1
   14954:	ldrb	r1, [r1, r2]
   14958:	cmp	r1, #47	; 0x2f
   1495c:	ldrb	r1, [r5, #48]	; 0x30
   14960:	moveq	r0, r2
   14964:	tst	r1, #4
   14968:	mov	r1, #0
   1496c:	str	r1, [sp, #40]	; 0x28
   14970:	beq	14988 <__assert_fail@plt+0x34cc>
   14974:	ldr	r1, [r5, #24]
   14978:	mov	r2, #47	; 0x2f
   1497c:	strb	r2, [r1, r0]!
   14980:	add	r1, r1, #1
   14984:	str	r1, [sp, #40]	; 0x28
   14988:	ldr	r6, [sl, #12]
   1498c:	add	r1, r0, #1
   14990:	str	r1, [fp, #-40]	; 0xffffffd8
   14994:	cmp	r6, #0
   14998:	beq	14d60 <__assert_fail@plt+0x38a4>
   1499c:	ldr	r0, [sl, #48]	; 0x30
   149a0:	str	r7, [sp]
   149a4:	mov	r7, #0
   149a8:	add	r0, r0, #1
   149ac:	str	r0, [sp, #24]
   149b0:	ldr	r0, [r5, #36]	; 0x24
   149b4:	sub	r0, r0, r1
   149b8:	str	r0, [sp, #44]	; 0x2c
   149bc:	bl	11378 <__errno_location@plt>
   149c0:	str	r0, [sp, #36]	; 0x24
   149c4:	mov	r0, #0
   149c8:	mov	r9, #0
   149cc:	mov	r4, #0
   149d0:	str	sl, [sp, #28]
   149d4:	str	r0, [sp, #48]	; 0x30
   149d8:	mov	r0, #0
   149dc:	str	r0, [sp, #8]
   149e0:	mov	r0, #0
   149e4:	str	r0, [sp, #16]
   149e8:	ldr	r0, [sp, #36]	; 0x24
   149ec:	str	r7, [r0]
   149f0:	mov	r0, r6
   149f4:	bl	11408 <readdir64@plt>
   149f8:	cmp	r0, #0
   149fc:	beq	14ddc <__assert_fail@plt+0x3920>
   14a00:	mov	r8, r0
   14a04:	ldrb	r0, [r5, #48]	; 0x30
   14a08:	tst	r0, #32
   14a0c:	bne	14a3c <__assert_fail@plt+0x3580>
   14a10:	ldrb	r0, [r8, #19]
   14a14:	cmp	r0, #46	; 0x2e
   14a18:	bne	14a3c <__assert_fail@plt+0x3580>
   14a1c:	ldrb	r0, [r8, #20]
   14a20:	cmp	r0, #0
   14a24:	beq	14cf8 <__assert_fail@plt+0x383c>
   14a28:	cmp	r0, #46	; 0x2e
   14a2c:	bne	14a3c <__assert_fail@plt+0x3580>
   14a30:	ldrb	r0, [r8, #21]
   14a34:	cmp	r0, #0
   14a38:	beq	14cf8 <__assert_fail@plt+0x383c>
   14a3c:	str	r4, [fp, #-36]	; 0xffffffdc
   14a40:	add	r4, r8, #19
   14a44:	mov	r0, r4
   14a48:	bl	11348 <strlen@plt>
   14a4c:	mov	r5, r0
   14a50:	add	r0, r0, #176	; 0xb0
   14a54:	bic	r0, r0, #7
   14a58:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   14a5c:	mov	r6, r0
   14a60:	cmp	r0, #0
   14a64:	beq	150c0 <__assert_fail@plt+0x3c04>
   14a68:	add	sl, r6, #168	; 0xa8
   14a6c:	mov	r1, r4
   14a70:	mov	r2, r5
   14a74:	mov	r0, sl
   14a78:	bl	1121c <memcpy@plt>
   14a7c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14a80:	strb	r7, [sl, r5]
   14a84:	str	r5, [r6, #52]	; 0x34
   14a88:	mov	r0, #196608	; 0x30000
   14a8c:	ldr	r1, [sp, #44]	; 0x2c
   14a90:	str	r2, [r6, #44]	; 0x2c
   14a94:	cmp	r5, r1
   14a98:	ldr	r4, [r2, #24]
   14a9c:	str	r7, [r6, #12]
   14aa0:	str	r7, [r6, #16]
   14aa4:	str	r7, [r6, #20]
   14aa8:	str	r0, [r6, #58]	; 0x3a
   14aac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14ab0:	str	r4, [r6, #28]
   14ab4:	str	r7, [r6, #32]
   14ab8:	add	r7, r5, r0
   14abc:	bcs	14ad0 <__assert_fail@plt+0x3614>
   14ac0:	mov	r5, r2
   14ac4:	cmp	r7, r0
   14ac8:	bcs	14b48 <__assert_fail@plt+0x368c>
   14acc:	b	14fa0 <__assert_fail@plt+0x3ae4>
   14ad0:	ldr	r1, [r2, #36]	; 0x24
   14ad4:	movw	r0, #257	; 0x101
   14ad8:	mov	r5, r2
   14adc:	add	r0, r7, r0
   14ae0:	adds	r1, r0, r1
   14ae4:	bcs	1508c <__assert_fail@plt+0x3bd0>
   14ae8:	mov	r0, r4
   14aec:	str	r1, [r5, #36]	; 0x24
   14af0:	bl	1a6d4 <__assert_fail@plt+0x9218>
   14af4:	cmp	r0, #0
   14af8:	beq	150ac <__assert_fail@plt+0x3bf0>
   14afc:	cmp	r0, r4
   14b00:	str	r0, [r5, #24]
   14b04:	beq	14b2c <__assert_fail@plt+0x3670>
   14b08:	ldrb	r1, [r5, #48]	; 0x30
   14b0c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14b10:	tst	r1, #4
   14b14:	ldr	r1, [sp, #40]	; 0x28
   14b18:	addne	r1, r0, r2
   14b1c:	mov	r0, #1
   14b20:	str	r1, [sp, #40]	; 0x28
   14b24:	str	r0, [sp, #16]
   14b28:	b	14b30 <__assert_fail@plt+0x3674>
   14b2c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14b30:	ldr	r0, [r5, #36]	; 0x24
   14b34:	sub	r0, r0, r2
   14b38:	str	r0, [sp, #44]	; 0x2c
   14b3c:	mov	r0, r2
   14b40:	cmp	r7, r0
   14b44:	bcc	14fa0 <__assert_fail@plt+0x3ae4>
   14b48:	ldr	r0, [sp, #24]
   14b4c:	add	r4, r6, #112	; 0x70
   14b50:	str	r0, [r6, #48]	; 0x30
   14b54:	ldr	r0, [r5]
   14b58:	str	r7, [r6, #40]	; 0x28
   14b5c:	str	r0, [r6, #4]
   14b60:	ldrd	r0, [r8]
   14b64:	strd	r0, [r4, #48]	; 0x30
   14b68:	ldrb	r0, [r5, #48]	; 0x30
   14b6c:	tst	r0, #4
   14b70:	bne	14b7c <__assert_fail@plt+0x36c0>
   14b74:	str	sl, [r6, #24]
   14b78:	b	14b98 <__assert_fail@plt+0x36dc>
   14b7c:	ldr	r0, [r6, #28]
   14b80:	ldr	r1, [r6, #52]	; 0x34
   14b84:	str	r0, [r6, #24]
   14b88:	ldr	r0, [sp, #40]	; 0x28
   14b8c:	add	r2, r1, #1
   14b90:	mov	r1, sl
   14b94:	bl	111f8 <memmove@plt>
   14b98:	ldr	r0, [r5, #44]	; 0x2c
   14b9c:	ldr	r2, [r5, #48]	; 0x30
   14ba0:	ldr	sl, [sp, #28]
   14ba4:	mov	r7, #0
   14ba8:	cmp	r0, #0
   14bac:	beq	14c54 <__assert_fail@plt+0x3798>
   14bb0:	ands	r0, r2, #1024	; 0x400
   14bb4:	bne	14c54 <__assert_fail@plt+0x3798>
   14bb8:	mov	r0, r5
   14bbc:	mov	r1, r6
   14bc0:	mov	r2, #0
   14bc4:	bl	134f0 <__assert_fail@plt+0x2034>
   14bc8:	strh	r0, [r6, #56]	; 0x38
   14bcc:	ldr	r4, [fp, #-36]	; 0xffffffdc
   14bd0:	cmp	r9, #0
   14bd4:	str	r7, [r6, #8]
   14bd8:	beq	14cd4 <__assert_fail@plt+0x3818>
   14bdc:	ldr	r0, [sp, #48]	; 0x30
   14be0:	str	r6, [r0, #8]
   14be4:	movw	r0, #10000	; 0x2710
   14be8:	cmp	r4, r0
   14bec:	bne	14ce4 <__assert_fail@plt+0x3828>
   14bf0:	ldr	r0, [sp, #20]
   14bf4:	ldr	r0, [r0]
   14bf8:	cmp	r0, #0
   14bfc:	bne	14ce4 <__assert_fail@plt+0x3828>
   14c00:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14c04:	mov	r0, sl
   14c08:	bl	154d8 <__assert_fail@plt+0x401c>
   14c0c:	mov	r1, #0
   14c10:	str	r1, [sp, #8]
   14c14:	movw	r1, #19778	; 0x4d42
   14c18:	movt	r1, #65363	; 0xff53
   14c1c:	cmp	r0, r1
   14c20:	movwne	r1, #26985	; 0x6969
   14c24:	cmpne	r0, r1
   14c28:	beq	14ce4 <__assert_fail@plt+0x3828>
   14c2c:	movw	r1, #6548	; 0x1994
   14c30:	movt	r1, #258	; 0x102
   14c34:	cmp	r0, r1
   14c38:	movne	r0, #1
   14c3c:	strne	r0, [sp, #8]
   14c40:	ldr	r0, [sp, #32]
   14c44:	add	r4, r4, #1
   14c48:	cmp	r0, r4
   14c4c:	bhi	14cf4 <__assert_fail@plt+0x3838>
   14c50:	b	14d04 <__assert_fail@plt+0x3848>
   14c54:	ldrb	r3, [r8, #18]
   14c58:	mov	r0, #0
   14c5c:	tst	r2, #8
   14c60:	mov	r1, #0
   14c64:	beq	14c88 <__assert_fail@plt+0x37cc>
   14c68:	orr	r1, r3, #4
   14c6c:	cmp	r1, #4
   14c70:	mov	r1, #0
   14c74:	beq	14c88 <__assert_fail@plt+0x37cc>
   14c78:	eor	r1, r3, #10
   14c7c:	and	r2, r2, #16
   14c80:	orrs	r1, r2, r1
   14c84:	movwne	r1, #1
   14c88:	mov	r2, #11
   14c8c:	strh	r2, [r6, #56]	; 0x38
   14c90:	sub	r2, r3, #1
   14c94:	uxtb	r3, r2
   14c98:	cmp	r3, #11
   14c9c:	bhi	14cb0 <__assert_fail@plt+0x37f4>
   14ca0:	sxtb	r0, r2
   14ca4:	movw	r2, #48752	; 0xbe70
   14ca8:	movt	r2, #1
   14cac:	ldr	r0, [r2, r0, lsl #2]
   14cb0:	cmp	r1, #0
   14cb4:	str	r0, [r6, #80]	; 0x50
   14cb8:	mov	r0, #2
   14cbc:	movwne	r0, #1
   14cc0:	stm	r4, {r0, r7}
   14cc4:	ldr	r4, [fp, #-36]	; 0xffffffdc
   14cc8:	cmp	r9, #0
   14ccc:	str	r7, [r6, #8]
   14cd0:	bne	14bdc <__assert_fail@plt+0x3720>
   14cd4:	mov	r9, r6
   14cd8:	movw	r0, #10000	; 0x2710
   14cdc:	cmp	r4, r0
   14ce0:	beq	14bf0 <__assert_fail@plt+0x3734>
   14ce4:	ldr	r0, [sp, #32]
   14ce8:	add	r4, r4, #1
   14cec:	cmp	r0, r4
   14cf0:	bls	14d04 <__assert_fail@plt+0x3848>
   14cf4:	str	r6, [sp, #48]	; 0x30
   14cf8:	ldr	r6, [sl, #12]
   14cfc:	cmp	r6, #0
   14d00:	bne	149e8 <__assert_fail@plt+0x352c>
   14d04:	ldr	r0, [sp, #16]
   14d08:	ldr	r7, [sp]
   14d0c:	ldr	r6, [sp, #8]
   14d10:	tst	r0, #1
   14d14:	beq	14e30 <__assert_fail@plt+0x3974>
   14d18:	ldr	r1, [r5, #4]
   14d1c:	ldr	r0, [r5, #24]
   14d20:	cmp	r1, #0
   14d24:	bne	14d3c <__assert_fail@plt+0x3880>
   14d28:	b	14d78 <__assert_fail@plt+0x38bc>
   14d2c:	str	r0, [r1, #28]
   14d30:	ldr	r1, [r1, #8]
   14d34:	cmp	r1, #0
   14d38:	beq	14d78 <__assert_fail@plt+0x38bc>
   14d3c:	ldr	r2, [r1, #24]
   14d40:	add	r3, r1, #168	; 0xa8
   14d44:	cmp	r2, r3
   14d48:	beq	14d2c <__assert_fail@plt+0x3870>
   14d4c:	ldr	r3, [r1, #28]
   14d50:	sub	r2, r2, r3
   14d54:	add	r2, r0, r2
   14d58:	str	r2, [r1, #24]
   14d5c:	b	14d2c <__assert_fail@plt+0x3870>
   14d60:	mov	r4, #0
   14d64:	mov	r6, #0
   14d68:	ldrb	r0, [r5, #48]	; 0x30
   14d6c:	tst	r0, #4
   14d70:	bne	14e3c <__assert_fail@plt+0x3980>
   14d74:	b	14e64 <__assert_fail@plt+0x39a8>
   14d78:	ldr	r1, [r9, #48]	; 0x30
   14d7c:	cmp	r1, #0
   14d80:	bmi	14e30 <__assert_fail@plt+0x3974>
   14d84:	mov	r1, r9
   14d88:	ldr	r2, [r1, #24]
   14d8c:	add	r3, r1, #168	; 0xa8
   14d90:	cmp	r2, r3
   14d94:	bne	14dc8 <__assert_fail@plt+0x390c>
   14d98:	str	r0, [r1, #28]
   14d9c:	ldr	r2, [r1, #8]
   14da0:	cmp	r2, #0
   14da4:	ldreq	r2, [r1, #4]
   14da8:	ldr	r1, [r2, #48]	; 0x30
   14dac:	cmn	r1, #1
   14db0:	mov	r1, r2
   14db4:	ble	14e30 <__assert_fail@plt+0x3974>
   14db8:	ldr	r2, [r1, #24]
   14dbc:	add	r3, r1, #168	; 0xa8
   14dc0:	cmp	r2, r3
   14dc4:	beq	14d98 <__assert_fail@plt+0x38dc>
   14dc8:	ldr	r3, [r1, #28]
   14dcc:	sub	r2, r2, r3
   14dd0:	add	r2, r0, r2
   14dd4:	str	r2, [r1, #24]
   14dd8:	b	14d98 <__assert_fail@plt+0x38dc>
   14ddc:	ldr	r0, [sp, #36]	; 0x24
   14de0:	ldr	r0, [r0]
   14de4:	cmp	r0, #0
   14de8:	beq	14e04 <__assert_fail@plt+0x3948>
   14dec:	str	r0, [sl, #32]
   14df0:	ldr	r0, [sp, #12]
   14df4:	orrs	r0, r0, r4
   14df8:	mov	r0, #4
   14dfc:	movwne	r0, #7
   14e00:	strh	r0, [sl, #56]	; 0x38
   14e04:	ldr	r0, [sl, #12]
   14e08:	ldr	r6, [sp, #8]
   14e0c:	cmp	r0, #0
   14e10:	beq	14e20 <__assert_fail@plt+0x3964>
   14e14:	bl	11498 <closedir@plt>
   14e18:	mov	r0, #0
   14e1c:	str	r0, [sl, #12]
   14e20:	ldr	r0, [sp, #16]
   14e24:	ldr	r7, [sp]
   14e28:	tst	r0, #1
   14e2c:	bne	14d18 <__assert_fail@plt+0x385c>
   14e30:	ldrb	r0, [r5, #48]	; 0x30
   14e34:	tst	r0, #4
   14e38:	beq	14e64 <__assert_fail@plt+0x39a8>
   14e3c:	ldr	r2, [sp, #40]	; 0x28
   14e40:	ldr	r0, [r5, #36]	; 0x24
   14e44:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14e48:	cmp	r3, r0
   14e4c:	sub	r1, r2, #1
   14e50:	mov	r0, #0
   14e54:	moveq	r2, r1
   14e58:	cmp	r4, #0
   14e5c:	moveq	r2, r1
   14e60:	strb	r0, [r2]
   14e64:	ldr	r0, [sp, #12]
   14e68:	cmp	r0, #0
   14e6c:	movwne	r0, #1
   14e70:	orrs	r0, r0, r7
   14e74:	beq	14edc <__assert_fail@plt+0x3a20>
   14e78:	cmp	r4, #0
   14e7c:	bne	14f1c <__assert_fail@plt+0x3a60>
   14e80:	ldr	r0, [sp, #4]
   14e84:	cmp	r0, #3
   14e88:	bne	14ea0 <__assert_fail@plt+0x39e4>
   14e8c:	ldrh	r0, [sl, #56]	; 0x38
   14e90:	cmp	r0, #4
   14e94:	cmpne	r0, #7
   14e98:	movne	r0, #6
   14e9c:	strhne	r0, [sl, #56]	; 0x38
   14ea0:	mov	r6, #0
   14ea4:	cmp	r9, #0
   14ea8:	bne	14ec4 <__assert_fail@plt+0x3a08>
   14eac:	b	15054 <__assert_fail@plt+0x3b98>
   14eb0:	mov	r0, r9
   14eb4:	bl	12e18 <__assert_fail@plt+0x195c>
   14eb8:	cmp	r4, #0
   14ebc:	mov	r9, r4
   14ec0:	beq	15054 <__assert_fail@plt+0x3b98>
   14ec4:	ldrd	r4, [r9, #8]
   14ec8:	cmp	r5, #0
   14ecc:	beq	14eb0 <__assert_fail@plt+0x39f4>
   14ed0:	mov	r0, r5
   14ed4:	bl	11498 <closedir@plt>
   14ed8:	b	14eb0 <__assert_fail@plt+0x39f4>
   14edc:	ldr	r0, [sp, #4]
   14ee0:	cmp	r0, #1
   14ee4:	cmpne	r4, #0
   14ee8:	bne	14f1c <__assert_fail@plt+0x3a60>
   14eec:	ldr	r0, [sl, #48]	; 0x30
   14ef0:	cmp	r0, #0
   14ef4:	beq	15024 <__assert_fail@plt+0x3b68>
   14ef8:	ldr	r1, [sl, #4]
   14efc:	movw	r3, #48747	; 0xbe6b
   14f00:	mov	r0, r5
   14f04:	mvn	r2, #0
   14f08:	movt	r3, #1
   14f0c:	bl	142fc <__assert_fail@plt+0x2e40>
   14f10:	cmp	r0, #0
   14f14:	bne	15034 <__assert_fail@plt+0x3b78>
   14f18:	b	14e78 <__assert_fail@plt+0x39bc>
   14f1c:	tst	r6, #1
   14f20:	beq	14f58 <__assert_fail@plt+0x3a9c>
   14f24:	movw	r0, #21664	; 0x54a0
   14f28:	mov	r1, r9
   14f2c:	mov	r2, r4
   14f30:	movt	r0, #1
   14f34:	str	r0, [r5, #44]	; 0x2c
   14f38:	mov	r0, r5
   14f3c:	bl	13688 <__assert_fail@plt+0x21cc>
   14f40:	mov	r6, r0
   14f44:	mov	r0, #0
   14f48:	str	r0, [r5, #44]	; 0x2c
   14f4c:	mov	r0, r6
   14f50:	sub	sp, fp, #28
   14f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f58:	cmp	r4, #2
   14f5c:	bcc	14f90 <__assert_fail@plt+0x3ad4>
   14f60:	ldr	r0, [sp, #20]
   14f64:	ldr	r0, [r0]
   14f68:	cmp	r0, #0
   14f6c:	beq	14f90 <__assert_fail@plt+0x3ad4>
   14f70:	mov	r0, r5
   14f74:	mov	r1, r9
   14f78:	mov	r2, r4
   14f7c:	bl	13688 <__assert_fail@plt+0x21cc>
   14f80:	mov	r6, r0
   14f84:	mov	r0, r6
   14f88:	sub	sp, fp, #28
   14f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f90:	mov	r6, r9
   14f94:	mov	r0, r6
   14f98:	sub	sp, fp, #28
   14f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa0:	mov	r0, r6
   14fa4:	bl	12e18 <__assert_fail@plt+0x195c>
   14fa8:	ldr	r7, [sp, #28]
   14fac:	cmp	r9, #0
   14fb0:	bne	14fcc <__assert_fail@plt+0x3b10>
   14fb4:	b	14fe4 <__assert_fail@plt+0x3b28>
   14fb8:	mov	r0, r9
   14fbc:	bl	12e18 <__assert_fail@plt+0x195c>
   14fc0:	cmp	r4, #0
   14fc4:	mov	r9, r4
   14fc8:	beq	14fe4 <__assert_fail@plt+0x3b28>
   14fcc:	ldrd	r4, [r9, #8]
   14fd0:	cmp	r5, #0
   14fd4:	beq	14fb8 <__assert_fail@plt+0x3afc>
   14fd8:	mov	r0, r5
   14fdc:	bl	11498 <closedir@plt>
   14fe0:	b	14fb8 <__assert_fail@plt+0x3afc>
   14fe4:	ldr	r0, [r7, #12]
   14fe8:	bl	11498 <closedir@plt>
   14fec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14ff0:	mov	r0, #7
   14ff4:	mov	r6, #0
   14ff8:	strh	r0, [r7, #56]	; 0x38
   14ffc:	str	r6, [r7, #12]
   15000:	ldr	r0, [r1, #48]	; 0x30
   15004:	orr	r0, r0, #8192	; 0x2000
   15008:	str	r0, [r1, #48]	; 0x30
   1500c:	ldr	r1, [sp, #36]	; 0x24
   15010:	mov	r0, #36	; 0x24
   15014:	str	r0, [r1]
   15018:	mov	r0, r6
   1501c:	sub	sp, fp, #28
   15020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15024:	mov	r0, r5
   15028:	bl	15144 <__assert_fail@plt+0x3c88>
   1502c:	cmp	r0, #0
   15030:	beq	14e78 <__assert_fail@plt+0x39bc>
   15034:	mov	r0, #7
   15038:	mov	r6, #0
   1503c:	cmp	r9, #0
   15040:	strh	r0, [sl, #56]	; 0x38
   15044:	ldr	r0, [r5, #48]	; 0x30
   15048:	orr	r0, r0, #8192	; 0x2000
   1504c:	str	r0, [r5, #48]	; 0x30
   15050:	bne	15074 <__assert_fail@plt+0x3bb8>
   15054:	mov	r0, r6
   15058:	sub	sp, fp, #28
   1505c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15060:	mov	r0, r9
   15064:	bl	12e18 <__assert_fail@plt+0x195c>
   15068:	cmp	r4, #0
   1506c:	mov	r9, r4
   15070:	beq	15054 <__assert_fail@plt+0x3b98>
   15074:	ldrd	r4, [r9, #8]
   15078:	cmp	r5, #0
   1507c:	beq	15060 <__assert_fail@plt+0x3ba4>
   15080:	mov	r0, r5
   15084:	bl	11498 <closedir@plt>
   15088:	b	15060 <__assert_fail@plt+0x3ba4>
   1508c:	mov	r0, r4
   15090:	bl	12e18 <__assert_fail@plt+0x195c>
   15094:	ldr	r1, [sp, #36]	; 0x24
   15098:	mov	r0, #0
   1509c:	str	r0, [r5, #24]
   150a0:	mov	r0, #36	; 0x24
   150a4:	str	r0, [r1]
   150a8:	b	150bc <__assert_fail@plt+0x3c00>
   150ac:	ldr	r0, [r5, #24]
   150b0:	bl	12e18 <__assert_fail@plt+0x195c>
   150b4:	mov	r0, #0
   150b8:	str	r0, [r5, #24]
   150bc:	ldr	sl, [sp, #28]
   150c0:	ldr	r0, [sp, #36]	; 0x24
   150c4:	ldr	r4, [r0]
   150c8:	mov	r0, r6
   150cc:	bl	12e18 <__assert_fail@plt+0x195c>
   150d0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   150d4:	cmp	r9, #0
   150d8:	bne	150f4 <__assert_fail@plt+0x3c38>
   150dc:	b	1510c <__assert_fail@plt+0x3c50>
   150e0:	mov	r0, r9
   150e4:	bl	12e18 <__assert_fail@plt+0x195c>
   150e8:	cmp	r6, #0
   150ec:	mov	r9, r6
   150f0:	beq	1510c <__assert_fail@plt+0x3c50>
   150f4:	ldrd	r6, [r9, #8]
   150f8:	cmp	r7, #0
   150fc:	beq	150e0 <__assert_fail@plt+0x3c24>
   15100:	mov	r0, r7
   15104:	bl	11498 <closedir@plt>
   15108:	b	150e0 <__assert_fail@plt+0x3c24>
   1510c:	ldr	r0, [sl, #12]
   15110:	bl	11498 <closedir@plt>
   15114:	mov	r0, #7
   15118:	mov	r6, #0
   1511c:	strh	r0, [sl, #56]	; 0x38
   15120:	str	r6, [sl, #12]
   15124:	ldr	r0, [r5, #48]	; 0x30
   15128:	orr	r0, r0, #8192	; 0x2000
   1512c:	str	r0, [r5, #48]	; 0x30
   15130:	ldr	r0, [sp, #36]	; 0x24
   15134:	str	r4, [r0]
   15138:	mov	r0, r6
   1513c:	sub	sp, fp, #28
   15140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15144:	push	{r4, r5, fp, lr}
   15148:	add	fp, sp, #8
   1514c:	mov	r5, r0
   15150:	ldr	r0, [r0, #48]	; 0x30
   15154:	mov	r4, #0
   15158:	tst	r0, #4
   1515c:	bne	151a0 <__assert_fail@plt+0x3ce4>
   15160:	tst	r0, #512	; 0x200
   15164:	bne	15180 <__assert_fail@plt+0x3cc4>
   15168:	ldr	r0, [r5, #28]
   1516c:	bl	1142c <fchdir@plt>
   15170:	cmp	r0, #0
   15174:	mov	r4, r0
   15178:	movwne	r4, #1
   1517c:	b	151a0 <__assert_fail@plt+0x3ce4>
   15180:	ldr	r1, [r5, #32]
   15184:	add	r0, r5, #60	; 0x3c
   15188:	bl	16ad4 <__assert_fail@plt+0x5618>
   1518c:	cmp	r0, #0
   15190:	bmi	15198 <__assert_fail@plt+0x3cdc>
   15194:	bl	11480 <close@plt>
   15198:	mvn	r0, #99	; 0x63
   1519c:	str	r0, [r5, #32]
   151a0:	add	r5, r5, #60	; 0x3c
   151a4:	mov	r0, r5
   151a8:	bl	16acc <__assert_fail@plt+0x5610>
   151ac:	cmp	r0, #0
   151b0:	bne	151d8 <__assert_fail@plt+0x3d1c>
   151b4:	mov	r0, r5
   151b8:	bl	16b20 <__assert_fail@plt+0x5664>
   151bc:	cmp	r0, #0
   151c0:	bmi	151a4 <__assert_fail@plt+0x3ce8>
   151c4:	bl	11480 <close@plt>
   151c8:	mov	r0, r5
   151cc:	bl	16acc <__assert_fail@plt+0x5610>
   151d0:	cmp	r0, #0
   151d4:	beq	151b4 <__assert_fail@plt+0x3cf8>
   151d8:	mov	r0, r4
   151dc:	pop	{r4, r5, fp, pc}
   151e0:	push	{fp, lr}
   151e4:	mov	fp, sp
   151e8:	cmp	r2, #5
   151ec:	bcc	15204 <__assert_fail@plt+0x3d48>
   151f0:	bl	11378 <__errno_location@plt>
   151f4:	mov	r1, #22
   151f8:	str	r1, [r0]
   151fc:	mov	r0, #1
   15200:	pop	{fp, pc}
   15204:	mov	r0, #0
   15208:	strh	r2, [r1, #60]	; 0x3c
   1520c:	pop	{fp, pc}
   15210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15214:	add	fp, sp, #28
   15218:	sub	sp, sp, #4
   1521c:	mov	r9, r0
   15220:	mvn	r0, #4096	; 0x1000
   15224:	tst	r1, r0
   15228:	beq	15248 <__assert_fail@plt+0x3d8c>
   1522c:	bl	11378 <__errno_location@plt>
   15230:	mov	r1, #22
   15234:	mov	r5, #0
   15238:	str	r1, [r0]
   1523c:	mov	r0, r5
   15240:	sub	sp, fp, #28
   15244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15248:	ldr	r8, [r9]
   1524c:	mov	r7, r1
   15250:	bl	11378 <__errno_location@plt>
   15254:	mov	r5, #0
   15258:	mov	sl, r0
   1525c:	str	r5, [r0]
   15260:	ldrb	r0, [r9, #49]	; 0x31
   15264:	tst	r0, #32
   15268:	bne	15280 <__assert_fail@plt+0x3dc4>
   1526c:	ldrh	r0, [r8, #56]	; 0x38
   15270:	cmp	r0, #1
   15274:	beq	1528c <__assert_fail@plt+0x3dd0>
   15278:	cmp	r0, #9
   1527c:	ldreq	r5, [r8, #8]
   15280:	mov	r0, r5
   15284:	sub	sp, fp, #28
   15288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1528c:	ldr	r6, [r9, #4]
   15290:	cmp	r6, #0
   15294:	bne	152b0 <__assert_fail@plt+0x3df4>
   15298:	b	152cc <__assert_fail@plt+0x3e10>
   1529c:	mov	r0, r6
   152a0:	bl	12e18 <__assert_fail@plt+0x195c>
   152a4:	cmp	r4, #0
   152a8:	mov	r6, r4
   152ac:	beq	152cc <__assert_fail@plt+0x3e10>
   152b0:	ldr	r1, [r6, #12]
   152b4:	ldr	r4, [r6, #8]
   152b8:	cmp	r1, #0
   152bc:	beq	1529c <__assert_fail@plt+0x3de0>
   152c0:	mov	r0, r1
   152c4:	bl	11498 <closedir@plt>
   152c8:	b	1529c <__assert_fail@plt+0x3de0>
   152cc:	mov	r4, #1
   152d0:	cmp	r7, #4096	; 0x1000
   152d4:	bne	152e8 <__assert_fail@plt+0x3e2c>
   152d8:	ldr	r0, [r9, #48]	; 0x30
   152dc:	mov	r4, #2
   152e0:	orr	r0, r0, #4096	; 0x1000
   152e4:	str	r0, [r9, #48]	; 0x30
   152e8:	ldr	r0, [r8, #48]	; 0x30
   152ec:	cmp	r0, #0
   152f0:	bne	15348 <__assert_fail@plt+0x3e8c>
   152f4:	ldr	r0, [r8, #24]
   152f8:	ldrb	r0, [r0]
   152fc:	cmp	r0, #47	; 0x2f
   15300:	beq	15348 <__assert_fail@plt+0x3e8c>
   15304:	ldr	r0, [r9, #48]	; 0x30
   15308:	tst	r0, #4
   1530c:	bne	15348 <__assert_fail@plt+0x3e8c>
   15310:	mov	r1, #32768	; 0x8000
   15314:	tst	r0, #512	; 0x200
   15318:	and	r1, r1, r0, lsl #11
   1531c:	orr	r1, r1, #18688	; 0x4900
   15320:	orr	r2, r1, #524288	; 0x80000
   15324:	bne	15368 <__assert_fail@plt+0x3eac>
   15328:	movw	r0, #48748	; 0xbe6c
   1532c:	mov	r1, r2
   15330:	movt	r0, #1
   15334:	bl	1ab18 <__assert_fail@plt+0x965c>
   15338:	mov	r8, r0
   1533c:	cmn	r0, #1
   15340:	bgt	15384 <__assert_fail@plt+0x3ec8>
   15344:	b	153cc <__assert_fail@plt+0x3f10>
   15348:	mov	r0, r9
   1534c:	mov	r1, r4
   15350:	bl	145ac <__assert_fail@plt+0x30f0>
   15354:	mov	r5, r0
   15358:	str	r0, [r9, #4]
   1535c:	mov	r0, r5
   15360:	sub	sp, fp, #28
   15364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15368:	ldr	r0, [r9, #32]
   1536c:	movw	r1, #48748	; 0xbe6c
   15370:	movt	r1, #1
   15374:	bl	16bcc <__assert_fail@plt+0x5710>
   15378:	mov	r8, r0
   1537c:	cmn	r0, #1
   15380:	ble	153cc <__assert_fail@plt+0x3f10>
   15384:	mov	r0, r9
   15388:	mov	r1, r4
   1538c:	bl	145ac <__assert_fail@plt+0x30f0>
   15390:	str	r0, [r9, #4]
   15394:	ldrb	r0, [r9, #49]	; 0x31
   15398:	tst	r0, #2
   1539c:	bne	153e0 <__assert_fail@plt+0x3f24>
   153a0:	mov	r0, r8
   153a4:	bl	1142c <fchdir@plt>
   153a8:	cmp	r0, #0
   153ac:	beq	1541c <__assert_fail@plt+0x3f60>
   153b0:	ldr	r4, [sl]
   153b4:	mov	r0, r8
   153b8:	bl	11480 <close@plt>
   153bc:	str	r4, [sl]
   153c0:	mov	r0, r5
   153c4:	sub	sp, fp, #28
   153c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153cc:	mov	r5, #0
   153d0:	str	r5, [r9, #4]
   153d4:	mov	r0, r5
   153d8:	sub	sp, fp, #28
   153dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e0:	ldr	r1, [r9, #32]
   153e4:	cmp	r1, r8
   153e8:	bne	153f4 <__assert_fail@plt+0x3f38>
   153ec:	cmn	r1, #100	; 0x64
   153f0:	bne	15434 <__assert_fail@plt+0x3f78>
   153f4:	add	r0, r9, #60	; 0x3c
   153f8:	bl	16ad4 <__assert_fail@plt+0x5618>
   153fc:	cmp	r0, #0
   15400:	bmi	15408 <__assert_fail@plt+0x3f4c>
   15404:	bl	11480 <close@plt>
   15408:	str	r8, [r9, #32]
   1540c:	ldr	r5, [r9, #4]
   15410:	mov	r0, r5
   15414:	sub	sp, fp, #28
   15418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1541c:	mov	r0, r8
   15420:	bl	11480 <close@plt>
   15424:	ldr	r5, [r9, #4]
   15428:	mov	r0, r5
   1542c:	sub	sp, fp, #28
   15430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15434:	bl	11474 <abort@plt>
   15438:	push	{fp, lr}
   1543c:	mov	fp, sp
   15440:	mov	r2, r1
   15444:	ldrd	r0, [r0, #8]
   15448:	mov	r3, #0
   1544c:	bl	1ae48 <__assert_fail@plt+0x998c>
   15450:	mov	r0, r2
   15454:	pop	{fp, pc}
   15458:	push	{r4, r5, fp, lr}
   1545c:	add	fp, sp, #8
   15460:	ldrd	r2, [r1, #8]
   15464:	ldrd	r4, [r0, #8]
   15468:	eor	r3, r5, r3
   1546c:	eor	r2, r4, r2
   15470:	orrs	r2, r2, r3
   15474:	mov	r2, #0
   15478:	bne	15498 <__assert_fail@plt+0x3fdc>
   1547c:	ldrd	r2, [r1]
   15480:	ldrd	r0, [r0]
   15484:	eor	r1, r1, r3
   15488:	eor	r0, r0, r2
   1548c:	orr	r0, r0, r1
   15490:	clz	r0, r0
   15494:	lsr	r2, r0, #5
   15498:	mov	r0, r2
   1549c:	pop	{r4, r5, fp, pc}
   154a0:	push	{r4, r5, fp, lr}
   154a4:	add	fp, sp, #8
   154a8:	ldr	r0, [r0]
   154ac:	ldrd	r2, [r0, #160]	; 0xa0
   154b0:	ldr	r0, [r1]
   154b4:	ldrd	r4, [r0, #160]	; 0xa0
   154b8:	mov	r0, #0
   154bc:	subs	r1, r4, r2
   154c0:	sbcs	r1, r5, r3
   154c4:	movwcc	r0, #1
   154c8:	subs	r1, r2, r4
   154cc:	sbcs	r1, r3, r5
   154d0:	subcc	r0, r0, #1
   154d4:	pop	{r4, r5, fp, pc}
   154d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   154dc:	add	fp, sp, #24
   154e0:	sub	sp, sp, #96	; 0x60
   154e4:	ldr	r7, [r0, #44]	; 0x2c
   154e8:	mov	r4, r0
   154ec:	mov	r5, #0
   154f0:	ldrb	r0, [r7, #49]	; 0x31
   154f4:	tst	r0, #2
   154f8:	beq	155a8 <__assert_fail@plt+0x40ec>
   154fc:	ldr	r6, [r7, #52]	; 0x34
   15500:	mov	r9, r1
   15504:	cmp	r6, #0
   15508:	bne	15548 <__assert_fail@plt+0x408c>
   1550c:	movw	r0, #11800	; 0x2e18
   15510:	movw	r2, #22036	; 0x5614
   15514:	movw	r3, #22068	; 0x5634
   15518:	mov	r1, #0
   1551c:	mov	r8, #0
   15520:	movt	r0, #1
   15524:	movt	r2, #1
   15528:	movt	r3, #1
   1552c:	str	r0, [sp]
   15530:	mov	r0, #13
   15534:	bl	15b4c <__assert_fail@plt+0x4690>
   15538:	mov	r6, r0
   1553c:	cmp	r0, #0
   15540:	str	r0, [r7, #52]	; 0x34
   15544:	beq	15588 <__assert_fail@plt+0x40cc>
   15548:	ldrd	r0, [r4, #64]	; 0x40
   1554c:	str	r1, [sp, #12]
   15550:	str	r0, [sp, #8]
   15554:	add	r1, sp, #8
   15558:	mov	r0, r6
   1555c:	bl	15878 <__assert_fail@plt+0x43bc>
   15560:	cmp	r0, #0
   15564:	beq	15578 <__assert_fail@plt+0x40bc>
   15568:	ldr	r5, [r0, #8]
   1556c:	mov	r0, r5
   15570:	sub	sp, fp, #24
   15574:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15578:	mov	r8, #1
   1557c:	cmp	r9, #0
   15580:	bpl	15594 <__assert_fail@plt+0x40d8>
   15584:	b	155a8 <__assert_fail@plt+0x40ec>
   15588:	mov	r6, #0
   1558c:	cmp	r9, #0
   15590:	bmi	155a8 <__assert_fail@plt+0x40ec>
   15594:	add	r1, sp, #8
   15598:	mov	r0, r9
   1559c:	bl	11198 <fstatfs64@plt>
   155a0:	cmp	r0, #0
   155a4:	beq	155b4 <__assert_fail@plt+0x40f8>
   155a8:	mov	r0, r5
   155ac:	sub	sp, fp, #24
   155b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155b4:	cmp	r8, #0
   155b8:	beq	15604 <__assert_fail@plt+0x4148>
   155bc:	mov	r0, #16
   155c0:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   155c4:	cmp	r0, #0
   155c8:	beq	15604 <__assert_fail@plt+0x4148>
   155cc:	mov	r5, r0
   155d0:	ldrd	r0, [r4, #64]	; 0x40
   155d4:	ldr	r2, [sp, #8]
   155d8:	stm	r5, {r0, r1, r2}
   155dc:	mov	r0, r6
   155e0:	mov	r1, r5
   155e4:	bl	167a8 <__assert_fail@plt+0x52ec>
   155e8:	cmp	r0, #0
   155ec:	beq	155fc <__assert_fail@plt+0x4140>
   155f0:	cmp	r0, r5
   155f4:	beq	15604 <__assert_fail@plt+0x4148>
   155f8:	bl	11474 <abort@plt>
   155fc:	mov	r0, r5
   15600:	bl	12e18 <__assert_fail@plt+0x195c>
   15604:	ldr	r5, [sp, #8]
   15608:	mov	r0, r5
   1560c:	sub	sp, fp, #24
   15610:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15614:	push	{fp, lr}
   15618:	mov	fp, sp
   1561c:	mov	r2, r1
   15620:	ldrd	r0, [r0]
   15624:	mov	r3, #0
   15628:	bl	1ae48 <__assert_fail@plt+0x998c>
   1562c:	mov	r0, r2
   15630:	pop	{fp, pc}
   15634:	ldrd	r2, [r1]
   15638:	ldrd	r0, [r0]
   1563c:	eor	r1, r1, r3
   15640:	eor	r0, r0, r2
   15644:	orr	r0, r0, r1
   15648:	clz	r0, r0
   1564c:	lsr	r0, r0, #5
   15650:	bx	lr
   15654:	andeq	r0, r0, r0
   15658:	ldr	r0, [r0, #8]
   1565c:	bx	lr
   15660:	ldr	r0, [r0, #12]
   15664:	bx	lr
   15668:	ldr	r0, [r0, #16]
   1566c:	bx	lr
   15670:	ldm	r0, {r2, ip}
   15674:	mov	r0, #0
   15678:	cmp	r2, ip
   1567c:	bxcs	lr
   15680:	mov	r0, #0
   15684:	ldr	r1, [r2]
   15688:	cmp	r1, #0
   1568c:	bne	156a8 <__assert_fail@plt+0x41ec>
   15690:	add	r2, r2, #8
   15694:	cmp	r2, ip
   15698:	bcs	156d4 <__assert_fail@plt+0x4218>
   1569c:	ldr	r1, [r2]
   156a0:	cmp	r1, #0
   156a4:	beq	15690 <__assert_fail@plt+0x41d4>
   156a8:	mov	r3, #0
   156ac:	mov	r1, r2
   156b0:	ldr	r1, [r1, #4]
   156b4:	add	r3, r3, #1
   156b8:	cmp	r1, #0
   156bc:	bne	156b0 <__assert_fail@plt+0x41f4>
   156c0:	cmp	r3, r0
   156c4:	movhi	r0, r3
   156c8:	add	r2, r2, #8
   156cc:	cmp	r2, ip
   156d0:	bcc	1569c <__assert_fail@plt+0x41e0>
   156d4:	bx	lr
   156d8:	push	{fp, lr}
   156dc:	mov	fp, sp
   156e0:	ldm	r0, {r3, ip}
   156e4:	mov	lr, #0
   156e8:	mov	r1, #0
   156ec:	cmp	r3, ip
   156f0:	bcs	15744 <__assert_fail@plt+0x4288>
   156f4:	mov	r1, #0
   156f8:	mov	lr, #0
   156fc:	ldr	r2, [r3]
   15700:	cmp	r2, #0
   15704:	bne	15720 <__assert_fail@plt+0x4264>
   15708:	add	r3, r3, #8
   1570c:	cmp	r3, ip
   15710:	bcs	15744 <__assert_fail@plt+0x4288>
   15714:	ldr	r2, [r3]
   15718:	cmp	r2, #0
   1571c:	beq	15708 <__assert_fail@plt+0x424c>
   15720:	mov	r2, r3
   15724:	ldr	r2, [r2, #4]
   15728:	add	r1, r1, #1
   1572c:	cmp	r2, #0
   15730:	bne	15724 <__assert_fail@plt+0x4268>
   15734:	add	lr, lr, #1
   15738:	add	r3, r3, #8
   1573c:	cmp	r3, ip
   15740:	bcc	15714 <__assert_fail@plt+0x4258>
   15744:	ldr	r2, [r0, #12]
   15748:	cmp	lr, r2
   1574c:	bne	15764 <__assert_fail@plt+0x42a8>
   15750:	ldr	r2, [r0, #16]
   15754:	mov	r0, #1
   15758:	cmp	r1, r2
   1575c:	movne	r0, #0
   15760:	pop	{fp, pc}
   15764:	mov	r0, #0
   15768:	pop	{fp, pc}
   1576c:	nop	{0}
   15770:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15774:	add	fp, sp, #24
   15778:	sub	sp, sp, #8
   1577c:	ldr	r6, [r0]
   15780:	ldmib	r0, {r2, r7, r8}
   15784:	ldr	r3, [r0, #16]
   15788:	mov	r4, r1
   1578c:	mov	r5, #0
   15790:	cmp	r6, r2
   15794:	bcs	157ec <__assert_fail@plt+0x4330>
   15798:	mov	r5, #0
   1579c:	ldr	r0, [r6]
   157a0:	cmp	r0, #0
   157a4:	bne	157c0 <__assert_fail@plt+0x4304>
   157a8:	add	r6, r6, #8
   157ac:	cmp	r6, r2
   157b0:	bcs	157ec <__assert_fail@plt+0x4330>
   157b4:	ldr	r0, [r6]
   157b8:	cmp	r0, #0
   157bc:	beq	157a8 <__assert_fail@plt+0x42ec>
   157c0:	mov	r0, #0
   157c4:	mov	r1, r6
   157c8:	ldr	r1, [r1, #4]
   157cc:	add	r0, r0, #1
   157d0:	cmp	r1, #0
   157d4:	bne	157c8 <__assert_fail@plt+0x430c>
   157d8:	cmp	r0, r5
   157dc:	movhi	r5, r0
   157e0:	add	r6, r6, #8
   157e4:	cmp	r6, r2
   157e8:	bcc	157b4 <__assert_fail@plt+0x42f8>
   157ec:	movw	r2, #48800	; 0xbea0
   157f0:	mov	r0, r4
   157f4:	mov	r1, #1
   157f8:	movt	r2, #1
   157fc:	bl	113b4 <__fprintf_chk@plt>
   15800:	movw	r2, #48824	; 0xbeb8
   15804:	mov	r0, r4
   15808:	mov	r1, #1
   1580c:	mov	r3, r7
   15810:	movt	r2, #1
   15814:	bl	113b4 <__fprintf_chk@plt>
   15818:	vmov	s0, r8
   1581c:	vldr	d16, [pc, #76]	; 15870 <__assert_fail@plt+0x43b4>
   15820:	movw	r2, #48848	; 0xbed0
   15824:	mov	r0, r4
   15828:	mov	r1, #1
   1582c:	mov	r3, r8
   15830:	movt	r2, #1
   15834:	vcvt.f64.u32	d17, s0
   15838:	vmov	s0, r7
   1583c:	vcvt.f64.u32	d18, s0
   15840:	vmul.f64	d16, d17, d16
   15844:	vdiv.f64	d16, d16, d18
   15848:	vstr	d16, [sp]
   1584c:	bl	113b4 <__fprintf_chk@plt>
   15850:	movw	r2, #48881	; 0xbef1
   15854:	mov	r0, r4
   15858:	mov	r1, #1
   1585c:	mov	r3, r5
   15860:	movt	r2, #1
   15864:	sub	sp, fp, #24
   15868:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1586c:	b	113b4 <__fprintf_chk@plt>
   15870:	andeq	r0, r0, r0
   15874:	subsmi	r0, r9, r0
   15878:	push	{r4, r5, r6, r7, fp, lr}
   1587c:	add	fp, sp, #16
   15880:	mov	r4, r1
   15884:	ldr	r1, [r0, #8]
   15888:	ldr	r2, [r0, #24]
   1588c:	mov	r5, r0
   15890:	mov	r0, r4
   15894:	blx	r2
   15898:	ldr	r1, [r5, #8]
   1589c:	cmp	r0, r1
   158a0:	bcs	15908 <__assert_fail@plt+0x444c>
   158a4:	ldr	r7, [r5]
   158a8:	mov	r6, #0
   158ac:	ldr	r1, [r7, r0, lsl #3]!
   158b0:	cmp	r1, #0
   158b4:	cmpne	r7, #0
   158b8:	bne	158e8 <__assert_fail@plt+0x442c>
   158bc:	mov	r0, r6
   158c0:	pop	{r4, r5, r6, r7, fp, pc}
   158c4:	ldr	r2, [r5, #28]
   158c8:	mov	r0, r4
   158cc:	blx	r2
   158d0:	cmp	r0, #0
   158d4:	bne	158fc <__assert_fail@plt+0x4440>
   158d8:	ldr	r7, [r7, #4]
   158dc:	cmp	r7, #0
   158e0:	beq	158bc <__assert_fail@plt+0x4400>
   158e4:	ldr	r1, [r7]
   158e8:	cmp	r1, r4
   158ec:	bne	158c4 <__assert_fail@plt+0x4408>
   158f0:	mov	r6, r4
   158f4:	mov	r0, r6
   158f8:	pop	{r4, r5, r6, r7, fp, pc}
   158fc:	ldr	r6, [r7]
   15900:	mov	r0, r6
   15904:	pop	{r4, r5, r6, r7, fp, pc}
   15908:	bl	11474 <abort@plt>
   1590c:	push	{fp, lr}
   15910:	mov	fp, sp
   15914:	ldr	r1, [r0, #16]
   15918:	cmp	r1, #0
   1591c:	beq	1593c <__assert_fail@plt+0x4480>
   15920:	ldm	r0, {r1, r2}
   15924:	cmp	r1, r2
   15928:	bcs	15944 <__assert_fail@plt+0x4488>
   1592c:	ldr	r0, [r1], #8
   15930:	cmp	r0, #0
   15934:	beq	15924 <__assert_fail@plt+0x4468>
   15938:	pop	{fp, pc}
   1593c:	mov	r0, #0
   15940:	pop	{fp, pc}
   15944:	bl	11474 <abort@plt>
   15948:	push	{r4, r5, fp, lr}
   1594c:	add	fp, sp, #8
   15950:	mov	r5, r1
   15954:	ldr	r1, [r0, #8]
   15958:	ldr	r2, [r0, #24]
   1595c:	mov	r4, r0
   15960:	mov	r0, r5
   15964:	blx	r2
   15968:	ldr	r1, [r4, #8]
   1596c:	cmp	r0, r1
   15970:	bcs	159d4 <__assert_fail@plt+0x4518>
   15974:	ldr	r1, [r4]
   15978:	add	r2, r1, r0, lsl #3
   1597c:	ldr	r3, [r2]
   15980:	ldr	r2, [r2, #4]
   15984:	cmp	r3, r5
   15988:	beq	15998 <__assert_fail@plt+0x44dc>
   1598c:	cmp	r2, #0
   15990:	bne	1597c <__assert_fail@plt+0x44c0>
   15994:	b	159a8 <__assert_fail@plt+0x44ec>
   15998:	cmp	r2, #0
   1599c:	beq	159a8 <__assert_fail@plt+0x44ec>
   159a0:	ldr	r0, [r2]
   159a4:	pop	{r4, r5, fp, pc}
   159a8:	ldr	r2, [r4, #4]
   159ac:	add	r0, r1, r0, lsl #3
   159b0:	add	r1, r0, #8
   159b4:	cmp	r1, r2
   159b8:	bcs	159cc <__assert_fail@plt+0x4510>
   159bc:	ldr	r0, [r1], #8
   159c0:	cmp	r0, #0
   159c4:	beq	159b4 <__assert_fail@plt+0x44f8>
   159c8:	pop	{r4, r5, fp, pc}
   159cc:	mov	r0, #0
   159d0:	pop	{r4, r5, fp, pc}
   159d4:	bl	11474 <abort@plt>
   159d8:	push	{r4, r5, fp, lr}
   159dc:	add	fp, sp, #8
   159e0:	ldm	r0, {r5, lr}
   159e4:	mov	ip, r0
   159e8:	mov	r0, #0
   159ec:	cmp	r5, lr
   159f0:	popcs	{r4, r5, fp, pc}
   159f4:	mov	r0, #0
   159f8:	ldr	r3, [r5]
   159fc:	cmp	r3, #0
   15a00:	cmpne	r5, #0
   15a04:	beq	15a10 <__assert_fail@plt+0x4554>
   15a08:	b	15a2c <__assert_fail@plt+0x4570>
   15a0c:	ldr	lr, [ip, #4]
   15a10:	add	r5, r5, #8
   15a14:	cmp	r5, lr
   15a18:	bcs	15a54 <__assert_fail@plt+0x4598>
   15a1c:	ldr	r3, [r5]
   15a20:	cmp	r3, #0
   15a24:	cmpne	r5, #0
   15a28:	beq	15a10 <__assert_fail@plt+0x4554>
   15a2c:	mov	r3, r5
   15a30:	cmp	r0, r2
   15a34:	bcs	15a54 <__assert_fail@plt+0x4598>
   15a38:	ldr	r4, [r3]
   15a3c:	str	r4, [r1, r0, lsl #2]
   15a40:	add	r0, r0, #1
   15a44:	ldr	r3, [r3, #4]
   15a48:	cmp	r3, #0
   15a4c:	bne	15a30 <__assert_fail@plt+0x4574>
   15a50:	b	15a0c <__assert_fail@plt+0x4550>
   15a54:	pop	{r4, r5, fp, pc}
   15a58:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15a5c:	add	fp, sp, #24
   15a60:	mov	r5, r1
   15a64:	ldr	r4, [r0]
   15a68:	ldr	r1, [r0, #4]
   15a6c:	mov	r6, #0
   15a70:	cmp	r4, r1
   15a74:	bcs	15af0 <__assert_fail@plt+0x4634>
   15a78:	mov	r9, r2
   15a7c:	mov	r8, r0
   15a80:	mov	r6, #0
   15a84:	ldr	r0, [r4]
   15a88:	cmp	r0, #0
   15a8c:	cmpne	r4, #0
   15a90:	beq	15a9c <__assert_fail@plt+0x45e0>
   15a94:	b	15ab8 <__assert_fail@plt+0x45fc>
   15a98:	ldr	r1, [r8, #4]
   15a9c:	add	r4, r4, #8
   15aa0:	cmp	r4, r1
   15aa4:	bcs	15af0 <__assert_fail@plt+0x4634>
   15aa8:	ldr	r0, [r4]
   15aac:	cmp	r0, #0
   15ab0:	cmpne	r4, #0
   15ab4:	beq	15a9c <__assert_fail@plt+0x45e0>
   15ab8:	mov	r1, r9
   15abc:	blx	r5
   15ac0:	cmp	r0, #0
   15ac4:	beq	15af0 <__assert_fail@plt+0x4634>
   15ac8:	mov	r7, r4
   15acc:	ldr	r7, [r7, #4]
   15ad0:	add	r6, r6, #1
   15ad4:	cmp	r7, #0
   15ad8:	beq	15a98 <__assert_fail@plt+0x45dc>
   15adc:	ldr	r0, [r7]
   15ae0:	mov	r1, r9
   15ae4:	blx	r5
   15ae8:	cmp	r0, #0
   15aec:	bne	15acc <__assert_fail@plt+0x4610>
   15af0:	mov	r0, r6
   15af4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15af8:	ldrb	r2, [r0]
   15afc:	cmp	r2, #0
   15b00:	moveq	r0, #0
   15b04:	bxeq	lr
   15b08:	add	r3, r0, #1
   15b0c:	mov	r0, #0
   15b10:	rsb	r0, r0, r0, lsl #5
   15b14:	uxtab	r0, r0, r2
   15b18:	udiv	r2, r0, r1
   15b1c:	mls	r0, r2, r1, r0
   15b20:	ldrb	r2, [r3], #1
   15b24:	cmp	r2, #0
   15b28:	bne	15b10 <__assert_fail@plt+0x4654>
   15b2c:	bx	lr
   15b30:	movw	r1, #48912	; 0xbf10
   15b34:	movt	r1, #1
   15b38:	vld1.32	{d16-d17}, [r1]!
   15b3c:	ldr	r1, [r1]
   15b40:	vst1.32	{d16-d17}, [r0]!
   15b44:	str	r1, [r0]
   15b48:	bx	lr
   15b4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15b50:	add	fp, sp, #24
   15b54:	movw	r9, #23936	; 0x5d80
   15b58:	cmp	r3, #0
   15b5c:	movw	r5, #23916	; 0x5d6c
   15b60:	mov	r6, r0
   15b64:	mov	r0, #40	; 0x28
   15b68:	mov	r7, r1
   15b6c:	movt	r9, #1
   15b70:	movne	r9, r3
   15b74:	cmp	r2, #0
   15b78:	movt	r5, #1
   15b7c:	movne	r5, r2
   15b80:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   15b84:	mov	r8, #0
   15b88:	cmp	r0, #0
   15b8c:	beq	15d54 <__assert_fail@plt+0x4898>
   15b90:	mov	r4, r0
   15b94:	movw	r0, #48912	; 0xbf10
   15b98:	cmp	r7, #0
   15b9c:	movt	r0, #1
   15ba0:	moveq	r7, r0
   15ba4:	cmp	r7, r0
   15ba8:	str	r7, [r4, #20]
   15bac:	beq	15c28 <__assert_fail@plt+0x476c>
   15bb0:	vldr	s2, [pc, #420]	; 15d5c <__assert_fail@plt+0x48a0>
   15bb4:	vldr	s0, [r7, #8]
   15bb8:	vcmpe.f32	s0, s2
   15bbc:	vmrs	APSR_nzcv, fpscr
   15bc0:	ble	15cd4 <__assert_fail@plt+0x4818>
   15bc4:	vldr	s4, [pc, #404]	; 15d60 <__assert_fail@plt+0x48a4>
   15bc8:	vcmpe.f32	s0, s4
   15bcc:	vmrs	APSR_nzcv, fpscr
   15bd0:	bpl	15cd4 <__assert_fail@plt+0x4818>
   15bd4:	vldr	s4, [pc, #392]	; 15d64 <__assert_fail@plt+0x48a8>
   15bd8:	vldr	s6, [r7, #12]
   15bdc:	vcmpe.f32	s6, s4
   15be0:	vmrs	APSR_nzcv, fpscr
   15be4:	ble	15cd4 <__assert_fail@plt+0x4818>
   15be8:	vldr	s4, [r7]
   15bec:	vcmpe.f32	s4, #0.0
   15bf0:	vmrs	APSR_nzcv, fpscr
   15bf4:	blt	15cd4 <__assert_fail@plt+0x4818>
   15bf8:	vadd.f32	s2, s4, s2
   15bfc:	vcmpe.f32	s2, s0
   15c00:	vmrs	APSR_nzcv, fpscr
   15c04:	bpl	15cd4 <__assert_fail@plt+0x4818>
   15c08:	vldr	s0, [r7, #4]
   15c0c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15c10:	vcmpe.f32	s0, s4
   15c14:	vmrs	APSR_nzcv, fpscr
   15c18:	bhi	15cd4 <__assert_fail@plt+0x4818>
   15c1c:	vcmpe.f32	s2, s0
   15c20:	vmrs	APSR_nzcv, fpscr
   15c24:	bpl	15cd4 <__assert_fail@plt+0x4818>
   15c28:	ldrb	r0, [r7, #16]
   15c2c:	cmp	r0, #0
   15c30:	bne	15c5c <__assert_fail@plt+0x47a0>
   15c34:	vmov	s2, r6
   15c38:	vldr	s0, [r7, #8]
   15c3c:	vldr	s4, [pc, #292]	; 15d68 <__assert_fail@plt+0x48ac>
   15c40:	vcvt.f32.u32	s2, s2
   15c44:	vdiv.f32	s2, s2, s0
   15c48:	vcvt.u32.f32	s0, s2
   15c4c:	vcmpe.f32	s2, s4
   15c50:	vmrs	APSR_nzcv, fpscr
   15c54:	bge	15cf0 <__assert_fail@plt+0x4834>
   15c58:	vmov	r6, s0
   15c5c:	cmp	r6, #10
   15c60:	movls	r6, #10
   15c64:	orr	r0, r6, #1
   15c68:	cmn	r0, #1
   15c6c:	beq	15cf0 <__assert_fail@plt+0x4834>
   15c70:	ldr	r6, [fp, #8]
   15c74:	mov	r1, #3
   15c78:	cmp	r0, #10
   15c7c:	bcc	15cb4 <__assert_fail@plt+0x47f8>
   15c80:	mov	r1, #3
   15c84:	mov	r3, #9
   15c88:	mov	r2, #12
   15c8c:	udiv	r7, r0, r1
   15c90:	mls	r7, r7, r1, r0
   15c94:	cmp	r7, #0
   15c98:	beq	15cb4 <__assert_fail@plt+0x47f8>
   15c9c:	add	r3, r3, r2
   15ca0:	add	r2, r2, #8
   15ca4:	add	r1, r1, #2
   15ca8:	add	r3, r3, #4
   15cac:	cmp	r3, r0
   15cb0:	bcc	15c8c <__assert_fail@plt+0x47d0>
   15cb4:	udiv	r2, r0, r1
   15cb8:	mls	r1, r2, r1, r0
   15cbc:	cmp	r1, #0
   15cc0:	bne	15ce8 <__assert_fail@plt+0x482c>
   15cc4:	add	r0, r0, #2
   15cc8:	cmn	r0, #1
   15ccc:	bne	15c74 <__assert_fail@plt+0x47b8>
   15cd0:	b	15cf0 <__assert_fail@plt+0x4834>
   15cd4:	str	r0, [r4, #20]
   15cd8:	mov	r0, r4
   15cdc:	bl	12e18 <__assert_fail@plt+0x195c>
   15ce0:	mov	r0, r8
   15ce4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ce8:	cmp	r0, #536870912	; 0x20000000
   15cec:	bcc	15d08 <__assert_fail@plt+0x484c>
   15cf0:	mov	r0, #0
   15cf4:	str	r0, [r4, #8]
   15cf8:	mov	r0, r4
   15cfc:	bl	12e18 <__assert_fail@plt+0x195c>
   15d00:	mov	r0, r8
   15d04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15d08:	cmp	r0, #0
   15d0c:	str	r0, [r4, #8]
   15d10:	beq	15cf8 <__assert_fail@plt+0x483c>
   15d14:	mov	r1, #8
   15d18:	bl	1a650 <__assert_fail@plt+0x9194>
   15d1c:	cmp	r0, #0
   15d20:	str	r0, [r4]
   15d24:	beq	15cf8 <__assert_fail@plt+0x483c>
   15d28:	mov	r1, #0
   15d2c:	str	r5, [r4, #24]
   15d30:	str	r9, [r4, #28]
   15d34:	str	r6, [r4, #32]
   15d38:	mov	r8, r4
   15d3c:	str	r1, [r4, #36]	; 0x24
   15d40:	str	r1, [r4, #12]
   15d44:	str	r1, [r4, #16]
   15d48:	ldr	r1, [r4, #8]
   15d4c:	add	r0, r0, r1, lsl #3
   15d50:	str	r0, [r4, #4]
   15d54:	mov	r0, r8
   15d58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15d5c:	stclcc	12, cr12, [ip, #820]	; 0x334
   15d60:	svccc	0x00666666
   15d64:	svccc	0x008ccccd
   15d68:	svcmi	0x00800000
   15d6c:	ror	r2, r0, #3
   15d70:	udiv	r2, r2, r1
   15d74:	mul	r1, r2, r1
   15d78:	rsb	r0, r1, r0, ror #3
   15d7c:	bx	lr
   15d80:	sub	r0, r0, r1
   15d84:	clz	r0, r0
   15d88:	lsr	r0, r0, #5
   15d8c:	bx	lr
   15d90:	push	{r4, r5, r6, r7, fp, lr}
   15d94:	add	fp, sp, #16
   15d98:	mov	r4, r0
   15d9c:	ldr	r5, [r0]
   15da0:	ldr	r0, [r0, #4]
   15da4:	cmp	r5, r0
   15da8:	bcs	15e58 <__assert_fail@plt+0x499c>
   15dac:	mov	r6, #0
   15db0:	ldr	r1, [r5]
   15db4:	cmp	r1, #0
   15db8:	bne	15de4 <__assert_fail@plt+0x4928>
   15dbc:	b	15dcc <__assert_fail@plt+0x4910>
   15dc0:	str	r6, [r5]
   15dc4:	str	r6, [r5, #4]
   15dc8:	ldr	r0, [r4, #4]
   15dcc:	add	r5, r5, #8
   15dd0:	cmp	r5, r0
   15dd4:	bcs	15e58 <__assert_fail@plt+0x499c>
   15dd8:	ldr	r1, [r5]
   15ddc:	cmp	r1, #0
   15de0:	beq	15dcc <__assert_fail@plt+0x4910>
   15de4:	ldr	r1, [r4, #32]
   15de8:	ldr	r7, [r5, #4]
   15dec:	cmp	r1, #0
   15df0:	mov	r0, r1
   15df4:	movwne	r0, #1
   15df8:	cmp	r7, #0
   15dfc:	bne	15e40 <__assert_fail@plt+0x4984>
   15e00:	cmp	r0, #0
   15e04:	beq	15dc0 <__assert_fail@plt+0x4904>
   15e08:	ldr	r0, [r5]
   15e0c:	blx	r1
   15e10:	b	15dc0 <__assert_fail@plt+0x4904>
   15e14:	str	r6, [r7]
   15e18:	cmp	r1, #0
   15e1c:	ldr	r2, [r7, #4]
   15e20:	ldr	r0, [r4, #36]	; 0x24
   15e24:	str	r0, [r7, #4]
   15e28:	mov	r0, r1
   15e2c:	str	r7, [r4, #36]	; 0x24
   15e30:	movwne	r0, #1
   15e34:	cmp	r2, #0
   15e38:	mov	r7, r2
   15e3c:	beq	15e00 <__assert_fail@plt+0x4944>
   15e40:	tst	r0, #1
   15e44:	beq	15e14 <__assert_fail@plt+0x4958>
   15e48:	ldr	r0, [r7]
   15e4c:	blx	r1
   15e50:	ldr	r1, [r4, #32]
   15e54:	b	15e14 <__assert_fail@plt+0x4958>
   15e58:	mov	r0, #0
   15e5c:	str	r0, [r4, #12]
   15e60:	str	r0, [r4, #16]
   15e64:	pop	{r4, r5, r6, r7, fp, pc}
   15e68:	push	{r4, r5, r6, sl, fp, lr}
   15e6c:	add	fp, sp, #16
   15e70:	mov	r4, r0
   15e74:	ldr	r0, [r0, #32]
   15e78:	cmp	r0, #0
   15e7c:	beq	15ef0 <__assert_fail@plt+0x4a34>
   15e80:	ldr	r0, [r4, #16]
   15e84:	cmp	r0, #0
   15e88:	beq	15ef0 <__assert_fail@plt+0x4a34>
   15e8c:	ldr	r5, [r4]
   15e90:	ldr	r1, [r4, #4]
   15e94:	cmp	r5, r1
   15e98:	bcc	15eb0 <__assert_fail@plt+0x49f4>
   15e9c:	b	15ef0 <__assert_fail@plt+0x4a34>
   15ea0:	ldr	r1, [r4, #4]
   15ea4:	add	r5, r5, #8
   15ea8:	cmp	r5, r1
   15eac:	bcs	15ef0 <__assert_fail@plt+0x4a34>
   15eb0:	ldr	r0, [r5]
   15eb4:	cmp	r0, #0
   15eb8:	cmpne	r5, #0
   15ebc:	beq	15ea4 <__assert_fail@plt+0x49e8>
   15ec0:	ldr	r1, [r4, #32]
   15ec4:	blx	r1
   15ec8:	ldr	r6, [r5, #4]
   15ecc:	cmp	r6, #0
   15ed0:	beq	15ea0 <__assert_fail@plt+0x49e4>
   15ed4:	ldr	r1, [r4, #32]
   15ed8:	ldr	r0, [r6]
   15edc:	blx	r1
   15ee0:	ldr	r6, [r6, #4]
   15ee4:	cmp	r6, #0
   15ee8:	bne	15ed4 <__assert_fail@plt+0x4a18>
   15eec:	b	15ea0 <__assert_fail@plt+0x49e4>
   15ef0:	ldr	r5, [r4]
   15ef4:	ldr	r1, [r4, #4]
   15ef8:	cmp	r5, r1
   15efc:	bcc	15f10 <__assert_fail@plt+0x4a54>
   15f00:	b	15f38 <__assert_fail@plt+0x4a7c>
   15f04:	add	r5, r5, #8
   15f08:	cmp	r5, r1
   15f0c:	bcs	15f38 <__assert_fail@plt+0x4a7c>
   15f10:	ldr	r0, [r5, #4]
   15f14:	cmp	r0, #0
   15f18:	beq	15f04 <__assert_fail@plt+0x4a48>
   15f1c:	ldr	r6, [r0, #4]
   15f20:	bl	12e18 <__assert_fail@plt+0x195c>
   15f24:	cmp	r6, #0
   15f28:	mov	r0, r6
   15f2c:	bne	15f1c <__assert_fail@plt+0x4a60>
   15f30:	ldr	r1, [r4, #4]
   15f34:	b	15f04 <__assert_fail@plt+0x4a48>
   15f38:	ldr	r0, [r4, #36]	; 0x24
   15f3c:	cmp	r0, #0
   15f40:	beq	15f58 <__assert_fail@plt+0x4a9c>
   15f44:	ldr	r5, [r0, #4]
   15f48:	bl	12e18 <__assert_fail@plt+0x195c>
   15f4c:	cmp	r5, #0
   15f50:	mov	r0, r5
   15f54:	bne	15f44 <__assert_fail@plt+0x4a88>
   15f58:	ldr	r0, [r4]
   15f5c:	bl	12e18 <__assert_fail@plt+0x195c>
   15f60:	mov	r0, r4
   15f64:	pop	{r4, r5, r6, sl, fp, lr}
   15f68:	b	12e18 <__assert_fail@plt+0x195c>
   15f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f70:	add	fp, sp, #28
   15f74:	sub	sp, sp, #44	; 0x2c
   15f78:	mov	r7, r0
   15f7c:	mov	r4, r0
   15f80:	ldr	r0, [r7, #20]!
   15f84:	ldrb	r2, [r0, #16]
   15f88:	cmp	r2, #0
   15f8c:	bne	15fbc <__assert_fail@plt+0x4b00>
   15f90:	vmov	s2, r1
   15f94:	vldr	s0, [r0, #8]
   15f98:	vldr	s4, [pc, #592]	; 161f0 <__assert_fail@plt+0x4d34>
   15f9c:	mov	r5, #0
   15fa0:	vcvt.f32.u32	s2, s2
   15fa4:	vdiv.f32	s2, s2, s0
   15fa8:	vcvt.u32.f32	s0, s2
   15fac:	vcmpe.f32	s2, s4
   15fb0:	vmrs	APSR_nzcv, fpscr
   15fb4:	bge	160e0 <__assert_fail@plt+0x4c24>
   15fb8:	vmov	r1, s0
   15fbc:	cmp	r1, #10
   15fc0:	mov	r5, #0
   15fc4:	movls	r1, #10
   15fc8:	orr	r6, r1, #1
   15fcc:	cmn	r6, #1
   15fd0:	beq	160e0 <__assert_fail@plt+0x4c24>
   15fd4:	mov	r0, #3
   15fd8:	cmp	r6, #10
   15fdc:	bcc	16014 <__assert_fail@plt+0x4b58>
   15fe0:	mov	r0, #3
   15fe4:	mov	r2, #9
   15fe8:	mov	r1, #12
   15fec:	udiv	r3, r6, r0
   15ff0:	mls	r3, r3, r0, r6
   15ff4:	cmp	r3, #0
   15ff8:	beq	16014 <__assert_fail@plt+0x4b58>
   15ffc:	add	r2, r2, r1
   16000:	add	r1, r1, #8
   16004:	add	r0, r0, #2
   16008:	add	r2, r2, #4
   1600c:	cmp	r2, r6
   16010:	bcc	15fec <__assert_fail@plt+0x4b30>
   16014:	udiv	r1, r6, r0
   16018:	mls	r0, r1, r0, r6
   1601c:	cmp	r0, #0
   16020:	bne	16034 <__assert_fail@plt+0x4b78>
   16024:	add	r6, r6, #2
   16028:	cmn	r6, #1
   1602c:	bne	15fd4 <__assert_fail@plt+0x4b18>
   16030:	b	160e0 <__assert_fail@plt+0x4c24>
   16034:	sub	r0, r6, #1
   16038:	cmn	r0, #-536870910	; 0xe0000002
   1603c:	bhi	160e0 <__assert_fail@plt+0x4c24>
   16040:	ldr	r0, [r4, #8]
   16044:	cmp	r6, r0
   16048:	bne	1605c <__assert_fail@plt+0x4ba0>
   1604c:	mov	r5, #1
   16050:	mov	r0, r5
   16054:	sub	sp, fp, #28
   16058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1605c:	mov	r0, r6
   16060:	mov	r1, #8
   16064:	bl	1a650 <__assert_fail@plt+0x9194>
   16068:	cmp	r0, #0
   1606c:	str	r0, [sp, #4]
   16070:	beq	160e0 <__assert_fail@plt+0x4c24>
   16074:	add	r0, r0, r6, lsl #3
   16078:	mov	r1, #0
   1607c:	add	r5, sp, #4
   16080:	mov	sl, r4
   16084:	mov	r2, #0
   16088:	str	r1, [sp, #20]
   1608c:	str	r1, [sp, #16]
   16090:	str	r6, [sp, #12]
   16094:	mov	r1, r4
   16098:	str	r0, [sp, #8]
   1609c:	add	r0, r5, #20
   160a0:	vld1.32	{d16-d17}, [r7]
   160a4:	vst1.32	{d16-d17}, [r0]
   160a8:	ldr	r0, [sl, #36]!	; 0x24
   160ac:	str	r0, [sp, #40]	; 0x28
   160b0:	mov	r0, r5
   160b4:	bl	161f4 <__assert_fail@plt+0x4d38>
   160b8:	cmp	r0, #0
   160bc:	beq	160ec <__assert_fail@plt+0x4c30>
   160c0:	ldr	r0, [r4]
   160c4:	bl	12e18 <__assert_fail@plt+0x195c>
   160c8:	mov	r0, #36	; 0x24
   160cc:	vld1.32	{d16-d17}, [r5], r0
   160d0:	vst1.32	{d16-d17}, [r4], r0
   160d4:	ldr	r0, [r5]
   160d8:	mov	r5, #1
   160dc:	str	r0, [r4]
   160e0:	mov	r0, r5
   160e4:	sub	sp, fp, #28
   160e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160ec:	ldr	r0, [sp, #40]	; 0x28
   160f0:	str	r0, [sl]
   160f4:	ldr	r0, [sp, #8]
   160f8:	ldr	r8, [sp, #4]
   160fc:	cmp	r8, r0
   16100:	str	r0, [sp]
   16104:	bcs	161bc <__assert_fail@plt+0x4d00>
   16108:	mov	r9, #0
   1610c:	ldr	r0, [r8]
   16110:	cmp	r0, #0
   16114:	bne	1613c <__assert_fail@plt+0x4c80>
   16118:	b	16120 <__assert_fail@plt+0x4c64>
   1611c:	str	r9, [r8, #4]
   16120:	ldr	r0, [sp]
   16124:	add	r8, r8, #8
   16128:	cmp	r8, r0
   1612c:	bcs	161bc <__assert_fail@plt+0x4d00>
   16130:	ldr	r0, [r8]
   16134:	cmp	r0, #0
   16138:	beq	16120 <__assert_fail@plt+0x4c64>
   1613c:	ldr	r6, [r8, #4]
   16140:	cmp	r6, #0
   16144:	beq	1611c <__assert_fail@plt+0x4c60>
   16148:	ldr	r1, [r4, #8]
   1614c:	b	16170 <__assert_fail@plt+0x4cb4>
   16150:	add	r0, r3, r0, lsl #3
   16154:	add	r0, r0, #4
   16158:	ldr	r3, [r0]
   1615c:	cmp	r2, #0
   16160:	str	r3, [r6, #4]
   16164:	str	r6, [r0]
   16168:	mov	r6, r2
   1616c:	beq	1611c <__assert_fail@plt+0x4c60>
   16170:	ldr	r5, [r6]
   16174:	ldr	r2, [r4, #24]
   16178:	mov	r0, r5
   1617c:	blx	r2
   16180:	ldr	r1, [r4, #8]
   16184:	cmp	r0, r1
   16188:	bcs	161ec <__assert_fail@plt+0x4d30>
   1618c:	ldr	r3, [r4]
   16190:	ldr	r2, [r6, #4]
   16194:	ldr	r7, [r3, r0, lsl #3]
   16198:	cmp	r7, #0
   1619c:	bne	16150 <__assert_fail@plt+0x4c94>
   161a0:	str	r5, [r3, r0, lsl #3]
   161a4:	ldr	r0, [r4, #12]
   161a8:	add	r0, r0, #1
   161ac:	str	r0, [r4, #12]
   161b0:	mov	r0, sl
   161b4:	str	r9, [r6]
   161b8:	b	16158 <__assert_fail@plt+0x4c9c>
   161bc:	add	r1, sp, #4
   161c0:	mov	r0, r4
   161c4:	mov	r2, #0
   161c8:	mov	r5, #0
   161cc:	bl	161f4 <__assert_fail@plt+0x4d38>
   161d0:	cmp	r0, #0
   161d4:	beq	161ec <__assert_fail@plt+0x4d30>
   161d8:	ldr	r0, [sp, #4]
   161dc:	bl	12e18 <__assert_fail@plt+0x195c>
   161e0:	mov	r0, r5
   161e4:	sub	sp, fp, #28
   161e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161ec:	bl	11474 <abort@plt>
   161f0:	svcmi	0x00800000
   161f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161f8:	add	fp, sp, #28
   161fc:	sub	sp, sp, #4
   16200:	ldr	r8, [r1]
   16204:	ldr	r3, [r1, #4]
   16208:	mov	r6, r0
   1620c:	mov	r0, #1
   16210:	str	r1, [sp]
   16214:	cmp	r8, r3
   16218:	bcs	1642c <__assert_fail@plt+0x4f70>
   1621c:	add	sl, r6, #36	; 0x24
   16220:	cmp	r2, #0
   16224:	beq	162e0 <__assert_fail@plt+0x4e24>
   16228:	mov	r9, #0
   1622c:	ldr	r1, [r8]
   16230:	cmp	r1, #0
   16234:	bne	16260 <__assert_fail@plt+0x4da4>
   16238:	b	16248 <__assert_fail@plt+0x4d8c>
   1623c:	ldr	r0, [sp]
   16240:	ldr	r3, [r0, #4]
   16244:	str	r9, [r8, #4]
   16248:	add	r8, r8, #8
   1624c:	cmp	r8, r3
   16250:	bcs	16428 <__assert_fail@plt+0x4f6c>
   16254:	ldr	r1, [r8]
   16258:	cmp	r1, #0
   1625c:	beq	16248 <__assert_fail@plt+0x4d8c>
   16260:	ldr	r7, [r8, #4]
   16264:	cmp	r7, #0
   16268:	beq	16244 <__assert_fail@plt+0x4d88>
   1626c:	ldr	r1, [r6, #8]
   16270:	b	162a4 <__assert_fail@plt+0x4de8>
   16274:	str	r4, [r3, r0, lsl #3]
   16278:	ldr	r0, [r6, #12]
   1627c:	add	r0, r0, #1
   16280:	str	r0, [r6, #12]
   16284:	mov	r0, sl
   16288:	str	r9, [r7]
   1628c:	ldr	r3, [r0]
   16290:	cmp	r2, #0
   16294:	str	r3, [r7, #4]
   16298:	str	r7, [r0]
   1629c:	mov	r7, r2
   162a0:	beq	1623c <__assert_fail@plt+0x4d80>
   162a4:	ldr	r4, [r7]
   162a8:	ldr	r2, [r6, #24]
   162ac:	mov	r0, r4
   162b0:	blx	r2
   162b4:	ldr	r1, [r6, #8]
   162b8:	cmp	r0, r1
   162bc:	bcs	16440 <__assert_fail@plt+0x4f84>
   162c0:	ldr	r3, [r6]
   162c4:	ldr	r2, [r7, #4]
   162c8:	ldr	r5, [r3, r0, lsl #3]
   162cc:	cmp	r5, #0
   162d0:	beq	16274 <__assert_fail@plt+0x4db8>
   162d4:	add	r0, r3, r0, lsl #3
   162d8:	add	r0, r0, #4
   162dc:	b	1628c <__assert_fail@plt+0x4dd0>
   162e0:	mov	r5, #0
   162e4:	ldr	r7, [r8]
   162e8:	cmp	r7, #0
   162ec:	bne	16334 <__assert_fail@plt+0x4e78>
   162f0:	b	1631c <__assert_fail@plt+0x4e60>
   162f4:	str	r7, [r9, r4, lsl #3]
   162f8:	ldr	r0, [r6, #12]
   162fc:	add	r0, r0, #1
   16300:	str	r0, [r6, #12]
   16304:	ldr	r0, [sp]
   16308:	str	r5, [r8]
   1630c:	ldr	r1, [r0, #12]
   16310:	ldr	r3, [r0, #4]
   16314:	sub	r1, r1, #1
   16318:	str	r1, [r0, #12]
   1631c:	add	r8, r8, #8
   16320:	cmp	r8, r3
   16324:	bcs	16428 <__assert_fail@plt+0x4f6c>
   16328:	ldr	r7, [r8]
   1632c:	cmp	r7, #0
   16330:	beq	1631c <__assert_fail@plt+0x4e60>
   16334:	ldr	r9, [r8, #4]
   16338:	ldr	r1, [r6, #8]
   1633c:	cmp	r9, #0
   16340:	bne	16368 <__assert_fail@plt+0x4eac>
   16344:	b	163b8 <__assert_fail@plt+0x4efc>
   16348:	add	r0, r3, r0, lsl #3
   1634c:	add	r0, r0, #4
   16350:	ldr	r3, [r0]
   16354:	cmp	r2, #0
   16358:	str	r3, [r9, #4]
   1635c:	str	r9, [r0]
   16360:	mov	r9, r2
   16364:	beq	163b4 <__assert_fail@plt+0x4ef8>
   16368:	ldr	r4, [r9]
   1636c:	ldr	r2, [r6, #24]
   16370:	mov	r0, r4
   16374:	blx	r2
   16378:	ldr	r1, [r6, #8]
   1637c:	cmp	r0, r1
   16380:	bcs	16440 <__assert_fail@plt+0x4f84>
   16384:	ldr	r3, [r6]
   16388:	ldr	r2, [r9, #4]
   1638c:	ldr	r7, [r3, r0, lsl #3]
   16390:	cmp	r7, #0
   16394:	bne	16348 <__assert_fail@plt+0x4e8c>
   16398:	str	r4, [r3, r0, lsl #3]
   1639c:	ldr	r0, [r6, #12]
   163a0:	add	r0, r0, #1
   163a4:	str	r0, [r6, #12]
   163a8:	mov	r0, sl
   163ac:	str	r5, [r9]
   163b0:	b	16350 <__assert_fail@plt+0x4e94>
   163b4:	ldr	r7, [r8]
   163b8:	str	r5, [r8, #4]
   163bc:	mov	r0, r7
   163c0:	ldr	r2, [r6, #24]
   163c4:	blx	r2
   163c8:	mov	r4, r0
   163cc:	ldr	r0, [r6, #8]
   163d0:	cmp	r4, r0
   163d4:	bcs	16440 <__assert_fail@plt+0x4f84>
   163d8:	ldr	r9, [r6]
   163dc:	ldr	r0, [r9, r4, lsl #3]
   163e0:	cmp	r0, #0
   163e4:	beq	162f4 <__assert_fail@plt+0x4e38>
   163e8:	ldr	r0, [sl]
   163ec:	cmp	r0, #0
   163f0:	beq	16400 <__assert_fail@plt+0x4f44>
   163f4:	ldr	r1, [r0, #4]
   163f8:	str	r1, [sl]
   163fc:	b	16410 <__assert_fail@plt+0x4f54>
   16400:	mov	r0, #8
   16404:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   16408:	cmp	r0, #0
   1640c:	beq	16434 <__assert_fail@plt+0x4f78>
   16410:	add	r1, r9, r4, lsl #3
   16414:	str	r7, [r0]
   16418:	ldr	r2, [r1, #4]
   1641c:	str	r2, [r0, #4]
   16420:	str	r0, [r1, #4]
   16424:	b	16304 <__assert_fail@plt+0x4e48>
   16428:	mov	r0, #1
   1642c:	sub	sp, fp, #28
   16430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16434:	mov	r0, #0
   16438:	sub	sp, fp, #28
   1643c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16440:	bl	11474 <abort@plt>
   16444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16448:	add	fp, sp, #28
   1644c:	sub	sp, sp, #4
   16450:	cmp	r1, #0
   16454:	beq	16790 <__assert_fail@plt+0x52d4>
   16458:	mov	r8, r2
   1645c:	mov	sl, r1
   16460:	ldr	r1, [r0, #8]
   16464:	ldr	r2, [r0, #24]
   16468:	mov	r4, r0
   1646c:	mov	r0, sl
   16470:	blx	r2
   16474:	mov	r7, r0
   16478:	ldr	r0, [r4, #8]
   1647c:	cmp	r7, r0
   16480:	bcs	16790 <__assert_fail@plt+0x52d4>
   16484:	ldr	r5, [r4]
   16488:	mov	r9, r5
   1648c:	ldr	r1, [r9, r7, lsl #3]!
   16490:	cmp	r1, #0
   16494:	beq	16528 <__assert_fail@plt+0x506c>
   16498:	cmp	r1, sl
   1649c:	beq	164c8 <__assert_fail@plt+0x500c>
   164a0:	ldr	r2, [r4, #28]
   164a4:	mov	r0, sl
   164a8:	blx	r2
   164ac:	cmp	r0, #0
   164b0:	mov	r6, r9
   164b4:	beq	164e4 <__assert_fail@plt+0x5028>
   164b8:	ldr	r0, [r6]
   164bc:	cmp	r0, #0
   164c0:	bne	164cc <__assert_fail@plt+0x5010>
   164c4:	b	16528 <__assert_fail@plt+0x506c>
   164c8:	mov	r0, sl
   164cc:	cmp	r8, #0
   164d0:	mov	r7, #0
   164d4:	strne	r0, [r8]
   164d8:	mov	r0, r7
   164dc:	sub	sp, fp, #28
   164e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164e4:	add	r6, r5, r7, lsl #3
   164e8:	ldr	r0, [r6, #4]!
   164ec:	cmp	r0, #0
   164f0:	beq	16528 <__assert_fail@plt+0x506c>
   164f4:	ldr	r1, [r0]
   164f8:	cmp	r1, sl
   164fc:	beq	1651c <__assert_fail@plt+0x5060>
   16500:	ldr	r2, [r4, #28]
   16504:	mov	r0, sl
   16508:	blx	r2
   1650c:	ldr	r6, [r6]
   16510:	cmp	r0, #0
   16514:	beq	164e8 <__assert_fail@plt+0x502c>
   16518:	b	164b8 <__assert_fail@plt+0x4ffc>
   1651c:	mov	r0, sl
   16520:	cmp	r0, #0
   16524:	bne	164cc <__assert_fail@plt+0x5010>
   16528:	vldr	s0, [r4, #8]
   1652c:	vldr	s2, [r4, #12]
   16530:	ldr	r0, [r4, #20]
   16534:	vcvt.f32.u32	s0, s0
   16538:	vcvt.f32.u32	s4, s2
   1653c:	vldr	s2, [r0, #8]
   16540:	vmul.f32	s6, s2, s0
   16544:	vcmpe.f32	s6, s4
   16548:	vmrs	APSR_nzcv, fpscr
   1654c:	bpl	166b0 <__assert_fail@plt+0x51f4>
   16550:	movw	r1, #48912	; 0xbf10
   16554:	movt	r1, #1
   16558:	cmp	r0, r1
   1655c:	beq	165f8 <__assert_fail@plt+0x513c>
   16560:	vldr	s6, [pc, #556]	; 16794 <__assert_fail@plt+0x52d8>
   16564:	vcmpe.f32	s2, s6
   16568:	vmrs	APSR_nzcv, fpscr
   1656c:	ble	165d4 <__assert_fail@plt+0x5118>
   16570:	vldr	s8, [pc, #544]	; 16798 <__assert_fail@plt+0x52dc>
   16574:	vcmpe.f32	s2, s8
   16578:	vmrs	APSR_nzcv, fpscr
   1657c:	bpl	165d4 <__assert_fail@plt+0x5118>
   16580:	vldr	s8, [pc, #532]	; 1679c <__assert_fail@plt+0x52e0>
   16584:	vldr	s10, [r0, #12]
   16588:	vcmpe.f32	s10, s8
   1658c:	vmrs	APSR_nzcv, fpscr
   16590:	ble	165d4 <__assert_fail@plt+0x5118>
   16594:	vldr	s8, [r0]
   16598:	vcmpe.f32	s8, #0.0
   1659c:	vmrs	APSR_nzcv, fpscr
   165a0:	blt	165d4 <__assert_fail@plt+0x5118>
   165a4:	vadd.f32	s6, s8, s6
   165a8:	vcmpe.f32	s6, s2
   165ac:	vmrs	APSR_nzcv, fpscr
   165b0:	bpl	165d4 <__assert_fail@plt+0x5118>
   165b4:	vldr	s8, [r0, #4]
   165b8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   165bc:	vcmpe.f32	s8, s10
   165c0:	vmrs	APSR_nzcv, fpscr
   165c4:	bhi	165d4 <__assert_fail@plt+0x5118>
   165c8:	vcmpe.f32	s6, s8
   165cc:	vmrs	APSR_nzcv, fpscr
   165d0:	bmi	165e4 <__assert_fail@plt+0x5128>
   165d4:	vldr	s2, [pc, #452]	; 167a0 <__assert_fail@plt+0x52e4>
   165d8:	movw	r0, #48912	; 0xbf10
   165dc:	movt	r0, #1
   165e0:	str	r0, [r4, #20]
   165e4:	vmul.f32	s6, s2, s0
   165e8:	vcmpe.f32	s6, s4
   165ec:	vmrs	APSR_nzcv, fpscr
   165f0:	bmi	1660c <__assert_fail@plt+0x5150>
   165f4:	b	166b0 <__assert_fail@plt+0x51f4>
   165f8:	mov	r0, r1
   165fc:	vmul.f32	s6, s2, s0
   16600:	vcmpe.f32	s6, s4
   16604:	vmrs	APSR_nzcv, fpscr
   16608:	bpl	166b0 <__assert_fail@plt+0x51f4>
   1660c:	vldr	s4, [r0, #12]
   16610:	ldrb	r0, [r0, #16]
   16614:	mvn	r7, #0
   16618:	cmp	r0, #0
   1661c:	vmul.f32	s0, s4, s0
   16620:	vldr	s4, [pc, #380]	; 167a4 <__assert_fail@plt+0x52e8>
   16624:	vmul.f32	s2, s2, s0
   16628:	vseleq.f32	s0, s2, s0
   1662c:	vcmpe.f32	s0, s4
   16630:	vmrs	APSR_nzcv, fpscr
   16634:	bge	16724 <__assert_fail@plt+0x5268>
   16638:	vcvt.u32.f32	s0, s0
   1663c:	mov	r0, r4
   16640:	vmov	r1, s0
   16644:	bl	15f6c <__assert_fail@plt+0x4ab0>
   16648:	cmp	r0, #0
   1664c:	beq	16724 <__assert_fail@plt+0x5268>
   16650:	ldr	r1, [r4, #8]
   16654:	ldr	r2, [r4, #24]
   16658:	mov	r0, sl
   1665c:	blx	r2
   16660:	mov	r7, r0
   16664:	ldr	r0, [r4, #8]
   16668:	cmp	r7, r0
   1666c:	bcs	16790 <__assert_fail@plt+0x52d4>
   16670:	ldr	r5, [r4]
   16674:	mov	r9, r5
   16678:	ldr	r1, [r9, r7, lsl #3]!
   1667c:	cmp	r1, #0
   16680:	beq	166b0 <__assert_fail@plt+0x51f4>
   16684:	cmp	r1, sl
   16688:	mov	r0, sl
   1668c:	beq	166a8 <__assert_fail@plt+0x51ec>
   16690:	ldr	r2, [r4, #28]
   16694:	mov	r0, sl
   16698:	blx	r2
   1669c:	cmp	r0, #0
   166a0:	beq	16740 <__assert_fail@plt+0x5284>
   166a4:	ldr	r0, [r9]
   166a8:	cmp	r0, #0
   166ac:	bne	16790 <__assert_fail@plt+0x52d4>
   166b0:	ldr	r0, [r9]
   166b4:	cmp	r0, #0
   166b8:	beq	166d4 <__assert_fail@plt+0x5218>
   166bc:	ldr	r0, [r4, #36]	; 0x24
   166c0:	cmp	r0, #0
   166c4:	beq	166f4 <__assert_fail@plt+0x5238>
   166c8:	ldr	r1, [r0, #4]
   166cc:	str	r1, [r4, #36]	; 0x24
   166d0:	b	16704 <__assert_fail@plt+0x5248>
   166d4:	str	sl, [r9]
   166d8:	ldr	r0, [r4, #12]
   166dc:	ldr	r1, [r4, #16]
   166e0:	add	r0, r0, #1
   166e4:	add	r1, r1, #1
   166e8:	str	r0, [r4, #12]
   166ec:	str	r1, [r4, #16]
   166f0:	b	16720 <__assert_fail@plt+0x5264>
   166f4:	mov	r0, #8
   166f8:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   166fc:	cmp	r0, #0
   16700:	beq	16730 <__assert_fail@plt+0x5274>
   16704:	str	sl, [r0]
   16708:	ldr	r1, [r9, #4]
   1670c:	str	r1, [r0, #4]
   16710:	str	r0, [r9, #4]
   16714:	ldr	r0, [r4, #16]
   16718:	add	r0, r0, #1
   1671c:	str	r0, [r4, #16]
   16720:	mov	r7, #1
   16724:	mov	r0, r7
   16728:	sub	sp, fp, #28
   1672c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16730:	mvn	r7, #0
   16734:	mov	r0, r7
   16738:	sub	sp, fp, #28
   1673c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16740:	add	r6, r5, r7, lsl #3
   16744:	ldr	r0, [r6, #4]!
   16748:	cmp	r0, #0
   1674c:	beq	166b0 <__assert_fail@plt+0x51f4>
   16750:	ldr	r1, [r0]
   16754:	cmp	r1, sl
   16758:	beq	16784 <__assert_fail@plt+0x52c8>
   1675c:	ldr	r2, [r4, #28]
   16760:	mov	r0, sl
   16764:	blx	r2
   16768:	ldr	r6, [r6]
   1676c:	cmp	r0, #0
   16770:	beq	16744 <__assert_fail@plt+0x5288>
   16774:	ldr	r0, [r6]
   16778:	cmp	r0, #0
   1677c:	beq	166b0 <__assert_fail@plt+0x51f4>
   16780:	b	16790 <__assert_fail@plt+0x52d4>
   16784:	mov	r0, sl
   16788:	cmp	r0, #0
   1678c:	beq	166b0 <__assert_fail@plt+0x51f4>
   16790:	bl	11474 <abort@plt>
   16794:	stclcc	12, cr12, [ip, #820]	; 0x334
   16798:	svccc	0x00666666
   1679c:	svccc	0x008ccccd
   167a0:	svccc	0x004ccccd
   167a4:	svcmi	0x00800000
   167a8:	push	{r4, sl, fp, lr}
   167ac:	add	fp, sp, #8
   167b0:	sub	sp, sp, #8
   167b4:	add	r2, sp, #4
   167b8:	mov	r4, r1
   167bc:	bl	16444 <__assert_fail@plt+0x4f88>
   167c0:	cmn	r0, #1
   167c4:	beq	167e0 <__assert_fail@plt+0x5324>
   167c8:	ldr	r1, [sp, #4]
   167cc:	cmp	r0, #0
   167d0:	moveq	r4, r1
   167d4:	mov	r0, r4
   167d8:	sub	sp, fp, #8
   167dc:	pop	{r4, sl, fp, pc}
   167e0:	mov	r4, #0
   167e4:	mov	r0, r4
   167e8:	sub	sp, fp, #8
   167ec:	pop	{r4, sl, fp, pc}
   167f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   167f4:	add	fp, sp, #24
   167f8:	mov	r9, r1
   167fc:	ldr	r1, [r0, #8]
   16800:	ldr	r2, [r0, #24]
   16804:	mov	r5, r0
   16808:	mov	r0, r9
   1680c:	blx	r2
   16810:	mov	r7, r0
   16814:	ldr	r0, [r5, #8]
   16818:	cmp	r7, r0
   1681c:	bcs	16a90 <__assert_fail@plt+0x55d4>
   16820:	ldr	r6, [r5]
   16824:	mov	r8, #0
   16828:	mov	r4, r6
   1682c:	ldr	r1, [r4, r7, lsl #3]!
   16830:	cmp	r1, #0
   16834:	beq	168e8 <__assert_fail@plt+0x542c>
   16838:	cmp	r1, r9
   1683c:	beq	16858 <__assert_fail@plt+0x539c>
   16840:	ldr	r2, [r5, #28]
   16844:	mov	r0, r9
   16848:	blx	r2
   1684c:	cmp	r0, #0
   16850:	beq	16890 <__assert_fail@plt+0x53d4>
   16854:	ldr	r9, [r4]
   16858:	add	r0, r6, r7, lsl #3
   1685c:	ldr	r0, [r0, #4]
   16860:	cmp	r0, #0
   16864:	beq	168d8 <__assert_fail@plt+0x541c>
   16868:	ldm	r0, {r1, r2}
   1686c:	stm	r4, {r1, r2}
   16870:	mov	r1, #0
   16874:	str	r1, [r0]
   16878:	ldr	r1, [r5, #36]	; 0x24
   1687c:	str	r1, [r0, #4]
   16880:	str	r0, [r5, #36]	; 0x24
   16884:	cmp	r9, #0
   16888:	bne	16920 <__assert_fail@plt+0x5464>
   1688c:	b	168e8 <__assert_fail@plt+0x542c>
   16890:	add	r7, r6, r7, lsl #3
   16894:	ldr	r0, [r7, #4]!
   16898:	cmp	r0, #0
   1689c:	beq	168e8 <__assert_fail@plt+0x542c>
   168a0:	ldr	r1, [r0]
   168a4:	cmp	r1, r9
   168a8:	beq	168f0 <__assert_fail@plt+0x5434>
   168ac:	ldr	r2, [r5, #28]
   168b0:	mov	r0, r9
   168b4:	blx	r2
   168b8:	ldr	r1, [r7]
   168bc:	cmp	r0, #0
   168c0:	bne	168f8 <__assert_fail@plt+0x543c>
   168c4:	ldr	r0, [r1, #4]!
   168c8:	mov	r7, r1
   168cc:	cmp	r0, #0
   168d0:	bne	168a0 <__assert_fail@plt+0x53e4>
   168d4:	b	168e8 <__assert_fail@plt+0x542c>
   168d8:	mov	r0, #0
   168dc:	str	r0, [r4]
   168e0:	cmp	r9, #0
   168e4:	bne	16920 <__assert_fail@plt+0x5464>
   168e8:	mov	r0, r8
   168ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   168f0:	mov	r1, r0
   168f4:	b	168fc <__assert_fail@plt+0x5440>
   168f8:	ldr	r9, [r1]
   168fc:	ldr	r0, [r1, #4]
   16900:	str	r0, [r7]
   16904:	mov	r0, #0
   16908:	str	r0, [r1]
   1690c:	ldr	r0, [r5, #36]	; 0x24
   16910:	str	r0, [r1, #4]
   16914:	str	r1, [r5, #36]	; 0x24
   16918:	cmp	r9, #0
   1691c:	beq	168e8 <__assert_fail@plt+0x542c>
   16920:	ldr	r0, [r5, #16]
   16924:	sub	r0, r0, #1
   16928:	str	r0, [r5, #16]
   1692c:	ldr	r0, [r4]
   16930:	cmp	r0, #0
   16934:	bne	16a84 <__assert_fail@plt+0x55c8>
   16938:	ldr	r0, [r5, #12]
   1693c:	vldr	s0, [r5, #8]
   16940:	sub	r1, r0, #1
   16944:	str	r1, [r5, #12]
   16948:	vmov	s2, r1
   1694c:	ldr	r0, [r5, #20]
   16950:	vcvt.f32.u32	s0, s0
   16954:	vcvt.f32.u32	s2, s2
   16958:	vldr	s4, [r0]
   1695c:	vmul.f32	s6, s4, s0
   16960:	vcmpe.f32	s6, s2
   16964:	vmrs	APSR_nzcv, fpscr
   16968:	ble	16a84 <__assert_fail@plt+0x55c8>
   1696c:	movw	r1, #48912	; 0xbf10
   16970:	movt	r1, #1
   16974:	cmp	r0, r1
   16978:	beq	16a14 <__assert_fail@plt+0x5558>
   1697c:	vldr	s8, [pc, #272]	; 16a94 <__assert_fail@plt+0x55d8>
   16980:	vldr	s6, [r0, #8]
   16984:	vcmpe.f32	s6, s8
   16988:	vmrs	APSR_nzcv, fpscr
   1698c:	ble	169f0 <__assert_fail@plt+0x5534>
   16990:	vldr	s10, [pc, #256]	; 16a98 <__assert_fail@plt+0x55dc>
   16994:	vcmpe.f32	s6, s10
   16998:	vmrs	APSR_nzcv, fpscr
   1699c:	bpl	169f0 <__assert_fail@plt+0x5534>
   169a0:	vcmpe.f32	s4, #0.0
   169a4:	vmrs	APSR_nzcv, fpscr
   169a8:	blt	169f0 <__assert_fail@plt+0x5534>
   169ac:	vldr	s10, [r0, #12]
   169b0:	vldr	s12, [pc, #228]	; 16a9c <__assert_fail@plt+0x55e0>
   169b4:	vcmpe.f32	s10, s12
   169b8:	vmrs	APSR_nzcv, fpscr
   169bc:	ble	169f0 <__assert_fail@plt+0x5534>
   169c0:	vadd.f32	s8, s4, s8
   169c4:	vcmpe.f32	s8, s6
   169c8:	vmrs	APSR_nzcv, fpscr
   169cc:	bpl	169f0 <__assert_fail@plt+0x5534>
   169d0:	vldr	s6, [r0, #4]
   169d4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   169d8:	vcmpe.f32	s6, s10
   169dc:	vmrs	APSR_nzcv, fpscr
   169e0:	bhi	169f0 <__assert_fail@plt+0x5534>
   169e4:	vcmpe.f32	s8, s6
   169e8:	vmrs	APSR_nzcv, fpscr
   169ec:	bmi	16a00 <__assert_fail@plt+0x5544>
   169f0:	vldr	s4, [pc, #168]	; 16aa0 <__assert_fail@plt+0x55e4>
   169f4:	movw	r0, #48912	; 0xbf10
   169f8:	movt	r0, #1
   169fc:	str	r0, [r5, #20]
   16a00:	vmul.f32	s4, s4, s0
   16a04:	vcmpe.f32	s4, s2
   16a08:	vmrs	APSR_nzcv, fpscr
   16a0c:	bgt	16a28 <__assert_fail@plt+0x556c>
   16a10:	b	16a84 <__assert_fail@plt+0x55c8>
   16a14:	mov	r0, r1
   16a18:	vmul.f32	s4, s4, s0
   16a1c:	vcmpe.f32	s4, s2
   16a20:	vmrs	APSR_nzcv, fpscr
   16a24:	ble	16a84 <__assert_fail@plt+0x55c8>
   16a28:	vldr	s2, [r0, #4]
   16a2c:	ldrb	r1, [r0, #16]
   16a30:	cmp	r1, #0
   16a34:	vmul.f32	s0, s2, s0
   16a38:	bne	16a44 <__assert_fail@plt+0x5588>
   16a3c:	vldr	s2, [r0, #8]
   16a40:	vmul.f32	s0, s0, s2
   16a44:	vcvt.u32.f32	s0, s0
   16a48:	mov	r0, r5
   16a4c:	vmov	r1, s0
   16a50:	bl	15f6c <__assert_fail@plt+0x4ab0>
   16a54:	cmp	r0, #0
   16a58:	bne	16a84 <__assert_fail@plt+0x55c8>
   16a5c:	ldr	r0, [r5, #36]	; 0x24
   16a60:	cmp	r0, #0
   16a64:	beq	16a7c <__assert_fail@plt+0x55c0>
   16a68:	ldr	r4, [r0, #4]
   16a6c:	bl	12e18 <__assert_fail@plt+0x195c>
   16a70:	cmp	r4, #0
   16a74:	mov	r0, r4
   16a78:	bne	16a68 <__assert_fail@plt+0x55ac>
   16a7c:	mov	r0, #0
   16a80:	str	r0, [r5, #36]	; 0x24
   16a84:	mov	r8, r9
   16a88:	mov	r0, r8
   16a8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a90:	bl	11474 <abort@plt>
   16a94:	stclcc	12, cr12, [ip, #820]	; 0x334
   16a98:	svccc	0x00666666
   16a9c:	svccc	0x008ccccd
   16aa0:	andeq	r0, r0, r0
   16aa4:	b	167f0 <__assert_fail@plt+0x5334>
   16aa8:	vdup.32	q8, r1
   16aac:	mov	r2, #0
   16ab0:	str	r2, [r0, #20]
   16ab4:	str	r2, [r0, #24]
   16ab8:	mov	r2, #1
   16abc:	strb	r2, [r0, #28]
   16ac0:	vst1.32	{d16-d17}, [r0]!
   16ac4:	str	r1, [r0]
   16ac8:	bx	lr
   16acc:	ldrb	r0, [r0, #28]
   16ad0:	bx	lr
   16ad4:	push	{fp, lr}
   16ad8:	mov	fp, sp
   16adc:	ldrb	r3, [r0, #28]
   16ae0:	ldr	r2, [r0, #20]
   16ae4:	eor	lr, r3, #1
   16ae8:	add	r2, r2, lr
   16aec:	and	r3, r2, #3
   16af0:	ldr	ip, [r0, r3, lsl #2]
   16af4:	str	r1, [r0, r3, lsl #2]
   16af8:	str	r3, [r0, #20]
   16afc:	ldr	r1, [r0, #24]
   16b00:	cmp	r3, r1
   16b04:	addeq	r1, r2, lr
   16b08:	andeq	r1, r1, #3
   16b0c:	streq	r1, [r0, #24]
   16b10:	mov	r1, #0
   16b14:	strb	r1, [r0, #28]
   16b18:	mov	r0, ip
   16b1c:	pop	{fp, pc}
   16b20:	push	{fp, lr}
   16b24:	mov	fp, sp
   16b28:	ldrb	r1, [r0, #28]
   16b2c:	cmp	r1, #0
   16b30:	bne	16b6c <__assert_fail@plt+0x56b0>
   16b34:	ldr	r3, [r0, #20]
   16b38:	ldr	r2, [r0, #16]
   16b3c:	ldr	r1, [r0, r3, lsl #2]
   16b40:	str	r2, [r0, r3, lsl #2]
   16b44:	ldr	r2, [r0, #20]
   16b48:	ldr	r3, [r0, #24]
   16b4c:	cmp	r2, r3
   16b50:	moveq	r2, #1
   16b54:	strbeq	r2, [r0, #28]
   16b58:	subne	r2, r2, #1
   16b5c:	andne	r2, r2, #3
   16b60:	strne	r2, [r0, #20]
   16b64:	mov	r0, r1
   16b68:	pop	{fp, pc}
   16b6c:	bl	11474 <abort@plt>
   16b70:	push	{r4, r5, r6, sl, fp, lr}
   16b74:	add	fp, sp, #16
   16b78:	mov	r5, r0
   16b7c:	mov	r0, #0
   16b80:	mov	r4, r1
   16b84:	add	r6, r2, #19
   16b88:	strb	r0, [r2, #20]
   16b8c:	mov	r0, r5
   16b90:	mov	r1, r4
   16b94:	mov	r2, #10
   16b98:	mov	r3, #0
   16b9c:	bl	1ae48 <__assert_fail@plt+0x998c>
   16ba0:	add	r2, r0, r0, lsl #2
   16ba4:	sub	r2, r5, r2, lsl #1
   16ba8:	orr	r2, r2, #48	; 0x30
   16bac:	strb	r2, [r6], #-1
   16bb0:	rsbs	r2, r5, #9
   16bb4:	mov	r5, r0
   16bb8:	rscs	r2, r4, #0
   16bbc:	mov	r4, r1
   16bc0:	bcc	16b8c <__assert_fail@plt+0x56d0>
   16bc4:	add	r0, r6, #1
   16bc8:	pop	{r4, r5, r6, sl, fp, pc}
   16bcc:	sub	sp, sp, #4
   16bd0:	push	{fp, lr}
   16bd4:	mov	fp, sp
   16bd8:	sub	sp, sp, #4
   16bdc:	str	r3, [fp, #8]
   16be0:	tst	r2, #64	; 0x40
   16be4:	mov	r3, #0
   16be8:	ldrne	r3, [fp, #8]
   16bec:	bl	11360 <openat64@plt>
   16bf0:	bl	18c98 <__assert_fail@plt+0x77dc>
   16bf4:	mov	sp, fp
   16bf8:	pop	{fp, lr}
   16bfc:	add	sp, sp, #4
   16c00:	bx	lr
   16c04:	push	{r4, r5, r6, sl, fp, lr}
   16c08:	add	fp, sp, #16
   16c0c:	orr	r2, r2, #18688	; 0x4900
   16c10:	mov	r4, r3
   16c14:	orr	r2, r2, #524288	; 0x80000
   16c18:	bl	16bcc <__assert_fail@plt+0x5710>
   16c1c:	mov	r5, r0
   16c20:	mov	r0, #0
   16c24:	cmp	r5, #0
   16c28:	bmi	16c60 <__assert_fail@plt+0x57a4>
   16c2c:	mov	r0, r5
   16c30:	bl	11414 <fdopendir@plt>
   16c34:	cmp	r0, #0
   16c38:	beq	16c44 <__assert_fail@plt+0x5788>
   16c3c:	str	r5, [r4]
   16c40:	pop	{r4, r5, r6, sl, fp, pc}
   16c44:	bl	11378 <__errno_location@plt>
   16c48:	ldr	r6, [r0]
   16c4c:	mov	r4, r0
   16c50:	mov	r0, r5
   16c54:	bl	11480 <close@plt>
   16c58:	mov	r0, #0
   16c5c:	str	r6, [r4]
   16c60:	pop	{r4, r5, r6, sl, fp, pc}
   16c64:	push	{r4, r5, fp, lr}
   16c68:	add	fp, sp, #8
   16c6c:	cmp	r0, #0
   16c70:	beq	16d04 <__assert_fail@plt+0x5848>
   16c74:	mov	r1, #47	; 0x2f
   16c78:	mov	r4, r0
   16c7c:	bl	113f0 <strrchr@plt>
   16c80:	cmp	r0, #0
   16c84:	mov	r5, r4
   16c88:	addne	r5, r0, #1
   16c8c:	sub	r0, r5, r4
   16c90:	cmp	r0, #7
   16c94:	blt	16ce8 <__assert_fail@plt+0x582c>
   16c98:	movw	r1, #48988	; 0xbf5c
   16c9c:	sub	r0, r5, #7
   16ca0:	mov	r2, #7
   16ca4:	movt	r1, #1
   16ca8:	bl	11468 <strncmp@plt>
   16cac:	cmp	r0, #0
   16cb0:	bne	16ce8 <__assert_fail@plt+0x582c>
   16cb4:	movw	r1, #48996	; 0xbf64
   16cb8:	mov	r0, r5
   16cbc:	mov	r2, #3
   16cc0:	movt	r1, #1
   16cc4:	bl	11468 <strncmp@plt>
   16cc8:	cmp	r0, #0
   16ccc:	beq	16cd8 <__assert_fail@plt+0x581c>
   16cd0:	mov	r4, r5
   16cd4:	b	16ce8 <__assert_fail@plt+0x582c>
   16cd8:	movw	r0, #53616	; 0xd170
   16cdc:	add	r4, r5, #3
   16ce0:	movt	r0, #2
   16ce4:	str	r4, [r0]
   16ce8:	movw	r0, #53620	; 0xd174
   16cec:	movt	r0, #2
   16cf0:	str	r4, [r0]
   16cf4:	movw	r0, #53680	; 0xd1b0
   16cf8:	movt	r0, #2
   16cfc:	str	r4, [r0]
   16d00:	pop	{r4, r5, fp, pc}
   16d04:	movw	r0, #53632	; 0xd180
   16d08:	mov	r1, #55	; 0x37
   16d0c:	mov	r2, #1
   16d10:	movt	r0, #2
   16d14:	ldr	r3, [r0]
   16d18:	movw	r0, #48932	; 0xbf24
   16d1c:	movt	r0, #1
   16d20:	bl	11294 <fwrite@plt>
   16d24:	bl	11474 <abort@plt>
   16d28:	push	{r4, r5, r6, sl, fp, lr}
   16d2c:	add	fp, sp, #16
   16d30:	mov	r4, r0
   16d34:	movw	r0, #53688	; 0xd1b8
   16d38:	movt	r0, #2
   16d3c:	cmp	r4, #0
   16d40:	moveq	r4, r0
   16d44:	bl	11378 <__errno_location@plt>
   16d48:	ldr	r6, [r0]
   16d4c:	mov	r5, r0
   16d50:	mov	r0, r4
   16d54:	mov	r1, #48	; 0x30
   16d58:	bl	19800 <__assert_fail@plt+0x8344>
   16d5c:	str	r6, [r5]
   16d60:	pop	{r4, r5, r6, sl, fp, pc}
   16d64:	movw	r1, #53688	; 0xd1b8
   16d68:	cmp	r0, #0
   16d6c:	movt	r1, #2
   16d70:	movne	r1, r0
   16d74:	ldr	r0, [r1]
   16d78:	bx	lr
   16d7c:	movw	r2, #53688	; 0xd1b8
   16d80:	cmp	r0, #0
   16d84:	movt	r2, #2
   16d88:	movne	r2, r0
   16d8c:	str	r1, [r2]
   16d90:	bx	lr
   16d94:	movw	r3, #53688	; 0xd1b8
   16d98:	cmp	r0, #0
   16d9c:	and	r2, r2, #1
   16da0:	movt	r3, #2
   16da4:	movne	r3, r0
   16da8:	ubfx	r0, r1, #5, #3
   16dac:	and	r1, r1, #31
   16db0:	add	ip, r3, r0, lsl #2
   16db4:	mov	r0, #1
   16db8:	ldr	r3, [ip, #8]
   16dbc:	and	r0, r0, r3, lsr r1
   16dc0:	eor	r2, r0, r2
   16dc4:	eor	r1, r3, r2, lsl r1
   16dc8:	str	r1, [ip, #8]
   16dcc:	bx	lr
   16dd0:	movw	r2, #53688	; 0xd1b8
   16dd4:	cmp	r0, #0
   16dd8:	movt	r2, #2
   16ddc:	movne	r2, r0
   16de0:	ldr	r0, [r2, #4]
   16de4:	str	r1, [r2, #4]
   16de8:	bx	lr
   16dec:	push	{fp, lr}
   16df0:	mov	fp, sp
   16df4:	movw	r3, #53688	; 0xd1b8
   16df8:	cmp	r0, #0
   16dfc:	movt	r3, #2
   16e00:	movne	r3, r0
   16e04:	cmp	r1, #0
   16e08:	mov	r0, #10
   16e0c:	cmpne	r2, #0
   16e10:	str	r0, [r3]
   16e14:	bne	16e1c <__assert_fail@plt+0x5960>
   16e18:	bl	11474 <abort@plt>
   16e1c:	str	r1, [r3, #40]	; 0x28
   16e20:	str	r2, [r3, #44]	; 0x2c
   16e24:	pop	{fp, pc}
   16e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e2c:	add	fp, sp, #28
   16e30:	sub	sp, sp, #20
   16e34:	mov	r7, r0
   16e38:	ldr	r0, [fp, #8]
   16e3c:	movw	r5, #53688	; 0xd1b8
   16e40:	mov	r8, r3
   16e44:	mov	r9, r2
   16e48:	mov	sl, r1
   16e4c:	movt	r5, #2
   16e50:	cmp	r0, #0
   16e54:	movne	r5, r0
   16e58:	bl	11378 <__errno_location@plt>
   16e5c:	ldr	r2, [r5, #40]	; 0x28
   16e60:	ldr	r3, [r5, #44]	; 0x2c
   16e64:	mov	r4, r0
   16e68:	ldm	r5, {r0, r1}
   16e6c:	add	r5, r5, #8
   16e70:	ldr	r6, [r4]
   16e74:	stm	sp, {r0, r1, r5}
   16e78:	mov	r0, r7
   16e7c:	mov	r1, sl
   16e80:	str	r2, [sp, #12]
   16e84:	str	r3, [sp, #16]
   16e88:	mov	r2, r9
   16e8c:	mov	r3, r8
   16e90:	bl	16ea0 <__assert_fail@plt+0x59e4>
   16e94:	str	r6, [r4]
   16e98:	sub	sp, fp, #28
   16e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ea4:	add	fp, sp, #28
   16ea8:	sub	sp, sp, #156	; 0x9c
   16eac:	str	r0, [fp, #-84]	; 0xffffffac
   16eb0:	add	r0, r2, #1
   16eb4:	mov	r6, r1
   16eb8:	mov	r7, r3
   16ebc:	str	r2, [fp, #-80]	; 0xffffffb0
   16ec0:	str	r0, [sp, #80]	; 0x50
   16ec4:	ldr	r0, [fp, #12]
   16ec8:	and	r1, r0, #1
   16ecc:	str	r1, [sp, #36]	; 0x24
   16ed0:	and	r1, r0, #4
   16ed4:	str	r1, [sp, #32]
   16ed8:	ubfx	r8, r0, #1, #1
   16edc:	bl	112ac <__ctype_get_mb_cur_max@plt>
   16ee0:	str	r0, [sp, #40]	; 0x28
   16ee4:	ldr	r0, [fp, #24]
   16ee8:	ldr	r4, [fp, #8]
   16eec:	mov	r1, #0
   16ef0:	str	r1, [fp, #-52]	; 0xffffffcc
   16ef4:	mov	r1, #0
   16ef8:	str	r1, [sp, #60]	; 0x3c
   16efc:	mov	r1, #1
   16f00:	str	r1, [sp, #84]	; 0x54
   16f04:	str	r0, [sp, #76]	; 0x4c
   16f08:	ldr	r0, [fp, #20]
   16f0c:	str	r0, [sp, #72]	; 0x48
   16f10:	mov	r0, #0
   16f14:	str	r0, [sp, #56]	; 0x38
   16f18:	mov	r0, #0
   16f1c:	str	r0, [fp, #-88]	; 0xffffffa8
   16f20:	mov	r0, #0
   16f24:	str	r0, [fp, #-72]	; 0xffffffb8
   16f28:	mov	r0, #0
   16f2c:	cmp	r4, #10
   16f30:	bhi	1824c <__assert_fail@plt+0x6d90>
   16f34:	add	r1, pc, #24
   16f38:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f3c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16f40:	mov	r5, r6
   16f44:	mov	r9, #0
   16f48:	mov	r2, #1
   16f4c:	mov	r3, #0
   16f50:	ldr	pc, [r1, r4, lsl #2]
   16f54:	andeq	r7, r1, ip, lsl r0
   16f58:	andeq	r7, r1, r8, asr r0
   16f5c:	andeq	r7, r1, ip, lsr #32
   16f60:	andeq	r7, r1, r4, lsl r0
   16f64:	andeq	r7, r1, ip, asr #32
   16f68:	strheq	r7, [r1], -r0
   16f6c:	andeq	r7, r1, ip, lsr r0
   16f70:	andeq	r7, r1, r8, lsr #6
   16f74:	andeq	r6, r1, r0, lsl #31
   16f78:	andeq	r6, r1, r0, lsl #31
   16f7c:			; <UNDEFINED> instruction: 0x000171b8
   16f80:	movw	r6, #49078	; 0xbfb6
   16f84:	mov	r0, #0
   16f88:	mov	r2, #5
   16f8c:	movt	r6, #1
   16f90:	mov	r1, r6
   16f94:	bl	1124c <dcgettext@plt>
   16f98:	cmp	r0, r6
   16f9c:	str	r0, [sp, #72]	; 0x48
   16fa0:	bne	17190 <__assert_fail@plt+0x5cd4>
   16fa4:	bl	1ac58 <__assert_fail@plt+0x979c>
   16fa8:	ldrb	r1, [r0]
   16fac:	and	r1, r1, #223	; 0xdf
   16fb0:	cmp	r1, #71	; 0x47
   16fb4:	beq	17110 <__assert_fail@plt+0x5c54>
   16fb8:	cmp	r1, #85	; 0x55
   16fbc:	bne	17174 <__assert_fail@plt+0x5cb8>
   16fc0:	ldrb	r1, [r0, #1]
   16fc4:	and	r1, r1, #223	; 0xdf
   16fc8:	cmp	r1, #84	; 0x54
   16fcc:	bne	17174 <__assert_fail@plt+0x5cb8>
   16fd0:	ldrb	r1, [r0, #2]
   16fd4:	and	r1, r1, #223	; 0xdf
   16fd8:	cmp	r1, #70	; 0x46
   16fdc:	bne	17174 <__assert_fail@plt+0x5cb8>
   16fe0:	ldrb	r1, [r0, #3]
   16fe4:	cmp	r1, #45	; 0x2d
   16fe8:	bne	17174 <__assert_fail@plt+0x5cb8>
   16fec:	ldrb	r1, [r0, #4]
   16ff0:	cmp	r1, #56	; 0x38
   16ff4:	bne	17174 <__assert_fail@plt+0x5cb8>
   16ff8:	ldrb	r0, [r0, #5]
   16ffc:	cmp	r0, #0
   17000:	movw	r0, #49082	; 0xbfba
   17004:	movt	r0, #1
   17008:	str	r0, [sp, #72]	; 0x48
   1700c:	bne	17174 <__assert_fail@plt+0x5cb8>
   17010:	b	17190 <__assert_fail@plt+0x5cd4>
   17014:	mov	r0, #1
   17018:	b	17058 <__assert_fail@plt+0x5b9c>
   1701c:	mov	r4, #0
   17020:	mov	r9, #0
   17024:	mov	r2, r0
   17028:	b	170a8 <__assert_fail@plt+0x5bec>
   1702c:	tst	r8, #1
   17030:	bne	17058 <__assert_fail@plt+0x5b9c>
   17034:	mov	r2, r0
   17038:	b	17080 <__assert_fail@plt+0x5bc4>
   1703c:	mov	r0, #1
   17040:	mov	r9, #0
   17044:	mov	r4, #5
   17048:	b	170c4 <__assert_fail@plt+0x5c08>
   1704c:	mov	r2, #1
   17050:	tst	r8, #1
   17054:	beq	17080 <__assert_fail@plt+0x5bc4>
   17058:	mov	r1, #1
   1705c:	mov	r9, #0
   17060:	mov	r4, #2
   17064:	mov	r2, r0
   17068:	mov	r3, #1
   1706c:	str	r1, [fp, #-72]	; 0xffffffb8
   17070:	movw	r1, #49080	; 0xbfb8
   17074:	movt	r1, #1
   17078:	str	r1, [fp, #-88]	; 0xffffffa8
   1707c:	b	17328 <__assert_fail@plt+0x5e6c>
   17080:	cmp	r5, #0
   17084:	mov	r9, #1
   17088:	mov	r4, #2
   1708c:	movne	r0, #39	; 0x27
   17090:	strbne	r0, [ip]
   17094:	movw	r0, #49080	; 0xbfb8
   17098:	movt	r0, #1
   1709c:	str	r0, [fp, #-88]	; 0xffffffa8
   170a0:	mov	r0, #1
   170a4:	str	r0, [fp, #-72]	; 0xffffffb8
   170a8:	mov	r3, #0
   170ac:	b	17328 <__assert_fail@plt+0x5e6c>
   170b0:	mov	r4, #5
   170b4:	tst	r8, #1
   170b8:	beq	170e0 <__assert_fail@plt+0x5c24>
   170bc:	mov	r0, #1
   170c0:	mov	r9, #0
   170c4:	str	r0, [fp, #-72]	; 0xffffffb8
   170c8:	movw	r0, #49076	; 0xbfb4
   170cc:	mov	r2, #1
   170d0:	mov	r3, #1
   170d4:	movt	r0, #1
   170d8:	str	r0, [fp, #-88]	; 0xffffffa8
   170dc:	b	17328 <__assert_fail@plt+0x5e6c>
   170e0:	cmp	r5, #0
   170e4:	mov	r3, #0
   170e8:	mov	r9, #1
   170ec:	mov	r2, #1
   170f0:	movne	r0, #34	; 0x22
   170f4:	strbne	r0, [ip]
   170f8:	movw	r0, #49076	; 0xbfb4
   170fc:	movt	r0, #1
   17100:	str	r0, [fp, #-88]	; 0xffffffa8
   17104:	mov	r0, #1
   17108:	str	r0, [fp, #-72]	; 0xffffffb8
   1710c:	b	17328 <__assert_fail@plt+0x5e6c>
   17110:	ldrb	r1, [r0, #1]
   17114:	and	r1, r1, #223	; 0xdf
   17118:	cmp	r1, #66	; 0x42
   1711c:	bne	17174 <__assert_fail@plt+0x5cb8>
   17120:	ldrb	r1, [r0, #2]
   17124:	cmp	r1, #49	; 0x31
   17128:	bne	17174 <__assert_fail@plt+0x5cb8>
   1712c:	ldrb	r1, [r0, #3]
   17130:	cmp	r1, #56	; 0x38
   17134:	bne	17174 <__assert_fail@plt+0x5cb8>
   17138:	ldrb	r1, [r0, #4]
   1713c:	cmp	r1, #48	; 0x30
   17140:	bne	17174 <__assert_fail@plt+0x5cb8>
   17144:	ldrb	r1, [r0, #5]
   17148:	cmp	r1, #51	; 0x33
   1714c:	bne	17174 <__assert_fail@plt+0x5cb8>
   17150:	ldrb	r1, [r0, #6]
   17154:	cmp	r1, #48	; 0x30
   17158:	bne	17174 <__assert_fail@plt+0x5cb8>
   1715c:	ldrb	r0, [r0, #7]
   17160:	cmp	r0, #0
   17164:	movw	r0, #49090	; 0xbfc2
   17168:	movt	r0, #1
   1716c:	str	r0, [sp, #72]	; 0x48
   17170:	beq	17190 <__assert_fail@plt+0x5cd4>
   17174:	movw	r1, #49076	; 0xbfb4
   17178:	movw	r0, #49080	; 0xbfb8
   1717c:	cmp	r4, #9
   17180:	movt	r1, #1
   17184:	movt	r0, #1
   17188:	moveq	r0, r1
   1718c:	str	r0, [sp, #72]	; 0x48
   17190:	movw	r6, #49080	; 0xbfb8
   17194:	mov	r0, #0
   17198:	mov	r2, #5
   1719c:	movt	r6, #1
   171a0:	mov	r1, r6
   171a4:	bl	1124c <dcgettext@plt>
   171a8:	cmp	r0, r6
   171ac:	str	r0, [sp, #76]	; 0x4c
   171b0:	beq	171fc <__assert_fail@plt+0x5d40>
   171b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   171b8:	mov	r9, #0
   171bc:	tst	r8, #1
   171c0:	bne	17304 <__assert_fail@plt+0x5e48>
   171c4:	ldr	r0, [sp, #72]	; 0x48
   171c8:	ldrb	r0, [r0]
   171cc:	cmp	r0, #0
   171d0:	beq	17304 <__assert_fail@plt+0x5e48>
   171d4:	ldr	r1, [sp, #72]	; 0x48
   171d8:	mov	r9, #0
   171dc:	add	r1, r1, #1
   171e0:	cmp	r9, r5
   171e4:	strbcc	r0, [ip, r9]
   171e8:	ldrb	r0, [r1, r9]
   171ec:	add	r9, r9, #1
   171f0:	cmp	r0, #0
   171f4:	bne	171e0 <__assert_fail@plt+0x5d24>
   171f8:	b	17304 <__assert_fail@plt+0x5e48>
   171fc:	bl	1ac58 <__assert_fail@plt+0x979c>
   17200:	ldrb	r1, [r0]
   17204:	and	r1, r1, #223	; 0xdf
   17208:	cmp	r1, #71	; 0x47
   1720c:	beq	1727c <__assert_fail@plt+0x5dc0>
   17210:	ldr	ip, [fp, #-84]	; 0xffffffac
   17214:	cmp	r1, #85	; 0x55
   17218:	bne	172d8 <__assert_fail@plt+0x5e1c>
   1721c:	ldrb	r1, [r0, #1]
   17220:	and	r1, r1, #223	; 0xdf
   17224:	cmp	r1, #84	; 0x54
   17228:	bne	172d8 <__assert_fail@plt+0x5e1c>
   1722c:	ldrb	r1, [r0, #2]
   17230:	and	r1, r1, #223	; 0xdf
   17234:	cmp	r1, #70	; 0x46
   17238:	bne	172d8 <__assert_fail@plt+0x5e1c>
   1723c:	ldrb	r1, [r0, #3]
   17240:	cmp	r1, #45	; 0x2d
   17244:	bne	172d8 <__assert_fail@plt+0x5e1c>
   17248:	ldrb	r1, [r0, #4]
   1724c:	cmp	r1, #56	; 0x38
   17250:	bne	172d8 <__assert_fail@plt+0x5e1c>
   17254:	ldrb	r0, [r0, #5]
   17258:	cmp	r0, #0
   1725c:	bne	172d8 <__assert_fail@plt+0x5e1c>
   17260:	movw	r0, #49086	; 0xbfbe
   17264:	movt	r0, #1
   17268:	str	r0, [sp, #76]	; 0x4c
   1726c:	mov	r9, #0
   17270:	tst	r8, #1
   17274:	beq	171c4 <__assert_fail@plt+0x5d08>
   17278:	b	17304 <__assert_fail@plt+0x5e48>
   1727c:	ldrb	r1, [r0, #1]
   17280:	ldr	ip, [fp, #-84]	; 0xffffffac
   17284:	and	r1, r1, #223	; 0xdf
   17288:	cmp	r1, #66	; 0x42
   1728c:	bne	172d8 <__assert_fail@plt+0x5e1c>
   17290:	ldrb	r1, [r0, #2]
   17294:	cmp	r1, #49	; 0x31
   17298:	bne	172d8 <__assert_fail@plt+0x5e1c>
   1729c:	ldrb	r1, [r0, #3]
   172a0:	cmp	r1, #56	; 0x38
   172a4:	bne	172d8 <__assert_fail@plt+0x5e1c>
   172a8:	ldrb	r1, [r0, #4]
   172ac:	cmp	r1, #48	; 0x30
   172b0:	bne	172d8 <__assert_fail@plt+0x5e1c>
   172b4:	ldrb	r1, [r0, #5]
   172b8:	cmp	r1, #51	; 0x33
   172bc:	bne	172d8 <__assert_fail@plt+0x5e1c>
   172c0:	ldrb	r1, [r0, #6]
   172c4:	cmp	r1, #48	; 0x30
   172c8:	bne	172d8 <__assert_fail@plt+0x5e1c>
   172cc:	ldrb	r0, [r0, #7]
   172d0:	cmp	r0, #0
   172d4:	beq	180ec <__assert_fail@plt+0x6c30>
   172d8:	movw	r0, #49080	; 0xbfb8
   172dc:	cmp	r4, #9
   172e0:	movt	r0, #1
   172e4:	mov	r1, r0
   172e8:	movw	r0, #49076	; 0xbfb4
   172ec:	movt	r0, #1
   172f0:	moveq	r1, r0
   172f4:	str	r1, [sp, #76]	; 0x4c
   172f8:	mov	r9, #0
   172fc:	tst	r8, #1
   17300:	beq	171c4 <__assert_fail@plt+0x5d08>
   17304:	ldr	r6, [sp, #76]	; 0x4c
   17308:	mov	r0, r6
   1730c:	bl	11348 <strlen@plt>
   17310:	ldr	ip, [fp, #-84]	; 0xffffffac
   17314:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17318:	str	r0, [fp, #-72]	; 0xffffffb8
   1731c:	str	r6, [fp, #-88]	; 0xffffffa8
   17320:	mov	r2, #1
   17324:	mov	r3, r8
   17328:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1732c:	str	r4, [fp, #-64]	; 0xffffffc0
   17330:	mov	sl, #0
   17334:	str	r3, [fp, #-76]	; 0xffffffb4
   17338:	str	r2, [sp, #88]	; 0x58
   1733c:	cmp	r0, #0
   17340:	movwne	r0, #1
   17344:	and	r1, r0, r3
   17348:	and	r1, r2, r1
   1734c:	str	r1, [sp, #48]	; 0x30
   17350:	sub	r1, r4, #2
   17354:	clz	r1, r1
   17358:	lsr	r1, r1, #5
   1735c:	and	r1, r1, r3
   17360:	str	r1, [sp, #44]	; 0x2c
   17364:	subs	r1, r4, #2
   17368:	eor	r4, r3, #1
   1736c:	movwne	r1, #1
   17370:	str	r4, [sp, #92]	; 0x5c
   17374:	orr	r4, r1, r4
   17378:	and	r1, r1, r2
   1737c:	and	r0, r0, r1
   17380:	str	r4, [sp, #64]	; 0x40
   17384:	ldr	r4, [sp, #84]	; 0x54
   17388:	str	r0, [fp, #-60]	; 0xffffffc4
   1738c:	orr	r0, r1, r3
   17390:	ldr	r1, [fp, #16]
   17394:	eor	r0, r0, #1
   17398:	clz	r1, r1
   1739c:	lsr	r1, r1, #5
   173a0:	orr	r0, r1, r0
   173a4:	str	r0, [fp, #-68]	; 0xffffffbc
   173a8:	eor	r0, r2, #1
   173ac:	str	r0, [sp, #52]	; 0x34
   173b0:	cmn	r7, #1
   173b4:	beq	173c4 <__assert_fail@plt+0x5f08>
   173b8:	cmp	sl, r7
   173bc:	bne	173d0 <__assert_fail@plt+0x5f14>
   173c0:	b	18064 <__assert_fail@plt+0x6ba8>
   173c4:	ldrb	r0, [lr, sl]
   173c8:	cmp	r0, #0
   173cc:	beq	1806c <__assert_fail@plt+0x6bb0>
   173d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   173d4:	cmp	r0, #0
   173d8:	beq	17438 <__assert_fail@plt+0x5f7c>
   173dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   173e0:	mov	r6, r5
   173e4:	add	r5, sl, r0
   173e8:	cmp	r0, #2
   173ec:	bcc	17458 <__assert_fail@plt+0x5f9c>
   173f0:	mov	r0, #0
   173f4:	cmn	r7, #1
   173f8:	str	r0, [fp, #-56]	; 0xffffffc8
   173fc:	bne	17414 <__assert_fail@plt+0x5f58>
   17400:	mov	r0, lr
   17404:	bl	11348 <strlen@plt>
   17408:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1740c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17410:	mov	r7, r0
   17414:	cmp	r5, r7
   17418:	bls	17468 <__assert_fail@plt+0x5fac>
   1741c:	mov	r0, #0
   17420:	mov	r5, r6
   17424:	str	r0, [fp, #-48]	; 0xffffffd0
   17428:	ldrb	r6, [lr, sl]
   1742c:	cmp	r6, #126	; 0x7e
   17430:	bls	174b8 <__assert_fail@plt+0x5ffc>
   17434:	b	17a14 <__assert_fail@plt+0x6558>
   17438:	mov	r0, #0
   1743c:	str	r0, [fp, #-56]	; 0xffffffc8
   17440:	mov	r0, #0
   17444:	str	r0, [fp, #-48]	; 0xffffffd0
   17448:	ldrb	r6, [lr, sl]
   1744c:	cmp	r6, #126	; 0x7e
   17450:	bls	174b8 <__assert_fail@plt+0x5ffc>
   17454:	b	17a14 <__assert_fail@plt+0x6558>
   17458:	mov	r0, #0
   1745c:	str	r0, [fp, #-56]	; 0xffffffc8
   17460:	cmp	r5, r7
   17464:	bhi	1741c <__assert_fail@plt+0x5f60>
   17468:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1746c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17470:	add	r0, lr, sl
   17474:	bl	1133c <bcmp@plt>
   17478:	ldr	r2, [sp, #92]	; 0x5c
   1747c:	cmp	r0, #0
   17480:	mov	r1, r0
   17484:	mov	r5, r6
   17488:	movwne	r1, #1
   1748c:	orr	r1, r1, r2
   17490:	tst	r1, #1
   17494:	beq	1812c <__assert_fail@plt+0x6c70>
   17498:	ldr	ip, [fp, #-84]	; 0xffffffac
   1749c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   174a0:	clz	r0, r0
   174a4:	lsr	r0, r0, #5
   174a8:	str	r0, [fp, #-48]	; 0xffffffd0
   174ac:	ldrb	r6, [lr, sl]
   174b0:	cmp	r6, #126	; 0x7e
   174b4:	bhi	17a14 <__assert_fail@plt+0x6558>
   174b8:	add	r3, pc, #16
   174bc:	mov	r8, #1
   174c0:	mov	r2, #110	; 0x6e
   174c4:	mov	r0, #97	; 0x61
   174c8:	mov	r1, #0
   174cc:	ldr	pc, [r3, r6, lsl #2]
   174d0:	andeq	r7, r1, ip, asr #15
   174d4:	andeq	r7, r1, r4, lsl sl
   174d8:	andeq	r7, r1, r4, lsl sl
   174dc:	andeq	r7, r1, r4, lsl sl
   174e0:	andeq	r7, r1, r4, lsl sl
   174e4:	andeq	r7, r1, r4, lsl sl
   174e8:	andeq	r7, r1, r4, lsl sl
   174ec:	andeq	r7, r1, r8, asr #21
   174f0:	andeq	r7, r1, ip, lsr #15
   174f4:	andeq	r7, r1, r4, lsr #15
   174f8:			; <UNDEFINED> instruction: 0x000177b8
   174fc:	andeq	r7, r1, r8, ror #17
   17500:	muleq	r1, ip, r7
   17504:			; <UNDEFINED> instruction: 0x000177b4
   17508:	andeq	r7, r1, r4, lsl sl
   1750c:	andeq	r7, r1, r4, lsl sl
   17510:	andeq	r7, r1, r4, lsl sl
   17514:	andeq	r7, r1, r4, lsl sl
   17518:	andeq	r7, r1, r4, lsl sl
   1751c:	andeq	r7, r1, r4, lsl sl
   17520:	andeq	r7, r1, r4, lsl sl
   17524:	andeq	r7, r1, r4, lsl sl
   17528:	andeq	r7, r1, r4, lsl sl
   1752c:	andeq	r7, r1, r4, lsl sl
   17530:	andeq	r7, r1, r4, lsl sl
   17534:	andeq	r7, r1, r4, lsl sl
   17538:	andeq	r7, r1, r4, lsl sl
   1753c:	andeq	r7, r1, r4, lsl sl
   17540:	andeq	r7, r1, r4, lsl sl
   17544:	andeq	r7, r1, r4, lsl sl
   17548:	andeq	r7, r1, r4, lsl sl
   1754c:	andeq	r7, r1, r4, lsl sl
   17550:	andeq	r7, r1, r0, asr #14
   17554:	andeq	r7, r1, r4, asr #14
   17558:	andeq	r7, r1, r4, asr #14
   1755c:	andeq	r7, r1, r4, lsr r7
   17560:	andeq	r7, r1, r4, asr #14
   17564:	andeq	r7, r1, ip, asr #13
   17568:	andeq	r7, r1, r4, asr #14
   1756c:	strdeq	r7, [r1], -r0
   17570:	andeq	r7, r1, r4, asr #14
   17574:	andeq	r7, r1, r4, asr #14
   17578:	andeq	r7, r1, r4, asr #14
   1757c:	andeq	r7, r1, ip, asr #13
   17580:	andeq	r7, r1, ip, asr #13
   17584:	andeq	r7, r1, ip, asr #13
   17588:	andeq	r7, r1, ip, asr #13
   1758c:	andeq	r7, r1, ip, asr #13
   17590:	andeq	r7, r1, ip, asr #13
   17594:	andeq	r7, r1, ip, asr #13
   17598:	andeq	r7, r1, ip, asr #13
   1759c:	andeq	r7, r1, ip, asr #13
   175a0:	andeq	r7, r1, ip, asr #13
   175a4:	andeq	r7, r1, ip, asr #13
   175a8:	andeq	r7, r1, ip, asr #13
   175ac:	andeq	r7, r1, ip, asr #13
   175b0:	andeq	r7, r1, ip, asr #13
   175b4:	andeq	r7, r1, ip, asr #13
   175b8:	andeq	r7, r1, ip, asr #13
   175bc:	andeq	r7, r1, r4, asr #14
   175c0:	andeq	r7, r1, r4, asr #14
   175c4:	andeq	r7, r1, r4, asr #14
   175c8:	andeq	r7, r1, r4, asr #14
   175cc:			; <UNDEFINED> instruction: 0x000178b4
   175d0:	andeq	r7, r1, r4, lsl sl
   175d4:	andeq	r7, r1, ip, asr #13
   175d8:	andeq	r7, r1, ip, asr #13
   175dc:	andeq	r7, r1, ip, asr #13
   175e0:	andeq	r7, r1, ip, asr #13
   175e4:	andeq	r7, r1, ip, asr #13
   175e8:	andeq	r7, r1, ip, asr #13
   175ec:	andeq	r7, r1, ip, asr #13
   175f0:	andeq	r7, r1, ip, asr #13
   175f4:	andeq	r7, r1, ip, asr #13
   175f8:	andeq	r7, r1, ip, asr #13
   175fc:	andeq	r7, r1, ip, asr #13
   17600:	andeq	r7, r1, ip, asr #13
   17604:	andeq	r7, r1, ip, asr #13
   17608:	andeq	r7, r1, ip, asr #13
   1760c:	andeq	r7, r1, ip, asr #13
   17610:	andeq	r7, r1, ip, asr #13
   17614:	andeq	r7, r1, ip, asr #13
   17618:	andeq	r7, r1, ip, asr #13
   1761c:	andeq	r7, r1, ip, asr #13
   17620:	andeq	r7, r1, ip, asr #13
   17624:	andeq	r7, r1, ip, asr #13
   17628:	andeq	r7, r1, ip, asr #13
   1762c:	andeq	r7, r1, ip, asr #13
   17630:	andeq	r7, r1, ip, asr #13
   17634:	andeq	r7, r1, ip, asr #13
   17638:	andeq	r7, r1, ip, asr #13
   1763c:	andeq	r7, r1, r4, asr #14
   17640:	andeq	r7, r1, r8, ror r7
   17644:	andeq	r7, r1, ip, asr #13
   17648:	andeq	r7, r1, r4, asr #14
   1764c:	andeq	r7, r1, ip, asr #13
   17650:	andeq	r7, r1, r4, asr #14
   17654:	andeq	r7, r1, ip, asr #13
   17658:	andeq	r7, r1, ip, asr #13
   1765c:	andeq	r7, r1, ip, asr #13
   17660:	andeq	r7, r1, ip, asr #13
   17664:	andeq	r7, r1, ip, asr #13
   17668:	andeq	r7, r1, ip, asr #13
   1766c:	andeq	r7, r1, ip, asr #13
   17670:	andeq	r7, r1, ip, asr #13
   17674:	andeq	r7, r1, ip, asr #13
   17678:	andeq	r7, r1, ip, asr #13
   1767c:	andeq	r7, r1, ip, asr #13
   17680:	andeq	r7, r1, ip, asr #13
   17684:	andeq	r7, r1, ip, asr #13
   17688:	andeq	r7, r1, ip, asr #13
   1768c:	andeq	r7, r1, ip, asr #13
   17690:	andeq	r7, r1, ip, asr #13
   17694:	andeq	r7, r1, ip, asr #13
   17698:	andeq	r7, r1, ip, asr #13
   1769c:	andeq	r7, r1, ip, asr #13
   176a0:	andeq	r7, r1, ip, asr #13
   176a4:	andeq	r7, r1, ip, asr #13
   176a8:	andeq	r7, r1, ip, asr #13
   176ac:	andeq	r7, r1, ip, asr #13
   176b0:	andeq	r7, r1, ip, asr #13
   176b4:	andeq	r7, r1, ip, asr #13
   176b8:	andeq	r7, r1, ip, asr #13
   176bc:	andeq	r7, r1, ip, lsl #14
   176c0:	andeq	r7, r1, r4, asr #14
   176c4:	andeq	r7, r1, ip, lsl #14
   176c8:	andeq	r7, r1, r4, lsr r7
   176cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   176d0:	tst	r0, #1
   176d4:	bne	1798c <__assert_fail@plt+0x64d0>
   176d8:	ldr	r1, [fp, #16]
   176dc:	ubfx	r0, r6, #5, #3
   176e0:	mov	r2, #1
   176e4:	ldr	r0, [r1, r0, lsl #2]
   176e8:	and	r1, r6, #31
   176ec:	tst	r0, r2, lsl r1
   176f0:	beq	1798c <__assert_fail@plt+0x64d0>
   176f4:	mov	r0, r6
   176f8:	mov	r1, r8
   176fc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17700:	tst	r2, #1
   17704:	beq	179ac <__assert_fail@plt+0x64f0>
   17708:	b	18108 <__assert_fail@plt+0x6c4c>
   1770c:	cmp	r7, #1
   17710:	beq	17734 <__assert_fail@plt+0x6278>
   17714:	mov	r8, #0
   17718:	cmn	r7, #1
   1771c:	bne	17978 <__assert_fail@plt+0x64bc>
   17720:	ldrb	r0, [lr, #1]
   17724:	cmp	r0, #0
   17728:	beq	17734 <__assert_fail@plt+0x6278>
   1772c:	mvn	r7, #0
   17730:	b	17978 <__assert_fail@plt+0x64bc>
   17734:	mov	r8, #0
   17738:	cmp	sl, #0
   1773c:	bne	17978 <__assert_fail@plt+0x64bc>
   17740:	mov	r1, #1
   17744:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17748:	cmp	r0, #2
   1774c:	bne	17764 <__assert_fail@plt+0x62a8>
   17750:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17754:	mov	r8, r1
   17758:	tst	r0, #1
   1775c:	beq	176cc <__assert_fail@plt+0x6210>
   17760:	b	18108 <__assert_fail@plt+0x6c4c>
   17764:	mov	r8, r1
   17768:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1776c:	tst	r0, #1
   17770:	beq	176d8 <__assert_fail@plt+0x621c>
   17774:	b	1798c <__assert_fail@plt+0x64d0>
   17778:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1777c:	cmp	r0, #2
   17780:	bne	17a40 <__assert_fail@plt+0x6584>
   17784:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17788:	tst	r0, #1
   1778c:	bne	18108 <__assert_fail@plt+0x6c4c>
   17790:	mov	r0, #0
   17794:	str	r0, [fp, #-56]	; 0xffffffc8
   17798:	b	17a58 <__assert_fail@plt+0x659c>
   1779c:	mov	r0, #102	; 0x66
   177a0:	b	17ac8 <__assert_fail@plt+0x660c>
   177a4:	mov	r2, #116	; 0x74
   177a8:	b	177b8 <__assert_fail@plt+0x62fc>
   177ac:	mov	r0, #98	; 0x62
   177b0:	b	17ac8 <__assert_fail@plt+0x660c>
   177b4:	mov	r2, #114	; 0x72
   177b8:	ldr	r0, [sp, #64]	; 0x40
   177bc:	tst	r0, #1
   177c0:	mov	r0, r2
   177c4:	bne	17ac8 <__assert_fail@plt+0x660c>
   177c8:	b	18108 <__assert_fail@plt+0x6c4c>
   177cc:	ldr	r0, [sp, #88]	; 0x58
   177d0:	tst	r0, #1
   177d4:	beq	17ae8 <__assert_fail@plt+0x662c>
   177d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   177dc:	tst	r0, #1
   177e0:	bne	18244 <__assert_fail@plt+0x6d88>
   177e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   177e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   177ec:	subs	r0, r0, #2
   177f0:	movwne	r0, #1
   177f4:	orr	r0, r0, r1
   177f8:	tst	r0, #1
   177fc:	bne	17838 <__assert_fail@plt+0x637c>
   17800:	cmp	r9, r5
   17804:	movcc	r0, #39	; 0x27
   17808:	strbcc	r0, [ip, r9]
   1780c:	add	r0, r9, #1
   17810:	cmp	r0, r5
   17814:	movcc	r1, #36	; 0x24
   17818:	strbcc	r1, [ip, r0]
   1781c:	add	r0, r9, #2
   17820:	add	r9, r9, #3
   17824:	cmp	r0, r5
   17828:	movcc	r1, #39	; 0x27
   1782c:	strbcc	r1, [ip, r0]
   17830:	mov	r0, #1
   17834:	str	r0, [fp, #-52]	; 0xffffffcc
   17838:	mov	r1, #1
   1783c:	cmp	r9, r5
   17840:	mov	r8, #0
   17844:	mov	r6, #48	; 0x30
   17848:	str	r1, [fp, #-56]	; 0xffffffc8
   1784c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17850:	movcc	r0, #92	; 0x5c
   17854:	strbcc	r0, [ip, r9]
   17858:	add	r0, r9, #1
   1785c:	cmp	r1, #2
   17860:	beq	17cb4 <__assert_fail@plt+0x67f8>
   17864:	add	r1, sl, #1
   17868:	cmp	r1, r7
   1786c:	bcs	17cb4 <__assert_fail@plt+0x67f8>
   17870:	ldrb	r1, [lr, r1]
   17874:	sub	r1, r1, #48	; 0x30
   17878:	uxtb	r1, r1
   1787c:	cmp	r1, #9
   17880:	bhi	17cb4 <__assert_fail@plt+0x67f8>
   17884:	cmp	r0, r5
   17888:	movcc	r1, #48	; 0x30
   1788c:	strbcc	r1, [ip, r0]
   17890:	add	r0, r9, #2
   17894:	add	r9, r9, #3
   17898:	cmp	r0, r5
   1789c:	movcc	r1, #48	; 0x30
   178a0:	strbcc	r1, [ip, r0]
   178a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   178a8:	tst	r0, #1
   178ac:	beq	176d8 <__assert_fail@plt+0x621c>
   178b0:	b	1798c <__assert_fail@plt+0x64d0>
   178b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   178b8:	mov	r6, #63	; 0x3f
   178bc:	cmp	r0, #5
   178c0:	beq	17cc8 <__assert_fail@plt+0x680c>
   178c4:	mov	r1, #0
   178c8:	cmp	r0, #2
   178cc:	str	r1, [fp, #-56]	; 0xffffffc8
   178d0:	bne	17d90 <__assert_fail@plt+0x68d4>
   178d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   178d8:	mov	r8, #0
   178dc:	tst	r0, #1
   178e0:	beq	176cc <__assert_fail@plt+0x6210>
   178e4:	b	18108 <__assert_fail@plt+0x6c4c>
   178e8:	mov	r0, #118	; 0x76
   178ec:	b	17ac8 <__assert_fail@plt+0x660c>
   178f0:	mov	r0, #1
   178f4:	mov	r6, #39	; 0x27
   178f8:	str	r0, [sp, #60]	; 0x3c
   178fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17900:	cmp	r0, #2
   17904:	bne	17b08 <__assert_fail@plt+0x664c>
   17908:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1790c:	tst	r0, #1
   17910:	bne	18108 <__assert_fail@plt+0x6c4c>
   17914:	ldr	r2, [sp, #56]	; 0x38
   17918:	clz	r1, r5
   1791c:	mov	r8, #1
   17920:	lsr	r1, r1, #5
   17924:	cmp	r2, #0
   17928:	mov	r0, r2
   1792c:	movwne	r0, #1
   17930:	orrs	r0, r0, r1
   17934:	moveq	r2, r5
   17938:	moveq	r5, r0
   1793c:	cmp	r9, r5
   17940:	str	r2, [sp, #56]	; 0x38
   17944:	movcc	r0, #39	; 0x27
   17948:	strbcc	r0, [ip, r9]
   1794c:	add	r0, r9, #1
   17950:	cmp	r0, r5
   17954:	movcc	r1, #92	; 0x5c
   17958:	strbcc	r1, [ip, r0]
   1795c:	add	r0, r9, #2
   17960:	add	r9, r9, #3
   17964:	cmp	r0, r5
   17968:	movcc	r1, #39	; 0x27
   1796c:	strbcc	r1, [ip, r0]
   17970:	mov	r0, #0
   17974:	str	r0, [fp, #-52]	; 0xffffffcc
   17978:	mov	r0, #0
   1797c:	str	r0, [fp, #-56]	; 0xffffffc8
   17980:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17984:	tst	r0, #1
   17988:	beq	176d8 <__assert_fail@plt+0x621c>
   1798c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17990:	mov	r1, r8
   17994:	cmp	r0, #0
   17998:	mov	r0, r6
   1799c:	beq	17a60 <__assert_fail@plt+0x65a4>
   179a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   179a4:	tst	r2, #1
   179a8:	bne	18108 <__assert_fail@plt+0x6c4c>
   179ac:	ldr	r2, [fp, #-64]	; 0xffffffc0
   179b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   179b4:	subs	r2, r2, #2
   179b8:	movwne	r2, #1
   179bc:	orr	r2, r2, r3
   179c0:	tst	r2, #1
   179c4:	bne	17a00 <__assert_fail@plt+0x6544>
   179c8:	cmp	r9, r5
   179cc:	movcc	r2, #39	; 0x27
   179d0:	strbcc	r2, [ip, r9]
   179d4:	add	r2, r9, #1
   179d8:	cmp	r2, r5
   179dc:	movcc	r3, #36	; 0x24
   179e0:	strbcc	r3, [ip, r2]
   179e4:	add	r2, r9, #2
   179e8:	add	r9, r9, #3
   179ec:	cmp	r2, r5
   179f0:	movcc	r3, #39	; 0x27
   179f4:	strbcc	r3, [ip, r2]
   179f8:	mov	r2, #1
   179fc:	str	r2, [fp, #-52]	; 0xffffffcc
   17a00:	cmp	r9, r5
   17a04:	movcc	r2, #92	; 0x5c
   17a08:	strbcc	r2, [ip, r9]
   17a0c:	add	r9, r9, #1
   17a10:	b	17aa8 <__assert_fail@plt+0x65ec>
   17a14:	ldr	r0, [sp, #40]	; 0x28
   17a18:	cmp	r0, #1
   17a1c:	bne	17b1c <__assert_fail@plt+0x6660>
   17a20:	bl	11324 <__ctype_b_loc@plt>
   17a24:	ldr	r0, [r0]
   17a28:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17a2c:	mov	r1, #1
   17a30:	add	r0, r0, r6, lsl #1
   17a34:	ldrb	r0, [r0, #1]
   17a38:	ubfx	r8, r0, #6, #1
   17a3c:	b	17e74 <__assert_fail@plt+0x69b8>
   17a40:	ldr	r1, [sp, #48]	; 0x30
   17a44:	mov	r0, #0
   17a48:	str	r0, [fp, #-56]	; 0xffffffc8
   17a4c:	mov	r0, #92	; 0x5c
   17a50:	cmp	r1, #0
   17a54:	beq	17ac8 <__assert_fail@plt+0x660c>
   17a58:	mov	r6, #92	; 0x5c
   17a5c:	mov	r8, #0
   17a60:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17a64:	cmp	r0, #0
   17a68:	bne	17aa0 <__assert_fail@plt+0x65e4>
   17a6c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17a70:	tst	r0, #1
   17a74:	beq	17aa0 <__assert_fail@plt+0x65e4>
   17a78:	cmp	r9, r5
   17a7c:	movcc	r0, #39	; 0x27
   17a80:	strbcc	r0, [ip, r9]
   17a84:	add	r0, r9, #1
   17a88:	add	r9, r9, #2
   17a8c:	cmp	r0, r5
   17a90:	movcc	r1, #39	; 0x27
   17a94:	strbcc	r1, [ip, r0]
   17a98:	mov	r0, #0
   17a9c:	str	r0, [fp, #-52]	; 0xffffffcc
   17aa0:	mov	r1, r8
   17aa4:	mov	r0, r6
   17aa8:	cmp	r9, r5
   17aac:	and	r4, r4, r1
   17ab0:	strbcc	r0, [ip, r9]
   17ab4:	add	r9, r9, #1
   17ab8:	add	sl, sl, #1
   17abc:	cmn	r7, #1
   17ac0:	bne	173b8 <__assert_fail@plt+0x5efc>
   17ac4:	b	173c4 <__assert_fail@plt+0x5f08>
   17ac8:	mov	r1, #0
   17acc:	mov	r8, #0
   17ad0:	str	r1, [fp, #-56]	; 0xffffffc8
   17ad4:	ldr	r1, [sp, #88]	; 0x58
   17ad8:	tst	r1, #1
   17adc:	mov	r1, #0
   17ae0:	beq	176cc <__assert_fail@plt+0x6210>
   17ae4:	b	179a0 <__assert_fail@plt+0x64e4>
   17ae8:	ldr	r0, [sp, #36]	; 0x24
   17aec:	mov	r6, #0
   17af0:	mov	r8, #0
   17af4:	cmp	r0, #0
   17af8:	mov	r0, #0
   17afc:	str	r0, [fp, #-56]	; 0xffffffc8
   17b00:	bne	17ab8 <__assert_fail@plt+0x65fc>
   17b04:	b	176cc <__assert_fail@plt+0x6210>
   17b08:	mov	r8, #1
   17b0c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17b10:	tst	r0, #1
   17b14:	beq	176d8 <__assert_fail@plt+0x621c>
   17b18:	b	1798c <__assert_fail@plt+0x64d0>
   17b1c:	mov	r0, #0
   17b20:	cmn	r7, #1
   17b24:	str	r0, [fp, #-36]	; 0xffffffdc
   17b28:	str	r0, [fp, #-40]	; 0xffffffd8
   17b2c:	bne	17b40 <__assert_fail@plt+0x6684>
   17b30:	mov	r0, lr
   17b34:	bl	11348 <strlen@plt>
   17b38:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17b3c:	mov	r7, r0
   17b40:	ldr	r0, [sp, #44]	; 0x2c
   17b44:	str	r4, [sp, #84]	; 0x54
   17b48:	str	r5, [sp, #28]
   17b4c:	cmp	r0, #0
   17b50:	beq	17da4 <__assert_fail@plt+0x68e8>
   17b54:	ldr	r0, [sp, #80]	; 0x50
   17b58:	mov	r8, #1
   17b5c:	mov	r5, #0
   17b60:	add	r0, r0, sl
   17b64:	str	r0, [sp, #24]
   17b68:	sub	r0, fp, #40	; 0x28
   17b6c:	mov	r3, r0
   17b70:	b	17bac <__assert_fail@plt+0x66f0>
   17b74:	ldr	r5, [sp, #68]	; 0x44
   17b78:	add	r5, r0, r5
   17b7c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17b80:	bl	1127c <iswprint@plt>
   17b84:	cmp	r0, #0
   17b88:	sub	r4, fp, #40	; 0x28
   17b8c:	movwne	r0, #1
   17b90:	and	r8, r8, r0
   17b94:	mov	r0, r4
   17b98:	bl	11234 <mbsinit@plt>
   17b9c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17ba0:	mov	r3, r4
   17ba4:	cmp	r0, #0
   17ba8:	bne	17e68 <__assert_fail@plt+0x69ac>
   17bac:	str	r5, [sp, #68]	; 0x44
   17bb0:	add	r5, r5, sl
   17bb4:	sub	r0, fp, #44	; 0x2c
   17bb8:	add	r1, lr, r5
   17bbc:	sub	r2, r7, r5
   17bc0:	bl	1ac90 <__assert_fail@plt+0x97d4>
   17bc4:	cmn	r0, #2
   17bc8:	beq	17e28 <__assert_fail@plt+0x696c>
   17bcc:	ldr	ip, [fp, #-84]	; 0xffffffac
   17bd0:	cmn	r0, #1
   17bd4:	beq	17e1c <__assert_fail@plt+0x6960>
   17bd8:	cmp	r0, #0
   17bdc:	beq	17e20 <__assert_fail@plt+0x6964>
   17be0:	cmp	r0, #2
   17be4:	bcc	17b74 <__assert_fail@plt+0x66b8>
   17be8:	ldr	r1, [sp, #68]	; 0x44
   17bec:	ldr	r2, [sp, #24]
   17bf0:	add	r1, r2, r1
   17bf4:	sub	r2, r0, #1
   17bf8:	ldrb	r3, [r1]
   17bfc:	sub	r3, r3, #91	; 0x5b
   17c00:	cmp	r3, #33	; 0x21
   17c04:	bls	17c24 <__assert_fail@plt+0x6768>
   17c08:	add	r1, r1, #1
   17c0c:	subs	r2, r2, #1
   17c10:	beq	17b74 <__assert_fail@plt+0x66b8>
   17c14:	ldrb	r3, [r1]
   17c18:	sub	r3, r3, #91	; 0x5b
   17c1c:	cmp	r3, #33	; 0x21
   17c20:	bhi	17c08 <__assert_fail@plt+0x674c>
   17c24:	add	r5, pc, #0
   17c28:	ldr	pc, [r5, r3, lsl #2]
   17c2c:	andeq	r8, r1, r0, asr #2
   17c30:	andeq	r8, r1, r0, asr #2
   17c34:	andeq	r7, r1, r8, lsl #24
   17c38:	andeq	r8, r1, r0, asr #2
   17c3c:	andeq	r7, r1, r8, lsl #24
   17c40:	andeq	r8, r1, r0, asr #2
   17c44:	andeq	r7, r1, r8, lsl #24
   17c48:	andeq	r7, r1, r8, lsl #24
   17c4c:	andeq	r7, r1, r8, lsl #24
   17c50:	andeq	r7, r1, r8, lsl #24
   17c54:	andeq	r7, r1, r8, lsl #24
   17c58:	andeq	r7, r1, r8, lsl #24
   17c5c:	andeq	r7, r1, r8, lsl #24
   17c60:	andeq	r7, r1, r8, lsl #24
   17c64:	andeq	r7, r1, r8, lsl #24
   17c68:	andeq	r7, r1, r8, lsl #24
   17c6c:	andeq	r7, r1, r8, lsl #24
   17c70:	andeq	r7, r1, r8, lsl #24
   17c74:	andeq	r7, r1, r8, lsl #24
   17c78:	andeq	r7, r1, r8, lsl #24
   17c7c:	andeq	r7, r1, r8, lsl #24
   17c80:	andeq	r7, r1, r8, lsl #24
   17c84:	andeq	r7, r1, r8, lsl #24
   17c88:	andeq	r7, r1, r8, lsl #24
   17c8c:	andeq	r7, r1, r8, lsl #24
   17c90:	andeq	r7, r1, r8, lsl #24
   17c94:	andeq	r7, r1, r8, lsl #24
   17c98:	andeq	r7, r1, r8, lsl #24
   17c9c:	andeq	r7, r1, r8, lsl #24
   17ca0:	andeq	r7, r1, r8, lsl #24
   17ca4:	andeq	r7, r1, r8, lsl #24
   17ca8:	andeq	r7, r1, r8, lsl #24
   17cac:	andeq	r7, r1, r8, lsl #24
   17cb0:	andeq	r8, r1, r0, asr #2
   17cb4:	mov	r9, r0
   17cb8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17cbc:	tst	r0, #1
   17cc0:	beq	176d8 <__assert_fail@plt+0x621c>
   17cc4:	b	1798c <__assert_fail@plt+0x64d0>
   17cc8:	mov	r0, #0
   17ccc:	str	r0, [fp, #-56]	; 0xffffffc8
   17cd0:	ldr	r0, [sp, #32]
   17cd4:	cmp	r0, #0
   17cd8:	beq	17d90 <__assert_fail@plt+0x68d4>
   17cdc:	add	r0, sl, #2
   17ce0:	mov	r1, r7
   17ce4:	cmp	r0, r7
   17ce8:	bcs	17d90 <__assert_fail@plt+0x68d4>
   17cec:	add	r1, sl, lr
   17cf0:	ldrb	r1, [r1, #1]
   17cf4:	cmp	r1, #63	; 0x3f
   17cf8:	bne	17d90 <__assert_fail@plt+0x68d4>
   17cfc:	ldrb	r8, [lr, r0]
   17d00:	sub	r2, r8, #33	; 0x21
   17d04:	cmp	r2, #29
   17d08:	bhi	17d90 <__assert_fail@plt+0x68d4>
   17d0c:	mov	r1, r4
   17d10:	movw	r4, #20929	; 0x51c1
   17d14:	mov	r3, #1
   17d18:	movt	r4, #14336	; 0x3800
   17d1c:	tst	r4, r3, lsl r2
   17d20:	beq	1804c <__assert_fail@plt+0x6b90>
   17d24:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17d28:	tst	r2, #1
   17d2c:	bne	18108 <__assert_fail@plt+0x6c4c>
   17d30:	cmp	r9, r5
   17d34:	mov	r6, r8
   17d38:	mov	r4, r1
   17d3c:	mov	sl, r0
   17d40:	mov	r8, #0
   17d44:	movcc	r2, #63	; 0x3f
   17d48:	strbcc	r2, [ip, r9]
   17d4c:	add	r2, r9, #1
   17d50:	cmp	r2, r5
   17d54:	movcc	r3, #34	; 0x22
   17d58:	strbcc	r3, [ip, r2]
   17d5c:	add	r2, r9, #2
   17d60:	cmp	r2, r5
   17d64:	movcc	r3, #34	; 0x22
   17d68:	strbcc	r3, [ip, r2]
   17d6c:	add	r2, r9, #3
   17d70:	add	r9, r9, #4
   17d74:	cmp	r2, r5
   17d78:	movcc	r3, #63	; 0x3f
   17d7c:	strbcc	r3, [ip, r2]
   17d80:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d84:	tst	r0, #1
   17d88:	beq	176d8 <__assert_fail@plt+0x621c>
   17d8c:	b	1798c <__assert_fail@plt+0x64d0>
   17d90:	mov	r8, #0
   17d94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d98:	tst	r0, #1
   17d9c:	beq	176d8 <__assert_fail@plt+0x621c>
   17da0:	b	1798c <__assert_fail@plt+0x64d0>
   17da4:	mov	r8, #1
   17da8:	mov	r5, #0
   17dac:	sub	r4, fp, #40	; 0x28
   17db0:	str	r5, [sp, #68]	; 0x44
   17db4:	add	r5, r5, sl
   17db8:	sub	r0, fp, #44	; 0x2c
   17dbc:	mov	r3, r4
   17dc0:	add	r1, lr, r5
   17dc4:	sub	r2, r7, r5
   17dc8:	bl	1ac90 <__assert_fail@plt+0x97d4>
   17dcc:	cmn	r0, #2
   17dd0:	beq	17e28 <__assert_fail@plt+0x696c>
   17dd4:	cmn	r0, #1
   17dd8:	beq	17e1c <__assert_fail@plt+0x6960>
   17ddc:	ldr	r5, [sp, #68]	; 0x44
   17de0:	cmp	r0, #0
   17de4:	beq	17e64 <__assert_fail@plt+0x69a8>
   17de8:	add	r5, r0, r5
   17dec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17df0:	bl	1127c <iswprint@plt>
   17df4:	cmp	r0, #0
   17df8:	sub	r4, fp, #40	; 0x28
   17dfc:	movwne	r0, #1
   17e00:	and	r8, r8, r0
   17e04:	mov	r0, r4
   17e08:	bl	11234 <mbsinit@plt>
   17e0c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17e10:	cmp	r0, #0
   17e14:	beq	17db0 <__assert_fail@plt+0x68f4>
   17e18:	b	17e68 <__assert_fail@plt+0x69ac>
   17e1c:	mov	r8, #0
   17e20:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17e24:	b	17e5c <__assert_fail@plt+0x69a0>
   17e28:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17e2c:	mov	r8, #0
   17e30:	cmp	r5, r7
   17e34:	bcs	17e5c <__assert_fail@plt+0x69a0>
   17e38:	ldrb	r0, [lr, r5]
   17e3c:	cmp	r0, #0
   17e40:	beq	17e5c <__assert_fail@plt+0x69a0>
   17e44:	ldr	r0, [sp, #68]	; 0x44
   17e48:	add	r0, r0, #1
   17e4c:	add	r5, r0, sl
   17e50:	str	r0, [sp, #68]	; 0x44
   17e54:	cmp	r5, r7
   17e58:	bcc	17e38 <__assert_fail@plt+0x697c>
   17e5c:	ldr	r5, [sp, #68]	; 0x44
   17e60:	b	17e68 <__assert_fail@plt+0x69ac>
   17e64:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17e68:	mov	r1, r5
   17e6c:	ldr	r5, [sp, #28]
   17e70:	ldr	r4, [sp, #84]	; 0x54
   17e74:	ldr	r0, [sp, #52]	; 0x34
   17e78:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e7c:	cmp	r1, #1
   17e80:	orr	r2, r8, r0
   17e84:	mov	r0, r1
   17e88:	bhi	17e94 <__assert_fail@plt+0x69d8>
   17e8c:	tst	r2, #1
   17e90:	bne	176cc <__assert_fail@plt+0x6210>
   17e94:	add	r0, r0, sl
   17e98:	str	r2, [sp, #84]	; 0x54
   17e9c:	str	r0, [fp, #-56]	; 0xffffffc8
   17ea0:	mov	r0, #0
   17ea4:	tst	r2, #1
   17ea8:	bne	17f88 <__assert_fail@plt+0x6acc>
   17eac:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17eb0:	tst	r1, #1
   17eb4:	bne	18108 <__assert_fail@plt+0x6c4c>
   17eb8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17ebc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17ec0:	subs	r2, r1, #2
   17ec4:	movwne	r2, #1
   17ec8:	orr	r2, r2, r0
   17ecc:	tst	r2, #1
   17ed0:	bne	17f0c <__assert_fail@plt+0x6a50>
   17ed4:	cmp	r9, r5
   17ed8:	add	r2, r9, #1
   17edc:	mov	r0, #1
   17ee0:	movcc	r1, #39	; 0x27
   17ee4:	str	r0, [fp, #-52]	; 0xffffffcc
   17ee8:	strbcc	r1, [ip, r9]
   17eec:	cmp	r2, r5
   17ef0:	movcc	r1, #36	; 0x24
   17ef4:	strbcc	r1, [ip, r2]
   17ef8:	add	r2, r9, #2
   17efc:	add	r9, r9, #3
   17f00:	cmp	r2, r5
   17f04:	movcc	r1, #39	; 0x27
   17f08:	strbcc	r1, [ip, r2]
   17f0c:	cmp	r9, r5
   17f10:	add	r2, r9, #1
   17f14:	movcc	r1, #92	; 0x5c
   17f18:	strbcc	r1, [ip, r9]
   17f1c:	cmp	r2, r5
   17f20:	bcs	17f34 <__assert_fail@plt+0x6a78>
   17f24:	uxtb	r3, r6
   17f28:	mov	r1, #48	; 0x30
   17f2c:	orr	r3, r1, r3, lsr #6
   17f30:	strb	r3, [ip, r2]
   17f34:	add	r2, r9, #2
   17f38:	add	r9, r9, #3
   17f3c:	cmp	r2, r5
   17f40:	lsrcc	r3, r6, #3
   17f44:	movcc	r1, #6
   17f48:	bficc	r3, r1, #3, #29
   17f4c:	mov	r1, #6
   17f50:	bfi	r6, r1, #3, #29
   17f54:	strbcc	r3, [ip, r2]
   17f58:	mov	r2, #1
   17f5c:	b	17fbc <__assert_fail@plt+0x6b00>
   17f60:	ldr	r1, [sp, #80]	; 0x50
   17f64:	cmp	r9, r2
   17f68:	mov	r5, r2
   17f6c:	ldr	r2, [sp, #84]	; 0x54
   17f70:	strbcc	r6, [ip, r9]
   17f74:	add	r9, r9, #1
   17f78:	ldrb	r6, [r1, sl]
   17f7c:	mov	sl, r3
   17f80:	tst	r2, #1
   17f84:	beq	17eac <__assert_fail@plt+0x69f0>
   17f88:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17f8c:	tst	r1, #1
   17f90:	beq	17fb0 <__assert_fail@plt+0x6af4>
   17f94:	cmp	r9, r5
   17f98:	mov	r2, r0
   17f9c:	movcc	r1, #92	; 0x5c
   17fa0:	strbcc	r1, [ip, r9]
   17fa4:	add	r9, r9, #1
   17fa8:	mov	r1, #0
   17fac:	b	17fb8 <__assert_fail@plt+0x6afc>
   17fb0:	mov	r1, #0
   17fb4:	mov	r2, r0
   17fb8:	str	r1, [fp, #-48]	; 0xffffffd0
   17fbc:	mov	r0, r2
   17fc0:	and	r1, r2, #1
   17fc4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17fc8:	add	r3, sl, #1
   17fcc:	cmp	r2, r3
   17fd0:	bls	18030 <__assert_fail@plt+0x6b74>
   17fd4:	mov	r2, r5
   17fd8:	ldr	r5, [fp, #-52]	; 0xffffffcc
   17fdc:	cmp	r1, #0
   17fe0:	movwne	r1, #1
   17fe4:	mvn	r5, r5
   17fe8:	orr	r5, r5, r1
   17fec:	tst	r5, #1
   17ff0:	bne	17f60 <__assert_fail@plt+0x6aa4>
   17ff4:	cmp	r9, r2
   17ff8:	movcc	r5, r4
   17ffc:	movcc	r4, #39	; 0x27
   18000:	strbcc	r4, [ip, r9]
   18004:	movcc	r4, r5
   18008:	add	r5, r9, #1
   1800c:	add	r9, r9, #2
   18010:	cmp	r5, r2
   18014:	movcc	r1, r4
   18018:	movcc	r4, #39	; 0x27
   1801c:	strbcc	r4, [ip, r5]
   18020:	movcc	r4, r1
   18024:	mov	r1, #0
   18028:	str	r1, [fp, #-52]	; 0xffffffcc
   1802c:	b	17f60 <__assert_fail@plt+0x6aa4>
   18030:	cmp	r1, #0
   18034:	movwne	r1, #1
   18038:	str	r1, [fp, #-56]	; 0xffffffc8
   1803c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18040:	cmp	r0, #0
   18044:	beq	17a6c <__assert_fail@plt+0x65b0>
   18048:	b	17aa0 <__assert_fail@plt+0x65e4>
   1804c:	mov	r8, #0
   18050:	mov	r4, r1
   18054:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18058:	tst	r0, #1
   1805c:	beq	176d8 <__assert_fail@plt+0x621c>
   18060:	b	1798c <__assert_fail@plt+0x64d0>
   18064:	mov	r7, sl
   18068:	b	18070 <__assert_fail@plt+0x6bb4>
   1806c:	mvn	r7, #0
   18070:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18074:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18078:	ldr	r2, [sp, #88]	; 0x58
   1807c:	eor	r0, r1, #2
   18080:	orr	r0, r0, r9
   18084:	clz	r0, r0
   18088:	lsr	r0, r0, #5
   1808c:	tst	r3, r0
   18090:	bne	18108 <__assert_fail@plt+0x6c4c>
   18094:	subs	r0, r1, #2
   18098:	movwne	r0, #1
   1809c:	orr	r0, r3, r0
   180a0:	tst	r0, #1
   180a4:	ldreq	r0, [sp, #60]	; 0x3c
   180a8:	eoreq	r0, r0, #1
   180ac:	tsteq	r0, #1
   180b0:	bne	181e4 <__assert_fail@plt+0x6d28>
   180b4:	tst	r4, #1
   180b8:	bne	181a8 <__assert_fail@plt+0x6cec>
   180bc:	ldr	r6, [sp, #56]	; 0x38
   180c0:	mov	r8, #0
   180c4:	cmp	r6, #0
   180c8:	beq	181e0 <__assert_fail@plt+0x6d24>
   180cc:	mov	r1, #0
   180d0:	mov	r4, #2
   180d4:	cmp	r5, #0
   180d8:	mov	r0, r2
   180dc:	mov	r3, #0
   180e0:	str	r1, [sp, #84]	; 0x54
   180e4:	beq	16f2c <__assert_fail@plt+0x5a70>
   180e8:	b	181e4 <__assert_fail@plt+0x6d28>
   180ec:	movw	r0, #49094	; 0xbfc6
   180f0:	movt	r0, #1
   180f4:	str	r0, [sp, #76]	; 0x4c
   180f8:	mov	r9, #0
   180fc:	tst	r8, #1
   18100:	beq	171c4 <__assert_fail@plt+0x5d08>
   18104:	b	17304 <__assert_fail@plt+0x5e48>
   18108:	ldr	r1, [sp, #88]	; 0x58
   1810c:	mov	r0, #2
   18110:	tst	r1, #1
   18114:	movwne	r0, #4
   18118:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1811c:	ldr	r1, [fp, #12]
   18120:	cmp	r2, #2
   18124:	moveq	r2, r0
   18128:	b	18160 <__assert_fail@plt+0x6ca4>
   1812c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18130:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18134:	ldr	r1, [fp, #12]
   18138:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1813c:	b	18160 <__assert_fail@plt+0x6ca4>
   18140:	ldr	r1, [sp, #88]	; 0x58
   18144:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18148:	ldr	r5, [sp, #28]
   1814c:	mov	r0, #2
   18150:	tst	r1, #1
   18154:	ldr	r1, [fp, #12]
   18158:	movwne	r0, #4
   1815c:	mov	r2, r0
   18160:	mov	r0, #0
   18164:	bic	r1, r1, #2
   18168:	str	r2, [sp]
   1816c:	mov	r2, lr
   18170:	str	r0, [sp, #8]
   18174:	ldr	r0, [sp, #72]	; 0x48
   18178:	str	r1, [sp, #4]
   1817c:	mov	r1, r5
   18180:	str	r0, [sp, #12]
   18184:	ldr	r0, [sp, #76]	; 0x4c
   18188:	str	r0, [sp, #16]
   1818c:	mov	r0, ip
   18190:	mov	r3, r7
   18194:	bl	16ea0 <__assert_fail@plt+0x59e4>
   18198:	mov	r9, r0
   1819c:	mov	r0, r9
   181a0:	sub	sp, fp, #28
   181a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181a8:	mov	r0, #5
   181ac:	ldr	r1, [sp, #56]	; 0x38
   181b0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   181b4:	str	r0, [sp]
   181b8:	ldr	r0, [fp, #12]
   181bc:	str	r0, [sp, #4]
   181c0:	ldr	r0, [fp, #16]
   181c4:	str	r0, [sp, #8]
   181c8:	ldr	r0, [sp, #72]	; 0x48
   181cc:	str	r0, [sp, #12]
   181d0:	ldr	r0, [sp, #76]	; 0x4c
   181d4:	str	r0, [sp, #16]
   181d8:	ldr	r0, [fp, #-84]	; 0xffffffac
   181dc:	b	18190 <__assert_fail@plt+0x6cd4>
   181e0:	mov	r3, #0
   181e4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   181e8:	cmp	r1, #0
   181ec:	beq	18228 <__assert_fail@plt+0x6d6c>
   181f0:	ldr	r2, [fp, #-84]	; 0xffffffac
   181f4:	tst	r3, #1
   181f8:	bne	1822c <__assert_fail@plt+0x6d70>
   181fc:	ldrb	r0, [r1]
   18200:	cmp	r0, #0
   18204:	beq	1822c <__assert_fail@plt+0x6d70>
   18208:	add	r1, r1, #1
   1820c:	cmp	r9, r5
   18210:	strbcc	r0, [r2, r9]
   18214:	add	r9, r9, #1
   18218:	ldrb	r0, [r1], #1
   1821c:	cmp	r0, #0
   18220:	bne	1820c <__assert_fail@plt+0x6d50>
   18224:	b	1822c <__assert_fail@plt+0x6d70>
   18228:	ldr	r2, [fp, #-84]	; 0xffffffac
   1822c:	cmp	r9, r5
   18230:	movcc	r0, #0
   18234:	strbcc	r0, [r2, r9]
   18238:	mov	r0, r9
   1823c:	sub	sp, fp, #28
   18240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18244:	mov	r0, #4
   18248:	b	18118 <__assert_fail@plt+0x6c5c>
   1824c:	bl	11474 <abort@plt>
   18250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18254:	add	fp, sp, #28
   18258:	sub	sp, sp, #28
   1825c:	movw	r5, #53688	; 0xd1b8
   18260:	cmp	r2, #0
   18264:	mov	r4, r1
   18268:	mov	r7, r0
   1826c:	str	r0, [sp, #20]
   18270:	movt	r5, #2
   18274:	movne	r5, r2
   18278:	bl	11378 <__errno_location@plt>
   1827c:	mov	sl, r0
   18280:	ldr	r2, [r5, #40]	; 0x28
   18284:	ldr	r3, [r5, #44]	; 0x2c
   18288:	ldm	r5, {r0, r1}
   1828c:	orr	r8, r1, #1
   18290:	add	r9, r5, #8
   18294:	mov	r1, #0
   18298:	ldr	r6, [sl]
   1829c:	stm	sp, {r0, r8, r9}
   182a0:	mov	r0, #0
   182a4:	str	r2, [sp, #12]
   182a8:	str	r3, [sp, #16]
   182ac:	mov	r2, r7
   182b0:	mov	r3, r4
   182b4:	str	r6, [sp, #24]
   182b8:	mov	r6, r4
   182bc:	bl	16ea0 <__assert_fail@plt+0x59e4>
   182c0:	add	r7, r0, #1
   182c4:	mov	r0, r7
   182c8:	bl	193d0 <__assert_fail@plt+0x7f14>
   182cc:	mov	r4, r0
   182d0:	ldr	r0, [r5]
   182d4:	ldr	r2, [r5, #44]	; 0x2c
   182d8:	ldr	r1, [r5, #40]	; 0x28
   182dc:	mov	r3, r6
   182e0:	stm	sp, {r0, r8, r9}
   182e4:	str	r2, [sp, #16]
   182e8:	ldr	r2, [sp, #20]
   182ec:	str	r1, [sp, #12]
   182f0:	mov	r0, r4
   182f4:	mov	r1, r7
   182f8:	bl	16ea0 <__assert_fail@plt+0x59e4>
   182fc:	ldr	r0, [sp, #24]
   18300:	str	r0, [sl]
   18304:	mov	r0, r4
   18308:	sub	sp, fp, #28
   1830c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18314:	add	fp, sp, #28
   18318:	sub	sp, sp, #36	; 0x24
   1831c:	movw	r8, #53688	; 0xd1b8
   18320:	cmp	r3, #0
   18324:	mov	r4, r2
   18328:	str	r2, [sp, #24]
   1832c:	mov	r5, r1
   18330:	mov	r6, r0
   18334:	str	r0, [sp, #20]
   18338:	movt	r8, #2
   1833c:	movne	r8, r3
   18340:	bl	11378 <__errno_location@plt>
   18344:	str	r0, [sp, #28]
   18348:	ldr	r1, [r8, #40]	; 0x28
   1834c:	ldr	r2, [r8, #44]	; 0x2c
   18350:	ldr	r7, [r0]
   18354:	cmp	r4, #0
   18358:	add	sl, r8, #8
   1835c:	mov	r0, #0
   18360:	ldm	r8, {r3, r9}
   18364:	orreq	r9, r9, #1
   18368:	stm	sp, {r3, r9, sl}
   1836c:	str	r1, [sp, #12]
   18370:	str	r2, [sp, #16]
   18374:	mov	r1, #0
   18378:	mov	r2, r6
   1837c:	mov	r3, r5
   18380:	str	r7, [sp, #32]
   18384:	mov	r7, r5
   18388:	bl	16ea0 <__assert_fail@plt+0x59e4>
   1838c:	add	r4, r0, #1
   18390:	mov	r5, r0
   18394:	mov	r0, r4
   18398:	bl	193d0 <__assert_fail@plt+0x7f14>
   1839c:	mov	r6, r0
   183a0:	ldr	r0, [r8]
   183a4:	ldr	r2, [r8, #44]	; 0x2c
   183a8:	ldr	r1, [r8, #40]	; 0x28
   183ac:	mov	r3, r7
   183b0:	stm	sp, {r0, r9, sl}
   183b4:	str	r2, [sp, #16]
   183b8:	ldr	r2, [sp, #20]
   183bc:	str	r1, [sp, #12]
   183c0:	mov	r0, r6
   183c4:	mov	r1, r4
   183c8:	bl	16ea0 <__assert_fail@plt+0x59e4>
   183cc:	ldr	r0, [sp, #24]
   183d0:	ldr	r1, [sp, #32]
   183d4:	ldr	r2, [sp, #28]
   183d8:	cmp	r0, #0
   183dc:	str	r1, [r2]
   183e0:	strne	r5, [r0]
   183e4:	mov	r0, r6
   183e8:	sub	sp, fp, #28
   183ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183f0:	push	{r4, r5, r6, r7, fp, lr}
   183f4:	add	fp, sp, #16
   183f8:	movw	r4, #53600	; 0xd160
   183fc:	movt	r4, #2
   18400:	ldrd	r6, [r4]
   18404:	cmp	r7, #2
   18408:	blt	18434 <__assert_fail@plt+0x6f78>
   1840c:	add	r5, r6, #12
   18410:	mov	r7, #0
   18414:	ldr	r0, [r5, r7, lsl #3]
   18418:	bl	12e18 <__assert_fail@plt+0x195c>
   1841c:	ldr	r1, [r4, #4]
   18420:	add	r2, r7, #2
   18424:	add	r0, r7, #1
   18428:	mov	r7, r0
   1842c:	cmp	r2, r1
   18430:	blt	18414 <__assert_fail@plt+0x6f58>
   18434:	ldr	r0, [r6, #4]
   18438:	movw	r5, #53736	; 0xd1e8
   1843c:	movt	r5, #2
   18440:	cmp	r0, r5
   18444:	beq	18458 <__assert_fail@plt+0x6f9c>
   18448:	bl	12e18 <__assert_fail@plt+0x195c>
   1844c:	mov	r0, #256	; 0x100
   18450:	str	r0, [r4, #8]
   18454:	str	r5, [r4, #12]
   18458:	add	r5, r4, #8
   1845c:	cmp	r6, r5
   18460:	beq	18470 <__assert_fail@plt+0x6fb4>
   18464:	mov	r0, r6
   18468:	bl	12e18 <__assert_fail@plt+0x195c>
   1846c:	str	r5, [r4]
   18470:	mov	r0, #1
   18474:	str	r0, [r4, #4]
   18478:	pop	{r4, r5, r6, r7, fp, pc}
   1847c:	movw	r3, #53688	; 0xd1b8
   18480:	mvn	r2, #0
   18484:	movt	r3, #2
   18488:	b	1848c <__assert_fail@plt+0x6fd0>
   1848c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18490:	add	fp, sp, #28
   18494:	sub	sp, sp, #44	; 0x2c
   18498:	mov	r7, r3
   1849c:	str	r2, [sp, #36]	; 0x24
   184a0:	str	r1, [sp, #32]
   184a4:	mov	r5, r0
   184a8:	bl	11378 <__errno_location@plt>
   184ac:	cmp	r5, #0
   184b0:	bmi	18618 <__assert_fail@plt+0x715c>
   184b4:	cmn	r5, #-2147483647	; 0x80000001
   184b8:	beq	18618 <__assert_fail@plt+0x715c>
   184bc:	movw	r8, #53600	; 0xd160
   184c0:	mov	r4, r0
   184c4:	ldr	r0, [r0]
   184c8:	movt	r8, #2
   184cc:	str	r4, [sp, #28]
   184d0:	ldr	r1, [r8, #4]
   184d4:	ldr	r6, [r8]
   184d8:	str	r0, [sp, #24]
   184dc:	cmp	r1, r5
   184e0:	ble	184ec <__assert_fail@plt+0x7030>
   184e4:	mov	sl, r6
   184e8:	b	18554 <__assert_fail@plt+0x7098>
   184ec:	mov	r0, #8
   184f0:	add	r9, r8, #8
   184f4:	str	r1, [fp, #-32]	; 0xffffffe0
   184f8:	sub	r1, r5, r1
   184fc:	mvn	r3, #-2147483648	; 0x80000000
   18500:	str	r0, [sp]
   18504:	subs	r0, r6, r9
   18508:	add	r2, r1, #1
   1850c:	sub	r1, fp, #32
   18510:	movne	r0, r6
   18514:	bl	195d0 <__assert_fail@plt+0x8114>
   18518:	mov	sl, r0
   1851c:	cmp	r6, r9
   18520:	str	r0, [r8]
   18524:	bne	18530 <__assert_fail@plt+0x7074>
   18528:	ldrd	r0, [r8, #8]
   1852c:	stm	sl, {r0, r1}
   18530:	ldr	r1, [r8, #4]
   18534:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18538:	add	r0, sl, r1, lsl #3
   1853c:	sub	r1, r2, r1
   18540:	lsl	r2, r1, #3
   18544:	mov	r1, #0
   18548:	bl	11390 <memset@plt>
   1854c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18550:	str	r0, [r8, #4]
   18554:	mov	r9, sl
   18558:	ldm	r7, {r0, r1}
   1855c:	orr	r8, r1, #1
   18560:	add	r1, r7, #8
   18564:	ldr	r2, [r7, #40]	; 0x28
   18568:	ldr	r3, [r7, #44]	; 0x2c
   1856c:	ldr	r6, [r9, r5, lsl #3]!
   18570:	str	r1, [sp, #20]
   18574:	ldr	r4, [r9, #4]!
   18578:	stm	sp, {r0, r8}
   1857c:	add	r0, sp, #8
   18580:	stm	r0, {r1, r2, r3}
   18584:	ldr	r2, [sp, #32]
   18588:	ldr	r3, [sp, #36]	; 0x24
   1858c:	mov	r1, r6
   18590:	mov	r0, r4
   18594:	bl	16ea0 <__assert_fail@plt+0x59e4>
   18598:	cmp	r6, r0
   1859c:	bhi	18600 <__assert_fail@plt+0x7144>
   185a0:	add	r6, r0, #1
   185a4:	movw	r0, #53736	; 0xd1e8
   185a8:	movt	r0, #2
   185ac:	str	r6, [sl, r5, lsl #3]
   185b0:	cmp	r4, r0
   185b4:	beq	185c0 <__assert_fail@plt+0x7104>
   185b8:	mov	r0, r4
   185bc:	bl	12e18 <__assert_fail@plt+0x195c>
   185c0:	mov	r0, r6
   185c4:	bl	193d0 <__assert_fail@plt+0x7f14>
   185c8:	str	r0, [r9]
   185cc:	mov	r4, r0
   185d0:	add	r3, sp, #8
   185d4:	ldr	r0, [r7]
   185d8:	ldr	r1, [r7, #40]	; 0x28
   185dc:	ldr	r2, [r7, #44]	; 0x2c
   185e0:	stm	sp, {r0, r8}
   185e4:	ldr	r0, [sp, #20]
   185e8:	stm	r3, {r0, r1, r2}
   185ec:	ldr	r2, [sp, #32]
   185f0:	ldr	r3, [sp, #36]	; 0x24
   185f4:	mov	r0, r4
   185f8:	mov	r1, r6
   185fc:	bl	16ea0 <__assert_fail@plt+0x59e4>
   18600:	ldr	r1, [sp, #24]
   18604:	ldr	r0, [sp, #28]
   18608:	str	r1, [r0]
   1860c:	mov	r0, r4
   18610:	sub	sp, fp, #28
   18614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18618:	bl	11474 <abort@plt>
   1861c:	movw	r3, #53688	; 0xd1b8
   18620:	movt	r3, #2
   18624:	b	1848c <__assert_fail@plt+0x6fd0>
   18628:	movw	r3, #53688	; 0xd1b8
   1862c:	mov	r1, r0
   18630:	mov	r0, #0
   18634:	mvn	r2, #0
   18638:	movt	r3, #2
   1863c:	b	1848c <__assert_fail@plt+0x6fd0>
   18640:	movw	r3, #53688	; 0xd1b8
   18644:	mov	r2, r1
   18648:	mov	r1, r0
   1864c:	mov	r0, #0
   18650:	movt	r3, #2
   18654:	b	1848c <__assert_fail@plt+0x6fd0>
   18658:	push	{fp, lr}
   1865c:	mov	fp, sp
   18660:	sub	sp, sp, #48	; 0x30
   18664:	vmov.i32	q8, #0	; 0x00000000
   18668:	mov	ip, #32
   1866c:	mov	r3, sp
   18670:	mov	lr, r2
   18674:	cmp	r1, #10
   18678:	add	r2, r3, #16
   1867c:	vst1.64	{d16-d17}, [r3], ip
   18680:	vst1.64	{d16-d17}, [r2]
   18684:	vst1.64	{d16-d17}, [r3]
   18688:	beq	186a8 <__assert_fail@plt+0x71ec>
   1868c:	str	r1, [sp]
   18690:	mov	r3, sp
   18694:	mov	r1, lr
   18698:	mvn	r2, #0
   1869c:	bl	1848c <__assert_fail@plt+0x6fd0>
   186a0:	mov	sp, fp
   186a4:	pop	{fp, pc}
   186a8:	bl	11474 <abort@plt>
   186ac:	push	{r4, sl, fp, lr}
   186b0:	add	fp, sp, #8
   186b4:	sub	sp, sp, #48	; 0x30
   186b8:	vmov.i32	q8, #0	; 0x00000000
   186bc:	mov	ip, r3
   186c0:	mov	r3, sp
   186c4:	mov	lr, #32
   186c8:	cmp	r1, #10
   186cc:	add	r4, r3, #16
   186d0:	vst1.64	{d16-d17}, [r3], lr
   186d4:	vst1.64	{d16-d17}, [r4]
   186d8:	vst1.64	{d16-d17}, [r3]
   186dc:	beq	186fc <__assert_fail@plt+0x7240>
   186e0:	str	r1, [sp]
   186e4:	mov	r1, r2
   186e8:	mov	r3, sp
   186ec:	mov	r2, ip
   186f0:	bl	1848c <__assert_fail@plt+0x6fd0>
   186f4:	sub	sp, fp, #8
   186f8:	pop	{r4, sl, fp, pc}
   186fc:	bl	11474 <abort@plt>
   18700:	push	{fp, lr}
   18704:	mov	fp, sp
   18708:	sub	sp, sp, #48	; 0x30
   1870c:	vmov.i32	q8, #0	; 0x00000000
   18710:	mov	r3, sp
   18714:	mov	ip, #32
   18718:	cmp	r0, #10
   1871c:	add	r2, r3, #16
   18720:	vst1.64	{d16-d17}, [r3], ip
   18724:	vst1.64	{d16-d17}, [r2]
   18728:	vst1.64	{d16-d17}, [r3]
   1872c:	beq	1874c <__assert_fail@plt+0x7290>
   18730:	str	r0, [sp]
   18734:	mov	r3, sp
   18738:	mov	r0, #0
   1873c:	mvn	r2, #0
   18740:	bl	1848c <__assert_fail@plt+0x6fd0>
   18744:	mov	sp, fp
   18748:	pop	{fp, pc}
   1874c:	bl	11474 <abort@plt>
   18750:	push	{fp, lr}
   18754:	mov	fp, sp
   18758:	sub	sp, sp, #48	; 0x30
   1875c:	vmov.i32	q8, #0	; 0x00000000
   18760:	mov	r3, sp
   18764:	mov	ip, #32
   18768:	cmp	r0, #10
   1876c:	add	lr, r3, #16
   18770:	vst1.64	{d16-d17}, [r3], ip
   18774:	vst1.64	{d16-d17}, [lr]
   18778:	vst1.64	{d16-d17}, [r3]
   1877c:	beq	18798 <__assert_fail@plt+0x72dc>
   18780:	str	r0, [sp]
   18784:	mov	r3, sp
   18788:	mov	r0, #0
   1878c:	bl	1848c <__assert_fail@plt+0x6fd0>
   18790:	mov	sp, fp
   18794:	pop	{fp, pc}
   18798:	bl	11474 <abort@plt>
   1879c:	push	{r4, sl, fp, lr}
   187a0:	add	fp, sp, #8
   187a4:	sub	sp, sp, #48	; 0x30
   187a8:	mov	lr, r0
   187ac:	movw	r0, #53688	; 0xd1b8
   187b0:	mov	ip, r1
   187b4:	mov	r1, #32
   187b8:	mov	r4, #1
   187bc:	movt	r0, #2
   187c0:	add	r3, r0, #16
   187c4:	vld1.64	{d16-d17}, [r0], r1
   187c8:	vld1.64	{d20-d21}, [r0]
   187cc:	vld1.64	{d18-d19}, [r3]
   187d0:	mov	r3, sp
   187d4:	add	r0, r3, #32
   187d8:	add	r1, r3, #16
   187dc:	vst1.64	{d20-d21}, [r0]
   187e0:	mov	r0, #28
   187e4:	vst1.64	{d18-d19}, [r1]
   187e8:	mov	r1, r3
   187ec:	and	r0, r0, r2, lsr #3
   187f0:	and	r2, r2, #31
   187f4:	vst1.64	{d16-d17}, [r1], r0
   187f8:	ldr	r0, [r1, #8]
   187fc:	bic	r4, r4, r0, lsr r2
   18800:	eor	r0, r0, r4, lsl r2
   18804:	mov	r2, ip
   18808:	str	r0, [r1, #8]
   1880c:	mov	r0, #0
   18810:	mov	r1, lr
   18814:	bl	1848c <__assert_fail@plt+0x6fd0>
   18818:	sub	sp, fp, #8
   1881c:	pop	{r4, sl, fp, pc}
   18820:	push	{fp, lr}
   18824:	mov	fp, sp
   18828:	sub	sp, sp, #48	; 0x30
   1882c:	mov	ip, r0
   18830:	movw	r0, #53688	; 0xd1b8
   18834:	mov	r2, #32
   18838:	movt	r0, #2
   1883c:	add	r3, r0, #16
   18840:	vld1.64	{d16-d17}, [r0], r2
   18844:	vld1.64	{d20-d21}, [r0]
   18848:	vld1.64	{d18-d19}, [r3]
   1884c:	mov	r3, sp
   18850:	add	r0, r3, #32
   18854:	add	r2, r3, #16
   18858:	vst1.64	{d20-d21}, [r0]
   1885c:	mov	r0, #28
   18860:	vst1.64	{d18-d19}, [r2]
   18864:	mov	r2, r3
   18868:	and	r0, r0, r1, lsr #3
   1886c:	and	r1, r1, #31
   18870:	vst1.64	{d16-d17}, [r2], r0
   18874:	mov	r0, #1
   18878:	ldr	lr, [r2, #8]
   1887c:	bic	r0, r0, lr, lsr r1
   18880:	eor	r0, lr, r0, lsl r1
   18884:	mov	r1, ip
   18888:	str	r0, [r2, #8]
   1888c:	mov	r0, #0
   18890:	mvn	r2, #0
   18894:	bl	1848c <__assert_fail@plt+0x6fd0>
   18898:	mov	sp, fp
   1889c:	pop	{fp, pc}
   188a0:	push	{fp, lr}
   188a4:	mov	fp, sp
   188a8:	sub	sp, sp, #48	; 0x30
   188ac:	mov	r1, r0
   188b0:	movw	r0, #53688	; 0xd1b8
   188b4:	mov	r3, #32
   188b8:	movt	r0, #2
   188bc:	add	r2, r0, #16
   188c0:	vld1.64	{d16-d17}, [r0], r3
   188c4:	mov	r3, sp
   188c8:	vld1.64	{d18-d19}, [r2]
   188cc:	vld1.64	{d20-d21}, [r0]
   188d0:	add	r2, r3, #16
   188d4:	add	r0, r3, #32
   188d8:	vst1.64	{d18-d19}, [r2]
   188dc:	vst1.64	{d20-d21}, [r0]
   188e0:	mov	r0, #12
   188e4:	mov	r2, r3
   188e8:	vst1.64	{d16-d17}, [r2], r0
   188ec:	ldr	r0, [r2]
   188f0:	orr	r0, r0, #67108864	; 0x4000000
   188f4:	str	r0, [r2]
   188f8:	mov	r0, #0
   188fc:	mvn	r2, #0
   18900:	bl	1848c <__assert_fail@plt+0x6fd0>
   18904:	mov	sp, fp
   18908:	pop	{fp, pc}
   1890c:	push	{fp, lr}
   18910:	mov	fp, sp
   18914:	sub	sp, sp, #48	; 0x30
   18918:	mov	ip, r1
   1891c:	mov	r1, r0
   18920:	movw	r0, #53688	; 0xd1b8
   18924:	mov	r2, #32
   18928:	movt	r0, #2
   1892c:	add	r3, r0, #16
   18930:	vld1.64	{d16-d17}, [r0], r2
   18934:	vld1.64	{d18-d19}, [r3]
   18938:	vld1.64	{d20-d21}, [r0]
   1893c:	mov	r3, sp
   18940:	add	r2, r3, #16
   18944:	add	r0, r3, #32
   18948:	vst1.64	{d18-d19}, [r2]
   1894c:	vst1.64	{d20-d21}, [r0]
   18950:	mov	r0, #12
   18954:	mov	r2, r3
   18958:	vst1.64	{d16-d17}, [r2], r0
   1895c:	ldr	r0, [r2]
   18960:	orr	r0, r0, #67108864	; 0x4000000
   18964:	str	r0, [r2]
   18968:	mov	r0, #0
   1896c:	mov	r2, ip
   18970:	bl	1848c <__assert_fail@plt+0x6fd0>
   18974:	mov	sp, fp
   18978:	pop	{fp, pc}
   1897c:	push	{r4, sl, fp, lr}
   18980:	add	fp, sp, #8
   18984:	sub	sp, sp, #96	; 0x60
   18988:	vmov.i32	q8, #0	; 0x00000000
   1898c:	mov	ip, r2
   18990:	mov	r2, sp
   18994:	mov	r4, #28
   18998:	cmp	r1, #10
   1899c:	mov	r3, r2
   189a0:	add	lr, r2, #16
   189a4:	vst1.64	{d16-d17}, [r3], r4
   189a8:	vst1.64	{d16-d17}, [lr]
   189ac:	vst1.32	{d16-d17}, [r3]
   189b0:	beq	18a00 <__assert_fail@plt+0x7544>
   189b4:	vld1.64	{d16-d17}, [r2], r4
   189b8:	vld1.64	{d18-d19}, [lr]
   189bc:	add	r3, sp, #48	; 0x30
   189c0:	vld1.32	{d20-d21}, [r2]
   189c4:	add	r2, r3, #20
   189c8:	add	r4, r3, #4
   189cc:	vst1.32	{d18-d19}, [r2]
   189d0:	add	r2, r3, #32
   189d4:	vst1.32	{d16-d17}, [r4]
   189d8:	vst1.32	{d20-d21}, [r2]
   189dc:	str	r1, [sp, #48]	; 0x30
   189e0:	mvn	r2, #0
   189e4:	ldr	r1, [sp, #60]	; 0x3c
   189e8:	orr	r1, r1, #67108864	; 0x4000000
   189ec:	str	r1, [sp, #60]	; 0x3c
   189f0:	mov	r1, ip
   189f4:	bl	1848c <__assert_fail@plt+0x6fd0>
   189f8:	sub	sp, fp, #8
   189fc:	pop	{r4, sl, fp, pc}
   18a00:	bl	11474 <abort@plt>
   18a04:	push	{r4, r5, r6, sl, fp, lr}
   18a08:	add	fp, sp, #16
   18a0c:	sub	sp, sp, #48	; 0x30
   18a10:	mov	ip, r3
   18a14:	movw	r3, #53688	; 0xd1b8
   18a18:	mov	r6, #32
   18a1c:	cmp	r1, #0
   18a20:	mov	r4, sp
   18a24:	movt	r3, #2
   18a28:	cmpne	r2, #0
   18a2c:	add	r5, r4, #16
   18a30:	add	lr, r3, #16
   18a34:	vld1.64	{d16-d17}, [r3], r6
   18a38:	vld1.64	{d18-d19}, [lr]
   18a3c:	vld1.64	{d20-d21}, [r3]
   18a40:	mov	r3, #10
   18a44:	vst1.64	{d16-d17}, [r4], r6
   18a48:	vst1.64	{d18-d19}, [r5]
   18a4c:	vst1.64	{d20-d21}, [r4]
   18a50:	str	r3, [sp]
   18a54:	bne	18a5c <__assert_fail@plt+0x75a0>
   18a58:	bl	11474 <abort@plt>
   18a5c:	str	r2, [sp, #44]	; 0x2c
   18a60:	str	r1, [sp, #40]	; 0x28
   18a64:	mov	r3, sp
   18a68:	mov	r1, ip
   18a6c:	mvn	r2, #0
   18a70:	bl	1848c <__assert_fail@plt+0x6fd0>
   18a74:	sub	sp, fp, #16
   18a78:	pop	{r4, r5, r6, sl, fp, pc}
   18a7c:	push	{r4, r5, r6, sl, fp, lr}
   18a80:	add	fp, sp, #16
   18a84:	sub	sp, sp, #48	; 0x30
   18a88:	mov	lr, r3
   18a8c:	movw	r3, #53688	; 0xd1b8
   18a90:	mov	r6, #32
   18a94:	cmp	r1, #0
   18a98:	mov	r4, sp
   18a9c:	movt	r3, #2
   18aa0:	cmpne	r2, #0
   18aa4:	add	r5, r4, #16
   18aa8:	add	ip, r3, #16
   18aac:	vld1.64	{d16-d17}, [r3], r6
   18ab0:	vld1.64	{d18-d19}, [ip]
   18ab4:	vld1.64	{d20-d21}, [r3]
   18ab8:	mov	r3, #10
   18abc:	vst1.64	{d16-d17}, [r4], r6
   18ac0:	vst1.64	{d18-d19}, [r5]
   18ac4:	vst1.64	{d20-d21}, [r4]
   18ac8:	str	r3, [sp]
   18acc:	bne	18ad4 <__assert_fail@plt+0x7618>
   18ad0:	bl	11474 <abort@plt>
   18ad4:	ldr	ip, [fp, #8]
   18ad8:	str	r2, [sp, #44]	; 0x2c
   18adc:	str	r1, [sp, #40]	; 0x28
   18ae0:	mov	r3, sp
   18ae4:	mov	r1, lr
   18ae8:	mov	r2, ip
   18aec:	bl	1848c <__assert_fail@plt+0x6fd0>
   18af0:	sub	sp, fp, #16
   18af4:	pop	{r4, r5, r6, sl, fp, pc}
   18af8:	push	{r4, sl, fp, lr}
   18afc:	add	fp, sp, #8
   18b00:	sub	sp, sp, #48	; 0x30
   18b04:	movw	r3, #53688	; 0xd1b8
   18b08:	mov	lr, #32
   18b0c:	mov	ip, r2
   18b10:	cmp	r0, #0
   18b14:	movt	r3, #2
   18b18:	cmpne	r1, #0
   18b1c:	add	r2, r3, #16
   18b20:	vld1.64	{d16-d17}, [r3], lr
   18b24:	vld1.64	{d20-d21}, [r3]
   18b28:	vld1.64	{d18-d19}, [r2]
   18b2c:	mov	r2, sp
   18b30:	add	r4, r2, #16
   18b34:	vst1.64	{d16-d17}, [r2], lr
   18b38:	vst1.64	{d20-d21}, [r2]
   18b3c:	mov	r2, #10
   18b40:	vst1.64	{d18-d19}, [r4]
   18b44:	str	r2, [sp]
   18b48:	bne	18b50 <__assert_fail@plt+0x7694>
   18b4c:	bl	11474 <abort@plt>
   18b50:	str	r1, [sp, #44]	; 0x2c
   18b54:	str	r0, [sp, #40]	; 0x28
   18b58:	mov	r3, sp
   18b5c:	mov	r0, #0
   18b60:	mov	r1, ip
   18b64:	mvn	r2, #0
   18b68:	bl	1848c <__assert_fail@plt+0x6fd0>
   18b6c:	sub	sp, fp, #8
   18b70:	pop	{r4, sl, fp, pc}
   18b74:	push	{r4, r5, fp, lr}
   18b78:	add	fp, sp, #8
   18b7c:	sub	sp, sp, #48	; 0x30
   18b80:	mov	ip, r3
   18b84:	movw	r3, #53688	; 0xd1b8
   18b88:	mov	r4, #32
   18b8c:	mov	lr, r2
   18b90:	cmp	r0, #0
   18b94:	movt	r3, #2
   18b98:	cmpne	r1, #0
   18b9c:	add	r2, r3, #16
   18ba0:	vld1.64	{d16-d17}, [r3], r4
   18ba4:	vld1.64	{d20-d21}, [r3]
   18ba8:	vld1.64	{d18-d19}, [r2]
   18bac:	mov	r2, sp
   18bb0:	add	r5, r2, #16
   18bb4:	vst1.64	{d16-d17}, [r2], r4
   18bb8:	vst1.64	{d20-d21}, [r2]
   18bbc:	mov	r2, #10
   18bc0:	vst1.64	{d18-d19}, [r5]
   18bc4:	str	r2, [sp]
   18bc8:	bne	18bd0 <__assert_fail@plt+0x7714>
   18bcc:	bl	11474 <abort@plt>
   18bd0:	str	r1, [sp, #44]	; 0x2c
   18bd4:	str	r0, [sp, #40]	; 0x28
   18bd8:	mov	r3, sp
   18bdc:	mov	r0, #0
   18be0:	mov	r1, lr
   18be4:	mov	r2, ip
   18be8:	bl	1848c <__assert_fail@plt+0x6fd0>
   18bec:	sub	sp, fp, #8
   18bf0:	pop	{r4, r5, fp, pc}
   18bf4:	movw	r3, #53552	; 0xd130
   18bf8:	movt	r3, #2
   18bfc:	b	1848c <__assert_fail@plt+0x6fd0>
   18c00:	movw	r3, #53552	; 0xd130
   18c04:	mov	r2, r1
   18c08:	mov	r1, r0
   18c0c:	mov	r0, #0
   18c10:	movt	r3, #2
   18c14:	b	1848c <__assert_fail@plt+0x6fd0>
   18c18:	movw	r3, #53552	; 0xd130
   18c1c:	mvn	r2, #0
   18c20:	movt	r3, #2
   18c24:	b	1848c <__assert_fail@plt+0x6fd0>
   18c28:	movw	r3, #53552	; 0xd130
   18c2c:	mov	r1, r0
   18c30:	mov	r0, #0
   18c34:	mvn	r2, #0
   18c38:	movt	r3, #2
   18c3c:	b	1848c <__assert_fail@plt+0x6fd0>
   18c40:	push	{r4, sl, fp, lr}
   18c44:	add	fp, sp, #8
   18c48:	sub	sp, sp, #104	; 0x68
   18c4c:	movw	r1, #49919	; 0xc2ff
   18c50:	mov	r4, r0
   18c54:	mov	r2, sp
   18c58:	mov	r0, #3
   18c5c:	movt	r1, #1
   18c60:	bl	1148c <__lxstat64@plt>
   18c64:	mov	r1, r0
   18c68:	mov	r0, #0
   18c6c:	cmp	r1, #0
   18c70:	beq	18c7c <__assert_fail@plt+0x77c0>
   18c74:	sub	sp, fp, #8
   18c78:	pop	{r4, sl, fp, pc}
   18c7c:	ldr	r0, [sp, #96]	; 0x60
   18c80:	ldr	r1, [sp, #100]	; 0x64
   18c84:	ldm	sp, {r2, r3}
   18c88:	stm	r4, {r0, r1, r2, r3}
   18c8c:	mov	r0, r4
   18c90:	sub	sp, fp, #8
   18c94:	pop	{r4, sl, fp, pc}
   18c98:	push	{r4, r5, r6, r7, fp, lr}
   18c9c:	add	fp, sp, #16
   18ca0:	mov	r4, r0
   18ca4:	cmp	r0, #2
   18ca8:	bhi	18cd8 <__assert_fail@plt+0x781c>
   18cac:	mov	r0, r4
   18cb0:	bl	1ad30 <__assert_fail@plt+0x9874>
   18cb4:	mov	r5, r0
   18cb8:	bl	11378 <__errno_location@plt>
   18cbc:	ldr	r7, [r0]
   18cc0:	mov	r6, r0
   18cc4:	mov	r0, r4
   18cc8:	bl	11480 <close@plt>
   18ccc:	mov	r0, r5
   18cd0:	str	r7, [r6]
   18cd4:	pop	{r4, r5, r6, r7, fp, pc}
   18cd8:	mov	r0, r4
   18cdc:	pop	{r4, r5, r6, r7, fp, pc}
   18ce0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ce4:	add	fp, sp, #24
   18ce8:	sub	sp, sp, #32
   18cec:	ldr	r6, [fp, #12]
   18cf0:	ldr	r7, [fp, #8]
   18cf4:	mov	r4, r2
   18cf8:	mov	r8, r0
   18cfc:	cmp	r1, #0
   18d00:	beq	18d28 <__assert_fail@plt+0x786c>
   18d04:	movw	r2, #49184	; 0xc020
   18d08:	mov	r5, r1
   18d0c:	str	r3, [sp, #4]
   18d10:	str	r4, [sp]
   18d14:	mov	r0, r8
   18d18:	mov	r1, #1
   18d1c:	movt	r2, #1
   18d20:	mov	r3, r5
   18d24:	b	18d40 <__assert_fail@plt+0x7884>
   18d28:	movw	r2, #49196	; 0xc02c
   18d2c:	str	r3, [sp]
   18d30:	mov	r0, r8
   18d34:	mov	r1, #1
   18d38:	mov	r3, r4
   18d3c:	movt	r2, #1
   18d40:	bl	113b4 <__fprintf_chk@plt>
   18d44:	movw	r1, #49203	; 0xc033
   18d48:	mov	r0, #0
   18d4c:	mov	r2, #5
   18d50:	movt	r1, #1
   18d54:	bl	1124c <dcgettext@plt>
   18d58:	movw	r2, #49921	; 0xc301
   18d5c:	mov	r3, r0
   18d60:	movw	r0, #2022	; 0x7e6
   18d64:	mov	r1, #1
   18d68:	movt	r2, #1
   18d6c:	str	r0, [sp]
   18d70:	mov	r0, r8
   18d74:	bl	113b4 <__fprintf_chk@plt>
   18d78:	movw	r4, #46675	; 0xb653
   18d7c:	mov	r1, r8
   18d80:	movt	r4, #1
   18d84:	mov	r0, r4
   18d88:	bl	111bc <fputs_unlocked@plt>
   18d8c:	movw	r1, #49207	; 0xc037
   18d90:	mov	r0, #0
   18d94:	mov	r2, #5
   18d98:	movt	r1, #1
   18d9c:	bl	1124c <dcgettext@plt>
   18da0:	movw	r3, #49378	; 0xc0e2
   18da4:	mov	r2, r0
   18da8:	mov	r0, r8
   18dac:	mov	r1, #1
   18db0:	movt	r3, #1
   18db4:	bl	113b4 <__fprintf_chk@plt>
   18db8:	mov	r0, r4
   18dbc:	mov	r1, r8
   18dc0:	bl	111bc <fputs_unlocked@plt>
   18dc4:	cmp	r6, #9
   18dc8:	bhi	18e04 <__assert_fail@plt+0x7948>
   18dcc:	add	r0, pc, #0
   18dd0:	ldr	pc, [r0, r6, lsl #2]
   18dd4:	strdeq	r8, [r1], -ip
   18dd8:	andeq	r8, r1, r0, lsl lr
   18ddc:	andeq	r8, r1, r0, asr #28
   18de0:	andeq	r8, r1, r8, ror #28
   18de4:	muleq	r1, r0, lr
   18de8:			; <UNDEFINED> instruction: 0x00018eb8
   18dec:	andeq	r8, r1, r0, ror #29
   18df0:	andeq	r8, r1, r8, lsl pc
   18df4:	andeq	r8, r1, r0, asr #31
   18df8:	andeq	r8, r1, r8, ror #30
   18dfc:	sub	sp, fp, #24
   18e00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e04:	movw	r1, #49731	; 0xc243
   18e08:	movt	r1, #1
   18e0c:	b	18f70 <__assert_fail@plt+0x7ab4>
   18e10:	movw	r1, #49412	; 0xc104
   18e14:	mov	r0, #0
   18e18:	mov	r2, #5
   18e1c:	movt	r1, #1
   18e20:	bl	1124c <dcgettext@plt>
   18e24:	ldr	r3, [r7]
   18e28:	mov	r2, r0
   18e2c:	mov	r0, r8
   18e30:	mov	r1, #1
   18e34:	sub	sp, fp, #24
   18e38:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18e3c:	b	113b4 <__fprintf_chk@plt>
   18e40:	movw	r1, #49428	; 0xc114
   18e44:	mov	r0, #0
   18e48:	mov	r2, #5
   18e4c:	movt	r1, #1
   18e50:	bl	1124c <dcgettext@plt>
   18e54:	mov	r2, r0
   18e58:	ldr	r3, [r7]
   18e5c:	ldr	r0, [r7, #4]
   18e60:	str	r0, [sp]
   18e64:	b	18f54 <__assert_fail@plt+0x7a98>
   18e68:	movw	r1, #49451	; 0xc12b
   18e6c:	mov	r0, #0
   18e70:	mov	r2, #5
   18e74:	movt	r1, #1
   18e78:	bl	1124c <dcgettext@plt>
   18e7c:	mov	r2, r0
   18e80:	ldr	r3, [r7]
   18e84:	ldmib	r7, {r0, r1}
   18e88:	stm	sp, {r0, r1}
   18e8c:	b	18f54 <__assert_fail@plt+0x7a98>
   18e90:	movw	r1, #49479	; 0xc147
   18e94:	mov	r0, #0
   18e98:	mov	r2, #5
   18e9c:	movt	r1, #1
   18ea0:	bl	1124c <dcgettext@plt>
   18ea4:	ldr	r3, [r7]
   18ea8:	mov	r2, r0
   18eac:	ldmib	r7, {r0, r1, r7}
   18eb0:	stm	sp, {r0, r1, r7}
   18eb4:	b	18f54 <__assert_fail@plt+0x7a98>
   18eb8:	movw	r1, #49511	; 0xc167
   18ebc:	mov	r0, #0
   18ec0:	mov	r2, #5
   18ec4:	movt	r1, #1
   18ec8:	bl	1124c <dcgettext@plt>
   18ecc:	ldr	r3, [r7]
   18ed0:	mov	r2, r0
   18ed4:	ldmib	r7, {r0, r1, r6, r7}
   18ed8:	stm	sp, {r0, r1, r6, r7}
   18edc:	b	18f54 <__assert_fail@plt+0x7a98>
   18ee0:	movw	r1, #49547	; 0xc18b
   18ee4:	mov	r0, #0
   18ee8:	mov	r2, #5
   18eec:	movt	r1, #1
   18ef0:	bl	1124c <dcgettext@plt>
   18ef4:	mov	r2, r0
   18ef8:	ldr	r3, [r7]
   18efc:	ldmib	r7, {r0, r1, r6}
   18f00:	ldr	r5, [r7, #16]
   18f04:	ldr	r7, [r7, #20]
   18f08:	stm	sp, {r0, r1, r6}
   18f0c:	str	r5, [sp, #12]
   18f10:	str	r7, [sp, #16]
   18f14:	b	18f54 <__assert_fail@plt+0x7a98>
   18f18:	movw	r1, #49587	; 0xc1b3
   18f1c:	mov	r0, #0
   18f20:	mov	r2, #5
   18f24:	movt	r1, #1
   18f28:	bl	1124c <dcgettext@plt>
   18f2c:	mov	r2, r0
   18f30:	ldr	r3, [r7]
   18f34:	ldmib	r7, {r0, r1, r6}
   18f38:	ldr	r5, [r7, #16]
   18f3c:	ldr	r4, [r7, #20]
   18f40:	ldr	r7, [r7, #24]
   18f44:	stm	sp, {r0, r1, r6}
   18f48:	str	r5, [sp, #12]
   18f4c:	str	r4, [sp, #16]
   18f50:	str	r7, [sp, #20]
   18f54:	mov	r0, r8
   18f58:	mov	r1, #1
   18f5c:	bl	113b4 <__fprintf_chk@plt>
   18f60:	sub	sp, fp, #24
   18f64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f68:	movw	r1, #49679	; 0xc20f
   18f6c:	movt	r1, #1
   18f70:	mov	r0, #0
   18f74:	mov	r2, #5
   18f78:	bl	1124c <dcgettext@plt>
   18f7c:	mov	ip, r0
   18f80:	ldr	r3, [r7]
   18f84:	ldr	r0, [r7, #4]
   18f88:	ldr	r1, [r7, #8]
   18f8c:	ldr	r6, [r7, #12]
   18f90:	ldr	r5, [r7, #16]
   18f94:	ldr	r4, [r7, #20]
   18f98:	ldr	r2, [r7, #24]
   18f9c:	ldr	lr, [r7, #28]
   18fa0:	ldr	r7, [r7, #32]
   18fa4:	stm	sp, {r0, r1, r6}
   18fa8:	str	r5, [sp, #12]
   18fac:	str	r4, [sp, #16]
   18fb0:	str	r2, [sp, #20]
   18fb4:	str	lr, [sp, #24]
   18fb8:	str	r7, [sp, #28]
   18fbc:	b	19004 <__assert_fail@plt+0x7b48>
   18fc0:	movw	r1, #49631	; 0xc1df
   18fc4:	mov	r0, #0
   18fc8:	mov	r2, #5
   18fcc:	movt	r1, #1
   18fd0:	bl	1124c <dcgettext@plt>
   18fd4:	mov	ip, r0
   18fd8:	ldr	r3, [r7]
   18fdc:	ldmib	r7, {r0, r1, r6}
   18fe0:	ldr	r5, [r7, #16]
   18fe4:	ldr	r4, [r7, #20]
   18fe8:	ldr	r2, [r7, #24]
   18fec:	ldr	r7, [r7, #28]
   18ff0:	stm	sp, {r0, r1, r6}
   18ff4:	str	r5, [sp, #12]
   18ff8:	str	r4, [sp, #16]
   18ffc:	str	r2, [sp, #20]
   19000:	str	r7, [sp, #24]
   19004:	mov	r0, r8
   19008:	mov	r1, #1
   1900c:	mov	r2, ip
   19010:	bl	113b4 <__fprintf_chk@plt>
   19014:	sub	sp, fp, #24
   19018:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1901c:	push	{r4, sl, fp, lr}
   19020:	add	fp, sp, #8
   19024:	sub	sp, sp, #8
   19028:	ldr	ip, [fp, #8]
   1902c:	mov	lr, #0
   19030:	ldr	r4, [ip, lr, lsl #2]
   19034:	add	lr, lr, #1
   19038:	cmp	r4, #0
   1903c:	bne	19030 <__assert_fail@plt+0x7b74>
   19040:	sub	r4, lr, #1
   19044:	str	ip, [sp]
   19048:	str	r4, [sp, #4]
   1904c:	bl	18ce0 <__assert_fail@plt+0x7824>
   19050:	sub	sp, fp, #8
   19054:	pop	{r4, sl, fp, pc}
   19058:	push	{fp, lr}
   1905c:	mov	fp, sp
   19060:	sub	sp, sp, #48	; 0x30
   19064:	ldr	ip, [fp, #8]
   19068:	ldr	lr, [ip]
   1906c:	cmp	lr, #0
   19070:	str	lr, [sp, #8]
   19074:	beq	19110 <__assert_fail@plt+0x7c54>
   19078:	ldr	lr, [ip, #4]
   1907c:	cmp	lr, #0
   19080:	str	lr, [sp, #12]
   19084:	beq	19118 <__assert_fail@plt+0x7c5c>
   19088:	ldr	lr, [ip, #8]
   1908c:	cmp	lr, #0
   19090:	str	lr, [sp, #16]
   19094:	beq	19120 <__assert_fail@plt+0x7c64>
   19098:	ldr	lr, [ip, #12]
   1909c:	cmp	lr, #0
   190a0:	str	lr, [sp, #20]
   190a4:	beq	19128 <__assert_fail@plt+0x7c6c>
   190a8:	ldr	lr, [ip, #16]
   190ac:	cmp	lr, #0
   190b0:	str	lr, [sp, #24]
   190b4:	beq	19130 <__assert_fail@plt+0x7c74>
   190b8:	ldr	lr, [ip, #20]
   190bc:	cmp	lr, #0
   190c0:	str	lr, [sp, #28]
   190c4:	beq	19138 <__assert_fail@plt+0x7c7c>
   190c8:	ldr	lr, [ip, #24]
   190cc:	cmp	lr, #0
   190d0:	str	lr, [sp, #32]
   190d4:	beq	19140 <__assert_fail@plt+0x7c84>
   190d8:	ldr	lr, [ip, #28]
   190dc:	cmp	lr, #0
   190e0:	str	lr, [sp, #36]	; 0x24
   190e4:	beq	19148 <__assert_fail@plt+0x7c8c>
   190e8:	ldr	lr, [ip, #32]
   190ec:	cmp	lr, #0
   190f0:	str	lr, [sp, #40]	; 0x28
   190f4:	beq	19150 <__assert_fail@plt+0x7c94>
   190f8:	ldr	lr, [ip, #36]	; 0x24
   190fc:	mov	ip, #10
   19100:	cmp	lr, #0
   19104:	str	lr, [sp, #44]	; 0x2c
   19108:	movweq	ip, #9
   1910c:	b	19154 <__assert_fail@plt+0x7c98>
   19110:	mov	ip, #0
   19114:	b	19154 <__assert_fail@plt+0x7c98>
   19118:	mov	ip, #1
   1911c:	b	19154 <__assert_fail@plt+0x7c98>
   19120:	mov	ip, #2
   19124:	b	19154 <__assert_fail@plt+0x7c98>
   19128:	mov	ip, #3
   1912c:	b	19154 <__assert_fail@plt+0x7c98>
   19130:	mov	ip, #4
   19134:	b	19154 <__assert_fail@plt+0x7c98>
   19138:	mov	ip, #5
   1913c:	b	19154 <__assert_fail@plt+0x7c98>
   19140:	mov	ip, #6
   19144:	b	19154 <__assert_fail@plt+0x7c98>
   19148:	mov	ip, #7
   1914c:	b	19154 <__assert_fail@plt+0x7c98>
   19150:	mov	ip, #8
   19154:	add	lr, sp, #8
   19158:	str	ip, [sp, #4]
   1915c:	str	lr, [sp]
   19160:	bl	18ce0 <__assert_fail@plt+0x7824>
   19164:	mov	sp, fp
   19168:	pop	{fp, pc}
   1916c:	push	{fp, lr}
   19170:	mov	fp, sp
   19174:	sub	sp, sp, #56	; 0x38
   19178:	add	ip, fp, #8
   1917c:	str	ip, [sp, #12]
   19180:	ldr	lr, [fp, #8]
   19184:	cmp	lr, #0
   19188:	str	lr, [sp, #16]
   1918c:	beq	19228 <__assert_fail@plt+0x7d6c>
   19190:	ldr	lr, [ip, #4]
   19194:	cmp	lr, #0
   19198:	str	lr, [sp, #20]
   1919c:	beq	19230 <__assert_fail@plt+0x7d74>
   191a0:	ldr	lr, [ip, #8]
   191a4:	cmp	lr, #0
   191a8:	str	lr, [sp, #24]
   191ac:	beq	19238 <__assert_fail@plt+0x7d7c>
   191b0:	ldr	lr, [ip, #12]
   191b4:	cmp	lr, #0
   191b8:	str	lr, [sp, #28]
   191bc:	beq	19240 <__assert_fail@plt+0x7d84>
   191c0:	ldr	lr, [ip, #16]
   191c4:	cmp	lr, #0
   191c8:	str	lr, [sp, #32]
   191cc:	beq	19248 <__assert_fail@plt+0x7d8c>
   191d0:	ldr	lr, [ip, #20]
   191d4:	cmp	lr, #0
   191d8:	str	lr, [sp, #36]	; 0x24
   191dc:	beq	19250 <__assert_fail@plt+0x7d94>
   191e0:	ldr	lr, [ip, #24]
   191e4:	cmp	lr, #0
   191e8:	str	lr, [sp, #40]	; 0x28
   191ec:	beq	19258 <__assert_fail@plt+0x7d9c>
   191f0:	ldr	lr, [ip, #28]
   191f4:	cmp	lr, #0
   191f8:	str	lr, [sp, #44]	; 0x2c
   191fc:	beq	19260 <__assert_fail@plt+0x7da4>
   19200:	ldr	lr, [ip, #32]
   19204:	cmp	lr, #0
   19208:	str	lr, [sp, #48]	; 0x30
   1920c:	beq	19268 <__assert_fail@plt+0x7dac>
   19210:	ldr	lr, [ip, #36]	; 0x24
   19214:	mov	ip, #10
   19218:	cmp	lr, #0
   1921c:	str	lr, [sp, #52]	; 0x34
   19220:	movweq	ip, #9
   19224:	b	1926c <__assert_fail@plt+0x7db0>
   19228:	mov	ip, #0
   1922c:	b	1926c <__assert_fail@plt+0x7db0>
   19230:	mov	ip, #1
   19234:	b	1926c <__assert_fail@plt+0x7db0>
   19238:	mov	ip, #2
   1923c:	b	1926c <__assert_fail@plt+0x7db0>
   19240:	mov	ip, #3
   19244:	b	1926c <__assert_fail@plt+0x7db0>
   19248:	mov	ip, #4
   1924c:	b	1926c <__assert_fail@plt+0x7db0>
   19250:	mov	ip, #5
   19254:	b	1926c <__assert_fail@plt+0x7db0>
   19258:	mov	ip, #6
   1925c:	b	1926c <__assert_fail@plt+0x7db0>
   19260:	mov	ip, #7
   19264:	b	1926c <__assert_fail@plt+0x7db0>
   19268:	mov	ip, #8
   1926c:	add	lr, sp, #16
   19270:	str	ip, [sp, #4]
   19274:	str	lr, [sp]
   19278:	bl	18ce0 <__assert_fail@plt+0x7824>
   1927c:	mov	sp, fp
   19280:	pop	{fp, pc}
   19284:	push	{fp, lr}
   19288:	mov	fp, sp
   1928c:	movw	r0, #53636	; 0xd184
   19290:	movt	r0, #2
   19294:	ldr	r1, [r0]
   19298:	movw	r0, #46675	; 0xb653
   1929c:	movt	r0, #1
   192a0:	bl	111bc <fputs_unlocked@plt>
   192a4:	movw	r1, #49791	; 0xc27f
   192a8:	mov	r0, #0
   192ac:	mov	r2, #5
   192b0:	movt	r1, #1
   192b4:	bl	1124c <dcgettext@plt>
   192b8:	movw	r2, #49811	; 0xc293
   192bc:	mov	r1, r0
   192c0:	mov	r0, #1
   192c4:	movt	r2, #1
   192c8:	bl	1139c <__printf_chk@plt>
   192cc:	movw	r1, #49833	; 0xc2a9
   192d0:	mov	r0, #0
   192d4:	mov	r2, #5
   192d8:	movt	r1, #1
   192dc:	bl	1124c <dcgettext@plt>
   192e0:	movw	r2, #46948	; 0xb764
   192e4:	movw	r3, #47223	; 0xb877
   192e8:	mov	r1, r0
   192ec:	mov	r0, #1
   192f0:	movt	r2, #1
   192f4:	movt	r3, #1
   192f8:	bl	1139c <__printf_chk@plt>
   192fc:	movw	r1, #49853	; 0xc2bd
   19300:	mov	r0, #0
   19304:	mov	r2, #5
   19308:	movt	r1, #1
   1930c:	bl	1124c <dcgettext@plt>
   19310:	movw	r2, #49892	; 0xc2e4
   19314:	mov	r1, r0
   19318:	mov	r0, #1
   1931c:	movt	r2, #1
   19320:	pop	{fp, lr}
   19324:	b	1139c <__printf_chk@plt>
   19328:	push	{r4, r5, r6, sl, fp, lr}
   1932c:	add	fp, sp, #16
   19330:	mov	r4, r2
   19334:	mov	r5, r1
   19338:	mov	r6, r0
   1933c:	bl	1acf4 <__assert_fail@plt+0x9838>
   19340:	cmp	r0, #0
   19344:	popne	{r4, r5, r6, sl, fp, pc}
   19348:	cmp	r6, #0
   1934c:	beq	19360 <__assert_fail@plt+0x7ea4>
   19350:	cmp	r5, #0
   19354:	cmpne	r4, #0
   19358:	bne	19360 <__assert_fail@plt+0x7ea4>
   1935c:	pop	{r4, r5, r6, sl, fp, pc}
   19360:	bl	198dc <__assert_fail@plt+0x8420>
   19364:	push	{r4, r5, r6, sl, fp, lr}
   19368:	add	fp, sp, #16
   1936c:	mov	r4, r2
   19370:	mov	r5, r1
   19374:	mov	r6, r0
   19378:	bl	1acf4 <__assert_fail@plt+0x9838>
   1937c:	cmp	r0, #0
   19380:	popne	{r4, r5, r6, sl, fp, pc}
   19384:	cmp	r6, #0
   19388:	beq	1939c <__assert_fail@plt+0x7ee0>
   1938c:	cmp	r5, #0
   19390:	cmpne	r4, #0
   19394:	bne	1939c <__assert_fail@plt+0x7ee0>
   19398:	pop	{r4, r5, r6, sl, fp, pc}
   1939c:	bl	198dc <__assert_fail@plt+0x8420>
   193a0:	push	{fp, lr}
   193a4:	mov	fp, sp
   193a8:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   193ac:	cmp	r0, #0
   193b0:	popne	{fp, pc}
   193b4:	bl	198dc <__assert_fail@plt+0x8420>
   193b8:	push	{fp, lr}
   193bc:	mov	fp, sp
   193c0:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   193c4:	cmp	r0, #0
   193c8:	popne	{fp, pc}
   193cc:	bl	198dc <__assert_fail@plt+0x8420>
   193d0:	push	{fp, lr}
   193d4:	mov	fp, sp
   193d8:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   193dc:	cmp	r0, #0
   193e0:	popne	{fp, pc}
   193e4:	bl	198dc <__assert_fail@plt+0x8420>
   193e8:	push	{r4, r5, fp, lr}
   193ec:	add	fp, sp, #8
   193f0:	mov	r4, r1
   193f4:	mov	r5, r0
   193f8:	bl	1a6d4 <__assert_fail@plt+0x9218>
   193fc:	cmp	r0, #0
   19400:	popne	{r4, r5, fp, pc}
   19404:	cmp	r5, #0
   19408:	beq	19418 <__assert_fail@plt+0x7f5c>
   1940c:	cmp	r4, #0
   19410:	bne	19418 <__assert_fail@plt+0x7f5c>
   19414:	pop	{r4, r5, fp, pc}
   19418:	bl	198dc <__assert_fail@plt+0x8420>
   1941c:	push	{fp, lr}
   19420:	mov	fp, sp
   19424:	cmp	r1, #0
   19428:	orreq	r1, r1, #1
   1942c:	bl	1a6d4 <__assert_fail@plt+0x9218>
   19430:	cmp	r0, #0
   19434:	popne	{fp, pc}
   19438:	bl	198dc <__assert_fail@plt+0x8420>
   1943c:	push	{fp, lr}
   19440:	mov	fp, sp
   19444:	clz	r3, r2
   19448:	lsr	ip, r3, #5
   1944c:	clz	r3, r1
   19450:	lsr	r3, r3, #5
   19454:	orrs	r3, r3, ip
   19458:	movwne	r1, #1
   1945c:	movwne	r2, #1
   19460:	bl	1acf4 <__assert_fail@plt+0x9838>
   19464:	cmp	r0, #0
   19468:	popne	{fp, pc}
   1946c:	bl	198dc <__assert_fail@plt+0x8420>
   19470:	push	{fp, lr}
   19474:	mov	fp, sp
   19478:	mov	r2, r1
   1947c:	mov	r1, r0
   19480:	mov	r0, #0
   19484:	bl	1acf4 <__assert_fail@plt+0x9838>
   19488:	cmp	r0, #0
   1948c:	popne	{fp, pc}
   19490:	bl	198dc <__assert_fail@plt+0x8420>
   19494:	push	{fp, lr}
   19498:	mov	fp, sp
   1949c:	mov	r2, r1
   194a0:	mov	r1, r0
   194a4:	clz	r0, r2
   194a8:	clz	r3, r1
   194ac:	lsr	r0, r0, #5
   194b0:	lsr	r3, r3, #5
   194b4:	orrs	r0, r3, r0
   194b8:	mov	r0, #0
   194bc:	movwne	r1, #1
   194c0:	movwne	r2, #1
   194c4:	bl	1acf4 <__assert_fail@plt+0x9838>
   194c8:	cmp	r0, #0
   194cc:	popne	{fp, pc}
   194d0:	bl	198dc <__assert_fail@plt+0x8420>
   194d4:	push	{r4, r5, r6, sl, fp, lr}
   194d8:	add	fp, sp, #16
   194dc:	ldr	r5, [r1]
   194e0:	mov	r4, r1
   194e4:	mov	r6, r0
   194e8:	cmp	r0, #0
   194ec:	beq	19504 <__assert_fail@plt+0x8048>
   194f0:	mov	r0, #1
   194f4:	add	r0, r0, r5, lsr #1
   194f8:	adds	r5, r5, r0
   194fc:	bcc	1950c <__assert_fail@plt+0x8050>
   19500:	b	19548 <__assert_fail@plt+0x808c>
   19504:	cmp	r5, #0
   19508:	movweq	r5, #64	; 0x40
   1950c:	mov	r0, r6
   19510:	mov	r1, r5
   19514:	mov	r2, #1
   19518:	bl	1acf4 <__assert_fail@plt+0x9838>
   1951c:	cmp	r5, #0
   19520:	mov	r1, r5
   19524:	movwne	r1, #1
   19528:	cmp	r0, #0
   1952c:	bne	19540 <__assert_fail@plt+0x8084>
   19530:	clz	r2, r6
   19534:	lsr	r2, r2, #5
   19538:	orrs	r1, r2, r1
   1953c:	bne	19548 <__assert_fail@plt+0x808c>
   19540:	str	r5, [r4]
   19544:	pop	{r4, r5, r6, sl, fp, pc}
   19548:	bl	198dc <__assert_fail@plt+0x8420>
   1954c:	push	{r4, r5, r6, r7, fp, lr}
   19550:	add	fp, sp, #16
   19554:	ldr	r5, [r1]
   19558:	mov	r6, r2
   1955c:	mov	r4, r1
   19560:	mov	r7, r0
   19564:	cmp	r0, #0
   19568:	beq	19580 <__assert_fail@plt+0x80c4>
   1956c:	mov	r0, #1
   19570:	add	r0, r0, r5, lsr #1
   19574:	adds	r5, r5, r0
   19578:	bcc	19598 <__assert_fail@plt+0x80dc>
   1957c:	b	195cc <__assert_fail@plt+0x8110>
   19580:	cmp	r5, #0
   19584:	bne	19598 <__assert_fail@plt+0x80dc>
   19588:	mov	r0, #64	; 0x40
   1958c:	cmp	r6, #64	; 0x40
   19590:	udiv	r5, r0, r6
   19594:	addhi	r5, r5, #1
   19598:	mov	r0, r7
   1959c:	mov	r1, r5
   195a0:	mov	r2, r6
   195a4:	bl	1acf4 <__assert_fail@plt+0x9838>
   195a8:	cmp	r0, #0
   195ac:	bne	195c4 <__assert_fail@plt+0x8108>
   195b0:	cmp	r7, #0
   195b4:	beq	195cc <__assert_fail@plt+0x8110>
   195b8:	cmp	r6, #0
   195bc:	cmpne	r5, #0
   195c0:	bne	195cc <__assert_fail@plt+0x8110>
   195c4:	str	r5, [r4]
   195c8:	pop	{r4, r5, r6, r7, fp, pc}
   195cc:	bl	198dc <__assert_fail@plt+0x8420>
   195d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   195d4:	add	fp, sp, #24
   195d8:	mov	r8, r1
   195dc:	ldr	r1, [r1]
   195e0:	mov	r5, r0
   195e4:	add	r0, r1, r1, asr #1
   195e8:	cmp	r0, r1
   195ec:	mvnvs	r0, #-2147483648	; 0x80000000
   195f0:	cmp	r0, r3
   195f4:	mov	r7, r0
   195f8:	movgt	r7, r3
   195fc:	cmn	r3, #1
   19600:	movle	r7, r0
   19604:	ldr	r0, [fp, #8]
   19608:	cmn	r0, #1
   1960c:	ble	19634 <__assert_fail@plt+0x8178>
   19610:	cmp	r0, #0
   19614:	beq	19688 <__assert_fail@plt+0x81cc>
   19618:	cmn	r7, #1
   1961c:	ble	1965c <__assert_fail@plt+0x81a0>
   19620:	mvn	r4, #-2147483648	; 0x80000000
   19624:	udiv	r6, r4, r0
   19628:	cmp	r6, r7
   1962c:	bge	19688 <__assert_fail@plt+0x81cc>
   19630:	b	19698 <__assert_fail@plt+0x81dc>
   19634:	cmn	r7, #1
   19638:	ble	19678 <__assert_fail@plt+0x81bc>
   1963c:	cmn	r0, #1
   19640:	beq	19688 <__assert_fail@plt+0x81cc>
   19644:	mov	r6, #-2147483648	; 0x80000000
   19648:	mvn	r4, #-2147483648	; 0x80000000
   1964c:	sdiv	r6, r6, r0
   19650:	cmp	r6, r7
   19654:	bge	19688 <__assert_fail@plt+0x81cc>
   19658:	b	19698 <__assert_fail@plt+0x81dc>
   1965c:	beq	19688 <__assert_fail@plt+0x81cc>
   19660:	mov	r6, #-2147483648	; 0x80000000
   19664:	mvn	r4, #-2147483648	; 0x80000000
   19668:	sdiv	r6, r6, r7
   1966c:	cmp	r6, r0
   19670:	bge	19688 <__assert_fail@plt+0x81cc>
   19674:	b	19698 <__assert_fail@plt+0x81dc>
   19678:	mvn	r4, #-2147483648	; 0x80000000
   1967c:	sdiv	r6, r4, r0
   19680:	cmp	r7, r6
   19684:	blt	19698 <__assert_fail@plt+0x81dc>
   19688:	mul	r6, r7, r0
   1968c:	mov	r4, #64	; 0x40
   19690:	cmp	r6, #63	; 0x3f
   19694:	bgt	196a0 <__assert_fail@plt+0x81e4>
   19698:	sdiv	r7, r4, r0
   1969c:	mul	r6, r7, r0
   196a0:	cmp	r5, #0
   196a4:	moveq	r4, #0
   196a8:	streq	r4, [r8]
   196ac:	sub	r4, r7, r1
   196b0:	cmp	r4, r2
   196b4:	bge	19760 <__assert_fail@plt+0x82a4>
   196b8:	add	r7, r1, r2
   196bc:	mov	r6, #0
   196c0:	mov	r2, #0
   196c4:	cmp	r7, r3
   196c8:	movwgt	r6, #1
   196cc:	cmn	r3, #1
   196d0:	movwgt	r2, #1
   196d4:	cmp	r7, r1
   196d8:	bvs	19794 <__assert_fail@plt+0x82d8>
   196dc:	ands	r1, r2, r6
   196e0:	bne	19794 <__assert_fail@plt+0x82d8>
   196e4:	cmn	r0, #1
   196e8:	ble	19710 <__assert_fail@plt+0x8254>
   196ec:	cmp	r0, #0
   196f0:	beq	1975c <__assert_fail@plt+0x82a0>
   196f4:	cmn	r7, #1
   196f8:	ble	19734 <__assert_fail@plt+0x8278>
   196fc:	mvn	r1, #-2147483648	; 0x80000000
   19700:	udiv	r1, r1, r0
   19704:	cmp	r1, r7
   19708:	bge	1975c <__assert_fail@plt+0x82a0>
   1970c:	b	19794 <__assert_fail@plt+0x82d8>
   19710:	cmn	r7, #1
   19714:	ble	1974c <__assert_fail@plt+0x8290>
   19718:	cmn	r0, #1
   1971c:	beq	1975c <__assert_fail@plt+0x82a0>
   19720:	mov	r1, #-2147483648	; 0x80000000
   19724:	sdiv	r1, r1, r0
   19728:	cmp	r1, r7
   1972c:	bge	1975c <__assert_fail@plt+0x82a0>
   19730:	b	19794 <__assert_fail@plt+0x82d8>
   19734:	beq	1975c <__assert_fail@plt+0x82a0>
   19738:	mov	r1, #-2147483648	; 0x80000000
   1973c:	sdiv	r1, r1, r7
   19740:	cmp	r1, r0
   19744:	bge	1975c <__assert_fail@plt+0x82a0>
   19748:	b	19794 <__assert_fail@plt+0x82d8>
   1974c:	mvn	r1, #-2147483648	; 0x80000000
   19750:	sdiv	r1, r1, r0
   19754:	cmp	r7, r1
   19758:	blt	19794 <__assert_fail@plt+0x82d8>
   1975c:	mul	r6, r7, r0
   19760:	mov	r0, r5
   19764:	mov	r1, r6
   19768:	bl	1a6d4 <__assert_fail@plt+0x9218>
   1976c:	cmp	r6, #0
   19770:	movwne	r6, #1
   19774:	cmp	r0, #0
   19778:	bne	1978c <__assert_fail@plt+0x82d0>
   1977c:	clz	r1, r5
   19780:	lsr	r1, r1, #5
   19784:	orrs	r1, r1, r6
   19788:	bne	19794 <__assert_fail@plt+0x82d8>
   1978c:	str	r7, [r8]
   19790:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19794:	bl	198dc <__assert_fail@plt+0x8420>
   19798:	push	{fp, lr}
   1979c:	mov	fp, sp
   197a0:	mov	r1, #1
   197a4:	bl	1a650 <__assert_fail@plt+0x9194>
   197a8:	cmp	r0, #0
   197ac:	popne	{fp, pc}
   197b0:	bl	198dc <__assert_fail@plt+0x8420>
   197b4:	push	{fp, lr}
   197b8:	mov	fp, sp
   197bc:	bl	1a650 <__assert_fail@plt+0x9194>
   197c0:	cmp	r0, #0
   197c4:	popne	{fp, pc}
   197c8:	bl	198dc <__assert_fail@plt+0x8420>
   197cc:	push	{fp, lr}
   197d0:	mov	fp, sp
   197d4:	mov	r1, #1
   197d8:	bl	1a650 <__assert_fail@plt+0x9194>
   197dc:	cmp	r0, #0
   197e0:	popne	{fp, pc}
   197e4:	bl	198dc <__assert_fail@plt+0x8420>
   197e8:	push	{fp, lr}
   197ec:	mov	fp, sp
   197f0:	bl	1a650 <__assert_fail@plt+0x9194>
   197f4:	cmp	r0, #0
   197f8:	popne	{fp, pc}
   197fc:	bl	198dc <__assert_fail@plt+0x8420>
   19800:	push	{r4, r5, fp, lr}
   19804:	add	fp, sp, #8
   19808:	mov	r5, r0
   1980c:	mov	r0, r1
   19810:	mov	r4, r1
   19814:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   19818:	cmp	r0, #0
   1981c:	beq	19830 <__assert_fail@plt+0x8374>
   19820:	mov	r1, r5
   19824:	mov	r2, r4
   19828:	pop	{r4, r5, fp, lr}
   1982c:	b	1121c <memcpy@plt>
   19830:	bl	198dc <__assert_fail@plt+0x8420>
   19834:	push	{r4, r5, fp, lr}
   19838:	add	fp, sp, #8
   1983c:	mov	r5, r0
   19840:	mov	r0, r1
   19844:	mov	r4, r1
   19848:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   1984c:	cmp	r0, #0
   19850:	beq	19864 <__assert_fail@plt+0x83a8>
   19854:	mov	r1, r5
   19858:	mov	r2, r4
   1985c:	pop	{r4, r5, fp, lr}
   19860:	b	1121c <memcpy@plt>
   19864:	bl	198dc <__assert_fail@plt+0x8420>
   19868:	push	{r4, r5, fp, lr}
   1986c:	add	fp, sp, #8
   19870:	mov	r5, r0
   19874:	add	r0, r1, #1
   19878:	mov	r4, r1
   1987c:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   19880:	cmp	r0, #0
   19884:	beq	198a0 <__assert_fail@plt+0x83e4>
   19888:	mov	r1, #0
   1988c:	mov	r2, r4
   19890:	strb	r1, [r0, r4]
   19894:	mov	r1, r5
   19898:	pop	{r4, r5, fp, lr}
   1989c:	b	1121c <memcpy@plt>
   198a0:	bl	198dc <__assert_fail@plt+0x8420>
   198a4:	push	{r4, r5, fp, lr}
   198a8:	add	fp, sp, #8
   198ac:	mov	r4, r0
   198b0:	bl	11348 <strlen@plt>
   198b4:	add	r5, r0, #1
   198b8:	mov	r0, r5
   198bc:	bl	1a6a4 <__assert_fail@plt+0x91e8>
   198c0:	cmp	r0, #0
   198c4:	beq	198d8 <__assert_fail@plt+0x841c>
   198c8:	mov	r1, r4
   198cc:	mov	r2, r5
   198d0:	pop	{r4, r5, fp, lr}
   198d4:	b	1121c <memcpy@plt>
   198d8:	bl	198dc <__assert_fail@plt+0x8420>
   198dc:	push	{fp, lr}
   198e0:	mov	fp, sp
   198e4:	movw	r0, #53548	; 0xd12c
   198e8:	movw	r1, #49968	; 0xc330
   198ec:	mov	r2, #5
   198f0:	movt	r0, #2
   198f4:	movt	r1, #1
   198f8:	ldr	r4, [r0]
   198fc:	mov	r0, #0
   19900:	bl	1124c <dcgettext@plt>
   19904:	movw	r2, #47515	; 0xb99b
   19908:	mov	r3, r0
   1990c:	mov	r0, r4
   19910:	mov	r1, #0
   19914:	movt	r2, #1
   19918:	bl	112d0 <error@plt>
   1991c:	bl	11474 <abort@plt>
   19920:	push	{fp, lr}
   19924:	mov	fp, sp
   19928:	orr	r1, r1, #512	; 0x200
   1992c:	bl	12e40 <__assert_fail@plt+0x1984>
   19930:	cmp	r0, #0
   19934:	popne	{fp, pc}
   19938:	bl	11378 <__errno_location@plt>
   1993c:	ldr	r0, [r0]
   19940:	cmp	r0, #22
   19944:	bne	19968 <__assert_fail@plt+0x84ac>
   19948:	movw	r0, #49985	; 0xc341
   1994c:	movw	r1, #50001	; 0xc351
   19950:	movw	r3, #50012	; 0xc35c
   19954:	mov	r2, #41	; 0x29
   19958:	movt	r0, #1
   1995c:	movt	r1, #1
   19960:	movt	r3, #1
   19964:	bl	114bc <__assert_fail@plt>
   19968:	bl	198dc <__assert_fail@plt+0x8420>
   1996c:	ldr	r0, [r0, #48]	; 0x30
   19970:	and	r0, r0, #17
   19974:	cmp	r0, #16
   19978:	moveq	r0, #1
   1997c:	bxeq	lr
   19980:	cmp	r0, #17
   19984:	movne	r0, #0
   19988:	bxne	lr
   1998c:	ldr	r0, [r1, #48]	; 0x30
   19990:	cmp	r0, #0
   19994:	movwne	r0, #1
   19998:	bx	lr
   1999c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199a0:	add	fp, sp, #28
   199a4:	sub	sp, sp, #44	; 0x2c
   199a8:	cmp	r2, #37	; 0x25
   199ac:	bcs	1a630 <__assert_fail@plt+0x9174>
   199b0:	ldr	sl, [fp, #8]
   199b4:	mov	r6, r2
   199b8:	mov	r7, r1
   199bc:	mov	r4, r0
   199c0:	str	r3, [sp, #36]	; 0x24
   199c4:	bl	11378 <__errno_location@plt>
   199c8:	mov	r5, r0
   199cc:	mov	r0, #0
   199d0:	str	r0, [r5]
   199d4:	bl	11324 <__ctype_b_loc@plt>
   199d8:	ldr	r1, [r0]
   199dc:	mov	r2, r4
   199e0:	ldrb	r0, [r2], #1
   199e4:	add	r3, r1, r0, lsl #1
   199e8:	ldrb	r3, [r3, #1]
   199ec:	tst	r3, #32
   199f0:	bne	199e0 <__assert_fail@plt+0x8524>
   199f4:	cmp	r7, #0
   199f8:	sub	r9, fp, #32
   199fc:	mov	r8, #4
   19a00:	movne	r9, r7
   19a04:	cmp	r0, #45	; 0x2d
   19a08:	beq	19dc8 <__assert_fail@plt+0x890c>
   19a0c:	mov	r0, r4
   19a10:	mov	r1, r9
   19a14:	mov	r2, r6
   19a18:	mov	r3, #0
   19a1c:	bl	11228 <__strtoull_internal@plt>
   19a20:	mov	r7, r1
   19a24:	ldr	r1, [r9]
   19a28:	cmp	r1, r4
   19a2c:	beq	19a64 <__assert_fail@plt+0x85a8>
   19a30:	mov	r6, r0
   19a34:	ldr	r0, [r5]
   19a38:	cmp	r0, #0
   19a3c:	beq	19d80 <__assert_fail@plt+0x88c4>
   19a40:	cmp	r0, #34	; 0x22
   19a44:	bne	19dc8 <__assert_fail@plt+0x890c>
   19a48:	mov	r8, #1
   19a4c:	cmp	sl, #0
   19a50:	beq	1a61c <__assert_fail@plt+0x9160>
   19a54:	ldrb	r4, [r1]
   19a58:	cmp	r4, #0
   19a5c:	bne	19aa8 <__assert_fail@plt+0x85ec>
   19a60:	b	1a61c <__assert_fail@plt+0x9160>
   19a64:	cmp	sl, #0
   19a68:	beq	19dc8 <__assert_fail@plt+0x890c>
   19a6c:	mov	r5, r1
   19a70:	ldrb	r1, [r4]
   19a74:	cmp	r1, #0
   19a78:	beq	19dc8 <__assert_fail@plt+0x890c>
   19a7c:	mov	r0, sl
   19a80:	bl	11354 <strchr@plt>
   19a84:	cmp	r0, #0
   19a88:	beq	19dc8 <__assert_fail@plt+0x890c>
   19a8c:	mov	r1, r5
   19a90:	mov	r8, #0
   19a94:	mov	r6, #1
   19a98:	mov	r7, #0
   19a9c:	ldrb	r4, [r1]
   19aa0:	cmp	r4, #0
   19aa4:	beq	1a61c <__assert_fail@plt+0x9160>
   19aa8:	str	r1, [sp, #32]
   19aac:	mov	r0, sl
   19ab0:	mov	r1, r4
   19ab4:	bl	11354 <strchr@plt>
   19ab8:	cmp	r0, #0
   19abc:	beq	19dbc <__assert_fail@plt+0x8900>
   19ac0:	sub	r0, r4, #69	; 0x45
   19ac4:	mov	r1, #1
   19ac8:	mov	r3, #0
   19acc:	mov	r5, #1024	; 0x400
   19ad0:	cmp	r0, #47	; 0x2f
   19ad4:	str	r1, [sp, #28]
   19ad8:	bhi	19bdc <__assert_fail@plt+0x8720>
   19adc:	add	r1, pc, #0
   19ae0:	ldr	pc, [r1, r0, lsl #2]
   19ae4:	andeq	r9, r1, r4, lsr #23
   19ae8:	ldrdeq	r9, [r1], -ip
   19aec:	andeq	r9, r1, r4, lsr #23
   19af0:	ldrdeq	r9, [r1], -ip
   19af4:	ldrdeq	r9, [r1], -ip
   19af8:	ldrdeq	r9, [r1], -ip
   19afc:	andeq	r9, r1, r4, lsr #23
   19b00:	ldrdeq	r9, [r1], -ip
   19b04:	andeq	r9, r1, r4, lsr #23
   19b08:	ldrdeq	r9, [r1], -ip
   19b0c:	ldrdeq	r9, [r1], -ip
   19b10:	andeq	r9, r1, r4, lsr #23
   19b14:	ldrdeq	r9, [r1], -ip
   19b18:	ldrdeq	r9, [r1], -ip
   19b1c:	ldrdeq	r9, [r1], -ip
   19b20:	andeq	r9, r1, r4, lsr #23
   19b24:	ldrdeq	r9, [r1], -ip
   19b28:	ldrdeq	r9, [r1], -ip
   19b2c:	ldrdeq	r9, [r1], -ip
   19b30:	ldrdeq	r9, [r1], -ip
   19b34:	andeq	r9, r1, r4, lsr #23
   19b38:	andeq	r9, r1, r4, lsr #23
   19b3c:	ldrdeq	r9, [r1], -ip
   19b40:	ldrdeq	r9, [r1], -ip
   19b44:	ldrdeq	r9, [r1], -ip
   19b48:	ldrdeq	r9, [r1], -ip
   19b4c:	ldrdeq	r9, [r1], -ip
   19b50:	ldrdeq	r9, [r1], -ip
   19b54:	ldrdeq	r9, [r1], -ip
   19b58:	ldrdeq	r9, [r1], -ip
   19b5c:	ldrdeq	r9, [r1], -ip
   19b60:	ldrdeq	r9, [r1], -ip
   19b64:	ldrdeq	r9, [r1], -ip
   19b68:	ldrdeq	r9, [r1], -ip
   19b6c:	andeq	r9, r1, r4, lsr #23
   19b70:	ldrdeq	r9, [r1], -ip
   19b74:	ldrdeq	r9, [r1], -ip
   19b78:	ldrdeq	r9, [r1], -ip
   19b7c:	andeq	r9, r1, r4, lsr #23
   19b80:	ldrdeq	r9, [r1], -ip
   19b84:	andeq	r9, r1, r4, lsr #23
   19b88:	ldrdeq	r9, [r1], -ip
   19b8c:	ldrdeq	r9, [r1], -ip
   19b90:	ldrdeq	r9, [r1], -ip
   19b94:	ldrdeq	r9, [r1], -ip
   19b98:	ldrdeq	r9, [r1], -ip
   19b9c:	ldrdeq	r9, [r1], -ip
   19ba0:	andeq	r9, r1, r4, lsr #23
   19ba4:	mov	r0, sl
   19ba8:	mov	r1, #48	; 0x30
   19bac:	bl	11354 <strchr@plt>
   19bb0:	cmp	r0, #0
   19bb4:	beq	19bd8 <__assert_fail@plt+0x871c>
   19bb8:	ldr	r1, [sp, #32]
   19bbc:	ldrb	r0, [r1, #1]
   19bc0:	cmp	r0, #66	; 0x42
   19bc4:	cmpne	r0, #68	; 0x44
   19bc8:	bne	19d90 <__assert_fail@plt+0x88d4>
   19bcc:	mov	r5, #1000	; 0x3e8
   19bd0:	mov	r0, #2
   19bd4:	str	r0, [sp, #28]
   19bd8:	mov	r3, #0
   19bdc:	sub	r0, r4, #66	; 0x42
   19be0:	cmp	r0, #53	; 0x35
   19be4:	bhi	19dbc <__assert_fail@plt+0x8900>
   19be8:	add	r1, pc, #0
   19bec:	ldr	pc, [r1, r0, lsl #2]
   19bf0:	andeq	sl, r1, ip, lsr #2
   19bf4:			; <UNDEFINED> instruction: 0x00019dbc
   19bf8:			; <UNDEFINED> instruction: 0x00019dbc
   19bfc:	andeq	sl, r1, r4, asr r1
   19c00:			; <UNDEFINED> instruction: 0x00019dbc
   19c04:	andeq	r9, r1, r8, asr #25
   19c08:			; <UNDEFINED> instruction: 0x00019dbc
   19c0c:			; <UNDEFINED> instruction: 0x00019dbc
   19c10:			; <UNDEFINED> instruction: 0x00019dbc
   19c14:	ldrdeq	r9, [r1], -r4
   19c18:			; <UNDEFINED> instruction: 0x00019dbc
   19c1c:	andeq	r9, r1, ip, lsl lr
   19c20:			; <UNDEFINED> instruction: 0x00019dbc
   19c24:			; <UNDEFINED> instruction: 0x00019dbc
   19c28:	andeq	sl, r1, r8, lsr #5
   19c2c:			; <UNDEFINED> instruction: 0x00019dbc
   19c30:			; <UNDEFINED> instruction: 0x00019dbc
   19c34:			; <UNDEFINED> instruction: 0x00019dbc
   19c38:	andeq	r9, r1, r8, lsr #29
   19c3c:			; <UNDEFINED> instruction: 0x00019dbc
   19c40:			; <UNDEFINED> instruction: 0x00019dbc
   19c44:			; <UNDEFINED> instruction: 0x00019dbc
   19c48:			; <UNDEFINED> instruction: 0x00019dbc
   19c4c:	ldrdeq	sl, [r1], -r0
   19c50:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19c54:			; <UNDEFINED> instruction: 0x00019dbc
   19c58:			; <UNDEFINED> instruction: 0x00019dbc
   19c5c:			; <UNDEFINED> instruction: 0x00019dbc
   19c60:			; <UNDEFINED> instruction: 0x00019dbc
   19c64:			; <UNDEFINED> instruction: 0x00019dbc
   19c68:			; <UNDEFINED> instruction: 0x00019dbc
   19c6c:			; <UNDEFINED> instruction: 0x00019dbc
   19c70:	andeq	sl, r1, r4, lsr #11
   19c74:	strdeq	sl, [r1], -ip
   19c78:			; <UNDEFINED> instruction: 0x00019dbc
   19c7c:			; <UNDEFINED> instruction: 0x00019dbc
   19c80:			; <UNDEFINED> instruction: 0x00019dbc
   19c84:	andeq	r9, r1, r8, asr #25
   19c88:			; <UNDEFINED> instruction: 0x00019dbc
   19c8c:			; <UNDEFINED> instruction: 0x00019dbc
   19c90:			; <UNDEFINED> instruction: 0x00019dbc
   19c94:	ldrdeq	r9, [r1], -r4
   19c98:			; <UNDEFINED> instruction: 0x00019dbc
   19c9c:	andeq	r9, r1, ip, lsl lr
   19ca0:			; <UNDEFINED> instruction: 0x00019dbc
   19ca4:			; <UNDEFINED> instruction: 0x00019dbc
   19ca8:			; <UNDEFINED> instruction: 0x00019dbc
   19cac:			; <UNDEFINED> instruction: 0x00019dbc
   19cb0:			; <UNDEFINED> instruction: 0x00019dbc
   19cb4:			; <UNDEFINED> instruction: 0x00019dbc
   19cb8:	andeq	r9, r1, r8, lsr #29
   19cbc:			; <UNDEFINED> instruction: 0x00019dbc
   19cc0:			; <UNDEFINED> instruction: 0x00019dbc
   19cc4:	ldrdeq	sl, [r1], -r8
   19cc8:	mvn	r0, #0
   19ccc:	mvn	r1, #0
   19cd0:	mov	r2, r5
   19cd4:	mov	sl, r3
   19cd8:	bl	1ae48 <__assert_fail@plt+0x998c>
   19cdc:	subs	r3, r0, r6
   19ce0:	umull	r4, r2, r6, r5
   19ce4:	mov	lr, #0
   19ce8:	str	r1, [sp, #20]
   19cec:	sbcs	r3, r1, r7
   19cf0:	movwcc	lr, #1
   19cf4:	mla	ip, r6, sl, r2
   19cf8:	mov	r2, r1
   19cfc:	mov	r2, #0
   19d00:	cmp	lr, #0
   19d04:	mla	r7, r7, r5, ip
   19d08:	mvnne	r4, #0
   19d0c:	mvnne	r7, #0
   19d10:	subs	r6, r0, r4
   19d14:	sbcs	r6, r1, r7
   19d18:	umull	r3, r6, r4, r5
   19d1c:	movwcc	r2, #1
   19d20:	cmp	r2, #0
   19d24:	mvnne	r3, #0
   19d28:	cmp	r2, #0
   19d2c:	str	r6, [sp, #16]
   19d30:	umull	r6, ip, r3, r5
   19d34:	mla	r1, r3, sl, ip
   19d38:	ldr	ip, [sp, #16]
   19d3c:	str	r1, [sp, #12]
   19d40:	mla	r4, r4, sl, ip
   19d44:	mla	r4, r7, r5, r4
   19d48:	mvnne	r4, #0
   19d4c:	subs	r0, r0, r3
   19d50:	ldr	r0, [sp, #20]
   19d54:	ldr	r7, [sp, #12]
   19d58:	sbcs	r0, r0, r4
   19d5c:	mov	r0, #0
   19d60:	mla	r7, r4, r5, r7
   19d64:	movwcc	r0, #1
   19d68:	cmp	r0, #0
   19d6c:	mov	r1, r0
   19d70:	orr	r0, lr, r2
   19d74:	mvnne	r7, #0
   19d78:	mvnne	r6, #0
   19d7c:	b	1a3c8 <__assert_fail@plt+0x8f0c>
   19d80:	mov	r8, r0
   19d84:	cmp	sl, #0
   19d88:	bne	19a54 <__assert_fail@plt+0x8598>
   19d8c:	b	1a61c <__assert_fail@plt+0x9160>
   19d90:	cmp	r0, #105	; 0x69
   19d94:	mov	r3, #0
   19d98:	bne	19bdc <__assert_fail@plt+0x8720>
   19d9c:	ldrb	r0, [r1, #2]
   19da0:	mov	r1, #1
   19da4:	cmp	r0, #66	; 0x42
   19da8:	movweq	r1, #3
   19dac:	str	r1, [sp, #28]
   19db0:	sub	r0, r4, #66	; 0x42
   19db4:	cmp	r0, #53	; 0x35
   19db8:	bls	19be8 <__assert_fail@plt+0x872c>
   19dbc:	ldr	r0, [sp, #36]	; 0x24
   19dc0:	orr	r8, r8, #2
   19dc4:	strd	r6, [r0]
   19dc8:	mov	r0, r8
   19dcc:	sub	sp, fp, #28
   19dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dd4:	mvn	r0, #0
   19dd8:	mvn	r1, #0
   19ddc:	mov	r2, r5
   19de0:	mov	r4, r3
   19de4:	bl	1ae48 <__assert_fail@plt+0x998c>
   19de8:	subs	r0, r0, r6
   19dec:	mov	r2, #0
   19df0:	sbcs	r0, r1, r7
   19df4:	umull	r0, r1, r6, r5
   19df8:	movwcc	r2, #1
   19dfc:	cmp	r2, #0
   19e00:	mla	r1, r6, r4, r1
   19e04:	mov	r3, r2
   19e08:	mvnne	r0, #0
   19e0c:	mla	r7, r7, r5, r1
   19e10:	mvnne	r7, #0
   19e14:	mov	r6, r0
   19e18:	b	1a5fc <__assert_fail@plt+0x9140>
   19e1c:	mvn	r0, #0
   19e20:	mvn	r1, #0
   19e24:	mov	r2, r5
   19e28:	str	r3, [sp, #24]
   19e2c:	bl	1ae48 <__assert_fail@plt+0x998c>
   19e30:	subs	r3, r0, r6
   19e34:	mov	ip, r0
   19e38:	umull	r4, r0, r6, r5
   19e3c:	mov	sl, #0
   19e40:	sbcs	r3, r1, r7
   19e44:	mov	r3, #0
   19e48:	movwcc	r3, #1
   19e4c:	cmp	r3, #0
   19e50:	str	r0, [sp, #20]
   19e54:	ldr	r0, [sp, #24]
   19e58:	mvnne	r4, #0
   19e5c:	cmp	r3, #0
   19e60:	umull	lr, r2, r4, r5
   19e64:	mla	r2, r4, r0, r2
   19e68:	str	r2, [sp, #16]
   19e6c:	ldr	r2, [sp, #20]
   19e70:	mla	r6, r6, r0, r2
   19e74:	ldr	r0, [sp, #16]
   19e78:	mla	r6, r7, r5, r6
   19e7c:	mvnne	r6, #0
   19e80:	mla	r7, r6, r5, r0
   19e84:	subs	r0, ip, r4
   19e88:	sbcs	r0, r1, r6
   19e8c:	movwcc	sl, #1
   19e90:	cmp	sl, #0
   19e94:	orr	r3, r3, sl
   19e98:	mvnne	lr, #0
   19e9c:	mvnne	r7, #0
   19ea0:	mov	r6, lr
   19ea4:	b	1a5fc <__assert_fail@plt+0x9140>
   19ea8:	mvn	r0, #0
   19eac:	mvn	r1, #0
   19eb0:	mov	r2, r5
   19eb4:	mov	sl, r3
   19eb8:	bl	1ae48 <__assert_fail@plt+0x998c>
   19ebc:	subs	r3, r0, r6
   19ec0:	mov	ip, r1
   19ec4:	umull	r2, lr, r6, r5
   19ec8:	str	r0, [sp, #20]
   19ecc:	sbcs	r3, r1, r7
   19ed0:	mov	r1, #0
   19ed4:	str	ip, [sp, #16]
   19ed8:	movwcc	r1, #1
   19edc:	mla	r6, r6, sl, lr
   19ee0:	mov	lr, #0
   19ee4:	cmp	r1, #0
   19ee8:	mla	r7, r7, r5, r6
   19eec:	mvnne	r2, #0
   19ef0:	cmp	r1, #0
   19ef4:	umull	r3, r4, r2, r5
   19ef8:	mvnne	r7, #0
   19efc:	mla	r4, r2, sl, r4
   19f00:	subs	r2, r0, r2
   19f04:	sbcs	r2, ip, r7
   19f08:	mla	r4, r7, r5, r4
   19f0c:	mov	r2, #0
   19f10:	movwcc	lr, #1
   19f14:	cmp	lr, #0
   19f18:	mvnne	r3, #0
   19f1c:	mvnne	r4, #0
   19f20:	subs	r7, r0, r3
   19f24:	mov	r0, r5
   19f28:	sbcs	r7, ip, r4
   19f2c:	umull	r5, r7, r3, r5
   19f30:	movwcc	r2, #1
   19f34:	cmp	r2, #0
   19f38:	mla	r3, r3, sl, r7
   19f3c:	mvnne	r5, #0
   19f40:	cmp	r2, #0
   19f44:	mla	r3, r4, r0, r3
   19f48:	umull	r6, ip, r5, r0
   19f4c:	mvnne	r3, #0
   19f50:	mla	ip, r5, sl, ip
   19f54:	mla	r7, r3, r0, ip
   19f58:	ldr	r0, [sp, #20]
   19f5c:	subs	r0, r0, r5
   19f60:	ldr	r0, [sp, #16]
   19f64:	sbcs	r0, r0, r3
   19f68:	mov	r0, #0
   19f6c:	movwcc	r0, #1
   19f70:	cmp	r0, #0
   19f74:	mov	r3, r0
   19f78:	orr	r0, r1, lr
   19f7c:	orr	r0, r0, r2
   19f80:	mvnne	r7, #0
   19f84:	mvnne	r6, #0
   19f88:	orr	r3, r0, r3
   19f8c:	b	1a5fc <__assert_fail@plt+0x9140>
   19f90:	mvn	r0, #0
   19f94:	mvn	r1, #0
   19f98:	mov	r2, r5
   19f9c:	mov	r4, r3
   19fa0:	str	r3, [sp, #24]
   19fa4:	bl	1ae48 <__assert_fail@plt+0x998c>
   19fa8:	umull	r3, r2, r6, r5
   19fac:	mla	r2, r6, r4, r2
   19fb0:	subs	r6, r0, r6
   19fb4:	sbcs	r6, r1, r7
   19fb8:	mov	r6, #0
   19fbc:	mla	r2, r7, r5, r2
   19fc0:	mov	r7, #0
   19fc4:	movwcc	r6, #1
   19fc8:	cmp	r6, #0
   19fcc:	str	r6, [sp, #20]
   19fd0:	mvnne	r3, #0
   19fd4:	mvnne	r2, #0
   19fd8:	subs	r4, r0, r3
   19fdc:	umull	r6, ip, r3, r5
   19fe0:	sbcs	r4, r1, r2
   19fe4:	ldr	r4, [sp, #24]
   19fe8:	movwcc	r7, #1
   19fec:	cmp	r7, #0
   19ff0:	mov	lr, r7
   19ff4:	str	r7, [sp, #16]
   19ff8:	mvnne	r6, #0
   19ffc:	cmp	lr, #0
   1a000:	mov	lr, #0
   1a004:	umull	sl, r7, r6, r5
   1a008:	mla	r3, r3, r4, ip
   1a00c:	mla	r2, r2, r5, r3
   1a010:	mvnne	r2, #0
   1a014:	subs	r3, r0, r6
   1a018:	mla	r7, r6, r4, r7
   1a01c:	mov	r4, r0
   1a020:	mov	r0, #0
   1a024:	mla	r7, r2, r5, r7
   1a028:	sbcs	r2, r1, r2
   1a02c:	mov	r3, r4
   1a030:	movwcc	r0, #1
   1a034:	str	r3, [sp, #4]
   1a038:	cmp	r0, #0
   1a03c:	str	r0, [sp, #12]
   1a040:	mov	r0, r1
   1a044:	mvnne	sl, #0
   1a048:	mvnne	r7, #0
   1a04c:	str	r0, [sp, #8]
   1a050:	subs	r2, r4, sl
   1a054:	ldr	r4, [sp, #24]
   1a058:	sbcs	r2, r1, r7
   1a05c:	umull	r6, r2, sl, r5
   1a060:	movwcc	lr, #1
   1a064:	cmp	lr, #0
   1a068:	mvnne	r6, #0
   1a06c:	mla	r2, sl, r4, r2
   1a070:	cmp	lr, #0
   1a074:	umull	r1, ip, r6, r5
   1a078:	mla	r2, r7, r5, r2
   1a07c:	mvnne	r2, #0
   1a080:	mla	ip, r6, r4, ip
   1a084:	subs	r6, r3, r6
   1a088:	mla	r7, r2, r5, ip
   1a08c:	sbcs	r2, r0, r2
   1a090:	mov	ip, #0
   1a094:	mov	r2, #0
   1a098:	movwcc	ip, #1
   1a09c:	cmp	ip, #0
   1a0a0:	mvnne	r1, #0
   1a0a4:	mvnne	r7, #0
   1a0a8:	subs	r6, r3, r1
   1a0ac:	ldr	r3, [sp, #24]
   1a0b0:	sbcs	r6, r0, r7
   1a0b4:	umull	r0, sl, r1, r5
   1a0b8:	movwcc	r2, #1
   1a0bc:	cmp	r2, #0
   1a0c0:	mvnne	r0, #0
   1a0c4:	mla	r1, r1, r3, sl
   1a0c8:	cmp	r2, #0
   1a0cc:	umull	r6, r4, r0, r5
   1a0d0:	mla	r1, r7, r5, r1
   1a0d4:	mvnne	r1, #0
   1a0d8:	mla	r4, r0, r3, r4
   1a0dc:	ldr	r3, [sp, #4]
   1a0e0:	mla	r7, r1, r5, r4
   1a0e4:	ldr	r5, [sp, #16]
   1a0e8:	subs	r0, r3, r0
   1a0ec:	ldr	r0, [sp, #8]
   1a0f0:	sbcs	r0, r0, r1
   1a0f4:	mov	r0, #0
   1a0f8:	movwcc	r0, #1
   1a0fc:	cmp	r0, #0
   1a100:	mov	r1, r0
   1a104:	ldr	r0, [sp, #20]
   1a108:	mvnne	r7, #0
   1a10c:	mvnne	r6, #0
   1a110:	orr	r0, r0, r5
   1a114:	ldr	r5, [sp, #12]
   1a118:	orr	r0, r0, r5
   1a11c:	orr	r0, r0, lr
   1a120:	orr	r0, r0, ip
   1a124:	orr	r0, r0, r2
   1a128:	b	1a598 <__assert_fail@plt+0x90dc>
   1a12c:	mov	r1, #0
   1a130:	lsl	r2, r7, #10
   1a134:	lsl	r0, r6, #10
   1a138:	lsr	r3, r7, #22
   1a13c:	cmp	r1, r7, lsr #22
   1a140:	orr	r2, r2, r6, lsr #22
   1a144:	mvnne	r0, #0
   1a148:	movwne	r3, #1
   1a14c:	cmp	r1, r7, lsr #22
   1a150:	b	1a5c8 <__assert_fail@plt+0x910c>
   1a154:	mvn	r0, #0
   1a158:	mvn	r1, #0
   1a15c:	mov	r2, r5
   1a160:	mov	sl, r3
   1a164:	bl	1ae48 <__assert_fail@plt+0x998c>
   1a168:	subs	r2, r0, r6
   1a16c:	mov	ip, r0
   1a170:	mov	r0, #0
   1a174:	sbcs	r2, r1, r7
   1a178:	umull	r4, r2, r6, r5
   1a17c:	movwcc	r0, #1
   1a180:	cmp	r0, #0
   1a184:	mla	r2, r6, sl, r2
   1a188:	str	r0, [sp, #20]
   1a18c:	mvnne	r4, #0
   1a190:	cmp	r0, #0
   1a194:	mla	r2, r7, r5, r2
   1a198:	mov	r0, #0
   1a19c:	umull	lr, r3, r4, r5
   1a1a0:	mvnne	r2, #0
   1a1a4:	mla	r3, r4, sl, r3
   1a1a8:	mla	r6, r2, r5, r3
   1a1ac:	subs	r3, ip, r4
   1a1b0:	mov	r3, r1
   1a1b4:	sbcs	r2, r1, r2
   1a1b8:	str	r3, [sp, #8]
   1a1bc:	movwcc	r0, #1
   1a1c0:	cmp	r0, #0
   1a1c4:	str	r0, [sp, #16]
   1a1c8:	mov	r0, ip
   1a1cc:	mvnne	lr, #0
   1a1d0:	mvnne	r6, #0
   1a1d4:	str	r0, [sp, #12]
   1a1d8:	subs	r2, ip, lr
   1a1dc:	umull	r7, r4, lr, r5
   1a1e0:	sbcs	r2, r1, r6
   1a1e4:	mov	r2, #0
   1a1e8:	movwcc	r2, #1
   1a1ec:	mla	r4, lr, sl, r4
   1a1f0:	cmp	r2, #0
   1a1f4:	mla	r6, r6, r5, r4
   1a1f8:	mov	r4, #0
   1a1fc:	mvnne	r7, #0
   1a200:	cmp	r2, #0
   1a204:	umull	r1, ip, r7, r5
   1a208:	mvnne	r6, #0
   1a20c:	mla	ip, r7, sl, ip
   1a210:	subs	r7, r0, r7
   1a214:	sbcs	r7, r3, r6
   1a218:	mla	lr, r6, r5, ip
   1a21c:	mov	ip, #0
   1a220:	movwcc	ip, #1
   1a224:	cmp	ip, #0
   1a228:	mvnne	r1, #0
   1a22c:	mvnne	lr, #0
   1a230:	subs	r7, r0, r1
   1a234:	sbcs	r7, r3, lr
   1a238:	umull	r0, r7, r1, r5
   1a23c:	movwcc	r4, #1
   1a240:	cmp	r4, #0
   1a244:	mla	r1, r1, sl, r7
   1a248:	mvnne	r0, #0
   1a24c:	cmp	r4, #0
   1a250:	mla	r1, lr, r5, r1
   1a254:	umull	r6, r3, r0, r5
   1a258:	mvnne	r1, #0
   1a25c:	mla	r3, r0, sl, r3
   1a260:	mla	r7, r1, r5, r3
   1a264:	ldr	r3, [sp, #12]
   1a268:	subs	r0, r3, r0
   1a26c:	ldr	r0, [sp, #8]
   1a270:	ldr	r3, [sp, #16]
   1a274:	sbcs	r0, r0, r1
   1a278:	mov	r0, #0
   1a27c:	movwcc	r0, #1
   1a280:	cmp	r0, #0
   1a284:	mov	r1, r0
   1a288:	ldr	r0, [sp, #20]
   1a28c:	mvnne	r7, #0
   1a290:	mvnne	r6, #0
   1a294:	orr	r0, r0, r3
   1a298:	orr	r0, r0, r2
   1a29c:	orr	r0, r0, ip
   1a2a0:	orr	r0, r0, r4
   1a2a4:	b	1a3c8 <__assert_fail@plt+0x8f0c>
   1a2a8:	mvn	r0, #0
   1a2ac:	mvn	r1, #0
   1a2b0:	mov	r2, r5
   1a2b4:	mov	sl, r3
   1a2b8:	bl	1ae48 <__assert_fail@plt+0x998c>
   1a2bc:	umull	r3, r2, r6, r5
   1a2c0:	mov	lr, r1
   1a2c4:	mov	r1, r0
   1a2c8:	mla	r2, r6, sl, r2
   1a2cc:	subs	r6, r0, r6
   1a2d0:	mov	r0, #0
   1a2d4:	sbcs	r6, lr, r7
   1a2d8:	mla	r2, r7, r5, r2
   1a2dc:	movwcc	r0, #1
   1a2e0:	cmp	r0, #0
   1a2e4:	str	r0, [sp, #20]
   1a2e8:	mov	r0, r1
   1a2ec:	mvnne	r3, #0
   1a2f0:	mvnne	r2, #0
   1a2f4:	str	r0, [sp, #16]
   1a2f8:	subs	r4, r1, r3
   1a2fc:	umull	r7, ip, r3, r5
   1a300:	sbcs	r4, lr, r2
   1a304:	mov	r4, #0
   1a308:	movwcc	r4, #1
   1a30c:	mla	r3, r3, sl, ip
   1a310:	mov	ip, #0
   1a314:	cmp	r4, #0
   1a318:	mla	r2, r2, r5, r3
   1a31c:	mvnne	r7, #0
   1a320:	cmp	r4, #0
   1a324:	umull	r1, r6, r7, r5
   1a328:	mvnne	r2, #0
   1a32c:	mla	r6, r7, sl, r6
   1a330:	mla	r3, r2, r5, r6
   1a334:	subs	r6, r0, r7
   1a338:	sbcs	r2, lr, r2
   1a33c:	mov	r2, #0
   1a340:	movwcc	ip, #1
   1a344:	cmp	ip, #0
   1a348:	mvnne	r1, #0
   1a34c:	mvnne	r3, #0
   1a350:	subs	r6, r0, r1
   1a354:	sbcs	r6, lr, r3
   1a358:	umull	r0, r6, r1, r5
   1a35c:	movwcc	r2, #1
   1a360:	cmp	r2, #0
   1a364:	mvnne	r0, #0
   1a368:	cmp	r2, #0
   1a36c:	str	r6, [sp, #12]
   1a370:	umull	r6, r7, r0, r5
   1a374:	mla	r7, r0, sl, r7
   1a378:	str	r7, [sp, #8]
   1a37c:	ldr	r7, [sp, #12]
   1a380:	mla	r1, r1, sl, r7
   1a384:	mla	r1, r3, r5, r1
   1a388:	ldr	r3, [sp, #8]
   1a38c:	mvnne	r1, #0
   1a390:	mla	r7, r1, r5, r3
   1a394:	ldr	r3, [sp, #16]
   1a398:	subs	r0, r3, r0
   1a39c:	sbcs	r0, lr, r1
   1a3a0:	mov	r0, #0
   1a3a4:	movwcc	r0, #1
   1a3a8:	cmp	r0, #0
   1a3ac:	mov	r1, r0
   1a3b0:	ldr	r0, [sp, #20]
   1a3b4:	mvnne	r7, #0
   1a3b8:	mvnne	r6, #0
   1a3bc:	orr	r0, r0, r4
   1a3c0:	orr	r0, r0, ip
   1a3c4:	orr	r0, r0, r2
   1a3c8:	orr	r3, r0, r1
   1a3cc:	b	1a5fc <__assert_fail@plt+0x9140>
   1a3d0:	mvn	r0, #0
   1a3d4:	mvn	r1, #0
   1a3d8:	mov	r2, r5
   1a3dc:	mov	sl, r3
   1a3e0:	bl	1ae48 <__assert_fail@plt+0x998c>
   1a3e4:	mov	ip, r1
   1a3e8:	subs	r1, r0, r6
   1a3ec:	umull	r3, lr, r6, r5
   1a3f0:	mov	r2, r5
   1a3f4:	sbcs	r1, ip, r7
   1a3f8:	mov	r1, #0
   1a3fc:	str	ip, [sp, #4]
   1a400:	movwcc	r1, #1
   1a404:	mla	r6, r6, sl, lr
   1a408:	cmp	r1, #0
   1a40c:	mla	r7, r7, r2, r6
   1a410:	str	r1, [sp, #20]
   1a414:	mvnne	r3, #0
   1a418:	cmp	r1, #0
   1a41c:	mov	r1, r0
   1a420:	umull	r4, r5, r3, r5
   1a424:	mvnne	r7, #0
   1a428:	mov	lr, r1
   1a42c:	mla	r5, r3, sl, r5
   1a430:	subs	r3, r0, r3
   1a434:	sbcs	r0, ip, r7
   1a438:	mov	r0, #0
   1a43c:	mla	r5, r7, r2, r5
   1a440:	movwcc	r0, #1
   1a444:	cmp	r0, #0
   1a448:	str	r0, [sp, #16]
   1a44c:	mvnne	r4, #0
   1a450:	mvnne	r5, #0
   1a454:	subs	r0, r1, r4
   1a458:	mov	r1, #0
   1a45c:	sbcs	r0, ip, r5
   1a460:	umull	r3, r0, r4, r2
   1a464:	movwcc	r1, #1
   1a468:	cmp	r1, #0
   1a46c:	mla	r0, r4, sl, r0
   1a470:	mov	r4, lr
   1a474:	str	r1, [sp, #12]
   1a478:	mvnne	r3, #0
   1a47c:	cmp	r1, #0
   1a480:	mla	r0, r5, r2, r0
   1a484:	str	r4, [sp]
   1a488:	umull	r7, r6, r3, r2
   1a48c:	mvnne	r0, #0
   1a490:	mla	r6, r3, sl, r6
   1a494:	subs	r3, lr, r3
   1a498:	mov	r3, #0
   1a49c:	mla	r5, r0, r2, r6
   1a4a0:	sbcs	r0, ip, r0
   1a4a4:	mov	r0, #0
   1a4a8:	movwcc	r0, #1
   1a4ac:	cmp	r0, #0
   1a4b0:	str	r0, [sp, #8]
   1a4b4:	mvnne	r7, #0
   1a4b8:	mvnne	r5, #0
   1a4bc:	subs	r0, lr, r7
   1a4c0:	sbcs	r0, ip, r5
   1a4c4:	umull	r6, r0, r7, r2
   1a4c8:	movwcc	r3, #1
   1a4cc:	cmp	r3, #0
   1a4d0:	mla	r7, r7, sl, r0
   1a4d4:	mov	r0, ip
   1a4d8:	mvnne	r6, #0
   1a4dc:	cmp	r3, #0
   1a4e0:	mla	r7, r5, r2, r7
   1a4e4:	mov	r5, #0
   1a4e8:	umull	r1, lr, r6, r2
   1a4ec:	mvnne	r7, #0
   1a4f0:	mla	lr, r6, sl, lr
   1a4f4:	subs	r6, r4, r6
   1a4f8:	mla	lr, r7, r2, lr
   1a4fc:	sbcs	r7, ip, r7
   1a500:	mov	ip, #0
   1a504:	movwcc	ip, #1
   1a508:	cmp	ip, #0
   1a50c:	mvnne	r1, #0
   1a510:	mvnne	lr, #0
   1a514:	subs	r7, r4, r1
   1a518:	sbcs	r7, r0, lr
   1a51c:	umull	r0, r7, r1, r2
   1a520:	movwcc	r5, #1
   1a524:	cmp	r5, #0
   1a528:	mla	r1, r1, sl, r7
   1a52c:	mvnne	r0, #0
   1a530:	cmp	r5, #0
   1a534:	mla	r1, lr, r2, r1
   1a538:	umull	r6, r4, r0, r2
   1a53c:	mvnne	r1, #0
   1a540:	mla	r4, r0, sl, r4
   1a544:	mla	r7, r1, r2, r4
   1a548:	ldr	r2, [sp]
   1a54c:	subs	r0, r2, r0
   1a550:	ldr	r0, [sp, #4]
   1a554:	ldr	r2, [sp, #16]
   1a558:	sbcs	r0, r0, r1
   1a55c:	mov	r0, #0
   1a560:	movwcc	r0, #1
   1a564:	cmp	r0, #0
   1a568:	mov	r1, r0
   1a56c:	ldr	r0, [sp, #20]
   1a570:	mvnne	r7, #0
   1a574:	mvnne	r6, #0
   1a578:	orr	r0, r0, r2
   1a57c:	ldr	r2, [sp, #12]
   1a580:	orr	r0, r0, r2
   1a584:	ldr	r2, [sp, #8]
   1a588:	orr	r0, r0, r2
   1a58c:	orr	r0, r0, r3
   1a590:	orr	r0, r0, ip
   1a594:	orr	r0, r0, r5
   1a598:	orr	r0, r0, r1
   1a59c:	and	r3, r0, #1
   1a5a0:	b	1a5fc <__assert_fail@plt+0x9140>
   1a5a4:	mov	r1, #0
   1a5a8:	lsl	r2, r7, #9
   1a5ac:	lsl	r0, r6, #9
   1a5b0:	lsr	r3, r7, #23
   1a5b4:	cmp	r1, r7, lsr #23
   1a5b8:	orr	r2, r2, r6, lsr #23
   1a5bc:	mvnne	r0, #0
   1a5c0:	movwne	r3, #1
   1a5c4:	cmp	r1, r7, lsr #23
   1a5c8:	mvnne	r2, #0
   1a5cc:	mov	r6, r0
   1a5d0:	mov	r7, r2
   1a5d4:	b	1a5fc <__assert_fail@plt+0x9140>
   1a5d8:	lsl	r1, r7, #1
   1a5dc:	cmp	r7, #0
   1a5e0:	lsl	r0, r6, #1
   1a5e4:	lsr	r3, r7, #31
   1a5e8:	orr	r1, r1, r6, lsr #31
   1a5ec:	mvnmi	r0, #0
   1a5f0:	mvnmi	r1, #0
   1a5f4:	mov	r6, r0
   1a5f8:	mov	r7, r1
   1a5fc:	ldr	r1, [sp, #32]
   1a600:	ldr	r2, [sp, #28]
   1a604:	orr	r8, r3, r8
   1a608:	add	r0, r1, r2
   1a60c:	str	r0, [r9]
   1a610:	ldrb	r0, [r1, r2]
   1a614:	cmp	r0, #0
   1a618:	orrne	r8, r8, #2
   1a61c:	ldr	r0, [sp, #36]	; 0x24
   1a620:	strd	r6, [r0]
   1a624:	mov	r0, r8
   1a628:	sub	sp, fp, #28
   1a62c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a630:	movw	r0, #50090	; 0xc3aa
   1a634:	movw	r1, #50128	; 0xc3d0
   1a638:	movw	r3, #50144	; 0xc3e0
   1a63c:	mov	r2, #85	; 0x55
   1a640:	movt	r0, #1
   1a644:	movt	r1, #1
   1a648:	movt	r3, #1
   1a64c:	bl	114bc <__assert_fail@plt>
   1a650:	clz	r2, r1
   1a654:	clz	r3, r0
   1a658:	lsr	r2, r2, #5
   1a65c:	lsr	r3, r3, #5
   1a660:	orrs	r2, r3, r2
   1a664:	movwne	r1, #1
   1a668:	movwne	r0, #1
   1a66c:	cmp	r1, #0
   1a670:	beq	1a6a0 <__assert_fail@plt+0x91e4>
   1a674:	mvn	r2, #-2147483648	; 0x80000000
   1a678:	udiv	r2, r2, r1
   1a67c:	cmp	r2, r0
   1a680:	bcs	1a6a0 <__assert_fail@plt+0x91e4>
   1a684:	push	{fp, lr}
   1a688:	mov	fp, sp
   1a68c:	bl	11378 <__errno_location@plt>
   1a690:	mov	r1, #12
   1a694:	str	r1, [r0]
   1a698:	mov	r0, #0
   1a69c:	pop	{fp, pc}
   1a6a0:	b	111a4 <calloc@plt>
   1a6a4:	cmp	r0, #0
   1a6a8:	movweq	r0, #1
   1a6ac:	cmn	r0, #1
   1a6b0:	ble	1a6b8 <__assert_fail@plt+0x91fc>
   1a6b4:	b	112e8 <malloc@plt>
   1a6b8:	push	{fp, lr}
   1a6bc:	mov	fp, sp
   1a6c0:	bl	11378 <__errno_location@plt>
   1a6c4:	mov	r1, #12
   1a6c8:	str	r1, [r0]
   1a6cc:	mov	r0, #0
   1a6d0:	pop	{fp, pc}
   1a6d4:	push	{fp, lr}
   1a6d8:	mov	fp, sp
   1a6dc:	cmp	r0, #0
   1a6e0:	beq	1a6fc <__assert_fail@plt+0x9240>
   1a6e4:	cmp	r1, #0
   1a6e8:	beq	1a708 <__assert_fail@plt+0x924c>
   1a6ec:	cmn	r1, #1
   1a6f0:	ble	1a714 <__assert_fail@plt+0x9258>
   1a6f4:	pop	{fp, lr}
   1a6f8:	b	11258 <realloc@plt>
   1a6fc:	mov	r0, r1
   1a700:	pop	{fp, lr}
   1a704:	b	1a6a4 <__assert_fail@plt+0x91e8>
   1a708:	bl	12e18 <__assert_fail@plt+0x195c>
   1a70c:	mov	r0, #0
   1a710:	pop	{fp, pc}
   1a714:	bl	11378 <__errno_location@plt>
   1a718:	mov	r1, #12
   1a71c:	str	r1, [r0]
   1a720:	mov	r0, #0
   1a724:	pop	{fp, pc}
   1a728:	push	{r4, r5, r6, sl, fp, lr}
   1a72c:	add	fp, sp, #16
   1a730:	mov	r4, r0
   1a734:	bl	112b8 <__fpending@plt>
   1a738:	ldr	r6, [r4]
   1a73c:	mov	r5, r0
   1a740:	mov	r0, r4
   1a744:	bl	1a89c <__assert_fail@plt+0x93e0>
   1a748:	tst	r6, #32
   1a74c:	bne	1a784 <__assert_fail@plt+0x92c8>
   1a750:	cmp	r0, #0
   1a754:	mov	r4, r0
   1a758:	mvnne	r4, #0
   1a75c:	cmp	r5, #0
   1a760:	bne	1a790 <__assert_fail@plt+0x92d4>
   1a764:	cmp	r0, #0
   1a768:	beq	1a790 <__assert_fail@plt+0x92d4>
   1a76c:	bl	11378 <__errno_location@plt>
   1a770:	ldr	r0, [r0]
   1a774:	subs	r4, r0, #9
   1a778:	mvnne	r4, #0
   1a77c:	mov	r0, r4
   1a780:	pop	{r4, r5, r6, sl, fp, pc}
   1a784:	mvn	r4, #0
   1a788:	cmp	r0, #0
   1a78c:	beq	1a798 <__assert_fail@plt+0x92dc>
   1a790:	mov	r0, r4
   1a794:	pop	{r4, r5, r6, sl, fp, pc}
   1a798:	bl	11378 <__errno_location@plt>
   1a79c:	mov	r1, #0
   1a7a0:	str	r1, [r0]
   1a7a4:	mov	r0, r4
   1a7a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a7ac:	movw	r2, #62998	; 0xf616
   1a7b0:	mov	r1, #0
   1a7b4:	movt	r2, #149	; 0x95
   1a7b8:	str	r1, [r0, #16]
   1a7bc:	str	r1, [r0, #20]
   1a7c0:	str	r2, [r0, #24]
   1a7c4:	bx	lr
   1a7c8:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1a7cc:	add	fp, sp, #24
   1a7d0:	ldr	r2, [r0, #24]
   1a7d4:	movw	r3, #62998	; 0xf616
   1a7d8:	movt	r3, #149	; 0x95
   1a7dc:	cmp	r2, r3
   1a7e0:	bne	1a87c <__assert_fail@plt+0x93c0>
   1a7e4:	add	r3, r0, #16
   1a7e8:	add	ip, r0, #8
   1a7ec:	ldrd	r4, [r3]
   1a7f0:	orrs	r2, r4, r5
   1a7f4:	beq	1a830 <__assert_fail@plt+0x9374>
   1a7f8:	ldr	r6, [r1, #96]	; 0x60
   1a7fc:	ldr	r9, [r1, #100]	; 0x64
   1a800:	ldm	r0, {r2, r7}
   1a804:	eor	r7, r9, r7
   1a808:	eor	r2, r6, r2
   1a80c:	orrs	r2, r2, r7
   1a810:	bne	1a830 <__assert_fail@plt+0x9374>
   1a814:	ldm	ip, {r2, r7}
   1a818:	ldm	r1, {r6, r9}
   1a81c:	eor	r7, r9, r7
   1a820:	eor	r2, r6, r2
   1a824:	orrs	r2, r2, r7
   1a828:	mov	r2, #1
   1a82c:	beq	1a868 <__assert_fail@plt+0x93ac>
   1a830:	adds	r6, r4, #1
   1a834:	adc	r7, r5, #0
   1a838:	and	r2, r6, r4
   1a83c:	strd	r6, [r3]
   1a840:	and	r3, r7, r5
   1a844:	orrs	r2, r2, r3
   1a848:	mov	r2, #0
   1a84c:	bne	1a868 <__assert_fail@plt+0x93ac>
   1a850:	orrs	r3, r6, r7
   1a854:	beq	1a870 <__assert_fail@plt+0x93b4>
   1a858:	ldrd	r4, [r1]
   1a85c:	strd	r4, [ip]
   1a860:	ldrd	r4, [r1, #96]	; 0x60
   1a864:	strd	r4, [r0]
   1a868:	mov	r0, r2
   1a86c:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a870:	mov	r2, #1
   1a874:	mov	r0, r2
   1a878:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a87c:	movw	r0, #50223	; 0xc42f
   1a880:	movw	r1, #50247	; 0xc447
   1a884:	movw	r3, #50265	; 0xc459
   1a888:	mov	r2, #60	; 0x3c
   1a88c:	movt	r0, #1
   1a890:	movt	r1, #1
   1a894:	movt	r3, #1
   1a898:	bl	114bc <__assert_fail@plt>
   1a89c:	push	{r4, r5, r6, sl, fp, lr}
   1a8a0:	add	fp, sp, #16
   1a8a4:	sub	sp, sp, #8
   1a8a8:	mov	r4, r0
   1a8ac:	bl	113a8 <fileno@plt>
   1a8b0:	cmn	r0, #1
   1a8b4:	ble	1a928 <__assert_fail@plt+0x946c>
   1a8b8:	mov	r0, r4
   1a8bc:	bl	11300 <__freading@plt>
   1a8c0:	cmp	r0, #0
   1a8c4:	beq	1a8f0 <__assert_fail@plt+0x9434>
   1a8c8:	mov	r0, r4
   1a8cc:	bl	113a8 <fileno@plt>
   1a8d0:	mov	r1, #1
   1a8d4:	mov	r2, #0
   1a8d8:	mov	r3, #0
   1a8dc:	str	r1, [sp]
   1a8e0:	bl	112a0 <lseek64@plt>
   1a8e4:	and	r0, r0, r1
   1a8e8:	cmn	r0, #1
   1a8ec:	beq	1a928 <__assert_fail@plt+0x946c>
   1a8f0:	mov	r0, r4
   1a8f4:	bl	1ab54 <__assert_fail@plt+0x9698>
   1a8f8:	cmp	r0, #0
   1a8fc:	beq	1a928 <__assert_fail@plt+0x946c>
   1a900:	bl	11378 <__errno_location@plt>
   1a904:	ldr	r6, [r0]
   1a908:	mov	r5, r0
   1a90c:	mov	r0, r4
   1a910:	bl	113c0 <fclose@plt>
   1a914:	cmp	r6, #0
   1a918:	strne	r6, [r5]
   1a91c:	mvnne	r0, #0
   1a920:	sub	sp, fp, #16
   1a924:	pop	{r4, r5, r6, sl, fp, pc}
   1a928:	mov	r0, r4
   1a92c:	sub	sp, fp, #16
   1a930:	pop	{r4, r5, r6, sl, fp, lr}
   1a934:	b	113c0 <fclose@plt>
   1a938:	sub	sp, sp, #8
   1a93c:	push	{r4, r5, r6, r7, fp, lr}
   1a940:	add	fp, sp, #16
   1a944:	sub	sp, sp, #8
   1a948:	mov	r5, r0
   1a94c:	add	r0, fp, #8
   1a950:	cmp	r1, #11
   1a954:	str	r2, [fp, #8]
   1a958:	str	r3, [fp, #12]
   1a95c:	str	r0, [sp, #4]
   1a960:	bhi	1a99c <__assert_fail@plt+0x94e0>
   1a964:	mov	r0, #1
   1a968:	movw	r2, #1300	; 0x514
   1a96c:	tst	r2, r0, lsl r1
   1a970:	bne	1aa5c <__assert_fail@plt+0x95a0>
   1a974:	movw	r2, #2570	; 0xa0a
   1a978:	tst	r2, r0, lsl r1
   1a97c:	bne	1a9c4 <__assert_fail@plt+0x9508>
   1a980:	cmp	r1, #0
   1a984:	bne	1a99c <__assert_fail@plt+0x94e0>
   1a988:	ldr	r0, [sp, #4]
   1a98c:	add	r1, r0, #4
   1a990:	str	r1, [sp, #4]
   1a994:	mov	r1, #0
   1a998:	b	1aa68 <__assert_fail@plt+0x95ac>
   1a99c:	sub	r0, r1, #1024	; 0x400
   1a9a0:	cmp	r0, #10
   1a9a4:	bhi	1aa5c <__assert_fail@plt+0x95a0>
   1a9a8:	mov	r2, #1
   1a9ac:	movw	r3, #645	; 0x285
   1a9b0:	tst	r3, r2, lsl r0
   1a9b4:	bne	1aa5c <__assert_fail@plt+0x95a0>
   1a9b8:	movw	r3, #1282	; 0x502
   1a9bc:	tst	r3, r2, lsl r0
   1a9c0:	beq	1a9d0 <__assert_fail@plt+0x9514>
   1a9c4:	mov	r0, r5
   1a9c8:	bl	113d8 <fcntl64@plt>
   1a9cc:	b	1aa74 <__assert_fail@plt+0x95b8>
   1a9d0:	cmp	r0, #6
   1a9d4:	bne	1aa5c <__assert_fail@plt+0x95a0>
   1a9d8:	ldr	r0, [sp, #4]
   1a9dc:	movw	r7, #53992	; 0xd2e8
   1a9e0:	movt	r7, #2
   1a9e4:	add	r1, r0, #4
   1a9e8:	str	r1, [sp, #4]
   1a9ec:	ldr	r6, [r0]
   1a9f0:	ldr	r0, [r7]
   1a9f4:	cmp	r0, #0
   1a9f8:	bmi	1aa98 <__assert_fail@plt+0x95dc>
   1a9fc:	mov	r0, r5
   1aa00:	movw	r1, #1030	; 0x406
   1aa04:	mov	r2, r6
   1aa08:	bl	113d8 <fcntl64@plt>
   1aa0c:	mov	r4, r0
   1aa10:	cmn	r0, #1
   1aa14:	bgt	1aa8c <__assert_fail@plt+0x95d0>
   1aa18:	bl	11378 <__errno_location@plt>
   1aa1c:	ldr	r0, [r0]
   1aa20:	cmp	r0, #22
   1aa24:	bne	1aa8c <__assert_fail@plt+0x95d0>
   1aa28:	mov	r0, r5
   1aa2c:	mov	r1, #0
   1aa30:	mov	r2, r6
   1aa34:	bl	113d8 <fcntl64@plt>
   1aa38:	mov	r4, r0
   1aa3c:	cmp	r0, #0
   1aa40:	bmi	1aa78 <__assert_fail@plt+0x95bc>
   1aa44:	mvn	r0, #0
   1aa48:	str	r0, [r7]
   1aa4c:	mov	r0, #1
   1aa50:	cmp	r0, #0
   1aa54:	bne	1aac4 <__assert_fail@plt+0x9608>
   1aa58:	b	1aa78 <__assert_fail@plt+0x95bc>
   1aa5c:	ldr	r0, [sp, #4]
   1aa60:	add	r2, r0, #4
   1aa64:	str	r2, [sp, #4]
   1aa68:	ldr	r2, [r0]
   1aa6c:	mov	r0, r5
   1aa70:	bl	113d8 <fcntl64@plt>
   1aa74:	mov	r4, r0
   1aa78:	mov	r0, r4
   1aa7c:	sub	sp, fp, #16
   1aa80:	pop	{r4, r5, r6, r7, fp, lr}
   1aa84:	add	sp, sp, #8
   1aa88:	bx	lr
   1aa8c:	mov	r0, #1
   1aa90:	str	r0, [r7]
   1aa94:	b	1aa78 <__assert_fail@plt+0x95bc>
   1aa98:	mov	r0, r5
   1aa9c:	mov	r1, #0
   1aaa0:	mov	r2, r6
   1aaa4:	bl	113d8 <fcntl64@plt>
   1aaa8:	mov	r4, r0
   1aaac:	ldr	r0, [r7]
   1aab0:	add	r0, r0, #1
   1aab4:	clz	r0, r0
   1aab8:	lsr	r0, r0, #5
   1aabc:	cmp	r0, #0
   1aac0:	beq	1aa78 <__assert_fail@plt+0x95bc>
   1aac4:	cmp	r4, #0
   1aac8:	bmi	1aa78 <__assert_fail@plt+0x95bc>
   1aacc:	mov	r0, r4
   1aad0:	mov	r1, #1
   1aad4:	bl	113d8 <fcntl64@plt>
   1aad8:	cmp	r0, #0
   1aadc:	bmi	1aaf8 <__assert_fail@plt+0x963c>
   1aae0:	orr	r2, r0, #1
   1aae4:	mov	r0, r4
   1aae8:	mov	r1, #2
   1aaec:	bl	113d8 <fcntl64@plt>
   1aaf0:	cmn	r0, #1
   1aaf4:	bne	1aa78 <__assert_fail@plt+0x95bc>
   1aaf8:	bl	11378 <__errno_location@plt>
   1aafc:	ldr	r6, [r0]
   1ab00:	mov	r5, r0
   1ab04:	mov	r0, r4
   1ab08:	bl	11480 <close@plt>
   1ab0c:	str	r6, [r5]
   1ab10:	mvn	r4, #0
   1ab14:	b	1aa78 <__assert_fail@plt+0x95bc>
   1ab18:	sub	sp, sp, #8
   1ab1c:	push	{fp, lr}
   1ab20:	mov	fp, sp
   1ab24:	sub	sp, sp, #8
   1ab28:	str	r2, [fp, #8]
   1ab2c:	str	r3, [fp, #12]
   1ab30:	tst	r1, #64	; 0x40
   1ab34:	mov	r2, #0
   1ab38:	ldrne	r2, [fp, #8]
   1ab3c:	bl	112dc <open64@plt>
   1ab40:	bl	18c98 <__assert_fail@plt+0x77dc>
   1ab44:	mov	sp, fp
   1ab48:	pop	{fp, lr}
   1ab4c:	add	sp, sp, #8
   1ab50:	bx	lr
   1ab54:	push	{r4, sl, fp, lr}
   1ab58:	add	fp, sp, #8
   1ab5c:	sub	sp, sp, #8
   1ab60:	mov	r4, r0
   1ab64:	cmp	r0, #0
   1ab68:	beq	1aba0 <__assert_fail@plt+0x96e4>
   1ab6c:	mov	r0, r4
   1ab70:	bl	11300 <__freading@plt>
   1ab74:	cmp	r0, #0
   1ab78:	beq	1aba0 <__assert_fail@plt+0x96e4>
   1ab7c:	ldrb	r0, [r4, #1]
   1ab80:	tst	r0, #1
   1ab84:	beq	1aba0 <__assert_fail@plt+0x96e4>
   1ab88:	mov	r0, #1
   1ab8c:	mov	r2, #0
   1ab90:	mov	r3, #0
   1ab94:	str	r0, [sp]
   1ab98:	mov	r0, r4
   1ab9c:	bl	1abb0 <__assert_fail@plt+0x96f4>
   1aba0:	mov	r0, r4
   1aba4:	sub	sp, fp, #8
   1aba8:	pop	{r4, sl, fp, lr}
   1abac:	b	111ec <fflush@plt>
   1abb0:	push	{r4, r5, r6, r7, fp, lr}
   1abb4:	add	fp, sp, #16
   1abb8:	sub	sp, sp, #8
   1abbc:	mov	r4, r0
   1abc0:	ldr	r0, [r0, #4]
   1abc4:	mov	r5, r3
   1abc8:	mov	r6, r2
   1abcc:	ldr	r1, [r4, #8]
   1abd0:	cmp	r1, r0
   1abd4:	bne	1abf0 <__assert_fail@plt+0x9734>
   1abd8:	ldrd	r0, [r4, #16]
   1abdc:	cmp	r1, r0
   1abe0:	bne	1abf0 <__assert_fail@plt+0x9734>
   1abe4:	ldr	r0, [r4, #36]	; 0x24
   1abe8:	cmp	r0, #0
   1abec:	beq	1ac08 <__assert_fail@plt+0x974c>
   1abf0:	mov	r0, r4
   1abf4:	mov	r2, r6
   1abf8:	mov	r3, r5
   1abfc:	sub	sp, fp, #16
   1ac00:	pop	{r4, r5, r6, r7, fp, lr}
   1ac04:	b	113cc <fseeko64@plt>
   1ac08:	ldr	r7, [fp, #8]
   1ac0c:	mov	r0, r4
   1ac10:	bl	113a8 <fileno@plt>
   1ac14:	mov	r2, r6
   1ac18:	mov	r3, r5
   1ac1c:	str	r7, [sp]
   1ac20:	bl	112a0 <lseek64@plt>
   1ac24:	and	r2, r0, r1
   1ac28:	cmn	r2, #1
   1ac2c:	beq	1ac4c <__assert_fail@plt+0x9790>
   1ac30:	strd	r0, [r4, #80]	; 0x50
   1ac34:	ldr	r0, [r4]
   1ac38:	bic	r0, r0, #16
   1ac3c:	str	r0, [r4]
   1ac40:	mov	r0, #0
   1ac44:	sub	sp, fp, #16
   1ac48:	pop	{r4, r5, r6, r7, fp, pc}
   1ac4c:	mvn	r0, #0
   1ac50:	sub	sp, fp, #16
   1ac54:	pop	{r4, r5, r6, r7, fp, pc}
   1ac58:	push	{fp, lr}
   1ac5c:	mov	fp, sp
   1ac60:	mov	r0, #14
   1ac64:	bl	113fc <nl_langinfo@plt>
   1ac68:	movw	r1, #46676	; 0xb654
   1ac6c:	cmp	r0, #0
   1ac70:	movt	r1, #1
   1ac74:	movne	r1, r0
   1ac78:	movw	r0, #50332	; 0xc49c
   1ac7c:	ldrb	r2, [r1]
   1ac80:	movt	r0, #1
   1ac84:	cmp	r2, #0
   1ac88:	movne	r0, r1
   1ac8c:	pop	{fp, pc}
   1ac90:	push	{r4, r5, r6, r7, fp, lr}
   1ac94:	add	fp, sp, #16
   1ac98:	sub	sp, sp, #8
   1ac9c:	cmp	r0, #0
   1aca0:	add	r5, sp, #4
   1aca4:	mov	r7, r2
   1aca8:	mov	r4, r1
   1acac:	movne	r5, r0
   1acb0:	mov	r0, r5
   1acb4:	bl	112c4 <mbrtowc@plt>
   1acb8:	mov	r6, r0
   1acbc:	cmp	r7, #0
   1acc0:	beq	1ace8 <__assert_fail@plt+0x982c>
   1acc4:	cmn	r6, #2
   1acc8:	bcc	1ace8 <__assert_fail@plt+0x982c>
   1accc:	mov	r0, #0
   1acd0:	bl	1ad3c <__assert_fail@plt+0x9880>
   1acd4:	cmp	r0, #0
   1acd8:	bne	1ace8 <__assert_fail@plt+0x982c>
   1acdc:	ldrb	r0, [r4]
   1ace0:	mov	r6, #1
   1ace4:	str	r0, [r5]
   1ace8:	mov	r0, r6
   1acec:	sub	sp, fp, #16
   1acf0:	pop	{r4, r5, r6, r7, fp, pc}
   1acf4:	cmp	r2, #0
   1acf8:	beq	1ad28 <__assert_fail@plt+0x986c>
   1acfc:	mvn	r3, #0
   1ad00:	udiv	r3, r3, r2
   1ad04:	cmp	r3, r1
   1ad08:	bcs	1ad28 <__assert_fail@plt+0x986c>
   1ad0c:	push	{fp, lr}
   1ad10:	mov	fp, sp
   1ad14:	bl	11378 <__errno_location@plt>
   1ad18:	mov	r1, #12
   1ad1c:	str	r1, [r0]
   1ad20:	mov	r0, #0
   1ad24:	pop	{fp, pc}
   1ad28:	mul	r1, r2, r1
   1ad2c:	b	1a6d4 <__assert_fail@plt+0x9218>
   1ad30:	mov	r1, #0
   1ad34:	mov	r2, #3
   1ad38:	b	1a938 <__assert_fail@plt+0x947c>
   1ad3c:	push	{r4, sl, fp, lr}
   1ad40:	add	fp, sp, #8
   1ad44:	sub	sp, sp, #264	; 0x108
   1ad48:	add	r1, sp, #7
   1ad4c:	movw	r2, #257	; 0x101
   1ad50:	bl	1ada8 <__assert_fail@plt+0x98ec>
   1ad54:	mov	r4, #0
   1ad58:	cmp	r0, #0
   1ad5c:	bne	1ad9c <__assert_fail@plt+0x98e0>
   1ad60:	movw	r1, #50338	; 0xc4a2
   1ad64:	add	r0, sp, #7
   1ad68:	mov	r2, #2
   1ad6c:	movt	r1, #1
   1ad70:	bl	1133c <bcmp@plt>
   1ad74:	cmp	r0, #0
   1ad78:	beq	1ad9c <__assert_fail@plt+0x98e0>
   1ad7c:	movw	r1, #50340	; 0xc4a4
   1ad80:	add	r0, sp, #7
   1ad84:	mov	r2, #6
   1ad88:	movt	r1, #1
   1ad8c:	bl	1133c <bcmp@plt>
   1ad90:	cmp	r0, #0
   1ad94:	mov	r4, r0
   1ad98:	movwne	r4, #1
   1ad9c:	mov	r0, r4
   1ada0:	sub	sp, fp, #8
   1ada4:	pop	{r4, sl, fp, pc}
   1ada8:	push	{r4, r5, r6, r7, fp, lr}
   1adac:	add	fp, sp, #16
   1adb0:	mov	r4, r1
   1adb4:	mov	r1, #0
   1adb8:	mov	r6, r2
   1adbc:	bl	113e4 <setlocale@plt>
   1adc0:	cmp	r0, #0
   1adc4:	beq	1adf4 <__assert_fail@plt+0x9938>
   1adc8:	mov	r7, r0
   1adcc:	bl	11348 <strlen@plt>
   1add0:	cmp	r0, r6
   1add4:	bcs	1ae10 <__assert_fail@plt+0x9954>
   1add8:	add	r2, r0, #1
   1addc:	mov	r0, r4
   1ade0:	mov	r1, r7
   1ade4:	bl	1121c <memcpy@plt>
   1ade8:	mov	r5, #0
   1adec:	mov	r0, r5
   1adf0:	pop	{r4, r5, r6, r7, fp, pc}
   1adf4:	mov	r5, #22
   1adf8:	cmp	r6, #0
   1adfc:	beq	1ae38 <__assert_fail@plt+0x997c>
   1ae00:	mov	r0, #0
   1ae04:	strb	r0, [r4]
   1ae08:	mov	r0, r5
   1ae0c:	pop	{r4, r5, r6, r7, fp, pc}
   1ae10:	mov	r5, #34	; 0x22
   1ae14:	cmp	r6, #0
   1ae18:	beq	1ae38 <__assert_fail@plt+0x997c>
   1ae1c:	sub	r6, r6, #1
   1ae20:	mov	r0, r4
   1ae24:	mov	r1, r7
   1ae28:	mov	r2, r6
   1ae2c:	bl	1121c <memcpy@plt>
   1ae30:	mov	r0, #0
   1ae34:	strb	r0, [r4, r6]
   1ae38:	mov	r0, r5
   1ae3c:	pop	{r4, r5, r6, r7, fp, pc}
   1ae40:	mov	r1, #0
   1ae44:	b	113e4 <setlocale@plt>
   1ae48:	cmp	r3, #0
   1ae4c:	cmpeq	r2, #0
   1ae50:	bne	1ae68 <__assert_fail@plt+0x99ac>
   1ae54:	cmp	r1, #0
   1ae58:	cmpeq	r0, #0
   1ae5c:	mvnne	r1, #0
   1ae60:	mvnne	r0, #0
   1ae64:	b	1ae84 <__assert_fail@plt+0x99c8>
   1ae68:	sub	sp, sp, #8
   1ae6c:	push	{sp, lr}
   1ae70:	bl	1ae94 <__assert_fail@plt+0x99d8>
   1ae74:	ldr	lr, [sp, #4]
   1ae78:	add	sp, sp, #8
   1ae7c:	pop	{r2, r3}
   1ae80:	bx	lr
   1ae84:	push	{r1, lr}
   1ae88:	mov	r0, #8
   1ae8c:	bl	111c8 <raise@plt>
   1ae90:	pop	{r1, pc}
   1ae94:	cmp	r1, r3
   1ae98:	cmpeq	r0, r2
   1ae9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aea0:	mov	r4, r0
   1aea4:	movcc	r0, #0
   1aea8:	mov	r5, r1
   1aeac:	ldr	lr, [sp, #36]	; 0x24
   1aeb0:	movcc	r1, r0
   1aeb4:	bcc	1afb0 <__assert_fail@plt+0x9af4>
   1aeb8:	cmp	r3, #0
   1aebc:	clzeq	ip, r2
   1aec0:	clzne	ip, r3
   1aec4:	addeq	ip, ip, #32
   1aec8:	cmp	r5, #0
   1aecc:	clzeq	r1, r4
   1aed0:	addeq	r1, r1, #32
   1aed4:	clzne	r1, r5
   1aed8:	sub	ip, ip, r1
   1aedc:	sub	sl, ip, #32
   1aee0:	lsl	r9, r3, ip
   1aee4:	rsb	fp, ip, #32
   1aee8:	orr	r9, r9, r2, lsl sl
   1aeec:	orr	r9, r9, r2, lsr fp
   1aef0:	lsl	r8, r2, ip
   1aef4:	cmp	r5, r9
   1aef8:	cmpeq	r4, r8
   1aefc:	movcc	r0, #0
   1af00:	movcc	r1, r0
   1af04:	bcc	1af20 <__assert_fail@plt+0x9a64>
   1af08:	mov	r0, #1
   1af0c:	subs	r4, r4, r8
   1af10:	lsl	r1, r0, sl
   1af14:	orr	r1, r1, r0, lsr fp
   1af18:	lsl	r0, r0, ip
   1af1c:	sbc	r5, r5, r9
   1af20:	cmp	ip, #0
   1af24:	beq	1afb0 <__assert_fail@plt+0x9af4>
   1af28:	lsr	r6, r8, #1
   1af2c:	orr	r6, r6, r9, lsl #31
   1af30:	lsr	r7, r9, #1
   1af34:	mov	r2, ip
   1af38:	b	1af5c <__assert_fail@plt+0x9aa0>
   1af3c:	subs	r3, r4, r6
   1af40:	sbc	r8, r5, r7
   1af44:	adds	r3, r3, r3
   1af48:	adc	r8, r8, r8
   1af4c:	adds	r4, r3, #1
   1af50:	adc	r5, r8, #0
   1af54:	subs	r2, r2, #1
   1af58:	beq	1af78 <__assert_fail@plt+0x9abc>
   1af5c:	cmp	r5, r7
   1af60:	cmpeq	r4, r6
   1af64:	bcs	1af3c <__assert_fail@plt+0x9a80>
   1af68:	adds	r4, r4, r4
   1af6c:	adc	r5, r5, r5
   1af70:	subs	r2, r2, #1
   1af74:	bne	1af5c <__assert_fail@plt+0x9aa0>
   1af78:	lsr	r3, r4, ip
   1af7c:	orr	r3, r3, r5, lsl fp
   1af80:	lsr	r2, r5, ip
   1af84:	orr	r3, r3, r5, lsr sl
   1af88:	adds	r0, r0, r4
   1af8c:	mov	r4, r3
   1af90:	lsl	r3, r2, ip
   1af94:	orr	r3, r3, r4, lsl sl
   1af98:	lsl	ip, r4, ip
   1af9c:	orr	r3, r3, r4, lsr fp
   1afa0:	adc	r1, r1, r5
   1afa4:	subs	r0, r0, ip
   1afa8:	mov	r5, r2
   1afac:	sbc	r1, r1, r3
   1afb0:	cmp	lr, #0
   1afb4:	strdne	r4, [lr]
   1afb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1afc0:	mov	r7, r0
   1afc4:	ldr	r6, [pc, #72]	; 1b014 <__assert_fail@plt+0x9b58>
   1afc8:	ldr	r5, [pc, #72]	; 1b018 <__assert_fail@plt+0x9b5c>
   1afcc:	add	r6, pc, r6
   1afd0:	add	r5, pc, r5
   1afd4:	sub	r6, r6, r5
   1afd8:	mov	r8, r1
   1afdc:	mov	r9, r2
   1afe0:	bl	11178 <fstatfs64@plt-0x20>
   1afe4:	asrs	r6, r6, #2
   1afe8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1afec:	mov	r4, #0
   1aff0:	add	r4, r4, #1
   1aff4:	ldr	r3, [r5], #4
   1aff8:	mov	r2, r9
   1affc:	mov	r1, r8
   1b000:	mov	r0, r7
   1b004:	blx	r3
   1b008:	cmp	r6, r4
   1b00c:	bne	1aff0 <__assert_fail@plt+0x9b34>
   1b010:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b014:	andeq	r1, r1, r8, lsr pc
   1b018:	andeq	r1, r1, r0, lsr pc
   1b01c:	bx	lr
   1b020:	ldr	r3, [pc, #12]	; 1b034 <__assert_fail@plt+0x9b78>
   1b024:	mov	r1, #0
   1b028:	add	r3, pc, r3
   1b02c:	ldr	r2, [r3]
   1b030:	b	11384 <__cxa_atexit@plt>
   1b034:	strdeq	r2, [r1], -r4

Disassembly of section .fini:

0001b038 <.fini>:
   1b038:	push	{r3, lr}
   1b03c:	pop	{r3, pc}
