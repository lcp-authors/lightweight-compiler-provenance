
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00012350 <.init>:
   12350:	push	{r3, lr}
   12354:	bl	12460 <_start@@Base+0x3c>
   12358:	pop	{r3, pc}

Disassembly of section .plt:

0001235c <strcmp@plt-0x14>:
   1235c:	push	{lr}		; (str lr, [sp, #-4]!)
   12360:	ldr	lr, [pc, #4]	; 1236c <strcmp@plt-0x4>
   12364:	add	lr, pc, lr
   12368:	ldr	pc, [lr, #8]!
   1236c:	muleq	r1, r4, ip

00012370 <strcmp@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #94208	; 0x17000
   12378:	ldr	pc, [ip, #3220]!	; 0xc94

0001237c <free@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #94208	; 0x17000
   12384:	ldr	pc, [ip, #3212]!	; 0xc8c

00012388 <memcpy@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #94208	; 0x17000
   12390:	ldr	pc, [ip, #3204]!	; 0xc84

00012394 <memcmp@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #94208	; 0x17000
   1239c:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a0 <realloc@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #94208	; 0x17000
   123a8:	ldr	pc, [ip, #3188]!	; 0xc74

000123ac <puts@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #94208	; 0x17000
   123b4:	ldr	pc, [ip, #3180]!	; 0xc6c

000123b8 <malloc@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #94208	; 0x17000
   123c0:	ldr	pc, [ip, #3172]!	; 0xc64

000123c4 <__libc_start_main@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #94208	; 0x17000
   123cc:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d0 <__gmon_start__@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #94208	; 0x17000
   123d8:	ldr	pc, [ip, #3156]!	; 0xc54

000123dc <strlen@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #94208	; 0x17000
   123e4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123e8 <posix_memalign@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #94208	; 0x17000
   123f0:	ldr	pc, [ip, #3140]!	; 0xc44

000123f4 <memset@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #94208	; 0x17000
   123fc:	ldr	pc, [ip, #3132]!	; 0xc3c

00012400 <memchr@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #94208	; 0x17000
   12408:	ldr	pc, [ip, #3124]!	; 0xc34

0001240c <abort@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #94208	; 0x17000
   12414:	ldr	pc, [ip, #3116]!	; 0xc2c

00012418 <__assert_fail@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #94208	; 0x17000
   12420:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00012424 <_start@@Base>:
   12424:	mov	fp, #0
   12428:	mov	lr, #0
   1242c:	pop	{r1}		; (ldr r1, [sp], #4)
   12430:	mov	r2, sp
   12434:	push	{r2}		; (str r2, [sp, #-4]!)
   12438:	push	{r0}		; (str r0, [sp, #-4]!)
   1243c:	ldr	ip, [pc, #16]	; 12454 <_start@@Base+0x30>
   12440:	push	{ip}		; (str ip, [sp, #-4]!)
   12444:	ldr	r0, [pc, #12]	; 12458 <_start@@Base+0x34>
   12448:	ldr	r3, [pc, #12]	; 1245c <_start@@Base+0x38>
   1244c:	bl	123c4 <__libc_start_main@plt>
   12450:	bl	1240c <abort@plt>
   12454:	andeq	r7, r1, ip, lsl r6
   12458:	andeq	r3, r1, r0, lsr #13
   1245c:			; <UNDEFINED> instruction: 0x000175bc
   12460:	ldr	r3, [pc, #20]	; 1247c <_start@@Base+0x58>
   12464:	ldr	r2, [pc, #20]	; 12480 <_start@@Base+0x5c>
   12468:	add	r3, pc, r3
   1246c:	ldr	r2, [r3, r2]
   12470:	cmp	r2, #0
   12474:	bxeq	lr
   12478:	b	123d0 <__gmon_start__@plt>
   1247c:	muleq	r1, r0, fp
   12480:	andeq	r0, r0, r8, asr #32
   12484:	ldr	r0, [pc, #24]	; 124a4 <_start@@Base+0x80>
   12488:	ldr	r3, [pc, #24]	; 124a8 <_start@@Base+0x84>
   1248c:	cmp	r3, r0
   12490:	bxeq	lr
   12494:	ldr	r3, [pc, #16]	; 124ac <_start@@Base+0x88>
   12498:	cmp	r3, #0
   1249c:	bxeq	lr
   124a0:	bx	r3
   124a4:	andeq	sl, r2, r4, asr r0
   124a8:	andeq	sl, r2, r4, asr r0
   124ac:	andeq	r0, r0, r0
   124b0:	ldr	r0, [pc, #36]	; 124dc <_start@@Base+0xb8>
   124b4:	ldr	r1, [pc, #36]	; 124e0 <_start@@Base+0xbc>
   124b8:	sub	r1, r1, r0
   124bc:	asr	r1, r1, #2
   124c0:	add	r1, r1, r1, lsr #31
   124c4:	asrs	r1, r1, #1
   124c8:	bxeq	lr
   124cc:	ldr	r3, [pc, #16]	; 124e4 <_start@@Base+0xc0>
   124d0:	cmp	r3, #0
   124d4:	bxeq	lr
   124d8:	bx	r3
   124dc:	andeq	sl, r2, r4, asr r0
   124e0:	andeq	sl, r2, r4, asr r0
   124e4:	andeq	r0, r0, r0
   124e8:	push	{r4, lr}
   124ec:	ldr	r4, [pc, #24]	; 1250c <_start@@Base+0xe8>
   124f0:	ldrb	r3, [r4]
   124f4:	cmp	r3, #0
   124f8:	popne	{r4, pc}
   124fc:	bl	12484 <_start@@Base+0x60>
   12500:	mov	r3, #1
   12504:	strb	r3, [r4]
   12508:	pop	{r4, pc}
   1250c:	andeq	sl, r2, r4, asr r0
   12510:	b	124b0 <_start@@Base+0x8c>

00012514 <create_monster_bottom_up@@Base>:
   12514:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12518:	add	fp, sp, #24
   1251c:	sub	sp, sp, #56	; 0x38
   12520:	mov	r8, r1
   12524:	mov	r4, r0
   12528:	movw	r1, #30260	; 0x7634
   1252c:	movt	r1, #1
   12530:	bl	12698 <create_monster_bottom_up@@Base+0x184>
   12534:	mov	r5, r0
   12538:	movw	r1, #30266	; 0x763a
   1253c:	movt	r1, #1
   12540:	mov	r0, r4
   12544:	bl	12698 <create_monster_bottom_up@@Base+0x184>
   12548:	mov	r6, r0
   1254c:	mov	r0, r4
   12550:	mov	r1, r5
   12554:	mov	r2, #3
   12558:	bl	1269c <create_monster_bottom_up@@Base+0x188>
   1255c:	mov	r5, r0
   12560:	mov	r0, r4
   12564:	mov	r1, r6
   12568:	mov	r2, #5
   1256c:	bl	1269c <create_monster_bottom_up@@Base+0x188>
   12570:	mov	r6, r0
   12574:	movw	r1, #30270	; 0x763e
   12578:	movt	r1, #1
   1257c:	mov	r0, r4
   12580:	bl	12698 <create_monster_bottom_up@@Base+0x184>
   12584:	mov	r9, r0
   12588:	movw	r0, #32344	; 0x7e58
   1258c:	movt	r0, #1
   12590:	vldr	d16, [r0]
   12594:	movw	r0, #2312	; 0x908
   12598:	strh	r0, [sp, #48]	; 0x30
   1259c:	vstr	d16, [sp, #40]	; 0x28
   125a0:	add	r1, sp, #40	; 0x28
   125a4:	mov	r0, r4
   125a8:	bl	126f8 <create_monster_bottom_up@@Base+0x1e4>
   125ac:	mov	r7, r0
   125b0:	mov	r0, r4
   125b4:	bl	12728 <create_monster_bottom_up@@Base+0x214>
   125b8:	mov	r0, r4
   125bc:	mov	r1, r5
   125c0:	bl	1272c <create_monster_bottom_up@@Base+0x218>
   125c4:	mov	r0, r4
   125c8:	mov	r1, r6
   125cc:	bl	1272c <create_monster_bottom_up@@Base+0x218>
   125d0:	mov	r0, r4
   125d4:	bl	12738 <create_monster_bottom_up@@Base+0x224>
   125d8:	mov	r5, r0
   125dc:	movw	r0, #32360	; 0x7e68
   125e0:	movt	r0, #1
   125e4:	vldr	d16, [r0]
   125e8:	ldr	r0, [r0, #8]
   125ec:	str	r0, [sp, #32]
   125f0:	vstr	d16, [sp, #24]
   125f4:	add	r0, sp, #16
   125f8:	mov	r1, r6
   125fc:	bl	1273c <create_monster_bottom_up@@Base+0x228>
   12600:	cmp	r8, #0
   12604:	beq	12668 <create_monster_bottom_up@@Base+0x154>
   12608:	mov	r0, r4
   1260c:	bl	127b8 <create_monster_bottom_up@@Base+0x2a4>
   12610:	mov	r0, r4
   12614:	bl	127dc <create_monster_bottom_up@@Base+0x2c8>
   12618:	mov	r0, r4
   1261c:	bl	127f8 <create_monster_bottom_up@@Base+0x2e4>
   12620:	mov	r0, r4
   12624:	mov	r1, r9
   12628:	bl	1282c <create_monster_bottom_up@@Base+0x318>
   1262c:	mov	r0, r4
   12630:	mov	r1, r7
   12634:	bl	12860 <create_monster_bottom_up@@Base+0x34c>
   12638:	mov	r0, r4
   1263c:	bl	12894 <create_monster_bottom_up@@Base+0x380>
   12640:	mov	r0, r4
   12644:	mov	r1, r5
   12648:	bl	128c4 <create_monster_bottom_up@@Base+0x3b0>
   1264c:	ldr	r1, [sp, #16]
   12650:	ldr	r2, [sp, #20]
   12654:	mov	r0, r4
   12658:	bl	128f8 <create_monster_bottom_up@@Base+0x3e4>
   1265c:	mov	r0, r4
   12660:	bl	1295c <create_monster_bottom_up@@Base+0x448>
   12664:	b	1268c <create_monster_bottom_up@@Base+0x178>
   12668:	ldr	r0, [sp, #16]
   1266c:	ldr	r1, [sp, #20]
   12670:	str	r5, [sp]
   12674:	stmib	sp, {r0, r1}
   12678:	add	r1, sp, #24
   1267c:	mov	r0, r4
   12680:	mov	r2, r9
   12684:	mov	r3, r7
   12688:	bl	1274c <create_monster_bottom_up@@Base+0x238>
   1268c:	mov	r0, #0
   12690:	sub	sp, fp, #24
   12694:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12698:	b	1685c <flatcc_builder_create_string_str@@Base>
   1269c:	push	{r4, r5, r6, sl, fp, lr}
   126a0:	add	fp, sp, #16
   126a4:	mov	r5, r2
   126a8:	mov	r6, r1
   126ac:	mov	r4, r0
   126b0:	bl	13754 <main@@Base+0xb4>
   126b4:	cmp	r0, #0
   126b8:	bne	126e4 <create_monster_bottom_up@@Base+0x1d0>
   126bc:	mov	r0, r4
   126c0:	mov	r1, r6
   126c4:	bl	1375c <main@@Base+0xbc>
   126c8:	cmp	r0, #0
   126cc:	bne	126e4 <create_monster_bottom_up@@Base+0x1d0>
   126d0:	mov	r0, r4
   126d4:	mov	r1, r5
   126d8:	bl	13790 <main@@Base+0xf0>
   126dc:	cmp	r0, #0
   126e0:	beq	126ec <create_monster_bottom_up@@Base+0x1d8>
   126e4:	mov	r0, #0
   126e8:	pop	{r4, r5, r6, sl, fp, pc}
   126ec:	mov	r0, r4
   126f0:	pop	{r4, r5, r6, sl, fp, lr}
   126f4:	b	137d8 <main@@Base+0x138>
   126f8:	push	{fp, lr}
   126fc:	mov	fp, sp
   12700:	sub	sp, sp, #8
   12704:	mvn	r2, #0
   12708:	mov	r3, #1
   1270c:	str	r3, [sp]
   12710:	str	r2, [sp, #4]
   12714:	mov	r2, #10
   12718:	mov	r3, #1
   1271c:	bl	15bb4 <flatcc_builder_create_vector@@Base>
   12720:	mov	sp, fp
   12724:	pop	{fp, pc}
   12728:	b	15104 <flatcc_builder_start_offset_vector@@Base>
   1272c:	cmp	r1, #0
   12730:	bxeq	lr
   12734:	b	14c88 <flatcc_builder_offset_vector_push@@Base>
   12738:	b	151b8 <flatcc_builder_end_offset_vector@@Base>
   1273c:	str	r1, [r0, #4]
   12740:	mov	r1, #1
   12744:	strb	r1, [r0]
   12748:	bx	lr
   1274c:	push	{r4, r5, r6, r7, fp, lr}
   12750:	add	fp, sp, #16
   12754:	sub	sp, sp, #16
   12758:	mov	r5, r3
   1275c:	mov	r6, r2
   12760:	mov	r7, r1
   12764:	mov	r4, r0
   12768:	bl	1384c <main@@Base+0x1ac>
   1276c:	cmp	r0, #0
   12770:	subne	sp, fp, #16
   12774:	popne	{r4, r5, r6, r7, fp, pc}
   12778:	ldr	r0, [fp, #16]
   1277c:	ldr	r1, [fp, #12]
   12780:	ldr	r2, [fp, #8]
   12784:	str	r2, [sp]
   12788:	str	r1, [sp, #4]
   1278c:	str	r0, [sp, #8]
   12790:	mov	r0, r4
   12794:	mov	r1, r7
   12798:	mov	r2, r6
   1279c:	mov	r3, r5
   127a0:	bl	13860 <main@@Base+0x1c0>
   127a4:	mov	r1, r0
   127a8:	mov	r0, r4
   127ac:	sub	sp, fp, #16
   127b0:	pop	{r4, r5, r6, r7, fp, lr}
   127b4:	b	1385c <main@@Base+0x1bc>
   127b8:	push	{r4, sl, fp, lr}
   127bc:	add	fp, sp, #8
   127c0:	mov	r4, r0
   127c4:	bl	1384c <main@@Base+0x1ac>
   127c8:	cmp	r0, #0
   127cc:	popne	{r4, sl, fp, pc}
   127d0:	mov	r0, r4
   127d4:	pop	{r4, sl, fp, lr}
   127d8:	b	1394c <main@@Base+0x2ac>
   127dc:	push	{fp, lr}
   127e0:	mov	fp, sp
   127e4:	bl	13a50 <main@@Base+0x3b0>
   127e8:	cmp	r0, #0
   127ec:	popeq	{fp, pc}
   127f0:	pop	{fp, lr}
   127f4:	b	13ab0 <main@@Base+0x410>
   127f8:	push	{fp, lr}
   127fc:	mov	fp, sp
   12800:	mov	r1, #2
   12804:	mov	r2, #2
   12808:	mov	r3, #2
   1280c:	bl	1615c <flatcc_builder_table_add@@Base>
   12810:	cmp	r0, #0
   12814:	mvneq	r0, #0
   12818:	popeq	{fp, pc}
   1281c:	mov	r1, #300	; 0x12c
   12820:	bl	13828 <main@@Base+0x188>
   12824:	mov	r0, #0
   12828:	pop	{fp, pc}
   1282c:	push	{r4, r5, fp, lr}
   12830:	add	fp, sp, #8
   12834:	mvn	r4, #0
   12838:	cmp	r1, #0
   1283c:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12840:	mov	r5, r1
   12844:	mov	r1, #3
   12848:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   1284c:	cmp	r0, #0
   12850:	strne	r5, [r0]
   12854:	movne	r4, #0
   12858:	mov	r0, r4
   1285c:	pop	{r4, r5, fp, pc}
   12860:	push	{r4, r5, fp, lr}
   12864:	add	fp, sp, #8
   12868:	mvn	r4, #0
   1286c:	cmp	r1, #0
   12870:	beq	1288c <create_monster_bottom_up@@Base+0x378>
   12874:	mov	r5, r1
   12878:	mov	r1, #5
   1287c:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   12880:	cmp	r0, #0
   12884:	strne	r5, [r0]
   12888:	movne	r4, #0
   1288c:	mov	r0, r4
   12890:	pop	{r4, r5, fp, pc}
   12894:	push	{fp, lr}
   12898:	mov	fp, sp
   1289c:	mov	r1, #6
   128a0:	mov	r2, #1
   128a4:	mov	r3, #1
   128a8:	bl	1615c <flatcc_builder_table_add@@Base>
   128ac:	cmp	r0, #0
   128b0:	mvneq	r0, #0
   128b4:	popeq	{fp, pc}
   128b8:	bl	13af8 <main@@Base+0x458>
   128bc:	mov	r0, #0
   128c0:	pop	{fp, pc}
   128c4:	push	{r4, r5, fp, lr}
   128c8:	add	fp, sp, #8
   128cc:	mvn	r4, #0
   128d0:	cmp	r1, #0
   128d4:	beq	128f0 <create_monster_bottom_up@@Base+0x3dc>
   128d8:	mov	r5, r1
   128dc:	mov	r1, #7
   128e0:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   128e4:	cmp	r0, #0
   128e8:	strne	r5, [r0]
   128ec:	movne	r4, #0
   128f0:	mov	r0, r4
   128f4:	pop	{r4, r5, fp, pc}
   128f8:	push	{r4, r5, r6, r7, fp, lr}
   128fc:	add	fp, sp, #16
   12900:	cmp	r2, #0
   12904:	movne	r5, r1
   12908:	movne	r6, r0
   1290c:	uxtbne	r0, r1
   12910:	cmpne	r0, #0
   12914:	bne	1291c <create_monster_bottom_up@@Base+0x408>
   12918:	pop	{r4, r5, r6, r7, fp, pc}
   1291c:	mov	r4, r2
   12920:	mov	r0, r6
   12924:	mov	r1, #8
   12928:	mov	r2, #1
   1292c:	mov	r3, #1
   12930:	bl	1615c <flatcc_builder_table_add@@Base>
   12934:	cmp	r0, #0
   12938:	popeq	{r4, r5, r6, r7, fp, pc}
   1293c:	mov	r7, r0
   12940:	mov	r0, r6
   12944:	mov	r1, #9
   12948:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   1294c:	cmp	r0, #0
   12950:	strbne	r5, [r7]
   12954:	strne	r4, [r0]
   12958:	pop	{r4, r5, r6, r7, fp, pc}
   1295c:	push	{r4, sl, fp, lr}
   12960:	add	fp, sp, #8
   12964:	mov	r4, r0
   12968:	bl	13a00 <main@@Base+0x360>
   1296c:	mov	r1, r0
   12970:	mov	r0, r4
   12974:	pop	{r4, sl, fp, lr}
   12978:	b	1385c <main@@Base+0x1bc>

0001297c <create_monster_top_down@@Base>:
   1297c:	push	{r4, r5, fp, lr}
   12980:	add	fp, sp, #8
   12984:	sub	sp, sp, #16
   12988:	mov	r4, r0
   1298c:	movw	r0, #32376	; 0x7e78
   12990:	movt	r0, #1
   12994:	vldr	d16, [r0]
   12998:	movw	r0, #2312	; 0x908
   1299c:	strh	r0, [sp, #8]
   129a0:	vstr	d16, [sp]
   129a4:	mov	r0, r4
   129a8:	bl	127b8 <create_monster_bottom_up@@Base+0x2a4>
   129ac:	mov	r0, r4
   129b0:	bl	127dc <create_monster_bottom_up@@Base+0x2c8>
   129b4:	mov	r0, r4
   129b8:	bl	127f8 <create_monster_bottom_up@@Base+0x2e4>
   129bc:	mov	r0, r4
   129c0:	bl	12a4c <create_monster_top_down@@Base+0xd0>
   129c4:	mov	r1, sp
   129c8:	mov	r0, r4
   129cc:	bl	12a74 <create_monster_top_down@@Base+0xf8>
   129d0:	mov	r0, r4
   129d4:	bl	12894 <create_monster_bottom_up@@Base+0x380>
   129d8:	mov	r0, r4
   129dc:	bl	12a94 <create_monster_top_down@@Base+0x118>
   129e0:	movw	r1, #30260	; 0x7634
   129e4:	movt	r1, #1
   129e8:	mov	r0, r4
   129ec:	bl	12698 <create_monster_bottom_up@@Base+0x184>
   129f0:	mov	r1, r0
   129f4:	mov	r0, r4
   129f8:	mov	r2, #3
   129fc:	bl	12a98 <create_monster_top_down@@Base+0x11c>
   12a00:	movw	r1, #30266	; 0x763a
   12a04:	movt	r1, #1
   12a08:	mov	r0, r4
   12a0c:	bl	12698 <create_monster_bottom_up@@Base+0x184>
   12a10:	mov	r1, r0
   12a14:	mov	r0, r4
   12a18:	mov	r2, #5
   12a1c:	bl	12a98 <create_monster_top_down@@Base+0x11c>
   12a20:	ldr	r5, [r0]
   12a24:	mov	r0, r4
   12a28:	bl	12ab8 <create_monster_top_down@@Base+0x13c>
   12a2c:	mov	r0, r4
   12a30:	mov	r1, r5
   12a34:	bl	12ad8 <create_monster_top_down@@Base+0x15c>
   12a38:	mov	r0, r4
   12a3c:	bl	1295c <create_monster_bottom_up@@Base+0x448>
   12a40:	mov	r0, #0
   12a44:	sub	sp, fp, #8
   12a48:	pop	{r4, r5, fp, pc}
   12a4c:	push	{r4, sl, fp, lr}
   12a50:	add	fp, sp, #8
   12a54:	mov	r4, r0
   12a58:	movw	r1, #30270	; 0x763e
   12a5c:	movt	r1, #1
   12a60:	bl	1685c <flatcc_builder_create_string_str@@Base>
   12a64:	mov	r1, r0
   12a68:	mov	r0, r4
   12a6c:	pop	{r4, sl, fp, lr}
   12a70:	b	1282c <create_monster_bottom_up@@Base+0x318>
   12a74:	push	{r4, sl, fp, lr}
   12a78:	add	fp, sp, #8
   12a7c:	mov	r4, r0
   12a80:	bl	126f8 <create_monster_bottom_up@@Base+0x1e4>
   12a84:	mov	r1, r0
   12a88:	mov	r0, r4
   12a8c:	pop	{r4, sl, fp, lr}
   12a90:	b	12860 <create_monster_bottom_up@@Base+0x34c>
   12a94:	b	15104 <flatcc_builder_start_offset_vector@@Base>
   12a98:	push	{r4, sl, fp, lr}
   12a9c:	add	fp, sp, #8
   12aa0:	mov	r4, r0
   12aa4:	bl	1269c <create_monster_bottom_up@@Base+0x188>
   12aa8:	mov	r1, r0
   12aac:	mov	r0, r4
   12ab0:	pop	{r4, sl, fp, lr}
   12ab4:	b	13b04 <main@@Base+0x464>
   12ab8:	push	{r4, sl, fp, lr}
   12abc:	add	fp, sp, #8
   12ac0:	mov	r4, r0
   12ac4:	bl	151b8 <flatcc_builder_end_offset_vector@@Base>
   12ac8:	mov	r1, r0
   12acc:	mov	r0, r4
   12ad0:	pop	{r4, sl, fp, lr}
   12ad4:	b	128c4 <create_monster_bottom_up@@Base+0x3b0>
   12ad8:	push	{r4, sl, fp, lr}
   12adc:	add	fp, sp, #8
   12ae0:	sub	sp, sp, #8
   12ae4:	mov	r4, r0
   12ae8:	mov	r0, sp
   12aec:	bl	1273c <create_monster_bottom_up@@Base+0x228>
   12af0:	ldm	sp, {r1, r2}
   12af4:	mov	r0, r4
   12af8:	sub	sp, fp, #8
   12afc:	pop	{r4, sl, fp, lr}
   12b00:	b	128f8 <create_monster_bottom_up@@Base+0x3e4>

00012b04 <access_monster_buffer@@Base>:
   12b04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b08:	add	fp, sp, #24
   12b0c:	vpush	{d8-d11}
   12b10:	sub	sp, sp, #16
   12b14:	bl	12fec <access_monster_buffer@@Base+0x4e8>
   12b18:	cmp	r0, #0
   12b1c:	beq	12d4c <access_monster_buffer@@Base+0x248>
   12b20:	mov	r4, r0
   12b24:	bl	13010 <access_monster_buffer@@Base+0x50c>
   12b28:	mov	r5, r0
   12b2c:	mov	r0, r4
   12b30:	bl	13080 <access_monster_buffer@@Base+0x57c>
   12b34:	mov	r7, r0
   12b38:	mov	r0, r4
   12b3c:	bl	130f0 <access_monster_buffer@@Base+0x5ec>
   12b40:	mov	r6, r0
   12b44:	bl	1316c <access_monster_buffer@@Base+0x668>
   12b48:	cmp	r5, #300	; 0x12c
   12b4c:	bne	12d6c <access_monster_buffer@@Base+0x268>
   12b50:	cmp	r7, #150	; 0x96
   12b54:	bne	12d8c <access_monster_buffer@@Base+0x288>
   12b58:	mov	r8, r0
   12b5c:	movw	r1, #30270	; 0x763e
   12b60:	movt	r1, #1
   12b64:	mov	r0, r6
   12b68:	bl	12370 <strcmp@plt>
   12b6c:	cmp	r0, #0
   12b70:	bne	12dac <access_monster_buffer@@Base+0x2a8>
   12b74:	cmp	r8, #3
   12b78:	bne	12dcc <access_monster_buffer@@Base+0x2c8>
   12b7c:	mov	r0, r4
   12b80:	bl	13180 <access_monster_buffer@@Base+0x67c>
   12b84:	mov	r5, r0
   12b88:	mov	r0, r4
   12b8c:	bl	131e8 <access_monster_buffer@@Base+0x6e4>
   12b90:	cmp	r5, #0
   12b94:	beq	12dec <access_monster_buffer@@Base+0x2e8>
   12b98:	cmp	r0, #0
   12b9c:	bne	12e0c <access_monster_buffer@@Base+0x308>
   12ba0:	mov	r0, r4
   12ba4:	bl	13250 <access_monster_buffer@@Base+0x74c>
   12ba8:	cmp	r0, #0
   12bac:	beq	12e2c <access_monster_buffer@@Base+0x328>
   12bb0:	mov	r5, r0
   12bb4:	bl	132b8 <access_monster_buffer@@Base+0x7b4>
   12bb8:	vmov.f32	s18, s0
   12bbc:	mov	r0, r5
   12bc0:	bl	132e4 <access_monster_buffer@@Base+0x7e0>
   12bc4:	vmov.f32	s20, #112	; 0x3f800000  1.0
   12bc8:	vcmp.f32	s18, s20
   12bcc:	vmrs	APSR_nzcv, fpscr
   12bd0:	bne	12e4c <access_monster_buffer@@Base+0x348>
   12bd4:	vmov.f32	s16, s0
   12bd8:	mov	r0, r5
   12bdc:	bl	132cc <access_monster_buffer@@Base+0x7c8>
   12be0:	vmov.f32	s18, #0	; 0x40000000  2.0
   12be4:	vcmp.f32	s0, s18
   12be8:	vmrs	APSR_nzcv, fpscr
   12bec:	bne	12e6c <access_monster_buffer@@Base+0x368>
   12bf0:	vmov.f32	s22, #8	; 0x40400000  3.0
   12bf4:	vcmp.f32	s16, s22
   12bf8:	vmrs	APSR_nzcv, fpscr
   12bfc:	bne	12e8c <access_monster_buffer@@Base+0x388>
   12c00:	add	r0, sp, #4
   12c04:	mov	r1, r5
   12c08:	bl	132fc <access_monster_buffer@@Base+0x7f8>
   12c0c:	vldr	s0, [sp, #4]
   12c10:	vcmp.f32	s0, s20
   12c14:	vmrs	APSR_nzcv, fpscr
   12c18:	bne	12eac <access_monster_buffer@@Base+0x3a8>
   12c1c:	vldr	s0, [sp, #8]
   12c20:	vcmp.f32	s0, s18
   12c24:	vmrs	APSR_nzcv, fpscr
   12c28:	bne	12ecc <access_monster_buffer@@Base+0x3c8>
   12c2c:	vldr	s0, [sp, #12]
   12c30:	vcmp.f32	s0, s22
   12c34:	vmrs	APSR_nzcv, fpscr
   12c38:	bne	12eec <access_monster_buffer@@Base+0x3e8>
   12c3c:	mov	r0, r4
   12c40:	bl	1332c <access_monster_buffer@@Base+0x828>
   12c44:	cmp	r0, #0
   12c48:	beq	12f0c <access_monster_buffer@@Base+0x408>
   12c4c:	mov	r5, r0
   12c50:	bl	133a8 <access_monster_buffer@@Base+0x8a4>
   12c54:	cmp	r0, #10
   12c58:	bne	12f2c <access_monster_buffer@@Base+0x428>
   12c5c:	mov	r0, r5
   12c60:	bl	133ac <access_monster_buffer@@Base+0x8a8>
   12c64:	cmp	r0, #2
   12c68:	bne	12f4c <access_monster_buffer@@Base+0x448>
   12c6c:	mov	r0, r4
   12c70:	bl	133f0 <access_monster_buffer@@Base+0x8ec>
   12c74:	mov	r5, r0
   12c78:	bl	1346c <access_monster_buffer@@Base+0x968>
   12c7c:	cmp	r0, #2
   12c80:	bne	12f6c <access_monster_buffer@@Base+0x468>
   12c84:	mov	r0, r5
   12c88:	bl	134fc <access_monster_buffer@@Base+0x9f8>
   12c8c:	bl	13480 <access_monster_buffer@@Base+0x97c>
   12c90:	mov	r6, r0
   12c94:	mov	r0, r5
   12c98:	bl	134fc <access_monster_buffer@@Base+0x9f8>
   12c9c:	bl	13548 <access_monster_buffer@@Base+0xa44>
   12ca0:	cmp	r6, #0
   12ca4:	beq	12d2c <access_monster_buffer@@Base+0x228>
   12ca8:	mov	r5, r0
   12cac:	movw	r1, #30266	; 0x763a
   12cb0:	movt	r1, #1
   12cb4:	mov	r0, r6
   12cb8:	bl	12370 <strcmp@plt>
   12cbc:	cmp	r0, #0
   12cc0:	bne	12d2c <access_monster_buffer@@Base+0x228>
   12cc4:	cmp	r5, #5
   12cc8:	bne	12f8c <access_monster_buffer@@Base+0x488>
   12ccc:	mov	r0, r4
   12cd0:	bl	135b8 <access_monster_buffer@@Base+0xab4>
   12cd4:	cmp	r0, #1
   12cd8:	bne	12d1c <access_monster_buffer@@Base+0x218>
   12cdc:	mov	r0, r4
   12ce0:	bl	13628 <access_monster_buffer@@Base+0xb24>
   12ce4:	mov	r4, r0
   12ce8:	bl	13480 <access_monster_buffer@@Base+0x97c>
   12cec:	mov	r5, r0
   12cf0:	mov	r0, r4
   12cf4:	bl	13548 <access_monster_buffer@@Base+0xa44>
   12cf8:	mov	r4, r0
   12cfc:	movw	r1, #30266	; 0x763a
   12d00:	movt	r1, #1
   12d04:	mov	r0, r5
   12d08:	bl	12370 <strcmp@plt>
   12d0c:	cmp	r0, #0
   12d10:	bne	12fac <access_monster_buffer@@Base+0x4a8>
   12d14:	cmp	r4, #5
   12d18:	bne	12fcc <access_monster_buffer@@Base+0x4c8>
   12d1c:	mov	r0, #0
   12d20:	sub	sp, fp, #56	; 0x38
   12d24:	vpop	{d8-d11}
   12d28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d2c:	movw	r0, #37512	; 0x9288
   12d30:	movt	r0, #1
   12d34:	movw	r1, #30274	; 0x7642
   12d38:	movt	r1, #1
   12d3c:	movw	r3, #30348	; 0x768c
   12d40:	movt	r3, #1
   12d44:	movw	r2, #275	; 0x113
   12d48:	bl	12418 <__assert_fail@plt>
   12d4c:	movw	r0, #37512	; 0x9288
   12d50:	movt	r0, #1
   12d54:	movw	r1, #30274	; 0x7642
   12d58:	movt	r1, #1
   12d5c:	movw	r3, #30348	; 0x768c
   12d60:	movt	r3, #1
   12d64:	mov	r2, #211	; 0xd3
   12d68:	bl	12418 <__assert_fail@plt>
   12d6c:	movw	r0, #37512	; 0x9288
   12d70:	movt	r0, #1
   12d74:	movw	r1, #30274	; 0x7642
   12d78:	movt	r1, #1
   12d7c:	movw	r3, #30348	; 0x768c
   12d80:	movt	r3, #1
   12d84:	mov	r2, #219	; 0xdb
   12d88:	bl	12418 <__assert_fail@plt>
   12d8c:	movw	r0, #37512	; 0x9288
   12d90:	movt	r0, #1
   12d94:	movw	r1, #30274	; 0x7642
   12d98:	movt	r1, #1
   12d9c:	movw	r3, #30348	; 0x768c
   12da0:	movt	r3, #1
   12da4:	mov	r2, #221	; 0xdd
   12da8:	bl	12418 <__assert_fail@plt>
   12dac:	movw	r0, #37512	; 0x9288
   12db0:	movt	r0, #1
   12db4:	movw	r1, #30274	; 0x7642
   12db8:	movt	r1, #1
   12dbc:	movw	r3, #30348	; 0x768c
   12dc0:	movt	r3, #1
   12dc4:	mov	r2, #222	; 0xde
   12dc8:	bl	12418 <__assert_fail@plt>
   12dcc:	movw	r0, #37512	; 0x9288
   12dd0:	movt	r0, #1
   12dd4:	movw	r1, #30274	; 0x7642
   12dd8:	movt	r1, #1
   12ddc:	movw	r3, #30348	; 0x768c
   12de0:	movt	r3, #1
   12de4:	mov	r2, #223	; 0xdf
   12de8:	bl	12418 <__assert_fail@plt>
   12dec:	movw	r0, #37512	; 0x9288
   12df0:	movt	r0, #1
   12df4:	movw	r1, #30274	; 0x7642
   12df8:	movt	r1, #1
   12dfc:	movw	r3, #30348	; 0x768c
   12e00:	movt	r3, #1
   12e04:	mov	r2, #227	; 0xe3
   12e08:	bl	12418 <__assert_fail@plt>
   12e0c:	movw	r0, #37512	; 0x9288
   12e10:	movt	r0, #1
   12e14:	movw	r1, #30274	; 0x7642
   12e18:	movt	r1, #1
   12e1c:	movw	r3, #30348	; 0x768c
   12e20:	movt	r3, #1
   12e24:	mov	r2, #228	; 0xe4
   12e28:	bl	12418 <__assert_fail@plt>
   12e2c:	movw	r0, #37512	; 0x9288
   12e30:	movt	r0, #1
   12e34:	movw	r1, #30274	; 0x7642
   12e38:	movt	r1, #1
   12e3c:	movw	r3, #30348	; 0x768c
   12e40:	movt	r3, #1
   12e44:	mov	r2, #232	; 0xe8
   12e48:	bl	12418 <__assert_fail@plt>
   12e4c:	movw	r0, #37512	; 0x9288
   12e50:	movt	r0, #1
   12e54:	movw	r1, #30274	; 0x7642
   12e58:	movt	r1, #1
   12e5c:	movw	r3, #30348	; 0x768c
   12e60:	movt	r3, #1
   12e64:	mov	r2, #240	; 0xf0
   12e68:	bl	12418 <__assert_fail@plt>
   12e6c:	movw	r0, #37512	; 0x9288
   12e70:	movt	r0, #1
   12e74:	movw	r1, #30274	; 0x7642
   12e78:	movt	r1, #1
   12e7c:	movw	r3, #30348	; 0x768c
   12e80:	movt	r3, #1
   12e84:	mov	r2, #241	; 0xf1
   12e88:	bl	12418 <__assert_fail@plt>
   12e8c:	movw	r0, #37512	; 0x9288
   12e90:	movt	r0, #1
   12e94:	movw	r1, #30274	; 0x7642
   12e98:	movt	r1, #1
   12e9c:	movw	r3, #30348	; 0x768c
   12ea0:	movt	r3, #1
   12ea4:	mov	r2, #242	; 0xf2
   12ea8:	bl	12418 <__assert_fail@plt>
   12eac:	movw	r0, #37512	; 0x9288
   12eb0:	movt	r0, #1
   12eb4:	movw	r1, #30274	; 0x7642
   12eb8:	movt	r1, #1
   12ebc:	movw	r3, #30348	; 0x768c
   12ec0:	movt	r3, #1
   12ec4:	mov	r2, #250	; 0xfa
   12ec8:	bl	12418 <__assert_fail@plt>
   12ecc:	movw	r0, #37512	; 0x9288
   12ed0:	movt	r0, #1
   12ed4:	movw	r1, #30274	; 0x7642
   12ed8:	movt	r1, #1
   12edc:	movw	r3, #30348	; 0x768c
   12ee0:	movt	r3, #1
   12ee4:	mov	r2, #251	; 0xfb
   12ee8:	bl	12418 <__assert_fail@plt>
   12eec:	movw	r0, #37512	; 0x9288
   12ef0:	movt	r0, #1
   12ef4:	movw	r1, #30274	; 0x7642
   12ef8:	movt	r1, #1
   12efc:	movw	r3, #30348	; 0x768c
   12f00:	movt	r3, #1
   12f04:	mov	r2, #252	; 0xfc
   12f08:	bl	12418 <__assert_fail@plt>
   12f0c:	movw	r0, #37512	; 0x9288
   12f10:	movt	r0, #1
   12f14:	movw	r1, #30274	; 0x7642
   12f18:	movt	r1, #1
   12f1c:	movw	r3, #30348	; 0x768c
   12f20:	movt	r3, #1
   12f24:	movw	r2, #261	; 0x105
   12f28:	bl	12418 <__assert_fail@plt>
   12f2c:	movw	r0, #37512	; 0x9288
   12f30:	movt	r0, #1
   12f34:	movw	r1, #30274	; 0x7642
   12f38:	movt	r1, #1
   12f3c:	movw	r3, #30348	; 0x768c
   12f40:	movt	r3, #1
   12f44:	movw	r2, #263	; 0x107
   12f48:	bl	12418 <__assert_fail@plt>
   12f4c:	movw	r0, #37512	; 0x9288
   12f50:	movt	r0, #1
   12f54:	movw	r1, #30274	; 0x7642
   12f58:	movt	r1, #1
   12f5c:	movw	r3, #30348	; 0x768c
   12f60:	movt	r3, #1
   12f64:	movw	r2, #267	; 0x10b
   12f68:	bl	12418 <__assert_fail@plt>
   12f6c:	movw	r0, #37512	; 0x9288
   12f70:	movt	r0, #1
   12f74:	movw	r1, #30274	; 0x7642
   12f78:	movt	r1, #1
   12f7c:	movw	r3, #30348	; 0x768c
   12f80:	movt	r3, #1
   12f84:	movw	r2, #271	; 0x10f
   12f88:	bl	12418 <__assert_fail@plt>
   12f8c:	movw	r0, #37512	; 0x9288
   12f90:	movt	r0, #1
   12f94:	movw	r1, #30274	; 0x7642
   12f98:	movt	r1, #1
   12f9c:	movw	r3, #30348	; 0x768c
   12fa0:	movt	r3, #1
   12fa4:	mov	r2, #276	; 0x114
   12fa8:	bl	12418 <__assert_fail@plt>
   12fac:	movw	r0, #37512	; 0x9288
   12fb0:	movt	r0, #1
   12fb4:	movw	r1, #30274	; 0x7642
   12fb8:	movt	r1, #1
   12fbc:	movw	r3, #30348	; 0x768c
   12fc0:	movt	r3, #1
   12fc4:	movw	r2, #286	; 0x11e
   12fc8:	bl	12418 <__assert_fail@plt>
   12fcc:	movw	r0, #37512	; 0x9288
   12fd0:	movt	r0, #1
   12fd4:	movw	r1, #30274	; 0x7642
   12fd8:	movt	r1, #1
   12fdc:	movw	r3, #30348	; 0x768c
   12fe0:	movt	r3, #1
   12fe4:	movw	r2, #287	; 0x11f
   12fe8:	bl	12418 <__assert_fail@plt>
   12fec:	cmp	r0, #0
   12ff0:	moveq	r0, #0
   12ff4:	bxeq	lr
   12ff8:	push	{r4, sl, fp, lr}
   12ffc:	add	fp, sp, #8
   13000:	mov	r4, r0
   13004:	bl	13b14 <main@@Base+0x474>
   13008:	add	r0, r4, r0
   1300c:	pop	{r4, sl, fp, pc}
   13010:	push	{r4, r5, fp, lr}
   13014:	add	fp, sp, #8
   13018:	cmp	r0, #0
   1301c:	beq	13060 <access_monster_buffer@@Base+0x55c>
   13020:	mov	r4, r0
   13024:	bl	13b20 <main@@Base+0x480>
   13028:	sub	r5, r4, r0
   1302c:	mov	r0, r5
   13030:	bl	13b28 <main@@Base+0x488>
   13034:	cmp	r0, #10
   13038:	bcc	13058 <access_monster_buffer@@Base+0x554>
   1303c:	add	r0, r5, #8
   13040:	bl	13b28 <main@@Base+0x488>
   13044:	cmp	r0, #0
   13048:	beq	13058 <access_monster_buffer@@Base+0x554>
   1304c:	add	r0, r4, r0
   13050:	pop	{r4, r5, fp, lr}
   13054:	b	13b30 <main@@Base+0x490>
   13058:	mov	r0, #100	; 0x64
   1305c:	pop	{r4, r5, fp, pc}
   13060:	movw	r0, #30954	; 0x78ea
   13064:	movt	r0, #1
   13068:	movw	r1, #30992	; 0x7910
   1306c:	movt	r1, #1
   13070:	movw	r3, #31083	; 0x796b
   13074:	movt	r3, #1
   13078:	mov	r2, #131	; 0x83
   1307c:	bl	12418 <__assert_fail@plt>
   13080:	push	{r4, r5, fp, lr}
   13084:	add	fp, sp, #8
   13088:	cmp	r0, #0
   1308c:	beq	130d0 <access_monster_buffer@@Base+0x5cc>
   13090:	mov	r4, r0
   13094:	bl	13b20 <main@@Base+0x480>
   13098:	sub	r5, r4, r0
   1309c:	mov	r0, r5
   130a0:	bl	13b28 <main@@Base+0x488>
   130a4:	cmp	r0, #8
   130a8:	bcc	130c8 <access_monster_buffer@@Base+0x5c4>
   130ac:	add	r0, r5, #6
   130b0:	bl	13b28 <main@@Base+0x488>
   130b4:	cmp	r0, #0
   130b8:	beq	130c8 <access_monster_buffer@@Base+0x5c4>
   130bc:	add	r0, r4, r0
   130c0:	pop	{r4, r5, fp, lr}
   130c4:	b	13b30 <main@@Base+0x490>
   130c8:	mov	r0, #150	; 0x96
   130cc:	pop	{r4, r5, fp, pc}
   130d0:	movw	r0, #30954	; 0x78ea
   130d4:	movt	r0, #1
   130d8:	movw	r1, #30992	; 0x7910
   130dc:	movt	r1, #1
   130e0:	movw	r3, #31147	; 0x79ab
   130e4:	movt	r3, #1
   130e8:	mov	r2, #130	; 0x82
   130ec:	bl	12418 <__assert_fail@plt>
   130f0:	push	{r4, r5, r6, sl, fp, lr}
   130f4:	add	fp, sp, #16
   130f8:	cmp	r0, #0
   130fc:	beq	1314c <access_monster_buffer@@Base+0x648>
   13100:	mov	r4, r0
   13104:	bl	13b20 <main@@Base+0x480>
   13108:	sub	r6, r4, r0
   1310c:	mov	r0, r6
   13110:	bl	13b28 <main@@Base+0x488>
   13114:	mov	r5, #0
   13118:	cmp	r0, #12
   1311c:	bcc	13144 <access_monster_buffer@@Base+0x640>
   13120:	add	r0, r6, #10
   13124:	bl	13b28 <main@@Base+0x488>
   13128:	cmp	r0, #0
   1312c:	beq	13144 <access_monster_buffer@@Base+0x640>
   13130:	add	r4, r4, r0
   13134:	mov	r0, r4
   13138:	bl	13b14 <main@@Base+0x474>
   1313c:	add	r0, r4, r0
   13140:	add	r5, r0, #4
   13144:	mov	r0, r5
   13148:	pop	{r4, r5, r6, sl, fp, pc}
   1314c:	movw	r0, #30954	; 0x78ea
   13150:	movt	r0, #1
   13154:	movw	r1, #30992	; 0x7910
   13158:	movt	r1, #1
   1315c:	movw	r3, #31213	; 0x79ed
   13160:	movt	r3, #1
   13164:	mov	r2, #132	; 0x84
   13168:	bl	12418 <__assert_fail@plt>
   1316c:	cmp	r0, #0
   13170:	moveq	r0, #0
   13174:	bxeq	lr
   13178:	sub	r0, r0, #4
   1317c:	b	13b14 <main@@Base+0x474>
   13180:	push	{r4, sl, fp, lr}
   13184:	add	fp, sp, #8
   13188:	cmp	r0, #0
   1318c:	beq	131c8 <access_monster_buffer@@Base+0x6c4>
   13190:	mov	r4, r0
   13194:	bl	13b20 <main@@Base+0x480>
   13198:	sub	r4, r4, r0
   1319c:	mov	r0, r4
   131a0:	bl	13b28 <main@@Base+0x488>
   131a4:	mov	r1, r0
   131a8:	mov	r0, #0
   131ac:	cmp	r1, #10
   131b0:	popcc	{r4, sl, fp, pc}
   131b4:	add	r0, r4, #8
   131b8:	bl	13b28 <main@@Base+0x488>
   131bc:	cmp	r0, #0
   131c0:	movwne	r0, #1
   131c4:	pop	{r4, sl, fp, pc}
   131c8:	movw	r0, #30954	; 0x78ea
   131cc:	movt	r0, #1
   131d0:	movw	r1, #30992	; 0x7910
   131d4:	movt	r1, #1
   131d8:	movw	r3, #31292	; 0x7a3c
   131dc:	movt	r3, #1
   131e0:	mov	r2, #131	; 0x83
   131e4:	bl	12418 <__assert_fail@plt>
   131e8:	push	{r4, sl, fp, lr}
   131ec:	add	fp, sp, #8
   131f0:	cmp	r0, #0
   131f4:	beq	13230 <access_monster_buffer@@Base+0x72c>
   131f8:	mov	r4, r0
   131fc:	bl	13b20 <main@@Base+0x480>
   13200:	sub	r4, r4, r0
   13204:	mov	r0, r4
   13208:	bl	13b28 <main@@Base+0x488>
   1320c:	mov	r1, r0
   13210:	mov	r0, #0
   13214:	cmp	r1, #8
   13218:	popcc	{r4, sl, fp, pc}
   1321c:	add	r0, r4, #6
   13220:	bl	13b28 <main@@Base+0x488>
   13224:	cmp	r0, #0
   13228:	movwne	r0, #1
   1322c:	pop	{r4, sl, fp, pc}
   13230:	movw	r0, #30954	; 0x78ea
   13234:	movt	r0, #1
   13238:	movw	r1, #30992	; 0x7910
   1323c:	movt	r1, #1
   13240:	movw	r3, #31363	; 0x7a83
   13244:	movt	r3, #1
   13248:	mov	r2, #130	; 0x82
   1324c:	bl	12418 <__assert_fail@plt>
   13250:	push	{r4, r5, fp, lr}
   13254:	add	fp, sp, #8
   13258:	cmp	r0, #0
   1325c:	beq	13298 <access_monster_buffer@@Base+0x794>
   13260:	mov	r4, r0
   13264:	bl	13b20 <main@@Base+0x480>
   13268:	sub	r5, r4, r0
   1326c:	mov	r0, r5
   13270:	bl	13b28 <main@@Base+0x488>
   13274:	cmp	r0, #6
   13278:	bcc	13290 <access_monster_buffer@@Base+0x78c>
   1327c:	add	r0, r5, #4
   13280:	bl	13b28 <main@@Base+0x488>
   13284:	cmp	r0, #0
   13288:	addne	r0, r4, r0
   1328c:	popne	{r4, r5, fp, pc}
   13290:	mov	r0, #0
   13294:	pop	{r4, r5, fp, pc}
   13298:	movw	r0, #30954	; 0x78ea
   1329c:	movt	r0, #1
   132a0:	movw	r1, #30992	; 0x7910
   132a4:	movt	r1, #1
   132a8:	movw	r3, #31436	; 0x7acc
   132ac:	movt	r3, #1
   132b0:	mov	r2, #129	; 0x81
   132b4:	bl	12418 <__assert_fail@plt>
   132b8:	cmp	r0, #0
   132bc:	vldreq	s0, [pc, #4]	; 132c8 <access_monster_buffer@@Base+0x7c4>
   132c0:	bxeq	lr
   132c4:	b	13b44 <main@@Base+0x4a4>
   132c8:	andeq	r0, r0, r0
   132cc:	cmp	r0, #0
   132d0:	vldreq	s0, [pc, #8]	; 132e0 <access_monster_buffer@@Base+0x7dc>
   132d4:	bxeq	lr
   132d8:	add	r0, r0, #4
   132dc:	b	13b44 <main@@Base+0x4a4>
   132e0:	andeq	r0, r0, r0
   132e4:	cmp	r0, #0
   132e8:	vldreq	s0, [pc, #8]	; 132f8 <access_monster_buffer@@Base+0x7f4>
   132ec:	bxeq	lr
   132f0:	add	r0, r0, #8
   132f4:	b	13b44 <main@@Base+0x4a4>
   132f8:	andeq	r0, r0, r0
   132fc:	push	{r4, r5, fp, lr}
   13300:	add	fp, sp, #8
   13304:	mov	r4, r1
   13308:	mov	r5, r0
   1330c:	bl	13b50 <main@@Base+0x4b0>
   13310:	add	r0, r5, #4
   13314:	add	r1, r4, #4
   13318:	bl	13b50 <main@@Base+0x4b0>
   1331c:	add	r0, r5, #8
   13320:	add	r1, r4, #8
   13324:	pop	{r4, r5, fp, lr}
   13328:	b	13b50 <main@@Base+0x4b0>
   1332c:	push	{r4, r5, r6, sl, fp, lr}
   13330:	add	fp, sp, #16
   13334:	cmp	r0, #0
   13338:	beq	13388 <access_monster_buffer@@Base+0x884>
   1333c:	mov	r4, r0
   13340:	bl	13b20 <main@@Base+0x480>
   13344:	sub	r6, r4, r0
   13348:	mov	r0, r6
   1334c:	bl	13b28 <main@@Base+0x488>
   13350:	mov	r5, #0
   13354:	cmp	r0, #16
   13358:	bcc	13380 <access_monster_buffer@@Base+0x87c>
   1335c:	add	r0, r6, #14
   13360:	bl	13b28 <main@@Base+0x488>
   13364:	cmp	r0, #0
   13368:	beq	13380 <access_monster_buffer@@Base+0x87c>
   1336c:	add	r4, r4, r0
   13370:	mov	r0, r4
   13374:	bl	13b14 <main@@Base+0x474>
   13378:	add	r0, r4, r0
   1337c:	add	r5, r0, #4
   13380:	mov	r0, r5
   13384:	pop	{r4, r5, r6, sl, fp, pc}
   13388:	movw	r0, #30954	; 0x78ea
   1338c:	movt	r0, #1
   13390:	movw	r1, #30992	; 0x7910
   13394:	movt	r1, #1
   13398:	movw	r3, #31521	; 0x7b21
   1339c:	movt	r3, #1
   133a0:	mov	r2, #135	; 0x87
   133a4:	bl	12418 <__assert_fail@plt>
   133a8:	b	13b6c <main@@Base+0x4cc>
   133ac:	push	{r4, sl, fp, lr}
   133b0:	add	fp, sp, #8
   133b4:	mov	r4, r0
   133b8:	bl	13b6c <main@@Base+0x4cc>
   133bc:	cmp	r0, #2
   133c0:	bls	133d0 <access_monster_buffer@@Base+0x8cc>
   133c4:	add	r0, r4, #2
   133c8:	pop	{r4, sl, fp, lr}
   133cc:	b	13b80 <main@@Base+0x4e0>
   133d0:	movw	r0, #31608	; 0x7b78
   133d4:	movt	r0, #1
   133d8:	movw	r1, #31663	; 0x7baf
   133dc:	movt	r1, #1
   133e0:	movw	r3, #31765	; 0x7c15
   133e4:	movt	r3, #1
   133e8:	movw	r2, #395	; 0x18b
   133ec:	bl	12418 <__assert_fail@plt>
   133f0:	push	{r4, r5, r6, sl, fp, lr}
   133f4:	add	fp, sp, #16
   133f8:	cmp	r0, #0
   133fc:	beq	1344c <access_monster_buffer@@Base+0x948>
   13400:	mov	r4, r0
   13404:	bl	13b20 <main@@Base+0x480>
   13408:	sub	r6, r4, r0
   1340c:	mov	r0, r6
   13410:	bl	13b28 <main@@Base+0x488>
   13414:	mov	r5, #0
   13418:	cmp	r0, #20
   1341c:	bcc	13444 <access_monster_buffer@@Base+0x940>
   13420:	add	r0, r6, #18
   13424:	bl	13b28 <main@@Base+0x488>
   13428:	cmp	r0, #0
   1342c:	beq	13444 <access_monster_buffer@@Base+0x940>
   13430:	add	r4, r4, r0
   13434:	mov	r0, r4
   13438:	bl	13b14 <main@@Base+0x474>
   1343c:	add	r0, r4, r0
   13440:	add	r5, r0, #4
   13444:	mov	r0, r5
   13448:	pop	{r4, r5, r6, sl, fp, pc}
   1344c:	movw	r0, #30954	; 0x78ea
   13450:	movt	r0, #1
   13454:	movw	r1, #30992	; 0x7910
   13458:	movt	r1, #1
   1345c:	movw	r3, #31831	; 0x7c57
   13460:	movt	r3, #1
   13464:	mov	r2, #137	; 0x89
   13468:	bl	12418 <__assert_fail@plt>
   1346c:	cmp	r0, #0
   13470:	moveq	r0, #0
   13474:	bxeq	lr
   13478:	sub	r0, r0, #4
   1347c:	b	13b14 <main@@Base+0x474>
   13480:	push	{r4, r5, r6, sl, fp, lr}
   13484:	add	fp, sp, #16
   13488:	cmp	r0, #0
   1348c:	beq	134dc <access_monster_buffer@@Base+0x9d8>
   13490:	mov	r4, r0
   13494:	bl	13b20 <main@@Base+0x480>
   13498:	sub	r6, r4, r0
   1349c:	mov	r0, r6
   134a0:	bl	13b28 <main@@Base+0x488>
   134a4:	mov	r5, #0
   134a8:	cmp	r0, #6
   134ac:	bcc	134d4 <access_monster_buffer@@Base+0x9d0>
   134b0:	add	r0, r6, #4
   134b4:	bl	13b28 <main@@Base+0x488>
   134b8:	cmp	r0, #0
   134bc:	beq	134d4 <access_monster_buffer@@Base+0x9d0>
   134c0:	add	r4, r4, r0
   134c4:	mov	r0, r4
   134c8:	bl	13b14 <main@@Base+0x474>
   134cc:	add	r0, r4, r0
   134d0:	add	r5, r0, #4
   134d4:	mov	r0, r5
   134d8:	pop	{r4, r5, r6, sl, fp, pc}
   134dc:	movw	r0, #30954	; 0x78ea
   134e0:	movt	r0, #1
   134e4:	movw	r1, #30992	; 0x7910
   134e8:	movt	r1, #1
   134ec:	movw	r3, #31919	; 0x7caf
   134f0:	movt	r3, #1
   134f4:	mov	r2, #148	; 0x94
   134f8:	bl	12418 <__assert_fail@plt>
   134fc:	push	{r4, sl, fp, lr}
   13500:	add	fp, sp, #8
   13504:	mov	r4, r0
   13508:	bl	13b6c <main@@Base+0x4cc>
   1350c:	cmp	r0, #1
   13510:	bls	13528 <access_monster_buffer@@Base+0xa24>
   13514:	add	r4, r4, #4
   13518:	mov	r0, r4
   1351c:	bl	13b14 <main@@Base+0x474>
   13520:	add	r0, r4, r0
   13524:	pop	{r4, sl, fp, pc}
   13528:	movw	r0, #31608	; 0x7b78
   1352c:	movt	r0, #1
   13530:	movw	r1, #30992	; 0x7910
   13534:	movt	r1, #1
   13538:	movw	r3, #31996	; 0x7cfc
   1353c:	movt	r3, #1
   13540:	mov	r2, #145	; 0x91
   13544:	bl	12418 <__assert_fail@plt>
   13548:	push	{r4, r5, fp, lr}
   1354c:	add	fp, sp, #8
   13550:	cmp	r0, #0
   13554:	beq	13598 <access_monster_buffer@@Base+0xa94>
   13558:	mov	r4, r0
   1355c:	bl	13b20 <main@@Base+0x480>
   13560:	sub	r5, r4, r0
   13564:	mov	r0, r5
   13568:	bl	13b28 <main@@Base+0x488>
   1356c:	cmp	r0, #8
   13570:	bcc	13590 <access_monster_buffer@@Base+0xa8c>
   13574:	add	r0, r5, #6
   13578:	bl	13b28 <main@@Base+0x488>
   1357c:	cmp	r0, #0
   13580:	beq	13590 <access_monster_buffer@@Base+0xa8c>
   13584:	add	r0, r4, r0
   13588:	pop	{r4, r5, fp, lr}
   1358c:	b	13b30 <main@@Base+0x490>
   13590:	mov	r0, #0
   13594:	pop	{r4, r5, fp, pc}
   13598:	movw	r0, #30954	; 0x78ea
   1359c:	movt	r0, #1
   135a0:	movw	r1, #30992	; 0x7910
   135a4:	movt	r1, #1
   135a8:	movw	r3, #32089	; 0x7d59
   135ac:	movt	r3, #1
   135b0:	mov	r2, #149	; 0x95
   135b4:	bl	12418 <__assert_fail@plt>
   135b8:	push	{r4, r5, fp, lr}
   135bc:	add	fp, sp, #8
   135c0:	cmp	r0, #0
   135c4:	beq	13608 <access_monster_buffer@@Base+0xb04>
   135c8:	mov	r4, r0
   135cc:	bl	13b20 <main@@Base+0x480>
   135d0:	sub	r5, r4, r0
   135d4:	mov	r0, r5
   135d8:	bl	13b28 <main@@Base+0x488>
   135dc:	cmp	r0, #22
   135e0:	bcc	13600 <access_monster_buffer@@Base+0xafc>
   135e4:	add	r0, r5, #20
   135e8:	bl	13b28 <main@@Base+0x488>
   135ec:	cmp	r0, #0
   135f0:	beq	13600 <access_monster_buffer@@Base+0xafc>
   135f4:	add	r0, r4, r0
   135f8:	pop	{r4, r5, fp, lr}
   135fc:	b	13b8c <main@@Base+0x4ec>
   13600:	mov	r0, #0
   13604:	pop	{r4, r5, fp, pc}
   13608:	movw	r0, #30954	; 0x78ea
   1360c:	movt	r0, #1
   13610:	movw	r1, #30992	; 0x7910
   13614:	movt	r1, #1
   13618:	movw	r3, #32155	; 0x7d9b
   1361c:	movt	r3, #1
   13620:	mov	r2, #138	; 0x8a
   13624:	bl	12418 <__assert_fail@plt>
   13628:	push	{r4, r5, r6, sl, fp, lr}
   1362c:	add	fp, sp, #16
   13630:	cmp	r0, #0
   13634:	beq	13680 <access_monster_buffer@@Base+0xb7c>
   13638:	mov	r4, r0
   1363c:	bl	13b20 <main@@Base+0x480>
   13640:	sub	r6, r4, r0
   13644:	mov	r0, r6
   13648:	bl	13b28 <main@@Base+0x488>
   1364c:	mov	r5, #0
   13650:	cmp	r0, #24
   13654:	bcc	13678 <access_monster_buffer@@Base+0xb74>
   13658:	add	r0, r6, #22
   1365c:	bl	13b28 <main@@Base+0x488>
   13660:	cmp	r0, #0
   13664:	beq	13678 <access_monster_buffer@@Base+0xb74>
   13668:	add	r4, r4, r0
   1366c:	mov	r0, r4
   13670:	bl	13b14 <main@@Base+0x474>
   13674:	add	r5, r4, r0
   13678:	mov	r0, r5
   1367c:	pop	{r4, r5, r6, sl, fp, pc}
   13680:	movw	r0, #30954	; 0x78ea
   13684:	movt	r0, #1
   13688:	movw	r1, #30992	; 0x7910
   1368c:	movt	r1, #1
   13690:	movw	r3, #32259	; 0x7e03
   13694:	movt	r3, #1
   13698:	mov	r2, #138	; 0x8a
   1369c:	bl	12418 <__assert_fail@plt>

000136a0 <main@@Base>:
   136a0:	push	{r4, r5, r6, sl, fp, lr}
   136a4:	add	fp, sp, #16
   136a8:	sub	sp, sp, #240	; 0xf0
   136ac:	add	r4, sp, #8
   136b0:	mov	r0, r4
   136b4:	bl	13d50 <flatcc_builder_init@@Base>
   136b8:	mov	r0, r4
   136bc:	mov	r1, #0
   136c0:	bl	12514 <create_monster_bottom_up@@Base>
   136c4:	add	r5, sp, #4
   136c8:	mov	r0, r4
   136cc:	mov	r1, r5
   136d0:	bl	16d04 <flatcc_builder_finalize_aligned_buffer@@Base>
   136d4:	bl	16de4 <flatcc_builder_aligned_free@@Base>
   136d8:	mov	r0, r4
   136dc:	bl	13ebc <flatcc_builder_reset@@Base>
   136e0:	mov	r0, r4
   136e4:	mov	r1, #1
   136e8:	bl	12514 <create_monster_bottom_up@@Base>
   136ec:	mov	r0, r4
   136f0:	mov	r1, r5
   136f4:	bl	16d04 <flatcc_builder_finalize_aligned_buffer@@Base>
   136f8:	mov	r6, r0
   136fc:	bl	12b04 <access_monster_buffer@@Base>
   13700:	mov	r0, r6
   13704:	bl	16de4 <flatcc_builder_aligned_free@@Base>
   13708:	mov	r0, r4
   1370c:	bl	13ebc <flatcc_builder_reset@@Base>
   13710:	mov	r0, r4
   13714:	bl	1297c <create_monster_top_down@@Base>
   13718:	mov	r0, r4
   1371c:	mov	r1, r5
   13720:	bl	16c74 <flatcc_builder_finalize_buffer@@Base>
   13724:	mov	r5, r0
   13728:	bl	12b04 <access_monster_buffer@@Base>
   1372c:	mov	r0, r5
   13730:	bl	1237c <free@plt>
   13734:	mov	r0, r4
   13738:	bl	13ec8 <flatcc_builder_clear@@Base>
   1373c:	movw	r0, #32400	; 0x7e90
   13740:	movt	r0, #1
   13744:	bl	123ac <puts@plt>
   13748:	mov	r0, #0
   1374c:	sub	sp, fp, #16
   13750:	pop	{r4, r5, r6, sl, fp, pc}
   13754:	mov	r1, #2
   13758:	b	15348 <flatcc_builder_start_table@@Base>
   1375c:	push	{r4, r5, fp, lr}
   13760:	add	fp, sp, #8
   13764:	mvn	r4, #0
   13768:	cmp	r1, #0
   1376c:	beq	13788 <main@@Base+0xe8>
   13770:	mov	r5, r1
   13774:	mov	r1, #0
   13778:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   1377c:	cmp	r0, #0
   13780:	strne	r5, [r0]
   13784:	movne	r4, #0
   13788:	mov	r0, r4
   1378c:	pop	{r4, r5, fp, pc}
   13790:	push	{r4, r5, fp, lr}
   13794:	add	fp, sp, #8
   13798:	mov	r4, #0
   1379c:	cmp	r1, #0
   137a0:	beq	137d0 <main@@Base+0x130>
   137a4:	mov	r5, r1
   137a8:	mov	r1, #1
   137ac:	mov	r2, #2
   137b0:	mov	r3, #2
   137b4:	bl	1615c <flatcc_builder_table_add@@Base>
   137b8:	cmp	r0, #0
   137bc:	mvneq	r4, #0
   137c0:	moveq	r0, r4
   137c4:	popeq	{r4, r5, fp, pc}
   137c8:	mov	r1, r5
   137cc:	bl	13828 <main@@Base+0x188>
   137d0:	mov	r0, r4
   137d4:	pop	{r4, r5, fp, pc}
   137d8:	push	{r4, sl, fp, lr}
   137dc:	add	fp, sp, #8
   137e0:	mov	r4, r0
   137e4:	movw	r1, #32386	; 0x7e82
   137e8:	movt	r1, #1
   137ec:	mov	r2, #0
   137f0:	bl	159d8 <flatcc_builder_check_required@@Base>
   137f4:	cmp	r0, #0
   137f8:	beq	13808 <main@@Base+0x168>
   137fc:	mov	r0, r4
   13800:	pop	{r4, sl, fp, lr}
   13804:	b	15a68 <flatcc_builder_end_table@@Base>
   13808:	movw	r0, #30391	; 0x76b7
   1380c:	movt	r0, #1
   13810:	movw	r1, #30547	; 0x7753
   13814:	movt	r1, #1
   13818:	movw	r3, #30639	; 0x77af
   1381c:	movt	r3, #1
   13820:	mov	r2, #52	; 0x34
   13824:	bl	12418 <__assert_fail@plt>
   13828:	push	{r4, r5, fp, lr}
   1382c:	add	fp, sp, #8
   13830:	mov	r4, r1
   13834:	mov	r5, r0
   13838:	mov	r0, r1
   1383c:	bl	13848 <main@@Base+0x1a8>
   13840:	strh	r4, [r5]
   13844:	pop	{r4, r5, fp, pc}
   13848:	bx	lr
   1384c:	mov	r1, #0
   13850:	mov	r2, #0
   13854:	mov	r3, #0
   13858:	b	14660 <flatcc_builder_start_buffer@@Base>
   1385c:	b	14814 <flatcc_builder_end_buffer@@Base>
   13860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13864:	add	fp, sp, #28
   13868:	sub	sp, sp, #4
   1386c:	mov	r7, r3
   13870:	mov	r6, r2
   13874:	mov	r5, r1
   13878:	mov	r4, r0
   1387c:	bl	1394c <main@@Base+0x2ac>
   13880:	cmp	r0, #0
   13884:	bne	13930 <main@@Base+0x290>
   13888:	ldr	r9, [fp, #16]
   1388c:	ldr	r8, [fp, #12]
   13890:	ldr	sl, [fp, #8]
   13894:	mov	r0, r4
   13898:	mov	r1, r5
   1389c:	bl	13954 <main@@Base+0x2b4>
   138a0:	cmp	r0, #0
   138a4:	bne	13930 <main@@Base+0x290>
   138a8:	mov	r0, r4
   138ac:	mov	r1, r6
   138b0:	bl	1282c <create_monster_bottom_up@@Base+0x318>
   138b4:	cmp	r0, #0
   138b8:	bne	13930 <main@@Base+0x290>
   138bc:	mov	r0, r4
   138c0:	mov	r1, r7
   138c4:	bl	12860 <create_monster_bottom_up@@Base+0x34c>
   138c8:	cmp	r0, #0
   138cc:	bne	13930 <main@@Base+0x290>
   138d0:	mov	r0, r4
   138d4:	mov	r1, sl
   138d8:	bl	128c4 <create_monster_bottom_up@@Base+0x3b0>
   138dc:	cmp	r0, #0
   138e0:	bne	13930 <main@@Base+0x290>
   138e4:	mov	r0, r4
   138e8:	mov	r1, r8
   138ec:	mov	r2, r9
   138f0:	bl	13980 <main@@Base+0x2e0>
   138f4:	cmp	r0, #0
   138f8:	bne	13930 <main@@Base+0x290>
   138fc:	mov	r0, r4
   13900:	bl	127f8 <create_monster_bottom_up@@Base+0x2e4>
   13904:	cmp	r0, #0
   13908:	bne	13930 <main@@Base+0x290>
   1390c:	mov	r0, r4
   13910:	bl	12894 <create_monster_bottom_up@@Base+0x380>
   13914:	cmp	r0, #0
   13918:	bne	13930 <main@@Base+0x290>
   1391c:	uxtb	r1, r8
   13920:	mov	r0, r4
   13924:	bl	139bc <main@@Base+0x31c>
   13928:	cmp	r0, #0
   1392c:	beq	1393c <main@@Base+0x29c>
   13930:	mov	r0, #0
   13934:	sub	sp, fp, #28
   13938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1393c:	mov	r0, r4
   13940:	sub	sp, fp, #28
   13944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13948:	b	13a00 <main@@Base+0x360>
   1394c:	mov	r1, #10
   13950:	b	15348 <flatcc_builder_start_table@@Base>
   13954:	push	{r4, sl, fp, lr}
   13958:	add	fp, sp, #8
   1395c:	mov	r4, r1
   13960:	bl	13a50 <main@@Base+0x3b0>
   13964:	cmp	r0, #0
   13968:	mvneq	r0, #0
   1396c:	popeq	{r4, sl, fp, pc}
   13970:	mov	r1, r4
   13974:	bl	13a60 <main@@Base+0x3c0>
   13978:	mov	r0, #0
   1397c:	pop	{r4, sl, fp, pc}
   13980:	push	{r4, r5, fp, lr}
   13984:	add	fp, sp, #8
   13988:	mov	r4, #0
   1398c:	tst	r1, #255	; 0xff
   13990:	beq	139b4 <main@@Base+0x314>
   13994:	mov	r5, r2
   13998:	mov	r1, #9
   1399c:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   139a0:	cmp	r0, #0
   139a4:	mvneq	r4, #0
   139a8:	moveq	r0, r4
   139ac:	popeq	{r4, r5, fp, pc}
   139b0:	str	r5, [r0]
   139b4:	mov	r0, r4
   139b8:	pop	{r4, r5, fp, pc}
   139bc:	push	{r4, r5, fp, lr}
   139c0:	add	fp, sp, #8
   139c4:	mov	r4, #0
   139c8:	cmp	r1, #0
   139cc:	beq	139f8 <main@@Base+0x358>
   139d0:	mov	r5, r1
   139d4:	mov	r1, #8
   139d8:	mov	r2, #1
   139dc:	mov	r3, #1
   139e0:	bl	1615c <flatcc_builder_table_add@@Base>
   139e4:	cmp	r0, #0
   139e8:	mvneq	r4, #0
   139ec:	moveq	r0, r4
   139f0:	popeq	{r4, r5, fp, pc}
   139f4:	strb	r5, [r0]
   139f8:	mov	r0, r4
   139fc:	pop	{r4, r5, fp, pc}
   13a00:	push	{r4, sl, fp, lr}
   13a04:	add	fp, sp, #8
   13a08:	mov	r4, r0
   13a0c:	movw	r1, #32388	; 0x7e84
   13a10:	movt	r1, #1
   13a14:	mov	r2, #0
   13a18:	bl	159d8 <flatcc_builder_check_required@@Base>
   13a1c:	cmp	r0, #0
   13a20:	beq	13a30 <main@@Base+0x390>
   13a24:	mov	r0, r4
   13a28:	pop	{r4, sl, fp, lr}
   13a2c:	b	15a68 <flatcc_builder_end_table@@Base>
   13a30:	movw	r0, #30716	; 0x77fc
   13a34:	movt	r0, #1
   13a38:	movw	r1, #30547	; 0x7753
   13a3c:	movt	r1, #1
   13a40:	movw	r3, #30875	; 0x789b
   13a44:	movt	r3, #1
   13a48:	mov	r2, #50	; 0x32
   13a4c:	bl	12418 <__assert_fail@plt>
   13a50:	mov	r1, #0
   13a54:	mov	r2, #12
   13a58:	mov	r3, #4
   13a5c:	b	1615c <flatcc_builder_table_add@@Base>
   13a60:	push	{r4, r5, fp, lr}
   13a64:	add	fp, sp, #8
   13a68:	mov	r4, r1
   13a6c:	mov	r5, r0
   13a70:	bl	13a90 <main@@Base+0x3f0>
   13a74:	add	r0, r5, #4
   13a78:	add	r1, r4, #4
   13a7c:	bl	13a90 <main@@Base+0x3f0>
   13a80:	add	r0, r5, #8
   13a84:	add	r1, r4, #8
   13a88:	pop	{r4, r5, fp, lr}
   13a8c:	b	13a90 <main@@Base+0x3f0>
   13a90:	push	{r4, sl, fp, lr}
   13a94:	add	fp, sp, #8
   13a98:	mov	r4, r0
   13a9c:	vldr	s0, [r1]
   13aa0:	bl	13aac <main@@Base+0x40c>
   13aa4:	vstr	s0, [r4]
   13aa8:	pop	{r4, sl, fp, pc}
   13aac:	bx	lr
   13ab0:	push	{r4, sl, fp, lr}
   13ab4:	add	fp, sp, #8
   13ab8:	mov	r4, r0
   13abc:	vmov.f32	s0, #112	; 0x3f800000  1.0
   13ac0:	bl	13ae0 <main@@Base+0x440>
   13ac4:	vmov.f32	s0, #0	; 0x40000000  2.0
   13ac8:	add	r0, r4, #4
   13acc:	bl	13ae0 <main@@Base+0x440>
   13ad0:	vmov.f32	s0, #8	; 0x40400000  3.0
   13ad4:	add	r0, r4, #8
   13ad8:	pop	{r4, sl, fp, lr}
   13adc:	b	13ae0 <main@@Base+0x440>
   13ae0:	push	{r4, sl, fp, lr}
   13ae4:	add	fp, sp, #8
   13ae8:	mov	r4, r0
   13aec:	bl	13aac <main@@Base+0x40c>
   13af0:	vstr	s0, [r4]
   13af4:	pop	{r4, sl, fp, pc}
   13af8:	mov	r1, #0
   13afc:	strb	r1, [r0]
   13b00:	bx	lr
   13b04:	cmp	r1, #0
   13b08:	moveq	r0, #0
   13b0c:	bxeq	lr
   13b10:	b	14c88 <flatcc_builder_offset_vector_push@@Base>
   13b14:	ldr	r0, [r0]
   13b18:	b	13b1c <main@@Base+0x47c>
   13b1c:	bx	lr
   13b20:	ldr	r0, [r0]
   13b24:	b	13b38 <main@@Base+0x498>
   13b28:	ldrh	r0, [r0]
   13b2c:	b	13b3c <main@@Base+0x49c>
   13b30:	ldrsh	r0, [r0]
   13b34:	b	13b40 <main@@Base+0x4a0>
   13b38:	bx	lr
   13b3c:	bx	lr
   13b40:	bx	lr
   13b44:	vldr	s0, [r0]
   13b48:	b	13b4c <main@@Base+0x4ac>
   13b4c:	bx	lr
   13b50:	push	{r4, sl, fp, lr}
   13b54:	add	fp, sp, #8
   13b58:	mov	r4, r0
   13b5c:	vldr	s0, [r1]
   13b60:	bl	13b4c <main@@Base+0x4ac>
   13b64:	vstr	s0, [r4]
   13b68:	pop	{r4, sl, fp, pc}
   13b6c:	cmp	r0, #0
   13b70:	moveq	r0, #0
   13b74:	bxeq	lr
   13b78:	sub	r0, r0, #4
   13b7c:	b	13b14 <main@@Base+0x474>
   13b80:	ldrb	r0, [r0]
   13b84:	b	13b88 <main@@Base+0x4e8>
   13b88:	bx	lr
   13b8c:	ldrb	r0, [r0]
   13b90:	b	13b94 <main@@Base+0x4f4>
   13b94:	bx	lr

00013b98 <flatcc_builder_default_alloc@@Base>:
   13b98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b9c:	add	fp, sp, #24
   13ba0:	mov	r4, r1
   13ba4:	cmp	r2, #0
   13ba8:	beq	13bf0 <flatcc_builder_default_alloc@@Base+0x58>
   13bac:	mov	r8, r3
   13bb0:	ldr	r0, [fp, #8]
   13bb4:	sub	r1, r0, #1
   13bb8:	cmp	r1, #6
   13bbc:	bhi	13c1c <flatcc_builder_default_alloc@@Base+0x84>
   13bc0:	mov	r0, #256	; 0x100
   13bc4:	add	r3, pc, #0
   13bc8:	ldr	pc, [r3, r1, lsl #2]
   13bcc:	andeq	r3, r1, r0, lsr ip
   13bd0:	andeq	r3, r1, ip, lsl ip
   13bd4:	andeq	r3, r1, ip, lsl ip
   13bd8:	andeq	r3, r1, r8, ror #23
   13bdc:	andeq	r3, r1, r4, lsr #24
   13be0:	andeq	r3, r1, ip, lsl ip
   13be4:	andeq	r3, r1, ip, lsr #24
   13be8:	mov	r0, #288	; 0x120
   13bec:	b	13c30 <flatcc_builder_default_alloc@@Base+0x98>
   13bf0:	ldr	r0, [r4]
   13bf4:	cmp	r0, #0
   13bf8:	moveq	r6, #0
   13bfc:	moveq	r0, r6
   13c00:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c04:	bl	1237c <free@plt>
   13c08:	mov	r6, #0
   13c0c:	str	r6, [r4]
   13c10:	str	r6, [r4, #4]
   13c14:	mov	r0, r6
   13c18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c1c:	mov	r0, #32
   13c20:	b	13c30 <flatcc_builder_default_alloc@@Base+0x98>
   13c24:	mov	r0, r2
   13c28:	b	13c30 <flatcc_builder_default_alloc@@Base+0x98>
   13c2c:	mov	r0, #64	; 0x40
   13c30:	mov	r7, r0
   13c34:	lsl	r0, r0, #1
   13c38:	cmp	r7, r2
   13c3c:	bcc	13c30 <flatcc_builder_default_alloc@@Base+0x98>
   13c40:	ldr	r0, [r4, #4]
   13c44:	mov	r6, #0
   13c48:	cmp	r0, r2
   13c4c:	lsrcs	r0, r0, #1
   13c50:	cmpcs	r0, r7
   13c54:	bcs	13c8c <flatcc_builder_default_alloc@@Base+0xf4>
   13c58:	ldr	r0, [r4]
   13c5c:	mov	r1, r7
   13c60:	bl	123a0 <realloc@plt>
   13c64:	cmp	r0, #0
   13c68:	mvneq	r6, #0
   13c6c:	moveq	r0, r6
   13c70:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c74:	mov	r5, r0
   13c78:	cmp	r8, #0
   13c7c:	ldrne	r1, [r4, #4]
   13c80:	cmpne	r7, r1
   13c84:	bhi	13c94 <flatcc_builder_default_alloc@@Base+0xfc>
   13c88:	stm	r4, {r5, r7}
   13c8c:	mov	r0, r6
   13c90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c94:	add	r0, r5, r1
   13c98:	sub	r2, r7, r1
   13c9c:	mov	r1, #0
   13ca0:	bl	123f4 <memset@plt>
   13ca4:	b	13c88 <flatcc_builder_default_alloc@@Base+0xf0>

00013ca8 <flatcc_builder_flush_vtable_cache@@Base>:
   13ca8:	push	{r4, r5, fp, lr}
   13cac:	add	fp, sp, #8
   13cb0:	mov	r4, r0
   13cb4:	ldr	r0, [r0, #116]	; 0x74
   13cb8:	cmp	r0, #0
   13cbc:	popeq	{r4, r5, fp, pc}
   13cc0:	ldr	r0, [r4, #92]	; 0x5c
   13cc4:	ldr	r2, [r4, #96]	; 0x60
   13cc8:	mov	r5, #0
   13ccc:	mov	r1, #0
   13cd0:	bl	123f4 <memset@plt>
   13cd4:	mov	r0, #16
   13cd8:	str	r5, [r4, #120]	; 0x78
   13cdc:	str	r0, [r4, #124]	; 0x7c
   13ce0:	pop	{r4, r5, fp, pc}

00013ce4 <flatcc_builder_custom_init@@Base>:
   13ce4:	push	{r4, r5, r6, r7, fp, lr}
   13ce8:	add	fp, sp, #16
   13cec:	mov	r5, r3
   13cf0:	mov	r6, r2
   13cf4:	mov	r7, r1
   13cf8:	mov	r4, r0
   13cfc:	mov	r1, #0
   13d00:	mov	r2, #232	; 0xe8
   13d04:	bl	123f4 <memset@plt>
   13d08:	ldr	r0, [fp, #8]
   13d0c:	cmp	r7, #0
   13d10:	bne	13d28 <flatcc_builder_custom_init@@Base+0x44>
   13d14:	mov	r1, #1
   13d18:	str	r1, [r4, #184]	; 0xb8
   13d1c:	add	r6, r4, #188	; 0xbc
   13d20:	movw	r7, #28860	; 0x70bc
   13d24:	movt	r7, #1
   13d28:	movw	r1, #15256	; 0x3b98
   13d2c:	movt	r1, #1
   13d30:	cmp	r5, #0
   13d34:	movne	r1, r5
   13d38:	str	r6, [r4, #36]	; 0x24
   13d3c:	str	r0, [r4, #40]	; 0x28
   13d40:	str	r7, [r4, #44]	; 0x2c
   13d44:	str	r1, [r4, #48]	; 0x30
   13d48:	mov	r0, #0
   13d4c:	pop	{r4, r5, r6, r7, fp, pc}

00013d50 <flatcc_builder_init@@Base>:
   13d50:	push	{fp, lr}
   13d54:	mov	fp, sp
   13d58:	sub	sp, sp, #8
   13d5c:	mov	r1, #0
   13d60:	str	r1, [sp]
   13d64:	mov	r1, #0
   13d68:	mov	r2, #0
   13d6c:	mov	r3, #0
   13d70:	bl	13ce4 <flatcc_builder_custom_init@@Base>
   13d74:	mov	r0, #0
   13d78:	mov	sp, fp
   13d7c:	pop	{fp, pc}

00013d80 <flatcc_builder_custom_reset@@Base>:
   13d80:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13d84:	add	fp, sp, #24
   13d88:	sub	sp, sp, #8
   13d8c:	mov	r9, r2
   13d90:	mov	r8, r1
   13d94:	mov	r4, r0
   13d98:	add	r7, r0, #52	; 0x34
   13d9c:	mov	r5, #0
   13da0:	ldr	r0, [r7]
   13da4:	cmp	r0, #0
   13da8:	beq	13dec <flatcc_builder_custom_reset@@Base+0x6c>
   13dac:	cmp	r9, #0
   13db0:	cmpne	r5, #5
   13db4:	beq	13ddc <flatcc_builder_custom_reset@@Base+0x5c>
   13db8:	ldr	r0, [r4, #40]	; 0x28
   13dbc:	ldr	r6, [r4, #48]	; 0x30
   13dc0:	str	r5, [sp]
   13dc4:	mov	r1, r7
   13dc8:	mov	r2, #1
   13dcc:	mov	r3, #1
   13dd0:	blx	r6
   13dd4:	cmp	r0, #0
   13dd8:	bne	13e8c <flatcc_builder_custom_reset@@Base+0x10c>
   13ddc:	ldm	r7, {r0, r2}
   13de0:	mov	r1, #0
   13de4:	bl	123f4 <memset@plt>
   13de8:	b	13df8 <flatcc_builder_custom_reset@@Base+0x78>
   13dec:	ldr	r0, [r7, #4]
   13df0:	cmp	r0, #0
   13df4:	bne	13e9c <flatcc_builder_custom_reset@@Base+0x11c>
   13df8:	add	r7, r7, #8
   13dfc:	add	r5, r5, #1
   13e00:	cmp	r5, #8
   13e04:	bcc	13da0 <flatcc_builder_custom_reset@@Base+0x20>
   13e08:	mov	r0, #0
   13e0c:	str	r0, [r4, #120]	; 0x78
   13e10:	ldr	r1, [r4, #124]	; 0x7c
   13e14:	cmp	r1, #0
   13e18:	movne	r1, #16
   13e1c:	strne	r1, [r4, #124]	; 0x7c
   13e20:	vmov.i32	q8, #0	; 0x00000000
   13e24:	strh	r0, [r4, #128]	; 0x80
   13e28:	str	r0, [r4, #136]	; 0x88
   13e2c:	str	r0, [r4, #140]	; 0x8c
   13e30:	str	r0, [r4, #32]
   13e34:	add	r1, r4, #148	; 0x94
   13e38:	vst1.32	{d16-d17}, [r1]
   13e3c:	ldr	r1, [r4, #52]	; 0x34
   13e40:	ldr	r2, [r4, #60]	; 0x3c
   13e44:	ldr	r3, [r4, #76]	; 0x4c
   13e48:	str	r2, [r4, #16]
   13e4c:	str	r0, [r4, #20]
   13e50:	str	r0, [r4, #24]
   13e54:	str	r3, [r4]
   13e58:	str	r1, [r4, #4]
   13e5c:	cmp	r8, #0
   13e60:	movne	r0, #0
   13e64:	strne	r0, [r4, #172]	; 0xac
   13e68:	strne	r0, [r4, #176]	; 0xb0
   13e6c:	strne	r0, [r4, #180]	; 0xb4
   13e70:	ldr	r0, [r4, #184]	; 0xb8
   13e74:	mov	r5, #0
   13e78:	cmp	r0, #0
   13e7c:	beq	13e90 <flatcc_builder_custom_reset@@Base+0x110>
   13e80:	add	r0, r4, #188	; 0xbc
   13e84:	bl	16f9c <flatcc_emitter_reset@@Base>
   13e88:	b	13e90 <flatcc_builder_custom_reset@@Base+0x110>
   13e8c:	mvn	r5, #0
   13e90:	mov	r0, r5
   13e94:	sub	sp, fp, #24
   13e98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e9c:	movw	r0, #32976	; 0x80d0
   13ea0:	movt	r0, #1
   13ea4:	movw	r1, #32994	; 0x80e2
   13ea8:	movt	r1, #1
   13eac:	movw	r3, #33064	; 0x8128
   13eb0:	movt	r3, #1
   13eb4:	movw	r2, #434	; 0x1b2
   13eb8:	bl	12418 <__assert_fail@plt>

00013ebc <flatcc_builder_reset@@Base>:
   13ebc:	mov	r1, #0
   13ec0:	mov	r2, #0
   13ec4:	b	13d80 <flatcc_builder_custom_reset@@Base>

00013ec8 <flatcc_builder_clear@@Base>:
   13ec8:	push	{r4, r5, r6, r7, fp, lr}
   13ecc:	add	fp, sp, #16
   13ed0:	sub	sp, sp, #8
   13ed4:	mov	r7, r0
   13ed8:	add	r5, r0, #52	; 0x34
   13edc:	mov	r6, #0
   13ee0:	ldr	r0, [r7, #40]	; 0x28
   13ee4:	ldr	r4, [r7, #48]	; 0x30
   13ee8:	str	r6, [sp]
   13eec:	mov	r1, r5
   13ef0:	mov	r2, #0
   13ef4:	mov	r3, #0
   13ef8:	blx	r4
   13efc:	add	r5, r5, #8
   13f00:	add	r6, r6, #1
   13f04:	cmp	r6, #8
   13f08:	bne	13ee0 <flatcc_builder_clear@@Base+0x18>
   13f0c:	ldr	r0, [r7, #184]	; 0xb8
   13f10:	cmp	r0, #0
   13f14:	beq	13f20 <flatcc_builder_clear@@Base+0x58>
   13f18:	add	r0, r7, #188	; 0xbc
   13f1c:	bl	17058 <flatcc_emitter_clear@@Base>
   13f20:	mov	r0, r7
   13f24:	mov	r1, #0
   13f28:	mov	r2, #232	; 0xe8
   13f2c:	sub	sp, fp, #16
   13f30:	pop	{r4, r5, r6, r7, fp, lr}
   13f34:	b	123f4 <memset@plt>

00013f38 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13f38:	push	{r4, r5, r6, r7, fp, lr}
   13f3c:	add	fp, sp, #16
   13f40:	sub	sp, sp, #8
   13f44:	mov	r4, r0
   13f48:	ldr	r2, [r0, #228]	; 0xe4
   13f4c:	mov	r7, #0
   13f50:	str	r7, [sp]
   13f54:	add	r0, r1, #7
   13f58:	bic	r5, r0, #3
   13f5c:	mov	r0, r4
   13f60:	mov	r1, #7
   13f64:	mov	r3, r5
   13f68:	bl	13fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13f6c:	cmp	r0, #0
   13f70:	beq	13fa4 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   13f74:	mov	r6, r0
   13f78:	mov	r1, #0
   13f7c:	mov	r2, r5
   13f80:	bl	123f4 <memset@plt>
   13f84:	ldr	r0, [r4, #224]	; 0xe0
   13f88:	str	r0, [r6], #4
   13f8c:	ldr	r0, [r4, #228]	; 0xe4
   13f90:	add	r1, r0, #4
   13f94:	add	r0, r0, r5
   13f98:	str	r1, [r4, #224]	; 0xe0
   13f9c:	str	r0, [r4, #228]	; 0xe4
   13fa0:	mov	r7, r6
   13fa4:	mov	r0, r7
   13fa8:	sub	sp, fp, #16
   13fac:	pop	{r4, r5, r6, r7, fp, pc}
   13fb0:	push	{r4, r5, fp, lr}
   13fb4:	add	fp, sp, #8
   13fb8:	sub	sp, sp, #8
   13fbc:	mov	r4, r2
   13fc0:	add	r2, r3, r2
   13fc4:	add	r3, r0, r1, lsl #3
   13fc8:	add	r5, r3, #52	; 0x34
   13fcc:	ldr	r3, [r3, #56]	; 0x38
   13fd0:	cmp	r2, r3
   13fd4:	bls	13ffc <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13fd8:	ldr	r3, [fp, #8]
   13fdc:	ldr	ip, [r0, #40]	; 0x28
   13fe0:	ldr	lr, [r0, #48]	; 0x30
   13fe4:	str	r1, [sp]
   13fe8:	mov	r0, ip
   13fec:	mov	r1, r5
   13ff0:	blx	lr
   13ff4:	cmp	r0, #0
   13ff8:	bne	1400c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   13ffc:	ldr	r0, [r5]
   14000:	add	r0, r0, r4
   14004:	sub	sp, fp, #8
   14008:	pop	{r4, r5, fp, pc}
   1400c:	movw	r0, #37512	; 0x9288
   14010:	movt	r0, #1
   14014:	movw	r1, #32994	; 0x80e2
   14018:	movt	r1, #1
   1401c:	movw	r3, #37058	; 0x90c2
   14020:	movt	r3, #1
   14024:	mov	r2, #308	; 0x134
   14028:	bl	12418 <__assert_fail@plt>

0001402c <flatcc_builder_enter_user_frame@@Base>:
   1402c:	push	{r4, r5, r6, r7, fp, lr}
   14030:	add	fp, sp, #16
   14034:	sub	sp, sp, #8
   14038:	mov	r4, r0
   1403c:	ldr	r2, [r0, #228]	; 0xe4
   14040:	mov	r6, #0
   14044:	str	r6, [sp]
   14048:	add	r0, r1, #7
   1404c:	bic	r5, r0, #3
   14050:	mov	r0, r4
   14054:	mov	r1, #7
   14058:	mov	r3, r5
   1405c:	bl	13fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14060:	cmp	r0, #0
   14064:	beq	14094 <flatcc_builder_enter_user_frame@@Base+0x68>
   14068:	mov	r7, r0
   1406c:	mov	r1, #0
   14070:	mov	r2, r5
   14074:	bl	123f4 <memset@plt>
   14078:	ldr	r0, [r4, #224]	; 0xe0
   1407c:	str	r0, [r7]
   14080:	ldr	r0, [r4, #228]	; 0xe4
   14084:	add	r6, r0, #4
   14088:	add	r0, r0, r5
   1408c:	str	r6, [r4, #224]	; 0xe0
   14090:	str	r0, [r4, #228]	; 0xe4
   14094:	mov	r0, r6
   14098:	sub	sp, fp, #16
   1409c:	pop	{r4, r5, r6, r7, fp, pc}

000140a0 <flatcc_builder_exit_user_frame@@Base>:
   140a0:	ldr	r1, [r0, #224]	; 0xe0
   140a4:	cmp	r1, #0
   140a8:	subne	r2, r1, #4
   140ac:	strne	r2, [r0, #228]	; 0xe4
   140b0:	ldrne	r2, [r0, #108]	; 0x6c
   140b4:	addne	r1, r2, r1
   140b8:	ldrne	r1, [r1, #-4]
   140bc:	strne	r1, [r0, #224]	; 0xe0
   140c0:	movne	r0, r1
   140c4:	bxne	lr
   140c8:	push	{fp, lr}
   140cc:	mov	fp, sp
   140d0:	movw	r0, #33126	; 0x8166
   140d4:	movt	r0, #1
   140d8:	movw	r1, #32994	; 0x80e2
   140dc:	movt	r1, #1
   140e0:	movw	r3, #33151	; 0x817f
   140e4:	movt	r3, #1
   140e8:	movw	r2, #542	; 0x21e
   140ec:	bl	12418 <__assert_fail@plt>

000140f0 <flatcc_builder_exit_user_frame_at@@Base>:
   140f0:	ldr	r2, [r0, #224]	; 0xe0
   140f4:	cmp	r2, r1
   140f8:	bcc	14104 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   140fc:	str	r1, [r0, #224]	; 0xe0
   14100:	b	140a0 <flatcc_builder_exit_user_frame@@Base>
   14104:	push	{fp, lr}
   14108:	mov	fp, sp
   1410c:	movw	r0, #33209	; 0x81b9
   14110:	movt	r0, #1
   14114:	movw	r1, #32994	; 0x80e2
   14118:	movt	r1, #1
   1411c:	movw	r3, #33240	; 0x81d8
   14120:	movt	r3, #1
   14124:	movw	r2, #551	; 0x227
   14128:	bl	12418 <__assert_fail@plt>

0001412c <flatcc_builder_get_current_user_frame@@Base>:
   1412c:	ldr	r0, [r0, #224]	; 0xe0
   14130:	bx	lr

00014134 <flatcc_builder_get_user_frame_ptr@@Base>:
   14134:	ldr	r0, [r0, #108]	; 0x6c
   14138:	add	r0, r0, r1
   1413c:	bx	lr

00014140 <flatcc_builder_embed_buffer@@Base>:
   14140:	push	{r4, r5, r6, r7, fp, lr}
   14144:	add	fp, sp, #16
   14148:	sub	sp, sp, #80	; 0x50
   1414c:	mov	r5, r3
   14150:	mov	r6, r2
   14154:	mov	r2, r1
   14158:	mov	r4, r0
   1415c:	ldr	r0, [fp, #8]
   14160:	strh	r0, [fp, #-18]	; 0xffffffee
   14164:	ldr	r3, [r4, #152]	; 0x98
   14168:	cmp	r3, #0
   1416c:	movwne	r3, #1
   14170:	sub	r1, fp, #18
   14174:	mov	r0, r4
   14178:	bl	1424c <flatcc_builder_embed_buffer@@Base+0x10c>
   1417c:	ldr	r0, [fp, #12]
   14180:	and	r0, r0, #2
   14184:	add	r1, r5, r0, lsl #1
   14188:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1418c:	mov	r0, r4
   14190:	bl	14308 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14194:	mov	r7, r0
   14198:	add	r0, r0, r5
   1419c:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   141a0:	mov	r1, #0
   141a4:	str	r1, [sp]
   141a8:	str	r0, [fp, #-24]	; 0xffffffe8
   141ac:	str	r1, [sp, #4]
   141b0:	ldr	r0, [r4, #152]	; 0x98
   141b4:	cmp	r0, #0
   141b8:	beq	141d8 <flatcc_builder_embed_buffer@@Base+0x98>
   141bc:	sub	r0, fp, #24
   141c0:	str	r0, [sp, #8]
   141c4:	mov	r0, #4
   141c8:	str	r0, [sp]
   141cc:	str	r0, [sp, #12]
   141d0:	mov	r0, #1
   141d4:	str	r0, [sp, #4]
   141d8:	cmp	r5, #0
   141dc:	beq	14204 <flatcc_builder_embed_buffer@@Base+0xc4>
   141e0:	ldm	sp, {r0, r1}
   141e4:	add	r0, r0, r5
   141e8:	str	r0, [sp]
   141ec:	mov	r0, sp
   141f0:	add	r0, r0, r1, lsl #3
   141f4:	str	r6, [r0, #8]
   141f8:	str	r5, [r0, #12]
   141fc:	add	r0, r1, #1
   14200:	str	r0, [sp, #4]
   14204:	cmp	r7, #0
   14208:	beq	14238 <flatcc_builder_embed_buffer@@Base+0xf8>
   1420c:	ldm	sp, {r0, r1}
   14210:	add	r0, r0, r7
   14214:	str	r0, [sp]
   14218:	mov	r0, sp
   1421c:	add	r0, r0, r1, lsl #3
   14220:	movw	r2, #32464	; 0x7ed0
   14224:	movt	r2, #1
   14228:	str	r2, [r0, #8]
   1422c:	str	r7, [r0, #12]
   14230:	add	r0, r1, #1
   14234:	str	r0, [sp, #4]
   14238:	mov	r1, sp
   1423c:	mov	r0, r4
   14240:	bl	14320 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14244:	sub	sp, fp, #16
   14248:	pop	{r4, r5, r6, r7, fp, pc}
   1424c:	push	{r4, r5, r6, r7, fp, lr}
   14250:	add	fp, sp, #16
   14254:	sub	sp, sp, #72	; 0x48
   14258:	mov	r6, r3
   1425c:	mov	r5, r2
   14260:	mov	r7, r1
   14264:	mov	r4, r0
   14268:	cmp	r2, #0
   1426c:	bne	1427c <flatcc_builder_embed_buffer@@Base+0x13c>
   14270:	ldrh	r5, [r4, #132]	; 0x84
   14274:	cmp	r5, #0
   14278:	movweq	r5, #1
   1427c:	mov	r0, r7
   14280:	mov	r1, #4
   14284:	bl	150f4 <flatcc_builder_start_vector@@Base+0x80>
   14288:	mov	r0, r7
   1428c:	mov	r1, r5
   14290:	bl	150f4 <flatcc_builder_start_vector@@Base+0x80>
   14294:	cmp	r6, #0
   14298:	bne	142e0 <flatcc_builder_embed_buffer@@Base+0x1a0>
   1429c:	mov	r0, r4
   142a0:	mov	r1, r5
   142a4:	bl	16df0 <flatcc_builder_get_emit_context@@Base+0x8>
   142a8:	cmp	r0, #0
   142ac:	beq	142e0 <flatcc_builder_embed_buffer@@Base+0x1a0>
   142b0:	movw	r1, #32464	; 0x7ed0
   142b4:	movt	r1, #1
   142b8:	str	r1, [sp, #8]
   142bc:	str	r0, [sp]
   142c0:	str	r0, [sp, #12]
   142c4:	mov	r0, #1
   142c8:	str	r0, [sp, #4]
   142cc:	mov	r1, sp
   142d0:	mov	r0, r4
   142d4:	bl	15480 <flatcc_builder_create_vtable@@Base+0x80>
   142d8:	cmp	r0, #0
   142dc:	beq	142e8 <flatcc_builder_embed_buffer@@Base+0x1a8>
   142e0:	sub	sp, fp, #16
   142e4:	pop	{r4, r5, r6, r7, fp, pc}
   142e8:	movw	r0, #37512	; 0x9288
   142ec:	movt	r0, #1
   142f0:	movw	r1, #32994	; 0x80e2
   142f4:	movt	r1, #1
   142f8:	movw	r3, #37125	; 0x9105
   142fc:	movt	r3, #1
   14300:	movw	r2, #702	; 0x2be
   14304:	bl	12418 <__assert_fail@plt>
   14308:	ldr	r0, [r0, #136]	; 0x88
   1430c:	sub	r0, r0, r1
   14310:	sub	r1, r2, #1
   14314:	and	r0, r0, r1
   14318:	bx	lr
   1431c:	bx	lr
   14320:	push	{r4, r5, fp, lr}
   14324:	add	fp, sp, #8
   14328:	sub	sp, sp, #8
   1432c:	ldr	r3, [r1]
   14330:	cmp	r3, #0
   14334:	ble	14394 <flatcc_builder_embed_buffer@@Base+0x254>
   14338:	mov	r4, r0
   1433c:	ldr	r0, [r0, #136]	; 0x88
   14340:	sub	r5, r0, r3
   14344:	ldr	r2, [r1, #4]
   14348:	ldr	r0, [r4, #36]	; 0x24
   1434c:	ldr	ip, [r4, #44]	; 0x2c
   14350:	str	r3, [sp]
   14354:	add	r1, r1, #8
   14358:	mov	r3, r5
   1435c:	blx	ip
   14360:	cmp	r0, #0
   14364:	streq	r5, [r4, #136]	; 0x88
   14368:	moveq	r0, r5
   1436c:	subeq	sp, fp, #8
   14370:	popeq	{r4, r5, fp, pc}
   14374:	movw	r0, #37512	; 0x9288
   14378:	movt	r0, #1
   1437c:	movw	r1, #32994	; 0x80e2
   14380:	movt	r1, #1
   14384:	movw	r3, #37191	; 0x9147
   14388:	movt	r3, #1
   1438c:	movw	r2, #651	; 0x28b
   14390:	bl	12418 <__assert_fail@plt>
   14394:	movw	r0, #37512	; 0x9288
   14398:	movt	r0, #1
   1439c:	movw	r1, #32994	; 0x80e2
   143a0:	movt	r1, #1
   143a4:	movw	r3, #37191	; 0x9147
   143a8:	movt	r3, #1
   143ac:	movw	r2, #647	; 0x287
   143b0:	bl	12418 <__assert_fail@plt>

000143b4 <flatcc_builder_create_buffer@@Base>:
   143b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b8:	add	fp, sp, #28
   143bc:	sub	sp, sp, #92	; 0x5c
   143c0:	mov	r6, r3
   143c4:	mov	r7, r1
   143c8:	mov	r4, r0
   143cc:	ldr	r0, [fp, #8]
   143d0:	strh	r0, [fp, #-30]	; 0xffffffe2
   143d4:	mov	r0, #0
   143d8:	str	r0, [sp, #4]
   143dc:	ldr	sl, [fp, #12]
   143e0:	and	r9, sl, #1
   143e4:	sub	r1, fp, #30
   143e8:	mov	r0, r4
   143ec:	mov	r3, r9
   143f0:	bl	1424c <flatcc_builder_embed_buffer@@Base+0x10c>
   143f4:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   143f8:	mov	r0, r4
   143fc:	mov	r1, r5
   14400:	bl	14584 <flatcc_builder_create_buffer@@Base+0x1d0>
   14404:	cmp	r7, #0
   14408:	str	r6, [sp]
   1440c:	beq	14428 <flatcc_builder_create_buffer@@Base+0x74>
   14410:	ldr	r7, [r7]
   14414:	mov	r0, r7
   14418:	bl	14594 <flatcc_builder_create_buffer@@Base+0x1e0>
   1441c:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14420:	str	r7, [sp, #4]
   14424:	b	1442c <flatcc_builder_create_buffer@@Base+0x78>
   14428:	ldr	r7, [sp, #4]
   1442c:	mov	r8, #4
   14430:	and	r0, r8, sl, lsl #1
   14434:	cmp	r7, #0
   14438:	mov	r6, r7
   1443c:	movwne	r6, #1
   14440:	add	r0, r0, r6, lsl #2
   14444:	add	r1, r0, #4
   14448:	mov	r0, r4
   1444c:	mov	r2, r5
   14450:	bl	14308 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14454:	mov	r1, #0
   14458:	str	r1, [sp, #8]
   1445c:	str	r1, [sp, #12]
   14460:	ands	ip, sl, #3
   14464:	beq	14480 <flatcc_builder_create_buffer@@Base+0xcc>
   14468:	sub	r1, fp, #40	; 0x28
   1446c:	str	r1, [sp, #16]
   14470:	str	r8, [sp, #8]
   14474:	str	r8, [sp, #20]
   14478:	mov	r1, #1
   1447c:	str	r1, [sp, #12]
   14480:	ldr	r1, [sp, #8]
   14484:	ldr	r3, [sp, #12]
   14488:	add	r5, r1, #4
   1448c:	str	r5, [sp, #8]
   14490:	add	lr, sp, #8
   14494:	add	r1, lr, r3, lsl #3
   14498:	sub	r2, fp, #36	; 0x24
   1449c:	str	r2, [r1, #8]
   144a0:	str	r8, [r1, #12]
   144a4:	add	r1, r3, #1
   144a8:	str	r1, [sp, #12]
   144ac:	cmp	r7, #0
   144b0:	beq	144d8 <flatcc_builder_create_buffer@@Base+0x124>
   144b4:	lsl	r2, r6, #2
   144b8:	add	r5, r5, r2
   144bc:	str	r5, [sp, #8]
   144c0:	add	r1, lr, r1, lsl #3
   144c4:	add	r5, sp, #4
   144c8:	str	r5, [r1, #8]
   144cc:	str	r2, [r1, #12]
   144d0:	add	r1, r3, #2
   144d4:	str	r1, [sp, #12]
   144d8:	cmp	r0, #0
   144dc:	beq	1450c <flatcc_builder_create_buffer@@Base+0x158>
   144e0:	ldr	r1, [sp, #8]
   144e4:	ldr	r2, [sp, #12]
   144e8:	add	r1, r1, r0
   144ec:	str	r1, [sp, #8]
   144f0:	add	r1, lr, r2, lsl #3
   144f4:	movw	r3, #32464	; 0x7ed0
   144f8:	movt	r3, #1
   144fc:	str	r3, [r1, #8]
   14500:	str	r0, [r1, #12]
   14504:	add	r0, r2, #1
   14508:	str	r0, [sp, #12]
   1450c:	ldr	r0, [r4, #136]	; 0x88
   14510:	ldr	r1, [sp, #8]
   14514:	sub	r5, r0, r1
   14518:	cmp	ip, #0
   1451c:	addne	r5, r5, #4
   14520:	mov	r0, #144	; 0x90
   14524:	cmp	r9, #0
   14528:	movweq	r0, #140	; 0x8c
   1452c:	ldr	r0, [r4, r0]
   14530:	sub	r0, r0, r5
   14534:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14538:	str	r0, [fp, #-40]	; 0xffffffd8
   1453c:	ldr	r0, [sp]
   14540:	sub	r0, r0, r5
   14544:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14548:	str	r0, [fp, #-36]	; 0xffffffdc
   1454c:	add	r1, sp, #8
   14550:	mov	r0, r4
   14554:	bl	14320 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14558:	cmp	r0, #0
   1455c:	subne	sp, fp, #28
   14560:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14564:	movw	r0, #37512	; 0x9288
   14568:	movt	r0, #1
   1456c:	movw	r1, #32994	; 0x80e2
   14570:	movt	r1, #1
   14574:	movw	r3, #33309	; 0x821d
   14578:	movt	r3, #1
   1457c:	mov	r2, #772	; 0x304
   14580:	bl	12418 <__assert_fail@plt>
   14584:	ldrh	r2, [r0, #128]	; 0x80
   14588:	cmp	r2, r1
   1458c:	strhcc	r1, [r0, #128]	; 0x80
   14590:	bx	lr
   14594:	bx	lr

00014598 <flatcc_builder_create_struct@@Base>:
   14598:	push	{r4, r5, r6, r7, fp, lr}
   1459c:	add	fp, sp, #16
   145a0:	sub	sp, sp, #72	; 0x48
   145a4:	cmp	r3, #0
   145a8:	beq	14640 <flatcc_builder_create_struct@@Base+0xa8>
   145ac:	mov	r7, r3
   145b0:	mov	r5, r2
   145b4:	mov	r6, r1
   145b8:	mov	r4, r0
   145bc:	mov	r1, r3
   145c0:	bl	14584 <flatcc_builder_create_buffer@@Base+0x1d0>
   145c4:	mov	r0, r4
   145c8:	mov	r1, r5
   145cc:	mov	r2, r7
   145d0:	bl	14308 <flatcc_builder_embed_buffer@@Base+0x1c8>
   145d4:	mov	r1, #0
   145d8:	str	r1, [sp]
   145dc:	str	r1, [sp, #4]
   145e0:	cmp	r5, #0
   145e4:	strne	r6, [sp, #8]
   145e8:	strne	r5, [sp]
   145ec:	strne	r5, [sp, #12]
   145f0:	movne	r1, #1
   145f4:	strne	r1, [sp, #4]
   145f8:	cmp	r0, #0
   145fc:	beq	1462c <flatcc_builder_create_struct@@Base+0x94>
   14600:	ldm	sp, {r1, r2}
   14604:	add	r1, r1, r0
   14608:	str	r1, [sp]
   1460c:	mov	r1, sp
   14610:	add	r1, r1, r2, lsl #3
   14614:	movw	r3, #32464	; 0x7ed0
   14618:	movt	r3, #1
   1461c:	str	r3, [r1, #8]
   14620:	str	r0, [r1, #12]
   14624:	add	r0, r2, #1
   14628:	str	r0, [sp, #4]
   1462c:	mov	r1, sp
   14630:	mov	r0, r4
   14634:	bl	14320 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14638:	sub	sp, fp, #16
   1463c:	pop	{r4, r5, r6, r7, fp, pc}
   14640:	movw	r0, #33440	; 0x82a0
   14644:	movt	r0, #1
   14648:	movw	r1, #32994	; 0x80e2
   1464c:	movt	r1, #1
   14650:	movw	r3, #33451	; 0x82ab
   14654:	movt	r3, #1
   14658:	movw	r2, #783	; 0x30f
   1465c:	bl	12418 <__assert_fail@plt>

00014660 <flatcc_builder_start_buffer@@Base>:
   14660:	push	{r4, r5, r6, r7, fp, lr}
   14664:	add	fp, sp, #16
   14668:	mov	r6, r3
   1466c:	mov	r7, r2
   14670:	mov	r5, r1
   14674:	mov	r4, r0
   14678:	ldrh	r1, [r0, #128]	; 0x80
   1467c:	bl	1471c <flatcc_builder_start_buffer@@Base+0xbc>
   14680:	mov	r1, r0
   14684:	mvn	r0, #0
   14688:	cmp	r1, #0
   1468c:	popne	{r4, r5, r6, r7, fp, pc}
   14690:	mov	r0, #1
   14694:	strh	r0, [r4, #128]	; 0x80
   14698:	ldrh	r1, [r4, #132]	; 0x84
   1469c:	ldr	r2, [r4, #32]
   146a0:	strh	r1, [r2, #34]	; 0x22
   146a4:	strh	r7, [r4, #132]	; 0x84
   146a8:	ldrh	r1, [r4, #164]	; 0xa4
   146ac:	ldr	r2, [r4, #32]
   146b0:	strh	r1, [r2, #32]
   146b4:	strh	r6, [r4, #164]	; 0xa4
   146b8:	ldr	r1, [r4, #32]
   146bc:	ldr	r2, [r4, #144]	; 0x90
   146c0:	str	r2, [r1, #20]
   146c4:	ldr	r1, [r4, #32]
   146c8:	ldr	r2, [r4, #152]	; 0x98
   146cc:	str	r2, [r1, #28]
   146d0:	ldr	r1, [r4, #32]
   146d4:	ldr	r2, [r4, #136]	; 0x88
   146d8:	ldr	r3, [r4, #148]	; 0x94
   146dc:	ldr	r7, [r4, #168]	; 0xa8
   146e0:	add	r6, r3, #1
   146e4:	str	r2, [r4, #144]	; 0x90
   146e8:	str	r6, [r4, #148]	; 0x94
   146ec:	str	r3, [r4, #152]	; 0x98
   146f0:	str	r7, [r1, #16]
   146f4:	movw	r1, #32464	; 0x7ed0
   146f8:	movt	r1, #1
   146fc:	cmp	r5, #0
   14700:	movne	r1, r5
   14704:	ldr	r1, [r1]
   14708:	str	r1, [r4, #168]	; 0xa8
   1470c:	ldr	r1, [r4, #32]
   14710:	strh	r0, [r1, #14]
   14714:	mov	r0, #0
   14718:	pop	{r4, r5, r6, r7, fp, pc}
   1471c:	push	{r4, r5, r6, sl, fp, lr}
   14720:	add	fp, sp, #16
   14724:	sub	sp, sp, #8
   14728:	mov	r5, r1
   1472c:	mov	r4, r0
   14730:	ldr	r1, [r0, #156]	; 0x9c
   14734:	ldr	r2, [r0, #160]	; 0xa0
   14738:	add	r0, r1, #1
   1473c:	str	r0, [r4, #156]	; 0x9c
   14740:	cmp	r1, r2
   14744:	bge	14758 <flatcc_builder_start_buffer@@Base+0xf8>
   14748:	ldr	r0, [r4, #32]
   1474c:	add	r0, r0, #36	; 0x24
   14750:	str	r0, [r4, #32]
   14754:	b	147cc <flatcc_builder_start_buffer@@Base+0x16c>
   14758:	ldr	r2, [r4, #176]	; 0xb0
   1475c:	mvn	r6, #0
   14760:	cmp	r2, #1
   14764:	cmpge	r1, r2
   14768:	bge	14808 <flatcc_builder_start_buffer@@Base+0x1a8>
   1476c:	mov	r1, #0
   14770:	str	r1, [sp]
   14774:	add	r0, r0, r0, lsl #3
   14778:	mvn	r1, #35	; 0x23
   1477c:	add	r2, r1, r0, lsl #2
   14780:	mov	r0, r4
   14784:	mov	r1, #4
   14788:	mov	r3, #36	; 0x24
   1478c:	bl	13fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14790:	str	r0, [r4, #32]
   14794:	cmp	r0, #0
   14798:	beq	14808 <flatcc_builder_start_buffer@@Base+0x1a8>
   1479c:	ldr	r0, [r4, #88]	; 0x58
   147a0:	ldr	r1, [r4, #176]	; 0xb0
   147a4:	movw	r2, #36409	; 0x8e39
   147a8:	movt	r2, #14563	; 0x38e3
   147ac:	umull	r0, r2, r0, r2
   147b0:	lsr	r0, r2, #3
   147b4:	cmp	r1, r2, lsr #3
   147b8:	mov	r2, r0
   147bc:	movlt	r2, r1
   147c0:	cmp	r1, #0
   147c4:	movle	r2, r0
   147c8:	str	r2, [r4, #160]	; 0xa0
   147cc:	ldr	r0, [r4, #20]
   147d0:	ldr	r1, [r4, #32]
   147d4:	str	r0, [r1, #8]
   147d8:	ldrh	r2, [r4, #130]	; 0x82
   147dc:	strh	r2, [r1, #12]
   147e0:	strh	r5, [r4, #130]	; 0x82
   147e4:	ldr	r2, [r4, #28]
   147e8:	mvn	r3, #3
   147ec:	stm	r1, {r2, r3}
   147f0:	mov	r6, #0
   147f4:	str	r6, [r4, #20]
   147f8:	add	r0, r0, r2
   147fc:	add	r0, r0, #7
   14800:	bic	r0, r0, #7
   14804:	str	r0, [r4, #28]
   14808:	mov	r0, r6
   1480c:	sub	sp, fp, #16
   14810:	pop	{r4, r5, r6, sl, fp, pc}

00014814 <flatcc_builder_end_buffer@@Base>:
   14814:	push	{r4, r5, r6, r7, fp, lr}
   14818:	add	fp, sp, #16
   1481c:	sub	sp, sp, #8
   14820:	mov	r4, r0
   14824:	ldr	r0, [r0, #32]
   14828:	ldrh	r0, [r0, #14]
   1482c:	cmp	r0, #1
   14830:	bne	148bc <flatcc_builder_end_buffer@@Base+0xa8>
   14834:	mov	r5, r1
   14838:	ldr	r6, [r4, #152]	; 0x98
   1483c:	ldrh	r7, [r4, #164]	; 0xa4
   14840:	ldrh	r1, [r4, #132]	; 0x84
   14844:	mov	r0, r4
   14848:	bl	14584 <flatcc_builder_create_buffer@@Base+0x1d0>
   1484c:	and	r0, r7, #2
   14850:	cmp	r6, #0
   14854:	orrne	r0, r0, #1
   14858:	ldrh	r2, [r4, #132]	; 0x84
   1485c:	ldrh	r1, [r4, #128]	; 0x80
   14860:	str	r1, [sp]
   14864:	str	r0, [sp, #4]
   14868:	add	r1, r4, #168	; 0xa8
   1486c:	mov	r0, r4
   14870:	mov	r3, r5
   14874:	bl	143b4 <flatcc_builder_create_buffer@@Base>
   14878:	mov	r5, r0
   1487c:	cmp	r0, #0
   14880:	beq	148b0 <flatcc_builder_end_buffer@@Base+0x9c>
   14884:	ldr	r0, [r4, #32]
   14888:	ldr	r1, [r0, #20]
   1488c:	str	r1, [r4, #144]	; 0x90
   14890:	ldr	r1, [r0, #28]
   14894:	str	r1, [r4, #152]	; 0x98
   14898:	ldr	r1, [r0, #16]
   1489c:	str	r1, [r4, #168]	; 0xa8
   148a0:	ldrh	r0, [r0, #32]
   148a4:	strh	r0, [r4, #164]	; 0xa4
   148a8:	mov	r0, r4
   148ac:	bl	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   148b0:	mov	r0, r5
   148b4:	sub	sp, fp, #16
   148b8:	pop	{r4, r5, r6, r7, fp, pc}
   148bc:	movw	r0, #33553	; 0x8311
   148c0:	movt	r0, #1
   148c4:	movw	r1, #32994	; 0x80e2
   148c8:	movt	r1, #1
   148cc:	movw	r3, #33597	; 0x833d
   148d0:	movt	r3, #1
   148d4:	movw	r2, #838	; 0x346
   148d8:	bl	12418 <__assert_fail@plt>
   148dc:	push	{r4, sl, fp, lr}
   148e0:	add	fp, sp, #8
   148e4:	mov	r4, r0
   148e8:	ldr	r0, [r0, #16]
   148ec:	ldr	r2, [r4, #20]
   148f0:	mov	r1, #0
   148f4:	bl	123f4 <memset@plt>
   148f8:	ldr	r0, [r4, #32]
   148fc:	ldr	r1, [r0, #8]
   14900:	str	r1, [r4, #20]
   14904:	ldr	r1, [r0]
   14908:	str	r1, [r4, #28]
   1490c:	ldr	r1, [r0, #4]
   14910:	mov	r0, r4
   14914:	bl	14994 <flatcc_builder_start_struct@@Base+0x4c>
   14918:	ldrh	r1, [r4, #130]	; 0x82
   1491c:	mov	r0, r4
   14920:	bl	14584 <flatcc_builder_create_buffer@@Base+0x1d0>
   14924:	ldr	r0, [r4, #32]
   14928:	ldr	r1, [r4, #156]	; 0x9c
   1492c:	ldrh	r2, [r0, #12]
   14930:	sub	r0, r0, #36	; 0x24
   14934:	str	r0, [r4, #32]
   14938:	sub	r0, r1, #1
   1493c:	str	r0, [r4, #156]	; 0x9c
   14940:	strh	r2, [r4, #130]	; 0x82
   14944:	pop	{r4, sl, fp, pc}

00014948 <flatcc_builder_start_struct@@Base>:
   14948:	push	{r4, r5, fp, lr}
   1494c:	add	fp, sp, #8
   14950:	mov	r4, r1
   14954:	mov	r5, r0
   14958:	mov	r1, r2
   1495c:	bl	1471c <flatcc_builder_start_buffer@@Base+0xbc>
   14960:	cmp	r0, #0
   14964:	movne	r0, #0
   14968:	popne	{r4, r5, fp, pc}
   1496c:	ldr	r0, [r5, #32]
   14970:	mov	r1, #2
   14974:	strh	r1, [r0, #14]
   14978:	mov	r0, r5
   1497c:	mvn	r1, #3
   14980:	bl	14994 <flatcc_builder_start_struct@@Base+0x4c>
   14984:	mov	r0, r5
   14988:	mov	r1, r4
   1498c:	pop	{r4, r5, fp, lr}
   14990:	b	149cc <flatcc_builder_start_struct@@Base+0x84>
   14994:	push	{fp, lr}
   14998:	mov	fp, sp
   1499c:	ldr	r2, [r0, #28]
   149a0:	ldr	ip, [r0, #32]
   149a4:	ldr	r3, [r0, #60]	; 0x3c
   149a8:	ldr	lr, [r0, #64]	; 0x40
   149ac:	add	r3, r3, r2
   149b0:	str	r3, [r0, #16]
   149b4:	sub	r2, lr, r2
   149b8:	cmp	r2, r1
   149bc:	movhi	r2, r1
   149c0:	str	r2, [r0, #24]
   149c4:	str	r1, [ip, #4]
   149c8:	pop	{fp, pc}
   149cc:	push	{r4, r5, fp, lr}
   149d0:	add	fp, sp, #8
   149d4:	mov	r4, r0
   149d8:	ldr	r5, [r0, #20]
   149dc:	ldr	r2, [r0, #24]
   149e0:	add	r0, r5, r1
   149e4:	str	r0, [r4, #20]
   149e8:	cmp	r0, r2
   149ec:	bcc	14a10 <flatcc_builder_start_struct@@Base+0xc8>
   149f0:	add	r1, r0, #1
   149f4:	mov	r0, r4
   149f8:	mvn	r2, #3
   149fc:	bl	16e00 <flatcc_builder_get_emit_context@@Base+0x18>
   14a00:	mov	r1, r0
   14a04:	mov	r0, #0
   14a08:	cmp	r1, #0
   14a0c:	popne	{r4, r5, fp, pc}
   14a10:	ldr	r0, [r4, #16]
   14a14:	add	r0, r0, r5
   14a18:	pop	{r4, r5, fp, pc}

00014a1c <flatcc_builder_struct_edit@@Base>:
   14a1c:	ldr	r0, [r0, #16]
   14a20:	bx	lr

00014a24 <flatcc_builder_end_struct@@Base>:
   14a24:	push	{r4, r5, fp, lr}
   14a28:	add	fp, sp, #8
   14a2c:	mov	r4, r0
   14a30:	ldr	r0, [r0, #32]
   14a34:	ldrh	r0, [r0, #14]
   14a38:	cmp	r0, #2
   14a3c:	bne	14a6c <flatcc_builder_end_struct@@Base+0x48>
   14a40:	ldrh	r3, [r4, #130]	; 0x82
   14a44:	ldr	r1, [r4, #16]
   14a48:	ldr	r2, [r4, #20]
   14a4c:	mov	r0, r4
   14a50:	bl	14598 <flatcc_builder_create_struct@@Base>
   14a54:	mov	r5, r0
   14a58:	cmp	r0, #0
   14a5c:	movne	r0, r4
   14a60:	blne	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   14a64:	mov	r0, r5
   14a68:	pop	{r4, r5, fp, pc}
   14a6c:	movw	r0, #33686	; 0x8396
   14a70:	movt	r0, #1
   14a74:	movw	r1, #32994	; 0x80e2
   14a78:	movt	r1, #1
   14a7c:	movw	r3, #33730	; 0x83c2
   14a80:	movt	r3, #1
   14a84:	mov	r2, #872	; 0x368
   14a88:	bl	12418 <__assert_fail@plt>

00014a8c <flatcc_builder_extend_vector@@Base>:
   14a8c:	push	{r4, r5, fp, lr}
   14a90:	add	fp, sp, #8
   14a94:	mov	r5, r1
   14a98:	mov	r4, r0
   14a9c:	ldr	r0, [r0, #32]
   14aa0:	ldr	r2, [r0, #24]
   14aa4:	mov	r0, r4
   14aa8:	bl	14ad0 <flatcc_builder_extend_vector@@Base+0x44>
   14aac:	cmp	r0, #0
   14ab0:	movne	r0, #0
   14ab4:	popne	{r4, r5, fp, pc}
   14ab8:	ldr	r0, [r4, #32]
   14abc:	ldr	r0, [r0, #16]
   14ac0:	mul	r1, r0, r5
   14ac4:	mov	r0, r4
   14ac8:	pop	{r4, r5, fp, lr}
   14acc:	b	149cc <flatcc_builder_start_struct@@Base+0x84>
   14ad0:	ldr	r0, [r0, #32]
   14ad4:	ldr	r3, [r0, #20]
   14ad8:	adds	r1, r3, r1
   14adc:	bcs	14af0 <flatcc_builder_extend_vector@@Base+0x64>
   14ae0:	cmp	r1, r2
   14ae4:	strls	r1, [r0, #20]
   14ae8:	movls	r0, #0
   14aec:	bxls	lr
   14af0:	push	{fp, lr}
   14af4:	mov	fp, sp
   14af8:	movw	r0, #37265	; 0x9191
   14afc:	movt	r0, #1
   14b00:	movw	r1, #32994	; 0x80e2
   14b04:	movt	r1, #1
   14b08:	movw	r3, #37292	; 0x91ac
   14b0c:	movt	r3, #1
   14b10:	mov	r2, #892	; 0x37c
   14b14:	bl	12418 <__assert_fail@plt>

00014b18 <flatcc_builder_vector_push@@Base>:
   14b18:	push	{fp, lr}
   14b1c:	mov	fp, sp
   14b20:	ldr	r2, [r0, #32]
   14b24:	ldrh	r3, [r2, #14]
   14b28:	cmp	r3, #4
   14b2c:	bne	14b58 <flatcc_builder_vector_push@@Base+0x40>
   14b30:	ldr	ip, [r2, #20]
   14b34:	ldr	r3, [r2, #24]
   14b38:	cmp	ip, r3
   14b3c:	bhi	14b78 <flatcc_builder_vector_push@@Base+0x60>
   14b40:	add	r3, ip, #1
   14b44:	str	r3, [r2, #20]
   14b48:	ldr	r2, [r0, #32]
   14b4c:	ldr	r2, [r2, #16]
   14b50:	pop	{fp, lr}
   14b54:	b	14b98 <flatcc_builder_vector_push@@Base+0x80>
   14b58:	movw	r0, #33797	; 0x8405
   14b5c:	movt	r0, #1
   14b60:	movw	r1, #32994	; 0x80e2
   14b64:	movt	r1, #1
   14b68:	movw	r3, #33841	; 0x8431
   14b6c:	movt	r3, #1
   14b70:	movw	r2, #907	; 0x38b
   14b74:	bl	12418 <__assert_fail@plt>
   14b78:	movw	r0, #33908	; 0x8474
   14b7c:	movt	r0, #1
   14b80:	movw	r1, #32994	; 0x80e2
   14b84:	movt	r1, #1
   14b88:	movw	r3, #33841	; 0x8431
   14b8c:	movt	r3, #1
   14b90:	mov	r2, #908	; 0x38c
   14b94:	bl	12418 <__assert_fail@plt>
   14b98:	push	{r4, r5, r6, sl, fp, lr}
   14b9c:	add	fp, sp, #16
   14ba0:	mov	r4, r2
   14ba4:	mov	r5, r1
   14ba8:	mov	r1, r2
   14bac:	bl	149cc <flatcc_builder_start_struct@@Base+0x84>
   14bb0:	mov	r6, r0
   14bb4:	cmp	r0, #0
   14bb8:	beq	14bcc <flatcc_builder_vector_push@@Base+0xb4>
   14bbc:	mov	r0, r6
   14bc0:	mov	r1, r5
   14bc4:	mov	r2, r4
   14bc8:	bl	12388 <memcpy@plt>
   14bcc:	mov	r0, r6
   14bd0:	pop	{r4, r5, r6, sl, fp, pc}

00014bd4 <flatcc_builder_append_vector@@Base>:
   14bd4:	push	{r4, r5, r6, sl, fp, lr}
   14bd8:	add	fp, sp, #16
   14bdc:	mov	r4, r1
   14be0:	mov	r6, r0
   14be4:	ldr	r0, [r0, #32]
   14be8:	ldrh	r1, [r0, #14]
   14bec:	cmp	r1, #4
   14bf0:	bne	14c30 <flatcc_builder_append_vector@@Base+0x5c>
   14bf4:	mov	r5, r2
   14bf8:	ldr	r2, [r0, #24]
   14bfc:	mov	r0, r6
   14c00:	mov	r1, r5
   14c04:	bl	14ad0 <flatcc_builder_extend_vector@@Base+0x44>
   14c08:	cmp	r0, #0
   14c0c:	movne	r0, #0
   14c10:	popne	{r4, r5, r6, sl, fp, pc}
   14c14:	ldr	r0, [r6, #32]
   14c18:	ldr	r0, [r0, #16]
   14c1c:	mul	r2, r0, r5
   14c20:	mov	r0, r6
   14c24:	mov	r1, r4
   14c28:	pop	{r4, r5, r6, sl, fp, lr}
   14c2c:	b	14b98 <flatcc_builder_vector_push@@Base+0x80>
   14c30:	movw	r0, #33797	; 0x8405
   14c34:	movt	r0, #1
   14c38:	movw	r1, #32994	; 0x80e2
   14c3c:	movt	r1, #1
   14c40:	movw	r3, #33969	; 0x84b1
   14c44:	movt	r3, #1
   14c48:	movw	r2, #915	; 0x393
   14c4c:	bl	12418 <__assert_fail@plt>

00014c50 <flatcc_builder_extend_offset_vector@@Base>:
   14c50:	push	{r4, r5, fp, lr}
   14c54:	add	fp, sp, #8
   14c58:	mov	r5, r1
   14c5c:	mov	r4, r0
   14c60:	mvn	r2, #-1073741824	; 0xc0000000
   14c64:	bl	14ad0 <flatcc_builder_extend_vector@@Base+0x44>
   14c68:	mov	r1, r0
   14c6c:	mov	r0, #0
   14c70:	cmp	r1, #0
   14c74:	popne	{r4, r5, fp, pc}
   14c78:	lsl	r1, r5, #2
   14c7c:	mov	r0, r4
   14c80:	bl	149cc <flatcc_builder_start_struct@@Base+0x84>
   14c84:	pop	{r4, r5, fp, pc}

00014c88 <flatcc_builder_offset_vector_push@@Base>:
   14c88:	push	{r4, r5, fp, lr}
   14c8c:	add	fp, sp, #8
   14c90:	mov	r4, r1
   14c94:	ldr	r1, [r0, #32]
   14c98:	ldrh	r2, [r1, #14]
   14c9c:	cmp	r2, #5
   14ca0:	bne	14cd8 <flatcc_builder_offset_vector_push@@Base+0x50>
   14ca4:	ldr	r2, [r1, #20]
   14ca8:	mov	r5, #0
   14cac:	cmn	r2, #-1073741823	; 0xc0000001
   14cb0:	beq	14cd0 <flatcc_builder_offset_vector_push@@Base+0x48>
   14cb4:	add	r2, r2, #1
   14cb8:	str	r2, [r1, #20]
   14cbc:	mov	r1, #4
   14cc0:	bl	149cc <flatcc_builder_start_struct@@Base+0x84>
   14cc4:	cmp	r0, #0
   14cc8:	strne	r4, [r0]
   14ccc:	movne	r5, r0
   14cd0:	mov	r0, r5
   14cd4:	pop	{r4, r5, fp, pc}
   14cd8:	movw	r0, #34046	; 0x84fe
   14cdc:	movt	r0, #1
   14ce0:	movw	r1, #32994	; 0x80e2
   14ce4:	movt	r1, #1
   14ce8:	movw	r3, #34097	; 0x8531
   14cec:	movt	r3, #1
   14cf0:	movw	r2, #934	; 0x3a6
   14cf4:	bl	12418 <__assert_fail@plt>

00014cf8 <flatcc_builder_append_offset_vector@@Base>:
   14cf8:	push	{r4, r5, r6, sl, fp, lr}
   14cfc:	add	fp, sp, #16
   14d00:	mov	r6, r0
   14d04:	ldr	r0, [r0, #32]
   14d08:	ldrh	r0, [r0, #14]
   14d0c:	cmp	r0, #5
   14d10:	bne	14d50 <flatcc_builder_append_offset_vector@@Base+0x58>
   14d14:	mov	r5, r2
   14d18:	mov	r4, r1
   14d1c:	mov	r0, r6
   14d20:	mov	r1, r2
   14d24:	mvn	r2, #-1073741824	; 0xc0000000
   14d28:	bl	14ad0 <flatcc_builder_extend_vector@@Base+0x44>
   14d2c:	mov	r1, r0
   14d30:	mov	r0, #0
   14d34:	cmp	r1, #0
   14d38:	popne	{r4, r5, r6, sl, fp, pc}
   14d3c:	lsl	r2, r5, #2
   14d40:	mov	r0, r6
   14d44:	mov	r1, r4
   14d48:	bl	14b98 <flatcc_builder_vector_push@@Base+0x80>
   14d4c:	pop	{r4, r5, r6, sl, fp, pc}
   14d50:	movw	r0, #34046	; 0x84fe
   14d54:	movt	r0, #1
   14d58:	movw	r1, #32994	; 0x80e2
   14d5c:	movt	r1, #1
   14d60:	movw	r3, #34195	; 0x8593
   14d64:	movt	r3, #1
   14d68:	mov	r2, #948	; 0x3b4
   14d6c:	bl	12418 <__assert_fail@plt>

00014d70 <flatcc_builder_extend_string@@Base>:
   14d70:	push	{r4, r5, fp, lr}
   14d74:	add	fp, sp, #8
   14d78:	mov	r5, r0
   14d7c:	ldr	r0, [r0, #32]
   14d80:	ldrh	r0, [r0, #14]
   14d84:	cmp	r0, #6
   14d88:	bne	14db8 <flatcc_builder_extend_string@@Base+0x48>
   14d8c:	mov	r4, r1
   14d90:	mov	r0, r5
   14d94:	mvn	r2, #0
   14d98:	bl	14ad0 <flatcc_builder_extend_vector@@Base+0x44>
   14d9c:	cmp	r0, #0
   14da0:	movne	r0, #0
   14da4:	popne	{r4, r5, fp, pc}
   14da8:	mov	r0, r5
   14dac:	mov	r1, r4
   14db0:	pop	{r4, r5, fp, lr}
   14db4:	b	149cc <flatcc_builder_start_struct@@Base+0x84>
   14db8:	movw	r0, #34311	; 0x8607
   14dbc:	movt	r0, #1
   14dc0:	movw	r1, #32994	; 0x80e2
   14dc4:	movt	r1, #1
   14dc8:	movw	r3, #34355	; 0x8633
   14dcc:	movt	r3, #1
   14dd0:	movw	r2, #957	; 0x3bd
   14dd4:	bl	12418 <__assert_fail@plt>

00014dd8 <flatcc_builder_append_string@@Base>:
   14dd8:	push	{r4, r5, r6, sl, fp, lr}
   14ddc:	add	fp, sp, #16
   14de0:	mov	r6, r0
   14de4:	ldr	r0, [r0, #32]
   14de8:	ldrh	r0, [r0, #14]
   14dec:	cmp	r0, #6
   14df0:	bne	14e2c <flatcc_builder_append_string@@Base+0x54>
   14df4:	mov	r4, r2
   14df8:	mov	r5, r1
   14dfc:	mov	r0, r6
   14e00:	mov	r1, r2
   14e04:	mvn	r2, #0
   14e08:	bl	14ad0 <flatcc_builder_extend_vector@@Base+0x44>
   14e0c:	cmp	r0, #0
   14e10:	movne	r0, #0
   14e14:	popne	{r4, r5, r6, sl, fp, pc}
   14e18:	mov	r0, r6
   14e1c:	mov	r1, r5
   14e20:	mov	r2, r4
   14e24:	pop	{r4, r5, r6, sl, fp, lr}
   14e28:	b	14b98 <flatcc_builder_vector_push@@Base+0x80>
   14e2c:	movw	r0, #34311	; 0x8607
   14e30:	movt	r0, #1
   14e34:	movw	r1, #32994	; 0x80e2
   14e38:	movt	r1, #1
   14e3c:	movw	r3, #34418	; 0x8672
   14e40:	movt	r3, #1
   14e44:	movw	r2, #966	; 0x3c6
   14e48:	bl	12418 <__assert_fail@plt>

00014e4c <flatcc_builder_append_string_str@@Base>:
   14e4c:	push	{r4, r5, fp, lr}
   14e50:	add	fp, sp, #8
   14e54:	mov	r4, r1
   14e58:	mov	r5, r0
   14e5c:	mov	r0, r1
   14e60:	bl	123dc <strlen@plt>
   14e64:	mov	r2, r0
   14e68:	mov	r0, r5
   14e6c:	mov	r1, r4
   14e70:	pop	{r4, r5, fp, lr}
   14e74:	b	14dd8 <flatcc_builder_append_string@@Base>

00014e78 <flatcc_builder_append_string_strn@@Base>:
   14e78:	push	{r4, r5, fp, lr}
   14e7c:	add	fp, sp, #8
   14e80:	mov	r4, r1
   14e84:	mov	r5, r0
   14e88:	mov	r0, r1
   14e8c:	mov	r1, r2
   14e90:	bl	14ea8 <flatcc_builder_append_string_strn@@Base+0x30>
   14e94:	mov	r2, r0
   14e98:	mov	r0, r5
   14e9c:	mov	r1, r4
   14ea0:	pop	{r4, r5, fp, lr}
   14ea4:	b	14dd8 <flatcc_builder_append_string@@Base>
   14ea8:	push	{r4, r5, fp, lr}
   14eac:	add	fp, sp, #8
   14eb0:	mov	r4, r1
   14eb4:	mov	r5, r0
   14eb8:	mov	r1, #0
   14ebc:	mov	r2, r4
   14ec0:	bl	12400 <memchr@plt>
   14ec4:	cmp	r0, #0
   14ec8:	subne	r4, r0, r5
   14ecc:	mov	r0, r4
   14ed0:	pop	{r4, r5, fp, pc}

00014ed4 <flatcc_builder_truncate_vector@@Base>:
   14ed4:	push	{fp, lr}
   14ed8:	mov	fp, sp
   14edc:	ldr	r2, [r0, #32]
   14ee0:	ldrh	r3, [r2, #14]
   14ee4:	cmp	r3, #4
   14ee8:	bne	14f18 <flatcc_builder_truncate_vector@@Base+0x44>
   14eec:	ldr	r3, [r2, #20]
   14ef0:	cmp	r3, r1
   14ef4:	bcc	14f38 <flatcc_builder_truncate_vector@@Base+0x64>
   14ef8:	sub	r3, r3, r1
   14efc:	str	r3, [r2, #20]
   14f00:	ldr	r2, [r0, #32]
   14f04:	ldr	r2, [r2, #16]
   14f08:	mul	r1, r2, r1
   14f0c:	bl	14f58 <flatcc_builder_truncate_vector@@Base+0x84>
   14f10:	mov	r0, #0
   14f14:	pop	{fp, pc}
   14f18:	movw	r0, #33797	; 0x8405
   14f1c:	movt	r0, #1
   14f20:	movw	r1, #32994	; 0x80e2
   14f24:	movt	r1, #1
   14f28:	movw	r3, #34495	; 0x86bf
   14f2c:	movt	r3, #1
   14f30:	movw	r2, #985	; 0x3d9
   14f34:	bl	12418 <__assert_fail@plt>
   14f38:	movw	r0, #34558	; 0x86fe
   14f3c:	movt	r0, #1
   14f40:	movw	r1, #32994	; 0x80e2
   14f44:	movt	r1, #1
   14f48:	movw	r3, #34495	; 0x86bf
   14f4c:	movt	r3, #1
   14f50:	movw	r2, #986	; 0x3da
   14f54:	bl	12418 <__assert_fail@plt>
   14f58:	mov	r2, r1
   14f5c:	ldr	r1, [r0, #16]
   14f60:	ldr	r3, [r0, #20]
   14f64:	sub	r3, r3, r2
   14f68:	str	r3, [r0, #20]
   14f6c:	add	r0, r1, r3
   14f70:	mov	r1, #0
   14f74:	b	123f4 <memset@plt>

00014f78 <flatcc_builder_truncate_offset_vector@@Base>:
   14f78:	push	{fp, lr}
   14f7c:	mov	fp, sp
   14f80:	ldr	r2, [r0, #32]
   14f84:	ldrh	r3, [r2, #14]
   14f88:	cmp	r3, #5
   14f8c:	bne	14fbc <flatcc_builder_truncate_offset_vector@@Base+0x44>
   14f90:	ldr	r3, [r2, #20]
   14f94:	cmp	r3, r1
   14f98:	bcc	14fdc <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14f9c:	sub	r3, r3, r1
   14fa0:	str	r3, [r2, #20]
   14fa4:	ldr	r2, [r0, #32]
   14fa8:	ldr	r2, [r2, #16]
   14fac:	mul	r1, r2, r1
   14fb0:	bl	14f58 <flatcc_builder_truncate_vector@@Base+0x84>
   14fb4:	mov	r0, #0
   14fb8:	pop	{fp, pc}
   14fbc:	movw	r0, #34046	; 0x84fe
   14fc0:	movt	r0, #1
   14fc4:	movw	r1, #32994	; 0x80e2
   14fc8:	movt	r1, #1
   14fcc:	movw	r3, #34594	; 0x8722
   14fd0:	movt	r3, #1
   14fd4:	movw	r2, #994	; 0x3e2
   14fd8:	bl	12418 <__assert_fail@plt>
   14fdc:	movw	r0, #34664	; 0x8768
   14fe0:	movt	r0, #1
   14fe4:	movw	r1, #32994	; 0x80e2
   14fe8:	movt	r1, #1
   14fec:	movw	r3, #34594	; 0x8722
   14ff0:	movt	r3, #1
   14ff4:	movw	r2, #995	; 0x3e3
   14ff8:	bl	12418 <__assert_fail@plt>

00014ffc <flatcc_builder_truncate_string@@Base>:
   14ffc:	push	{fp, lr}
   15000:	mov	fp, sp
   15004:	ldr	r2, [r0, #32]
   15008:	ldrh	r3, [r2, #14]
   1500c:	cmp	r3, #6
   15010:	bne	15034 <flatcc_builder_truncate_string@@Base+0x38>
   15014:	ldr	r3, [r2, #20]
   15018:	cmp	r3, r1
   1501c:	bcc	15054 <flatcc_builder_truncate_string@@Base+0x58>
   15020:	sub	r3, r3, r1
   15024:	str	r3, [r2, #20]
   15028:	bl	14f58 <flatcc_builder_truncate_vector@@Base+0x84>
   1502c:	mov	r0, #0
   15030:	pop	{fp, pc}
   15034:	movw	r0, #34311	; 0x8607
   15038:	movt	r0, #1
   1503c:	movw	r1, #32994	; 0x80e2
   15040:	movt	r1, #1
   15044:	movw	r3, #34723	; 0x87a3
   15048:	movt	r3, #1
   1504c:	movw	r2, #1003	; 0x3eb
   15050:	bl	12418 <__assert_fail@plt>
   15054:	movw	r0, #34786	; 0x87e2
   15058:	movt	r0, #1
   1505c:	movw	r1, #32994	; 0x80e2
   15060:	movt	r1, #1
   15064:	movw	r3, #34723	; 0x87a3
   15068:	movt	r3, #1
   1506c:	mov	r2, #1004	; 0x3ec
   15070:	bl	12418 <__assert_fail@plt>

00015074 <flatcc_builder_start_vector@@Base>:
   15074:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15078:	add	fp, sp, #24
   1507c:	sub	sp, sp, #8
   15080:	mov	r5, r3
   15084:	mov	r6, r1
   15088:	mov	r4, r0
   1508c:	strh	r2, [sp, #6]
   15090:	add	r0, sp, #6
   15094:	mov	r8, #4
   15098:	mov	r1, #4
   1509c:	bl	150f4 <flatcc_builder_start_vector@@Base+0x80>
   150a0:	ldrh	r1, [sp, #6]
   150a4:	mov	r0, r4
   150a8:	bl	1471c <flatcc_builder_start_buffer@@Base+0xbc>
   150ac:	mvn	r7, #0
   150b0:	cmp	r0, #0
   150b4:	bne	150e8 <flatcc_builder_start_vector@@Base+0x74>
   150b8:	ldr	r0, [r4, #32]
   150bc:	str	r6, [r0, #16]
   150c0:	ldr	r0, [r4, #32]
   150c4:	mov	r7, #0
   150c8:	str	r7, [r0, #20]
   150cc:	ldr	r0, [r4, #32]
   150d0:	str	r5, [r0, #24]
   150d4:	ldr	r0, [r4, #32]
   150d8:	strh	r8, [r0, #14]
   150dc:	mov	r0, r4
   150e0:	mvn	r1, #3
   150e4:	bl	14994 <flatcc_builder_start_struct@@Base+0x4c>
   150e8:	mov	r0, r7
   150ec:	sub	sp, fp, #24
   150f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150f4:	ldrh	r2, [r0]
   150f8:	cmp	r2, r1
   150fc:	strhcc	r1, [r0]
   15100:	bx	lr

00015104 <flatcc_builder_start_offset_vector@@Base>:
   15104:	push	{r4, r5, r6, sl, fp, lr}
   15108:	add	fp, sp, #16
   1510c:	mov	r4, r0
   15110:	mov	r6, #4
   15114:	mov	r1, #4
   15118:	bl	1471c <flatcc_builder_start_buffer@@Base+0xbc>
   1511c:	mvn	r5, #0
   15120:	cmp	r0, #0
   15124:	beq	15130 <flatcc_builder_start_offset_vector@@Base+0x2c>
   15128:	mov	r0, r5
   1512c:	pop	{r4, r5, r6, sl, fp, pc}
   15130:	ldr	r0, [r4, #32]
   15134:	str	r6, [r0, #16]
   15138:	ldr	r0, [r4, #32]
   1513c:	mov	r5, #0
   15140:	str	r5, [r0, #20]
   15144:	ldr	r0, [r4, #32]
   15148:	mov	r1, #5
   1514c:	strh	r1, [r0, #14]
   15150:	mov	r0, r4
   15154:	mvn	r1, #3
   15158:	bl	14994 <flatcc_builder_start_struct@@Base+0x4c>
   1515c:	mov	r0, r5
   15160:	pop	{r4, r5, r6, sl, fp, pc}

00015164 <flatcc_builder_create_offset_vector@@Base>:
   15164:	push	{r4, r5, r6, sl, fp, lr}
   15168:	add	fp, sp, #16
   1516c:	mov	r6, r2
   15170:	mov	r5, r1
   15174:	mov	r4, r0
   15178:	bl	15104 <flatcc_builder_start_offset_vector@@Base>
   1517c:	cmp	r0, #0
   15180:	beq	1518c <flatcc_builder_create_offset_vector@@Base+0x28>
   15184:	mov	r0, #0
   15188:	pop	{r4, r5, r6, sl, fp, pc}
   1518c:	mov	r0, r4
   15190:	mov	r1, r6
   15194:	bl	14c50 <flatcc_builder_extend_offset_vector@@Base>
   15198:	cmp	r0, #0
   1519c:	beq	15184 <flatcc_builder_create_offset_vector@@Base+0x20>
   151a0:	lsl	r2, r6, #2
   151a4:	mov	r1, r5
   151a8:	bl	12388 <memcpy@plt>
   151ac:	mov	r0, r4
   151b0:	pop	{r4, r5, r6, sl, fp, lr}
   151b4:	b	151b8 <flatcc_builder_end_offset_vector@@Base>

000151b8 <flatcc_builder_end_offset_vector@@Base>:
   151b8:	push	{r4, r5, fp, lr}
   151bc:	add	fp, sp, #8
   151c0:	mov	r4, r0
   151c4:	ldr	r0, [r0, #32]
   151c8:	ldrh	r1, [r0, #14]
   151cc:	cmp	r1, #5
   151d0:	bne	151fc <flatcc_builder_end_offset_vector@@Base+0x44>
   151d4:	ldr	r2, [r0, #20]
   151d8:	ldr	r1, [r4, #16]
   151dc:	mov	r0, r4
   151e0:	bl	15d58 <flatcc_builder_create_offset_vector_direct@@Base>
   151e4:	mov	r5, r0
   151e8:	cmp	r0, #0
   151ec:	movne	r0, r4
   151f0:	blne	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   151f4:	mov	r0, r5
   151f8:	pop	{r4, r5, fp, pc}
   151fc:	movw	r0, #34046	; 0x84fe
   15200:	movt	r0, #1
   15204:	movw	r1, #32994	; 0x80e2
   15208:	movt	r1, #1
   1520c:	movw	r3, #35629	; 0x8b2d
   15210:	movt	r3, #1
   15214:	movw	r2, #1480	; 0x5c8
   15218:	bl	12418 <__assert_fail@plt>

0001521c <flatcc_builder_start_string@@Base>:
   1521c:	push	{r4, r5, r6, sl, fp, lr}
   15220:	add	fp, sp, #16
   15224:	mov	r4, r0
   15228:	mov	r6, #1
   1522c:	mov	r1, #1
   15230:	bl	1471c <flatcc_builder_start_buffer@@Base+0xbc>
   15234:	mvn	r5, #0
   15238:	cmp	r0, #0
   1523c:	beq	15248 <flatcc_builder_start_string@@Base+0x2c>
   15240:	mov	r0, r5
   15244:	pop	{r4, r5, r6, sl, fp, pc}
   15248:	ldr	r0, [r4, #32]
   1524c:	str	r6, [r0, #16]
   15250:	ldr	r0, [r4, #32]
   15254:	mov	r5, #0
   15258:	str	r5, [r0, #20]
   1525c:	ldr	r0, [r4, #32]
   15260:	mov	r1, #6
   15264:	strh	r1, [r0, #14]
   15268:	mov	r0, r4
   1526c:	mvn	r1, #3
   15270:	bl	14994 <flatcc_builder_start_struct@@Base+0x4c>
   15274:	mov	r0, r5
   15278:	pop	{r4, r5, r6, sl, fp, pc}

0001527c <flatcc_builder_reserve_table@@Base>:
   1527c:	cmn	r1, #1
   15280:	ble	15288 <flatcc_builder_reserve_table@@Base+0xc>
   15284:	b	152b0 <flatcc_builder_reserve_table@@Base+0x34>
   15288:	push	{fp, lr}
   1528c:	mov	fp, sp
   15290:	movw	r0, #34885	; 0x8845
   15294:	movt	r0, #1
   15298:	movw	r1, #32994	; 0x80e2
   1529c:	movt	r1, #1
   152a0:	movw	r3, #34820	; 0x8804
   152a4:	movt	r3, #1
   152a8:	movw	r2, #1065	; 0x429
   152ac:	bl	12418 <__assert_fail@plt>
   152b0:	push	{r4, r5, r6, sl, fp, lr}
   152b4:	add	fp, sp, #16
   152b8:	sub	sp, sp, #8
   152bc:	mov	r6, r1
   152c0:	mov	r4, r0
   152c4:	ldr	r0, [r0, #32]
   152c8:	ldrh	r1, [r0, #28]
   152cc:	ldr	r0, [r0, #16]
   152d0:	mov	r2, #1
   152d4:	str	r2, [sp]
   152d8:	mov	r2, #4
   152dc:	add	r3, r2, r6, lsl #1
   152e0:	add	r2, r0, r1, lsl #1
   152e4:	mov	r5, #0
   152e8:	mov	r0, r4
   152ec:	mov	r1, #0
   152f0:	bl	13fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   152f4:	str	r0, [r4, #4]
   152f8:	cmp	r0, #0
   152fc:	beq	15338 <flatcc_builder_reserve_table@@Base+0xbc>
   15300:	lsl	r1, r6, #1
   15304:	add	r0, r0, #4
   15308:	str	r0, [r4, #4]
   1530c:	ldr	r0, [r4, #32]
   15310:	ldr	r2, [r0, #20]
   15314:	str	r5, [sp]
   15318:	orr	r3, r1, #1
   1531c:	mov	r0, r4
   15320:	mov	r1, #3
   15324:	bl	13fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   15328:	str	r0, [r4]
   1532c:	cmp	r0, #0
   15330:	mvneq	r5, #0
   15334:	b	1533c <flatcc_builder_reserve_table@@Base+0xc0>
   15338:	mvn	r5, #0
   1533c:	mov	r0, r5
   15340:	sub	sp, fp, #16
   15344:	pop	{r4, r5, r6, sl, fp, pc}

00015348 <flatcc_builder_start_table@@Base>:
   15348:	push	{r4, r5, r6, sl, fp, lr}
   1534c:	add	fp, sp, #16
   15350:	mov	r6, r1
   15354:	mov	r4, r0
   15358:	mov	r1, #4
   1535c:	bl	1471c <flatcc_builder_start_buffer@@Base+0xbc>
   15360:	mvn	r5, #0
   15364:	cmp	r0, #0
   15368:	bne	153e0 <flatcc_builder_start_table@@Base+0x98>
   1536c:	ldr	r0, [r4, #4]
   15370:	ldr	r1, [r4, #32]
   15374:	ldr	r2, [r4, #52]	; 0x34
   15378:	sub	r0, r0, r2
   1537c:	str	r0, [r1, #16]
   15380:	ldr	r0, [r4]
   15384:	ldr	r1, [r4, #32]
   15388:	ldr	r2, [r4, #76]	; 0x4c
   1538c:	sub	r0, r0, r2
   15390:	str	r0, [r1, #20]
   15394:	ldr	r0, [r4, #12]
   15398:	ldr	r1, [r4, #32]
   1539c:	str	r0, [r1, #24]
   153a0:	ldr	r0, [r4, #32]
   153a4:	ldrh	r1, [r4, #8]
   153a8:	strh	r1, [r0, #28]
   153ac:	mov	r0, #0
   153b0:	strh	r0, [r4, #8]
   153b4:	movw	r0, #15186	; 0x3b52
   153b8:	movt	r0, #12137	; 0x2f69
   153bc:	str	r0, [r4, #12]
   153c0:	ldr	r0, [r4, #32]
   153c4:	mov	r1, #3
   153c8:	strh	r1, [r0, #14]
   153cc:	mov	r0, r4
   153d0:	mov	r1, r6
   153d4:	bl	152b0 <flatcc_builder_reserve_table@@Base+0x34>
   153d8:	cmp	r0, #0
   153dc:	beq	153e8 <flatcc_builder_start_table@@Base+0xa0>
   153e0:	mov	r0, r5
   153e4:	pop	{r4, r5, r6, sl, fp, pc}
   153e8:	mov	r0, r4
   153ec:	movw	r1, #65532	; 0xfffc
   153f0:	bl	14994 <flatcc_builder_start_struct@@Base+0x4c>
   153f4:	mov	r5, #0
   153f8:	mov	r0, r5
   153fc:	pop	{r4, r5, r6, sl, fp, pc}

00015400 <flatcc_builder_create_vtable@@Base>:
   15400:	push	{fp, lr}
   15404:	mov	fp, sp
   15408:	sub	sp, sp, #72	; 0x48
   1540c:	mov	r3, #0
   15410:	str	r3, [sp, #4]
   15414:	str	r3, [sp]
   15418:	cmp	r2, #0
   1541c:	strne	r1, [sp, #8]
   15420:	strne	r2, [sp]
   15424:	strne	r2, [sp, #12]
   15428:	movne	r1, #1
   1542c:	strne	r1, [sp, #4]
   15430:	ldr	r1, [r0, #152]	; 0x98
   15434:	cmp	r1, #0
   15438:	bne	15448 <flatcc_builder_create_vtable@@Base+0x48>
   1543c:	ldr	r1, [r0, #180]	; 0xb4
   15440:	cmp	r1, #0
   15444:	beq	15464 <flatcc_builder_create_vtable@@Base+0x64>
   15448:	mov	r1, sp
   1544c:	bl	14320 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15450:	cmp	r0, #0
   15454:	beq	15474 <flatcc_builder_create_vtable@@Base+0x74>
   15458:	add	r0, r0, #1
   1545c:	mov	sp, fp
   15460:	pop	{fp, pc}
   15464:	mov	r1, sp
   15468:	bl	15480 <flatcc_builder_create_vtable@@Base+0x80>
   1546c:	cmp	r0, #0
   15470:	bne	1545c <flatcc_builder_create_vtable@@Base+0x5c>
   15474:	mov	r0, #0
   15478:	mov	sp, fp
   1547c:	pop	{fp, pc}
   15480:	push	{r4, sl, fp, lr}
   15484:	add	fp, sp, #8
   15488:	sub	sp, sp, #8
   1548c:	ldr	r4, [r0, #140]	; 0x8c
   15490:	ldr	r3, [r1]
   15494:	add	r2, r3, r4
   15498:	str	r2, [r0, #140]	; 0x8c
   1549c:	cmn	r3, #1
   154a0:	ble	154f4 <flatcc_builder_create_vtable@@Base+0xf4>
   154a4:	ldr	r2, [r1, #4]
   154a8:	ldr	ip, [r0, #36]	; 0x24
   154ac:	ldr	lr, [r0, #44]	; 0x2c
   154b0:	str	r3, [sp]
   154b4:	add	r1, r1, #8
   154b8:	mov	r0, ip
   154bc:	mov	r3, r4
   154c0:	blx	lr
   154c4:	cmp	r0, #0
   154c8:	addeq	r0, r4, #1
   154cc:	subeq	sp, fp, #8
   154d0:	popeq	{r4, sl, fp, pc}
   154d4:	movw	r0, #37512	; 0x9288
   154d8:	movt	r0, #1
   154dc:	movw	r1, #32994	; 0x80e2
   154e0:	movt	r1, #1
   154e4:	movw	r3, #37379	; 0x9203
   154e8:	movt	r3, #1
   154ec:	movw	r2, #677	; 0x2a5
   154f0:	bl	12418 <__assert_fail@plt>
   154f4:	movw	r0, #37512	; 0x9288
   154f8:	movt	r0, #1
   154fc:	movw	r1, #32994	; 0x80e2
   15500:	movt	r1, #1
   15504:	movw	r3, #37379	; 0x9203
   15508:	movt	r3, #1
   1550c:	movw	r2, #673	; 0x2a1
   15510:	bl	12418 <__assert_fail@plt>

00015514 <flatcc_builder_create_cached_vtable@@Base>:
   15514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15518:	add	fp, sp, #28
   1551c:	sub	sp, sp, #20
   15520:	mov	r4, r2
   15524:	mov	r9, r1
   15528:	mov	sl, r0
   1552c:	mov	r1, r3
   15530:	bl	15708 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   15534:	cmp	r0, #0
   15538:	beq	1565c <flatcc_builder_create_cached_vtable@@Base+0x148>
   1553c:	mov	r7, r0
   15540:	ldr	r6, [r0]
   15544:	mov	r5, #0
   15548:	cmp	r6, #0
   1554c:	mov	r8, #0
   15550:	beq	155e8 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   15554:	ldr	r5, [sl, #68]	; 0x44
   15558:	str	sl, [sp, #16]
   1555c:	ldr	sl, [sl, #100]	; 0x64
   15560:	mov	r0, #0
   15564:	str	r7, [sp, #8]
   15568:	str	r0, [sp, #12]
   1556c:	add	r8, sl, r6
   15570:	ldr	r0, [r8, #8]
   15574:	mov	r1, r5
   15578:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   1557c:	cmp	r0, r4
   15580:	bne	15598 <flatcc_builder_create_cached_vtable@@Base+0x84>
   15584:	mov	r0, r9
   15588:	mov	r2, r4
   1558c:	bl	12394 <memcmp@plt>
   15590:	cmp	r0, #0
   15594:	beq	155ac <flatcc_builder_create_cached_vtable@@Base+0x98>
   15598:	ldr	r6, [r8, #12]!
   1559c:	cmp	r6, #0
   155a0:	mov	r7, r8
   155a4:	bne	1556c <flatcc_builder_create_cached_vtable@@Base+0x58>
   155a8:	b	155d8 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   155ac:	ldr	r0, [sp, #16]
   155b0:	ldr	r0, [r0, #152]	; 0x98
   155b4:	ldr	r1, [r8, #4]
   155b8:	cmp	r1, r0
   155bc:	beq	156e4 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   155c0:	mov	r7, r8
   155c4:	ldr	r6, [r7, #12]!
   155c8:	cmp	r6, #0
   155cc:	mov	r0, r8
   155d0:	bne	15568 <flatcc_builder_create_cached_vtable@@Base+0x54>
   155d4:	b	155dc <flatcc_builder_create_cached_vtable@@Base+0xc8>
   155d8:	ldr	r8, [sp, #12]
   155dc:	ldr	sl, [sp, #16]
   155e0:	mov	r5, #0
   155e4:	ldr	r7, [sp, #8]
   155e8:	ldr	r2, [sl, #124]	; 0x7c
   155ec:	str	r5, [sp]
   155f0:	mov	r0, sl
   155f4:	mov	r1, #6
   155f8:	mov	r3, #16
   155fc:	bl	13fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   15600:	cmp	r0, #0
   15604:	beq	156d0 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15608:	mov	r6, r0
   1560c:	ldr	r0, [sl, #124]	; 0x7c
   15610:	ldr	r1, [sl, #152]	; 0x98
   15614:	add	r2, r0, #16
   15618:	str	r2, [sl, #124]	; 0x7c
   1561c:	str	r1, [r6, #4]
   15620:	ldr	r1, [r7]
   15624:	str	r1, [r6, #12]
   15628:	str	r0, [r7]
   1562c:	mov	r0, sl
   15630:	mov	r1, r9
   15634:	mov	r2, r4
   15638:	bl	15400 <flatcc_builder_create_vtable@@Base>
   1563c:	str	r0, [r6]
   15640:	cmp	r0, #0
   15644:	beq	156d0 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15648:	cmp	r8, #0
   1564c:	beq	15664 <flatcc_builder_create_cached_vtable@@Base+0x150>
   15650:	ldr	r0, [r8, #8]
   15654:	str	r0, [r6, #8]
   15658:	b	156cc <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   1565c:	mov	r5, #0
   15660:	b	156d0 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15664:	ldr	r0, [sl, #172]	; 0xac
   15668:	cmp	r0, #0
   1566c:	beq	1568c <flatcc_builder_create_cached_vtable@@Base+0x178>
   15670:	ldr	r1, [sl, #120]	; 0x78
   15674:	add	r1, r1, r4
   15678:	cmp	r0, r1
   1567c:	bcs	1568c <flatcc_builder_create_cached_vtable@@Base+0x178>
   15680:	mov	r0, sl
   15684:	bl	13ca8 <flatcc_builder_flush_vtable_cache@@Base>
   15688:	b	156cc <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   1568c:	ldr	r2, [sl, #120]	; 0x78
   15690:	mov	r0, #0
   15694:	str	r0, [sp]
   15698:	mov	r0, sl
   1569c:	mov	r1, #2
   156a0:	mov	r3, r4
   156a4:	bl	13fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   156a8:	cmp	r0, #0
   156ac:	beq	156dc <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   156b0:	ldr	r1, [sl, #120]	; 0x78
   156b4:	str	r1, [r6, #8]
   156b8:	add	r1, r1, r4
   156bc:	str	r1, [sl, #120]	; 0x78
   156c0:	mov	r1, r9
   156c4:	mov	r2, r4
   156c8:	bl	12388 <memcpy@plt>
   156cc:	ldr	r5, [r6]
   156d0:	mov	r0, r5
   156d4:	sub	sp, fp, #28
   156d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156dc:	mvn	r5, #0
   156e0:	b	156d0 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   156e4:	ldr	r1, [sp, #8]
   156e8:	cmp	r7, r1
   156ec:	ldrne	r0, [r8, #12]
   156f0:	strne	r0, [r7]
   156f4:	ldrne	r0, [r1]
   156f8:	strne	r0, [r8, #12]
   156fc:	strne	r6, [r1]
   15700:	ldr	r5, [r8]
   15704:	b	156d0 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15708:	push	{r4, r5, fp, lr}
   1570c:	add	fp, sp, #8
   15710:	mov	r4, r1
   15714:	mov	r5, r0
   15718:	ldr	r0, [r0, #116]	; 0x74
   1571c:	cmp	r0, #0
   15720:	bne	1573c <flatcc_builder_create_cached_vtable@@Base+0x228>
   15724:	mov	r0, r5
   15728:	bl	16e68 <flatcc_builder_get_emit_context@@Base+0x80>
   1572c:	mov	r1, r0
   15730:	mov	r0, #0
   15734:	cmp	r1, #0
   15738:	popne	{r4, r5, fp, pc}
   1573c:	ldr	r0, [r5, #92]	; 0x5c
   15740:	ldr	r1, [r5, #116]	; 0x74
   15744:	rsb	r1, r1, #32
   15748:	lsr	r1, r4, r1
   1574c:	add	r0, r0, r1, lsl #2
   15750:	pop	{r4, r5, fp, pc}

00015754 <flatcc_builder_create_table@@Base>:
   15754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15758:	add	fp, sp, #28
   1575c:	sub	sp, sp, #84	; 0x54
   15760:	strh	r3, [fp, #-30]	; 0xffffffe2
   15764:	ldr	r4, [fp, #12]
   15768:	cmn	r4, #1
   1576c:	ble	1589c <flatcc_builder_create_table@@Base+0x148>
   15770:	ldr	r8, [fp, #16]
   15774:	tst	r8, #1
   15778:	beq	158bc <flatcc_builder_create_table@@Base+0x168>
   1577c:	mov	sl, r2
   15780:	mov	r6, r1
   15784:	mov	r5, r0
   15788:	sub	r0, fp, #30
   1578c:	mov	r1, #4
   15790:	bl	150f4 <flatcc_builder_start_vector@@Base+0x80>
   15794:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   15798:	mov	r0, r5
   1579c:	mov	r1, r7
   157a0:	bl	14584 <flatcc_builder_create_buffer@@Base+0x1d0>
   157a4:	mov	r0, r5
   157a8:	mov	r1, sl
   157ac:	mov	r2, r7
   157b0:	bl	14308 <flatcc_builder_embed_buffer@@Base+0x1c8>
   157b4:	mov	r9, r0
   157b8:	mvn	r0, #3
   157bc:	sub	r0, r0, sl
   157c0:	sub	r0, r0, r9
   157c4:	str	r5, [sp]
   157c8:	ldr	r1, [r5, #136]	; 0x88
   157cc:	add	r5, r0, r1
   157d0:	rsb	r0, r8, #1
   157d4:	add	r0, r0, r5
   157d8:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   157dc:	str	r0, [fp, #-36]	; 0xffffffdc
   157e0:	cmp	r4, #1
   157e4:	blt	15814 <flatcc_builder_create_table@@Base+0xc0>
   157e8:	mvn	r0, #3
   157ec:	ldr	r7, [fp, #8]
   157f0:	sub	r5, r0, r5
   157f4:	ldrh	r8, [r7], #2
   157f8:	ldr	r0, [r8, r6]
   157fc:	add	r0, r5, r0
   15800:	sub	r0, r0, r8
   15804:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   15808:	str	r0, [r8, r6]
   1580c:	subs	r4, r4, #1
   15810:	bne	157f4 <flatcc_builder_create_table@@Base+0xa0>
   15814:	sub	r0, fp, #36	; 0x24
   15818:	str	r0, [sp, #12]
   1581c:	mov	r0, #4
   15820:	str	r0, [sp, #4]
   15824:	str	r0, [sp, #16]
   15828:	mov	r0, #1
   1582c:	str	r0, [sp, #8]
   15830:	cmp	sl, #0
   15834:	beq	15850 <flatcc_builder_create_table@@Base+0xfc>
   15838:	str	r6, [sp, #20]
   1583c:	str	sl, [sp, #24]
   15840:	mov	r0, #2
   15844:	str	r0, [sp, #8]
   15848:	add	r0, sl, #4
   1584c:	str	r0, [sp, #4]
   15850:	cmp	r9, #0
   15854:	ldr	r0, [sp]
   15858:	beq	1588c <flatcc_builder_create_table@@Base+0x138>
   1585c:	ldr	r2, [sp, #4]
   15860:	ldr	r1, [sp, #8]
   15864:	add	r2, r2, r9
   15868:	str	r2, [sp, #4]
   1586c:	add	r2, sp, #4
   15870:	add	r3, r2, r1, lsl #3
   15874:	movw	r2, #32464	; 0x7ed0
   15878:	movt	r2, #1
   1587c:	str	r2, [r3, #8]
   15880:	str	r9, [r3, #12]
   15884:	add	r1, r1, #1
   15888:	str	r1, [sp, #8]
   1588c:	add	r1, sp, #4
   15890:	bl	14320 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15894:	sub	sp, fp, #28
   15898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1589c:	movw	r0, #34878	; 0x883e
   158a0:	movt	r0, #1
   158a4:	movw	r1, #32994	; 0x80e2
   158a8:	movt	r1, #1
   158ac:	movw	r3, #34896	; 0x8850
   158b0:	movt	r3, #1
   158b4:	movw	r2, #1237	; 0x4d5
   158b8:	bl	12418 <__assert_fail@plt>
   158bc:	movw	r0, #35052	; 0x88ec
   158c0:	movt	r0, #1
   158c4:	movw	r1, #32994	; 0x80e2
   158c8:	movt	r1, #1
   158cc:	movw	r3, #34896	; 0x8850
   158d0:	movt	r3, #1
   158d4:	movw	r2, #1243	; 0x4db
   158d8:	bl	12418 <__assert_fail@plt>

000158dc <flatcc_builder_check_required_field@@Base>:
   158dc:	ldr	r2, [r0, #32]
   158e0:	ldrh	r2, [r2, #14]
   158e4:	cmp	r2, #3
   158e8:	bne	15918 <flatcc_builder_check_required_field@@Base+0x3c>
   158ec:	ldrh	r3, [r0, #8]
   158f0:	mov	r2, #0
   158f4:	cmp	r3, r1
   158f8:	bls	15910 <flatcc_builder_check_required_field@@Base+0x34>
   158fc:	ldr	r0, [r0, #4]
   15900:	add	r0, r0, r1, lsl #1
   15904:	ldrh	r2, [r0]
   15908:	cmp	r2, #0
   1590c:	movwne	r2, #1
   15910:	mov	r0, r2
   15914:	bx	lr
   15918:	push	{fp, lr}
   1591c:	mov	fp, sp
   15920:	movw	r0, #35063	; 0x88f7
   15924:	movt	r0, #1
   15928:	movw	r1, #32994	; 0x80e2
   1592c:	movt	r1, #1
   15930:	movw	r3, #35106	; 0x8922
   15934:	movt	r3, #1
   15938:	movw	r2, #1272	; 0x4f8
   1593c:	bl	12418 <__assert_fail@plt>

00015940 <flatcc_builder_check_union_field@@Base>:
   15940:	mov	r2, r0
   15944:	ldr	r0, [r0, #32]
   15948:	ldrh	r0, [r0, #14]
   1594c:	cmp	r0, #3
   15950:	bne	159b0 <flatcc_builder_check_union_field@@Base+0x70>
   15954:	mov	r0, #0
   15958:	cmp	r1, #0
   1595c:	ldrhne	r3, [r2, #8]
   15960:	cmpne	r3, r1
   15964:	bhi	1596c <flatcc_builder_check_union_field@@Base+0x2c>
   15968:	bx	lr
   1596c:	ldr	r0, [r2, #4]
   15970:	add	r0, r0, r1, lsl #1
   15974:	ldrh	r1, [r0, #-2]
   15978:	cmp	r1, #0
   1597c:	beq	159a0 <flatcc_builder_check_union_field@@Base+0x60>
   15980:	ldr	r2, [r2, #16]
   15984:	ldrb	r1, [r2, r1]
   15988:	ldrh	r0, [r0]
   1598c:	cmp	r1, #0
   15990:	beq	159a4 <flatcc_builder_check_union_field@@Base+0x64>
   15994:	cmp	r0, #0
   15998:	movwne	r0, #1
   1599c:	bx	lr
   159a0:	ldrh	r0, [r0]
   159a4:	clz	r0, r0
   159a8:	lsr	r0, r0, #5
   159ac:	bx	lr
   159b0:	push	{fp, lr}
   159b4:	mov	fp, sp
   159b8:	movw	r0, #35063	; 0x88f7
   159bc:	movt	r0, #1
   159c0:	movw	r1, #32994	; 0x80e2
   159c4:	movt	r1, #1
   159c8:	movw	r3, #35189	; 0x8975
   159cc:	movt	r3, #1
   159d0:	movw	r2, #1279	; 0x4ff
   159d4:	bl	12418 <__assert_fail@plt>

000159d8 <flatcc_builder_check_required@@Base>:
   159d8:	push	{fp, lr}
   159dc:	mov	fp, sp
   159e0:	mov	r3, r0
   159e4:	ldr	r0, [r0, #32]
   159e8:	ldrh	r0, [r0, #14]
   159ec:	cmp	r0, #3
   159f0:	bne	15a48 <flatcc_builder_check_required@@Base+0x70>
   159f4:	ldrh	ip, [r3, #8]
   159f8:	mov	r0, #0
   159fc:	cmp	ip, r2
   15a00:	movge	r0, #1
   15a04:	cmpge	r2, #1
   15a08:	bge	15a10 <flatcc_builder_check_required@@Base+0x38>
   15a0c:	pop	{fp, pc}
   15a10:	ldr	ip, [r3, #4]
   15a14:	mov	lr, #0
   15a18:	b	15a2c <flatcc_builder_check_required@@Base+0x54>
   15a1c:	add	lr, lr, #1
   15a20:	add	r1, r1, #2
   15a24:	cmp	lr, r2
   15a28:	popge	{fp, pc}
   15a2c:	ldrh	r3, [r1]
   15a30:	add	r3, ip, r3, lsl #1
   15a34:	ldrh	r3, [r3]
   15a38:	cmp	r3, #0
   15a3c:	bne	15a1c <flatcc_builder_check_required@@Base+0x44>
   15a40:	mov	r0, #0
   15a44:	pop	{fp, pc}
   15a48:	movw	r0, #35063	; 0x88f7
   15a4c:	movt	r0, #1
   15a50:	movw	r1, #32994	; 0x80e2
   15a54:	movt	r1, #1
   15a58:	movw	r3, #35269	; 0x89c5
   15a5c:	movt	r3, #1
   15a60:	movw	r2, #1297	; 0x511
   15a64:	bl	12418 <__assert_fail@plt>

00015a68 <flatcc_builder_end_table@@Base>:
   15a68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a6c:	add	fp, sp, #24
   15a70:	sub	sp, sp, #16
   15a74:	mov	r4, r0
   15a78:	ldr	r0, [r0, #32]
   15a7c:	ldrh	r0, [r0, #14]
   15a80:	cmp	r0, #3
   15a84:	bne	15b94 <flatcc_builder_end_table@@Base+0x12c>
   15a88:	ldrh	r0, [r4, #8]
   15a8c:	mov	r1, #4
   15a90:	add	r0, r1, r0, lsl #1
   15a94:	ldr	r6, [r4, #4]
   15a98:	strh	r0, [r6, #-4]!
   15a9c:	ldrh	r1, [r4, #20]
   15aa0:	add	r1, r1, #4
   15aa4:	strh	r1, [r6, #2]
   15aa8:	uxth	r5, r0
   15aac:	ldr	r0, [r4, #12]
   15ab0:	eor	r0, r0, r5
   15ab4:	movw	r2, #31153	; 0x79b1
   15ab8:	movt	r2, #40503	; 0x9e37
   15abc:	mul	r0, r0, r2
   15ac0:	uxth	r1, r1
   15ac4:	eor	r0, r0, r1
   15ac8:	mul	r3, r0, r2
   15acc:	str	r3, [r4, #12]
   15ad0:	mov	r0, r4
   15ad4:	mov	r1, r6
   15ad8:	mov	r2, r5
   15adc:	bl	15514 <flatcc_builder_create_cached_vtable@@Base>
   15ae0:	cmp	r0, #0
   15ae4:	beq	15b84 <flatcc_builder_end_table@@Base+0x11c>
   15ae8:	mov	r7, r0
   15aec:	mov	r8, #0
   15af0:	mov	r0, r6
   15af4:	mov	r1, #0
   15af8:	mov	r2, r5
   15afc:	bl	123f4 <memset@plt>
   15b00:	ldrh	r3, [r4, #130]	; 0x82
   15b04:	ldr	r0, [r4, #76]	; 0x4c
   15b08:	ldr	r6, [r4]
   15b0c:	ldr	r1, [r4, #16]
   15b10:	ldr	r2, [r4, #20]
   15b14:	ldr	r5, [r4, #32]
   15b18:	ldr	r5, [r5, #20]
   15b1c:	add	r0, r0, r5
   15b20:	sub	r6, r6, r0
   15b24:	asr	r6, r6, #1
   15b28:	stm	sp, {r0, r6, r7}
   15b2c:	mov	r0, r4
   15b30:	bl	15754 <flatcc_builder_create_table@@Base>
   15b34:	cmp	r0, #0
   15b38:	beq	15b88 <flatcc_builder_end_table@@Base+0x120>
   15b3c:	mov	r5, r0
   15b40:	ldr	r0, [r4, #32]
   15b44:	ldr	r1, [r4, #52]	; 0x34
   15b48:	ldr	r2, [r4, #76]	; 0x4c
   15b4c:	ldr	r3, [r0, #24]
   15b50:	str	r3, [r4, #12]
   15b54:	ldrh	r3, [r0, #28]
   15b58:	strh	r3, [r4, #8]
   15b5c:	ldr	r3, [r0, #16]
   15b60:	add	r1, r1, r3
   15b64:	str	r1, [r4, #4]
   15b68:	ldr	r0, [r0, #20]
   15b6c:	add	r0, r2, r0
   15b70:	str	r0, [r4]
   15b74:	mov	r0, r4
   15b78:	bl	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   15b7c:	mov	r8, r5
   15b80:	b	15b88 <flatcc_builder_end_table@@Base+0x120>
   15b84:	mov	r8, #0
   15b88:	mov	r0, r8
   15b8c:	sub	sp, fp, #24
   15b90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b94:	movw	r0, #35063	; 0x88f7
   15b98:	movt	r0, #1
   15b9c:	movw	r1, #32994	; 0x80e2
   15ba0:	movt	r1, #1
   15ba4:	movw	r3, #35359	; 0x8a1f
   15ba8:	movt	r3, #1
   15bac:	movw	r2, #1317	; 0x525
   15bb0:	bl	12418 <__assert_fail@plt>

00015bb4 <flatcc_builder_create_vector@@Base>:
   15bb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15bb8:	add	fp, sp, #24
   15bbc:	sub	sp, sp, #80	; 0x50
   15bc0:	mov	r4, r0
   15bc4:	ldr	r0, [fp, #8]
   15bc8:	strh	r0, [fp, #-26]	; 0xffffffe6
   15bcc:	ldr	r0, [fp, #12]
   15bd0:	cmp	r2, r0
   15bd4:	bhi	15ca4 <flatcc_builder_create_vector@@Base+0xf0>
   15bd8:	mov	r6, r3
   15bdc:	mov	r7, r2
   15be0:	mov	r8, r1
   15be4:	sub	r0, fp, #26
   15be8:	mov	r9, #4
   15bec:	mov	r1, #4
   15bf0:	bl	150f4 <flatcc_builder_start_vector@@Base+0x80>
   15bf4:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   15bf8:	mov	r0, r4
   15bfc:	mov	r1, r5
   15c00:	bl	14584 <flatcc_builder_create_buffer@@Base+0x1d0>
   15c04:	mov	r0, r7
   15c08:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   15c0c:	str	r7, [fp, #-32]	; 0xffffffe0
   15c10:	mul	r6, r6, r7
   15c14:	mov	r0, r4
   15c18:	mov	r1, r6
   15c1c:	mov	r2, r5
   15c20:	bl	14308 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15c24:	str	r9, [sp]
   15c28:	sub	r1, fp, #32
   15c2c:	str	r1, [sp, #8]
   15c30:	str	r9, [sp, #12]
   15c34:	mov	r1, #1
   15c38:	str	r1, [sp, #4]
   15c3c:	cmp	r6, #0
   15c40:	beq	15c5c <flatcc_builder_create_vector@@Base+0xa8>
   15c44:	str	r8, [sp, #16]
   15c48:	str	r6, [sp, #20]
   15c4c:	mov	r1, #2
   15c50:	str	r1, [sp, #4]
   15c54:	add	r1, r6, #4
   15c58:	str	r1, [sp]
   15c5c:	cmp	r0, #0
   15c60:	beq	15c90 <flatcc_builder_create_vector@@Base+0xdc>
   15c64:	ldm	sp, {r1, r2}
   15c68:	add	r1, r1, r0
   15c6c:	str	r1, [sp]
   15c70:	mov	r1, sp
   15c74:	add	r1, r1, r2, lsl #3
   15c78:	movw	r3, #32464	; 0x7ed0
   15c7c:	movt	r3, #1
   15c80:	str	r3, [r1, #8]
   15c84:	str	r0, [r1, #12]
   15c88:	add	r0, r2, #1
   15c8c:	str	r0, [sp, #4]
   15c90:	mov	r1, sp
   15c94:	mov	r0, r4
   15c98:	bl	14320 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15c9c:	sub	sp, fp, #24
   15ca0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ca4:	movw	r0, #35425	; 0x8a61
   15ca8:	movt	r0, #1
   15cac:	movw	r1, #32994	; 0x80e2
   15cb0:	movt	r1, #1
   15cb4:	movw	r3, #35444	; 0x8a74
   15cb8:	movt	r3, #1
   15cbc:	movw	r2, #1365	; 0x555
   15cc0:	bl	12418 <__assert_fail@plt>

00015cc4 <flatcc_builder_end_vector@@Base>:
   15cc4:	push	{r4, r5, fp, lr}
   15cc8:	add	fp, sp, #8
   15ccc:	sub	sp, sp, #8
   15cd0:	mov	r4, r0
   15cd4:	ldr	r0, [r0, #32]
   15cd8:	ldrh	r1, [r0, #14]
   15cdc:	cmp	r1, #4
   15ce0:	bne	15d24 <flatcc_builder_end_vector@@Base+0x60>
   15ce4:	ldr	r1, [r4, #16]
   15ce8:	ldrh	r5, [r4, #130]	; 0x82
   15cec:	ldr	r3, [r0, #16]
   15cf0:	ldr	r2, [r0, #20]
   15cf4:	ldr	r0, [r0, #24]
   15cf8:	str	r5, [sp]
   15cfc:	str	r0, [sp, #4]
   15d00:	mov	r0, r4
   15d04:	bl	15bb4 <flatcc_builder_create_vector@@Base>
   15d08:	mov	r5, r0
   15d0c:	cmp	r0, #0
   15d10:	movne	r0, r4
   15d14:	blne	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   15d18:	mov	r0, r5
   15d1c:	sub	sp, fp, #8
   15d20:	pop	{r4, r5, fp, pc}
   15d24:	movw	r0, #33797	; 0x8405
   15d28:	movt	r0, #1
   15d2c:	movw	r1, #32994	; 0x80e2
   15d30:	movt	r1, #1
   15d34:	movw	r3, #35562	; 0x8aea
   15d38:	movt	r3, #1
   15d3c:	movw	r2, #1400	; 0x578
   15d40:	bl	12418 <__assert_fail@plt>

00015d44 <flatcc_builder_vector_count@@Base>:
   15d44:	ldr	r0, [r0, #32]
   15d48:	ldr	r0, [r0, #20]
   15d4c:	bx	lr

00015d50 <flatcc_builder_vector_edit@@Base>:
   15d50:	ldr	r0, [r0, #16]
   15d54:	bx	lr

00015d58 <flatcc_builder_create_offset_vector_direct@@Base>:
   15d58:	mov	r3, #0
   15d5c:	b	15d60 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15d60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15d64:	add	fp, sp, #24
   15d68:	sub	sp, sp, #80	; 0x50
   15d6c:	mov	r8, r0
   15d70:	mov	r0, #0
   15d74:	cmn	r2, #-1073741823	; 0xc0000001
   15d78:	bhi	15ea8 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   15d7c:	mov	r5, r3
   15d80:	mov	r9, r2
   15d84:	mov	r7, r1
   15d88:	mov	r6, #4
   15d8c:	mov	r0, r8
   15d90:	mov	r1, #4
   15d94:	bl	14584 <flatcc_builder_create_buffer@@Base+0x1d0>
   15d98:	mov	r0, r9
   15d9c:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   15da0:	str	r9, [fp, #-28]	; 0xffffffe4
   15da4:	lsl	r4, r9, #2
   15da8:	mov	r0, r8
   15dac:	mov	r1, r4
   15db0:	mov	r2, #4
   15db4:	bl	14308 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15db8:	str	r6, [sp, #4]
   15dbc:	sub	r1, fp, #28
   15dc0:	str	r1, [sp, #12]
   15dc4:	str	r6, [sp, #16]
   15dc8:	mov	r1, #1
   15dcc:	str	r1, [sp, #8]
   15dd0:	mov	r1, #0
   15dd4:	cmp	r1, r9, lsl #2
   15dd8:	beq	15df4 <flatcc_builder_create_offset_vector_direct@@Base+0x9c>
   15ddc:	str	r7, [sp, #20]
   15de0:	str	r4, [sp, #24]
   15de4:	mov	r1, #2
   15de8:	str	r1, [sp, #8]
   15dec:	add	r1, r4, #4
   15df0:	str	r1, [sp, #4]
   15df4:	cmp	r0, #0
   15df8:	beq	15e28 <flatcc_builder_create_offset_vector_direct@@Base+0xd0>
   15dfc:	ldmib	sp, {r1, r2}
   15e00:	add	r1, r1, r0
   15e04:	str	r1, [sp, #4]
   15e08:	add	r1, sp, #4
   15e0c:	add	r1, r1, r2, lsl #3
   15e10:	movw	r3, #32464	; 0x7ed0
   15e14:	movt	r3, #1
   15e18:	str	r3, [r1, #8]
   15e1c:	str	r0, [r1, #12]
   15e20:	add	r0, r2, #1
   15e24:	str	r0, [sp, #8]
   15e28:	cmp	r9, #0
   15e2c:	beq	15e9c <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   15e30:	ldr	r0, [r8, #136]	; 0x88
   15e34:	mvn	r1, #3
   15e38:	sub	r0, r1, r0
   15e3c:	ldr	r1, [sp, #4]
   15e40:	add	r4, r0, r1
   15e44:	mov	r6, #0
   15e48:	ldr	r0, [r7, r6, lsl #2]
   15e4c:	cmp	r0, #0
   15e50:	beq	15e78 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15e54:	add	r0, r4, r0
   15e58:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   15e5c:	str	r0, [r7, r6, lsl #2]
   15e60:	cmp	r5, #0
   15e64:	beq	15e8c <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   15e68:	ldrb	r0, [r5, r6]
   15e6c:	cmp	r0, #0
   15e70:	bne	15e8c <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   15e74:	b	15eb0 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   15e78:	cmp	r5, #0
   15e7c:	beq	15ed0 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   15e80:	ldrb	r0, [r5, r6]
   15e84:	cmp	r0, #0
   15e88:	bne	15ef0 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   15e8c:	sub	r4, r4, #4
   15e90:	add	r6, r6, #1
   15e94:	cmp	r6, r9
   15e98:	bcc	15e48 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   15e9c:	add	r1, sp, #4
   15ea0:	mov	r0, r8
   15ea4:	bl	14320 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15ea8:	sub	sp, fp, #24
   15eac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15eb0:	movw	r0, #37500	; 0x927c
   15eb4:	movt	r0, #1
   15eb8:	movw	r1, #32994	; 0x80e2
   15ebc:	movt	r1, #1
   15ec0:	movw	r3, #37514	; 0x928a
   15ec4:	movt	r3, #1
   15ec8:	movw	r2, #1457	; 0x5b1
   15ecc:	bl	12418 <__assert_fail@plt>
   15ed0:	movw	r0, #37512	; 0x9288
   15ed4:	movt	r0, #1
   15ed8:	movw	r1, #32994	; 0x80e2
   15edc:	movt	r1, #1
   15ee0:	movw	r3, #37514	; 0x928a
   15ee4:	movt	r3, #1
   15ee8:	movw	r2, #1463	; 0x5b7
   15eec:	bl	12418 <__assert_fail@plt>
   15ef0:	movw	r0, #37645	; 0x930d
   15ef4:	movt	r0, #1
   15ef8:	movw	r1, #32994	; 0x80e2
   15efc:	movt	r1, #1
   15f00:	movw	r3, #37514	; 0x928a
   15f04:	movt	r3, #1
   15f08:	movw	r2, #1461	; 0x5b5
   15f0c:	bl	12418 <__assert_fail@plt>

00015f10 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15f10:	push	{r4, r5, fp, lr}
   15f14:	add	fp, sp, #8
   15f18:	mov	r3, r1
   15f1c:	mov	r4, r0
   15f20:	ldr	r0, [r0, #32]
   15f24:	ldrh	r1, [r0, #14]
   15f28:	cmp	r1, #5
   15f2c:	bne	15f58 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   15f30:	ldr	r2, [r0, #20]
   15f34:	ldr	r1, [r4, #16]
   15f38:	mov	r0, r4
   15f3c:	bl	15d60 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15f40:	mov	r5, r0
   15f44:	cmp	r0, #0
   15f48:	movne	r0, r4
   15f4c:	blne	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   15f50:	mov	r0, r5
   15f54:	pop	{r4, r5, fp, pc}
   15f58:	movw	r0, #34046	; 0x84fe
   15f5c:	movt	r0, #1
   15f60:	movw	r1, #32994	; 0x80e2
   15f64:	movt	r1, #1
   15f68:	movw	r3, #35703	; 0x8b77
   15f6c:	movt	r3, #1
   15f70:	movw	r2, #1493	; 0x5d5
   15f74:	bl	12418 <__assert_fail@plt>

00015f78 <flatcc_builder_offset_vector_edit@@Base>:
   15f78:	ldr	r0, [r0, #16]
   15f7c:	bx	lr

00015f80 <flatcc_builder_offset_vector_count@@Base>:
   15f80:	ldr	r0, [r0, #32]
   15f84:	ldr	r0, [r0, #20]
   15f88:	bx	lr

00015f8c <flatcc_builder_table_add_union@@Base>:
   15f8c:	push	{r4, r5, r6, r7, fp, lr}
   15f90:	add	fp, sp, #16
   15f94:	mov	r5, r0
   15f98:	ldr	r0, [r0, #32]
   15f9c:	ldrh	r0, [r0, #14]
   15fa0:	cmp	r0, #3
   15fa4:	bne	16018 <flatcc_builder_table_add_union@@Base+0x8c>
   15fa8:	mov	r7, r3
   15fac:	mov	r6, r1
   15fb0:	uxtb	r4, r2
   15fb4:	cmp	r3, #0
   15fb8:	beq	15fc4 <flatcc_builder_table_add_union@@Base+0x38>
   15fbc:	cmp	r4, #0
   15fc0:	beq	16038 <flatcc_builder_table_add_union@@Base+0xac>
   15fc4:	cmp	r7, #0
   15fc8:	beq	15fe4 <flatcc_builder_table_add_union@@Base+0x58>
   15fcc:	mov	r0, r5
   15fd0:	mov	r1, r6
   15fd4:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   15fd8:	cmp	r0, #0
   15fdc:	beq	16078 <flatcc_builder_table_add_union@@Base+0xec>
   15fe0:	str	r7, [r0]
   15fe4:	sub	r1, r6, #1
   15fe8:	mov	r0, r5
   15fec:	mov	r2, #1
   15ff0:	mov	r3, #1
   15ff4:	bl	1615c <flatcc_builder_table_add@@Base>
   15ff8:	cmp	r0, #0
   15ffc:	beq	16058 <flatcc_builder_table_add_union@@Base+0xcc>
   16000:	mov	r5, r0
   16004:	mov	r0, r4
   16008:	bl	1623c <flatcc_builder_table_add@@Base+0xe0>
   1600c:	strb	r4, [r5]
   16010:	mov	r0, #0
   16014:	pop	{r4, r5, r6, r7, fp, pc}
   16018:	movw	r0, #35063	; 0x88f7
   1601c:	movt	r0, #1
   16020:	movw	r1, #32994	; 0x80e2
   16024:	movt	r1, #1
   16028:	movw	r3, #35817	; 0x8be9
   1602c:	movt	r3, #1
   16030:	movw	r2, #1518	; 0x5ee
   16034:	bl	12418 <__assert_fail@plt>
   16038:	movw	r0, #35905	; 0x8c41
   1603c:	movt	r0, #1
   16040:	movw	r1, #32994	; 0x80e2
   16044:	movt	r1, #1
   16048:	movw	r3, #35817	; 0x8be9
   1604c:	movt	r3, #1
   16050:	movw	r2, #1519	; 0x5ef
   16054:	bl	12418 <__assert_fail@plt>
   16058:	movw	r0, #35949	; 0x8c6d
   1605c:	movt	r0, #1
   16060:	movw	r1, #32994	; 0x80e2
   16064:	movt	r1, #1
   16068:	movw	r3, #35817	; 0x8be9
   1606c:	movt	r3, #1
   16070:	movw	r2, #1526	; 0x5f6
   16074:	bl	12418 <__assert_fail@plt>
   16078:	movw	r0, #35939	; 0x8c63
   1607c:	movt	r0, #1
   16080:	movw	r1, #32994	; 0x80e2
   16084:	movt	r1, #1
   16088:	movw	r3, #35817	; 0x8be9
   1608c:	movt	r3, #1
   16090:	movw	r2, #1522	; 0x5f2
   16094:	bl	12418 <__assert_fail@plt>

00016098 <flatcc_builder_table_add_offset@@Base>:
   16098:	push	{fp, lr}
   1609c:	mov	fp, sp
   160a0:	ldr	r2, [r0, #32]
   160a4:	ldrh	r2, [r2, #14]
   160a8:	cmp	r2, #3
   160ac:	bne	160fc <flatcc_builder_table_add_offset@@Base+0x64>
   160b0:	movw	r2, #32765	; 0x7ffd
   160b4:	cmp	r1, r2
   160b8:	bcs	1611c <flatcc_builder_table_add_offset@@Base+0x84>
   160bc:	ldr	r2, [r0, #4]
   160c0:	add	r2, r2, r1, lsl #1
   160c4:	ldrh	r2, [r2]
   160c8:	cmp	r2, #0
   160cc:	bne	1613c <flatcc_builder_table_add_offset@@Base+0xa4>
   160d0:	ldr	r2, [r0, #12]
   160d4:	eor	r2, r2, r1
   160d8:	movw	r3, #31153	; 0x79b1
   160dc:	movt	r3, #40503	; 0x9e37
   160e0:	mul	r2, r2, r3
   160e4:	eor	r2, r2, #4
   160e8:	mul	r2, r2, r3
   160ec:	str	r2, [r0, #12]
   160f0:	uxth	r1, r1
   160f4:	pop	{fp, lr}
   160f8:	b	16a68 <flatcc_builder_table_add_copy@@Base+0x40>
   160fc:	movw	r0, #35063	; 0x88f7
   16100:	movt	r0, #1
   16104:	movw	r1, #32994	; 0x80e2
   16108:	movt	r1, #1
   1610c:	movw	r3, #36843	; 0x8feb
   16110:	movt	r3, #1
   16114:	movw	r2, #1811	; 0x713
   16118:	bl	12418 <__assert_fail@plt>
   1611c:	movw	r0, #36715	; 0x8f6b
   16120:	movt	r0, #1
   16124:	movw	r1, #32994	; 0x80e2
   16128:	movt	r1, #1
   1612c:	movw	r3, #36843	; 0x8feb
   16130:	movt	r3, #1
   16134:	movw	r2, #1812	; 0x714
   16138:	bl	12418 <__assert_fail@plt>
   1613c:	movw	r0, #37512	; 0x9288
   16140:	movt	r0, #1
   16144:	movw	r1, #32994	; 0x80e2
   16148:	movt	r1, #1
   1614c:	movw	r3, #36843	; 0x8feb
   16150:	movt	r3, #1
   16154:	movw	r2, #1819	; 0x71b
   16158:	bl	12418 <__assert_fail@plt>

0001615c <flatcc_builder_table_add@@Base>:
   1615c:	push	{fp, lr}
   16160:	mov	fp, sp
   16164:	mov	ip, r3
   16168:	ldr	r3, [r0, #32]
   1616c:	ldrh	r3, [r3, #14]
   16170:	cmp	r3, #3
   16174:	bne	161dc <flatcc_builder_table_add@@Base+0x80>
   16178:	movw	r3, #32765	; 0x7ffd
   1617c:	cmp	r1, r3
   16180:	bcs	161fc <flatcc_builder_table_add@@Base+0xa0>
   16184:	mov	lr, r2
   16188:	ldrh	r3, [r0, #130]	; 0x82
   1618c:	cmp	r3, ip
   16190:	strhcc	ip, [r0, #130]	; 0x82
   16194:	ldr	r3, [r0, #4]
   16198:	add	r3, r3, r1, lsl #1
   1619c:	ldrh	r3, [r3]
   161a0:	cmp	r3, #0
   161a4:	bne	1621c <flatcc_builder_table_add@@Base+0xc0>
   161a8:	ldr	r3, [r0, #12]
   161ac:	eor	r3, r3, r1
   161b0:	movw	r2, #31153	; 0x79b1
   161b4:	movt	r2, #40503	; 0x9e37
   161b8:	mul	r3, r3, r2
   161bc:	eor	r3, r3, lr
   161c0:	mul	r2, r3, r2
   161c4:	str	r2, [r0, #12]
   161c8:	uxth	r3, r1
   161cc:	mov	r1, lr
   161d0:	mov	r2, ip
   161d4:	pop	{fp, lr}
   161d8:	b	1695c <flatcc_builder_string_len@@Base+0xc>
   161dc:	movw	r0, #35063	; 0x88f7
   161e0:	movt	r0, #1
   161e4:	movw	r1, #32994	; 0x80e2
   161e8:	movt	r1, #1
   161ec:	movw	r3, #36641	; 0x8f21
   161f0:	movt	r3, #1
   161f4:	movw	r2, #1773	; 0x6ed
   161f8:	bl	12418 <__assert_fail@plt>
   161fc:	movw	r0, #36715	; 0x8f6b
   16200:	movt	r0, #1
   16204:	movw	r1, #32994	; 0x80e2
   16208:	movt	r1, #1
   1620c:	movw	r3, #36641	; 0x8f21
   16210:	movt	r3, #1
   16214:	movw	r2, #1774	; 0x6ee
   16218:	bl	12418 <__assert_fail@plt>
   1621c:	movw	r0, #37512	; 0x9288
   16220:	movt	r0, #1
   16224:	movw	r1, #32994	; 0x80e2
   16228:	movt	r1, #1
   1622c:	movw	r3, #36641	; 0x8f21
   16230:	movt	r3, #1
   16234:	movw	r2, #1784	; 0x6f8
   16238:	bl	12418 <__assert_fail@plt>
   1623c:	bx	lr

00016240 <flatcc_builder_table_add_union_vector@@Base>:
   16240:	push	{r4, r5, r6, r7, fp, lr}
   16244:	add	fp, sp, #16
   16248:	mov	r6, r0
   1624c:	ldr	r0, [r0, #32]
   16250:	ldrh	r0, [r0, #14]
   16254:	cmp	r0, #3
   16258:	bne	162c0 <flatcc_builder_table_add_union_vector@@Base+0x80>
   1625c:	mov	r4, r3
   16260:	mov	r7, r2
   16264:	mov	r5, r1
   16268:	clz	r0, r3
   1626c:	lsr	r0, r0, #5
   16270:	clz	r1, r2
   16274:	lsr	r1, r1, #5
   16278:	cmp	r1, r0
   1627c:	bne	162e0 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   16280:	cmp	r7, #0
   16284:	beq	162b8 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16288:	sub	r1, r5, #1
   1628c:	mov	r0, r6
   16290:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   16294:	cmp	r0, #0
   16298:	beq	16300 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   1629c:	str	r7, [r0]
   162a0:	mov	r0, r6
   162a4:	mov	r1, r5
   162a8:	bl	16098 <flatcc_builder_table_add_offset@@Base>
   162ac:	cmp	r0, #0
   162b0:	beq	16320 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   162b4:	str	r4, [r0]
   162b8:	mov	r0, #0
   162bc:	pop	{r4, r5, r6, r7, fp, pc}
   162c0:	movw	r0, #35063	; 0x88f7
   162c4:	movt	r0, #1
   162c8:	movw	r1, #32994	; 0x80e2
   162cc:	movt	r1, #1
   162d0:	movw	r3, #35961	; 0x8c79
   162d4:	movt	r3, #1
   162d8:	mov	r2, #1536	; 0x600
   162dc:	bl	12418 <__assert_fail@plt>
   162e0:	movw	r0, #36060	; 0x8cdc
   162e4:	movt	r0, #1
   162e8:	movw	r1, #32994	; 0x80e2
   162ec:	movt	r1, #1
   162f0:	movw	r3, #35961	; 0x8c79
   162f4:	movt	r3, #1
   162f8:	movw	r2, #1537	; 0x601
   162fc:	bl	12418 <__assert_fail@plt>
   16300:	movw	r0, #35939	; 0x8c63
   16304:	movt	r0, #1
   16308:	movw	r1, #32994	; 0x80e2
   1630c:	movt	r1, #1
   16310:	movw	r3, #35961	; 0x8c79
   16314:	movt	r3, #1
   16318:	movw	r2, #1540	; 0x604
   1631c:	bl	12418 <__assert_fail@plt>
   16320:	movw	r0, #35939	; 0x8c63
   16324:	movt	r0, #1
   16328:	movw	r1, #32994	; 0x80e2
   1632c:	movt	r1, #1
   16330:	movw	r3, #35961	; 0x8c79
   16334:	movt	r3, #1
   16338:	movw	r2, #1544	; 0x608
   1633c:	bl	12418 <__assert_fail@plt>

00016340 <flatcc_builder_create_union_vector@@Base>:
   16340:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16344:	add	fp, sp, #24
   16348:	sub	sp, sp, #16
   1634c:	mov	r6, r3
   16350:	mov	r7, r2
   16354:	mov	r4, r1
   16358:	mov	r5, r0
   1635c:	mov	r0, #0
   16360:	str	r0, [r5]
   16364:	str	r0, [r5, #4]
   16368:	mov	r0, r1
   1636c:	bl	15104 <flatcc_builder_start_offset_vector@@Base>
   16370:	cmp	r0, #0
   16374:	beq	16380 <flatcc_builder_create_union_vector@@Base+0x40>
   16378:	sub	sp, fp, #24
   1637c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16380:	mov	r0, r4
   16384:	mov	r1, r6
   16388:	bl	14c50 <flatcc_builder_extend_offset_vector@@Base>
   1638c:	cmp	r0, #0
   16390:	beq	16378 <flatcc_builder_create_union_vector@@Base+0x38>
   16394:	mov	r0, r4
   16398:	mov	r1, r6
   1639c:	bl	149cc <flatcc_builder_start_struct@@Base+0x84>
   163a0:	cmp	r0, #0
   163a4:	beq	16378 <flatcc_builder_create_union_vector@@Base+0x38>
   163a8:	mov	r8, r0
   163ac:	mov	r0, r4
   163b0:	bl	15f78 <flatcc_builder_offset_vector_edit@@Base>
   163b4:	mov	ip, r0
   163b8:	cmp	r6, #0
   163bc:	beq	163ec <flatcc_builder_create_union_vector@@Base+0xac>
   163c0:	add	r0, r7, #4
   163c4:	mov	r1, r6
   163c8:	mov	r2, ip
   163cc:	mov	r7, r8
   163d0:	ldrb	r3, [r0, #-4]
   163d4:	strb	r3, [r7], #1
   163d8:	ldr	r3, [r0]
   163dc:	str	r3, [r2], #4
   163e0:	add	r0, r0, #8
   163e4:	subs	r1, r1, #1
   163e8:	bne	163d0 <flatcc_builder_create_union_vector@@Base+0x90>
   163ec:	str	r6, [sp]
   163f0:	add	r0, sp, #8
   163f4:	mov	r1, r4
   163f8:	mov	r2, r8
   163fc:	mov	r3, ip
   16400:	bl	16420 <flatcc_builder_create_union_vector_direct@@Base>
   16404:	ldr	r0, [sp, #8]
   16408:	ldr	r1, [sp, #12]
   1640c:	stm	r5, {r0, r1}
   16410:	mov	r0, r4
   16414:	bl	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   16418:	sub	sp, fp, #24
   1641c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016420 <flatcc_builder_create_union_vector_direct@@Base>:
   16420:	push	{r4, r5, r6, r7, fp, lr}
   16424:	add	fp, sp, #16
   16428:	sub	sp, sp, #8
   1642c:	mov	r5, r2
   16430:	mov	r6, r1
   16434:	mov	r4, r0
   16438:	mov	r0, #0
   1643c:	str	r0, [r4]
   16440:	str	r0, [r4, #4]
   16444:	ldr	r7, [fp, #8]
   16448:	mov	r0, r1
   1644c:	mov	r1, r3
   16450:	mov	r2, r7
   16454:	mov	r3, r5
   16458:	bl	15d60 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1645c:	str	r0, [r4, #4]
   16460:	cmp	r0, #0
   16464:	beq	16490 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16468:	mvn	r0, #0
   1646c:	mov	r1, #1
   16470:	str	r1, [sp]
   16474:	str	r0, [sp, #4]
   16478:	mov	r0, r6
   1647c:	mov	r1, r5
   16480:	mov	r2, r7
   16484:	mov	r3, #1
   16488:	bl	15bb4 <flatcc_builder_create_vector@@Base>
   1648c:	str	r0, [r4]
   16490:	sub	sp, fp, #16
   16494:	pop	{r4, r5, r6, r7, fp, pc}

00016498 <flatcc_builder_start_union_vector@@Base>:
   16498:	push	{r4, r5, fp, lr}
   1649c:	add	fp, sp, #8
   164a0:	mov	r4, r0
   164a4:	mov	r1, #4
   164a8:	bl	1471c <flatcc_builder_start_buffer@@Base+0xbc>
   164ac:	mvn	r5, #0
   164b0:	cmp	r0, #0
   164b4:	beq	164c0 <flatcc_builder_start_union_vector@@Base+0x28>
   164b8:	mov	r0, r5
   164bc:	pop	{r4, r5, fp, pc}
   164c0:	ldr	r0, [r4, #32]
   164c4:	mov	r1, #8
   164c8:	str	r1, [r0, #16]
   164cc:	ldr	r0, [r4, #32]
   164d0:	mov	r5, #0
   164d4:	str	r5, [r0, #20]
   164d8:	ldr	r0, [r4, #32]
   164dc:	mov	r1, #7
   164e0:	strh	r1, [r0, #14]
   164e4:	mov	r0, r4
   164e8:	mvn	r1, #3
   164ec:	bl	14994 <flatcc_builder_start_struct@@Base+0x4c>
   164f0:	mov	r0, r5
   164f4:	pop	{r4, r5, fp, pc}

000164f8 <flatcc_builder_end_union_vector@@Base>:
   164f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   164fc:	add	fp, sp, #24
   16500:	sub	sp, sp, #16
   16504:	mov	r9, r0
   16508:	mov	r0, #0
   1650c:	str	r0, [r9]
   16510:	str	r0, [r9, #4]
   16514:	ldr	r0, [r1, #32]
   16518:	ldrh	r0, [r0, #14]
   1651c:	cmp	r0, #7
   16520:	bne	165c0 <flatcc_builder_end_union_vector@@Base+0xc8>
   16524:	mov	r4, r1
   16528:	mov	r0, r1
   1652c:	bl	165e0 <flatcc_builder_union_vector_count@@Base>
   16530:	mov	r6, r0
   16534:	add	r1, r0, r0, lsl #2
   16538:	mov	r0, r4
   1653c:	bl	149cc <flatcc_builder_start_struct@@Base+0x84>
   16540:	cmp	r0, #0
   16544:	beq	165b8 <flatcc_builder_end_union_vector@@Base+0xc0>
   16548:	mov	r7, r0
   1654c:	add	r8, r0, r6, lsl #2
   16550:	mov	r0, r4
   16554:	bl	165ec <flatcc_builder_union_vector_edit@@Base>
   16558:	cmp	r6, #0
   1655c:	beq	1658c <flatcc_builder_end_union_vector@@Base+0x94>
   16560:	add	r0, r0, #4
   16564:	mov	r1, r6
   16568:	mov	r2, r7
   1656c:	mov	r3, r8
   16570:	ldrb	r5, [r0, #-4]
   16574:	strb	r5, [r3], #1
   16578:	ldr	r5, [r0]
   1657c:	str	r5, [r2], #4
   16580:	add	r0, r0, #8
   16584:	subs	r1, r1, #1
   16588:	bne	16570 <flatcc_builder_end_union_vector@@Base+0x78>
   1658c:	str	r6, [sp]
   16590:	add	r0, sp, #8
   16594:	mov	r1, r4
   16598:	mov	r2, r8
   1659c:	mov	r3, r7
   165a0:	bl	16420 <flatcc_builder_create_union_vector_direct@@Base>
   165a4:	ldr	r0, [sp, #8]
   165a8:	ldr	r1, [sp, #12]
   165ac:	stm	r9, {r0, r1}
   165b0:	mov	r0, r4
   165b4:	bl	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   165b8:	sub	sp, fp, #24
   165bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   165c0:	movw	r0, #36100	; 0x8d04
   165c4:	movt	r0, #1
   165c8:	movw	r1, #32994	; 0x80e2
   165cc:	movt	r1, #1
   165d0:	movw	r3, #36150	; 0x8d36
   165d4:	movt	r3, #1
   165d8:	movw	r2, #1617	; 0x651
   165dc:	bl	12418 <__assert_fail@plt>

000165e0 <flatcc_builder_union_vector_count@@Base>:
   165e0:	ldr	r0, [r0, #32]
   165e4:	ldr	r0, [r0, #20]
   165e8:	bx	lr

000165ec <flatcc_builder_union_vector_edit@@Base>:
   165ec:	ldr	r0, [r0, #16]
   165f0:	bx	lr

000165f4 <flatcc_builder_extend_union_vector@@Base>:
   165f4:	push	{r4, r5, fp, lr}
   165f8:	add	fp, sp, #8
   165fc:	mov	r5, r1
   16600:	mov	r4, r0
   16604:	mvn	r2, #-536870912	; 0xe0000000
   16608:	bl	14ad0 <flatcc_builder_extend_vector@@Base+0x44>
   1660c:	mov	r1, r0
   16610:	mov	r0, #0
   16614:	cmp	r1, #0
   16618:	popne	{r4, r5, fp, pc}
   1661c:	lsl	r1, r5, #3
   16620:	mov	r0, r4
   16624:	bl	149cc <flatcc_builder_start_struct@@Base+0x84>
   16628:	pop	{r4, r5, fp, pc}

0001662c <flatcc_builder_truncate_union_vector@@Base>:
   1662c:	push	{fp, lr}
   16630:	mov	fp, sp
   16634:	ldr	r2, [r0, #32]
   16638:	ldrh	r3, [r2, #14]
   1663c:	cmp	r3, #7
   16640:	bne	16670 <flatcc_builder_truncate_union_vector@@Base+0x44>
   16644:	ldr	r3, [r2, #20]
   16648:	cmp	r3, r1
   1664c:	bcc	16690 <flatcc_builder_truncate_union_vector@@Base+0x64>
   16650:	sub	r3, r3, r1
   16654:	str	r3, [r2, #20]
   16658:	ldr	r2, [r0, #32]
   1665c:	ldr	r2, [r2, #16]
   16660:	mul	r1, r2, r1
   16664:	bl	14f58 <flatcc_builder_truncate_vector@@Base+0x84>
   16668:	mov	r0, #0
   1666c:	pop	{fp, pc}
   16670:	movw	r0, #36100	; 0x8d04
   16674:	movt	r0, #1
   16678:	movw	r1, #32994	; 0x80e2
   1667c:	movt	r1, #1
   16680:	movw	r3, #36233	; 0x8d89
   16684:	movt	r3, #1
   16688:	movw	r2, #1665	; 0x681
   1668c:	bl	12418 <__assert_fail@plt>
   16690:	movw	r0, #34664	; 0x8768
   16694:	movt	r0, #1
   16698:	movw	r1, #32994	; 0x80e2
   1669c:	movt	r1, #1
   166a0:	movw	r3, #36233	; 0x8d89
   166a4:	movt	r3, #1
   166a8:	movw	r2, #1666	; 0x682
   166ac:	bl	12418 <__assert_fail@plt>

000166b0 <flatcc_builder_union_vector_push@@Base>:
   166b0:	push	{r4, r5, r6, sl, fp, lr}
   166b4:	add	fp, sp, #16
   166b8:	mov	r4, r2
   166bc:	mov	r5, r1
   166c0:	ldr	r1, [r0, #32]
   166c4:	ldrh	r2, [r1, #14]
   166c8:	cmp	r2, #7
   166cc:	bne	16708 <flatcc_builder_union_vector_push@@Base+0x58>
   166d0:	ldr	r2, [r1, #20]
   166d4:	mov	r6, #0
   166d8:	cmn	r2, #-536870911	; 0xe0000001
   166dc:	beq	16700 <flatcc_builder_union_vector_push@@Base+0x50>
   166e0:	add	r2, r2, #1
   166e4:	str	r2, [r1, #20]
   166e8:	mov	r1, #8
   166ec:	bl	149cc <flatcc_builder_start_struct@@Base+0x84>
   166f0:	cmp	r0, #0
   166f4:	strne	r5, [r0]
   166f8:	strne	r4, [r0, #4]
   166fc:	movne	r6, r0
   16700:	mov	r0, r6
   16704:	pop	{r4, r5, r6, sl, fp, pc}
   16708:	movw	r0, #36100	; 0x8d04
   1670c:	movt	r0, #1
   16710:	movw	r1, #32994	; 0x80e2
   16714:	movt	r1, #1
   16718:	movw	r3, #36302	; 0x8dce
   1671c:	movt	r3, #1
   16720:	movw	r2, #1677	; 0x68d
   16724:	bl	12418 <__assert_fail@plt>

00016728 <flatcc_builder_append_union_vector@@Base>:
   16728:	push	{r4, r5, r6, sl, fp, lr}
   1672c:	add	fp, sp, #16
   16730:	mov	r6, r0
   16734:	ldr	r0, [r0, #32]
   16738:	ldrh	r0, [r0, #14]
   1673c:	cmp	r0, #7
   16740:	bne	16780 <flatcc_builder_append_union_vector@@Base+0x58>
   16744:	mov	r5, r2
   16748:	mov	r4, r1
   1674c:	mov	r0, r6
   16750:	mov	r1, r2
   16754:	mvn	r2, #-536870912	; 0xe0000000
   16758:	bl	14ad0 <flatcc_builder_extend_vector@@Base+0x44>
   1675c:	mov	r1, r0
   16760:	mov	r0, #0
   16764:	cmp	r1, #0
   16768:	popne	{r4, r5, r6, sl, fp, pc}
   1676c:	lsl	r2, r5, #3
   16770:	mov	r0, r6
   16774:	mov	r1, r4
   16778:	bl	14b98 <flatcc_builder_vector_push@@Base+0x80>
   1677c:	pop	{r4, r5, r6, sl, fp, pc}
   16780:	movw	r0, #36100	; 0x8d04
   16784:	movt	r0, #1
   16788:	movw	r1, #32994	; 0x80e2
   1678c:	movt	r1, #1
   16790:	movw	r3, #36411	; 0x8e3b
   16794:	movt	r3, #1
   16798:	movw	r2, #1692	; 0x69c
   1679c:	bl	12418 <__assert_fail@plt>

000167a0 <flatcc_builder_create_string@@Base>:
   167a0:	push	{r4, r5, r6, r7, fp, lr}
   167a4:	add	fp, sp, #16
   167a8:	sub	sp, sp, #80	; 0x50
   167ac:	mov	r5, r2
   167b0:	mov	r6, r1
   167b4:	mov	r4, r0
   167b8:	mov	r0, r2
   167bc:	bl	1431c <flatcc_builder_embed_buffer@@Base+0x1dc>
   167c0:	str	r5, [fp, #-20]	; 0xffffffec
   167c4:	add	r1, r5, #1
   167c8:	mov	r7, #4
   167cc:	mov	r0, r4
   167d0:	mov	r2, #4
   167d4:	bl	14308 <flatcc_builder_embed_buffer@@Base+0x1c8>
   167d8:	str	r7, [sp, #4]
   167dc:	sub	r1, fp, #20
   167e0:	str	r1, [sp, #12]
   167e4:	str	r7, [sp, #16]
   167e8:	mov	r1, #1
   167ec:	str	r1, [sp, #8]
   167f0:	add	r0, r0, #1
   167f4:	cmp	r5, #0
   167f8:	beq	16814 <flatcc_builder_create_string@@Base+0x74>
   167fc:	str	r6, [sp, #20]
   16800:	str	r5, [sp, #24]
   16804:	mov	r1, #2
   16808:	str	r1, [sp, #8]
   1680c:	add	r1, r5, #4
   16810:	str	r1, [sp, #4]
   16814:	cmp	r0, #0
   16818:	beq	16848 <flatcc_builder_create_string@@Base+0xa8>
   1681c:	ldmib	sp, {r1, r2}
   16820:	add	r1, r1, r0
   16824:	str	r1, [sp, #4]
   16828:	add	r1, sp, #4
   1682c:	add	r1, r1, r2, lsl #3
   16830:	movw	r3, #32464	; 0x7ed0
   16834:	movt	r3, #1
   16838:	str	r3, [r1, #8]
   1683c:	str	r0, [r1, #12]
   16840:	add	r0, r2, #1
   16844:	str	r0, [sp, #8]
   16848:	add	r1, sp, #4
   1684c:	mov	r0, r4
   16850:	bl	14320 <flatcc_builder_embed_buffer@@Base+0x1e0>
   16854:	sub	sp, fp, #16
   16858:	pop	{r4, r5, r6, r7, fp, pc}

0001685c <flatcc_builder_create_string_str@@Base>:
   1685c:	push	{r4, r5, fp, lr}
   16860:	add	fp, sp, #8
   16864:	mov	r4, r1
   16868:	mov	r5, r0
   1686c:	mov	r0, r1
   16870:	bl	123dc <strlen@plt>
   16874:	mov	r2, r0
   16878:	mov	r0, r5
   1687c:	mov	r1, r4
   16880:	pop	{r4, r5, fp, lr}
   16884:	b	167a0 <flatcc_builder_create_string@@Base>

00016888 <flatcc_builder_create_string_strn@@Base>:
   16888:	push	{r4, r5, fp, lr}
   1688c:	add	fp, sp, #8
   16890:	mov	r4, r1
   16894:	mov	r5, r0
   16898:	mov	r0, r1
   1689c:	mov	r1, r2
   168a0:	bl	14ea8 <flatcc_builder_append_string_strn@@Base+0x30>
   168a4:	mov	r2, r0
   168a8:	mov	r0, r5
   168ac:	mov	r1, r4
   168b0:	pop	{r4, r5, fp, lr}
   168b4:	b	167a0 <flatcc_builder_create_string@@Base>

000168b8 <flatcc_builder_end_string@@Base>:
   168b8:	push	{r4, r5, fp, lr}
   168bc:	add	fp, sp, #8
   168c0:	mov	r4, r0
   168c4:	ldr	r0, [r0, #32]
   168c8:	ldrh	r1, [r0, #14]
   168cc:	cmp	r1, #6
   168d0:	bne	16908 <flatcc_builder_end_string@@Base+0x50>
   168d4:	ldr	r2, [r4, #20]
   168d8:	ldr	r0, [r0, #20]
   168dc:	cmp	r0, r2
   168e0:	bne	16928 <flatcc_builder_end_string@@Base+0x70>
   168e4:	ldr	r1, [r4, #16]
   168e8:	mov	r0, r4
   168ec:	bl	167a0 <flatcc_builder_create_string@@Base>
   168f0:	mov	r5, r0
   168f4:	cmp	r0, #0
   168f8:	movne	r0, r4
   168fc:	blne	148dc <flatcc_builder_end_buffer@@Base+0xc8>
   16900:	mov	r0, r5
   16904:	pop	{r4, r5, fp, pc}
   16908:	movw	r0, #34311	; 0x8607
   1690c:	movt	r0, #1
   16910:	movw	r1, #32994	; 0x80e2
   16914:	movt	r1, #1
   16918:	movw	r3, #36538	; 0x8eba
   1691c:	movt	r3, #1
   16920:	movw	r2, #1732	; 0x6c4
   16924:	bl	12418 <__assert_fail@plt>
   16928:	movw	r0, #36605	; 0x8efd
   1692c:	movt	r0, #1
   16930:	movw	r1, #32994	; 0x80e2
   16934:	movt	r1, #1
   16938:	movw	r3, #36538	; 0x8eba
   1693c:	movt	r3, #1
   16940:	movw	r2, #1733	; 0x6c5
   16944:	bl	12418 <__assert_fail@plt>

00016948 <flatcc_builder_string_edit@@Base>:
   16948:	ldr	r0, [r0, #16]
   1694c:	bx	lr

00016950 <flatcc_builder_string_len@@Base>:
   16950:	ldr	r0, [r0, #32]
   16954:	ldr	r0, [r0, #20]
   16958:	bx	lr
   1695c:	push	{r4, r5, r6, sl, fp, lr}
   16960:	add	fp, sp, #16
   16964:	mov	r5, r3
   16968:	mov	r4, r0
   1696c:	ldr	r0, [r0, #20]
   16970:	ldr	r3, [r4, #24]
   16974:	add	r0, r2, r0
   16978:	sub	r0, r0, #1
   1697c:	rsb	r2, r2, #0
   16980:	and	r6, r0, r2
   16984:	add	r0, r6, r1
   16988:	str	r0, [r4, #20]
   1698c:	cmp	r0, r3
   16990:	bcc	169b4 <flatcc_builder_string_len@@Base+0x64>
   16994:	add	r1, r0, #1
   16998:	mov	r0, r4
   1699c:	movw	r2, #65532	; 0xfffc
   169a0:	bl	16e00 <flatcc_builder_get_emit_context@@Base+0x18>
   169a4:	mov	r1, r0
   169a8:	mov	r0, #0
   169ac:	cmp	r1, #0
   169b0:	popne	{r4, r5, r6, sl, fp, pc}
   169b4:	ldr	r0, [r4, #4]
   169b8:	add	r0, r0, r5, lsl #1
   169bc:	add	r1, r6, #4
   169c0:	strh	r1, [r0]
   169c4:	ldrh	r0, [r4, #8]
   169c8:	cmp	r0, r5
   169cc:	addls	r0, r5, #1
   169d0:	strhls	r0, [r4, #8]
   169d4:	ldr	r0, [r4, #16]
   169d8:	add	r0, r0, r6
   169dc:	pop	{r4, r5, r6, sl, fp, pc}

000169e0 <flatcc_builder_table_edit@@Base>:
   169e0:	ldr	r2, [r0, #32]
   169e4:	ldrh	r2, [r2, #14]
   169e8:	cmp	r2, #3
   169ec:	ldreq	r2, [r0, #16]
   169f0:	ldreq	r0, [r0, #20]
   169f4:	addeq	r0, r2, r0
   169f8:	subeq	r0, r0, r1
   169fc:	bxeq	lr
   16a00:	push	{fp, lr}
   16a04:	mov	fp, sp
   16a08:	movw	r0, #35063	; 0x88f7
   16a0c:	movt	r0, #1
   16a10:	movw	r1, #32994	; 0x80e2
   16a14:	movt	r1, #1
   16a18:	movw	r3, #36783	; 0x8faf
   16a1c:	movt	r3, #1
   16a20:	movw	r2, #1794	; 0x702
   16a24:	bl	12418 <__assert_fail@plt>

00016a28 <flatcc_builder_table_add_copy@@Base>:
   16a28:	push	{r4, r5, r6, sl, fp, lr}
   16a2c:	add	fp, sp, #16
   16a30:	mov	r4, r3
   16a34:	mov	r5, r2
   16a38:	ldr	r3, [fp, #8]
   16a3c:	mov	r2, r4
   16a40:	bl	1615c <flatcc_builder_table_add@@Base>
   16a44:	mov	r6, r0
   16a48:	cmp	r0, #0
   16a4c:	beq	16a60 <flatcc_builder_table_add_copy@@Base+0x38>
   16a50:	mov	r0, r6
   16a54:	mov	r1, r5
   16a58:	mov	r2, r4
   16a5c:	bl	12388 <memcpy@plt>
   16a60:	mov	r0, r6
   16a64:	pop	{r4, r5, r6, sl, fp, pc}
   16a68:	push	{r4, r5, r6, r7, fp, lr}
   16a6c:	add	fp, sp, #16
   16a70:	mov	r5, r1
   16a74:	mov	r4, r0
   16a78:	ldr	r0, [r0, #20]
   16a7c:	ldr	r1, [r4, #24]
   16a80:	add	r0, r0, #3
   16a84:	bic	r7, r0, #3
   16a88:	add	r6, r7, #4
   16a8c:	str	r6, [r4, #20]
   16a90:	cmp	r6, r1
   16a94:	bls	16ab8 <flatcc_builder_table_add_copy@@Base+0x90>
   16a98:	mov	r0, r4
   16a9c:	mov	r1, r6
   16aa0:	movw	r2, #65532	; 0xfffc
   16aa4:	bl	16e00 <flatcc_builder_get_emit_context@@Base+0x18>
   16aa8:	mov	r1, r0
   16aac:	mov	r0, #0
   16ab0:	cmp	r1, #0
   16ab4:	popne	{r4, r5, r6, r7, fp, pc}
   16ab8:	ldr	r0, [r4, #4]
   16abc:	add	r0, r0, r5, lsl #1
   16ac0:	strh	r6, [r0]
   16ac4:	ldrh	r0, [r4, #8]
   16ac8:	cmp	r0, r5
   16acc:	addls	r0, r5, #1
   16ad0:	strhls	r0, [r4, #8]
   16ad4:	ldr	r0, [r4]
   16ad8:	add	r1, r0, #2
   16adc:	str	r1, [r4]
   16ae0:	strh	r7, [r0]
   16ae4:	ldr	r0, [r4, #16]
   16ae8:	add	r0, r0, r7
   16aec:	pop	{r4, r5, r6, r7, fp, pc}

00016af0 <flatcc_builder_push_buffer_alignment@@Base>:
   16af0:	ldrh	r1, [r0, #128]	; 0x80
   16af4:	mov	r2, #4
   16af8:	strh	r2, [r0, #128]	; 0x80
   16afc:	mov	r0, r1
   16b00:	bx	lr

00016b04 <flatcc_builder_pop_buffer_alignment@@Base>:
   16b04:	b	14584 <flatcc_builder_create_buffer@@Base+0x1d0>

00016b08 <flatcc_builder_get_buffer_alignment@@Base>:
   16b08:	ldrh	r0, [r0, #128]	; 0x80
   16b0c:	bx	lr

00016b10 <flatcc_builder_set_vtable_clustering@@Base>:
   16b10:	clz	r1, r1
   16b14:	lsr	r1, r1, #5
   16b18:	str	r1, [r0, #180]	; 0xb4
   16b1c:	bx	lr

00016b20 <flatcc_builder_set_block_align@@Base>:
   16b20:	strh	r1, [r0, #132]	; 0x84
   16b24:	bx	lr

00016b28 <flatcc_builder_get_level@@Base>:
   16b28:	ldr	r0, [r0, #156]	; 0x9c
   16b2c:	bx	lr

00016b30 <flatcc_builder_set_max_level@@Base>:
   16b30:	str	r1, [r0, #176]	; 0xb0
   16b34:	ldr	r2, [r0, #160]	; 0xa0
   16b38:	cmp	r2, r1
   16b3c:	strlt	r1, [r0, #160]	; 0xa0
   16b40:	bx	lr

00016b44 <flatcc_builder_get_buffer_size@@Base>:
   16b44:	ldr	r1, [r0, #136]	; 0x88
   16b48:	ldr	r0, [r0, #140]	; 0x8c
   16b4c:	sub	r0, r0, r1
   16b50:	bx	lr

00016b54 <flatcc_builder_get_buffer_start@@Base>:
   16b54:	ldr	r0, [r0, #136]	; 0x88
   16b58:	bx	lr

00016b5c <flatcc_builder_get_buffer_end@@Base>:
   16b5c:	ldr	r0, [r0, #140]	; 0x8c
   16b60:	bx	lr

00016b64 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16b64:	str	r1, [r0, #172]	; 0xac
   16b68:	bx	lr

00016b6c <flatcc_builder_set_identifier@@Base>:
   16b6c:	movw	r2, #32464	; 0x7ed0
   16b70:	movt	r2, #1
   16b74:	cmp	r1, #0
   16b78:	movne	r2, r1
   16b7c:	ldr	r1, [r2]
   16b80:	str	r1, [r0, #168]	; 0xa8
   16b84:	bx	lr

00016b88 <flatcc_builder_get_type@@Base>:
   16b88:	ldr	r0, [r0, #32]
   16b8c:	cmp	r0, #0
   16b90:	ldrhne	r0, [r0, #14]
   16b94:	moveq	r0, #0
   16b98:	bx	lr

00016b9c <flatcc_builder_get_type_at@@Base>:
   16b9c:	mov	r2, r0
   16ba0:	mov	r0, #0
   16ba4:	cmp	r1, #1
   16ba8:	ldrge	r3, [r2, #156]	; 0x9c
   16bac:	cmpge	r3, r1
   16bb0:	bge	16bb8 <flatcc_builder_get_type_at@@Base+0x1c>
   16bb4:	bx	lr
   16bb8:	sub	r0, r1, r3
   16bbc:	add	r0, r0, r0, lsl #3
   16bc0:	ldr	r1, [r2, #32]
   16bc4:	add	r0, r1, r0, lsl #2
   16bc8:	ldrh	r0, [r0, #14]
   16bcc:	bx	lr

00016bd0 <flatcc_builder_get_direct_buffer@@Base>:
   16bd0:	ldr	r2, [r0, #184]	; 0xb8
   16bd4:	cmp	r2, #0
   16bd8:	beq	16be4 <flatcc_builder_get_direct_buffer@@Base+0x14>
   16bdc:	add	r0, r0, #188	; 0xbc
   16be0:	b	16bf8 <flatcc_builder_get_direct_buffer@@Base+0x28>
   16be4:	cmp	r1, #0
   16be8:	movne	r0, #0
   16bec:	strne	r0, [r1]
   16bf0:	mov	r0, #0
   16bf4:	bx	lr
   16bf8:	ldm	r0, {r2, r3}
   16bfc:	cmp	r2, r3
   16c00:	beq	16c14 <flatcc_builder_get_direct_buffer@@Base+0x44>
   16c04:	mov	r0, #0
   16c08:	cmp	r1, #0
   16c0c:	strne	r0, [r1]
   16c10:	bx	lr
   16c14:	cmp	r1, #0
   16c18:	ldrne	r2, [r0, #24]
   16c1c:	strne	r2, [r1]
   16c20:	ldr	r0, [r0, #8]
   16c24:	bx	lr

00016c28 <flatcc_builder_copy_buffer@@Base>:
   16c28:	push	{fp, lr}
   16c2c:	mov	fp, sp
   16c30:	ldr	r3, [r0, #184]	; 0xb8
   16c34:	cmp	r3, #0
   16c38:	beq	16c6c <flatcc_builder_copy_buffer@@Base+0x44>
   16c3c:	add	r0, r0, #188	; 0xbc
   16c40:	bl	17344 <flatcc_emitter_copy_buffer@@Base>
   16c44:	cmp	r0, #0
   16c48:	popne	{fp, pc}
   16c4c:	movw	r0, #33590	; 0x8336
   16c50:	movt	r0, #1
   16c54:	movw	r1, #32994	; 0x80e2
   16c58:	movt	r1, #1
   16c5c:	movw	r3, #36922	; 0x903a
   16c60:	movt	r3, #1
   16c64:	movw	r2, #1926	; 0x786
   16c68:	bl	12418 <__assert_fail@plt>
   16c6c:	mov	r0, #0
   16c70:	pop	{fp, pc}

00016c74 <flatcc_builder_finalize_buffer@@Base>:
   16c74:	push	{r4, r5, r6, sl, fp, lr}
   16c78:	add	fp, sp, #16
   16c7c:	mov	r6, r1
   16c80:	mov	r4, r0
   16c84:	bl	16b44 <flatcc_builder_get_buffer_size@@Base>
   16c88:	mov	r5, r0
   16c8c:	cmp	r6, #0
   16c90:	strne	r5, [r6]
   16c94:	mov	r0, r5
   16c98:	bl	123b8 <malloc@plt>
   16c9c:	cmp	r0, #0
   16ca0:	beq	16ce4 <flatcc_builder_finalize_buffer@@Base+0x70>
   16ca4:	mov	r6, r0
   16ca8:	mov	r0, r4
   16cac:	mov	r1, r6
   16cb0:	mov	r2, r5
   16cb4:	bl	16c28 <flatcc_builder_copy_buffer@@Base>
   16cb8:	cmp	r0, #0
   16cbc:	movne	r0, r6
   16cc0:	popne	{r4, r5, r6, sl, fp, pc}
   16cc4:	movw	r0, #37512	; 0x9288
   16cc8:	movt	r0, #1
   16ccc:	movw	r1, #32994	; 0x80e2
   16cd0:	movt	r1, #1
   16cd4:	movw	r3, #36991	; 0x907f
   16cd8:	movt	r3, #1
   16cdc:	movw	r2, #1948	; 0x79c
   16ce0:	bl	12418 <__assert_fail@plt>
   16ce4:	movw	r0, #37512	; 0x9288
   16ce8:	movt	r0, #1
   16cec:	movw	r1, #32994	; 0x80e2
   16cf0:	movt	r1, #1
   16cf4:	movw	r3, #36991	; 0x907f
   16cf8:	movt	r3, #1
   16cfc:	movw	r2, #1944	; 0x798
   16d00:	bl	12418 <__assert_fail@plt>

00016d04 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16d04:	push	{r4, r5, r6, r7, fp, lr}
   16d08:	add	fp, sp, #16
   16d0c:	mov	r4, r1
   16d10:	mov	r5, r0
   16d14:	bl	16b44 <flatcc_builder_get_buffer_size@@Base>
   16d18:	mov	r6, r0
   16d1c:	cmp	r4, #0
   16d20:	strne	r6, [r4]
   16d24:	mov	r0, r5
   16d28:	bl	16b08 <flatcc_builder_get_buffer_alignment@@Base>
   16d2c:	add	r1, r6, r0
   16d30:	sub	r1, r1, #1
   16d34:	rsb	r2, r0, #0
   16d38:	and	r7, r1, r2
   16d3c:	mov	r1, r7
   16d40:	bl	16d8c <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   16d44:	cmp	r0, #0
   16d48:	beq	16d78 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   16d4c:	mov	r6, r0
   16d50:	mov	r0, r5
   16d54:	mov	r1, r6
   16d58:	mov	r2, r7
   16d5c:	bl	16c28 <flatcc_builder_copy_buffer@@Base>
   16d60:	cmp	r0, #0
   16d64:	beq	16d70 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   16d68:	mov	r0, r6
   16d6c:	pop	{r4, r5, r6, r7, fp, pc}
   16d70:	mov	r0, r6
   16d74:	bl	1237c <free@plt>
   16d78:	mov	r6, #0
   16d7c:	cmp	r4, #0
   16d80:	strne	r6, [r4]
   16d84:	mov	r0, r6
   16d88:	pop	{r4, r5, r6, r7, fp, pc}
   16d8c:	push	{fp, lr}
   16d90:	mov	fp, sp
   16d94:	sub	sp, sp, #8
   16d98:	mov	r2, r1
   16d9c:	mov	r1, r0
   16da0:	mov	r0, #0
   16da4:	str	r0, [sp, #4]
   16da8:	cmp	r1, #4
   16dac:	movls	r1, #4
   16db0:	add	r0, sp, #4
   16db4:	bl	123e8 <posix_memalign@plt>
   16db8:	cmp	r0, #0
   16dbc:	ldrne	r0, [sp, #4]
   16dc0:	cmpne	r0, #0
   16dc4:	beq	16dd4 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   16dc8:	bl	1237c <free@plt>
   16dcc:	mov	r0, #0
   16dd0:	str	r0, [sp, #4]
   16dd4:	ldr	r0, [sp, #4]
   16dd8:	mov	sp, fp
   16ddc:	pop	{fp, pc}

00016de0 <flatcc_builder_aligned_alloc@@Base>:
   16de0:	b	16d8c <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00016de4 <flatcc_builder_aligned_free@@Base>:
   16de4:	b	1237c <free@plt>

00016de8 <flatcc_builder_get_emit_context@@Base>:
   16de8:	ldr	r0, [r0, #36]	; 0x24
   16dec:	bx	lr
   16df0:	ldr	r0, [r0, #140]	; 0x8c
   16df4:	sub	r1, r1, #1
   16df8:	and	r0, r0, r1
   16dfc:	bx	lr
   16e00:	push	{r4, r5, r6, sl, fp, lr}
   16e04:	add	fp, sp, #16
   16e08:	sub	sp, sp, #8
   16e0c:	mov	r6, r2
   16e10:	mov	r5, r0
   16e14:	ldr	r2, [r0, #28]
   16e18:	ldr	r0, [r0, #40]	; 0x28
   16e1c:	ldr	r4, [r5, #48]	; 0x30
   16e20:	mov	r3, #1
   16e24:	str	r3, [sp]
   16e28:	add	r2, r2, r1
   16e2c:	add	r1, r5, #60	; 0x3c
   16e30:	mov	r3, #1
   16e34:	blx	r4
   16e38:	mov	r1, r0
   16e3c:	mvn	r0, #0
   16e40:	cmp	r1, #0
   16e44:	beq	16e50 <flatcc_builder_get_emit_context@@Base+0x68>
   16e48:	sub	sp, fp, #16
   16e4c:	pop	{r4, r5, r6, sl, fp, pc}
   16e50:	mov	r0, r5
   16e54:	mov	r1, r6
   16e58:	bl	14994 <flatcc_builder_start_struct@@Base+0x4c>
   16e5c:	mov	r0, #0
   16e60:	sub	sp, fp, #16
   16e64:	pop	{r4, r5, r6, sl, fp, pc}
   16e68:	push	{r4, r5, r6, sl, fp, lr}
   16e6c:	add	fp, sp, #16
   16e70:	sub	sp, sp, #8
   16e74:	ldr	r2, [r0, #124]	; 0x7c
   16e78:	cmp	r2, #0
   16e7c:	bne	16f1c <flatcc_builder_get_emit_context@@Base+0x134>
   16e80:	mov	r4, r0
   16e84:	mov	r0, #0
   16e88:	str	r0, [sp]
   16e8c:	mov	r6, #16
   16e90:	mov	r0, r4
   16e94:	mov	r1, #6
   16e98:	mov	r3, #16
   16e9c:	bl	13fb0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   16ea0:	mvn	r5, #0
   16ea4:	cmp	r0, #0
   16ea8:	beq	16f10 <flatcc_builder_get_emit_context@@Base+0x128>
   16eac:	add	r1, r4, #92	; 0x5c
   16eb0:	str	r6, [r4, #124]	; 0x7c
   16eb4:	ldr	r0, [r4, #40]	; 0x28
   16eb8:	ldr	ip, [r4, #48]	; 0x30
   16ebc:	mov	r2, #5
   16ec0:	str	r2, [sp]
   16ec4:	mov	r6, #256	; 0x100
   16ec8:	mov	r2, #256	; 0x100
   16ecc:	mov	r3, #1
   16ed0:	blx	ip
   16ed4:	cmp	r0, #0
   16ed8:	bne	16f10 <flatcc_builder_get_emit_context@@Base+0x128>
   16edc:	ldr	r0, [r4, #96]	; 0x60
   16ee0:	mov	r1, r6
   16ee4:	lsl	r6, r6, #1
   16ee8:	cmp	r0, r1, lsl #1
   16eec:	bcs	16ee0 <flatcc_builder_get_emit_context@@Base+0xf8>
   16ef0:	lsr	r1, r1, #2
   16ef4:	mvn	r0, #0
   16ef8:	mov	r2, #1
   16efc:	add	r0, r0, #1
   16f00:	cmp	r1, r2, lsl r0
   16f04:	bhi	16efc <flatcc_builder_get_emit_context@@Base+0x114>
   16f08:	str	r0, [r4, #116]	; 0x74
   16f0c:	mov	r5, #0
   16f10:	mov	r0, r5
   16f14:	sub	sp, fp, #16
   16f18:	pop	{r4, r5, r6, sl, fp, pc}
   16f1c:	movw	r0, #37452	; 0x924c
   16f20:	movt	r0, #1
   16f24:	movw	r1, #32994	; 0x80e2
   16f28:	movt	r1, #1
   16f2c:	movw	r3, #37467	; 0x925b
   16f30:	movt	r3, #1
   16f34:	movw	r2, #342	; 0x156
   16f38:	bl	12418 <__assert_fail@plt>

00016f3c <flatcc_emitter_recycle_page@@Base>:
   16f3c:	ldr	ip, [r0]
   16f40:	mvn	r2, #0
   16f44:	cmp	ip, r1
   16f48:	ldrne	r3, [r0, #4]
   16f4c:	cmpne	r3, r1
   16f50:	bne	16f5c <flatcc_emitter_recycle_page@@Base+0x20>
   16f54:	mov	r0, r2
   16f58:	bx	lr
   16f5c:	ldr	r2, [r1, #2944]	; 0xb80
   16f60:	ldr	r3, [r1, #2948]	; 0xb84
   16f64:	str	r3, [r2, #2948]	; 0xb84
   16f68:	ldr	r2, [r1, #2944]	; 0xb80
   16f6c:	ldr	r3, [r1, #2948]	; 0xb84
   16f70:	str	r2, [r3, #2944]	; 0xb80
   16f74:	ldr	r2, [ip, #2948]	; 0xb84
   16f78:	str	r2, [r1, #2948]	; 0xb84
   16f7c:	ldr	r0, [r0]
   16f80:	str	r0, [r1, #2944]	; 0xb80
   16f84:	str	r1, [r2, #2944]	; 0xb80
   16f88:	ldr	r0, [r1, #2944]	; 0xb80
   16f8c:	str	r1, [r0, #2948]	; 0xb84
   16f90:	mov	r2, #0
   16f94:	mov	r0, r2
   16f98:	bx	lr

00016f9c <flatcc_emitter_reset@@Base>:
   16f9c:	push	{r4, sl, fp, lr}
   16fa0:	add	fp, sp, #8
   16fa4:	mov	r4, r0
   16fa8:	ldr	r0, [r0]
   16fac:	cmp	r0, #0
   16fb0:	beq	17054 <flatcc_emitter_reset@@Base+0xb8>
   16fb4:	mov	r1, #1472	; 0x5c0
   16fb8:	add	r2, r0, #1472	; 0x5c0
   16fbc:	stmib	r4, {r0, r2}
   16fc0:	str	r1, [r4, #12]
   16fc4:	str	r2, [r4, #16]
   16fc8:	str	r1, [r4, #20]
   16fcc:	movw	r1, #64064	; 0xfa40
   16fd0:	movt	r1, #65535	; 0xffff
   16fd4:	str	r1, [r0, #2952]	; 0xb88
   16fd8:	ldr	r0, [r4, #32]
   16fdc:	cmp	r0, #0
   16fe0:	ldreq	r0, [r4, #24]
   16fe4:	streq	r0, [r4, #32]
   16fe8:	add	r2, r4, #24
   16fec:	ldm	r2, {r0, r1, r2}
   16ff0:	mov	r3, #0
   16ff4:	str	r3, [r4, #24]
   16ff8:	add	r2, r2, r2, lsl #1
   16ffc:	lsr	r2, r2, #2
   17000:	add	r0, r2, r0, lsr #2
   17004:	str	r0, [r4, #32]
   17008:	cmp	r1, r0, lsl #1
   1700c:	bls	17054 <flatcc_emitter_reset@@Base+0xb8>
   17010:	ldr	r2, [r4]
   17014:	ldr	r1, [r4, #4]
   17018:	ldr	r0, [r1, #2944]	; 0xb80
   1701c:	cmp	r0, r2
   17020:	popeq	{r4, sl, fp, pc}
   17024:	ldr	r2, [r0, #2944]	; 0xb80
   17028:	str	r2, [r1, #2944]	; 0xb80
   1702c:	ldr	r1, [r0, #2944]	; 0xb80
   17030:	ldr	r2, [r4, #4]
   17034:	str	r2, [r1, #2948]	; 0xb84
   17038:	bl	1237c <free@plt>
   1703c:	ldr	r0, [r4, #28]
   17040:	ldr	r1, [r4, #32]
   17044:	sub	r0, r0, #2944	; 0xb80
   17048:	str	r0, [r4, #28]
   1704c:	cmp	r0, r1, lsl #1
   17050:	bhi	17010 <flatcc_emitter_reset@@Base+0x74>
   17054:	pop	{r4, sl, fp, pc}

00017058 <flatcc_emitter_clear@@Base>:
   17058:	push	{r4, r5, r6, sl, fp, lr}
   1705c:	add	fp, sp, #16
   17060:	ldr	r5, [r0]
   17064:	cmp	r5, #0
   17068:	popeq	{r4, r5, r6, sl, fp, pc}
   1706c:	mov	r4, r0
   17070:	ldr	r0, [r5, #2948]	; 0xb84
   17074:	mov	r6, #0
   17078:	str	r6, [r0, #2944]	; 0xb80
   1707c:	b	1708c <flatcc_emitter_clear@@Base+0x34>
   17080:	mov	r5, r0
   17084:	ldr	r0, [r0, #2948]	; 0xb84
   17088:	bl	1237c <free@plt>
   1708c:	ldr	r0, [r5, #2944]	; 0xb80
   17090:	cmp	r0, #0
   17094:	bne	17080 <flatcc_emitter_clear@@Base+0x28>
   17098:	mov	r0, r5
   1709c:	bl	1237c <free@plt>
   170a0:	vmov.i32	q8, #0	; 0x00000000
   170a4:	add	r0, r4, #16
   170a8:	vst1.32	{d16-d17}, [r0]
   170ac:	mov	r0, #32
   170b0:	vst1.32	{d16-d17}, [r4], r0
   170b4:	str	r6, [r4]
   170b8:	pop	{r4, r5, r6, sl, fp, pc}

000170bc <flatcc_emitter@@Base>:
   170bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   170c0:	add	fp, sp, #24
   170c4:	mov	r4, r2
   170c8:	mov	r5, r1
   170cc:	mov	r6, r0
   170d0:	ldr	r1, [r0, #24]
   170d4:	ldr	r0, [fp, #8]
   170d8:	add	r1, r1, r0
   170dc:	str	r1, [r6, #24]
   170e0:	mov	r1, r6
   170e4:	cmn	r3, #1
   170e8:	ble	17128 <flatcc_emitter@@Base+0x6c>
   170ec:	ldr	r2, [r1, #20]!
   170f0:	cmp	r2, r0
   170f4:	bcs	17170 <flatcc_emitter@@Base+0xb4>
   170f8:	mov	r8, #0
   170fc:	cmp	r4, #0
   17100:	beq	171c0 <flatcc_emitter@@Base+0x104>
   17104:	ldm	r5, {r1, r2}
   17108:	mov	r0, r6
   1710c:	bl	1728c <flatcc_emitter@@Base+0x1d0>
   17110:	cmp	r0, #0
   17114:	bne	17164 <flatcc_emitter@@Base+0xa8>
   17118:	subs	r4, r4, #1
   1711c:	add	r5, r5, #8
   17120:	bne	17104 <flatcc_emitter@@Base+0x48>
   17124:	b	171c0 <flatcc_emitter@@Base+0x104>
   17128:	ldr	r2, [r1, #12]!
   1712c:	cmp	r2, r0
   17130:	bcs	17180 <flatcc_emitter@@Base+0xc4>
   17134:	add	r0, r5, r4, lsl #3
   17138:	sub	r5, r0, #4
   1713c:	rsb	r4, r4, #1
   17140:	cmp	r4, #1
   17144:	beq	171c8 <flatcc_emitter@@Base+0x10c>
   17148:	ldmda	r5, {r1, r2}
   1714c:	mov	r0, r6
   17150:	bl	171d4 <flatcc_emitter@@Base+0x118>
   17154:	sub	r5, r5, #8
   17158:	add	r4, r4, #1
   1715c:	cmp	r0, #0
   17160:	beq	17140 <flatcc_emitter@@Base+0x84>
   17164:	mvn	r8, #0
   17168:	mov	r0, r8
   1716c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17170:	ldr	r7, [r6, #16]
   17174:	add	r3, r7, r0
   17178:	str	r3, [r6, #16]
   1717c:	b	1718c <flatcc_emitter@@Base+0xd0>
   17180:	ldr	r3, [r6, #8]
   17184:	sub	r7, r3, r0
   17188:	str	r7, [r6, #8]
   1718c:	sub	r0, r2, r0
   17190:	str	r0, [r1]
   17194:	mov	r8, #0
   17198:	cmp	r4, #0
   1719c:	beq	171c0 <flatcc_emitter@@Base+0x104>
   171a0:	ldm	r5, {r1, r2}
   171a4:	mov	r0, r7
   171a8:	bl	12388 <memcpy@plt>
   171ac:	ldr	r0, [r5, #4]
   171b0:	add	r7, r7, r0
   171b4:	add	r5, r5, #8
   171b8:	subs	r4, r4, #1
   171bc:	bne	171a0 <flatcc_emitter@@Base+0xe4>
   171c0:	mov	r0, r8
   171c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171c8:	mov	r8, #0
   171cc:	mov	r0, r8
   171d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   171d4:	push	{r4, r5, r6, r7, fp, lr}
   171d8:	add	fp, sp, #16
   171dc:	cmp	r2, #0
   171e0:	moveq	r0, #0
   171e4:	popeq	{r4, r5, r6, r7, fp, pc}
   171e8:	mov	r4, r2
   171ec:	mov	r5, r0
   171f0:	clz	r0, r2
   171f4:	lsr	r7, r0, #5
   171f8:	add	r6, r1, r2
   171fc:	b	17238 <flatcc_emitter@@Base+0x17c>
   17200:	sub	r0, r0, r7
   17204:	str	r0, [r5, #12]
   17208:	ldr	r0, [r5, #8]
   1720c:	sub	r0, r0, r7
   17210:	str	r0, [r5, #8]
   17214:	sub	r6, r6, r7
   17218:	mov	r1, r6
   1721c:	mov	r2, r7
   17220:	bl	12388 <memcpy@plt>
   17224:	subs	r4, r4, r7
   17228:	clz	r0, r4
   1722c:	lsr	r7, r0, #5
   17230:	moveq	r0, #0
   17234:	popeq	{r4, r5, r6, r7, fp, pc}
   17238:	ldr	r0, [r5, #12]
   1723c:	cmp	r4, r0
   17240:	bls	17270 <flatcc_emitter@@Base+0x1b4>
   17244:	cmp	r0, #0
   17248:	bne	17278 <flatcc_emitter@@Base+0x1bc>
   1724c:	mov	r0, r5
   17250:	bl	17400 <flatcc_emitter_copy_buffer@@Base+0xbc>
   17254:	cmp	r0, #0
   17258:	mov	r1, r0
   1725c:	movwne	r1, #1
   17260:	orr	r1, r1, r7
   17264:	tst	r1, #1
   17268:	beq	17238 <flatcc_emitter@@Base+0x17c>
   1726c:	b	17280 <flatcc_emitter@@Base+0x1c4>
   17270:	mov	r7, r4
   17274:	b	17200 <flatcc_emitter@@Base+0x144>
   17278:	mov	r7, r0
   1727c:	b	17200 <flatcc_emitter@@Base+0x144>
   17280:	cmp	r0, #0
   17284:	mvnne	r0, #0
   17288:	pop	{r4, r5, r6, r7, fp, pc}
   1728c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17290:	add	fp, sp, #24
   17294:	cmp	r2, #0
   17298:	moveq	r0, #0
   1729c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   172a0:	mov	r4, r2
   172a4:	mov	r8, r1
   172a8:	mov	r6, r0
   172ac:	clz	r0, r2
   172b0:	lsr	r5, r0, #5
   172b4:	b	172f8 <flatcc_emitter@@Base+0x23c>
   172b8:	ldr	r0, [r6, #16]
   172bc:	mov	r1, r8
   172c0:	mov	r2, r7
   172c4:	bl	12388 <memcpy@plt>
   172c8:	ldr	r0, [r6, #16]
   172cc:	ldr	r1, [r6, #20]
   172d0:	add	r0, r0, r7
   172d4:	sub	r1, r1, r7
   172d8:	str	r0, [r6, #16]
   172dc:	str	r1, [r6, #20]
   172e0:	add	r8, r8, r7
   172e4:	subs	r4, r4, r7
   172e8:	clz	r0, r4
   172ec:	lsr	r5, r0, #5
   172f0:	moveq	r0, #0
   172f4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   172f8:	ldr	r7, [r6, #20]
   172fc:	cmp	r4, r7
   17300:	bls	17330 <flatcc_emitter@@Base+0x274>
   17304:	cmp	r7, #0
   17308:	bne	172b8 <flatcc_emitter@@Base+0x1fc>
   1730c:	mov	r0, r6
   17310:	bl	174ec <flatcc_emitter_copy_buffer@@Base+0x1a8>
   17314:	cmp	r0, #0
   17318:	mov	r1, r0
   1731c:	movwne	r1, #1
   17320:	orr	r1, r1, r5
   17324:	tst	r1, #1
   17328:	beq	172f8 <flatcc_emitter@@Base+0x23c>
   1732c:	b	17338 <flatcc_emitter@@Base+0x27c>
   17330:	mov	r7, r4
   17334:	b	172b8 <flatcc_emitter@@Base+0x1fc>
   17338:	cmp	r0, #0
   1733c:	mvnne	r0, #0
   17340:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00017344 <flatcc_emitter_copy_buffer@@Base>:
   17344:	push	{r4, r5, r6, sl, fp, lr}
   17348:	add	fp, sp, #16
   1734c:	mov	r3, r2
   17350:	ldr	r2, [r0, #24]
   17354:	mov	r5, #0
   17358:	cmp	r2, r3
   1735c:	bhi	173e4 <flatcc_emitter_copy_buffer@@Base+0xa0>
   17360:	mov	r4, r0
   17364:	ldr	r0, [r0]
   17368:	cmp	r0, #0
   1736c:	beq	173e4 <flatcc_emitter_copy_buffer@@Base+0xa0>
   17370:	mov	r6, r1
   17374:	ldr	r1, [r4, #4]
   17378:	cmp	r0, r1
   1737c:	beq	173ec <flatcc_emitter_copy_buffer@@Base+0xa8>
   17380:	ldr	r1, [r4, #8]
   17384:	ldr	r0, [r4, #12]
   17388:	rsb	r5, r0, #2944	; 0xb80
   1738c:	mov	r0, r6
   17390:	mov	r2, r5
   17394:	bl	12388 <memcpy@plt>
   17398:	add	r5, r6, r5
   1739c:	ldm	r4, {r0, r1}
   173a0:	ldr	r6, [r0, #2944]	; 0xb80
   173a4:	cmp	r6, r1
   173a8:	beq	173d0 <flatcc_emitter_copy_buffer@@Base+0x8c>
   173ac:	mov	r0, r5
   173b0:	mov	r1, r6
   173b4:	mov	r2, #2944	; 0xb80
   173b8:	bl	12388 <memcpy@plt>
   173bc:	add	r5, r5, #2944	; 0xb80
   173c0:	ldr	r6, [r6, #2944]	; 0xb80
   173c4:	ldr	r0, [r4, #4]
   173c8:	cmp	r6, r0
   173cc:	bne	173ac <flatcc_emitter_copy_buffer@@Base+0x68>
   173d0:	ldr	r0, [r4, #20]
   173d4:	rsb	r2, r0, #2944	; 0xb80
   173d8:	mov	r0, r5
   173dc:	mov	r1, r6
   173e0:	bl	12388 <memcpy@plt>
   173e4:	mov	r0, r5
   173e8:	pop	{r4, r5, r6, sl, fp, pc}
   173ec:	ldr	r1, [r4, #8]
   173f0:	mov	r0, r6
   173f4:	bl	12388 <memcpy@plt>
   173f8:	mov	r0, r6
   173fc:	pop	{r4, r5, r6, sl, fp, pc}
   17400:	push	{r4, r5, fp, lr}
   17404:	add	fp, sp, #8
   17408:	mov	r4, r0
   1740c:	ldr	r5, [r0]
   17410:	cmp	r5, #0
   17414:	beq	1743c <flatcc_emitter_copy_buffer@@Base+0xf8>
   17418:	ldr	r0, [r5, #2948]	; 0xb84
   1741c:	ldr	r1, [r4, #4]
   17420:	cmp	r0, r1
   17424:	beq	1743c <flatcc_emitter_copy_buffer@@Base+0xf8>
   17428:	ldr	r1, [r5, #2952]	; 0xb88
   1742c:	sub	r1, r1, #2944	; 0xb80
   17430:	str	r1, [r0, #2952]	; 0xb88
   17434:	ldr	r0, [r5, #2948]	; 0xb84
   17438:	b	1747c <flatcc_emitter_copy_buffer@@Base+0x138>
   1743c:	movw	r0, #2956	; 0xb8c
   17440:	bl	123b8 <malloc@plt>
   17444:	cmp	r0, #0
   17448:	mvneq	r0, #0
   1744c:	popeq	{r4, r5, fp, pc}
   17450:	ldr	r1, [r4, #28]
   17454:	add	r1, r1, #2944	; 0xb80
   17458:	str	r1, [r4, #28]
   1745c:	cmp	r5, #0
   17460:	beq	174ac <flatcc_emitter_copy_buffer@@Base+0x168>
   17464:	ldm	r4, {r1, r2}
   17468:	str	r1, [r0, #2944]	; 0xb80
   1746c:	str	r2, [r0, #2948]	; 0xb84
   17470:	str	r0, [r1, #2948]	; 0xb84
   17474:	ldr	r1, [r4, #4]
   17478:	str	r0, [r1, #2944]	; 0xb80
   1747c:	str	r0, [r4]
   17480:	mov	r0, #2944	; 0xb80
   17484:	ldr	r1, [r4]
   17488:	add	r2, r1, #2944	; 0xb80
   1748c:	str	r2, [r4, #8]
   17490:	str	r0, [r4, #12]
   17494:	ldr	r0, [r1, #2944]	; 0xb80
   17498:	ldr	r0, [r0, #2952]	; 0xb88
   1749c:	sub	r0, r0, #2944	; 0xb80
   174a0:	str	r0, [r1, #2952]	; 0xb88
   174a4:	mov	r0, #0
   174a8:	pop	{r4, r5, fp, pc}
   174ac:	str	r0, [r4, #4]
   174b0:	str	r0, [r4]
   174b4:	mov	r1, #1472	; 0x5c0
   174b8:	str	r1, [r4, #12]
   174bc:	str	r1, [r4, #20]
   174c0:	ldr	r1, [r4]
   174c4:	add	r1, r1, #1472	; 0x5c0
   174c8:	str	r1, [r4, #8]
   174cc:	str	r1, [r4, #16]
   174d0:	movw	r1, #64064	; 0xfa40
   174d4:	movt	r1, #65535	; 0xffff
   174d8:	str	r0, [r0, #2944]	; 0xb80
   174dc:	str	r0, [r0, #2948]	; 0xb84
   174e0:	str	r1, [r0, #2952]	; 0xb88
   174e4:	mov	r0, #0
   174e8:	pop	{r4, r5, fp, pc}
   174ec:	push	{r4, r5, fp, lr}
   174f0:	add	fp, sp, #8
   174f4:	mov	r4, r0
   174f8:	ldr	r5, [r0, #4]
   174fc:	cmp	r5, #0
   17500:	beq	17514 <flatcc_emitter_copy_buffer@@Base+0x1d0>
   17504:	ldr	r0, [r5, #2944]	; 0xb80
   17508:	ldr	r1, [r4]
   1750c:	cmp	r0, r1
   17510:	bne	17550 <flatcc_emitter_copy_buffer@@Base+0x20c>
   17514:	movw	r0, #2956	; 0xb8c
   17518:	bl	123b8 <malloc@plt>
   1751c:	cmp	r0, #0
   17520:	mvneq	r0, #0
   17524:	popeq	{r4, r5, fp, pc}
   17528:	ldr	r1, [r4, #28]
   1752c:	add	r1, r1, #2944	; 0xb80
   17530:	str	r1, [r4, #28]
   17534:	cmp	r5, #0
   17538:	beq	1757c <flatcc_emitter_copy_buffer@@Base+0x238>
   1753c:	ldr	r1, [r4]
   17540:	str	r1, [r0, #2944]	; 0xb80
   17544:	str	r5, [r0, #2948]	; 0xb84
   17548:	str	r0, [r1, #2948]	; 0xb84
   1754c:	str	r0, [r5, #2944]	; 0xb80
   17550:	str	r0, [r4, #4]
   17554:	mov	r0, #2944	; 0xb80
   17558:	ldr	r1, [r4, #4]
   1755c:	str	r1, [r4, #16]
   17560:	str	r0, [r4, #20]
   17564:	ldr	r0, [r1, #2948]	; 0xb84
   17568:	ldr	r0, [r0, #2952]	; 0xb88
   1756c:	add	r0, r0, #2944	; 0xb80
   17570:	str	r0, [r1, #2952]	; 0xb88
   17574:	mov	r0, #0
   17578:	pop	{r4, r5, fp, pc}
   1757c:	str	r0, [r4, #4]
   17580:	str	r0, [r4]
   17584:	mov	r1, #1472	; 0x5c0
   17588:	str	r1, [r4, #12]
   1758c:	str	r1, [r4, #20]
   17590:	ldr	r1, [r4]
   17594:	add	r1, r1, #1472	; 0x5c0
   17598:	str	r1, [r4, #8]
   1759c:	str	r1, [r4, #16]
   175a0:	movw	r1, #64064	; 0xfa40
   175a4:	movt	r1, #65535	; 0xffff
   175a8:	str	r0, [r0, #2944]	; 0xb80
   175ac:	str	r0, [r0, #2948]	; 0xb84
   175b0:	str	r1, [r0, #2952]	; 0xb88
   175b4:	mov	r0, #0
   175b8:	pop	{r4, r5, fp, pc}

000175bc <__libc_csu_init@@Base>:
   175bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175c0:	mov	r7, r0
   175c4:	ldr	r6, [pc, #72]	; 17614 <__libc_csu_init@@Base+0x58>
   175c8:	ldr	r5, [pc, #72]	; 17618 <__libc_csu_init@@Base+0x5c>
   175cc:	add	r6, pc, r6
   175d0:	add	r5, pc, r5
   175d4:	sub	r6, r6, r5
   175d8:	mov	r8, r1
   175dc:	mov	r9, r2
   175e0:	bl	12350 <strcmp@plt-0x20>
   175e4:	asrs	r6, r6, #2
   175e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   175ec:	mov	r4, #0
   175f0:	add	r4, r4, #1
   175f4:	ldr	r3, [r5], #4
   175f8:	mov	r2, r9
   175fc:	mov	r1, r8
   17600:	mov	r0, r7
   17604:	blx	r3
   17608:	cmp	r6, r4
   1760c:	bne	175f0 <__libc_csu_init@@Base+0x34>
   17610:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17614:	andeq	r2, r1, r8, lsr r9
   17618:	andeq	r2, r1, r0, lsr r9

0001761c <__libc_csu_fini@@Base>:
   1761c:	bx	lr

Disassembly of section .fini:

00017620 <.fini>:
   17620:	push	{r3, lr}
   17624:	pop	{r3, pc}
