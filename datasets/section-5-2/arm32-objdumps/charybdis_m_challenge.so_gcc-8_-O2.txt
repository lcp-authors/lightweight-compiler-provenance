
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000083c <_init>:
 83c:	push	{r3, lr}
 840:	bl	9d0 <call_weak_fn>
 844:	pop	{r3, pc}

Disassembly of section .plt:

00000848 <.plt>:
 848:	push	{lr}		; (str lr, [sp, #-4]!)
 84c:	ldr	lr, [pc, #4]	; 858 <.plt+0x10>
 850:	add	lr, pc, lr
 854:	ldr	pc, [lr, #8]!
 858:	.word	0x000117a8

0000085c <calloc@plt>:
 85c:	add	ip, pc, #0, 12
 860:	add	ip, ip, #69632	; 0x11000
 864:	ldr	pc, [ip, #1960]!	; 0x7a8

00000868 <rb_current_time@plt>:
 868:	add	ip, pc, #0, 12
 86c:	add	ip, ip, #69632	; 0x11000
 870:	ldr	pc, [ip, #1952]!	; 0x7a0

00000874 <__cxa_finalize@plt>:
 874:	add	ip, pc, #0, 12
 878:	add	ip, ip, #69632	; 0x11000
 87c:	ldr	pc, [ip, #1944]!	; 0x798

00000880 <RSA_public_encrypt@plt>:
 880:	add	ip, pc, #0, 12
 884:	add	ip, ip, #69632	; 0x11000
 888:	ldr	pc, [ip, #1936]!	; 0x790

0000088c <sendto_one@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1928]!	; 0x788

00000898 <free@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1920]!	; 0x780

000008a4 <rb_strcasecmp@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1912]!	; 0x778

000008b0 <memcpy@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1904]!	; 0x770

000008bc <RSA_size@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1896]!	; 0x768

000008c8 <rb_outofmemory@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1888]!	; 0x760

000008d4 <memcmp@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1880]!	; 0x758

000008e0 <sendto_realops_snomask@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1872]!	; 0x750

000008ec <rb_base64_decode@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1864]!	; 0x748

000008f8 <malloc@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1856]!	; 0x740

00000904 <rb_get_random@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1848]!	; 0x738

00000910 <__gmon_start__@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1840]!	; 0x730

0000091c <OPENSSL_init_crypto@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1832]!	; 0x728

00000928 <send_oper_motd@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1824]!	; 0x720

00000934 <sendto_one_numeric@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1816]!	; 0x718

00000940 <strlen@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1808]!	; 0x710

0000094c <SHA1_Update@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1800]!	; 0x708

00000958 <ERR_error_string@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1792]!	; 0x700

00000964 <ilog@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1784]!	; 0x6f8

00000970 <SHA1_Init@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1776]!	; 0x6f0

0000097c <ERR_get_error@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1768]!	; 0x6e8

00000988 <sendto_one_notice@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1760]!	; 0x6e0

00000994 <rb_strlcpy@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1752]!	; 0x6d8

000009a0 <find_oper_conf@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1744]!	; 0x6d0

000009ac <oper_up@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1736]!	; 0x6c8

000009b8 <rb_base64_encode@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1728]!	; 0x6c0

000009c4 <SHA1_Final@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1720]!	; 0x6b8

Disassembly of section .text:

000009d0 <call_weak_fn>:
     9d0:	ldr	r3, [pc, #20]	; 9ec <call_weak_fn+0x1c>
     9d4:	ldr	r2, [pc, #20]	; 9f0 <call_weak_fn+0x20>
     9d8:	add	r3, pc, r3
     9dc:	ldr	r2, [r3, r2]
     9e0:	cmp	r2, #0
     9e4:	bxeq	lr
     9e8:	b	910 <__gmon_start__@plt>
     9ec:	.word	0x00011620
     9f0:	.word	0x00000090

000009f4 <deregister_tm_clones>:
     9f4:	ldr	r0, [pc, #44]	; a28 <deregister_tm_clones+0x34>
     9f8:	ldr	r3, [pc, #44]	; a2c <deregister_tm_clones+0x38>
     9fc:	add	r0, pc, r0
     a00:	add	r3, pc, r3
     a04:	cmp	r3, r0
     a08:	ldr	r3, [pc, #32]	; a30 <deregister_tm_clones+0x3c>
     a0c:	add	r3, pc, r3
     a10:	bxeq	lr
     a14:	ldr	r2, [pc, #24]	; a34 <deregister_tm_clones+0x40>
     a18:	ldr	r3, [r3, r2]
     a1c:	cmp	r3, #0
     a20:	bxeq	lr
     a24:	bx	r3
     a28:	.word	0x00011714
     a2c:	.word	0x00011710
     a30:	.word	0x000115ec
     a34:	.word	0x0000008c

00000a38 <register_tm_clones>:
     a38:	ldr	r0, [pc, #56]	; a78 <register_tm_clones+0x40>
     a3c:	ldr	r3, [pc, #56]	; a7c <register_tm_clones+0x44>
     a40:	add	r0, pc, r0
     a44:	add	r3, pc, r3
     a48:	sub	r1, r3, r0
     a4c:	ldr	r3, [pc, #44]	; a80 <register_tm_clones+0x48>
     a50:	asr	r1, r1, #2
     a54:	add	r3, pc, r3
     a58:	add	r1, r1, r1, lsr #31
     a5c:	asrs	r1, r1, #1
     a60:	bxeq	lr
     a64:	ldr	r2, [pc, #24]	; a84 <register_tm_clones+0x4c>
     a68:	ldr	r3, [r3, r2]
     a6c:	cmp	r3, #0
     a70:	bxeq	lr
     a74:	bx	r3
     a78:	.word	0x000116d0
     a7c:	.word	0x000116cc
     a80:	.word	0x000115a4
     a84:	.word	0x00000094

00000a88 <__do_global_dtors_aux>:
     a88:	ldr	r3, [pc, #76]	; adc <__do_global_dtors_aux+0x54>
     a8c:	ldr	r2, [pc, #76]	; ae0 <__do_global_dtors_aux+0x58>
     a90:	add	r3, pc, r3
     a94:	add	r2, pc, r2
     a98:	ldrb	r3, [r3]
     a9c:	cmp	r3, #0
     aa0:	bxne	lr
     aa4:	ldr	r3, [pc, #56]	; ae4 <__do_global_dtors_aux+0x5c>
     aa8:	push	{r4, lr}
     aac:	ldr	r3, [r2, r3]
     ab0:	cmp	r3, #0
     ab4:	beq	ac4 <__do_global_dtors_aux+0x3c>
     ab8:	ldr	r3, [pc, #40]	; ae8 <__do_global_dtors_aux+0x60>
     abc:	ldr	r0, [pc, r3]
     ac0:	bl	874 <__cxa_finalize@plt>
     ac4:	bl	9f4 <deregister_tm_clones>
     ac8:	ldr	r3, [pc, #28]	; aec <__do_global_dtors_aux+0x64>
     acc:	mov	r2, #1
     ad0:	add	r3, pc, r3
     ad4:	strb	r2, [r3]
     ad8:	pop	{r4, pc}
     adc:	.word	0x00011680
     ae0:	.word	0x00011564
     ae4:	.word	0x00000088
     ae8:	.word	0x000115dc
     aec:	.word	0x00011640

00000af0 <frame_dummy>:
     af0:	b	a38 <register_tm_clones>

00000af4 <cleanup_challenge.isra.0>:
     af4:	ldr	r3, [r1]
     af8:	cmp	r3, #0
     afc:	bxeq	lr
     b00:	strd	r4, [sp, #-16]!
     b04:	mov	r5, r0
     b08:	mov	r4, r1
     b0c:	ldr	r0, [r3, #284]	; 0x11c
     b10:	str	r6, [sp, #8]
     b14:	str	lr, [sp, #12]
     b18:	cmp	r0, #0
     b1c:	beq	b24 <cleanup_challenge.isra.0+0x30>
     b20:	bl	898 <free@plt>
     b24:	ldr	r2, [r5]
     b28:	ldr	r0, [r2, #32]
     b2c:	cmp	r0, #0
     b30:	beq	b3c <cleanup_challenge.isra.0+0x48>
     b34:	bl	898 <free@plt>
     b38:	ldr	r2, [r5]
     b3c:	mov	r3, #0
     b40:	ldr	r1, [r4]
     b44:	ldrd	r4, [sp]
     b48:	ldr	r6, [sp, #8]
     b4c:	add	sp, sp, #12
     b50:	str	r3, [r1, #284]	; 0x11c
     b54:	str	r3, [r2, #32]
     b58:	str	r3, [r1, #304]	; 0x130
     b5c:	pop	{pc}		; (ldr pc, [sp], #4)

00000b60 <m_challenge>:
     b60:	strd	r4, [sp, #-36]!	; 0xffffffdc
     b64:	mov	r4, r2
     b68:	mov	r2, #0
     b6c:	ldr	r3, [r4, #56]	; 0x38
     b70:	strd	r6, [sp, #8]
     b74:	strd	r8, [sp, #16]
     b78:	ldr	r8, [pc, #1852]	; 12bc <m_challenge+0x75c>
     b7c:	strd	sl, [sp, #24]
     b80:	str	lr, [sp, #32]
     b84:	sub	sp, sp, #668	; 0x29c
     b88:	tst	r3, #4096	; 0x1000
     b8c:	ldr	r5, [sp, #704]	; 0x2c0
     b90:	str	r2, [sp, #28]
     b94:	add	r8, pc, r8
     b98:	bne	e44 <m_challenge+0x2e4>
     b9c:	ldr	r3, [r5, #4]
     ba0:	ldrb	r3, [r3]
     ba4:	cmp	r3, #43	; 0x2b
     ba8:	bne	cbc <m_challenge+0x15c>
     bac:	ldr	r3, [r4, #432]	; 0x1b0
     bb0:	ldr	r3, [r3, #284]	; 0x11c
     bb4:	cmp	r3, #0
     bb8:	beq	ca0 <m_challenge+0x140>
     bbc:	bl	868 <rb_current_time@plt>
     bc0:	ldr	r3, [r4, #432]	; 0x1b0
     bc4:	add	r6, r4, #288	; 0x120
     bc8:	add	r9, r4, #152	; 0x98
     bcc:	add	r6, r6, #3
     bd0:	add	r7, r4, #88	; 0x58
     bd4:	add	sl, r4, #163	; 0xa3
     bd8:	ldr	r3, [r3, #304]	; 0x130
     bdc:	sub	r0, r0, r3
     be0:	cmp	r0, #180	; 0xb4
     be4:	bgt	ef4 <m_challenge+0x394>
     be8:	ldr	fp, [r5, #4]
     bec:	add	fp, fp, #1
     bf0:	mov	r0, fp
     bf4:	str	fp, [r5, #4]
     bf8:	bl	940 <strlen@plt>
     bfc:	mov	r1, r0
     c00:	add	r2, sp, #28
     c04:	mov	r0, fp
     c08:	bl	8ec <rb_base64_decode@plt>
     c0c:	ldr	r2, [sp, #28]
     c10:	mov	r5, r0
     c14:	cmp	r2, #20
     c18:	bne	10b4 <m_challenge+0x554>
     c1c:	ldr	r3, [r4, #432]	; 0x1b0
     c20:	mov	r1, r0
     c24:	ldr	r0, [r3, #284]	; 0x11c
     c28:	bl	8d4 <memcmp@plt>
     c2c:	cmp	r0, #0
     c30:	beq	1118 <m_challenge+0x5b8>
     c34:	ldr	r2, [pc, #1668]	; 12c0 <m_challenge+0x760>
     c38:	mov	r3, r7
     c3c:	mov	r0, r4
     c40:	ldr	r1, [pc, #1660]	; 12c4 <m_challenge+0x764>
     c44:	ldr	r2, [r8, r2]
     c48:	add	r1, pc, r1
     c4c:	add	r2, r2, #88	; 0x58
     c50:	bl	88c <sendto_one@plt>
     c54:	ldr	r1, [pc, #1644]	; 12c8 <m_challenge+0x768>
     c58:	mov	r3, r7
     c5c:	mov	r0, #4
     c60:	ldr	r2, [r4, #24]
     c64:	add	r1, pc, r1
     c68:	ldr	r2, [r2, #32]
     c6c:	stm	sp, {r9, sl}
     c70:	str	r6, [sp, #8]
     c74:	bl	964 <ilog@plt>
     c78:	ldr	r3, [pc, #1612]	; 12cc <m_challenge+0x76c>
     c7c:	ldr	r3, [r8, r3]
     c80:	ldr	r3, [r3, #84]	; 0x54
     c84:	cmp	r3, #0
     c88:	bne	1180 <m_challenge+0x620>
     c8c:	mov	r0, r5
     c90:	bl	898 <free@plt>
     c94:	add	r1, r4, #432	; 0x1b0
     c98:	add	r0, r4, #24
     c9c:	bl	af4 <cleanup_challenge.isra.0>
     ca0:	add	sp, sp, #668	; 0x29c
     ca4:	ldrd	r4, [sp]
     ca8:	ldrd	r6, [sp, #8]
     cac:	ldrd	r8, [sp, #16]
     cb0:	ldrd	sl, [sp, #24]
     cb4:	add	sp, sp, #32
     cb8:	pop	{pc}		; (ldr pc, [sp], #4)
     cbc:	add	r6, r4, #288	; 0x120
     cc0:	add	r1, r4, #432	; 0x1b0
     cc4:	add	r0, r4, #24
     cc8:	add	r6, r6, #3
     ccc:	add	sl, r4, #152	; 0x98
     cd0:	bl	af4 <cleanup_challenge.isra.0>
     cd4:	mov	r2, r6
     cd8:	mov	r0, sl
     cdc:	ldr	r3, [r5, #4]
     ce0:	add	r1, r4, #227	; 0xe3
     ce4:	bl	9a0 <find_oper_conf@plt>
     ce8:	subs	r7, r0, #0
     cec:	beq	120c <m_challenge+0x6ac>
     cf0:	ldr	r9, [r7, #40]	; 0x28
     cf4:	cmp	r9, #0
     cf8:	beq	1284 <m_challenge+0x724>
     cfc:	ldr	r3, [r7, #20]
     d00:	tst	r3, #524288	; 0x80000
     d04:	bne	e70 <m_challenge+0x310>
     d08:	ldr	r1, [r7, #16]
     d0c:	cmp	r1, #0
     d10:	beq	d38 <m_challenge+0x1d8>
     d14:	ldr	r0, [r4, #444]	; 0x1bc
     d18:	cmp	r0, #0
     d1c:	beq	f5c <m_challenge+0x3fc>
     d20:	bl	8a4 <rb_strcasecmp@plt>
     d24:	cmp	r0, #0
     d28:	bne	f5c <m_challenge+0x3fc>
     d2c:	ldr	r9, [r7, #40]	; 0x28
     d30:	cmp	r9, #0
     d34:	beq	e30 <m_challenge+0x2d0>
     d38:	add	r5, sp, #128	; 0x80
     d3c:	mov	r1, #128	; 0x80
     d40:	ldr	sl, [r4, #432]	; 0x1b0
     d44:	mov	r0, r5
     d48:	bl	904 <rb_get_random@plt>
     d4c:	cmp	r0, #0
     d50:	beq	de4 <m_challenge+0x284>
     d54:	add	r6, sp, #32
     d58:	mov	r0, r6
     d5c:	bl	970 <SHA1_Init@plt>
     d60:	mov	r2, #128	; 0x80
     d64:	mov	r1, r5
     d68:	mov	r0, r6
     d6c:	bl	94c <SHA1_Update@plt>
     d70:	mov	r0, #20
     d74:	bl	8f8 <malloc@plt>
     d78:	mov	r1, r6
     d7c:	str	r0, [sl, #284]	; 0x11c
     d80:	bl	9c4 <SHA1_Final@plt>
     d84:	mov	r0, r9
     d88:	bl	8bc <RSA_size@plt>
     d8c:	mov	r1, r0
     d90:	mov	r0, #1
     d94:	bl	85c <calloc@plt>
     d98:	subs	r6, r0, #0
     d9c:	beq	12b8 <m_challenge+0x758>
     da0:	mov	r0, #4
     da4:	mov	r1, r5
     da8:	mov	r3, r9
     dac:	mov	r2, r6
     db0:	str	r0, [sp]
     db4:	mov	r0, #128	; 0x80
     db8:	bl	880 <RSA_public_encrypt@plt>
     dbc:	subs	r1, r0, #0
     dc0:	mov	r0, r6
     dc4:	bge	fd4 <m_challenge+0x474>
     dc8:	bl	898 <free@plt>
     dcc:	ldr	r0, [sl, #284]	; 0x11c
     dd0:	cmp	r0, #0
     dd4:	beq	ddc <m_challenge+0x27c>
     dd8:	bl	898 <free@plt>
     ddc:	mov	r3, #0
     de0:	str	r3, [sl, #284]	; 0x11c
     de4:	ldr	r6, [pc, #1252]	; 12d0 <m_challenge+0x770>
     de8:	mov	r2, #0
     dec:	mov	r0, #2
     df0:	mov	r1, #0
     df4:	mov	r5, #100	; 0x64
     df8:	bl	91c <OPENSSL_init_crypto@plt>
     dfc:	add	r6, pc, r6
     e00:	b	e24 <m_challenge+0x2c4>
     e04:	mov	r1, #0
     e08:	bl	958 <ERR_error_string@plt>
     e0c:	mov	r2, r0
     e10:	mov	r1, r6
     e14:	mov	r0, #0
     e18:	bl	964 <ilog@plt>
     e1c:	subs	r5, r5, #1
     e20:	beq	e30 <m_challenge+0x2d0>
     e24:	bl	97c <ERR_get_error@plt>
     e28:	cmp	r0, #0
     e2c:	bne	e04 <m_challenge+0x2a4>
     e30:	ldr	r1, [pc, #1180]	; 12d4 <m_challenge+0x774>
     e34:	mov	r0, r4
     e38:	add	r1, pc, r1
     e3c:	bl	988 <sendto_one_notice@plt>
     e40:	b	ca0 <m_challenge+0x140>
     e44:	ldr	r2, [pc, #1140]	; 12c0 <m_challenge+0x760>
     e48:	mov	r0, r4
     e4c:	add	r3, r4, #88	; 0x58
     e50:	ldr	r1, [pc, #1152]	; 12d8 <m_challenge+0x778>
     e54:	ldr	r2, [r8, r2]
     e58:	add	r1, pc, r1
     e5c:	add	r2, r2, #88	; 0x58
     e60:	bl	88c <sendto_one@plt>
     e64:	mov	r0, r4
     e68:	bl	928 <send_oper_motd@plt>
     e6c:	b	ca0 <m_challenge+0x140>
     e70:	ldr	r1, [r4, #56]	; 0x38
     e74:	ands	fp, r1, #16384	; 0x4000
     e78:	bne	d08 <m_challenge+0x1a8>
     e7c:	ldr	r2, [pc, #1112]	; 12dc <m_challenge+0x77c>
     e80:	mov	r0, r4
     e84:	movw	r1, #491	; 0x1eb
     e88:	add	r7, r4, #163	; 0xa3
     e8c:	add	r4, r4, #88	; 0x58
     e90:	add	r2, pc, r2
     e94:	bl	934 <sendto_one_numeric@plt>
     e98:	ldr	r1, [pc, #1088]	; 12e0 <m_challenge+0x780>
     e9c:	mov	r3, r4
     ea0:	mov	r0, #4
     ea4:	str	sl, [sp]
     ea8:	str	r7, [sp, #4]
     eac:	str	r6, [sp, #8]
     eb0:	ldr	r2, [r5, #4]
     eb4:	add	r1, pc, r1
     eb8:	bl	964 <ilog@plt>
     ebc:	ldr	r3, [pc, #1032]	; 12cc <m_challenge+0x76c>
     ec0:	ldr	r3, [r8, r3]
     ec4:	ldr	r3, [r3, #84]	; 0x54
     ec8:	cmp	r3, #0
     ecc:	beq	ca0 <m_challenge+0x140>
     ed0:	ldr	r2, [pc, #1036]	; 12e4 <m_challenge+0x784>
     ed4:	mov	r3, r4
     ed8:	mov	r1, fp
     edc:	mov	r0, #256	; 0x100
     ee0:	str	sl, [sp]
     ee4:	str	r7, [sp, #4]
     ee8:	add	r2, pc, r2
     eec:	bl	8e0 <sendto_realops_snomask@plt>
     ef0:	b	ca0 <m_challenge+0x140>
     ef4:	ldr	r2, [pc, #964]	; 12c0 <m_challenge+0x760>
     ef8:	mov	r3, r7
     efc:	mov	r0, r4
     f00:	ldr	r1, [pc, #992]	; 12e8 <m_challenge+0x788>
     f04:	ldr	r2, [r8, r2]
     f08:	add	r1, pc, r1
     f0c:	add	r2, r2, #88	; 0x58
     f10:	bl	88c <sendto_one@plt>
     f14:	ldr	r1, [pc, #976]	; 12ec <m_challenge+0x78c>
     f18:	mov	r3, r7
     f1c:	mov	r0, #4
     f20:	ldr	r2, [r4, #24]
     f24:	add	r1, pc, r1
     f28:	ldr	r2, [r2, #32]
     f2c:	stm	sp, {r9, sl}
     f30:	str	r6, [sp, #8]
     f34:	bl	964 <ilog@plt>
     f38:	ldr	r3, [pc, #908]	; 12cc <m_challenge+0x76c>
     f3c:	ldr	r3, [r8, r3]
     f40:	ldr	r3, [r3, #84]	; 0x54
     f44:	cmp	r3, #0
     f48:	bne	1298 <m_challenge+0x738>
     f4c:	add	r1, r4, #432	; 0x1b0
     f50:	add	r0, r4, #24
     f54:	bl	af4 <cleanup_challenge.isra.0>
     f58:	b	ca0 <m_challenge+0x140>
     f5c:	ldr	r2, [pc, #908]	; 12f0 <m_challenge+0x790>
     f60:	mov	r0, r4
     f64:	movw	r1, #491	; 0x1eb
     f68:	add	r7, r4, #163	; 0xa3
     f6c:	add	r4, r4, #88	; 0x58
     f70:	add	r2, pc, r2
     f74:	bl	934 <sendto_one_numeric@plt>
     f78:	ldr	r1, [pc, #884]	; 12f4 <m_challenge+0x794>
     f7c:	mov	r3, r4
     f80:	mov	r0, #4
     f84:	str	sl, [sp]
     f88:	str	r7, [sp, #4]
     f8c:	str	r6, [sp, #8]
     f90:	ldr	r2, [r5, #4]
     f94:	add	r1, pc, r1
     f98:	bl	964 <ilog@plt>
     f9c:	ldr	r3, [pc, #808]	; 12cc <m_challenge+0x76c>
     fa0:	ldr	r3, [r8, r3]
     fa4:	ldr	r3, [r3, #84]	; 0x54
     fa8:	cmp	r3, #0
     fac:	beq	ca0 <m_challenge+0x140>
     fb0:	ldr	r2, [pc, #832]	; 12f8 <m_challenge+0x798>
     fb4:	mov	r3, r4
     fb8:	mov	r1, #0
     fbc:	mov	r0, #256	; 0x100
     fc0:	str	sl, [sp]
     fc4:	str	r7, [sp, #4]
     fc8:	add	r2, pc, r2
     fcc:	bl	8e0 <sendto_realops_snomask@plt>
     fd0:	b	ca0 <m_challenge+0x140>
     fd4:	bl	9b8 <rb_base64_encode@plt>
     fd8:	mov	r5, r0
     fdc:	mov	r0, r6
     fe0:	ldr	fp, [pc, #788]	; 12fc <m_challenge+0x79c>
     fe4:	add	sl, r4, #88	; 0x58
     fe8:	add	r6, sp, #256	; 0x100
     fec:	str	r5, [sp, #20]
     ff0:	bl	898 <free@plt>
     ff4:	ldr	r9, [r4, #432]	; 0x1b0
     ff8:	bl	868 <rb_current_time@plt>
     ffc:	ldr	r3, [pc, #700]	; 12c0 <m_challenge+0x760>
    1000:	add	fp, pc, fp
    1004:	str	r0, [r9, #304]	; 0x130
    1008:	ldr	r9, [r8, r3]
    100c:	add	r9, r9, #88	; 0x58
    1010:	b	1018 <m_challenge+0x4b8>
    1014:	add	r5, r5, #404	; 0x194
    1018:	movw	r2, #405	; 0x195
    101c:	mov	r1, r5
    1020:	mov	r0, r6
    1024:	bl	994 <rb_strlcpy@plt>
    1028:	mov	r8, r0
    102c:	mov	r3, sl
    1030:	str	r6, [sp]
    1034:	mov	r2, r9
    1038:	mov	r1, fp
    103c:	mov	r0, r4
    1040:	bl	88c <sendto_one@plt>
    1044:	movw	r3, #405	; 0x195
    1048:	cmp	r8, r3
    104c:	bhi	1014 <m_challenge+0x4b4>
    1050:	ldr	r1, [pc, #680]	; 1300 <m_challenge+0x7a0>
    1054:	mov	r3, sl
    1058:	mov	r2, r9
    105c:	mov	r0, r4
    1060:	add	r1, pc, r1
    1064:	bl	88c <sendto_one@plt>
    1068:	ldr	r3, [sp, #20]
    106c:	cmp	r3, #0
    1070:	beq	107c <m_challenge+0x51c>
    1074:	mov	r0, r3
    1078:	bl	898 <free@plt>
    107c:	ldr	r5, [r7]
    1080:	ldr	r6, [r4, #24]
    1084:	mov	r0, r5
    1088:	bl	940 <strlen@plt>
    108c:	add	r4, r0, #1
    1090:	mov	r0, r4
    1094:	bl	8f8 <malloc@plt>
    1098:	subs	r7, r0, #0
    109c:	beq	12b8 <m_challenge+0x758>
    10a0:	mov	r2, r4
    10a4:	mov	r1, r5
    10a8:	bl	8b0 <memcpy@plt>
    10ac:	str	r7, [r6, #32]
    10b0:	b	ca0 <m_challenge+0x140>
    10b4:	ldr	r2, [pc, #516]	; 12c0 <m_challenge+0x760>
    10b8:	mov	r3, r7
    10bc:	mov	r0, r4
    10c0:	ldr	r1, [pc, #572]	; 1304 <m_challenge+0x7a4>
    10c4:	ldr	r2, [r8, r2]
    10c8:	add	r1, pc, r1
    10cc:	add	r2, r2, #88	; 0x58
    10d0:	bl	88c <sendto_one@plt>
    10d4:	ldr	r1, [pc, #556]	; 1308 <m_challenge+0x7a8>
    10d8:	mov	r3, r7
    10dc:	mov	r0, #4
    10e0:	ldr	r2, [r4, #24]
    10e4:	add	r1, pc, r1
    10e8:	ldr	r2, [r2, #32]
    10ec:	stm	sp, {r9, sl}
    10f0:	str	r6, [sp, #8]
    10f4:	bl	964 <ilog@plt>
    10f8:	ldr	r3, [pc, #460]	; 12cc <m_challenge+0x76c>
    10fc:	ldr	r3, [r8, r3]
    1100:	ldr	r3, [r3, #84]	; 0x54
    1104:	cmp	r3, #0
    1108:	bne	1180 <m_challenge+0x620>
    110c:	cmp	r5, #0
    1110:	bne	c8c <m_challenge+0x12c>
    1114:	b	f4c <m_challenge+0x3ec>
    1118:	mov	r0, r5
    111c:	bl	898 <free@plt>
    1120:	ldr	r3, [r4, #24]
    1124:	mov	r2, r6
    1128:	add	r1, r4, #227	; 0xe3
    112c:	mov	r0, r9
    1130:	ldr	r3, [r3, #32]
    1134:	bl	9a0 <find_oper_conf@plt>
    1138:	subs	r5, r0, #0
    113c:	beq	11a0 <m_challenge+0x640>
    1140:	add	r1, r4, #432	; 0x1b0
    1144:	add	r0, r4, #24
    1148:	bl	af4 <cleanup_challenge.isra.0>
    114c:	mov	r1, r5
    1150:	mov	r0, r4
    1154:	bl	9ac <oper_up@plt>
    1158:	ldr	r1, [pc, #428]	; 130c <m_challenge+0x7ac>
    115c:	mov	r3, r7
    1160:	mov	r0, #3
    1164:	ldr	r2, [r4, #24]
    1168:	add	r1, pc, r1
    116c:	ldr	r2, [r2, #32]
    1170:	stm	sp, {r9, sl}
    1174:	str	r6, [sp, #8]
    1178:	bl	964 <ilog@plt>
    117c:	b	ca0 <m_challenge+0x140>
    1180:	ldr	r2, [pc, #392]	; 1310 <m_challenge+0x7b0>
    1184:	mov	r1, #256	; 0x100
    1188:	mov	r3, r7
    118c:	mov	r0, r1
    1190:	stm	sp, {r9, sl}
    1194:	add	r2, pc, r2
    1198:	bl	8e0 <sendto_realops_snomask@plt>
    119c:	b	110c <m_challenge+0x5ac>
    11a0:	ldr	r2, [pc, #364]	; 1314 <m_challenge+0x7b4>
    11a4:	movw	r1, #491	; 0x1eb
    11a8:	mov	r0, r4
    11ac:	add	r2, pc, r2
    11b0:	bl	934 <sendto_one_numeric@plt>
    11b4:	ldr	r1, [pc, #348]	; 1318 <m_challenge+0x7b8>
    11b8:	mov	r3, r7
    11bc:	mov	r0, #4
    11c0:	ldr	r2, [r4, #24]
    11c4:	add	r1, pc, r1
    11c8:	ldr	r2, [r2, #32]
    11cc:	stm	sp, {r9, sl}
    11d0:	str	r6, [sp, #8]
    11d4:	bl	964 <ilog@plt>
    11d8:	ldr	r3, [pc, #236]	; 12cc <m_challenge+0x76c>
    11dc:	ldr	r3, [r8, r3]
    11e0:	ldr	r3, [r3, #84]	; 0x54
    11e4:	cmp	r3, #0
    11e8:	beq	ca0 <m_challenge+0x140>
    11ec:	ldr	r2, [pc, #296]	; 131c <m_challenge+0x7bc>
    11f0:	mov	r1, #256	; 0x100
    11f4:	mov	r3, r7
    11f8:	mov	r0, r1
    11fc:	stm	sp, {r9, sl}
    1200:	add	r2, pc, r2
    1204:	bl	8e0 <sendto_realops_snomask@plt>
    1208:	b	ca0 <m_challenge+0x140>
    120c:	ldr	r2, [pc, #268]	; 1320 <m_challenge+0x7c0>
    1210:	mov	r0, r4
    1214:	movw	r1, #491	; 0x1eb
    1218:	add	r7, r4, #163	; 0xa3
    121c:	add	r4, r4, #88	; 0x58
    1220:	add	r2, pc, r2
    1224:	bl	934 <sendto_one_numeric@plt>
    1228:	ldr	r1, [pc, #244]	; 1324 <m_challenge+0x7c4>
    122c:	mov	r3, r4
    1230:	mov	r0, #4
    1234:	str	sl, [sp]
    1238:	str	r7, [sp, #4]
    123c:	str	r6, [sp, #8]
    1240:	ldr	r2, [r5, #4]
    1244:	add	r1, pc, r1
    1248:	bl	964 <ilog@plt>
    124c:	ldr	r3, [pc, #120]	; 12cc <m_challenge+0x76c>
    1250:	ldr	r3, [r8, r3]
    1254:	ldr	r3, [r3, #84]	; 0x54
    1258:	cmp	r3, #0
    125c:	beq	ca0 <m_challenge+0x140>
    1260:	ldr	r2, [pc, #192]	; 1328 <m_challenge+0x7c8>
    1264:	mov	r1, #256	; 0x100
    1268:	mov	r3, r4
    126c:	mov	r0, r1
    1270:	str	sl, [sp]
    1274:	str	r7, [sp, #4]
    1278:	add	r2, pc, r2
    127c:	bl	8e0 <sendto_realops_snomask@plt>
    1280:	b	ca0 <m_challenge+0x140>
    1284:	ldr	r1, [pc, #160]	; 132c <m_challenge+0x7cc>
    1288:	mov	r0, r4
    128c:	add	r1, pc, r1
    1290:	bl	988 <sendto_one_notice@plt>
    1294:	b	ca0 <m_challenge+0x140>
    1298:	ldr	r2, [pc, #144]	; 1330 <m_challenge+0x7d0>
    129c:	mov	r1, #256	; 0x100
    12a0:	mov	r3, r7
    12a4:	mov	r0, r1
    12a8:	stm	sp, {r9, sl}
    12ac:	add	r2, pc, r2
    12b0:	bl	8e0 <sendto_realops_snomask@plt>
    12b4:	b	f4c <m_challenge+0x3ec>
    12b8:	bl	8c8 <rb_outofmemory@plt>
    12bc:	.word	0x00011464
    12c0:	.word	0x00000098
    12c4:	.word	0x000007c4
    12c8:	.word	0x0000081c
    12cc:	.word	0x0000009c
    12d0:	.word	0x00000908
    12d4:	.word	0x000008ac
    12d8:	.word	0x00000528
    12dc:	.word	0x00000644
    12e0:	.word	0x00000718
    12e4:	.word	0x00000724
    12e8:	.word	0x00000504
    12ec:	.word	0x00000508
    12f0:	.word	0x00000564
    12f4:	.word	0x000006b4
    12f8:	.word	0x000006d0
    12fc:	.word	0x00000714
    1300:	.word	0x000006c4
    1304:	.word	0x00000344
    1308:	.word	0x0000039c
    130c:	.word	0x00000404
    1310:	.word	0x00000318
    1314:	.word	0x00000328
    1318:	.word	0x0000034c
    131c:	.word	0x00000334
    1320:	.word	0x000002b4
    1324:	.word	0x000002cc
    1328:	.word	0x000002bc
    132c:	.word	0x000002fc
    1330:	.word	0x000001ac

Disassembly of section .fini:

00001334 <_fini>:
    1334:	push	{r3, lr}
    1338:	pop	{r3, pc}
