
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

000119d0 <.init>:
   119d0:	push	{r3, lr}
   119d4:	bl	14efc <__assert_fail@plt+0x2fb4>
   119d8:	pop	{r3, pc}

Disassembly of section .plt:

000119dc <pthread_mutex_unlock@plt-0x14>:
   119dc:	push	{lr}		; (str lr, [sp, #-4]!)
   119e0:	ldr	lr, [pc, #4]	; 119ec <pthread_mutex_unlock@plt-0x4>
   119e4:	add	lr, pc, lr
   119e8:	ldr	pc, [lr, #8]!
   119ec:	andeq	r4, r2, r4, lsl r6

000119f0 <pthread_mutex_unlock@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #36, 20	; 0x24000
   119f8:	ldr	pc, [ip, #1556]!	; 0x614

000119fc <fdopen@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #36, 20	; 0x24000
   11a04:	ldr	pc, [ip, #1548]!	; 0x60c

00011a08 <calloc@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #36, 20	; 0x24000
   11a10:	ldr	pc, [ip, #1540]!	; 0x604

00011a14 <fputs_unlocked@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #36, 20	; 0x24000
   11a1c:	ldr	pc, [ip, #1532]!	; 0x5fc

00011a20 <raise@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #36, 20	; 0x24000
   11a28:	ldr	pc, [ip, #1524]!	; 0x5f4

00011a2c <strcmp@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #36, 20	; 0x24000
   11a34:	ldr	pc, [ip, #1516]!	; 0x5ec

00011a38 <strtol@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #36, 20	; 0x24000
   11a40:	ldr	pc, [ip, #1508]!	; 0x5e4

00011a44 <posix_fadvise64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #36, 20	; 0x24000
   11a4c:	ldr	pc, [ip, #1500]!	; 0x5dc

00011a50 <pause@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #36, 20	; 0x24000
   11a58:	ldr	pc, [ip, #1492]!	; 0x5d4

00011a5c <pthread_mutex_destroy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #36, 20	; 0x24000
   11a64:	ldr	pc, [ip, #1484]!	; 0x5cc

00011a68 <fflush@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #36, 20	; 0x24000
   11a70:	ldr	pc, [ip, #1476]!	; 0x5c4

00011a74 <wcwidth@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #36, 20	; 0x24000
   11a7c:	ldr	pc, [ip, #1468]!	; 0x5bc

00011a80 <memmove@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #36, 20	; 0x24000
   11a88:	ldr	pc, [ip, #1460]!	; 0x5b4

00011a8c <free@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #36, 20	; 0x24000
   11a94:	ldr	pc, [ip, #1452]!	; 0x5ac

00011a98 <pthread_mutex_lock@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #36, 20	; 0x24000
   11aa0:	ldr	pc, [ip, #1444]!	; 0x5a4

00011aa4 <nanosleep@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #36, 20	; 0x24000
   11aac:	ldr	pc, [ip, #1436]!	; 0x59c

00011ab0 <ferror@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #36, 20	; 0x24000
   11ab8:	ldr	pc, [ip, #1428]!	; 0x594

00011abc <_exit@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #36, 20	; 0x24000
   11ac4:	ldr	pc, [ip, #1420]!	; 0x58c

00011ac8 <memcpy@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #36, 20	; 0x24000
   11ad0:	ldr	pc, [ip, #1412]!	; 0x584

00011ad4 <execlp@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #36, 20	; 0x24000
   11adc:	ldr	pc, [ip, #1404]!	; 0x57c

00011ae0 <pthread_mutex_init@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #36, 20	; 0x24000
   11ae8:	ldr	pc, [ip, #1396]!	; 0x574

00011aec <__strtoull_internal@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #36, 20	; 0x24000
   11af4:	ldr	pc, [ip, #1388]!	; 0x56c

00011af8 <mbsinit@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #36, 20	; 0x24000
   11b00:	ldr	pc, [ip, #1380]!	; 0x564

00011b04 <signal@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #36, 20	; 0x24000
   11b0c:	ldr	pc, [ip, #1372]!	; 0x55c

00011b10 <__sched_cpucount@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #36, 20	; 0x24000
   11b18:	ldr	pc, [ip, #1364]!	; 0x554

00011b1c <strtold@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #36, 20	; 0x24000
   11b24:	ldr	pc, [ip, #1356]!	; 0x54c

00011b28 <ftruncate64@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #36, 20	; 0x24000
   11b30:	ldr	pc, [ip, #1348]!	; 0x544

00011b34 <fwrite_unlocked@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #36, 20	; 0x24000
   11b3c:	ldr	pc, [ip, #1340]!	; 0x53c

00011b40 <memcmp@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #36, 20	; 0x24000
   11b48:	ldr	pc, [ip, #1332]!	; 0x534

00011b4c <fputc_unlocked@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #36, 20	; 0x24000
   11b54:	ldr	pc, [ip, #1324]!	; 0x52c

00011b58 <dcgettext@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #36, 20	; 0x24000
   11b60:	ldr	pc, [ip, #1316]!	; 0x524

00011b64 <pthread_cond_init@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #36, 20	; 0x24000
   11b6c:	ldr	pc, [ip, #1308]!	; 0x51c

00011b70 <sysconf@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #36, 20	; 0x24000
   11b78:	ldr	pc, [ip, #1300]!	; 0x514

00011b7c <unlink@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #36, 20	; 0x24000
   11b84:	ldr	pc, [ip, #1292]!	; 0x50c

00011b88 <dup2@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #36, 20	; 0x24000
   11b90:	ldr	pc, [ip, #1284]!	; 0x504

00011b94 <getrlimit64@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #36, 20	; 0x24000
   11b9c:	ldr	pc, [ip, #1276]!	; 0x4fc

00011ba0 <realloc@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #36, 20	; 0x24000
   11ba8:	ldr	pc, [ip, #1268]!	; 0x4f4

00011bac <sigismember@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #36, 20	; 0x24000
   11bb4:	ldr	pc, [ip, #1260]!	; 0x4ec

00011bb8 <textdomain@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #36, 20	; 0x24000
   11bc0:	ldr	pc, [ip, #1252]!	; 0x4e4

00011bc4 <iswcntrl@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #36, 20	; 0x24000
   11bcc:	ldr	pc, [ip, #1244]!	; 0x4dc

00011bd0 <pthread_cond_destroy@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #36, 20	; 0x24000
   11bd8:	ldr	pc, [ip, #1236]!	; 0x4d4

00011bdc <fflush_unlocked@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #36, 20	; 0x24000
   11be4:	ldr	pc, [ip, #1228]!	; 0x4cc

00011be8 <iswprint@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #36, 20	; 0x24000
   11bf0:	ldr	pc, [ip, #1220]!	; 0x4c4

00011bf4 <__fxstat64@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #36, 20	; 0x24000
   11bfc:	ldr	pc, [ip, #1212]!	; 0x4bc

00011c00 <sigaction@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #36, 20	; 0x24000
   11c08:	ldr	pc, [ip, #1204]!	; 0x4b4

00011c0c <mkostemp64@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #36, 20	; 0x24000
   11c14:	ldr	pc, [ip, #1196]!	; 0x4ac

00011c18 <fwrite@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #36, 20	; 0x24000
   11c20:	ldr	pc, [ip, #1188]!	; 0x4a4

00011c24 <lseek64@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #36, 20	; 0x24000
   11c2c:	ldr	pc, [ip, #1180]!	; 0x49c

00011c30 <__stpcpy_chk@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #36, 20	; 0x24000
   11c38:	ldr	pc, [ip, #1172]!	; 0x494

00011c3c <waitpid@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #36, 20	; 0x24000
   11c44:	ldr	pc, [ip, #1164]!	; 0x48c

00011c48 <__ctype_get_mb_cur_max@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #36, 20	; 0x24000
   11c50:	ldr	pc, [ip, #1156]!	; 0x484

00011c54 <strcpy@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #36, 20	; 0x24000
   11c5c:	ldr	pc, [ip, #1148]!	; 0x47c

00011c60 <pthread_sigmask@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #36, 20	; 0x24000
   11c68:	ldr	pc, [ip, #1140]!	; 0x474

00011c6c <pthread_create@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #36, 20	; 0x24000
   11c74:	ldr	pc, [ip, #1132]!	; 0x46c

00011c78 <__fpending@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #36, 20	; 0x24000
   11c80:	ldr	pc, [ip, #1124]!	; 0x464

00011c84 <mbrtowc@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #36, 20	; 0x24000
   11c8c:	ldr	pc, [ip, #1116]!	; 0x45c

00011c90 <error@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #36, 20	; 0x24000
   11c98:	ldr	pc, [ip, #1108]!	; 0x454

00011c9c <open64@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #36, 20	; 0x24000
   11ca4:	ldr	pc, [ip, #1100]!	; 0x44c

00011ca8 <strcoll@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #36, 20	; 0x24000
   11cb0:	ldr	pc, [ip, #1092]!	; 0x444

00011cb4 <getenv@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #36, 20	; 0x24000
   11cbc:	ldr	pc, [ip, #1084]!	; 0x43c

00011cc0 <mkstemp64@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #36, 20	; 0x24000
   11cc8:	ldr	pc, [ip, #1076]!	; 0x434

00011ccc <sysinfo@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #36, 20	; 0x24000
   11cd4:	ldr	pc, [ip, #1068]!	; 0x42c

00011cd8 <malloc@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #36, 20	; 0x24000
   11ce0:	ldr	pc, [ip, #1060]!	; 0x424

00011ce4 <sigaddset@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #36, 20	; 0x24000
   11cec:	ldr	pc, [ip, #1052]!	; 0x41c

00011cf0 <__libc_start_main@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #36, 20	; 0x24000
   11cf8:	ldr	pc, [ip, #1044]!	; 0x414

00011cfc <__freading@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #36, 20	; 0x24000
   11d04:	ldr	pc, [ip, #1036]!	; 0x40c

00011d08 <__ctype_toupper_loc@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #36, 20	; 0x24000
   11d10:	ldr	pc, [ip, #1028]!	; 0x404

00011d14 <__gmon_start__@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #36, 20	; 0x24000
   11d1c:	ldr	pc, [ip, #1020]!	; 0x3fc

00011d20 <getopt_long@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #36, 20	; 0x24000
   11d28:	ldr	pc, [ip, #1012]!	; 0x3f4

00011d2c <__ctype_b_loc@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #36, 20	; 0x24000
   11d34:	ldr	pc, [ip, #1004]!	; 0x3ec

00011d38 <exit@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #36, 20	; 0x24000
   11d40:	ldr	pc, [ip, #996]!	; 0x3e4

00011d44 <strtoul@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #36, 20	; 0x24000
   11d4c:	ldr	pc, [ip, #988]!	; 0x3dc

00011d50 <strlen@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #36, 20	; 0x24000
   11d58:	ldr	pc, [ip, #980]!	; 0x3d4

00011d5c <strchr@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #36, 20	; 0x24000
   11d64:	ldr	pc, [ip, #972]!	; 0x3cc

00011d68 <strxfrm@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #36, 20	; 0x24000
   11d70:	ldr	pc, [ip, #964]!	; 0x3c4

00011d74 <__errno_location@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #36, 20	; 0x24000
   11d7c:	ldr	pc, [ip, #956]!	; 0x3bc

00011d80 <__cxa_atexit@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #36, 20	; 0x24000
   11d88:	ldr	pc, [ip, #948]!	; 0x3b4

00011d8c <setvbuf@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #36, 20	; 0x24000
   11d94:	ldr	pc, [ip, #940]!	; 0x3ac

00011d98 <memset@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #36, 20	; 0x24000
   11da0:	ldr	pc, [ip, #932]!	; 0x3a4

00011da4 <fgetc@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #36, 20	; 0x24000
   11dac:	ldr	pc, [ip, #924]!	; 0x39c

00011db0 <__printf_chk@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #36, 20	; 0x24000
   11db8:	ldr	pc, [ip, #916]!	; 0x394

00011dbc <write@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #36, 20	; 0x24000
   11dc4:	ldr	pc, [ip, #908]!	; 0x38c

00011dc8 <fileno@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #36, 20	; 0x24000
   11dd0:	ldr	pc, [ip, #900]!	; 0x384

00011dd4 <__fprintf_chk@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #36, 20	; 0x24000
   11ddc:	ldr	pc, [ip, #892]!	; 0x37c

00011de0 <memchr@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #36, 20	; 0x24000
   11de8:	ldr	pc, [ip, #884]!	; 0x374

00011dec <fclose@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #36, 20	; 0x24000
   11df4:	ldr	pc, [ip, #876]!	; 0x36c

00011df8 <pipe@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #36, 20	; 0x24000
   11e00:	ldr	pc, [ip, #868]!	; 0x364

00011e04 <fseeko64@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #36, 20	; 0x24000
   11e0c:	ldr	pc, [ip, #860]!	; 0x35c

00011e10 <fcntl64@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #36, 20	; 0x24000
   11e18:	ldr	pc, [ip, #852]!	; 0x354

00011e1c <__overflow@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #36, 20	; 0x24000
   11e24:	ldr	pc, [ip, #844]!	; 0x34c

00011e28 <setlocale@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #36, 20	; 0x24000
   11e30:	ldr	pc, [ip, #836]!	; 0x344

00011e34 <sigemptyset@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #36, 20	; 0x24000
   11e3c:	ldr	pc, [ip, #828]!	; 0x33c

00011e40 <fork@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #36, 20	; 0x24000
   11e48:	ldr	pc, [ip, #820]!	; 0x334

00011e4c <__explicit_bzero_chk@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #36, 20	; 0x24000
   11e54:	ldr	pc, [ip, #812]!	; 0x32c

00011e58 <strrchr@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #36, 20	; 0x24000
   11e60:	ldr	pc, [ip, #804]!	; 0x324

00011e64 <pthread_join@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #36, 20	; 0x24000
   11e6c:	ldr	pc, [ip, #796]!	; 0x31c

00011e70 <nl_langinfo@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #36, 20	; 0x24000
   11e78:	ldr	pc, [ip, #788]!	; 0x314

00011e7c <localeconv@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #36, 20	; 0x24000
   11e84:	ldr	pc, [ip, #780]!	; 0x30c

00011e88 <clearerr_unlocked@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #36, 20	; 0x24000
   11e90:	ldr	pc, [ip, #772]!	; 0x304

00011e94 <fopen64@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #36, 20	; 0x24000
   11e9c:	ldr	pc, [ip, #764]!	; 0x2fc

00011ea0 <qsort@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #36, 20	; 0x24000
   11ea8:	ldr	pc, [ip, #756]!	; 0x2f4

00011eac <pipe2@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #36, 20	; 0x24000
   11eb4:	ldr	pc, [ip, #748]!	; 0x2ec

00011eb8 <pthread_cond_wait@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #36, 20	; 0x24000
   11ec0:	ldr	pc, [ip, #740]!	; 0x2e4

00011ec4 <euidaccess@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #36, 20	; 0x24000
   11ecc:	ldr	pc, [ip, #732]!	; 0x2dc

00011ed0 <sched_getaffinity@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #36, 20	; 0x24000
   11ed8:	ldr	pc, [ip, #724]!	; 0x2d4

00011edc <bindtextdomain@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #36, 20	; 0x24000
   11ee4:	ldr	pc, [ip, #716]!	; 0x2cc

00011ee8 <fread_unlocked@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #36, 20	; 0x24000
   11ef0:	ldr	pc, [ip, #708]!	; 0x2c4

00011ef4 <getrandom@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #36, 20	; 0x24000
   11efc:	ldr	pc, [ip, #700]!	; 0x2bc

00011f00 <__xstat64@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #36, 20	; 0x24000
   11f08:	ldr	pc, [ip, #692]!	; 0x2b4

00011f0c <strncmp@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #36, 20	; 0x24000
   11f14:	ldr	pc, [ip, #684]!	; 0x2ac

00011f18 <pthread_cond_signal@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #36, 20	; 0x24000
   11f20:	ldr	pc, [ip, #676]!	; 0x2a4

00011f24 <abort@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #36, 20	; 0x24000
   11f2c:	ldr	pc, [ip, #668]!	; 0x29c

00011f30 <close@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #36, 20	; 0x24000
   11f38:	ldr	pc, [ip, #660]!	; 0x294

00011f3c <dcngettext@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #36, 20	; 0x24000
   11f44:	ldr	pc, [ip, #652]!	; 0x28c

00011f48 <__assert_fail@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #36, 20	; 0x24000
   11f50:	ldr	pc, [ip, #644]!	; 0x284

Disassembly of section .text:

00011f58 <_obstack_begin@@Base-0x10ad4>:
   11f58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f5c:	mov	r4, #2
   11f60:	strd	r6, [sp, #8]
   11f64:	mov	r7, r1
   11f68:	strd	r8, [sp, #16]
   11f6c:	strd	sl, [sp, #24]
   11f70:	movw	fp, #25312	; 0x62e0
   11f74:	movt	fp, #3
   11f78:	str	lr, [sp, #32]
   11f7c:	vpush	{d8-d10}
   11f80:	sub	sp, sp, #548	; 0x224
   11f84:	str	r0, [sp, #36]	; 0x24
   11f88:	movw	r0, #18948	; 0x4a04
   11f8c:	movt	r0, #2
   11f90:	bl	11cb4 <getenv@plt>
   11f94:	adds	r3, r0, #0
   11f98:	str	r0, [sp, #76]	; 0x4c
   11f9c:	movne	r3, #1
   11fa0:	str	r3, [sp, #24]
   11fa4:	bl	1d478 <__assert_fail@plt+0xb530>
   11fa8:	sub	r3, r0, #199680	; 0x30c00
   11fac:	ldr	r0, [r7]
   11fb0:	sub	r3, r3, #432	; 0x1b0
   11fb4:	cmp	r3, #696	; 0x2b8
   11fb8:	movls	r3, #0
   11fbc:	movhi	r3, #1
   11fc0:	str	r3, [sp, #40]	; 0x28
   11fc4:	bl	1d4dc <__assert_fail@plt+0xb594>
   11fc8:	movw	r1, #16120	; 0x3ef8
   11fcc:	movt	r1, #2
   11fd0:	mov	r0, #6
   11fd4:	bl	11e28 <setlocale@plt>
   11fd8:	movw	r1, #18964	; 0x4a14
   11fdc:	movt	r1, #2
   11fe0:	str	r0, [sp, #80]	; 0x50
   11fe4:	movw	r0, #18768	; 0x4950
   11fe8:	movt	r0, #2
   11fec:	bl	11edc <bindtextdomain@plt>
   11ff0:	movw	r0, #18768	; 0x4950
   11ff4:	movt	r0, #2
   11ff8:	bl	11bb8 <textdomain@plt>
   11ffc:	movw	r3, #25200	; 0x6270
   12000:	movt	r3, #3
   12004:	mov	r0, #3
   12008:	str	r4, [r3]
   1200c:	bl	1b7a0 <__assert_fail@plt+0x9858>
   12010:	strb	r0, [fp, #1176]	; 0x498
   12014:	mov	r0, r4
   12018:	bl	1b7a0 <__assert_fail@plt+0x9858>
   1201c:	mov	r4, r0
   12020:	strb	r0, [fp, #1496]	; 0x5d8
   12024:	bl	11e7c <localeconv@plt>
   12028:	ldr	r2, [r0]
   1202c:	ldrb	r3, [r2]
   12030:	cmp	r3, #0
   12034:	strb	r3, [fp, #4]
   12038:	beq	12110 <__assert_fail@plt+0x1c8>
   1203c:	ldrb	r3, [r2, #1]
   12040:	cmp	r3, #0
   12044:	bne	12110 <__assert_fail@plt+0x1c8>
   12048:	ldr	r2, [r0, #4]
   1204c:	ldrb	r3, [r2]
   12050:	cmp	r3, #0
   12054:	str	r3, [fp]
   12058:	beq	12a48 <__assert_fail@plt+0xb00>
   1205c:	ldrb	r3, [r2, #1]
   12060:	cmp	r3, #0
   12064:	bne	12a40 <__assert_fail@plt+0xaf8>
   12068:	mov	r5, #0
   1206c:	ldr	r6, [pc, #908]	; 12400 <__assert_fail@plt+0x4b8>
   12070:	mov	r9, #1
   12074:	strb	r5, [fp, #1464]	; 0x5b8
   12078:	bl	11d2c <__ctype_b_loc@plt>
   1207c:	mov	sl, r0
   12080:	str	r0, [sp, #56]	; 0x38
   12084:	bl	11d08 <__ctype_toupper_loc@plt>
   12088:	ldr	lr, [pc, #884]	; 12404 <__assert_fail@plt+0x4bc>
   1208c:	sub	r8, r6, #256	; 0x100
   12090:	mov	r1, r5
   12094:	mov	r2, sl
   12098:	add	ip, lr, #768	; 0x300
   1209c:	b	120e4 <__assert_fail@plt+0x19c>
   120a0:	cmp	r1, #10
   120a4:	beq	1211c <__assert_fail@plt+0x1d4>
   120a8:	eor	sl, r3, #16384	; 0x4000
   120ac:	eor	r3, r3, #8
   120b0:	strb	r5, [lr]
   120b4:	ubfx	sl, sl, #14, #1
   120b8:	ubfx	r5, r3, #3, #1
   120bc:	strb	sl, [ip]
   120c0:	ldr	r3, [r0]
   120c4:	add	lr, lr, #1
   120c8:	add	ip, ip, #1
   120cc:	strb	r5, [r6, #1]!
   120d0:	ldr	r3, [r3, r1, lsl #2]
   120d4:	add	r1, r1, #1
   120d8:	cmp	r1, #256	; 0x100
   120dc:	strb	r3, [r8, #1]!
   120e0:	beq	12134 <__assert_fail@plt+0x1ec>
   120e4:	ldr	sl, [r2]
   120e8:	lsl	r3, r1, #1
   120ec:	ldrh	r3, [sl, r3]
   120f0:	ands	r5, r3, #1
   120f4:	beq	120a0 <__assert_fail@plt+0x158>
   120f8:	eor	r3, r3, #16384	; 0x4000
   120fc:	mov	r5, #0
   12100:	strb	r9, [lr]
   12104:	ubfx	r3, r3, #14, #1
   12108:	strb	r3, [ip]
   1210c:	b	120c0 <__assert_fail@plt+0x178>
   12110:	mov	r3, #46	; 0x2e
   12114:	strb	r3, [fp, #4]
   12118:	b	12048 <__assert_fail@plt+0x100>
   1211c:	ldrh	r3, [sl, #20]
   12120:	strb	r9, [fp, #18]
   12124:	eor	r3, r3, #16384	; 0x4000
   12128:	ubfx	r3, r3, #14, #1
   1212c:	strb	r3, [fp, #786]	; 0x312
   12130:	b	120c0 <__assert_fail@plt+0x178>
   12134:	cmp	r4, #0
   12138:	beq	12208 <__assert_fail@plt+0x2c0>
   1213c:	str	r7, [sp, #44]	; 0x2c
   12140:	mov	r9, #0
   12144:	movw	r4, #25060	; 0x61e4
   12148:	movt	r4, #3
   1214c:	ldr	r7, [sp, #56]	; 0x38
   12150:	mov	r5, r9
   12154:	add	r0, r9, #131072	; 0x20000
   12158:	add	r0, r0, #14
   1215c:	bl	11e70 <nl_langinfo@plt>
   12160:	mov	r8, r0
   12164:	bl	11d50 <strlen@plt>
   12168:	mov	r6, r0
   1216c:	add	r0, r0, #1
   12170:	bl	20f80 <__assert_fail@plt+0xf038>
   12174:	str	r0, [r4, r9, lsl #3]
   12178:	add	r9, r9, #1
   1217c:	cmp	r6, #0
   12180:	add	r3, r4, r9, lsl #3
   12184:	str	r9, [r3, #-4]
   12188:	beq	12a54 <__assert_fail@plt+0xb0c>
   1218c:	ldr	sl, [r7]
   12190:	sub	r6, r6, #1
   12194:	sub	r1, r8, #1
   12198:	mov	ip, #0
   1219c:	add	r8, r8, r6
   121a0:	mov	r2, r0
   121a4:	ldrb	r3, [r1, #1]!
   121a8:	mov	lr, r2
   121ac:	lsl	r6, r3, #1
   121b0:	ldrh	r6, [sl, r6]
   121b4:	tst	r6, #1
   121b8:	bne	121d4 <__assert_fail@plt+0x28c>
   121bc:	add	r3, fp, r3
   121c0:	add	ip, ip, #1
   121c4:	ldrb	r3, [r3, #264]	; 0x108
   121c8:	strb	r3, [r2]
   121cc:	add	r2, r0, ip
   121d0:	mov	lr, r2
   121d4:	cmp	r8, r1
   121d8:	bne	121a4 <__assert_fail@plt+0x25c>
   121dc:	cmp	r9, #12
   121e0:	strb	r5, [lr]
   121e4:	bne	12154 <__assert_fail@plt+0x20c>
   121e8:	movw	r3, #21680	; 0x54b0
   121ec:	movt	r3, #1
   121f0:	ldr	r7, [sp, #44]	; 0x2c
   121f4:	movw	r0, #25060	; 0x61e4
   121f8:	movt	r0, #3
   121fc:	mov	r1, r9
   12200:	mov	r2, #8
   12204:	bl	11ea0 <qsort@plt>
   12208:	ldr	r8, [pc, #504]	; 12408 <__assert_fail@plt+0x4c0>
   1220c:	mov	r9, #14
   12210:	ldr	r5, [pc, #500]	; 1240c <__assert_fail@plt+0x4c4>
   12214:	mov	r0, r8
   12218:	add	r6, r5, #40	; 0x28
   1221c:	mov	r4, r5
   12220:	bl	11e34 <sigemptyset@plt>
   12224:	b	1222c <__assert_fail@plt+0x2e4>
   12228:	ldr	r9, [r4, #4]!
   1222c:	add	r2, sp, #400	; 0x190
   12230:	mov	r1, #0
   12234:	mov	r0, r9
   12238:	bl	11c00 <sigaction@plt>
   1223c:	ldr	r3, [sp, #400]	; 0x190
   12240:	cmp	r3, #1
   12244:	beq	12254 <__assert_fail@plt+0x30c>
   12248:	mov	r1, r9
   1224c:	mov	r0, r8
   12250:	bl	11ce4 <sigaddset@plt>
   12254:	cmp	r6, r4
   12258:	bne	12228 <__assert_fail@plt+0x2e0>
   1225c:	ldr	r6, [pc, #420]	; 12408 <__assert_fail@plt+0x4c0>
   12260:	movw	r3, #21836	; 0x554c
   12264:	movt	r3, #1
   12268:	mov	r2, #128	; 0x80
   1226c:	add	r0, sp, #404	; 0x194
   12270:	str	r3, [sp, #400]	; 0x190
   12274:	mov	r8, #14
   12278:	mov	r1, r6
   1227c:	bl	11ac8 <memcpy@plt>
   12280:	mov	r3, #0
   12284:	str	r3, [sp, #532]	; 0x214
   12288:	b	12298 <__assert_fail@plt+0x350>
   1228c:	cmp	r4, r5
   12290:	beq	122c4 <__assert_fail@plt+0x37c>
   12294:	ldr	r8, [r5, #4]!
   12298:	mov	r1, r8
   1229c:	mov	r0, r6
   122a0:	bl	11bac <sigismember@plt>
   122a4:	cmp	r0, #0
   122a8:	beq	1228c <__assert_fail@plt+0x344>
   122ac:	mov	r0, r8
   122b0:	mov	r2, #0
   122b4:	add	r1, sp, #400	; 0x190
   122b8:	bl	11c00 <sigaction@plt>
   122bc:	cmp	r4, r5
   122c0:	bne	12294 <__assert_fail@plt+0x34c>
   122c4:	mov	r1, #0
   122c8:	mov	r0, #17
   122cc:	vldr	d9, [pc, #284]	; 123f0 <__assert_fail@plt+0x4a8>
   122d0:	bl	11b04 <signal@plt>
   122d4:	movw	r0, #28792	; 0x7078
   122d8:	movt	r0, #1
   122dc:	vldr	d8, [pc, #276]	; 123f8 <__assert_fail@plt+0x4b0>
   122e0:	bl	232dc <_obstack_memory_used@@Base+0x650>
   122e4:	mvn	r2, #0
   122e8:	ldr	r8, [sp, #36]	; 0x24
   122ec:	mov	r3, #0
   122f0:	mov	r1, #4
   122f4:	mov	r6, r3
   122f8:	mov	r5, r3
   122fc:	str	r3, [sp, #36]	; 0x24
   12300:	str	r2, [sp, #256]	; 0x100
   12304:	str	r2, [sp, #264]	; 0x108
   12308:	ldr	r2, [pc, #268]	; 1241c <__assert_fail@plt+0x4d4>
   1230c:	mov	r0, r8
   12310:	str	r3, [sp, #48]	; 0x30
   12314:	str	r3, [sp, #52]	; 0x34
   12318:	str	r3, [sp, #60]	; 0x3c
   1231c:	str	r3, [sp, #64]	; 0x40
   12320:	add	r2, r2, #572	; 0x23c
   12324:	str	r3, [sp, #68]	; 0x44
   12328:	str	r2, [sp, #72]	; 0x48
   1232c:	str	r3, [sp, #260]	; 0x104
   12330:	str	r3, [sp, #268]	; 0x10c
   12334:	str	r3, [sp, #272]	; 0x110
   12338:	str	r3, [sp, #276]	; 0x114
   1233c:	str	r3, [sp, #280]	; 0x118
   12340:	str	r3, [sp, #284]	; 0x11c
   12344:	str	r3, [sp, #288]	; 0x120
   12348:	str	r3, [sp, #292]	; 0x124
   1234c:	bl	210e8 <__assert_fail@plt+0xf1a0>
   12350:	mov	r4, r0
   12354:	str	fp, [sp, #44]	; 0x2c
   12358:	mov	fp, r8
   1235c:	b	123cc <__assert_fail@plt+0x484>
   12360:	ldr	r3, [sp, #24]
   12364:	cmp	r5, #0
   12368:	moveq	r3, #0
   1236c:	cmp	r3, #0
   12370:	beq	12444 <__assert_fail@plt+0x4fc>
   12374:	ldrd	r2, [sp, #36]	; 0x24
   12378:	movw	sl, #25280	; 0x62c0
   1237c:	movt	sl, #3
   12380:	eor	r3, r3, #1
   12384:	cmp	r2, #0
   12388:	orrne	r3, r3, #1
   1238c:	cmp	r3, #0
   12390:	ldr	r3, [sl]
   12394:	bne	123b0 <__assert_fail@plt+0x468>
   12398:	cmp	fp, r3
   1239c:	beq	128ac <__assert_fail@plt+0x964>
   123a0:	ldr	r2, [r7, r3, lsl #2]
   123a4:	ldrb	r1, [r2]
   123a8:	cmp	r1, #45	; 0x2d
   123ac:	beq	12420 <__assert_fail@plt+0x4d8>
   123b0:	cmp	fp, r3
   123b4:	ble	14c18 <__assert_fail@plt+0x2cd0>
   123b8:	ldr	r2, [r7, r3, lsl #2]
   123bc:	add	r3, r3, #1
   123c0:	str	r3, [sl]
   123c4:	str	r2, [r4, r5, lsl #2]
   123c8:	add	r5, r5, #1
   123cc:	mvn	r3, #0
   123d0:	cmp	r6, r3
   123d4:	str	r3, [sp, #152]	; 0x98
   123d8:	bne	12360 <__assert_fail@plt+0x418>
   123dc:	movw	sl, #25280	; 0x62c0
   123e0:	movt	sl, #3
   123e4:	ldr	r3, [sl]
   123e8:	b	123b0 <__assert_fail@plt+0x468>
   123ec:	nop	{0}
   123f0:	andeq	r0, r0, r0
   123f4:	subsmi	r0, r9, r0
   123f8:	andeq	r0, r0, r0
   123fc:	mvnsmi	r0, #0
   12400:	andeq	r6, r3, r7, ror #9
   12404:	andeq	r6, r3, r8, ror #5
   12408:	andeq	r6, r3, r8, lsl r8
   1240c:	andeq	r3, r2, r4, asr #8
   12410:	andeq	r3, r2, r8, lsl #13
   12414:			; <UNDEFINED> instruction: 0x000236b0
   12418:	andeq	r6, r3, r4, ror r7
   1241c:	andeq	r3, r2, r0, ror r4
   12420:	ldrb	r1, [r2, #1]
   12424:	cmp	r1, #111	; 0x6f
   12428:	bne	123b0 <__assert_fail@plt+0x468>
   1242c:	ldrb	r2, [r2, #2]
   12430:	cmp	r2, #0
   12434:	bne	12444 <__assert_fail@plt+0x4fc>
   12438:	add	r2, r3, #1
   1243c:	cmp	r2, fp
   12440:	beq	123b0 <__assert_fail@plt+0x468>
   12444:	ldr	r3, [pc, #-48]	; 1241c <__assert_fail@plt+0x4d4>
   12448:	add	ip, sp, #152	; 0x98
   1244c:	mov	r1, r7
   12450:	mov	r0, fp
   12454:	str	ip, [sp]
   12458:	add	r2, r3, #496	; 0x1f0
   1245c:	bl	11d20 <getopt_long@plt>
   12460:	cmn	r0, #1
   12464:	mov	r6, r0
   12468:	beq	123dc <__assert_fail@plt+0x494>
   1246c:	add	r3, r0, #3
   12470:	movw	r2, #266	; 0x10a
   12474:	cmp	r3, r2
   12478:	ldrls	pc, [pc, r3, lsl #2]
   1247c:	b	12bac <__assert_fail@plt+0xc64>
   12480:	andeq	r2, r1, r4, lsr #28
   12484:	andeq	r2, r1, r4, ror lr
   12488:	andeq	r2, r1, ip, lsr #23
   1248c:	andeq	r2, r1, ip, lsr #23
   12490:	andeq	r2, r1, ip, ror lr
   12494:	andeq	r2, r1, ip, lsr #23
   12498:	andeq	r2, r1, ip, lsr #23
   1249c:	andeq	r2, r1, ip, lsr #23
   124a0:	andeq	r2, r1, ip, lsr #23
   124a4:	andeq	r2, r1, ip, lsr #23
   124a8:	andeq	r2, r1, ip, lsr #23
   124ac:	andeq	r2, r1, ip, lsr #23
   124b0:	andeq	r2, r1, ip, lsr #23
   124b4:	andeq	r2, r1, ip, lsr #23
   124b8:	andeq	r2, r1, ip, lsr #23
   124bc:	andeq	r2, r1, ip, lsr #23
   124c0:	andeq	r2, r1, ip, lsr #23
   124c4:	andeq	r2, r1, ip, lsr #23
   124c8:	andeq	r2, r1, ip, lsr #23
   124cc:	andeq	r2, r1, ip, lsr #23
   124d0:	andeq	r2, r1, ip, lsr #23
   124d4:	andeq	r2, r1, ip, lsr #23
   124d8:	andeq	r2, r1, ip, lsr #23
   124dc:	andeq	r2, r1, ip, lsr #23
   124e0:	andeq	r2, r1, ip, lsr #23
   124e4:	andeq	r2, r1, ip, lsr #23
   124e8:	andeq	r2, r1, ip, lsr #23
   124ec:	andeq	r2, r1, ip, lsr #23
   124f0:	andeq	r2, r1, ip, lsr #23
   124f4:	andeq	r2, r1, ip, lsr #23
   124f8:	andeq	r2, r1, ip, lsr #23
   124fc:	andeq	r2, r1, ip, lsr #23
   12500:	andeq	r2, r1, ip, lsr #23
   12504:	andeq	r2, r1, ip, lsr #23
   12508:	andeq	r2, r1, ip, lsr #23
   1250c:	andeq	r2, r1, ip, lsr #23
   12510:	andeq	r2, r1, ip, lsr #23
   12514:	andeq	r2, r1, ip, lsr #23
   12518:	andeq	r2, r1, ip, lsr #23
   1251c:	andeq	r2, r1, ip, lsr #23
   12520:	andeq	r2, r1, ip, lsr #23
   12524:	andeq	r2, r1, ip, lsr #23
   12528:	andeq	r2, r1, ip, lsr #23
   1252c:	andeq	r2, r1, ip, lsr #23
   12530:	andeq	r2, r1, ip, lsr #23
   12534:	andeq	r2, r1, ip, lsr #23
   12538:	andeq	r2, r1, ip, lsr #23
   1253c:	andeq	r2, r1, ip, lsr #23
   12540:	andeq	r2, r1, ip, lsr #23
   12544:	andeq	r2, r1, ip, lsr #23
   12548:	andeq	r2, r1, ip, lsr #23
   1254c:	andeq	r2, r1, ip, lsr #23
   12550:	andeq	r2, r1, ip, lsr #23
   12554:	andeq	r2, r1, ip, lsr #23
   12558:	andeq	r2, r1, ip, lsr #23
   1255c:	andeq	r2, r1, ip, lsr #23
   12560:	andeq	r2, r1, ip, lsr #23
   12564:	andeq	r2, r1, ip, lsr #23
   12568:	andeq	r2, r1, ip, lsr #23
   1256c:	andeq	r2, r1, ip, lsr #23
   12570:	andeq	r2, r1, ip, lsr #23
   12574:	andeq	r2, r1, ip, lsr #23
   12578:	andeq	r2, r1, ip, lsr #23
   1257c:	andeq	r2, r1, ip, lsr #23
   12580:	andeq	r2, r1, ip, lsr #23
   12584:	andeq	r2, r1, ip, lsr #23
   12588:	andeq	r2, r1, ip, lsr #23
   1258c:	andeq	r2, r1, ip, lsr #23
   12590:	andeq	r2, r1, ip, lsr #23
   12594:	andeq	r2, r1, ip, lsr #23
   12598:	andeq	r2, r1, ip, lsl fp
   1259c:	andeq	r2, r1, ip, lsr #23
   125a0:	andeq	r2, r1, ip, lsr #23
   125a4:	andeq	r2, r1, ip, lsr #23
   125a8:	andeq	r2, r1, ip, lsr #23
   125ac:	andeq	r2, r1, ip, lsr #23
   125b0:	andeq	r2, r1, ip, lsr #23
   125b4:	andeq	r2, r1, ip, lsr #23
   125b8:	andeq	r2, r1, ip, lsr #23
   125bc:	andeq	r2, r1, ip, lsr #23
   125c0:	andeq	r2, r1, r8, lsr #21
   125c4:	andeq	r2, r1, ip, lsr #23
   125c8:	andeq	r2, r1, ip, lsr #23
   125cc:	andeq	r2, r1, ip, lsr #23
   125d0:	andeq	r2, r1, ip, lsr #23
   125d4:	andeq	r2, r1, r8, lsr #21
   125d8:			; <UNDEFINED> instruction: 0x00012cb0
   125dc:	andeq	r2, r1, r4, ror #26
   125e0:	andeq	r2, r1, ip, lsr #23
   125e4:	andeq	r2, r1, r8, lsr #21
   125e8:	andeq	r2, r1, ip, lsr #23
   125ec:	andeq	r2, r1, ip, lsr #23
   125f0:	andeq	r2, r1, ip, lsr #23
   125f4:	andeq	r2, r1, ip, lsr #23
   125f8:	andeq	r2, r1, ip, lsr #23
   125fc:	andeq	r2, r1, ip, lsr #23
   12600:	andeq	r2, r1, ip, lsr #23
   12604:	andeq	r2, r1, ip, lsr #23
   12608:	andeq	r2, r1, ip, lsr #23
   1260c:	andeq	r2, r1, ip, lsr #23
   12610:	andeq	r2, r1, ip, lsr #23
   12614:	andeq	r2, r1, r8, lsr #21
   12618:	andeq	r2, r1, ip, lsl fp
   1261c:	andeq	r2, r1, r8, lsr #21
   12620:	andeq	r2, r1, ip, lsr #23
   12624:	andeq	r2, r1, r8, lsr #21
   12628:	andeq	r2, r1, r8, lsr #21
   1262c:	andeq	r2, r1, r8, lsr #21
   12630:	andeq	r2, r1, r8, lsr #21
   12634:	andeq	r2, r1, ip, lsr #23
   12638:	andeq	r2, r1, r0, asr #23
   1263c:	andeq	r2, r1, ip, lsr #23
   12640:			; <UNDEFINED> instruction: 0x00012bb4
   12644:	andeq	r2, r1, r8, lsr #21
   12648:	andeq	r2, r1, r8, ror sp
   1264c:	andeq	r2, r1, ip, lsr #23
   12650:	andeq	r2, r1, ip, lsr #23
   12654:	andeq	r2, r1, r8, lsr #21
   12658:	andeq	r2, r1, r8, lsr #27
   1265c:			; <UNDEFINED> instruction: 0x00012db8
   12660:	andeq	r2, r1, r4, lsl lr
   12664:	andeq	r2, r1, ip, lsr #23
   12668:	andeq	r2, r1, ip, lsr #23
   1266c:	andeq	r2, r1, ip, lsr #23
   12670:	andeq	r2, r1, r4, lsl pc
   12674:	andeq	r3, r1, r8, lsr #2
   12678:	andeq	r2, r1, ip, lsr #23
   1267c:	andeq	r2, r1, ip, lsr #23
   12680:	andeq	r2, r1, ip, lsr #23
   12684:	andeq	r2, r1, ip, lsr #23
   12688:	andeq	r2, r1, ip, lsr #23
   1268c:	andeq	r2, r1, ip, lsr #23
   12690:	andeq	r2, r1, ip, lsr #23
   12694:	andeq	r2, r1, ip, lsr #23
   12698:	andeq	r2, r1, ip, lsr #23
   1269c:	andeq	r2, r1, ip, lsr #23
   126a0:	andeq	r2, r1, ip, lsr #23
   126a4:	andeq	r2, r1, ip, lsr #23
   126a8:	andeq	r2, r1, ip, lsr #23
   126ac:	andeq	r2, r1, ip, lsr #23
   126b0:	andeq	r2, r1, ip, lsr #23
   126b4:	andeq	r2, r1, ip, lsr #23
   126b8:	andeq	r2, r1, ip, lsr #23
   126bc:	andeq	r2, r1, ip, lsr #23
   126c0:	andeq	r2, r1, ip, lsr #23
   126c4:	andeq	r2, r1, ip, lsr #23
   126c8:	andeq	r2, r1, ip, lsr #23
   126cc:	andeq	r2, r1, ip, lsr #23
   126d0:	andeq	r2, r1, ip, lsr #23
   126d4:	andeq	r2, r1, ip, lsr #23
   126d8:	andeq	r2, r1, ip, lsr #23
   126dc:	andeq	r2, r1, ip, lsr #23
   126e0:	andeq	r2, r1, ip, lsr #23
   126e4:	andeq	r2, r1, ip, lsr #23
   126e8:	andeq	r2, r1, ip, lsr #23
   126ec:	andeq	r2, r1, ip, lsr #23
   126f0:	andeq	r2, r1, ip, lsr #23
   126f4:	andeq	r2, r1, ip, lsr #23
   126f8:	andeq	r2, r1, ip, lsr #23
   126fc:	andeq	r2, r1, ip, lsr #23
   12700:	andeq	r2, r1, ip, lsr #23
   12704:	andeq	r2, r1, ip, lsr #23
   12708:	andeq	r2, r1, ip, lsr #23
   1270c:	andeq	r2, r1, ip, lsr #23
   12710:	andeq	r2, r1, ip, lsr #23
   12714:	andeq	r2, r1, ip, lsr #23
   12718:	andeq	r2, r1, ip, lsr #23
   1271c:	andeq	r2, r1, ip, lsr #23
   12720:	andeq	r2, r1, ip, lsr #23
   12724:	andeq	r2, r1, ip, lsr #23
   12728:	andeq	r2, r1, ip, lsr #23
   1272c:	andeq	r2, r1, ip, lsr #23
   12730:	andeq	r2, r1, ip, lsr #23
   12734:	andeq	r2, r1, ip, lsr #23
   12738:	andeq	r2, r1, ip, lsr #23
   1273c:	andeq	r2, r1, ip, lsr #23
   12740:	andeq	r2, r1, ip, lsr #23
   12744:	andeq	r2, r1, ip, lsr #23
   12748:	andeq	r2, r1, ip, lsr #23
   1274c:	andeq	r2, r1, ip, lsr #23
   12750:	andeq	r2, r1, ip, lsr #23
   12754:	andeq	r2, r1, ip, lsr #23
   12758:	andeq	r2, r1, ip, lsr #23
   1275c:	andeq	r2, r1, ip, lsr #23
   12760:	andeq	r2, r1, ip, lsr #23
   12764:	andeq	r2, r1, ip, lsr #23
   12768:	andeq	r2, r1, ip, lsr #23
   1276c:	andeq	r2, r1, ip, lsr #23
   12770:	andeq	r2, r1, ip, lsr #23
   12774:	andeq	r2, r1, ip, lsr #23
   12778:	andeq	r2, r1, ip, lsr #23
   1277c:	andeq	r2, r1, ip, lsr #23
   12780:	andeq	r2, r1, ip, lsr #23
   12784:	andeq	r2, r1, ip, lsr #23
   12788:	andeq	r2, r1, ip, lsr #23
   1278c:	andeq	r2, r1, ip, lsr #23
   12790:	andeq	r2, r1, ip, lsr #23
   12794:	andeq	r2, r1, ip, lsr #23
   12798:	andeq	r2, r1, ip, lsr #23
   1279c:	andeq	r2, r1, ip, lsr #23
   127a0:	andeq	r2, r1, ip, lsr #23
   127a4:	andeq	r2, r1, ip, lsr #23
   127a8:	andeq	r2, r1, ip, lsr #23
   127ac:	andeq	r2, r1, ip, lsr #23
   127b0:	andeq	r2, r1, ip, lsr #23
   127b4:	andeq	r2, r1, ip, lsr #23
   127b8:	andeq	r2, r1, ip, lsr #23
   127bc:	andeq	r2, r1, ip, lsr #23
   127c0:	andeq	r2, r1, ip, lsr #23
   127c4:	andeq	r2, r1, ip, lsr #23
   127c8:	andeq	r2, r1, ip, lsr #23
   127cc:	andeq	r2, r1, ip, lsr #23
   127d0:	andeq	r2, r1, ip, lsr #23
   127d4:	andeq	r2, r1, ip, lsr #23
   127d8:	andeq	r2, r1, ip, lsr #23
   127dc:	andeq	r2, r1, ip, lsr #23
   127e0:	andeq	r2, r1, ip, lsr #23
   127e4:	andeq	r2, r1, ip, lsr #23
   127e8:	andeq	r2, r1, ip, lsr #23
   127ec:	andeq	r2, r1, ip, lsr #23
   127f0:	andeq	r2, r1, ip, lsr #23
   127f4:	andeq	r2, r1, ip, lsr #23
   127f8:	andeq	r2, r1, ip, lsr #23
   127fc:	andeq	r2, r1, ip, lsr #23
   12800:	andeq	r2, r1, ip, lsr #23
   12804:	andeq	r2, r1, ip, lsr #23
   12808:	andeq	r2, r1, ip, lsr #23
   1280c:	andeq	r2, r1, ip, lsr #23
   12810:	andeq	r2, r1, ip, lsr #23
   12814:	andeq	r2, r1, ip, lsr #23
   12818:	andeq	r2, r1, ip, lsr #23
   1281c:	andeq	r2, r1, ip, lsr #23
   12820:	andeq	r2, r1, ip, lsr #23
   12824:	andeq	r2, r1, ip, lsr #23
   12828:	andeq	r2, r1, ip, lsr #23
   1282c:	andeq	r2, r1, ip, lsr #23
   12830:	andeq	r2, r1, ip, lsr #23
   12834:	andeq	r2, r1, ip, lsr #23
   12838:	andeq	r2, r1, ip, lsr #23
   1283c:	andeq	r2, r1, ip, lsr #23
   12840:	andeq	r2, r1, ip, lsr #23
   12844:	andeq	r2, r1, ip, lsr #23
   12848:	andeq	r2, r1, ip, lsr #23
   1284c:	andeq	r2, r1, ip, lsr #23
   12850:	andeq	r2, r1, ip, lsr #23
   12854:	andeq	r2, r1, ip, lsr #23
   12858:	andeq	r2, r1, ip, lsr #23
   1285c:	andeq	r2, r1, ip, lsr #23
   12860:	andeq	r2, r1, ip, lsr #23
   12864:	andeq	r2, r1, ip, lsr #23
   12868:	andeq	r2, r1, ip, lsr #23
   1286c:	andeq	r2, r1, ip, lsr #23
   12870:	andeq	r2, r1, ip, lsr #23
   12874:	andeq	r2, r1, ip, lsr #23
   12878:	andeq	r2, r1, ip, lsr #23
   1287c:	andeq	r2, r1, ip, lsr #23
   12880:	andeq	r2, r1, ip, lsr #23
   12884:	andeq	r2, r1, ip, lsr #23
   12888:	andeq	r2, r1, ip, lsr #23
   1288c:	andeq	r2, r1, r8, asr #21
   12890:	strdeq	r3, [r1], -r0
   12894:	andeq	r2, r1, r8, ror #30
   12898:	andeq	r2, r1, r8, ror pc
   1289c:	andeq	r2, r1, ip, lsl #31
   128a0:	andeq	r3, r1, r0, asr #1
   128a4:	andeq	r2, r1, ip, asr sl
   128a8:	andeq	r2, r1, r4, lsr #29
   128ac:	mov	sl, r4
   128b0:	ldr	fp, [sp, #44]	; 0x2c
   128b4:	ldr	r3, [sp, #48]	; 0x30
   128b8:	cmp	r3, #0
   128bc:	bne	12b3c <__assert_fail@plt+0xbf4>
   128c0:	str	r3, [sp, #36]	; 0x24
   128c4:	ldr	r4, [fp, #1172]	; 0x494
   128c8:	cmp	r4, #0
   128cc:	beq	1313c <__assert_fail@plt+0x11f4>
   128d0:	mov	r1, r4
   128d4:	mov	r9, #0
   128d8:	mov	r0, r1
   128dc:	bl	1520c <__assert_fail@plt+0x32c4>
   128e0:	cmp	r0, #0
   128e4:	beq	1294c <__assert_fail@plt+0xa04>
   128e8:	ldrb	r3, [r1, #31]
   128ec:	cmp	r3, #0
   128f0:	bne	1294c <__assert_fail@plt+0xa04>
   128f4:	ldrb	r3, [sp, #280]	; 0x118
   128f8:	ldr	r2, [sp, #272]	; 0x110
   128fc:	ldrb	r0, [sp, #281]	; 0x119
   12900:	str	r2, [r1, #16]
   12904:	strb	r3, [r1, #24]
   12908:	ldrb	r3, [sp, #286]	; 0x11e
   1290c:	strb	r0, [r1, #25]
   12910:	ldr	r2, [sp, #276]	; 0x114
   12914:	ldrb	r0, [sp, #282]	; 0x11a
   12918:	strb	r3, [r1, #30]
   1291c:	ldrb	r3, [sp, #285]	; 0x11d
   12920:	str	r2, [r1, #20]
   12924:	ldrb	r2, [sp, #284]	; 0x11c
   12928:	strb	r0, [r1, #26]
   1292c:	ldrb	r0, [sp, #288]	; 0x120
   12930:	strb	r2, [r1, #28]
   12934:	ldrb	r2, [sp, #283]	; 0x11b
   12938:	strb	r3, [r1, #29]
   1293c:	ldrb	r3, [sp, #287]	; 0x11f
   12940:	strb	r2, [r1, #27]
   12944:	strb	r0, [r1, #32]
   12948:	strb	r3, [r1, #31]
   1294c:	ldrb	r3, [r1, #27]
   12950:	ldr	r1, [r1, #36]	; 0x24
   12954:	orr	r9, r9, r3
   12958:	cmp	r1, #0
   1295c:	bne	128d8 <__assert_fail@plt+0x990>
   12960:	mov	r8, r1
   12964:	ldrb	r0, [r4, #28]
   12968:	ldrb	r3, [r4, #26]
   1296c:	ldrb	r1, [r4, #29]
   12970:	ldrb	r2, [r4, #32]
   12974:	add	r3, r3, r0
   12978:	ldrb	ip, [r4, #27]
   1297c:	add	r3, r3, r1
   12980:	ldrb	r0, [r4, #30]
   12984:	ldr	r1, [r4, #16]
   12988:	orr	r2, r2, ip
   1298c:	add	r3, r3, r0
   12990:	cmp	r1, #0
   12994:	orrne	r2, r2, #1
   12998:	add	r3, r3, r2
   1299c:	cmp	r3, #1
   129a0:	bgt	149fc <__assert_fail@plt+0x2ab4>
   129a4:	ldr	r4, [r4, #36]	; 0x24
   129a8:	cmp	r4, #0
   129ac:	bne	12964 <__assert_fail@plt+0xa1c>
   129b0:	ldrb	r3, [fp, #1465]	; 0x5b9
   129b4:	cmp	r3, #0
   129b8:	bne	13160 <__assert_fail@plt+0x1218>
   129bc:	ldrb	r3, [sp, #287]	; 0x11f
   129c0:	cmp	r9, #0
   129c4:	strb	r3, [fp, #1468]	; 0x5bc
   129c8:	bne	136e8 <__assert_fail@plt+0x17a0>
   129cc:	ldr	r3, [fp, #1148]	; 0x47c
   129d0:	cmp	r3, #0
   129d4:	beq	13aa0 <__assert_fail@plt+0x1b58>
   129d8:	cmp	r5, #0
   129dc:	beq	13a78 <__assert_fail@plt+0x1b30>
   129e0:	ldr	r2, [fp, #1488]	; 0x5d0
   129e4:	cmp	r2, #0
   129e8:	beq	12a0c <__assert_fail@plt+0xac4>
   129ec:	movw	r3, #25060	; 0x61e4
   129f0:	movt	r3, #3
   129f4:	ldr	r1, [r3, #112]	; 0x70
   129f8:	mov	r3, #18
   129fc:	mul	r3, r3, r1
   12a00:	cmp	r3, r2
   12a04:	movcc	r3, r2
   12a08:	str	r3, [fp, #1488]	; 0x5d0
   12a0c:	ldr	r3, [sp, #36]	; 0x24
   12a10:	cmp	r3, #0
   12a14:	beq	1373c <__assert_fail@plt+0x17f4>
   12a18:	cmp	r5, #1
   12a1c:	bhi	14e04 <__assert_fail@plt+0x2ebc>
   12a20:	ldr	r3, [sp, #52]	; 0x34
   12a24:	cmp	r3, #0
   12a28:	beq	14020 <__assert_fail@plt+0x20d8>
   12a2c:	ldr	r3, [sp, #36]	; 0x24
   12a30:	movw	r0, #25060	; 0x61e4
   12a34:	movt	r0, #3
   12a38:	strb	r3, [r0, #128]!	; 0x80
   12a3c:	bl	154bc <__assert_fail@plt+0x3574>
   12a40:	mov	r3, #1
   12a44:	strb	r3, [fp, #1497]	; 0x5d9
   12a48:	mov	r3, #256	; 0x100
   12a4c:	str	r3, [fp]
   12a50:	b	12068 <__assert_fail@plt+0x120>
   12a54:	mov	lr, r0
   12a58:	b	121dc <__assert_fail@plt+0x294>
   12a5c:	movw	r1, #25196	; 0x626c
   12a60:	movt	r1, #3
   12a64:	ldr	r3, [pc, #-1628]	; 12410 <__assert_fail@plt+0x4c8>
   12a68:	mov	ip, #1
   12a6c:	movw	r2, #25304	; 0x62d8
   12a70:	movt	r2, #3
   12a74:	ldr	lr, [r1]
   12a78:	movw	r0, #19076	; 0x4a84
   12a7c:	movt	r0, #2
   12a80:	str	ip, [sp]
   12a84:	str	ip, [sp, #8]
   12a88:	ldr	r1, [r2]
   12a8c:	add	r2, r3, #8
   12a90:	str	lr, [sp, #4]
   12a94:	bl	19f78 <__assert_fail@plt+0x8030>
   12a98:	movw	r3, #13056	; 0x3300
   12a9c:	movt	r3, #2
   12aa0:	add	r0, r3, r0
   12aa4:	ldrb	r6, [r0, #904]	; 0x388
   12aa8:	mov	r3, #0
   12aac:	mov	r2, #2
   12ab0:	strb	r6, [sp, #400]	; 0x190
   12ab4:	add	r1, sp, #256	; 0x100
   12ab8:	add	r0, sp, #400	; 0x190
   12abc:	strb	r3, [sp, #401]	; 0x191
   12ac0:	bl	15350 <__assert_fail@plt+0x3408>
   12ac4:	b	123cc <__assert_fail@plt+0x484>
   12ac8:	movw	r3, #25304	; 0x62d8
   12acc:	movt	r3, #3
   12ad0:	ldr	r1, [r3]
   12ad4:	cmp	r1, #0
   12ad8:	moveq	r6, #99	; 0x63
   12adc:	beq	12b1c <__assert_fail@plt+0xbd4>
   12ae0:	movw	r3, #25196	; 0x626c
   12ae4:	movt	r3, #3
   12ae8:	ldr	r2, [pc, #-1756]	; 12414 <__assert_fail@plt+0x4cc>
   12aec:	mov	ip, #1
   12af0:	movw	r0, #19084	; 0x4a8c
   12af4:	movt	r0, #2
   12af8:	ldr	lr, [r3]
   12afc:	ldr	r3, [sp, #72]	; 0x48
   12b00:	stm	sp, {ip, lr}
   12b04:	str	ip, [sp, #8]
   12b08:	bl	19f78 <__assert_fail@plt+0x8030>
   12b0c:	movw	r3, #13056	; 0x3300
   12b10:	movt	r3, #2
   12b14:	add	r0, r3, r0
   12b18:	ldrb	r6, [r0, #940]	; 0x3ac
   12b1c:	ldr	r3, [sp, #36]	; 0x24
   12b20:	cmp	r3, #0
   12b24:	beq	12b30 <__assert_fail@plt+0xbe8>
   12b28:	cmp	r3, r6
   12b2c:	bne	13d28 <__assert_fail@plt+0x1de0>
   12b30:	uxtb	r3, r6
   12b34:	str	r3, [sp, #36]	; 0x24
   12b38:	b	123cc <__assert_fail@plt+0x484>
   12b3c:	mov	r2, #5
   12b40:	movw	r1, #19592	; 0x4c88
   12b44:	movt	r1, #2
   12b48:	mov	r0, #0
   12b4c:	bl	11b58 <dcgettext@plt>
   12b50:	mov	r4, r0
   12b54:	mov	r0, #4
   12b58:	ldr	r1, [sl]
   12b5c:	bl	1f518 <__assert_fail@plt+0xd5d0>
   12b60:	mov	r1, #0
   12b64:	mov	r3, r0
   12b68:	mov	r2, r4
   12b6c:	mov	r0, r1
   12b70:	bl	11c90 <error@plt>
   12b74:	movw	r3, #25288	; 0x62c8
   12b78:	movt	r3, #3
   12b7c:	ldr	r4, [r3]
   12b80:	mov	r2, #5
   12b84:	movw	r1, #19612	; 0x4c9c
   12b88:	movt	r1, #2
   12b8c:	mov	r0, #0
   12b90:	bl	11b58 <dcgettext@plt>
   12b94:	mov	r3, r0
   12b98:	movw	r2, #22060	; 0x562c
   12b9c:	movt	r2, #2
   12ba0:	mov	r1, #1
   12ba4:	mov	r0, r4
   12ba8:	bl	11dd4 <__fprintf_chk@plt>
   12bac:	mov	r0, #2
   12bb0:	bl	196f4 <__assert_fail@plt+0x77ac>
   12bb4:	mov	r3, #1
   12bb8:	str	r3, [sp, #68]	; 0x44
   12bbc:	b	123cc <__assert_fail@plt+0x484>
   12bc0:	mov	r2, #0
   12bc4:	mov	r3, #0
   12bc8:	mvn	r0, #0
   12bcc:	mov	r8, r2
   12bd0:	mov	r9, r3
   12bd4:	add	ip, sp, #216	; 0xd8
   12bd8:	movw	lr, #25304	; 0x62d8
   12bdc:	movt	lr, #3
   12be0:	mov	r1, ip
   12be4:	strd	r2, [sp, #216]	; 0xd8
   12be8:	strd	r2, [sp, #224]	; 0xe0
   12bec:	movw	r2, #19136	; 0x4ac0
   12bf0:	movt	r2, #2
   12bf4:	str	ip, [sp, #84]	; 0x54
   12bf8:	str	r0, [sp, #224]	; 0xe0
   12bfc:	ldr	r0, [lr]
   12c00:	str	lr, [sp, #104]	; 0x68
   12c04:	strd	r8, [sp, #232]	; 0xe8
   12c08:	strd	r8, [sp, #240]	; 0xf0
   12c0c:	strd	r8, [sp, #248]	; 0xf8
   12c10:	bl	17424 <__assert_fail@plt+0x54dc>
   12c14:	ldr	lr, [sp, #104]	; 0x68
   12c18:	ldr	r2, [sp, #216]	; 0xd8
   12c1c:	mov	r1, r2
   12c20:	sub	r2, r2, #1
   12c24:	cmp	r1, #0
   12c28:	str	r2, [sp, #216]	; 0xd8
   12c2c:	beq	14ab4 <__assert_fail@plt+0x2b6c>
   12c30:	ldrb	r1, [r0]
   12c34:	cmp	r1, #46	; 0x2e
   12c38:	ldrne	r1, [sp, #220]	; 0xdc
   12c3c:	beq	14350 <__assert_fail@plt+0x2408>
   12c40:	orrs	r3, r2, r1
   12c44:	str	lr, [sp, #104]	; 0x68
   12c48:	mvneq	r2, #0
   12c4c:	ldr	r1, [sp, #84]	; 0x54
   12c50:	streq	r2, [sp, #216]	; 0xd8
   12c54:	mov	r2, #0
   12c58:	bl	15350 <__assert_fail@plt+0x3408>
   12c5c:	ldrb	r2, [r0]
   12c60:	ldr	lr, [sp, #104]	; 0x68
   12c64:	cmp	r2, #44	; 0x2c
   12c68:	beq	142fc <__assert_fail@plt+0x23b4>
   12c6c:	mvn	r8, #0
   12c70:	mov	r9, #0
   12c74:	strd	r8, [sp, #224]	; 0xe0
   12c78:	ldrb	r2, [r0]
   12c7c:	cmp	r2, #0
   12c80:	bne	14a5c <__assert_fail@plt+0x2b14>
   12c84:	mov	r1, #40	; 0x28
   12c88:	ldr	r0, [sp, #84]	; 0x54
   12c8c:	bl	212f0 <__assert_fail@plt+0xf3a8>
   12c90:	ldr	r8, [sp, #44]	; 0x2c
   12c94:	ldr	r2, [pc, #-2180]	; 12418 <__assert_fail@plt+0x4d0>
   12c98:	ldr	r3, [r8, #1172]	; 0x494
   12c9c:	cmp	r3, #0
   12ca0:	beq	131a0 <__assert_fail@plt+0x1258>
   12ca4:	add	r2, r3, #36	; 0x24
   12ca8:	ldr	r3, [r3, #36]	; 0x24
   12cac:	b	12c9c <__assert_fail@plt+0xd54>
   12cb0:	movw	r3, #25304	; 0x62d8
   12cb4:	movt	r3, #3
   12cb8:	ldr	r2, [sp, #152]	; 0x98
   12cbc:	movw	r1, #19452	; 0x4bfc
   12cc0:	movt	r1, #2
   12cc4:	ldr	sl, [r3]
   12cc8:	add	r3, sp, #400	; 0x190
   12ccc:	str	r1, [sp]
   12cd0:	add	r1, sp, #296	; 0x128
   12cd4:	str	r2, [sp, #84]	; 0x54
   12cd8:	mov	r2, #10
   12cdc:	mov	r0, sl
   12ce0:	bl	21750 <__assert_fail@plt+0xf808>
   12ce4:	cmp	r0, #0
   12ce8:	bne	131b0 <__assert_fail@plt+0x1268>
   12cec:	ldr	r3, [sp, #296]	; 0x128
   12cf0:	ldrb	r3, [r3, #-1]
   12cf4:	sub	r3, r3, #48	; 0x30
   12cf8:	cmp	r3, #9
   12cfc:	bls	13c74 <__assert_fail@plt+0x1d2c>
   12d00:	ldr	ip, [sp, #44]	; 0x2c
   12d04:	add	r3, sp, #400	; 0x190
   12d08:	ldrd	r0, [r3]
   12d0c:	mov	r3, #0
   12d10:	ldr	r2, [ip, #1488]	; 0x5d0
   12d14:	cmp	r3, r1
   12d18:	cmpeq	r2, r0
   12d1c:	bhi	123cc <__assert_fail@plt+0x484>
   12d20:	mov	r3, #0
   12d24:	str	r0, [sp, #96]	; 0x60
   12d28:	str	r0, [ip, #1488]	; 0x5d0
   12d2c:	str	r3, [sp, #100]	; 0x64
   12d30:	ldrd	r8, [sp, #96]	; 0x60
   12d34:	cmp	r1, r9
   12d38:	cmpeq	r0, r8
   12d3c:	bne	1469c <__assert_fail@plt+0x2754>
   12d40:	movw	r2, #25060	; 0x61e4
   12d44:	movt	r2, #3
   12d48:	ldr	r2, [r2, #112]	; 0x70
   12d4c:	mov	r3, #18
   12d50:	mul	r3, r3, r2
   12d54:	cmp	r3, r8
   12d58:	movcc	r3, r8
   12d5c:	str	r3, [ip, #1488]	; 0x5d0
   12d60:	b	123cc <__assert_fail@plt+0x484>
   12d64:	movw	r3, #25304	; 0x62d8
   12d68:	movt	r3, #3
   12d6c:	ldr	r0, [r3]
   12d70:	bl	15684 <__assert_fail@plt+0x373c>
   12d74:	b	123cc <__assert_fail@plt+0x484>
   12d78:	ldr	r0, [sp, #52]	; 0x34
   12d7c:	movw	r3, #25304	; 0x62d8
   12d80:	movt	r3, #3
   12d84:	ldr	sl, [r3]
   12d88:	cmp	r0, #0
   12d8c:	beq	12da0 <__assert_fail@plt+0xe58>
   12d90:	mov	r1, sl
   12d94:	bl	11a2c <strcmp@plt>
   12d98:	cmp	r0, #0
   12d9c:	bne	14b24 <__assert_fail@plt+0x2bdc>
   12da0:	str	sl, [sp, #52]	; 0x34
   12da4:	b	123cc <__assert_fail@plt+0x484>
   12da8:	ldr	r2, [sp, #44]	; 0x2c
   12dac:	mov	r3, #1
   12db0:	strb	r3, [r2, #1467]	; 0x5bb
   12db4:	b	123cc <__assert_fail@plt+0x484>
   12db8:	movw	sl, #25304	; 0x62d8
   12dbc:	movt	sl, #3
   12dc0:	ldr	r0, [sl]
   12dc4:	ldrb	r3, [r0]
   12dc8:	cmp	r3, #0
   12dcc:	beq	14b00 <__assert_fail@plt+0x2bb8>
   12dd0:	ldrb	r2, [r0, #1]
   12dd4:	cmp	r2, #0
   12dd8:	beq	12df0 <__assert_fail@plt+0xea8>
   12ddc:	movw	r1, #19480	; 0x4c18
   12de0:	movt	r1, #2
   12de4:	bl	11a2c <strcmp@plt>
   12de8:	subs	r3, r0, #0
   12dec:	bne	14db0 <__assert_fail@plt+0x2e68>
   12df0:	movw	r2, #25060	; 0x61e4
   12df4:	movt	r2, #3
   12df8:	ldr	r1, [r2, #96]	; 0x60
   12dfc:	cmp	r1, #256	; 0x100
   12e00:	beq	12e0c <__assert_fail@plt+0xec4>
   12e04:	cmp	r1, r3
   12e08:	bne	14da4 <__assert_fail@plt+0x2e5c>
   12e0c:	str	r3, [r2, #96]	; 0x60
   12e10:	b	123cc <__assert_fail@plt+0x484>
   12e14:	ldr	r2, [sp, #44]	; 0x2c
   12e18:	mov	r3, #1
   12e1c:	strb	r3, [r2, #1466]	; 0x5ba
   12e20:	b	123cc <__assert_fail@plt+0x484>
   12e24:	mov	r4, #0
   12e28:	movw	r1, #19564	; 0x4c6c
   12e2c:	movt	r1, #2
   12e30:	movw	r2, #19576	; 0x4c78
   12e34:	movt	r2, #2
   12e38:	movw	r3, #25192	; 0x6268
   12e3c:	movt	r3, #3
   12e40:	movw	r0, #25300	; 0x62d4
   12e44:	movt	r0, #3
   12e48:	str	r2, [sp]
   12e4c:	movw	r2, #18764	; 0x494c
   12e50:	movt	r2, #2
   12e54:	stmib	sp, {r1, r4}
   12e58:	movw	r1, #21060	; 0x5244
   12e5c:	movt	r1, #2
   12e60:	ldr	r0, [r0]
   12e64:	ldr	r3, [r3]
   12e68:	bl	20e70 <__assert_fail@plt+0xef28>
   12e6c:	mov	r0, r4
   12e70:	bl	11d38 <exit@plt>
   12e74:	mov	r0, #0
   12e78:	bl	196f4 <__assert_fail@plt+0x77ac>
   12e7c:	movw	lr, #25304	; 0x62d8
   12e80:	movt	lr, #3
   12e84:	ldr	r0, [lr]
   12e88:	ldrb	r2, [r0]
   12e8c:	cmp	r2, #43	; 0x2b
   12e90:	beq	13ae0 <__assert_fail@plt+0x1b98>
   12e94:	ldr	r3, [lr]
   12e98:	str	r3, [r4, r5, lsl #2]
   12e9c:	add	r5, r5, #1
   12ea0:	b	123cc <__assert_fail@plt+0x484>
   12ea4:	movw	r3, #25304	; 0x62d8
   12ea8:	movt	r3, #3
   12eac:	ldr	r2, [sp, #152]	; 0x98
   12eb0:	movw	r1, #16120	; 0x3ef8
   12eb4:	movt	r1, #2
   12eb8:	ldr	sl, [r3]
   12ebc:	add	r3, sp, #400	; 0x190
   12ec0:	str	r1, [sp]
   12ec4:	mov	r1, #0
   12ec8:	mov	r9, r2
   12ecc:	mov	r2, #10
   12ed0:	mov	r0, sl
   12ed4:	bl	21750 <__assert_fail@plt+0xf808>
   12ed8:	cmp	r0, #1
   12edc:	beq	146ac <__assert_fail@plt+0x2764>
   12ee0:	cmp	r0, #0
   12ee4:	bne	14df0 <__assert_fail@plt+0x2ea8>
   12ee8:	add	r3, sp, #400	; 0x190
   12eec:	mov	r9, #0
   12ef0:	ldrd	r2, [r3]
   12ef4:	mvn	r8, #0
   12ef8:	cmp	r3, r9
   12efc:	cmpeq	r2, r8
   12f00:	bhi	13230 <__assert_fail@plt+0x12e8>
   12f04:	orrs	ip, r2, r3
   12f08:	beq	14b64 <__assert_fail@plt+0x2c1c>
   12f0c:	str	r2, [sp, #64]	; 0x40
   12f10:	b	123cc <__assert_fail@plt+0x484>
   12f14:	movw	sl, #25280	; 0x62c0
   12f18:	movt	sl, #3
   12f1c:	ldr	r2, [sl]
   12f20:	movw	r3, #25304	; 0x62d8
   12f24:	movt	r3, #3
   12f28:	ldr	r1, [r3]
   12f2c:	sub	r3, r2, #-1073741823	; 0xc0000001
   12f30:	ldr	r3, [r7, r3, lsl #2]
   12f34:	cmp	r3, r1
   12f38:	bne	123cc <__assert_fail@plt+0x484>
   12f3c:	ldr	r8, [sp, #44]	; 0x2c
   12f40:	sub	r3, r3, #1
   12f44:	ldrb	r1, [r3, #1]!
   12f48:	sub	r0, r1, #48	; 0x30
   12f4c:	cmp	r0, #9
   12f50:	bls	12f44 <__assert_fail@plt+0xffc>
   12f54:	cmp	r1, #0
   12f58:	subne	r2, r2, #1
   12f5c:	str	r8, [sp, #44]	; 0x2c
   12f60:	str	r2, [sl]
   12f64:	b	123cc <__assert_fail@plt+0x484>
   12f68:	ldr	r2, [sp, #44]	; 0x2c
   12f6c:	mov	r3, #1
   12f70:	strb	r3, [r2, #1465]	; 0x5b9
   12f74:	b	123cc <__assert_fail@plt+0x484>
   12f78:	movw	r3, #25304	; 0x62d8
   12f7c:	movt	r3, #3
   12f80:	ldr	r3, [r3]
   12f84:	str	r3, [sp, #48]	; 0x30
   12f88:	b	123cc <__assert_fail@plt+0x484>
   12f8c:	movw	r3, #25304	; 0x62d8
   12f90:	movt	r3, #3
   12f94:	ldr	r2, [sp, #152]	; 0x98
   12f98:	movw	r1, #16120	; 0x3ef8
   12f9c:	movt	r1, #2
   12fa0:	ldr	sl, [r3]
   12fa4:	add	r3, sp, #184	; 0xb8
   12fa8:	str	r1, [sp]
   12fac:	mov	r1, #0
   12fb0:	str	r2, [sp, #104]	; 0x68
   12fb4:	mov	r2, #10
   12fb8:	mov	r0, sl
   12fbc:	bl	21750 <__assert_fail@plt+0xf808>
   12fc0:	mov	r3, r0
   12fc4:	add	r1, sp, #400	; 0x190
   12fc8:	mov	r0, #7
   12fcc:	str	r3, [sp, #84]	; 0x54
   12fd0:	bl	11b94 <getrlimit64@plt>
   12fd4:	cmp	r0, #0
   12fd8:	ldr	r3, [sp, #84]	; 0x54
   12fdc:	movne	ip, #17
   12fe0:	ldreq	ip, [sp, #400]	; 0x190
   12fe4:	subeq	ip, ip, #3
   12fe8:	cmp	r3, #0
   12fec:	bne	13208 <__assert_fail@plt+0x12c0>
   12ff0:	ldrd	r0, [sp, #184]	; 0xb8
   12ff4:	movw	r2, #25060	; 0x61e4
   12ff8:	movt	r2, #3
   12ffc:	str	r0, [sp, #88]	; 0x58
   13000:	str	r3, [sp, #92]	; 0x5c
   13004:	ldrd	r8, [sp, #88]	; 0x58
   13008:	str	r0, [r2, #112]	; 0x70
   1300c:	cmp	r1, r9
   13010:	cmpeq	r0, r8
   13014:	bne	13030 <__assert_fail@plt+0x10e8>
   13018:	ldr	r2, [sp, #88]	; 0x58
   1301c:	cmp	r2, #1
   13020:	bls	14b7c <__assert_fail@plt+0x2c34>
   13024:	ldr	r3, [sp, #88]	; 0x58
   13028:	cmp	r3, ip
   1302c:	bls	123cc <__assert_fail@plt+0x484>
   13030:	mov	r8, sl
   13034:	mov	r6, ip
   13038:	mov	r2, #5
   1303c:	movw	r1, #19248	; 0x4b30
   13040:	movt	r1, #2
   13044:	mov	r0, #0
   13048:	bl	11b58 <dcgettext@plt>
   1304c:	ldr	r2, [sp, #104]	; 0x68
   13050:	movw	r3, #13056	; 0x3300
   13054:	movt	r3, #2
   13058:	mov	r5, r0
   1305c:	mov	r0, r8
   13060:	add	r3, r3, r2, lsl #4
   13064:	ldr	r4, [r3, #368]	; 0x170
   13068:	bl	1f7cc <__assert_fail@plt+0xd884>
   1306c:	mov	r1, #0
   13070:	mov	r2, r5
   13074:	str	r0, [sp]
   13078:	mov	r0, r1
   1307c:	mov	r3, r4
   13080:	bl	11c90 <error@plt>
   13084:	mov	r2, #5
   13088:	movw	r1, #19276	; 0x4b4c
   1308c:	movt	r1, #2
   13090:	mov	r0, #0
   13094:	bl	11b58 <dcgettext@plt>
   13098:	mov	r5, r0
   1309c:	add	r1, sp, #296	; 0x128
   130a0:	mov	r0, r6
   130a4:	bl	1cc84 <__assert_fail@plt+0xad3c>
   130a8:	mov	r3, r4
   130ac:	mov	r2, r5
   130b0:	str	r0, [sp]
   130b4:	mov	r1, #0
   130b8:	mov	r0, #2
   130bc:	bl	11c90 <error@plt>
   130c0:	ldr	r0, [sp, #60]	; 0x3c
   130c4:	movw	r3, #25304	; 0x62d8
   130c8:	movt	r3, #3
   130cc:	ldr	sl, [r3]
   130d0:	cmp	r0, #0
   130d4:	beq	130e8 <__assert_fail@plt+0x11a0>
   130d8:	mov	r1, sl
   130dc:	bl	11a2c <strcmp@plt>
   130e0:	cmp	r0, #0
   130e4:	bne	14d98 <__assert_fail@plt+0x2e50>
   130e8:	str	sl, [sp, #60]	; 0x3c
   130ec:	b	123cc <__assert_fail@plt+0x484>
   130f0:	ldr	r3, [sp, #44]	; 0x2c
   130f4:	ldr	r0, [r3, #1160]	; 0x488
   130f8:	movw	r3, #25304	; 0x62d8
   130fc:	movt	r3, #3
   13100:	ldr	sl, [r3]
   13104:	cmp	r0, #0
   13108:	beq	1311c <__assert_fail@plt+0x11d4>
   1310c:	mov	r1, sl
   13110:	bl	11a2c <strcmp@plt>
   13114:	cmp	r0, #0
   13118:	bne	14d8c <__assert_fail@plt+0x2e44>
   1311c:	ldr	r3, [sp, #44]	; 0x2c
   13120:	str	sl, [r3, #1160]	; 0x488
   13124:	b	123cc <__assert_fail@plt+0x484>
   13128:	movw	r2, #25060	; 0x61e4
   1312c:	movt	r2, #3
   13130:	mov	r3, #0
   13134:	strb	r3, [r2, #100]	; 0x64
   13138:	b	123cc <__assert_fail@plt+0x484>
   1313c:	add	r0, sp, #256	; 0x100
   13140:	bl	1520c <__assert_fail@plt+0x32c4>
   13144:	cmp	r0, #0
   13148:	beq	1462c <__assert_fail@plt+0x26e4>
   1314c:	ldrb	r3, [fp, #1465]	; 0x5b9
   13150:	cmp	r3, #0
   13154:	beq	13cdc <__assert_fail@plt+0x1d94>
   13158:	mov	r8, r4
   1315c:	mov	r9, r4
   13160:	ldr	r2, [sp, #36]	; 0x24
   13164:	ldr	r3, [sp, #52]	; 0x34
   13168:	adds	r3, r3, #0
   1316c:	movne	r3, #1
   13170:	cmp	r2, #0
   13174:	movne	r3, #1
   13178:	cmp	r3, #0
   1317c:	str	r3, [sp, #72]	; 0x48
   13180:	beq	13238 <__assert_fail@plt+0x12f0>
   13184:	cmp	r2, #0
   13188:	movw	r0, #25060	; 0x61e4
   1318c:	movt	r0, #3
   13190:	movne	r3, r2
   13194:	moveq	r3, #111	; 0x6f
   13198:	strb	r3, [r0, #116]!	; 0x74
   1319c:	bl	154bc <__assert_fail@plt+0x3574>
   131a0:	str	r8, [sp, #44]	; 0x2c
   131a4:	str	r0, [r2]
   131a8:	str	r3, [r0, #36]	; 0x24
   131ac:	b	123cc <__assert_fail@plt+0x484>
   131b0:	cmp	r0, #2
   131b4:	bne	131ec <__assert_fail@plt+0x12a4>
   131b8:	ldr	r3, [sp, #296]	; 0x128
   131bc:	ldrb	r2, [r3, #-1]
   131c0:	sub	r2, r2, #48	; 0x30
   131c4:	cmp	r2, #9
   131c8:	bhi	131ec <__assert_fail@plt+0x12a4>
   131cc:	ldrb	r2, [r3, #1]
   131d0:	cmp	r2, #0
   131d4:	bne	131ec <__assert_fail@plt+0x12a4>
   131d8:	ldrb	r3, [r3]
   131dc:	cmp	r3, #37	; 0x25
   131e0:	beq	14a1c <__assert_fail@plt+0x2ad4>
   131e4:	cmp	r3, #98	; 0x62
   131e8:	beq	12d00 <__assert_fail@plt+0xdb8>
   131ec:	ldr	r8, [sp, #84]	; 0x54
   131f0:	mov	r4, sl
   131f4:	mov	r1, r8
   131f8:	mov	r2, #83	; 0x53
   131fc:	str	r4, [sp]
   13200:	ldr	r3, [pc, #-3564]	; 1241c <__assert_fail@plt+0x4d4>
   13204:	bl	216c0 <__assert_fail@plt+0xf778>
   13208:	cmp	r3, #1
   1320c:	mov	r8, sl
   13210:	mov	r6, ip
   13214:	beq	13038 <__assert_fail@plt+0x10f0>
   13218:	mov	r0, r3
   1321c:	mov	r2, #4
   13220:	ldr	r3, [pc, #-3596]	; 1241c <__assert_fail@plt+0x4d4>
   13224:	str	sl, [sp]
   13228:	ldr	r1, [sp, #104]	; 0x68
   1322c:	bl	216c0 <__assert_fail@plt+0xf778>
   13230:	mvn	r2, #0
   13234:	b	12f0c <__assert_fail@plt+0xfc4>
   13238:	ldr	r3, [sp, #80]	; 0x50
   1323c:	cmp	r3, #0
   13240:	beq	13cac <__assert_fail@plt+0x1d64>
   13244:	movw	r1, #16120	; 0x3ef8
   13248:	movt	r1, #2
   1324c:	mov	r0, #3
   13250:	bl	11e28 <setlocale@plt>
   13254:	cmp	r0, #0
   13258:	beq	13cac <__assert_fail@plt+0x1d64>
   1325c:	ldrb	r4, [fp, #1176]	; 0x498
   13260:	cmp	r4, #0
   13264:	beq	1438c <__assert_fail@plt+0x2444>
   13268:	mov	r2, #5
   1326c:	movw	r1, #19844	; 0x4d84
   13270:	movt	r1, #2
   13274:	mov	r0, #0
   13278:	bl	11b58 <dcgettext@plt>
   1327c:	mov	r4, r0
   13280:	mov	r1, #0
   13284:	mov	r0, #3
   13288:	bl	11e28 <setlocale@plt>
   1328c:	bl	1f7cc <__assert_fail@plt+0xd884>
   13290:	mov	r1, #0
   13294:	mov	r3, r0
   13298:	mov	r2, r4
   1329c:	mov	r0, r1
   132a0:	bl	11c90 <error@plt>
   132a4:	mov	r1, #0
   132a8:	add	r3, sp, #256	; 0x100
   132ac:	ldr	r4, [fp, #1172]	; 0x494
   132b0:	mov	lr, r1
   132b4:	add	ip, sp, #296	; 0x128
   132b8:	str	r1, [sp, #24]
   132bc:	add	r6, sp, #272	; 0x110
   132c0:	ldrd	r2, [r3]
   132c4:	str	r1, [sp, #80]	; 0x50
   132c8:	str	r1, [sp, #84]	; 0x54
   132cc:	add	r1, sp, #153	; 0x99
   132d0:	ldrd	r6, [r6]
   132d4:	str	ip, [sp, #40]	; 0x28
   132d8:	str	r1, [sp, #44]	; 0x2c
   132dc:	add	r1, sp, #264	; 0x108
   132e0:	ldrd	r0, [r1]
   132e4:	strd	r2, [ip]
   132e8:	add	r3, sp, #280	; 0x118
   132ec:	ldrd	r2, [r3]
   132f0:	strd	r6, [ip, #16]
   132f4:	mov	r7, lr
   132f8:	mov	r6, r8
   132fc:	strd	r0, [sp, #16]
   13300:	ldrd	r0, [sp, #16]
   13304:	str	r5, [sp, #88]	; 0x58
   13308:	str	r9, [sp, #96]	; 0x60
   1330c:	strd	sl, [sp, #104]	; 0x68
   13310:	strd	r0, [ip, #8]
   13314:	add	r1, sp, #288	; 0x120
   13318:	ldrd	r0, [r1]
   1331c:	strd	r2, [ip, #24]
   13320:	movw	r3, #27437	; 0x6b2d
   13324:	movt	r3, #32
   13328:	str	r3, [sp, #48]	; 0x30
   1332c:	mov	r3, #1
   13330:	mov	r5, r3
   13334:	strd	r0, [ip, #32]
   13338:	b	13480 <__assert_fail@plt+0x1538>
   1333c:	ldr	r1, [r4, #12]
   13340:	cmp	r1, #0
   13344:	beq	1367c <__assert_fail@plt+0x1734>
   13348:	cmp	r2, #0
   1334c:	bne	13ddc <__assert_fail@plt+0x1e94>
   13350:	cmp	r3, #0
   13354:	bne	13364 <__assert_fail@plt+0x141c>
   13358:	ldrh	r2, [r4, #28]
   1335c:	cmp	r2, #0
   13360:	beq	13390 <__assert_fail@plt+0x1448>
   13364:	ldr	r2, [r4]
   13368:	ldr	r1, [r4, #8]
   1336c:	adds	r2, r2, #1
   13370:	moveq	r2, #1
   13374:	adds	r1, r1, #1
   13378:	moveq	r8, #1
   1337c:	movne	r8, #0
   13380:	cmp	r1, r2
   13384:	orrhi	r8, r8, #1
   13388:	cmp	r8, #0
   1338c:	bne	13f64 <__assert_fail@plt+0x201c>
   13390:	ldrb	r1, [r4, #28]
   13394:	ldr	r2, [sp, #312]	; 0x138
   13398:	cmp	r2, #0
   1339c:	beq	133b0 <__assert_fail@plt+0x1468>
   133a0:	ldr	r0, [r4, #16]
   133a4:	cmp	r2, r0
   133a8:	moveq	r2, #0
   133ac:	streq	r2, [sp, #312]	; 0x138
   133b0:	ldr	r2, [sp, #316]	; 0x13c
   133b4:	cmp	r2, #0
   133b8:	beq	133cc <__assert_fail@plt+0x1484>
   133bc:	ldr	r0, [r4, #20]
   133c0:	cmp	r2, r0
   133c4:	moveq	r2, #0
   133c8:	streq	r2, [sp, #316]	; 0x13c
   133cc:	ldrb	lr, [r4, #24]
   133d0:	eor	r3, r3, #1
   133d4:	eor	r1, r1, #1
   133d8:	add	r5, r5, #1
   133dc:	ldrb	r2, [sp, #322]	; 0x142
   133e0:	ldrb	r9, [sp, #320]	; 0x140
   133e4:	eor	lr, lr, #1
   133e8:	ldrb	sl, [r4, #25]
   133ec:	and	r3, r3, r2
   133f0:	ldrb	fp, [r4, #30]
   133f4:	and	lr, lr, r9
   133f8:	ldrb	r8, [r4, #29]
   133fc:	eor	r0, sl, #1
   13400:	ldrb	ip, [r4, #27]
   13404:	eor	fp, fp, #1
   13408:	ldrb	r2, [r4, #32]
   1340c:	strb	r3, [sp, #322]	; 0x142
   13410:	eor	r8, r8, #1
   13414:	ldrb	r3, [r4, #31]
   13418:	eor	ip, ip, #1
   1341c:	ldrb	sl, [sp, #321]	; 0x141
   13420:	eor	r2, r2, #1
   13424:	ldr	r4, [r4, #36]	; 0x24
   13428:	strb	lr, [sp, #320]	; 0x140
   1342c:	eor	r3, r3, #1
   13430:	ldrb	lr, [sp, #324]	; 0x144
   13434:	and	sl, sl, r0
   13438:	ldrb	r9, [sp, #326]	; 0x146
   1343c:	strb	sl, [sp, #321]	; 0x141
   13440:	ldrb	r0, [sp, #325]	; 0x145
   13444:	and	r1, r1, lr
   13448:	ldrb	sl, [sp, #323]	; 0x143
   1344c:	strb	r1, [sp, #324]	; 0x144
   13450:	and	r9, r9, fp
   13454:	ldrb	lr, [sp, #328]	; 0x148
   13458:	and	r0, r0, r8
   1345c:	ldrb	r1, [sp, #327]	; 0x147
   13460:	and	ip, ip, sl
   13464:	strb	r9, [sp, #326]	; 0x146
   13468:	and	r2, r2, lr
   1346c:	strb	ip, [sp, #323]	; 0x143
   13470:	strb	r0, [sp, #325]	; 0x145
   13474:	and	r3, r3, r1
   13478:	strb	r3, [sp, #327]	; 0x147
   1347c:	strb	r2, [sp, #328]	; 0x148
   13480:	cmp	r4, #0
   13484:	beq	13de8 <__assert_fail@plt+0x1ea0>
   13488:	ldrb	r3, [r4, #26]
   1348c:	cmp	r3, #0
   13490:	bne	134a0 <__assert_fail@plt+0x1558>
   13494:	ldrh	r3, [r4, #28]
   13498:	cmp	r3, #0
   1349c:	beq	134b8 <__assert_fail@plt+0x1570>
   134a0:	ldrb	r1, [r4, #28]
   134a4:	ldr	r3, [sp, #24]
   134a8:	cmp	r1, #0
   134ac:	moveq	r3, #1
   134b0:	movne	r7, r1
   134b4:	str	r3, [sp, #24]
   134b8:	ldrb	r3, [r4, #33]	; 0x21
   134bc:	cmp	r3, #0
   134c0:	beq	13608 <__assert_fail@plt+0x16c0>
   134c4:	ldr	r9, [r4]
   134c8:	mov	r1, #0
   134cc:	mov	r3, #43	; 0x2b
   134d0:	add	r2, sp, #128	; 0x80
   134d4:	add	r8, sp, #184	; 0xb8
   134d8:	ldr	sl, [r4, #8]
   134dc:	strh	r3, [sp, #152]	; 0x98
   134e0:	cmn	r9, #1
   134e4:	moveq	r9, r1
   134e8:	mov	r0, r9
   134ec:	bl	1ccc8 <__assert_fail@plt+0xad80>
   134f0:	mov	r1, r0
   134f4:	mov	r2, #25
   134f8:	ldr	r0, [sp, #44]	; 0x2c
   134fc:	bl	11c30 <__stpcpy_chk@plt>
   13500:	ldr	r3, [sp, #48]	; 0x30
   13504:	add	r2, sp, #128	; 0x80
   13508:	mov	r1, #0
   1350c:	mov	fp, r0
   13510:	add	r0, r9, #1
   13514:	str	r3, [sp, #184]	; 0xb8
   13518:	bl	1ccc8 <__assert_fail@plt+0xad80>
   1351c:	mov	r1, r0
   13520:	mov	r2, #24
   13524:	add	r0, r8, #3
   13528:	bl	11c30 <__stpcpy_chk@plt>
   1352c:	ldr	r3, [r4, #8]
   13530:	cmn	r3, #1
   13534:	beq	135bc <__assert_fail@plt+0x1674>
   13538:	movw	r2, #19948	; 0x4dec
   1353c:	movt	r2, #2
   13540:	ldrh	ip, [r2]
   13544:	mov	r3, fp
   13548:	add	sl, sl, #1
   1354c:	mov	r9, r0
   13550:	mov	r1, #0
   13554:	ldrb	lr, [r2, #2]
   13558:	mov	r0, sl
   1355c:	add	r2, sp, #128	; 0x80
   13560:	strh	ip, [fp]
   13564:	strb	lr, [r3, #2]!
   13568:	str	r3, [sp, #76]	; 0x4c
   1356c:	bl	1ccc8 <__assert_fail@plt+0xad80>
   13570:	ldr	r3, [sp, #76]	; 0x4c
   13574:	mov	r1, r0
   13578:	mov	r0, r3
   1357c:	bl	11c54 <strcpy@plt>
   13580:	movw	r3, #19952	; 0x4df0
   13584:	movt	r3, #2
   13588:	ldrh	r3, [r3]
   1358c:	mov	r1, #0
   13590:	add	r2, sp, #128	; 0x80
   13594:	strh	r3, [r9], #1
   13598:	ldr	r0, [r4, #12]
   1359c:	cmn	r0, #1
   135a0:	movne	r0, #0
   135a4:	moveq	r0, #1
   135a8:	add	r0, r0, sl
   135ac:	bl	1ccc8 <__assert_fail@plt+0xad80>
   135b0:	mov	r1, r0
   135b4:	mov	r0, r9
   135b8:	bl	11c54 <strcpy@plt>
   135bc:	mov	r2, #5
   135c0:	movw	r1, #19956	; 0x4df4
   135c4:	movt	r1, #2
   135c8:	mov	r0, #0
   135cc:	bl	11b58 <dcgettext@plt>
   135d0:	mov	r9, r0
   135d4:	add	r1, sp, #152	; 0x98
   135d8:	mov	r0, #0
   135dc:	bl	1f7bc <__assert_fail@plt+0xd874>
   135e0:	mov	sl, r0
   135e4:	mov	r1, r8
   135e8:	mov	r0, #1
   135ec:	bl	1f7bc <__assert_fail@plt+0xd874>
   135f0:	mov	r1, #0
   135f4:	mov	r3, sl
   135f8:	str	r0, [sp]
   135fc:	mov	r2, r9
   13600:	mov	r0, r1
   13604:	bl	11c90 <error@plt>
   13608:	ldr	r3, [r4]
   1360c:	ldr	r1, [r4, #8]
   13610:	cmn	r3, #1
   13614:	beq	13dd4 <__assert_fail@plt+0x1e8c>
   13618:	cmp	r3, r1
   1361c:	bls	13dd4 <__assert_fail@plt+0x1e8c>
   13620:	mov	r2, #5
   13624:	movw	r1, #20712	; 0x50e8
   13628:	movt	r1, #2
   1362c:	mov	r0, #0
   13630:	bl	11b58 <dcgettext@plt>
   13634:	mov	r1, #0
   13638:	mov	r2, r0
   1363c:	mov	r3, r5
   13640:	mov	r0, r1
   13644:	bl	11c90 <error@plt>
   13648:	ldr	r1, [r4, #8]
   1364c:	mov	r2, #1
   13650:	ldrb	r3, [r4, #26]
   13654:	cmp	r3, #0
   13658:	bne	1366c <__assert_fail@plt+0x1724>
   1365c:	ldrh	r0, [r4, #28]
   13660:	cmp	r0, #0
   13664:	ldrbeq	r0, [r4, #30]
   13668:	beq	13670 <__assert_fail@plt+0x1728>
   1366c:	mov	r0, #1
   13670:	cmp	r1, #0
   13674:	orr	r2, r6, r2
   13678:	beq	1333c <__assert_fail@plt+0x13f4>
   1367c:	cmp	r2, #0
   13680:	bne	13ddc <__assert_fail@plt+0x1e94>
   13684:	movw	r2, #25060	; 0x61e4
   13688:	movt	r2, #3
   1368c:	ldr	r2, [r2, #96]	; 0x60
   13690:	cmp	r2, #256	; 0x100
   13694:	bne	13350 <__assert_fail@plt+0x1408>
   13698:	ldrb	r2, [r4, #24]
   1369c:	cmp	r2, #0
   136a0:	bne	14610 <__assert_fail@plt+0x26c8>
   136a4:	cmp	r0, #0
   136a8:	beq	136b8 <__assert_fail@plt+0x1770>
   136ac:	ldr	r2, [r4, #4]
   136b0:	cmp	r2, #0
   136b4:	beq	14610 <__assert_fail@plt+0x26c8>
   136b8:	mov	r2, #5
   136bc:	movw	r1, #20004	; 0x4e24
   136c0:	movt	r1, #2
   136c4:	mov	r0, #0
   136c8:	bl	11b58 <dcgettext@plt>
   136cc:	mov	r1, #0
   136d0:	mov	r3, r5
   136d4:	mov	r2, r0
   136d8:	mov	r0, r1
   136dc:	bl	11c90 <error@plt>
   136e0:	ldrb	r3, [r4, #26]
   136e4:	b	13350 <__assert_fail@plt+0x1408>
   136e8:	mov	r1, #16
   136ec:	ldr	r0, [sp, #60]	; 0x3c
   136f0:	bl	1f8b8 <__assert_fail@plt+0xd970>
   136f4:	subs	r4, r0, #0
   136f8:	beq	14e8c <__assert_fail@plt+0x2f44>
   136fc:	add	r3, sp, #296	; 0x128
   13700:	mov	r2, #16
   13704:	mov	r1, r3
   13708:	str	r3, [sp, #40]	; 0x28
   1370c:	bl	1fa18 <__assert_fail@plt+0xdad0>
   13710:	mov	r0, r4
   13714:	bl	1fb64 <__assert_fail@plt+0xdc1c>
   13718:	cmp	r0, #0
   1371c:	bne	14e60 <__assert_fail@plt+0x2f18>
   13720:	ldr	r0, [pc, #944]	; 13ad8 <__assert_fail@plt+0x1b90>
   13724:	bl	1a190 <__assert_fail@plt+0x8248>
   13728:	ldr	r2, [pc, #936]	; 13ad8 <__assert_fail@plt+0x1b90>
   1372c:	mov	r1, #16
   13730:	ldr	r0, [sp, #40]	; 0x28
   13734:	bl	1ae34 <__assert_fail@plt+0x8eec>
   13738:	b	129cc <__assert_fail@plt+0xa84>
   1373c:	movw	r6, #14356	; 0x3814
   13740:	movt	r6, #2
   13744:	str	sl, [sp, #104]	; 0x68
   13748:	mov	r8, sl
   1374c:	ldr	r4, [sp, #36]	; 0x24
   13750:	b	13758 <__assert_fail@plt+0x1810>
   13754:	mov	r4, r9
   13758:	mov	r7, r8
   1375c:	ldr	r9, [r8], #4
   13760:	mov	r1, r6
   13764:	mov	r0, r9
   13768:	bl	11a2c <strcmp@plt>
   1376c:	cmp	r0, #0
   13770:	beq	13788 <__assert_fail@plt+0x1840>
   13774:	mov	r0, r9
   13778:	mov	r1, #4
   1377c:	bl	11ec4 <euidaccess@plt>
   13780:	cmp	r0, #0
   13784:	bne	14e44 <__assert_fail@plt+0x2efc>
   13788:	add	r9, r4, #1
   1378c:	cmp	r5, r9
   13790:	bne	13754 <__assert_fail@plt+0x180c>
   13794:	ldr	r3, [sp, #52]	; 0x34
   13798:	cmp	r3, #0
   1379c:	beq	137cc <__assert_fail@plt+0x1884>
   137a0:	mov	r0, r3
   137a4:	mov	r1, #65	; 0x41
   137a8:	movt	r1, #8
   137ac:	movw	r2, #438	; 0x1b6
   137b0:	bl	11c9c <open64@plt>
   137b4:	subs	r3, r0, #0
   137b8:	blt	14ae4 <__assert_fail@plt+0x2b9c>
   137bc:	cmp	r3, #1
   137c0:	beq	137cc <__assert_fail@plt+0x1884>
   137c4:	mov	r1, #1
   137c8:	bl	185f8 <__assert_fail@plt+0x66b0>
   137cc:	ldr	r3, [sp, #68]	; 0x44
   137d0:	cmp	r3, #0
   137d4:	bne	13ce8 <__assert_fail@plt+0x1da0>
   137d8:	ldr	r3, [sp, #64]	; 0x40
   137dc:	cmp	r3, #0
   137e0:	beq	146cc <__assert_fail@plt+0x2784>
   137e4:	ldr	r1, [sp, #64]	; 0x40
   137e8:	movw	r3, #7281	; 0x1c71
   137ec:	movt	r3, #455	; 0x1c7
   137f0:	mov	r2, #144	; 0x90
   137f4:	str	r9, [sp, #24]
   137f8:	vldr	d10, [pc, #712]	; 13ac8 <__assert_fail@plt+0x1b80>
   137fc:	vldr	d9, [pc, #716]	; 13ad0 <__assert_fail@plt+0x1b88>
   13800:	cmp	r1, r3
   13804:	movcs	r1, r3
   13808:	mov	r3, #0
   1380c:	lsl	r0, r1, #1
   13810:	mov	ip, r3
   13814:	mul	r2, r2, r1
   13818:	mov	r9, ip
   1381c:	str	r0, [sp, #44]	; 0x2c
   13820:	str	r3, [sp, #196]	; 0xc4
   13824:	sub	r3, r0, #1
   13828:	str	r1, [sp, #72]	; 0x48
   1382c:	str	r2, [sp, #76]	; 0x4c
   13830:	str	r3, [sp, #80]	; 0x50
   13834:	ldr	r3, [sp, #104]	; 0x68
   13838:	movw	r1, #14604	; 0x390c
   1383c:	movt	r1, #2
   13840:	str	r3, [sp, #48]	; 0x30
   13844:	ldr	r0, [r3], #4
   13848:	str	r0, [sp, #40]	; 0x28
   1384c:	str	r3, [sp, #104]	; 0x68
   13850:	bl	1750c <__assert_fail@plt+0x55c4>
   13854:	subs	r3, r0, #0
   13858:	str	r3, [sp, #36]	; 0x24
   1385c:	beq	14b74 <__assert_fail@plt+0x2c2c>
   13860:	ldr	r3, [sp, #64]	; 0x40
   13864:	cmp	r3, #1
   13868:	bhi	141c4 <__assert_fail@plt+0x227c>
   1386c:	mov	r3, #24
   13870:	str	r3, [sp, #84]	; 0x54
   13874:	ldr	r4, [sp, #196]	; 0xc4
   13878:	cmp	r4, #0
   1387c:	beq	143bc <__assert_fail@plt+0x2474>
   13880:	add	r3, sp, #184	; 0xb8
   13884:	str	r3, [sp, #56]	; 0x38
   13888:	ldr	r2, [sp, #24]
   1388c:	mov	r3, #0
   13890:	str	fp, [sp, #60]	; 0x3c
   13894:	strb	r3, [sp, #208]	; 0xd0
   13898:	sub	r2, r2, #1
   1389c:	str	r2, [sp, #24]
   138a0:	movw	r2, #14680	; 0x3958
   138a4:	movt	r2, #2
   138a8:	str	r2, [sp, #88]	; 0x58
   138ac:	movw	r2, #28708	; 0x7024
   138b0:	movt	r2, #1
   138b4:	str	r2, [sp, #68]	; 0x44
   138b8:	ldr	r1, [sp, #36]	; 0x24
   138bc:	ldr	r2, [sp, #40]	; 0x28
   138c0:	ldr	r0, [sp, #56]	; 0x38
   138c4:	bl	16d08 <__assert_fail@plt+0x4dc0>
   138c8:	cmp	r0, #0
   138cc:	beq	13fa4 <__assert_fail@plt+0x205c>
   138d0:	ldrb	r7, [sp, #208]	; 0xd0
   138d4:	ldr	r6, [sp, #196]	; 0xc4
   138d8:	cmp	r7, #0
   138dc:	bne	13d34 <__assert_fail@plt+0x1dec>
   138e0:	ldr	r2, [sp, #60]	; 0x3c
   138e4:	ldr	r3, [sp, #184]	; 0xb8
   138e8:	str	r7, [r2, #1472]	; 0x5c0
   138ec:	add	r6, r3, r6
   138f0:	mov	r1, #0
   138f4:	add	r0, sp, #152	; 0x98
   138f8:	bl	18904 <__assert_fail@plt+0x69bc>
   138fc:	add	r9, r9, #1
   13900:	add	r8, r0, #9
   13904:	mov	r7, #0
   13908:	ldr	r3, [sp, #192]	; 0xc0
   1390c:	cmp	r3, #1
   13910:	bls	13d74 <__assert_fail@plt+0x1e2c>
   13914:	ldr	r1, [sp, #44]	; 0x2c
   13918:	mov	fp, #0
   1391c:	ldr	r0, [sp, #68]	; 0x44
   13920:	bl	1c9a4 <__assert_fail@plt+0xaa5c>
   13924:	mov	r1, #0
   13928:	str	r0, [sp, #296]	; 0x128
   1392c:	add	r0, sp, #300	; 0x12c
   13930:	bl	11ae0 <pthread_mutex_init@plt>
   13934:	mov	r1, #0
   13938:	add	r0, sp, #328	; 0x148
   1393c:	bl	11b64 <pthread_cond_init@plt>
   13940:	ldr	r0, [sp, #76]	; 0x4c
   13944:	ldr	sl, [sp, #192]	; 0xc0
   13948:	bl	20f80 <__assert_fail@plt+0xf038>
   1394c:	mov	r5, r0
   13950:	add	r2, sp, #296	; 0x128
   13954:	add	r4, r0, #48	; 0x30
   13958:	mov	r1, fp
   1395c:	mov	r0, r4
   13960:	str	fp, [r5]
   13964:	str	fp, [r5, #4]
   13968:	str	fp, [r5, #8]
   1396c:	str	fp, [r5, #12]
   13970:	str	fp, [r5, #16]
   13974:	str	sl, [r5, #20]
   13978:	strd	sl, [r5, #24]
   1397c:	str	fp, [r5, #40]	; 0x28
   13980:	strb	fp, [r5, #44]	; 0x2c
   13984:	str	r2, [sp, #48]	; 0x30
   13988:	bl	11ae0 <pthread_mutex_init@plt>
   1398c:	strd	sl, [sp]
   13990:	add	r1, r5, #72	; 0x48
   13994:	mov	r2, r6
   13998:	ldr	sl, [sp, #72]	; 0x48
   1399c:	mov	r0, r5
   139a0:	mov	r3, sl
   139a4:	bl	15b10 <__assert_fail@plt+0x3bc8>
   139a8:	ldr	r2, [sp, #48]	; 0x30
   139ac:	add	r3, r5, #72	; 0x48
   139b0:	mov	r0, r6
   139b4:	mov	r1, sl
   139b8:	str	r8, [sp, #8]
   139bc:	ldr	ip, [sp, #152]	; 0x98
   139c0:	stm	sp, {r2, ip}
   139c4:	ldr	r2, [sp, #192]	; 0xc0
   139c8:	bl	19054 <__assert_fail@plt+0x710c>
   139cc:	ldr	r3, [sp, #44]	; 0x2c
   139d0:	cmp	r3, fp
   139d4:	beq	139f4 <__assert_fail@plt+0x1aac>
   139d8:	ldr	r6, [sp, #80]	; 0x50
   139dc:	mov	r0, r4
   139e0:	sub	r6, r6, #1
   139e4:	bl	11a5c <pthread_mutex_destroy@plt>
   139e8:	cmn	r6, #1
   139ec:	add	r4, r4, #72	; 0x48
   139f0:	bne	139dc <__assert_fail@plt+0x1a94>
   139f4:	mov	r0, r5
   139f8:	bl	1b670 <__assert_fail@plt+0x9728>
   139fc:	ldr	r0, [sp, #296]	; 0x128
   13a00:	bl	1ca14 <__assert_fail@plt+0xaacc>
   13a04:	add	r0, sp, #328	; 0x148
   13a08:	bl	11bd0 <pthread_cond_destroy@plt>
   13a0c:	add	r0, sp, #300	; 0x12c
   13a10:	bl	11a5c <pthread_mutex_destroy@plt>
   13a14:	mov	r1, r8
   13a18:	ldr	r0, [sp, #152]	; 0x98
   13a1c:	bl	17684 <__assert_fail@plt+0x573c>
   13a20:	cmp	r7, #0
   13a24:	beq	138b8 <__assert_fail@plt+0x1970>
   13a28:	ldr	fp, [sp, #60]	; 0x3c
   13a2c:	ldr	r0, [sp, #184]	; 0xb8
   13a30:	bl	1b670 <__assert_fail@plt+0x9728>
   13a34:	b	13a40 <__assert_fail@plt+0x1af8>
   13a38:	mvn	r0, #0
   13a3c:	bl	15894 <__assert_fail@plt+0x394c>
   13a40:	ldr	r3, [fp, #1168]	; 0x490
   13a44:	cmp	r3, #0
   13a48:	bgt	13a38 <__assert_fail@plt+0x1af0>
   13a4c:	ldrb	r3, [fp, #1464]	; 0x5b8
   13a50:	cmp	r3, #0
   13a54:	beq	13a70 <__assert_fail@plt+0x1b28>
   13a58:	movw	r3, #25296	; 0x62d0
   13a5c:	movt	r3, #3
   13a60:	ldr	r0, [r3]
   13a64:	bl	1b0c4 <__assert_fail@plt+0x917c>
   13a68:	cmn	r0, #1
   13a6c:	beq	14960 <__assert_fail@plt+0x2a18>
   13a70:	mov	r0, #0
   13a74:	bl	11d38 <exit@plt>
   13a78:	mov	r0, sl
   13a7c:	mov	r5, #1
   13a80:	bl	1b670 <__assert_fail@plt+0x9728>
   13a84:	mov	r0, #4
   13a88:	bl	20f80 <__assert_fail@plt+0xf038>
   13a8c:	movw	r3, #14356	; 0x3814
   13a90:	movt	r3, #2
   13a94:	mov	sl, r0
   13a98:	str	r3, [r0]
   13a9c:	b	129e0 <__assert_fail@plt+0xa98>
   13aa0:	movw	r0, #20600	; 0x5078
   13aa4:	movt	r0, #2
   13aa8:	bl	11cb4 <getenv@plt>
   13aac:	cmp	r0, #0
   13ab0:	movw	r3, #17688	; 0x4518
   13ab4:	movt	r3, #2
   13ab8:	moveq	r0, r3
   13abc:	bl	15684 <__assert_fail@plt+0x373c>
   13ac0:	b	129d8 <__assert_fail@plt+0xa90>
   13ac4:	nop	{0}
   13ac8:	andeq	r0, r0, r0
   13acc:	svccc	0x00c00000
   13ad0:	andeq	r0, r0, r0
   13ad4:	svccc	0x00e80000
   13ad8:	andeq	r6, r3, ip, ror r7
   13adc:	andeq	r6, r3, r4, ror r7
   13ae0:	movw	sl, #25280	; 0x62c0
   13ae4:	movt	sl, #3
   13ae8:	ldr	r2, [sl]
   13aec:	cmp	r2, fp
   13af0:	beq	13b04 <__assert_fail@plt+0x1bbc>
   13af4:	ldr	r2, [r7, r2, lsl #2]
   13af8:	ldrb	r1, [r2]
   13afc:	cmp	r1, #45	; 0x2d
   13b00:	beq	14808 <__assert_fail@plt+0x28c0>
   13b04:	mov	r3, #0
   13b08:	str	r3, [sp, #104]	; 0x68
   13b0c:	ldr	r3, [sp, #76]	; 0x4c
   13b10:	ldr	r2, [sp, #104]	; 0x68
   13b14:	cmp	r3, #0
   13b18:	ldr	r3, [sp, #40]	; 0x28
   13b1c:	movne	r2, #0
   13b20:	orrs	r3, r3, r2
   13b24:	str	r3, [sp, #40]	; 0x28
   13b28:	beq	12e94 <__assert_fail@plt+0xf4c>
   13b2c:	mov	r8, #0
   13b30:	mov	r9, #0
   13b34:	str	lr, [sp, #108]	; 0x6c
   13b38:	add	r3, sp, #216	; 0xd8
   13b3c:	mvn	ip, #0
   13b40:	add	r0, r0, #1
   13b44:	mov	r1, r3
   13b48:	mov	r2, #0
   13b4c:	str	r3, [sp, #84]	; 0x54
   13b50:	strd	r8, [sp, #216]	; 0xd8
   13b54:	strd	r8, [sp, #224]	; 0xe0
   13b58:	str	ip, [sp, #224]	; 0xe0
   13b5c:	strd	r8, [sp, #232]	; 0xe8
   13b60:	strd	r8, [sp, #240]	; 0xf0
   13b64:	strd	r8, [sp, #248]	; 0xf8
   13b68:	bl	17424 <__assert_fail@plt+0x54dc>
   13b6c:	cmp	r0, #0
   13b70:	ldr	lr, [sp, #108]	; 0x6c
   13b74:	beq	149bc <__assert_fail@plt+0x2a74>
   13b78:	ldrb	r2, [r0]
   13b7c:	cmp	r2, #46	; 0x2e
   13b80:	beq	149d4 <__assert_fail@plt+0x2a8c>
   13b84:	ldr	r2, [sp, #216]	; 0xd8
   13b88:	ldr	r1, [sp, #220]	; 0xdc
   13b8c:	orrs	r3, r1, r2
   13b90:	bne	13ba4 <__assert_fail@plt+0x1c5c>
   13b94:	mvn	r2, #0
   13b98:	str	r2, [sp, #216]	; 0xd8
   13b9c:	cmp	r0, #0
   13ba0:	beq	12e94 <__assert_fail@plt+0xf4c>
   13ba4:	mov	r2, #0
   13ba8:	ldr	r1, [sp, #84]	; 0x54
   13bac:	str	lr, [sp, #108]	; 0x6c
   13bb0:	bl	15350 <__assert_fail@plt+0x3408>
   13bb4:	ldrb	r2, [r0]
   13bb8:	ldr	lr, [sp, #108]	; 0x6c
   13bbc:	cmp	r2, #0
   13bc0:	bne	12e94 <__assert_fail@plt+0xf4c>
   13bc4:	ldr	r3, [sp, #104]	; 0x68
   13bc8:	cmp	r3, #0
   13bcc:	beq	13c40 <__assert_fail@plt+0x1cf8>
   13bd0:	ldr	r3, [sl]
   13bd4:	movw	r2, #18988	; 0x4a2c
   13bd8:	movt	r2, #2
   13bdc:	add	r1, sp, #224	; 0xe0
   13be0:	ldr	r0, [r7, r3, lsl #2]
   13be4:	add	r3, r3, #1
   13be8:	str	r3, [sl]
   13bec:	mov	r8, r0
   13bf0:	add	r0, r0, #1
   13bf4:	bl	17424 <__assert_fail@plt+0x54dc>
   13bf8:	cmp	r0, #0
   13bfc:	beq	14b48 <__assert_fail@plt+0x2c00>
   13c00:	ldrb	r3, [r0]
   13c04:	cmp	r3, #46	; 0x2e
   13c08:	beq	14b30 <__assert_fail@plt+0x2be8>
   13c0c:	ldr	r3, [sp, #228]	; 0xe4
   13c10:	cmp	r3, #0
   13c14:	bne	13c28 <__assert_fail@plt+0x1ce0>
   13c18:	ldr	r3, [sp, #224]	; 0xe0
   13c1c:	cmp	r3, #0
   13c20:	subne	r3, r3, #1
   13c24:	strne	r3, [sp, #224]	; 0xe0
   13c28:	mov	r2, #1
   13c2c:	ldr	r1, [sp, #84]	; 0x54
   13c30:	bl	15350 <__assert_fail@plt+0x3408>
   13c34:	ldrb	r3, [r0]
   13c38:	cmp	r3, #0
   13c3c:	bne	14e7c <__assert_fail@plt+0x2f34>
   13c40:	mov	r3, #1
   13c44:	mov	r1, #40	; 0x28
   13c48:	ldr	r0, [sp, #84]	; 0x54
   13c4c:	strb	r3, [sp, #249]	; 0xf9
   13c50:	bl	212f0 <__assert_fail@plt+0xf3a8>
   13c54:	ldr	r8, [sp, #44]	; 0x2c
   13c58:	ldr	r2, [pc, #-388]	; 13adc <__assert_fail@plt+0x1b94>
   13c5c:	ldr	r3, [r8, #1172]	; 0x494
   13c60:	cmp	r3, #0
   13c64:	beq	131a0 <__assert_fail@plt+0x1258>
   13c68:	add	r2, r3, #36	; 0x24
   13c6c:	ldr	r3, [r3, #36]	; 0x24
   13c70:	b	13c60 <__assert_fail@plt+0x1d18>
   13c74:	add	r3, sp, #400	; 0x190
   13c78:	mvn	r2, #0
   13c7c:	ldrd	r8, [r3]
   13c80:	movw	r3, #65535	; 0xffff
   13c84:	movt	r3, #63	; 0x3f
   13c88:	cmp	r9, r3
   13c8c:	cmpeq	r8, r2
   13c90:	bhi	1469c <__assert_fail@plt+0x2754>
   13c94:	lsl	r3, r9, #10
   13c98:	lsl	r1, r8, #10
   13c9c:	orr	r3, r3, r8, lsr #22
   13ca0:	str	r1, [sp, #400]	; 0x190
   13ca4:	str	r3, [sp, #404]	; 0x194
   13ca8:	b	12d00 <__assert_fail@plt+0xdb8>
   13cac:	mov	r2, #5
   13cb0:	movw	r1, #19820	; 0x4d6c
   13cb4:	movt	r1, #2
   13cb8:	mov	r0, #0
   13cbc:	bl	11b58 <dcgettext@plt>
   13cc0:	mov	r1, #0
   13cc4:	mov	r3, r0
   13cc8:	movw	r2, #14316	; 0x37ec
   13ccc:	movt	r2, #2
   13cd0:	mov	r0, r1
   13cd4:	bl	11c90 <error@plt>
   13cd8:	b	1325c <__assert_fail@plt+0x1314>
   13cdc:	ldrb	r3, [sp, #287]	; 0x11f
   13ce0:	strb	r3, [fp, #1468]	; 0x5bc
   13ce4:	b	129cc <__assert_fail@plt+0xa84>
   13ce8:	mov	r1, #8
   13cec:	mov	r0, r9
   13cf0:	bl	212a8 <__assert_fail@plt+0xf360>
   13cf4:	mov	r3, #0
   13cf8:	b	13d00 <__assert_fail@plt+0x1db8>
   13cfc:	mov	r3, r1
   13d00:	ldr	r2, [sl, r3, lsl #2]
   13d04:	cmp	r3, r4
   13d08:	add	r1, r3, #1
   13d0c:	str	r2, [r0, r3, lsl #3]
   13d10:	bne	13cfc <__assert_fail@plt+0x1db4>
   13d14:	mov	r2, r9
   13d18:	mov	r1, #0
   13d1c:	ldr	r3, [sp, #52]	; 0x34
   13d20:	bl	18b88 <__assert_fail@plt+0x6c40>
   13d24:	b	13a4c <__assert_fail@plt+0x1b04>
   13d28:	movw	r0, #19092	; 0x4a94
   13d2c:	movt	r0, #2
   13d30:	bl	154bc <__assert_fail@plt+0x3574>
   13d34:	ldr	r3, [sp, #24]
   13d38:	cmp	r3, #0
   13d3c:	beq	13d88 <__assert_fail@plt+0x1e40>
   13d40:	ldr	ip, [sp, #84]	; 0x54
   13d44:	ldrd	r2, [sp, #188]	; 0xbc
   13d48:	add	r1, ip, #1
   13d4c:	sub	r0, r6, r2
   13d50:	mls	r3, r3, ip, r0
   13d54:	cmp	r1, r3
   13d58:	bcc	146b8 <__assert_fail@plt+0x2770>
   13d5c:	ldr	r1, [sp, #60]	; 0x3c
   13d60:	mov	r2, #0
   13d64:	ldr	r3, [sp, #184]	; 0xb8
   13d68:	str	r2, [r1, #1472]	; 0x5c0
   13d6c:	add	r6, r3, r6
   13d70:	b	138f0 <__assert_fail@plt+0x19a8>
   13d74:	sub	r0, r6, #16
   13d78:	mov	r2, r8
   13d7c:	ldr	r1, [sp, #152]	; 0x98
   13d80:	bl	17ea8 <__assert_fail@plt+0x5f60>
   13d84:	b	13a14 <__assert_fail@plt+0x1acc>
   13d88:	ldr	r1, [sp, #24]
   13d8c:	ldr	r3, [sp, #60]	; 0x3c
   13d90:	ldr	r2, [sp, #200]	; 0xc8
   13d94:	str	r1, [r3, #1472]	; 0x5c0
   13d98:	ldr	r3, [sp, #184]	; 0xb8
   13d9c:	orrs	r2, r9, r2
   13da0:	add	r6, r3, r6
   13da4:	bne	138f0 <__assert_fail@plt+0x19a8>
   13da8:	ldrd	r0, [sp, #36]	; 0x24
   13dac:	bl	17684 <__assert_fail@plt+0x573c>
   13db0:	ldr	r0, [sp, #52]	; 0x34
   13db4:	ldr	r1, [sp, #88]	; 0x58
   13db8:	bl	1750c <__assert_fail@plt+0x55c4>
   13dbc:	cmp	r0, #0
   13dc0:	beq	14c08 <__assert_fail@plt+0x2cc0>
   13dc4:	str	r0, [sp, #152]	; 0x98
   13dc8:	ldr	r9, [sp, #24]
   13dcc:	ldr	r8, [sp, #52]	; 0x34
   13dd0:	b	13908 <__assert_fail@plt+0x19c0>
   13dd4:	mov	r2, #0
   13dd8:	b	13650 <__assert_fail@plt+0x1708>
   13ddc:	cmp	r6, #0
   13de0:	bne	13390 <__assert_fail@plt+0x1448>
   13de4:	b	13350 <__assert_fail@plt+0x1408>
   13de8:	ldr	r3, [sp, #24]
   13dec:	ldr	r5, [sp, #88]	; 0x58
   13df0:	ldr	r9, [sp, #96]	; 0x60
   13df4:	orr	r8, r3, r7
   13df8:	ldr	r3, [sp, #80]	; 0x50
   13dfc:	uxtb	r8, r8
   13e00:	ldrd	sl, [sp, #104]	; 0x68
   13e04:	cmp	r3, #0
   13e08:	beq	141f0 <__assert_fail@plt+0x22a8>
   13e0c:	movw	r4, #25060	; 0x61e4
   13e10:	movt	r4, #3
   13e14:	ldr	r7, [fp]
   13e18:	ldr	r6, [r4, #96]	; 0x60
   13e1c:	cmp	r6, #256	; 0x100
   13e20:	beq	146e8 <__assert_fail@plt+0x27a0>
   13e24:	cmp	r6, r7
   13e28:	beq	14710 <__assert_fail@plt+0x27c8>
   13e2c:	ldrb	r3, [fp, #4]
   13e30:	cmp	r6, r3
   13e34:	beq	14790 <__assert_fail@plt+0x2848>
   13e38:	cmp	r6, #45	; 0x2d
   13e3c:	beq	14980 <__assert_fail@plt+0x2a38>
   13e40:	ldr	r3, [sp, #84]	; 0x54
   13e44:	cmp	r6, #43	; 0x2b
   13e48:	movne	r3, #0
   13e4c:	andeq	r3, r3, #1
   13e50:	cmp	r3, #0
   13e54:	bne	14a6c <__assert_fail@plt+0x2b24>
   13e58:	cmp	r8, #0
   13e5c:	beq	13e84 <__assert_fail@plt+0x1f3c>
   13e60:	ldr	r3, [sp, #72]	; 0x48
   13e64:	cmp	r3, #0
   13e68:	beq	1420c <__assert_fail@plt+0x22c4>
   13e6c:	ldr	r3, [sp, #24]
   13e70:	cmp	r3, #0
   13e74:	beq	13e84 <__assert_fail@plt+0x1f3c>
   13e78:	ldrb	r3, [fp, #1497]	; 0x5d9
   13e7c:	cmp	r3, #0
   13e80:	bne	147e0 <__assert_fail@plt+0x2898>
   13e84:	ldr	r0, [sp, #40]	; 0x28
   13e88:	bl	1520c <__assert_fail@plt+0x32c4>
   13e8c:	cmp	r0, #0
   13e90:	ldrb	r6, [sp, #327]	; 0x147
   13e94:	beq	14284 <__assert_fail@plt+0x233c>
   13e98:	cmp	r6, #0
   13e9c:	beq	129bc <__assert_fail@plt+0xa74>
   13ea0:	ldrb	r7, [fp, #1467]	; 0x5bb
   13ea4:	cmp	r7, #0
   13ea8:	bne	148d8 <__assert_fail@plt+0x2990>
   13eac:	ldrb	r3, [fp, #1466]	; 0x5ba
   13eb0:	cmp	r3, #0
   13eb4:	beq	13f24 <__assert_fail@plt+0x1fdc>
   13eb8:	ldr	r3, [fp, #1172]	; 0x494
   13ebc:	cmp	r3, #0
   13ec0:	beq	13f24 <__assert_fail@plt+0x1fdc>
   13ec4:	add	r4, sp, #184	; 0xb8
   13ec8:	ldr	r0, [sp, #40]	; 0x28
   13ecc:	mov	r1, r4
   13ed0:	bl	15284 <__assert_fail@plt+0x333c>
   13ed4:	mov	r0, r4
   13ed8:	bl	11d50 <strlen@plt>
   13edc:	mov	ip, #5
   13ee0:	mov	r3, r0
   13ee4:	movw	r2, #20496	; 0x5010
   13ee8:	movt	r2, #2
   13eec:	movw	r1, #20524	; 0x502c
   13ef0:	movt	r1, #2
   13ef4:	str	ip, [sp]
   13ef8:	mov	r0, r7
   13efc:	bl	11f3c <dcngettext@plt>
   13f00:	mov	r2, r0
   13f04:	mov	r3, r4
   13f08:	mov	r1, r7
   13f0c:	mov	r0, r7
   13f10:	bl	11c90 <error@plt>
   13f14:	strb	r6, [sp, #327]	; 0x147
   13f18:	ldrb	r3, [fp, #1467]	; 0x5bb
   13f1c:	cmp	r3, #0
   13f20:	bne	129bc <__assert_fail@plt+0xa74>
   13f24:	ldrb	r4, [fp, #1466]	; 0x5ba
   13f28:	cmp	r4, #0
   13f2c:	bne	129bc <__assert_fail@plt+0xa74>
   13f30:	ldr	r3, [fp, #1172]	; 0x494
   13f34:	cmp	r3, #0
   13f38:	beq	129bc <__assert_fail@plt+0xa74>
   13f3c:	mov	r2, #5
   13f40:	mov	r0, r4
   13f44:	movw	r1, #20548	; 0x5044
   13f48:	movt	r1, #2
   13f4c:	bl	11b58 <dcgettext@plt>
   13f50:	mov	r2, r0
   13f54:	mov	r1, r4
   13f58:	mov	r0, r4
   13f5c:	bl	11c90 <error@plt>
   13f60:	b	129bc <__assert_fail@plt+0xa74>
   13f64:	mov	r2, #5
   13f68:	movw	r1, #20076	; 0x4e6c
   13f6c:	movt	r1, #2
   13f70:	mov	r0, #0
   13f74:	bl	11b58 <dcgettext@plt>
   13f78:	mov	r1, #0
   13f7c:	mov	r3, r5
   13f80:	mov	r2, r0
   13f84:	mov	r0, r1
   13f88:	bl	11c90 <error@plt>
   13f8c:	ldrb	r1, [r4, #28]
   13f90:	ldrb	r3, [r4, #26]
   13f94:	cmp	r1, #0
   13f98:	streq	r8, [sp, #80]	; 0x50
   13f9c:	strne	r1, [sp, #84]	; 0x54
   13fa0:	b	13394 <__assert_fail@plt+0x144c>
   13fa4:	ldrd	r0, [sp, #36]	; 0x24
   13fa8:	ldr	fp, [sp, #60]	; 0x3c
   13fac:	bl	17684 <__assert_fail@plt+0x573c>
   13fb0:	ldr	r3, [sp, #24]
   13fb4:	cmp	r3, #0
   13fb8:	bne	13834 <__assert_fail@plt+0x18ec>
   13fbc:	ldr	r0, [sp, #184]	; 0xb8
   13fc0:	mov	r6, r9
   13fc4:	bl	1b670 <__assert_fail@plt+0x9728>
   13fc8:	mov	r1, #8
   13fcc:	mov	r0, r9
   13fd0:	ldr	r4, [fp, #1032]	; 0x408
   13fd4:	bl	210e8 <__assert_fail@plt+0xf1a0>
   13fd8:	mov	r5, r0
   13fdc:	mov	r3, r0
   13fe0:	b	13ff4 <__assert_fail@plt+0x20ac>
   13fe4:	add	r2, r4, #9
   13fe8:	str	r4, [r3, #-4]
   13fec:	ldr	r4, [r4]
   13ff0:	str	r2, [r3, #-8]
   13ff4:	cmp	r4, #0
   13ff8:	add	r3, r3, #8
   13ffc:	bne	13fe4 <__assert_fail@plt+0x209c>
   14000:	mov	r0, r5
   14004:	mov	r2, r6
   14008:	ldr	r3, [sp, #52]	; 0x34
   1400c:	mov	r1, r6
   14010:	bl	18b88 <__assert_fail@plt+0x6c40>
   14014:	mov	r0, r5
   14018:	bl	1b670 <__assert_fail@plt+0x9728>
   1401c:	b	13a40 <__assert_fail@plt+0x1af8>
   14020:	ldr	r8, [sl]
   14024:	movw	r1, #14604	; 0x390c
   14028:	movt	r1, #2
   1402c:	mov	r0, r8
   14030:	bl	1750c <__assert_fail@plt+0x55c4>
   14034:	subs	r9, r0, #0
   14038:	beq	14c10 <__assert_fail@plt+0x2cc8>
   1403c:	movw	r3, #25060	; 0x61e4
   14040:	movt	r3, #3
   14044:	ldrb	r6, [fp, #1466]	; 0x5ba
   14048:	add	r0, sp, #296	; 0x128
   1404c:	mov	r1, #16
   14050:	ldr	r3, [r3, #104]	; 0x68
   14054:	str	r0, [sp, #40]	; 0x28
   14058:	ldr	r2, [fp, #1488]	; 0x5d0
   1405c:	eor	r6, r6, #1
   14060:	ldr	r4, [sp, #52]	; 0x34
   14064:	ldr	sl, [fp, #1172]	; 0x494
   14068:	cmp	r2, r3
   1406c:	movcc	r2, r3
   14070:	bl	156e8 <__assert_fail@plt+0x37a0>
   14074:	mov	r7, r4
   14078:	mov	r2, #0
   1407c:	str	r4, [sp, #152]	; 0x98
   14080:	mov	r3, #0
   14084:	strd	r2, [sp, #24]
   14088:	mov	r2, r8
   1408c:	mov	r1, r9
   14090:	ldr	r0, [sp, #40]	; 0x28
   14094:	bl	16d08 <__assert_fail@plt+0x4dc0>
   14098:	cmp	r0, #0
   1409c:	beq	14aac <__assert_fail@plt+0x2b64>
   140a0:	ldr	r4, [sp, #296]	; 0x128
   140a4:	cmp	r7, #0
   140a8:	ldr	r5, [sp, #304]	; 0x130
   140ac:	ldr	r3, [sp, #308]	; 0x134
   140b0:	add	r4, r4, r3
   140b4:	sub	r5, r4, r5, lsl #4
   140b8:	sub	r4, r4, #16
   140bc:	beq	140d8 <__assert_fail@plt+0x2190>
   140c0:	b	1417c <__assert_fail@plt+0x2234>
   140c4:	sub	r4, r4, #16
   140c8:	mov	r1, r4
   140cc:	bl	17b80 <__assert_fail@plt+0x5c38>
   140d0:	cmp	r6, r0
   140d4:	ble	14190 <__assert_fail@plt+0x2248>
   140d8:	cmp	r5, r4
   140dc:	mov	r0, r4
   140e0:	bcc	140c4 <__assert_fail@plt+0x217c>
   140e4:	ldrd	r0, [sp, #24]
   140e8:	ldr	r3, [sp, #304]	; 0x130
   140ec:	ldr	r2, [r4, #4]
   140f0:	adds	r0, r0, r3
   140f4:	adc	r1, r1, #0
   140f8:	cmp	r7, r2
   140fc:	strd	r0, [sp, #24]
   14100:	bcc	14154 <__assert_fail@plt+0x220c>
   14104:	ldr	r1, [r4]
   14108:	ldr	r0, [sp, #152]	; 0x98
   1410c:	bl	11ac8 <memcpy@plt>
   14110:	ldr	r3, [r4, #4]
   14114:	cmp	sl, #0
   14118:	str	r3, [sp, #156]	; 0x9c
   1411c:	beq	14088 <__assert_fail@plt+0x2140>
   14120:	ldr	r0, [r4]
   14124:	ldr	r3, [r4, #8]
   14128:	ldr	r1, [r4, #12]
   1412c:	ldr	r2, [sp, #152]	; 0x98
   14130:	sub	r3, r3, r0
   14134:	sub	r1, r1, r0
   14138:	add	r3, r2, r3
   1413c:	add	r2, r2, r1
   14140:	str	r3, [sp, #160]	; 0xa0
   14144:	str	r2, [sp, #164]	; 0xa4
   14148:	b	14088 <__assert_fail@plt+0x2140>
   1414c:	cmp	r2, r7
   14150:	bls	14160 <__assert_fail@plt+0x2218>
   14154:	lsls	r7, r7, #1
   14158:	bne	1414c <__assert_fail@plt+0x2204>
   1415c:	mov	r7, r2
   14160:	ldr	r0, [sp, #152]	; 0x98
   14164:	bl	1b670 <__assert_fail@plt+0x9728>
   14168:	mov	r0, r7
   1416c:	bl	20f80 <__assert_fail@plt+0xf038>
   14170:	ldr	r2, [r4, #4]
   14174:	str	r0, [sp, #152]	; 0x98
   14178:	b	14104 <__assert_fail@plt+0x21bc>
   1417c:	add	r0, sp, #152	; 0x98
   14180:	mov	r1, r4
   14184:	bl	17b80 <__assert_fail@plt+0x5c38>
   14188:	cmp	r6, r0
   1418c:	bgt	140d8 <__assert_fail@plt+0x2190>
   14190:	ldr	r3, [sp, #36]	; 0x24
   14194:	cmp	r3, #99	; 0x63
   14198:	movne	sl, #0
   1419c:	beq	1482c <__assert_fail@plt+0x28e4>
   141a0:	mov	r1, r8
   141a4:	mov	r0, r9
   141a8:	bl	17684 <__assert_fail@plt+0x573c>
   141ac:	ldr	r0, [sp, #296]	; 0x128
   141b0:	bl	1b670 <__assert_fail@plt+0x9728>
   141b4:	ldr	r0, [sp, #152]	; 0x98
   141b8:	bl	1b670 <__assert_fail@plt+0x9728>
   141bc:	eor	r0, sl, #1
   141c0:	bl	11d38 <exit@plt>
   141c4:	mov	r2, #1
   141c8:	ldr	r1, [sp, #72]	; 0x48
   141cc:	mov	r3, r2
   141d0:	b	141dc <__assert_fail@plt+0x2294>
   141d4:	lsl	r3, r3, #1
   141d8:	add	r2, r2, #1
   141dc:	cmp	r1, r3
   141e0:	bhi	141d4 <__assert_fail@plt+0x228c>
   141e4:	lsl	r3, r2, #4
   141e8:	str	r3, [sp, #84]	; 0x54
   141ec:	b	13874 <__assert_fail@plt+0x192c>
   141f0:	ldr	r3, [sp, #84]	; 0x54
   141f4:	cmp	r3, #0
   141f8:	bne	14dd4 <__assert_fail@plt+0x2e8c>
   141fc:	cmp	r8, #0
   14200:	movwne	r4, #25060	; 0x61e4
   14204:	movtne	r4, #3
   14208:	beq	13e84 <__assert_fail@plt+0x1f3c>
   1420c:	movw	r1, #20364	; 0x4f8c
   14210:	movt	r1, #2
   14214:	mov	r2, #5
   14218:	mov	r0, #0
   1421c:	bl	11b58 <dcgettext@plt>
   14220:	ldrb	r7, [fp, #4]
   14224:	mov	r6, r0
   14228:	ldr	r3, [r4, #96]	; 0x60
   1422c:	cmp	r7, r3
   14230:	movweq	r8, #16120	; 0x3ef8
   14234:	movteq	r8, #2
   14238:	beq	14254 <__assert_fail@plt+0x230c>
   1423c:	movw	r1, #20416	; 0x4fc0
   14240:	movt	r1, #2
   14244:	mov	r2, #5
   14248:	mov	r0, #0
   1424c:	bl	11b58 <dcgettext@plt>
   14250:	mov	r8, r0
   14254:	mov	r4, #0
   14258:	add	r0, sp, #112	; 0x70
   1425c:	strb	r7, [sp, #112]	; 0x70
   14260:	strb	r4, [sp, #113]	; 0x71
   14264:	bl	1f7cc <__assert_fail@plt+0xd884>
   14268:	mov	r3, r8
   1426c:	mov	r2, r6
   14270:	str	r0, [sp]
   14274:	mov	r1, r4
   14278:	mov	r0, r4
   1427c:	bl	11c90 <error@plt>
   14280:	b	13e6c <__assert_fail@plt+0x1f24>
   14284:	ldrb	r3, [fp, #1467]	; 0x5bb
   14288:	cmp	r3, #0
   1428c:	bne	1429c <__assert_fail@plt+0x2354>
   14290:	ldrb	r3, [fp, #1466]	; 0x5ba
   14294:	cmp	r3, #0
   14298:	strbeq	r3, [sp, #327]	; 0x147
   1429c:	add	r4, sp, #184	; 0xb8
   142a0:	ldr	r0, [sp, #40]	; 0x28
   142a4:	mov	r1, r4
   142a8:	bl	15284 <__assert_fail@plt+0x333c>
   142ac:	mov	r0, r4
   142b0:	bl	11d50 <strlen@plt>
   142b4:	mov	ip, #5
   142b8:	mov	r3, r0
   142bc:	movw	r2, #20496	; 0x5010
   142c0:	movt	r2, #2
   142c4:	movw	r1, #20524	; 0x502c
   142c8:	movt	r1, #2
   142cc:	str	ip, [sp]
   142d0:	mov	r0, #0
   142d4:	bl	11f3c <dcngettext@plt>
   142d8:	mov	r1, #0
   142dc:	mov	r2, r0
   142e0:	mov	r3, r4
   142e4:	mov	r0, r1
   142e8:	bl	11c90 <error@plt>
   142ec:	cmp	r6, #0
   142f0:	strb	r6, [sp, #327]	; 0x147
   142f4:	bne	13f18 <__assert_fail@plt+0x1fd0>
   142f8:	b	129bc <__assert_fail@plt+0xa74>
   142fc:	add	r1, sp, #224	; 0xe0
   14300:	add	r0, r0, #1
   14304:	str	lr, [sp, #104]	; 0x68
   14308:	movw	r2, #19220	; 0x4b14
   1430c:	movt	r2, #2
   14310:	bl	17424 <__assert_fail@plt+0x54dc>
   14314:	ldr	lr, [sp, #104]	; 0x68
   14318:	ldr	r2, [sp, #224]	; 0xe0
   1431c:	sub	r1, r2, #1
   14320:	cmp	r2, #0
   14324:	str	r1, [sp, #224]	; 0xe0
   14328:	beq	14ab4 <__assert_fail@plt+0x2b6c>
   1432c:	ldrb	r2, [r0]
   14330:	cmp	r2, #46	; 0x2e
   14334:	beq	14940 <__assert_fail@plt+0x29f8>
   14338:	mov	r2, #1
   1433c:	ldr	r1, [sp, #84]	; 0x54
   14340:	str	lr, [sp, #104]	; 0x68
   14344:	bl	15350 <__assert_fail@plt+0x3408>
   14348:	ldr	lr, [sp, #104]	; 0x68
   1434c:	b	12c78 <__assert_fail@plt+0xd30>
   14350:	add	r1, sp, #220	; 0xdc
   14354:	add	r0, r0, #1
   14358:	str	lr, [sp, #104]	; 0x68
   1435c:	movw	r2, #19016	; 0x4a48
   14360:	movt	r2, #2
   14364:	bl	17424 <__assert_fail@plt+0x54dc>
   14368:	ldr	lr, [sp, #104]	; 0x68
   1436c:	ldr	r1, [sp, #220]	; 0xdc
   14370:	mov	r2, r1
   14374:	sub	r1, r1, #1
   14378:	cmp	r2, #0
   1437c:	str	r1, [sp, #220]	; 0xdc
   14380:	beq	14de0 <__assert_fail@plt+0x2e98>
   14384:	ldr	r2, [sp, #216]	; 0xd8
   14388:	b	12c40 <__assert_fail@plt+0xcf8>
   1438c:	mov	r2, #5
   14390:	mov	r0, r4
   14394:	movw	r1, #19892	; 0x4db4
   14398:	movt	r1, #2
   1439c:	bl	11b58 <dcgettext@plt>
   143a0:	mov	r3, r0
   143a4:	movw	r2, #14316	; 0x37ec
   143a8:	movt	r2, #2
   143ac:	mov	r1, r4
   143b0:	mov	r0, r4
   143b4:	bl	11c90 <error@plt>
   143b8:	b	132a4 <__assert_fail@plt+0x135c>
   143bc:	movw	r3, #14356	; 0x3814
   143c0:	movt	r3, #2
   143c4:	str	r3, [sp, #56]	; 0x38
   143c8:	ldr	r3, [sp, #84]	; 0x54
   143cc:	str	r9, [sp, #60]	; 0x3c
   143d0:	add	r8, r3, #1
   143d4:	add	sl, r3, #2
   143d8:	add	r3, sp, #296	; 0x128
   143dc:	mov	r9, r3
   143e0:	b	14444 <__assert_fail@plt+0x24fc>
   143e4:	ldr	r0, [fp, #1488]	; 0x5d0
   143e8:	cmp	r0, #0
   143ec:	bne	14678 <__assert_fail@plt+0x2730>
   143f0:	ldr	r3, [fp, #1500]	; 0x5dc
   143f4:	mov	r6, #131072	; 0x20000
   143f8:	mov	r7, #0
   143fc:	cmp	r3, #0
   14400:	beq	144b8 <__assert_fail@plt+0x2570>
   14404:	mul	r1, r6, r8
   14408:	mov	r3, #0
   1440c:	ldr	r0, [fp, #1500]	; 0x5dc
   14410:	cmp	r7, r3
   14414:	add	r1, r1, #1
   14418:	udiv	r2, r1, r8
   1441c:	cmpeq	r6, r2
   14420:	bne	14678 <__assert_fail@plt+0x2730>
   14424:	sub	r3, r0, sl
   14428:	cmp	r1, r3
   1442c:	bcs	14678 <__assert_fail@plt+0x2730>
   14430:	ldr	r3, [sp, #24]
   14434:	add	r4, r4, #1
   14438:	add	sl, sl, r1
   1443c:	cmp	r4, r3
   14440:	bcs	14824 <__assert_fail@plt+0x28dc>
   14444:	cmp	r4, #0
   14448:	beq	145ec <__assert_fail@plt+0x26a4>
   1444c:	ldr	r3, [sp, #48]	; 0x30
   14450:	ldr	r1, [sp, #56]	; 0x38
   14454:	ldr	r5, [r3, r4, lsl #2]
   14458:	mov	r0, r5
   1445c:	bl	11a2c <strcmp@plt>
   14460:	subs	r1, r0, #0
   14464:	bne	145d0 <__assert_fail@plt+0x2688>
   14468:	mov	r2, r9
   1446c:	mov	r0, #3
   14470:	bl	11bf4 <__fxstat64@plt>
   14474:	adds	r0, r0, #0
   14478:	movne	r0, #1
   1447c:	cmp	r0, #0
   14480:	bne	14ac4 <__assert_fail@plt+0x2b7c>
   14484:	ldr	r3, [sp, #312]	; 0x138
   14488:	and	r3, r3, #61440	; 0xf000
   1448c:	cmp	r3, #32768	; 0x8000
   14490:	bne	143e4 <__assert_fail@plt+0x249c>
   14494:	ldr	r3, [fp, #1500]	; 0x5dc
   14498:	add	r2, sp, #344	; 0x158
   1449c:	ldrd	r6, [r2]
   144a0:	cmp	r3, #0
   144a4:	bne	14404 <__assert_fail@plt+0x24bc>
   144a8:	ldr	r3, [fp, #1488]	; 0x5d0
   144ac:	cmp	r3, #0
   144b0:	str	r3, [fp, #1500]	; 0x5dc
   144b4:	bne	14404 <__assert_fail@plt+0x24bc>
   144b8:	mov	r0, #2
   144bc:	add	r1, sp, #152	; 0x98
   144c0:	bl	11b94 <getrlimit64@plt>
   144c4:	cmp	r0, #0
   144c8:	mvnne	r5, #0
   144cc:	bne	144ec <__assert_fail@plt+0x25a4>
   144d0:	ldrd	r2, [sp, #152]	; 0x98
   144d4:	mov	r1, #0
   144d8:	mvn	r0, #1
   144dc:	cmp	r3, r1
   144e0:	cmpeq	r2, r0
   144e4:	movls	r5, r2
   144e8:	mvnhi	r5, #0
   144ec:	add	r1, sp, #152	; 0x98
   144f0:	mov	r0, #9
   144f4:	bl	11b94 <getrlimit64@plt>
   144f8:	cmp	r0, #0
   144fc:	bne	14514 <__assert_fail@plt+0x25cc>
   14500:	ldrd	r0, [sp, #152]	; 0x98
   14504:	mov	r3, #0
   14508:	cmp	r1, r3
   1450c:	cmpeq	r0, r5
   14510:	movcc	r5, r0
   14514:	add	r1, sp, #152	; 0x98
   14518:	mov	r0, #5
   1451c:	lsr	r5, r5, #1
   14520:	bl	11b94 <getrlimit64@plt>
   14524:	cmp	r0, #0
   14528:	bne	1455c <__assert_fail@plt+0x2614>
   1452c:	ldr	ip, [sp, #152]	; 0x98
   14530:	mov	r2, #15
   14534:	ldr	r3, [sp, #156]	; 0x9c
   14538:	lsr	ip, ip, #4
   1453c:	orr	ip, ip, r3, lsl #28
   14540:	lsr	r3, r3, #4
   14544:	umull	r0, r1, ip, r2
   14548:	mla	r1, r2, r3, r1
   1454c:	mov	r3, #0
   14550:	cmp	r1, r3
   14554:	cmpeq	r0, r5
   14558:	rsbcc	r5, ip, ip, lsl #4
   1455c:	bl	1d200 <__assert_fail@plt+0xb2b8>
   14560:	vmov.f64	d8, d0
   14564:	bl	1d160 <__assert_fail@plt+0xb218>
   14568:	vmov	s15, r5
   1456c:	vmul.f64	d6, d0, d10
   14570:	vmul.f64	d0, d0, d9
   14574:	vcmpe.f64	d8, d6
   14578:	vcvt.f64.u32	d7, s15
   1457c:	vmrs	APSR_nzcv, fpscr
   14580:	vcmpe.f64	d0, d7
   14584:	vmovle.f64	d8, d6
   14588:	vmrs	APSR_nzcv, fpscr
   1458c:	bpl	1459c <__assert_fail@plt+0x2654>
   14590:	vcvt.u32.f64	s15, d0
   14594:	vmov	r5, s15
   14598:	vcvt.f64.u32	d7, s15
   1459c:	vcmpe.f64	d7, d8
   145a0:	movw	r3, #25060	; 0x61e4
   145a4:	movt	r3, #3
   145a8:	ldr	r2, [r3, #112]	; 0x70
   145ac:	mov	r3, #18
   145b0:	vmrs	APSR_nzcv, fpscr
   145b4:	mul	r3, r3, r2
   145b8:	vcvtgt.u32.f64	s15, d8
   145bc:	vmovgt	r5, s15
   145c0:	cmp	r3, r5
   145c4:	movcs	r5, r3
   145c8:	str	r5, [fp, #1500]	; 0x5dc
   145cc:	b	14404 <__assert_fail@plt+0x24bc>
   145d0:	mov	r1, r5
   145d4:	mov	r2, r9
   145d8:	mov	r0, #3
   145dc:	bl	11f00 <__xstat64@plt>
   145e0:	adds	r0, r0, #0
   145e4:	movne	r0, #1
   145e8:	b	1447c <__assert_fail@plt+0x2534>
   145ec:	ldr	r0, [sp, #36]	; 0x24
   145f0:	bl	11dc8 <fileno@plt>
   145f4:	mov	r1, r0
   145f8:	mov	r2, r9
   145fc:	mov	r0, #3
   14600:	bl	11bf4 <__fxstat64@plt>
   14604:	adds	r0, r0, #0
   14608:	movne	r0, #1
   1460c:	b	1447c <__assert_fail@plt+0x2534>
   14610:	ldrb	r2, [r4, #25]
   14614:	cmp	r2, #0
   14618:	bne	13350 <__assert_fail@plt+0x1408>
   1461c:	ldr	r2, [r4, #12]
   14620:	cmp	r2, #0
   14624:	beq	13350 <__assert_fail@plt+0x1408>
   14628:	b	136b8 <__assert_fail@plt+0x1770>
   1462c:	add	r0, sp, #256	; 0x100
   14630:	mov	r1, #40	; 0x28
   14634:	bl	212f0 <__assert_fail@plt+0xf3a8>
   14638:	ldr	r2, [pc, #-2916]	; 13adc <__assert_fail@plt+0x1b94>
   1463c:	ldr	r3, [fp, #1172]	; 0x494
   14640:	cmp	r3, #0
   14644:	beq	14654 <__assert_fail@plt+0x270c>
   14648:	add	r2, r3, #36	; 0x24
   1464c:	ldr	r3, [r3, #36]	; 0x24
   14650:	b	14640 <__assert_fail@plt+0x26f8>
   14654:	ldrb	r9, [sp, #283]	; 0x11b
   14658:	str	r0, [r2]
   1465c:	ldr	r4, [fp, #1172]	; 0x494
   14660:	str	r3, [r0, #36]	; 0x24
   14664:	mov	r3, #1
   14668:	mov	r8, r3
   1466c:	cmp	r4, #0
   14670:	bne	12964 <__assert_fail@plt+0xa1c>
   14674:	b	129b0 <__assert_fail@plt+0xa68>
   14678:	ldr	r9, [sp, #60]	; 0x3c
   1467c:	mov	sl, r0
   14680:	add	r3, sp, #184	; 0xb8
   14684:	mov	r2, sl
   14688:	mov	r0, r3
   1468c:	ldr	r1, [sp, #84]	; 0x54
   14690:	str	r3, [sp, #56]	; 0x38
   14694:	bl	156e8 <__assert_fail@plt+0x37a0>
   14698:	b	13888 <__assert_fail@plt+0x1940>
   1469c:	mov	r4, sl
   146a0:	mov	r0, #1
   146a4:	ldr	r8, [sp, #84]	; 0x54
   146a8:	b	131f4 <__assert_fail@plt+0x12ac>
   146ac:	mvn	r3, #0
   146b0:	str	r3, [sp, #64]	; 0x40
   146b4:	b	123cc <__assert_fail@plt+0x484>
   146b8:	ldrd	r0, [sp, #36]	; 0x24
   146bc:	str	r2, [sp, #200]	; 0xc8
   146c0:	ldr	fp, [sp, #60]	; 0x3c
   146c4:	bl	17684 <__assert_fail@plt+0x573c>
   146c8:	b	13834 <__assert_fail@plt+0x18ec>
   146cc:	mov	r0, #2
   146d0:	bl	1d048 <__assert_fail@plt+0xb100>
   146d4:	cmp	r0, #8
   146d8:	movcc	r3, r0
   146dc:	movcs	r3, #8
   146e0:	str	r3, [sp, #64]	; 0x40
   146e4:	b	137e4 <__assert_fail@plt+0x189c>
   146e8:	cmp	r7, #256	; 0x100
   146ec:	beq	14768 <__assert_fail@plt+0x2820>
   146f0:	ldr	r3, [sp, #56]	; 0x38
   146f4:	ldr	r2, [r3]
   146f8:	uxtb	r3, r7
   146fc:	lsl	r3, r3, #1
   14700:	ldrh	r3, [r2, r3]
   14704:	ands	r3, r3, #1
   14708:	str	r3, [sp, #72]	; 0x48
   1470c:	beq	14768 <__assert_fail@plt+0x2820>
   14710:	mov	r2, #5
   14714:	mov	r0, #0
   14718:	movw	r1, #20124	; 0x4e9c
   1471c:	movt	r1, #2
   14720:	mov	r6, r0
   14724:	bl	11b58 <dcgettext@plt>
   14728:	mov	r2, r0
   1472c:	add	r0, sp, #128	; 0x80
   14730:	str	r2, [sp, #44]	; 0x2c
   14734:	strb	r7, [sp, #128]	; 0x80
   14738:	strb	r6, [sp, #129]	; 0x81
   1473c:	bl	1f7cc <__assert_fail@plt+0xd884>
   14740:	mov	r3, r0
   14744:	mov	r1, r6
   14748:	ldr	r2, [sp, #44]	; 0x2c
   1474c:	mov	r0, r6
   14750:	bl	11c90 <error@plt>
   14754:	ldr	r6, [r4, #96]	; 0x60
   14758:	ldr	r3, [sp, #80]	; 0x50
   1475c:	cmp	r6, #256	; 0x100
   14760:	str	r3, [sp, #72]	; 0x48
   14764:	bne	13e2c <__assert_fail@plt+0x1ee4>
   14768:	ldr	r3, [fp]
   1476c:	cmp	r3, #256	; 0x100
   14770:	beq	13e58 <__assert_fail@plt+0x1f10>
   14774:	ldr	r2, [sp, #56]	; 0x38
   14778:	ldrb	r3, [fp, #4]
   1477c:	ldr	r2, [r2]
   14780:	lsl	r3, r3, #1
   14784:	ldrh	r3, [r2, r3]
   14788:	tst	r3, #1
   1478c:	beq	13e58 <__assert_fail@plt+0x1f10>
   14790:	mov	r2, #5
   14794:	movw	r1, #20188	; 0x4edc
   14798:	movt	r1, #2
   1479c:	mov	r0, #0
   147a0:	bl	11b58 <dcgettext@plt>
   147a4:	ldrb	r3, [fp, #4]
   147a8:	mov	r4, #0
   147ac:	mov	r6, r0
   147b0:	add	r0, sp, #124	; 0x7c
   147b4:	strb	r3, [sp, #124]	; 0x7c
   147b8:	strb	r4, [sp, #125]	; 0x7d
   147bc:	bl	1f7cc <__assert_fail@plt+0xd884>
   147c0:	mov	r3, r0
   147c4:	mov	r2, r6
   147c8:	mov	r1, r4
   147cc:	mov	r0, r4
   147d0:	bl	11c90 <error@plt>
   147d4:	cmp	r8, r4
   147d8:	bne	13e6c <__assert_fail@plt+0x1f24>
   147dc:	b	13e84 <__assert_fail@plt+0x1f3c>
   147e0:	mov	r2, #5
   147e4:	movw	r1, #20424	; 0x4fc8
   147e8:	movt	r1, #2
   147ec:	mov	r0, #0
   147f0:	bl	11b58 <dcgettext@plt>
   147f4:	mov	r1, #0
   147f8:	mov	r2, r0
   147fc:	mov	r0, r1
   14800:	bl	11c90 <error@plt>
   14804:	b	13e84 <__assert_fail@plt+0x1f3c>
   14808:	ldrb	r2, [r2, #1]
   1480c:	sub	r2, r2, #48	; 0x30
   14810:	cmp	r2, #9
   14814:	movhi	r3, #0
   14818:	movls	r3, #1
   1481c:	str	r3, [sp, #104]	; 0x68
   14820:	b	13b0c <__assert_fail@plt+0x1bc4>
   14824:	ldr	r9, [sp, #60]	; 0x3c
   14828:	b	14680 <__assert_fail@plt+0x2738>
   1482c:	ldrd	r6, [sp, #24]
   14830:	mov	r2, #5
   14834:	mov	r0, #0
   14838:	movw	r5, #25288	; 0x62c8
   1483c:	movt	r5, #3
   14840:	ldr	r3, [sp, #296]	; 0x128
   14844:	movw	r1, #20648	; 0x50a8
   14848:	movt	r1, #2
   1484c:	mov	sl, r0
   14850:	ldr	ip, [sp, #308]	; 0x134
   14854:	ldr	fp, [r5]
   14858:	add	r3, r3, ip
   1485c:	sub	r3, r3, r4
   14860:	asr	r3, r3, #4
   14864:	adds	r6, r6, r3
   14868:	adc	r7, r7, r3, asr #31
   1486c:	bl	11b58 <dcgettext@plt>
   14870:	movw	r3, #26828	; 0x68cc
   14874:	movt	r3, #3
   14878:	str	r0, [sp, #24]
   1487c:	mov	r0, r6
   14880:	ldr	r6, [r3]
   14884:	mov	r1, r7
   14888:	add	r2, sp, #184	; 0xb8
   1488c:	bl	1ccc8 <__assert_fail@plt+0xad80>
   14890:	mov	r1, #1
   14894:	str	r8, [sp]
   14898:	str	r0, [sp, #4]
   1489c:	mov	r0, fp
   148a0:	mov	r3, r6
   148a4:	ldr	r2, [sp, #24]
   148a8:	bl	11dd4 <__fprintf_chk@plt>
   148ac:	ldr	r5, [r5]
   148b0:	mov	r2, #5
   148b4:	mov	r0, sl
   148b8:	movw	r1, #20672	; 0x50c0
   148bc:	movt	r1, #2
   148c0:	bl	11b58 <dcgettext@plt>
   148c4:	mov	r2, r0
   148c8:	mov	r0, r4
   148cc:	mov	r1, r5
   148d0:	bl	1771c <__assert_fail@plt+0x57d4>
   148d4:	b	141a0 <__assert_fail@plt+0x2258>
   148d8:	ldr	r3, [fp, #1172]	; 0x494
   148dc:	cmp	r3, #0
   148e0:	beq	129bc <__assert_fail@plt+0xa74>
   148e4:	add	r4, sp, #184	; 0xb8
   148e8:	ldr	r0, [sp, #40]	; 0x28
   148ec:	mov	r1, r4
   148f0:	bl	15284 <__assert_fail@plt+0x333c>
   148f4:	mov	r0, r4
   148f8:	bl	11d50 <strlen@plt>
   148fc:	mov	ip, #5
   14900:	mov	r3, r0
   14904:	movw	r2, #20496	; 0x5010
   14908:	movt	r2, #2
   1490c:	movw	r1, #20524	; 0x502c
   14910:	movt	r1, #2
   14914:	str	ip, [sp]
   14918:	mov	r0, #0
   1491c:	bl	11f3c <dcngettext@plt>
   14920:	mov	r1, #0
   14924:	mov	r3, r4
   14928:	mov	r2, r0
   1492c:	mov	r0, r1
   14930:	bl	11c90 <error@plt>
   14934:	mov	r3, #1
   14938:	strb	r3, [sp, #327]	; 0x147
   1493c:	b	13f18 <__assert_fail@plt+0x1fd0>
   14940:	add	r0, r0, #1
   14944:	movw	r2, #19016	; 0x4a48
   14948:	movt	r2, #2
   1494c:	add	r1, sp, #228	; 0xe4
   14950:	str	lr, [sp, #104]	; 0x68
   14954:	bl	17424 <__assert_fail@plt+0x54dc>
   14958:	ldr	lr, [sp, #104]	; 0x68
   1495c:	b	14338 <__assert_fail@plt+0x23f0>
   14960:	movw	r1, #14468	; 0x3884
   14964:	movt	r1, #2
   14968:	mov	r2, #5
   1496c:	mov	r0, #0
   14970:	bl	11b58 <dcgettext@plt>
   14974:	movw	r1, #14356	; 0x3814
   14978:	movt	r1, #2
   1497c:	bl	155b0 <__assert_fail@plt+0x3668>
   14980:	mov	r2, #5
   14984:	movw	r1, #20248	; 0x4f18
   14988:	movt	r1, #2
   1498c:	mov	r0, #0
   14990:	bl	11b58 <dcgettext@plt>
   14994:	mov	r7, r0
   14998:	add	r0, sp, #120	; 0x78
   1499c:	strh	r6, [sp, #120]	; 0x78
   149a0:	bl	1f7cc <__assert_fail@plt+0xd884>
   149a4:	mov	r1, #0
   149a8:	mov	r3, r0
   149ac:	mov	r2, r7
   149b0:	mov	r0, r1
   149b4:	bl	11c90 <error@plt>
   149b8:	b	13e58 <__assert_fail@plt+0x1f10>
   149bc:	ldr	r2, [sp, #216]	; 0xd8
   149c0:	ldr	r1, [sp, #220]	; 0xdc
   149c4:	orrs	r3, r1, r2
   149c8:	mvneq	r3, #0
   149cc:	streq	r3, [sp, #216]	; 0xd8
   149d0:	b	12e94 <__assert_fail@plt+0xf4c>
   149d4:	mov	r2, #0
   149d8:	add	r1, sp, #220	; 0xdc
   149dc:	add	r0, r0, #1
   149e0:	bl	17424 <__assert_fail@plt+0x54dc>
   149e4:	ldr	lr, [sp, #108]	; 0x6c
   149e8:	ldr	r1, [sp, #216]	; 0xd8
   149ec:	ldr	r2, [sp, #220]	; 0xdc
   149f0:	orrs	r3, r1, r2
   149f4:	beq	13b94 <__assert_fail@plt+0x1c4c>
   149f8:	b	13b9c <__assert_fail@plt+0x1c54>
   149fc:	mov	r3, #0
   14a00:	mov	r0, r4
   14a04:	add	r1, sp, #296	; 0x128
   14a08:	strh	r3, [r4, #24]
   14a0c:	strb	r3, [r4, #31]
   14a10:	bl	15284 <__assert_fail@plt+0x333c>
   14a14:	add	r0, sp, #296	; 0x128
   14a18:	bl	154bc <__assert_fail@plt+0x3574>
   14a1c:	bl	1d160 <__assert_fail@plt+0xb218>
   14a20:	add	r3, sp, #400	; 0x190
   14a24:	vmov.f64	d10, d0
   14a28:	ldrd	r0, [r3]
   14a2c:	bl	23050 <_obstack_memory_used@@Base+0x3c4>
   14a30:	vmov	d7, r0, r1
   14a34:	vmul.f64	d10, d7, d10
   14a38:	vdiv.f64	d7, d10, d9
   14a3c:	vcmpe.f64	d7, d8
   14a40:	vmrs	APSR_nzcv, fpscr
   14a44:	bpl	1469c <__assert_fail@plt+0x2754>
   14a48:	vmov	r0, r1, d7
   14a4c:	bl	23110 <_obstack_memory_used@@Base+0x484>
   14a50:	add	r3, sp, #400	; 0x190
   14a54:	strd	r0, [r3]
   14a58:	b	12d00 <__assert_fail@plt+0xdb8>
   14a5c:	movw	r1, #19044	; 0x4a64
   14a60:	movt	r1, #2
   14a64:	ldr	r0, [lr]
   14a68:	bl	154f0 <__assert_fail@plt+0x35a8>
   14a6c:	mov	r2, #5
   14a70:	movw	r1, #20308	; 0x4f54
   14a74:	movt	r1, #2
   14a78:	mov	r0, #0
   14a7c:	bl	11b58 <dcgettext@plt>
   14a80:	mov	r3, #43	; 0x2b
   14a84:	mov	r6, r0
   14a88:	add	r0, sp, #116	; 0x74
   14a8c:	strh	r3, [sp, #116]	; 0x74
   14a90:	bl	1f7cc <__assert_fail@plt+0xd884>
   14a94:	mov	r1, #0
   14a98:	mov	r3, r0
   14a9c:	mov	r2, r6
   14aa0:	mov	r0, r1
   14aa4:	bl	11c90 <error@plt>
   14aa8:	b	13e58 <__assert_fail@plt+0x1f10>
   14aac:	mov	sl, #1
   14ab0:	b	141a0 <__assert_fail@plt+0x2258>
   14ab4:	movw	r1, #19168	; 0x4ae0
   14ab8:	movt	r1, #2
   14abc:	ldr	r0, [lr]
   14ac0:	bl	154f0 <__assert_fail@plt+0x35a8>
   14ac4:	movw	r1, #20700	; 0x50dc
   14ac8:	movt	r1, #2
   14acc:	mov	r2, #5
   14ad0:	mov	r0, #0
   14ad4:	bl	11b58 <dcgettext@plt>
   14ad8:	ldr	r3, [sp, #48]	; 0x30
   14adc:	ldr	r1, [r3, r4, lsl #2]
   14ae0:	bl	155b0 <__assert_fail@plt+0x3668>
   14ae4:	movw	r1, #14440	; 0x3868
   14ae8:	movt	r1, #2
   14aec:	mov	r2, #5
   14af0:	mov	r0, #0
   14af4:	bl	11b58 <dcgettext@plt>
   14af8:	ldr	r1, [sp, #52]	; 0x34
   14afc:	bl	155b0 <__assert_fail@plt+0x3668>
   14b00:	movw	r1, #19468	; 0x4c0c
   14b04:	movt	r1, #2
   14b08:	mov	r2, #5
   14b0c:	mov	r0, #0
   14b10:	bl	11b58 <dcgettext@plt>
   14b14:	mov	r2, r0
   14b18:	mov	r1, #0
   14b1c:	mov	r0, #2
   14b20:	bl	11c90 <error@plt>
   14b24:	movw	r1, #19384	; 0x4bb8
   14b28:	movt	r1, #2
   14b2c:	b	14b08 <__assert_fail@plt+0x2bc0>
   14b30:	movw	r2, #19016	; 0x4a48
   14b34:	movt	r2, #2
   14b38:	add	r1, sp, #228	; 0xe4
   14b3c:	add	r0, r0, #1
   14b40:	bl	17424 <__assert_fail@plt+0x54dc>
   14b44:	b	13c0c <__assert_fail@plt+0x1cc4>
   14b48:	movw	r1, #14384	; 0x3830
   14b4c:	movt	r1, #2
   14b50:	ldr	r3, [pc, #864]	; 14eb8 <__assert_fail@plt+0x2f70>
   14b54:	movw	r0, #19524	; 0x4c44
   14b58:	movt	r0, #2
   14b5c:	movw	r2, #4449	; 0x1161
   14b60:	bl	11f48 <__assert_fail@plt>
   14b64:	movw	r1, #19528	; 0x4c48
   14b68:	movt	r1, #2
   14b6c:	mov	r2, #5
   14b70:	b	14b10 <__assert_fail@plt+0x2bc8>
   14b74:	ldr	r0, [sp, #40]	; 0x28
   14b78:	bl	1765c <__assert_fail@plt+0x5714>
   14b7c:	mov	r2, #5
   14b80:	mov	r0, r3
   14b84:	movw	r1, #19324	; 0x4b7c
   14b88:	movt	r1, #2
   14b8c:	mov	r4, r3
   14b90:	bl	11b58 <dcgettext@plt>
   14b94:	ldr	r2, [sp, #104]	; 0x68
   14b98:	movw	r3, #13056	; 0x3300
   14b9c:	movt	r3, #2
   14ba0:	mov	r6, r0
   14ba4:	mov	r0, sl
   14ba8:	add	r3, r3, r2, lsl #4
   14bac:	ldr	r5, [r3, #368]	; 0x170
   14bb0:	bl	1f7cc <__assert_fail@plt+0xd884>
   14bb4:	mov	r2, r6
   14bb8:	mov	r1, r4
   14bbc:	str	r0, [sp]
   14bc0:	mov	r0, r4
   14bc4:	mov	r3, r5
   14bc8:	bl	11c90 <error@plt>
   14bcc:	mov	r2, #5
   14bd0:	movw	r1, #19352	; 0x4b98
   14bd4:	movt	r1, #2
   14bd8:	mov	r0, r4
   14bdc:	bl	11b58 <dcgettext@plt>
   14be0:	mov	r6, r0
   14be4:	movw	r0, #19380	; 0x4bb4
   14be8:	movt	r0, #2
   14bec:	bl	1f7cc <__assert_fail@plt+0xd884>
   14bf0:	mov	r3, r5
   14bf4:	mov	r2, r6
   14bf8:	str	r0, [sp]
   14bfc:	mov	r1, r4
   14c00:	mov	r0, #2
   14c04:	bl	11c90 <error@plt>
   14c08:	ldr	r0, [sp, #52]	; 0x34
   14c0c:	bl	1765c <__assert_fail@plt+0x5714>
   14c10:	mov	r0, r8
   14c14:	bl	1765c <__assert_fail@plt+0x5714>
   14c18:	mov	sl, r4
   14c1c:	ldr	fp, [sp, #44]	; 0x2c
   14c20:	ldr	r3, [sp, #48]	; 0x30
   14c24:	cmp	r3, #0
   14c28:	beq	128c4 <__assert_fail@plt+0x97c>
   14c2c:	cmp	r5, #0
   14c30:	bne	12b3c <__assert_fail@plt+0xbf4>
   14c34:	movw	r1, #14604	; 0x390c
   14c38:	movt	r1, #2
   14c3c:	ldr	r0, [sp, #48]	; 0x30
   14c40:	bl	1750c <__assert_fail@plt+0x55c4>
   14c44:	subs	r4, r0, #0
   14c48:	beq	14d5c <__assert_fail@plt+0x2e14>
   14c4c:	add	r0, sp, #400	; 0x190
   14c50:	bl	200ac <__assert_fail@plt+0xe164>
   14c54:	add	r1, sp, #400	; 0x190
   14c58:	mov	r0, r4
   14c5c:	bl	20178 <__assert_fail@plt+0xe230>
   14c60:	cmp	r0, #0
   14c64:	movweq	r1, #19664	; 0x4cd0
   14c68:	moveq	r2, #5
   14c6c:	movteq	r1, #2
   14c70:	beq	14d74 <__assert_fail@plt+0x2e2c>
   14c74:	mov	r0, r4
   14c78:	ldr	r1, [sp, #48]	; 0x30
   14c7c:	bl	17684 <__assert_fail@plt+0x573c>
   14c80:	ldr	r3, [sp, #400]	; 0x190
   14c84:	cmp	r3, #0
   14c88:	beq	14d64 <__assert_fail@plt+0x2e1c>
   14c8c:	mov	r0, sl
   14c90:	bl	1b670 <__assert_fail@plt+0x9728>
   14c94:	ldr	r6, [sp, #400]	; 0x190
   14c98:	ldr	sl, [sp, #404]	; 0x194
   14c9c:	cmp	r6, #0
   14ca0:	beq	128c4 <__assert_fail@plt+0x97c>
   14ca4:	movw	r4, #14356	; 0x3814
   14ca8:	movt	r4, #2
   14cac:	mov	r9, sl
   14cb0:	b	14ccc <__assert_fail@plt+0x2d84>
   14cb4:	ldrb	r7, [r7]
   14cb8:	add	r5, r5, #1
   14cbc:	cmp	r7, #0
   14cc0:	beq	14d1c <__assert_fail@plt+0x2dd4>
   14cc4:	cmp	r6, r5
   14cc8:	beq	128c4 <__assert_fail@plt+0x97c>
   14ccc:	mov	r8, r9
   14cd0:	ldr	r7, [r9], #4
   14cd4:	mov	r1, r4
   14cd8:	mov	r0, r7
   14cdc:	bl	11a2c <strcmp@plt>
   14ce0:	subs	r3, r0, #0
   14ce4:	bne	14cb4 <__assert_fail@plt+0x2d6c>
   14ce8:	movw	r1, #19696	; 0x4cf0
   14cec:	movt	r1, #2
   14cf0:	mov	r2, #5
   14cf4:	bl	11b58 <dcgettext@plt>
   14cf8:	mov	r4, r0
   14cfc:	mov	r0, #4
   14d00:	ldr	r1, [r8]
   14d04:	bl	1f518 <__assert_fail@plt+0xd5d0>
   14d08:	mov	r3, r0
   14d0c:	mov	r2, r4
   14d10:	mov	r1, #0
   14d14:	mov	r0, #2
   14d18:	bl	11c90 <error@plt>
   14d1c:	mov	r2, #5
   14d20:	movw	r1, #19760	; 0x4d30
   14d24:	movt	r1, #2
   14d28:	mov	r0, r7
   14d2c:	bl	11b58 <dcgettext@plt>
   14d30:	mov	r4, r0
   14d34:	mov	r1, #3
   14d38:	ldr	r2, [sp, #48]	; 0x30
   14d3c:	mov	r0, r7
   14d40:	bl	1f5f4 <__assert_fail@plt+0xd6ac>
   14d44:	mov	r3, r0
   14d48:	mov	r2, r4
   14d4c:	str	r5, [sp]
   14d50:	mov	r1, r7
   14d54:	mov	r0, #2
   14d58:	bl	11c90 <error@plt>
   14d5c:	ldr	r0, [sp, #48]	; 0x30
   14d60:	bl	1765c <__assert_fail@plt+0x5714>
   14d64:	movw	r1, #19800	; 0x4d58
   14d68:	movt	r1, #2
   14d6c:	mov	r2, #5
   14d70:	mov	r0, r5
   14d74:	bl	11b58 <dcgettext@plt>
   14d78:	mov	r4, r0
   14d7c:	mov	r0, #4
   14d80:	ldr	r1, [sp, #48]	; 0x30
   14d84:	bl	1f518 <__assert_fail@plt+0xd5d0>
   14d88:	b	14d08 <__assert_fail@plt+0x2dc0>
   14d8c:	movw	r1, #19096	; 0x4a98
   14d90:	movt	r1, #2
   14d94:	b	14b08 <__assert_fail@plt+0x2bc0>
   14d98:	movw	r1, #19416	; 0x4bd8
   14d9c:	movt	r1, #2
   14da0:	b	14b08 <__assert_fail@plt+0x2bc0>
   14da4:	movw	r1, #19508	; 0x4c34
   14da8:	movt	r1, #2
   14dac:	b	14b08 <__assert_fail@plt+0x2bc0>
   14db0:	mov	r2, #5
   14db4:	movw	r1, #19484	; 0x4c1c
   14db8:	movt	r1, #2
   14dbc:	mov	r0, #0
   14dc0:	bl	11b58 <dcgettext@plt>
   14dc4:	mov	r4, r0
   14dc8:	ldr	r0, [sl]
   14dcc:	bl	1f7cc <__assert_fail@plt+0xd884>
   14dd0:	b	14d08 <__assert_fail@plt+0x2dc0>
   14dd4:	movw	r4, #25060	; 0x61e4
   14dd8:	movt	r4, #3
   14ddc:	b	14754 <__assert_fail@plt+0x280c>
   14de0:	movw	r1, #19192	; 0x4af8
   14de4:	movt	r1, #2
   14de8:	ldr	r0, [lr]
   14dec:	bl	154f0 <__assert_fail@plt+0x35a8>
   14df0:	mov	r1, r9
   14df4:	ldr	r3, [pc, #192]	; 14ebc <__assert_fail@plt+0x2f74>
   14df8:	mov	r2, #7
   14dfc:	str	sl, [sp]
   14e00:	bl	216c0 <__assert_fail@plt+0xf778>
   14e04:	mov	r2, #5
   14e08:	movw	r1, #20608	; 0x5080
   14e0c:	movt	r1, #2
   14e10:	mov	r0, #0
   14e14:	bl	11b58 <dcgettext@plt>
   14e18:	mov	r4, r0
   14e1c:	mov	r0, #4
   14e20:	ldr	r1, [sl, #4]
   14e24:	bl	1f518 <__assert_fail@plt+0xd5d0>
   14e28:	ldr	r1, [sp, #36]	; 0x24
   14e2c:	mov	r3, r0
   14e30:	mov	r2, r4
   14e34:	mov	r0, #2
   14e38:	str	r1, [sp]
   14e3c:	mov	r1, #0
   14e40:	bl	11c90 <error@plt>
   14e44:	movw	r1, #20688	; 0x50d0
   14e48:	movt	r1, #2
   14e4c:	mov	r2, #5
   14e50:	mov	r0, #0
   14e54:	bl	11b58 <dcgettext@plt>
   14e58:	ldr	r1, [r7]
   14e5c:	bl	155b0 <__assert_fail@plt+0x3668>
   14e60:	movw	r1, #14468	; 0x3884
   14e64:	movt	r1, #2
   14e68:	mov	r2, #5
   14e6c:	mov	r0, #0
   14e70:	bl	11b58 <dcgettext@plt>
   14e74:	ldr	r1, [sp, #60]	; 0x3c
   14e78:	bl	155b0 <__assert_fail@plt+0x3668>
   14e7c:	movw	r1, #19044	; 0x4a64
   14e80:	movt	r1, #2
   14e84:	mov	r0, r8
   14e88:	bl	154f0 <__assert_fail@plt+0x35a8>
   14e8c:	movw	r1, #14440	; 0x3868
   14e90:	movt	r1, #2
   14e94:	mov	r2, #5
   14e98:	bl	11b58 <dcgettext@plt>
   14e9c:	ldr	r3, [sp, #60]	; 0x3c
   14ea0:	movw	r1, #18936	; 0x49f8
   14ea4:	movt	r1, #2
   14ea8:	cmp	r3, #0
   14eac:	moveq	r3, r1
   14eb0:	mov	r1, r3
   14eb4:	bl	155b0 <__assert_fail@plt+0x3668>
   14eb8:	andeq	r3, r2, r0, lsl #13
   14ebc:	andeq	r3, r2, r0, ror r4
   14ec0:	mov	fp, #0
   14ec4:	mov	lr, #0
   14ec8:	pop	{r1}		; (ldr r1, [sp], #4)
   14ecc:	mov	r2, sp
   14ed0:	push	{r2}		; (str r2, [sp, #-4]!)
   14ed4:	push	{r0}		; (str r0, [sp, #-4]!)
   14ed8:	ldr	ip, [pc, #16]	; 14ef0 <__assert_fail@plt+0x2fa8>
   14edc:	push	{ip}		; (str ip, [sp, #-4]!)
   14ee0:	ldr	r0, [pc, #12]	; 14ef4 <__assert_fail@plt+0x2fac>
   14ee4:	ldr	r3, [pc, #12]	; 14ef8 <__assert_fail@plt+0x2fb0>
   14ee8:	bl	11cf0 <__libc_start_main@plt>
   14eec:	bl	11f24 <abort@plt>
   14ef0:	ldrdeq	r3, [r2], -r8
   14ef4:	andeq	r1, r1, r8, asr pc
   14ef8:	andeq	r3, r2, r8, ror r2
   14efc:	ldr	r3, [pc, #20]	; 14f18 <__assert_fail@plt+0x2fd0>
   14f00:	ldr	r2, [pc, #20]	; 14f1c <__assert_fail@plt+0x2fd4>
   14f04:	add	r3, pc, r3
   14f08:	ldr	r2, [r3, r2]
   14f0c:	cmp	r2, #0
   14f10:	bxeq	lr
   14f14:	b	11d14 <__gmon_start__@plt>
   14f18:	strdeq	r1, [r2], -r4
   14f1c:	ldrdeq	r0, [r0], -r8
   14f20:	ldr	r0, [pc, #24]	; 14f40 <__assert_fail@plt+0x2ff8>
   14f24:	ldr	r3, [pc, #24]	; 14f44 <__assert_fail@plt+0x2ffc>
   14f28:	cmp	r3, r0
   14f2c:	bxeq	lr
   14f30:	ldr	r3, [pc, #16]	; 14f48 <__assert_fail@plt+0x3000>
   14f34:	cmp	r3, #0
   14f38:	bxeq	lr
   14f3c:	bx	r3
   14f40:			; <UNDEFINED> instruction: 0x000362b8
   14f44:			; <UNDEFINED> instruction: 0x000362b8
   14f48:	andeq	r0, r0, r0
   14f4c:	ldr	r0, [pc, #36]	; 14f78 <__assert_fail@plt+0x3030>
   14f50:	ldr	r1, [pc, #36]	; 14f7c <__assert_fail@plt+0x3034>
   14f54:	sub	r1, r1, r0
   14f58:	asr	r1, r1, #2
   14f5c:	add	r1, r1, r1, lsr #31
   14f60:	asrs	r1, r1, #1
   14f64:	bxeq	lr
   14f68:	ldr	r3, [pc, #16]	; 14f80 <__assert_fail@plt+0x3038>
   14f6c:	cmp	r3, #0
   14f70:	bxeq	lr
   14f74:	bx	r3
   14f78:			; <UNDEFINED> instruction: 0x000362b8
   14f7c:			; <UNDEFINED> instruction: 0x000362b8
   14f80:	andeq	r0, r0, r0
   14f84:	push	{r4, lr}
   14f88:	ldr	r4, [pc, #24]	; 14fa8 <__assert_fail@plt+0x3060>
   14f8c:	ldrb	r3, [r4]
   14f90:	cmp	r3, #0
   14f94:	popne	{r4, pc}
   14f98:	bl	14f20 <__assert_fail@plt+0x2fd8>
   14f9c:	mov	r3, #1
   14fa0:	strb	r3, [r4]
   14fa4:	pop	{r4, pc}
   14fa8:	ldrdeq	r6, [r3], -ip
   14fac:	b	14f4c <__assert_fail@plt+0x3004>
   14fb0:	ldr	r3, [r0, #4]
   14fb4:	udiv	r0, r3, r1
   14fb8:	mls	r0, r0, r1, r3
   14fbc:	bx	lr
   14fc0:	ldr	r0, [r0, #4]
   14fc4:	ldr	r3, [r1, #4]
   14fc8:	sub	r0, r0, r3
   14fcc:	clz	r0, r0
   14fd0:	lsr	r0, r0, #5
   14fd4:	bx	lr
   14fd8:	ldr	r2, [r0]
   14fdc:	strd	r4, [sp, #-16]!
   14fe0:	movw	r5, #25312	; 0x62e0
   14fe4:	movt	r5, #3
   14fe8:	str	r6, [sp, #8]
   14fec:	mov	r6, r0
   14ff0:	str	lr, [sp, #12]
   14ff4:	mov	lr, #0
   14ff8:	mov	r0, lr
   14ffc:	ldr	r4, [r5]
   15000:	ldrb	r3, [r2]
   15004:	b	15030 <__assert_fail@plt+0x30e8>
   15008:	cmp	r0, r3
   1500c:	mov	lr, #0
   15010:	movcc	r0, r3
   15014:	ldrb	r3, [r2, #1]
   15018:	cmp	r3, r4
   1501c:	bne	1502c <__assert_fail@plt+0x30e4>
   15020:	ldrb	r3, [r2, #2]
   15024:	add	ip, r2, #2
   15028:	mov	lr, #1
   1502c:	mov	r2, ip
   15030:	sub	r1, r3, #48	; 0x30
   15034:	add	ip, r2, #1
   15038:	cmp	r1, #9
   1503c:	bls	15008 <__assert_fail@plt+0x30c0>
   15040:	cmp	lr, #0
   15044:	subne	r2, r2, #1
   15048:	strne	r2, [r6]
   1504c:	bne	15060 <__assert_fail@plt+0x3118>
   15050:	ldrb	r1, [r5, #4]
   15054:	cmp	r1, r3
   15058:	beq	15070 <__assert_fail@plt+0x3128>
   1505c:	str	r2, [r6]
   15060:	ldrd	r4, [sp]
   15064:	ldr	r6, [sp, #8]
   15068:	add	sp, sp, #12
   1506c:	pop	{pc}		; (ldr pc, [sp], #4)
   15070:	ldrb	r3, [r2, #1]
   15074:	add	r2, r2, #2
   15078:	sub	r1, r3, #48	; 0x30
   1507c:	cmp	r1, #9
   15080:	movhi	r2, ip
   15084:	bls	15090 <__assert_fail@plt+0x3148>
   15088:	b	1505c <__assert_fail@plt+0x3114>
   1508c:	mov	r2, r1
   15090:	cmp	r0, r3
   15094:	mov	r1, r2
   15098:	movcc	r0, r3
   1509c:	ldrb	r3, [r1], #1
   150a0:	sub	ip, r3, #48	; 0x30
   150a4:	cmp	ip, #9
   150a8:	bls	1508c <__assert_fail@plt+0x3144>
   150ac:	b	1505c <__assert_fail@plt+0x3114>
   150b0:	mov	r3, r0
   150b4:	str	r4, [sp, #-8]!
   150b8:	str	lr, [sp, #4]
   150bc:	sub	sp, sp, #8
   150c0:	ldrb	r4, [r3]
   150c4:	add	r0, sp, #4
   150c8:	cmp	r4, #45	; 0x2d
   150cc:	addeq	r3, r3, #1
   150d0:	str	r3, [sp, #4]
   150d4:	bl	14fd8 <__assert_fail@plt+0x3090>
   150d8:	cmp	r0, #48	; 0x30
   150dc:	movls	r0, #0
   150e0:	bls	15100 <__assert_fail@plt+0x31b8>
   150e4:	ldr	r2, [sp, #4]
   150e8:	movw	r3, #13056	; 0x3300
   150ec:	movt	r3, #2
   150f0:	cmp	r4, #45	; 0x2d
   150f4:	ldrb	r2, [r2]
   150f8:	ldrb	r0, [r3, r2]
   150fc:	rsbeq	r0, r0, #0
   15100:	add	sp, sp, #8
   15104:	ldr	r4, [sp]
   15108:	add	sp, sp, #4
   1510c:	pop	{pc}		; (ldr pc, [sp], #4)
   15110:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15114:	movw	r4, #25312	; 0x62e0
   15118:	movt	r4, #3
   1511c:	strd	r6, [sp, #8]
   15120:	str	r8, [sp, #16]
   15124:	str	lr, [sp, #20]
   15128:	ldrb	r3, [r0]
   1512c:	add	r3, r4, r3
   15130:	ldrb	r3, [r3, #8]
   15134:	cmp	r3, #0
   15138:	beq	15150 <__assert_fail@plt+0x3208>
   1513c:	ldrb	r3, [r0, #1]!
   15140:	add	r3, r4, r3
   15144:	ldrb	r3, [r3, #8]
   15148:	cmp	r3, #0
   1514c:	bne	1513c <__assert_fail@plt+0x31f4>
   15150:	movw	r6, #25060	; 0x61e4
   15154:	movt	r6, #3
   15158:	mov	r8, #12
   1515c:	mov	r7, #0
   15160:	add	r5, r7, r8
   15164:	lsr	r5, r5, #1
   15168:	ldr	lr, [r6, r5, lsl #3]
   1516c:	ldrb	r2, [lr]
   15170:	cmp	r2, #0
   15174:	beq	15204 <__assert_fail@plt+0x32bc>
   15178:	ldrb	r3, [r0]
   1517c:	add	r3, r4, r3
   15180:	ldrb	r3, [r3, #264]	; 0x108
   15184:	cmp	r3, r2
   15188:	bcc	151e8 <__assert_fail@plt+0x32a0>
   1518c:	addls	r2, r0, #1
   15190:	bls	151b0 <__assert_fail@plt+0x3268>
   15194:	b	151fc <__assert_fail@plt+0x32b4>
   15198:	ldrb	r3, [r3]
   1519c:	add	r3, r4, r3
   151a0:	ldrb	r3, [r3, #264]	; 0x108
   151a4:	cmp	ip, r3
   151a8:	bhi	151e8 <__assert_fail@plt+0x32a0>
   151ac:	bcc	151fc <__assert_fail@plt+0x32b4>
   151b0:	ldrb	ip, [lr, #1]!
   151b4:	mov	r3, r2
   151b8:	add	r2, r2, #1
   151bc:	cmp	ip, #0
   151c0:	bne	15198 <__assert_fail@plt+0x3250>
   151c4:	add	r5, r6, r5, lsl #3
   151c8:	cmp	r1, #0
   151cc:	ldr	r0, [r5, #4]
   151d0:	strne	r3, [r1]
   151d4:	ldrd	r4, [sp]
   151d8:	ldrd	r6, [sp, #8]
   151dc:	ldr	r8, [sp, #16]
   151e0:	add	sp, sp, #20
   151e4:	pop	{pc}		; (ldr pc, [sp], #4)
   151e8:	mov	r8, r5
   151ec:	cmp	r7, r8
   151f0:	bcc	15160 <__assert_fail@plt+0x3218>
   151f4:	mov	r0, #0
   151f8:	b	151d4 <__assert_fail@plt+0x328c>
   151fc:	add	r7, r5, #1
   15200:	b	151ec <__assert_fail@plt+0x32a4>
   15204:	mov	r3, r0
   15208:	b	151c4 <__assert_fail@plt+0x327c>
   1520c:	ldr	r3, [r0, #16]
   15210:	cmp	r3, #0
   15214:	beq	15224 <__assert_fail@plt+0x32dc>
   15218:	mov	r3, #0
   1521c:	mov	r0, r3
   15220:	bx	lr
   15224:	ldr	r2, [r0, #20]
   15228:	cmp	r2, #0
   1522c:	bne	1521c <__assert_fail@plt+0x32d4>
   15230:	ldrb	r3, [r0, #24]
   15234:	cmp	r3, #0
   15238:	bne	15218 <__assert_fail@plt+0x32d0>
   1523c:	ldrb	r2, [r0, #25]
   15240:	cmp	r2, #0
   15244:	bne	1521c <__assert_fail@plt+0x32d4>
   15248:	ldrb	r3, [r0, #26]
   1524c:	cmp	r3, #0
   15250:	bne	15218 <__assert_fail@plt+0x32d0>
   15254:	ldrh	r2, [r0, #28]
   15258:	cmp	r2, #0
   1525c:	bne	1521c <__assert_fail@plt+0x32d4>
   15260:	ldrb	r2, [r0, #30]
   15264:	cmp	r2, #0
   15268:	bne	1521c <__assert_fail@plt+0x32d4>
   1526c:	ldrb	r2, [r0, #32]
   15270:	cmp	r2, #0
   15274:	bne	1521c <__assert_fail@plt+0x32d4>
   15278:	ldrb	r3, [r0, #27]
   1527c:	eor	r3, r3, #1
   15280:	b	1521c <__assert_fail@plt+0x32d4>
   15284:	ldrh	r3, [r0, #24]
   15288:	cmp	r3, #0
   1528c:	movne	r3, #98	; 0x62
   15290:	strbne	r3, [r1], #1
   15294:	ldr	r3, [pc, #172]	; 15348 <__assert_fail@plt+0x3400>
   15298:	ldr	r2, [r0, #16]
   1529c:	cmp	r2, r3
   152a0:	moveq	r3, #100	; 0x64
   152a4:	strbeq	r3, [r1], #1
   152a8:	ldr	r3, [r0, #20]
   152ac:	cmp	r3, #0
   152b0:	movne	r3, #102	; 0x66
   152b4:	strbne	r3, [r1], #1
   152b8:	ldrb	r3, [r0, #28]
   152bc:	cmp	r3, #0
   152c0:	movne	r3, #103	; 0x67
   152c4:	strbne	r3, [r1], #1
   152c8:	ldrb	r3, [r0, #29]
   152cc:	cmp	r3, #0
   152d0:	movne	r3, #104	; 0x68
   152d4:	strbne	r3, [r1], #1
   152d8:	ldr	r3, [pc, #108]	; 1534c <__assert_fail@plt+0x3404>
   152dc:	ldr	r2, [r0, #16]
   152e0:	cmp	r2, r3
   152e4:	moveq	r3, #105	; 0x69
   152e8:	strbeq	r3, [r1], #1
   152ec:	ldrb	r3, [r0, #30]
   152f0:	cmp	r3, #0
   152f4:	movne	r3, #77	; 0x4d
   152f8:	strbne	r3, [r1], #1
   152fc:	ldrb	r3, [r0, #26]
   15300:	cmp	r3, #0
   15304:	movne	r3, #110	; 0x6e
   15308:	strbne	r3, [r1], #1
   1530c:	ldrb	r3, [r0, #27]
   15310:	cmp	r3, #0
   15314:	movne	r3, #82	; 0x52
   15318:	strbne	r3, [r1], #1
   1531c:	ldrb	r3, [r0, #31]
   15320:	cmp	r3, #0
   15324:	movne	r3, #114	; 0x72
   15328:	strbne	r3, [r1], #1
   1532c:	ldrb	r3, [r0, #32]
   15330:	cmp	r3, #0
   15334:	movne	r3, #86	; 0x56
   15338:	strbne	r3, [r1], #1
   1533c:	mov	r3, #0
   15340:	strb	r3, [r1]
   15344:	bx	lr
   15348:	andeq	r6, r3, r8, ror #9
   1534c:	andeq	r6, r3, r8, ror #11
   15350:	ldrb	r3, [r0]
   15354:	cmp	r3, #0
   15358:	bxeq	lr
   1535c:	strd	r4, [sp, #-16]!
   15360:	mov	ip, #1
   15364:	str	r6, [sp, #8]
   15368:	bic	r6, r2, #2
   1536c:	sub	r2, r2, #1
   15370:	str	lr, [sp, #12]
   15374:	ldr	lr, [pc, #304]	; 154ac <__assert_fail@plt+0x3564>
   15378:	sub	r5, lr, #512	; 0x200
   1537c:	sub	r4, lr, #256	; 0x100
   15380:	sub	r3, r3, #77	; 0x4d
   15384:	cmp	r3, #37	; 0x25
   15388:	ldrls	pc, [pc, r3, lsl #2]
   1538c:	b	15438 <__assert_fail@plt+0x34f0>
   15390:	andeq	r5, r1, r4, lsr #9
   15394:	andeq	r5, r1, r8, lsr r4
   15398:	andeq	r5, r1, r8, lsr r4
   1539c:	andeq	r5, r1, r8, lsr r4
   153a0:	andeq	r5, r1, r8, lsr r4
   153a4:	muleq	r1, ip, r4
   153a8:	andeq	r5, r1, r8, lsr r4
   153ac:	andeq	r5, r1, r8, lsr r4
   153b0:	andeq	r5, r1, r8, lsr r4
   153b4:	muleq	r1, r4, r4
   153b8:	andeq	r5, r1, r8, lsr r4
   153bc:	andeq	r5, r1, r8, lsr r4
   153c0:	andeq	r5, r1, r8, lsr r4
   153c4:	andeq	r5, r1, r8, lsr r4
   153c8:	andeq	r5, r1, r8, lsr r4
   153cc:	andeq	r5, r1, r8, lsr r4
   153d0:	andeq	r5, r1, r8, lsr r4
   153d4:	andeq	r5, r1, r8, lsr r4
   153d8:	andeq	r5, r1, r8, lsr r4
   153dc:	andeq	r5, r1, r8, lsr r4
   153e0:	andeq	r5, r1, r8, lsr r4
   153e4:	andeq	r5, r1, r0, lsl #9
   153e8:	andeq	r5, r1, r8, lsr r4
   153ec:	andeq	r5, r1, r8, ror r4
   153f0:	andeq	r5, r1, r8, lsr r4
   153f4:	andeq	r5, r1, r0, ror r4
   153f8:	andeq	r5, r1, r8, ror #8
   153fc:	andeq	r5, r1, r0, ror #8
   15400:	andeq	r5, r1, r0, asr r4
   15404:	andeq	r5, r1, r8, lsr r4
   15408:	andeq	r5, r1, r8, lsr r4
   1540c:	andeq	r5, r1, r8, lsr r4
   15410:	andeq	r5, r1, r8, lsr r4
   15414:	andeq	r5, r1, r8, asr #8
   15418:	andeq	r5, r1, r8, lsr r4
   1541c:	andeq	r5, r1, r8, lsr r4
   15420:	andeq	r5, r1, r8, lsr r4
   15424:	andeq	r5, r1, r8, lsr #8
   15428:	strb	ip, [r1, #31]
   1542c:	ldrb	r3, [r0, #1]!
   15430:	cmp	r3, #0
   15434:	bne	15380 <__assert_fail@plt+0x3438>
   15438:	ldrd	r4, [sp]
   1543c:	ldr	r6, [sp, #8]
   15440:	add	sp, sp, #12
   15444:	pop	{pc}		; (ldr pc, [sp], #4)
   15448:	strb	ip, [r1, #26]
   1544c:	b	1542c <__assert_fail@plt+0x34e4>
   15450:	ldr	r3, [r1, #16]
   15454:	cmp	r3, #0
   15458:	streq	lr, [r1, #16]
   1545c:	b	1542c <__assert_fail@plt+0x34e4>
   15460:	strb	ip, [r1, #29]
   15464:	b	1542c <__assert_fail@plt+0x34e4>
   15468:	strb	ip, [r1, #28]
   1546c:	b	1542c <__assert_fail@plt+0x34e4>
   15470:	str	r5, [r1, #20]
   15474:	b	1542c <__assert_fail@plt+0x34e4>
   15478:	str	r4, [r1, #16]
   1547c:	b	1542c <__assert_fail@plt+0x34e4>
   15480:	cmp	r6, #0
   15484:	strbeq	ip, [r1, #24]
   15488:	cmp	r2, #1
   1548c:	strbls	ip, [r1, #25]
   15490:	b	1542c <__assert_fail@plt+0x34e4>
   15494:	strb	ip, [r1, #32]
   15498:	b	1542c <__assert_fail@plt+0x34e4>
   1549c:	strb	ip, [r1, #27]
   154a0:	b	1542c <__assert_fail@plt+0x34e4>
   154a4:	strb	ip, [r1, #30]
   154a8:	b	1542c <__assert_fail@plt+0x34e4>
   154ac:	andeq	r6, r3, r8, ror #11
   154b0:	ldr	r0, [r0]
   154b4:	ldr	r1, [r1]
   154b8:	b	11a2c <strcmp@plt>
   154bc:	mov	r2, #5
   154c0:	movw	r1, #14016	; 0x36c0
   154c4:	movt	r1, #2
   154c8:	str	r4, [sp, #-8]!
   154cc:	mov	r4, r0
   154d0:	mov	r0, #0
   154d4:	str	lr, [sp, #4]
   154d8:	bl	11b58 <dcgettext@plt>
   154dc:	mov	r2, r0
   154e0:	mov	r3, r4
   154e4:	mov	r1, #0
   154e8:	mov	r0, #2
   154ec:	bl	11c90 <error@plt>
   154f0:	mov	r5, r1
   154f4:	mov	r6, r0
   154f8:	push	{lr}		; (str lr, [sp, #-4]!)
   154fc:	mov	r2, #5
   15500:	sub	sp, sp, #12
   15504:	movw	r1, #14048	; 0x36e0
   15508:	movt	r1, #2
   1550c:	mov	r0, #0
   15510:	bl	11b58 <dcgettext@plt>
   15514:	mov	r4, r0
   15518:	mov	r1, r5
   1551c:	mov	r2, #5
   15520:	mov	r0, #0
   15524:	bl	11b58 <dcgettext@plt>
   15528:	mov	r5, r0
   1552c:	mov	r0, r6
   15530:	bl	1f7cc <__assert_fail@plt+0xd884>
   15534:	mov	r3, r5
   15538:	mov	r2, r4
   1553c:	str	r0, [sp]
   15540:	mov	r1, #0
   15544:	mov	r0, #2
   15548:	bl	11c90 <error@plt>
   1554c:	strd	r4, [sp, #-16]!
   15550:	movw	r5, #25312	; 0x62e0
   15554:	movt	r5, #3
   15558:	ldr	r4, [r5, #1032]	; 0x408
   1555c:	str	r6, [sp, #8]
   15560:	mov	r6, r0
   15564:	str	lr, [sp, #12]
   15568:	cmp	r4, #0
   1556c:	beq	15584 <__assert_fail@plt+0x363c>
   15570:	add	r0, r4, #9
   15574:	bl	11b7c <unlink@plt>
   15578:	ldr	r4, [r4]
   1557c:	cmp	r4, #0
   15580:	bne	15570 <__assert_fail@plt+0x3628>
   15584:	mov	r3, #0
   15588:	mov	r0, r6
   1558c:	mov	r1, r3
   15590:	str	r3, [r5, #1032]	; 0x408
   15594:	bl	11b04 <signal@plt>
   15598:	mov	r0, r6
   1559c:	ldrd	r4, [sp]
   155a0:	ldr	r6, [sp, #8]
   155a4:	ldr	lr, [sp, #12]
   155a8:	add	sp, sp, #16
   155ac:	b	11a20 <raise@plt>
   155b0:	mov	r4, r1
   155b4:	push	{lr}		; (str lr, [sp, #-4]!)
   155b8:	sub	sp, sp, #12
   155bc:	mov	r6, r0
   155c0:	bl	11d74 <__errno_location@plt>
   155c4:	cmp	r4, #0
   155c8:	ldr	r5, [r0]
   155cc:	beq	155fc <__assert_fail@plt+0x36b4>
   155d0:	mov	r2, r4
   155d4:	mov	r1, #3
   155d8:	mov	r0, #0
   155dc:	bl	1f5f4 <__assert_fail@plt+0xd6ac>
   155e0:	movw	r2, #14100	; 0x3714
   155e4:	movt	r2, #2
   155e8:	str	r0, [sp]
   155ec:	mov	r3, r6
   155f0:	mov	r1, r5
   155f4:	mov	r0, #2
   155f8:	bl	11c90 <error@plt>
   155fc:	mov	r0, r4
   15600:	movw	r1, #14084	; 0x3704
   15604:	movt	r1, #2
   15608:	mov	r2, #5
   1560c:	bl	11b58 <dcgettext@plt>
   15610:	mov	r4, r0
   15614:	b	155d0 <__assert_fail@plt+0x3688>
   15618:	str	r4, [sp, #-8]!
   1561c:	movw	r4, #25312	; 0x62e0
   15620:	movt	r4, #3
   15624:	ldr	r3, [r4, #1144]	; 0x478
   15628:	str	lr, [sp, #4]
   1562c:	cmp	r3, #0
   15630:	beq	15650 <__assert_fail@plt+0x3708>
   15634:	cmp	r3, #0
   15638:	movge	r0, #0
   1563c:	bge	15644 <__assert_fail@plt+0x36fc>
   15640:	ldr	r0, [pc, #56]	; 15680 <__assert_fail@plt+0x3738>
   15644:	ldr	r4, [sp]
   15648:	add	sp, sp, #4
   1564c:	pop	{pc}		; (ldr pc, [sp], #4)
   15650:	add	r2, r4, #1040	; 0x410
   15654:	mov	r1, #1
   15658:	mov	r0, #3
   1565c:	bl	11bf4 <__fxstat64@plt>
   15660:	cmp	r0, #0
   15664:	mvneq	r3, #0
   15668:	streq	r3, [r4, #1144]	; 0x478
   1566c:	beq	15640 <__assert_fail@plt+0x36f8>
   15670:	bl	11d74 <__errno_location@plt>
   15674:	ldr	r3, [r0]
   15678:	str	r3, [r4, #1144]	; 0x478
   1567c:	b	15634 <__assert_fail@plt+0x36ec>
   15680:	strdeq	r6, [r3], -r0
   15684:	strd	r4, [sp, #-16]!
   15688:	movw	r4, #25312	; 0x62e0
   1568c:	movt	r4, #3
   15690:	ldr	r3, [r4, #1148]	; 0x47c
   15694:	mov	r5, r0
   15698:	str	r6, [sp, #8]
   1569c:	str	lr, [sp, #12]
   156a0:	ldr	r2, [r4, #1156]	; 0x484
   156a4:	ldr	r0, [r4, #1152]	; 0x480
   156a8:	cmp	r3, r2
   156ac:	beq	156cc <__assert_fail@plt+0x3784>
   156b0:	add	r2, r3, #1
   156b4:	str	r5, [r0, r3, lsl #2]
   156b8:	ldr	r6, [sp, #8]
   156bc:	str	r2, [r4, #1148]	; 0x47c
   156c0:	ldrd	r4, [sp]
   156c4:	add	sp, sp, #12
   156c8:	pop	{pc}		; (ldr pc, [sp], #4)
   156cc:	mov	r2, #4
   156d0:	ldr	r1, [pc, #12]	; 156e4 <__assert_fail@plt+0x379c>
   156d4:	bl	21108 <__assert_fail@plt+0xf1c0>
   156d8:	str	r0, [r4, #1152]	; 0x480
   156dc:	ldr	r3, [r4, #1148]	; 0x47c
   156e0:	b	156b0 <__assert_fail@plt+0x3768>
   156e4:	andeq	r6, r3, r4, ror #14
   156e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   156ec:	mov	r5, r0
   156f0:	mov	r4, r2
   156f4:	strd	r6, [sp, #8]
   156f8:	mov	r7, r1
   156fc:	add	r6, r1, #1
   15700:	str	r8, [sp, #16]
   15704:	str	lr, [sp, #20]
   15708:	b	15718 <__assert_fail@plt+0x37d0>
   1570c:	lsr	r4, r4, #1
   15710:	cmp	r6, r4
   15714:	bcs	15764 <__assert_fail@plt+0x381c>
   15718:	bic	r4, r4, #15
   1571c:	add	r4, r4, #16
   15720:	mov	r0, r4
   15724:	bl	2216c <__assert_fail@plt+0x10224>
   15728:	cmp	r0, #0
   1572c:	str	r0, [r5]
   15730:	beq	1570c <__assert_fail@plt+0x37c4>
   15734:	mov	r3, #0
   15738:	ldr	r8, [sp, #16]
   1573c:	str	r3, [r5, #4]
   15740:	str	r3, [r5, #8]
   15744:	str	r4, [r5, #12]
   15748:	str	r3, [r5, #16]
   1574c:	str	r7, [r5, #20]
   15750:	strb	r3, [r5, #24]
   15754:	ldrd	r4, [sp]
   15758:	ldrd	r6, [sp, #8]
   1575c:	add	sp, sp, #20
   15760:	pop	{pc}		; (ldr pc, [sp], #4)
   15764:	bl	213f8 <__assert_fail@plt+0xf4b0>
   15768:	mov	r2, #0
   1576c:	strd	r4, [sp, #-16]!
   15770:	mov	r5, r1
   15774:	mov	r4, r0
   15778:	sub	r1, r1, r0
   1577c:	str	r6, [sp, #8]
   15780:	str	lr, [sp, #12]
   15784:	bl	1cd40 <__assert_fail@plt+0xadf8>
   15788:	cmp	r5, r4
   1578c:	bls	157a4 <__assert_fail@plt+0x385c>
   15790:	ldrb	r3, [r4], #1
   15794:	cmp	r3, #9
   15798:	addeq	r0, r0, #1
   1579c:	cmp	r5, r4
   157a0:	bne	15790 <__assert_fail@plt+0x3848>
   157a4:	ldrd	r4, [sp]
   157a8:	ldr	r6, [sp, #8]
   157ac:	add	sp, sp, #12
   157b0:	pop	{pc}		; (ldr pc, [sp], #4)
   157b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   157b8:	mov	r5, #0
   157bc:	strd	r6, [sp, #8]
   157c0:	mov	r7, r0
   157c4:	mov	r6, r1
   157c8:	str	r8, [sp, #16]
   157cc:	mov	r8, r2
   157d0:	str	lr, [sp, #20]
   157d4:	bl	11d74 <__errno_location@plt>
   157d8:	mov	r4, r0
   157dc:	mov	r2, r8
   157e0:	mov	r0, r7
   157e4:	mov	r1, r6
   157e8:	str	r5, [r4]
   157ec:	bl	11d68 <strxfrm@plt>
   157f0:	ldr	r4, [r4]
   157f4:	cmp	r4, r5
   157f8:	bne	15810 <__assert_fail@plt+0x38c8>
   157fc:	ldrd	r4, [sp]
   15800:	ldrd	r6, [sp, #8]
   15804:	ldr	r8, [sp, #16]
   15808:	add	sp, sp, #20
   1580c:	pop	{pc}		; (ldr pc, [sp], #4)
   15810:	mov	r2, #5
   15814:	movw	r1, #14108	; 0x371c
   15818:	movt	r1, #2
   1581c:	mov	r0, r5
   15820:	bl	11b58 <dcgettext@plt>
   15824:	mov	r2, r0
   15828:	mov	r1, r4
   1582c:	mov	r0, r5
   15830:	bl	11c90 <error@plt>
   15834:	mov	r2, #5
   15838:	movw	r1, #14140	; 0x373c
   1583c:	movt	r1, #2
   15840:	mov	r0, r5
   15844:	bl	11b58 <dcgettext@plt>
   15848:	mov	r2, r0
   1584c:	mov	r1, r5
   15850:	mov	r0, r5
   15854:	bl	11c90 <error@plt>
   15858:	mov	r2, #5
   1585c:	movw	r1, #14184	; 0x3768
   15860:	movt	r1, #2
   15864:	mov	r0, r5
   15868:	bl	11b58 <dcgettext@plt>
   1586c:	mov	r4, r0
   15870:	mov	r2, r6
   15874:	mov	r1, #8
   15878:	mov	r0, r5
   1587c:	bl	1f48c <__assert_fail@plt+0xd544>
   15880:	mov	r3, r0
   15884:	mov	r2, r4
   15888:	mov	r1, r5
   1588c:	mov	r0, #2
   15890:	bl	11c90 <error@plt>
   15894:	strd	r4, [sp, #-12]!
   15898:	subs	r4, r0, #0
   1589c:	str	lr, [sp, #8]
   158a0:	sub	sp, sp, #20
   158a4:	moveq	r2, #1
   158a8:	movne	r2, #0
   158ac:	movne	r0, r4
   158b0:	mvneq	r0, #0
   158b4:	mov	r1, sp
   158b8:	bl	11c3c <waitpid@plt>
   158bc:	subs	r5, r0, #0
   158c0:	blt	15968 <__assert_fail@plt+0x3a20>
   158c4:	beq	158f8 <__assert_fail@plt+0x39b0>
   158c8:	cmp	r4, #0
   158cc:	movw	r4, #25312	; 0x62e0
   158d0:	movt	r4, #3
   158d4:	ble	1590c <__assert_fail@plt+0x39c4>
   158d8:	ldr	r3, [sp]
   158dc:	ubfx	r2, r3, #8, #8
   158e0:	and	r3, r3, #127	; 0x7f
   158e4:	orrs	r3, r2, r3
   158e8:	bne	15930 <__assert_fail@plt+0x39e8>
   158ec:	ldr	r3, [r4, #1168]	; 0x490
   158f0:	sub	r3, r3, #1
   158f4:	str	r3, [r4, #1168]	; 0x490
   158f8:	mov	r0, r5
   158fc:	add	sp, sp, #20
   15900:	ldrd	r4, [sp]
   15904:	add	sp, sp, #8
   15908:	pop	{pc}		; (ldr pc, [sp], #4)
   1590c:	add	r1, sp, #4
   15910:	ldr	r0, [r4, #1164]	; 0x48c
   15914:	str	r5, [sp, #8]
   15918:	bl	1c880 <__assert_fail@plt+0xa938>
   1591c:	cmp	r0, #0
   15920:	beq	158f8 <__assert_fail@plt+0x39b0>
   15924:	mov	r3, #2
   15928:	strb	r3, [r0, #8]
   1592c:	b	158d8 <__assert_fail@plt+0x3990>
   15930:	mov	r2, #5
   15934:	movw	r1, #14236	; 0x379c
   15938:	movt	r1, #2
   1593c:	mov	r0, #0
   15940:	bl	11b58 <dcgettext@plt>
   15944:	mov	r5, r0
   15948:	mov	r0, #4
   1594c:	ldr	r1, [r4, #1160]	; 0x488
   15950:	bl	1f518 <__assert_fail@plt+0xd5d0>
   15954:	mov	r3, r0
   15958:	mov	r2, r5
   1595c:	mov	r1, #0
   15960:	mov	r0, #2
   15964:	bl	11c90 <error@plt>
   15968:	bl	11d74 <__errno_location@plt>
   1596c:	ldr	r4, [r0]
   15970:	mov	r2, #5
   15974:	movw	r1, #14216	; 0x3788
   15978:	movt	r1, #2
   1597c:	mov	r0, #0
   15980:	bl	11b58 <dcgettext@plt>
   15984:	movw	r3, #25312	; 0x62e0
   15988:	movt	r3, #3
   1598c:	mov	r5, r0
   15990:	mov	r0, #4
   15994:	ldr	r1, [r3, #1160]	; 0x488
   15998:	bl	1f518 <__assert_fail@plt+0xd5d0>
   1599c:	mov	r3, r0
   159a0:	mov	r2, r5
   159a4:	mov	r1, r4
   159a8:	mov	r0, #2
   159ac:	bl	11c90 <error@plt>
   159b0:	movw	r3, #25312	; 0x62e0
   159b4:	movt	r3, #3
   159b8:	str	r4, [sp, #-8]!
   159bc:	mov	r4, r0
   159c0:	ldr	r0, [r3, #1164]	; 0x48c
   159c4:	str	lr, [sp, #4]
   159c8:	sub	sp, sp, #16
   159cc:	add	r1, sp, #4
   159d0:	str	r4, [sp, #8]
   159d4:	bl	1c880 <__assert_fail@plt+0xa938>
   159d8:	subs	r3, r0, #0
   159dc:	beq	159f0 <__assert_fail@plt+0x3aa8>
   159e0:	mov	r2, #2
   159e4:	mov	r0, r4
   159e8:	strb	r2, [r3, #8]
   159ec:	bl	15894 <__assert_fail@plt+0x394c>
   159f0:	add	sp, sp, #16
   159f4:	ldr	r4, [sp]
   159f8:	add	sp, sp, #4
   159fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15a00:	mov	r5, r0
   15a04:	mov	r0, r1
   15a08:	push	{lr}		; (str lr, [sp, #-4]!)
   15a0c:	sub	sp, sp, #20
   15a10:	mov	r4, r1
   15a14:	bl	11d50 <strlen@plt>
   15a18:	mov	r2, r0
   15a1c:	mov	r1, r4
   15a20:	mov	r0, #2
   15a24:	bl	11dbc <write@plt>
   15a28:	cmp	r5, #0
   15a2c:	bne	15a4c <__assert_fail@plt+0x3b04>
   15a30:	movw	r1, #16100	; 0x3ee4
   15a34:	movt	r1, #2
   15a38:	mov	r2, #1
   15a3c:	mov	r0, #2
   15a40:	bl	11dbc <write@plt>
   15a44:	mov	r0, #2
   15a48:	bl	11abc <_exit@plt>
   15a4c:	add	r1, sp, #4
   15a50:	mov	r0, r5
   15a54:	bl	1cbf8 <__assert_fail@plt+0xacb0>
   15a58:	mov	r4, r0
   15a5c:	mov	r2, #8
   15a60:	movw	r1, #14268	; 0x37bc
   15a64:	movt	r1, #2
   15a68:	mov	r0, #2
   15a6c:	bl	11dbc <write@plt>
   15a70:	mov	r0, r4
   15a74:	bl	11d50 <strlen@plt>
   15a78:	mov	r2, r0
   15a7c:	mov	r1, r4
   15a80:	mov	r0, #2
   15a84:	bl	11dbc <write@plt>
   15a88:	b	15a30 <__assert_fail@plt+0x3ae8>
   15a8c:	strd	r4, [sp, #-12]!
   15a90:	movw	r4, #25312	; 0x62e0
   15a94:	movt	r4, #3
   15a98:	ldr	ip, [r4, #1164]	; 0x48c
   15a9c:	mov	r5, r0
   15aa0:	str	lr, [sp, #8]
   15aa4:	sub	sp, sp, #12
   15aa8:	cmp	ip, #0
   15aac:	beq	15adc <__assert_fail@plt+0x3b94>
   15ab0:	mov	r3, #1
   15ab4:	mov	r0, ip
   15ab8:	mov	r1, r5
   15abc:	strb	r3, [r5, #8]
   15ac0:	bl	1c840 <__assert_fail@plt+0xa8f8>
   15ac4:	cmp	r0, #0
   15ac8:	beq	15b0c <__assert_fail@plt+0x3bc4>
   15acc:	add	sp, sp, #12
   15ad0:	ldrd	r4, [sp]
   15ad4:	add	sp, sp, #8
   15ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   15adc:	mov	r1, ip
   15ae0:	movw	r3, #20416	; 0x4fc0
   15ae4:	movt	r3, #1
   15ae8:	movw	r2, #20400	; 0x4fb0
   15aec:	movt	r2, #1
   15af0:	mov	r0, #47	; 0x2f
   15af4:	str	ip, [sp]
   15af8:	bl	1c1e8 <__assert_fail@plt+0xa2a0>
   15afc:	cmp	r0, #0
   15b00:	mov	ip, r0
   15b04:	str	r0, [r4, #1164]	; 0x48c
   15b08:	bne	15ab0 <__assert_fail@plt+0x3b68>
   15b0c:	bl	213f8 <__assert_fail@plt+0xf4b0>
   15b10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b14:	mov	r5, r3
   15b18:	mov	ip, r0
   15b1c:	strd	r6, [sp, #8]
   15b20:	mov	r6, r2
   15b24:	mov	r4, r1
   15b28:	strd	r8, [sp, #16]
   15b2c:	add	r1, ip, #12
   15b30:	mov	r8, #0
   15b34:	strd	sl, [sp, #24]
   15b38:	mov	fp, #1
   15b3c:	str	lr, [sp, #32]
   15b40:	sub	sp, sp, #12
   15b44:	ldr	r2, [sp, #48]	; 0x30
   15b48:	ldrb	r3, [sp, #52]	; 0x34
   15b4c:	lsl	r9, r2, #4
   15b50:	cmp	r3, #0
   15b54:	rsb	r9, r9, #0
   15b58:	add	sl, r6, r9
   15b5c:	beq	15c04 <__assert_fail@plt+0x3cbc>
   15b60:	ldr	r3, [ip, #20]
   15b64:	add	r1, ip, #8
   15b68:	lsr	r0, r3, #1
   15b6c:	sub	r6, sl, r0, lsl #4
   15b70:	sub	r3, r3, r0
   15b74:	ldr	lr, [ip, #40]	; 0x28
   15b78:	add	r7, r4, #72	; 0x48
   15b7c:	str	sl, [r4]
   15b80:	stmib	r4, {r6, sl}
   15b84:	str	r6, [r4, #12]
   15b88:	str	r1, [r4, #16]
   15b8c:	mov	r1, #0
   15b90:	add	lr, lr, #1
   15b94:	str	r0, [r4, #20]
   15b98:	add	r0, r4, #48	; 0x30
   15b9c:	str	r3, [r4, #24]
   15ba0:	str	ip, [r4, #28]
   15ba4:	str	lr, [r4, #40]	; 0x28
   15ba8:	strb	r8, [r4, #44]	; 0x2c
   15bac:	bl	11ae0 <pthread_mutex_init@plt>
   15bb0:	lsr	ip, r5, #1
   15bb4:	cmp	r5, #1
   15bb8:	mov	r0, r4
   15bbc:	mov	r2, sl
   15bc0:	mov	r1, r7
   15bc4:	mov	r3, ip
   15bc8:	sub	r5, r5, ip
   15bcc:	bls	15c18 <__assert_fail@plt+0x3cd0>
   15bd0:	ldr	ip, [sp, #48]	; 0x30
   15bd4:	add	sl, r6, r9
   15bd8:	str	r7, [r4, #32]
   15bdc:	str	ip, [sp]
   15be0:	str	fp, [sp, #4]
   15be4:	bl	15b10 <__assert_fail@plt+0x3bc8>
   15be8:	mov	r3, #0
   15bec:	mov	ip, r4
   15bf0:	str	r0, [r4, #36]	; 0x24
   15bf4:	cmp	r3, #0
   15bf8:	mov	r4, r0
   15bfc:	add	r1, ip, #12
   15c00:	bne	15b60 <__assert_fail@plt+0x3c18>
   15c04:	ldr	r3, [ip, #24]
   15c08:	lsr	r0, r3, #1
   15c0c:	sub	r6, sl, r0, lsl #4
   15c10:	sub	r3, r3, r0
   15c14:	b	15b74 <__assert_fail@plt+0x3c2c>
   15c18:	mov	r0, r7
   15c1c:	str	r8, [r4, #32]
   15c20:	str	r8, [r4, #36]	; 0x24
   15c24:	add	sp, sp, #12
   15c28:	ldrd	r4, [sp]
   15c2c:	ldrd	r6, [sp, #8]
   15c30:	ldrd	r8, [sp, #16]
   15c34:	ldrd	sl, [sp, #24]
   15c38:	add	sp, sp, #32
   15c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c40:	strd	r4, [sp, #-16]!
   15c44:	add	r5, r0, #4
   15c48:	mov	r4, r0
   15c4c:	mov	r0, r5
   15c50:	str	r6, [sp, #8]
   15c54:	mov	r6, r1
   15c58:	str	lr, [sp, #12]
   15c5c:	bl	11a98 <pthread_mutex_lock@plt>
   15c60:	ldr	r0, [r4], #32
   15c64:	mov	r1, r6
   15c68:	bl	1ca3c <__assert_fail@plt+0xaaf4>
   15c6c:	mov	r3, #1
   15c70:	strb	r3, [r6, #44]	; 0x2c
   15c74:	mov	r0, r4
   15c78:	bl	11f18 <pthread_cond_signal@plt>
   15c7c:	mov	r0, r5
   15c80:	ldrd	r4, [sp]
   15c84:	ldr	r6, [sp, #8]
   15c88:	ldr	lr, [sp, #12]
   15c8c:	add	sp, sp, #16
   15c90:	b	119f0 <pthread_mutex_unlock@plt>
   15c94:	movw	r3, #25060	; 0x61e4
   15c98:	movt	r3, #3
   15c9c:	strd	r4, [sp, #-12]!
   15ca0:	ldr	r5, [r2]
   15ca4:	sub	r1, r1, #1
   15ca8:	add	r1, r0, r1
   15cac:	ldr	r4, [r2, #4]
   15cb0:	str	lr, [sp, #8]
   15cb4:	ldr	lr, [r3, #96]	; 0x60
   15cb8:	cmp	lr, #256	; 0x100
   15cbc:	beq	15d7c <__assert_fail@plt+0x3e34>
   15cc0:	cmp	r1, r0
   15cc4:	bls	15cf4 <__assert_fail@plt+0x3dac>
   15cc8:	cmp	r5, #0
   15ccc:	sub	r5, r5, #1
   15cd0:	beq	15d28 <__assert_fail@plt+0x3de0>
   15cd4:	mov	r3, r0
   15cd8:	mov	r0, r3
   15cdc:	ldrb	ip, [r3], #1
   15ce0:	cmp	lr, ip
   15ce4:	beq	15d0c <__assert_fail@plt+0x3dc4>
   15ce8:	cmp	r1, r3
   15cec:	mov	r0, r3
   15cf0:	bhi	15cd8 <__assert_fail@plt+0x3d90>
   15cf4:	add	r0, r0, r4
   15cf8:	ldrd	r4, [sp]
   15cfc:	add	sp, sp, #8
   15d00:	cmp	r1, r0
   15d04:	movcc	r0, r1
   15d08:	pop	{pc}		; (ldr pc, [sp], #4)
   15d0c:	cmp	r1, r0
   15d10:	bls	15cf4 <__assert_fail@plt+0x3dac>
   15d14:	cmp	r1, r3
   15d18:	mov	r0, r3
   15d1c:	bls	15cf4 <__assert_fail@plt+0x3dac>
   15d20:	subs	r5, r5, #1
   15d24:	bcs	15cd4 <__assert_fail@plt+0x3d8c>
   15d28:	ldrb	r3, [r2, #24]
   15d2c:	cmp	r3, #0
   15d30:	beq	15cf4 <__assert_fail@plt+0x3dac>
   15d34:	ldrb	r3, [r0]
   15d38:	movw	lr, #25312	; 0x62e0
   15d3c:	movt	lr, #3
   15d40:	add	r3, lr, r3
   15d44:	ldrb	r3, [r3, #8]
   15d48:	cmp	r3, #0
   15d4c:	addne	r3, r0, #1
   15d50:	beq	15cf4 <__assert_fail@plt+0x3dac>
   15d54:	cmp	r1, r3
   15d58:	mov	r0, r3
   15d5c:	bls	15cf4 <__assert_fail@plt+0x3dac>
   15d60:	ldrb	r2, [r3]
   15d64:	add	r3, r3, #1
   15d68:	add	r2, lr, r2
   15d6c:	ldrb	r2, [r2, #8]
   15d70:	cmp	r2, #0
   15d74:	bne	15d54 <__assert_fail@plt+0x3e0c>
   15d78:	b	15cf4 <__assert_fail@plt+0x3dac>
   15d7c:	cmp	r1, r0
   15d80:	bls	15cf4 <__assert_fail@plt+0x3dac>
   15d84:	cmp	r5, #0
   15d88:	sub	r5, r5, #1
   15d8c:	beq	15d28 <__assert_fail@plt+0x3de0>
   15d90:	ldrb	r3, [r0]
   15d94:	movw	lr, #25312	; 0x62e0
   15d98:	movt	lr, #3
   15d9c:	add	r3, lr, r3
   15da0:	ldrb	ip, [r3, #8]
   15da4:	b	15db4 <__assert_fail@plt+0x3e6c>
   15da8:	ldrb	r3, [r0]
   15dac:	add	r3, lr, r3
   15db0:	ldrb	ip, [r3, #8]
   15db4:	cmp	ip, #0
   15db8:	beq	15dcc <__assert_fail@plt+0x3e84>
   15dbc:	add	r0, r0, #1
   15dc0:	cmp	r1, r0
   15dc4:	bhi	15da8 <__assert_fail@plt+0x3e60>
   15dc8:	b	15cf4 <__assert_fail@plt+0x3dac>
   15dcc:	cmp	r1, r0
   15dd0:	bls	15cf4 <__assert_fail@plt+0x3dac>
   15dd4:	add	r3, r0, #1
   15dd8:	b	15df0 <__assert_fail@plt+0x3ea8>
   15ddc:	ldrb	ip, [r3], #1
   15de0:	add	ip, lr, ip
   15de4:	ldrb	ip, [ip, #8]
   15de8:	cmp	ip, #0
   15dec:	bne	15e00 <__assert_fail@plt+0x3eb8>
   15df0:	cmp	r1, r3
   15df4:	mov	r0, r3
   15df8:	bne	15ddc <__assert_fail@plt+0x3e94>
   15dfc:	b	15cf4 <__assert_fail@plt+0x3dac>
   15e00:	subs	r5, r5, #1
   15e04:	bcs	15db4 <__assert_fail@plt+0x3e6c>
   15e08:	b	15d28 <__assert_fail@plt+0x3de0>
   15e0c:	movw	r3, #25060	; 0x61e4
   15e10:	movt	r3, #3
   15e14:	strd	r4, [sp, #-16]!
   15e18:	ldr	r4, [r2, #12]
   15e1c:	sub	r1, r1, #1
   15e20:	str	r6, [sp, #8]
   15e24:	add	r1, r0, r1
   15e28:	ldr	r6, [r2, #8]
   15e2c:	str	lr, [sp, #12]
   15e30:	ldr	r5, [r3, #96]	; 0x60
   15e34:	cmp	r4, #0
   15e38:	addeq	r6, r6, #1
   15e3c:	cmp	r5, #256	; 0x100
   15e40:	beq	15f2c <__assert_fail@plt+0x3fe4>
   15e44:	cmp	r1, r0
   15e48:	bls	15e7c <__assert_fail@plt+0x3f34>
   15e4c:	cmp	r6, #0
   15e50:	sub	r6, r6, #1
   15e54:	beq	15e7c <__assert_fail@plt+0x3f34>
   15e58:	mov	r3, r0
   15e5c:	mov	ip, r3
   15e60:	add	r3, r3, #1
   15e64:	ldrb	lr, [ip]
   15e68:	mov	r0, r3
   15e6c:	cmp	r5, lr
   15e70:	beq	15ef4 <__assert_fail@plt+0x3fac>
   15e74:	cmp	r1, r3
   15e78:	bhi	15e5c <__assert_fail@plt+0x3f14>
   15e7c:	cmp	r4, #0
   15e80:	beq	15fbc <__assert_fail@plt+0x4074>
   15e84:	ldrb	r3, [r2, #25]
   15e88:	cmp	r3, #0
   15e8c:	beq	15ee0 <__assert_fail@plt+0x3f98>
   15e90:	cmp	r1, r0
   15e94:	bls	15ee0 <__assert_fail@plt+0x3f98>
   15e98:	ldrb	r3, [r0]
   15e9c:	movw	lr, #25312	; 0x62e0
   15ea0:	movt	lr, #3
   15ea4:	add	r3, lr, r3
   15ea8:	ldrb	r3, [r3, #8]
   15eac:	cmp	r3, #0
   15eb0:	beq	15ee0 <__assert_fail@plt+0x3f98>
   15eb4:	add	r3, r0, #1
   15eb8:	b	15ed4 <__assert_fail@plt+0x3f8c>
   15ebc:	ldrb	r2, [r3]
   15ec0:	add	r3, r3, #1
   15ec4:	add	r2, lr, r2
   15ec8:	ldrb	r2, [r2, #8]
   15ecc:	cmp	r2, #0
   15ed0:	beq	15ee0 <__assert_fail@plt+0x3f98>
   15ed4:	cmp	r1, r3
   15ed8:	mov	r0, r3
   15edc:	bne	15ebc <__assert_fail@plt+0x3f74>
   15ee0:	add	r0, r0, r4
   15ee4:	cmp	r1, r0
   15ee8:	movcc	ip, r1
   15eec:	movcs	ip, r0
   15ef0:	b	15f04 <__assert_fail@plt+0x3fbc>
   15ef4:	cmp	r1, ip
   15ef8:	bls	15fc4 <__assert_fail@plt+0x407c>
   15efc:	orrs	r3, r4, r6
   15f00:	bne	15f18 <__assert_fail@plt+0x3fd0>
   15f04:	ldrd	r4, [sp]
   15f08:	mov	r0, ip
   15f0c:	ldr	r6, [sp, #8]
   15f10:	add	sp, sp, #12
   15f14:	pop	{pc}		; (ldr pc, [sp], #4)
   15f18:	cmp	r1, r0
   15f1c:	bls	15e7c <__assert_fail@plt+0x3f34>
   15f20:	subs	r6, r6, #1
   15f24:	bcc	15e7c <__assert_fail@plt+0x3f34>
   15f28:	b	15e58 <__assert_fail@plt+0x3f10>
   15f2c:	cmp	r1, r0
   15f30:	bls	15e7c <__assert_fail@plt+0x3f34>
   15f34:	cmp	r6, #0
   15f38:	sub	r5, r6, #1
   15f3c:	beq	15e7c <__assert_fail@plt+0x3f34>
   15f40:	ldrb	r3, [r0]
   15f44:	movw	lr, #25312	; 0x62e0
   15f48:	movt	lr, #3
   15f4c:	add	r3, lr, r3
   15f50:	ldrb	ip, [r3, #8]
   15f54:	b	15f64 <__assert_fail@plt+0x401c>
   15f58:	ldrb	r3, [r0]
   15f5c:	add	r3, lr, r3
   15f60:	ldrb	ip, [r3, #8]
   15f64:	cmp	ip, #0
   15f68:	beq	15f7c <__assert_fail@plt+0x4034>
   15f6c:	add	r0, r0, #1
   15f70:	cmp	r1, r0
   15f74:	bhi	15f58 <__assert_fail@plt+0x4010>
   15f78:	b	15e7c <__assert_fail@plt+0x3f34>
   15f7c:	cmp	r1, r0
   15f80:	bls	15e7c <__assert_fail@plt+0x3f34>
   15f84:	add	r3, r0, #1
   15f88:	b	15fa0 <__assert_fail@plt+0x4058>
   15f8c:	ldrb	ip, [r3], #1
   15f90:	add	ip, lr, ip
   15f94:	ldrb	ip, [ip, #8]
   15f98:	cmp	ip, #0
   15f9c:	bne	15fb0 <__assert_fail@plt+0x4068>
   15fa0:	cmp	r1, r3
   15fa4:	mov	r0, r3
   15fa8:	bne	15f8c <__assert_fail@plt+0x4044>
   15fac:	b	15e7c <__assert_fail@plt+0x3f34>
   15fb0:	subs	r5, r5, #1
   15fb4:	bcs	15f64 <__assert_fail@plt+0x401c>
   15fb8:	b	15e7c <__assert_fail@plt+0x3f34>
   15fbc:	mov	ip, r0
   15fc0:	b	15f04 <__assert_fail@plt+0x3fbc>
   15fc4:	mov	r0, ip
   15fc8:	b	15e7c <__assert_fail@plt+0x3f34>
   15fcc:	mov	r3, r0
   15fd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15fd4:	mov	r2, #0
   15fd8:	ldr	r4, [r1, #12]
   15fdc:	movw	r0, #21844	; 0x5554
   15fe0:	movt	r0, #21845	; 0x5555
   15fe4:	ldr	r5, [r3, #12]
   15fe8:	strd	r6, [sp, #8]
   15fec:	strd	r8, [sp, #16]
   15ff0:	movw	r9, #25312	; 0x62e0
   15ff4:	movt	r9, #3
   15ff8:	strd	sl, [sp, #24]
   15ffc:	ldr	r6, [r3, #8]
   16000:	str	lr, [sp, #32]
   16004:	ldr	fp, [r1, #8]
   16008:	vpush	{d8}
   1600c:	sub	sp, sp, #8384	; 0x20c0
   16010:	ldr	sl, [r9, #1172]	; 0x494
   16014:	sub	sp, sp, #52	; 0x34
   16018:	str	r2, [sp]
   1601c:	strd	r2, [sp, #4]
   16020:	str	r1, [sp, #12]
   16024:	str	r0, [sp, #48]	; 0x30
   16028:	ldrb	r3, [r9, #1176]	; 0x498
   1602c:	cmp	r6, r5
   16030:	movcc	r0, r5
   16034:	movcs	r0, r6
   16038:	cmp	fp, r4
   1603c:	sub	r7, r0, r6
   16040:	ldr	r5, [sl, #16]
   16044:	movcs	r1, fp
   16048:	movcc	r1, r4
   1604c:	sub	r8, r1, fp
   16050:	ldr	r2, [sl, #20]
   16054:	cmp	r3, #0
   16058:	bne	16160 <__assert_fail@plt+0x4218>
   1605c:	ldrb	r3, [sl, #26]
   16060:	cmp	r3, #0
   16064:	bne	16160 <__assert_fail@plt+0x4218>
   16068:	ldrh	r3, [sl, #28]
   1606c:	cmp	r3, #0
   16070:	bne	16160 <__assert_fail@plt+0x4218>
   16074:	ldrb	r3, [sl, #30]
   16078:	cmp	r3, #0
   1607c:	bne	16160 <__assert_fail@plt+0x4218>
   16080:	ldrb	r3, [sl, #27]
   16084:	cmp	r3, #0
   16088:	bne	16160 <__assert_fail@plt+0x4218>
   1608c:	ldrb	r3, [sl, #32]
   16090:	cmp	r3, #0
   16094:	bne	16160 <__assert_fail@plt+0x4218>
   16098:	cmp	r5, #0
   1609c:	beq	16bb4 <__assert_fail@plt+0x4c6c>
   160a0:	cmp	r2, #0
   160a4:	beq	1696c <__assert_fail@plt+0x4a24>
   160a8:	cmp	r6, r0
   160ac:	bcs	160c0 <__assert_fail@plt+0x4178>
   160b0:	ldrb	r3, [r6]
   160b4:	ldrb	r3, [r5, r3]
   160b8:	cmp	r3, #0
   160bc:	bne	16ac8 <__assert_fail@plt+0x4b80>
   160c0:	cmp	fp, r1
   160c4:	bcs	16100 <__assert_fail@plt+0x41b8>
   160c8:	ldrb	r3, [fp]
   160cc:	ldrb	r3, [r5, r3]
   160d0:	cmp	r3, #0
   160d4:	addne	r3, fp, #1
   160d8:	bne	160f4 <__assert_fail@plt+0x41ac>
   160dc:	b	16aa0 <__assert_fail@plt+0x4b58>
   160e0:	ldrb	ip, [r3]
   160e4:	add	r3, r3, #1
   160e8:	ldrb	ip, [r5, ip]
   160ec:	cmp	ip, #0
   160f0:	beq	16aa0 <__assert_fail@plt+0x4b58>
   160f4:	cmp	r1, r3
   160f8:	mov	fp, r3
   160fc:	bne	160e0 <__assert_fail@plt+0x4198>
   16100:	cmp	r1, fp
   16104:	movls	r3, #0
   16108:	movhi	r3, #1
   1610c:	cmp	r0, r6
   16110:	rsbls	r3, r3, #0
   16114:	rsbhi	r3, r3, #1
   16118:	cmp	r3, #0
   1611c:	beq	16214 <__assert_fail@plt+0x42cc>
   16120:	mov	r2, r3
   16124:	ldrb	r3, [sl, #31]
   16128:	cmp	r3, #0
   1612c:	beq	16138 <__assert_fail@plt+0x41f0>
   16130:	rsb	r3, r2, #0
   16134:	mov	r2, r3
   16138:	mov	r0, r2
   1613c:	add	sp, sp, #8384	; 0x20c0
   16140:	add	sp, sp, #52	; 0x34
   16144:	vpop	{d8}
   16148:	ldrd	r4, [sp]
   1614c:	ldrd	r6, [sp, #8]
   16150:	ldrd	r8, [sp, #16]
   16154:	ldrd	sl, [sp, #24]
   16158:	add	sp, sp, #32
   1615c:	pop	{pc}		; (ldr pc, [sp], #4)
   16160:	orrs	r4, r2, r5
   16164:	bne	16410 <__assert_fail@plt+0x44c8>
   16168:	ldrb	r3, [r0]
   1616c:	strb	r4, [r0]
   16170:	str	r3, [sp]
   16174:	ldrb	r3, [r1]
   16178:	strb	r4, [r1]
   1617c:	str	r3, [sp, #4]
   16180:	ldrb	r5, [sl, #26]
   16184:	cmp	r5, #0
   16188:	beq	162a0 <__assert_fail@plt+0x4358>
   1618c:	ldrb	r3, [r6]
   16190:	mov	r0, r6
   16194:	add	r3, r9, r3
   16198:	ldrb	r3, [r3, #8]
   1619c:	cmp	r3, #0
   161a0:	beq	161b8 <__assert_fail@plt+0x4270>
   161a4:	ldrb	r3, [r0, #1]!
   161a8:	add	r3, r9, r3
   161ac:	ldrb	r3, [r3, #8]
   161b0:	cmp	r3, #0
   161b4:	bne	161a4 <__assert_fail@plt+0x425c>
   161b8:	ldrb	r3, [fp]
   161bc:	mov	r1, fp
   161c0:	add	r3, r9, r3
   161c4:	ldrb	r3, [r3, #8]
   161c8:	cmp	r3, #0
   161cc:	beq	161e4 <__assert_fail@plt+0x429c>
   161d0:	ldrb	r3, [r1, #1]!
   161d4:	add	r3, r9, r3
   161d8:	ldrb	r3, [r3, #8]
   161dc:	cmp	r3, #0
   161e0:	bne	161d0 <__assert_fail@plt+0x4288>
   161e4:	ldrb	r2, [r9, #4]
   161e8:	ldr	r3, [r9]
   161ec:	bl	20438 <__assert_fail@plt+0xe4f0>
   161f0:	mov	r3, r0
   161f4:	cmp	r4, #0
   161f8:	bne	163fc <__assert_fail@plt+0x44b4>
   161fc:	ldr	r2, [sp]
   16200:	strb	r2, [r6, r7]
   16204:	ldr	r2, [sp, #4]
   16208:	strb	r2, [fp, r8]
   1620c:	cmp	r3, #0
   16210:	bne	16120 <__assert_fail@plt+0x41d8>
   16214:	ldr	sl, [sl, #36]	; 0x24
   16218:	cmp	sl, #0
   1621c:	beq	16b64 <__assert_fail@plt+0x4c1c>
   16220:	ldr	r3, [sl, #8]
   16224:	ldr	r2, [sp, #8]
   16228:	ldr	r1, [sp, #12]
   1622c:	cmn	r3, #1
   16230:	ldm	r2, {r6, r8}
   16234:	ldr	fp, [r1]
   16238:	ldr	r7, [r1, #4]
   1623c:	beq	163e8 <__assert_fail@plt+0x44a0>
   16240:	mov	r2, sl
   16244:	mov	r1, r8
   16248:	mov	r0, r6
   1624c:	bl	15e0c <__assert_fail@plt+0x3ec4>
   16250:	mov	r5, r0
   16254:	mov	r2, sl
   16258:	mov	r1, r7
   1625c:	mov	r0, fp
   16260:	bl	15e0c <__assert_fail@plt+0x3ec4>
   16264:	mov	r4, r0
   16268:	ldr	r3, [sl]
   1626c:	cmn	r3, #1
   16270:	beq	16348 <__assert_fail@plt+0x4400>
   16274:	mov	r1, r8
   16278:	mov	r0, r6
   1627c:	mov	r2, sl
   16280:	bl	15c94 <__assert_fail@plt+0x3d4c>
   16284:	mov	r6, r0
   16288:	mov	r2, sl
   1628c:	mov	r0, fp
   16290:	mov	r1, r7
   16294:	bl	15c94 <__assert_fail@plt+0x3d4c>
   16298:	mov	fp, r0
   1629c:	b	16028 <__assert_fail@plt+0x40e0>
   162a0:	ldrb	r3, [sl, #28]
   162a4:	cmp	r3, #0
   162a8:	bne	16530 <__assert_fail@plt+0x45e8>
   162ac:	ldrb	r2, [sl, #29]
   162b0:	cmp	r2, #0
   162b4:	beq	164f8 <__assert_fail@plt+0x45b0>
   162b8:	ldrb	r3, [r6]
   162bc:	mov	r5, r6
   162c0:	add	r3, r9, r3
   162c4:	ldrb	r3, [r3, #8]
   162c8:	cmp	r3, #0
   162cc:	beq	162e4 <__assert_fail@plt+0x439c>
   162d0:	ldrb	r3, [r5, #1]!
   162d4:	add	r3, r9, r3
   162d8:	ldrb	r3, [r3, #8]
   162dc:	cmp	r3, #0
   162e0:	bne	162d0 <__assert_fail@plt+0x4388>
   162e4:	ldrb	r3, [fp]
   162e8:	mov	r1, fp
   162ec:	add	r3, r9, r3
   162f0:	ldrb	r3, [r3, #8]
   162f4:	cmp	r3, #0
   162f8:	beq	16310 <__assert_fail@plt+0x43c8>
   162fc:	ldrb	r3, [r1, #1]!
   16300:	add	r3, r9, r3
   16304:	ldrb	r3, [r3, #8]
   16308:	cmp	r3, #0
   1630c:	bne	162fc <__assert_fail@plt+0x43b4>
   16310:	mov	r0, r5
   16314:	str	r1, [sp, #24]
   16318:	bl	150b0 <__assert_fail@plt+0x3168>
   1631c:	ldr	r1, [sp, #24]
   16320:	mov	r3, r0
   16324:	str	r3, [sp, #16]
   16328:	mov	r0, r1
   1632c:	bl	150b0 <__assert_fail@plt+0x3168>
   16330:	ldr	r3, [sp, #16]
   16334:	subs	r3, r3, r0
   16338:	bne	161f4 <__assert_fail@plt+0x42ac>
   1633c:	mov	r0, r5
   16340:	ldr	r1, [sp, #24]
   16344:	b	161e4 <__assert_fail@plt+0x429c>
   16348:	ldrb	r3, [sl, #24]
   1634c:	cmp	r3, #0
   16350:	beq	16028 <__assert_fail@plt+0x40e0>
   16354:	cmp	r5, r6
   16358:	bls	1639c <__assert_fail@plt+0x4454>
   1635c:	ldrb	r3, [r6]
   16360:	add	r3, r9, r3
   16364:	ldrb	r3, [r3, #8]
   16368:	cmp	r3, #0
   1636c:	beq	1639c <__assert_fail@plt+0x4454>
   16370:	add	r3, r6, #1
   16374:	b	16390 <__assert_fail@plt+0x4448>
   16378:	ldrb	r2, [r3]
   1637c:	add	r3, r3, #1
   16380:	add	r2, r9, r2
   16384:	ldrb	r2, [r2, #8]
   16388:	cmp	r2, #0
   1638c:	beq	1639c <__assert_fail@plt+0x4454>
   16390:	cmp	r5, r3
   16394:	mov	r6, r3
   16398:	bne	16378 <__assert_fail@plt+0x4430>
   1639c:	cmp	r4, fp
   163a0:	bls	16028 <__assert_fail@plt+0x40e0>
   163a4:	ldrb	r3, [fp]
   163a8:	add	r3, r9, r3
   163ac:	ldrb	r3, [r3, #8]
   163b0:	cmp	r3, #0
   163b4:	addne	r3, fp, #1
   163b8:	bne	163d8 <__assert_fail@plt+0x4490>
   163bc:	b	16028 <__assert_fail@plt+0x40e0>
   163c0:	ldrb	r2, [r3]
   163c4:	add	r3, r3, #1
   163c8:	add	r2, r9, r2
   163cc:	ldrb	r2, [r2, #8]
   163d0:	cmp	r2, #0
   163d4:	beq	16028 <__assert_fail@plt+0x40e0>
   163d8:	cmp	r4, r3
   163dc:	mov	fp, r3
   163e0:	bne	163c0 <__assert_fail@plt+0x4478>
   163e4:	b	16028 <__assert_fail@plt+0x40e0>
   163e8:	sub	r5, r8, #1
   163ec:	sub	r4, r7, #1
   163f0:	add	r5, r6, r5
   163f4:	add	r4, fp, r4
   163f8:	b	16268 <__assert_fail@plt+0x4320>
   163fc:	ldr	r0, [sp, #20]
   16400:	str	r3, [sp, #16]
   16404:	bl	1b670 <__assert_fail@plt+0x9728>
   16408:	ldr	r3, [sp, #16]
   1640c:	b	1620c <__assert_fail@plt+0x42c4>
   16410:	add	r0, r7, r8
   16414:	add	r0, r0, #2
   16418:	cmp	r0, #4000	; 0xfa0
   1641c:	movls	r3, #0
   16420:	addls	ip, sp, #432	; 0x1b0
   16424:	strls	r3, [sp, #20]
   16428:	bhi	165a4 <__assert_fail@plt+0x465c>
   1642c:	add	r0, r7, #1
   16430:	cmp	r7, #0
   16434:	add	r0, ip, r0
   16438:	beq	165c8 <__assert_fail@plt+0x4680>
   1643c:	sub	r6, r6, #1
   16440:	add	lr, r6, r7
   16444:	mov	r7, #0
   16448:	b	16470 <__assert_fail@plt+0x4528>
   1644c:	ldrb	r1, [r5, r3]
   16450:	cmp	r1, #0
   16454:	bne	16468 <__assert_fail@plt+0x4520>
   16458:	cmp	r2, #0
   1645c:	bne	1647c <__assert_fail@plt+0x4534>
   16460:	strb	r3, [ip, r7]
   16464:	add	r7, r7, #1
   16468:	cmp	lr, r6
   1646c:	beq	16484 <__assert_fail@plt+0x453c>
   16470:	cmp	r5, #0
   16474:	ldrb	r3, [r6, #1]!
   16478:	bne	1644c <__assert_fail@plt+0x4504>
   1647c:	ldrb	r3, [r2, r3]
   16480:	b	16460 <__assert_fail@plt+0x4518>
   16484:	mov	r3, #0
   16488:	add	r1, ip, r7
   1648c:	cmp	r8, r3
   16490:	strb	r3, [r1]
   16494:	beq	165dc <__assert_fail@plt+0x4694>
   16498:	sub	fp, fp, #1
   1649c:	add	lr, fp, r8
   164a0:	mov	r8, r3
   164a4:	b	164cc <__assert_fail@plt+0x4584>
   164a8:	ldrb	r1, [r5, r3]
   164ac:	cmp	r1, #0
   164b0:	bne	164c4 <__assert_fail@plt+0x457c>
   164b4:	cmp	r2, #0
   164b8:	bne	164d8 <__assert_fail@plt+0x4590>
   164bc:	strb	r3, [r0, r8]
   164c0:	add	r8, r8, #1
   164c4:	cmp	lr, fp
   164c8:	beq	164e0 <__assert_fail@plt+0x4598>
   164cc:	cmp	r5, #0
   164d0:	ldrb	r3, [fp, #1]!
   164d4:	bne	164a8 <__assert_fail@plt+0x4560>
   164d8:	ldrb	r3, [r2, r3]
   164dc:	b	164bc <__assert_fail@plt+0x4574>
   164e0:	add	r2, r0, r8
   164e4:	mov	r3, #0
   164e8:	mov	fp, r0
   164ec:	mov	r6, ip
   164f0:	strb	r3, [r2]
   164f4:	b	16180 <__assert_fail@plt+0x4238>
   164f8:	ldrb	r5, [sl, #30]
   164fc:	cmp	r5, #0
   16500:	bne	165e4 <__assert_fail@plt+0x469c>
   16504:	ldrb	r3, [sl, #27]
   16508:	cmp	r3, #0
   1650c:	bne	16628 <__assert_fail@plt+0x46e0>
   16510:	ldrb	r3, [sl, #32]
   16514:	cmp	r3, #0
   16518:	beq	16610 <__assert_fail@plt+0x46c8>
   1651c:	mov	r1, fp
   16520:	mov	r0, r6
   16524:	bl	1b2ac <__assert_fail@plt+0x9364>
   16528:	mov	r3, r0
   1652c:	b	161f4 <__assert_fail@plt+0x42ac>
   16530:	mov	r0, r6
   16534:	add	r1, sp, #84	; 0x54
   16538:	bl	11b1c <strtold@plt>
   1653c:	add	r1, sp, #88	; 0x58
   16540:	mov	r0, fp
   16544:	vmov.f64	d8, d0
   16548:	bl	11b1c <strtold@plt>
   1654c:	ldr	r3, [sp, #84]	; 0x54
   16550:	cmp	r6, r3
   16554:	ldr	r3, [sp, #88]	; 0x58
   16558:	beq	1693c <__assert_fail@plt+0x49f4>
   1655c:	cmp	fp, r3
   16560:	beq	1659c <__assert_fail@plt+0x4654>
   16564:	vcmpe.f64	d8, d0
   16568:	vmrs	APSR_nzcv, fpscr
   1656c:	bmi	16cbc <__assert_fail@plt+0x4d74>
   16570:	bgt	1659c <__assert_fail@plt+0x4654>
   16574:	vcmp.f64	d8, d0
   16578:	vmrs	APSR_nzcv, fpscr
   1657c:	moveq	r3, r5
   16580:	beq	161f4 <__assert_fail@plt+0x42ac>
   16584:	vcmp.f64	d0, d0
   16588:	vmrs	APSR_nzcv, fpscr
   1658c:	beq	16cbc <__assert_fail@plt+0x4d74>
   16590:	vcmp.f64	d8, d8
   16594:	vmrs	APSR_nzcv, fpscr
   16598:	bne	16c04 <__assert_fail@plt+0x4cbc>
   1659c:	mov	r3, #1
   165a0:	b	161f4 <__assert_fail@plt+0x42ac>
   165a4:	str	r2, [sp, #16]
   165a8:	bl	20f80 <__assert_fail@plt+0xf038>
   165ac:	mov	ip, r0
   165b0:	cmp	r7, #0
   165b4:	str	r0, [sp, #20]
   165b8:	add	r0, r7, #1
   165bc:	ldr	r2, [sp, #16]
   165c0:	add	r0, ip, r0
   165c4:	bne	1643c <__assert_fail@plt+0x44f4>
   165c8:	mov	r3, #0
   165cc:	mov	r1, ip
   165d0:	cmp	r8, r3
   165d4:	strb	r3, [r1]
   165d8:	bne	16498 <__assert_fail@plt+0x4550>
   165dc:	mov	r2, r0
   165e0:	b	164e4 <__assert_fail@plt+0x459c>
   165e4:	mov	r1, r2
   165e8:	mov	r0, r6
   165ec:	str	r2, [sp, #16]
   165f0:	bl	15110 <__assert_fail@plt+0x31c8>
   165f4:	ldr	r2, [sp, #16]
   165f8:	mov	r5, r0
   165fc:	mov	r0, fp
   16600:	mov	r1, r2
   16604:	bl	15110 <__assert_fail@plt+0x31c8>
   16608:	sub	r3, r5, r0
   1660c:	b	161f4 <__assert_fail@plt+0x42ac>
   16610:	cmp	r7, #0
   16614:	bne	169c8 <__assert_fail@plt+0x4a80>
   16618:	adds	r3, r8, #0
   1661c:	movne	r3, #1
   16620:	rsb	r3, r3, #0
   16624:	b	161f4 <__assert_fail@plt+0x42ac>
   16628:	add	r3, sp, #276	; 0x114
   1662c:	mov	r2, #156	; 0x9c
   16630:	ldr	r1, [pc, #1740]	; 16d04 <__assert_fail@plt+0x4dbc>
   16634:	mov	r0, r3
   16638:	bl	11ac8 <memcpy@plt>
   1663c:	mov	r1, r0
   16640:	mov	r2, #156	; 0x9c
   16644:	add	r0, sp, #120	; 0x78
   16648:	bl	11ac8 <memcpy@plt>
   1664c:	ldrb	r3, [r9, #1176]	; 0x498
   16650:	cmp	r3, #0
   16654:	str	r3, [sp, #24]
   16658:	beq	169ec <__assert_fail@plt+0x4aa4>
   1665c:	add	r3, r7, r8
   16660:	add	r0, r6, r7
   16664:	add	r2, r3, r3, lsl #1
   16668:	add	r1, sp, #4416	; 0x1140
   1666c:	str	r0, [sp, #16]
   16670:	add	r0, sp, #176	; 0xb0
   16674:	add	r1, r1, #16
   16678:	add	r2, r2, #2
   1667c:	str	r6, [sp, #52]	; 0x34
   16680:	strd	sl, [sp, #56]	; 0x38
   16684:	str	r0, [sp, #44]	; 0x2c
   16688:	add	r0, sp, #120	; 0x78
   1668c:	str	r2, [sp, #36]	; 0x24
   16690:	add	r2, fp, r8
   16694:	str	r7, [sp, #64]	; 0x40
   16698:	mov	r7, r6
   1669c:	mov	r6, fp
   166a0:	str	r2, [sp, #24]
   166a4:	mov	r2, #4000	; 0xfa0
   166a8:	mov	fp, r5
   166ac:	str	r4, [sp, #72]	; 0x48
   166b0:	mov	r4, r2
   166b4:	str	r9, [sp, #76]	; 0x4c
   166b8:	mov	r9, r1
   166bc:	str	r5, [sp, #28]
   166c0:	str	r0, [sp, #40]	; 0x28
   166c4:	str	r8, [sp, #68]	; 0x44
   166c8:	ldr	r3, [sp, #36]	; 0x24
   166cc:	cmp	r3, r4
   166d0:	bhi	167ac <__assert_fail@plt+0x4864>
   166d4:	ldr	r3, [sp, #16]
   166d8:	cmp	r3, r7
   166dc:	bhi	167f0 <__assert_fail@plt+0x48a8>
   166e0:	ldr	r3, [sp, #24]
   166e4:	cmp	r3, r6
   166e8:	bhi	16aec <__assert_fail@plt+0x4ba4>
   166ec:	mov	r5, #0
   166f0:	str	r9, [sp, #32]
   166f4:	mov	r8, r5
   166f8:	ldr	r3, [sp, #24]
   166fc:	cmp	r3, r6
   16700:	bls	16cdc <__assert_fail@plt+0x4d94>
   16704:	mov	r0, r6
   16708:	bl	11d50 <strlen@plt>
   1670c:	add	r0, r0, #1
   16710:	add	r6, r6, r0
   16714:	ldr	r3, [sp, #16]
   16718:	ldr	r2, [sp, #24]
   1671c:	cmp	r7, r3
   16720:	movcc	r3, #0
   16724:	movcs	r3, #1
   16728:	cmp	r2, r6
   1672c:	movhi	r3, #0
   16730:	cmp	r3, #0
   16734:	bne	16cdc <__assert_fail@plt+0x4d94>
   16738:	mov	r1, r5
   1673c:	mov	r0, r9
   16740:	ldr	r2, [sp, #40]	; 0x28
   16744:	bl	1ae34 <__assert_fail@plt+0x8eec>
   16748:	ldr	sl, [sp, #32]
   1674c:	mov	r1, r8
   16750:	ldr	r3, [sp, #44]	; 0x2c
   16754:	mov	r0, sl
   16758:	add	r2, r3, #100	; 0x64
   1675c:	bl	1ae34 <__assert_fail@plt+0x8eec>
   16760:	cmp	fp, #0
   16764:	bne	166c8 <__assert_fail@plt+0x4780>
   16768:	cmp	r8, r5
   1676c:	mov	r1, sl
   16770:	movcc	r2, r8
   16774:	movcs	r2, r5
   16778:	mov	r0, r9
   1677c:	bl	11b40 <memcmp@plt>
   16780:	subs	fp, r0, #0
   16784:	bne	166c8 <__assert_fail@plt+0x4780>
   16788:	ldr	r3, [sp, #36]	; 0x24
   1678c:	cmp	r8, r5
   16790:	movls	fp, #0
   16794:	movhi	fp, #1
   16798:	cmp	r8, r5
   1679c:	rsbcs	fp, fp, #0
   167a0:	rsbcc	fp, fp, #1
   167a4:	cmp	r3, r4
   167a8:	bls	166d4 <__assert_fail@plt+0x478c>
   167ac:	add	r4, r4, r4, lsl #1
   167b0:	ldr	r0, [sp, #28]
   167b4:	lsr	r4, r4, #1
   167b8:	cmp	r3, r4
   167bc:	movcs	r4, r3
   167c0:	bl	1b670 <__assert_fail@plt+0x9728>
   167c4:	mov	r0, r4
   167c8:	bl	2216c <__assert_fail@plt+0x10224>
   167cc:	subs	r3, r0, #0
   167d0:	addeq	r9, sp, #4416	; 0x1140
   167d4:	moveq	r4, #4000	; 0xfa0
   167d8:	str	r3, [sp, #28]
   167dc:	addeq	r9, r9, #16
   167e0:	ldr	r3, [sp, #16]
   167e4:	ldrne	r9, [sp, #28]
   167e8:	cmp	r3, r7
   167ec:	bls	166e0 <__assert_fail@plt+0x4798>
   167f0:	mov	r2, r4
   167f4:	mov	r1, r7
   167f8:	mov	r0, r9
   167fc:	bl	157b4 <__assert_fail@plt+0x386c>
   16800:	ldr	r3, [sp, #24]
   16804:	add	r5, r0, #1
   16808:	cmp	r3, r6
   1680c:	bls	16ba8 <__assert_fail@plt+0x4c60>
   16810:	cmp	r4, r5
   16814:	addcs	r0, r9, r5
   16818:	subcs	r2, r4, r5
   1681c:	bcs	16828 <__assert_fail@plt+0x48e0>
   16820:	mov	r0, #0
   16824:	mov	r2, r0
   16828:	mov	r1, r6
   1682c:	bl	157b4 <__assert_fail@plt+0x386c>
   16830:	add	r8, r0, #1
   16834:	add	sl, r8, r5
   16838:	cmp	r4, r5
   1683c:	bcs	16b6c <__assert_fail@plt+0x4c24>
   16840:	ldr	r0, [sp, #28]
   16844:	ldr	r3, [sp, #48]	; 0x30
   16848:	cmp	sl, r3
   1684c:	addls	r3, sl, sl, lsl #1
   16850:	lsrls	sl, r3, #1
   16854:	bl	1b670 <__assert_fail@plt+0x9728>
   16858:	mov	r0, sl
   1685c:	bl	20f80 <__assert_fail@plt+0xf038>
   16860:	ldr	r3, [sp, #16]
   16864:	mov	r9, r0
   16868:	cmp	r3, r7
   1686c:	bhi	16afc <__assert_fail@plt+0x4bb4>
   16870:	ldr	r3, [sp, #24]
   16874:	cmp	r3, r6
   16878:	add	r3, r0, r5
   1687c:	str	r3, [sp, #32]
   16880:	bhi	16b48 <__assert_fail@plt+0x4c00>
   16884:	ldr	r3, [sp, #16]
   16888:	cmp	r3, r7
   1688c:	bhi	16ad0 <__assert_fail@plt+0x4b88>
   16890:	add	r6, sp, #52	; 0x34
   16894:	mov	r2, r9
   16898:	str	r8, [sp, #16]
   1689c:	mov	r3, fp
   168a0:	ldm	r6, {r6, sl, fp}
   168a4:	str	r2, [sp, #24]
   168a8:	ldr	r7, [sp, #64]	; 0x40
   168ac:	str	r2, [sp, #28]
   168b0:	ldr	r8, [sp, #68]	; 0x44
   168b4:	ldr	r4, [sp, #72]	; 0x48
   168b8:	ldr	r9, [sp, #76]	; 0x4c
   168bc:	str	r3, [sp, #52]	; 0x34
   168c0:	mov	r1, r5
   168c4:	ldr	r0, [sp, #24]
   168c8:	ldr	r3, [sp, #44]	; 0x2c
   168cc:	ldr	r2, [sp, #40]	; 0x28
   168d0:	add	r3, r3, #100	; 0x64
   168d4:	str	r3, [sp, #36]	; 0x24
   168d8:	bl	1ae34 <__assert_fail@plt+0x8eec>
   168dc:	add	r2, sp, #104	; 0x68
   168e0:	add	r1, sp, #88	; 0x58
   168e4:	ldr	r0, [sp, #40]	; 0x28
   168e8:	str	r2, [sp, #40]	; 0x28
   168ec:	bl	1ad78 <__assert_fail@plt+0x8e30>
   168f0:	ldr	r1, [sp, #16]
   168f4:	ldr	r0, [sp, #32]
   168f8:	ldr	r2, [sp, #36]	; 0x24
   168fc:	bl	1ae34 <__assert_fail@plt+0x8eec>
   16900:	ldrd	r0, [sp, #36]	; 0x24
   16904:	bl	1ad78 <__assert_fail@plt+0x8e30>
   16908:	add	r0, sp, #88	; 0x58
   1690c:	mov	r2, #16
   16910:	ldr	r1, [sp, #40]	; 0x28
   16914:	bl	11b40 <memcmp@plt>
   16918:	cmp	r0, #0
   1691c:	ldr	r3, [sp, #52]	; 0x34
   16920:	movne	r3, r0
   16924:	beq	16be8 <__assert_fail@plt+0x4ca0>
   16928:	ldr	r0, [sp, #28]
   1692c:	str	r3, [sp, #16]
   16930:	bl	1b670 <__assert_fail@plt+0x9728>
   16934:	ldr	r3, [sp, #16]
   16938:	b	161f4 <__assert_fail@plt+0x42ac>
   1693c:	subs	r3, r3, fp
   16940:	mvnne	r3, #0
   16944:	b	161f4 <__assert_fail@plt+0x42ac>
   16948:	cmp	r1, fp
   1694c:	cmphi	r0, r6
   16950:	bls	16100 <__assert_fail@plt+0x41b8>
   16954:	ldrb	r3, [r6]
   16958:	ldrb	r2, [fp]
   1695c:	subs	r3, r3, r2
   16960:	bne	16120 <__assert_fail@plt+0x41d8>
   16964:	add	fp, fp, #1
   16968:	add	r6, r6, #1
   1696c:	cmp	r6, r0
   16970:	bcs	16984 <__assert_fail@plt+0x4a3c>
   16974:	ldrb	r3, [r6]
   16978:	ldrb	r3, [r5, r3]
   1697c:	cmp	r3, #0
   16980:	bne	16968 <__assert_fail@plt+0x4a20>
   16984:	cmp	fp, r1
   16988:	bcs	16100 <__assert_fail@plt+0x41b8>
   1698c:	ldrb	r3, [fp]
   16990:	ldrb	r3, [r5, r3]
   16994:	cmp	r3, #0
   16998:	addne	r3, fp, #1
   1699c:	bne	169b8 <__assert_fail@plt+0x4a70>
   169a0:	b	16948 <__assert_fail@plt+0x4a00>
   169a4:	ldrb	r2, [r3]
   169a8:	add	r3, r3, #1
   169ac:	ldrb	r2, [r5, r2]
   169b0:	cmp	r2, #0
   169b4:	beq	16948 <__assert_fail@plt+0x4a00>
   169b8:	cmp	r1, r3
   169bc:	mov	fp, r3
   169c0:	bne	169a4 <__assert_fail@plt+0x4a5c>
   169c4:	b	16100 <__assert_fail@plt+0x41b8>
   169c8:	cmp	r8, #0
   169cc:	beq	1659c <__assert_fail@plt+0x4654>
   169d0:	add	r3, r8, #1
   169d4:	mov	r2, fp
   169d8:	add	r1, r7, #1
   169dc:	mov	r0, r6
   169e0:	bl	2159c <__assert_fail@plt+0xf654>
   169e4:	mov	r3, r0
   169e8:	b	161f4 <__assert_fail@plt+0x42ac>
   169ec:	add	r3, sp, #276	; 0x114
   169f0:	add	r5, sp, #120	; 0x78
   169f4:	mov	r2, r5
   169f8:	mov	r1, r7
   169fc:	mov	r0, r6
   16a00:	str	r3, [sp, #16]
   16a04:	bl	1ae34 <__assert_fail@plt+0x8eec>
   16a08:	mov	r0, r5
   16a0c:	add	r1, sp, #88	; 0x58
   16a10:	bl	1ad78 <__assert_fail@plt+0x8e30>
   16a14:	add	r5, sp, #104	; 0x68
   16a18:	mov	r1, r8
   16a1c:	ldr	r2, [sp, #16]
   16a20:	mov	r0, fp
   16a24:	bl	1ae34 <__assert_fail@plt+0x8eec>
   16a28:	mov	r1, r5
   16a2c:	ldr	r0, [sp, #16]
   16a30:	bl	1ad78 <__assert_fail@plt+0x8e30>
   16a34:	mov	r1, r5
   16a38:	add	r0, sp, #88	; 0x58
   16a3c:	mov	r2, #16
   16a40:	bl	11b40 <memcmp@plt>
   16a44:	subs	r3, r0, #0
   16a48:	bne	16bcc <__assert_fail@plt+0x4c84>
   16a4c:	mov	r5, r7
   16a50:	str	r8, [sp, #16]
   16a54:	str	r6, [sp, #24]
   16a58:	str	r3, [sp, #28]
   16a5c:	str	fp, [sp, #32]
   16a60:	ldr	r2, [sp, #16]
   16a64:	ldr	r0, [sp, #24]
   16a68:	ldr	r1, [sp, #32]
   16a6c:	cmp	r5, r2
   16a70:	movcc	r2, r5
   16a74:	bl	11b40 <memcmp@plt>
   16a78:	subs	r3, r0, #0
   16a7c:	bne	16928 <__assert_fail@plt+0x49e0>
   16a80:	ldr	r2, [sp, #16]
   16a84:	cmp	r5, r2
   16a88:	movcs	r3, #0
   16a8c:	movcc	r3, #1
   16a90:	cmp	r5, r2
   16a94:	rsbls	r3, r3, #0
   16a98:	rsbhi	r3, r3, #1
   16a9c:	b	16928 <__assert_fail@plt+0x49e0>
   16aa0:	cmp	r1, fp
   16aa4:	cmphi	r0, r6
   16aa8:	bls	16100 <__assert_fail@plt+0x41b8>
   16aac:	ldrb	r3, [r6]
   16ab0:	ldrb	ip, [fp]
   16ab4:	ldrb	r3, [r2, r3]
   16ab8:	ldrb	ip, [r2, ip]
   16abc:	subs	r3, r3, ip
   16ac0:	bne	16120 <__assert_fail@plt+0x41d8>
   16ac4:	add	fp, fp, #1
   16ac8:	add	r6, r6, #1
   16acc:	b	160a8 <__assert_fail@plt+0x4160>
   16ad0:	mov	r0, r7
   16ad4:	mov	r4, sl
   16ad8:	bl	11d50 <strlen@plt>
   16adc:	add	r0, r0, #1
   16ae0:	str	r9, [sp, #28]
   16ae4:	add	r7, r7, r0
   16ae8:	b	16714 <__assert_fail@plt+0x47cc>
   16aec:	mov	r2, r4
   16af0:	mov	r0, r9
   16af4:	mov	r5, #0
   16af8:	b	16828 <__assert_fail@plt+0x48e0>
   16afc:	mov	r2, r5
   16b00:	mov	r1, r7
   16b04:	bl	11d68 <strxfrm@plt>
   16b08:	ldr	r3, [sp, #24]
   16b0c:	cmp	r3, r6
   16b10:	add	r3, r9, r5
   16b14:	str	r3, [sp, #32]
   16b18:	bls	16884 <__assert_fail@plt+0x493c>
   16b1c:	mov	r2, r8
   16b20:	mov	r1, r6
   16b24:	ldr	r0, [sp, #32]
   16b28:	bl	11d68 <strxfrm@plt>
   16b2c:	mov	r0, r7
   16b30:	str	r9, [sp, #28]
   16b34:	mov	r4, sl
   16b38:	bl	11d50 <strlen@plt>
   16b3c:	add	r0, r0, #1
   16b40:	add	r7, r7, r0
   16b44:	b	16704 <__assert_fail@plt+0x47bc>
   16b48:	mov	r2, r8
   16b4c:	mov	r1, r6
   16b50:	mov	r0, r3
   16b54:	mov	r4, sl
   16b58:	bl	11d68 <strxfrm@plt>
   16b5c:	str	r9, [sp, #28]
   16b60:	b	16704 <__assert_fail@plt+0x47bc>
   16b64:	mov	r2, r3
   16b68:	b	16138 <__assert_fail@plt+0x41f0>
   16b6c:	cmp	r4, sl
   16b70:	bcc	16840 <__assert_fail@plt+0x48f8>
   16b74:	ldr	r3, [sp, #16]
   16b78:	cmp	r3, r7
   16b7c:	add	r3, r9, r5
   16b80:	str	r3, [sp, #32]
   16b84:	bls	166f8 <__assert_fail@plt+0x47b0>
   16b88:	mov	r0, r7
   16b8c:	bl	11d50 <strlen@plt>
   16b90:	ldr	r3, [sp, #24]
   16b94:	add	r0, r0, #1
   16b98:	add	r7, r7, r0
   16b9c:	cmp	r3, r6
   16ba0:	bls	16714 <__assert_fail@plt+0x47cc>
   16ba4:	b	16704 <__assert_fail@plt+0x47bc>
   16ba8:	mov	sl, r5
   16bac:	mov	r8, #0
   16bb0:	b	16838 <__assert_fail@plt+0x48f0>
   16bb4:	cmp	r7, #0
   16bb8:	bne	16c50 <__assert_fail@plt+0x4d08>
   16bbc:	adds	r3, r8, #0
   16bc0:	movne	r3, #1
   16bc4:	rsb	r3, r3, #0
   16bc8:	b	1620c <__assert_fail@plt+0x42c4>
   16bcc:	ldr	r2, [sp, #24]
   16bd0:	str	r3, [sp, #16]
   16bd4:	str	r2, [sp, #28]
   16bd8:	ldr	r0, [sp, #28]
   16bdc:	bl	1b670 <__assert_fail@plt+0x9728>
   16be0:	ldr	r3, [sp, #16]
   16be4:	b	161f4 <__assert_fail@plt+0x42ac>
   16be8:	cmp	r3, #0
   16bec:	beq	16a60 <__assert_fail@plt+0x4b18>
   16bf0:	ldr	r0, [sp, #28]
   16bf4:	str	r3, [sp, #16]
   16bf8:	bl	1b670 <__assert_fail@plt+0x9728>
   16bfc:	ldr	r3, [sp, #16]
   16c00:	b	161f4 <__assert_fail@plt+0x42ac>
   16c04:	add	r3, sp, #176	; 0xb0
   16c08:	mov	r1, r5
   16c0c:	mov	r0, r6
   16c10:	str	r3, [sp, #44]	; 0x2c
   16c14:	bl	11b1c <strtold@plt>
   16c18:	mov	r1, r5
   16c1c:	ldr	r5, [sp, #44]	; 0x2c
   16c20:	mov	r0, fp
   16c24:	vstr	d0, [r5, #-56]	; 0xffffffc8
   16c28:	bl	11b1c <strtold@plt>
   16c2c:	add	r3, sp, #4416	; 0x1140
   16c30:	sub	r0, r5, #56	; 0x38
   16c34:	add	r3, r3, #16
   16c38:	mov	r2, #8
   16c3c:	mov	r1, r3
   16c40:	vstr	d0, [r3]
   16c44:	bl	11b40 <memcmp@plt>
   16c48:	mov	r3, r0
   16c4c:	b	161f4 <__assert_fail@plt+0x42ac>
   16c50:	cmp	r8, #0
   16c54:	beq	16cd0 <__assert_fail@plt+0x4d88>
   16c58:	cmp	r2, #0
   16c5c:	bne	16cac <__assert_fail@plt+0x4d64>
   16c60:	cmp	r7, r8
   16c64:	mov	r1, fp
   16c68:	movcc	r2, r7
   16c6c:	movcs	r2, r8
   16c70:	mov	r0, r6
   16c74:	bl	11b40 <memcmp@plt>
   16c78:	subs	r3, r0, #0
   16c7c:	bne	16120 <__assert_fail@plt+0x41d8>
   16c80:	cmp	r7, r8
   16c84:	bcc	16cc4 <__assert_fail@plt+0x4d7c>
   16c88:	movne	r3, #1
   16c8c:	moveq	r3, #0
   16c90:	b	1620c <__assert_fail@plt+0x42c4>
   16c94:	ldrb	r3, [r6], #1
   16c98:	ldrb	ip, [fp], #1
   16c9c:	ldrb	r3, [r2, r3]
   16ca0:	ldrb	ip, [r2, ip]
   16ca4:	subs	r3, r3, ip
   16ca8:	bne	16120 <__assert_fail@plt+0x41d8>
   16cac:	cmp	r6, r0
   16cb0:	cmpcc	fp, r1
   16cb4:	bcc	16c94 <__assert_fail@plt+0x4d4c>
   16cb8:	b	16c80 <__assert_fail@plt+0x4d38>
   16cbc:	mvn	r3, #0
   16cc0:	b	161f4 <__assert_fail@plt+0x42ac>
   16cc4:	mvn	r3, #0
   16cc8:	mov	r2, r3
   16ccc:	b	16124 <__assert_fail@plt+0x41dc>
   16cd0:	mov	r3, #1
   16cd4:	mov	r2, r3
   16cd8:	b	16124 <__assert_fail@plt+0x41dc>
   16cdc:	add	r6, sp, #52	; 0x34
   16ce0:	mov	r3, fp
   16ce4:	str	r8, [sp, #16]
   16ce8:	str	r9, [sp, #24]
   16cec:	ldm	r6, {r6, sl, fp}
   16cf0:	ldr	r7, [sp, #64]	; 0x40
   16cf4:	ldr	r8, [sp, #68]	; 0x44
   16cf8:	ldr	r4, [sp, #72]	; 0x48
   16cfc:	ldr	r9, [sp, #76]	; 0x4c
   16d00:	b	168bc <__assert_fail@plt+0x4974>
   16d04:	andeq	r6, r3, ip, ror r7
   16d08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16d0c:	strd	r6, [sp, #8]
   16d10:	strd	r8, [sp, #16]
   16d14:	ldrb	r8, [r0, #24]
   16d18:	strd	sl, [sp, #24]
   16d1c:	str	lr, [sp, #32]
   16d20:	sub	sp, sp, #44	; 0x2c
   16d24:	cmp	r8, #0
   16d28:	bne	16ef8 <__assert_fail@plt+0x4fb0>
   16d2c:	str	r1, [sp, #16]
   16d30:	movw	r1, #25060	; 0x61e4
   16d34:	movt	r1, #3
   16d38:	ldrb	ip, [r1, #100]	; 0x64
   16d3c:	mov	r3, r0
   16d40:	movw	r0, #25312	; 0x62e0
   16d44:	movt	r0, #3
   16d48:	str	r2, [sp, #28]
   16d4c:	str	r1, [sp, #24]
   16d50:	ldr	r4, [r3, #4]
   16d54:	str	ip, [sp]
   16d58:	ldr	r2, [r3, #16]
   16d5c:	str	r3, [sp, #12]
   16d60:	str	r0, [sp, #20]
   16d64:	ldr	ip, [r3, #20]
   16d68:	cmp	r4, r2
   16d6c:	ldr	r5, [r3]
   16d70:	ldr	r7, [r1, #104]	; 0x68
   16d74:	str	ip, [sp, #4]
   16d78:	ldr	r6, [r0, #1172]	; 0x494
   16d7c:	bne	16f18 <__assert_fail@plt+0x4fd0>
   16d80:	ldr	r2, [r3, #8]
   16d84:	sub	r7, r7, #18
   16d88:	ldr	r1, [sp, #4]
   16d8c:	ldr	r3, [sp, #12]
   16d90:	add	r1, r1, #1
   16d94:	ldr	r3, [r3, #12]
   16d98:	str	r1, [sp, #8]
   16d9c:	ldr	r1, [sp, #4]
   16da0:	add	r3, r5, r3
   16da4:	add	r4, r5, r4
   16da8:	sub	sl, r3, r2, lsl #4
   16dac:	cmp	r2, #0
   16db0:	mls	r3, r2, r1, r3
   16db4:	sub	r8, r3, r4
   16db8:	beq	16dc4 <__assert_fail@plt+0x4e7c>
   16dbc:	ldm	sl, {r3, r5}
   16dc0:	add	r5, r5, r3
   16dc4:	ldr	r3, [sp, #8]
   16dc8:	cmp	r8, r3
   16dcc:	bls	16f54 <__assert_fail@plt+0x500c>
   16dd0:	ldr	r2, [sp, #8]
   16dd4:	sub	r9, r8, #1
   16dd8:	mov	r1, #1
   16ddc:	mov	r0, r4
   16de0:	ldr	fp, [sp, #16]
   16de4:	udiv	r9, r9, r2
   16de8:	mov	r3, fp
   16dec:	mov	r2, r9
   16df0:	bl	11ee8 <fread_unlocked@plt>
   16df4:	cmp	r9, r0
   16df8:	sub	r8, r8, r0
   16dfc:	add	r9, r4, r0
   16e00:	beq	16e48 <__assert_fail@plt+0x4f00>
   16e04:	ldr	r3, [fp]
   16e08:	tst	r3, #32
   16e0c:	bne	17008 <__assert_fail@plt+0x50c0>
   16e10:	tst	r3, #16
   16e14:	beq	16e48 <__assert_fail@plt+0x4f00>
   16e18:	ldr	r2, [sp, #12]
   16e1c:	mov	r1, #1
   16e20:	ldr	r3, [r2]
   16e24:	strb	r1, [r2, #24]
   16e28:	cmp	r3, r9
   16e2c:	beq	16ef8 <__assert_fail@plt+0x4fb0>
   16e30:	cmp	r5, r9
   16e34:	beq	16e48 <__assert_fail@plt+0x4f00>
   16e38:	ldrb	r3, [r9, #-1]
   16e3c:	ldr	r2, [sp]
   16e40:	cmp	r3, r2
   16e44:	strbne	r2, [r9], #1
   16e48:	mov	fp, sl
   16e4c:	b	16e6c <__assert_fail@plt+0x4f24>
   16e50:	mov	r1, sl
   16e54:	mov	r0, r5
   16e58:	mov	r2, r6
   16e5c:	bl	15c94 <__assert_fail@plt+0x3d4c>
   16e60:	str	r0, [fp, #-8]
   16e64:	sub	fp, fp, #16
   16e68:	mov	r5, r4
   16e6c:	sub	r2, r9, r4
   16e70:	mov	r0, r4
   16e74:	ldr	r1, [sp]
   16e78:	bl	11de0 <memchr@plt>
   16e7c:	cmp	r0, #0
   16e80:	mov	sl, fp
   16e84:	beq	16f40 <__assert_fail@plt+0x4ff8>
   16e88:	ldr	r3, [sp, #4]
   16e8c:	mov	r4, r0
   16e90:	sub	r8, r8, r3
   16e94:	mov	r3, #0
   16e98:	strb	r3, [r4], #1
   16e9c:	sub	sl, r4, r5
   16ea0:	cmp	r7, sl
   16ea4:	str	r5, [fp, #-16]
   16ea8:	movcc	r7, sl
   16eac:	cmp	r6, #0
   16eb0:	str	sl, [fp, #-12]
   16eb4:	beq	16e64 <__assert_fail@plt+0x4f1c>
   16eb8:	ldr	r2, [r6, #8]
   16ebc:	cmn	r2, #1
   16ec0:	beq	16ed4 <__assert_fail@plt+0x4f8c>
   16ec4:	mov	r2, r6
   16ec8:	mov	r1, sl
   16ecc:	mov	r0, r5
   16ed0:	bl	15e0c <__assert_fail@plt+0x3ec4>
   16ed4:	ldr	r2, [r6]
   16ed8:	str	r0, [fp, #-4]
   16edc:	cmn	r2, #1
   16ee0:	bne	16e50 <__assert_fail@plt+0x4f08>
   16ee4:	ldrb	r2, [r6, #24]
   16ee8:	cmp	r2, #0
   16eec:	bne	16fb8 <__assert_fail@plt+0x5070>
   16ef0:	str	r5, [fp, #-8]
   16ef4:	b	16e64 <__assert_fail@plt+0x4f1c>
   16ef8:	mov	r0, #0
   16efc:	add	sp, sp, #44	; 0x2c
   16f00:	ldrd	r4, [sp]
   16f04:	ldrd	r6, [sp, #8]
   16f08:	ldrd	r8, [sp, #16]
   16f0c:	ldrd	sl, [sp, #24]
   16f10:	add	sp, sp, #32
   16f14:	pop	{pc}		; (ldr pc, [sp], #4)
   16f18:	sub	r4, r4, r2
   16f1c:	mov	r0, r5
   16f20:	add	r1, r5, r4
   16f24:	bl	11a80 <memmove@plt>
   16f28:	ldr	r3, [sp, #12]
   16f2c:	mov	r2, r8
   16f30:	ldr	r5, [r3]
   16f34:	ldr	r4, [r3, #16]
   16f38:	stmib	r3, {r4, r8}
   16f3c:	b	16d84 <__assert_fail@plt+0x4e3c>
   16f40:	ldr	r3, [sp, #12]
   16f44:	mov	r4, r9
   16f48:	ldrb	r3, [r3, #24]
   16f4c:	cmp	r3, #0
   16f50:	beq	16dc4 <__assert_fail@plt+0x4e7c>
   16f54:	ldr	ip, [sp, #12]
   16f58:	ldr	r0, [ip]
   16f5c:	ldr	r2, [ip, #12]
   16f60:	sub	r1, r4, r0
   16f64:	add	r3, r0, r2
   16f68:	sub	r3, r3, sl
   16f6c:	asr	r3, r3, #4
   16f70:	cmp	r3, #0
   16f74:	stmib	ip, {r1, r3}
   16f78:	bne	16fec <__assert_fail@plt+0x50a4>
   16f7c:	lsr	r3, r2, #4
   16f80:	add	r1, sp, #36	; 0x24
   16f84:	mov	r2, #16
   16f88:	str	r3, [sp, #36]	; 0x24
   16f8c:	bl	21108 <__assert_fail@plt+0xf1c0>
   16f90:	ldr	r1, [sp, #12]
   16f94:	mov	r5, r0
   16f98:	ldr	r3, [sp, #36]	; 0x24
   16f9c:	mov	r2, r1
   16fa0:	ldr	r4, [r1, #4]
   16fa4:	lsl	r3, r3, #4
   16fa8:	str	r0, [r2]
   16fac:	ldr	r2, [r1, #8]
   16fb0:	str	r3, [r1, #12]
   16fb4:	b	16d9c <__assert_fail@plt+0x4e54>
   16fb8:	ldrb	r2, [r5]
   16fbc:	ldr	r3, [sp, #20]
   16fc0:	add	r2, r3, r2
   16fc4:	ldrb	r2, [r2, #8]
   16fc8:	cmp	r2, #0
   16fcc:	beq	16ef0 <__assert_fail@plt+0x4fa8>
   16fd0:	mov	r2, r3
   16fd4:	ldrb	r3, [r5, #1]!
   16fd8:	add	r3, r2, r3
   16fdc:	ldrb	r3, [r3, #8]
   16fe0:	cmp	r3, #0
   16fe4:	bne	16fd4 <__assert_fail@plt+0x508c>
   16fe8:	b	16ef0 <__assert_fail@plt+0x4fa8>
   16fec:	ldr	r3, [sp, #24]
   16ff0:	sub	r4, r4, r5
   16ff4:	add	r7, r7, #18
   16ff8:	mov	r0, #1
   16ffc:	str	r4, [ip, #16]
   17000:	str	r7, [r3, #104]	; 0x68
   17004:	b	16efc <__assert_fail@plt+0x4fb4>
   17008:	movw	r1, #14280	; 0x37c8
   1700c:	movt	r1, #2
   17010:	mov	r2, #5
   17014:	mov	r0, #0
   17018:	bl	11b58 <dcgettext@plt>
   1701c:	ldr	r1, [sp, #28]
   17020:	bl	155b0 <__assert_fail@plt+0x3668>
   17024:	ldr	r2, [r0, #40]	; 0x28
   17028:	ldr	r3, [r1, #40]	; 0x28
   1702c:	cmp	r2, r3
   17030:	beq	17040 <__assert_fail@plt+0x50f8>
   17034:	movcc	r0, #1
   17038:	movcs	r0, #0
   1703c:	bx	lr
   17040:	ldr	r3, [r0, #20]
   17044:	ldr	r2, [r1, #20]
   17048:	ldr	ip, [r0, #24]
   1704c:	ldr	r0, [r1, #24]
   17050:	add	r3, r3, ip
   17054:	add	r0, r2, r0
   17058:	cmp	r3, r0
   1705c:	movcs	r0, #0
   17060:	movcc	r0, #1
   17064:	bx	lr
   17068:	add	r1, r0, #4
   1706c:	mov	r2, #0
   17070:	mov	r0, #2
   17074:	b	11c60 <pthread_sigmask@plt>
   17078:	strd	r4, [sp, #-12]!
   1707c:	movw	r5, #25312	; 0x62e0
   17080:	movt	r5, #3
   17084:	ldr	r3, [r5, #1032]	; 0x408
   17088:	str	lr, [sp, #8]
   1708c:	sub	sp, sp, #140	; 0x8c
   17090:	cmp	r3, #0
   17094:	beq	170e8 <__assert_fail@plt+0x51a0>
   17098:	add	r2, sp, #8
   1709c:	ldr	r1, [pc, #100]	; 17108 <__assert_fail@plt+0x51c0>
   170a0:	mov	r0, #0
   170a4:	bl	11c60 <pthread_sigmask@plt>
   170a8:	ldr	r4, [r5, #1032]	; 0x408
   170ac:	clz	r0, r0
   170b0:	lsr	r0, r0, #5
   170b4:	strb	r0, [sp, #4]
   170b8:	cmp	r4, #0
   170bc:	beq	170d8 <__assert_fail@plt+0x5190>
   170c0:	add	r0, r4, #9
   170c4:	bl	11b7c <unlink@plt>
   170c8:	ldr	r4, [r4]
   170cc:	cmp	r4, #0
   170d0:	bne	170c0 <__assert_fail@plt+0x5178>
   170d4:	ldrb	r0, [sp, #4]
   170d8:	mov	r3, #0
   170dc:	cmp	r0, r3
   170e0:	str	r3, [r5, #1032]	; 0x408
   170e4:	bne	170fc <__assert_fail@plt+0x51b4>
   170e8:	bl	1a0a4 <__assert_fail@plt+0x815c>
   170ec:	add	sp, sp, #140	; 0x8c
   170f0:	ldrd	r4, [sp]
   170f4:	add	sp, sp, #8
   170f8:	pop	{pc}		; (ldr pc, [sp], #4)
   170fc:	add	r0, sp, #4
   17100:	bl	17068 <__assert_fail@plt+0x5120>
   17104:	b	170e8 <__assert_fail@plt+0x51a0>
   17108:	andeq	r6, r3, r8, lsl r8
   1710c:	movw	r3, #25312	; 0x62e0
   17110:	movt	r3, #3
   17114:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17118:	ldr	r4, [r3, #1032]	; 0x408
   1711c:	mov	r5, r0
   17120:	strd	r6, [sp, #8]
   17124:	strd	r8, [sp, #16]
   17128:	str	lr, [sp, #24]
   1712c:	sub	sp, sp, #140	; 0x8c
   17130:	add	r3, r4, #9
   17134:	cmp	r0, r3
   17138:	beq	171e8 <__assert_fail@plt+0x52a0>
   1713c:	ldr	r3, [r4]
   17140:	add	r2, r3, #9
   17144:	cmp	r2, r5
   17148:	beq	17160 <__assert_fail@plt+0x5218>
   1714c:	mov	r4, r3
   17150:	ldr	r3, [r4]
   17154:	add	r2, r3, #9
   17158:	cmp	r2, r5
   1715c:	bne	1714c <__assert_fail@plt+0x5204>
   17160:	mov	r7, r4
   17164:	mov	r4, r3
   17168:	ldrb	r3, [r4, #8]
   1716c:	cmp	r3, #1
   17170:	beq	171f8 <__assert_fail@plt+0x52b0>
   17174:	add	r2, sp, #8
   17178:	ldr	r1, [pc, #228]	; 17264 <__assert_fail@plt+0x531c>
   1717c:	mov	r0, #0
   17180:	ldr	r6, [r4]
   17184:	bl	11c60 <pthread_sigmask@plt>
   17188:	clz	r3, r0
   1718c:	mov	r0, r5
   17190:	lsr	r3, r3, #5
   17194:	strb	r3, [sp, #4]
   17198:	bl	11b7c <unlink@plt>
   1719c:	mov	r8, r0
   171a0:	bl	11d74 <__errno_location@plt>
   171a4:	ldrb	r3, [sp, #4]
   171a8:	ldr	r9, [r0]
   171ac:	str	r6, [r7]
   171b0:	cmp	r3, #0
   171b4:	bne	17258 <__assert_fail@plt+0x5310>
   171b8:	cmp	r8, #0
   171bc:	bne	17204 <__assert_fail@plt+0x52bc>
   171c0:	cmp	r6, #0
   171c4:	beq	17248 <__assert_fail@plt+0x5300>
   171c8:	mov	r0, r4
   171cc:	bl	1b670 <__assert_fail@plt+0x9728>
   171d0:	add	sp, sp, #140	; 0x8c
   171d4:	ldrd	r4, [sp]
   171d8:	ldrd	r6, [sp, #8]
   171dc:	ldrd	r8, [sp, #16]
   171e0:	add	sp, sp, #24
   171e4:	pop	{pc}		; (ldr pc, [sp], #4)
   171e8:	ldrb	r3, [r4, #8]
   171ec:	ldr	r7, [pc, #116]	; 17268 <__assert_fail@plt+0x5320>
   171f0:	cmp	r3, #1
   171f4:	bne	17174 <__assert_fail@plt+0x522c>
   171f8:	ldr	r0, [r4, #4]
   171fc:	bl	159b0 <__assert_fail@plt+0x3a68>
   17200:	b	17174 <__assert_fail@plt+0x522c>
   17204:	mov	r2, #5
   17208:	movw	r1, #14292	; 0x37d4
   1720c:	movt	r1, #2
   17210:	mov	r0, #0
   17214:	bl	11b58 <dcgettext@plt>
   17218:	mov	r8, r0
   1721c:	mov	r2, r5
   17220:	mov	r1, #3
   17224:	mov	r0, #0
   17228:	bl	1f5f4 <__assert_fail@plt+0xd6ac>
   1722c:	mov	r3, r0
   17230:	mov	r2, r8
   17234:	mov	r1, r9
   17238:	mov	r0, #0
   1723c:	bl	11c90 <error@plt>
   17240:	cmp	r6, #0
   17244:	bne	171c8 <__assert_fail@plt+0x5280>
   17248:	movw	r3, #25060	; 0x61e4
   1724c:	movt	r3, #3
   17250:	str	r7, [r3, #108]	; 0x6c
   17254:	b	171c8 <__assert_fail@plt+0x5280>
   17258:	add	r0, sp, #4
   1725c:	bl	17068 <__assert_fail@plt+0x5120>
   17260:	b	171b8 <__assert_fail@plt+0x5270>
   17264:	andeq	r6, r3, r8, lsl r8
   17268:	andeq	r6, r3, r8, ror #13
   1726c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17270:	mov	r5, r1
   17274:	mov	r1, #524288	; 0x80000
   17278:	strd	r6, [sp, #8]
   1727c:	strd	r8, [sp, #16]
   17280:	strd	sl, [sp, #24]
   17284:	str	lr, [sp, #32]
   17288:	vpush	{d8}
   1728c:	sub	sp, sp, #148	; 0x94
   17290:	str	r0, [sp, #4]
   17294:	bl	1d2b8 <__assert_fail@plt+0xb370>
   17298:	cmp	r0, #0
   1729c:	blt	17410 <__assert_fail@plt+0x54c8>
   172a0:	movw	r3, #25060	; 0x61e4
   172a4:	movt	r3, #3
   172a8:	movw	r4, #25312	; 0x62e0
   172ac:	movt	r4, #3
   172b0:	ldr	r3, [r3, #112]	; 0x70
   172b4:	ldr	r2, [r4, #1168]	; 0x490
   172b8:	add	r3, r3, #1
   172bc:	cmp	r3, r2
   172c0:	bcc	173e8 <__assert_fail@plt+0x54a0>
   172c4:	bl	11d74 <__errno_location@plt>
   172c8:	sub	r5, r5, #1
   172cc:	vldr	d8, [pc, #324]	; 17418 <__assert_fail@plt+0x54d0>
   172d0:	mov	r6, r0
   172d4:	mov	r8, #0
   172d8:	ldr	sl, [pc, #320]	; 17420 <__assert_fail@plt+0x54d8>
   172dc:	b	17330 <__assert_fail@plt+0x53e8>
   172e0:	cmp	r2, #0
   172e4:	str	r7, [r4, #1032]	; 0x408
   172e8:	bne	17370 <__assert_fail@plt+0x5428>
   172ec:	cmp	fp, #0
   172f0:	str	r9, [r6]
   172f4:	bge	1737c <__assert_fail@plt+0x5434>
   172f8:	cmp	r9, #11
   172fc:	bne	173b4 <__assert_fail@plt+0x546c>
   17300:	vmov.f64	d0, d8
   17304:	bl	21610 <__assert_fail@plt+0xf6c8>
   17308:	vadd.f64	d8, d8, d8
   1730c:	ldr	r3, [r4, #1168]	; 0x490
   17310:	mov	r0, #0
   17314:	cmp	r3, r0
   17318:	ble	17328 <__assert_fail@plt+0x53e0>
   1731c:	bl	15894 <__assert_fail@plt+0x394c>
   17320:	cmp	r0, #0
   17324:	bne	1730c <__assert_fail@plt+0x53c4>
   17328:	subs	r5, r5, #1
   1732c:	bcc	173b0 <__assert_fail@plt+0x5468>
   17330:	add	r2, sp, #16
   17334:	mov	r1, sl
   17338:	mov	r0, #0
   1733c:	bl	11c60 <pthread_sigmask@plt>
   17340:	clz	r0, r0
   17344:	ldr	r7, [r4, #1032]	; 0x408
   17348:	lsr	r0, r0, #5
   1734c:	str	r8, [r4, #1032]	; 0x408
   17350:	strb	r0, [sp, #12]
   17354:	bl	11e40 <fork@plt>
   17358:	subs	fp, r0, #0
   1735c:	ldrb	r2, [sp, #12]
   17360:	ldr	r9, [r6]
   17364:	bne	172e0 <__assert_fail@plt+0x5398>
   17368:	cmp	r2, #0
   1736c:	beq	173d0 <__assert_fail@plt+0x5488>
   17370:	add	r0, sp, #12
   17374:	bl	17068 <__assert_fail@plt+0x5120>
   17378:	b	172ec <__assert_fail@plt+0x53a4>
   1737c:	beq	173d0 <__assert_fail@plt+0x5488>
   17380:	ldr	r3, [r4, #1168]	; 0x490
   17384:	add	r3, r3, #1
   17388:	str	r3, [r4, #1168]	; 0x490
   1738c:	mov	r0, fp
   17390:	add	sp, sp, #148	; 0x94
   17394:	vpop	{d8}
   17398:	ldrd	r4, [sp]
   1739c:	ldrd	r6, [sp, #8]
   173a0:	ldrd	r8, [sp, #16]
   173a4:	ldrd	sl, [sp, #24]
   173a8:	add	sp, sp, #32
   173ac:	pop	{pc}		; (ldr pc, [sp], #4)
   173b0:	ldr	r9, [r6]
   173b4:	ldr	r4, [sp, #4]
   173b8:	ldr	r0, [r4]
   173bc:	bl	11f30 <close@plt>
   173c0:	ldr	r0, [r4, #4]
   173c4:	bl	11f30 <close@plt>
   173c8:	str	r9, [r6]
   173cc:	b	1738c <__assert_fail@plt+0x5444>
   173d0:	mov	r0, #0
   173d4:	mov	fp, r0
   173d8:	bl	11f30 <close@plt>
   173dc:	mov	r0, #1
   173e0:	bl	11f30 <close@plt>
   173e4:	b	1738c <__assert_fail@plt+0x5444>
   173e8:	mvn	r0, #0
   173ec:	bl	15894 <__assert_fail@plt+0x394c>
   173f0:	ldr	r3, [r4, #1168]	; 0x490
   173f4:	mov	r0, #0
   173f8:	cmp	r3, r0
   173fc:	ble	172c4 <__assert_fail@plt+0x537c>
   17400:	bl	15894 <__assert_fail@plt+0x394c>
   17404:	cmp	r0, #0
   17408:	beq	172c4 <__assert_fail@plt+0x537c>
   1740c:	b	173f0 <__assert_fail@plt+0x54a8>
   17410:	mvn	fp, #0
   17414:	b	1738c <__assert_fail@plt+0x5444>
   17418:	andeq	r0, r0, r0
   1741c:	svccc	0x00d00000
   17420:	andeq	r6, r3, r8, lsl r8
   17424:	movw	ip, #16120	; 0x3ef8
   17428:	movt	ip, #2
   1742c:	strd	r4, [sp, #-16]!
   17430:	str	r6, [sp, #8]
   17434:	mov	r5, r1
   17438:	mov	r4, r2
   1743c:	str	lr, [sp, #12]
   17440:	sub	sp, sp, #24
   17444:	mov	r2, #10
   17448:	add	r3, sp, #16
   1744c:	add	r1, sp, #12
   17450:	str	ip, [sp]
   17454:	mov	r6, r0
   17458:	bl	21750 <__assert_fail@plt+0xf808>
   1745c:	cmp	r0, #4
   17460:	ldrls	pc, [pc, r0, lsl #2]
   17464:	b	1749c <__assert_fail@plt+0x5554>
   17468:	andeq	r7, r1, ip, ror r4
   1746c:	muleq	r1, r4, r4
   17470:	andeq	r7, r1, ip, ror r4
   17474:	muleq	r1, r4, r4
   17478:			; <UNDEFINED> instruction: 0x000174b4
   1747c:	ldrd	r0, [sp, #16]
   17480:	mov	r3, #0
   17484:	cmp	r1, r3
   17488:	str	r0, [r5]
   1748c:	cmpeq	r0, r0
   17490:	beq	1749c <__assert_fail@plt+0x5554>
   17494:	mvn	r3, #0
   17498:	str	r3, [r5]
   1749c:	ldr	r0, [sp, #12]
   174a0:	add	sp, sp, #24
   174a4:	ldrd	r4, [sp]
   174a8:	ldr	r6, [sp, #8]
   174ac:	add	sp, sp, #12
   174b0:	pop	{pc}		; (ldr pc, [sp], #4)
   174b4:	cmp	r4, #0
   174b8:	moveq	r0, r4
   174bc:	beq	174a0 <__assert_fail@plt+0x5558>
   174c0:	mov	r2, #5
   174c4:	movw	r1, #14320	; 0x37f0
   174c8:	movt	r1, #2
   174cc:	mov	r0, #0
   174d0:	bl	11b58 <dcgettext@plt>
   174d4:	mov	r5, r0
   174d8:	mov	r1, r4
   174dc:	mov	r2, #5
   174e0:	mov	r0, #0
   174e4:	bl	11b58 <dcgettext@plt>
   174e8:	mov	r4, r0
   174ec:	mov	r0, r6
   174f0:	bl	1f7cc <__assert_fail@plt+0xd884>
   174f4:	mov	r3, r4
   174f8:	mov	r2, r5
   174fc:	str	r0, [sp]
   17500:	mov	r1, #0
   17504:	mov	r0, #2
   17508:	bl	11c90 <error@plt>
   1750c:	strd	r4, [sp, #-16]!
   17510:	mov	r5, r0
   17514:	str	r6, [sp, #8]
   17518:	str	lr, [sp, #12]
   1751c:	ldrb	r3, [r1]
   17520:	cmp	r3, #114	; 0x72
   17524:	beq	17570 <__assert_fail@plt+0x5628>
   17528:	cmp	r3, #119	; 0x77
   1752c:	bne	1763c <__assert_fail@plt+0x56f4>
   17530:	cmp	r0, #0
   17534:	beq	17550 <__assert_fail@plt+0x5608>
   17538:	mov	r2, #0
   1753c:	mov	r3, #0
   17540:	mov	r0, #1
   17544:	bl	11b28 <ftruncate64@plt>
   17548:	cmp	r0, #0
   1754c:	bne	175b4 <__assert_fail@plt+0x566c>
   17550:	movw	r3, #25300	; 0x62d4
   17554:	movt	r3, #3
   17558:	ldr	r4, [r3]
   1755c:	mov	r0, r4
   17560:	ldrd	r4, [sp]
   17564:	ldr	r6, [sp, #8]
   17568:	add	sp, sp, #12
   1756c:	pop	{pc}		; (ldr pc, [sp], #4)
   17570:	mov	r4, r1
   17574:	movw	r1, #14356	; 0x3814
   17578:	movt	r1, #2
   1757c:	bl	11a2c <strcmp@plt>
   17580:	cmp	r0, #0
   17584:	bne	17614 <__assert_fail@plt+0x56cc>
   17588:	movw	r3, #25296	; 0x62d0
   1758c:	movt	r3, #3
   17590:	ldr	r4, [r3]
   17594:	movw	r2, #25312	; 0x62e0
   17598:	movt	r2, #3
   1759c:	mov	r1, #1
   175a0:	strb	r1, [r2, #1464]	; 0x5b8
   175a4:	mov	r1, #2
   175a8:	mov	r0, r4
   175ac:	bl	1b074 <__assert_fail@plt+0x912c>
   175b0:	b	1755c <__assert_fail@plt+0x5614>
   175b4:	bl	11d74 <__errno_location@plt>
   175b8:	ldr	r4, [r0]
   175bc:	bl	15618 <__assert_fail@plt+0x36d0>
   175c0:	cmp	r0, #0
   175c4:	beq	175d8 <__assert_fail@plt+0x5690>
   175c8:	ldr	r3, [r0, #16]
   175cc:	and	r3, r3, #61440	; 0xf000
   175d0:	cmp	r3, #32768	; 0x8000
   175d4:	bne	17550 <__assert_fail@plt+0x5608>
   175d8:	mov	r2, #5
   175dc:	movw	r1, #14360	; 0x3818
   175e0:	movt	r1, #2
   175e4:	mov	r0, #0
   175e8:	bl	11b58 <dcgettext@plt>
   175ec:	mov	r6, r0
   175f0:	mov	r2, r5
   175f4:	mov	r1, #3
   175f8:	mov	r0, #0
   175fc:	bl	1f5f4 <__assert_fail@plt+0xd6ac>
   17600:	mov	r3, r0
   17604:	mov	r2, r6
   17608:	mov	r1, r4
   1760c:	mov	r0, #2
   17610:	bl	11c90 <error@plt>
   17614:	mov	r0, r5
   17618:	mov	r1, #524288	; 0x80000
   1761c:	bl	11c9c <open64@plt>
   17620:	cmp	r0, #0
   17624:	movlt	r4, #0
   17628:	blt	175a4 <__assert_fail@plt+0x565c>
   1762c:	mov	r1, r4
   17630:	bl	119fc <fdopen@plt>
   17634:	mov	r4, r0
   17638:	b	175a4 <__assert_fail@plt+0x565c>
   1763c:	movw	r1, #14384	; 0x3830
   17640:	movt	r1, #2
   17644:	ldr	r3, [pc, #12]	; 17658 <__assert_fail@plt+0x5710>
   17648:	movw	r0, #14396	; 0x383c
   1764c:	movt	r0, #2
   17650:	movw	r2, #981	; 0x3d5
   17654:	bl	11f48 <__assert_fail@plt>
   17658:	andeq	r3, r2, r0, lsl #8
   1765c:	movw	r1, #14440	; 0x3868
   17660:	movt	r1, #2
   17664:	str	r4, [sp, #-8]!
   17668:	mov	r2, #5
   1766c:	mov	r4, r0
   17670:	str	lr, [sp, #4]
   17674:	mov	r0, #0
   17678:	bl	11b58 <dcgettext@plt>
   1767c:	mov	r1, r4
   17680:	bl	155b0 <__assert_fail@plt+0x3668>
   17684:	strd	r4, [sp, #-16]!
   17688:	mov	r5, r1
   1768c:	mov	r4, r0
   17690:	str	r6, [sp, #8]
   17694:	str	lr, [sp, #12]
   17698:	bl	11dc8 <fileno@plt>
   1769c:	cmp	r0, #0
   176a0:	beq	176cc <__assert_fail@plt+0x5784>
   176a4:	cmp	r0, #1
   176a8:	beq	176e4 <__assert_fail@plt+0x579c>
   176ac:	mov	r0, r4
   176b0:	bl	1b0c4 <__assert_fail@plt+0x917c>
   176b4:	cmp	r0, #0
   176b8:	bne	17710 <__assert_fail@plt+0x57c8>
   176bc:	ldrd	r4, [sp]
   176c0:	ldr	r6, [sp, #8]
   176c4:	add	sp, sp, #12
   176c8:	pop	{pc}		; (ldr pc, [sp], #4)
   176cc:	mov	r0, r4
   176d0:	ldrd	r4, [sp]
   176d4:	ldr	r6, [sp, #8]
   176d8:	ldr	lr, [sp, #12]
   176dc:	add	sp, sp, #16
   176e0:	b	11e88 <clearerr_unlocked@plt>
   176e4:	mov	r0, r4
   176e8:	bl	11bdc <fflush_unlocked@plt>
   176ec:	cmp	r0, #0
   176f0:	movwne	r1, #14452	; 0x3874
   176f4:	movtne	r1, #2
   176f8:	beq	176bc <__assert_fail@plt+0x5774>
   176fc:	mov	r2, #5
   17700:	mov	r0, #0
   17704:	bl	11b58 <dcgettext@plt>
   17708:	mov	r1, r5
   1770c:	bl	155b0 <__assert_fail@plt+0x3668>
   17710:	movw	r1, #14468	; 0x3884
   17714:	movt	r1, #2
   17718:	b	176fc <__assert_fail@plt+0x57b4>
   1771c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17720:	mov	r4, r1
   17724:	ldr	r5, [r0]
   17728:	strd	r6, [sp, #8]
   1772c:	subs	r7, r2, #0
   17730:	strd	r8, [sp, #16]
   17734:	ldr	r8, [r0, #4]
   17738:	strd	sl, [sp, #24]
   1773c:	str	lr, [sp, #32]
   17740:	sub	sp, sp, #28
   17744:	add	r6, r5, r8
   17748:	beq	1779c <__assert_fail@plt+0x5854>
   1774c:	movw	r3, #25060	; 0x61e4
   17750:	movt	r3, #3
   17754:	ldrb	ip, [r3, #100]	; 0x64
   17758:	mov	r0, r5
   1775c:	mov	r3, r4
   17760:	mov	r2, r8
   17764:	mov	r1, #1
   17768:	strb	ip, [r6, #-1]
   1776c:	bl	11b34 <fwrite_unlocked@plt>
   17770:	cmp	r8, r0
   17774:	moveq	r3, #0
   17778:	strbeq	r3, [r6, #-1]
   1777c:	bne	17b64 <__assert_fail@plt+0x5c1c>
   17780:	add	sp, sp, #28
   17784:	ldrd	r4, [sp]
   17788:	ldrd	r6, [sp, #8]
   1778c:	ldrd	r8, [sp, #16]
   17790:	ldrd	sl, [sp, #24]
   17794:	add	sp, sp, #32
   17798:	pop	{pc}		; (ldr pc, [sp], #4)
   1779c:	movw	r3, #25312	; 0x62e0
   177a0:	movt	r3, #3
   177a4:	str	r3, [sp, #4]
   177a8:	ldrb	r3, [r3, #1465]	; 0x5b9
   177ac:	cmp	r3, #0
   177b0:	beq	1774c <__assert_fail@plt+0x5804>
   177b4:	cmp	r5, r6
   177b8:	mov	r9, r0
   177bc:	bcc	177f4 <__assert_fail@plt+0x58ac>
   177c0:	b	17848 <__assert_fail@plt+0x5900>
   177c4:	cmp	r6, r5
   177c8:	movne	r1, r3
   177cc:	beq	1780c <__assert_fail@plt+0x58c4>
   177d0:	ldr	r2, [r4, #20]
   177d4:	ldr	r0, [r4, #24]
   177d8:	cmp	r2, r0
   177dc:	addcc	r1, r2, #1
   177e0:	strcc	r1, [r4, #20]
   177e4:	strbcc	r3, [r2]
   177e8:	bcs	17818 <__assert_fail@plt+0x58d0>
   177ec:	cmp	r6, r5
   177f0:	beq	17844 <__assert_fail@plt+0x58fc>
   177f4:	ldrb	r3, [r5], #1
   177f8:	cmp	r3, #9
   177fc:	bne	177c4 <__assert_fail@plt+0x587c>
   17800:	mov	r1, #62	; 0x3e
   17804:	mov	r3, r1
   17808:	b	177d0 <__assert_fail@plt+0x5888>
   1780c:	mov	r1, #10
   17810:	mov	r3, r1
   17814:	b	177d0 <__assert_fail@plt+0x5888>
   17818:	mov	r0, r4
   1781c:	bl	11e1c <__overflow@plt>
   17820:	cmn	r0, #1
   17824:	bne	177ec <__assert_fail@plt+0x58a4>
   17828:	movw	r1, #14484	; 0x3894
   1782c:	movt	r1, #2
   17830:	mov	r2, #5
   17834:	mov	r0, #0
   17838:	bl	11b58 <dcgettext@plt>
   1783c:	mov	r1, #0
   17840:	bl	155b0 <__assert_fail@plt+0x3668>
   17844:	ldm	r9, {r5, r8}
   17848:	movw	r3, #13056	; 0x3300
   1784c:	movt	r3, #2
   17850:	sub	r6, r8, #1
   17854:	movw	fp, #25300	; 0x62d4
   17858:	movt	fp, #3
   1785c:	str	r3, [sp, #12]
   17860:	add	r6, r5, r6
   17864:	ldr	r3, [sp, #4]
   17868:	ldr	r4, [r3, #1172]	; 0x494
   1786c:	cmp	r4, #0
   17870:	beq	17aac <__assert_fail@plt+0x5b64>
   17874:	ldr	r3, [r4]
   17878:	cmn	r3, #1
   1787c:	mov	sl, r3
   17880:	ldr	r3, [r4, #8]
   17884:	beq	17b28 <__assert_fail@plt+0x5be0>
   17888:	mov	r2, r4
   1788c:	mov	r1, r8
   17890:	str	r3, [sp, #8]
   17894:	mov	r0, r5
   17898:	bl	15c94 <__assert_fail@plt+0x3d4c>
   1789c:	ldr	r3, [sp, #8]
   178a0:	mov	r7, r0
   178a4:	cmn	r3, #1
   178a8:	beq	178dc <__assert_fail@plt+0x5994>
   178ac:	mov	r1, r8
   178b0:	mov	r2, r4
   178b4:	mov	r0, r5
   178b8:	bl	15e0c <__assert_fail@plt+0x3ec4>
   178bc:	mov	r6, r0
   178c0:	ldrb	r2, [r4, #24]
   178c4:	cmn	sl, #1
   178c8:	mov	r3, sl
   178cc:	movne	r3, #0
   178d0:	moveq	r3, #1
   178d4:	tst	r3, r2
   178d8:	bne	17900 <__assert_fail@plt+0x59b8>
   178dc:	ldrb	r3, [r4, #30]
   178e0:	cmp	r3, #0
   178e4:	bne	17900 <__assert_fail@plt+0x59b8>
   178e8:	ldrb	r3, [r4, #26]
   178ec:	cmp	r3, #0
   178f0:	bne	17900 <__assert_fail@plt+0x59b8>
   178f4:	ldrh	r3, [r4, #28]
   178f8:	cmp	r3, #0
   178fc:	beq	179d4 <__assert_fail@plt+0x5a8c>
   17900:	mov	r3, #0
   17904:	ldrb	r8, [r6]
   17908:	strb	r3, [r6]
   1790c:	ldrb	r3, [r7]
   17910:	ldr	r2, [sp, #4]
   17914:	add	r3, r2, r3
   17918:	ldrb	r3, [r3, #8]
   1791c:	cmp	r3, #0
   17920:	beq	17938 <__assert_fail@plt+0x59f0>
   17924:	ldrb	r3, [r7, #1]!
   17928:	add	r3, r2, r3
   1792c:	ldrb	r3, [r3, #8]
   17930:	cmp	r3, #0
   17934:	bne	17924 <__assert_fail@plt+0x59dc>
   17938:	cmp	r7, r6
   1793c:	str	r7, [sp, #16]
   17940:	bhi	17aec <__assert_fail@plt+0x5ba4>
   17944:	ldrb	r3, [r4, #30]
   17948:	cmp	r3, #0
   1794c:	bne	17b38 <__assert_fail@plt+0x5bf0>
   17950:	ldrb	r3, [r4, #28]
   17954:	cmp	r3, #0
   17958:	bne	17b54 <__assert_fail@plt+0x5c0c>
   1795c:	ldrb	r3, [r4, #26]
   17960:	cmp	r3, #0
   17964:	bne	17974 <__assert_fail@plt+0x5a2c>
   17968:	ldrb	r3, [r4, #29]
   1796c:	cmp	r3, #0
   17970:	beq	17aec <__assert_fail@plt+0x5ba4>
   17974:	cmp	r7, r6
   17978:	bcs	1798c <__assert_fail@plt+0x5a44>
   1797c:	ldrb	r3, [r7]
   17980:	cmp	r3, #45	; 0x2d
   17984:	addeq	r3, r7, #1
   17988:	beq	17990 <__assert_fail@plt+0x5a48>
   1798c:	mov	r3, r7
   17990:	add	r0, sp, #20
   17994:	str	r3, [sp, #20]
   17998:	bl	14fd8 <__assert_fail@plt+0x3090>
   1799c:	cmp	r0, #47	; 0x2f
   179a0:	bls	179cc <__assert_fail@plt+0x5a84>
   179a4:	ldrb	r2, [r4, #29]
   179a8:	ldr	r3, [sp, #20]
   179ac:	cmp	r2, #0
   179b0:	beq	179c8 <__assert_fail@plt+0x5a80>
   179b4:	ldrb	r2, [r3]
   179b8:	ldr	r1, [sp, #12]
   179bc:	ldrb	r2, [r1, r2]
   179c0:	cmp	r2, #0
   179c4:	addne	r3, r3, #1
   179c8:	str	r3, [sp, #16]
   179cc:	strb	r8, [r6]
   179d0:	ldr	r6, [sp, #16]
   179d4:	movw	r8, #14500	; 0x38a4
   179d8:	movt	r8, #2
   179dc:	mov	r0, r5
   179e0:	mov	r1, r7
   179e4:	bl	15768 <__assert_fail@plt+0x3820>
   179e8:	mov	sl, r0
   179ec:	mov	r1, r6
   179f0:	mov	r0, r7
   179f4:	mov	r6, #32
   179f8:	bl	15768 <__assert_fail@plt+0x3820>
   179fc:	mov	r5, r0
   17a00:	b	17a24 <__assert_fail@plt+0x5adc>
   17a04:	ldr	r0, [fp]
   17a08:	ldr	r3, [r0, #20]
   17a0c:	ldr	r2, [r0, #24]
   17a10:	cmp	r3, r2
   17a14:	addcc	r2, r3, #1
   17a18:	strcc	r2, [r0, #20]
   17a1c:	strbcc	r6, [r3]
   17a20:	bcs	17ab4 <__assert_fail@plt+0x5b6c>
   17a24:	subs	sl, sl, #1
   17a28:	bcs	17a04 <__assert_fail@plt+0x5abc>
   17a2c:	cmp	r5, #0
   17a30:	movne	r6, #95	; 0x5f
   17a34:	beq	17acc <__assert_fail@plt+0x5b84>
   17a38:	ldr	r0, [fp]
   17a3c:	ldr	r3, [r0, #20]
   17a40:	ldr	r2, [r0, #24]
   17a44:	cmp	r3, r2
   17a48:	addcc	r2, r3, #1
   17a4c:	strcc	r2, [r0, #20]
   17a50:	strbcc	r6, [r3]
   17a54:	bcs	17ac0 <__assert_fail@plt+0x5b78>
   17a58:	subs	r5, r5, #1
   17a5c:	bne	17a38 <__assert_fail@plt+0x5af0>
   17a60:	ldr	r0, [fp]
   17a64:	ldr	r3, [r0, #20]
   17a68:	ldr	r2, [r0, #24]
   17a6c:	cmp	r3, r2
   17a70:	addcc	r1, r3, #1
   17a74:	movcc	r2, #10
   17a78:	strcc	r1, [r0, #20]
   17a7c:	strbcc	r2, [r3]
   17a80:	bcs	17b48 <__assert_fail@plt+0x5c00>
   17a84:	cmp	r4, #0
   17a88:	beq	17780 <__assert_fail@plt+0x5838>
   17a8c:	ldr	r4, [r4, #36]	; 0x24
   17a90:	cmp	r4, #0
   17a94:	beq	17af4 <__assert_fail@plt+0x5bac>
   17a98:	ldm	r9, {r5, r8}
   17a9c:	cmp	r4, #0
   17aa0:	sub	r6, r8, #1
   17aa4:	add	r6, r5, r6
   17aa8:	bne	17874 <__assert_fail@plt+0x592c>
   17aac:	mov	r7, r5
   17ab0:	b	179d4 <__assert_fail@plt+0x5a8c>
   17ab4:	mov	r1, #32
   17ab8:	bl	11e1c <__overflow@plt>
   17abc:	b	17a24 <__assert_fail@plt+0x5adc>
   17ac0:	mov	r1, #95	; 0x5f
   17ac4:	bl	11e1c <__overflow@plt>
   17ac8:	b	17a58 <__assert_fail@plt+0x5b10>
   17acc:	mov	r1, r8
   17ad0:	mov	r0, r5
   17ad4:	mov	r2, #5
   17ad8:	bl	11b58 <dcgettext@plt>
   17adc:	mov	r1, r0
   17ae0:	mov	r0, #1
   17ae4:	bl	11db0 <__printf_chk@plt>
   17ae8:	b	17a84 <__assert_fail@plt+0x5b3c>
   17aec:	str	r6, [sp, #16]
   17af0:	b	179cc <__assert_fail@plt+0x5a84>
   17af4:	ldr	r2, [sp, #4]
   17af8:	ldrb	r3, [r2, #1466]	; 0x5ba
   17afc:	cmp	r3, #0
   17b00:	bne	17780 <__assert_fail@plt+0x5838>
   17b04:	ldrb	r3, [r2, #1467]	; 0x5bb
   17b08:	cmp	r3, #0
   17b0c:	bne	17780 <__assert_fail@plt+0x5838>
   17b10:	ldr	r7, [r9]
   17b14:	ldr	r6, [r9, #4]
   17b18:	mov	r0, r7
   17b1c:	sub	r6, r6, #1
   17b20:	add	r6, r7, r6
   17b24:	b	179e0 <__assert_fail@plt+0x5a98>
   17b28:	cmn	r3, #1
   17b2c:	mov	r7, r5
   17b30:	bne	178ac <__assert_fail@plt+0x5964>
   17b34:	b	178c0 <__assert_fail@plt+0x5978>
   17b38:	add	r1, sp, #16
   17b3c:	mov	r0, r7
   17b40:	bl	15110 <__assert_fail@plt+0x31c8>
   17b44:	b	179cc <__assert_fail@plt+0x5a84>
   17b48:	mov	r1, #10
   17b4c:	bl	11e1c <__overflow@plt>
   17b50:	b	17a84 <__assert_fail@plt+0x5b3c>
   17b54:	add	r1, sp, #16
   17b58:	mov	r0, r7
   17b5c:	bl	11b1c <strtold@plt>
   17b60:	b	179cc <__assert_fail@plt+0x5a84>
   17b64:	movw	r1, #14484	; 0x3894
   17b68:	movt	r1, #2
   17b6c:	mov	r2, #5
   17b70:	mov	r0, #0
   17b74:	bl	11b58 <dcgettext@plt>
   17b78:	mov	r1, r7
   17b7c:	bl	155b0 <__assert_fail@plt+0x3668>
   17b80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17b84:	movw	r4, #25312	; 0x62e0
   17b88:	movt	r4, #3
   17b8c:	ldr	r3, [r4, #1172]	; 0x494
   17b90:	strd	r6, [sp, #8]
   17b94:	mov	r7, r0
   17b98:	mov	r6, r1
   17b9c:	strd	r8, [sp, #16]
   17ba0:	str	sl, [sp, #24]
   17ba4:	str	lr, [sp, #28]
   17ba8:	cmp	r3, #0
   17bac:	beq	17bd4 <__assert_fail@plt+0x5c8c>
   17bb0:	bl	15fcc <__assert_fail@plt+0x4084>
   17bb4:	cmp	r0, #0
   17bb8:	bne	17c00 <__assert_fail@plt+0x5cb8>
   17bbc:	ldrb	r3, [r4, #1466]	; 0x5ba
   17bc0:	cmp	r3, #0
   17bc4:	bne	17c00 <__assert_fail@plt+0x5cb8>
   17bc8:	ldrb	r3, [r4, #1467]	; 0x5bb
   17bcc:	cmp	r3, #0
   17bd0:	bne	17c00 <__assert_fail@plt+0x5cb8>
   17bd4:	ldr	r5, [r7, #4]
   17bd8:	ldr	r9, [r6, #4]
   17bdc:	subs	sl, r5, #1
   17be0:	sub	r8, r9, #1
   17be4:	bne	17c18 <__assert_fail@plt+0x5cd0>
   17be8:	adds	r0, r8, #0
   17bec:	movne	r0, #1
   17bf0:	rsb	r0, r0, #0
   17bf4:	ldrb	r3, [r4, #1468]	; 0x5bc
   17bf8:	cmp	r3, #0
   17bfc:	rsbne	r0, r0, #0
   17c00:	ldrd	r4, [sp]
   17c04:	ldrd	r6, [sp, #8]
   17c08:	ldrd	r8, [sp, #16]
   17c0c:	ldr	sl, [sp, #24]
   17c10:	add	sp, sp, #28
   17c14:	pop	{pc}		; (ldr pc, [sp], #4)
   17c18:	cmp	r8, #0
   17c1c:	moveq	r0, #1
   17c20:	beq	17bf4 <__assert_fail@plt+0x5cac>
   17c24:	ldrb	r3, [r4, #1176]	; 0x498
   17c28:	ldr	r1, [r6]
   17c2c:	ldr	r0, [r7]
   17c30:	cmp	r3, #0
   17c34:	bne	17c68 <__assert_fail@plt+0x5d20>
   17c38:	cmp	sl, r8
   17c3c:	movcc	r2, sl
   17c40:	movcs	r2, r8
   17c44:	bl	11b40 <memcmp@plt>
   17c48:	cmp	r0, #0
   17c4c:	bne	17bf4 <__assert_fail@plt+0x5cac>
   17c50:	cmp	sl, r8
   17c54:	mvncc	r0, #0
   17c58:	bcc	17bf4 <__assert_fail@plt+0x5cac>
   17c5c:	subs	r0, r5, r9
   17c60:	movne	r0, #1
   17c64:	b	17bf4 <__assert_fail@plt+0x5cac>
   17c68:	mov	r2, r1
   17c6c:	mov	r3, r9
   17c70:	mov	r1, r5
   17c74:	bl	2159c <__assert_fail@plt+0xf654>
   17c78:	b	17bf4 <__assert_fail@plt+0x5cac>
   17c7c:	cmp	r1, #2
   17c80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17c84:	strd	r6, [sp, #8]
   17c88:	mov	r7, r0
   17c8c:	mov	r6, r2
   17c90:	strd	r8, [sp, #16]
   17c94:	mov	r8, r3
   17c98:	str	sl, [sp, #24]
   17c9c:	str	lr, [sp, #28]
   17ca0:	beq	17de8 <__assert_fail@plt+0x5ea0>
   17ca4:	lsr	r5, r1, #1
   17ca8:	cmp	r3, #0
   17cac:	mov	sl, r1
   17cb0:	lsl	r4, r5, #4
   17cb4:	sub	r9, r1, r5
   17cb8:	rsb	r4, r4, #0
   17cbc:	add	r8, r0, r4
   17cc0:	bne	17d74 <__assert_fail@plt+0x5e2c>
   17cc4:	mov	r1, r9
   17cc8:	mov	r0, r8
   17ccc:	bl	17c7c <__assert_fail@plt+0x5d34>
   17cd0:	cmp	sl, #3
   17cd4:	bhi	17e80 <__assert_fail@plt+0x5f38>
   17cd8:	ldrd	r2, [r7, #-16]
   17cdc:	mov	ip, r6
   17ce0:	mov	r4, r8
   17ce4:	ldrd	r0, [r7, #-8]
   17ce8:	strd	r2, [r6, #-16]
   17cec:	strd	r0, [r6, #-8]
   17cf0:	mov	r6, r7
   17cf4:	mov	r7, ip
   17cf8:	sub	r4, r4, #16
   17cfc:	sub	r8, r7, #16
   17d00:	b	17d24 <__assert_fail@plt+0x5ddc>
   17d04:	ldrd	r2, [r4]
   17d08:	subs	r9, r9, #1
   17d0c:	sub	r4, r4, #16
   17d10:	strd	r2, [r6, #-16]
   17d14:	ldrd	r2, [r4, #24]
   17d18:	strd	r2, [r1, #8]
   17d1c:	beq	17dac <__assert_fail@plt+0x5e64>
   17d20:	mov	r6, r1
   17d24:	mov	r1, r4
   17d28:	mov	r0, r8
   17d2c:	bl	17b80 <__assert_fail@plt+0x5c38>
   17d30:	cmp	r0, #0
   17d34:	sub	r1, r6, #16
   17d38:	bgt	17d04 <__assert_fail@plt+0x5dbc>
   17d3c:	ldrd	r2, [r8]
   17d40:	subs	r5, r5, #1
   17d44:	mov	r7, r8
   17d48:	sub	r8, r8, #16
   17d4c:	strd	r2, [r6, #-16]
   17d50:	ldrd	r2, [r8, #24]
   17d54:	strd	r2, [r1, #8]
   17d58:	bne	17d20 <__assert_fail@plt+0x5dd8>
   17d5c:	ldrd	r4, [sp]
   17d60:	ldrd	r6, [sp, #8]
   17d64:	ldrd	r8, [sp, #16]
   17d68:	ldr	sl, [sp, #24]
   17d6c:	add	sp, sp, #28
   17d70:	pop	{pc}		; (ldr pc, [sp], #4)
   17d74:	add	r4, r2, r4
   17d78:	mov	r0, r8
   17d7c:	mov	r2, r4
   17d80:	mov	r3, #1
   17d84:	mov	r1, r9
   17d88:	bl	17c7c <__assert_fail@plt+0x5d34>
   17d8c:	cmp	sl, #3
   17d90:	bls	17cf8 <__assert_fail@plt+0x5db0>
   17d94:	mov	r3, #0
   17d98:	mov	r2, r6
   17d9c:	mov	r1, r5
   17da0:	mov	r0, r7
   17da4:	bl	17c7c <__assert_fail@plt+0x5d34>
   17da8:	b	17cf8 <__assert_fail@plt+0x5db0>
   17dac:	lsl	r0, r5, #4
   17db0:	rsb	r3, r0, #0
   17db4:	sub	r3, r3, #16
   17db8:	add	r7, r7, r3
   17dbc:	add	r1, r1, r3
   17dc0:	ldrd	r2, [r7, r0]
   17dc4:	add	lr, r7, r0
   17dc8:	add	ip, r1, r0
   17dcc:	subs	r5, r5, #1
   17dd0:	strd	r2, [r1, r0]
   17dd4:	lsl	r0, r5, #4
   17dd8:	ldrd	r2, [lr, #8]
   17ddc:	strd	r2, [ip, #8]
   17de0:	bne	17dc0 <__assert_fail@plt+0x5e78>
   17de4:	b	17d5c <__assert_fail@plt+0x5e14>
   17de8:	sub	r4, r0, #32
   17dec:	sub	r5, r0, #16
   17df0:	mov	r1, r4
   17df4:	mov	r0, r5
   17df8:	bl	17b80 <__assert_fail@plt+0x5c38>
   17dfc:	cmp	r8, #0
   17e00:	bne	17e38 <__assert_fail@plt+0x5ef0>
   17e04:	cmp	r0, #0
   17e08:	ble	17d5c <__assert_fail@plt+0x5e14>
   17e0c:	ldrd	r2, [r4]
   17e10:	ldrd	r8, [r5]
   17e14:	ldrd	r0, [r5, #8]
   17e18:	strd	r2, [r5]
   17e1c:	ldrd	r2, [r4, #8]
   17e20:	strd	r8, [r6, #-16]
   17e24:	strd	r0, [r6, #-8]
   17e28:	strd	r2, [r5, #8]
   17e2c:	strd	r8, [r4]
   17e30:	strd	r0, [r4, #8]
   17e34:	b	17d5c <__assert_fail@plt+0x5e14>
   17e38:	cmp	r0, #0
   17e3c:	movle	r0, #0
   17e40:	movgt	r0, #1
   17e44:	mvn	r3, r0
   17e48:	sub	r0, r0, #2
   17e4c:	lsl	r3, r3, #4
   17e50:	lsl	r0, r0, #4
   17e54:	add	lr, r7, r3
   17e58:	ldrd	r2, [r3, r7]
   17e5c:	add	ip, r7, r0
   17e60:	ldrd	r0, [r0, r7]
   17e64:	ldrd	r4, [lr, #8]
   17e68:	strd	r2, [r6, #-16]
   17e6c:	ldrd	r2, [ip, #8]
   17e70:	strd	r0, [r6, #-32]	; 0xffffffe0
   17e74:	strd	r2, [r6, #-24]	; 0xffffffe8
   17e78:	strd	r4, [r6, #-8]
   17e7c:	b	17d5c <__assert_fail@plt+0x5e14>
   17e80:	mov	r3, #1
   17e84:	mov	r2, r6
   17e88:	mov	r0, r7
   17e8c:	mov	r1, r5
   17e90:	bl	17c7c <__assert_fail@plt+0x5d34>
   17e94:	mov	r3, r6
   17e98:	mov	r4, r8
   17e9c:	mov	r6, r7
   17ea0:	mov	r7, r3
   17ea4:	b	17cf8 <__assert_fail@plt+0x5db0>
   17ea8:	movw	r3, #25312	; 0x62e0
   17eac:	movt	r3, #3
   17eb0:	strd	r4, [sp, #-16]!
   17eb4:	ldrb	ip, [r3, #1466]	; 0x5ba
   17eb8:	mov	r5, r0
   17ebc:	str	r6, [sp, #8]
   17ec0:	mov	r6, r1
   17ec4:	str	lr, [sp, #12]
   17ec8:	sub	sp, sp, #8
   17ecc:	cmp	ip, #0
   17ed0:	beq	17f0c <__assert_fail@plt+0x5fc4>
   17ed4:	ldr	r1, [r3, #1472]	; 0x5c0
   17ed8:	cmp	r1, #0
   17edc:	beq	17f2c <__assert_fail@plt+0x5fe4>
   17ee0:	add	r4, r3, #1472	; 0x5c0
   17ee4:	str	r2, [sp, #4]
   17ee8:	mov	r1, r4
   17eec:	bl	17b80 <__assert_fail@plt+0x5c38>
   17ef0:	cmp	r0, #0
   17ef4:	ldr	r2, [sp, #4]
   17ef8:	beq	17f34 <__assert_fail@plt+0x5fec>
   17efc:	ldrd	r0, [r5]
   17f00:	strd	r0, [r4]
   17f04:	ldrd	r0, [r5, #8]
   17f08:	strd	r0, [r4, #8]
   17f0c:	mov	r1, r6
   17f10:	mov	r0, r5
   17f14:	add	sp, sp, #8
   17f18:	ldrd	r4, [sp]
   17f1c:	ldr	r6, [sp, #8]
   17f20:	ldr	lr, [sp, #12]
   17f24:	add	sp, sp, #16
   17f28:	b	1771c <__assert_fail@plt+0x57d4>
   17f2c:	add	r4, r3, #1472	; 0x5c0
   17f30:	b	17efc <__assert_fail@plt+0x5fb4>
   17f34:	add	sp, sp, #8
   17f38:	ldrd	r4, [sp]
   17f3c:	ldr	r6, [sp, #8]
   17f40:	add	sp, sp, #12
   17f44:	pop	{pc}		; (ldr pc, [sp], #4)
   17f48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17f4c:	strd	r6, [sp, #8]
   17f50:	mov	r7, r2
   17f54:	mov	r6, #0
   17f58:	strd	r8, [sp, #16]
   17f5c:	mov	r9, r0
   17f60:	movw	r8, #25312	; 0x62e0
   17f64:	movt	r8, #3
   17f68:	strd	sl, [sp, #24]
   17f6c:	str	lr, [sp, #32]
   17f70:	sub	sp, sp, #76	; 0x4c
   17f74:	str	r0, [sp, #24]
   17f78:	mov	r0, r2
   17f7c:	str	r3, [sp, #32]
   17f80:	str	r1, [sp, #36]	; 0x24
   17f84:	mov	r1, #28
   17f88:	bl	210e8 <__assert_fail@plt+0xf1a0>
   17f8c:	mov	r1, #4
   17f90:	str	r0, [sp, #4]
   17f94:	mov	r0, r7
   17f98:	str	r8, [sp, #16]
   17f9c:	bl	210e8 <__assert_fail@plt+0xf1a0>
   17fa0:	mov	r5, r0
   17fa4:	mov	r1, #4
   17fa8:	mov	r0, r7
   17fac:	bl	210e8 <__assert_fail@plt+0xf1a0>
   17fb0:	mov	r1, #4
   17fb4:	str	r0, [sp, #8]
   17fb8:	mov	r0, r7
   17fbc:	bl	210e8 <__assert_fail@plt+0xf1a0>
   17fc0:	ldr	r3, [r8, #1172]	; 0x494
   17fc4:	cmp	r7, r6
   17fc8:	mov	r4, r0
   17fcc:	str	r3, [sp, #44]	; 0x2c
   17fd0:	str	r6, [sp, #56]	; 0x38
   17fd4:	beq	18144 <__assert_fail@plt+0x61fc>
   17fd8:	mov	r3, r7
   17fdc:	movw	fp, #25060	; 0x61e4
   17fe0:	movt	fp, #3
   17fe4:	sub	r2, r9, #8
   17fe8:	str	r5, [sp, #20]
   17fec:	mov	sl, r6
   17ff0:	mov	r5, fp
   17ff4:	mov	r8, r6
   17ff8:	mov	r7, r9
   17ffc:	str	r2, [sp, #40]	; 0x28
   18000:	mov	fp, r3
   18004:	str	r0, [sp, #48]	; 0x30
   18008:	ldr	r3, [sp, #16]
   1800c:	sub	r9, sl, r6
   18010:	mov	r1, #16
   18014:	ldr	r0, [sp, #116]	; 0x74
   18018:	ldr	ip, [r5, #104]	; 0x68
   1801c:	ldr	r2, [r3, #1488]	; 0x5d0
   18020:	add	r0, r0, r8
   18024:	ldr	r3, [sp, #4]
   18028:	str	r0, [sp, #12]
   1802c:	add	r0, r7, sl
   18030:	udiv	r2, r2, fp
   18034:	str	r0, [sp, #28]
   18038:	add	r4, r3, r9, lsl #2
   1803c:	mov	r0, r4
   18040:	cmp	r2, ip
   18044:	movcc	r2, ip
   18048:	bl	156e8 <__assert_fail@plt+0x37a0>
   1804c:	ldr	r1, [sp, #116]	; 0x74
   18050:	mov	r0, r4
   18054:	ldr	r2, [r7, sl]
   18058:	ldr	r1, [r1, r8]
   1805c:	bl	16d08 <__assert_fail@plt+0x4dc0>
   18060:	cmp	r0, #0
   18064:	beq	180a8 <__assert_fail@plt+0x6160>
   18068:	ldr	r3, [sp, #4]
   1806c:	add	r6, r6, #1
   18070:	cmp	r6, fp
   18074:	ldrd	r0, [r4, #8]
   18078:	ldr	r2, [r3, r9, lsl #2]
   1807c:	ldr	r3, [sp, #20]
   18080:	add	r2, r2, r1
   18084:	sub	r1, r2, #16
   18088:	sub	r2, r2, r0, lsl #4
   1808c:	str	r1, [r3, r8]
   18090:	ldr	r3, [sp, #8]
   18094:	str	r2, [r3, r8]
   18098:	bcs	18194 <__assert_fail@plt+0x624c>
   1809c:	lsl	sl, r6, #3
   180a0:	lsl	r8, r6, #2
   180a4:	b	18008 <__assert_fail@plt+0x60c0>
   180a8:	ldr	r3, [sp, #116]	; 0x74
   180ac:	ldr	r1, [r7, sl]
   180b0:	ldr	r0, [r3, r8]
   180b4:	bl	17684 <__assert_fail@plt+0x573c>
   180b8:	ldr	r3, [sp, #36]	; 0x24
   180bc:	cmp	r3, r6
   180c0:	bhi	185d4 <__assert_fail@plt+0x668c>
   180c4:	ldr	r3, [sp, #4]
   180c8:	sub	fp, fp, #1
   180cc:	ldr	r0, [r3, r9, lsl #2]
   180d0:	bl	1b670 <__assert_fail@plt+0x9728>
   180d4:	cmp	fp, r6
   180d8:	bls	18194 <__assert_fail@plt+0x624c>
   180dc:	ldr	ip, [sp, #12]
   180e0:	mov	r2, r6
   180e4:	ldr	r4, [sp, #40]	; 0x28
   180e8:	add	r2, r2, #1
   180ec:	lsl	r3, r2, #3
   180f0:	ldr	lr, [ip, #4]
   180f4:	cmp	r2, fp
   180f8:	ldrd	r0, [r7, r3]
   180fc:	strd	r0, [r4, r3]
   18100:	str	lr, [ip], #4
   18104:	bne	180e8 <__assert_fail@plt+0x61a0>
   18108:	b	18008 <__assert_fail@plt+0x60c0>
   1810c:	ldr	r3, [sp, #16]
   18110:	ldr	r2, [sp, #20]
   18114:	ldrb	r3, [r3, #1466]	; 0x5ba
   18118:	cmp	r2, #0
   1811c:	moveq	r3, #0
   18120:	andne	r3, r3, #1
   18124:	cmp	r3, #0
   18128:	beq	18144 <__assert_fail@plt+0x61fc>
   1812c:	add	r0, sp, #56	; 0x38
   18130:	ldr	r1, [sp, #32]
   18134:	ldr	r2, [sp, #112]	; 0x70
   18138:	bl	1771c <__assert_fail@plt+0x57d4>
   1813c:	ldr	r0, [sp, #56]	; 0x38
   18140:	bl	1b670 <__assert_fail@plt+0x9728>
   18144:	ldr	r0, [sp, #32]
   18148:	ldr	r1, [sp, #112]	; 0x70
   1814c:	bl	17684 <__assert_fail@plt+0x573c>
   18150:	ldr	r0, [sp, #116]	; 0x74
   18154:	bl	1b670 <__assert_fail@plt+0x9728>
   18158:	ldr	r0, [sp, #4]
   1815c:	bl	1b670 <__assert_fail@plt+0x9728>
   18160:	mov	r0, r4
   18164:	bl	1b670 <__assert_fail@plt+0x9728>
   18168:	ldr	r0, [sp, #8]
   1816c:	bl	1b670 <__assert_fail@plt+0x9728>
   18170:	mov	r0, r5
   18174:	bl	1b670 <__assert_fail@plt+0x9728>
   18178:	add	sp, sp, #76	; 0x4c
   1817c:	ldrd	r4, [sp]
   18180:	ldrd	r6, [sp, #8]
   18184:	ldrd	r8, [sp, #16]
   18188:	ldrd	sl, [sp, #24]
   1818c:	add	sp, sp, #32
   18190:	pop	{pc}		; (ldr pc, [sp], #4)
   18194:	cmp	fp, #0
   18198:	mov	r1, fp
   1819c:	str	fp, [sp, #12]
   181a0:	ldr	r5, [sp, #20]
   181a4:	ldr	r4, [sp, #48]	; 0x30
   181a8:	beq	18144 <__assert_fail@plt+0x61fc>
   181ac:	sub	r3, r4, #4
   181b0:	mov	r2, r3
   181b4:	mov	r3, #0
   181b8:	str	r2, [sp, #28]
   181bc:	str	r3, [r2, #4]!
   181c0:	add	r3, r3, #1
   181c4:	cmp	r3, r1
   181c8:	bne	181bc <__assert_fail@plt+0x6274>
   181cc:	ldr	r3, [sp, #12]
   181d0:	cmp	r3, #1
   181d4:	beq	18228 <__assert_fail@plt+0x62e0>
   181d8:	mov	r6, #1
   181dc:	lsl	r7, r6, #2
   181e0:	sub	r8, r6, #-1073741823	; 0xc0000001
   181e4:	add	r6, r6, #1
   181e8:	ldr	r2, [r4, r8, lsl #2]
   181ec:	ldr	r3, [r4, r7]
   181f0:	ldr	r0, [r5, r2, lsl #2]
   181f4:	ldr	r1, [r5, r3, lsl #2]
   181f8:	bl	17b80 <__assert_fail@plt+0x5c38>
   181fc:	cmp	r0, #0
   18200:	ble	1821c <__assert_fail@plt+0x62d4>
   18204:	ldr	r3, [r4, r8, lsl #2]
   18208:	mov	r6, #1
   1820c:	ldr	r2, [r4, r7]
   18210:	str	r2, [r4, r8, lsl #2]
   18214:	str	r3, [r4, r7]
   18218:	b	181dc <__assert_fail@plt+0x6294>
   1821c:	ldr	r3, [sp, #12]
   18220:	cmp	r6, r3
   18224:	bcc	181dc <__assert_fail@plt+0x6294>
   18228:	mov	r3, #0
   1822c:	str	r3, [sp, #20]
   18230:	str	r3, [sp, #40]	; 0x28
   18234:	ldr	r3, [sp, #16]
   18238:	ldr	r2, [r4]
   1823c:	ldrb	r1, [r3, #1466]	; 0x5ba
   18240:	ldr	r6, [r5, r2, lsl #2]
   18244:	cmp	r1, #0
   18248:	beq	18388 <__assert_fail@plt+0x6440>
   1824c:	ldr	r3, [sp, #20]
   18250:	cmp	r3, #0
   18254:	beq	183ac <__assert_fail@plt+0x6464>
   18258:	mov	r1, r6
   1825c:	mov	r0, r3
   18260:	bl	17b80 <__assert_fail@plt+0x5c38>
   18264:	cmp	r0, #0
   18268:	bne	1839c <__assert_fail@plt+0x6454>
   1826c:	ldr	r8, [r4]
   18270:	ldr	r3, [sp, #8]
   18274:	lsl	r9, r8, #2
   18278:	ldr	r2, [r3, r8, lsl #2]
   1827c:	cmp	r2, r6
   18280:	subcc	r6, r6, #16
   18284:	strcc	r6, [r5, r8, lsl #2]
   18288:	bcc	182ec <__assert_fail@plt+0x63a4>
   1828c:	ldr	r3, [sp, #24]
   18290:	rsb	r0, r8, r8, lsl #3
   18294:	ldr	r2, [r3, r8, lsl #3]
   18298:	ldr	r3, [sp, #4]
   1829c:	add	r0, r3, r0, lsl #2
   182a0:	ldr	r3, [sp, #116]	; 0x74
   182a4:	ldr	r1, [r3, r8, lsl #2]
   182a8:	bl	16d08 <__assert_fail@plt+0x4dc0>
   182ac:	cmp	r0, #0
   182b0:	beq	18410 <__assert_fail@plt+0x64c8>
   182b4:	ldr	r8, [r4]
   182b8:	ldr	r3, [sp, #4]
   182bc:	rsb	r2, r8, r8, lsl #3
   182c0:	lsl	r9, r8, #2
   182c4:	add	r1, r3, r2, lsl #2
   182c8:	ldr	r2, [r3, r2, lsl #2]
   182cc:	ldr	r0, [r1, #8]
   182d0:	ldr	ip, [r1, #12]
   182d4:	ldr	r3, [sp, #8]
   182d8:	add	r2, r2, ip
   182dc:	sub	r1, r2, #16
   182e0:	sub	r2, r2, r0, lsl #4
   182e4:	str	r1, [r5, r8, lsl #2]
   182e8:	str	r2, [r3, r8, lsl #2]
   182ec:	ldr	fp, [sp, #12]
   182f0:	cmp	fp, #1
   182f4:	beq	18558 <__assert_fail@plt+0x6610>
   182f8:	mov	r6, #1
   182fc:	add	r9, r5, r9
   18300:	mov	r7, r6
   18304:	b	1832c <__assert_fail@plt+0x63e4>
   18308:	bne	18318 <__assert_fail@plt+0x63d0>
   1830c:	ldr	r3, [r4, sl]
   18310:	cmp	r3, r8
   18314:	bhi	18348 <__assert_fail@plt+0x6400>
   18318:	add	r7, r6, #1
   1831c:	add	r6, r7, fp
   18320:	cmp	r7, fp
   18324:	lsr	r6, r6, #1
   18328:	bcs	1835c <__assert_fail@plt+0x6414>
   1832c:	ldr	r3, [r4, r6, lsl #2]
   18330:	lsl	sl, r6, #2
   18334:	ldr	r0, [r9]
   18338:	ldr	r1, [r5, r3, lsl #2]
   1833c:	bl	17b80 <__assert_fail@plt+0x5c38>
   18340:	cmp	r0, #0
   18344:	bge	18308 <__assert_fail@plt+0x63c0>
   18348:	mov	fp, r6
   1834c:	add	r6, r7, fp
   18350:	cmp	r7, fp
   18354:	lsr	r6, r6, #1
   18358:	bcc	1832c <__assert_fail@plt+0x63e4>
   1835c:	subs	r0, r7, #1
   18360:	beq	18380 <__assert_fail@plt+0x6438>
   18364:	ldr	r3, [sp, #28]
   18368:	mov	r2, r4
   1836c:	add	r7, r3, r7, lsl #2
   18370:	ldr	r3, [r2, #4]
   18374:	str	r3, [r2], #4
   18378:	cmp	r2, r7
   1837c:	bne	18370 <__assert_fail@plt+0x6428>
   18380:	str	r8, [r4, r0, lsl #2]
   18384:	b	18234 <__assert_fail@plt+0x62ec>
   18388:	mov	r0, r6
   1838c:	ldr	r1, [sp, #32]
   18390:	ldr	r2, [sp, #112]	; 0x70
   18394:	bl	1771c <__assert_fail@plt+0x57d4>
   18398:	b	1826c <__assert_fail@plt+0x6324>
   1839c:	add	r0, sp, #56	; 0x38
   183a0:	ldr	r1, [sp, #32]
   183a4:	ldr	r2, [sp, #112]	; 0x70
   183a8:	bl	1771c <__assert_fail@plt+0x57d4>
   183ac:	ldr	r7, [r6, #4]
   183b0:	ldr	r3, [sp, #40]	; 0x28
   183b4:	ldr	r0, [sp, #56]	; 0x38
   183b8:	cmp	r7, r3
   183bc:	bhi	1856c <__assert_fail@plt+0x6624>
   183c0:	mov	r2, r7
   183c4:	ldr	r1, [r6]
   183c8:	str	r7, [sp, #60]	; 0x3c
   183cc:	bl	11ac8 <memcpy@plt>
   183d0:	ldr	r3, [sp, #44]	; 0x2c
   183d4:	cmp	r3, #0
   183d8:	beq	18560 <__assert_fail@plt+0x6618>
   183dc:	ldr	ip, [r6]
   183e0:	add	r3, sp, #56	; 0x38
   183e4:	ldr	r2, [r6, #8]
   183e8:	str	r3, [sp, #20]
   183ec:	ldr	r0, [r6, #12]
   183f0:	ldr	r1, [sp, #56]	; 0x38
   183f4:	sub	r2, r2, ip
   183f8:	sub	r0, r0, ip
   183fc:	add	r2, r1, r2
   18400:	add	r1, r1, r0
   18404:	str	r2, [sp, #64]	; 0x40
   18408:	str	r1, [sp, #68]	; 0x44
   1840c:	b	1826c <__assert_fail@plt+0x6324>
   18410:	ldr	r3, [sp, #12]
   18414:	ldr	r0, [r4]
   18418:	cmp	r3, #1
   1841c:	beq	18448 <__assert_fail@plt+0x6500>
   18420:	ldr	r3, [sp, #12]
   18424:	add	r2, r4, #4
   18428:	add	lr, r4, r3, lsl #2
   1842c:	ldr	r3, [r2], #4
   18430:	cmp	r3, r0
   18434:	sub	r1, r3, #1
   18438:	strhi	r1, [r2, #-4]
   1843c:	ldrhi	r0, [r4]
   18440:	cmp	lr, r2
   18444:	bne	1842c <__assert_fail@plt+0x64e4>
   18448:	ldr	r3, [sp, #24]
   1844c:	ldr	r1, [r3, r0, lsl #3]
   18450:	ldr	r3, [sp, #12]
   18454:	sub	r6, r3, #1
   18458:	ldr	r3, [sp, #116]	; 0x74
   1845c:	ldr	r0, [r3, r0, lsl #2]
   18460:	bl	17684 <__assert_fail@plt+0x573c>
   18464:	ldr	r2, [r4]
   18468:	ldr	r3, [sp, #36]	; 0x24
   1846c:	cmp	r2, r3
   18470:	bcc	185b4 <__assert_fail@plt+0x666c>
   18474:	ldr	r3, [sp, #4]
   18478:	rsb	r2, r2, r2, lsl #3
   1847c:	ldr	r0, [r3, r2, lsl #2]
   18480:	bl	1b670 <__assert_fail@plt+0x9728>
   18484:	ldr	r0, [r4]
   18488:	cmp	r6, r0
   1848c:	bls	18528 <__assert_fail@plt+0x65e0>
   18490:	ldr	r3, [sp, #4]
   18494:	rsb	r2, r0, r0, lsl #3
   18498:	lsl	ip, r0, #2
   1849c:	str	r5, [sp, #48]	; 0x30
   184a0:	ldr	sl, [sp, #24]
   184a4:	add	lr, r5, ip
   184a8:	str	r4, [sp, #52]	; 0x34
   184ac:	add	r2, r3, r2, lsl #2
   184b0:	ldr	r3, [sp, #116]	; 0x74
   184b4:	sub	r9, sl, #8
   184b8:	mov	fp, r9
   184bc:	add	r7, r3, ip
   184c0:	ldr	r3, [sp, #8]
   184c4:	add	ip, r3, ip
   184c8:	ldr	r4, [r7, #4]
   184cc:	add	r0, r0, #1
   184d0:	add	r3, r2, #28
   184d4:	lsl	r1, r0, #3
   184d8:	cmp	r0, r6
   184dc:	ldrd	r8, [r2, #28]
   184e0:	str	r4, [r7], #4
   184e4:	ldr	r4, [lr, #4]
   184e8:	strd	r8, [r2]
   184ec:	ldrd	r8, [r2, #36]	; 0x24
   184f0:	str	r4, [lr], #4
   184f4:	ldrd	r4, [sl, r1]
   184f8:	strd	r8, [r2, #8]
   184fc:	ldrd	r8, [r2, #44]	; 0x2c
   18500:	strd	r4, [fp, r1]
   18504:	ldr	r1, [ip, #4]
   18508:	strd	r8, [r2, #16]
   1850c:	ldr	r8, [r2, #52]	; 0x34
   18510:	str	r1, [ip], #4
   18514:	str	r8, [r2, #24]
   18518:	mov	r2, r3
   1851c:	bne	184c8 <__assert_fail@plt+0x6580>
   18520:	ldr	r5, [sp, #48]	; 0x30
   18524:	ldr	r4, [sp, #52]	; 0x34
   18528:	cmp	r6, #0
   1852c:	beq	1810c <__assert_fail@plt+0x61c4>
   18530:	ldr	r2, [sp, #12]
   18534:	ldr	r3, [sp, #28]
   18538:	add	r0, r3, r2, lsl #2
   1853c:	mov	r2, r4
   18540:	ldr	r3, [r2, #4]
   18544:	str	r3, [r2], #4
   18548:	cmp	r0, r2
   1854c:	bne	18540 <__assert_fail@plt+0x65f8>
   18550:	str	r6, [sp, #12]
   18554:	b	18234 <__assert_fail@plt+0x62ec>
   18558:	str	r8, [r4]
   1855c:	b	18234 <__assert_fail@plt+0x62ec>
   18560:	add	r3, sp, #56	; 0x38
   18564:	str	r3, [sp, #20]
   18568:	b	1826c <__assert_fail@plt+0x6324>
   1856c:	cmp	r3, #0
   18570:	beq	18598 <__assert_fail@plt+0x6650>
   18574:	lsl	r2, r3, #1
   18578:	cmp	r7, r2
   1857c:	bhi	1858c <__assert_fail@plt+0x6644>
   18580:	b	185f0 <__assert_fail@plt+0x66a8>
   18584:	cmp	r7, r2
   18588:	bls	185f0 <__assert_fail@plt+0x66a8>
   1858c:	cmp	r2, #0
   18590:	lsl	r2, r2, #1
   18594:	bne	18584 <__assert_fail@plt+0x663c>
   18598:	str	r7, [sp, #40]	; 0x28
   1859c:	bl	1b670 <__assert_fail@plt+0x9728>
   185a0:	mov	r0, r7
   185a4:	bl	20f80 <__assert_fail@plt+0xf038>
   185a8:	str	r0, [sp, #56]	; 0x38
   185ac:	ldr	r7, [r6, #4]
   185b0:	b	183c0 <__assert_fail@plt+0x6478>
   185b4:	ldr	r3, [sp, #24]
   185b8:	ldr	r0, [r3, r2, lsl #3]
   185bc:	ldr	r3, [sp, #36]	; 0x24
   185c0:	sub	r3, r3, #1
   185c4:	str	r3, [sp, #36]	; 0x24
   185c8:	bl	1710c <__assert_fail@plt+0x51c4>
   185cc:	ldr	r2, [r4]
   185d0:	b	18474 <__assert_fail@plt+0x652c>
   185d4:	add	r3, r7, sl
   185d8:	ldr	r0, [r3]
   185dc:	ldr	r3, [sp, #36]	; 0x24
   185e0:	sub	r3, r3, #1
   185e4:	str	r3, [sp, #36]	; 0x24
   185e8:	bl	1710c <__assert_fail@plt+0x51c4>
   185ec:	b	180c4 <__assert_fail@plt+0x617c>
   185f0:	mov	r7, r2
   185f4:	b	18598 <__assert_fail@plt+0x6650>
   185f8:	str	r4, [sp, #-8]!
   185fc:	mov	r4, r0
   18600:	str	lr, [sp, #4]
   18604:	bl	11b88 <dup2@plt>
   18608:	mov	r0, r4
   1860c:	ldr	r4, [sp]
   18610:	ldr	lr, [sp, #4]
   18614:	add	sp, sp, #8
   18618:	b	11f30 <close@plt>
   1861c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18620:	mov	r4, r2
   18624:	mov	r5, r0
   18628:	strd	r6, [sp, #8]
   1862c:	strd	r8, [sp, #16]
   18630:	mov	r9, r1
   18634:	mov	r1, #4
   18638:	mov	r0, r9
   1863c:	strd	sl, [sp, #24]
   18640:	str	lr, [sp, #32]
   18644:	sub	sp, sp, #20
   18648:	bl	210e8 <__assert_fail@plt+0xf1a0>
   1864c:	cmp	r9, #0
   18650:	str	r0, [r4]
   18654:	beq	187ac <__assert_fail@plt+0x6864>
   18658:	movw	sl, #14604	; 0x390c
   1865c:	movt	sl, #2
   18660:	mov	r8, r0
   18664:	mov	r4, #0
   18668:	b	18698 <__assert_fail@plt+0x6750>
   1866c:	mov	r1, sl
   18670:	ldr	r0, [r5]
   18674:	bl	1750c <__assert_fail@plt+0x55c4>
   18678:	cmp	r0, #0
   1867c:	str	r0, [r8, r4, lsl #2]
   18680:	beq	18710 <__assert_fail@plt+0x67c8>
   18684:	add	r4, r4, #1
   18688:	add	r5, r5, #8
   1868c:	cmp	r4, r9
   18690:	mov	r7, r4
   18694:	beq	18710 <__assert_fail@plt+0x67c8>
   18698:	ldr	r6, [r5, #4]
   1869c:	mov	r7, r4
   186a0:	cmp	r6, #0
   186a4:	beq	1866c <__assert_fail@plt+0x6724>
   186a8:	ldrb	r3, [r6, #8]
   186ac:	cmp	r3, #0
   186b0:	beq	1866c <__assert_fail@plt+0x6724>
   186b4:	cmp	r3, #1
   186b8:	beq	18780 <__assert_fail@plt+0x6838>
   186bc:	mov	r1, #0
   186c0:	add	r0, r6, #9
   186c4:	bl	11c9c <open64@plt>
   186c8:	subs	fp, r0, #0
   186cc:	blt	18774 <__assert_fail@plt+0x682c>
   186d0:	mov	r1, #9
   186d4:	add	r0, sp, #8
   186d8:	bl	1726c <__assert_fail@plt+0x5324>
   186dc:	cmn	r0, #1
   186e0:	mov	r1, r0
   186e4:	bne	18730 <__assert_fail@plt+0x67e8>
   186e8:	bl	11d74 <__errno_location@plt>
   186ec:	ldr	r5, [r0]
   186f0:	mov	r6, r0
   186f4:	cmp	r5, #24
   186f8:	bne	1881c <__assert_fail@plt+0x68d4>
   186fc:	mov	r0, fp
   18700:	bl	11f30 <close@plt>
   18704:	mov	r3, #0
   18708:	str	r5, [r6]
   1870c:	str	r3, [r8, r4, lsl #2]
   18710:	mov	r0, r7
   18714:	add	sp, sp, #20
   18718:	ldrd	r4, [sp]
   1871c:	ldrd	r6, [sp, #8]
   18720:	ldrd	r8, [sp, #16]
   18724:	ldrd	sl, [sp, #24]
   18728:	add	sp, sp, #32
   1872c:	pop	{pc}		; (ldr pc, [sp], #4)
   18730:	cmp	r0, #0
   18734:	beq	187b4 <__assert_fail@plt+0x686c>
   18738:	mov	r0, r6
   1873c:	str	r1, [r6, #4]
   18740:	add	r6, r8, r4, lsl #2
   18744:	bl	15a8c <__assert_fail@plt+0x3b44>
   18748:	mov	r0, fp
   1874c:	bl	11f30 <close@plt>
   18750:	ldr	r0, [sp, #12]
   18754:	bl	11f30 <close@plt>
   18758:	mov	r1, sl
   1875c:	ldr	r0, [sp, #8]
   18760:	bl	119fc <fdopen@plt>
   18764:	subs	fp, r0, #0
   18768:	beq	1878c <__assert_fail@plt+0x6844>
   1876c:	str	fp, [r8, r4, lsl #2]
   18770:	b	18684 <__assert_fail@plt+0x673c>
   18774:	mov	r3, #0
   18778:	str	r3, [r8, r4, lsl #2]
   1877c:	b	18710 <__assert_fail@plt+0x67c8>
   18780:	ldr	r0, [r6, #4]
   18784:	bl	159b0 <__assert_fail@plt+0x3a68>
   18788:	b	186bc <__assert_fail@plt+0x6774>
   1878c:	bl	11d74 <__errno_location@plt>
   18790:	ldr	r5, [r0]
   18794:	mov	r4, r0
   18798:	ldr	r0, [sp, #8]
   1879c:	bl	11f30 <close@plt>
   187a0:	str	fp, [r6]
   187a4:	str	r5, [r4]
   187a8:	b	18710 <__assert_fail@plt+0x67c8>
   187ac:	mov	r7, r9
   187b0:	b	18710 <__assert_fail@plt+0x67c8>
   187b4:	ldr	r0, [sp, #8]
   187b8:	str	r1, [sp, #4]
   187bc:	bl	11f30 <close@plt>
   187c0:	cmp	fp, #0
   187c4:	beq	187d4 <__assert_fail@plt+0x688c>
   187c8:	mov	r0, fp
   187cc:	ldr	r1, [sp, #4]
   187d0:	bl	185f8 <__assert_fail@plt+0x66b0>
   187d4:	ldr	r0, [sp, #12]
   187d8:	cmp	r0, #1
   187dc:	beq	187e8 <__assert_fail@plt+0x68a0>
   187e0:	mov	r1, #1
   187e4:	bl	185f8 <__assert_fail@plt+0x66b0>
   187e8:	movw	r3, #25312	; 0x62e0
   187ec:	movt	r3, #3
   187f0:	ldr	r1, [r3, #1160]	; 0x488
   187f4:	movw	r2, #14556	; 0x38dc
   187f8:	movt	r2, #2
   187fc:	mov	r3, #0
   18800:	mov	r0, r1
   18804:	bl	11ad4 <execlp@plt>
   18808:	bl	11d74 <__errno_location@plt>
   1880c:	movw	r1, #14560	; 0x38e0
   18810:	movt	r1, #2
   18814:	ldr	r0, [r0]
   18818:	bl	15a00 <__assert_fail@plt+0x3ab8>
   1881c:	mov	r2, #5
   18820:	movw	r1, #14520	; 0x38b8
   18824:	movt	r1, #2
   18828:	mov	r0, #0
   1882c:	bl	11b58 <dcgettext@plt>
   18830:	movw	r3, #25312	; 0x62e0
   18834:	movt	r3, #3
   18838:	mov	r4, r0
   1883c:	mov	r0, #4
   18840:	ldr	r1, [r3, #1160]	; 0x488
   18844:	bl	1f518 <__assert_fail@plt+0xd5d0>
   18848:	mov	r3, r0
   1884c:	mov	r2, r4
   18850:	mov	r1, r5
   18854:	mov	r0, #2
   18858:	bl	11c90 <error@plt>
   1885c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18860:	strd	r6, [sp, #8]
   18864:	mov	r7, r1
   18868:	mov	r1, r2
   1886c:	strd	r8, [sp, #16]
   18870:	mov	r9, r2
   18874:	mov	r8, r3
   18878:	str	lr, [sp, #24]
   1887c:	sub	sp, sp, #20
   18880:	mov	r6, r0
   18884:	add	r2, sp, #12
   18888:	bl	1861c <__assert_fail@plt+0x66d4>
   1888c:	cmp	r9, r0
   18890:	mov	r5, r0
   18894:	movhi	r4, #1
   18898:	movls	r4, #0
   1889c:	cmp	r0, #1
   188a0:	movhi	r4, #0
   188a4:	cmp	r4, #0
   188a8:	bne	188e8 <__assert_fail@plt+0x69a0>
   188ac:	ldr	ip, [sp, #12]
   188b0:	mov	r0, r6
   188b4:	mov	r3, r8
   188b8:	mov	r1, r7
   188bc:	ldr	r2, [sp, #48]	; 0x30
   188c0:	stm	sp, {r2, ip}
   188c4:	mov	r2, r5
   188c8:	bl	17f48 <__assert_fail@plt+0x6000>
   188cc:	mov	r0, r5
   188d0:	add	sp, sp, #20
   188d4:	ldrd	r4, [sp]
   188d8:	ldrd	r6, [sp, #8]
   188dc:	ldrd	r8, [sp, #16]
   188e0:	add	sp, sp, #24
   188e4:	pop	{pc}		; (ldr pc, [sp], #4)
   188e8:	movw	r1, #14440	; 0x3868
   188ec:	movt	r1, #2
   188f0:	mov	r2, #5
   188f4:	mov	r0, #0
   188f8:	bl	11b58 <dcgettext@plt>
   188fc:	ldr	r1, [r6, r5, lsl #3]
   18900:	bl	155b0 <__assert_fail@plt+0x3668>
   18904:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18908:	movw	r4, #25312	; 0x62e0
   1890c:	movt	r4, #3
   18910:	ldr	r3, [r4, #1152]	; 0x480
   18914:	ldr	r2, [r4, #1492]	; 0x5d4
   18918:	strd	r6, [sp, #8]
   1891c:	mov	r7, r1
   18920:	strd	r8, [sp, #16]
   18924:	mov	r9, r0
   18928:	strd	sl, [sp, #24]
   1892c:	str	lr, [sp, #32]
   18930:	sub	sp, sp, #140	; 0x8c
   18934:	ldr	r8, [r3, r2, lsl #2]
   18938:	mov	r0, r8
   1893c:	bl	11d50 <strlen@plt>
   18940:	mov	sl, r0
   18944:	add	r0, r0, #24
   18948:	bic	r0, r0, #3
   1894c:	bl	20f80 <__assert_fail@plt+0xf038>
   18950:	add	r6, r0, #9
   18954:	mov	r2, sl
   18958:	mov	r5, r0
   1895c:	mov	r1, r8
   18960:	mov	r0, r6
   18964:	bl	11ac8 <memcpy@plt>
   18968:	ldr	fp, [r4, #1148]	; 0x47c
   1896c:	movw	lr, #14716	; 0x397c
   18970:	movt	lr, #2
   18974:	ldm	lr, {r0, r2, lr}
   18978:	add	ip, r6, sl
   1897c:	mov	r1, #0
   18980:	ldr	r3, [r4, #1492]	; 0x5d4
   18984:	str	r0, [r6, sl]
   18988:	mov	r0, r1
   1898c:	str	r2, [ip, #4]
   18990:	add	r2, sp, #8
   18994:	str	lr, [ip, #8]
   18998:	str	r1, [r5]
   1899c:	add	r3, r3, #1
   189a0:	cmp	r3, fp
   189a4:	moveq	r3, r1
   189a8:	ldr	r1, [pc, #468]	; 18b84 <__assert_fail@plt+0x6c3c>
   189ac:	str	r3, [r4, #1492]	; 0x5d4
   189b0:	bl	11c60 <pthread_sigmask@plt>
   189b4:	clz	r3, r0
   189b8:	mov	r1, #524288	; 0x80000
   189bc:	lsr	r3, r3, #5
   189c0:	mov	r0, r6
   189c4:	strb	r3, [sp, #4]
   189c8:	bl	20414 <__assert_fail@plt+0xe4cc>
   189cc:	mov	sl, r0
   189d0:	bl	11d74 <__errno_location@plt>
   189d4:	cmp	sl, #0
   189d8:	mov	fp, r0
   189dc:	blt	18a8c <__assert_fail@plt+0x6b44>
   189e0:	ldrb	r1, [sp, #4]
   189e4:	movw	r3, #25060	; 0x61e4
   189e8:	movt	r3, #3
   189ec:	ldr	r2, [r3, #108]	; 0x6c
   189f0:	str	r5, [r3, #108]	; 0x6c
   189f4:	cmp	r1, #0
   189f8:	str	r5, [r2]
   189fc:	bne	18ac0 <__assert_fail@plt+0x6b78>
   18a00:	ldr	r3, [r4, #1160]	; 0x488
   18a04:	mov	r2, #0
   18a08:	strb	r2, [r5, #8]
   18a0c:	cmp	r3, r2
   18a10:	beq	18a30 <__assert_fail@plt+0x6ae8>
   18a14:	add	r0, sp, #4
   18a18:	mov	r1, #4
   18a1c:	bl	1726c <__assert_fail@plt+0x5324>
   18a20:	cmp	r0, #0
   18a24:	str	r0, [r5, #4]
   18a28:	bgt	18a6c <__assert_fail@plt+0x6b24>
   18a2c:	beq	18ae4 <__assert_fail@plt+0x6b9c>
   18a30:	mov	r0, sl
   18a34:	movw	r1, #14680	; 0x3958
   18a38:	movt	r1, #2
   18a3c:	bl	119fc <fdopen@plt>
   18a40:	cmp	r0, #0
   18a44:	str	r0, [r9]
   18a48:	beq	18b34 <__assert_fail@plt+0x6bec>
   18a4c:	mov	r0, r5
   18a50:	add	sp, sp, #140	; 0x8c
   18a54:	ldrd	r4, [sp]
   18a58:	ldrd	r6, [sp, #8]
   18a5c:	ldrd	r8, [sp, #16]
   18a60:	ldrd	sl, [sp, #24]
   18a64:	add	sp, sp, #32
   18a68:	pop	{pc}		; (ldr pc, [sp], #4)
   18a6c:	mov	r0, sl
   18a70:	bl	11f30 <close@plt>
   18a74:	ldr	r0, [sp, #4]
   18a78:	bl	11f30 <close@plt>
   18a7c:	mov	r0, r5
   18a80:	ldr	sl, [sp, #8]
   18a84:	bl	15a8c <__assert_fail@plt+0x3b44>
   18a88:	b	18a30 <__assert_fail@plt+0x6ae8>
   18a8c:	ldrb	r3, [sp, #4]
   18a90:	ldr	r4, [r0]
   18a94:	cmp	r3, #0
   18a98:	bne	18ad4 <__assert_fail@plt+0x6b8c>
   18a9c:	eor	r7, r7, #1
   18aa0:	cmp	r4, #24
   18aa4:	orrne	r7, r7, #1
   18aa8:	cmp	r7, #0
   18aac:	bne	18b4c <__assert_fail@plt+0x6c04>
   18ab0:	mov	r0, r5
   18ab4:	mov	r5, r7
   18ab8:	bl	1b670 <__assert_fail@plt+0x9728>
   18abc:	b	18a4c <__assert_fail@plt+0x6b04>
   18ac0:	ldr	r7, [fp]
   18ac4:	add	r0, sp, #4
   18ac8:	bl	17068 <__assert_fail@plt+0x5120>
   18acc:	str	r7, [fp]
   18ad0:	b	18a00 <__assert_fail@plt+0x6ab8>
   18ad4:	add	r0, sp, #4
   18ad8:	bl	17068 <__assert_fail@plt+0x5120>
   18adc:	str	r4, [fp]
   18ae0:	b	18a9c <__assert_fail@plt+0x6b54>
   18ae4:	ldr	r0, [sp, #8]
   18ae8:	bl	11f30 <close@plt>
   18aec:	cmp	sl, #1
   18af0:	beq	18b00 <__assert_fail@plt+0x6bb8>
   18af4:	mov	r0, sl
   18af8:	mov	r1, #1
   18afc:	bl	185f8 <__assert_fail@plt+0x66b0>
   18b00:	ldr	r0, [sp, #4]
   18b04:	cmp	r0, #0
   18b08:	beq	18b14 <__assert_fail@plt+0x6bcc>
   18b0c:	mov	r1, #0
   18b10:	bl	185f8 <__assert_fail@plt+0x66b0>
   18b14:	ldr	r1, [r4, #1160]	; 0x488
   18b18:	mov	r2, #0
   18b1c:	mov	r0, r1
   18b20:	bl	11ad4 <execlp@plt>
   18b24:	movw	r1, #14644	; 0x3934
   18b28:	movt	r1, #2
   18b2c:	ldr	r0, [fp]
   18b30:	bl	15a00 <__assert_fail@plt+0x3ab8>
   18b34:	movw	r1, #14684	; 0x395c
   18b38:	movt	r1, #2
   18b3c:	mov	r2, #5
   18b40:	bl	11b58 <dcgettext@plt>
   18b44:	mov	r1, r6
   18b48:	bl	155b0 <__assert_fail@plt+0x3668>
   18b4c:	mov	r2, #5
   18b50:	movw	r1, #14608	; 0x3910
   18b54:	movt	r1, #2
   18b58:	mov	r0, #0
   18b5c:	bl	11b58 <dcgettext@plt>
   18b60:	mov	r5, r0
   18b64:	mov	r1, r8
   18b68:	mov	r0, #4
   18b6c:	bl	1f518 <__assert_fail@plt+0xd5d0>
   18b70:	mov	r3, r0
   18b74:	mov	r2, r5
   18b78:	mov	r1, r4
   18b7c:	mov	r0, #2
   18b80:	bl	11c90 <error@plt>
   18b84:	andeq	r6, r3, r8, lsl r8
   18b88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18b8c:	mov	r4, r0
   18b90:	strd	r6, [sp, #8]
   18b94:	mov	r7, r2
   18b98:	mov	r6, r1
   18b9c:	strd	sl, [sp, #24]
   18ba0:	movw	fp, #25060	; 0x61e4
   18ba4:	movt	fp, #3
   18ba8:	ldr	ip, [fp, #112]	; 0x70
   18bac:	strd	r8, [sp, #16]
   18bb0:	str	lr, [sp, #32]
   18bb4:	sub	sp, sp, #140	; 0x8c
   18bb8:	str	r3, [sp, #16]
   18bbc:	cmp	r2, ip
   18bc0:	bls	18d30 <__assert_fail@plt+0x6de8>
   18bc4:	add	r3, r0, #4
   18bc8:	str	r3, [sp, #8]
   18bcc:	mov	r5, #0
   18bd0:	mov	r8, r5
   18bd4:	mov	r1, #0
   18bd8:	add	r0, sp, #32
   18bdc:	bl	18904 <__assert_fail@plt+0x69bc>
   18be0:	ldr	r2, [fp, #112]	; 0x70
   18be4:	mov	r9, r0
   18be8:	add	r0, r4, r8, lsl #3
   18bec:	add	sl, r9, #9
   18bf0:	ldr	r3, [sp, #32]
   18bf4:	str	sl, [sp]
   18bf8:	cmp	r2, r6
   18bfc:	movcs	r1, r6
   18c00:	movcc	r1, r2
   18c04:	bl	1885c <__assert_fail@plt+0x6914>
   18c08:	ldr	r3, [fp, #112]	; 0x70
   18c0c:	add	r8, r8, r0
   18c10:	cmp	r0, r6
   18c14:	sub	r2, r7, r8
   18c18:	subls	r6, r6, r0
   18c1c:	str	sl, [r4, r5, lsl #3]
   18c20:	ldr	r1, [sp, #8]
   18c24:	subhi	r6, r6, r6
   18c28:	cmp	r2, r3
   18c2c:	str	r9, [r1, r5, lsl #3]
   18c30:	add	r5, r5, #1
   18c34:	bcs	18bd4 <__assert_fail@plt+0x6c8c>
   18c38:	udiv	r1, r5, r3
   18c3c:	mov	ip, r2
   18c40:	add	sl, r4, r8, lsl #3
   18c44:	add	r9, r4, r5, lsl #3
   18c48:	mov	r2, sl
   18c4c:	mov	sl, r9
   18c50:	mls	r1, r3, r1, r5
   18c54:	sub	r0, r3, r1
   18c58:	cmp	ip, r0
   18c5c:	bhi	18cb8 <__assert_fail@plt+0x6d70>
   18c60:	sub	r3, r7, r8
   18c64:	mov	r1, r2
   18c68:	mov	r0, sl
   18c6c:	lsl	r2, r3, #3
   18c70:	add	r6, r6, r5
   18c74:	bl	11a80 <memmove@plt>
   18c78:	ldr	r3, [fp, #112]	; 0x70
   18c7c:	sub	r5, r5, r8
   18c80:	add	r7, r7, r5
   18c84:	cmp	r3, r7
   18c88:	bcs	18d30 <__assert_fail@plt+0x6de8>
   18c8c:	cmp	r7, r3
   18c90:	bcs	18bcc <__assert_fail@plt+0x6c84>
   18c94:	mov	r0, r3
   18c98:	mov	ip, r7
   18c9c:	mov	r5, #0
   18ca0:	cmp	ip, r0
   18ca4:	mov	r1, r5
   18ca8:	mov	r8, r5
   18cac:	mov	sl, r4
   18cb0:	mov	r2, r4
   18cb4:	bls	18c60 <__assert_fail@plt+0x6d18>
   18cb8:	add	r9, ip, r1
   18cbc:	add	r0, sp, #32
   18cc0:	str	r2, [sp, #20]
   18cc4:	mov	r1, #0
   18cc8:	add	r9, r9, #1
   18ccc:	sub	r9, r9, r3
   18cd0:	add	r5, r5, #1
   18cd4:	bl	18904 <__assert_fail@plt+0x69bc>
   18cd8:	ldr	r2, [sp, #20]
   18cdc:	add	ip, r0, #9
   18ce0:	cmp	r9, r6
   18ce4:	movcs	r1, r6
   18ce8:	movcc	r1, r9
   18cec:	str	ip, [sp]
   18cf0:	str	r0, [sp, #12]
   18cf4:	ldr	r3, [sp, #32]
   18cf8:	mov	r0, r2
   18cfc:	mov	r2, r9
   18d00:	mov	r9, ip
   18d04:	bl	1885c <__assert_fail@plt+0x6914>
   18d08:	ldr	r2, [sp, #12]
   18d0c:	cmp	r0, r6
   18d10:	add	r8, r8, r0
   18d14:	subls	r6, r6, r0
   18d18:	subhi	r6, r6, r6
   18d1c:	str	r9, [sl]
   18d20:	str	r2, [sl, #4]
   18d24:	add	sl, r4, r5, lsl #3
   18d28:	add	r2, r4, r8, lsl #3
   18d2c:	b	18c60 <__assert_fail@plt+0x6d18>
   18d30:	cmp	r7, r6
   18d34:	addls	r3, sp, #28
   18d38:	strls	r3, [sp, #8]
   18d3c:	bls	18e58 <__assert_fail@plt+0x6f10>
   18d40:	movw	r3, #14356	; 0x3814
   18d44:	movt	r3, #2
   18d48:	add	r9, r4, r6, lsl #3
   18d4c:	mov	r8, r6
   18d50:	mov	fp, #0
   18d54:	str	r3, [sp, #12]
   18d58:	add	r3, sp, #28
   18d5c:	str	r3, [sp, #8]
   18d60:	str	r6, [sp, #20]
   18d64:	ldr	r6, [sp, #16]
   18d68:	b	18dbc <__assert_fail@plt+0x6e74>
   18d6c:	cmp	sl, #0
   18d70:	bne	18e30 <__assert_fail@plt+0x6ee8>
   18d74:	bl	15618 <__assert_fail@plt+0x36d0>
   18d78:	subs	r5, r0, #0
   18d7c:	beq	18e54 <__assert_fail@plt+0x6f0c>
   18d80:	add	r2, sp, #32
   18d84:	mov	r1, #0
   18d88:	mov	r0, #3
   18d8c:	bl	11bf4 <__fxstat64@plt>
   18d90:	cmp	r0, #0
   18d94:	bne	18dac <__assert_fail@plt+0x6e64>
   18d98:	ldrd	r2, [r5, #96]	; 0x60
   18d9c:	ldrd	r0, [sp, #128]	; 0x80
   18da0:	cmp	r1, r3
   18da4:	cmpeq	r0, r2
   18da8:	beq	18e1c <__assert_fail@plt+0x6ed4>
   18dac:	add	r8, r8, #1
   18db0:	add	r9, r9, #8
   18db4:	cmp	r8, r7
   18db8:	beq	18e54 <__assert_fail@plt+0x6f0c>
   18dbc:	ldr	r5, [r4, r8, lsl #3]
   18dc0:	ldr	r1, [sp, #12]
   18dc4:	mov	r0, r5
   18dc8:	bl	11a2c <strcmp@plt>
   18dcc:	cmp	r6, #0
   18dd0:	mov	sl, r0
   18dd4:	beq	18dec <__assert_fail@plt+0x6ea4>
   18dd8:	mov	r1, r5
   18ddc:	mov	r0, r6
   18de0:	bl	11a2c <strcmp@plt>
   18de4:	cmp	r0, #0
   18de8:	beq	18d6c <__assert_fail@plt+0x6e24>
   18dec:	bl	15618 <__assert_fail@plt+0x36d0>
   18df0:	subs	r5, r0, #0
   18df4:	beq	18e54 <__assert_fail@plt+0x6f0c>
   18df8:	cmp	sl, #0
   18dfc:	beq	18d80 <__assert_fail@plt+0x6e38>
   18e00:	add	r2, sp, #32
   18e04:	mov	r0, #3
   18e08:	ldr	r1, [r4, r8, lsl #3]
   18e0c:	bl	11f00 <__xstat64@plt>
   18e10:	cmp	r0, #0
   18e14:	bne	18dac <__assert_fail@plt+0x6e64>
   18e18:	b	18d98 <__assert_fail@plt+0x6e50>
   18e1c:	ldrd	r0, [r5]
   18e20:	ldrd	r2, [sp, #32]
   18e24:	cmp	r3, r1
   18e28:	cmpeq	r2, r0
   18e2c:	bne	18dac <__assert_fail@plt+0x6e64>
   18e30:	cmp	fp, #0
   18e34:	addne	r5, fp, #9
   18e38:	beq	18f74 <__assert_fail@plt+0x702c>
   18e3c:	str	r5, [r4, r8, lsl #3]
   18e40:	add	r8, r8, #1
   18e44:	add	r9, r9, #8
   18e48:	cmp	r8, r7
   18e4c:	str	fp, [r9, #-4]
   18e50:	bne	18dbc <__assert_fail@plt+0x6e74>
   18e54:	ldr	r6, [sp, #20]
   18e58:	movw	r3, #14680	; 0x3958
   18e5c:	movt	r3, #2
   18e60:	str	r3, [sp, #20]
   18e64:	add	r3, r4, #8
   18e68:	str	r3, [sp, #12]
   18e6c:	mov	r1, r7
   18e70:	mov	r0, r4
   18e74:	ldr	r2, [sp, #8]
   18e78:	bl	1861c <__assert_fail@plt+0x66d4>
   18e7c:	cmp	r7, r0
   18e80:	mov	sl, r0
   18e84:	beq	18f24 <__assert_fail@plt+0x6fdc>
   18e88:	cmp	r0, #2
   18e8c:	bls	18fe4 <__assert_fail@plt+0x709c>
   18e90:	ldr	r3, [sp, #28]
   18e94:	sub	sl, sl, #1
   18e98:	add	r8, r4, sl, lsl #3
   18e9c:	ldr	r1, [r4, sl, lsl #3]
   18ea0:	ldr	r0, [r3, sl, lsl #2]
   18ea4:	bl	17684 <__assert_fail@plt+0x573c>
   18ea8:	cmp	sl, #2
   18eac:	add	r0, sp, #32
   18eb0:	movls	r1, #0
   18eb4:	movhi	r1, #1
   18eb8:	bl	18904 <__assert_fail@plt+0x69bc>
   18ebc:	cmp	r0, #0
   18ec0:	beq	18e90 <__assert_fail@plt+0x6f48>
   18ec4:	ldr	ip, [sp, #28]
   18ec8:	cmp	r6, sl
   18ecc:	add	fp, r0, #9
   18ed0:	movcc	r9, r6
   18ed4:	movcs	r9, sl
   18ed8:	mov	r5, r0
   18edc:	sub	r3, r7, sl
   18ee0:	mov	r2, sl
   18ee4:	mov	r1, r9
   18ee8:	mov	r0, r4
   18eec:	mov	sl, r3
   18ef0:	add	r7, r3, #1
   18ef4:	stm	sp, {fp, ip}
   18ef8:	rsb	r9, r9, #1
   18efc:	ldr	r3, [sp, #32]
   18f00:	add	r6, r6, r9
   18f04:	bl	17f48 <__assert_fail@plt+0x6000>
   18f08:	mov	r1, r8
   18f0c:	lsl	r2, sl, #3
   18f10:	str	fp, [r4]
   18f14:	str	r5, [r4, #4]
   18f18:	ldr	r0, [sp, #12]
   18f1c:	bl	11a80 <memmove@plt>
   18f20:	b	18e6c <__assert_fail@plt+0x6f24>
   18f24:	ldrd	r0, [sp, #16]
   18f28:	bl	1750c <__assert_fail@plt+0x55c4>
   18f2c:	subs	r5, r0, #0
   18f30:	bne	18fa4 <__assert_fail@plt+0x705c>
   18f34:	bl	11d74 <__errno_location@plt>
   18f38:	ldr	r1, [r0]
   18f3c:	cmp	r7, #2
   18f40:	movhi	r3, #0
   18f44:	movls	r3, #1
   18f48:	cmp	r1, #24
   18f4c:	orrne	r3, r3, #1
   18f50:	cmp	r3, #0
   18f54:	beq	18e90 <__assert_fail@plt+0x6f48>
   18f58:	mov	r0, r5
   18f5c:	movw	r1, #14440	; 0x3868
   18f60:	movt	r1, #2
   18f64:	mov	r2, #5
   18f68:	bl	11b58 <dcgettext@plt>
   18f6c:	ldr	r1, [sp, #16]
   18f70:	bl	155b0 <__assert_fail@plt+0x3668>
   18f74:	mov	r1, fp
   18f78:	ldr	r0, [sp, #8]
   18f7c:	bl	18904 <__assert_fail@plt+0x69bc>
   18f80:	add	r5, r0, #9
   18f84:	mov	fp, r0
   18f88:	ldr	r3, [sp, #28]
   18f8c:	mov	r2, #1
   18f90:	mov	r1, #0
   18f94:	mov	r0, r9
   18f98:	str	r5, [sp]
   18f9c:	bl	1885c <__assert_fail@plt+0x6914>
   18fa0:	b	18e3c <__assert_fail@plt+0x6ef4>
   18fa4:	ldr	lr, [sp, #16]
   18fa8:	mov	r3, r5
   18fac:	mov	r2, r7
   18fb0:	mov	r1, r6
   18fb4:	mov	r0, r4
   18fb8:	ldr	ip, [sp, #28]
   18fbc:	str	lr, [sp]
   18fc0:	str	ip, [sp, #4]
   18fc4:	bl	17f48 <__assert_fail@plt+0x6000>
   18fc8:	add	sp, sp, #140	; 0x8c
   18fcc:	ldrd	r4, [sp]
   18fd0:	ldrd	r6, [sp, #8]
   18fd4:	ldrd	r8, [sp, #16]
   18fd8:	ldrd	sl, [sp, #24]
   18fdc:	add	sp, sp, #32
   18fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   18fe4:	movw	r1, #14440	; 0x3868
   18fe8:	movt	r1, #2
   18fec:	mov	r2, #5
   18ff0:	mov	r0, #0
   18ff4:	bl	11b58 <dcgettext@plt>
   18ff8:	ldr	r1, [r4, sl, lsl #3]
   18ffc:	bl	155b0 <__assert_fail@plt+0x3668>
   19000:	push	{lr}		; (str lr, [sp, #-4]!)
   19004:	ldr	lr, [r1]
   19008:	ldmib	r1, {r2, ip}
   1900c:	ldr	r3, [r1, #12]
   19010:	cmp	lr, ip
   19014:	beq	19038 <__assert_fail@plt+0x70f0>
   19018:	cmp	r2, r3
   1901c:	beq	19028 <__assert_fail@plt+0x70e0>
   19020:	pop	{lr}		; (ldr lr, [sp], #4)
   19024:	b	15c40 <__assert_fail@plt+0x3cf8>
   19028:	ldr	r3, [r1, #24]
   1902c:	cmp	r3, #0
   19030:	beq	19020 <__assert_fail@plt+0x70d8>
   19034:	pop	{pc}		; (ldr pc, [sp], #4)
   19038:	cmp	r2, r3
   1903c:	beq	19034 <__assert_fail@plt+0x70ec>
   19040:	ldr	r3, [r1, #20]
   19044:	cmp	r3, #0
   19048:	bne	19034 <__assert_fail@plt+0x70ec>
   1904c:	pop	{lr}		; (ldr lr, [sp], #4)
   19050:	b	15c40 <__assert_fail@plt+0x3cf8>
   19054:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19058:	mov	r4, r3
   1905c:	strd	r6, [sp, #8]
   19060:	mov	r6, r0
   19064:	strd	r8, [sp, #16]
   19068:	lsr	r9, r1, #1
   1906c:	ldr	r7, [r3, #20]
   19070:	strd	sl, [sp, #24]
   19074:	ldr	r8, [r3, #24]
   19078:	str	lr, [sp, #32]
   1907c:	sub	sp, sp, #68	; 0x44
   19080:	ldr	r3, [sp, #104]	; 0x68
   19084:	str	r2, [sp, #20]
   19088:	str	r0, [sp, #36]	; 0x24
   1908c:	str	r2, [sp, #44]	; 0x2c
   19090:	add	r2, r7, r8
   19094:	cmp	r2, #131072	; 0x20000
   19098:	cmpcs	r1, #1
   1909c:	ldr	r2, [sp, #108]	; 0x6c
   190a0:	str	r9, [sp, #40]	; 0x28
   190a4:	str	r3, [sp, #52]	; 0x34
   190a8:	ldr	r3, [r4, #32]
   190ac:	str	r2, [sp, #56]	; 0x38
   190b0:	ldr	r2, [sp, #112]	; 0x70
   190b4:	str	r3, [sp, #48]	; 0x30
   190b8:	str	r2, [sp, #60]	; 0x3c
   190bc:	bhi	19638 <__assert_fail@plt+0x76f0>
   190c0:	ldr	r3, [sp, #20]
   190c4:	lsl	r5, r7, #4
   190c8:	cmp	r8, #1
   190cc:	rsb	r5, r5, #0
   190d0:	add	r9, r6, r5
   190d4:	sub	sl, r6, r3, lsl #4
   190d8:	bls	190f4 <__assert_fail@plt+0x71ac>
   190dc:	lsr	r2, r7, #1
   190e0:	mov	r3, #0
   190e4:	mov	r1, r8
   190e8:	mov	r0, r9
   190ec:	sub	r2, sl, r2, lsl #4
   190f0:	bl	17c7c <__assert_fail@plt+0x5d34>
   190f4:	cmp	r7, #1
   190f8:	bls	19110 <__assert_fail@plt+0x71c8>
   190fc:	mov	r2, sl
   19100:	mov	r1, r7
   19104:	mov	r3, #0
   19108:	mov	r0, r6
   1910c:	bl	17c7c <__assert_fail@plt+0x5d34>
   19110:	ldr	r0, [sp, #104]	; 0x68
   19114:	sub	r5, r5, r8, lsl #4
   19118:	mov	r1, r4
   1911c:	stm	r4, {r6, r9}
   19120:	add	r6, r6, r5
   19124:	str	r9, [r4, #8]
   19128:	str	r6, [r4, #12]
   1912c:	add	r3, r0, #4
   19130:	str	r3, [sp, #16]
   19134:	add	r3, r0, #32
   19138:	str	r3, [sp, #28]
   1913c:	bl	15c40 <__assert_fail@plt+0x3cf8>
   19140:	ldr	r0, [sp, #16]
   19144:	bl	11a98 <pthread_mutex_lock@plt>
   19148:	b	19150 <__assert_fail@plt+0x7208>
   1914c:	bl	11eb8 <pthread_cond_wait@plt>
   19150:	ldr	r3, [sp, #104]	; 0x68
   19154:	ldr	r0, [r3]
   19158:	bl	1caf4 <__assert_fail@plt+0xabac>
   1915c:	subs	r4, r0, #0
   19160:	ldr	r1, [sp, #16]
   19164:	ldr	r0, [sp, #28]
   19168:	beq	1914c <__assert_fail@plt+0x7204>
   1916c:	add	r3, r4, #48	; 0x30
   19170:	mov	r0, r1
   19174:	mov	r5, r3
   19178:	str	r3, [sp, #24]
   1917c:	bl	119f0 <pthread_mutex_unlock@plt>
   19180:	mov	r0, r5
   19184:	bl	11a98 <pthread_mutex_lock@plt>
   19188:	ldr	r3, [r4, #40]	; 0x28
   1918c:	mov	r2, #0
   19190:	strb	r2, [r4, #44]	; 0x2c
   19194:	cmp	r3, #0
   19198:	beq	195d4 <__assert_fail@plt+0x768c>
   1919c:	add	r5, r3, #1
   191a0:	cmp	r3, #1
   191a4:	ldr	r3, [sp, #20]
   191a8:	lsl	r5, r5, #1
   191ac:	ldrd	r6, [r4]
   191b0:	lsr	r5, r3, r5
   191b4:	add	r5, r5, #1
   191b8:	bls	193b8 <__assert_fail@plt+0x7470>
   191bc:	ldr	r3, [r4, #16]
   191c0:	mov	lr, r7
   191c4:	mov	ip, r6
   191c8:	ldr	sl, [r3]
   191cc:	b	191f4 <__assert_fail@plt+0x72ac>
   191d0:	ldm	r4, {ip, lr}
   191d4:	ldrd	r2, [lr, #-16]
   191d8:	sub	lr, lr, #16
   191dc:	str	lr, [r4, #4]
   191e0:	strd	r2, [sl, #-16]
   191e4:	ldrd	r2, [lr, #8]
   191e8:	strd	r2, [r1, #8]
   191ec:	mov	sl, r1
   191f0:	sub	r5, r5, #1
   191f4:	ldr	r9, [r4, #8]
   191f8:	sub	r1, lr, #16
   191fc:	sub	r0, ip, #16
   19200:	mov	r8, sl
   19204:	cmp	r9, ip
   19208:	beq	19320 <__assert_fail@plt+0x73d8>
   1920c:	ldr	r3, [r4, #12]
   19210:	cmp	r3, lr
   19214:	beq	1938c <__assert_fail@plt+0x7444>
   19218:	cmp	r5, #0
   1921c:	beq	19250 <__assert_fail@plt+0x7308>
   19220:	bl	17b80 <__assert_fail@plt+0x5c38>
   19224:	cmp	r0, #0
   19228:	sub	r1, sl, #16
   1922c:	bgt	191d0 <__assert_fail@plt+0x7288>
   19230:	ldm	r4, {ip, lr}
   19234:	ldrd	r2, [ip, #-16]
   19238:	sub	ip, ip, #16
   1923c:	str	ip, [r4]
   19240:	strd	r2, [sl, #-16]
   19244:	ldrd	r2, [ip, #8]
   19248:	strd	r2, [r1, #8]
   1924c:	b	191ec <__assert_fail@plt+0x72a4>
   19250:	ldrd	sl, [r4, #20]
   19254:	sub	r1, r7, lr
   19258:	sub	r3, r6, ip
   1925c:	asr	r2, r1, #4
   19260:	asr	r3, r3, #4
   19264:	cmp	fp, r2
   19268:	mvnne	r5, #0
   1926c:	bne	19338 <__assert_fail@plt+0x73f0>
   19270:	mvn	lr, #1
   19274:	mvn	r5, #0
   19278:	sub	r5, ip, r5, lsl #4
   1927c:	sub	ip, ip, #16
   19280:	b	1928c <__assert_fail@plt+0x7344>
   19284:	cmn	lr, #1
   19288:	beq	19604 <__assert_fail@plt+0x76bc>
   1928c:	lsl	r7, lr, #4
   19290:	cmp	r9, ip
   19294:	mov	r3, ip
   19298:	sub	lr, lr, #1
   1929c:	ldrd	r0, [r5, r7]
   192a0:	add	r7, r5, r7
   192a4:	str	ip, [r4]
   192a8:	sub	ip, ip, #16
   192ac:	strd	r0, [r8, #-16]!
   192b0:	ldrd	r0, [r7, #8]
   192b4:	strd	r0, [r8, #8]
   192b8:	bne	19284 <__assert_fail@plt+0x733c>
   192bc:	sub	r3, r6, r9
   192c0:	mov	fp, r2
   192c4:	asr	r3, r3, #4
   192c8:	ldr	r1, [r4, #16]
   192cc:	str	r8, [r1]
   192d0:	ldrb	r1, [r4, #44]	; 0x2c
   192d4:	sub	r3, sl, r3
   192d8:	sub	r2, fp, r2
   192dc:	str	r3, [r4, #20]
   192e0:	str	r2, [r4, #24]
   192e4:	cmp	r1, #0
   192e8:	bne	192f8 <__assert_fail@plt+0x73b0>
   192ec:	mov	r1, r4
   192f0:	ldr	r0, [sp, #104]	; 0x68
   192f4:	bl	19000 <__assert_fail@plt+0x70b8>
   192f8:	ldr	r3, [r4, #40]	; 0x28
   192fc:	cmp	r3, #1
   19300:	bhi	19358 <__assert_fail@plt+0x7410>
   19304:	ldr	r3, [r4, #20]
   19308:	ldr	r2, [r4, #24]
   1930c:	cmn	r3, r2
   19310:	beq	19348 <__assert_fail@plt+0x7400>
   19314:	ldr	r0, [sp, #24]
   19318:	bl	119f0 <pthread_mutex_unlock@plt>
   1931c:	b	19140 <__assert_fail@plt+0x71f8>
   19320:	ldrd	sl, [r4, #20]
   19324:	sub	r1, r7, lr
   19328:	sub	r3, r6, ip
   1932c:	asr	r3, r3, #4
   19330:	cmp	fp, r1, asr #4
   19334:	beq	19668 <__assert_fail@plt+0x7720>
   19338:	cmp	r3, sl
   1933c:	beq	194f8 <__assert_fail@plt+0x75b0>
   19340:	asr	r2, r1, #4
   19344:	b	192c8 <__assert_fail@plt+0x7380>
   19348:	ldr	r1, [r4, #28]
   1934c:	ldr	r0, [sp, #104]	; 0x68
   19350:	bl	15c40 <__assert_fail@plt+0x3cf8>
   19354:	b	19314 <__assert_fail@plt+0x73cc>
   19358:	ldr	r0, [r4, #28]
   1935c:	add	r0, r0, #48	; 0x30
   19360:	bl	11a98 <pthread_mutex_lock@plt>
   19364:	ldr	r1, [r4, #28]
   19368:	ldrb	r3, [r1, #44]	; 0x2c
   1936c:	cmp	r3, #0
   19370:	bne	19380 <__assert_fail@plt+0x7438>
   19374:	ldr	r0, [sp, #104]	; 0x68
   19378:	bl	19000 <__assert_fail@plt+0x70b8>
   1937c:	ldr	r1, [r4, #28]
   19380:	add	r0, r1, #48	; 0x30
   19384:	bl	119f0 <pthread_mutex_unlock@plt>
   19388:	b	19314 <__assert_fail@plt+0x73cc>
   1938c:	ldrd	sl, [r4, #20]
   19390:	sub	r1, r7, lr
   19394:	sub	r3, r6, ip
   19398:	asr	r2, r1, #4
   1939c:	asr	r3, r3, #4
   193a0:	cmp	fp, r2
   193a4:	bne	19338 <__assert_fail@plt+0x73f0>
   193a8:	cmp	r5, #0
   193ac:	sub	lr, r5, #1
   193b0:	bne	19278 <__assert_fail@plt+0x7330>
   193b4:	b	192c8 <__assert_fail@plt+0x7380>
   193b8:	mov	lr, r7
   193bc:	mov	ip, r6
   193c0:	b	193e0 <__assert_fail@plt+0x7498>
   193c4:	ldr	r3, [r4, #4]
   193c8:	sub	r3, r3, #16
   193cc:	mov	r0, r3
   193d0:	str	r3, [r4, #4]
   193d4:	bl	17ea8 <__assert_fail@plt+0x5f60>
   193d8:	ldm	r4, {ip, lr}
   193dc:	sub	r5, r5, #1
   193e0:	sub	r1, lr, #16
   193e4:	sub	r0, ip, #16
   193e8:	ldr	r3, [r4, #8]
   193ec:	cmp	r3, ip
   193f0:	beq	19434 <__assert_fail@plt+0x74ec>
   193f4:	ldr	r3, [r4, #12]
   193f8:	cmp	r3, lr
   193fc:	beq	19464 <__assert_fail@plt+0x751c>
   19400:	cmp	r5, #0
   19404:	beq	19560 <__assert_fail@plt+0x7618>
   19408:	bl	17b80 <__assert_fail@plt+0x5c38>
   1940c:	cmp	r0, #0
   19410:	ldr	r1, [sp, #108]	; 0x6c
   19414:	ldr	r2, [sp, #112]	; 0x70
   19418:	bgt	193c4 <__assert_fail@plt+0x747c>
   1941c:	ldr	r3, [r4]
   19420:	sub	r3, r3, #16
   19424:	mov	r0, r3
   19428:	str	r3, [r4]
   1942c:	bl	17ea8 <__assert_fail@plt+0x5f60>
   19430:	b	193d8 <__assert_fail@plt+0x7490>
   19434:	sub	r1, r7, lr
   19438:	sub	r3, r6, ip
   1943c:	ldr	sl, [r4, #20]
   19440:	asr	r3, r3, #4
   19444:	ldr	r2, [r4, #24]
   19448:	cmp	r2, r1, asr #4
   1944c:	mov	fp, r2
   19450:	beq	196b0 <__assert_fail@plt+0x7768>
   19454:	cmp	r3, sl
   19458:	beq	1948c <__assert_fail@plt+0x7544>
   1945c:	asr	r2, r1, #4
   19460:	b	192d0 <__assert_fail@plt+0x7388>
   19464:	ldr	r2, [r4, #24]
   19468:	sub	r1, r7, lr
   1946c:	sub	r3, r6, ip
   19470:	asr	r3, r3, #4
   19474:	cmp	r2, r1, asr #4
   19478:	mov	fp, r2
   1947c:	beq	19614 <__assert_fail@plt+0x76cc>
   19480:	ldr	sl, [r4, #20]
   19484:	cmp	r3, sl
   19488:	bne	1945c <__assert_fail@plt+0x7514>
   1948c:	ldr	r2, [r4, #12]
   19490:	cmp	r2, lr
   19494:	beq	1945c <__assert_fail@plt+0x7514>
   19498:	cmp	r5, #0
   1949c:	sub	r5, r5, #1
   194a0:	bne	194b0 <__assert_fail@plt+0x7568>
   194a4:	b	1945c <__assert_fail@plt+0x7514>
   194a8:	cmn	r5, #1
   194ac:	beq	194dc <__assert_fail@plt+0x7594>
   194b0:	sub	lr, lr, #16
   194b4:	ldr	r1, [sp, #108]	; 0x6c
   194b8:	sub	r5, r5, #1
   194bc:	mov	r0, lr
   194c0:	str	lr, [r4, #4]
   194c4:	ldr	r2, [sp, #112]	; 0x70
   194c8:	bl	17ea8 <__assert_fail@plt+0x5f60>
   194cc:	ldr	lr, [r4, #4]
   194d0:	ldr	r3, [r4, #12]
   194d4:	cmp	lr, r3
   194d8:	bne	194a8 <__assert_fail@plt+0x7560>
   194dc:	ldr	r3, [r4]
   194e0:	sub	r2, r7, lr
   194e4:	asr	r2, r2, #4
   194e8:	ldrd	sl, [r4, #20]
   194ec:	sub	r3, r6, r3
   194f0:	asr	r3, r3, #4
   194f4:	b	192d0 <__assert_fail@plt+0x7388>
   194f8:	ldr	r6, [r4, #12]
   194fc:	cmp	r6, lr
   19500:	beq	19340 <__assert_fail@plt+0x73f8>
   19504:	cmp	r5, #0
   19508:	sub	ip, r5, #1
   1950c:	subne	r5, lr, r5, lsl #4
   19510:	subne	lr, lr, #16
   19514:	bne	19528 <__assert_fail@plt+0x75e0>
   19518:	b	19340 <__assert_fail@plt+0x73f8>
   1951c:	cmn	ip, #1
   19520:	sub	lr, lr, #16
   19524:	beq	1962c <__assert_fail@plt+0x76e4>
   19528:	lsl	r9, ip, #4
   1952c:	cmp	lr, r6
   19530:	mov	r2, lr
   19534:	sub	ip, ip, #1
   19538:	ldrd	r0, [r5, r9]
   1953c:	add	r9, r5, r9
   19540:	str	lr, [r4, #4]
   19544:	strd	r0, [r8, #-16]!
   19548:	ldrd	r0, [r9, #8]
   1954c:	strd	r0, [r8, #8]
   19550:	bne	1951c <__assert_fail@plt+0x75d4>
   19554:	sub	r2, r7, lr
   19558:	asr	r2, r2, #4
   1955c:	b	192c8 <__assert_fail@plt+0x7380>
   19560:	ldr	fp, [r4, #24]
   19564:	sub	r1, r7, lr
   19568:	sub	r3, r6, ip
   1956c:	asr	r3, r3, #4
   19570:	cmp	fp, r1, asr #4
   19574:	mvnne	r5, #0
   19578:	bne	19480 <__assert_fail@plt+0x7538>
   1957c:	mvn	r5, #1
   19580:	b	1958c <__assert_fail@plt+0x7644>
   19584:	cmn	r5, #1
   19588:	beq	195b8 <__assert_fail@plt+0x7670>
   1958c:	sub	ip, ip, #16
   19590:	ldr	r1, [sp, #108]	; 0x6c
   19594:	sub	r5, r5, #1
   19598:	mov	r0, ip
   1959c:	str	ip, [r4]
   195a0:	ldr	r2, [sp, #112]	; 0x70
   195a4:	bl	17ea8 <__assert_fail@plt+0x5f60>
   195a8:	ldr	ip, [r4]
   195ac:	ldr	r3, [r4, #8]
   195b0:	cmp	ip, r3
   195b4:	bne	19584 <__assert_fail@plt+0x763c>
   195b8:	ldr	r2, [r4, #4]
   195bc:	sub	r3, r6, ip
   195c0:	asr	r3, r3, #4
   195c4:	ldrd	sl, [r4, #20]
   195c8:	sub	r2, r7, r2
   195cc:	asr	r2, r2, #4
   195d0:	b	192d0 <__assert_fail@plt+0x7388>
   195d4:	ldr	r0, [sp, #24]
   195d8:	bl	119f0 <pthread_mutex_unlock@plt>
   195dc:	mov	r1, r4
   195e0:	ldr	r0, [sp, #104]	; 0x68
   195e4:	bl	15c40 <__assert_fail@plt+0x3cf8>
   195e8:	add	sp, sp, #68	; 0x44
   195ec:	ldrd	r4, [sp]
   195f0:	ldrd	r6, [sp, #8]
   195f4:	ldrd	r8, [sp, #16]
   195f8:	ldrd	sl, [sp, #24]
   195fc:	add	sp, sp, #32
   19600:	pop	{pc}		; (ldr pc, [sp], #4)
   19604:	sub	r3, r6, r3
   19608:	mov	fp, r2
   1960c:	asr	r3, r3, #4
   19610:	b	192c8 <__assert_fail@plt+0x7380>
   19614:	cmp	r5, #0
   19618:	sub	r5, r5, #1
   1961c:	bne	1958c <__assert_fail@plt+0x7644>
   19620:	mov	fp, r2
   19624:	ldr	sl, [r4, #20]
   19628:	b	192d0 <__assert_fail@plt+0x7388>
   1962c:	sub	r2, r7, r2
   19630:	asr	r2, r2, #4
   19634:	b	192c8 <__assert_fail@plt+0x7380>
   19638:	mov	r5, r1
   1963c:	movw	r2, #38584	; 0x96b8
   19640:	movt	r2, #1
   19644:	add	r3, sp, #36	; 0x24
   19648:	mov	r1, #0
   1964c:	add	r0, sp, #32
   19650:	bl	11c6c <pthread_create@plt>
   19654:	subs	r7, r0, #0
   19658:	beq	19670 <__assert_fail@plt+0x7728>
   1965c:	ldr	r7, [r4, #20]
   19660:	ldr	r8, [r4, #24]
   19664:	b	190c0 <__assert_fail@plt+0x7178>
   19668:	mov	r2, fp
   1966c:	b	192c8 <__assert_fail@plt+0x7380>
   19670:	ldr	r0, [r4, #20]
   19674:	sub	r1, r5, r9
   19678:	ldr	r3, [sp, #104]	; 0x68
   1967c:	ldr	r2, [sp, #20]
   19680:	sub	r0, r6, r0, lsl #4
   19684:	str	r3, [sp]
   19688:	ldr	r3, [sp, #108]	; 0x6c
   1968c:	str	r3, [sp, #4]
   19690:	ldr	r3, [sp, #112]	; 0x70
   19694:	str	r3, [sp, #8]
   19698:	ldr	r3, [r4, #36]	; 0x24
   1969c:	bl	19054 <__assert_fail@plt+0x710c>
   196a0:	mov	r1, r7
   196a4:	ldr	r0, [sp, #32]
   196a8:	bl	11e64 <pthread_join@plt>
   196ac:	b	195e8 <__assert_fail@plt+0x76a0>
   196b0:	mov	fp, r2
   196b4:	b	192d0 <__assert_fail@plt+0x7388>
   196b8:	mov	r3, r0
   196bc:	ldrd	r0, [r0, #16]
   196c0:	push	{lr}		; (str lr, [sp, #-4]!)
   196c4:	sub	sp, sp, #20
   196c8:	ldr	r2, [r3, #24]
   196cc:	str	r0, [sp]
   196d0:	ldr	r0, [r3]
   196d4:	str	r1, [sp, #4]
   196d8:	ldr	r1, [r3, #4]
   196dc:	str	r2, [sp, #8]
   196e0:	ldrd	r2, [r3, #8]
   196e4:	bl	19054 <__assert_fail@plt+0x710c>
   196e8:	mov	r0, #0
   196ec:	add	sp, sp, #20
   196f0:	pop	{pc}		; (ldr pc, [sp], #4)
   196f4:	subs	r6, r0, #0
   196f8:	str	r7, [sp, #-8]!
   196fc:	str	lr, [sp, #4]
   19700:	sub	sp, sp, #56	; 0x38
   19704:	beq	1974c <__assert_fail@plt+0x7804>
   19708:	movw	r3, #25288	; 0x62c8
   1970c:	movt	r3, #3
   19710:	ldr	r4, [r3]
   19714:	mov	r2, #5
   19718:	movw	r1, #14728	; 0x3988
   1971c:	movt	r1, #2
   19720:	mov	r0, #0
   19724:	bl	11b58 <dcgettext@plt>
   19728:	movw	r3, #26828	; 0x68cc
   1972c:	movt	r3, #3
   19730:	mov	r2, r0
   19734:	mov	r1, #1
   19738:	ldr	r3, [r3]
   1973c:	mov	r0, r4
   19740:	bl	11dd4 <__fprintf_chk@plt>
   19744:	mov	r0, r6
   19748:	bl	11d38 <exit@plt>
   1974c:	mov	r2, #5
   19750:	movw	r1, #14768	; 0x39b0
   19754:	movt	r1, #2
   19758:	movw	r7, #25300	; 0x62d4
   1975c:	movt	r7, #3
   19760:	bl	11b58 <dcgettext@plt>
   19764:	movw	r3, #26828	; 0x68cc
   19768:	movt	r3, #3
   1976c:	ldr	r3, [r3]
   19770:	mov	r1, r0
   19774:	mov	r0, #1
   19778:	mov	r2, r3
   1977c:	bl	11db0 <__printf_chk@plt>
   19780:	mov	r2, #5
   19784:	movw	r1, #14840	; 0x39f8
   19788:	movt	r1, #2
   1978c:	mov	r0, r6
   19790:	bl	11b58 <dcgettext@plt>
   19794:	ldr	r1, [r7]
   19798:	bl	11a14 <fputs_unlocked@plt>
   1979c:	mov	r2, #5
   197a0:	movw	r1, #14904	; 0x3a38
   197a4:	movt	r1, #2
   197a8:	mov	r0, r6
   197ac:	bl	11b58 <dcgettext@plt>
   197b0:	ldr	r1, [r7]
   197b4:	bl	11a14 <fputs_unlocked@plt>
   197b8:	mov	r2, #5
   197bc:	movw	r1, #14960	; 0x3a70
   197c0:	movt	r1, #2
   197c4:	mov	r0, r6
   197c8:	bl	11b58 <dcgettext@plt>
   197cc:	ldr	r1, [r7]
   197d0:	bl	11a14 <fputs_unlocked@plt>
   197d4:	mov	r2, #5
   197d8:	movw	r1, #15036	; 0x3abc
   197dc:	movt	r1, #2
   197e0:	mov	r0, r6
   197e4:	bl	11b58 <dcgettext@plt>
   197e8:	ldr	r1, [r7]
   197ec:	bl	11a14 <fputs_unlocked@plt>
   197f0:	mov	r2, #5
   197f4:	movw	r1, #15056	; 0x3ad0
   197f8:	movt	r1, #2
   197fc:	mov	r0, r6
   19800:	bl	11b58 <dcgettext@plt>
   19804:	ldr	r1, [r7]
   19808:	bl	11a14 <fputs_unlocked@plt>
   1980c:	mov	r2, #5
   19810:	movw	r1, #15260	; 0x3b9c
   19814:	movt	r1, #2
   19818:	mov	r0, r6
   1981c:	bl	11b58 <dcgettext@plt>
   19820:	ldr	r1, [r7]
   19824:	bl	11a14 <fputs_unlocked@plt>
   19828:	mov	r2, #5
   1982c:	movw	r1, #15472	; 0x3c70
   19830:	movt	r1, #2
   19834:	mov	r0, r6
   19838:	bl	11b58 <dcgettext@plt>
   1983c:	ldr	r1, [r7]
   19840:	bl	11a14 <fputs_unlocked@plt>
   19844:	mov	r2, #5
   19848:	movw	r1, #15548	; 0x3cbc
   1984c:	movt	r1, #2
   19850:	mov	r0, r6
   19854:	bl	11b58 <dcgettext@plt>
   19858:	ldr	r1, [r7]
   1985c:	bl	11a14 <fputs_unlocked@plt>
   19860:	mov	r2, #5
   19864:	movw	r1, #15824	; 0x3dd0
   19868:	movt	r1, #2
   1986c:	mov	r0, r6
   19870:	bl	11b58 <dcgettext@plt>
   19874:	ldr	r1, [r7]
   19878:	bl	11a14 <fputs_unlocked@plt>
   1987c:	mov	r2, #5
   19880:	movw	r1, #16104	; 0x3ee8
   19884:	movt	r1, #2
   19888:	mov	r0, r6
   1988c:	bl	11b58 <dcgettext@plt>
   19890:	ldr	r1, [r7]
   19894:	bl	11a14 <fputs_unlocked@plt>
   19898:	mov	r2, #5
   1989c:	movw	r1, #16124	; 0x3efc
   198a0:	movt	r1, #2
   198a4:	mov	r0, r6
   198a8:	bl	11b58 <dcgettext@plt>
   198ac:	ldr	r1, [r7]
   198b0:	bl	11a14 <fputs_unlocked@plt>
   198b4:	mov	r2, #5
   198b8:	movw	r1, #16244	; 0x3f74
   198bc:	movt	r1, #2
   198c0:	mov	r0, r6
   198c4:	bl	11b58 <dcgettext@plt>
   198c8:	ldr	r1, [r7]
   198cc:	bl	11a14 <fputs_unlocked@plt>
   198d0:	mov	r2, #5
   198d4:	movw	r1, #16524	; 0x408c
   198d8:	movt	r1, #2
   198dc:	mov	r0, r6
   198e0:	bl	11b58 <dcgettext@plt>
   198e4:	ldr	r1, [r7]
   198e8:	bl	11a14 <fputs_unlocked@plt>
   198ec:	mov	r2, #5
   198f0:	movw	r1, #16872	; 0x41e8
   198f4:	movt	r1, #2
   198f8:	mov	r0, r6
   198fc:	bl	11b58 <dcgettext@plt>
   19900:	ldr	r1, [r7]
   19904:	bl	11a14 <fputs_unlocked@plt>
   19908:	mov	r2, #5
   1990c:	movw	r1, #17016	; 0x4278
   19910:	movt	r1, #2
   19914:	mov	r0, r6
   19918:	bl	11b58 <dcgettext@plt>
   1991c:	ldr	r1, [r7]
   19920:	bl	11a14 <fputs_unlocked@plt>
   19924:	mov	r2, #5
   19928:	movw	r1, #17232	; 0x4350
   1992c:	movt	r1, #2
   19930:	mov	r0, r6
   19934:	bl	11b58 <dcgettext@plt>
   19938:	mov	r1, r0
   1993c:	movw	r2, #17688	; 0x4518
   19940:	movt	r2, #2
   19944:	mov	r0, #1
   19948:	bl	11db0 <__printf_chk@plt>
   1994c:	mov	r2, #5
   19950:	movw	r1, #17696	; 0x4520
   19954:	movt	r1, #2
   19958:	mov	r0, r6
   1995c:	bl	11b58 <dcgettext@plt>
   19960:	ldr	r1, [r7]
   19964:	bl	11a14 <fputs_unlocked@plt>
   19968:	mov	r2, #5
   1996c:	movw	r1, #17760	; 0x4560
   19970:	movt	r1, #2
   19974:	mov	r0, r6
   19978:	bl	11b58 <dcgettext@plt>
   1997c:	ldr	r1, [r7]
   19980:	bl	11a14 <fputs_unlocked@plt>
   19984:	mov	r2, #5
   19988:	movw	r1, #17808	; 0x4590
   1998c:	movt	r1, #2
   19990:	mov	r0, r6
   19994:	bl	11b58 <dcgettext@plt>
   19998:	ldr	r1, [r7]
   1999c:	bl	11a14 <fputs_unlocked@plt>
   199a0:	mov	r2, #5
   199a4:	movw	r1, #17864	; 0x45c8
   199a8:	movt	r1, #2
   199ac:	mov	r0, r6
   199b0:	bl	11b58 <dcgettext@plt>
   199b4:	ldr	r1, [r7]
   199b8:	bl	11a14 <fputs_unlocked@plt>
   199bc:	mov	r2, #5
   199c0:	movw	r1, #18468	; 0x4824
   199c4:	movt	r1, #2
   199c8:	mov	r0, r6
   199cc:	bl	11b58 <dcgettext@plt>
   199d0:	ldr	r1, [r7]
   199d4:	bl	11a14 <fputs_unlocked@plt>
   199d8:	ldr	lr, [pc, #560]	; 19c10 <__assert_fail@plt+0x7cc8>
   199dc:	ldr	ip, [lr]
   199e0:	ldr	r4, [lr, #4]
   199e4:	ldrd	r8, [lr, #8]
   199e8:	subs	r1, ip, #0
   199ec:	str	ip, [sp]
   199f0:	ldrd	r2, [lr, #16]
   199f4:	str	r4, [sp, #4]
   199f8:	ldrd	r4, [lr, #24]
   199fc:	strd	r8, [sp, #8]
   19a00:	ldrd	r8, [lr, #32]
   19a04:	strd	r2, [sp, #16]
   19a08:	ldrd	r2, [lr, #40]	; 0x28
   19a0c:	strd	r4, [sp, #24]
   19a10:	ldrd	r4, [lr, #48]	; 0x30
   19a14:	strd	r8, [sp, #32]
   19a18:	strd	r2, [sp, #40]	; 0x28
   19a1c:	strd	r4, [sp, #48]	; 0x30
   19a20:	movwne	r5, #21060	; 0x5244
   19a24:	mov	r4, sp
   19a28:	movtne	r5, #2
   19a2c:	bne	19b24 <__assert_fail@plt+0x7bdc>
   19a30:	ldr	r4, [r4, #4]
   19a34:	movw	r1, #18700	; 0x490c
   19a38:	movt	r1, #2
   19a3c:	mov	r2, #5
   19a40:	cmp	r4, #0
   19a44:	beq	19b38 <__assert_fail@plt+0x7bf0>
   19a48:	mov	r0, #0
   19a4c:	bl	11b58 <dcgettext@plt>
   19a50:	mov	r1, r0
   19a54:	movw	r3, #18724	; 0x4924
   19a58:	movt	r3, #2
   19a5c:	movw	r2, #18764	; 0x494c
   19a60:	movt	r2, #2
   19a64:	mov	r0, #1
   19a68:	bl	11db0 <__printf_chk@plt>
   19a6c:	mov	r1, #0
   19a70:	mov	r0, #5
   19a74:	bl	11e28 <setlocale@plt>
   19a78:	cmp	r0, #0
   19a7c:	movweq	r5, #21060	; 0x5244
   19a80:	movteq	r5, #2
   19a84:	beq	19aa8 <__assert_fail@plt+0x7b60>
   19a88:	movw	r1, #18780	; 0x495c
   19a8c:	movt	r1, #2
   19a90:	mov	r2, #3
   19a94:	movw	r5, #21060	; 0x5244
   19a98:	movt	r5, #2
   19a9c:	bl	11f0c <strncmp@plt>
   19aa0:	cmp	r0, #0
   19aa4:	bne	19bf0 <__assert_fail@plt+0x7ca8>
   19aa8:	mov	r2, #5
   19aac:	movw	r1, #18856	; 0x49a8
   19ab0:	movt	r1, #2
   19ab4:	mov	r0, #0
   19ab8:	bl	11b58 <dcgettext@plt>
   19abc:	mov	r1, r0
   19ac0:	movw	r3, #21060	; 0x5244
   19ac4:	movt	r3, #2
   19ac8:	movw	r2, #18724	; 0x4924
   19acc:	movt	r2, #2
   19ad0:	mov	r0, #1
   19ad4:	bl	11db0 <__printf_chk@plt>
   19ad8:	mov	r2, #5
   19adc:	movw	r1, #18884	; 0x49c4
   19ae0:	movt	r1, #2
   19ae4:	mov	r0, #0
   19ae8:	bl	11b58 <dcgettext@plt>
   19aec:	movw	r2, #20764	; 0x511c
   19af0:	movt	r2, #2
   19af4:	cmp	r4, r5
   19af8:	movw	r3, #16120	; 0x3ef8
   19afc:	movt	r3, #2
   19b00:	mov	r1, r0
   19b04:	moveq	r3, r2
   19b08:	mov	r2, r4
   19b0c:	mov	r0, #1
   19b10:	bl	11db0 <__printf_chk@plt>
   19b14:	b	19744 <__assert_fail@plt+0x77fc>
   19b18:	ldr	r1, [r4, #8]!
   19b1c:	cmp	r1, #0
   19b20:	beq	19a30 <__assert_fail@plt+0x7ae8>
   19b24:	mov	r0, r5
   19b28:	bl	11a2c <strcmp@plt>
   19b2c:	cmp	r0, #0
   19b30:	bne	19b18 <__assert_fail@plt+0x7bd0>
   19b34:	b	19a30 <__assert_fail@plt+0x7ae8>
   19b38:	mov	r0, r4
   19b3c:	bl	11b58 <dcgettext@plt>
   19b40:	mov	r1, r0
   19b44:	movw	r3, #18724	; 0x4924
   19b48:	movt	r3, #2
   19b4c:	movw	r2, #18764	; 0x494c
   19b50:	movt	r2, #2
   19b54:	mov	r0, #1
   19b58:	bl	11db0 <__printf_chk@plt>
   19b5c:	mov	r1, r4
   19b60:	mov	r0, #5
   19b64:	bl	11e28 <setlocale@plt>
   19b68:	cmp	r0, #0
   19b6c:	beq	19b88 <__assert_fail@plt+0x7c40>
   19b70:	movw	r1, #18780	; 0x495c
   19b74:	movt	r1, #2
   19b78:	mov	r2, #3
   19b7c:	bl	11f0c <strncmp@plt>
   19b80:	cmp	r0, #0
   19b84:	bne	19be4 <__assert_fail@plt+0x7c9c>
   19b88:	mov	r2, #5
   19b8c:	movw	r1, #18856	; 0x49a8
   19b90:	movt	r1, #2
   19b94:	mov	r0, #0
   19b98:	bl	11b58 <dcgettext@plt>
   19b9c:	mov	r1, r0
   19ba0:	movw	r3, #21060	; 0x5244
   19ba4:	movt	r3, #2
   19ba8:	movw	r2, #18724	; 0x4924
   19bac:	movt	r2, #2
   19bb0:	mov	r0, #1
   19bb4:	bl	11db0 <__printf_chk@plt>
   19bb8:	movw	r1, #18884	; 0x49c4
   19bbc:	movt	r1, #2
   19bc0:	mov	r2, #5
   19bc4:	mov	r0, #0
   19bc8:	bl	11b58 <dcgettext@plt>
   19bcc:	movw	r4, #21060	; 0x5244
   19bd0:	movt	r4, #2
   19bd4:	movw	r3, #20764	; 0x511c
   19bd8:	movt	r3, #2
   19bdc:	mov	r1, r0
   19be0:	b	19b08 <__assert_fail@plt+0x7bc0>
   19be4:	movw	r5, #21060	; 0x5244
   19be8:	movt	r5, #2
   19bec:	mov	r4, r5
   19bf0:	mov	r2, #5
   19bf4:	movw	r1, #18784	; 0x4960
   19bf8:	movt	r1, #2
   19bfc:	mov	r0, #0
   19c00:	bl	11b58 <dcgettext@plt>
   19c04:	ldr	r1, [r7]
   19c08:	bl	11a14 <fputs_unlocked@plt>
   19c0c:	b	19aa8 <__assert_fail@plt+0x7b60>
   19c10:	andeq	r3, r2, ip, lsl #8
   19c14:	mov	r0, #1
   19c18:	b	196f4 <__assert_fail@plt+0x77ac>
   19c1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19c20:	mov	r5, r1
   19c24:	mov	r4, r2
   19c28:	strd	r6, [sp, #8]
   19c2c:	mov	r7, r3
   19c30:	strd	r8, [sp, #16]
   19c34:	strd	sl, [sp, #24]
   19c38:	mov	sl, r0
   19c3c:	str	lr, [sp, #32]
   19c40:	sub	sp, sp, #12
   19c44:	str	r2, [sp]
   19c48:	bl	11d50 <strlen@plt>
   19c4c:	ldr	fp, [r5]
   19c50:	cmp	fp, #0
   19c54:	beq	19d24 <__assert_fail@plt+0x7ddc>
   19c58:	mov	r6, #0
   19c5c:	mov	r8, r0
   19c60:	mvn	r9, #0
   19c64:	str	r6, [sp, #4]
   19c68:	b	19c94 <__assert_fail@plt+0x7d4c>
   19c6c:	bl	11b40 <memcmp@plt>
   19c70:	ldr	r3, [sp, #4]
   19c74:	cmp	r0, #0
   19c78:	movne	r3, #1
   19c7c:	str	r3, [sp, #4]
   19c80:	ldr	fp, [r5, #4]!
   19c84:	add	r6, r6, #1
   19c88:	add	r4, r4, r7
   19c8c:	cmp	fp, #0
   19c90:	beq	19cf0 <__assert_fail@plt+0x7da8>
   19c94:	mov	r2, r8
   19c98:	mov	r1, sl
   19c9c:	mov	r0, fp
   19ca0:	bl	11f0c <strncmp@plt>
   19ca4:	cmp	r0, #0
   19ca8:	mov	r0, fp
   19cac:	bne	19c80 <__assert_fail@plt+0x7d38>
   19cb0:	bl	11d50 <strlen@plt>
   19cb4:	ldr	r3, [sp]
   19cb8:	cmp	r0, r8
   19cbc:	mov	r2, r7
   19cc0:	mov	r1, r4
   19cc4:	mla	r0, r7, r9, r3
   19cc8:	beq	19d1c <__assert_fail@plt+0x7dd4>
   19ccc:	cmn	r9, #1
   19cd0:	moveq	r9, r6
   19cd4:	beq	19c80 <__assert_fail@plt+0x7d38>
   19cd8:	ldr	r3, [sp]
   19cdc:	cmp	r3, #0
   19ce0:	bne	19c6c <__assert_fail@plt+0x7d24>
   19ce4:	mov	r3, #1
   19ce8:	str	r3, [sp, #4]
   19cec:	b	19c80 <__assert_fail@plt+0x7d38>
   19cf0:	ldr	r3, [sp, #4]
   19cf4:	cmp	r3, #0
   19cf8:	mvnne	r9, #1
   19cfc:	mov	r0, r9
   19d00:	add	sp, sp, #12
   19d04:	ldrd	r4, [sp]
   19d08:	ldrd	r6, [sp, #8]
   19d0c:	ldrd	r8, [sp, #16]
   19d10:	ldrd	sl, [sp, #24]
   19d14:	add	sp, sp, #32
   19d18:	pop	{pc}		; (ldr pc, [sp], #4)
   19d1c:	mov	r9, r6
   19d20:	b	19cfc <__assert_fail@plt+0x7db4>
   19d24:	mvn	r9, #0
   19d28:	b	19cfc <__assert_fail@plt+0x7db4>
   19d2c:	strd	r4, [sp, #-16]!
   19d30:	str	r6, [sp, #8]
   19d34:	mov	r6, r0
   19d38:	ldr	r0, [r1]
   19d3c:	str	lr, [sp, #12]
   19d40:	cmp	r0, #0
   19d44:	beq	19d88 <__assert_fail@plt+0x7e40>
   19d48:	mov	r4, r1
   19d4c:	mov	r5, #0
   19d50:	b	19d64 <__assert_fail@plt+0x7e1c>
   19d54:	ldr	r0, [r4, #4]!
   19d58:	add	r5, r5, #1
   19d5c:	cmp	r0, #0
   19d60:	beq	19d88 <__assert_fail@plt+0x7e40>
   19d64:	mov	r1, r6
   19d68:	bl	11a2c <strcmp@plt>
   19d6c:	cmp	r0, #0
   19d70:	bne	19d54 <__assert_fail@plt+0x7e0c>
   19d74:	mov	r0, r5
   19d78:	ldrd	r4, [sp]
   19d7c:	ldr	r6, [sp, #8]
   19d80:	add	sp, sp, #12
   19d84:	pop	{pc}		; (ldr pc, [sp], #4)
   19d88:	ldrd	r4, [sp]
   19d8c:	mvn	r0, #0
   19d90:	ldr	r6, [sp, #8]
   19d94:	add	sp, sp, #12
   19d98:	pop	{pc}		; (ldr pc, [sp], #4)
   19d9c:	cmn	r2, #1
   19da0:	strd	r4, [sp, #-16]!
   19da4:	mov	r5, r1
   19da8:	movweq	r1, #21368	; 0x5378
   19dac:	movwne	r1, #21396	; 0x5394
   19db0:	str	r6, [sp, #8]
   19db4:	movteq	r1, #2
   19db8:	movtne	r1, #2
   19dbc:	str	lr, [sp, #12]
   19dc0:	mov	r6, r0
   19dc4:	sub	sp, sp, #8
   19dc8:	mov	r2, #5
   19dcc:	mov	r0, #0
   19dd0:	bl	11b58 <dcgettext@plt>
   19dd4:	mov	r4, r0
   19dd8:	mov	r2, r5
   19ddc:	mov	r1, #8
   19de0:	mov	r0, #0
   19de4:	bl	1f48c <__assert_fail@plt+0xd544>
   19de8:	mov	r5, r0
   19dec:	mov	r1, r6
   19df0:	mov	r0, #1
   19df4:	bl	1f7bc <__assert_fail@plt+0xd874>
   19df8:	mov	r1, #0
   19dfc:	mov	r3, r5
   19e00:	str	r0, [sp]
   19e04:	mov	r2, r4
   19e08:	mov	r0, r1
   19e0c:	bl	11c90 <error@plt>
   19e10:	add	sp, sp, #8
   19e14:	ldrd	r4, [sp]
   19e18:	ldr	r6, [sp, #8]
   19e1c:	add	sp, sp, #12
   19e20:	pop	{pc}		; (ldr pc, [sp], #4)
   19e24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19e28:	mov	r4, r1
   19e2c:	movw	r1, #21428	; 0x53b4
   19e30:	movt	r1, #2
   19e34:	strd	r6, [sp, #8]
   19e38:	mov	r6, r0
   19e3c:	mov	r7, r2
   19e40:	mov	r0, #0
   19e44:	strd	r8, [sp, #16]
   19e48:	mov	r2, #5
   19e4c:	strd	sl, [sp, #24]
   19e50:	movw	sl, #25288	; 0x62c8
   19e54:	movt	sl, #3
   19e58:	str	lr, [sp, #32]
   19e5c:	sub	sp, sp, #12
   19e60:	bl	11b58 <dcgettext@plt>
   19e64:	ldr	r1, [sl]
   19e68:	bl	11a14 <fputs_unlocked@plt>
   19e6c:	ldr	fp, [r6]
   19e70:	cmp	fp, #0
   19e74:	beq	19f14 <__assert_fail@plt+0x7fcc>
   19e78:	movw	r3, #21452	; 0x53cc
   19e7c:	movt	r3, #2
   19e80:	mov	r9, #0
   19e84:	str	r3, [sp]
   19e88:	movw	r3, #21460	; 0x53d4
   19e8c:	movt	r3, #2
   19e90:	mov	r5, r9
   19e94:	str	r3, [sp, #4]
   19e98:	b	19ed0 <__assert_fail@plt+0x7f88>
   19e9c:	mov	r0, fp
   19ea0:	mov	r9, r4
   19ea4:	bl	1f7cc <__assert_fail@plt+0xd884>
   19ea8:	mov	r3, r0
   19eac:	mov	r1, #1
   19eb0:	ldr	r2, [sp]
   19eb4:	mov	r0, r8
   19eb8:	bl	11dd4 <__fprintf_chk@plt>
   19ebc:	ldr	fp, [r6, #4]!
   19ec0:	add	r5, r5, #1
   19ec4:	add	r4, r4, r7
   19ec8:	cmp	fp, #0
   19ecc:	beq	19f14 <__assert_fail@plt+0x7fcc>
   19ed0:	cmp	r5, #0
   19ed4:	mov	r1, r4
   19ed8:	ldr	r8, [sl]
   19edc:	mov	r2, r7
   19ee0:	mov	r0, r9
   19ee4:	beq	19e9c <__assert_fail@plt+0x7f54>
   19ee8:	bl	11b40 <memcmp@plt>
   19eec:	cmp	r0, #0
   19ef0:	bne	19e9c <__assert_fail@plt+0x7f54>
   19ef4:	mov	r0, fp
   19ef8:	bl	1f7cc <__assert_fail@plt+0xd884>
   19efc:	mov	r3, r0
   19f00:	mov	r1, #1
   19f04:	ldr	r2, [sp, #4]
   19f08:	mov	r0, r8
   19f0c:	bl	11dd4 <__fprintf_chk@plt>
   19f10:	b	19ebc <__assert_fail@plt+0x7f74>
   19f14:	ldr	r0, [sl]
   19f18:	ldr	r3, [r0, #20]
   19f1c:	ldr	r2, [r0, #24]
   19f20:	cmp	r3, r2
   19f24:	bcs	19f54 <__assert_fail@plt+0x800c>
   19f28:	add	r1, r3, #1
   19f2c:	mov	r2, #10
   19f30:	str	r1, [r0, #20]
   19f34:	strb	r2, [r3]
   19f38:	add	sp, sp, #12
   19f3c:	ldrd	r4, [sp]
   19f40:	ldrd	r6, [sp, #8]
   19f44:	ldrd	r8, [sp, #16]
   19f48:	ldrd	sl, [sp, #24]
   19f4c:	add	sp, sp, #32
   19f50:	pop	{pc}		; (ldr pc, [sp], #4)
   19f54:	mov	r1, #10
   19f58:	add	sp, sp, #12
   19f5c:	ldrd	r4, [sp]
   19f60:	ldrd	r6, [sp, #8]
   19f64:	ldrd	r8, [sp, #16]
   19f68:	ldrd	sl, [sp, #24]
   19f6c:	ldr	lr, [sp, #32]
   19f70:	add	sp, sp, #36	; 0x24
   19f74:	b	11e1c <__overflow@plt>
   19f78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19f7c:	mov	r5, r1
   19f80:	mov	r4, r2
   19f84:	ldrb	ip, [sp, #32]
   19f88:	strd	r6, [sp, #8]
   19f8c:	mov	r7, r0
   19f90:	mov	r6, r3
   19f94:	str	r8, [sp, #16]
   19f98:	str	lr, [sp, #20]
   19f9c:	cmp	ip, #0
   19fa0:	beq	19fd4 <__assert_fail@plt+0x808c>
   19fa4:	mov	r2, r3
   19fa8:	mov	r1, r4
   19fac:	ldr	r3, [sp, #24]
   19fb0:	mov	r0, r5
   19fb4:	bl	19c1c <__assert_fail@plt+0x7cd4>
   19fb8:	cmp	r0, #0
   19fbc:	blt	19fe4 <__assert_fail@plt+0x809c>
   19fc0:	ldrd	r4, [sp]
   19fc4:	ldrd	r6, [sp, #8]
   19fc8:	ldr	r8, [sp, #16]
   19fcc:	add	sp, sp, #20
   19fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   19fd4:	mov	r1, r2
   19fd8:	mov	r0, r5
   19fdc:	bl	19d2c <__assert_fail@plt+0x7de4>
   19fe0:	b	19fb8 <__assert_fail@plt+0x8070>
   19fe4:	mov	r2, r0
   19fe8:	mov	r1, r5
   19fec:	mov	r0, r7
   19ff0:	bl	19d9c <__assert_fail@plt+0x7e54>
   19ff4:	mov	r0, r4
   19ff8:	mov	r1, r6
   19ffc:	ldr	r2, [sp, #24]
   1a000:	bl	19e24 <__assert_fail@plt+0x7edc>
   1a004:	ldr	r3, [sp, #28]
   1a008:	blx	r3
   1a00c:	mvn	r0, #0
   1a010:	b	19fc0 <__assert_fail@plt+0x8078>
   1a014:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a018:	strd	r6, [sp, #8]
   1a01c:	ldr	r7, [r1]
   1a020:	str	r8, [sp, #16]
   1a024:	str	lr, [sp, #20]
   1a028:	cmp	r7, #0
   1a02c:	beq	1a06c <__assert_fail@plt+0x8124>
   1a030:	mov	r6, r3
   1a034:	mov	r8, r0
   1a038:	mov	r4, r2
   1a03c:	mov	r5, r1
   1a040:	b	1a050 <__assert_fail@plt+0x8108>
   1a044:	ldr	r7, [r5, #4]!
   1a048:	cmp	r7, #0
   1a04c:	beq	1a06c <__assert_fail@plt+0x8124>
   1a050:	mov	r1, r4
   1a054:	mov	r2, r6
   1a058:	mov	r0, r8
   1a05c:	add	r4, r4, r6
   1a060:	bl	11b40 <memcmp@plt>
   1a064:	cmp	r0, #0
   1a068:	bne	1a044 <__assert_fail@plt+0x80fc>
   1a06c:	mov	r0, r7
   1a070:	ldrd	r4, [sp]
   1a074:	ldrd	r6, [sp, #8]
   1a078:	ldr	r8, [sp, #16]
   1a07c:	add	sp, sp, #20
   1a080:	pop	{pc}		; (ldr pc, [sp], #4)
   1a084:	movw	r3, #26816	; 0x68c0
   1a088:	movt	r3, #3
   1a08c:	str	r0, [r3]
   1a090:	bx	lr
   1a094:	movw	r3, #26816	; 0x68c0
   1a098:	movt	r3, #3
   1a09c:	strb	r0, [r3, #4]
   1a0a0:	bx	lr
   1a0a4:	movw	r3, #25300	; 0x62d4
   1a0a8:	movt	r3, #3
   1a0ac:	strd	r4, [sp, #-16]!
   1a0b0:	ldr	r0, [r3]
   1a0b4:	str	r6, [sp, #8]
   1a0b8:	str	lr, [sp, #12]
   1a0bc:	sub	sp, sp, #8
   1a0c0:	bl	22200 <__assert_fail@plt+0x102b8>
   1a0c4:	cmp	r0, #0
   1a0c8:	beq	1a0f4 <__assert_fail@plt+0x81ac>
   1a0cc:	movw	r4, #26816	; 0x68c0
   1a0d0:	movt	r4, #3
   1a0d4:	ldrb	r6, [r4, #4]
   1a0d8:	bl	11d74 <__errno_location@plt>
   1a0dc:	mov	r5, r0
   1a0e0:	cmp	r6, #0
   1a0e4:	beq	1a120 <__assert_fail@plt+0x81d8>
   1a0e8:	ldr	r3, [r0]
   1a0ec:	cmp	r3, #32
   1a0f0:	bne	1a120 <__assert_fail@plt+0x81d8>
   1a0f4:	movw	r3, #25288	; 0x62c8
   1a0f8:	movt	r3, #3
   1a0fc:	ldr	r0, [r3]
   1a100:	bl	22200 <__assert_fail@plt+0x102b8>
   1a104:	cmp	r0, #0
   1a108:	bne	1a168 <__assert_fail@plt+0x8220>
   1a10c:	add	sp, sp, #8
   1a110:	ldrd	r4, [sp]
   1a114:	ldr	r6, [sp, #8]
   1a118:	add	sp, sp, #12
   1a11c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a120:	movw	r1, #21468	; 0x53dc
   1a124:	movt	r1, #2
   1a128:	mov	r2, #5
   1a12c:	mov	r0, #0
   1a130:	bl	11b58 <dcgettext@plt>
   1a134:	mov	r6, r0
   1a138:	ldr	r0, [r4]
   1a13c:	cmp	r0, #0
   1a140:	beq	1a178 <__assert_fail@plt+0x8230>
   1a144:	ldr	r4, [r5]
   1a148:	bl	1f5e0 <__assert_fail@plt+0xd698>
   1a14c:	mov	r3, r0
   1a150:	movw	r2, #14100	; 0x3714
   1a154:	movt	r2, #2
   1a158:	mov	r0, #0
   1a15c:	str	r6, [sp]
   1a160:	mov	r1, r4
   1a164:	bl	11c90 <error@plt>
   1a168:	movw	r3, #25200	; 0x6270
   1a16c:	movt	r3, #3
   1a170:	ldr	r0, [r3]
   1a174:	bl	11abc <_exit@plt>
   1a178:	mov	r3, r6
   1a17c:	movw	r2, #14316	; 0x37ec
   1a180:	movt	r2, #2
   1a184:	ldr	r1, [r5]
   1a188:	bl	11c90 <error@plt>
   1a18c:	b	1a168 <__assert_fail@plt+0x8220>
   1a190:	mov	r3, #0
   1a194:	movw	ip, #43913	; 0xab89
   1a198:	movt	ip, #61389	; 0xefcd
   1a19c:	movw	r1, #56574	; 0xdcfe
   1a1a0:	movt	r1, #39098	; 0x98ba
   1a1a4:	movw	r2, #21622	; 0x5476
   1a1a8:	movt	r2, #4146	; 0x1032
   1a1ac:	push	{lr}		; (str lr, [sp, #-4]!)
   1a1b0:	movw	lr, #8961	; 0x2301
   1a1b4:	movt	lr, #26437	; 0x6745
   1a1b8:	str	r3, [r0, #20]
   1a1bc:	str	lr, [r0]
   1a1c0:	str	ip, [r0, #4]
   1a1c4:	str	r1, [r0, #8]
   1a1c8:	strd	r2, [r0, #12]
   1a1cc:	str	r3, [r0, #24]
   1a1d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1d4:	mov	r3, r0
   1a1d8:	mov	r0, r1
   1a1dc:	ldr	r2, [r3]
   1a1e0:	str	r2, [r1]
   1a1e4:	ldr	r2, [r3, #4]
   1a1e8:	str	r2, [r1, #4]
   1a1ec:	ldr	r2, [r3, #8]
   1a1f0:	str	r2, [r1, #8]
   1a1f4:	ldr	r3, [r3, #12]
   1a1f8:	str	r3, [r1, #12]
   1a1fc:	bx	lr
   1a200:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a204:	mov	r4, r2
   1a208:	bic	r3, r1, #3
   1a20c:	ldr	r5, [r2]
   1a210:	ldr	ip, [r2, #20]
   1a214:	strd	r6, [sp, #8]
   1a218:	strd	r8, [sp, #16]
   1a21c:	strd	sl, [sp, #24]
   1a220:	str	lr, [sp, #32]
   1a224:	sub	sp, sp, #124	; 0x7c
   1a228:	add	lr, r0, r3
   1a22c:	str	r5, [sp, #68]	; 0x44
   1a230:	str	r2, [sp, #116]	; 0x74
   1a234:	ldr	r2, [r2, #16]
   1a238:	adds	r2, r2, r1
   1a23c:	movcs	r1, #1
   1a240:	movcc	r1, #0
   1a244:	cmp	r0, lr
   1a248:	mov	lr, r4
   1a24c:	ldr	r4, [r4, #4]
   1a250:	add	ip, ip, r1
   1a254:	str	r2, [lr, #16]
   1a258:	ldr	r2, [lr, #8]
   1a25c:	str	ip, [lr, #20]
   1a260:	str	r4, [sp, #24]
   1a264:	str	r2, [sp, #28]
   1a268:	ldr	r2, [lr, #12]
   1a26c:	str	r2, [sp, #32]
   1a270:	bcs	1ad38 <__assert_fail@plt+0x8df0>
   1a274:	sub	r3, r3, #1
   1a278:	add	r2, r0, #128	; 0x80
   1a27c:	bic	r3, r3, #63	; 0x3f
   1a280:	add	r8, r0, #64	; 0x40
   1a284:	add	r3, r3, r2
   1a288:	str	r8, [sp, #4]
   1a28c:	str	r3, [sp, #76]	; 0x4c
   1a290:	movw	r3, #42104	; 0xa478
   1a294:	movt	r3, #55146	; 0xd76a
   1a298:	str	r3, [sp, #80]	; 0x50
   1a29c:	movw	r3, #46934	; 0xb756
   1a2a0:	movt	r3, #59591	; 0xe8c7
   1a2a4:	str	r3, [sp, #84]	; 0x54
   1a2a8:	movw	r3, #28891	; 0x70db
   1a2ac:	movt	r3, #9248	; 0x2420
   1a2b0:	str	r3, [sp, #88]	; 0x58
   1a2b4:	movw	r3, #52974	; 0xceee
   1a2b8:	movt	r3, #49597	; 0xc1bd
   1a2bc:	str	r3, [sp, #92]	; 0x5c
   1a2c0:	movw	r3, #50730	; 0xc62a
   1a2c4:	movt	r3, #18311	; 0x4787
   1a2c8:	str	r3, [sp, #96]	; 0x60
   1a2cc:	movw	r3, #17939	; 0x4613
   1a2d0:	movt	r3, #43056	; 0xa830
   1a2d4:	str	r3, [sp, #100]	; 0x64
   1a2d8:	movw	r3, #38145	; 0x9501
   1a2dc:	movt	r3, #64838	; 0xfd46
   1a2e0:	str	r3, [sp, #104]	; 0x68
   1a2e4:	movw	r3, #39128	; 0x98d8
   1a2e8:	movt	r3, #27008	; 0x6980
   1a2ec:	str	r3, [sp, #108]	; 0x6c
   1a2f0:	movw	r3, #55230	; 0xd7be
   1a2f4:	movt	r3, #35164	; 0x895c
   1a2f8:	str	r3, [sp, #112]	; 0x70
   1a2fc:	ldr	r0, [sp, #4]
   1a300:	ldr	r1, [sp, #68]	; 0x44
   1a304:	ldr	lr, [sp, #80]	; 0x50
   1a308:	ldr	r2, [sp, #32]
   1a30c:	ldr	r7, [sp, #24]
   1a310:	add	sl, r1, lr
   1a314:	ldr	r6, [sp, #28]
   1a318:	ldr	lr, [sp, #84]	; 0x54
   1a31c:	ldr	r4, [r0, #-64]	; 0xffffffc0
   1a320:	eor	ip, r6, r2
   1a324:	eor	r9, r7, r6
   1a328:	and	ip, ip, r7
   1a32c:	ldr	r8, [r0, #-60]	; 0xffffffc4
   1a330:	add	r3, r2, lr
   1a334:	eor	ip, ip, r2
   1a338:	ldr	lr, [sp, #88]	; 0x58
   1a33c:	add	sl, sl, r4
   1a340:	add	sl, ip, sl
   1a344:	add	sl, r7, sl, ror #25
   1a348:	add	r3, r3, r8
   1a34c:	str	r8, [sp, #36]	; 0x24
   1a350:	str	r4, [sp, #72]	; 0x48
   1a354:	movw	r4, #63407	; 0xf7af
   1a358:	movt	r4, #35652	; 0x8b44
   1a35c:	add	r1, r6, lr
   1a360:	ldr	lr, [sp, #92]	; 0x5c
   1a364:	and	r9, r9, sl
   1a368:	eor	r9, r9, r6
   1a36c:	eor	r6, sl, r7
   1a370:	str	r4, [sp, #60]	; 0x3c
   1a374:	add	r9, r9, r3
   1a378:	movw	r4, #4386	; 0x1122
   1a37c:	movt	r4, #27536	; 0x6b90
   1a380:	add	r9, sl, r9, ror #20
   1a384:	add	r2, r7, lr
   1a388:	mov	lr, r0
   1a38c:	mov	ip, lr
   1a390:	ldr	fp, [lr, #-56]	; 0xffffffc8
   1a394:	and	r6, r6, r9
   1a398:	eor	r6, r6, r7
   1a39c:	movw	r0, #4015	; 0xfaf
   1a3a0:	movt	r0, #62844	; 0xf57c
   1a3a4:	ldr	r5, [lr, #-44]	; 0xffffffd4
   1a3a8:	ldr	lr, [lr, #-52]	; 0xffffffcc
   1a3ac:	add	r1, r1, fp
   1a3b0:	add	r6, r6, r1
   1a3b4:	ldr	r7, [sp, #100]	; 0x64
   1a3b8:	add	r6, r9, r6, ror #15
   1a3bc:	str	lr, [sp, #8]
   1a3c0:	ldr	r3, [sp, #8]
   1a3c4:	str	fp, [sp, #40]	; 0x28
   1a3c8:	ldr	lr, [ip, #-48]	; 0xffffffd0
   1a3cc:	str	r5, [sp, #48]	; 0x30
   1a3d0:	add	r2, r2, r3
   1a3d4:	mov	r3, ip
   1a3d8:	ldr	ip, [ip, #-40]	; 0xffffffd8
   1a3dc:	ldr	r1, [r3, #-32]	; 0xffffffe0
   1a3e0:	mov	r8, lr
   1a3e4:	movw	lr, #29075	; 0x7193
   1a3e8:	movt	lr, #64920	; 0xfd98
   1a3ec:	add	r0, r8, r0
   1a3f0:	add	r0, r0, sl
   1a3f4:	mov	fp, ip
   1a3f8:	ldr	ip, [r3, #-36]	; 0xffffffdc
   1a3fc:	str	r1, [sp, #16]
   1a400:	ldr	r1, [sp, #96]	; 0x60
   1a404:	str	ip, [sp, #12]
   1a408:	eor	ip, sl, r9
   1a40c:	and	ip, ip, r6
   1a410:	str	r8, [sp, #44]	; 0x2c
   1a414:	movw	r8, #17294	; 0x438e
   1a418:	movt	r8, #42617	; 0xa679
   1a41c:	eor	sl, sl, ip
   1a420:	str	fp, [sp, #52]	; 0x34
   1a424:	add	sl, sl, r2
   1a428:	add	fp, fp, r7
   1a42c:	add	r1, r5, r1
   1a430:	ldr	r5, [r3, #-28]	; 0xffffffe4
   1a434:	add	fp, fp, r6
   1a438:	add	r1, r1, r9
   1a43c:	movw	r7, #2081	; 0x821
   1a440:	movt	r7, #18868	; 0x49b4
   1a444:	ldr	ip, [r3, #-24]	; 0xffffffe8
   1a448:	eor	r3, r9, r6
   1a44c:	ldr	r2, [sp, #60]	; 0x3c
   1a450:	str	ip, [sp, #20]
   1a454:	add	ip, r6, sl, ror #10
   1a458:	ldr	sl, [sp, #12]
   1a45c:	and	r3, r3, ip
   1a460:	str	r5, [sp, #56]	; 0x38
   1a464:	add	r5, r5, r2
   1a468:	eor	r9, r9, r3
   1a46c:	eor	r3, r6, ip
   1a470:	ldr	r2, [sp, #108]	; 0x6c
   1a474:	add	r0, r9, r0
   1a478:	ldr	r9, [sp, #104]	; 0x68
   1a47c:	add	r0, ip, r0, ror #25
   1a480:	and	r3, r3, r0
   1a484:	eor	r6, r6, r3
   1a488:	add	r1, r6, r1
   1a48c:	ldr	r6, [sp, #20]
   1a490:	add	sl, sl, r9
   1a494:	add	r1, r0, r1, ror #20
   1a498:	ldr	r9, [sp, #16]
   1a49c:	add	sl, sl, ip
   1a4a0:	eor	r3, r0, r1
   1a4a4:	add	r5, r5, r1
   1a4a8:	sub	r6, r6, #41984	; 0xa400
   1a4ac:	sub	r6, r6, #79	; 0x4f
   1a4b0:	add	r9, r9, r2
   1a4b4:	eor	r2, ip, r0
   1a4b8:	and	r2, r2, r1
   1a4bc:	add	r9, r9, r0
   1a4c0:	eor	r2, r2, ip
   1a4c4:	add	fp, r2, fp
   1a4c8:	ldr	r2, [sp, #4]
   1a4cc:	add	fp, r1, fp, ror #15
   1a4d0:	and	r3, r3, fp
   1a4d4:	add	r6, r6, fp
   1a4d8:	eor	r3, r3, r0
   1a4dc:	movw	r0, #9570	; 0x2562
   1a4e0:	movt	r0, #63006	; 0xf61e
   1a4e4:	add	sl, r3, sl
   1a4e8:	ldr	ip, [r2, #-20]	; 0xffffffec
   1a4ec:	add	sl, fp, sl, ror #10
   1a4f0:	eor	r2, r1, fp
   1a4f4:	ldr	r3, [sp, #112]	; 0x70
   1a4f8:	and	r2, r2, sl
   1a4fc:	eor	r1, r1, r2
   1a500:	add	r9, r1, r9
   1a504:	str	ip, [sp, #60]	; 0x3c
   1a508:	add	r9, sl, r9, ror #25
   1a50c:	ldr	r1, [sp, #4]
   1a510:	add	ip, ip, r3
   1a514:	eor	r3, fp, sl
   1a518:	and	r3, r3, r9
   1a51c:	add	ip, ip, sl
   1a520:	eor	fp, fp, r3
   1a524:	eor	r3, sl, r9
   1a528:	add	r5, fp, r5
   1a52c:	add	r5, r9, r5, ror #20
   1a530:	ldr	r2, [r1, #-16]
   1a534:	and	r3, r3, r5
   1a538:	eor	sl, sl, r3
   1a53c:	eor	r3, r9, r5
   1a540:	add	r6, sl, r6
   1a544:	mov	sl, r1
   1a548:	add	r6, r5, r6, ror #15
   1a54c:	add	r4, r2, r4
   1a550:	ldr	sl, [sl, #-8]
   1a554:	add	r4, r4, r9
   1a558:	and	r3, r3, r6
   1a55c:	eor	r3, r3, r9
   1a560:	ldr	r9, [sp, #52]	; 0x34
   1a564:	add	r3, r3, ip
   1a568:	mov	ip, r1
   1a56c:	ldr	r1, [r1, #-12]
   1a570:	add	r3, r6, r3, ror #10
   1a574:	add	r8, sl, r8
   1a578:	mov	fp, r1
   1a57c:	add	lr, r1, lr
   1a580:	ldr	r1, [sp, #36]	; 0x24
   1a584:	add	lr, lr, r5
   1a588:	str	fp, [sp, #64]	; 0x40
   1a58c:	movw	fp, #4189	; 0x105d
   1a590:	movt	fp, #54831	; 0xd62f
   1a594:	add	r0, r1, r0
   1a598:	eor	r1, r5, r6
   1a59c:	and	r1, r1, r3
   1a5a0:	eor	r5, r5, r1
   1a5a4:	eor	r1, r6, r3
   1a5a8:	add	r4, r5, r4
   1a5ac:	movw	r5, #45888	; 0xb340
   1a5b0:	movt	r5, #49216	; 0xc040
   1a5b4:	add	r4, r3, r4, ror #25
   1a5b8:	add	r5, r9, r5
   1a5bc:	ldr	r9, [sp, #76]	; 0x4c
   1a5c0:	and	r1, r1, r4
   1a5c4:	add	r0, r0, r4
   1a5c8:	eor	r1, r1, r6
   1a5cc:	add	r6, r8, r6
   1a5d0:	add	lr, r1, lr
   1a5d4:	eor	r1, r3, r4
   1a5d8:	add	lr, r4, lr, ror #20
   1a5dc:	mov	r8, ip
   1a5e0:	ldr	ip, [ip, #-4]
   1a5e4:	add	r8, r8, #64	; 0x40
   1a5e8:	and	r1, r1, lr
   1a5ec:	cmp	r9, r8
   1a5f0:	eor	r1, r1, r3
   1a5f4:	movw	r9, #23121	; 0x5a51
   1a5f8:	movt	r9, #9822	; 0x265e
   1a5fc:	add	r6, r1, r6
   1a600:	str	r8, [sp, #4]
   1a604:	add	r6, lr, r6, ror #15
   1a608:	eor	r1, r4, lr
   1a60c:	add	r7, ip, r7
   1a610:	add	r7, r7, r3
   1a614:	add	r5, r5, lr
   1a618:	and	r1, r1, r6
   1a61c:	movw	r8, #5203	; 0x1453
   1a620:	movt	r8, #580	; 0x244
   1a624:	eor	r4, r4, r1
   1a628:	ldr	r1, [sp, #60]	; 0x3c
   1a62c:	add	r7, r4, r7
   1a630:	add	r7, r6, r7, ror #10
   1a634:	ldr	r4, [sp, #72]	; 0x48
   1a638:	eor	r3, r6, r7
   1a63c:	and	r3, r3, lr
   1a640:	add	r9, r1, r9
   1a644:	eor	r3, r3, r6
   1a648:	add	r9, r9, r6
   1a64c:	add	r0, r3, r0
   1a650:	movw	lr, #51114	; 0xc7aa
   1a654:	movt	lr, #59830	; 0xe9b6
   1a658:	add	r0, r7, r0, ror #27
   1a65c:	add	lr, r4, lr
   1a660:	ldr	r4, [sp, #48]	; 0x30
   1a664:	eor	r1, r7, r0
   1a668:	add	lr, lr, r7
   1a66c:	and	r6, r6, r1
   1a670:	ldr	r1, [sp, #20]
   1a674:	eor	r6, r6, r7
   1a678:	add	r5, r6, r5
   1a67c:	movw	r6, #59009	; 0xe681
   1a680:	movt	r6, #55457	; 0xd8a1
   1a684:	add	r5, r0, r5, ror #23
   1a688:	add	fp, r4, fp
   1a68c:	add	fp, fp, r0
   1a690:	add	r6, ip, r6
   1a694:	eor	r3, r0, r5
   1a698:	add	r8, r1, r8
   1a69c:	and	r3, r3, r7
   1a6a0:	add	r8, r8, r5
   1a6a4:	eor	r3, r3, r0
   1a6a8:	movw	r7, #64456	; 0xfbc8
   1a6ac:	movt	r7, #59347	; 0xe7d3
   1a6b0:	add	r4, r3, r9
   1a6b4:	add	r4, r5, r4, ror #18
   1a6b8:	movw	r9, #2006	; 0x7d6
   1a6bc:	movt	r9, #49975	; 0xc337
   1a6c0:	add	r9, sl, r9
   1a6c4:	eor	r3, r5, r4
   1a6c8:	add	r6, r6, r4
   1a6cc:	and	r0, r0, r3
   1a6d0:	eor	r0, r0, r5
   1a6d4:	add	lr, r0, lr
   1a6d8:	ldr	r0, [sp, #44]	; 0x2c
   1a6dc:	add	lr, r4, lr, ror #12
   1a6e0:	eor	r3, r4, lr
   1a6e4:	and	r3, r3, r5
   1a6e8:	movw	r5, #52710	; 0xcde6
   1a6ec:	movt	r5, #8673	; 0x21e1
   1a6f0:	eor	r3, r3, r4
   1a6f4:	add	r3, r3, fp
   1a6f8:	add	r7, r0, r7
   1a6fc:	ldr	r0, [sp, #56]	; 0x38
   1a700:	add	r3, lr, r3, ror #27
   1a704:	add	r7, r7, lr
   1a708:	eor	r1, lr, r3
   1a70c:	and	r1, r1, r4
   1a710:	movw	r4, #3463	; 0xd87
   1a714:	movt	r4, #62677	; 0xf4d5
   1a718:	eor	r1, r1, lr
   1a71c:	add	r8, r1, r8
   1a720:	add	r5, r0, r5
   1a724:	ldr	r0, [sp, #16]
   1a728:	add	r8, r3, r8, ror #23
   1a72c:	add	r5, r5, r3
   1a730:	eor	r1, r3, r8
   1a734:	add	r9, r9, r8
   1a738:	and	r1, r1, lr
   1a73c:	ldr	lr, [sp, #8]
   1a740:	eor	r1, r1, r3
   1a744:	add	r1, r1, r6
   1a748:	movw	r6, #5357	; 0x14ed
   1a74c:	movt	r6, #17754	; 0x455a
   1a750:	add	r1, r8, r1, ror #18
   1a754:	add	r6, r0, r6
   1a758:	add	r4, lr, r4
   1a75c:	eor	lr, r8, r1
   1a760:	and	lr, lr, r3
   1a764:	add	r4, r4, r1
   1a768:	eor	lr, lr, r8
   1a76c:	add	r7, lr, r7
   1a770:	add	r7, r1, r7, ror #12
   1a774:	eor	r3, r1, r7
   1a778:	add	r6, r6, r7
   1a77c:	and	r8, r8, r3
   1a780:	ldr	r3, [sp, #64]	; 0x40
   1a784:	eor	r8, r8, r1
   1a788:	add	lr, r8, r5
   1a78c:	movw	r5, #59653	; 0xe905
   1a790:	movt	r5, #43491	; 0xa9e3
   1a794:	add	lr, r7, lr, ror #27
   1a798:	ldr	fp, [sp, #40]	; 0x28
   1a79c:	movw	r8, #41976	; 0xa3f8
   1a7a0:	movt	r8, #64751	; 0xfcef
   1a7a4:	eor	r0, r7, lr
   1a7a8:	add	r5, r3, r5
   1a7ac:	and	r0, r0, r1
   1a7b0:	ldr	r1, [sp, #12]
   1a7b4:	add	r5, r5, lr
   1a7b8:	eor	r0, r0, r7
   1a7bc:	add	r9, r0, r9
   1a7c0:	add	r8, fp, r8
   1a7c4:	add	r9, lr, r9, ror #23
   1a7c8:	movw	fp, #59972	; 0xea44
   1a7cc:	movt	fp, #42174	; 0xa4be
   1a7d0:	eor	r3, lr, r9
   1a7d4:	add	r8, r8, r9
   1a7d8:	and	r7, r7, r3
   1a7dc:	eor	r7, r7, lr
   1a7e0:	add	r0, r7, r4
   1a7e4:	movw	r4, #729	; 0x2d9
   1a7e8:	movt	r4, #26479	; 0x676f
   1a7ec:	add	r0, r9, r0, ror #18
   1a7f0:	movw	r7, #19594	; 0x4c8a
   1a7f4:	movt	r7, #36138	; 0x8d2a
   1a7f8:	add	r4, r1, r4
   1a7fc:	eor	r3, r9, r0
   1a800:	add	r4, r4, r0
   1a804:	and	r3, r3, lr
   1a808:	movw	lr, #14658	; 0x3942
   1a80c:	movt	lr, #65530	; 0xfffa
   1a810:	eor	r3, r3, r9
   1a814:	add	r6, r3, r6
   1a818:	add	r7, r2, r7
   1a81c:	add	r6, r0, r6, ror #12
   1a820:	eor	r3, r0, r6
   1a824:	add	r7, r7, r6
   1a828:	and	r3, r3, r9
   1a82c:	ldr	r9, [sp, #60]	; 0x3c
   1a830:	eor	r3, r3, r0
   1a834:	add	r3, r3, r5
   1a838:	ldr	r5, [sp, #48]	; 0x30
   1a83c:	add	r3, r6, r3, ror #27
   1a840:	eor	r1, r6, r3
   1a844:	and	r1, r1, r0
   1a848:	movw	r0, #63105	; 0xf681
   1a84c:	movt	r0, #34673	; 0x8771
   1a850:	eor	r1, r1, r6
   1a854:	add	r8, r1, r8
   1a858:	add	lr, r5, lr
   1a85c:	ldr	r5, [sp, #16]
   1a860:	add	r8, r3, r8, ror #23
   1a864:	add	lr, lr, r3
   1a868:	eor	r1, r3, r8
   1a86c:	and	r1, r1, r6
   1a870:	movw	r6, #14348	; 0x380c
   1a874:	movt	r6, #64997	; 0xfde5
   1a878:	eor	r1, r1, r3
   1a87c:	add	r1, r1, r4
   1a880:	add	r0, r5, r0
   1a884:	add	r1, r8, r1, ror #18
   1a888:	movw	r5, #24866	; 0x6122
   1a88c:	movt	r5, #28061	; 0x6d9d
   1a890:	add	r5, r9, r5
   1a894:	add	r0, r0, r8
   1a898:	eor	r4, r8, r1
   1a89c:	add	r5, r5, r1
   1a8a0:	and	r3, r3, r4
   1a8a4:	add	r6, sl, r6
   1a8a8:	eor	r3, r3, r8
   1a8ac:	ldr	r8, [sp, #36]	; 0x24
   1a8b0:	movw	r9, #53161	; 0xcfa9
   1a8b4:	movt	r9, #19422	; 0x4bde
   1a8b8:	add	r7, r3, r7
   1a8bc:	add	r7, r1, r7, ror #12
   1a8c0:	eor	r4, r4, r7
   1a8c4:	eor	r1, r1, r7
   1a8c8:	add	lr, r4, lr
   1a8cc:	add	r6, r6, r7
   1a8d0:	add	lr, r7, lr, ror #28
   1a8d4:	add	fp, r8, fp
   1a8d8:	movw	r8, #19296	; 0x4b60
   1a8dc:	movt	r8, #63163	; 0xf6bb
   1a8e0:	movw	r4, #48240	; 0xbc70
   1a8e4:	movt	r4, #48831	; 0xbebf
   1a8e8:	eor	r1, r1, lr
   1a8ec:	add	r0, r1, r0
   1a8f0:	ldr	r1, [sp, #44]	; 0x2c
   1a8f4:	eor	r7, r7, lr
   1a8f8:	add	r0, lr, r0, ror #21
   1a8fc:	add	fp, fp, lr
   1a900:	eor	r7, r7, r0
   1a904:	eor	lr, lr, r0
   1a908:	add	r3, r7, r5
   1a90c:	ldr	r5, [sp, #64]	; 0x40
   1a910:	add	r9, r1, r9
   1a914:	add	r3, r0, r3, ror #16
   1a918:	ldr	r1, [sp, #12]
   1a91c:	add	r9, r9, r0
   1a920:	eor	r0, r0, r3
   1a924:	add	r8, r1, r8
   1a928:	eor	r1, lr, r3
   1a92c:	ldr	lr, [sp, #20]
   1a930:	add	r1, r1, r6
   1a934:	add	r8, r8, r3
   1a938:	add	r1, r3, r1, ror #9
   1a93c:	eor	r0, r0, r1
   1a940:	eor	r3, r3, r1
   1a944:	add	r4, lr, r4
   1a948:	add	lr, r0, fp
   1a94c:	ldr	fp, [sp, #40]	; 0x28
   1a950:	add	lr, r1, lr, ror #28
   1a954:	add	r4, r4, r1
   1a958:	movw	r0, #32454	; 0x7ec6
   1a95c:	movt	r0, #10395	; 0x289b
   1a960:	eor	r3, r3, lr
   1a964:	eor	r1, r1, lr
   1a968:	add	r3, r3, r9
   1a96c:	ldr	r9, [sp, #72]	; 0x48
   1a970:	add	r0, r5, r0
   1a974:	add	r3, lr, r3, ror #21
   1a978:	movw	r5, #10234	; 0x27fa
   1a97c:	movt	r5, #60065	; 0xeaa1
   1a980:	add	r0, r0, lr
   1a984:	eor	r1, r1, r3
   1a988:	eor	lr, lr, r3
   1a98c:	add	r6, r1, r8
   1a990:	ldr	r1, [sp, #8]
   1a994:	movw	r8, #12421	; 0x3085
   1a998:	movt	r8, #54511	; 0xd4ef
   1a99c:	add	r6, r3, r6, ror #16
   1a9a0:	add	r5, r9, r5
   1a9a4:	add	r5, r5, r3
   1a9a8:	eor	lr, lr, r6
   1a9ac:	add	lr, lr, r4
   1a9b0:	movw	r4, #7429	; 0x1d05
   1a9b4:	movt	r4, #1160	; 0x488
   1a9b8:	add	r8, r1, r8
   1a9bc:	add	lr, r6, lr, ror #9
   1a9c0:	eor	r1, r3, r6
   1a9c4:	ldr	r3, [sp, #52]	; 0x34
   1a9c8:	add	r8, r8, r6
   1a9cc:	eor	r1, r1, lr
   1a9d0:	eor	r6, r6, lr
   1a9d4:	add	r1, r1, r0
   1a9d8:	movw	r0, #53305	; 0xd039
   1a9dc:	movt	r0, #55764	; 0xd9d4
   1a9e0:	add	r1, lr, r1, ror #28
   1a9e4:	add	r4, r3, r4
   1a9e8:	ldr	r3, [sp, #56]	; 0x38
   1a9ec:	add	r4, r4, lr
   1a9f0:	eor	lr, lr, r1
   1a9f4:	add	r0, r3, r0
   1a9f8:	eor	r3, r6, r1
   1a9fc:	add	r6, r3, r5
   1aa00:	movw	r5, #39397	; 0x99e5
   1aa04:	movt	r5, #59099	; 0xe6db
   1aa08:	add	r6, r1, r6, ror #21
   1aa0c:	add	r0, r0, r1
   1aa10:	add	r5, r2, r5
   1aa14:	eor	lr, lr, r6
   1aa18:	eor	r3, r1, r6
   1aa1c:	add	r7, lr, r8
   1aa20:	add	r5, r5, r6
   1aa24:	add	r7, r6, r7, ror #16
   1aa28:	movw	lr, #31992	; 0x7cf8
   1aa2c:	movt	lr, #8098	; 0x1fa2
   1aa30:	add	lr, ip, lr
   1aa34:	eor	r3, r3, r7
   1aa38:	eor	r6, r6, r7
   1aa3c:	add	r3, r3, r4
   1aa40:	add	lr, lr, r7
   1aa44:	add	r3, r7, r3, ror #9
   1aa48:	movw	r4, #22117	; 0x5665
   1aa4c:	movt	r4, #50348	; 0xc4ac
   1aa50:	add	r4, fp, r4
   1aa54:	movw	fp, #65431	; 0xff97
   1aa58:	movt	fp, #17194	; 0x432a
   1aa5c:	eor	r6, r6, r3
   1aa60:	add	r6, r6, r0
   1aa64:	eor	r7, r7, r3
   1aa68:	add	r6, r3, r6, ror #28
   1aa6c:	add	r4, r4, r3
   1aa70:	movw	r0, #8772	; 0x2244
   1aa74:	movt	r0, #62505	; 0xf429
   1aa78:	eor	r7, r7, r6
   1aa7c:	eor	r3, r3, r6
   1aa80:	add	r7, r7, r5
   1aa84:	add	r0, r9, r0
   1aa88:	ldr	r9, [sp, #12]
   1aa8c:	add	r7, r6, r7, ror #21
   1aa90:	add	r0, r0, r6
   1aa94:	movw	r5, #9127	; 0x23a7
   1aa98:	movt	r5, #43924	; 0xab94
   1aa9c:	eor	r3, r3, r7
   1aaa0:	eor	r6, r6, r7
   1aaa4:	add	r1, r3, lr
   1aaa8:	add	r5, sl, r5
   1aaac:	add	r1, r7, r1, ror #16
   1aab0:	add	fp, r9, fp
   1aab4:	mvn	r9, r7
   1aab8:	movw	lr, #41017	; 0xa039
   1aabc:	movt	lr, #64659	; 0xfc93
   1aac0:	eor	sl, r6, r1
   1aac4:	mvn	r3, r1
   1aac8:	add	sl, sl, r4
   1aacc:	ldr	r4, [sp, #48]	; 0x30
   1aad0:	add	fp, fp, r7
   1aad4:	add	sl, r1, sl, ror #9
   1aad8:	add	r5, r5, r1
   1aadc:	movw	r6, #22979	; 0x59c3
   1aae0:	movt	r6, #25947	; 0x655b
   1aae4:	orr	r8, r9, sl
   1aae8:	mvn	r9, sl
   1aaec:	eor	r8, r8, r1
   1aaf0:	ldr	r1, [sp, #8]
   1aaf4:	add	r6, r2, r6
   1aaf8:	add	r8, r8, r0
   1aafc:	add	lr, r4, lr
   1ab00:	add	r8, sl, r8, ror #26
   1ab04:	add	lr, lr, sl
   1ab08:	movw	r4, #52370	; 0xcc92
   1ab0c:	movt	r4, #36620	; 0x8f0c
   1ab10:	movw	r0, #62589	; 0xf47d
   1ab14:	movt	r0, #65519	; 0xffef
   1ab18:	orr	r3, r3, r8
   1ab1c:	eor	sl, sl, r3
   1ab20:	add	r6, r6, r8
   1ab24:	add	sl, sl, fp
   1ab28:	ldr	fp, [sp, #20]
   1ab2c:	add	r4, r1, r4
   1ab30:	add	r7, r8, sl, ror #22
   1ab34:	mvn	r1, r8
   1ab38:	ldr	sl, [sp, #36]	; 0x24
   1ab3c:	orr	r9, r9, r7
   1ab40:	mvn	r2, r7
   1ab44:	eor	r8, r8, r9
   1ab48:	movw	r9, #59104	; 0xe6e0
   1ab4c:	movt	r9, #65068	; 0xfe2c
   1ab50:	add	r5, r8, r5
   1ab54:	ldr	r8, [sp, #16]
   1ab58:	add	r9, ip, r9
   1ab5c:	add	r0, fp, r0
   1ab60:	add	r5, r7, r5, ror #17
   1ab64:	ldr	ip, [sp, #52]	; 0x34
   1ab68:	movw	fp, #24017	; 0x5dd1
   1ab6c:	movt	fp, #34180	; 0x8584
   1ab70:	add	fp, sl, fp
   1ab74:	movw	sl, #32335	; 0x7e4f
   1ab78:	movt	sl, #28584	; 0x6fa8
   1ab7c:	orr	r1, r1, r5
   1ab80:	add	sl, r8, sl
   1ab84:	movw	r8, #17172	; 0x4314
   1ab88:	movt	r8, #41729	; 0xa301
   1ab8c:	add	r4, r4, r7
   1ab90:	add	r8, ip, r8
   1ab94:	ldr	ip, [sp, #64]	; 0x40
   1ab98:	eor	r7, r7, r1
   1ab9c:	add	lr, r7, lr
   1aba0:	movw	r7, #4513	; 0x11a1
   1aba4:	movt	r7, #19976	; 0x4e08
   1aba8:	add	lr, r5, lr, ror #11
   1abac:	mvn	r1, r5
   1abb0:	add	r0, r0, r5
   1abb4:	orr	r3, r2, lr
   1abb8:	mvn	r2, lr
   1abbc:	add	r7, ip, r7
   1abc0:	ldr	ip, [sp, #44]	; 0x2c
   1abc4:	eor	r5, r5, r3
   1abc8:	add	r5, r5, r6
   1abcc:	movw	r6, #32386	; 0x7e82
   1abd0:	movt	r6, #63315	; 0xf753
   1abd4:	add	r3, lr, r5, ror #26
   1abd8:	add	fp, fp, lr
   1abdc:	movw	r5, #62005	; 0xf235
   1abe0:	movt	r5, #48442	; 0xbd3a
   1abe4:	add	sl, sl, r3
   1abe8:	add	r6, ip, r6
   1abec:	orr	ip, r1, r3
   1abf0:	eor	ip, ip, lr
   1abf4:	mvn	r1, r3
   1abf8:	ldr	lr, [sp, #60]	; 0x3c
   1abfc:	add	ip, ip, r4
   1ac00:	movw	r4, #53947	; 0xd2bb
   1ac04:	movt	r4, #10967	; 0x2ad7
   1ac08:	add	ip, r3, ip, ror #22
   1ac0c:	orr	r2, r2, ip
   1ac10:	add	r9, r9, ip
   1ac14:	eor	r3, r3, r2
   1ac18:	mvn	r2, ip
   1ac1c:	add	r0, r3, r0
   1ac20:	ldr	r3, [sp, #40]	; 0x28
   1ac24:	add	r5, lr, r5
   1ac28:	add	r0, ip, r0, ror #17
   1ac2c:	movw	lr, #54161	; 0xd391
   1ac30:	movt	lr, #60294	; 0xeb86
   1ac34:	orr	r1, r1, r0
   1ac38:	add	r8, r8, r0
   1ac3c:	eor	r1, r1, ip
   1ac40:	add	r1, r1, fp
   1ac44:	add	r4, r3, r4
   1ac48:	ldr	r3, [sp, #56]	; 0x38
   1ac4c:	add	r1, r0, r1, ror #11
   1ac50:	orr	r2, r2, r1
   1ac54:	mvn	ip, r1
   1ac58:	eor	r2, r2, r0
   1ac5c:	add	r7, r7, r1
   1ac60:	add	r2, r2, sl
   1ac64:	add	lr, r3, lr
   1ac68:	add	r2, r1, r2, ror #26
   1ac6c:	mvn	r3, r0
   1ac70:	orr	r3, r3, r2
   1ac74:	mvn	r0, r2
   1ac78:	eor	r3, r3, r1
   1ac7c:	add	r6, r6, r2
   1ac80:	add	r3, r3, r9
   1ac84:	add	r3, r2, r3, ror #22
   1ac88:	orr	ip, ip, r3
   1ac8c:	mvn	fp, r3
   1ac90:	eor	ip, ip, r2
   1ac94:	add	r5, r5, r3
   1ac98:	add	ip, ip, r8
   1ac9c:	add	ip, r3, ip, ror #17
   1aca0:	orr	r0, r0, ip
   1aca4:	mvn	sl, ip
   1aca8:	eor	r0, r0, r3
   1acac:	ldr	r3, [sp, #32]
   1acb0:	add	r4, r4, ip
   1acb4:	add	r0, r0, r7
   1acb8:	add	r0, ip, r0, ror #11
   1acbc:	orr	fp, fp, r0
   1acc0:	mvn	r1, r0
   1acc4:	eor	fp, fp, ip
   1acc8:	add	lr, lr, r0
   1accc:	add	fp, fp, r6
   1acd0:	ldr	r6, [sp, #28]
   1acd4:	add	fp, r0, fp, ror #26
   1acd8:	orr	sl, sl, fp
   1acdc:	mvn	r2, fp
   1ace0:	eor	sl, sl, r0
   1ace4:	ldr	r0, [sp, #68]	; 0x44
   1ace8:	add	sl, sl, r5
   1acec:	add	sl, fp, sl, ror #22
   1acf0:	orr	r1, r1, sl
   1acf4:	add	r3, r3, sl
   1acf8:	eor	r1, r1, fp
   1acfc:	add	r0, r0, fp
   1ad00:	add	r1, r1, r4
   1ad04:	str	r3, [sp, #32]
   1ad08:	add	r1, sl, r1, ror #17
   1ad0c:	str	r0, [sp, #68]	; 0x44
   1ad10:	add	r3, r6, r1
   1ad14:	orr	r2, r2, r1
   1ad18:	eor	r2, r2, sl
   1ad1c:	str	r3, [sp, #28]
   1ad20:	add	r2, r2, lr
   1ad24:	ldr	r7, [sp, #24]
   1ad28:	add	r2, r1, r2, ror #11
   1ad2c:	add	r3, r7, r2
   1ad30:	str	r3, [sp, #24]
   1ad34:	bne	1a2fc <__assert_fail@plt+0x83b4>
   1ad38:	ldr	r2, [sp, #68]	; 0x44
   1ad3c:	ldr	r3, [sp, #116]	; 0x74
   1ad40:	str	r2, [r3]
   1ad44:	ldr	r2, [sp, #24]
   1ad48:	str	r2, [r3, #4]
   1ad4c:	ldr	r2, [sp, #28]
   1ad50:	str	r2, [r3, #8]
   1ad54:	ldr	r2, [sp, #32]
   1ad58:	str	r2, [r3, #12]
   1ad5c:	add	sp, sp, #124	; 0x7c
   1ad60:	ldrd	r4, [sp]
   1ad64:	ldrd	r6, [sp, #8]
   1ad68:	ldrd	r8, [sp, #16]
   1ad6c:	ldrd	sl, [sp, #24]
   1ad70:	add	sp, sp, #32
   1ad74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ad7c:	mov	r4, r0
   1ad80:	mov	r5, r1
   1ad84:	ldr	r0, [r0, #24]
   1ad88:	ldr	r3, [r4, #16]
   1ad8c:	ldr	r1, [r4, #20]
   1ad90:	cmp	r0, #56	; 0x38
   1ad94:	strd	r6, [sp, #8]
   1ad98:	add	r7, r4, #28
   1ad9c:	movcc	r6, #64	; 0x40
   1ada0:	movcs	r6, #128	; 0x80
   1ada4:	str	r8, [sp, #16]
   1ada8:	movcc	r2, #56	; 0x38
   1adac:	movcs	r2, #120	; 0x78
   1adb0:	str	lr, [sp, #20]
   1adb4:	movcc	ip, #15
   1adb8:	movcs	ip, #31
   1adbc:	movcc	r8, #14
   1adc0:	movcs	r8, #30
   1adc4:	add	ip, r4, ip, lsl #2
   1adc8:	adds	r3, r3, r0
   1adcc:	add	r8, r4, r8, lsl #2
   1add0:	sub	r2, r2, r0
   1add4:	lsr	lr, r3, #29
   1add8:	addcs	r1, r1, #1
   1addc:	add	r0, r7, r0
   1ade0:	str	r3, [r4, #16]
   1ade4:	lsl	r3, r3, #3
   1ade8:	orr	lr, lr, r1, lsl #3
   1adec:	strcs	r1, [r4, #20]
   1adf0:	movw	r1, #21480	; 0x53e8
   1adf4:	movt	r1, #2
   1adf8:	str	r3, [r8, #28]
   1adfc:	str	lr, [ip, #28]
   1ae00:	bl	11ac8 <memcpy@plt>
   1ae04:	mov	r1, r6
   1ae08:	mov	r0, r7
   1ae0c:	mov	r2, r4
   1ae10:	bl	1a200 <__assert_fail@plt+0x82b8>
   1ae14:	mov	r1, r5
   1ae18:	mov	r0, r4
   1ae1c:	ldrd	r4, [sp]
   1ae20:	ldrd	r6, [sp, #8]
   1ae24:	ldr	r8, [sp, #16]
   1ae28:	ldr	lr, [sp, #20]
   1ae2c:	add	sp, sp, #24
   1ae30:	b	1a1d4 <__assert_fail@plt+0x828c>
   1ae34:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ae38:	mov	r5, r2
   1ae3c:	mov	r4, r0
   1ae40:	strd	r6, [sp, #8]
   1ae44:	mov	r6, r1
   1ae48:	strd	r8, [sp, #16]
   1ae4c:	ldr	r8, [r2, #24]
   1ae50:	str	sl, [sp, #24]
   1ae54:	str	lr, [sp, #28]
   1ae58:	cmp	r8, #0
   1ae5c:	bne	1af54 <__assert_fail@plt+0x900c>
   1ae60:	cmp	r6, #63	; 0x3f
   1ae64:	bls	1af2c <__assert_fail@plt+0x8fe4>
   1ae68:	tst	r4, #3
   1ae6c:	beq	1af14 <__assert_fail@plt+0x8fcc>
   1ae70:	cmp	r6, #64	; 0x40
   1ae74:	add	r7, r5, #28
   1ae78:	beq	1aff4 <__assert_fail@plt+0x90ac>
   1ae7c:	sub	r9, r6, #65	; 0x41
   1ae80:	lsr	r9, r9, #6
   1ae84:	add	r8, r9, #1
   1ae88:	add	r8, r4, r8, lsl #6
   1ae8c:	mov	r3, r4
   1ae90:	mov	r2, r7
   1ae94:	add	r4, r4, #64	; 0x40
   1ae98:	ldr	lr, [r3]
   1ae9c:	add	r3, r3, #16
   1aea0:	add	r2, r2, #16
   1aea4:	ldr	ip, [r3, #-12]
   1aea8:	ldr	r0, [r3, #-8]
   1aeac:	ldr	r1, [r3, #-4]
   1aeb0:	cmp	r3, r4
   1aeb4:	str	lr, [r2, #-16]
   1aeb8:	str	ip, [r2, #-12]
   1aebc:	str	r0, [r2, #-8]
   1aec0:	str	r1, [r2, #-4]
   1aec4:	bne	1ae98 <__assert_fail@plt+0x8f50>
   1aec8:	mov	r4, r3
   1aecc:	mov	r2, r5
   1aed0:	mov	r1, #64	; 0x40
   1aed4:	mov	r0, r7
   1aed8:	bl	1a200 <__assert_fail@plt+0x82b8>
   1aedc:	cmp	r4, r8
   1aee0:	bne	1ae8c <__assert_fail@plt+0x8f44>
   1aee4:	sub	r6, r6, #64	; 0x40
   1aee8:	sub	r6, r6, r9, lsl #6
   1aeec:	ldr	r4, [r5, #24]
   1aef0:	mov	r1, r8
   1aef4:	mov	r2, r6
   1aef8:	add	r0, r7, r4
   1aefc:	add	r4, r4, r6
   1af00:	bl	11ac8 <memcpy@plt>
   1af04:	cmp	r4, #63	; 0x3f
   1af08:	bhi	1af94 <__assert_fail@plt+0x904c>
   1af0c:	str	r4, [r5, #24]
   1af10:	b	1af3c <__assert_fail@plt+0x8ff4>
   1af14:	bic	r1, r6, #63	; 0x3f
   1af18:	mov	r0, r4
   1af1c:	mov	r2, r5
   1af20:	and	r6, r6, #63	; 0x3f
   1af24:	add	r4, r4, r1
   1af28:	bl	1a200 <__assert_fail@plt+0x82b8>
   1af2c:	cmp	r6, #0
   1af30:	movne	r8, r4
   1af34:	addne	r7, r5, #28
   1af38:	bne	1aeec <__assert_fail@plt+0x8fa4>
   1af3c:	ldrd	r4, [sp]
   1af40:	ldrd	r6, [sp, #8]
   1af44:	ldrd	r8, [sp, #16]
   1af48:	ldr	sl, [sp, #24]
   1af4c:	add	sp, sp, #28
   1af50:	pop	{pc}		; (ldr pc, [sp], #4)
   1af54:	rsb	r7, r8, #128	; 0x80
   1af58:	add	r9, r2, #28
   1af5c:	cmp	r7, r1
   1af60:	add	r0, r9, r8
   1af64:	movcs	r7, r1
   1af68:	mov	r1, r4
   1af6c:	mov	r2, r7
   1af70:	bl	11ac8 <memcpy@plt>
   1af74:	ldr	r1, [r5, #24]
   1af78:	add	r1, r7, r1
   1af7c:	cmp	r1, #64	; 0x40
   1af80:	str	r1, [r5, #24]
   1af84:	bhi	1afbc <__assert_fail@plt+0x9074>
   1af88:	add	r4, r4, r7
   1af8c:	sub	r6, r6, r7
   1af90:	b	1ae60 <__assert_fail@plt+0x8f18>
   1af94:	mov	r2, r5
   1af98:	mov	r0, r7
   1af9c:	sub	r4, r4, #64	; 0x40
   1afa0:	mov	r1, #64	; 0x40
   1afa4:	bl	1a200 <__assert_fail@plt+0x82b8>
   1afa8:	mov	r0, r7
   1afac:	mov	r2, r4
   1afb0:	add	r1, r5, #92	; 0x5c
   1afb4:	bl	11ac8 <memcpy@plt>
   1afb8:	b	1af0c <__assert_fail@plt+0x8fc4>
   1afbc:	mov	r2, r5
   1afc0:	mov	r0, r9
   1afc4:	bic	r1, r1, #63	; 0x3f
   1afc8:	bl	1a200 <__assert_fail@plt+0x82b8>
   1afcc:	ldr	r3, [r5, #24]
   1afd0:	add	r1, r8, r7
   1afd4:	mov	r0, r9
   1afd8:	bic	r1, r1, #63	; 0x3f
   1afdc:	add	r1, r9, r1
   1afe0:	and	r3, r3, #63	; 0x3f
   1afe4:	mov	r2, r3
   1afe8:	str	r3, [r5, #24]
   1afec:	bl	11ac8 <memcpy@plt>
   1aff0:	b	1af88 <__assert_fail@plt+0x9040>
   1aff4:	mov	r8, r4
   1aff8:	b	1aeec <__assert_fail@plt+0x8fa4>
   1affc:	movw	ip, #8961	; 0x2301
   1b000:	movt	ip, #26437	; 0x6745
   1b004:	str	r4, [sp, #-8]!
   1b008:	movw	r3, #43913	; 0xab89
   1b00c:	movt	r3, #61389	; 0xefcd
   1b010:	str	lr, [sp, #4]
   1b014:	sub	sp, sp, #160	; 0xa0
   1b018:	movw	lr, #56574	; 0xdcfe
   1b01c:	movt	lr, #39098	; 0x98ba
   1b020:	mov	r4, r2
   1b024:	str	ip, [sp, #4]
   1b028:	movw	ip, #21622	; 0x5476
   1b02c:	movt	ip, #4146	; 0x1032
   1b030:	str	r3, [sp, #8]
   1b034:	mov	r3, #0
   1b038:	add	r2, sp, #4
   1b03c:	str	lr, [sp, #12]
   1b040:	str	ip, [sp, #16]
   1b044:	str	r3, [sp, #20]
   1b048:	str	r3, [sp, #24]
   1b04c:	str	r3, [sp, #28]
   1b050:	bl	1ae34 <__assert_fail@plt+0x8eec>
   1b054:	mov	r1, r4
   1b058:	add	r0, sp, #4
   1b05c:	bl	1ad78 <__assert_fail@plt+0x8e30>
   1b060:	add	sp, sp, #160	; 0xa0
   1b064:	ldr	r4, [sp]
   1b068:	add	sp, sp, #4
   1b06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b070:	b	11a44 <posix_fadvise64@plt>
   1b074:	cmp	r0, #0
   1b078:	bxeq	lr
   1b07c:	str	r4, [sp, #-16]!
   1b080:	mov	r4, r1
   1b084:	strd	r6, [sp, #4]
   1b088:	mov	r6, #0
   1b08c:	mov	r7, #0
   1b090:	str	lr, [sp, #12]
   1b094:	sub	sp, sp, #16
   1b098:	bl	11dc8 <fileno@plt>
   1b09c:	mov	r2, r6
   1b0a0:	mov	r3, r7
   1b0a4:	strd	r6, [sp]
   1b0a8:	str	r4, [sp, #8]
   1b0ac:	bl	11a44 <posix_fadvise64@plt>
   1b0b0:	add	sp, sp, #16
   1b0b4:	ldr	r4, [sp]
   1b0b8:	ldrd	r6, [sp, #4]
   1b0bc:	add	sp, sp, #12
   1b0c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0c4:	strd	r4, [sp, #-12]!
   1b0c8:	mov	r4, r0
   1b0cc:	str	lr, [sp, #8]
   1b0d0:	sub	sp, sp, #12
   1b0d4:	bl	11dc8 <fileno@plt>
   1b0d8:	cmp	r0, #0
   1b0dc:	mov	r0, r4
   1b0e0:	blt	1b164 <__assert_fail@plt+0x921c>
   1b0e4:	bl	11cfc <__freading@plt>
   1b0e8:	cmp	r0, #0
   1b0ec:	bne	1b130 <__assert_fail@plt+0x91e8>
   1b0f0:	mov	r0, r4
   1b0f4:	bl	1b178 <__assert_fail@plt+0x9230>
   1b0f8:	cmp	r0, #0
   1b0fc:	beq	1b160 <__assert_fail@plt+0x9218>
   1b100:	bl	11d74 <__errno_location@plt>
   1b104:	mov	r5, r0
   1b108:	mov	r0, r4
   1b10c:	ldr	r4, [r5]
   1b110:	bl	11dec <fclose@plt>
   1b114:	cmp	r4, #0
   1b118:	mvnne	r0, #0
   1b11c:	strne	r4, [r5]
   1b120:	add	sp, sp, #12
   1b124:	ldrd	r4, [sp]
   1b128:	add	sp, sp, #8
   1b12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b130:	mov	r0, r4
   1b134:	bl	11dc8 <fileno@plt>
   1b138:	mov	r1, #1
   1b13c:	mov	r2, #0
   1b140:	mov	r3, #0
   1b144:	str	r1, [sp]
   1b148:	bl	11c24 <lseek64@plt>
   1b14c:	mvn	r3, #0
   1b150:	mvn	r2, #0
   1b154:	cmp	r1, r3
   1b158:	cmpeq	r0, r2
   1b15c:	bne	1b0f0 <__assert_fail@plt+0x91a8>
   1b160:	mov	r0, r4
   1b164:	add	sp, sp, #12
   1b168:	ldrd	r4, [sp]
   1b16c:	ldr	lr, [sp, #8]
   1b170:	add	sp, sp, #12
   1b174:	b	11dec <fclose@plt>
   1b178:	str	r4, [sp, #-8]!
   1b17c:	subs	r4, r0, #0
   1b180:	str	lr, [sp, #4]
   1b184:	sub	sp, sp, #8
   1b188:	beq	1b1a4 <__assert_fail@plt+0x925c>
   1b18c:	bl	11cfc <__freading@plt>
   1b190:	cmp	r0, #0
   1b194:	beq	1b1a4 <__assert_fail@plt+0x925c>
   1b198:	ldr	r3, [r4]
   1b19c:	tst	r3, #256	; 0x100
   1b1a0:	bne	1b1bc <__assert_fail@plt+0x9274>
   1b1a4:	mov	r0, r4
   1b1a8:	add	sp, sp, #8
   1b1ac:	ldr	r4, [sp]
   1b1b0:	ldr	lr, [sp, #4]
   1b1b4:	add	sp, sp, #8
   1b1b8:	b	11a68 <fflush@plt>
   1b1bc:	mov	r1, #1
   1b1c0:	mov	r2, #0
   1b1c4:	mov	r3, #0
   1b1c8:	mov	r0, r4
   1b1cc:	str	r1, [sp]
   1b1d0:	bl	1b6d0 <__assert_fail@plt+0x9788>
   1b1d4:	b	1b1a4 <__assert_fail@plt+0x925c>
   1b1d8:	ldr	r2, [r0]
   1b1dc:	ldrb	r3, [r2]
   1b1e0:	cmp	r3, #0
   1b1e4:	beq	1b2a4 <__assert_fail@plt+0x935c>
   1b1e8:	mov	r1, #0
   1b1ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1b1f0:	mov	ip, r1
   1b1f4:	b	1b238 <__assert_fail@plt+0x92f0>
   1b1f8:	cmp	r3, #65	; 0x41
   1b1fc:	bcc	1b214 <__assert_fail@plt+0x92cc>
   1b200:	cmp	r3, #90	; 0x5a
   1b204:	bls	1b270 <__assert_fail@plt+0x9328>
   1b208:	sub	r1, r3, #97	; 0x61
   1b20c:	cmp	r1, #25
   1b210:	bls	1b270 <__assert_fail@plt+0x9328>
   1b214:	cmp	r3, #126	; 0x7e
   1b218:	movne	ip, #0
   1b21c:	movne	r1, ip
   1b220:	beq	1b270 <__assert_fail@plt+0x9328>
   1b224:	add	r2, r2, #1
   1b228:	str	r2, [r0]
   1b22c:	ldrb	r3, [r2]
   1b230:	cmp	r3, #0
   1b234:	beq	1b29c <__assert_fail@plt+0x9354>
   1b238:	cmp	r1, #0
   1b23c:	bne	1b1f8 <__assert_fail@plt+0x92b0>
   1b240:	cmp	r3, #46	; 0x2e
   1b244:	beq	1b288 <__assert_fail@plt+0x9340>
   1b248:	cmp	r3, #90	; 0x5a
   1b24c:	bhi	1b278 <__assert_fail@plt+0x9330>
   1b250:	cmp	r3, #65	; 0x41
   1b254:	bcs	1b224 <__assert_fail@plt+0x92dc>
   1b258:	sub	lr, r3, #48	; 0x30
   1b25c:	cmp	lr, #9
   1b260:	bls	1b224 <__assert_fail@plt+0x92dc>
   1b264:	cmp	r3, #126	; 0x7e
   1b268:	movne	ip, #0
   1b26c:	b	1b224 <__assert_fail@plt+0x92dc>
   1b270:	mov	r1, #0
   1b274:	b	1b224 <__assert_fail@plt+0x92dc>
   1b278:	sub	lr, r3, #97	; 0x61
   1b27c:	cmp	lr, #25
   1b280:	bhi	1b264 <__assert_fail@plt+0x931c>
   1b284:	b	1b224 <__assert_fail@plt+0x92dc>
   1b288:	cmp	ip, #0
   1b28c:	moveq	ip, r2
   1b290:	moveq	r1, #1
   1b294:	movne	r1, #1
   1b298:	b	1b224 <__assert_fail@plt+0x92dc>
   1b29c:	mov	r0, ip
   1b2a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2a4:	mov	r0, r3
   1b2a8:	bx	lr
   1b2ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b2b0:	mov	r4, r0
   1b2b4:	mov	r5, r1
   1b2b8:	strd	r6, [sp, #8]
   1b2bc:	strd	r8, [sp, #16]
   1b2c0:	strd	sl, [sp, #24]
   1b2c4:	str	lr, [sp, #32]
   1b2c8:	sub	sp, sp, #28
   1b2cc:	bl	11a2c <strcmp@plt>
   1b2d0:	subs	r6, r0, #0
   1b2d4:	beq	1b568 <__assert_fail@plt+0x9620>
   1b2d8:	ldrb	r8, [r4]
   1b2dc:	cmp	r8, #0
   1b2e0:	beq	1b5dc <__assert_fail@plt+0x9694>
   1b2e4:	ldrb	r7, [r5]
   1b2e8:	cmp	r7, #0
   1b2ec:	beq	1b564 <__assert_fail@plt+0x961c>
   1b2f0:	movw	r0, #21544	; 0x5428
   1b2f4:	movt	r0, #2
   1b2f8:	mov	r1, r4
   1b2fc:	bl	11a2c <strcmp@plt>
   1b300:	cmp	r0, #0
   1b304:	beq	1b5dc <__assert_fail@plt+0x9694>
   1b308:	movw	r0, #21544	; 0x5428
   1b30c:	movt	r0, #2
   1b310:	mov	r1, r5
   1b314:	bl	11a2c <strcmp@plt>
   1b318:	cmp	r0, #0
   1b31c:	beq	1b564 <__assert_fail@plt+0x961c>
   1b320:	movw	r0, #21548	; 0x542c
   1b324:	movt	r0, #2
   1b328:	mov	r1, r4
   1b32c:	bl	11a2c <strcmp@plt>
   1b330:	cmp	r0, #0
   1b334:	beq	1b5dc <__assert_fail@plt+0x9694>
   1b338:	movw	r0, #21548	; 0x542c
   1b33c:	movt	r0, #2
   1b340:	mov	r1, r5
   1b344:	bl	11a2c <strcmp@plt>
   1b348:	cmp	r0, #0
   1b34c:	beq	1b564 <__assert_fail@plt+0x961c>
   1b350:	sub	r3, r8, #46	; 0x2e
   1b354:	clz	r3, r3
   1b358:	lsr	r3, r3, #5
   1b35c:	cmp	r7, #46	; 0x2e
   1b360:	moveq	r2, #0
   1b364:	andne	r2, r3, #1
   1b368:	cmp	r2, #0
   1b36c:	bne	1b5dc <__assert_fail@plt+0x9694>
   1b370:	sub	r7, r7, #46	; 0x2e
   1b374:	clz	r7, r7
   1b378:	lsr	r7, r7, #5
   1b37c:	cmp	r8, #46	; 0x2e
   1b380:	moveq	r8, #0
   1b384:	andne	r8, r7, #1
   1b388:	cmp	r8, #0
   1b38c:	bne	1b564 <__assert_fail@plt+0x961c>
   1b390:	tst	r7, r3
   1b394:	add	r0, sp, #16
   1b398:	addne	r4, r4, #1
   1b39c:	addne	r5, r5, #1
   1b3a0:	strd	r4, [sp, #16]
   1b3a4:	bl	1b1d8 <__assert_fail@plt+0x9290>
   1b3a8:	mov	r7, r0
   1b3ac:	add	r0, sp, #20
   1b3b0:	bl	1b1d8 <__assert_fail@plt+0x9290>
   1b3b4:	cmp	r7, #0
   1b3b8:	beq	1b5f4 <__assert_fail@plt+0x96ac>
   1b3bc:	cmp	r0, #0
   1b3c0:	sub	r7, r7, r4
   1b3c4:	beq	1b664 <__assert_fail@plt+0x971c>
   1b3c8:	sub	sl, r0, r5
   1b3cc:	cmp	r7, sl
   1b3d0:	beq	1b610 <__assert_fail@plt+0x96c8>
   1b3d4:	mov	r3, #0
   1b3d8:	rsb	r0, r4, #1
   1b3dc:	mov	r2, r3
   1b3e0:	rsb	fp, r5, #1
   1b3e4:	cmp	sl, r3
   1b3e8:	cmpls	r7, r2
   1b3ec:	bls	1b568 <__assert_fail@plt+0x9620>
   1b3f0:	cmp	r7, r2
   1b3f4:	sub	r8, r3, r2
   1b3f8:	bls	1b470 <__assert_fail@plt+0x9528>
   1b3fc:	ldrb	ip, [r4, r2]
   1b400:	sub	r1, ip, #48	; 0x30
   1b404:	cmp	r1, #9
   1b408:	bls	1b470 <__assert_fail@plt+0x9528>
   1b40c:	cmp	ip, #65	; 0x41
   1b410:	mov	lr, ip
   1b414:	bcc	1b42c <__assert_fail@plt+0x94e4>
   1b418:	cmp	ip, #90	; 0x5a
   1b41c:	bls	1b5e4 <__assert_fail@plt+0x969c>
   1b420:	sub	r1, ip, #97	; 0x61
   1b424:	cmp	r1, #25
   1b428:	bls	1b5e4 <__assert_fail@plt+0x969c>
   1b42c:	cmp	ip, #126	; 0x7e
   1b430:	beq	1b644 <__assert_fail@plt+0x96fc>
   1b434:	add	lr, ip, #256	; 0x100
   1b438:	add	r1, r2, r8
   1b43c:	cmp	sl, r1
   1b440:	beq	1b63c <__assert_fail@plt+0x96f4>
   1b444:	ldrb	r1, [r5, r3]
   1b448:	sub	ip, r1, #48	; 0x30
   1b44c:	cmp	ip, #9
   1b450:	bhi	1b5a4 <__assert_fail@plt+0x965c>
   1b454:	mov	ip, #0
   1b458:	cmp	ip, lr
   1b45c:	bne	1b654 <__assert_fail@plt+0x970c>
   1b460:	add	r2, r2, #1
   1b464:	add	r3, r3, #1
   1b468:	cmp	r7, r2
   1b46c:	bhi	1b3fc <__assert_fail@plt+0x94b4>
   1b470:	cmp	sl, r3
   1b474:	ldrb	r1, [r5, r3]
   1b478:	bls	1b488 <__assert_fail@plt+0x9540>
   1b47c:	sub	ip, r1, #48	; 0x30
   1b480:	cmp	ip, #9
   1b484:	bhi	1b588 <__assert_fail@plt+0x9640>
   1b488:	ldrb	ip, [r4, r2]
   1b48c:	add	lr, r4, r2
   1b490:	cmp	ip, #48	; 0x30
   1b494:	bne	1b4a8 <__assert_fail@plt+0x9560>
   1b498:	add	r2, r0, lr
   1b49c:	ldrb	ip, [lr, #1]!
   1b4a0:	cmp	ip, #48	; 0x30
   1b4a4:	beq	1b498 <__assert_fail@plt+0x9550>
   1b4a8:	cmp	r1, #48	; 0x30
   1b4ac:	bne	1b4c4 <__assert_fail@plt+0x957c>
   1b4b0:	add	lr, r5, r3
   1b4b4:	add	r3, fp, lr
   1b4b8:	ldrb	r1, [lr, #1]!
   1b4bc:	cmp	r1, #48	; 0x30
   1b4c0:	beq	1b4b4 <__assert_fail@plt+0x956c>
   1b4c4:	sub	lr, ip, #48	; 0x30
   1b4c8:	sub	r8, r1, #48	; 0x30
   1b4cc:	cmp	lr, #9
   1b4d0:	bhi	1b5d4 <__assert_fail@plt+0x968c>
   1b4d4:	cmp	r8, #9
   1b4d8:	bhi	1b564 <__assert_fail@plt+0x961c>
   1b4dc:	add	lr, r4, r2
   1b4e0:	mov	r8, #0
   1b4e4:	str	lr, [sp, #8]
   1b4e8:	add	lr, r5, r3
   1b4ec:	str	lr, [sp, #4]
   1b4f0:	mov	lr, r2
   1b4f4:	str	r8, [sp, #12]
   1b4f8:	ldr	r9, [sp, #4]
   1b4fc:	add	lr, lr, #1
   1b500:	ldr	r8, [sp, #12]
   1b504:	cmp	r8, #0
   1b508:	sub	r8, lr, r2
   1b50c:	subeq	r1, ip, r1
   1b510:	add	r8, r8, r3
   1b514:	streq	r1, [sp, #12]
   1b518:	ldr	r1, [sp, #8]
   1b51c:	ldrb	ip, [r1, #1]!
   1b520:	str	r1, [sp, #8]
   1b524:	ldrb	r1, [r9, #1]!
   1b528:	str	r9, [sp, #4]
   1b52c:	sub	r9, ip, #48	; 0x30
   1b530:	cmp	r9, #9
   1b534:	sub	r9, r1, #48	; 0x30
   1b538:	bls	1b55c <__assert_fail@plt+0x9614>
   1b53c:	cmp	r9, #9
   1b540:	bls	1b5dc <__assert_fail@plt+0x9694>
   1b544:	ldr	r3, [sp, #12]
   1b548:	cmp	r3, #0
   1b54c:	bne	1b65c <__assert_fail@plt+0x9714>
   1b550:	mov	r2, lr
   1b554:	mov	r3, r8
   1b558:	b	1b3e4 <__assert_fail@plt+0x949c>
   1b55c:	cmp	r9, #9
   1b560:	bls	1b4f8 <__assert_fail@plt+0x95b0>
   1b564:	mov	r6, #1
   1b568:	mov	r0, r6
   1b56c:	add	sp, sp, #28
   1b570:	ldrd	r4, [sp]
   1b574:	ldrd	r6, [sp, #8]
   1b578:	ldrd	r8, [sp, #16]
   1b57c:	ldrd	sl, [sp, #24]
   1b580:	add	sp, sp, #32
   1b584:	pop	{pc}		; (ldr pc, [sp], #4)
   1b588:	cmp	r7, r2
   1b58c:	beq	1b5a0 <__assert_fail@plt+0x9658>
   1b590:	ldrb	ip, [r4, r2]
   1b594:	sub	lr, ip, #48	; 0x30
   1b598:	cmp	lr, #9
   1b59c:	bhi	1b40c <__assert_fail@plt+0x94c4>
   1b5a0:	mov	lr, #0
   1b5a4:	cmp	r1, #65	; 0x41
   1b5a8:	mov	ip, r1
   1b5ac:	bcc	1b5c4 <__assert_fail@plt+0x967c>
   1b5b0:	cmp	r1, #90	; 0x5a
   1b5b4:	bls	1b458 <__assert_fail@plt+0x9510>
   1b5b8:	sub	r9, r1, #97	; 0x61
   1b5bc:	cmp	r9, #25
   1b5c0:	bls	1b458 <__assert_fail@plt+0x9510>
   1b5c4:	cmp	r1, #126	; 0x7e
   1b5c8:	beq	1b64c <__assert_fail@plt+0x9704>
   1b5cc:	add	ip, r1, #256	; 0x100
   1b5d0:	b	1b458 <__assert_fail@plt+0x9510>
   1b5d4:	cmp	r8, #9
   1b5d8:	bhi	1b3e4 <__assert_fail@plt+0x949c>
   1b5dc:	mvn	r6, #0
   1b5e0:	b	1b568 <__assert_fail@plt+0x9620>
   1b5e4:	add	r1, r2, r8
   1b5e8:	cmp	sl, r1
   1b5ec:	bne	1b444 <__assert_fail@plt+0x94fc>
   1b5f0:	b	1b454 <__assert_fail@plt+0x950c>
   1b5f4:	ldr	r7, [sp, #16]
   1b5f8:	cmp	r0, #0
   1b5fc:	sub	r7, r7, r4
   1b600:	bne	1b3c8 <__assert_fail@plt+0x9480>
   1b604:	ldr	r0, [sp, #20]
   1b608:	sub	sl, r0, r5
   1b60c:	b	1b3d4 <__assert_fail@plt+0x948c>
   1b610:	mov	r2, r7
   1b614:	mov	r1, r5
   1b618:	mov	r0, r4
   1b61c:	bl	11f0c <strncmp@plt>
   1b620:	cmp	r0, #0
   1b624:	bne	1b3d4 <__assert_fail@plt+0x948c>
   1b628:	ldr	r7, [sp, #16]
   1b62c:	ldr	r3, [sp, #20]
   1b630:	sub	r7, r7, r4
   1b634:	sub	sl, r3, r5
   1b638:	b	1b3d4 <__assert_fail@plt+0x948c>
   1b63c:	mov	r6, lr
   1b640:	b	1b568 <__assert_fail@plt+0x9620>
   1b644:	mvn	lr, #0
   1b648:	b	1b438 <__assert_fail@plt+0x94f0>
   1b64c:	mvn	ip, #0
   1b650:	b	1b458 <__assert_fail@plt+0x9510>
   1b654:	sub	r6, lr, ip
   1b658:	b	1b568 <__assert_fail@plt+0x9620>
   1b65c:	ldr	r6, [sp, #12]
   1b660:	b	1b568 <__assert_fail@plt+0x9620>
   1b664:	ldr	r3, [sp, #20]
   1b668:	sub	sl, r3, r5
   1b66c:	b	1b3cc <__assert_fail@plt+0x9484>
   1b670:	strd	r4, [sp, #-12]!
   1b674:	mov	r5, r0
   1b678:	str	lr, [sp, #8]
   1b67c:	sub	sp, sp, #12
   1b680:	bl	11d74 <__errno_location@plt>
   1b684:	mov	r4, r0
   1b688:	mov	r2, #0
   1b68c:	ldr	r3, [r4]
   1b690:	mov	r0, r5
   1b694:	str	r2, [r4]
   1b698:	str	r3, [sp]
   1b69c:	str	r3, [sp, #4]
   1b6a0:	bl	11a8c <free@plt>
   1b6a4:	ldr	r3, [r4]
   1b6a8:	add	r2, sp, #8
   1b6ac:	clz	r3, r3
   1b6b0:	lsr	r3, r3, #5
   1b6b4:	add	r3, r2, r3, lsl #2
   1b6b8:	ldr	r3, [r3, #-8]
   1b6bc:	str	r3, [r4]
   1b6c0:	add	sp, sp, #12
   1b6c4:	ldrd	r4, [sp]
   1b6c8:	add	sp, sp, #8
   1b6cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b6d4:	mov	r4, r0
   1b6d8:	ldr	ip, [r0, #4]
   1b6dc:	strd	r6, [sp, #8]
   1b6e0:	str	lr, [sp, #20]
   1b6e4:	ldr	lr, [r0, #8]
   1b6e8:	str	r8, [sp, #16]
   1b6ec:	sub	sp, sp, #8
   1b6f0:	ldr	r5, [sp, #32]
   1b6f4:	cmp	lr, ip
   1b6f8:	beq	1b720 <__assert_fail@plt+0x97d8>
   1b6fc:	mov	r0, r4
   1b700:	str	r5, [sp, #32]
   1b704:	add	sp, sp, #8
   1b708:	ldrd	r4, [sp]
   1b70c:	ldrd	r6, [sp, #8]
   1b710:	ldr	r8, [sp, #16]
   1b714:	ldr	lr, [sp, #20]
   1b718:	add	sp, sp, #24
   1b71c:	b	11e04 <fseeko64@plt>
   1b720:	ldr	ip, [r0, #16]
   1b724:	ldr	lr, [r0, #20]
   1b728:	cmp	lr, ip
   1b72c:	bne	1b6fc <__assert_fail@plt+0x97b4>
   1b730:	ldr	r8, [r0, #36]	; 0x24
   1b734:	cmp	r8, #0
   1b738:	bne	1b6fc <__assert_fail@plt+0x97b4>
   1b73c:	mov	r6, r2
   1b740:	mov	r7, r3
   1b744:	bl	11dc8 <fileno@plt>
   1b748:	mov	r2, r6
   1b74c:	mov	r3, r7
   1b750:	str	r5, [sp]
   1b754:	bl	11c24 <lseek64@plt>
   1b758:	mvn	r3, #0
   1b75c:	mvn	r2, #0
   1b760:	cmp	r1, r3
   1b764:	cmpeq	r0, r2
   1b768:	beq	1b798 <__assert_fail@plt+0x9850>
   1b76c:	ldr	r3, [r4]
   1b770:	strd	r0, [r4, #80]	; 0x50
   1b774:	bic	r3, r3, #16
   1b778:	str	r3, [r4]
   1b77c:	mov	r0, r8
   1b780:	add	sp, sp, #8
   1b784:	ldrd	r4, [sp]
   1b788:	ldrd	r6, [sp, #8]
   1b78c:	ldr	r8, [sp, #16]
   1b790:	add	sp, sp, #20
   1b794:	pop	{pc}		; (ldr pc, [sp], #4)
   1b798:	mvn	r8, #0
   1b79c:	b	1b77c <__assert_fail@plt+0x9834>
   1b7a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1b7a4:	sub	sp, sp, #268	; 0x10c
   1b7a8:	movw	r2, #257	; 0x101
   1b7ac:	add	r1, sp, #4
   1b7b0:	bl	20334 <__assert_fail@plt+0xe3ec>
   1b7b4:	cmp	r0, #0
   1b7b8:	movne	r0, #0
   1b7bc:	bne	1b7f0 <__assert_fail@plt+0x98a8>
   1b7c0:	movw	r1, #21552	; 0x5430
   1b7c4:	movt	r1, #2
   1b7c8:	add	r0, sp, #4
   1b7cc:	bl	11a2c <strcmp@plt>
   1b7d0:	cmp	r0, #0
   1b7d4:	beq	1b7f0 <__assert_fail@plt+0x98a8>
   1b7d8:	add	r0, sp, #4
   1b7dc:	movw	r1, #21556	; 0x5434
   1b7e0:	movt	r1, #2
   1b7e4:	bl	11a2c <strcmp@plt>
   1b7e8:	adds	r0, r0, #0
   1b7ec:	movne	r0, #1
   1b7f0:	add	sp, sp, #268	; 0x10c
   1b7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7f8:	cmp	r0, #10
   1b7fc:	movcc	r0, #10
   1b800:	orr	r0, r0, #1
   1b804:	cmn	r0, #1
   1b808:	bxeq	lr
   1b80c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b810:	movw	lr, #43691	; 0xaaab
   1b814:	movt	lr, #43690	; 0xaaaa
   1b818:	umull	r2, r3, lr, r0
   1b81c:	cmp	r0, #9
   1b820:	lsr	r3, r3, #1
   1b824:	add	r3, r3, r3, lsl #1
   1b828:	sub	r3, r0, r3
   1b82c:	bls	1b86c <__assert_fail@plt+0x9924>
   1b830:	cmp	r3, #0
   1b834:	beq	1b874 <__assert_fail@plt+0x992c>
   1b838:	mov	ip, #16
   1b83c:	mov	r1, #9
   1b840:	mov	r2, #3
   1b844:	b	1b850 <__assert_fail@plt+0x9908>
   1b848:	cmp	r3, #0
   1b84c:	beq	1b874 <__assert_fail@plt+0x992c>
   1b850:	add	r2, r2, #2
   1b854:	add	r1, r1, ip
   1b858:	cmp	r1, r0
   1b85c:	add	ip, ip, #8
   1b860:	udiv	r3, r0, r2
   1b864:	mls	r3, r2, r3, r0
   1b868:	bcc	1b848 <__assert_fail@plt+0x9900>
   1b86c:	cmp	r3, #0
   1b870:	bne	1b880 <__assert_fail@plt+0x9938>
   1b874:	add	r0, r0, #2
   1b878:	cmn	r0, #1
   1b87c:	bne	1b818 <__assert_fail@plt+0x98d0>
   1b880:	pop	{pc}		; (ldr pc, [sp], #4)
   1b884:	ror	r0, r0, #3
   1b888:	udiv	r3, r0, r1
   1b88c:	mls	r0, r3, r1, r0
   1b890:	bx	lr
   1b894:	sub	r0, r1, r0
   1b898:	clz	r0, r0
   1b89c:	lsr	r0, r0, #5
   1b8a0:	bx	lr
   1b8a4:	str	r4, [sp, #-8]!
   1b8a8:	mov	r4, r0
   1b8ac:	mov	r0, r1
   1b8b0:	ldr	r1, [r4, #8]
   1b8b4:	ldr	r3, [r4, #24]
   1b8b8:	str	lr, [sp, #4]
   1b8bc:	blx	r3
   1b8c0:	ldr	r3, [r4, #8]
   1b8c4:	cmp	r3, r0
   1b8c8:	bls	1b8e0 <__assert_fail@plt+0x9998>
   1b8cc:	ldr	r3, [r4]
   1b8d0:	ldr	r4, [sp]
   1b8d4:	add	sp, sp, #4
   1b8d8:	add	r0, r3, r0, lsl #3
   1b8dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8e0:	bl	11f24 <abort@plt>
   1b8e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b8e8:	mov	r5, r1
   1b8ec:	strd	r6, [sp, #8]
   1b8f0:	mov	r7, r3
   1b8f4:	mov	r6, r0
   1b8f8:	str	r8, [sp, #16]
   1b8fc:	mov	r8, r2
   1b900:	str	lr, [sp, #20]
   1b904:	bl	1b8a4 <__assert_fail@plt+0x995c>
   1b908:	str	r0, [r8]
   1b90c:	ldr	r1, [r0]
   1b910:	cmp	r1, #0
   1b914:	beq	1ba04 <__assert_fail@plt+0x9abc>
   1b918:	cmp	r1, r5
   1b91c:	mov	r4, r0
   1b920:	beq	1b9cc <__assert_fail@plt+0x9a84>
   1b924:	mov	r0, r5
   1b928:	ldr	r3, [r6, #28]
   1b92c:	blx	r3
   1b930:	cmp	r0, #0
   1b934:	bne	1b9c8 <__assert_fail@plt+0x9a80>
   1b938:	ldr	r3, [r4, #4]
   1b93c:	cmp	r3, #0
   1b940:	beq	1ba04 <__assert_fail@plt+0x9abc>
   1b944:	ldr	r1, [r3]
   1b948:	cmp	r5, r1
   1b94c:	bne	1b970 <__assert_fail@plt+0x9a28>
   1b950:	b	1b98c <__assert_fail@plt+0x9a44>
   1b954:	ldr	r4, [r4, #4]
   1b958:	ldr	r3, [r4, #4]
   1b95c:	cmp	r3, #0
   1b960:	beq	1ba04 <__assert_fail@plt+0x9abc>
   1b964:	ldr	r1, [r3]
   1b968:	cmp	r1, r5
   1b96c:	beq	1b98c <__assert_fail@plt+0x9a44>
   1b970:	mov	r0, r5
   1b974:	ldr	r3, [r6, #28]
   1b978:	blx	r3
   1b97c:	cmp	r0, #0
   1b980:	beq	1b954 <__assert_fail@plt+0x9a0c>
   1b984:	ldr	r3, [r4, #4]
   1b988:	ldr	r1, [r3]
   1b98c:	cmp	r7, #0
   1b990:	beq	1b9b0 <__assert_fail@plt+0x9a68>
   1b994:	ldr	r0, [r3, #4]
   1b998:	mov	r2, #0
   1b99c:	str	r0, [r4, #4]
   1b9a0:	str	r2, [r3]
   1b9a4:	ldr	r2, [r6, #36]	; 0x24
   1b9a8:	str	r2, [r3, #4]
   1b9ac:	str	r3, [r6, #36]	; 0x24
   1b9b0:	ldrd	r4, [sp]
   1b9b4:	mov	r0, r1
   1b9b8:	ldrd	r6, [sp, #8]
   1b9bc:	ldr	r8, [sp, #16]
   1b9c0:	add	sp, sp, #20
   1b9c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9c8:	ldr	r1, [r4]
   1b9cc:	cmp	r7, #0
   1b9d0:	beq	1b9b0 <__assert_fail@plt+0x9a68>
   1b9d4:	ldr	r0, [r4, #4]
   1b9d8:	cmp	r0, #0
   1b9dc:	streq	r0, [r4]
   1b9e0:	beq	1b9b0 <__assert_fail@plt+0x9a68>
   1b9e4:	ldrd	r2, [r0]
   1b9e8:	mov	ip, #0
   1b9ec:	strd	r2, [r4]
   1b9f0:	str	ip, [r0]
   1b9f4:	ldr	r3, [r6, #36]	; 0x24
   1b9f8:	str	r3, [r0, #4]
   1b9fc:	str	r0, [r6, #36]	; 0x24
   1ba00:	b	1b9b0 <__assert_fail@plt+0x9a68>
   1ba04:	mov	r1, #0
   1ba08:	b	1b9b0 <__assert_fail@plt+0x9a68>
   1ba0c:	ldr	r2, [r0]
   1ba10:	movw	r3, #21564	; 0x543c
   1ba14:	movt	r3, #2
   1ba18:	mov	r1, r0
   1ba1c:	cmp	r2, r3
   1ba20:	beq	1baa8 <__assert_fail@plt+0x9b60>
   1ba24:	vldr	s14, [pc, #132]	; 1bab0 <__assert_fail@plt+0x9b68>
   1ba28:	vldr	s15, [r2, #8]
   1ba2c:	vcmpe.f32	s15, s14
   1ba30:	vmrs	APSR_nzcv, fpscr
   1ba34:	ble	1ba9c <__assert_fail@plt+0x9b54>
   1ba38:	vldr	s13, [pc, #116]	; 1bab4 <__assert_fail@plt+0x9b6c>
   1ba3c:	vcmpe.f32	s15, s13
   1ba40:	vmrs	APSR_nzcv, fpscr
   1ba44:	bpl	1ba9c <__assert_fail@plt+0x9b54>
   1ba48:	vldr	s13, [pc, #104]	; 1bab8 <__assert_fail@plt+0x9b70>
   1ba4c:	vldr	s12, [r2, #12]
   1ba50:	vcmpe.f32	s12, s13
   1ba54:	vmrs	APSR_nzcv, fpscr
   1ba58:	ble	1ba9c <__assert_fail@plt+0x9b54>
   1ba5c:	vldr	s13, [r2]
   1ba60:	vcmpe.f32	s13, #0.0
   1ba64:	vmrs	APSR_nzcv, fpscr
   1ba68:	blt	1ba9c <__assert_fail@plt+0x9b54>
   1ba6c:	vadd.f32	s14, s13, s14
   1ba70:	vldr	s13, [r2, #4]
   1ba74:	vcmpe.f32	s14, s13
   1ba78:	vmrs	APSR_nzcv, fpscr
   1ba7c:	bpl	1ba9c <__assert_fail@plt+0x9b54>
   1ba80:	vldr	s12, [pc, #52]	; 1babc <__assert_fail@plt+0x9b74>
   1ba84:	vcmpe.f32	s13, s12
   1ba88:	vmrs	APSR_nzcv, fpscr
   1ba8c:	bhi	1ba9c <__assert_fail@plt+0x9b54>
   1ba90:	vcmpe.f32	s15, s14
   1ba94:	vmrs	APSR_nzcv, fpscr
   1ba98:	bgt	1baa8 <__assert_fail@plt+0x9b60>
   1ba9c:	mov	r0, #0
   1baa0:	str	r3, [r1]
   1baa4:	bx	lr
   1baa8:	mov	r0, #1
   1baac:	bx	lr
   1bab0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bab4:	svccc	0x00666666
   1bab8:	svccc	0x008ccccd
   1babc:	svccc	0x00800000
   1bac0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bac4:	ldr	r3, [r1, #4]
   1bac8:	strd	r6, [sp, #8]
   1bacc:	ldr	r6, [r1]
   1bad0:	strd	r8, [sp, #16]
   1bad4:	str	sl, [sp, #24]
   1bad8:	str	lr, [sp, #28]
   1badc:	cmp	r6, r3
   1bae0:	bcs	1bba8 <__assert_fail@plt+0x9c60>
   1bae4:	mov	r8, r2
   1bae8:	mov	r5, r0
   1baec:	mov	r7, r1
   1baf0:	add	r6, r6, #8
   1baf4:	mov	r9, #0
   1baf8:	b	1bb08 <__assert_fail@plt+0x9bc0>
   1bafc:	cmp	r3, r6
   1bb00:	add	r6, r6, #8
   1bb04:	bls	1bba8 <__assert_fail@plt+0x9c60>
   1bb08:	ldr	sl, [r6, #-8]
   1bb0c:	cmp	sl, #0
   1bb10:	beq	1bafc <__assert_fail@plt+0x9bb4>
   1bb14:	ldr	r4, [r6, #-4]
   1bb18:	cmp	r4, #0
   1bb1c:	bne	1bb3c <__assert_fail@plt+0x9bf4>
   1bb20:	b	1bb8c <__assert_fail@plt+0x9c44>
   1bb24:	ldr	r2, [r0, #4]
   1bb28:	cmp	r3, #0
   1bb2c:	str	r2, [r4, #4]
   1bb30:	str	r4, [r0, #4]
   1bb34:	mov	r4, r3
   1bb38:	beq	1bb88 <__assert_fail@plt+0x9c40>
   1bb3c:	ldr	sl, [r4]
   1bb40:	mov	r0, r5
   1bb44:	mov	r1, sl
   1bb48:	bl	1b8a4 <__assert_fail@plt+0x995c>
   1bb4c:	ldr	r2, [r0]
   1bb50:	ldr	r3, [r4, #4]
   1bb54:	cmp	r2, #0
   1bb58:	bne	1bb24 <__assert_fail@plt+0x9bdc>
   1bb5c:	ldr	r1, [r5, #12]
   1bb60:	cmp	r3, #0
   1bb64:	str	sl, [r0]
   1bb68:	add	r1, r1, #1
   1bb6c:	str	r1, [r5, #12]
   1bb70:	str	r2, [r4]
   1bb74:	ldr	r2, [r5, #36]	; 0x24
   1bb78:	str	r2, [r4, #4]
   1bb7c:	str	r4, [r5, #36]	; 0x24
   1bb80:	mov	r4, r3
   1bb84:	bne	1bb3c <__assert_fail@plt+0x9bf4>
   1bb88:	ldr	sl, [r6, #-8]
   1bb8c:	cmp	r8, #0
   1bb90:	str	r9, [r6, #-4]
   1bb94:	beq	1bbc4 <__assert_fail@plt+0x9c7c>
   1bb98:	ldr	r3, [r7, #4]
   1bb9c:	cmp	r3, r6
   1bba0:	add	r6, r6, #8
   1bba4:	bhi	1bb08 <__assert_fail@plt+0x9bc0>
   1bba8:	mov	r0, #1
   1bbac:	ldrd	r4, [sp]
   1bbb0:	ldrd	r6, [sp, #8]
   1bbb4:	ldrd	r8, [sp, #16]
   1bbb8:	ldr	sl, [sp, #24]
   1bbbc:	add	sp, sp, #28
   1bbc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbc4:	mov	r1, sl
   1bbc8:	mov	r0, r5
   1bbcc:	bl	1b8a4 <__assert_fail@plt+0x995c>
   1bbd0:	ldr	r3, [r0]
   1bbd4:	mov	r4, r0
   1bbd8:	cmp	r3, #0
   1bbdc:	beq	1bc1c <__assert_fail@plt+0x9cd4>
   1bbe0:	ldr	r0, [r5, #36]	; 0x24
   1bbe4:	cmp	r0, #0
   1bbe8:	beq	1bc30 <__assert_fail@plt+0x9ce8>
   1bbec:	ldr	r3, [r0, #4]
   1bbf0:	str	r3, [r5, #36]	; 0x24
   1bbf4:	ldr	r3, [r4, #4]
   1bbf8:	str	sl, [r0]
   1bbfc:	str	r3, [r0, #4]
   1bc00:	str	r0, [r4, #4]
   1bc04:	ldr	r2, [r7, #12]
   1bc08:	str	r9, [r6, #-8]
   1bc0c:	ldr	r3, [r7, #4]
   1bc10:	sub	r2, r2, #1
   1bc14:	str	r2, [r7, #12]
   1bc18:	b	1bafc <__assert_fail@plt+0x9bb4>
   1bc1c:	ldr	r3, [r5, #12]
   1bc20:	str	sl, [r0]
   1bc24:	add	r3, r3, #1
   1bc28:	str	r3, [r5, #12]
   1bc2c:	b	1bc04 <__assert_fail@plt+0x9cbc>
   1bc30:	mov	r0, #8
   1bc34:	bl	2216c <__assert_fail@plt+0x10224>
   1bc38:	cmp	r0, #0
   1bc3c:	bne	1bbf4 <__assert_fail@plt+0x9cac>
   1bc40:	mov	r0, r8
   1bc44:	b	1bbac <__assert_fail@plt+0x9c64>
   1bc48:	ldr	r0, [r0, #8]
   1bc4c:	bx	lr
   1bc50:	ldr	r0, [r0, #12]
   1bc54:	bx	lr
   1bc58:	ldr	r0, [r0, #16]
   1bc5c:	bx	lr
   1bc60:	ldm	r0, {r1, r3}
   1bc64:	cmp	r1, r3
   1bc68:	bcs	1bcdc <__assert_fail@plt+0x9d94>
   1bc6c:	sub	ip, r3, #1
   1bc70:	add	r3, r1, #16
   1bc74:	sub	ip, ip, r1
   1bc78:	mov	r0, #0
   1bc7c:	bic	ip, ip, #7
   1bc80:	add	r1, r1, #8
   1bc84:	add	ip, ip, r3
   1bc88:	b	1bc98 <__assert_fail@plt+0x9d50>
   1bc8c:	add	r1, r1, #8
   1bc90:	cmp	r1, ip
   1bc94:	beq	1bcd8 <__assert_fail@plt+0x9d90>
   1bc98:	ldr	r3, [r1, #-8]
   1bc9c:	cmp	r3, #0
   1bca0:	beq	1bc8c <__assert_fail@plt+0x9d44>
   1bca4:	ldr	r3, [r1, #-4]
   1bca8:	mov	r2, #1
   1bcac:	cmp	r3, #0
   1bcb0:	beq	1bcc4 <__assert_fail@plt+0x9d7c>
   1bcb4:	ldr	r3, [r3, #4]
   1bcb8:	add	r2, r2, #1
   1bcbc:	cmp	r3, #0
   1bcc0:	bne	1bcb4 <__assert_fail@plt+0x9d6c>
   1bcc4:	cmp	r0, r2
   1bcc8:	add	r1, r1, #8
   1bccc:	movcc	r0, r2
   1bcd0:	cmp	r1, ip
   1bcd4:	bne	1bc98 <__assert_fail@plt+0x9d50>
   1bcd8:	bx	lr
   1bcdc:	mov	r0, #0
   1bce0:	bx	lr
   1bce4:	ldm	r0, {r1, r3}
   1bce8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bcec:	cmp	r1, r3
   1bcf0:	bcs	1bd84 <__assert_fail@plt+0x9e3c>
   1bcf4:	sub	ip, r3, #1
   1bcf8:	mov	r2, #0
   1bcfc:	sub	ip, ip, r1
   1bd00:	add	r3, r1, #16
   1bd04:	bic	ip, ip, #7
   1bd08:	add	r1, r1, #8
   1bd0c:	add	ip, ip, r3
   1bd10:	mov	lr, r2
   1bd14:	b	1bd24 <__assert_fail@plt+0x9ddc>
   1bd18:	add	r1, r1, #8
   1bd1c:	cmp	r1, ip
   1bd20:	beq	1bd60 <__assert_fail@plt+0x9e18>
   1bd24:	ldr	r3, [r1, #-8]
   1bd28:	cmp	r3, #0
   1bd2c:	beq	1bd18 <__assert_fail@plt+0x9dd0>
   1bd30:	ldr	r3, [r1, #-4]
   1bd34:	add	lr, lr, #1
   1bd38:	add	r2, r2, #1
   1bd3c:	cmp	r3, #0
   1bd40:	beq	1bd18 <__assert_fail@plt+0x9dd0>
   1bd44:	ldr	r3, [r3, #4]
   1bd48:	add	r2, r2, #1
   1bd4c:	cmp	r3, #0
   1bd50:	bne	1bd44 <__assert_fail@plt+0x9dfc>
   1bd54:	add	r1, r1, #8
   1bd58:	cmp	r1, ip
   1bd5c:	bne	1bd24 <__assert_fail@plt+0x9ddc>
   1bd60:	ldr	r3, [r0, #12]
   1bd64:	cmp	r3, lr
   1bd68:	movne	r0, #0
   1bd6c:	bne	1bd80 <__assert_fail@plt+0x9e38>
   1bd70:	ldr	r0, [r0, #16]
   1bd74:	sub	r0, r0, r2
   1bd78:	clz	r0, r0
   1bd7c:	lsr	r0, r0, #5
   1bd80:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd84:	mov	r2, #0
   1bd88:	mov	lr, r2
   1bd8c:	b	1bd60 <__assert_fail@plt+0x9e18>
   1bd90:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bd94:	mov	r4, r1
   1bd98:	ldr	r2, [r0]
   1bd9c:	ldr	r1, [r0, #4]
   1bda0:	ldr	r3, [r0, #16]
   1bda4:	strd	r6, [sp, #8]
   1bda8:	str	lr, [sp, #16]
   1bdac:	sub	sp, sp, #12
   1bdb0:	cmp	r2, r1
   1bdb4:	ldrd	r6, [r0, #8]
   1bdb8:	bcs	1beb8 <__assert_fail@plt+0x9f70>
   1bdbc:	sub	ip, r1, #1
   1bdc0:	add	r1, r2, #16
   1bdc4:	sub	ip, ip, r2
   1bdc8:	add	r0, r2, #8
   1bdcc:	bic	ip, ip, #7
   1bdd0:	mov	r5, #0
   1bdd4:	add	ip, ip, r1
   1bdd8:	b	1bde8 <__assert_fail@plt+0x9ea0>
   1bddc:	add	r0, r0, #8
   1bde0:	cmp	r0, ip
   1bde4:	beq	1be28 <__assert_fail@plt+0x9ee0>
   1bde8:	ldr	r2, [r0, #-8]
   1bdec:	cmp	r2, #0
   1bdf0:	beq	1bddc <__assert_fail@plt+0x9e94>
   1bdf4:	ldr	r2, [r0, #-4]
   1bdf8:	mov	r1, #1
   1bdfc:	cmp	r2, #0
   1be00:	beq	1be14 <__assert_fail@plt+0x9ecc>
   1be04:	ldr	r2, [r2, #4]
   1be08:	add	r1, r1, #1
   1be0c:	cmp	r2, #0
   1be10:	bne	1be04 <__assert_fail@plt+0x9ebc>
   1be14:	cmp	r5, r1
   1be18:	add	r0, r0, #8
   1be1c:	movcc	r5, r1
   1be20:	cmp	r0, ip
   1be24:	bne	1bde8 <__assert_fail@plt+0x9ea0>
   1be28:	mov	r1, #1
   1be2c:	mov	r0, r4
   1be30:	movw	r2, #21584	; 0x5450
   1be34:	movt	r2, #2
   1be38:	bl	11dd4 <__fprintf_chk@plt>
   1be3c:	mov	r3, r6
   1be40:	mov	r1, #1
   1be44:	mov	r0, r4
   1be48:	movw	r2, #21608	; 0x5468
   1be4c:	movt	r2, #2
   1be50:	bl	11dd4 <__fprintf_chk@plt>
   1be54:	vmov	s15, r7
   1be58:	mov	r3, r7
   1be5c:	mov	r1, #1
   1be60:	vldr	d5, [pc, #88]	; 1bec0 <__assert_fail@plt+0x9f78>
   1be64:	mov	r0, r4
   1be68:	movw	r2, #21632	; 0x5480
   1be6c:	movt	r2, #2
   1be70:	vcvt.f64.u32	d6, s15
   1be74:	vmov	s15, r6
   1be78:	vmul.f64	d6, d6, d5
   1be7c:	vcvt.f64.u32	d7, s15
   1be80:	vdiv.f64	d5, d6, d7
   1be84:	vstr	d5, [sp]
   1be88:	bl	11dd4 <__fprintf_chk@plt>
   1be8c:	mov	r3, r5
   1be90:	mov	r0, r4
   1be94:	movw	r2, #21668	; 0x54a4
   1be98:	movt	r2, #2
   1be9c:	mov	r1, #1
   1bea0:	add	sp, sp, #12
   1bea4:	ldrd	r4, [sp]
   1bea8:	ldrd	r6, [sp, #8]
   1beac:	ldr	lr, [sp, #16]
   1beb0:	add	sp, sp, #20
   1beb4:	b	11dd4 <__fprintf_chk@plt>
   1beb8:	mov	r5, #0
   1bebc:	b	1be28 <__assert_fail@plt+0x9ee0>
   1bec0:	andeq	r0, r0, r0
   1bec4:	subsmi	r0, r9, r0
   1bec8:	strd	r4, [sp, #-16]!
   1becc:	mov	r5, r1
   1bed0:	str	r6, [sp, #8]
   1bed4:	mov	r6, r0
   1bed8:	str	lr, [sp, #12]
   1bedc:	bl	1b8a4 <__assert_fail@plt+0x995c>
   1bee0:	ldr	r3, [r0]
   1bee4:	cmp	r3, #0
   1bee8:	beq	1bf24 <__assert_fail@plt+0x9fdc>
   1beec:	mov	r4, r0
   1bef0:	b	1bef8 <__assert_fail@plt+0x9fb0>
   1bef4:	ldr	r3, [r4]
   1bef8:	cmp	r3, r5
   1befc:	mov	r1, r3
   1bf00:	mov	r0, r5
   1bf04:	beq	1bf3c <__assert_fail@plt+0x9ff4>
   1bf08:	ldr	r3, [r6, #28]
   1bf0c:	blx	r3
   1bf10:	cmp	r0, #0
   1bf14:	bne	1bf38 <__assert_fail@plt+0x9ff0>
   1bf18:	ldr	r4, [r4, #4]
   1bf1c:	cmp	r4, #0
   1bf20:	bne	1bef4 <__assert_fail@plt+0x9fac>
   1bf24:	ldrd	r4, [sp]
   1bf28:	mov	r0, #0
   1bf2c:	ldr	r6, [sp, #8]
   1bf30:	add	sp, sp, #12
   1bf34:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf38:	ldr	r5, [r4]
   1bf3c:	mov	r0, r5
   1bf40:	ldrd	r4, [sp]
   1bf44:	ldr	r6, [sp, #8]
   1bf48:	add	sp, sp, #12
   1bf4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf50:	ldr	r3, [r0, #16]
   1bf54:	cmp	r3, #0
   1bf58:	beq	1bfac <__assert_fail@plt+0xa064>
   1bf5c:	ldr	r3, [r0]
   1bf60:	ldr	r2, [r0, #4]
   1bf64:	cmp	r3, r2
   1bf68:	bcs	1bfa0 <__assert_fail@plt+0xa058>
   1bf6c:	ldr	r0, [r3]
   1bf70:	cmp	r0, #0
   1bf74:	bxne	lr
   1bf78:	sub	r2, r2, #1
   1bf7c:	sub	r2, r2, r3
   1bf80:	bic	r2, r2, #7
   1bf84:	add	r2, r3, r2
   1bf88:	b	1bf98 <__assert_fail@plt+0xa050>
   1bf8c:	ldr	r0, [r3, #8]!
   1bf90:	cmp	r0, #0
   1bf94:	bxne	lr
   1bf98:	cmp	r3, r2
   1bf9c:	bne	1bf8c <__assert_fail@plt+0xa044>
   1bfa0:	str	r4, [sp, #-8]!
   1bfa4:	str	lr, [sp, #4]
   1bfa8:	bl	11f24 <abort@plt>
   1bfac:	mov	r0, r3
   1bfb0:	bx	lr
   1bfb4:	strd	r4, [sp, #-16]!
   1bfb8:	mov	r5, r0
   1bfbc:	mov	r4, r1
   1bfc0:	str	r6, [sp, #8]
   1bfc4:	str	lr, [sp, #12]
   1bfc8:	bl	1b8a4 <__assert_fail@plt+0x995c>
   1bfcc:	mov	r2, r0
   1bfd0:	mov	r3, r0
   1bfd4:	b	1bfe0 <__assert_fail@plt+0xa098>
   1bfd8:	cmp	r3, #0
   1bfdc:	beq	1bff8 <__assert_fail@plt+0xa0b0>
   1bfe0:	ldm	r3, {r1, r3}
   1bfe4:	cmp	r1, r4
   1bfe8:	bne	1bfd8 <__assert_fail@plt+0xa090>
   1bfec:	cmp	r3, #0
   1bff0:	ldrne	r0, [r3]
   1bff4:	bne	1c01c <__assert_fail@plt+0xa0d4>
   1bff8:	ldr	r3, [r5, #4]
   1bffc:	b	1c00c <__assert_fail@plt+0xa0c4>
   1c000:	ldr	r0, [r2]
   1c004:	cmp	r0, #0
   1c008:	bne	1c01c <__assert_fail@plt+0xa0d4>
   1c00c:	add	r2, r2, #8
   1c010:	cmp	r3, r2
   1c014:	bhi	1c000 <__assert_fail@plt+0xa0b8>
   1c018:	mov	r0, #0
   1c01c:	ldrd	r4, [sp]
   1c020:	ldr	r6, [sp, #8]
   1c024:	add	sp, sp, #12
   1c028:	pop	{pc}		; (ldr pc, [sp], #4)
   1c02c:	strd	r4, [sp, #-12]!
   1c030:	ldr	r5, [r0]
   1c034:	str	lr, [sp, #8]
   1c038:	ldr	lr, [r0, #4]
   1c03c:	cmp	lr, r5
   1c040:	bls	1c0cc <__assert_fail@plt+0xa184>
   1c044:	mov	ip, #0
   1c048:	ldr	r3, [r5]
   1c04c:	cmp	r3, #0
   1c050:	bne	1c074 <__assert_fail@plt+0xa12c>
   1c054:	add	r5, r5, #8
   1c058:	cmp	lr, r5
   1c05c:	bhi	1c048 <__assert_fail@plt+0xa100>
   1c060:	mov	r2, ip
   1c064:	ldrd	r4, [sp]
   1c068:	add	sp, sp, #8
   1c06c:	mov	r0, r2
   1c070:	pop	{pc}		; (ldr pc, [sp], #4)
   1c074:	cmp	r2, ip
   1c078:	bls	1c060 <__assert_fail@plt+0xa118>
   1c07c:	str	r3, [r1, ip, lsl #2]
   1c080:	add	r4, ip, #1
   1c084:	add	lr, r1, ip, lsl #2
   1c088:	ldr	r3, [r5, #4]
   1c08c:	cmp	r3, #0
   1c090:	beq	1c0c0 <__assert_fail@plt+0xa178>
   1c094:	mov	ip, r4
   1c098:	cmp	r2, ip
   1c09c:	add	ip, ip, #1
   1c0a0:	beq	1c064 <__assert_fail@plt+0xa11c>
   1c0a4:	ldr	r4, [r3]
   1c0a8:	str	r4, [lr, #4]!
   1c0ac:	ldr	r3, [r3, #4]
   1c0b0:	cmp	r3, #0
   1c0b4:	bne	1c098 <__assert_fail@plt+0xa150>
   1c0b8:	ldr	lr, [r0, #4]
   1c0bc:	b	1c054 <__assert_fail@plt+0xa10c>
   1c0c0:	mov	ip, r4
   1c0c4:	ldr	lr, [r0, #4]
   1c0c8:	b	1c054 <__assert_fail@plt+0xa10c>
   1c0cc:	mov	r2, #0
   1c0d0:	b	1c064 <__assert_fail@plt+0xa11c>
   1c0d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c0d8:	ldr	r3, [r0, #4]
   1c0dc:	strd	r6, [sp, #8]
   1c0e0:	strd	r8, [sp, #16]
   1c0e4:	ldr	r8, [r0]
   1c0e8:	str	sl, [sp, #24]
   1c0ec:	str	lr, [sp, #28]
   1c0f0:	cmp	r3, r8
   1c0f4:	bls	1c170 <__assert_fail@plt+0xa228>
   1c0f8:	mov	r7, r2
   1c0fc:	mov	r6, r1
   1c100:	mov	r9, r0
   1c104:	mov	r5, #0
   1c108:	ldr	r0, [r8]
   1c10c:	cmp	r0, #0
   1c110:	bne	1c13c <__assert_fail@plt+0xa1f4>
   1c114:	add	r8, r8, #8
   1c118:	cmp	r3, r8
   1c11c:	bhi	1c108 <__assert_fail@plt+0xa1c0>
   1c120:	mov	r0, r5
   1c124:	ldrd	r4, [sp]
   1c128:	ldrd	r6, [sp, #8]
   1c12c:	ldrd	r8, [sp, #16]
   1c130:	ldr	sl, [sp, #24]
   1c134:	add	sp, sp, #28
   1c138:	pop	{pc}		; (ldr pc, [sp], #4)
   1c13c:	mov	r4, r8
   1c140:	b	1c148 <__assert_fail@plt+0xa200>
   1c144:	ldr	r0, [r4]
   1c148:	mov	r1, r7
   1c14c:	blx	r6
   1c150:	cmp	r0, #0
   1c154:	beq	1c120 <__assert_fail@plt+0xa1d8>
   1c158:	ldr	r4, [r4, #4]
   1c15c:	add	r5, r5, #1
   1c160:	cmp	r4, #0
   1c164:	bne	1c144 <__assert_fail@plt+0xa1fc>
   1c168:	ldr	r3, [r9, #4]
   1c16c:	b	1c114 <__assert_fail@plt+0xa1cc>
   1c170:	mov	r5, #0
   1c174:	b	1c120 <__assert_fail@plt+0xa1d8>
   1c178:	ldrb	r2, [r0]
   1c17c:	cmp	r2, #0
   1c180:	beq	1c1ac <__assert_fail@plt+0xa264>
   1c184:	mov	r3, #0
   1c188:	rsb	r3, r3, r3, lsl #5
   1c18c:	add	r3, r3, r2
   1c190:	ldrb	r2, [r0, #1]!
   1c194:	udiv	ip, r3, r1
   1c198:	cmp	r2, #0
   1c19c:	mls	r3, r1, ip, r3
   1c1a0:	bne	1c188 <__assert_fail@plt+0xa240>
   1c1a4:	mov	r0, r3
   1c1a8:	bx	lr
   1c1ac:	mov	r3, r2
   1c1b0:	mov	r0, r3
   1c1b4:	bx	lr
   1c1b8:	movw	r3, #21564	; 0x543c
   1c1bc:	movt	r3, #2
   1c1c0:	strd	r4, [sp, #-8]!
   1c1c4:	ldrd	r4, [r3]
   1c1c8:	ldr	r1, [r3, #16]
   1c1cc:	ldrd	r2, [r3, #8]
   1c1d0:	strd	r4, [r0]
   1c1d4:	ldrd	r4, [sp]
   1c1d8:	add	sp, sp, #8
   1c1dc:	strd	r2, [r0, #8]
   1c1e0:	str	r1, [r0, #16]
   1c1e4:	bx	lr
   1c1e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c1ec:	cmp	r2, #0
   1c1f0:	movw	ip, #47252	; 0xb894
   1c1f4:	movt	ip, #1
   1c1f8:	strd	r6, [sp, #8]
   1c1fc:	movne	r6, r2
   1c200:	str	lr, [sp, #16]
   1c204:	sub	sp, sp, #12
   1c208:	movw	lr, #47236	; 0xb884
   1c20c:	movt	lr, #1
   1c210:	mov	r7, r1
   1c214:	moveq	r6, lr
   1c218:	cmp	r3, #0
   1c21c:	str	r0, [sp, #4]
   1c220:	mov	r0, #40	; 0x28
   1c224:	movne	r5, r3
   1c228:	moveq	r5, ip
   1c22c:	bl	2216c <__assert_fail@plt+0x10224>
   1c230:	subs	r4, r0, #0
   1c234:	beq	1c2cc <__assert_fail@plt+0xa384>
   1c238:	cmp	r7, #0
   1c23c:	add	r0, r4, #20
   1c240:	beq	1c2e4 <__assert_fail@plt+0xa39c>
   1c244:	str	r7, [r4, #20]
   1c248:	bl	1ba0c <__assert_fail@plt+0x9ac4>
   1c24c:	cmp	r0, #0
   1c250:	beq	1c32c <__assert_fail@plt+0xa3e4>
   1c254:	ldrb	r3, [r7, #16]
   1c258:	cmp	r3, #0
   1c25c:	beq	1c33c <__assert_fail@plt+0xa3f4>
   1c260:	ldr	r0, [sp, #4]
   1c264:	bl	1b7f8 <__assert_fail@plt+0x98b0>
   1c268:	lsrs	r2, r0, #30
   1c26c:	movne	r7, #1
   1c270:	moveq	r7, #0
   1c274:	tst	r0, #536870912	; 0x20000000
   1c278:	bne	1c324 <__assert_fail@plt+0xa3dc>
   1c27c:	cmp	r7, #0
   1c280:	bne	1c324 <__assert_fail@plt+0xa3dc>
   1c284:	cmp	r0, #0
   1c288:	str	r0, [r4, #8]
   1c28c:	beq	1c32c <__assert_fail@plt+0xa3e4>
   1c290:	mov	r1, #8
   1c294:	bl	220f8 <__assert_fail@plt+0x101b0>
   1c298:	cmp	r0, #0
   1c29c:	str	r0, [r4]
   1c2a0:	beq	1c32c <__assert_fail@plt+0xa3e4>
   1c2a4:	ldr	r3, [r4, #8]
   1c2a8:	str	r7, [r4, #12]
   1c2ac:	str	r7, [r4, #16]
   1c2b0:	str	r6, [r4, #24]
   1c2b4:	str	r5, [r4, #28]
   1c2b8:	add	r0, r0, r3, lsl #3
   1c2bc:	ldr	r3, [sp, #32]
   1c2c0:	str	r0, [r4, #4]
   1c2c4:	str	r3, [r4, #32]
   1c2c8:	str	r7, [r4, #36]	; 0x24
   1c2cc:	mov	r0, r4
   1c2d0:	add	sp, sp, #12
   1c2d4:	ldrd	r4, [sp]
   1c2d8:	ldrd	r6, [sp, #8]
   1c2dc:	add	sp, sp, #16
   1c2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2e4:	movw	r3, #21564	; 0x543c
   1c2e8:	movt	r3, #2
   1c2ec:	str	r3, [r4, #20]
   1c2f0:	bl	1ba0c <__assert_fail@plt+0x9ac4>
   1c2f4:	cmp	r0, #0
   1c2f8:	beq	1c32c <__assert_fail@plt+0xa3e4>
   1c2fc:	vldr	s13, [pc, #64]	; 1c344 <__assert_fail@plt+0xa3fc>
   1c300:	vldr	s15, [sp, #4]
   1c304:	vldr	s14, [pc, #60]	; 1c348 <__assert_fail@plt+0xa400>
   1c308:	vcvt.f32.u32	s12, s15
   1c30c:	vdiv.f32	s15, s12, s13
   1c310:	vcmpe.f32	s15, s14
   1c314:	vmrs	APSR_nzcv, fpscr
   1c318:	vcvtlt.u32.f32	s15, s15
   1c31c:	vstrlt	s15, [sp, #4]
   1c320:	blt	1c260 <__assert_fail@plt+0xa318>
   1c324:	mov	r3, #0
   1c328:	str	r3, [r4, #8]
   1c32c:	mov	r0, r4
   1c330:	mov	r4, #0
   1c334:	bl	1b670 <__assert_fail@plt+0x9728>
   1c338:	b	1c2cc <__assert_fail@plt+0xa384>
   1c33c:	vldr	s13, [r7, #8]
   1c340:	b	1c300 <__assert_fail@plt+0xa3b8>
   1c344:	svccc	0x004ccccd
   1c348:	svcmi	0x00800000
   1c34c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c350:	mov	r5, r0
   1c354:	ldr	r2, [r0, #4]
   1c358:	strd	r6, [sp, #8]
   1c35c:	ldr	r6, [r0]
   1c360:	str	r8, [sp, #16]
   1c364:	str	lr, [sp, #20]
   1c368:	cmp	r6, r2
   1c36c:	addcc	r6, r6, #8
   1c370:	movcc	r7, #0
   1c374:	bcc	1c388 <__assert_fail@plt+0xa440>
   1c378:	b	1c3fc <__assert_fail@plt+0xa4b4>
   1c37c:	cmp	r2, r6
   1c380:	add	r6, r6, #8
   1c384:	bls	1c3fc <__assert_fail@plt+0xa4b4>
   1c388:	ldr	r3, [r6, #-8]
   1c38c:	cmp	r3, #0
   1c390:	beq	1c37c <__assert_fail@plt+0xa434>
   1c394:	ldr	r4, [r6, #-4]
   1c398:	ldr	r2, [r5, #32]
   1c39c:	cmp	r4, #0
   1c3a0:	beq	1c3d4 <__assert_fail@plt+0xa48c>
   1c3a4:	cmp	r2, #0
   1c3a8:	beq	1c3b8 <__assert_fail@plt+0xa470>
   1c3ac:	ldr	r0, [r4]
   1c3b0:	blx	r2
   1c3b4:	ldr	r2, [r5, #32]
   1c3b8:	ldr	r3, [r4, #4]
   1c3bc:	ldr	r1, [r5, #36]	; 0x24
   1c3c0:	str	r7, [r4]
   1c3c4:	str	r1, [r4, #4]
   1c3c8:	str	r4, [r5, #36]	; 0x24
   1c3cc:	subs	r4, r3, #0
   1c3d0:	bne	1c3a4 <__assert_fail@plt+0xa45c>
   1c3d4:	cmp	r2, #0
   1c3d8:	beq	1c3e4 <__assert_fail@plt+0xa49c>
   1c3dc:	ldr	r0, [r6, #-8]
   1c3e0:	blx	r2
   1c3e4:	str	r7, [r6, #-8]
   1c3e8:	str	r7, [r6, #-4]
   1c3ec:	ldr	r2, [r5, #4]
   1c3f0:	cmp	r2, r6
   1c3f4:	add	r6, r6, #8
   1c3f8:	bhi	1c388 <__assert_fail@plt+0xa440>
   1c3fc:	mov	r3, #0
   1c400:	ldrd	r6, [sp, #8]
   1c404:	ldr	r8, [sp, #16]
   1c408:	str	r3, [r5, #12]
   1c40c:	str	r3, [r5, #16]
   1c410:	ldrd	r4, [sp]
   1c414:	add	sp, sp, #20
   1c418:	pop	{pc}		; (ldr pc, [sp], #4)
   1c41c:	strd	r4, [sp, #-16]!
   1c420:	ldr	r2, [r0, #32]
   1c424:	ldr	r5, [r0]
   1c428:	ldr	r3, [r0, #4]
   1c42c:	cmp	r2, #0
   1c430:	str	r6, [sp, #8]
   1c434:	mov	r6, r0
   1c438:	str	lr, [sp, #12]
   1c43c:	beq	1c4a4 <__assert_fail@plt+0xa55c>
   1c440:	ldr	r2, [r0, #16]
   1c444:	cmp	r2, #0
   1c448:	beq	1c4a4 <__assert_fail@plt+0xa55c>
   1c44c:	cmp	r5, r3
   1c450:	bcc	1c464 <__assert_fail@plt+0xa51c>
   1c454:	b	1c4d8 <__assert_fail@plt+0xa590>
   1c458:	add	r5, r5, #8
   1c45c:	cmp	r3, r5
   1c460:	bls	1c4a0 <__assert_fail@plt+0xa558>
   1c464:	ldr	r0, [r5]
   1c468:	cmp	r0, #0
   1c46c:	beq	1c458 <__assert_fail@plt+0xa510>
   1c470:	mov	r4, r5
   1c474:	b	1c47c <__assert_fail@plt+0xa534>
   1c478:	ldr	r0, [r4]
   1c47c:	ldr	r3, [r6, #32]
   1c480:	blx	r3
   1c484:	ldr	r4, [r4, #4]
   1c488:	cmp	r4, #0
   1c48c:	bne	1c478 <__assert_fail@plt+0xa530>
   1c490:	ldr	r3, [r6, #4]
   1c494:	add	r5, r5, #8
   1c498:	cmp	r3, r5
   1c49c:	bhi	1c464 <__assert_fail@plt+0xa51c>
   1c4a0:	ldr	r5, [r6]
   1c4a4:	cmp	r5, r3
   1c4a8:	bcs	1c4d8 <__assert_fail@plt+0xa590>
   1c4ac:	ldr	r0, [r5, #4]
   1c4b0:	cmp	r0, #0
   1c4b4:	beq	1c4cc <__assert_fail@plt+0xa584>
   1c4b8:	ldr	r4, [r0, #4]
   1c4bc:	bl	1b670 <__assert_fail@plt+0x9728>
   1c4c0:	subs	r0, r4, #0
   1c4c4:	bne	1c4b8 <__assert_fail@plt+0xa570>
   1c4c8:	ldr	r3, [r6, #4]
   1c4cc:	add	r5, r5, #8
   1c4d0:	cmp	r3, r5
   1c4d4:	bhi	1c4ac <__assert_fail@plt+0xa564>
   1c4d8:	ldr	r0, [r6, #36]	; 0x24
   1c4dc:	cmp	r0, #0
   1c4e0:	beq	1c4f4 <__assert_fail@plt+0xa5ac>
   1c4e4:	ldr	r4, [r0, #4]
   1c4e8:	bl	1b670 <__assert_fail@plt+0x9728>
   1c4ec:	subs	r0, r4, #0
   1c4f0:	bne	1c4e4 <__assert_fail@plt+0xa59c>
   1c4f4:	ldr	r0, [r6]
   1c4f8:	bl	1b670 <__assert_fail@plt+0x9728>
   1c4fc:	mov	r0, r6
   1c500:	ldrd	r4, [sp]
   1c504:	ldr	r6, [sp, #8]
   1c508:	ldr	lr, [sp, #12]
   1c50c:	add	sp, sp, #16
   1c510:	b	1b670 <__assert_fail@plt+0x9728>
   1c514:	ldr	r3, [r0, #20]
   1c518:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c51c:	ldrb	r2, [r3, #16]
   1c520:	strd	r6, [sp, #8]
   1c524:	mov	r6, r0
   1c528:	str	lr, [sp, #16]
   1c52c:	sub	sp, sp, #52	; 0x34
   1c530:	str	r1, [sp, #4]
   1c534:	cmp	r2, #0
   1c538:	bne	1c564 <__assert_fail@plt+0xa61c>
   1c53c:	vmov	s15, r1
   1c540:	vldr	s13, [r3, #8]
   1c544:	vldr	s14, [pc, #340]	; 1c6a0 <__assert_fail@plt+0xa758>
   1c548:	vcvt.f32.u32	s12, s15
   1c54c:	vdiv.f32	s15, s12, s13
   1c550:	vcmpe.f32	s15, s14
   1c554:	vmrs	APSR_nzcv, fpscr
   1c558:	vcvtlt.u32.f32	s15, s15
   1c55c:	vstrlt	s15, [sp, #4]
   1c560:	bge	1c594 <__assert_fail@plt+0xa64c>
   1c564:	ldr	r0, [sp, #4]
   1c568:	bl	1b7f8 <__assert_fail@plt+0x98b0>
   1c56c:	lsrs	r3, r0, #30
   1c570:	mov	r5, r0
   1c574:	movne	r4, #1
   1c578:	moveq	r4, #0
   1c57c:	tst	r0, #536870912	; 0x20000000
   1c580:	movne	r4, #1
   1c584:	cmp	r0, #0
   1c588:	moveq	r4, #1
   1c58c:	cmp	r4, #0
   1c590:	beq	1c5b0 <__assert_fail@plt+0xa668>
   1c594:	mov	r4, #0
   1c598:	mov	r0, r4
   1c59c:	add	sp, sp, #52	; 0x34
   1c5a0:	ldrd	r4, [sp]
   1c5a4:	ldrd	r6, [sp, #8]
   1c5a8:	add	sp, sp, #16
   1c5ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5b0:	ldr	r3, [r6, #8]
   1c5b4:	cmp	r3, r0
   1c5b8:	beq	1c668 <__assert_fail@plt+0xa720>
   1c5bc:	mov	r1, #8
   1c5c0:	bl	220f8 <__assert_fail@plt+0x101b0>
   1c5c4:	cmp	r0, #0
   1c5c8:	str	r0, [sp, #8]
   1c5cc:	beq	1c594 <__assert_fail@plt+0xa64c>
   1c5d0:	add	r3, r0, r5, lsl #3
   1c5d4:	ldr	r7, [r6, #20]
   1c5d8:	mov	r2, r4
   1c5dc:	add	r0, sp, #8
   1c5e0:	mov	r1, r6
   1c5e4:	ldr	lr, [r6, #28]
   1c5e8:	str	r3, [sp, #12]
   1c5ec:	str	r5, [sp, #16]
   1c5f0:	ldr	r5, [r6, #24]
   1c5f4:	str	r4, [sp, #20]
   1c5f8:	ldr	ip, [r6, #32]
   1c5fc:	str	r4, [sp, #24]
   1c600:	ldr	r3, [r6, #36]	; 0x24
   1c604:	str	r7, [sp, #28]
   1c608:	str	r5, [sp, #32]
   1c60c:	str	lr, [sp, #36]	; 0x24
   1c610:	str	ip, [sp, #40]	; 0x28
   1c614:	str	r3, [sp, #44]	; 0x2c
   1c618:	bl	1bac0 <__assert_fail@plt+0x9b78>
   1c61c:	subs	r4, r0, #0
   1c620:	bne	1c670 <__assert_fail@plt+0xa728>
   1c624:	ldr	r3, [sp, #44]	; 0x2c
   1c628:	mov	r2, #1
   1c62c:	add	r1, sp, #8
   1c630:	mov	r0, r6
   1c634:	str	r3, [r6, #36]	; 0x24
   1c638:	bl	1bac0 <__assert_fail@plt+0x9b78>
   1c63c:	cmp	r0, #0
   1c640:	beq	1c69c <__assert_fail@plt+0xa754>
   1c644:	add	r1, sp, #8
   1c648:	mov	r0, r6
   1c64c:	mov	r2, r4
   1c650:	bl	1bac0 <__assert_fail@plt+0x9b78>
   1c654:	cmp	r0, #0
   1c658:	beq	1c69c <__assert_fail@plt+0xa754>
   1c65c:	ldr	r0, [sp, #8]
   1c660:	bl	1b670 <__assert_fail@plt+0x9728>
   1c664:	b	1c598 <__assert_fail@plt+0xa650>
   1c668:	mov	r4, #1
   1c66c:	b	1c598 <__assert_fail@plt+0xa650>
   1c670:	ldr	r0, [r6]
   1c674:	bl	1b670 <__assert_fail@plt+0x9728>
   1c678:	ldrd	r2, [sp, #8]
   1c67c:	ldr	r1, [sp, #16]
   1c680:	strd	r2, [r6]
   1c684:	ldr	r2, [sp, #20]
   1c688:	str	r1, [r6, #8]
   1c68c:	ldr	r3, [sp, #44]	; 0x2c
   1c690:	str	r2, [r6, #12]
   1c694:	str	r3, [r6, #36]	; 0x24
   1c698:	b	1c598 <__assert_fail@plt+0xa650>
   1c69c:	bl	11f24 <abort@plt>
   1c6a0:	svcmi	0x00800000
   1c6a4:	strd	r4, [sp, #-16]!
   1c6a8:	str	r6, [sp, #8]
   1c6ac:	subs	r6, r1, #0
   1c6b0:	str	lr, [sp, #12]
   1c6b4:	sub	sp, sp, #8
   1c6b8:	beq	1c838 <__assert_fail@plt+0xa8f0>
   1c6bc:	mov	r3, #0
   1c6c0:	mov	r5, r2
   1c6c4:	add	r2, sp, #4
   1c6c8:	mov	r4, r0
   1c6cc:	bl	1b8e4 <__assert_fail@plt+0x999c>
   1c6d0:	subs	r3, r0, #0
   1c6d4:	beq	1c700 <__assert_fail@plt+0xa7b8>
   1c6d8:	cmp	r5, #0
   1c6dc:	moveq	r0, r5
   1c6e0:	beq	1c6ec <__assert_fail@plt+0xa7a4>
   1c6e4:	mov	r0, #0
   1c6e8:	str	r3, [r5]
   1c6ec:	add	sp, sp, #8
   1c6f0:	ldrd	r4, [sp]
   1c6f4:	ldr	r6, [sp, #8]
   1c6f8:	add	sp, sp, #12
   1c6fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c700:	vldr	s15, [r4, #8]
   1c704:	vldr	s14, [r4, #12]
   1c708:	ldr	r3, [r4, #20]
   1c70c:	vcvt.f32.u32	s15, s15
   1c710:	vcvt.f32.u32	s14, s14
   1c714:	vldr	s13, [r3, #8]
   1c718:	vmul.f32	s15, s15, s13
   1c71c:	vcmpe.f32	s14, s15
   1c720:	vmrs	APSR_nzcv, fpscr
   1c724:	bgt	1c76c <__assert_fail@plt+0xa824>
   1c728:	ldr	r2, [sp, #4]
   1c72c:	ldr	r3, [r2]
   1c730:	cmp	r3, #0
   1c734:	beq	1c7c8 <__assert_fail@plt+0xa880>
   1c738:	ldr	r3, [r4, #36]	; 0x24
   1c73c:	cmp	r3, #0
   1c740:	beq	1c7ec <__assert_fail@plt+0xa8a4>
   1c744:	ldr	r1, [r3, #4]
   1c748:	str	r1, [r4, #36]	; 0x24
   1c74c:	ldr	r1, [r4, #16]
   1c750:	mov	r0, #1
   1c754:	ldr	ip, [r2, #4]
   1c758:	add	r1, r1, r0
   1c75c:	stm	r3, {r6, ip}
   1c760:	str	r3, [r2, #4]
   1c764:	str	r1, [r4, #16]
   1c768:	b	1c6ec <__assert_fail@plt+0xa7a4>
   1c76c:	add	r0, r4, #20
   1c770:	bl	1ba0c <__assert_fail@plt+0x9ac4>
   1c774:	vldr	s15, [r4, #8]
   1c778:	vldr	s14, [r4, #12]
   1c77c:	ldr	r3, [r4, #20]
   1c780:	vcvt.f32.u32	s15, s15
   1c784:	vcvt.f32.u32	s14, s14
   1c788:	vldr	s13, [r3, #8]
   1c78c:	vmul.f32	s12, s13, s15
   1c790:	vcmpe.f32	s14, s12
   1c794:	vmrs	APSR_nzcv, fpscr
   1c798:	ble	1c728 <__assert_fail@plt+0xa7e0>
   1c79c:	vldr	s14, [r3, #12]
   1c7a0:	ldrb	r2, [r3, #16]
   1c7a4:	vmul.f32	s15, s15, s14
   1c7a8:	vldr	s14, [pc, #140]	; 1c83c <__assert_fail@plt+0xa8f4>
   1c7ac:	cmp	r2, #0
   1c7b0:	vmuleq.f32	s15, s15, s13
   1c7b4:	vcmpe.f32	s15, s14
   1c7b8:	vmrs	APSR_nzcv, fpscr
   1c7bc:	blt	1c804 <__assert_fail@plt+0xa8bc>
   1c7c0:	mvn	r0, #0
   1c7c4:	b	1c6ec <__assert_fail@plt+0xa7a4>
   1c7c8:	ldr	r1, [r4, #12]
   1c7cc:	mov	r0, #1
   1c7d0:	ldr	r3, [r4, #16]
   1c7d4:	str	r6, [r2]
   1c7d8:	add	r2, r1, r0
   1c7dc:	add	r3, r3, r0
   1c7e0:	str	r2, [r4, #12]
   1c7e4:	str	r3, [r4, #16]
   1c7e8:	b	1c6ec <__assert_fail@plt+0xa7a4>
   1c7ec:	mov	r0, #8
   1c7f0:	bl	2216c <__assert_fail@plt+0x10224>
   1c7f4:	subs	r3, r0, #0
   1c7f8:	beq	1c7c0 <__assert_fail@plt+0xa878>
   1c7fc:	ldr	r2, [sp, #4]
   1c800:	b	1c74c <__assert_fail@plt+0xa804>
   1c804:	vcvt.u32.f32	s15, s15
   1c808:	mov	r0, r4
   1c80c:	vmov	r1, s15
   1c810:	bl	1c514 <__assert_fail@plt+0xa5cc>
   1c814:	cmp	r0, #0
   1c818:	beq	1c7c0 <__assert_fail@plt+0xa878>
   1c81c:	add	r2, sp, #4
   1c820:	mov	r3, #0
   1c824:	mov	r1, r6
   1c828:	mov	r0, r4
   1c82c:	bl	1b8e4 <__assert_fail@plt+0x999c>
   1c830:	cmp	r0, #0
   1c834:	beq	1c728 <__assert_fail@plt+0xa7e0>
   1c838:	bl	11f24 <abort@plt>
   1c83c:	svcmi	0x00800000
   1c840:	str	r4, [sp, #-8]!
   1c844:	mov	r4, r1
   1c848:	str	lr, [sp, #4]
   1c84c:	sub	sp, sp, #8
   1c850:	add	r2, sp, #4
   1c854:	bl	1c6a4 <__assert_fail@plt+0xa75c>
   1c858:	cmn	r0, #1
   1c85c:	moveq	r0, #0
   1c860:	beq	1c870 <__assert_fail@plt+0xa928>
   1c864:	cmp	r0, #0
   1c868:	ldreq	r0, [sp, #4]
   1c86c:	movne	r0, r4
   1c870:	add	sp, sp, #8
   1c874:	ldr	r4, [sp]
   1c878:	add	sp, sp, #4
   1c87c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c880:	strd	r4, [sp, #-16]!
   1c884:	mov	r3, #1
   1c888:	mov	r4, r0
   1c88c:	str	r6, [sp, #8]
   1c890:	str	lr, [sp, #12]
   1c894:	sub	sp, sp, #8
   1c898:	add	r2, sp, #4
   1c89c:	bl	1b8e4 <__assert_fail@plt+0x999c>
   1c8a0:	subs	r5, r0, #0
   1c8a4:	beq	1c8c4 <__assert_fail@plt+0xa97c>
   1c8a8:	ldr	r2, [sp, #4]
   1c8ac:	ldr	r3, [r4, #16]
   1c8b0:	ldr	r2, [r2]
   1c8b4:	sub	r3, r3, #1
   1c8b8:	str	r3, [r4, #16]
   1c8bc:	cmp	r2, #0
   1c8c0:	beq	1c8dc <__assert_fail@plt+0xa994>
   1c8c4:	mov	r0, r5
   1c8c8:	add	sp, sp, #8
   1c8cc:	ldrd	r4, [sp]
   1c8d0:	ldr	r6, [sp, #8]
   1c8d4:	add	sp, sp, #12
   1c8d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8dc:	vldr	s15, [r4, #8]
   1c8e0:	ldr	r3, [r4, #12]
   1c8e4:	ldr	r2, [r4, #20]
   1c8e8:	vcvt.f32.u32	s15, s15
   1c8ec:	sub	r3, r3, #1
   1c8f0:	vmov	s14, r3
   1c8f4:	vldr	s13, [r2]
   1c8f8:	str	r3, [r4, #12]
   1c8fc:	vmul.f32	s15, s15, s13
   1c900:	vcvt.f32.u32	s14, s14
   1c904:	vcmpe.f32	s14, s15
   1c908:	vmrs	APSR_nzcv, fpscr
   1c90c:	bpl	1c8c4 <__assert_fail@plt+0xa97c>
   1c910:	add	r0, r4, #20
   1c914:	bl	1ba0c <__assert_fail@plt+0x9ac4>
   1c918:	vldr	s15, [r4, #8]
   1c91c:	vldr	s13, [r4, #12]
   1c920:	ldr	r3, [r4, #20]
   1c924:	vcvt.f32.u32	s15, s15
   1c928:	vcvt.f32.u32	s13, s13
   1c92c:	vldr	s14, [r3]
   1c930:	vmul.f32	s14, s15, s14
   1c934:	vcmpe.f32	s13, s14
   1c938:	vmrs	APSR_nzcv, fpscr
   1c93c:	bpl	1c8c4 <__assert_fail@plt+0xa97c>
   1c940:	ldrb	r2, [r3, #16]
   1c944:	mov	r0, r4
   1c948:	vldr	s14, [r3, #4]
   1c94c:	cmp	r2, #0
   1c950:	vmul.f32	s15, s15, s14
   1c954:	vldreq	s14, [r3, #8]
   1c958:	vmuleq.f32	s15, s15, s14
   1c95c:	vcvt.u32.f32	s15, s15
   1c960:	vmov	r1, s15
   1c964:	bl	1c514 <__assert_fail@plt+0xa5cc>
   1c968:	cmp	r0, #0
   1c96c:	bne	1c8c4 <__assert_fail@plt+0xa97c>
   1c970:	ldr	r0, [r4, #36]	; 0x24
   1c974:	cmp	r0, #0
   1c978:	beq	1c98c <__assert_fail@plt+0xaa44>
   1c97c:	ldr	r6, [r0, #4]
   1c980:	bl	1b670 <__assert_fail@plt+0x9728>
   1c984:	subs	r0, r6, #0
   1c988:	bne	1c97c <__assert_fail@plt+0xaa34>
   1c98c:	mov	r3, #0
   1c990:	str	r3, [r4, #36]	; 0x24
   1c994:	b	1c8c4 <__assert_fail@plt+0xa97c>
   1c998:	b	1c880 <__assert_fail@plt+0xa938>
   1c99c:	mov	r0, #0
   1c9a0:	bx	lr
   1c9a4:	strd	r4, [sp, #-16]!
   1c9a8:	mov	r5, r1
   1c9ac:	str	r6, [sp, #8]
   1c9b0:	mov	r6, r0
   1c9b4:	mov	r0, #16
   1c9b8:	str	lr, [sp, #12]
   1c9bc:	bl	20f80 <__assert_fail@plt+0xf038>
   1c9c0:	cmp	r5, #0
   1c9c4:	mov	r4, r0
   1c9c8:	moveq	r5, #1
   1c9cc:	mov	r1, #4
   1c9d0:	mov	r0, r5
   1c9d4:	bl	210e8 <__assert_fail@plt+0xf1a0>
   1c9d8:	mov	r2, #0
   1c9dc:	movw	r3, #51612	; 0xc99c
   1c9e0:	movt	r3, #1
   1c9e4:	cmp	r6, r2
   1c9e8:	mov	r1, r0
   1c9ec:	moveq	r6, r3
   1c9f0:	mov	r0, r4
   1c9f4:	stm	r4, {r1, r5}
   1c9f8:	str	r2, [r4, #8]
   1c9fc:	str	r6, [r4, #12]
   1ca00:	ldrd	r4, [sp]
   1ca04:	str	r2, [r1]
   1ca08:	ldr	r6, [sp, #8]
   1ca0c:	add	sp, sp, #12
   1ca10:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca14:	str	r4, [sp, #-8]!
   1ca18:	mov	r4, r0
   1ca1c:	ldr	r0, [r0]
   1ca20:	str	lr, [sp, #4]
   1ca24:	bl	1b670 <__assert_fail@plt+0x9728>
   1ca28:	mov	r0, r4
   1ca2c:	ldr	r4, [sp]
   1ca30:	ldr	lr, [sp, #4]
   1ca34:	add	sp, sp, #8
   1ca38:	b	1b670 <__assert_fail@plt+0x9728>
   1ca3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ca40:	mov	r5, r0
   1ca44:	ldm	r0, {r0, r3, r4}
   1ca48:	strd	r6, [sp, #8]
   1ca4c:	mov	r6, r1
   1ca50:	str	r8, [sp, #16]
   1ca54:	sub	r3, r3, #1
   1ca58:	str	lr, [sp, #20]
   1ca5c:	cmp	r3, r4
   1ca60:	bls	1cadc <__assert_fail@plt+0xab94>
   1ca64:	add	r4, r4, #1
   1ca68:	cmp	r4, #1
   1ca6c:	str	r4, [r5, #8]
   1ca70:	str	r6, [r0, r4, lsl #2]
   1ca74:	ldr	r6, [r5]
   1ca78:	ldr	r8, [r5, #12]
   1ca7c:	ldr	r7, [r6, r4, lsl #2]
   1ca80:	bne	1ca9c <__assert_fail@plt+0xab54>
   1ca84:	b	1cad4 <__assert_fail@plt+0xab8c>
   1ca88:	ldr	r3, [r6, r5, lsl #2]
   1ca8c:	cmp	r5, #1
   1ca90:	str	r3, [r6, r4, lsl #2]
   1ca94:	mov	r4, r5
   1ca98:	beq	1cad4 <__assert_fail@plt+0xab8c>
   1ca9c:	lsr	r5, r4, #1
   1caa0:	mov	r1, r7
   1caa4:	ldr	r0, [r6, r5, lsl #2]
   1caa8:	blx	r8
   1caac:	cmp	r0, #0
   1cab0:	add	r3, r6, r4, lsl #2
   1cab4:	ble	1ca88 <__assert_fail@plt+0xab40>
   1cab8:	ldrd	r4, [sp]
   1cabc:	mov	r0, #0
   1cac0:	ldr	r8, [sp, #16]
   1cac4:	str	r7, [r3]
   1cac8:	ldrd	r6, [sp, #8]
   1cacc:	add	sp, sp, #20
   1cad0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cad4:	add	r3, r6, #4
   1cad8:	b	1cab8 <__assert_fail@plt+0xab70>
   1cadc:	mov	r2, #4
   1cae0:	add	r1, r5, r2
   1cae4:	bl	21108 <__assert_fail@plt+0xf1c0>
   1cae8:	str	r0, [r5]
   1caec:	ldr	r4, [r5, #8]
   1caf0:	b	1ca64 <__assert_fail@plt+0xab1c>
   1caf4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1caf8:	strd	r6, [sp, #8]
   1cafc:	strd	r8, [sp, #16]
   1cb00:	ldr	r8, [r0, #8]
   1cb04:	strd	sl, [sp, #24]
   1cb08:	str	lr, [sp, #32]
   1cb0c:	sub	sp, sp, #20
   1cb10:	cmp	r8, #0
   1cb14:	beq	1cbc4 <__assert_fail@plt+0xac7c>
   1cb18:	ldr	r3, [r0]
   1cb1c:	sub	r9, r8, #1
   1cb20:	lsrs	r2, r9, #1
   1cb24:	str	r2, [sp, #4]
   1cb28:	ldr	r2, [r3, r8, lsl #2]
   1cb2c:	ldr	r8, [r3, #4]
   1cb30:	str	r9, [r0, #8]
   1cb34:	str	r2, [r3, #4]
   1cb38:	ldr	r4, [r0]
   1cb3c:	ldr	sl, [r0, #12]
   1cb40:	ldr	fp, [r4, #4]
   1cb44:	beq	1cbf0 <__assert_fail@plt+0xaca8>
   1cb48:	mov	r5, #1
   1cb4c:	str	r9, [sp, #8]
   1cb50:	str	r8, [sp, #12]
   1cb54:	b	1cb70 <__assert_fail@plt+0xac28>
   1cb58:	ldr	r2, [sp, #4]
   1cb5c:	ldr	r3, [r7]
   1cb60:	cmp	r6, r2
   1cb64:	str	r3, [r4, r5, lsl #2]
   1cb68:	mov	r5, r6
   1cb6c:	bhi	1cbe4 <__assert_fail@plt+0xac9c>
   1cb70:	ldr	r3, [sp, #8]
   1cb74:	lsl	r6, r5, #1
   1cb78:	add	r7, r4, r5, lsl #3
   1cb7c:	add	r8, r6, #1
   1cb80:	add	r9, r4, r8, lsl #2
   1cb84:	cmp	r3, r6
   1cb88:	bls	1cba4 <__assert_fail@plt+0xac5c>
   1cb8c:	ldr	r1, [r4, r8, lsl #2]
   1cb90:	ldr	r0, [r4, r5, lsl #3]
   1cb94:	blx	sl
   1cb98:	cmp	r0, #0
   1cb9c:	movlt	r7, r9
   1cba0:	movlt	r6, r8
   1cba4:	mov	r1, fp
   1cba8:	ldr	r0, [r7]
   1cbac:	blx	sl
   1cbb0:	cmp	r0, #0
   1cbb4:	add	r3, r4, r5, lsl #2
   1cbb8:	bgt	1cb58 <__assert_fail@plt+0xac10>
   1cbbc:	ldr	r8, [sp, #12]
   1cbc0:	str	fp, [r3]
   1cbc4:	mov	r0, r8
   1cbc8:	add	sp, sp, #20
   1cbcc:	ldrd	r4, [sp]
   1cbd0:	ldrd	r6, [sp, #8]
   1cbd4:	ldrd	r8, [sp, #16]
   1cbd8:	ldrd	sl, [sp, #24]
   1cbdc:	add	sp, sp, #32
   1cbe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbe4:	mov	r3, r7
   1cbe8:	ldr	r8, [sp, #12]
   1cbec:	b	1cbc0 <__assert_fail@plt+0xac78>
   1cbf0:	add	r3, r4, #4
   1cbf4:	b	1cbc0 <__assert_fail@plt+0xac78>
   1cbf8:	mov	r3, #0
   1cbfc:	subs	ip, r0, #0
   1cc00:	add	r0, r1, #11
   1cc04:	strb	r3, [r1, #11]
   1cc08:	movwge	r1, #52429	; 0xcccd
   1cc0c:	movtge	r1, #52428	; 0xcccc
   1cc10:	blt	1cc38 <__assert_fail@plt+0xacf0>
   1cc14:	umull	r2, r3, r1, ip
   1cc18:	lsr	r3, r3, #3
   1cc1c:	add	r2, r3, r3, lsl #2
   1cc20:	sub	r2, ip, r2, lsl #1
   1cc24:	subs	ip, r3, #0
   1cc28:	add	r3, r2, #48	; 0x30
   1cc2c:	strb	r3, [r0, #-1]!
   1cc30:	bne	1cc14 <__assert_fail@plt+0xaccc>
   1cc34:	bx	lr
   1cc38:	push	{lr}		; (str lr, [sp, #-4]!)
   1cc3c:	movw	lr, #26215	; 0x6667
   1cc40:	movt	lr, #26214	; 0x6666
   1cc44:	b	1cc4c <__assert_fail@plt+0xad04>
   1cc48:	mov	r0, r1
   1cc4c:	smull	r3, r2, lr, ip
   1cc50:	sub	r1, r0, #1
   1cc54:	asr	r3, ip, #31
   1cc58:	rsb	r3, r3, r2, asr #2
   1cc5c:	add	r2, r3, r3, lsl #2
   1cc60:	sub	r2, ip, r2, lsl #1
   1cc64:	subs	ip, r3, #0
   1cc68:	rsb	r3, r2, #48	; 0x30
   1cc6c:	strb	r3, [r0, #-1]
   1cc70:	bne	1cc48 <__assert_fail@plt+0xad00>
   1cc74:	mov	r3, #45	; 0x2d
   1cc78:	sub	r0, r0, #2
   1cc7c:	strb	r3, [r1, #-1]
   1cc80:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc84:	mov	r3, #0
   1cc88:	add	ip, r1, #10
   1cc8c:	push	{lr}		; (str lr, [sp, #-4]!)
   1cc90:	movw	lr, #52429	; 0xcccd
   1cc94:	movt	lr, #52428	; 0xcccc
   1cc98:	strb	r3, [r1, #10]
   1cc9c:	umull	r3, r2, lr, r0
   1cca0:	cmp	r0, #9
   1cca4:	lsr	r2, r2, #3
   1cca8:	add	r3, r2, r2, lsl #2
   1ccac:	sub	r3, r0, r3, lsl #1
   1ccb0:	mov	r0, r2
   1ccb4:	add	r3, r3, #48	; 0x30
   1ccb8:	strb	r3, [ip, #-1]!
   1ccbc:	bhi	1cc9c <__assert_fail@plt+0xad54>
   1ccc0:	mov	r0, ip
   1ccc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccc8:	mov	r3, #0
   1cccc:	strd	r4, [sp, #-16]!
   1ccd0:	mov	r4, r0
   1ccd4:	mov	r5, r1
   1ccd8:	str	r6, [sp, #8]
   1ccdc:	add	r6, r2, #20
   1cce0:	str	lr, [sp, #12]
   1cce4:	strb	r3, [r2, #20]
   1cce8:	mov	r0, r4
   1ccec:	mov	r1, r5
   1ccf0:	mov	r2, #10
   1ccf4:	mov	r3, #0
   1ccf8:	bl	230c4 <_obstack_memory_used@@Base+0x438>
   1ccfc:	add	ip, r2, #48	; 0x30
   1cd00:	mov	r0, r4
   1cd04:	mov	r1, r5
   1cd08:	mov	r2, #10
   1cd0c:	mov	r3, #0
   1cd10:	strb	ip, [r6, #-1]!
   1cd14:	bl	230c4 <_obstack_memory_used@@Base+0x438>
   1cd18:	cmp	r5, #0
   1cd1c:	mov	r5, r1
   1cd20:	cmpeq	r4, #9
   1cd24:	mov	r4, r0
   1cd28:	bhi	1cce8 <__assert_fail@plt+0xada0>
   1cd2c:	mov	r0, r6
   1cd30:	ldrd	r4, [sp]
   1cd34:	ldr	r6, [sp, #8]
   1cd38:	add	sp, sp, #12
   1cd3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1cd44:	mov	r4, r0
   1cd48:	strd	r6, [sp, #8]
   1cd4c:	add	r6, r0, r1
   1cd50:	str	r8, [sp, #16]
   1cd54:	strd	sl, [sp, #20]
   1cd58:	mov	fp, r2
   1cd5c:	str	lr, [sp, #28]
   1cd60:	sub	sp, sp, #16
   1cd64:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1cd68:	cmp	r0, #1
   1cd6c:	bls	1ce90 <__assert_fail@plt+0xaf48>
   1cd70:	cmp	r4, r6
   1cd74:	mov	r5, #0
   1cd78:	bcs	1ce70 <__assert_fail@plt+0xaf28>
   1cd7c:	and	sl, fp, #2
   1cd80:	b	1cda8 <__assert_fail@plt+0xae60>
   1cd84:	cmp	r3, #37	; 0x25
   1cd88:	bcs	1cd98 <__assert_fail@plt+0xae50>
   1cd8c:	sub	r3, r3, #32
   1cd90:	cmp	r3, #3
   1cd94:	bhi	1cdd0 <__assert_fail@plt+0xae88>
   1cd98:	add	r4, r4, #1
   1cd9c:	add	r5, r5, #1
   1cda0:	cmp	r4, r6
   1cda4:	bcs	1ce70 <__assert_fail@plt+0xaf28>
   1cda8:	ldrb	r3, [r4]
   1cdac:	cmp	r3, #63	; 0x3f
   1cdb0:	bls	1cd84 <__assert_fail@plt+0xae3c>
   1cdb4:	cmp	r3, #65	; 0x41
   1cdb8:	bcc	1cdd0 <__assert_fail@plt+0xae88>
   1cdbc:	cmp	r3, #95	; 0x5f
   1cdc0:	bls	1cd98 <__assert_fail@plt+0xae50>
   1cdc4:	sub	r3, r3, #97	; 0x61
   1cdc8:	cmp	r3, #29
   1cdcc:	bls	1cd98 <__assert_fail@plt+0xae50>
   1cdd0:	mov	r2, #0
   1cdd4:	mov	r3, #0
   1cdd8:	mvn	r7, #-2147483648	; 0x80000000
   1cddc:	strd	r2, [sp, #8]
   1cde0:	b	1ce04 <__assert_fail@plt+0xaebc>
   1cde4:	cmp	r2, r0
   1cde8:	add	r5, r5, r0
   1cdec:	blt	1ce6c <__assert_fail@plt+0xaf24>
   1cdf0:	add	r0, sp, #8
   1cdf4:	add	r4, r4, r8
   1cdf8:	bl	11af8 <mbsinit@plt>
   1cdfc:	cmp	r0, #0
   1ce00:	bne	1cda0 <__assert_fail@plt+0xae58>
   1ce04:	add	r3, sp, #8
   1ce08:	sub	r2, r6, r4
   1ce0c:	mov	r1, r4
   1ce10:	add	r0, sp, #4
   1ce14:	bl	226a8 <__assert_fail@plt+0x10760>
   1ce18:	cmn	r0, #1
   1ce1c:	mov	r8, r0
   1ce20:	beq	1cee8 <__assert_fail@plt+0xafa0>
   1ce24:	cmn	r0, #2
   1ce28:	beq	1cef8 <__assert_fail@plt+0xafb0>
   1ce2c:	cmp	r0, #0
   1ce30:	ldr	r0, [sp, #4]
   1ce34:	moveq	r8, #1
   1ce38:	bl	11a74 <wcwidth@plt>
   1ce3c:	cmp	r0, #0
   1ce40:	sub	r2, r7, r5
   1ce44:	bge	1cde4 <__assert_fail@plt+0xae9c>
   1ce48:	cmp	sl, #0
   1ce4c:	bne	1cef0 <__assert_fail@plt+0xafa8>
   1ce50:	ldr	r0, [sp, #4]
   1ce54:	bl	11bc4 <iswcntrl@plt>
   1ce58:	cmp	r0, #0
   1ce5c:	bne	1cdf0 <__assert_fail@plt+0xaea8>
   1ce60:	cmn	r5, #-2147483647	; 0x80000001
   1ce64:	add	r5, r5, #1
   1ce68:	bne	1cdf0 <__assert_fail@plt+0xaea8>
   1ce6c:	mvn	r5, #-2147483648	; 0x80000000
   1ce70:	mov	r0, r5
   1ce74:	add	sp, sp, #16
   1ce78:	ldrd	r4, [sp]
   1ce7c:	ldrd	r6, [sp, #8]
   1ce80:	ldr	r8, [sp, #16]
   1ce84:	ldrd	sl, [sp, #20]
   1ce88:	add	sp, sp, #28
   1ce8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce90:	cmp	r4, r6
   1ce94:	movcs	r5, #0
   1ce98:	bcs	1ce70 <__assert_fail@plt+0xaf28>
   1ce9c:	bl	11d2c <__ctype_b_loc@plt>
   1cea0:	ldr	r2, [r0]
   1cea4:	and	fp, fp, #2
   1cea8:	mov	r5, #0
   1ceac:	ldrb	r3, [r4], #1
   1ceb0:	lsl	r3, r3, #1
   1ceb4:	ldrh	r3, [r2, r3]
   1ceb8:	tst	r3, #16384	; 0x4000
   1cebc:	bne	1ced0 <__assert_fail@plt+0xaf88>
   1cec0:	cmp	fp, #0
   1cec4:	bne	1cef0 <__assert_fail@plt+0xafa8>
   1cec8:	tst	r3, #2
   1cecc:	bne	1cedc <__assert_fail@plt+0xaf94>
   1ced0:	cmn	r5, #-2147483647	; 0x80000001
   1ced4:	beq	1ce70 <__assert_fail@plt+0xaf28>
   1ced8:	add	r5, r5, #1
   1cedc:	cmp	r6, r4
   1cee0:	bne	1ceac <__assert_fail@plt+0xaf64>
   1cee4:	b	1ce70 <__assert_fail@plt+0xaf28>
   1cee8:	tst	fp, #1
   1ceec:	beq	1cd98 <__assert_fail@plt+0xae50>
   1cef0:	mvn	r5, #0
   1cef4:	b	1ce70 <__assert_fail@plt+0xaf28>
   1cef8:	tst	fp, #1
   1cefc:	bne	1cef0 <__assert_fail@plt+0xafa8>
   1cf00:	add	r5, r5, #1
   1cf04:	mov	r4, r6
   1cf08:	b	1cda0 <__assert_fail@plt+0xae58>
   1cf0c:	strd	r4, [sp, #-16]!
   1cf10:	mov	r5, r1
   1cf14:	mov	r4, r0
   1cf18:	str	r6, [sp, #8]
   1cf1c:	str	lr, [sp, #12]
   1cf20:	bl	11d50 <strlen@plt>
   1cf24:	mov	r1, r0
   1cf28:	mov	r2, r5
   1cf2c:	ldr	r6, [sp, #8]
   1cf30:	mov	r0, r4
   1cf34:	ldrd	r4, [sp]
   1cf38:	ldr	lr, [sp, #12]
   1cf3c:	add	sp, sp, #16
   1cf40:	b	1cd40 <__assert_fail@plt+0xadf8>
   1cf44:	push	{lr}		; (str lr, [sp, #-4]!)
   1cf48:	sub	sp, sp, #132	; 0x84
   1cf4c:	mov	r1, #128	; 0x80
   1cf50:	mov	r2, sp
   1cf54:	mov	r0, #0
   1cf58:	bl	11ed0 <sched_getaffinity@plt>
   1cf5c:	cmp	r0, #0
   1cf60:	beq	1cf70 <__assert_fail@plt+0xb028>
   1cf64:	mov	r0, #0
   1cf68:	add	sp, sp, #132	; 0x84
   1cf6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf70:	mov	r1, sp
   1cf74:	mov	r0, #128	; 0x80
   1cf78:	bl	11b10 <__sched_cpucount@plt>
   1cf7c:	cmp	r0, #0
   1cf80:	beq	1cf64 <__assert_fail@plt+0xb01c>
   1cf84:	add	sp, sp, #132	; 0x84
   1cf88:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf8c:	ldrb	r3, [r0]
   1cf90:	cmp	r3, #0
   1cf94:	beq	1cfbc <__assert_fail@plt+0xb074>
   1cf98:	cmp	r3, #9
   1cf9c:	bcc	1cfc4 <__assert_fail@plt+0xb07c>
   1cfa0:	cmp	r3, #13
   1cfa4:	bls	1cfb0 <__assert_fail@plt+0xb068>
   1cfa8:	cmp	r3, #32
   1cfac:	bne	1cfc4 <__assert_fail@plt+0xb07c>
   1cfb0:	ldrb	r3, [r0, #1]!
   1cfb4:	cmp	r3, #0
   1cfb8:	bne	1cf98 <__assert_fail@plt+0xb050>
   1cfbc:	mov	r0, #0
   1cfc0:	bx	lr
   1cfc4:	sub	r3, r3, #48	; 0x30
   1cfc8:	cmp	r3, #9
   1cfcc:	bhi	1cfbc <__assert_fail@plt+0xb074>
   1cfd0:	mov	r3, #0
   1cfd4:	push	{lr}		; (str lr, [sp, #-4]!)
   1cfd8:	sub	sp, sp, #12
   1cfdc:	mov	r2, #10
   1cfe0:	add	r1, sp, #4
   1cfe4:	str	r3, [sp, #4]
   1cfe8:	bl	11d44 <strtoul@plt>
   1cfec:	ldr	r2, [sp, #4]
   1cff0:	cmp	r2, #0
   1cff4:	beq	1d028 <__assert_fail@plt+0xb0e0>
   1cff8:	ldrb	r3, [r2]
   1cffc:	cmp	r3, #0
   1d000:	beq	1d02c <__assert_fail@plt+0xb0e4>
   1d004:	cmp	r3, #9
   1d008:	add	r2, r2, #1
   1d00c:	bcc	1d020 <__assert_fail@plt+0xb0d8>
   1d010:	cmp	r3, #13
   1d014:	bls	1d034 <__assert_fail@plt+0xb0ec>
   1d018:	cmp	r3, #32
   1d01c:	beq	1d034 <__assert_fail@plt+0xb0ec>
   1d020:	cmp	r3, #44	; 0x2c
   1d024:	beq	1d02c <__assert_fail@plt+0xb0e4>
   1d028:	mov	r0, #0
   1d02c:	add	sp, sp, #12
   1d030:	pop	{pc}		; (ldr pc, [sp], #4)
   1d034:	str	r2, [sp, #4]
   1d038:	ldrb	r3, [r2]
   1d03c:	cmp	r3, #0
   1d040:	bne	1d004 <__assert_fail@plt+0xb0bc>
   1d044:	b	1d02c <__assert_fail@plt+0xb0e4>
   1d048:	cmp	r0, #2
   1d04c:	strd	r4, [sp, #-16]!
   1d050:	str	r6, [sp, #8]
   1d054:	str	lr, [sp, #12]
   1d058:	beq	1d0a0 <__assert_fail@plt+0xb158>
   1d05c:	cmp	r0, #1
   1d060:	beq	1d158 <__assert_fail@plt+0xb210>
   1d064:	mov	r0, #83	; 0x53
   1d068:	bl	11b70 <sysconf@plt>
   1d06c:	sub	r3, r0, #1
   1d070:	mov	r5, r0
   1d074:	cmp	r3, #1
   1d078:	mov	r4, r0
   1d07c:	bls	1d100 <__assert_fail@plt+0xb1b8>
   1d080:	cmp	r5, #1
   1d084:	movge	r4, r5
   1d088:	movlt	r4, #1
   1d08c:	mov	r0, r4
   1d090:	ldrd	r4, [sp]
   1d094:	ldr	r6, [sp, #8]
   1d098:	add	sp, sp, #12
   1d09c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0a0:	movw	r0, #21692	; 0x54bc
   1d0a4:	movt	r0, #2
   1d0a8:	bl	11cb4 <getenv@plt>
   1d0ac:	cmp	r0, #0
   1d0b0:	beq	1d138 <__assert_fail@plt+0xb1f0>
   1d0b4:	bl	1cf8c <__assert_fail@plt+0xb044>
   1d0b8:	mov	r5, r0
   1d0bc:	movw	r0, #21708	; 0x54cc
   1d0c0:	movt	r0, #2
   1d0c4:	bl	11cb4 <getenv@plt>
   1d0c8:	cmp	r0, #0
   1d0cc:	mvneq	r4, #0
   1d0d0:	beq	1d0e0 <__assert_fail@plt+0xb198>
   1d0d4:	bl	1cf8c <__assert_fail@plt+0xb044>
   1d0d8:	subs	r4, r0, #0
   1d0dc:	mvneq	r4, #0
   1d0e0:	cmp	r5, #0
   1d0e4:	bne	1d12c <__assert_fail@plt+0xb1e4>
   1d0e8:	bl	1cf44 <__assert_fail@plt+0xaffc>
   1d0ec:	cmp	r0, #0
   1d0f0:	beq	1d114 <__assert_fail@plt+0xb1cc>
   1d0f4:	cmp	r0, r4
   1d0f8:	movcc	r4, r0
   1d0fc:	b	1d08c <__assert_fail@plt+0xb144>
   1d100:	bl	1cf44 <__assert_fail@plt+0xaffc>
   1d104:	cmp	r5, r0
   1d108:	bcs	1d08c <__assert_fail@plt+0xb144>
   1d10c:	mov	r5, r0
   1d110:	b	1d080 <__assert_fail@plt+0xb138>
   1d114:	mov	r0, #84	; 0x54
   1d118:	bl	11b70 <sysconf@plt>
   1d11c:	cmp	r0, #0
   1d120:	movle	r4, #1
   1d124:	ble	1d08c <__assert_fail@plt+0xb144>
   1d128:	b	1d0f4 <__assert_fail@plt+0xb1ac>
   1d12c:	cmp	r4, r5
   1d130:	movcs	r4, r5
   1d134:	b	1d08c <__assert_fail@plt+0xb144>
   1d138:	movw	r0, #21708	; 0x54cc
   1d13c:	movt	r0, #2
   1d140:	bl	11cb4 <getenv@plt>
   1d144:	cmp	r0, #0
   1d148:	beq	1d158 <__assert_fail@plt+0xb210>
   1d14c:	bl	1cf8c <__assert_fail@plt+0xb044>
   1d150:	subs	r4, r0, #0
   1d154:	bne	1d0e8 <__assert_fail@plt+0xb1a0>
   1d158:	mvn	r4, #0
   1d15c:	b	1d0e8 <__assert_fail@plt+0xb1a0>
   1d160:	mov	r0, #85	; 0x55
   1d164:	str	r4, [sp, #-8]!
   1d168:	str	lr, [sp, #4]
   1d16c:	sub	sp, sp, #64	; 0x40
   1d170:	bl	11b70 <sysconf@plt>
   1d174:	mov	r4, r0
   1d178:	mov	r0, #30
   1d17c:	bl	11b70 <sysconf@plt>
   1d180:	cmp	r4, #0
   1d184:	cmpge	r0, #0
   1d188:	bge	1d1d4 <__assert_fail@plt+0xb28c>
   1d18c:	mov	r0, sp
   1d190:	bl	11ccc <sysinfo@plt>
   1d194:	cmp	r0, #0
   1d198:	beq	1d1b0 <__assert_fail@plt+0xb268>
   1d19c:	vldr	d0, [pc, #84]	; 1d1f8 <__assert_fail@plt+0xb2b0>
   1d1a0:	add	sp, sp, #64	; 0x40
   1d1a4:	ldr	r4, [sp]
   1d1a8:	add	sp, sp, #4
   1d1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1b0:	vldr	s15, [sp, #16]
   1d1b4:	vcvt.f64.u32	d0, s15
   1d1b8:	vldr	s15, [sp, #52]	; 0x34
   1d1bc:	vcvt.f64.u32	d7, s15
   1d1c0:	vmul.f64	d0, d0, d7
   1d1c4:	add	sp, sp, #64	; 0x40
   1d1c8:	ldr	r4, [sp]
   1d1cc:	add	sp, sp, #4
   1d1d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1d4:	vmov	s15, r4
   1d1d8:	vcvt.f64.s32	d0, s15
   1d1dc:	vmov	s15, r0
   1d1e0:	vcvt.f64.s32	d7, s15
   1d1e4:	vmul.f64	d0, d0, d7
   1d1e8:	add	sp, sp, #64	; 0x40
   1d1ec:	ldr	r4, [sp]
   1d1f0:	add	sp, sp, #4
   1d1f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1f8:	andeq	r0, r0, r0
   1d1fc:	orrsmi	r0, r0, r0
   1d200:	mov	r0, #86	; 0x56
   1d204:	str	r4, [sp, #-8]!
   1d208:	str	lr, [sp, #4]
   1d20c:	sub	sp, sp, #64	; 0x40
   1d210:	bl	11b70 <sysconf@plt>
   1d214:	mov	r4, r0
   1d218:	mov	r0, #30
   1d21c:	bl	11b70 <sysconf@plt>
   1d220:	cmp	r0, #0
   1d224:	cmpge	r4, #0
   1d228:	bge	1d288 <__assert_fail@plt+0xb340>
   1d22c:	mov	r0, sp
   1d230:	bl	11ccc <sysinfo@plt>
   1d234:	cmp	r0, #0
   1d238:	bne	1d26c <__assert_fail@plt+0xb324>
   1d23c:	vldr	s15, [sp, #20]
   1d240:	vcvt.f64.u32	d0, s15
   1d244:	vldr	s15, [sp, #28]
   1d248:	vcvt.f64.u32	d6, s15
   1d24c:	vldr	s15, [sp, #52]	; 0x34
   1d250:	vadd.f64	d0, d0, d6
   1d254:	vcvt.f64.u32	d7, s15
   1d258:	vmul.f64	d0, d0, d7
   1d25c:	add	sp, sp, #64	; 0x40
   1d260:	ldr	r4, [sp]
   1d264:	add	sp, sp, #4
   1d268:	pop	{pc}		; (ldr pc, [sp], #4)
   1d26c:	bl	1d160 <__assert_fail@plt+0xb218>
   1d270:	vldr	d7, [pc, #56]	; 1d2b0 <__assert_fail@plt+0xb368>
   1d274:	vmul.f64	d0, d0, d7
   1d278:	add	sp, sp, #64	; 0x40
   1d27c:	ldr	r4, [sp]
   1d280:	add	sp, sp, #4
   1d284:	pop	{pc}		; (ldr pc, [sp], #4)
   1d288:	vmov	s15, r4
   1d28c:	vcvt.f64.s32	d0, s15
   1d290:	vmov	s15, r0
   1d294:	vcvt.f64.s32	d7, s15
   1d298:	vmul.f64	d0, d0, d7
   1d29c:	add	sp, sp, #64	; 0x40
   1d2a0:	ldr	r4, [sp]
   1d2a4:	add	sp, sp, #4
   1d2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2ac:	nop	{0}
   1d2b0:	andeq	r0, r0, r0
   1d2b4:	svccc	0x00d00000
   1d2b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d2bc:	mov	r4, r0
   1d2c0:	strd	r6, [sp, #8]
   1d2c4:	movw	r6, #26824	; 0x68c8
   1d2c8:	movt	r6, #3
   1d2cc:	ldr	r3, [r6]
   1d2d0:	mov	r7, r1
   1d2d4:	strd	r8, [sp, #16]
   1d2d8:	str	sl, [sp, #24]
   1d2dc:	str	lr, [sp, #28]
   1d2e0:	ldrd	r8, [r0]
   1d2e4:	cmp	r3, #0
   1d2e8:	bge	1d428 <__assert_fail@plt+0xb4e0>
   1d2ec:	bic	r5, r7, #524288	; 0x80000
   1d2f0:	bic	r5, r5, #2048	; 0x800
   1d2f4:	cmp	r5, #0
   1d2f8:	bne	1d45c <__assert_fail@plt+0xb514>
   1d2fc:	mov	r0, r4
   1d300:	bl	11df8 <pipe@plt>
   1d304:	cmp	r0, #0
   1d308:	blt	1d470 <__assert_fail@plt+0xb528>
   1d30c:	tst	r7, #2048	; 0x800
   1d310:	bne	1d338 <__assert_fail@plt+0xb3f0>
   1d314:	tst	r7, #524288	; 0x80000
   1d318:	bne	1d3c4 <__assert_fail@plt+0xb47c>
   1d31c:	mov	r0, r5
   1d320:	ldrd	r4, [sp]
   1d324:	ldrd	r6, [sp, #8]
   1d328:	ldrd	r8, [sp, #16]
   1d32c:	ldr	sl, [sp, #24]
   1d330:	add	sp, sp, #28
   1d334:	pop	{pc}		; (ldr pc, [sp], #4)
   1d338:	mov	r2, r5
   1d33c:	mov	r1, #3
   1d340:	ldr	r0, [r4, #4]
   1d344:	bl	22358 <__assert_fail@plt+0x10410>
   1d348:	cmp	r0, #0
   1d34c:	blt	1d398 <__assert_fail@plt+0xb450>
   1d350:	orr	r2, r0, #2048	; 0x800
   1d354:	mov	r1, #4
   1d358:	ldr	r0, [r4, #4]
   1d35c:	bl	22358 <__assert_fail@plt+0x10410>
   1d360:	cmn	r0, #1
   1d364:	beq	1d398 <__assert_fail@plt+0xb450>
   1d368:	mov	r2, r5
   1d36c:	mov	r1, #3
   1d370:	ldr	r0, [r4]
   1d374:	bl	22358 <__assert_fail@plt+0x10410>
   1d378:	subs	r2, r0, #0
   1d37c:	blt	1d398 <__assert_fail@plt+0xb450>
   1d380:	orr	r2, r2, #2048	; 0x800
   1d384:	mov	r1, #4
   1d388:	ldr	r0, [r4]
   1d38c:	bl	22358 <__assert_fail@plt+0x10410>
   1d390:	cmn	r0, #1
   1d394:	bne	1d314 <__assert_fail@plt+0xb3cc>
   1d398:	bl	11d74 <__errno_location@plt>
   1d39c:	mov	r6, r0
   1d3a0:	ldr	r0, [r4]
   1d3a4:	mvn	r5, #0
   1d3a8:	ldr	r7, [r6]
   1d3ac:	bl	11f30 <close@plt>
   1d3b0:	ldr	r0, [r4, #4]
   1d3b4:	bl	11f30 <close@plt>
   1d3b8:	strd	r8, [r4]
   1d3bc:	str	r7, [r6]
   1d3c0:	b	1d31c <__assert_fail@plt+0xb3d4>
   1d3c4:	mov	r2, #0
   1d3c8:	mov	r1, #1
   1d3cc:	ldr	r0, [r4, #4]
   1d3d0:	bl	22358 <__assert_fail@plt+0x10410>
   1d3d4:	subs	r2, r0, #0
   1d3d8:	blt	1d398 <__assert_fail@plt+0xb450>
   1d3dc:	orr	r2, r2, #1
   1d3e0:	mov	r1, #2
   1d3e4:	ldr	r0, [r4, #4]
   1d3e8:	bl	22358 <__assert_fail@plt+0x10410>
   1d3ec:	cmn	r0, #1
   1d3f0:	beq	1d398 <__assert_fail@plt+0xb450>
   1d3f4:	mov	r2, #0
   1d3f8:	mov	r1, #1
   1d3fc:	ldr	r0, [r4]
   1d400:	bl	22358 <__assert_fail@plt+0x10410>
   1d404:	cmp	r0, #0
   1d408:	blt	1d398 <__assert_fail@plt+0xb450>
   1d40c:	orr	r2, r0, #1
   1d410:	mov	r1, #2
   1d414:	ldr	r0, [r4]
   1d418:	bl	22358 <__assert_fail@plt+0x10410>
   1d41c:	cmn	r0, #1
   1d420:	bne	1d31c <__assert_fail@plt+0xb3d4>
   1d424:	b	1d398 <__assert_fail@plt+0xb450>
   1d428:	bl	11eac <pipe2@plt>
   1d42c:	subs	r5, r0, #0
   1d430:	bge	1d444 <__assert_fail@plt+0xb4fc>
   1d434:	bl	11d74 <__errno_location@plt>
   1d438:	ldr	r3, [r0]
   1d43c:	cmp	r3, #38	; 0x26
   1d440:	beq	1d450 <__assert_fail@plt+0xb508>
   1d444:	mov	r3, #1
   1d448:	str	r3, [r6]
   1d44c:	b	1d31c <__assert_fail@plt+0xb3d4>
   1d450:	mvn	r3, #0
   1d454:	str	r3, [r6]
   1d458:	b	1d2ec <__assert_fail@plt+0xb3a4>
   1d45c:	bl	11d74 <__errno_location@plt>
   1d460:	mov	r3, #22
   1d464:	mvn	r5, #0
   1d468:	str	r3, [r0]
   1d46c:	b	1d31c <__assert_fail@plt+0xb3d4>
   1d470:	mvn	r5, #0
   1d474:	b	1d31c <__assert_fail@plt+0xb3d4>
   1d478:	movw	r0, #21728	; 0x54e0
   1d47c:	movt	r0, #2
   1d480:	push	{lr}		; (str lr, [sp, #-4]!)
   1d484:	sub	sp, sp, #12
   1d488:	bl	11cb4 <getenv@plt>
   1d48c:	subs	r3, r0, #0
   1d490:	beq	1d4a0 <__assert_fail@plt+0xb558>
   1d494:	ldrb	r3, [r3]
   1d498:	cmp	r3, #0
   1d49c:	bne	1d4b0 <__assert_fail@plt+0xb568>
   1d4a0:	movw	r0, #4201	; 0x1069
   1d4a4:	movt	r0, #3
   1d4a8:	add	sp, sp, #12
   1d4ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4b0:	mov	r2, #10
   1d4b4:	add	r1, sp, #4
   1d4b8:	bl	11a38 <strtol@plt>
   1d4bc:	ldr	r2, [sp, #4]
   1d4c0:	movw	r3, #4201	; 0x1069
   1d4c4:	movt	r3, #3
   1d4c8:	ldrb	r2, [r2]
   1d4cc:	cmp	r2, #0
   1d4d0:	movne	r0, r3
   1d4d4:	add	sp, sp, #12
   1d4d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4dc:	strd	r4, [sp, #-16]!
   1d4e0:	subs	r4, r0, #0
   1d4e4:	str	r6, [sp, #8]
   1d4e8:	str	lr, [sp, #12]
   1d4ec:	beq	1d584 <__assert_fail@plt+0xb63c>
   1d4f0:	mov	r1, #47	; 0x2f
   1d4f4:	bl	11e58 <strrchr@plt>
   1d4f8:	subs	r5, r0, #0
   1d4fc:	beq	1d55c <__assert_fail@plt+0xb614>
   1d500:	add	r6, r5, #1
   1d504:	sub	r3, r6, r4
   1d508:	cmp	r3, #6
   1d50c:	ble	1d55c <__assert_fail@plt+0xb614>
   1d510:	movw	r1, #21800	; 0x5528
   1d514:	movt	r1, #2
   1d518:	mov	r2, #7
   1d51c:	sub	r0, r5, #6
   1d520:	bl	11f0c <strncmp@plt>
   1d524:	cmp	r0, #0
   1d528:	bne	1d55c <__assert_fail@plt+0xb614>
   1d52c:	movw	r1, #21808	; 0x5530
   1d530:	movt	r1, #2
   1d534:	mov	r2, #3
   1d538:	mov	r0, r6
   1d53c:	bl	11f0c <strncmp@plt>
   1d540:	cmp	r0, #0
   1d544:	movne	r4, r6
   1d548:	bne	1d55c <__assert_fail@plt+0xb614>
   1d54c:	add	r4, r5, #4
   1d550:	movw	r3, #25272	; 0x62b8
   1d554:	movt	r3, #3
   1d558:	str	r4, [r3]
   1d55c:	movw	r2, #26828	; 0x68cc
   1d560:	movt	r2, #3
   1d564:	ldr	r6, [sp, #8]
   1d568:	movw	r3, #25276	; 0x62bc
   1d56c:	movt	r3, #3
   1d570:	str	r4, [r2]
   1d574:	str	r4, [r3]
   1d578:	ldrd	r4, [sp]
   1d57c:	add	sp, sp, #12
   1d580:	pop	{pc}		; (ldr pc, [sp], #4)
   1d584:	movw	r3, #25288	; 0x62c8
   1d588:	movt	r3, #3
   1d58c:	movw	r0, #21744	; 0x54f0
   1d590:	movt	r0, #2
   1d594:	ldr	r3, [r3]
   1d598:	mov	r2, #55	; 0x37
   1d59c:	mov	r1, #1
   1d5a0:	bl	11c18 <fwrite@plt>
   1d5a4:	bl	11f24 <abort@plt>
   1d5a8:	strd	r4, [sp, #-16]!
   1d5ac:	mov	r4, #0
   1d5b0:	mov	r5, #0
   1d5b4:	cmp	r1, #10
   1d5b8:	str	r6, [sp, #8]
   1d5bc:	strd	r4, [r0]
   1d5c0:	strd	r4, [r0, #8]
   1d5c4:	str	lr, [sp, #12]
   1d5c8:	strd	r4, [r0, #16]
   1d5cc:	strd	r4, [r0, #24]
   1d5d0:	strd	r4, [r0, #32]
   1d5d4:	strd	r4, [r0, #40]	; 0x28
   1d5d8:	beq	1d5f0 <__assert_fail@plt+0xb6a8>
   1d5dc:	ldrd	r4, [sp]
   1d5e0:	str	r1, [r0]
   1d5e4:	ldr	r6, [sp, #8]
   1d5e8:	add	sp, sp, #12
   1d5ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5f0:	bl	11f24 <abort@plt>
   1d5f4:	mov	r2, #5
   1d5f8:	strd	r4, [sp, #-16]!
   1d5fc:	mov	r5, r0
   1d600:	str	r6, [sp, #8]
   1d604:	mov	r6, r1
   1d608:	mov	r1, r0
   1d60c:	mov	r0, #0
   1d610:	str	lr, [sp, #12]
   1d614:	bl	11b58 <dcgettext@plt>
   1d618:	cmp	r5, r0
   1d61c:	mov	r4, r0
   1d620:	beq	1d638 <__assert_fail@plt+0xb6f0>
   1d624:	mov	r0, r4
   1d628:	ldrd	r4, [sp]
   1d62c:	ldr	r6, [sp, #8]
   1d630:	add	sp, sp, #12
   1d634:	pop	{pc}		; (ldr pc, [sp], #4)
   1d638:	bl	2265c <__assert_fail@plt+0x10714>
   1d63c:	ldrb	r3, [r0]
   1d640:	bic	r3, r3, #32
   1d644:	cmp	r3, #85	; 0x55
   1d648:	bne	1d6b0 <__assert_fail@plt+0xb768>
   1d64c:	ldrb	r3, [r0, #1]
   1d650:	bic	r3, r3, #32
   1d654:	cmp	r3, #84	; 0x54
   1d658:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d65c:	ldrb	r3, [r0, #2]
   1d660:	bic	r3, r3, #32
   1d664:	cmp	r3, #70	; 0x46
   1d668:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d66c:	ldrb	r3, [r0, #3]
   1d670:	cmp	r3, #45	; 0x2d
   1d674:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d678:	ldrb	r3, [r0, #4]
   1d67c:	cmp	r3, #56	; 0x38
   1d680:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d684:	ldrb	r3, [r0, #5]
   1d688:	cmp	r3, #0
   1d68c:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d690:	ldrb	r2, [r4]
   1d694:	movw	r3, #21900	; 0x558c
   1d698:	movt	r3, #2
   1d69c:	movw	r4, #21912	; 0x5598
   1d6a0:	movt	r4, #2
   1d6a4:	cmp	r2, #96	; 0x60
   1d6a8:	movne	r4, r3
   1d6ac:	b	1d624 <__assert_fail@plt+0xb6dc>
   1d6b0:	cmp	r3, #71	; 0x47
   1d6b4:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d6b8:	ldrb	r3, [r0, #1]
   1d6bc:	bic	r3, r3, #32
   1d6c0:	cmp	r3, #66	; 0x42
   1d6c4:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d6c8:	ldrb	r3, [r0, #2]
   1d6cc:	cmp	r3, #49	; 0x31
   1d6d0:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d6d4:	ldrb	r3, [r0, #3]
   1d6d8:	cmp	r3, #56	; 0x38
   1d6dc:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d6e0:	ldrb	r3, [r0, #4]
   1d6e4:	cmp	r3, #48	; 0x30
   1d6e8:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d6ec:	ldrb	r3, [r0, #5]
   1d6f0:	cmp	r3, #51	; 0x33
   1d6f4:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d6f8:	ldrb	r3, [r0, #6]
   1d6fc:	cmp	r3, #48	; 0x30
   1d700:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d704:	ldrb	r3, [r0, #7]
   1d708:	cmp	r3, #0
   1d70c:	bne	1d730 <__assert_fail@plt+0xb7e8>
   1d710:	ldrb	r2, [r4]
   1d714:	movw	r3, #21904	; 0x5590
   1d718:	movt	r3, #2
   1d71c:	movw	r4, #21908	; 0x5594
   1d720:	movt	r4, #2
   1d724:	cmp	r2, #96	; 0x60
   1d728:	movne	r4, r3
   1d72c:	b	1d624 <__assert_fail@plt+0xb6dc>
   1d730:	movw	r3, #21916	; 0x559c
   1d734:	movt	r3, #2
   1d738:	cmp	r6, #9
   1d73c:	movw	r4, #21896	; 0x5588
   1d740:	movt	r4, #2
   1d744:	movne	r4, r3
   1d748:	b	1d624 <__assert_fail@plt+0xb6dc>
   1d74c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d750:	strd	r6, [sp, #8]
   1d754:	strd	r8, [sp, #16]
   1d758:	strd	sl, [sp, #24]
   1d75c:	mov	fp, r0
   1d760:	mov	sl, r1
   1d764:	str	lr, [sp, #32]
   1d768:	sub	sp, sp, #116	; 0x74
   1d76c:	ldr	r8, [sp, #152]	; 0x98
   1d770:	str	r3, [sp, #28]
   1d774:	ldr	r3, [sp, #156]	; 0x9c
   1d778:	str	r2, [sp, #32]
   1d77c:	and	r4, r3, #2
   1d780:	ubfx	r3, r3, #1, #1
   1d784:	str	r3, [sp, #44]	; 0x2c
   1d788:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1d78c:	str	r0, [sp, #64]	; 0x40
   1d790:	cmp	r8, #10
   1d794:	ldrls	pc, [pc, r8, lsl #2]
   1d798:	b	1ef08 <__assert_fail@plt+0xcfc0>
   1d79c:	andeq	sp, r1, r0, lsr #23
   1d7a0:	andeq	sp, r1, ip, lsr ip
   1d7a4:	andeq	lr, r1, r8, lsl r2
   1d7a8:	andeq	sp, r1, ip, asr ip
   1d7ac:	andeq	sp, r1, r4, lsl #22
   1d7b0:	andeq	sp, r1, r0, asr fp
   1d7b4:	ldrdeq	sp, [r1], -r0
   1d7b8:	andeq	sp, r1, ip, lsl #24
   1d7bc:	andeq	sp, r1, r8, asr #15
   1d7c0:	andeq	sp, r1, r8, asr #15
   1d7c4:	andeq	sp, r1, r8, asr #15
   1d7c8:	cmp	r8, #10
   1d7cc:	beq	1d7f8 <__assert_fail@plt+0xb8b0>
   1d7d0:	mov	r1, r8
   1d7d4:	movw	r0, #21920	; 0x55a0
   1d7d8:	movt	r0, #2
   1d7dc:	bl	1d5f4 <__assert_fail@plt+0xb6ac>
   1d7e0:	mov	r1, r8
   1d7e4:	str	r0, [sp, #164]	; 0xa4
   1d7e8:	movw	r0, #21916	; 0x559c
   1d7ec:	movt	r0, #2
   1d7f0:	bl	1d5f4 <__assert_fail@plt+0xb6ac>
   1d7f4:	str	r0, [sp, #168]	; 0xa8
   1d7f8:	cmp	r4, #0
   1d7fc:	movne	r4, #0
   1d800:	beq	1ebe4 <__assert_fail@plt+0xcc9c>
   1d804:	mov	r3, #1
   1d808:	mov	r5, #0
   1d80c:	ldr	r0, [sp, #168]	; 0xa8
   1d810:	str	r3, [sp, #36]	; 0x24
   1d814:	str	r3, [sp, #40]	; 0x28
   1d818:	str	r5, [sp, #68]	; 0x44
   1d81c:	bl	11d50 <strlen@plt>
   1d820:	ldr	r3, [sp, #168]	; 0xa8
   1d824:	str	r5, [sp, #48]	; 0x30
   1d828:	str	r0, [sp, #56]	; 0x38
   1d82c:	str	r3, [sp, #60]	; 0x3c
   1d830:	str	r5, [sp, #72]	; 0x48
   1d834:	str	r8, [sp, #152]	; 0x98
   1d838:	mov	r8, fp
   1d83c:	mov	r9, #0
   1d840:	ldr	fp, [sp, #152]	; 0x98
   1d844:	ldr	r3, [sp, #28]
   1d848:	cmn	r3, #1
   1d84c:	beq	1ddac <__assert_fail@plt+0xbe64>
   1d850:	ldr	r3, [sp, #28]
   1d854:	subs	r6, r3, r9
   1d858:	movne	r6, #1
   1d85c:	cmp	r6, #0
   1d860:	beq	1ddc4 <__assert_fail@plt+0xbe7c>
   1d864:	ldr	r0, [sp, #32]
   1d868:	ldr	r7, [sp, #40]	; 0x28
   1d86c:	add	r3, r0, r9
   1d870:	cmp	fp, #2
   1d874:	moveq	r7, #0
   1d878:	andne	r7, r7, #1
   1d87c:	str	r3, [sp, #52]	; 0x34
   1d880:	cmp	r7, #0
   1d884:	beq	1e260 <__assert_fail@plt+0xc318>
   1d888:	ldr	r2, [sp, #56]	; 0x38
   1d88c:	cmp	r2, #0
   1d890:	beq	1e4fc <__assert_fail@plt+0xc5b4>
   1d894:	ldr	r1, [sp, #28]
   1d898:	cmp	r2, #1
   1d89c:	mov	r3, r2
   1d8a0:	movls	r3, #0
   1d8a4:	movhi	r3, #1
   1d8a8:	add	r5, r9, r2
   1d8ac:	cmn	r1, #1
   1d8b0:	movne	r3, #0
   1d8b4:	cmp	r3, #0
   1d8b8:	beq	1d8c4 <__assert_fail@plt+0xb97c>
   1d8bc:	bl	11d50 <strlen@plt>
   1d8c0:	str	r0, [sp, #28]
   1d8c4:	ldr	r3, [sp, #28]
   1d8c8:	cmp	r5, r3
   1d8cc:	bhi	1e4fc <__assert_fail@plt+0xc5b4>
   1d8d0:	ldr	r0, [sp, #52]	; 0x34
   1d8d4:	ldr	r2, [sp, #56]	; 0x38
   1d8d8:	ldr	r1, [sp, #60]	; 0x3c
   1d8dc:	bl	11b40 <memcmp@plt>
   1d8e0:	cmp	r0, #0
   1d8e4:	bne	1e4fc <__assert_fail@plt+0xc5b4>
   1d8e8:	ldr	r3, [sp, #44]	; 0x2c
   1d8ec:	cmp	r3, #0
   1d8f0:	bne	1ee2c <__assert_fail@plt+0xcee4>
   1d8f4:	ldr	r3, [sp, #52]	; 0x34
   1d8f8:	ldrb	r5, [r3]
   1d8fc:	cmp	r5, #126	; 0x7e
   1d900:	ldrls	pc, [pc, r5, lsl #2]
   1d904:	b	1e1bc <__assert_fail@plt+0xc274>
   1d908:	andeq	lr, r1, r0, asr #1
   1d90c:			; <UNDEFINED> instruction: 0x0001e1bc
   1d910:			; <UNDEFINED> instruction: 0x0001e1bc
   1d914:			; <UNDEFINED> instruction: 0x0001e1bc
   1d918:			; <UNDEFINED> instruction: 0x0001e1bc
   1d91c:			; <UNDEFINED> instruction: 0x0001e1bc
   1d920:			; <UNDEFINED> instruction: 0x0001e1bc
   1d924:	muleq	r1, r4, r0
   1d928:	andeq	lr, r1, ip, lsl #1
   1d92c:	ldrdeq	sp, [r1], -r4
   1d930:	andeq	lr, r1, r0, lsl #1
   1d934:	andeq	sp, r1, ip, asr #31
   1d938:	andeq	lr, r1, ip, asr r0
   1d93c:	andeq	lr, r1, r8, lsr #1
   1d940:			; <UNDEFINED> instruction: 0x0001e1bc
   1d944:			; <UNDEFINED> instruction: 0x0001e1bc
   1d948:			; <UNDEFINED> instruction: 0x0001e1bc
   1d94c:			; <UNDEFINED> instruction: 0x0001e1bc
   1d950:			; <UNDEFINED> instruction: 0x0001e1bc
   1d954:			; <UNDEFINED> instruction: 0x0001e1bc
   1d958:			; <UNDEFINED> instruction: 0x0001e1bc
   1d95c:			; <UNDEFINED> instruction: 0x0001e1bc
   1d960:			; <UNDEFINED> instruction: 0x0001e1bc
   1d964:			; <UNDEFINED> instruction: 0x0001e1bc
   1d968:			; <UNDEFINED> instruction: 0x0001e1bc
   1d96c:			; <UNDEFINED> instruction: 0x0001e1bc
   1d970:			; <UNDEFINED> instruction: 0x0001e1bc
   1d974:			; <UNDEFINED> instruction: 0x0001e1bc
   1d978:			; <UNDEFINED> instruction: 0x0001e1bc
   1d97c:			; <UNDEFINED> instruction: 0x0001e1bc
   1d980:			; <UNDEFINED> instruction: 0x0001e1bc
   1d984:			; <UNDEFINED> instruction: 0x0001e1bc
   1d988:	muleq	r1, r8, r1
   1d98c:	andeq	lr, r1, r0, lsr #1
   1d990:	andeq	lr, r1, r0, lsr #1
   1d994:	andeq	lr, r1, ip, ror r1
   1d998:	andeq	lr, r1, r0, lsr #1
   1d99c:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9a0:	andeq	lr, r1, r0, lsr #1
   1d9a4:	strdeq	sp, [r1], -ip
   1d9a8:	andeq	lr, r1, r0, lsr #1
   1d9ac:	andeq	lr, r1, r0, lsr #1
   1d9b0:	andeq	lr, r1, r0, lsr #1
   1d9b4:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9b8:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9bc:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9c0:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9c4:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9c8:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9cc:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9d0:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9d4:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9d8:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9dc:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9e0:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9e4:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9e8:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9ec:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9f0:			; <UNDEFINED> instruction: 0x0001e1b0
   1d9f4:	andeq	lr, r1, r0, lsr #1
   1d9f8:	andeq	lr, r1, r0, lsr #1
   1d9fc:	andeq	lr, r1, r0, lsr #1
   1da00:	andeq	lr, r1, r0, lsr #1
   1da04:	ldrdeq	sp, [r1], -r0
   1da08:			; <UNDEFINED> instruction: 0x0001e1bc
   1da0c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da10:			; <UNDEFINED> instruction: 0x0001e1b0
   1da14:			; <UNDEFINED> instruction: 0x0001e1b0
   1da18:			; <UNDEFINED> instruction: 0x0001e1b0
   1da1c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da20:			; <UNDEFINED> instruction: 0x0001e1b0
   1da24:			; <UNDEFINED> instruction: 0x0001e1b0
   1da28:			; <UNDEFINED> instruction: 0x0001e1b0
   1da2c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da30:			; <UNDEFINED> instruction: 0x0001e1b0
   1da34:			; <UNDEFINED> instruction: 0x0001e1b0
   1da38:			; <UNDEFINED> instruction: 0x0001e1b0
   1da3c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da40:			; <UNDEFINED> instruction: 0x0001e1b0
   1da44:			; <UNDEFINED> instruction: 0x0001e1b0
   1da48:			; <UNDEFINED> instruction: 0x0001e1b0
   1da4c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da50:			; <UNDEFINED> instruction: 0x0001e1b0
   1da54:			; <UNDEFINED> instruction: 0x0001e1b0
   1da58:			; <UNDEFINED> instruction: 0x0001e1b0
   1da5c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da60:			; <UNDEFINED> instruction: 0x0001e1b0
   1da64:			; <UNDEFINED> instruction: 0x0001e1b0
   1da68:			; <UNDEFINED> instruction: 0x0001e1b0
   1da6c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da70:			; <UNDEFINED> instruction: 0x0001e1b0
   1da74:	andeq	lr, r1, r0, lsr #1
   1da78:	andeq	sp, r1, r8, ror lr
   1da7c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da80:	andeq	lr, r1, r0, lsr #1
   1da84:			; <UNDEFINED> instruction: 0x0001e1b0
   1da88:	andeq	lr, r1, r0, lsr #1
   1da8c:			; <UNDEFINED> instruction: 0x0001e1b0
   1da90:			; <UNDEFINED> instruction: 0x0001e1b0
   1da94:			; <UNDEFINED> instruction: 0x0001e1b0
   1da98:			; <UNDEFINED> instruction: 0x0001e1b0
   1da9c:			; <UNDEFINED> instruction: 0x0001e1b0
   1daa0:			; <UNDEFINED> instruction: 0x0001e1b0
   1daa4:			; <UNDEFINED> instruction: 0x0001e1b0
   1daa8:			; <UNDEFINED> instruction: 0x0001e1b0
   1daac:			; <UNDEFINED> instruction: 0x0001e1b0
   1dab0:			; <UNDEFINED> instruction: 0x0001e1b0
   1dab4:			; <UNDEFINED> instruction: 0x0001e1b0
   1dab8:			; <UNDEFINED> instruction: 0x0001e1b0
   1dabc:			; <UNDEFINED> instruction: 0x0001e1b0
   1dac0:			; <UNDEFINED> instruction: 0x0001e1b0
   1dac4:			; <UNDEFINED> instruction: 0x0001e1b0
   1dac8:			; <UNDEFINED> instruction: 0x0001e1b0
   1dacc:			; <UNDEFINED> instruction: 0x0001e1b0
   1dad0:			; <UNDEFINED> instruction: 0x0001e1b0
   1dad4:			; <UNDEFINED> instruction: 0x0001e1b0
   1dad8:			; <UNDEFINED> instruction: 0x0001e1b0
   1dadc:			; <UNDEFINED> instruction: 0x0001e1b0
   1dae0:			; <UNDEFINED> instruction: 0x0001e1b0
   1dae4:			; <UNDEFINED> instruction: 0x0001e1b0
   1dae8:			; <UNDEFINED> instruction: 0x0001e1b0
   1daec:			; <UNDEFINED> instruction: 0x0001e1b0
   1daf0:			; <UNDEFINED> instruction: 0x0001e1b0
   1daf4:	muleq	r1, ip, ip
   1daf8:	andeq	lr, r1, r0, lsr #1
   1dafc:	muleq	r1, ip, ip
   1db00:	andeq	lr, r1, ip, ror r1
   1db04:	cmp	r4, #0
   1db08:	moveq	r3, #1
   1db0c:	streq	r3, [sp, #40]	; 0x28
   1db10:	beq	1e224 <__assert_fail@plt+0xc2dc>
   1db14:	mov	r3, #0
   1db18:	mov	r2, #1
   1db1c:	mov	r4, r3
   1db20:	str	r2, [sp, #36]	; 0x24
   1db24:	str	r2, [sp, #44]	; 0x2c
   1db28:	str	r2, [sp, #56]	; 0x38
   1db2c:	str	r3, [sp, #68]	; 0x44
   1db30:	movw	r3, #21916	; 0x559c
   1db34:	movt	r3, #2
   1db38:	str	r4, [sp, #40]	; 0x28
   1db3c:	mov	r8, #2
   1db40:	str	r4, [sp, #48]	; 0x30
   1db44:	str	r3, [sp, #60]	; 0x3c
   1db48:	str	r4, [sp, #72]	; 0x48
   1db4c:	b	1d834 <__assert_fail@plt+0xb8ec>
   1db50:	cmp	r4, #0
   1db54:	bne	1eda0 <__assert_fail@plt+0xce58>
   1db58:	cmp	sl, #0
   1db5c:	beq	1eb60 <__assert_fail@plt+0xcc18>
   1db60:	mov	r3, #34	; 0x22
   1db64:	mov	r1, r4
   1db68:	mov	r2, #1
   1db6c:	strb	r3, [fp]
   1db70:	movw	r3, #21896	; 0x5588
   1db74:	movt	r3, #2
   1db78:	mov	r4, r2
   1db7c:	str	r2, [sp, #36]	; 0x24
   1db80:	str	r2, [sp, #40]	; 0x28
   1db84:	str	r1, [sp, #44]	; 0x2c
   1db88:	str	r1, [sp, #48]	; 0x30
   1db8c:	str	r2, [sp, #56]	; 0x38
   1db90:	str	r3, [sp, #60]	; 0x3c
   1db94:	str	r1, [sp, #68]	; 0x44
   1db98:	str	r1, [sp, #72]	; 0x48
   1db9c:	b	1d834 <__assert_fail@plt+0xb8ec>
   1dba0:	mov	r3, #0
   1dba4:	mov	r4, r8
   1dba8:	str	r3, [sp, #40]	; 0x28
   1dbac:	str	r3, [sp, #44]	; 0x2c
   1dbb0:	str	r3, [sp, #48]	; 0x30
   1dbb4:	str	r8, [sp, #56]	; 0x38
   1dbb8:	str	r3, [sp, #60]	; 0x3c
   1dbbc:	str	r3, [sp, #68]	; 0x44
   1dbc0:	mov	r3, #1
   1dbc4:	str	r3, [sp, #36]	; 0x24
   1dbc8:	str	r8, [sp, #72]	; 0x48
   1dbcc:	b	1d834 <__assert_fail@plt+0xb8ec>
   1dbd0:	mov	r3, #1
   1dbd4:	mov	r2, #0
   1dbd8:	mov	r4, r2
   1dbdc:	mov	r8, #5
   1dbe0:	str	r3, [sp, #36]	; 0x24
   1dbe4:	str	r3, [sp, #40]	; 0x28
   1dbe8:	str	r3, [sp, #44]	; 0x2c
   1dbec:	str	r2, [sp, #48]	; 0x30
   1dbf0:	str	r3, [sp, #56]	; 0x38
   1dbf4:	movw	r3, #21896	; 0x5588
   1dbf8:	movt	r3, #2
   1dbfc:	str	r3, [sp, #60]	; 0x3c
   1dc00:	str	r2, [sp, #68]	; 0x44
   1dc04:	str	r2, [sp, #72]	; 0x48
   1dc08:	b	1d834 <__assert_fail@plt+0xb8ec>
   1dc0c:	mov	r3, #0
   1dc10:	mov	r2, #1
   1dc14:	mov	r4, r3
   1dc18:	str	r2, [sp, #36]	; 0x24
   1dc1c:	str	r2, [sp, #40]	; 0x28
   1dc20:	str	r3, [sp, #44]	; 0x2c
   1dc24:	str	r3, [sp, #48]	; 0x30
   1dc28:	str	r3, [sp, #56]	; 0x38
   1dc2c:	str	r3, [sp, #60]	; 0x3c
   1dc30:	str	r3, [sp, #68]	; 0x44
   1dc34:	str	r3, [sp, #72]	; 0x48
   1dc38:	b	1d834 <__assert_fail@plt+0xb8ec>
   1dc3c:	mov	r2, #1
   1dc40:	mov	r3, #0
   1dc44:	mov	r4, r3
   1dc48:	str	r2, [sp, #36]	; 0x24
   1dc4c:	str	r2, [sp, #44]	; 0x2c
   1dc50:	str	r8, [sp, #56]	; 0x38
   1dc54:	str	r3, [sp, #68]	; 0x44
   1dc58:	b	1db30 <__assert_fail@plt+0xbbe8>
   1dc5c:	mov	r3, #1
   1dc60:	mov	r2, #0
   1dc64:	mov	r4, r2
   1dc68:	mov	r8, #2
   1dc6c:	str	r3, [sp, #36]	; 0x24
   1dc70:	str	r3, [sp, #40]	; 0x28
   1dc74:	str	r3, [sp, #44]	; 0x2c
   1dc78:	str	r2, [sp, #48]	; 0x30
   1dc7c:	str	r3, [sp, #56]	; 0x38
   1dc80:	movw	r3, #21916	; 0x559c
   1dc84:	movt	r3, #2
   1dc88:	str	r3, [sp, #60]	; 0x3c
   1dc8c:	str	r2, [sp, #68]	; 0x44
   1dc90:	str	r2, [sp, #72]	; 0x48
   1dc94:	b	1d834 <__assert_fail@plt+0xb8ec>
   1dc98:	mov	r7, #0
   1dc9c:	ldr	r3, [sp, #28]
   1dca0:	cmn	r3, #1
   1dca4:	beq	1e77c <__assert_fail@plt+0xc834>
   1dca8:	ldr	r3, [sp, #28]
   1dcac:	subs	r2, r3, #1
   1dcb0:	movne	r2, #1
   1dcb4:	sub	r3, fp, #2
   1dcb8:	cmp	r2, #0
   1dcbc:	clz	r3, r3
   1dcc0:	lsr	r3, r3, #5
   1dcc4:	bne	1dcd0 <__assert_fail@plt+0xbd88>
   1dcc8:	cmp	r9, #0
   1dccc:	beq	1e4dc <__assert_fail@plt+0xc594>
   1dcd0:	mov	r6, #0
   1dcd4:	ldr	r2, [sp, #40]	; 0x28
   1dcd8:	eor	r2, r2, #1
   1dcdc:	orrs	r3, r3, r2
   1dce0:	bne	1deb8 <__assert_fail@plt+0xbf70>
   1dce4:	ldr	r2, [sp, #160]	; 0xa0
   1dce8:	cmp	r2, #0
   1dcec:	beq	1dd0c <__assert_fail@plt+0xbdc4>
   1dcf0:	ldr	r0, [sp, #160]	; 0xa0
   1dcf4:	ubfx	r1, r5, #5, #8
   1dcf8:	and	r2, r5, #31
   1dcfc:	ldr	r1, [r0, r1, lsl #2]
   1dd00:	lsr	r2, r1, r2
   1dd04:	tst	r2, #1
   1dd08:	bne	1dd14 <__assert_fail@plt+0xbdcc>
   1dd0c:	cmp	r7, #0
   1dd10:	beq	1df84 <__assert_fail@plt+0xc03c>
   1dd14:	ldr	r2, [sp, #44]	; 0x2c
   1dd18:	sub	r3, fp, #2
   1dd1c:	clz	r3, r3
   1dd20:	lsr	r3, r3, #5
   1dd24:	cmp	r2, #0
   1dd28:	bne	1ead0 <__assert_fail@plt+0xcb88>
   1dd2c:	ldr	r2, [sp, #48]	; 0x30
   1dd30:	eor	r2, r2, #1
   1dd34:	ands	r3, r3, r2
   1dd38:	beq	1dd70 <__assert_fail@plt+0xbe28>
   1dd3c:	cmp	sl, r4
   1dd40:	str	r3, [sp, #48]	; 0x30
   1dd44:	movhi	r2, #39	; 0x27
   1dd48:	strbhi	r2, [r8, r4]
   1dd4c:	add	r2, r4, #1
   1dd50:	cmp	sl, r2
   1dd54:	movhi	r1, #36	; 0x24
   1dd58:	strbhi	r1, [r8, r2]
   1dd5c:	add	r2, r4, #2
   1dd60:	add	r4, r4, #3
   1dd64:	cmp	sl, r2
   1dd68:	movhi	r1, #39	; 0x27
   1dd6c:	strbhi	r1, [r8, r2]
   1dd70:	cmp	r4, sl
   1dd74:	add	r9, r9, #1
   1dd78:	movcc	r3, #92	; 0x5c
   1dd7c:	strbcc	r3, [r8, r4]
   1dd80:	add	r4, r4, #1
   1dd84:	cmp	r4, sl
   1dd88:	ldr	r3, [sp, #36]	; 0x24
   1dd8c:	strbcc	r5, [r8, r4]
   1dd90:	cmp	r6, #0
   1dd94:	add	r4, r4, #1
   1dd98:	moveq	r3, #0
   1dd9c:	str	r3, [sp, #36]	; 0x24
   1dda0:	ldr	r3, [sp, #28]
   1dda4:	cmn	r3, #1
   1dda8:	bne	1d850 <__assert_fail@plt+0xb908>
   1ddac:	ldr	r3, [sp, #32]
   1ddb0:	ldrb	r6, [r3, r9]
   1ddb4:	adds	r6, r6, #0
   1ddb8:	movne	r6, #1
   1ddbc:	cmp	r6, #0
   1ddc0:	bne	1d864 <__assert_fail@plt+0xb91c>
   1ddc4:	str	fp, [sp, #152]	; 0x98
   1ddc8:	mov	fp, r8
   1ddcc:	cmp	r4, #0
   1ddd0:	ldr	r1, [sp, #44]	; 0x2c
   1ddd4:	movne	r3, #0
   1ddd8:	ldr	r8, [sp, #152]	; 0x98
   1dddc:	sub	r2, r8, #2
   1dde0:	clz	r2, r2
   1dde4:	lsr	r2, r2, #5
   1dde8:	andeq	r3, r2, r1
   1ddec:	cmp	r3, #0
   1ddf0:	bne	1eeac <__assert_fail@plt+0xcf64>
   1ddf4:	eor	r3, r1, #1
   1ddf8:	ands	r2, r2, r3
   1ddfc:	beq	1edd8 <__assert_fail@plt+0xce90>
   1de00:	ldr	r3, [sp, #68]	; 0x44
   1de04:	cmp	r3, #0
   1de08:	beq	1eddc <__assert_fail@plt+0xce94>
   1de0c:	ldr	r3, [sp, #36]	; 0x24
   1de10:	cmp	r3, #0
   1de14:	bne	1ee68 <__assert_fail@plt+0xcf20>
   1de18:	ldr	r3, [sp, #72]	; 0x48
   1de1c:	adds	r3, r3, #0
   1de20:	movne	r3, #1
   1de24:	cmp	sl, #0
   1de28:	movne	r3, #0
   1de2c:	cmp	r3, #0
   1de30:	ldreq	r2, [sp, #68]	; 0x44
   1de34:	beq	1eddc <__assert_fail@plt+0xce94>
   1de38:	ldr	r2, [sp, #72]	; 0x48
   1de3c:	str	r3, [sp, #68]	; 0x44
   1de40:	movw	r3, #21916	; 0x559c
   1de44:	movt	r3, #2
   1de48:	mov	r1, #39	; 0x27
   1de4c:	mov	r4, #1
   1de50:	ldr	sl, [sp, #72]	; 0x48
   1de54:	mov	r8, #2
   1de58:	str	r3, [sp, #60]	; 0x3c
   1de5c:	mov	r3, #0
   1de60:	strb	r1, [fp]
   1de64:	str	r3, [sp, #44]	; 0x2c
   1de68:	str	r4, [sp, #56]	; 0x38
   1de6c:	str	r2, [sp, #72]	; 0x48
   1de70:	b	1d834 <__assert_fail@plt+0xb8ec>
   1de74:	mov	r7, #0
   1de78:	cmp	fp, #2
   1de7c:	beq	1e75c <__assert_fail@plt+0xc814>
   1de80:	ldr	r2, [sp, #40]	; 0x28
   1de84:	ldr	r3, [sp, #56]	; 0x38
   1de88:	ldr	r1, [sp, #44]	; 0x2c
   1de8c:	cmp	r3, #0
   1de90:	moveq	r3, #0
   1de94:	andne	r3, r2, r1
   1de98:	cmp	r3, #0
   1de9c:	moveq	r5, #92	; 0x5c
   1dea0:	moveq	r3, r5
   1dea4:	bne	1e768 <__assert_fail@plt+0xc820>
   1dea8:	ldr	r2, [sp, #40]	; 0x28
   1deac:	cmp	r2, #0
   1deb0:	bne	1eba4 <__assert_fail@plt+0xcc5c>
   1deb4:	mov	r6, #0
   1deb8:	ldr	r3, [sp, #44]	; 0x2c
   1debc:	cmp	r3, #0
   1dec0:	beq	1e754 <__assert_fail@plt+0xc80c>
   1dec4:	mov	r3, #0
   1dec8:	b	1dce4 <__assert_fail@plt+0xbd9c>
   1decc:	mov	r7, #0
   1ded0:	cmp	fp, #2
   1ded4:	beq	1e7cc <__assert_fail@plt+0xc884>
   1ded8:	cmp	fp, #5
   1dedc:	beq	1e790 <__assert_fail@plt+0xc848>
   1dee0:	sub	r3, fp, #2
   1dee4:	mov	r6, #0
   1dee8:	clz	r3, r3
   1deec:	mov	r5, #63	; 0x3f
   1def0:	lsr	r3, r3, #5
   1def4:	b	1dcd4 <__assert_fail@plt+0xbd8c>
   1def8:	mov	r7, #0
   1defc:	cmp	fp, #2
   1df00:	movne	r3, #0
   1df04:	movne	r5, #39	; 0x27
   1df08:	strne	r6, [sp, #68]	; 0x44
   1df0c:	bne	1dcd4 <__assert_fail@plt+0xbd8c>
   1df10:	ldr	r3, [sp, #44]	; 0x2c
   1df14:	cmp	r3, #0
   1df18:	bne	1ebd4 <__assert_fail@plt+0xcc8c>
   1df1c:	ldr	r3, [sp, #72]	; 0x48
   1df20:	cmp	sl, #0
   1df24:	clz	r3, r3
   1df28:	lsr	r3, r3, #5
   1df2c:	moveq	r3, #0
   1df30:	cmp	r3, #0
   1df34:	bne	1eb00 <__assert_fail@plt+0xcbb8>
   1df38:	cmp	sl, r4
   1df3c:	movhi	r3, #39	; 0x27
   1df40:	strbhi	r3, [r8, r4]
   1df44:	add	r3, r4, #1
   1df48:	cmp	sl, r3
   1df4c:	movhi	r2, #92	; 0x5c
   1df50:	strbhi	r2, [r8, r3]
   1df54:	add	r3, r4, #2
   1df58:	cmp	sl, r3
   1df5c:	bls	1df68 <__assert_fail@plt+0xc020>
   1df60:	mov	r2, #39	; 0x27
   1df64:	strb	r2, [r8, r3]
   1df68:	mov	r3, #0
   1df6c:	cmp	r7, #0
   1df70:	add	r4, r4, #3
   1df74:	mov	r5, #39	; 0x27
   1df78:	str	r3, [sp, #48]	; 0x30
   1df7c:	str	r6, [sp, #68]	; 0x44
   1df80:	bne	1dd14 <__assert_fail@plt+0xbdcc>
   1df84:	ldr	r2, [sp, #48]	; 0x30
   1df88:	eor	r3, r3, #1
   1df8c:	add	r9, r9, #1
   1df90:	and	r3, r3, r2
   1df94:	uxtb	r3, r3
   1df98:	cmp	r3, #0
   1df9c:	beq	1dd84 <__assert_fail@plt+0xbe3c>
   1dfa0:	cmp	sl, r4
   1dfa4:	movhi	r3, #39	; 0x27
   1dfa8:	strbhi	r3, [r8, r4]
   1dfac:	add	r3, r4, #1
   1dfb0:	add	r4, r4, #2
   1dfb4:	cmp	sl, r3
   1dfb8:	movhi	r2, #39	; 0x27
   1dfbc:	strbhi	r2, [r8, r3]
   1dfc0:	mov	r3, #0
   1dfc4:	str	r3, [sp, #48]	; 0x30
   1dfc8:	b	1dd84 <__assert_fail@plt+0xbe3c>
   1dfcc:	mov	r3, #118	; 0x76
   1dfd0:	b	1dea8 <__assert_fail@plt+0xbf60>
   1dfd4:	mov	r3, #116	; 0x74
   1dfd8:	ldr	r2, [sp, #44]	; 0x2c
   1dfdc:	cmp	fp, #2
   1dfe0:	movne	r2, #0
   1dfe4:	andeq	r2, r2, #1
   1dfe8:	cmp	r2, #0
   1dfec:	beq	1dea8 <__assert_fail@plt+0xbf60>
   1dff0:	mov	fp, r8
   1dff4:	mov	r8, #2
   1dff8:	ldr	r3, [sp, #40]	; 0x28
   1dffc:	cmp	r3, #0
   1e000:	movne	r8, #4
   1e004:	mov	lr, #0
   1e008:	mov	r0, fp
   1e00c:	ldr	r2, [sp, #32]
   1e010:	ldr	r3, [sp, #156]	; 0x9c
   1e014:	ldr	r1, [sp, #164]	; 0xa4
   1e018:	bic	ip, r3, #2
   1e01c:	ldr	r3, [sp, #28]
   1e020:	stm	sp, {r8, ip, lr}
   1e024:	ldr	ip, [sp, #168]	; 0xa8
   1e028:	str	r1, [sp, #12]
   1e02c:	mov	r1, sl
   1e030:	str	ip, [sp, #16]
   1e034:	bl	1d74c <__assert_fail@plt+0xb804>
   1e038:	mov	r4, r0
   1e03c:	mov	r0, r4
   1e040:	add	sp, sp, #116	; 0x74
   1e044:	ldrd	r4, [sp]
   1e048:	ldrd	r6, [sp, #8]
   1e04c:	ldrd	r8, [sp, #16]
   1e050:	ldrd	sl, [sp, #24]
   1e054:	add	sp, sp, #32
   1e058:	pop	{pc}		; (ldr pc, [sp], #4)
   1e05c:	mov	r5, #102	; 0x66
   1e060:	ldr	r2, [sp, #44]	; 0x2c
   1e064:	sub	r3, fp, #2
   1e068:	clz	r3, r3
   1e06c:	lsr	r3, r3, #5
   1e070:	cmp	r2, #0
   1e074:	bne	1ead0 <__assert_fail@plt+0xcb88>
   1e078:	mov	r6, r2
   1e07c:	b	1dd70 <__assert_fail@plt+0xbe28>
   1e080:	mov	r5, #110	; 0x6e
   1e084:	mov	r6, #0
   1e088:	b	1dd14 <__assert_fail@plt+0xbdcc>
   1e08c:	mov	r5, #98	; 0x62
   1e090:	b	1e060 <__assert_fail@plt+0xc118>
   1e094:	mov	r5, #97	; 0x61
   1e098:	b	1e060 <__assert_fail@plt+0xc118>
   1e09c:	mov	r7, #0
   1e0a0:	mov	r6, #0
   1e0a4:	b	1dec4 <__assert_fail@plt+0xbf7c>
   1e0a8:	mov	r5, #114	; 0x72
   1e0ac:	b	1e084 <__assert_fail@plt+0xc13c>
   1e0b0:	ldr	r3, [sp, #44]	; 0x2c
   1e0b4:	cmp	r3, #0
   1e0b8:	bne	1ee48 <__assert_fail@plt+0xcf00>
   1e0bc:	mov	r7, r3
   1e0c0:	ldr	r3, [sp, #48]	; 0x30
   1e0c4:	sub	r2, fp, #2
   1e0c8:	clz	r2, r2
   1e0cc:	lsr	r2, r2, #5
   1e0d0:	eor	r3, r3, #1
   1e0d4:	ands	r3, r2, r3
   1e0d8:	beq	1eaec <__assert_fail@plt+0xcba4>
   1e0dc:	cmp	sl, r4
   1e0e0:	movhi	r1, #39	; 0x27
   1e0e4:	strbhi	r1, [r8, r4]
   1e0e8:	add	r1, r4, #1
   1e0ec:	cmp	sl, r1
   1e0f0:	movhi	r0, #36	; 0x24
   1e0f4:	strbhi	r0, [r8, r1]
   1e0f8:	add	r1, r4, #2
   1e0fc:	cmp	sl, r1
   1e100:	movhi	r0, #39	; 0x27
   1e104:	strbhi	r0, [r8, r1]
   1e108:	add	r1, r4, #3
   1e10c:	cmp	sl, r1
   1e110:	bls	1eb44 <__assert_fail@plt+0xcbfc>
   1e114:	mov	r4, r1
   1e118:	mov	r1, #92	; 0x5c
   1e11c:	mov	r0, r4
   1e120:	str	r3, [sp, #48]	; 0x30
   1e124:	strb	r1, [r8, r4]
   1e128:	cmp	fp, #2
   1e12c:	add	r4, r4, #1
   1e130:	beq	1eb94 <__assert_fail@plt+0xcc4c>
   1e134:	ldr	r1, [sp, #28]
   1e138:	add	r3, r9, #1
   1e13c:	cmp	r3, r1
   1e140:	bcs	1e158 <__assert_fail@plt+0xc210>
   1e144:	ldr	r1, [sp, #32]
   1e148:	ldrb	r3, [r1, r3]
   1e14c:	sub	r3, r3, #48	; 0x30
   1e150:	cmp	r3, #9
   1e154:	bls	1ebac <__assert_fail@plt+0xcc64>
   1e158:	mov	r5, #48	; 0x30
   1e15c:	ldr	r3, [sp, #40]	; 0x28
   1e160:	eor	r3, r3, #1
   1e164:	orrs	r2, r2, r3
   1e168:	mov	r3, r6
   1e16c:	moveq	r6, r2
   1e170:	beq	1dce4 <__assert_fail@plt+0xbd9c>
   1e174:	mov	r6, #0
   1e178:	b	1dd0c <__assert_fail@plt+0xbdc4>
   1e17c:	cmp	r9, #0
   1e180:	mov	r2, r7
   1e184:	bne	1e724 <__assert_fail@plt+0xc7dc>
   1e188:	mov	r6, r7
   1e18c:	mov	r3, r9
   1e190:	mov	r7, r2
   1e194:	b	1dcd4 <__assert_fail@plt+0xbd8c>
   1e198:	mov	r2, r7
   1e19c:	mov	r6, r7
   1e1a0:	mov	r3, #0
   1e1a4:	mov	r7, r2
   1e1a8:	mov	r5, #32
   1e1ac:	b	1dcd4 <__assert_fail@plt+0xbd8c>
   1e1b0:	mov	r6, r7
   1e1b4:	b	1dec4 <__assert_fail@plt+0xbf7c>
   1e1b8:	mov	r7, #0
   1e1bc:	ldr	r3, [sp, #64]	; 0x40
   1e1c0:	cmp	r3, #1
   1e1c4:	bne	1e7e4 <__assert_fail@plt+0xc89c>
   1e1c8:	bl	11d2c <__ctype_b_loc@plt>
   1e1cc:	ldr	r2, [r0]
   1e1d0:	sxth	r3, r5
   1e1d4:	lsl	r3, r3, #1
   1e1d8:	ldr	r1, [sp, #64]	; 0x40
   1e1dc:	ldrh	r3, [r2, r3]
   1e1e0:	mov	ip, r1
   1e1e4:	and	r3, r3, #16384	; 0x4000
   1e1e8:	cmp	r3, #0
   1e1ec:	ldr	r3, [sp, #40]	; 0x28
   1e1f0:	movne	r6, #1
   1e1f4:	moveq	r6, #0
   1e1f8:	movne	r2, #0
   1e1fc:	andeq	r2, r3, #1
   1e200:	cmp	r2, #0
   1e204:	bne	1eb2c <__assert_fail@plt+0xcbe4>
   1e208:	sub	r3, fp, #2
   1e20c:	clz	r3, r3
   1e210:	lsr	r3, r3, #5
   1e214:	b	1dcd4 <__assert_fail@plt+0xbd8c>
   1e218:	cmp	r4, #0
   1e21c:	bne	1eebc <__assert_fail@plt+0xcf74>
   1e220:	str	r4, [sp, #40]	; 0x28
   1e224:	cmp	sl, #0
   1e228:	bne	1eeec <__assert_fail@plt+0xcfa4>
   1e22c:	mov	r3, #1
   1e230:	movw	r2, #21916	; 0x559c
   1e234:	movt	r2, #2
   1e238:	mov	r4, r3
   1e23c:	mov	r8, #2
   1e240:	str	r3, [sp, #36]	; 0x24
   1e244:	str	sl, [sp, #44]	; 0x2c
   1e248:	str	sl, [sp, #48]	; 0x30
   1e24c:	str	r3, [sp, #56]	; 0x38
   1e250:	str	r2, [sp, #60]	; 0x3c
   1e254:	str	sl, [sp, #68]	; 0x44
   1e258:	str	sl, [sp, #72]	; 0x48
   1e25c:	b	1d834 <__assert_fail@plt+0xb8ec>
   1e260:	ldr	r3, [sp, #32]
   1e264:	ldrb	r5, [r3, r9]
   1e268:	cmp	r5, #126	; 0x7e
   1e26c:	ldrls	pc, [pc, r5, lsl #2]
   1e270:	b	1e1bc <__assert_fail@plt+0xc274>
   1e274:	muleq	r1, r8, r4
   1e278:			; <UNDEFINED> instruction: 0x0001e1bc
   1e27c:			; <UNDEFINED> instruction: 0x0001e1bc
   1e280:			; <UNDEFINED> instruction: 0x0001e1bc
   1e284:			; <UNDEFINED> instruction: 0x0001e1bc
   1e288:			; <UNDEFINED> instruction: 0x0001e1bc
   1e28c:			; <UNDEFINED> instruction: 0x0001e1bc
   1e290:	muleq	r1, r0, r4
   1e294:	andeq	lr, r1, r8, lsl #9
   1e298:	ldrdeq	sp, [r1], -r4
   1e29c:	andeq	lr, r1, r0, lsl #9
   1e2a0:	andeq	sp, r1, ip, asr #31
   1e2a4:	andeq	lr, r1, r8, ror r4
   1e2a8:	andeq	lr, r1, r0, ror r4
   1e2ac:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2b0:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2b4:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2b8:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2bc:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2c0:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2c4:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2c8:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2cc:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2d0:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2d4:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2d8:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2dc:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2e0:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2e4:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2e8:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2ec:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2f0:			; <UNDEFINED> instruction: 0x0001e1bc
   1e2f4:	andeq	lr, r1, ip, ror #9
   1e2f8:	andeq	lr, r1, ip, asr #9
   1e2fc:	andeq	lr, r1, ip, asr #9
   1e300:			; <UNDEFINED> instruction: 0x0001e4bc
   1e304:	andeq	lr, r1, ip, asr #9
   1e308:	andeq	lr, r1, r8, lsl #4
   1e30c:	andeq	lr, r1, ip, asr #9
   1e310:	strdeq	sp, [r1], -ip
   1e314:	andeq	lr, r1, ip, asr #9
   1e318:	andeq	lr, r1, ip, asr #9
   1e31c:	andeq	lr, r1, ip, asr #9
   1e320:	andeq	lr, r1, r8, lsl #4
   1e324:	andeq	lr, r1, r8, lsl #4
   1e328:	andeq	lr, r1, r8, lsl #4
   1e32c:	andeq	lr, r1, r8, lsl #4
   1e330:	andeq	lr, r1, r8, lsl #4
   1e334:	andeq	lr, r1, r8, lsl #4
   1e338:	andeq	lr, r1, r8, lsl #4
   1e33c:	andeq	lr, r1, r8, lsl #4
   1e340:	andeq	lr, r1, r8, lsl #4
   1e344:	andeq	lr, r1, r8, lsl #4
   1e348:	andeq	lr, r1, r8, lsl #4
   1e34c:	andeq	lr, r1, r8, lsl #4
   1e350:	andeq	lr, r1, r8, lsl #4
   1e354:	andeq	lr, r1, r8, lsl #4
   1e358:	andeq	lr, r1, r8, lsl #4
   1e35c:	andeq	lr, r1, r8, lsl #4
   1e360:	andeq	lr, r1, ip, asr #9
   1e364:	andeq	lr, r1, ip, asr #9
   1e368:	andeq	lr, r1, ip, asr #9
   1e36c:	andeq	lr, r1, ip, asr #9
   1e370:	ldrdeq	sp, [r1], -r0
   1e374:			; <UNDEFINED> instruction: 0x0001e1bc
   1e378:	andeq	lr, r1, r8, lsl #4
   1e37c:	andeq	lr, r1, r8, lsl #4
   1e380:	andeq	lr, r1, r8, lsl #4
   1e384:	andeq	lr, r1, r8, lsl #4
   1e388:	andeq	lr, r1, r8, lsl #4
   1e38c:	andeq	lr, r1, r8, lsl #4
   1e390:	andeq	lr, r1, r8, lsl #4
   1e394:	andeq	lr, r1, r8, lsl #4
   1e398:	andeq	lr, r1, r8, lsl #4
   1e39c:	andeq	lr, r1, r8, lsl #4
   1e3a0:	andeq	lr, r1, r8, lsl #4
   1e3a4:	andeq	lr, r1, r8, lsl #4
   1e3a8:	andeq	lr, r1, r8, lsl #4
   1e3ac:	andeq	lr, r1, r8, lsl #4
   1e3b0:	andeq	lr, r1, r8, lsl #4
   1e3b4:	andeq	lr, r1, r8, lsl #4
   1e3b8:	andeq	lr, r1, r8, lsl #4
   1e3bc:	andeq	lr, r1, r8, lsl #4
   1e3c0:	andeq	lr, r1, r8, lsl #4
   1e3c4:	andeq	lr, r1, r8, lsl #4
   1e3c8:	andeq	lr, r1, r8, lsl #4
   1e3cc:	andeq	lr, r1, r8, lsl #4
   1e3d0:	andeq	lr, r1, r8, lsl #4
   1e3d4:	andeq	lr, r1, r8, lsl #4
   1e3d8:	andeq	lr, r1, r8, lsl #4
   1e3dc:	andeq	lr, r1, r8, lsl #4
   1e3e0:	andeq	lr, r1, ip, asr #9
   1e3e4:	andeq	sp, r1, r8, ror lr
   1e3e8:	andeq	lr, r1, r8, lsl #4
   1e3ec:	andeq	lr, r1, ip, asr #9
   1e3f0:	andeq	lr, r1, r8, lsl #4
   1e3f4:	andeq	lr, r1, ip, asr #9
   1e3f8:	andeq	lr, r1, r8, lsl #4
   1e3fc:	andeq	lr, r1, r8, lsl #4
   1e400:	andeq	lr, r1, r8, lsl #4
   1e404:	andeq	lr, r1, r8, lsl #4
   1e408:	andeq	lr, r1, r8, lsl #4
   1e40c:	andeq	lr, r1, r8, lsl #4
   1e410:	andeq	lr, r1, r8, lsl #4
   1e414:	andeq	lr, r1, r8, lsl #4
   1e418:	andeq	lr, r1, r8, lsl #4
   1e41c:	andeq	lr, r1, r8, lsl #4
   1e420:	andeq	lr, r1, r8, lsl #4
   1e424:	andeq	lr, r1, r8, lsl #4
   1e428:	andeq	lr, r1, r8, lsl #4
   1e42c:	andeq	lr, r1, r8, lsl #4
   1e430:	andeq	lr, r1, r8, lsl #4
   1e434:	andeq	lr, r1, r8, lsl #4
   1e438:	andeq	lr, r1, r8, lsl #4
   1e43c:	andeq	lr, r1, r8, lsl #4
   1e440:	andeq	lr, r1, r8, lsl #4
   1e444:	andeq	lr, r1, r8, lsl #4
   1e448:	andeq	lr, r1, r8, lsl #4
   1e44c:	andeq	lr, r1, r8, lsl #4
   1e450:	andeq	lr, r1, r8, lsl #4
   1e454:	andeq	lr, r1, r8, lsl #4
   1e458:	andeq	lr, r1, r8, lsl #4
   1e45c:	andeq	lr, r1, r8, lsl #4
   1e460:	muleq	r1, ip, ip
   1e464:	andeq	lr, r1, ip, asr #9
   1e468:	muleq	r1, ip, ip
   1e46c:			; <UNDEFINED> instruction: 0x0001e4bc
   1e470:	mov	r3, #114	; 0x72
   1e474:	b	1dfd8 <__assert_fail@plt+0xc090>
   1e478:	mov	r3, #102	; 0x66
   1e47c:	b	1dea8 <__assert_fail@plt+0xbf60>
   1e480:	mov	r3, #110	; 0x6e
   1e484:	b	1dfd8 <__assert_fail@plt+0xc090>
   1e488:	mov	r3, #98	; 0x62
   1e48c:	b	1dea8 <__assert_fail@plt+0xbf60>
   1e490:	mov	r3, #97	; 0x61
   1e494:	b	1dea8 <__assert_fail@plt+0xbf60>
   1e498:	ldr	r3, [sp, #40]	; 0x28
   1e49c:	cmp	r3, #0
   1e4a0:	bne	1e0b0 <__assert_fail@plt+0xc168>
   1e4a4:	ldr	r3, [sp, #156]	; 0x9c
   1e4a8:	tst	r3, #1
   1e4ac:	addne	r9, r9, #1
   1e4b0:	bne	1d844 <__assert_fail@plt+0xb8fc>
   1e4b4:	ldr	r7, [sp, #40]	; 0x28
   1e4b8:	b	1deb4 <__assert_fail@plt+0xbf6c>
   1e4bc:	sub	r3, fp, #2
   1e4c0:	clz	r3, r3
   1e4c4:	lsr	r3, r3, #5
   1e4c8:	b	1dcc8 <__assert_fail@plt+0xbd80>
   1e4cc:	sub	r3, fp, #2
   1e4d0:	mov	r6, #0
   1e4d4:	clz	r3, r3
   1e4d8:	lsr	r3, r3, #5
   1e4dc:	ldr	r2, [sp, #44]	; 0x2c
   1e4e0:	tst	r2, r3
   1e4e4:	beq	1dcd4 <__assert_fail@plt+0xbd8c>
   1e4e8:	b	1dff0 <__assert_fail@plt+0xc0a8>
   1e4ec:	sub	r3, fp, #2
   1e4f0:	clz	r3, r3
   1e4f4:	lsr	r3, r3, #5
   1e4f8:	b	1e4dc <__assert_fail@plt+0xc594>
   1e4fc:	ldr	r3, [sp, #52]	; 0x34
   1e500:	ldrb	r5, [r3]
   1e504:	cmp	r5, #126	; 0x7e
   1e508:	ldrls	pc, [pc, r5, lsl #2]
   1e50c:	b	1e1b8 <__assert_fail@plt+0xc270>
   1e510:	strheq	lr, [r1], -r0
   1e514:			; <UNDEFINED> instruction: 0x0001e1b8
   1e518:			; <UNDEFINED> instruction: 0x0001e1b8
   1e51c:			; <UNDEFINED> instruction: 0x0001e1b8
   1e520:			; <UNDEFINED> instruction: 0x0001e1b8
   1e524:			; <UNDEFINED> instruction: 0x0001e1b8
   1e528:			; <UNDEFINED> instruction: 0x0001e1b8
   1e52c:	muleq	r1, r4, r0
   1e530:	andeq	lr, r1, ip, lsl #1
   1e534:	andeq	lr, r1, r8, asr #14
   1e538:	andeq	lr, r1, r0, lsl #1
   1e53c:	andeq	lr, r1, ip, lsr r7
   1e540:	andeq	lr, r1, ip, asr r0
   1e544:	andeq	lr, r1, r8, lsr #1
   1e548:			; <UNDEFINED> instruction: 0x0001e1b8
   1e54c:			; <UNDEFINED> instruction: 0x0001e1b8
   1e550:			; <UNDEFINED> instruction: 0x0001e1b8
   1e554:			; <UNDEFINED> instruction: 0x0001e1b8
   1e558:			; <UNDEFINED> instruction: 0x0001e1b8
   1e55c:			; <UNDEFINED> instruction: 0x0001e1b8
   1e560:			; <UNDEFINED> instruction: 0x0001e1b8
   1e564:			; <UNDEFINED> instruction: 0x0001e1b8
   1e568:			; <UNDEFINED> instruction: 0x0001e1b8
   1e56c:			; <UNDEFINED> instruction: 0x0001e1b8
   1e570:			; <UNDEFINED> instruction: 0x0001e1b8
   1e574:			; <UNDEFINED> instruction: 0x0001e1b8
   1e578:			; <UNDEFINED> instruction: 0x0001e1b8
   1e57c:			; <UNDEFINED> instruction: 0x0001e1b8
   1e580:			; <UNDEFINED> instruction: 0x0001e1b8
   1e584:			; <UNDEFINED> instruction: 0x0001e1b8
   1e588:			; <UNDEFINED> instruction: 0x0001e1b8
   1e58c:			; <UNDEFINED> instruction: 0x0001e1b8
   1e590:	andeq	lr, r1, r4, lsr r7
   1e594:	muleq	r1, ip, r0
   1e598:	muleq	r1, ip, r0
   1e59c:	andeq	lr, r1, r8, lsl r7
   1e5a0:	muleq	r1, ip, r0
   1e5a4:	andeq	lr, r1, ip, lsl #14
   1e5a8:	muleq	r1, ip, r0
   1e5ac:	strdeq	sp, [r1], -r8
   1e5b0:	muleq	r1, ip, r0
   1e5b4:	muleq	r1, ip, r0
   1e5b8:	muleq	r1, ip, r0
   1e5bc:	andeq	lr, r1, ip, lsl #14
   1e5c0:	andeq	lr, r1, ip, lsl #14
   1e5c4:	andeq	lr, r1, ip, lsl #14
   1e5c8:	andeq	lr, r1, ip, lsl #14
   1e5cc:	andeq	lr, r1, ip, lsl #14
   1e5d0:	andeq	lr, r1, ip, lsl #14
   1e5d4:	andeq	lr, r1, ip, lsl #14
   1e5d8:	andeq	lr, r1, ip, lsl #14
   1e5dc:	andeq	lr, r1, ip, lsl #14
   1e5e0:	andeq	lr, r1, ip, lsl #14
   1e5e4:	andeq	lr, r1, ip, lsl #14
   1e5e8:	andeq	lr, r1, ip, lsl #14
   1e5ec:	andeq	lr, r1, ip, lsl #14
   1e5f0:	andeq	lr, r1, ip, lsl #14
   1e5f4:	andeq	lr, r1, ip, lsl #14
   1e5f8:	andeq	lr, r1, ip, lsl #14
   1e5fc:	muleq	r1, ip, r0
   1e600:	muleq	r1, ip, r0
   1e604:	muleq	r1, ip, r0
   1e608:	muleq	r1, ip, r0
   1e60c:	andeq	sp, r1, ip, asr #29
   1e610:			; <UNDEFINED> instruction: 0x0001e1b8
   1e614:	andeq	lr, r1, ip, lsl #14
   1e618:	andeq	lr, r1, ip, lsl #14
   1e61c:	andeq	lr, r1, ip, lsl #14
   1e620:	andeq	lr, r1, ip, lsl #14
   1e624:	andeq	lr, r1, ip, lsl #14
   1e628:	andeq	lr, r1, ip, lsl #14
   1e62c:	andeq	lr, r1, ip, lsl #14
   1e630:	andeq	lr, r1, ip, lsl #14
   1e634:	andeq	lr, r1, ip, lsl #14
   1e638:	andeq	lr, r1, ip, lsl #14
   1e63c:	andeq	lr, r1, ip, lsl #14
   1e640:	andeq	lr, r1, ip, lsl #14
   1e644:	andeq	lr, r1, ip, lsl #14
   1e648:	andeq	lr, r1, ip, lsl #14
   1e64c:	andeq	lr, r1, ip, lsl #14
   1e650:	andeq	lr, r1, ip, lsl #14
   1e654:	andeq	lr, r1, ip, lsl #14
   1e658:	andeq	lr, r1, ip, lsl #14
   1e65c:	andeq	lr, r1, ip, lsl #14
   1e660:	andeq	lr, r1, ip, lsl #14
   1e664:	andeq	lr, r1, ip, lsl #14
   1e668:	andeq	lr, r1, ip, lsl #14
   1e66c:	andeq	lr, r1, ip, lsl #14
   1e670:	andeq	lr, r1, ip, lsl #14
   1e674:	andeq	lr, r1, ip, lsl #14
   1e678:	andeq	lr, r1, ip, lsl #14
   1e67c:	muleq	r1, ip, r0
   1e680:	andeq	sp, r1, r4, ror lr
   1e684:	andeq	lr, r1, ip, lsl #14
   1e688:	muleq	r1, ip, r0
   1e68c:	andeq	lr, r1, ip, lsl #14
   1e690:	muleq	r1, ip, r0
   1e694:	andeq	lr, r1, ip, lsl #14
   1e698:	andeq	lr, r1, ip, lsl #14
   1e69c:	andeq	lr, r1, ip, lsl #14
   1e6a0:	andeq	lr, r1, ip, lsl #14
   1e6a4:	andeq	lr, r1, ip, lsl #14
   1e6a8:	andeq	lr, r1, ip, lsl #14
   1e6ac:	andeq	lr, r1, ip, lsl #14
   1e6b0:	andeq	lr, r1, ip, lsl #14
   1e6b4:	andeq	lr, r1, ip, lsl #14
   1e6b8:	andeq	lr, r1, ip, lsl #14
   1e6bc:	andeq	lr, r1, ip, lsl #14
   1e6c0:	andeq	lr, r1, ip, lsl #14
   1e6c4:	andeq	lr, r1, ip, lsl #14
   1e6c8:	andeq	lr, r1, ip, lsl #14
   1e6cc:	andeq	lr, r1, ip, lsl #14
   1e6d0:	andeq	lr, r1, ip, lsl #14
   1e6d4:	andeq	lr, r1, ip, lsl #14
   1e6d8:	andeq	lr, r1, ip, lsl #14
   1e6dc:	andeq	lr, r1, ip, lsl #14
   1e6e0:	andeq	lr, r1, ip, lsl #14
   1e6e4:	andeq	lr, r1, ip, lsl #14
   1e6e8:	andeq	lr, r1, ip, lsl #14
   1e6ec:	andeq	lr, r1, ip, lsl #14
   1e6f0:	andeq	lr, r1, ip, lsl #14
   1e6f4:	andeq	lr, r1, ip, lsl #14
   1e6f8:	andeq	lr, r1, ip, lsl #14
   1e6fc:	muleq	r1, r8, ip
   1e700:	muleq	r1, ip, r0
   1e704:	muleq	r1, r8, ip
   1e708:	andeq	lr, r1, r8, lsl r7
   1e70c:	mov	r6, r7
   1e710:	mov	r7, #0
   1e714:	b	1dec4 <__assert_fail@plt+0xbf7c>
   1e718:	cmp	r9, #0
   1e71c:	mov	r2, #0
   1e720:	beq	1e188 <__assert_fail@plt+0xc240>
   1e724:	mov	r6, #0
   1e728:	mov	r7, r2
   1e72c:	mov	r3, r6
   1e730:	b	1dce4 <__assert_fail@plt+0xbd9c>
   1e734:	mov	r2, #0
   1e738:	b	1e19c <__assert_fail@plt+0xc254>
   1e73c:	mov	r7, #0
   1e740:	mov	r3, #118	; 0x76
   1e744:	b	1dea8 <__assert_fail@plt+0xbf60>
   1e748:	mov	r7, #0
   1e74c:	mov	r3, #116	; 0x74
   1e750:	b	1dfd8 <__assert_fail@plt+0xc090>
   1e754:	ldr	r3, [sp, #44]	; 0x2c
   1e758:	b	1dd0c <__assert_fail@plt+0xbdc4>
   1e75c:	ldr	r3, [sp, #44]	; 0x2c
   1e760:	cmp	r3, #0
   1e764:	bne	1ebd4 <__assert_fail@plt+0xcc8c>
   1e768:	add	r9, r9, #1
   1e76c:	mov	r6, #0
   1e770:	ldr	r3, [sp, #48]	; 0x30
   1e774:	mov	r5, #92	; 0x5c
   1e778:	b	1df98 <__assert_fail@plt+0xc050>
   1e77c:	ldr	r3, [sp, #32]
   1e780:	ldrb	r2, [r3, #1]
   1e784:	adds	r2, r2, #0
   1e788:	movne	r2, #1
   1e78c:	b	1dcb4 <__assert_fail@plt+0xbd6c>
   1e790:	ldr	r3, [sp, #156]	; 0x9c
   1e794:	ands	r3, r3, #4
   1e798:	beq	1e7c0 <__assert_fail@plt+0xc878>
   1e79c:	ldr	r2, [sp, #28]
   1e7a0:	add	r3, r9, #2
   1e7a4:	cmp	r3, r2
   1e7a8:	bcs	1e7bc <__assert_fail@plt+0xc874>
   1e7ac:	ldr	r2, [sp, #52]	; 0x34
   1e7b0:	ldrb	r5, [r2, #1]
   1e7b4:	cmp	r5, #63	; 0x3f
   1e7b8:	beq	1ec38 <__assert_fail@plt+0xccf0>
   1e7bc:	mov	r3, #0
   1e7c0:	mov	r5, #63	; 0x3f
   1e7c4:	mov	r6, r3
   1e7c8:	b	1dcd4 <__assert_fail@plt+0xbd8c>
   1e7cc:	ldr	r3, [sp, #44]	; 0x2c
   1e7d0:	cmp	r3, #0
   1e7d4:	bne	1ebd4 <__assert_fail@plt+0xcc8c>
   1e7d8:	mov	r6, r3
   1e7dc:	mov	r5, #63	; 0x3f
   1e7e0:	b	1dd0c <__assert_fail@plt+0xbdc4>
   1e7e4:	ldr	r1, [sp, #28]
   1e7e8:	mov	r2, #0
   1e7ec:	mov	r3, #0
   1e7f0:	strd	r2, [sp, #104]	; 0x68
   1e7f4:	cmn	r1, #1
   1e7f8:	bne	1e808 <__assert_fail@plt+0xc8c0>
   1e7fc:	ldr	r0, [sp, #32]
   1e800:	bl	11d50 <strlen@plt>
   1e804:	str	r0, [sp, #28]
   1e808:	str	r8, [sp, #76]	; 0x4c
   1e80c:	mov	r3, #0
   1e810:	str	sl, [sp, #80]	; 0x50
   1e814:	ldr	sl, [sp, #32]
   1e818:	str	r5, [sp, #84]	; 0x54
   1e81c:	mov	r5, r3
   1e820:	ldr	r8, [sp, #44]	; 0x2c
   1e824:	str	r7, [sp, #88]	; 0x58
   1e828:	str	r4, [sp, #92]	; 0x5c
   1e82c:	ldr	r2, [sp, #28]
   1e830:	add	r4, r9, r5
   1e834:	add	r3, sp, #104	; 0x68
   1e838:	add	r7, sl, r4
   1e83c:	add	r0, sp, #100	; 0x64
   1e840:	mov	r1, r7
   1e844:	sub	r2, r2, r4
   1e848:	bl	226a8 <__assert_fail@plt+0x10760>
   1e84c:	subs	r1, r0, #0
   1e850:	beq	1e89c <__assert_fail@plt+0xc954>
   1e854:	cmn	r1, #1
   1e858:	beq	1ec14 <__assert_fail@plt+0xcccc>
   1e85c:	cmn	r1, #2
   1e860:	beq	1ed34 <__assert_fail@plt+0xcdec>
   1e864:	cmp	fp, #2
   1e868:	movne	r3, #0
   1e86c:	andeq	r3, r8, #1
   1e870:	cmp	r3, #0
   1e874:	bne	1ea00 <__assert_fail@plt+0xcab8>
   1e878:	ldr	r0, [sp, #100]	; 0x64
   1e87c:	add	r5, r5, r1
   1e880:	bl	11be8 <iswprint@plt>
   1e884:	cmp	r0, #0
   1e888:	add	r0, sp, #104	; 0x68
   1e88c:	moveq	r6, #0
   1e890:	bl	11af8 <mbsinit@plt>
   1e894:	cmp	r0, #0
   1e898:	beq	1e82c <__assert_fail@plt+0xc8e4>
   1e89c:	ldr	r3, [sp, #40]	; 0x28
   1e8a0:	mov	ip, r5
   1e8a4:	eor	r2, r6, #1
   1e8a8:	ldr	r8, [sp, #76]	; 0x4c
   1e8ac:	ldr	sl, [sp, #80]	; 0x50
   1e8b0:	and	r2, r2, r3
   1e8b4:	ldr	r5, [sp, #84]	; 0x54
   1e8b8:	ldr	r7, [sp, #88]	; 0x58
   1e8bc:	ldr	r4, [sp, #92]	; 0x5c
   1e8c0:	cmp	ip, #1
   1e8c4:	bls	1e200 <__assert_fail@plt+0xc2b8>
   1e8c8:	add	r1, ip, r9
   1e8cc:	mov	r0, #39	; 0x27
   1e8d0:	ldr	lr, [sp, #52]	; 0x34
   1e8d4:	mov	ip, #0
   1e8d8:	str	r6, [sp, #52]	; 0x34
   1e8dc:	ldr	r6, [sp, #48]	; 0x30
   1e8e0:	b	1e99c <__assert_fail@plt+0xca54>
   1e8e4:	ldr	ip, [sp, #44]	; 0x2c
   1e8e8:	sub	r3, fp, #2
   1e8ec:	clz	r3, r3
   1e8f0:	lsr	r3, r3, #5
   1e8f4:	cmp	ip, #0
   1e8f8:	bne	1eb0c <__assert_fail@plt+0xcbc4>
   1e8fc:	eor	ip, r6, #1
   1e900:	ands	r3, r3, ip
   1e904:	beq	1e934 <__assert_fail@plt+0xc9ec>
   1e908:	cmp	sl, r4
   1e90c:	add	ip, r4, #1
   1e910:	strbhi	r0, [r8, r4]
   1e914:	cmp	sl, ip
   1e918:	movhi	r6, #36	; 0x24
   1e91c:	strbhi	r6, [r8, ip]
   1e920:	add	ip, r4, #2
   1e924:	mov	r6, r3
   1e928:	cmp	sl, ip
   1e92c:	add	r4, r4, #3
   1e930:	strbhi	r0, [r8, ip]
   1e934:	cmp	sl, r4
   1e938:	movhi	r3, #92	; 0x5c
   1e93c:	strbhi	r3, [r8, r4]
   1e940:	add	r3, r4, #1
   1e944:	cmp	sl, r3
   1e948:	bls	1e958 <__assert_fail@plt+0xca10>
   1e94c:	lsr	ip, r5, #6
   1e950:	add	ip, ip, #48	; 0x30
   1e954:	strb	ip, [r8, r3]
   1e958:	add	r3, r4, #2
   1e95c:	cmp	sl, r3
   1e960:	bls	1e970 <__assert_fail@plt+0xca28>
   1e964:	ubfx	ip, r5, #3, #3
   1e968:	add	ip, ip, #48	; 0x30
   1e96c:	strb	ip, [r8, r3]
   1e970:	add	r9, r9, #1
   1e974:	and	r5, r5, #7
   1e978:	cmp	r9, r1
   1e97c:	add	r5, r5, #48	; 0x30
   1e980:	add	r4, r4, #3
   1e984:	bcs	1eb38 <__assert_fail@plt+0xcbf0>
   1e988:	mov	ip, r2
   1e98c:	cmp	sl, r4
   1e990:	strbhi	r5, [r8, r4]
   1e994:	add	r4, r4, #1
   1e998:	ldrb	r5, [lr, #1]!
   1e99c:	cmp	r2, #0
   1e9a0:	bne	1e8e4 <__assert_fail@plt+0xc99c>
   1e9a4:	eor	r3, ip, #1
   1e9a8:	cmp	r7, #0
   1e9ac:	and	r3, r3, r6
   1e9b0:	uxtb	r3, r3
   1e9b4:	beq	1e9c8 <__assert_fail@plt+0xca80>
   1e9b8:	cmp	sl, r4
   1e9bc:	movhi	r7, #92	; 0x5c
   1e9c0:	strbhi	r7, [r8, r4]
   1e9c4:	add	r4, r4, #1
   1e9c8:	add	r9, r9, #1
   1e9cc:	cmp	r9, r1
   1e9d0:	bcs	1eb20 <__assert_fail@plt+0xcbd8>
   1e9d4:	cmp	r3, #0
   1e9d8:	beq	1eb58 <__assert_fail@plt+0xcc10>
   1e9dc:	cmp	sl, r4
   1e9e0:	add	r3, r4, #1
   1e9e4:	mov	r7, #0
   1e9e8:	strbhi	r0, [r8, r4]
   1e9ec:	cmp	sl, r3
   1e9f0:	add	r4, r4, #2
   1e9f4:	mov	r6, r7
   1e9f8:	strbhi	r0, [r8, r3]
   1e9fc:	b	1e98c <__assert_fail@plt+0xca44>
   1ea00:	cmp	r1, #1
   1ea04:	beq	1e878 <__assert_fail@plt+0xc930>
   1ea08:	add	r2, r4, #1
   1ea0c:	add	r3, sl, r1
   1ea10:	add	r2, sl, r2
   1ea14:	add	r4, r3, r4
   1ea18:	ldrb	r3, [r2], #1
   1ea1c:	sub	r3, r3, #91	; 0x5b
   1ea20:	cmp	r3, #33	; 0x21
   1ea24:	ldrls	pc, [pc, r3, lsl #2]
   1ea28:	b	1eab4 <__assert_fail@plt+0xcb6c>
   1ea2c:	andeq	lr, r1, r0, asr #21
   1ea30:	andeq	lr, r1, r0, asr #21
   1ea34:			; <UNDEFINED> instruction: 0x0001eab4
   1ea38:	andeq	lr, r1, r0, asr #21
   1ea3c:			; <UNDEFINED> instruction: 0x0001eab4
   1ea40:	andeq	lr, r1, r0, asr #21
   1ea44:			; <UNDEFINED> instruction: 0x0001eab4
   1ea48:			; <UNDEFINED> instruction: 0x0001eab4
   1ea4c:			; <UNDEFINED> instruction: 0x0001eab4
   1ea50:			; <UNDEFINED> instruction: 0x0001eab4
   1ea54:			; <UNDEFINED> instruction: 0x0001eab4
   1ea58:			; <UNDEFINED> instruction: 0x0001eab4
   1ea5c:			; <UNDEFINED> instruction: 0x0001eab4
   1ea60:			; <UNDEFINED> instruction: 0x0001eab4
   1ea64:			; <UNDEFINED> instruction: 0x0001eab4
   1ea68:			; <UNDEFINED> instruction: 0x0001eab4
   1ea6c:			; <UNDEFINED> instruction: 0x0001eab4
   1ea70:			; <UNDEFINED> instruction: 0x0001eab4
   1ea74:			; <UNDEFINED> instruction: 0x0001eab4
   1ea78:			; <UNDEFINED> instruction: 0x0001eab4
   1ea7c:			; <UNDEFINED> instruction: 0x0001eab4
   1ea80:			; <UNDEFINED> instruction: 0x0001eab4
   1ea84:			; <UNDEFINED> instruction: 0x0001eab4
   1ea88:			; <UNDEFINED> instruction: 0x0001eab4
   1ea8c:			; <UNDEFINED> instruction: 0x0001eab4
   1ea90:			; <UNDEFINED> instruction: 0x0001eab4
   1ea94:			; <UNDEFINED> instruction: 0x0001eab4
   1ea98:			; <UNDEFINED> instruction: 0x0001eab4
   1ea9c:			; <UNDEFINED> instruction: 0x0001eab4
   1eaa0:			; <UNDEFINED> instruction: 0x0001eab4
   1eaa4:			; <UNDEFINED> instruction: 0x0001eab4
   1eaa8:			; <UNDEFINED> instruction: 0x0001eab4
   1eaac:			; <UNDEFINED> instruction: 0x0001eab4
   1eab0:	andeq	lr, r1, r0, asr #21
   1eab4:	cmp	r4, r2
   1eab8:	bne	1ea18 <__assert_fail@plt+0xcad0>
   1eabc:	b	1e878 <__assert_fail@plt+0xc930>
   1eac0:	mov	r8, #2
   1eac4:	ldr	fp, [sp, #76]	; 0x4c
   1eac8:	ldr	sl, [sp, #80]	; 0x50
   1eacc:	b	1dff8 <__assert_fail@plt+0xc0b0>
   1ead0:	ldr	r2, [sp, #40]	; 0x28
   1ead4:	str	fp, [sp, #152]	; 0x98
   1ead8:	mov	fp, r8
   1eadc:	ldr	r8, [sp, #152]	; 0x98
   1eae0:	and	r2, r2, r3
   1eae4:	str	r2, [sp, #40]	; 0x28
   1eae8:	b	1dff8 <__assert_fail@plt+0xc0b0>
   1eaec:	cmp	sl, r4
   1eaf0:	movls	r0, r4
   1eaf4:	bls	1e128 <__assert_fail@plt+0xc1e0>
   1eaf8:	ldr	r3, [sp, #48]	; 0x30
   1eafc:	b	1e118 <__assert_fail@plt+0xc1d0>
   1eb00:	str	sl, [sp, #72]	; 0x48
   1eb04:	ldr	sl, [sp, #44]	; 0x2c
   1eb08:	b	1df68 <__assert_fail@plt+0xc020>
   1eb0c:	str	r3, [sp, #40]	; 0x28
   1eb10:	str	fp, [sp, #152]	; 0x98
   1eb14:	mov	fp, r8
   1eb18:	ldr	r8, [sp, #152]	; 0x98
   1eb1c:	b	1dff8 <__assert_fail@plt+0xc0b0>
   1eb20:	str	r6, [sp, #48]	; 0x30
   1eb24:	ldr	r6, [sp, #52]	; 0x34
   1eb28:	b	1df98 <__assert_fail@plt+0xc050>
   1eb2c:	mov	r6, #0
   1eb30:	ldr	r2, [sp, #40]	; 0x28
   1eb34:	b	1e8c8 <__assert_fail@plt+0xc980>
   1eb38:	str	r6, [sp, #48]	; 0x30
   1eb3c:	ldr	r6, [sp, #52]	; 0x34
   1eb40:	b	1dd84 <__assert_fail@plt+0xbe3c>
   1eb44:	add	r4, r4, #4
   1eb48:	mov	r6, #0
   1eb4c:	str	r3, [sp, #48]	; 0x30
   1eb50:	mov	r5, #48	; 0x30
   1eb54:	b	1dd0c <__assert_fail@plt+0xbdc4>
   1eb58:	mov	r7, r3
   1eb5c:	b	1e98c <__assert_fail@plt+0xca44>
   1eb60:	mov	r3, #1
   1eb64:	movw	r2, #21896	; 0x5588
   1eb68:	movt	r2, #2
   1eb6c:	mov	r4, r3
   1eb70:	str	r3, [sp, #36]	; 0x24
   1eb74:	str	r3, [sp, #40]	; 0x28
   1eb78:	str	sl, [sp, #44]	; 0x2c
   1eb7c:	str	sl, [sp, #48]	; 0x30
   1eb80:	str	r3, [sp, #56]	; 0x38
   1eb84:	str	r2, [sp, #60]	; 0x3c
   1eb88:	str	sl, [sp, #68]	; 0x44
   1eb8c:	str	sl, [sp, #72]	; 0x48
   1eb90:	b	1d834 <__assert_fail@plt+0xb8ec>
   1eb94:	mov	r3, r6
   1eb98:	mov	r5, #48	; 0x30
   1eb9c:	mov	r6, #0
   1eba0:	b	1dd0c <__assert_fail@plt+0xbdc4>
   1eba4:	mov	r5, r3
   1eba8:	b	1e084 <__assert_fail@plt+0xc13c>
   1ebac:	cmp	sl, r4
   1ebb0:	mov	r5, #48	; 0x30
   1ebb4:	movhi	r3, #48	; 0x30
   1ebb8:	strbhi	r3, [r8, r4]
   1ebbc:	add	r3, r0, #2
   1ebc0:	add	r4, r0, #3
   1ebc4:	cmp	sl, r3
   1ebc8:	movhi	r1, #48	; 0x30
   1ebcc:	strbhi	r1, [r8, r3]
   1ebd0:	b	1e15c <__assert_fail@plt+0xc214>
   1ebd4:	str	fp, [sp, #152]	; 0x98
   1ebd8:	mov	fp, r8
   1ebdc:	ldr	r8, [sp, #152]	; 0x98
   1ebe0:	b	1dff8 <__assert_fail@plt+0xc0b0>
   1ebe4:	ldr	r3, [sp, #164]	; 0xa4
   1ebe8:	ldrb	r3, [r3]
   1ebec:	cmp	r3, #0
   1ebf0:	beq	1d804 <__assert_fail@plt+0xb8bc>
   1ebf4:	ldr	r2, [sp, #164]	; 0xa4
   1ebf8:	cmp	sl, r4
   1ebfc:	strbhi	r3, [fp, r4]
   1ec00:	add	r4, r4, #1
   1ec04:	ldrb	r3, [r2, #1]!
   1ec08:	cmp	r3, #0
   1ec0c:	bne	1ebf8 <__assert_fail@plt+0xccb0>
   1ec10:	b	1d804 <__assert_fail@plt+0xb8bc>
   1ec14:	mov	ip, r5
   1ec18:	mov	r6, #0
   1ec1c:	ldr	r2, [sp, #40]	; 0x28
   1ec20:	ldr	r8, [sp, #76]	; 0x4c
   1ec24:	ldr	sl, [sp, #80]	; 0x50
   1ec28:	ldr	r5, [sp, #84]	; 0x54
   1ec2c:	ldr	r7, [sp, #88]	; 0x58
   1ec30:	ldr	r4, [sp, #92]	; 0x5c
   1ec34:	b	1e8c0 <__assert_fail@plt+0xc978>
   1ec38:	ldr	r2, [sp, #32]
   1ec3c:	ldrb	r1, [r2, r3]
   1ec40:	sub	r2, r1, #33	; 0x21
   1ec44:	cmp	r2, #29
   1ec48:	ldrls	pc, [pc, r2, lsl #2]
   1ec4c:	b	1ed28 <__assert_fail@plt+0xcde0>
   1ec50:	andeq	lr, r1, r8, asr #25
   1ec54:	andeq	lr, r1, r8, lsr #26
   1ec58:	andeq	lr, r1, r8, lsr #26
   1ec5c:	andeq	lr, r1, r8, lsr #26
   1ec60:	andeq	lr, r1, r8, lsr #26
   1ec64:	andeq	lr, r1, r8, lsr #26
   1ec68:	andeq	lr, r1, r8, asr #25
   1ec6c:	andeq	lr, r1, r8, asr #25
   1ec70:	andeq	lr, r1, r8, asr #25
   1ec74:	andeq	lr, r1, r8, lsr #26
   1ec78:	andeq	lr, r1, r8, lsr #26
   1ec7c:	andeq	lr, r1, r8, lsr #26
   1ec80:	andeq	lr, r1, r8, asr #25
   1ec84:	andeq	lr, r1, r8, lsr #26
   1ec88:	andeq	lr, r1, r8, asr #25
   1ec8c:	andeq	lr, r1, r8, lsr #26
   1ec90:	andeq	lr, r1, r8, lsr #26
   1ec94:	andeq	lr, r1, r8, lsr #26
   1ec98:	andeq	lr, r1, r8, lsr #26
   1ec9c:	andeq	lr, r1, r8, lsr #26
   1eca0:	andeq	lr, r1, r8, lsr #26
   1eca4:	andeq	lr, r1, r8, lsr #26
   1eca8:	andeq	lr, r1, r8, lsr #26
   1ecac:	andeq	lr, r1, r8, lsr #26
   1ecb0:	andeq	lr, r1, r8, lsr #26
   1ecb4:	andeq	lr, r1, r8, lsr #26
   1ecb8:	andeq	lr, r1, r8, lsr #26
   1ecbc:	andeq	lr, r1, r8, asr #25
   1ecc0:	andeq	lr, r1, r8, asr #25
   1ecc4:	andeq	lr, r1, r8, asr #25
   1ecc8:	ldr	r2, [sp, #44]	; 0x2c
   1eccc:	cmp	r2, #0
   1ecd0:	bne	1ee2c <__assert_fail@plt+0xcee4>
   1ecd4:	cmp	sl, r4
   1ecd8:	mov	r5, r1
   1ecdc:	movhi	r2, #63	; 0x3f
   1ece0:	mov	r9, r3
   1ece4:	strbhi	r2, [r8, r4]
   1ece8:	add	r2, r4, #1
   1ecec:	cmp	sl, r2
   1ecf0:	movhi	r0, #34	; 0x22
   1ecf4:	strbhi	r0, [r8, r2]
   1ecf8:	add	r2, r4, #2
   1ecfc:	cmp	sl, r2
   1ed00:	movhi	r0, #34	; 0x22
   1ed04:	strbhi	r0, [r8, r2]
   1ed08:	add	r2, r4, #3
   1ed0c:	add	r4, r4, #4
   1ed10:	cmp	sl, r2
   1ed14:	movhi	r0, #63	; 0x3f
   1ed18:	strbhi	r0, [r8, r2]
   1ed1c:	mov	r2, #0
   1ed20:	mov	r6, r2
   1ed24:	b	1e15c <__assert_fail@plt+0xc214>
   1ed28:	mov	r3, #0
   1ed2c:	mov	r6, r3
   1ed30:	b	1dcd4 <__assert_fail@plt+0xbd8c>
   1ed34:	ldr	r0, [sp, #28]
   1ed38:	mov	r1, r4
   1ed3c:	mov	r2, r7
   1ed40:	mov	r3, r5
   1ed44:	mov	ip, r5
   1ed48:	ldr	r8, [sp, #76]	; 0x4c
   1ed4c:	ldr	sl, [sp, #80]	; 0x50
   1ed50:	cmp	r1, r0
   1ed54:	ldr	r5, [sp, #84]	; 0x54
   1ed58:	ldr	r7, [sp, #88]	; 0x58
   1ed5c:	ldr	r4, [sp, #92]	; 0x5c
   1ed60:	bcs	1ed94 <__assert_fail@plt+0xce4c>
   1ed64:	ldrb	r6, [r2]
   1ed68:	cmp	r6, #0
   1ed6c:	bne	1ed80 <__assert_fail@plt+0xce38>
   1ed70:	b	1eeb4 <__assert_fail@plt+0xcf6c>
   1ed74:	ldrb	r6, [r2, #1]!
   1ed78:	cmp	r6, #0
   1ed7c:	beq	1ee3c <__assert_fail@plt+0xcef4>
   1ed80:	add	r3, r3, #1
   1ed84:	add	r1, r9, r3
   1ed88:	cmp	r1, r0
   1ed8c:	bcc	1ed74 <__assert_fail@plt+0xce2c>
   1ed90:	mov	ip, r3
   1ed94:	mov	r6, #0
   1ed98:	ldr	r2, [sp, #40]	; 0x28
   1ed9c:	b	1e8c0 <__assert_fail@plt+0xc978>
   1eda0:	mov	r3, #1
   1eda4:	mov	r2, #0
   1eda8:	mov	r4, r2
   1edac:	str	r3, [sp, #36]	; 0x24
   1edb0:	str	r3, [sp, #40]	; 0x28
   1edb4:	str	r3, [sp, #44]	; 0x2c
   1edb8:	str	r2, [sp, #48]	; 0x30
   1edbc:	str	r3, [sp, #56]	; 0x38
   1edc0:	movw	r3, #21896	; 0x5588
   1edc4:	movt	r3, #2
   1edc8:	str	r3, [sp, #60]	; 0x3c
   1edcc:	str	r2, [sp, #68]	; 0x44
   1edd0:	str	r2, [sp, #72]	; 0x48
   1edd4:	b	1d834 <__assert_fail@plt+0xb8ec>
   1edd8:	mov	r2, r3
   1eddc:	ldr	r3, [sp, #60]	; 0x3c
   1ede0:	cmp	r3, #0
   1ede4:	moveq	r2, #0
   1ede8:	andne	r2, r2, #1
   1edec:	cmp	r2, #0
   1edf0:	beq	1ee1c <__assert_fail@plt+0xced4>
   1edf4:	mov	r2, r3
   1edf8:	ldrb	r3, [r3]
   1edfc:	cmp	r3, #0
   1ee00:	beq	1ee1c <__assert_fail@plt+0xced4>
   1ee04:	cmp	sl, r4
   1ee08:	strbhi	r3, [fp, r4]
   1ee0c:	add	r4, r4, #1
   1ee10:	ldrb	r3, [r2, #1]!
   1ee14:	cmp	r3, #0
   1ee18:	bne	1ee04 <__assert_fail@plt+0xcebc>
   1ee1c:	cmp	sl, r4
   1ee20:	movhi	r3, #0
   1ee24:	strbhi	r3, [fp, r4]
   1ee28:	b	1e03c <__assert_fail@plt+0xc0f4>
   1ee2c:	str	fp, [sp, #152]	; 0x98
   1ee30:	mov	fp, r8
   1ee34:	ldr	r8, [sp, #152]	; 0x98
   1ee38:	b	1e004 <__assert_fail@plt+0xc0bc>
   1ee3c:	mov	ip, r3
   1ee40:	ldr	r2, [sp, #40]	; 0x28
   1ee44:	b	1e8c0 <__assert_fail@plt+0xc978>
   1ee48:	str	fp, [sp, #152]	; 0x98
   1ee4c:	mov	fp, r8
   1ee50:	ldr	r8, [sp, #152]	; 0x98
   1ee54:	sub	r3, r8, #2
   1ee58:	clz	r3, r3
   1ee5c:	lsr	r3, r3, #5
   1ee60:	str	r3, [sp, #40]	; 0x28
   1ee64:	b	1dff8 <__assert_fail@plt+0xc0b0>
   1ee68:	mov	ip, #5
   1ee6c:	ldr	r3, [sp, #28]
   1ee70:	str	ip, [sp]
   1ee74:	ldr	r2, [sp, #156]	; 0x9c
   1ee78:	ldr	ip, [sp, #164]	; 0xa4
   1ee7c:	ldr	r0, [sp, #160]	; 0xa0
   1ee80:	str	r2, [sp, #4]
   1ee84:	ldr	r2, [sp, #32]
   1ee88:	ldr	r1, [sp, #72]	; 0x48
   1ee8c:	str	ip, [sp, #12]
   1ee90:	ldr	ip, [sp, #168]	; 0xa8
   1ee94:	str	r0, [sp, #8]
   1ee98:	mov	r0, fp
   1ee9c:	str	ip, [sp, #16]
   1eea0:	bl	1d74c <__assert_fail@plt+0xb804>
   1eea4:	mov	r4, r0
   1eea8:	b	1e03c <__assert_fail@plt+0xc0f4>
   1eeac:	mov	r8, #2
   1eeb0:	b	1dff8 <__assert_fail@plt+0xc0b0>
   1eeb4:	ldr	r2, [sp, #40]	; 0x28
   1eeb8:	b	1e8c0 <__assert_fail@plt+0xc978>
   1eebc:	mov	r3, #0
   1eec0:	mov	r2, #1
   1eec4:	mov	r4, r3
   1eec8:	strd	r2, [sp, #36]	; 0x24
   1eecc:	strd	r2, [sp, #44]	; 0x2c
   1eed0:	str	r2, [sp, #56]	; 0x38
   1eed4:	str	r3, [sp, #68]	; 0x44
   1eed8:	str	r3, [sp, #72]	; 0x48
   1eedc:	movw	r3, #21916	; 0x559c
   1eee0:	movt	r3, #2
   1eee4:	str	r3, [sp, #60]	; 0x3c
   1eee8:	b	1d834 <__assert_fail@plt+0xb8ec>
   1eeec:	mov	r3, #0
   1eef0:	mov	r1, #1
   1eef4:	mov	r2, r3
   1eef8:	str	r1, [sp, #36]	; 0x24
   1eefc:	str	r3, [sp, #48]	; 0x30
   1ef00:	str	sl, [sp, #72]	; 0x48
   1ef04:	b	1de3c <__assert_fail@plt+0xbef4>
   1ef08:	bl	11f24 <abort@plt>
   1ef0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ef10:	mov	r4, r0
   1ef14:	mov	r5, r3
   1ef18:	strd	r6, [sp, #8]
   1ef1c:	movw	r7, #25204	; 0x6274
   1ef20:	movt	r7, #3
   1ef24:	strd	r8, [sp, #16]
   1ef28:	strd	sl, [sp, #24]
   1ef2c:	mov	sl, r1
   1ef30:	mov	fp, r2
   1ef34:	str	lr, [sp, #32]
   1ef38:	sub	sp, sp, #60	; 0x3c
   1ef3c:	bl	11d74 <__errno_location@plt>
   1ef40:	mov	r8, r0
   1ef44:	cmn	r4, #-2147483647	; 0x80000001
   1ef48:	ldr	r6, [r7]
   1ef4c:	movne	r0, #0
   1ef50:	moveq	r0, #1
   1ef54:	ldr	r3, [r8]
   1ef58:	orrs	r0, r0, r4, lsr #31
   1ef5c:	str	r3, [sp, #28]
   1ef60:	bne	1f0f0 <__assert_fail@plt+0xd1a8>
   1ef64:	ldr	r3, [r7, #4]
   1ef68:	cmp	r3, r4
   1ef6c:	bgt	1efcc <__assert_fail@plt+0xd084>
   1ef70:	add	r1, r7, #8
   1ef74:	sub	r2, r4, r3
   1ef78:	str	r3, [sp, #52]	; 0x34
   1ef7c:	cmp	r6, r1
   1ef80:	add	r2, r2, #1
   1ef84:	beq	1f0c8 <__assert_fail@plt+0xd180>
   1ef88:	mov	r1, #8
   1ef8c:	mov	r0, r6
   1ef90:	mvn	r3, #-2147483648	; 0x80000000
   1ef94:	str	r1, [sp]
   1ef98:	add	r1, sp, #52	; 0x34
   1ef9c:	bl	21178 <__assert_fail@plt+0xf230>
   1efa0:	mov	r6, r0
   1efa4:	str	r0, [r7]
   1efa8:	ldr	r0, [r7, #4]
   1efac:	mov	r1, #0
   1efb0:	ldr	r2, [sp, #52]	; 0x34
   1efb4:	sub	r2, r2, r0
   1efb8:	add	r0, r6, r0, lsl #3
   1efbc:	lsl	r2, r2, #3
   1efc0:	bl	11d98 <memset@plt>
   1efc4:	ldr	r3, [sp, #52]	; 0x34
   1efc8:	str	r3, [r7, #4]
   1efcc:	ldr	r1, [r5, #4]
   1efd0:	add	r0, r6, r4, lsl #3
   1efd4:	add	ip, r5, #8
   1efd8:	mov	r3, fp
   1efdc:	mov	r2, sl
   1efe0:	ldr	r7, [r0, #4]
   1efe4:	str	r0, [sp, #36]	; 0x24
   1efe8:	str	ip, [sp, #40]	; 0x28
   1efec:	orr	r0, r1, #1
   1eff0:	ldr	r9, [r6, r4, lsl #3]
   1eff4:	str	ip, [sp, #8]
   1eff8:	ldr	lr, [r5, #44]	; 0x2c
   1effc:	str	r0, [sp, #4]
   1f000:	ldr	ip, [r5]
   1f004:	mov	r1, r9
   1f008:	str	ip, [sp, #32]
   1f00c:	ldr	ip, [r5, #40]	; 0x28
   1f010:	str	ip, [sp, #12]
   1f014:	ldr	ip, [sp, #32]
   1f018:	str	lr, [sp, #16]
   1f01c:	str	r0, [sp, #44]	; 0x2c
   1f020:	mov	r0, r7
   1f024:	str	ip, [sp]
   1f028:	bl	1d74c <__assert_fail@plt+0xb804>
   1f02c:	cmp	r9, r0
   1f030:	bhi	1f0a0 <__assert_fail@plt+0xd158>
   1f034:	add	r9, r0, #1
   1f038:	movw	r3, #26832	; 0x68d0
   1f03c:	movt	r3, #3
   1f040:	cmp	r7, r3
   1f044:	str	r9, [r6, r4, lsl #3]
   1f048:	beq	1f054 <__assert_fail@plt+0xd10c>
   1f04c:	mov	r0, r7
   1f050:	bl	1b670 <__assert_fail@plt+0x9728>
   1f054:	mov	r0, r9
   1f058:	bl	20fc8 <__assert_fail@plt+0xf080>
   1f05c:	ldr	ip, [r5]
   1f060:	mov	r3, fp
   1f064:	mov	r2, sl
   1f068:	mov	r1, r9
   1f06c:	mov	r7, r0
   1f070:	ldr	lr, [sp, #36]	; 0x24
   1f074:	ldr	r4, [r5, #40]	; 0x28
   1f078:	str	r0, [lr, #4]
   1f07c:	ldr	lr, [r5, #44]	; 0x2c
   1f080:	str	ip, [sp]
   1f084:	ldr	ip, [sp, #44]	; 0x2c
   1f088:	str	ip, [sp, #4]
   1f08c:	ldr	ip, [sp, #40]	; 0x28
   1f090:	str	r4, [sp, #12]
   1f094:	str	lr, [sp, #16]
   1f098:	str	ip, [sp, #8]
   1f09c:	bl	1d74c <__assert_fail@plt+0xb804>
   1f0a0:	ldr	r3, [sp, #28]
   1f0a4:	mov	r0, r7
   1f0a8:	str	r3, [r8]
   1f0ac:	add	sp, sp, #60	; 0x3c
   1f0b0:	ldrd	r4, [sp]
   1f0b4:	ldrd	r6, [sp, #8]
   1f0b8:	ldrd	r8, [sp, #16]
   1f0bc:	ldrd	sl, [sp, #24]
   1f0c0:	add	sp, sp, #32
   1f0c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0c8:	mov	r1, #8
   1f0cc:	mvn	r3, #-2147483648	; 0x80000000
   1f0d0:	str	r1, [sp]
   1f0d4:	add	r1, sp, #52	; 0x34
   1f0d8:	bl	21178 <__assert_fail@plt+0xf230>
   1f0dc:	ldrd	r2, [r7, #8]
   1f0e0:	mov	r6, r0
   1f0e4:	str	r0, [r7]
   1f0e8:	strd	r2, [r0]
   1f0ec:	b	1efa8 <__assert_fail@plt+0xd060>
   1f0f0:	bl	11f24 <abort@plt>
   1f0f4:	strd	r4, [sp, #-16]!
   1f0f8:	mov	r5, r0
   1f0fc:	str	r6, [sp, #8]
   1f100:	str	lr, [sp, #12]
   1f104:	bl	11d74 <__errno_location@plt>
   1f108:	mov	r4, r0
   1f10c:	cmp	r5, #0
   1f110:	ldr	r0, [pc, #32]	; 1f138 <__assert_fail@plt+0xd1f0>
   1f114:	mov	r1, #48	; 0x30
   1f118:	movne	r0, r5
   1f11c:	ldr	r6, [r4]
   1f120:	bl	212f0 <__assert_fail@plt+0xf3a8>
   1f124:	str	r6, [r4]
   1f128:	ldrd	r4, [sp]
   1f12c:	ldr	r6, [sp, #8]
   1f130:	add	sp, sp, #12
   1f134:	pop	{pc}		; (ldr pc, [sp], #4)
   1f138:	ldrdeq	r6, [r3], -r0
   1f13c:	ldr	r3, [pc, #12]	; 1f150 <__assert_fail@plt+0xd208>
   1f140:	cmp	r0, #0
   1f144:	moveq	r0, r3
   1f148:	ldr	r0, [r0]
   1f14c:	bx	lr
   1f150:	ldrdeq	r6, [r3], -r0
   1f154:	ldr	r3, [pc, #12]	; 1f168 <__assert_fail@plt+0xd220>
   1f158:	cmp	r0, #0
   1f15c:	moveq	r0, r3
   1f160:	str	r1, [r0]
   1f164:	bx	lr
   1f168:	ldrdeq	r6, [r3], -r0
   1f16c:	ldr	r3, [pc, #52]	; 1f1a8 <__assert_fail@plt+0xd260>
   1f170:	cmp	r0, #0
   1f174:	push	{lr}		; (str lr, [sp, #-4]!)
   1f178:	lsr	lr, r1, #5
   1f17c:	and	r1, r1, #31
   1f180:	moveq	r0, r3
   1f184:	add	r3, r0, #8
   1f188:	ldr	ip, [r3, lr, lsl #2]
   1f18c:	lsr	r0, ip, r1
   1f190:	eor	r2, r2, r0
   1f194:	and	r0, r0, #1
   1f198:	and	r2, r2, #1
   1f19c:	eor	r1, ip, r2, lsl r1
   1f1a0:	str	r1, [r3, lr, lsl #2]
   1f1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1a8:	ldrdeq	r6, [r3], -r0
   1f1ac:	ldr	r3, [pc, #16]	; 1f1c4 <__assert_fail@plt+0xd27c>
   1f1b0:	cmp	r0, #0
   1f1b4:	movne	r3, r0
   1f1b8:	ldr	r0, [r3, #4]
   1f1bc:	str	r1, [r3, #4]
   1f1c0:	bx	lr
   1f1c4:	ldrdeq	r6, [r3], -r0
   1f1c8:	ldr	r3, [pc, #48]	; 1f200 <__assert_fail@plt+0xd2b8>
   1f1cc:	cmp	r0, #0
   1f1d0:	mov	ip, #10
   1f1d4:	moveq	r0, r3
   1f1d8:	cmp	r2, #0
   1f1dc:	cmpne	r1, #0
   1f1e0:	str	ip, [r0]
   1f1e4:	beq	1f1f4 <__assert_fail@plt+0xd2ac>
   1f1e8:	str	r1, [r0, #40]	; 0x28
   1f1ec:	str	r2, [r0, #44]	; 0x2c
   1f1f0:	bx	lr
   1f1f4:	str	r4, [sp, #-8]!
   1f1f8:	str	lr, [sp, #4]
   1f1fc:	bl	11f24 <abort@plt>
   1f200:	ldrdeq	r6, [r3], -r0
   1f204:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f208:	strd	r6, [sp, #8]
   1f20c:	mov	r7, r0
   1f210:	mov	r6, r1
   1f214:	strd	r8, [sp, #16]
   1f218:	mov	r8, r2
   1f21c:	mov	r9, r3
   1f220:	str	lr, [sp, #24]
   1f224:	sub	sp, sp, #28
   1f228:	ldr	r4, [sp, #56]	; 0x38
   1f22c:	ldr	ip, [pc, #104]	; 1f29c <__assert_fail@plt+0xd354>
   1f230:	cmp	r4, #0
   1f234:	moveq	r4, ip
   1f238:	bl	11d74 <__errno_location@plt>
   1f23c:	ldr	ip, [r4, #44]	; 0x2c
   1f240:	mov	r5, r0
   1f244:	mov	r1, r6
   1f248:	add	lr, r4, #8
   1f24c:	mov	r3, r9
   1f250:	ldr	r6, [r5]
   1f254:	mov	r2, r8
   1f258:	mov	r0, r7
   1f25c:	str	ip, [sp, #16]
   1f260:	ldr	ip, [r4, #40]	; 0x28
   1f264:	str	lr, [sp, #8]
   1f268:	str	ip, [sp, #12]
   1f26c:	ldr	ip, [r4, #4]
   1f270:	str	ip, [sp, #4]
   1f274:	ldr	ip, [r4]
   1f278:	str	ip, [sp]
   1f27c:	bl	1d74c <__assert_fail@plt+0xb804>
   1f280:	str	r6, [r5]
   1f284:	add	sp, sp, #28
   1f288:	ldrd	r4, [sp]
   1f28c:	ldrd	r6, [sp, #8]
   1f290:	ldrd	r8, [sp, #16]
   1f294:	add	sp, sp, #24
   1f298:	pop	{pc}		; (ldr pc, [sp], #4)
   1f29c:	ldrdeq	r6, [r3], -r0
   1f2a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f2a4:	cmp	r3, #0
   1f2a8:	ldr	r4, [pc, #220]	; 1f38c <__assert_fail@plt+0xd444>
   1f2ac:	movne	r4, r3
   1f2b0:	strd	r6, [sp, #8]
   1f2b4:	mov	r6, r2
   1f2b8:	strd	r8, [sp, #16]
   1f2bc:	mov	r9, r0
   1f2c0:	strd	sl, [sp, #24]
   1f2c4:	mov	sl, r1
   1f2c8:	str	lr, [sp, #32]
   1f2cc:	sub	sp, sp, #44	; 0x2c
   1f2d0:	bl	11d74 <__errno_location@plt>
   1f2d4:	ldr	r5, [r4, #4]
   1f2d8:	mov	r7, r0
   1f2dc:	mov	r1, #0
   1f2e0:	add	r8, r4, #8
   1f2e4:	mov	r3, sl
   1f2e8:	ldr	ip, [r4, #44]	; 0x2c
   1f2ec:	mov	r2, r9
   1f2f0:	mov	r0, r1
   1f2f4:	ldr	lr, [r7]
   1f2f8:	cmp	r6, r1
   1f2fc:	orreq	r5, r5, #1
   1f300:	str	ip, [sp, #16]
   1f304:	ldr	ip, [r4, #40]	; 0x28
   1f308:	stmib	sp, {r5, r8, ip}
   1f30c:	ldr	ip, [r4]
   1f310:	str	lr, [sp, #28]
   1f314:	str	ip, [sp]
   1f318:	bl	1d74c <__assert_fail@plt+0xb804>
   1f31c:	add	r1, r0, #1
   1f320:	mov	fp, r0
   1f324:	mov	r0, r1
   1f328:	str	r1, [sp, #36]	; 0x24
   1f32c:	bl	20fc8 <__assert_fail@plt+0xf080>
   1f330:	ldr	ip, [r4, #44]	; 0x2c
   1f334:	mov	r3, sl
   1f338:	mov	r2, r9
   1f33c:	ldr	r1, [sp, #36]	; 0x24
   1f340:	str	ip, [sp, #16]
   1f344:	ldr	ip, [r4, #40]	; 0x28
   1f348:	str	r0, [sp, #32]
   1f34c:	stmib	sp, {r5, r8, ip}
   1f350:	ldr	ip, [r4]
   1f354:	str	ip, [sp]
   1f358:	bl	1d74c <__assert_fail@plt+0xb804>
   1f35c:	ldr	lr, [sp, #28]
   1f360:	cmp	r6, #0
   1f364:	ldr	r0, [sp, #32]
   1f368:	str	lr, [r7]
   1f36c:	strne	fp, [r6]
   1f370:	add	sp, sp, #44	; 0x2c
   1f374:	ldrd	r4, [sp]
   1f378:	ldrd	r6, [sp, #8]
   1f37c:	ldrd	r8, [sp, #16]
   1f380:	ldrd	sl, [sp, #24]
   1f384:	add	sp, sp, #32
   1f388:	pop	{pc}		; (ldr pc, [sp], #4)
   1f38c:	ldrdeq	r6, [r3], -r0
   1f390:	mov	r3, r2
   1f394:	mov	r2, #0
   1f398:	b	1f2a0 <__assert_fail@plt+0xd358>
   1f39c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f3a0:	movw	r5, #25204	; 0x6274
   1f3a4:	movt	r5, #3
   1f3a8:	ldr	r3, [r5, #4]
   1f3ac:	strd	r6, [sp, #8]
   1f3b0:	str	r8, [sp, #16]
   1f3b4:	str	lr, [sp, #20]
   1f3b8:	ldr	r7, [r5]
   1f3bc:	cmp	r3, #1
   1f3c0:	ble	1f3e4 <__assert_fail@plt+0xd49c>
   1f3c4:	mov	r4, #1
   1f3c8:	add	r6, r7, #4
   1f3cc:	ldr	r0, [r6, r4, lsl #3]
   1f3d0:	add	r4, r4, #1
   1f3d4:	bl	1b670 <__assert_fail@plt+0x9728>
   1f3d8:	ldr	r3, [r5, #4]
   1f3dc:	cmp	r3, r4
   1f3e0:	bgt	1f3cc <__assert_fail@plt+0xd484>
   1f3e4:	ldr	r0, [r7, #4]
   1f3e8:	movw	r4, #26832	; 0x68d0
   1f3ec:	movt	r4, #3
   1f3f0:	cmp	r0, r4
   1f3f4:	beq	1f408 <__assert_fail@plt+0xd4c0>
   1f3f8:	bl	1b670 <__assert_fail@plt+0x9728>
   1f3fc:	mov	r3, #256	; 0x100
   1f400:	str	r3, [r5, #8]
   1f404:	str	r4, [r5, #12]
   1f408:	ldr	r4, [pc, #44]	; 1f43c <__assert_fail@plt+0xd4f4>
   1f40c:	cmp	r7, r4
   1f410:	beq	1f420 <__assert_fail@plt+0xd4d8>
   1f414:	mov	r0, r7
   1f418:	bl	1b670 <__assert_fail@plt+0x9728>
   1f41c:	str	r4, [r5]
   1f420:	mov	r3, #1
   1f424:	ldrd	r6, [sp, #8]
   1f428:	str	r3, [r5, #4]
   1f42c:	ldrd	r4, [sp]
   1f430:	ldr	r8, [sp, #16]
   1f434:	add	sp, sp, #20
   1f438:	pop	{pc}		; (ldr pc, [sp], #4)
   1f43c:	andeq	r6, r3, ip, ror r2
   1f440:	ldr	r3, [pc, #4]	; 1f44c <__assert_fail@plt+0xd504>
   1f444:	mvn	r2, #0
   1f448:	b	1ef0c <__assert_fail@plt+0xcfc4>
   1f44c:	ldrdeq	r6, [r3], -r0
   1f450:	ldr	r3, [pc]	; 1f458 <__assert_fail@plt+0xd510>
   1f454:	b	1ef0c <__assert_fail@plt+0xcfc4>
   1f458:	ldrdeq	r6, [r3], -r0
   1f45c:	mov	r1, r0
   1f460:	ldr	r3, [pc, #8]	; 1f470 <__assert_fail@plt+0xd528>
   1f464:	mvn	r2, #0
   1f468:	mov	r0, #0
   1f46c:	b	1ef0c <__assert_fail@plt+0xcfc4>
   1f470:	ldrdeq	r6, [r3], -r0
   1f474:	mov	r2, r1
   1f478:	ldr	r3, [pc, #8]	; 1f488 <__assert_fail@plt+0xd540>
   1f47c:	mov	r1, r0
   1f480:	mov	r0, #0
   1f484:	b	1ef0c <__assert_fail@plt+0xcfc4>
   1f488:	ldrdeq	r6, [r3], -r0
   1f48c:	strd	r4, [sp, #-12]!
   1f490:	mov	r5, r2
   1f494:	mov	r4, r0
   1f498:	str	lr, [sp, #8]
   1f49c:	sub	sp, sp, #52	; 0x34
   1f4a0:	mov	r0, sp
   1f4a4:	bl	1d5a8 <__assert_fail@plt+0xb660>
   1f4a8:	mov	r3, sp
   1f4ac:	mov	r1, r5
   1f4b0:	mov	r0, r4
   1f4b4:	mvn	r2, #0
   1f4b8:	bl	1ef0c <__assert_fail@plt+0xcfc4>
   1f4bc:	add	sp, sp, #52	; 0x34
   1f4c0:	ldrd	r4, [sp]
   1f4c4:	add	sp, sp, #8
   1f4c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4cc:	strd	r4, [sp, #-16]!
   1f4d0:	mov	r5, r2
   1f4d4:	mov	r4, r0
   1f4d8:	str	r6, [sp, #8]
   1f4dc:	mov	r6, r3
   1f4e0:	str	lr, [sp, #12]
   1f4e4:	sub	sp, sp, #48	; 0x30
   1f4e8:	mov	r0, sp
   1f4ec:	bl	1d5a8 <__assert_fail@plt+0xb660>
   1f4f0:	mov	r3, sp
   1f4f4:	mov	r2, r6
   1f4f8:	mov	r1, r5
   1f4fc:	mov	r0, r4
   1f500:	bl	1ef0c <__assert_fail@plt+0xcfc4>
   1f504:	add	sp, sp, #48	; 0x30
   1f508:	ldrd	r4, [sp]
   1f50c:	ldr	r6, [sp, #8]
   1f510:	add	sp, sp, #12
   1f514:	pop	{pc}		; (ldr pc, [sp], #4)
   1f518:	mov	r2, r1
   1f51c:	mov	r1, r0
   1f520:	mov	r0, #0
   1f524:	b	1f48c <__assert_fail@plt+0xd544>
   1f528:	mov	r3, r2
   1f52c:	mov	r2, r1
   1f530:	mov	r1, r0
   1f534:	mov	r0, #0
   1f538:	b	1f4cc <__assert_fail@plt+0xd584>
   1f53c:	ldr	ip, [pc, #140]	; 1f5d0 <__assert_fail@plt+0xd688>
   1f540:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f544:	ldrd	r4, [ip]
   1f548:	strd	r6, [sp, #8]
   1f54c:	ldrd	r6, [ip, #8]
   1f550:	strd	r8, [sp, #16]
   1f554:	lsr	r9, r2, #5
   1f558:	str	lr, [sp, #24]
   1f55c:	sub	sp, sp, #52	; 0x34
   1f560:	and	lr, r2, #31
   1f564:	add	r8, sp, #8
   1f568:	mov	r2, r1
   1f56c:	strd	r4, [sp]
   1f570:	mov	r1, r0
   1f574:	mov	r3, sp
   1f578:	strd	r6, [sp, #8]
   1f57c:	mov	r0, #0
   1f580:	ldrd	r4, [ip, #16]
   1f584:	ldrd	r6, [ip, #24]
   1f588:	strd	r4, [sp, #16]
   1f58c:	ldrd	r4, [ip, #32]
   1f590:	strd	r6, [sp, #24]
   1f594:	ldrd	r6, [ip, #40]	; 0x28
   1f598:	strd	r4, [sp, #32]
   1f59c:	strd	r6, [sp, #40]	; 0x28
   1f5a0:	ldr	ip, [r8, r9, lsl #2]
   1f5a4:	mvn	r4, ip, lsr lr
   1f5a8:	and	r4, r4, #1
   1f5ac:	eor	lr, ip, r4, lsl lr
   1f5b0:	str	lr, [r8, r9, lsl #2]
   1f5b4:	bl	1ef0c <__assert_fail@plt+0xcfc4>
   1f5b8:	add	sp, sp, #52	; 0x34
   1f5bc:	ldrd	r4, [sp]
   1f5c0:	ldrd	r6, [sp, #8]
   1f5c4:	ldrd	r8, [sp, #16]
   1f5c8:	add	sp, sp, #24
   1f5cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5d0:	ldrdeq	r6, [r3], -r0
   1f5d4:	mov	r2, r1
   1f5d8:	mvn	r1, #0
   1f5dc:	b	1f53c <__assert_fail@plt+0xd5f4>
   1f5e0:	mov	r2, #58	; 0x3a
   1f5e4:	mvn	r1, #0
   1f5e8:	b	1f53c <__assert_fail@plt+0xd5f4>
   1f5ec:	mov	r2, #58	; 0x3a
   1f5f0:	b	1f53c <__assert_fail@plt+0xd5f4>
   1f5f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f5f8:	strd	r6, [sp, #8]
   1f5fc:	mov	r6, r0
   1f600:	mov	r7, r2
   1f604:	str	lr, [sp, #16]
   1f608:	sub	sp, sp, #100	; 0x64
   1f60c:	mov	r0, sp
   1f610:	bl	1d5a8 <__assert_fail@plt+0xb660>
   1f614:	ldrd	r4, [sp, #8]
   1f618:	mov	r1, r7
   1f61c:	mov	r0, r6
   1f620:	add	r3, sp, #48	; 0x30
   1f624:	mvn	r2, #0
   1f628:	ldrd	r6, [sp]
   1f62c:	strd	r4, [sp, #56]	; 0x38
   1f630:	ldrd	r4, [sp, #16]
   1f634:	strd	r6, [sp, #48]	; 0x30
   1f638:	ldrd	r6, [sp, #32]
   1f63c:	ldr	lr, [sp, #60]	; 0x3c
   1f640:	strd	r4, [sp, #64]	; 0x40
   1f644:	ldrd	r4, [sp, #24]
   1f648:	mvn	ip, lr
   1f64c:	and	ip, ip, #67108864	; 0x4000000
   1f650:	strd	r4, [sp, #72]	; 0x48
   1f654:	eor	ip, ip, lr
   1f658:	ldrd	r4, [sp, #40]	; 0x28
   1f65c:	str	ip, [sp, #60]	; 0x3c
   1f660:	strd	r6, [sp, #80]	; 0x50
   1f664:	strd	r4, [sp, #88]	; 0x58
   1f668:	bl	1ef0c <__assert_fail@plt+0xcfc4>
   1f66c:	add	sp, sp, #100	; 0x64
   1f670:	ldrd	r4, [sp]
   1f674:	ldrd	r6, [sp, #8]
   1f678:	add	sp, sp, #16
   1f67c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f680:	ldr	ip, [pc, #156]	; 1f724 <__assert_fail@plt+0xd7dc>
   1f684:	cmp	r2, #0
   1f688:	cmpne	r1, #0
   1f68c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f690:	strd	r6, [sp, #8]
   1f694:	mov	r6, r2
   1f698:	str	r8, [sp, #16]
   1f69c:	mov	r8, r3
   1f6a0:	strd	sl, [sp, #20]
   1f6a4:	ldrd	r4, [ip]
   1f6a8:	str	lr, [sp, #28]
   1f6ac:	sub	sp, sp, #48	; 0x30
   1f6b0:	mov	lr, #10
   1f6b4:	ldrd	r2, [ip, #8]
   1f6b8:	ldrd	sl, [ip, #16]
   1f6bc:	strd	r4, [sp]
   1f6c0:	ldrd	r4, [ip, #32]
   1f6c4:	str	lr, [sp]
   1f6c8:	strd	r2, [sp, #8]
   1f6cc:	strd	sl, [sp, #16]
   1f6d0:	ldrd	r2, [ip, #24]
   1f6d4:	ldrd	sl, [ip, #40]	; 0x28
   1f6d8:	strd	r2, [sp, #24]
   1f6dc:	strd	r4, [sp, #32]
   1f6e0:	strd	sl, [sp, #40]	; 0x28
   1f6e4:	beq	1f720 <__assert_fail@plt+0xd7d8>
   1f6e8:	ldr	r2, [sp, #80]	; 0x50
   1f6ec:	mov	r7, r1
   1f6f0:	mov	r3, sp
   1f6f4:	mov	r1, r8
   1f6f8:	str	r7, [sp, #40]	; 0x28
   1f6fc:	str	r6, [sp, #44]	; 0x2c
   1f700:	bl	1ef0c <__assert_fail@plt+0xcfc4>
   1f704:	add	sp, sp, #48	; 0x30
   1f708:	ldrd	r4, [sp]
   1f70c:	ldrd	r6, [sp, #8]
   1f710:	ldr	r8, [sp, #16]
   1f714:	ldrd	sl, [sp, #20]
   1f718:	add	sp, sp, #28
   1f71c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f720:	bl	11f24 <abort@plt>
   1f724:	ldrdeq	r6, [r3], -r0
   1f728:	mvn	ip, #0
   1f72c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f730:	sub	sp, sp, #12
   1f734:	str	ip, [sp]
   1f738:	bl	1f680 <__assert_fail@plt+0xd738>
   1f73c:	add	sp, sp, #12
   1f740:	pop	{pc}		; (ldr pc, [sp], #4)
   1f744:	mvn	ip, #0
   1f748:	push	{lr}		; (str lr, [sp, #-4]!)
   1f74c:	sub	sp, sp, #12
   1f750:	mov	r3, r2
   1f754:	mov	r2, r1
   1f758:	mov	r1, r0
   1f75c:	mov	r0, #0
   1f760:	str	ip, [sp]
   1f764:	bl	1f680 <__assert_fail@plt+0xd738>
   1f768:	add	sp, sp, #12
   1f76c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f770:	push	{lr}		; (str lr, [sp, #-4]!)
   1f774:	sub	sp, sp, #12
   1f778:	str	r3, [sp]
   1f77c:	mov	r3, r2
   1f780:	mov	r2, r1
   1f784:	mov	r1, r0
   1f788:	mov	r0, #0
   1f78c:	bl	1f680 <__assert_fail@plt+0xd738>
   1f790:	add	sp, sp, #12
   1f794:	pop	{pc}		; (ldr pc, [sp], #4)
   1f798:	ldr	r3, [pc]	; 1f7a0 <__assert_fail@plt+0xd858>
   1f79c:	b	1ef0c <__assert_fail@plt+0xcfc4>
   1f7a0:	andeq	r6, r3, r4, lsl #5
   1f7a4:	mov	r2, r1
   1f7a8:	ldr	r3, [pc, #8]	; 1f7b8 <__assert_fail@plt+0xd870>
   1f7ac:	mov	r1, r0
   1f7b0:	mov	r0, #0
   1f7b4:	b	1ef0c <__assert_fail@plt+0xcfc4>
   1f7b8:	andeq	r6, r3, r4, lsl #5
   1f7bc:	ldr	r3, [pc, #4]	; 1f7c8 <__assert_fail@plt+0xd880>
   1f7c0:	mvn	r2, #0
   1f7c4:	b	1ef0c <__assert_fail@plt+0xcfc4>
   1f7c8:	andeq	r6, r3, r4, lsl #5
   1f7cc:	mov	r1, r0
   1f7d0:	ldr	r3, [pc, #8]	; 1f7e0 <__assert_fail@plt+0xd898>
   1f7d4:	mvn	r2, #0
   1f7d8:	mov	r0, #0
   1f7dc:	b	1ef0c <__assert_fail@plt+0xcfc4>
   1f7e0:	andeq	r6, r3, r4, lsl #5
   1f7e4:	subs	r5, r0, #0
   1f7e8:	str	r7, [sp, #-8]!
   1f7ec:	str	lr, [sp, #4]
   1f7f0:	beq	1f844 <__assert_fail@plt+0xd8fc>
   1f7f4:	movw	r3, #25200	; 0x6270
   1f7f8:	movt	r3, #3
   1f7fc:	ldr	r6, [r3]
   1f800:	bl	11d74 <__errno_location@plt>
   1f804:	ldr	r4, [r0]
   1f808:	cmp	r4, #0
   1f80c:	beq	1f848 <__assert_fail@plt+0xd900>
   1f810:	movw	r1, #22032	; 0x5610
   1f814:	movt	r1, #2
   1f818:	mov	r2, #5
   1f81c:	mov	r0, #0
   1f820:	bl	11b58 <dcgettext@plt>
   1f824:	mov	r7, r0
   1f828:	mov	r0, r5
   1f82c:	bl	1f7cc <__assert_fail@plt+0xd884>
   1f830:	mov	r3, r0
   1f834:	mov	r2, r7
   1f838:	mov	r1, r4
   1f83c:	mov	r0, r6
   1f840:	bl	11c90 <error@plt>
   1f844:	bl	11f24 <abort@plt>
   1f848:	movw	r1, #22016	; 0x5600
   1f84c:	movt	r1, #2
   1f850:	mov	r2, #5
   1f854:	mov	r0, r4
   1f858:	bl	11b58 <dcgettext@plt>
   1f85c:	mov	r7, r0
   1f860:	b	1f828 <__assert_fail@plt+0xd8e0>
   1f864:	strd	r4, [sp, #-16]!
   1f868:	mvn	r2, #0
   1f86c:	mov	r4, r0
   1f870:	ldr	r5, [r0]
   1f874:	movw	r1, #2076	; 0x81c
   1f878:	str	r6, [sp, #8]
   1f87c:	str	lr, [sp, #12]
   1f880:	bl	11e4c <__explicit_bzero_chk@plt>
   1f884:	mov	r0, r4
   1f888:	bl	1b670 <__assert_fail@plt+0x9728>
   1f88c:	subs	r0, r5, #0
   1f890:	beq	1f8a8 <__assert_fail@plt+0xd960>
   1f894:	ldrd	r4, [sp]
   1f898:	ldr	r6, [sp, #8]
   1f89c:	ldr	lr, [sp, #12]
   1f8a0:	add	sp, sp, #16
   1f8a4:	b	1b0c4 <__assert_fail@plt+0x917c>
   1f8a8:	ldrd	r4, [sp]
   1f8ac:	ldr	r6, [sp, #8]
   1f8b0:	add	sp, sp, #12
   1f8b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f8bc:	strd	r6, [sp, #8]
   1f8c0:	subs	r6, r1, #0
   1f8c4:	strd	r8, [sp, #16]
   1f8c8:	str	sl, [sp, #24]
   1f8cc:	str	lr, [sp, #28]
   1f8d0:	beq	1f9e0 <__assert_fail@plt+0xda98>
   1f8d4:	cmp	r0, #0
   1f8d8:	mov	r5, r0
   1f8dc:	beq	1f948 <__assert_fail@plt+0xda00>
   1f8e0:	movw	r1, #22048	; 0x5620
   1f8e4:	movt	r1, #2
   1f8e8:	bl	225b0 <__assert_fail@plt+0x10668>
   1f8ec:	subs	r7, r0, #0
   1f8f0:	beq	1fa00 <__assert_fail@plt+0xdab8>
   1f8f4:	movw	r0, #2076	; 0x81c
   1f8f8:	bl	20f80 <__assert_fail@plt+0xf038>
   1f8fc:	mov	r4, r0
   1f900:	movw	r2, #63460	; 0xf7e4
   1f904:	movt	r2, #1
   1f908:	cmp	r6, #2048	; 0x800
   1f90c:	movcc	r3, r6
   1f910:	movcs	r3, #2048	; 0x800
   1f914:	str	r7, [r4]
   1f918:	mov	r0, r7
   1f91c:	add	r1, r4, #12
   1f920:	stmib	r4, {r2, r5}
   1f924:	mov	r2, #0
   1f928:	bl	11d8c <setvbuf@plt>
   1f92c:	mov	r0, r4
   1f930:	ldrd	r4, [sp]
   1f934:	ldrd	r6, [sp, #8]
   1f938:	ldrd	r8, [sp, #16]
   1f93c:	ldr	sl, [sp, #24]
   1f940:	add	sp, sp, #28
   1f944:	pop	{pc}		; (ldr pc, [sp], #4)
   1f948:	movw	r0, #2076	; 0x81c
   1f94c:	bl	20f80 <__assert_fail@plt+0xf038>
   1f950:	add	r9, r0, #16
   1f954:	movw	r3, #63460	; 0xf7e4
   1f958:	movt	r3, #1
   1f95c:	cmp	r6, #1024	; 0x400
   1f960:	addls	r6, r9, r6
   1f964:	addhi	r6, r9, #1024	; 0x400
   1f968:	str	r5, [r0]
   1f96c:	cmp	r9, r6
   1f970:	mov	r4, r0
   1f974:	stmib	r0, {r3, r5}
   1f978:	str	r5, [r0, #12]
   1f97c:	movcc	r5, r9
   1f980:	bcc	1f990 <__assert_fail@plt+0xda48>
   1f984:	b	1f9d4 <__assert_fail@plt+0xda8c>
   1f988:	cmp	r6, r5
   1f98c:	bls	1f9d4 <__assert_fail@plt+0xda8c>
   1f990:	sub	r1, r6, r5
   1f994:	mov	r0, r5
   1f998:	mov	r2, #0
   1f99c:	bl	11ef4 <getrandom@plt>
   1f9a0:	cmp	r0, #0
   1f9a4:	addge	r5, r5, r0
   1f9a8:	bge	1f988 <__assert_fail@plt+0xda40>
   1f9ac:	bl	11d74 <__errno_location@plt>
   1f9b0:	ldr	r8, [r0]
   1f9b4:	mov	r7, r0
   1f9b8:	cmp	r8, #4
   1f9bc:	beq	1f988 <__assert_fail@plt+0xda40>
   1f9c0:	mov	r0, r4
   1f9c4:	mov	r4, #0
   1f9c8:	bl	1f864 <__assert_fail@plt+0xd91c>
   1f9cc:	str	r8, [r7]
   1f9d0:	b	1f92c <__assert_fail@plt+0xd9e4>
   1f9d4:	mov	r0, r9
   1f9d8:	bl	1fda0 <__assert_fail@plt+0xde58>
   1f9dc:	b	1f92c <__assert_fail@plt+0xd9e4>
   1f9e0:	movw	r0, #2076	; 0x81c
   1f9e4:	bl	20f80 <__assert_fail@plt+0xf038>
   1f9e8:	movw	r3, #63460	; 0xf7e4
   1f9ec:	movt	r3, #1
   1f9f0:	str	r6, [r0]
   1f9f4:	mov	r4, r0
   1f9f8:	stmib	r0, {r3, r6}
   1f9fc:	b	1f92c <__assert_fail@plt+0xd9e4>
   1fa00:	mov	r4, r7
   1fa04:	b	1f92c <__assert_fail@plt+0xd9e4>
   1fa08:	str	r1, [r0, #4]
   1fa0c:	bx	lr
   1fa10:	str	r1, [r0, #8]
   1fa14:	bx	lr
   1fa18:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1fa1c:	mov	r5, r1
   1fa20:	mov	r4, r2
   1fa24:	strd	r6, [sp, #8]
   1fa28:	mov	r6, r0
   1fa2c:	ldr	r7, [r0]
   1fa30:	strd	r8, [sp, #16]
   1fa34:	str	sl, [sp, #24]
   1fa38:	str	lr, [sp, #28]
   1fa3c:	cmp	r7, #0
   1fa40:	beq	1faac <__assert_fail@plt+0xdb64>
   1fa44:	bl	11d74 <__errno_location@plt>
   1fa48:	mov	r8, r0
   1fa4c:	b	1fa70 <__assert_fail@plt+0xdb28>
   1fa50:	ldm	r6, {r1, r2}
   1fa54:	ldr	r0, [r6, #8]
   1fa58:	ldr	r1, [r1]
   1fa5c:	tst	r1, #32
   1fa60:	moveq	r3, #0
   1fa64:	str	r3, [r8]
   1fa68:	blx	r2
   1fa6c:	ldr	r7, [r6]
   1fa70:	mov	r3, r7
   1fa74:	mov	r2, r4
   1fa78:	mov	r0, r5
   1fa7c:	mov	r1, #1
   1fa80:	bl	11ee8 <fread_unlocked@plt>
   1fa84:	subs	r4, r4, r0
   1fa88:	add	r5, r5, r0
   1fa8c:	ldr	r3, [r8]
   1fa90:	bne	1fa50 <__assert_fail@plt+0xdb08>
   1fa94:	ldrd	r4, [sp]
   1fa98:	ldrd	r6, [sp, #8]
   1fa9c:	ldrd	r8, [sp, #16]
   1faa0:	ldr	sl, [sp, #24]
   1faa4:	add	sp, sp, #28
   1faa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1faac:	mov	r8, r0
   1fab0:	ldr	r7, [r8, #12]!
   1fab4:	cmp	r2, r7
   1fab8:	add	r8, r8, #1040	; 0x410
   1fabc:	addhi	r9, r0, #16
   1fac0:	bls	1fb58 <__assert_fail@plt+0xdc10>
   1fac4:	rsb	r1, r7, #1024	; 0x400
   1fac8:	mov	r2, r7
   1facc:	add	r1, r8, r1
   1fad0:	mov	r0, r5
   1fad4:	add	r5, r5, r7
   1fad8:	sub	r4, r4, r7
   1fadc:	bl	11ac8 <memcpy@plt>
   1fae0:	tst	r5, #3
   1fae4:	mov	r1, r8
   1fae8:	mov	r0, r9
   1faec:	mov	r7, #1024	; 0x400
   1faf0:	beq	1fb1c <__assert_fail@plt+0xdbd4>
   1faf4:	bl	1fb68 <__assert_fail@plt+0xdc20>
   1faf8:	cmp	r4, #1024	; 0x400
   1fafc:	bhi	1fac4 <__assert_fail@plt+0xdb7c>
   1fb00:	b	1fb30 <__assert_fail@plt+0xdbe8>
   1fb04:	mov	r1, r5
   1fb08:	mov	r0, r9
   1fb0c:	bl	1fb68 <__assert_fail@plt+0xdc20>
   1fb10:	subs	r4, r4, #1024	; 0x400
   1fb14:	add	r5, r5, #1024	; 0x400
   1fb18:	beq	1fb50 <__assert_fail@plt+0xdc08>
   1fb1c:	cmp	r4, #1024	; 0x400
   1fb20:	bcs	1fb04 <__assert_fail@plt+0xdbbc>
   1fb24:	mov	r0, r9
   1fb28:	mov	r1, r8
   1fb2c:	bl	1fb68 <__assert_fail@plt+0xdc20>
   1fb30:	mov	r7, #1024	; 0x400
   1fb34:	mov	r2, r4
   1fb38:	sub	r4, r7, r4
   1fb3c:	mov	r1, r8
   1fb40:	mov	r0, r5
   1fb44:	bl	11ac8 <memcpy@plt>
   1fb48:	str	r4, [r6, #12]
   1fb4c:	b	1fa94 <__assert_fail@plt+0xdb4c>
   1fb50:	str	r4, [r6, #12]
   1fb54:	b	1fa94 <__assert_fail@plt+0xdb4c>
   1fb58:	rsb	r3, r7, #1024	; 0x400
   1fb5c:	add	r8, r8, r3
   1fb60:	b	1fb34 <__assert_fail@plt+0xdbec>
   1fb64:	b	1f864 <__assert_fail@plt+0xd91c>
   1fb68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fb6c:	add	r2, r0, #16
   1fb70:	add	r5, r1, #16
   1fb74:	ldr	r3, [r0, #1024]	; 0x400
   1fb78:	str	lr, [sp, #20]
   1fb7c:	ldr	ip, [r0, #1028]	; 0x404
   1fb80:	strd	r6, [sp, #8]
   1fb84:	add	r6, r1, #528	; 0x210
   1fb88:	ldr	lr, [r0, #1032]	; 0x408
   1fb8c:	str	r8, [sp, #16]
   1fb90:	add	lr, lr, #1
   1fb94:	add	ip, ip, lr
   1fb98:	str	lr, [r0, #1032]	; 0x408
   1fb9c:	ldr	lr, [r2, #-16]
   1fba0:	eor	r3, r3, r3, lsl #13
   1fba4:	add	r5, r5, #16
   1fba8:	add	r2, r2, #16
   1fbac:	ldr	r4, [r2, #480]	; 0x1e0
   1fbb0:	and	r7, lr, #1020	; 0x3fc
   1fbb4:	ldr	r7, [r0, r7]
   1fbb8:	add	r3, r3, r4
   1fbbc:	eor	r4, r3, r3, lsr #6
   1fbc0:	add	r3, r3, r7
   1fbc4:	add	r3, r3, ip
   1fbc8:	lsr	ip, r3, #8
   1fbcc:	str	r3, [r2, #-32]	; 0xffffffe0
   1fbd0:	and	r3, ip, #1020	; 0x3fc
   1fbd4:	ldr	r7, [r0, r3]
   1fbd8:	add	r7, lr, r7
   1fbdc:	str	r7, [r5, #-32]	; 0xffffffe0
   1fbe0:	ldr	ip, [r2, #-28]	; 0xffffffe4
   1fbe4:	ldr	lr, [r2, #484]	; 0x1e4
   1fbe8:	and	r3, ip, #1020	; 0x3fc
   1fbec:	ldr	r8, [r0, r3]
   1fbf0:	add	lr, r4, lr
   1fbf4:	eor	r3, lr, lr, lsl #2
   1fbf8:	add	lr, lr, r8
   1fbfc:	add	lr, lr, r7
   1fc00:	lsr	r4, lr, #8
   1fc04:	str	lr, [r2, #-28]	; 0xffffffe4
   1fc08:	and	lr, r4, #1020	; 0x3fc
   1fc0c:	ldr	r4, [r0, lr]
   1fc10:	add	r4, ip, r4
   1fc14:	str	r4, [r5, #-28]	; 0xffffffe4
   1fc18:	ldr	lr, [r2, #-24]	; 0xffffffe8
   1fc1c:	ldr	ip, [r2, #488]	; 0x1e8
   1fc20:	and	r7, lr, #1020	; 0x3fc
   1fc24:	ldr	r8, [r0, r7]
   1fc28:	add	ip, r3, ip
   1fc2c:	eor	r7, ip, ip, lsr #16
   1fc30:	add	ip, ip, r8
   1fc34:	add	ip, ip, r4
   1fc38:	lsr	r3, ip, #8
   1fc3c:	str	ip, [r2, #-24]	; 0xffffffe8
   1fc40:	and	ip, r3, #1020	; 0x3fc
   1fc44:	ldr	r4, [r0, ip]
   1fc48:	add	r4, lr, r4
   1fc4c:	str	r4, [r5, #-24]	; 0xffffffe8
   1fc50:	ldr	ip, [r2, #-20]	; 0xffffffec
   1fc54:	ldr	r3, [r2, #492]	; 0x1ec
   1fc58:	and	lr, ip, #1020	; 0x3fc
   1fc5c:	ldr	lr, [r0, lr]
   1fc60:	add	r3, r7, r3
   1fc64:	add	lr, r3, lr
   1fc68:	add	lr, lr, r4
   1fc6c:	lsr	r4, lr, #8
   1fc70:	str	lr, [r2, #-20]	; 0xffffffec
   1fc74:	and	lr, r4, #1020	; 0x3fc
   1fc78:	ldr	lr, [r0, lr]
   1fc7c:	add	ip, ip, lr
   1fc80:	str	ip, [r5, #-20]	; 0xffffffec
   1fc84:	cmp	r5, r6
   1fc88:	bne	1fb9c <__assert_fail@plt+0xdc54>
   1fc8c:	add	r1, r1, #1040	; 0x410
   1fc90:	add	r2, r0, #528	; 0x210
   1fc94:	ldr	r4, [r2, #-528]	; 0xfffffdf0
   1fc98:	eor	r3, r3, r3, lsl #13
   1fc9c:	add	r5, r5, #16
   1fca0:	add	r2, r2, #16
   1fca4:	ldr	lr, [r2, #-32]	; 0xffffffe0
   1fca8:	add	r3, r3, r4
   1fcac:	eor	r4, r3, r3, lsr #6
   1fcb0:	and	r6, lr, #1020	; 0x3fc
   1fcb4:	ldr	r6, [r0, r6]
   1fcb8:	add	r3, r3, r6
   1fcbc:	add	r3, r3, ip
   1fcc0:	lsr	ip, r3, #8
   1fcc4:	str	r3, [r2, #-32]	; 0xffffffe0
   1fcc8:	and	r3, ip, #1020	; 0x3fc
   1fccc:	ldr	r6, [r0, r3]
   1fcd0:	add	r6, lr, r6
   1fcd4:	str	r6, [r5, #-32]	; 0xffffffe0
   1fcd8:	ldr	lr, [r2, #-540]	; 0xfffffde4
   1fcdc:	ldr	ip, [r2, #-28]	; 0xffffffe4
   1fce0:	add	lr, r4, lr
   1fce4:	and	r3, ip, #1020	; 0x3fc
   1fce8:	ldr	r7, [r0, r3]
   1fcec:	eor	r3, lr, lr, lsl #2
   1fcf0:	add	lr, lr, r7
   1fcf4:	add	lr, lr, r6
   1fcf8:	lsr	r4, lr, #8
   1fcfc:	str	lr, [r2, #-28]	; 0xffffffe4
   1fd00:	and	lr, r4, #1020	; 0x3fc
   1fd04:	ldr	r4, [r0, lr]
   1fd08:	add	r4, ip, r4
   1fd0c:	str	r4, [r5, #-28]	; 0xffffffe4
   1fd10:	ldr	ip, [r2, #-536]	; 0xfffffde8
   1fd14:	ldr	lr, [r2, #-24]	; 0xffffffe8
   1fd18:	add	ip, r3, ip
   1fd1c:	and	r6, lr, #1020	; 0x3fc
   1fd20:	ldr	r7, [r0, r6]
   1fd24:	eor	r6, ip, ip, lsr #16
   1fd28:	add	ip, ip, r7
   1fd2c:	add	ip, ip, r4
   1fd30:	lsr	r4, ip, #8
   1fd34:	str	ip, [r2, #-24]	; 0xffffffe8
   1fd38:	and	ip, r4, #1020	; 0x3fc
   1fd3c:	ldr	r4, [r0, ip]
   1fd40:	add	r4, lr, r4
   1fd44:	str	r4, [r5, #-24]	; 0xffffffe8
   1fd48:	ldr	r3, [r2, #-532]	; 0xfffffdec
   1fd4c:	ldr	ip, [r2, #-20]	; 0xffffffec
   1fd50:	add	r3, r6, r3
   1fd54:	and	lr, ip, #1020	; 0x3fc
   1fd58:	ldr	lr, [r0, lr]
   1fd5c:	add	lr, r3, lr
   1fd60:	add	lr, lr, r4
   1fd64:	lsr	r4, lr, #8
   1fd68:	str	lr, [r2, #-20]	; 0xffffffec
   1fd6c:	and	lr, r4, #1020	; 0x3fc
   1fd70:	ldr	lr, [r0, lr]
   1fd74:	add	ip, ip, lr
   1fd78:	str	ip, [r5, #-20]	; 0xffffffec
   1fd7c:	cmp	r1, r5
   1fd80:	bne	1fc94 <__assert_fail@plt+0xdd4c>
   1fd84:	ldrd	r4, [sp]
   1fd88:	str	r3, [r0, #1024]	; 0x400
   1fd8c:	ldrd	r6, [sp, #8]
   1fd90:	str	ip, [r0, #1028]	; 0x404
   1fd94:	ldr	r8, [sp, #16]
   1fd98:	add	sp, sp, #20
   1fd9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fda0:	mov	r1, #89	; 0x59
   1fda4:	movt	r1, #38361	; 0x95d9
   1fda8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fdac:	movw	r3, #57178	; 0xdf5a
   1fdb0:	movt	r3, #4967	; 0x1367
   1fdb4:	strd	r6, [sp, #8]
   1fdb8:	movw	r5, #59931	; 0xea1b
   1fdbc:	movt	r5, #50415	; 0xc4ef
   1fdc0:	strd	r8, [sp, #16]
   1fdc4:	movw	r4, #15433	; 0x3c49
   1fdc8:	movt	r4, #42266	; 0xa51a
   1fdcc:	strd	sl, [sp, #24]
   1fdd0:	movw	r6, #37145	; 0x9119
   1fdd4:	movt	r6, #12384	; 0x3060
   1fdd8:	str	lr, [sp, #32]
   1fddc:	movw	r8, #6872	; 0x1ad8
   1fde0:	movt	r8, #3906	; 0xf42
   1fde4:	sub	sp, sp, #12
   1fde8:	movw	lr, #19064	; 0x4a78
   1fdec:	movt	lr, #55594	; 0xd92a
   1fdf0:	movw	r7, #15947	; 0x3e4b
   1fdf4:	movt	r7, #49942	; 0xc316
   1fdf8:	mov	sl, r0
   1fdfc:	str	r0, [sp, #4]
   1fe00:	add	fp, r0, #1024	; 0x400
   1fe04:	mov	r9, r0
   1fe08:	ldr	r2, [r9]
   1fe0c:	ldr	r0, [r9, #8]
   1fe10:	ldr	ip, [r9, #12]
   1fe14:	add	r2, r3, r2
   1fe18:	ldr	r3, [r9, #4]
   1fe1c:	add	r7, r7, r0
   1fe20:	ldr	r0, [r9, #20]
   1fe24:	add	r1, r1, r3
   1fe28:	ldr	r3, [r9, #16]
   1fe2c:	eor	r2, r2, r1, lsl #11
   1fe30:	add	r1, r1, r7
   1fe34:	eor	r1, r1, r7, lsr #2
   1fe38:	add	ip, r2, ip
   1fe3c:	add	r8, ip, r8
   1fe40:	ldr	ip, [r9, #24]
   1fe44:	add	r7, r7, r8
   1fe48:	add	r3, r1, r3
   1fe4c:	eor	r7, r7, r8, lsl #8
   1fe50:	add	r3, r3, lr
   1fe54:	add	r8, r8, r3
   1fe58:	add	lr, r7, r0
   1fe5c:	eor	r8, r8, r3, lsr #16
   1fe60:	add	r4, lr, r4
   1fe64:	add	r3, r3, r4
   1fe68:	add	ip, r8, ip
   1fe6c:	eor	lr, r3, r4, lsl #10
   1fe70:	ldr	r3, [r9, #28]
   1fe74:	add	ip, ip, r5
   1fe78:	add	r4, r4, ip
   1fe7c:	eor	r4, r4, ip, lsr #4
   1fe80:	add	r2, r2, r4
   1fe84:	add	r3, lr, r3
   1fe88:	add	r6, r3, r6
   1fe8c:	add	ip, ip, r6
   1fe90:	eor	r5, ip, r6, lsl #8
   1fe94:	add	r6, r6, r2
   1fe98:	eor	r6, r6, r2, lsr #9
   1fe9c:	add	r1, r1, r5
   1fea0:	add	r3, r2, r1
   1fea4:	add	r7, r7, r6
   1fea8:	str	r3, [r9]
   1feac:	stmib	r9, {r1, r7, r8, lr}
   1feb0:	add	r9, r9, #32
   1feb4:	strd	r4, [r9, #-12]
   1feb8:	str	r6, [r9, #-4]
   1febc:	cmp	fp, r9
   1fec0:	bne	1fe08 <__assert_fail@plt+0xdec0>
   1fec4:	ldr	r0, [sp, #4]
   1fec8:	mov	r2, r1
   1fecc:	mov	ip, r8
   1fed0:	mov	r1, r3
   1fed4:	mov	r3, r7
   1fed8:	ldrd	r8, [sl]
   1fedc:	ldr	r7, [sl, #8]
   1fee0:	add	r2, r2, r9
   1fee4:	add	r1, r1, r8
   1fee8:	ldrd	r8, [sl, #12]
   1feec:	eor	r1, r1, r2, lsl #11
   1fef0:	add	r3, r3, r7
   1fef4:	ldr	r7, [sl, #20]
   1fef8:	add	r2, r2, r3
   1fefc:	eor	r2, r2, r3, lsr #2
   1ff00:	add	r8, r1, r8
   1ff04:	add	ip, r8, ip
   1ff08:	add	r9, r2, r9
   1ff0c:	ldr	r8, [sl, #24]
   1ff10:	add	r3, r3, ip
   1ff14:	add	r9, r9, lr
   1ff18:	eor	r3, r3, ip, lsl #8
   1ff1c:	add	ip, ip, r9
   1ff20:	eor	ip, ip, r9, lsr #16
   1ff24:	add	r7, r3, r7
   1ff28:	add	r7, r7, r4
   1ff2c:	ldr	r4, [sl, #28]
   1ff30:	add	r8, ip, r8
   1ff34:	add	r9, r9, r7
   1ff38:	add	r5, r8, r5
   1ff3c:	eor	lr, r9, r7, lsl #10
   1ff40:	add	r7, r7, r5
   1ff44:	add	r8, lr, r4
   1ff48:	eor	r4, r7, r5, lsr #4
   1ff4c:	str	lr, [sl, #16]
   1ff50:	add	r6, r8, r6
   1ff54:	add	r1, r1, r4
   1ff58:	add	r5, r5, r6
   1ff5c:	eor	r5, r5, r6, lsl #8
   1ff60:	add	r6, r6, r1
   1ff64:	eor	r6, r6, r1, lsr #9
   1ff68:	add	r2, r2, r5
   1ff6c:	add	r1, r1, r2
   1ff70:	add	r3, r3, r6
   1ff74:	stm	sl, {r1, r2, r3, ip}
   1ff78:	add	sl, sl, #32
   1ff7c:	strd	r4, [sl, #-12]
   1ff80:	str	r6, [sl, #-4]
   1ff84:	cmp	fp, sl
   1ff88:	bne	1fed8 <__assert_fail@plt+0xdf90>
   1ff8c:	mov	r3, #0
   1ff90:	str	r3, [r0, #1024]	; 0x400
   1ff94:	str	r3, [r0, #1028]	; 0x404
   1ff98:	str	r3, [r0, #1032]	; 0x408
   1ff9c:	add	sp, sp, #12
   1ffa0:	ldrd	r4, [sp]
   1ffa4:	ldrd	r6, [sp, #8]
   1ffa8:	ldrd	r8, [sp, #16]
   1ffac:	ldrd	sl, [sp, #24]
   1ffb0:	add	sp, sp, #32
   1ffb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ffb8:	strd	r4, [sp, #-16]!
   1ffbc:	mov	r4, r0
   1ffc0:	ldr	r3, [r0, #24]
   1ffc4:	str	r6, [sp, #8]
   1ffc8:	ldr	r6, [r0, #20]
   1ffcc:	str	lr, [sp, #12]
   1ffd0:	sub	r5, r3, r6
   1ffd4:	cmp	r3, r6
   1ffd8:	sub	r5, r5, #1
   1ffdc:	beq	2009c <__assert_fail@plt+0xe154>
   1ffe0:	ldr	r2, [r4, #16]
   1ffe4:	ldr	r0, [r4, #36]	; 0x24
   1ffe8:	ldr	r1, [r4, #28]
   1ffec:	add	r3, r3, r0
   1fff0:	bic	r3, r3, r0
   1fff4:	sub	r0, r3, r2
   1fff8:	sub	r2, r1, r2
   1fffc:	cmp	r0, r2
   20000:	str	r3, [r4, #24]
   20004:	movhi	r3, r1
   20008:	ldr	r2, [r4, #68]	; 0x44
   2000c:	strhi	r1, [r4, #24]
   20010:	str	r3, [r4, #20]
   20014:	ldr	r3, [r4, #72]	; 0x48
   20018:	sub	r3, r3, r2
   2001c:	cmp	r3, #3
   20020:	bls	20074 <__assert_fail@plt+0xe12c>
   20024:	str	r6, [r2]
   20028:	ldr	r2, [r4, #68]	; 0x44
   2002c:	ldr	r1, [r4, #112]	; 0x70
   20030:	ldr	r3, [r4, #116]	; 0x74
   20034:	add	r2, r2, #4
   20038:	str	r2, [r4, #68]	; 0x44
   2003c:	sub	r3, r3, r1
   20040:	cmp	r3, #3
   20044:	bls	20088 <__assert_fail@plt+0xe140>
   20048:	str	r5, [r1]
   2004c:	ldr	r2, [r4]
   20050:	ldr	r3, [r4, #112]	; 0x70
   20054:	ldr	r6, [sp, #8]
   20058:	add	r2, r2, #1
   2005c:	add	r3, r3, #4
   20060:	str	r2, [r4]
   20064:	str	r3, [r4, #112]	; 0x70
   20068:	ldrd	r4, [sp]
   2006c:	add	sp, sp, #12
   20070:	pop	{pc}		; (ldr pc, [sp], #4)
   20074:	mov	r1, #4
   20078:	add	r0, r4, #56	; 0x38
   2007c:	bl	22a94 <_obstack_newchunk@@Base>
   20080:	ldr	r2, [r4, #68]	; 0x44
   20084:	b	20024 <__assert_fail@plt+0xe0dc>
   20088:	mov	r1, #4
   2008c:	add	r0, r4, #100	; 0x64
   20090:	bl	22a94 <_obstack_newchunk@@Base>
   20094:	ldr	r1, [r4, #112]	; 0x70
   20098:	b	20048 <__assert_fail@plt+0xe100>
   2009c:	ldrb	r2, [r0, #52]	; 0x34
   200a0:	orr	r2, r2, #2
   200a4:	strb	r2, [r0, #52]	; 0x34
   200a8:	b	1ffe0 <__assert_fail@plt+0xe098>
   200ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   200b0:	mov	r4, #0
   200b4:	mov	r5, r0
   200b8:	strd	r6, [sp, #8]
   200bc:	movw	r6, #46704	; 0xb670
   200c0:	movt	r6, #1
   200c4:	str	lr, [sp, #16]
   200c8:	sub	sp, sp, #12
   200cc:	movw	r7, #8556	; 0x216c
   200d0:	movt	r7, #2
   200d4:	mov	r2, r4
   200d8:	mov	r1, r4
   200dc:	mov	r3, r7
   200e0:	str	r6, [sp]
   200e4:	add	r0, r0, #12
   200e8:	str	r4, [r5]
   200ec:	str	r4, [r5, #4]
   200f0:	str	r4, [r5, #8]
   200f4:	bl	22a2c <_obstack_begin@@Base>
   200f8:	mov	r3, r7
   200fc:	mov	r2, r4
   20100:	str	r6, [sp]
   20104:	mov	r1, r4
   20108:	add	r0, r5, #56	; 0x38
   2010c:	bl	22a2c <_obstack_begin@@Base>
   20110:	mov	r3, r7
   20114:	add	r0, r5, #100	; 0x64
   20118:	str	r6, [sp]
   2011c:	mov	r2, r4
   20120:	mov	r1, r4
   20124:	bl	22a2c <_obstack_begin@@Base>
   20128:	add	sp, sp, #12
   2012c:	ldrd	r4, [sp]
   20130:	ldrd	r6, [sp, #8]
   20134:	add	sp, sp, #16
   20138:	pop	{pc}		; (ldr pc, [sp], #4)
   2013c:	mov	r1, #0
   20140:	str	r4, [sp, #-8]!
   20144:	mov	r4, r0
   20148:	add	r0, r0, #12
   2014c:	str	lr, [sp, #4]
   20150:	bl	22bfc <_obstack_free@@Base>
   20154:	add	r0, r4, #56	; 0x38
   20158:	mov	r1, #0
   2015c:	bl	22bfc <_obstack_free@@Base>
   20160:	add	r0, r4, #100	; 0x64
   20164:	mov	r1, #0
   20168:	ldr	r4, [sp]
   2016c:	ldr	lr, [sp, #4]
   20170:	add	sp, sp, #8
   20174:	b	22bfc <_obstack_free@@Base>
   20178:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2017c:	mov	r4, r1
   20180:	strd	r6, [sp, #8]
   20184:	mov	r6, r0
   20188:	add	r7, r1, #12
   2018c:	str	r8, [sp, #16]
   20190:	str	lr, [sp, #20]
   20194:	b	201ac <__assert_fail@plt+0xe264>
   20198:	add	r2, r3, #1
   2019c:	cmp	r5, #0
   201a0:	str	r2, [r4, #24]
   201a4:	strb	r5, [r3]
   201a8:	beq	202e0 <__assert_fail@plt+0xe398>
   201ac:	mov	r0, r6
   201b0:	bl	11da4 <fgetc@plt>
   201b4:	cmn	r0, #1
   201b8:	mov	r5, r0
   201bc:	beq	201e4 <__assert_fail@plt+0xe29c>
   201c0:	ldr	r3, [r4, #24]
   201c4:	ldr	r2, [r4, #28]
   201c8:	cmp	r2, r3
   201cc:	bne	20198 <__assert_fail@plt+0xe250>
   201d0:	mov	r1, #1
   201d4:	mov	r0, r7
   201d8:	bl	22a94 <_obstack_newchunk@@Base>
   201dc:	ldr	r3, [r4, #24]
   201e0:	b	20198 <__assert_fail@plt+0xe250>
   201e4:	ldrd	r2, [r4, #20]
   201e8:	cmp	r3, r2
   201ec:	beq	20214 <__assert_fail@plt+0xe2cc>
   201f0:	ldr	r2, [r4, #28]
   201f4:	cmp	r3, r2
   201f8:	beq	20320 <__assert_fail@plt+0xe3d8>
   201fc:	add	r1, r3, #1
   20200:	mov	r2, #0
   20204:	mov	r0, r4
   20208:	str	r1, [r4, #24]
   2020c:	strb	r2, [r3]
   20210:	bl	1ffb8 <__assert_fail@plt+0xe070>
   20214:	ldrd	r2, [r4, #68]	; 0x44
   20218:	sub	r3, r3, r2
   2021c:	cmp	r3, #3
   20220:	bls	202ec <__assert_fail@plt+0xe3a4>
   20224:	mov	r3, #0
   20228:	str	r3, [r2]
   2022c:	ldr	r1, [r4, #64]	; 0x40
   20230:	ldr	r3, [r4, #68]	; 0x44
   20234:	add	r3, r3, #4
   20238:	cmp	r3, r1
   2023c:	str	r3, [r4, #68]	; 0x44
   20240:	beq	20310 <__assert_fail@plt+0xe3c8>
   20244:	ldr	r2, [r4, #60]	; 0x3c
   20248:	str	r1, [r4, #4]
   2024c:	ldr	r0, [r4, #80]	; 0x50
   20250:	ldr	ip, [r4, #72]	; 0x48
   20254:	add	r3, r3, r0
   20258:	bic	r3, r3, r0
   2025c:	sub	r0, r3, r2
   20260:	sub	r2, ip, r2
   20264:	cmp	r0, r2
   20268:	str	r3, [r4, #68]	; 0x44
   2026c:	movhi	r3, ip
   20270:	ldr	r2, [r4, #112]	; 0x70
   20274:	strhi	ip, [r4, #68]	; 0x44
   20278:	ldr	ip, [r4, #108]	; 0x6c
   2027c:	str	r3, [r4, #64]	; 0x40
   20280:	cmp	r2, ip
   20284:	beq	20300 <__assert_fail@plt+0xe3b8>
   20288:	ldr	r1, [r4, #104]	; 0x68
   2028c:	str	ip, [r4, #8]
   20290:	ldr	r0, [r4, #124]	; 0x7c
   20294:	ldr	lr, [r4, #116]	; 0x74
   20298:	add	r3, r2, r0
   2029c:	bic	r3, r3, r0
   202a0:	mov	r0, r6
   202a4:	sub	r2, r3, r1
   202a8:	sub	r1, lr, r1
   202ac:	cmp	r2, r1
   202b0:	str	r3, [r4, #112]	; 0x70
   202b4:	movhi	r3, lr
   202b8:	strhi	lr, [r4, #112]	; 0x70
   202bc:	str	r3, [r4, #108]	; 0x6c
   202c0:	bl	11ab0 <ferror@plt>
   202c4:	clz	r0, r0
   202c8:	ldrd	r4, [sp]
   202cc:	lsr	r0, r0, #5
   202d0:	ldrd	r6, [sp, #8]
   202d4:	ldr	r8, [sp, #16]
   202d8:	add	sp, sp, #20
   202dc:	pop	{pc}		; (ldr pc, [sp], #4)
   202e0:	mov	r0, r4
   202e4:	bl	1ffb8 <__assert_fail@plt+0xe070>
   202e8:	b	201ac <__assert_fail@plt+0xe264>
   202ec:	mov	r1, #4
   202f0:	add	r0, r4, #56	; 0x38
   202f4:	bl	22a94 <_obstack_newchunk@@Base>
   202f8:	ldr	r2, [r4, #68]	; 0x44
   202fc:	b	20224 <__assert_fail@plt+0xe2dc>
   20300:	ldrb	r3, [r4, #140]	; 0x8c
   20304:	orr	r3, r3, #2
   20308:	strb	r3, [r4, #140]	; 0x8c
   2030c:	b	20288 <__assert_fail@plt+0xe340>
   20310:	ldrb	r2, [r4, #96]	; 0x60
   20314:	orr	r2, r2, #2
   20318:	strb	r2, [r4, #96]	; 0x60
   2031c:	b	20244 <__assert_fail@plt+0xe2fc>
   20320:	mov	r1, #1
   20324:	add	r0, r4, #12
   20328:	bl	22a94 <_obstack_newchunk@@Base>
   2032c:	ldr	r3, [r4, #24]
   20330:	b	201fc <__assert_fail@plt+0xe2b4>
   20334:	strd	r4, [sp, #-16]!
   20338:	mov	r5, r1
   2033c:	mov	r1, #0
   20340:	mov	r4, r2
   20344:	str	r6, [sp, #8]
   20348:	str	lr, [sp, #12]
   2034c:	bl	11e28 <setlocale@plt>
   20350:	subs	r6, r0, #0
   20354:	beq	203d4 <__assert_fail@plt+0xe48c>
   20358:	bl	11d50 <strlen@plt>
   2035c:	cmp	r4, r0
   20360:	bhi	20380 <__assert_fail@plt+0xe438>
   20364:	cmp	r4, #0
   20368:	moveq	r0, #34	; 0x22
   2036c:	bne	203a4 <__assert_fail@plt+0xe45c>
   20370:	ldrd	r4, [sp]
   20374:	ldr	r6, [sp, #8]
   20378:	add	sp, sp, #12
   2037c:	pop	{pc}		; (ldr pc, [sp], #4)
   20380:	add	r2, r0, #1
   20384:	mov	r1, r6
   20388:	mov	r0, r5
   2038c:	bl	11ac8 <memcpy@plt>
   20390:	ldrd	r4, [sp]
   20394:	mov	r0, #0
   20398:	ldr	r6, [sp, #8]
   2039c:	add	sp, sp, #12
   203a0:	pop	{pc}		; (ldr pc, [sp], #4)
   203a4:	sub	r4, r4, #1
   203a8:	mov	r1, r6
   203ac:	mov	r2, r4
   203b0:	mov	r0, r5
   203b4:	bl	11ac8 <memcpy@plt>
   203b8:	mov	r3, #0
   203bc:	mov	r0, #34	; 0x22
   203c0:	strb	r3, [r5, r4]
   203c4:	ldrd	r4, [sp]
   203c8:	ldr	r6, [sp, #8]
   203cc:	add	sp, sp, #12
   203d0:	pop	{pc}		; (ldr pc, [sp], #4)
   203d4:	cmp	r4, #0
   203d8:	mov	r0, #22
   203dc:	strbne	r6, [r5]
   203e0:	ldrd	r4, [sp]
   203e4:	ldr	r6, [sp, #8]
   203e8:	add	sp, sp, #12
   203ec:	pop	{pc}		; (ldr pc, [sp], #4)
   203f0:	mov	r1, #0
   203f4:	b	11e28 <setlocale@plt>
   203f8:	str	r4, [sp, #-8]!
   203fc:	str	lr, [sp, #4]
   20400:	bl	11cc0 <mkstemp64@plt>
   20404:	ldr	r4, [sp]
   20408:	ldr	lr, [sp, #4]
   2040c:	add	sp, sp, #8
   20410:	b	20990 <__assert_fail@plt+0xea48>
   20414:	str	r4, [sp, #-8]!
   20418:	mov	r4, r1
   2041c:	str	lr, [sp, #4]
   20420:	bl	11c0c <mkostemp64@plt>
   20424:	mov	r1, r4
   20428:	ldr	r4, [sp]
   2042c:	ldr	lr, [sp, #4]
   20430:	add	sp, sp, #8
   20434:	b	22540 <__assert_fail@plt+0x105f8>
   20438:	strd	r4, [sp, #-12]!
   2043c:	str	lr, [sp, #8]
   20440:	ldrb	lr, [r0]
   20444:	ldrb	ip, [r1]
   20448:	cmp	lr, #45	; 0x2d
   2044c:	beq	20494 <__assert_fail@plt+0xe54c>
   20450:	cmp	ip, #45	; 0x2d
   20454:	bne	20508 <__assert_fail@plt+0xe5c0>
   20458:	ldrb	r5, [r1, #1]!
   2045c:	cmp	r5, #48	; 0x30
   20460:	beq	20458 <__assert_fail@plt+0xe510>
   20464:	cmp	r3, r5
   20468:	beq	20458 <__assert_fail@plt+0xe510>
   2046c:	cmp	r2, r5
   20470:	beq	205dc <__assert_fail@plt+0xe694>
   20474:	sub	r5, r5, #48	; 0x30
   20478:	cmp	r5, #9
   2047c:	bhi	205fc <__assert_fail@plt+0xe6b4>
   20480:	mov	lr, #1
   20484:	ldrd	r4, [sp]
   20488:	add	sp, sp, #8
   2048c:	mov	r0, lr
   20490:	pop	{pc}		; (ldr pc, [sp], #4)
   20494:	ldrb	lr, [r0, #1]!
   20498:	cmp	lr, #48	; 0x30
   2049c:	beq	20494 <__assert_fail@plt+0xe54c>
   204a0:	cmp	r3, lr
   204a4:	beq	20494 <__assert_fail@plt+0xe54c>
   204a8:	cmp	ip, #45	; 0x2d
   204ac:	beq	20570 <__assert_fail@plt+0xe628>
   204b0:	cmp	r2, lr
   204b4:	beq	205c0 <__assert_fail@plt+0xe678>
   204b8:	sub	lr, lr, #48	; 0x30
   204bc:	cmp	lr, #9
   204c0:	bhi	204cc <__assert_fail@plt+0xe584>
   204c4:	b	206c8 <__assert_fail@plt+0xe780>
   204c8:	ldrb	ip, [r1, #1]!
   204cc:	cmp	ip, #48	; 0x30
   204d0:	beq	204c8 <__assert_fail@plt+0xe580>
   204d4:	cmp	r3, ip
   204d8:	beq	204c8 <__assert_fail@plt+0xe580>
   204dc:	cmp	r2, ip
   204e0:	beq	20634 <__assert_fail@plt+0xe6ec>
   204e4:	sub	ip, ip, #48	; 0x30
   204e8:	cmp	ip, #9
   204ec:	movhi	lr, #0
   204f0:	mvnls	lr, #0
   204f4:	ldrd	r4, [sp]
   204f8:	add	sp, sp, #8
   204fc:	mov	r0, lr
   20500:	pop	{pc}		; (ldr pc, [sp], #4)
   20504:	ldrb	lr, [r0, #1]!
   20508:	cmp	lr, #48	; 0x30
   2050c:	beq	20504 <__assert_fail@plt+0xe5bc>
   20510:	cmp	r3, lr
   20514:	beq	20504 <__assert_fail@plt+0xe5bc>
   20518:	cmp	ip, #48	; 0x30
   2051c:	bne	2052c <__assert_fail@plt+0xe5e4>
   20520:	ldrb	ip, [r1, #1]!
   20524:	cmp	ip, #48	; 0x30
   20528:	beq	20520 <__assert_fail@plt+0xe5d8>
   2052c:	cmp	r3, ip
   20530:	beq	20520 <__assert_fail@plt+0xe5d8>
   20534:	cmp	lr, ip
   20538:	bne	20650 <__assert_fail@plt+0xe708>
   2053c:	sub	r4, lr, #48	; 0x30
   20540:	cmp	r4, #9
   20544:	bhi	20650 <__assert_fail@plt+0xe708>
   20548:	ldrb	lr, [r0, #1]!
   2054c:	cmp	r3, lr
   20550:	beq	20548 <__assert_fail@plt+0xe600>
   20554:	ldrb	ip, [r1, #1]!
   20558:	cmp	r3, ip
   2055c:	bne	20534 <__assert_fail@plt+0xe5ec>
   20560:	ldrb	ip, [r1, #1]!
   20564:	cmp	r3, ip
   20568:	beq	20554 <__assert_fail@plt+0xe60c>
   2056c:	b	20534 <__assert_fail@plt+0xe5ec>
   20570:	ldrb	r4, [r1, #1]!
   20574:	cmp	r4, #48	; 0x30
   20578:	beq	20570 <__assert_fail@plt+0xe628>
   2057c:	cmp	r3, r4
   20580:	beq	20570 <__assert_fail@plt+0xe628>
   20584:	cmp	lr, r4
   20588:	bne	206dc <__assert_fail@plt+0xe794>
   2058c:	sub	ip, lr, #48	; 0x30
   20590:	cmp	ip, #9
   20594:	bhi	206dc <__assert_fail@plt+0xe794>
   20598:	ldrb	lr, [r0, #1]!
   2059c:	cmp	r3, lr
   205a0:	beq	20598 <__assert_fail@plt+0xe650>
   205a4:	ldrb	r4, [r1, #1]!
   205a8:	cmp	r3, r4
   205ac:	bne	20584 <__assert_fail@plt+0xe63c>
   205b0:	ldrb	r4, [r1, #1]!
   205b4:	cmp	r3, r4
   205b8:	beq	205a4 <__assert_fail@plt+0xe65c>
   205bc:	b	20584 <__assert_fail@plt+0xe63c>
   205c0:	ldrb	lr, [r0, #1]!
   205c4:	cmp	lr, #48	; 0x30
   205c8:	bne	204b8 <__assert_fail@plt+0xe570>
   205cc:	ldrb	lr, [r0, #1]!
   205d0:	cmp	lr, #48	; 0x30
   205d4:	beq	205c0 <__assert_fail@plt+0xe678>
   205d8:	b	204b8 <__assert_fail@plt+0xe570>
   205dc:	ldrb	r5, [r1, #1]!
   205e0:	cmp	r5, #48	; 0x30
   205e4:	bne	20474 <__assert_fail@plt+0xe52c>
   205e8:	ldrb	r5, [r1, #1]!
   205ec:	cmp	r5, #48	; 0x30
   205f0:	beq	205dc <__assert_fail@plt+0xe694>
   205f4:	b	20474 <__assert_fail@plt+0xe52c>
   205f8:	ldrb	lr, [r0, #1]!
   205fc:	cmp	lr, #48	; 0x30
   20600:	beq	205f8 <__assert_fail@plt+0xe6b0>
   20604:	cmp	r3, lr
   20608:	beq	205f8 <__assert_fail@plt+0xe6b0>
   2060c:	cmp	r2, lr
   20610:	beq	20768 <__assert_fail@plt+0xe820>
   20614:	sub	lr, lr, #48	; 0x30
   20618:	ldrd	r4, [sp]
   2061c:	add	sp, sp, #8
   20620:	cmp	lr, #9
   20624:	movhi	lr, #0
   20628:	movls	lr, #1
   2062c:	mov	r0, lr
   20630:	pop	{pc}		; (ldr pc, [sp], #4)
   20634:	ldrb	ip, [r1, #1]!
   20638:	cmp	ip, #48	; 0x30
   2063c:	bne	204e4 <__assert_fail@plt+0xe59c>
   20640:	ldrb	ip, [r1, #1]!
   20644:	cmp	ip, #48	; 0x30
   20648:	beq	20634 <__assert_fail@plt+0xe6ec>
   2064c:	b	204e4 <__assert_fail@plt+0xe59c>
   20650:	cmp	r2, lr
   20654:	beq	20784 <__assert_fail@plt+0xe83c>
   20658:	cmp	r2, ip
   2065c:	sub	r4, lr, #48	; 0x30
   20660:	beq	207b4 <__assert_fail@plt+0xe86c>
   20664:	cmp	r4, #9
   20668:	sub	lr, lr, ip
   2066c:	sub	ip, ip, #48	; 0x30
   20670:	bhi	20828 <__assert_fail@plt+0xe8e0>
   20674:	mov	r4, #0
   20678:	ldrb	r2, [r0, #1]!
   2067c:	cmp	r3, r2
   20680:	beq	20678 <__assert_fail@plt+0xe730>
   20684:	sub	r2, r2, #48	; 0x30
   20688:	add	r4, r4, #1
   2068c:	cmp	r2, #9
   20690:	bls	20678 <__assert_fail@plt+0xe730>
   20694:	cmp	ip, #9
   20698:	bhi	2084c <__assert_fail@plt+0xe904>
   2069c:	mov	r0, #0
   206a0:	ldrb	r2, [r1, #1]!
   206a4:	cmp	r3, r2
   206a8:	beq	206a0 <__assert_fail@plt+0xe758>
   206ac:	sub	r2, r2, #48	; 0x30
   206b0:	add	r0, r0, #1
   206b4:	cmp	r2, #9
   206b8:	bls	206a0 <__assert_fail@plt+0xe758>
   206bc:	cmp	r0, r4
   206c0:	beq	20750 <__assert_fail@plt+0xe808>
   206c4:	bls	20480 <__assert_fail@plt+0xe538>
   206c8:	mvn	lr, #0
   206cc:	ldrd	r4, [sp]
   206d0:	add	sp, sp, #8
   206d4:	mov	r0, lr
   206d8:	pop	{pc}		; (ldr pc, [sp], #4)
   206dc:	cmp	r2, lr
   206e0:	beq	207d0 <__assert_fail@plt+0xe888>
   206e4:	cmp	r2, r4
   206e8:	sub	ip, lr, #48	; 0x30
   206ec:	beq	20838 <__assert_fail@plt+0xe8f0>
   206f0:	cmp	ip, #9
   206f4:	sub	lr, r4, lr
   206f8:	sub	r4, r4, #48	; 0x30
   206fc:	bhi	208e8 <__assert_fail@plt+0xe9a0>
   20700:	mov	ip, #0
   20704:	ldrb	r2, [r0, #1]!
   20708:	cmp	r3, r2
   2070c:	beq	20704 <__assert_fail@plt+0xe7bc>
   20710:	sub	r2, r2, #48	; 0x30
   20714:	add	ip, ip, #1
   20718:	cmp	r2, #9
   2071c:	bls	20704 <__assert_fail@plt+0xe7bc>
   20720:	cmp	r4, #9
   20724:	bhi	208f8 <__assert_fail@plt+0xe9b0>
   20728:	mov	r0, #0
   2072c:	ldrb	r2, [r1, #1]!
   20730:	cmp	r3, r2
   20734:	beq	2072c <__assert_fail@plt+0xe7e4>
   20738:	sub	r2, r2, #48	; 0x30
   2073c:	add	r0, r0, #1
   20740:	cmp	r2, #9
   20744:	bls	2072c <__assert_fail@plt+0xe7e4>
   20748:	cmp	r0, ip
   2074c:	bne	207c8 <__assert_fail@plt+0xe880>
   20750:	cmp	r0, #0
   20754:	ldrd	r4, [sp]
   20758:	add	sp, sp, #8
   2075c:	moveq	lr, #0
   20760:	mov	r0, lr
   20764:	pop	{pc}		; (ldr pc, [sp], #4)
   20768:	ldrb	lr, [r0, #1]!
   2076c:	cmp	lr, #48	; 0x30
   20770:	bne	20614 <__assert_fail@plt+0xe6cc>
   20774:	ldrb	lr, [r0, #1]!
   20778:	cmp	lr, #48	; 0x30
   2077c:	beq	20768 <__assert_fail@plt+0xe820>
   20780:	b	20614 <__assert_fail@plt+0xe6cc>
   20784:	sub	r4, ip, #48	; 0x30
   20788:	cmp	r4, #9
   2078c:	bls	20658 <__assert_fail@plt+0xe710>
   20790:	ldrb	r3, [r0]
   20794:	uxtb	ip, r2
   20798:	ldrb	r2, [r1]
   2079c:	cmp	r3, ip
   207a0:	beq	20858 <__assert_fail@plt+0xe910>
   207a4:	cmp	ip, r2
   207a8:	beq	208bc <__assert_fail@plt+0xe974>
   207ac:	mov	lr, #0
   207b0:	b	204f4 <__assert_fail@plt+0xe5ac>
   207b4:	cmp	r4, #9
   207b8:	subls	lr, lr, r2
   207bc:	subls	ip, r2, #48	; 0x30
   207c0:	bls	20674 <__assert_fail@plt+0xe72c>
   207c4:	b	20790 <__assert_fail@plt+0xe848>
   207c8:	bhi	20480 <__assert_fail@plt+0xe538>
   207cc:	b	206c8 <__assert_fail@plt+0xe780>
   207d0:	sub	ip, r4, #48	; 0x30
   207d4:	cmp	ip, #9
   207d8:	bls	206e4 <__assert_fail@plt+0xe79c>
   207dc:	ldrb	r3, [r1]
   207e0:	uxtb	ip, r2
   207e4:	ldrb	r2, [r0]
   207e8:	cmp	r3, ip
   207ec:	beq	20908 <__assert_fail@plt+0xe9c0>
   207f0:	cmp	ip, r2
   207f4:	addeq	r0, r0, #1
   207f8:	bne	207ac <__assert_fail@plt+0xe864>
   207fc:	ldrb	r3, [r0]
   20800:	cmp	r3, #48	; 0x30
   20804:	bne	20814 <__assert_fail@plt+0xe8cc>
   20808:	ldrb	r3, [r0, #1]!
   2080c:	cmp	r3, #48	; 0x30
   20810:	beq	20808 <__assert_fail@plt+0xe8c0>
   20814:	sub	lr, r3, #48	; 0x30
   20818:	cmp	lr, #9
   2081c:	movhi	lr, #0
   20820:	mvnls	lr, #0
   20824:	b	204f4 <__assert_fail@plt+0xe5ac>
   20828:	cmp	ip, #9
   2082c:	movls	r4, #0
   20830:	bls	2069c <__assert_fail@plt+0xe754>
   20834:	b	207ac <__assert_fail@plt+0xe864>
   20838:	cmp	ip, #9
   2083c:	subls	lr, r2, lr
   20840:	subls	r4, r2, #48	; 0x30
   20844:	bls	20700 <__assert_fail@plt+0xe7b8>
   20848:	b	207dc <__assert_fail@plt+0xe894>
   2084c:	adds	lr, r4, #0
   20850:	movne	lr, #1
   20854:	b	204f4 <__assert_fail@plt+0xe5ac>
   20858:	cmp	r3, r2
   2085c:	ldrb	lr, [r0, #1]
   20860:	addeq	r3, r0, #1
   20864:	beq	2088c <__assert_fail@plt+0xe944>
   20868:	add	r0, r0, #1
   2086c:	b	20874 <__assert_fail@plt+0xe92c>
   20870:	ldrb	lr, [r0, #1]!
   20874:	cmp	lr, #48	; 0x30
   20878:	beq	20870 <__assert_fail@plt+0xe928>
   2087c:	b	20614 <__assert_fail@plt+0xe6cc>
   20880:	cmp	r2, #9
   20884:	bhi	207ac <__assert_fail@plt+0xe864>
   20888:	ldrb	lr, [r3, #1]!
   2088c:	mov	r0, r3
   20890:	sub	r2, lr, #48	; 0x30
   20894:	ldrb	ip, [r1, #1]!
   20898:	cmp	ip, lr
   2089c:	beq	20880 <__assert_fail@plt+0xe938>
   208a0:	cmp	r2, #9
   208a4:	sub	r3, ip, #48	; 0x30
   208a8:	bhi	20974 <__assert_fail@plt+0xea2c>
   208ac:	cmp	r3, #9
   208b0:	bhi	20874 <__assert_fail@plt+0xe92c>
   208b4:	sub	lr, lr, ip
   208b8:	b	204f4 <__assert_fail@plt+0xe5ac>
   208bc:	add	r3, r1, #1
   208c0:	ldrb	ip, [r1, #1]
   208c4:	b	208cc <__assert_fail@plt+0xe984>
   208c8:	ldrb	ip, [r3, #1]!
   208cc:	cmp	ip, #48	; 0x30
   208d0:	beq	208c8 <__assert_fail@plt+0xe980>
   208d4:	sub	lr, ip, #48	; 0x30
   208d8:	cmp	lr, #9
   208dc:	movhi	lr, #0
   208e0:	mvnls	lr, #0
   208e4:	b	204f4 <__assert_fail@plt+0xe5ac>
   208e8:	cmp	r4, #9
   208ec:	movls	ip, #0
   208f0:	bls	20728 <__assert_fail@plt+0xe7e0>
   208f4:	b	207ac <__assert_fail@plt+0xe864>
   208f8:	adds	lr, ip, #0
   208fc:	movne	lr, #1
   20900:	rsb	lr, lr, #0
   20904:	b	204f4 <__assert_fail@plt+0xe5ac>
   20908:	cmp	r3, r2
   2090c:	addne	r1, r1, #1
   20910:	beq	20948 <__assert_fail@plt+0xea00>
   20914:	ldrb	r3, [r1]
   20918:	cmp	r3, #48	; 0x30
   2091c:	bne	2092c <__assert_fail@plt+0xe9e4>
   20920:	ldrb	r3, [r1, #1]!
   20924:	cmp	r3, #48	; 0x30
   20928:	beq	20920 <__assert_fail@plt+0xe9d8>
   2092c:	sub	lr, r3, #48	; 0x30
   20930:	cmp	lr, #9
   20934:	movhi	lr, #0
   20938:	movls	lr, #1
   2093c:	b	204f4 <__assert_fail@plt+0xe5ac>
   20940:	cmp	r3, #9
   20944:	bhi	207ac <__assert_fail@plt+0xe864>
   20948:	ldrb	lr, [r1, #1]!
   2094c:	ldrb	ip, [r0, #1]!
   20950:	sub	r3, lr, #48	; 0x30
   20954:	cmp	lr, ip
   20958:	beq	20940 <__assert_fail@plt+0xe9f8>
   2095c:	cmp	r3, #9
   20960:	sub	r3, ip, #48	; 0x30
   20964:	bhi	20984 <__assert_fail@plt+0xea3c>
   20968:	cmp	r3, #9
   2096c:	bhi	20914 <__assert_fail@plt+0xe9cc>
   20970:	b	208b4 <__assert_fail@plt+0xe96c>
   20974:	cmp	r3, #9
   20978:	movls	r3, r1
   2097c:	bhi	207ac <__assert_fail@plt+0xe864>
   20980:	b	208cc <__assert_fail@plt+0xe984>
   20984:	cmp	r3, #9
   20988:	bhi	207ac <__assert_fail@plt+0xe864>
   2098c:	b	207fc <__assert_fail@plt+0xe8b4>
   20990:	cmp	r0, #2
   20994:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20998:	mov	r4, r0
   2099c:	strd	r6, [sp, #8]
   209a0:	str	r8, [sp, #16]
   209a4:	str	lr, [sp, #20]
   209a8:	bls	209c4 <__assert_fail@plt+0xea7c>
   209ac:	mov	r0, r4
   209b0:	ldrd	r4, [sp]
   209b4:	ldrd	r6, [sp, #8]
   209b8:	ldr	r8, [sp, #16]
   209bc:	add	sp, sp, #20
   209c0:	pop	{pc}		; (ldr pc, [sp], #4)
   209c4:	bl	22cf8 <_obstack_memory_used@@Base+0x6c>
   209c8:	mov	r7, r0
   209cc:	bl	11d74 <__errno_location@plt>
   209d0:	mov	r5, r0
   209d4:	mov	r0, r4
   209d8:	ldr	r6, [r5]
   209dc:	mov	r4, r7
   209e0:	bl	11f30 <close@plt>
   209e4:	str	r6, [r5]
   209e8:	b	209ac <__assert_fail@plt+0xea64>
   209ec:	cmp	r1, #0
   209f0:	strd	r4, [sp, #-16]!
   209f4:	mov	ip, r3
   209f8:	str	r6, [sp, #8]
   209fc:	mov	r4, r0
   20a00:	str	lr, [sp, #12]
   20a04:	sub	sp, sp, #32
   20a08:	ldr	r5, [sp, #48]	; 0x30
   20a0c:	ldr	r6, [sp, #52]	; 0x34
   20a10:	beq	20b54 <__assert_fail@plt+0xec0c>
   20a14:	mov	r3, r1
   20a18:	mov	r1, #1
   20a1c:	stm	sp, {r2, ip}
   20a20:	movw	r2, #22052	; 0x5624
   20a24:	movt	r2, #2
   20a28:	bl	11dd4 <__fprintf_chk@plt>
   20a2c:	mov	r2, #5
   20a30:	movw	r1, #22072	; 0x5638
   20a34:	movt	r1, #2
   20a38:	mov	r0, #0
   20a3c:	bl	11b58 <dcgettext@plt>
   20a40:	movw	ip, #2022	; 0x7e6
   20a44:	mov	r3, r0
   20a48:	mov	r1, #1
   20a4c:	movw	r2, #22800	; 0x5910
   20a50:	movt	r2, #2
   20a54:	mov	r0, r4
   20a58:	str	ip, [sp]
   20a5c:	bl	11dd4 <__fprintf_chk@plt>
   20a60:	mov	r1, r4
   20a64:	mov	r0, #10
   20a68:	bl	11b4c <fputc_unlocked@plt>
   20a6c:	mov	r2, #5
   20a70:	movw	r1, #22076	; 0x563c
   20a74:	movt	r1, #2
   20a78:	mov	r0, #0
   20a7c:	bl	11b58 <dcgettext@plt>
   20a80:	mov	r2, r0
   20a84:	mov	r1, #1
   20a88:	movw	r3, #22248	; 0x56e8
   20a8c:	movt	r3, #2
   20a90:	mov	r0, r4
   20a94:	bl	11dd4 <__fprintf_chk@plt>
   20a98:	mov	r1, r4
   20a9c:	mov	r0, #10
   20aa0:	bl	11b4c <fputc_unlocked@plt>
   20aa4:	cmp	r6, #9
   20aa8:	ldrls	pc, [pc, r6, lsl #2]
   20aac:	b	20dc0 <__assert_fail@plt+0xee78>
   20ab0:	andeq	r0, r2, r0, asr #22
   20ab4:	andeq	r0, r2, r0, ror fp
   20ab8:	andeq	r0, r2, ip, lsr #23
   20abc:	andeq	r0, r2, ip, ror #23
   20ac0:	andeq	r0, r2, r4, lsr ip
   20ac4:	andeq	r0, r2, ip, ror #24
   20ac8:			; <UNDEFINED> instruction: 0x00020cb4
   20acc:	andeq	r0, r2, r8, lsl #26
   20ad0:	andeq	r0, r2, r0, ror #26
   20ad4:	ldrdeq	r0, [r2], -r8
   20ad8:	movw	r1, #22552	; 0x5818
   20adc:	movt	r1, #2
   20ae0:	mov	r2, #5
   20ae4:	mov	r0, #0
   20ae8:	bl	11b58 <dcgettext@plt>
   20aec:	ldr	lr, [r5, #4]
   20af0:	mov	r2, r0
   20af4:	mov	r1, #1
   20af8:	mov	r0, r4
   20afc:	ldr	r3, [r5, #8]
   20b00:	ldr	ip, [r5, #32]
   20b04:	str	lr, [sp]
   20b08:	ldr	lr, [r5, #12]
   20b0c:	str	ip, [sp, #28]
   20b10:	ldr	ip, [r5, #28]
   20b14:	str	r3, [sp, #4]
   20b18:	ldr	r3, [r5, #16]
   20b1c:	str	lr, [sp, #8]
   20b20:	ldr	lr, [r5, #20]
   20b24:	str	ip, [sp, #24]
   20b28:	ldr	ip, [r5, #24]
   20b2c:	str	r3, [sp, #12]
   20b30:	ldr	r3, [r5]
   20b34:	str	lr, [sp, #16]
   20b38:	str	ip, [sp, #20]
   20b3c:	bl	11dd4 <__fprintf_chk@plt>
   20b40:	add	sp, sp, #32
   20b44:	ldrd	r4, [sp]
   20b48:	ldr	r6, [sp, #8]
   20b4c:	add	sp, sp, #12
   20b50:	pop	{pc}		; (ldr pc, [sp], #4)
   20b54:	mov	r3, r2
   20b58:	mov	r1, #1
   20b5c:	str	ip, [sp]
   20b60:	movw	r2, #22064	; 0x5630
   20b64:	movt	r2, #2
   20b68:	bl	11dd4 <__fprintf_chk@plt>
   20b6c:	b	20a2c <__assert_fail@plt+0xeae4>
   20b70:	mov	r2, #5
   20b74:	movw	r1, #22284	; 0x570c
   20b78:	movt	r1, #2
   20b7c:	mov	r0, #0
   20b80:	bl	11b58 <dcgettext@plt>
   20b84:	ldr	r3, [r5]
   20b88:	mov	r2, r0
   20b8c:	mov	r1, #1
   20b90:	mov	r0, r4
   20b94:	add	sp, sp, #32
   20b98:	ldrd	r4, [sp]
   20b9c:	ldr	r6, [sp, #8]
   20ba0:	ldr	lr, [sp, #12]
   20ba4:	add	sp, sp, #16
   20ba8:	b	11dd4 <__fprintf_chk@plt>
   20bac:	mov	r2, #5
   20bb0:	movw	r1, #22300	; 0x571c
   20bb4:	movt	r1, #2
   20bb8:	mov	r0, #0
   20bbc:	bl	11b58 <dcgettext@plt>
   20bc0:	ldm	r5, {r3, ip}
   20bc4:	mov	r2, r0
   20bc8:	mov	r1, #1
   20bcc:	mov	r0, r4
   20bd0:	str	ip, [sp, #48]	; 0x30
   20bd4:	add	sp, sp, #32
   20bd8:	ldrd	r4, [sp]
   20bdc:	ldr	r6, [sp, #8]
   20be0:	ldr	lr, [sp, #12]
   20be4:	add	sp, sp, #16
   20be8:	b	11dd4 <__fprintf_chk@plt>
   20bec:	mov	r2, #5
   20bf0:	movw	r1, #22324	; 0x5734
   20bf4:	movt	r1, #2
   20bf8:	mov	r0, #0
   20bfc:	bl	11b58 <dcgettext@plt>
   20c00:	ldm	r5, {r3, lr}
   20c04:	mov	r2, r0
   20c08:	mov	r1, #1
   20c0c:	mov	r0, r4
   20c10:	ldr	ip, [r5, #8]
   20c14:	str	lr, [sp, #48]	; 0x30
   20c18:	str	ip, [sp, #52]	; 0x34
   20c1c:	add	sp, sp, #32
   20c20:	ldrd	r4, [sp]
   20c24:	ldr	r6, [sp, #8]
   20c28:	ldr	lr, [sp, #12]
   20c2c:	add	sp, sp, #16
   20c30:	b	11dd4 <__fprintf_chk@plt>
   20c34:	mov	r2, #5
   20c38:	movw	r1, #22352	; 0x5750
   20c3c:	movt	r1, #2
   20c40:	mov	r0, #0
   20c44:	bl	11b58 <dcgettext@plt>
   20c48:	ldmib	r5, {r3, ip, lr}
   20c4c:	mov	r2, r0
   20c50:	mov	r1, #1
   20c54:	mov	r0, r4
   20c58:	str	r3, [sp]
   20c5c:	ldr	r3, [r5]
   20c60:	stmib	sp, {ip, lr}
   20c64:	bl	11dd4 <__fprintf_chk@plt>
   20c68:	b	20b40 <__assert_fail@plt+0xebf8>
   20c6c:	mov	r2, #5
   20c70:	movw	r1, #22384	; 0x5770
   20c74:	movt	r1, #2
   20c78:	mov	r0, #0
   20c7c:	bl	11b58 <dcgettext@plt>
   20c80:	ldmib	r5, {ip, lr}
   20c84:	mov	r2, r0
   20c88:	mov	r1, #1
   20c8c:	mov	r0, r4
   20c90:	ldr	r3, [r5, #16]
   20c94:	str	ip, [sp]
   20c98:	ldr	ip, [r5, #12]
   20c9c:	str	r3, [sp, #12]
   20ca0:	ldr	r3, [r5]
   20ca4:	str	lr, [sp, #4]
   20ca8:	str	ip, [sp, #8]
   20cac:	bl	11dd4 <__fprintf_chk@plt>
   20cb0:	b	20b40 <__assert_fail@plt+0xebf8>
   20cb4:	mov	r2, #5
   20cb8:	movw	r1, #22420	; 0x5794
   20cbc:	movt	r1, #2
   20cc0:	mov	r0, #0
   20cc4:	bl	11b58 <dcgettext@plt>
   20cc8:	ldr	lr, [r5, #4]
   20ccc:	mov	r2, r0
   20cd0:	mov	r1, #1
   20cd4:	mov	r0, r4
   20cd8:	ldr	r3, [r5, #8]
   20cdc:	ldr	ip, [r5, #20]
   20ce0:	str	lr, [sp]
   20ce4:	ldr	lr, [r5, #12]
   20ce8:	str	ip, [sp, #16]
   20cec:	ldr	ip, [r5, #16]
   20cf0:	str	r3, [sp, #4]
   20cf4:	ldr	r3, [r5]
   20cf8:	str	lr, [sp, #8]
   20cfc:	str	ip, [sp, #12]
   20d00:	bl	11dd4 <__fprintf_chk@plt>
   20d04:	b	20b40 <__assert_fail@plt+0xebf8>
   20d08:	mov	r2, #5
   20d0c:	movw	r1, #22460	; 0x57bc
   20d10:	movt	r1, #2
   20d14:	mov	r0, #0
   20d18:	bl	11b58 <dcgettext@plt>
   20d1c:	ldmib	r5, {r3, ip}
   20d20:	mov	r2, r0
   20d24:	mov	r1, #1
   20d28:	mov	r0, r4
   20d2c:	ldr	lr, [r5, #24]
   20d30:	str	r3, [sp]
   20d34:	ldr	r3, [r5, #12]
   20d38:	str	lr, [sp, #20]
   20d3c:	ldr	lr, [r5, #20]
   20d40:	str	ip, [sp, #4]
   20d44:	ldr	ip, [r5, #16]
   20d48:	str	r3, [sp, #8]
   20d4c:	ldr	r3, [r5]
   20d50:	str	ip, [sp, #12]
   20d54:	str	lr, [sp, #16]
   20d58:	bl	11dd4 <__fprintf_chk@plt>
   20d5c:	b	20b40 <__assert_fail@plt+0xebf8>
   20d60:	mov	r2, #5
   20d64:	movw	r1, #22504	; 0x57e8
   20d68:	movt	r1, #2
   20d6c:	mov	r0, #0
   20d70:	bl	11b58 <dcgettext@plt>
   20d74:	ldmib	r5, {ip, lr}
   20d78:	mov	r2, r0
   20d7c:	mov	r1, #1
   20d80:	mov	r0, r4
   20d84:	ldr	r3, [r5, #28]
   20d88:	str	ip, [sp]
   20d8c:	ldr	ip, [r5, #12]
   20d90:	str	r3, [sp, #24]
   20d94:	ldr	r3, [r5, #24]
   20d98:	str	lr, [sp, #4]
   20d9c:	ldr	lr, [r5, #16]
   20da0:	str	ip, [sp, #8]
   20da4:	ldr	ip, [r5, #20]
   20da8:	str	r3, [sp, #20]
   20dac:	ldr	r3, [r5]
   20db0:	str	lr, [sp, #12]
   20db4:	str	ip, [sp, #16]
   20db8:	bl	11dd4 <__fprintf_chk@plt>
   20dbc:	b	20b40 <__assert_fail@plt+0xebf8>
   20dc0:	movw	r1, #22604	; 0x584c
   20dc4:	movt	r1, #2
   20dc8:	b	20ae0 <__assert_fail@plt+0xeb98>
   20dcc:	strd	r4, [sp, #-12]!
   20dd0:	str	lr, [sp, #8]
   20dd4:	sub	sp, sp, #12
   20dd8:	ldr	r5, [sp, #24]
   20ddc:	ldr	ip, [r5]
   20de0:	cmp	ip, #0
   20de4:	beq	20e00 <__assert_fail@plt+0xeeb8>
   20de8:	mov	lr, r5
   20dec:	mov	ip, #0
   20df0:	ldr	r4, [lr, #4]!
   20df4:	add	ip, ip, #1
   20df8:	cmp	r4, #0
   20dfc:	bne	20df0 <__assert_fail@plt+0xeea8>
   20e00:	stm	sp, {r5, ip}
   20e04:	bl	209ec <__assert_fail@plt+0xeaa4>
   20e08:	add	sp, sp, #12
   20e0c:	ldrd	r4, [sp]
   20e10:	add	sp, sp, #8
   20e14:	pop	{pc}		; (ldr pc, [sp], #4)
   20e18:	strd	r4, [sp, #-16]!
   20e1c:	mov	ip, #0
   20e20:	str	r6, [sp, #8]
   20e24:	str	lr, [sp, #12]
   20e28:	sub	sp, sp, #48	; 0x30
   20e2c:	ldr	r5, [sp, #64]	; 0x40
   20e30:	add	r6, sp, #8
   20e34:	mov	r4, r6
   20e38:	ldr	lr, [r5], #4
   20e3c:	cmp	lr, #0
   20e40:	str	lr, [r4], #4
   20e44:	beq	20e54 <__assert_fail@plt+0xef0c>
   20e48:	add	ip, ip, #1
   20e4c:	cmp	ip, #10
   20e50:	bne	20e38 <__assert_fail@plt+0xeef0>
   20e54:	stm	sp, {r6, ip}
   20e58:	bl	209ec <__assert_fail@plt+0xeaa4>
   20e5c:	add	sp, sp, #48	; 0x30
   20e60:	ldrd	r4, [sp]
   20e64:	ldr	r6, [sp, #8]
   20e68:	add	sp, sp, #12
   20e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   20e70:	push	{r3}		; (str r3, [sp, #-4]!)
   20e74:	mov	ip, #0
   20e78:	strd	r4, [sp, #-12]!
   20e7c:	str	lr, [sp, #8]
   20e80:	sub	sp, sp, #56	; 0x38
   20e84:	add	r3, sp, #72	; 0x48
   20e88:	add	r5, sp, #16
   20e8c:	mov	r4, r3
   20e90:	mov	lr, r5
   20e94:	str	r3, [sp, #12]
   20e98:	ldr	r3, [r4], #4
   20e9c:	cmp	r3, #0
   20ea0:	str	r3, [lr], #4
   20ea4:	beq	20eb4 <__assert_fail@plt+0xef6c>
   20ea8:	add	ip, ip, #1
   20eac:	cmp	ip, #10
   20eb0:	bne	20e98 <__assert_fail@plt+0xef50>
   20eb4:	ldr	r3, [sp, #68]	; 0x44
   20eb8:	stm	sp, {r5, ip}
   20ebc:	bl	209ec <__assert_fail@plt+0xeaa4>
   20ec0:	add	sp, sp, #56	; 0x38
   20ec4:	ldrd	r4, [sp]
   20ec8:	ldr	lr, [sp, #8]
   20ecc:	add	sp, sp, #12
   20ed0:	add	sp, sp, #4
   20ed4:	bx	lr
   20ed8:	movw	r3, #25300	; 0x62d4
   20edc:	movt	r3, #3
   20ee0:	str	r4, [sp, #-8]!
   20ee4:	mov	r0, #10
   20ee8:	ldr	r1, [r3]
   20eec:	str	lr, [sp, #4]
   20ef0:	bl	11b4c <fputc_unlocked@plt>
   20ef4:	mov	r2, #5
   20ef8:	movw	r1, #22664	; 0x5888
   20efc:	movt	r1, #2
   20f00:	mov	r0, #0
   20f04:	bl	11b58 <dcgettext@plt>
   20f08:	mov	r1, r0
   20f0c:	movw	r2, #22684	; 0x589c
   20f10:	movt	r2, #2
   20f14:	mov	r0, #1
   20f18:	bl	11db0 <__printf_chk@plt>
   20f1c:	mov	r2, #5
   20f20:	movw	r1, #22708	; 0x58b4
   20f24:	movt	r1, #2
   20f28:	mov	r0, #0
   20f2c:	bl	11b58 <dcgettext@plt>
   20f30:	mov	r1, r0
   20f34:	movw	r3, #18724	; 0x4924
   20f38:	movt	r3, #2
   20f3c:	movw	r2, #18764	; 0x494c
   20f40:	movt	r2, #2
   20f44:	mov	r0, #1
   20f48:	bl	11db0 <__printf_chk@plt>
   20f4c:	mov	r2, #5
   20f50:	movw	r1, #22728	; 0x58c8
   20f54:	movt	r1, #2
   20f58:	mov	r0, #0
   20f5c:	bl	11b58 <dcgettext@plt>
   20f60:	mov	r1, r0
   20f64:	movw	r2, #22768	; 0x58f0
   20f68:	movt	r2, #2
   20f6c:	mov	r0, #1
   20f70:	ldr	r4, [sp]
   20f74:	ldr	lr, [sp, #4]
   20f78:	add	sp, sp, #8
   20f7c:	b	11db0 <__printf_chk@plt>
   20f80:	str	r4, [sp, #-8]!
   20f84:	str	lr, [sp, #4]
   20f88:	bl	2216c <__assert_fail@plt+0x10224>
   20f8c:	cmp	r0, #0
   20f90:	beq	20fa0 <__assert_fail@plt+0xf058>
   20f94:	ldr	r4, [sp]
   20f98:	add	sp, sp, #4
   20f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   20fa0:	bl	213f8 <__assert_fail@plt+0xf4b0>
   20fa4:	str	r4, [sp, #-8]!
   20fa8:	str	lr, [sp, #4]
   20fac:	bl	2216c <__assert_fail@plt+0x10224>
   20fb0:	cmp	r0, #0
   20fb4:	beq	20fc4 <__assert_fail@plt+0xf07c>
   20fb8:	ldr	r4, [sp]
   20fbc:	add	sp, sp, #4
   20fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   20fc4:	bl	213f8 <__assert_fail@plt+0xf4b0>
   20fc8:	str	r4, [sp, #-8]!
   20fcc:	str	lr, [sp, #4]
   20fd0:	bl	2216c <__assert_fail@plt+0x10224>
   20fd4:	cmp	r0, #0
   20fd8:	beq	20fe8 <__assert_fail@plt+0xf0a0>
   20fdc:	ldr	r4, [sp]
   20fe0:	add	sp, sp, #4
   20fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   20fe8:	bl	213f8 <__assert_fail@plt+0xf4b0>
   20fec:	strd	r4, [sp, #-16]!
   20ff0:	mov	r5, r0
   20ff4:	mov	r4, r1
   20ff8:	str	r6, [sp, #8]
   20ffc:	str	lr, [sp, #12]
   21000:	bl	221a8 <__assert_fail@plt+0x10260>
   21004:	cmp	r0, #0
   21008:	beq	2101c <__assert_fail@plt+0xf0d4>
   2100c:	ldrd	r4, [sp]
   21010:	ldr	r6, [sp, #8]
   21014:	add	sp, sp, #12
   21018:	pop	{pc}		; (ldr pc, [sp], #4)
   2101c:	adds	r4, r4, #0
   21020:	movne	r4, #1
   21024:	cmp	r5, #0
   21028:	moveq	r4, #1
   2102c:	cmp	r4, #0
   21030:	beq	2100c <__assert_fail@plt+0xf0c4>
   21034:	bl	213f8 <__assert_fail@plt+0xf4b0>
   21038:	cmp	r1, #0
   2103c:	orreq	r1, r1, #1
   21040:	str	r4, [sp, #-8]!
   21044:	str	lr, [sp, #4]
   21048:	bl	221a8 <__assert_fail@plt+0x10260>
   2104c:	cmp	r0, #0
   21050:	beq	21060 <__assert_fail@plt+0xf118>
   21054:	ldr	r4, [sp]
   21058:	add	sp, sp, #4
   2105c:	pop	{pc}		; (ldr pc, [sp], #4)
   21060:	bl	213f8 <__assert_fail@plt+0xf4b0>
   21064:	strd	r4, [sp, #-16]!
   21068:	mov	r4, r0
   2106c:	mov	r5, r2
   21070:	str	r6, [sp, #8]
   21074:	mov	r6, r1
   21078:	str	lr, [sp, #12]
   2107c:	bl	22cc0 <_obstack_memory_used@@Base+0x34>
   21080:	cmp	r0, #0
   21084:	beq	21098 <__assert_fail@plt+0xf150>
   21088:	ldrd	r4, [sp]
   2108c:	ldr	r6, [sp, #8]
   21090:	add	sp, sp, #12
   21094:	pop	{pc}		; (ldr pc, [sp], #4)
   21098:	cmp	r4, #0
   2109c:	beq	210ac <__assert_fail@plt+0xf164>
   210a0:	cmp	r6, #0
   210a4:	cmpne	r5, #0
   210a8:	beq	21088 <__assert_fail@plt+0xf140>
   210ac:	bl	213f8 <__assert_fail@plt+0xf4b0>
   210b0:	b	21064 <__assert_fail@plt+0xf11c>
   210b4:	cmp	r2, #0
   210b8:	cmpne	r1, #0
   210bc:	str	r4, [sp, #-8]!
   210c0:	moveq	r2, #1
   210c4:	str	lr, [sp, #4]
   210c8:	moveq	r1, r2
   210cc:	bl	22cc0 <_obstack_memory_used@@Base+0x34>
   210d0:	cmp	r0, #0
   210d4:	beq	210e4 <__assert_fail@plt+0xf19c>
   210d8:	ldr	r4, [sp]
   210dc:	add	sp, sp, #4
   210e0:	pop	{pc}		; (ldr pc, [sp], #4)
   210e4:	bl	213f8 <__assert_fail@plt+0xf4b0>
   210e8:	mov	r2, r1
   210ec:	mov	r1, r0
   210f0:	mov	r0, #0
   210f4:	b	21064 <__assert_fail@plt+0xf11c>
   210f8:	mov	r2, r1
   210fc:	mov	r1, r0
   21100:	mov	r0, #0
   21104:	b	210b4 <__assert_fail@plt+0xf16c>
   21108:	cmp	r0, #0
   2110c:	strd	r4, [sp, #-16]!
   21110:	mov	r5, r1
   21114:	ldr	r4, [r1]
   21118:	str	r6, [sp, #8]
   2111c:	str	lr, [sp, #12]
   21120:	beq	21150 <__assert_fail@plt+0xf208>
   21124:	lsr	r3, r4, #1
   21128:	add	r3, r3, #1
   2112c:	adds	r4, r4, r3
   21130:	bcs	2116c <__assert_fail@plt+0xf224>
   21134:	mov	r1, r4
   21138:	bl	21064 <__assert_fail@plt+0xf11c>
   2113c:	ldr	r6, [sp, #8]
   21140:	str	r4, [r5]
   21144:	ldrd	r4, [sp]
   21148:	add	sp, sp, #12
   2114c:	pop	{pc}		; (ldr pc, [sp], #4)
   21150:	cmp	r4, #0
   21154:	bne	21134 <__assert_fail@plt+0xf1ec>
   21158:	mov	r4, #64	; 0x40
   2115c:	udiv	r4, r4, r2
   21160:	cmp	r2, #64	; 0x40
   21164:	addhi	r4, r4, #1
   21168:	b	21134 <__assert_fail@plt+0xf1ec>
   2116c:	bl	213f8 <__assert_fail@plt+0xf4b0>
   21170:	mov	r2, #1
   21174:	b	21108 <__assert_fail@plt+0xf1c0>
   21178:	ldr	ip, [r1]
   2117c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21180:	mov	r5, r1
   21184:	strd	r6, [sp, #8]
   21188:	str	lr, [sp, #28]
   2118c:	strd	r8, [sp, #16]
   21190:	asr	lr, ip, #1
   21194:	ldr	r8, [sp, #32]
   21198:	str	sl, [sp, #24]
   2119c:	adds	r4, ip, lr
   211a0:	mvn	lr, r3
   211a4:	lsr	lr, lr, #31
   211a8:	mvnvs	r4, #-2147483648	; 0x80000000
   211ac:	cmp	r3, r4
   211b0:	movge	r1, #0
   211b4:	andlt	r1, lr, #1
   211b8:	cmp	r1, #0
   211bc:	movne	r4, r3
   211c0:	smull	r6, r7, r4, r8
   211c4:	cmp	r7, r6, asr #31
   211c8:	bne	21250 <__assert_fail@plt+0xf308>
   211cc:	cmp	r6, #63	; 0x3f
   211d0:	mov	r1, r6
   211d4:	ble	21238 <__assert_fail@plt+0xf2f0>
   211d8:	cmp	r0, #0
   211dc:	sub	r6, r4, ip
   211e0:	streq	r0, [r5]
   211e4:	cmp	r6, r2
   211e8:	bge	21218 <__assert_fail@plt+0xf2d0>
   211ec:	adds	r4, ip, r2
   211f0:	bvs	2124c <__assert_fail@plt+0xf304>
   211f4:	cmp	r4, r3
   211f8:	movle	r3, #0
   211fc:	andgt	r3, lr, #1
   21200:	cmp	r3, #0
   21204:	bne	2124c <__assert_fail@plt+0xf304>
   21208:	smull	r8, r9, r4, r8
   2120c:	cmp	r9, r8, asr #31
   21210:	mov	r1, r8
   21214:	bne	2124c <__assert_fail@plt+0xf304>
   21218:	bl	20fec <__assert_fail@plt+0xf0a4>
   2121c:	ldrd	r6, [sp, #8]
   21220:	ldrd	r8, [sp, #16]
   21224:	ldr	sl, [sp, #24]
   21228:	str	r4, [r5]
   2122c:	ldrd	r4, [sp]
   21230:	add	sp, sp, #28
   21234:	pop	{pc}		; (ldr pc, [sp], #4)
   21238:	mov	r6, #64	; 0x40
   2123c:	sdiv	r4, r6, r8
   21240:	mls	r1, r8, r4, r6
   21244:	sub	r1, r6, r1
   21248:	b	211d8 <__assert_fail@plt+0xf290>
   2124c:	bl	213f8 <__assert_fail@plt+0xf4b0>
   21250:	mvn	r6, #-2147483648	; 0x80000000
   21254:	b	2123c <__assert_fail@plt+0xf2f4>
   21258:	mov	r1, #1
   2125c:	str	r4, [sp, #-8]!
   21260:	str	lr, [sp, #4]
   21264:	bl	220f8 <__assert_fail@plt+0x101b0>
   21268:	cmp	r0, #0
   2126c:	beq	2127c <__assert_fail@plt+0xf334>
   21270:	ldr	r4, [sp]
   21274:	add	sp, sp, #4
   21278:	pop	{pc}		; (ldr pc, [sp], #4)
   2127c:	bl	213f8 <__assert_fail@plt+0xf4b0>
   21280:	mov	r1, #1
   21284:	str	r4, [sp, #-8]!
   21288:	str	lr, [sp, #4]
   2128c:	bl	220f8 <__assert_fail@plt+0x101b0>
   21290:	cmp	r0, #0
   21294:	beq	212a4 <__assert_fail@plt+0xf35c>
   21298:	ldr	r4, [sp]
   2129c:	add	sp, sp, #4
   212a0:	pop	{pc}		; (ldr pc, [sp], #4)
   212a4:	bl	213f8 <__assert_fail@plt+0xf4b0>
   212a8:	str	r4, [sp, #-8]!
   212ac:	str	lr, [sp, #4]
   212b0:	bl	220f8 <__assert_fail@plt+0x101b0>
   212b4:	cmp	r0, #0
   212b8:	beq	212c8 <__assert_fail@plt+0xf380>
   212bc:	ldr	r4, [sp]
   212c0:	add	sp, sp, #4
   212c4:	pop	{pc}		; (ldr pc, [sp], #4)
   212c8:	bl	213f8 <__assert_fail@plt+0xf4b0>
   212cc:	str	r4, [sp, #-8]!
   212d0:	str	lr, [sp, #4]
   212d4:	bl	220f8 <__assert_fail@plt+0x101b0>
   212d8:	cmp	r0, #0
   212dc:	beq	212ec <__assert_fail@plt+0xf3a4>
   212e0:	ldr	r4, [sp]
   212e4:	add	sp, sp, #4
   212e8:	pop	{pc}		; (ldr pc, [sp], #4)
   212ec:	bl	213f8 <__assert_fail@plt+0xf4b0>
   212f0:	strd	r4, [sp, #-16]!
   212f4:	mov	r4, r1
   212f8:	str	r6, [sp, #8]
   212fc:	mov	r6, r0
   21300:	mov	r0, r1
   21304:	str	lr, [sp, #12]
   21308:	bl	2216c <__assert_fail@plt+0x10224>
   2130c:	subs	r5, r0, #0
   21310:	beq	21334 <__assert_fail@plt+0xf3ec>
   21314:	mov	r2, r4
   21318:	mov	r1, r6
   2131c:	bl	11ac8 <memcpy@plt>
   21320:	mov	r0, r5
   21324:	ldrd	r4, [sp]
   21328:	ldr	r6, [sp, #8]
   2132c:	add	sp, sp, #12
   21330:	pop	{pc}		; (ldr pc, [sp], #4)
   21334:	bl	213f8 <__assert_fail@plt+0xf4b0>
   21338:	strd	r4, [sp, #-16]!
   2133c:	mov	r4, r1
   21340:	str	r6, [sp, #8]
   21344:	mov	r6, r0
   21348:	mov	r0, r1
   2134c:	str	lr, [sp, #12]
   21350:	bl	2216c <__assert_fail@plt+0x10224>
   21354:	subs	r5, r0, #0
   21358:	beq	2137c <__assert_fail@plt+0xf434>
   2135c:	mov	r2, r4
   21360:	mov	r1, r6
   21364:	bl	11ac8 <memcpy@plt>
   21368:	mov	r0, r5
   2136c:	ldrd	r4, [sp]
   21370:	ldr	r6, [sp, #8]
   21374:	add	sp, sp, #12
   21378:	pop	{pc}		; (ldr pc, [sp], #4)
   2137c:	bl	213f8 <__assert_fail@plt+0xf4b0>
   21380:	strd	r4, [sp, #-16]!
   21384:	mov	r4, r1
   21388:	str	r6, [sp, #8]
   2138c:	mov	r6, r0
   21390:	add	r0, r1, #1
   21394:	str	lr, [sp, #12]
   21398:	bl	2216c <__assert_fail@plt+0x10224>
   2139c:	subs	r5, r0, #0
   213a0:	beq	213cc <__assert_fail@plt+0xf484>
   213a4:	mov	r3, #0
   213a8:	mov	r1, r6
   213ac:	mov	r2, r4
   213b0:	strb	r3, [r5, r4]
   213b4:	bl	11ac8 <memcpy@plt>
   213b8:	mov	r0, r5
   213bc:	ldrd	r4, [sp]
   213c0:	ldr	r6, [sp, #8]
   213c4:	add	sp, sp, #12
   213c8:	pop	{pc}		; (ldr pc, [sp], #4)
   213cc:	bl	213f8 <__assert_fail@plt+0xf4b0>
   213d0:	str	r4, [sp, #-8]!
   213d4:	mov	r4, r0
   213d8:	str	lr, [sp, #4]
   213dc:	bl	11d50 <strlen@plt>
   213e0:	add	r1, r0, #1
   213e4:	mov	r0, r4
   213e8:	ldr	r4, [sp]
   213ec:	ldr	lr, [sp, #4]
   213f0:	add	sp, sp, #8
   213f4:	b	212f0 <__assert_fail@plt+0xf3a8>
   213f8:	movw	r3, #25200	; 0x6270
   213fc:	movt	r3, #3
   21400:	str	r4, [sp, #-8]!
   21404:	ldr	r4, [r3]
   21408:	mov	r2, #5
   2140c:	movw	r1, #22848	; 0x5940
   21410:	movt	r1, #2
   21414:	mov	r0, #0
   21418:	str	lr, [sp, #4]
   2141c:	bl	11b58 <dcgettext@plt>
   21420:	mov	r3, r0
   21424:	movw	r2, #14316	; 0x37ec
   21428:	movt	r2, #2
   2142c:	mov	r1, #0
   21430:	mov	r0, r4
   21434:	bl	11c90 <error@plt>
   21438:	bl	11f24 <abort@plt>
   2143c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   21440:	mov	r4, r0
   21444:	mov	r0, #0
   21448:	strd	r6, [sp, #8]
   2144c:	mov	r6, r1
   21450:	movw	r1, #22868	; 0x5954
   21454:	movt	r1, #2
   21458:	strd	r8, [sp, #16]
   2145c:	mov	r9, r2
   21460:	mov	r2, #5
   21464:	mov	r7, r3
   21468:	str	sl, [sp, #24]
   2146c:	str	lr, [sp, #28]
   21470:	ldr	r8, [sp, #32]
   21474:	bl	11b58 <dcgettext@plt>
   21478:	mov	r2, r0
   2147c:	mov	r1, r4
   21480:	mov	r0, #0
   21484:	bl	11c90 <error@plt>
   21488:	mov	r2, #5
   2148c:	movw	r1, #22896	; 0x5970
   21490:	movt	r1, #2
   21494:	mov	r0, #0
   21498:	bl	11b58 <dcgettext@plt>
   2149c:	mov	r1, #0
   214a0:	mov	r2, r0
   214a4:	mov	r0, r1
   214a8:	bl	11c90 <error@plt>
   214ac:	mov	r2, #5
   214b0:	movw	r3, #25200	; 0x6270
   214b4:	movt	r3, #3
   214b8:	movw	r1, #22940	; 0x599c
   214bc:	movt	r1, #2
   214c0:	mov	r0, #0
   214c4:	ldr	r4, [r3]
   214c8:	bl	11b58 <dcgettext@plt>
   214cc:	mov	r5, r0
   214d0:	mov	r3, r9
   214d4:	mov	r2, r6
   214d8:	mov	r1, #8
   214dc:	mov	r0, #0
   214e0:	bl	1f4cc <__assert_fail@plt+0xd584>
   214e4:	mov	r6, r0
   214e8:	mov	r3, r8
   214ec:	mov	r2, r7
   214f0:	mov	r1, #8
   214f4:	mov	r0, #1
   214f8:	bl	1f4cc <__assert_fail@plt+0xd584>
   214fc:	mov	r3, r6
   21500:	mov	r2, r5
   21504:	str	r0, [sp, #32]
   21508:	mov	r1, #0
   2150c:	mov	r0, r4
   21510:	ldrd	r4, [sp]
   21514:	ldrd	r6, [sp, #8]
   21518:	ldrd	r8, [sp, #16]
   2151c:	ldr	sl, [sp, #24]
   21520:	ldr	lr, [sp, #28]
   21524:	add	sp, sp, #32
   21528:	b	11c90 <error@plt>
   2152c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21530:	mov	r5, r0
   21534:	strd	r6, [sp, #8]
   21538:	mov	r7, r1
   2153c:	mov	r6, r3
   21540:	str	r8, [sp, #16]
   21544:	mov	r8, r2
   21548:	str	lr, [sp, #20]
   2154c:	sub	sp, sp, #8
   21550:	bl	227cc <__assert_fail@plt+0x10884>
   21554:	mov	r4, r0
   21558:	bl	11d74 <__errno_location@plt>
   2155c:	ldr	r0, [r0]
   21560:	cmp	r0, #0
   21564:	bne	21584 <__assert_fail@plt+0xf63c>
   21568:	mov	r0, r4
   2156c:	add	sp, sp, #8
   21570:	ldrd	r4, [sp]
   21574:	ldrd	r6, [sp, #8]
   21578:	ldr	r8, [sp, #16]
   2157c:	add	sp, sp, #20
   21580:	pop	{pc}		; (ldr pc, [sp], #4)
   21584:	mov	r3, r8
   21588:	mov	r2, r7
   2158c:	str	r6, [sp]
   21590:	mov	r1, r5
   21594:	bl	2143c <__assert_fail@plt+0xf4f4>
   21598:	b	21568 <__assert_fail@plt+0xf620>
   2159c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   215a0:	mov	r5, r3
   215a4:	strd	r6, [sp, #8]
   215a8:	mov	r7, r1
   215ac:	mov	r6, r0
   215b0:	str	r8, [sp, #16]
   215b4:	mov	r8, r2
   215b8:	str	lr, [sp, #20]
   215bc:	sub	sp, sp, #8
   215c0:	bl	22868 <__assert_fail@plt+0x10920>
   215c4:	mov	r4, r0
   215c8:	bl	11d74 <__errno_location@plt>
   215cc:	ldr	r0, [r0]
   215d0:	cmp	r0, #0
   215d4:	bne	215f4 <__assert_fail@plt+0xf6ac>
   215d8:	mov	r0, r4
   215dc:	add	sp, sp, #8
   215e0:	ldrd	r4, [sp]
   215e4:	ldrd	r6, [sp, #8]
   215e8:	ldr	r8, [sp, #16]
   215ec:	add	sp, sp, #20
   215f0:	pop	{pc}		; (ldr pc, [sp], #4)
   215f4:	sub	r5, r5, #1
   215f8:	mov	r3, r8
   215fc:	sub	r2, r7, #1
   21600:	mov	r1, r6
   21604:	str	r5, [sp]
   21608:	bl	2143c <__assert_fail@plt+0xf4f4>
   2160c:	b	215d8 <__assert_fail@plt+0xf690>
   21610:	strd	r4, [sp, #-12]!
   21614:	str	lr, [sp, #8]
   21618:	vpush	{d8}
   2161c:	sub	sp, sp, #12
   21620:	vmov.f64	d8, d0
   21624:	bl	11d74 <__errno_location@plt>
   21628:	vldr	d7, [pc, #136]	; 216b8 <__assert_fail@plt+0xf770>
   2162c:	mov	r4, r0
   21630:	vcmpe.f64	d8, d7
   21634:	vmrs	APSR_nzcv, fpscr
   21638:	bge	21688 <__assert_fail@plt+0xf740>
   2163c:	vmov.f64	d0, d8
   21640:	mov	r0, sp
   21644:	mov	r5, #0
   21648:	bl	22288 <__assert_fail@plt+0x10340>
   2164c:	b	2165c <__assert_fail@plt+0xf714>
   21650:	ldr	r3, [r4]
   21654:	bics	r3, r3, #4
   21658:	bne	216ac <__assert_fail@plt+0xf764>
   2165c:	mov	r1, sp
   21660:	mov	r0, sp
   21664:	str	r5, [r4]
   21668:	bl	11aa4 <nanosleep@plt>
   2166c:	cmp	r0, #0
   21670:	bne	21650 <__assert_fail@plt+0xf708>
   21674:	add	sp, sp, #12
   21678:	vpop	{d8}
   2167c:	ldrd	r4, [sp]
   21680:	add	sp, sp, #8
   21684:	pop	{pc}		; (ldr pc, [sp], #4)
   21688:	bl	11a50 <pause@plt>
   2168c:	ldr	r3, [r4]
   21690:	cmp	r3, #4
   21694:	bne	2163c <__assert_fail@plt+0xf6f4>
   21698:	bl	11a50 <pause@plt>
   2169c:	ldr	r3, [r4]
   216a0:	cmp	r3, #4
   216a4:	beq	21688 <__assert_fail@plt+0xf740>
   216a8:	b	2163c <__assert_fail@plt+0xf6f4>
   216ac:	mvn	r0, #0
   216b0:	b	21674 <__assert_fail@plt+0xf72c>
   216b4:	nop	{0}
   216b8:	andeq	r0, r0, r0
   216bc:	mvnmi	r0, r0
   216c0:	sub	r0, r0, #1
   216c4:	movw	ip, #25200	; 0x6270
   216c8:	movt	ip, #3
   216cc:	cmp	r0, #3
   216d0:	push	{lr}		; (str lr, [sp, #-4]!)
   216d4:	sub	sp, sp, #20
   216d8:	ldr	r5, [ip]
   216dc:	bhi	2172c <__assert_fail@plt+0xf7e4>
   216e0:	movw	ip, #22980	; 0x59c4
   216e4:	movt	ip, #2
   216e8:	cmp	r1, #0
   216ec:	ldr	r0, [ip, r0, lsl #2]
   216f0:	blt	21730 <__assert_fail@plt+0xf7e8>
   216f4:	ldr	r6, [r3, r1, lsl #4]
   216f8:	movw	r4, #22996	; 0x59d4
   216fc:	movt	r4, #2
   21700:	mov	r1, r0
   21704:	mov	r2, #5
   21708:	mov	r0, #0
   2170c:	bl	11b58 <dcgettext@plt>
   21710:	ldr	ip, [sp, #24]
   21714:	mov	r2, r0
   21718:	mov	r3, r4
   2171c:	mov	r0, r5
   21720:	mov	r1, #0
   21724:	stm	sp, {r6, ip}
   21728:	bl	11c90 <error@plt>
   2172c:	bl	11f24 <abort@plt>
   21730:	mov	r3, #0
   21734:	movw	r4, #22996	; 0x59d4
   21738:	movt	r4, #2
   2173c:	add	r6, sp, #12
   21740:	strb	r2, [sp, #12]
   21744:	sub	r4, r4, r1
   21748:	strb	r3, [sp, #13]
   2174c:	b	21700 <__assert_fail@plt+0xf7b8>
   21750:	cmp	r2, #36	; 0x24
   21754:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21758:	strd	r6, [sp, #8]
   2175c:	strd	r8, [sp, #16]
   21760:	strd	sl, [sp, #24]
   21764:	str	lr, [sp, #32]
   21768:	sub	sp, sp, #36	; 0x24
   2176c:	bhi	21ffc <__assert_fail@plt+0x100b4>
   21770:	cmp	r1, #0
   21774:	mov	r8, r2
   21778:	mov	r6, r0
   2177c:	mov	r5, r1
   21780:	mov	sl, r3
   21784:	addeq	r5, sp, #28
   21788:	bl	11d74 <__errno_location@plt>
   2178c:	mov	r3, #0
   21790:	mov	r7, r0
   21794:	str	r3, [r0]
   21798:	bl	11d2c <__ctype_b_loc@plt>
   2179c:	ldrb	r3, [r6]
   217a0:	mov	r2, r6
   217a4:	ldr	r0, [r0]
   217a8:	b	217b0 <__assert_fail@plt+0xf868>
   217ac:	ldrb	r3, [r2, #1]!
   217b0:	lsl	r1, r3, #1
   217b4:	ldrh	r4, [r0, r1]
   217b8:	ands	r4, r4, #8192	; 0x2000
   217bc:	bne	217ac <__assert_fail@plt+0xf864>
   217c0:	cmp	r3, #45	; 0x2d
   217c4:	beq	21864 <__assert_fail@plt+0xf91c>
   217c8:	mov	r2, r8
   217cc:	mov	r3, r4
   217d0:	mov	r1, r5
   217d4:	mov	r0, r6
   217d8:	bl	11aec <__strtoull_internal@plt>
   217dc:	ldr	fp, [r5]
   217e0:	mov	r9, r0
   217e4:	mov	r8, r1
   217e8:	cmp	fp, r6
   217ec:	beq	2184c <__assert_fail@plt+0xf904>
   217f0:	ldr	r4, [r7]
   217f4:	cmp	r4, #0
   217f8:	bne	2183c <__assert_fail@plt+0xf8f4>
   217fc:	ldr	r3, [sp, #72]	; 0x48
   21800:	cmp	r3, #0
   21804:	beq	21814 <__assert_fail@plt+0xf8cc>
   21808:	ldrb	r6, [fp]
   2180c:	cmp	r6, #0
   21810:	bne	21b54 <__assert_fail@plt+0xfc0c>
   21814:	str	r9, [sl]
   21818:	str	r8, [sl, #4]
   2181c:	mov	r0, r4
   21820:	add	sp, sp, #36	; 0x24
   21824:	ldrd	r4, [sp]
   21828:	ldrd	r6, [sp, #8]
   2182c:	ldrd	r8, [sp, #16]
   21830:	ldrd	sl, [sp, #24]
   21834:	add	sp, sp, #32
   21838:	pop	{pc}		; (ldr pc, [sp], #4)
   2183c:	cmp	r4, #34	; 0x22
   21840:	bne	21864 <__assert_fail@plt+0xf91c>
   21844:	mov	r4, #1
   21848:	b	217fc <__assert_fail@plt+0xf8b4>
   2184c:	ldr	r3, [sp, #72]	; 0x48
   21850:	cmp	r3, #0
   21854:	beq	21864 <__assert_fail@plt+0xf91c>
   21858:	ldrb	r6, [r6]
   2185c:	cmp	r6, #0
   21860:	bne	2186c <__assert_fail@plt+0xf924>
   21864:	mov	r4, #4
   21868:	b	2181c <__assert_fail@plt+0xf8d4>
   2186c:	mov	r1, r6
   21870:	mov	r0, r3
   21874:	bl	11d5c <strchr@plt>
   21878:	cmp	r0, #0
   2187c:	movne	r9, #1
   21880:	movne	r8, #0
   21884:	beq	21864 <__assert_fail@plt+0xf91c>
   21888:	sub	r3, r6, #69	; 0x45
   2188c:	cmp	r3, #47	; 0x2f
   21890:	ldrls	pc, [pc, r3, lsl #2]
   21894:	b	2199c <__assert_fail@plt+0xfa54>
   21898:	andeq	r1, r2, r8, asr r9
   2189c:	muleq	r2, ip, r9
   218a0:	andeq	r1, r2, r8, asr r9
   218a4:	muleq	r2, ip, r9
   218a8:	muleq	r2, ip, r9
   218ac:	muleq	r2, ip, r9
   218b0:	andeq	r1, r2, r8, asr r9
   218b4:	muleq	r2, ip, r9
   218b8:	andeq	r1, r2, r8, asr r9
   218bc:	muleq	r2, ip, r9
   218c0:	muleq	r2, ip, r9
   218c4:	andeq	r1, r2, r8, asr r9
   218c8:	muleq	r2, ip, r9
   218cc:	muleq	r2, ip, r9
   218d0:	muleq	r2, ip, r9
   218d4:	andeq	r1, r2, r8, asr r9
   218d8:	muleq	r2, ip, r9
   218dc:	muleq	r2, ip, r9
   218e0:	muleq	r2, ip, r9
   218e4:	muleq	r2, ip, r9
   218e8:	andeq	r1, r2, r8, asr r9
   218ec:	andeq	r1, r2, r8, asr r9
   218f0:	muleq	r2, ip, r9
   218f4:	muleq	r2, ip, r9
   218f8:	muleq	r2, ip, r9
   218fc:	muleq	r2, ip, r9
   21900:	muleq	r2, ip, r9
   21904:	muleq	r2, ip, r9
   21908:	muleq	r2, ip, r9
   2190c:	muleq	r2, ip, r9
   21910:	muleq	r2, ip, r9
   21914:	muleq	r2, ip, r9
   21918:	muleq	r2, ip, r9
   2191c:	muleq	r2, ip, r9
   21920:	andeq	r1, r2, r8, asr r9
   21924:	muleq	r2, ip, r9
   21928:	muleq	r2, ip, r9
   2192c:	muleq	r2, ip, r9
   21930:	andeq	r1, r2, r8, asr r9
   21934:	muleq	r2, ip, r9
   21938:	andeq	r1, r2, r8, asr r9
   2193c:	muleq	r2, ip, r9
   21940:	muleq	r2, ip, r9
   21944:	muleq	r2, ip, r9
   21948:	muleq	r2, ip, r9
   2194c:	muleq	r2, ip, r9
   21950:	muleq	r2, ip, r9
   21954:	andeq	r1, r2, r8, asr r9
   21958:	mov	r1, #48	; 0x30
   2195c:	ldr	r0, [sp, #72]	; 0x48
   21960:	bl	11d5c <strchr@plt>
   21964:	cmp	r0, #0
   21968:	beq	2199c <__assert_fail@plt+0xfa54>
   2196c:	ldrb	r3, [fp, #1]
   21970:	cmp	r3, #68	; 0x44
   21974:	beq	21ec8 <__assert_fail@plt+0xff80>
   21978:	cmp	r3, #105	; 0x69
   2197c:	beq	21b6c <__assert_fail@plt+0xfc24>
   21980:	cmp	r3, #66	; 0x42
   21984:	moveq	r3, #2
   21988:	movne	r3, #1
   2198c:	moveq	r7, #1000	; 0x3e8
   21990:	movne	r7, #1024	; 0x400
   21994:	str	r3, [sp, #4]
   21998:	b	219a8 <__assert_fail@plt+0xfa60>
   2199c:	mov	r3, #1
   219a0:	mov	r7, #1024	; 0x400
   219a4:	str	r3, [sp, #4]
   219a8:	sub	r6, r6, #66	; 0x42
   219ac:	cmp	r6, #53	; 0x35
   219b0:	ldrls	pc, [pc, r6, lsl #2]
   219b4:	b	21b18 <__assert_fail@plt+0xfbd0>
   219b8:	andeq	r1, r2, r0, ror lr
   219bc:	andeq	r1, r2, r8, lsl fp
   219c0:	andeq	r1, r2, r8, lsl fp
   219c4:	andeq	r1, r2, ip, ror ip
   219c8:	andeq	r1, r2, r8, lsl fp
   219cc:	muleq	r2, r0, sl
   219d0:	andeq	r1, r2, r8, lsl fp
   219d4:	andeq	r1, r2, r8, lsl fp
   219d8:	andeq	r1, r2, r8, lsl fp
   219dc:	andeq	r1, r2, r0, lsr #22
   219e0:	andeq	r1, r2, r8, lsl fp
   219e4:	andeq	r1, r2, ip, lsl lr
   219e8:	andeq	r1, r2, r8, lsl fp
   219ec:	andeq	r1, r2, r8, lsl fp
   219f0:	andeq	r1, r2, ip, ror #26
   219f4:	andeq	r1, r2, r8, lsl fp
   219f8:	andeq	r1, r2, r8, lsl fp
   219fc:	andeq	r1, r2, r8, lsl fp
   21a00:	strdeq	r1, [r2], -r4
   21a04:	andeq	r1, r2, r8, lsl fp
   21a08:	andeq	r1, r2, r8, lsl fp
   21a0c:	andeq	r1, r2, r8, lsl fp
   21a10:	andeq	r1, r2, r8, lsl fp
   21a14:	andeq	r1, r2, r4, lsl #24
   21a18:	andeq	r1, r2, r8, lsl #23
   21a1c:	andeq	r1, r2, r8, lsl fp
   21a20:	andeq	r1, r2, r8, lsl fp
   21a24:	andeq	r1, r2, r8, lsl fp
   21a28:	andeq	r1, r2, r8, lsl fp
   21a2c:	andeq	r1, r2, r8, lsl fp
   21a30:	andeq	r1, r2, r8, lsl fp
   21a34:	andeq	r1, r2, r8, lsl fp
   21a38:	strdeq	r1, [r2], -ip
   21a3c:	andeq	r1, r2, r0, lsl #22
   21a40:	andeq	r1, r2, r8, lsl fp
   21a44:	andeq	r1, r2, r8, lsl fp
   21a48:	andeq	r1, r2, r8, lsl fp
   21a4c:	muleq	r2, r0, sl
   21a50:	andeq	r1, r2, r8, lsl fp
   21a54:	andeq	r1, r2, r8, lsl fp
   21a58:	andeq	r1, r2, r8, lsl fp
   21a5c:	andeq	r1, r2, r0, lsr #22
   21a60:	andeq	r1, r2, r8, lsl fp
   21a64:	andeq	r1, r2, ip, lsl lr
   21a68:	andeq	r1, r2, r8, lsl fp
   21a6c:	andeq	r1, r2, r8, lsl fp
   21a70:	andeq	r1, r2, r8, lsl fp
   21a74:	andeq	r1, r2, r8, lsl fp
   21a78:	andeq	r1, r2, r8, lsl fp
   21a7c:	andeq	r1, r2, r8, lsl fp
   21a80:	strdeq	r1, [r2], -r4
   21a84:	andeq	r1, r2, r8, lsl fp
   21a88:	andeq	r1, r2, r8, lsl fp
   21a8c:	andeq	r1, r2, r4, ror #27
   21a90:	asr	r3, r7, #31
   21a94:	mov	r2, r7
   21a98:	cmp	r8, #0
   21a9c:	umull	r0, r1, r9, r7
   21aa0:	mov	ip, #0
   21aa4:	strd	r2, [sp, #8]
   21aa8:	bne	21efc <__assert_fail@plt+0xffb4>
   21aac:	mov	r2, r0
   21ab0:	mov	r3, r1
   21ab4:	cmp	ip, #0
   21ab8:	bne	21b44 <__assert_fail@plt+0xfbfc>
   21abc:	cmp	r3, #0
   21ac0:	mov	lr, ip
   21ac4:	bne	21f60 <__assert_fail@plt+0x10018>
   21ac8:	umull	r2, r3, r2, r7
   21acc:	mov	ip, r2
   21ad0:	mov	r1, r3
   21ad4:	subs	r0, lr, #0
   21ad8:	bne	21b44 <__assert_fail@plt+0xfbfc>
   21adc:	cmp	r1, #0
   21ae0:	bne	21f40 <__assert_fail@plt+0xfff8>
   21ae4:	umull	r2, r3, ip, r7
   21ae8:	mov	r6, r2
   21aec:	mov	r2, r3
   21af0:	cmp	r0, #0
   21af4:	mov	r9, r6
   21af8:	mov	r8, r2
   21afc:	bne	21b44 <__assert_fail@plt+0xfbfc>
   21b00:	ldr	r2, [sp, #4]
   21b04:	add	r3, fp, r2
   21b08:	str	r3, [r5]
   21b0c:	ldrb	r3, [fp, r2]
   21b10:	cmp	r3, #0
   21b14:	beq	21814 <__assert_fail@plt+0xf8cc>
   21b18:	orr	r4, r4, #2
   21b1c:	b	21814 <__assert_fail@plt+0xf8cc>
   21b20:	cmp	r8, #0
   21b24:	umull	r2, r3, r9, r7
   21b28:	mov	ip, #0
   21b2c:	asr	r1, r7, #31
   21b30:	bne	21e98 <__assert_fail@plt+0xff50>
   21b34:	mov	r9, r2
   21b38:	mov	r8, r3
   21b3c:	cmp	ip, #0
   21b40:	beq	21b00 <__assert_fail@plt+0xfbb8>
   21b44:	mvn	r9, #0
   21b48:	mov	r4, #1
   21b4c:	mov	r8, r9
   21b50:	b	21b00 <__assert_fail@plt+0xfbb8>
   21b54:	mov	r1, r6
   21b58:	ldr	r0, [sp, #72]	; 0x48
   21b5c:	bl	11d5c <strchr@plt>
   21b60:	cmp	r0, #0
   21b64:	bne	21888 <__assert_fail@plt+0xf940>
   21b68:	b	21b18 <__assert_fail@plt+0xfbd0>
   21b6c:	ldrb	r3, [fp, #2]
   21b70:	mov	r7, #1024	; 0x400
   21b74:	cmp	r3, #66	; 0x42
   21b78:	movne	r3, #1
   21b7c:	moveq	r3, #3
   21b80:	str	r3, [sp, #4]
   21b84:	b	219a8 <__assert_fail@plt+0xfa60>
   21b88:	asr	r3, r7, #31
   21b8c:	mov	r2, r7
   21b90:	mov	ip, #0
   21b94:	mov	r0, #7
   21b98:	mov	lr, ip
   21b9c:	mov	r6, r4
   21ba0:	strd	r2, [sp, #8]
   21ba4:	str	r5, [sp, #16]
   21ba8:	b	21bd4 <__assert_fail@plt+0xfc8c>
   21bac:	umull	r2, r3, r9, r7
   21bb0:	mov	r9, r2
   21bb4:	mov	r8, r3
   21bb8:	cmp	r1, #0
   21bbc:	beq	21bcc <__assert_fail@plt+0xfc84>
   21bc0:	mvn	r9, #0
   21bc4:	mov	ip, #1
   21bc8:	mov	r8, r9
   21bcc:	subs	r0, r0, #1
   21bd0:	beq	21ebc <__assert_fail@plt+0xff74>
   21bd4:	cmp	r8, #0
   21bd8:	mov	r1, #0
   21bdc:	beq	21bac <__assert_fail@plt+0xfc64>
   21be0:	umull	r4, r5, r9, r7
   21be4:	mov	r3, lr
   21be8:	mov	r2, r5
   21bec:	umlal	r2, r3, r8, r7
   21bf0:	cmp	r3, #0
   21bf4:	bne	2201c <__assert_fail@plt+0x100d4>
   21bf8:	mov	r9, r4
   21bfc:	mov	r8, r2
   21c00:	b	21bb8 <__assert_fail@plt+0xfc70>
   21c04:	asr	r3, r7, #31
   21c08:	mov	r2, r7
   21c0c:	mov	r6, #0
   21c10:	mov	lr, #8
   21c14:	mov	r0, r4
   21c18:	mov	ip, r5
   21c1c:	strd	r2, [sp, #8]
   21c20:	b	21c4c <__assert_fail@plt+0xfd04>
   21c24:	umull	r2, r3, r9, r7
   21c28:	mov	r9, r2
   21c2c:	mov	r8, r3
   21c30:	cmp	r1, #0
   21c34:	beq	21c44 <__assert_fail@plt+0xfcfc>
   21c38:	mvn	r9, #0
   21c3c:	mov	r6, #1
   21c40:	mov	r8, r9
   21c44:	subs	lr, lr, #1
   21c48:	beq	21e8c <__assert_fail@plt+0xff44>
   21c4c:	cmp	r8, #0
   21c50:	mov	r1, #0
   21c54:	beq	21c24 <__assert_fail@plt+0xfcdc>
   21c58:	umull	r4, r5, r9, r7
   21c5c:	mov	r3, #0
   21c60:	mov	r2, r5
   21c64:	umlal	r2, r3, r8, r7
   21c68:	cmp	r3, #0
   21c6c:	bne	22074 <__assert_fail@plt+0x1012c>
   21c70:	mov	r9, r4
   21c74:	mov	r8, r2
   21c78:	b	21c30 <__assert_fail@plt+0xfce8>
   21c7c:	asr	r3, r7, #31
   21c80:	mov	r2, r7
   21c84:	mov	r6, #0
   21c88:	mov	lr, #6
   21c8c:	mov	r0, r4
   21c90:	mov	ip, r5
   21c94:	strd	r2, [sp, #8]
   21c98:	b	21cc4 <__assert_fail@plt+0xfd7c>
   21c9c:	umull	r2, r3, r9, r7
   21ca0:	mov	r9, r2
   21ca4:	mov	r8, r3
   21ca8:	cmp	r1, #0
   21cac:	beq	21cbc <__assert_fail@plt+0xfd74>
   21cb0:	mvn	r9, #0
   21cb4:	mov	r6, #1
   21cb8:	mov	r8, r9
   21cbc:	subs	lr, lr, #1
   21cc0:	beq	21e8c <__assert_fail@plt+0xff44>
   21cc4:	cmp	r8, #0
   21cc8:	mov	r1, #0
   21ccc:	beq	21c9c <__assert_fail@plt+0xfd54>
   21cd0:	umull	r4, r5, r9, r7
   21cd4:	mov	r3, #0
   21cd8:	mov	r2, r5
   21cdc:	umlal	r2, r3, r8, r7
   21ce0:	cmp	r3, #0
   21ce4:	bne	2203c <__assert_fail@plt+0x100f4>
   21ce8:	mov	r9, r4
   21cec:	mov	r8, r2
   21cf0:	b	21ca8 <__assert_fail@plt+0xfd60>
   21cf4:	asr	r3, r7, #31
   21cf8:	mov	r2, r7
   21cfc:	mov	r6, #0
   21d00:	mov	lr, #4
   21d04:	mov	r0, r4
   21d08:	mov	ip, r5
   21d0c:	strd	r2, [sp, #8]
   21d10:	b	21d3c <__assert_fail@plt+0xfdf4>
   21d14:	umull	r2, r3, r9, r7
   21d18:	mov	r9, r2
   21d1c:	mov	r8, r3
   21d20:	cmp	r1, #0
   21d24:	beq	21d34 <__assert_fail@plt+0xfdec>
   21d28:	mvn	r9, #0
   21d2c:	mov	r6, #1
   21d30:	mov	r8, r9
   21d34:	subs	lr, lr, #1
   21d38:	beq	21e8c <__assert_fail@plt+0xff44>
   21d3c:	cmp	r8, #0
   21d40:	mov	r1, #0
   21d44:	beq	21d14 <__assert_fail@plt+0xfdcc>
   21d48:	umull	r4, r5, r9, r7
   21d4c:	mov	r3, #0
   21d50:	mov	r2, r5
   21d54:	umlal	r2, r3, r8, r7
   21d58:	cmp	r3, #0
   21d5c:	bne	22058 <__assert_fail@plt+0x10110>
   21d60:	mov	r9, r4
   21d64:	mov	r8, r2
   21d68:	b	21d20 <__assert_fail@plt+0xfdd8>
   21d6c:	asr	r3, r7, #31
   21d70:	mov	r2, r7
   21d74:	mov	r6, #0
   21d78:	mov	lr, #5
   21d7c:	mov	r0, r4
   21d80:	mov	ip, r5
   21d84:	strd	r2, [sp, #8]
   21d88:	b	21db4 <__assert_fail@plt+0xfe6c>
   21d8c:	umull	r2, r3, r9, r7
   21d90:	mov	r9, r2
   21d94:	mov	r8, r3
   21d98:	cmp	r1, #0
   21d9c:	beq	21dac <__assert_fail@plt+0xfe64>
   21da0:	mvn	r9, #0
   21da4:	mov	r6, #1
   21da8:	mov	r8, r9
   21dac:	subs	lr, lr, #1
   21db0:	beq	21e8c <__assert_fail@plt+0xff44>
   21db4:	cmp	r8, #0
   21db8:	mov	r1, #0
   21dbc:	beq	21d8c <__assert_fail@plt+0xfe44>
   21dc0:	umull	r4, r5, r9, r7
   21dc4:	mov	r3, #0
   21dc8:	mov	r2, r5
   21dcc:	umlal	r2, r3, r8, r7
   21dd0:	cmp	r3, #0
   21dd4:	bne	21fc4 <__assert_fail@plt+0x1007c>
   21dd8:	mov	r9, r4
   21ddc:	mov	r8, r2
   21de0:	b	21d98 <__assert_fail@plt+0xfe50>
   21de4:	lsr	r3, r8, #31
   21de8:	adds	r9, r9, r9
   21dec:	adc	r8, r8, r8
   21df0:	cmp	r3, #0
   21df4:	beq	21b00 <__assert_fail@plt+0xfbb8>
   21df8:	b	21b44 <__assert_fail@plt+0xfbfc>
   21dfc:	lsr	r3, r8, #23
   21e00:	lsl	r8, r8, #9
   21e04:	cmp	r3, #0
   21e08:	lsl	r3, r9, #9
   21e0c:	orr	r8, r8, r9, lsr #23
   21e10:	bne	21b44 <__assert_fail@plt+0xfbfc>
   21e14:	mov	r9, r3
   21e18:	b	21b00 <__assert_fail@plt+0xfbb8>
   21e1c:	asr	r3, r7, #31
   21e20:	mov	r2, r7
   21e24:	cmp	r8, #0
   21e28:	mov	r1, #0
   21e2c:	strd	r2, [sp, #8]
   21e30:	umull	r2, r3, r9, r7
   21e34:	bne	21ed8 <__assert_fail@plt+0xff90>
   21e38:	mov	r0, r2
   21e3c:	mov	ip, r3
   21e40:	cmp	r1, #0
   21e44:	bne	21b44 <__assert_fail@plt+0xfbfc>
   21e48:	cmp	ip, #0
   21e4c:	bne	21f20 <__assert_fail@plt+0xffd8>
   21e50:	umull	r2, r3, r0, r7
   21e54:	mov	r6, r2
   21e58:	mov	r2, r3
   21e5c:	cmp	r1, #0
   21e60:	mov	r9, r6
   21e64:	mov	r8, r2
   21e68:	beq	21b00 <__assert_fail@plt+0xfbb8>
   21e6c:	b	21b44 <__assert_fail@plt+0xfbfc>
   21e70:	lsr	r3, r8, #22
   21e74:	lsl	r8, r8, #10
   21e78:	cmp	r3, #0
   21e7c:	lsl	r3, r9, #10
   21e80:	orr	r8, r8, r9, lsr #22
   21e84:	beq	21e14 <__assert_fail@plt+0xfecc>
   21e88:	b	21b44 <__assert_fail@plt+0xfbfc>
   21e8c:	mov	r5, ip
   21e90:	orr	r4, r0, r6
   21e94:	b	21b00 <__assert_fail@plt+0xfbb8>
   21e98:	strd	r2, [sp, #8]
   21e9c:	mov	r3, ip
   21ea0:	ldr	r2, [sp, #12]
   21ea4:	umlal	r2, r3, r8, r7
   21ea8:	cmp	r3, #0
   21eac:	bne	21fe0 <__assert_fail@plt+0x10098>
   21eb0:	mov	r8, r2
   21eb4:	ldr	r9, [sp, #8]
   21eb8:	b	21b3c <__assert_fail@plt+0xfbf4>
   21ebc:	orr	r4, r6, ip
   21ec0:	ldr	r5, [sp, #16]
   21ec4:	b	21b00 <__assert_fail@plt+0xfbb8>
   21ec8:	mov	r3, #2
   21ecc:	mov	r7, #1000	; 0x3e8
   21ed0:	str	r3, [sp, #4]
   21ed4:	b	219a8 <__assert_fail@plt+0xfa60>
   21ed8:	strd	r2, [sp, #16]
   21edc:	mov	r3, r1
   21ee0:	ldr	r2, [sp, #20]
   21ee4:	umlal	r2, r3, r8, r7
   21ee8:	cmp	r3, #0
   21eec:	bne	220b0 <__assert_fail@plt+0x10168>
   21ef0:	mov	ip, r2
   21ef4:	ldr	r0, [sp, #16]
   21ef8:	b	21e40 <__assert_fail@plt+0xfef8>
   21efc:	mov	r2, r1
   21f00:	mov	r3, ip
   21f04:	umlal	r2, r3, r8, r7
   21f08:	cmp	r3, #0
   21f0c:	strd	r2, [sp, #16]
   21f10:	bne	21f84 <__assert_fail@plt+0x1003c>
   21f14:	mov	r2, r0
   21f18:	ldr	r3, [sp, #16]
   21f1c:	b	21ab4 <__assert_fail@plt+0xfb6c>
   21f20:	umull	r8, r9, r0, r7
   21f24:	mov	r3, r1
   21f28:	mov	r2, r9
   21f2c:	umlal	r2, r3, ip, r7
   21f30:	cmp	r3, #0
   21f34:	bne	22090 <__assert_fail@plt+0x10148>
   21f38:	mov	r6, r8
   21f3c:	b	21e5c <__assert_fail@plt+0xff14>
   21f40:	umull	r8, r9, ip, r7
   21f44:	mov	r3, r0
   21f48:	mov	r2, r9
   21f4c:	umlal	r2, r3, r1, r7
   21f50:	cmp	r3, #0
   21f54:	bne	220d8 <__assert_fail@plt+0x10190>
   21f58:	mov	r6, r8
   21f5c:	b	21af0 <__assert_fail@plt+0xfba8>
   21f60:	umull	r8, r9, r2, r7
   21f64:	mov	r1, ip
   21f68:	mov	r0, r9
   21f6c:	umlal	r0, r1, r3, r7
   21f70:	cmp	r1, #0
   21f74:	bne	21fa4 <__assert_fail@plt+0x1005c>
   21f78:	mov	ip, r8
   21f7c:	mov	r1, r0
   21f80:	b	21ad4 <__assert_fail@plt+0xfb8c>
   21f84:	ldr	lr, [sp, #8]
   21f88:	mov	r2, r0
   21f8c:	mov	ip, #1
   21f90:	ldr	r3, [sp, #12]
   21f94:	mul	r3, r9, r3
   21f98:	mla	r3, lr, r8, r3
   21f9c:	add	r3, r3, r1
   21fa0:	b	21ab4 <__assert_fail@plt+0xfb6c>
   21fa4:	ldr	r1, [sp, #12]
   21fa8:	mov	lr, #1
   21fac:	mov	ip, r8
   21fb0:	mul	r1, r2, r1
   21fb4:	ldr	r2, [sp, #8]
   21fb8:	mla	r1, r3, r2, r1
   21fbc:	add	r1, r1, r9
   21fc0:	b	21ad4 <__assert_fail@plt+0xfb8c>
   21fc4:	ldrd	r2, [sp, #8]
   21fc8:	mov	r1, #1
   21fcc:	mul	r3, r9, r3
   21fd0:	mov	r9, r4
   21fd4:	mla	r8, r2, r8, r3
   21fd8:	add	r8, r8, r5
   21fdc:	b	21d98 <__assert_fail@plt+0xfe50>
   21fe0:	mul	r3, r9, r1
   21fe4:	mov	ip, #1
   21fe8:	mla	r8, r7, r8, r3
   21fec:	ldrd	r6, [sp, #8]
   21ff0:	mov	r9, r6
   21ff4:	add	r8, r8, r7
   21ff8:	b	21b3c <__assert_fail@plt+0xfbf4>
   21ffc:	movw	r3, #23100	; 0x5a3c
   22000:	movt	r3, #2
   22004:	movw	r1, #23112	; 0x5a48
   22008:	movt	r1, #2
   2200c:	movw	r0, #23128	; 0x5a58
   22010:	movt	r0, #2
   22014:	mov	r2, #85	; 0x55
   22018:	bl	11f48 <__assert_fail@plt>
   2201c:	ldr	r3, [sp, #12]
   22020:	mov	r1, #1
   22024:	mul	r2, r9, r3
   22028:	ldr	r3, [sp, #8]
   2202c:	mov	r9, r4
   22030:	mla	r8, r3, r8, r2
   22034:	add	r8, r8, r5
   22038:	b	21bb8 <__assert_fail@plt+0xfc70>
   2203c:	ldrd	r2, [sp, #8]
   22040:	mov	r1, #1
   22044:	mul	r3, r9, r3
   22048:	mov	r9, r4
   2204c:	mla	r8, r2, r8, r3
   22050:	add	r8, r8, r5
   22054:	b	21ca8 <__assert_fail@plt+0xfd60>
   22058:	ldrd	r2, [sp, #8]
   2205c:	mov	r1, #1
   22060:	mul	r3, r9, r3
   22064:	mov	r9, r4
   22068:	mla	r8, r2, r8, r3
   2206c:	add	r8, r8, r5
   22070:	b	21d20 <__assert_fail@plt+0xfdd8>
   22074:	ldrd	r2, [sp, #8]
   22078:	mov	r1, #1
   2207c:	mul	r3, r9, r3
   22080:	mov	r9, r4
   22084:	mla	r8, r2, r8, r3
   22088:	add	r8, r8, r5
   2208c:	b	21c30 <__assert_fail@plt+0xfce8>
   22090:	ldr	r3, [sp, #12]
   22094:	mov	r6, r8
   22098:	mov	r1, #1
   2209c:	mul	r2, r0, r3
   220a0:	ldr	r3, [sp, #8]
   220a4:	mla	r2, ip, r3, r2
   220a8:	add	r2, r2, r9
   220ac:	b	21e5c <__assert_fail@plt+0xff14>
   220b0:	ldr	r3, [sp, #12]
   220b4:	mov	r1, #1
   220b8:	ldr	r2, [sp, #16]
   220bc:	mul	ip, r9, r3
   220c0:	ldr	r3, [sp, #8]
   220c4:	mov	r0, r2
   220c8:	mla	ip, r3, r8, ip
   220cc:	ldr	r3, [sp, #20]
   220d0:	add	ip, ip, r3
   220d4:	b	21e40 <__assert_fail@plt+0xfef8>
   220d8:	ldr	r3, [sp, #12]
   220dc:	mov	r6, r8
   220e0:	mov	r0, #1
   220e4:	mul	r2, ip, r3
   220e8:	ldr	r3, [sp, #8]
   220ec:	mla	r2, r1, r3, r2
   220f0:	add	r2, r2, r9
   220f4:	b	21af0 <__assert_fail@plt+0xfba8>
   220f8:	cmp	r1, #0
   220fc:	cmpne	r0, #0
   22100:	beq	2214c <__assert_fail@plt+0x10204>
   22104:	strd	r4, [sp, #-16]!
   22108:	umull	r4, r5, r0, r1
   2210c:	str	r6, [sp, #8]
   22110:	str	lr, [sp, #12]
   22114:	adds	r3, r5, #0
   22118:	movne	r3, #1
   2211c:	cmp	r4, #0
   22120:	blt	2212c <__assert_fail@plt+0x101e4>
   22124:	cmp	r3, #0
   22128:	beq	22158 <__assert_fail@plt+0x10210>
   2212c:	bl	11d74 <__errno_location@plt>
   22130:	mov	r3, #12
   22134:	ldrd	r4, [sp]
   22138:	ldr	r6, [sp, #8]
   2213c:	add	sp, sp, #12
   22140:	str	r3, [r0]
   22144:	mov	r0, #0
   22148:	pop	{pc}		; (ldr pc, [sp], #4)
   2214c:	mov	r1, #1
   22150:	mov	r0, r1
   22154:	b	11a08 <calloc@plt>
   22158:	ldrd	r4, [sp]
   2215c:	ldr	r6, [sp, #8]
   22160:	ldr	lr, [sp, #12]
   22164:	add	sp, sp, #16
   22168:	b	11a08 <calloc@plt>
   2216c:	cmp	r0, #0
   22170:	beq	2217c <__assert_fail@plt+0x10234>
   22174:	blt	22184 <__assert_fail@plt+0x1023c>
   22178:	b	11cd8 <malloc@plt>
   2217c:	mov	r0, #1
   22180:	b	11cd8 <malloc@plt>
   22184:	str	r4, [sp, #-8]!
   22188:	str	lr, [sp, #4]
   2218c:	bl	11d74 <__errno_location@plt>
   22190:	mov	r3, #12
   22194:	ldr	r4, [sp]
   22198:	add	sp, sp, #4
   2219c:	str	r3, [r0]
   221a0:	mov	r0, #0
   221a4:	pop	{pc}		; (ldr pc, [sp], #4)
   221a8:	cmp	r0, #0
   221ac:	beq	221d4 <__assert_fail@plt+0x1028c>
   221b0:	cmp	r1, #0
   221b4:	str	r4, [sp, #-8]!
   221b8:	str	lr, [sp, #4]
   221bc:	beq	221dc <__assert_fail@plt+0x10294>
   221c0:	blt	221f0 <__assert_fail@plt+0x102a8>
   221c4:	ldr	r4, [sp]
   221c8:	ldr	lr, [sp, #4]
   221cc:	add	sp, sp, #8
   221d0:	b	11ba0 <realloc@plt>
   221d4:	mov	r0, r1
   221d8:	b	2216c <__assert_fail@plt+0x10224>
   221dc:	bl	1b670 <__assert_fail@plt+0x9728>
   221e0:	ldr	r4, [sp]
   221e4:	add	sp, sp, #4
   221e8:	mov	r0, #0
   221ec:	pop	{pc}		; (ldr pc, [sp], #4)
   221f0:	bl	11d74 <__errno_location@plt>
   221f4:	mov	r3, #12
   221f8:	str	r3, [r0]
   221fc:	b	221e0 <__assert_fail@plt+0x10298>
   22200:	strd	r4, [sp, #-16]!
   22204:	mov	r4, r0
   22208:	str	r6, [sp, #8]
   2220c:	str	lr, [sp, #12]
   22210:	bl	11c78 <__fpending@plt>
   22214:	ldr	r5, [r4]
   22218:	mov	r6, r0
   2221c:	mov	r0, r4
   22220:	bl	1b0c4 <__assert_fail@plt+0x917c>
   22224:	mov	r4, r0
   22228:	and	r5, r5, #32
   2222c:	cmp	r5, #0
   22230:	bne	22268 <__assert_fail@plt+0x10320>
   22234:	cmp	r0, #0
   22238:	beq	22254 <__assert_fail@plt+0x1030c>
   2223c:	cmp	r6, #0
   22240:	bne	22280 <__assert_fail@plt+0x10338>
   22244:	bl	11d74 <__errno_location@plt>
   22248:	ldr	r4, [r0]
   2224c:	subs	r4, r4, #9
   22250:	mvnne	r4, #0
   22254:	mov	r0, r4
   22258:	ldrd	r4, [sp]
   2225c:	ldr	r6, [sp, #8]
   22260:	add	sp, sp, #12
   22264:	pop	{pc}		; (ldr pc, [sp], #4)
   22268:	cmp	r0, #0
   2226c:	bne	22280 <__assert_fail@plt+0x10338>
   22270:	bl	11d74 <__errno_location@plt>
   22274:	str	r4, [r0]
   22278:	mvn	r4, #0
   2227c:	b	22254 <__assert_fail@plt+0x1030c>
   22280:	mvn	r4, #0
   22284:	b	22254 <__assert_fail@plt+0x1030c>
   22288:	vldr	d7, [pc, #176]	; 22340 <__assert_fail@plt+0x103f8>
   2228c:	vcmpe.f64	d0, d7
   22290:	vmrs	APSR_nzcv, fpscr
   22294:	ble	22330 <__assert_fail@plt+0x103e8>
   22298:	vldr	d7, [pc, #168]	; 22348 <__assert_fail@plt+0x10400>
   2229c:	vcmpe.f64	d0, d7
   222a0:	vmrs	APSR_nzcv, fpscr
   222a4:	bmi	222bc <__assert_fail@plt+0x10374>
   222a8:	mvn	r2, #-2147483648	; 0x80000000
   222ac:	movw	r3, #51711	; 0xc9ff
   222b0:	movt	r3, #15258	; 0x3b9a
   222b4:	strd	r2, [r0]
   222b8:	bx	lr
   222bc:	vcvt.s32.f64	s15, d0
   222c0:	vldr	d6, [pc, #136]	; 22350 <__assert_fail@plt+0x10408>
   222c4:	movw	r1, #12193	; 0x2fa1
   222c8:	movt	r1, #17592	; 0x44b8
   222cc:	push	{lr}		; (str lr, [sp, #-4]!)
   222d0:	mov	ip, #51712	; 0xca00
   222d4:	movt	ip, #15258	; 0x3b9a
   222d8:	vcvt.f64.s32	d5, s15
   222dc:	vsub.f64	d0, d0, d5
   222e0:	vmul.f64	d0, d0, d6
   222e4:	vcvt.s32.f64	s14, d0
   222e8:	vcvt.f64.s32	d6, s14
   222ec:	vmov	r3, s14
   222f0:	vcmpe.f64	d6, d0
   222f4:	vmrs	APSR_nzcv, fpscr
   222f8:	movmi	r2, #1
   222fc:	movpl	r2, #0
   22300:	add	r2, r2, r3
   22304:	asr	r3, r2, #31
   22308:	smull	lr, r1, r1, r2
   2230c:	rsb	r3, r3, r1, asr #28
   22310:	vmov	r1, s15
   22314:	add	r1, r3, r1
   22318:	mls	r3, ip, r3, r2
   2231c:	cmp	r3, #0
   22320:	sublt	r1, r1, #1
   22324:	addlt	r3, r3, ip
   22328:	stm	r0, {r1, r3}
   2232c:	pop	{pc}		; (ldr pc, [sp], #4)
   22330:	mov	r2, #-2147483648	; 0x80000000
   22334:	mov	r3, #0
   22338:	strd	r2, [r0]
   2233c:	bx	lr
   22340:	andeq	r0, r0, r0
   22344:	mvngt	r0, r0
   22348:	andeq	r0, r0, r0
   2234c:	mvnmi	r0, r0
   22350:	andeq	r0, r0, r0
   22354:	bicmi	ip, sp, r5, ror #26
   22358:	push	{r1, r2, r3}
   2235c:	strd	r4, [sp, #-20]!	; 0xffffffec
   22360:	strd	r6, [sp, #8]
   22364:	str	lr, [sp, #16]
   22368:	sub	sp, sp, #8
   2236c:	ldr	r1, [sp, #28]
   22370:	add	r2, sp, #32
   22374:	str	r2, [sp, #4]
   22378:	cmp	r1, #0
   2237c:	beq	22458 <__assert_fail@plt+0x10510>
   22380:	movw	r3, #1030	; 0x406
   22384:	mov	r6, r0
   22388:	cmp	r1, r3
   2238c:	beq	22468 <__assert_fail@plt+0x10520>
   22390:	cmp	r1, #11
   22394:	beq	22410 <__assert_fail@plt+0x104c8>
   22398:	ble	223f0 <__assert_fail@plt+0x104a8>
   2239c:	movw	r2, #1031	; 0x407
   223a0:	cmp	r1, r2
   223a4:	bgt	2242c <__assert_fail@plt+0x104e4>
   223a8:	cmp	r1, r3
   223ac:	bge	223bc <__assert_fail@plt+0x10474>
   223b0:	movw	r3, #1025	; 0x401
   223b4:	cmp	r1, r3
   223b8:	beq	22410 <__assert_fail@plt+0x104c8>
   223bc:	ldr	r3, [sp, #4]
   223c0:	mov	r0, r6
   223c4:	ldr	r2, [r3]
   223c8:	bl	11e10 <fcntl64@plt>
   223cc:	mov	r4, r0
   223d0:	mov	r0, r4
   223d4:	add	sp, sp, #8
   223d8:	ldrd	r4, [sp]
   223dc:	ldrd	r6, [sp, #8]
   223e0:	ldr	lr, [sp, #16]
   223e4:	add	sp, sp, #20
   223e8:	add	sp, sp, #12
   223ec:	bx	lr
   223f0:	cmp	r1, #4
   223f4:	beq	223bc <__assert_fail@plt+0x10474>
   223f8:	bgt	22420 <__assert_fail@plt+0x104d8>
   223fc:	cmp	r1, #2
   22400:	beq	223bc <__assert_fail@plt+0x10474>
   22404:	bgt	22410 <__assert_fail@plt+0x104c8>
   22408:	cmp	r1, #1
   2240c:	bne	223bc <__assert_fail@plt+0x10474>
   22410:	mov	r0, r6
   22414:	bl	11e10 <fcntl64@plt>
   22418:	mov	r4, r0
   2241c:	b	223d0 <__assert_fail@plt+0x10488>
   22420:	cmp	r1, #9
   22424:	bne	223bc <__assert_fail@plt+0x10474>
   22428:	b	22410 <__assert_fail@plt+0x104c8>
   2242c:	movw	r3, #1033	; 0x409
   22430:	cmp	r1, r3
   22434:	beq	223bc <__assert_fail@plt+0x10474>
   22438:	blt	22410 <__assert_fail@plt+0x104c8>
   2243c:	movw	r3, #1034	; 0x40a
   22440:	cmp	r1, r3
   22444:	bne	223bc <__assert_fail@plt+0x10474>
   22448:	mov	r0, r6
   2244c:	bl	11e10 <fcntl64@plt>
   22450:	mov	r4, r0
   22454:	b	223d0 <__assert_fail@plt+0x10488>
   22458:	ldr	r2, [sp, #32]
   2245c:	bl	11e10 <fcntl64@plt>
   22460:	mov	r4, r0
   22464:	b	223d0 <__assert_fail@plt+0x10488>
   22468:	movw	r5, #27136	; 0x6a00
   2246c:	movt	r5, #3
   22470:	ldr	r7, [r2]
   22474:	add	r2, sp, #36	; 0x24
   22478:	ldr	r3, [r5]
   2247c:	str	r2, [sp, #4]
   22480:	mov	r2, r7
   22484:	cmp	r3, #0
   22488:	blt	224a4 <__assert_fail@plt+0x1055c>
   2248c:	bl	11e10 <fcntl64@plt>
   22490:	subs	r4, r0, #0
   22494:	blt	2250c <__assert_fail@plt+0x105c4>
   22498:	mov	r3, #1
   2249c:	str	r3, [r5]
   224a0:	b	223d0 <__assert_fail@plt+0x10488>
   224a4:	mov	r1, #0
   224a8:	bl	11e10 <fcntl64@plt>
   224ac:	subs	r4, r0, #0
   224b0:	blt	223d0 <__assert_fail@plt+0x10488>
   224b4:	ldr	r3, [r5]
   224b8:	cmn	r3, #1
   224bc:	bne	223d0 <__assert_fail@plt+0x10488>
   224c0:	mov	r1, #1
   224c4:	mov	r0, r4
   224c8:	bl	11e10 <fcntl64@plt>
   224cc:	subs	r2, r0, #0
   224d0:	blt	224ec <__assert_fail@plt+0x105a4>
   224d4:	orr	r2, r2, #1
   224d8:	mov	r1, #2
   224dc:	mov	r0, r4
   224e0:	bl	11e10 <fcntl64@plt>
   224e4:	cmn	r0, #1
   224e8:	bne	223d0 <__assert_fail@plt+0x10488>
   224ec:	bl	11d74 <__errno_location@plt>
   224f0:	mov	r5, r0
   224f4:	mov	r0, r4
   224f8:	ldr	r6, [r5]
   224fc:	mvn	r4, #0
   22500:	bl	11f30 <close@plt>
   22504:	str	r6, [r5]
   22508:	b	223d0 <__assert_fail@plt+0x10488>
   2250c:	bl	11d74 <__errno_location@plt>
   22510:	ldr	r3, [r0]
   22514:	cmp	r3, #22
   22518:	bne	22498 <__assert_fail@plt+0x10550>
   2251c:	mov	r2, r7
   22520:	mov	r0, r6
   22524:	mov	r1, #0
   22528:	bl	11e10 <fcntl64@plt>
   2252c:	subs	r4, r0, #0
   22530:	mvnge	r3, #0
   22534:	strge	r3, [r5]
   22538:	bge	224c0 <__assert_fail@plt+0x10578>
   2253c:	b	223d0 <__assert_fail@plt+0x10488>
   22540:	cmp	r0, #2
   22544:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22548:	mov	r4, r0
   2254c:	strd	r6, [sp, #8]
   22550:	str	r8, [sp, #16]
   22554:	str	lr, [sp, #20]
   22558:	bls	22574 <__assert_fail@plt+0x1062c>
   2255c:	mov	r0, r4
   22560:	ldrd	r4, [sp]
   22564:	ldrd	r6, [sp, #8]
   22568:	ldr	r8, [sp, #16]
   2256c:	add	sp, sp, #20
   22570:	pop	{pc}		; (ldr pc, [sp], #4)
   22574:	bl	2259c <__assert_fail@plt+0x10654>
   22578:	mov	r7, r0
   2257c:	bl	11d74 <__errno_location@plt>
   22580:	mov	r5, r0
   22584:	mov	r0, r4
   22588:	ldr	r6, [r5]
   2258c:	mov	r4, r7
   22590:	bl	11f30 <close@plt>
   22594:	str	r6, [r5]
   22598:	b	2255c <__assert_fail@plt+0x10614>
   2259c:	ands	r1, r1, #524288	; 0x80000
   225a0:	movw	r3, #1030	; 0x406
   225a4:	movne	r1, r3
   225a8:	mov	r2, #3
   225ac:	b	22358 <__assert_fail@plt+0x10410>
   225b0:	strd	r4, [sp, #-16]!
   225b4:	mov	r5, r1
   225b8:	str	r6, [sp, #8]
   225bc:	str	lr, [sp, #12]
   225c0:	bl	11e94 <fopen64@plt>
   225c4:	subs	r4, r0, #0
   225c8:	beq	225d8 <__assert_fail@plt+0x10690>
   225cc:	bl	11dc8 <fileno@plt>
   225d0:	cmp	r0, #2
   225d4:	bls	225ec <__assert_fail@plt+0x106a4>
   225d8:	mov	r0, r4
   225dc:	ldrd	r4, [sp]
   225e0:	ldr	r6, [sp, #8]
   225e4:	add	sp, sp, #12
   225e8:	pop	{pc}		; (ldr pc, [sp], #4)
   225ec:	bl	22cf8 <_obstack_memory_used@@Base+0x6c>
   225f0:	subs	r6, r0, #0
   225f4:	blt	2263c <__assert_fail@plt+0x106f4>
   225f8:	mov	r0, r4
   225fc:	bl	1b0c4 <__assert_fail@plt+0x917c>
   22600:	cmp	r0, #0
   22604:	bne	2261c <__assert_fail@plt+0x106d4>
   22608:	mov	r1, r5
   2260c:	mov	r0, r6
   22610:	bl	119fc <fdopen@plt>
   22614:	subs	r4, r0, #0
   22618:	bne	225d8 <__assert_fail@plt+0x10690>
   2261c:	bl	11d74 <__errno_location@plt>
   22620:	mov	r5, r0
   22624:	mov	r0, r6
   22628:	ldr	r6, [r5]
   2262c:	mov	r4, #0
   22630:	bl	11f30 <close@plt>
   22634:	str	r6, [r5]
   22638:	b	225d8 <__assert_fail@plt+0x10690>
   2263c:	bl	11d74 <__errno_location@plt>
   22640:	mov	r5, r0
   22644:	mov	r0, r4
   22648:	ldr	r6, [r5]
   2264c:	mov	r4, #0
   22650:	bl	1b0c4 <__assert_fail@plt+0x917c>
   22654:	str	r6, [r5]
   22658:	b	225d8 <__assert_fail@plt+0x10690>
   2265c:	mov	r0, #14
   22660:	str	r4, [sp, #-8]!
   22664:	str	lr, [sp, #4]
   22668:	bl	11e70 <nl_langinfo@plt>
   2266c:	cmp	r0, #0
   22670:	beq	22694 <__assert_fail@plt+0x1074c>
   22674:	ldrb	r2, [r0]
   22678:	movw	r3, #23168	; 0x5a80
   2267c:	movt	r3, #2
   22680:	ldr	r4, [sp]
   22684:	add	sp, sp, #4
   22688:	cmp	r2, #0
   2268c:	moveq	r0, r3
   22690:	pop	{pc}		; (ldr pc, [sp], #4)
   22694:	ldr	r4, [sp]
   22698:	add	sp, sp, #4
   2269c:	movw	r0, #23168	; 0x5a80
   226a0:	movt	r0, #2
   226a4:	pop	{pc}		; (ldr pc, [sp], #4)
   226a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   226ac:	mov	r5, r2
   226b0:	strd	r6, [sp, #8]
   226b4:	subs	r6, r0, #0
   226b8:	mov	r7, r1
   226bc:	str	lr, [sp, #16]
   226c0:	sub	sp, sp, #12
   226c4:	addeq	r6, sp, #4
   226c8:	mov	r0, r6
   226cc:	bl	11c84 <mbrtowc@plt>
   226d0:	cmp	r5, #0
   226d4:	cmnne	r0, #3
   226d8:	mov	r4, r0
   226dc:	bhi	226f8 <__assert_fail@plt+0x107b0>
   226e0:	mov	r0, r4
   226e4:	add	sp, sp, #12
   226e8:	ldrd	r4, [sp]
   226ec:	ldrd	r6, [sp, #8]
   226f0:	add	sp, sp, #16
   226f4:	pop	{pc}		; (ldr pc, [sp], #4)
   226f8:	mov	r0, #0
   226fc:	bl	1b7a0 <__assert_fail@plt+0x9858>
   22700:	cmp	r0, #0
   22704:	bne	226e0 <__assert_fail@plt+0x10798>
   22708:	ldrb	r3, [r7]
   2270c:	mov	r4, #1
   22710:	str	r3, [r6]
   22714:	b	226e0 <__assert_fail@plt+0x10798>
   22718:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2271c:	mov	r4, r0
   22720:	mov	r5, r2
   22724:	strd	r6, [sp, #8]
   22728:	mov	r7, r3
   2272c:	strd	r8, [sp, #16]
   22730:	mov	r8, r1
   22734:	str	sl, [sp, #24]
   22738:	mov	sl, #0
   2273c:	str	lr, [sp, #28]
   22740:	bl	11d74 <__errno_location@plt>
   22744:	mov	r9, r0
   22748:	b	2277c <__assert_fail@plt+0x10834>
   2274c:	bl	11d50 <strlen@plt>
   22750:	add	r6, r0, #1
   22754:	mov	r0, r5
   22758:	bl	11d50 <strlen@plt>
   2275c:	add	r0, r0, #1
   22760:	subs	r8, r8, r6
   22764:	add	r4, r4, r6
   22768:	add	r5, r5, r0
   2276c:	sub	r7, r7, r0
   22770:	beq	227b4 <__assert_fail@plt+0x1086c>
   22774:	cmp	r7, #0
   22778:	beq	227c4 <__assert_fail@plt+0x1087c>
   2277c:	mov	r1, r5
   22780:	mov	r0, r4
   22784:	str	sl, [r9]
   22788:	bl	11ca8 <strcoll@plt>
   2278c:	subs	r3, r0, #0
   22790:	mov	r0, r4
   22794:	beq	2274c <__assert_fail@plt+0x10804>
   22798:	ldrd	r4, [sp]
   2279c:	mov	r0, r3
   227a0:	ldrd	r6, [sp, #8]
   227a4:	ldrd	r8, [sp, #16]
   227a8:	ldr	sl, [sp, #24]
   227ac:	add	sp, sp, #28
   227b0:	pop	{pc}		; (ldr pc, [sp], #4)
   227b4:	adds	r7, r7, #0
   227b8:	movne	r7, #1
   227bc:	rsb	r3, r7, #0
   227c0:	b	22798 <__assert_fail@plt+0x10850>
   227c4:	mov	r3, #1
   227c8:	b	22798 <__assert_fail@plt+0x10850>
   227cc:	cmp	r1, r3
   227d0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   227d4:	mov	r4, r1
   227d8:	mov	r5, r3
   227dc:	strd	r6, [sp, #8]
   227e0:	mov	r6, r2
   227e4:	mov	r7, r0
   227e8:	strd	r8, [sp, #16]
   227ec:	str	sl, [sp, #24]
   227f0:	str	lr, [sp, #28]
   227f4:	bne	2280c <__assert_fail@plt+0x108c4>
   227f8:	mov	r2, r1
   227fc:	mov	r1, r6
   22800:	bl	11b40 <memcmp@plt>
   22804:	subs	r8, r0, #0
   22808:	beq	2285c <__assert_fail@plt+0x10914>
   2280c:	mov	ip, #0
   22810:	ldrb	sl, [r7, r4]
   22814:	add	r3, r5, #1
   22818:	mov	r2, r6
   2281c:	add	r1, r4, #1
   22820:	ldrb	r9, [r6, r5]
   22824:	mov	r0, r7
   22828:	strb	ip, [r7, r4]
   2282c:	strb	ip, [r6, r5]
   22830:	bl	22718 <__assert_fail@plt+0x107d0>
   22834:	mov	r8, r0
   22838:	strb	sl, [r7, r4]
   2283c:	strb	r9, [r6, r5]
   22840:	mov	r0, r8
   22844:	ldrd	r4, [sp]
   22848:	ldrd	r6, [sp, #8]
   2284c:	ldrd	r8, [sp, #16]
   22850:	ldr	sl, [sp, #24]
   22854:	add	sp, sp, #28
   22858:	pop	{pc}		; (ldr pc, [sp], #4)
   2285c:	bl	11d74 <__errno_location@plt>
   22860:	str	r8, [r0]
   22864:	b	22840 <__assert_fail@plt+0x108f8>
   22868:	cmp	r1, r3
   2286c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22870:	mov	r4, r1
   22874:	mov	r5, r3
   22878:	strd	r6, [sp, #8]
   2287c:	mov	r6, r2
   22880:	mov	r7, r0
   22884:	str	r8, [sp, #16]
   22888:	str	lr, [sp, #20]
   2288c:	bne	228c4 <__assert_fail@plt+0x1097c>
   22890:	mov	r2, r1
   22894:	mov	r1, r6
   22898:	bl	11b40 <memcmp@plt>
   2289c:	subs	r8, r0, #0
   228a0:	bne	228c4 <__assert_fail@plt+0x1097c>
   228a4:	bl	11d74 <__errno_location@plt>
   228a8:	ldrd	r4, [sp]
   228ac:	ldrd	r6, [sp, #8]
   228b0:	str	r8, [r0]
   228b4:	mov	r0, r8
   228b8:	ldr	r8, [sp, #16]
   228bc:	add	sp, sp, #20
   228c0:	pop	{pc}		; (ldr pc, [sp], #4)
   228c4:	mov	r3, r5
   228c8:	mov	r2, r6
   228cc:	ldr	r8, [sp, #16]
   228d0:	mov	r1, r4
   228d4:	mov	r0, r7
   228d8:	ldrd	r4, [sp]
   228dc:	ldrd	r6, [sp, #8]
   228e0:	ldr	lr, [sp, #20]
   228e4:	add	sp, sp, #24
   228e8:	b	22718 <__assert_fail@plt+0x107d0>
   228ec:	movw	r3, #25288	; 0x62c8
   228f0:	movt	r3, #3
   228f4:	str	r4, [sp, #-8]!
   228f8:	ldr	r4, [r3]
   228fc:	mov	r2, #5
   22900:	movw	r1, #22848	; 0x5940
   22904:	movt	r1, #2
   22908:	mov	r0, #0
   2290c:	str	lr, [sp, #4]
   22910:	bl	11b58 <dcgettext@plt>
   22914:	mov	r3, r0
   22918:	movw	r2, #22060	; 0x562c
   2291c:	movt	r2, #2
   22920:	mov	r1, #1
   22924:	mov	r0, r4
   22928:	bl	11dd4 <__fprintf_chk@plt>
   2292c:	movw	r3, #25200	; 0x6270
   22930:	movt	r3, #3
   22934:	ldr	r0, [r3]
   22938:	bl	11d38 <exit@plt>
   2293c:	ldrb	r2, [r0, #40]	; 0x28
   22940:	ldr	r3, [r0, #28]
   22944:	tst	r2, #1
   22948:	beq	22954 <__assert_fail@plt+0x10a0c>
   2294c:	ldr	r0, [r0, #36]	; 0x24
   22950:	bx	r3
   22954:	mov	r0, r1
   22958:	bx	r3
   2295c:	ldrb	r2, [r0, #40]	; 0x28
   22960:	ldr	r3, [r0, #32]
   22964:	tst	r2, #1
   22968:	beq	22974 <__assert_fail@plt+0x10a2c>
   2296c:	ldr	r0, [r0, #36]	; 0x24
   22970:	bx	r3
   22974:	mov	r0, r1
   22978:	bx	r3
   2297c:	strd	r4, [sp, #-16]!
   22980:	subs	r5, r2, #0
   22984:	movw	r2, #4072	; 0xfe8
   22988:	moveq	r5, #8
   2298c:	str	r6, [sp, #8]
   22990:	subne	r6, r5, #1
   22994:	moveq	r6, #7
   22998:	cmp	r1, #0
   2299c:	str	lr, [sp, #12]
   229a0:	mov	r3, r1
   229a4:	moveq	r3, r2
   229a8:	mov	r1, r3
   229ac:	mov	r4, r0
   229b0:	str	r3, [r0]
   229b4:	str	r6, [r0, #24]
   229b8:	bl	2293c <__assert_fail@plt+0x109f4>
   229bc:	cmp	r0, #0
   229c0:	mov	r3, r0
   229c4:	str	r0, [r4, #4]
   229c8:	beq	22a1c <__assert_fail@plt+0x10ad4>
   229cc:	ldrb	lr, [r4, #40]	; 0x28
   229d0:	add	r1, r0, #8
   229d4:	rsb	r2, r5, #0
   229d8:	add	r1, r1, r6
   229dc:	mov	r5, #0
   229e0:	ldr	ip, [r4]
   229e4:	and	r2, r2, r1
   229e8:	mov	r0, #1
   229ec:	ldr	r6, [sp, #8]
   229f0:	bic	lr, lr, #6
   229f4:	str	r2, [r4, #8]
   229f8:	str	r2, [r4, #12]
   229fc:	add	r2, r3, ip
   22a00:	str	r2, [r3]
   22a04:	str	r2, [r4, #16]
   22a08:	str	r5, [r3, #4]
   22a0c:	strb	lr, [r4, #40]	; 0x28
   22a10:	ldrd	r4, [sp]
   22a14:	add	sp, sp, #12
   22a18:	pop	{pc}		; (ldr pc, [sp], #4)
   22a1c:	movw	r3, #25268	; 0x62b4
   22a20:	movt	r3, #3
   22a24:	ldr	r3, [r3]
   22a28:	blx	r3

00022a2c <_obstack_begin@@Base>:
   22a2c:	str	r4, [sp, #-8]!
   22a30:	str	lr, [sp, #4]
   22a34:	ldrb	lr, [r0, #40]	; 0x28
   22a38:	str	r3, [r0, #28]
   22a3c:	ldr	r4, [sp, #8]
   22a40:	bfc	lr, #0, #1
   22a44:	str	r4, [r0, #32]
   22a48:	ldr	r4, [sp]
   22a4c:	strb	lr, [r0, #40]	; 0x28
   22a50:	ldr	lr, [sp, #4]
   22a54:	add	sp, sp, #8
   22a58:	b	2297c <__assert_fail@plt+0x10a34>

00022a5c <_obstack_begin_1@@Base>:
   22a5c:	str	r4, [sp, #-8]!
   22a60:	str	lr, [sp, #4]
   22a64:	ldrb	lr, [r0, #40]	; 0x28
   22a68:	str	r3, [r0, #28]
   22a6c:	ldr	r4, [sp, #8]
   22a70:	ldr	r3, [sp, #12]
   22a74:	orr	lr, lr, #1
   22a78:	str	r4, [r0, #32]
   22a7c:	ldr	r4, [sp]
   22a80:	str	r3, [r0, #36]	; 0x24
   22a84:	strb	lr, [r0, #40]	; 0x28
   22a88:	ldr	lr, [sp, #4]
   22a8c:	add	sp, sp, #8
   22a90:	b	2297c <__assert_fail@plt+0x10a34>

00022a94 <_obstack_newchunk@@Base>:
   22a94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22a98:	ldr	r2, [r0, #8]
   22a9c:	ldr	r3, [r0, #24]
   22aa0:	strd	r6, [sp, #8]
   22aa4:	str	r8, [sp, #16]
   22aa8:	ldr	r6, [r0, #12]
   22aac:	str	lr, [sp, #20]
   22ab0:	ldr	lr, [r0]
   22ab4:	ldr	r7, [r0, #4]
   22ab8:	sub	r6, r6, r2
   22abc:	adds	r1, r6, r1
   22ac0:	movcs	ip, #1
   22ac4:	movcc	ip, #0
   22ac8:	adds	r3, r3, r1
   22acc:	eor	ip, ip, #1
   22ad0:	add	r4, r3, r6, lsr #3
   22ad4:	movcs	r2, #1
   22ad8:	movcc	r2, #0
   22adc:	cmp	r3, lr
   22ae0:	eor	r2, r2, #1
   22ae4:	add	r4, r4, #100	; 0x64
   22ae8:	movcc	r3, lr
   22aec:	cmp	r3, r4
   22af0:	movcs	r4, r3
   22af4:	tst	ip, r2
   22af8:	beq	22bb0 <_obstack_newchunk@@Base+0x11c>
   22afc:	mov	r1, r4
   22b00:	mov	r5, r0
   22b04:	bl	2293c <__assert_fail@plt+0x109f4>
   22b08:	subs	r8, r0, #0
   22b0c:	beq	22bb0 <_obstack_newchunk@@Base+0x11c>
   22b10:	add	r3, r8, r4
   22b14:	mov	r4, r8
   22b18:	str	r8, [r5, #4]
   22b1c:	ldr	r0, [r5, #24]
   22b20:	mov	r2, r6
   22b24:	ldr	r1, [r5, #8]
   22b28:	str	r7, [r8, #4]
   22b2c:	str	r3, [r5, #16]
   22b30:	str	r3, [r4], #8
   22b34:	add	r4, r4, r0
   22b38:	bic	r4, r4, r0
   22b3c:	mov	r0, r4
   22b40:	bl	11ac8 <memcpy@plt>
   22b44:	ldrb	r3, [r5, #40]	; 0x28
   22b48:	tst	r3, #2
   22b4c:	bne	22b6c <_obstack_newchunk@@Base+0xd8>
   22b50:	ldr	r1, [r5, #8]
   22b54:	add	r3, r7, #8
   22b58:	ldr	r2, [r5, #24]
   22b5c:	add	r3, r3, r2
   22b60:	bic	r3, r3, r2
   22b64:	cmp	r1, r3
   22b68:	beq	22b98 <_obstack_newchunk@@Base+0x104>
   22b6c:	ldrb	r3, [r5, #40]	; 0x28
   22b70:	add	r6, r4, r6
   22b74:	ldr	r8, [sp, #16]
   22b78:	str	r4, [r5, #8]
   22b7c:	str	r6, [r5, #12]
   22b80:	bfc	r3, #1, #1
   22b84:	ldrd	r6, [sp, #8]
   22b88:	strb	r3, [r5, #40]	; 0x28
   22b8c:	ldrd	r4, [sp]
   22b90:	add	sp, sp, #20
   22b94:	pop	{pc}		; (ldr pc, [sp], #4)
   22b98:	ldr	r3, [r7, #4]
   22b9c:	mov	r1, r7
   22ba0:	mov	r0, r5
   22ba4:	str	r3, [r8, #4]
   22ba8:	bl	2295c <__assert_fail@plt+0x10a14>
   22bac:	b	22b6c <_obstack_newchunk@@Base+0xd8>
   22bb0:	movw	r3, #25268	; 0x62b4
   22bb4:	movt	r3, #3
   22bb8:	ldr	r3, [r3]
   22bbc:	blx	r3

00022bc0 <_obstack_allocated_p@@Base>:
   22bc0:	ldr	r0, [r0, #4]
   22bc4:	cmp	r0, #0
   22bc8:	beq	22bf8 <_obstack_allocated_p@@Base+0x38>
   22bcc:	cmp	r1, r0
   22bd0:	bls	22be0 <_obstack_allocated_p@@Base+0x20>
   22bd4:	ldr	r3, [r0]
   22bd8:	cmp	r3, r1
   22bdc:	bcs	22bf0 <_obstack_allocated_p@@Base+0x30>
   22be0:	ldr	r0, [r0, #4]
   22be4:	cmp	r0, #0
   22be8:	bne	22bcc <_obstack_allocated_p@@Base+0xc>
   22bec:	bx	lr
   22bf0:	mov	r0, #1
   22bf4:	bx	lr
   22bf8:	bx	lr

00022bfc <_obstack_free@@Base>:
   22bfc:	strd	r4, [sp, #-16]!
   22c00:	ldr	r4, [r0, #4]
   22c04:	str	r6, [sp, #8]
   22c08:	mov	r6, r1
   22c0c:	str	lr, [sp, #12]
   22c10:	cmp	r4, #0
   22c14:	movne	r5, r0
   22c18:	beq	22c54 <_obstack_free@@Base+0x58>
   22c1c:	cmp	r4, r6
   22c20:	bcs	22c30 <_obstack_free@@Base+0x34>
   22c24:	ldr	r2, [r4]
   22c28:	cmp	r2, r6
   22c2c:	bcs	22c6c <_obstack_free@@Base+0x70>
   22c30:	mov	r1, r4
   22c34:	mov	r0, r5
   22c38:	ldr	r4, [r4, #4]
   22c3c:	bl	2295c <__assert_fail@plt+0x10a14>
   22c40:	ldrb	r2, [r5, #40]	; 0x28
   22c44:	cmp	r4, #0
   22c48:	orr	r2, r2, #2
   22c4c:	strb	r2, [r5, #40]	; 0x28
   22c50:	bne	22c1c <_obstack_free@@Base+0x20>
   22c54:	cmp	r6, #0
   22c58:	bne	22c88 <_obstack_free@@Base+0x8c>
   22c5c:	ldrd	r4, [sp]
   22c60:	ldr	r6, [sp, #8]
   22c64:	add	sp, sp, #12
   22c68:	pop	{pc}		; (ldr pc, [sp], #4)
   22c6c:	stmib	r5, {r4, r6}
   22c70:	str	r6, [r5, #12]
   22c74:	str	r2, [r5, #16]
   22c78:	ldrd	r4, [sp]
   22c7c:	ldr	r6, [sp, #8]
   22c80:	add	sp, sp, #12
   22c84:	pop	{pc}		; (ldr pc, [sp], #4)
   22c88:	bl	11f24 <abort@plt>

00022c8c <_obstack_memory_used@@Base>:
   22c8c:	ldr	r3, [r0, #4]
   22c90:	cmp	r3, #0
   22c94:	beq	22cb8 <_obstack_memory_used@@Base+0x2c>
   22c98:	mov	r0, #0
   22c9c:	ldr	r2, [r3]
   22ca0:	sub	r2, r2, r3
   22ca4:	ldr	r3, [r3, #4]
   22ca8:	add	r0, r0, r2
   22cac:	cmp	r3, #0
   22cb0:	bne	22c9c <_obstack_memory_used@@Base+0x10>
   22cb4:	bx	lr
   22cb8:	mov	r0, r3
   22cbc:	bx	lr
   22cc0:	umull	r2, r3, r1, r2
   22cc4:	cmp	r3, #0
   22cc8:	bne	22cd4 <_obstack_memory_used@@Base+0x48>
   22ccc:	mov	r1, r2
   22cd0:	b	221a8 <__assert_fail@plt+0x10260>
   22cd4:	str	r4, [sp, #-8]!
   22cd8:	str	lr, [sp, #4]
   22cdc:	bl	11d74 <__errno_location@plt>
   22ce0:	mov	r3, #12
   22ce4:	ldr	r4, [sp]
   22ce8:	add	sp, sp, #4
   22cec:	str	r3, [r0]
   22cf0:	mov	r0, #0
   22cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   22cf8:	mov	r2, #3
   22cfc:	mov	r1, #0
   22d00:	b	22358 <__assert_fail@plt+0x10410>
   22d04:	eor	r1, r1, #-2147483648	; 0x80000000
   22d08:	b	22d10 <_obstack_memory_used@@Base+0x84>
   22d0c:	eor	r3, r3, #-2147483648	; 0x80000000
   22d10:	push	{r4, r5, lr}
   22d14:	lsl	r4, r1, #1
   22d18:	lsl	r5, r3, #1
   22d1c:	teq	r4, r5
   22d20:	teqeq	r0, r2
   22d24:	orrsne	ip, r4, r0
   22d28:	orrsne	ip, r5, r2
   22d2c:	mvnsne	ip, r4, asr #21
   22d30:	mvnsne	ip, r5, asr #21
   22d34:	beq	22f20 <_obstack_memory_used@@Base+0x294>
   22d38:	lsr	r4, r4, #21
   22d3c:	rsbs	r5, r4, r5, lsr #21
   22d40:	rsblt	r5, r5, #0
   22d44:	ble	22d64 <_obstack_memory_used@@Base+0xd8>
   22d48:	add	r4, r4, r5
   22d4c:	eor	r2, r0, r2
   22d50:	eor	r3, r1, r3
   22d54:	eor	r0, r2, r0
   22d58:	eor	r1, r3, r1
   22d5c:	eor	r2, r0, r2
   22d60:	eor	r3, r1, r3
   22d64:	cmp	r5, #54	; 0x36
   22d68:	pophi	{r4, r5, pc}
   22d6c:	tst	r1, #-2147483648	; 0x80000000
   22d70:	lsl	r1, r1, #12
   22d74:	mov	ip, #1048576	; 0x100000
   22d78:	orr	r1, ip, r1, lsr #12
   22d7c:	beq	22d88 <_obstack_memory_used@@Base+0xfc>
   22d80:	rsbs	r0, r0, #0
   22d84:	rsc	r1, r1, #0
   22d88:	tst	r3, #-2147483648	; 0x80000000
   22d8c:	lsl	r3, r3, #12
   22d90:	orr	r3, ip, r3, lsr #12
   22d94:	beq	22da0 <_obstack_memory_used@@Base+0x114>
   22d98:	rsbs	r2, r2, #0
   22d9c:	rsc	r3, r3, #0
   22da0:	teq	r4, r5
   22da4:	beq	22f08 <_obstack_memory_used@@Base+0x27c>
   22da8:	sub	r4, r4, #1
   22dac:	rsbs	lr, r5, #32
   22db0:	blt	22dcc <_obstack_memory_used@@Base+0x140>
   22db4:	lsl	ip, r2, lr
   22db8:	adds	r0, r0, r2, lsr r5
   22dbc:	adc	r1, r1, #0
   22dc0:	adds	r0, r0, r3, lsl lr
   22dc4:	adcs	r1, r1, r3, asr r5
   22dc8:	b	22de8 <_obstack_memory_used@@Base+0x15c>
   22dcc:	sub	r5, r5, #32
   22dd0:	add	lr, lr, #32
   22dd4:	cmp	r2, #1
   22dd8:	lsl	ip, r3, lr
   22ddc:	orrcs	ip, ip, #2
   22de0:	adds	r0, r0, r3, asr r5
   22de4:	adcs	r1, r1, r3, asr #31
   22de8:	and	r5, r1, #-2147483648	; 0x80000000
   22dec:	bpl	22dfc <_obstack_memory_used@@Base+0x170>
   22df0:	rsbs	ip, ip, #0
   22df4:	rscs	r0, r0, #0
   22df8:	rsc	r1, r1, #0
   22dfc:	cmp	r1, #1048576	; 0x100000
   22e00:	bcc	22e40 <_obstack_memory_used@@Base+0x1b4>
   22e04:	cmp	r1, #2097152	; 0x200000
   22e08:	bcc	22e28 <_obstack_memory_used@@Base+0x19c>
   22e0c:	lsrs	r1, r1, #1
   22e10:	rrxs	r0, r0
   22e14:	rrx	ip, ip
   22e18:	add	r4, r4, #1
   22e1c:	lsl	r2, r4, #21
   22e20:	cmn	r2, #4194304	; 0x400000
   22e24:	bcs	22f80 <_obstack_memory_used@@Base+0x2f4>
   22e28:	cmp	ip, #-2147483648	; 0x80000000
   22e2c:	lsrseq	ip, r0, #1
   22e30:	adcs	r0, r0, #0
   22e34:	adc	r1, r1, r4, lsl #20
   22e38:	orr	r1, r1, r5
   22e3c:	pop	{r4, r5, pc}
   22e40:	lsls	ip, ip, #1
   22e44:	adcs	r0, r0, r0
   22e48:	adc	r1, r1, r1
   22e4c:	tst	r1, #1048576	; 0x100000
   22e50:	sub	r4, r4, #1
   22e54:	bne	22e28 <_obstack_memory_used@@Base+0x19c>
   22e58:	teq	r1, #0
   22e5c:	moveq	r1, r0
   22e60:	moveq	r0, #0
   22e64:	clz	r3, r1
   22e68:	addeq	r3, r3, #32
   22e6c:	sub	r3, r3, #11
   22e70:	subs	r2, r3, #32
   22e74:	bge	22e98 <_obstack_memory_used@@Base+0x20c>
   22e78:	adds	r2, r2, #12
   22e7c:	ble	22e94 <_obstack_memory_used@@Base+0x208>
   22e80:	add	ip, r2, #20
   22e84:	rsb	r2, r2, #12
   22e88:	lsl	r0, r1, ip
   22e8c:	lsr	r1, r1, r2
   22e90:	b	22ea8 <_obstack_memory_used@@Base+0x21c>
   22e94:	add	r2, r2, #20
   22e98:	rsble	ip, r2, #32
   22e9c:	lsl	r1, r1, r2
   22ea0:	orrle	r1, r1, r0, lsr ip
   22ea4:	lslle	r0, r0, r2
   22ea8:	subs	r4, r4, r3
   22eac:	addge	r1, r1, r4, lsl #20
   22eb0:	orrge	r1, r1, r5
   22eb4:	popge	{r4, r5, pc}
   22eb8:	mvn	r4, r4
   22ebc:	subs	r4, r4, #31
   22ec0:	bge	22efc <_obstack_memory_used@@Base+0x270>
   22ec4:	adds	r4, r4, #12
   22ec8:	bgt	22ee4 <_obstack_memory_used@@Base+0x258>
   22ecc:	add	r4, r4, #20
   22ed0:	rsb	r2, r4, #32
   22ed4:	lsr	r0, r0, r4
   22ed8:	orr	r0, r0, r1, lsl r2
   22edc:	orr	r1, r5, r1, lsr r4
   22ee0:	pop	{r4, r5, pc}
   22ee4:	rsb	r4, r4, #12
   22ee8:	rsb	r2, r4, #32
   22eec:	lsr	r0, r0, r2
   22ef0:	orr	r0, r0, r1, lsl r4
   22ef4:	mov	r1, r5
   22ef8:	pop	{r4, r5, pc}
   22efc:	lsr	r0, r1, r4
   22f00:	mov	r1, r5
   22f04:	pop	{r4, r5, pc}
   22f08:	teq	r4, #0
   22f0c:	eor	r3, r3, #1048576	; 0x100000
   22f10:	eoreq	r1, r1, #1048576	; 0x100000
   22f14:	addeq	r4, r4, #1
   22f18:	subne	r5, r5, #1
   22f1c:	b	22da8 <_obstack_memory_used@@Base+0x11c>
   22f20:	mvns	ip, r4, asr #21
   22f24:	mvnsne	ip, r5, asr #21
   22f28:	beq	22f90 <_obstack_memory_used@@Base+0x304>
   22f2c:	teq	r4, r5
   22f30:	teqeq	r0, r2
   22f34:	beq	22f48 <_obstack_memory_used@@Base+0x2bc>
   22f38:	orrs	ip, r4, r0
   22f3c:	moveq	r1, r3
   22f40:	moveq	r0, r2
   22f44:	pop	{r4, r5, pc}
   22f48:	teq	r1, r3
   22f4c:	movne	r1, #0
   22f50:	movne	r0, #0
   22f54:	popne	{r4, r5, pc}
   22f58:	lsrs	ip, r4, #21
   22f5c:	bne	22f70 <_obstack_memory_used@@Base+0x2e4>
   22f60:	lsls	r0, r0, #1
   22f64:	adcs	r1, r1, r1
   22f68:	orrcs	r1, r1, #-2147483648	; 0x80000000
   22f6c:	pop	{r4, r5, pc}
   22f70:	adds	r4, r4, #4194304	; 0x400000
   22f74:	addcc	r1, r1, #1048576	; 0x100000
   22f78:	popcc	{r4, r5, pc}
   22f7c:	and	r5, r1, #-2147483648	; 0x80000000
   22f80:	orr	r1, r5, #2130706432	; 0x7f000000
   22f84:	orr	r1, r1, #15728640	; 0xf00000
   22f88:	mov	r0, #0
   22f8c:	pop	{r4, r5, pc}
   22f90:	mvns	ip, r4, asr #21
   22f94:	movne	r1, r3
   22f98:	movne	r0, r2
   22f9c:	mvnseq	ip, r5, asr #21
   22fa0:	movne	r3, r1
   22fa4:	movne	r2, r0
   22fa8:	orrs	r4, r0, r1, lsl #12
   22fac:	orrseq	r5, r2, r3, lsl #12
   22fb0:	teqeq	r1, r3
   22fb4:	orrne	r1, r1, #524288	; 0x80000
   22fb8:	pop	{r4, r5, pc}
   22fbc:	teq	r0, #0
   22fc0:	moveq	r1, #0
   22fc4:	bxeq	lr
   22fc8:	push	{r4, r5, lr}
   22fcc:	mov	r4, #1024	; 0x400
   22fd0:	add	r4, r4, #50	; 0x32
   22fd4:	mov	r5, #0
   22fd8:	mov	r1, #0
   22fdc:	b	22e58 <_obstack_memory_used@@Base+0x1cc>
   22fe0:	teq	r0, #0
   22fe4:	moveq	r1, #0
   22fe8:	bxeq	lr
   22fec:	push	{r4, r5, lr}
   22ff0:	mov	r4, #1024	; 0x400
   22ff4:	add	r4, r4, #50	; 0x32
   22ff8:	ands	r5, r0, #-2147483648	; 0x80000000
   22ffc:	rsbmi	r0, r0, #0
   23000:	mov	r1, #0
   23004:	b	22e58 <_obstack_memory_used@@Base+0x1cc>
   23008:	lsls	r2, r0, #1
   2300c:	asr	r1, r2, #3
   23010:	rrx	r1, r1
   23014:	lsl	r0, r2, #28
   23018:	andsne	r3, r2, #-16777216	; 0xff000000
   2301c:	teqne	r3, #-16777216	; 0xff000000
   23020:	eorne	r1, r1, #939524096	; 0x38000000
   23024:	bxne	lr
   23028:	bics	r2, r2, #-16777216	; 0xff000000
   2302c:	bxeq	lr
   23030:	teq	r3, #-16777216	; 0xff000000
   23034:	orreq	r1, r1, #524288	; 0x80000
   23038:	bxeq	lr
   2303c:	push	{r4, r5, lr}
   23040:	mov	r4, #896	; 0x380
   23044:	and	r5, r1, #-2147483648	; 0x80000000
   23048:	bic	r1, r1, #-2147483648	; 0x80000000
   2304c:	b	22e58 <_obstack_memory_used@@Base+0x1cc>
   23050:	orrs	r2, r0, r1
   23054:	bxeq	lr
   23058:	push	{r4, r5, lr}
   2305c:	mov	r5, #0
   23060:	b	23080 <_obstack_memory_used@@Base+0x3f4>
   23064:	orrs	r2, r0, r1
   23068:	bxeq	lr
   2306c:	push	{r4, r5, lr}
   23070:	ands	r5, r1, #-2147483648	; 0x80000000
   23074:	bpl	23080 <_obstack_memory_used@@Base+0x3f4>
   23078:	rsbs	r0, r0, #0
   2307c:	rsc	r1, r1, #0
   23080:	mov	r4, #1024	; 0x400
   23084:	add	r4, r4, #50	; 0x32
   23088:	lsrs	ip, r1, #22
   2308c:	beq	22dfc <_obstack_memory_used@@Base+0x170>
   23090:	mov	r2, #3
   23094:	lsrs	ip, ip, #3
   23098:	addne	r2, r2, #3
   2309c:	lsrs	ip, ip, #3
   230a0:	addne	r2, r2, #3
   230a4:	add	r2, r2, ip, lsr #3
   230a8:	rsb	r3, r2, #32
   230ac:	lsl	ip, r0, r3
   230b0:	lsr	r0, r0, r2
   230b4:	orr	r0, r0, r1, lsl r3
   230b8:	lsr	r1, r1, r2
   230bc:	add	r4, r4, r2
   230c0:	b	22dfc <_obstack_memory_used@@Base+0x170>
   230c4:	cmp	r3, #0
   230c8:	cmpeq	r2, #0
   230cc:	bne	230e4 <_obstack_memory_used@@Base+0x458>
   230d0:	cmp	r1, #0
   230d4:	cmpeq	r0, #0
   230d8:	mvnne	r1, #0
   230dc:	mvnne	r0, #0
   230e0:	b	23100 <_obstack_memory_used@@Base+0x474>
   230e4:	sub	sp, sp, #8
   230e8:	push	{sp, lr}
   230ec:	bl	23150 <_obstack_memory_used@@Base+0x4c4>
   230f0:	ldr	lr, [sp, #4]
   230f4:	add	sp, sp, #8
   230f8:	pop	{r2, r3}
   230fc:	bx	lr
   23100:	push	{r1, lr}
   23104:	mov	r0, #8
   23108:	bl	11a20 <raise@plt>
   2310c:	pop	{r1, pc}
   23110:	vmov	d6, r0, r1
   23114:	vldr	d7, [pc, #36]	; 23140 <_obstack_memory_used@@Base+0x4b4>
   23118:	vldr	d5, [pc, #40]	; 23148 <_obstack_memory_used@@Base+0x4bc>
   2311c:	vmul.f64	d7, d6, d7
   23120:	vcvt.u32.f64	s14, d7
   23124:	vcvt.f64.u32	d4, s14
   23128:	vmov	r1, s14
   2312c:	vmls.f64	d6, d4, d5
   23130:	vcvt.u32.f64	s15, d6
   23134:	vmov	r0, s15
   23138:	bx	lr
   2313c:	nop			; (mov r0, r0)
   23140:	andeq	r0, r0, r0
   23144:	ldclcc	0, cr0, [r0]
   23148:	andeq	r0, r0, r0
   2314c:	mvnsmi	r0, r0
   23150:	cmp	r1, r3
   23154:	cmpeq	r0, r2
   23158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2315c:	mov	r4, r0
   23160:	movcc	r0, #0
   23164:	mov	r5, r1
   23168:	ldr	lr, [sp, #36]	; 0x24
   2316c:	movcc	r1, r0
   23170:	bcc	2326c <_obstack_memory_used@@Base+0x5e0>
   23174:	cmp	r3, #0
   23178:	clzeq	ip, r2
   2317c:	clzne	ip, r3
   23180:	addeq	ip, ip, #32
   23184:	cmp	r5, #0
   23188:	clzeq	r1, r4
   2318c:	addeq	r1, r1, #32
   23190:	clzne	r1, r5
   23194:	sub	ip, ip, r1
   23198:	sub	sl, ip, #32
   2319c:	lsl	r9, r3, ip
   231a0:	rsb	fp, ip, #32
   231a4:	orr	r9, r9, r2, lsl sl
   231a8:	orr	r9, r9, r2, lsr fp
   231ac:	lsl	r8, r2, ip
   231b0:	cmp	r5, r9
   231b4:	cmpeq	r4, r8
   231b8:	movcc	r0, #0
   231bc:	movcc	r1, r0
   231c0:	bcc	231dc <_obstack_memory_used@@Base+0x550>
   231c4:	mov	r0, #1
   231c8:	subs	r4, r4, r8
   231cc:	lsl	r1, r0, sl
   231d0:	orr	r1, r1, r0, lsr fp
   231d4:	lsl	r0, r0, ip
   231d8:	sbc	r5, r5, r9
   231dc:	cmp	ip, #0
   231e0:	beq	2326c <_obstack_memory_used@@Base+0x5e0>
   231e4:	lsr	r6, r8, #1
   231e8:	orr	r6, r6, r9, lsl #31
   231ec:	lsr	r7, r9, #1
   231f0:	mov	r2, ip
   231f4:	b	23218 <_obstack_memory_used@@Base+0x58c>
   231f8:	subs	r3, r4, r6
   231fc:	sbc	r8, r5, r7
   23200:	adds	r3, r3, r3
   23204:	adc	r8, r8, r8
   23208:	adds	r4, r3, #1
   2320c:	adc	r5, r8, #0
   23210:	subs	r2, r2, #1
   23214:	beq	23234 <_obstack_memory_used@@Base+0x5a8>
   23218:	cmp	r5, r7
   2321c:	cmpeq	r4, r6
   23220:	bcs	231f8 <_obstack_memory_used@@Base+0x56c>
   23224:	adds	r4, r4, r4
   23228:	adc	r5, r5, r5
   2322c:	subs	r2, r2, #1
   23230:	bne	23218 <_obstack_memory_used@@Base+0x58c>
   23234:	lsr	r3, r4, ip
   23238:	orr	r3, r3, r5, lsl fp
   2323c:	lsr	r2, r5, ip
   23240:	orr	r3, r3, r5, lsr sl
   23244:	adds	r0, r0, r4
   23248:	mov	r4, r3
   2324c:	lsl	r3, r2, ip
   23250:	orr	r3, r3, r4, lsl sl
   23254:	lsl	ip, r4, ip
   23258:	orr	r3, r3, r4, lsr fp
   2325c:	adc	r1, r1, r5
   23260:	subs	r0, r0, ip
   23264:	mov	r5, r2
   23268:	sbc	r1, r1, r3
   2326c:	cmp	lr, #0
   23270:	strdne	r4, [lr]
   23274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23278:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2327c:	mov	r7, r0
   23280:	ldr	r6, [pc, #72]	; 232d0 <_obstack_memory_used@@Base+0x644>
   23284:	ldr	r5, [pc, #72]	; 232d4 <_obstack_memory_used@@Base+0x648>
   23288:	add	r6, pc, r6
   2328c:	add	r5, pc, r5
   23290:	sub	r6, r6, r5
   23294:	mov	r8, r1
   23298:	mov	r9, r2
   2329c:	bl	119d0 <pthread_mutex_unlock@plt-0x20>
   232a0:	asrs	r6, r6, #2
   232a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   232a8:	mov	r4, #0
   232ac:	add	r4, r4, #1
   232b0:	ldr	r3, [r5], #4
   232b4:	mov	r2, r9
   232b8:	mov	r1, r8
   232bc:	mov	r0, r7
   232c0:	blx	r3
   232c4:	cmp	r6, r4
   232c8:	bne	232ac <_obstack_memory_used@@Base+0x620>
   232cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   232d0:	andeq	r2, r1, ip, ror ip
   232d4:	andeq	r2, r1, r4, ror ip
   232d8:	bx	lr
   232dc:	ldr	r3, [pc, #12]	; 232f0 <_obstack_memory_used@@Base+0x664>
   232e0:	mov	r1, #0
   232e4:	add	r3, pc, r3
   232e8:	ldr	r2, [r3]
   232ec:	b	11d80 <__cxa_atexit@plt>
   232f0:	strdeq	r2, [r1], -r4

Disassembly of section .fini:

000232f4 <.fini>:
   232f4:	push	{r3, lr}
   232f8:	pop	{r3, pc}
