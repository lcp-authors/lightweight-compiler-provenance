
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010c68 <.init>:
   10c68:	push	{r3, lr}
   10c6c:	bl	10ed4 <__assert_fail@plt+0x48>
   10c70:	pop	{r3, pc}

Disassembly of section .plt:

00010c74 <calloc@plt-0x14>:
   10c74:	push	{lr}		; (str lr, [sp, #-4]!)
   10c78:	ldr	lr, [pc, #4]	; 10c84 <calloc@plt-0x4>
   10c7c:	add	lr, pc, lr
   10c80:	ldr	pc, [lr, #8]!
   10c84:	andeq	r4, r1, ip, ror r3

00010c88 <calloc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #892]!	; 0x37c

00010c94 <strtol@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #884]!	; 0x374

00010ca0 <printf@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #876]!	; 0x36c

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #868]!	; 0x364

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #860]!	; 0x35c

00010cc4 <ferror@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #852]!	; 0x354

00010cd0 <_exit@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #844]!	; 0x34c

00010cdc <memcpy@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #836]!	; 0x344

00010ce8 <mbsinit@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #828]!	; 0x33c

00010cf4 <dcgettext@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #820]!	; 0x334

00010d00 <realloc@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #812]!	; 0x32c

00010d0c <iswprint@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #804]!	; 0x324

00010d18 <fwrite@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #796]!	; 0x31c

00010d24 <lseek64@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #788]!	; 0x314

00010d30 <__ctype_get_mb_cur_max@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #780]!	; 0x30c

00010d3c <__fpending@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #772]!	; 0x304

00010d48 <mbrtowc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #764]!	; 0x2fc

00010d54 <error@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d60 <malloc@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #748]!	; 0x2ec

00010d6c <__libc_start_main@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #740]!	; 0x2e4

00010d78 <__freading@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #732]!	; 0x2dc

00010d84 <__gmon_start__@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d90 <getopt_long@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #716]!	; 0x2cc

00010d9c <__ctype_b_loc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #708]!	; 0x2c4

00010da8 <exit@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #700]!	; 0x2bc

00010db4 <bcmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #692]!	; 0x2b4

00010dc0 <strlen@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dcc <fprintf@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #676]!	; 0x2a4

00010dd8 <__errno_location@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #668]!	; 0x29c

00010de4 <__cxa_atexit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #660]!	; 0x294

00010df0 <memset@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #652]!	; 0x28c

00010dfc <fileno@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #644]!	; 0x284

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #636]!	; 0x27c

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #628]!	; 0x274

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #620]!	; 0x26c

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #612]!	; 0x264

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #604]!	; 0x25c

00010e44 <fputc@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #596]!	; 0x254

00010e50 <putc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #588]!	; 0x24c

00010e5c <getdelim@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #580]!	; 0x244

00010e68 <fputs@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #572]!	; 0x23c

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #564]!	; 0x234

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #556]!	; 0x22c

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #548]!	; 0x224

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x3c>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x40>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x44>
   10ec0:	bl	10d6c <__libc_start_main@plt>
   10ec4:	bl	10e80 <abort@plt>
   10ec8:	strdeq	r4, [r1], -r0
   10ecc:	andeq	r0, r1, r8, lsl #31
   10ed0:	muleq	r1, r0, r4
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x64>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x68>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d84 <__gmon_start__@plt>
   10ef0:	andeq	r4, r1, ip, lsl r1
   10ef4:	strheq	r0, [r0], -ip
   10ef8:	ldr	r0, [pc, #24]	; 10f18 <__assert_fail@plt+0x8c>
   10efc:	ldr	r3, [pc, #24]	; 10f1c <__assert_fail@plt+0x90>
   10f00:	cmp	r3, r0
   10f04:	bxeq	lr
   10f08:	ldr	r3, [pc, #16]	; 10f20 <__assert_fail@plt+0x94>
   10f0c:	cmp	r3, #0
   10f10:	bxeq	lr
   10f14:	bx	r3
   10f18:	andeq	r5, r2, r0, lsl r1
   10f1c:	andeq	r5, r2, r0, lsl r1
   10f20:	andeq	r0, r0, r0
   10f24:	ldr	r0, [pc, #36]	; 10f50 <__assert_fail@plt+0xc4>
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xc8>
   10f2c:	sub	r1, r1, r0
   10f30:	asr	r1, r1, #2
   10f34:	add	r1, r1, r1, lsr #31
   10f38:	asrs	r1, r1, #1
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0xcc>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r5, r2, r0, lsl r1
   10f54:	andeq	r5, r2, r0, lsl r1
   10f58:	andeq	r0, r0, r0
   10f5c:	push	{r4, lr}
   10f60:	ldr	r4, [pc, #24]	; 10f80 <__assert_fail@plt+0xf4>
   10f64:	ldrb	r3, [r4]
   10f68:	cmp	r3, #0
   10f6c:	popne	{r4, pc}
   10f70:	bl	10ef8 <__assert_fail@plt+0x6c>
   10f74:	mov	r3, #1
   10f78:	strb	r3, [r4]
   10f7c:	pop	{r4, pc}
   10f80:	andeq	r5, r2, r4, lsr r1
   10f84:	b	10f24 <__assert_fail@plt+0x98>
   10f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f8c:	add	fp, sp, #28
   10f90:	sub	sp, sp, #20
   10f94:	mov	r7, r1
   10f98:	mov	r8, r0
   10f9c:	ldr	r0, [r1]
   10fa0:	cmp	r0, #0
   10fa4:	movweq	r0, #17688	; 0x4518
   10fa8:	movteq	r0, #1
   10fac:	bl	1182c <__assert_fail@plt+0x9a0>
   10fb0:	movw	r0, #5956	; 0x1744
   10fb4:	movt	r0, #1
   10fb8:	bl	144f4 <__assert_fail@plt+0x3668>
   10fbc:	cmp	r0, #0
   10fc0:	bne	112e8 <__assert_fail@plt+0x45c>
   10fc4:	movw	r0, #1026	; 0x402
   10fc8:	str	r0, [sp, #12]
   10fcc:	movw	r0, #1026	; 0x402
   10fd0:	bl	138d4 <__assert_fail@plt+0x2a48>
   10fd4:	str	r0, [sp, #16]
   10fd8:	movw	r0, #1026	; 0x402
   10fdc:	bl	138d4 <__assert_fail@plt+0x2a48>
   10fe0:	mov	r1, #0
   10fe4:	str	r0, [sp, #8]
   10fe8:	strb	r1, [r0]
   10fec:	mov	r4, #10
   10ff0:	movw	r2, #17730	; 0x4542
   10ff4:	movt	r2, #1
   10ff8:	movw	r3, #18216	; 0x4728
   10ffc:	movt	r3, #1
   11000:	mov	r9, #0
   11004:	mov	r6, #0
   11008:	str	r1, [sp]
   1100c:	mov	r0, r8
   11010:	mov	r1, r7
   11014:	mov	r5, r2
   11018:	mov	sl, r3
   1101c:	bl	10d90 <getopt_long@plt>
   11020:	cmp	r0, #82	; 0x52
   11024:	ble	11060 <__assert_fail@plt+0x1d4>
   11028:	cmp	r0, #83	; 0x53
   1102c:	bne	11084 <__assert_fail@plt+0x1f8>
   11030:	movw	r0, #20784	; 0x5130
   11034:	movt	r0, #2
   11038:	ldr	r0, [r0]
   1103c:	bl	11354 <__assert_fail@plt+0x4c8>
   11040:	mov	r6, r0
   11044:	mov	r9, #1
   11048:	cmp	r0, #2
   1104c:	mov	r3, sl
   11050:	mov	r2, r5
   11054:	mov	r1, #0
   11058:	bcc	11008 <__assert_fail@plt+0x17c>
   1105c:	b	112a8 <__assert_fail@plt+0x41c>
   11060:	cmn	r0, #1
   11064:	beq	1109c <__assert_fail@plt+0x210>
   11068:	cmp	r0, #48	; 0x30
   1106c:	bne	112e0 <__assert_fail@plt+0x454>
   11070:	mov	r4, #0
   11074:	mov	r3, sl
   11078:	mov	r2, r5
   1107c:	mov	r1, #0
   11080:	b	11008 <__assert_fail@plt+0x17c>
   11084:	cmp	r0, #118	; 0x76
   11088:	bne	112d0 <__assert_fail@plt+0x444>
   1108c:	movw	r0, #17688	; 0x4518
   11090:	movt	r0, #1
   11094:	bl	11608 <__assert_fail@plt+0x77c>
   11098:	b	11298 <__assert_fail@plt+0x40c>
   1109c:	movw	r0, #20760	; 0x5118
   110a0:	movt	r0, #2
   110a4:	ldr	r0, [r0]
   110a8:	cmp	r0, r8
   110ac:	bne	11314 <__assert_fail@plt+0x488>
   110b0:	cmp	r9, #0
   110b4:	movw	r5, #20780	; 0x512c
   110b8:	movt	r5, #2
   110bc:	beq	110e4 <__assert_fail@plt+0x258>
   110c0:	mov	r0, #49	; 0x31
   110c4:	cmp	r6, #0
   110c8:	movweq	r0, #48	; 0x30
   110cc:	ldr	r1, [r5]
   110d0:	bl	10e44 <fputc@plt>
   110d4:	ldr	r1, [r5]
   110d8:	mov	r0, #0
   110dc:	bl	10e44 <fputc@plt>
   110e0:	b	11104 <__assert_fail@plt+0x278>
   110e4:	ldr	r3, [r5]
   110e8:	movw	r0, #18280	; 0x4768
   110ec:	movt	r0, #1
   110f0:	mov	r1, #1
   110f4:	mov	r2, #10
   110f8:	bl	10d18 <fwrite@plt>
   110fc:	cmp	r0, #10
   11100:	bne	11340 <__assert_fail@plt+0x4b4>
   11104:	movw	r0, #20776	; 0x5128
   11108:	movt	r0, #2
   1110c:	ldr	r3, [r0]
   11110:	add	r0, sp, #16
   11114:	add	r1, sp, #12
   11118:	mov	r2, r4
   1111c:	bl	10e5c <getdelim@plt>
   11120:	mov	r1, r0
   11124:	ldr	r0, [sp, #16]
   11128:	cmp	r1, #1
   1112c:	blt	11288 <__assert_fail@plt+0x3fc>
   11130:	mov	r3, #0
   11134:	movw	r7, #1026	; 0x402
   11138:	mov	r6, #0
   1113c:	sub	r1, r1, #1
   11140:	ldrb	r2, [r0, r1]
   11144:	mov	sl, r4
   11148:	cmp	r4, r2
   1114c:	bne	1115c <__assert_fail@plt+0x2d0>
   11150:	strb	r3, [r0, r1]
   11154:	mov	r4, #0
   11158:	b	11184 <__assert_fail@plt+0x2f8>
   1115c:	mov	r0, #0
   11160:	movw	r1, #17836	; 0x45ac
   11164:	movt	r1, #1
   11168:	mov	r2, #5
   1116c:	mov	r4, #0
   11170:	bl	10cf4 <dcgettext@plt>
   11174:	mov	r2, r0
   11178:	mov	r0, #0
   1117c:	mov	r1, #0
   11180:	bl	10d54 <error@plt>
   11184:	ldr	r1, [sp, #16]
   11188:	ldr	r0, [sp, #8]
   1118c:	bl	114dc <__assert_fail@plt+0x650>
   11190:	mov	r8, r0
   11194:	sub	r5, r0, r6
   11198:	add	r0, r5, #32768	; 0x8000
   1119c:	cmp	r4, r0, lsr #16
   111a0:	rsbne	r5, r6, #0
   111a4:	movwne	r8, #0
   111a8:	cmp	r9, #0
   111ac:	movw	r6, #20780	; 0x512c
   111b0:	movt	r6, #2
   111b4:	mov	r4, sl
   111b8:	bne	11204 <__assert_fail@plt+0x378>
   111bc:	ldr	r1, [r6]
   111c0:	add	r0, r5, #127	; 0x7f
   111c4:	cmp	r0, #255	; 0xff
   111c8:	bcc	111f4 <__assert_fail@plt+0x368>
   111cc:	mov	r0, #128	; 0x80
   111d0:	bl	10e50 <putc@plt>
   111d4:	cmn	r0, #1
   111d8:	beq	112a4 <__assert_fail@plt+0x418>
   111dc:	ldr	r1, [r6]
   111e0:	mov	r0, r5
   111e4:	bl	11574 <__assert_fail@plt+0x6e8>
   111e8:	cmp	r0, #0
   111ec:	bne	11204 <__assert_fail@plt+0x378>
   111f0:	b	112a4 <__assert_fail@plt+0x418>
   111f4:	mov	r0, r5
   111f8:	bl	10e50 <putc@plt>
   111fc:	cmn	r0, #1
   11200:	beq	112a4 <__assert_fail@plt+0x418>
   11204:	ldr	r0, [sp, #16]
   11208:	add	r0, r0, r8
   1120c:	ldr	r1, [r6]
   11210:	bl	10e68 <fputs@plt>
   11214:	cmn	r0, #1
   11218:	beq	112a4 <__assert_fail@plt+0x418>
   1121c:	ldr	r1, [r6]
   11220:	mov	r0, #0
   11224:	bl	10e50 <putc@plt>
   11228:	cmn	r0, #1
   1122c:	beq	112a4 <__assert_fail@plt+0x418>
   11230:	ldr	r5, [sp, #16]
   11234:	ldr	r0, [sp, #8]
   11238:	str	r0, [sp, #16]
   1123c:	ldr	r6, [sp, #12]
   11240:	str	r7, [sp, #12]
   11244:	movw	r0, #20776	; 0x5128
   11248:	movt	r0, #2
   1124c:	ldr	r3, [r0]
   11250:	add	r0, sp, #16
   11254:	add	r1, sp, #12
   11258:	mov	r2, r4
   1125c:	bl	10e5c <getdelim@plt>
   11260:	mov	r1, r0
   11264:	mov	r9, #0
   11268:	ldr	r0, [sp, #16]
   1126c:	cmp	r1, #0
   11270:	str	r5, [sp, #8]
   11274:	mov	r7, r6
   11278:	mov	r6, r8
   1127c:	mov	r3, #0
   11280:	bgt	1113c <__assert_fail@plt+0x2b0>
   11284:	b	1128c <__assert_fail@plt+0x400>
   11288:	ldr	r5, [sp, #8]
   1128c:	bl	13d5c <__assert_fail@plt+0x2ed0>
   11290:	mov	r0, r5
   11294:	bl	13d5c <__assert_fail@plt+0x2ed0>
   11298:	mov	r0, #0
   1129c:	sub	sp, fp, #28
   112a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112a4:	bl	11540 <__assert_fail@plt+0x6b4>
   112a8:	movw	r1, #17736	; 0x4548
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10cf4 <dcgettext@plt>
   112bc:	mov	r2, r0
   112c0:	mov	r0, #1
   112c4:	mov	r1, #0
   112c8:	mov	r3, r6
   112cc:	bl	10d54 <error@plt>
   112d0:	cmp	r0, #104	; 0x68
   112d4:	bne	112e0 <__assert_fail@plt+0x454>
   112d8:	mov	r0, #0
   112dc:	bl	1143c <__assert_fail@plt+0x5b0>
   112e0:	mov	r0, #1
   112e4:	bl	1143c <__assert_fail@plt+0x5b0>
   112e8:	bl	10dd8 <__errno_location@plt>
   112ec:	ldr	r4, [r0]
   112f0:	movw	r1, #17695	; 0x451f
   112f4:	movt	r1, #1
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	bl	10cf4 <dcgettext@plt>
   11304:	mov	r2, r0
   11308:	mov	r0, #1
   1130c:	mov	r1, r4
   11310:	bl	10d54 <error@plt>
   11314:	movw	r1, #17779	; 0x4573
   11318:	movt	r1, #1
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	bl	10cf4 <dcgettext@plt>
   11328:	mov	r2, r0
   1132c:	mov	r0, #0
   11330:	mov	r1, #0
   11334:	bl	10d54 <error@plt>
   11338:	mov	r0, #1
   1133c:	bl	1143c <__assert_fail@plt+0x5b0>
   11340:	bl	10dd8 <__errno_location@plt>
   11344:	ldr	r4, [r0]
   11348:	movw	r1, #17801	; 0x4589
   1134c:	movt	r1, #1
   11350:	b	112f8 <__assert_fail@plt+0x46c>
   11354:	push	{r4, r5, fp, lr}
   11358:	add	fp, sp, #8
   1135c:	sub	sp, sp, #8
   11360:	mov	r4, r0
   11364:	bl	10dd8 <__errno_location@plt>
   11368:	mov	r5, r0
   1136c:	mov	r0, #0
   11370:	str	r0, [r5]
   11374:	add	r1, sp, #4
   11378:	mov	r0, r4
   1137c:	mov	r2, #10
   11380:	bl	10c94 <strtol@plt>
   11384:	cmp	r0, #0
   11388:	beq	113c0 <__assert_fail@plt+0x534>
   1138c:	add	r1, r0, #-2147483647	; 0x80000001
   11390:	cmp	r1, #1
   11394:	bhi	113d8 <__assert_fail@plt+0x54c>
   11398:	ldr	r1, [r5]
   1139c:	cmp	r1, #0
   113a0:	beq	113d8 <__assert_fail@plt+0x54c>
   113a4:	movw	r1, #17958	; 0x4626
   113a8:	movt	r1, #1
   113ac:	mov	r0, #0
   113b0:	mov	r2, #5
   113b4:	bl	10cf4 <dcgettext@plt>
   113b8:	mov	r2, r0
   113bc:	b	11408 <__assert_fail@plt+0x57c>
   113c0:	movw	r1, #20784	; 0x5130
   113c4:	movt	r1, #2
   113c8:	ldr	r1, [r1]
   113cc:	ldr	r2, [sp, #4]
   113d0:	cmp	r2, r1
   113d4:	beq	11418 <__assert_fail@plt+0x58c>
   113d8:	ldr	r5, [sp, #4]
   113dc:	ldrb	r1, [r5]
   113e0:	cmp	r1, #0
   113e4:	subeq	sp, fp, #8
   113e8:	popeq	{r4, r5, fp, pc}
   113ec:	movw	r1, #18010	; 0x465a
   113f0:	movt	r1, #1
   113f4:	mov	r0, #0
   113f8:	mov	r2, #5
   113fc:	bl	10cf4 <dcgettext@plt>
   11400:	mov	r2, r0
   11404:	str	r5, [sp]
   11408:	mov	r0, #1
   1140c:	mov	r1, #0
   11410:	mov	r3, r4
   11414:	bl	10d54 <error@plt>
   11418:	movw	r1, #17899	; 0x45eb
   1141c:	movt	r1, #1
   11420:	mov	r0, #0
   11424:	mov	r2, #5
   11428:	bl	10cf4 <dcgettext@plt>
   1142c:	mov	r2, r0
   11430:	mov	r0, #1
   11434:	mov	r1, #0
   11438:	bl	10d54 <error@plt>
   1143c:	push	{fp, lr}
   11440:	mov	fp, sp
   11444:	mov	r4, r0
   11448:	cmp	r0, #0
   1144c:	bne	1149c <__assert_fail@plt+0x610>
   11450:	movw	r6, #20780	; 0x512c
   11454:	movt	r6, #2
   11458:	ldr	r5, [r6]
   1145c:	movw	r1, #18093	; 0x46ad
   11460:	movt	r1, #1
   11464:	mov	r0, #0
   11468:	mov	r2, #5
   1146c:	bl	10cf4 <dcgettext@plt>
   11470:	mov	r1, r0
   11474:	movw	r7, #20800	; 0x5140
   11478:	movt	r7, #2
   1147c:	ldr	r2, [r7]
   11480:	mov	r0, r5
   11484:	bl	10dcc <fprintf@plt>
   11488:	ldr	r0, [r6]
   1148c:	ldr	r1, [r7]
   11490:	bl	116b8 <__assert_fail@plt+0x82c>
   11494:	mov	r0, r4
   11498:	bl	10da8 <exit@plt>
   1149c:	movw	r0, #20768	; 0x5120
   114a0:	movt	r0, #2
   114a4:	ldr	r5, [r0]
   114a8:	movw	r1, #18054	; 0x4686
   114ac:	movt	r1, #1
   114b0:	mov	r0, #0
   114b4:	mov	r2, #5
   114b8:	bl	10cf4 <dcgettext@plt>
   114bc:	mov	r1, r0
   114c0:	movw	r0, #20800	; 0x5140
   114c4:	movt	r0, #2
   114c8:	ldr	r2, [r0]
   114cc:	mov	r0, r5
   114d0:	bl	10dcc <fprintf@plt>
   114d4:	mov	r0, r4
   114d8:	bl	10da8 <exit@plt>
   114dc:	ldrb	r3, [r0]
   114e0:	cmp	r3, #0
   114e4:	mov	r2, r0
   114e8:	beq	11538 <__assert_fail@plt+0x6ac>
   114ec:	ldrb	r2, [r1]
   114f0:	cmp	r3, r2
   114f4:	mov	r2, r0
   114f8:	bne	11538 <__assert_fail@plt+0x6ac>
   114fc:	mov	r2, #1
   11500:	cmn	r2, #-2147483647	; 0x80000001
   11504:	beq	11530 <__assert_fail@plt+0x6a4>
   11508:	ldrb	r3, [r0, r2]
   1150c:	add	ip, r2, #1
   11510:	cmp	r3, #0
   11514:	beq	11528 <__assert_fail@plt+0x69c>
   11518:	ldrb	r2, [r1, r2]
   1151c:	cmp	r3, r2
   11520:	mov	r2, ip
   11524:	beq	11500 <__assert_fail@plt+0x674>
   11528:	add	r1, r0, ip
   1152c:	b	11534 <__assert_fail@plt+0x6a8>
   11530:	add	r1, r0, r2
   11534:	sub	r2, r1, #1
   11538:	sub	r0, r2, r0
   1153c:	bx	lr
   11540:	push	{fp, lr}
   11544:	mov	fp, sp
   11548:	bl	10dd8 <__errno_location@plt>
   1154c:	ldr	r4, [r0]
   11550:	movw	r1, #18139	; 0x46db
   11554:	movt	r1, #1
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	bl	10cf4 <dcgettext@plt>
   11564:	mov	r2, r0
   11568:	mov	r0, #1
   1156c:	mov	r1, r4
   11570:	bl	10d54 <error@plt>
   11574:	push	{r4, r5, fp, lr}
   11578:	add	fp, sp, #8
   1157c:	cmp	r0, #32768	; 0x8000
   11580:	bge	115c8 <__assert_fail@plt+0x73c>
   11584:	mov	r5, r0
   11588:	cmn	r0, #32768	; 0x8000
   1158c:	blt	115e8 <__assert_fail@plt+0x75c>
   11590:	mov	r4, r1
   11594:	asr	r0, r5, #8
   11598:	bl	10e50 <putc@plt>
   1159c:	cmn	r0, #1
   115a0:	beq	115c0 <__assert_fail@plt+0x734>
   115a4:	mov	r0, r5
   115a8:	mov	r1, r4
   115ac:	bl	10e50 <putc@plt>
   115b0:	mvn	r1, #0
   115b4:	subs	r0, r0, r1
   115b8:	movwne	r0, #1
   115bc:	pop	{r4, r5, fp, pc}
   115c0:	mov	r0, #0
   115c4:	pop	{r4, r5, fp, pc}
   115c8:	movw	r0, #18151	; 0x46e7
   115cc:	movt	r0, #1
   115d0:	movw	r1, #18165	; 0x46f5
   115d4:	movt	r1, #1
   115d8:	movw	r3, #18174	; 0x46fe
   115dc:	movt	r3, #1
   115e0:	mov	r2, #104	; 0x68
   115e4:	bl	10e8c <__assert_fail@plt>
   115e8:	movw	r0, #18201	; 0x4719
   115ec:	movt	r0, #1
   115f0:	movw	r1, #18165	; 0x46f5
   115f4:	movt	r1, #1
   115f8:	movw	r3, #18174	; 0x46fe
   115fc:	movt	r3, #1
   11600:	mov	r2, #105	; 0x69
   11604:	bl	10e8c <__assert_fail@plt>
   11608:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1160c:	add	fp, sp, #24
   11610:	sub	sp, sp, #16
   11614:	mov	r8, r0
   11618:	movw	r0, #20768	; 0x5120
   1161c:	movt	r0, #2
   11620:	ldr	r0, [r0]
   11624:	bl	13cf4 <__assert_fail@plt+0x2e68>
   11628:	movw	r0, #20780	; 0x512c
   1162c:	movt	r0, #2
   11630:	ldr	r6, [r0]
   11634:	movw	r0, #20680	; 0x50c8
   11638:	movt	r0, #2
   1163c:	ldr	r5, [r0]
   11640:	mov	r9, #0
   11644:	movw	r1, #18318	; 0x478e
   11648:	movt	r1, #1
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	bl	10cf4 <dcgettext@plt>
   11658:	mov	r7, r0
   1165c:	movw	r1, #18333	; 0x479d
   11660:	movt	r1, #1
   11664:	mov	r0, #0
   11668:	mov	r2, #5
   1166c:	bl	10cf4 <dcgettext@plt>
   11670:	mov	r4, r0
   11674:	movw	r1, #18348	; 0x47ac
   11678:	movt	r1, #1
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	bl	10cf4 <dcgettext@plt>
   11688:	str	r7, [sp]
   1168c:	str	r4, [sp, #4]
   11690:	str	r0, [sp, #8]
   11694:	str	r9, [sp, #12]
   11698:	movw	r2, #18304	; 0x4780
   1169c:	movt	r2, #1
   116a0:	mov	r0, r6
   116a4:	mov	r1, r8
   116a8:	mov	r3, r5
   116ac:	bl	137e8 <__assert_fail@plt+0x295c>
   116b0:	sub	sp, fp, #24
   116b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   116b8:	push	{r4, r5, fp, lr}
   116bc:	add	fp, sp, #8
   116c0:	sub	sp, sp, #16
   116c4:	mov	r4, r1
   116c8:	mov	r5, r0
   116cc:	movw	r1, #18361	; 0x47b9
   116d0:	movt	r1, #1
   116d4:	mov	r0, #0
   116d8:	mov	r2, #5
   116dc:	bl	10cf4 <dcgettext@plt>
   116e0:	mov	r1, r0
   116e4:	movw	r0, #18653	; 0x48dd
   116e8:	movt	r0, #1
   116ec:	movw	r2, #18606	; 0x48ae
   116f0:	movt	r2, #1
   116f4:	movw	r3, #18304	; 0x4780
   116f8:	movt	r3, #1
   116fc:	str	r3, [sp]
   11700:	str	r2, [sp, #4]
   11704:	str	r0, [sp, #8]
   11708:	movw	r2, #18567	; 0x4887
   1170c:	movt	r2, #1
   11710:	mov	r0, r5
   11714:	mov	r3, r4
   11718:	bl	10dcc <fprintf@plt>
   1171c:	sub	sp, fp, #8
   11720:	pop	{r4, r5, fp, pc}
   11724:	movw	r1, #20792	; 0x5138
   11728:	movt	r1, #2
   1172c:	str	r0, [r1]
   11730:	bx	lr
   11734:	movw	r1, #20796	; 0x513c
   11738:	movt	r1, #2
   1173c:	strb	r0, [r1]
   11740:	bx	lr
   11744:	push	{r4, r5, r6, sl, fp, lr}
   11748:	add	fp, sp, #16
   1174c:	sub	sp, sp, #8
   11750:	movw	r0, #20780	; 0x512c
   11754:	movt	r0, #2
   11758:	ldr	r0, [r0]
   1175c:	bl	14274 <__assert_fail@plt+0x33e8>
   11760:	cmp	r0, #0
   11764:	beq	1178c <__assert_fail@plt+0x900>
   11768:	movw	r0, #20796	; 0x513c
   1176c:	movt	r0, #2
   11770:	ldrb	r0, [r0]
   11774:	cmp	r0, #0
   11778:	beq	117ac <__assert_fail@plt+0x920>
   1177c:	bl	10dd8 <__errno_location@plt>
   11780:	ldr	r0, [r0]
   11784:	cmp	r0, #32
   11788:	bne	117ac <__assert_fail@plt+0x920>
   1178c:	movw	r0, #20768	; 0x5120
   11790:	movt	r0, #2
   11794:	ldr	r0, [r0]
   11798:	bl	14274 <__assert_fail@plt+0x33e8>
   1179c:	cmp	r0, #0
   117a0:	subeq	sp, fp, #16
   117a4:	popeq	{r4, r5, r6, sl, fp, pc}
   117a8:	b	1181c <__assert_fail@plt+0x990>
   117ac:	movw	r1, #18139	; 0x46db
   117b0:	movt	r1, #1
   117b4:	mov	r0, #0
   117b8:	mov	r2, #5
   117bc:	bl	10cf4 <dcgettext@plt>
   117c0:	mov	r4, r0
   117c4:	movw	r0, #20792	; 0x5138
   117c8:	movt	r0, #2
   117cc:	ldr	r6, [r0]
   117d0:	bl	10dd8 <__errno_location@plt>
   117d4:	ldr	r5, [r0]
   117d8:	cmp	r6, #0
   117dc:	bne	117f8 <__assert_fail@plt+0x96c>
   117e0:	movw	r2, #18679	; 0x48f7
   117e4:	movt	r2, #1
   117e8:	mov	r0, #0
   117ec:	mov	r1, r5
   117f0:	mov	r3, r4
   117f4:	b	11818 <__assert_fail@plt+0x98c>
   117f8:	mov	r0, r6
   117fc:	bl	12ed0 <__assert_fail@plt+0x2044>
   11800:	mov	r3, r0
   11804:	str	r4, [sp]
   11808:	movw	r2, #18675	; 0x48f3
   1180c:	movt	r2, #1
   11810:	mov	r0, #0
   11814:	mov	r1, r5
   11818:	bl	10d54 <error@plt>
   1181c:	movw	r0, #20684	; 0x50cc
   11820:	movt	r0, #2
   11824:	ldr	r0, [r0]
   11828:	bl	10cd0 <_exit@plt>
   1182c:	push	{r4, r5, fp, lr}
   11830:	add	fp, sp, #8
   11834:	cmp	r0, #0
   11838:	beq	118cc <__assert_fail@plt+0xa40>
   1183c:	mov	r4, r0
   11840:	mov	r1, #47	; 0x2f
   11844:	bl	10e2c <strrchr@plt>
   11848:	cmp	r0, #0
   1184c:	mov	r5, r4
   11850:	addne	r5, r0, #1
   11854:	sub	r0, r5, r4
   11858:	cmp	r0, #7
   1185c:	blt	118b0 <__assert_fail@plt+0xa24>
   11860:	sub	r0, r5, #7
   11864:	movw	r1, #18738	; 0x4932
   11868:	movt	r1, #1
   1186c:	mov	r2, #7
   11870:	bl	10e74 <strncmp@plt>
   11874:	cmp	r0, #0
   11878:	bne	118b0 <__assert_fail@plt+0xa24>
   1187c:	movw	r1, #18746	; 0x493a
   11880:	movt	r1, #1
   11884:	mov	r0, r5
   11888:	mov	r2, #3
   1188c:	bl	10e74 <strncmp@plt>
   11890:	cmp	r0, #0
   11894:	beq	118a0 <__assert_fail@plt+0xa14>
   11898:	mov	r4, r5
   1189c:	b	118b0 <__assert_fail@plt+0xa24>
   118a0:	add	r4, r5, #3
   118a4:	movw	r0, #20752	; 0x5110
   118a8:	movt	r0, #2
   118ac:	str	r4, [r0]
   118b0:	movw	r0, #20756	; 0x5114
   118b4:	movt	r0, #2
   118b8:	str	r4, [r0]
   118bc:	movw	r0, #20800	; 0x5140
   118c0:	movt	r0, #2
   118c4:	str	r4, [r0]
   118c8:	pop	{r4, r5, fp, pc}
   118cc:	movw	r0, #20768	; 0x5120
   118d0:	movt	r0, #2
   118d4:	ldr	r3, [r0]
   118d8:	movw	r0, #18682	; 0x48fa
   118dc:	movt	r0, #1
   118e0:	mov	r1, #55	; 0x37
   118e4:	mov	r2, #1
   118e8:	bl	10d18 <fwrite@plt>
   118ec:	bl	10e80 <abort@plt>
   118f0:	push	{r4, r5, r6, sl, fp, lr}
   118f4:	add	fp, sp, #16
   118f8:	mov	r4, r0
   118fc:	movw	r0, #20808	; 0x5148
   11900:	movt	r0, #2
   11904:	cmp	r4, #0
   11908:	moveq	r4, r0
   1190c:	bl	10dd8 <__errno_location@plt>
   11910:	mov	r5, r0
   11914:	ldr	r6, [r0]
   11918:	mov	r0, r4
   1191c:	mov	r1, #48	; 0x30
   11920:	bl	13bbc <__assert_fail@plt+0x2d30>
   11924:	str	r6, [r5]
   11928:	pop	{r4, r5, r6, sl, fp, pc}
   1192c:	movw	r1, #20808	; 0x5148
   11930:	movt	r1, #2
   11934:	cmp	r0, #0
   11938:	movne	r1, r0
   1193c:	ldr	r0, [r1]
   11940:	bx	lr
   11944:	movw	r2, #20808	; 0x5148
   11948:	movt	r2, #2
   1194c:	cmp	r0, #0
   11950:	movne	r2, r0
   11954:	str	r1, [r2]
   11958:	bx	lr
   1195c:	movw	r3, #20808	; 0x5148
   11960:	movt	r3, #2
   11964:	cmp	r0, #0
   11968:	movne	r3, r0
   1196c:	ubfx	r0, r1, #5, #3
   11970:	add	ip, r3, r0, lsl #2
   11974:	ldr	r3, [ip, #8]
   11978:	and	r1, r1, #31
   1197c:	mov	r0, #1
   11980:	and	r0, r0, r3, lsr r1
   11984:	and	r2, r2, #1
   11988:	eor	r2, r0, r2
   1198c:	eor	r1, r3, r2, lsl r1
   11990:	str	r1, [ip, #8]
   11994:	bx	lr
   11998:	movw	r2, #20808	; 0x5148
   1199c:	movt	r2, #2
   119a0:	cmp	r0, #0
   119a4:	movne	r2, r0
   119a8:	ldr	r0, [r2, #4]
   119ac:	str	r1, [r2, #4]
   119b0:	bx	lr
   119b4:	push	{fp, lr}
   119b8:	mov	fp, sp
   119bc:	movw	r3, #20808	; 0x5148
   119c0:	movt	r3, #2
   119c4:	cmp	r0, #0
   119c8:	movne	r3, r0
   119cc:	mov	r0, #10
   119d0:	str	r0, [r3]
   119d4:	cmp	r1, #0
   119d8:	cmpne	r2, #0
   119dc:	bne	119e4 <__assert_fail@plt+0xb58>
   119e0:	bl	10e80 <abort@plt>
   119e4:	str	r1, [r3, #40]	; 0x28
   119e8:	str	r2, [r3, #44]	; 0x2c
   119ec:	pop	{fp, pc}
   119f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f4:	add	fp, sp, #28
   119f8:	sub	sp, sp, #20
   119fc:	mov	r8, r3
   11a00:	mov	r9, r2
   11a04:	mov	sl, r1
   11a08:	mov	r7, r0
   11a0c:	ldr	r0, [fp, #8]
   11a10:	movw	r5, #20808	; 0x5148
   11a14:	movt	r5, #2
   11a18:	cmp	r0, #0
   11a1c:	movne	r5, r0
   11a20:	bl	10dd8 <__errno_location@plt>
   11a24:	mov	r4, r0
   11a28:	ldm	r5, {r0, r1}
   11a2c:	ldr	r2, [r5, #40]	; 0x28
   11a30:	ldr	r3, [r5, #44]	; 0x2c
   11a34:	ldr	r6, [r4]
   11a38:	add	r5, r5, #8
   11a3c:	stm	sp, {r0, r1, r5}
   11a40:	str	r2, [sp, #12]
   11a44:	str	r3, [sp, #16]
   11a48:	mov	r0, r7
   11a4c:	mov	r1, sl
   11a50:	mov	r2, r9
   11a54:	mov	r3, r8
   11a58:	bl	11a68 <__assert_fail@plt+0xbdc>
   11a5c:	str	r6, [r4]
   11a60:	sub	sp, fp, #28
   11a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a6c:	add	fp, sp, #28
   11a70:	sub	sp, sp, #156	; 0x9c
   11a74:	mov	r9, r3
   11a78:	mov	r7, r1
   11a7c:	mov	r6, r0
   11a80:	str	r2, [fp, #-80]	; 0xffffffb0
   11a84:	add	r0, r2, #1
   11a88:	str	r0, [sp, #76]	; 0x4c
   11a8c:	ldr	r0, [fp, #12]
   11a90:	and	r1, r0, #1
   11a94:	str	r1, [sp, #40]	; 0x28
   11a98:	and	r1, r0, #4
   11a9c:	str	r1, [sp, #36]	; 0x24
   11aa0:	ubfx	r4, r0, #1, #1
   11aa4:	bl	10d30 <__ctype_get_mb_cur_max@plt>
   11aa8:	str	r0, [sp, #44]	; 0x2c
   11aac:	ldr	r0, [fp, #24]
   11ab0:	str	r0, [sp, #88]	; 0x58
   11ab4:	ldr	r0, [fp, #20]
   11ab8:	str	r0, [sp, #80]	; 0x50
   11abc:	ldr	r1, [fp, #8]
   11ac0:	mov	r0, #0
   11ac4:	str	r0, [sp, #84]	; 0x54
   11ac8:	mov	r0, #0
   11acc:	str	r0, [fp, #-84]	; 0xffffffac
   11ad0:	mov	r0, #0
   11ad4:	str	r0, [fp, #-72]	; 0xffffffb8
   11ad8:	mov	r0, #0
   11adc:	mov	r2, #0
   11ae0:	str	r2, [fp, #-56]	; 0xffffffc8
   11ae4:	mov	r2, #0
   11ae8:	str	r2, [sp, #64]	; 0x40
   11aec:	mov	r2, #1
   11af0:	str	r2, [fp, #-48]	; 0xffffffd0
   11af4:	cmp	r1, #10
   11af8:	bhi	12a24 <__assert_fail@plt+0x1b98>
   11afc:	mov	sl, r7
   11b00:	mov	r7, r1
   11b04:	add	r1, pc, #24
   11b08:	mov	r8, #0
   11b0c:	mov	r2, #1
   11b10:	mov	r3, #0
   11b14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11b18:	mov	lr, r9
   11b1c:	mov	r5, r6
   11b20:	ldr	pc, [r1, r7, lsl #2]
   11b24:	strdeq	r1, [r1], -r8
   11b28:	andeq	r1, r1, r8, lsr ip
   11b2c:	andeq	r1, r1, r8, lsl #24
   11b30:	strdeq	r1, [r1], -r0
   11b34:	andeq	r1, r1, ip, lsr #24
   11b38:	andeq	r1, r1, ip, lsl #25
   11b3c:	andeq	r1, r1, r8, lsl ip
   11b40:	andeq	r1, r1, r8, ror #25
   11b44:	andeq	r1, r1, r0, asr fp
   11b48:	andeq	r1, r1, r0, asr fp
   11b4c:	andeq	r1, r1, ip, ror fp
   11b50:	movw	r0, #18828	; 0x498c
   11b54:	movt	r0, #1
   11b58:	mov	r1, r7
   11b5c:	bl	1302c <__assert_fail@plt+0x21a0>
   11b60:	str	r0, [sp, #80]	; 0x50
   11b64:	movw	r0, #18830	; 0x498e
   11b68:	movt	r0, #1
   11b6c:	mov	r1, r7
   11b70:	bl	1302c <__assert_fail@plt+0x21a0>
   11b74:	mov	r5, r6
   11b78:	str	r0, [sp, #88]	; 0x58
   11b7c:	mov	r8, #0
   11b80:	tst	r4, #1
   11b84:	str	r7, [fp, #-64]	; 0xffffffc0
   11b88:	bne	11bc0 <__assert_fail@plt+0xd34>
   11b8c:	ldr	r0, [sp, #80]	; 0x50
   11b90:	ldrb	r0, [r0]
   11b94:	cmp	r0, #0
   11b98:	beq	11bc0 <__assert_fail@plt+0xd34>
   11b9c:	ldr	r1, [sp, #80]	; 0x50
   11ba0:	add	r1, r1, #1
   11ba4:	mov	r8, #0
   11ba8:	cmp	r8, sl
   11bac:	strbcc	r0, [r5, r8]
   11bb0:	ldrb	r0, [r1, r8]
   11bb4:	add	r8, r8, #1
   11bb8:	cmp	r0, #0
   11bbc:	bne	11ba8 <__assert_fail@plt+0xd1c>
   11bc0:	ldr	r7, [sp, #88]	; 0x58
   11bc4:	mov	r0, r7
   11bc8:	bl	10dc0 <strlen@plt>
   11bcc:	mov	r5, r6
   11bd0:	str	r0, [fp, #-72]	; 0xffffffb8
   11bd4:	str	r7, [fp, #-84]	; 0xffffffac
   11bd8:	mov	r2, #1
   11bdc:	mov	r3, r4
   11be0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11be4:	mov	lr, r9
   11be8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   11bec:	b	11ce8 <__assert_fail@plt+0xe5c>
   11bf0:	mov	r0, #1
   11bf4:	b	11c38 <__assert_fail@plt+0xdac>
   11bf8:	mov	r7, #0
   11bfc:	mov	r8, #0
   11c00:	mov	r2, r0
   11c04:	b	11ce4 <__assert_fail@plt+0xe58>
   11c08:	tst	r4, #1
   11c0c:	bne	11c38 <__assert_fail@plt+0xdac>
   11c10:	mov	r2, r0
   11c14:	b	11c60 <__assert_fail@plt+0xdd4>
   11c18:	mov	r0, #1
   11c1c:	str	r0, [fp, #-72]	; 0xffffffb8
   11c20:	mov	r8, #0
   11c24:	mov	r7, #5
   11c28:	b	11ca4 <__assert_fail@plt+0xe18>
   11c2c:	mov	r2, #1
   11c30:	tst	r4, #1
   11c34:	beq	11c60 <__assert_fail@plt+0xdd4>
   11c38:	mov	r1, #1
   11c3c:	str	r1, [fp, #-72]	; 0xffffffb8
   11c40:	mov	r8, #0
   11c44:	mov	r7, #2
   11c48:	movw	r1, #18830	; 0x498e
   11c4c:	movt	r1, #1
   11c50:	str	r1, [fp, #-84]	; 0xffffffac
   11c54:	mov	r2, r0
   11c58:	mov	r3, #1
   11c5c:	b	11ce8 <__assert_fail@plt+0xe5c>
   11c60:	mov	r8, #1
   11c64:	mov	r7, #2
   11c68:	cmp	sl, #0
   11c6c:	movne	r0, #39	; 0x27
   11c70:	strbne	r0, [r5]
   11c74:	movw	r0, #18830	; 0x498e
   11c78:	movt	r0, #1
   11c7c:	str	r0, [fp, #-84]	; 0xffffffac
   11c80:	mov	r0, #1
   11c84:	str	r0, [fp, #-72]	; 0xffffffb8
   11c88:	b	11ce4 <__assert_fail@plt+0xe58>
   11c8c:	mov	r7, #5
   11c90:	tst	r4, #1
   11c94:	beq	11cbc <__assert_fail@plt+0xe30>
   11c98:	mov	r0, #1
   11c9c:	str	r0, [fp, #-72]	; 0xffffffb8
   11ca0:	mov	r8, #0
   11ca4:	movw	r0, #18826	; 0x498a
   11ca8:	movt	r0, #1
   11cac:	str	r0, [fp, #-84]	; 0xffffffac
   11cb0:	mov	r2, #1
   11cb4:	mov	r3, #1
   11cb8:	b	11ce8 <__assert_fail@plt+0xe5c>
   11cbc:	cmp	sl, #0
   11cc0:	movne	r0, #34	; 0x22
   11cc4:	strbne	r0, [r5]
   11cc8:	mov	r8, #1
   11ccc:	movw	r0, #18826	; 0x498a
   11cd0:	movt	r0, #1
   11cd4:	str	r0, [fp, #-84]	; 0xffffffac
   11cd8:	mov	r0, #1
   11cdc:	str	r0, [fp, #-72]	; 0xffffffb8
   11ce0:	mov	r2, #1
   11ce4:	mov	r3, #0
   11ce8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11cec:	cmp	r0, #0
   11cf0:	movwne	r0, #1
   11cf4:	and	r1, r0, r3
   11cf8:	and	r1, r2, r1
   11cfc:	str	r1, [sp, #56]	; 0x38
   11d00:	sub	r1, r7, #2
   11d04:	clz	r1, r1
   11d08:	lsr	r1, r1, #5
   11d0c:	and	r1, r1, r3
   11d10:	str	r1, [sp, #68]	; 0x44
   11d14:	str	r7, [fp, #-64]	; 0xffffffc0
   11d18:	subs	r1, r7, #2
   11d1c:	movwne	r1, #1
   11d20:	eor	r4, r3, #1
   11d24:	str	r4, [fp, #-88]	; 0xffffffa8
   11d28:	orr	r4, r1, r4
   11d2c:	str	r4, [sp, #72]	; 0x48
   11d30:	and	r1, r1, r2
   11d34:	and	r0, r0, r1
   11d38:	str	r0, [fp, #-60]	; 0xffffffc4
   11d3c:	str	r3, [fp, #-76]	; 0xffffffb4
   11d40:	orr	r0, r1, r3
   11d44:	eor	r0, r0, #1
   11d48:	ldr	r1, [fp, #16]
   11d4c:	clz	r1, r1
   11d50:	lsr	r1, r1, #5
   11d54:	orr	r0, r1, r0
   11d58:	str	r0, [fp, #-68]	; 0xffffffbc
   11d5c:	str	r2, [sp, #92]	; 0x5c
   11d60:	eor	r0, r2, #1
   11d64:	str	r0, [sp, #60]	; 0x3c
   11d68:	mov	r7, #0
   11d6c:	cmn	lr, #1
   11d70:	beq	11d80 <__assert_fail@plt+0xef4>
   11d74:	cmp	r7, lr
   11d78:	bne	11d8c <__assert_fail@plt+0xf00>
   11d7c:	b	12898 <__assert_fail@plt+0x1a0c>
   11d80:	ldrb	r0, [ip, r7]
   11d84:	cmp	r0, #0
   11d88:	beq	12898 <__assert_fail@plt+0x1a0c>
   11d8c:	mov	r9, #0
   11d90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d94:	cmp	r0, #0
   11d98:	beq	11dcc <__assert_fail@plt+0xf40>
   11d9c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11da0:	add	r4, r7, r0
   11da4:	cmp	r0, #2
   11da8:	bcc	11dc4 <__assert_fail@plt+0xf38>
   11dac:	cmn	lr, #1
   11db0:	bne	11dc4 <__assert_fail@plt+0xf38>
   11db4:	mov	r0, ip
   11db8:	bl	10dc0 <strlen@plt>
   11dbc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11dc0:	mov	lr, r0
   11dc4:	cmp	r4, lr
   11dc8:	bls	11dd8 <__assert_fail@plt+0xf4c>
   11dcc:	mov	r0, #0
   11dd0:	str	r0, [fp, #-52]	; 0xffffffcc
   11dd4:	b	11e1c <__assert_fail@plt+0xf90>
   11dd8:	mov	r4, lr
   11ddc:	add	r0, ip, r7
   11de0:	ldr	r1, [fp, #-84]	; 0xffffffac
   11de4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11de8:	bl	10db4 <bcmp@plt>
   11dec:	cmp	r0, #0
   11df0:	mov	r1, r0
   11df4:	movwne	r1, #1
   11df8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   11dfc:	orr	r1, r1, r2
   11e00:	tst	r1, #1
   11e04:	beq	1296c <__assert_fail@plt+0x1ae0>
   11e08:	clz	r0, r0
   11e0c:	lsr	r0, r0, #5
   11e10:	str	r0, [fp, #-52]	; 0xffffffcc
   11e14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11e18:	mov	lr, r4
   11e1c:	ldrb	r4, [ip, r7]
   11e20:	cmp	r4, #126	; 0x7e
   11e24:	bhi	12354 <__assert_fail@plt+0x14c8>
   11e28:	mov	r6, #1
   11e2c:	mov	r2, #110	; 0x6e
   11e30:	mov	r0, #97	; 0x61
   11e34:	add	r3, pc, #4
   11e38:	mov	r1, #0
   11e3c:	ldr	pc, [r3, r4, lsl #2]
   11e40:			; <UNDEFINED> instruction: 0x000121b4
   11e44:	andeq	r2, r1, r4, asr r3
   11e48:	andeq	r2, r1, r4, asr r3
   11e4c:	andeq	r2, r1, r4, asr r3
   11e50:	andeq	r2, r1, r4, asr r3
   11e54:	andeq	r2, r1, r4, asr r3
   11e58:	andeq	r2, r1, r4, asr r3
   11e5c:	andeq	r2, r1, r8, lsr #8
   11e60:	muleq	r1, r4, r1
   11e64:	andeq	r2, r1, ip, lsl #3
   11e68:	andeq	r2, r1, r0, lsr #3
   11e6c:			; <UNDEFINED> instruction: 0x000122bc
   11e70:	andeq	r2, r1, r4, lsl #3
   11e74:	muleq	r1, ip, r1
   11e78:	andeq	r2, r1, r4, asr r3
   11e7c:	andeq	r2, r1, r4, asr r3
   11e80:	andeq	r2, r1, r4, asr r3
   11e84:	andeq	r2, r1, r4, asr r3
   11e88:	andeq	r2, r1, r4, asr r3
   11e8c:	andeq	r2, r1, r4, asr r3
   11e90:	andeq	r2, r1, r4, asr r3
   11e94:	andeq	r2, r1, r4, asr r3
   11e98:	andeq	r2, r1, r4, asr r3
   11e9c:	andeq	r2, r1, r4, asr r3
   11ea0:	andeq	r2, r1, r4, asr r3
   11ea4:	andeq	r2, r1, r4, asr r3
   11ea8:	andeq	r2, r1, r4, asr r3
   11eac:	andeq	r2, r1, r4, asr r3
   11eb0:	andeq	r2, r1, r4, asr r3
   11eb4:	andeq	r2, r1, r4, asr r3
   11eb8:	andeq	r2, r1, r4, asr r3
   11ebc:	andeq	r2, r1, r4, asr r3
   11ec0:	andeq	r2, r1, r8, lsr r1
   11ec4:	andeq	r2, r1, ip, lsr r1
   11ec8:	andeq	r2, r1, ip, lsr r1
   11ecc:	andeq	r2, r1, r4, lsr #2
   11ed0:	andeq	r2, r1, ip, lsr r1
   11ed4:	andeq	r2, r1, ip, lsr r0
   11ed8:	andeq	r2, r1, ip, lsr r1
   11edc:	andeq	r2, r1, r4, asr #5
   11ee0:	andeq	r2, r1, ip, lsr r1
   11ee4:	andeq	r2, r1, ip, lsr r1
   11ee8:	andeq	r2, r1, ip, lsr r1
   11eec:	andeq	r2, r1, ip, lsr r0
   11ef0:	andeq	r2, r1, ip, lsr r0
   11ef4:	andeq	r2, r1, ip, lsr r0
   11ef8:	andeq	r2, r1, ip, lsr r0
   11efc:	andeq	r2, r1, ip, lsr r0
   11f00:	andeq	r2, r1, ip, lsr r0
   11f04:	andeq	r2, r1, ip, lsr r0
   11f08:	andeq	r2, r1, ip, lsr r0
   11f0c:	andeq	r2, r1, ip, lsr r0
   11f10:	andeq	r2, r1, ip, lsr r0
   11f14:	andeq	r2, r1, ip, lsr r0
   11f18:	andeq	r2, r1, ip, lsr r0
   11f1c:	andeq	r2, r1, ip, lsr r0
   11f20:	andeq	r2, r1, ip, lsr r0
   11f24:	andeq	r2, r1, ip, lsr r0
   11f28:	andeq	r2, r1, ip, lsr r0
   11f2c:	andeq	r2, r1, ip, lsr r1
   11f30:	andeq	r2, r1, ip, lsr r1
   11f34:	andeq	r2, r1, ip, lsr r1
   11f38:	andeq	r2, r1, ip, lsr r1
   11f3c:	andeq	r2, r1, ip, lsl #5
   11f40:	andeq	r2, r1, r4, asr r3
   11f44:	andeq	r2, r1, ip, lsr r0
   11f48:	andeq	r2, r1, ip, lsr r0
   11f4c:	andeq	r2, r1, ip, lsr r0
   11f50:	andeq	r2, r1, ip, lsr r0
   11f54:	andeq	r2, r1, ip, lsr r0
   11f58:	andeq	r2, r1, ip, lsr r0
   11f5c:	andeq	r2, r1, ip, lsr r0
   11f60:	andeq	r2, r1, ip, lsr r0
   11f64:	andeq	r2, r1, ip, lsr r0
   11f68:	andeq	r2, r1, ip, lsr r0
   11f6c:	andeq	r2, r1, ip, lsr r0
   11f70:	andeq	r2, r1, ip, lsr r0
   11f74:	andeq	r2, r1, ip, lsr r0
   11f78:	andeq	r2, r1, ip, lsr r0
   11f7c:	andeq	r2, r1, ip, lsr r0
   11f80:	andeq	r2, r1, ip, lsr r0
   11f84:	andeq	r2, r1, ip, lsr r0
   11f88:	andeq	r2, r1, ip, lsr r0
   11f8c:	andeq	r2, r1, ip, lsr r0
   11f90:	andeq	r2, r1, ip, lsr r0
   11f94:	andeq	r2, r1, ip, lsr r0
   11f98:	andeq	r2, r1, ip, lsr r0
   11f9c:	andeq	r2, r1, ip, lsr r0
   11fa0:	andeq	r2, r1, ip, lsr r0
   11fa4:	andeq	r2, r1, ip, lsr r0
   11fa8:	andeq	r2, r1, ip, lsr r0
   11fac:	andeq	r2, r1, ip, lsr r1
   11fb0:	andeq	r2, r1, r4, ror #2
   11fb4:	andeq	r2, r1, ip, lsr r0
   11fb8:	andeq	r2, r1, ip, lsr r1
   11fbc:	andeq	r2, r1, ip, lsr r0
   11fc0:	andeq	r2, r1, ip, lsr r1
   11fc4:	andeq	r2, r1, ip, lsr r0
   11fc8:	andeq	r2, r1, ip, lsr r0
   11fcc:	andeq	r2, r1, ip, lsr r0
   11fd0:	andeq	r2, r1, ip, lsr r0
   11fd4:	andeq	r2, r1, ip, lsr r0
   11fd8:	andeq	r2, r1, ip, lsr r0
   11fdc:	andeq	r2, r1, ip, lsr r0
   11fe0:	andeq	r2, r1, ip, lsr r0
   11fe4:	andeq	r2, r1, ip, lsr r0
   11fe8:	andeq	r2, r1, ip, lsr r0
   11fec:	andeq	r2, r1, ip, lsr r0
   11ff0:	andeq	r2, r1, ip, lsr r0
   11ff4:	andeq	r2, r1, ip, lsr r0
   11ff8:	andeq	r2, r1, ip, lsr r0
   11ffc:	andeq	r2, r1, ip, lsr r0
   12000:	andeq	r2, r1, ip, lsr r0
   12004:	andeq	r2, r1, ip, lsr r0
   12008:	andeq	r2, r1, ip, lsr r0
   1200c:	andeq	r2, r1, ip, lsr r0
   12010:	andeq	r2, r1, ip, lsr r0
   12014:	andeq	r2, r1, ip, lsr r0
   12018:	andeq	r2, r1, ip, lsr r0
   1201c:	andeq	r2, r1, ip, lsr r0
   12020:	andeq	r2, r1, ip, lsr r0
   12024:	andeq	r2, r1, ip, lsr r0
   12028:	andeq	r2, r1, ip, lsr r0
   1202c:	strdeq	r2, [r1], -r8
   12030:	andeq	r2, r1, ip, lsr r1
   12034:	strdeq	r2, [r1], -r8
   12038:	andeq	r2, r1, r4, lsr #2
   1203c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12040:	tst	r0, #1
   12044:	bne	12070 <__assert_fail@plt+0x11e4>
   12048:	ubfx	r0, r4, #5, #3
   1204c:	ldr	r1, [fp, #16]
   12050:	ldr	r0, [r1, r0, lsl #2]
   12054:	and	r1, r4, #31
   12058:	mov	r2, #1
   1205c:	tst	r0, r2, lsl r1
   12060:	beq	12070 <__assert_fail@plt+0x11e4>
   12064:	mov	r0, r4
   12068:	mov	r1, r6
   1206c:	b	12084 <__assert_fail@plt+0x11f8>
   12070:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12074:	cmp	r0, #0
   12078:	mov	r0, r4
   1207c:	mov	r1, r6
   12080:	beq	123bc <__assert_fail@plt+0x1530>
   12084:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12088:	tst	r2, #1
   1208c:	bne	12980 <__assert_fail@plt+0x1af4>
   12090:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12094:	subs	r2, r2, #2
   12098:	movwne	r2, #1
   1209c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   120a0:	orr	r2, r2, r3
   120a4:	tst	r2, #1
   120a8:	bne	120e4 <__assert_fail@plt+0x1258>
   120ac:	cmp	r8, sl
   120b0:	movcc	r2, #39	; 0x27
   120b4:	strbcc	r2, [r5, r8]
   120b8:	add	r2, r8, #1
   120bc:	cmp	r2, sl
   120c0:	movcc	r3, #36	; 0x24
   120c4:	strbcc	r3, [r5, r2]
   120c8:	add	r2, r8, #2
   120cc:	cmp	r2, sl
   120d0:	movcc	r3, #39	; 0x27
   120d4:	strbcc	r3, [r5, r2]
   120d8:	add	r8, r8, #3
   120dc:	mov	r2, #1
   120e0:	str	r2, [fp, #-56]	; 0xffffffc8
   120e4:	cmp	r8, sl
   120e8:	movcc	r2, #92	; 0x5c
   120ec:	strbcc	r2, [r5, r8]
   120f0:	add	r8, r8, #1
   120f4:	b	12400 <__assert_fail@plt+0x1574>
   120f8:	cmp	lr, #1
   120fc:	beq	12124 <__assert_fail@plt+0x1298>
   12100:	mov	r6, #0
   12104:	cmn	lr, #1
   12108:	bne	12130 <__assert_fail@plt+0x12a4>
   1210c:	ldrb	r0, [ip, #1]
   12110:	cmp	r0, #0
   12114:	beq	12124 <__assert_fail@plt+0x1298>
   12118:	mvn	lr, #0
   1211c:	mov	r9, #0
   12120:	b	1203c <__assert_fail@plt+0x11b0>
   12124:	mov	r6, #0
   12128:	cmp	r7, #0
   1212c:	beq	12138 <__assert_fail@plt+0x12ac>
   12130:	mov	r9, #0
   12134:	b	1203c <__assert_fail@plt+0x11b0>
   12138:	mov	r1, #1
   1213c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12140:	cmp	r0, #2
   12144:	bne	1215c <__assert_fail@plt+0x12d0>
   12148:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1214c:	tst	r0, #1
   12150:	mov	r6, r1
   12154:	beq	1203c <__assert_fail@plt+0x11b0>
   12158:	b	12980 <__assert_fail@plt+0x1af4>
   1215c:	mov	r6, r1
   12160:	b	1203c <__assert_fail@plt+0x11b0>
   12164:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12168:	cmp	r0, #2
   1216c:	bne	123a0 <__assert_fail@plt+0x1514>
   12170:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12174:	tst	r0, #1
   12178:	bne	12980 <__assert_fail@plt+0x1af4>
   1217c:	mov	r9, #0
   12180:	b	123b4 <__assert_fail@plt+0x1528>
   12184:	mov	r0, #102	; 0x66
   12188:	b	12428 <__assert_fail@plt+0x159c>
   1218c:	mov	r2, #116	; 0x74
   12190:	b	121a0 <__assert_fail@plt+0x1314>
   12194:	mov	r0, #98	; 0x62
   12198:	b	12428 <__assert_fail@plt+0x159c>
   1219c:	mov	r2, #114	; 0x72
   121a0:	ldr	r0, [sp, #72]	; 0x48
   121a4:	tst	r0, #1
   121a8:	mov	r0, r2
   121ac:	bne	12428 <__assert_fail@plt+0x159c>
   121b0:	b	12980 <__assert_fail@plt+0x1af4>
   121b4:	ldr	r0, [sp, #92]	; 0x5c
   121b8:	tst	r0, #1
   121bc:	beq	12444 <__assert_fail@plt+0x15b8>
   121c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121c4:	tst	r0, #1
   121c8:	bne	12980 <__assert_fail@plt+0x1af4>
   121cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   121d0:	subs	r0, r0, #2
   121d4:	movwne	r0, #1
   121d8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   121dc:	orr	r0, r0, r1
   121e0:	tst	r0, #1
   121e4:	bne	12220 <__assert_fail@plt+0x1394>
   121e8:	cmp	r8, sl
   121ec:	movcc	r0, #39	; 0x27
   121f0:	strbcc	r0, [r5, r8]
   121f4:	add	r0, r8, #1
   121f8:	cmp	r0, sl
   121fc:	movcc	r1, #36	; 0x24
   12200:	strbcc	r1, [r5, r0]
   12204:	add	r0, r8, #2
   12208:	cmp	r0, sl
   1220c:	movcc	r1, #39	; 0x27
   12210:	strbcc	r1, [r5, r0]
   12214:	add	r8, r8, #3
   12218:	mov	r0, #1
   1221c:	str	r0, [fp, #-56]	; 0xffffffc8
   12220:	cmp	r8, sl
   12224:	movcc	r0, #92	; 0x5c
   12228:	strbcc	r0, [r5, r8]
   1222c:	add	r0, r8, #1
   12230:	mov	r6, #0
   12234:	mov	r9, #1
   12238:	mov	r4, #48	; 0x30
   1223c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12240:	cmp	r1, #2
   12244:	beq	12608 <__assert_fail@plt+0x177c>
   12248:	add	r1, r7, #1
   1224c:	cmp	r1, lr
   12250:	bcs	12608 <__assert_fail@plt+0x177c>
   12254:	ldrb	r1, [ip, r1]
   12258:	sub	r1, r1, #48	; 0x30
   1225c:	uxtb	r1, r1
   12260:	cmp	r1, #9
   12264:	bhi	12608 <__assert_fail@plt+0x177c>
   12268:	cmp	r0, sl
   1226c:	movcc	r1, #48	; 0x30
   12270:	strbcc	r1, [r5, r0]
   12274:	add	r0, r8, #2
   12278:	cmp	r0, sl
   1227c:	movcc	r1, #48	; 0x30
   12280:	strbcc	r1, [r5, r0]
   12284:	add	r8, r8, #3
   12288:	b	1203c <__assert_fail@plt+0x11b0>
   1228c:	mov	r9, #0
   12290:	mov	r4, #63	; 0x3f
   12294:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12298:	cmp	r0, #5
   1229c:	beq	12610 <__assert_fail@plt+0x1784>
   122a0:	cmp	r0, #2
   122a4:	bne	126b8 <__assert_fail@plt+0x182c>
   122a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122ac:	tst	r0, #1
   122b0:	mov	r6, #0
   122b4:	beq	1203c <__assert_fail@plt+0x11b0>
   122b8:	b	12980 <__assert_fail@plt+0x1af4>
   122bc:	mov	r0, #118	; 0x76
   122c0:	b	12428 <__assert_fail@plt+0x159c>
   122c4:	mov	r4, #39	; 0x27
   122c8:	mov	r0, #1
   122cc:	str	r0, [sp, #64]	; 0x40
   122d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122d4:	cmp	r0, #2
   122d8:	bne	12460 <__assert_fail@plt+0x15d4>
   122dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122e0:	tst	r0, #1
   122e4:	bne	12980 <__assert_fail@plt+0x1af4>
   122e8:	ldr	r2, [sp, #84]	; 0x54
   122ec:	cmp	r2, #0
   122f0:	mov	r0, r2
   122f4:	movwne	r0, #1
   122f8:	clz	r1, sl
   122fc:	lsr	r1, r1, #5
   12300:	orrs	r0, r0, r1
   12304:	moveq	r2, sl
   12308:	str	r2, [sp, #84]	; 0x54
   1230c:	moveq	sl, r0
   12310:	cmp	r8, sl
   12314:	movcc	r0, #39	; 0x27
   12318:	strbcc	r0, [r5, r8]
   1231c:	add	r0, r8, #1
   12320:	cmp	r0, sl
   12324:	movcc	r1, #92	; 0x5c
   12328:	strbcc	r1, [r5, r0]
   1232c:	add	r0, r8, #2
   12330:	cmp	r0, sl
   12334:	movcc	r1, #39	; 0x27
   12338:	strbcc	r1, [r5, r0]
   1233c:	add	r8, r8, #3
   12340:	mov	r0, #0
   12344:	str	r0, [fp, #-56]	; 0xffffffc8
   12348:	mov	r9, #0
   1234c:	mov	r6, #1
   12350:	b	1203c <__assert_fail@plt+0x11b0>
   12354:	ldr	r0, [sp, #44]	; 0x2c
   12358:	cmp	r0, #1
   1235c:	bne	12468 <__assert_fail@plt+0x15dc>
   12360:	str	lr, [sp, #32]
   12364:	bl	10d9c <__ctype_b_loc@plt>
   12368:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1236c:	ldr	r0, [r0]
   12370:	add	r0, r0, r4, lsl #1
   12374:	ldrb	r0, [r0, #1]
   12378:	ubfx	r6, r0, #6, #1
   1237c:	mov	r2, #1
   12380:	ldr	r0, [sp, #60]	; 0x3c
   12384:	orr	r1, r6, r0
   12388:	cmp	r2, #1
   1238c:	bhi	126c0 <__assert_fail@plt+0x1834>
   12390:	tst	r1, #1
   12394:	beq	126c0 <__assert_fail@plt+0x1834>
   12398:	ldr	lr, [sp, #32]
   1239c:	b	1203c <__assert_fail@plt+0x11b0>
   123a0:	mov	r9, #0
   123a4:	mov	r0, #92	; 0x5c
   123a8:	ldr	r1, [sp, #56]	; 0x38
   123ac:	cmp	r1, #0
   123b0:	beq	12428 <__assert_fail@plt+0x159c>
   123b4:	mov	r4, #92	; 0x5c
   123b8:	mov	r6, #0
   123bc:	cmp	r9, #0
   123c0:	bne	123f8 <__assert_fail@plt+0x156c>
   123c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   123c8:	tst	r0, #1
   123cc:	beq	123f8 <__assert_fail@plt+0x156c>
   123d0:	cmp	r8, sl
   123d4:	movcc	r0, #39	; 0x27
   123d8:	strbcc	r0, [r5, r8]
   123dc:	add	r0, r8, #1
   123e0:	cmp	r0, sl
   123e4:	movcc	r1, #39	; 0x27
   123e8:	strbcc	r1, [r5, r0]
   123ec:	add	r8, r8, #2
   123f0:	mov	r0, #0
   123f4:	str	r0, [fp, #-56]	; 0xffffffc8
   123f8:	mov	r1, r6
   123fc:	mov	r0, r4
   12400:	cmp	r8, sl
   12404:	strbcc	r0, [r5, r8]
   12408:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1240c:	and	r0, r0, r1
   12410:	str	r0, [fp, #-48]	; 0xffffffd0
   12414:	add	r8, r8, #1
   12418:	add	r7, r7, #1
   1241c:	cmn	lr, #1
   12420:	bne	11d74 <__assert_fail@plt+0xee8>
   12424:	b	11d80 <__assert_fail@plt+0xef4>
   12428:	mov	r9, #0
   1242c:	ldr	r1, [sp, #92]	; 0x5c
   12430:	tst	r1, #1
   12434:	mov	r6, #0
   12438:	mov	r1, #0
   1243c:	beq	1203c <__assert_fail@plt+0x11b0>
   12440:	b	12084 <__assert_fail@plt+0x11f8>
   12444:	mov	r4, #0
   12448:	ldr	r0, [sp, #40]	; 0x28
   1244c:	cmp	r0, #0
   12450:	mov	r9, #0
   12454:	mov	r6, #0
   12458:	beq	1203c <__assert_fail@plt+0x11b0>
   1245c:	b	12418 <__assert_fail@plt+0x158c>
   12460:	mov	r6, #1
   12464:	b	1203c <__assert_fail@plt+0x11b0>
   12468:	mov	r0, #0
   1246c:	str	r0, [fp, #-36]	; 0xffffffdc
   12470:	str	r0, [fp, #-40]	; 0xffffffd8
   12474:	cmn	lr, #1
   12478:	bne	1248c <__assert_fail@plt+0x1600>
   1247c:	mov	r0, ip
   12480:	bl	10dc0 <strlen@plt>
   12484:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12488:	mov	lr, r0
   1248c:	ldr	r0, [sp, #76]	; 0x4c
   12490:	add	r0, r0, r7
   12494:	str	r0, [sp, #24]
   12498:	mov	r6, #1
   1249c:	mov	r2, #0
   124a0:	sub	r0, fp, #40	; 0x28
   124a4:	mov	r3, r0
   124a8:	str	r5, [sp, #28]
   124ac:	str	lr, [sp, #32]
   124b0:	b	124f4 <__assert_fail@plt+0x1668>
   124b4:	ldr	r5, [sp, #52]	; 0x34
   124b8:	add	r5, r0, r5
   124bc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124c0:	bl	10d0c <iswprint@plt>
   124c4:	cmp	r0, #0
   124c8:	movwne	r0, #1
   124cc:	and	r6, r6, r0
   124d0:	sub	r0, fp, #40	; 0x28
   124d4:	bl	10ce8 <mbsinit@plt>
   124d8:	sub	r3, fp, #40	; 0x28
   124dc:	mov	r2, r5
   124e0:	ldr	lr, [sp, #32]
   124e4:	cmp	r0, #0
   124e8:	ldr	r5, [sp, #28]
   124ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124f0:	bne	12380 <__assert_fail@plt+0x14f4>
   124f4:	str	r2, [sp, #52]	; 0x34
   124f8:	add	r0, r2, r7
   124fc:	add	r1, ip, r0
   12500:	str	r0, [sp, #48]	; 0x30
   12504:	sub	r2, lr, r0
   12508:	sub	r0, fp, #44	; 0x2c
   1250c:	bl	13e5c <__assert_fail@plt+0x2fd0>
   12510:	cmp	r0, #0
   12514:	beq	1288c <__assert_fail@plt+0x1a00>
   12518:	cmn	r0, #1
   1251c:	beq	12848 <__assert_fail@plt+0x19bc>
   12520:	cmn	r0, #2
   12524:	ldr	lr, [sp, #32]
   12528:	beq	12850 <__assert_fail@plt+0x19c4>
   1252c:	cmp	r0, #2
   12530:	mov	r1, #0
   12534:	movwcc	r1, #1
   12538:	ldr	r2, [sp, #68]	; 0x44
   1253c:	eor	r2, r2, #1
   12540:	orrs	r1, r2, r1
   12544:	bne	124b4 <__assert_fail@plt+0x1628>
   12548:	ldr	r1, [sp, #52]	; 0x34
   1254c:	ldr	r2, [sp, #24]
   12550:	add	r1, r2, r1
   12554:	sub	r2, r0, #1
   12558:	b	12568 <__assert_fail@plt+0x16dc>
   1255c:	add	r1, r1, #1
   12560:	subs	r2, r2, #1
   12564:	beq	124b4 <__assert_fail@plt+0x1628>
   12568:	ldrb	r3, [r1]
   1256c:	sub	r3, r3, #91	; 0x5b
   12570:	cmp	r3, #33	; 0x21
   12574:	bhi	1255c <__assert_fail@plt+0x16d0>
   12578:	add	r5, pc, #0
   1257c:	ldr	pc, [r5, r3, lsl #2]
   12580:	andeq	r2, r1, r8, ror r9
   12584:	andeq	r2, r1, r8, ror r9
   12588:	andeq	r2, r1, ip, asr r5
   1258c:	andeq	r2, r1, r8, ror r9
   12590:	andeq	r2, r1, ip, asr r5
   12594:	andeq	r2, r1, r8, ror r9
   12598:	andeq	r2, r1, ip, asr r5
   1259c:	andeq	r2, r1, ip, asr r5
   125a0:	andeq	r2, r1, ip, asr r5
   125a4:	andeq	r2, r1, ip, asr r5
   125a8:	andeq	r2, r1, ip, asr r5
   125ac:	andeq	r2, r1, ip, asr r5
   125b0:	andeq	r2, r1, ip, asr r5
   125b4:	andeq	r2, r1, ip, asr r5
   125b8:	andeq	r2, r1, ip, asr r5
   125bc:	andeq	r2, r1, ip, asr r5
   125c0:	andeq	r2, r1, ip, asr r5
   125c4:	andeq	r2, r1, ip, asr r5
   125c8:	andeq	r2, r1, ip, asr r5
   125cc:	andeq	r2, r1, ip, asr r5
   125d0:	andeq	r2, r1, ip, asr r5
   125d4:	andeq	r2, r1, ip, asr r5
   125d8:	andeq	r2, r1, ip, asr r5
   125dc:	andeq	r2, r1, ip, asr r5
   125e0:	andeq	r2, r1, ip, asr r5
   125e4:	andeq	r2, r1, ip, asr r5
   125e8:	andeq	r2, r1, ip, asr r5
   125ec:	andeq	r2, r1, ip, asr r5
   125f0:	andeq	r2, r1, ip, asr r5
   125f4:	andeq	r2, r1, ip, asr r5
   125f8:	andeq	r2, r1, ip, asr r5
   125fc:	andeq	r2, r1, ip, asr r5
   12600:	andeq	r2, r1, ip, asr r5
   12604:	andeq	r2, r1, r8, ror r9
   12608:	mov	r8, r0
   1260c:	b	1203c <__assert_fail@plt+0x11b0>
   12610:	ldr	r0, [sp, #36]	; 0x24
   12614:	cmp	r0, #0
   12618:	beq	126b8 <__assert_fail@plt+0x182c>
   1261c:	add	r0, r7, #2
   12620:	cmp	r0, lr
   12624:	bcs	126b8 <__assert_fail@plt+0x182c>
   12628:	add	r1, r7, ip
   1262c:	ldrb	r1, [r1, #1]
   12630:	cmp	r1, #63	; 0x3f
   12634:	bne	126b8 <__assert_fail@plt+0x182c>
   12638:	ldrb	r1, [ip, r0]
   1263c:	sub	r2, r1, #33	; 0x21
   12640:	cmp	r2, #29
   12644:	bhi	126b8 <__assert_fail@plt+0x182c>
   12648:	mov	r3, #1
   1264c:	movw	r6, #20929	; 0x51c1
   12650:	movt	r6, #14336	; 0x3800
   12654:	tst	r6, r3, lsl r2
   12658:	beq	126b8 <__assert_fail@plt+0x182c>
   1265c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12660:	tst	r2, #1
   12664:	bne	12980 <__assert_fail@plt+0x1af4>
   12668:	cmp	r8, sl
   1266c:	movcc	r2, #63	; 0x3f
   12670:	strbcc	r2, [r5, r8]
   12674:	add	r2, r8, #1
   12678:	cmp	r2, sl
   1267c:	movcc	r3, #34	; 0x22
   12680:	strbcc	r3, [r5, r2]
   12684:	add	r2, r8, #2
   12688:	cmp	r2, sl
   1268c:	movcc	r3, #34	; 0x22
   12690:	strbcc	r3, [r5, r2]
   12694:	add	r2, r8, #3
   12698:	cmp	r2, sl
   1269c:	movcc	r3, #63	; 0x3f
   126a0:	strbcc	r3, [r5, r2]
   126a4:	add	r8, r8, #4
   126a8:	mov	r7, r0
   126ac:	mov	r4, r1
   126b0:	mov	r6, #0
   126b4:	b	1203c <__assert_fail@plt+0x11b0>
   126b8:	mov	r6, #0
   126bc:	b	1203c <__assert_fail@plt+0x11b0>
   126c0:	add	r0, r2, r7
   126c4:	str	r0, [sp, #52]	; 0x34
   126c8:	mov	r2, #0
   126cc:	ldr	lr, [sp, #32]
   126d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   126d4:	str	r1, [sp, #48]	; 0x30
   126d8:	tst	r1, #1
   126dc:	bne	127b8 <__assert_fail@plt+0x192c>
   126e0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   126e4:	tst	r1, #1
   126e8:	bne	12980 <__assert_fail@plt+0x1af4>
   126ec:	mov	r3, r0
   126f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126f4:	subs	r1, r0, #2
   126f8:	movwne	r1, #1
   126fc:	orr	r1, r1, r3
   12700:	tst	r1, #1
   12704:	bne	1273c <__assert_fail@plt+0x18b0>
   12708:	cmp	r8, sl
   1270c:	movcc	r0, #39	; 0x27
   12710:	strbcc	r0, [r5, r8]
   12714:	add	r2, r8, #1
   12718:	cmp	r2, sl
   1271c:	movcc	r0, #36	; 0x24
   12720:	strbcc	r0, [r5, r2]
   12724:	add	r2, r8, #2
   12728:	cmp	r2, sl
   1272c:	movcc	r0, #39	; 0x27
   12730:	strbcc	r0, [r5, r2]
   12734:	add	r8, r8, #3
   12738:	mov	r3, #1
   1273c:	cmp	r8, sl
   12740:	movcc	r1, #92	; 0x5c
   12744:	strbcc	r1, [r5, r8]
   12748:	add	r2, r8, #1
   1274c:	cmp	r2, sl
   12750:	bcs	12764 <__assert_fail@plt+0x18d8>
   12754:	uxtb	r1, r4
   12758:	mov	r0, #48	; 0x30
   1275c:	orr	r1, r0, r1, lsr #6
   12760:	strb	r1, [r5, r2]
   12764:	add	r2, r8, #2
   12768:	cmp	r2, sl
   1276c:	lsrcc	r1, r4, #3
   12770:	movcc	r0, #6
   12774:	bficc	r1, r0, #3, #29
   12778:	strbcc	r1, [r5, r2]
   1277c:	mov	r0, #6
   12780:	bfi	r4, r0, #3, #29
   12784:	add	r8, r8, #3
   12788:	mov	r2, #1
   1278c:	mov	r0, r3
   12790:	b	127dc <__assert_fail@plt+0x1950>
   12794:	cmp	r8, sl
   12798:	strbcc	r4, [r5, r8]
   1279c:	ldr	r1, [sp, #76]	; 0x4c
   127a0:	ldrb	r4, [r1, r7]
   127a4:	add	r8, r8, #1
   127a8:	mov	r7, r3
   127ac:	ldr	r1, [sp, #48]	; 0x30
   127b0:	tst	r1, #1
   127b4:	beq	126e0 <__assert_fail@plt+0x1854>
   127b8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   127bc:	tst	r1, #1
   127c0:	beq	127d4 <__assert_fail@plt+0x1948>
   127c4:	cmp	r8, sl
   127c8:	movcc	r1, #92	; 0x5c
   127cc:	strbcc	r1, [r5, r8]
   127d0:	add	r8, r8, #1
   127d4:	mov	r1, #0
   127d8:	str	r1, [fp, #-52]	; 0xffffffcc
   127dc:	and	r9, r2, #1
   127e0:	add	r3, r7, #1
   127e4:	ldr	r1, [sp, #52]	; 0x34
   127e8:	cmp	r1, r3
   127ec:	bls	12830 <__assert_fail@plt+0x19a4>
   127f0:	cmp	r9, #0
   127f4:	movwne	r9, #1
   127f8:	mvn	r1, r0
   127fc:	orr	r1, r1, r9
   12800:	tst	r1, #1
   12804:	bne	12794 <__assert_fail@plt+0x1908>
   12808:	cmp	r8, sl
   1280c:	movcc	r1, #39	; 0x27
   12810:	strbcc	r1, [r5, r8]
   12814:	add	r1, r8, #1
   12818:	cmp	r1, sl
   1281c:	movcc	r0, #39	; 0x27
   12820:	strbcc	r0, [r5, r1]
   12824:	add	r8, r8, #2
   12828:	mov	r0, #0
   1282c:	b	12794 <__assert_fail@plt+0x1908>
   12830:	str	r0, [fp, #-56]	; 0xffffffc8
   12834:	cmp	r9, #0
   12838:	movwne	r9, #1
   1283c:	cmp	r9, #0
   12840:	beq	123c4 <__assert_fail@plt+0x1538>
   12844:	b	123f8 <__assert_fail@plt+0x156c>
   12848:	mov	r6, #0
   1284c:	b	1288c <__assert_fail@plt+0x1a00>
   12850:	mov	r6, #0
   12854:	ldr	r0, [sp, #48]	; 0x30
   12858:	cmp	r0, lr
   1285c:	bcs	1288c <__assert_fail@plt+0x1a00>
   12860:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12864:	add	r0, ip, r7
   12868:	ldr	r2, [sp, #52]	; 0x34
   1286c:	ldrb	r1, [r0, r2]
   12870:	cmp	r1, #0
   12874:	beq	12380 <__assert_fail@plt+0x14f4>
   12878:	add	r2, r2, #1
   1287c:	add	r1, r7, r2
   12880:	cmp	r1, lr
   12884:	bcc	1286c <__assert_fail@plt+0x19e0>
   12888:	b	12380 <__assert_fail@plt+0x14f4>
   1288c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12890:	ldr	r2, [sp, #52]	; 0x34
   12894:	b	12380 <__assert_fail@plt+0x14f4>
   12898:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1289c:	eor	r0, r1, #2
   128a0:	orr	r0, r0, r8
   128a4:	clz	r0, r0
   128a8:	lsr	r0, r0, #5
   128ac:	ldr	r3, [fp, #-76]	; 0xffffffb4
   128b0:	tst	r3, r0
   128b4:	bne	12980 <__assert_fail@plt+0x1af4>
   128b8:	mov	r6, r5
   128bc:	subs	r0, r1, #2
   128c0:	movwne	r0, #1
   128c4:	orr	r0, r3, r0
   128c8:	tst	r0, #1
   128cc:	ldr	r2, [sp, #92]	; 0x5c
   128d0:	ldreq	r0, [sp, #64]	; 0x40
   128d4:	eoreq	r0, r0, #1
   128d8:	tsteq	r0, #1
   128dc:	bne	1291c <__assert_fail@plt+0x1a90>
   128e0:	mov	r9, lr
   128e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   128e8:	tst	r0, #1
   128ec:	bne	129e8 <__assert_fail@plt+0x1b5c>
   128f0:	ldr	r0, [sp, #84]	; 0x54
   128f4:	cmp	r0, #0
   128f8:	beq	1291c <__assert_fail@plt+0x1a90>
   128fc:	mov	r0, #0
   12900:	str	r0, [fp, #-48]	; 0xffffffd0
   12904:	mov	r1, #2
   12908:	cmp	sl, #0
   1290c:	mov	r0, r2
   12910:	mov	r4, r3
   12914:	ldr	r7, [sp, #84]	; 0x54
   12918:	beq	11af4 <__assert_fail@plt+0xc68>
   1291c:	ldr	r1, [fp, #-84]	; 0xffffffac
   12920:	clz	r0, r1
   12924:	lsr	r0, r0, #5
   12928:	orr	r0, r0, r3
   1292c:	tst	r0, #1
   12930:	bne	1295c <__assert_fail@plt+0x1ad0>
   12934:	ldrb	r0, [r1]
   12938:	cmp	r0, #0
   1293c:	beq	1295c <__assert_fail@plt+0x1ad0>
   12940:	add	r1, r1, #1
   12944:	cmp	r8, sl
   12948:	strbcc	r0, [r6, r8]
   1294c:	add	r8, r8, #1
   12950:	ldrb	r0, [r1], #1
   12954:	cmp	r0, #0
   12958:	bne	12944 <__assert_fail@plt+0x1ab8>
   1295c:	cmp	r8, sl
   12960:	movcc	r0, #0
   12964:	strbcc	r0, [r6, r8]
   12968:	b	129dc <__assert_fail@plt+0x1b50>
   1296c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12970:	mov	lr, r4
   12974:	b	12980 <__assert_fail@plt+0x1af4>
   12978:	ldr	r5, [sp, #28]
   1297c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12980:	mov	r0, #0
   12984:	ldr	r1, [fp, #12]
   12988:	bic	r1, r1, #2
   1298c:	mov	r2, #2
   12990:	ldr	r3, [sp, #92]	; 0x5c
   12994:	tst	r3, #1
   12998:	movwne	r2, #4
   1299c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   129a0:	cmp	r3, #2
   129a4:	movne	r2, r3
   129a8:	str	r2, [sp]
   129ac:	str	r1, [sp, #4]
   129b0:	str	r0, [sp, #8]
   129b4:	ldr	r0, [sp, #80]	; 0x50
   129b8:	str	r0, [sp, #12]
   129bc:	ldr	r0, [sp, #88]	; 0x58
   129c0:	str	r0, [sp, #16]
   129c4:	mov	r0, r5
   129c8:	mov	r1, sl
   129cc:	mov	r2, ip
   129d0:	mov	r3, lr
   129d4:	bl	11a68 <__assert_fail@plt+0xbdc>
   129d8:	mov	r8, r0
   129dc:	mov	r0, r8
   129e0:	sub	sp, fp, #28
   129e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e8:	mov	r0, #5
   129ec:	str	r0, [sp]
   129f0:	ldr	r0, [fp, #12]
   129f4:	str	r0, [sp, #4]
   129f8:	ldr	r0, [fp, #16]
   129fc:	str	r0, [sp, #8]
   12a00:	ldr	r0, [sp, #80]	; 0x50
   12a04:	str	r0, [sp, #12]
   12a08:	ldr	r0, [sp, #88]	; 0x58
   12a0c:	str	r0, [sp, #16]
   12a10:	mov	r0, r6
   12a14:	ldr	r1, [sp, #84]	; 0x54
   12a18:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12a1c:	mov	r3, r9
   12a20:	b	129d4 <__assert_fail@plt+0x1b48>
   12a24:	bl	10e80 <abort@plt>
   12a28:	mov	r3, r2
   12a2c:	mov	r2, #0
   12a30:	b	12a34 <__assert_fail@plt+0x1ba8>
   12a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a38:	add	fp, sp, #28
   12a3c:	sub	sp, sp, #36	; 0x24
   12a40:	mov	r4, r2
   12a44:	str	r2, [sp, #24]
   12a48:	mov	r5, r1
   12a4c:	mov	r6, r0
   12a50:	str	r0, [sp, #20]
   12a54:	movw	r8, #20808	; 0x5148
   12a58:	movt	r8, #2
   12a5c:	cmp	r3, #0
   12a60:	movne	r8, r3
   12a64:	bl	10dd8 <__errno_location@plt>
   12a68:	str	r0, [sp, #28]
   12a6c:	ldm	r8, {r3, r9}
   12a70:	ldr	r1, [r8, #40]	; 0x28
   12a74:	ldr	r2, [r8, #44]	; 0x2c
   12a78:	ldr	r7, [r0]
   12a7c:	str	r7, [sp, #32]
   12a80:	add	sl, r8, #8
   12a84:	cmp	r4, #0
   12a88:	orreq	r9, r9, #1
   12a8c:	stm	sp, {r3, r9, sl}
   12a90:	str	r1, [sp, #12]
   12a94:	str	r2, [sp, #16]
   12a98:	mov	r0, #0
   12a9c:	mov	r1, #0
   12aa0:	mov	r2, r6
   12aa4:	mov	r3, r5
   12aa8:	mov	r7, r5
   12aac:	bl	11a68 <__assert_fail@plt+0xbdc>
   12ab0:	mov	r5, r0
   12ab4:	add	r4, r0, #1
   12ab8:	mov	r0, r4
   12abc:	bl	13910 <__assert_fail@plt+0x2a84>
   12ac0:	mov	r6, r0
   12ac4:	ldr	r0, [r8]
   12ac8:	ldr	r1, [r8, #40]	; 0x28
   12acc:	ldr	r2, [r8, #44]	; 0x2c
   12ad0:	stm	sp, {r0, r9, sl}
   12ad4:	str	r1, [sp, #12]
   12ad8:	str	r2, [sp, #16]
   12adc:	mov	r0, r6
   12ae0:	mov	r1, r4
   12ae4:	ldr	r2, [sp, #20]
   12ae8:	mov	r3, r7
   12aec:	bl	11a68 <__assert_fail@plt+0xbdc>
   12af0:	ldr	r0, [sp, #24]
   12af4:	ldr	r1, [sp, #32]
   12af8:	ldr	r2, [sp, #28]
   12afc:	str	r1, [r2]
   12b00:	cmp	r0, #0
   12b04:	strne	r5, [r0]
   12b08:	mov	r0, r6
   12b0c:	sub	sp, fp, #28
   12b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b18:	add	fp, sp, #24
   12b1c:	movw	r8, #20688	; 0x50d0
   12b20:	movt	r8, #2
   12b24:	ldr	r4, [r8]
   12b28:	movw	r5, #20692	; 0x50d4
   12b2c:	movt	r5, #2
   12b30:	ldr	r0, [r5]
   12b34:	cmp	r0, #2
   12b38:	blt	12b64 <__assert_fail@plt+0x1cd8>
   12b3c:	add	r7, r4, #12
   12b40:	mov	r6, #0
   12b44:	ldr	r0, [r7, r6, lsl #3]
   12b48:	bl	13d5c <__assert_fail@plt+0x2ed0>
   12b4c:	add	r0, r6, #1
   12b50:	ldr	r1, [r5]
   12b54:	add	r2, r6, #2
   12b58:	cmp	r2, r1
   12b5c:	mov	r6, r0
   12b60:	blt	12b44 <__assert_fail@plt+0x1cb8>
   12b64:	ldr	r0, [r4, #4]
   12b68:	movw	r9, #20856	; 0x5178
   12b6c:	movt	r9, #2
   12b70:	cmp	r0, r9
   12b74:	movw	r7, #20696	; 0x50d8
   12b78:	movt	r7, #2
   12b7c:	beq	12b8c <__assert_fail@plt+0x1d00>
   12b80:	bl	13d5c <__assert_fail@plt+0x2ed0>
   12b84:	mov	r0, #256	; 0x100
   12b88:	stm	r7, {r0, r9}
   12b8c:	cmp	r4, r7
   12b90:	beq	12ba0 <__assert_fail@plt+0x1d14>
   12b94:	mov	r0, r4
   12b98:	bl	13d5c <__assert_fail@plt+0x2ed0>
   12b9c:	str	r7, [r8]
   12ba0:	mov	r0, #1
   12ba4:	str	r0, [r5]
   12ba8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12bac:	movw	r3, #20808	; 0x5148
   12bb0:	movt	r3, #2
   12bb4:	mvn	r2, #0
   12bb8:	b	12bbc <__assert_fail@plt+0x1d30>
   12bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bc0:	add	fp, sp, #28
   12bc4:	sub	sp, sp, #44	; 0x2c
   12bc8:	mov	r7, r3
   12bcc:	str	r2, [sp, #36]	; 0x24
   12bd0:	str	r1, [sp, #32]
   12bd4:	mov	r5, r0
   12bd8:	bl	10dd8 <__errno_location@plt>
   12bdc:	cmp	r5, #0
   12be0:	bmi	12d50 <__assert_fail@plt+0x1ec4>
   12be4:	cmn	r5, #-2147483647	; 0x80000001
   12be8:	beq	12d50 <__assert_fail@plt+0x1ec4>
   12bec:	movw	r4, #20688	; 0x50d0
   12bf0:	movt	r4, #2
   12bf4:	ldr	r6, [r4]
   12bf8:	str	r0, [sp, #28]
   12bfc:	ldr	r0, [r0]
   12c00:	str	r0, [sp, #24]
   12c04:	movw	r8, #20692	; 0x50d4
   12c08:	movt	r8, #2
   12c0c:	ldr	r1, [r8]
   12c10:	cmp	r1, r5
   12c14:	ble	12c20 <__assert_fail@plt+0x1d94>
   12c18:	mov	sl, r6
   12c1c:	b	12c8c <__assert_fail@plt+0x1e00>
   12c20:	str	r1, [fp, #-32]	; 0xffffffe0
   12c24:	mov	r0, #8
   12c28:	str	r0, [sp]
   12c2c:	movw	r9, #20696	; 0x50d8
   12c30:	movt	r9, #2
   12c34:	subs	r0, r6, r9
   12c38:	movne	r0, r6
   12c3c:	sub	r1, r5, r1
   12c40:	add	r2, r1, #1
   12c44:	sub	r1, fp, #32
   12c48:	mvn	r3, #-2147483648	; 0x80000000
   12c4c:	bl	139ec <__assert_fail@plt+0x2b60>
   12c50:	mov	sl, r0
   12c54:	str	r0, [r4]
   12c58:	cmp	r6, r9
   12c5c:	bne	12c68 <__assert_fail@plt+0x1ddc>
   12c60:	ldrd	r0, [r9]
   12c64:	stm	sl, {r0, r1}
   12c68:	ldr	r1, [r8]
   12c6c:	add	r0, sl, r1, lsl #3
   12c70:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12c74:	sub	r1, r2, r1
   12c78:	lsl	r2, r1, #3
   12c7c:	mov	r1, #0
   12c80:	bl	10df0 <memset@plt>
   12c84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12c88:	str	r0, [r8]
   12c8c:	mov	r9, sl
   12c90:	ldr	r6, [r9, r5, lsl #3]!
   12c94:	ldr	r4, [r9, #4]!
   12c98:	ldm	r7, {r0, r1}
   12c9c:	ldr	r2, [r7, #40]	; 0x28
   12ca0:	ldr	r3, [r7, #44]	; 0x2c
   12ca4:	orr	r8, r1, #1
   12ca8:	add	r1, r7, #8
   12cac:	stm	sp, {r0, r8}
   12cb0:	str	r1, [sp, #20]
   12cb4:	add	r0, sp, #8
   12cb8:	stm	r0, {r1, r2, r3}
   12cbc:	mov	r0, r4
   12cc0:	mov	r1, r6
   12cc4:	ldr	r2, [sp, #32]
   12cc8:	ldr	r3, [sp, #36]	; 0x24
   12ccc:	bl	11a68 <__assert_fail@plt+0xbdc>
   12cd0:	cmp	r6, r0
   12cd4:	bhi	12d38 <__assert_fail@plt+0x1eac>
   12cd8:	add	r6, r0, #1
   12cdc:	str	r6, [sl, r5, lsl #3]
   12ce0:	movw	r0, #20856	; 0x5178
   12ce4:	movt	r0, #2
   12ce8:	cmp	r4, r0
   12cec:	beq	12cf8 <__assert_fail@plt+0x1e6c>
   12cf0:	mov	r0, r4
   12cf4:	bl	13d5c <__assert_fail@plt+0x2ed0>
   12cf8:	mov	r0, r6
   12cfc:	bl	13910 <__assert_fail@plt+0x2a84>
   12d00:	mov	r4, r0
   12d04:	str	r0, [r9]
   12d08:	ldr	r0, [r7]
   12d0c:	ldr	r1, [r7, #40]	; 0x28
   12d10:	ldr	r2, [r7, #44]	; 0x2c
   12d14:	stm	sp, {r0, r8}
   12d18:	ldr	r0, [sp, #20]
   12d1c:	add	r3, sp, #8
   12d20:	stm	r3, {r0, r1, r2}
   12d24:	mov	r0, r4
   12d28:	mov	r1, r6
   12d2c:	ldr	r2, [sp, #32]
   12d30:	ldr	r3, [sp, #36]	; 0x24
   12d34:	bl	11a68 <__assert_fail@plt+0xbdc>
   12d38:	ldr	r0, [sp, #28]
   12d3c:	ldr	r1, [sp, #24]
   12d40:	str	r1, [r0]
   12d44:	mov	r0, r4
   12d48:	sub	sp, fp, #28
   12d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d50:	bl	10e80 <abort@plt>
   12d54:	movw	r3, #20808	; 0x5148
   12d58:	movt	r3, #2
   12d5c:	b	12bbc <__assert_fail@plt+0x1d30>
   12d60:	mov	r1, r0
   12d64:	mov	r0, #0
   12d68:	b	12bac <__assert_fail@plt+0x1d20>
   12d6c:	mov	r2, r1
   12d70:	mov	r1, r0
   12d74:	mov	r0, #0
   12d78:	b	12d54 <__assert_fail@plt+0x1ec8>
   12d7c:	push	{r4, r5, r6, sl, fp, lr}
   12d80:	add	fp, sp, #16
   12d84:	sub	sp, sp, #48	; 0x30
   12d88:	mov	r4, r2
   12d8c:	mov	r5, r0
   12d90:	mov	r6, sp
   12d94:	mov	r0, r6
   12d98:	bl	12db8 <__assert_fail@plt+0x1f2c>
   12d9c:	mov	r0, r5
   12da0:	mov	r1, r4
   12da4:	mvn	r2, #0
   12da8:	mov	r3, r6
   12dac:	bl	12bbc <__assert_fail@plt+0x1d30>
   12db0:	sub	sp, fp, #16
   12db4:	pop	{r4, r5, r6, sl, fp, pc}
   12db8:	push	{fp, lr}
   12dbc:	mov	fp, sp
   12dc0:	vmov.i32	q8, #0	; 0x00000000
   12dc4:	mov	r2, #32
   12dc8:	mov	r3, r0
   12dcc:	vst1.32	{d16-d17}, [r3], r2
   12dd0:	vst1.32	{d16-d17}, [r3]
   12dd4:	add	r2, r0, #16
   12dd8:	vst1.32	{d16-d17}, [r2]
   12ddc:	cmp	r1, #10
   12de0:	strne	r1, [r0]
   12de4:	popne	{fp, pc}
   12de8:	bl	10e80 <abort@plt>
   12dec:	push	{r4, r5, r6, r7, fp, lr}
   12df0:	add	fp, sp, #16
   12df4:	sub	sp, sp, #48	; 0x30
   12df8:	mov	r4, r3
   12dfc:	mov	r5, r2
   12e00:	mov	r6, r0
   12e04:	mov	r7, sp
   12e08:	mov	r0, r7
   12e0c:	bl	12db8 <__assert_fail@plt+0x1f2c>
   12e10:	mov	r0, r6
   12e14:	mov	r1, r5
   12e18:	mov	r2, r4
   12e1c:	mov	r3, r7
   12e20:	bl	12bbc <__assert_fail@plt+0x1d30>
   12e24:	sub	sp, fp, #16
   12e28:	pop	{r4, r5, r6, r7, fp, pc}
   12e2c:	mov	r2, r1
   12e30:	mov	r1, r0
   12e34:	mov	r0, #0
   12e38:	b	12d7c <__assert_fail@plt+0x1ef0>
   12e3c:	mov	r3, r2
   12e40:	mov	r2, r1
   12e44:	mov	r1, r0
   12e48:	mov	r0, #0
   12e4c:	b	12dec <__assert_fail@plt+0x1f60>
   12e50:	push	{r4, r5, r6, sl, fp, lr}
   12e54:	add	fp, sp, #16
   12e58:	sub	sp, sp, #48	; 0x30
   12e5c:	mov	r4, r1
   12e60:	mov	r5, r0
   12e64:	movw	r0, #20808	; 0x5148
   12e68:	movt	r0, #2
   12e6c:	add	r1, r0, #16
   12e70:	mov	r3, #32
   12e74:	vld1.64	{d16-d17}, [r0], r3
   12e78:	vld1.64	{d18-d19}, [r1]
   12e7c:	mov	r6, sp
   12e80:	add	r1, r6, #16
   12e84:	vld1.64	{d20-d21}, [r0]
   12e88:	vst1.64	{d18-d19}, [r1]
   12e8c:	mov	r0, r6
   12e90:	vst1.64	{d16-d17}, [r0], r3
   12e94:	vst1.64	{d20-d21}, [r0]
   12e98:	mov	r0, r6
   12e9c:	mov	r1, r2
   12ea0:	mov	r2, #1
   12ea4:	bl	1195c <__assert_fail@plt+0xad0>
   12ea8:	mov	r0, #0
   12eac:	mov	r1, r5
   12eb0:	mov	r2, r4
   12eb4:	mov	r3, r6
   12eb8:	bl	12bbc <__assert_fail@plt+0x1d30>
   12ebc:	sub	sp, fp, #16
   12ec0:	pop	{r4, r5, r6, sl, fp, pc}
   12ec4:	mov	r2, r1
   12ec8:	mvn	r1, #0
   12ecc:	b	12e50 <__assert_fail@plt+0x1fc4>
   12ed0:	mov	r1, #58	; 0x3a
   12ed4:	b	12ec4 <__assert_fail@plt+0x2038>
   12ed8:	mov	r2, #58	; 0x3a
   12edc:	b	12e50 <__assert_fail@plt+0x1fc4>
   12ee0:	push	{r4, r5, r6, sl, fp, lr}
   12ee4:	add	fp, sp, #16
   12ee8:	sub	sp, sp, #48	; 0x30
   12eec:	mov	r4, r2
   12ef0:	mov	r5, r0
   12ef4:	mov	r6, sp
   12ef8:	mov	r0, r6
   12efc:	bl	12db8 <__assert_fail@plt+0x1f2c>
   12f00:	mov	r0, r6
   12f04:	mov	r1, #58	; 0x3a
   12f08:	mov	r2, #1
   12f0c:	bl	1195c <__assert_fail@plt+0xad0>
   12f10:	mov	r0, r5
   12f14:	mov	r1, r4
   12f18:	mvn	r2, #0
   12f1c:	mov	r3, r6
   12f20:	bl	12bbc <__assert_fail@plt+0x1d30>
   12f24:	sub	sp, fp, #16
   12f28:	pop	{r4, r5, r6, sl, fp, pc}
   12f2c:	push	{fp, lr}
   12f30:	mov	fp, sp
   12f34:	sub	sp, sp, #8
   12f38:	mvn	ip, #0
   12f3c:	str	ip, [sp]
   12f40:	bl	12f4c <__assert_fail@plt+0x20c0>
   12f44:	mov	sp, fp
   12f48:	pop	{fp, pc}
   12f4c:	push	{r4, r5, r6, r7, fp, lr}
   12f50:	add	fp, sp, #16
   12f54:	sub	sp, sp, #48	; 0x30
   12f58:	mov	r7, r3
   12f5c:	mov	r5, r0
   12f60:	movw	r0, #20808	; 0x5148
   12f64:	movt	r0, #2
   12f68:	add	r3, r0, #16
   12f6c:	mov	r4, #32
   12f70:	vld1.64	{d16-d17}, [r0], r4
   12f74:	vld1.64	{d18-d19}, [r3]
   12f78:	mov	r6, sp
   12f7c:	add	r3, r6, #16
   12f80:	vld1.64	{d20-d21}, [r0]
   12f84:	vst1.64	{d18-d19}, [r3]
   12f88:	mov	r0, r6
   12f8c:	vst1.64	{d16-d17}, [r0], r4
   12f90:	vst1.64	{d20-d21}, [r0]
   12f94:	mov	r0, r6
   12f98:	bl	119b4 <__assert_fail@plt+0xb28>
   12f9c:	ldr	r2, [fp, #8]
   12fa0:	mov	r0, r5
   12fa4:	mov	r1, r7
   12fa8:	mov	r3, r6
   12fac:	bl	12bbc <__assert_fail@plt+0x1d30>
   12fb0:	sub	sp, fp, #16
   12fb4:	pop	{r4, r5, r6, r7, fp, pc}
   12fb8:	mov	r3, r2
   12fbc:	mov	r2, r1
   12fc0:	mov	r1, r0
   12fc4:	mov	r0, #0
   12fc8:	b	12f2c <__assert_fail@plt+0x20a0>
   12fcc:	push	{fp, lr}
   12fd0:	mov	fp, sp
   12fd4:	sub	sp, sp, #8
   12fd8:	mov	ip, r2
   12fdc:	mov	r2, r1
   12fe0:	mov	r1, r0
   12fe4:	str	r3, [sp]
   12fe8:	mov	r0, #0
   12fec:	mov	r3, ip
   12ff0:	bl	12f4c <__assert_fail@plt+0x20c0>
   12ff4:	mov	sp, fp
   12ff8:	pop	{fp, pc}
   12ffc:	movw	r3, #20704	; 0x50e0
   13000:	movt	r3, #2
   13004:	b	12bbc <__assert_fail@plt+0x1d30>
   13008:	mov	r2, r1
   1300c:	mov	r1, r0
   13010:	mov	r0, #0
   13014:	b	12ffc <__assert_fail@plt+0x2170>
   13018:	mvn	r2, #0
   1301c:	b	12ffc <__assert_fail@plt+0x2170>
   13020:	mov	r1, r0
   13024:	mov	r0, #0
   13028:	b	13018 <__assert_fail@plt+0x218c>
   1302c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13030:	add	fp, sp, #24
   13034:	sub	sp, sp, #16
   13038:	mov	r4, r1
   1303c:	mov	r5, r0
   13040:	mov	r7, #0
   13044:	mov	r0, #0
   13048:	mov	r1, r5
   1304c:	mov	r2, #5
   13050:	bl	10cf4 <dcgettext@plt>
   13054:	cmp	r0, r5
   13058:	beq	13064 <__assert_fail@plt+0x21d8>
   1305c:	sub	sp, fp, #24
   13060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13064:	bl	143b4 <__assert_fail@plt+0x3528>
   13068:	mov	r6, r0
   1306c:	mov	r8, #56	; 0x38
   13070:	mov	r0, #45	; 0x2d
   13074:	stm	sp, {r0, r8}
   13078:	str	r7, [sp, #8]
   1307c:	str	r7, [sp, #12]
   13080:	mov	r0, r6
   13084:	mov	r1, #85	; 0x55
   13088:	mov	r2, #84	; 0x54
   1308c:	mov	r3, #70	; 0x46
   13090:	bl	13128 <__assert_fail@plt+0x229c>
   13094:	cmp	r0, #0
   13098:	beq	130b4 <__assert_fail@plt+0x2228>
   1309c:	ldrb	r1, [r5]
   130a0:	movw	r2, #18832	; 0x4990
   130a4:	movt	r2, #1
   130a8:	movw	r0, #18836	; 0x4994
   130ac:	movt	r0, #1
   130b0:	b	130f8 <__assert_fail@plt+0x226c>
   130b4:	mov	r0, #48	; 0x30
   130b8:	mov	r1, #51	; 0x33
   130bc:	str	r8, [sp]
   130c0:	stmib	sp, {r0, r1}
   130c4:	str	r0, [sp, #12]
   130c8:	mov	r0, r6
   130cc:	mov	r1, #71	; 0x47
   130d0:	mov	r2, #66	; 0x42
   130d4:	mov	r3, #49	; 0x31
   130d8:	bl	13128 <__assert_fail@plt+0x229c>
   130dc:	cmp	r0, #0
   130e0:	beq	13108 <__assert_fail@plt+0x227c>
   130e4:	ldrb	r1, [r5]
   130e8:	movw	r2, #18840	; 0x4998
   130ec:	movt	r2, #1
   130f0:	movw	r0, #18844	; 0x499c
   130f4:	movt	r0, #1
   130f8:	cmp	r1, #96	; 0x60
   130fc:	moveq	r0, r2
   13100:	sub	sp, fp, #24
   13104:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13108:	movw	r1, #18826	; 0x498a
   1310c:	movt	r1, #1
   13110:	movw	r0, #18830	; 0x498e
   13114:	movt	r0, #1
   13118:	cmp	r4, #9
   1311c:	moveq	r0, r1
   13120:	sub	sp, fp, #24
   13124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13128:	push	{r4, r5, r6, r7, fp, lr}
   1312c:	add	fp, sp, #16
   13130:	sub	sp, sp, #16
   13134:	mov	r4, r3
   13138:	mov	r5, r2
   1313c:	mov	r7, r1
   13140:	mov	r6, r0
   13144:	mov	r0, r1
   13148:	bl	14204 <__assert_fail@plt+0x3378>
   1314c:	ldrb	r1, [r6]
   13150:	cmp	r0, #0
   13154:	andne	r1, r1, #223	; 0xdf
   13158:	mov	r0, #0
   1315c:	cmp	r1, r7
   13160:	bne	13198 <__assert_fail@plt+0x230c>
   13164:	cmp	r7, #0
   13168:	beq	131a0 <__assert_fail@plt+0x2314>
   1316c:	ldr	r0, [fp, #20]
   13170:	ldr	r1, [fp, #16]
   13174:	ldr	r2, [fp, #12]
   13178:	ldr	r3, [fp, #8]
   1317c:	str	r2, [sp]
   13180:	str	r1, [sp, #4]
   13184:	str	r0, [sp, #8]
   13188:	mov	r0, r6
   1318c:	mov	r1, r5
   13190:	mov	r2, r4
   13194:	bl	131ac <__assert_fail@plt+0x2320>
   13198:	sub	sp, fp, #16
   1319c:	pop	{r4, r5, r6, r7, fp, pc}
   131a0:	mov	r0, #1
   131a4:	sub	sp, fp, #16
   131a8:	pop	{r4, r5, r6, r7, fp, pc}
   131ac:	push	{r4, r5, r6, r7, fp, lr}
   131b0:	add	fp, sp, #16
   131b4:	sub	sp, sp, #8
   131b8:	mov	r4, r3
   131bc:	mov	r5, r2
   131c0:	mov	r7, r1
   131c4:	mov	r6, r0
   131c8:	mov	r0, r1
   131cc:	bl	14204 <__assert_fail@plt+0x3378>
   131d0:	ldrb	r1, [r6, #1]
   131d4:	cmp	r0, #0
   131d8:	andne	r1, r1, #223	; 0xdf
   131dc:	mov	r0, #0
   131e0:	cmp	r1, r7
   131e4:	bne	13214 <__assert_fail@plt+0x2388>
   131e8:	cmp	r7, #0
   131ec:	beq	1321c <__assert_fail@plt+0x2390>
   131f0:	ldr	r0, [fp, #16]
   131f4:	ldr	r1, [fp, #12]
   131f8:	ldr	r3, [fp, #8]
   131fc:	str	r1, [sp]
   13200:	str	r0, [sp, #4]
   13204:	mov	r0, r6
   13208:	mov	r1, r5
   1320c:	mov	r2, r4
   13210:	bl	13228 <__assert_fail@plt+0x239c>
   13214:	sub	sp, fp, #16
   13218:	pop	{r4, r5, r6, r7, fp, pc}
   1321c:	mov	r0, #1
   13220:	sub	sp, fp, #16
   13224:	pop	{r4, r5, r6, r7, fp, pc}
   13228:	push	{r4, r5, r6, r7, fp, lr}
   1322c:	add	fp, sp, #16
   13230:	sub	sp, sp, #8
   13234:	mov	r4, r3
   13238:	mov	r5, r2
   1323c:	mov	r7, r1
   13240:	mov	r6, r0
   13244:	mov	r0, r1
   13248:	bl	14204 <__assert_fail@plt+0x3378>
   1324c:	ldrb	r1, [r6, #2]
   13250:	cmp	r0, #0
   13254:	andne	r1, r1, #223	; 0xdf
   13258:	mov	r0, #0
   1325c:	cmp	r1, r7
   13260:	bne	13288 <__assert_fail@plt+0x23fc>
   13264:	cmp	r7, #0
   13268:	beq	13290 <__assert_fail@plt+0x2404>
   1326c:	ldr	r0, [fp, #12]
   13270:	ldr	r3, [fp, #8]
   13274:	str	r0, [sp]
   13278:	mov	r0, r6
   1327c:	mov	r1, r5
   13280:	mov	r2, r4
   13284:	bl	1329c <__assert_fail@plt+0x2410>
   13288:	sub	sp, fp, #16
   1328c:	pop	{r4, r5, r6, r7, fp, pc}
   13290:	mov	r0, #1
   13294:	sub	sp, fp, #16
   13298:	pop	{r4, r5, r6, r7, fp, pc}
   1329c:	push	{r4, r5, r6, r7, fp, lr}
   132a0:	add	fp, sp, #16
   132a4:	mov	r4, r3
   132a8:	mov	r5, r2
   132ac:	mov	r7, r1
   132b0:	mov	r6, r0
   132b4:	mov	r0, r1
   132b8:	bl	14204 <__assert_fail@plt+0x3378>
   132bc:	ldrb	r1, [r6, #3]
   132c0:	ldr	r3, [fp, #8]
   132c4:	cmp	r0, #0
   132c8:	andne	r1, r1, #223	; 0xdf
   132cc:	mov	r0, #0
   132d0:	cmp	r1, r7
   132d4:	bne	132f8 <__assert_fail@plt+0x246c>
   132d8:	cmp	r7, #0
   132dc:	beq	132f4 <__assert_fail@plt+0x2468>
   132e0:	mov	r0, r6
   132e4:	mov	r1, r5
   132e8:	mov	r2, r4
   132ec:	pop	{r4, r5, r6, r7, fp, lr}
   132f0:	b	132fc <__assert_fail@plt+0x2470>
   132f4:	mov	r0, #1
   132f8:	pop	{r4, r5, r6, r7, fp, pc}
   132fc:	push	{r4, r5, r6, r7, fp, lr}
   13300:	add	fp, sp, #16
   13304:	mov	r4, r3
   13308:	mov	r5, r2
   1330c:	mov	r7, r1
   13310:	mov	r6, r0
   13314:	mov	r0, r1
   13318:	bl	14204 <__assert_fail@plt+0x3378>
   1331c:	ldrb	r1, [r6, #4]
   13320:	cmp	r0, #0
   13324:	andne	r1, r1, #223	; 0xdf
   13328:	mov	r0, #0
   1332c:	cmp	r1, r7
   13330:	bne	13354 <__assert_fail@plt+0x24c8>
   13334:	cmp	r7, #0
   13338:	beq	13350 <__assert_fail@plt+0x24c4>
   1333c:	mov	r0, r6
   13340:	mov	r1, r5
   13344:	mov	r2, r4
   13348:	pop	{r4, r5, r6, r7, fp, lr}
   1334c:	b	13358 <__assert_fail@plt+0x24cc>
   13350:	mov	r0, #1
   13354:	pop	{r4, r5, r6, r7, fp, pc}
   13358:	push	{r4, r5, r6, sl, fp, lr}
   1335c:	add	fp, sp, #16
   13360:	mov	r4, r2
   13364:	mov	r6, r1
   13368:	mov	r5, r0
   1336c:	mov	r0, r1
   13370:	bl	14204 <__assert_fail@plt+0x3378>
   13374:	ldrb	r1, [r5, #5]
   13378:	cmp	r0, #0
   1337c:	andne	r1, r1, #223	; 0xdf
   13380:	mov	r0, #0
   13384:	cmp	r1, r6
   13388:	bne	133a8 <__assert_fail@plt+0x251c>
   1338c:	cmp	r6, #0
   13390:	beq	133a4 <__assert_fail@plt+0x2518>
   13394:	mov	r0, r5
   13398:	mov	r1, r4
   1339c:	pop	{r4, r5, r6, sl, fp, lr}
   133a0:	b	133ac <__assert_fail@plt+0x2520>
   133a4:	mov	r0, #1
   133a8:	pop	{r4, r5, r6, sl, fp, pc}
   133ac:	push	{r4, r5, fp, lr}
   133b0:	add	fp, sp, #8
   133b4:	mov	r5, r1
   133b8:	mov	r4, r0
   133bc:	mov	r0, r1
   133c0:	bl	14204 <__assert_fail@plt+0x3378>
   133c4:	ldrb	r1, [r4, #6]
   133c8:	cmp	r0, #0
   133cc:	andne	r1, r1, #223	; 0xdf
   133d0:	mov	r0, #0
   133d4:	cmp	r1, r5
   133d8:	popne	{r4, r5, fp, pc}
   133dc:	cmp	r5, #0
   133e0:	beq	133f0 <__assert_fail@plt+0x2564>
   133e4:	mov	r0, r4
   133e8:	pop	{r4, r5, fp, lr}
   133ec:	b	133f8 <__assert_fail@plt+0x256c>
   133f0:	mov	r0, #1
   133f4:	pop	{r4, r5, fp, pc}
   133f8:	push	{r4, sl, fp, lr}
   133fc:	add	fp, sp, #8
   13400:	mov	r4, r0
   13404:	mov	r0, #0
   13408:	bl	14204 <__assert_fail@plt+0x3378>
   1340c:	ldrb	r1, [r4, #7]
   13410:	cmp	r0, #0
   13414:	beq	13428 <__assert_fail@plt+0x259c>
   13418:	tst	r1, #223	; 0xdf
   1341c:	bne	13430 <__assert_fail@plt+0x25a4>
   13420:	mov	r0, #1
   13424:	pop	{r4, sl, fp, pc}
   13428:	cmp	r1, #0
   1342c:	beq	13420 <__assert_fail@plt+0x2594>
   13430:	mov	r0, #0
   13434:	pop	{r4, sl, fp, pc}
   13438:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1343c:	add	fp, sp, #24
   13440:	sub	sp, sp, #32
   13444:	mov	r4, r2
   13448:	mov	r5, r0
   1344c:	ldr	r7, [fp, #12]
   13450:	ldr	r6, [fp, #8]
   13454:	cmp	r1, #0
   13458:	beq	13478 <__assert_fail@plt+0x25ec>
   1345c:	mov	r2, r1
   13460:	str	r3, [sp]
   13464:	movw	r1, #18932	; 0x49f4
   13468:	movt	r1, #1
   1346c:	mov	r0, r5
   13470:	mov	r3, r4
   13474:	b	13488 <__assert_fail@plt+0x25fc>
   13478:	movw	r1, #18944	; 0x4a00
   1347c:	movt	r1, #1
   13480:	mov	r0, r5
   13484:	mov	r2, r4
   13488:	bl	10dcc <fprintf@plt>
   1348c:	movw	r1, #18951	; 0x4a07
   13490:	movt	r1, #1
   13494:	mov	r0, #0
   13498:	mov	r2, #5
   1349c:	bl	10cf4 <dcgettext@plt>
   134a0:	mov	r2, r0
   134a4:	movw	r1, #19647	; 0x4cbf
   134a8:	movt	r1, #1
   134ac:	mov	r0, r5
   134b0:	movw	r3, #2022	; 0x7e6
   134b4:	bl	10dcc <fprintf@plt>
   134b8:	mov	r0, #10
   134bc:	mov	r1, r5
   134c0:	bl	10e44 <fputc@plt>
   134c4:	movw	r1, #18955	; 0x4a0b
   134c8:	movt	r1, #1
   134cc:	mov	r0, #0
   134d0:	mov	r2, #5
   134d4:	bl	10cf4 <dcgettext@plt>
   134d8:	mov	r1, r0
   134dc:	movw	r2, #19126	; 0x4ab6
   134e0:	movt	r2, #1
   134e4:	mov	r0, r5
   134e8:	bl	10dcc <fprintf@plt>
   134ec:	mov	r0, #10
   134f0:	mov	r1, r5
   134f4:	bl	10e44 <fputc@plt>
   134f8:	cmp	r7, #9
   134fc:	bhi	13538 <__assert_fail@plt+0x26ac>
   13500:	add	r0, pc, #0
   13504:	ldr	pc, [r0, r7, lsl #2]
   13508:	andeq	r3, r1, r0, lsr r5
   1350c:	andeq	r3, r1, r4, asr #10
   13510:	andeq	r3, r1, r0, ror r5
   13514:	muleq	r1, ip, r5
   13518:	andeq	r3, r1, r4, asr #11
   1351c:	strdeq	r3, [r1], -r0
   13520:	andeq	r3, r1, r4, lsr #12
   13524:	andeq	r3, r1, r4, ror #12
   13528:	andeq	r3, r1, r0, lsl #14
   1352c:	andeq	r3, r1, r8, lsr #13
   13530:	sub	sp, fp, #24
   13534:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13538:	movw	r1, #19479	; 0x4c17
   1353c:	movt	r1, #1
   13540:	b	136b0 <__assert_fail@plt+0x2824>
   13544:	movw	r1, #19160	; 0x4ad8
   13548:	movt	r1, #1
   1354c:	mov	r0, #0
   13550:	mov	r2, #5
   13554:	bl	10cf4 <dcgettext@plt>
   13558:	mov	r1, r0
   1355c:	ldr	r2, [r6]
   13560:	mov	r0, r5
   13564:	sub	sp, fp, #24
   13568:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1356c:	b	10dcc <fprintf@plt>
   13570:	movw	r1, #19176	; 0x4ae8
   13574:	movt	r1, #1
   13578:	mov	r0, #0
   1357c:	mov	r2, #5
   13580:	bl	10cf4 <dcgettext@plt>
   13584:	mov	r1, r0
   13588:	ldm	r6, {r2, r3}
   1358c:	mov	r0, r5
   13590:	sub	sp, fp, #24
   13594:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13598:	b	10dcc <fprintf@plt>
   1359c:	movw	r1, #19199	; 0x4aff
   135a0:	movt	r1, #1
   135a4:	mov	r0, #0
   135a8:	mov	r2, #5
   135ac:	bl	10cf4 <dcgettext@plt>
   135b0:	mov	r1, r0
   135b4:	ldm	r6, {r2, r3}
   135b8:	ldr	r0, [r6, #8]
   135bc:	str	r0, [sp]
   135c0:	b	1365c <__assert_fail@plt+0x27d0>
   135c4:	movw	r1, #19227	; 0x4b1b
   135c8:	movt	r1, #1
   135cc:	mov	r0, #0
   135d0:	mov	r2, #5
   135d4:	bl	10cf4 <dcgettext@plt>
   135d8:	mov	r1, r0
   135dc:	ldm	r6, {r2, r3}
   135e0:	ldr	r0, [r6, #8]
   135e4:	ldr	r7, [r6, #12]
   135e8:	stm	sp, {r0, r7}
   135ec:	b	1365c <__assert_fail@plt+0x27d0>
   135f0:	movw	r1, #19259	; 0x4b3b
   135f4:	movt	r1, #1
   135f8:	mov	r0, #0
   135fc:	mov	r2, #5
   13600:	bl	10cf4 <dcgettext@plt>
   13604:	mov	r1, r0
   13608:	ldm	r6, {r2, r3}
   1360c:	ldr	r0, [r6, #8]
   13610:	ldr	r7, [r6, #12]
   13614:	ldr	r6, [r6, #16]
   13618:	stm	sp, {r0, r7}
   1361c:	str	r6, [sp, #8]
   13620:	b	1365c <__assert_fail@plt+0x27d0>
   13624:	movw	r1, #19295	; 0x4b5f
   13628:	movt	r1, #1
   1362c:	mov	r0, #0
   13630:	mov	r2, #5
   13634:	bl	10cf4 <dcgettext@plt>
   13638:	mov	r1, r0
   1363c:	ldm	r6, {r2, r3}
   13640:	ldr	r0, [r6, #8]
   13644:	ldr	r7, [r6, #12]
   13648:	ldr	r4, [r6, #16]
   1364c:	ldr	r6, [r6, #20]
   13650:	stm	sp, {r0, r7}
   13654:	str	r4, [sp, #8]
   13658:	str	r6, [sp, #12]
   1365c:	mov	r0, r5
   13660:	b	13750 <__assert_fail@plt+0x28c4>
   13664:	movw	r1, #19335	; 0x4b87
   13668:	movt	r1, #1
   1366c:	mov	r0, #0
   13670:	mov	r2, #5
   13674:	bl	10cf4 <dcgettext@plt>
   13678:	mov	ip, r0
   1367c:	ldm	r6, {r2, r3}
   13680:	ldr	r0, [r6, #8]
   13684:	ldr	r7, [r6, #12]
   13688:	ldr	r4, [r6, #16]
   1368c:	ldr	r1, [r6, #20]
   13690:	ldr	r6, [r6, #24]
   13694:	stm	sp, {r0, r7}
   13698:	str	r4, [sp, #8]
   1369c:	str	r1, [sp, #12]
   136a0:	str	r6, [sp, #16]
   136a4:	b	13748 <__assert_fail@plt+0x28bc>
   136a8:	movw	r1, #19427	; 0x4be3
   136ac:	movt	r1, #1
   136b0:	mov	r0, #0
   136b4:	mov	r2, #5
   136b8:	bl	10cf4 <dcgettext@plt>
   136bc:	mov	ip, r0
   136c0:	ldr	r2, [r6]
   136c4:	ldr	r3, [r6, #4]
   136c8:	ldr	r0, [r6, #8]
   136cc:	ldr	r7, [r6, #12]
   136d0:	ldr	r4, [r6, #16]
   136d4:	ldr	r1, [r6, #20]
   136d8:	ldr	lr, [r6, #24]
   136dc:	ldr	r8, [r6, #28]
   136e0:	ldr	r6, [r6, #32]
   136e4:	stm	sp, {r0, r7}
   136e8:	str	r4, [sp, #8]
   136ec:	str	r1, [sp, #12]
   136f0:	str	lr, [sp, #16]
   136f4:	str	r8, [sp, #20]
   136f8:	str	r6, [sp, #24]
   136fc:	b	13748 <__assert_fail@plt+0x28bc>
   13700:	movw	r1, #19379	; 0x4bb3
   13704:	movt	r1, #1
   13708:	mov	r0, #0
   1370c:	mov	r2, #5
   13710:	bl	10cf4 <dcgettext@plt>
   13714:	mov	ip, r0
   13718:	ldm	r6, {r2, r3}
   1371c:	ldr	r0, [r6, #8]
   13720:	ldr	r7, [r6, #12]
   13724:	ldr	r4, [r6, #16]
   13728:	ldr	r1, [r6, #20]
   1372c:	ldr	lr, [r6, #24]
   13730:	ldr	r6, [r6, #28]
   13734:	stm	sp, {r0, r7}
   13738:	str	r4, [sp, #8]
   1373c:	str	r1, [sp, #12]
   13740:	str	lr, [sp, #16]
   13744:	str	r6, [sp, #20]
   13748:	mov	r0, r5
   1374c:	mov	r1, ip
   13750:	bl	10dcc <fprintf@plt>
   13754:	sub	sp, fp, #24
   13758:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1375c:	push	{r4, sl, fp, lr}
   13760:	add	fp, sp, #8
   13764:	sub	sp, sp, #8
   13768:	mov	lr, #0
   1376c:	ldr	ip, [fp, #8]
   13770:	ldr	r4, [ip, lr, lsl #2]
   13774:	add	lr, lr, #1
   13778:	cmp	r4, #0
   1377c:	bne	13770 <__assert_fail@plt+0x28e4>
   13780:	sub	r4, lr, #1
   13784:	str	ip, [sp]
   13788:	str	r4, [sp, #4]
   1378c:	bl	13438 <__assert_fail@plt+0x25ac>
   13790:	sub	sp, fp, #8
   13794:	pop	{r4, sl, fp, pc}
   13798:	push	{r4, r5, fp, lr}
   1379c:	add	fp, sp, #8
   137a0:	sub	sp, sp, #48	; 0x30
   137a4:	mov	ip, #0
   137a8:	ldr	r4, [fp, #8]
   137ac:	add	lr, sp, #8
   137b0:	ldr	r5, [r4]
   137b4:	str	r5, [lr, ip, lsl #2]
   137b8:	cmp	r5, #0
   137bc:	beq	137d4 <__assert_fail@plt+0x2948>
   137c0:	add	ip, ip, #1
   137c4:	add	r4, r4, #4
   137c8:	cmp	ip, #10
   137cc:	bne	137b0 <__assert_fail@plt+0x2924>
   137d0:	mov	ip, #10
   137d4:	str	lr, [sp]
   137d8:	str	ip, [sp, #4]
   137dc:	bl	13438 <__assert_fail@plt+0x25ac>
   137e0:	sub	sp, fp, #8
   137e4:	pop	{r4, r5, fp, pc}
   137e8:	push	{fp, lr}
   137ec:	mov	fp, sp
   137f0:	sub	sp, sp, #8
   137f4:	add	ip, fp, #8
   137f8:	str	ip, [sp, #4]
   137fc:	str	ip, [sp]
   13800:	bl	13798 <__assert_fail@plt+0x290c>
   13804:	mov	sp, fp
   13808:	pop	{fp, pc}
   1380c:	push	{fp, lr}
   13810:	mov	fp, sp
   13814:	movw	r0, #20780	; 0x512c
   13818:	movt	r0, #2
   1381c:	ldr	r1, [r0]
   13820:	mov	r0, #10
   13824:	bl	10e44 <fputc@plt>
   13828:	movw	r1, #19539	; 0x4c53
   1382c:	movt	r1, #1
   13830:	mov	r0, #0
   13834:	mov	r2, #5
   13838:	bl	10cf4 <dcgettext@plt>
   1383c:	movw	r1, #18653	; 0x48dd
   13840:	movt	r1, #1
   13844:	bl	10ca0 <printf@plt>
   13848:	movw	r1, #19559	; 0x4c67
   1384c:	movt	r1, #1
   13850:	mov	r0, #0
   13854:	mov	r2, #5
   13858:	bl	10cf4 <dcgettext@plt>
   1385c:	movw	r1, #18304	; 0x4780
   13860:	movt	r1, #1
   13864:	movw	r2, #18567	; 0x4887
   13868:	movt	r2, #1
   1386c:	bl	10ca0 <printf@plt>
   13870:	movw	r1, #19579	; 0x4c7b
   13874:	movt	r1, #1
   13878:	mov	r0, #0
   1387c:	mov	r2, #5
   13880:	bl	10cf4 <dcgettext@plt>
   13884:	movw	r1, #19618	; 0x4ca2
   13888:	movt	r1, #1
   1388c:	pop	{fp, lr}
   13890:	b	10ca0 <printf@plt>
   13894:	b	13898 <__assert_fail@plt+0x2a0c>
   13898:	push	{r4, r5, r6, sl, fp, lr}
   1389c:	add	fp, sp, #16
   138a0:	mov	r4, r2
   138a4:	mov	r5, r1
   138a8:	mov	r6, r0
   138ac:	bl	13f14 <__assert_fail@plt+0x3088>
   138b0:	cmp	r0, #0
   138b4:	popne	{r4, r5, r6, sl, fp, pc}
   138b8:	cmp	r6, #0
   138bc:	beq	138d0 <__assert_fail@plt+0x2a44>
   138c0:	cmp	r5, #0
   138c4:	cmpne	r4, #0
   138c8:	bne	138d0 <__assert_fail@plt+0x2a44>
   138cc:	pop	{r4, r5, r6, sl, fp, pc}
   138d0:	bl	13c5c <__assert_fail@plt+0x2dd0>
   138d4:	push	{fp, lr}
   138d8:	mov	fp, sp
   138dc:	bl	13e2c <__assert_fail@plt+0x2fa0>
   138e0:	pop	{fp, lr}
   138e4:	b	138e8 <__assert_fail@plt+0x2a5c>
   138e8:	cmp	r0, #0
   138ec:	bxne	lr
   138f0:	push	{fp, lr}
   138f4:	mov	fp, sp
   138f8:	bl	13c5c <__assert_fail@plt+0x2dd0>
   138fc:	push	{fp, lr}
   13900:	mov	fp, sp
   13904:	bl	14380 <__assert_fail@plt+0x34f4>
   13908:	pop	{fp, lr}
   1390c:	b	138e8 <__assert_fail@plt+0x2a5c>
   13910:	b	138d4 <__assert_fail@plt+0x2a48>
   13914:	push	{r4, r5, fp, lr}
   13918:	add	fp, sp, #8
   1391c:	mov	r4, r1
   13920:	mov	r5, r0
   13924:	bl	13ec0 <__assert_fail@plt+0x3034>
   13928:	cmp	r0, #0
   1392c:	popne	{r4, r5, fp, pc}
   13930:	cmp	r5, #0
   13934:	beq	13944 <__assert_fail@plt+0x2ab8>
   13938:	cmp	r4, #0
   1393c:	bne	13944 <__assert_fail@plt+0x2ab8>
   13940:	pop	{r4, r5, fp, pc}
   13944:	bl	13c5c <__assert_fail@plt+0x2dd0>
   13948:	push	{fp, lr}
   1394c:	mov	fp, sp
   13950:	bl	14384 <__assert_fail@plt+0x34f8>
   13954:	pop	{fp, lr}
   13958:	b	138e8 <__assert_fail@plt+0x2a5c>
   1395c:	push	{fp, lr}
   13960:	mov	fp, sp
   13964:	bl	14394 <__assert_fail@plt+0x3508>
   13968:	pop	{fp, lr}
   1396c:	b	138e8 <__assert_fail@plt+0x2a5c>
   13970:	mov	r2, r1
   13974:	mov	r1, r0
   13978:	mov	r0, #0
   1397c:	b	13898 <__assert_fail@plt+0x2a0c>
   13980:	mov	r2, r1
   13984:	mov	r1, r0
   13988:	mov	r0, #0
   1398c:	b	1395c <__assert_fail@plt+0x2ad0>
   13990:	mov	r2, #1
   13994:	b	13998 <__assert_fail@plt+0x2b0c>
   13998:	push	{r4, r5, fp, lr}
   1399c:	add	fp, sp, #8
   139a0:	mov	r4, r1
   139a4:	ldr	r5, [r1]
   139a8:	cmp	r0, #0
   139ac:	beq	139c4 <__assert_fail@plt+0x2b38>
   139b0:	mov	r1, #1
   139b4:	add	r1, r1, r5, lsr #1
   139b8:	adds	r5, r5, r1
   139bc:	bcc	139dc <__assert_fail@plt+0x2b50>
   139c0:	bl	13c5c <__assert_fail@plt+0x2dd0>
   139c4:	cmp	r5, #0
   139c8:	bne	139dc <__assert_fail@plt+0x2b50>
   139cc:	mov	r1, #64	; 0x40
   139d0:	udiv	r5, r1, r2
   139d4:	cmp	r2, #64	; 0x40
   139d8:	addhi	r5, r5, #1
   139dc:	mov	r1, r5
   139e0:	bl	13898 <__assert_fail@plt+0x2a0c>
   139e4:	str	r5, [r4]
   139e8:	pop	{r4, r5, fp, pc}
   139ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139f0:	add	fp, sp, #24
   139f4:	mov	r8, r1
   139f8:	ldr	r6, [r1]
   139fc:	add	r1, r6, r6, asr #1
   13a00:	cmp	r1, r6
   13a04:	mvnvs	r1, #-2147483648	; 0x80000000
   13a08:	cmp	r1, r3
   13a0c:	mov	r5, r1
   13a10:	movgt	r5, r3
   13a14:	cmn	r3, #1
   13a18:	movle	r5, r1
   13a1c:	ldr	r4, [fp, #8]
   13a20:	cmn	r4, #1
   13a24:	ble	13a4c <__assert_fail@plt+0x2bc0>
   13a28:	cmp	r4, #0
   13a2c:	beq	13aa0 <__assert_fail@plt+0x2c14>
   13a30:	cmn	r5, #1
   13a34:	ble	13a74 <__assert_fail@plt+0x2be8>
   13a38:	mvn	r7, #-2147483648	; 0x80000000
   13a3c:	udiv	r1, r7, r4
   13a40:	cmp	r1, r5
   13a44:	bge	13aa0 <__assert_fail@plt+0x2c14>
   13a48:	b	13ab0 <__assert_fail@plt+0x2c24>
   13a4c:	cmn	r5, #1
   13a50:	ble	13a90 <__assert_fail@plt+0x2c04>
   13a54:	cmn	r4, #1
   13a58:	beq	13aa0 <__assert_fail@plt+0x2c14>
   13a5c:	mov	r1, #-2147483648	; 0x80000000
   13a60:	sdiv	r1, r1, r4
   13a64:	mvn	r7, #-2147483648	; 0x80000000
   13a68:	cmp	r1, r5
   13a6c:	bge	13aa0 <__assert_fail@plt+0x2c14>
   13a70:	b	13ab0 <__assert_fail@plt+0x2c24>
   13a74:	beq	13aa0 <__assert_fail@plt+0x2c14>
   13a78:	mov	r1, #-2147483648	; 0x80000000
   13a7c:	sdiv	r1, r1, r5
   13a80:	mvn	r7, #-2147483648	; 0x80000000
   13a84:	cmp	r1, r4
   13a88:	bge	13aa0 <__assert_fail@plt+0x2c14>
   13a8c:	b	13ab0 <__assert_fail@plt+0x2c24>
   13a90:	mvn	r7, #-2147483648	; 0x80000000
   13a94:	sdiv	r1, r7, r4
   13a98:	cmp	r5, r1
   13a9c:	blt	13ab0 <__assert_fail@plt+0x2c24>
   13aa0:	mul	r1, r5, r4
   13aa4:	mov	r7, #64	; 0x40
   13aa8:	cmp	r1, #63	; 0x3f
   13aac:	bgt	13ab8 <__assert_fail@plt+0x2c2c>
   13ab0:	sdiv	r5, r7, r4
   13ab4:	mul	r1, r5, r4
   13ab8:	cmp	r0, #0
   13abc:	moveq	r7, #0
   13ac0:	streq	r7, [r8]
   13ac4:	sub	r7, r5, r6
   13ac8:	cmp	r7, r2
   13acc:	bge	13b78 <__assert_fail@plt+0x2cec>
   13ad0:	add	r5, r6, r2
   13ad4:	mov	r1, #0
   13ad8:	cmp	r5, r3
   13adc:	mov	r2, #0
   13ae0:	movwgt	r2, #1
   13ae4:	cmn	r3, #1
   13ae8:	movwgt	r1, #1
   13aec:	cmp	r5, r6
   13af0:	bvs	13b60 <__assert_fail@plt+0x2cd4>
   13af4:	ands	r1, r1, r2
   13af8:	bne	13b60 <__assert_fail@plt+0x2cd4>
   13afc:	cmn	r4, #1
   13b00:	ble	13b28 <__assert_fail@plt+0x2c9c>
   13b04:	cmp	r4, #0
   13b08:	beq	13b74 <__assert_fail@plt+0x2ce8>
   13b0c:	cmn	r5, #1
   13b10:	ble	13b4c <__assert_fail@plt+0x2cc0>
   13b14:	mvn	r1, #-2147483648	; 0x80000000
   13b18:	udiv	r1, r1, r4
   13b1c:	cmp	r1, r5
   13b20:	bge	13b74 <__assert_fail@plt+0x2ce8>
   13b24:	b	13b60 <__assert_fail@plt+0x2cd4>
   13b28:	cmn	r5, #1
   13b2c:	ble	13b64 <__assert_fail@plt+0x2cd8>
   13b30:	cmn	r4, #1
   13b34:	beq	13b74 <__assert_fail@plt+0x2ce8>
   13b38:	mov	r1, #-2147483648	; 0x80000000
   13b3c:	sdiv	r1, r1, r4
   13b40:	cmp	r1, r5
   13b44:	bge	13b74 <__assert_fail@plt+0x2ce8>
   13b48:	b	13b60 <__assert_fail@plt+0x2cd4>
   13b4c:	beq	13b74 <__assert_fail@plt+0x2ce8>
   13b50:	mov	r1, #-2147483648	; 0x80000000
   13b54:	sdiv	r1, r1, r5
   13b58:	cmp	r1, r4
   13b5c:	bge	13b74 <__assert_fail@plt+0x2ce8>
   13b60:	bl	13c5c <__assert_fail@plt+0x2dd0>
   13b64:	mvn	r1, #-2147483648	; 0x80000000
   13b68:	sdiv	r1, r1, r4
   13b6c:	cmp	r5, r1
   13b70:	blt	13b60 <__assert_fail@plt+0x2cd4>
   13b74:	mul	r1, r5, r4
   13b78:	bl	13914 <__assert_fail@plt+0x2a88>
   13b7c:	str	r5, [r8]
   13b80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b84:	mov	r1, #1
   13b88:	b	13b8c <__assert_fail@plt+0x2d00>
   13b8c:	push	{fp, lr}
   13b90:	mov	fp, sp
   13b94:	bl	13ca0 <__assert_fail@plt+0x2e14>
   13b98:	pop	{fp, lr}
   13b9c:	b	138e8 <__assert_fail@plt+0x2a5c>
   13ba0:	mov	r1, #1
   13ba4:	b	13ba8 <__assert_fail@plt+0x2d1c>
   13ba8:	push	{fp, lr}
   13bac:	mov	fp, sp
   13bb0:	bl	14390 <__assert_fail@plt+0x3504>
   13bb4:	pop	{fp, lr}
   13bb8:	b	138e8 <__assert_fail@plt+0x2a5c>
   13bbc:	push	{r4, r5, fp, lr}
   13bc0:	add	fp, sp, #8
   13bc4:	mov	r4, r1
   13bc8:	mov	r5, r0
   13bcc:	mov	r0, r1
   13bd0:	bl	138d4 <__assert_fail@plt+0x2a48>
   13bd4:	mov	r1, r5
   13bd8:	mov	r2, r4
   13bdc:	pop	{r4, r5, fp, lr}
   13be0:	b	10cdc <memcpy@plt>
   13be4:	push	{r4, r5, fp, lr}
   13be8:	add	fp, sp, #8
   13bec:	mov	r4, r1
   13bf0:	mov	r5, r0
   13bf4:	mov	r0, r1
   13bf8:	bl	138fc <__assert_fail@plt+0x2a70>
   13bfc:	mov	r1, r5
   13c00:	mov	r2, r4
   13c04:	pop	{r4, r5, fp, lr}
   13c08:	b	10cdc <memcpy@plt>
   13c0c:	push	{r4, r5, fp, lr}
   13c10:	add	fp, sp, #8
   13c14:	mov	r4, r1
   13c18:	mov	r5, r0
   13c1c:	add	r0, r1, #1
   13c20:	bl	138fc <__assert_fail@plt+0x2a70>
   13c24:	mov	r1, #0
   13c28:	strb	r1, [r0, r4]
   13c2c:	mov	r1, r5
   13c30:	mov	r2, r4
   13c34:	pop	{r4, r5, fp, lr}
   13c38:	b	10cdc <memcpy@plt>
   13c3c:	push	{r4, sl, fp, lr}
   13c40:	add	fp, sp, #8
   13c44:	mov	r4, r0
   13c48:	bl	10dc0 <strlen@plt>
   13c4c:	add	r1, r0, #1
   13c50:	mov	r0, r4
   13c54:	pop	{r4, sl, fp, lr}
   13c58:	b	13bbc <__assert_fail@plt+0x2d30>
   13c5c:	push	{fp, lr}
   13c60:	mov	fp, sp
   13c64:	movw	r0, #20684	; 0x50cc
   13c68:	movt	r0, #2
   13c6c:	ldr	r4, [r0]
   13c70:	movw	r1, #19694	; 0x4cee
   13c74:	movt	r1, #1
   13c78:	mov	r0, #0
   13c7c:	mov	r2, #5
   13c80:	bl	10cf4 <dcgettext@plt>
   13c84:	mov	r3, r0
   13c88:	movw	r2, #18679	; 0x48f7
   13c8c:	movt	r2, #1
   13c90:	mov	r0, r4
   13c94:	mov	r1, #0
   13c98:	bl	10d54 <error@plt>
   13c9c:	bl	10e80 <abort@plt>
   13ca0:	clz	r2, r1
   13ca4:	lsr	r2, r2, #5
   13ca8:	clz	r3, r0
   13cac:	lsr	r3, r3, #5
   13cb0:	orrs	r2, r3, r2
   13cb4:	movwne	r1, #1
   13cb8:	movwne	r0, #1
   13cbc:	cmp	r1, #0
   13cc0:	beq	13cf0 <__assert_fail@plt+0x2e64>
   13cc4:	mvn	r2, #-2147483648	; 0x80000000
   13cc8:	udiv	r2, r2, r1
   13ccc:	cmp	r2, r0
   13cd0:	bcs	13cf0 <__assert_fail@plt+0x2e64>
   13cd4:	push	{fp, lr}
   13cd8:	mov	fp, sp
   13cdc:	bl	10dd8 <__errno_location@plt>
   13ce0:	mov	r1, #12
   13ce4:	str	r1, [r0]
   13ce8:	mov	r0, #0
   13cec:	pop	{fp, pc}
   13cf0:	b	10c88 <calloc@plt>
   13cf4:	push	{r4, sl, fp, lr}
   13cf8:	add	fp, sp, #8
   13cfc:	mov	r4, r0
   13d00:	cmp	r0, #0
   13d04:	beq	13d1c <__assert_fail@plt+0x2e90>
   13d08:	mov	r0, r4
   13d0c:	bl	10d78 <__freading@plt>
   13d10:	cmp	r0, #0
   13d14:	movne	r0, r4
   13d18:	blne	13d28 <__assert_fail@plt+0x2e9c>
   13d1c:	mov	r0, r4
   13d20:	pop	{r4, sl, fp, lr}
   13d24:	b	10cac <fflush@plt>
   13d28:	push	{fp, lr}
   13d2c:	mov	fp, sp
   13d30:	sub	sp, sp, #8
   13d34:	ldrb	r1, [r0, #1]
   13d38:	tst	r1, #1
   13d3c:	beq	13d54 <__assert_fail@plt+0x2ec8>
   13d40:	mov	r1, #1
   13d44:	str	r1, [sp]
   13d48:	mov	r2, #0
   13d4c:	mov	r3, #0
   13d50:	bl	13d84 <__assert_fail@plt+0x2ef8>
   13d54:	mov	sp, fp
   13d58:	pop	{fp, pc}
   13d5c:	push	{r4, r5, r6, sl, fp, lr}
   13d60:	add	fp, sp, #16
   13d64:	mov	r4, r0
   13d68:	bl	10dd8 <__errno_location@plt>
   13d6c:	mov	r5, r0
   13d70:	ldr	r6, [r0]
   13d74:	mov	r0, r4
   13d78:	bl	10cb8 <free@plt>
   13d7c:	str	r6, [r5]
   13d80:	pop	{r4, r5, r6, sl, fp, pc}
   13d84:	push	{r4, r5, r6, r7, fp, lr}
   13d88:	add	fp, sp, #16
   13d8c:	sub	sp, sp, #8
   13d90:	mov	r5, r3
   13d94:	mov	r6, r2
   13d98:	mov	r4, r0
   13d9c:	ldr	r0, [r0, #4]
   13da0:	ldr	r1, [r4, #8]
   13da4:	cmp	r1, r0
   13da8:	bne	13dc4 <__assert_fail@plt+0x2f38>
   13dac:	ldrd	r0, [r4, #16]
   13db0:	cmp	r1, r0
   13db4:	bne	13dc4 <__assert_fail@plt+0x2f38>
   13db8:	ldr	r0, [r4, #36]	; 0x24
   13dbc:	cmp	r0, #0
   13dc0:	beq	13ddc <__assert_fail@plt+0x2f50>
   13dc4:	mov	r0, r4
   13dc8:	mov	r2, r6
   13dcc:	mov	r3, r5
   13dd0:	sub	sp, fp, #16
   13dd4:	pop	{r4, r5, r6, r7, fp, lr}
   13dd8:	b	10e14 <fseeko64@plt>
   13ddc:	ldr	r7, [fp, #8]
   13de0:	mov	r0, r4
   13de4:	bl	10dfc <fileno@plt>
   13de8:	str	r7, [sp]
   13dec:	mov	r2, r6
   13df0:	mov	r3, r5
   13df4:	bl	10d24 <lseek64@plt>
   13df8:	and	r2, r0, r1
   13dfc:	cmn	r2, #1
   13e00:	beq	13e20 <__assert_fail@plt+0x2f94>
   13e04:	strd	r0, [r4, #80]	; 0x50
   13e08:	ldr	r0, [r4]
   13e0c:	bic	r0, r0, #16
   13e10:	str	r0, [r4]
   13e14:	mov	r0, #0
   13e18:	sub	sp, fp, #16
   13e1c:	pop	{r4, r5, r6, r7, fp, pc}
   13e20:	mvn	r0, #0
   13e24:	sub	sp, fp, #16
   13e28:	pop	{r4, r5, r6, r7, fp, pc}
   13e2c:	cmp	r0, #0
   13e30:	movweq	r0, #1
   13e34:	cmn	r0, #1
   13e38:	ble	13e40 <__assert_fail@plt+0x2fb4>
   13e3c:	b	10d60 <malloc@plt>
   13e40:	push	{fp, lr}
   13e44:	mov	fp, sp
   13e48:	bl	10dd8 <__errno_location@plt>
   13e4c:	mov	r1, #12
   13e50:	str	r1, [r0]
   13e54:	mov	r0, #0
   13e58:	pop	{fp, pc}
   13e5c:	push	{r4, r5, r6, r7, fp, lr}
   13e60:	add	fp, sp, #16
   13e64:	sub	sp, sp, #8
   13e68:	mov	r7, r2
   13e6c:	mov	r4, r1
   13e70:	add	r5, sp, #4
   13e74:	cmp	r0, #0
   13e78:	movne	r5, r0
   13e7c:	mov	r0, r5
   13e80:	bl	10d48 <mbrtowc@plt>
   13e84:	mov	r6, r0
   13e88:	cmp	r7, #0
   13e8c:	beq	13eb4 <__assert_fail@plt+0x3028>
   13e90:	cmn	r6, #2
   13e94:	bcc	13eb4 <__assert_fail@plt+0x3028>
   13e98:	mov	r0, #0
   13e9c:	bl	142f8 <__assert_fail@plt+0x346c>
   13ea0:	cmp	r0, #0
   13ea4:	bne	13eb4 <__assert_fail@plt+0x3028>
   13ea8:	ldrb	r0, [r4]
   13eac:	str	r0, [r5]
   13eb0:	mov	r6, #1
   13eb4:	mov	r0, r6
   13eb8:	sub	sp, fp, #16
   13ebc:	pop	{r4, r5, r6, r7, fp, pc}
   13ec0:	push	{fp, lr}
   13ec4:	mov	fp, sp
   13ec8:	cmp	r0, #0
   13ecc:	beq	13ee8 <__assert_fail@plt+0x305c>
   13ed0:	cmp	r1, #0
   13ed4:	beq	13ef4 <__assert_fail@plt+0x3068>
   13ed8:	cmn	r1, #1
   13edc:	ble	13f00 <__assert_fail@plt+0x3074>
   13ee0:	pop	{fp, lr}
   13ee4:	b	10d00 <realloc@plt>
   13ee8:	mov	r0, r1
   13eec:	pop	{fp, lr}
   13ef0:	b	13e2c <__assert_fail@plt+0x2fa0>
   13ef4:	bl	13d5c <__assert_fail@plt+0x2ed0>
   13ef8:	mov	r0, #0
   13efc:	pop	{fp, pc}
   13f00:	bl	10dd8 <__errno_location@plt>
   13f04:	mov	r1, #12
   13f08:	str	r1, [r0]
   13f0c:	mov	r0, #0
   13f10:	pop	{fp, pc}
   13f14:	cmp	r2, #0
   13f18:	beq	13f48 <__assert_fail@plt+0x30bc>
   13f1c:	mvn	r3, #0
   13f20:	udiv	r3, r3, r2
   13f24:	cmp	r3, r1
   13f28:	bcs	13f48 <__assert_fail@plt+0x30bc>
   13f2c:	push	{fp, lr}
   13f30:	mov	fp, sp
   13f34:	bl	10dd8 <__errno_location@plt>
   13f38:	mov	r1, #12
   13f3c:	str	r1, [r0]
   13f40:	mov	r0, #0
   13f44:	pop	{fp, pc}
   13f48:	mul	r1, r2, r1
   13f4c:	b	13ec0 <__assert_fail@plt+0x3034>
   13f50:	mov	r1, r0
   13f54:	sub	r2, r0, #65	; 0x41
   13f58:	mov	r0, #1
   13f5c:	cmp	r2, #26
   13f60:	subcs	r2, r1, #97	; 0x61
   13f64:	cmpcs	r2, #26
   13f68:	bcs	13f70 <__assert_fail@plt+0x30e4>
   13f6c:	bx	lr
   13f70:	sub	r1, r1, #48	; 0x30
   13f74:	cmp	r1, #10
   13f78:	movcs	r0, #0
   13f7c:	bx	lr
   13f80:	mov	r1, r0
   13f84:	sub	r2, r0, #65	; 0x41
   13f88:	mov	r0, #1
   13f8c:	cmp	r2, #26
   13f90:	subcs	r1, r1, #97	; 0x61
   13f94:	cmpcs	r1, #26
   13f98:	movcs	r0, #0
   13f9c:	bx	lr
   13fa0:	mov	r1, #0
   13fa4:	cmp	r0, #128	; 0x80
   13fa8:	movwcc	r1, #1
   13fac:	mov	r0, r1
   13fb0:	bx	lr
   13fb4:	sub	r1, r0, #9
   13fb8:	clz	r1, r1
   13fbc:	lsr	r1, r1, #5
   13fc0:	sub	r0, r0, #32
   13fc4:	clz	r0, r0
   13fc8:	lsr	r0, r0, #5
   13fcc:	orr	r0, r0, r1
   13fd0:	bx	lr
   13fd4:	mov	r1, r0
   13fd8:	mov	r0, #1
   13fdc:	cmp	r1, #32
   13fe0:	bxcc	lr
   13fe4:	cmp	r1, #127	; 0x7f
   13fe8:	movne	r0, #0
   13fec:	bx	lr
   13ff0:	sub	r1, r0, #48	; 0x30
   13ff4:	mov	r0, #0
   13ff8:	cmp	r1, #10
   13ffc:	movwcc	r0, #1
   14000:	bx	lr
   14004:	sub	r1, r0, #33	; 0x21
   14008:	mov	r0, #0
   1400c:	cmp	r1, #94	; 0x5e
   14010:	movwcc	r0, #1
   14014:	bx	lr
   14018:	sub	r1, r0, #97	; 0x61
   1401c:	mov	r0, #0
   14020:	cmp	r1, #26
   14024:	movwcc	r0, #1
   14028:	bx	lr
   1402c:	sub	r1, r0, #32
   14030:	mov	r0, #0
   14034:	cmp	r1, #95	; 0x5f
   14038:	movwcc	r0, #1
   1403c:	bx	lr
   14040:	sub	r1, r0, #33	; 0x21
   14044:	cmp	r1, #93	; 0x5d
   14048:	bhi	141d4 <__assert_fail@plt+0x3348>
   1404c:	mov	r0, #1
   14050:	add	r2, pc, #0
   14054:	ldr	pc, [r2, r1, lsl #2]
   14058:	ldrdeq	r4, [r1], -r0
   1405c:	ldrdeq	r4, [r1], -r0
   14060:	ldrdeq	r4, [r1], -r0
   14064:	ldrdeq	r4, [r1], -r0
   14068:	ldrdeq	r4, [r1], -r0
   1406c:	ldrdeq	r4, [r1], -r0
   14070:	ldrdeq	r4, [r1], -r0
   14074:	ldrdeq	r4, [r1], -r0
   14078:	ldrdeq	r4, [r1], -r0
   1407c:	ldrdeq	r4, [r1], -r0
   14080:	ldrdeq	r4, [r1], -r0
   14084:	ldrdeq	r4, [r1], -r0
   14088:	ldrdeq	r4, [r1], -r0
   1408c:	ldrdeq	r4, [r1], -r0
   14090:	ldrdeq	r4, [r1], -r0
   14094:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14098:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1409c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140bc:	ldrdeq	r4, [r1], -r0
   140c0:	ldrdeq	r4, [r1], -r0
   140c4:	ldrdeq	r4, [r1], -r0
   140c8:	ldrdeq	r4, [r1], -r0
   140cc:	ldrdeq	r4, [r1], -r0
   140d0:	ldrdeq	r4, [r1], -r0
   140d4:	ldrdeq	r4, [r1], -r0
   140d8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140dc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140e0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140e4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140e8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140ec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140f0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140f4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140f8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140fc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14100:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14104:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14108:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1410c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14110:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14114:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14118:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1411c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14120:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14124:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14128:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1412c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14130:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14134:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14138:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1413c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14140:	ldrdeq	r4, [r1], -r0
   14144:	ldrdeq	r4, [r1], -r0
   14148:	ldrdeq	r4, [r1], -r0
   1414c:	ldrdeq	r4, [r1], -r0
   14150:	ldrdeq	r4, [r1], -r0
   14154:	ldrdeq	r4, [r1], -r0
   14158:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1415c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14160:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14164:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14168:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1416c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14170:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14174:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14178:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1417c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14180:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14184:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14188:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1418c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14190:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14194:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14198:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1419c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141b8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141bc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141c0:	ldrdeq	r4, [r1], -r0
   141c4:	ldrdeq	r4, [r1], -r0
   141c8:	ldrdeq	r4, [r1], -r0
   141cc:	ldrdeq	r4, [r1], -r0
   141d0:	bx	lr
   141d4:	mov	r0, #0
   141d8:	bx	lr
   141dc:	sub	r0, r0, #9
   141e0:	cmp	r0, #23
   141e4:	movhi	r0, #0
   141e8:	bxhi	lr
   141ec:	bic	r0, r0, #-16777216	; 0xff000000
   141f0:	movw	r1, #31
   141f4:	movt	r1, #128	; 0x80
   141f8:	mov	r2, #1
   141fc:	and	r0, r2, r1, lsr r0
   14200:	bx	lr
   14204:	sub	r1, r0, #65	; 0x41
   14208:	mov	r0, #0
   1420c:	cmp	r1, #26
   14210:	movwcc	r0, #1
   14214:	bx	lr
   14218:	mov	r1, r0
   1421c:	sub	r2, r0, #48	; 0x30
   14220:	mov	r0, #1
   14224:	cmp	r2, #22
   14228:	bhi	14240 <__assert_fail@plt+0x33b4>
   1422c:	mov	ip, #1
   14230:	movw	r3, #1023	; 0x3ff
   14234:	movt	r3, #126	; 0x7e
   14238:	tst	r3, ip, lsl r2
   1423c:	bxne	lr
   14240:	sub	r1, r1, #97	; 0x61
   14244:	cmp	r1, #6
   14248:	movcs	r0, #0
   1424c:	bxcs	lr
   14250:	bx	lr
   14254:	sub	r1, r0, #65	; 0x41
   14258:	cmp	r1, #26
   1425c:	addcc	r0, r0, #32
   14260:	bx	lr
   14264:	sub	r1, r0, #97	; 0x61
   14268:	cmp	r1, #26
   1426c:	subcc	r0, r0, #32
   14270:	bx	lr
   14274:	push	{r4, r5, r6, sl, fp, lr}
   14278:	add	fp, sp, #16
   1427c:	mov	r4, r0
   14280:	bl	10d3c <__fpending@plt>
   14284:	mov	r5, r0
   14288:	mov	r0, r4
   1428c:	bl	10cc4 <ferror@plt>
   14290:	mov	r6, r0
   14294:	mov	r0, r4
   14298:	bl	10e08 <fclose@plt>
   1429c:	cmp	r6, #0
   142a0:	beq	142c4 <__assert_fail@plt+0x3438>
   142a4:	mvn	r4, #0
   142a8:	cmp	r0, #0
   142ac:	bne	142f0 <__assert_fail@plt+0x3464>
   142b0:	bl	10dd8 <__errno_location@plt>
   142b4:	mov	r1, #0
   142b8:	str	r1, [r0]
   142bc:	mov	r0, r4
   142c0:	pop	{r4, r5, r6, sl, fp, pc}
   142c4:	cmp	r0, #0
   142c8:	mov	r4, r0
   142cc:	mvnne	r4, #0
   142d0:	cmp	r5, #0
   142d4:	bne	142f0 <__assert_fail@plt+0x3464>
   142d8:	cmp	r0, #0
   142dc:	beq	142f0 <__assert_fail@plt+0x3464>
   142e0:	bl	10dd8 <__errno_location@plt>
   142e4:	ldr	r0, [r0]
   142e8:	subs	r4, r0, #9
   142ec:	mvnne	r4, #0
   142f0:	mov	r0, r4
   142f4:	pop	{r4, r5, r6, sl, fp, pc}
   142f8:	push	{r4, sl, fp, lr}
   142fc:	add	fp, sp, #8
   14300:	sub	sp, sp, #264	; 0x108
   14304:	add	r1, sp, #7
   14308:	movw	r2, #257	; 0x101
   1430c:	bl	143ec <__assert_fail@plt+0x3560>
   14310:	mov	r4, #0
   14314:	cmp	r0, #0
   14318:	bne	14358 <__assert_fail@plt+0x34cc>
   1431c:	add	r0, sp, #7
   14320:	movw	r1, #19711	; 0x4cff
   14324:	movt	r1, #1
   14328:	mov	r2, #2
   1432c:	bl	10db4 <bcmp@plt>
   14330:	cmp	r0, #0
   14334:	beq	14358 <__assert_fail@plt+0x34cc>
   14338:	add	r0, sp, #7
   1433c:	movw	r1, #19713	; 0x4d01
   14340:	movt	r1, #1
   14344:	mov	r2, #6
   14348:	bl	10db4 <bcmp@plt>
   1434c:	mov	r4, r0
   14350:	cmp	r0, #0
   14354:	movwne	r4, #1
   14358:	mov	r0, r4
   1435c:	sub	sp, fp, #8
   14360:	pop	{r4, sl, fp, pc}
   14364:	push	{fp, lr}
   14368:	mov	fp, sp
   1436c:	bl	10dd8 <__errno_location@plt>
   14370:	mov	r1, #12
   14374:	str	r1, [r0]
   14378:	mov	r0, #0
   1437c:	pop	{fp, pc}
   14380:	b	13e2c <__assert_fail@plt+0x2fa0>
   14384:	cmp	r1, #0
   14388:	orreq	r1, r1, #1
   1438c:	b	13ec0 <__assert_fail@plt+0x3034>
   14390:	b	13ca0 <__assert_fail@plt+0x2e14>
   14394:	clz	r3, r2
   14398:	lsr	ip, r3, #5
   1439c:	clz	r3, r1
   143a0:	lsr	r3, r3, #5
   143a4:	orrs	r3, r3, ip
   143a8:	movwne	r1, #1
   143ac:	movwne	r2, #1
   143b0:	b	13f14 <__assert_fail@plt+0x3088>
   143b4:	push	{fp, lr}
   143b8:	mov	fp, sp
   143bc:	mov	r0, #14
   143c0:	bl	10e38 <nl_langinfo@plt>
   143c4:	movw	r1, #18566	; 0x4886
   143c8:	movt	r1, #1
   143cc:	cmp	r0, #0
   143d0:	movne	r1, r0
   143d4:	ldrb	r2, [r1]
   143d8:	movw	r0, #19719	; 0x4d07
   143dc:	movt	r0, #1
   143e0:	cmp	r2, #0
   143e4:	movne	r0, r1
   143e8:	pop	{fp, pc}
   143ec:	b	143f0 <__assert_fail@plt+0x3564>
   143f0:	push	{r4, r5, r6, r7, fp, lr}
   143f4:	add	fp, sp, #16
   143f8:	mov	r6, r2
   143fc:	mov	r4, r1
   14400:	bl	14488 <__assert_fail@plt+0x35fc>
   14404:	cmp	r0, #0
   14408:	beq	14438 <__assert_fail@plt+0x35ac>
   1440c:	mov	r7, r0
   14410:	bl	10dc0 <strlen@plt>
   14414:	cmp	r0, r6
   14418:	bcs	14454 <__assert_fail@plt+0x35c8>
   1441c:	add	r2, r0, #1
   14420:	mov	r0, r4
   14424:	mov	r1, r7
   14428:	bl	10cdc <memcpy@plt>
   1442c:	mov	r5, #0
   14430:	mov	r0, r5
   14434:	pop	{r4, r5, r6, r7, fp, pc}
   14438:	mov	r5, #22
   1443c:	cmp	r6, #0
   14440:	beq	1447c <__assert_fail@plt+0x35f0>
   14444:	mov	r0, #0
   14448:	strb	r0, [r4]
   1444c:	mov	r0, r5
   14450:	pop	{r4, r5, r6, r7, fp, pc}
   14454:	mov	r5, #34	; 0x22
   14458:	cmp	r6, #0
   1445c:	beq	1447c <__assert_fail@plt+0x35f0>
   14460:	sub	r6, r6, #1
   14464:	mov	r0, r4
   14468:	mov	r1, r7
   1446c:	mov	r2, r6
   14470:	bl	10cdc <memcpy@plt>
   14474:	mov	r0, #0
   14478:	strb	r0, [r4, r6]
   1447c:	mov	r0, r5
   14480:	pop	{r4, r5, r6, r7, fp, pc}
   14484:	b	14488 <__assert_fail@plt+0x35fc>
   14488:	mov	r1, #0
   1448c:	b	10e20 <setlocale@plt>
   14490:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14494:	mov	r7, r0
   14498:	ldr	r6, [pc, #72]	; 144e8 <__assert_fail@plt+0x365c>
   1449c:	ldr	r5, [pc, #72]	; 144ec <__assert_fail@plt+0x3660>
   144a0:	add	r6, pc, r6
   144a4:	add	r5, pc, r5
   144a8:	sub	r6, r6, r5
   144ac:	mov	r8, r1
   144b0:	mov	r9, r2
   144b4:	bl	10c68 <calloc@plt-0x20>
   144b8:	asrs	r6, r6, #2
   144bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   144c0:	mov	r4, #0
   144c4:	add	r4, r4, #1
   144c8:	ldr	r3, [r5], #4
   144cc:	mov	r2, r9
   144d0:	mov	r1, r8
   144d4:	mov	r0, r7
   144d8:	blx	r3
   144dc:	cmp	r6, r4
   144e0:	bne	144c4 <__assert_fail@plt+0x3638>
   144e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   144e8:	andeq	r0, r1, r4, ror #20
   144ec:	andeq	r0, r1, ip, asr sl
   144f0:	bx	lr
   144f4:	ldr	r3, [pc, #12]	; 14508 <__assert_fail@plt+0x367c>
   144f8:	mov	r1, #0
   144fc:	add	r3, pc, r3
   14500:	ldr	r2, [r3]
   14504:	b	10de4 <__cxa_atexit@plt>
   14508:	andeq	r0, r1, r0, asr #23

Disassembly of section .fini:

0001450c <.fini>:
   1450c:	push	{r3, lr}
   14510:	pop	{r3, pc}
