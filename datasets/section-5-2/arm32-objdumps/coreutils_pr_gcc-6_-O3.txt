
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011064 <.init>:
   11064:	push	{r3, lr}
   11068:	bl	12108 <__assert_fail@plt+0xd24>
   1106c:	pop	{r3, pc}

Disassembly of section .plt:

00011070 <fdopen@plt-0x14>:
   11070:	push	{lr}		; (str lr, [sp, #-4]!)
   11074:	ldr	lr, [pc, #4]	; 11080 <fdopen@plt-0x4>
   11078:	add	lr, pc, lr
   1107c:	ldr	pc, [lr, #8]!
   11080:	andeq	r1, r2, r0, lsl #31

00011084 <fdopen@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #135168	; 0x21000
   1108c:	ldr	pc, [ip, #3968]!	; 0xf80

00011090 <calloc@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #135168	; 0x21000
   11098:	ldr	pc, [ip, #3960]!	; 0xf78

0001109c <fputs_unlocked@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #135168	; 0x21000
   110a4:	ldr	pc, [ip, #3952]!	; 0xf70

000110a8 <raise@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #135168	; 0x21000
   110b0:	ldr	pc, [ip, #3944]!	; 0xf68

000110b4 <gmtime_r@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #135168	; 0x21000
   110bc:	ldr	pc, [ip, #3936]!	; 0xf60

000110c0 <strcmp@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #135168	; 0x21000
   110c8:	ldr	pc, [ip, #3928]!	; 0xf58

000110cc <strtol@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #135168	; 0x21000
   110d4:	ldr	pc, [ip, #3920]!	; 0xf50

000110d8 <posix_fadvise64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #135168	; 0x21000
   110e0:	ldr	pc, [ip, #3912]!	; 0xf48

000110e4 <mktime@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #135168	; 0x21000
   110ec:	ldr	pc, [ip, #3904]!	; 0xf40

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #135168	; 0x21000
   110f8:	ldr	pc, [ip, #3896]!	; 0xf38

000110fc <wcwidth@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #135168	; 0x21000
   11104:	ldr	pc, [ip, #3888]!	; 0xf30

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #135168	; 0x21000
   11110:	ldr	pc, [ip, #3880]!	; 0xf28

00011114 <clock_gettime@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #135168	; 0x21000
   1111c:	ldr	pc, [ip, #3872]!	; 0xf20

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #135168	; 0x21000
   11128:	ldr	pc, [ip, #3864]!	; 0xf18

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #135168	; 0x21000
   11134:	ldr	pc, [ip, #3856]!	; 0xf10

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #135168	; 0x21000
   11140:	ldr	pc, [ip, #3848]!	; 0xf08

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #135168	; 0x21000
   1114c:	ldr	pc, [ip, #3840]!	; 0xf00

00011150 <memcmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #135168	; 0x21000
   11158:	ldr	pc, [ip, #3832]!	; 0xef8

0001115c <fputc_unlocked@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #135168	; 0x21000
   11164:	ldr	pc, [ip, #3824]!	; 0xef0

00011168 <dcgettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #135168	; 0x21000
   11170:	ldr	pc, [ip, #3816]!	; 0xee8

00011174 <realloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #135168	; 0x21000
   1117c:	ldr	pc, [ip, #3808]!	; 0xee0

00011180 <localtime_r@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #135168	; 0x21000
   11188:	ldr	pc, [ip, #3800]!	; 0xed8

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #135168	; 0x21000
   11194:	ldr	pc, [ip, #3792]!	; 0xed0

00011198 <iswcntrl@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #135168	; 0x21000
   111a0:	ldr	pc, [ip, #3784]!	; 0xec8

000111a4 <iswprint@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #135168	; 0x21000
   111ac:	ldr	pc, [ip, #3776]!	; 0xec0

000111b0 <tzset@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #135168	; 0x21000
   111b8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #135168	; 0x21000
   111c4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #135168	; 0x21000
   111d0:	ldr	pc, [ip, #3752]!	; 0xea8

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #135168	; 0x21000
   111dc:	ldr	pc, [ip, #3744]!	; 0xea0

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #135168	; 0x21000
   111e8:	ldr	pc, [ip, #3736]!	; 0xe98

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #135168	; 0x21000
   111f4:	ldr	pc, [ip, #3728]!	; 0xe90

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #135168	; 0x21000
   11200:	ldr	pc, [ip, #3720]!	; 0xe88

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #135168	; 0x21000
   1120c:	ldr	pc, [ip, #3712]!	; 0xe80

00011210 <getenv@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #135168	; 0x21000
   11218:	ldr	pc, [ip, #3704]!	; 0xe78

0001121c <malloc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #135168	; 0x21000
   11224:	ldr	pc, [ip, #3696]!	; 0xe70

00011228 <__libc_start_main@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #135168	; 0x21000
   11230:	ldr	pc, [ip, #3688]!	; 0xe68

00011234 <strftime@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #135168	; 0x21000
   1123c:	ldr	pc, [ip, #3680]!	; 0xe60

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #135168	; 0x21000
   11248:	ldr	pc, [ip, #3672]!	; 0xe58

0001124c <__ctype_tolower_loc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #135168	; 0x21000
   11254:	ldr	pc, [ip, #3664]!	; 0xe50

00011258 <__ctype_toupper_loc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #135168	; 0x21000
   11260:	ldr	pc, [ip, #3656]!	; 0xe48

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #135168	; 0x21000
   1126c:	ldr	pc, [ip, #3648]!	; 0xe40

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #135168	; 0x21000
   11278:	ldr	pc, [ip, #3640]!	; 0xe38

0001127c <__ctype_b_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #135168	; 0x21000
   11284:	ldr	pc, [ip, #3632]!	; 0xe30

00011288 <exit@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #135168	; 0x21000
   11290:	ldr	pc, [ip, #3624]!	; 0xe28

00011294 <strlen@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #135168	; 0x21000
   1129c:	ldr	pc, [ip, #3616]!	; 0xe20

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #135168	; 0x21000
   112a8:	ldr	pc, [ip, #3608]!	; 0xe18

000112ac <setenv@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #135168	; 0x21000
   112b4:	ldr	pc, [ip, #3600]!	; 0xe10

000112b8 <ungetc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #135168	; 0x21000
   112c0:	ldr	pc, [ip, #3592]!	; 0xe08

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #135168	; 0x21000
   112cc:	ldr	pc, [ip, #3584]!	; 0xe00

000112d0 <__sprintf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #135168	; 0x21000
   112d8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #135168	; 0x21000
   112e4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #135168	; 0x21000
   112f0:	ldr	pc, [ip, #3560]!	; 0xde8

000112f4 <__printf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #135168	; 0x21000
   112fc:	ldr	pc, [ip, #3552]!	; 0xde0

00011300 <fileno@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #135168	; 0x21000
   11308:	ldr	pc, [ip, #3544]!	; 0xdd8

0001130c <__fprintf_chk@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #135168	; 0x21000
   11314:	ldr	pc, [ip, #3536]!	; 0xdd0

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #135168	; 0x21000
   11320:	ldr	pc, [ip, #3528]!	; 0xdc8

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #135168	; 0x21000
   1132c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011330 <fcntl64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #135168	; 0x21000
   11338:	ldr	pc, [ip, #3512]!	; 0xdb8

0001133c <__uflow@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #135168	; 0x21000
   11344:	ldr	pc, [ip, #3504]!	; 0xdb0

00011348 <__overflow@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #135168	; 0x21000
   11350:	ldr	pc, [ip, #3496]!	; 0xda8

00011354 <setlocale@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #135168	; 0x21000
   1135c:	ldr	pc, [ip, #3488]!	; 0xda0

00011360 <strrchr@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #135168	; 0x21000
   11368:	ldr	pc, [ip, #3480]!	; 0xd98

0001136c <nl_langinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #135168	; 0x21000
   11374:	ldr	pc, [ip, #3472]!	; 0xd90

00011378 <timegm@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #135168	; 0x21000
   11380:	ldr	pc, [ip, #3464]!	; 0xd88

00011384 <clearerr_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #135168	; 0x21000
   1138c:	ldr	pc, [ip, #3456]!	; 0xd80

00011390 <__strtoll_internal@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #135168	; 0x21000
   11398:	ldr	pc, [ip, #3448]!	; 0xd78

0001139c <fopen64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #135168	; 0x21000
   113a4:	ldr	pc, [ip, #3440]!	; 0xd70

000113a8 <bindtextdomain@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #135168	; 0x21000
   113b0:	ldr	pc, [ip, #3432]!	; 0xd68

000113b4 <unsetenv@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #135168	; 0x21000
   113bc:	ldr	pc, [ip, #3424]!	; 0xd60

000113c0 <strncmp@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #135168	; 0x21000
   113c8:	ldr	pc, [ip, #3416]!	; 0xd58

000113cc <abort@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #135168	; 0x21000
   113d4:	ldr	pc, [ip, #3408]!	; 0xd50

000113d8 <close@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #135168	; 0x21000
   113e0:	ldr	pc, [ip, #3400]!	; 0xd48

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #135168	; 0x21000
   113ec:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113f0 <.text>:
   113f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f4:	sub	sp, sp, #68	; 0x44
   113f8:	mov	r6, r0
   113fc:	mov	r4, #0
   11400:	ldr	r0, [r1]
   11404:	mov	r7, r1
   11408:	str	r4, [sp, #56]	; 0x38
   1140c:	bl	17f7c <__assert_fail@plt+0x6b98>
   11410:	ldr	r1, [pc, #3116]	; 12044 <__assert_fail@plt+0xc60>
   11414:	mov	r0, #6
   11418:	bl	11354 <setlocale@plt>
   1141c:	ldr	r1, [pc, #3108]	; 12048 <__assert_fail@plt+0xc64>
   11420:	ldr	r0, [pc, #3108]	; 1204c <__assert_fail@plt+0xc68>
   11424:	bl	113a8 <bindtextdomain@plt>
   11428:	ldr	r0, [pc, #3100]	; 1204c <__assert_fail@plt+0xc68>
   1142c:	bl	1118c <textdomain@plt>
   11430:	ldr	r0, [pc, #3096]	; 12050 <__assert_fail@plt+0xc6c>
   11434:	bl	20704 <__assert_fail@plt+0xf320>
   11438:	cmp	r6, #1
   1143c:	strle	r4, [sp, #48]	; 0x30
   11440:	ble	11454 <__assert_fail@plt+0x70>
   11444:	mov	r1, #4
   11448:	sub	r0, r6, #1
   1144c:	bl	1d12c <__assert_fail@plt+0xbd48>
   11450:	str	r0, [sp, #48]	; 0x30
   11454:	mov	r4, #0
   11458:	ldr	r9, [pc, #3060]	; 12054 <__assert_fail@plt+0xc70>
   1145c:	ldr	sl, [pc, #3060]	; 12058 <__assert_fail@plt+0xc74>
   11460:	ldr	fp, [pc, #3060]	; 1205c <__assert_fail@plt+0xc78>
   11464:	mov	r5, r4
   11468:	add	r8, sp, #60	; 0x3c
   1146c:	str	r4, [sp, #52]	; 0x34
   11470:	str	r4, [sp, #44]	; 0x2c
   11474:	str	r4, [sp, #40]	; 0x28
   11478:	str	r4, [sp, #36]	; 0x24
   1147c:	mvn	ip, #0
   11480:	mov	r3, r9
   11484:	str	r8, [sp]
   11488:	ldr	r2, [pc, #3024]	; 12060 <__assert_fail@plt+0xc7c>
   1148c:	mov	r1, r7
   11490:	mov	r0, r6
   11494:	str	ip, [sp, #60]	; 0x3c
   11498:	bl	11270 <getopt_long@plt>
   1149c:	cmn	r0, #1
   114a0:	mov	r3, r0
   114a4:	beq	11d58 <__assert_fail@plt+0x974>
   114a8:	sub	r2, r0, #48	; 0x30
   114ac:	cmp	r2, #9
   114b0:	bhi	114d8 <__assert_fail@plt+0xf4>
   114b4:	ldr	r1, [sp, #56]	; 0x38
   114b8:	add	r2, r4, #1
   114bc:	cmp	r2, r1
   114c0:	bcs	118fc <__assert_fail@plt+0x518>
   114c4:	mov	r1, #0
   114c8:	strb	r3, [r5, r4]
   114cc:	strb	r1, [r5, r2]
   114d0:	mov	r4, r2
   114d4:	b	1147c <__assert_fail@plt+0x98>
   114d8:	add	r3, r0, #3
   114dc:	cmp	r3, #260	; 0x104
   114e0:	ldrls	pc, [pc, r3, lsl #2]
   114e4:	b	11d50 <__assert_fail@plt+0x96c>
   114e8:	ldrdeq	r1, [r1], -ip
   114ec:	ldrdeq	r1, [r1], -r4
   114f0:	andeq	r1, r1, r0, asr sp
   114f4:	andeq	r1, r1, r0, asr sp
   114f8:	andeq	r1, r1, ip, lsr #23
   114fc:	andeq	r1, r1, r0, asr sp
   11500:	andeq	r1, r1, r0, asr sp
   11504:	andeq	r1, r1, r0, asr sp
   11508:	andeq	r1, r1, r0, asr sp
   1150c:	andeq	r1, r1, r0, asr sp
   11510:	andeq	r1, r1, r0, asr sp
   11514:	andeq	r1, r1, r0, asr sp
   11518:	andeq	r1, r1, r0, asr sp
   1151c:	andeq	r1, r1, r0, asr sp
   11520:	andeq	r1, r1, r0, asr sp
   11524:	andeq	r1, r1, r0, asr sp
   11528:	andeq	r1, r1, r0, asr sp
   1152c:	andeq	r1, r1, r0, asr sp
   11530:	andeq	r1, r1, r0, asr sp
   11534:	andeq	r1, r1, r0, asr sp
   11538:	andeq	r1, r1, r0, asr sp
   1153c:	andeq	r1, r1, r0, asr sp
   11540:	andeq	r1, r1, r0, asr sp
   11544:	andeq	r1, r1, r0, asr sp
   11548:	andeq	r1, r1, r0, asr sp
   1154c:	andeq	r1, r1, r0, asr sp
   11550:	andeq	r1, r1, r0, asr sp
   11554:	andeq	r1, r1, r0, asr sp
   11558:	andeq	r1, r1, r0, asr sp
   1155c:	andeq	r1, r1, r0, asr sp
   11560:	andeq	r1, r1, r0, asr sp
   11564:	andeq	r1, r1, r0, asr sp
   11568:	andeq	r1, r1, r0, asr sp
   1156c:	andeq	r1, r1, r0, asr sp
   11570:	andeq	r1, r1, r0, asr sp
   11574:	andeq	r1, r1, r0, asr sp
   11578:	andeq	r1, r1, r0, asr sp
   1157c:	andeq	r1, r1, r0, asr sp
   11580:	andeq	r1, r1, r0, asr sp
   11584:	andeq	r1, r1, r0, asr sp
   11588:	andeq	r1, r1, r0, asr sp
   1158c:	andeq	r1, r1, r0, asr sp
   11590:	andeq	r1, r1, r0, asr sp
   11594:	andeq	r1, r1, r0, asr sp
   11598:	andeq	r1, r1, r0, asr sp
   1159c:	andeq	r1, r1, r0, asr sp
   115a0:	andeq	r1, r1, r0, asr sp
   115a4:	andeq	r1, r1, r0, asr sp
   115a8:	andeq	r1, r1, r0, asr sp
   115ac:	andeq	r1, r1, r0, asr sp
   115b0:	andeq	r1, r1, r0, asr sp
   115b4:	andeq	r1, r1, r0, asr sp
   115b8:	andeq	r1, r1, r0, asr sp
   115bc:	andeq	r1, r1, r0, asr sp
   115c0:	andeq	r1, r1, r0, asr sp
   115c4:	andeq	r1, r1, r0, asr sp
   115c8:	andeq	r1, r1, r0, asr sp
   115cc:	andeq	r1, r1, r0, asr sp
   115d0:	andeq	r1, r1, r0, asr sp
   115d4:	andeq	r1, r1, r0, asr sp
   115d8:	andeq	r1, r1, r0, asr sp
   115dc:	andeq	r1, r1, r0, asr sp
   115e0:	andeq	r1, r1, r0, asr sp
   115e4:	andeq	r1, r1, r0, asr sp
   115e8:	andeq	r1, r1, r0, asr sp
   115ec:	andeq	r1, r1, r0, asr sp
   115f0:	andeq	r1, r1, r0, asr sp
   115f4:	andeq	r1, r1, r0, asr sp
   115f8:	andeq	r1, r1, r0, asr sp
   115fc:	andeq	r1, r1, r0, asr sp
   11600:	andeq	r1, r1, r0, asr sp
   11604:	andeq	r1, r1, r0, lsr #23
   11608:	andeq	r1, r1, r0, asr sp
   1160c:	muleq	r1, r4, fp
   11610:	andeq	r1, r1, r0, asr sp
   11614:	andeq	r1, r1, r0, asr sp
   11618:	andeq	r1, r1, r0, asr sp
   1161c:	andeq	r1, r1, r8, lsl #23
   11620:	andeq	r1, r1, r0, asr sp
   11624:	andeq	r1, r1, r0, asr sp
   11628:	andeq	r1, r1, r0, asr sp
   1162c:	andeq	r1, r1, r0, asr #25
   11630:	andeq	r1, r1, r0, asr sp
   11634:	andeq	r1, r1, r0, asr sp
   11638:	andeq	r1, r1, r0, asr sp
   1163c:	andeq	r1, r1, r0, asr sp
   11640:	andeq	r1, r1, r8, lsl #25
   11644:	andeq	r1, r1, r4, ror ip
   11648:	andeq	r1, r1, r0, asr sp
   1164c:	andeq	r1, r1, r0, asr sp
   11650:	andeq	r1, r1, r8, lsl ip
   11654:	andeq	r1, r1, r0, asr sp
   11658:	andeq	r1, r1, r0, asr sp
   1165c:	andeq	r1, r1, r0, asr sp
   11660:	andeq	r1, r1, r0, asr sp
   11664:	andeq	r1, r1, r0, asr sp
   11668:	andeq	r1, r1, r0, asr sp
   1166c:	andeq	r1, r1, r0, asr sp
   11670:	andeq	r1, r1, r0, asr sp
   11674:	andeq	r1, r1, r0, asr sp
   11678:	andeq	r1, r1, ip, lsr #26
   1167c:	andeq	r1, r1, r0, lsr #26
   11680:	andeq	r1, r1, r4, asr #26
   11684:	andeq	r1, r1, ip, ror fp
   11688:	andeq	r1, r1, r4, asr fp
   1168c:	muleq	r1, r4, fp
   11690:	andeq	r1, r1, r0, asr sp
   11694:	andeq	r1, r1, r8, asr #22
   11698:	andeq	r1, r1, r0, lsr #22
   1169c:	andeq	r1, r1, r0, asr sp
   116a0:	andeq	r1, r1, r0, asr sp
   116a4:	ldrdeq	r1, [r1], -r0
   116a8:			; <UNDEFINED> instruction: 0x00011ab8
   116ac:	muleq	r1, r0, sl
   116b0:	andeq	r1, r1, r4, asr #20
   116b4:	andeq	r1, r1, r0, asr sp
   116b8:	andeq	r1, r1, r0, asr sp
   116bc:	andeq	r1, r1, r8, lsr sl
   116c0:	strdeq	r1, [r1], -ip
   116c4:	andeq	r1, r1, r4, ror #19
   116c8:	andeq	r1, r1, r0, asr sp
   116cc:	ldrdeq	r1, [r1], -r8
   116d0:	andeq	r1, r1, r4, ror #18
   116d4:	andeq	r1, r1, r0, asr sp
   116d8:	andeq	r1, r1, r0, asr sp
   116dc:	andeq	r1, r1, r0, asr sp
   116e0:	andeq	r1, r1, r0, asr sp
   116e4:	andeq	r1, r1, r0, asr sp
   116e8:	andeq	r1, r1, r0, asr sp
   116ec:	andeq	r1, r1, r0, asr sp
   116f0:	andeq	r1, r1, r0, asr sp
   116f4:	andeq	r1, r1, r0, asr sp
   116f8:	andeq	r1, r1, r0, asr sp
   116fc:	andeq	r1, r1, r0, asr sp
   11700:	andeq	r1, r1, r0, asr sp
   11704:	andeq	r1, r1, r0, asr sp
   11708:	andeq	r1, r1, r0, asr sp
   1170c:	andeq	r1, r1, r0, asr sp
   11710:	andeq	r1, r1, r0, asr sp
   11714:	andeq	r1, r1, r0, asr sp
   11718:	andeq	r1, r1, r0, asr sp
   1171c:	andeq	r1, r1, r0, asr sp
   11720:	andeq	r1, r1, r0, asr sp
   11724:	andeq	r1, r1, r0, asr sp
   11728:	andeq	r1, r1, r0, asr sp
   1172c:	andeq	r1, r1, r0, asr sp
   11730:	andeq	r1, r1, r0, asr sp
   11734:	andeq	r1, r1, r0, asr sp
   11738:	andeq	r1, r1, r0, asr sp
   1173c:	andeq	r1, r1, r0, asr sp
   11740:	andeq	r1, r1, r0, asr sp
   11744:	andeq	r1, r1, r0, asr sp
   11748:	andeq	r1, r1, r0, asr sp
   1174c:	andeq	r1, r1, r0, asr sp
   11750:	andeq	r1, r1, r0, asr sp
   11754:	andeq	r1, r1, r0, asr sp
   11758:	andeq	r1, r1, r0, asr sp
   1175c:	andeq	r1, r1, r0, asr sp
   11760:	andeq	r1, r1, r0, asr sp
   11764:	andeq	r1, r1, r0, asr sp
   11768:	andeq	r1, r1, r0, asr sp
   1176c:	andeq	r1, r1, r0, asr sp
   11770:	andeq	r1, r1, r0, asr sp
   11774:	andeq	r1, r1, r0, asr sp
   11778:	andeq	r1, r1, r0, asr sp
   1177c:	andeq	r1, r1, r0, asr sp
   11780:	andeq	r1, r1, r0, asr sp
   11784:	andeq	r1, r1, r0, asr sp
   11788:	andeq	r1, r1, r0, asr sp
   1178c:	andeq	r1, r1, r0, asr sp
   11790:	andeq	r1, r1, r0, asr sp
   11794:	andeq	r1, r1, r0, asr sp
   11798:	andeq	r1, r1, r0, asr sp
   1179c:	andeq	r1, r1, r0, asr sp
   117a0:	andeq	r1, r1, r0, asr sp
   117a4:	andeq	r1, r1, r0, asr sp
   117a8:	andeq	r1, r1, r0, asr sp
   117ac:	andeq	r1, r1, r0, asr sp
   117b0:	andeq	r1, r1, r0, asr sp
   117b4:	andeq	r1, r1, r0, asr sp
   117b8:	andeq	r1, r1, r0, asr sp
   117bc:	andeq	r1, r1, r0, asr sp
   117c0:	andeq	r1, r1, r0, asr sp
   117c4:	andeq	r1, r1, r0, asr sp
   117c8:	andeq	r1, r1, r0, asr sp
   117cc:	andeq	r1, r1, r0, asr sp
   117d0:	andeq	r1, r1, r0, asr sp
   117d4:	andeq	r1, r1, r0, asr sp
   117d8:	andeq	r1, r1, r0, asr sp
   117dc:	andeq	r1, r1, r0, asr sp
   117e0:	andeq	r1, r1, r0, asr sp
   117e4:	andeq	r1, r1, r0, asr sp
   117e8:	andeq	r1, r1, r0, asr sp
   117ec:	andeq	r1, r1, r0, asr sp
   117f0:	andeq	r1, r1, r0, asr sp
   117f4:	andeq	r1, r1, r0, asr sp
   117f8:	andeq	r1, r1, r0, asr sp
   117fc:	andeq	r1, r1, r0, asr sp
   11800:	andeq	r1, r1, r0, asr sp
   11804:	andeq	r1, r1, r0, asr sp
   11808:	andeq	r1, r1, r0, asr sp
   1180c:	andeq	r1, r1, r0, asr sp
   11810:	andeq	r1, r1, r0, asr sp
   11814:	andeq	r1, r1, r0, asr sp
   11818:	andeq	r1, r1, r0, asr sp
   1181c:	andeq	r1, r1, r0, asr sp
   11820:	andeq	r1, r1, r0, asr sp
   11824:	andeq	r1, r1, r0, asr sp
   11828:	andeq	r1, r1, r0, asr sp
   1182c:	andeq	r1, r1, r0, asr sp
   11830:	andeq	r1, r1, r0, asr sp
   11834:	andeq	r1, r1, r0, asr sp
   11838:	andeq	r1, r1, r0, asr sp
   1183c:	andeq	r1, r1, r0, asr sp
   11840:	andeq	r1, r1, r0, asr sp
   11844:	andeq	r1, r1, r0, asr sp
   11848:	andeq	r1, r1, r0, asr sp
   1184c:	andeq	r1, r1, r0, asr sp
   11850:	andeq	r1, r1, r0, asr sp
   11854:	andeq	r1, r1, r0, asr sp
   11858:	andeq	r1, r1, r0, asr sp
   1185c:	andeq	r1, r1, r0, asr sp
   11860:	andeq	r1, r1, r0, asr sp
   11864:	andeq	r1, r1, r0, asr sp
   11868:	andeq	r1, r1, r0, asr sp
   1186c:	andeq	r1, r1, r0, asr sp
   11870:	andeq	r1, r1, r0, asr sp
   11874:	andeq	r1, r1, r0, asr sp
   11878:	andeq	r1, r1, r0, asr sp
   1187c:	andeq	r1, r1, r0, asr sp
   11880:	andeq	r1, r1, r0, asr sp
   11884:	andeq	r1, r1, r0, asr sp
   11888:	andeq	r1, r1, r0, asr sp
   1188c:	andeq	r1, r1, r0, asr sp
   11890:	andeq	r1, r1, r0, asr sp
   11894:	andeq	r1, r1, r0, asr sp
   11898:	andeq	r1, r1, r0, asr sp
   1189c:	andeq	r1, r1, r0, asr sp
   118a0:	andeq	r1, r1, r0, asr sp
   118a4:	andeq	r1, r1, r0, asr sp
   118a8:	andeq	r1, r1, r0, asr sp
   118ac:	andeq	r1, r1, r0, asr sp
   118b0:	andeq	r1, r1, r0, asr sp
   118b4:	andeq	r1, r1, r0, asr sp
   118b8:	andeq	r1, r1, r0, asr sp
   118bc:	andeq	r1, r1, r0, asr sp
   118c0:	andeq	r1, r1, r0, asr sp
   118c4:	andeq	r1, r1, r0, asr sp
   118c8:	andeq	r1, r1, r0, asr sp
   118cc:	andeq	r1, r1, r0, asr sp
   118d0:	andeq	r1, r1, r0, asr sp
   118d4:	andeq	r1, r1, r0, asr sp
   118d8:	andeq	r1, r1, r0, asr sp
   118dc:	andeq	r1, r1, r0, asr sp
   118e0:	andeq	r1, r1, r0, asr sp
   118e4:	andeq	r1, r1, r0, asr sp
   118e8:	andeq	r1, r1, r0, asr sp
   118ec:	andeq	r1, r1, r0, asr sp
   118f0:	andeq	r1, r1, r0, asr sp
   118f4:	andeq	r1, r1, r8, asr #18
   118f8:	andeq	r1, r1, r0, lsr #18
   118fc:	str	r0, [sp, #28]
   11900:	add	r1, sp, #56	; 0x38
   11904:	mov	r0, r5
   11908:	str	r2, [sp, #32]
   1190c:	bl	1d17c <__assert_fail@plt+0xbd98>
   11910:	ldr	r2, [sp, #32]
   11914:	ldr	r3, [sp, #28]
   11918:	mov	r5, r0
   1191c:	b	114c4 <__assert_fail@plt+0xe0>
   11920:	ldr	r2, [fp]
   11924:	cmp	r2, #0
   11928:	beq	12038 <__assert_fail@plt+0xc54>
   1192c:	mov	r1, #0
   11930:	ldr	r0, [sp, #60]	; 0x3c
   11934:	bl	1226c <__assert_fail@plt+0xe88>
   11938:	subs	r4, r0, #0
   1193c:	beq	1200c <__assert_fail@plt+0xc28>
   11940:	mov	r4, #0
   11944:	b	1147c <__assert_fail@plt+0x98>
   11948:	ldr	r0, [fp]
   1194c:	bl	123ac <__assert_fail@plt+0xfc8>
   11950:	mov	r0, r5
   11954:	mov	r5, #0
   11958:	bl	15da0 <__assert_fail@plt+0x49bc>
   1195c:	str	r5, [sp, #56]	; 0x38
   11960:	b	11940 <__assert_fail@plt+0x55c>
   11964:	mov	r2, #5
   11968:	ldr	r1, [pc, #1780]	; 12064 <__assert_fail@plt+0xc80>
   1196c:	mov	r0, #0
   11970:	ldr	r4, [fp]
   11974:	bl	11168 <dcgettext@plt>
   11978:	ldr	r3, [pc, #1732]	; 12044 <__assert_fail@plt+0xc60>
   1197c:	mvn	r2, #-2147483648	; 0x80000000
   11980:	str	r3, [sp, #8]
   11984:	mov	r3, #0
   11988:	mov	r1, #0
   1198c:	strd	r2, [sp]
   11990:	str	r1, [sp, #16]
   11994:	mov	r3, #0
   11998:	mov	r2, #1
   1199c:	str	r0, [sp, #12]
   119a0:	mov	r0, r4
   119a4:	bl	1d818 <__assert_fail@plt+0xc434>
   119a8:	ldrb	r3, [sl, #104]	; 0x68
   119ac:	cmp	r3, #0
   119b0:	str	r3, [sp, #40]	; 0x28
   119b4:	ldrne	r3, [sp, #40]	; 0x28
   119b8:	strne	r3, [sp, #44]	; 0x2c
   119bc:	bne	11940 <__assert_fail@plt+0x55c>
   119c0:	ldr	r2, [pc, #1696]	; 12068 <__assert_fail@plt+0xc84>
   119c4:	mov	r3, #1
   119c8:	str	r3, [sp, #44]	; 0x2c
   119cc:	str	r0, [r2, #16]
   119d0:	str	r3, [sp, #40]	; 0x28
   119d4:	b	11940 <__assert_fail@plt+0x55c>
   119d8:	mov	r3, #1
   119dc:	strb	r3, [sl, #85]	; 0x55
   119e0:	b	11940 <__assert_fail@plt+0x55c>
   119e4:	ldr	r1, [pc, #1660]	; 12068 <__assert_fail@plt+0xc84>
   119e8:	mov	r2, #0
   119ec:	mov	r3, #1
   119f0:	strb	r2, [r1, #56]	; 0x38
   119f4:	strb	r3, [sl, #139]	; 0x8b
   119f8:	b	11940 <__assert_fail@plt+0x55c>
   119fc:	ldrb	r3, [sl, #153]	; 0x99
   11a00:	cmp	r3, #0
   11a04:	str	r3, [sp, #40]	; 0x28
   11a08:	ldrne	r3, [sp, #40]	; 0x28
   11a0c:	strne	r3, [sp, #52]	; 0x34
   11a10:	bne	11940 <__assert_fail@plt+0x55c>
   11a14:	ldr	r0, [fp]
   11a18:	mov	r3, #1
   11a1c:	cmp	r0, #0
   11a20:	beq	11fa8 <__assert_fail@plt+0xbc4>
   11a24:	mov	r4, r3
   11a28:	str	r3, [sp, #52]	; 0x34
   11a2c:	bl	12378 <__assert_fail@plt+0xf94>
   11a30:	str	r4, [sp, #40]	; 0x28
   11a34:	b	11940 <__assert_fail@plt+0x55c>
   11a38:	mov	r3, #1
   11a3c:	strb	r3, [sl, #170]	; 0xaa
   11a40:	b	11940 <__assert_fail@plt+0x55c>
   11a44:	mov	r2, #5
   11a48:	ldr	r1, [pc, #1564]	; 1206c <__assert_fail@plt+0xc88>
   11a4c:	mov	r0, #0
   11a50:	ldr	r4, [fp]
   11a54:	bl	11168 <dcgettext@plt>
   11a58:	ldr	r3, [pc, #1508]	; 12044 <__assert_fail@plt+0xc60>
   11a5c:	mvn	r2, #-2147483648	; 0x80000000
   11a60:	str	r3, [sp, #8]
   11a64:	mov	r3, #0
   11a68:	mov	r1, #0
   11a6c:	strd	r2, [sp]
   11a70:	str	r1, [sp, #16]
   11a74:	mov	r2, #0
   11a78:	mov	r3, #0
   11a7c:	str	r0, [sp, #12]
   11a80:	mov	r0, r4
   11a84:	bl	1d818 <__assert_fail@plt+0xc434>
   11a88:	str	r0, [sl, #116]	; 0x74
   11a8c:	b	11940 <__assert_fail@plt+0x55c>
   11a90:	ldr	r0, [fp]
   11a94:	mov	r3, #1
   11a98:	cmp	r0, #0
   11a9c:	strb	r3, [sl, #163]	; 0xa3
   11aa0:	beq	11940 <__assert_fail@plt+0x55c>
   11aa4:	ldr	r3, [pc, #1476]	; 12070 <__assert_fail@plt+0xc8c>
   11aa8:	mov	r1, #110	; 0x6e
   11aac:	add	r2, r3, #4
   11ab0:	bl	15a00 <__assert_fail@plt+0x461c>
   11ab4:	b	11940 <__assert_fail@plt+0x55c>
   11ab8:	mov	r2, #1
   11abc:	strb	r2, [sl, #64]	; 0x40
   11ac0:	ldr	r2, [pc, #1440]	; 12068 <__assert_fail@plt+0xc84>
   11ac4:	mov	r3, #0
   11ac8:	strb	r3, [r2, #40]	; 0x28
   11acc:	b	11940 <__assert_fail@plt+0x55c>
   11ad0:	mov	r2, #5
   11ad4:	ldr	r1, [pc, #1432]	; 12074 <__assert_fail@plt+0xc90>
   11ad8:	mov	r0, #0
   11adc:	ldr	r4, [fp]
   11ae0:	bl	11168 <dcgettext@plt>
   11ae4:	ldr	r3, [pc, #1368]	; 12044 <__assert_fail@plt+0xc60>
   11ae8:	mvn	r2, #-2147483648	; 0x80000000
   11aec:	str	r3, [sp, #8]
   11af0:	mov	r3, #0
   11af4:	mov	r1, #0
   11af8:	strd	r2, [sp]
   11afc:	str	r1, [sp, #16]
   11b00:	mov	r3, #0
   11b04:	mov	r2, #1
   11b08:	str	r0, [sp, #12]
   11b0c:	mov	r0, r4
   11b10:	bl	1d818 <__assert_fail@plt+0xc434>
   11b14:	ldr	r3, [pc, #1356]	; 12068 <__assert_fail@plt+0xc84>
   11b18:	str	r0, [r3, #52]	; 0x34
   11b1c:	b	11940 <__assert_fail@plt+0x55c>
   11b20:	ldr	r0, [fp]
   11b24:	cmp	r0, #0
   11b28:	beq	11b3c <__assert_fail@plt+0x758>
   11b2c:	ldr	r3, [pc, #1348]	; 12078 <__assert_fail@plt+0xc94>
   11b30:	mov	r1, #105	; 0x69
   11b34:	add	r2, r3, #12
   11b38:	bl	15a00 <__assert_fail@plt+0x461c>
   11b3c:	mov	r3, #1
   11b40:	strb	r3, [sl, #120]	; 0x78
   11b44:	b	11940 <__assert_fail@plt+0x55c>
   11b48:	ldr	r3, [fp]
   11b4c:	str	r3, [sl, #52]	; 0x34
   11b50:	b	11940 <__assert_fail@plt+0x55c>
   11b54:	ldr	r0, [fp]
   11b58:	cmp	r0, #0
   11b5c:	beq	11b70 <__assert_fail@plt+0x78c>
   11b60:	ldr	r3, [pc, #1300]	; 1207c <__assert_fail@plt+0xc98>
   11b64:	mov	r1, #101	; 0x65
   11b68:	sub	r2, r3, #4
   11b6c:	bl	15a00 <__assert_fail@plt+0x461c>
   11b70:	mov	r3, #1
   11b74:	strb	r3, [sl, #84]	; 0x54
   11b78:	b	11940 <__assert_fail@plt+0x55c>
   11b7c:	mov	r3, #1
   11b80:	strb	r3, [sl, #160]	; 0xa0
   11b84:	b	11940 <__assert_fail@plt+0x55c>
   11b88:	mov	r3, #1
   11b8c:	strb	r3, [sl, #162]	; 0xa2
   11b90:	b	11940 <__assert_fail@plt+0x55c>
   11b94:	mov	r3, #1
   11b98:	strb	r3, [sl, #180]	; 0xb4
   11b9c:	b	11940 <__assert_fail@plt+0x55c>
   11ba0:	ldr	r3, [fp]
   11ba4:	str	r3, [sl, #44]	; 0x2c
   11ba8:	b	11940 <__assert_fail@plt+0x55c>
   11bac:	ldrd	r2, [sl, #16]
   11bb0:	orrs	r3, r2, r3
   11bb4:	beq	11ea8 <__assert_fail@plt+0xac4>
   11bb8:	ldr	r2, [sp, #36]	; 0x24
   11bbc:	ldr	r1, [sp, #48]	; 0x30
   11bc0:	ldr	r3, [fp]
   11bc4:	str	r3, [r1, r2, lsl #2]
   11bc8:	add	r3, r2, #1
   11bcc:	str	r3, [sp, #36]	; 0x24
   11bd0:	b	11940 <__assert_fail@plt+0x55c>
   11bd4:	mov	r0, #0
   11bd8:	bl	15594 <__assert_fail@plt+0x41b0>
   11bdc:	ldr	r3, [pc, #1180]	; 12080 <__assert_fail@plt+0xc9c>
   11be0:	ldr	r0, [pc, #1180]	; 12084 <__assert_fail@plt+0xca0>
   11be4:	ldr	r1, [pc, #1180]	; 12088 <__assert_fail@plt+0xca4>
   11be8:	ldr	r2, [pc, #1180]	; 1208c <__assert_fail@plt+0xca8>
   11bec:	mov	r4, #0
   11bf0:	ldr	r0, [r0]
   11bf4:	ldr	r3, [r3]
   11bf8:	str	r1, [sp, #4]
   11bfc:	str	r2, [sp]
   11c00:	str	r4, [sp, #8]
   11c04:	ldr	r2, [pc, #1156]	; 12090 <__assert_fail@plt+0xcac>
   11c08:	ldr	r1, [pc, #1156]	; 12094 <__assert_fail@plt+0xcb0>
   11c0c:	bl	1ce60 <__assert_fail@plt+0xba7c>
   11c10:	mov	r0, r4
   11c14:	bl	11288 <exit@plt>
   11c18:	mov	r3, #1
   11c1c:	mov	r2, #5
   11c20:	ldr	r1, [pc, #1136]	; 12098 <__assert_fail@plt+0xcb4>
   11c24:	mov	r0, #0
   11c28:	strb	r3, [sl, #104]	; 0x68
   11c2c:	ldr	r4, [fp]
   11c30:	bl	11168 <dcgettext@plt>
   11c34:	ldr	r3, [pc, #1032]	; 12044 <__assert_fail@plt+0xc60>
   11c38:	mvn	r2, #-2147483648	; 0x80000000
   11c3c:	str	r3, [sp, #8]
   11c40:	mov	r3, #0
   11c44:	mov	r1, #0
   11c48:	strd	r2, [sp]
   11c4c:	str	r1, [sp, #16]
   11c50:	mov	r3, #0
   11c54:	mov	r2, #1
   11c58:	str	r1, [sp, #44]	; 0x2c
   11c5c:	str	r0, [sp, #12]
   11c60:	mov	r0, r4
   11c64:	bl	1d818 <__assert_fail@plt+0xc434>
   11c68:	ldr	r3, [pc, #1016]	; 12068 <__assert_fail@plt+0xc84>
   11c6c:	str	r0, [r3, #16]
   11c70:	b	11940 <__assert_fail@plt+0x55c>
   11c74:	ldr	r2, [pc, #1004]	; 12068 <__assert_fail@plt+0xc84>
   11c78:	mov	r3, #0
   11c7c:	strb	r3, [sl, #139]	; 0x8b
   11c80:	strb	r3, [r2, #56]	; 0x38
   11c84:	b	11940 <__assert_fail@plt+0x55c>
   11c88:	ldr	r0, [fp]
   11c8c:	ldr	r2, [pc, #980]	; 12068 <__assert_fail@plt+0xc84>
   11c90:	mov	r4, #0
   11c94:	ldr	r1, [pc, #936]	; 12044 <__assert_fail@plt+0xc60>
   11c98:	cmp	r0, r4
   11c9c:	mov	r3, #1
   11ca0:	str	r1, [r2, #8]
   11ca4:	str	r4, [sl, #24]
   11ca8:	strb	r3, [sl, #153]	; 0x99
   11cac:	streq	r0, [sp, #52]	; 0x34
   11cb0:	beq	11940 <__assert_fail@plt+0x55c>
   11cb4:	bl	12378 <__assert_fail@plt+0xf94>
   11cb8:	str	r4, [sp, #52]	; 0x34
   11cbc:	b	11940 <__assert_fail@plt+0x55c>
   11cc0:	ldr	ip, [pc, #928]	; 12068 <__assert_fail@plt+0xc84>
   11cc4:	mov	r3, #0
   11cc8:	mov	r0, r3
   11ccc:	mov	r2, #5
   11cd0:	ldr	r1, [pc, #964]	; 1209c <__assert_fail@plt+0xcb8>
   11cd4:	strb	r3, [ip, #41]	; 0x29
   11cd8:	str	r3, [sp, #28]
   11cdc:	ldr	r4, [fp]
   11ce0:	bl	11168 <dcgettext@plt>
   11ce4:	ldr	r3, [sp, #28]
   11ce8:	mvn	r2, #-2147483648	; 0x80000000
   11cec:	str	r3, [sp, #16]
   11cf0:	ldr	r3, [pc, #844]	; 12044 <__assert_fail@plt+0xc60>
   11cf4:	str	r3, [sp, #8]
   11cf8:	mov	r3, #0
   11cfc:	strd	r2, [sp]
   11d00:	mvn	r3, #0
   11d04:	mov	r2, #-2147483648	; 0x80000000
   11d08:	str	r0, [sp, #12]
   11d0c:	mov	r0, r4
   11d10:	bl	1d818 <__assert_fail@plt+0xc434>
   11d14:	ldr	r3, [pc, #844]	; 12068 <__assert_fail@plt+0xc84>
   11d18:	str	r0, [r3, #60]	; 0x3c
   11d1c:	b	11940 <__assert_fail@plt+0x55c>
   11d20:	mov	r3, #1
   11d24:	strb	r3, [sl, #161]	; 0xa1
   11d28:	b	11940 <__assert_fail@plt+0x55c>
   11d2c:	mov	r2, #1
   11d30:	strb	r2, [sl, #181]	; 0xb5
   11d34:	ldr	r2, [pc, #812]	; 12068 <__assert_fail@plt+0xc84>
   11d38:	mov	r3, #0
   11d3c:	strb	r3, [r2, #40]	; 0x28
   11d40:	b	11940 <__assert_fail@plt+0x55c>
   11d44:	mov	r3, #1
   11d48:	strb	r3, [sl, #86]	; 0x56
   11d4c:	b	11940 <__assert_fail@plt+0x55c>
   11d50:	mov	r0, #1
   11d54:	bl	15594 <__assert_fail@plt+0x41b0>
   11d58:	cmp	r5, #0
   11d5c:	beq	11d70 <__assert_fail@plt+0x98c>
   11d60:	mov	r0, r5
   11d64:	bl	123ac <__assert_fail@plt+0xfc8>
   11d68:	mov	r0, r5
   11d6c:	bl	15da0 <__assert_fail@plt+0x49bc>
   11d70:	ldr	r5, [pc, #736]	; 12058 <__assert_fail@plt+0xc74>
   11d74:	ldr	r3, [r5, #44]	; 0x2c
   11d78:	cmp	r3, #0
   11d7c:	beq	11fb4 <__assert_fail@plt+0xbd0>
   11d80:	ldr	r0, [pc, #792]	; 120a0 <__assert_fail@plt+0xcbc>
   11d84:	bl	11210 <getenv@plt>
   11d88:	bl	1c2f4 <__assert_fail@plt+0xaf10>
   11d8c:	ldrd	r2, [r5, #16]
   11d90:	orrs	r3, r2, r3
   11d94:	str	r0, [r5, #40]	; 0x28
   11d98:	moveq	r2, #1
   11d9c:	moveq	r3, #0
   11da0:	strdeq	r2, [r5, #16]
   11da4:	ldrb	r4, [r5, #64]	; 0x40
   11da8:	cmp	r4, #0
   11dac:	beq	11dd0 <__assert_fail@plt+0x9ec>
   11db0:	ldrb	r8, [r5, #28]
   11db4:	cmp	r8, #0
   11db8:	bne	11f04 <__assert_fail@plt+0xb20>
   11dbc:	ldrb	r3, [r5, #181]	; 0xb5
   11dc0:	cmp	r3, #0
   11dc4:	movne	r2, #5
   11dc8:	ldrne	r1, [pc, #724]	; 120a4 <__assert_fail@plt+0xcc0>
   11dcc:	bne	11f0c <__assert_fail@plt+0xb28>
   11dd0:	ldr	r3, [sp, #40]	; 0x28
   11dd4:	cmp	r3, #0
   11dd8:	bne	11ed0 <__assert_fail@plt+0xaec>
   11ddc:	ldr	r8, [pc, #708]	; 120a8 <__assert_fail@plt+0xcc4>
   11de0:	ldr	r1, [r8]
   11de4:	cmp	r6, r1
   11de8:	ble	11e14 <__assert_fail@plt+0xa30>
   11dec:	ldr	r3, [sp, #36]	; 0x24
   11df0:	sub	r2, r6, r1
   11df4:	ldr	r0, [sp, #48]	; 0x30
   11df8:	add	r1, r7, r1, lsl #2
   11dfc:	add	r0, r0, r3, lsl #2
   11e00:	add	r3, r3, r2
   11e04:	lsl	r2, r2, #2
   11e08:	str	r3, [sp, #36]	; 0x24
   11e0c:	bl	1112c <memcpy@plt>
   11e10:	str	r6, [r8]
   11e14:	ldr	r3, [sp, #36]	; 0x24
   11e18:	cmp	r3, #0
   11e1c:	beq	11f24 <__assert_fail@plt+0xb40>
   11e20:	cmp	r4, #0
   11e24:	moveq	r7, #1
   11e28:	ldreq	r6, [sp, #48]	; 0x30
   11e2c:	ldreq	r8, [sp, #36]	; 0x24
   11e30:	bne	11f98 <__assert_fail@plt+0xbb4>
   11e34:	mov	r1, r6
   11e38:	add	r4, r4, #1
   11e3c:	mov	r0, r7
   11e40:	bl	13754 <__assert_fail@plt+0x2370>
   11e44:	cmp	r4, r8
   11e48:	add	r6, r6, #4
   11e4c:	bne	11e34 <__assert_fail@plt+0xa50>
   11e50:	ldr	r0, [r5, #88]	; 0x58
   11e54:	bl	15da0 <__assert_fail@plt+0x49bc>
   11e58:	ldr	r0, [r5, #76]	; 0x4c
   11e5c:	bl	15da0 <__assert_fail@plt+0x49bc>
   11e60:	ldr	r0, [r5, #68]	; 0x44
   11e64:	bl	15da0 <__assert_fail@plt+0x49bc>
   11e68:	ldr	r0, [r5, #172]	; 0xac
   11e6c:	bl	15da0 <__assert_fail@plt+0x49bc>
   11e70:	ldr	r0, [r5, #176]	; 0xb0
   11e74:	bl	15da0 <__assert_fail@plt+0x49bc>
   11e78:	ldr	r0, [r5, #8]
   11e7c:	bl	15da0 <__assert_fail@plt+0x49bc>
   11e80:	ldrb	r3, [r5, #168]	; 0xa8
   11e84:	cmp	r3, #0
   11e88:	beq	11ea0 <__assert_fail@plt+0xabc>
   11e8c:	ldr	r3, [pc, #536]	; 120ac <__assert_fail@plt+0xcc8>
   11e90:	ldr	r0, [r3]
   11e94:	bl	15c08 <__assert_fail@plt+0x4824>
   11e98:	cmn	r0, #1
   11e9c:	beq	11fe4 <__assert_fail@plt+0xc00>
   11ea0:	ldrb	r0, [r5, #169]	; 0xa9
   11ea4:	bl	11288 <exit@plt>
   11ea8:	ldr	r2, [fp]
   11eac:	ldrb	r1, [r2]
   11eb0:	cmp	r1, #43	; 0x2b
   11eb4:	bne	11bb8 <__assert_fail@plt+0x7d4>
   11eb8:	add	r2, r2, #1
   11ebc:	mvn	r0, #1
   11ec0:	bl	1226c <__assert_fail@plt+0xe88>
   11ec4:	cmp	r0, #0
   11ec8:	bne	11940 <__assert_fail@plt+0x55c>
   11ecc:	b	11bb8 <__assert_fail@plt+0x7d4>
   11ed0:	ldr	r3, [sp, #44]	; 0x2c
   11ed4:	cmp	r3, #0
   11ed8:	beq	11f34 <__assert_fail@plt+0xb50>
   11edc:	cmp	r4, #0
   11ee0:	beq	11f80 <__assert_fail@plt+0xb9c>
   11ee4:	ldr	r3, [sp, #52]	; 0x34
   11ee8:	cmp	r3, #0
   11eec:	mov	r3, #1
   11ef0:	strb	r3, [r5, #104]	; 0x68
   11ef4:	beq	11ddc <__assert_fail@plt+0x9f8>
   11ef8:	mov	r3, #1
   11efc:	strb	r3, [r5, #153]	; 0x99
   11f00:	b	11ddc <__assert_fail@plt+0x9f8>
   11f04:	ldr	r1, [pc, #420]	; 120b0 <__assert_fail@plt+0xccc>
   11f08:	mov	r2, #5
   11f0c:	mov	r0, #0
   11f10:	bl	11168 <dcgettext@plt>
   11f14:	mov	r1, #0
   11f18:	mov	r2, r0
   11f1c:	mov	r0, #1
   11f20:	bl	11204 <error@plt>
   11f24:	mov	r1, r3
   11f28:	mov	r0, r3
   11f2c:	bl	13754 <__assert_fail@plt+0x2370>
   11f30:	b	11e50 <__assert_fail@plt+0xa6c>
   11f34:	ldrb	r3, [r5, #153]	; 0x99
   11f38:	ldr	r2, [sp, #52]	; 0x34
   11f3c:	eor	r3, r3, #1
   11f40:	tst	r2, r3
   11f44:	beq	11ddc <__assert_fail@plt+0x9f8>
   11f48:	cmp	r4, #0
   11f4c:	bne	11f5c <__assert_fail@plt+0xb78>
   11f50:	ldrb	r3, [r5, #28]
   11f54:	cmp	r3, #0
   11f58:	beq	11ddc <__assert_fail@plt+0x9f8>
   11f5c:	ldrb	r3, [r5, #104]	; 0x68
   11f60:	cmp	r3, #0
   11f64:	bne	11ef8 <__assert_fail@plt+0xb14>
   11f68:	ldr	r2, [r5, #24]
   11f6c:	mov	r3, #1
   11f70:	cmp	r2, #0
   11f74:	strb	r3, [r5, #162]	; 0xa2
   11f78:	bgt	11ef8 <__assert_fail@plt+0xb14>
   11f7c:	b	11ddc <__assert_fail@plt+0x9f8>
   11f80:	ldrb	r3, [r5, #28]
   11f84:	cmp	r3, #0
   11f88:	moveq	r3, #1
   11f8c:	strbeq	r3, [r5, #162]	; 0xa2
   11f90:	beq	11ddc <__assert_fail@plt+0x9f8>
   11f94:	b	11ee4 <__assert_fail@plt+0xb00>
   11f98:	ldr	r1, [sp, #48]	; 0x30
   11f9c:	ldr	r0, [sp, #36]	; 0x24
   11fa0:	bl	13754 <__assert_fail@plt+0x2370>
   11fa4:	b	11e50 <__assert_fail@plt+0xa6c>
   11fa8:	str	r3, [sp, #52]	; 0x34
   11fac:	str	r3, [sp, #40]	; 0x28
   11fb0:	b	11940 <__assert_fail@plt+0x55c>
   11fb4:	ldr	r0, [pc, #248]	; 120b4 <__assert_fail@plt+0xcd0>
   11fb8:	bl	11210 <getenv@plt>
   11fbc:	cmp	r0, #0
   11fc0:	beq	11fd8 <__assert_fail@plt+0xbf4>
   11fc4:	mov	r0, #2
   11fc8:	bl	15ed0 <__assert_fail@plt+0x4aec>
   11fcc:	cmp	r0, #0
   11fd0:	ldreq	r3, [pc, #224]	; 120b8 <__assert_fail@plt+0xcd4>
   11fd4:	beq	11fdc <__assert_fail@plt+0xbf8>
   11fd8:	ldr	r3, [pc, #220]	; 120bc <__assert_fail@plt+0xcd8>
   11fdc:	str	r3, [r5, #44]	; 0x2c
   11fe0:	b	11d80 <__assert_fail@plt+0x99c>
   11fe4:	bl	112c4 <__errno_location@plt>
   11fe8:	mov	r2, #5
   11fec:	ldr	r1, [pc, #204]	; 120c0 <__assert_fail@plt+0xcdc>
   11ff0:	ldr	r4, [r0]
   11ff4:	mov	r0, #0
   11ff8:	bl	11168 <dcgettext@plt>
   11ffc:	mov	r1, r4
   12000:	mov	r2, r0
   12004:	mov	r0, #1
   12008:	bl	11204 <error@plt>
   1200c:	mov	r2, #5
   12010:	ldr	r1, [pc, #172]	; 120c4 <__assert_fail@plt+0xce0>
   12014:	bl	11168 <dcgettext@plt>
   12018:	mov	r5, r0
   1201c:	ldr	r0, [fp]
   12020:	bl	1be48 <__assert_fail@plt+0xaa64>
   12024:	mov	r2, r5
   12028:	mov	r1, r4
   1202c:	mov	r3, r0
   12030:	mov	r0, #1
   12034:	bl	11204 <error@plt>
   12038:	mov	r2, #5
   1203c:	ldr	r1, [pc, #132]	; 120c8 <__assert_fail@plt+0xce4>
   12040:	b	11f0c <__assert_fail@plt+0xb28>
   12044:	andeq	r0, r2, r8, asr #19
   12048:	andeq	r1, r2, r4, asr fp
   1204c:	andeq	r1, r2, ip, asr #20
   12050:	andeq	r5, r1, r4, ror #21
   12054:	andeq	r0, r2, r8, lsr #14
   12058:	strdeq	r3, [r3], -r0
   1205c:	andeq	r3, r3, r8, ror #3
   12060:	andeq	r0, r2, r0, lsl r9
   12064:	andeq	r1, r2, r0, lsr ip
   12068:	andeq	r3, r3, r0, asr #2
   1206c:	andeq	r1, r2, r0, lsl ip
   12070:	andeq	r3, r3, ip, asr r1
   12074:			; <UNDEFINED> instruction: 0x00021bb8
   12078:	andeq	r3, r3, r4, ror #2
   1207c:	andeq	r3, r3, r8, asr r1
   12080:	andeq	r3, r3, r0, lsl #3
   12084:	andeq	r3, r3, r4, ror #3
   12088:	muleq	r2, r0, ip
   1208c:	andeq	r1, r2, r0, lsr #25
   12090:	andeq	r1, r2, r8, asr #20
   12094:	andeq	r0, r2, r0, lsr sl
   12098:	andeq	r1, r2, r0, ror #24
   1209c:	andeq	r1, r2, r4, ror #23
   120a0:	andeq	r1, r2, r0, asr #25
   120a4:	andeq	r1, r2, r0, lsl #26
   120a8:	ldrdeq	r3, [r3], -r0
   120ac:	andeq	r3, r3, r0, ror #3
   120b0:	andeq	r1, r2, r4, asr #25
   120b4:			; <UNDEFINED> instruction: 0x00021cb0
   120b8:	andeq	r1, r2, r4, lsr fp
   120bc:	andeq	r1, r2, r4, asr #22
   120c0:	andeq	r0, r2, ip, ror #19
   120c4:	andeq	r1, r2, r0, lsr #23
   120c8:	andeq	r1, r2, ip, ror #22
   120cc:	mov	fp, #0
   120d0:	mov	lr, #0
   120d4:	pop	{r1}		; (ldr r1, [sp], #4)
   120d8:	mov	r2, sp
   120dc:	push	{r2}		; (str r2, [sp, #-4]!)
   120e0:	push	{r0}		; (str r0, [sp, #-4]!)
   120e4:	ldr	ip, [pc, #16]	; 120fc <__assert_fail@plt+0xd18>
   120e8:	push	{ip}		; (str ip, [sp, #-4]!)
   120ec:	ldr	r0, [pc, #12]	; 12100 <__assert_fail@plt+0xd1c>
   120f0:	ldr	r3, [pc, #12]	; 12104 <__assert_fail@plt+0xd20>
   120f4:	bl	11228 <__libc_start_main@plt>
   120f8:	bl	113cc <abort@plt>
   120fc:	andeq	r0, r2, r0, lsl #14
   12100:	strdeq	r1, [r1], -r0
   12104:	andeq	r0, r2, r0, lsr #13
   12108:	ldr	r3, [pc, #20]	; 12124 <__assert_fail@plt+0xd40>
   1210c:	ldr	r2, [pc, #20]	; 12128 <__assert_fail@plt+0xd44>
   12110:	add	r3, pc, r3
   12114:	ldr	r2, [r3, r2]
   12118:	cmp	r2, #0
   1211c:	bxeq	lr
   12120:	b	11264 <__gmon_start__@plt>
   12124:	andeq	r0, r2, r8, ror #29
   12128:	andeq	r0, r0, r0, lsr r1
   1212c:	ldr	r3, [pc, #28]	; 12150 <__assert_fail@plt+0xd6c>
   12130:	ldr	r0, [pc, #28]	; 12154 <__assert_fail@plt+0xd70>
   12134:	sub	r3, r3, r0
   12138:	cmp	r3, #6
   1213c:	bxls	lr
   12140:	ldr	r3, [pc, #16]	; 12158 <__assert_fail@plt+0xd74>
   12144:	cmp	r3, #0
   12148:	bxeq	lr
   1214c:	bx	r3
   12150:	andeq	r3, r3, fp, asr #3
   12154:	andeq	r3, r3, r8, asr #3
   12158:	andeq	r0, r0, r0
   1215c:	ldr	r1, [pc, #36]	; 12188 <__assert_fail@plt+0xda4>
   12160:	ldr	r0, [pc, #36]	; 1218c <__assert_fail@plt+0xda8>
   12164:	sub	r1, r1, r0
   12168:	asr	r1, r1, #2
   1216c:	add	r1, r1, r1, lsr #31
   12170:	asrs	r1, r1, #1
   12174:	bxeq	lr
   12178:	ldr	r3, [pc, #16]	; 12190 <__assert_fail@plt+0xdac>
   1217c:	cmp	r3, #0
   12180:	bxeq	lr
   12184:	bx	r3
   12188:	andeq	r3, r3, r8, asr #3
   1218c:	andeq	r3, r3, r8, asr #3
   12190:	andeq	r0, r0, r0
   12194:	push	{r4, lr}
   12198:	ldr	r4, [pc, #24]	; 121b8 <__assert_fail@plt+0xdd4>
   1219c:	ldrb	r3, [r4]
   121a0:	cmp	r3, #0
   121a4:	popne	{r4, pc}
   121a8:	bl	1212c <__assert_fail@plt+0xd48>
   121ac:	mov	r3, #1
   121b0:	strb	r3, [r4]
   121b4:	pop	{r4, pc}
   121b8:	andeq	r3, r3, ip, ror #3
   121bc:	ldr	r0, [pc, #40]	; 121ec <__assert_fail@plt+0xe08>
   121c0:	ldr	r3, [r0]
   121c4:	cmp	r3, #0
   121c8:	bne	121d0 <__assert_fail@plt+0xdec>
   121cc:	b	1215c <__assert_fail@plt+0xd78>
   121d0:	ldr	r3, [pc, #24]	; 121f0 <__assert_fail@plt+0xe0c>
   121d4:	cmp	r3, #0
   121d8:	beq	121cc <__assert_fail@plt+0xde8>
   121dc:	push	{r4, lr}
   121e0:	blx	r3
   121e4:	pop	{r4, lr}
   121e8:	b	1215c <__assert_fail@plt+0xd78>
   121ec:	andeq	r2, r3, r4, lsl pc
   121f0:	andeq	r0, r0, r0
   121f4:	push	{r4, r5, r6, lr}
   121f8:	mov	r5, r0
   121fc:	ldr	r4, [pc, #60]	; 12240 <__assert_fail@plt+0xe5c>
   12200:	ldr	r3, [r4]
   12204:	ldr	r2, [r4, #4]
   12208:	cmp	r3, r2
   1220c:	bcs	12224 <__assert_fail@plt+0xe40>
   12210:	ldr	r1, [r4, #8]
   12214:	add	r2, r3, #1
   12218:	strb	r5, [r1, r3]
   1221c:	str	r2, [r4]
   12220:	pop	{r4, r5, r6, pc}
   12224:	add	r1, r4, #4
   12228:	ldr	r0, [r4, #8]
   1222c:	bl	1d17c <__assert_fail@plt+0xbd98>
   12230:	ldr	r3, [r4]
   12234:	mov	r1, r0
   12238:	str	r0, [r4, #8]
   1223c:	b	12214 <__assert_fail@plt+0xe30>
   12240:	strdeq	r3, [r3], -r0
   12244:	mov	r2, #5
   12248:	ldr	r1, [pc, #24]	; 12268 <__assert_fail@plt+0xe84>
   1224c:	push	{r4, lr}
   12250:	mov	r0, #0
   12254:	bl	11168 <dcgettext@plt>
   12258:	mov	r1, #0
   1225c:	mov	r2, r0
   12260:	mov	r0, #1
   12264:	bl	11204 <error@plt>
   12268:	andeq	r0, r2, r8, asr #18
   1226c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12270:	sub	sp, sp, #32
   12274:	ldr	r6, [pc, #236]	; 12368 <__assert_fail@plt+0xf84>
   12278:	mvn	sl, #0
   1227c:	mvn	fp, #0
   12280:	add	r3, sp, #16
   12284:	mov	r4, r2
   12288:	mov	r7, r0
   1228c:	mov	r8, r1
   12290:	mov	r0, r2
   12294:	str	r6, [sp]
   12298:	add	r1, sp, #12
   1229c:	mov	r2, #10
   122a0:	strd	sl, [sp, #24]
   122a4:	bl	1ee88 <__assert_fail@plt+0xdaa4>
   122a8:	bics	r3, r0, #2
   122ac:	bne	12354 <__assert_fail@plt+0xf70>
   122b0:	ldr	r0, [sp, #12]
   122b4:	cmp	r4, r0
   122b8:	beq	12340 <__assert_fail@plt+0xf5c>
   122bc:	ldrd	r2, [sp, #16]
   122c0:	orrs	r1, r2, r3
   122c4:	beq	12340 <__assert_fail@plt+0xf5c>
   122c8:	ldrb	r1, [r0]
   122cc:	cmp	r1, #58	; 0x3a
   122d0:	beq	122fc <__assert_fail@plt+0xf18>
   122d4:	cmp	r1, #0
   122d8:	bne	12340 <__assert_fail@plt+0xf5c>
   122dc:	ldr	ip, [pc, #136]	; 1236c <__assert_fail@plt+0xf88>
   122e0:	ldr	r1, [pc, #136]	; 12370 <__assert_fail@plt+0xf8c>
   122e4:	ldrd	r4, [sp, #24]
   122e8:	mov	r0, #1
   122ec:	strd	r2, [ip, #16]
   122f0:	strd	r4, [r1]
   122f4:	add	sp, sp, #32
   122f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   122fc:	add	r5, r0, #1
   12300:	str	r6, [sp]
   12304:	add	r1, sp, #12
   12308:	mov	r0, r5
   1230c:	add	r3, sp, #24
   12310:	mov	r2, #10
   12314:	bl	1ee88 <__assert_fail@plt+0xdaa4>
   12318:	cmp	r0, #0
   1231c:	bne	12354 <__assert_fail@plt+0xf70>
   12320:	ldr	r1, [sp, #12]
   12324:	cmp	r5, r1
   12328:	beq	12340 <__assert_fail@plt+0xf5c>
   1232c:	ldrd	r2, [sp, #16]
   12330:	ldrd	r4, [sp, #24]
   12334:	cmp	r5, r3
   12338:	cmpeq	r4, r2
   1233c:	bcs	1234c <__assert_fail@plt+0xf68>
   12340:	mov	r0, #0
   12344:	add	sp, sp, #32
   12348:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1234c:	ldrb	r1, [r1]
   12350:	b	122d4 <__assert_fail@plt+0xef0>
   12354:	str	r4, [sp]
   12358:	mov	r2, r8
   1235c:	mov	r1, r7
   12360:	ldr	r3, [pc, #12]	; 12374 <__assert_fail@plt+0xf90>
   12364:	bl	1edd4 <__assert_fail@plt+0xd9f0>
   12368:	andeq	r0, r2, r8, asr #19
   1236c:	strdeq	r3, [r3], -r0
   12370:	andeq	r3, r3, r0, asr #2
   12374:	andeq	r0, r2, r8, lsr #14
   12378:	push	{r4, lr}
   1237c:	mov	r4, r0
   12380:	bl	11294 <strlen@plt>
   12384:	cmp	r0, #0
   12388:	blt	123a0 <__assert_fail@plt+0xfbc>
   1238c:	ldr	r2, [pc, #16]	; 123a4 <__assert_fail@plt+0xfc0>
   12390:	ldr	r3, [pc, #16]	; 123a8 <__assert_fail@plt+0xfc4>
   12394:	str	r0, [r2, #24]
   12398:	str	r4, [r3, #8]
   1239c:	pop	{r4, pc}
   123a0:	bl	12244 <__assert_fail@plt+0xe60>
   123a4:	strdeq	r3, [r3], -r0
   123a8:	andeq	r3, r3, r0, asr #2
   123ac:	push	{r4, r6, r7, lr}
   123b0:	mov	r2, #5
   123b4:	sub	sp, sp, #24
   123b8:	mov	r4, r0
   123bc:	ldr	r1, [pc, #80]	; 12414 <__assert_fail@plt+0x1030>
   123c0:	mov	r0, #0
   123c4:	bl	11168 <dcgettext@plt>
   123c8:	mvn	r6, #-2147483648	; 0x80000000
   123cc:	ldr	r2, [pc, #68]	; 12418 <__assert_fail@plt+0x1034>
   123d0:	mov	r7, #0
   123d4:	mov	r3, #0
   123d8:	str	r2, [sp, #8]
   123dc:	str	r3, [sp, #16]
   123e0:	strd	r6, [sp]
   123e4:	mov	r2, #1
   123e8:	mov	r3, #0
   123ec:	str	r0, [sp, #12]
   123f0:	mov	r0, r4
   123f4:	bl	1d818 <__assert_fail@plt+0xc434>
   123f8:	ldr	r3, [pc, #28]	; 1241c <__assert_fail@plt+0x1038>
   123fc:	ldr	r2, [pc, #28]	; 12420 <__assert_fail@plt+0x103c>
   12400:	mov	r1, #1
   12404:	strb	r1, [r2, #28]
   12408:	str	r0, [r3, #12]
   1240c:	add	sp, sp, #24
   12410:	pop	{r4, r6, r7, pc}
   12414:	andeq	r0, r2, ip, asr r9
   12418:	andeq	r0, r2, r8, asr #19
   1241c:	andeq	r3, r3, r0, asr #2
   12420:	strdeq	r3, [r3], -r0
   12424:	push	{r4, r5, r6, r7, r8, r9, lr}
   12428:	mov	r8, r1
   1242c:	sub	sp, sp, #196	; 0xc4
   12430:	ldr	r1, [pc, #384]	; 125b8 <__assert_fail@plt+0x11d4>
   12434:	mov	r5, r0
   12438:	bl	110c0 <strcmp@plt>
   1243c:	cmp	r0, #0
   12440:	beq	1253c <__assert_fail@plt+0x1158>
   12444:	cmp	r8, #0
   12448:	blt	12464 <__assert_fail@plt+0x1080>
   1244c:	add	r2, sp, #88	; 0x58
   12450:	mov	r1, r8
   12454:	mov	r0, #3
   12458:	bl	111bc <__fxstat64@plt>
   1245c:	cmp	r0, #0
   12460:	beq	12544 <__assert_fail@plt+0x1160>
   12464:	ldr	r4, [pc, #336]	; 125bc <__assert_fail@plt+0x11d8>
   12468:	add	r6, r4, #32
   1246c:	ldr	r3, [r4, #32]
   12470:	cmp	r3, #0
   12474:	beq	12570 <__assert_fail@plt+0x118c>
   12478:	ldm	r6, {r0, r1}
   1247c:	add	r3, sp, #12
   12480:	stm	r3, {r0, r1}
   12484:	ldr	r7, [sp, #16]
   12488:	mov	r1, r3
   1248c:	add	r2, sp, #44	; 0x2c
   12490:	ldr	r0, [r4, #40]	; 0x28
   12494:	bl	1c3a8 <__assert_fail@plt+0xafc4>
   12498:	cmp	r0, #0
   1249c:	beq	1257c <__assert_fail@plt+0x1198>
   124a0:	ldr	r3, [r4, #40]	; 0x28
   124a4:	ldr	r2, [r4, #44]	; 0x2c
   124a8:	mvn	r1, #0
   124ac:	stm	sp, {r3, r7}
   124b0:	mov	r0, #0
   124b4:	add	r3, sp, #44	; 0x2c
   124b8:	bl	17f38 <__assert_fail@plt+0x6b54>
   124bc:	add	r9, r0, #1
   124c0:	mov	r0, r9
   124c4:	bl	1d048 <__assert_fail@plt+0xbc64>
   124c8:	ldr	ip, [r4, #40]	; 0x28
   124cc:	ldr	r2, [r4, #44]	; 0x2c
   124d0:	mov	r1, r9
   124d4:	str	r7, [sp, #4]
   124d8:	add	r3, sp, #44	; 0x2c
   124dc:	str	ip, [sp]
   124e0:	mov	r6, r0
   124e4:	bl	17f38 <__assert_fail@plt+0x6b54>
   124e8:	ldr	r0, [r4, #48]	; 0x30
   124ec:	bl	15da0 <__assert_fail@plt+0x49bc>
   124f0:	ldr	r3, [r4, #52]	; 0x34
   124f4:	str	r6, [r4, #48]	; 0x30
   124f8:	cmp	r3, #0
   124fc:	movne	r5, r3
   12500:	beq	12560 <__assert_fail@plt+0x117c>
   12504:	ldr	r3, [pc, #180]	; 125c0 <__assert_fail@plt+0x11dc>
   12508:	mov	r0, r6
   1250c:	mov	r1, #0
   12510:	str	r5, [r4, #56]	; 0x38
   12514:	ldr	r5, [r3, #16]
   12518:	bl	16248 <__assert_fail@plt+0x4e64>
   1251c:	mov	r1, #0
   12520:	sub	r5, r5, r0
   12524:	ldr	r0, [r4, #56]	; 0x38
   12528:	bl	16248 <__assert_fail@plt+0x4e64>
   1252c:	sub	r0, r5, r0
   12530:	str	r0, [r4, #60]	; 0x3c
   12534:	add	sp, sp, #196	; 0xc4
   12538:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1253c:	mvn	r8, #0
   12540:	b	12464 <__assert_fail@plt+0x1080>
   12544:	ldr	r3, [sp, #168]	; 0xa8
   12548:	ldr	r7, [sp, #172]	; 0xac
   1254c:	str	r3, [sp, #12]
   12550:	str	r7, [sp, #16]
   12554:	ldr	r4, [pc, #96]	; 125bc <__assert_fail@plt+0x11d8>
   12558:	add	r3, sp, #12
   1255c:	b	12488 <__assert_fail@plt+0x10a4>
   12560:	ldr	r3, [pc, #92]	; 125c4 <__assert_fail@plt+0x11e0>
   12564:	cmp	r8, #0
   12568:	movlt	r5, r3
   1256c:	b	12504 <__assert_fail@plt+0x1120>
   12570:	mov	r0, r6
   12574:	bl	15e98 <__assert_fail@plt+0x4ab4>
   12578:	b	12478 <__assert_fail@plt+0x1094>
   1257c:	mov	r0, #33	; 0x21
   12580:	bl	1d048 <__assert_fail@plt+0xbc64>
   12584:	add	r2, sp, #20
   12588:	mov	r6, r0
   1258c:	ldr	r0, [sp, #12]
   12590:	asr	r1, r0, #31
   12594:	bl	15f2c <__assert_fail@plt+0x4b48>
   12598:	str	r7, [sp, #4]
   1259c:	ldr	r3, [pc, #36]	; 125c8 <__assert_fail@plt+0x11e4>
   125a0:	mov	r2, #33	; 0x21
   125a4:	mov	r1, #1
   125a8:	str	r0, [sp]
   125ac:	mov	r0, r6
   125b0:	bl	112d0 <__sprintf_chk@plt>
   125b4:	b	124e8 <__assert_fail@plt+0x1104>
   125b8:	andeq	r0, r2, r8, ror r9
   125bc:	strdeq	r3, [r3], -r0
   125c0:	andeq	r3, r3, r0, asr #2
   125c4:	andeq	r0, r2, r8, asr #19
   125c8:	andeq	r0, r2, ip, ror r9
   125cc:	ldr	r3, [r0, #8]
   125d0:	cmp	r3, #3
   125d4:	bxeq	lr
   125d8:	push	{r4, r5, r6, lr}
   125dc:	mov	r4, r0
   125e0:	bl	112c4 <__errno_location@plt>
   125e4:	ldr	r3, [r4]
   125e8:	ldr	r5, [r0]
   125ec:	mov	r6, r0
   125f0:	mov	r0, r3
   125f4:	ldr	r3, [r3]
   125f8:	tst	r3, #32
   125fc:	moveq	r5, #0
   12600:	bl	11300 <fileno@plt>
   12604:	cmp	r0, #0
   12608:	ldr	r0, [r4]
   1260c:	bne	12670 <__assert_fail@plt+0x128c>
   12610:	bl	11384 <clearerr_unlocked@plt>
   12614:	cmp	r5, #0
   12618:	bne	1269c <__assert_fail@plt+0x12b8>
   1261c:	ldr	ip, [pc, #156]	; 126c0 <__assert_fail@plt+0x12dc>
   12620:	ldrb	r3, [ip, #64]	; 0x40
   12624:	cmp	r3, #0
   12628:	bne	1268c <__assert_fail@plt+0x12a8>
   1262c:	ldr	r2, [pc, #144]	; 126c4 <__assert_fail@plt+0x12e0>
   12630:	ldr	r3, [ip, #68]	; 0x44
   12634:	ldr	r2, [r2, #12]
   12638:	cmp	r2, #0
   1263c:	beq	12660 <__assert_fail@plt+0x127c>
   12640:	mov	r0, #3
   12644:	ldr	r1, [r3, #24]
   12648:	str	r0, [r3, #8]
   1264c:	cmp	r1, #0
   12650:	streq	r1, [r3, #28]
   12654:	subs	r2, r2, #1
   12658:	add	r3, r3, #40	; 0x28
   1265c:	bne	12644 <__assert_fail@plt+0x1260>
   12660:	ldr	r3, [ip, #72]	; 0x48
   12664:	sub	r3, r3, #1
   12668:	str	r3, [ip, #72]	; 0x48
   1266c:	pop	{r4, r5, r6, pc}
   12670:	bl	15c08 <__assert_fail@plt+0x4824>
   12674:	cmp	r0, #0
   12678:	beq	12614 <__assert_fail@plt+0x1230>
   1267c:	cmp	r5, #0
   12680:	bne	1269c <__assert_fail@plt+0x12b8>
   12684:	ldr	r5, [r6]
   12688:	b	12614 <__assert_fail@plt+0x1230>
   1268c:	mov	r3, #3
   12690:	str	r5, [r4, #28]
   12694:	str	r3, [r4, #8]
   12698:	b	12660 <__assert_fail@plt+0x127c>
   1269c:	ldr	r2, [r4, #4]
   126a0:	mov	r1, #3
   126a4:	mov	r0, #0
   126a8:	bl	1af54 <__assert_fail@plt+0x9b70>
   126ac:	mov	r1, r5
   126b0:	ldr	r2, [pc, #16]	; 126c8 <__assert_fail@plt+0x12e4>
   126b4:	mov	r3, r0
   126b8:	mov	r0, #1
   126bc:	bl	11204 <error@plt>
   126c0:	strdeq	r3, [r3], -r0
   126c4:	andeq	r3, r3, r0, asr #2
   126c8:	andeq	r1, r2, r8, lsl #30
   126cc:	ldr	r3, [pc, #388]	; 12858 <__assert_fail@plt+0x1474>
   126d0:	push	{r4, r5, r6, r7, r8, lr}
   126d4:	mov	r6, r0
   126d8:	ldrb	r2, [r3, #20]
   126dc:	ldr	r5, [pc, #376]	; 1285c <__assert_fail@plt+0x1478>
   126e0:	sub	sp, sp, #16
   126e4:	cmp	r2, r0
   126e8:	ldr	r7, [r5, #76]	; 0x4c
   126ec:	ldreq	r4, [r3, #24]
   126f0:	beq	12778 <__assert_fail@plt+0x1394>
   126f4:	cmp	r0, #9
   126f8:	beq	12774 <__assert_fail@plt+0x1390>
   126fc:	bl	1127c <__ctype_b_loc@plt>
   12700:	lsl	r3, r6, #1
   12704:	ldr	r2, [r0]
   12708:	ldrh	r3, [r2, r3]
   1270c:	tst	r3, #16384	; 0x4000
   12710:	beq	12734 <__assert_fail@plt+0x1350>
   12714:	mov	r0, #1
   12718:	ldr	r8, [r5, #80]	; 0x50
   1271c:	mov	r4, r0
   12720:	strb	r6, [r7]
   12724:	add	r4, r8, r4
   12728:	str	r4, [r5, #80]	; 0x50
   1272c:	add	sp, sp, #16
   12730:	pop	{r4, r5, r6, r7, r8, pc}
   12734:	ldrb	r3, [r5, #85]	; 0x55
   12738:	cmp	r3, #0
   1273c:	bne	127ec <__assert_fail@plt+0x1408>
   12740:	ldrb	r4, [r5, #86]	; 0x56
   12744:	cmp	r4, #0
   12748:	beq	12834 <__assert_fail@plt+0x1450>
   1274c:	tst	r6, #128	; 0x80
   12750:	bne	127ec <__assert_fail@plt+0x1408>
   12754:	eor	r6, r6, #64	; 0x40
   12758:	mov	r3, #94	; 0x5e
   1275c:	mov	r0, #2
   12760:	strb	r6, [r7, #1]
   12764:	strb	r3, [r7]
   12768:	mov	r4, r0
   1276c:	ldr	r8, [r5, #80]	; 0x50
   12770:	b	12724 <__assert_fail@plt+0x1340>
   12774:	mov	r4, #8
   12778:	ldr	r8, [r5, #80]	; 0x50
   1277c:	mov	r1, r4
   12780:	mov	r0, r8
   12784:	bl	20474 <__assert_fail@plt+0xf090>
   12788:	ldrb	r3, [r5, #84]	; 0x54
   1278c:	cmp	r3, #0
   12790:	sub	r4, r4, r1
   12794:	beq	127e0 <__assert_fail@plt+0x13fc>
   12798:	cmp	r4, #0
   1279c:	beq	12850 <__assert_fail@plt+0x146c>
   127a0:	mov	r0, r7
   127a4:	mov	r2, r4
   127a8:	mov	r1, #32
   127ac:	bl	112e8 <memset@plt>
   127b0:	mov	r0, r4
   127b4:	cmp	r4, #0
   127b8:	bge	12724 <__assert_fail@plt+0x1340>
   127bc:	cmp	r8, #0
   127c0:	moveq	r0, r8
   127c4:	beq	1272c <__assert_fail@plt+0x1348>
   127c8:	rsb	r3, r4, #0
   127cc:	cmp	r3, r8
   127d0:	movge	r3, #0
   127d4:	strge	r3, [r5, #80]	; 0x50
   127d8:	blt	12724 <__assert_fail@plt+0x1340>
   127dc:	b	1272c <__assert_fail@plt+0x1348>
   127e0:	strb	r6, [r7]
   127e4:	mov	r0, #1
   127e8:	b	127b4 <__assert_fail@plt+0x13d0>
   127ec:	mov	r3, #92	; 0x5c
   127f0:	strb	r3, [r7]
   127f4:	mov	r2, #4
   127f8:	ldr	r3, [pc, #96]	; 12860 <__assert_fail@plt+0x147c>
   127fc:	str	r6, [sp]
   12800:	mov	r1, #1
   12804:	add	r0, sp, #12
   12808:	bl	112d0 <__sprintf_chk@plt>
   1280c:	ldrb	r3, [sp, #12]
   12810:	mov	r0, #4
   12814:	mov	r4, r0
   12818:	strb	r3, [r7, #1]
   1281c:	ldrb	r3, [sp, #13]
   12820:	ldr	r8, [r5, #80]	; 0x50
   12824:	strb	r3, [r7, #2]
   12828:	ldrb	r3, [sp, #14]
   1282c:	strb	r3, [r7, #3]
   12830:	b	12724 <__assert_fail@plt+0x1340>
   12834:	cmp	r6, #8
   12838:	strb	r6, [r7]
   1283c:	ldr	r8, [r5, #80]	; 0x50
   12840:	mov	r0, #1
   12844:	mvneq	r4, #0
   12848:	bne	12724 <__assert_fail@plt+0x1340>
   1284c:	b	127bc <__assert_fail@plt+0x13d8>
   12850:	mov	r0, r4
   12854:	b	12724 <__assert_fail@plt+0x1340>
   12858:	andeq	r3, r3, r0, asr #2
   1285c:	strdeq	r3, [r3], -r0
   12860:	andeq	r0, r2, r4, lsl #19
   12864:	push	{r4, r5, r6, r7, r8, lr}
   12868:	sub	sp, sp, #8
   1286c:	ldr	r6, [pc, #292]	; 12998 <__assert_fail@plt+0x15b4>
   12870:	ldr	r8, [pc, #292]	; 1299c <__assert_fail@plt+0x15b8>
   12874:	mov	r5, r0
   12878:	ldr	r2, [r6, #92]	; 0x5c
   1287c:	ldr	r3, [r8, #28]
   12880:	str	r2, [sp, #4]
   12884:	str	r3, [sp]
   12888:	ldr	r0, [r6, #88]	; 0x58
   1288c:	ldr	r3, [pc, #268]	; 129a0 <__assert_fail@plt+0x15bc>
   12890:	mvn	r2, #0
   12894:	mov	r1, #1
   12898:	bl	112d0 <__sprintf_chk@plt>
   1289c:	ldr	r7, [r8, #28]
   128a0:	ldr	r3, [r6, #92]	; 0x5c
   128a4:	ldr	r4, [r6, #88]	; 0x58
   128a8:	add	r3, r3, #1
   128ac:	cmp	r7, #0
   128b0:	str	r3, [r6, #92]	; 0x5c
   128b4:	sub	r0, r0, r7
   128b8:	add	r4, r4, r0
   128bc:	addgt	r7, r4, r7
   128c0:	ble	128d8 <__assert_fail@plt+0x14f4>
   128c4:	ldrb	r0, [r4], #1
   128c8:	ldr	r3, [r5]
   128cc:	blx	r3
   128d0:	cmp	r4, r7
   128d4:	bne	128c4 <__assert_fail@plt+0x14e0>
   128d8:	ldr	r3, [r8, #12]
   128dc:	cmp	r3, #1
   128e0:	ble	1295c <__assert_fail@plt+0x1578>
   128e4:	ldrb	r0, [r8, #32]
   128e8:	cmp	r0, #9
   128ec:	beq	12924 <__assert_fail@plt+0x1540>
   128f0:	ldr	r3, [r5]
   128f4:	blx	r3
   128f8:	ldrb	r3, [r6, #104]	; 0x68
   128fc:	cmp	r3, #0
   12900:	beq	1291c <__assert_fail@plt+0x1538>
   12904:	ldrb	r3, [r6, #64]	; 0x40
   12908:	cmp	r3, #0
   1290c:	ldreq	r3, [r6, #80]	; 0x50
   12910:	ldreq	r2, [r6, #96]	; 0x60
   12914:	addeq	r3, r3, r2
   12918:	streq	r3, [r6, #80]	; 0x50
   1291c:	add	sp, sp, #8
   12920:	pop	{r4, r5, r6, r7, r8, pc}
   12924:	ldr	r3, [r8, #28]
   12928:	ldr	r4, [r6, #96]	; 0x60
   1292c:	sub	r4, r4, r3
   12930:	cmp	r4, #0
   12934:	sub	r4, r4, #1
   12938:	ble	128f8 <__assert_fail@plt+0x1514>
   1293c:	mov	r7, #32
   12940:	sub	r4, r4, #1
   12944:	ldr	r3, [r5]
   12948:	mov	r0, r7
   1294c:	blx	r3
   12950:	cmn	r4, #1
   12954:	bne	12940 <__assert_fail@plt+0x155c>
   12958:	b	128f8 <__assert_fail@plt+0x1514>
   1295c:	ldr	r3, [r5]
   12960:	ldrb	r0, [r8, #32]
   12964:	blx	r3
   12968:	ldrb	r3, [r8, #32]
   1296c:	cmp	r3, #9
   12970:	bne	128f8 <__assert_fail@plt+0x1514>
   12974:	ldr	r5, [r6, #100]	; 0x64
   12978:	ldr	r4, [r8, #36]	; 0x24
   1297c:	mov	r0, r5
   12980:	mov	r1, r4
   12984:	bl	20474 <__assert_fail@plt+0xf090>
   12988:	sub	r3, r4, r1
   1298c:	add	r3, r3, r5
   12990:	str	r3, [r6, #100]	; 0x64
   12994:	b	128f8 <__assert_fail@plt+0x1514>
   12998:	strdeq	r3, [r3], -r0
   1299c:	andeq	r3, r3, r0, asr #2
   129a0:	andeq	r0, r2, ip, lsl #19
   129a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129a8:	mov	r7, r0
   129ac:	ldr	r4, [r0]
   129b0:	mov	r6, r1
   129b4:	ldr	r3, [r4, #4]
   129b8:	ldr	r2, [r4, #8]
   129bc:	cmp	r3, r2
   129c0:	bcs	12bc0 <__assert_fail@plt+0x17dc>
   129c4:	add	r2, r3, #1
   129c8:	str	r2, [r4, #4]
   129cc:	ldrb	r0, [r3]
   129d0:	cmp	r0, #12
   129d4:	movne	r5, #0
   129d8:	strbne	r5, [r7, #37]	; 0x25
   129dc:	beq	12a74 <__assert_fail@plt+0x1690>
   129e0:	ldr	r8, [pc, #552]	; 12c10 <__assert_fail@plt+0x182c>
   129e4:	ldrb	r3, [r8, #105]	; 0x69
   129e8:	cmp	r3, #0
   129ec:	bne	12a90 <__assert_fail@plt+0x16ac>
   129f0:	cmp	r0, #10
   129f4:	beq	12a34 <__assert_fail@plt+0x1650>
   129f8:	cmp	r0, #12
   129fc:	beq	12aac <__assert_fail@plt+0x16c8>
   12a00:	cmn	r0, #1
   12a04:	beq	12a9c <__assert_fail@plt+0x16b8>
   12a08:	ldr	r3, [r4, #4]
   12a0c:	ldr	r2, [r4, #8]
   12a10:	add	r1, r3, #1
   12a14:	cmp	r3, r2
   12a18:	strcc	r1, [r4, #4]
   12a1c:	ldrbcc	r0, [r3]
   12a20:	bcc	129f0 <__assert_fail@plt+0x160c>
   12a24:	mov	r0, r4
   12a28:	bl	1133c <__uflow@plt>
   12a2c:	cmp	r0, #10
   12a30:	bne	129f8 <__assert_fail@plt+0x1614>
   12a34:	ldr	r9, [pc, #472]	; 12c14 <__assert_fail@plt+0x1830>
   12a38:	ldrb	r3, [r9, #41]	; 0x29
   12a3c:	cmp	r3, #0
   12a40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a44:	ldrb	r3, [r8, #64]	; 0x40
   12a48:	eor	r3, r3, #1
   12a4c:	cmp	r6, #1
   12a50:	movne	r6, r3
   12a54:	orreq	r6, r3, #1
   12a58:	cmp	r6, #0
   12a5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a60:	cmp	r5, #0
   12a64:	ldreq	r3, [r9, #44]	; 0x2c
   12a68:	addeq	r3, r3, #1
   12a6c:	streq	r3, [r9, #44]	; 0x2c
   12a70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a74:	ldrb	r3, [r7, #37]	; 0x25
   12a78:	cmp	r3, #0
   12a7c:	bne	12af4 <__assert_fail@plt+0x1710>
   12a80:	ldr	r8, [pc, #392]	; 12c10 <__assert_fail@plt+0x182c>
   12a84:	ldrb	r5, [r8, #105]	; 0x69
   12a88:	cmp	r5, #0
   12a8c:	beq	12b30 <__assert_fail@plt+0x174c>
   12a90:	mov	r3, #1
   12a94:	strb	r3, [r7, #37]	; 0x25
   12a98:	b	129f0 <__assert_fail@plt+0x160c>
   12a9c:	mov	r0, r7
   12aa0:	bl	125cc <__assert_fail@plt+0x11e8>
   12aa4:	ldr	r9, [pc, #360]	; 12c14 <__assert_fail@plt+0x1830>
   12aa8:	b	12a38 <__assert_fail@plt+0x1654>
   12aac:	ldrb	r3, [r8, #105]	; 0x69
   12ab0:	cmp	r3, #0
   12ab4:	beq	12b34 <__assert_fail@plt+0x1750>
   12ab8:	ldrb	r1, [r8, #64]	; 0x40
   12abc:	ldr	r9, [pc, #336]	; 12c14 <__assert_fail@plt+0x1830>
   12ac0:	cmp	r1, #0
   12ac4:	movne	r3, #0
   12ac8:	strbne	r3, [r7, #37]	; 0x25
   12acc:	bne	12b38 <__assert_fail@plt+0x1754>
   12ad0:	ldr	r3, [r9, #12]
   12ad4:	ldr	r2, [r8, #68]	; 0x44
   12ad8:	cmp	r3, #0
   12adc:	beq	12b38 <__assert_fail@plt+0x1754>
   12ae0:	subs	r3, r3, #1
   12ae4:	strb	r1, [r2, #37]	; 0x25
   12ae8:	add	r2, r2, #40	; 0x28
   12aec:	bne	12ae0 <__assert_fail@plt+0x16fc>
   12af0:	b	12b38 <__assert_fail@plt+0x1754>
   12af4:	ldr	r3, [r4, #4]
   12af8:	ldr	r2, [r4, #8]
   12afc:	cmp	r3, r2
   12b00:	bcs	12bf8 <__assert_fail@plt+0x1814>
   12b04:	add	r2, r3, #1
   12b08:	str	r2, [r4, #4]
   12b0c:	ldrb	r0, [r3]
   12b10:	cmp	r0, #10
   12b14:	beq	12bcc <__assert_fail@plt+0x17e8>
   12b18:	mov	r3, #0
   12b1c:	sub	r5, r0, #12
   12b20:	strb	r3, [r7, #37]	; 0x25
   12b24:	clz	r5, r5
   12b28:	lsr	r5, r5, #5
   12b2c:	b	129e0 <__assert_fail@plt+0x15fc>
   12b30:	mov	r5, #1
   12b34:	ldr	r9, [pc, #216]	; 12c14 <__assert_fail@plt+0x1830>
   12b38:	ldr	r3, [r4, #4]
   12b3c:	ldr	r2, [r4, #8]
   12b40:	cmp	r3, r2
   12b44:	bcs	12bec <__assert_fail@plt+0x1808>
   12b48:	add	r2, r3, #1
   12b4c:	str	r2, [r4, #4]
   12b50:	ldrb	r0, [r3]
   12b54:	cmp	r0, #10
   12b58:	beq	12b64 <__assert_fail@plt+0x1780>
   12b5c:	mov	r1, r4
   12b60:	bl	112b8 <ungetc@plt>
   12b64:	ldrb	r3, [r8, #64]	; 0x40
   12b68:	cmp	r3, #0
   12b6c:	movne	r3, #2
   12b70:	strne	r3, [r7, #8]
   12b74:	bne	12ba8 <__assert_fail@plt+0x17c4>
   12b78:	ldr	r3, [r9, #12]
   12b7c:	ldr	r2, [r8, #68]	; 0x44
   12b80:	cmp	r3, #0
   12b84:	beq	12ba8 <__assert_fail@plt+0x17c4>
   12b88:	ldrb	r1, [r9, #40]	; 0x28
   12b8c:	cmp	r1, #0
   12b90:	movne	r1, #1
   12b94:	moveq	r1, #2
   12b98:	subs	r3, r3, #1
   12b9c:	str	r1, [r2, #8]
   12ba0:	add	r2, r2, #40	; 0x28
   12ba4:	bne	12b98 <__assert_fail@plt+0x17b4>
   12ba8:	ldr	r3, [r8, #72]	; 0x48
   12bac:	mov	r2, #0
   12bb0:	sub	r3, r3, #1
   12bb4:	str	r3, [r8, #72]	; 0x48
   12bb8:	str	r2, [r7, #28]
   12bbc:	b	12a38 <__assert_fail@plt+0x1654>
   12bc0:	mov	r0, r4
   12bc4:	bl	1133c <__uflow@plt>
   12bc8:	b	129d0 <__assert_fail@plt+0x15ec>
   12bcc:	ldr	r3, [r4, #4]
   12bd0:	ldr	r2, [r4, #8]
   12bd4:	cmp	r3, r2
   12bd8:	bcs	12c04 <__assert_fail@plt+0x1820>
   12bdc:	add	r2, r3, #1
   12be0:	str	r2, [r4, #4]
   12be4:	ldrb	r0, [r3]
   12be8:	b	12b18 <__assert_fail@plt+0x1734>
   12bec:	mov	r0, r4
   12bf0:	bl	1133c <__uflow@plt>
   12bf4:	b	12b54 <__assert_fail@plt+0x1770>
   12bf8:	mov	r0, r4
   12bfc:	bl	1133c <__uflow@plt>
   12c00:	b	12b10 <__assert_fail@plt+0x172c>
   12c04:	mov	r0, r4
   12c08:	bl	1133c <__uflow@plt>
   12c0c:	b	12b18 <__assert_fail@plt+0x1734>
   12c10:	strdeq	r3, [r3], -r0
   12c14:	andeq	r3, r3, r0, asr #2
   12c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c1c:	sub	sp, sp, #20
   12c20:	ldr	r8, [pc, #824]	; 12f60 <__assert_fail@plt+0x1b7c>
   12c24:	ldr	r3, [r8, #108]	; 0x6c
   12c28:	cmp	r3, #0
   12c2c:	ble	12e88 <__assert_fail@plt+0x1aa4>
   12c30:	ldr	r6, [pc, #812]	; 12f64 <__assert_fail@plt+0x1b80>
   12c34:	ldr	r3, [r8, #24]
   12c38:	ldr	r2, [r8, #112]	; 0x70
   12c3c:	ldr	r5, [pc, #804]	; 12f68 <__assert_fail@plt+0x1b84>
   12c40:	str	r3, [sp, #12]
   12c44:	mov	r7, #32
   12c48:	ldr	r3, [r6, #8]
   12c4c:	str	r3, [sp, #8]
   12c50:	ldr	r3, [sp, #12]
   12c54:	str	r3, [sp, #4]
   12c58:	ldr	r3, [sp, #8]
   12c5c:	add	r9, r3, #1
   12c60:	ldr	r3, [sp, #4]
   12c64:	cmp	r3, #0
   12c68:	ble	12d88 <__assert_fail@plt+0x19a4>
   12c6c:	ldrb	r1, [r9, #-1]
   12c70:	cmp	r1, #32
   12c74:	addeq	r2, r2, #1
   12c78:	streq	r2, [r8, #112]	; 0x70
   12c7c:	beq	12d74 <__assert_fail@plt+0x1990>
   12c80:	cmp	r2, #0
   12c84:	ble	12d40 <__assert_fail@plt+0x195c>
   12c88:	ldr	fp, [r8, #100]	; 0x64
   12c8c:	add	sl, fp, r2
   12c90:	b	12c98 <__assert_fail@plt+0x18b4>
   12c94:	mov	fp, r4
   12c98:	sub	r3, sl, fp
   12c9c:	cmp	r3, #1
   12ca0:	mov	r0, fp
   12ca4:	ble	12cf8 <__assert_fail@plt+0x1914>
   12ca8:	ldr	r4, [r6, #36]	; 0x24
   12cac:	mov	r1, r4
   12cb0:	bl	20474 <__assert_fail@plt+0xf090>
   12cb4:	sub	r4, r4, r1
   12cb8:	add	r4, r4, fp
   12cbc:	cmp	sl, r4
   12cc0:	blt	12cf8 <__assert_fail@plt+0x1914>
   12cc4:	ldr	r0, [r5]
   12cc8:	ldrb	r1, [r6, #48]	; 0x30
   12ccc:	ldr	r3, [r0, #20]
   12cd0:	ldr	r2, [r0, #24]
   12cd4:	add	ip, r3, #1
   12cd8:	cmp	r3, r2
   12cdc:	strcc	ip, [r0, #20]
   12ce0:	strbcc	r1, [r3]
   12ce4:	bcc	12c94 <__assert_fail@plt+0x18b0>
   12ce8:	bl	11348 <__overflow@plt>
   12cec:	b	12c94 <__assert_fail@plt+0x18b0>
   12cf0:	mov	r1, r7
   12cf4:	bl	11348 <__overflow@plt>
   12cf8:	add	fp, fp, #1
   12cfc:	cmp	sl, fp
   12d00:	blt	12d30 <__assert_fail@plt+0x194c>
   12d04:	ldr	r0, [r5]
   12d08:	ldr	r3, [r0, #20]
   12d0c:	ldr	r2, [r0, #24]
   12d10:	add	r1, r3, #1
   12d14:	cmp	r3, r2
   12d18:	strcc	r1, [r0, #20]
   12d1c:	strbcc	r7, [r3]
   12d20:	bcs	12cf0 <__assert_fail@plt+0x190c>
   12d24:	add	fp, fp, #1
   12d28:	cmp	sl, fp
   12d2c:	bge	12d04 <__assert_fail@plt+0x1920>
   12d30:	ldrb	r1, [r9, #-1]
   12d34:	mov	r3, #0
   12d38:	str	sl, [r8, #100]	; 0x64
   12d3c:	str	r3, [r8, #112]	; 0x70
   12d40:	ldr	r0, [r5]
   12d44:	ldr	r3, [r0, #20]
   12d48:	ldr	r2, [r0, #24]
   12d4c:	cmp	r3, r2
   12d50:	addcc	r2, r3, #1
   12d54:	strcc	r2, [r0, #20]
   12d58:	strbcc	r1, [r3]
   12d5c:	bcs	12e80 <__assert_fail@plt+0x1a9c>
   12d60:	ldr	r3, [r8, #100]	; 0x64
   12d64:	ldr	r2, [r8, #112]	; 0x70
   12d68:	add	r3, r3, #1
   12d6c:	str	r3, [r8, #100]	; 0x64
   12d70:	ldr	r3, [sp, #4]
   12d74:	sub	r3, r3, #1
   12d78:	cmp	r3, #0
   12d7c:	str	r3, [sp, #4]
   12d80:	add	r9, r9, #1
   12d84:	bgt	12c6c <__assert_fail@plt+0x1888>
   12d88:	ldr	r1, [sp, #12]
   12d8c:	cmp	r2, #0
   12d90:	sub	fp, r1, #1
   12d94:	bic	r3, r1, r1, asr #31
   12d98:	ldr	r1, [sp, #8]
   12d9c:	add	r1, r1, r3
   12da0:	sub	r3, fp, r3
   12da4:	str	r1, [sp, #8]
   12da8:	str	r3, [sp, #12]
   12dac:	ble	12e64 <__assert_fail@plt+0x1a80>
   12db0:	ldr	r9, [r8, #100]	; 0x64
   12db4:	add	sl, r9, r2
   12db8:	b	12dc0 <__assert_fail@plt+0x19dc>
   12dbc:	mov	r9, r4
   12dc0:	sub	r3, sl, r9
   12dc4:	cmp	r3, #1
   12dc8:	mov	r0, r9
   12dcc:	ble	12e20 <__assert_fail@plt+0x1a3c>
   12dd0:	ldr	r4, [r6, #36]	; 0x24
   12dd4:	mov	r1, r4
   12dd8:	bl	20474 <__assert_fail@plt+0xf090>
   12ddc:	sub	r4, r4, r1
   12de0:	add	r4, r4, r9
   12de4:	cmp	sl, r4
   12de8:	blt	12e20 <__assert_fail@plt+0x1a3c>
   12dec:	ldr	r0, [r5]
   12df0:	ldrb	r1, [r6, #48]	; 0x30
   12df4:	ldr	r3, [r0, #20]
   12df8:	ldr	r2, [r0, #24]
   12dfc:	add	ip, r3, #1
   12e00:	cmp	r3, r2
   12e04:	strcc	ip, [r0, #20]
   12e08:	strbcc	r1, [r3]
   12e0c:	bcc	12dbc <__assert_fail@plt+0x19d8>
   12e10:	bl	11348 <__overflow@plt>
   12e14:	b	12dbc <__assert_fail@plt+0x19d8>
   12e18:	mov	r1, r7
   12e1c:	bl	11348 <__overflow@plt>
   12e20:	add	r9, r9, #1
   12e24:	cmp	sl, r9
   12e28:	blt	12e58 <__assert_fail@plt+0x1a74>
   12e2c:	ldr	r0, [r5]
   12e30:	ldr	r3, [r0, #20]
   12e34:	ldr	r2, [r0, #24]
   12e38:	add	r1, r3, #1
   12e3c:	cmp	r3, r2
   12e40:	strcc	r1, [r0, #20]
   12e44:	strbcc	r7, [r3]
   12e48:	bcs	12e18 <__assert_fail@plt+0x1a34>
   12e4c:	add	r9, r9, #1
   12e50:	cmp	sl, r9
   12e54:	bge	12e2c <__assert_fail@plt+0x1a48>
   12e58:	mov	r2, #0
   12e5c:	str	sl, [r8, #100]	; 0x64
   12e60:	str	r2, [r8, #112]	; 0x70
   12e64:	ldr	r3, [r8, #108]	; 0x6c
   12e68:	sub	r3, r3, #1
   12e6c:	cmp	r3, #0
   12e70:	str	r3, [r8, #108]	; 0x6c
   12e74:	bgt	12c50 <__assert_fail@plt+0x186c>
   12e78:	add	sp, sp, #20
   12e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e80:	bl	11348 <__overflow@plt>
   12e84:	b	12d60 <__assert_fail@plt+0x197c>
   12e88:	ldr	r6, [r8, #112]	; 0x70
   12e8c:	cmp	r6, #0
   12e90:	ble	12e78 <__assert_fail@plt+0x1a94>
   12e94:	ldr	r4, [r8, #100]	; 0x64
   12e98:	ldr	r7, [pc, #196]	; 12f64 <__assert_fail@plt+0x1b80>
   12e9c:	add	r6, r6, r4
   12ea0:	ldr	r9, [pc, #192]	; 12f68 <__assert_fail@plt+0x1b84>
   12ea4:	b	12eac <__assert_fail@plt+0x1ac8>
   12ea8:	mov	r4, r5
   12eac:	sub	r3, r6, r4
   12eb0:	cmp	r3, #1
   12eb4:	mov	r0, r4
   12eb8:	ble	12f04 <__assert_fail@plt+0x1b20>
   12ebc:	ldr	r5, [r7, #36]	; 0x24
   12ec0:	mov	r1, r5
   12ec4:	bl	20474 <__assert_fail@plt+0xf090>
   12ec8:	sub	r5, r5, r1
   12ecc:	add	r5, r5, r4
   12ed0:	cmp	r6, r5
   12ed4:	blt	12f04 <__assert_fail@plt+0x1b20>
   12ed8:	ldr	r0, [r9]
   12edc:	ldrb	r1, [r7, #48]	; 0x30
   12ee0:	ldr	r3, [r0, #20]
   12ee4:	ldr	ip, [r0, #24]
   12ee8:	add	r2, r3, #1
   12eec:	cmp	r3, ip
   12ef0:	strcc	r2, [r0, #20]
   12ef4:	strbcc	r1, [r3]
   12ef8:	bcc	12ea8 <__assert_fail@plt+0x1ac4>
   12efc:	bl	11348 <__overflow@plt>
   12f00:	b	12ea8 <__assert_fail@plt+0x1ac4>
   12f04:	ldr	r7, [pc, #92]	; 12f68 <__assert_fail@plt+0x1b84>
   12f08:	mov	r5, #32
   12f0c:	add	r4, r4, #1
   12f10:	cmp	r6, r4
   12f14:	blt	12f4c <__assert_fail@plt+0x1b68>
   12f18:	ldr	r0, [r7]
   12f1c:	ldr	r3, [r0, #20]
   12f20:	ldr	r1, [r0, #24]
   12f24:	add	r2, r3, #1
   12f28:	cmp	r3, r1
   12f2c:	strcc	r2, [r0, #20]
   12f30:	strbcc	r5, [r3]
   12f34:	bcc	12f0c <__assert_fail@plt+0x1b28>
   12f38:	mov	r1, r5
   12f3c:	add	r4, r4, #1
   12f40:	bl	11348 <__overflow@plt>
   12f44:	cmp	r6, r4
   12f48:	bge	12f18 <__assert_fail@plt+0x1b34>
   12f4c:	mov	r3, #0
   12f50:	str	r6, [r8, #100]	; 0x64
   12f54:	str	r3, [r8, #112]	; 0x70
   12f58:	add	sp, sp, #20
   12f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f60:	strdeq	r3, [r3], -r0
   12f64:	andeq	r3, r3, r0, asr #2
   12f68:	andeq	r3, r3, r4, ror #3
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	mov	r3, #0
   12f74:	ldr	r7, [pc, #500]	; 13170 <__assert_fail@plt+0x1d8c>
   12f78:	sub	sp, sp, #316	; 0x13c
   12f7c:	ldrb	r5, [r7, #120]	; 0x78
   12f80:	str	r3, [r7, #100]	; 0x64
   12f84:	ldr	r4, [r7, #116]	; 0x74
   12f88:	cmp	r5, r3
   12f8c:	bne	13144 <__assert_fail@plt+0x1d60>
   12f90:	ldr	r8, [pc, #476]	; 13174 <__assert_fail@plt+0x1d90>
   12f94:	mov	r6, #32
   12f98:	add	r5, r5, #1
   12f9c:	cmp	r4, r5
   12fa0:	blt	12fd8 <__assert_fail@plt+0x1bf4>
   12fa4:	ldr	r0, [r8]
   12fa8:	ldr	r3, [r0, #20]
   12fac:	ldr	r2, [r0, #24]
   12fb0:	cmp	r3, r2
   12fb4:	addcc	r2, r3, #1
   12fb8:	strcc	r2, [r0, #20]
   12fbc:	strbcc	r6, [r3]
   12fc0:	bcc	12f98 <__assert_fail@plt+0x1bb4>
   12fc4:	mov	r1, r6
   12fc8:	add	r5, r5, #1
   12fcc:	bl	11348 <__overflow@plt>
   12fd0:	cmp	r4, r5
   12fd4:	bge	12fa4 <__assert_fail@plt+0x1bc0>
   12fd8:	ldr	r9, [r7, #112]	; 0x70
   12fdc:	str	r4, [r7, #100]	; 0x64
   12fe0:	add	r9, r9, r4
   12fe4:	ldr	r6, [pc, #396]	; 13178 <__assert_fail@plt+0x1d94>
   12fe8:	ldr	r8, [pc, #388]	; 13174 <__assert_fail@plt+0x1d90>
   12fec:	b	12ff4 <__assert_fail@plt+0x1c10>
   12ff0:	mov	r4, r5
   12ff4:	sub	r3, r9, r4
   12ff8:	cmp	r3, #1
   12ffc:	ble	1304c <__assert_fail@plt+0x1c68>
   13000:	ldr	r5, [r6, #36]	; 0x24
   13004:	mov	r0, r4
   13008:	mov	r1, r5
   1300c:	bl	20474 <__assert_fail@plt+0xf090>
   13010:	sub	r5, r5, r1
   13014:	add	r5, r5, r4
   13018:	cmp	r9, r5
   1301c:	blt	1304c <__assert_fail@plt+0x1c68>
   13020:	ldr	r0, [r8]
   13024:	ldrb	r1, [r6, #48]	; 0x30
   13028:	ldr	r3, [r0, #20]
   1302c:	ldr	r2, [r0, #24]
   13030:	cmp	r3, r2
   13034:	addcc	r2, r3, #1
   13038:	strcc	r2, [r0, #20]
   1303c:	strbcc	r1, [r3]
   13040:	bcc	12ff0 <__assert_fail@plt+0x1c0c>
   13044:	bl	11348 <__overflow@plt>
   13048:	b	12ff0 <__assert_fail@plt+0x1c0c>
   1304c:	ldr	r6, [pc, #288]	; 13174 <__assert_fail@plt+0x1d90>
   13050:	mov	r5, #32
   13054:	add	r4, r4, #1
   13058:	cmp	r9, r4
   1305c:	blt	13094 <__assert_fail@plt+0x1cb0>
   13060:	ldr	r0, [r6]
   13064:	ldr	r3, [r0, #20]
   13068:	ldr	r2, [r0, #24]
   1306c:	cmp	r3, r2
   13070:	addcc	r2, r3, #1
   13074:	strcc	r2, [r0, #20]
   13078:	strbcc	r5, [r3]
   1307c:	bcc	13054 <__assert_fail@plt+0x1c70>
   13080:	mov	r1, r5
   13084:	add	r4, r4, #1
   13088:	bl	11348 <__overflow@plt>
   1308c:	cmp	r9, r4
   13090:	bge	13060 <__assert_fail@plt+0x1c7c>
   13094:	ldrd	sl, [r7, #128]	; 0x80
   13098:	mov	r5, #0
   1309c:	str	r9, [r7, #100]	; 0x64
   130a0:	orrs	r3, sl, fp
   130a4:	mov	r2, #5
   130a8:	str	r5, [r7, #112]	; 0x70
   130ac:	beq	13154 <__assert_fail@plt+0x1d70>
   130b0:	ldr	r1, [pc, #196]	; 1317c <__assert_fail@plt+0x1d98>
   130b4:	mov	r0, r5
   130b8:	bl	11168 <dcgettext@plt>
   130bc:	add	r6, sp, #36	; 0x24
   130c0:	mov	r2, #276	; 0x114
   130c4:	strd	sl, [sp]
   130c8:	mov	r1, #1
   130cc:	mov	r3, r0
   130d0:	mov	r0, r6
   130d4:	bl	112d0 <__sprintf_chk@plt>
   130d8:	mov	r1, r5
   130dc:	mov	r0, r6
   130e0:	ldr	r4, [r7, #60]	; 0x3c
   130e4:	bl	16248 <__assert_fail@plt+0x4e64>
   130e8:	ldr	ip, [r7, #56]	; 0x38
   130ec:	ldr	r1, [r7, #48]	; 0x30
   130f0:	str	ip, [sp, #12]
   130f4:	ldr	r3, [pc, #132]	; 13180 <__assert_fail@plt+0x1d9c>
   130f8:	str	r1, [sp]
   130fc:	str	r3, [sp, #20]
   13100:	str	r3, [sp, #8]
   13104:	ldr	r2, [r7, #116]	; 0x74
   13108:	str	r6, [sp, #24]
   1310c:	ldr	r3, [pc, #112]	; 13184 <__assert_fail@plt+0x1da0>
   13110:	ldr	r1, [pc, #112]	; 13188 <__assert_fail@plt+0x1da4>
   13114:	sub	ip, r4, r0
   13118:	mov	r0, #1
   1311c:	bic	ip, ip, ip, asr #31
   13120:	asr	lr, ip, r0
   13124:	sub	ip, ip, lr
   13128:	str	ip, [sp, #16]
   1312c:	str	lr, [sp, #4]
   13130:	bl	112f4 <__printf_chk@plt>
   13134:	strb	r5, [r7, #136]	; 0x88
   13138:	str	r5, [r7, #100]	; 0x64
   1313c:	add	sp, sp, #316	; 0x13c
   13140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13144:	str	r4, [r7, #112]	; 0x70
   13148:	mov	r9, r4
   1314c:	mov	r4, r3
   13150:	b	12fe0 <__assert_fail@plt+0x1bfc>
   13154:	ldr	r1, [pc, #48]	; 1318c <__assert_fail@plt+0x1da8>
   13158:	mov	r0, r5
   1315c:	bl	11168 <dcgettext@plt>
   13160:	mov	r1, r5
   13164:	mov	r2, r0
   13168:	mov	r0, #1
   1316c:	bl	11204 <error@plt>
   13170:	strdeq	r3, [r3], -r0
   13174:	andeq	r3, r3, r4, ror #3
   13178:	andeq	r3, r3, r0, asr #2
   1317c:	andeq	r0, r2, r8, lsr #19
   13180:	andeq	r0, r2, ip, asr #19
   13184:	andeq	r0, r2, r8, asr #19
   13188:			; <UNDEFINED> instruction: 0x000209b4
   1318c:	muleq	r2, r0, r9
   13190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13194:	mov	r7, r0
   13198:	ldr	r0, [r0]
   1319c:	sub	sp, sp, #20
   131a0:	ldr	r3, [r0, #4]
   131a4:	ldr	r2, [r0, #8]
   131a8:	cmp	r3, r2
   131ac:	bcs	1365c <__assert_fail@plt+0x2278>
   131b0:	add	r2, r3, #1
   131b4:	str	r2, [r0, #4]
   131b8:	ldrb	r8, [r3]
   131bc:	ldr	r4, [pc, #1408]	; 13744 <__assert_fail@plt+0x2360>
   131c0:	cmp	r8, #12
   131c4:	ldr	r5, [r4, #80]	; 0x50
   131c8:	beq	1343c <__assert_fail@plt+0x2058>
   131cc:	mov	r3, #0
   131d0:	cmp	r8, #10
   131d4:	strb	r3, [r7, #37]	; 0x25
   131d8:	beq	131f8 <__assert_fail@plt+0x1e14>
   131dc:	cmp	r8, #12
   131e0:	beq	13494 <__assert_fail@plt+0x20b0>
   131e4:	cmn	r8, #1
   131e8:	beq	13428 <__assert_fail@plt+0x2044>
   131ec:	uxtb	r0, r8
   131f0:	bl	126cc <__assert_fail@plt+0x12e8>
   131f4:	str	r0, [sp, #4]
   131f8:	ldrb	r3, [r4, #104]	; 0x68
   131fc:	cmp	r3, #0
   13200:	bne	13374 <__assert_fail@plt+0x1f90>
   13204:	ldr	r3, [pc, #1340]	; 13748 <__assert_fail@plt+0x2364>
   13208:	ldr	r2, [r7, #16]
   1320c:	cmp	r2, r3
   13210:	beq	133ac <__assert_fail@plt+0x1fc8>
   13214:	ldrb	r3, [r4, #136]	; 0x88
   13218:	mov	r2, #1
   1321c:	strb	r2, [r4, #138]	; 0x8a
   13220:	cmp	r3, #0
   13224:	beq	1323c <__assert_fail@plt+0x1e58>
   13228:	ldr	r3, [pc, #1308]	; 1374c <__assert_fail@plt+0x2368>
   1322c:	ldrb	r3, [r3, #40]	; 0x28
   13230:	cmp	r3, #0
   13234:	bne	1323c <__assert_fail@plt+0x1e58>
   13238:	bl	12f6c <__assert_fail@plt+0x1b88>
   1323c:	ldrb	r3, [r4, #64]	; 0x40
   13240:	cmp	r3, #0
   13244:	beq	13390 <__assert_fail@plt+0x1fac>
   13248:	ldrb	r3, [r4, #152]	; 0x98
   1324c:	cmp	r3, #0
   13250:	beq	13390 <__assert_fail@plt+0x1fac>
   13254:	ldr	r3, [r4, #108]	; 0x6c
   13258:	ldr	r9, [r4, #68]	; 0x44
   1325c:	mov	r2, r3
   13260:	mov	r1, r3
   13264:	mov	r3, #0
   13268:	cmp	r2, r3
   1326c:	str	r3, [r4, #108]	; 0x6c
   13270:	ble	136d4 <__assert_fail@plt+0x22f0>
   13274:	mov	sl, #1
   13278:	str	r7, [sp, #12]
   1327c:	ldr	r2, [pc, #1228]	; 13750 <__assert_fail@plt+0x236c>
   13280:	mov	r7, sl
   13284:	add	r9, r9, #16
   13288:	str	r3, [sp, #8]
   1328c:	mov	fp, #32
   13290:	mov	sl, r1
   13294:	b	132dc <__assert_fail@plt+0x1ef8>
   13298:	ldrb	r1, [r4, #153]	; 0x99
   1329c:	cmp	r1, #0
   132a0:	bne	13364 <__assert_fail@plt+0x1f80>
   132a4:	ldrb	r1, [r9, #20]
   132a8:	cmp	r1, #0
   132ac:	beq	132c0 <__assert_fail@plt+0x1edc>
   132b0:	mov	r0, r9
   132b4:	str	r2, [sp]
   132b8:	bl	12864 <__assert_fail@plt+0x1480>
   132bc:	ldr	r2, [sp]
   132c0:	ldr	r1, [r4, #108]	; 0x6c
   132c4:	add	r7, r7, #1
   132c8:	add	r1, r1, #1
   132cc:	cmp	sl, r7
   132d0:	add	r9, r9, #40	; 0x28
   132d4:	str	r1, [r4, #108]	; 0x6c
   132d8:	blt	136d0 <__assert_fail@plt+0x22ec>
   132dc:	ldr	r6, [r9, #16]
   132e0:	ldr	r5, [r4, #24]
   132e4:	str	r6, [r4, #148]	; 0x94
   132e8:	cmp	r6, r5
   132ec:	ble	13298 <__assert_fail@plt+0x1eb4>
   132f0:	ldrb	r1, [r4, #120]	; 0x78
   132f4:	sub	r6, r6, r5
   132f8:	ldr	r5, [r4, #100]	; 0x64
   132fc:	cmp	r1, #0
   13300:	bne	136c4 <__assert_fail@plt+0x22e0>
   13304:	add	r5, r5, #1
   13308:	cmp	r6, r5
   1330c:	blt	1334c <__assert_fail@plt+0x1f68>
   13310:	ldr	r0, [r2]
   13314:	ldr	r3, [r0, #20]
   13318:	ldr	r1, [r0, #24]
   1331c:	add	ip, r3, #1
   13320:	cmp	r3, r1
   13324:	strcc	ip, [r0, #20]
   13328:	strbcc	fp, [r3]
   1332c:	bcc	13304 <__assert_fail@plt+0x1f20>
   13330:	mov	r1, fp
   13334:	add	r5, r5, #1
   13338:	str	r2, [sp]
   1333c:	bl	11348 <__overflow@plt>
   13340:	cmp	r6, r5
   13344:	ldr	r2, [sp]
   13348:	bge	13310 <__assert_fail@plt+0x1f2c>
   1334c:	str	r6, [r4, #100]	; 0x64
   13350:	ldrb	r1, [r4, #153]	; 0x99
   13354:	ldr	r3, [sp, #8]
   13358:	cmp	r1, #0
   1335c:	str	r3, [r4, #148]	; 0x94
   13360:	beq	132a4 <__assert_fail@plt+0x1ec0>
   13364:	str	r2, [sp]
   13368:	bl	12c18 <__assert_fail@plt+0x1834>
   1336c:	ldr	r2, [sp]
   13370:	b	132a4 <__assert_fail@plt+0x1ec0>
   13374:	ldr	r2, [r4, #80]	; 0x50
   13378:	ldr	r3, [r4, #144]	; 0x90
   1337c:	cmp	r2, r3
   13380:	ble	13204 <__assert_fail@plt+0x1e20>
   13384:	str	r5, [r4, #80]	; 0x50
   13388:	mov	r0, #0
   1338c:	b	13434 <__assert_fail@plt+0x2050>
   13390:	ldr	r5, [r4, #148]	; 0x94
   13394:	ldr	r6, [r4, #24]
   13398:	cmp	r6, r5
   1339c:	blt	13670 <__assert_fail@plt+0x228c>
   133a0:	ldrb	r3, [r4, #153]	; 0x99
   133a4:	cmp	r3, #0
   133a8:	bne	13668 <__assert_fail@plt+0x2284>
   133ac:	ldrb	r3, [r7, #36]	; 0x24
   133b0:	cmp	r3, #0
   133b4:	bne	135cc <__assert_fail@plt+0x21e8>
   133b8:	mov	r3, #0
   133bc:	cmp	r8, #10
   133c0:	strb	r3, [r4, #154]	; 0x9a
   133c4:	beq	135c0 <__assert_fail@plt+0x21dc>
   133c8:	ldr	r3, [sp, #4]
   133cc:	ldr	r6, [r4, #76]	; 0x4c
   133d0:	cmp	r3, #0
   133d4:	beq	133f0 <__assert_fail@plt+0x200c>
   133d8:	mov	r5, r3
   133dc:	ldr	r3, [r7, #16]
   133e0:	ldrb	r0, [r6], #1
   133e4:	blx	r3
   133e8:	subs	r5, r5, #1
   133ec:	bne	133dc <__assert_fail@plt+0x1ff8>
   133f0:	ldr	r0, [r7]
   133f4:	ldr	r3, [r0, #4]
   133f8:	ldr	r2, [r0, #8]
   133fc:	cmp	r3, r2
   13400:	bcs	13708 <__assert_fail@plt+0x2324>
   13404:	add	r2, r3, #1
   13408:	str	r2, [r0, #4]
   1340c:	ldrb	r0, [r3]
   13410:	cmp	r0, #10
   13414:	beq	135c0 <__assert_fail@plt+0x21dc>
   13418:	cmp	r0, #12
   1341c:	beq	135d8 <__assert_fail@plt+0x21f4>
   13420:	cmn	r0, #1
   13424:	bne	1352c <__assert_fail@plt+0x2148>
   13428:	mov	r0, r7
   1342c:	bl	125cc <__assert_fail@plt+0x11e8>
   13430:	mov	r0, #1
   13434:	add	sp, sp, #20
   13438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1343c:	ldrb	r3, [r7, #37]	; 0x25
   13440:	cmp	r3, #0
   13444:	beq	13494 <__assert_fail@plt+0x20b0>
   13448:	ldr	r0, [r7]
   1344c:	ldr	r3, [r0, #4]
   13450:	ldr	r2, [r0, #8]
   13454:	cmp	r3, r2
   13458:	bcs	13724 <__assert_fail@plt+0x2340>
   1345c:	add	r2, r3, #1
   13460:	str	r2, [r0, #4]
   13464:	ldrb	r8, [r3]
   13468:	cmp	r8, #10
   1346c:	bne	131cc <__assert_fail@plt+0x1de8>
   13470:	ldr	r0, [r7]
   13474:	ldr	r3, [r0, #4]
   13478:	ldr	r2, [r0, #8]
   1347c:	cmp	r3, r2
   13480:	bcs	13738 <__assert_fail@plt+0x2354>
   13484:	add	r2, r3, #1
   13488:	str	r2, [r0, #4]
   1348c:	ldrb	r8, [r3]
   13490:	b	131cc <__assert_fail@plt+0x1de8>
   13494:	ldr	r0, [r7]
   13498:	ldr	r3, [r0, #4]
   1349c:	ldr	r2, [r0, #8]
   134a0:	cmp	r3, r2
   134a4:	bcs	1371c <__assert_fail@plt+0x2338>
   134a8:	add	r2, r3, #1
   134ac:	str	r2, [r0, #4]
   134b0:	ldrb	r0, [r3]
   134b4:	cmp	r0, #10
   134b8:	beq	134c4 <__assert_fail@plt+0x20e0>
   134bc:	ldr	r1, [r7]
   134c0:	bl	112b8 <ungetc@plt>
   134c4:	ldrb	r2, [r4, #136]	; 0x88
   134c8:	mov	r3, #1
   134cc:	strb	r3, [r4, #137]	; 0x89
   134d0:	cmp	r2, #0
   134d4:	bne	135a4 <__assert_fail@plt+0x21c0>
   134d8:	ldrb	r3, [r4, #139]	; 0x8b
   134dc:	cmp	r3, #0
   134e0:	movne	r3, #1
   134e4:	strbne	r3, [r4, #140]	; 0x8c
   134e8:	ldrb	r3, [r4, #64]	; 0x40
   134ec:	cmp	r3, #0
   134f0:	bne	1357c <__assert_fail@plt+0x2198>
   134f4:	ldr	r1, [pc, #592]	; 1374c <__assert_fail@plt+0x2368>
   134f8:	ldr	r2, [r4, #68]	; 0x44
   134fc:	ldr	r3, [r1, #12]
   13500:	cmp	r3, #0
   13504:	beq	13584 <__assert_fail@plt+0x21a0>
   13508:	ldrb	r1, [r1, #40]	; 0x28
   1350c:	cmp	r1, #0
   13510:	movne	r1, #1
   13514:	moveq	r1, #2
   13518:	subs	r3, r3, #1
   1351c:	str	r1, [r2, #8]
   13520:	add	r2, r2, #40	; 0x28
   13524:	bne	13518 <__assert_fail@plt+0x2134>
   13528:	b	13584 <__assert_fail@plt+0x21a0>
   1352c:	uxtb	r0, r0
   13530:	ldr	r5, [r4, #80]	; 0x50
   13534:	bl	126cc <__assert_fail@plt+0x12e8>
   13538:	ldrb	r3, [r4, #104]	; 0x68
   1353c:	cmp	r3, #0
   13540:	beq	13554 <__assert_fail@plt+0x2170>
   13544:	ldr	r2, [r4, #80]	; 0x50
   13548:	ldr	r3, [r4, #144]	; 0x90
   1354c:	cmp	r2, r3
   13550:	bgt	13384 <__assert_fail@plt+0x1fa0>
   13554:	cmp	r0, #0
   13558:	ldr	r6, [r4, #76]	; 0x4c
   1355c:	beq	133f0 <__assert_fail@plt+0x200c>
   13560:	mov	r5, r0
   13564:	ldr	r3, [r7, #16]
   13568:	ldrb	r0, [r6], #1
   1356c:	blx	r3
   13570:	subs	r5, r5, #1
   13574:	bne	13564 <__assert_fail@plt+0x2180>
   13578:	b	133f0 <__assert_fail@plt+0x200c>
   1357c:	mov	r3, #2
   13580:	str	r3, [r7, #8]
   13584:	ldr	r3, [r4, #72]	; 0x48
   13588:	mov	r2, #0
   1358c:	sub	r3, r3, #1
   13590:	mov	r0, #1
   13594:	str	r3, [r4, #72]	; 0x48
   13598:	str	r2, [r7, #28]
   1359c:	add	sp, sp, #20
   135a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a4:	ldr	r2, [pc, #416]	; 1374c <__assert_fail@plt+0x2368>
   135a8:	ldrb	r2, [r2, #40]	; 0x28
   135ac:	cmp	r2, #0
   135b0:	bne	134d8 <__assert_fail@plt+0x20f4>
   135b4:	strb	r3, [r4, #138]	; 0x8a
   135b8:	bl	12f6c <__assert_fail@plt+0x1b88>
   135bc:	b	134e8 <__assert_fail@plt+0x2104>
   135c0:	mov	r0, #1
   135c4:	add	sp, sp, #20
   135c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135cc:	add	r0, r7, #16
   135d0:	bl	12864 <__assert_fail@plt+0x1480>
   135d4:	b	133b8 <__assert_fail@plt+0x1fd4>
   135d8:	ldr	r0, [r7]
   135dc:	ldr	r3, [r0, #4]
   135e0:	ldr	r2, [r0, #8]
   135e4:	cmp	r3, r2
   135e8:	bcs	13730 <__assert_fail@plt+0x234c>
   135ec:	add	r2, r3, #1
   135f0:	str	r2, [r0, #4]
   135f4:	ldrb	r0, [r3]
   135f8:	cmp	r0, #10
   135fc:	beq	13608 <__assert_fail@plt+0x2224>
   13600:	ldr	r1, [r7]
   13604:	bl	112b8 <ungetc@plt>
   13608:	ldrb	r3, [r4, #139]	; 0x8b
   1360c:	cmp	r3, #0
   13610:	movne	r3, #1
   13614:	strbne	r3, [r4, #140]	; 0x8c
   13618:	ldrb	r3, [r4, #64]	; 0x40
   1361c:	cmp	r3, #0
   13620:	bne	1357c <__assert_fail@plt+0x2198>
   13624:	ldr	r1, [pc, #288]	; 1374c <__assert_fail@plt+0x2368>
   13628:	ldr	r2, [r4, #68]	; 0x44
   1362c:	ldr	r3, [r1, #12]
   13630:	cmp	r3, #0
   13634:	beq	13584 <__assert_fail@plt+0x21a0>
   13638:	ldrb	r1, [r1, #40]	; 0x28
   1363c:	cmp	r1, #0
   13640:	movne	r1, #1
   13644:	moveq	r1, #2
   13648:	subs	r3, r3, #1
   1364c:	str	r1, [r2, #8]
   13650:	add	r2, r2, #40	; 0x28
   13654:	bne	13648 <__assert_fail@plt+0x2264>
   13658:	b	13584 <__assert_fail@plt+0x21a0>
   1365c:	bl	1133c <__uflow@plt>
   13660:	mov	r8, r0
   13664:	b	131bc <__assert_fail@plt+0x1dd8>
   13668:	bl	12c18 <__assert_fail@plt+0x1834>
   1366c:	b	133ac <__assert_fail@plt+0x1fc8>
   13670:	ldrb	r3, [r4, #120]	; 0x78
   13674:	sub	r6, r5, r6
   13678:	ldr	r5, [r4, #100]	; 0x64
   1367c:	cmp	r3, #0
   13680:	bne	13710 <__assert_fail@plt+0x232c>
   13684:	ldr	sl, [pc, #196]	; 13750 <__assert_fail@plt+0x236c>
   13688:	mov	r9, #32
   1368c:	add	r5, r5, #1
   13690:	cmp	r6, r5
   13694:	blt	136f8 <__assert_fail@plt+0x2314>
   13698:	ldr	r0, [sl]
   1369c:	ldr	r3, [r0, #20]
   136a0:	ldr	r2, [r0, #24]
   136a4:	add	r1, r3, #1
   136a8:	cmp	r3, r2
   136ac:	strcc	r1, [r0, #20]
   136b0:	strbcc	r9, [r3]
   136b4:	bcc	1368c <__assert_fail@plt+0x22a8>
   136b8:	mov	r1, r9
   136bc:	bl	11348 <__overflow@plt>
   136c0:	b	1368c <__assert_fail@plt+0x22a8>
   136c4:	sub	r5, r6, r5
   136c8:	str	r5, [r4, #112]	; 0x70
   136cc:	b	13350 <__assert_fail@plt+0x1f6c>
   136d0:	ldr	r7, [sp, #12]
   136d4:	ldrb	r3, [r4, #104]	; 0x68
   136d8:	ldr	r5, [r7, #32]
   136dc:	cmp	r3, #0
   136e0:	str	r5, [r4, #148]	; 0x94
   136e4:	ldrne	r3, [r4, #144]	; 0x90
   136e8:	mov	r2, #0
   136ec:	str	r3, [r4, #112]	; 0x70
   136f0:	strb	r2, [r4, #152]	; 0x98
   136f4:	b	13394 <__assert_fail@plt+0x1fb0>
   136f8:	str	r6, [r4, #100]	; 0x64
   136fc:	mov	r3, #0
   13700:	str	r3, [r4, #148]	; 0x94
   13704:	b	133a0 <__assert_fail@plt+0x1fbc>
   13708:	bl	1133c <__uflow@plt>
   1370c:	b	13410 <__assert_fail@plt+0x202c>
   13710:	sub	r5, r6, r5
   13714:	str	r5, [r4, #112]	; 0x70
   13718:	b	136fc <__assert_fail@plt+0x2318>
   1371c:	bl	1133c <__uflow@plt>
   13720:	b	134b4 <__assert_fail@plt+0x20d0>
   13724:	bl	1133c <__uflow@plt>
   13728:	mov	r8, r0
   1372c:	b	13468 <__assert_fail@plt+0x2084>
   13730:	bl	1133c <__uflow@plt>
   13734:	b	135f8 <__assert_fail@plt+0x2214>
   13738:	bl	1133c <__uflow@plt>
   1373c:	mov	r8, r0
   13740:	b	131cc <__assert_fail@plt+0x1de8>
   13744:	strdeq	r3, [r3], -r0
   13748:	strdeq	r2, [r1], -r4
   1374c:	andeq	r3, r3, r0, asr #2
   13750:	andeq	r3, r3, r4, ror #3
   13754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13758:	mov	r7, r0
   1375c:	ldr	r6, [pc, #3816]	; 1464c <__assert_fail@plt+0x3268>
   13760:	ldr	r4, [pc, #3816]	; 14650 <__assert_fail@plt+0x326c>
   13764:	sub	sp, sp, #36	; 0x24
   13768:	ldr	r2, [r6, #52]	; 0x34
   1376c:	mov	r8, r1
   13770:	sub	r3, r2, #10
   13774:	cmp	r3, #0
   13778:	str	r3, [r4, #156]	; 0x9c
   1377c:	ble	13d10 <__assert_fail@plt+0x292c>
   13780:	ldrb	r1, [r6, #56]	; 0x38
   13784:	cmp	r1, #0
   13788:	beq	13d20 <__assert_fail@plt+0x293c>
   1378c:	ldrb	r2, [r4, #160]	; 0xa0
   13790:	cmp	r2, #0
   13794:	addne	r3, r3, r3, lsr #31
   13798:	asrne	r3, r3, #1
   1379c:	strne	r3, [r4, #156]	; 0x9c
   137a0:	cmp	r7, #0
   137a4:	bne	13d2c <__assert_fail@plt+0x2948>
   137a8:	ldr	sl, [r6, #12]
   137ac:	strb	r7, [r4, #64]	; 0x40
   137b0:	ldrb	r3, [r6, #40]	; 0x28
   137b4:	cmp	r3, #0
   137b8:	movne	r3, #1
   137bc:	strbne	r3, [r4, #161]	; 0xa1
   137c0:	cmp	sl, #1
   137c4:	ble	14ccc <__assert_fail@plt+0x38e8>
   137c8:	ldrb	r3, [r4, #153]	; 0x99
   137cc:	cmp	r3, #0
   137d0:	ldrb	r3, [r4, #162]	; 0xa2
   137d4:	beq	13d44 <__assert_fail@plt+0x2960>
   137d8:	cmp	r3, #0
   137dc:	ldr	fp, [r4, #24]
   137e0:	beq	14f58 <__assert_fail@plt+0x3b74>
   137e4:	mov	r2, #1
   137e8:	cmp	fp, r2
   137ec:	strb	r2, [r4, #104]	; 0x68
   137f0:	beq	13d6c <__assert_fail@plt+0x2988>
   137f4:	mov	r2, #1
   137f8:	strb	r2, [r4, #84]	; 0x54
   137fc:	mov	r2, #1
   13800:	strb	r2, [r4, #120]	; 0x78
   13804:	ldrb	r9, [r4, #163]	; 0xa3
   13808:	cmp	r3, #0
   1380c:	movne	r3, #0
   13810:	strbne	r3, [r4, #104]	; 0x68
   13814:	cmp	r9, #0
   13818:	beq	13864 <__assert_fail@plt+0x2480>
   1381c:	ldrb	r2, [r6, #32]
   13820:	ldr	r3, [r6, #60]	; 0x3c
   13824:	cmp	r2, #9
   13828:	str	r3, [r6, #44]	; 0x2c
   1382c:	ldreq	r2, [r6, #28]
   13830:	ldrne	r5, [r6, #28]
   13834:	asreq	r3, r2, #31
   13838:	addne	r5, r5, #1
   1383c:	lsreq	r3, r3, #29
   13840:	addeq	r5, r2, r3
   13844:	andeq	r5, r5, #7
   13848:	subeq	r5, r5, r3
   1384c:	ldrb	r3, [r4, #64]	; 0x40
   13850:	rsbeq	r5, r5, #8
   13854:	addeq	r5, r5, r2
   13858:	cmp	r3, #0
   1385c:	str	r5, [r4, #96]	; 0x60
   13860:	bne	13868 <__assert_fail@plt+0x2484>
   13864:	mov	r5, #0
   13868:	cmp	fp, #0
   1386c:	blt	14cf0 <__assert_fail@plt+0x390c>
   13870:	beq	14ce0 <__assert_fail@plt+0x38fc>
   13874:	cmp	sl, #0
   13878:	ble	14dc8 <__assert_fail@plt+0x39e4>
   1387c:	mov	r1, fp
   13880:	mvn	r0, #-2147483648	; 0x80000000
   13884:	bl	20254 <__assert_fail@plt+0xee70>
   13888:	sub	r3, sl, #1
   1388c:	cmp	r0, r3
   13890:	movge	r0, #0
   13894:	movlt	r0, #1
   13898:	cmp	r0, #0
   1389c:	beq	14ce0 <__assert_fail@plt+0x38fc>
   138a0:	mov	r2, #0
   138a4:	mvn	r3, #-2147483648	; 0x80000000
   138a8:	ldr	r0, [r6, #16]
   138ac:	sub	r0, r0, r5
   138b0:	mvn	r1, r0
   138b4:	lsr	r1, r1, #31
   138b8:	cmp	r1, r2
   138bc:	beq	14c7c <__assert_fail@plt+0x3898>
   138c0:	mov	r1, sl
   138c4:	sub	r0, r0, r3
   138c8:	bl	20254 <__assert_fail@plt+0xee70>
   138cc:	cmp	r0, #0
   138d0:	str	r0, [r4, #144]	; 0x90
   138d4:	ble	14cac <__assert_fail@plt+0x38c8>
   138d8:	cmp	r9, #0
   138dc:	beq	13900 <__assert_fail@plt+0x251c>
   138e0:	ldr	r0, [r4, #88]	; 0x58
   138e4:	bl	15da0 <__assert_fail@plt+0x49bc>
   138e8:	ldr	r3, [r6, #28]
   138ec:	cmp	r3, #11
   138f0:	movcc	r3, #11
   138f4:	add	r0, r3, #1
   138f8:	bl	1d048 <__assert_fail@plt+0xbc64>
   138fc:	str	r0, [r4, #88]	; 0x58
   13900:	ldr	r0, [r4, #76]	; 0x4c
   13904:	bl	15da0 <__assert_fail@plt+0x49bc>
   13908:	ldr	r0, [r6, #24]
   1390c:	cmp	r0, #8
   13910:	movlt	r0, #8
   13914:	bl	1d048 <__assert_fail@plt+0xbc64>
   13918:	mov	r3, #0
   1391c:	str	r3, [r4, #164]	; 0xa4
   13920:	str	r0, [r4, #76]	; 0x4c
   13924:	ldr	r0, [r4, #68]	; 0x44
   13928:	bl	15da0 <__assert_fail@plt+0x49bc>
   1392c:	mov	r1, #40	; 0x28
   13930:	ldr	r0, [r6, #12]
   13934:	bl	1d12c <__assert_fail@plt+0xbd48>
   13938:	ldrb	r9, [r4, #64]	; 0x40
   1393c:	cmp	r9, #0
   13940:	mov	r5, r0
   13944:	str	r0, [r4, #68]	; 0x44
   13948:	beq	13d84 <__assert_fail@plt+0x29a0>
   1394c:	cmp	r7, #0
   13950:	subne	r8, r8, #4
   13954:	ldrne	fp, [pc, #3320]	; 14654 <__assert_fail@plt+0x3270>
   13958:	bne	139bc <__assert_fail@plt+0x25d8>
   1395c:	b	13a50 <__assert_fail@plt+0x266c>
   13960:	mov	r2, #5
   13964:	ldr	r1, [pc, #3348]	; 14680 <__assert_fail@plt+0x329c>
   13968:	bl	11168 <dcgettext@plt>
   1396c:	ldr	r3, [pc, #3344]	; 14684 <__assert_fail@plt+0x32a0>
   13970:	ldr	r9, [r3]
   13974:	mov	r3, #1
   13978:	cmp	r9, #0
   1397c:	str	r9, [r5]
   13980:	strb	r3, [r4, #168]	; 0xa8
   13984:	str	r0, [r5, #4]
   13988:	beq	139f4 <__assert_fail@plt+0x2610>
   1398c:	mov	r0, r9
   13990:	mov	r1, #2
   13994:	bl	15bd4 <__assert_fail@plt+0x47f0>
   13998:	ldr	r3, [r4, #164]	; 0xa4
   1399c:	mov	r2, #0
   139a0:	add	r3, r3, #1
   139a4:	subs	r7, r7, #1
   139a8:	str	r2, [r5, #8]
   139ac:	strb	r2, [r5, #37]	; 0x25
   139b0:	str	r3, [r4, #164]	; 0xa4
   139b4:	add	r5, r5, #40	; 0x28
   139b8:	beq	13a50 <__assert_fail@plt+0x266c>
   139bc:	ldr	sl, [r8, #4]!
   139c0:	mov	r1, fp
   139c4:	mov	r0, sl
   139c8:	bl	110c0 <strcmp@plt>
   139cc:	cmp	r0, #0
   139d0:	beq	13960 <__assert_fail@plt+0x257c>
   139d4:	ldr	r1, [pc, #3232]	; 1467c <__assert_fail@plt+0x3298>
   139d8:	mov	r0, sl
   139dc:	str	sl, [r5, #4]
   139e0:	bl	15d08 <__assert_fail@plt+0x4924>
   139e4:	mov	r9, r0
   139e8:	cmp	r9, #0
   139ec:	str	r0, [r5]
   139f0:	bne	1398c <__assert_fail@plt+0x25a8>
   139f4:	ldrb	r3, [r4, #170]	; 0xaa
   139f8:	mov	r2, #1
   139fc:	strb	r2, [r4, #169]	; 0xa9
   13a00:	cmp	r3, #0
   13a04:	bne	13a34 <__assert_fail@plt+0x2650>
   13a08:	bl	112c4 <__errno_location@plt>
   13a0c:	mov	r2, sl
   13a10:	mov	r1, #3
   13a14:	ldr	sl, [r0]
   13a18:	mov	r0, r9
   13a1c:	bl	1af54 <__assert_fail@plt+0x9b70>
   13a20:	ldr	r2, [pc, #3152]	; 14678 <__assert_fail@plt+0x3294>
   13a24:	mov	r1, sl
   13a28:	mov	r3, r0
   13a2c:	mov	r0, r9
   13a30:	bl	11204 <error@plt>
   13a34:	ldr	r3, [r6, #12]
   13a38:	sub	r5, r5, #40	; 0x28
   13a3c:	sub	r3, r3, #1
   13a40:	subs	r7, r7, #1
   13a44:	str	r3, [r6, #12]
   13a48:	add	r5, r5, #40	; 0x28
   13a4c:	bne	139bc <__assert_fail@plt+0x25d8>
   13a50:	ldr	r3, [r6, #12]
   13a54:	cmp	r3, #0
   13a58:	beq	13ebc <__assert_fail@plt+0x2ad8>
   13a5c:	mvn	r1, #0
   13a60:	ldr	r0, [pc, #3104]	; 14688 <__assert_fail@plt+0x32a4>
   13a64:	bl	12424 <__assert_fail@plt+0x1040>
   13a68:	ldrb	r2, [r6, #40]	; 0x28
   13a6c:	ldr	r3, [r4, #164]	; 0xa4
   13a70:	cmp	r2, #0
   13a74:	str	r3, [r4, #72]	; 0x48
   13a78:	bne	14d88 <__assert_fail@plt+0x39a4>
   13a7c:	ldrd	r2, [r4, #16]
   13a80:	cmp	r3, #0
   13a84:	cmpeq	r2, #1
   13a88:	strd	r2, [sp, #24]
   13a8c:	bls	14c60 <__assert_fail@plt+0x387c>
   13a90:	mov	r2, #1
   13a94:	ldr	r7, [r6, #12]
   13a98:	mov	r3, #0
   13a9c:	ldr	r5, [r4, #68]	; 0x44
   13aa0:	strd	r2, [sp, #16]
   13aa4:	mov	r9, #1
   13aa8:	mov	r8, #0
   13aac:	mov	r2, r7
   13ab0:	ldr	r3, [r4, #156]	; 0x9c
   13ab4:	cmp	r3, #1
   13ab8:	movgt	r7, #1
   13abc:	ble	13b20 <__assert_fail@plt+0x273c>
   13ac0:	cmp	r2, #0
   13ac4:	ble	13b14 <__assert_fail@plt+0x2730>
   13ac8:	mov	sl, #1
   13acc:	b	13ae0 <__assert_fail@plt+0x26fc>
   13ad0:	add	sl, sl, #1
   13ad4:	cmp	sl, r2
   13ad8:	add	r5, r5, #40	; 0x28
   13adc:	bgt	13b0c <__assert_fail@plt+0x2728>
   13ae0:	ldr	r3, [r5, #8]
   13ae4:	cmp	r3, #0
   13ae8:	bne	13ad0 <__assert_fail@plt+0x26ec>
   13aec:	mov	r1, sl
   13af0:	mov	r0, r5
   13af4:	bl	129a4 <__assert_fail@plt+0x15c0>
   13af8:	ldr	r2, [r6, #12]
   13afc:	add	sl, sl, #1
   13b00:	cmp	sl, r2
   13b04:	add	r5, r5, #40	; 0x28
   13b08:	ble	13ae0 <__assert_fail@plt+0x26fc>
   13b0c:	ldr	r3, [r4, #156]	; 0x9c
   13b10:	ldr	r5, [r4, #68]	; 0x44
   13b14:	add	r7, r7, #1
   13b18:	cmp	r7, r3
   13b1c:	blt	13ac0 <__assert_fail@plt+0x26dc>
   13b20:	cmp	r2, #0
   13b24:	strb	r9, [r4, #105]	; 0x69
   13b28:	ble	14c44 <__assert_fail@plt+0x3860>
   13b2c:	mov	r7, #1
   13b30:	b	13b44 <__assert_fail@plt+0x2760>
   13b34:	add	r7, r7, #1
   13b38:	cmp	r7, r2
   13b3c:	add	r5, r5, #40	; 0x28
   13b40:	bgt	13b70 <__assert_fail@plt+0x278c>
   13b44:	ldr	r3, [r5, #8]
   13b48:	cmp	r3, #0
   13b4c:	bne	13b34 <__assert_fail@plt+0x2750>
   13b50:	mov	r1, r7
   13b54:	mov	r0, r5
   13b58:	bl	129a4 <__assert_fail@plt+0x15c0>
   13b5c:	ldr	r2, [r6, #12]
   13b60:	add	r7, r7, #1
   13b64:	cmp	r7, r2
   13b68:	add	r5, r5, #40	; 0x28
   13b6c:	ble	13b44 <__assert_fail@plt+0x2760>
   13b70:	ldrb	r7, [r6, #40]	; 0x28
   13b74:	ldr	r5, [r4, #68]	; 0x44
   13b78:	cmp	r7, #0
   13b7c:	beq	13e50 <__assert_fail@plt+0x2a6c>
   13b80:	cmp	r2, #0
   13b84:	ble	14c50 <__assert_fail@plt+0x386c>
   13b88:	add	ip, r2, #1
   13b8c:	mov	r3, r5
   13b90:	mov	r1, #1
   13b94:	ldr	r0, [r3, #8]
   13b98:	add	r1, r1, #1
   13b9c:	cmp	r0, #3
   13ba0:	movne	r0, #2
   13ba4:	strne	r0, [r3, #8]
   13ba8:	cmp	r1, ip
   13bac:	add	r3, r3, #40	; 0x28
   13bb0:	bne	13b94 <__assert_fail@plt+0x27b0>
   13bb4:	ldr	ip, [r4, #72]	; 0x48
   13bb8:	mov	r1, r2
   13bbc:	mov	r3, r5
   13bc0:	mov	lr, r8
   13bc4:	ldr	r0, [r3, #8]
   13bc8:	add	r3, r3, #40	; 0x28
   13bcc:	cmp	r0, #2
   13bd0:	streq	r8, [r3, #-32]	; 0xffffffe0
   13bd4:	addeq	ip, ip, #1
   13bd8:	moveq	lr, r9
   13bdc:	subs	r1, r1, #1
   13be0:	bne	13bc4 <__assert_fail@plt+0x27e0>
   13be4:	cmp	lr, #0
   13be8:	strne	ip, [r4, #72]	; 0x48
   13bec:	cmp	r7, #0
   13bf0:	beq	13e5c <__assert_fail@plt+0x2a78>
   13bf4:	ldr	r3, [r5, #8]
   13bf8:	cmp	r3, #3
   13bfc:	beq	13e74 <__assert_fail@plt+0x2a90>
   13c00:	mov	ip, #1
   13c04:	str	r9, [r4, #72]	; 0x48
   13c08:	strb	r8, [r4, #105]	; 0x69
   13c0c:	ldrd	r0, [sp, #16]
   13c10:	ldrd	sl, [sp, #24]
   13c14:	adds	r0, r0, #1
   13c18:	adc	r1, r1, #0
   13c1c:	cmp	fp, r1
   13c20:	cmpeq	sl, r0
   13c24:	strd	r0, [sp, #16]
   13c28:	bne	13ab0 <__assert_fail@plt+0x26cc>
   13c2c:	mov	r7, r2
   13c30:	ldrd	r2, [r4, #16]
   13c34:	strd	r2, [r4, #128]	; 0x80
   13c38:	ldrb	sl, [r4, #104]	; 0x68
   13c3c:	ldr	r3, [r4, #116]	; 0x74
   13c40:	cmp	sl, #0
   13c44:	beq	13ec4 <__assert_fail@plt+0x2ae0>
   13c48:	ldrb	r8, [r4, #64]	; 0x40
   13c4c:	ldrb	r9, [r4, #163]	; 0xa3
   13c50:	cmp	r8, #0
   13c54:	beq	14d64 <__assert_fail@plt+0x3980>
   13c58:	cmp	r9, #0
   13c5c:	beq	14d64 <__assert_fail@plt+0x3980>
   13c60:	ldr	r1, [r4, #144]	; 0x90
   13c64:	ldr	r2, [r4, #96]	; 0x60
   13c68:	ldr	lr, [r4, #24]
   13c6c:	add	r0, r3, r1
   13c70:	cmp	r7, #1
   13c74:	add	r2, r0, r2
   13c78:	add	r3, r3, lr
   13c7c:	ble	14d7c <__assert_fail@plt+0x3998>
   13c80:	ldr	fp, [pc, #2512]	; 14658 <__assert_fail@plt+0x3274>
   13c84:	ldr	sl, [pc, #2512]	; 1465c <__assert_fail@plt+0x3278>
   13c88:	ldr	r9, [pc, #2520]	; 14668 <__assert_fail@plt+0x3284>
   13c8c:	cmp	ip, #0
   13c90:	ldr	r0, [pc, #2516]	; 1466c <__assert_fail@plt+0x3288>
   13c94:	eor	r8, r8, #1
   13c98:	movne	r0, fp
   13c9c:	moveq	fp, r9
   13ca0:	movne	fp, sl
   13ca4:	add	r2, r2, lr
   13ca8:	add	r1, r1, lr
   13cac:	mov	sl, r2
   13cb0:	mov	lr, r5
   13cb4:	mov	r9, #1
   13cb8:	str	r2, [sp, #16]
   13cbc:	cmp	r9, #1
   13cc0:	movne	r2, r8
   13cc4:	orreq	r2, r8, #1
   13cc8:	add	r9, r9, #1
   13ccc:	cmp	r9, r7
   13cd0:	str	r3, [lr, #32]
   13cd4:	str	fp, [lr, #12]
   13cd8:	mov	r3, sl
   13cdc:	str	r0, [lr, #16]
   13ce0:	strb	r2, [lr, #36]	; 0x24
   13ce4:	add	sl, sl, r1
   13ce8:	add	lr, lr, #40	; 0x28
   13cec:	bne	13cbc <__assert_fail@plt+0x28d8>
   13cf0:	add	r0, r7, r7, lsl #2
   13cf4:	ldr	r2, [sp, #16]
   13cf8:	sub	r3, r7, #2
   13cfc:	add	r0, r5, r0, lsl #3
   13d00:	mla	r3, r1, r3, r2
   13d04:	sub	r0, r0, #40	; 0x28
   13d08:	mov	r9, #1
   13d0c:	b	13f54 <__assert_fail@plt+0x2b70>
   13d10:	mov	r1, #0
   13d14:	mov	r3, #1
   13d18:	strb	r1, [r6, #56]	; 0x38
   13d1c:	strb	r3, [r4, #139]	; 0x8b
   13d20:	mov	r3, r2
   13d24:	str	r2, [r4, #156]	; 0x9c
   13d28:	b	1378c <__assert_fail@plt+0x23a8>
   13d2c:	ldrb	r3, [r4, #64]	; 0x40
   13d30:	cmp	r3, #0
   13d34:	movne	sl, r7
   13d38:	ldreq	sl, [r6, #12]
   13d3c:	strne	r7, [r6, #12]
   13d40:	b	137b0 <__assert_fail@plt+0x23cc>
   13d44:	ldr	r0, [pc, #2368]	; 1468c <__assert_fail@plt+0x32a8>
   13d48:	ldr	r2, [pc, #2320]	; 14660 <__assert_fail@plt+0x327c>
   13d4c:	cmp	r3, #0
   13d50:	mov	r1, #1
   13d54:	moveq	r2, r0
   13d58:	str	r2, [r6, #8]
   13d5c:	str	r1, [r4, #24]
   13d60:	strb	r1, [r4, #153]	; 0x99
   13d64:	mov	r2, #1
   13d68:	strb	r2, [r4, #104]	; 0x68
   13d6c:	ldr	r2, [r6, #8]
   13d70:	mov	fp, #1
   13d74:	ldrb	r2, [r2]
   13d78:	cmp	r2, #9
   13d7c:	bne	137f4 <__assert_fail@plt+0x2410>
   13d80:	b	137fc <__assert_fail@plt+0x2418>
   13d84:	cmp	r7, #0
   13d88:	ble	14ee4 <__assert_fail@plt+0x3b00>
   13d8c:	ldr	r9, [r8]
   13d90:	ldr	r1, [pc, #2236]	; 14654 <__assert_fail@plt+0x3270>
   13d94:	mov	r0, r9
   13d98:	bl	110c0 <strcmp@plt>
   13d9c:	cmp	r0, #0
   13da0:	bne	14ec8 <__assert_fail@plt+0x3ae4>
   13da4:	mov	r2, #5
   13da8:	ldr	r1, [pc, #2256]	; 14680 <__assert_fail@plt+0x329c>
   13dac:	bl	11168 <dcgettext@plt>
   13db0:	ldr	r3, [pc, #2252]	; 14684 <__assert_fail@plt+0x32a0>
   13db4:	mov	r2, #1
   13db8:	strb	r2, [r4, #168]	; 0xa8
   13dbc:	ldr	r7, [r3]
   13dc0:	str	r7, [r5]
   13dc4:	str	r0, [r5, #4]
   13dc8:	cmp	r7, #0
   13dcc:	beq	14d1c <__assert_fail@plt+0x3938>
   13dd0:	mov	r0, r7
   13dd4:	mov	r1, #2
   13dd8:	bl	15bd4 <__assert_fail@plt+0x47f0>
   13ddc:	ldr	r3, [r4, #164]	; 0xa4
   13de0:	mov	r7, #0
   13de4:	add	r3, r3, #1
   13de8:	ldr	r0, [r5]
   13dec:	str	r7, [r5, #8]
   13df0:	strb	r7, [r5, #37]	; 0x25
   13df4:	ldr	r8, [r8]
   13df8:	str	r3, [r4, #164]	; 0xa4
   13dfc:	bl	11300 <fileno@plt>
   13e00:	mov	r1, r0
   13e04:	mov	r0, r8
   13e08:	bl	12424 <__assert_fail@plt+0x1040>
   13e0c:	str	r7, [r5, #24]
   13e10:	ldr	r3, [r6, #12]
   13e14:	ldr	r1, [r5, #4]
   13e18:	subs	r3, r3, #1
   13e1c:	ldr	r0, [r5]
   13e20:	beq	13a68 <__assert_fail@plt+0x2684>
   13e24:	add	r5, r5, #80	; 0x50
   13e28:	mov	r2, #0
   13e2c:	subs	r3, r3, #1
   13e30:	str	r1, [r5, #-36]	; 0xffffffdc
   13e34:	str	r0, [r5, #-40]	; 0xffffffd8
   13e38:	str	r2, [r5, #-32]	; 0xffffffe0
   13e3c:	strb	r2, [r5, #-3]
   13e40:	str	r2, [r5, #-16]
   13e44:	add	r5, r5, #40	; 0x28
   13e48:	bne	13e2c <__assert_fail@plt+0x2a48>
   13e4c:	b	13a68 <__assert_fail@plt+0x2684>
   13e50:	cmp	r2, #0
   13e54:	movne	r7, r8
   13e58:	bne	13bb4 <__assert_fail@plt+0x27d0>
   13e5c:	ldr	r3, [r4, #72]	; 0x48
   13e60:	strb	r8, [r4, #105]	; 0x69
   13e64:	cmp	r3, #0
   13e68:	ble	13e80 <__assert_fail@plt+0x2a9c>
   13e6c:	mov	ip, r8
   13e70:	b	13c0c <__assert_fail@plt+0x2828>
   13e74:	mov	r3, #0
   13e78:	str	r3, [r4, #72]	; 0x48
   13e7c:	strb	r3, [r4, #105]	; 0x69
   13e80:	mov	r2, #5
   13e84:	ldr	r1, [pc, #2008]	; 14664 <__assert_fail@plt+0x3280>
   13e88:	mov	r0, #0
   13e8c:	bl	11168 <dcgettext@plt>
   13e90:	ldrd	r2, [sp, #16]
   13e94:	mov	r1, #0
   13e98:	strd	r2, [sp, #8]
   13e9c:	ldrd	r2, [sp, #24]
   13ea0:	strd	r2, [sp]
   13ea4:	mov	r2, r0
   13ea8:	mov	r0, r1
   13eac:	bl	11204 <error@plt>
   13eb0:	ldr	r3, [r4, #72]	; 0x48
   13eb4:	cmp	r3, #0
   13eb8:	bgt	14ff0 <__assert_fail@plt+0x3c0c>
   13ebc:	add	sp, sp, #36	; 0x24
   13ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec4:	ldr	lr, [r4, #24]
   13ec8:	cmp	r7, #1
   13ecc:	ldrb	r9, [r4, #163]	; 0xa3
   13ed0:	mov	r2, sl
   13ed4:	add	r3, r3, lr
   13ed8:	ble	14d7c <__assert_fail@plt+0x3998>
   13edc:	ldr	r1, [pc, #1908]	; 14658 <__assert_fail@plt+0x3274>
   13ee0:	cmp	ip, #0
   13ee4:	ldr	r0, [pc, #1920]	; 1466c <__assert_fail@plt+0x3288>
   13ee8:	ldrb	r8, [r4, #64]	; 0x40
   13eec:	movne	r0, r1
   13ef0:	ldr	r1, [pc, #1904]	; 14668 <__assert_fail@plt+0x3284>
   13ef4:	ldr	fp, [pc, #1888]	; 1465c <__assert_fail@plt+0x3278>
   13ef8:	moveq	fp, r1
   13efc:	cmp	r9, #0
   13f00:	eor	r8, r8, #1
   13f04:	ldr	r1, [r4, #144]	; 0x90
   13f08:	bne	14ba0 <__assert_fail@plt+0x37bc>
   13f0c:	cmp	sl, #0
   13f10:	bne	14f80 <__assert_fail@plt+0x3b9c>
   13f14:	mov	r2, r5
   13f18:	mov	r1, #1
   13f1c:	mov	lr, sl
   13f20:	add	r1, r1, #1
   13f24:	cmp	r1, r7
   13f28:	str	r3, [r2, #32]
   13f2c:	str	fp, [r2, #12]
   13f30:	str	r0, [r2, #16]
   13f34:	strb	lr, [r2, #36]	; 0x24
   13f38:	mov	r3, #0
   13f3c:	add	r2, r2, #40	; 0x28
   13f40:	bne	13f20 <__assert_fail@plt+0x2b3c>
   13f44:	add	r0, r7, r7, lsl #2
   13f48:	mov	r9, sl
   13f4c:	add	r0, r5, r0, lsl #3
   13f50:	sub	r0, r0, #40	; 0x28
   13f54:	mov	lr, r7
   13f58:	cmp	ip, #0
   13f5c:	beq	14b94 <__assert_fail@plt+0x37b0>
   13f60:	ldrb	r8, [r4, #161]	; 0xa1
   13f64:	ldr	sl, [pc, #1776]	; 1465c <__assert_fail@plt+0x3278>
   13f68:	ldr	r1, [pc, #1784]	; 14668 <__assert_fail@plt+0x3284>
   13f6c:	cmp	r8, #0
   13f70:	ldr	r8, [pc, #1760]	; 14658 <__assert_fail@plt+0x3274>
   13f74:	ldr	r2, [pc, #1776]	; 1466c <__assert_fail@plt+0x3288>
   13f78:	movne	r1, sl
   13f7c:	movne	r2, r8
   13f80:	cmp	r9, #0
   13f84:	str	r1, [r0, #12]
   13f88:	str	r2, [r0, #16]
   13f8c:	beq	13fa0 <__assert_fail@plt+0x2bbc>
   13f90:	ldrb	r9, [r4, #64]	; 0x40
   13f94:	eor	r9, r9, #1
   13f98:	cmp	lr, #1
   13f9c:	orreq	r9, r9, #1
   13fa0:	ldr	r2, [r6, #44]	; 0x2c
   13fa4:	cmp	ip, #0
   13fa8:	strb	r9, [r0, #36]	; 0x24
   13fac:	str	r3, [r0, #32]
   13fb0:	str	r2, [r4, #92]	; 0x5c
   13fb4:	bne	1441c <__assert_fail@plt+0x3038>
   13fb8:	cmp	r7, #0
   13fbc:	beq	13ebc <__assert_fail@plt+0x2ad8>
   13fc0:	ldr	r0, [r4, #156]	; 0x9c
   13fc4:	mov	r1, r7
   13fc8:	mov	r3, r5
   13fcc:	ldr	r2, [r3, #8]
   13fd0:	add	r3, r3, #40	; 0x28
   13fd4:	cmp	r2, #0
   13fd8:	moveq	r2, r0
   13fdc:	movne	r2, #0
   13fe0:	subs	r1, r1, #1
   13fe4:	str	r2, [r3, #-12]
   13fe8:	bne	13fcc <__assert_fail@plt+0x2be8>
   13fec:	cmp	r7, #0
   13ff0:	beq	13ebc <__assert_fail@plt+0x2ad8>
   13ff4:	ldrb	r3, [r6, #40]	; 0x28
   13ff8:	cmp	r3, #0
   13ffc:	bne	14a9c <__assert_fail@plt+0x36b8>
   14000:	mov	r2, r3
   14004:	ldr	r1, [r5, #8]
   14008:	add	r3, r3, #1
   1400c:	cmp	r1, #1
   14010:	addls	r2, r2, #1
   14014:	cmp	r7, r3
   14018:	add	r5, r5, #40	; 0x28
   1401c:	bne	14004 <__assert_fail@plt+0x2c20>
   14020:	cmp	r2, #0
   14024:	beq	13ebc <__assert_fail@plt+0x2ad8>
   14028:	ldrb	r3, [r6, #56]	; 0x38
   1402c:	mov	r2, #0
   14030:	strb	r2, [r4, #138]	; 0x8a
   14034:	cmp	r3, #0
   14038:	movne	r3, #1
   1403c:	strbne	r3, [r4, #136]	; 0x88
   14040:	ldrb	r3, [r4, #160]	; 0xa0
   14044:	cmp	r3, r2
   14048:	ldr	r3, [r4, #156]	; 0x9c
   1404c:	str	r3, [sp, #16]
   14050:	lslne	r3, r3, #1
   14054:	strne	r3, [sp, #16]
   14058:	cmp	r3, #0
   1405c:	movgt	r8, #0
   14060:	movgt	r7, r8
   14064:	ble	14f34 <__assert_fail@plt+0x3b50>
   14068:	ldr	ip, [r6, #12]
   1406c:	ldr	r5, [r4, #68]	; 0x44
   14070:	cmp	ip, #0
   14074:	mov	r2, ip
   14078:	beq	1432c <__assert_fail@plt+0x2f48>
   1407c:	ldrb	r3, [r6, #40]	; 0x28
   14080:	cmp	r3, #0
   14084:	bne	1493c <__assert_fail@plt+0x3558>
   14088:	mov	r1, r3
   1408c:	mov	r0, r5
   14090:	ldr	lr, [r0, #8]
   14094:	add	r3, r3, #1
   14098:	cmp	lr, #1
   1409c:	addls	r1, r1, #1
   140a0:	cmp	r3, ip
   140a4:	add	r0, r0, #40	; 0x28
   140a8:	bne	14090 <__assert_fail@plt+0x2cac>
   140ac:	cmp	r1, #0
   140b0:	beq	1432c <__assert_fail@plt+0x2f48>
   140b4:	mov	r3, #1
   140b8:	cmp	ip, #0
   140bc:	str	r7, [r4, #100]	; 0x64
   140c0:	str	r7, [r4, #112]	; 0x70
   140c4:	str	r7, [r4, #108]	; 0x6c
   140c8:	strb	r7, [r4, #138]	; 0x8a
   140cc:	strb	r7, [r4, #152]	; 0x98
   140d0:	strb	r3, [r4, #154]	; 0x9a
   140d4:	ble	14784 <__assert_fail@plt+0x33a0>
   140d8:	add	r5, r5, #16
   140dc:	mov	fp, #1
   140e0:	b	14138 <__assert_fail@plt+0x2d54>
   140e4:	ldr	r3, [r5, #-8]
   140e8:	cmp	r3, #1
   140ec:	beq	1414c <__assert_fail@plt+0x2d68>
   140f0:	ldrb	r3, [r4, #64]	; 0x40
   140f4:	cmp	r3, #0
   140f8:	beq	14110 <__assert_fail@plt+0x2d2c>
   140fc:	ldrb	r3, [r4, #154]	; 0x9a
   14100:	cmp	r3, #0
   14104:	beq	14828 <__assert_fail@plt+0x3444>
   14108:	mov	r3, #1
   1410c:	strb	r3, [r4, #152]	; 0x98
   14110:	ldrb	r3, [r4, #153]	; 0x99
   14114:	cmp	r3, #0
   14118:	ldrne	r3, [r4, #108]	; 0x6c
   1411c:	addne	r3, r3, #1
   14120:	strne	r3, [r4, #108]	; 0x6c
   14124:	ldr	r2, [r6, #12]
   14128:	add	fp, fp, #1
   1412c:	cmp	fp, r2
   14130:	add	r5, r5, #40	; 0x28
   14134:	bgt	148c0 <__assert_fail@plt+0x34dc>
   14138:	ldr	r3, [r5, #12]
   1413c:	str	r7, [r4, #80]	; 0x50
   14140:	cmp	r3, #0
   14144:	sub	r9, r5, #16
   14148:	ble	140e4 <__assert_fail@plt+0x2d00>
   1414c:	ldr	r2, [r5, #16]
   14150:	ldr	r3, [r5, #-4]
   14154:	mov	r0, r9
   14158:	strb	r7, [r4, #137]	; 0x89
   1415c:	str	r2, [r4, #148]	; 0x94
   14160:	blx	r3
   14164:	cmp	r0, #0
   14168:	ldreq	sl, [r5, #-16]
   1416c:	beq	14228 <__assert_fail@plt+0x2e44>
   14170:	ldr	r3, [r5, #12]
   14174:	sub	r3, r3, #1
   14178:	ldrb	ip, [r4, #138]	; 0x8a
   1417c:	cmp	r3, #0
   14180:	str	r3, [r5, #12]
   14184:	orr	r8, ip, r8
   14188:	ble	1472c <__assert_fail@plt+0x3348>
   1418c:	ldrb	r3, [r4, #64]	; 0x40
   14190:	cmp	r3, #0
   14194:	beq	14110 <__assert_fail@plt+0x2d2c>
   14198:	ldr	r3, [r5, #-8]
   1419c:	cmp	r3, #0
   141a0:	beq	14110 <__assert_fail@plt+0x2d2c>
   141a4:	ldrb	r2, [r4, #154]	; 0x9a
   141a8:	cmp	r2, #0
   141ac:	bne	14108 <__assert_fail@plt+0x2d24>
   141b0:	cmp	r3, #3
   141b4:	beq	141cc <__assert_fail@plt+0x2de8>
   141b8:	cmp	r3, #2
   141bc:	bne	14110 <__assert_fail@plt+0x2d2c>
   141c0:	ldrb	r3, [r4, #137]	; 0x89
   141c4:	cmp	r3, #0
   141c8:	beq	14110 <__assert_fail@plt+0x2d2c>
   141cc:	ldr	r9, [r5, #16]
   141d0:	ldr	sl, [r4, #24]
   141d4:	str	r9, [r4, #148]	; 0x94
   141d8:	cmp	r9, sl
   141dc:	bgt	1499c <__assert_fail@plt+0x35b8>
   141e0:	ldrb	r3, [r4, #153]	; 0x99
   141e4:	cmp	r3, #0
   141e8:	bne	148ac <__assert_fail@plt+0x34c8>
   141ec:	ldrb	r3, [r5, #20]
   141f0:	cmp	r3, #0
   141f4:	beq	14124 <__assert_fail@plt+0x2d40>
   141f8:	mov	r0, r5
   141fc:	bl	12864 <__assert_fail@plt+0x1480>
   14200:	b	14110 <__assert_fail@plt+0x2d2c>
   14204:	add	r2, r3, #1
   14208:	str	r2, [sl, #4]
   1420c:	ldrb	r0, [r3]
   14210:	cmp	r0, #10
   14214:	beq	14170 <__assert_fail@plt+0x2d8c>
   14218:	cmp	r0, #12
   1421c:	beq	14690 <__assert_fail@plt+0x32ac>
   14220:	cmn	r0, #1
   14224:	beq	14814 <__assert_fail@plt+0x3430>
   14228:	ldr	r3, [sl, #4]
   1422c:	ldr	r2, [sl, #8]
   14230:	cmp	r3, r2
   14234:	bcc	14204 <__assert_fail@plt+0x2e20>
   14238:	mov	r0, sl
   1423c:	bl	1133c <__uflow@plt>
   14240:	b	14210 <__assert_fail@plt+0x2e2c>
   14244:	mov	r3, #0
   14248:	mov	r1, r3
   1424c:	ldr	r0, [r5, #8]
   14250:	cmp	r0, #1
   14254:	bls	14270 <__assert_fail@plt+0x2e8c>
   14258:	ldr	r0, [r5, #24]
   1425c:	cmp	r0, #0
   14260:	ble	14274 <__assert_fail@plt+0x2e90>
   14264:	ldr	r0, [r5, #28]
   14268:	cmp	r0, #0
   1426c:	ble	14274 <__assert_fail@plt+0x2e90>
   14270:	add	r1, r1, #1
   14274:	add	r3, r3, #1
   14278:	cmp	r2, r3
   1427c:	add	r5, r5, #40	; 0x28
   14280:	bne	1424c <__assert_fail@plt+0x2e68>
   14284:	cmp	r1, #0
   14288:	beq	147b8 <__assert_fail@plt+0x33d4>
   1428c:	ldrb	r3, [r4, #160]	; 0xa0
   14290:	cmp	r3, #0
   14294:	beq	142d4 <__assert_fail@plt+0x2ef0>
   14298:	cmp	r8, #0
   1429c:	beq	142d4 <__assert_fail@plt+0x2ef0>
   142a0:	ldr	r3, [pc, #968]	; 14670 <__assert_fail@plt+0x328c>
   142a4:	ldr	r0, [r3]
   142a8:	ldr	r3, [r0, #20]
   142ac:	ldr	r2, [r0, #24]
   142b0:	cmp	r3, r2
   142b4:	addcc	r1, r3, #1
   142b8:	movcc	r2, #10
   142bc:	strcc	r1, [r0, #20]
   142c0:	strbcc	r2, [r3]
   142c4:	bcs	14aec <__assert_fail@plt+0x3708>
   142c8:	ldr	r3, [sp, #16]
   142cc:	sub	r3, r3, #1
   142d0:	str	r3, [sp, #16]
   142d4:	ldr	r3, [sp, #16]
   142d8:	cmp	r3, #0
   142dc:	bgt	14068 <__assert_fail@plt+0x2c84>
   142e0:	ldr	r3, [sp, #16]
   142e4:	cmp	r3, #0
   142e8:	bne	1432c <__assert_fail@plt+0x2f48>
   142ec:	ldr	r0, [r6, #12]
   142f0:	ldr	r3, [r4, #68]	; 0x44
   142f4:	cmp	r0, #0
   142f8:	ble	1432c <__assert_fail@plt+0x2f48>
   142fc:	mov	r2, #1
   14300:	add	r0, r0, r2
   14304:	mov	ip, r2
   14308:	ldr	r1, [r3, #8]
   1430c:	add	r2, r2, #1
   14310:	cmp	r1, #0
   14314:	strbeq	ip, [r3, #37]	; 0x25
   14318:	cmp	r2, r0
   1431c:	add	r3, r3, #40	; 0x28
   14320:	bne	14308 <__assert_fail@plt+0x2f24>
   14324:	mov	r3, #0
   14328:	str	r3, [sp, #16]
   1432c:	cmp	r8, #0
   14330:	strb	r8, [r4, #138]	; 0x8a
   14334:	beq	14344 <__assert_fail@plt+0x2f60>
   14338:	ldrb	r3, [r6, #56]	; 0x38
   1433c:	cmp	r3, #0
   14340:	bne	14b54 <__assert_fail@plt+0x3770>
   14344:	ldrb	r3, [r4, #139]	; 0x8b
   14348:	cmp	r3, #0
   1434c:	beq	1438c <__assert_fail@plt+0x2fa8>
   14350:	ldrb	r3, [r4, #140]	; 0x8c
   14354:	cmp	r3, #0
   14358:	beq	1438c <__assert_fail@plt+0x2fa8>
   1435c:	ldr	r7, [pc, #780]	; 14670 <__assert_fail@plt+0x328c>
   14360:	ldr	r0, [r7]
   14364:	ldr	r3, [r0, #20]
   14368:	ldr	r2, [r0, #24]
   1436c:	cmp	r3, r2
   14370:	addcc	r1, r3, #1
   14374:	movcc	r2, #12
   14378:	strcc	r1, [r0, #20]
   1437c:	strbcc	r2, [r3]
   14380:	bcs	14fd8 <__assert_fail@plt+0x3bf4>
   14384:	mov	r3, #0
   14388:	strb	r3, [r4, #140]	; 0x8c
   1438c:	ldrd	r2, [r4, #128]	; 0x80
   14390:	ldrd	r0, [r6]
   14394:	adds	r2, r2, #1
   14398:	adc	r3, r3, #0
   1439c:	cmp	r3, r1
   143a0:	cmpeq	r2, r0
   143a4:	strd	r2, [r4, #128]	; 0x80
   143a8:	bhi	13ebc <__assert_fail@plt+0x2ad8>
   143ac:	ldr	r7, [r6, #12]
   143b0:	ldr	r5, [r4, #68]	; 0x44
   143b4:	cmp	r7, #0
   143b8:	beq	143fc <__assert_fail@plt+0x3018>
   143bc:	mov	ip, #0
   143c0:	ldr	r0, [r4, #72]	; 0x48
   143c4:	mov	r8, ip
   143c8:	mov	r2, r7
   143cc:	mov	r3, r5
   143d0:	mov	lr, #1
   143d4:	ldr	r1, [r3, #8]
   143d8:	add	r3, r3, #40	; 0x28
   143dc:	cmp	r1, #2
   143e0:	streq	r8, [r3, #-32]	; 0xffffffe0
   143e4:	addeq	r0, r0, #1
   143e8:	moveq	ip, lr
   143ec:	subs	r2, r2, #1
   143f0:	bne	143d4 <__assert_fail@plt+0x2ff0>
   143f4:	cmp	ip, #0
   143f8:	strne	r0, [r4, #72]	; 0x48
   143fc:	ldrb	r3, [r6, #40]	; 0x28
   14400:	cmp	r3, #0
   14404:	beq	13fb8 <__assert_fail@plt+0x2bd4>
   14408:	ldr	r3, [r5, #8]
   1440c:	cmp	r3, #3
   14410:	moveq	r3, #0
   14414:	movne	r3, #1
   14418:	str	r3, [r4, #72]	; 0x48
   1441c:	ldrb	ip, [r4, #161]	; 0xa1
   14420:	mov	r2, #0
   14424:	str	r2, [r4]
   14428:	cmp	ip, r2
   1442c:	bne	14af8 <__assert_fail@plt+0x3714>
   14430:	sub	r3, r7, #1
   14434:	cmp	r3, r2
   14438:	str	r3, [sp, #16]
   1443c:	ble	14b18 <__assert_fail@plt+0x3734>
   14440:	add	r0, r3, #1
   14444:	mov	r2, r5
   14448:	mov	r3, #1
   1444c:	mov	r1, #0
   14450:	add	r3, r3, #1
   14454:	cmp	r3, r0
   14458:	str	r1, [r2, #24]
   1445c:	add	r2, r2, #40	; 0x28
   14460:	bne	14450 <__assert_fail@plt+0x306c>
   14464:	ldr	r2, [r4, #72]	; 0x48
   14468:	cmp	r2, #0
   1446c:	beq	14fe4 <__assert_fail@plt+0x3c00>
   14470:	mov	r7, #0
   14474:	mov	r8, #1
   14478:	mov	sl, r7
   1447c:	ldr	r9, [r4, #156]	; 0x9c
   14480:	str	sl, [r5, #20]
   14484:	cmp	r9, #0
   14488:	beq	1450c <__assert_fail@plt+0x3128>
   1448c:	ldr	r3, [r5, #8]
   14490:	b	144a8 <__assert_fail@plt+0x30c4>
   14494:	subs	r9, r9, #1
   14498:	beq	1450c <__assert_fail@plt+0x3128>
   1449c:	ldr	r2, [r4, #72]	; 0x48
   144a0:	cmp	r2, #0
   144a4:	beq	1452c <__assert_fail@plt+0x3148>
   144a8:	cmp	r3, #0
   144ac:	bne	14494 <__assert_fail@plt+0x30b0>
   144b0:	mov	r0, r5
   144b4:	str	r3, [r4, #80]	; 0x50
   144b8:	bl	13190 <__assert_fail@plt+0x1dac>
   144bc:	cmp	r0, #0
   144c0:	ldreq	fp, [r5]
   144c4:	beq	14630 <__assert_fail@plt+0x324c>
   144c8:	ldr	r3, [r5, #8]
   144cc:	cmp	r3, #0
   144d0:	bne	1492c <__assert_fail@plt+0x3548>
   144d4:	ldr	r1, [r4]
   144d8:	ldr	r2, [r5, #24]
   144dc:	ldr	ip, [r4, #172]	; 0xac
   144e0:	add	r2, r2, #1
   144e4:	ldr	r0, [r4, #176]	; 0xb0
   144e8:	str	r2, [r5, #24]
   144ec:	str	r7, [ip, sl, lsl #2]
   144f0:	lsl	r2, sl, #2
   144f4:	mov	r7, r1
   144f8:	ldr	r1, [r4, #80]	; 0x50
   144fc:	subs	r9, r9, #1
   14500:	str	r1, [r0, r2]
   14504:	add	sl, sl, #1
   14508:	bne	1449c <__assert_fail@plt+0x30b8>
   1450c:	ldr	r3, [sp, #16]
   14510:	add	r8, r8, #1
   14514:	cmp	r3, r8
   14518:	add	r5, r5, #40	; 0x28
   1451c:	blt	1452c <__assert_fail@plt+0x3148>
   14520:	ldr	r3, [r4, #72]	; 0x48
   14524:	cmp	r3, #0
   14528:	bne	1447c <__assert_fail@plt+0x3098>
   1452c:	ldrb	ip, [r4, #161]	; 0xa1
   14530:	mov	r2, r7
   14534:	ldr	r5, [r4, #68]	; 0x44
   14538:	ldr	r7, [r6, #12]
   1453c:	lsl	r1, sl, #2
   14540:	ldr	r0, [r4, #172]	; 0xac
   14544:	cmp	ip, #0
   14548:	subeq	r3, r7, #1
   1454c:	str	r2, [r0, r1]
   14550:	beq	14b20 <__assert_fail@plt+0x373c>
   14554:	cmp	r7, #0
   14558:	ble	145b4 <__assert_fail@plt+0x31d0>
   1455c:	mov	r1, r7
   14560:	mov	r0, sl
   14564:	bl	20254 <__assert_fail@plt+0xee70>
   14568:	mov	r1, r7
   1456c:	mov	r8, r0
   14570:	mov	r0, sl
   14574:	bl	20474 <__assert_fail@plt+0xf090>
   14578:	add	r9, r8, #1
   1457c:	add	lr, r7, #1
   14580:	mov	r2, r5
   14584:	mov	r0, #0
   14588:	mov	r3, #1
   1458c:	cmp	r3, r1
   14590:	add	r3, r3, #1
   14594:	movle	ip, r9
   14598:	movgt	ip, r8
   1459c:	cmp	r3, lr
   145a0:	str	r0, [r2, #20]
   145a4:	str	ip, [r2, #24]
   145a8:	add	r0, r0, ip
   145ac:	add	r2, r2, #40	; 0x28
   145b0:	bne	1458c <__assert_fail@plt+0x31a8>
   145b4:	subs	r1, r7, #1
   145b8:	moveq	r3, r5
   145bc:	moveq	r7, #1
   145c0:	beq	14b3c <__assert_fail@plt+0x3758>
   145c4:	mov	ip, #1
   145c8:	mov	r2, r1
   145cc:	mov	r3, r5
   145d0:	ldr	r0, [r3, #24]
   145d4:	subs	r2, r2, #1
   145d8:	str	r0, [r3, #28]
   145dc:	add	r3, r3, #40	; 0x28
   145e0:	bne	145d0 <__assert_fail@plt+0x31ec>
   145e4:	add	r3, r1, r1, lsl #2
   145e8:	cmp	ip, #0
   145ec:	add	r3, r5, r3, lsl #3
   145f0:	bne	14b3c <__assert_fail@plt+0x3758>
   145f4:	ldr	r2, [r3, #8]
   145f8:	cmp	r2, #0
   145fc:	movne	r2, #0
   14600:	ldreq	r2, [r4, #156]	; 0x9c
   14604:	str	r2, [r3, #28]
   14608:	b	13fec <__assert_fail@plt+0x2c08>
   1460c:	add	r2, r3, #1
   14610:	str	r2, [fp, #4]
   14614:	ldrb	r0, [r3]
   14618:	cmp	r0, #10
   1461c:	beq	144c8 <__assert_fail@plt+0x30e4>
   14620:	cmp	r0, #12
   14624:	beq	149ec <__assert_fail@plt+0x3608>
   14628:	cmn	r0, #1
   1462c:	beq	14a80 <__assert_fail@plt+0x369c>
   14630:	ldr	r3, [fp, #4]
   14634:	ldr	r2, [fp, #8]
   14638:	cmp	r3, r2
   1463c:	bcc	1460c <__assert_fail@plt+0x3228>
   14640:	mov	r0, fp
   14644:	bl	1133c <__uflow@plt>
   14648:	b	14618 <__assert_fail@plt+0x3234>
   1464c:	andeq	r3, r3, r0, asr #2
   14650:	strdeq	r3, [r3], -r0
   14654:	andeq	r0, r2, r8, ror r9
   14658:	strdeq	r2, [r1], -r4
   1465c:	ldrdeq	r5, [r1], -r4
   14660:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   14664:	strdeq	r0, [r2], -ip
   14668:	muleq	r1, r0, r1
   1466c:	andeq	r5, r1, r4, lsl r4
   14670:	andeq	r3, r3, r4, ror #3
   14674:	ldrdeq	r0, [r2], -r4
   14678:	andeq	r1, r2, r8, lsl #30
   1467c:	andeq	r1, r2, ip, asr lr
   14680:	andeq	r0, r2, ip, ror #19
   14684:	andeq	r3, r3, r0, ror #3
   14688:	andeq	r0, r2, r8, asr #19
   1468c:	andeq	r0, r2, ip, asr #19
   14690:	ldr	r3, [sl, #4]
   14694:	ldr	r2, [sl, #8]
   14698:	cmp	r3, r2
   1469c:	bcs	14990 <__assert_fail@plt+0x35ac>
   146a0:	add	r2, r3, #1
   146a4:	str	r2, [sl, #4]
   146a8:	ldrb	r0, [r3]
   146ac:	cmp	r0, #10
   146b0:	beq	146bc <__assert_fail@plt+0x32d8>
   146b4:	mov	r1, sl
   146b8:	bl	112b8 <ungetc@plt>
   146bc:	ldrb	r3, [r4, #139]	; 0x8b
   146c0:	cmp	r3, #0
   146c4:	movne	r3, #1
   146c8:	strbne	r3, [r4, #140]	; 0x8c
   146cc:	ldrb	r3, [r4, #64]	; 0x40
   146d0:	cmp	r3, #0
   146d4:	movne	r3, #2
   146d8:	strne	r3, [r5, #-8]
   146dc:	bne	14710 <__assert_fail@plt+0x332c>
   146e0:	ldr	r3, [r6, #12]
   146e4:	ldr	r2, [r4, #68]	; 0x44
   146e8:	cmp	r3, #0
   146ec:	beq	14710 <__assert_fail@plt+0x332c>
   146f0:	ldrb	r1, [r6, #40]	; 0x28
   146f4:	cmp	r1, #0
   146f8:	movne	r1, #1
   146fc:	moveq	r1, #2
   14700:	subs	r3, r3, #1
   14704:	str	r1, [r2, #8]
   14708:	add	r2, r2, #40	; 0x28
   1470c:	bne	14700 <__assert_fail@plt+0x331c>
   14710:	ldrb	ip, [r4, #138]	; 0x8a
   14714:	ldr	r3, [r4, #72]	; 0x48
   14718:	mvn	r2, #0
   1471c:	orr	r8, ip, r8
   14720:	sub	r3, r3, #1
   14724:	str	r2, [r5, #12]
   14728:	str	r3, [r4, #72]	; 0x48
   1472c:	ldr	r2, [r6, #12]
   14730:	ldr	r3, [r4, #68]	; 0x44
   14734:	cmp	r2, #0
   14738:	beq	14770 <__assert_fail@plt+0x338c>
   1473c:	ldrb	r1, [r6, #40]	; 0x28
   14740:	cmp	r1, #0
   14744:	bne	147c8 <__assert_fail@plt+0x33e4>
   14748:	mov	r0, r1
   1474c:	ldr	lr, [r3, #8]
   14750:	add	r1, r1, #1
   14754:	cmp	lr, #1
   14758:	addls	r0, r0, #1
   1475c:	cmp	r2, r1
   14760:	add	r3, r3, #40	; 0x28
   14764:	bne	1474c <__assert_fail@plt+0x3368>
   14768:	cmp	r0, #0
   1476c:	bne	1418c <__assert_fail@plt+0x2da8>
   14770:	cmp	ip, #0
   14774:	bne	148cc <__assert_fail@plt+0x34e8>
   14778:	ldr	r5, [r4, #68]	; 0x44
   1477c:	cmp	r2, #0
   14780:	beq	147b8 <__assert_fail@plt+0x33d4>
   14784:	ldrb	r3, [r6, #40]	; 0x28
   14788:	cmp	r3, #0
   1478c:	bne	14244 <__assert_fail@plt+0x2e60>
   14790:	mov	r1, r3
   14794:	ldr	r0, [r5, #8]
   14798:	add	r3, r3, #1
   1479c:	cmp	r0, #1
   147a0:	addls	r1, r1, #1
   147a4:	cmp	r2, r3
   147a8:	add	r5, r5, #40	; 0x28
   147ac:	bne	14794 <__assert_fail@plt+0x33b0>
   147b0:	cmp	r1, #0
   147b4:	bne	1428c <__assert_fail@plt+0x2ea8>
   147b8:	ldrb	r3, [r6, #56]	; 0x38
   147bc:	cmp	r3, #0
   147c0:	bne	1428c <__assert_fail@plt+0x2ea8>
   147c4:	b	142e0 <__assert_fail@plt+0x2efc>
   147c8:	mov	r1, #0
   147cc:	mov	r0, r1
   147d0:	ldr	lr, [r3, #8]
   147d4:	cmp	lr, #1
   147d8:	bls	147f4 <__assert_fail@plt+0x3410>
   147dc:	ldr	lr, [r3, #24]
   147e0:	cmp	lr, #0
   147e4:	ble	147f8 <__assert_fail@plt+0x3414>
   147e8:	ldr	lr, [r3, #28]
   147ec:	cmp	lr, #0
   147f0:	ble	147f8 <__assert_fail@plt+0x3414>
   147f4:	add	r0, r0, #1
   147f8:	add	r1, r1, #1
   147fc:	cmp	r2, r1
   14800:	add	r3, r3, #40	; 0x28
   14804:	bne	147d0 <__assert_fail@plt+0x33ec>
   14808:	cmp	r0, #0
   1480c:	bne	1418c <__assert_fail@plt+0x2da8>
   14810:	b	14770 <__assert_fail@plt+0x338c>
   14814:	mov	r0, r9
   14818:	bl	125cc <__assert_fail@plt+0x11e8>
   1481c:	ldr	r3, [r5, #12]
   14820:	sub	r3, r3, #1
   14824:	b	14178 <__assert_fail@plt+0x2d94>
   14828:	ldr	r9, [r5, #16]
   1482c:	ldr	sl, [r4, #24]
   14830:	str	r9, [r4, #148]	; 0x94
   14834:	cmp	r9, sl
   14838:	ble	141e0 <__assert_fail@plt+0x2dfc>
   1483c:	ldrb	r3, [r4, #120]	; 0x78
   14840:	sub	sl, r9, sl
   14844:	ldr	r9, [r4, #100]	; 0x64
   14848:	cmp	r3, #0
   1484c:	bne	14984 <__assert_fail@plt+0x35a0>
   14850:	add	r9, r9, #1
   14854:	cmp	sl, r9
   14858:	blt	14898 <__assert_fail@plt+0x34b4>
   1485c:	ldr	r3, [pc, #-500]	; 14670 <__assert_fail@plt+0x328c>
   14860:	ldr	r0, [r3]
   14864:	ldr	r2, [r0, #24]
   14868:	ldr	r3, [r0, #20]
   1486c:	cmp	r3, r2
   14870:	addcc	r2, r3, #1
   14874:	strcc	r2, [r0, #20]
   14878:	movcc	r2, #32
   1487c:	strbcc	r2, [r3]
   14880:	bcc	14850 <__assert_fail@plt+0x346c>
   14884:	mov	r1, #32
   14888:	add	r9, r9, #1
   1488c:	bl	11348 <__overflow@plt>
   14890:	cmp	sl, r9
   14894:	bge	1485c <__assert_fail@plt+0x3478>
   14898:	str	sl, [r4, #100]	; 0x64
   1489c:	ldrb	r3, [r4, #153]	; 0x99
   148a0:	str	r7, [r4, #148]	; 0x94
   148a4:	cmp	r3, #0
   148a8:	beq	141ec <__assert_fail@plt+0x2e08>
   148ac:	bl	12c18 <__assert_fail@plt+0x1834>
   148b0:	ldrb	r3, [r5, #20]
   148b4:	cmp	r3, #0
   148b8:	beq	14110 <__assert_fail@plt+0x2d2c>
   148bc:	b	141f8 <__assert_fail@plt+0x2e14>
   148c0:	ldrb	ip, [r4, #138]	; 0x8a
   148c4:	cmp	ip, #0
   148c8:	beq	14778 <__assert_fail@plt+0x3394>
   148cc:	ldr	r3, [pc, #-612]	; 14670 <__assert_fail@plt+0x328c>
   148d0:	ldr	r0, [r3]
   148d4:	ldr	r3, [r0, #20]
   148d8:	ldr	r2, [r0, #24]
   148dc:	cmp	r3, r2
   148e0:	addcc	r1, r3, #1
   148e4:	movcc	r2, #10
   148e8:	strcc	r1, [r0, #20]
   148ec:	strbcc	r2, [r3]
   148f0:	bcs	14ae0 <__assert_fail@plt+0x36fc>
   148f4:	ldr	r3, [sp, #16]
   148f8:	ldr	r5, [r4, #68]	; 0x44
   148fc:	sub	r3, r3, #1
   14900:	ldr	r2, [r6, #12]
   14904:	str	r3, [sp, #16]
   14908:	b	1477c <__assert_fail@plt+0x3398>
   1490c:	ldr	r3, [r4, #72]	; 0x48
   14910:	mov	r2, #2
   14914:	sub	r3, r3, #1
   14918:	str	r3, [r4, #72]	; 0x48
   1491c:	mov	r3, #2
   14920:	str	r2, [r5, #8]
   14924:	mov	r2, #0
   14928:	str	r2, [r5, #28]
   1492c:	ldr	r1, [r4]
   14930:	cmp	r1, r7
   14934:	bne	144d8 <__assert_fail@plt+0x30f4>
   14938:	b	14494 <__assert_fail@plt+0x30b0>
   1493c:	mov	r0, #0
   14940:	mov	r1, r0
   14944:	mov	r3, r5
   14948:	ldr	lr, [r3, #8]
   1494c:	cmp	lr, #1
   14950:	bls	1496c <__assert_fail@plt+0x3588>
   14954:	ldr	lr, [r3, #24]
   14958:	cmp	lr, #0
   1495c:	ble	14970 <__assert_fail@plt+0x358c>
   14960:	ldr	lr, [r3, #28]
   14964:	cmp	lr, #0
   14968:	ble	14970 <__assert_fail@plt+0x358c>
   1496c:	add	r1, r1, #1
   14970:	add	r0, r0, #1
   14974:	cmp	r0, ip
   14978:	add	r3, r3, #40	; 0x28
   1497c:	bne	14948 <__assert_fail@plt+0x3564>
   14980:	b	140ac <__assert_fail@plt+0x2cc8>
   14984:	sub	r9, sl, r9
   14988:	str	r9, [r4, #112]	; 0x70
   1498c:	b	1489c <__assert_fail@plt+0x34b8>
   14990:	mov	r0, sl
   14994:	bl	1133c <__uflow@plt>
   14998:	b	146ac <__assert_fail@plt+0x32c8>
   1499c:	ldrb	r3, [r4, #120]	; 0x78
   149a0:	sub	sl, r9, sl
   149a4:	ldr	r9, [r4, #100]	; 0x64
   149a8:	cmp	r3, #0
   149ac:	beq	149dc <__assert_fail@plt+0x35f8>
   149b0:	b	14984 <__assert_fail@plt+0x35a0>
   149b4:	ldr	r3, [pc, #-844]	; 14670 <__assert_fail@plt+0x328c>
   149b8:	ldr	r0, [r3]
   149bc:	ldr	r2, [r0, #24]
   149c0:	ldr	r3, [r0, #20]
   149c4:	cmp	r3, r2
   149c8:	addcc	r2, r3, #1
   149cc:	strcc	r2, [r0, #20]
   149d0:	movcc	r2, #32
   149d4:	strbcc	r2, [r3]
   149d8:	bcs	14a90 <__assert_fail@plt+0x36ac>
   149dc:	add	r9, r9, #1
   149e0:	cmp	sl, r9
   149e4:	bge	149b4 <__assert_fail@plt+0x35d0>
   149e8:	b	14898 <__assert_fail@plt+0x34b4>
   149ec:	ldr	r3, [fp, #4]
   149f0:	ldr	r2, [fp, #8]
   149f4:	cmp	r3, r2
   149f8:	bcs	14b48 <__assert_fail@plt+0x3764>
   149fc:	add	r2, r3, #1
   14a00:	str	r2, [fp, #4]
   14a04:	ldrb	r0, [r3]
   14a08:	cmp	r0, #10
   14a0c:	beq	14a18 <__assert_fail@plt+0x3634>
   14a10:	mov	r1, fp
   14a14:	bl	112b8 <ungetc@plt>
   14a18:	ldrb	r3, [r4, #139]	; 0x8b
   14a1c:	cmp	r3, #0
   14a20:	movne	r3, #1
   14a24:	strbne	r3, [r4, #140]	; 0x8c
   14a28:	ldrb	r3, [r4, #64]	; 0x40
   14a2c:	cmp	r3, #0
   14a30:	bne	1490c <__assert_fail@plt+0x3528>
   14a34:	ldr	r3, [r6, #12]
   14a38:	ldr	r2, [r4, #68]	; 0x44
   14a3c:	cmp	r3, #0
   14a40:	beq	14a64 <__assert_fail@plt+0x3680>
   14a44:	ldrb	r1, [r6, #40]	; 0x28
   14a48:	cmp	r1, #0
   14a4c:	movne	r1, #1
   14a50:	moveq	r1, #2
   14a54:	subs	r3, r3, #1
   14a58:	str	r1, [r2, #8]
   14a5c:	add	r2, r2, #40	; 0x28
   14a60:	bne	14a54 <__assert_fail@plt+0x3670>
   14a64:	ldr	r2, [r4, #72]	; 0x48
   14a68:	mov	r1, #0
   14a6c:	sub	r2, r2, #1
   14a70:	ldr	r3, [r5, #8]
   14a74:	str	r1, [r5, #28]
   14a78:	str	r2, [r4, #72]	; 0x48
   14a7c:	b	144cc <__assert_fail@plt+0x30e8>
   14a80:	mov	r0, r5
   14a84:	bl	125cc <__assert_fail@plt+0x11e8>
   14a88:	ldr	r3, [r5, #8]
   14a8c:	b	144cc <__assert_fail@plt+0x30e8>
   14a90:	mov	r1, #32
   14a94:	bl	11348 <__overflow@plt>
   14a98:	b	149dc <__assert_fail@plt+0x35f8>
   14a9c:	mov	r3, #0
   14aa0:	mov	r2, r3
   14aa4:	ldr	r1, [r5, #8]
   14aa8:	cmp	r1, #1
   14aac:	bls	14ac8 <__assert_fail@plt+0x36e4>
   14ab0:	ldr	r1, [r5, #24]
   14ab4:	cmp	r1, #0
   14ab8:	ble	14acc <__assert_fail@plt+0x36e8>
   14abc:	ldr	r1, [r5, #28]
   14ac0:	cmp	r1, #0
   14ac4:	ble	14acc <__assert_fail@plt+0x36e8>
   14ac8:	add	r2, r2, #1
   14acc:	add	r3, r3, #1
   14ad0:	cmp	r3, r7
   14ad4:	add	r5, r5, #40	; 0x28
   14ad8:	bne	14aa4 <__assert_fail@plt+0x36c0>
   14adc:	b	14020 <__assert_fail@plt+0x2c3c>
   14ae0:	mov	r1, #10
   14ae4:	bl	11348 <__overflow@plt>
   14ae8:	b	148f4 <__assert_fail@plt+0x3510>
   14aec:	mov	r1, #10
   14af0:	bl	11348 <__overflow@plt>
   14af4:	b	142c8 <__assert_fail@plt+0x2ee4>
   14af8:	cmp	r7, #0
   14afc:	strgt	r7, [sp, #16]
   14b00:	movgt	r3, r7
   14b04:	bgt	14440 <__assert_fail@plt+0x305c>
   14b08:	ldr	r1, [r4, #172]	; 0xac
   14b0c:	mov	sl, r2
   14b10:	str	r2, [r1]
   14b14:	b	14554 <__assert_fail@plt+0x3170>
   14b18:	ldr	r2, [r4, #172]	; 0xac
   14b1c:	str	ip, [r2]
   14b20:	cmp	r3, #0
   14b24:	mov	r1, r3
   14b28:	moveq	r7, #1
   14b2c:	moveq	r3, r5
   14b30:	beq	145f4 <__assert_fail@plt+0x3210>
   14b34:	mov	ip, #0
   14b38:	b	145c8 <__assert_fail@plt+0x31e4>
   14b3c:	ldr	r2, [r3, #24]
   14b40:	str	r2, [r3, #28]
   14b44:	b	13fec <__assert_fail@plt+0x2c08>
   14b48:	mov	r0, fp
   14b4c:	bl	1133c <__uflow@plt>
   14b50:	b	14a08 <__assert_fail@plt+0x3624>
   14b54:	ldrb	r3, [r4, #180]	; 0xb4
   14b58:	cmp	r3, #0
   14b5c:	beq	14bf0 <__assert_fail@plt+0x380c>
   14b60:	ldr	r7, [pc, #-1272]	; 14670 <__assert_fail@plt+0x328c>
   14b64:	ldr	r0, [r7]
   14b68:	ldr	r3, [r0, #20]
   14b6c:	ldr	r2, [r0, #24]
   14b70:	cmp	r3, r2
   14b74:	addcc	r1, r3, #1
   14b78:	movcc	r2, #12
   14b7c:	strcc	r1, [r0, #20]
   14b80:	strbcc	r2, [r3]
   14b84:	bcc	1438c <__assert_fail@plt+0x2fa8>
   14b88:	mov	r1, #12
   14b8c:	bl	11348 <__overflow@plt>
   14b90:	b	1438c <__assert_fail@plt+0x2fa8>
   14b94:	ldr	r1, [pc, #-1332]	; 14668 <__assert_fail@plt+0x3284>
   14b98:	ldr	r2, [pc, #-1332]	; 1466c <__assert_fail@plt+0x3288>
   14b9c:	b	13f80 <__assert_fail@plt+0x2b9c>
   14ba0:	cmp	sl, #0
   14ba4:	bne	13ca4 <__assert_fail@plt+0x28c0>
   14ba8:	mov	r2, r5
   14bac:	mov	r1, #1
   14bb0:	cmp	r1, #1
   14bb4:	movne	lr, r8
   14bb8:	orreq	lr, r8, #1
   14bbc:	add	r1, r1, #1
   14bc0:	cmp	r1, r7
   14bc4:	str	r3, [r2, #32]
   14bc8:	str	fp, [r2, #12]
   14bcc:	str	r0, [r2, #16]
   14bd0:	strb	lr, [r2, #36]	; 0x24
   14bd4:	mov	r3, sl
   14bd8:	add	r2, r2, #40	; 0x28
   14bdc:	bne	14bb0 <__assert_fail@plt+0x37cc>
   14be0:	add	r0, r7, r7, lsl #2
   14be4:	add	r0, r5, r0, lsl #3
   14be8:	sub	r0, r0, #40	; 0x28
   14bec:	b	13f54 <__assert_fail@plt+0x2b70>
   14bf0:	ldr	r3, [sp, #16]
   14bf4:	adds	r5, r3, #5
   14bf8:	beq	1438c <__assert_fail@plt+0x2fa8>
   14bfc:	ldr	r7, [pc, #-1428]	; 14670 <__assert_fail@plt+0x328c>
   14c00:	mov	r8, #10
   14c04:	b	14c1c <__assert_fail@plt+0x3838>
   14c08:	add	r2, r3, #1
   14c0c:	subs	r5, r5, #1
   14c10:	str	r2, [r0, #20]
   14c14:	strb	r8, [r3]
   14c18:	beq	1438c <__assert_fail@plt+0x2fa8>
   14c1c:	ldr	r0, [r7]
   14c20:	ldr	r3, [r0, #20]
   14c24:	ldr	r2, [r0, #24]
   14c28:	cmp	r3, r2
   14c2c:	bcc	14c08 <__assert_fail@plt+0x3824>
   14c30:	mov	r1, r8
   14c34:	bl	11348 <__overflow@plt>
   14c38:	subs	r5, r5, #1
   14c3c:	bne	14c1c <__assert_fail@plt+0x3838>
   14c40:	b	1438c <__assert_fail@plt+0x2fa8>
   14c44:	ldrb	r3, [r6, #40]	; 0x28
   14c48:	cmp	r3, #0
   14c4c:	beq	13e50 <__assert_fail@plt+0x2a6c>
   14c50:	cmp	r2, #0
   14c54:	beq	13bf4 <__assert_fail@plt+0x2810>
   14c58:	mov	r7, r9
   14c5c:	b	13bb4 <__assert_fail@plt+0x27d0>
   14c60:	mov	r2, #1
   14c64:	mov	r3, #0
   14c68:	ldrb	ip, [r6, #40]	; 0x28
   14c6c:	ldr	r5, [r4, #68]	; 0x44
   14c70:	ldr	r7, [r6, #12]
   14c74:	strd	r2, [r4, #128]	; 0x80
   14c78:	b	13c38 <__assert_fail@plt+0x2854>
   14c7c:	cmp	r0, #0
   14c80:	blt	1501c <__assert_fail@plt+0x3c38>
   14c84:	sub	r2, r3, #-2147483647	; 0x80000001
   14c88:	cmp	r0, r2
   14c8c:	movle	r2, #0
   14c90:	movgt	r2, #1
   14c94:	cmp	r2, #0
   14c98:	beq	138c0 <__assert_fail@plt+0x24dc>
   14c9c:	mov	r1, sl
   14ca0:	mov	r0, #0
   14ca4:	bl	20254 <__assert_fail@plt+0xee70>
   14ca8:	str	r0, [r4, #144]	; 0x90
   14cac:	mov	r2, #5
   14cb0:	ldr	r1, [pc, #-1604]	; 14674 <__assert_fail@plt+0x3290>
   14cb4:	mov	r0, #0
   14cb8:	bl	11168 <dcgettext@plt>
   14cbc:	mov	r1, #0
   14cc0:	mov	r2, r0
   14cc4:	mov	r0, #1
   14cc8:	bl	11204 <error@plt>
   14ccc:	mov	r2, #0
   14cd0:	ldrb	r3, [r4, #162]	; 0xa2
   14cd4:	ldr	fp, [r4, #24]
   14cd8:	strb	r2, [r6, #40]	; 0x28
   14cdc:	b	13804 <__assert_fail@plt+0x2420>
   14ce0:	sub	r3, sl, #1
   14ce4:	mul	r3, fp, r3
   14ce8:	lsr	r2, r3, #31
   14cec:	b	138a8 <__assert_fail@plt+0x24c4>
   14cf0:	cmp	sl, #0
   14cf4:	ble	15000 <__assert_fail@plt+0x3c1c>
   14cf8:	cmn	fp, #1
   14cfc:	beq	14ce0 <__assert_fail@plt+0x38fc>
   14d00:	mov	r1, fp
   14d04:	mov	r0, #-2147483648	; 0x80000000
   14d08:	bl	20254 <__assert_fail@plt+0xee70>
   14d0c:	sub	r3, sl, #1
   14d10:	cmp	r0, r3
   14d14:	blt	138a0 <__assert_fail@plt+0x24bc>
   14d18:	b	14ce4 <__assert_fail@plt+0x3900>
   14d1c:	ldrb	r3, [r4, #170]	; 0xaa
   14d20:	mov	r2, #1
   14d24:	strb	r2, [r4, #169]	; 0xa9
   14d28:	cmp	r3, #0
   14d2c:	bne	13ebc <__assert_fail@plt+0x2ad8>
   14d30:	bl	112c4 <__errno_location@plt>
   14d34:	mov	r2, r9
   14d38:	mov	r1, #3
   14d3c:	ldr	r4, [r0]
   14d40:	mov	r0, r7
   14d44:	bl	1af54 <__assert_fail@plt+0x9b70>
   14d48:	mov	r1, r4
   14d4c:	ldr	r2, [pc, #-1756]	; 14678 <__assert_fail@plt+0x3294>
   14d50:	mov	r3, r0
   14d54:	mov	r0, r7
   14d58:	add	sp, sp, #36	; 0x24
   14d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d60:	b	11204 <error@plt>
   14d64:	ldr	r2, [r4, #144]	; 0x90
   14d68:	ldr	lr, [r4, #24]
   14d6c:	cmp	r7, #1
   14d70:	add	r2, r3, r2
   14d74:	add	r3, r3, lr
   14d78:	bgt	13edc <__assert_fail@plt+0x2af8>
   14d7c:	mov	r0, r5
   14d80:	mov	lr, #1
   14d84:	b	13f58 <__assert_fail@plt+0x2b74>
   14d88:	ldr	r5, [r6, #12]
   14d8c:	cmp	r5, #0
   14d90:	blt	14dec <__assert_fail@plt+0x3a08>
   14d94:	beq	14e20 <__assert_fail@plt+0x3a3c>
   14d98:	ldr	r7, [r4, #156]	; 0x9c
   14d9c:	cmp	r7, #0
   14da0:	blt	15094 <__assert_fail@plt+0x3cb0>
   14da4:	mov	r1, r5
   14da8:	mvn	r0, #-2147483648	; 0x80000000
   14dac:	bl	20254 <__assert_fail@plt+0xee70>
   14db0:	cmp	r7, r0
   14db4:	movle	r0, #0
   14db8:	movgt	r0, #1
   14dbc:	cmp	r0, #0
   14dc0:	bne	1504c <__assert_fail@plt+0x3c68>
   14dc4:	b	14e14 <__assert_fail@plt+0x3a30>
   14dc8:	mvneq	r3, #0
   14dcc:	beq	14ce4 <__assert_fail@plt+0x3900>
   14dd0:	sub	r1, sl, #1
   14dd4:	mov	r0, #-2147483648	; 0x80000000
   14dd8:	bl	20254 <__assert_fail@plt+0xee70>
   14ddc:	cmp	r0, fp
   14de0:	movge	r0, #0
   14de4:	movlt	r0, #1
   14de8:	b	13898 <__assert_fail@plt+0x24b4>
   14dec:	ldr	r7, [r4, #156]	; 0x9c
   14df0:	cmp	r7, #0
   14df4:	blt	15078 <__assert_fail@plt+0x3c94>
   14df8:	cmn	r5, #1
   14dfc:	beq	14e14 <__assert_fail@plt+0x3a30>
   14e00:	mov	r1, r5
   14e04:	mov	r0, #-2147483648	; 0x80000000
   14e08:	bl	20254 <__assert_fail@plt+0xee70>
   14e0c:	cmp	r7, r0
   14e10:	bgt	1504c <__assert_fail@plt+0x3c68>
   14e14:	mul	r5, r5, r7
   14e18:	cmn	r5, #-2147483647	; 0x80000001
   14e1c:	beq	1504c <__assert_fail@plt+0x3c68>
   14e20:	ldr	r7, [r4, #144]	; 0x90
   14e24:	add	r8, r5, #1
   14e28:	cmn	r7, #-2147483647	; 0x80000001
   14e2c:	beq	1504c <__assert_fail@plt+0x3c68>
   14e30:	add	r7, r7, #1
   14e34:	cmp	r7, #0
   14e38:	blt	15050 <__assert_fail@plt+0x3c6c>
   14e3c:	beq	14e68 <__assert_fail@plt+0x3a84>
   14e40:	cmp	r5, #0
   14e44:	blt	15030 <__assert_fail@plt+0x3c4c>
   14e48:	mov	r1, r7
   14e4c:	mvn	r0, #-2147483648	; 0x80000000
   14e50:	bl	20254 <__assert_fail@plt+0xee70>
   14e54:	cmp	r0, r5
   14e58:	movge	r0, #0
   14e5c:	movlt	r0, #1
   14e60:	cmp	r0, #0
   14e64:	bne	1504c <__assert_fail@plt+0x3c68>
   14e68:	ldr	r0, [r4, #172]	; 0xac
   14e6c:	bl	15da0 <__assert_fail@plt+0x49bc>
   14e70:	mov	r1, #4
   14e74:	mov	r0, r8
   14e78:	bl	1d12c <__assert_fail@plt+0xbd48>
   14e7c:	mul	r7, r5, r7
   14e80:	str	r0, [r4, #172]	; 0xac
   14e84:	ldr	r0, [r4, #176]	; 0xb0
   14e88:	bl	15da0 <__assert_fail@plt+0x49bc>
   14e8c:	mov	r1, #4
   14e90:	mov	r0, r5
   14e94:	bl	1d12c <__assert_fail@plt+0xbd48>
   14e98:	str	r0, [r4, #176]	; 0xb0
   14e9c:	ldr	r0, [r4, #8]
   14ea0:	bl	15da0 <__assert_fail@plt+0x49bc>
   14ea4:	ldrb	r1, [r4, #153]	; 0x99
   14ea8:	mov	r0, r7
   14eac:	add	r1, r1, #1
   14eb0:	bl	1d12c <__assert_fail@plt+0xbd48>
   14eb4:	ldrb	r3, [r4, #153]	; 0x99
   14eb8:	mla	r7, r3, r7, r7
   14ebc:	str	r7, [r4, #4]
   14ec0:	str	r0, [r4, #8]
   14ec4:	b	13a7c <__assert_fail@plt+0x2698>
   14ec8:	ldr	r1, [pc, #-2132]	; 1467c <__assert_fail@plt+0x3298>
   14ecc:	mov	r0, r9
   14ed0:	str	r9, [r5, #4]
   14ed4:	bl	15d08 <__assert_fail@plt+0x4924>
   14ed8:	mov	r7, r0
   14edc:	str	r0, [r5]
   14ee0:	b	13dc8 <__assert_fail@plt+0x29e4>
   14ee4:	mov	r2, #5
   14ee8:	ldr	r1, [pc, #-2160]	; 14680 <__assert_fail@plt+0x329c>
   14eec:	mov	r0, r9
   14ef0:	bl	11168 <dcgettext@plt>
   14ef4:	ldr	r2, [pc, #-2168]	; 14684 <__assert_fail@plt+0x32a0>
   14ef8:	ldr	r3, [r4, #164]	; 0xa4
   14efc:	str	r9, [r5, #8]
   14f00:	ldr	r1, [r2]
   14f04:	add	r3, r3, #1
   14f08:	mov	r2, #1
   14f0c:	str	r1, [r5]
   14f10:	strb	r9, [r5, #37]	; 0x25
   14f14:	mvn	r1, #0
   14f18:	str	r3, [r4, #164]	; 0xa4
   14f1c:	strb	r2, [r4, #168]	; 0xa8
   14f20:	str	r0, [r5, #4]
   14f24:	ldr	r0, [pc, #-2212]	; 14688 <__assert_fail@plt+0x32a4>
   14f28:	bl	12424 <__assert_fail@plt+0x1040>
   14f2c:	str	r9, [r5, #24]
   14f30:	b	13e10 <__assert_fail@plt+0x2a2c>
   14f34:	bne	14344 <__assert_fail@plt+0x2f60>
   14f38:	ldr	r0, [r6, #12]
   14f3c:	ldr	r3, [r4, #68]	; 0x44
   14f40:	cmp	r0, #0
   14f44:	ldrgt	r8, [sp, #16]
   14f48:	bgt	142fc <__assert_fail@plt+0x2f18>
   14f4c:	ldrb	r3, [sp, #16]
   14f50:	strb	r3, [r4, #138]	; 0x8a
   14f54:	b	14344 <__assert_fail@plt+0x2f60>
   14f58:	cmp	fp, #1
   14f5c:	movne	r2, #1
   14f60:	strbne	r2, [r4, #104]	; 0x68
   14f64:	bne	137f4 <__assert_fail@plt+0x2410>
   14f68:	ldr	r2, [r6, #8]
   14f6c:	ldrb	r2, [r2]
   14f70:	cmp	r2, #9
   14f74:	ldreq	r2, [pc, #-2288]	; 1468c <__assert_fail@plt+0x32a8>
   14f78:	streq	r2, [r6, #8]
   14f7c:	b	13d64 <__assert_fail@plt+0x2980>
   14f80:	add	r2, lr, r2
   14f84:	add	r1, lr, r1
   14f88:	mov	sl, r2
   14f8c:	mov	lr, r5
   14f90:	mov	r8, #1
   14f94:	add	r8, r8, #1
   14f98:	str	r3, [lr, #32]
   14f9c:	cmp	r8, r7
   14fa0:	mov	r3, sl
   14fa4:	mov	sl, #0
   14fa8:	strb	sl, [lr, #36]	; 0x24
   14fac:	str	fp, [lr, #12]
   14fb0:	str	r0, [lr, #16]
   14fb4:	add	sl, r3, r1
   14fb8:	add	lr, lr, #40	; 0x28
   14fbc:	bne	14f94 <__assert_fail@plt+0x3bb0>
   14fc0:	add	r0, r7, r7, lsl #2
   14fc4:	sub	r3, r7, #2
   14fc8:	add	r0, r5, r0, lsl #3
   14fcc:	sub	r0, r0, #40	; 0x28
   14fd0:	mla	r3, r1, r3, r2
   14fd4:	b	13f54 <__assert_fail@plt+0x2b70>
   14fd8:	mov	r1, #12
   14fdc:	bl	11348 <__overflow@plt>
   14fe0:	b	14384 <__assert_fail@plt+0x2fa0>
   14fe4:	mov	r1, r2
   14fe8:	mov	sl, r2
   14fec:	b	14540 <__assert_fail@plt+0x315c>
   14ff0:	ldrb	ip, [r6, #40]	; 0x28
   14ff4:	ldr	r5, [r4, #68]	; 0x44
   14ff8:	ldr	r7, [r6, #12]
   14ffc:	b	13c30 <__assert_fail@plt+0x284c>
   15000:	mov	r1, fp
   15004:	mvn	r0, #-2147483648	; 0x80000000
   15008:	bl	20254 <__assert_fail@plt+0xee70>
   1500c:	cmp	r0, sl
   15010:	movlt	r0, #0
   15014:	movge	r0, #1
   15018:	b	13898 <__assert_fail@plt+0x24b4>
   1501c:	add	r2, r0, #-2147483648	; 0x80000000
   15020:	cmp	r3, r2
   15024:	movle	r2, #0
   15028:	movgt	r2, #1
   1502c:	b	14c94 <__assert_fail@plt+0x38b0>
   15030:	cmn	r5, #1
   15034:	beq	14e68 <__assert_fail@plt+0x3a84>
   15038:	mov	r1, r5
   1503c:	mov	r0, #-2147483648	; 0x80000000
   15040:	bl	20254 <__assert_fail@plt+0xee70>
   15044:	cmp	r7, r0
   15048:	ble	14e68 <__assert_fail@plt+0x3a84>
   1504c:	bl	12244 <__assert_fail@plt+0xe60>
   15050:	cmp	r5, #0
   15054:	blt	150b8 <__assert_fail@plt+0x3cd4>
   15058:	cmn	r7, #1
   1505c:	beq	14e68 <__assert_fail@plt+0x3a84>
   15060:	mov	r1, r7
   15064:	mov	r0, #-2147483648	; 0x80000000
   15068:	bl	20254 <__assert_fail@plt+0xee70>
   1506c:	cmp	r0, r5
   15070:	blt	1504c <__assert_fail@plt+0x3c68>
   15074:	b	14e68 <__assert_fail@plt+0x3a84>
   15078:	mov	r1, r5
   1507c:	mvn	r0, #-2147483648	; 0x80000000
   15080:	bl	20254 <__assert_fail@plt+0xee70>
   15084:	cmp	r7, r0
   15088:	movge	r0, #0
   1508c:	movlt	r0, #1
   15090:	b	14dbc <__assert_fail@plt+0x39d8>
   15094:	cmn	r7, #1
   15098:	beq	14e14 <__assert_fail@plt+0x3a30>
   1509c:	mov	r1, r7
   150a0:	mov	r0, #-2147483648	; 0x80000000
   150a4:	bl	20254 <__assert_fail@plt+0xee70>
   150a8:	cmp	r5, r0
   150ac:	movle	r0, #0
   150b0:	movgt	r0, #1
   150b4:	b	14dbc <__assert_fail@plt+0x39d8>
   150b8:	mov	r1, r7
   150bc:	mvn	r0, #-2147483648	; 0x80000000
   150c0:	bl	20254 <__assert_fail@plt+0xee70>
   150c4:	cmp	r0, r5
   150c8:	movle	r0, #0
   150cc:	movgt	r0, #1
   150d0:	b	14e60 <__assert_fail@plt+0x3a7c>
   150d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150d8:	sub	sp, sp, #20
   150dc:	ldr	r7, [pc, #804]	; 15408 <__assert_fail@plt+0x4024>
   150e0:	ldr	r3, [r0, #20]
   150e4:	mov	r4, r0
   150e8:	mov	lr, r3
   150ec:	str	r3, [sp, #12]
   150f0:	ldr	r3, [r7, #172]	; 0xac
   150f4:	mov	r2, #1
   150f8:	str	r0, [sp, #8]
   150fc:	add	r0, r3, lr, lsl #2
   15100:	ldrb	r1, [r7, #136]	; 0x88
   15104:	add	ip, lr, r2
   15108:	str	ip, [r4, #20]
   1510c:	ldr	fp, [r7, #8]
   15110:	ldr	r8, [r3, lr, lsl #2]
   15114:	ldr	r3, [r0, #4]
   15118:	cmp	r1, #0
   1511c:	add	r3, fp, r3
   15120:	strb	r2, [r7, #138]	; 0x8a
   15124:	add	r8, fp, r8
   15128:	str	r3, [sp, #4]
   1512c:	bne	15324 <__assert_fail@plt+0x3f40>
   15130:	ldr	r3, [sp, #8]
   15134:	ldr	r3, [r3, #8]
   15138:	cmp	r3, #1
   1513c:	beq	15338 <__assert_fail@plt+0x3f54>
   15140:	ldr	r3, [r7, #24]
   15144:	ldr	r5, [r7, #148]	; 0x94
   15148:	cmp	r3, r5
   1514c:	blt	15390 <__assert_fail@plt+0x3fac>
   15150:	ldrb	r3, [r7, #153]	; 0x99
   15154:	cmp	r3, #0
   15158:	bne	15388 <__assert_fail@plt+0x3fa4>
   1515c:	ldr	r3, [sp, #4]
   15160:	cmp	r8, r3
   15164:	beq	152a0 <__assert_fail@plt+0x3ebc>
   15168:	ldr	r5, [pc, #668]	; 1540c <__assert_fail@plt+0x4028>
   1516c:	ldr	r6, [pc, #668]	; 15410 <__assert_fail@plt+0x402c>
   15170:	ldrb	r3, [r7, #120]	; 0x78
   15174:	ldrb	r9, [r8], #1
   15178:	cmp	r3, #0
   1517c:	beq	15274 <__assert_fail@plt+0x3e90>
   15180:	ldr	r3, [r7, #112]	; 0x70
   15184:	cmp	r9, #32
   15188:	addeq	r3, r3, #1
   1518c:	streq	r3, [r7, #112]	; 0x70
   15190:	beq	15294 <__assert_fail@plt+0x3eb0>
   15194:	cmp	r3, #0
   15198:	ble	15254 <__assert_fail@plt+0x3e70>
   1519c:	ldr	fp, [r7, #100]	; 0x64
   151a0:	add	sl, r3, fp
   151a4:	b	151ac <__assert_fail@plt+0x3dc8>
   151a8:	mov	fp, r4
   151ac:	sub	r3, sl, fp
   151b0:	cmp	r3, #1
   151b4:	mov	r0, fp
   151b8:	ble	1520c <__assert_fail@plt+0x3e28>
   151bc:	ldr	r4, [r6, #36]	; 0x24
   151c0:	mov	r1, r4
   151c4:	bl	20474 <__assert_fail@plt+0xf090>
   151c8:	sub	r4, r4, r1
   151cc:	add	r4, r4, fp
   151d0:	cmp	sl, r4
   151d4:	blt	1520c <__assert_fail@plt+0x3e28>
   151d8:	ldr	r0, [r5]
   151dc:	ldrb	r1, [r6, #48]	; 0x30
   151e0:	ldr	r3, [r0, #20]
   151e4:	ldr	r2, [r0, #24]
   151e8:	add	ip, r3, #1
   151ec:	cmp	r3, r2
   151f0:	strcc	ip, [r0, #20]
   151f4:	strbcc	r1, [r3]
   151f8:	bcc	151a8 <__assert_fail@plt+0x3dc4>
   151fc:	bl	11348 <__overflow@plt>
   15200:	b	151a8 <__assert_fail@plt+0x3dc4>
   15204:	mov	r1, #32
   15208:	bl	11348 <__overflow@plt>
   1520c:	add	fp, fp, #1
   15210:	cmp	sl, fp
   15214:	blt	15248 <__assert_fail@plt+0x3e64>
   15218:	ldr	r0, [r5]
   1521c:	ldr	r3, [r0, #20]
   15220:	ldr	r2, [r0, #24]
   15224:	add	r1, r3, #1
   15228:	cmp	r3, r2
   1522c:	movcc	r2, #32
   15230:	strcc	r1, [r0, #20]
   15234:	strbcc	r2, [r3]
   15238:	bcs	15204 <__assert_fail@plt+0x3e20>
   1523c:	add	fp, fp, #1
   15240:	cmp	sl, fp
   15244:	bge	15218 <__assert_fail@plt+0x3e34>
   15248:	mov	r3, #0
   1524c:	str	sl, [r7, #100]	; 0x64
   15250:	str	r3, [r7, #112]	; 0x70
   15254:	bl	1127c <__ctype_b_loc@plt>
   15258:	lsl	r3, r9, #1
   1525c:	ldr	r2, [r0]
   15260:	ldrh	r3, [r2, r3]
   15264:	tst	r3, #16384	; 0x4000
   15268:	bne	15314 <__assert_fail@plt+0x3f30>
   1526c:	cmp	r9, #8
   15270:	beq	15304 <__assert_fail@plt+0x3f20>
   15274:	ldr	r0, [r5]
   15278:	ldr	r3, [r0, #20]
   1527c:	ldr	r2, [r0, #24]
   15280:	cmp	r3, r2
   15284:	addcc	r2, r3, #1
   15288:	strcc	r2, [r0, #20]
   1528c:	strbcc	r9, [r3]
   15290:	bcs	152ec <__assert_fail@plt+0x3f08>
   15294:	ldr	r3, [sp, #4]
   15298:	cmp	r3, r8
   1529c:	bne	15170 <__assert_fail@plt+0x3d8c>
   152a0:	ldr	r3, [r7, #112]	; 0x70
   152a4:	cmp	r3, #0
   152a8:	bne	152e0 <__assert_fail@plt+0x3efc>
   152ac:	ldr	r3, [sp, #8]
   152b0:	ldr	r1, [r7, #176]	; 0xb0
   152b4:	ldr	r0, [sp, #12]
   152b8:	ldr	r3, [r3, #32]
   152bc:	ldr	r2, [r7, #24]
   152c0:	ldr	ip, [r1, r0, lsl #2]
   152c4:	ldr	r1, [r7, #116]	; 0x74
   152c8:	sub	r0, r3, r2
   152cc:	cmp	r0, r1
   152d0:	add	r3, r3, ip
   152d4:	str	r3, [r7, #100]	; 0x64
   152d8:	subeq	r3, r3, r2
   152dc:	streq	r3, [r7, #100]	; 0x64
   152e0:	mov	r0, #1
   152e4:	add	sp, sp, #20
   152e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152ec:	mov	r1, r9
   152f0:	bl	11348 <__overflow@plt>
   152f4:	ldr	r3, [sp, #4]
   152f8:	cmp	r3, r8
   152fc:	bne	15170 <__assert_fail@plt+0x3d8c>
   15300:	b	152a0 <__assert_fail@plt+0x3ebc>
   15304:	ldr	r3, [r7, #100]	; 0x64
   15308:	sub	r3, r3, #1
   1530c:	str	r3, [r7, #100]	; 0x64
   15310:	b	15274 <__assert_fail@plt+0x3e90>
   15314:	ldr	r3, [r7, #100]	; 0x64
   15318:	add	r3, r3, #1
   1531c:	str	r3, [r7, #100]	; 0x64
   15320:	b	15274 <__assert_fail@plt+0x3e90>
   15324:	bl	12f6c <__assert_fail@plt+0x1b88>
   15328:	ldr	r3, [sp, #8]
   1532c:	ldr	r3, [r3, #8]
   15330:	cmp	r3, #1
   15334:	bne	15140 <__assert_fail@plt+0x3d5c>
   15338:	ldr	lr, [pc, #208]	; 15410 <__assert_fail@plt+0x402c>
   1533c:	ldr	ip, [r7, #68]	; 0x44
   15340:	ldr	r1, [lr, #12]
   15344:	cmp	r1, #0
   15348:	addgt	r1, r1, #1
   1534c:	movgt	r2, ip
   15350:	movgt	r0, #2
   15354:	ble	1536c <__assert_fail@plt+0x3f88>
   15358:	add	r3, r3, #1
   1535c:	cmp	r3, r1
   15360:	str	r0, [r2, #8]
   15364:	add	r2, r2, #40	; 0x28
   15368:	bne	15358 <__assert_fail@plt+0x3f74>
   1536c:	ldr	r3, [ip, #28]
   15370:	cmp	r3, #0
   15374:	bgt	15140 <__assert_fail@plt+0x3d5c>
   15378:	ldrb	r3, [lr, #56]	; 0x38
   1537c:	cmp	r3, #0
   15380:	strbeq	r3, [r7, #138]	; 0x8a
   15384:	b	152e0 <__assert_fail@plt+0x3efc>
   15388:	bl	12c18 <__assert_fail@plt+0x1834>
   1538c:	b	1515c <__assert_fail@plt+0x3d78>
   15390:	ldrb	r2, [r7, #120]	; 0x78
   15394:	sub	r5, r5, r3
   15398:	ldr	r4, [r7, #100]	; 0x64
   1539c:	cmp	r2, #0
   153a0:	bne	153f4 <__assert_fail@plt+0x4010>
   153a4:	ldr	r6, [pc, #96]	; 1540c <__assert_fail@plt+0x4028>
   153a8:	mov	r9, #32
   153ac:	add	r4, r4, #1
   153b0:	cmp	r5, r4
   153b4:	blt	153ec <__assert_fail@plt+0x4008>
   153b8:	ldr	r0, [r6]
   153bc:	ldr	r3, [r0, #20]
   153c0:	ldr	r2, [r0, #24]
   153c4:	add	r1, r3, #1
   153c8:	cmp	r3, r2
   153cc:	strcc	r1, [r0, #20]
   153d0:	strbcc	r9, [r3]
   153d4:	bcc	153ac <__assert_fail@plt+0x3fc8>
   153d8:	mov	r1, r9
   153dc:	add	r4, r4, #1
   153e0:	bl	11348 <__overflow@plt>
   153e4:	cmp	r5, r4
   153e8:	bge	153b8 <__assert_fail@plt+0x3fd4>
   153ec:	str	r5, [r7, #100]	; 0x64
   153f0:	b	153fc <__assert_fail@plt+0x4018>
   153f4:	sub	r4, r5, r4
   153f8:	str	r4, [r7, #112]	; 0x70
   153fc:	mov	r3, #0
   15400:	str	r3, [r7, #148]	; 0x94
   15404:	b	15150 <__assert_fail@plt+0x3d6c>
   15408:	strdeq	r3, [r3], -r0
   1540c:	andeq	r3, r3, r4, ror #3
   15410:	andeq	r3, r3, r0, asr #2
   15414:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15418:	mov	r9, r0
   1541c:	ldr	r8, [pc, #356]	; 15588 <__assert_fail@plt+0x41a4>
   15420:	ldrb	r3, [r8, #120]	; 0x78
   15424:	cmp	r3, #0
   15428:	bne	15454 <__assert_fail@plt+0x4070>
   1542c:	ldr	r6, [pc, #344]	; 1558c <__assert_fail@plt+0x41a8>
   15430:	ldr	r0, [r6]
   15434:	ldr	r3, [r0, #20]
   15438:	ldr	r2, [r0, #24]
   1543c:	cmp	r3, r2
   15440:	bcs	1557c <__assert_fail@plt+0x4198>
   15444:	add	r2, r3, #1
   15448:	str	r2, [r0, #20]
   1544c:	strb	r9, [r3]
   15450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15454:	cmp	r0, #32
   15458:	beq	15564 <__assert_fail@plt+0x4180>
   1545c:	ldr	sl, [r8, #112]	; 0x70
   15460:	cmp	sl, #0
   15464:	ble	15574 <__assert_fail@plt+0x4190>
   15468:	ldr	r5, [r8, #100]	; 0x64
   1546c:	ldr	r6, [pc, #280]	; 1558c <__assert_fail@plt+0x41a8>
   15470:	add	sl, sl, r5
   15474:	ldr	r7, [pc, #276]	; 15590 <__assert_fail@plt+0x41ac>
   15478:	b	15480 <__assert_fail@plt+0x409c>
   1547c:	mov	r5, r4
   15480:	sub	r3, sl, r5
   15484:	cmp	r3, #1
   15488:	mov	r0, r5
   1548c:	ble	154d8 <__assert_fail@plt+0x40f4>
   15490:	ldr	r4, [r7, #36]	; 0x24
   15494:	mov	r1, r4
   15498:	bl	20474 <__assert_fail@plt+0xf090>
   1549c:	sub	r4, r4, r1
   154a0:	add	r4, r4, r5
   154a4:	cmp	sl, r4
   154a8:	blt	154d8 <__assert_fail@plt+0x40f4>
   154ac:	ldr	r0, [r6]
   154b0:	ldrb	r1, [r7, #48]	; 0x30
   154b4:	ldr	r3, [r0, #20]
   154b8:	ldr	r2, [r0, #24]
   154bc:	add	ip, r3, #1
   154c0:	cmp	r3, r2
   154c4:	strcc	ip, [r0, #20]
   154c8:	strbcc	r1, [r3]
   154cc:	bcc	1547c <__assert_fail@plt+0x4098>
   154d0:	bl	11348 <__overflow@plt>
   154d4:	b	1547c <__assert_fail@plt+0x4098>
   154d8:	mov	r4, #32
   154dc:	add	r5, r5, #1
   154e0:	cmp	sl, r5
   154e4:	blt	1551c <__assert_fail@plt+0x4138>
   154e8:	ldr	r0, [r6]
   154ec:	ldr	r3, [r0, #20]
   154f0:	ldr	r2, [r0, #24]
   154f4:	add	r1, r3, #1
   154f8:	cmp	r3, r2
   154fc:	strcc	r1, [r0, #20]
   15500:	strbcc	r4, [r3]
   15504:	bcc	154dc <__assert_fail@plt+0x40f8>
   15508:	mov	r1, r4
   1550c:	add	r5, r5, #1
   15510:	bl	11348 <__overflow@plt>
   15514:	cmp	sl, r5
   15518:	bge	154e8 <__assert_fail@plt+0x4104>
   1551c:	mov	r3, #0
   15520:	str	sl, [r8, #100]	; 0x64
   15524:	str	r3, [r8, #112]	; 0x70
   15528:	bl	1127c <__ctype_b_loc@plt>
   1552c:	lsl	r3, r9, #1
   15530:	ldr	r2, [r0]
   15534:	ldrh	r3, [r2, r3]
   15538:	tst	r3, #16384	; 0x4000
   1553c:	bne	15554 <__assert_fail@plt+0x4170>
   15540:	cmp	r9, #8
   15544:	ldreq	r3, [r8, #100]	; 0x64
   15548:	subeq	r3, r3, #1
   1554c:	streq	r3, [r8, #100]	; 0x64
   15550:	b	15430 <__assert_fail@plt+0x404c>
   15554:	ldr	r3, [r8, #100]	; 0x64
   15558:	add	r3, r3, #1
   1555c:	str	r3, [r8, #100]	; 0x64
   15560:	b	15430 <__assert_fail@plt+0x404c>
   15564:	ldr	r3, [r8, #112]	; 0x70
   15568:	add	r3, r3, #1
   1556c:	str	r3, [r8, #112]	; 0x70
   15570:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15574:	ldr	r6, [pc, #16]	; 1558c <__assert_fail@plt+0x41a8>
   15578:	b	15528 <__assert_fail@plt+0x4144>
   1557c:	mov	r1, r9
   15580:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15584:	b	11348 <__overflow@plt>
   15588:	strdeq	r3, [r3], -r0
   1558c:	andeq	r3, r3, r4, ror #3
   15590:	andeq	r3, r3, r0, asr #2
   15594:	subs	r5, r0, #0
   15598:	push	{r7, lr}
   1559c:	sub	sp, sp, #56	; 0x38
   155a0:	beq	155dc <__assert_fail@plt+0x41f8>
   155a4:	ldr	r3, [pc, #972]	; 15978 <__assert_fail@plt+0x4594>
   155a8:	mov	r2, #5
   155ac:	ldr	r1, [pc, #968]	; 1597c <__assert_fail@plt+0x4598>
   155b0:	mov	r0, #0
   155b4:	ldr	r4, [r3]
   155b8:	bl	11168 <dcgettext@plt>
   155bc:	ldr	r3, [pc, #956]	; 15980 <__assert_fail@plt+0x459c>
   155c0:	mov	r1, #1
   155c4:	ldr	r3, [r3]
   155c8:	mov	r2, r0
   155cc:	mov	r0, r4
   155d0:	bl	1130c <__fprintf_chk@plt>
   155d4:	mov	r0, r5
   155d8:	bl	11288 <exit@plt>
   155dc:	mov	r2, #5
   155e0:	ldr	r1, [pc, #924]	; 15984 <__assert_fail@plt+0x45a0>
   155e4:	bl	11168 <dcgettext@plt>
   155e8:	ldr	r3, [pc, #912]	; 15980 <__assert_fail@plt+0x459c>
   155ec:	ldr	r6, [pc, #916]	; 15988 <__assert_fail@plt+0x45a4>
   155f0:	ldr	r4, [pc, #916]	; 1598c <__assert_fail@plt+0x45a8>
   155f4:	ldr	r2, [r3]
   155f8:	mov	r1, r0
   155fc:	mov	r0, #1
   15600:	bl	112f4 <__printf_chk@plt>
   15604:	mov	r2, #5
   15608:	ldr	r1, [pc, #896]	; 15990 <__assert_fail@plt+0x45ac>
   1560c:	mov	r0, r5
   15610:	bl	11168 <dcgettext@plt>
   15614:	ldr	r1, [r6]
   15618:	bl	1109c <fputs_unlocked@plt>
   1561c:	mov	r2, #5
   15620:	ldr	r1, [pc, #876]	; 15994 <__assert_fail@plt+0x45b0>
   15624:	mov	r0, r5
   15628:	bl	11168 <dcgettext@plt>
   1562c:	ldr	r1, [r6]
   15630:	bl	1109c <fputs_unlocked@plt>
   15634:	mov	r2, #5
   15638:	ldr	r1, [pc, #856]	; 15998 <__assert_fail@plt+0x45b4>
   1563c:	mov	r0, r5
   15640:	bl	11168 <dcgettext@plt>
   15644:	ldr	r1, [r6]
   15648:	bl	1109c <fputs_unlocked@plt>
   1564c:	mov	r2, #5
   15650:	ldr	r1, [pc, #836]	; 1599c <__assert_fail@plt+0x45b8>
   15654:	mov	r0, r5
   15658:	bl	11168 <dcgettext@plt>
   1565c:	ldr	r1, [r6]
   15660:	bl	1109c <fputs_unlocked@plt>
   15664:	mov	r2, #5
   15668:	ldr	r1, [pc, #816]	; 159a0 <__assert_fail@plt+0x45bc>
   1566c:	mov	r0, r5
   15670:	bl	11168 <dcgettext@plt>
   15674:	ldr	r1, [r6]
   15678:	bl	1109c <fputs_unlocked@plt>
   1567c:	mov	r2, #5
   15680:	ldr	r1, [pc, #796]	; 159a4 <__assert_fail@plt+0x45c0>
   15684:	mov	r0, r5
   15688:	bl	11168 <dcgettext@plt>
   1568c:	ldr	r1, [r6]
   15690:	bl	1109c <fputs_unlocked@plt>
   15694:	mov	r2, #5
   15698:	ldr	r1, [pc, #776]	; 159a8 <__assert_fail@plt+0x45c4>
   1569c:	mov	r0, r5
   156a0:	bl	11168 <dcgettext@plt>
   156a4:	ldr	r1, [r6]
   156a8:	bl	1109c <fputs_unlocked@plt>
   156ac:	mov	r2, #5
   156b0:	ldr	r1, [pc, #756]	; 159ac <__assert_fail@plt+0x45c8>
   156b4:	mov	r0, r5
   156b8:	bl	11168 <dcgettext@plt>
   156bc:	ldr	r1, [r6]
   156c0:	bl	1109c <fputs_unlocked@plt>
   156c4:	mov	r2, #5
   156c8:	ldr	r1, [pc, #736]	; 159b0 <__assert_fail@plt+0x45cc>
   156cc:	mov	r0, r5
   156d0:	bl	11168 <dcgettext@plt>
   156d4:	ldr	r1, [r6]
   156d8:	bl	1109c <fputs_unlocked@plt>
   156dc:	mov	r2, #5
   156e0:	ldr	r1, [pc, #716]	; 159b4 <__assert_fail@plt+0x45d0>
   156e4:	mov	r0, r5
   156e8:	bl	11168 <dcgettext@plt>
   156ec:	ldr	r1, [r6]
   156f0:	bl	1109c <fputs_unlocked@plt>
   156f4:	mov	r2, #5
   156f8:	ldr	r1, [pc, #696]	; 159b8 <__assert_fail@plt+0x45d4>
   156fc:	mov	r0, r5
   15700:	bl	11168 <dcgettext@plt>
   15704:	ldr	r1, [r6]
   15708:	bl	1109c <fputs_unlocked@plt>
   1570c:	mov	r2, #5
   15710:	ldr	r1, [pc, #676]	; 159bc <__assert_fail@plt+0x45d8>
   15714:	mov	r0, r5
   15718:	bl	11168 <dcgettext@plt>
   1571c:	ldr	r1, [r6]
   15720:	bl	1109c <fputs_unlocked@plt>
   15724:	mov	r2, #5
   15728:	ldr	r1, [pc, #656]	; 159c0 <__assert_fail@plt+0x45dc>
   1572c:	mov	r0, r5
   15730:	bl	11168 <dcgettext@plt>
   15734:	ldr	r1, [r6]
   15738:	bl	1109c <fputs_unlocked@plt>
   1573c:	mov	r2, #5
   15740:	ldr	r1, [pc, #636]	; 159c4 <__assert_fail@plt+0x45e0>
   15744:	mov	r0, r5
   15748:	bl	11168 <dcgettext@plt>
   1574c:	ldr	r1, [r6]
   15750:	bl	1109c <fputs_unlocked@plt>
   15754:	mov	r2, #5
   15758:	ldr	r1, [pc, #616]	; 159c8 <__assert_fail@plt+0x45e4>
   1575c:	mov	r0, r5
   15760:	bl	11168 <dcgettext@plt>
   15764:	ldr	r1, [r6]
   15768:	bl	1109c <fputs_unlocked@plt>
   1576c:	mov	r2, #5
   15770:	ldr	r1, [pc, #596]	; 159cc <__assert_fail@plt+0x45e8>
   15774:	mov	r0, r5
   15778:	bl	11168 <dcgettext@plt>
   1577c:	ldr	r1, [r6]
   15780:	bl	1109c <fputs_unlocked@plt>
   15784:	mov	r2, #5
   15788:	ldr	r1, [pc, #576]	; 159d0 <__assert_fail@plt+0x45ec>
   1578c:	mov	r0, r5
   15790:	bl	11168 <dcgettext@plt>
   15794:	ldr	r1, [r6]
   15798:	bl	1109c <fputs_unlocked@plt>
   1579c:	mov	r2, #5
   157a0:	ldr	r1, [pc, #556]	; 159d4 <__assert_fail@plt+0x45f0>
   157a4:	mov	r0, r5
   157a8:	bl	11168 <dcgettext@plt>
   157ac:	ldr	r1, [r6]
   157b0:	bl	1109c <fputs_unlocked@plt>
   157b4:	ldm	r4!, {r0, r1, r2, r3}
   157b8:	mov	lr, sp
   157bc:	stmia	lr!, {r0, r1, r2, r3}
   157c0:	ldm	r4!, {r0, r1, r2, r3}
   157c4:	ldr	ip, [sp]
   157c8:	stmia	lr!, {r0, r1, r2, r3}
   157cc:	cmp	ip, #0
   157d0:	ldm	r4!, {r0, r1, r2, r3}
   157d4:	stmia	lr!, {r0, r1, r2, r3}
   157d8:	ldm	r4, {r0, r1}
   157dc:	moveq	r4, sp
   157e0:	stm	lr, {r0, r1}
   157e4:	beq	15814 <__assert_fail@plt+0x4430>
   157e8:	ldr	r7, [pc, #488]	; 159d8 <__assert_fail@plt+0x45f4>
   157ec:	mov	r4, sp
   157f0:	b	15800 <__assert_fail@plt+0x441c>
   157f4:	ldr	ip, [r4, #8]!
   157f8:	cmp	ip, #0
   157fc:	beq	15814 <__assert_fail@plt+0x4430>
   15800:	mov	r1, ip
   15804:	mov	r0, r7
   15808:	bl	110c0 <strcmp@plt>
   1580c:	cmp	r0, #0
   15810:	bne	157f4 <__assert_fail@plt+0x4410>
   15814:	ldr	r4, [r4, #4]
   15818:	mov	r2, #5
   1581c:	cmp	r4, #0
   15820:	ldr	r1, [pc, #436]	; 159dc <__assert_fail@plt+0x45f8>
   15824:	beq	158cc <__assert_fail@plt+0x44e8>
   15828:	mov	r0, #0
   1582c:	bl	11168 <dcgettext@plt>
   15830:	ldr	r3, [pc, #424]	; 159e0 <__assert_fail@plt+0x45fc>
   15834:	ldr	r2, [pc, #424]	; 159e4 <__assert_fail@plt+0x4600>
   15838:	mov	r1, r0
   1583c:	mov	r0, #1
   15840:	bl	112f4 <__printf_chk@plt>
   15844:	mov	r1, #0
   15848:	mov	r0, #5
   1584c:	bl	11354 <setlocale@plt>
   15850:	cmp	r0, #0
   15854:	ldreq	r7, [pc, #380]	; 159d8 <__assert_fail@plt+0x45f4>
   15858:	beq	15874 <__assert_fail@plt+0x4490>
   1585c:	mov	r2, #3
   15860:	ldr	r1, [pc, #384]	; 159e8 <__assert_fail@plt+0x4604>
   15864:	bl	113c0 <strncmp@plt>
   15868:	ldr	r7, [pc, #360]	; 159d8 <__assert_fail@plt+0x45f4>
   1586c:	cmp	r0, #0
   15870:	bne	1595c <__assert_fail@plt+0x4578>
   15874:	mov	r2, #5
   15878:	ldr	r1, [pc, #364]	; 159ec <__assert_fail@plt+0x4608>
   1587c:	mov	r0, #0
   15880:	bl	11168 <dcgettext@plt>
   15884:	ldr	r3, [pc, #332]	; 159d8 <__assert_fail@plt+0x45f4>
   15888:	ldr	r2, [pc, #336]	; 159e0 <__assert_fail@plt+0x45fc>
   1588c:	mov	r1, r0
   15890:	mov	r0, #1
   15894:	bl	112f4 <__printf_chk@plt>
   15898:	mov	r2, #5
   1589c:	ldr	r1, [pc, #332]	; 159f0 <__assert_fail@plt+0x460c>
   158a0:	mov	r0, #0
   158a4:	bl	11168 <dcgettext@plt>
   158a8:	ldr	r2, [pc, #324]	; 159f4 <__assert_fail@plt+0x4610>
   158ac:	cmp	r4, r7
   158b0:	ldr	r3, [pc, #320]	; 159f8 <__assert_fail@plt+0x4614>
   158b4:	movne	r3, r2
   158b8:	mov	r1, r0
   158bc:	mov	r2, r4
   158c0:	mov	r0, #1
   158c4:	bl	112f4 <__printf_chk@plt>
   158c8:	b	155d4 <__assert_fail@plt+0x41f0>
   158cc:	mov	r0, r4
   158d0:	bl	11168 <dcgettext@plt>
   158d4:	ldr	r3, [pc, #260]	; 159e0 <__assert_fail@plt+0x45fc>
   158d8:	ldr	r2, [pc, #260]	; 159e4 <__assert_fail@plt+0x4600>
   158dc:	mov	r1, r0
   158e0:	mov	r0, #1
   158e4:	bl	112f4 <__printf_chk@plt>
   158e8:	mov	r1, r4
   158ec:	mov	r0, #5
   158f0:	bl	11354 <setlocale@plt>
   158f4:	cmp	r0, #0
   158f8:	beq	15910 <__assert_fail@plt+0x452c>
   158fc:	mov	r2, #3
   15900:	ldr	r1, [pc, #224]	; 159e8 <__assert_fail@plt+0x4604>
   15904:	bl	113c0 <strncmp@plt>
   15908:	cmp	r0, #0
   1590c:	bne	15954 <__assert_fail@plt+0x4570>
   15910:	mov	r2, #5
   15914:	ldr	r1, [pc, #208]	; 159ec <__assert_fail@plt+0x4608>
   15918:	mov	r0, #0
   1591c:	bl	11168 <dcgettext@plt>
   15920:	ldr	r3, [pc, #176]	; 159d8 <__assert_fail@plt+0x45f4>
   15924:	ldr	r2, [pc, #180]	; 159e0 <__assert_fail@plt+0x45fc>
   15928:	mov	r4, r3
   1592c:	mov	r1, r0
   15930:	mov	r0, #1
   15934:	bl	112f4 <__printf_chk@plt>
   15938:	ldr	r1, [pc, #176]	; 159f0 <__assert_fail@plt+0x460c>
   1593c:	mov	r2, #5
   15940:	mov	r0, #0
   15944:	bl	11168 <dcgettext@plt>
   15948:	ldr	r3, [pc, #168]	; 159f8 <__assert_fail@plt+0x4614>
   1594c:	mov	r1, r0
   15950:	b	158bc <__assert_fail@plt+0x44d8>
   15954:	ldr	r7, [pc, #124]	; 159d8 <__assert_fail@plt+0x45f4>
   15958:	mov	r4, r7
   1595c:	mov	r2, #5
   15960:	ldr	r1, [pc, #148]	; 159fc <__assert_fail@plt+0x4618>
   15964:	mov	r0, #0
   15968:	bl	11168 <dcgettext@plt>
   1596c:	ldr	r1, [r6]
   15970:	bl	1109c <fputs_unlocked@plt>
   15974:	b	15874 <__assert_fail@plt+0x4490>
   15978:	ldrdeq	r3, [r3], -r8
   1597c:	andeq	r0, r2, r4, lsr sl
   15980:			; <UNDEFINED> instruction: 0x000332b0
   15984:	andeq	r0, r2, ip, asr sl
   15988:	andeq	r3, r3, r4, ror #3
   1598c:	ldrdeq	r0, [r2], -r8
   15990:	andeq	r0, r2, r0, lsl #21
   15994:			; <UNDEFINED> instruction: 0x00020ab0
   15998:	andeq	r0, r2, r8, ror #21
   1599c:	andeq	r0, r2, r4, lsr fp
   159a0:	andeq	r0, r2, r4, lsl #25
   159a4:	muleq	r2, r4, sp
   159a8:	andeq	r0, r2, r4, lsr #30
   159ac:	ldrdeq	r1, [r2], -r0
   159b0:	andeq	r1, r2, ip, lsr #3
   159b4:	andeq	r1, r2, ip, lsr r2
   159b8:	muleq	r2, r8, r3
   159bc:	muleq	r2, r8, r4
   159c0:	andeq	r1, r2, r0, ror #11
   159c4:	andeq	r1, r2, ip, asr #13
   159c8:	andeq	r1, r2, r4, lsr r7
   159cc:	andeq	r1, r2, r8, asr #17
   159d0:	andeq	r1, r2, r0, lsr #19
   159d4:	ldrdeq	r1, [r2], -r0
   159d8:	andeq	r0, r2, r0, lsr sl
   159dc:	andeq	r1, r2, r8, lsl #20
   159e0:	andeq	r1, r2, r0, lsr #20
   159e4:	andeq	r1, r2, r8, asr #20
   159e8:	andeq	r1, r2, r8, asr sl
   159ec:	andeq	r1, r2, r4, lsr #21
   159f0:	andeq	r1, r2, r0, asr #21
   159f4:	andeq	r0, r2, r8, asr #19
   159f8:	andeq	r1, r2, r8, asr #26
   159fc:	andeq	r1, r2, ip, asr sl
   15a00:	push	{r4, r5, r6, r7, lr}
   15a04:	mov	r6, r1
   15a08:	ldrb	r1, [r0]
   15a0c:	mov	r5, r3
   15a10:	mov	r4, r0
   15a14:	sub	r3, r1, #48	; 0x30
   15a18:	cmp	r3, #9
   15a1c:	strbhi	r1, [r2]
   15a20:	ldrbhi	r1, [r0, #1]
   15a24:	addhi	r4, r0, #1
   15a28:	sub	sp, sp, #20
   15a2c:	cmp	r1, #0
   15a30:	bne	15a3c <__assert_fail@plt+0x4658>
   15a34:	add	sp, sp, #20
   15a38:	pop	{r4, r5, r6, r7, pc}
   15a3c:	ldr	r2, [pc, #120]	; 15abc <__assert_fail@plt+0x46d8>
   15a40:	add	r3, sp, #12
   15a44:	str	r2, [sp]
   15a48:	mov	r1, #0
   15a4c:	mov	r2, #10
   15a50:	mov	r0, r4
   15a54:	bl	1e4f4 <__assert_fail@plt+0xd110>
   15a58:	cmp	r0, #0
   15a5c:	beq	15aa4 <__assert_fail@plt+0x46c0>
   15a60:	bl	112c4 <__errno_location@plt>
   15a64:	mov	r2, #5
   15a68:	ldr	r1, [pc, #80]	; 15ac0 <__assert_fail@plt+0x46dc>
   15a6c:	ldr	r7, [r0]
   15a70:	mov	r0, #0
   15a74:	bl	11168 <dcgettext@plt>
   15a78:	mov	r5, r0
   15a7c:	mov	r0, r4
   15a80:	bl	1be48 <__assert_fail@plt+0xaa64>
   15a84:	mov	r1, r7
   15a88:	mov	r2, r5
   15a8c:	mov	r3, r6
   15a90:	str	r0, [sp]
   15a94:	mov	r0, #0
   15a98:	bl	11204 <error@plt>
   15a9c:	mov	r0, #1
   15aa0:	bl	15594 <__assert_fail@plt+0x41b0>
   15aa4:	ldr	r3, [sp, #12]
   15aa8:	cmp	r3, #0
   15aac:	strgt	r3, [r5]
   15ab0:	ble	15a60 <__assert_fail@plt+0x467c>
   15ab4:	add	sp, sp, #20
   15ab8:	pop	{r4, r5, r6, r7, pc}
   15abc:	andeq	r0, r2, r8, asr #19
   15ac0:	strdeq	r1, [r2], -r4
   15ac4:	ldr	r3, [pc, #4]	; 15ad0 <__assert_fail@plt+0x46ec>
   15ac8:	str	r0, [r3]
   15acc:	bx	lr
   15ad0:	andeq	r3, r3, r8, lsr #5
   15ad4:	ldr	r3, [pc, #4]	; 15ae0 <__assert_fail@plt+0x46fc>
   15ad8:	strb	r0, [r3, #4]
   15adc:	bx	lr
   15ae0:	andeq	r3, r3, r8, lsr #5
   15ae4:	ldr	r3, [pc, #192]	; 15bac <__assert_fail@plt+0x47c8>
   15ae8:	push	{r4, r5, r6, lr}
   15aec:	sub	sp, sp, #8
   15af0:	ldr	r0, [r3]
   15af4:	bl	1fd24 <__assert_fail@plt+0xe940>
   15af8:	cmp	r0, #0
   15afc:	beq	15b20 <__assert_fail@plt+0x473c>
   15b00:	ldr	r4, [pc, #168]	; 15bb0 <__assert_fail@plt+0x47cc>
   15b04:	ldrb	r3, [r4, #4]
   15b08:	cmp	r3, #0
   15b0c:	beq	15b3c <__assert_fail@plt+0x4758>
   15b10:	bl	112c4 <__errno_location@plt>
   15b14:	ldr	r3, [r0]
   15b18:	cmp	r3, #32
   15b1c:	bne	15b3c <__assert_fail@plt+0x4758>
   15b20:	ldr	r3, [pc, #140]	; 15bb4 <__assert_fail@plt+0x47d0>
   15b24:	ldr	r0, [r3]
   15b28:	bl	1fd24 <__assert_fail@plt+0xe940>
   15b2c:	cmp	r0, #0
   15b30:	bne	15b84 <__assert_fail@plt+0x47a0>
   15b34:	add	sp, sp, #8
   15b38:	pop	{r4, r5, r6, pc}
   15b3c:	mov	r2, #5
   15b40:	ldr	r1, [pc, #112]	; 15bb8 <__assert_fail@plt+0x47d4>
   15b44:	mov	r0, #0
   15b48:	bl	11168 <dcgettext@plt>
   15b4c:	ldr	r4, [r4]
   15b50:	cmp	r4, #0
   15b54:	mov	r5, r0
   15b58:	beq	15b90 <__assert_fail@plt+0x47ac>
   15b5c:	bl	112c4 <__errno_location@plt>
   15b60:	ldr	r6, [r0]
   15b64:	mov	r0, r4
   15b68:	bl	1abe8 <__assert_fail@plt+0x9804>
   15b6c:	mov	r1, r6
   15b70:	str	r5, [sp]
   15b74:	ldr	r2, [pc, #64]	; 15bbc <__assert_fail@plt+0x47d8>
   15b78:	mov	r3, r0
   15b7c:	mov	r0, #0
   15b80:	bl	11204 <error@plt>
   15b84:	ldr	r3, [pc, #52]	; 15bc0 <__assert_fail@plt+0x47dc>
   15b88:	ldr	r0, [r3]
   15b8c:	bl	11120 <_exit@plt>
   15b90:	bl	112c4 <__errno_location@plt>
   15b94:	mov	r3, r5
   15b98:	ldr	r2, [pc, #36]	; 15bc4 <__assert_fail@plt+0x47e0>
   15b9c:	ldr	r1, [r0]
   15ba0:	mov	r0, r4
   15ba4:	bl	11204 <error@plt>
   15ba8:	b	15b84 <__assert_fail@plt+0x47a0>
   15bac:	andeq	r3, r3, r4, ror #3
   15bb0:	andeq	r3, r3, r8, lsr #5
   15bb4:	ldrdeq	r3, [r3], -r8
   15bb8:	strdeq	r1, [r2], -r8
   15bbc:	andeq	r1, r2, r4, lsl #30
   15bc0:	andeq	r3, r3, r4, lsl #3
   15bc4:	andeq	r1, r2, r8, lsl #30
   15bc8:	push	{r4, r5}
   15bcc:	pop	{r4, r5}
   15bd0:	b	110d8 <posix_fadvise64@plt>
   15bd4:	cmp	r0, #0
   15bd8:	bxeq	lr
   15bdc:	push	{r4, lr}
   15be0:	sub	sp, sp, #16
   15be4:	mov	r4, r1
   15be8:	bl	11300 <fileno@plt>
   15bec:	mov	r2, #0
   15bf0:	mov	r3, #0
   15bf4:	str	r4, [sp, #8]
   15bf8:	strd	r2, [sp]
   15bfc:	bl	110d8 <posix_fadvise64@plt>
   15c00:	add	sp, sp, #16
   15c04:	pop	{r4, pc}
   15c08:	push	{r4, r5, lr}
   15c0c:	sub	sp, sp, #12
   15c10:	mov	r4, r0
   15c14:	bl	11300 <fileno@plt>
   15c18:	cmp	r0, #0
   15c1c:	mov	r0, r4
   15c20:	blt	15c9c <__assert_fail@plt+0x48b8>
   15c24:	bl	11240 <__freading@plt>
   15c28:	cmp	r0, #0
   15c2c:	bne	15c68 <__assert_fail@plt+0x4884>
   15c30:	mov	r0, r4
   15c34:	bl	15ca8 <__assert_fail@plt+0x48c4>
   15c38:	cmp	r0, #0
   15c3c:	beq	15c98 <__assert_fail@plt+0x48b4>
   15c40:	bl	112c4 <__errno_location@plt>
   15c44:	mov	r5, r0
   15c48:	mov	r0, r4
   15c4c:	ldr	r4, [r5]
   15c50:	bl	11318 <fclose@plt>
   15c54:	cmp	r4, #0
   15c58:	mvnne	r0, #0
   15c5c:	strne	r4, [r5]
   15c60:	add	sp, sp, #12
   15c64:	pop	{r4, r5, pc}
   15c68:	mov	r0, r4
   15c6c:	bl	11300 <fileno@plt>
   15c70:	mov	r3, #1
   15c74:	str	r3, [sp]
   15c78:	mov	r2, #0
   15c7c:	mov	r3, #0
   15c80:	bl	111d4 <lseek64@plt>
   15c84:	mvn	r3, #0
   15c88:	mvn	r2, #0
   15c8c:	cmp	r1, r3
   15c90:	cmpeq	r0, r2
   15c94:	bne	15c30 <__assert_fail@plt+0x484c>
   15c98:	mov	r0, r4
   15c9c:	add	sp, sp, #12
   15ca0:	pop	{r4, r5, lr}
   15ca4:	b	11318 <fclose@plt>
   15ca8:	push	{r4, lr}
   15cac:	subs	r4, r0, #0
   15cb0:	sub	sp, sp, #8
   15cb4:	beq	15cd0 <__assert_fail@plt+0x48ec>
   15cb8:	bl	11240 <__freading@plt>
   15cbc:	cmp	r0, #0
   15cc0:	beq	15cd0 <__assert_fail@plt+0x48ec>
   15cc4:	ldr	r3, [r4]
   15cc8:	tst	r3, #256	; 0x100
   15ccc:	bne	15ce0 <__assert_fail@plt+0x48fc>
   15cd0:	mov	r0, r4
   15cd4:	add	sp, sp, #8
   15cd8:	pop	{r4, lr}
   15cdc:	b	110f0 <fflush@plt>
   15ce0:	mov	r3, #1
   15ce4:	str	r3, [sp]
   15ce8:	mov	r2, #0
   15cec:	mov	r3, #0
   15cf0:	mov	r0, r4
   15cf4:	bl	15df8 <__assert_fail@plt+0x4a14>
   15cf8:	mov	r0, r4
   15cfc:	add	sp, sp, #8
   15d00:	pop	{r4, lr}
   15d04:	b	110f0 <fflush@plt>
   15d08:	push	{r4, r5, r6, lr}
   15d0c:	mov	r5, r1
   15d10:	bl	1139c <fopen64@plt>
   15d14:	subs	r4, r0, #0
   15d18:	beq	15d28 <__assert_fail@plt+0x4944>
   15d1c:	bl	11300 <fileno@plt>
   15d20:	cmp	r0, #2
   15d24:	bls	15d30 <__assert_fail@plt+0x494c>
   15d28:	mov	r0, r4
   15d2c:	pop	{r4, r5, r6, pc}
   15d30:	bl	1c600 <__assert_fail@plt+0xb21c>
   15d34:	subs	r6, r0, #0
   15d38:	blt	15d80 <__assert_fail@plt+0x499c>
   15d3c:	mov	r0, r4
   15d40:	bl	15c08 <__assert_fail@plt+0x4824>
   15d44:	cmp	r0, #0
   15d48:	bne	15d60 <__assert_fail@plt+0x497c>
   15d4c:	mov	r1, r5
   15d50:	mov	r0, r6
   15d54:	bl	11084 <fdopen@plt>
   15d58:	subs	r4, r0, #0
   15d5c:	bne	15d28 <__assert_fail@plt+0x4944>
   15d60:	bl	112c4 <__errno_location@plt>
   15d64:	mov	r4, #0
   15d68:	mov	r5, r0
   15d6c:	mov	r0, r6
   15d70:	ldr	r6, [r5]
   15d74:	bl	113d8 <close@plt>
   15d78:	str	r6, [r5]
   15d7c:	b	15d28 <__assert_fail@plt+0x4944>
   15d80:	bl	112c4 <__errno_location@plt>
   15d84:	mov	r5, r0
   15d88:	mov	r0, r4
   15d8c:	ldr	r6, [r5]
   15d90:	mov	r4, #0
   15d94:	bl	15c08 <__assert_fail@plt+0x4824>
   15d98:	str	r6, [r5]
   15d9c:	b	15d28 <__assert_fail@plt+0x4944>
   15da0:	push	{r4, r5, lr}
   15da4:	sub	sp, sp, #12
   15da8:	mov	r5, r0
   15dac:	bl	112c4 <__errno_location@plt>
   15db0:	mov	r2, #0
   15db4:	mov	r4, r0
   15db8:	ldr	r3, [r0]
   15dbc:	str	r2, [r4]
   15dc0:	mov	r0, r5
   15dc4:	str	r3, [sp]
   15dc8:	str	r3, [sp, #4]
   15dcc:	bl	11108 <free@plt>
   15dd0:	ldr	r3, [r4]
   15dd4:	add	r2, sp, #8
   15dd8:	cmp	r3, #0
   15ddc:	moveq	r3, #4
   15de0:	movne	r3, #0
   15de4:	add	r3, r2, r3
   15de8:	ldr	r3, [r3, #-8]
   15dec:	str	r3, [r4]
   15df0:	add	sp, sp, #12
   15df4:	pop	{r4, r5, pc}
   15df8:	push	{r4, r5, r6, r7, r8, lr}
   15dfc:	sub	sp, sp, #8
   15e00:	ldmib	r0, {ip, lr}
   15e04:	mov	r4, r0
   15e08:	ldr	r5, [sp, #32]
   15e0c:	cmp	lr, ip
   15e10:	beq	15e28 <__assert_fail@plt+0x4a44>
   15e14:	str	r5, [sp, #32]
   15e18:	mov	r0, r4
   15e1c:	add	sp, sp, #8
   15e20:	pop	{r4, r5, r6, r7, r8, lr}
   15e24:	b	11324 <fseeko64@plt>
   15e28:	ldr	lr, [r0, #20]
   15e2c:	ldr	ip, [r0, #16]
   15e30:	cmp	lr, ip
   15e34:	bne	15e14 <__assert_fail@plt+0x4a30>
   15e38:	ldr	r8, [r0, #36]	; 0x24
   15e3c:	cmp	r8, #0
   15e40:	bne	15e14 <__assert_fail@plt+0x4a30>
   15e44:	mov	r6, r2
   15e48:	mov	r7, r3
   15e4c:	bl	11300 <fileno@plt>
   15e50:	mov	r2, r6
   15e54:	mov	r3, r7
   15e58:	str	r5, [sp]
   15e5c:	bl	111d4 <lseek64@plt>
   15e60:	mvn	r3, #0
   15e64:	mvn	r2, #0
   15e68:	cmp	r1, r3
   15e6c:	cmpeq	r0, r2
   15e70:	beq	15e90 <__assert_fail@plt+0x4aac>
   15e74:	ldr	r3, [r4]
   15e78:	strd	r0, [r4, #80]	; 0x50
   15e7c:	mov	r0, r8
   15e80:	bic	r3, r3, #16
   15e84:	str	r3, [r4]
   15e88:	add	sp, sp, #8
   15e8c:	pop	{r4, r5, r6, r7, r8, pc}
   15e90:	mvn	r0, #0
   15e94:	b	15e88 <__assert_fail@plt+0x4aa4>
   15e98:	mov	r1, r0
   15e9c:	mov	r0, #0
   15ea0:	b	11114 <clock_gettime@plt>
   15ea4:	push	{r4, r5, lr}
   15ea8:	sub	sp, sp, #12
   15eac:	mov	r4, r0
   15eb0:	mov	r1, sp
   15eb4:	mov	r0, #0
   15eb8:	bl	11114 <clock_gettime@plt>
   15ebc:	ldm	sp, {r0, r1}
   15ec0:	stm	r4, {r0, r1}
   15ec4:	mov	r0, r4
   15ec8:	add	sp, sp, #12
   15ecc:	pop	{r4, r5, pc}
   15ed0:	push	{lr}		; (str lr, [sp, #-4]!)
   15ed4:	sub	sp, sp, #268	; 0x10c
   15ed8:	add	r1, sp, #4
   15edc:	ldr	r2, [pc, #60]	; 15f20 <__assert_fail@plt+0x4b3c>
   15ee0:	bl	1bfc8 <__assert_fail@plt+0xabe4>
   15ee4:	cmp	r0, #0
   15ee8:	movne	r0, #0
   15eec:	bne	15f18 <__assert_fail@plt+0x4b34>
   15ef0:	ldr	r1, [pc, #44]	; 15f24 <__assert_fail@plt+0x4b40>
   15ef4:	add	r0, sp, #4
   15ef8:	bl	110c0 <strcmp@plt>
   15efc:	cmp	r0, #0
   15f00:	beq	15f18 <__assert_fail@plt+0x4b34>
   15f04:	add	r0, sp, #4
   15f08:	ldr	r1, [pc, #24]	; 15f28 <__assert_fail@plt+0x4b44>
   15f0c:	bl	110c0 <strcmp@plt>
   15f10:	adds	r0, r0, #0
   15f14:	movne	r0, #1
   15f18:	add	sp, sp, #268	; 0x10c
   15f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f20:	andeq	r0, r0, r1, lsl #2
   15f24:	andeq	r1, r2, ip, lsl #30
   15f28:	andeq	r1, r2, r0, lsl pc
   15f2c:	cmp	r0, #0
   15f30:	sbcs	r3, r1, #0
   15f34:	mov	r3, #0
   15f38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f3c:	mov	r4, r0
   15f40:	mov	r5, r1
   15f44:	strb	r3, [r2, #20]
   15f48:	add	r6, r2, #20
   15f4c:	mov	r8, #10
   15f50:	mov	r9, #0
   15f54:	blt	15fa4 <__assert_fail@plt+0x4bc0>
   15f58:	mov	r0, r4
   15f5c:	mov	r1, r5
   15f60:	mov	r2, r8
   15f64:	mov	r3, r9
   15f68:	bl	20494 <__assert_fail@plt+0xf0b0>
   15f6c:	mov	r0, r4
   15f70:	mov	r1, r5
   15f74:	mov	r3, r9
   15f78:	add	r2, r2, #48	; 0x30
   15f7c:	strb	r2, [r6, #-1]!
   15f80:	mov	r2, r8
   15f84:	bl	20494 <__assert_fail@plt+0xf0b0>
   15f88:	mov	r4, r0
   15f8c:	mov	r5, r1
   15f90:	orrs	r3, r4, r5
   15f94:	bne	15f58 <__assert_fail@plt+0x4b74>
   15f98:	mov	r0, r6
   15f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15fa0:	mov	r6, r7
   15fa4:	mov	r0, r4
   15fa8:	mov	r1, r5
   15fac:	mov	r2, r8
   15fb0:	mov	r3, r9
   15fb4:	bl	20494 <__assert_fail@plt+0xf0b0>
   15fb8:	mov	r0, r4
   15fbc:	mov	r1, r5
   15fc0:	mov	r3, r9
   15fc4:	sub	r7, r6, #1
   15fc8:	rsb	r2, r2, #48	; 0x30
   15fcc:	strb	r2, [r6, #-1]
   15fd0:	mov	r2, r8
   15fd4:	bl	20494 <__assert_fail@plt+0xf0b0>
   15fd8:	mov	r4, r0
   15fdc:	mov	r5, r1
   15fe0:	orrs	r3, r4, r5
   15fe4:	bne	15fa0 <__assert_fail@plt+0x4bbc>
   15fe8:	mov	r3, #45	; 0x2d
   15fec:	sub	r6, r6, #2
   15ff0:	strb	r3, [r7, #-1]
   15ff4:	mov	r0, r6
   15ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16000:	sub	sp, sp, #20
   16004:	mov	r5, r0
   16008:	add	r7, r0, r1
   1600c:	mov	sl, r2
   16010:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   16014:	cmp	r0, #1
   16018:	bls	161bc <__assert_fail@plt+0x4dd8>
   1601c:	cmp	r5, r7
   16020:	mov	r6, #0
   16024:	bcs	16120 <__assert_fail@plt+0x4d3c>
   16028:	and	fp, sl, #2
   1602c:	mov	r9, r6
   16030:	and	sl, sl, #1
   16034:	mvn	r8, #-2147483648	; 0x80000000
   16038:	b	16060 <__assert_fail@plt+0x4c7c>
   1603c:	cmp	r3, #37	; 0x25
   16040:	bcs	16050 <__assert_fail@plt+0x4c6c>
   16044:	sub	r3, r3, #32
   16048:	cmp	r3, #3
   1604c:	bhi	16088 <__assert_fail@plt+0x4ca4>
   16050:	add	r5, r5, #1
   16054:	add	r6, r6, #1
   16058:	cmp	r7, r5
   1605c:	bls	16120 <__assert_fail@plt+0x4d3c>
   16060:	ldrb	r3, [r5]
   16064:	cmp	r3, #63	; 0x3f
   16068:	bls	1603c <__assert_fail@plt+0x4c58>
   1606c:	cmp	r3, #65	; 0x41
   16070:	bcc	16088 <__assert_fail@plt+0x4ca4>
   16074:	cmp	r3, #95	; 0x5f
   16078:	bls	16050 <__assert_fail@plt+0x4c6c>
   1607c:	sub	r3, r3, #97	; 0x61
   16080:	cmp	r3, #29
   16084:	bls	16050 <__assert_fail@plt+0x4c6c>
   16088:	cmp	fp, #0
   1608c:	str	r9, [sp, #8]
   16090:	str	r9, [sp, #12]
   16094:	beq	160bc <__assert_fail@plt+0x4cd8>
   16098:	b	16168 <__assert_fail@plt+0x4d84>
   1609c:	cmp	r0, r3
   160a0:	bgt	1611c <__assert_fail@plt+0x4d38>
   160a4:	add	r6, r6, r0
   160a8:	add	r0, sp, #8
   160ac:	bl	11144 <mbsinit@plt>
   160b0:	add	r5, r5, r4
   160b4:	cmp	r0, #0
   160b8:	bne	16058 <__assert_fail@plt+0x4c74>
   160bc:	add	r3, sp, #8
   160c0:	sub	r2, r7, r5
   160c4:	mov	r1, r5
   160c8:	add	r0, sp, #4
   160cc:	bl	1ffa8 <__assert_fail@plt+0xebc4>
   160d0:	cmn	r0, #1
   160d4:	mov	r4, r0
   160d8:	beq	161a4 <__assert_fail@plt+0x4dc0>
   160dc:	cmn	r0, #2
   160e0:	beq	16190 <__assert_fail@plt+0x4dac>
   160e4:	ldr	r0, [sp, #4]
   160e8:	bl	110fc <wcwidth@plt>
   160ec:	cmp	r4, #0
   160f0:	moveq	r4, #1
   160f4:	sub	r3, r8, r6
   160f8:	cmp	r0, #0
   160fc:	bge	1609c <__assert_fail@plt+0x4cb8>
   16100:	ldr	r0, [sp, #4]
   16104:	bl	11198 <iswcntrl@plt>
   16108:	cmp	r0, #0
   1610c:	bne	160a8 <__assert_fail@plt+0x4cc4>
   16110:	cmn	r6, #-2147483647	; 0x80000001
   16114:	add	r6, r6, #1
   16118:	bne	160a8 <__assert_fail@plt+0x4cc4>
   1611c:	mvn	r6, #-2147483648	; 0x80000000
   16120:	mov	r0, r6
   16124:	add	sp, sp, #20
   16128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1612c:	ldr	r0, [sp, #4]
   16130:	bl	110fc <wcwidth@plt>
   16134:	cmp	r4, #0
   16138:	moveq	r4, #1
   1613c:	sub	r2, r8, r6
   16140:	add	r5, r5, r4
   16144:	subs	r3, r0, #0
   16148:	add	r6, r6, r3
   1614c:	add	r0, sp, #8
   16150:	blt	161ac <__assert_fail@plt+0x4dc8>
   16154:	cmp	r3, r2
   16158:	bgt	1611c <__assert_fail@plt+0x4d38>
   1615c:	bl	11144 <mbsinit@plt>
   16160:	cmp	r0, #0
   16164:	bne	16058 <__assert_fail@plt+0x4c74>
   16168:	add	r3, sp, #8
   1616c:	sub	r2, r7, r5
   16170:	mov	r1, r5
   16174:	add	r0, sp, #4
   16178:	bl	1ffa8 <__assert_fail@plt+0xebc4>
   1617c:	cmn	r0, #1
   16180:	mov	r4, r0
   16184:	beq	161a4 <__assert_fail@plt+0x4dc0>
   16188:	cmn	r0, #2
   1618c:	bne	1612c <__assert_fail@plt+0x4d48>
   16190:	cmp	sl, #0
   16194:	bne	161ac <__assert_fail@plt+0x4dc8>
   16198:	add	r6, r6, #1
   1619c:	mov	r5, r7
   161a0:	b	16058 <__assert_fail@plt+0x4c74>
   161a4:	cmp	sl, #0
   161a8:	beq	16050 <__assert_fail@plt+0x4c6c>
   161ac:	mvn	r6, #0
   161b0:	mov	r0, r6
   161b4:	add	sp, sp, #20
   161b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161bc:	cmp	r5, r7
   161c0:	movcs	r6, #0
   161c4:	bcs	16120 <__assert_fail@plt+0x4d3c>
   161c8:	bl	1127c <__ctype_b_loc@plt>
   161cc:	ands	r6, sl, #2
   161d0:	ldr	r2, [r0]
   161d4:	bne	16214 <__assert_fail@plt+0x4e30>
   161d8:	ldrb	r3, [r5], #1
   161dc:	lsl	r3, r3, #1
   161e0:	ldrh	r3, [r2, r3]
   161e4:	tst	r3, #16384	; 0x4000
   161e8:	bne	161f4 <__assert_fail@plt+0x4e10>
   161ec:	tst	r3, #2
   161f0:	bne	16200 <__assert_fail@plt+0x4e1c>
   161f4:	cmn	r6, #-2147483647	; 0x80000001
   161f8:	beq	16120 <__assert_fail@plt+0x4d3c>
   161fc:	add	r6, r6, #1
   16200:	cmp	r7, r5
   16204:	bne	161d8 <__assert_fail@plt+0x4df4>
   16208:	mov	r0, r6
   1620c:	add	sp, sp, #20
   16210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16214:	mov	r6, #0
   16218:	b	16230 <__assert_fail@plt+0x4e4c>
   1621c:	cmn	r6, #-2147483647	; 0x80000001
   16220:	beq	16120 <__assert_fail@plt+0x4d3c>
   16224:	cmp	r7, r5
   16228:	add	r6, r6, #1
   1622c:	beq	16120 <__assert_fail@plt+0x4d3c>
   16230:	ldrb	r3, [r5], #1
   16234:	lsl	r3, r3, #1
   16238:	ldrh	r3, [r2, r3]
   1623c:	tst	r3, #16384	; 0x4000
   16240:	beq	161ac <__assert_fail@plt+0x4dc8>
   16244:	b	1621c <__assert_fail@plt+0x4e38>
   16248:	push	{r4, r5, r6, lr}
   1624c:	mov	r5, r1
   16250:	mov	r4, r0
   16254:	bl	11294 <strlen@plt>
   16258:	mov	r2, r5
   1625c:	mov	r1, r0
   16260:	mov	r0, r4
   16264:	pop	{r4, r5, r6, lr}
   16268:	b	15ffc <__assert_fail@plt+0x4c18>
   1626c:	push	{r4, r5, r6, lr}
   16270:	subs	r4, r2, #0
   16274:	mov	r6, r0
   16278:	beq	162a4 <__assert_fail@plt+0x4ec0>
   1627c:	mov	r5, r1
   16280:	bl	11258 <__ctype_toupper_loc@plt>
   16284:	add	r3, r5, r4
   16288:	add	r2, r6, r4
   1628c:	ldrb	lr, [r3, #-1]!
   16290:	ldr	ip, [r0]
   16294:	cmp	r5, r3
   16298:	ldr	ip, [ip, lr, lsl #2]
   1629c:	strb	ip, [r2, #-1]!
   162a0:	bne	1628c <__assert_fail@plt+0x4ea8>
   162a4:	mov	r0, r6
   162a8:	pop	{r4, r5, r6, pc}
   162ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162b0:	sub	sp, sp, #1120	; 0x460
   162b4:	sub	sp, sp, #4
   162b8:	mov	r4, r3
   162bc:	str	r3, [sp, #40]	; 0x28
   162c0:	str	r1, [sp, #36]	; 0x24
   162c4:	mov	sl, r2
   162c8:	mov	r6, r0
   162cc:	bl	112c4 <__errno_location@plt>
   162d0:	ldr	r3, [r4, #40]	; 0x28
   162d4:	ldr	r2, [r4, #8]
   162d8:	mov	r1, r3
   162dc:	ldr	r3, [pc, #4040]	; 172ac <__assert_fail@plt+0x5ec8>
   162e0:	mov	ip, r2
   162e4:	str	r2, [sp, #56]	; 0x38
   162e8:	subs	r2, r1, #0
   162ec:	moveq	r2, r3
   162f0:	cmp	ip, #12
   162f4:	str	r2, [sp, #60]	; 0x3c
   162f8:	ldr	r5, [sp, #1168]	; 0x490
   162fc:	ldr	r3, [r0]
   16300:	str	r0, [sp, #48]	; 0x30
   16304:	str	r3, [sp, #68]	; 0x44
   16308:	ldrb	r3, [sp, #1160]	; 0x488
   1630c:	str	r3, [sp, #64]	; 0x40
   16310:	subgt	r3, ip, #12
   16314:	strgt	r3, [sp, #56]	; 0x38
   16318:	bgt	16328 <__assert_fail@plt+0x4f44>
   1631c:	subs	r3, ip, #0
   16320:	moveq	r3, #12
   16324:	str	r3, [sp, #56]	; 0x38
   16328:	ldrb	r3, [sl]
   1632c:	cmp	r3, #0
   16330:	beq	17b9c <__assert_fail@plt+0x67b8>
   16334:	ldr	fp, [pc, #3956]	; 172b0 <__assert_fail@plt+0x5ecc>
   16338:	mov	r2, #0
   1633c:	str	r2, [sp, #28]
   16340:	str	sl, [sp, #32]
   16344:	cmp	r3, #37	; 0x25
   16348:	beq	16438 <__assert_fail@plt+0x5054>
   1634c:	bic	r5, r5, r5, asr #31
   16350:	ldr	r2, [sp, #36]	; 0x24
   16354:	ldr	r1, [sp, #28]
   16358:	cmp	r5, #1
   1635c:	movcs	r4, r5
   16360:	movcc	r4, #1
   16364:	sub	r2, r2, r1
   16368:	cmp	r4, r2
   1636c:	bcs	16414 <__assert_fail@plt+0x5030>
   16370:	cmp	r6, #0
   16374:	beq	163a4 <__assert_fail@plt+0x4fc0>
   16378:	cmp	r5, #1
   1637c:	ble	163a0 <__assert_fail@plt+0x4fbc>
   16380:	sub	r5, r5, #1
   16384:	mov	r0, r6
   16388:	mov	r2, r5
   1638c:	mov	r1, #32
   16390:	bl	112e8 <memset@plt>
   16394:	ldr	r3, [sp, #32]
   16398:	add	r6, r6, r5
   1639c:	ldrb	r3, [r3]
   163a0:	strb	r3, [r6], #1
   163a4:	ldr	r3, [sp, #28]
   163a8:	add	r3, r3, r4
   163ac:	ldr	r4, [sp, #32]
   163b0:	str	r3, [sp, #28]
   163b4:	ldrb	r3, [r4, #1]
   163b8:	add	r2, r4, #1
   163bc:	str	r2, [sp, #32]
   163c0:	cmp	r3, #0
   163c4:	mvn	r5, #0
   163c8:	bne	16344 <__assert_fail@plt+0x4f60>
   163cc:	ldr	r3, [sp, #36]	; 0x24
   163d0:	ldr	r2, [sp, #68]	; 0x44
   163d4:	cmp	r6, #0
   163d8:	cmpne	r3, #0
   163dc:	movne	r3, #0
   163e0:	strbne	r3, [r6]
   163e4:	ldr	r3, [sp, #48]	; 0x30
   163e8:	ldr	r0, [sp, #28]
   163ec:	str	r2, [r3]
   163f0:	b	1642c <__assert_fail@plt+0x5048>
   163f4:	ldr	r3, [sp, #28]
   163f8:	ldr	r2, [sp, #36]	; 0x24
   163fc:	add	r3, r3, r8
   16400:	str	r3, [sp, #28]
   16404:	sub	r3, r2, r3
   16408:	cmp	r3, #1
   1640c:	sub	r5, r5, r8
   16410:	bhi	16cf0 <__assert_fail@plt+0x590c>
   16414:	ldr	r2, [sp, #48]	; 0x30
   16418:	mov	r3, #34	; 0x22
   1641c:	str	r3, [r2]
   16420:	mov	r3, #0
   16424:	mov	r0, r3
   16428:	str	r3, [sp, #28]
   1642c:	add	sp, sp, #1120	; 0x460
   16430:	add	sp, sp, #4
   16434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16438:	mov	r7, #0
   1643c:	ldr	r4, [sp, #32]
   16440:	ldr	r3, [sp, #64]	; 0x40
   16444:	mov	sl, r7
   16448:	str	r3, [sp, #44]	; 0x2c
   1644c:	ldrb	r1, [r4, #1]!
   16450:	sub	r3, r1, #35	; 0x23
   16454:	mov	r9, r1
   16458:	cmp	r3, #60	; 0x3c
   1645c:	ldrls	pc, [pc, r3, lsl #2]
   16460:	b	16574 <__assert_fail@plt+0x5190>
   16464:	andeq	r6, r1, ip, ror #10
   16468:	andeq	r6, r1, r4, ror r5
   1646c:	andeq	r6, r1, r4, ror r5
   16470:	andeq	r6, r1, r4, ror r5
   16474:	andeq	r6, r1, r4, ror r5
   16478:	andeq	r6, r1, r4, ror r5
   1647c:	andeq	r6, r1, r4, ror r5
   16480:	andeq	r6, r1, r4, ror r5
   16484:	andeq	r6, r1, r4, ror #10
   16488:	andeq	r6, r1, r4, ror r5
   1648c:	andeq	r6, r1, r4, ror #10
   16490:	andeq	r6, r1, r4, ror r5
   16494:	andeq	r6, r1, r4, ror r5
   16498:	andeq	r6, r1, r4, ror #10
   1649c:	andeq	r6, r1, r4, ror r5
   164a0:	andeq	r6, r1, r4, ror r5
   164a4:	andeq	r6, r1, r4, ror r5
   164a8:	andeq	r6, r1, r4, ror r5
   164ac:	andeq	r6, r1, r4, ror r5
   164b0:	andeq	r6, r1, r4, ror r5
   164b4:	andeq	r6, r1, r4, ror r5
   164b8:	andeq	r6, r1, r4, ror r5
   164bc:	andeq	r6, r1, r4, ror r5
   164c0:	andeq	r6, r1, r4, ror r5
   164c4:	andeq	r6, r1, r4, ror r5
   164c8:	andeq	r6, r1, r4, ror r5
   164cc:	andeq	r6, r1, r4, ror r5
   164d0:	andeq	r6, r1, r4, ror r5
   164d4:	andeq	r6, r1, r4, ror r5
   164d8:	andeq	r6, r1, r4, ror r5
   164dc:	andeq	r6, r1, r4, ror r5
   164e0:	andeq	r6, r1, r4, ror r5
   164e4:	andeq	r6, r1, r4, ror r5
   164e8:	andeq	r6, r1, r4, ror r5
   164ec:	andeq	r6, r1, r4, ror r5
   164f0:	andeq	r6, r1, r4, ror r5
   164f4:	andeq	r6, r1, r4, ror r5
   164f8:	andeq	r6, r1, r4, ror r5
   164fc:	andeq	r6, r1, r4, ror r5
   16500:	andeq	r6, r1, r4, ror r5
   16504:	andeq	r6, r1, r4, ror r5
   16508:	andeq	r6, r1, r4, ror r5
   1650c:	andeq	r6, r1, r4, ror r5
   16510:	andeq	r6, r1, r4, ror r5
   16514:	andeq	r6, r1, r4, ror r5
   16518:	andeq	r6, r1, r4, ror r5
   1651c:	andeq	r6, r1, r4, ror r5
   16520:	andeq	r6, r1, r4, ror r5
   16524:	andeq	r6, r1, r4, ror r5
   16528:	andeq	r6, r1, r4, ror r5
   1652c:	andeq	r6, r1, r4, ror r5
   16530:	andeq	r6, r1, r4, ror r5
   16534:	andeq	r6, r1, r4, ror r5
   16538:	andeq	r6, r1, r4, ror r5
   1653c:	andeq	r6, r1, r4, ror r5
   16540:	andeq	r6, r1, r4, ror r5
   16544:	andeq	r6, r1, r4, ror r5
   16548:	andeq	r6, r1, r4, ror r5
   1654c:	andeq	r6, r1, r4, ror r5
   16550:	andeq	r6, r1, r8, asr r5
   16554:	andeq	r6, r1, r4, ror #10
   16558:	mov	r3, #1
   1655c:	str	r3, [sp, #44]	; 0x2c
   16560:	b	1644c <__assert_fail@plt+0x5068>
   16564:	mov	sl, r1
   16568:	b	1644c <__assert_fail@plt+0x5068>
   1656c:	mov	r7, #1
   16570:	b	1644c <__assert_fail@plt+0x5068>
   16574:	sub	r3, r1, #48	; 0x30
   16578:	cmp	r3, #9
   1657c:	bhi	165c0 <__assert_fail@plt+0x51dc>
   16580:	ldr	r9, [pc, #3372]	; 172b4 <__assert_fail@plt+0x5ed0>
   16584:	mov	r5, #0
   16588:	mvn	r8, #-2147483648	; 0x80000000
   1658c:	cmp	r5, #0
   16590:	blt	168a8 <__assert_fail@plt+0x54c4>
   16594:	cmp	r5, r9
   16598:	ble	168c4 <__assert_fail@plt+0x54e0>
   1659c:	mov	r3, r4
   165a0:	ldrb	r1, [r3, #1]
   165a4:	add	r4, r3, #1
   165a8:	mov	r3, r4
   165ac:	sub	r2, r1, #48	; 0x30
   165b0:	cmp	r2, #9
   165b4:	bls	165a0 <__assert_fail@plt+0x51bc>
   165b8:	mov	r9, r1
   165bc:	mvn	r5, #-2147483648	; 0x80000000
   165c0:	cmp	r1, #69	; 0x45
   165c4:	beq	167cc <__assert_fail@plt+0x53e8>
   165c8:	cmp	r1, #79	; 0x4f
   165cc:	movne	r9, #0
   165d0:	beq	167cc <__assert_fail@plt+0x53e8>
   165d4:	cmp	r1, #122	; 0x7a
   165d8:	ldrls	pc, [pc, r1, lsl #2]
   165dc:	b	167dc <__assert_fail@plt+0x53f8>
   165e0:	ldrdeq	r6, [r1], -r8
   165e4:	ldrdeq	r6, [r1], -ip
   165e8:	ldrdeq	r6, [r1], -ip
   165ec:	ldrdeq	r6, [r1], -ip
   165f0:	ldrdeq	r6, [r1], -ip
   165f4:	ldrdeq	r6, [r1], -ip
   165f8:	ldrdeq	r6, [r1], -ip
   165fc:	ldrdeq	r6, [r1], -ip
   16600:	ldrdeq	r6, [r1], -ip
   16604:	ldrdeq	r6, [r1], -ip
   16608:	ldrdeq	r6, [r1], -ip
   1660c:	ldrdeq	r6, [r1], -ip
   16610:	ldrdeq	r6, [r1], -ip
   16614:	ldrdeq	r6, [r1], -ip
   16618:	ldrdeq	r6, [r1], -ip
   1661c:	ldrdeq	r6, [r1], -ip
   16620:	ldrdeq	r6, [r1], -ip
   16624:	ldrdeq	r6, [r1], -ip
   16628:	ldrdeq	r6, [r1], -ip
   1662c:	ldrdeq	r6, [r1], -ip
   16630:	ldrdeq	r6, [r1], -ip
   16634:	ldrdeq	r6, [r1], -ip
   16638:	ldrdeq	r6, [r1], -ip
   1663c:	ldrdeq	r6, [r1], -ip
   16640:	ldrdeq	r6, [r1], -ip
   16644:	ldrdeq	r6, [r1], -ip
   16648:	ldrdeq	r6, [r1], -ip
   1664c:	ldrdeq	r6, [r1], -ip
   16650:	ldrdeq	r6, [r1], -ip
   16654:	ldrdeq	r6, [r1], -ip
   16658:	ldrdeq	r6, [r1], -ip
   1665c:	ldrdeq	r6, [r1], -ip
   16660:	ldrdeq	r6, [r1], -ip
   16664:	ldrdeq	r6, [r1], -ip
   16668:	ldrdeq	r6, [r1], -ip
   1666c:	ldrdeq	r6, [r1], -ip
   16670:	ldrdeq	r6, [r1], -ip
   16674:	andeq	r7, r1, r4, lsl r3
   16678:	ldrdeq	r6, [r1], -ip
   1667c:	ldrdeq	r6, [r1], -ip
   16680:	ldrdeq	r6, [r1], -ip
   16684:	ldrdeq	r6, [r1], -ip
   16688:	ldrdeq	r6, [r1], -ip
   1668c:	ldrdeq	r6, [r1], -ip
   16690:	ldrdeq	r6, [r1], -ip
   16694:	ldrdeq	r6, [r1], -ip
   16698:	ldrdeq	r6, [r1], -ip
   1669c:	ldrdeq	r6, [r1], -ip
   166a0:	ldrdeq	r6, [r1], -ip
   166a4:	ldrdeq	r6, [r1], -ip
   166a8:	ldrdeq	r6, [r1], -ip
   166ac:	ldrdeq	r6, [r1], -ip
   166b0:	ldrdeq	r6, [r1], -ip
   166b4:	ldrdeq	r6, [r1], -ip
   166b8:	ldrdeq	r6, [r1], -ip
   166bc:	ldrdeq	r6, [r1], -ip
   166c0:	ldrdeq	r6, [r1], -ip
   166c4:	ldrdeq	r6, [r1], -ip
   166c8:	andeq	r7, r1, r4, asr #9
   166cc:	ldrdeq	r6, [r1], -ip
   166d0:	ldrdeq	r6, [r1], -ip
   166d4:	ldrdeq	r6, [r1], -ip
   166d8:	ldrdeq	r6, [r1], -ip
   166dc:	ldrdeq	r6, [r1], -ip
   166e0:	ldrdeq	r6, [r1], -ip
   166e4:	andeq	r6, r1, ip, lsl #22
   166e8:	andeq	r6, r1, ip, ror #18
   166ec:	andeq	r6, r1, ip, asr #22
   166f0:	andeq	r6, r1, r0, lsl #31
   166f4:	ldrdeq	r6, [r1], -ip
   166f8:	andeq	r6, r1, ip, ror #28
   166fc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   16700:	andeq	r7, r1, ip, lsr #9
   16704:	muleq	r1, r8, r4
   16708:	ldrdeq	r6, [r1], -ip
   1670c:	ldrdeq	r6, [r1], -ip
   16710:	ldrdeq	r6, [r1], -ip
   16714:	andeq	r7, r1, r0, lsl #9
   16718:	andeq	r7, r1, r8, ror #10
   1671c:	ldrdeq	r6, [r1], -ip
   16720:	andeq	r7, r1, r8, asr #10
   16724:	ldrdeq	r6, [r1], -ip
   16728:	andeq	r7, r1, ip, lsr r5
   1672c:	andeq	r7, r1, r4, lsr #10
   16730:	andeq	r7, r1, r0, lsr #5
   16734:	andeq	r7, r1, r8, ror #4
   16738:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1673c:	andeq	r7, r1, r8, ror #9
   16740:	andeq	r6, r1, r0, lsl #22
   16744:	andeq	r7, r1, r8, ror sl
   16748:	andeq	r7, r1, r4, asr #19
   1674c:	ldrdeq	r6, [r1], -ip
   16750:	ldrdeq	r6, [r1], -ip
   16754:	ldrdeq	r6, [r1], -ip
   16758:	ldrdeq	r6, [r1], -ip
   1675c:	ldrdeq	r6, [r1], -ip
   16760:	ldrdeq	r6, [r1], -ip
   16764:	andeq	r6, r1, ip, lsl #22
   16768:	andeq	r7, r1, r0, lsl #4
   1676c:	andeq	r6, r1, r0, lsl #22
   16770:	andeq	r7, r1, r0, lsl r1
   16774:	muleq	r1, r0, r8
   16778:	ldrdeq	r6, [r1], -ip
   1677c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   16780:	andeq	r7, r1, r0, lsl #4
   16784:	ldrdeq	r6, [r1], -ip
   16788:	andeq	r7, r1, r4, asr r8
   1678c:	andeq	r7, r1, r4, ror r9
   16790:	andeq	r7, r1, r4, ror #18
   16794:	andeq	r7, r1, r8, lsr #18
   16798:			; <UNDEFINED> instruction: 0x000178b0
   1679c:	ldrdeq	r6, [r1], -ip
   167a0:			; <UNDEFINED> instruction: 0x000179bc
   167a4:	andeq	r7, r1, r8, lsl #19
   167a8:	andeq	r6, r1, r0, lsl #19
   167ac:			; <UNDEFINED> instruction: 0x00016db0
   167b0:	strdeq	r7, [r1], -ip
   167b4:	andeq	r7, r1, r8, asr #7
   167b8:	ldrdeq	r6, [r1], -ip
   167bc:			; <UNDEFINED> instruction: 0x000173b0
   167c0:	andeq	r6, r1, r0, lsl #22
   167c4:	andeq	r7, r1, r4, lsr #4
   167c8:	andeq	r7, r1, r8, asr #2
   167cc:	ldrb	r1, [r4, #1]
   167d0:	add	r4, r4, #1
   167d4:	b	165d4 <__assert_fail@plt+0x51f0>
   167d8:	sub	r4, r4, #1
   167dc:	ldr	r3, [sp, #32]
   167e0:	ldr	r2, [sp, #28]
   167e4:	sub	r8, r4, r3
   167e8:	subs	r3, sl, #45	; 0x2d
   167ec:	movne	r3, #1
   167f0:	cmp	r5, #0
   167f4:	movlt	r3, #0
   167f8:	cmp	r3, #0
   167fc:	add	r7, r8, #1
   16800:	moveq	r5, #0
   16804:	ldr	r3, [sp, #36]	; 0x24
   16808:	cmp	r7, r5
   1680c:	movcs	r9, r7
   16810:	movcc	r9, r5
   16814:	sub	r3, r3, r2
   16818:	cmp	r9, r3
   1681c:	bcs	16414 <__assert_fail@plt+0x5030>
   16820:	cmp	r6, #0
   16824:	beq	16898 <__assert_fail@plt+0x54b4>
   16828:	cmp	r7, r5
   1682c:	bcs	16854 <__assert_fail@plt+0x5470>
   16830:	cmp	sl, #43	; 0x2b
   16834:	cmpne	sl, #48	; 0x30
   16838:	sub	r5, r5, r7
   1683c:	mov	r0, r6
   16840:	mov	r2, r5
   16844:	moveq	r1, #48	; 0x30
   16848:	movne	r1, #32
   1684c:	bl	112e8 <memset@plt>
   16850:	add	r6, r6, r5
   16854:	ldr	r3, [sp, #44]	; 0x2c
   16858:	cmp	r3, #0
   1685c:	beq	16ab4 <__assert_fail@plt+0x56d0>
   16860:	cmp	r7, #0
   16864:	beq	16894 <__assert_fail@plt+0x54b0>
   16868:	bl	11258 <__ctype_toupper_loc@plt>
   1686c:	ldr	r3, [sp, #32]
   16870:	add	r8, r6, r8
   16874:	sub	sl, r3, #1
   16878:	mov	r3, r4
   1687c:	ldrb	r1, [r3], #-1
   16880:	ldr	r2, [r0]
   16884:	cmp	r3, sl
   16888:	ldr	r2, [r2, r1, lsl #2]
   1688c:	strb	r2, [r8], #-1
   16890:	bne	1687c <__assert_fail@plt+0x5498>
   16894:	add	r6, r6, r7
   16898:	ldr	r3, [sp, #28]
   1689c:	add	r3, r3, r9
   168a0:	str	r3, [sp, #28]
   168a4:	b	163b4 <__assert_fail@plt+0x4fd0>
   168a8:	cmn	r5, #1
   168ac:	beq	16940 <__assert_fail@plt+0x555c>
   168b0:	mov	r1, r5
   168b4:	mov	r0, #-2147483648	; 0x80000000
   168b8:	bl	20254 <__assert_fail@plt+0xee70>
   168bc:	cmp	r0, #9
   168c0:	ble	1659c <__assert_fail@plt+0x51b8>
   168c4:	ldrb	r0, [r4]
   168c8:	add	r5, r5, r5, lsl #2
   168cc:	cmp	r0, #47	; 0x2f
   168d0:	lsl	r3, r5, #1
   168d4:	mov	r1, r3
   168d8:	ble	16958 <__assert_fail@plt+0x5574>
   168dc:	cmp	r3, #0
   168e0:	blt	1691c <__assert_fail@plt+0x5538>
   168e4:	sub	r2, r0, #48	; 0x30
   168e8:	sub	r2, r8, r2
   168ec:	cmp	r3, r2
   168f0:	movle	r2, #0
   168f4:	movgt	r2, #1
   168f8:	cmp	r2, #0
   168fc:	beq	1691c <__assert_fail@plt+0x5538>
   16900:	ldrb	r1, [r4, #1]
   16904:	add	r3, r4, #1
   16908:	sub	r2, r1, #48	; 0x30
   1690c:	cmp	r2, #9
   16910:	bls	165a0 <__assert_fail@plt+0x51bc>
   16914:	mov	r4, r3
   16918:	b	165b8 <__assert_fail@plt+0x51d4>
   1691c:	ldrb	r1, [r4, #1]
   16920:	add	r3, r0, r3
   16924:	sub	r5, r3, #48	; 0x30
   16928:	sub	r3, r1, #48	; 0x30
   1692c:	cmp	r3, #9
   16930:	add	r4, r4, #1
   16934:	bls	1658c <__assert_fail@plt+0x51a8>
   16938:	mov	r9, r1
   1693c:	b	165c0 <__assert_fail@plt+0x51dc>
   16940:	ldrb	r0, [r4]
   16944:	cmp	r0, #47	; 0x2f
   16948:	mvngt	r3, #9
   1694c:	bgt	1691c <__assert_fail@plt+0x5538>
   16950:	mvn	r1, #9
   16954:	mov	r3, r1
   16958:	rsb	r2, r0, #-2147483600	; 0x80000030
   1695c:	cmp	r2, r1
   16960:	movle	r2, #0
   16964:	movgt	r2, #1
   16968:	b	168f8 <__assert_fail@plt+0x5514>
   1696c:	cmp	r9, #69	; 0x45
   16970:	beq	167dc <__assert_fail@plt+0x53f8>
   16974:	cmp	r7, #0
   16978:	beq	16984 <__assert_fail@plt+0x55a0>
   1697c:	str	r7, [sp, #44]	; 0x2c
   16980:	mov	r7, #0
   16984:	cmp	r9, #0
   16988:	mov	r3, #37	; 0x25
   1698c:	mov	r2, #32
   16990:	strb	r3, [sp, #81]	; 0x51
   16994:	addeq	r3, sp, #80	; 0x50
   16998:	strb	r2, [sp, #80]	; 0x50
   1699c:	streq	r3, [sp, #32]
   169a0:	addeq	ip, sp, #82	; 0x52
   169a4:	moveq	r2, r3
   169a8:	bne	16a9c <__assert_fail@plt+0x56b8>
   169ac:	mov	lr, #0
   169b0:	strb	r1, [ip]
   169b4:	add	r0, sp, #96	; 0x60
   169b8:	ldr	r3, [sp, #40]	; 0x28
   169bc:	strb	lr, [ip, #1]
   169c0:	mov	r1, #1024	; 0x400
   169c4:	bl	11234 <strftime@plt>
   169c8:	subs	r9, r0, #0
   169cc:	beq	163b4 <__assert_fail@plt+0x4fd0>
   169d0:	mvn	r3, r5
   169d4:	cmp	sl, #45	; 0x2d
   169d8:	lsr	r3, r3, #31
   169dc:	moveq	r3, #0
   169e0:	cmp	r3, #0
   169e4:	moveq	r5, #0
   169e8:	sub	r8, r9, #1
   169ec:	cmp	r8, r5
   169f0:	movcs	r3, r8
   169f4:	movcc	r3, r5
   169f8:	mov	r2, r3
   169fc:	str	r3, [sp, #32]
   16a00:	ldr	r1, [sp, #28]
   16a04:	ldr	r3, [sp, #36]	; 0x24
   16a08:	sub	r3, r3, r1
   16a0c:	cmp	r2, r3
   16a10:	bcs	16414 <__assert_fail@plt+0x5030>
   16a14:	cmp	r6, #0
   16a18:	beq	16a78 <__assert_fail@plt+0x5694>
   16a1c:	cmp	r8, r5
   16a20:	bcs	16a48 <__assert_fail@plt+0x5664>
   16a24:	cmp	sl, #43	; 0x2b
   16a28:	cmpne	sl, #48	; 0x30
   16a2c:	sub	r5, r5, r8
   16a30:	mov	r0, r6
   16a34:	mov	r2, r5
   16a38:	moveq	r1, #48	; 0x30
   16a3c:	movne	r1, #32
   16a40:	bl	112e8 <memset@plt>
   16a44:	add	r6, r6, r5
   16a48:	cmp	r7, #0
   16a4c:	bne	17afc <__assert_fail@plt+0x6718>
   16a50:	ldr	r3, [sp, #44]	; 0x2c
   16a54:	cmp	r3, #0
   16a58:	bne	16ac8 <__assert_fail@plt+0x56e4>
   16a5c:	mov	r2, r8
   16a60:	add	r1, sp, #97	; 0x61
   16a64:	mov	r0, r6
   16a68:	bl	1112c <memcpy@plt>
   16a6c:	add	r8, r6, r8
   16a70:	ldr	r2, [sp, #32]
   16a74:	mov	r6, r8
   16a78:	ldr	r3, [sp, #28]
   16a7c:	add	r3, r3, r2
   16a80:	str	r3, [sp, #28]
   16a84:	b	163b4 <__assert_fail@plt+0x4fd0>
   16a88:	mov	r7, #0
   16a8c:	mov	r2, #32
   16a90:	mov	r3, #37	; 0x25
   16a94:	strb	r2, [sp, #80]	; 0x50
   16a98:	strb	r3, [sp, #81]	; 0x51
   16a9c:	add	r3, sp, #80	; 0x50
   16aa0:	str	r3, [sp, #32]
   16aa4:	strb	r9, [sp, #82]	; 0x52
   16aa8:	add	ip, sp, #83	; 0x53
   16aac:	mov	r2, r3
   16ab0:	b	169ac <__assert_fail@plt+0x55c8>
   16ab4:	ldr	r1, [sp, #32]
   16ab8:	mov	r2, r7
   16abc:	mov	r0, r6
   16ac0:	bl	1112c <memcpy@plt>
   16ac4:	b	16894 <__assert_fail@plt+0x54b0>
   16ac8:	cmp	r8, #0
   16acc:	beq	17d18 <__assert_fail@plt+0x6934>
   16ad0:	bl	11258 <__ctype_toupper_loc@plt>
   16ad4:	add	r8, r6, r8
   16ad8:	add	r3, sp, #96	; 0x60
   16adc:	add	r9, r3, r9
   16ae0:	mov	r3, r8
   16ae4:	ldrb	r1, [r9, #-1]!
   16ae8:	ldr	r2, [r0]
   16aec:	ldr	r2, [r2, r1, lsl #2]
   16af0:	strb	r2, [r3, #-1]!
   16af4:	cmp	r6, r3
   16af8:	bne	16ae4 <__assert_fail@plt+0x5700>
   16afc:	b	16a70 <__assert_fail@plt+0x568c>
   16b00:	cmp	r9, #79	; 0x4f
   16b04:	bne	16980 <__assert_fail@plt+0x559c>
   16b08:	b	167dc <__assert_fail@plt+0x53f8>
   16b0c:	cmp	r9, #0
   16b10:	bne	167dc <__assert_fail@plt+0x53f8>
   16b14:	ldr	r3, [sp, #44]	; 0x2c
   16b18:	cmp	r7, #0
   16b1c:	moveq	r7, r3
   16b20:	mov	r2, #32
   16b24:	add	r0, sp, #80	; 0x50
   16b28:	mov	r3, #37	; 0x25
   16b2c:	str	r7, [sp, #44]	; 0x2c
   16b30:	strb	r2, [sp, #80]	; 0x50
   16b34:	str	r0, [sp, #32]
   16b38:	strb	r3, [sp, #81]	; 0x51
   16b3c:	add	ip, sp, #82	; 0x52
   16b40:	mov	r7, #0
   16b44:	mov	r2, r0
   16b48:	b	169ac <__assert_fail@plt+0x55c8>
   16b4c:	cmp	r9, #69	; 0x45
   16b50:	beq	16a88 <__assert_fail@plt+0x56a4>
   16b54:	ldr	r3, [sp, #40]	; 0x28
   16b58:	ldr	r0, [pc, #1880]	; 172b8 <__assert_fail@plt+0x5ed4>
   16b5c:	mvn	ip, #98	; 0x62
   16b60:	ldr	r2, [r3, #20]
   16b64:	add	r3, r2, #1888	; 0x760
   16b68:	add	r3, r3, #12
   16b6c:	cmp	r3, r0
   16b70:	ldr	r0, [pc, #1912]	; 172f0 <__assert_fail@plt+0x5f0c>
   16b74:	movhi	r3, #0
   16b78:	movls	r3, #1
   16b7c:	cmp	r2, r0
   16b80:	mla	r3, ip, r3, r2
   16b84:	movge	ip, #0
   16b88:	movlt	ip, #1
   16b8c:	str	ip, [sp, #52]	; 0x34
   16b90:	ldr	ip, [pc, #1896]	; 17300 <__assert_fail@plt+0x5f1c>
   16b94:	cmp	sl, #0
   16b98:	smull	lr, ip, ip, r3
   16b9c:	asr	r3, r3, #31
   16ba0:	rsb	r3, r3, ip, asr #5
   16ba4:	add	r3, r3, #19
   16ba8:	bne	17bc4 <__assert_fail@plt+0x67e0>
   16bac:	ldr	ip, [sp, #1164]	; 0x48c
   16bb0:	cmp	r2, r0
   16bb4:	movlt	r2, #0
   16bb8:	movge	r2, #1
   16bbc:	cmp	ip, #43	; 0x2b
   16bc0:	beq	17c0c <__assert_fail@plt+0x6828>
   16bc4:	mov	sl, ip
   16bc8:	mov	lr, #0
   16bcc:	mov	ip, #2
   16bd0:	mov	r0, #0
   16bd4:	cmp	r9, #79	; 0x4f
   16bd8:	movne	r2, #0
   16bdc:	andeq	r2, r2, #1
   16be0:	cmp	r2, #0
   16be4:	uxtbne	r1, r1
   16be8:	bne	16a88 <__assert_fail@plt+0x56a4>
   16bec:	ldr	r2, [sp, #52]	; 0x34
   16bf0:	cmp	r2, #0
   16bf4:	rsbne	r3, r3, #0
   16bf8:	add	r2, sp, #80	; 0x50
   16bfc:	add	r7, sp, #94	; 0x5e
   16c00:	str	r2, [sp, #32]
   16c04:	ldr	r9, [pc, #1712]	; 172bc <__assert_fail@plt+0x5ed8>
   16c08:	mov	r2, r7
   16c0c:	mov	r7, r3
   16c10:	mov	r3, r2
   16c14:	tst	r0, #1
   16c18:	movne	r2, #58	; 0x3a
   16c1c:	mov	r8, r3
   16c20:	strbne	r2, [r3, #-1]
   16c24:	subne	r8, r3, #1
   16c28:	umull	r3, r2, r9, r7
   16c2c:	asrs	r0, r0, #1
   16c30:	lsr	r2, r2, #3
   16c34:	movne	r1, #1
   16c38:	add	r3, r2, r2, lsl #2
   16c3c:	moveq	r1, #0
   16c40:	sub	r3, r7, r3, lsl #1
   16c44:	cmp	r2, #0
   16c48:	orrne	r1, r1, #1
   16c4c:	add	r3, r3, #48	; 0x30
   16c50:	cmp	r1, #0
   16c54:	strb	r3, [r8, #-1]
   16c58:	mov	r7, r2
   16c5c:	sub	r3, r8, #1
   16c60:	bne	16c14 <__assert_fail@plt+0x5830>
   16c64:	mov	r7, r3
   16c68:	cmp	sl, #0
   16c6c:	moveq	r9, #1
   16c70:	moveq	sl, #48	; 0x30
   16c74:	beq	16c80 <__assert_fail@plt+0x589c>
   16c78:	subs	r9, sl, #45	; 0x2d
   16c7c:	movne	r9, #1
   16c80:	ldr	r3, [sp, #52]	; 0x34
   16c84:	cmp	r5, #0
   16c88:	movlt	r5, ip
   16c8c:	cmp	r3, #0
   16c90:	bne	17adc <__assert_fail@plt+0x66f8>
   16c94:	cmp	lr, #0
   16c98:	beq	17b34 <__assert_fail@plt+0x6750>
   16c9c:	mov	r3, #43	; 0x2b
   16ca0:	ldr	r2, [sp, #32]
   16ca4:	add	r8, r2, #14
   16ca8:	sub	r2, r8, r7
   16cac:	sub	r8, r5, #1
   16cb0:	sub	r8, r8, r2
   16cb4:	str	r2, [sp, #32]
   16cb8:	cmp	r8, #0
   16cbc:	movle	r2, #0
   16cc0:	andgt	r2, r9, #1
   16cc4:	cmp	r2, #0
   16cc8:	moveq	r8, #0
   16ccc:	cmp	sl, #95	; 0x5f
   16cd0:	beq	17b64 <__assert_fail@plt+0x6780>
   16cd4:	ldr	r2, [sp, #36]	; 0x24
   16cd8:	ldr	r1, [sp, #28]
   16cdc:	sub	r2, r2, r1
   16ce0:	cmp	r2, #1
   16ce4:	bls	16414 <__assert_fail@plt+0x5030>
   16ce8:	cmp	r6, #0
   16cec:	strbne	r3, [r6], #1
   16cf0:	ldr	r3, [sp, #28]
   16cf4:	sub	r5, r5, #1
   16cf8:	cmp	r5, #0
   16cfc:	movlt	r9, #0
   16d00:	andge	r9, r9, #1
   16d04:	add	r3, r3, #1
   16d08:	cmp	r9, #0
   16d0c:	str	r3, [sp, #28]
   16d10:	ldr	r8, [sp, #32]
   16d14:	bne	16d1c <__assert_fail@plt+0x5938>
   16d18:	mov	r5, r9
   16d1c:	ldr	r3, [sp, #36]	; 0x24
   16d20:	ldr	r2, [sp, #28]
   16d24:	cmp	r5, r8
   16d28:	movcs	r9, r5
   16d2c:	movcc	r9, r8
   16d30:	sub	r3, r3, r2
   16d34:	cmp	r9, r3
   16d38:	bcs	16414 <__assert_fail@plt+0x5030>
   16d3c:	cmp	r6, #0
   16d40:	beq	16898 <__assert_fail@plt+0x54b4>
   16d44:	cmp	r5, r8
   16d48:	bls	16d70 <__assert_fail@plt+0x598c>
   16d4c:	cmp	sl, #43	; 0x2b
   16d50:	cmpne	sl, #48	; 0x30
   16d54:	sub	r5, r5, r8
   16d58:	mov	r0, r6
   16d5c:	mov	r2, r5
   16d60:	moveq	r1, #48	; 0x30
   16d64:	movne	r1, #32
   16d68:	bl	112e8 <memset@plt>
   16d6c:	add	r6, r6, r5
   16d70:	ldr	r3, [sp, #44]	; 0x2c
   16d74:	cmp	r3, #0
   16d78:	beq	17ae4 <__assert_fail@plt+0x6700>
   16d7c:	cmp	r8, #0
   16d80:	beq	16898 <__assert_fail@plt+0x54b4>
   16d84:	add	r6, r6, r8
   16d88:	bl	11258 <__ctype_toupper_loc@plt>
   16d8c:	add	r8, r7, r8
   16d90:	mov	r3, r6
   16d94:	ldrb	r1, [r8, #-1]!
   16d98:	ldr	r2, [r0]
   16d9c:	cmp	r7, r8
   16da0:	ldr	r2, [r2, r1, lsl #2]
   16da4:	strb	r2, [r3, #-1]!
   16da8:	bne	16d94 <__assert_fail@plt+0x59b0>
   16dac:	b	16898 <__assert_fail@plt+0x54b4>
   16db0:	ldr	lr, [sp, #40]	; 0x28
   16db4:	add	ip, sp, #96	; 0x60
   16db8:	mvn	r7, #0
   16dbc:	ldm	lr!, {r0, r1, r2, r3}
   16dc0:	stmia	ip!, {r0, r1, r2, r3}
   16dc4:	ldm	lr!, {r0, r1, r2, r3}
   16dc8:	stmia	ip!, {r0, r1, r2, r3}
   16dcc:	ldm	lr, {r0, r1, r2}
   16dd0:	str	r7, [sp, #124]	; 0x7c
   16dd4:	stm	ip, {r0, r1, r2}
   16dd8:	add	r1, sp, #96	; 0x60
   16ddc:	ldr	r0, [sp, #1176]	; 0x498
   16de0:	bl	1c49c <__assert_fail@plt+0xb0b8>
   16de4:	ldr	r3, [sp, #124]	; 0x7c
   16de8:	cmp	r3, #0
   16dec:	blt	17c9c <__assert_fail@plt+0x68b8>
   16df0:	lsr	r3, r0, #31
   16df4:	str	r3, [sp, #52]	; 0x34
   16df8:	cmp	r0, #0
   16dfc:	add	r3, sp, #80	; 0x50
   16e00:	str	r3, [sp, #32]
   16e04:	add	r7, sp, #94	; 0x5e
   16e08:	blt	16e40 <__assert_fail@plt+0x5a5c>
   16e0c:	smull	r3, r2, fp, r0
   16e10:	asr	r3, r0, #31
   16e14:	rsb	r3, r3, r2, asr #2
   16e18:	mov	r2, r3
   16e1c:	add	r3, r3, r3, lsl #2
   16e20:	sub	r3, r0, r3, lsl #1
   16e24:	add	r3, r3, #48	; 0x30
   16e28:	subs	r0, r2, #0
   16e2c:	strb	r3, [r7, #-1]!
   16e30:	bne	16e0c <__assert_fail@plt+0x5a28>
   16e34:	mov	lr, #0
   16e38:	mov	ip, #1
   16e3c:	b	16c68 <__assert_fail@plt+0x5884>
   16e40:	smull	r3, r2, fp, r0
   16e44:	asr	r3, r0, #31
   16e48:	rsb	r3, r3, r2, asr #2
   16e4c:	mov	r2, r3
   16e50:	add	r3, r3, r3, lsl #2
   16e54:	sub	r3, r0, r3, lsl #1
   16e58:	rsb	r3, r3, #48	; 0x30
   16e5c:	subs	r0, r2, #0
   16e60:	strb	r3, [r7, #-1]!
   16e64:	bne	16e40 <__assert_fail@plt+0x5a5c>
   16e68:	b	16e34 <__assert_fail@plt+0x5a50>
   16e6c:	cmp	r9, #0
   16e70:	bne	167dc <__assert_fail@plt+0x53f8>
   16e74:	clz	r3, sl
   16e78:	lsr	r3, r3, #5
   16e7c:	ands	r3, r3, r5, lsr #31
   16e80:	bne	17c44 <__assert_fail@plt+0x6860>
   16e84:	sub	r7, r5, #6
   16e88:	ldr	r9, [pc, #1124]	; 172f4 <__assert_fail@plt+0x5f10>
   16e8c:	bic	r7, r7, r7, asr #31
   16e90:	ldr	r3, [sp, #1180]	; 0x49c
   16e94:	str	r7, [sp, #8]
   16e98:	str	r3, [sp, #20]
   16e9c:	ldr	r3, [sp, #1176]	; 0x498
   16ea0:	str	sl, [sp, #4]
   16ea4:	str	r3, [sp, #16]
   16ea8:	ldr	r3, [sp, #1172]	; 0x494
   16eac:	mov	r2, r9
   16eb0:	str	r3, [sp, #12]
   16eb4:	ldr	r3, [sp, #44]	; 0x2c
   16eb8:	mvn	r1, #0
   16ebc:	str	r3, [sp]
   16ec0:	mov	r0, #0
   16ec4:	ldr	r3, [sp, #40]	; 0x28
   16ec8:	bl	162ac <__assert_fail@plt+0x4ec8>
   16ecc:	cmp	sl, #45	; 0x2d
   16ed0:	moveq	r3, #0
   16ed4:	bicne	r3, r5, r5, asr #31
   16ed8:	mov	r8, r0
   16edc:	ldr	r1, [sp, #36]	; 0x24
   16ee0:	ldr	r0, [sp, #28]
   16ee4:	cmp	r3, r8
   16ee8:	movcs	r2, r3
   16eec:	movcc	r2, r8
   16ef0:	sub	r1, r1, r0
   16ef4:	cmp	r2, r1
   16ef8:	str	r2, [sp, #32]
   16efc:	str	r1, [sp, #52]	; 0x34
   16f00:	bcs	16414 <__assert_fail@plt+0x5030>
   16f04:	cmp	r6, #0
   16f08:	beq	16a78 <__assert_fail@plt+0x5694>
   16f0c:	cmp	r3, r8
   16f10:	bls	16f3c <__assert_fail@plt+0x5b58>
   16f14:	cmp	sl, #43	; 0x2b
   16f18:	cmpne	sl, #48	; 0x30
   16f1c:	sub	r5, r3, r8
   16f20:	moveq	r1, #48	; 0x30
   16f24:	movne	r1, #32
   16f28:	mov	r0, r6
   16f2c:	mov	r2, r5
   16f30:	bl	112e8 <memset@plt>
   16f34:	ldr	r1, [sp, #52]	; 0x34
   16f38:	add	r6, r6, r5
   16f3c:	ldr	r3, [sp, #1180]	; 0x49c
   16f40:	mov	r2, r9
   16f44:	str	r3, [sp, #20]
   16f48:	ldr	r3, [sp, #1176]	; 0x498
   16f4c:	mov	r0, r6
   16f50:	str	r3, [sp, #16]
   16f54:	ldr	r3, [sp, #1172]	; 0x494
   16f58:	str	r7, [sp, #8]
   16f5c:	str	r3, [sp, #12]
   16f60:	ldr	r3, [sp, #44]	; 0x2c
   16f64:	str	sl, [sp, #4]
   16f68:	str	r3, [sp]
   16f6c:	ldr	r3, [sp, #40]	; 0x28
   16f70:	bl	162ac <__assert_fail@plt+0x4ec8>
   16f74:	add	r6, r6, r8
   16f78:	ldr	r2, [sp, #32]
   16f7c:	b	16a78 <__assert_fail@plt+0x5694>
   16f80:	cmp	r9, #0
   16f84:	bne	167dc <__assert_fail@plt+0x53f8>
   16f88:	mvn	r7, #0
   16f8c:	ldr	r9, [pc, #812]	; 172c0 <__assert_fail@plt+0x5edc>
   16f90:	b	16e90 <__assert_fail@plt+0x5aac>
   16f94:	cmp	r9, #69	; 0x45
   16f98:	beq	167dc <__assert_fail@plt+0x53f8>
   16f9c:	ldr	r3, [sp, #40]	; 0x28
   16fa0:	ldr	r8, [r3, #28]
   16fa4:	ldr	r2, [r3, #24]
   16fa8:	ldr	r7, [r3, #20]
   16fac:	str	r2, [sp, #32]
   16fb0:	sub	r2, r8, r2
   16fb4:	add	r2, r2, #380	; 0x17c
   16fb8:	ldr	r3, [pc, #844]	; 1730c <__assert_fail@plt+0x5f28>
   16fbc:	add	r2, r2, #2
   16fc0:	cmp	r7, #0
   16fc4:	smull	r0, r3, r3, r2
   16fc8:	add	r3, r3, r2
   16fcc:	asr	r0, r2, #31
   16fd0:	rsb	r0, r0, r3, asr #2
   16fd4:	mvnge	r3, #99	; 0x63
   16fd8:	rsb	r0, r0, r0, lsl #3
   16fdc:	sub	r2, r2, r0
   16fe0:	sub	r2, r8, r2
   16fe4:	movlt	r3, #300	; 0x12c
   16fe8:	adds	r2, r2, #3
   16fec:	str	r2, [sp, #52]	; 0x34
   16ff0:	add	r3, r3, r7
   16ff4:	bmi	17e44 <__assert_fail@plt+0x6a60>
   16ff8:	tst	r3, #3
   16ffc:	ldrne	r3, [pc, #772]	; 17308 <__assert_fail@plt+0x5f24>
   17000:	bne	17048 <__assert_fail@plt+0x5c64>
   17004:	ldr	r2, [pc, #756]	; 17300 <__assert_fail@plt+0x5f1c>
   17008:	mov	r0, #100	; 0x64
   1700c:	smull	r2, ip, r2, r3
   17010:	asr	r2, r3, #31
   17014:	rsb	lr, r2, ip, asr #5
   17018:	mul	r0, r0, lr
   1701c:	cmp	r3, r0
   17020:	ldrne	r3, [pc, #732]	; 17304 <__assert_fail@plt+0x5f20>
   17024:	bne	17048 <__assert_fail@plt+0x5c64>
   17028:	rsb	r2, r2, ip, asr #7
   1702c:	mov	ip, #400	; 0x190
   17030:	ldr	r0, [pc, #720]	; 17308 <__assert_fail@plt+0x5f24>
   17034:	mul	r2, ip, r2
   17038:	sub	ip, ip, #34	; 0x22
   1703c:	cmp	r3, r2
   17040:	movne	r3, r0
   17044:	moveq	r3, ip
   17048:	ldr	r2, [sp, #32]
   1704c:	sub	r3, r8, r3
   17050:	sub	r2, r3, r2
   17054:	ldr	r0, [pc, #688]	; 1730c <__assert_fail@plt+0x5f28>
   17058:	add	r2, r2, #380	; 0x17c
   1705c:	add	r2, r2, #2
   17060:	smull	r0, ip, r0, r2
   17064:	add	ip, ip, r2
   17068:	asr	r0, r2, #31
   1706c:	rsb	r0, r0, ip, asr #2
   17070:	rsb	r0, r0, r0, lsl #3
   17074:	sub	r2, r2, r0
   17078:	sub	r3, r3, r2
   1707c:	adds	r3, r3, #3
   17080:	movmi	r0, #0
   17084:	movpl	r0, #1
   17088:	ldrmi	r3, [sp, #52]	; 0x34
   1708c:	ldrmi	lr, [pc, #604]	; 172f0 <__assert_fail@plt+0x5f0c>
   17090:	ldrpl	lr, [pc, #556]	; 172c4 <__assert_fail@plt+0x5ee0>
   17094:	movmi	r8, r0
   17098:	movpl	r8, r0
   1709c:	cmp	r1, #71	; 0x47
   170a0:	beq	17ccc <__assert_fail@plt+0x68e8>
   170a4:	cmp	r1, #103	; 0x67
   170a8:	bne	17cac <__assert_fail@plt+0x68c8>
   170ac:	ldr	r3, [pc, #588]	; 17300 <__assert_fail@plt+0x5f1c>
   170b0:	mov	r0, #100	; 0x64
   170b4:	smull	r2, r3, r3, r7
   170b8:	asr	r2, r7, #31
   170bc:	rsb	r2, r2, r3, asr #5
   170c0:	ldr	r3, [pc, #568]	; 17300 <__assert_fail@plt+0x5f1c>
   170c4:	mul	r2, r0, r2
   170c8:	sub	r2, r7, r2
   170cc:	add	r2, r2, r8
   170d0:	smull	r3, ip, r3, r2
   170d4:	asr	r3, r2, #31
   170d8:	rsb	r3, r3, ip, asr #5
   170dc:	mul	r3, r0, r3
   170e0:	subs	r3, r2, r3
   170e4:	bmi	17bd4 <__assert_fail@plt+0x67f0>
   170e8:	cmp	sl, #0
   170ec:	beq	17be8 <__assert_fail@plt+0x6804>
   170f0:	mov	r2, #1
   170f4:	mov	r0, #0
   170f8:	str	r0, [sp, #52]	; 0x34
   170fc:	cmp	sl, #43	; 0x2b
   17100:	beq	17c0c <__assert_fail@plt+0x6828>
   17104:	mov	lr, #0
   17108:	mov	ip, #2
   1710c:	b	16bd0 <__assert_fail@plt+0x57ec>
   17110:	cmp	r9, #69	; 0x45
   17114:	beq	167dc <__assert_fail@plt+0x53f8>
   17118:	ldr	r3, [sp, #40]	; 0x28
   1711c:	mov	ip, #2
   17120:	ldr	r2, [r3, #12]
   17124:	mov	r3, r2
   17128:	mov	r0, #0
   1712c:	lsr	r2, r2, #31
   17130:	cmp	r3, r0
   17134:	str	r2, [sp, #52]	; 0x34
   17138:	mov	lr, r0
   1713c:	movlt	r2, #0
   17140:	movge	r2, #1
   17144:	b	16bd4 <__assert_fail@plt+0x57f0>
   17148:	mov	r8, #0
   1714c:	ldr	r2, [sp, #40]	; 0x28
   17150:	ldr	r3, [r2, #32]
   17154:	cmp	r3, #0
   17158:	blt	163b4 <__assert_fail@plt+0x4fd0>
   1715c:	ldr	lr, [r2, #36]	; 0x24
   17160:	cmp	lr, #0
   17164:	blt	17d5c <__assert_fail@plt+0x6978>
   17168:	bne	17c34 <__assert_fail@plt+0x6850>
   1716c:	ldr	r3, [sp, #60]	; 0x3c
   17170:	ldrb	r3, [r3]
   17174:	cmp	r3, #45	; 0x2d
   17178:	moveq	r2, lr
   1717c:	movne	r2, #1
   17180:	movne	r3, lr
   17184:	moveq	r3, #1
   17188:	str	r3, [sp, #52]	; 0x34
   1718c:	ldr	r3, [pc, #308]	; 172c8 <__assert_fail@plt+0x5ee4>
   17190:	ldr	r7, [pc, #304]	; 172c8 <__assert_fail@plt+0x5ee4>
   17194:	smull	r3, ip, r3, lr
   17198:	ldr	r3, [pc, #300]	; 172cc <__assert_fail@plt+0x5ee8>
   1719c:	add	ip, ip, lr
   171a0:	smull	r0, r3, r3, lr
   171a4:	asr	r0, lr, #31
   171a8:	rsb	ip, r0, ip, asr #5
   171ac:	str	r0, [sp, #72]	; 0x48
   171b0:	smull	r7, r0, r7, ip
   171b4:	add	r0, r0, ip
   171b8:	asr	r7, ip, #31
   171bc:	rsb	r0, r7, r0, asr #5
   171c0:	add	r3, r3, lr
   171c4:	rsb	r0, r0, r0, lsl #4
   171c8:	str	r0, [sp, #76]	; 0x4c
   171cc:	ldr	r0, [sp, #72]	; 0x48
   171d0:	rsb	r7, ip, ip, lsl #4
   171d4:	rsb	r3, r0, r3, asr #11
   171d8:	ldr	r0, [sp, #76]	; 0x4c
   171dc:	sub	r7, lr, r7, lsl #2
   171e0:	sub	r0, ip, r0, lsl #2
   171e4:	cmp	r8, #3
   171e8:	ldrls	pc, [pc, r8, lsl #2]
   171ec:	b	167dc <__assert_fail@plt+0x53f8>
   171f0:	andeq	r7, r1, ip, lsr #27
   171f4:	muleq	r1, r4, sp
   171f8:	andeq	r7, r1, r8, lsl #28
   171fc:	andeq	r7, r1, ip, ror sp
   17200:	ldr	r3, [sp, #44]	; 0x2c
   17204:	cmp	r7, #0
   17208:	movne	r3, r7
   1720c:	cmp	r9, #69	; 0x45
   17210:	str	r3, [sp, #44]	; 0x2c
   17214:	beq	167dc <__assert_fail@plt+0x53f8>
   17218:	uxtb	r1, r1
   1721c:	mov	r7, #0
   17220:	b	16984 <__assert_fail@plt+0x55a0>
   17224:	cmp	r9, #69	; 0x45
   17228:	beq	16a88 <__assert_fail@plt+0x56a4>
   1722c:	ldr	r3, [sp, #40]	; 0x28
   17230:	mov	r0, #100	; 0x64
   17234:	ldr	r2, [r3, #20]
   17238:	ldr	r3, [pc, #192]	; 17300 <__assert_fail@plt+0x5f1c>
   1723c:	smull	r3, ip, r3, r2
   17240:	asr	r3, r2, #31
   17244:	rsb	r3, r3, ip, asr #5
   17248:	mul	r3, r0, r3
   1724c:	subs	r3, r2, r3
   17250:	bpl	170e8 <__assert_fail@plt+0x5d04>
   17254:	sub	r0, r0, #2000	; 0x7d0
   17258:	cmp	r2, r0
   1725c:	rsblt	r3, r3, #0
   17260:	addge	r3, r3, #100	; 0x64
   17264:	b	170e8 <__assert_fail@plt+0x5d04>
   17268:	cmp	r9, #69	; 0x45
   1726c:	beq	167dc <__assert_fail@plt+0x53f8>
   17270:	ldr	r2, [sp, #40]	; 0x28
   17274:	mov	ip, #2
   17278:	ldr	r3, [r2, #28]
   1727c:	ldr	r2, [r2, #24]
   17280:	sub	r3, r3, r2
   17284:	ldr	r2, [pc, #128]	; 1730c <__assert_fail@plt+0x5f28>
   17288:	add	r3, r3, #7
   1728c:	smull	r0, r2, r2, r3
   17290:	add	r2, r2, r3
   17294:	asr	r3, r3, #31
   17298:	rsb	r2, r3, r2, asr ip
   1729c:	b	17124 <__assert_fail@plt+0x5d40>
   172a0:	ldr	r9, [pc, #40]	; 172d0 <__assert_fail@plt+0x5eec>
   172a4:	mvn	r7, #0
   172a8:	b	16e90 <__assert_fail@plt+0x5aac>
   172ac:	andeq	r0, r2, r8, asr #19
   172b0:	strbtvs	r6, [r6], -r7, ror #12
   172b4:	stcleq	12, cr12, [ip], {204}	; 0xcc
   172b8:	andeq	r0, r0, fp, ror #14
   172bc:	stclgt	12, cr12, [ip], {205}	; 0xcd
   172c0:	andeq	r1, r2, r0, lsr #30
   172c4:			; <UNDEFINED> instruction: 0xfffff893
   172c8:	stmhi	r8, {r0, r3, r7, fp, pc}
   172cc:			; <UNDEFINED> instruction: 0x91a2b3c5
   172d0:	andeq	r1, r2, ip, lsr #30
   172d4:	andeq	r1, r2, r8, lsl pc
   172d8:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   172dc:	ldmvs	fp, {r0, r2, r3, r5, r7, r8, r9, fp, pc}^
   172e0:	ldrbtne	fp, [r8], #1417	; 0x589
   172e4:	tstmi	fp, #2096	; 0x830
   172e8:	blvs	1809c9c <optarg@@GLIBC_2.4+0x17d6ab4>
   172ec:	strbpl	r3, [r6, #2953]!	; 0xb89
   172f0:			; <UNDEFINED> instruction: 0xfffff894
   172f4:	andeq	r1, r2, r8, lsr pc
   172f8:	andeq	r2, r0, pc, lsl #14
   172fc:	andeq	r2, r0, r0, lsl r7
   17300:	mvnpl	r8, pc, lsl r5
   17304:	andeq	r0, r0, lr, ror #2
   17308:	andeq	r0, r0, sp, ror #2
   1730c:	subls	r2, r9, #-1828716544	; 0x93000000
   17310:			; <UNDEFINED> instruction: 0xfffff895
   17314:	ldr	r2, [sp, #32]
   17318:	sub	r3, r4, #1
   1731c:	cmp	r3, r2
   17320:	movne	r4, r3
   17324:	bne	167dc <__assert_fail@plt+0x53f8>
   17328:	mvn	r3, r5
   1732c:	cmp	sl, #45	; 0x2d
   17330:	lsr	r3, r3, #31
   17334:	moveq	r3, #0
   17338:	cmp	r3, #0
   1733c:	moveq	r5, #1
   17340:	beq	17350 <__assert_fail@plt+0x5f6c>
   17344:	cmp	r5, #1
   17348:	mov	r3, r5
   1734c:	movcc	r5, #1
   17350:	ldr	r2, [sp, #36]	; 0x24
   17354:	ldr	r0, [sp, #28]
   17358:	sub	r2, r2, r0
   1735c:	cmp	r2, r5
   17360:	bls	16414 <__assert_fail@plt+0x5030>
   17364:	cmp	r6, #0
   17368:	beq	173a0 <__assert_fail@plt+0x5fbc>
   1736c:	cmp	r3, #1
   17370:	bls	1739c <__assert_fail@plt+0x5fb8>
   17374:	sub	r7, r3, #1
   17378:	cmp	sl, #43	; 0x2b
   1737c:	cmpne	sl, #48	; 0x30
   17380:	mov	r2, r7
   17384:	bne	17e2c <__assert_fail@plt+0x6a48>
   17388:	mov	r1, #48	; 0x30
   1738c:	mov	r0, r6
   17390:	bl	112e8 <memset@plt>
   17394:	ldrb	r1, [r4]
   17398:	add	r6, r6, r7
   1739c:	strb	r1, [r6], #1
   173a0:	ldr	r3, [sp, #28]
   173a4:	add	r3, r3, r5
   173a8:	str	r3, [sp, #28]
   173ac:	b	163b4 <__assert_fail@plt+0x4fd0>
   173b0:	cmp	r9, #69	; 0x45
   173b4:	beq	167dc <__assert_fail@plt+0x53f8>
   173b8:	ldr	r3, [sp, #40]	; 0x28
   173bc:	mov	ip, #1
   173c0:	ldr	r2, [r3, #24]
   173c4:	b	17124 <__assert_fail@plt+0x5d40>
   173c8:	ldr	r3, [sp, #40]	; 0x28
   173cc:	ldr	r2, [pc, #-200]	; 1730c <__assert_fail@plt+0x5f28>
   173d0:	mov	ip, #1
   173d4:	ldr	r3, [r3, #24]
   173d8:	add	r3, r3, #6
   173dc:	smull	r0, r2, r2, r3
   173e0:	add	r0, r2, r3
   173e4:	asr	r2, r3, #31
   173e8:	rsb	r2, r2, r0, asr #2
   173ec:	rsb	r2, r2, r2, lsl #3
   173f0:	sub	r3, r3, r2
   173f4:	add	r2, r3, ip
   173f8:	b	17124 <__assert_fail@plt+0x5d40>
   173fc:	subs	r3, sl, #45	; 0x2d
   17400:	movne	r3, #1
   17404:	cmp	r5, #0
   17408:	movlt	r3, #0
   1740c:	cmp	r3, #0
   17410:	beq	17ee0 <__assert_fail@plt+0x6afc>
   17414:	cmp	r5, #1
   17418:	movcs	r7, r5
   1741c:	movcc	r7, #1
   17420:	ldr	r3, [sp, #36]	; 0x24
   17424:	ldr	r2, [sp, #28]
   17428:	sub	r3, r3, r2
   1742c:	cmp	r3, r7
   17430:	bls	16414 <__assert_fail@plt+0x5030>
   17434:	cmp	r6, #0
   17438:	beq	17470 <__assert_fail@plt+0x608c>
   1743c:	cmp	r5, #1
   17440:	bls	17468 <__assert_fail@plt+0x6084>
   17444:	cmp	sl, #43	; 0x2b
   17448:	cmpne	sl, #48	; 0x30
   1744c:	sub	r5, r5, #1
   17450:	mov	r0, r6
   17454:	mov	r2, r5
   17458:	moveq	r1, #48	; 0x30
   1745c:	movne	r1, #32
   17460:	bl	112e8 <memset@plt>
   17464:	add	r6, r6, r5
   17468:	mov	r3, #9
   1746c:	strb	r3, [r6], #1
   17470:	ldr	r3, [sp, #28]
   17474:	add	r3, r3, r7
   17478:	str	r3, [sp, #28]
   1747c:	b	163b4 <__assert_fail@plt+0x4fd0>
   17480:	cmp	r9, #69	; 0x45
   17484:	beq	167dc <__assert_fail@plt+0x53f8>
   17488:	ldr	r3, [sp, #40]	; 0x28
   1748c:	mov	ip, #2
   17490:	ldr	r2, [r3, #4]
   17494:	b	17124 <__assert_fail@plt+0x5d40>
   17498:	cmp	r9, #69	; 0x45
   1749c:	beq	167dc <__assert_fail@plt+0x53f8>
   174a0:	ldr	r2, [sp, #56]	; 0x38
   174a4:	mov	ip, #2
   174a8:	b	17124 <__assert_fail@plt+0x5d40>
   174ac:	cmp	r9, #69	; 0x45
   174b0:	beq	167dc <__assert_fail@plt+0x53f8>
   174b4:	ldr	r3, [sp, #40]	; 0x28
   174b8:	mov	ip, #2
   174bc:	ldr	r2, [r3, #8]
   174c0:	b	17124 <__assert_fail@plt+0x5d40>
   174c4:	ldrb	r3, [r4, #1]
   174c8:	add	r0, r4, #1
   174cc:	cmp	r3, #58	; 0x3a
   174d0:	movne	r8, #1
   174d4:	beq	17eec <__assert_fail@plt+0x6b08>
   174d8:	cmp	r3, #122	; 0x7a
   174dc:	moveq	r4, r0
   174e0:	bne	167dc <__assert_fail@plt+0x53f8>
   174e4:	b	1714c <__assert_fail@plt+0x5d68>
   174e8:	cmp	r9, #69	; 0x45
   174ec:	beq	167dc <__assert_fail@plt+0x53f8>
   174f0:	ldr	r3, [sp, #40]	; 0x28
   174f4:	ldr	r0, [pc, #-496]	; 1730c <__assert_fail@plt+0x5f28>
   174f8:	ldr	r2, [r3, #24]
   174fc:	ldr	r3, [r3, #28]
   17500:	add	r2, r2, #6
   17504:	smull	ip, r0, r0, r2
   17508:	add	ip, r0, r2
   1750c:	asr	r0, r2, #31
   17510:	rsb	r0, r0, ip, asr #2
   17514:	mov	ip, #2
   17518:	rsb	r0, r0, r0, lsl #3
   1751c:	sub	r2, r2, r0
   17520:	b	17280 <__assert_fail@plt+0x5e9c>
   17524:	cmp	r9, #69	; 0x45
   17528:	beq	167dc <__assert_fail@plt+0x53f8>
   1752c:	ldr	r3, [sp, #40]	; 0x28
   17530:	mov	ip, #2
   17534:	ldr	r2, [r3]
   17538:	b	17124 <__assert_fail@plt+0x5d40>
   1753c:	mvn	r7, #0
   17540:	ldr	r9, [pc, #-628]	; 172d4 <__assert_fail@plt+0x5ef0>
   17544:	b	16e90 <__assert_fail@plt+0x5aac>
   17548:	mov	r3, #1
   1754c:	cmp	r7, #0
   17550:	moveq	r7, r3
   17554:	moveq	r1, #112	; 0x70
   17558:	movne	r3, #0
   1755c:	movne	r1, #112	; 0x70
   17560:	strne	r3, [sp, #44]	; 0x2c
   17564:	b	16984 <__assert_fail@plt+0x55a0>
   17568:	cmp	r9, #69	; 0x45
   1756c:	beq	167dc <__assert_fail@plt+0x53f8>
   17570:	cmp	r5, #0
   17574:	movle	r5, #9
   17578:	ldr	r3, [sp, #1180]	; 0x49c
   1757c:	mov	r8, #9
   17580:	b	17594 <__assert_fail@plt+0x61b0>
   17584:	asr	r2, r3, #31
   17588:	smull	r1, r3, fp, r3
   1758c:	sub	r8, r8, #1
   17590:	rsb	r3, r2, r3, asr #2
   17594:	cmp	r8, r5
   17598:	bgt	17584 <__assert_fail@plt+0x61a0>
   1759c:	smull	r2, r1, fp, r3
   175a0:	asr	r2, r3, #31
   175a4:	rsb	r1, r2, r1, asr #2
   175a8:	cmp	r8, #1
   175ac:	add	r0, r1, r1, lsl #2
   175b0:	mov	lr, r1
   175b4:	ble	17f28 <__assert_fail@plt+0x6b44>
   175b8:	subs	r1, r3, r0, lsl #1
   175bc:	beq	17588 <__assert_fail@plt+0x61a4>
   175c0:	sub	r0, r8, #1
   175c4:	add	ip, sp, #1120	; 0x460
   175c8:	add	ip, ip, r0
   175cc:	add	r1, r1, #48	; 0x30
   175d0:	cmp	r0, #0
   175d4:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   175d8:	beq	17f20 <__assert_fail@plt+0x6b3c>
   175dc:	smull	r1, ip, fp, lr
   175e0:	ldr	r1, [pc, #-744]	; 17300 <__assert_fail@plt+0x5f1c>
   175e4:	smull	r1, r0, r1, r3
   175e8:	asr	r1, lr, #31
   175ec:	rsb	r1, r1, ip, asr #2
   175f0:	sub	ip, r8, #2
   175f4:	add	r1, r1, r1, lsl #2
   175f8:	cmp	ip, #0
   175fc:	sub	r1, lr, r1, lsl #1
   17600:	add	lr, sp, #1120	; 0x460
   17604:	add	lr, lr, ip
   17608:	add	r1, r1, #48	; 0x30
   1760c:	rsb	r0, r2, r0, asr #5
   17610:	strb	r1, [lr, #-1040]	; 0xfffffbf0
   17614:	beq	177a0 <__assert_fail@plt+0x63bc>
   17618:	smull	r1, lr, fp, r0
   1761c:	ldr	r1, [pc, #-844]	; 172d8 <__assert_fail@plt+0x5ef4>
   17620:	smull	r1, ip, r1, r3
   17624:	asr	r1, r0, #31
   17628:	rsb	r1, r1, lr, asr #2
   1762c:	rsb	lr, r2, ip, asr #6
   17630:	add	r1, r1, r1, lsl #2
   17634:	sub	ip, r8, #3
   17638:	sub	r0, r0, r1, lsl #1
   1763c:	add	r1, sp, #1120	; 0x460
   17640:	add	r1, r1, ip
   17644:	add	r0, r0, #48	; 0x30
   17648:	cmp	ip, #0
   1764c:	strb	r0, [r1, #-1040]	; 0xfffffbf0
   17650:	ble	177a0 <__assert_fail@plt+0x63bc>
   17654:	smull	r1, ip, fp, lr
   17658:	ldr	r1, [pc, #-900]	; 172dc <__assert_fail@plt+0x5ef8>
   1765c:	asr	r0, lr, #31
   17660:	rsb	r0, r0, ip, asr #2
   17664:	smull	ip, r1, r1, r3
   17668:	add	r0, r0, r0, lsl #2
   1766c:	sub	ip, r8, #4
   17670:	sub	r0, lr, r0, lsl #1
   17674:	add	lr, sp, #1120	; 0x460
   17678:	add	lr, lr, ip
   1767c:	add	r0, r0, #48	; 0x30
   17680:	cmp	ip, #0
   17684:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   17688:	rsb	ip, r2, r1, asr #12
   1768c:	ble	177a0 <__assert_fail@plt+0x63bc>
   17690:	smull	r1, lr, fp, ip
   17694:	ldr	r0, [pc, #-956]	; 172e0 <__assert_fail@plt+0x5efc>
   17698:	asr	r1, ip, #31
   1769c:	rsb	r1, r1, lr, asr #2
   176a0:	smull	lr, r0, r0, r3
   176a4:	add	r1, r1, r1, lsl #2
   176a8:	sub	lr, r8, #5
   176ac:	sub	r1, ip, r1, lsl #1
   176b0:	add	ip, sp, #1120	; 0x460
   176b4:	add	ip, ip, lr
   176b8:	add	r1, r1, #48	; 0x30
   176bc:	cmp	lr, #0
   176c0:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   176c4:	rsb	lr, r2, r0, asr #13
   176c8:	ble	177a0 <__assert_fail@plt+0x63bc>
   176cc:	smull	r1, ip, fp, lr
   176d0:	ldr	r1, [pc, #-1012]	; 172e4 <__assert_fail@plt+0x5f00>
   176d4:	asr	r0, lr, #31
   176d8:	rsb	r0, r0, ip, asr #2
   176dc:	smull	ip, r1, r1, r3
   176e0:	add	r0, r0, r0, lsl #2
   176e4:	sub	ip, r8, #6
   176e8:	sub	r0, lr, r0, lsl #1
   176ec:	add	lr, sp, #1120	; 0x460
   176f0:	add	lr, lr, ip
   176f4:	add	r0, r0, #48	; 0x30
   176f8:	cmp	ip, #0
   176fc:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   17700:	rsb	ip, r2, r1, asr #18
   17704:	ble	177a0 <__assert_fail@plt+0x63bc>
   17708:	smull	r1, lr, fp, ip
   1770c:	ldr	r0, [pc, #-1068]	; 172e8 <__assert_fail@plt+0x5f04>
   17710:	asr	r1, ip, #31
   17714:	rsb	r1, r1, lr, asr #2
   17718:	smull	lr, r0, r0, r3
   1771c:	add	r1, r1, r1, lsl #2
   17720:	sub	lr, r8, #7
   17724:	sub	r1, ip, r1, lsl #1
   17728:	add	ip, sp, #1120	; 0x460
   1772c:	add	ip, ip, lr
   17730:	add	r1, r1, #48	; 0x30
   17734:	cmp	lr, #0
   17738:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   1773c:	rsb	ip, r2, r0, asr #22
   17740:	ble	177a0 <__assert_fail@plt+0x63bc>
   17744:	smull	r1, lr, fp, ip
   17748:	ldr	r1, [pc, #-1124]	; 172ec <__assert_fail@plt+0x5f08>
   1774c:	asr	r0, ip, #31
   17750:	rsb	r0, r0, lr, asr #2
   17754:	smull	r1, r3, r1, r3
   17758:	add	r0, r0, r0, lsl #2
   1775c:	sub	r1, r8, #8
   17760:	sub	r0, ip, r0, lsl #1
   17764:	add	ip, sp, #1120	; 0x460
   17768:	add	lr, ip, r1
   1776c:	add	r0, r0, #48	; 0x30
   17770:	cmp	r1, #1
   17774:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   17778:	rsb	r2, r2, r3, asr #25
   1777c:	bne	177a0 <__assert_fail@plt+0x63bc>
   17780:	smull	r3, r1, fp, r2
   17784:	asr	r3, r2, #31
   17788:	rsb	r3, r3, r1, asr #2
   1778c:	mov	r8, #9
   17790:	add	r3, r3, r3, lsl #2
   17794:	sub	r2, r2, r3, lsl #1
   17798:	add	r3, r2, #48	; 0x30
   1779c:	strb	r3, [sp, #80]	; 0x50
   177a0:	cmp	sl, #0
   177a4:	ldr	r3, [sp, #36]	; 0x24
   177a8:	ldr	r2, [sp, #28]
   177ac:	moveq	sl, #48	; 0x30
   177b0:	cmp	r8, #0
   177b4:	movcs	r7, r8
   177b8:	movcc	r7, #0
   177bc:	sub	r3, r3, r2
   177c0:	cmp	r7, r3
   177c4:	bcs	16414 <__assert_fail@plt+0x5030>
   177c8:	cmp	r6, #0
   177cc:	beq	177f0 <__assert_fail@plt+0x640c>
   177d0:	ldr	r3, [sp, #44]	; 0x2c
   177d4:	mov	r2, r8
   177d8:	cmp	r3, #0
   177dc:	add	r1, sp, #80	; 0x50
   177e0:	mov	r0, r6
   177e4:	beq	17f18 <__assert_fail@plt+0x6b34>
   177e8:	bl	1626c <__assert_fail@plt+0x4e88>
   177ec:	add	r6, r6, r8
   177f0:	cmp	sl, #45	; 0x2d
   177f4:	ldr	r3, [sp, #28]
   177f8:	subne	r5, r5, r8
   177fc:	add	r7, r7, r3
   17800:	ldr	r3, [sp, #36]	; 0x24
   17804:	bicne	r5, r5, r5, asr #31
   17808:	moveq	r5, #0
   1780c:	sub	r3, r3, r7
   17810:	cmp	r5, r3
   17814:	bcs	16414 <__assert_fail@plt+0x5030>
   17818:	cmp	r6, #0
   1781c:	beq	17848 <__assert_fail@plt+0x6464>
   17820:	cmp	r5, #0
   17824:	beq	17848 <__assert_fail@plt+0x6464>
   17828:	cmp	sl, #43	; 0x2b
   1782c:	cmpne	sl, #48	; 0x30
   17830:	mov	r0, r6
   17834:	mov	r2, r5
   17838:	moveq	r1, #48	; 0x30
   1783c:	movne	r1, #32
   17840:	bl	112e8 <memset@plt>
   17844:	add	r6, r6, r5
   17848:	add	r3, r5, r7
   1784c:	str	r3, [sp, #28]
   17850:	b	163b4 <__assert_fail@plt+0x4fd0>
   17854:	cmp	r9, #69	; 0x45
   17858:	beq	167dc <__assert_fail@plt+0x53f8>
   1785c:	ldr	r3, [sp, #40]	; 0x28
   17860:	mov	r0, #0
   17864:	mov	lr, r0
   17868:	ldr	r3, [r3, #28]
   1786c:	mov	ip, #3
   17870:	cmn	r3, #1
   17874:	movlt	r2, #1
   17878:	movge	r2, r0
   1787c:	str	r2, [sp, #52]	; 0x34
   17880:	add	r3, r3, #1
   17884:	movge	r2, #1
   17888:	movlt	r2, r0
   1788c:	b	16bd4 <__assert_fail@plt+0x57f0>
   17890:	cmp	r9, #69	; 0x45
   17894:	beq	167dc <__assert_fail@plt+0x53f8>
   17898:	ldr	r3, [sp, #40]	; 0x28
   1789c:	ldr	r2, [r3, #12]
   178a0:	cmp	sl, #0
   178a4:	mov	ip, #2
   178a8:	moveq	sl, #95	; 0x5f
   178ac:	b	17124 <__assert_fail@plt+0x5d40>
   178b0:	mvn	r3, r5
   178b4:	cmp	sl, #45	; 0x2d
   178b8:	lsr	r3, r3, #31
   178bc:	moveq	r3, #0
   178c0:	cmp	r3, #0
   178c4:	beq	17f0c <__assert_fail@plt+0x6b28>
   178c8:	cmp	r5, #1
   178cc:	movcs	r7, r5
   178d0:	movcc	r7, #1
   178d4:	ldr	r3, [sp, #36]	; 0x24
   178d8:	ldr	r2, [sp, #28]
   178dc:	sub	r3, r3, r2
   178e0:	cmp	r3, r7
   178e4:	bls	16414 <__assert_fail@plt+0x5030>
   178e8:	cmp	r6, #0
   178ec:	beq	17470 <__assert_fail@plt+0x608c>
   178f0:	cmp	r5, #1
   178f4:	bls	1791c <__assert_fail@plt+0x6538>
   178f8:	cmp	sl, #43	; 0x2b
   178fc:	cmpne	sl, #48	; 0x30
   17900:	sub	r5, r5, #1
   17904:	mov	r0, r6
   17908:	mov	r2, r5
   1790c:	moveq	r1, #48	; 0x30
   17910:	movne	r1, #32
   17914:	bl	112e8 <memset@plt>
   17918:	add	r6, r6, r5
   1791c:	mov	r3, #10
   17920:	strb	r3, [r6], #1
   17924:	b	17470 <__assert_fail@plt+0x608c>
   17928:	cmp	r9, #69	; 0x45
   1792c:	beq	167dc <__assert_fail@plt+0x53f8>
   17930:	ldr	r3, [sp, #40]	; 0x28
   17934:	mov	r0, #0
   17938:	mov	lr, r0
   1793c:	ldr	r3, [r3, #16]
   17940:	mov	ip, #2
   17944:	cmn	r3, #1
   17948:	movlt	r2, #1
   1794c:	movge	r2, r0
   17950:	str	r2, [sp, #52]	; 0x34
   17954:	add	r3, r3, #1
   17958:	movge	r2, #1
   1795c:	movlt	r2, r0
   17960:	b	16bd4 <__assert_fail@plt+0x57f0>
   17964:	cmp	r9, #69	; 0x45
   17968:	beq	167dc <__assert_fail@plt+0x53f8>
   1796c:	ldr	r2, [sp, #56]	; 0x38
   17970:	b	178a0 <__assert_fail@plt+0x64bc>
   17974:	cmp	r9, #69	; 0x45
   17978:	beq	167dc <__assert_fail@plt+0x53f8>
   1797c:	ldr	r3, [sp, #40]	; 0x28
   17980:	ldr	r2, [r3, #8]
   17984:	b	178a0 <__assert_fail@plt+0x64bc>
   17988:	ldr	r3, [sp, #40]	; 0x28
   1798c:	cmp	r9, #79	; 0x4f
   17990:	ldr	r3, [r3, #16]
   17994:	beq	16a88 <__assert_fail@plt+0x56a4>
   17998:	add	r2, r3, r3, lsl #2
   1799c:	mov	lr, #0
   179a0:	add	r3, r3, r2, lsl #1
   179a4:	str	lr, [sp, #52]	; 0x34
   179a8:	asr	r3, r3, #5
   179ac:	add	r3, r3, #1
   179b0:	mov	r0, lr
   179b4:	mov	ip, #1
   179b8:	b	16bf8 <__assert_fail@plt+0x5814>
   179bc:	mov	r3, #0
   179c0:	b	1754c <__assert_fail@plt+0x6168>
   179c4:	ldr	r0, [sp, #60]	; 0x3c
   179c8:	bl	11294 <strlen@plt>
   179cc:	mvn	r3, r5
   179d0:	cmp	sl, #45	; 0x2d
   179d4:	lsr	r3, r3, #31
   179d8:	moveq	r3, #0
   179dc:	cmp	r3, #0
   179e0:	moveq	r5, #0
   179e4:	ldr	r3, [sp, #44]	; 0x2c
   179e8:	cmp	r7, #0
   179ec:	movne	r3, #0
   179f0:	str	r3, [sp, #44]	; 0x2c
   179f4:	ldr	r2, [sp, #28]
   179f8:	ldr	r3, [sp, #36]	; 0x24
   179fc:	sub	r3, r3, r2
   17a00:	cmp	r0, r5
   17a04:	movcs	r9, r0
   17a08:	movcc	r9, r5
   17a0c:	cmp	r9, r3
   17a10:	mov	r8, r0
   17a14:	bcs	16414 <__assert_fail@plt+0x5030>
   17a18:	cmp	r6, #0
   17a1c:	beq	16898 <__assert_fail@plt+0x54b4>
   17a20:	cmp	r0, r5
   17a24:	bcs	17a4c <__assert_fail@plt+0x6668>
   17a28:	cmp	sl, #43	; 0x2b
   17a2c:	cmpne	sl, #48	; 0x30
   17a30:	sub	r5, r5, r0
   17a34:	mov	r2, r5
   17a38:	mov	r0, r6
   17a3c:	moveq	r1, #48	; 0x30
   17a40:	movne	r1, #32
   17a44:	bl	112e8 <memset@plt>
   17a48:	add	r6, r6, r5
   17a4c:	cmp	r7, #0
   17a50:	bne	17dcc <__assert_fail@plt+0x69e8>
   17a54:	ldr	r3, [sp, #44]	; 0x2c
   17a58:	mov	r2, r8
   17a5c:	cmp	r3, #0
   17a60:	ldr	r1, [sp, #60]	; 0x3c
   17a64:	mov	r0, r6
   17a68:	beq	17dc0 <__assert_fail@plt+0x69dc>
   17a6c:	bl	1626c <__assert_fail@plt+0x4e88>
   17a70:	add	r6, r6, r8
   17a74:	b	16898 <__assert_fail@plt+0x54b4>
   17a78:	cmp	r9, #69	; 0x45
   17a7c:	beq	16a88 <__assert_fail@plt+0x56a4>
   17a80:	cmp	r9, #79	; 0x4f
   17a84:	beq	167dc <__assert_fail@plt+0x53f8>
   17a88:	ldr	r3, [sp, #40]	; 0x28
   17a8c:	ldr	r0, [pc, #-1956]	; 172f0 <__assert_fail@plt+0x5f0c>
   17a90:	ldr	r2, [r3, #20]
   17a94:	cmp	r2, r0
   17a98:	movge	ip, #0
   17a9c:	movlt	ip, #1
   17aa0:	add	r3, r2, #1888	; 0x760
   17aa4:	cmp	sl, #0
   17aa8:	str	ip, [sp, #52]	; 0x34
   17aac:	add	r3, r3, #12
   17ab0:	bne	17ba4 <__assert_fail@plt+0x67c0>
   17ab4:	ldr	ip, [sp, #1164]	; 0x48c
   17ab8:	cmp	r2, r0
   17abc:	movlt	r2, #0
   17ac0:	movge	r2, #1
   17ac4:	cmp	ip, #43	; 0x2b
   17ac8:	beq	17d50 <__assert_fail@plt+0x696c>
   17acc:	mov	sl, ip
   17ad0:	mov	lr, #0
   17ad4:	mov	ip, #4
   17ad8:	b	16bd0 <__assert_fail@plt+0x57ec>
   17adc:	mov	r3, #45	; 0x2d
   17ae0:	b	16ca0 <__assert_fail@plt+0x58bc>
   17ae4:	mov	r0, r6
   17ae8:	mov	r1, r7
   17aec:	mov	r2, r8
   17af0:	bl	1112c <memcpy@plt>
   17af4:	add	r6, r6, r8
   17af8:	b	16898 <__assert_fail@plt+0x54b4>
   17afc:	cmp	r8, #0
   17b00:	beq	17d18 <__assert_fail@plt+0x6934>
   17b04:	bl	1124c <__ctype_tolower_loc@plt>
   17b08:	add	r8, r6, r8
   17b0c:	add	r3, sp, #96	; 0x60
   17b10:	add	r9, r3, r9
   17b14:	mov	r3, r8
   17b18:	ldrb	r1, [r9, #-1]!
   17b1c:	ldr	r2, [r0]
   17b20:	ldr	r2, [r2, r1, lsl #2]
   17b24:	strb	r2, [r3, #-1]!
   17b28:	cmp	r6, r3
   17b2c:	bne	17b18 <__assert_fail@plt+0x6734>
   17b30:	b	16a70 <__assert_fail@plt+0x568c>
   17b34:	ldr	r3, [sp, #32]
   17b38:	add	r8, r3, #14
   17b3c:	sub	r8, r8, r7
   17b40:	sub	r3, r5, r8
   17b44:	cmp	r3, #0
   17b48:	movle	r3, #0
   17b4c:	andgt	r3, r9, #1
   17b50:	cmp	r3, #0
   17b54:	bne	16d1c <__assert_fail@plt+0x5938>
   17b58:	cmp	r9, #0
   17b5c:	bne	16d1c <__assert_fail@plt+0x5938>
   17b60:	b	16d18 <__assert_fail@plt+0x5934>
   17b64:	cmp	r6, #0
   17b68:	beq	163f4 <__assert_fail@plt+0x5010>
   17b6c:	mov	r0, r6
   17b70:	mov	r2, r8
   17b74:	mov	r1, #32
   17b78:	str	r3, [sp, #52]	; 0x34
   17b7c:	bl	112e8 <memset@plt>
   17b80:	ldr	r3, [sp, #28]
   17b84:	sub	r5, r5, r8
   17b88:	add	r3, r3, r8
   17b8c:	str	r3, [sp, #28]
   17b90:	add	r6, r6, r8
   17b94:	ldr	r3, [sp, #52]	; 0x34
   17b98:	b	16cd4 <__assert_fail@plt+0x58f0>
   17b9c:	str	r3, [sp, #28]
   17ba0:	b	163cc <__assert_fail@plt+0x4fe8>
   17ba4:	ldr	r2, [sp, #52]	; 0x34
   17ba8:	cmp	sl, #43	; 0x2b
   17bac:	eor	r2, r2, #1
   17bb0:	beq	17d20 <__assert_fail@plt+0x693c>
   17bb4:	mov	lr, #0
   17bb8:	uxtb	r2, r2
   17bbc:	mov	ip, #4
   17bc0:	b	16bd0 <__assert_fail@plt+0x57ec>
   17bc4:	cmp	r2, r0
   17bc8:	movlt	r2, #0
   17bcc:	movge	r2, #1
   17bd0:	b	170fc <__assert_fail@plt+0x5d18>
   17bd4:	cmp	r7, lr
   17bd8:	bge	17d6c <__assert_fail@plt+0x6988>
   17bdc:	cmp	sl, #0
   17be0:	rsb	r3, r3, #0
   17be4:	bne	170f0 <__assert_fail@plt+0x5d0c>
   17be8:	ldr	r2, [sp, #1164]	; 0x48c
   17bec:	cmp	r2, #43	; 0x2b
   17bf0:	beq	17d30 <__assert_fail@plt+0x694c>
   17bf4:	mov	lr, #0
   17bf8:	mov	sl, r2
   17bfc:	str	lr, [sp, #52]	; 0x34
   17c00:	mov	r2, #1
   17c04:	mov	ip, #2
   17c08:	b	16bd0 <__assert_fail@plt+0x57ec>
   17c0c:	mov	ip, #2
   17c10:	mov	r0, #99	; 0x63
   17c14:	cmp	r0, r3
   17c18:	movcs	r0, #0
   17c1c:	movcc	r0, #1
   17c20:	cmp	r5, ip
   17c24:	movle	lr, r0
   17c28:	orrgt	lr, r0, #1
   17c2c:	mov	sl, #43	; 0x2b
   17c30:	b	16bd0 <__assert_fail@plt+0x57ec>
   17c34:	mov	r3, #0
   17c38:	mov	r2, #1
   17c3c:	str	r3, [sp, #52]	; 0x34
   17c40:	b	1718c <__assert_fail@plt+0x5da8>
   17c44:	ldr	r3, [sp, #1180]	; 0x49c
   17c48:	mov	ip, #43	; 0x2b
   17c4c:	str	r3, [sp, #20]
   17c50:	ldr	r3, [sp, #1176]	; 0x498
   17c54:	mov	r7, #4
   17c58:	str	r3, [sp, #16]
   17c5c:	ldr	r3, [sp, #1172]	; 0x494
   17c60:	mov	r0, r9
   17c64:	str	r3, [sp, #12]
   17c68:	ldr	r3, [sp, #44]	; 0x2c
   17c6c:	str	r7, [sp, #8]
   17c70:	str	r3, [sp]
   17c74:	str	ip, [sp, #4]
   17c78:	ldr	r3, [sp, #40]	; 0x28
   17c7c:	ldr	r2, [pc, #-2448]	; 172f4 <__assert_fail@plt+0x5f10>
   17c80:	mvn	r1, #0
   17c84:	mov	sl, ip
   17c88:	bl	162ac <__assert_fail@plt+0x4ec8>
   17c8c:	mov	r3, r9
   17c90:	ldr	r9, [pc, #-2468]	; 172f4 <__assert_fail@plt+0x5f10>
   17c94:	mov	r8, r0
   17c98:	b	16edc <__assert_fail@plt+0x5af8>
   17c9c:	ldr	r2, [sp, #48]	; 0x30
   17ca0:	mov	r3, #75	; 0x4b
   17ca4:	str	r3, [r2]
   17ca8:	b	16420 <__assert_fail@plt+0x503c>
   17cac:	ldr	r2, [pc, #-2472]	; 1730c <__assert_fail@plt+0x5f28>
   17cb0:	mov	ip, #2
   17cb4:	smull	r0, r2, r2, r3
   17cb8:	add	r0, r2, r3
   17cbc:	asr	r2, r3, #31
   17cc0:	rsb	r2, r2, r0, asr #2
   17cc4:	add	r2, r2, #1
   17cc8:	b	17124 <__assert_fail@plt+0x5d40>
   17ccc:	cmp	r7, lr
   17cd0:	add	r3, r7, #1888	; 0x760
   17cd4:	movge	r2, #0
   17cd8:	movlt	r2, #1
   17cdc:	add	r3, r3, #12
   17ce0:	cmp	sl, #0
   17ce4:	str	r2, [sp, #52]	; 0x34
   17ce8:	add	r3, r3, r0
   17cec:	bne	17ba4 <__assert_fail@plt+0x67c0>
   17cf0:	ldr	r2, [sp, #1164]	; 0x48c
   17cf4:	cmp	r2, #43	; 0x2b
   17cf8:	beq	17d44 <__assert_fail@plt+0x6960>
   17cfc:	cmp	r7, lr
   17d00:	mov	sl, r2
   17d04:	mov	lr, #0
   17d08:	movlt	r2, #0
   17d0c:	movge	r2, #1
   17d10:	mov	ip, #4
   17d14:	b	16bd0 <__assert_fail@plt+0x57ec>
   17d18:	mov	r8, r6
   17d1c:	b	16a70 <__assert_fail@plt+0x568c>
   17d20:	mov	ip, #4
   17d24:	uxtb	r2, r2
   17d28:	ldr	r0, [pc, #-2616]	; 172f8 <__assert_fail@plt+0x5f14>
   17d2c:	b	17c14 <__assert_fail@plt+0x6830>
   17d30:	str	sl, [sp, #52]	; 0x34
   17d34:	mov	r2, #1
   17d38:	mov	ip, #2
   17d3c:	mov	r0, #99	; 0x63
   17d40:	b	17c14 <__assert_fail@plt+0x6830>
   17d44:	cmp	r7, lr
   17d48:	movlt	r2, #0
   17d4c:	movge	r2, #1
   17d50:	mov	ip, #4
   17d54:	ldr	r0, [pc, #-2660]	; 172f8 <__assert_fail@plt+0x5f14>
   17d58:	b	17c14 <__assert_fail@plt+0x6830>
   17d5c:	mov	r3, #1
   17d60:	mov	r2, #0
   17d64:	str	r3, [sp, #52]	; 0x34
   17d68:	b	1718c <__assert_fail@plt+0x5da8>
   17d6c:	cmp	sl, #0
   17d70:	add	r3, r3, #100	; 0x64
   17d74:	beq	17be8 <__assert_fail@plt+0x6804>
   17d78:	b	170f0 <__assert_fail@plt+0x5d0c>
   17d7c:	cmp	r7, #0
   17d80:	bne	17e08 <__assert_fail@plt+0x6a24>
   17d84:	cmp	r0, #0
   17d88:	moveq	lr, #1
   17d8c:	moveq	ip, #3
   17d90:	beq	16bd4 <__assert_fail@plt+0x57f0>
   17d94:	mov	ip, #100	; 0x64
   17d98:	mov	lr, #1
   17d9c:	mla	r3, ip, r3, r0
   17da0:	mov	ip, #6
   17da4:	mov	r0, #4
   17da8:	b	16bd4 <__assert_fail@plt+0x57f0>
   17dac:	mov	ip, #100	; 0x64
   17db0:	mov	lr, #1
   17db4:	mla	r3, ip, r3, r0
   17db8:	mov	ip, #5
   17dbc:	b	16bd0 <__assert_fail@plt+0x57ec>
   17dc0:	bl	1112c <memcpy@plt>
   17dc4:	add	r6, r6, r8
   17dc8:	b	16898 <__assert_fail@plt+0x54b4>
   17dcc:	cmp	r8, #0
   17dd0:	beq	16898 <__assert_fail@plt+0x54b4>
   17dd4:	bl	1124c <__ctype_tolower_loc@plt>
   17dd8:	ldr	r3, [sp, #60]	; 0x3c
   17ddc:	add	r6, r6, r8
   17de0:	ldr	ip, [sp, #60]	; 0x3c
   17de4:	add	r8, r3, r8
   17de8:	mov	r3, r6
   17dec:	ldrb	r1, [r8, #-1]!
   17df0:	ldr	r2, [r0]
   17df4:	cmp	ip, r8
   17df8:	ldr	r2, [r2, r1, lsl #2]
   17dfc:	strb	r2, [r3, #-1]!
   17e00:	bne	17dec <__assert_fail@plt+0x6a08>
   17e04:	b	16898 <__assert_fail@plt+0x54b4>
   17e08:	mov	lr, #100	; 0x64
   17e0c:	ldr	ip, [pc, #-2840]	; 172fc <__assert_fail@plt+0x5f18>
   17e10:	mul	r0, lr, r0
   17e14:	mov	lr, #1
   17e18:	mla	r3, ip, r3, r0
   17e1c:	mov	r0, #20
   17e20:	add	r3, r3, r7
   17e24:	mov	ip, #9
   17e28:	b	16bd4 <__assert_fail@plt+0x57f0>
   17e2c:	mov	r1, #32
   17e30:	mov	r0, r6
   17e34:	bl	112e8 <memset@plt>
   17e38:	add	r6, r6, r7
   17e3c:	ldrb	r1, [r4]
   17e40:	b	1739c <__assert_fail@plt+0x5fb8>
   17e44:	sub	r3, r3, #1
   17e48:	tst	r3, #3
   17e4c:	ldrne	r3, [pc, #-2892]	; 17308 <__assert_fail@plt+0x5f24>
   17e50:	bne	17e98 <__assert_fail@plt+0x6ab4>
   17e54:	ldr	r2, [pc, #-2908]	; 17300 <__assert_fail@plt+0x5f1c>
   17e58:	mov	r0, #100	; 0x64
   17e5c:	smull	r2, ip, r2, r3
   17e60:	asr	r2, r3, #31
   17e64:	rsb	lr, r2, ip, asr #5
   17e68:	mul	r0, r0, lr
   17e6c:	cmp	r3, r0
   17e70:	ldrne	r3, [pc, #-2932]	; 17304 <__assert_fail@plt+0x5f20>
   17e74:	bne	17e98 <__assert_fail@plt+0x6ab4>
   17e78:	rsb	r2, r2, ip, asr #7
   17e7c:	mov	ip, #400	; 0x190
   17e80:	ldr	r0, [pc, #-2944]	; 17308 <__assert_fail@plt+0x5f24>
   17e84:	mul	r2, ip, r2
   17e88:	sub	ip, ip, #34	; 0x22
   17e8c:	cmp	r3, r2
   17e90:	movne	r3, r0
   17e94:	moveq	r3, ip
   17e98:	ldr	r2, [sp, #32]
   17e9c:	add	r3, r8, r3
   17ea0:	sub	r2, r3, r2
   17ea4:	ldr	ip, [pc, #-2976]	; 1730c <__assert_fail@plt+0x5f28>
   17ea8:	add	r2, r2, #380	; 0x17c
   17eac:	add	r2, r2, #2
   17eb0:	mvn	r0, #0
   17eb4:	smull	ip, lr, ip, r2
   17eb8:	add	lr, lr, r2
   17ebc:	asr	ip, r2, #31
   17ec0:	rsb	ip, ip, lr, asr #2
   17ec4:	mov	r8, r0
   17ec8:	rsb	ip, ip, ip, lsl #3
   17ecc:	sub	ip, r2, ip
   17ed0:	sub	r3, r3, ip
   17ed4:	add	r3, r3, #3
   17ed8:	ldr	lr, [pc, #-3024]	; 17310 <__assert_fail@plt+0x5f2c>
   17edc:	b	1709c <__assert_fail@plt+0x5cb8>
   17ee0:	mov	r5, r3
   17ee4:	mov	r7, #1
   17ee8:	b	17420 <__assert_fail@plt+0x603c>
   17eec:	add	r2, r4, #2
   17ef0:	mov	r8, #1
   17ef4:	mov	r0, r2
   17ef8:	ldrb	r3, [r2], #1
   17efc:	add	r8, r8, #1
   17f00:	cmp	r3, #58	; 0x3a
   17f04:	bne	174d8 <__assert_fail@plt+0x60f4>
   17f08:	b	17ef4 <__assert_fail@plt+0x6b10>
   17f0c:	mov	r5, r3
   17f10:	mov	r7, #1
   17f14:	b	178d4 <__assert_fail@plt+0x64f0>
   17f18:	bl	1112c <memcpy@plt>
   17f1c:	b	177ec <__assert_fail@plt+0x6408>
   17f20:	mov	r8, #1
   17f24:	b	177a0 <__assert_fail@plt+0x63bc>
   17f28:	subeq	r3, r3, r0, lsl #1
   17f2c:	addeq	r3, r3, #48	; 0x30
   17f30:	strbeq	r3, [sp, #80]	; 0x50
   17f34:	b	177a0 <__assert_fail@plt+0x63bc>
   17f38:	push	{r4, r5, lr}
   17f3c:	sub	sp, sp, #36	; 0x24
   17f40:	add	lr, sp, #32
   17f44:	mov	ip, #0
   17f48:	ldr	r5, [sp, #48]	; 0x30
   17f4c:	ldr	r4, [sp, #52]	; 0x34
   17f50:	strb	ip, [lr, #-1]!
   17f54:	str	lr, [sp, #12]
   17f58:	mvn	lr, #0
   17f5c:	str	ip, [sp, #4]
   17f60:	str	ip, [sp]
   17f64:	str	r5, [sp, #16]
   17f68:	str	r4, [sp, #20]
   17f6c:	str	lr, [sp, #8]
   17f70:	bl	162ac <__assert_fail@plt+0x4ec8>
   17f74:	add	sp, sp, #36	; 0x24
   17f78:	pop	{r4, r5, pc}
   17f7c:	push	{r4, r5, r6, lr}
   17f80:	subs	r4, r0, #0
   17f84:	beq	17ff8 <__assert_fail@plt+0x6c14>
   17f88:	mov	r1, #47	; 0x2f
   17f8c:	bl	11360 <strrchr@plt>
   17f90:	subs	r5, r0, #0
   17f94:	beq	17fe4 <__assert_fail@plt+0x6c00>
   17f98:	add	r6, r5, #1
   17f9c:	sub	r3, r6, r4
   17fa0:	cmp	r3, #6
   17fa4:	ble	17fe4 <__assert_fail@plt+0x6c00>
   17fa8:	mov	r2, #7
   17fac:	ldr	r1, [pc, #96]	; 18014 <__assert_fail@plt+0x6c30>
   17fb0:	sub	r0, r5, #6
   17fb4:	bl	113c0 <strncmp@plt>
   17fb8:	cmp	r0, #0
   17fbc:	bne	17fe4 <__assert_fail@plt+0x6c00>
   17fc0:	mov	r2, #3
   17fc4:	ldr	r1, [pc, #76]	; 18018 <__assert_fail@plt+0x6c34>
   17fc8:	mov	r0, r6
   17fcc:	bl	113c0 <strncmp@plt>
   17fd0:	cmp	r0, #0
   17fd4:	movne	r4, r6
   17fd8:	ldreq	r3, [pc, #60]	; 1801c <__assert_fail@plt+0x6c38>
   17fdc:	addeq	r4, r5, #4
   17fe0:	streq	r4, [r3]
   17fe4:	ldr	r2, [pc, #52]	; 18020 <__assert_fail@plt+0x6c3c>
   17fe8:	ldr	r3, [pc, #52]	; 18024 <__assert_fail@plt+0x6c40>
   17fec:	str	r4, [r2]
   17ff0:	str	r4, [r3]
   17ff4:	pop	{r4, r5, r6, pc}
   17ff8:	ldr	r3, [pc, #40]	; 18028 <__assert_fail@plt+0x6c44>
   17ffc:	mov	r2, #55	; 0x37
   18000:	mov	r1, #1
   18004:	ldr	r3, [r3]
   18008:	ldr	r0, [pc, #28]	; 1802c <__assert_fail@plt+0x6c48>
   1800c:	bl	111c8 <fwrite@plt>
   18010:	bl	113cc <abort@plt>
   18014:	andeq	r1, r2, ip, ror pc
   18018:	andeq	r1, r2, r4, lsl #31
   1801c:	andeq	r3, r3, r8, asr #3
   18020:			; <UNDEFINED> instruction: 0x000332b0
   18024:	andeq	r3, r3, ip, asr #3
   18028:	ldrdeq	r3, [r3], -r8
   1802c:	andeq	r1, r2, r4, asr #30
   18030:	push	{r4, r5, r6, lr}
   18034:	mov	r4, r0
   18038:	mov	r5, r1
   1803c:	bl	1ff74 <__assert_fail@plt+0xeb90>
   18040:	ldrb	r3, [r0]
   18044:	bic	r3, r3, #32
   18048:	cmp	r3, #85	; 0x55
   1804c:	bne	180ac <__assert_fail@plt+0x6cc8>
   18050:	ldrb	r3, [r0, #1]
   18054:	bic	r3, r3, #32
   18058:	cmp	r3, #84	; 0x54
   1805c:	bne	180e8 <__assert_fail@plt+0x6d04>
   18060:	ldrb	r3, [r0, #2]
   18064:	bic	r3, r3, #32
   18068:	cmp	r3, #70	; 0x46
   1806c:	bne	180e8 <__assert_fail@plt+0x6d04>
   18070:	ldrb	r3, [r0, #3]
   18074:	cmp	r3, #45	; 0x2d
   18078:	bne	180e8 <__assert_fail@plt+0x6d04>
   1807c:	ldrb	r3, [r0, #4]
   18080:	cmp	r3, #56	; 0x38
   18084:	bne	180e8 <__assert_fail@plt+0x6d04>
   18088:	ldrb	r3, [r0, #5]
   1808c:	cmp	r3, #0
   18090:	bne	180e8 <__assert_fail@plt+0x6d04>
   18094:	ldrb	r2, [r4]
   18098:	ldr	r3, [pc, #152]	; 18138 <__assert_fail@plt+0x6d54>
   1809c:	ldr	r0, [pc, #152]	; 1813c <__assert_fail@plt+0x6d58>
   180a0:	cmp	r2, #96	; 0x60
   180a4:	movne	r0, r3
   180a8:	pop	{r4, r5, r6, pc}
   180ac:	cmp	r3, #71	; 0x47
   180b0:	bne	180e8 <__assert_fail@plt+0x6d04>
   180b4:	ldrb	r3, [r0, #1]
   180b8:	bic	r3, r3, #32
   180bc:	cmp	r3, #66	; 0x42
   180c0:	bne	180e8 <__assert_fail@plt+0x6d04>
   180c4:	ldrb	r3, [r0, #2]
   180c8:	cmp	r3, #49	; 0x31
   180cc:	bne	180e8 <__assert_fail@plt+0x6d04>
   180d0:	ldrb	r3, [r0, #3]
   180d4:	cmp	r3, #56	; 0x38
   180d8:	bne	180e8 <__assert_fail@plt+0x6d04>
   180dc:	ldrb	r3, [r0, #4]
   180e0:	cmp	r3, #48	; 0x30
   180e4:	beq	180fc <__assert_fail@plt+0x6d18>
   180e8:	ldr	r3, [pc, #80]	; 18140 <__assert_fail@plt+0x6d5c>
   180ec:	cmp	r5, #9
   180f0:	ldr	r0, [pc, #76]	; 18144 <__assert_fail@plt+0x6d60>
   180f4:	movne	r0, r3
   180f8:	pop	{r4, r5, r6, pc}
   180fc:	ldrb	r3, [r0, #5]
   18100:	cmp	r3, #51	; 0x33
   18104:	bne	180e8 <__assert_fail@plt+0x6d04>
   18108:	ldrb	r3, [r0, #6]
   1810c:	cmp	r3, #48	; 0x30
   18110:	bne	180e8 <__assert_fail@plt+0x6d04>
   18114:	ldrb	r3, [r0, #7]
   18118:	cmp	r3, #0
   1811c:	bne	180e8 <__assert_fail@plt+0x6d04>
   18120:	ldrb	r2, [r4]
   18124:	ldr	r3, [pc, #28]	; 18148 <__assert_fail@plt+0x6d64>
   18128:	ldr	r0, [pc, #28]	; 1814c <__assert_fail@plt+0x6d68>
   1812c:	cmp	r2, #96	; 0x60
   18130:	movne	r0, r3
   18134:	pop	{r4, r5, r6, pc}
   18138:	andeq	r1, r2, r0, ror #31
   1813c:	ldrdeq	r1, [r2], -ip
   18140:	strdeq	r1, [r2], -r0
   18144:	andeq	r1, r2, ip, ror #31
   18148:	andeq	r1, r2, r8, ror #31
   1814c:	andeq	r1, r2, r4, ror #31
   18150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18154:	sub	sp, sp, #140	; 0x8c
   18158:	mov	r9, r1
   1815c:	str	r3, [sp, #24]
   18160:	mov	r3, #1
   18164:	mov	sl, r0
   18168:	str	r2, [sp, #44]	; 0x2c
   1816c:	str	r3, [sp, #28]
   18170:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   18174:	ldr	r3, [sp, #180]	; 0xb4
   18178:	mov	fp, r9
   1817c:	mov	r9, sl
   18180:	lsr	r3, r3, #1
   18184:	and	r3, r3, #1
   18188:	str	r3, [sp, #40]	; 0x28
   1818c:	ldr	r3, [sp, #180]	; 0xb4
   18190:	mov	r2, #0
   18194:	and	r3, r3, #4
   18198:	str	r3, [sp, #100]	; 0x64
   1819c:	ldr	r3, [sp, #180]	; 0xb4
   181a0:	str	r2, [sp, #76]	; 0x4c
   181a4:	and	r3, r3, #1
   181a8:	str	r3, [sp, #96]	; 0x60
   181ac:	str	r2, [sp, #36]	; 0x24
   181b0:	str	r2, [sp, #56]	; 0x38
   181b4:	str	r2, [sp, #68]	; 0x44
   181b8:	str	r2, [sp, #72]	; 0x48
   181bc:	str	r2, [sp, #84]	; 0x54
   181c0:	str	r0, [sp, #80]	; 0x50
   181c4:	ldr	r3, [sp, #176]	; 0xb0
   181c8:	cmp	r3, #10
   181cc:	ldrls	pc, [pc, r3, lsl #2]
   181d0:	b	193a8 <__assert_fail@plt+0x7fc4>
   181d4:	andeq	r8, r1, r0, lsl #4
   181d8:	andeq	r8, r1, r0, lsr #10
   181dc:	andeq	r8, r1, r8, ror r6
   181e0:	andeq	r8, r1, r4, asr r5
   181e4:	andeq	r8, r1, ip, asr #13
   181e8:	andeq	r8, r1, ip, lsr #13
   181ec:	andeq	r8, r1, r4, ror r5
   181f0:	muleq	r1, r8, r5
   181f4:	andeq	r8, r1, r0, asr #11
   181f8:	andeq	r8, r1, r0, asr #11
   181fc:	andeq	r8, r1, r0, asr #11
   18200:	mov	r3, #0
   18204:	ldr	r1, [sp, #56]	; 0x38
   18208:	ldr	r2, [sp, #176]	; 0xb0
   1820c:	ldr	lr, [sp, #176]	; 0xb0
   18210:	mov	r8, r3
   18214:	mov	ip, r3
   18218:	str	r3, [sp, #40]	; 0x28
   1821c:	mov	r3, r1
   18220:	cmp	r2, #2
   18224:	moveq	r3, #0
   18228:	andne	r3, r3, #1
   1822c:	mov	r0, r3
   18230:	str	r3, [sp, #92]	; 0x5c
   18234:	ldr	r3, [sp, #68]	; 0x44
   18238:	sub	lr, lr, #2
   1823c:	adds	r2, r3, #0
   18240:	movne	r2, #1
   18244:	and	r3, r1, ip
   18248:	and	r3, r2, r3
   1824c:	clz	lr, lr
   18250:	str	r3, [sp, #88]	; 0x58
   18254:	lsr	lr, lr, #5
   18258:	mov	r3, ip
   1825c:	and	r3, r3, lr
   18260:	mov	sl, #0
   18264:	and	r0, r2, r0
   18268:	str	r3, [sp, #64]	; 0x40
   1826c:	eor	r3, r1, #1
   18270:	str	lr, [sp, #52]	; 0x34
   18274:	str	r0, [sp, #48]	; 0x30
   18278:	str	r3, [sp, #60]	; 0x3c
   1827c:	ldr	r3, [sp, #24]
   18280:	cmn	r3, #1
   18284:	beq	187b4 <__assert_fail@plt+0x73d0>
   18288:	subs	r7, r3, sl
   1828c:	movne	r7, #1
   18290:	cmp	r7, #0
   18294:	beq	187cc <__assert_fail@plt+0x73e8>
   18298:	ldr	r3, [sp, #48]	; 0x30
   1829c:	cmp	r3, #0
   182a0:	beq	18b38 <__assert_fail@plt+0x7754>
   182a4:	ldr	r2, [sp, #68]	; 0x44
   182a8:	ldr	r1, [sp, #24]
   182ac:	cmp	r2, #1
   182b0:	mov	r3, r2
   182b4:	movls	r3, #0
   182b8:	movhi	r3, #1
   182bc:	cmn	r1, #1
   182c0:	movne	r3, #0
   182c4:	cmp	r3, #0
   182c8:	add	r4, sl, r2
   182cc:	beq	182dc <__assert_fail@plt+0x6ef8>
   182d0:	ldr	r0, [sp, #44]	; 0x2c
   182d4:	bl	11294 <strlen@plt>
   182d8:	str	r0, [sp, #24]
   182dc:	ldr	r3, [sp, #24]
   182e0:	cmp	r3, r4
   182e4:	ldr	r3, [sp, #44]	; 0x2c
   182e8:	add	r5, r3, sl
   182ec:	bcc	18b40 <__assert_fail@plt+0x775c>
   182f0:	mov	r0, r5
   182f4:	ldr	r2, [sp, #68]	; 0x44
   182f8:	ldr	r1, [sp, #72]	; 0x48
   182fc:	bl	11150 <memcmp@plt>
   18300:	cmp	r0, #0
   18304:	bne	18b40 <__assert_fail@plt+0x775c>
   18308:	ldr	r3, [sp, #40]	; 0x28
   1830c:	cmp	r3, #0
   18310:	bne	194fc <__assert_fail@plt+0x8118>
   18314:	ldrb	r4, [r5]
   18318:	cmp	r4, #126	; 0x7e
   1831c:	ldrls	pc, [pc, r4, lsl #2]
   18320:	b	19438 <__assert_fail@plt+0x8054>
   18324:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18328:	andeq	r9, r1, r8, lsr r4
   1832c:	andeq	r9, r1, r8, lsr r4
   18330:	andeq	r9, r1, r8, lsr r4
   18334:	andeq	r9, r1, r8, lsr r4
   18338:	andeq	r9, r1, r8, lsr r4
   1833c:	andeq	r9, r1, r8, lsr r4
   18340:	andeq	r8, r1, r4, ror #19
   18344:	ldrdeq	r8, [r1], -r0
   18348:	andeq	r8, r1, ip, lsr #19
   1834c:	andeq	r8, r1, ip, lsl #19
   18350:			; <UNDEFINED> instruction: 0x000189bc
   18354:	strdeq	r8, [r1], -r4
   18358:	andeq	r8, r1, r8, lsr #22
   1835c:	andeq	r9, r1, r8, lsr r4
   18360:	andeq	r9, r1, r8, lsr r4
   18364:	andeq	r9, r1, r8, lsr r4
   18368:	andeq	r9, r1, r8, lsr r4
   1836c:	andeq	r9, r1, r8, lsr r4
   18370:	andeq	r9, r1, r8, lsr r4
   18374:	andeq	r9, r1, r8, lsr r4
   18378:	andeq	r9, r1, r8, lsr r4
   1837c:	andeq	r9, r1, r8, lsr r4
   18380:	andeq	r9, r1, r8, lsr r4
   18384:	andeq	r9, r1, r8, lsr r4
   18388:	andeq	r9, r1, r8, lsr r4
   1838c:	andeq	r9, r1, r8, lsr r4
   18390:	andeq	r9, r1, r8, lsr r4
   18394:	andeq	r9, r1, r8, lsr r4
   18398:	andeq	r9, r1, r8, lsr r4
   1839c:	andeq	r9, r1, r8, lsr r4
   183a0:	andeq	r9, r1, r8, lsr r4
   183a4:	andeq	r8, r1, r8, lsl fp
   183a8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183ac:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183b4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183b8:	andeq	r8, r1, r4, ror #17
   183bc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183c0:	andeq	r8, r1, r0, asr #17
   183c4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183cc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183d0:	andeq	r8, r1, r4, ror #17
   183d4:	andeq	r8, r1, r4, ror #17
   183d8:	andeq	r8, r1, r4, ror #17
   183dc:	andeq	r8, r1, r4, ror #17
   183e0:	andeq	r8, r1, r4, ror #17
   183e4:	andeq	r8, r1, r4, ror #17
   183e8:	andeq	r8, r1, r4, ror #17
   183ec:	andeq	r8, r1, r4, ror #17
   183f0:	andeq	r8, r1, r4, ror #17
   183f4:	andeq	r8, r1, r4, ror #17
   183f8:	andeq	r8, r1, r4, ror #17
   183fc:	andeq	r8, r1, r4, ror #17
   18400:	andeq	r8, r1, r4, ror #17
   18404:	andeq	r8, r1, r4, ror #17
   18408:	andeq	r8, r1, r4, ror #17
   1840c:	andeq	r8, r1, r4, ror #17
   18410:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18414:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18418:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1841c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18420:	andeq	r8, r1, r0, ror r8
   18424:	andeq	r9, r1, r8, lsr r4
   18428:	andeq	r8, r1, r4, ror #17
   1842c:	andeq	r8, r1, r4, ror #17
   18430:	andeq	r8, r1, r4, ror #17
   18434:	andeq	r8, r1, r4, ror #17
   18438:	andeq	r8, r1, r4, ror #17
   1843c:	andeq	r8, r1, r4, ror #17
   18440:	andeq	r8, r1, r4, ror #17
   18444:	andeq	r8, r1, r4, ror #17
   18448:	andeq	r8, r1, r4, ror #17
   1844c:	andeq	r8, r1, r4, ror #17
   18450:	andeq	r8, r1, r4, ror #17
   18454:	andeq	r8, r1, r4, ror #17
   18458:	andeq	r8, r1, r4, ror #17
   1845c:	andeq	r8, r1, r4, ror #17
   18460:	andeq	r8, r1, r4, ror #17
   18464:	andeq	r8, r1, r4, ror #17
   18468:	andeq	r8, r1, r4, ror #17
   1846c:	andeq	r8, r1, r4, ror #17
   18470:	andeq	r8, r1, r4, ror #17
   18474:	andeq	r8, r1, r4, ror #17
   18478:	andeq	r8, r1, r4, ror #17
   1847c:	andeq	r8, r1, r4, ror #17
   18480:	andeq	r8, r1, r4, ror #17
   18484:	andeq	r8, r1, r4, ror #17
   18488:	andeq	r8, r1, r4, ror #17
   1848c:	andeq	r8, r1, r4, ror #17
   18490:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18494:	andeq	r8, r1, ip, lsr r8
   18498:	andeq	r8, r1, r4, ror #17
   1849c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184a0:	andeq	r8, r1, r4, ror #17
   184a4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184a8:	andeq	r8, r1, r4, ror #17
   184ac:	andeq	r8, r1, r4, ror #17
   184b0:	andeq	r8, r1, r4, ror #17
   184b4:	andeq	r8, r1, r4, ror #17
   184b8:	andeq	r8, r1, r4, ror #17
   184bc:	andeq	r8, r1, r4, ror #17
   184c0:	andeq	r8, r1, r4, ror #17
   184c4:	andeq	r8, r1, r4, ror #17
   184c8:	andeq	r8, r1, r4, ror #17
   184cc:	andeq	r8, r1, r4, ror #17
   184d0:	andeq	r8, r1, r4, ror #17
   184d4:	andeq	r8, r1, r4, ror #17
   184d8:	andeq	r8, r1, r4, ror #17
   184dc:	andeq	r8, r1, r4, ror #17
   184e0:	andeq	r8, r1, r4, ror #17
   184e4:	andeq	r8, r1, r4, ror #17
   184e8:	andeq	r8, r1, r4, ror #17
   184ec:	andeq	r8, r1, r4, ror #17
   184f0:	andeq	r8, r1, r4, ror #17
   184f4:	andeq	r8, r1, r4, ror #17
   184f8:	andeq	r8, r1, r4, ror #17
   184fc:	andeq	r8, r1, r4, ror #17
   18500:	andeq	r8, r1, r4, ror #17
   18504:	andeq	r8, r1, r4, ror #17
   18508:	andeq	r8, r1, r4, ror #17
   1850c:	andeq	r8, r1, r4, ror #17
   18510:	strdeq	r8, [r1], -r4
   18514:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18518:	strdeq	r8, [r1], -r4
   1851c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18520:	mov	r3, #1
   18524:	str	r3, [sp, #40]	; 0x28
   18528:	str	r3, [sp, #68]	; 0x44
   1852c:	mov	r8, #0
   18530:	ldr	r3, [pc, #4056]	; 19510 <__assert_fail@plt+0x812c>
   18534:	str	r3, [sp, #72]	; 0x48
   18538:	mov	r3, #2
   1853c:	str	r3, [sp, #176]	; 0xb0
   18540:	ldr	r1, [sp, #56]	; 0x38
   18544:	mov	r2, r3
   18548:	ldr	ip, [sp, #40]	; 0x28
   1854c:	mov	lr, r3
   18550:	b	1821c <__assert_fail@plt+0x6e38>
   18554:	mov	r3, #1
   18558:	str	r3, [sp, #56]	; 0x38
   1855c:	str	r3, [sp, #68]	; 0x44
   18560:	str	r3, [sp, #40]	; 0x28
   18564:	ldr	r3, [pc, #4004]	; 19510 <__assert_fail@plt+0x812c>
   18568:	mov	r8, #0
   1856c:	str	r3, [sp, #72]	; 0x48
   18570:	b	18538 <__assert_fail@plt+0x7154>
   18574:	mov	r3, #1
   18578:	str	r3, [sp, #56]	; 0x38
   1857c:	str	r3, [sp, #68]	; 0x44
   18580:	str	r3, [sp, #40]	; 0x28
   18584:	ldr	r3, [pc, #3976]	; 19514 <__assert_fail@plt+0x8130>
   18588:	mov	r8, #0
   1858c:	str	r3, [sp, #72]	; 0x48
   18590:	mov	r3, #5
   18594:	b	1853c <__assert_fail@plt+0x7158>
   18598:	mov	r3, #0
   1859c:	str	r3, [sp, #40]	; 0x28
   185a0:	mov	r3, #1
   185a4:	str	r3, [sp, #56]	; 0x38
   185a8:	mov	r8, #0
   185ac:	mov	r1, r3
   185b0:	ldr	r2, [sp, #176]	; 0xb0
   185b4:	ldr	ip, [sp, #40]	; 0x28
   185b8:	ldr	lr, [sp, #176]	; 0xb0
   185bc:	b	1821c <__assert_fail@plt+0x6e38>
   185c0:	ldr	r3, [sp, #176]	; 0xb0
   185c4:	cmp	r3, #10
   185c8:	beq	1860c <__assert_fail@plt+0x7228>
   185cc:	mov	r2, #5
   185d0:	ldr	r1, [pc, #3904]	; 19518 <__assert_fail@plt+0x8134>
   185d4:	mov	r0, #0
   185d8:	bl	11168 <dcgettext@plt>
   185dc:	ldr	r2, [pc, #3892]	; 19518 <__assert_fail@plt+0x8134>
   185e0:	cmp	r0, r2
   185e4:	str	r0, [sp, #188]	; 0xbc
   185e8:	beq	196a4 <__assert_fail@plt+0x82c0>
   185ec:	mov	r2, #5
   185f0:	ldr	r1, [pc, #3864]	; 19510 <__assert_fail@plt+0x812c>
   185f4:	mov	r0, #0
   185f8:	bl	11168 <dcgettext@plt>
   185fc:	ldr	r2, [pc, #3852]	; 19510 <__assert_fail@plt+0x812c>
   18600:	cmp	r0, r2
   18604:	str	r0, [sp, #192]	; 0xc0
   18608:	beq	19694 <__assert_fail@plt+0x82b0>
   1860c:	ldr	r8, [sp, #40]	; 0x28
   18610:	cmp	r8, #0
   18614:	movne	r8, #0
   18618:	bne	18648 <__assert_fail@plt+0x7264>
   1861c:	ldr	r3, [sp, #188]	; 0xbc
   18620:	ldrb	r3, [r3]
   18624:	cmp	r3, #0
   18628:	beq	18648 <__assert_fail@plt+0x7264>
   1862c:	ldr	r2, [sp, #188]	; 0xbc
   18630:	cmp	fp, r8
   18634:	strbhi	r3, [r9, r8]
   18638:	ldrb	r3, [r2, #1]!
   1863c:	add	r8, r8, #1
   18640:	cmp	r3, #0
   18644:	bne	18630 <__assert_fail@plt+0x724c>
   18648:	ldr	r0, [sp, #192]	; 0xc0
   1864c:	bl	11294 <strlen@plt>
   18650:	ldr	r3, [sp, #192]	; 0xc0
   18654:	ldr	r2, [sp, #176]	; 0xb0
   18658:	str	r3, [sp, #72]	; 0x48
   1865c:	mov	r3, #1
   18660:	str	r3, [sp, #56]	; 0x38
   18664:	mov	r1, r3
   18668:	ldr	ip, [sp, #40]	; 0x28
   1866c:	ldr	lr, [sp, #176]	; 0xb0
   18670:	str	r0, [sp, #68]	; 0x44
   18674:	b	1821c <__assert_fail@plt+0x6e38>
   18678:	ldr	r3, [sp, #40]	; 0x28
   1867c:	cmp	r3, #0
   18680:	beq	19328 <__assert_fail@plt+0x7f44>
   18684:	mov	r3, #1
   18688:	str	r3, [sp, #68]	; 0x44
   1868c:	ldr	r3, [pc, #3708]	; 19510 <__assert_fail@plt+0x812c>
   18690:	str	r3, [sp, #72]	; 0x48
   18694:	mov	r8, #0
   18698:	ldr	r1, [sp, #56]	; 0x38
   1869c:	ldr	r2, [sp, #176]	; 0xb0
   186a0:	ldr	ip, [sp, #40]	; 0x28
   186a4:	ldr	lr, [sp, #176]	; 0xb0
   186a8:	b	1821c <__assert_fail@plt+0x6e38>
   186ac:	ldr	r3, [sp, #40]	; 0x28
   186b0:	cmp	r3, #0
   186b4:	beq	193ac <__assert_fail@plt+0x7fc8>
   186b8:	str	r3, [sp, #56]	; 0x38
   186bc:	mov	r3, #1
   186c0:	str	r3, [sp, #68]	; 0x44
   186c4:	ldr	r3, [pc, #3656]	; 19514 <__assert_fail@plt+0x8130>
   186c8:	b	18690 <__assert_fail@plt+0x72ac>
   186cc:	ldr	r3, [sp, #40]	; 0x28
   186d0:	cmp	r3, #0
   186d4:	mov	r3, #1
   186d8:	streq	r3, [sp, #56]	; 0x38
   186dc:	beq	19328 <__assert_fail@plt+0x7f44>
   186e0:	str	r3, [sp, #68]	; 0x44
   186e4:	ldr	r3, [pc, #3620]	; 19510 <__assert_fail@plt+0x812c>
   186e8:	mov	r8, #0
   186ec:	str	r3, [sp, #72]	; 0x48
   186f0:	b	18538 <__assert_fail@plt+0x7154>
   186f4:	ldr	r3, [sp, #24]
   186f8:	ldr	r6, [sp, #48]	; 0x30
   186fc:	cmn	r3, #1
   18700:	beq	18d5c <__assert_fail@plt+0x7978>
   18704:	subs	r3, r3, #1
   18708:	movne	r3, #1
   1870c:	cmp	r3, #0
   18710:	beq	18adc <__assert_fail@plt+0x76f8>
   18714:	ldr	r1, [sp, #52]	; 0x34
   18718:	mov	r7, r3
   1871c:	mov	r3, #0
   18720:	str	r3, [sp, #32]
   18724:	ldr	r3, [sp, #60]	; 0x3c
   18728:	orr	r2, r1, r3
   1872c:	ldr	r3, [sp, #40]	; 0x28
   18730:	eor	r2, r2, #1
   18734:	orr	r2, r3, r2
   18738:	tst	r2, #255	; 0xff
   1873c:	bne	19060 <__assert_fail@plt+0x7c7c>
   18740:	cmp	r6, #0
   18744:	bne	18920 <__assert_fail@plt+0x753c>
   18748:	ldr	r3, [sp, #36]	; 0x24
   1874c:	add	sl, sl, #1
   18750:	and	r3, r3, r7
   18754:	uxtb	r6, r3
   18758:	cmp	r6, #0
   1875c:	beq	18788 <__assert_fail@plt+0x73a4>
   18760:	cmp	fp, r8
   18764:	movhi	r3, #39	; 0x27
   18768:	strbhi	r3, [r9, r8]
   1876c:	add	r3, r8, #1
   18770:	cmp	fp, r3
   18774:	movhi	r2, #39	; 0x27
   18778:	add	r8, r8, #2
   1877c:	strbhi	r2, [r9, r3]
   18780:	mov	r3, #0
   18784:	str	r3, [sp, #36]	; 0x24
   18788:	ldr	r2, [sp, #32]
   1878c:	cmp	r8, fp
   18790:	ldr	r3, [sp, #28]
   18794:	strbcc	r4, [r9, r8]
   18798:	cmp	r2, #0
   1879c:	moveq	r3, #0
   187a0:	str	r3, [sp, #28]
   187a4:	ldr	r3, [sp, #24]
   187a8:	add	r8, r8, #1
   187ac:	cmn	r3, #1
   187b0:	bne	18288 <__assert_fail@plt+0x6ea4>
   187b4:	ldr	r3, [sp, #44]	; 0x2c
   187b8:	ldrb	r3, [r3, sl]
   187bc:	adds	r7, r3, #0
   187c0:	movne	r7, #1
   187c4:	cmp	r7, #0
   187c8:	bne	18298 <__assert_fail@plt+0x6eb4>
   187cc:	ldr	r3, [sp, #64]	; 0x40
   187d0:	cmp	r8, #0
   187d4:	movne	r3, #0
   187d8:	andeq	r3, r3, #1
   187dc:	cmp	r3, #0
   187e0:	str	r3, [sp, #64]	; 0x40
   187e4:	bne	19288 <__assert_fail@plt+0x7ea4>
   187e8:	ldr	r3, [sp, #40]	; 0x28
   187ec:	ldr	r2, [sp, #52]	; 0x34
   187f0:	eor	r3, r3, #1
   187f4:	ands	r2, r2, r3
   187f8:	beq	196b4 <__assert_fail@plt+0x82d0>
   187fc:	ldr	r3, [sp, #76]	; 0x4c
   18800:	cmp	r3, #0
   18804:	beq	19684 <__assert_fail@plt+0x82a0>
   18808:	ldr	r3, [sp, #28]
   1880c:	cmp	r3, #0
   18810:	bne	19640 <__assert_fail@plt+0x825c>
   18814:	ldr	r2, [sp, #84]	; 0x54
   18818:	clz	r3, fp
   1881c:	cmp	r2, #0
   18820:	lsr	r3, r3, #5
   18824:	moveq	r3, #0
   18828:	cmp	r3, #0
   1882c:	beq	195e0 <__assert_fail@plt+0x81fc>
   18830:	mov	fp, r2
   18834:	str	r3, [sp, #76]	; 0x4c
   18838:	b	181c4 <__assert_fail@plt+0x6de0>
   1883c:	ldr	r3, [sp, #176]	; 0xb0
   18840:	ldr	r6, [sp, #48]	; 0x30
   18844:	cmp	r3, #2
   18848:	beq	18d80 <__assert_fail@plt+0x799c>
   1884c:	ldr	r3, [sp, #88]	; 0x58
   18850:	cmp	r3, #0
   18854:	beq	19304 <__assert_fail@plt+0x7f20>
   18858:	mov	r3, #0
   1885c:	add	sl, sl, #1
   18860:	ldr	r6, [sp, #36]	; 0x24
   18864:	str	r3, [sp, #32]
   18868:	mov	r4, #92	; 0x5c
   1886c:	b	18758 <__assert_fail@plt+0x7374>
   18870:	ldr	r3, [sp, #176]	; 0xb0
   18874:	ldr	r6, [sp, #48]	; 0x30
   18878:	cmp	r3, #2
   1887c:	beq	18db0 <__assert_fail@plt+0x79cc>
   18880:	cmp	r3, #5
   18884:	bne	19314 <__assert_fail@plt+0x7f30>
   18888:	ldr	r3, [sp, #100]	; 0x64
   1888c:	cmp	r3, #0
   18890:	beq	19378 <__assert_fail@plt+0x7f94>
   18894:	ldr	r2, [sp, #24]
   18898:	add	r3, sl, #2
   1889c:	cmp	r2, r3
   188a0:	bls	188b0 <__assert_fail@plt+0x74cc>
   188a4:	ldrb	r4, [r5, #1]
   188a8:	cmp	r4, #63	; 0x3f
   188ac:	beq	19520 <__assert_fail@plt+0x813c>
   188b0:	mov	r1, #0
   188b4:	str	r1, [sp, #32]
   188b8:	mov	r4, #63	; 0x3f
   188bc:	b	18724 <__assert_fail@plt+0x7340>
   188c0:	ldr	r3, [sp, #176]	; 0xb0
   188c4:	ldr	r6, [sp, #48]	; 0x30
   188c8:	cmp	r3, #2
   188cc:	beq	18ddc <__assert_fail@plt+0x79f8>
   188d0:	str	r7, [sp, #32]
   188d4:	str	r7, [sp, #76]	; 0x4c
   188d8:	mov	r1, #0
   188dc:	mov	r4, #39	; 0x27
   188e0:	b	18724 <__assert_fail@plt+0x7340>
   188e4:	ldr	r6, [sp, #48]	; 0x30
   188e8:	ldr	r1, [sp, #52]	; 0x34
   188ec:	str	r7, [sp, #32]
   188f0:	b	18724 <__assert_fail@plt+0x7340>
   188f4:	ldr	r6, [sp, #48]	; 0x30
   188f8:	ldr	r1, [sp, #52]	; 0x34
   188fc:	mov	r4, #12
   18900:	mov	r3, #102	; 0x66
   18904:	ldr	r2, [sp, #56]	; 0x38
   18908:	cmp	r2, #0
   1890c:	streq	r2, [sp, #32]
   18910:	beq	18724 <__assert_fail@plt+0x7340>
   18914:	mov	r4, r3
   18918:	mov	r3, #0
   1891c:	str	r3, [sp, #32]
   18920:	ldr	r3, [sp, #40]	; 0x28
   18924:	cmp	r3, #0
   18928:	bne	19098 <__assert_fail@plt+0x7cb4>
   1892c:	ldr	r3, [sp, #36]	; 0x24
   18930:	eor	r3, r3, #1
   18934:	and	r3, r3, r1
   18938:	ands	r3, r3, #255	; 0xff
   1893c:	beq	18974 <__assert_fail@plt+0x7590>
   18940:	cmp	fp, r8
   18944:	movhi	r2, #39	; 0x27
   18948:	strbhi	r2, [r9, r8]
   1894c:	add	r2, r8, #1
   18950:	cmp	fp, r2
   18954:	movhi	r1, #36	; 0x24
   18958:	strbhi	r1, [r9, r2]
   1895c:	add	r2, r8, #2
   18960:	cmp	fp, r2
   18964:	add	r8, r8, #3
   18968:	movhi	r1, #39	; 0x27
   1896c:	strbhi	r1, [r9, r2]
   18970:	str	r3, [sp, #36]	; 0x24
   18974:	cmp	fp, r8
   18978:	movhi	r3, #92	; 0x5c
   1897c:	strbhi	r3, [r9, r8]
   18980:	add	sl, sl, #1
   18984:	add	r8, r8, #1
   18988:	b	18788 <__assert_fail@plt+0x73a4>
   1898c:	ldr	r6, [sp, #48]	; 0x30
   18990:	mov	r4, #10
   18994:	mov	r3, #110	; 0x6e
   18998:	ldr	r2, [sp, #64]	; 0x40
   1899c:	cmp	r2, #0
   189a0:	bne	19420 <__assert_fail@plt+0x803c>
   189a4:	ldr	r1, [sp, #52]	; 0x34
   189a8:	b	18904 <__assert_fail@plt+0x7520>
   189ac:	ldr	r6, [sp, #48]	; 0x30
   189b0:	ldr	r1, [sp, #52]	; 0x34
   189b4:	mov	r3, #116	; 0x74
   189b8:	b	18904 <__assert_fail@plt+0x7520>
   189bc:	ldr	r6, [sp, #48]	; 0x30
   189c0:	ldr	r1, [sp, #52]	; 0x34
   189c4:	mov	r4, #11
   189c8:	mov	r3, #118	; 0x76
   189cc:	b	18904 <__assert_fail@plt+0x7520>
   189d0:	ldr	r6, [sp, #48]	; 0x30
   189d4:	ldr	r1, [sp, #52]	; 0x34
   189d8:	mov	r4, #8
   189dc:	mov	r3, #98	; 0x62
   189e0:	b	18904 <__assert_fail@plt+0x7520>
   189e4:	ldr	r6, [sp, #48]	; 0x30
   189e8:	ldr	r1, [sp, #52]	; 0x34
   189ec:	mov	r4, #7
   189f0:	mov	r3, #97	; 0x61
   189f4:	b	18904 <__assert_fail@plt+0x7520>
   189f8:	ldr	r3, [sp, #56]	; 0x38
   189fc:	ldr	r6, [sp, #48]	; 0x30
   18a00:	cmp	r3, #0
   18a04:	beq	18ec8 <__assert_fail@plt+0x7ae4>
   18a08:	ldr	r3, [sp, #40]	; 0x28
   18a0c:	cmp	r3, #0
   18a10:	bne	194fc <__assert_fail@plt+0x8118>
   18a14:	ldr	r3, [sp, #36]	; 0x24
   18a18:	ldr	r2, [sp, #52]	; 0x34
   18a1c:	eor	r3, r3, #1
   18a20:	ands	r3, r2, r3
   18a24:	moveq	r2, r8
   18a28:	beq	18a60 <__assert_fail@plt+0x767c>
   18a2c:	cmp	fp, r8
   18a30:	movhi	r2, #39	; 0x27
   18a34:	strbhi	r2, [r9, r8]
   18a38:	add	r2, r8, #1
   18a3c:	cmp	fp, r2
   18a40:	movhi	r1, #36	; 0x24
   18a44:	strbhi	r1, [r9, r2]
   18a48:	add	r2, r8, #2
   18a4c:	cmp	fp, r2
   18a50:	movhi	r1, #39	; 0x27
   18a54:	strbhi	r1, [r9, r2]
   18a58:	add	r2, r8, #3
   18a5c:	str	r3, [sp, #36]	; 0x24
   18a60:	cmp	fp, r2
   18a64:	movhi	r3, #92	; 0x5c
   18a68:	strbhi	r3, [r9, r2]
   18a6c:	ldr	r3, [sp, #92]	; 0x5c
   18a70:	add	r8, r2, #1
   18a74:	cmp	r3, #0
   18a78:	beq	193fc <__assert_fail@plt+0x8018>
   18a7c:	ldr	r1, [sp, #24]
   18a80:	add	r3, sl, #1
   18a84:	cmp	r1, r3
   18a88:	bls	18ac0 <__assert_fail@plt+0x76dc>
   18a8c:	ldr	r1, [sp, #44]	; 0x2c
   18a90:	ldrb	r3, [r1, r3]
   18a94:	sub	r3, r3, #48	; 0x30
   18a98:	cmp	r3, #9
   18a9c:	bhi	18ac0 <__assert_fail@plt+0x76dc>
   18aa0:	cmp	fp, r8
   18aa4:	movhi	r3, #48	; 0x30
   18aa8:	strbhi	r3, [r9, r8]
   18aac:	add	r3, r2, #2
   18ab0:	cmp	fp, r3
   18ab4:	add	r8, r2, #3
   18ab8:	movhi	r1, #48	; 0x30
   18abc:	strbhi	r1, [r9, r3]
   18ac0:	ldr	r3, [sp, #40]	; 0x28
   18ac4:	ldr	r1, [sp, #52]	; 0x34
   18ac8:	mov	r7, r3
   18acc:	str	r3, [sp, #32]
   18ad0:	mov	r4, #48	; 0x30
   18ad4:	b	18724 <__assert_fail@plt+0x7340>
   18ad8:	ldr	r6, [sp, #48]	; 0x30
   18adc:	cmp	sl, #0
   18ae0:	streq	r7, [sp, #32]
   18ae4:	beq	18b04 <__assert_fail@plt+0x7720>
   18ae8:	mov	r3, #0
   18aec:	ldr	r1, [sp, #52]	; 0x34
   18af0:	str	r3, [sp, #32]
   18af4:	b	18724 <__assert_fail@plt+0x7340>
   18af8:	ldr	r6, [sp, #48]	; 0x30
   18afc:	mov	r3, #0
   18b00:	str	r3, [sp, #32]
   18b04:	ldr	r3, [sp, #64]	; 0x40
   18b08:	cmp	r3, #0
   18b0c:	bne	19288 <__assert_fail@plt+0x7ea4>
   18b10:	ldr	r1, [sp, #52]	; 0x34
   18b14:	b	18724 <__assert_fail@plt+0x7340>
   18b18:	ldr	r3, [sp, #48]	; 0x30
   18b1c:	mov	r6, r3
   18b20:	str	r3, [sp, #32]
   18b24:	b	18b04 <__assert_fail@plt+0x7720>
   18b28:	ldr	r6, [sp, #48]	; 0x30
   18b2c:	mov	r4, #13
   18b30:	mov	r3, #114	; 0x72
   18b34:	b	18998 <__assert_fail@plt+0x75b4>
   18b38:	ldr	r3, [sp, #44]	; 0x2c
   18b3c:	add	r5, r3, sl
   18b40:	ldrb	r4, [r5]
   18b44:	cmp	r4, #126	; 0x7e
   18b48:	ldrls	pc, [pc, r4, lsl #2]
   18b4c:	b	18ee8 <__assert_fail@plt+0x7b04>
   18b50:			; <UNDEFINED> instruction: 0x00018eb8
   18b54:	andeq	r8, r1, r8, ror #29
   18b58:	andeq	r8, r1, r8, ror #29
   18b5c:	andeq	r8, r1, r8, ror #29
   18b60:	andeq	r8, r1, r8, ror #29
   18b64:	andeq	r8, r1, r8, ror #29
   18b68:	andeq	r8, r1, r8, ror #29
   18b6c:			; <UNDEFINED> instruction: 0x00018eb0
   18b70:	andeq	r8, r1, r8, lsr #29
   18b74:	muleq	r1, ip, lr
   18b78:	muleq	r1, r4, lr
   18b7c:	andeq	r8, r1, ip, lsl #29
   18b80:	andeq	r8, r1, r4, lsl #29
   18b84:	andeq	r8, r1, ip, ror lr
   18b88:	andeq	r8, r1, r8, ror #29
   18b8c:	andeq	r8, r1, r8, ror #29
   18b90:	andeq	r8, r1, r8, ror #29
   18b94:	andeq	r8, r1, r8, ror #29
   18b98:	andeq	r8, r1, r8, ror #29
   18b9c:	andeq	r8, r1, r8, ror #29
   18ba0:	andeq	r8, r1, r8, ror #29
   18ba4:	andeq	r8, r1, r8, ror #29
   18ba8:	andeq	r8, r1, r8, ror #29
   18bac:	andeq	r8, r1, r8, ror #29
   18bb0:	andeq	r8, r1, r8, ror #29
   18bb4:	andeq	r8, r1, r8, ror #29
   18bb8:	andeq	r8, r1, r8, ror #29
   18bbc:	andeq	r8, r1, r8, ror #29
   18bc0:	andeq	r8, r1, r8, ror #29
   18bc4:	andeq	r8, r1, r8, ror #29
   18bc8:	andeq	r8, r1, r8, ror #29
   18bcc:	andeq	r8, r1, r8, ror #29
   18bd0:	andeq	r8, r1, r0, ror lr
   18bd4:	andeq	r8, r1, r8, ror #28
   18bd8:	andeq	r8, r1, r8, ror #28
   18bdc:	andeq	r8, r1, r0, ror #28
   18be0:	andeq	r8, r1, r8, ror #28
   18be4:	andeq	r8, r1, r8, asr lr
   18be8:	andeq	r8, r1, r8, ror #28
   18bec:	andeq	r8, r1, ip, asr #27
   18bf0:	andeq	r8, r1, r8, ror #28
   18bf4:	andeq	r8, r1, r8, ror #28
   18bf8:	andeq	r8, r1, r8, ror #28
   18bfc:	andeq	r8, r1, r8, asr lr
   18c00:	andeq	r8, r1, r8, asr lr
   18c04:	andeq	r8, r1, r8, asr lr
   18c08:	andeq	r8, r1, r8, asr lr
   18c0c:	andeq	r8, r1, r8, asr lr
   18c10:	andeq	r8, r1, r8, asr lr
   18c14:	andeq	r8, r1, r8, asr lr
   18c18:	andeq	r8, r1, r8, asr lr
   18c1c:	andeq	r8, r1, r8, asr lr
   18c20:	andeq	r8, r1, r8, asr lr
   18c24:	andeq	r8, r1, r8, asr lr
   18c28:	andeq	r8, r1, r8, asr lr
   18c2c:	andeq	r8, r1, r8, asr lr
   18c30:	andeq	r8, r1, r8, asr lr
   18c34:	andeq	r8, r1, r8, asr lr
   18c38:	andeq	r8, r1, r8, asr lr
   18c3c:	andeq	r8, r1, r8, ror #28
   18c40:	andeq	r8, r1, r8, ror #28
   18c44:	andeq	r8, r1, r8, ror #28
   18c48:	andeq	r8, r1, r8, ror #28
   18c4c:	andeq	r8, r1, r0, lsr #27
   18c50:	andeq	r8, r1, r8, ror #29
   18c54:	andeq	r8, r1, r8, asr lr
   18c58:	andeq	r8, r1, r8, asr lr
   18c5c:	andeq	r8, r1, r8, asr lr
   18c60:	andeq	r8, r1, r8, asr lr
   18c64:	andeq	r8, r1, r8, asr lr
   18c68:	andeq	r8, r1, r8, asr lr
   18c6c:	andeq	r8, r1, r8, asr lr
   18c70:	andeq	r8, r1, r8, asr lr
   18c74:	andeq	r8, r1, r8, asr lr
   18c78:	andeq	r8, r1, r8, asr lr
   18c7c:	andeq	r8, r1, r8, asr lr
   18c80:	andeq	r8, r1, r8, asr lr
   18c84:	andeq	r8, r1, r8, asr lr
   18c88:	andeq	r8, r1, r8, asr lr
   18c8c:	andeq	r8, r1, r8, asr lr
   18c90:	andeq	r8, r1, r8, asr lr
   18c94:	andeq	r8, r1, r8, asr lr
   18c98:	andeq	r8, r1, r8, asr lr
   18c9c:	andeq	r8, r1, r8, asr lr
   18ca0:	andeq	r8, r1, r8, asr lr
   18ca4:	andeq	r8, r1, r8, asr lr
   18ca8:	andeq	r8, r1, r8, asr lr
   18cac:	andeq	r8, r1, r8, asr lr
   18cb0:	andeq	r8, r1, r8, asr lr
   18cb4:	andeq	r8, r1, r8, asr lr
   18cb8:	andeq	r8, r1, r8, asr lr
   18cbc:	andeq	r8, r1, r8, ror #28
   18cc0:	andeq	r8, r1, r0, ror sp
   18cc4:	andeq	r8, r1, r8, asr lr
   18cc8:	andeq	r8, r1, r8, ror #28
   18ccc:	andeq	r8, r1, r8, asr lr
   18cd0:	andeq	r8, r1, r8, ror #28
   18cd4:	andeq	r8, r1, r8, asr lr
   18cd8:	andeq	r8, r1, r8, asr lr
   18cdc:	andeq	r8, r1, r8, asr lr
   18ce0:	andeq	r8, r1, r8, asr lr
   18ce4:	andeq	r8, r1, r8, asr lr
   18ce8:	andeq	r8, r1, r8, asr lr
   18cec:	andeq	r8, r1, r8, asr lr
   18cf0:	andeq	r8, r1, r8, asr lr
   18cf4:	andeq	r8, r1, r8, asr lr
   18cf8:	andeq	r8, r1, r8, asr lr
   18cfc:	andeq	r8, r1, r8, asr lr
   18d00:	andeq	r8, r1, r8, asr lr
   18d04:	andeq	r8, r1, r8, asr lr
   18d08:	andeq	r8, r1, r8, asr lr
   18d0c:	andeq	r8, r1, r8, asr lr
   18d10:	andeq	r8, r1, r8, asr lr
   18d14:	andeq	r8, r1, r8, asr lr
   18d18:	andeq	r8, r1, r8, asr lr
   18d1c:	andeq	r8, r1, r8, asr lr
   18d20:	andeq	r8, r1, r8, asr lr
   18d24:	andeq	r8, r1, r8, asr lr
   18d28:	andeq	r8, r1, r8, asr lr
   18d2c:	andeq	r8, r1, r8, asr lr
   18d30:	andeq	r8, r1, r8, asr lr
   18d34:	andeq	r8, r1, r8, asr lr
   18d38:	andeq	r8, r1, r8, asr lr
   18d3c:	andeq	r8, r1, ip, asr #26
   18d40:	andeq	r8, r1, r8, ror #28
   18d44:	andeq	r8, r1, ip, asr #26
   18d48:	andeq	r8, r1, r0, ror #28
   18d4c:	ldr	r3, [sp, #24]
   18d50:	mov	r6, #0
   18d54:	cmn	r3, #1
   18d58:	bne	18704 <__assert_fail@plt+0x7320>
   18d5c:	ldr	r3, [sp, #44]	; 0x2c
   18d60:	ldrb	r3, [r3, #1]
   18d64:	adds	r3, r3, #0
   18d68:	movne	r3, #1
   18d6c:	b	1870c <__assert_fail@plt+0x7328>
   18d70:	ldr	r3, [sp, #176]	; 0xb0
   18d74:	mov	r6, #0
   18d78:	cmp	r3, #2
   18d7c:	bne	1884c <__assert_fail@plt+0x7468>
   18d80:	ldr	r3, [sp, #64]	; 0x40
   18d84:	cmp	r3, #0
   18d88:	bne	195c0 <__assert_fail@plt+0x81dc>
   18d8c:	add	sl, sl, #1
   18d90:	ldr	r6, [sp, #36]	; 0x24
   18d94:	str	r3, [sp, #32]
   18d98:	mov	r4, #92	; 0x5c
   18d9c:	b	18758 <__assert_fail@plt+0x7374>
   18da0:	ldr	r3, [sp, #176]	; 0xb0
   18da4:	mov	r6, #0
   18da8:	cmp	r3, #2
   18dac:	bne	18880 <__assert_fail@plt+0x749c>
   18db0:	ldr	r3, [sp, #40]	; 0x28
   18db4:	cmp	r3, #0
   18db8:	bne	1909c <__assert_fail@plt+0x7cb8>
   18dbc:	mov	r1, r7
   18dc0:	str	r3, [sp, #32]
   18dc4:	mov	r4, #63	; 0x3f
   18dc8:	b	18724 <__assert_fail@plt+0x7340>
   18dcc:	ldr	r3, [sp, #176]	; 0xb0
   18dd0:	mov	r6, #0
   18dd4:	cmp	r3, #2
   18dd8:	bne	188d0 <__assert_fail@plt+0x74ec>
   18ddc:	ldr	r3, [sp, #64]	; 0x40
   18de0:	cmp	r3, #0
   18de4:	bne	195c0 <__assert_fail@plt+0x81dc>
   18de8:	ldr	r2, [sp, #84]	; 0x54
   18dec:	adds	r3, fp, #0
   18df0:	movne	r3, #1
   18df4:	cmp	r2, #0
   18df8:	movne	r3, #0
   18dfc:	cmp	r3, #0
   18e00:	strne	fp, [sp, #84]	; 0x54
   18e04:	movne	fp, #0
   18e08:	bne	18e38 <__assert_fail@plt+0x7a54>
   18e0c:	cmp	fp, r8
   18e10:	movhi	r3, #39	; 0x27
   18e14:	strbhi	r3, [r9, r8]
   18e18:	add	r3, r8, #1
   18e1c:	cmp	fp, r3
   18e20:	movhi	r2, #92	; 0x5c
   18e24:	strbhi	r2, [r9, r3]
   18e28:	add	r3, r8, #2
   18e2c:	cmp	fp, r3
   18e30:	movhi	r2, #39	; 0x27
   18e34:	strbhi	r2, [r9, r3]
   18e38:	ldr	r3, [sp, #64]	; 0x40
   18e3c:	add	r8, r8, #3
   18e40:	mov	r1, r7
   18e44:	str	r7, [sp, #32]
   18e48:	str	r7, [sp, #76]	; 0x4c
   18e4c:	str	r3, [sp, #36]	; 0x24
   18e50:	mov	r4, #39	; 0x27
   18e54:	b	18724 <__assert_fail@plt+0x7340>
   18e58:	mov	r6, #0
   18e5c:	b	188e8 <__assert_fail@plt+0x7504>
   18e60:	mov	r6, #0
   18e64:	b	18adc <__assert_fail@plt+0x76f8>
   18e68:	mov	r6, #0
   18e6c:	b	18afc <__assert_fail@plt+0x7718>
   18e70:	str	r7, [sp, #32]
   18e74:	mov	r6, #0
   18e78:	b	18b04 <__assert_fail@plt+0x7720>
   18e7c:	mov	r6, #0
   18e80:	b	18b2c <__assert_fail@plt+0x7748>
   18e84:	mov	r6, #0
   18e88:	b	188f8 <__assert_fail@plt+0x7514>
   18e8c:	mov	r6, #0
   18e90:	b	189c0 <__assert_fail@plt+0x75dc>
   18e94:	mov	r6, #0
   18e98:	b	18990 <__assert_fail@plt+0x75ac>
   18e9c:	mov	r6, #0
   18ea0:	mov	r3, #116	; 0x74
   18ea4:	b	18998 <__assert_fail@plt+0x75b4>
   18ea8:	mov	r6, #0
   18eac:	b	189d4 <__assert_fail@plt+0x75f0>
   18eb0:	mov	r6, #0
   18eb4:	b	189e8 <__assert_fail@plt+0x7604>
   18eb8:	ldr	r3, [sp, #56]	; 0x38
   18ebc:	mov	r6, #0
   18ec0:	cmp	r3, #0
   18ec4:	bne	18a08 <__assert_fail@plt+0x7624>
   18ec8:	ldr	r3, [sp, #96]	; 0x60
   18ecc:	cmp	r3, #0
   18ed0:	addne	sl, sl, #1
   18ed4:	bne	1827c <__assert_fail@plt+0x6e98>
   18ed8:	ldr	r1, [sp, #52]	; 0x34
   18edc:	str	r3, [sp, #32]
   18ee0:	mov	r4, r3
   18ee4:	b	18724 <__assert_fail@plt+0x7340>
   18ee8:	mov	r6, #0
   18eec:	ldr	r3, [sp, #80]	; 0x50
   18ef0:	cmp	r3, #1
   18ef4:	bne	190e4 <__assert_fail@plt+0x7d00>
   18ef8:	bl	1127c <__ctype_b_loc@plt>
   18efc:	ldr	r2, [sp, #80]	; 0x50
   18f00:	sxth	r3, r4
   18f04:	mov	r1, r2
   18f08:	lsl	r3, r3, #1
   18f0c:	ldr	r2, [r0]
   18f10:	ldrh	r3, [r2, r3]
   18f14:	and	r3, r3, #16384	; 0x4000
   18f18:	cmp	r3, #0
   18f1c:	movne	r3, #1
   18f20:	moveq	r3, #0
   18f24:	str	r3, [sp, #32]
   18f28:	moveq	r3, #1
   18f2c:	movne	r3, #0
   18f30:	ldr	r2, [sp, #56]	; 0x38
   18f34:	and	r3, r3, r2
   18f38:	ands	r3, r3, #255	; 0xff
   18f3c:	beq	18b10 <__assert_fail@plt+0x772c>
   18f40:	add	r1, sl, r1
   18f44:	mov	r0, #0
   18f48:	ldr	r7, [sp, #40]	; 0x28
   18f4c:	ldr	r2, [sp, #36]	; 0x24
   18f50:	ldr	lr, [sp, #52]	; 0x34
   18f54:	b	19004 <__assert_fail@plt+0x7c20>
   18f58:	cmp	r7, #0
   18f5c:	bne	19358 <__assert_fail@plt+0x7f74>
   18f60:	eor	r0, r2, #1
   18f64:	ands	r0, lr, r0
   18f68:	beq	18fa0 <__assert_fail@plt+0x7bbc>
   18f6c:	cmp	fp, r8
   18f70:	movhi	r2, #39	; 0x27
   18f74:	strbhi	r2, [r9, r8]
   18f78:	add	r2, r8, #1
   18f7c:	cmp	fp, r2
   18f80:	movhi	ip, #36	; 0x24
   18f84:	strbhi	ip, [r9, r2]
   18f88:	add	r2, r8, #2
   18f8c:	cmp	fp, r2
   18f90:	movhi	ip, #39	; 0x27
   18f94:	strbhi	ip, [r9, r2]
   18f98:	add	r8, r8, #3
   18f9c:	mov	r2, r0
   18fa0:	cmp	fp, r8
   18fa4:	movhi	r0, #92	; 0x5c
   18fa8:	strbhi	r0, [r9, r8]
   18fac:	add	r0, r8, #1
   18fb0:	cmp	fp, r0
   18fb4:	lsrhi	ip, r4, #6
   18fb8:	addhi	ip, ip, #48	; 0x30
   18fbc:	strbhi	ip, [r9, r0]
   18fc0:	add	ip, r8, #2
   18fc4:	cmp	fp, ip
   18fc8:	lsrhi	r0, r4, #3
   18fcc:	andhi	r0, r0, #7
   18fd0:	addhi	r0, r0, #48	; 0x30
   18fd4:	add	sl, sl, #1
   18fd8:	strbhi	r0, [r9, ip]
   18fdc:	and	r4, r4, #7
   18fe0:	cmp	sl, r1
   18fe4:	add	r4, r4, #48	; 0x30
   18fe8:	add	r8, r8, #3
   18fec:	bcs	19370 <__assert_fail@plt+0x7f8c>
   18ff0:	mov	r0, r3
   18ff4:	cmp	fp, r8
   18ff8:	strbhi	r4, [r9, r8]
   18ffc:	ldrb	r4, [r5, #1]!
   19000:	add	r8, r8, #1
   19004:	cmp	r3, #0
   19008:	bne	18f58 <__assert_fail@plt+0x7b74>
   1900c:	cmp	r6, #0
   19010:	bne	190b4 <__assert_fail@plt+0x7cd0>
   19014:	eor	r6, r0, #1
   19018:	and	r6, r6, r2
   1901c:	add	sl, sl, #1
   19020:	cmp	r1, sl
   19024:	uxtb	r6, r6
   19028:	bls	190dc <__assert_fail@plt+0x7cf8>
   1902c:	cmp	r6, #0
   19030:	beq	18ff4 <__assert_fail@plt+0x7c10>
   19034:	cmp	fp, r8
   19038:	movhi	r2, #39	; 0x27
   1903c:	strbhi	r2, [r9, r8]
   19040:	add	r2, r8, #1
   19044:	cmp	fp, r2
   19048:	movhi	ip, #39	; 0x27
   1904c:	strbhi	ip, [r9, r2]
   19050:	add	r8, r8, #2
   19054:	mov	r6, r3
   19058:	mov	r2, r3
   1905c:	b	18ff4 <__assert_fail@plt+0x7c10>
   19060:	ldr	r3, [sp, #184]	; 0xb8
   19064:	cmp	r3, #0
   19068:	beq	18740 <__assert_fail@plt+0x735c>
   1906c:	lsr	r2, r4, #5
   19070:	mov	r0, r3
   19074:	uxtb	r2, r2
   19078:	and	r3, r4, #31
   1907c:	ldr	r2, [r0, r2, lsl #2]
   19080:	lsr	r3, r2, r3
   19084:	tst	r3, #1
   19088:	beq	18740 <__assert_fail@plt+0x735c>
   1908c:	ldr	r3, [sp, #40]	; 0x28
   19090:	cmp	r3, #0
   19094:	beq	1892c <__assert_fail@plt+0x7548>
   19098:	mov	r3, r1
   1909c:	str	r3, [sp, #64]	; 0x40
   190a0:	mov	sl, r9
   190a4:	ldr	r3, [sp, #56]	; 0x38
   190a8:	mov	r9, fp
   190ac:	ldr	r2, [sp, #64]	; 0x40
   190b0:	b	192a0 <__assert_fail@plt+0x7ebc>
   190b4:	cmp	fp, r8
   190b8:	eor	r6, r0, #1
   190bc:	movhi	ip, #92	; 0x5c
   190c0:	and	r6, r6, r2
   190c4:	add	sl, sl, #1
   190c8:	strbhi	ip, [r9, r8]
   190cc:	cmp	r1, sl
   190d0:	add	r8, r8, #1
   190d4:	uxtb	r6, r6
   190d8:	bhi	1902c <__assert_fail@plt+0x7c48>
   190dc:	str	r2, [sp, #36]	; 0x24
   190e0:	b	18758 <__assert_fail@plt+0x7374>
   190e4:	ldr	r3, [sp, #24]
   190e8:	cmn	r3, #1
   190ec:	mov	r3, #0
   190f0:	str	r3, [sp, #128]	; 0x80
   190f4:	str	r3, [sp, #132]	; 0x84
   190f8:	beq	193ec <__assert_fail@plt+0x8008>
   190fc:	mov	r2, r7
   19100:	mov	r3, #0
   19104:	str	r7, [sp, #104]	; 0x68
   19108:	str	r5, [sp, #116]	; 0x74
   1910c:	mov	r7, r3
   19110:	mov	r5, r2
   19114:	str	r4, [sp, #32]
   19118:	str	r6, [sp, #108]	; 0x6c
   1911c:	str	r8, [sp, #112]	; 0x70
   19120:	ldr	r3, [sp, #44]	; 0x2c
   19124:	add	r6, sl, r7
   19128:	add	r4, r3, r6
   1912c:	ldr	r3, [sp, #24]
   19130:	mov	r1, r4
   19134:	sub	r2, r3, r6
   19138:	add	r0, sp, #124	; 0x7c
   1913c:	add	r3, sp, #128	; 0x80
   19140:	bl	1ffa8 <__assert_fail@plt+0xebc4>
   19144:	subs	r8, r0, #0
   19148:	beq	194d0 <__assert_fail@plt+0x80ec>
   1914c:	cmn	r8, #1
   19150:	beq	194a8 <__assert_fail@plt+0x80c4>
   19154:	cmn	r8, #2
   19158:	beq	19440 <__assert_fail@plt+0x805c>
   1915c:	ldr	r3, [sp, #64]	; 0x40
   19160:	cmp	r3, #0
   19164:	beq	19224 <__assert_fail@plt+0x7e40>
   19168:	cmp	r8, #1
   1916c:	beq	19224 <__assert_fail@plt+0x7e40>
   19170:	sub	r3, r8, #1
   19174:	add	r6, r3, r6
   19178:	ldr	r3, [sp, #44]	; 0x2c
   1917c:	add	r6, r3, r6
   19180:	ldrb	r3, [r4, #1]!
   19184:	sub	r3, r3, #91	; 0x5b
   19188:	cmp	r3, #33	; 0x21
   1918c:	ldrls	pc, [pc, r3, lsl #2]
   19190:	b	1921c <__assert_fail@plt+0x7e38>
   19194:	andeq	r9, r1, r8, lsl #5
   19198:	andeq	r9, r1, r8, lsl #5
   1919c:	andeq	r9, r1, ip, lsl r2
   191a0:	andeq	r9, r1, r8, lsl #5
   191a4:	andeq	r9, r1, ip, lsl r2
   191a8:	andeq	r9, r1, r8, lsl #5
   191ac:	andeq	r9, r1, ip, lsl r2
   191b0:	andeq	r9, r1, ip, lsl r2
   191b4:	andeq	r9, r1, ip, lsl r2
   191b8:	andeq	r9, r1, ip, lsl r2
   191bc:	andeq	r9, r1, ip, lsl r2
   191c0:	andeq	r9, r1, ip, lsl r2
   191c4:	andeq	r9, r1, ip, lsl r2
   191c8:	andeq	r9, r1, ip, lsl r2
   191cc:	andeq	r9, r1, ip, lsl r2
   191d0:	andeq	r9, r1, ip, lsl r2
   191d4:	andeq	r9, r1, ip, lsl r2
   191d8:	andeq	r9, r1, ip, lsl r2
   191dc:	andeq	r9, r1, ip, lsl r2
   191e0:	andeq	r9, r1, ip, lsl r2
   191e4:	andeq	r9, r1, ip, lsl r2
   191e8:	andeq	r9, r1, ip, lsl r2
   191ec:	andeq	r9, r1, ip, lsl r2
   191f0:	andeq	r9, r1, ip, lsl r2
   191f4:	andeq	r9, r1, ip, lsl r2
   191f8:	andeq	r9, r1, ip, lsl r2
   191fc:	andeq	r9, r1, ip, lsl r2
   19200:	andeq	r9, r1, ip, lsl r2
   19204:	andeq	r9, r1, ip, lsl r2
   19208:	andeq	r9, r1, ip, lsl r2
   1920c:	andeq	r9, r1, ip, lsl r2
   19210:	andeq	r9, r1, ip, lsl r2
   19214:	andeq	r9, r1, ip, lsl r2
   19218:	andeq	r9, r1, r8, lsl #5
   1921c:	cmp	r6, r4
   19220:	bne	19180 <__assert_fail@plt+0x7d9c>
   19224:	ldr	r0, [sp, #124]	; 0x7c
   19228:	bl	111a4 <iswprint@plt>
   1922c:	add	r7, r7, r8
   19230:	cmp	r0, #0
   19234:	add	r0, sp, #128	; 0x80
   19238:	moveq	r5, #0
   1923c:	bl	11144 <mbsinit@plt>
   19240:	cmp	r0, #0
   19244:	beq	19120 <__assert_fail@plt+0x7d3c>
   19248:	ldr	r4, [sp, #32]
   1924c:	str	r5, [sp, #32]
   19250:	ldr	r3, [sp, #32]
   19254:	mov	r1, r7
   19258:	eor	r3, r3, #1
   1925c:	ldr	r7, [sp, #104]	; 0x68
   19260:	ldr	r6, [sp, #108]	; 0x6c
   19264:	ldr	r8, [sp, #112]	; 0x70
   19268:	ldr	r5, [sp, #116]	; 0x74
   1926c:	uxtb	r3, r3
   19270:	cmp	r1, #1
   19274:	bls	18f30 <__assert_fail@plt+0x7b4c>
   19278:	ldr	r2, [sp, #56]	; 0x38
   1927c:	and	r3, r3, r2
   19280:	uxtb	r3, r3
   19284:	b	18f40 <__assert_fail@plt+0x7b5c>
   19288:	mov	r3, #2
   1928c:	str	r3, [sp, #176]	; 0xb0
   19290:	ldr	r2, [sp, #64]	; 0x40
   19294:	ldr	r3, [sp, #56]	; 0x38
   19298:	mov	sl, r9
   1929c:	mov	r9, fp
   192a0:	and	r3, r3, r2
   192a4:	tst	r3, #255	; 0xff
   192a8:	ldr	r3, [sp, #176]	; 0xb0
   192ac:	movne	r3, #4
   192b0:	str	r3, [sp, #176]	; 0xb0
   192b4:	ldr	r3, [sp, #180]	; 0xb4
   192b8:	mov	ip, #0
   192bc:	bic	r3, r3, #2
   192c0:	str	r3, [sp, #4]
   192c4:	ldr	r3, [sp, #192]	; 0xc0
   192c8:	ldr	r2, [sp, #44]	; 0x2c
   192cc:	str	r3, [sp, #16]
   192d0:	ldr	r3, [sp, #188]	; 0xbc
   192d4:	mov	r1, r9
   192d8:	str	r3, [sp, #12]
   192dc:	ldr	r3, [sp, #176]	; 0xb0
   192e0:	mov	r0, sl
   192e4:	str	r3, [sp]
   192e8:	str	ip, [sp, #8]
   192ec:	ldr	r3, [sp, #24]
   192f0:	bl	18150 <__assert_fail@plt+0x6d6c>
   192f4:	mov	fp, r0
   192f8:	mov	r0, fp
   192fc:	add	sp, sp, #140	; 0x8c
   19300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19304:	mov	r4, #92	; 0x5c
   19308:	mov	r1, #0
   1930c:	mov	r3, r4
   19310:	b	18904 <__assert_fail@plt+0x7520>
   19314:	mov	r3, #0
   19318:	ldr	r1, [sp, #52]	; 0x34
   1931c:	str	r3, [sp, #32]
   19320:	mov	r4, #63	; 0x3f
   19324:	b	18724 <__assert_fail@plt+0x7340>
   19328:	cmp	fp, #0
   1932c:	beq	19388 <__assert_fail@plt+0x7fa4>
   19330:	mov	r3, #39	; 0x27
   19334:	strb	r3, [r9]
   19338:	mov	r3, #0
   1933c:	str	r3, [sp, #40]	; 0x28
   19340:	mov	r3, #1
   19344:	str	r3, [sp, #68]	; 0x44
   19348:	ldr	r3, [pc, #448]	; 19510 <__assert_fail@plt+0x812c>
   1934c:	mov	r8, #1
   19350:	str	r3, [sp, #72]	; 0x48
   19354:	b	18538 <__assert_fail@plt+0x7154>
   19358:	ldr	r3, [sp, #40]	; 0x28
   1935c:	mov	sl, r9
   19360:	str	r3, [sp, #56]	; 0x38
   19364:	mov	r9, fp
   19368:	ldr	r2, [sp, #64]	; 0x40
   1936c:	b	192a0 <__assert_fail@plt+0x7ebc>
   19370:	str	r2, [sp, #36]	; 0x24
   19374:	b	18788 <__assert_fail@plt+0x73a4>
   19378:	mov	r1, #0
   1937c:	str	r3, [sp, #32]
   19380:	mov	r4, #63	; 0x3f
   19384:	b	18724 <__assert_fail@plt+0x7340>
   19388:	ldr	r3, [pc, #384]	; 19510 <__assert_fail@plt+0x812c>
   1938c:	str	r3, [sp, #72]	; 0x48
   19390:	mov	r3, #0
   19394:	str	r3, [sp, #40]	; 0x28
   19398:	mov	r3, #1
   1939c:	str	r3, [sp, #68]	; 0x44
   193a0:	mov	r8, r3
   193a4:	b	18538 <__assert_fail@plt+0x7154>
   193a8:	bl	113cc <abort@plt>
   193ac:	cmp	fp, #0
   193b0:	beq	19410 <__assert_fail@plt+0x802c>
   193b4:	mov	r2, #1
   193b8:	mov	r3, #34	; 0x22
   193bc:	strb	r3, [r9]
   193c0:	mov	r8, r2
   193c4:	mov	r3, r2
   193c8:	str	r2, [sp, #68]	; 0x44
   193cc:	str	r3, [sp, #56]	; 0x38
   193d0:	ldr	r3, [pc, #316]	; 19514 <__assert_fail@plt+0x8130>
   193d4:	ldr	r1, [sp, #56]	; 0x38
   193d8:	str	r3, [sp, #72]	; 0x48
   193dc:	ldr	r2, [sp, #176]	; 0xb0
   193e0:	ldr	ip, [sp, #40]	; 0x28
   193e4:	ldr	lr, [sp, #176]	; 0xb0
   193e8:	b	1821c <__assert_fail@plt+0x6e38>
   193ec:	ldr	r0, [sp, #44]	; 0x2c
   193f0:	bl	11294 <strlen@plt>
   193f4:	str	r0, [sp, #24]
   193f8:	b	190fc <__assert_fail@plt+0x7d18>
   193fc:	mov	r7, #0
   19400:	ldr	r1, [sp, #52]	; 0x34
   19404:	str	r3, [sp, #32]
   19408:	mov	r4, #48	; 0x30
   1940c:	b	18724 <__assert_fail@plt+0x7340>
   19410:	mov	r3, #1
   19414:	str	r3, [sp, #68]	; 0x44
   19418:	mov	r8, r3
   1941c:	b	193cc <__assert_fail@plt+0x7fe8>
   19420:	mov	r3, #2
   19424:	mov	sl, r9
   19428:	str	r3, [sp, #176]	; 0xb0
   1942c:	mov	r9, fp
   19430:	ldr	r3, [sp, #56]	; 0x38
   19434:	b	192a0 <__assert_fail@plt+0x7ebc>
   19438:	ldr	r6, [sp, #48]	; 0x30
   1943c:	b	18eec <__assert_fail@plt+0x7b08>
   19440:	ldr	r0, [sp, #24]
   19444:	mov	ip, r6
   19448:	cmp	r0, ip
   1944c:	mov	r1, r7
   19450:	mov	r2, r4
   19454:	ldr	r7, [sp, #104]	; 0x68
   19458:	ldr	r4, [sp, #32]
   1945c:	ldr	r6, [sp, #108]	; 0x6c
   19460:	ldr	r8, [sp, #112]	; 0x70
   19464:	ldr	r5, [sp, #116]	; 0x74
   19468:	bls	19498 <__assert_fail@plt+0x80b4>
   1946c:	ldrb	r3, [r2]
   19470:	cmp	r3, #0
   19474:	bne	19488 <__assert_fail@plt+0x80a4>
   19478:	b	195a8 <__assert_fail@plt+0x81c4>
   1947c:	ldrb	r3, [r2, #1]!
   19480:	cmp	r3, #0
   19484:	beq	195a8 <__assert_fail@plt+0x81c4>
   19488:	add	r1, r1, #1
   1948c:	add	r3, sl, r1
   19490:	cmp	r0, r3
   19494:	bhi	1947c <__assert_fail@plt+0x8098>
   19498:	mov	r2, #0
   1949c:	mov	r3, r7
   194a0:	str	r2, [sp, #32]
   194a4:	b	19270 <__assert_fail@plt+0x7e8c>
   194a8:	mov	r1, r7
   194ac:	ldr	r7, [sp, #104]	; 0x68
   194b0:	mov	r2, #0
   194b4:	ldr	r4, [sp, #32]
   194b8:	ldr	r6, [sp, #108]	; 0x6c
   194bc:	ldr	r8, [sp, #112]	; 0x70
   194c0:	ldr	r5, [sp, #116]	; 0x74
   194c4:	mov	r3, r7
   194c8:	str	r2, [sp, #32]
   194cc:	b	19270 <__assert_fail@plt+0x7e8c>
   194d0:	mov	r3, r5
   194d4:	eor	r3, r3, #1
   194d8:	ldr	r4, [sp, #32]
   194dc:	mov	r1, r7
   194e0:	str	r5, [sp, #32]
   194e4:	ldr	r7, [sp, #104]	; 0x68
   194e8:	ldr	r6, [sp, #108]	; 0x6c
   194ec:	ldr	r8, [sp, #112]	; 0x70
   194f0:	ldr	r5, [sp, #116]	; 0x74
   194f4:	uxtb	r3, r3
   194f8:	b	19270 <__assert_fail@plt+0x7e8c>
   194fc:	mov	sl, r9
   19500:	str	r3, [sp, #56]	; 0x38
   19504:	mov	r9, fp
   19508:	ldr	r2, [sp, #64]	; 0x40
   1950c:	b	192a0 <__assert_fail@plt+0x7ebc>
   19510:	strdeq	r1, [r2], -r0
   19514:	andeq	r1, r2, ip, ror #31
   19518:	strdeq	r1, [r2], -r4
   1951c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   19520:	ldr	r2, [sp, #44]	; 0x2c
   19524:	ldrb	r1, [r2, r3]
   19528:	sub	r2, r1, #33	; 0x21
   1952c:	uxtb	r2, r2
   19530:	cmp	r2, #29
   19534:	bhi	195b4 <__assert_fail@plt+0x81d0>
   19538:	ldr	r0, [pc, #-36]	; 1951c <__assert_fail@plt+0x8138>
   1953c:	mov	ip, #1
   19540:	ands	r2, r0, ip, lsl r2
   19544:	beq	195d4 <__assert_fail@plt+0x81f0>
   19548:	ldr	r2, [sp, #40]	; 0x28
   1954c:	cmp	r2, #0
   19550:	bne	196c8 <__assert_fail@plt+0x82e4>
   19554:	add	r2, r8, #1
   19558:	cmp	fp, r8
   1955c:	strbhi	r4, [r9, r8]
   19560:	cmp	fp, r2
   19564:	movhi	r0, #34	; 0x22
   19568:	strbhi	r0, [r9, r2]
   1956c:	add	r2, r8, #2
   19570:	cmp	fp, r2
   19574:	movhi	r0, #34	; 0x22
   19578:	strbhi	r0, [r9, r2]
   1957c:	add	r2, r8, #3
   19580:	cmp	fp, r2
   19584:	mov	sl, r3
   19588:	ldr	r3, [sp, #40]	; 0x28
   1958c:	movhi	r0, #63	; 0x3f
   19590:	mov	r4, r1
   19594:	strbhi	r0, [r9, r2]
   19598:	add	r8, r8, #4
   1959c:	mov	r1, r3
   195a0:	str	r3, [sp, #32]
   195a4:	b	18724 <__assert_fail@plt+0x7340>
   195a8:	str	r3, [sp, #32]
   195ac:	mov	r3, r7
   195b0:	b	19270 <__assert_fail@plt+0x7e8c>
   195b4:	mov	r1, #0
   195b8:	str	r1, [sp, #32]
   195bc:	b	18724 <__assert_fail@plt+0x7340>
   195c0:	mov	sl, r9
   195c4:	ldr	r3, [sp, #56]	; 0x38
   195c8:	mov	r9, fp
   195cc:	ldr	r2, [sp, #64]	; 0x40
   195d0:	b	192a0 <__assert_fail@plt+0x7ebc>
   195d4:	str	r2, [sp, #32]
   195d8:	mov	r1, #0
   195dc:	b	18724 <__assert_fail@plt+0x7340>
   195e0:	ldr	r2, [sp, #76]	; 0x4c
   195e4:	mov	sl, r9
   195e8:	mov	r9, fp
   195ec:	mov	fp, r8
   195f0:	ldr	r1, [sp, #72]	; 0x48
   195f4:	cmp	r1, #0
   195f8:	moveq	r3, #0
   195fc:	andne	r3, r2, #1
   19600:	cmp	r3, #0
   19604:	beq	19630 <__assert_fail@plt+0x824c>
   19608:	ldrb	r3, [r1]
   1960c:	cmp	r3, #0
   19610:	beq	19630 <__assert_fail@plt+0x824c>
   19614:	mov	r2, r1
   19618:	cmp	r9, fp
   1961c:	strbhi	r3, [sl, fp]
   19620:	ldrb	r3, [r2, #1]!
   19624:	add	fp, fp, #1
   19628:	cmp	r3, #0
   1962c:	bne	19618 <__assert_fail@plt+0x8234>
   19630:	cmp	r9, fp
   19634:	movhi	r3, #0
   19638:	strbhi	r3, [sl, fp]
   1963c:	b	192f8 <__assert_fail@plt+0x7f14>
   19640:	ldr	r3, [sp, #192]	; 0xc0
   19644:	mov	ip, #5
   19648:	str	r3, [sp, #16]
   1964c:	ldr	r3, [sp, #188]	; 0xbc
   19650:	ldr	r2, [sp, #44]	; 0x2c
   19654:	str	r3, [sp, #12]
   19658:	ldr	r3, [sp, #184]	; 0xb8
   1965c:	ldr	r1, [sp, #84]	; 0x54
   19660:	str	r3, [sp, #8]
   19664:	ldr	r3, [sp, #180]	; 0xb4
   19668:	mov	r0, r9
   1966c:	str	r3, [sp, #4]
   19670:	str	ip, [sp]
   19674:	ldr	r3, [sp, #24]
   19678:	bl	18150 <__assert_fail@plt+0x6d6c>
   1967c:	mov	fp, r0
   19680:	b	192f8 <__assert_fail@plt+0x7f14>
   19684:	mov	sl, r9
   19688:	mov	r9, fp
   1968c:	mov	fp, r8
   19690:	b	195f0 <__assert_fail@plt+0x820c>
   19694:	ldr	r1, [sp, #176]	; 0xb0
   19698:	bl	18030 <__assert_fail@plt+0x6c4c>
   1969c:	str	r0, [sp, #192]	; 0xc0
   196a0:	b	1860c <__assert_fail@plt+0x7228>
   196a4:	ldr	r1, [sp, #176]	; 0xb0
   196a8:	bl	18030 <__assert_fail@plt+0x6c4c>
   196ac:	str	r0, [sp, #188]	; 0xbc
   196b0:	b	185ec <__assert_fail@plt+0x7208>
   196b4:	mov	sl, r9
   196b8:	mov	r2, r3
   196bc:	mov	r9, fp
   196c0:	mov	fp, r8
   196c4:	b	195f0 <__assert_fail@plt+0x820c>
   196c8:	mov	sl, r9
   196cc:	mov	r9, fp
   196d0:	b	192b4 <__assert_fail@plt+0x7ed0>
   196d4:	push	{r4, r5, r6, lr}
   196d8:	mov	r5, r0
   196dc:	bl	112c4 <__errno_location@plt>
   196e0:	cmp	r5, #0
   196e4:	mov	r1, #48	; 0x30
   196e8:	mov	r4, r0
   196ec:	ldr	r0, [pc, #16]	; 19704 <__assert_fail@plt+0x8320>
   196f0:	ldr	r6, [r4]
   196f4:	movne	r0, r5
   196f8:	bl	1d5b4 <__assert_fail@plt+0xc1d0>
   196fc:	str	r6, [r4]
   19700:	pop	{r4, r5, r6, pc}
   19704:			; <UNDEFINED> instruction: 0x000332b4
   19708:	ldr	r3, [pc, #12]	; 1971c <__assert_fail@plt+0x8338>
   1970c:	cmp	r0, #0
   19710:	moveq	r0, r3
   19714:	ldr	r0, [r0]
   19718:	bx	lr
   1971c:			; <UNDEFINED> instruction: 0x000332b4
   19720:	ldr	r3, [pc, #12]	; 19734 <__assert_fail@plt+0x8350>
   19724:	cmp	r0, #0
   19728:	moveq	r0, r3
   1972c:	str	r1, [r0]
   19730:	bx	lr
   19734:			; <UNDEFINED> instruction: 0x000332b4
   19738:	ldr	r3, [pc, #52]	; 19774 <__assert_fail@plt+0x8390>
   1973c:	cmp	r0, #0
   19740:	moveq	r0, r3
   19744:	add	r3, r0, #8
   19748:	push	{lr}		; (str lr, [sp, #-4]!)
   1974c:	lsr	lr, r1, #5
   19750:	and	r1, r1, #31
   19754:	ldr	ip, [r3, lr, lsl #2]
   19758:	lsr	r0, ip, r1
   1975c:	eor	r2, r2, r0
   19760:	and	r2, r2, #1
   19764:	and	r0, r0, #1
   19768:	eor	r1, ip, r2, lsl r1
   1976c:	str	r1, [r3, lr, lsl #2]
   19770:	pop	{pc}		; (ldr pc, [sp], #4)
   19774:			; <UNDEFINED> instruction: 0x000332b4
   19778:	ldr	r3, [pc, #16]	; 19790 <__assert_fail@plt+0x83ac>
   1977c:	cmp	r0, #0
   19780:	movne	r3, r0
   19784:	ldr	r0, [r3, #4]
   19788:	str	r1, [r3, #4]
   1978c:	bx	lr
   19790:			; <UNDEFINED> instruction: 0x000332b4
   19794:	ldr	r3, [pc, #44]	; 197c8 <__assert_fail@plt+0x83e4>
   19798:	cmp	r0, #0
   1979c:	moveq	r0, r3
   197a0:	mov	ip, #10
   197a4:	cmp	r2, #0
   197a8:	cmpne	r1, #0
   197ac:	str	ip, [r0]
   197b0:	beq	197c0 <__assert_fail@plt+0x83dc>
   197b4:	str	r1, [r0, #40]	; 0x28
   197b8:	str	r2, [r0, #44]	; 0x2c
   197bc:	bx	lr
   197c0:	push	{r4, lr}
   197c4:	bl	113cc <abort@plt>
   197c8:			; <UNDEFINED> instruction: 0x000332b4
   197cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   197d0:	sub	sp, sp, #24
   197d4:	ldr	ip, [pc, #108]	; 19848 <__assert_fail@plt+0x8464>
   197d8:	ldr	r4, [sp, #56]	; 0x38
   197dc:	mov	r9, r2
   197e0:	cmp	r4, #0
   197e4:	moveq	r4, ip
   197e8:	mov	sl, r3
   197ec:	mov	r7, r0
   197f0:	mov	r8, r1
   197f4:	bl	112c4 <__errno_location@plt>
   197f8:	ldr	r3, [r4, #44]	; 0x2c
   197fc:	mov	r1, r8
   19800:	ldr	r6, [r0]
   19804:	str	r3, [sp, #16]
   19808:	ldr	r2, [r4, #40]	; 0x28
   1980c:	add	r3, r4, #8
   19810:	str	r3, [sp, #8]
   19814:	str	r2, [sp, #12]
   19818:	ldr	r2, [r4, #4]
   1981c:	mov	r5, r0
   19820:	str	r2, [sp, #4]
   19824:	ldr	ip, [r4]
   19828:	mov	r3, sl
   1982c:	mov	r2, r9
   19830:	mov	r0, r7
   19834:	str	ip, [sp]
   19838:	bl	18150 <__assert_fail@plt+0x6d6c>
   1983c:	str	r6, [r5]
   19840:	add	sp, sp, #24
   19844:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19848:			; <UNDEFINED> instruction: 0x000332b4
   1984c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19850:	cmp	r2, #0
   19854:	sub	sp, sp, #36	; 0x24
   19858:	ldr	r4, [pc, #164]	; 19904 <__assert_fail@plt+0x8520>
   1985c:	mov	r8, r1
   19860:	movne	r4, r2
   19864:	mov	r7, r0
   19868:	bl	112c4 <__errno_location@plt>
   1986c:	ldr	r3, [r4, #44]	; 0x2c
   19870:	ldr	r5, [r4, #4]
   19874:	add	r9, r4, #8
   19878:	orr	r5, r5, #1
   1987c:	mov	r1, #0
   19880:	mov	r2, r7
   19884:	ldr	fp, [r0]
   19888:	str	r3, [sp, #16]
   1988c:	ldr	r3, [r4, #40]	; 0x28
   19890:	stmib	sp, {r5, r9}
   19894:	str	r3, [sp, #12]
   19898:	ldr	r3, [r4]
   1989c:	mov	r6, r0
   198a0:	str	r3, [sp]
   198a4:	mov	r0, r1
   198a8:	mov	r3, r8
   198ac:	bl	18150 <__assert_fail@plt+0x6d6c>
   198b0:	add	r1, r0, #1
   198b4:	mov	r0, r1
   198b8:	str	r1, [sp, #28]
   198bc:	bl	1d070 <__assert_fail@plt+0xbc8c>
   198c0:	ldr	r3, [r4, #44]	; 0x2c
   198c4:	ldr	r1, [sp, #28]
   198c8:	str	r3, [sp, #16]
   198cc:	ldr	r3, [r4, #40]	; 0x28
   198d0:	str	r5, [sp, #4]
   198d4:	str	r3, [sp, #12]
   198d8:	str	r9, [sp, #8]
   198dc:	ldr	ip, [r4]
   198e0:	mov	r3, r8
   198e4:	mov	r2, r7
   198e8:	str	ip, [sp]
   198ec:	mov	sl, r0
   198f0:	bl	18150 <__assert_fail@plt+0x6d6c>
   198f4:	mov	r0, sl
   198f8:	str	fp, [r6]
   198fc:	add	sp, sp, #36	; 0x24
   19900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19904:			; <UNDEFINED> instruction: 0x000332b4
   19908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1990c:	cmp	r3, #0
   19910:	sub	sp, sp, #44	; 0x2c
   19914:	ldr	r4, [pc, #192]	; 199dc <__assert_fail@plt+0x85f8>
   19918:	mov	r6, r2
   1991c:	movne	r4, r3
   19920:	mov	r9, r1
   19924:	mov	r8, r0
   19928:	bl	112c4 <__errno_location@plt>
   1992c:	ldr	r3, [r4, #44]	; 0x2c
   19930:	ldr	r5, [r4, #4]
   19934:	add	sl, r4, #8
   19938:	cmp	r6, #0
   1993c:	orreq	r5, r5, #1
   19940:	mov	r1, #0
   19944:	ldr	r2, [r0]
   19948:	str	r3, [sp, #16]
   1994c:	ldr	r3, [r4, #40]	; 0x28
   19950:	stmib	sp, {r5, sl}
   19954:	str	r3, [sp, #12]
   19958:	ldr	r3, [r4]
   1995c:	mov	r7, r0
   19960:	str	r2, [sp, #28]
   19964:	str	r3, [sp]
   19968:	mov	r2, r8
   1996c:	mov	r3, r9
   19970:	mov	r0, r1
   19974:	bl	18150 <__assert_fail@plt+0x6d6c>
   19978:	add	r1, r0, #1
   1997c:	mov	fp, r0
   19980:	mov	r0, r1
   19984:	str	r1, [sp, #36]	; 0x24
   19988:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1998c:	ldr	r3, [r4, #44]	; 0x2c
   19990:	mov	r2, r8
   19994:	str	r3, [sp, #16]
   19998:	ldr	r3, [r4, #40]	; 0x28
   1999c:	str	r5, [sp, #4]
   199a0:	str	r3, [sp, #12]
   199a4:	str	sl, [sp, #8]
   199a8:	ldr	ip, [r4]
   199ac:	ldr	r1, [sp, #36]	; 0x24
   199b0:	mov	r3, r9
   199b4:	str	ip, [sp]
   199b8:	str	r0, [sp, #32]
   199bc:	bl	18150 <__assert_fail@plt+0x6d6c>
   199c0:	ldr	r2, [sp, #28]
   199c4:	cmp	r6, #0
   199c8:	str	r2, [r7]
   199cc:	ldr	r0, [sp, #32]
   199d0:	strne	fp, [r6]
   199d4:	add	sp, sp, #44	; 0x2c
   199d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199dc:			; <UNDEFINED> instruction: 0x000332b4
   199e0:	push	{r4, r5, r6, r7, r8, lr}
   199e4:	ldr	r6, [pc, #116]	; 19a60 <__assert_fail@plt+0x867c>
   199e8:	ldr	r3, [r6, #4]
   199ec:	ldr	r7, [r6]
   199f0:	cmp	r3, #1
   199f4:	movgt	r5, r7
   199f8:	movgt	r4, #1
   199fc:	ble	19a1c <__assert_fail@plt+0x8638>
   19a00:	ldr	r0, [r5, #12]
   19a04:	bl	15da0 <__assert_fail@plt+0x49bc>
   19a08:	ldr	r3, [r6, #4]
   19a0c:	add	r4, r4, #1
   19a10:	cmp	r3, r4
   19a14:	add	r5, r5, #8
   19a18:	bgt	19a00 <__assert_fail@plt+0x861c>
   19a1c:	ldr	r0, [r7, #4]
   19a20:	ldr	r4, [pc, #60]	; 19a64 <__assert_fail@plt+0x8680>
   19a24:	cmp	r0, r4
   19a28:	beq	19a3c <__assert_fail@plt+0x8658>
   19a2c:	bl	15da0 <__assert_fail@plt+0x49bc>
   19a30:	mov	r3, #256	; 0x100
   19a34:	str	r4, [r6, #12]
   19a38:	str	r3, [r6, #8]
   19a3c:	ldr	r4, [pc, #36]	; 19a68 <__assert_fail@plt+0x8684>
   19a40:	cmp	r7, r4
   19a44:	beq	19a54 <__assert_fail@plt+0x8670>
   19a48:	mov	r0, r7
   19a4c:	bl	15da0 <__assert_fail@plt+0x49bc>
   19a50:	str	r4, [r6]
   19a54:	mov	r3, #1
   19a58:	str	r3, [r6, #4]
   19a5c:	pop	{r4, r5, r6, r7, r8, pc}
   19a60:	andeq	r3, r3, r8, lsl #3
   19a64:	andeq	r3, r3, r4, ror #5
   19a68:	muleq	r3, r0, r1
   19a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a70:	sub	sp, sp, #44	; 0x2c
   19a74:	mov	r5, r0
   19a78:	mov	sl, r1
   19a7c:	bl	112c4 <__errno_location@plt>
   19a80:	ldr	r4, [pc, #400]	; 19c18 <__assert_fail@plt+0x8834>
   19a84:	cmn	r5, #-2147483647	; 0x80000001
   19a88:	ldr	r6, [r4]
   19a8c:	mov	r8, r0
   19a90:	movne	r0, #0
   19a94:	moveq	r0, #1
   19a98:	ldr	r3, [r8]
   19a9c:	orrs	r0, r0, r5, lsr #31
   19aa0:	str	r3, [sp, #24]
   19aa4:	bne	19c14 <__assert_fail@plt+0x8830>
   19aa8:	ldr	r2, [r4, #4]
   19aac:	cmp	r5, r2
   19ab0:	blt	19b10 <__assert_fail@plt+0x872c>
   19ab4:	add	r7, r4, #8
   19ab8:	cmp	r6, r7
   19abc:	str	r2, [sp, #36]	; 0x24
   19ac0:	beq	19be4 <__assert_fail@plt+0x8800>
   19ac4:	mov	r3, #8
   19ac8:	sub	r2, r5, r2
   19acc:	mov	r0, r6
   19ad0:	str	r3, [sp]
   19ad4:	add	r2, r2, #1
   19ad8:	mvn	r3, #-2147483648	; 0x80000000
   19adc:	add	r1, sp, #36	; 0x24
   19ae0:	bl	1d28c <__assert_fail@plt+0xbea8>
   19ae4:	mov	r6, r0
   19ae8:	str	r0, [r4]
   19aec:	ldr	r0, [r4, #4]
   19af0:	ldr	r2, [sp, #36]	; 0x24
   19af4:	mov	r1, #0
   19af8:	sub	r2, r2, r0
   19afc:	add	r0, r6, r0, lsl #3
   19b00:	lsl	r2, r2, #3
   19b04:	bl	112e8 <memset@plt>
   19b08:	ldr	r3, [sp, #36]	; 0x24
   19b0c:	str	r3, [r4, #4]
   19b10:	ldr	r4, [pc, #260]	; 19c1c <__assert_fail@plt+0x8838>
   19b14:	add	fp, r6, r5, lsl #3
   19b18:	ldr	r9, [r6, r5, lsl #3]
   19b1c:	ldr	r0, [r4, #4]
   19b20:	ldr	r3, [r4]
   19b24:	ldr	r7, [fp, #4]
   19b28:	ldr	r1, [r4, #44]	; 0x2c
   19b2c:	ldr	r2, [r4, #40]	; 0x28
   19b30:	orr	r0, r0, #1
   19b34:	str	r3, [sp]
   19b38:	add	r3, r4, #8
   19b3c:	str	r0, [sp, #28]
   19b40:	str	r0, [sp, #4]
   19b44:	str	r1, [sp, #16]
   19b48:	str	r2, [sp, #12]
   19b4c:	str	r3, [sp, #8]
   19b50:	mov	r0, r7
   19b54:	mov	r1, r9
   19b58:	mvn	r3, #0
   19b5c:	mov	r2, sl
   19b60:	bl	18150 <__assert_fail@plt+0x6d6c>
   19b64:	cmp	r9, r0
   19b68:	bhi	19bd0 <__assert_fail@plt+0x87ec>
   19b6c:	add	r3, r4, #48	; 0x30
   19b70:	add	r9, r0, #1
   19b74:	cmp	r7, r3
   19b78:	str	r9, [r6, r5, lsl #3]
   19b7c:	beq	19b88 <__assert_fail@plt+0x87a4>
   19b80:	mov	r0, r7
   19b84:	bl	15da0 <__assert_fail@plt+0x49bc>
   19b88:	mov	r0, r9
   19b8c:	bl	1d070 <__assert_fail@plt+0xbc8c>
   19b90:	ldr	ip, [r4, #44]	; 0x2c
   19b94:	ldr	r3, [r4]
   19b98:	ldr	lr, [r4, #40]	; 0x28
   19b9c:	ldr	r4, [pc, #124]	; 19c20 <__assert_fail@plt+0x883c>
   19ba0:	mov	r2, sl
   19ba4:	mov	r1, r9
   19ba8:	str	r0, [fp, #4]
   19bac:	str	r4, [sp, #8]
   19bb0:	ldr	r4, [sp, #28]
   19bb4:	str	r3, [sp]
   19bb8:	str	r4, [sp, #4]
   19bbc:	str	ip, [sp, #16]
   19bc0:	str	lr, [sp, #12]
   19bc4:	mvn	r3, #0
   19bc8:	mov	r7, r0
   19bcc:	bl	18150 <__assert_fail@plt+0x6d6c>
   19bd0:	ldr	r3, [sp, #24]
   19bd4:	mov	r0, r7
   19bd8:	str	r3, [r8]
   19bdc:	add	sp, sp, #44	; 0x2c
   19be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19be4:	mov	r3, #8
   19be8:	sub	r2, r5, r2
   19bec:	str	r3, [sp]
   19bf0:	add	r1, sp, #36	; 0x24
   19bf4:	add	r2, r2, #1
   19bf8:	mvn	r3, #-2147483648	; 0x80000000
   19bfc:	bl	1d28c <__assert_fail@plt+0xbea8>
   19c00:	mov	r6, r0
   19c04:	ldm	r7, {r0, r1}
   19c08:	str	r6, [r4]
   19c0c:	stm	r6, {r0, r1}
   19c10:	b	19aec <__assert_fail@plt+0x8708>
   19c14:	bl	113cc <abort@plt>
   19c18:	andeq	r3, r3, r8, lsl #3
   19c1c:			; <UNDEFINED> instruction: 0x000332b4
   19c20:			; <UNDEFINED> instruction: 0x000332bc
   19c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c28:	sub	sp, sp, #52	; 0x34
   19c2c:	mov	r5, r0
   19c30:	mov	sl, r1
   19c34:	mov	fp, r2
   19c38:	bl	112c4 <__errno_location@plt>
   19c3c:	ldr	r4, [pc, #408]	; 19ddc <__assert_fail@plt+0x89f8>
   19c40:	cmn	r5, #-2147483647	; 0x80000001
   19c44:	ldr	r6, [r4]
   19c48:	mov	r8, r0
   19c4c:	movne	r0, #0
   19c50:	moveq	r0, #1
   19c54:	ldr	r3, [r8]
   19c58:	orrs	r0, r0, r5, lsr #31
   19c5c:	str	r3, [sp, #28]
   19c60:	bne	19dd8 <__assert_fail@plt+0x89f4>
   19c64:	ldr	r2, [r4, #4]
   19c68:	cmp	r5, r2
   19c6c:	blt	19ccc <__assert_fail@plt+0x88e8>
   19c70:	add	r7, r4, #8
   19c74:	cmp	r6, r7
   19c78:	str	r2, [sp, #44]	; 0x2c
   19c7c:	beq	19da8 <__assert_fail@plt+0x89c4>
   19c80:	mov	r3, #8
   19c84:	sub	r2, r5, r2
   19c88:	mov	r0, r6
   19c8c:	str	r3, [sp]
   19c90:	add	r2, r2, #1
   19c94:	mvn	r3, #-2147483648	; 0x80000000
   19c98:	add	r1, sp, #44	; 0x2c
   19c9c:	bl	1d28c <__assert_fail@plt+0xbea8>
   19ca0:	mov	r6, r0
   19ca4:	str	r0, [r4]
   19ca8:	ldr	r0, [r4, #4]
   19cac:	ldr	r2, [sp, #44]	; 0x2c
   19cb0:	mov	r1, #0
   19cb4:	sub	r2, r2, r0
   19cb8:	add	r0, r6, r0, lsl #3
   19cbc:	lsl	r2, r2, #3
   19cc0:	bl	112e8 <memset@plt>
   19cc4:	ldr	r3, [sp, #44]	; 0x2c
   19cc8:	str	r3, [r4, #4]
   19ccc:	ldr	r4, [pc, #268]	; 19de0 <__assert_fail@plt+0x89fc>
   19cd0:	add	r3, r6, r5, lsl #3
   19cd4:	str	r3, [sp, #32]
   19cd8:	ldr	r7, [r3, #4]
   19cdc:	ldr	r0, [r4, #4]
   19ce0:	ldr	r3, [r4]
   19ce4:	ldr	r9, [r6, r5, lsl #3]
   19ce8:	ldr	r1, [r4, #44]	; 0x2c
   19cec:	ldr	r2, [r4, #40]	; 0x28
   19cf0:	orr	r0, r0, #1
   19cf4:	str	r3, [sp]
   19cf8:	add	r3, r4, #8
   19cfc:	str	r0, [sp, #36]	; 0x24
   19d00:	str	r0, [sp, #4]
   19d04:	str	r1, [sp, #16]
   19d08:	str	r2, [sp, #12]
   19d0c:	str	r3, [sp, #8]
   19d10:	mov	r0, r7
   19d14:	mov	r1, r9
   19d18:	mov	r3, fp
   19d1c:	mov	r2, sl
   19d20:	bl	18150 <__assert_fail@plt+0x6d6c>
   19d24:	cmp	r9, r0
   19d28:	bhi	19d94 <__assert_fail@plt+0x89b0>
   19d2c:	add	r3, r4, #48	; 0x30
   19d30:	add	r9, r0, #1
   19d34:	cmp	r7, r3
   19d38:	str	r9, [r6, r5, lsl #3]
   19d3c:	beq	19d48 <__assert_fail@plt+0x8964>
   19d40:	mov	r0, r7
   19d44:	bl	15da0 <__assert_fail@plt+0x49bc>
   19d48:	mov	r0, r9
   19d4c:	bl	1d070 <__assert_fail@plt+0xbc8c>
   19d50:	ldr	ip, [sp, #32]
   19d54:	ldr	lr, [r4, #44]	; 0x2c
   19d58:	ldr	r5, [r4, #40]	; 0x28
   19d5c:	mov	r3, fp
   19d60:	mov	r2, sl
   19d64:	mov	r1, r9
   19d68:	str	r0, [ip, #4]
   19d6c:	ldr	ip, [r4]
   19d70:	ldr	r4, [pc, #108]	; 19de4 <__assert_fail@plt+0x8a00>
   19d74:	str	lr, [sp, #16]
   19d78:	str	r4, [sp, #8]
   19d7c:	ldr	r4, [sp, #36]	; 0x24
   19d80:	str	r5, [sp, #12]
   19d84:	str	r4, [sp, #4]
   19d88:	str	ip, [sp]
   19d8c:	mov	r7, r0
   19d90:	bl	18150 <__assert_fail@plt+0x6d6c>
   19d94:	ldr	r3, [sp, #28]
   19d98:	mov	r0, r7
   19d9c:	str	r3, [r8]
   19da0:	add	sp, sp, #52	; 0x34
   19da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19da8:	mov	r3, #8
   19dac:	sub	r2, r5, r2
   19db0:	str	r3, [sp]
   19db4:	add	r1, sp, #44	; 0x2c
   19db8:	add	r2, r2, #1
   19dbc:	mvn	r3, #-2147483648	; 0x80000000
   19dc0:	bl	1d28c <__assert_fail@plt+0xbea8>
   19dc4:	mov	r6, r0
   19dc8:	ldm	r7, {r0, r1}
   19dcc:	str	r6, [r4]
   19dd0:	stm	r6, {r0, r1}
   19dd4:	b	19ca8 <__assert_fail@plt+0x88c4>
   19dd8:	bl	113cc <abort@plt>
   19ddc:	andeq	r3, r3, r8, lsl #3
   19de0:			; <UNDEFINED> instruction: 0x000332b4
   19de4:			; <UNDEFINED> instruction: 0x000332bc
   19de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dec:	sub	sp, sp, #44	; 0x2c
   19df0:	mov	sl, r0
   19df4:	bl	112c4 <__errno_location@plt>
   19df8:	ldr	r4, [pc, #352]	; 19f60 <__assert_fail@plt+0x8b7c>
   19dfc:	ldr	r2, [r4, #4]
   19e00:	ldr	r5, [r4]
   19e04:	cmp	r2, #0
   19e08:	ldr	r3, [r0]
   19e0c:	mov	r8, r0
   19e10:	str	r3, [sp, #28]
   19e14:	bgt	19e70 <__assert_fail@plt+0x8a8c>
   19e18:	add	r6, r4, #8
   19e1c:	cmp	r5, r6
   19e20:	str	r2, [sp, #36]	; 0x24
   19e24:	beq	19f30 <__assert_fail@plt+0x8b4c>
   19e28:	mov	r3, #8
   19e2c:	mov	r0, r5
   19e30:	str	r3, [sp]
   19e34:	rsb	r2, r2, #1
   19e38:	mvn	r3, #-2147483648	; 0x80000000
   19e3c:	add	r1, sp, #36	; 0x24
   19e40:	bl	1d28c <__assert_fail@plt+0xbea8>
   19e44:	mov	r5, r0
   19e48:	str	r0, [r4]
   19e4c:	ldr	r0, [r4, #4]
   19e50:	ldr	r2, [sp, #36]	; 0x24
   19e54:	mov	r1, #0
   19e58:	sub	r2, r2, r0
   19e5c:	add	r0, r5, r0, lsl #3
   19e60:	lsl	r2, r2, #3
   19e64:	bl	112e8 <memset@plt>
   19e68:	ldr	r3, [sp, #36]	; 0x24
   19e6c:	str	r3, [r4, #4]
   19e70:	ldr	r4, [pc, #236]	; 19f64 <__assert_fail@plt+0x8b80>
   19e74:	ldr	r9, [r5]
   19e78:	ldr	r6, [r5, #4]
   19e7c:	ldr	r7, [r4, #4]
   19e80:	ldr	r1, [r4, #44]	; 0x2c
   19e84:	ldr	r2, [r4, #40]	; 0x28
   19e88:	ldr	r3, [r4]
   19e8c:	orr	r7, r7, #1
   19e90:	add	fp, r4, #8
   19e94:	str	r1, [sp, #16]
   19e98:	str	r2, [sp, #12]
   19e9c:	str	r3, [sp]
   19ea0:	str	r7, [sp, #4]
   19ea4:	str	fp, [sp, #8]
   19ea8:	mov	r1, r9
   19eac:	mov	r0, r6
   19eb0:	mvn	r3, #0
   19eb4:	mov	r2, sl
   19eb8:	bl	18150 <__assert_fail@plt+0x6d6c>
   19ebc:	cmp	r9, r0
   19ec0:	bhi	19f1c <__assert_fail@plt+0x8b38>
   19ec4:	add	r3, r4, #48	; 0x30
   19ec8:	add	r9, r0, #1
   19ecc:	cmp	r6, r3
   19ed0:	str	r9, [r5]
   19ed4:	beq	19ee0 <__assert_fail@plt+0x8afc>
   19ed8:	mov	r0, r6
   19edc:	bl	15da0 <__assert_fail@plt+0x49bc>
   19ee0:	mov	r0, r9
   19ee4:	bl	1d070 <__assert_fail@plt+0xbc8c>
   19ee8:	ldr	ip, [r4, #44]	; 0x2c
   19eec:	ldr	r3, [r4]
   19ef0:	ldr	lr, [r4, #40]	; 0x28
   19ef4:	mov	r2, sl
   19ef8:	mov	r1, r9
   19efc:	str	r0, [r5, #4]
   19f00:	str	r3, [sp]
   19f04:	stmib	sp, {r7, fp}
   19f08:	str	ip, [sp, #16]
   19f0c:	str	lr, [sp, #12]
   19f10:	mvn	r3, #0
   19f14:	mov	r6, r0
   19f18:	bl	18150 <__assert_fail@plt+0x6d6c>
   19f1c:	ldr	r3, [sp, #28]
   19f20:	mov	r0, r6
   19f24:	str	r3, [r8]
   19f28:	add	sp, sp, #44	; 0x2c
   19f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f30:	mov	r3, #8
   19f34:	str	r3, [sp]
   19f38:	add	r1, sp, #36	; 0x24
   19f3c:	rsb	r2, r2, #1
   19f40:	mvn	r3, #-2147483648	; 0x80000000
   19f44:	mov	r0, #0
   19f48:	bl	1d28c <__assert_fail@plt+0xbea8>
   19f4c:	mov	r5, r0
   19f50:	ldm	r6, {r0, r1}
   19f54:	str	r5, [r4]
   19f58:	stm	r5, {r0, r1}
   19f5c:	b	19e4c <__assert_fail@plt+0x8a68>
   19f60:	andeq	r3, r3, r8, lsl #3
   19f64:			; <UNDEFINED> instruction: 0x000332b4
   19f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f6c:	sub	sp, sp, #44	; 0x2c
   19f70:	mov	r9, r0
   19f74:	mov	sl, r1
   19f78:	bl	112c4 <__errno_location@plt>
   19f7c:	ldr	r4, [pc, #364]	; 1a0f0 <__assert_fail@plt+0x8d0c>
   19f80:	ldr	r2, [r4, #4]
   19f84:	ldr	r5, [r4]
   19f88:	cmp	r2, #0
   19f8c:	ldr	r3, [r0]
   19f90:	mov	r7, r0
   19f94:	str	r3, [sp, #24]
   19f98:	bgt	19ff4 <__assert_fail@plt+0x8c10>
   19f9c:	add	r6, r4, #8
   19fa0:	cmp	r5, r6
   19fa4:	str	r2, [sp, #36]	; 0x24
   19fa8:	beq	1a0c0 <__assert_fail@plt+0x8cdc>
   19fac:	mov	r3, #8
   19fb0:	mov	r0, r5
   19fb4:	str	r3, [sp]
   19fb8:	rsb	r2, r2, #1
   19fbc:	mvn	r3, #-2147483648	; 0x80000000
   19fc0:	add	r1, sp, #36	; 0x24
   19fc4:	bl	1d28c <__assert_fail@plt+0xbea8>
   19fc8:	mov	r5, r0
   19fcc:	str	r0, [r4]
   19fd0:	ldr	r0, [r4, #4]
   19fd4:	ldr	r2, [sp, #36]	; 0x24
   19fd8:	mov	r1, #0
   19fdc:	sub	r2, r2, r0
   19fe0:	add	r0, r5, r0, lsl #3
   19fe4:	lsl	r2, r2, #3
   19fe8:	bl	112e8 <memset@plt>
   19fec:	ldr	r3, [sp, #36]	; 0x24
   19ff0:	str	r3, [r4, #4]
   19ff4:	ldr	r4, [pc, #248]	; 1a0f4 <__assert_fail@plt+0x8d10>
   19ff8:	ldr	r8, [r5]
   19ffc:	ldr	r6, [r5, #4]
   1a000:	ldr	r0, [r4, #4]
   1a004:	ldr	r1, [r4, #44]	; 0x2c
   1a008:	ldr	r2, [r4, #40]	; 0x28
   1a00c:	ldr	r3, [r4]
   1a010:	orr	r0, r0, #1
   1a014:	add	fp, r4, #8
   1a018:	str	r0, [sp, #28]
   1a01c:	str	r0, [sp, #4]
   1a020:	str	r1, [sp, #16]
   1a024:	str	r2, [sp, #12]
   1a028:	str	r3, [sp]
   1a02c:	str	fp, [sp, #8]
   1a030:	mov	r1, r8
   1a034:	mov	r0, r6
   1a038:	mov	r3, sl
   1a03c:	mov	r2, r9
   1a040:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a044:	cmp	r8, r0
   1a048:	bhi	1a0ac <__assert_fail@plt+0x8cc8>
   1a04c:	add	r3, r4, #48	; 0x30
   1a050:	add	r8, r0, #1
   1a054:	cmp	r6, r3
   1a058:	str	r8, [r5]
   1a05c:	beq	1a068 <__assert_fail@plt+0x8c84>
   1a060:	mov	r0, r6
   1a064:	bl	15da0 <__assert_fail@plt+0x49bc>
   1a068:	mov	r0, r8
   1a06c:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1a070:	ldr	lr, [r4, #44]	; 0x2c
   1a074:	ldr	ip, [r4]
   1a078:	mov	r3, sl
   1a07c:	mov	r2, r9
   1a080:	mov	r1, r8
   1a084:	str	r0, [r5, #4]
   1a088:	ldr	r5, [r4, #40]	; 0x28
   1a08c:	ldr	r4, [sp, #28]
   1a090:	str	fp, [sp, #8]
   1a094:	str	r4, [sp, #4]
   1a098:	str	lr, [sp, #16]
   1a09c:	str	r5, [sp, #12]
   1a0a0:	str	ip, [sp]
   1a0a4:	mov	r6, r0
   1a0a8:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a0ac:	ldr	r3, [sp, #24]
   1a0b0:	mov	r0, r6
   1a0b4:	str	r3, [r7]
   1a0b8:	add	sp, sp, #44	; 0x2c
   1a0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0c0:	mov	r3, #8
   1a0c4:	str	r3, [sp]
   1a0c8:	add	r1, sp, #36	; 0x24
   1a0cc:	rsb	r2, r2, #1
   1a0d0:	mvn	r3, #-2147483648	; 0x80000000
   1a0d4:	mov	r0, #0
   1a0d8:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a0dc:	mov	r5, r0
   1a0e0:	ldm	r6, {r0, r1}
   1a0e4:	str	r5, [r4]
   1a0e8:	stm	r5, {r0, r1}
   1a0ec:	b	19fd0 <__assert_fail@plt+0x8bec>
   1a0f0:	andeq	r3, r3, r8, lsl #3
   1a0f4:			; <UNDEFINED> instruction: 0x000332b4
   1a0f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0fc:	sub	sp, sp, #132	; 0x84
   1a100:	mov	r5, r1
   1a104:	mov	r4, r0
   1a108:	mov	r9, r2
   1a10c:	add	r0, sp, #80	; 0x50
   1a110:	mov	r2, #48	; 0x30
   1a114:	mov	r1, #0
   1a118:	bl	112e8 <memset@plt>
   1a11c:	cmp	r5, #10
   1a120:	beq	1a2d8 <__assert_fail@plt+0x8ef4>
   1a124:	add	lr, sp, #80	; 0x50
   1a128:	str	r5, [sp, #80]	; 0x50
   1a12c:	ldm	lr!, {r0, r1, r2, r3}
   1a130:	add	ip, sp, #32
   1a134:	ldr	r6, [pc, #416]	; 1a2dc <__assert_fail@plt+0x8ef8>
   1a138:	stmia	ip!, {r0, r1, r2, r3}
   1a13c:	ldm	lr!, {r0, r1, r2, r3}
   1a140:	stmia	ip!, {r0, r1, r2, r3}
   1a144:	ldm	lr, {r0, r1, r2, r3}
   1a148:	stm	ip, {r0, r1, r2, r3}
   1a14c:	bl	112c4 <__errno_location@plt>
   1a150:	cmn	r4, #-2147483647	; 0x80000001
   1a154:	ldr	r5, [r6]
   1a158:	mov	r7, r0
   1a15c:	movne	r0, #0
   1a160:	moveq	r0, #1
   1a164:	ldr	r3, [r7]
   1a168:	orrs	r0, r0, r4, lsr #31
   1a16c:	str	r3, [sp, #24]
   1a170:	bne	1a2d8 <__assert_fail@plt+0x8ef4>
   1a174:	ldr	r2, [r6, #4]
   1a178:	cmp	r4, r2
   1a17c:	blt	1a1dc <__assert_fail@plt+0x8df8>
   1a180:	add	r8, r6, #8
   1a184:	cmp	r5, r8
   1a188:	str	r2, [sp, #80]	; 0x50
   1a18c:	beq	1a2a8 <__assert_fail@plt+0x8ec4>
   1a190:	mov	r3, #8
   1a194:	sub	r2, r4, r2
   1a198:	mov	r0, r5
   1a19c:	str	r3, [sp]
   1a1a0:	add	r2, r2, #1
   1a1a4:	add	r1, sp, #80	; 0x50
   1a1a8:	mvn	r3, #-2147483648	; 0x80000000
   1a1ac:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a1b0:	mov	r5, r0
   1a1b4:	str	r0, [r6]
   1a1b8:	ldr	r0, [r6, #4]
   1a1bc:	ldr	r2, [sp, #80]	; 0x50
   1a1c0:	mov	r1, #0
   1a1c4:	sub	r2, r2, r0
   1a1c8:	add	r0, r5, r0, lsl #3
   1a1cc:	lsl	r2, r2, #3
   1a1d0:	bl	112e8 <memset@plt>
   1a1d4:	ldr	r3, [sp, #80]	; 0x50
   1a1d8:	str	r3, [r6, #4]
   1a1dc:	add	fp, r5, r4, lsl #3
   1a1e0:	ldr	r1, [sp, #36]	; 0x24
   1a1e4:	ldr	r8, [r5, r4, lsl #3]
   1a1e8:	ldr	r6, [fp, #4]
   1a1ec:	ldr	r2, [sp, #72]	; 0x48
   1a1f0:	ldr	r3, [sp, #32]
   1a1f4:	ldr	ip, [sp, #76]	; 0x4c
   1a1f8:	orr	r1, r1, #1
   1a1fc:	add	sl, sp, #40	; 0x28
   1a200:	str	r1, [sp, #28]
   1a204:	str	r1, [sp, #4]
   1a208:	str	r2, [sp, #12]
   1a20c:	str	r3, [sp]
   1a210:	mov	r0, r6
   1a214:	mov	r1, r8
   1a218:	str	ip, [sp, #16]
   1a21c:	str	sl, [sp, #8]
   1a220:	mvn	r3, #0
   1a224:	mov	r2, r9
   1a228:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a22c:	cmp	r8, r0
   1a230:	bhi	1a294 <__assert_fail@plt+0x8eb0>
   1a234:	ldr	r3, [pc, #164]	; 1a2e0 <__assert_fail@plt+0x8efc>
   1a238:	add	r8, r0, #1
   1a23c:	cmp	r6, r3
   1a240:	str	r8, [r5, r4, lsl #3]
   1a244:	beq	1a250 <__assert_fail@plt+0x8e6c>
   1a248:	mov	r0, r6
   1a24c:	bl	15da0 <__assert_fail@plt+0x49bc>
   1a250:	mov	r0, r8
   1a254:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1a258:	ldr	lr, [sp, #76]	; 0x4c
   1a25c:	ldr	r3, [sp, #32]
   1a260:	ldr	ip, [sp, #72]	; 0x48
   1a264:	ldr	r4, [sp, #28]
   1a268:	mov	r2, r9
   1a26c:	mov	r1, r8
   1a270:	str	r0, [fp, #4]
   1a274:	str	r3, [sp]
   1a278:	str	sl, [sp, #8]
   1a27c:	str	r4, [sp, #4]
   1a280:	str	lr, [sp, #16]
   1a284:	str	ip, [sp, #12]
   1a288:	mvn	r3, #0
   1a28c:	mov	r6, r0
   1a290:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a294:	ldr	r3, [sp, #24]
   1a298:	mov	r0, r6
   1a29c:	str	r3, [r7]
   1a2a0:	add	sp, sp, #132	; 0x84
   1a2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2a8:	mov	r3, #8
   1a2ac:	sub	r2, r4, r2
   1a2b0:	add	r1, sp, #80	; 0x50
   1a2b4:	str	r3, [sp]
   1a2b8:	add	r2, r2, #1
   1a2bc:	mvn	r3, #-2147483648	; 0x80000000
   1a2c0:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a2c4:	mov	r5, r0
   1a2c8:	ldm	r8, {r0, r1}
   1a2cc:	str	r5, [r6]
   1a2d0:	stm	r5, {r0, r1}
   1a2d4:	b	1a1b8 <__assert_fail@plt+0x8dd4>
   1a2d8:	bl	113cc <abort@plt>
   1a2dc:	andeq	r3, r3, r8, lsl #3
   1a2e0:	andeq	r3, r3, r4, ror #5
   1a2e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2e8:	sub	sp, sp, #132	; 0x84
   1a2ec:	mov	r5, r1
   1a2f0:	mov	r4, r0
   1a2f4:	mov	r9, r2
   1a2f8:	add	r0, sp, #80	; 0x50
   1a2fc:	mov	r2, #48	; 0x30
   1a300:	mov	r1, #0
   1a304:	mov	sl, r3
   1a308:	bl	112e8 <memset@plt>
   1a30c:	cmp	r5, #10
   1a310:	beq	1a4cc <__assert_fail@plt+0x90e8>
   1a314:	add	lr, sp, #80	; 0x50
   1a318:	str	r5, [sp, #80]	; 0x50
   1a31c:	ldm	lr!, {r0, r1, r2, r3}
   1a320:	add	ip, sp, #32
   1a324:	ldr	r6, [pc, #420]	; 1a4d0 <__assert_fail@plt+0x90ec>
   1a328:	stmia	ip!, {r0, r1, r2, r3}
   1a32c:	ldm	lr!, {r0, r1, r2, r3}
   1a330:	stmia	ip!, {r0, r1, r2, r3}
   1a334:	ldm	lr, {r0, r1, r2, r3}
   1a338:	stm	ip, {r0, r1, r2, r3}
   1a33c:	bl	112c4 <__errno_location@plt>
   1a340:	cmn	r4, #-2147483647	; 0x80000001
   1a344:	ldr	r5, [r6]
   1a348:	mov	r7, r0
   1a34c:	movne	r0, #0
   1a350:	moveq	r0, #1
   1a354:	ldr	r3, [r7]
   1a358:	orrs	r0, r0, r4, lsr #31
   1a35c:	str	r3, [sp, #24]
   1a360:	bne	1a4cc <__assert_fail@plt+0x90e8>
   1a364:	ldr	r2, [r6, #4]
   1a368:	cmp	r4, r2
   1a36c:	blt	1a3cc <__assert_fail@plt+0x8fe8>
   1a370:	add	r8, r6, #8
   1a374:	cmp	r5, r8
   1a378:	str	r2, [sp, #80]	; 0x50
   1a37c:	beq	1a49c <__assert_fail@plt+0x90b8>
   1a380:	mov	r3, #8
   1a384:	sub	r2, r4, r2
   1a388:	mov	r0, r5
   1a38c:	str	r3, [sp]
   1a390:	add	r2, r2, #1
   1a394:	add	r1, sp, #80	; 0x50
   1a398:	mvn	r3, #-2147483648	; 0x80000000
   1a39c:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a3a0:	mov	r5, r0
   1a3a4:	str	r0, [r6]
   1a3a8:	ldr	r0, [r6, #4]
   1a3ac:	ldr	r2, [sp, #80]	; 0x50
   1a3b0:	mov	r1, #0
   1a3b4:	sub	r2, r2, r0
   1a3b8:	add	r0, r5, r0, lsl #3
   1a3bc:	lsl	r2, r2, #3
   1a3c0:	bl	112e8 <memset@plt>
   1a3c4:	ldr	r3, [sp, #80]	; 0x50
   1a3c8:	str	r3, [r6, #4]
   1a3cc:	add	fp, r5, r4, lsl #3
   1a3d0:	ldr	r3, [sp, #32]
   1a3d4:	ldr	r1, [sp, #36]	; 0x24
   1a3d8:	ldr	r8, [r5, r4, lsl #3]
   1a3dc:	ldr	r6, [fp, #4]
   1a3e0:	ldr	r2, [sp, #72]	; 0x48
   1a3e4:	ldr	ip, [sp, #76]	; 0x4c
   1a3e8:	orr	r1, r1, #1
   1a3ec:	str	r3, [sp]
   1a3f0:	add	r3, sp, #40	; 0x28
   1a3f4:	str	r1, [sp, #28]
   1a3f8:	str	r1, [sp, #4]
   1a3fc:	str	r2, [sp, #12]
   1a400:	str	r3, [sp, #8]
   1a404:	mov	r0, r6
   1a408:	mov	r1, r8
   1a40c:	str	ip, [sp, #16]
   1a410:	mov	r3, sl
   1a414:	mov	r2, r9
   1a418:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a41c:	cmp	r8, r0
   1a420:	bhi	1a488 <__assert_fail@plt+0x90a4>
   1a424:	ldr	r3, [pc, #168]	; 1a4d4 <__assert_fail@plt+0x90f0>
   1a428:	add	r8, r0, #1
   1a42c:	cmp	r6, r3
   1a430:	str	r8, [r5, r4, lsl #3]
   1a434:	beq	1a440 <__assert_fail@plt+0x905c>
   1a438:	mov	r0, r6
   1a43c:	bl	15da0 <__assert_fail@plt+0x49bc>
   1a440:	mov	r0, r8
   1a444:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1a448:	add	lr, sp, #40	; 0x28
   1a44c:	ldr	ip, [sp, #76]	; 0x4c
   1a450:	ldr	r4, [sp, #72]	; 0x48
   1a454:	ldr	r5, [sp, #28]
   1a458:	mov	r3, sl
   1a45c:	mov	r2, r9
   1a460:	mov	r1, r8
   1a464:	str	r0, [fp, #4]
   1a468:	str	lr, [sp, #8]
   1a46c:	ldr	lr, [sp, #32]
   1a470:	str	r5, [sp, #4]
   1a474:	str	ip, [sp, #16]
   1a478:	str	r4, [sp, #12]
   1a47c:	str	lr, [sp]
   1a480:	mov	r6, r0
   1a484:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a488:	ldr	r3, [sp, #24]
   1a48c:	mov	r0, r6
   1a490:	str	r3, [r7]
   1a494:	add	sp, sp, #132	; 0x84
   1a498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a49c:	mov	r3, #8
   1a4a0:	sub	r2, r4, r2
   1a4a4:	add	r1, sp, #80	; 0x50
   1a4a8:	str	r3, [sp]
   1a4ac:	add	r2, r2, #1
   1a4b0:	mvn	r3, #-2147483648	; 0x80000000
   1a4b4:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a4b8:	mov	r5, r0
   1a4bc:	ldm	r8, {r0, r1}
   1a4c0:	str	r5, [r6]
   1a4c4:	stm	r5, {r0, r1}
   1a4c8:	b	1a3a8 <__assert_fail@plt+0x8fc4>
   1a4cc:	bl	113cc <abort@plt>
   1a4d0:	andeq	r3, r3, r8, lsl #3
   1a4d4:	andeq	r3, r3, r4, ror #5
   1a4d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4dc:	sub	sp, sp, #124	; 0x7c
   1a4e0:	mov	r4, r0
   1a4e4:	mov	r9, r1
   1a4e8:	add	r0, sp, #72	; 0x48
   1a4ec:	mov	r2, #48	; 0x30
   1a4f0:	mov	r1, #0
   1a4f4:	bl	112e8 <memset@plt>
   1a4f8:	cmp	r4, #10
   1a4fc:	beq	1a688 <__assert_fail@plt+0x92a4>
   1a500:	add	lr, sp, #72	; 0x48
   1a504:	str	r4, [sp, #72]	; 0x48
   1a508:	ldm	lr!, {r0, r1, r2, r3}
   1a50c:	add	ip, sp, #24
   1a510:	ldr	r5, [pc, #372]	; 1a68c <__assert_fail@plt+0x92a8>
   1a514:	stmia	ip!, {r0, r1, r2, r3}
   1a518:	ldm	lr!, {r0, r1, r2, r3}
   1a51c:	stmia	ip!, {r0, r1, r2, r3}
   1a520:	ldm	lr, {r0, r1, r2, r3}
   1a524:	stm	ip, {r0, r1, r2, r3}
   1a528:	bl	112c4 <__errno_location@plt>
   1a52c:	ldr	r2, [r5, #4]
   1a530:	ldr	r4, [r5]
   1a534:	cmp	r2, #0
   1a538:	mov	r7, r0
   1a53c:	ldr	fp, [r0]
   1a540:	bgt	1a59c <__assert_fail@plt+0x91b8>
   1a544:	add	r6, r5, #8
   1a548:	cmp	r4, r6
   1a54c:	str	r2, [sp, #72]	; 0x48
   1a550:	beq	1a658 <__assert_fail@plt+0x9274>
   1a554:	mov	r3, #8
   1a558:	mov	r0, r4
   1a55c:	str	r3, [sp]
   1a560:	rsb	r2, r2, #1
   1a564:	add	r1, sp, #72	; 0x48
   1a568:	mvn	r3, #-2147483648	; 0x80000000
   1a56c:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a570:	mov	r4, r0
   1a574:	str	r0, [r5]
   1a578:	ldr	r0, [r5, #4]
   1a57c:	ldr	r2, [sp, #72]	; 0x48
   1a580:	mov	r1, #0
   1a584:	sub	r2, r2, r0
   1a588:	add	r0, r4, r0, lsl #3
   1a58c:	lsl	r2, r2, #3
   1a590:	bl	112e8 <memset@plt>
   1a594:	ldr	r3, [sp, #72]	; 0x48
   1a598:	str	r3, [r5, #4]
   1a59c:	ldr	r6, [sp, #28]
   1a5a0:	ldr	r8, [r4]
   1a5a4:	ldr	r5, [r4, #4]
   1a5a8:	ldr	r2, [sp, #64]	; 0x40
   1a5ac:	ldr	r3, [sp, #24]
   1a5b0:	ldr	ip, [sp, #68]	; 0x44
   1a5b4:	orr	r6, r6, #1
   1a5b8:	add	sl, sp, #32
   1a5bc:	str	r2, [sp, #12]
   1a5c0:	str	r3, [sp]
   1a5c4:	str	r6, [sp, #4]
   1a5c8:	mov	r1, r8
   1a5cc:	mov	r0, r5
   1a5d0:	str	ip, [sp, #16]
   1a5d4:	str	sl, [sp, #8]
   1a5d8:	mvn	r3, #0
   1a5dc:	mov	r2, r9
   1a5e0:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a5e4:	cmp	r8, r0
   1a5e8:	bhi	1a648 <__assert_fail@plt+0x9264>
   1a5ec:	ldr	r3, [pc, #156]	; 1a690 <__assert_fail@plt+0x92ac>
   1a5f0:	add	r8, r0, #1
   1a5f4:	cmp	r5, r3
   1a5f8:	str	r8, [r4]
   1a5fc:	beq	1a608 <__assert_fail@plt+0x9224>
   1a600:	mov	r0, r5
   1a604:	bl	15da0 <__assert_fail@plt+0x49bc>
   1a608:	mov	r0, r8
   1a60c:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1a610:	ldr	lr, [sp, #68]	; 0x44
   1a614:	ldr	r3, [sp, #24]
   1a618:	ldr	ip, [sp, #64]	; 0x40
   1a61c:	mov	r2, r9
   1a620:	mov	r1, r8
   1a624:	str	r0, [r4, #4]
   1a628:	str	r3, [sp]
   1a62c:	str	sl, [sp, #8]
   1a630:	str	r6, [sp, #4]
   1a634:	str	lr, [sp, #16]
   1a638:	str	ip, [sp, #12]
   1a63c:	mvn	r3, #0
   1a640:	mov	r5, r0
   1a644:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a648:	mov	r0, r5
   1a64c:	str	fp, [r7]
   1a650:	add	sp, sp, #124	; 0x7c
   1a654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a658:	mov	r3, #8
   1a65c:	add	r1, sp, #72	; 0x48
   1a660:	str	r3, [sp]
   1a664:	rsb	r2, r2, #1
   1a668:	mvn	r3, #-2147483648	; 0x80000000
   1a66c:	mov	r0, #0
   1a670:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a674:	mov	r4, r0
   1a678:	ldm	r6, {r0, r1}
   1a67c:	str	r4, [r5]
   1a680:	stm	r4, {r0, r1}
   1a684:	b	1a578 <__assert_fail@plt+0x9194>
   1a688:	bl	113cc <abort@plt>
   1a68c:	andeq	r3, r3, r8, lsl #3
   1a690:	andeq	r3, r3, r4, ror #5
   1a694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a698:	sub	sp, sp, #132	; 0x84
   1a69c:	mov	r4, r0
   1a6a0:	mov	r9, r1
   1a6a4:	mov	sl, r2
   1a6a8:	add	r0, sp, #80	; 0x50
   1a6ac:	mov	r2, #48	; 0x30
   1a6b0:	mov	r1, #0
   1a6b4:	bl	112e8 <memset@plt>
   1a6b8:	cmp	r4, #10
   1a6bc:	beq	1a850 <__assert_fail@plt+0x946c>
   1a6c0:	add	lr, sp, #80	; 0x50
   1a6c4:	str	r4, [sp, #80]	; 0x50
   1a6c8:	ldm	lr!, {r0, r1, r2, r3}
   1a6cc:	add	ip, sp, #32
   1a6d0:	ldr	r5, [pc, #380]	; 1a854 <__assert_fail@plt+0x9470>
   1a6d4:	stmia	ip!, {r0, r1, r2, r3}
   1a6d8:	ldm	lr!, {r0, r1, r2, r3}
   1a6dc:	stmia	ip!, {r0, r1, r2, r3}
   1a6e0:	ldm	lr, {r0, r1, r2, r3}
   1a6e4:	stm	ip, {r0, r1, r2, r3}
   1a6e8:	bl	112c4 <__errno_location@plt>
   1a6ec:	ldr	r2, [r5, #4]
   1a6f0:	ldr	r4, [r5]
   1a6f4:	cmp	r2, #0
   1a6f8:	ldr	r3, [r0]
   1a6fc:	mov	r7, r0
   1a700:	str	r3, [sp, #28]
   1a704:	bgt	1a760 <__assert_fail@plt+0x937c>
   1a708:	add	r6, r5, #8
   1a70c:	cmp	r4, r6
   1a710:	str	r2, [sp, #80]	; 0x50
   1a714:	beq	1a820 <__assert_fail@plt+0x943c>
   1a718:	mov	r3, #8
   1a71c:	mov	r0, r4
   1a720:	str	r3, [sp]
   1a724:	rsb	r2, r2, #1
   1a728:	add	r1, sp, #80	; 0x50
   1a72c:	mvn	r3, #-2147483648	; 0x80000000
   1a730:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a734:	mov	r4, r0
   1a738:	str	r0, [r5]
   1a73c:	ldr	r0, [r5, #4]
   1a740:	ldr	r2, [sp, #80]	; 0x50
   1a744:	mov	r1, #0
   1a748:	sub	r2, r2, r0
   1a74c:	add	r0, r4, r0, lsl #3
   1a750:	lsl	r2, r2, #3
   1a754:	bl	112e8 <memset@plt>
   1a758:	ldr	r3, [sp, #80]	; 0x50
   1a75c:	str	r3, [r5, #4]
   1a760:	ldr	r6, [sp, #36]	; 0x24
   1a764:	ldr	r8, [r4]
   1a768:	ldr	r5, [r4, #4]
   1a76c:	ldr	r2, [sp, #72]	; 0x48
   1a770:	ldr	r3, [sp, #32]
   1a774:	ldr	ip, [sp, #76]	; 0x4c
   1a778:	orr	r6, r6, #1
   1a77c:	add	fp, sp, #40	; 0x28
   1a780:	str	r2, [sp, #12]
   1a784:	str	r3, [sp]
   1a788:	str	r6, [sp, #4]
   1a78c:	mov	r1, r8
   1a790:	mov	r0, r5
   1a794:	str	ip, [sp, #16]
   1a798:	str	fp, [sp, #8]
   1a79c:	mov	r3, sl
   1a7a0:	mov	r2, r9
   1a7a4:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a7a8:	cmp	r8, r0
   1a7ac:	bhi	1a80c <__assert_fail@plt+0x9428>
   1a7b0:	ldr	r3, [pc, #160]	; 1a858 <__assert_fail@plt+0x9474>
   1a7b4:	add	r8, r0, #1
   1a7b8:	cmp	r5, r3
   1a7bc:	str	r8, [r4]
   1a7c0:	beq	1a7cc <__assert_fail@plt+0x93e8>
   1a7c4:	mov	r0, r5
   1a7c8:	bl	15da0 <__assert_fail@plt+0x49bc>
   1a7cc:	mov	r0, r8
   1a7d0:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1a7d4:	ldr	ip, [sp, #76]	; 0x4c
   1a7d8:	ldr	lr, [sp, #32]
   1a7dc:	mov	r3, sl
   1a7e0:	mov	r2, r9
   1a7e4:	mov	r1, r8
   1a7e8:	str	r0, [r4, #4]
   1a7ec:	ldr	r4, [sp, #72]	; 0x48
   1a7f0:	str	fp, [sp, #8]
   1a7f4:	str	r6, [sp, #4]
   1a7f8:	str	ip, [sp, #16]
   1a7fc:	str	r4, [sp, #12]
   1a800:	str	lr, [sp]
   1a804:	mov	r5, r0
   1a808:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a80c:	ldr	r3, [sp, #28]
   1a810:	mov	r0, r5
   1a814:	str	r3, [r7]
   1a818:	add	sp, sp, #132	; 0x84
   1a81c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a820:	mov	r3, #8
   1a824:	add	r1, sp, #80	; 0x50
   1a828:	str	r3, [sp]
   1a82c:	rsb	r2, r2, #1
   1a830:	mvn	r3, #-2147483648	; 0x80000000
   1a834:	mov	r0, #0
   1a838:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a83c:	mov	r4, r0
   1a840:	ldm	r6, {r0, r1}
   1a844:	str	r4, [r5]
   1a848:	stm	r4, {r0, r1}
   1a84c:	b	1a73c <__assert_fail@plt+0x9358>
   1a850:	bl	113cc <abort@plt>
   1a854:	andeq	r3, r3, r8, lsl #3
   1a858:	andeq	r3, r3, r4, ror #5
   1a85c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a860:	mov	r4, r2
   1a864:	ldr	lr, [pc, #432]	; 1aa1c <__assert_fail@plt+0x9638>
   1a868:	mov	sl, r0
   1a86c:	mov	fp, r1
   1a870:	ldm	lr!, {r0, r1, r2, r3}
   1a874:	sub	sp, sp, #92	; 0x5c
   1a878:	add	ip, sp, #40	; 0x28
   1a87c:	lsr	r7, r4, #5
   1a880:	stmia	ip!, {r0, r1, r2, r3}
   1a884:	add	r6, sp, #48	; 0x30
   1a888:	ldm	lr!, {r0, r1, r2, r3}
   1a88c:	and	r4, r4, #31
   1a890:	ldr	r5, [pc, #392]	; 1aa20 <__assert_fail@plt+0x963c>
   1a894:	stmia	ip!, {r0, r1, r2, r3}
   1a898:	ldm	lr, {r0, r1, r2, r3}
   1a89c:	stm	ip, {r0, r1, r2, r3}
   1a8a0:	ldr	r2, [r6, r7, lsl #2]
   1a8a4:	lsr	r3, r2, r4
   1a8a8:	eor	r3, r3, #1
   1a8ac:	and	r3, r3, #1
   1a8b0:	eor	r4, r2, r3, lsl r4
   1a8b4:	str	r4, [r6, r7, lsl #2]
   1a8b8:	bl	112c4 <__errno_location@plt>
   1a8bc:	ldr	r2, [r5, #4]
   1a8c0:	ldr	r4, [r5]
   1a8c4:	cmp	r2, #0
   1a8c8:	ldr	r3, [r0]
   1a8cc:	mov	r8, r0
   1a8d0:	str	r3, [sp, #28]
   1a8d4:	bgt	1a930 <__assert_fail@plt+0x954c>
   1a8d8:	add	r7, r5, #8
   1a8dc:	cmp	r4, r7
   1a8e0:	str	r2, [sp, #36]	; 0x24
   1a8e4:	beq	1a9ec <__assert_fail@plt+0x9608>
   1a8e8:	mov	r3, #8
   1a8ec:	mov	r0, r4
   1a8f0:	str	r3, [sp]
   1a8f4:	rsb	r2, r2, #1
   1a8f8:	mvn	r3, #-2147483648	; 0x80000000
   1a8fc:	add	r1, sp, #36	; 0x24
   1a900:	bl	1d28c <__assert_fail@plt+0xbea8>
   1a904:	mov	r4, r0
   1a908:	str	r0, [r5]
   1a90c:	ldr	r0, [r5, #4]
   1a910:	ldr	r2, [sp, #36]	; 0x24
   1a914:	mov	r1, #0
   1a918:	sub	r2, r2, r0
   1a91c:	add	r0, r4, r0, lsl #3
   1a920:	lsl	r2, r2, #3
   1a924:	bl	112e8 <memset@plt>
   1a928:	ldr	r3, [sp, #36]	; 0x24
   1a92c:	str	r3, [r5, #4]
   1a930:	ldr	r7, [sp, #44]	; 0x2c
   1a934:	ldr	r9, [r4]
   1a938:	ldr	r5, [r4, #4]
   1a93c:	ldr	r2, [sp, #80]	; 0x50
   1a940:	ldr	r3, [sp, #40]	; 0x28
   1a944:	ldr	ip, [sp, #84]	; 0x54
   1a948:	orr	r7, r7, #1
   1a94c:	str	r2, [sp, #12]
   1a950:	str	r3, [sp]
   1a954:	str	r7, [sp, #4]
   1a958:	str	r6, [sp, #8]
   1a95c:	mov	r1, r9
   1a960:	mov	r0, r5
   1a964:	str	ip, [sp, #16]
   1a968:	mov	r3, fp
   1a96c:	mov	r2, sl
   1a970:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a974:	cmp	r9, r0
   1a978:	bhi	1a9d8 <__assert_fail@plt+0x95f4>
   1a97c:	ldr	r3, [pc, #160]	; 1aa24 <__assert_fail@plt+0x9640>
   1a980:	add	r9, r0, #1
   1a984:	cmp	r5, r3
   1a988:	str	r9, [r4]
   1a98c:	beq	1a998 <__assert_fail@plt+0x95b4>
   1a990:	mov	r0, r5
   1a994:	bl	15da0 <__assert_fail@plt+0x49bc>
   1a998:	mov	r0, r9
   1a99c:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1a9a0:	ldr	ip, [sp, #84]	; 0x54
   1a9a4:	ldr	lr, [sp, #40]	; 0x28
   1a9a8:	mov	r3, fp
   1a9ac:	mov	r2, sl
   1a9b0:	mov	r1, r9
   1a9b4:	str	r0, [r4, #4]
   1a9b8:	ldr	r4, [sp, #80]	; 0x50
   1a9bc:	str	r6, [sp, #8]
   1a9c0:	str	r7, [sp, #4]
   1a9c4:	str	ip, [sp, #16]
   1a9c8:	str	r4, [sp, #12]
   1a9cc:	str	lr, [sp]
   1a9d0:	mov	r5, r0
   1a9d4:	bl	18150 <__assert_fail@plt+0x6d6c>
   1a9d8:	ldr	r3, [sp, #28]
   1a9dc:	mov	r0, r5
   1a9e0:	str	r3, [r8]
   1a9e4:	add	sp, sp, #92	; 0x5c
   1a9e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9ec:	mov	r3, #8
   1a9f0:	str	r3, [sp]
   1a9f4:	add	r1, sp, #36	; 0x24
   1a9f8:	rsb	r2, r2, #1
   1a9fc:	mvn	r3, #-2147483648	; 0x80000000
   1aa00:	mov	r0, #0
   1aa04:	bl	1d28c <__assert_fail@plt+0xbea8>
   1aa08:	mov	r4, r0
   1aa0c:	ldm	r7, {r0, r1}
   1aa10:	str	r4, [r5]
   1aa14:	stm	r4, {r0, r1}
   1aa18:	b	1a90c <__assert_fail@plt+0x9528>
   1aa1c:			; <UNDEFINED> instruction: 0x000332b4
   1aa20:	andeq	r3, r3, r8, lsl #3
   1aa24:	andeq	r3, r3, r4, ror #5
   1aa28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa2c:	mov	r4, r1
   1aa30:	ldr	lr, [pc, #420]	; 1abdc <__assert_fail@plt+0x97f8>
   1aa34:	mov	r6, r0
   1aa38:	sub	sp, sp, #84	; 0x54
   1aa3c:	ldm	lr!, {r0, r1, r2, r3}
   1aa40:	add	ip, sp, #32
   1aa44:	lsr	r8, r4, #5
   1aa48:	add	r5, sp, #40	; 0x28
   1aa4c:	stmia	ip!, {r0, r1, r2, r3}
   1aa50:	and	r4, r4, #31
   1aa54:	ldm	lr!, {r0, r1, r2, r3}
   1aa58:	ldr	r7, [pc, #384]	; 1abe0 <__assert_fail@plt+0x97fc>
   1aa5c:	stmia	ip!, {r0, r1, r2, r3}
   1aa60:	ldm	lr, {r0, r1, r2, r3}
   1aa64:	stm	ip, {r0, r1, r2, r3}
   1aa68:	ldr	r2, [r5, r8, lsl #2]
   1aa6c:	lsr	r3, r2, r4
   1aa70:	eor	r3, r3, #1
   1aa74:	and	r3, r3, #1
   1aa78:	eor	r4, r2, r3, lsl r4
   1aa7c:	str	r4, [r5, r8, lsl #2]
   1aa80:	bl	112c4 <__errno_location@plt>
   1aa84:	ldr	r2, [r7, #4]
   1aa88:	ldr	r4, [r7]
   1aa8c:	cmp	r2, #0
   1aa90:	mov	r9, r0
   1aa94:	ldr	sl, [r0]
   1aa98:	bgt	1aaf4 <__assert_fail@plt+0x9710>
   1aa9c:	add	r8, r7, #8
   1aaa0:	cmp	r4, r8
   1aaa4:	str	r2, [sp, #28]
   1aaa8:	beq	1abac <__assert_fail@plt+0x97c8>
   1aaac:	mov	r3, #8
   1aab0:	mov	r0, r4
   1aab4:	str	r3, [sp]
   1aab8:	rsb	r2, r2, #1
   1aabc:	mvn	r3, #-2147483648	; 0x80000000
   1aac0:	add	r1, sp, #28
   1aac4:	bl	1d28c <__assert_fail@plt+0xbea8>
   1aac8:	mov	r4, r0
   1aacc:	str	r0, [r7]
   1aad0:	ldr	r0, [r7, #4]
   1aad4:	ldr	r2, [sp, #28]
   1aad8:	mov	r1, #0
   1aadc:	sub	r2, r2, r0
   1aae0:	add	r0, r4, r0, lsl #3
   1aae4:	lsl	r2, r2, #3
   1aae8:	bl	112e8 <memset@plt>
   1aaec:	ldr	r3, [sp, #28]
   1aaf0:	str	r3, [r7, #4]
   1aaf4:	ldr	r8, [sp, #36]	; 0x24
   1aaf8:	ldr	fp, [r4]
   1aafc:	ldr	r7, [r4, #4]
   1ab00:	ldr	r2, [sp, #72]	; 0x48
   1ab04:	ldr	r3, [sp, #32]
   1ab08:	ldr	ip, [sp, #76]	; 0x4c
   1ab0c:	orr	r8, r8, #1
   1ab10:	str	r2, [sp, #12]
   1ab14:	str	r3, [sp]
   1ab18:	str	r8, [sp, #4]
   1ab1c:	str	r5, [sp, #8]
   1ab20:	mov	r1, fp
   1ab24:	mov	r0, r7
   1ab28:	str	ip, [sp, #16]
   1ab2c:	mvn	r3, #0
   1ab30:	mov	r2, r6
   1ab34:	bl	18150 <__assert_fail@plt+0x6d6c>
   1ab38:	cmp	fp, r0
   1ab3c:	bhi	1ab9c <__assert_fail@plt+0x97b8>
   1ab40:	ldr	r3, [pc, #156]	; 1abe4 <__assert_fail@plt+0x9800>
   1ab44:	add	fp, r0, #1
   1ab48:	cmp	r7, r3
   1ab4c:	str	fp, [r4]
   1ab50:	beq	1ab5c <__assert_fail@plt+0x9778>
   1ab54:	mov	r0, r7
   1ab58:	bl	15da0 <__assert_fail@plt+0x49bc>
   1ab5c:	mov	r0, fp
   1ab60:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1ab64:	ldr	lr, [sp, #76]	; 0x4c
   1ab68:	ldr	r3, [sp, #32]
   1ab6c:	ldr	ip, [sp, #72]	; 0x48
   1ab70:	mov	r2, r6
   1ab74:	mov	r1, fp
   1ab78:	str	r0, [r4, #4]
   1ab7c:	str	r3, [sp]
   1ab80:	str	r5, [sp, #8]
   1ab84:	str	r8, [sp, #4]
   1ab88:	str	lr, [sp, #16]
   1ab8c:	str	ip, [sp, #12]
   1ab90:	mvn	r3, #0
   1ab94:	mov	r7, r0
   1ab98:	bl	18150 <__assert_fail@plt+0x6d6c>
   1ab9c:	mov	r0, r7
   1aba0:	str	sl, [r9]
   1aba4:	add	sp, sp, #84	; 0x54
   1aba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abac:	mov	r3, #8
   1abb0:	str	r3, [sp]
   1abb4:	add	r1, sp, #28
   1abb8:	rsb	r2, r2, #1
   1abbc:	mvn	r3, #-2147483648	; 0x80000000
   1abc0:	mov	r0, #0
   1abc4:	bl	1d28c <__assert_fail@plt+0xbea8>
   1abc8:	mov	r4, r0
   1abcc:	ldm	r8, {r0, r1}
   1abd0:	str	r4, [r7]
   1abd4:	stm	r4, {r0, r1}
   1abd8:	b	1aad0 <__assert_fail@plt+0x96ec>
   1abdc:			; <UNDEFINED> instruction: 0x000332b4
   1abe0:	andeq	r3, r3, r8, lsl #3
   1abe4:	andeq	r3, r3, r4, ror #5
   1abe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abec:	mov	r6, r0
   1abf0:	ldr	lr, [pc, #404]	; 1ad8c <__assert_fail@plt+0x99a8>
   1abf4:	sub	sp, sp, #84	; 0x54
   1abf8:	add	ip, sp, #32
   1abfc:	ldm	lr!, {r0, r1, r2, r3}
   1ac00:	ldr	r5, [pc, #392]	; 1ad90 <__assert_fail@plt+0x99ac>
   1ac04:	stmia	ip!, {r0, r1, r2, r3}
   1ac08:	ldm	lr!, {r0, r1, r2, r3}
   1ac0c:	ldr	r4, [sp, #44]	; 0x2c
   1ac10:	stmia	ip!, {r0, r1, r2, r3}
   1ac14:	ldm	lr, {r0, r1, r2, r3}
   1ac18:	mvn	lr, r4
   1ac1c:	and	lr, lr, #67108864	; 0x4000000
   1ac20:	eor	lr, lr, r4
   1ac24:	stm	ip, {r0, r1, r2, r3}
   1ac28:	str	lr, [sp, #44]	; 0x2c
   1ac2c:	bl	112c4 <__errno_location@plt>
   1ac30:	ldr	r2, [r5, #4]
   1ac34:	ldr	r4, [r5]
   1ac38:	cmp	r2, #0
   1ac3c:	mov	r8, r0
   1ac40:	ldr	sl, [r0]
   1ac44:	bgt	1aca0 <__assert_fail@plt+0x98bc>
   1ac48:	add	r7, r5, #8
   1ac4c:	cmp	r4, r7
   1ac50:	str	r2, [sp, #28]
   1ac54:	beq	1ad5c <__assert_fail@plt+0x9978>
   1ac58:	mov	r3, #8
   1ac5c:	mov	r0, r4
   1ac60:	str	r3, [sp]
   1ac64:	rsb	r2, r2, #1
   1ac68:	mvn	r3, #-2147483648	; 0x80000000
   1ac6c:	add	r1, sp, #28
   1ac70:	bl	1d28c <__assert_fail@plt+0xbea8>
   1ac74:	mov	r4, r0
   1ac78:	str	r0, [r5]
   1ac7c:	ldr	r0, [r5, #4]
   1ac80:	ldr	r2, [sp, #28]
   1ac84:	mov	r1, #0
   1ac88:	sub	r2, r2, r0
   1ac8c:	add	r0, r4, r0, lsl #3
   1ac90:	lsl	r2, r2, #3
   1ac94:	bl	112e8 <memset@plt>
   1ac98:	ldr	r3, [sp, #28]
   1ac9c:	str	r3, [r5, #4]
   1aca0:	ldr	r7, [sp, #36]	; 0x24
   1aca4:	ldr	r9, [r4]
   1aca8:	ldr	r5, [r4, #4]
   1acac:	ldr	r2, [sp, #72]	; 0x48
   1acb0:	ldr	r3, [sp, #32]
   1acb4:	ldr	ip, [sp, #76]	; 0x4c
   1acb8:	orr	r7, r7, #1
   1acbc:	add	fp, sp, #40	; 0x28
   1acc0:	str	r2, [sp, #12]
   1acc4:	str	r3, [sp]
   1acc8:	str	r7, [sp, #4]
   1accc:	mov	r1, r9
   1acd0:	mov	r0, r5
   1acd4:	str	ip, [sp, #16]
   1acd8:	str	fp, [sp, #8]
   1acdc:	mvn	r3, #0
   1ace0:	mov	r2, r6
   1ace4:	bl	18150 <__assert_fail@plt+0x6d6c>
   1ace8:	cmp	r9, r0
   1acec:	bhi	1ad4c <__assert_fail@plt+0x9968>
   1acf0:	ldr	r3, [pc, #156]	; 1ad94 <__assert_fail@plt+0x99b0>
   1acf4:	add	r9, r0, #1
   1acf8:	cmp	r5, r3
   1acfc:	str	r9, [r4]
   1ad00:	beq	1ad0c <__assert_fail@plt+0x9928>
   1ad04:	mov	r0, r5
   1ad08:	bl	15da0 <__assert_fail@plt+0x49bc>
   1ad0c:	mov	r0, r9
   1ad10:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1ad14:	ldr	lr, [sp, #76]	; 0x4c
   1ad18:	ldr	r3, [sp, #32]
   1ad1c:	ldr	ip, [sp, #72]	; 0x48
   1ad20:	mov	r2, r6
   1ad24:	mov	r1, r9
   1ad28:	str	r0, [r4, #4]
   1ad2c:	str	r3, [sp]
   1ad30:	str	fp, [sp, #8]
   1ad34:	str	r7, [sp, #4]
   1ad38:	str	lr, [sp, #16]
   1ad3c:	str	ip, [sp, #12]
   1ad40:	mvn	r3, #0
   1ad44:	mov	r5, r0
   1ad48:	bl	18150 <__assert_fail@plt+0x6d6c>
   1ad4c:	mov	r0, r5
   1ad50:	str	sl, [r8]
   1ad54:	add	sp, sp, #84	; 0x54
   1ad58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad5c:	mov	r3, #8
   1ad60:	str	r3, [sp]
   1ad64:	add	r1, sp, #28
   1ad68:	rsb	r2, r2, #1
   1ad6c:	mvn	r3, #-2147483648	; 0x80000000
   1ad70:	mov	r0, #0
   1ad74:	bl	1d28c <__assert_fail@plt+0xbea8>
   1ad78:	mov	r4, r0
   1ad7c:	ldm	r7, {r0, r1}
   1ad80:	str	r4, [r5]
   1ad84:	stm	r4, {r0, r1}
   1ad88:	b	1ac7c <__assert_fail@plt+0x9898>
   1ad8c:			; <UNDEFINED> instruction: 0x000332b4
   1ad90:	andeq	r3, r3, r8, lsl #3
   1ad94:	andeq	r3, r3, r4, ror #5
   1ad98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad9c:	mov	r9, r0
   1ada0:	ldr	lr, [pc, #416]	; 1af48 <__assert_fail@plt+0x9b64>
   1ada4:	mov	sl, r1
   1ada8:	sub	sp, sp, #92	; 0x5c
   1adac:	ldm	lr!, {r0, r1, r2, r3}
   1adb0:	add	ip, sp, #40	; 0x28
   1adb4:	ldr	r5, [pc, #400]	; 1af4c <__assert_fail@plt+0x9b68>
   1adb8:	stmia	ip!, {r0, r1, r2, r3}
   1adbc:	ldm	lr!, {r0, r1, r2, r3}
   1adc0:	ldr	r4, [sp, #52]	; 0x34
   1adc4:	stmia	ip!, {r0, r1, r2, r3}
   1adc8:	ldm	lr, {r0, r1, r2, r3}
   1adcc:	mvn	lr, r4
   1add0:	and	lr, lr, #67108864	; 0x4000000
   1add4:	eor	lr, lr, r4
   1add8:	stm	ip, {r0, r1, r2, r3}
   1addc:	str	lr, [sp, #52]	; 0x34
   1ade0:	bl	112c4 <__errno_location@plt>
   1ade4:	ldr	r2, [r5, #4]
   1ade8:	ldr	r4, [r5]
   1adec:	cmp	r2, #0
   1adf0:	ldr	r3, [r0]
   1adf4:	mov	r7, r0
   1adf8:	str	r3, [sp, #28]
   1adfc:	bgt	1ae58 <__assert_fail@plt+0x9a74>
   1ae00:	add	r6, r5, #8
   1ae04:	cmp	r4, r6
   1ae08:	str	r2, [sp, #36]	; 0x24
   1ae0c:	beq	1af18 <__assert_fail@plt+0x9b34>
   1ae10:	mov	r3, #8
   1ae14:	mov	r0, r4
   1ae18:	str	r3, [sp]
   1ae1c:	rsb	r2, r2, #1
   1ae20:	mvn	r3, #-2147483648	; 0x80000000
   1ae24:	add	r1, sp, #36	; 0x24
   1ae28:	bl	1d28c <__assert_fail@plt+0xbea8>
   1ae2c:	mov	r4, r0
   1ae30:	str	r0, [r5]
   1ae34:	ldr	r0, [r5, #4]
   1ae38:	ldr	r2, [sp, #36]	; 0x24
   1ae3c:	mov	r1, #0
   1ae40:	sub	r2, r2, r0
   1ae44:	add	r0, r4, r0, lsl #3
   1ae48:	lsl	r2, r2, #3
   1ae4c:	bl	112e8 <memset@plt>
   1ae50:	ldr	r3, [sp, #36]	; 0x24
   1ae54:	str	r3, [r5, #4]
   1ae58:	ldr	r6, [sp, #44]	; 0x2c
   1ae5c:	ldr	r8, [r4]
   1ae60:	ldr	r5, [r4, #4]
   1ae64:	ldr	r2, [sp, #80]	; 0x50
   1ae68:	ldr	r3, [sp, #40]	; 0x28
   1ae6c:	ldr	ip, [sp, #84]	; 0x54
   1ae70:	orr	r6, r6, #1
   1ae74:	add	fp, sp, #48	; 0x30
   1ae78:	str	r2, [sp, #12]
   1ae7c:	str	r3, [sp]
   1ae80:	str	r6, [sp, #4]
   1ae84:	mov	r1, r8
   1ae88:	mov	r0, r5
   1ae8c:	str	ip, [sp, #16]
   1ae90:	str	fp, [sp, #8]
   1ae94:	mov	r3, sl
   1ae98:	mov	r2, r9
   1ae9c:	bl	18150 <__assert_fail@plt+0x6d6c>
   1aea0:	cmp	r8, r0
   1aea4:	bhi	1af04 <__assert_fail@plt+0x9b20>
   1aea8:	ldr	r3, [pc, #160]	; 1af50 <__assert_fail@plt+0x9b6c>
   1aeac:	add	r8, r0, #1
   1aeb0:	cmp	r5, r3
   1aeb4:	str	r8, [r4]
   1aeb8:	beq	1aec4 <__assert_fail@plt+0x9ae0>
   1aebc:	mov	r0, r5
   1aec0:	bl	15da0 <__assert_fail@plt+0x49bc>
   1aec4:	mov	r0, r8
   1aec8:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1aecc:	ldr	ip, [sp, #84]	; 0x54
   1aed0:	ldr	lr, [sp, #40]	; 0x28
   1aed4:	mov	r3, sl
   1aed8:	mov	r2, r9
   1aedc:	mov	r1, r8
   1aee0:	str	r0, [r4, #4]
   1aee4:	ldr	r4, [sp, #80]	; 0x50
   1aee8:	str	fp, [sp, #8]
   1aeec:	str	r6, [sp, #4]
   1aef0:	str	ip, [sp, #16]
   1aef4:	str	r4, [sp, #12]
   1aef8:	str	lr, [sp]
   1aefc:	mov	r5, r0
   1af00:	bl	18150 <__assert_fail@plt+0x6d6c>
   1af04:	ldr	r3, [sp, #28]
   1af08:	mov	r0, r5
   1af0c:	str	r3, [r7]
   1af10:	add	sp, sp, #92	; 0x5c
   1af14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af18:	mov	r3, #8
   1af1c:	str	r3, [sp]
   1af20:	add	r1, sp, #36	; 0x24
   1af24:	rsb	r2, r2, #1
   1af28:	mvn	r3, #-2147483648	; 0x80000000
   1af2c:	mov	r0, #0
   1af30:	bl	1d28c <__assert_fail@plt+0xbea8>
   1af34:	mov	r4, r0
   1af38:	ldm	r6, {r0, r1}
   1af3c:	str	r4, [r5]
   1af40:	stm	r4, {r0, r1}
   1af44:	b	1ae34 <__assert_fail@plt+0x9a50>
   1af48:			; <UNDEFINED> instruction: 0x000332b4
   1af4c:	andeq	r3, r3, r8, lsl #3
   1af50:	andeq	r3, r3, r4, ror #5
   1af54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af58:	sub	sp, sp, #180	; 0xb4
   1af5c:	mov	r6, r1
   1af60:	mov	r4, r0
   1af64:	mov	r9, r2
   1af68:	add	r0, sp, #80	; 0x50
   1af6c:	mov	r2, #48	; 0x30
   1af70:	mov	r1, #0
   1af74:	bl	112e8 <memset@plt>
   1af78:	cmp	r6, #10
   1af7c:	beq	1b15c <__assert_fail@plt+0x9d78>
   1af80:	add	r5, sp, #80	; 0x50
   1af84:	str	r6, [sp, #80]	; 0x50
   1af88:	ldm	r5!, {r0, r1, r2, r3}
   1af8c:	add	ip, sp, #128	; 0x80
   1af90:	mov	r7, ip
   1af94:	add	lr, sp, #32
   1af98:	stmia	ip!, {r0, r1, r2, r3}
   1af9c:	mov	r8, #67108864	; 0x4000000
   1afa0:	ldm	r5!, {r0, r1, r2, r3}
   1afa4:	ldr	r6, [pc, #436]	; 1b160 <__assert_fail@plt+0x9d7c>
   1afa8:	stmia	ip!, {r0, r1, r2, r3}
   1afac:	ldm	r5, {r0, r1, r2, r3}
   1afb0:	stm	ip, {r0, r1, r2, r3}
   1afb4:	ldm	r7!, {r0, r1, r2, r3}
   1afb8:	stmia	lr!, {r0, r1, r2, r3}
   1afbc:	ldm	r7!, {r0, r1, r2, r3}
   1afc0:	str	r8, [sp, #44]	; 0x2c
   1afc4:	stmia	lr!, {r0, r1, r2, r3}
   1afc8:	ldm	ip, {r0, r1, r2, r3}
   1afcc:	stm	lr, {r0, r1, r2, r3}
   1afd0:	bl	112c4 <__errno_location@plt>
   1afd4:	cmn	r4, #-2147483647	; 0x80000001
   1afd8:	ldr	r5, [r6]
   1afdc:	mov	r7, r0
   1afe0:	movne	r0, #0
   1afe4:	moveq	r0, #1
   1afe8:	ldr	r3, [r7]
   1afec:	orrs	r0, r0, r4, lsr #31
   1aff0:	str	r3, [sp, #24]
   1aff4:	bne	1b15c <__assert_fail@plt+0x9d78>
   1aff8:	ldr	r2, [r6, #4]
   1affc:	cmp	r4, r2
   1b000:	blt	1b060 <__assert_fail@plt+0x9c7c>
   1b004:	add	r8, r6, #8
   1b008:	cmp	r5, r8
   1b00c:	str	r2, [sp, #80]	; 0x50
   1b010:	beq	1b12c <__assert_fail@plt+0x9d48>
   1b014:	mov	r3, #8
   1b018:	sub	r2, r4, r2
   1b01c:	mov	r0, r5
   1b020:	str	r3, [sp]
   1b024:	add	r2, r2, #1
   1b028:	add	r1, sp, #80	; 0x50
   1b02c:	mvn	r3, #-2147483648	; 0x80000000
   1b030:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b034:	mov	r5, r0
   1b038:	str	r0, [r6]
   1b03c:	ldr	r0, [r6, #4]
   1b040:	ldr	r2, [sp, #80]	; 0x50
   1b044:	mov	r1, #0
   1b048:	sub	r2, r2, r0
   1b04c:	add	r0, r5, r0, lsl #3
   1b050:	lsl	r2, r2, #3
   1b054:	bl	112e8 <memset@plt>
   1b058:	ldr	r3, [sp, #80]	; 0x50
   1b05c:	str	r3, [r6, #4]
   1b060:	add	fp, r5, r4, lsl #3
   1b064:	ldr	r1, [sp, #36]	; 0x24
   1b068:	ldr	r8, [r5, r4, lsl #3]
   1b06c:	ldr	r6, [fp, #4]
   1b070:	ldr	r2, [sp, #72]	; 0x48
   1b074:	ldr	r3, [sp, #32]
   1b078:	ldr	ip, [sp, #76]	; 0x4c
   1b07c:	orr	r1, r1, #1
   1b080:	add	sl, sp, #40	; 0x28
   1b084:	str	r1, [sp, #28]
   1b088:	str	r1, [sp, #4]
   1b08c:	str	r2, [sp, #12]
   1b090:	str	r3, [sp]
   1b094:	mov	r0, r6
   1b098:	mov	r1, r8
   1b09c:	str	ip, [sp, #16]
   1b0a0:	str	sl, [sp, #8]
   1b0a4:	mvn	r3, #0
   1b0a8:	mov	r2, r9
   1b0ac:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b0b0:	cmp	r8, r0
   1b0b4:	bhi	1b118 <__assert_fail@plt+0x9d34>
   1b0b8:	ldr	r3, [pc, #164]	; 1b164 <__assert_fail@plt+0x9d80>
   1b0bc:	add	r8, r0, #1
   1b0c0:	cmp	r6, r3
   1b0c4:	str	r8, [r5, r4, lsl #3]
   1b0c8:	beq	1b0d4 <__assert_fail@plt+0x9cf0>
   1b0cc:	mov	r0, r6
   1b0d0:	bl	15da0 <__assert_fail@plt+0x49bc>
   1b0d4:	mov	r0, r8
   1b0d8:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1b0dc:	ldr	lr, [sp, #76]	; 0x4c
   1b0e0:	ldr	r3, [sp, #32]
   1b0e4:	ldr	ip, [sp, #72]	; 0x48
   1b0e8:	ldr	r4, [sp, #28]
   1b0ec:	mov	r2, r9
   1b0f0:	mov	r1, r8
   1b0f4:	str	r0, [fp, #4]
   1b0f8:	str	r3, [sp]
   1b0fc:	str	sl, [sp, #8]
   1b100:	str	r4, [sp, #4]
   1b104:	str	lr, [sp, #16]
   1b108:	str	ip, [sp, #12]
   1b10c:	mvn	r3, #0
   1b110:	mov	r6, r0
   1b114:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b118:	ldr	r3, [sp, #24]
   1b11c:	mov	r0, r6
   1b120:	str	r3, [r7]
   1b124:	add	sp, sp, #180	; 0xb4
   1b128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b12c:	mov	r3, #8
   1b130:	sub	r2, r4, r2
   1b134:	add	r1, sp, #80	; 0x50
   1b138:	str	r3, [sp]
   1b13c:	add	r2, r2, #1
   1b140:	mvn	r3, #-2147483648	; 0x80000000
   1b144:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b148:	mov	r5, r0
   1b14c:	ldm	r8, {r0, r1}
   1b150:	str	r5, [r6]
   1b154:	stm	r5, {r0, r1}
   1b158:	b	1b03c <__assert_fail@plt+0x9c58>
   1b15c:	bl	113cc <abort@plt>
   1b160:	andeq	r3, r3, r8, lsl #3
   1b164:	andeq	r3, r3, r4, ror #5
   1b168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b16c:	mov	r7, r1
   1b170:	ldr	lr, [pc, #492]	; 1b364 <__assert_fail@plt+0x9f80>
   1b174:	mov	r8, r2
   1b178:	mov	r4, r0
   1b17c:	mov	fp, r3
   1b180:	ldm	lr!, {r0, r1, r2, r3}
   1b184:	sub	sp, sp, #100	; 0x64
   1b188:	add	ip, sp, #48	; 0x30
   1b18c:	mov	sl, #10
   1b190:	stmia	ip!, {r0, r1, r2, r3}
   1b194:	cmp	r8, #0
   1b198:	cmpne	r7, #0
   1b19c:	ldm	lr!, {r0, r1, r2, r3}
   1b1a0:	str	sl, [sp, #48]	; 0x30
   1b1a4:	stmia	ip!, {r0, r1, r2, r3}
   1b1a8:	ldm	lr, {r0, r1, r2, r3}
   1b1ac:	stm	ip, {r0, r1, r2, r3}
   1b1b0:	beq	1b360 <__assert_fail@plt+0x9f7c>
   1b1b4:	str	r7, [sp, #88]	; 0x58
   1b1b8:	str	r8, [sp, #92]	; 0x5c
   1b1bc:	bl	112c4 <__errno_location@plt>
   1b1c0:	ldr	r6, [pc, #416]	; 1b368 <__assert_fail@plt+0x9f84>
   1b1c4:	cmn	r4, #-2147483647	; 0x80000001
   1b1c8:	ldr	r5, [r6]
   1b1cc:	mov	r9, r0
   1b1d0:	movne	r0, #0
   1b1d4:	moveq	r0, #1
   1b1d8:	ldr	r3, [r9]
   1b1dc:	orrs	r0, r0, r4, lsr #31
   1b1e0:	str	r3, [sp, #28]
   1b1e4:	bne	1b360 <__assert_fail@plt+0x9f7c>
   1b1e8:	ldr	r2, [r6, #4]
   1b1ec:	cmp	r4, r2
   1b1f0:	movlt	r3, sl
   1b1f4:	blt	1b260 <__assert_fail@plt+0x9e7c>
   1b1f8:	add	r7, r6, #8
   1b1fc:	cmp	r5, r7
   1b200:	str	r2, [sp, #44]	; 0x2c
   1b204:	beq	1b330 <__assert_fail@plt+0x9f4c>
   1b208:	mov	r3, #8
   1b20c:	sub	r2, r4, r2
   1b210:	mov	r0, r5
   1b214:	str	r3, [sp]
   1b218:	add	r2, r2, #1
   1b21c:	mvn	r3, #-2147483648	; 0x80000000
   1b220:	add	r1, sp, #44	; 0x2c
   1b224:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b228:	mov	r5, r0
   1b22c:	str	r0, [r6]
   1b230:	ldr	r0, [r6, #4]
   1b234:	ldr	r2, [sp, #44]	; 0x2c
   1b238:	mov	r1, #0
   1b23c:	sub	r2, r2, r0
   1b240:	add	r0, r5, r0, lsl #3
   1b244:	lsl	r2, r2, #3
   1b248:	bl	112e8 <memset@plt>
   1b24c:	ldr	r3, [sp, #48]	; 0x30
   1b250:	ldr	r7, [sp, #88]	; 0x58
   1b254:	ldr	r8, [sp, #92]	; 0x5c
   1b258:	ldr	r2, [sp, #44]	; 0x2c
   1b25c:	str	r2, [r6, #4]
   1b260:	add	r2, r5, r4, lsl #3
   1b264:	mov	r1, r2
   1b268:	str	r2, [sp, #32]
   1b26c:	ldr	r2, [sp, #52]	; 0x34
   1b270:	ldr	r6, [r1, #4]
   1b274:	ldr	sl, [r5, r4, lsl #3]
   1b278:	orr	r2, r2, #1
   1b27c:	str	r3, [sp]
   1b280:	add	r3, sp, #56	; 0x38
   1b284:	str	r2, [sp, #36]	; 0x24
   1b288:	str	r2, [sp, #4]
   1b28c:	str	r3, [sp, #8]
   1b290:	mov	r0, r6
   1b294:	str	r8, [sp, #16]
   1b298:	str	r7, [sp, #12]
   1b29c:	mov	r1, sl
   1b2a0:	mvn	r3, #0
   1b2a4:	mov	r2, fp
   1b2a8:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b2ac:	cmp	sl, r0
   1b2b0:	bhi	1b31c <__assert_fail@plt+0x9f38>
   1b2b4:	ldr	r3, [pc, #176]	; 1b36c <__assert_fail@plt+0x9f88>
   1b2b8:	add	r7, r0, #1
   1b2bc:	cmp	r6, r3
   1b2c0:	str	r7, [r5, r4, lsl #3]
   1b2c4:	beq	1b2d0 <__assert_fail@plt+0x9eec>
   1b2c8:	mov	r0, r6
   1b2cc:	bl	15da0 <__assert_fail@plt+0x49bc>
   1b2d0:	mov	r0, r7
   1b2d4:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1b2d8:	ldr	r3, [sp, #32]
   1b2dc:	ldr	lr, [sp, #92]	; 0x5c
   1b2e0:	ldr	ip, [sp, #88]	; 0x58
   1b2e4:	ldr	r4, [sp, #36]	; 0x24
   1b2e8:	mov	r2, fp
   1b2ec:	mov	r1, r7
   1b2f0:	str	r0, [r3, #4]
   1b2f4:	add	r3, sp, #56	; 0x38
   1b2f8:	str	r3, [sp, #8]
   1b2fc:	ldr	r3, [sp, #48]	; 0x30
   1b300:	str	r4, [sp, #4]
   1b304:	str	r3, [sp]
   1b308:	str	lr, [sp, #16]
   1b30c:	str	ip, [sp, #12]
   1b310:	mvn	r3, #0
   1b314:	mov	r6, r0
   1b318:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b31c:	ldr	r3, [sp, #28]
   1b320:	mov	r0, r6
   1b324:	str	r3, [r9]
   1b328:	add	sp, sp, #100	; 0x64
   1b32c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b330:	mov	r3, #8
   1b334:	sub	r2, r4, r2
   1b338:	str	r3, [sp]
   1b33c:	add	r1, sp, #44	; 0x2c
   1b340:	add	r2, r2, #1
   1b344:	mvn	r3, #-2147483648	; 0x80000000
   1b348:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b34c:	mov	r5, r0
   1b350:	ldm	r7, {r0, r1}
   1b354:	str	r5, [r6]
   1b358:	stm	r5, {r0, r1}
   1b35c:	b	1b230 <__assert_fail@plt+0x9e4c>
   1b360:	bl	113cc <abort@plt>
   1b364:			; <UNDEFINED> instruction: 0x000332b4
   1b368:	andeq	r3, r3, r8, lsl #3
   1b36c:	andeq	r3, r3, r4, ror #5
   1b370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b374:	mov	r7, r1
   1b378:	ldr	lr, [pc, #492]	; 1b56c <__assert_fail@plt+0xa188>
   1b37c:	mov	r8, r2
   1b380:	mov	r4, r0
   1b384:	mov	fp, r3
   1b388:	ldm	lr!, {r0, r1, r2, r3}
   1b38c:	sub	sp, sp, #100	; 0x64
   1b390:	add	ip, sp, #48	; 0x30
   1b394:	mov	sl, #10
   1b398:	stmia	ip!, {r0, r1, r2, r3}
   1b39c:	cmp	r8, #0
   1b3a0:	cmpne	r7, #0
   1b3a4:	ldm	lr!, {r0, r1, r2, r3}
   1b3a8:	str	sl, [sp, #48]	; 0x30
   1b3ac:	stmia	ip!, {r0, r1, r2, r3}
   1b3b0:	ldm	lr, {r0, r1, r2, r3}
   1b3b4:	stm	ip, {r0, r1, r2, r3}
   1b3b8:	beq	1b568 <__assert_fail@plt+0xa184>
   1b3bc:	str	r7, [sp, #88]	; 0x58
   1b3c0:	str	r8, [sp, #92]	; 0x5c
   1b3c4:	bl	112c4 <__errno_location@plt>
   1b3c8:	ldr	r6, [pc, #416]	; 1b570 <__assert_fail@plt+0xa18c>
   1b3cc:	cmn	r4, #-2147483647	; 0x80000001
   1b3d0:	ldr	r5, [r6]
   1b3d4:	mov	r9, r0
   1b3d8:	movne	r0, #0
   1b3dc:	moveq	r0, #1
   1b3e0:	ldr	r3, [r9]
   1b3e4:	orrs	r0, r0, r4, lsr #31
   1b3e8:	str	r3, [sp, #28]
   1b3ec:	bne	1b568 <__assert_fail@plt+0xa184>
   1b3f0:	ldr	r2, [r6, #4]
   1b3f4:	cmp	r4, r2
   1b3f8:	movlt	r3, sl
   1b3fc:	blt	1b468 <__assert_fail@plt+0xa084>
   1b400:	add	r7, r6, #8
   1b404:	cmp	r5, r7
   1b408:	str	r2, [sp, #44]	; 0x2c
   1b40c:	beq	1b538 <__assert_fail@plt+0xa154>
   1b410:	mov	r3, #8
   1b414:	sub	r2, r4, r2
   1b418:	mov	r0, r5
   1b41c:	str	r3, [sp]
   1b420:	add	r2, r2, #1
   1b424:	mvn	r3, #-2147483648	; 0x80000000
   1b428:	add	r1, sp, #44	; 0x2c
   1b42c:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b430:	mov	r5, r0
   1b434:	str	r0, [r6]
   1b438:	ldr	r0, [r6, #4]
   1b43c:	ldr	r2, [sp, #44]	; 0x2c
   1b440:	mov	r1, #0
   1b444:	sub	r2, r2, r0
   1b448:	add	r0, r5, r0, lsl #3
   1b44c:	lsl	r2, r2, #3
   1b450:	bl	112e8 <memset@plt>
   1b454:	ldr	r3, [sp, #48]	; 0x30
   1b458:	ldr	r7, [sp, #88]	; 0x58
   1b45c:	ldr	r8, [sp, #92]	; 0x5c
   1b460:	ldr	r2, [sp, #44]	; 0x2c
   1b464:	str	r2, [r6, #4]
   1b468:	add	r2, r5, r4, lsl #3
   1b46c:	mov	r1, r2
   1b470:	str	r2, [sp, #32]
   1b474:	ldr	r2, [sp, #52]	; 0x34
   1b478:	ldr	r6, [r1, #4]
   1b47c:	ldr	sl, [r5, r4, lsl #3]
   1b480:	orr	r2, r2, #1
   1b484:	str	r3, [sp]
   1b488:	add	r3, sp, #56	; 0x38
   1b48c:	str	r2, [sp, #36]	; 0x24
   1b490:	str	r2, [sp, #4]
   1b494:	str	r3, [sp, #8]
   1b498:	mov	r0, r6
   1b49c:	str	r8, [sp, #16]
   1b4a0:	str	r7, [sp, #12]
   1b4a4:	mov	r1, sl
   1b4a8:	ldr	r3, [sp, #136]	; 0x88
   1b4ac:	mov	r2, fp
   1b4b0:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b4b4:	cmp	sl, r0
   1b4b8:	bhi	1b524 <__assert_fail@plt+0xa140>
   1b4bc:	ldr	r3, [pc, #176]	; 1b574 <__assert_fail@plt+0xa190>
   1b4c0:	add	r7, r0, #1
   1b4c4:	cmp	r6, r3
   1b4c8:	str	r7, [r5, r4, lsl #3]
   1b4cc:	beq	1b4d8 <__assert_fail@plt+0xa0f4>
   1b4d0:	mov	r0, r6
   1b4d4:	bl	15da0 <__assert_fail@plt+0x49bc>
   1b4d8:	mov	r0, r7
   1b4dc:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1b4e0:	ldr	r3, [sp, #32]
   1b4e4:	ldr	lr, [sp, #92]	; 0x5c
   1b4e8:	ldr	ip, [sp, #88]	; 0x58
   1b4ec:	ldr	r4, [sp, #36]	; 0x24
   1b4f0:	mov	r2, fp
   1b4f4:	mov	r1, r7
   1b4f8:	str	r0, [r3, #4]
   1b4fc:	add	r3, sp, #56	; 0x38
   1b500:	str	r3, [sp, #8]
   1b504:	ldr	r3, [sp, #48]	; 0x30
   1b508:	str	r4, [sp, #4]
   1b50c:	str	r3, [sp]
   1b510:	str	lr, [sp, #16]
   1b514:	str	ip, [sp, #12]
   1b518:	ldr	r3, [sp, #136]	; 0x88
   1b51c:	mov	r6, r0
   1b520:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b524:	ldr	r3, [sp, #28]
   1b528:	mov	r0, r6
   1b52c:	str	r3, [r9]
   1b530:	add	sp, sp, #100	; 0x64
   1b534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b538:	mov	r3, #8
   1b53c:	sub	r2, r4, r2
   1b540:	str	r3, [sp]
   1b544:	add	r1, sp, #44	; 0x2c
   1b548:	add	r2, r2, #1
   1b54c:	mvn	r3, #-2147483648	; 0x80000000
   1b550:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b554:	mov	r5, r0
   1b558:	ldm	r7, {r0, r1}
   1b55c:	str	r5, [r6]
   1b560:	stm	r5, {r0, r1}
   1b564:	b	1b438 <__assert_fail@plt+0xa054>
   1b568:	bl	113cc <abort@plt>
   1b56c:			; <UNDEFINED> instruction: 0x000332b4
   1b570:	andeq	r3, r3, r8, lsl #3
   1b574:	andeq	r3, r3, r4, ror #5
   1b578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b57c:	mov	r5, r0
   1b580:	ldr	lr, [pc, #452]	; 1b74c <__assert_fail@plt+0xa368>
   1b584:	mov	r6, r1
   1b588:	mov	sl, r2
   1b58c:	ldm	lr!, {r0, r1, r2, r3}
   1b590:	sub	sp, sp, #92	; 0x5c
   1b594:	add	ip, sp, #40	; 0x28
   1b598:	cmp	r6, #0
   1b59c:	cmpne	r5, #0
   1b5a0:	stmia	ip!, {r0, r1, r2, r3}
   1b5a4:	mov	r9, #10
   1b5a8:	ldm	lr!, {r0, r1, r2, r3}
   1b5ac:	moveq	fp, #1
   1b5b0:	movne	fp, #0
   1b5b4:	str	r9, [sp, #40]	; 0x28
   1b5b8:	stmia	ip!, {r0, r1, r2, r3}
   1b5bc:	ldm	lr, {r0, r1, r2, r3}
   1b5c0:	stm	ip, {r0, r1, r2, r3}
   1b5c4:	beq	1b748 <__assert_fail@plt+0xa364>
   1b5c8:	str	r5, [sp, #80]	; 0x50
   1b5cc:	str	r6, [sp, #84]	; 0x54
   1b5d0:	bl	112c4 <__errno_location@plt>
   1b5d4:	ldr	r7, [pc, #372]	; 1b750 <__assert_fail@plt+0xa36c>
   1b5d8:	ldr	r2, [r7, #4]
   1b5dc:	ldr	r4, [r7]
   1b5e0:	cmp	r2, #0
   1b5e4:	ldr	r3, [r0]
   1b5e8:	mov	r8, r0
   1b5ec:	str	r3, [sp, #24]
   1b5f0:	movgt	r3, r9
   1b5f4:	bgt	1b65c <__assert_fail@plt+0xa278>
   1b5f8:	add	r5, r7, #8
   1b5fc:	cmp	r4, r5
   1b600:	str	r2, [sp, #36]	; 0x24
   1b604:	beq	1b718 <__assert_fail@plt+0xa334>
   1b608:	mov	r3, #8
   1b60c:	mov	r0, r4
   1b610:	str	r3, [sp]
   1b614:	rsb	r2, r2, #1
   1b618:	mvn	r3, #-2147483648	; 0x80000000
   1b61c:	add	r1, sp, #36	; 0x24
   1b620:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b624:	mov	r4, r0
   1b628:	str	r0, [r7]
   1b62c:	ldr	r0, [r7, #4]
   1b630:	ldr	r2, [sp, #36]	; 0x24
   1b634:	mov	r1, #0
   1b638:	sub	r2, r2, r0
   1b63c:	add	r0, r4, r0, lsl #3
   1b640:	lsl	r2, r2, #3
   1b644:	bl	112e8 <memset@plt>
   1b648:	ldr	r3, [sp, #40]	; 0x28
   1b64c:	ldr	r5, [sp, #80]	; 0x50
   1b650:	ldr	r6, [sp, #84]	; 0x54
   1b654:	ldr	r2, [sp, #36]	; 0x24
   1b658:	str	r2, [r7, #4]
   1b65c:	ldr	r2, [sp, #44]	; 0x2c
   1b660:	ldr	r9, [r4]
   1b664:	ldr	r7, [r4, #4]
   1b668:	orr	r2, r2, #1
   1b66c:	add	fp, sp, #48	; 0x30
   1b670:	str	r2, [sp, #28]
   1b674:	str	r2, [sp, #4]
   1b678:	str	r3, [sp]
   1b67c:	str	r6, [sp, #16]
   1b680:	str	r5, [sp, #12]
   1b684:	mov	r1, r9
   1b688:	mov	r0, r7
   1b68c:	str	fp, [sp, #8]
   1b690:	mvn	r3, #0
   1b694:	mov	r2, sl
   1b698:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b69c:	cmp	r9, r0
   1b6a0:	bhi	1b704 <__assert_fail@plt+0xa320>
   1b6a4:	ldr	r3, [pc, #168]	; 1b754 <__assert_fail@plt+0xa370>
   1b6a8:	add	r5, r0, #1
   1b6ac:	cmp	r7, r3
   1b6b0:	str	r5, [r4]
   1b6b4:	beq	1b6c0 <__assert_fail@plt+0xa2dc>
   1b6b8:	mov	r0, r7
   1b6bc:	bl	15da0 <__assert_fail@plt+0x49bc>
   1b6c0:	mov	r0, r5
   1b6c4:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1b6c8:	ldr	lr, [sp, #84]	; 0x54
   1b6cc:	ldr	r3, [sp, #40]	; 0x28
   1b6d0:	ldr	ip, [sp, #80]	; 0x50
   1b6d4:	mov	r2, sl
   1b6d8:	mov	r1, r5
   1b6dc:	str	r0, [r4, #4]
   1b6e0:	ldr	r4, [sp, #28]
   1b6e4:	str	r3, [sp]
   1b6e8:	str	fp, [sp, #8]
   1b6ec:	str	r4, [sp, #4]
   1b6f0:	str	lr, [sp, #16]
   1b6f4:	str	ip, [sp, #12]
   1b6f8:	mvn	r3, #0
   1b6fc:	mov	r7, r0
   1b700:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b704:	ldr	r3, [sp, #24]
   1b708:	mov	r0, r7
   1b70c:	str	r3, [r8]
   1b710:	add	sp, sp, #92	; 0x5c
   1b714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b718:	mov	r3, #8
   1b71c:	str	r3, [sp]
   1b720:	add	r1, sp, #36	; 0x24
   1b724:	rsb	r2, r2, #1
   1b728:	mov	r0, fp
   1b72c:	mvn	r3, #-2147483648	; 0x80000000
   1b730:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b734:	mov	r4, r0
   1b738:	ldm	r5, {r0, r1}
   1b73c:	str	r4, [r7]
   1b740:	stm	r4, {r0, r1}
   1b744:	b	1b62c <__assert_fail@plt+0xa248>
   1b748:	bl	113cc <abort@plt>
   1b74c:			; <UNDEFINED> instruction: 0x000332b4
   1b750:	andeq	r3, r3, r8, lsl #3
   1b754:	andeq	r3, r3, r4, ror #5
   1b758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b75c:	mov	r5, r0
   1b760:	ldr	lr, [pc, #464]	; 1b938 <__assert_fail@plt+0xa554>
   1b764:	mov	r6, r1
   1b768:	mov	sl, r2
   1b76c:	mov	fp, r3
   1b770:	ldm	lr!, {r0, r1, r2, r3}
   1b774:	sub	sp, sp, #92	; 0x5c
   1b778:	add	ip, sp, #40	; 0x28
   1b77c:	cmp	r6, #0
   1b780:	cmpne	r5, #0
   1b784:	stmia	ip!, {r0, r1, r2, r3}
   1b788:	moveq	r4, #1
   1b78c:	ldm	lr!, {r0, r1, r2, r3}
   1b790:	movne	r4, #0
   1b794:	mov	r9, #10
   1b798:	str	r4, [sp, #28]
   1b79c:	stmia	ip!, {r0, r1, r2, r3}
   1b7a0:	ldm	lr, {r0, r1, r2, r3}
   1b7a4:	str	r9, [sp, #40]	; 0x28
   1b7a8:	stm	ip, {r0, r1, r2, r3}
   1b7ac:	beq	1b934 <__assert_fail@plt+0xa550>
   1b7b0:	str	r5, [sp, #80]	; 0x50
   1b7b4:	str	r6, [sp, #84]	; 0x54
   1b7b8:	bl	112c4 <__errno_location@plt>
   1b7bc:	ldr	r7, [pc, #376]	; 1b93c <__assert_fail@plt+0xa558>
   1b7c0:	ldr	r2, [r7, #4]
   1b7c4:	ldr	r4, [r7]
   1b7c8:	cmp	r2, #0
   1b7cc:	ldr	r3, [r0]
   1b7d0:	mov	r8, r0
   1b7d4:	str	r3, [sp, #24]
   1b7d8:	movgt	r3, r9
   1b7dc:	bgt	1b844 <__assert_fail@plt+0xa460>
   1b7e0:	add	r5, r7, #8
   1b7e4:	cmp	r4, r5
   1b7e8:	str	r2, [sp, #36]	; 0x24
   1b7ec:	beq	1b904 <__assert_fail@plt+0xa520>
   1b7f0:	mov	r3, #8
   1b7f4:	mov	r0, r4
   1b7f8:	str	r3, [sp]
   1b7fc:	rsb	r2, r2, #1
   1b800:	mvn	r3, #-2147483648	; 0x80000000
   1b804:	add	r1, sp, #36	; 0x24
   1b808:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b80c:	mov	r4, r0
   1b810:	str	r0, [r7]
   1b814:	ldr	r0, [r7, #4]
   1b818:	ldr	r2, [sp, #36]	; 0x24
   1b81c:	mov	r1, #0
   1b820:	sub	r2, r2, r0
   1b824:	add	r0, r4, r0, lsl #3
   1b828:	lsl	r2, r2, #3
   1b82c:	bl	112e8 <memset@plt>
   1b830:	ldr	r3, [sp, #40]	; 0x28
   1b834:	ldr	r5, [sp, #80]	; 0x50
   1b838:	ldr	r6, [sp, #84]	; 0x54
   1b83c:	ldr	r2, [sp, #36]	; 0x24
   1b840:	str	r2, [r7, #4]
   1b844:	ldr	r2, [sp, #44]	; 0x2c
   1b848:	ldr	r9, [r4]
   1b84c:	ldr	r7, [r4, #4]
   1b850:	orr	r2, r2, #1
   1b854:	str	r3, [sp]
   1b858:	add	r3, sp, #48	; 0x30
   1b85c:	str	r2, [sp, #28]
   1b860:	str	r2, [sp, #4]
   1b864:	str	r3, [sp, #8]
   1b868:	str	r6, [sp, #16]
   1b86c:	str	r5, [sp, #12]
   1b870:	mov	r1, r9
   1b874:	mov	r0, r7
   1b878:	mov	r3, fp
   1b87c:	mov	r2, sl
   1b880:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b884:	cmp	r9, r0
   1b888:	bhi	1b8f0 <__assert_fail@plt+0xa50c>
   1b88c:	ldr	r3, [pc, #172]	; 1b940 <__assert_fail@plt+0xa55c>
   1b890:	add	r5, r0, #1
   1b894:	cmp	r7, r3
   1b898:	str	r5, [r4]
   1b89c:	beq	1b8a8 <__assert_fail@plt+0xa4c4>
   1b8a0:	mov	r0, r7
   1b8a4:	bl	15da0 <__assert_fail@plt+0x49bc>
   1b8a8:	mov	r0, r5
   1b8ac:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1b8b0:	add	lr, sp, #48	; 0x30
   1b8b4:	ldr	ip, [sp, #84]	; 0x54
   1b8b8:	mov	r1, r5
   1b8bc:	ldr	r5, [sp, #28]
   1b8c0:	mov	r3, fp
   1b8c4:	mov	r2, sl
   1b8c8:	str	r0, [r4, #4]
   1b8cc:	ldr	r4, [sp, #80]	; 0x50
   1b8d0:	str	lr, [sp, #8]
   1b8d4:	ldr	lr, [sp, #40]	; 0x28
   1b8d8:	str	r5, [sp, #4]
   1b8dc:	str	ip, [sp, #16]
   1b8e0:	str	r4, [sp, #12]
   1b8e4:	str	lr, [sp]
   1b8e8:	mov	r7, r0
   1b8ec:	bl	18150 <__assert_fail@plt+0x6d6c>
   1b8f0:	ldr	r3, [sp, #24]
   1b8f4:	mov	r0, r7
   1b8f8:	str	r3, [r8]
   1b8fc:	add	sp, sp, #92	; 0x5c
   1b900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b904:	mov	r3, #8
   1b908:	str	r3, [sp]
   1b90c:	add	r1, sp, #36	; 0x24
   1b910:	rsb	r2, r2, #1
   1b914:	ldr	r0, [sp, #28]
   1b918:	mvn	r3, #-2147483648	; 0x80000000
   1b91c:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b920:	mov	r4, r0
   1b924:	ldm	r5, {r0, r1}
   1b928:	str	r4, [r7]
   1b92c:	stm	r4, {r0, r1}
   1b930:	b	1b814 <__assert_fail@plt+0xa430>
   1b934:	bl	113cc <abort@plt>
   1b938:			; <UNDEFINED> instruction: 0x000332b4
   1b93c:	andeq	r3, r3, r8, lsl #3
   1b940:	andeq	r3, r3, r4, ror #5
   1b944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b948:	sub	sp, sp, #52	; 0x34
   1b94c:	mov	r5, r0
   1b950:	mov	sl, r1
   1b954:	mov	fp, r2
   1b958:	bl	112c4 <__errno_location@plt>
   1b95c:	ldr	r4, [pc, #404]	; 1baf8 <__assert_fail@plt+0xa714>
   1b960:	cmn	r5, #-2147483647	; 0x80000001
   1b964:	ldr	r6, [r4]
   1b968:	mov	r8, r0
   1b96c:	movne	r0, #0
   1b970:	moveq	r0, #1
   1b974:	ldr	r3, [r8]
   1b978:	orrs	r0, r0, r5, lsr #31
   1b97c:	str	r3, [sp, #28]
   1b980:	bne	1baf4 <__assert_fail@plt+0xa710>
   1b984:	ldr	r2, [r4, #4]
   1b988:	cmp	r5, r2
   1b98c:	blt	1b9ec <__assert_fail@plt+0xa608>
   1b990:	add	r7, r4, #8
   1b994:	cmp	r6, r7
   1b998:	str	r2, [sp, #44]	; 0x2c
   1b99c:	beq	1bac4 <__assert_fail@plt+0xa6e0>
   1b9a0:	mov	r3, #8
   1b9a4:	sub	r2, r5, r2
   1b9a8:	mov	r0, r6
   1b9ac:	str	r3, [sp]
   1b9b0:	add	r2, r2, #1
   1b9b4:	mvn	r3, #-2147483648	; 0x80000000
   1b9b8:	add	r1, sp, #44	; 0x2c
   1b9bc:	bl	1d28c <__assert_fail@plt+0xbea8>
   1b9c0:	mov	r6, r0
   1b9c4:	str	r0, [r4]
   1b9c8:	ldr	r0, [r4, #4]
   1b9cc:	ldr	r2, [sp, #44]	; 0x2c
   1b9d0:	mov	r1, #0
   1b9d4:	sub	r2, r2, r0
   1b9d8:	add	r0, r6, r0, lsl #3
   1b9dc:	lsl	r2, r2, #3
   1b9e0:	bl	112e8 <memset@plt>
   1b9e4:	ldr	r3, [sp, #44]	; 0x2c
   1b9e8:	str	r3, [r4, #4]
   1b9ec:	ldr	r2, [r4, #56]	; 0x38
   1b9f0:	add	r3, r6, r5, lsl #3
   1b9f4:	ldr	r1, [r4, #20]
   1b9f8:	ldr	r7, [r3, #4]
   1b9fc:	ldr	r9, [r6, r5, lsl #3]
   1ba00:	ldr	ip, [r4, #60]	; 0x3c
   1ba04:	str	r3, [sp, #32]
   1ba08:	ldr	r3, [r4, #16]
   1ba0c:	str	r2, [sp, #12]
   1ba10:	ldr	r2, [pc, #228]	; 1bafc <__assert_fail@plt+0xa718>
   1ba14:	orr	r1, r1, #1
   1ba18:	str	r1, [sp, #36]	; 0x24
   1ba1c:	str	r1, [sp, #4]
   1ba20:	str	r2, [sp, #8]
   1ba24:	str	r3, [sp]
   1ba28:	mov	r0, r7
   1ba2c:	mov	r1, r9
   1ba30:	str	ip, [sp, #16]
   1ba34:	mov	r3, fp
   1ba38:	mov	r2, sl
   1ba3c:	bl	18150 <__assert_fail@plt+0x6d6c>
   1ba40:	cmp	r9, r0
   1ba44:	bhi	1bab0 <__assert_fail@plt+0xa6cc>
   1ba48:	ldr	r3, [pc, #176]	; 1bb00 <__assert_fail@plt+0xa71c>
   1ba4c:	add	r9, r0, #1
   1ba50:	cmp	r7, r3
   1ba54:	str	r9, [r6, r5, lsl #3]
   1ba58:	beq	1ba64 <__assert_fail@plt+0xa680>
   1ba5c:	mov	r0, r7
   1ba60:	bl	15da0 <__assert_fail@plt+0x49bc>
   1ba64:	mov	r0, r9
   1ba68:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1ba6c:	ldr	ip, [sp, #32]
   1ba70:	ldr	lr, [r4, #60]	; 0x3c
   1ba74:	ldr	r5, [r4, #56]	; 0x38
   1ba78:	mov	r3, fp
   1ba7c:	mov	r2, sl
   1ba80:	mov	r1, r9
   1ba84:	str	r0, [ip, #4]
   1ba88:	ldr	ip, [r4, #16]
   1ba8c:	ldr	r4, [pc, #104]	; 1bafc <__assert_fail@plt+0xa718>
   1ba90:	str	lr, [sp, #16]
   1ba94:	str	r4, [sp, #8]
   1ba98:	ldr	r4, [sp, #36]	; 0x24
   1ba9c:	str	r5, [sp, #12]
   1baa0:	str	r4, [sp, #4]
   1baa4:	str	ip, [sp]
   1baa8:	mov	r7, r0
   1baac:	bl	18150 <__assert_fail@plt+0x6d6c>
   1bab0:	ldr	r3, [sp, #28]
   1bab4:	mov	r0, r7
   1bab8:	str	r3, [r8]
   1babc:	add	sp, sp, #52	; 0x34
   1bac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bac4:	mov	r3, #8
   1bac8:	sub	r2, r5, r2
   1bacc:	str	r3, [sp]
   1bad0:	add	r1, sp, #44	; 0x2c
   1bad4:	add	r2, r2, #1
   1bad8:	mvn	r3, #-2147483648	; 0x80000000
   1badc:	bl	1d28c <__assert_fail@plt+0xbea8>
   1bae0:	mov	r6, r0
   1bae4:	ldm	r7, {r0, r1}
   1bae8:	str	r6, [r4]
   1baec:	stm	r6, {r0, r1}
   1baf0:	b	1b9c8 <__assert_fail@plt+0xa5e4>
   1baf4:	bl	113cc <abort@plt>
   1baf8:	andeq	r3, r3, r8, lsl #3
   1bafc:	andeq	r3, r3, r0, lsr #3
   1bb00:	andeq	r3, r3, r4, ror #5
   1bb04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb08:	sub	sp, sp, #44	; 0x2c
   1bb0c:	mov	r9, r0
   1bb10:	mov	sl, r1
   1bb14:	bl	112c4 <__errno_location@plt>
   1bb18:	ldr	r4, [pc, #360]	; 1bc88 <__assert_fail@plt+0xa8a4>
   1bb1c:	ldr	r2, [r4, #4]
   1bb20:	ldr	r5, [r4]
   1bb24:	cmp	r2, #0
   1bb28:	ldr	r3, [r0]
   1bb2c:	mov	r7, r0
   1bb30:	str	r3, [sp, #24]
   1bb34:	bgt	1bb90 <__assert_fail@plt+0xa7ac>
   1bb38:	add	r6, r4, #8
   1bb3c:	cmp	r5, r6
   1bb40:	str	r2, [sp, #36]	; 0x24
   1bb44:	beq	1bc58 <__assert_fail@plt+0xa874>
   1bb48:	mov	r3, #8
   1bb4c:	mov	r0, r5
   1bb50:	str	r3, [sp]
   1bb54:	rsb	r2, r2, #1
   1bb58:	mvn	r3, #-2147483648	; 0x80000000
   1bb5c:	add	r1, sp, #36	; 0x24
   1bb60:	bl	1d28c <__assert_fail@plt+0xbea8>
   1bb64:	mov	r5, r0
   1bb68:	str	r0, [r4]
   1bb6c:	ldr	r0, [r4, #4]
   1bb70:	ldr	r2, [sp, #36]	; 0x24
   1bb74:	mov	r1, #0
   1bb78:	sub	r2, r2, r0
   1bb7c:	add	r0, r5, r0, lsl #3
   1bb80:	lsl	r2, r2, #3
   1bb84:	bl	112e8 <memset@plt>
   1bb88:	ldr	r3, [sp, #36]	; 0x24
   1bb8c:	str	r3, [r4, #4]
   1bb90:	ldr	r1, [r4, #20]
   1bb94:	ldr	r8, [r5]
   1bb98:	ldr	r6, [r5, #4]
   1bb9c:	ldr	r2, [r4, #56]	; 0x38
   1bba0:	ldr	r3, [r4, #16]
   1bba4:	ldr	ip, [r4, #60]	; 0x3c
   1bba8:	ldr	fp, [pc, #220]	; 1bc8c <__assert_fail@plt+0xa8a8>
   1bbac:	orr	r1, r1, #1
   1bbb0:	str	r1, [sp, #28]
   1bbb4:	str	r1, [sp, #4]
   1bbb8:	str	r2, [sp, #12]
   1bbbc:	str	r3, [sp]
   1bbc0:	mov	r1, r8
   1bbc4:	mov	r0, r6
   1bbc8:	str	ip, [sp, #16]
   1bbcc:	str	fp, [sp, #8]
   1bbd0:	mov	r3, sl
   1bbd4:	mov	r2, r9
   1bbd8:	bl	18150 <__assert_fail@plt+0x6d6c>
   1bbdc:	cmp	r8, r0
   1bbe0:	bhi	1bc44 <__assert_fail@plt+0xa860>
   1bbe4:	ldr	r3, [pc, #164]	; 1bc90 <__assert_fail@plt+0xa8ac>
   1bbe8:	add	r8, r0, #1
   1bbec:	cmp	r6, r3
   1bbf0:	str	r8, [r5]
   1bbf4:	beq	1bc00 <__assert_fail@plt+0xa81c>
   1bbf8:	mov	r0, r6
   1bbfc:	bl	15da0 <__assert_fail@plt+0x49bc>
   1bc00:	mov	r0, r8
   1bc04:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1bc08:	ldr	lr, [r4, #60]	; 0x3c
   1bc0c:	ldr	ip, [r4, #16]
   1bc10:	mov	r3, sl
   1bc14:	mov	r2, r9
   1bc18:	mov	r1, r8
   1bc1c:	str	r0, [r5, #4]
   1bc20:	ldr	r5, [r4, #56]	; 0x38
   1bc24:	ldr	r4, [sp, #28]
   1bc28:	str	fp, [sp, #8]
   1bc2c:	str	r4, [sp, #4]
   1bc30:	str	lr, [sp, #16]
   1bc34:	str	r5, [sp, #12]
   1bc38:	str	ip, [sp]
   1bc3c:	mov	r6, r0
   1bc40:	bl	18150 <__assert_fail@plt+0x6d6c>
   1bc44:	ldr	r3, [sp, #24]
   1bc48:	mov	r0, r6
   1bc4c:	str	r3, [r7]
   1bc50:	add	sp, sp, #44	; 0x2c
   1bc54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc58:	mov	r3, #8
   1bc5c:	str	r3, [sp]
   1bc60:	add	r1, sp, #36	; 0x24
   1bc64:	rsb	r2, r2, #1
   1bc68:	mvn	r3, #-2147483648	; 0x80000000
   1bc6c:	mov	r0, #0
   1bc70:	bl	1d28c <__assert_fail@plt+0xbea8>
   1bc74:	mov	r5, r0
   1bc78:	ldm	r6, {r0, r1}
   1bc7c:	str	r5, [r4]
   1bc80:	stm	r5, {r0, r1}
   1bc84:	b	1bb6c <__assert_fail@plt+0xa788>
   1bc88:	andeq	r3, r3, r8, lsl #3
   1bc8c:	andeq	r3, r3, r0, lsr #3
   1bc90:	andeq	r3, r3, r4, ror #5
   1bc94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc98:	sub	sp, sp, #44	; 0x2c
   1bc9c:	mov	r5, r0
   1bca0:	mov	sl, r1
   1bca4:	bl	112c4 <__errno_location@plt>
   1bca8:	ldr	r4, [pc, #396]	; 1be3c <__assert_fail@plt+0xaa58>
   1bcac:	cmn	r5, #-2147483647	; 0x80000001
   1bcb0:	ldr	r6, [r4]
   1bcb4:	mov	r8, r0
   1bcb8:	movne	r0, #0
   1bcbc:	moveq	r0, #1
   1bcc0:	ldr	r3, [r8]
   1bcc4:	orrs	r0, r0, r5, lsr #31
   1bcc8:	str	r3, [sp, #24]
   1bccc:	bne	1be38 <__assert_fail@plt+0xaa54>
   1bcd0:	ldr	r2, [r4, #4]
   1bcd4:	cmp	r5, r2
   1bcd8:	blt	1bd38 <__assert_fail@plt+0xa954>
   1bcdc:	add	r7, r4, #8
   1bce0:	cmp	r6, r7
   1bce4:	str	r2, [sp, #36]	; 0x24
   1bce8:	beq	1be08 <__assert_fail@plt+0xaa24>
   1bcec:	mov	r3, #8
   1bcf0:	sub	r2, r5, r2
   1bcf4:	mov	r0, r6
   1bcf8:	str	r3, [sp]
   1bcfc:	add	r2, r2, #1
   1bd00:	mvn	r3, #-2147483648	; 0x80000000
   1bd04:	add	r1, sp, #36	; 0x24
   1bd08:	bl	1d28c <__assert_fail@plt+0xbea8>
   1bd0c:	mov	r6, r0
   1bd10:	str	r0, [r4]
   1bd14:	ldr	r0, [r4, #4]
   1bd18:	ldr	r2, [sp, #36]	; 0x24
   1bd1c:	mov	r1, #0
   1bd20:	sub	r2, r2, r0
   1bd24:	add	r0, r6, r0, lsl #3
   1bd28:	lsl	r2, r2, #3
   1bd2c:	bl	112e8 <memset@plt>
   1bd30:	ldr	r3, [sp, #36]	; 0x24
   1bd34:	str	r3, [r4, #4]
   1bd38:	ldr	r2, [r4, #56]	; 0x38
   1bd3c:	add	fp, r6, r5, lsl #3
   1bd40:	ldr	r1, [r4, #20]
   1bd44:	ldr	r9, [r6, r5, lsl #3]
   1bd48:	ldr	r7, [fp, #4]
   1bd4c:	ldr	r3, [r4, #16]
   1bd50:	ldr	ip, [r4, #60]	; 0x3c
   1bd54:	str	r2, [sp, #12]
   1bd58:	ldr	r2, [pc, #224]	; 1be40 <__assert_fail@plt+0xaa5c>
   1bd5c:	orr	r1, r1, #1
   1bd60:	str	r1, [sp, #28]
   1bd64:	str	r1, [sp, #4]
   1bd68:	str	r2, [sp, #8]
   1bd6c:	str	r3, [sp]
   1bd70:	mov	r0, r7
   1bd74:	mov	r1, r9
   1bd78:	str	ip, [sp, #16]
   1bd7c:	mvn	r3, #0
   1bd80:	mov	r2, sl
   1bd84:	bl	18150 <__assert_fail@plt+0x6d6c>
   1bd88:	cmp	r9, r0
   1bd8c:	bhi	1bdf4 <__assert_fail@plt+0xaa10>
   1bd90:	ldr	r3, [pc, #172]	; 1be44 <__assert_fail@plt+0xaa60>
   1bd94:	add	r9, r0, #1
   1bd98:	cmp	r7, r3
   1bd9c:	str	r9, [r6, r5, lsl #3]
   1bda0:	beq	1bdac <__assert_fail@plt+0xa9c8>
   1bda4:	mov	r0, r7
   1bda8:	bl	15da0 <__assert_fail@plt+0x49bc>
   1bdac:	mov	r0, r9
   1bdb0:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1bdb4:	ldr	ip, [r4, #60]	; 0x3c
   1bdb8:	ldr	r3, [r4, #16]
   1bdbc:	ldr	lr, [r4, #56]	; 0x38
   1bdc0:	ldr	r4, [pc, #120]	; 1be40 <__assert_fail@plt+0xaa5c>
   1bdc4:	mov	r2, sl
   1bdc8:	mov	r1, r9
   1bdcc:	str	r0, [fp, #4]
   1bdd0:	str	r4, [sp, #8]
   1bdd4:	ldr	r4, [sp, #28]
   1bdd8:	str	r3, [sp]
   1bddc:	str	r4, [sp, #4]
   1bde0:	str	ip, [sp, #16]
   1bde4:	str	lr, [sp, #12]
   1bde8:	mvn	r3, #0
   1bdec:	mov	r7, r0
   1bdf0:	bl	18150 <__assert_fail@plt+0x6d6c>
   1bdf4:	ldr	r3, [sp, #24]
   1bdf8:	mov	r0, r7
   1bdfc:	str	r3, [r8]
   1be00:	add	sp, sp, #44	; 0x2c
   1be04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be08:	mov	r3, #8
   1be0c:	sub	r2, r5, r2
   1be10:	str	r3, [sp]
   1be14:	add	r1, sp, #36	; 0x24
   1be18:	add	r2, r2, #1
   1be1c:	mvn	r3, #-2147483648	; 0x80000000
   1be20:	bl	1d28c <__assert_fail@plt+0xbea8>
   1be24:	mov	r6, r0
   1be28:	ldm	r7, {r0, r1}
   1be2c:	str	r6, [r4]
   1be30:	stm	r6, {r0, r1}
   1be34:	b	1bd14 <__assert_fail@plt+0xa930>
   1be38:	bl	113cc <abort@plt>
   1be3c:	andeq	r3, r3, r8, lsl #3
   1be40:	andeq	r3, r3, r0, lsr #3
   1be44:	andeq	r3, r3, r4, ror #5
   1be48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be4c:	sub	sp, sp, #44	; 0x2c
   1be50:	mov	sl, r0
   1be54:	bl	112c4 <__errno_location@plt>
   1be58:	ldr	r4, [pc, #348]	; 1bfbc <__assert_fail@plt+0xabd8>
   1be5c:	ldr	r2, [r4, #4]
   1be60:	ldr	r5, [r4]
   1be64:	cmp	r2, #0
   1be68:	ldr	r3, [r0]
   1be6c:	mov	r8, r0
   1be70:	str	r3, [sp, #28]
   1be74:	bgt	1bed0 <__assert_fail@plt+0xaaec>
   1be78:	add	r6, r4, #8
   1be7c:	cmp	r5, r6
   1be80:	str	r2, [sp, #36]	; 0x24
   1be84:	beq	1bf8c <__assert_fail@plt+0xaba8>
   1be88:	mov	r3, #8
   1be8c:	mov	r0, r5
   1be90:	str	r3, [sp]
   1be94:	rsb	r2, r2, #1
   1be98:	mvn	r3, #-2147483648	; 0x80000000
   1be9c:	add	r1, sp, #36	; 0x24
   1bea0:	bl	1d28c <__assert_fail@plt+0xbea8>
   1bea4:	mov	r5, r0
   1bea8:	str	r0, [r4]
   1beac:	ldr	r0, [r4, #4]
   1beb0:	ldr	r2, [sp, #36]	; 0x24
   1beb4:	mov	r1, #0
   1beb8:	sub	r2, r2, r0
   1bebc:	add	r0, r5, r0, lsl #3
   1bec0:	lsl	r2, r2, #3
   1bec4:	bl	112e8 <memset@plt>
   1bec8:	ldr	r3, [sp, #36]	; 0x24
   1becc:	str	r3, [r4, #4]
   1bed0:	ldr	r7, [r4, #20]
   1bed4:	ldr	r9, [r5]
   1bed8:	ldr	r6, [r5, #4]
   1bedc:	ldr	r2, [r4, #56]	; 0x38
   1bee0:	ldr	r3, [r4, #16]
   1bee4:	ldr	ip, [r4, #60]	; 0x3c
   1bee8:	ldr	fp, [pc, #208]	; 1bfc0 <__assert_fail@plt+0xabdc>
   1beec:	orr	r7, r7, #1
   1bef0:	str	r2, [sp, #12]
   1bef4:	str	r3, [sp]
   1bef8:	str	r7, [sp, #4]
   1befc:	mov	r1, r9
   1bf00:	mov	r0, r6
   1bf04:	str	ip, [sp, #16]
   1bf08:	str	fp, [sp, #8]
   1bf0c:	mvn	r3, #0
   1bf10:	mov	r2, sl
   1bf14:	bl	18150 <__assert_fail@plt+0x6d6c>
   1bf18:	cmp	r9, r0
   1bf1c:	bhi	1bf78 <__assert_fail@plt+0xab94>
   1bf20:	ldr	r3, [pc, #156]	; 1bfc4 <__assert_fail@plt+0xabe0>
   1bf24:	add	r9, r0, #1
   1bf28:	cmp	r6, r3
   1bf2c:	str	r9, [r5]
   1bf30:	beq	1bf3c <__assert_fail@plt+0xab58>
   1bf34:	mov	r0, r6
   1bf38:	bl	15da0 <__assert_fail@plt+0x49bc>
   1bf3c:	mov	r0, r9
   1bf40:	bl	1d070 <__assert_fail@plt+0xbc8c>
   1bf44:	ldr	ip, [r4, #60]	; 0x3c
   1bf48:	ldr	r3, [r4, #16]
   1bf4c:	ldr	lr, [r4, #56]	; 0x38
   1bf50:	mov	r2, sl
   1bf54:	mov	r1, r9
   1bf58:	str	r0, [r5, #4]
   1bf5c:	str	r3, [sp]
   1bf60:	stmib	sp, {r7, fp}
   1bf64:	str	ip, [sp, #16]
   1bf68:	str	lr, [sp, #12]
   1bf6c:	mvn	r3, #0
   1bf70:	mov	r6, r0
   1bf74:	bl	18150 <__assert_fail@plt+0x6d6c>
   1bf78:	ldr	r3, [sp, #28]
   1bf7c:	mov	r0, r6
   1bf80:	str	r3, [r8]
   1bf84:	add	sp, sp, #44	; 0x2c
   1bf88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf8c:	mov	r3, #8
   1bf90:	str	r3, [sp]
   1bf94:	add	r1, sp, #36	; 0x24
   1bf98:	rsb	r2, r2, #1
   1bf9c:	mvn	r3, #-2147483648	; 0x80000000
   1bfa0:	mov	r0, #0
   1bfa4:	bl	1d28c <__assert_fail@plt+0xbea8>
   1bfa8:	mov	r5, r0
   1bfac:	ldm	r6, {r0, r1}
   1bfb0:	str	r5, [r4]
   1bfb4:	stm	r5, {r0, r1}
   1bfb8:	b	1beac <__assert_fail@plt+0xaac8>
   1bfbc:	andeq	r3, r3, r8, lsl #3
   1bfc0:	andeq	r3, r3, r0, lsr #3
   1bfc4:	andeq	r3, r3, r4, ror #5
   1bfc8:	push	{r4, r5, r6, lr}
   1bfcc:	mov	r5, r1
   1bfd0:	mov	r1, #0
   1bfd4:	mov	r4, r2
   1bfd8:	bl	11354 <setlocale@plt>
   1bfdc:	subs	r6, r0, #0
   1bfe0:	beq	1c03c <__assert_fail@plt+0xac58>
   1bfe4:	bl	11294 <strlen@plt>
   1bfe8:	cmp	r4, r0
   1bfec:	bhi	1c024 <__assert_fail@plt+0xac40>
   1bff0:	cmp	r4, #0
   1bff4:	bne	1c000 <__assert_fail@plt+0xac1c>
   1bff8:	mov	r0, #34	; 0x22
   1bffc:	pop	{r4, r5, r6, pc}
   1c000:	sub	r4, r4, #1
   1c004:	mov	r1, r6
   1c008:	mov	r2, r4
   1c00c:	mov	r0, r5
   1c010:	bl	1112c <memcpy@plt>
   1c014:	mov	r3, #0
   1c018:	strb	r3, [r5, r4]
   1c01c:	mov	r0, #34	; 0x22
   1c020:	pop	{r4, r5, r6, pc}
   1c024:	add	r2, r0, #1
   1c028:	mov	r1, r6
   1c02c:	mov	r0, r5
   1c030:	bl	1112c <memcpy@plt>
   1c034:	mov	r0, #0
   1c038:	pop	{r4, r5, r6, pc}
   1c03c:	cmp	r4, #0
   1c040:	beq	1c050 <__assert_fail@plt+0xac6c>
   1c044:	strb	r6, [r5]
   1c048:	mov	r0, #22
   1c04c:	pop	{r4, r5, r6, pc}
   1c050:	mov	r0, #22
   1c054:	pop	{r4, r5, r6, pc}
   1c058:	mov	r1, #0
   1c05c:	b	11354 <setlocale@plt>
   1c060:	push	{r4, r5, r6, r7, r8, lr}
   1c064:	mov	r5, r0
   1c068:	ldr	r0, [pc, #296]	; 1c198 <__assert_fail@plt+0xadb4>
   1c06c:	bl	11210 <getenv@plt>
   1c070:	ldrb	r3, [r5, #4]
   1c074:	subs	r6, r0, #0
   1c078:	beq	1c16c <__assert_fail@plt+0xad88>
   1c07c:	cmp	r3, #0
   1c080:	beq	1c0a4 <__assert_fail@plt+0xacc0>
   1c084:	mov	r1, r6
   1c088:	add	r0, r5, #5
   1c08c:	bl	110c0 <strcmp@plt>
   1c090:	cmp	r0, #0
   1c094:	bne	1c0a4 <__assert_fail@plt+0xacc0>
   1c098:	mov	r4, #1
   1c09c:	mov	r0, r4
   1c0a0:	pop	{r4, r5, r6, r7, r8, pc}
   1c0a4:	mov	r0, r6
   1c0a8:	bl	11294 <strlen@plt>
   1c0ac:	add	r7, r0, #1
   1c0b0:	cmp	r7, #58	; 0x3a
   1c0b4:	movls	r0, #64	; 0x40
   1c0b8:	addhi	r0, r0, #10
   1c0bc:	bichi	r0, r0, #3
   1c0c0:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1c0c4:	subs	r4, r0, #0
   1c0c8:	beq	1c190 <__assert_fail@plt+0xadac>
   1c0cc:	mov	r3, r4
   1c0d0:	mov	r8, #0
   1c0d4:	mov	r2, #1
   1c0d8:	strb	r2, [r4, #4]
   1c0dc:	str	r8, [r4]
   1c0e0:	mov	r1, r6
   1c0e4:	strb	r8, [r3, #5]!
   1c0e8:	mov	r2, r7
   1c0ec:	mov	r0, r3
   1c0f0:	bl	1112c <memcpy@plt>
   1c0f4:	strb	r8, [r0, r7]
   1c0f8:	ldrb	r3, [r5, #4]
   1c0fc:	cmp	r3, #0
   1c100:	beq	1c150 <__assert_fail@plt+0xad6c>
   1c104:	add	r1, r5, #5
   1c108:	mov	r2, #1
   1c10c:	ldr	r0, [pc, #132]	; 1c198 <__assert_fail@plt+0xadb4>
   1c110:	bl	112ac <setenv@plt>
   1c114:	cmp	r0, #0
   1c118:	beq	1c160 <__assert_fail@plt+0xad7c>
   1c11c:	bl	112c4 <__errno_location@plt>
   1c120:	cmp	r4, #1
   1c124:	mov	r6, r0
   1c128:	ldr	r7, [r0]
   1c12c:	beq	1c144 <__assert_fail@plt+0xad60>
   1c130:	ldr	r5, [r4]
   1c134:	mov	r0, r4
   1c138:	bl	15da0 <__assert_fail@plt+0x49bc>
   1c13c:	subs	r4, r5, #0
   1c140:	bne	1c130 <__assert_fail@plt+0xad4c>
   1c144:	str	r7, [r6]
   1c148:	mov	r4, #0
   1c14c:	b	1c09c <__assert_fail@plt+0xacb8>
   1c150:	ldr	r0, [pc, #64]	; 1c198 <__assert_fail@plt+0xadb4>
   1c154:	bl	113b4 <unsetenv@plt>
   1c158:	cmp	r0, #0
   1c15c:	bne	1c11c <__assert_fail@plt+0xad38>
   1c160:	bl	111b0 <tzset@plt>
   1c164:	mov	r0, r4
   1c168:	pop	{r4, r5, r6, r7, r8, pc}
   1c16c:	cmp	r3, #0
   1c170:	beq	1c098 <__assert_fail@plt+0xacb4>
   1c174:	mov	r0, #64	; 0x40
   1c178:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1c17c:	subs	r4, r0, #0
   1c180:	strne	r6, [r4]
   1c184:	strbne	r6, [r4, #4]
   1c188:	strbne	r6, [r4, #5]
   1c18c:	bne	1c0f8 <__assert_fail@plt+0xad14>
   1c190:	mov	r4, #0
   1c194:	b	1c09c <__assert_fail@plt+0xacb8>
   1c198:	andeq	r1, r2, r0, asr #25
   1c19c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c1a0:	ldr	r6, [r1, #40]	; 0x28
   1c1a4:	cmp	r6, #0
   1c1a8:	beq	1c2a4 <__assert_fail@plt+0xaec0>
   1c1ac:	cmp	r1, r6
   1c1b0:	mov	r7, r1
   1c1b4:	mov	r5, r0
   1c1b8:	bhi	1c1c8 <__assert_fail@plt+0xade4>
   1c1bc:	add	r3, r1, #44	; 0x2c
   1c1c0:	cmp	r6, r3
   1c1c4:	bcc	1c2a4 <__assert_fail@plt+0xaec0>
   1c1c8:	ldrb	r3, [r6]
   1c1cc:	cmp	r3, #0
   1c1d0:	addne	r4, r5, #5
   1c1d4:	beq	1c29c <__assert_fail@plt+0xaeb8>
   1c1d8:	mov	r1, r6
   1c1dc:	mov	r0, r4
   1c1e0:	bl	110c0 <strcmp@plt>
   1c1e4:	add	r2, r5, #5
   1c1e8:	cmp	r0, #0
   1c1ec:	mov	r0, r4
   1c1f0:	beq	1c290 <__assert_fail@plt+0xaeac>
   1c1f4:	ldrb	r3, [r4]
   1c1f8:	cmp	r3, #0
   1c1fc:	bne	1c214 <__assert_fail@plt+0xae30>
   1c200:	cmp	r4, r2
   1c204:	bne	1c2ac <__assert_fail@plt+0xaec8>
   1c208:	ldrb	r3, [r5, #4]
   1c20c:	cmp	r3, #0
   1c210:	beq	1c2ac <__assert_fail@plt+0xaec8>
   1c214:	bl	11294 <strlen@plt>
   1c218:	add	r0, r0, #1
   1c21c:	ldrb	r3, [r4, r0]!
   1c220:	cmp	r3, #0
   1c224:	bne	1c1d8 <__assert_fail@plt+0xadf4>
   1c228:	ldr	r3, [r5]
   1c22c:	cmp	r3, #0
   1c230:	addne	r4, r3, #5
   1c234:	movne	r5, r3
   1c238:	b	1c1d8 <__assert_fail@plt+0xadf4>
   1c23c:	cmp	r8, #58	; 0x3a
   1c240:	addhi	r0, r0, #10
   1c244:	bichi	r0, r0, #3
   1c248:	movls	r0, #64	; 0x40
   1c24c:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1c250:	subs	r9, r0, #0
   1c254:	beq	1c2e4 <__assert_fail@plt+0xaf00>
   1c258:	mov	r3, r9
   1c25c:	mov	sl, #0
   1c260:	mov	r2, #1
   1c264:	strb	r2, [r9, #4]
   1c268:	str	sl, [r9]
   1c26c:	mov	r1, r6
   1c270:	strb	sl, [r3, #5]!
   1c274:	mov	r2, r8
   1c278:	mov	r0, r3
   1c27c:	bl	1112c <memcpy@plt>
   1c280:	mov	r4, r0
   1c284:	strb	sl, [r0, r8]
   1c288:	str	r9, [r5]
   1c28c:	strb	sl, [r9, #4]
   1c290:	str	r4, [r7, #40]	; 0x28
   1c294:	mov	r0, #1
   1c298:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c29c:	ldr	r4, [pc, #76]	; 1c2f0 <__assert_fail@plt+0xaf0c>
   1c2a0:	b	1c290 <__assert_fail@plt+0xaeac>
   1c2a4:	mov	r0, #1
   1c2a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c2ac:	mov	r0, r6
   1c2b0:	bl	11294 <strlen@plt>
   1c2b4:	add	r3, r5, #64	; 0x40
   1c2b8:	sub	r3, r3, r4
   1c2bc:	add	r8, r0, #1
   1c2c0:	cmp	r8, r3
   1c2c4:	bge	1c23c <__assert_fail@plt+0xae58>
   1c2c8:	mov	r1, r6
   1c2cc:	mov	r2, r8
   1c2d0:	mov	r0, r4
   1c2d4:	bl	1112c <memcpy@plt>
   1c2d8:	mov	r3, #0
   1c2dc:	strb	r3, [r4, r8]
   1c2e0:	b	1c290 <__assert_fail@plt+0xaeac>
   1c2e4:	mov	r0, r9
   1c2e8:	str	r9, [r5]
   1c2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c2f0:	andeq	r0, r2, r8, asr #19
   1c2f4:	push	{r4, r5, r6, r7, r8, lr}
   1c2f8:	subs	r7, r0, #0
   1c2fc:	beq	1c358 <__assert_fail@plt+0xaf74>
   1c300:	bl	11294 <strlen@plt>
   1c304:	add	r5, r0, #1
   1c308:	cmp	r5, #58	; 0x3a
   1c30c:	addhi	r0, r0, #10
   1c310:	bichi	r0, r0, #3
   1c314:	movls	r0, #64	; 0x40
   1c318:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1c31c:	subs	r4, r0, #0
   1c320:	beq	1c350 <__assert_fail@plt+0xaf6c>
   1c324:	mov	r3, r4
   1c328:	mov	r6, #0
   1c32c:	mov	r2, #1
   1c330:	strb	r2, [r4, #4]
   1c334:	str	r6, [r4]
   1c338:	mov	r1, r7
   1c33c:	strb	r6, [r3, #5]!
   1c340:	mov	r2, r5
   1c344:	mov	r0, r3
   1c348:	bl	1112c <memcpy@plt>
   1c34c:	strb	r6, [r0, r5]
   1c350:	mov	r0, r4
   1c354:	pop	{r4, r5, r6, r7, r8, pc}
   1c358:	mov	r0, #64	; 0x40
   1c35c:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1c360:	subs	r4, r0, #0
   1c364:	beq	1c350 <__assert_fail@plt+0xaf6c>
   1c368:	str	r7, [r4]
   1c36c:	strb	r7, [r4, #4]
   1c370:	strb	r7, [r4, #5]
   1c374:	mov	r0, r4
   1c378:	pop	{r4, r5, r6, r7, r8, pc}
   1c37c:	cmp	r0, #1
   1c380:	bxeq	lr
   1c384:	cmp	r0, #0
   1c388:	beq	1c3a4 <__assert_fail@plt+0xafc0>
   1c38c:	push	{r4, lr}
   1c390:	ldr	r4, [r0]
   1c394:	bl	15da0 <__assert_fail@plt+0x49bc>
   1c398:	subs	r0, r4, #0
   1c39c:	bne	1c390 <__assert_fail@plt+0xafac>
   1c3a0:	pop	{r4, pc}
   1c3a4:	bx	lr
   1c3a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c3ac:	subs	r8, r0, #0
   1c3b0:	mov	r5, r1
   1c3b4:	mov	r6, r2
   1c3b8:	beq	1c488 <__assert_fail@plt+0xb0a4>
   1c3bc:	bl	1c060 <__assert_fail@plt+0xac7c>
   1c3c0:	subs	r4, r0, #0
   1c3c4:	beq	1c470 <__assert_fail@plt+0xb08c>
   1c3c8:	mov	r0, r5
   1c3cc:	mov	r1, r6
   1c3d0:	bl	11180 <localtime_r@plt>
   1c3d4:	subs	r7, r0, #0
   1c3d8:	beq	1c468 <__assert_fail@plt+0xb084>
   1c3dc:	mov	r0, r8
   1c3e0:	mov	r1, r6
   1c3e4:	bl	1c19c <__assert_fail@plt+0xadb8>
   1c3e8:	cmp	r4, #1
   1c3ec:	mov	r7, r0
   1c3f0:	beq	1c44c <__assert_fail@plt+0xb068>
   1c3f4:	bl	112c4 <__errno_location@plt>
   1c3f8:	ldrb	r3, [r4, #4]
   1c3fc:	cmp	r3, #0
   1c400:	mov	r8, r0
   1c404:	ldr	r9, [r0]
   1c408:	beq	1c47c <__assert_fail@plt+0xb098>
   1c40c:	mov	r2, #1
   1c410:	add	r1, r4, #5
   1c414:	ldr	r0, [pc, #124]	; 1c498 <__assert_fail@plt+0xb0b4>
   1c418:	bl	112ac <setenv@plt>
   1c41c:	cmp	r0, #0
   1c420:	beq	1c45c <__assert_fail@plt+0xb078>
   1c424:	ldr	r9, [r8]
   1c428:	mov	sl, #0
   1c42c:	ldr	r5, [r4]
   1c430:	mov	r0, r4
   1c434:	bl	15da0 <__assert_fail@plt+0x49bc>
   1c438:	subs	r4, r5, #0
   1c43c:	bne	1c42c <__assert_fail@plt+0xb048>
   1c440:	cmp	sl, #0
   1c444:	str	r9, [r8]
   1c448:	beq	1c470 <__assert_fail@plt+0xb08c>
   1c44c:	cmp	r7, #0
   1c450:	beq	1c470 <__assert_fail@plt+0xb08c>
   1c454:	mov	r0, r6
   1c458:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c45c:	bl	111b0 <tzset@plt>
   1c460:	mov	sl, #1
   1c464:	b	1c42c <__assert_fail@plt+0xb048>
   1c468:	cmp	r4, #1
   1c46c:	bne	1c3f4 <__assert_fail@plt+0xb010>
   1c470:	mov	r6, #0
   1c474:	mov	r0, r6
   1c478:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c47c:	ldr	r0, [pc, #20]	; 1c498 <__assert_fail@plt+0xb0b4>
   1c480:	bl	113b4 <unsetenv@plt>
   1c484:	b	1c41c <__assert_fail@plt+0xb038>
   1c488:	mov	r0, r5
   1c48c:	mov	r1, r2
   1c490:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c494:	b	110b4 <gmtime_r@plt>
   1c498:	andeq	r1, r2, r0, asr #25
   1c49c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4a0:	subs	r5, r0, #0
   1c4a4:	sub	sp, sp, #52	; 0x34
   1c4a8:	mov	r6, r1
   1c4ac:	beq	1c5dc <__assert_fail@plt+0xb1f8>
   1c4b0:	bl	1c060 <__assert_fail@plt+0xac7c>
   1c4b4:	subs	r4, r0, #0
   1c4b8:	beq	1c5f4 <__assert_fail@plt+0xb210>
   1c4bc:	ldm	r6, {r1, r2, ip}
   1c4c0:	ldr	r0, [r6, #12]
   1c4c4:	ldr	r3, [r6, #16]
   1c4c8:	str	r1, [sp, #4]
   1c4cc:	str	r2, [sp, #8]
   1c4d0:	ldr	r1, [r6, #20]
   1c4d4:	ldr	r2, [r6, #32]
   1c4d8:	str	r0, [sp, #16]
   1c4dc:	str	r3, [sp, #20]
   1c4e0:	add	r0, sp, #4
   1c4e4:	mvn	r3, #0
   1c4e8:	str	r3, [sp, #32]
   1c4ec:	str	ip, [sp, #12]
   1c4f0:	str	r1, [sp, #24]
   1c4f4:	str	r2, [sp, #36]	; 0x24
   1c4f8:	bl	110e4 <mktime@plt>
   1c4fc:	ldr	r3, [sp, #32]
   1c500:	cmp	r3, #0
   1c504:	mov	r8, r0
   1c508:	blt	1c5a8 <__assert_fail@plt+0xb1c4>
   1c50c:	mov	r0, r5
   1c510:	add	r1, sp, #4
   1c514:	bl	1c19c <__assert_fail@plt+0xadb8>
   1c518:	cmp	r4, #1
   1c51c:	mov	sl, r0
   1c520:	beq	1c574 <__assert_fail@plt+0xb190>
   1c524:	bl	112c4 <__errno_location@plt>
   1c528:	ldrb	r3, [r4, #4]
   1c52c:	cmp	r3, #0
   1c530:	mov	r7, r0
   1c534:	ldr	r9, [r0]
   1c538:	bne	1c5b8 <__assert_fail@plt+0xb1d4>
   1c53c:	ldr	r0, [pc, #184]	; 1c5fc <__assert_fail@plt+0xb218>
   1c540:	bl	113b4 <unsetenv@plt>
   1c544:	cmp	r0, #0
   1c548:	beq	1c5d0 <__assert_fail@plt+0xb1ec>
   1c54c:	ldr	r9, [r7]
   1c550:	mov	fp, #0
   1c554:	ldr	r5, [r4]
   1c558:	mov	r0, r4
   1c55c:	bl	15da0 <__assert_fail@plt+0x49bc>
   1c560:	subs	r4, r5, #0
   1c564:	bne	1c554 <__assert_fail@plt+0xb170>
   1c568:	cmp	fp, #0
   1c56c:	str	r9, [r7]
   1c570:	beq	1c5f4 <__assert_fail@plt+0xb210>
   1c574:	cmp	sl, #0
   1c578:	beq	1c5f4 <__assert_fail@plt+0xb210>
   1c57c:	add	lr, sp, #4
   1c580:	mov	ip, r6
   1c584:	ldm	lr!, {r0, r1, r2, r3}
   1c588:	stmia	ip!, {r0, r1, r2, r3}
   1c58c:	ldm	lr!, {r0, r1, r2, r3}
   1c590:	stmia	ip!, {r0, r1, r2, r3}
   1c594:	ldm	lr, {r0, r1, r2}
   1c598:	stm	ip, {r0, r1, r2}
   1c59c:	mov	r0, r8
   1c5a0:	add	sp, sp, #52	; 0x34
   1c5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5a8:	cmp	r4, #1
   1c5ac:	beq	1c5f4 <__assert_fail@plt+0xb210>
   1c5b0:	mov	sl, #0
   1c5b4:	b	1c524 <__assert_fail@plt+0xb140>
   1c5b8:	mov	r2, #1
   1c5bc:	add	r1, r4, #5
   1c5c0:	ldr	r0, [pc, #52]	; 1c5fc <__assert_fail@plt+0xb218>
   1c5c4:	bl	112ac <setenv@plt>
   1c5c8:	cmp	r0, #0
   1c5cc:	bne	1c54c <__assert_fail@plt+0xb168>
   1c5d0:	bl	111b0 <tzset@plt>
   1c5d4:	mov	fp, #1
   1c5d8:	b	1c554 <__assert_fail@plt+0xb170>
   1c5dc:	mov	r0, r1
   1c5e0:	bl	11378 <timegm@plt>
   1c5e4:	mov	r8, r0
   1c5e8:	mov	r0, r8
   1c5ec:	add	sp, sp, #52	; 0x34
   1c5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5f4:	mvn	r8, #0
   1c5f8:	b	1c59c <__assert_fail@plt+0xb1b8>
   1c5fc:	andeq	r1, r2, r0, asr #25
   1c600:	mov	r2, #3
   1c604:	mov	r1, #0
   1c608:	b	1fda0 <__assert_fail@plt+0xe9bc>
   1c60c:	push	{r4, r5, r6, lr}
   1c610:	sub	sp, sp, #32
   1c614:	cmp	r1, #0
   1c618:	mov	r4, r0
   1c61c:	ldr	r5, [sp, #48]	; 0x30
   1c620:	ldr	r6, [sp, #52]	; 0x34
   1c624:	beq	1c93c <__assert_fail@plt+0xb558>
   1c628:	stm	sp, {r2, r3}
   1c62c:	mov	r3, r1
   1c630:	ldr	r2, [pc, #808]	; 1c960 <__assert_fail@plt+0xb57c>
   1c634:	mov	r1, #1
   1c638:	bl	1130c <__fprintf_chk@plt>
   1c63c:	mov	r2, #5
   1c640:	ldr	r1, [pc, #796]	; 1c964 <__assert_fail@plt+0xb580>
   1c644:	mov	r0, #0
   1c648:	bl	11168 <dcgettext@plt>
   1c64c:	ldr	r3, [pc, #788]	; 1c968 <__assert_fail@plt+0xb584>
   1c650:	ldr	r2, [pc, #788]	; 1c96c <__assert_fail@plt+0xb588>
   1c654:	str	r3, [sp]
   1c658:	mov	r1, #1
   1c65c:	mov	r3, r0
   1c660:	mov	r0, r4
   1c664:	bl	1130c <__fprintf_chk@plt>
   1c668:	mov	r1, r4
   1c66c:	mov	r0, #10
   1c670:	bl	1115c <fputc_unlocked@plt>
   1c674:	mov	r2, #5
   1c678:	ldr	r1, [pc, #752]	; 1c970 <__assert_fail@plt+0xb58c>
   1c67c:	mov	r0, #0
   1c680:	bl	11168 <dcgettext@plt>
   1c684:	mov	r1, #1
   1c688:	ldr	r3, [pc, #740]	; 1c974 <__assert_fail@plt+0xb590>
   1c68c:	mov	r2, r0
   1c690:	mov	r0, r4
   1c694:	bl	1130c <__fprintf_chk@plt>
   1c698:	mov	r1, r4
   1c69c:	mov	r0, #10
   1c6a0:	bl	1115c <fputc_unlocked@plt>
   1c6a4:	cmp	r6, #9
   1c6a8:	ldrls	pc, [pc, r6, lsl #2]
   1c6ac:	b	1c954 <__assert_fail@plt+0xb570>
   1c6b0:	andeq	ip, r1, r4, lsr r7
   1c6b4:	andeq	ip, r1, ip, lsr r7
   1c6b8:	andeq	ip, r1, r8, ror #14
   1c6bc:	muleq	r1, ip, r7
   1c6c0:	ldrdeq	ip, [r1], -r8
   1c6c4:	andeq	ip, r1, r4, lsl r8
   1c6c8:	andeq	ip, r1, r0, asr r8
   1c6cc:	muleq	r1, r4, r8
   1c6d0:	andeq	ip, r1, r4, ror #17
   1c6d4:	ldrdeq	ip, [r1], -r8
   1c6d8:	ldr	r1, [pc, #664]	; 1c978 <__assert_fail@plt+0xb594>
   1c6dc:	mov	r2, #5
   1c6e0:	mov	r0, #0
   1c6e4:	bl	11168 <dcgettext@plt>
   1c6e8:	ldr	ip, [r5, #32]
   1c6ec:	ldr	r1, [r5, #28]
   1c6f0:	ldr	r2, [r5, #24]
   1c6f4:	ldr	r3, [r5]
   1c6f8:	ldr	r6, [r5, #20]
   1c6fc:	str	ip, [sp, #28]
   1c700:	ldr	lr, [r5, #16]
   1c704:	str	r1, [sp, #24]
   1c708:	ldr	ip, [r5, #12]
   1c70c:	str	r2, [sp, #20]
   1c710:	ldr	r1, [r5, #8]
   1c714:	ldr	r2, [r5, #4]
   1c718:	str	r6, [sp, #16]
   1c71c:	stmib	sp, {r1, ip, lr}
   1c720:	mov	r1, #1
   1c724:	str	r2, [sp]
   1c728:	mov	r2, r0
   1c72c:	mov	r0, r4
   1c730:	bl	1130c <__fprintf_chk@plt>
   1c734:	add	sp, sp, #32
   1c738:	pop	{r4, r5, r6, pc}
   1c73c:	mov	r2, #5
   1c740:	ldr	r1, [pc, #564]	; 1c97c <__assert_fail@plt+0xb598>
   1c744:	mov	r0, #0
   1c748:	bl	11168 <dcgettext@plt>
   1c74c:	ldr	r3, [r5]
   1c750:	mov	r1, #1
   1c754:	mov	r2, r0
   1c758:	mov	r0, r4
   1c75c:	add	sp, sp, #32
   1c760:	pop	{r4, r5, r6, lr}
   1c764:	b	1130c <__fprintf_chk@plt>
   1c768:	mov	r2, #5
   1c76c:	ldr	r1, [pc, #524]	; 1c980 <__assert_fail@plt+0xb59c>
   1c770:	mov	r0, #0
   1c774:	bl	11168 <dcgettext@plt>
   1c778:	ldr	r2, [r5, #4]
   1c77c:	ldr	r3, [r5]
   1c780:	mov	r1, #1
   1c784:	str	r2, [sp, #48]	; 0x30
   1c788:	mov	r2, r0
   1c78c:	mov	r0, r4
   1c790:	add	sp, sp, #32
   1c794:	pop	{r4, r5, r6, lr}
   1c798:	b	1130c <__fprintf_chk@plt>
   1c79c:	mov	r2, #5
   1c7a0:	ldr	r1, [pc, #476]	; 1c984 <__assert_fail@plt+0xb5a0>
   1c7a4:	mov	r0, #0
   1c7a8:	bl	11168 <dcgettext@plt>
   1c7ac:	ldr	r1, [r5, #8]
   1c7b0:	ldr	r2, [r5, #4]
   1c7b4:	ldr	r3, [r5]
   1c7b8:	str	r1, [sp, #52]	; 0x34
   1c7bc:	str	r2, [sp, #48]	; 0x30
   1c7c0:	mov	r1, #1
   1c7c4:	mov	r2, r0
   1c7c8:	mov	r0, r4
   1c7cc:	add	sp, sp, #32
   1c7d0:	pop	{r4, r5, r6, lr}
   1c7d4:	b	1130c <__fprintf_chk@plt>
   1c7d8:	mov	r2, #5
   1c7dc:	ldr	r1, [pc, #420]	; 1c988 <__assert_fail@plt+0xb5a4>
   1c7e0:	mov	r0, #0
   1c7e4:	bl	11168 <dcgettext@plt>
   1c7e8:	ldr	r1, [r5, #8]
   1c7ec:	ldr	ip, [r5, #12]
   1c7f0:	ldr	r2, [r5, #4]
   1c7f4:	ldr	r3, [r5]
   1c7f8:	stmib	sp, {r1, ip}
   1c7fc:	str	r2, [sp]
   1c800:	mov	r1, #1
   1c804:	mov	r2, r0
   1c808:	mov	r0, r4
   1c80c:	bl	1130c <__fprintf_chk@plt>
   1c810:	b	1c734 <__assert_fail@plt+0xb350>
   1c814:	mov	r2, #5
   1c818:	ldr	r1, [pc, #364]	; 1c98c <__assert_fail@plt+0xb5a8>
   1c81c:	mov	r0, #0
   1c820:	bl	11168 <dcgettext@plt>
   1c824:	add	r1, r5, #8
   1c828:	ldr	r2, [r5, #4]
   1c82c:	ldm	r1, {r1, ip, lr}
   1c830:	ldr	r3, [r5]
   1c834:	str	r2, [sp]
   1c838:	stmib	sp, {r1, ip, lr}
   1c83c:	mov	r1, #1
   1c840:	mov	r2, r0
   1c844:	mov	r0, r4
   1c848:	bl	1130c <__fprintf_chk@plt>
   1c84c:	b	1c734 <__assert_fail@plt+0xb350>
   1c850:	mov	r2, #5
   1c854:	ldr	r1, [pc, #308]	; 1c990 <__assert_fail@plt+0xb5ac>
   1c858:	mov	r0, #0
   1c85c:	bl	11168 <dcgettext@plt>
   1c860:	add	r1, r5, #8
   1c864:	ldr	r2, [r5, #4]
   1c868:	ldm	r1, {r1, ip, lr}
   1c86c:	ldr	r6, [r5, #20]
   1c870:	ldr	r3, [r5]
   1c874:	stmib	sp, {r1, ip, lr}
   1c878:	mov	r1, #1
   1c87c:	str	r2, [sp]
   1c880:	str	r6, [sp, #16]
   1c884:	mov	r2, r0
   1c888:	mov	r0, r4
   1c88c:	bl	1130c <__fprintf_chk@plt>
   1c890:	b	1c734 <__assert_fail@plt+0xb350>
   1c894:	mov	r2, #5
   1c898:	ldr	r1, [pc, #244]	; 1c994 <__assert_fail@plt+0xb5b0>
   1c89c:	mov	r0, #0
   1c8a0:	bl	11168 <dcgettext@plt>
   1c8a4:	ldr	r2, [r5, #24]
   1c8a8:	ldr	r3, [r5]
   1c8ac:	ldr	r6, [r5, #20]
   1c8b0:	ldr	lr, [r5, #16]
   1c8b4:	ldr	ip, [r5, #12]
   1c8b8:	str	r2, [sp, #20]
   1c8bc:	ldr	r1, [r5, #8]
   1c8c0:	ldr	r2, [r5, #4]
   1c8c4:	str	r6, [sp, #16]
   1c8c8:	stmib	sp, {r1, ip, lr}
   1c8cc:	mov	r1, #1
   1c8d0:	str	r2, [sp]
   1c8d4:	mov	r2, r0
   1c8d8:	mov	r0, r4
   1c8dc:	bl	1130c <__fprintf_chk@plt>
   1c8e0:	b	1c734 <__assert_fail@plt+0xb350>
   1c8e4:	mov	r2, #5
   1c8e8:	ldr	r1, [pc, #168]	; 1c998 <__assert_fail@plt+0xb5b4>
   1c8ec:	mov	r0, #0
   1c8f0:	bl	11168 <dcgettext@plt>
   1c8f4:	ldr	r1, [r5, #28]
   1c8f8:	ldr	r2, [r5, #24]
   1c8fc:	ldr	r3, [r5]
   1c900:	ldr	r6, [r5, #20]
   1c904:	ldr	lr, [r5, #16]
   1c908:	str	r1, [sp, #24]
   1c90c:	ldr	ip, [r5, #12]
   1c910:	str	r2, [sp, #20]
   1c914:	ldr	r1, [r5, #8]
   1c918:	ldr	r2, [r5, #4]
   1c91c:	str	r6, [sp, #16]
   1c920:	stmib	sp, {r1, ip, lr}
   1c924:	mov	r1, #1
   1c928:	str	r2, [sp]
   1c92c:	mov	r2, r0
   1c930:	mov	r0, r4
   1c934:	bl	1130c <__fprintf_chk@plt>
   1c938:	b	1c734 <__assert_fail@plt+0xb350>
   1c93c:	str	r3, [sp]
   1c940:	mov	r1, #1
   1c944:	mov	r3, r2
   1c948:	ldr	r2, [pc, #76]	; 1c99c <__assert_fail@plt+0xb5b8>
   1c94c:	bl	1130c <__fprintf_chk@plt>
   1c950:	b	1c63c <__assert_fail@plt+0xb258>
   1c954:	mov	r2, #5
   1c958:	ldr	r1, [pc, #64]	; 1c9a0 <__assert_fail@plt+0xb5bc>
   1c95c:	b	1c6e0 <__assert_fail@plt+0xb2fc>
   1c960:	andeq	r2, r2, ip, asr r0
   1c964:	andeq	r2, r2, r0, ror r0
   1c968:	andeq	r0, r0, r6, ror #15
   1c96c:	andeq	r2, r2, r8, asr #6
   1c970:	andeq	r2, r2, r4, ror r0
   1c974:	andeq	r2, r2, r0, lsr #2
   1c978:	andeq	r2, r2, r0, asr r2
   1c97c:	andeq	r2, r2, r4, asr #2
   1c980:	andeq	r2, r2, r4, asr r1
   1c984:	andeq	r2, r2, ip, ror #2
   1c988:	andeq	r2, r2, r8, lsl #3
   1c98c:	andeq	r2, r2, r8, lsr #3
   1c990:	andeq	r2, r2, ip, asr #3
   1c994:	strdeq	r2, [r2], -r4
   1c998:	andeq	r2, r2, r0, lsr #4
   1c99c:	andeq	r2, r2, r8, rrx
   1c9a0:	andeq	r2, r2, r4, lsl #5
   1c9a4:	push	{r4, r5, lr}
   1c9a8:	sub	sp, sp, #12
   1c9ac:	ldr	r5, [sp, #24]
   1c9b0:	ldr	ip, [r5]
   1c9b4:	cmp	ip, #0
   1c9b8:	beq	1c9d4 <__assert_fail@plt+0xb5f0>
   1c9bc:	mov	lr, r5
   1c9c0:	mov	ip, #0
   1c9c4:	ldr	r4, [lr, #4]!
   1c9c8:	add	ip, ip, #1
   1c9cc:	cmp	r4, #0
   1c9d0:	bne	1c9c4 <__assert_fail@plt+0xb5e0>
   1c9d4:	stm	sp, {r5, ip}
   1c9d8:	bl	1c60c <__assert_fail@plt+0xb228>
   1c9dc:	add	sp, sp, #12
   1c9e0:	pop	{r4, r5, pc}
   1c9e4:	push	{r4, r5, lr}
   1c9e8:	sub	sp, sp, #76	; 0x4c
   1c9ec:	mov	r5, r0
   1c9f0:	ldr	ip, [sp, #88]	; 0x58
   1c9f4:	ldr	r0, [ip]
   1c9f8:	cmp	r0, #0
   1c9fc:	str	r0, [sp, #32]
   1ca00:	beq	1cdd4 <__assert_fail@plt+0xb9f0>
   1ca04:	ldr	r0, [ip, #4]
   1ca08:	cmp	r0, #0
   1ca0c:	str	r0, [sp, #36]	; 0x24
   1ca10:	beq	1cddc <__assert_fail@plt+0xb9f8>
   1ca14:	ldr	r0, [ip, #8]
   1ca18:	cmp	r0, #0
   1ca1c:	str	r0, [sp, #40]	; 0x28
   1ca20:	beq	1cde4 <__assert_fail@plt+0xba00>
   1ca24:	ldr	r0, [ip, #12]
   1ca28:	cmp	r0, #0
   1ca2c:	str	r0, [sp, #44]	; 0x2c
   1ca30:	beq	1cdec <__assert_fail@plt+0xba08>
   1ca34:	ldr	r0, [ip, #16]
   1ca38:	cmp	r0, #0
   1ca3c:	str	r0, [sp, #48]	; 0x30
   1ca40:	beq	1cdf4 <__assert_fail@plt+0xba10>
   1ca44:	ldr	r0, [ip, #20]
   1ca48:	cmp	r0, #0
   1ca4c:	str	r0, [sp, #52]	; 0x34
   1ca50:	beq	1cdfc <__assert_fail@plt+0xba18>
   1ca54:	ldr	r0, [ip, #24]
   1ca58:	cmp	r0, #0
   1ca5c:	str	r0, [sp, #56]	; 0x38
   1ca60:	beq	1ce04 <__assert_fail@plt+0xba20>
   1ca64:	ldr	r0, [ip, #28]
   1ca68:	cmp	r0, #0
   1ca6c:	str	r0, [sp, #60]	; 0x3c
   1ca70:	beq	1ce0c <__assert_fail@plt+0xba28>
   1ca74:	ldr	r0, [ip, #32]
   1ca78:	cmp	r0, #0
   1ca7c:	str	r0, [sp, #64]	; 0x40
   1ca80:	beq	1ce14 <__assert_fail@plt+0xba30>
   1ca84:	ldr	r0, [ip, #36]	; 0x24
   1ca88:	cmp	r0, #0
   1ca8c:	movne	r4, #10
   1ca90:	moveq	r4, #9
   1ca94:	cmp	r1, #0
   1ca98:	beq	1cdac <__assert_fail@plt+0xb9c8>
   1ca9c:	stm	sp, {r2, r3}
   1caa0:	mov	r0, r5
   1caa4:	mov	r3, r1
   1caa8:	ldr	r2, [pc, #876]	; 1ce1c <__assert_fail@plt+0xba38>
   1caac:	mov	r1, #1
   1cab0:	bl	1130c <__fprintf_chk@plt>
   1cab4:	mov	r2, #5
   1cab8:	ldr	r1, [pc, #864]	; 1ce20 <__assert_fail@plt+0xba3c>
   1cabc:	mov	r0, #0
   1cac0:	bl	11168 <dcgettext@plt>
   1cac4:	ldr	r3, [pc, #856]	; 1ce24 <__assert_fail@plt+0xba40>
   1cac8:	ldr	r2, [pc, #856]	; 1ce28 <__assert_fail@plt+0xba44>
   1cacc:	str	r3, [sp]
   1cad0:	mov	r1, #1
   1cad4:	mov	r3, r0
   1cad8:	mov	r0, r5
   1cadc:	bl	1130c <__fprintf_chk@plt>
   1cae0:	mov	r1, r5
   1cae4:	mov	r0, #10
   1cae8:	bl	1115c <fputc_unlocked@plt>
   1caec:	mov	r2, #5
   1caf0:	ldr	r1, [pc, #820]	; 1ce2c <__assert_fail@plt+0xba48>
   1caf4:	mov	r0, #0
   1caf8:	bl	11168 <dcgettext@plt>
   1cafc:	mov	r1, #1
   1cb00:	ldr	r3, [pc, #808]	; 1ce30 <__assert_fail@plt+0xba4c>
   1cb04:	mov	r2, r0
   1cb08:	mov	r0, r5
   1cb0c:	bl	1130c <__fprintf_chk@plt>
   1cb10:	mov	r1, r5
   1cb14:	mov	r0, #10
   1cb18:	bl	1115c <fputc_unlocked@plt>
   1cb1c:	cmp	r4, #9
   1cb20:	ldrls	pc, [pc, r4, lsl #2]
   1cb24:	b	1cdc8 <__assert_fail@plt+0xb9e4>
   1cb28:	andeq	ip, r1, ip, lsr #23
   1cb2c:			; <UNDEFINED> instruction: 0x0001cbb4
   1cb30:	andeq	ip, r1, r0, ror #23
   1cb34:	andeq	ip, r1, r4, lsl ip
   1cb38:	andeq	ip, r1, ip, asr #24
   1cb3c:	andeq	ip, r1, r8, lsl #25
   1cb40:	andeq	ip, r1, r4, asr #25
   1cb44:	andeq	ip, r1, r8, lsl #26
   1cb48:	andeq	ip, r1, r4, asr sp
   1cb4c:	andeq	ip, r1, r0, asr fp
   1cb50:	ldr	r1, [pc, #732]	; 1ce34 <__assert_fail@plt+0xba50>
   1cb54:	mov	r2, #5
   1cb58:	mov	r0, #0
   1cb5c:	bl	11168 <dcgettext@plt>
   1cb60:	ldr	ip, [sp, #64]	; 0x40
   1cb64:	ldr	r1, [sp, #60]	; 0x3c
   1cb68:	ldr	r2, [sp, #56]	; 0x38
   1cb6c:	ldr	lr, [sp, #48]	; 0x30
   1cb70:	str	ip, [sp, #28]
   1cb74:	str	r1, [sp, #24]
   1cb78:	ldr	ip, [sp, #44]	; 0x2c
   1cb7c:	ldr	r1, [sp, #40]	; 0x28
   1cb80:	ldr	r4, [sp, #52]	; 0x34
   1cb84:	str	r2, [sp, #20]
   1cb88:	ldr	r2, [sp, #36]	; 0x24
   1cb8c:	stmib	sp, {r1, ip, lr}
   1cb90:	mov	r1, #1
   1cb94:	str	r2, [sp]
   1cb98:	ldr	r3, [sp, #32]
   1cb9c:	str	r4, [sp, #16]
   1cba0:	mov	r2, r0
   1cba4:	mov	r0, r5
   1cba8:	bl	1130c <__fprintf_chk@plt>
   1cbac:	add	sp, sp, #76	; 0x4c
   1cbb0:	pop	{r4, r5, pc}
   1cbb4:	mov	r2, #5
   1cbb8:	ldr	r1, [pc, #632]	; 1ce38 <__assert_fail@plt+0xba54>
   1cbbc:	mov	r0, #0
   1cbc0:	bl	11168 <dcgettext@plt>
   1cbc4:	ldr	r3, [sp, #32]
   1cbc8:	mov	r1, #1
   1cbcc:	mov	r2, r0
   1cbd0:	mov	r0, r5
   1cbd4:	add	sp, sp, #76	; 0x4c
   1cbd8:	pop	{r4, r5, lr}
   1cbdc:	b	1130c <__fprintf_chk@plt>
   1cbe0:	mov	r2, #5
   1cbe4:	ldr	r1, [pc, #592]	; 1ce3c <__assert_fail@plt+0xba58>
   1cbe8:	mov	r0, #0
   1cbec:	bl	11168 <dcgettext@plt>
   1cbf0:	ldr	r2, [sp, #36]	; 0x24
   1cbf4:	ldr	r3, [sp, #32]
   1cbf8:	str	r2, [sp, #88]	; 0x58
   1cbfc:	mov	r1, #1
   1cc00:	mov	r2, r0
   1cc04:	mov	r0, r5
   1cc08:	add	sp, sp, #76	; 0x4c
   1cc0c:	pop	{r4, r5, lr}
   1cc10:	b	1130c <__fprintf_chk@plt>
   1cc14:	mov	r2, #5
   1cc18:	ldr	r1, [pc, #544]	; 1ce40 <__assert_fail@plt+0xba5c>
   1cc1c:	mov	r0, #0
   1cc20:	bl	11168 <dcgettext@plt>
   1cc24:	ldr	r1, [sp, #40]	; 0x28
   1cc28:	ldr	r2, [sp, #36]	; 0x24
   1cc2c:	str	r1, [sp, #4]
   1cc30:	str	r2, [sp]
   1cc34:	ldr	r3, [sp, #32]
   1cc38:	mov	r1, #1
   1cc3c:	mov	r2, r0
   1cc40:	mov	r0, r5
   1cc44:	bl	1130c <__fprintf_chk@plt>
   1cc48:	b	1cbac <__assert_fail@plt+0xb7c8>
   1cc4c:	mov	r2, #5
   1cc50:	ldr	r1, [pc, #492]	; 1ce44 <__assert_fail@plt+0xba60>
   1cc54:	mov	r0, #0
   1cc58:	bl	11168 <dcgettext@plt>
   1cc5c:	ldr	r1, [sp, #40]	; 0x28
   1cc60:	ldr	ip, [sp, #44]	; 0x2c
   1cc64:	ldr	r2, [sp, #36]	; 0x24
   1cc68:	ldr	r3, [sp, #32]
   1cc6c:	stmib	sp, {r1, ip}
   1cc70:	str	r2, [sp]
   1cc74:	mov	r1, #1
   1cc78:	mov	r2, r0
   1cc7c:	mov	r0, r5
   1cc80:	bl	1130c <__fprintf_chk@plt>
   1cc84:	b	1cbac <__assert_fail@plt+0xb7c8>
   1cc88:	mov	r2, #5
   1cc8c:	ldr	r1, [pc, #436]	; 1ce48 <__assert_fail@plt+0xba64>
   1cc90:	mov	r0, #0
   1cc94:	bl	11168 <dcgettext@plt>
   1cc98:	add	r1, sp, #40	; 0x28
   1cc9c:	ldr	r2, [sp, #36]	; 0x24
   1cca0:	ldm	r1, {r1, ip, lr}
   1cca4:	ldr	r3, [sp, #32]
   1cca8:	str	r2, [sp]
   1ccac:	stmib	sp, {r1, ip, lr}
   1ccb0:	mov	r1, #1
   1ccb4:	mov	r2, r0
   1ccb8:	mov	r0, r5
   1ccbc:	bl	1130c <__fprintf_chk@plt>
   1ccc0:	b	1cbac <__assert_fail@plt+0xb7c8>
   1ccc4:	mov	r2, #5
   1ccc8:	ldr	r1, [pc, #380]	; 1ce4c <__assert_fail@plt+0xba68>
   1cccc:	mov	r0, #0
   1ccd0:	bl	11168 <dcgettext@plt>
   1ccd4:	add	r1, sp, #40	; 0x28
   1ccd8:	ldr	r2, [sp, #36]	; 0x24
   1ccdc:	ldm	r1, {r1, ip, lr}
   1cce0:	ldr	r4, [sp, #52]	; 0x34
   1cce4:	str	r2, [sp]
   1cce8:	stmib	sp, {r1, ip, lr}
   1ccec:	mov	r1, #1
   1ccf0:	ldr	r3, [sp, #32]
   1ccf4:	str	r4, [sp, #16]
   1ccf8:	mov	r2, r0
   1ccfc:	mov	r0, r5
   1cd00:	bl	1130c <__fprintf_chk@plt>
   1cd04:	b	1cbac <__assert_fail@plt+0xb7c8>
   1cd08:	mov	r2, #5
   1cd0c:	ldr	r1, [pc, #316]	; 1ce50 <__assert_fail@plt+0xba6c>
   1cd10:	mov	r0, #0
   1cd14:	bl	11168 <dcgettext@plt>
   1cd18:	add	r1, sp, #40	; 0x28
   1cd1c:	ldr	r2, [sp, #56]	; 0x38
   1cd20:	ldm	r1, {r1, ip, lr}
   1cd24:	ldr	r4, [sp, #52]	; 0x34
   1cd28:	str	r2, [sp, #20]
   1cd2c:	ldr	r2, [sp, #36]	; 0x24
   1cd30:	stmib	sp, {r1, ip, lr}
   1cd34:	mov	r1, #1
   1cd38:	str	r2, [sp]
   1cd3c:	ldr	r3, [sp, #32]
   1cd40:	str	r4, [sp, #16]
   1cd44:	mov	r2, r0
   1cd48:	mov	r0, r5
   1cd4c:	bl	1130c <__fprintf_chk@plt>
   1cd50:	b	1cbac <__assert_fail@plt+0xb7c8>
   1cd54:	mov	r2, #5
   1cd58:	ldr	r1, [pc, #244]	; 1ce54 <__assert_fail@plt+0xba70>
   1cd5c:	mov	r0, #0
   1cd60:	bl	11168 <dcgettext@plt>
   1cd64:	ldr	r1, [sp, #60]	; 0x3c
   1cd68:	ldr	r2, [sp, #56]	; 0x38
   1cd6c:	ldr	lr, [sp, #48]	; 0x30
   1cd70:	ldr	ip, [sp, #44]	; 0x2c
   1cd74:	str	r1, [sp, #24]
   1cd78:	ldr	r1, [sp, #40]	; 0x28
   1cd7c:	ldr	r4, [sp, #52]	; 0x34
   1cd80:	str	r2, [sp, #20]
   1cd84:	ldr	r2, [sp, #36]	; 0x24
   1cd88:	stmib	sp, {r1, ip, lr}
   1cd8c:	mov	r1, #1
   1cd90:	str	r2, [sp]
   1cd94:	ldr	r3, [sp, #32]
   1cd98:	str	r4, [sp, #16]
   1cd9c:	mov	r2, r0
   1cda0:	mov	r0, r5
   1cda4:	bl	1130c <__fprintf_chk@plt>
   1cda8:	b	1cbac <__assert_fail@plt+0xb7c8>
   1cdac:	str	r3, [sp]
   1cdb0:	mov	r1, #1
   1cdb4:	mov	r3, r2
   1cdb8:	mov	r0, r5
   1cdbc:	ldr	r2, [pc, #148]	; 1ce58 <__assert_fail@plt+0xba74>
   1cdc0:	bl	1130c <__fprintf_chk@plt>
   1cdc4:	b	1cab4 <__assert_fail@plt+0xb6d0>
   1cdc8:	mov	r2, #5
   1cdcc:	ldr	r1, [pc, #136]	; 1ce5c <__assert_fail@plt+0xba78>
   1cdd0:	b	1cb58 <__assert_fail@plt+0xb774>
   1cdd4:	mov	r4, r0
   1cdd8:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1cddc:	mov	r4, #1
   1cde0:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1cde4:	mov	r4, #2
   1cde8:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1cdec:	mov	r4, #3
   1cdf0:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1cdf4:	mov	r4, #4
   1cdf8:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1cdfc:	mov	r4, #5
   1ce00:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1ce04:	mov	r4, #6
   1ce08:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1ce0c:	mov	r4, #7
   1ce10:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1ce14:	mov	r4, #8
   1ce18:	b	1ca94 <__assert_fail@plt+0xb6b0>
   1ce1c:	andeq	r2, r2, ip, asr r0
   1ce20:	andeq	r2, r2, r0, ror r0
   1ce24:	andeq	r0, r0, r6, ror #15
   1ce28:	andeq	r2, r2, r8, asr #6
   1ce2c:	andeq	r2, r2, r4, ror r0
   1ce30:	andeq	r2, r2, r0, lsr #2
   1ce34:	andeq	r2, r2, r0, asr r2
   1ce38:	andeq	r2, r2, r4, asr #2
   1ce3c:	andeq	r2, r2, r4, asr r1
   1ce40:	andeq	r2, r2, ip, ror #2
   1ce44:	andeq	r2, r2, r8, lsl #3
   1ce48:	andeq	r2, r2, r8, lsr #3
   1ce4c:	andeq	r2, r2, ip, asr #3
   1ce50:	strdeq	r2, [r2], -r4
   1ce54:	andeq	r2, r2, r0, lsr #4
   1ce58:	andeq	r2, r2, r8, rrx
   1ce5c:	andeq	r2, r2, r4, lsl #5
   1ce60:	push	{r3}		; (str r3, [sp, #-4]!)
   1ce64:	push	{lr}		; (str lr, [sp, #-4]!)
   1ce68:	sub	sp, sp, #56	; 0x38
   1ce6c:	add	r3, sp, #64	; 0x40
   1ce70:	ldr	ip, [sp, #64]	; 0x40
   1ce74:	str	r3, [sp, #12]
   1ce78:	cmp	ip, #0
   1ce7c:	str	ip, [sp, #16]
   1ce80:	beq	1cf18 <__assert_fail@plt+0xbb34>
   1ce84:	ldr	ip, [sp, #68]	; 0x44
   1ce88:	cmp	ip, #0
   1ce8c:	str	ip, [sp, #20]
   1ce90:	beq	1cf38 <__assert_fail@plt+0xbb54>
   1ce94:	ldr	ip, [sp, #72]	; 0x48
   1ce98:	cmp	ip, #0
   1ce9c:	str	ip, [sp, #24]
   1cea0:	beq	1cf40 <__assert_fail@plt+0xbb5c>
   1cea4:	ldr	ip, [sp, #76]	; 0x4c
   1cea8:	cmp	ip, #0
   1ceac:	str	ip, [sp, #28]
   1ceb0:	beq	1cf48 <__assert_fail@plt+0xbb64>
   1ceb4:	ldr	ip, [sp, #80]	; 0x50
   1ceb8:	cmp	ip, #0
   1cebc:	str	ip, [sp, #32]
   1cec0:	beq	1cf50 <__assert_fail@plt+0xbb6c>
   1cec4:	ldr	ip, [sp, #84]	; 0x54
   1cec8:	cmp	ip, #0
   1cecc:	str	ip, [sp, #36]	; 0x24
   1ced0:	beq	1cf58 <__assert_fail@plt+0xbb74>
   1ced4:	ldr	ip, [sp, #88]	; 0x58
   1ced8:	cmp	ip, #0
   1cedc:	str	ip, [sp, #40]	; 0x28
   1cee0:	beq	1cf60 <__assert_fail@plt+0xbb7c>
   1cee4:	ldr	ip, [sp, #92]	; 0x5c
   1cee8:	cmp	ip, #0
   1ceec:	str	ip, [sp, #44]	; 0x2c
   1cef0:	beq	1cf68 <__assert_fail@plt+0xbb84>
   1cef4:	ldr	ip, [sp, #96]	; 0x60
   1cef8:	cmp	ip, #0
   1cefc:	str	ip, [sp, #48]	; 0x30
   1cf00:	beq	1cf70 <__assert_fail@plt+0xbb8c>
   1cf04:	ldr	ip, [sp, #100]	; 0x64
   1cf08:	cmp	ip, #0
   1cf0c:	str	ip, [sp, #52]	; 0x34
   1cf10:	movne	ip, #10
   1cf14:	moveq	ip, #9
   1cf18:	add	r3, sp, #16
   1cf1c:	stm	sp, {r3, ip}
   1cf20:	ldr	r3, [sp, #60]	; 0x3c
   1cf24:	bl	1c60c <__assert_fail@plt+0xb228>
   1cf28:	add	sp, sp, #56	; 0x38
   1cf2c:	pop	{lr}		; (ldr lr, [sp], #4)
   1cf30:	add	sp, sp, #4
   1cf34:	bx	lr
   1cf38:	mov	ip, #1
   1cf3c:	b	1cf18 <__assert_fail@plt+0xbb34>
   1cf40:	mov	ip, #2
   1cf44:	b	1cf18 <__assert_fail@plt+0xbb34>
   1cf48:	mov	ip, #3
   1cf4c:	b	1cf18 <__assert_fail@plt+0xbb34>
   1cf50:	mov	ip, #4
   1cf54:	b	1cf18 <__assert_fail@plt+0xbb34>
   1cf58:	mov	ip, #5
   1cf5c:	b	1cf18 <__assert_fail@plt+0xbb34>
   1cf60:	mov	ip, #6
   1cf64:	b	1cf18 <__assert_fail@plt+0xbb34>
   1cf68:	mov	ip, #7
   1cf6c:	b	1cf18 <__assert_fail@plt+0xbb34>
   1cf70:	mov	ip, #8
   1cf74:	b	1cf18 <__assert_fail@plt+0xbb34>
   1cf78:	ldr	r3, [pc, #116]	; 1cff4 <__assert_fail@plt+0xbc10>
   1cf7c:	push	{r4, lr}
   1cf80:	mov	r0, #10
   1cf84:	ldr	r1, [r3]
   1cf88:	bl	1115c <fputc_unlocked@plt>
   1cf8c:	mov	r2, #5
   1cf90:	ldr	r1, [pc, #96]	; 1cff8 <__assert_fail@plt+0xbc14>
   1cf94:	mov	r0, #0
   1cf98:	bl	11168 <dcgettext@plt>
   1cf9c:	ldr	r2, [pc, #88]	; 1cffc <__assert_fail@plt+0xbc18>
   1cfa0:	mov	r1, r0
   1cfa4:	mov	r0, #1
   1cfa8:	bl	112f4 <__printf_chk@plt>
   1cfac:	mov	r2, #5
   1cfb0:	ldr	r1, [pc, #72]	; 1d000 <__assert_fail@plt+0xbc1c>
   1cfb4:	mov	r0, #0
   1cfb8:	bl	11168 <dcgettext@plt>
   1cfbc:	ldr	r3, [pc, #64]	; 1d004 <__assert_fail@plt+0xbc20>
   1cfc0:	ldr	r2, [pc, #64]	; 1d008 <__assert_fail@plt+0xbc24>
   1cfc4:	mov	r1, r0
   1cfc8:	mov	r0, #1
   1cfcc:	bl	112f4 <__printf_chk@plt>
   1cfd0:	mov	r2, #5
   1cfd4:	ldr	r1, [pc, #48]	; 1d00c <__assert_fail@plt+0xbc28>
   1cfd8:	mov	r0, #0
   1cfdc:	bl	11168 <dcgettext@plt>
   1cfe0:	ldr	r2, [pc, #40]	; 1d010 <__assert_fail@plt+0xbc2c>
   1cfe4:	pop	{r4, lr}
   1cfe8:	mov	r1, r0
   1cfec:	mov	r0, #1
   1cff0:	b	112f4 <__printf_chk@plt>
   1cff4:	andeq	r3, r3, r4, ror #3
   1cff8:	andeq	r2, r2, r0, asr #5
   1cffc:	ldrdeq	r2, [r2], -r4
   1d000:	andeq	r2, r2, ip, ror #5
   1d004:	andeq	r1, r2, r0, lsr #20
   1d008:	andeq	r1, r2, r8, asr #20
   1d00c:	andeq	r2, r2, r0, lsl #6
   1d010:	andeq	r2, r2, r8, lsr #6
   1d014:	push	{r4, r5, r6, lr}
   1d018:	mov	r6, r0
   1d01c:	mov	r5, r1
   1d020:	mov	r4, r2
   1d024:	bl	1fffc <__assert_fail@plt+0xec18>
   1d028:	cmp	r0, #0
   1d02c:	popne	{r4, r5, r6, pc}
   1d030:	cmp	r6, #0
   1d034:	beq	1d044 <__assert_fail@plt+0xbc60>
   1d038:	cmp	r5, #0
   1d03c:	cmpne	r4, #0
   1d040:	popeq	{r4, r5, r6, pc}
   1d044:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d048:	push	{r4, lr}
   1d04c:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1d050:	cmp	r0, #0
   1d054:	popne	{r4, pc}
   1d058:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d05c:	push	{r4, lr}
   1d060:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1d064:	cmp	r0, #0
   1d068:	popne	{r4, pc}
   1d06c:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d070:	push	{r4, lr}
   1d074:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1d078:	cmp	r0, #0
   1d07c:	popne	{r4, pc}
   1d080:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d084:	push	{r4, r5, r6, lr}
   1d088:	mov	r5, r0
   1d08c:	mov	r4, r1
   1d090:	bl	1fcc8 <__assert_fail@plt+0xe8e4>
   1d094:	cmp	r0, #0
   1d098:	popne	{r4, r5, r6, pc}
   1d09c:	adds	r4, r4, #0
   1d0a0:	movne	r4, #1
   1d0a4:	cmp	r5, #0
   1d0a8:	orreq	r4, r4, #1
   1d0ac:	cmp	r4, #0
   1d0b0:	popeq	{r4, r5, r6, pc}
   1d0b4:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d0b8:	push	{r4, lr}
   1d0bc:	cmp	r1, #0
   1d0c0:	orreq	r1, r1, #1
   1d0c4:	bl	1fcc8 <__assert_fail@plt+0xe8e4>
   1d0c8:	cmp	r0, #0
   1d0cc:	popne	{r4, pc}
   1d0d0:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d0d4:	push	{r4, r5, r6, lr}
   1d0d8:	mov	r6, r0
   1d0dc:	mov	r5, r1
   1d0e0:	mov	r4, r2
   1d0e4:	bl	1fffc <__assert_fail@plt+0xec18>
   1d0e8:	cmp	r0, #0
   1d0ec:	popne	{r4, r5, r6, pc}
   1d0f0:	cmp	r6, #0
   1d0f4:	beq	1d104 <__assert_fail@plt+0xbd20>
   1d0f8:	cmp	r5, #0
   1d0fc:	cmpne	r4, #0
   1d100:	popeq	{r4, r5, r6, pc}
   1d104:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d108:	cmp	r2, #0
   1d10c:	cmpne	r1, #0
   1d110:	moveq	r2, #1
   1d114:	moveq	r1, r2
   1d118:	push	{r4, lr}
   1d11c:	bl	1fffc <__assert_fail@plt+0xec18>
   1d120:	cmp	r0, #0
   1d124:	popne	{r4, pc}
   1d128:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d12c:	push	{r4, lr}
   1d130:	mov	r2, r1
   1d134:	mov	r1, r0
   1d138:	mov	r0, #0
   1d13c:	bl	1fffc <__assert_fail@plt+0xec18>
   1d140:	cmp	r0, #0
   1d144:	popne	{r4, pc}
   1d148:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d14c:	cmp	r1, #0
   1d150:	cmpne	r0, #0
   1d154:	moveq	r2, #1
   1d158:	movne	r2, r1
   1d15c:	moveq	r1, r2
   1d160:	movne	r1, r0
   1d164:	push	{r4, lr}
   1d168:	mov	r0, #0
   1d16c:	bl	1fffc <__assert_fail@plt+0xec18>
   1d170:	cmp	r0, #0
   1d174:	popne	{r4, pc}
   1d178:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d17c:	cmp	r0, #0
   1d180:	push	{r4, r5, r6, lr}
   1d184:	mov	r5, r1
   1d188:	ldr	r4, [r1]
   1d18c:	beq	1d1c8 <__assert_fail@plt+0xbde4>
   1d190:	lsr	r2, r4, #1
   1d194:	add	r3, r2, #1
   1d198:	mvn	r3, r3
   1d19c:	cmp	r4, r3
   1d1a0:	bhi	1d1e4 <__assert_fail@plt+0xbe00>
   1d1a4:	add	r4, r4, #1
   1d1a8:	add	r4, r4, r2
   1d1ac:	mov	r1, r4
   1d1b0:	mov	r2, #1
   1d1b4:	bl	1fffc <__assert_fail@plt+0xec18>
   1d1b8:	cmp	r0, #0
   1d1bc:	beq	1d1e8 <__assert_fail@plt+0xbe04>
   1d1c0:	str	r4, [r5]
   1d1c4:	pop	{r4, r5, r6, pc}
   1d1c8:	cmp	r4, #0
   1d1cc:	moveq	r4, #64	; 0x40
   1d1d0:	mov	r1, r4
   1d1d4:	mov	r2, #1
   1d1d8:	bl	1fffc <__assert_fail@plt+0xec18>
   1d1dc:	cmp	r0, #0
   1d1e0:	bne	1d1c0 <__assert_fail@plt+0xbddc>
   1d1e4:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d1e8:	cmp	r4, #0
   1d1ec:	bne	1d1e4 <__assert_fail@plt+0xbe00>
   1d1f0:	str	r4, [r5]
   1d1f4:	pop	{r4, r5, r6, pc}
   1d1f8:	cmp	r0, #0
   1d1fc:	push	{r4, r5, r6, lr}
   1d200:	mov	r5, r1
   1d204:	ldr	r4, [r1]
   1d208:	mov	r6, r2
   1d20c:	beq	1d250 <__assert_fail@plt+0xbe6c>
   1d210:	lsr	r1, r4, #1
   1d214:	add	r3, r1, #1
   1d218:	mvn	r3, r3
   1d21c:	cmp	r4, r3
   1d220:	bhi	1d288 <__assert_fail@plt+0xbea4>
   1d224:	add	r4, r4, #1
   1d228:	add	r4, r4, r1
   1d22c:	mov	r1, r4
   1d230:	bl	1fffc <__assert_fail@plt+0xec18>
   1d234:	cmp	r0, #0
   1d238:	bne	1d248 <__assert_fail@plt+0xbe64>
   1d23c:	cmp	r4, #0
   1d240:	cmpne	r6, #0
   1d244:	bne	1d288 <__assert_fail@plt+0xbea4>
   1d248:	str	r4, [r5]
   1d24c:	pop	{r4, r5, r6, pc}
   1d250:	cmp	r4, #0
   1d254:	bne	1d270 <__assert_fail@plt+0xbe8c>
   1d258:	mov	r1, r2
   1d25c:	mov	r0, #64	; 0x40
   1d260:	bl	20048 <__assert_fail@plt+0xec64>
   1d264:	cmp	r0, #0
   1d268:	movne	r4, r0
   1d26c:	addeq	r4, r0, #1
   1d270:	mov	r2, r6
   1d274:	mov	r1, r4
   1d278:	mov	r0, #0
   1d27c:	bl	1fffc <__assert_fail@plt+0xec18>
   1d280:	cmp	r0, #0
   1d284:	bne	1d248 <__assert_fail@plt+0xbe64>
   1d288:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d28c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d290:	sub	sp, sp, #12
   1d294:	ldr	r6, [r1]
   1d298:	mov	r8, r1
   1d29c:	mov	r9, r0
   1d2a0:	asrs	r4, r6, #1
   1d2a4:	mov	sl, r2
   1d2a8:	mov	fp, r3
   1d2ac:	ldr	r7, [sp, #48]	; 0x30
   1d2b0:	bmi	1d42c <__assert_fail@plt+0xc048>
   1d2b4:	mvn	r1, #-2147483648	; 0x80000000
   1d2b8:	sub	r1, r1, r4
   1d2bc:	cmp	r6, r1
   1d2c0:	movle	r1, #0
   1d2c4:	movgt	r1, #1
   1d2c8:	mvn	r3, fp
   1d2cc:	cmp	r1, #0
   1d2d0:	addeq	r4, r4, r6
   1d2d4:	mvnne	r4, #-2147483648	; 0x80000000
   1d2d8:	lsr	r3, r3, #31
   1d2dc:	cmp	fp, r4
   1d2e0:	movge	r2, #0
   1d2e4:	andlt	r2, r3, #1
   1d2e8:	cmp	r2, #0
   1d2ec:	beq	1d3dc <__assert_fail@plt+0xbff8>
   1d2f0:	cmp	r7, #0
   1d2f4:	blt	1d4c4 <__assert_fail@plt+0xc0e0>
   1d2f8:	bne	1d4bc <__assert_fail@plt+0xc0d8>
   1d2fc:	mov	r5, #64	; 0x40
   1d300:	mov	r1, r7
   1d304:	mov	r0, r5
   1d308:	str	r3, [sp, #4]
   1d30c:	bl	20254 <__assert_fail@plt+0xee70>
   1d310:	mov	r1, r7
   1d314:	mov	r4, r0
   1d318:	mov	r0, r5
   1d31c:	bl	20474 <__assert_fail@plt+0xf090>
   1d320:	ldr	r3, [sp, #4]
   1d324:	sub	r5, r5, r1
   1d328:	cmp	r9, #0
   1d32c:	sub	r2, r4, r6
   1d330:	streq	r9, [r8]
   1d334:	cmp	r2, sl
   1d338:	bge	1d3bc <__assert_fail@plt+0xbfd8>
   1d33c:	cmp	sl, #0
   1d340:	blt	1d45c <__assert_fail@plt+0xc078>
   1d344:	cmp	r6, #0
   1d348:	blt	1d368 <__assert_fail@plt+0xbf84>
   1d34c:	mvn	r2, #-2147483648	; 0x80000000
   1d350:	sub	r2, r2, sl
   1d354:	cmp	r6, r2
   1d358:	movle	r2, #0
   1d35c:	movgt	r2, #1
   1d360:	cmp	r2, #0
   1d364:	bne	1d458 <__assert_fail@plt+0xc074>
   1d368:	add	r6, r6, sl
   1d36c:	cmp	fp, r6
   1d370:	movge	r3, #0
   1d374:	andlt	r3, r3, #1
   1d378:	cmp	r3, #0
   1d37c:	mov	r4, r6
   1d380:	bne	1d458 <__assert_fail@plt+0xc074>
   1d384:	cmp	r7, #0
   1d388:	blt	1d470 <__assert_fail@plt+0xc08c>
   1d38c:	beq	1d3b8 <__assert_fail@plt+0xbfd4>
   1d390:	cmp	r6, #0
   1d394:	blt	1d514 <__assert_fail@plt+0xc130>
   1d398:	mov	r1, r7
   1d39c:	mvn	r0, #-2147483648	; 0x80000000
   1d3a0:	bl	20254 <__assert_fail@plt+0xee70>
   1d3a4:	cmp	r6, r0
   1d3a8:	movle	r0, #0
   1d3ac:	movgt	r0, #1
   1d3b0:	cmp	r0, #0
   1d3b4:	bne	1d458 <__assert_fail@plt+0xc074>
   1d3b8:	mul	r5, r6, r7
   1d3bc:	mov	r1, r5
   1d3c0:	mov	r0, r9
   1d3c4:	bl	1fcc8 <__assert_fail@plt+0xe8e4>
   1d3c8:	cmp	r0, #0
   1d3cc:	beq	1d440 <__assert_fail@plt+0xc05c>
   1d3d0:	str	r4, [r8]
   1d3d4:	add	sp, sp, #12
   1d3d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3dc:	cmp	r7, #0
   1d3e0:	blt	1d49c <__assert_fail@plt+0xc0b8>
   1d3e4:	beq	1d2fc <__assert_fail@plt+0xbf18>
   1d3e8:	cmp	r4, #0
   1d3ec:	blt	1d4cc <__assert_fail@plt+0xc0e8>
   1d3f0:	mov	r1, r7
   1d3f4:	mvn	r0, #-2147483648	; 0x80000000
   1d3f8:	str	r3, [sp, #4]
   1d3fc:	bl	20254 <__assert_fail@plt+0xee70>
   1d400:	ldr	r3, [sp, #4]
   1d404:	cmp	r0, r4
   1d408:	movge	r0, #0
   1d40c:	movlt	r0, #1
   1d410:	cmp	r0, #0
   1d414:	mvnne	r5, #-2147483648	; 0x80000000
   1d418:	bne	1d300 <__assert_fail@plt+0xbf1c>
   1d41c:	mul	r5, r7, r4
   1d420:	cmp	r5, #63	; 0x3f
   1d424:	bgt	1d328 <__assert_fail@plt+0xbf44>
   1d428:	b	1d2fc <__assert_fail@plt+0xbf18>
   1d42c:	rsb	r1, r4, #-2147483648	; 0x80000000
   1d430:	cmp	r6, r1
   1d434:	movge	r1, #0
   1d438:	movlt	r1, #1
   1d43c:	b	1d2c8 <__assert_fail@plt+0xbee4>
   1d440:	adds	r5, r5, #0
   1d444:	movne	r5, #1
   1d448:	cmp	r9, #0
   1d44c:	orreq	r5, r5, #1
   1d450:	cmp	r5, #0
   1d454:	beq	1d3d0 <__assert_fail@plt+0xbfec>
   1d458:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d45c:	rsb	r2, sl, #-2147483648	; 0x80000000
   1d460:	cmp	r6, r2
   1d464:	movge	r2, #0
   1d468:	movlt	r2, #1
   1d46c:	b	1d360 <__assert_fail@plt+0xbf7c>
   1d470:	cmp	r6, #0
   1d474:	blt	1d4f8 <__assert_fail@plt+0xc114>
   1d478:	cmn	r7, #1
   1d47c:	beq	1d3b8 <__assert_fail@plt+0xbfd4>
   1d480:	mov	r1, r7
   1d484:	mov	r0, #-2147483648	; 0x80000000
   1d488:	bl	20254 <__assert_fail@plt+0xee70>
   1d48c:	cmp	r6, r0
   1d490:	movle	r0, #0
   1d494:	movgt	r0, #1
   1d498:	b	1d3b0 <__assert_fail@plt+0xbfcc>
   1d49c:	cmp	r4, #0
   1d4a0:	blt	1d538 <__assert_fail@plt+0xc154>
   1d4a4:	cmn	r7, #1
   1d4a8:	beq	1d41c <__assert_fail@plt+0xc038>
   1d4ac:	str	r3, [sp, #4]
   1d4b0:	mov	r1, r7
   1d4b4:	mov	r0, #-2147483648	; 0x80000000
   1d4b8:	b	1d3fc <__assert_fail@plt+0xc018>
   1d4bc:	mov	r4, fp
   1d4c0:	b	1d3f0 <__assert_fail@plt+0xc00c>
   1d4c4:	mov	r4, fp
   1d4c8:	b	1d4a4 <__assert_fail@plt+0xc0c0>
   1d4cc:	cmn	r4, #1
   1d4d0:	beq	1d41c <__assert_fail@plt+0xc038>
   1d4d4:	mov	r1, r4
   1d4d8:	mov	r0, #-2147483648	; 0x80000000
   1d4dc:	str	r3, [sp, #4]
   1d4e0:	bl	20254 <__assert_fail@plt+0xee70>
   1d4e4:	ldr	r3, [sp, #4]
   1d4e8:	cmp	r7, r0
   1d4ec:	movle	r0, #0
   1d4f0:	movgt	r0, #1
   1d4f4:	b	1d410 <__assert_fail@plt+0xc02c>
   1d4f8:	mov	r1, r7
   1d4fc:	mvn	r0, #-2147483648	; 0x80000000
   1d500:	bl	20254 <__assert_fail@plt+0xee70>
   1d504:	cmp	r6, r0
   1d508:	movge	r0, #0
   1d50c:	movlt	r0, #1
   1d510:	b	1d3b0 <__assert_fail@plt+0xbfcc>
   1d514:	cmn	r6, #1
   1d518:	beq	1d3b8 <__assert_fail@plt+0xbfd4>
   1d51c:	mov	r1, r6
   1d520:	mov	r0, #-2147483648	; 0x80000000
   1d524:	bl	20254 <__assert_fail@plt+0xee70>
   1d528:	cmp	r7, r0
   1d52c:	movle	r0, #0
   1d530:	movgt	r0, #1
   1d534:	b	1d3b0 <__assert_fail@plt+0xbfcc>
   1d538:	mov	r1, r7
   1d53c:	mvn	r0, #-2147483648	; 0x80000000
   1d540:	str	r3, [sp, #4]
   1d544:	bl	20254 <__assert_fail@plt+0xee70>
   1d548:	ldr	r3, [sp, #4]
   1d54c:	cmp	r0, r4
   1d550:	movle	r0, #0
   1d554:	movgt	r0, #1
   1d558:	b	1d410 <__assert_fail@plt+0xc02c>
   1d55c:	push	{r4, lr}
   1d560:	mov	r1, #1
   1d564:	bl	1fc54 <__assert_fail@plt+0xe870>
   1d568:	cmp	r0, #0
   1d56c:	popne	{r4, pc}
   1d570:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d574:	push	{r4, lr}
   1d578:	mov	r1, #1
   1d57c:	bl	1fc54 <__assert_fail@plt+0xe870>
   1d580:	cmp	r0, #0
   1d584:	popne	{r4, pc}
   1d588:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d58c:	push	{r4, lr}
   1d590:	bl	1fc54 <__assert_fail@plt+0xe870>
   1d594:	cmp	r0, #0
   1d598:	popne	{r4, pc}
   1d59c:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d5a0:	push	{r4, lr}
   1d5a4:	bl	1fc54 <__assert_fail@plt+0xe870>
   1d5a8:	cmp	r0, #0
   1d5ac:	popne	{r4, pc}
   1d5b0:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d5b4:	push	{r4, r5, r6, lr}
   1d5b8:	mov	r6, r0
   1d5bc:	mov	r0, r1
   1d5c0:	mov	r4, r1
   1d5c4:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1d5c8:	subs	r5, r0, #0
   1d5cc:	beq	1d5e4 <__assert_fail@plt+0xc200>
   1d5d0:	mov	r2, r4
   1d5d4:	mov	r1, r6
   1d5d8:	bl	1112c <memcpy@plt>
   1d5dc:	mov	r0, r5
   1d5e0:	pop	{r4, r5, r6, pc}
   1d5e4:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d5e8:	push	{r4, r5, r6, lr}
   1d5ec:	mov	r6, r0
   1d5f0:	mov	r0, r1
   1d5f4:	mov	r4, r1
   1d5f8:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1d5fc:	subs	r5, r0, #0
   1d600:	beq	1d618 <__assert_fail@plt+0xc234>
   1d604:	mov	r2, r4
   1d608:	mov	r1, r6
   1d60c:	bl	1112c <memcpy@plt>
   1d610:	mov	r0, r5
   1d614:	pop	{r4, r5, r6, pc}
   1d618:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d61c:	push	{r4, r5, r6, lr}
   1d620:	mov	r6, r0
   1d624:	add	r0, r1, #1
   1d628:	mov	r4, r1
   1d62c:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1d630:	subs	r5, r0, #0
   1d634:	beq	1d654 <__assert_fail@plt+0xc270>
   1d638:	mov	r3, #0
   1d63c:	mov	r1, r6
   1d640:	strb	r3, [r5, r4]
   1d644:	mov	r2, r4
   1d648:	bl	1112c <memcpy@plt>
   1d64c:	mov	r0, r5
   1d650:	pop	{r4, r5, r6, pc}
   1d654:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d658:	push	{r4, r5, r6, lr}
   1d65c:	mov	r6, r0
   1d660:	bl	11294 <strlen@plt>
   1d664:	add	r4, r0, #1
   1d668:	mov	r0, r4
   1d66c:	bl	1fc9c <__assert_fail@plt+0xe8b8>
   1d670:	subs	r5, r0, #0
   1d674:	beq	1d68c <__assert_fail@plt+0xc2a8>
   1d678:	mov	r2, r4
   1d67c:	mov	r1, r6
   1d680:	bl	1112c <memcpy@plt>
   1d684:	mov	r0, r5
   1d688:	pop	{r4, r5, r6, pc}
   1d68c:	bl	1d690 <__assert_fail@plt+0xc2ac>
   1d690:	ldr	r3, [pc, #44]	; 1d6c4 <__assert_fail@plt+0xc2e0>
   1d694:	push	{r4, lr}
   1d698:	mov	r2, #5
   1d69c:	ldr	r1, [pc, #36]	; 1d6c8 <__assert_fail@plt+0xc2e4>
   1d6a0:	mov	r0, #0
   1d6a4:	ldr	r4, [r3]
   1d6a8:	bl	11168 <dcgettext@plt>
   1d6ac:	ldr	r2, [pc, #24]	; 1d6cc <__assert_fail@plt+0xc2e8>
   1d6b0:	mov	r1, #0
   1d6b4:	mov	r3, r0
   1d6b8:	mov	r0, r4
   1d6bc:	bl	11204 <error@plt>
   1d6c0:	bl	113cc <abort@plt>
   1d6c4:	andeq	r3, r3, r4, lsl #3
   1d6c8:	andeq	r2, r2, r8, ror r3
   1d6cc:	andeq	r1, r2, r8, lsl #30
   1d6d0:	push	{r4, r5, r6, r7, lr}
   1d6d4:	sub	sp, sp, #20
   1d6d8:	mov	r6, r2
   1d6dc:	ldr	ip, [sp, #48]	; 0x30
   1d6e0:	mov	r2, r1
   1d6e4:	mov	r7, r3
   1d6e8:	str	ip, [sp]
   1d6ec:	add	r3, sp, #8
   1d6f0:	mov	r1, #0
   1d6f4:	mov	r5, r0
   1d6f8:	ldr	r4, [sp, #56]	; 0x38
   1d6fc:	bl	1d960 <__assert_fail@plt+0xc57c>
   1d700:	cmp	r0, #0
   1d704:	bne	1d780 <__assert_fail@plt+0xc39c>
   1d708:	ldrd	r0, [sp, #8]
   1d70c:	cmp	r0, r6
   1d710:	sbcs	r3, r1, r7
   1d714:	ldrd	r6, [sp, #40]	; 0x28
   1d718:	movlt	r3, #1
   1d71c:	movge	r3, #0
   1d720:	cmp	r6, r0
   1d724:	sbcs	r2, r7, r1
   1d728:	orrlt	r3, r3, #1
   1d72c:	cmp	r3, #0
   1d730:	beq	1d778 <__assert_fail@plt+0xc394>
   1d734:	cmp	r0, #1073741824	; 0x40000000
   1d738:	sbcs	r3, r1, #0
   1d73c:	blt	1d7ac <__assert_fail@plt+0xc3c8>
   1d740:	bl	112c4 <__errno_location@plt>
   1d744:	mov	r3, #75	; 0x4b
   1d748:	mov	r6, r3
   1d74c:	str	r3, [r0]
   1d750:	cmp	r4, #0
   1d754:	moveq	r4, #1
   1d758:	mov	r0, r5
   1d75c:	bl	1be48 <__assert_fail@plt+0xaa64>
   1d760:	mov	r1, r6
   1d764:	ldr	r3, [sp, #52]	; 0x34
   1d768:	ldr	r2, [pc, #164]	; 1d814 <__assert_fail@plt+0xc430>
   1d76c:	str	r0, [sp]
   1d770:	mov	r0, r4
   1d774:	bl	11204 <error@plt>
   1d778:	add	sp, sp, #20
   1d77c:	pop	{r4, r5, r6, r7, pc}
   1d780:	cmp	r0, #1
   1d784:	beq	1d7d4 <__assert_fail@plt+0xc3f0>
   1d788:	cmp	r0, #3
   1d78c:	beq	1d804 <__assert_fail@plt+0xc420>
   1d790:	cmp	r4, #0
   1d794:	beq	1d7f4 <__assert_fail@plt+0xc410>
   1d798:	bl	112c4 <__errno_location@plt>
   1d79c:	ldr	r6, [r0]
   1d7a0:	cmp	r6, #22
   1d7a4:	moveq	r6, #0
   1d7a8:	b	1d758 <__assert_fail@plt+0xc374>
   1d7ac:	mov	r2, #-1073741824	; 0xc0000000
   1d7b0:	mvn	r3, #0
   1d7b4:	cmp	r0, r2
   1d7b8:	sbcs	r3, r1, r3
   1d7bc:	blt	1d740 <__assert_fail@plt+0xc35c>
   1d7c0:	bl	112c4 <__errno_location@plt>
   1d7c4:	mov	r3, #34	; 0x22
   1d7c8:	mov	r6, r3
   1d7cc:	str	r3, [r0]
   1d7d0:	b	1d750 <__assert_fail@plt+0xc36c>
   1d7d4:	bl	112c4 <__errno_location@plt>
   1d7d8:	mov	r3, #75	; 0x4b
   1d7dc:	mov	r6, r3
   1d7e0:	str	r3, [r0]
   1d7e4:	cmp	r4, #0
   1d7e8:	moveq	r4, #1
   1d7ec:	bne	1d7a0 <__assert_fail@plt+0xc3bc>
   1d7f0:	b	1d758 <__assert_fail@plt+0xc374>
   1d7f4:	bl	112c4 <__errno_location@plt>
   1d7f8:	mov	r4, #1
   1d7fc:	ldr	r6, [r0]
   1d800:	b	1d7a0 <__assert_fail@plt+0xc3bc>
   1d804:	bl	112c4 <__errno_location@plt>
   1d808:	mov	r6, #0
   1d80c:	str	r6, [r0]
   1d810:	b	1d7e4 <__assert_fail@plt+0xc400>
   1d814:	andeq	r1, r2, r4, lsl #30
   1d818:	push	{r4, r5, r6, r7, lr}
   1d81c:	sub	sp, sp, #20
   1d820:	mov	r6, r2
   1d824:	ldr	r1, [sp, #48]	; 0x30
   1d828:	mov	r7, r3
   1d82c:	str	r1, [sp]
   1d830:	add	r3, sp, #8
   1d834:	mov	r2, #10
   1d838:	mov	r1, #0
   1d83c:	mov	r5, r0
   1d840:	ldr	r4, [sp, #56]	; 0x38
   1d844:	bl	1d960 <__assert_fail@plt+0xc57c>
   1d848:	cmp	r0, #0
   1d84c:	bne	1d8c8 <__assert_fail@plt+0xc4e4>
   1d850:	ldrd	r0, [sp, #8]
   1d854:	cmp	r0, r6
   1d858:	sbcs	r3, r1, r7
   1d85c:	ldrd	r6, [sp, #40]	; 0x28
   1d860:	movlt	r3, #1
   1d864:	movge	r3, #0
   1d868:	cmp	r6, r0
   1d86c:	sbcs	r2, r7, r1
   1d870:	orrlt	r3, r3, #1
   1d874:	cmp	r3, #0
   1d878:	beq	1d8c0 <__assert_fail@plt+0xc4dc>
   1d87c:	cmp	r0, #1073741824	; 0x40000000
   1d880:	sbcs	r3, r1, #0
   1d884:	blt	1d8f4 <__assert_fail@plt+0xc510>
   1d888:	bl	112c4 <__errno_location@plt>
   1d88c:	mov	r3, #75	; 0x4b
   1d890:	mov	r6, r3
   1d894:	str	r3, [r0]
   1d898:	cmp	r4, #0
   1d89c:	moveq	r4, #1
   1d8a0:	mov	r0, r5
   1d8a4:	bl	1be48 <__assert_fail@plt+0xaa64>
   1d8a8:	mov	r1, r6
   1d8ac:	ldr	r3, [sp, #52]	; 0x34
   1d8b0:	ldr	r2, [pc, #164]	; 1d95c <__assert_fail@plt+0xc578>
   1d8b4:	str	r0, [sp]
   1d8b8:	mov	r0, r4
   1d8bc:	bl	11204 <error@plt>
   1d8c0:	add	sp, sp, #20
   1d8c4:	pop	{r4, r5, r6, r7, pc}
   1d8c8:	cmp	r0, #1
   1d8cc:	beq	1d91c <__assert_fail@plt+0xc538>
   1d8d0:	cmp	r0, #3
   1d8d4:	beq	1d94c <__assert_fail@plt+0xc568>
   1d8d8:	cmp	r4, #0
   1d8dc:	beq	1d93c <__assert_fail@plt+0xc558>
   1d8e0:	bl	112c4 <__errno_location@plt>
   1d8e4:	ldr	r6, [r0]
   1d8e8:	cmp	r6, #22
   1d8ec:	moveq	r6, #0
   1d8f0:	b	1d8a0 <__assert_fail@plt+0xc4bc>
   1d8f4:	mov	r2, #-1073741824	; 0xc0000000
   1d8f8:	mvn	r3, #0
   1d8fc:	cmp	r0, r2
   1d900:	sbcs	r3, r1, r3
   1d904:	blt	1d888 <__assert_fail@plt+0xc4a4>
   1d908:	bl	112c4 <__errno_location@plt>
   1d90c:	mov	r3, #34	; 0x22
   1d910:	mov	r6, r3
   1d914:	str	r3, [r0]
   1d918:	b	1d898 <__assert_fail@plt+0xc4b4>
   1d91c:	bl	112c4 <__errno_location@plt>
   1d920:	mov	r3, #75	; 0x4b
   1d924:	mov	r6, r3
   1d928:	str	r3, [r0]
   1d92c:	cmp	r4, #0
   1d930:	moveq	r4, #1
   1d934:	bne	1d8e8 <__assert_fail@plt+0xc504>
   1d938:	b	1d8a0 <__assert_fail@plt+0xc4bc>
   1d93c:	bl	112c4 <__errno_location@plt>
   1d940:	mov	r4, #1
   1d944:	ldr	r6, [r0]
   1d948:	b	1d8e8 <__assert_fail@plt+0xc504>
   1d94c:	bl	112c4 <__errno_location@plt>
   1d950:	mov	r6, #0
   1d954:	str	r6, [r0]
   1d958:	b	1d92c <__assert_fail@plt+0xc548>
   1d95c:	andeq	r1, r2, r4, lsl #30
   1d960:	cmp	r2, #36	; 0x24
   1d964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d968:	sub	sp, sp, #52	; 0x34
   1d96c:	bhi	1e4e0 <__assert_fail@plt+0xd0fc>
   1d970:	cmp	r1, #0
   1d974:	mov	r5, r1
   1d978:	mov	r6, r2
   1d97c:	addeq	r5, sp, #44	; 0x2c
   1d980:	mov	sl, r0
   1d984:	mov	r9, r3
   1d988:	bl	112c4 <__errno_location@plt>
   1d98c:	mov	r4, #0
   1d990:	mov	r2, r6
   1d994:	mov	r3, r4
   1d998:	mov	r1, r5
   1d99c:	str	r4, [r0]
   1d9a0:	mov	fp, r0
   1d9a4:	mov	r0, sl
   1d9a8:	bl	11390 <__strtoll_internal@plt>
   1d9ac:	ldr	r8, [r5]
   1d9b0:	cmp	sl, r8
   1d9b4:	mov	r6, r0
   1d9b8:	mov	r7, r1
   1d9bc:	beq	1da0c <__assert_fail@plt+0xc628>
   1d9c0:	ldr	r4, [fp]
   1d9c4:	cmp	r4, #0
   1d9c8:	bne	1d9f4 <__assert_fail@plt+0xc610>
   1d9cc:	ldr	r3, [sp, #88]	; 0x58
   1d9d0:	cmp	r3, #0
   1d9d4:	beq	1d9e4 <__assert_fail@plt+0xc600>
   1d9d8:	ldrb	sl, [r8]
   1d9dc:	cmp	sl, #0
   1d9e0:	bne	1da40 <__assert_fail@plt+0xc65c>
   1d9e4:	strd	r6, [r9]
   1d9e8:	mov	r0, r4
   1d9ec:	add	sp, sp, #52	; 0x34
   1d9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9f4:	cmp	r4, #34	; 0x22
   1d9f8:	beq	1dca0 <__assert_fail@plt+0xc8bc>
   1d9fc:	mov	r4, #4
   1da00:	mov	r0, r4
   1da04:	add	sp, sp, #52	; 0x34
   1da08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da0c:	ldr	r3, [sp, #88]	; 0x58
   1da10:	cmp	r3, r4
   1da14:	beq	1d9fc <__assert_fail@plt+0xc618>
   1da18:	ldrb	sl, [sl]
   1da1c:	cmp	sl, r4
   1da20:	beq	1d9fc <__assert_fail@plt+0xc618>
   1da24:	mov	r1, sl
   1da28:	mov	r0, r3
   1da2c:	bl	112a0 <strchr@plt>
   1da30:	cmp	r0, r4
   1da34:	movne	r6, #1
   1da38:	movne	r7, #0
   1da3c:	beq	1d9fc <__assert_fail@plt+0xc618>
   1da40:	mov	r1, sl
   1da44:	ldr	r0, [sp, #88]	; 0x58
   1da48:	bl	112a0 <strchr@plt>
   1da4c:	cmp	r0, #0
   1da50:	beq	1e058 <__assert_fail@plt+0xcc74>
   1da54:	sub	r3, sl, #69	; 0x45
   1da58:	cmp	r3, #47	; 0x2f
   1da5c:	ldrls	pc, [pc, r3, lsl #2]
   1da60:	b	1db24 <__assert_fail@plt+0xc740>
   1da64:	andeq	sp, r1, ip, lsr ip
   1da68:	andeq	sp, r1, r4, lsr #22
   1da6c:	andeq	sp, r1, ip, lsr ip
   1da70:	andeq	sp, r1, r4, lsr #22
   1da74:	andeq	sp, r1, r4, lsr #22
   1da78:	andeq	sp, r1, r4, lsr #22
   1da7c:	andeq	sp, r1, ip, lsr ip
   1da80:	andeq	sp, r1, r4, lsr #22
   1da84:	andeq	sp, r1, ip, lsr ip
   1da88:	andeq	sp, r1, r4, lsr #22
   1da8c:	andeq	sp, r1, r4, lsr #22
   1da90:	andeq	sp, r1, ip, lsr ip
   1da94:	andeq	sp, r1, r4, lsr #22
   1da98:	andeq	sp, r1, r4, lsr #22
   1da9c:	andeq	sp, r1, r4, lsr #22
   1daa0:	andeq	sp, r1, ip, lsr ip
   1daa4:	andeq	sp, r1, r4, lsr #22
   1daa8:	andeq	sp, r1, r4, lsr #22
   1daac:	andeq	sp, r1, r4, lsr #22
   1dab0:	andeq	sp, r1, r4, lsr #22
   1dab4:	andeq	sp, r1, ip, lsr ip
   1dab8:	andeq	sp, r1, ip, lsr ip
   1dabc:	andeq	sp, r1, r4, lsr #22
   1dac0:	andeq	sp, r1, r4, lsr #22
   1dac4:	andeq	sp, r1, r4, lsr #22
   1dac8:	andeq	sp, r1, r4, lsr #22
   1dacc:	andeq	sp, r1, r4, lsr #22
   1dad0:	andeq	sp, r1, r4, lsr #22
   1dad4:	andeq	sp, r1, r4, lsr #22
   1dad8:	andeq	sp, r1, r4, lsr #22
   1dadc:	andeq	sp, r1, r4, lsr #22
   1dae0:	andeq	sp, r1, r4, lsr #22
   1dae4:	andeq	sp, r1, r4, lsr #22
   1dae8:	andeq	sp, r1, r4, lsr #22
   1daec:	andeq	sp, r1, ip, lsr ip
   1daf0:	andeq	sp, r1, r4, lsr #22
   1daf4:	andeq	sp, r1, r4, lsr #22
   1daf8:	andeq	sp, r1, r4, lsr #22
   1dafc:	andeq	sp, r1, ip, lsr ip
   1db00:	andeq	sp, r1, r4, lsr #22
   1db04:	andeq	sp, r1, ip, lsr ip
   1db08:	andeq	sp, r1, r4, lsr #22
   1db0c:	andeq	sp, r1, r4, lsr #22
   1db10:	andeq	sp, r1, r4, lsr #22
   1db14:	andeq	sp, r1, r4, lsr #22
   1db18:	andeq	sp, r1, r4, lsr #22
   1db1c:	andeq	sp, r1, r4, lsr #22
   1db20:	andeq	sp, r1, ip, lsr ip
   1db24:	mov	r3, #1024	; 0x400
   1db28:	str	r3, [sp, #12]
   1db2c:	mov	r3, #0
   1db30:	str	r3, [sp, #8]
   1db34:	ldr	r3, [pc, #1292]	; 1e048 <__assert_fail@plt+0xcc64>
   1db38:	mvn	r2, #0
   1db3c:	strd	r2, [sp, #16]
   1db40:	mov	r3, #0
   1db44:	mov	r2, #1024	; 0x400
   1db48:	strd	r2, [sp, #24]
   1db4c:	mov	r3, #1
   1db50:	str	r3, [sp, #4]
   1db54:	sub	sl, sl, #66	; 0x42
   1db58:	cmp	sl, #53	; 0x35
   1db5c:	ldrls	pc, [pc, sl, lsl #2]
   1db60:	b	1e058 <__assert_fail@plt+0xcc74>
   1db64:			; <UNDEFINED> instruction: 0x0001dfbc
   1db68:	andeq	lr, r1, r8, asr r0
   1db6c:	andeq	lr, r1, r8, asr r0
   1db70:	ldrdeq	sp, [r1], -r0
   1db74:	andeq	lr, r1, r8, asr r0
   1db78:	andeq	sp, r1, r0, ror sp
   1db7c:	andeq	lr, r1, r8, asr r0
   1db80:	andeq	lr, r1, r8, asr r0
   1db84:	andeq	lr, r1, r8, asr r0
   1db88:	andeq	lr, r1, r4, rrx
   1db8c:	andeq	lr, r1, r8, asr r0
   1db90:	andeq	sp, r1, r0, lsl sp
   1db94:	andeq	lr, r1, r8, asr r0
   1db98:	andeq	lr, r1, r8, asr r0
   1db9c:	andeq	sp, r1, r0, ror #29
   1dba0:	andeq	lr, r1, r8, asr r0
   1dba4:	andeq	lr, r1, r8, asr r0
   1dba8:	andeq	lr, r1, r8, asr r0
   1dbac:	andeq	sp, r1, ip, lsl #29
   1dbb0:	andeq	lr, r1, r8, asr r0
   1dbb4:	andeq	lr, r1, r8, asr r0
   1dbb8:	andeq	lr, r1, r8, asr r0
   1dbbc:	andeq	lr, r1, r8, asr r0
   1dbc0:	andeq	sp, r1, r4, lsr pc
   1dbc4:	andeq	sp, r1, r4, lsr lr
   1dbc8:	andeq	lr, r1, r8, asr r0
   1dbcc:	andeq	lr, r1, r8, asr r0
   1dbd0:	andeq	lr, r1, r8, asr r0
   1dbd4:	andeq	lr, r1, r8, asr r0
   1dbd8:	andeq	lr, r1, r8, asr r0
   1dbdc:	andeq	lr, r1, r8, asr r0
   1dbe0:	andeq	lr, r1, r8, asr r0
   1dbe4:	andeq	sp, r1, r4, ror #31
   1dbe8:	andeq	sp, r1, ip, ror #25
   1dbec:	andeq	lr, r1, r8, asr r0
   1dbf0:	andeq	lr, r1, r8, asr r0
   1dbf4:	andeq	lr, r1, r8, asr r0
   1dbf8:	andeq	sp, r1, r0, ror sp
   1dbfc:	andeq	lr, r1, r8, asr r0
   1dc00:	andeq	lr, r1, r8, asr r0
   1dc04:	andeq	lr, r1, r8, asr r0
   1dc08:	andeq	lr, r1, r4, rrx
   1dc0c:	andeq	lr, r1, r8, asr r0
   1dc10:	andeq	sp, r1, r0, lsl sp
   1dc14:	andeq	lr, r1, r8, asr r0
   1dc18:	andeq	lr, r1, r8, asr r0
   1dc1c:	andeq	lr, r1, r8, asr r0
   1dc20:	andeq	lr, r1, r8, asr r0
   1dc24:	andeq	lr, r1, r8, asr r0
   1dc28:	andeq	lr, r1, r8, asr r0
   1dc2c:	andeq	sp, r1, ip, lsl #29
   1dc30:	andeq	lr, r1, r8, asr r0
   1dc34:	andeq	lr, r1, r8, asr r0
   1dc38:	andeq	lr, r1, r8, lsl r0
   1dc3c:	mov	r1, #48	; 0x30
   1dc40:	ldr	r0, [sp, #88]	; 0x58
   1dc44:	bl	112a0 <strchr@plt>
   1dc48:	cmp	r0, #0
   1dc4c:	beq	1e0a0 <__assert_fail@plt+0xccbc>
   1dc50:	ldrb	r3, [r8, #1]
   1dc54:	cmp	r3, #68	; 0x44
   1dc58:	beq	1dc6c <__assert_fail@plt+0xc888>
   1dc5c:	cmp	r3, #105	; 0x69
   1dc60:	beq	1dca8 <__assert_fail@plt+0xc8c4>
   1dc64:	cmp	r3, #66	; 0x42
   1dc68:	bne	1db24 <__assert_fail@plt+0xc740>
   1dc6c:	mov	r3, #1000	; 0x3e8
   1dc70:	str	r3, [sp, #12]
   1dc74:	mov	r3, #0
   1dc78:	str	r3, [sp, #8]
   1dc7c:	add	r3, pc, #956	; 0x3bc
   1dc80:	ldrd	r2, [r3]
   1dc84:	strd	r2, [sp, #16]
   1dc88:	mov	r3, #0
   1dc8c:	mov	r2, #1000	; 0x3e8
   1dc90:	strd	r2, [sp, #24]
   1dc94:	mov	r3, #2
   1dc98:	str	r3, [sp, #4]
   1dc9c:	b	1db54 <__assert_fail@plt+0xc770>
   1dca0:	mov	r4, #1
   1dca4:	b	1d9cc <__assert_fail@plt+0xc5e8>
   1dca8:	ldrb	r3, [r8, #2]
   1dcac:	mvn	r2, #0
   1dcb0:	cmp	r3, #66	; 0x42
   1dcb4:	mov	r3, #1024	; 0x400
   1dcb8:	str	r3, [sp, #12]
   1dcbc:	mov	r3, #0
   1dcc0:	str	r3, [sp, #8]
   1dcc4:	ldr	r3, [pc, #892]	; 1e048 <__assert_fail@plt+0xcc64>
   1dcc8:	strd	r2, [sp, #16]
   1dccc:	mov	r3, #0
   1dcd0:	mov	r2, #1024	; 0x400
   1dcd4:	strd	r2, [sp, #24]
   1dcd8:	moveq	r3, #3
   1dcdc:	streq	r3, [sp, #4]
   1dce0:	movne	r3, #1
   1dce4:	strne	r3, [sp, #4]
   1dce8:	b	1db54 <__assert_fail@plt+0xc770>
   1dcec:	mov	sl, #0
   1dcf0:	ldr	r2, [sp, #4]
   1dcf4:	orr	r4, r4, sl
   1dcf8:	add	r3, r8, r2
   1dcfc:	str	r3, [r5]
   1dd00:	ldrb	r3, [r8, r2]
   1dd04:	cmp	r3, #0
   1dd08:	orrne	r4, r4, #2
   1dd0c:	b	1d9e4 <__assert_fail@plt+0xc600>
   1dd10:	mov	sl, #0
   1dd14:	mov	r3, r9
   1dd18:	mov	fp, #1
   1dd1c:	mov	r9, r5
   1dd20:	mov	r5, r4
   1dd24:	mov	r4, sl
   1dd28:	mov	sl, r3
   1dd2c:	cmp	r6, #0
   1dd30:	sbcs	r3, r7, #0
   1dd34:	blt	1e45c <__assert_fail@plt+0xd078>
   1dd38:	ldrd	r2, [sp, #16]
   1dd3c:	cmp	r2, r6
   1dd40:	sbcs	r1, r3, r7
   1dd44:	bge	1e36c <__assert_fail@plt+0xcf88>
   1dd48:	sub	fp, fp, #1
   1dd4c:	cmn	fp, #1
   1dd50:	mov	r4, #1
   1dd54:	mvn	r6, #0
   1dd58:	mvn	r7, #-2147483648	; 0x80000000
   1dd5c:	bne	1dd3c <__assert_fail@plt+0xc958>
   1dd60:	mov	r4, r5
   1dd64:	mov	r5, r9
   1dd68:	mov	r9, sl
   1dd6c:	b	1dfd4 <__assert_fail@plt+0xcbf0>
   1dd70:	mov	sl, #0
   1dd74:	str	r9, [sp, #32]
   1dd78:	mov	r9, r5
   1dd7c:	mov	r5, r4
   1dd80:	mov	r4, sl
   1dd84:	ldr	sl, [sp, #12]
   1dd88:	mov	fp, #2
   1dd8c:	cmp	r6, #0
   1dd90:	sbcs	r3, r7, #0
   1dd94:	blt	1e3a8 <__assert_fail@plt+0xcfc4>
   1dd98:	ldrd	r2, [sp, #16]
   1dd9c:	cmp	r2, r6
   1dda0:	sbcs	r1, r3, r7
   1dda4:	bge	1e410 <__assert_fail@plt+0xd02c>
   1dda8:	sub	fp, fp, #1
   1ddac:	cmn	fp, #1
   1ddb0:	mvn	r6, #0
   1ddb4:	mvn	r7, #-2147483648	; 0x80000000
   1ddb8:	mov	r4, #1
   1ddbc:	bne	1dd9c <__assert_fail@plt+0xc9b8>
   1ddc0:	mov	r4, r5
   1ddc4:	mov	r5, r9
   1ddc8:	ldr	r9, [sp, #32]
   1ddcc:	b	1dfd4 <__assert_fail@plt+0xcbf0>
   1ddd0:	mov	sl, #0
   1ddd4:	str	r4, [sp, #32]
   1ddd8:	str	r9, [sp, #36]	; 0x24
   1dddc:	mov	r4, sl
   1dde0:	mov	r9, r5
   1dde4:	ldr	sl, [sp, #12]
   1dde8:	ldr	r5, [sp, #8]
   1ddec:	mov	fp, #5
   1ddf0:	cmp	r6, #0
   1ddf4:	sbcs	r3, r7, #0
   1ddf8:	blt	1e21c <__assert_fail@plt+0xce38>
   1ddfc:	ldrd	r2, [sp, #16]
   1de00:	cmp	r2, r6
   1de04:	sbcs	r1, r3, r7
   1de08:	bge	1e254 <__assert_fail@plt+0xce70>
   1de0c:	sub	fp, fp, #1
   1de10:	cmn	fp, #1
   1de14:	mvn	r6, #0
   1de18:	mvn	r7, #-2147483648	; 0x80000000
   1de1c:	mov	r4, #1
   1de20:	bne	1de00 <__assert_fail@plt+0xca1c>
   1de24:	mov	r5, r9
   1de28:	ldr	r4, [sp, #32]
   1de2c:	ldr	r9, [sp, #36]	; 0x24
   1de30:	b	1dfd4 <__assert_fail@plt+0xcbf0>
   1de34:	mov	sl, #0
   1de38:	str	r4, [sp, #32]
   1de3c:	str	r9, [sp, #36]	; 0x24
   1de40:	mov	r4, sl
   1de44:	mov	r9, r5
   1de48:	ldr	sl, [sp, #12]
   1de4c:	ldr	r5, [sp, #8]
   1de50:	mov	fp, #6
   1de54:	cmp	r6, #0
   1de58:	sbcs	r3, r7, #0
   1de5c:	blt	1e0d0 <__assert_fail@plt+0xccec>
   1de60:	ldrd	r2, [sp, #16]
   1de64:	cmp	r2, r6
   1de68:	sbcs	r1, r3, r7
   1de6c:	bge	1e0b0 <__assert_fail@plt+0xcccc>
   1de70:	sub	fp, fp, #1
   1de74:	cmn	fp, #1
   1de78:	mov	r4, #1
   1de7c:	mvn	r6, #0
   1de80:	mvn	r7, #-2147483648	; 0x80000000
   1de84:	bne	1de64 <__assert_fail@plt+0xca80>
   1de88:	b	1de24 <__assert_fail@plt+0xca40>
   1de8c:	mov	sl, #0
   1de90:	str	r9, [sp, #32]
   1de94:	mov	r9, r5
   1de98:	mov	r5, r4
   1de9c:	mov	r4, sl
   1dea0:	ldr	sl, [sp, #12]
   1dea4:	mov	fp, #3
   1dea8:	cmp	r6, #0
   1deac:	sbcs	r3, r7, #0
   1deb0:	blt	1e1b0 <__assert_fail@plt+0xcdcc>
   1deb4:	ldrd	r2, [sp, #16]
   1deb8:	cmp	r2, r6
   1debc:	sbcs	r1, r3, r7
   1dec0:	bge	1e1e8 <__assert_fail@plt+0xce04>
   1dec4:	sub	fp, fp, #1
   1dec8:	cmn	fp, #1
   1decc:	mov	r4, #1
   1ded0:	mvn	r6, #0
   1ded4:	mvn	r7, #-2147483648	; 0x80000000
   1ded8:	bne	1deb8 <__assert_fail@plt+0xcad4>
   1dedc:	b	1ddc0 <__assert_fail@plt+0xc9dc>
   1dee0:	mov	sl, #0
   1dee4:	str	r9, [sp, #32]
   1dee8:	mov	r9, r5
   1deec:	mov	r5, r4
   1def0:	mov	r4, sl
   1def4:	ldr	sl, [sp, #12]
   1def8:	mov	fp, #4
   1defc:	cmp	r6, #0
   1df00:	sbcs	r3, r7, #0
   1df04:	blt	1e324 <__assert_fail@plt+0xcf40>
   1df08:	ldrd	r2, [sp, #16]
   1df0c:	cmp	r2, r6
   1df10:	sbcs	r1, r3, r7
   1df14:	bge	1e300 <__assert_fail@plt+0xcf1c>
   1df18:	sub	fp, fp, #1
   1df1c:	cmn	fp, #1
   1df20:	mvn	r6, #0
   1df24:	mvn	r7, #-2147483648	; 0x80000000
   1df28:	mov	r4, #1
   1df2c:	bne	1df0c <__assert_fail@plt+0xcb28>
   1df30:	b	1ddc0 <__assert_fail@plt+0xc9dc>
   1df34:	mov	sl, #0
   1df38:	str	r4, [sp, #32]
   1df3c:	str	r9, [sp, #36]	; 0x24
   1df40:	mov	r4, sl
   1df44:	mov	r9, r5
   1df48:	ldr	sl, [sp, #12]
   1df4c:	ldr	r5, [sp, #8]
   1df50:	mov	fp, #7
   1df54:	cmp	r6, #0
   1df58:	sbcs	r3, r7, #0
   1df5c:	blt	1e174 <__assert_fail@plt+0xcd90>
   1df60:	ldrd	r2, [sp, #16]
   1df64:	b	1df80 <__assert_fail@plt+0xcb9c>
   1df68:	sub	fp, fp, #1
   1df6c:	cmn	fp, #1
   1df70:	mvn	r6, #0
   1df74:	mvn	r7, #-2147483648	; 0x80000000
   1df78:	mov	r4, #1
   1df7c:	beq	1de24 <__assert_fail@plt+0xca40>
   1df80:	cmp	r2, r6
   1df84:	sbcs	r1, r3, r7
   1df88:	blt	1df68 <__assert_fail@plt+0xcb84>
   1df8c:	mul	r3, r6, r5
   1df90:	cmp	fp, #0
   1df94:	mla	r3, sl, r7, r3
   1df98:	umull	r6, r7, r6, sl
   1df9c:	sub	fp, fp, #1
   1dfa0:	add	r7, r3, r7
   1dfa4:	bne	1df54 <__assert_fail@plt+0xcb70>
   1dfa8:	mov	sl, r4
   1dfac:	mov	r5, r9
   1dfb0:	ldr	r4, [sp, #32]
   1dfb4:	ldr	r9, [sp, #36]	; 0x24
   1dfb8:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1dfbc:	cmp	r6, #0
   1dfc0:	sbcs	r3, r7, #0
   1dfc4:	blt	1e124 <__assert_fail@plt+0xcd40>
   1dfc8:	cmp	r6, #0
   1dfcc:	sbcs	r3, r7, #2097152	; 0x200000
   1dfd0:	blt	1e158 <__assert_fail@plt+0xcd74>
   1dfd4:	mvn	r6, #0
   1dfd8:	mvn	r7, #-2147483648	; 0x80000000
   1dfdc:	mov	sl, #1
   1dfe0:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1dfe4:	cmp	r6, #0
   1dfe8:	sbcs	r3, r7, #0
   1dfec:	blt	1e2c8 <__assert_fail@plt+0xcee4>
   1dff0:	cmp	r6, #0
   1dff4:	sbcs	r3, r7, #4194304	; 0x400000
   1dff8:	bge	1dfd4 <__assert_fail@plt+0xcbf0>
   1dffc:	lsl	r3, r7, #9
   1e000:	orr	r3, r3, r6, lsr #23
   1e004:	lsl	r2, r6, #9
   1e008:	mov	r6, r2
   1e00c:	mov	r7, r3
   1e010:	mov	sl, #0
   1e014:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1e018:	cmp	r6, #0
   1e01c:	sbcs	r3, r7, #0
   1e020:	blt	1e290 <__assert_fail@plt+0xceac>
   1e024:	cmp	r6, #0
   1e028:	sbcs	r3, r7, #1073741824	; 0x40000000
   1e02c:	bge	1dfd4 <__assert_fail@plt+0xcbf0>
   1e030:	adds	r6, r6, r6
   1e034:	adc	r7, r7, r7
   1e038:	mov	sl, #0
   1e03c:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1e040:	strbge	r5, [r3, #1015]!	; 0x3f7
   1e044:	mlaeq	r0, fp, r4, ip
   1e048:			; <UNDEFINED> instruction: 0x001fffff
   1e04c:	andeq	r2, r2, ip, lsl #7
   1e050:	muleq	r2, r8, r3
   1e054:	andeq	r2, r2, r8, lsr #7
   1e058:	strd	r6, [r9]
   1e05c:	orr	r4, r4, #2
   1e060:	b	1d9e8 <__assert_fail@plt+0xc604>
   1e064:	cmp	r6, #0
   1e068:	sbcs	r3, r7, #0
   1e06c:	blt	1e4a4 <__assert_fail@plt+0xd0c0>
   1e070:	ldrd	r2, [sp, #16]
   1e074:	cmp	r2, r6
   1e078:	sbcs	r3, r3, r7
   1e07c:	blt	1dfd4 <__assert_fail@plt+0xcbf0>
   1e080:	ldr	r3, [sp, #8]
   1e084:	ldr	r2, [sp, #12]
   1e088:	mov	sl, #0
   1e08c:	mul	r3, r6, r3
   1e090:	mla	r3, r2, r7, r3
   1e094:	umull	r6, r7, r6, r2
   1e098:	add	r7, r3, r7
   1e09c:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1e0a0:	mov	r3, #1024	; 0x400
   1e0a4:	str	r0, [sp, #8]
   1e0a8:	str	r3, [sp, #12]
   1e0ac:	b	1db34 <__assert_fail@plt+0xc750>
   1e0b0:	mul	r3, r6, r5
   1e0b4:	cmp	fp, #0
   1e0b8:	mla	r3, sl, r7, r3
   1e0bc:	umull	r6, r7, r6, sl
   1e0c0:	sub	fp, fp, #1
   1e0c4:	add	r7, r3, r7
   1e0c8:	bne	1de54 <__assert_fail@plt+0xca70>
   1e0cc:	b	1dfa8 <__assert_fail@plt+0xcbc4>
   1e0d0:	mvn	r3, #0
   1e0d4:	mvn	r2, #0
   1e0d8:	cmp	r7, r3
   1e0dc:	cmpeq	r6, r2
   1e0e0:	beq	1e0b0 <__assert_fail@plt+0xcccc>
   1e0e4:	mov	r2, r6
   1e0e8:	mov	r3, r7
   1e0ec:	mov	r0, #0
   1e0f0:	mov	r1, #-2147483648	; 0x80000000
   1e0f4:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e0f8:	ldrd	r2, [sp, #24]
   1e0fc:	cmp	r0, r2
   1e100:	sbcs	r3, r1, r3
   1e104:	bge	1e0b0 <__assert_fail@plt+0xcccc>
   1e108:	mov	r5, r9
   1e10c:	ldr	r4, [sp, #32]
   1e110:	ldr	r9, [sp, #36]	; 0x24
   1e114:	mov	r6, #0
   1e118:	mov	r7, #-2147483648	; 0x80000000
   1e11c:	mov	sl, #1
   1e120:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1e124:	mvn	r3, #0
   1e128:	mvn	r2, #0
   1e12c:	cmp	r7, r3
   1e130:	cmpeq	r6, r2
   1e134:	beq	1e158 <__assert_fail@plt+0xcd74>
   1e138:	mov	r3, r7
   1e13c:	mov	r2, r6
   1e140:	mov	r0, #0
   1e144:	mov	r1, #-2147483648	; 0x80000000
   1e148:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e14c:	cmp	r0, #1024	; 0x400
   1e150:	sbcs	r3, r1, #0
   1e154:	blt	1e114 <__assert_fail@plt+0xcd30>
   1e158:	lsl	r3, r7, #10
   1e15c:	orr	r3, r3, r6, lsr #22
   1e160:	lsl	r2, r6, #10
   1e164:	mov	r6, r2
   1e168:	mov	r7, r3
   1e16c:	mov	sl, #0
   1e170:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1e174:	mvn	r3, #0
   1e178:	mvn	r2, #0
   1e17c:	cmp	r7, r3
   1e180:	cmpeq	r6, r2
   1e184:	beq	1df8c <__assert_fail@plt+0xcba8>
   1e188:	mov	r2, r6
   1e18c:	mov	r3, r7
   1e190:	mov	r0, #0
   1e194:	mov	r1, #-2147483648	; 0x80000000
   1e198:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e19c:	ldrd	r2, [sp, #24]
   1e1a0:	cmp	r0, r2
   1e1a4:	sbcs	r3, r1, r3
   1e1a8:	bge	1df8c <__assert_fail@plt+0xcba8>
   1e1ac:	b	1e108 <__assert_fail@plt+0xcd24>
   1e1b0:	mvn	r3, #0
   1e1b4:	mvn	r2, #0
   1e1b8:	cmp	r7, r3
   1e1bc:	cmpeq	r6, r2
   1e1c0:	beq	1e1e8 <__assert_fail@plt+0xce04>
   1e1c4:	mov	r2, r6
   1e1c8:	mov	r3, r7
   1e1cc:	mov	r0, #0
   1e1d0:	mov	r1, #-2147483648	; 0x80000000
   1e1d4:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e1d8:	ldrd	r2, [sp, #24]
   1e1dc:	cmp	r0, r2
   1e1e0:	sbcs	r3, r1, r3
   1e1e4:	blt	1e35c <__assert_fail@plt+0xcf78>
   1e1e8:	ldr	r3, [sp, #8]
   1e1ec:	cmp	fp, #0
   1e1f0:	sub	fp, fp, #1
   1e1f4:	mul	r3, r6, r3
   1e1f8:	mla	r3, sl, r7, r3
   1e1fc:	umull	r6, r7, r6, sl
   1e200:	add	r7, r3, r7
   1e204:	bne	1dea8 <__assert_fail@plt+0xcac4>
   1e208:	mov	sl, r4
   1e20c:	mov	r4, r5
   1e210:	mov	r5, r9
   1e214:	ldr	r9, [sp, #32]
   1e218:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1e21c:	mvn	r3, #0
   1e220:	mvn	r2, #0
   1e224:	cmp	r7, r3
   1e228:	cmpeq	r6, r2
   1e22c:	beq	1e254 <__assert_fail@plt+0xce70>
   1e230:	mov	r2, r6
   1e234:	mov	r3, r7
   1e238:	mov	r0, #0
   1e23c:	mov	r1, #-2147483648	; 0x80000000
   1e240:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e244:	ldrd	r2, [sp, #24]
   1e248:	cmp	r0, r2
   1e24c:	sbcs	r3, r1, r3
   1e250:	blt	1e274 <__assert_fail@plt+0xce90>
   1e254:	mul	r3, r6, r5
   1e258:	cmp	fp, #0
   1e25c:	mla	r3, sl, r7, r3
   1e260:	umull	r6, r7, r6, sl
   1e264:	sub	fp, fp, #1
   1e268:	add	r7, r3, r7
   1e26c:	bne	1ddf0 <__assert_fail@plt+0xca0c>
   1e270:	b	1dfa8 <__assert_fail@plt+0xcbc4>
   1e274:	sub	fp, fp, #1
   1e278:	cmn	fp, #1
   1e27c:	mov	r6, #0
   1e280:	mov	r7, #-2147483648	; 0x80000000
   1e284:	mov	r4, #1
   1e288:	bne	1e230 <__assert_fail@plt+0xce4c>
   1e28c:	b	1e108 <__assert_fail@plt+0xcd24>
   1e290:	mvn	r3, #0
   1e294:	mvn	r2, #0
   1e298:	cmp	r7, r3
   1e29c:	cmpeq	r6, r2
   1e2a0:	beq	1e030 <__assert_fail@plt+0xcc4c>
   1e2a4:	mov	r2, r6
   1e2a8:	mov	r3, r7
   1e2ac:	mov	r0, #0
   1e2b0:	mov	r1, #-2147483648	; 0x80000000
   1e2b4:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e2b8:	cmp	r1, #0
   1e2bc:	cmpeq	r0, #1
   1e2c0:	beq	1e114 <__assert_fail@plt+0xcd30>
   1e2c4:	b	1e030 <__assert_fail@plt+0xcc4c>
   1e2c8:	mvn	r3, #0
   1e2cc:	mvn	r2, #0
   1e2d0:	cmp	r7, r3
   1e2d4:	cmpeq	r6, r2
   1e2d8:	beq	1dffc <__assert_fail@plt+0xcc18>
   1e2dc:	mov	r3, r7
   1e2e0:	mov	r2, r6
   1e2e4:	mov	r0, #0
   1e2e8:	mov	r1, #-2147483648	; 0x80000000
   1e2ec:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e2f0:	cmp	r0, #512	; 0x200
   1e2f4:	sbcs	r3, r1, #0
   1e2f8:	blt	1e114 <__assert_fail@plt+0xcd30>
   1e2fc:	b	1dffc <__assert_fail@plt+0xcc18>
   1e300:	ldr	r3, [sp, #8]
   1e304:	cmp	fp, #0
   1e308:	sub	fp, fp, #1
   1e30c:	mul	r3, r6, r3
   1e310:	mla	r3, sl, r7, r3
   1e314:	umull	r6, r7, r6, sl
   1e318:	add	r7, r3, r7
   1e31c:	bne	1defc <__assert_fail@plt+0xcb18>
   1e320:	b	1e208 <__assert_fail@plt+0xce24>
   1e324:	mvn	r3, #0
   1e328:	mvn	r2, #0
   1e32c:	cmp	r7, r3
   1e330:	cmpeq	r6, r2
   1e334:	beq	1e300 <__assert_fail@plt+0xcf1c>
   1e338:	mov	r2, r6
   1e33c:	mov	r3, r7
   1e340:	mov	r0, #0
   1e344:	mov	r1, #-2147483648	; 0x80000000
   1e348:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e34c:	ldrd	r2, [sp, #24]
   1e350:	cmp	r0, r2
   1e354:	sbcs	r3, r1, r3
   1e358:	bge	1e300 <__assert_fail@plt+0xcf1c>
   1e35c:	mov	r4, r5
   1e360:	mov	r5, r9
   1e364:	ldr	r9, [sp, #32]
   1e368:	b	1e114 <__assert_fail@plt+0xcd30>
   1e36c:	ldr	r3, [sp, #8]
   1e370:	ldr	r2, [sp, #12]
   1e374:	cmp	fp, #0
   1e378:	mul	r3, r6, r3
   1e37c:	sub	fp, fp, #1
   1e380:	mla	r3, r2, r7, r3
   1e384:	umull	r6, r7, r6, r2
   1e388:	add	r7, r3, r7
   1e38c:	bne	1dd2c <__assert_fail@plt+0xc948>
   1e390:	mov	r3, sl
   1e394:	mov	sl, r4
   1e398:	mov	r4, r5
   1e39c:	mov	r5, r9
   1e3a0:	mov	r9, r3
   1e3a4:	b	1dcf0 <__assert_fail@plt+0xc90c>
   1e3a8:	mvn	r3, #0
   1e3ac:	mvn	r2, #0
   1e3b0:	cmp	r7, r3
   1e3b4:	cmpeq	r6, r2
   1e3b8:	beq	1e410 <__assert_fail@plt+0xd02c>
   1e3bc:	mov	r3, sl
   1e3c0:	mov	sl, r9
   1e3c4:	mov	r9, r5
   1e3c8:	mov	r5, r4
   1e3cc:	mov	r4, fp
   1e3d0:	mov	fp, r3
   1e3d4:	mov	r2, r6
   1e3d8:	mov	r3, r7
   1e3dc:	mov	r0, #0
   1e3e0:	mov	r1, #-2147483648	; 0x80000000
   1e3e4:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e3e8:	ldrd	r2, [sp, #24]
   1e3ec:	cmp	r0, r2
   1e3f0:	sbcs	r3, r1, r3
   1e3f4:	blt	1e434 <__assert_fail@plt+0xd050>
   1e3f8:	mov	r3, fp
   1e3fc:	mov	fp, r4
   1e400:	mov	r4, r5
   1e404:	mov	r5, r9
   1e408:	mov	r9, sl
   1e40c:	mov	sl, r3
   1e410:	ldr	r3, [sp, #8]
   1e414:	cmp	fp, #0
   1e418:	sub	fp, fp, #1
   1e41c:	mul	r3, r6, r3
   1e420:	mla	r3, sl, r7, r3
   1e424:	umull	r6, r7, r6, sl
   1e428:	add	r7, r3, r7
   1e42c:	bne	1dd8c <__assert_fail@plt+0xc9a8>
   1e430:	b	1e208 <__assert_fail@plt+0xce24>
   1e434:	sub	r4, r4, #1
   1e438:	cmn	r4, #1
   1e43c:	mov	r6, #0
   1e440:	mov	r7, #-2147483648	; 0x80000000
   1e444:	mov	r5, #1
   1e448:	bne	1e3d4 <__assert_fail@plt+0xcff0>
   1e44c:	mov	r4, r9
   1e450:	mov	r5, sl
   1e454:	ldr	r9, [sp, #32]
   1e458:	b	1e114 <__assert_fail@plt+0xcd30>
   1e45c:	mvn	r3, #0
   1e460:	mvn	r2, #0
   1e464:	cmp	r7, r3
   1e468:	cmpeq	r6, r2
   1e46c:	beq	1e36c <__assert_fail@plt+0xcf88>
   1e470:	mov	r2, r6
   1e474:	mov	r3, r7
   1e478:	mov	r0, #0
   1e47c:	mov	r1, #-2147483648	; 0x80000000
   1e480:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e484:	ldrd	r2, [sp, #24]
   1e488:	cmp	r0, r2
   1e48c:	sbcs	r3, r1, r3
   1e490:	bge	1e36c <__assert_fail@plt+0xcf88>
   1e494:	mov	r4, r5
   1e498:	mov	r5, r9
   1e49c:	mov	r9, sl
   1e4a0:	b	1e114 <__assert_fail@plt+0xcd30>
   1e4a4:	mvn	r3, #0
   1e4a8:	mvn	r2, #0
   1e4ac:	cmp	r7, r3
   1e4b0:	cmpeq	r6, r2
   1e4b4:	beq	1e080 <__assert_fail@plt+0xcc9c>
   1e4b8:	mov	r2, r6
   1e4bc:	mov	r3, r7
   1e4c0:	mov	r0, #0
   1e4c4:	mov	r1, #-2147483648	; 0x80000000
   1e4c8:	bl	20494 <__assert_fail@plt+0xf0b0>
   1e4cc:	ldrd	r2, [sp, #24]
   1e4d0:	cmp	r0, r2
   1e4d4:	sbcs	r3, r1, r3
   1e4d8:	blt	1e114 <__assert_fail@plt+0xcd30>
   1e4dc:	b	1e080 <__assert_fail@plt+0xcc9c>
   1e4e0:	ldr	r3, [pc, #-1180]	; 1e04c <__assert_fail@plt+0xcc68>
   1e4e4:	mov	r2, #85	; 0x55
   1e4e8:	ldr	r1, [pc, #-1184]	; 1e050 <__assert_fail@plt+0xcc6c>
   1e4ec:	ldr	r0, [pc, #-1184]	; 1e054 <__assert_fail@plt+0xcc70>
   1e4f0:	bl	113e4 <__assert_fail@plt>
   1e4f4:	cmp	r2, #36	; 0x24
   1e4f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4fc:	sub	sp, sp, #28
   1e500:	bhi	1edac <__assert_fail@plt+0xd9c8>
   1e504:	cmp	r1, #0
   1e508:	mov	r5, r1
   1e50c:	mov	r6, r2
   1e510:	addeq	r5, sp, #20
   1e514:	mov	r9, r0
   1e518:	mov	r8, r3
   1e51c:	bl	112c4 <__errno_location@plt>
   1e520:	mov	r4, #0
   1e524:	mov	r2, r6
   1e528:	mov	r1, r5
   1e52c:	str	r4, [r0]
   1e530:	mov	sl, r0
   1e534:	mov	r0, r9
   1e538:	bl	110cc <strtol@plt>
   1e53c:	ldr	r6, [r5]
   1e540:	cmp	r9, r6
   1e544:	mov	r7, r0
   1e548:	beq	1e598 <__assert_fail@plt+0xd1b4>
   1e54c:	ldr	r4, [sl]
   1e550:	cmp	r4, #0
   1e554:	bne	1e580 <__assert_fail@plt+0xd19c>
   1e558:	ldr	r3, [sp, #64]	; 0x40
   1e55c:	cmp	r3, #0
   1e560:	beq	1e570 <__assert_fail@plt+0xd18c>
   1e564:	ldrb	r9, [r6]
   1e568:	cmp	r9, #0
   1e56c:	bne	1e5c8 <__assert_fail@plt+0xd1e4>
   1e570:	str	r7, [r8]
   1e574:	mov	r0, r4
   1e578:	add	sp, sp, #28
   1e57c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e580:	cmp	r4, #34	; 0x22
   1e584:	beq	1e7e8 <__assert_fail@plt+0xd404>
   1e588:	mov	r4, #4
   1e58c:	mov	r0, r4
   1e590:	add	sp, sp, #28
   1e594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e598:	ldr	r3, [sp, #64]	; 0x40
   1e59c:	cmp	r3, r4
   1e5a0:	beq	1e588 <__assert_fail@plt+0xd1a4>
   1e5a4:	ldrb	r9, [r9]
   1e5a8:	cmp	r9, r4
   1e5ac:	beq	1e588 <__assert_fail@plt+0xd1a4>
   1e5b0:	mov	r1, r9
   1e5b4:	mov	r0, r3
   1e5b8:	bl	112a0 <strchr@plt>
   1e5bc:	cmp	r0, r4
   1e5c0:	movne	r7, #1
   1e5c4:	beq	1e588 <__assert_fail@plt+0xd1a4>
   1e5c8:	mov	r1, r9
   1e5cc:	ldr	r0, [sp, #64]	; 0x40
   1e5d0:	bl	112a0 <strchr@plt>
   1e5d4:	cmp	r0, #0
   1e5d8:	beq	1ea90 <__assert_fail@plt+0xd6ac>
   1e5dc:	sub	r3, r9, #69	; 0x45
   1e5e0:	cmp	r3, #47	; 0x2f
   1e5e4:	ldrls	pc, [pc, r3, lsl #2]
   1e5e8:	b	1e6ac <__assert_fail@plt+0xd2c8>
   1e5ec:	andeq	lr, r1, r4, lsr #15
   1e5f0:	andeq	lr, r1, ip, lsr #13
   1e5f4:	andeq	lr, r1, r4, lsr #15
   1e5f8:	andeq	lr, r1, ip, lsr #13
   1e5fc:	andeq	lr, r1, ip, lsr #13
   1e600:	andeq	lr, r1, ip, lsr #13
   1e604:	andeq	lr, r1, r4, lsr #15
   1e608:	andeq	lr, r1, ip, lsr #13
   1e60c:	andeq	lr, r1, r4, lsr #15
   1e610:	andeq	lr, r1, ip, lsr #13
   1e614:	andeq	lr, r1, ip, lsr #13
   1e618:	andeq	lr, r1, r4, lsr #15
   1e61c:	andeq	lr, r1, ip, lsr #13
   1e620:	andeq	lr, r1, ip, lsr #13
   1e624:	andeq	lr, r1, ip, lsr #13
   1e628:	andeq	lr, r1, r4, lsr #15
   1e62c:	andeq	lr, r1, ip, lsr #13
   1e630:	andeq	lr, r1, ip, lsr #13
   1e634:	andeq	lr, r1, ip, lsr #13
   1e638:	andeq	lr, r1, ip, lsr #13
   1e63c:	andeq	lr, r1, r4, lsr #15
   1e640:	andeq	lr, r1, r4, lsr #15
   1e644:	andeq	lr, r1, ip, lsr #13
   1e648:	andeq	lr, r1, ip, lsr #13
   1e64c:	andeq	lr, r1, ip, lsr #13
   1e650:	andeq	lr, r1, ip, lsr #13
   1e654:	andeq	lr, r1, ip, lsr #13
   1e658:	andeq	lr, r1, ip, lsr #13
   1e65c:	andeq	lr, r1, ip, lsr #13
   1e660:	andeq	lr, r1, ip, lsr #13
   1e664:	andeq	lr, r1, ip, lsr #13
   1e668:	andeq	lr, r1, ip, lsr #13
   1e66c:	andeq	lr, r1, ip, lsr #13
   1e670:	andeq	lr, r1, ip, lsr #13
   1e674:	andeq	lr, r1, r4, lsr #15
   1e678:	andeq	lr, r1, ip, lsr #13
   1e67c:	andeq	lr, r1, ip, lsr #13
   1e680:	andeq	lr, r1, ip, lsr #13
   1e684:	andeq	lr, r1, r4, lsr #15
   1e688:	andeq	lr, r1, ip, lsr #13
   1e68c:	andeq	lr, r1, r4, lsr #15
   1e690:	andeq	lr, r1, ip, lsr #13
   1e694:	andeq	lr, r1, ip, lsr #13
   1e698:	andeq	lr, r1, ip, lsr #13
   1e69c:	andeq	lr, r1, ip, lsr #13
   1e6a0:	andeq	lr, r1, ip, lsr #13
   1e6a4:	andeq	lr, r1, ip, lsr #13
   1e6a8:	andeq	lr, r1, r4, lsr #15
   1e6ac:	ldr	r3, [pc, #1804]	; 1edc0 <__assert_fail@plt+0xd9dc>
   1e6b0:	mov	sl, #1024	; 0x400
   1e6b4:	mov	fp, #1
   1e6b8:	stm	sp, {r3, sl}
   1e6bc:	sub	r9, r9, #66	; 0x42
   1e6c0:	cmp	r9, #53	; 0x35
   1e6c4:	ldrls	pc, [pc, r9, lsl #2]
   1e6c8:	b	1ea90 <__assert_fail@plt+0xd6ac>
   1e6cc:	andeq	lr, r1, ip, lsr sl
   1e6d0:	muleq	r1, r0, sl
   1e6d4:	muleq	r1, r0, sl
   1e6d8:	andeq	lr, r1, r0, lsr #17
   1e6dc:	muleq	r1, r0, sl
   1e6e0:	andeq	lr, r1, r8, ror #16
   1e6e4:	muleq	r1, r0, sl
   1e6e8:	muleq	r1, r0, sl
   1e6ec:	muleq	r1, r0, sl
   1e6f0:	muleq	r1, ip, sl
   1e6f4:	muleq	r1, r0, sl
   1e6f8:	andeq	lr, r1, r0, lsr r8
   1e6fc:	muleq	r1, r0, sl
   1e700:	muleq	r1, r0, sl
   1e704:	andeq	lr, r1, r8, lsl #19
   1e708:	muleq	r1, r0, sl
   1e70c:	muleq	r1, r0, sl
   1e710:	muleq	r1, r0, sl
   1e714:	andeq	lr, r1, r0, asr r9
   1e718:	muleq	r1, r0, sl
   1e71c:	muleq	r1, r0, sl
   1e720:	muleq	r1, r0, sl
   1e724:	muleq	r1, r0, sl
   1e728:	andeq	lr, r1, r0, asr #19
   1e72c:	strdeq	lr, [r1], -ip
   1e730:	muleq	r1, r0, sl
   1e734:	muleq	r1, r0, sl
   1e738:	muleq	r1, r0, sl
   1e73c:	muleq	r1, r0, sl
   1e740:	muleq	r1, r0, sl
   1e744:	muleq	r1, r0, sl
   1e748:	muleq	r1, r0, sl
   1e74c:	andeq	lr, r1, r4, ror sl
   1e750:	andeq	lr, r1, r0, lsl r8
   1e754:	muleq	r1, r0, sl
   1e758:	muleq	r1, r0, sl
   1e75c:	muleq	r1, r0, sl
   1e760:	andeq	lr, r1, r8, ror #16
   1e764:	muleq	r1, r0, sl
   1e768:	muleq	r1, r0, sl
   1e76c:	muleq	r1, r0, sl
   1e770:	muleq	r1, ip, sl
   1e774:	muleq	r1, r0, sl
   1e778:	andeq	lr, r1, r0, lsr r8
   1e77c:	muleq	r1, r0, sl
   1e780:	muleq	r1, r0, sl
   1e784:	muleq	r1, r0, sl
   1e788:	muleq	r1, r0, sl
   1e78c:	muleq	r1, r0, sl
   1e790:	muleq	r1, r0, sl
   1e794:	andeq	lr, r1, r0, asr r9
   1e798:	muleq	r1, r0, sl
   1e79c:	muleq	r1, r0, sl
   1e7a0:	andeq	lr, r1, r8, asr sl
   1e7a4:	mov	r1, #48	; 0x30
   1e7a8:	ldr	r0, [sp, #64]	; 0x40
   1e7ac:	bl	112a0 <strchr@plt>
   1e7b0:	cmp	r0, #0
   1e7b4:	beq	1e6ac <__assert_fail@plt+0xd2c8>
   1e7b8:	ldrb	r3, [r6, #1]
   1e7bc:	cmp	r3, #68	; 0x44
   1e7c0:	beq	1e7d4 <__assert_fail@plt+0xd3f0>
   1e7c4:	cmp	r3, #105	; 0x69
   1e7c8:	beq	1e7f0 <__assert_fail@plt+0xd40c>
   1e7cc:	cmp	r3, #66	; 0x42
   1e7d0:	bne	1e6ac <__assert_fail@plt+0xd2c8>
   1e7d4:	ldr	r3, [pc, #1512]	; 1edc4 <__assert_fail@plt+0xd9e0>
   1e7d8:	mov	sl, #1000	; 0x3e8
   1e7dc:	mov	fp, #2
   1e7e0:	stm	sp, {r3, sl}
   1e7e4:	b	1e6bc <__assert_fail@plt+0xd2d8>
   1e7e8:	mov	r4, #1
   1e7ec:	b	1e558 <__assert_fail@plt+0xd174>
   1e7f0:	ldrb	r3, [r6, #2]
   1e7f4:	mov	sl, #1024	; 0x400
   1e7f8:	cmp	r3, #66	; 0x42
   1e7fc:	beq	1eb70 <__assert_fail@plt+0xd78c>
   1e800:	ldr	r3, [pc, #1464]	; 1edc0 <__assert_fail@plt+0xd9dc>
   1e804:	mov	fp, #1
   1e808:	stm	sp, {r3, sl}
   1e80c:	b	1e6bc <__assert_fail@plt+0xd2d8>
   1e810:	mov	r9, #0
   1e814:	add	r3, r6, fp
   1e818:	str	r3, [r5]
   1e81c:	ldrb	r3, [r6, fp]
   1e820:	orr	r4, r4, r9
   1e824:	cmp	r3, #0
   1e828:	orrne	r4, r4, #2
   1e82c:	b	1e570 <__assert_fail@plt+0xd18c>
   1e830:	mov	r3, #1
   1e834:	mov	r2, r3
   1e838:	mov	r9, #0
   1e83c:	cmp	r7, #0
   1e840:	ldrge	r1, [sp]
   1e844:	blt	1ed34 <__assert_fail@plt+0xd950>
   1e848:	cmp	r7, r1
   1e84c:	ble	1ed64 <__assert_fail@plt+0xd980>
   1e850:	sub	r3, r3, #1
   1e854:	cmn	r3, #1
   1e858:	mvn	r7, #-2147483648	; 0x80000000
   1e85c:	mov	r9, r2
   1e860:	bne	1e848 <__assert_fail@plt+0xd464>
   1e864:	b	1ea4c <__assert_fail@plt+0xd668>
   1e868:	mov	r3, #2
   1e86c:	mov	r9, #0
   1e870:	mov	r2, #1
   1e874:	cmp	r7, #0
   1e878:	ldrge	r1, [sp]
   1e87c:	blt	1ece8 <__assert_fail@plt+0xd904>
   1e880:	cmp	r7, r1
   1e884:	ble	1ecd0 <__assert_fail@plt+0xd8ec>
   1e888:	sub	r3, r3, #1
   1e88c:	cmn	r3, #1
   1e890:	mvn	r7, #-2147483648	; 0x80000000
   1e894:	mov	r9, r2
   1e898:	bne	1e880 <__assert_fail@plt+0xd49c>
   1e89c:	b	1ea4c <__assert_fail@plt+0xd668>
   1e8a0:	mov	r3, #5
   1e8a4:	mov	r1, r8
   1e8a8:	mov	r9, #0
   1e8ac:	mov	r8, r5
   1e8b0:	mov	r2, #1
   1e8b4:	mov	r5, r4
   1e8b8:	mov	r4, sl
   1e8bc:	mov	sl, r3
   1e8c0:	mov	r3, r1
   1e8c4:	cmp	r7, #0
   1e8c8:	ldrge	r1, [sp]
   1e8cc:	blt	1eabc <__assert_fail@plt+0xd6d8>
   1e8d0:	cmp	r7, r1
   1e8d4:	ble	1eb14 <__assert_fail@plt+0xd730>
   1e8d8:	sub	sl, sl, #1
   1e8dc:	cmn	sl, #1
   1e8e0:	mvn	r7, #-2147483648	; 0x80000000
   1e8e4:	mov	r9, r2
   1e8e8:	bne	1e8d0 <__assert_fail@plt+0xd4ec>
   1e8ec:	mov	r4, r5
   1e8f0:	mov	r5, r8
   1e8f4:	mov	r8, r3
   1e8f8:	b	1ea4c <__assert_fail@plt+0xd668>
   1e8fc:	mov	r3, #6
   1e900:	mov	r9, #0
   1e904:	mov	r1, r8
   1e908:	mov	r2, #1
   1e90c:	mov	r8, r5
   1e910:	mov	r5, r4
   1e914:	mov	r4, r9
   1e918:	mov	r9, sl
   1e91c:	mov	sl, r3
   1e920:	mov	r3, r1
   1e924:	cmp	r7, #0
   1e928:	ldrge	r1, [sp]
   1e92c:	blt	1eb28 <__assert_fail@plt+0xd744>
   1e930:	cmp	r7, r1
   1e934:	ble	1ebac <__assert_fail@plt+0xd7c8>
   1e938:	sub	sl, sl, #1
   1e93c:	cmn	sl, #1
   1e940:	mvn	r7, #-2147483648	; 0x80000000
   1e944:	mov	r4, r2
   1e948:	bne	1e930 <__assert_fail@plt+0xd54c>
   1e94c:	b	1e8ec <__assert_fail@plt+0xd508>
   1e950:	mov	r3, #3
   1e954:	mov	r9, #0
   1e958:	mov	r2, #1
   1e95c:	cmp	r7, #0
   1e960:	ldrge	r1, [sp]
   1e964:	blt	1ec80 <__assert_fail@plt+0xd89c>
   1e968:	cmp	r7, r1
   1e96c:	ble	1ecb0 <__assert_fail@plt+0xd8cc>
   1e970:	sub	r3, r3, #1
   1e974:	cmn	r3, #1
   1e978:	mvn	r7, #-2147483648	; 0x80000000
   1e97c:	mov	r9, r2
   1e980:	bne	1e968 <__assert_fail@plt+0xd584>
   1e984:	b	1ea4c <__assert_fail@plt+0xd668>
   1e988:	mov	r3, #4
   1e98c:	mov	r9, #0
   1e990:	mov	r2, #1
   1e994:	cmp	r7, #0
   1e998:	ldrge	r1, [sp]
   1e99c:	blt	1ebf8 <__assert_fail@plt+0xd814>
   1e9a0:	cmp	r1, r7
   1e9a4:	bge	1ec28 <__assert_fail@plt+0xd844>
   1e9a8:	sub	r3, r3, #1
   1e9ac:	cmn	r3, #1
   1e9b0:	mov	r9, r2
   1e9b4:	mvn	r7, #-2147483648	; 0x80000000
   1e9b8:	bne	1e9a0 <__assert_fail@plt+0xd5bc>
   1e9bc:	b	1ea4c <__assert_fail@plt+0xd668>
   1e9c0:	mov	r3, #7
   1e9c4:	mov	r9, #0
   1e9c8:	mov	r1, r8
   1e9cc:	mov	r2, #1
   1e9d0:	mov	r8, r5
   1e9d4:	mov	r5, r4
   1e9d8:	mov	r4, r9
   1e9dc:	mov	r9, sl
   1e9e0:	mov	sl, r3
   1e9e4:	mov	r3, r1
   1e9e8:	cmp	r7, #0
   1e9ec:	ldrge	r1, [sp]
   1e9f0:	bge	1ea0c <__assert_fail@plt+0xd628>
   1e9f4:	b	1ebc4 <__assert_fail@plt+0xd7e0>
   1e9f8:	sub	sl, sl, #1
   1e9fc:	cmn	sl, #1
   1ea00:	mvn	r7, #-2147483648	; 0x80000000
   1ea04:	mov	r4, r2
   1ea08:	beq	1e8ec <__assert_fail@plt+0xd508>
   1ea0c:	cmp	r1, r7
   1ea10:	blt	1e9f8 <__assert_fail@plt+0xd614>
   1ea14:	cmp	sl, #0
   1ea18:	mov	r1, sl
   1ea1c:	mul	r7, r9, r7
   1ea20:	sub	sl, sl, #1
   1ea24:	bne	1e9e8 <__assert_fail@plt+0xd604>
   1ea28:	mov	r9, r4
   1ea2c:	mov	r4, r5
   1ea30:	mov	r5, r8
   1ea34:	mov	r8, r3
   1ea38:	b	1e814 <__assert_fail@plt+0xd430>
   1ea3c:	cmp	r7, #0
   1ea40:	blt	1eb84 <__assert_fail@plt+0xd7a0>
   1ea44:	cmp	r7, #2097152	; 0x200000
   1ea48:	blt	1eba0 <__assert_fail@plt+0xd7bc>
   1ea4c:	mvn	r7, #-2147483648	; 0x80000000
   1ea50:	mov	r9, #1
   1ea54:	b	1e814 <__assert_fail@plt+0xd430>
   1ea58:	cmp	r7, #0
   1ea5c:	blt	1ec40 <__assert_fail@plt+0xd85c>
   1ea60:	cmn	r7, #-1073741823	; 0xc0000001
   1ea64:	bgt	1ea4c <__assert_fail@plt+0xd668>
   1ea68:	lsl	r7, r7, #1
   1ea6c:	mov	r9, #0
   1ea70:	b	1e814 <__assert_fail@plt+0xd430>
   1ea74:	cmp	r7, #0
   1ea78:	blt	1ec60 <__assert_fail@plt+0xd87c>
   1ea7c:	cmp	r7, #4194304	; 0x400000
   1ea80:	bge	1ea4c <__assert_fail@plt+0xd668>
   1ea84:	lsl	r7, r7, #9
   1ea88:	mov	r9, #0
   1ea8c:	b	1e814 <__assert_fail@plt+0xd430>
   1ea90:	str	r7, [r8]
   1ea94:	orr	r4, r4, #2
   1ea98:	b	1e574 <__assert_fail@plt+0xd190>
   1ea9c:	cmp	r7, #0
   1eaa0:	blt	1ed7c <__assert_fail@plt+0xd998>
   1eaa4:	ldr	r3, [sp]
   1eaa8:	cmp	r7, r3
   1eaac:	bgt	1ea4c <__assert_fail@plt+0xd668>
   1eab0:	mul	r7, sl, r7
   1eab4:	mov	r9, #0
   1eab8:	b	1e814 <__assert_fail@plt+0xd430>
   1eabc:	cmn	r7, #1
   1eac0:	beq	1eb14 <__assert_fail@plt+0xd730>
   1eac4:	str	r4, [sp, #12]
   1eac8:	mov	r4, r9
   1eacc:	mov	r9, r3
   1ead0:	b	1eae8 <__assert_fail@plt+0xd704>
   1ead4:	sub	sl, sl, #1
   1ead8:	cmn	sl, #1
   1eadc:	mov	r4, r2
   1eae0:	mov	r7, #-2147483648	; 0x80000000
   1eae4:	beq	1ed9c <__assert_fail@plt+0xd9b8>
   1eae8:	mov	r1, r7
   1eaec:	mov	r0, #-2147483648	; 0x80000000
   1eaf0:	str	r2, [sp, #8]
   1eaf4:	bl	20254 <__assert_fail@plt+0xee70>
   1eaf8:	ldr	r3, [sp, #4]
   1eafc:	ldr	r2, [sp, #8]
   1eb00:	cmp	r0, r3
   1eb04:	blt	1ead4 <__assert_fail@plt+0xd6f0>
   1eb08:	mov	r3, r9
   1eb0c:	mov	r9, r4
   1eb10:	ldr	r4, [sp, #12]
   1eb14:	cmp	sl, #0
   1eb18:	mul	r7, r4, r7
   1eb1c:	sub	sl, sl, #1
   1eb20:	bne	1e8c4 <__assert_fail@plt+0xd4e0>
   1eb24:	b	1ea2c <__assert_fail@plt+0xd648>
   1eb28:	cmn	r7, #1
   1eb2c:	beq	1ebac <__assert_fail@plt+0xd7c8>
   1eb30:	mov	r1, r7
   1eb34:	mov	r0, #-2147483648	; 0x80000000
   1eb38:	str	r3, [sp, #12]
   1eb3c:	str	r2, [sp, #8]
   1eb40:	bl	20254 <__assert_fail@plt+0xee70>
   1eb44:	ldr	r3, [sp, #4]
   1eb48:	ldr	r2, [sp, #8]
   1eb4c:	cmp	r0, r3
   1eb50:	ldr	r3, [sp, #12]
   1eb54:	bge	1ebac <__assert_fail@plt+0xd7c8>
   1eb58:	mov	r4, r5
   1eb5c:	mov	r5, r8
   1eb60:	mov	r8, r3
   1eb64:	mov	r7, #-2147483648	; 0x80000000
   1eb68:	mov	r9, #1
   1eb6c:	b	1e814 <__assert_fail@plt+0xd430>
   1eb70:	ldr	r3, [pc, #584]	; 1edc0 <__assert_fail@plt+0xd9dc>
   1eb74:	str	sl, [sp, #4]
   1eb78:	str	r3, [sp]
   1eb7c:	mov	fp, #3
   1eb80:	b	1e6bc <__assert_fail@plt+0xd2d8>
   1eb84:	cmn	r7, #1
   1eb88:	beq	1eba0 <__assert_fail@plt+0xd7bc>
   1eb8c:	mov	r1, r7
   1eb90:	mov	r0, #-2147483648	; 0x80000000
   1eb94:	bl	20254 <__assert_fail@plt+0xee70>
   1eb98:	cmp	r0, #1024	; 0x400
   1eb9c:	blt	1eb64 <__assert_fail@plt+0xd780>
   1eba0:	lsl	r7, r7, #10
   1eba4:	mov	r9, #0
   1eba8:	b	1e814 <__assert_fail@plt+0xd430>
   1ebac:	cmp	sl, #0
   1ebb0:	mov	r1, sl
   1ebb4:	mul	r7, r9, r7
   1ebb8:	sub	sl, sl, #1
   1ebbc:	bne	1e924 <__assert_fail@plt+0xd540>
   1ebc0:	b	1ea28 <__assert_fail@plt+0xd644>
   1ebc4:	cmn	r7, #1
   1ebc8:	beq	1ea14 <__assert_fail@plt+0xd630>
   1ebcc:	mov	r1, r7
   1ebd0:	mov	r0, #-2147483648	; 0x80000000
   1ebd4:	str	r3, [sp, #12]
   1ebd8:	str	r2, [sp, #8]
   1ebdc:	bl	20254 <__assert_fail@plt+0xee70>
   1ebe0:	ldr	r3, [sp, #4]
   1ebe4:	ldr	r2, [sp, #8]
   1ebe8:	cmp	r0, r3
   1ebec:	ldr	r3, [sp, #12]
   1ebf0:	blt	1eb58 <__assert_fail@plt+0xd774>
   1ebf4:	b	1ea14 <__assert_fail@plt+0xd630>
   1ebf8:	cmn	r7, #1
   1ebfc:	beq	1ec28 <__assert_fail@plt+0xd844>
   1ec00:	mov	r1, r7
   1ec04:	mov	r0, #-2147483648	; 0x80000000
   1ec08:	str	r3, [sp, #12]
   1ec0c:	str	r2, [sp, #8]
   1ec10:	bl	20254 <__assert_fail@plt+0xee70>
   1ec14:	ldr	r3, [sp, #4]
   1ec18:	ldr	r2, [sp, #8]
   1ec1c:	cmp	r0, r3
   1ec20:	ldr	r3, [sp, #12]
   1ec24:	blt	1eb64 <__assert_fail@plt+0xd780>
   1ec28:	cmp	r3, #0
   1ec2c:	mov	r1, r3
   1ec30:	mul	r7, sl, r7
   1ec34:	sub	r3, r3, #1
   1ec38:	bne	1e994 <__assert_fail@plt+0xd5b0>
   1ec3c:	b	1e814 <__assert_fail@plt+0xd430>
   1ec40:	cmn	r7, #1
   1ec44:	beq	1ea68 <__assert_fail@plt+0xd684>
   1ec48:	mov	r1, r7
   1ec4c:	mov	r0, #-2147483648	; 0x80000000
   1ec50:	bl	20254 <__assert_fail@plt+0xee70>
   1ec54:	cmp	r0, #1
   1ec58:	beq	1eb64 <__assert_fail@plt+0xd780>
   1ec5c:	b	1ea68 <__assert_fail@plt+0xd684>
   1ec60:	cmn	r7, #1
   1ec64:	beq	1ea84 <__assert_fail@plt+0xd6a0>
   1ec68:	mov	r1, r7
   1ec6c:	mov	r0, #-2147483648	; 0x80000000
   1ec70:	bl	20254 <__assert_fail@plt+0xee70>
   1ec74:	cmp	r0, #512	; 0x200
   1ec78:	blt	1eb64 <__assert_fail@plt+0xd780>
   1ec7c:	b	1ea84 <__assert_fail@plt+0xd6a0>
   1ec80:	cmn	r7, #1
   1ec84:	beq	1ecb0 <__assert_fail@plt+0xd8cc>
   1ec88:	mov	r1, r7
   1ec8c:	mov	r0, #-2147483648	; 0x80000000
   1ec90:	str	r3, [sp, #12]
   1ec94:	str	r2, [sp, #8]
   1ec98:	bl	20254 <__assert_fail@plt+0xee70>
   1ec9c:	ldr	r3, [sp, #4]
   1eca0:	ldr	r2, [sp, #8]
   1eca4:	cmp	r0, r3
   1eca8:	ldr	r3, [sp, #12]
   1ecac:	blt	1eb64 <__assert_fail@plt+0xd780>
   1ecb0:	cmp	r3, #0
   1ecb4:	mov	r1, r3
   1ecb8:	mul	r7, sl, r7
   1ecbc:	sub	r3, r3, #1
   1ecc0:	bne	1e95c <__assert_fail@plt+0xd578>
   1ecc4:	b	1e814 <__assert_fail@plt+0xd430>
   1ecc8:	mov	r3, r6
   1eccc:	ldr	r6, [sp, #12]
   1ecd0:	cmp	r3, #0
   1ecd4:	mov	r1, r3
   1ecd8:	mul	r7, sl, r7
   1ecdc:	sub	r3, r3, #1
   1ece0:	bne	1e874 <__assert_fail@plt+0xd490>
   1ece4:	b	1e814 <__assert_fail@plt+0xd430>
   1ece8:	cmn	r7, #1
   1ecec:	beq	1ecd0 <__assert_fail@plt+0xd8ec>
   1ecf0:	str	r6, [sp, #12]
   1ecf4:	mov	r6, r3
   1ecf8:	mov	r1, r7
   1ecfc:	mov	r0, #-2147483648	; 0x80000000
   1ed00:	str	r2, [sp, #8]
   1ed04:	bl	20254 <__assert_fail@plt+0xee70>
   1ed08:	ldr	r3, [sp, #4]
   1ed0c:	ldr	r2, [sp, #8]
   1ed10:	cmp	r0, r3
   1ed14:	bge	1ecc8 <__assert_fail@plt+0xd8e4>
   1ed18:	sub	r6, r6, #1
   1ed1c:	cmn	r6, #1
   1ed20:	mov	r7, #-2147483648	; 0x80000000
   1ed24:	mov	r9, r2
   1ed28:	bne	1ecf8 <__assert_fail@plt+0xd914>
   1ed2c:	ldr	r6, [sp, #12]
   1ed30:	b	1eb64 <__assert_fail@plt+0xd780>
   1ed34:	cmn	r7, #1
   1ed38:	beq	1ed64 <__assert_fail@plt+0xd980>
   1ed3c:	mov	r1, r7
   1ed40:	mov	r0, #-2147483648	; 0x80000000
   1ed44:	str	r3, [sp, #12]
   1ed48:	str	r2, [sp, #8]
   1ed4c:	bl	20254 <__assert_fail@plt+0xee70>
   1ed50:	ldr	r3, [sp, #4]
   1ed54:	ldr	r2, [sp, #8]
   1ed58:	cmp	r0, r3
   1ed5c:	ldr	r3, [sp, #12]
   1ed60:	blt	1eb64 <__assert_fail@plt+0xd780>
   1ed64:	cmp	r3, #0
   1ed68:	mov	r1, r3
   1ed6c:	mul	r7, sl, r7
   1ed70:	sub	r3, r3, #1
   1ed74:	bne	1e83c <__assert_fail@plt+0xd458>
   1ed78:	b	1e814 <__assert_fail@plt+0xd430>
   1ed7c:	cmn	r7, #1
   1ed80:	beq	1eab0 <__assert_fail@plt+0xd6cc>
   1ed84:	mov	r1, r7
   1ed88:	mov	r0, #-2147483648	; 0x80000000
   1ed8c:	bl	20254 <__assert_fail@plt+0xee70>
   1ed90:	cmp	r0, sl
   1ed94:	blt	1eb64 <__assert_fail@plt+0xd780>
   1ed98:	b	1eab0 <__assert_fail@plt+0xd6cc>
   1ed9c:	mov	r4, r5
   1eda0:	mov	r5, r8
   1eda4:	mov	r8, r9
   1eda8:	b	1eb64 <__assert_fail@plt+0xd780>
   1edac:	ldr	r3, [pc, #20]	; 1edc8 <__assert_fail@plt+0xd9e4>
   1edb0:	mov	r2, #85	; 0x55
   1edb4:	ldr	r1, [pc, #16]	; 1edcc <__assert_fail@plt+0xd9e8>
   1edb8:	ldr	r0, [pc, #16]	; 1edd0 <__assert_fail@plt+0xd9ec>
   1edbc:	bl	113e4 <__assert_fail@plt>
   1edc0:			; <UNDEFINED> instruction: 0x001fffff
   1edc4:	mlaeq	r0, fp, r4, ip
   1edc8:	ldrdeq	r2, [r2], -r0
   1edcc:	muleq	r2, r8, r3
   1edd0:	andeq	r2, r2, r8, lsr #7
   1edd4:	ldr	ip, [pc, #148]	; 1ee70 <__assert_fail@plt+0xda8c>
   1edd8:	sub	r0, r0, #1
   1eddc:	push	{lr}		; (str lr, [sp, #-4]!)
   1ede0:	sub	sp, sp, #20
   1ede4:	ldr	r5, [ip]
   1ede8:	cmp	r0, #3
   1edec:	ldrls	pc, [pc, r0, lsl #2]
   1edf0:	b	1ee5c <__assert_fail@plt+0xda78>
   1edf4:	andeq	lr, r1, r8, ror #28
   1edf8:	andeq	lr, r1, r0, ror #28
   1edfc:	andeq	lr, r1, r0, ror #28
   1ee00:	andeq	lr, r1, r4, lsl #28
   1ee04:	ldr	r0, [pc, #104]	; 1ee74 <__assert_fail@plt+0xda90>
   1ee08:	cmp	r1, #0
   1ee0c:	movlt	r3, #0
   1ee10:	ldrlt	r4, [pc, #96]	; 1ee78 <__assert_fail@plt+0xda94>
   1ee14:	ldrge	r6, [r3, r1, lsl #4]
   1ee18:	sublt	r4, r4, r1
   1ee1c:	strblt	r2, [sp, #12]
   1ee20:	mov	r1, r0
   1ee24:	mov	r2, #5
   1ee28:	mov	r0, #0
   1ee2c:	strblt	r3, [sp, #13]
   1ee30:	addlt	r6, sp, #12
   1ee34:	ldrge	r4, [pc, #60]	; 1ee78 <__assert_fail@plt+0xda94>
   1ee38:	bl	11168 <dcgettext@plt>
   1ee3c:	ldr	r3, [sp, #24]
   1ee40:	str	r6, [sp]
   1ee44:	str	r3, [sp, #4]
   1ee48:	mov	r1, #0
   1ee4c:	mov	r3, r4
   1ee50:	mov	r2, r0
   1ee54:	mov	r0, r5
   1ee58:	bl	11204 <error@plt>
   1ee5c:	bl	113cc <abort@plt>
   1ee60:	ldr	r0, [pc, #20]	; 1ee7c <__assert_fail@plt+0xda98>
   1ee64:	b	1ee08 <__assert_fail@plt+0xda24>
   1ee68:	ldr	r0, [pc, #16]	; 1ee80 <__assert_fail@plt+0xda9c>
   1ee6c:	b	1ee08 <__assert_fail@plt+0xda24>
   1ee70:	andeq	r3, r3, r4, lsl #3
   1ee74:	ldrdeq	r2, [r2], -r8
   1ee78:	andeq	r2, r2, ip, lsr r4
   1ee7c:	strdeq	r2, [r2], -r4
   1ee80:	andeq	r2, r2, ip, lsl r4
   1ee84:	andeq	r0, r0, r0
   1ee88:	cmp	r2, #36	; 0x24
   1ee8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee90:	sub	sp, sp, #52	; 0x34
   1ee94:	bhi	1fc24 <__assert_fail@plt+0xe840>
   1ee98:	cmp	r1, #0
   1ee9c:	mov	r6, r2
   1eea0:	mov	sl, r0
   1eea4:	mov	r5, r1
   1eea8:	mov	r8, r3
   1eeac:	addeq	r5, sp, #44	; 0x2c
   1eeb0:	bl	112c4 <__errno_location@plt>
   1eeb4:	mov	r3, #0
   1eeb8:	str	r3, [r0]
   1eebc:	mov	fp, r0
   1eec0:	bl	1127c <__ctype_b_loc@plt>
   1eec4:	ldrb	r3, [sl]
   1eec8:	mov	r2, sl
   1eecc:	ldr	r0, [r0]
   1eed0:	b	1eed8 <__assert_fail@plt+0xdaf4>
   1eed4:	ldrb	r3, [r2, #1]!
   1eed8:	lsl	r1, r3, #1
   1eedc:	ldrh	r4, [r0, r1]
   1eee0:	ands	r4, r4, #8192	; 0x2000
   1eee4:	bne	1eed4 <__assert_fail@plt+0xdaf0>
   1eee8:	cmp	r3, #45	; 0x2d
   1eeec:	bne	1ef00 <__assert_fail@plt+0xdb1c>
   1eef0:	mov	r4, #4
   1eef4:	mov	r0, r4
   1eef8:	add	sp, sp, #52	; 0x34
   1eefc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef00:	mov	r2, r6
   1ef04:	mov	r3, r4
   1ef08:	mov	r1, r5
   1ef0c:	mov	r0, sl
   1ef10:	bl	11138 <__strtoull_internal@plt>
   1ef14:	ldr	r9, [r5]
   1ef18:	cmp	sl, r9
   1ef1c:	mov	r6, r0
   1ef20:	mov	r7, r1
   1ef24:	beq	1ef6c <__assert_fail@plt+0xdb88>
   1ef28:	ldr	r4, [fp]
   1ef2c:	cmp	r4, #0
   1ef30:	bne	1ef5c <__assert_fail@plt+0xdb78>
   1ef34:	ldr	r3, [sp, #88]	; 0x58
   1ef38:	cmp	r3, #0
   1ef3c:	beq	1ef4c <__assert_fail@plt+0xdb68>
   1ef40:	ldrb	sl, [r9]
   1ef44:	cmp	sl, #0
   1ef48:	bne	1efa0 <__assert_fail@plt+0xdbbc>
   1ef4c:	mov	r0, r4
   1ef50:	strd	r6, [r8]
   1ef54:	add	sp, sp, #52	; 0x34
   1ef58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef5c:	cmp	r4, #34	; 0x22
   1ef60:	bne	1eef0 <__assert_fail@plt+0xdb0c>
   1ef64:	mov	r4, #1
   1ef68:	b	1ef34 <__assert_fail@plt+0xdb50>
   1ef6c:	ldr	r3, [sp, #88]	; 0x58
   1ef70:	cmp	r3, #0
   1ef74:	beq	1eef0 <__assert_fail@plt+0xdb0c>
   1ef78:	ldrb	sl, [r9]
   1ef7c:	cmp	sl, #0
   1ef80:	beq	1eef0 <__assert_fail@plt+0xdb0c>
   1ef84:	mov	r1, sl
   1ef88:	mov	r0, r3
   1ef8c:	bl	112a0 <strchr@plt>
   1ef90:	cmp	r0, #0
   1ef94:	movne	r6, #1
   1ef98:	movne	r7, #0
   1ef9c:	beq	1eef0 <__assert_fail@plt+0xdb0c>
   1efa0:	mov	r1, sl
   1efa4:	ldr	r0, [sp, #88]	; 0x58
   1efa8:	bl	112a0 <strchr@plt>
   1efac:	cmp	r0, #0
   1efb0:	beq	1fb10 <__assert_fail@plt+0xe72c>
   1efb4:	sub	r3, sl, #69	; 0x45
   1efb8:	cmp	r3, #47	; 0x2f
   1efbc:	ldrls	pc, [pc, r3, lsl #2]
   1efc0:	b	1f0b4 <__assert_fail@plt+0xdcd0>
   1efc4:	andeq	pc, r1, r4, lsl #1
   1efc8:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1efcc:	andeq	pc, r1, r4, lsl #1
   1efd0:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1efd4:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1efd8:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1efdc:	andeq	pc, r1, r4, lsl #1
   1efe0:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1efe4:	andeq	pc, r1, r4, lsl #1
   1efe8:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1efec:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1eff0:	andeq	pc, r1, r4, lsl #1
   1eff4:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1eff8:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1effc:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f000:	andeq	pc, r1, r4, lsl #1
   1f004:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f008:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f00c:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f010:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f014:	andeq	pc, r1, r4, lsl #1
   1f018:	andeq	pc, r1, r4, lsl #1
   1f01c:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f020:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f024:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f028:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f02c:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f030:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f034:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f038:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f03c:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f040:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f044:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f048:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f04c:	andeq	pc, r1, r4, lsl #1
   1f050:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f054:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f058:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f05c:	andeq	pc, r1, r4, lsl #1
   1f060:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f064:	andeq	pc, r1, r4, lsl #1
   1f068:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f06c:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f070:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f074:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f078:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f07c:	strheq	pc, [r1], -r4	; <UNPREDICTABLE>
   1f080:	andeq	pc, r1, r4, lsl #1
   1f084:	mov	r1, #48	; 0x30
   1f088:	ldr	r0, [sp, #88]	; 0x58
   1f08c:	bl	112a0 <strchr@plt>
   1f090:	cmp	r0, #0
   1f094:	beq	1fba4 <__assert_fail@plt+0xe7c0>
   1f098:	ldrb	r3, [r9, #1]
   1f09c:	cmp	r3, #68	; 0x44
   1f0a0:	beq	1fb84 <__assert_fail@plt+0xe7a0>
   1f0a4:	cmp	r3, #105	; 0x69
   1f0a8:	beq	1fb54 <__assert_fail@plt+0xe770>
   1f0ac:	cmp	r3, #66	; 0x42
   1f0b0:	beq	1fb84 <__assert_fail@plt+0xe7a0>
   1f0b4:	ldr	r3, [pc, #2948]	; 1fc40 <__assert_fail@plt+0xe85c>
   1f0b8:	mvn	r2, #0
   1f0bc:	mov	r1, #1024	; 0x400
   1f0c0:	mov	lr, #0
   1f0c4:	strd	r2, [sp]
   1f0c8:	mov	r3, #1
   1f0cc:	str	r3, [sp, #12]
   1f0d0:	sub	sl, sl, #66	; 0x42
   1f0d4:	cmp	sl, #53	; 0x35
   1f0d8:	ldrls	pc, [pc, sl, lsl #2]
   1f0dc:	b	1fb10 <__assert_fail@plt+0xe72c>
   1f0e0:	andeq	pc, r1, r0, ror #21
   1f0e4:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f0e8:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f0ec:	andeq	pc, r1, ip, asr r9	; <UNPREDICTABLE>
   1f0f0:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f0f4:	muleq	r1, r8, r8
   1f0f8:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f0fc:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f100:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f104:	andeq	pc, r1, ip, lsl fp	; <UNPREDICTABLE>
   1f108:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f10c:			; <UNDEFINED> instruction: 0x0001f1b8
   1f110:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f114:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f118:	andeq	pc, r1, r4, asr #4
   1f11c:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f120:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f124:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f128:	andeq	pc, r1, r4, asr #11
   1f12c:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f130:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f134:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f138:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f13c:	muleq	r1, ip, r3
   1f140:	strdeq	pc, [r1], -r8
   1f144:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f148:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f14c:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f150:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f154:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f158:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f15c:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f160:	andeq	pc, r1, r8, asr #13
   1f164:	andeq	pc, r1, r0, asr #13
   1f168:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f16c:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f170:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f174:	muleq	r1, r8, r8
   1f178:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f17c:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f180:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f184:	andeq	pc, r1, ip, lsl fp	; <UNPREDICTABLE>
   1f188:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f18c:			; <UNDEFINED> instruction: 0x0001f1b8
   1f190:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f194:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f198:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f19c:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f1a0:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f1a4:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f1a8:	andeq	pc, r1, r4, asr #11
   1f1ac:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f1b0:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   1f1b4:	andeq	pc, r1, r4, lsr #13
   1f1b8:	mul	r0, r6, lr
   1f1bc:	ldrd	sl, [sp]
   1f1c0:	umull	r2, r3, r6, r1
   1f1c4:	mla	r0, r1, r7, r0
   1f1c8:	cmp	r7, fp
   1f1cc:	cmpeq	r6, sl
   1f1d0:	add	r3, r0, r3
   1f1d4:	mvnhi	r3, #0
   1f1d8:	mvnhi	r2, #0
   1f1dc:	mul	r6, r1, r3
   1f1e0:	umull	r0, r1, r1, r2
   1f1e4:	mla	lr, lr, r2, r6
   1f1e8:	ldrd	r6, [sp]
   1f1ec:	movhi	ip, #1
   1f1f0:	movls	ip, #0
   1f1f4:	cmp	r7, r3
   1f1f8:	cmpeq	r6, r2
   1f1fc:	mvncc	r0, #0
   1f200:	add	r1, lr, r1
   1f204:	mov	sl, r6
   1f208:	movcc	r1, r0
   1f20c:	mov	fp, r7
   1f210:	cmp	fp, r3
   1f214:	cmpeq	sl, r2
   1f218:	mov	r6, r0
   1f21c:	mov	r7, r1
   1f220:	orrcc	ip, ip, #1
   1f224:	ldr	r2, [sp, #12]
   1f228:	orr	r4, r4, ip
   1f22c:	add	r3, r9, r2
   1f230:	str	r3, [r5]
   1f234:	ldrb	r3, [r9, r2]
   1f238:	cmp	r3, #0
   1f23c:	orrne	r4, r4, #2
   1f240:	b	1ef4c <__assert_fail@plt+0xdb68>
   1f244:	ldrd	sl, [sp]
   1f248:	umull	r2, r3, r6, r1
   1f24c:	mul	r0, r6, lr
   1f250:	cmp	r7, fp
   1f254:	cmpeq	r6, sl
   1f258:	mvnhi	r2, #0
   1f25c:	mla	r0, r1, r7, r0
   1f260:	umull	sl, fp, r2, r1
   1f264:	add	r3, r0, r3
   1f268:	mul	r0, lr, r2
   1f26c:	mvnhi	r3, #0
   1f270:	strd	sl, [sp, #16]
   1f274:	ldrd	sl, [sp]
   1f278:	mla	r0, r1, r3, r0
   1f27c:	ldr	ip, [sp, #20]
   1f280:	cmp	r3, fp
   1f284:	add	r0, r0, ip
   1f288:	cmpeq	r2, sl
   1f28c:	str	r0, [sp, #20]
   1f290:	bls	1f2a8 <__assert_fail@plt+0xdec4>
   1f294:	mvn	sl, #0
   1f298:	mvn	fp, #0
   1f29c:	strd	sl, [sp, #16]
   1f2a0:	ldr	r0, [sp, #20]
   1f2a4:	ldrd	sl, [sp]
   1f2a8:	cmp	r7, fp
   1f2ac:	cmpeq	r6, sl
   1f2b0:	mul	r0, r1, r0
   1f2b4:	ldrd	r6, [sp, #16]
   1f2b8:	mla	ip, lr, r6, r0
   1f2bc:	mov	r0, r6
   1f2c0:	movhi	r0, #1
   1f2c4:	movls	r0, #0
   1f2c8:	cmp	r3, fp
   1f2cc:	cmpeq	r2, sl
   1f2d0:	ldrd	r2, [sp, #16]
   1f2d4:	umull	r6, r7, r1, r6
   1f2d8:	orrhi	r0, r0, #1
   1f2dc:	cmp	fp, r3
   1f2e0:	cmpeq	sl, r2
   1f2e4:	add	r7, ip, r7
   1f2e8:	bcc	1fbf4 <__assert_fail@plt+0xe810>
   1f2ec:	mov	sl, r6
   1f2f0:	mov	fp, r7
   1f2f4:	strd	r6, [sp, #24]
   1f2f8:	mul	r3, r1, fp
   1f2fc:	umull	r6, r7, r1, sl
   1f300:	mla	ip, lr, sl, r3
   1f304:	ldrd	sl, [sp]
   1f308:	ldrd	r2, [sp, #16]
   1f30c:	add	r7, ip, r7
   1f310:	cmp	fp, r3
   1f314:	cmpeq	sl, r2
   1f318:	mov	r3, fp
   1f31c:	mov	r2, sl
   1f320:	ldrd	sl, [sp, #24]
   1f324:	orrcc	r0, r0, #1
   1f328:	str	r0, [sp, #16]
   1f32c:	cmp	r3, fp
   1f330:	cmpeq	r2, sl
   1f334:	bcs	1f88c <__assert_fail@plt+0xe4a8>
   1f338:	mvn	r2, #0
   1f33c:	mvn	r3, #0
   1f340:	mul	ip, lr, r2
   1f344:	ldrd	sl, [sp]
   1f348:	mla	ip, r1, r3, ip
   1f34c:	umull	r6, r7, r2, r1
   1f350:	ldrd	r0, [sp, #24]
   1f354:	add	r7, ip, r7
   1f358:	cmp	fp, r1
   1f35c:	ldr	r1, [sp, #16]
   1f360:	cmpeq	sl, r0
   1f364:	orrcc	r1, r1, #1
   1f368:	cmp	r3, fp
   1f36c:	cmpeq	r2, sl
   1f370:	mvnhi	r0, #0
   1f374:	movls	ip, r7
   1f378:	movhi	ip, r0
   1f37c:	movls	r0, r6
   1f380:	cmp	r3, fp
   1f384:	cmpeq	r2, sl
   1f388:	mov	r7, ip
   1f38c:	mov	r6, r0
   1f390:	movls	ip, r1
   1f394:	orrhi	ip, r1, #1
   1f398:	b	1f224 <__assert_fail@plt+0xde40>
   1f39c:	ldrd	sl, [sp]
   1f3a0:	umull	r2, r3, r6, r1
   1f3a4:	mul	r0, r6, lr
   1f3a8:	cmp	r7, fp
   1f3ac:	cmpeq	r6, sl
   1f3b0:	mvnhi	r2, #0
   1f3b4:	mla	r0, r1, r7, r0
   1f3b8:	umull	sl, fp, r2, r1
   1f3bc:	add	r3, r0, r3
   1f3c0:	mul	r0, lr, r2
   1f3c4:	mvnhi	r3, #0
   1f3c8:	strd	sl, [sp, #16]
   1f3cc:	ldrd	sl, [sp]
   1f3d0:	mla	r0, r1, r3, r0
   1f3d4:	ldr	ip, [sp, #20]
   1f3d8:	cmp	r3, fp
   1f3dc:	add	r0, r0, ip
   1f3e0:	cmpeq	r2, sl
   1f3e4:	str	r0, [sp, #20]
   1f3e8:	mvnhi	sl, #0
   1f3ec:	mvnhi	fp, #0
   1f3f0:	strdhi	sl, [sp, #16]
   1f3f4:	ldrdhi	sl, [sp]
   1f3f8:	ldr	r0, [sp, #16]
   1f3fc:	cmp	r3, fp
   1f400:	ldr	r3, [sp, #20]
   1f404:	mul	r0, lr, r0
   1f408:	cmpeq	r2, sl
   1f40c:	mla	r0, r1, r3, r0
   1f410:	ldr	r3, [sp, #16]
   1f414:	umull	r2, r3, r3, r1
   1f418:	strd	r2, [sp, #24]
   1f41c:	movhi	r3, #1
   1f420:	movls	r3, #0
   1f424:	cmp	r7, fp
   1f428:	cmpeq	r6, sl
   1f42c:	ldrd	r6, [sp, #16]
   1f430:	ldr	r2, [sp, #28]
   1f434:	movls	ip, r3
   1f438:	orrhi	ip, r3, #1
   1f43c:	cmp	r7, fp
   1f440:	add	r2, r0, r2
   1f444:	cmpeq	r6, sl
   1f448:	str	r2, [sp, #28]
   1f44c:	mvnhi	r2, #0
   1f450:	mvnhi	r3, #0
   1f454:	strdhi	r2, [sp, #24]
   1f458:	ldrd	r6, [sp, #24]
   1f45c:	mul	r2, r1, r7
   1f460:	umull	sl, fp, r1, r6
   1f464:	mla	r3, lr, r6, r2
   1f468:	ldrd	r6, [sp]
   1f46c:	str	r3, [sp, #32]
   1f470:	ldrd	r2, [sp, #16]
   1f474:	cmp	r3, r7
   1f478:	cmpeq	r2, r6
   1f47c:	ldrd	r2, [sp, #24]
   1f480:	orrhi	ip, ip, #1
   1f484:	cmp	r3, r7
   1f488:	ldr	r3, [sp, #32]
   1f48c:	cmpeq	r2, r6
   1f490:	add	r2, r3, fp
   1f494:	mov	fp, r2
   1f498:	bhi	1fbdc <__assert_fail@plt+0xe7f8>
   1f49c:	strd	sl, [sp, #16]
   1f4a0:	mul	r2, r1, fp
   1f4a4:	umull	r6, r7, r1, sl
   1f4a8:	mla	r3, lr, sl, r2
   1f4ac:	ldrd	sl, [sp]
   1f4b0:	str	r3, [sp, #32]
   1f4b4:	ldrd	r2, [sp, #24]
   1f4b8:	cmp	r3, fp
   1f4bc:	cmpeq	r2, sl
   1f4c0:	ldrd	r2, [sp, #16]
   1f4c4:	orrhi	ip, ip, #1
   1f4c8:	cmp	fp, r3
   1f4cc:	ldr	r3, [sp, #32]
   1f4d0:	cmpeq	sl, r2
   1f4d4:	add	r2, r3, r7
   1f4d8:	mov	r7, r2
   1f4dc:	mvncc	r7, #0
   1f4e0:	mvncc	r6, #0
   1f4e4:	mul	r2, r1, r7
   1f4e8:	mov	sl, r6
   1f4ec:	strd	r6, [sp, #24]
   1f4f0:	mla	r0, lr, sl, r2
   1f4f4:	ldrd	r2, [sp, #16]
   1f4f8:	ldrd	sl, [sp]
   1f4fc:	umull	r6, r7, r1, r6
   1f500:	cmp	fp, r3
   1f504:	cmpeq	sl, r2
   1f508:	mov	r3, fp
   1f50c:	mov	r2, sl
   1f510:	ldrd	sl, [sp, #24]
   1f514:	orrcc	ip, ip, #1
   1f518:	add	r7, r0, r7
   1f51c:	cmp	r3, fp
   1f520:	cmpeq	r2, sl
   1f524:	mvncc	r6, #0
   1f528:	mvncc	r7, #0
   1f52c:	umull	sl, fp, r1, r6
   1f530:	mul	r3, r1, r7
   1f534:	strd	sl, [sp, #16]
   1f538:	mla	r0, lr, r6, r3
   1f53c:	ldrd	sl, [sp, #24]
   1f540:	ldrd	r2, [sp]
   1f544:	cmp	r3, fp
   1f548:	cmpeq	r2, sl
   1f54c:	orrcc	ip, ip, #1
   1f550:	cmp	r3, r7
   1f554:	ldr	r3, [sp, #20]
   1f558:	cmpeq	r2, r6
   1f55c:	add	r3, r0, r3
   1f560:	str	r3, [sp, #20]
   1f564:	mvncc	r2, #0
   1f568:	mvncc	r3, #0
   1f56c:	ldrdcs	r2, [sp, #16]
   1f570:	ldrd	sl, [sp]
   1f574:	mul	r0, r1, r3
   1f578:	cmp	fp, r7
   1f57c:	str	r0, [sp, #16]
   1f580:	cmpeq	sl, r6
   1f584:	ldr	r6, [sp, #16]
   1f588:	umull	r0, r1, r1, r2
   1f58c:	mla	lr, lr, r2, r6
   1f590:	orrcc	ip, ip, #1
   1f594:	cmp	r3, fp
   1f598:	cmpeq	r2, sl
   1f59c:	add	r1, lr, r1
   1f5a0:	bls	1f5ac <__assert_fail@plt+0xe1c8>
   1f5a4:	mvn	r0, #0
   1f5a8:	mov	r1, r0
   1f5ac:	cmp	r3, fp
   1f5b0:	cmpeq	r2, sl
   1f5b4:	mov	r6, r0
   1f5b8:	mov	r7, r1
   1f5bc:	orrhi	ip, ip, #1
   1f5c0:	b	1f224 <__assert_fail@plt+0xde40>
   1f5c4:	ldrd	sl, [sp]
   1f5c8:	umull	r2, r3, r6, r1
   1f5cc:	mul	r0, r6, lr
   1f5d0:	cmp	r7, fp
   1f5d4:	cmpeq	r6, sl
   1f5d8:	mvnhi	r2, #0
   1f5dc:	mla	r0, r1, r7, r0
   1f5e0:	umull	sl, fp, r1, r2
   1f5e4:	add	r3, r0, r3
   1f5e8:	mvnhi	r3, #0
   1f5ec:	strd	sl, [sp, #16]
   1f5f0:	mul	r0, r1, r3
   1f5f4:	ldrd	sl, [sp]
   1f5f8:	mla	r0, lr, r2, r0
   1f5fc:	ldr	ip, [sp, #20]
   1f600:	cmp	fp, r3
   1f604:	add	r0, r0, ip
   1f608:	cmpeq	sl, r2
   1f60c:	str	r0, [sp, #20]
   1f610:	mvncc	sl, #0
   1f614:	mvncc	fp, #0
   1f618:	strdcc	sl, [sp, #16]
   1f61c:	ldrdcc	sl, [sp]
   1f620:	ldr	r0, [sp, #16]
   1f624:	cmp	fp, r3
   1f628:	cmpeq	sl, r2
   1f62c:	mul	r0, lr, r0
   1f630:	ldr	r2, [sp, #20]
   1f634:	ldr	r3, [sp, #16]
   1f638:	movcc	ip, #1
   1f63c:	movcs	ip, #0
   1f640:	cmp	r7, fp
   1f644:	cmpeq	r6, sl
   1f648:	ldrd	r6, [sp, #16]
   1f64c:	mla	r0, r1, r2, r0
   1f650:	umull	r2, r3, r3, r1
   1f654:	orrhi	ip, ip, #1
   1f658:	cmp	r7, fp
   1f65c:	cmpeq	r6, sl
   1f660:	add	r3, r0, r3
   1f664:	mvnhi	r3, #0
   1f668:	mvnhi	r2, #0
   1f66c:	mul	r0, r1, r3
   1f670:	cmp	r7, fp
   1f674:	str	r0, [sp, #24]
   1f678:	cmpeq	r6, sl
   1f67c:	ldr	r6, [sp, #24]
   1f680:	umull	r0, r1, r1, r2
   1f684:	mla	lr, lr, r2, r6
   1f688:	orrhi	ip, ip, #1
   1f68c:	cmp	fp, r3
   1f690:	cmpeq	sl, r2
   1f694:	mvncc	r0, #0
   1f698:	add	r1, lr, r1
   1f69c:	movcc	r1, r0
   1f6a0:	b	1f210 <__assert_fail@plt+0xde2c>
   1f6a4:	cmp	r6, #0
   1f6a8:	sbcs	r3, r7, #0
   1f6ac:	blt	1fb44 <__assert_fail@plt+0xe760>
   1f6b0:	adds	r6, r6, r6
   1f6b4:	adc	r7, r7, r7
   1f6b8:	mov	ip, #0
   1f6bc:	b	1f224 <__assert_fail@plt+0xde40>
   1f6c0:	mov	ip, #0
   1f6c4:	b	1f224 <__assert_fail@plt+0xde40>
   1f6c8:	ldr	r3, [pc, #1396]	; 1fc44 <__assert_fail@plt+0xe860>
   1f6cc:	mvn	r2, #0
   1f6d0:	cmp	r7, r3
   1f6d4:	cmpeq	r6, r2
   1f6d8:	bhi	1fb44 <__assert_fail@plt+0xe760>
   1f6dc:	lsl	r3, r7, #9
   1f6e0:	orr	r3, r3, r6, lsr #23
   1f6e4:	lsl	r2, r6, #9
   1f6e8:	mov	r6, r2
   1f6ec:	mov	r7, r3
   1f6f0:	mov	ip, #0
   1f6f4:	b	1f224 <__assert_fail@plt+0xde40>
   1f6f8:	ldrd	sl, [sp]
   1f6fc:	umull	r2, r3, r6, r1
   1f700:	mul	r0, r6, lr
   1f704:	cmp	r7, fp
   1f708:	cmpeq	r6, sl
   1f70c:	mvnhi	r2, #0
   1f710:	mla	r0, r1, r7, r0
   1f714:	umull	sl, fp, r2, r1
   1f718:	add	r3, r0, r3
   1f71c:	mul	r0, lr, r2
   1f720:	mvnhi	r3, #0
   1f724:	strd	sl, [sp, #16]
   1f728:	ldrd	sl, [sp]
   1f72c:	mla	r0, r1, r3, r0
   1f730:	ldr	ip, [sp, #20]
   1f734:	cmp	r3, fp
   1f738:	add	r0, r0, ip
   1f73c:	cmpeq	r2, sl
   1f740:	str	r0, [sp, #20]
   1f744:	mvnhi	sl, #0
   1f748:	mvnhi	fp, #0
   1f74c:	strdhi	sl, [sp, #16]
   1f750:	ldrdhi	sl, [sp]
   1f754:	ldr	r0, [sp, #16]
   1f758:	cmp	r3, fp
   1f75c:	ldr	r3, [sp, #20]
   1f760:	mul	r0, lr, r0
   1f764:	cmpeq	r2, sl
   1f768:	mla	r0, r1, r3, r0
   1f76c:	ldr	r3, [sp, #16]
   1f770:	umull	r2, r3, r3, r1
   1f774:	strd	r2, [sp, #24]
   1f778:	movhi	r3, #1
   1f77c:	movls	r3, #0
   1f780:	cmp	r7, fp
   1f784:	cmpeq	r6, sl
   1f788:	ldrd	r6, [sp, #16]
   1f78c:	ldr	r2, [sp, #28]
   1f790:	movls	ip, r3
   1f794:	orrhi	ip, r3, #1
   1f798:	cmp	r7, fp
   1f79c:	add	r2, r0, r2
   1f7a0:	cmpeq	r6, sl
   1f7a4:	str	r2, [sp, #28]
   1f7a8:	mvnhi	r2, #0
   1f7ac:	mvnhi	r3, #0
   1f7b0:	strdhi	r2, [sp, #24]
   1f7b4:	ldrd	r6, [sp, #24]
   1f7b8:	mul	r2, lr, r6
   1f7bc:	umull	sl, fp, r6, r1
   1f7c0:	mla	r3, r1, r7, r2
   1f7c4:	ldrd	r6, [sp]
   1f7c8:	str	r3, [sp, #32]
   1f7cc:	ldrd	r2, [sp, #16]
   1f7d0:	cmp	r3, r7
   1f7d4:	cmpeq	r2, r6
   1f7d8:	ldrd	r2, [sp, #24]
   1f7dc:	orrhi	ip, ip, #1
   1f7e0:	cmp	r3, r7
   1f7e4:	ldr	r3, [sp, #32]
   1f7e8:	cmpeq	r2, r6
   1f7ec:	add	r2, r3, fp
   1f7f0:	mov	fp, r2
   1f7f4:	bhi	1fc0c <__assert_fail@plt+0xe828>
   1f7f8:	strd	sl, [sp, #16]
   1f7fc:	mul	r2, lr, sl
   1f800:	umull	r6, r7, sl, r1
   1f804:	mla	r3, r1, fp, r2
   1f808:	ldrd	sl, [sp]
   1f80c:	str	r3, [sp, #32]
   1f810:	ldrd	r2, [sp, #24]
   1f814:	cmp	r3, fp
   1f818:	cmpeq	r2, sl
   1f81c:	ldrd	r2, [sp, #16]
   1f820:	orrhi	ip, ip, #1
   1f824:	cmp	r3, fp
   1f828:	ldr	r3, [sp, #32]
   1f82c:	cmpeq	r2, sl
   1f830:	add	r2, r3, r7
   1f834:	mov	r7, r2
   1f838:	mvnhi	r7, #0
   1f83c:	mvnhi	r6, #0
   1f840:	mul	r2, r1, r7
   1f844:	mov	sl, r6
   1f848:	strd	r6, [sp, #24]
   1f84c:	mla	r0, lr, sl, r2
   1f850:	ldrd	sl, [sp]
   1f854:	ldrd	r2, [sp, #16]
   1f858:	umull	r6, r7, r1, r6
   1f85c:	cmp	r3, fp
   1f860:	cmpeq	r2, sl
   1f864:	mov	r3, ip
   1f868:	orrhi	r3, r3, #1
   1f86c:	mov	r2, sl
   1f870:	str	r3, [sp, #16]
   1f874:	mov	r3, fp
   1f878:	ldrd	sl, [sp, #24]
   1f87c:	add	r7, r0, r7
   1f880:	cmp	r3, fp
   1f884:	cmpeq	r2, sl
   1f888:	bcc	1f338 <__assert_fail@plt+0xdf54>
   1f88c:	mov	r2, r6
   1f890:	mov	r3, r7
   1f894:	b	1f340 <__assert_fail@plt+0xdf5c>
   1f898:	ldrd	sl, [sp]
   1f89c:	umull	r2, r3, r6, r1
   1f8a0:	mul	r0, r6, lr
   1f8a4:	cmp	r7, fp
   1f8a8:	cmpeq	r6, sl
   1f8ac:	mvnhi	r2, #0
   1f8b0:	mla	r0, r1, r7, r0
   1f8b4:	umull	sl, fp, r2, r1
   1f8b8:	add	r3, r0, r3
   1f8bc:	mul	r0, lr, r2
   1f8c0:	mvnhi	r3, #0
   1f8c4:	strd	sl, [sp, #16]
   1f8c8:	ldrd	sl, [sp]
   1f8cc:	mla	r0, r1, r3, r0
   1f8d0:	ldr	ip, [sp, #20]
   1f8d4:	cmp	r3, fp
   1f8d8:	add	r0, r0, ip
   1f8dc:	cmpeq	r2, sl
   1f8e0:	str	r0, [sp, #20]
   1f8e4:	mvnhi	sl, #0
   1f8e8:	mvnhi	fp, #0
   1f8ec:	strdhi	sl, [sp, #16]
   1f8f0:	ldrdhi	sl, [sp]
   1f8f4:	ldr	r0, [sp, #16]
   1f8f8:	cmp	r3, fp
   1f8fc:	ldr	ip, [sp, #20]
   1f900:	mul	r0, lr, r0
   1f904:	ldr	r3, [sp, #16]
   1f908:	cmpeq	r2, sl
   1f90c:	mla	r0, r1, ip, r0
   1f910:	umull	r2, r3, r3, r1
   1f914:	movhi	r1, #1
   1f918:	movls	r1, #0
   1f91c:	cmp	r7, fp
   1f920:	cmpeq	r6, sl
   1f924:	ldrd	r6, [sp, #16]
   1f928:	movls	ip, r1
   1f92c:	orrhi	ip, r1, #1
   1f930:	cmp	r7, fp
   1f934:	cmpeq	r6, sl
   1f938:	mvnhi	r2, #0
   1f93c:	add	r3, r0, r3
   1f940:	movhi	r3, r2
   1f944:	cmp	r7, fp
   1f948:	cmpeq	r6, sl
   1f94c:	mov	r7, r3
   1f950:	mov	r6, r2
   1f954:	orrhi	ip, ip, #1
   1f958:	b	1f224 <__assert_fail@plt+0xde40>
   1f95c:	ldrd	sl, [sp]
   1f960:	umull	r2, r3, r6, r1
   1f964:	mul	r0, r6, lr
   1f968:	cmp	r7, fp
   1f96c:	cmpeq	r6, sl
   1f970:	mvnhi	r2, #0
   1f974:	mla	r0, r1, r7, r0
   1f978:	umull	sl, fp, r1, r2
   1f97c:	add	r3, r0, r3
   1f980:	mvnhi	r3, #0
   1f984:	strd	sl, [sp, #16]
   1f988:	mul	r0, r1, r3
   1f98c:	ldrd	sl, [sp]
   1f990:	mla	r0, lr, r2, r0
   1f994:	ldr	ip, [sp, #20]
   1f998:	cmp	fp, r3
   1f99c:	add	r0, r0, ip
   1f9a0:	cmpeq	sl, r2
   1f9a4:	str	r0, [sp, #20]
   1f9a8:	mvncc	sl, #0
   1f9ac:	mvncc	fp, #0
   1f9b0:	strdcc	sl, [sp, #16]
   1f9b4:	ldrdcc	sl, [sp]
   1f9b8:	ldr	r0, [sp, #16]
   1f9bc:	cmp	fp, r3
   1f9c0:	ldr	r3, [sp, #20]
   1f9c4:	mul	r0, lr, r0
   1f9c8:	cmpeq	sl, r2
   1f9cc:	mla	r0, r1, r3, r0
   1f9d0:	ldr	r3, [sp, #16]
   1f9d4:	umull	r2, r3, r3, r1
   1f9d8:	strd	r2, [sp, #24]
   1f9dc:	movcc	r3, #1
   1f9e0:	movcs	r3, #0
   1f9e4:	cmp	r7, fp
   1f9e8:	cmpeq	r6, sl
   1f9ec:	movls	ip, r3
   1f9f0:	orrhi	ip, r3, #1
   1f9f4:	ldrd	r2, [sp, #16]
   1f9f8:	cmp	r3, fp
   1f9fc:	ldr	r3, [sp, #28]
   1fa00:	cmpeq	r2, sl
   1fa04:	add	r3, r0, r3
   1fa08:	str	r3, [sp, #28]
   1fa0c:	bhi	1fbc4 <__assert_fail@plt+0xe7e0>
   1fa10:	ldrd	r2, [sp, #24]
   1fa14:	mov	sl, r2
   1fa18:	mov	fp, r3
   1fa1c:	mul	r2, lr, sl
   1fa20:	umull	r6, r7, sl, r1
   1fa24:	mla	r0, r1, fp, r2
   1fa28:	ldrd	r2, [sp]
   1fa2c:	add	r7, r0, r7
   1fa30:	mov	sl, r2
   1fa34:	mov	fp, r3
   1fa38:	strd	r2, [sp, #32]
   1fa3c:	ldrd	r2, [sp, #16]
   1fa40:	cmp	r3, fp
   1fa44:	cmpeq	r2, sl
   1fa48:	ldrd	r2, [sp, #32]
   1fa4c:	ldrd	sl, [sp, #24]
   1fa50:	orrhi	ip, ip, #1
   1fa54:	cmp	fp, r3
   1fa58:	cmpeq	sl, r2
   1fa5c:	mvnhi	r6, #0
   1fa60:	mvnhi	r7, #0
   1fa64:	umull	sl, fp, r6, r1
   1fa68:	mul	r3, lr, r6
   1fa6c:	strd	sl, [sp, #16]
   1fa70:	mla	r0, r1, r7, r3
   1fa74:	ldrd	sl, [sp, #24]
   1fa78:	ldrd	r2, [sp]
   1fa7c:	cmp	fp, r3
   1fa80:	cmpeq	sl, r2
   1fa84:	orrhi	ip, ip, #1
   1fa88:	cmp	r7, r3
   1fa8c:	ldr	r3, [sp, #20]
   1fa90:	cmpeq	r6, r2
   1fa94:	add	r3, r0, r3
   1fa98:	str	r3, [sp, #20]
   1fa9c:	mvnhi	r2, #0
   1faa0:	mvnhi	r3, #0
   1faa4:	ldrdls	r2, [sp, #16]
   1faa8:	ldrd	sl, [sp]
   1faac:	mul	r0, r1, r3
   1fab0:	cmp	r7, fp
   1fab4:	str	r0, [sp, #16]
   1fab8:	cmpeq	r6, sl
   1fabc:	ldr	r6, [sp, #16]
   1fac0:	umull	r0, r1, r1, r2
   1fac4:	mla	lr, lr, r2, r6
   1fac8:	orrhi	ip, ip, #1
   1facc:	cmp	r3, fp
   1fad0:	cmpeq	r2, sl
   1fad4:	add	r1, lr, r1
   1fad8:	bls	1f5ac <__assert_fail@plt+0xe1c8>
   1fadc:	b	1f5a4 <__assert_fail@plt+0xe1c0>
   1fae0:	ldr	r3, [pc, #344]	; 1fc40 <__assert_fail@plt+0xe85c>
   1fae4:	mvn	r2, #0
   1fae8:	cmp	r7, r3
   1faec:	cmpeq	r6, r2
   1faf0:	bhi	1fb44 <__assert_fail@plt+0xe760>
   1faf4:	lsl	r3, r7, #10
   1faf8:	orr	r3, r3, r6, lsr #22
   1fafc:	lsl	r2, r6, #10
   1fb00:	mov	r6, r2
   1fb04:	mov	r7, r3
   1fb08:	mov	ip, #0
   1fb0c:	b	1f224 <__assert_fail@plt+0xde40>
   1fb10:	strd	r6, [r8]
   1fb14:	orr	r4, r4, #2
   1fb18:	b	1eef4 <__assert_fail@plt+0xdb10>
   1fb1c:	ldrd	r2, [sp]
   1fb20:	cmp	r7, r3
   1fb24:	cmpeq	r6, r2
   1fb28:	bhi	1fb44 <__assert_fail@plt+0xe760>
   1fb2c:	mul	r3, r6, lr
   1fb30:	mov	ip, #0
   1fb34:	mla	r3, r1, r7, r3
   1fb38:	umull	r6, r7, r6, r1
   1fb3c:	add	r7, r3, r7
   1fb40:	b	1f224 <__assert_fail@plt+0xde40>
   1fb44:	mvn	r6, #0
   1fb48:	mvn	r7, #0
   1fb4c:	mov	ip, #1
   1fb50:	b	1f224 <__assert_fail@plt+0xde40>
   1fb54:	ldrb	r3, [r9, #2]
   1fb58:	mvn	r2, #0
   1fb5c:	mov	r1, #1024	; 0x400
   1fb60:	cmp	r3, #66	; 0x42
   1fb64:	ldr	r3, [pc, #212]	; 1fc40 <__assert_fail@plt+0xe85c>
   1fb68:	mov	lr, #0
   1fb6c:	strd	r2, [sp]
   1fb70:	moveq	r3, #3
   1fb74:	streq	r3, [sp, #12]
   1fb78:	movne	r3, #1
   1fb7c:	strne	r3, [sp, #12]
   1fb80:	b	1f0d0 <__assert_fail@plt+0xdcec>
   1fb84:	add	r3, pc, #172	; 0xac
   1fb88:	ldrd	r2, [r3]
   1fb8c:	mov	r1, #1000	; 0x3e8
   1fb90:	mov	lr, #0
   1fb94:	strd	r2, [sp]
   1fb98:	mov	r3, #2
   1fb9c:	str	r3, [sp, #12]
   1fba0:	b	1f0d0 <__assert_fail@plt+0xdcec>
   1fba4:	ldr	r3, [pc, #148]	; 1fc40 <__assert_fail@plt+0xe85c>
   1fba8:	mvn	r2, #0
   1fbac:	mov	lr, r0
   1fbb0:	strd	r2, [sp]
   1fbb4:	mov	r3, #1
   1fbb8:	mov	r1, #1024	; 0x400
   1fbbc:	str	r3, [sp, #12]
   1fbc0:	b	1f0d0 <__assert_fail@plt+0xdcec>
   1fbc4:	mvn	r2, #0
   1fbc8:	mvn	r3, #0
   1fbcc:	mov	sl, r2
   1fbd0:	strd	r2, [sp, #24]
   1fbd4:	mov	fp, r3
   1fbd8:	b	1fa1c <__assert_fail@plt+0xe638>
   1fbdc:	mvn	r2, #0
   1fbe0:	mvn	r3, #0
   1fbe4:	mov	sl, r2
   1fbe8:	strd	r2, [sp, #16]
   1fbec:	mov	fp, r3
   1fbf0:	b	1f4a0 <__assert_fail@plt+0xe0bc>
   1fbf4:	mvn	r2, #0
   1fbf8:	mvn	r3, #0
   1fbfc:	mov	sl, r2
   1fc00:	strd	r2, [sp, #24]
   1fc04:	mov	fp, r3
   1fc08:	b	1f2f8 <__assert_fail@plt+0xdf14>
   1fc0c:	mvn	r2, #0
   1fc10:	mvn	r3, #0
   1fc14:	mov	sl, r2
   1fc18:	strd	r2, [sp, #16]
   1fc1c:	mov	fp, r3
   1fc20:	b	1f7fc <__assert_fail@plt+0xe418>
   1fc24:	ldr	r3, [pc, #28]	; 1fc48 <__assert_fail@plt+0xe864>
   1fc28:	mov	r2, #85	; 0x55
   1fc2c:	ldr	r1, [pc, #24]	; 1fc4c <__assert_fail@plt+0xe868>
   1fc30:	ldr	r0, [pc, #24]	; 1fc50 <__assert_fail@plt+0xe86c>
   1fc34:	bl	113e4 <__assert_fail@plt>
   1fc38:	blmi	ff1c9bfc <optarg@@GLIBC_2.4+0xff196a14>
   1fc3c:	subeq	r8, r1, r7, lsr r9
   1fc40:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1fc44:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1fc48:	andeq	r2, r2, r0, asr #8
   1fc4c:	muleq	r2, r8, r3
   1fc50:	andeq	r2, r2, r8, lsr #7
   1fc54:	cmp	r1, #0
   1fc58:	cmpne	r0, #0
   1fc5c:	moveq	r1, #1
   1fc60:	moveq	r0, r1
   1fc64:	umull	r2, r3, r0, r1
   1fc68:	adds	r3, r3, #0
   1fc6c:	movne	r3, #1
   1fc70:	cmp	r2, #0
   1fc74:	blt	1fc84 <__assert_fail@plt+0xe8a0>
   1fc78:	cmp	r3, #0
   1fc7c:	bne	1fc84 <__assert_fail@plt+0xe8a0>
   1fc80:	b	11090 <calloc@plt>
   1fc84:	push	{r4, lr}
   1fc88:	bl	112c4 <__errno_location@plt>
   1fc8c:	mov	r3, #12
   1fc90:	str	r3, [r0]
   1fc94:	mov	r0, #0
   1fc98:	pop	{r4, pc}
   1fc9c:	cmp	r0, #0
   1fca0:	moveq	r0, #1
   1fca4:	cmp	r0, #0
   1fca8:	blt	1fcb0 <__assert_fail@plt+0xe8cc>
   1fcac:	b	1121c <malloc@plt>
   1fcb0:	push	{r4, lr}
   1fcb4:	bl	112c4 <__errno_location@plt>
   1fcb8:	mov	r3, #12
   1fcbc:	str	r3, [r0]
   1fcc0:	mov	r0, #0
   1fcc4:	pop	{r4, pc}
   1fcc8:	cmp	r0, #0
   1fccc:	beq	1fcf0 <__assert_fail@plt+0xe90c>
   1fcd0:	cmp	r1, #0
   1fcd4:	push	{lr}		; (str lr, [sp, #-4]!)
   1fcd8:	sub	sp, sp, #12
   1fcdc:	beq	1fcf8 <__assert_fail@plt+0xe914>
   1fce0:	blt	1fd10 <__assert_fail@plt+0xe92c>
   1fce4:	add	sp, sp, #12
   1fce8:	pop	{lr}		; (ldr lr, [sp], #4)
   1fcec:	b	11174 <realloc@plt>
   1fcf0:	mov	r0, r1
   1fcf4:	b	1fc9c <__assert_fail@plt+0xe8b8>
   1fcf8:	str	r1, [sp, #4]
   1fcfc:	bl	15da0 <__assert_fail@plt+0x49bc>
   1fd00:	ldr	r3, [sp, #4]
   1fd04:	mov	r0, r3
   1fd08:	add	sp, sp, #12
   1fd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd10:	bl	112c4 <__errno_location@plt>
   1fd14:	mov	r2, #12
   1fd18:	mov	r3, #0
   1fd1c:	str	r2, [r0]
   1fd20:	b	1fd04 <__assert_fail@plt+0xe920>
   1fd24:	push	{r4, r5, r6, lr}
   1fd28:	mov	r4, r0
   1fd2c:	bl	111ec <__fpending@plt>
   1fd30:	ldr	r5, [r4]
   1fd34:	and	r5, r5, #32
   1fd38:	mov	r6, r0
   1fd3c:	mov	r0, r4
   1fd40:	bl	15c08 <__assert_fail@plt+0x4824>
   1fd44:	cmp	r5, #0
   1fd48:	mov	r4, r0
   1fd4c:	bne	1fd6c <__assert_fail@plt+0xe988>
   1fd50:	cmp	r0, #0
   1fd54:	beq	1fd64 <__assert_fail@plt+0xe980>
   1fd58:	cmp	r6, #0
   1fd5c:	beq	1fd88 <__assert_fail@plt+0xe9a4>
   1fd60:	mvn	r4, #0
   1fd64:	mov	r0, r4
   1fd68:	pop	{r4, r5, r6, pc}
   1fd6c:	cmp	r0, #0
   1fd70:	bne	1fd60 <__assert_fail@plt+0xe97c>
   1fd74:	bl	112c4 <__errno_location@plt>
   1fd78:	str	r4, [r0]
   1fd7c:	mvn	r4, #0
   1fd80:	mov	r0, r4
   1fd84:	pop	{r4, r5, r6, pc}
   1fd88:	bl	112c4 <__errno_location@plt>
   1fd8c:	ldr	r4, [r0]
   1fd90:	subs	r4, r4, #9
   1fd94:	mvnne	r4, #0
   1fd98:	mov	r0, r4
   1fd9c:	pop	{r4, r5, r6, pc}
   1fda0:	push	{r1, r2, r3}
   1fda4:	push	{r4, r5, r6, r7, lr}
   1fda8:	sub	sp, sp, #8
   1fdac:	add	r3, sp, #32
   1fdb0:	ldr	r1, [sp, #28]
   1fdb4:	str	r3, [sp, #4]
   1fdb8:	cmp	r1, #0
   1fdbc:	beq	1fe54 <__assert_fail@plt+0xea70>
   1fdc0:	ldr	r2, [pc, #412]	; 1ff64 <__assert_fail@plt+0xeb80>
   1fdc4:	mov	r5, r0
   1fdc8:	cmp	r1, r2
   1fdcc:	bne	1fe18 <__assert_fail@plt+0xea34>
   1fdd0:	ldr	r6, [pc, #400]	; 1ff68 <__assert_fail@plt+0xeb84>
   1fdd4:	ldr	r7, [r3]
   1fdd8:	add	r2, sp, #36	; 0x24
   1fddc:	ldr	r3, [r6]
   1fde0:	str	r2, [sp, #4]
   1fde4:	cmp	r3, #0
   1fde8:	mov	r2, r7
   1fdec:	blt	1ff18 <__assert_fail@plt+0xeb34>
   1fdf0:	bl	11330 <fcntl64@plt>
   1fdf4:	subs	r4, r0, #0
   1fdf8:	blt	1fe9c <__assert_fail@plt+0xeab8>
   1fdfc:	mov	r3, #1
   1fe00:	str	r3, [r6]
   1fe04:	mov	r0, r4
   1fe08:	add	sp, sp, #8
   1fe0c:	pop	{r4, r5, r6, r7, lr}
   1fe10:	add	sp, sp, #12
   1fe14:	bx	lr
   1fe18:	cmp	r1, #11
   1fe1c:	beq	1fe44 <__assert_fail@plt+0xea60>
   1fe20:	bgt	1fe64 <__assert_fail@plt+0xea80>
   1fe24:	cmp	r1, #3
   1fe28:	beq	1fe44 <__assert_fail@plt+0xea60>
   1fe2c:	ble	1ff58 <__assert_fail@plt+0xeb74>
   1fe30:	cmp	r1, #8
   1fe34:	beq	1fe84 <__assert_fail@plt+0xeaa0>
   1fe38:	ble	1fe84 <__assert_fail@plt+0xeaa0>
   1fe3c:	cmp	r1, #9
   1fe40:	bne	1fe84 <__assert_fail@plt+0xeaa0>
   1fe44:	mov	r0, r5
   1fe48:	bl	11330 <fcntl64@plt>
   1fe4c:	mov	r4, r0
   1fe50:	b	1fe04 <__assert_fail@plt+0xea20>
   1fe54:	ldr	r2, [sp, #32]
   1fe58:	bl	11330 <fcntl64@plt>
   1fe5c:	mov	r4, r0
   1fe60:	b	1fe04 <__assert_fail@plt+0xea20>
   1fe64:	ldr	r3, [pc, #256]	; 1ff6c <__assert_fail@plt+0xeb88>
   1fe68:	cmp	r1, r3
   1fe6c:	bgt	1ff38 <__assert_fail@plt+0xeb54>
   1fe70:	cmp	r1, r2
   1fe74:	bge	1fe84 <__assert_fail@plt+0xeaa0>
   1fe78:	sub	r3, r3, #6
   1fe7c:	cmp	r1, r3
   1fe80:	beq	1fe44 <__assert_fail@plt+0xea60>
   1fe84:	ldr	r3, [sp, #4]
   1fe88:	mov	r0, r5
   1fe8c:	ldr	r2, [r3]
   1fe90:	bl	11330 <fcntl64@plt>
   1fe94:	mov	r4, r0
   1fe98:	b	1fe04 <__assert_fail@plt+0xea20>
   1fe9c:	bl	112c4 <__errno_location@plt>
   1fea0:	ldr	r3, [r0]
   1fea4:	cmp	r3, #22
   1fea8:	bne	1fdfc <__assert_fail@plt+0xea18>
   1feac:	mov	r2, r7
   1feb0:	mov	r0, r5
   1feb4:	mov	r1, #0
   1feb8:	bl	11330 <fcntl64@plt>
   1febc:	subs	r4, r0, #0
   1fec0:	blt	1fe04 <__assert_fail@plt+0xea20>
   1fec4:	mvn	r3, #0
   1fec8:	str	r3, [r6]
   1fecc:	mov	r1, #1
   1fed0:	mov	r0, r4
   1fed4:	bl	11330 <fcntl64@plt>
   1fed8:	subs	r2, r0, #0
   1fedc:	blt	1fef8 <__assert_fail@plt+0xeb14>
   1fee0:	orr	r2, r2, #1
   1fee4:	mov	r1, #2
   1fee8:	mov	r0, r4
   1feec:	bl	11330 <fcntl64@plt>
   1fef0:	cmn	r0, #1
   1fef4:	bne	1fe04 <__assert_fail@plt+0xea20>
   1fef8:	bl	112c4 <__errno_location@plt>
   1fefc:	mov	r5, r0
   1ff00:	mov	r0, r4
   1ff04:	ldr	r6, [r5]
   1ff08:	mvn	r4, #0
   1ff0c:	bl	113d8 <close@plt>
   1ff10:	str	r6, [r5]
   1ff14:	b	1fe04 <__assert_fail@plt+0xea20>
   1ff18:	mov	r1, #0
   1ff1c:	bl	11330 <fcntl64@plt>
   1ff20:	subs	r4, r0, #0
   1ff24:	blt	1fe04 <__assert_fail@plt+0xea20>
   1ff28:	ldr	r3, [r6]
   1ff2c:	cmn	r3, #1
   1ff30:	beq	1fecc <__assert_fail@plt+0xeae8>
   1ff34:	b	1fe04 <__assert_fail@plt+0xea20>
   1ff38:	ldr	r3, [pc, #48]	; 1ff70 <__assert_fail@plt+0xeb8c>
   1ff3c:	cmp	r1, r3
   1ff40:	beq	1fe84 <__assert_fail@plt+0xeaa0>
   1ff44:	blt	1fe44 <__assert_fail@plt+0xea60>
   1ff48:	add	r3, r3, #1
   1ff4c:	cmp	r1, r3
   1ff50:	bne	1fe84 <__assert_fail@plt+0xeaa0>
   1ff54:	b	1fe44 <__assert_fail@plt+0xea60>
   1ff58:	cmp	r1, #1
   1ff5c:	bne	1fe84 <__assert_fail@plt+0xeaa0>
   1ff60:	b	1fe44 <__assert_fail@plt+0xea60>
   1ff64:	andeq	r0, r0, r6, lsl #8
   1ff68:	andeq	r3, r3, r4, ror #7
   1ff6c:	andeq	r0, r0, r7, lsl #8
   1ff70:	andeq	r0, r0, r9, lsl #8
   1ff74:	push	{r4, lr}
   1ff78:	mov	r0, #14
   1ff7c:	bl	1136c <nl_langinfo@plt>
   1ff80:	cmp	r0, #0
   1ff84:	beq	1ff9c <__assert_fail@plt+0xebb8>
   1ff88:	ldrb	r2, [r0]
   1ff8c:	ldr	r3, [pc, #16]	; 1ffa4 <__assert_fail@plt+0xebc0>
   1ff90:	cmp	r2, #0
   1ff94:	moveq	r0, r3
   1ff98:	pop	{r4, pc}
   1ff9c:	ldr	r0, [pc]	; 1ffa4 <__assert_fail@plt+0xebc0>
   1ffa0:	pop	{r4, pc}
   1ffa4:	andeq	r2, r2, ip, asr #8
   1ffa8:	push	{r4, r5, r6, r7, lr}
   1ffac:	subs	r6, r0, #0
   1ffb0:	sub	sp, sp, #12
   1ffb4:	addeq	r6, sp, #4
   1ffb8:	mov	r0, r6
   1ffbc:	mov	r5, r2
   1ffc0:	mov	r7, r1
   1ffc4:	bl	111f8 <mbrtowc@plt>
   1ffc8:	cmp	r5, #0
   1ffcc:	cmnne	r0, #3
   1ffd0:	mov	r4, r0
   1ffd4:	bls	1fff0 <__assert_fail@plt+0xec0c>
   1ffd8:	mov	r0, #0
   1ffdc:	bl	15ed0 <__assert_fail@plt+0x4aec>
   1ffe0:	cmp	r0, #0
   1ffe4:	moveq	r4, #1
   1ffe8:	ldrbeq	r3, [r7]
   1ffec:	streq	r3, [r6]
   1fff0:	mov	r0, r4
   1fff4:	add	sp, sp, #12
   1fff8:	pop	{r4, r5, r6, r7, pc}
   1fffc:	push	{r4, r5, r6, lr}
   20000:	subs	r4, r2, #0
   20004:	mov	r6, r0
   20008:	mov	r5, r1
   2000c:	beq	20038 <__assert_fail@plt+0xec54>
   20010:	mov	r1, r4
   20014:	mvn	r0, #0
   20018:	bl	20048 <__assert_fail@plt+0xec64>
   2001c:	cmp	r0, r5
   20020:	bcs	20038 <__assert_fail@plt+0xec54>
   20024:	bl	112c4 <__errno_location@plt>
   20028:	mov	r3, #12
   2002c:	str	r3, [r0]
   20030:	mov	r0, #0
   20034:	pop	{r4, r5, r6, pc}
   20038:	mul	r1, r5, r4
   2003c:	mov	r0, r6
   20040:	pop	{r4, r5, r6, lr}
   20044:	b	1fcc8 <__assert_fail@plt+0xe8e4>
   20048:	subs	r2, r1, #1
   2004c:	bxeq	lr
   20050:	bcc	20228 <__assert_fail@plt+0xee44>
   20054:	cmp	r0, r1
   20058:	bls	2020c <__assert_fail@plt+0xee28>
   2005c:	tst	r1, r2
   20060:	beq	20218 <__assert_fail@plt+0xee34>
   20064:	clz	r3, r0
   20068:	clz	r2, r1
   2006c:	sub	r3, r2, r3
   20070:	rsbs	r3, r3, #31
   20074:	addne	r3, r3, r3, lsl #1
   20078:	mov	r2, #0
   2007c:	addne	pc, pc, r3, lsl #2
   20080:	nop			; (mov r0, r0)
   20084:	cmp	r0, r1, lsl #31
   20088:	adc	r2, r2, r2
   2008c:	subcs	r0, r0, r1, lsl #31
   20090:	cmp	r0, r1, lsl #30
   20094:	adc	r2, r2, r2
   20098:	subcs	r0, r0, r1, lsl #30
   2009c:	cmp	r0, r1, lsl #29
   200a0:	adc	r2, r2, r2
   200a4:	subcs	r0, r0, r1, lsl #29
   200a8:	cmp	r0, r1, lsl #28
   200ac:	adc	r2, r2, r2
   200b0:	subcs	r0, r0, r1, lsl #28
   200b4:	cmp	r0, r1, lsl #27
   200b8:	adc	r2, r2, r2
   200bc:	subcs	r0, r0, r1, lsl #27
   200c0:	cmp	r0, r1, lsl #26
   200c4:	adc	r2, r2, r2
   200c8:	subcs	r0, r0, r1, lsl #26
   200cc:	cmp	r0, r1, lsl #25
   200d0:	adc	r2, r2, r2
   200d4:	subcs	r0, r0, r1, lsl #25
   200d8:	cmp	r0, r1, lsl #24
   200dc:	adc	r2, r2, r2
   200e0:	subcs	r0, r0, r1, lsl #24
   200e4:	cmp	r0, r1, lsl #23
   200e8:	adc	r2, r2, r2
   200ec:	subcs	r0, r0, r1, lsl #23
   200f0:	cmp	r0, r1, lsl #22
   200f4:	adc	r2, r2, r2
   200f8:	subcs	r0, r0, r1, lsl #22
   200fc:	cmp	r0, r1, lsl #21
   20100:	adc	r2, r2, r2
   20104:	subcs	r0, r0, r1, lsl #21
   20108:	cmp	r0, r1, lsl #20
   2010c:	adc	r2, r2, r2
   20110:	subcs	r0, r0, r1, lsl #20
   20114:	cmp	r0, r1, lsl #19
   20118:	adc	r2, r2, r2
   2011c:	subcs	r0, r0, r1, lsl #19
   20120:	cmp	r0, r1, lsl #18
   20124:	adc	r2, r2, r2
   20128:	subcs	r0, r0, r1, lsl #18
   2012c:	cmp	r0, r1, lsl #17
   20130:	adc	r2, r2, r2
   20134:	subcs	r0, r0, r1, lsl #17
   20138:	cmp	r0, r1, lsl #16
   2013c:	adc	r2, r2, r2
   20140:	subcs	r0, r0, r1, lsl #16
   20144:	cmp	r0, r1, lsl #15
   20148:	adc	r2, r2, r2
   2014c:	subcs	r0, r0, r1, lsl #15
   20150:	cmp	r0, r1, lsl #14
   20154:	adc	r2, r2, r2
   20158:	subcs	r0, r0, r1, lsl #14
   2015c:	cmp	r0, r1, lsl #13
   20160:	adc	r2, r2, r2
   20164:	subcs	r0, r0, r1, lsl #13
   20168:	cmp	r0, r1, lsl #12
   2016c:	adc	r2, r2, r2
   20170:	subcs	r0, r0, r1, lsl #12
   20174:	cmp	r0, r1, lsl #11
   20178:	adc	r2, r2, r2
   2017c:	subcs	r0, r0, r1, lsl #11
   20180:	cmp	r0, r1, lsl #10
   20184:	adc	r2, r2, r2
   20188:	subcs	r0, r0, r1, lsl #10
   2018c:	cmp	r0, r1, lsl #9
   20190:	adc	r2, r2, r2
   20194:	subcs	r0, r0, r1, lsl #9
   20198:	cmp	r0, r1, lsl #8
   2019c:	adc	r2, r2, r2
   201a0:	subcs	r0, r0, r1, lsl #8
   201a4:	cmp	r0, r1, lsl #7
   201a8:	adc	r2, r2, r2
   201ac:	subcs	r0, r0, r1, lsl #7
   201b0:	cmp	r0, r1, lsl #6
   201b4:	adc	r2, r2, r2
   201b8:	subcs	r0, r0, r1, lsl #6
   201bc:	cmp	r0, r1, lsl #5
   201c0:	adc	r2, r2, r2
   201c4:	subcs	r0, r0, r1, lsl #5
   201c8:	cmp	r0, r1, lsl #4
   201cc:	adc	r2, r2, r2
   201d0:	subcs	r0, r0, r1, lsl #4
   201d4:	cmp	r0, r1, lsl #3
   201d8:	adc	r2, r2, r2
   201dc:	subcs	r0, r0, r1, lsl #3
   201e0:	cmp	r0, r1, lsl #2
   201e4:	adc	r2, r2, r2
   201e8:	subcs	r0, r0, r1, lsl #2
   201ec:	cmp	r0, r1, lsl #1
   201f0:	adc	r2, r2, r2
   201f4:	subcs	r0, r0, r1, lsl #1
   201f8:	cmp	r0, r1
   201fc:	adc	r2, r2, r2
   20200:	subcs	r0, r0, r1
   20204:	mov	r0, r2
   20208:	bx	lr
   2020c:	moveq	r0, #1
   20210:	movne	r0, #0
   20214:	bx	lr
   20218:	clz	r2, r1
   2021c:	rsb	r2, r2, #31
   20220:	lsr	r0, r0, r2
   20224:	bx	lr
   20228:	cmp	r0, #0
   2022c:	mvnne	r0, #0
   20230:	b	20568 <__assert_fail@plt+0xf184>
   20234:	cmp	r1, #0
   20238:	beq	20228 <__assert_fail@plt+0xee44>
   2023c:	push	{r0, r1, lr}
   20240:	bl	20048 <__assert_fail@plt+0xec64>
   20244:	pop	{r1, r2, lr}
   20248:	mul	r3, r2, r0
   2024c:	sub	r1, r1, r3
   20250:	bx	lr
   20254:	cmp	r1, #0
   20258:	beq	20464 <__assert_fail@plt+0xf080>
   2025c:	eor	ip, r0, r1
   20260:	rsbmi	r1, r1, #0
   20264:	subs	r2, r1, #1
   20268:	beq	20430 <__assert_fail@plt+0xf04c>
   2026c:	movs	r3, r0
   20270:	rsbmi	r3, r0, #0
   20274:	cmp	r3, r1
   20278:	bls	2043c <__assert_fail@plt+0xf058>
   2027c:	tst	r1, r2
   20280:	beq	2044c <__assert_fail@plt+0xf068>
   20284:	clz	r2, r3
   20288:	clz	r0, r1
   2028c:	sub	r2, r0, r2
   20290:	rsbs	r2, r2, #31
   20294:	addne	r2, r2, r2, lsl #1
   20298:	mov	r0, #0
   2029c:	addne	pc, pc, r2, lsl #2
   202a0:	nop			; (mov r0, r0)
   202a4:	cmp	r3, r1, lsl #31
   202a8:	adc	r0, r0, r0
   202ac:	subcs	r3, r3, r1, lsl #31
   202b0:	cmp	r3, r1, lsl #30
   202b4:	adc	r0, r0, r0
   202b8:	subcs	r3, r3, r1, lsl #30
   202bc:	cmp	r3, r1, lsl #29
   202c0:	adc	r0, r0, r0
   202c4:	subcs	r3, r3, r1, lsl #29
   202c8:	cmp	r3, r1, lsl #28
   202cc:	adc	r0, r0, r0
   202d0:	subcs	r3, r3, r1, lsl #28
   202d4:	cmp	r3, r1, lsl #27
   202d8:	adc	r0, r0, r0
   202dc:	subcs	r3, r3, r1, lsl #27
   202e0:	cmp	r3, r1, lsl #26
   202e4:	adc	r0, r0, r0
   202e8:	subcs	r3, r3, r1, lsl #26
   202ec:	cmp	r3, r1, lsl #25
   202f0:	adc	r0, r0, r0
   202f4:	subcs	r3, r3, r1, lsl #25
   202f8:	cmp	r3, r1, lsl #24
   202fc:	adc	r0, r0, r0
   20300:	subcs	r3, r3, r1, lsl #24
   20304:	cmp	r3, r1, lsl #23
   20308:	adc	r0, r0, r0
   2030c:	subcs	r3, r3, r1, lsl #23
   20310:	cmp	r3, r1, lsl #22
   20314:	adc	r0, r0, r0
   20318:	subcs	r3, r3, r1, lsl #22
   2031c:	cmp	r3, r1, lsl #21
   20320:	adc	r0, r0, r0
   20324:	subcs	r3, r3, r1, lsl #21
   20328:	cmp	r3, r1, lsl #20
   2032c:	adc	r0, r0, r0
   20330:	subcs	r3, r3, r1, lsl #20
   20334:	cmp	r3, r1, lsl #19
   20338:	adc	r0, r0, r0
   2033c:	subcs	r3, r3, r1, lsl #19
   20340:	cmp	r3, r1, lsl #18
   20344:	adc	r0, r0, r0
   20348:	subcs	r3, r3, r1, lsl #18
   2034c:	cmp	r3, r1, lsl #17
   20350:	adc	r0, r0, r0
   20354:	subcs	r3, r3, r1, lsl #17
   20358:	cmp	r3, r1, lsl #16
   2035c:	adc	r0, r0, r0
   20360:	subcs	r3, r3, r1, lsl #16
   20364:	cmp	r3, r1, lsl #15
   20368:	adc	r0, r0, r0
   2036c:	subcs	r3, r3, r1, lsl #15
   20370:	cmp	r3, r1, lsl #14
   20374:	adc	r0, r0, r0
   20378:	subcs	r3, r3, r1, lsl #14
   2037c:	cmp	r3, r1, lsl #13
   20380:	adc	r0, r0, r0
   20384:	subcs	r3, r3, r1, lsl #13
   20388:	cmp	r3, r1, lsl #12
   2038c:	adc	r0, r0, r0
   20390:	subcs	r3, r3, r1, lsl #12
   20394:	cmp	r3, r1, lsl #11
   20398:	adc	r0, r0, r0
   2039c:	subcs	r3, r3, r1, lsl #11
   203a0:	cmp	r3, r1, lsl #10
   203a4:	adc	r0, r0, r0
   203a8:	subcs	r3, r3, r1, lsl #10
   203ac:	cmp	r3, r1, lsl #9
   203b0:	adc	r0, r0, r0
   203b4:	subcs	r3, r3, r1, lsl #9
   203b8:	cmp	r3, r1, lsl #8
   203bc:	adc	r0, r0, r0
   203c0:	subcs	r3, r3, r1, lsl #8
   203c4:	cmp	r3, r1, lsl #7
   203c8:	adc	r0, r0, r0
   203cc:	subcs	r3, r3, r1, lsl #7
   203d0:	cmp	r3, r1, lsl #6
   203d4:	adc	r0, r0, r0
   203d8:	subcs	r3, r3, r1, lsl #6
   203dc:	cmp	r3, r1, lsl #5
   203e0:	adc	r0, r0, r0
   203e4:	subcs	r3, r3, r1, lsl #5
   203e8:	cmp	r3, r1, lsl #4
   203ec:	adc	r0, r0, r0
   203f0:	subcs	r3, r3, r1, lsl #4
   203f4:	cmp	r3, r1, lsl #3
   203f8:	adc	r0, r0, r0
   203fc:	subcs	r3, r3, r1, lsl #3
   20400:	cmp	r3, r1, lsl #2
   20404:	adc	r0, r0, r0
   20408:	subcs	r3, r3, r1, lsl #2
   2040c:	cmp	r3, r1, lsl #1
   20410:	adc	r0, r0, r0
   20414:	subcs	r3, r3, r1, lsl #1
   20418:	cmp	r3, r1
   2041c:	adc	r0, r0, r0
   20420:	subcs	r3, r3, r1
   20424:	cmp	ip, #0
   20428:	rsbmi	r0, r0, #0
   2042c:	bx	lr
   20430:	teq	ip, r0
   20434:	rsbmi	r0, r0, #0
   20438:	bx	lr
   2043c:	movcc	r0, #0
   20440:	asreq	r0, ip, #31
   20444:	orreq	r0, r0, #1
   20448:	bx	lr
   2044c:	clz	r2, r1
   20450:	rsb	r2, r2, #31
   20454:	cmp	ip, #0
   20458:	lsr	r0, r3, r2
   2045c:	rsbmi	r0, r0, #0
   20460:	bx	lr
   20464:	cmp	r0, #0
   20468:	mvngt	r0, #-2147483648	; 0x80000000
   2046c:	movlt	r0, #-2147483648	; 0x80000000
   20470:	b	20568 <__assert_fail@plt+0xf184>
   20474:	cmp	r1, #0
   20478:	beq	20464 <__assert_fail@plt+0xf080>
   2047c:	push	{r0, r1, lr}
   20480:	bl	2025c <__assert_fail@plt+0xee78>
   20484:	pop	{r1, r2, lr}
   20488:	mul	r3, r2, r0
   2048c:	sub	r1, r1, r3
   20490:	bx	lr
   20494:	cmp	r3, #0
   20498:	cmpeq	r2, #0
   2049c:	bne	204c0 <__assert_fail@plt+0xf0dc>
   204a0:	cmp	r1, #0
   204a4:	movlt	r1, #-2147483648	; 0x80000000
   204a8:	movlt	r0, #0
   204ac:	blt	204bc <__assert_fail@plt+0xf0d8>
   204b0:	cmpeq	r0, #0
   204b4:	mvnne	r1, #-2147483648	; 0x80000000
   204b8:	mvnne	r0, #0
   204bc:	b	20568 <__assert_fail@plt+0xf184>
   204c0:	sub	sp, sp, #8
   204c4:	push	{sp, lr}
   204c8:	cmp	r1, #0
   204cc:	blt	204ec <__assert_fail@plt+0xf108>
   204d0:	cmp	r3, #0
   204d4:	blt	20520 <__assert_fail@plt+0xf13c>
   204d8:	bl	20578 <__assert_fail@plt+0xf194>
   204dc:	ldr	lr, [sp, #4]
   204e0:	add	sp, sp, #8
   204e4:	pop	{r2, r3}
   204e8:	bx	lr
   204ec:	rsbs	r0, r0, #0
   204f0:	sbc	r1, r1, r1, lsl #1
   204f4:	cmp	r3, #0
   204f8:	blt	20544 <__assert_fail@plt+0xf160>
   204fc:	bl	20578 <__assert_fail@plt+0xf194>
   20500:	ldr	lr, [sp, #4]
   20504:	add	sp, sp, #8
   20508:	pop	{r2, r3}
   2050c:	rsbs	r0, r0, #0
   20510:	sbc	r1, r1, r1, lsl #1
   20514:	rsbs	r2, r2, #0
   20518:	sbc	r3, r3, r3, lsl #1
   2051c:	bx	lr
   20520:	rsbs	r2, r2, #0
   20524:	sbc	r3, r3, r3, lsl #1
   20528:	bl	20578 <__assert_fail@plt+0xf194>
   2052c:	ldr	lr, [sp, #4]
   20530:	add	sp, sp, #8
   20534:	pop	{r2, r3}
   20538:	rsbs	r0, r0, #0
   2053c:	sbc	r1, r1, r1, lsl #1
   20540:	bx	lr
   20544:	rsbs	r2, r2, #0
   20548:	sbc	r3, r3, r3, lsl #1
   2054c:	bl	20578 <__assert_fail@plt+0xf194>
   20550:	ldr	lr, [sp, #4]
   20554:	add	sp, sp, #8
   20558:	pop	{r2, r3}
   2055c:	rsbs	r2, r2, #0
   20560:	sbc	r3, r3, r3, lsl #1
   20564:	bx	lr
   20568:	push	{r1, lr}
   2056c:	mov	r0, #8
   20570:	bl	110a8 <raise@plt>
   20574:	pop	{r1, pc}
   20578:	cmp	r1, r3
   2057c:	push	{r4, r5, r6, r7, r8, r9, lr}
   20580:	cmpeq	r0, r2
   20584:	mov	r4, r0
   20588:	mov	r5, r1
   2058c:	ldr	r9, [sp, #28]
   20590:	movcc	r0, #0
   20594:	movcc	r1, #0
   20598:	bcc	20690 <__assert_fail@plt+0xf2ac>
   2059c:	cmp	r3, #0
   205a0:	clzeq	ip, r2
   205a4:	clzne	ip, r3
   205a8:	addeq	ip, ip, #32
   205ac:	cmp	r5, #0
   205b0:	clzeq	r1, r4
   205b4:	addeq	r1, r1, #32
   205b8:	clzne	r1, r5
   205bc:	sub	ip, ip, r1
   205c0:	sub	lr, ip, #32
   205c4:	lsl	r7, r3, ip
   205c8:	rsb	r8, ip, #32
   205cc:	orr	r7, r7, r2, lsl lr
   205d0:	orr	r7, r7, r2, lsr r8
   205d4:	lsl	r6, r2, ip
   205d8:	cmp	r5, r7
   205dc:	cmpeq	r4, r6
   205e0:	movcc	r0, #0
   205e4:	movcc	r1, #0
   205e8:	bcc	20604 <__assert_fail@plt+0xf220>
   205ec:	mov	r3, #1
   205f0:	subs	r4, r4, r6
   205f4:	lsl	r1, r3, lr
   205f8:	lsl	r0, r3, ip
   205fc:	orr	r1, r1, r3, lsr r8
   20600:	sbc	r5, r5, r7
   20604:	cmp	ip, #0
   20608:	beq	20690 <__assert_fail@plt+0xf2ac>
   2060c:	lsrs	r3, r7, #1
   20610:	rrx	r2, r6
   20614:	mov	r6, ip
   20618:	b	2063c <__assert_fail@plt+0xf258>
   2061c:	subs	r4, r4, r2
   20620:	sbc	r5, r5, r3
   20624:	adds	r4, r4, r4
   20628:	adc	r5, r5, r5
   2062c:	adds	r4, r4, #1
   20630:	adc	r5, r5, #0
   20634:	subs	r6, r6, #1
   20638:	beq	20658 <__assert_fail@plt+0xf274>
   2063c:	cmp	r5, r3
   20640:	cmpeq	r4, r2
   20644:	bcs	2061c <__assert_fail@plt+0xf238>
   20648:	adds	r4, r4, r4
   2064c:	adc	r5, r5, r5
   20650:	subs	r6, r6, #1
   20654:	bne	2063c <__assert_fail@plt+0xf258>
   20658:	lsr	r6, r4, ip
   2065c:	lsr	r7, r5, ip
   20660:	orr	r6, r6, r5, lsl r8
   20664:	adds	r2, r0, r4
   20668:	orr	r6, r6, r5, lsr lr
   2066c:	adc	r3, r1, r5
   20670:	lsl	r1, r7, ip
   20674:	orr	r1, r1, r6, lsl lr
   20678:	lsl	r0, r6, ip
   2067c:	orr	r1, r1, r6, lsr r8
   20680:	subs	r0, r2, r0
   20684:	mov	r4, r6
   20688:	mov	r5, r7
   2068c:	sbc	r1, r3, r1
   20690:	cmp	r9, #0
   20694:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   20698:	strd	r4, [r9]
   2069c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   206a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   206a4:	mov	r7, r0
   206a8:	ldr	r6, [pc, #72]	; 206f8 <__assert_fail@plt+0xf314>
   206ac:	ldr	r5, [pc, #72]	; 206fc <__assert_fail@plt+0xf318>
   206b0:	add	r6, pc, r6
   206b4:	add	r5, pc, r5
   206b8:	sub	r6, r6, r5
   206bc:	mov	r8, r1
   206c0:	mov	r9, r2
   206c4:	bl	11064 <fdopen@plt-0x20>
   206c8:	asrs	r6, r6, #2
   206cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   206d0:	mov	r4, #0
   206d4:	add	r4, r4, #1
   206d8:	ldr	r3, [r5], #4
   206dc:	mov	r2, r9
   206e0:	mov	r1, r8
   206e4:	mov	r0, r7
   206e8:	blx	r3
   206ec:	cmp	r6, r4
   206f0:	bne	206d4 <__assert_fail@plt+0xf2f0>
   206f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   206f8:	andeq	r2, r1, r8, asr r8
   206fc:	andeq	r2, r1, r0, asr r8
   20700:	bx	lr
   20704:	ldr	r3, [pc, #12]	; 20718 <__assert_fail@plt+0xf334>
   20708:	mov	r1, #0
   2070c:	add	r3, pc, r3
   20710:	ldr	r2, [r3]
   20714:	b	112dc <__cxa_atexit@plt>
   20718:	andeq	r2, r1, r8, lsr #20

Disassembly of section .fini:

0002071c <.fini>:
   2071c:	push	{r3, lr}
   20720:	pop	{r3, pc}
