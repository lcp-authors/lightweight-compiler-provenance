
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	11d48 <__assert_fail@plt+0x978>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	pc, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #126976	; 0x1f000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #126976	; 0x1f000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #126976	; 0x1f000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <gmtime_r@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #126976	; 0x1f000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <utimensat@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #126976	; 0x1f000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <strcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #126976	; 0x1f000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <strtol@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #126976	; 0x1f000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <mktime@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #126976	; 0x1f000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <fflush@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #126976	; 0x1f000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #126976	; 0x1f000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <clock_gettime@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #126976	; 0x1f000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #126976	; 0x1f000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #126976	; 0x1f000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #126976	; 0x1f000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <time@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #126976	; 0x1f000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <memcmp@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #126976	; 0x1f000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <fputc_unlocked@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #126976	; 0x1f000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <dcgettext@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #126976	; 0x1f000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <dup2@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #126976	; 0x1f000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <realloc@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #126976	; 0x1f000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <localtime_r@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #126976	; 0x1f000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #126976	; 0x1f000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #126976	; 0x1f000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <tzset@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #126976	; 0x1f000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #126976	; 0x1f000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #126976	; 0x1f000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #126976	; 0x1f000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #126976	; 0x1f000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #126976	; 0x1f000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #126976	; 0x1f000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #126976	; 0x1f000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #126976	; 0x1f000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <malloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #126976	; 0x1f000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <__libc_start_main@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #126976	; 0x1f000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <strftime@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #126976	; 0x1f000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__vfprintf_chk@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #126976	; 0x1f000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__freading@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #126976	; 0x1f000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <localtime@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #126976	; 0x1f000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_tolower_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #126976	; 0x1f000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <__ctype_toupper_loc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #126976	; 0x1f000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #126976	; 0x1f000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #126976	; 0x1f000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <__ctype_b_loc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #126976	; 0x1f000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #126976	; 0x1f000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <strlen@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #126976	; 0x1f000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <strchr@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #126976	; 0x1f000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <setenv@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #126976	; 0x1f000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #126976	; 0x1f000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <__sprintf_chk@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #126976	; 0x1f000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <snprintf@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #126976	; 0x1f000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <__cxa_atexit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #126976	; 0x1f000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <memset@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #126976	; 0x1f000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <__printf_chk@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #126976	; 0x1f000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <fileno@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #126976	; 0x1f000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <__fprintf_chk@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #126976	; 0x1f000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fclose@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #126976	; 0x1f000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <fseeko64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #126976	; 0x1f000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <__overflow@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #126976	; 0x1f000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <setlocale@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #126976	; 0x1f000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #126976	; 0x1f000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #126976	; 0x1f000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <fputc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #126976	; 0x1f000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <timegm@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #126976	; 0x1f000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <futimens@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #126976	; 0x1f000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #126976	; 0x1f000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <__xstat64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #126976	; 0x1f000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <unsetenv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #126976	; 0x1f000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <fputs@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #126976	; 0x1f000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

00011394 <strncmp@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #126976	; 0x1f000
   1139c:	ldr	pc, [ip, #3456]!	; 0xd80

000113a0 <abort@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #126976	; 0x1f000
   113a8:	ldr	pc, [ip, #3448]!	; 0xd78

000113ac <close@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #126976	; 0x1f000
   113b4:	ldr	pc, [ip, #3440]!	; 0xd70

000113b8 <__lxstat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #126976	; 0x1f000
   113c0:	ldr	pc, [ip, #3432]!	; 0xd68

000113c4 <__snprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #126976	; 0x1f000
   113cc:	ldr	pc, [ip, #3424]!	; 0xd60

000113d0 <__assert_fail@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #126976	; 0x1f000
   113d8:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113e0 <.text>:
   113e0:	push	{r4, r5, r6, lr}
   113e4:	mov	r5, r1
   113e8:	ldr	r3, [pc, #96]	; 11450 <__assert_fail@plt+0x80>
   113ec:	ldr	r4, [pc, #96]	; 11454 <__assert_fail@plt+0x84>
   113f0:	sub	sp, sp, #8
   113f4:	mov	r1, #100	; 0x64
   113f8:	cmp	r0, r3
   113fc:	addge	r4, r4, #1
   11400:	mov	r6, r0
   11404:	bl	1d994 <__assert_fail@plt+0xc5c4>
   11408:	mov	r0, r6
   1140c:	eor	r3, r1, r1, asr #31
   11410:	sub	r3, r3, r1, asr #31
   11414:	mov	r1, #100	; 0x64
   11418:	str	r3, [sp, #4]
   1141c:	bl	1d774 <__assert_fail@plt+0xc3a4>
   11420:	mov	r3, r4
   11424:	mvn	r2, #0
   11428:	mov	r1, #1
   1142c:	add	r0, r0, #19
   11430:	cmp	r0, #0
   11434:	rsblt	r0, r0, #0
   11438:	str	r0, [sp]
   1143c:	mov	r0, r5
   11440:	bl	112a4 <__sprintf_chk@plt>
   11444:	mov	r0, r5
   11448:	add	sp, sp, #8
   1144c:	pop	{r4, r5, r6, pc}
   11450:			; <UNDEFINED> instruction: 0xfffff894
   11454:	strdeq	pc, [r1], -r4
   11458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1145c:	mov	r9, r0
   11460:	sub	sp, sp, #156	; 0x9c
   11464:	ldr	r0, [r1]
   11468:	mov	fp, r1
   1146c:	bl	1881c <__assert_fail@plt+0x744c>
   11470:	ldr	r1, [pc, #2044]	; 11c74 <__assert_fail@plt+0x8a4>
   11474:	mov	r0, #6
   11478:	bl	1131c <setlocale@plt>
   1147c:	ldr	r1, [pc, #2036]	; 11c78 <__assert_fail@plt+0x8a8>
   11480:	ldr	r0, [pc, #2036]	; 11c7c <__assert_fail@plt+0x8ac>
   11484:	bl	11364 <bindtextdomain@plt>
   11488:	ldr	r5, [pc, #2032]	; 11c80 <__assert_fail@plt+0x8b0>
   1148c:	ldr	r0, [pc, #2024]	; 11c7c <__assert_fail@plt+0x8ac>
   11490:	bl	11160 <textdomain@plt>
   11494:	ldr	r0, [pc, #2024]	; 11c84 <__assert_fail@plt+0x8b4>
   11498:	bl	1dc24 <__assert_fail@plt+0xc854>
   1149c:	mov	r3, #0
   114a0:	str	r3, [sp, #24]
   114a4:	str	r3, [sp, #28]
   114a8:	str	r3, [r5, #16]
   114ac:	strb	r3, [r5, #20]
   114b0:	strb	r3, [r5, #21]
   114b4:	ldr	r3, [pc, #1996]	; 11c88 <__assert_fail@plt+0x8b8>
   114b8:	ldr	r7, [pc, #1996]	; 11c8c <__assert_fail@plt+0x8bc>
   114bc:	ldr	sl, [pc, #1996]	; 11c90 <__assert_fail@plt+0x8c0>
   114c0:	add	r8, r3, #100	; 0x64
   114c4:	mov	r6, #0
   114c8:	str	r6, [sp]
   114cc:	mov	r3, r8
   114d0:	mov	r2, r7
   114d4:	mov	r1, fp
   114d8:	mov	r0, r9
   114dc:	bl	11250 <getopt_long@plt>
   114e0:	cmn	r0, #1
   114e4:	beq	1164c <__assert_fail@plt+0x27c>
   114e8:	cmp	r0, #102	; 0x66
   114ec:	beq	114c4 <__assert_fail@plt+0xf4>
   114f0:	bgt	11518 <__assert_fail@plt+0x148>
   114f4:	cmp	r0, #97	; 0x61
   114f8:	beq	116c0 <__assert_fail@plt+0x2f0>
   114fc:	bgt	11544 <__assert_fail@plt+0x174>
   11500:	cmn	r0, #3
   11504:	beq	115c8 <__assert_fail@plt+0x1f8>
   11508:	cmn	r0, #2
   1150c:	bne	116a4 <__assert_fail@plt+0x2d4>
   11510:	mov	r0, r6
   11514:	bl	11e78 <__assert_fail@plt+0xaa8>
   11518:	cmp	r0, #114	; 0x72
   1151c:	beq	116ac <__assert_fail@plt+0x2dc>
   11520:	bgt	11560 <__assert_fail@plt+0x190>
   11524:	cmp	r0, #104	; 0x68
   11528:	beq	11640 <__assert_fail@plt+0x270>
   1152c:	cmp	r0, #109	; 0x6d
   11530:	bne	116a4 <__assert_fail@plt+0x2d4>
   11534:	ldr	r3, [r5, #16]
   11538:	orr	r3, r3, #2
   1153c:	str	r3, [r5, #16]
   11540:	b	114c4 <__assert_fail@plt+0xf4>
   11544:	cmp	r0, #99	; 0x63
   11548:	beq	115bc <__assert_fail@plt+0x1ec>
   1154c:	cmp	r0, #100	; 0x64
   11550:	bne	116a4 <__assert_fail@plt+0x2d4>
   11554:	ldr	r3, [sl]
   11558:	str	r3, [sp, #24]
   1155c:	b	114c4 <__assert_fail@plt+0xf4>
   11560:	cmp	r0, #116	; 0x74
   11564:	beq	11610 <__assert_fail@plt+0x240>
   11568:	cmp	r0, #256	; 0x100
   1156c:	bne	116a4 <__assert_fail@plt+0x2d4>
   11570:	ldr	r3, [pc, #1820]	; 11c94 <__assert_fail@plt+0x8c4>
   11574:	mov	r1, #4
   11578:	mov	r0, #1
   1157c:	ldr	r2, [r3]
   11580:	ldr	r3, [pc, #1808]	; 11c98 <__assert_fail@plt+0x8c8>
   11584:	str	r0, [sp, #8]
   11588:	str	r2, [sp, #4]
   1158c:	str	r1, [sp]
   11590:	add	r2, r3, #20
   11594:	ldr	r1, [sl]
   11598:	ldr	r0, [pc, #1788]	; 11c9c <__assert_fail@plt+0x8cc>
   1159c:	bl	12498 <__assert_fail@plt+0x10c8>
   115a0:	ldr	r3, [pc, #1760]	; 11c88 <__assert_fail@plt+0x8b8>
   115a4:	ldr	r2, [r5, #16]
   115a8:	add	r0, r3, r0, lsl #2
   115ac:	ldr	r3, [r0, #56]	; 0x38
   115b0:	orr	r3, r3, r2
   115b4:	str	r3, [r5, #16]
   115b8:	b	114c4 <__assert_fail@plt+0xf4>
   115bc:	mov	r3, #1
   115c0:	strb	r3, [r5, #21]
   115c4:	b	114c4 <__assert_fail@plt+0xf4>
   115c8:	ldr	lr, [pc, #1744]	; 11ca0 <__assert_fail@plt+0x8d0>
   115cc:	ldr	ip, [pc, #1744]	; 11ca4 <__assert_fail@plt+0x8d4>
   115d0:	ldr	r1, [pc, #1744]	; 11ca8 <__assert_fail@plt+0x8d8>
   115d4:	ldr	r3, [pc, #1744]	; 11cac <__assert_fail@plt+0x8dc>
   115d8:	ldr	r0, [pc, #1744]	; 11cb0 <__assert_fail@plt+0x8e0>
   115dc:	ldr	r2, [pc, #1744]	; 11cb4 <__assert_fail@plt+0x8e4>
   115e0:	ldr	r4, [pc, #1744]	; 11cb8 <__assert_fail@plt+0x8e8>
   115e4:	str	r6, [sp, #20]
   115e8:	ldr	r0, [r0]
   115ec:	ldr	r3, [r3]
   115f0:	stmib	sp, {r1, ip, lr}
   115f4:	str	r2, [sp]
   115f8:	str	r4, [sp, #16]
   115fc:	ldr	r2, [pc, #1720]	; 11cbc <__assert_fail@plt+0x8ec>
   11600:	ldr	r1, [pc, #1720]	; 11cc0 <__assert_fail@plt+0x8f0>
   11604:	bl	1afa4 <__assert_fail@plt+0x9bd4>
   11608:	mov	r0, r6
   1160c:	bl	11268 <exit@plt>
   11610:	mov	r2, #6
   11614:	ldr	r1, [sl]
   11618:	ldr	r0, [pc, #1632]	; 11c80 <__assert_fail@plt+0x8b0>
   1161c:	bl	18528 <__assert_fail@plt+0x7158>
   11620:	subs	r3, r0, #0
   11624:	str	r3, [sp, #28]
   11628:	beq	11bac <__assert_fail@plt+0x7dc>
   1162c:	str	r6, [r5, #4]
   11630:	ldr	r3, [pc, #1676]	; 11cc4 <__assert_fail@plt+0x8f4>
   11634:	ldm	r5, {r0, r1}
   11638:	stm	r3, {r0, r1}
   1163c:	b	114c4 <__assert_fail@plt+0xf4>
   11640:	mov	r3, #1
   11644:	strb	r3, [r5, #22]
   11648:	b	114c4 <__assert_fail@plt+0xf4>
   1164c:	ldr	r3, [r5, #16]
   11650:	mov	r4, r0
   11654:	cmp	r3, r6
   11658:	moveq	r3, #3
   1165c:	streq	r3, [r5, #16]
   11660:	ldr	r3, [sp, #28]
   11664:	cmp	r3, #0
   11668:	beq	116d0 <__assert_fail@plt+0x300>
   1166c:	ldrb	r3, [r5, #20]
   11670:	ldr	r2, [sp, #24]
   11674:	cmp	r2, #0
   11678:	orrne	r3, r3, #1
   1167c:	cmp	r3, #0
   11680:	beq	116d0 <__assert_fail@plt+0x300>
   11684:	ldr	r1, [pc, #1596]	; 11cc8 <__assert_fail@plt+0x8f8>
   11688:	mov	r2, #5
   1168c:	mov	r0, #0
   11690:	bl	11130 <dcgettext@plt>
   11694:	mov	r1, #0
   11698:	mov	r2, r0
   1169c:	mov	r0, r1
   116a0:	bl	111c0 <error@plt>
   116a4:	mov	r0, #1
   116a8:	bl	11e78 <__assert_fail@plt+0xaa8>
   116ac:	ldr	r3, [sl]
   116b0:	mov	r2, #1
   116b4:	strb	r2, [r5, #20]
   116b8:	str	r3, [r5, #24]
   116bc:	b	114c4 <__assert_fail@plt+0xf4>
   116c0:	ldr	r3, [r5, #16]
   116c4:	orr	r3, r3, #1
   116c8:	str	r3, [r5, #16]
   116cc:	b	114c4 <__assert_fail@plt+0xf4>
   116d0:	ldrb	r3, [r5, #20]
   116d4:	cmp	r3, #0
   116d8:	bne	1189c <__assert_fail@plt+0x4cc>
   116dc:	ldr	r6, [sp, #24]
   116e0:	cmp	r6, #0
   116e4:	beq	11aac <__assert_fail@plt+0x6dc>
   116e8:	add	r0, sp, #32
   116ec:	bl	1276c <__assert_fail@plt+0x139c>
   116f0:	add	r2, sp, #32
   116f4:	mov	r1, r6
   116f8:	ldr	r0, [pc, #1408]	; 11c80 <__assert_fail@plt+0x8b0>
   116fc:	bl	11e34 <__assert_fail@plt+0xa64>
   11700:	ldr	r3, [pc, #1468]	; 11cc4 <__assert_fail@plt+0x8f4>
   11704:	ldm	r5, {r0, r1}
   11708:	ldr	r2, [r5, #16]
   1170c:	cmp	r2, #3
   11710:	stm	r3, {r0, r1}
   11714:	beq	11a50 <__assert_fail@plt+0x680>
   11718:	ldr	sl, [pc, #1452]	; 11ccc <__assert_fail@plt+0x8fc>
   1171c:	ldr	r3, [sl]
   11720:	cmp	r9, r3
   11724:	beq	11c68 <__assert_fail@plt+0x898>
   11728:	movle	r3, #1
   1172c:	ble	11990 <__assert_fail@plt+0x5c0>
   11730:	mov	r2, #1
   11734:	str	r4, [sp, #28]
   11738:	mov	r8, r2
   1173c:	str	r9, [sp, #24]
   11740:	b	117d0 <__assert_fail@plt+0x400>
   11744:	bl	11298 <__errno_location@plt>
   11748:	cmp	r4, #0
   1174c:	ldr	r9, [r0]
   11750:	beq	11924 <__assert_fail@plt+0x554>
   11754:	cmp	r4, #1
   11758:	cmpeq	r9, #9
   1175c:	bne	11934 <__assert_fail@plt+0x564>
   11760:	ldrb	r3, [r5, #21]
   11764:	cmp	r3, #0
   11768:	bne	11894 <__assert_fail@plt+0x4c4>
   1176c:	cmp	r7, #0
   11770:	cmpne	r7, #21
   11774:	mov	r9, #9
   11778:	bne	11948 <__assert_fail@plt+0x578>
   1177c:	mov	r2, #5
   11780:	ldr	r1, [pc, #1352]	; 11cd0 <__assert_fail@plt+0x900>
   11784:	mov	r0, #0
   11788:	bl	11130 <dcgettext@plt>
   1178c:	mov	r1, r6
   11790:	mov	r4, r0
   11794:	mov	r0, #4
   11798:	bl	1a49c <__assert_fail@plt+0x90cc>
   1179c:	mov	r2, r4
   117a0:	mov	r1, r9
   117a4:	mov	r3, r0
   117a8:	mov	r0, #0
   117ac:	bl	111c0 <error@plt>
   117b0:	mov	r2, #0
   117b4:	ldr	r3, [sl]
   117b8:	and	r8, r8, r2
   117bc:	ldr	r2, [sp, #24]
   117c0:	add	r3, r3, #1
   117c4:	cmp	r2, r3
   117c8:	str	r3, [sl]
   117cc:	ble	1198c <__assert_fail@plt+0x5bc>
   117d0:	ldr	r6, [fp, r3, lsl #2]
   117d4:	ldr	r1, [pc, #1272]	; 11cd4 <__assert_fail@plt+0x904>
   117d8:	mov	r0, r6
   117dc:	bl	110a0 <strcmp@plt>
   117e0:	subs	r7, r0, #0
   117e4:	moveq	r4, #1
   117e8:	beq	1180c <__assert_fail@plt+0x43c>
   117ec:	ldrb	r3, [r5, #21]
   117f0:	cmp	r3, #0
   117f4:	bne	11804 <__assert_fail@plt+0x434>
   117f8:	ldrb	r3, [r5, #22]
   117fc:	cmp	r3, #0
   11800:	beq	119e0 <__assert_fail@plt+0x610>
   11804:	ldr	r4, [sp, #28]
   11808:	mov	r7, #0
   1180c:	ldr	r3, [r5, #16]
   11810:	cmp	r3, #3
   11814:	beq	11838 <__assert_fail@plt+0x468>
   11818:	cmp	r3, #2
   1181c:	mvneq	r3, #-1073741823	; 0xc0000001
   11820:	streq	r3, [r5, #4]
   11824:	beq	11838 <__assert_fail@plt+0x468>
   11828:	cmp	r3, #1
   1182c:	bne	11c54 <__assert_fail@plt+0x884>
   11830:	mvn	r3, #-1073741823	; 0xc0000001
   11834:	str	r3, [r5, #12]
   11838:	ldrb	r1, [r5, #22]
   1183c:	ldrb	r3, [r5, #28]
   11840:	cmp	r4, #1
   11844:	movne	r2, r6
   11848:	moveq	r2, #0
   1184c:	cmp	r1, #0
   11850:	movne	r1, #256	; 0x100
   11854:	moveq	r1, #0
   11858:	str	r1, [sp]
   1185c:	cmp	r3, #0
   11860:	ldr	r1, [pc, #1048]	; 11c80 <__assert_fail@plt+0x8b0>
   11864:	movne	r1, #0
   11868:	mov	r3, r1
   1186c:	mov	r0, r4
   11870:	mvn	r1, #99	; 0x63
   11874:	bl	126d8 <__assert_fail@plt+0x1308>
   11878:	cmp	r0, #0
   1187c:	bne	11744 <__assert_fail@plt+0x374>
   11880:	cmp	r4, #0
   11884:	bne	11894 <__assert_fail@plt+0x4c4>
   11888:	bl	113ac <close@plt>
   1188c:	cmp	r0, #0
   11890:	bne	11a0c <__assert_fail@plt+0x63c>
   11894:	mov	r2, #1
   11898:	b	117b4 <__assert_fail@plt+0x3e4>
   1189c:	ldrb	r3, [r5, #22]
   118a0:	add	r2, sp, #48	; 0x30
   118a4:	ldr	r1, [r5, #24]
   118a8:	cmp	r3, #0
   118ac:	mov	r0, #3
   118b0:	beq	11afc <__assert_fail@plt+0x72c>
   118b4:	bl	113b8 <__lxstat64@plt>
   118b8:	adds	r0, r0, #0
   118bc:	movne	r0, #1
   118c0:	cmp	r0, #0
   118c4:	bne	11b70 <__assert_fail@plt+0x7a0>
   118c8:	ldr	r3, [sp, #124]	; 0x7c
   118cc:	ldr	r0, [sp, #24]
   118d0:	ldr	r1, [sp, #120]	; 0x78
   118d4:	ldr	r2, [sp, #132]	; 0x84
   118d8:	str	r3, [r5, #4]
   118dc:	ldr	r3, [sp, #128]	; 0x80
   118e0:	cmp	r0, #0
   118e4:	str	r1, [r5]
   118e8:	str	r2, [r5, #12]
   118ec:	str	r3, [r5, #8]
   118f0:	beq	11718 <__assert_fail@plt+0x348>
   118f4:	ldr	r3, [r5, #16]
   118f8:	tst	r3, #1
   118fc:	bne	11b0c <__assert_fail@plt+0x73c>
   11900:	ldr	r3, [r5, #16]
   11904:	tst	r3, #2
   11908:	beq	11718 <__assert_fail@plt+0x348>
   1190c:	ldr	r2, [pc, #944]	; 11cc4 <__assert_fail@plt+0x8f4>
   11910:	ldr	r1, [sp, #24]
   11914:	mov	r0, r2
   11918:	bl	11e34 <__assert_fail@plt+0xa64>
   1191c:	ldr	sl, [pc, #936]	; 11ccc <__assert_fail@plt+0x8fc>
   11920:	b	1171c <__assert_fail@plt+0x34c>
   11924:	mov	r0, #0
   11928:	bl	113ac <close@plt>
   1192c:	cmp	r0, #0
   11930:	bne	11a0c <__assert_fail@plt+0x63c>
   11934:	cmp	r9, #0
   11938:	beq	11894 <__assert_fail@plt+0x4c4>
   1193c:	cmp	r7, #0
   11940:	cmpne	r7, #21
   11944:	beq	119c4 <__assert_fail@plt+0x5f4>
   11948:	cmp	r7, #22
   1194c:	beq	1199c <__assert_fail@plt+0x5cc>
   11950:	mov	r2, #5
   11954:	ldr	r1, [pc, #892]	; 11cd8 <__assert_fail@plt+0x908>
   11958:	mov	r0, #0
   1195c:	bl	11130 <dcgettext@plt>
   11960:	mov	r1, r6
   11964:	mov	r4, r0
   11968:	mov	r0, #4
   1196c:	bl	1a49c <__assert_fail@plt+0x90cc>
   11970:	mov	r2, r4
   11974:	mov	r1, r7
   11978:	mov	r3, r0
   1197c:	mov	r0, #0
   11980:	bl	111c0 <error@plt>
   11984:	mov	r2, #0
   11988:	b	117b4 <__assert_fail@plt+0x3e4>
   1198c:	mov	r3, r8
   11990:	eor	r0, r3, #1
   11994:	add	sp, sp, #156	; 0x9c
   11998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1199c:	add	r2, sp, #48	; 0x30
   119a0:	mov	r1, r6
   119a4:	mov	r0, #3
   119a8:	bl	11370 <__xstat64@plt>
   119ac:	cmp	r0, #0
   119b0:	bne	11950 <__assert_fail@plt+0x580>
   119b4:	ldr	r3, [sp, #64]	; 0x40
   119b8:	and	r3, r3, #61440	; 0xf000
   119bc:	cmp	r3, #16384	; 0x4000
   119c0:	bne	11950 <__assert_fail@plt+0x580>
   119c4:	ldrb	r2, [r5, #21]
   119c8:	cmp	r9, #2
   119cc:	movne	r2, #0
   119d0:	andeq	r2, r2, #1
   119d4:	cmp	r2, #0
   119d8:	beq	1177c <__assert_fail@plt+0x3ac>
   119dc:	b	117b4 <__assert_fail@plt+0x3e4>
   119e0:	ldr	r3, [pc, #756]	; 11cdc <__assert_fail@plt+0x90c>
   119e4:	ldr	r2, [pc, #756]	; 11ce0 <__assert_fail@plt+0x910>
   119e8:	mov	r1, r6
   119ec:	mov	r0, #0
   119f0:	bl	12674 <__assert_fail@plt+0x12a4>
   119f4:	subs	r4, r0, #0
   119f8:	movge	r7, #0
   119fc:	bge	1180c <__assert_fail@plt+0x43c>
   11a00:	bl	11298 <__errno_location@plt>
   11a04:	ldr	r7, [r0]
   11a08:	b	1180c <__assert_fail@plt+0x43c>
   11a0c:	bl	11298 <__errno_location@plt>
   11a10:	mov	r2, #5
   11a14:	ldr	r1, [pc, #712]	; 11ce4 <__assert_fail@plt+0x914>
   11a18:	ldr	r4, [r0]
   11a1c:	mov	r0, #0
   11a20:	bl	11130 <dcgettext@plt>
   11a24:	mov	r1, r6
   11a28:	mov	r7, r0
   11a2c:	mov	r0, #4
   11a30:	bl	1a49c <__assert_fail@plt+0x90cc>
   11a34:	mov	r2, r7
   11a38:	mov	r1, r4
   11a3c:	mov	r3, r0
   11a40:	mov	r0, #0
   11a44:	bl	111c0 <error@plt>
   11a48:	mov	r2, #0
   11a4c:	b	117b4 <__assert_fail@plt+0x3e4>
   11a50:	ldr	r3, [sp, #32]
   11a54:	cmp	r0, r3
   11a58:	bne	11718 <__assert_fail@plt+0x348>
   11a5c:	ldr	r2, [sp, #36]	; 0x24
   11a60:	mov	r3, r1
   11a64:	cmp	r1, r2
   11a68:	bne	11718 <__assert_fail@plt+0x348>
   11a6c:	eor	r0, r0, #1
   11a70:	add	r2, sp, #40	; 0x28
   11a74:	str	r0, [sp, #40]	; 0x28
   11a78:	ldr	r1, [sp, #24]
   11a7c:	add	r0, sp, #48	; 0x30
   11a80:	str	r3, [sp, #44]	; 0x2c
   11a84:	bl	11e34 <__assert_fail@plt+0xa64>
   11a88:	ldr	r2, [sp, #48]	; 0x30
   11a8c:	ldr	r3, [sp, #40]	; 0x28
   11a90:	cmp	r2, r3
   11a94:	bne	11718 <__assert_fail@plt+0x348>
   11a98:	ldr	r2, [sp, #52]	; 0x34
   11a9c:	ldr	r3, [sp, #44]	; 0x2c
   11aa0:	subs	r3, r2, r3
   11aa4:	movne	r3, #1
   11aa8:	str	r3, [sp, #28]
   11aac:	ldr	r3, [sp, #28]
   11ab0:	ldr	sl, [pc, #532]	; 11ccc <__assert_fail@plt+0x8fc>
   11ab4:	cmp	r3, #0
   11ab8:	bne	1171c <__assert_fail@plt+0x34c>
   11abc:	ldr	r3, [sl]
   11ac0:	sub	r3, r9, r3
   11ac4:	cmp	r3, #1
   11ac8:	ble	11adc <__assert_fail@plt+0x70c>
   11acc:	bl	187bc <__assert_fail@plt+0x73ec>
   11ad0:	ldr	r3, [pc, #528]	; 11ce8 <__assert_fail@plt+0x918>
   11ad4:	cmp	r0, r3
   11ad8:	ble	11b20 <__assert_fail@plt+0x750>
   11adc:	ldr	r3, [r5, #16]
   11ae0:	cmp	r3, #3
   11ae4:	mvnne	r3, #-1073741824	; 0xc0000000
   11ae8:	strne	r3, [r5, #4]
   11aec:	strne	r3, [r5, #12]
   11af0:	moveq	r3, #1
   11af4:	strbeq	r3, [r5, #28]
   11af8:	b	1171c <__assert_fail@plt+0x34c>
   11afc:	bl	11370 <__xstat64@plt>
   11b00:	adds	r0, r0, #0
   11b04:	movne	r0, #1
   11b08:	b	118c0 <__assert_fail@plt+0x4f0>
   11b0c:	ldr	r2, [pc, #364]	; 11c80 <__assert_fail@plt+0x8b0>
   11b10:	ldr	r1, [sp, #24]
   11b14:	mov	r0, r2
   11b18:	bl	11e34 <__assert_fail@plt+0xa64>
   11b1c:	b	11900 <__assert_fail@plt+0x530>
   11b20:	ldr	r3, [sl]
   11b24:	mov	r2, #9
   11b28:	ldr	r0, [pc, #336]	; 11c80 <__assert_fail@plt+0x8b0>
   11b2c:	ldr	r1, [fp, r3, lsl #2]
   11b30:	bl	18528 <__assert_fail@plt+0x7158>
   11b34:	cmp	r0, #0
   11b38:	beq	11adc <__assert_fail@plt+0x70c>
   11b3c:	ldr	r3, [sp, #28]
   11b40:	str	r3, [r5, #4]
   11b44:	ldr	r3, [pc, #376]	; 11cc4 <__assert_fail@plt+0x8f4>
   11b48:	ldm	r5, {r0, r1}
   11b4c:	stm	r3, {r0, r1}
   11b50:	ldr	r0, [pc, #404]	; 11cec <__assert_fail@plt+0x91c>
   11b54:	bl	111d8 <getenv@plt>
   11b58:	cmp	r0, #0
   11b5c:	beq	11bd8 <__assert_fail@plt+0x808>
   11b60:	ldr	r3, [sl]
   11b64:	add	r3, r3, #1
   11b68:	str	r3, [sl]
   11b6c:	b	1171c <__assert_fail@plt+0x34c>
   11b70:	bl	11298 <__errno_location@plt>
   11b74:	mov	r2, #5
   11b78:	ldr	r1, [pc, #368]	; 11cf0 <__assert_fail@plt+0x920>
   11b7c:	ldr	r4, [r0]
   11b80:	mov	r0, #0
   11b84:	bl	11130 <dcgettext@plt>
   11b88:	ldr	r1, [r5, #24]
   11b8c:	mov	r6, r0
   11b90:	mov	r0, #4
   11b94:	bl	1a49c <__assert_fail@plt+0x90cc>
   11b98:	mov	r2, r6
   11b9c:	mov	r1, r4
   11ba0:	mov	r3, r0
   11ba4:	mov	r0, #1
   11ba8:	bl	111c0 <error@plt>
   11bac:	mov	r2, #5
   11bb0:	ldr	r1, [pc, #316]	; 11cf4 <__assert_fail@plt+0x924>
   11bb4:	bl	11130 <dcgettext@plt>
   11bb8:	mov	r4, r0
   11bbc:	ldr	r0, [sl]
   11bc0:	bl	1a6dc <__assert_fail@plt+0x930c>
   11bc4:	mov	r2, r4
   11bc8:	ldr	r1, [sp, #28]
   11bcc:	mov	r3, r0
   11bd0:	mov	r0, #1
   11bd4:	bl	111c0 <error@plt>
   11bd8:	ldr	r0, [pc, #160]	; 11c80 <__assert_fail@plt+0x8b0>
   11bdc:	bl	11220 <localtime@plt>
   11be0:	subs	r6, r0, #0
   11be4:	beq	11b60 <__assert_fail@plt+0x790>
   11be8:	ldr	r7, [sp, #28]
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #256]	; 11cf8 <__assert_fail@plt+0x928>
   11bf4:	mov	r0, r7
   11bf8:	bl	11130 <dcgettext@plt>
   11bfc:	ldr	r2, [r6]
   11c00:	ldr	r3, [sl]
   11c04:	str	r2, [sp, #20]
   11c08:	ldr	r2, [r6, #4]
   11c0c:	ldr	r3, [fp, r3, lsl #2]
   11c10:	str	r2, [sp, #16]
   11c14:	ldr	r2, [r6, #8]
   11c18:	mov	r1, r7
   11c1c:	str	r2, [sp, #12]
   11c20:	ldr	r2, [r6, #12]
   11c24:	str	r2, [sp, #8]
   11c28:	ldr	r2, [r6, #16]
   11c2c:	add	r2, r2, #1
   11c30:	str	r2, [sp, #4]
   11c34:	ldr	r2, [r6, #20]
   11c38:	add	r2, r2, #1888	; 0x760
   11c3c:	add	r2, r2, #12
   11c40:	str	r2, [sp]
   11c44:	mov	r2, r0
   11c48:	mov	r0, r7
   11c4c:	bl	111c0 <error@plt>
   11c50:	b	11b60 <__assert_fail@plt+0x790>
   11c54:	ldr	r3, [pc, #160]	; 11cfc <__assert_fail@plt+0x92c>
   11c58:	mov	r2, #147	; 0x93
   11c5c:	ldr	r1, [pc, #156]	; 11d00 <__assert_fail@plt+0x930>
   11c60:	ldr	r0, [pc, #156]	; 11d04 <__assert_fail@plt+0x934>
   11c64:	bl	113d0 <__assert_fail@plt>
   11c68:	mov	r2, #5
   11c6c:	ldr	r1, [pc, #148]	; 11d08 <__assert_fail@plt+0x938>
   11c70:	b	1168c <__assert_fail@plt+0x2bc>
   11c74:	andeq	pc, r1, ip, ror #27
   11c78:	ldrdeq	lr, [r1], -ip
   11c7c:	andeq	lr, r1, r4, lsr r3
   11c80:			; <UNDEFINED> instruction: 0x000311b0
   11c84:	muleq	r1, r0, r5
   11c88:	andeq	sp, r1, r8, asr #24
   11c8c:	andeq	lr, r1, r0, asr #8
   11c90:	andeq	r1, r3, r8, lsr #3
   11c94:	andeq	r1, r3, r4, asr #2
   11c98:	andeq	sp, r1, r0, lsl #25
   11c9c:	strdeq	lr, [r1], -r4
   11ca0:	andeq	lr, r1, r8, lsl #8
   11ca4:	andeq	lr, r1, r8, lsl r4
   11ca8:	andeq	lr, r1, r4, lsr #8
   11cac:	andeq	r1, r3, r0, asr #2
   11cb0:	andeq	r1, r3, r4, lsr #3
   11cb4:	andeq	lr, r1, r4, lsr r4
   11cb8:	strdeq	lr, [r1], -ip
   11cbc:	andeq	lr, r1, r0, lsr r3
   11cc0:	andeq	sp, r1, ip, asr #26
   11cc4:			; <UNDEFINED> instruction: 0x000311b8
   11cc8:	andeq	lr, r1, ip, asr #8
   11ccc:	muleq	r3, r8, r1
   11cd0:	andeq	lr, r1, r0, ror #10
   11cd4:	andeq	lr, r1, r0, lsl r5
   11cd8:	andeq	lr, r1, r0, asr r5
   11cdc:			; <UNDEFINED> instruction: 0x000001b6
   11ce0:	andeq	r0, r0, r1, asr #18
   11ce4:	andeq	lr, r1, ip, lsr r5
   11ce8:	andeq	r0, r3, pc, lsr #27
   11cec:	muleq	r1, ip, r4
   11cf0:	andeq	lr, r1, ip, ror r4
   11cf4:	andeq	sp, r1, r4, lsr sp
   11cf8:	andeq	lr, r1, ip, lsr #9
   11cfc:	andeq	sp, r1, ip, lsr #26
   11d00:	andeq	lr, r1, r4, lsl r5
   11d04:	andeq	lr, r1, r0, lsr #10
   11d08:	strdeq	lr, [r1], -r8
   11d0c:	mov	fp, #0
   11d10:	mov	lr, #0
   11d14:	pop	{r1}		; (ldr r1, [sp], #4)
   11d18:	mov	r2, sp
   11d1c:	push	{r2}		; (str r2, [sp, #-4]!)
   11d20:	push	{r0}		; (str r0, [sp, #-4]!)
   11d24:	ldr	ip, [pc, #16]	; 11d3c <__assert_fail@plt+0x96c>
   11d28:	push	{ip}		; (str ip, [sp, #-4]!)
   11d2c:	ldr	r0, [pc, #12]	; 11d40 <__assert_fail@plt+0x970>
   11d30:	ldr	r3, [pc, #12]	; 11d44 <__assert_fail@plt+0x974>
   11d34:	bl	111f0 <__libc_start_main@plt>
   11d38:	bl	113a0 <abort@plt>
   11d3c:	andeq	sp, r1, r0, lsr #24
   11d40:	andeq	r1, r1, r8, asr r4
   11d44:	andeq	sp, r1, r0, asr #23
   11d48:	ldr	r3, [pc, #20]	; 11d64 <__assert_fail@plt+0x994>
   11d4c:	ldr	r2, [pc, #20]	; 11d68 <__assert_fail@plt+0x998>
   11d50:	add	r3, pc, r3
   11d54:	ldr	r2, [r3, r2]
   11d58:	cmp	r2, #0
   11d5c:	bxeq	lr
   11d60:	b	11244 <__gmon_start__@plt>
   11d64:	andeq	pc, r1, r8, lsr #5
   11d68:	andeq	r0, r0, r4, lsr r1
   11d6c:	ldr	r3, [pc, #28]	; 11d90 <__assert_fail@plt+0x9c0>
   11d70:	ldr	r0, [pc, #28]	; 11d94 <__assert_fail@plt+0x9c4>
   11d74:	sub	r3, r3, r0
   11d78:	cmp	r3, #6
   11d7c:	bxls	lr
   11d80:	ldr	r3, [pc, #16]	; 11d98 <__assert_fail@plt+0x9c8>
   11d84:	cmp	r3, #0
   11d88:	bxeq	lr
   11d8c:	bx	r3
   11d90:	andeq	r1, r3, pc, lsl #3
   11d94:	andeq	r1, r3, ip, lsl #3
   11d98:	andeq	r0, r0, r0
   11d9c:	ldr	r1, [pc, #36]	; 11dc8 <__assert_fail@plt+0x9f8>
   11da0:	ldr	r0, [pc, #36]	; 11dcc <__assert_fail@plt+0x9fc>
   11da4:	sub	r1, r1, r0
   11da8:	asr	r1, r1, #2
   11dac:	add	r1, r1, r1, lsr #31
   11db0:	asrs	r1, r1, #1
   11db4:	bxeq	lr
   11db8:	ldr	r3, [pc, #16]	; 11dd0 <__assert_fail@plt+0xa00>
   11dbc:	cmp	r3, #0
   11dc0:	bxeq	lr
   11dc4:	bx	r3
   11dc8:	andeq	r1, r3, ip, lsl #3
   11dcc:	andeq	r1, r3, ip, lsl #3
   11dd0:	andeq	r0, r0, r0
   11dd4:	push	{r4, lr}
   11dd8:	ldr	r4, [pc, #24]	; 11df8 <__assert_fail@plt+0xa28>
   11ddc:	ldrb	r3, [r4]
   11de0:	cmp	r3, #0
   11de4:	popne	{r4, pc}
   11de8:	bl	11d6c <__assert_fail@plt+0x99c>
   11dec:	mov	r3, #1
   11df0:	strb	r3, [r4]
   11df4:	pop	{r4, pc}
   11df8:	andeq	r1, r3, ip, lsr #3
   11dfc:	ldr	r0, [pc, #40]	; 11e2c <__assert_fail@plt+0xa5c>
   11e00:	ldr	r3, [r0]
   11e04:	cmp	r3, #0
   11e08:	bne	11e10 <__assert_fail@plt+0xa40>
   11e0c:	b	11d9c <__assert_fail@plt+0x9cc>
   11e10:	ldr	r3, [pc, #24]	; 11e30 <__assert_fail@plt+0xa60>
   11e14:	cmp	r3, #0
   11e18:	beq	11e0c <__assert_fail@plt+0xa3c>
   11e1c:	push	{r4, lr}
   11e20:	blx	r3
   11e24:	pop	{r4, lr}
   11e28:	b	11d9c <__assert_fail@plt+0x9cc>
   11e2c:	andeq	r0, r3, r4, lsl pc
   11e30:	andeq	r0, r0, r0
   11e34:	push	{r4, r5, r6, lr}
   11e38:	mov	r5, r1
   11e3c:	bl	18404 <__assert_fail@plt+0x7034>
   11e40:	subs	r4, r0, #0
   11e44:	popne	{r4, r5, r6, pc}
   11e48:	mov	r2, #5
   11e4c:	ldr	r1, [pc, #32]	; 11e74 <__assert_fail@plt+0xaa4>
   11e50:	bl	11130 <dcgettext@plt>
   11e54:	mov	r6, r0
   11e58:	mov	r0, r5
   11e5c:	bl	1a6dc <__assert_fail@plt+0x930c>
   11e60:	mov	r2, r6
   11e64:	mov	r1, r4
   11e68:	mov	r3, r0
   11e6c:	mov	r0, #1
   11e70:	bl	111c0 <error@plt>
   11e74:	andeq	sp, r1, r4, lsr sp
   11e78:	subs	r5, r0, #0
   11e7c:	push	{r7, lr}
   11e80:	sub	sp, sp, #56	; 0x38
   11e84:	beq	11ec0 <__assert_fail@plt+0xaf0>
   11e88:	ldr	r3, [pc, #732]	; 1216c <__assert_fail@plt+0xd9c>
   11e8c:	mov	r2, #5
   11e90:	ldr	r1, [pc, #728]	; 12170 <__assert_fail@plt+0xda0>
   11e94:	mov	r0, #0
   11e98:	ldr	r4, [r3]
   11e9c:	bl	11130 <dcgettext@plt>
   11ea0:	ldr	r3, [pc, #716]	; 12174 <__assert_fail@plt+0xda4>
   11ea4:	mov	r1, #1
   11ea8:	ldr	r3, [r3]
   11eac:	mov	r2, r0
   11eb0:	mov	r0, r4
   11eb4:	bl	112ec <__fprintf_chk@plt>
   11eb8:	mov	r0, r5
   11ebc:	bl	11268 <exit@plt>
   11ec0:	mov	r2, #5
   11ec4:	ldr	r1, [pc, #684]	; 12178 <__assert_fail@plt+0xda8>
   11ec8:	bl	11130 <dcgettext@plt>
   11ecc:	ldr	r3, [pc, #672]	; 12174 <__assert_fail@plt+0xda4>
   11ed0:	ldr	r7, [pc, #676]	; 1217c <__assert_fail@plt+0xdac>
   11ed4:	ldr	r4, [pc, #676]	; 12180 <__assert_fail@plt+0xdb0>
   11ed8:	ldr	r2, [r3]
   11edc:	mov	r1, r0
   11ee0:	mov	r0, #1
   11ee4:	bl	112d4 <__printf_chk@plt>
   11ee8:	mov	r2, #5
   11eec:	ldr	r1, [pc, #656]	; 12184 <__assert_fail@plt+0xdb4>
   11ef0:	mov	r0, r5
   11ef4:	bl	11130 <dcgettext@plt>
   11ef8:	ldr	r1, [r7]
   11efc:	bl	11070 <fputs_unlocked@plt>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #636]	; 12188 <__assert_fail@plt+0xdb8>
   11f08:	mov	r0, r5
   11f0c:	bl	11130 <dcgettext@plt>
   11f10:	ldr	r1, [r7]
   11f14:	bl	11070 <fputs_unlocked@plt>
   11f18:	mov	r2, #5
   11f1c:	ldr	r1, [pc, #616]	; 1218c <__assert_fail@plt+0xdbc>
   11f20:	mov	r0, r5
   11f24:	bl	11130 <dcgettext@plt>
   11f28:	ldr	r1, [r7]
   11f2c:	bl	11070 <fputs_unlocked@plt>
   11f30:	mov	r2, #5
   11f34:	ldr	r1, [pc, #596]	; 12190 <__assert_fail@plt+0xdc0>
   11f38:	mov	r0, r5
   11f3c:	bl	11130 <dcgettext@plt>
   11f40:	ldr	r1, [r7]
   11f44:	bl	11070 <fputs_unlocked@plt>
   11f48:	mov	r2, #5
   11f4c:	ldr	r1, [pc, #576]	; 12194 <__assert_fail@plt+0xdc4>
   11f50:	mov	r0, r5
   11f54:	bl	11130 <dcgettext@plt>
   11f58:	ldr	r1, [r7]
   11f5c:	bl	11070 <fputs_unlocked@plt>
   11f60:	mov	r2, #5
   11f64:	ldr	r1, [pc, #556]	; 12198 <__assert_fail@plt+0xdc8>
   11f68:	mov	r0, r5
   11f6c:	bl	11130 <dcgettext@plt>
   11f70:	ldr	r1, [r7]
   11f74:	bl	11070 <fputs_unlocked@plt>
   11f78:	mov	r2, #5
   11f7c:	ldr	r1, [pc, #536]	; 1219c <__assert_fail@plt+0xdcc>
   11f80:	mov	r0, r5
   11f84:	bl	11130 <dcgettext@plt>
   11f88:	ldr	r1, [r7]
   11f8c:	bl	11070 <fputs_unlocked@plt>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #516]	; 121a0 <__assert_fail@plt+0xdd0>
   11f98:	mov	r0, r5
   11f9c:	bl	11130 <dcgettext@plt>
   11fa0:	ldr	r1, [r7]
   11fa4:	bl	11070 <fputs_unlocked@plt>
   11fa8:	ldm	r4!, {r0, r1, r2, r3}
   11fac:	mov	lr, sp
   11fb0:	stmia	lr!, {r0, r1, r2, r3}
   11fb4:	ldm	r4!, {r0, r1, r2, r3}
   11fb8:	ldr	ip, [sp]
   11fbc:	stmia	lr!, {r0, r1, r2, r3}
   11fc0:	cmp	ip, #0
   11fc4:	ldm	r4!, {r0, r1, r2, r3}
   11fc8:	stmia	lr!, {r0, r1, r2, r3}
   11fcc:	ldm	r4, {r0, r1}
   11fd0:	moveq	r4, sp
   11fd4:	stm	lr, {r0, r1}
   11fd8:	beq	12008 <__assert_fail@plt+0xc38>
   11fdc:	ldr	r6, [pc, #448]	; 121a4 <__assert_fail@plt+0xdd4>
   11fe0:	mov	r4, sp
   11fe4:	b	11ff4 <__assert_fail@plt+0xc24>
   11fe8:	ldr	ip, [r4, #8]!
   11fec:	cmp	ip, #0
   11ff0:	beq	12008 <__assert_fail@plt+0xc38>
   11ff4:	mov	r1, ip
   11ff8:	mov	r0, r6
   11ffc:	bl	110a0 <strcmp@plt>
   12000:	cmp	r0, #0
   12004:	bne	11fe8 <__assert_fail@plt+0xc18>
   12008:	ldr	r4, [r4, #4]
   1200c:	mov	r2, #5
   12010:	cmp	r4, #0
   12014:	ldr	r1, [pc, #396]	; 121a8 <__assert_fail@plt+0xdd8>
   12018:	beq	120c0 <__assert_fail@plt+0xcf0>
   1201c:	mov	r0, #0
   12020:	bl	11130 <dcgettext@plt>
   12024:	ldr	r3, [pc, #384]	; 121ac <__assert_fail@plt+0xddc>
   12028:	ldr	r2, [pc, #384]	; 121b0 <__assert_fail@plt+0xde0>
   1202c:	mov	r1, r0
   12030:	mov	r0, #1
   12034:	bl	112d4 <__printf_chk@plt>
   12038:	mov	r1, #0
   1203c:	mov	r0, #5
   12040:	bl	1131c <setlocale@plt>
   12044:	cmp	r0, #0
   12048:	ldreq	r6, [pc, #340]	; 121a4 <__assert_fail@plt+0xdd4>
   1204c:	beq	12068 <__assert_fail@plt+0xc98>
   12050:	mov	r2, #3
   12054:	ldr	r1, [pc, #344]	; 121b4 <__assert_fail@plt+0xde4>
   12058:	bl	11394 <strncmp@plt>
   1205c:	ldr	r6, [pc, #320]	; 121a4 <__assert_fail@plt+0xdd4>
   12060:	cmp	r0, #0
   12064:	bne	12150 <__assert_fail@plt+0xd80>
   12068:	mov	r2, #5
   1206c:	ldr	r1, [pc, #324]	; 121b8 <__assert_fail@plt+0xde8>
   12070:	mov	r0, #0
   12074:	bl	11130 <dcgettext@plt>
   12078:	ldr	r3, [pc, #292]	; 121a4 <__assert_fail@plt+0xdd4>
   1207c:	ldr	r2, [pc, #296]	; 121ac <__assert_fail@plt+0xddc>
   12080:	mov	r1, r0
   12084:	mov	r0, #1
   12088:	bl	112d4 <__printf_chk@plt>
   1208c:	mov	r2, #5
   12090:	ldr	r1, [pc, #292]	; 121bc <__assert_fail@plt+0xdec>
   12094:	mov	r0, #0
   12098:	bl	11130 <dcgettext@plt>
   1209c:	ldr	r2, [pc, #284]	; 121c0 <__assert_fail@plt+0xdf0>
   120a0:	cmp	r4, r6
   120a4:	ldr	r3, [pc, #280]	; 121c4 <__assert_fail@plt+0xdf4>
   120a8:	movne	r3, r2
   120ac:	mov	r1, r0
   120b0:	mov	r2, r4
   120b4:	mov	r0, #1
   120b8:	bl	112d4 <__printf_chk@plt>
   120bc:	b	11eb8 <__assert_fail@plt+0xae8>
   120c0:	mov	r0, r4
   120c4:	bl	11130 <dcgettext@plt>
   120c8:	ldr	r3, [pc, #220]	; 121ac <__assert_fail@plt+0xddc>
   120cc:	ldr	r2, [pc, #220]	; 121b0 <__assert_fail@plt+0xde0>
   120d0:	mov	r1, r0
   120d4:	mov	r0, #1
   120d8:	bl	112d4 <__printf_chk@plt>
   120dc:	mov	r1, r4
   120e0:	mov	r0, #5
   120e4:	bl	1131c <setlocale@plt>
   120e8:	cmp	r0, #0
   120ec:	beq	12104 <__assert_fail@plt+0xd34>
   120f0:	mov	r2, #3
   120f4:	ldr	r1, [pc, #184]	; 121b4 <__assert_fail@plt+0xde4>
   120f8:	bl	11394 <strncmp@plt>
   120fc:	cmp	r0, #0
   12100:	bne	12148 <__assert_fail@plt+0xd78>
   12104:	mov	r2, #5
   12108:	ldr	r1, [pc, #168]	; 121b8 <__assert_fail@plt+0xde8>
   1210c:	mov	r0, #0
   12110:	bl	11130 <dcgettext@plt>
   12114:	ldr	r3, [pc, #136]	; 121a4 <__assert_fail@plt+0xdd4>
   12118:	ldr	r2, [pc, #140]	; 121ac <__assert_fail@plt+0xddc>
   1211c:	mov	r4, r3
   12120:	mov	r1, r0
   12124:	mov	r0, #1
   12128:	bl	112d4 <__printf_chk@plt>
   1212c:	ldr	r1, [pc, #136]	; 121bc <__assert_fail@plt+0xdec>
   12130:	mov	r2, #5
   12134:	mov	r0, #0
   12138:	bl	11130 <dcgettext@plt>
   1213c:	ldr	r3, [pc, #128]	; 121c4 <__assert_fail@plt+0xdf4>
   12140:	mov	r1, r0
   12144:	b	120b0 <__assert_fail@plt+0xce0>
   12148:	ldr	r6, [pc, #84]	; 121a4 <__assert_fail@plt+0xdd4>
   1214c:	mov	r4, r6
   12150:	mov	r2, #5
   12154:	ldr	r1, [pc, #108]	; 121c8 <__assert_fail@plt+0xdf8>
   12158:	mov	r0, #0
   1215c:	bl	11130 <dcgettext@plt>
   12160:	ldr	r1, [r7]
   12164:	bl	11070 <fputs_unlocked@plt>
   12168:	b	12068 <__assert_fail@plt+0xc98>
   1216c:	andeq	r1, r3, r0, lsr #3
   12170:	andeq	sp, r1, r4, asr sp
   12174:	ldrdeq	r1, [r3], -r8
   12178:	andeq	sp, r1, ip, ror sp
   1217c:	andeq	r1, r3, r4, lsr #3
   12180:	andeq	sp, r1, r8, asr #24
   12184:	muleq	r1, ip, sp
   12188:	andeq	sp, r1, r0, asr #29
   1218c:	andeq	sp, r1, ip, lsl #30
   12190:	andeq	sp, r1, r0, ror #31
   12194:	andeq	lr, r1, r8, ror #1
   12198:	andeq	lr, r1, r0, asr #4
   1219c:	andeq	lr, r1, r0, ror r2
   121a0:	andeq	lr, r1, r8, lsr #5
   121a4:	andeq	sp, r1, ip, asr #26
   121a8:	strdeq	lr, [r1], -r0
   121ac:	andeq	lr, r1, r8, lsl #6
   121b0:	andeq	lr, r1, r0, lsr r3
   121b4:	andeq	lr, r1, r0, asr #6
   121b8:	andeq	lr, r1, ip, lsl #7
   121bc:	andeq	lr, r1, r8, lsr #7
   121c0:	andeq	pc, r1, ip, ror #27
   121c4:	andeq	lr, r1, ip, ror r5
   121c8:	andeq	lr, r1, r4, asr #6
   121cc:	mov	r0, #1
   121d0:	b	11e78 <__assert_fail@plt+0xaa8>
   121d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121d8:	mov	r5, r1
   121dc:	sub	sp, sp, #12
   121e0:	mov	r4, r2
   121e4:	str	r2, [sp]
   121e8:	mov	r7, r3
   121ec:	mov	sl, r0
   121f0:	bl	11274 <strlen@plt>
   121f4:	ldr	fp, [r5]
   121f8:	cmp	fp, #0
   121fc:	beq	122c4 <__assert_fail@plt+0xef4>
   12200:	mov	r3, #0
   12204:	mov	r8, r0
   12208:	str	r3, [sp, #4]
   1220c:	mov	r6, r3
   12210:	mvn	r9, #0
   12214:	b	12240 <__assert_fail@plt+0xe70>
   12218:	bl	11118 <memcmp@plt>
   1221c:	ldr	r3, [sp, #4]
   12220:	cmp	r0, #0
   12224:	movne	r3, #1
   12228:	str	r3, [sp, #4]
   1222c:	ldr	fp, [r5, #4]!
   12230:	add	r6, r6, #1
   12234:	cmp	fp, #0
   12238:	add	r4, r4, r7
   1223c:	beq	1229c <__assert_fail@plt+0xecc>
   12240:	mov	r2, r8
   12244:	mov	r1, sl
   12248:	mov	r0, fp
   1224c:	bl	11394 <strncmp@plt>
   12250:	cmp	r0, #0
   12254:	mov	r0, fp
   12258:	bne	1222c <__assert_fail@plt+0xe5c>
   1225c:	bl	11274 <strlen@plt>
   12260:	ldr	r3, [sp]
   12264:	mov	r2, r7
   12268:	mov	r1, r4
   1226c:	cmp	r8, r0
   12270:	mla	r0, r7, r9, r3
   12274:	beq	122b4 <__assert_fail@plt+0xee4>
   12278:	cmn	r9, #1
   1227c:	moveq	r9, r6
   12280:	beq	1222c <__assert_fail@plt+0xe5c>
   12284:	ldr	r3, [sp]
   12288:	cmp	r3, #0
   1228c:	bne	12218 <__assert_fail@plt+0xe48>
   12290:	mov	r3, #1
   12294:	str	r3, [sp, #4]
   12298:	b	1222c <__assert_fail@plt+0xe5c>
   1229c:	ldr	r3, [sp, #4]
   122a0:	cmp	r3, #0
   122a4:	mvnne	r9, #1
   122a8:	mov	r0, r9
   122ac:	add	sp, sp, #12
   122b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122b4:	mov	r9, r6
   122b8:	mov	r0, r9
   122bc:	add	sp, sp, #12
   122c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122c4:	mvn	r9, #0
   122c8:	b	122a8 <__assert_fail@plt+0xed8>
   122cc:	push	{r4, r5, r6, lr}
   122d0:	mov	r6, r0
   122d4:	ldr	r0, [r1]
   122d8:	cmp	r0, #0
   122dc:	beq	12314 <__assert_fail@plt+0xf44>
   122e0:	mov	r4, r1
   122e4:	mov	r5, #0
   122e8:	b	122fc <__assert_fail@plt+0xf2c>
   122ec:	ldr	r0, [r4, #4]!
   122f0:	add	r5, r5, #1
   122f4:	cmp	r0, #0
   122f8:	beq	12314 <__assert_fail@plt+0xf44>
   122fc:	mov	r1, r6
   12300:	bl	110a0 <strcmp@plt>
   12304:	cmp	r0, #0
   12308:	bne	122ec <__assert_fail@plt+0xf1c>
   1230c:	mov	r0, r5
   12310:	pop	{r4, r5, r6, pc}
   12314:	mvn	r0, #0
   12318:	pop	{r4, r5, r6, pc}
   1231c:	cmn	r2, #1
   12320:	push	{r4, r5, r6, lr}
   12324:	mov	r2, #5
   12328:	sub	sp, sp, #8
   1232c:	mov	r4, r1
   12330:	mov	r5, r0
   12334:	ldreq	r1, [pc, #76]	; 12388 <__assert_fail@plt+0xfb8>
   12338:	ldrne	r1, [pc, #76]	; 1238c <__assert_fail@plt+0xfbc>
   1233c:	mov	r0, #0
   12340:	bl	11130 <dcgettext@plt>
   12344:	mov	r2, r4
   12348:	mov	r1, #8
   1234c:	mov	r6, r0
   12350:	mov	r0, #0
   12354:	bl	1a430 <__assert_fail@plt+0x9060>
   12358:	mov	r1, r5
   1235c:	mov	r4, r0
   12360:	mov	r0, #1
   12364:	bl	1a6cc <__assert_fail@plt+0x92fc>
   12368:	mov	r1, #0
   1236c:	mov	r3, r4
   12370:	mov	r2, r6
   12374:	str	r0, [sp]
   12378:	mov	r0, r1
   1237c:	bl	111c0 <error@plt>
   12380:	add	sp, sp, #8
   12384:	pop	{r4, r5, r6, pc}
   12388:	andeq	lr, r1, r4, asr r6
   1238c:	andeq	lr, r1, r0, ror r6
   12390:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12394:	mov	r6, r0
   12398:	ldr	r9, [pc, #232]	; 12488 <__assert_fail@plt+0x10b8>
   1239c:	mov	r4, r1
   123a0:	mov	r7, r2
   123a4:	ldr	r1, [pc, #224]	; 1248c <__assert_fail@plt+0x10bc>
   123a8:	mov	r2, #5
   123ac:	mov	r0, #0
   123b0:	bl	11130 <dcgettext@plt>
   123b4:	ldr	r1, [r9]
   123b8:	bl	11070 <fputs_unlocked@plt>
   123bc:	ldr	fp, [r6]
   123c0:	cmp	fp, #0
   123c4:	movne	r8, #0
   123c8:	movne	r5, r8
   123cc:	movne	sl, #1
   123d0:	bne	12410 <__assert_fail@plt+0x1040>
   123d4:	b	12454 <__assert_fail@plt+0x1084>
   123d8:	mov	r0, fp
   123dc:	ldr	r8, [r9]
   123e0:	bl	1a6dc <__assert_fail@plt+0x930c>
   123e4:	ldr	r2, [pc, #164]	; 12490 <__assert_fail@plt+0x10c0>
   123e8:	mov	r1, sl
   123ec:	mov	r3, r0
   123f0:	mov	r0, r8
   123f4:	bl	112ec <__fprintf_chk@plt>
   123f8:	mov	r8, r4
   123fc:	ldr	fp, [r6, #4]!
   12400:	add	r5, r5, #1
   12404:	cmp	fp, #0
   12408:	add	r4, r4, r7
   1240c:	beq	12454 <__assert_fail@plt+0x1084>
   12410:	cmp	r5, #0
   12414:	mov	r1, r4
   12418:	mov	r2, r7
   1241c:	mov	r0, r8
   12420:	beq	123d8 <__assert_fail@plt+0x1008>
   12424:	bl	11118 <memcmp@plt>
   12428:	cmp	r0, #0
   1242c:	bne	123d8 <__assert_fail@plt+0x1008>
   12430:	mov	r0, fp
   12434:	ldr	fp, [r9]
   12438:	bl	1a6dc <__assert_fail@plt+0x930c>
   1243c:	ldr	r2, [pc, #80]	; 12494 <__assert_fail@plt+0x10c4>
   12440:	mov	r1, sl
   12444:	mov	r3, r0
   12448:	mov	r0, fp
   1244c:	bl	112ec <__fprintf_chk@plt>
   12450:	b	123fc <__assert_fail@plt+0x102c>
   12454:	ldr	r0, [r9]
   12458:	ldr	r3, [r0, #20]
   1245c:	ldr	r2, [r0, #24]
   12460:	cmp	r3, r2
   12464:	bcs	1247c <__assert_fail@plt+0x10ac>
   12468:	add	r1, r3, #1
   1246c:	mov	r2, #10
   12470:	str	r1, [r0, #20]
   12474:	strb	r2, [r3]
   12478:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1247c:	mov	r1, #10
   12480:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12484:	b	11310 <__overflow@plt>
   12488:	andeq	r1, r3, r0, lsr #3
   1248c:	muleq	r1, r0, r6
   12490:	andeq	lr, r1, r8, lsr #13
   12494:			; <UNDEFINED> instruction: 0x0001e6b0
   12498:	push	{r4, r5, r6, r7, r8, lr}
   1249c:	mov	r7, r0
   124a0:	ldrb	ip, [sp, #32]
   124a4:	mov	r5, r1
   124a8:	mov	r4, r2
   124ac:	cmp	ip, #0
   124b0:	mov	r6, r3
   124b4:	beq	12504 <__assert_fail@plt+0x1134>
   124b8:	ldr	r3, [sp, #24]
   124bc:	mov	r2, r6
   124c0:	mov	r1, r4
   124c4:	mov	r0, r5
   124c8:	bl	121d4 <__assert_fail@plt+0xe04>
   124cc:	cmp	r0, #0
   124d0:	popge	{r4, r5, r6, r7, r8, pc}
   124d4:	mov	r2, r0
   124d8:	mov	r1, r5
   124dc:	mov	r0, r7
   124e0:	bl	1231c <__assert_fail@plt+0xf4c>
   124e4:	mov	r0, r4
   124e8:	ldr	r2, [sp, #24]
   124ec:	mov	r1, r6
   124f0:	bl	12390 <__assert_fail@plt+0xfc0>
   124f4:	ldr	r3, [sp, #28]
   124f8:	blx	r3
   124fc:	mvn	r0, #0
   12500:	pop	{r4, r5, r6, r7, r8, pc}
   12504:	mov	r1, r2
   12508:	mov	r0, r5
   1250c:	bl	122cc <__assert_fail@plt+0xefc>
   12510:	cmp	r0, #0
   12514:	popge	{r4, r5, r6, r7, r8, pc}
   12518:	b	124d4 <__assert_fail@plt+0x1104>
   1251c:	push	{r4, r5, r6, r7, r8, lr}
   12520:	ldr	r7, [r1]
   12524:	cmp	r7, #0
   12528:	beq	12568 <__assert_fail@plt+0x1198>
   1252c:	mov	r6, r3
   12530:	mov	r8, r0
   12534:	mov	r4, r2
   12538:	mov	r5, r1
   1253c:	b	1254c <__assert_fail@plt+0x117c>
   12540:	ldr	r7, [r5, #4]!
   12544:	cmp	r7, #0
   12548:	beq	12568 <__assert_fail@plt+0x1198>
   1254c:	mov	r1, r4
   12550:	mov	r2, r6
   12554:	mov	r0, r8
   12558:	bl	11118 <memcmp@plt>
   1255c:	add	r4, r4, r6
   12560:	cmp	r0, #0
   12564:	bne	12540 <__assert_fail@plt+0x1170>
   12568:	mov	r0, r7
   1256c:	pop	{r4, r5, r6, r7, r8, pc}
   12570:	ldr	r3, [pc, #4]	; 1257c <__assert_fail@plt+0x11ac>
   12574:	str	r0, [r3]
   12578:	bx	lr
   1257c:	ldrdeq	r1, [r3], -r0
   12580:	ldr	r3, [pc, #4]	; 1258c <__assert_fail@plt+0x11bc>
   12584:	strb	r0, [r3, #4]
   12588:	bx	lr
   1258c:	ldrdeq	r1, [r3], -r0
   12590:	ldr	r3, [pc, #192]	; 12658 <__assert_fail@plt+0x1288>
   12594:	push	{r4, r5, r6, lr}
   12598:	sub	sp, sp, #8
   1259c:	ldr	r0, [r3]
   125a0:	bl	1b6f8 <__assert_fail@plt+0xa328>
   125a4:	cmp	r0, #0
   125a8:	beq	125cc <__assert_fail@plt+0x11fc>
   125ac:	ldr	r4, [pc, #168]	; 1265c <__assert_fail@plt+0x128c>
   125b0:	ldrb	r3, [r4, #4]
   125b4:	cmp	r3, #0
   125b8:	beq	125e8 <__assert_fail@plt+0x1218>
   125bc:	bl	11298 <__errno_location@plt>
   125c0:	ldr	r3, [r0]
   125c4:	cmp	r3, #32
   125c8:	bne	125e8 <__assert_fail@plt+0x1218>
   125cc:	ldr	r3, [pc, #140]	; 12660 <__assert_fail@plt+0x1290>
   125d0:	ldr	r0, [r3]
   125d4:	bl	1b6f8 <__assert_fail@plt+0xa328>
   125d8:	cmp	r0, #0
   125dc:	bne	12630 <__assert_fail@plt+0x1260>
   125e0:	add	sp, sp, #8
   125e4:	pop	{r4, r5, r6, pc}
   125e8:	mov	r2, #5
   125ec:	ldr	r1, [pc, #112]	; 12664 <__assert_fail@plt+0x1294>
   125f0:	mov	r0, #0
   125f4:	bl	11130 <dcgettext@plt>
   125f8:	ldr	r4, [r4]
   125fc:	cmp	r4, #0
   12600:	mov	r5, r0
   12604:	beq	1263c <__assert_fail@plt+0x126c>
   12608:	bl	11298 <__errno_location@plt>
   1260c:	ldr	r6, [r0]
   12610:	mov	r0, r4
   12614:	bl	1a544 <__assert_fail@plt+0x9174>
   12618:	mov	r1, r6
   1261c:	str	r5, [sp]
   12620:	ldr	r2, [pc, #64]	; 12668 <__assert_fail@plt+0x1298>
   12624:	mov	r3, r0
   12628:	mov	r0, #0
   1262c:	bl	111c0 <error@plt>
   12630:	ldr	r3, [pc, #52]	; 1266c <__assert_fail@plt+0x129c>
   12634:	ldr	r0, [r3]
   12638:	bl	110e8 <_exit@plt>
   1263c:	bl	11298 <__errno_location@plt>
   12640:	mov	r3, r5
   12644:	ldr	r2, [pc, #36]	; 12670 <__assert_fail@plt+0x12a0>
   12648:	ldr	r1, [r0]
   1264c:	mov	r0, r4
   12650:	bl	111c0 <error@plt>
   12654:	b	12630 <__assert_fail@plt+0x1260>
   12658:	andeq	r1, r3, r4, lsr #3
   1265c:	ldrdeq	r1, [r3], -r0
   12660:	andeq	r1, r3, r0, lsr #3
   12664:			; <UNDEFINED> instruction: 0x0001e6b8
   12668:	andeq	lr, r1, r4, asr #13
   1266c:	andeq	r1, r3, r8, asr #2
   12670:	andeq	lr, r1, r8, asr #13
   12674:	mov	ip, r1
   12678:	push	{r4, r5, r6, r7, r8, lr}
   1267c:	mov	r1, r2
   12680:	mov	r5, r0
   12684:	mov	r2, r3
   12688:	mov	r0, ip
   1268c:	bl	111cc <open64@plt>
   12690:	sub	r3, r5, r0
   12694:	clz	r3, r3
   12698:	lsr	r3, r3, #5
   1269c:	orrs	r3, r3, r0, lsr #31
   126a0:	mov	r4, r0
   126a4:	bne	126d0 <__assert_fail@plt+0x1300>
   126a8:	mov	r1, r5
   126ac:	bl	1113c <dup2@plt>
   126b0:	mov	r7, r0
   126b4:	bl	11298 <__errno_location@plt>
   126b8:	mov	r5, r0
   126bc:	mov	r0, r4
   126c0:	ldr	r6, [r5]
   126c4:	mov	r4, r7
   126c8:	bl	113ac <close@plt>
   126cc:	str	r6, [r5]
   126d0:	mov	r0, r4
   126d4:	pop	{r4, r5, r6, r7, r8, pc}
   126d8:	cmp	r0, #0
   126dc:	push	{r4, r5, r6, r7, r8, lr}
   126e0:	mov	r7, r1
   126e4:	mov	r5, r2
   126e8:	mov	r6, r3
   126ec:	blt	1271c <__assert_fail@plt+0x134c>
   126f0:	mov	r1, r3
   126f4:	bl	11358 <futimens@plt>
   126f8:	cmp	r5, #0
   126fc:	mov	r4, r0
   12700:	beq	1270c <__assert_fail@plt+0x133c>
   12704:	cmn	r0, #1
   12708:	beq	12740 <__assert_fail@plt+0x1370>
   1270c:	cmp	r4, #1
   12710:	beq	12758 <__assert_fail@plt+0x1388>
   12714:	mov	r0, r4
   12718:	pop	{r4, r5, r6, r7, r8, pc}
   1271c:	cmp	r2, #0
   12720:	beq	12758 <__assert_fail@plt+0x1388>
   12724:	mov	r2, r6
   12728:	mov	r1, r5
   1272c:	mov	r0, r7
   12730:	ldr	r3, [sp, #24]
   12734:	bl	11094 <utimensat@plt>
   12738:	mov	r4, r0
   1273c:	b	1270c <__assert_fail@plt+0x133c>
   12740:	bl	11298 <__errno_location@plt>
   12744:	ldr	r3, [r0]
   12748:	cmp	r3, #38	; 0x26
   1274c:	beq	12724 <__assert_fail@plt+0x1354>
   12750:	mov	r0, r4
   12754:	pop	{r4, r5, r6, r7, r8, pc}
   12758:	bl	11298 <__errno_location@plt>
   1275c:	mov	r3, #9
   12760:	mvn	r4, #0
   12764:	str	r3, [r0]
   12768:	b	12714 <__assert_fail@plt+0x1344>
   1276c:	mov	r1, r0
   12770:	mov	r0, #0
   12774:	b	110dc <clock_gettime@plt>
   12778:	push	{r4, r5, lr}
   1277c:	sub	sp, sp, #12
   12780:	mov	r4, r0
   12784:	mov	r1, sp
   12788:	mov	r0, #0
   1278c:	bl	110dc <clock_gettime@plt>
   12790:	ldm	sp, {r0, r1}
   12794:	stm	r4, {r0, r1}
   12798:	mov	r0, r4
   1279c:	add	sp, sp, #12
   127a0:	pop	{r4, r5, pc}
   127a4:	andeq	r0, r0, r0
   127a8:	sub	sp, sp, #8
   127ac:	push	{r4, r5, r6, r7, r8, lr}
   127b0:	mov	r4, r0
   127b4:	ldr	r0, [r0, #156]	; 0x9c
   127b8:	add	r1, sp, #24
   127bc:	cmp	r0, #0
   127c0:	stm	r1, {r2, r3}
   127c4:	ldrd	r6, [sp, #32]
   127c8:	ldr	r5, [sp, #40]	; 0x28
   127cc:	beq	127dc <__assert_fail@plt+0x140c>
   127d0:	ldr	r3, [r4, #48]	; 0x30
   127d4:	cmp	r3, #0
   127d8:	beq	12848 <__assert_fail@plt+0x1478>
   127dc:	cmp	r5, #4
   127e0:	bgt	12880 <__assert_fail@plt+0x14b0>
   127e4:	ldr	r3, [r4, #172]	; 0xac
   127e8:	cmp	r5, #2
   127ec:	add	r3, r3, #1
   127f0:	str	r3, [r4, #172]	; 0xac
   127f4:	ble	1286c <__assert_fail@plt+0x149c>
   127f8:	mov	r2, #100	; 0x64
   127fc:	mov	r3, #0
   12800:	mov	r0, r6
   12804:	mov	r1, r7
   12808:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   1280c:	mov	r2, #100	; 0x64
   12810:	mov	r3, #0
   12814:	strd	r0, [r4, #72]	; 0x48
   12818:	mov	r0, r6
   1281c:	mov	r1, r7
   12820:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   12824:	strd	r2, [r4, #80]	; 0x50
   12828:	mov	r3, #0
   1282c:	mov	r2, #2
   12830:	str	r3, [r4, #88]	; 0x58
   12834:	str	r3, [r4, #92]	; 0x5c
   12838:	str	r2, [r4, #28]
   1283c:	pop	{r4, r5, r6, r7, r8, lr}
   12840:	add	sp, sp, #8
   12844:	bx	lr
   12848:	ldrb	r3, [r4, #153]	; 0x99
   1284c:	cmp	r3, #0
   12850:	bne	127dc <__assert_fail@plt+0x140c>
   12854:	ldr	r3, [r4, #172]	; 0xac
   12858:	cmp	r5, #2
   1285c:	cmple	r3, #0
   12860:	moveq	r3, #1
   12864:	streq	r3, [r4, #172]	; 0xac
   12868:	bne	128f0 <__assert_fail@plt+0x1520>
   1286c:	mov	r2, #0
   12870:	mov	r3, #0
   12874:	strd	r6, [r4, #72]	; 0x48
   12878:	strd	r2, [r4, #80]	; 0x50
   1287c:	b	12828 <__assert_fail@plt+0x1458>
   12880:	add	r0, r0, #1
   12884:	str	r0, [r4, #156]	; 0x9c
   12888:	mov	r1, r7
   1288c:	mov	r0, r6
   12890:	mov	r2, #100	; 0x64
   12894:	mov	r3, #0
   12898:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   1289c:	mov	r0, r6
   128a0:	mov	r1, r7
   128a4:	sub	r5, r5, #4
   128a8:	strd	r2, [r4, #64]	; 0x40
   128ac:	mov	r2, #100	; 0x64
   128b0:	mov	r3, #0
   128b4:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   128b8:	mov	r2, #100	; 0x64
   128bc:	mov	r3, #0
   128c0:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   128c4:	mov	r0, r6
   128c8:	mov	r1, r7
   128cc:	strd	r2, [r4, #56]	; 0x38
   128d0:	ldr	r2, [pc, #60]	; 12914 <__assert_fail@plt+0x1544>
   128d4:	mov	r3, #0
   128d8:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   128dc:	str	r5, [r4, #48]	; 0x30
   128e0:	strd	r0, [r4, #40]	; 0x28
   128e4:	pop	{r4, r5, r6, r7, r8, lr}
   128e8:	add	sp, sp, #8
   128ec:	bx	lr
   128f0:	mov	ip, r1
   128f4:	add	lr, r4, #32
   128f8:	ldm	ip!, {r0, r1, r2, r3}
   128fc:	mov	r5, #1
   12900:	strb	r5, [r4, #180]	; 0xb4
   12904:	stmia	lr!, {r0, r1, r2, r3}
   12908:	ldm	ip, {r0, r1}
   1290c:	stm	lr, {r0, r1}
   12910:	b	1283c <__assert_fail@plt+0x146c>
   12914:	andeq	r2, r0, r0, lsl r7
   12918:	ldr	r3, [r1, #24]
   1291c:	cmp	r3, #0
   12920:	blt	12990 <__assert_fail@plt+0x15c0>
   12924:	push	{r4, r5, lr}
   12928:	ldr	r2, [r0]
   1292c:	ldr	r5, [r1]
   12930:	ldr	lr, [r1, #4]
   12934:	ldr	r3, [r0, #4]
   12938:	ldr	ip, [r0, #8]
   1293c:	ldr	r4, [r1, #8]
   12940:	eor	r2, r2, r5
   12944:	eor	r3, r3, lr
   12948:	ldr	r5, [r1, #12]
   1294c:	ldr	lr, [r0, #12]
   12950:	orr	r3, r2, r3
   12954:	eor	r2, ip, r4
   12958:	ldr	ip, [r0, #16]
   1295c:	ldr	r4, [r1, #16]
   12960:	orr	r3, r3, r2
   12964:	eor	lr, lr, r5
   12968:	ldr	r2, [r0, #20]
   1296c:	ldr	r0, [r1, #20]
   12970:	orr	r3, r3, lr
   12974:	eor	r1, ip, r4
   12978:	eor	r2, r2, r0
   1297c:	orr	r3, r3, r1
   12980:	orrs	r3, r3, r2
   12984:	moveq	r0, #1
   12988:	movne	r0, #0
   1298c:	pop	{r4, r5, pc}
   12990:	mov	r0, #0
   12994:	bx	lr
   12998:	ldr	r3, [pc, #264]	; 12aa8 <__assert_fail@plt+0x16d8>
   1299c:	push	{r4, r5, r6, r7, lr}
   129a0:	asr	r6, r0, #31
   129a4:	smull	r3, r2, r3, r0
   129a8:	ldr	r3, [pc, #252]	; 12aac <__assert_fail@plt+0x16dc>
   129ac:	add	r2, r2, r0
   129b0:	cmp	r0, #0
   129b4:	rsb	r6, r6, r2, asr #11
   129b8:	mov	r5, r1
   129bc:	eor	r2, r6, r6, asr #31
   129c0:	movge	r1, #43	; 0x2b
   129c4:	movlt	r1, #45	; 0x2d
   129c8:	sub	sp, sp, #12
   129cc:	sub	r2, r2, r6, asr #31
   129d0:	mov	r4, r0
   129d4:	stm	sp, {r1, r2}
   129d8:	mov	r0, r5
   129dc:	mvn	r2, #0
   129e0:	mov	r1, #1
   129e4:	bl	112a4 <__sprintf_chk@plt>
   129e8:	mov	r2, #3600	; 0xe10
   129ec:	mul	r2, r2, r6
   129f0:	subs	r4, r4, r2
   129f4:	beq	12a6c <__assert_fail@plt+0x169c>
   129f8:	cmp	r4, #0
   129fc:	ldr	r3, [pc, #172]	; 12ab0 <__assert_fail@plt+0x16e0>
   12a00:	rsblt	r4, r4, #0
   12a04:	ldr	ip, [pc, #168]	; 12ab4 <__assert_fail@plt+0x16e4>
   12a08:	smull	r2, r3, r3, r4
   12a0c:	ldr	lr, [pc, #164]	; 12ab8 <__assert_fail@plt+0x16e8>
   12a10:	add	r3, r3, r4
   12a14:	asr	r1, r4, #31
   12a18:	rsb	r3, r1, r3, asr #5
   12a1c:	smull	r2, lr, lr, r4
   12a20:	smull	r2, r6, ip, r3
   12a24:	asr	r2, r3, #31
   12a28:	rsb	r2, r2, r6, asr #2
   12a2c:	rsb	r6, r3, r3, lsl #4
   12a30:	add	r2, r2, r2, lsl #2
   12a34:	rsb	r1, r1, lr, asr #6
   12a38:	sub	r2, r3, r2, lsl #1
   12a3c:	add	lr, r5, r0
   12a40:	add	r2, r2, #48	; 0x30
   12a44:	add	r1, r1, #48	; 0x30
   12a48:	mov	r7, #58	; 0x3a
   12a4c:	subs	r3, r4, r6, lsl #2
   12a50:	strb	r7, [r5, r0]
   12a54:	strb	r2, [lr, #2]
   12a58:	strb	r1, [lr, #1]
   12a5c:	addeq	r2, lr, #3
   12a60:	bne	12a78 <__assert_fail@plt+0x16a8>
   12a64:	mov	r3, #0
   12a68:	strb	r3, [r2]
   12a6c:	mov	r0, r5
   12a70:	add	sp, sp, #12
   12a74:	pop	{r4, r5, r6, r7, pc}
   12a78:	smull	r2, ip, ip, r3
   12a7c:	strb	r7, [lr, #3]
   12a80:	asr	r2, r3, #31
   12a84:	rsb	ip, r2, ip, asr #2
   12a88:	add	r2, lr, #6
   12a8c:	add	r1, ip, ip, lsl #2
   12a90:	add	ip, ip, #48	; 0x30
   12a94:	sub	r3, r3, r1, lsl #1
   12a98:	add	r3, r3, #48	; 0x30
   12a9c:	strb	r3, [lr, #5]
   12aa0:	strb	ip, [lr, #4]
   12aa4:	b	12a64 <__assert_fail@plt+0x1694>
   12aa8:			; <UNDEFINED> instruction: 0x91a2b3c5
   12aac:	andeq	pc, r1, ip, ror #3
   12ab0:	stmhi	r8, {r0, r3, r7, fp, pc}
   12ab4:	strbtvs	r6, [r6], -r7, ror #12
   12ab8:	blne	13b3194 <optarg@@GLIBC_2.4+0x1381fec>
   12abc:	push	{r0, r1, r2, r3}
   12ac0:	mov	r2, #6
   12ac4:	push	{r4, lr}
   12ac8:	mov	r1, #1
   12acc:	ldr	r4, [pc, #56]	; 12b0c <__assert_fail@plt+0x173c>
   12ad0:	sub	sp, sp, #8
   12ad4:	ldr	r0, [pc, #52]	; 12b10 <__assert_fail@plt+0x1740>
   12ad8:	ldr	r3, [r4]
   12adc:	bl	11184 <fwrite@plt>
   12ae0:	add	ip, sp, #20
   12ae4:	ldr	r0, [r4]
   12ae8:	ldr	r2, [sp, #16]
   12aec:	mov	r3, ip
   12af0:	mov	r1, #1
   12af4:	str	ip, [sp, #4]
   12af8:	bl	11208 <__vfprintf_chk@plt>
   12afc:	add	sp, sp, #8
   12b00:	pop	{r4, lr}
   12b04:	add	sp, sp, #16
   12b08:	bx	lr
   12b0c:	andeq	r1, r3, r0, lsr #3
   12b10:	andeq	pc, r1, r0, lsl #4
   12b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b18:	ldr	r1, [sp, #80]	; 0x50
   12b1c:	ldr	lr, [r0, #144]	; 0x90
   12b20:	cmp	r1, #0
   12b24:	ldrd	sl, [sp, #60]	; 0x3c
   12b28:	ldrd	r8, [sp, #68]	; 0x44
   12b2c:	ldr	ip, [sp, #76]	; 0x4c
   12b30:	blt	12e7c <__assert_fail@plt+0x1aac>
   12b34:	cmp	ip, #0
   12b38:	blt	12fe8 <__assert_fail@plt+0x1c18>
   12b3c:	cmp	lr, #0
   12b40:	blt	12dd0 <__assert_fail@plt+0x1a00>
   12b44:	mvn	r1, #-2147483648	; 0x80000000
   12b48:	sub	r1, r1, ip
   12b4c:	cmp	lr, r1
   12b50:	movle	r1, #0
   12b54:	movgt	r1, #1
   12b58:	cmp	r1, #0
   12b5c:	beq	12dd0 <__assert_fail@plt+0x1a00>
   12b60:	mov	r1, #1
   12b64:	add	ip, lr, ip
   12b68:	str	ip, [r0, #144]	; 0x90
   12b6c:	cmp	r8, #0
   12b70:	sbcs	ip, r9, #0
   12b74:	ldrd	r4, [r0, #136]	; 0x88
   12b78:	blt	130bc <__assert_fail@plt+0x1cec>
   12b7c:	cmp	r4, #0
   12b80:	sbcs	ip, r5, #0
   12b84:	blt	12e68 <__assert_fail@plt+0x1a98>
   12b88:	mvn	r6, #0
   12b8c:	subs	r6, r6, r8
   12b90:	mvn	r7, #-2147483648	; 0x80000000
   12b94:	sbc	r7, r7, r9
   12b98:	cmp	r6, r4
   12b9c:	sbcs	ip, r7, r5
   12ba0:	movlt	ip, #1
   12ba4:	movge	ip, #0
   12ba8:	cmp	ip, #0
   12bac:	beq	12e68 <__assert_fail@plt+0x1a98>
   12bb0:	adds	r4, r4, r8
   12bb4:	adc	r5, r5, r9
   12bb8:	mov	ip, #1
   12bbc:	strd	r4, [r0, #136]	; 0x88
   12bc0:	cmp	sl, #0
   12bc4:	sbcs	lr, fp, #0
   12bc8:	orr	r1, r1, ip
   12bcc:	ldrd	r4, [r0, #128]	; 0x80
   12bd0:	blt	13098 <__assert_fail@plt+0x1cc8>
   12bd4:	cmp	r4, #0
   12bd8:	sbcs	ip, r5, #0
   12bdc:	blt	12e54 <__assert_fail@plt+0x1a84>
   12be0:	mvn	r6, #0
   12be4:	subs	r6, r6, sl
   12be8:	mvn	r7, #-2147483648	; 0x80000000
   12bec:	sbc	r7, r7, fp
   12bf0:	cmp	r6, r4
   12bf4:	sbcs	ip, r7, r5
   12bf8:	movlt	ip, #1
   12bfc:	movge	ip, #0
   12c00:	cmp	ip, #0
   12c04:	beq	12e54 <__assert_fail@plt+0x1a84>
   12c08:	adds	r4, r4, sl
   12c0c:	adc	r5, r5, fp
   12c10:	mov	ip, #1
   12c14:	strd	r4, [r0, #128]	; 0x80
   12c18:	ldrd	r4, [sp, #52]	; 0x34
   12c1c:	orr	r1, r1, ip
   12c20:	cmp	r4, #0
   12c24:	sbcs	lr, r5, #0
   12c28:	ldrd	r4, [r0, #120]	; 0x78
   12c2c:	blt	13070 <__assert_fail@plt+0x1ca0>
   12c30:	cmp	r4, #0
   12c34:	sbcs	ip, r5, #0
   12c38:	blt	12e34 <__assert_fail@plt+0x1a64>
   12c3c:	ldrd	r8, [sp, #52]	; 0x34
   12c40:	mvn	r6, #0
   12c44:	mvn	r7, #-2147483648	; 0x80000000
   12c48:	subs	r8, r6, r8
   12c4c:	sbc	r9, r7, r9
   12c50:	cmp	r8, r4
   12c54:	sbcs	ip, r9, r5
   12c58:	movlt	ip, #1
   12c5c:	movge	ip, #0
   12c60:	cmp	ip, #0
   12c64:	beq	12e34 <__assert_fail@plt+0x1a64>
   12c68:	ldrd	r6, [sp, #52]	; 0x34
   12c6c:	mov	ip, #1
   12c70:	adds	r6, r6, r4
   12c74:	adc	r7, r7, r5
   12c78:	mov	r4, r6
   12c7c:	mov	r5, r7
   12c80:	strd	r4, [r0, #120]	; 0x78
   12c84:	ldrd	r4, [sp, #44]	; 0x2c
   12c88:	orr	r1, r1, ip
   12c8c:	cmp	r4, #0
   12c90:	sbcs	lr, r5, #0
   12c94:	ldrd	r4, [r0, #112]	; 0x70
   12c98:	blt	13048 <__assert_fail@plt+0x1c78>
   12c9c:	cmp	r4, #0
   12ca0:	sbcs	ip, r5, #0
   12ca4:	blt	12e14 <__assert_fail@plt+0x1a44>
   12ca8:	ldrd	r8, [sp, #44]	; 0x2c
   12cac:	mvn	r6, #0
   12cb0:	mvn	r7, #-2147483648	; 0x80000000
   12cb4:	subs	r8, r6, r8
   12cb8:	sbc	r9, r7, r9
   12cbc:	cmp	r8, r4
   12cc0:	sbcs	ip, r9, r5
   12cc4:	movlt	ip, #1
   12cc8:	movge	ip, #0
   12ccc:	cmp	ip, #0
   12cd0:	beq	12e14 <__assert_fail@plt+0x1a44>
   12cd4:	ldrd	r6, [sp, #44]	; 0x2c
   12cd8:	mov	ip, #1
   12cdc:	adds	r6, r6, r4
   12ce0:	adc	r7, r7, r5
   12ce4:	mov	r4, r6
   12ce8:	mov	r5, r7
   12cec:	strd	r4, [r0, #112]	; 0x70
   12cf0:	ldrd	r4, [sp, #36]	; 0x24
   12cf4:	orr	r1, r1, ip
   12cf8:	cmp	r4, #0
   12cfc:	sbcs	lr, r5, #0
   12d00:	ldrd	r4, [r0, #104]	; 0x68
   12d04:	blt	13020 <__assert_fail@plt+0x1c50>
   12d08:	cmp	r4, #0
   12d0c:	sbcs	ip, r5, #0
   12d10:	blt	12df4 <__assert_fail@plt+0x1a24>
   12d14:	ldrd	r8, [sp, #36]	; 0x24
   12d18:	mvn	r6, #0
   12d1c:	mvn	r7, #-2147483648	; 0x80000000
   12d20:	subs	r8, r6, r8
   12d24:	sbc	r9, r7, r9
   12d28:	cmp	r8, r4
   12d2c:	sbcs	ip, r9, r5
   12d30:	movlt	ip, #1
   12d34:	movge	ip, #0
   12d38:	cmp	ip, #0
   12d3c:	beq	12df4 <__assert_fail@plt+0x1a24>
   12d40:	ldrd	r6, [sp, #36]	; 0x24
   12d44:	mov	ip, #1
   12d48:	adds	r6, r6, r4
   12d4c:	adc	r7, r7, r5
   12d50:	mov	r4, r6
   12d54:	mov	r5, r7
   12d58:	strd	r4, [r0, #104]	; 0x68
   12d5c:	cmp	r2, #0
   12d60:	sbcs	lr, r3, #0
   12d64:	orr	r1, r1, ip
   12d68:	ldrd	r4, [r0, #96]	; 0x60
   12d6c:	blt	12ffc <__assert_fail@plt+0x1c2c>
   12d70:	cmp	r4, #0
   12d74:	sbcs	ip, r5, #0
   12d78:	blt	12de0 <__assert_fail@plt+0x1a10>
   12d7c:	mvn	r6, #0
   12d80:	subs	r6, r6, r2
   12d84:	mvn	r7, #-2147483648	; 0x80000000
   12d88:	sbc	r7, r7, r3
   12d8c:	cmp	r6, r4
   12d90:	sbcs	ip, r7, r5
   12d94:	movlt	ip, #1
   12d98:	movge	ip, #0
   12d9c:	cmp	ip, #0
   12da0:	beq	12de0 <__assert_fail@plt+0x1a10>
   12da4:	adds	r2, r2, r4
   12da8:	adc	r3, r3, r5
   12dac:	mov	ip, #1
   12db0:	strd	r2, [r0, #96]	; 0x60
   12db4:	orr	r1, r1, ip
   12db8:	cmp	r1, #0
   12dbc:	moveq	r3, #1
   12dc0:	strbeq	r3, [r0, #153]	; 0x99
   12dc4:	moveq	r0, r3
   12dc8:	movne	r0, #0
   12dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dd0:	add	ip, lr, ip
   12dd4:	mov	r1, #0
   12dd8:	str	ip, [r0, #144]	; 0x90
   12ddc:	b	12b6c <__assert_fail@plt+0x179c>
   12de0:	adds	r2, r2, r4
   12de4:	adc	r3, r3, r5
   12de8:	mov	ip, #0
   12dec:	strd	r2, [r0, #96]	; 0x60
   12df0:	b	12db4 <__assert_fail@plt+0x19e4>
   12df4:	ldrd	r6, [sp, #36]	; 0x24
   12df8:	mov	ip, #0
   12dfc:	adds	r6, r6, r4
   12e00:	adc	r7, r7, r5
   12e04:	mov	r4, r6
   12e08:	mov	r5, r7
   12e0c:	strd	r4, [r0, #104]	; 0x68
   12e10:	b	12d5c <__assert_fail@plt+0x198c>
   12e14:	ldrd	r6, [sp, #44]	; 0x2c
   12e18:	mov	ip, #0
   12e1c:	adds	r6, r6, r4
   12e20:	adc	r7, r7, r5
   12e24:	mov	r4, r6
   12e28:	mov	r5, r7
   12e2c:	strd	r4, [r0, #112]	; 0x70
   12e30:	b	12cf0 <__assert_fail@plt+0x1920>
   12e34:	ldrd	r6, [sp, #52]	; 0x34
   12e38:	mov	ip, #0
   12e3c:	adds	r6, r6, r4
   12e40:	adc	r7, r7, r5
   12e44:	mov	r4, r6
   12e48:	mov	r5, r7
   12e4c:	strd	r4, [r0, #120]	; 0x78
   12e50:	b	12c84 <__assert_fail@plt+0x18b4>
   12e54:	adds	r4, r4, sl
   12e58:	adc	r5, r5, fp
   12e5c:	mov	ip, #0
   12e60:	strd	r4, [r0, #128]	; 0x80
   12e64:	b	12c18 <__assert_fail@plt+0x1848>
   12e68:	adds	r4, r4, r8
   12e6c:	adc	r5, r5, r9
   12e70:	mov	ip, #0
   12e74:	strd	r4, [r0, #136]	; 0x88
   12e78:	b	12bc0 <__assert_fail@plt+0x17f0>
   12e7c:	mvn	r1, lr
   12e80:	lsr	r1, r1, #31
   12e84:	cmp	r1, ip, lsr #31
   12e88:	beq	12fb8 <__assert_fail@plt+0x1be8>
   12e8c:	mov	r1, #0
   12e90:	sub	ip, lr, ip
   12e94:	str	ip, [r0, #144]	; 0x90
   12e98:	ldrd	r4, [r0, #136]	; 0x88
   12e9c:	mvn	ip, r5
   12ea0:	lsr	ip, ip, #31
   12ea4:	cmp	ip, r9, lsr #31
   12ea8:	beq	13250 <__assert_fail@plt+0x1e80>
   12eac:	subs	r4, r4, r8
   12eb0:	sbc	r5, r5, r9
   12eb4:	mov	ip, #0
   12eb8:	strd	r4, [r0, #136]	; 0x88
   12ebc:	ldrd	r4, [r0, #128]	; 0x80
   12ec0:	orr	r1, r1, ip
   12ec4:	mvn	ip, r5
   12ec8:	lsr	ip, ip, #31
   12ecc:	cmp	ip, fp, lsr #31
   12ed0:	beq	13210 <__assert_fail@plt+0x1e40>
   12ed4:	subs	r4, r4, sl
   12ed8:	sbc	r5, r5, fp
   12edc:	mov	ip, #0
   12ee0:	strd	r4, [r0, #128]	; 0x80
   12ee4:	ldrd	r4, [r0, #120]	; 0x78
   12ee8:	orr	r1, r1, ip
   12eec:	ldr	lr, [sp, #56]	; 0x38
   12ef0:	mvn	ip, r5
   12ef4:	lsr	ip, ip, #31
   12ef8:	cmp	ip, lr, lsr #31
   12efc:	beq	131c0 <__assert_fail@plt+0x1df0>
   12f00:	ldrd	r6, [sp, #52]	; 0x34
   12f04:	mov	ip, #0
   12f08:	subs	r6, r4, r6
   12f0c:	sbc	r7, r5, r7
   12f10:	mov	r4, r6
   12f14:	mov	r5, r7
   12f18:	strd	r4, [r0, #120]	; 0x78
   12f1c:	ldrd	r4, [r0, #112]	; 0x70
   12f20:	orr	r1, r1, ip
   12f24:	ldr	lr, [sp, #48]	; 0x30
   12f28:	mvn	ip, r5
   12f2c:	lsr	ip, ip, #31
   12f30:	cmp	ip, lr, lsr #31
   12f34:	beq	13170 <__assert_fail@plt+0x1da0>
   12f38:	ldrd	r6, [sp, #44]	; 0x2c
   12f3c:	mov	ip, #0
   12f40:	subs	r6, r4, r6
   12f44:	sbc	r7, r5, r7
   12f48:	mov	r4, r6
   12f4c:	mov	r5, r7
   12f50:	strd	r4, [r0, #112]	; 0x70
   12f54:	ldrd	r4, [r0, #104]	; 0x68
   12f58:	orr	r1, r1, ip
   12f5c:	ldr	lr, [sp, #40]	; 0x28
   12f60:	mvn	ip, r5
   12f64:	lsr	ip, ip, #31
   12f68:	cmp	ip, lr, lsr #31
   12f6c:	beq	13120 <__assert_fail@plt+0x1d50>
   12f70:	ldrd	r6, [sp, #36]	; 0x24
   12f74:	mov	ip, #0
   12f78:	subs	r6, r4, r6
   12f7c:	sbc	r7, r5, r7
   12f80:	mov	r4, r6
   12f84:	mov	r5, r7
   12f88:	strd	r4, [r0, #104]	; 0x68
   12f8c:	ldrd	r4, [r0, #96]	; 0x60
   12f90:	orr	r1, r1, ip
   12f94:	mvn	ip, r5
   12f98:	lsr	ip, ip, #31
   12f9c:	cmp	ip, r3, lsr #31
   12fa0:	beq	130e0 <__assert_fail@plt+0x1d10>
   12fa4:	subs	r2, r4, r2
   12fa8:	sbc	r3, r5, r3
   12fac:	mov	ip, #0
   12fb0:	strd	r2, [r0, #96]	; 0x60
   12fb4:	b	12db4 <__assert_fail@plt+0x19e4>
   12fb8:	cmp	lr, #0
   12fbc:	blt	13290 <__assert_fail@plt+0x1ec0>
   12fc0:	sub	r1, ip, #-2147483647	; 0x80000001
   12fc4:	cmp	lr, r1
   12fc8:	movle	r1, #0
   12fcc:	movgt	r1, #1
   12fd0:	cmp	r1, #0
   12fd4:	beq	12e8c <__assert_fail@plt+0x1abc>
   12fd8:	sub	ip, lr, ip
   12fdc:	str	ip, [r0, #144]	; 0x90
   12fe0:	mov	r1, #1
   12fe4:	b	12e98 <__assert_fail@plt+0x1ac8>
   12fe8:	rsb	r1, ip, #-2147483648	; 0x80000000
   12fec:	cmp	lr, r1
   12ff0:	movge	r1, #0
   12ff4:	movlt	r1, #1
   12ff8:	b	12b58 <__assert_fail@plt+0x1788>
   12ffc:	mov	r6, #0
   13000:	subs	r6, r6, r2
   13004:	mov	r7, #-2147483648	; 0x80000000
   13008:	sbc	r7, r7, r3
   1300c:	cmp	r4, r6
   13010:	sbcs	ip, r5, r7
   13014:	movlt	ip, #1
   13018:	movge	ip, #0
   1301c:	b	12d9c <__assert_fail@plt+0x19cc>
   13020:	ldrd	r8, [sp, #36]	; 0x24
   13024:	mov	r6, #0
   13028:	mov	r7, #-2147483648	; 0x80000000
   1302c:	subs	r8, r6, r8
   13030:	sbc	r9, r7, r9
   13034:	cmp	r4, r8
   13038:	sbcs	ip, r5, r9
   1303c:	movlt	ip, #1
   13040:	movge	ip, #0
   13044:	b	12d38 <__assert_fail@plt+0x1968>
   13048:	ldrd	r8, [sp, #44]	; 0x2c
   1304c:	mov	r6, #0
   13050:	mov	r7, #-2147483648	; 0x80000000
   13054:	subs	r8, r6, r8
   13058:	sbc	r9, r7, r9
   1305c:	cmp	r4, r8
   13060:	sbcs	ip, r5, r9
   13064:	movlt	ip, #1
   13068:	movge	ip, #0
   1306c:	b	12ccc <__assert_fail@plt+0x18fc>
   13070:	ldrd	r8, [sp, #52]	; 0x34
   13074:	mov	r6, #0
   13078:	mov	r7, #-2147483648	; 0x80000000
   1307c:	subs	r8, r6, r8
   13080:	sbc	r9, r7, r9
   13084:	cmp	r4, r8
   13088:	sbcs	ip, r5, r9
   1308c:	movlt	ip, #1
   13090:	movge	ip, #0
   13094:	b	12c60 <__assert_fail@plt+0x1890>
   13098:	mov	r6, #0
   1309c:	subs	r6, r6, sl
   130a0:	mov	r7, #-2147483648	; 0x80000000
   130a4:	sbc	r7, r7, fp
   130a8:	cmp	r4, r6
   130ac:	sbcs	ip, r5, r7
   130b0:	movlt	ip, #1
   130b4:	movge	ip, #0
   130b8:	b	12c00 <__assert_fail@plt+0x1830>
   130bc:	mov	r6, #0
   130c0:	subs	r6, r6, r8
   130c4:	mov	r7, #-2147483648	; 0x80000000
   130c8:	sbc	r7, r7, r9
   130cc:	cmp	r4, r6
   130d0:	sbcs	ip, r5, r7
   130d4:	movlt	ip, #1
   130d8:	movge	ip, #0
   130dc:	b	12ba8 <__assert_fail@plt+0x17d8>
   130e0:	cmp	r4, #0
   130e4:	sbcs	ip, r5, #0
   130e8:	blt	1333c <__assert_fail@plt+0x1f6c>
   130ec:	subs	r6, r2, #1
   130f0:	sbc	r7, r3, #-2147483648	; 0x80000000
   130f4:	cmp	r6, r4
   130f8:	sbcs	ip, r7, r5
   130fc:	movlt	ip, #1
   13100:	movge	ip, #0
   13104:	cmp	ip, #0
   13108:	beq	12fa4 <__assert_fail@plt+0x1bd4>
   1310c:	subs	r2, r4, r2
   13110:	sbc	r3, r5, r3
   13114:	mov	ip, #1
   13118:	strd	r2, [r0, #96]	; 0x60
   1311c:	b	12db4 <__assert_fail@plt+0x19e4>
   13120:	cmp	r4, #0
   13124:	sbcs	ip, r5, #0
   13128:	blt	1331c <__assert_fail@plt+0x1f4c>
   1312c:	ldrd	r6, [sp, #36]	; 0x24
   13130:	subs	r6, r6, #1
   13134:	sbc	r7, r7, #-2147483648	; 0x80000000
   13138:	cmp	r6, r4
   1313c:	sbcs	ip, r7, r5
   13140:	movlt	ip, #1
   13144:	movge	ip, #0
   13148:	cmp	ip, #0
   1314c:	beq	12f70 <__assert_fail@plt+0x1ba0>
   13150:	ldrd	r6, [sp, #36]	; 0x24
   13154:	mov	ip, #1
   13158:	subs	r6, r4, r6
   1315c:	sbc	r7, r5, r7
   13160:	mov	r4, r6
   13164:	mov	r5, r7
   13168:	strd	r4, [r0, #104]	; 0x68
   1316c:	b	12f8c <__assert_fail@plt+0x1bbc>
   13170:	cmp	r4, #0
   13174:	sbcs	ip, r5, #0
   13178:	blt	132fc <__assert_fail@plt+0x1f2c>
   1317c:	ldrd	r6, [sp, #44]	; 0x2c
   13180:	subs	r6, r6, #1
   13184:	sbc	r7, r7, #-2147483648	; 0x80000000
   13188:	cmp	r6, r4
   1318c:	sbcs	ip, r7, r5
   13190:	movlt	ip, #1
   13194:	movge	ip, #0
   13198:	cmp	ip, #0
   1319c:	beq	12f38 <__assert_fail@plt+0x1b68>
   131a0:	ldrd	r6, [sp, #44]	; 0x2c
   131a4:	mov	ip, #1
   131a8:	subs	r6, r4, r6
   131ac:	sbc	r7, r5, r7
   131b0:	mov	r4, r6
   131b4:	mov	r5, r7
   131b8:	strd	r4, [r0, #112]	; 0x70
   131bc:	b	12f54 <__assert_fail@plt+0x1b84>
   131c0:	cmp	r4, #0
   131c4:	sbcs	ip, r5, #0
   131c8:	blt	132dc <__assert_fail@plt+0x1f0c>
   131cc:	ldrd	r6, [sp, #52]	; 0x34
   131d0:	subs	r6, r6, #1
   131d4:	sbc	r7, r7, #-2147483648	; 0x80000000
   131d8:	cmp	r6, r4
   131dc:	sbcs	ip, r7, r5
   131e0:	movlt	ip, #1
   131e4:	movge	ip, #0
   131e8:	cmp	ip, #0
   131ec:	beq	12f00 <__assert_fail@plt+0x1b30>
   131f0:	ldrd	r6, [sp, #52]	; 0x34
   131f4:	mov	ip, #1
   131f8:	subs	r6, r4, r6
   131fc:	sbc	r7, r5, r7
   13200:	mov	r4, r6
   13204:	mov	r5, r7
   13208:	strd	r4, [r0, #120]	; 0x78
   1320c:	b	12f1c <__assert_fail@plt+0x1b4c>
   13210:	cmp	r4, #0
   13214:	sbcs	ip, r5, #0
   13218:	blt	132c0 <__assert_fail@plt+0x1ef0>
   1321c:	subs	r6, sl, #1
   13220:	sbc	r7, fp, #-2147483648	; 0x80000000
   13224:	cmp	r6, r4
   13228:	sbcs	ip, r7, r5
   1322c:	movlt	ip, #1
   13230:	movge	ip, #0
   13234:	cmp	ip, #0
   13238:	beq	12ed4 <__assert_fail@plt+0x1b04>
   1323c:	subs	r4, r4, sl
   13240:	sbc	r5, r5, fp
   13244:	mov	ip, #1
   13248:	strd	r4, [r0, #128]	; 0x80
   1324c:	b	12ee4 <__assert_fail@plt+0x1b14>
   13250:	cmp	r4, #0
   13254:	sbcs	ip, r5, #0
   13258:	blt	132a4 <__assert_fail@plt+0x1ed4>
   1325c:	subs	r6, r8, #1
   13260:	sbc	r7, r9, #-2147483648	; 0x80000000
   13264:	cmp	r6, r4
   13268:	sbcs	ip, r7, r5
   1326c:	movlt	ip, #1
   13270:	movge	ip, #0
   13274:	cmp	ip, #0
   13278:	beq	12eac <__assert_fail@plt+0x1adc>
   1327c:	subs	r4, r4, r8
   13280:	sbc	r5, r5, r9
   13284:	mov	ip, #1
   13288:	strd	r4, [r0, #136]	; 0x88
   1328c:	b	12ebc <__assert_fail@plt+0x1aec>
   13290:	add	r1, lr, #-2147483648	; 0x80000000
   13294:	cmp	r1, ip
   13298:	movge	r1, #0
   1329c:	movlt	r1, #1
   132a0:	b	12fd0 <__assert_fail@plt+0x1c00>
   132a4:	adds	r6, r4, #0
   132a8:	adc	r7, r5, #-2147483648	; 0x80000000
   132ac:	cmp	r6, r8
   132b0:	sbcs	ip, r7, r9
   132b4:	movlt	ip, #1
   132b8:	movge	ip, #0
   132bc:	b	13274 <__assert_fail@plt+0x1ea4>
   132c0:	adds	r6, r4, #0
   132c4:	adc	r7, r5, #-2147483648	; 0x80000000
   132c8:	cmp	r6, sl
   132cc:	sbcs	ip, r7, fp
   132d0:	movlt	ip, #1
   132d4:	movge	ip, #0
   132d8:	b	13234 <__assert_fail@plt+0x1e64>
   132dc:	ldrd	r8, [sp, #52]	; 0x34
   132e0:	adds	r6, r4, #0
   132e4:	adc	r7, r5, #-2147483648	; 0x80000000
   132e8:	cmp	r6, r8
   132ec:	sbcs	ip, r7, r9
   132f0:	movlt	ip, #1
   132f4:	movge	ip, #0
   132f8:	b	131e8 <__assert_fail@plt+0x1e18>
   132fc:	ldrd	r8, [sp, #44]	; 0x2c
   13300:	adds	r6, r4, #0
   13304:	adc	r7, r5, #-2147483648	; 0x80000000
   13308:	cmp	r6, r8
   1330c:	sbcs	ip, r7, r9
   13310:	movlt	ip, #1
   13314:	movge	ip, #0
   13318:	b	13198 <__assert_fail@plt+0x1dc8>
   1331c:	ldrd	r8, [sp, #36]	; 0x24
   13320:	adds	r6, r4, #0
   13324:	adc	r7, r5, #-2147483648	; 0x80000000
   13328:	cmp	r6, r8
   1332c:	sbcs	ip, r7, r9
   13330:	movlt	ip, #1
   13334:	movge	ip, #0
   13338:	b	13148 <__assert_fail@plt+0x1d78>
   1333c:	adds	r6, r4, #0
   13340:	adc	r7, r5, #-2147483648	; 0x80000000
   13344:	cmp	r6, r2
   13348:	sbcs	ip, r7, r3
   1334c:	movlt	ip, #1
   13350:	movge	ip, #0
   13354:	b	13104 <__assert_fail@plt+0x1d34>
   13358:	ldr	ip, [pc, #56]	; 13398 <__assert_fail@plt+0x1fc8>
   1335c:	push	{r4, lr}
   13360:	sub	sp, sp, #16
   13364:	ldr	r4, [ip]
   13368:	ldr	r1, [sp, #24]
   1336c:	ldr	lr, [pc, #40]	; 1339c <__assert_fail@plt+0x1fcc>
   13370:	eor	ip, r0, #1
   13374:	strd	r2, [sp]
   13378:	str	r1, [sp, #8]
   1337c:	mov	r0, r4
   13380:	add	r2, lr, ip
   13384:	mov	r1, #1
   13388:	bl	112ec <__fprintf_chk@plt>
   1338c:	mov	r0, #1
   13390:	add	sp, sp, #16
   13394:	pop	{r4, pc}
   13398:	andeq	r1, r3, r0, lsr #3
   1339c:	andeq	pc, r1, r8, lsl #4
   133a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133a4:	mov	r8, r0
   133a8:	ldr	ip, [sp, #32]
   133ac:	mov	r9, r1
   133b0:	cmp	ip, #2
   133b4:	mov	r4, r2
   133b8:	mov	r5, r3
   133bc:	ldrd	r6, [sp, #40]	; 0x28
   133c0:	bgt	1342c <__assert_fail@plt+0x205c>
   133c4:	cmp	r6, #0
   133c8:	sbcs	r3, r7, #0
   133cc:	blt	13538 <__assert_fail@plt+0x2168>
   133d0:	cmp	r4, #0
   133d4:	sbcs	r3, r5, #0
   133d8:	blt	1349c <__assert_fail@plt+0x20cc>
   133dc:	add	r3, pc, #364	; 0x16c
   133e0:	ldrd	r2, [r3]
   133e4:	cmp	r2, r4
   133e8:	sbcs	r3, r3, r5
   133ec:	bge	134d0 <__assert_fail@plt+0x2100>
   133f0:	mov	r1, #60	; 0x3c
   133f4:	cmp	r9, #0
   133f8:	umull	r2, r3, r4, r1
   133fc:	mov	ip, #1
   13400:	mla	r3, r1, r5, r3
   13404:	beq	134e8 <__assert_fail@plt+0x2118>
   13408:	cmp	r2, #0
   1340c:	sbcs	r1, r3, #0
   13410:	blt	1351c <__assert_fail@plt+0x214c>
   13414:	subs	r2, r2, r6
   13418:	sbc	r3, r3, r7
   1341c:	cmp	ip, #0
   13420:	beq	13474 <__assert_fail@plt+0x20a4>
   13424:	mov	r0, #0
   13428:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1342c:	cmp	r6, #0
   13430:	sbcs	r3, r7, #0
   13434:	bge	133d0 <__assert_fail@plt+0x2000>
   13438:	mov	r2, #100	; 0x64
   1343c:	mov	r3, #0
   13440:	mov	r0, r4
   13444:	mov	r1, r5
   13448:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   1344c:	mov	ip, #60	; 0x3c
   13450:	mov	r2, #100	; 0x64
   13454:	mov	r3, #0
   13458:	umull	r6, r7, r0, ip
   1345c:	mov	r0, r4
   13460:	mla	r7, ip, r1, r7
   13464:	mov	r1, r5
   13468:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   1346c:	adds	r2, r2, r6
   13470:	adc	r3, r3, r7
   13474:	adds	r0, r2, #1440	; 0x5a0
   13478:	adc	r1, r3, #0
   1347c:	cmp	r1, #0
   13480:	cmpeq	r0, #2880	; 0xb40
   13484:	bhi	13424 <__assert_fail@plt+0x2054>
   13488:	rsb	r2, r2, r2, lsl #4
   1348c:	mov	r0, #1
   13490:	lsl	r2, r2, #2
   13494:	str	r2, [r8]
   13498:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1349c:	mvn	r3, #0
   134a0:	mvn	r2, #0
   134a4:	cmp	r5, r3
   134a8:	cmpeq	r4, r2
   134ac:	beq	134d0 <__assert_fail@plt+0x2100>
   134b0:	mov	r3, r5
   134b4:	mov	r2, r4
   134b8:	mov	r0, #0
   134bc:	mov	r1, #-2147483648	; 0x80000000
   134c0:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   134c4:	cmp	r0, #60	; 0x3c
   134c8:	sbcs	r3, r1, #0
   134cc:	blt	133f0 <__assert_fail@plt+0x2020>
   134d0:	mov	r1, #60	; 0x3c
   134d4:	cmp	r9, #0
   134d8:	umull	r2, r3, r4, r1
   134dc:	mov	ip, #0
   134e0:	mla	r3, r1, r5, r3
   134e4:	bne	13408 <__assert_fail@plt+0x2038>
   134e8:	cmp	r2, #0
   134ec:	sbcs	r1, r3, #0
   134f0:	blt	13510 <__assert_fail@plt+0x2140>
   134f4:	mvn	r0, #0
   134f8:	subs	r0, r0, r6
   134fc:	mvn	r1, #-2147483648	; 0x80000000
   13500:	sbc	r1, r1, r7
   13504:	cmp	r0, r2
   13508:	sbcs	r1, r1, r3
   1350c:	blt	13424 <__assert_fail@plt+0x2054>
   13510:	adds	r2, r2, r6
   13514:	adc	r3, r3, r7
   13518:	b	1341c <__assert_fail@plt+0x204c>
   1351c:	adds	r0, r2, #0
   13520:	adc	r1, r3, #-2147483648	; 0x80000000
   13524:	cmp	r0, r6
   13528:	sbcs	r1, r1, r7
   1352c:	bge	13414 <__assert_fail@plt+0x2044>
   13530:	mov	r0, #0
   13534:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13538:	mov	r3, #100	; 0x64
   1353c:	mul	r2, r3, r5
   13540:	umull	r4, r5, r4, r3
   13544:	add	r5, r2, r5
   13548:	b	13438 <__assert_fail@plt+0x2068>
   1354c:	nop			; (mov r0, r0)
   13550:	eorcs	r2, r2, #536870914	; 0x20000002
   13554:	eoreq	r2, r2, #536870914	; 0x20000002
   13558:	push	{r4, r5, r6, r7, r8, lr}
   1355c:	mov	r7, r0
   13560:	ldr	r5, [pc, #172]	; 13614 <__assert_fail@plt+0x2244>
   13564:	ldr	r3, [pc, #172]	; 13618 <__assert_fail@plt+0x2248>
   13568:	mov	r6, r1
   1356c:	b	1357c <__assert_fail@plt+0x21ac>
   13570:	ldr	r3, [r5, #12]!
   13574:	cmp	r3, #0
   13578:	beq	1359c <__assert_fail@plt+0x21cc>
   1357c:	mov	r1, r3
   13580:	mov	r0, r6
   13584:	bl	110a0 <strcmp@plt>
   13588:	mov	r4, r5
   1358c:	cmp	r0, #0
   13590:	bne	13570 <__assert_fail@plt+0x21a0>
   13594:	mov	r0, r4
   13598:	pop	{r4, r5, r6, r7, r8, pc}
   1359c:	ldr	r1, [r7, #192]	; 0xc0
   135a0:	add	r5, r7, #192	; 0xc0
   135a4:	cmp	r1, #0
   135a8:	bne	135ec <__assert_fail@plt+0x221c>
   135ac:	ldr	r3, [pc, #104]	; 1361c <__assert_fail@plt+0x224c>
   135b0:	ldr	r1, [pc, #104]	; 13620 <__assert_fail@plt+0x2250>
   135b4:	b	135c4 <__assert_fail@plt+0x21f4>
   135b8:	ldr	r1, [r4, #12]
   135bc:	cmp	r1, #0
   135c0:	beq	13608 <__assert_fail@plt+0x2238>
   135c4:	mov	r0, r6
   135c8:	mov	r4, r3
   135cc:	bl	110a0 <strcmp@plt>
   135d0:	add	r3, r4, #12
   135d4:	cmp	r0, #0
   135d8:	bne	135b8 <__assert_fail@plt+0x21e8>
   135dc:	b	13594 <__assert_fail@plt+0x21c4>
   135e0:	ldr	r1, [r5, #12]!
   135e4:	cmp	r1, #0
   135e8:	beq	135ac <__assert_fail@plt+0x21dc>
   135ec:	mov	r0, r6
   135f0:	bl	110a0 <strcmp@plt>
   135f4:	mov	r4, r5
   135f8:	cmp	r0, #0
   135fc:	bne	135e0 <__assert_fail@plt+0x2210>
   13600:	mov	r0, r4
   13604:	pop	{r4, r5, r6, r7, r8, pc}
   13608:	mov	r4, r1
   1360c:	mov	r0, r4
   13610:	pop	{r4, r5, r6, r7, r8, pc}
   13614:	andeq	lr, r1, ip, asr #13
   13618:	andeq	pc, r1, r4, lsl r2	; <UNPREDICTABLE>
   1361c:	strdeq	lr, [r1], -ip
   13620:	andeq	pc, r1, r8, lsl r2	; <UNPREDICTABLE>
   13624:	push	{r4, r5, lr}
   13628:	mov	r2, #5
   1362c:	sub	sp, sp, #12
   13630:	mov	r5, r0
   13634:	mov	r4, r1
   13638:	mov	r0, #0
   1363c:	ldr	r1, [pc, #376]	; 137bc <__assert_fail@plt+0x23ec>
   13640:	bl	11130 <dcgettext@plt>
   13644:	mov	r1, r5
   13648:	bl	12abc <__assert_fail@plt+0x16ec>
   1364c:	ldrd	r2, [r4, #96]	; 0x60
   13650:	orrs	r1, r2, r3
   13654:	bne	13728 <__assert_fail@plt+0x2358>
   13658:	ldrd	r2, [r4, #104]	; 0x68
   1365c:	orrs	r1, r2, r3
   13660:	beq	136cc <__assert_fail@plt+0x22fc>
   13664:	mov	r0, #0
   13668:	ldr	r1, [pc, #336]	; 137c0 <__assert_fail@plt+0x23f0>
   1366c:	str	r1, [sp]
   13670:	bl	13358 <__assert_fail@plt+0x1f88>
   13674:	ldrd	r2, [r4, #112]	; 0x70
   13678:	orrs	r1, r2, r3
   1367c:	bne	13750 <__assert_fail@plt+0x2380>
   13680:	ldrd	r2, [r4, #120]	; 0x78
   13684:	orrs	r1, r2, r3
   13688:	bne	13790 <__assert_fail@plt+0x23c0>
   1368c:	ldrd	r2, [r4, #128]	; 0x80
   13690:	orrs	r1, r2, r3
   13694:	bne	13780 <__assert_fail@plt+0x23b0>
   13698:	ldrd	r2, [r4, #136]	; 0x88
   1369c:	orrs	r1, r2, r3
   136a0:	bne	13770 <__assert_fail@plt+0x23a0>
   136a4:	ldr	r2, [r4, #144]	; 0x90
   136a8:	asr	r3, r2, #31
   136ac:	orrs	r1, r2, r3
   136b0:	bne	13760 <__assert_fail@plt+0x2390>
   136b4:	ldr	r3, [pc, #264]	; 137c4 <__assert_fail@plt+0x23f4>
   136b8:	mov	r0, #10
   136bc:	ldr	r1, [r3]
   136c0:	add	sp, sp, #12
   136c4:	pop	{r4, r5, lr}
   136c8:	b	11340 <fputc@plt>
   136cc:	ldrd	r2, [r4, #112]	; 0x70
   136d0:	orrs	r1, r2, r3
   136d4:	bne	137a0 <__assert_fail@plt+0x23d0>
   136d8:	ldrd	r2, [r4, #120]	; 0x78
   136dc:	orrs	r1, r2, r3
   136e0:	bne	137b4 <__assert_fail@plt+0x23e4>
   136e4:	ldrd	r0, [r4, #128]	; 0x80
   136e8:	orrs	r1, r0, r1
   136ec:	bne	137b4 <__assert_fail@plt+0x23e4>
   136f0:	ldrd	r0, [r4, #136]	; 0x88
   136f4:	orrs	r1, r0, r1
   136f8:	bne	137b4 <__assert_fail@plt+0x23e4>
   136fc:	ldr	r0, [r4, #144]	; 0x90
   13700:	cmp	r0, #0
   13704:	bne	137b4 <__assert_fail@plt+0x23e4>
   13708:	mov	r2, #5
   1370c:	ldr	r1, [pc, #180]	; 137c8 <__assert_fail@plt+0x23f8>
   13710:	bl	11130 <dcgettext@plt>
   13714:	ldr	r3, [pc, #168]	; 137c4 <__assert_fail@plt+0x23f4>
   13718:	ldr	r1, [r3]
   1371c:	add	sp, sp, #12
   13720:	pop	{r4, r5, lr}
   13724:	b	11388 <fputs@plt>
   13728:	ldr	r1, [pc, #156]	; 137cc <__assert_fail@plt+0x23fc>
   1372c:	mov	r0, #0
   13730:	str	r1, [sp]
   13734:	bl	13358 <__assert_fail@plt+0x1f88>
   13738:	ldrd	r2, [r4, #104]	; 0x68
   1373c:	orrs	r1, r2, r3
   13740:	bne	13668 <__assert_fail@plt+0x2298>
   13744:	ldrd	r2, [r4, #112]	; 0x70
   13748:	orrs	r1, r2, r3
   1374c:	beq	13680 <__assert_fail@plt+0x22b0>
   13750:	ldr	r1, [pc, #120]	; 137d0 <__assert_fail@plt+0x2400>
   13754:	str	r1, [sp]
   13758:	bl	13358 <__assert_fail@plt+0x1f88>
   1375c:	b	13680 <__assert_fail@plt+0x22b0>
   13760:	ldr	r1, [pc, #108]	; 137d4 <__assert_fail@plt+0x2404>
   13764:	str	r1, [sp]
   13768:	bl	13358 <__assert_fail@plt+0x1f88>
   1376c:	b	136b4 <__assert_fail@plt+0x22e4>
   13770:	ldr	r1, [pc, #96]	; 137d8 <__assert_fail@plt+0x2408>
   13774:	str	r1, [sp]
   13778:	bl	13358 <__assert_fail@plt+0x1f88>
   1377c:	b	136a4 <__assert_fail@plt+0x22d4>
   13780:	ldr	r1, [pc, #84]	; 137dc <__assert_fail@plt+0x240c>
   13784:	str	r1, [sp]
   13788:	bl	13358 <__assert_fail@plt+0x1f88>
   1378c:	b	13698 <__assert_fail@plt+0x22c8>
   13790:	ldr	r1, [pc, #72]	; 137e0 <__assert_fail@plt+0x2410>
   13794:	str	r1, [sp]
   13798:	bl	13358 <__assert_fail@plt+0x1f88>
   1379c:	b	1368c <__assert_fail@plt+0x22bc>
   137a0:	ldr	r1, [pc, #40]	; 137d0 <__assert_fail@plt+0x2400>
   137a4:	mov	r0, #0
   137a8:	str	r1, [sp]
   137ac:	bl	13358 <__assert_fail@plt+0x1f88>
   137b0:	b	13680 <__assert_fail@plt+0x22b0>
   137b4:	mov	r0, #0
   137b8:	b	13684 <__assert_fail@plt+0x22b4>
   137bc:	andeq	pc, r1, ip, lsl r2	; <UNPREDICTABLE>
   137c0:	andeq	pc, r1, r8, asr #4
   137c4:	andeq	r1, r3, r0, lsr #3
   137c8:	andeq	pc, r1, r0, lsr r2	; <UNPREDICTABLE>
   137cc:	andeq	pc, r1, r0, asr #4
   137d0:	andeq	pc, r1, r4, asr r2	; <UNPREDICTABLE>
   137d4:	andeq	pc, r1, ip, ror #4
   137d8:	andeq	pc, r1, r0, ror r2	; <UNPREDICTABLE>
   137dc:	andeq	pc, r1, r4, ror #4
   137e0:	andeq	pc, r1, ip, asr r2	; <UNPREDICTABLE>
   137e4:	push	{r4, r5, r6, lr}
   137e8:	sub	sp, sp, #40	; 0x28
   137ec:	mov	r4, r2
   137f0:	mov	r2, #0
   137f4:	mov	r3, r0
   137f8:	mov	r5, r1
   137fc:	str	r2, [sp, #4]
   13800:	str	r2, [sp]
   13804:	mov	r0, r4
   13808:	ldr	r2, [pc, #116]	; 13884 <__assert_fail@plt+0x24b4>
   1380c:	mov	r1, #100	; 0x64
   13810:	bl	1d3e4 <__assert_fail@plt+0xc014>
   13814:	adds	r3, r5, #0
   13818:	movne	r3, #1
   1381c:	cmp	r0, #99	; 0x63
   13820:	movgt	r3, #0
   13824:	cmp	r3, #0
   13828:	beq	13838 <__assert_fail@plt+0x2468>
   1382c:	ldr	r3, [r5, #176]	; 0xb0
   13830:	cmp	r3, #0
   13834:	bne	13844 <__assert_fail@plt+0x2474>
   13838:	mov	r0, r4
   1383c:	add	sp, sp, #40	; 0x28
   13840:	pop	{r4, r5, r6, pc}
   13844:	mov	r6, r0
   13848:	add	r1, sp, #12
   1384c:	ldr	r0, [r5, #24]
   13850:	bl	12998 <__assert_fail@plt+0x15c8>
   13854:	ldr	r3, [pc, #44]	; 13888 <__assert_fail@plt+0x24b8>
   13858:	add	ip, r4, r6
   1385c:	str	r3, [sp]
   13860:	rsb	r1, r6, #100	; 0x64
   13864:	mvn	r3, #0
   13868:	mov	r2, #1
   1386c:	str	r0, [sp, #4]
   13870:	mov	r0, ip
   13874:	bl	113c4 <__snprintf_chk@plt>
   13878:	mov	r0, r4
   1387c:	add	sp, sp, #40	; 0x28
   13880:	pop	{r4, r5, r6, pc}
   13884:	andeq	pc, r1, r8, ror r2	; <UNPREDICTABLE>
   13888:	muleq	r1, r4, r2
   1388c:	push	{r4, r5, lr}
   13890:	mov	r4, r0
   13894:	ldrb	r0, [r0, #188]	; 0xbc
   13898:	sub	sp, sp, #20
   1389c:	mov	r5, r1
   138a0:	cmp	r0, #0
   138a4:	beq	13900 <__assert_fail@plt+0x2530>
   138a8:	ldrd	r0, [r4, #8]
   138ac:	adds	r2, r0, #1
   138b0:	adc	r3, r1, #0
   138b4:	cmp	r3, #0
   138b8:	cmpeq	r2, #13
   138bc:	bls	13948 <__assert_fail@plt+0x2578>
   138c0:	ldr	r3, [pc, #180]	; 1397c <__assert_fail@plt+0x25ac>
   138c4:	strd	r0, [sp, #8]
   138c8:	str	r3, [sp]
   138cc:	mov	r2, #1
   138d0:	mvn	r3, #0
   138d4:	mov	r1, #100	; 0x64
   138d8:	mov	r0, r5
   138dc:	bl	113c4 <__snprintf_chk@plt>
   138e0:	ldr	r3, [r4, #16]
   138e4:	cmp	r3, #6
   138e8:	bhi	138f4 <__assert_fail@plt+0x2524>
   138ec:	cmp	r0, #99	; 0x63
   138f0:	bls	1396c <__assert_fail@plt+0x259c>
   138f4:	mov	r0, r5
   138f8:	add	sp, sp, #20
   138fc:	pop	{r4, r5, pc}
   13900:	strb	r0, [r1]
   13904:	ldr	r3, [r4, #16]
   13908:	cmp	r3, #6
   1390c:	bhi	138f4 <__assert_fail@plt+0x2524>
   13910:	mov	r1, #100	; 0x64
   13914:	mov	r2, #1
   13918:	ldr	ip, [pc, #96]	; 13980 <__assert_fail@plt+0x25b0>
   1391c:	ldr	lr, [pc, #96]	; 13984 <__assert_fail@plt+0x25b4>
   13920:	add	r3, ip, r3, lsl #2
   13924:	add	r2, r2, lr
   13928:	add	r0, r5, r0
   1392c:	stm	sp, {r2, r3}
   13930:	mvn	r3, #0
   13934:	mov	r2, #1
   13938:	bl	113c4 <__snprintf_chk@plt>
   1393c:	mov	r0, r5
   13940:	add	sp, sp, #20
   13944:	pop	{r4, r5, pc}
   13948:	add	r1, r2, r2, lsl #2
   1394c:	ldr	r3, [pc, #52]	; 13988 <__assert_fail@plt+0x25b8>
   13950:	add	r2, r2, r1, lsl #1
   13954:	add	r3, r3, r2
   13958:	mov	r1, #100	; 0x64
   1395c:	ldr	r2, [pc, #40]	; 1398c <__assert_fail@plt+0x25bc>
   13960:	mov	r0, r5
   13964:	bl	112b0 <snprintf@plt>
   13968:	b	138e0 <__assert_fail@plt+0x2510>
   1396c:	clz	r2, r0
   13970:	rsb	r1, r0, #100	; 0x64
   13974:	lsr	r2, r2, #5
   13978:	b	13918 <__assert_fail@plt+0x2548>
   1397c:	muleq	r1, ip, r2
   13980:	ldrdeq	lr, [r1], -r8
   13984:	andeq	lr, r1, ip, lsr #13
   13988:	andeq	lr, r1, ip, lsr r9
   1398c:	andeq	lr, r1, r8, asr #13
   13990:	push	{r4, r5, r6, r7, r8, r9, lr}
   13994:	mov	r2, #5
   13998:	sub	sp, sp, #132	; 0x84
   1399c:	mov	r5, r0
   139a0:	mov	r4, r1
   139a4:	mov	r0, #0
   139a8:	ldr	r1, [pc, #796]	; 13ccc <__assert_fail@plt+0x28fc>
   139ac:	bl	11130 <dcgettext@plt>
   139b0:	mov	r1, r5
   139b4:	bl	12abc <__assert_fail@plt+0x16ec>
   139b8:	ldr	r3, [r4, #156]	; 0x9c
   139bc:	cmp	r3, #0
   139c0:	beq	139d0 <__assert_fail@plt+0x2600>
   139c4:	ldrb	r3, [r4, #182]	; 0xb6
   139c8:	cmp	r3, #0
   139cc:	beq	13be0 <__assert_fail@plt+0x2810>
   139d0:	ldrb	r2, [r4, #180]	; 0xb4
   139d4:	ldrb	r3, [r4, #187]	; 0xbb
   139d8:	cmp	r2, r3
   139dc:	beq	13b7c <__assert_fail@plt+0x27ac>
   139e0:	ldr	r5, [pc, #744]	; 13cd0 <__assert_fail@plt+0x2900>
   139e4:	mov	r2, #5
   139e8:	ldr	r1, [pc, #740]	; 13cd4 <__assert_fail@plt+0x2904>
   139ec:	mov	r0, #0
   139f0:	ldr	r7, [r5]
   139f4:	bl	11130 <dcgettext@plt>
   139f8:	ldrd	r2, [r4, #40]	; 0x28
   139fc:	mov	r1, #1
   13a00:	mov	r6, r1
   13a04:	strd	r2, [sp]
   13a08:	mov	r2, r0
   13a0c:	mov	r0, r7
   13a10:	bl	112ec <__fprintf_chk@plt>
   13a14:	ldrb	r3, [r4, #180]	; 0xb4
   13a18:	strb	r3, [r4, #187]	; 0xbb
   13a1c:	ldr	r3, [r4, #172]	; 0xac
   13a20:	cmp	r3, #0
   13a24:	beq	13a34 <__assert_fail@plt+0x2664>
   13a28:	ldrb	r3, [r4, #185]	; 0xb9
   13a2c:	cmp	r3, #0
   13a30:	beq	13c34 <__assert_fail@plt+0x2864>
   13a34:	ldr	r3, [r4, #160]	; 0xa0
   13a38:	cmp	r3, #0
   13a3c:	beq	13a4c <__assert_fail@plt+0x267c>
   13a40:	ldrb	r3, [r4, #183]	; 0xb7
   13a44:	cmp	r3, #0
   13a48:	beq	13b1c <__assert_fail@plt+0x274c>
   13a4c:	ldr	r3, [r4, #164]	; 0xa4
   13a50:	cmp	r3, #0
   13a54:	beq	13a64 <__assert_fail@plt+0x2694>
   13a58:	ldrb	r3, [r4, #184]	; 0xb8
   13a5c:	cmp	r3, #0
   13a60:	beq	13ad8 <__assert_fail@plt+0x2708>
   13a64:	ldr	r3, [r4, #176]	; 0xb0
   13a68:	cmp	r3, #0
   13a6c:	beq	13a7c <__assert_fail@plt+0x26ac>
   13a70:	ldrb	r3, [r4, #186]	; 0xba
   13a74:	cmp	r3, #0
   13a78:	beq	13b88 <__assert_fail@plt+0x27b8>
   13a7c:	ldrb	r3, [r4, #152]	; 0x98
   13a80:	cmp	r3, #0
   13a84:	beq	13ac4 <__assert_fail@plt+0x26f4>
   13a88:	ldr	r3, [r4, #88]	; 0x58
   13a8c:	cmp	r6, #0
   13a90:	mov	r6, r3
   13a94:	asr	r7, r3, #31
   13a98:	bne	13bd0 <__assert_fail@plt+0x2800>
   13a9c:	mov	r2, #5
   13aa0:	ldr	r1, [pc, #560]	; 13cd8 <__assert_fail@plt+0x2908>
   13aa4:	mov	r0, #0
   13aa8:	ldr	r4, [r5]
   13aac:	bl	11130 <dcgettext@plt>
   13ab0:	strd	r6, [sp]
   13ab4:	mov	r1, #1
   13ab8:	mov	r2, r0
   13abc:	mov	r0, r4
   13ac0:	bl	112ec <__fprintf_chk@plt>
   13ac4:	ldr	r1, [r5]
   13ac8:	mov	r0, #10
   13acc:	bl	11340 <fputc@plt>
   13ad0:	add	sp, sp, #132	; 0x84
   13ad4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13ad8:	ldr	ip, [r4, #168]	; 0xa8
   13adc:	ldr	r3, [pc, #504]	; 13cdc <__assert_fail@plt+0x290c>
   13ae0:	ldr	r1, [pc, #504]	; 13ce0 <__assert_fail@plt+0x2910>
   13ae4:	cmp	ip, #0
   13ae8:	ldr	r2, [pc, #500]	; 13ce4 <__assert_fail@plt+0x2914>
   13aec:	moveq	r1, r3
   13af0:	eor	r6, r6, #1
   13af4:	ldr	r3, [r4, #20]
   13af8:	ldr	r0, [r5]
   13afc:	add	r2, r2, r6
   13b00:	str	r1, [sp]
   13b04:	mov	r1, #1
   13b08:	bl	112ec <__fprintf_chk@plt>
   13b0c:	mov	r3, #1
   13b10:	mov	r6, r3
   13b14:	strb	r3, [r4, #184]	; 0xb8
   13b18:	b	13a64 <__assert_fail@plt+0x2694>
   13b1c:	cmp	r6, #0
   13b20:	bne	13c94 <__assert_fail@plt+0x28c4>
   13b24:	mov	r2, #5
   13b28:	ldr	r1, [pc, #440]	; 13ce8 <__assert_fail@plt+0x2918>
   13b2c:	mov	r0, #0
   13b30:	ldr	r8, [r5]
   13b34:	bl	11130 <dcgettext@plt>
   13b38:	add	r1, sp, #28
   13b3c:	mov	r9, r0
   13b40:	mov	r0, r4
   13b44:	bl	1388c <__assert_fail@plt+0x24bc>
   13b48:	ldrd	r6, [r4, #8]
   13b4c:	ldr	r3, [r4, #16]
   13b50:	mov	r2, r9
   13b54:	strd	r6, [sp]
   13b58:	str	r3, [sp, #8]
   13b5c:	mov	r1, #1
   13b60:	mov	r3, r0
   13b64:	mov	r0, r8
   13b68:	bl	112ec <__fprintf_chk@plt>
   13b6c:	mov	r3, #1
   13b70:	mov	r6, r3
   13b74:	strb	r3, [r4, #183]	; 0xb7
   13b78:	b	13a4c <__assert_fail@plt+0x267c>
   13b7c:	mov	r6, #0
   13b80:	ldr	r5, [pc, #328]	; 13cd0 <__assert_fail@plt+0x2900>
   13b84:	b	13a1c <__assert_fail@plt+0x264c>
   13b88:	add	r1, sp, #28
   13b8c:	ldr	r0, [r4, #24]
   13b90:	ldr	r7, [r5]
   13b94:	bl	12998 <__assert_fail@plt+0x15c8>
   13b98:	ldr	r2, [pc, #332]	; 13cec <__assert_fail@plt+0x291c>
   13b9c:	eor	r6, r6, #1
   13ba0:	add	r2, r2, r6
   13ba4:	mov	r1, #1
   13ba8:	mov	r3, r0
   13bac:	mov	r0, r7
   13bb0:	bl	112ec <__fprintf_chk@plt>
   13bb4:	ldrb	r3, [r4, #152]	; 0x98
   13bb8:	mov	r2, #1
   13bbc:	strb	r2, [r4, #186]	; 0xba
   13bc0:	cmp	r3, #0
   13bc4:	beq	13ac4 <__assert_fail@plt+0x26f4>
   13bc8:	ldr	r6, [r4, #88]	; 0x58
   13bcc:	asr	r7, r6, #31
   13bd0:	ldr	r1, [r5]
   13bd4:	mov	r0, #32
   13bd8:	bl	11340 <fputc@plt>
   13bdc:	b	13a9c <__assert_fail@plt+0x26cc>
   13be0:	ldrd	r2, [r4, #64]	; 0x40
   13be4:	ldrd	r6, [r4, #40]	; 0x28
   13be8:	ldrd	r8, [r4, #56]	; 0x38
   13bec:	ldr	r5, [pc, #220]	; 13cd0 <__assert_fail@plt+0x2900>
   13bf0:	mov	r1, #1
   13bf4:	ldr	r0, [r5]
   13bf8:	strd	r2, [sp, #16]
   13bfc:	strd	r6, [sp]
   13c00:	ldr	r2, [pc, #232]	; 13cf0 <__assert_fail@plt+0x2920>
   13c04:	strd	r8, [sp, #8]
   13c08:	bl	112ec <__fprintf_chk@plt>
   13c0c:	ldrb	r2, [r4, #180]	; 0xb4
   13c10:	ldrb	r3, [r4, #187]	; 0xbb
   13c14:	mov	r6, #1
   13c18:	strb	r6, [r4, #182]	; 0xb6
   13c1c:	cmp	r2, r3
   13c20:	beq	13a1c <__assert_fail@plt+0x264c>
   13c24:	ldr	r1, [r5]
   13c28:	mov	r0, #32
   13c2c:	bl	11340 <fputc@plt>
   13c30:	b	139e4 <__assert_fail@plt+0x2614>
   13c34:	ldr	r3, [r4, #88]	; 0x58
   13c38:	ldr	r2, [pc, #180]	; 13cf4 <__assert_fail@plt+0x2924>
   13c3c:	ldrd	r0, [r4, #80]	; 0x50
   13c40:	ldrd	r8, [r4, #72]	; 0x48
   13c44:	eor	r6, r6, #1
   13c48:	asr	r7, r3, #31
   13c4c:	add	r2, r2, r6
   13c50:	mov	r6, r3
   13c54:	strd	r0, [sp, #8]
   13c58:	mov	r1, #1
   13c5c:	ldr	r0, [r5]
   13c60:	strd	r6, [sp, #16]
   13c64:	strd	r8, [sp]
   13c68:	bl	112ec <__fprintf_chk@plt>
   13c6c:	ldr	r3, [r4, #92]	; 0x5c
   13c70:	cmp	r3, #0
   13c74:	bne	13ca4 <__assert_fail@plt+0x28d4>
   13c78:	ldr	r1, [r4, #28]
   13c7c:	cmp	r1, #1
   13c80:	beq	13cb8 <__assert_fail@plt+0x28e8>
   13c84:	mov	r3, #1
   13c88:	mov	r6, r3
   13c8c:	strb	r3, [r4, #185]	; 0xb9
   13c90:	b	13a34 <__assert_fail@plt+0x2664>
   13c94:	ldr	r1, [r5]
   13c98:	mov	r0, #32
   13c9c:	bl	11340 <fputc@plt>
   13ca0:	b	13b24 <__assert_fail@plt+0x2754>
   13ca4:	ldr	r2, [pc, #76]	; 13cf8 <__assert_fail@plt+0x2928>
   13ca8:	mov	r1, #1
   13cac:	ldr	r0, [r5]
   13cb0:	bl	112ec <__fprintf_chk@plt>
   13cb4:	b	13c78 <__assert_fail@plt+0x28a8>
   13cb8:	ldr	r3, [r5]
   13cbc:	mov	r2, #2
   13cc0:	ldr	r0, [pc, #52]	; 13cfc <__assert_fail@plt+0x292c>
   13cc4:	bl	11184 <fwrite@plt>
   13cc8:	b	13c84 <__assert_fail@plt+0x28b4>
   13ccc:	andeq	pc, r1, ip, lsl r2	; <UNPREDICTABLE>
   13cd0:	andeq	r1, r3, r0, lsr #3
   13cd4:	andeq	pc, r1, ip, asr #5
   13cd8:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   13cdc:	andeq	pc, r1, ip, ror #27
   13ce0:	andeq	pc, r1, r4, lsr #5
   13ce4:	andeq	pc, r1, r0, lsr #6
   13ce8:	andeq	pc, r1, r0, lsl #6
   13cec:	andeq	pc, r1, ip, lsr #6
   13cf0:	andeq	pc, r1, ip, lsr #5
   13cf4:	ldrdeq	pc, [r1], -ip
   13cf8:	strdeq	pc, [r1], -r4
   13cfc:	strdeq	pc, [r1], -ip
   13d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d04:	sub	sp, sp, #1424	; 0x590
   13d08:	sub	sp, sp, #4
   13d0c:	ldr	sl, [pc, #3540]	; 14ae8 <__assert_fail@plt+0x3718>
   13d10:	mov	r3, #0
   13d14:	add	fp, sp, #152	; 0x98
   13d18:	mov	r8, #38	; 0x26
   13d1c:	add	r9, sp, #304	; 0x130
   13d20:	mov	r7, r3
   13d24:	str	r3, [sp, #100]	; 0x64
   13d28:	strh	r3, [sp, #152]	; 0x98
   13d2c:	mvn	r3, #1
   13d30:	str	r0, [sp, #60]	; 0x3c
   13d34:	str	r3, [sp, #56]	; 0x38
   13d38:	cmn	r8, #93	; 0x5d
   13d3c:	beq	13d88 <__assert_fail@plt+0x29b8>
   13d40:	ldr	r3, [sp, #56]	; 0x38
   13d44:	cmn	r3, #2
   13d48:	beq	14078 <__assert_fail@plt+0x2ca8>
   13d4c:	ldr	r2, [sp, #56]	; 0x38
   13d50:	cmp	r2, #0
   13d54:	ble	1411c <__assert_fail@plt+0x2d4c>
   13d58:	ldr	r3, [pc, #3468]	; 14aec <__assert_fail@plt+0x371c>
   13d5c:	cmp	r2, r3
   13d60:	movgt	r2, #2
   13d64:	ble	14068 <__assert_fail@plt+0x2c98>
   13d68:	add	r8, r2, r8
   13d6c:	cmp	r8, #112	; 0x70
   13d70:	bhi	13d88 <__assert_fail@plt+0x29b8>
   13d74:	add	r8, sl, r8
   13d78:	add	r3, r8, #2256	; 0x8d0
   13d7c:	ldrsb	r3, [r3, #4]
   13d80:	cmp	r2, r3
   13d84:	beq	14144 <__assert_fail@plt+0x2d74>
   13d88:	add	r3, sl, r7
   13d8c:	ldrb	lr, [r3, #2492]	; 0x9bc
   13d90:	cmp	lr, #0
   13d94:	beq	13f9c <__assert_fail@plt+0x2bcc>
   13d98:	add	r3, sl, lr
   13d9c:	add	r6, sp, #256	; 0x100
   13da0:	ldrb	r3, [r3, #2608]	; 0xa30
   13da4:	sub	r8, r6, #8
   13da8:	rsb	ip, r3, #1
   13dac:	str	r3, [sp, #120]	; 0x78
   13db0:	rsb	ip, ip, ip, lsl #3
   13db4:	sub	r3, lr, #4
   13db8:	add	ip, r9, ip, lsl #3
   13dbc:	str	r3, [sp, #104]	; 0x68
   13dc0:	mov	r7, ip
   13dc4:	ldr	r3, [ip, #8]
   13dc8:	ldrd	r4, [ip, #16]
   13dcc:	str	r3, [sp, #76]	; 0x4c
   13dd0:	ldm	r7!, {r0, r1, r2, r3}
   13dd4:	strd	r4, [sp, #48]	; 0x30
   13dd8:	mov	r5, r8
   13ddc:	str	r3, [sp, #80]	; 0x50
   13de0:	stmia	r5!, {r0, r1, r2, r3}
   13de4:	ldm	r7!, {r0, r1, r2, r3}
   13de8:	stmia	r5!, {r0, r1, r2, r3}
   13dec:	ldm	r7!, {r0, r1, r2, r3}
   13df0:	stmia	r5!, {r0, r1, r2, r3}
   13df4:	ldm	r7, {r0, r1}
   13df8:	ldr	r3, [ip, #24]
   13dfc:	ldr	r4, [sp, #104]	; 0x68
   13e00:	str	r3, [sp, #92]	; 0x5c
   13e04:	ldr	r3, [ip, #28]
   13e08:	stm	r5, {r0, r1}
   13e0c:	str	r3, [sp, #96]	; 0x60
   13e10:	ldr	r3, [ip, #32]
   13e14:	str	r3, [sp, #84]	; 0x54
   13e18:	ldr	r3, [ip, #36]	; 0x24
   13e1c:	str	r3, [sp, #88]	; 0x58
   13e20:	ldrd	r2, [ip, #40]	; 0x28
   13e24:	strd	r2, [sp, #64]	; 0x40
   13e28:	ldr	r3, [ip, #48]	; 0x30
   13e2c:	str	r3, [sp, #72]	; 0x48
   13e30:	cmp	r4, #87	; 0x57
   13e34:	ldrls	pc, [pc, r4, lsl #2]
   13e38:	b	160d8 <__assert_fail@plt+0x4d08>
   13e3c:	andeq	r5, r1, r0, ror #4
   13e40:	ldrdeq	r6, [r1], -r8
   13e44:	ldrdeq	r6, [r1], -r8
   13e48:			; <UNDEFINED> instruction: 0x00014fb4
   13e4c:	andeq	r4, r1, r4, ror pc
   13e50:	andeq	r4, r1, r4, lsr pc
   13e54:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e58:			; <UNDEFINED> instruction: 0x00014eb4
   13e5c:	andeq	r4, r1, r4, ror lr
   13e60:	andeq	r4, r1, r0, asr #28
   13e64:	andeq	r4, r1, ip, lsl #28
   13e68:	ldrdeq	r4, [r1], -r8
   13e6c:	ldrdeq	r6, [r1], -r8
   13e70:	ldrdeq	r6, [r1], -r8
   13e74:	andeq	r4, r1, r4, lsr #27
   13e78:	andeq	r4, r1, r4, ror sp
   13e7c:	andeq	r4, r1, ip, lsr sp
   13e80:	ldrdeq	r6, [r1], -r8
   13e84:	andeq	r5, r1, ip, asr #20
   13e88:	andeq	r5, r1, ip, lsl sl
   13e8c:	andeq	r5, r1, r4, ror #19
   13e90:	ldrdeq	r6, [r1], -r8
   13e94:	ldrdeq	r6, [r1], -r8
   13e98:	andeq	r5, r1, r4, lsr #19
   13e9c:	andeq	r5, r1, r0, asr #14
   13ea0:	andeq	r5, r1, r0, lsr #14
   13ea4:	andeq	r5, r1, ip, lsl #14
   13ea8:	strdeq	r5, [r1], -r8
   13eac:	andeq	r5, r1, ip, lsl r9
   13eb0:			; <UNDEFINED> instruction: 0x00014cb4
   13eb4:	andeq	r4, r1, r0, asr #24
   13eb8:	andeq	r4, r1, r8, lsr #24
   13ebc:	andeq	r4, r1, r0, lsl ip
   13ec0:	strdeq	r4, [r1], -r0
   13ec4:	ldrdeq	r4, [r1], -r0
   13ec8:	andeq	r4, r1, ip, lsr #23
   13ecc:	andeq	r4, r1, r4, asr #21
   13ed0:	andeq	r4, r1, r8, lsr #21
   13ed4:	andeq	r4, r1, ip, lsr #22
   13ed8:	andeq	r4, r1, r4, ror #20
   13edc:	andeq	r4, r1, ip, lsl #20
   13ee0:	strdeq	r4, [r1], -r0
   13ee4:	andeq	r4, r1, r0, asr #19
   13ee8:	andeq	r4, r1, r4, lsr #19
   13eec:	andeq	r4, r1, r4, ror #18
   13ef0:	ldrdeq	r6, [r1], -r8
   13ef4:	andeq	r4, r1, r4, lsl #18
   13ef8:			; <UNDEFINED> instruction: 0x000148b0
   13efc:	andeq	r4, r1, ip, asr r8
   13f00:	andeq	r4, r1, r8, lsl #16
   13f04:			; <UNDEFINED> instruction: 0x000147b0
   13f08:	andeq	r4, r1, r8, asr r7
   13f0c:	strdeq	r4, [r1], -ip
   13f10:	andeq	r4, r1, r4, lsr #13
   13f14:	andeq	r4, r1, ip, asr #12
   13f18:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f1c:	andeq	r4, r1, r8, lsr #10
   13f20:	andeq	r5, r1, ip, lsr #12
   13f24:	andeq	r5, r1, r0, ror #11
   13f28:	andeq	r5, r1, r8, lsl #11
   13f2c:	andeq	r5, r1, r0, lsr r5
   13f30:	ldrdeq	r5, [r1], -r8
   13f34:	andeq	r5, r1, r8, lsl #9
   13f38:	andeq	r5, r1, r8, lsr r4
   13f3c:	andeq	r5, r1, r8, ror #7
   13f40:	muleq	r1, ip, r3
   13f44:	andeq	r5, r1, r0, asr r3
   13f48:	strdeq	r5, [r1], -ip
   13f4c:	andeq	r5, r1, r8, lsr #5
   13f50:	ldrdeq	r5, [r1], -r0
   13f54:	ldrdeq	r6, [r1], -r8
   13f58:	andeq	r5, r1, r8, ror r8
   13f5c:	andeq	r5, r1, r0, lsr #16
   13f60:	andeq	r5, r1, r4, asr r7
   13f64:	andeq	r5, r1, r4, ror #3
   13f68:	muleq	r1, r4, r1
   13f6c:	andeq	r5, r1, r8, asr #2
   13f70:	strdeq	r5, [r1], -ip
   13f74:	ldrdeq	r6, [r1], -r8
   13f78:	ldrdeq	r6, [r1], -r8
   13f7c:	ldrdeq	r6, [r1], -r8
   13f80:	andeq	r5, r1, r8, asr #1
   13f84:	ldrdeq	r6, [r1], -r8
   13f88:	muleq	r1, r4, r0
   13f8c:	andeq	r5, r1, r4, ror r0
   13f90:	andeq	r5, r1, r0
   13f94:	andeq	r5, r1, ip, asr #4
   13f98:	andeq	r5, r1, ip, lsr r2
   13f9c:	ldr	r3, [sp, #100]	; 0x64
   13fa0:	cmp	r3, #3
   13fa4:	beq	14128 <__assert_fail@plt+0x2d58>
   13fa8:	add	r1, sp, #152	; 0x98
   13fac:	b	13fc0 <__assert_fail@plt+0x2bf0>
   13fb0:	cmp	fp, r1
   13fb4:	beq	14044 <__assert_fail@plt+0x2c74>
   13fb8:	ldrsh	r7, [fp, #-2]!
   13fbc:	sub	r9, r9, #56	; 0x38
   13fc0:	add	r7, sl, r7
   13fc4:	add	r7, r7, #1120	; 0x460
   13fc8:	ldrsb	r3, [r7]
   13fcc:	cmn	r3, #93	; 0x5d
   13fd0:	add	r2, r3, #1
   13fd4:	beq	13fb0 <__assert_fail@plt+0x2be0>
   13fd8:	cmp	r2, #112	; 0x70
   13fdc:	add	r3, sl, r2
   13fe0:	bhi	13fb0 <__assert_fail@plt+0x2be0>
   13fe4:	ldrb	r2, [r3, #2260]	; 0x8d4
   13fe8:	cmp	r2, #1
   13fec:	bne	13fb0 <__assert_fail@plt+0x2be0>
   13ff0:	ldrb	r7, [r3, #2376]	; 0x948
   13ff4:	cmp	r7, #0
   13ff8:	beq	13fb0 <__assert_fail@plt+0x2be0>
   13ffc:	ldr	r3, [sp, #124]	; 0x7c
   14000:	add	r4, sp, #192	; 0xc0
   14004:	str	r3, [sp, #208]	; 0xd0
   14008:	ldrd	r2, [sp, #112]	; 0x70
   1400c:	add	r9, r9, #56	; 0x38
   14010:	mov	lr, r9
   14014:	strd	r2, [sp, #200]	; 0xc8
   14018:	ldm	r4!, {r0, r1, r2, r3}
   1401c:	mov	r5, #3
   14020:	mov	ip, fp
   14024:	str	r5, [sp, #100]	; 0x64
   14028:	stmia	lr!, {r0, r1, r2, r3}
   1402c:	ldm	r4!, {r0, r1, r2, r3}
   14030:	b	14194 <__assert_fail@plt+0x2dc4>
   14034:	ldr	r1, [sp, #60]	; 0x3c
   14038:	mov	r2, r4
   1403c:	mov	r3, r5
   14040:	strd	r2, [r1, #56]	; 0x38
   14044:	mov	r0, #1
   14048:	add	sp, sp, #1424	; 0x590
   1404c:	add	sp, sp, #4
   14050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14054:	mov	r2, #0
   14058:	mov	r3, #0
   1405c:	ldr	r1, [pc, #2700]	; 14af0 <__assert_fail@plt+0x3720>
   14060:	strd	r2, [sp, #192]	; 0xc0
   14064:	str	r1, [sp, #56]	; 0x38
   14068:	ldr	r3, [sp, #56]	; 0x38
   1406c:	add	r3, sl, r3
   14070:	ldrb	r2, [r3, #1980]	; 0x7bc
   14074:	b	13d68 <__assert_fail@plt+0x2998>
   14078:	ldr	ip, [sp, #60]	; 0x3c
   1407c:	ldr	r0, [pc, #2672]	; 14af4 <__assert_fail@plt+0x3724>
   14080:	mov	r1, #1
   14084:	ldr	r4, [ip]
   14088:	ldrb	r5, [r4]
   1408c:	sub	r3, r5, #9
   14090:	cmp	r3, #23
   14094:	bhi	140a0 <__assert_fail@plt+0x2cd0>
   14098:	ands	r3, r0, r1, lsl r3
   1409c:	bne	141d4 <__assert_fail@plt+0x2e04>
   140a0:	sub	r6, r5, #48	; 0x30
   140a4:	cmp	r6, #9
   140a8:	bls	141f8 <__assert_fail@plt+0x2e28>
   140ac:	sub	r3, r5, #43	; 0x2b
   140b0:	tst	r3, #253	; 0xfd
   140b4:	beq	14338 <__assert_fail@plt+0x2f68>
   140b8:	cmp	r5, #65	; 0x41
   140bc:	bcc	140d4 <__assert_fail@plt+0x2d04>
   140c0:	cmp	r5, #90	; 0x5a
   140c4:	bls	15ae4 <__assert_fail@plt+0x4714>
   140c8:	sub	r3, r5, #97	; 0x61
   140cc:	cmp	r3, #25
   140d0:	bls	15ae4 <__assert_fail@plt+0x4714>
   140d4:	cmp	r5, #40	; 0x28
   140d8:	bne	15f04 <__assert_fail@plt+0x4b34>
   140dc:	ldr	r2, [ip]
   140e0:	mov	lr, #0
   140e4:	b	14108 <__assert_fail@plt+0x2d38>
   140e8:	cmp	r3, #40	; 0x28
   140ec:	addeq	lr, lr, #1
   140f0:	beq	140fc <__assert_fail@plt+0x2d2c>
   140f4:	cmp	r3, #41	; 0x29
   140f8:	subeq	lr, lr, #1
   140fc:	cmp	lr, #0
   14100:	beq	14518 <__assert_fail@plt+0x3148>
   14104:	mov	r2, r4
   14108:	add	r4, r2, #1
   1410c:	str	r4, [ip]
   14110:	ldrb	r3, [r4, #-1]
   14114:	cmp	r3, #0
   14118:	bne	140e8 <__assert_fail@plt+0x2d18>
   1411c:	mov	r2, #0
   14120:	str	r2, [sp, #56]	; 0x38
   14124:	b	13d68 <__assert_fail@plt+0x2998>
   14128:	ldr	r3, [sp, #56]	; 0x38
   1412c:	cmp	r3, #0
   14130:	mvngt	r3, #1
   14134:	strgt	r3, [sp, #56]	; 0x38
   14138:	bgt	13fa8 <__assert_fail@plt+0x2bd8>
   1413c:	bne	13fa8 <__assert_fail@plt+0x2bd8>
   14140:	b	14044 <__assert_fail@plt+0x2c74>
   14144:	ldrb	r7, [r8, #2376]	; 0x948
   14148:	cmp	r7, #0
   1414c:	beq	14348 <__assert_fail@plt+0x2f78>
   14150:	ldr	r3, [sp, #100]	; 0x64
   14154:	add	r4, sp, #192	; 0xc0
   14158:	cmp	r3, #0
   1415c:	subne	r3, r3, #1
   14160:	strne	r3, [sp, #100]	; 0x64
   14164:	ldr	r3, [sp, #124]	; 0x7c
   14168:	add	r9, r9, #56	; 0x38
   1416c:	str	r3, [sp, #208]	; 0xd0
   14170:	ldrd	r2, [sp, #112]	; 0x70
   14174:	mov	lr, r9
   14178:	mov	ip, fp
   1417c:	strd	r2, [sp, #200]	; 0xc8
   14180:	ldm	r4!, {r0, r1, r2, r3}
   14184:	mvn	r5, #1
   14188:	str	r5, [sp, #56]	; 0x38
   1418c:	stmia	lr!, {r0, r1, r2, r3}
   14190:	ldm	r4!, {r0, r1, r2, r3}
   14194:	stmia	lr!, {r0, r1, r2, r3}
   14198:	ldm	r4!, {r0, r1, r2, r3}
   1419c:	stmia	lr!, {r0, r1, r2, r3}
   141a0:	ldm	r4, {r0, r1}
   141a4:	stm	lr, {r0, r1}
   141a8:	add	fp, ip, #2
   141ac:	add	r3, sp, #190	; 0xbe
   141b0:	cmp	fp, r3
   141b4:	strh	r7, [ip, #2]
   141b8:	bcs	15ad4 <__assert_fail@plt+0x4704>
   141bc:	cmp	r7, #12
   141c0:	beq	15adc <__assert_fail@plt+0x470c>
   141c4:	add	r3, sl, r7
   141c8:	add	r3, r3, #1120	; 0x460
   141cc:	ldrsb	r8, [r3]
   141d0:	b	13d38 <__assert_fail@plt+0x2968>
   141d4:	add	r4, r4, #1
   141d8:	str	r4, [ip]
   141dc:	ldrb	r5, [r4]
   141e0:	sub	r3, r5, #9
   141e4:	cmp	r3, #23
   141e8:	bls	14098 <__assert_fail@plt+0x2cc8>
   141ec:	sub	r6, r5, #48	; 0x30
   141f0:	cmp	r6, #9
   141f4:	bhi	140ac <__assert_fail@plt+0x2cdc>
   141f8:	sub	r3, r5, #43	; 0x2b
   141fc:	tst	r3, #253	; 0xfd
   14200:	bne	15bac <__assert_fail@plt+0x47dc>
   14204:	mov	r2, r1
   14208:	add	r4, r4, #1
   1420c:	str	r4, [ip]
   14210:	ldrb	r5, [r4]
   14214:	sub	r3, r5, #9
   14218:	cmp	r3, #23
   1421c:	bhi	14228 <__assert_fail@plt+0x2e58>
   14220:	ands	r3, r0, r1, lsl r3
   14224:	bne	14208 <__assert_fail@plt+0x2e38>
   14228:	sub	r6, r5, #48	; 0x30
   1422c:	cmp	r6, #9
   14230:	bhi	1408c <__assert_fail@plt+0x2cbc>
   14234:	mov	r3, #0
   14238:	mov	r1, r6
   1423c:	mov	r6, r3
   14240:	mov	r3, r8
   14244:	mov	r8, r7
   14248:	mov	r7, r4
   1424c:	mov	r4, r1
   14250:	cmp	r6, #0
   14254:	blt	14494 <__assert_fail@plt+0x30c4>
   14258:	ldr	r1, [pc, #2200]	; 14af8 <__assert_fail@plt+0x3728>
   1425c:	cmp	r6, r1
   14260:	bgt	144bc <__assert_fail@plt+0x30ec>
   14264:	add	r6, r6, r6, lsl #2
   14268:	cmn	r2, #1
   1426c:	lsl	r0, r6, #1
   14270:	beq	144d8 <__assert_fail@plt+0x3108>
   14274:	cmp	r0, #0
   14278:	mvnge	r1, #-2147483648	; 0x80000000
   1427c:	subge	r1, r1, r4
   14280:	blt	15acc <__assert_fail@plt+0x46fc>
   14284:	cmp	r1, r0
   14288:	movge	r1, #0
   1428c:	movlt	r1, #1
   14290:	cmp	r1, #0
   14294:	bne	144bc <__assert_fail@plt+0x30ec>
   14298:	cmn	r2, #1
   1429c:	rsbeq	r4, r5, #48	; 0x30
   142a0:	ldrb	r5, [r7, #1]
   142a4:	add	r6, r4, r0
   142a8:	add	r1, r7, #1
   142ac:	sub	r4, r5, #48	; 0x30
   142b0:	cmp	r4, #9
   142b4:	bls	144d0 <__assert_fail@plt+0x3100>
   142b8:	and	r5, r5, #253	; 0xfd
   142bc:	cmp	r5, #44	; 0x2c
   142c0:	mov	r4, r7
   142c4:	mov	r7, r8
   142c8:	mov	r8, r3
   142cc:	mov	r3, r6
   142d0:	bne	15a80 <__assert_fail@plt+0x46b0>
   142d4:	ldrb	r0, [r1, #1]
   142d8:	sub	r0, r0, #48	; 0x30
   142dc:	cmp	r0, #9
   142e0:	bhi	15a80 <__assert_fail@plt+0x46b0>
   142e4:	ldrb	ip, [r4, #3]
   142e8:	mov	r1, r0
   142ec:	add	r4, r4, #3
   142f0:	sub	r0, ip, #48	; 0x30
   142f4:	mov	lr, #8
   142f8:	add	r1, r1, r1, lsl #2
   142fc:	cmp	r0, #9
   14300:	lsl	r1, r1, #1
   14304:	ldrbls	ip, [r4, #1]
   14308:	addls	r1, r1, r0
   1430c:	addls	r4, r4, #1
   14310:	subls	r0, ip, #48	; 0x30
   14314:	subs	lr, lr, #1
   14318:	bne	142f8 <__assert_fail@plt+0x2f28>
   1431c:	cmn	r2, #1
   14320:	beq	16140 <__assert_fail@plt+0x4d70>
   14324:	cmp	r0, #9
   14328:	bhi	160f4 <__assert_fail@plt+0x4d24>
   1432c:	ldrb	r0, [r4, #1]!
   14330:	sub	r0, r0, #48	; 0x30
   14334:	b	14324 <__assert_fail@plt+0x2f54>
   14338:	cmp	r5, #45	; 0x2d
   1433c:	mvneq	r2, #0
   14340:	movne	r2, #1
   14344:	b	14208 <__assert_fail@plt+0x2e38>
   14348:	add	lr, r9, #56	; 0x38
   1434c:	add	r6, sp, #256	; 0x100
   14350:	ldm	lr!, {r0, r1, r2, r3}
   14354:	sub	r8, r6, #8
   14358:	mov	ip, r8
   1435c:	ldr	r4, [r9, #64]	; 0x40
   14360:	stmia	ip!, {r0, r1, r2, r3}
   14364:	ldm	lr!, {r0, r1, r2, r3}
   14368:	str	r4, [sp, #76]	; 0x4c
   1436c:	ldr	r4, [r9, #68]	; 0x44
   14370:	stmia	ip!, {r0, r1, r2, r3}
   14374:	str	r4, [sp, #80]	; 0x50
   14378:	ldrd	r4, [r9, #72]	; 0x48
   1437c:	ldm	lr!, {r0, r1, r2, r3}
   14380:	strd	r4, [sp, #48]	; 0x30
   14384:	ldr	r4, [r9, #80]	; 0x50
   14388:	str	r7, [sp, #120]	; 0x78
   1438c:	str	r4, [sp, #92]	; 0x5c
   14390:	stmia	ip!, {r0, r1, r2, r3}
   14394:	ldr	r3, [r9, #84]	; 0x54
   14398:	ldm	lr, {r0, r1}
   1439c:	str	r3, [sp, #96]	; 0x60
   143a0:	ldr	r3, [r9, #88]	; 0x58
   143a4:	stm	ip, {r0, r1}
   143a8:	str	r3, [sp, #84]	; 0x54
   143ac:	ldr	r3, [r9, #92]	; 0x5c
   143b0:	str	r3, [sp, #88]	; 0x58
   143b4:	ldrd	r2, [r9, #96]	; 0x60
   143b8:	strd	r2, [sp, #64]	; 0x40
   143bc:	ldr	r3, [r9, #104]	; 0x68
   143c0:	str	r3, [sp, #72]	; 0x48
   143c4:	ldr	r2, [sp, #76]	; 0x4c
   143c8:	ldrsh	ip, [sp, #120]	; 0x78
   143cc:	str	r2, [r6]
   143d0:	ldr	r2, [sp, #80]	; 0x50
   143d4:	ldrd	r0, [sp, #48]	; 0x30
   143d8:	str	r2, [r6, #4]
   143dc:	ldr	r2, [sp, #92]	; 0x5c
   143e0:	strd	r0, [r6, #8]
   143e4:	str	r2, [r6, #16]
   143e8:	ldr	r2, [sp, #96]	; 0x60
   143ec:	ldrd	r0, [sp, #64]	; 0x40
   143f0:	str	r2, [r6, #20]
   143f4:	ldr	r2, [sp, #84]	; 0x54
   143f8:	rsb	r3, ip, ip, lsl #3
   143fc:	str	r2, [r6, #24]
   14400:	ldr	r2, [sp, #88]	; 0x58
   14404:	strd	r0, [r6, #32]
   14408:	str	r2, [r6, #28]
   1440c:	ldr	r2, [sp, #72]	; 0x48
   14410:	sub	r9, r9, r3, lsl #3
   14414:	str	r2, [sp, #296]	; 0x128
   14418:	ldm	r8!, {r0, r1, r2, r3}
   1441c:	add	r9, r9, #56	; 0x38
   14420:	mov	lr, r9
   14424:	add	r7, sl, r7
   14428:	stmia	lr!, {r0, r1, r2, r3}
   1442c:	sub	ip, fp, ip, lsl #1
   14430:	ldm	r8!, {r0, r1, r2, r3}
   14434:	stmia	lr!, {r0, r1, r2, r3}
   14438:	ldm	r8!, {r0, r1, r2, r3}
   1443c:	ldrsh	r4, [ip]
   14440:	stmia	lr!, {r0, r1, r2, r3}
   14444:	ldrb	r3, [r7, #2700]	; 0xa8c
   14448:	ldm	r8, {r0, r1}
   1444c:	sub	r3, r3, #28
   14450:	add	r2, sl, r3
   14454:	add	r2, r2, #2784	; 0xae0
   14458:	stm	lr, {r0, r1}
   1445c:	ldrsb	r2, [r2, #8]
   14460:	add	r2, r2, r4
   14464:	cmp	r2, #112	; 0x70
   14468:	bhi	14484 <__assert_fail@plt+0x30b4>
   1446c:	add	r2, sl, r2
   14470:	add	r1, r2, #2256	; 0x8d0
   14474:	ldrsb	r1, [r1, #4]
   14478:	cmp	r1, r4
   1447c:	ldrbeq	r7, [r2, #2376]	; 0x948
   14480:	beq	141a8 <__assert_fail@plt+0x2dd8>
   14484:	add	r3, sl, r3
   14488:	add	r3, r3, #2816	; 0xb00
   1448c:	ldrsb	r7, [r3, #4]
   14490:	b	141a8 <__assert_fail@plt+0x2dd8>
   14494:	cmn	r6, #1
   14498:	beq	14264 <__assert_fail@plt+0x2e94>
   1449c:	mov	r1, r6
   144a0:	mov	r0, #-2147483648	; 0x80000000
   144a4:	str	r3, [sp, #56]	; 0x38
   144a8:	str	r2, [sp, #48]	; 0x30
   144ac:	bl	1d774 <__assert_fail@plt+0xc3a4>
   144b0:	ldr	r3, [sp, #56]	; 0x38
   144b4:	cmp	r0, #9
   144b8:	bgt	14520 <__assert_fail@plt+0x3150>
   144bc:	mov	r7, r8
   144c0:	mov	r8, r3
   144c4:	mov	r3, #63	; 0x3f
   144c8:	str	r3, [sp, #56]	; 0x38
   144cc:	b	14068 <__assert_fail@plt+0x2c98>
   144d0:	mov	r7, r1
   144d4:	b	14250 <__assert_fail@plt+0x2e80>
   144d8:	rsbs	r1, r5, #48	; 0x30
   144dc:	bne	14504 <__assert_fail@plt+0x3134>
   144e0:	cmp	r0, #0
   144e4:	subge	r1, r5, #-2147483599	; 0x80000031
   144e8:	bge	14284 <__assert_fail@plt+0x2eb4>
   144ec:	mov	ip, #0
   144f0:	rsb	r1, r0, #-2147483648	; 0x80000000
   144f4:	cmp	r1, ip
   144f8:	movle	r1, #0
   144fc:	movgt	r1, #1
   14500:	b	14290 <__assert_fail@plt+0x2ec0>
   14504:	rsb	r1, r1, #-2147483648	; 0x80000000
   14508:	cmp	r1, r0
   1450c:	movle	r1, #0
   14510:	movgt	r1, #1
   14514:	b	14290 <__assert_fail@plt+0x2ec0>
   14518:	ldrb	r5, [r2, #1]
   1451c:	b	1408c <__assert_fail@plt+0x2cbc>
   14520:	ldr	r2, [sp, #48]	; 0x30
   14524:	b	14264 <__assert_fail@plt+0x2e94>
   14528:	mov	r2, #56	; 0x38
   1452c:	mov	r1, #0
   14530:	mov	r0, r8
   14534:	bl	112c8 <memset@plt>
   14538:	ldrd	r4, [r9]
   1453c:	cmp	r4, #0
   14540:	sbcs	r3, r5, #0
   14544:	blt	15cb8 <__assert_fail@plt+0x48e8>
   14548:	orrs	r3, r4, r5
   1454c:	beq	14594 <__assert_fail@plt+0x31c4>
   14550:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   14554:	cmp	r2, #0
   14558:	strd	r2, [sp, #48]	; 0x30
   1455c:	sbcs	r3, r3, #0
   14560:	blt	15d80 <__assert_fail@plt+0x49b0>
   14564:	mov	r2, r4
   14568:	mov	r3, r5
   1456c:	mvn	r0, #0
   14570:	mvn	r1, #-2147483648	; 0x80000000
   14574:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   14578:	ldrd	r2, [sp, #48]	; 0x30
   1457c:	cmp	r0, r2
   14580:	sbcs	r3, r1, r3
   14584:	movlt	r3, #1
   14588:	movge	r3, #0
   1458c:	cmp	r3, #0
   14590:	bne	14044 <__assert_fail@plt+0x2c74>
   14594:	ldr	r3, [r9, #-56]	; 0xffffffc8
   14598:	mov	r0, #0
   1459c:	mov	r1, #0
   145a0:	ldr	r2, [r9, #-52]	; 0xffffffcc
   145a4:	strd	r0, [sp, #64]	; 0x40
   145a8:	umull	r0, r1, r3, r4
   145ac:	mul	r2, r4, r2
   145b0:	strd	r0, [sp, #48]	; 0x30
   145b4:	mla	r3, r3, r5, r2
   145b8:	ldr	r2, [sp, #52]	; 0x34
   145bc:	mov	r0, #0
   145c0:	add	r3, r3, r2
   145c4:	mov	r1, #0
   145c8:	str	r3, [sp, #52]	; 0x34
   145cc:	mov	r3, #0
   145d0:	str	r0, [sp, #84]	; 0x54
   145d4:	str	r1, [sp, #88]	; 0x58
   145d8:	str	r0, [sp, #92]	; 0x5c
   145dc:	str	r1, [sp, #96]	; 0x60
   145e0:	str	r0, [sp, #76]	; 0x4c
   145e4:	str	r1, [sp, #80]	; 0x50
   145e8:	mov	r7, #60	; 0x3c
   145ec:	str	r3, [sp, #72]	; 0x48
   145f0:	b	143c4 <__assert_fail@plt+0x2ff4>
   145f4:	mov	r4, #0
   145f8:	mov	r5, #0
   145fc:	mov	r2, #56	; 0x38
   14600:	mov	r1, #0
   14604:	mov	r0, r8
   14608:	strd	r4, [sp, #64]	; 0x40
   1460c:	bl	112c8 <memset@plt>
   14610:	mov	r3, r5
   14614:	mov	r2, r4
   14618:	str	r4, [sp, #84]	; 0x54
   1461c:	strd	r2, [sp, #48]	; 0x30
   14620:	mov	r3, #0
   14624:	str	r3, [sp, #72]	; 0x48
   14628:	mov	r3, #1
   1462c:	str	r3, [sp, #76]	; 0x4c
   14630:	mov	r3, #0
   14634:	str	r5, [sp, #88]	; 0x58
   14638:	str	r4, [sp, #92]	; 0x5c
   1463c:	str	r5, [sp, #96]	; 0x60
   14640:	mov	r7, #59	; 0x3b
   14644:	str	r3, [sp, #80]	; 0x50
   14648:	b	143c4 <__assert_fail@plt+0x2ff4>
   1464c:	mov	r4, #0
   14650:	mov	r5, #0
   14654:	mov	r2, #56	; 0x38
   14658:	mov	r1, #0
   1465c:	mov	r0, r8
   14660:	strd	r4, [sp, #64]	; 0x40
   14664:	bl	112c8 <memset@plt>
   14668:	mov	r3, r5
   1466c:	mov	r2, r4
   14670:	str	r4, [sp, #84]	; 0x54
   14674:	strd	r2, [sp, #48]	; 0x30
   14678:	ldr	r3, [r9, #-48]	; 0xffffffd0
   1467c:	str	r5, [sp, #88]	; 0x58
   14680:	str	r3, [sp, #76]	; 0x4c
   14684:	ldr	r3, [r9, #-44]	; 0xffffffd4
   14688:	str	r4, [sp, #92]	; 0x5c
   1468c:	str	r3, [sp, #80]	; 0x50
   14690:	mov	r3, #0
   14694:	str	r5, [sp, #96]	; 0x60
   14698:	mov	r7, #58	; 0x3a
   1469c:	str	r3, [sp, #72]	; 0x48
   146a0:	b	143c4 <__assert_fail@plt+0x2ff4>
   146a4:	mov	r4, #0
   146a8:	mov	r5, #0
   146ac:	mov	r2, #56	; 0x38
   146b0:	mov	r1, #0
   146b4:	mov	r0, r8
   146b8:	strd	r4, [sp, #64]	; 0x40
   146bc:	bl	112c8 <memset@plt>
   146c0:	mov	r3, r5
   146c4:	mov	r2, r4
   146c8:	str	r4, [sp, #84]	; 0x54
   146cc:	strd	r2, [sp, #48]	; 0x30
   146d0:	ldr	r3, [r9, #-56]	; 0xffffffc8
   146d4:	str	r5, [sp, #88]	; 0x58
   146d8:	str	r3, [sp, #76]	; 0x4c
   146dc:	ldr	r3, [r9, #-52]	; 0xffffffcc
   146e0:	str	r4, [sp, #92]	; 0x5c
   146e4:	str	r3, [sp, #80]	; 0x50
   146e8:	mov	r3, #0
   146ec:	str	r5, [sp, #96]	; 0x60
   146f0:	mov	r7, #57	; 0x39
   146f4:	str	r3, [sp, #72]	; 0x48
   146f8:	b	143c4 <__assert_fail@plt+0x2ff4>
   146fc:	mov	r2, #56	; 0x38
   14700:	mov	r1, #0
   14704:	mov	r0, r8
   14708:	bl	112c8 <memset@plt>
   1470c:	mov	r2, #1
   14710:	mov	r3, #0
   14714:	mov	r0, #0
   14718:	mov	r1, #0
   1471c:	strd	r2, [r6, #-8]
   14720:	mov	r3, r1
   14724:	mov	r2, r0
   14728:	str	r3, [sp, #88]	; 0x58
   1472c:	str	r3, [sp, #96]	; 0x60
   14730:	strd	r2, [sp, #48]	; 0x30
   14734:	str	r3, [sp, #80]	; 0x50
   14738:	mov	r3, #0
   1473c:	strd	r0, [sp, #64]	; 0x40
   14740:	str	r0, [sp, #84]	; 0x54
   14744:	str	r0, [sp, #92]	; 0x5c
   14748:	str	r0, [sp, #76]	; 0x4c
   1474c:	mov	r7, #56	; 0x38
   14750:	str	r3, [sp, #72]	; 0x48
   14754:	b	143c4 <__assert_fail@plt+0x2ff4>
   14758:	mov	r2, #56	; 0x38
   1475c:	mov	r1, #0
   14760:	mov	r0, r8
   14764:	bl	112c8 <memset@plt>
   14768:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   1476c:	mov	r0, #0
   14770:	mov	r1, #0
   14774:	strd	r2, [r6, #-8]
   14778:	mov	r3, r1
   1477c:	mov	r2, r0
   14780:	str	r3, [sp, #96]	; 0x60
   14784:	strd	r2, [sp, #48]	; 0x30
   14788:	str	r3, [sp, #80]	; 0x50
   1478c:	mov	r3, #0
   14790:	strd	r0, [sp, #64]	; 0x40
   14794:	str	r0, [sp, #84]	; 0x54
   14798:	str	r1, [sp, #88]	; 0x58
   1479c:	str	r0, [sp, #92]	; 0x5c
   147a0:	str	r0, [sp, #76]	; 0x4c
   147a4:	mov	r7, #55	; 0x37
   147a8:	str	r3, [sp, #72]	; 0x48
   147ac:	b	143c4 <__assert_fail@plt+0x2ff4>
   147b0:	mov	r2, #56	; 0x38
   147b4:	mov	r1, #0
   147b8:	mov	r0, r8
   147bc:	bl	112c8 <memset@plt>
   147c0:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   147c4:	mov	r0, #0
   147c8:	mov	r1, #0
   147cc:	strd	r2, [r6, #-8]
   147d0:	mov	r3, r1
   147d4:	mov	r2, r0
   147d8:	str	r3, [sp, #96]	; 0x60
   147dc:	strd	r2, [sp, #48]	; 0x30
   147e0:	str	r3, [sp, #80]	; 0x50
   147e4:	mov	r3, #0
   147e8:	strd	r0, [sp, #64]	; 0x40
   147ec:	str	r0, [sp, #84]	; 0x54
   147f0:	str	r1, [sp, #88]	; 0x58
   147f4:	str	r0, [sp, #92]	; 0x5c
   147f8:	str	r0, [sp, #76]	; 0x4c
   147fc:	mov	r7, #54	; 0x36
   14800:	str	r3, [sp, #72]	; 0x48
   14804:	b	143c4 <__assert_fail@plt+0x2ff4>
   14808:	mov	r1, #1
   1480c:	ldrd	r2, [r9]
   14810:	str	r1, [sp, #44]	; 0x2c
   14814:	ldr	r1, [r9, #48]	; 0x30
   14818:	ldr	r0, [sp, #60]	; 0x3c
   1481c:	str	r1, [sp, #40]	; 0x28
   14820:	ldrd	r4, [r9, #40]	; 0x28
   14824:	strd	r4, [sp, #32]
   14828:	ldrd	r4, [r9, #32]
   1482c:	strd	r4, [sp, #24]
   14830:	ldrd	r4, [r9, #24]
   14834:	strd	r4, [sp, #16]
   14838:	ldrd	r4, [r9, #16]
   1483c:	strd	r4, [sp, #8]
   14840:	ldrd	r4, [r9, #8]
   14844:	strd	r4, [sp]
   14848:	bl	12b14 <__assert_fail@plt+0x1744>
   1484c:	cmp	r0, #0
   14850:	beq	14044 <__assert_fail@plt+0x2c74>
   14854:	mov	r7, #53	; 0x35
   14858:	b	143c4 <__assert_fail@plt+0x2ff4>
   1485c:	mov	r1, #1
   14860:	ldrd	r2, [r9]
   14864:	str	r1, [sp, #44]	; 0x2c
   14868:	ldr	r1, [r9, #48]	; 0x30
   1486c:	ldr	r0, [sp, #60]	; 0x3c
   14870:	str	r1, [sp, #40]	; 0x28
   14874:	ldrd	r4, [r9, #40]	; 0x28
   14878:	strd	r4, [sp, #32]
   1487c:	ldrd	r4, [r9, #32]
   14880:	strd	r4, [sp, #24]
   14884:	ldrd	r4, [r9, #24]
   14888:	strd	r4, [sp, #16]
   1488c:	ldrd	r4, [r9, #16]
   14890:	strd	r4, [sp, #8]
   14894:	ldrd	r4, [r9, #8]
   14898:	strd	r4, [sp]
   1489c:	bl	12b14 <__assert_fail@plt+0x1744>
   148a0:	cmp	r0, #0
   148a4:	beq	14044 <__assert_fail@plt+0x2c74>
   148a8:	mov	r7, #52	; 0x34
   148ac:	b	143c4 <__assert_fail@plt+0x2ff4>
   148b0:	ldr	r1, [r9]
   148b4:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   148b8:	str	r1, [sp, #44]	; 0x2c
   148bc:	ldr	r1, [r9, #-8]
   148c0:	ldr	r0, [sp, #60]	; 0x3c
   148c4:	str	r1, [sp, #40]	; 0x28
   148c8:	ldrd	r4, [r9, #-16]
   148cc:	strd	r4, [sp, #32]
   148d0:	ldrd	r4, [r9, #-24]	; 0xffffffe8
   148d4:	strd	r4, [sp, #24]
   148d8:	ldrd	r4, [r9, #-32]	; 0xffffffe0
   148dc:	strd	r4, [sp, #16]
   148e0:	ldrd	r4, [r9, #-40]	; 0xffffffd8
   148e4:	strd	r4, [sp, #8]
   148e8:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   148ec:	strd	r4, [sp]
   148f0:	bl	12b14 <__assert_fail@plt+0x1744>
   148f4:	cmp	r0, #0
   148f8:	beq	14044 <__assert_fail@plt+0x2c74>
   148fc:	mov	r7, #51	; 0x33
   14900:	b	143c4 <__assert_fail@plt+0x2ff4>
   14904:	ldr	r3, [sp, #60]	; 0x3c
   14908:	sub	lr, r9, #112	; 0x70
   1490c:	add	ip, r3, #32
   14910:	ldm	lr!, {r0, r1, r2, r3}
   14914:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   14918:	stmia	ip!, {r0, r1, r2, r3}
   1491c:	cmp	r5, #-2147483648	; 0x80000000
   14920:	ldm	lr, {r0, r1}
   14924:	cmpeq	r4, #0
   14928:	stm	ip, {r0, r1}
   1492c:	beq	14034 <__assert_fail@plt+0x2c64>
   14930:	ldrd	r2, [r9, #8]
   14934:	rsbs	r0, r4, #0
   14938:	ldr	ip, [sp, #60]	; 0x3c
   1493c:	rsc	r1, r5, #0
   14940:	cmp	r3, #-2147483648	; 0x80000000
   14944:	cmpeq	r2, #0
   14948:	strd	r0, [ip, #56]	; 0x38
   1494c:	beq	15d48 <__assert_fail@plt+0x4978>
   14950:	rsbs	r2, r2, #0
   14954:	rsc	r3, r3, #0
   14958:	mov	r7, #50	; 0x32
   1495c:	strd	r2, [ip, #64]	; 0x40
   14960:	b	143c4 <__assert_fail@plt+0x2ff4>
   14964:	ldr	r4, [sp, #60]	; 0x3c
   14968:	mov	lr, r9
   1496c:	add	ip, r4, #32
   14970:	str	ip, [sp, #104]	; 0x68
   14974:	mov	ip, r4
   14978:	ldrd	r4, [r9, #-104]	; 0xffffff98
   1497c:	ldm	lr!, {r0, r1, r2, r3}
   14980:	mov	r7, #48	; 0x30
   14984:	strd	r4, [ip, #64]	; 0x40
   14988:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   1498c:	strd	r4, [ip, #56]	; 0x38
   14990:	ldr	ip, [sp, #104]	; 0x68
   14994:	stmia	ip!, {r0, r1, r2, r3}
   14998:	ldm	lr, {r0, r1}
   1499c:	stm	ip, {r0, r1}
   149a0:	b	143c4 <__assert_fail@plt+0x2ff4>
   149a4:	ldr	ip, [sp, #60]	; 0x3c
   149a8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   149ac:	ldrd	r0, [r9]
   149b0:	mov	r7, #47	; 0x2f
   149b4:	strd	r2, [ip, #64]	; 0x40
   149b8:	strd	r0, [ip, #56]	; 0x38
   149bc:	b	143c4 <__assert_fail@plt+0x2ff4>
   149c0:	ldr	r4, [sp, #60]	; 0x3c
   149c4:	mov	lr, r9
   149c8:	add	ip, r4, #32
   149cc:	str	ip, [sp, #104]	; 0x68
   149d0:	mov	ip, r4
   149d4:	ldrd	r4, [r9, #-168]	; 0xffffff58
   149d8:	ldm	lr!, {r0, r1, r2, r3}
   149dc:	mov	r7, #46	; 0x2e
   149e0:	strd	r4, [ip, #56]	; 0x38
   149e4:	ldrd	r4, [r9, #-104]	; 0xffffff98
   149e8:	strd	r4, [ip, #64]	; 0x40
   149ec:	b	14990 <__assert_fail@plt+0x35c0>
   149f0:	ldr	ip, [sp, #60]	; 0x3c
   149f4:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   149f8:	ldrd	r0, [r9, #8]
   149fc:	mov	r7, #45	; 0x2d
   14a00:	strd	r2, [ip, #56]	; 0x38
   14a04:	strd	r0, [ip, #64]	; 0x40
   14a08:	b	143c4 <__assert_fail@plt+0x2ff4>
   14a0c:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   14a10:	ldrd	r2, [r9, #-112]	; 0xffffff90
   14a14:	ldr	r1, [sp, #60]	; 0x3c
   14a18:	cmp	r5, #-2147483648	; 0x80000000
   14a1c:	cmpeq	r4, #0
   14a20:	strd	r2, [r1, #56]	; 0x38
   14a24:	beq	15d48 <__assert_fail@plt+0x4978>
   14a28:	ldrd	r2, [r9, #8]
   14a2c:	rsbs	r0, r4, #0
   14a30:	ldr	ip, [sp, #60]	; 0x3c
   14a34:	rsc	r1, r5, #0
   14a38:	cmp	r3, #-2147483648	; 0x80000000
   14a3c:	cmpeq	r2, #0
   14a40:	strd	r0, [ip, #64]	; 0x40
   14a44:	beq	15c00 <__assert_fail@plt+0x4830>
   14a48:	rsbs	r2, r2, #0
   14a4c:	rsc	r3, r3, #0
   14a50:	ldr	r1, [r9, #16]
   14a54:	strd	r2, [ip, #40]	; 0x28
   14a58:	str	r1, [ip, #48]	; 0x30
   14a5c:	mov	r7, #44	; 0x2c
   14a60:	b	143c4 <__assert_fail@plt+0x2ff4>
   14a64:	ldrd	r2, [r9, #-104]	; 0xffffff98
   14a68:	ldr	r1, [sp, #60]	; 0x3c
   14a6c:	ldrd	r4, [r9, #8]
   14a70:	strd	r2, [r1, #64]	; 0x40
   14a74:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   14a78:	cmp	r5, #-2147483648	; 0x80000000
   14a7c:	cmpeq	r4, #0
   14a80:	strd	r2, [r1, #56]	; 0x38
   14a84:	beq	15c00 <__assert_fail@plt+0x4830>
   14a88:	rsbs	r0, r4, #0
   14a8c:	ldr	r2, [sp, #60]	; 0x3c
   14a90:	rsc	r1, r5, #0
   14a94:	ldr	r3, [r9, #16]
   14a98:	strd	r0, [r2, #40]	; 0x28
   14a9c:	str	r3, [r2, #48]	; 0x30
   14aa0:	mov	r7, #43	; 0x2b
   14aa4:	b	143c4 <__assert_fail@plt+0x2ff4>
   14aa8:	ldr	ip, [sp, #60]	; 0x3c
   14aac:	ldrd	r2, [r9, #-104]	; 0xffffff98
   14ab0:	ldrd	r0, [r9, #8]
   14ab4:	mov	r7, #41	; 0x29
   14ab8:	strd	r2, [ip, #56]	; 0x38
   14abc:	strd	r0, [ip, #64]	; 0x40
   14ac0:	b	143c4 <__assert_fail@plt+0x2ff4>
   14ac4:	ldr	ip, [sp, #60]	; 0x3c
   14ac8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14acc:	ldr	r0, [r9]
   14ad0:	mov	r1, #1
   14ad4:	strd	r2, [ip, #8]
   14ad8:	str	r0, [ip, #16]
   14adc:	strb	r1, [ip, #188]	; 0xbc
   14ae0:	mov	r7, #40	; 0x28
   14ae4:	b	143c4 <__assert_fail@plt+0x2ff4>
   14ae8:	andeq	lr, r1, ip, asr #13
   14aec:	andeq	r0, r0, r5, lsl r1
   14af0:	andeq	r0, r0, r3, lsl #2
   14af4:	addeq	r0, r0, pc, lsl r0
   14af8:	stcleq	12, cr12, [ip], {204}	; 0xcc
   14afc:	ldrdeq	pc, [r1], -ip
   14b00:	ldrdeq	pc, [r1], -r4
   14b04:	andeq	pc, r1, ip, asr #7
   14b08:	andeq	pc, r1, r0, asr #7
   14b0c:			; <UNDEFINED> instruction: 0x0001f3bc
   14b10:	andeq	lr, r1, r0, lsl r6
   14b14:	andeq	pc, r1, r0, ror #17
   14b18:			; <UNDEFINED> instruction: 0x0001f3b0
   14b1c:	andeq	pc, r1, r8, lsr #7
   14b20:	andeq	pc, r1, r4, lsr #7
   14b24:	muleq	r1, r0, r3
   14b28:			; <UNDEFINED> instruction: 0xffff9d90
   14b2c:	ldr	r4, [r9, #-208]	; 0xffffff30
   14b30:	ldr	r3, [sp, #60]	; 0x3c
   14b34:	cmp	r4, #3
   14b38:	ldrb	r3, [r3, #181]	; 0xb5
   14b3c:	ble	15bb4 <__assert_fail@plt+0x47e4>
   14b40:	cmp	r3, #0
   14b44:	beq	14b74 <__assert_fail@plt+0x37a4>
   14b48:	mov	r2, #5
   14b4c:	ldr	r1, [pc, #-88]	; 14afc <__assert_fail@plt+0x372c>
   14b50:	mov	r0, #0
   14b54:	bl	11130 <dcgettext@plt>
   14b58:	ldrd	r2, [r9, #-216]	; 0xffffff28
   14b5c:	strd	r2, [sp, #104]	; 0x68
   14b60:	asr	r3, r4, #31
   14b64:	mov	r5, r3
   14b68:	ldrd	r2, [sp, #104]	; 0x68
   14b6c:	strd	r4, [sp]
   14b70:	bl	12abc <__assert_fail@plt+0x16ec>
   14b74:	sub	lr, r9, #224	; 0xe0
   14b78:	ldr	r4, [sp, #60]	; 0x3c
   14b7c:	ldm	lr!, {r0, r1, r2, r3}
   14b80:	add	ip, r4, #32
   14b84:	mov	r7, #42	; 0x2a
   14b88:	stmia	ip!, {r0, r1, r2, r3}
   14b8c:	ldm	lr, {r0, r1}
   14b90:	ldrd	r2, [r9, #8]
   14b94:	stm	ip, {r0, r1}
   14b98:	mov	r1, r4
   14b9c:	ldrd	r4, [r9, #-104]	; 0xffffff98
   14ba0:	strd	r2, [r1, #64]	; 0x40
   14ba4:	strd	r4, [r1, #56]	; 0x38
   14ba8:	b	143c4 <__assert_fail@plt+0x2ff4>
   14bac:	ldr	ip, [sp, #60]	; 0x3c
   14bb0:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   14bb4:	ldr	r0, [r9]
   14bb8:	mov	r1, #1
   14bbc:	strd	r2, [ip, #8]
   14bc0:	str	r0, [ip, #16]
   14bc4:	strb	r1, [ip, #188]	; 0xbc
   14bc8:	mov	r7, #39	; 0x27
   14bcc:	b	143c4 <__assert_fail@plt+0x2ff4>
   14bd0:	ldr	r2, [sp, #60]	; 0x3c
   14bd4:	mov	r0, #0
   14bd8:	mov	r1, #0
   14bdc:	ldr	r3, [r9, #-56]	; 0xffffffc8
   14be0:	strd	r0, [r2, #8]
   14be4:	str	r3, [r2, #16]
   14be8:	mov	r7, #38	; 0x26
   14bec:	b	143c4 <__assert_fail@plt+0x2ff4>
   14bf0:	ldr	r2, [sp, #60]	; 0x3c
   14bf4:	mov	r0, #0
   14bf8:	mov	r1, #0
   14bfc:	ldr	r3, [r9]
   14c00:	strd	r0, [r2, #8]
   14c04:	str	r3, [r2, #16]
   14c08:	mov	r7, #37	; 0x25
   14c0c:	b	143c4 <__assert_fail@plt+0x2ff4>
   14c10:	ldr	r3, [r9, #-56]	; 0xffffffc8
   14c14:	ldr	r2, [sp, #60]	; 0x3c
   14c18:	add	r3, r3, #3600	; 0xe10
   14c1c:	mov	r7, #36	; 0x24
   14c20:	str	r3, [r2, #24]
   14c24:	b	143c4 <__assert_fail@plt+0x2ff4>
   14c28:	ldr	r3, [r9]
   14c2c:	ldr	r2, [sp, #60]	; 0x3c
   14c30:	add	r3, r3, #3600	; 0xe10
   14c34:	mov	r7, #35	; 0x23
   14c38:	str	r3, [r2, #24]
   14c3c:	b	143c4 <__assert_fail@plt+0x2ff4>
   14c40:	ldrd	r4, [r9]
   14c44:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14c48:	ldrb	r1, [r9, #-56]	; 0xffffffc8
   14c4c:	strd	r4, [sp, #8]
   14c50:	ldr	r0, [r9, #-40]	; 0xffffffd8
   14c54:	str	r0, [sp]
   14c58:	ldr	r0, [sp, #60]	; 0x3c
   14c5c:	add	r0, r0, #24
   14c60:	bl	133a0 <__assert_fail@plt+0x1fd0>
   14c64:	cmp	r0, #0
   14c68:	beq	14044 <__assert_fail@plt+0x2c74>
   14c6c:	ldrd	r0, [r9, #-112]	; 0xffffff90
   14c70:	cmp	r0, #0
   14c74:	sbcs	r3, r1, #0
   14c78:	ldr	r3, [sp, #60]	; 0x3c
   14c7c:	ldr	ip, [r3, #24]
   14c80:	blt	15d08 <__assert_fail@plt+0x4938>
   14c84:	cmp	ip, #0
   14c88:	blt	15e18 <__assert_fail@plt+0x4a48>
   14c8c:	mvn	r4, #-2147483648	; 0x80000000
   14c90:	mov	r5, #0
   14c94:	cmp	r4, r0
   14c98:	sbcs	r3, r5, r1
   14c9c:	bge	15d60 <__assert_fail@plt+0x4990>
   14ca0:	ldr	r3, [sp, #60]	; 0x3c
   14ca4:	add	ip, ip, r0
   14ca8:	mov	r0, #1
   14cac:	str	ip, [r3, #24]
   14cb0:	b	14048 <__assert_fail@plt+0x2c78>
   14cb4:	mov	r1, #1
   14cb8:	ldrd	r2, [r9]
   14cbc:	str	r1, [sp, #44]	; 0x2c
   14cc0:	ldr	r1, [r9, #48]	; 0x30
   14cc4:	ldr	r7, [sp, #60]	; 0x3c
   14cc8:	str	r1, [sp, #40]	; 0x28
   14ccc:	ldrd	r0, [r9, #40]	; 0x28
   14cd0:	ldr	ip, [pc, #-432]	; 14b28 <__assert_fail@plt+0x3758>
   14cd4:	strd	r0, [sp, #32]
   14cd8:	ldrd	r4, [r9, #32]
   14cdc:	str	ip, [r7, #24]
   14ce0:	mov	r0, r7
   14ce4:	strd	r4, [sp, #24]
   14ce8:	ldrd	r4, [r9, #24]
   14cec:	strd	r4, [sp, #16]
   14cf0:	ldrd	r4, [r9, #16]
   14cf4:	strd	r4, [sp, #8]
   14cf8:	ldrd	r4, [r9, #8]
   14cfc:	strd	r4, [sp]
   14d00:	bl	12b14 <__assert_fail@plt+0x1744>
   14d04:	cmp	r0, #0
   14d08:	beq	14044 <__assert_fail@plt+0x2c74>
   14d0c:	mov	r2, #5
   14d10:	ldr	r1, [pc, #-528]	; 14b08 <__assert_fail@plt+0x3738>
   14d14:	mov	r0, #0
   14d18:	bl	11130 <dcgettext@plt>
   14d1c:	ldrb	r3, [r7, #181]	; 0xb5
   14d20:	cmp	r3, #0
   14d24:	moveq	r7, #33	; 0x21
   14d28:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14d2c:	ldr	r1, [sp, #60]	; 0x3c
   14d30:	bl	13624 <__assert_fail@plt+0x2254>
   14d34:	mov	r7, #33	; 0x21
   14d38:	b	143c4 <__assert_fail@plt+0x2ff4>
   14d3c:	ldr	lr, [sp, #60]	; 0x3c
   14d40:	ldrd	r2, [r9, #-160]	; 0xffffff60
   14d44:	sub	r1, r9, #272	; 0x110
   14d48:	ldr	ip, [r9, #-56]	; 0xffffffc8
   14d4c:	ldrd	r0, [r1]
   14d50:	strd	r2, [lr, #80]	; 0x50
   14d54:	ldr	r2, [r9, #-52]	; 0xffffffcc
   14d58:	ldr	r3, [r9]
   14d5c:	strd	r0, [lr, #72]	; 0x48
   14d60:	str	ip, [lr, #88]	; 0x58
   14d64:	str	r2, [lr, #92]	; 0x5c
   14d68:	str	r3, [lr, #28]
   14d6c:	mov	r7, #20
   14d70:	b	143c4 <__assert_fail@plt+0x2ff4>
   14d74:	ldr	ip, [sp, #60]	; 0x3c
   14d78:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14d7c:	ldrd	r0, [r9, #-160]	; 0xffffff60
   14d80:	mov	r7, #19
   14d84:	strd	r2, [ip, #80]	; 0x50
   14d88:	ldr	r2, [r9]
   14d8c:	mov	r3, #0
   14d90:	strd	r0, [ip, #72]	; 0x48
   14d94:	str	r2, [ip, #28]
   14d98:	str	r3, [ip, #88]	; 0x58
   14d9c:	str	r3, [ip, #92]	; 0x5c
   14da0:	b	143c4 <__assert_fail@plt+0x2ff4>
   14da4:	ldr	ip, [sp, #60]	; 0x3c
   14da8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   14dac:	mov	r0, #0
   14db0:	mov	r1, #0
   14db4:	strd	r2, [ip, #72]	; 0x48
   14db8:	ldr	r2, [r9]
   14dbc:	mov	r3, #0
   14dc0:	strd	r0, [ip, #80]	; 0x50
   14dc4:	str	r2, [ip, #28]
   14dc8:	str	r3, [ip, #88]	; 0x58
   14dcc:	str	r3, [ip, #92]	; 0x5c
   14dd0:	mov	r7, #18
   14dd4:	b	143c4 <__assert_fail@plt+0x2ff4>
   14dd8:	mov	r2, #5
   14ddc:	ldr	r1, [pc, #-740]	; 14b00 <__assert_fail@plt+0x3730>
   14de0:	mov	r0, #0
   14de4:	bl	11130 <dcgettext@plt>
   14de8:	ldr	r3, [sp, #60]	; 0x3c
   14dec:	ldrb	r3, [r3, #181]	; 0xb5
   14df0:	cmp	r3, #0
   14df4:	moveq	r7, #15
   14df8:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14dfc:	ldr	r1, [sp, #60]	; 0x3c
   14e00:	bl	13624 <__assert_fail@plt+0x2254>
   14e04:	mov	r7, #15
   14e08:	b	143c4 <__assert_fail@plt+0x2ff4>
   14e0c:	mov	r2, #5
   14e10:	ldr	r1, [pc, #-788]	; 14b04 <__assert_fail@plt+0x3734>
   14e14:	mov	r0, #0
   14e18:	bl	11130 <dcgettext@plt>
   14e1c:	ldr	r3, [sp, #60]	; 0x3c
   14e20:	ldrb	r3, [r3, #181]	; 0xb5
   14e24:	cmp	r3, #0
   14e28:	moveq	r7, #14
   14e2c:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14e30:	ldr	r1, [sp, #60]	; 0x3c
   14e34:	bl	13990 <__assert_fail@plt+0x25c0>
   14e38:	mov	r7, #14
   14e3c:	b	143c4 <__assert_fail@plt+0x2ff4>
   14e40:	mov	r2, #5
   14e44:	ldr	r1, [pc, #-836]	; 14b08 <__assert_fail@plt+0x3738>
   14e48:	mov	r0, #0
   14e4c:	bl	11130 <dcgettext@plt>
   14e50:	ldr	r3, [sp, #60]	; 0x3c
   14e54:	ldrb	r3, [r3, #181]	; 0xb5
   14e58:	cmp	r3, #0
   14e5c:	moveq	r7, #13
   14e60:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14e64:	ldr	r1, [sp, #60]	; 0x3c
   14e68:	bl	13624 <__assert_fail@plt+0x2254>
   14e6c:	mov	r7, #13
   14e70:	b	143c4 <__assert_fail@plt+0x2ff4>
   14e74:	ldr	r4, [sp, #60]	; 0x3c
   14e78:	mov	r2, #5
   14e7c:	ldr	r1, [pc, #-888]	; 14b0c <__assert_fail@plt+0x373c>
   14e80:	ldr	r3, [r4, #160]	; 0xa0
   14e84:	mov	r0, #0
   14e88:	add	r3, r3, #1
   14e8c:	str	r3, [r4, #160]	; 0xa0
   14e90:	bl	11130 <dcgettext@plt>
   14e94:	ldrb	r3, [r4, #181]	; 0xb5
   14e98:	cmp	r3, #0
   14e9c:	moveq	r7, #12
   14ea0:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14ea4:	ldr	r1, [sp, #60]	; 0x3c
   14ea8:	bl	13990 <__assert_fail@plt+0x25c0>
   14eac:	mov	r7, #12
   14eb0:	b	143c4 <__assert_fail@plt+0x2ff4>
   14eb4:	ldr	r4, [sp, #60]	; 0x3c
   14eb8:	mov	r2, #5
   14ebc:	ldr	r1, [pc, #-948]	; 14b10 <__assert_fail@plt+0x3740>
   14ec0:	ldr	r3, [r4, #156]	; 0x9c
   14ec4:	mov	r0, #0
   14ec8:	add	r3, r3, #1
   14ecc:	str	r3, [r4, #156]	; 0x9c
   14ed0:	bl	11130 <dcgettext@plt>
   14ed4:	ldrb	r3, [r4, #181]	; 0xb5
   14ed8:	cmp	r3, #0
   14edc:	moveq	r7, #11
   14ee0:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14ee4:	ldr	r1, [sp, #60]	; 0x3c
   14ee8:	bl	13990 <__assert_fail@plt+0x25c0>
   14eec:	mov	r7, #11
   14ef0:	b	143c4 <__assert_fail@plt+0x2ff4>
   14ef4:	ldr	r4, [sp, #60]	; 0x3c
   14ef8:	mov	r2, #5
   14efc:	ldr	r1, [pc, #-1008]	; 14b14 <__assert_fail@plt+0x3744>
   14f00:	ldr	r3, [r4, #176]	; 0xb0
   14f04:	mov	r0, #0
   14f08:	add	r3, r3, #1
   14f0c:	str	r3, [r4, #176]	; 0xb0
   14f10:	bl	11130 <dcgettext@plt>
   14f14:	ldrb	r3, [r4, #181]	; 0xb5
   14f18:	cmp	r3, #0
   14f1c:	moveq	r7, #10
   14f20:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14f24:	ldr	r1, [sp, #60]	; 0x3c
   14f28:	bl	13990 <__assert_fail@plt+0x25c0>
   14f2c:	mov	r7, #10
   14f30:	b	143c4 <__assert_fail@plt+0x2ff4>
   14f34:	ldr	r4, [sp, #60]	; 0x3c
   14f38:	mov	r2, #5
   14f3c:	ldr	r1, [pc, #-1068]	; 14b18 <__assert_fail@plt+0x3748>
   14f40:	ldr	r3, [r4, #164]	; 0xa4
   14f44:	mov	r0, #0
   14f48:	add	r3, r3, #1
   14f4c:	str	r3, [r4, #164]	; 0xa4
   14f50:	bl	11130 <dcgettext@plt>
   14f54:	ldrb	r3, [r4, #181]	; 0xb5
   14f58:	cmp	r3, #0
   14f5c:	moveq	r7, #9
   14f60:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14f64:	ldr	r1, [sp, #60]	; 0x3c
   14f68:	bl	13990 <__assert_fail@plt+0x25c0>
   14f6c:	mov	r7, #9
   14f70:	b	143c4 <__assert_fail@plt+0x2ff4>
   14f74:	ldr	r4, [sp, #60]	; 0x3c
   14f78:	mov	r2, #5
   14f7c:	ldr	r1, [pc, #-1128]	; 14b1c <__assert_fail@plt+0x374c>
   14f80:	ldr	r3, [r4, #172]	; 0xac
   14f84:	mov	r0, #0
   14f88:	add	r3, r3, #1
   14f8c:	str	r3, [r4, #172]	; 0xac
   14f90:	bl	11130 <dcgettext@plt>
   14f94:	ldrb	r3, [r4, #181]	; 0xb5
   14f98:	cmp	r3, #0
   14f9c:	moveq	r7, #8
   14fa0:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14fa4:	ldr	r1, [sp, #60]	; 0x3c
   14fa8:	bl	13990 <__assert_fail@plt+0x25c0>
   14fac:	mov	r7, #8
   14fb0:	b	143c4 <__assert_fail@plt+0x2ff4>
   14fb4:	ldr	r4, [sp, #60]	; 0x3c
   14fb8:	ldr	r1, [pc, #-1184]	; 14b20 <__assert_fail@plt+0x3750>
   14fbc:	mov	r0, #0
   14fc0:	ldr	r2, [r4, #172]	; 0xac
   14fc4:	ldr	r3, [r4, #156]	; 0x9c
   14fc8:	add	r2, r2, #1
   14fcc:	add	r3, r3, #1
   14fd0:	str	r2, [r4, #172]	; 0xac
   14fd4:	str	r3, [r4, #156]	; 0x9c
   14fd8:	mov	r2, #5
   14fdc:	bl	11130 <dcgettext@plt>
   14fe0:	ldrb	r3, [r4, #181]	; 0xb5
   14fe4:	cmp	r3, #0
   14fe8:	moveq	r7, #7
   14fec:	beq	143c4 <__assert_fail@plt+0x2ff4>
   14ff0:	ldr	r1, [sp, #60]	; 0x3c
   14ff4:	bl	13990 <__assert_fail@plt+0x25c0>
   14ff8:	mov	r7, #7
   14ffc:	b	143c4 <__assert_fail@plt+0x2ff4>
   15000:	sub	r3, r9, #48	; 0x30
   15004:	ldr	r4, [sp, #60]	; 0x3c
   15008:	ldm	r3, {r0, r1, r2, r3}
   1500c:	sub	ip, r9, #56	; 0x38
   15010:	stm	sp, {r0, r1, r2, r3}
   15014:	mov	r0, r4
   15018:	ldm	ip, {r2, r3}
   1501c:	bl	127a8 <__assert_fail@plt+0x13d8>
   15020:	mov	r1, #1
   15024:	ldrd	r2, [r9]
   15028:	str	r1, [sp, #44]	; 0x2c
   1502c:	ldr	r1, [r9, #48]	; 0x30
   15030:	mov	r0, r4
   15034:	str	r1, [sp, #40]	; 0x28
   15038:	ldrd	r4, [r9, #40]	; 0x28
   1503c:	strd	r4, [sp, #32]
   15040:	ldrd	r4, [r9, #32]
   15044:	strd	r4, [sp, #24]
   15048:	ldrd	r4, [r9, #24]
   1504c:	strd	r4, [sp, #16]
   15050:	ldrd	r4, [r9, #16]
   15054:	strd	r4, [sp, #8]
   15058:	ldrd	r4, [r9, #8]
   1505c:	strd	r4, [sp]
   15060:	bl	12b14 <__assert_fail@plt+0x1744>
   15064:	cmp	r0, #0
   15068:	beq	14044 <__assert_fail@plt+0x2c74>
   1506c:	mov	r7, #89	; 0x59
   15070:	b	143c4 <__assert_fail@plt+0x2ff4>
   15074:	add	r3, r9, #8
   15078:	mov	r7, #88	; 0x58
   1507c:	ldm	r3, {r0, r1, r2, r3}
   15080:	stm	sp, {r0, r1, r2, r3}
   15084:	ldr	r0, [sp, #60]	; 0x3c
   15088:	ldm	r9, {r2, r3}
   1508c:	bl	127a8 <__assert_fail@plt+0x13d8>
   15090:	b	143c4 <__assert_fail@plt+0x2ff4>
   15094:	ldrd	r0, [r9, #8]
   15098:	mov	r3, #0
   1509c:	mvn	r2, #0
   150a0:	adds	r4, r0, #-2147483648	; 0x80000000
   150a4:	adc	r5, r1, #0
   150a8:	cmp	r5, r3
   150ac:	cmpeq	r4, r2
   150b0:	bhi	14044 <__assert_fail@plt+0x2c74>
   150b4:	mov	r3, #0
   150b8:	str	r0, [sp, #248]	; 0xf8
   150bc:	str	r3, [sp, #252]	; 0xfc
   150c0:	mov	r7, #87	; 0x57
   150c4:	b	143c4 <__assert_fail@plt+0x2ff4>
   150c8:	ldrd	r0, [r9, #8]
   150cc:	mov	r3, #0
   150d0:	mvn	r2, #0
   150d4:	adds	r4, r0, #-2147483648	; 0x80000000
   150d8:	adc	r5, r1, #0
   150dc:	cmp	r5, r3
   150e0:	cmpeq	r4, r2
   150e4:	bhi	14044 <__assert_fail@plt+0x2c74>
   150e8:	mov	r3, #0
   150ec:	str	r0, [sp, #248]	; 0xf8
   150f0:	str	r3, [sp, #252]	; 0xfc
   150f4:	mov	r7, #85	; 0x55
   150f8:	b	143c4 <__assert_fail@plt+0x2ff4>
   150fc:	mov	r4, #0
   15100:	mov	r5, #0
   15104:	mov	r2, #56	; 0x38
   15108:	mov	r1, #0
   1510c:	mov	r0, r8
   15110:	strd	r4, [sp, #64]	; 0x40
   15114:	bl	112c8 <memset@plt>
   15118:	ldrd	r2, [r9]
   1511c:	str	r4, [sp, #84]	; 0x54
   15120:	str	r5, [sp, #88]	; 0x58
   15124:	strd	r2, [sp, #48]	; 0x30
   15128:	mov	r3, #0
   1512c:	str	r4, [sp, #92]	; 0x5c
   15130:	str	r5, [sp, #96]	; 0x60
   15134:	str	r4, [sp, #76]	; 0x4c
   15138:	str	r5, [sp, #80]	; 0x50
   1513c:	mov	r7, #81	; 0x51
   15140:	str	r3, [sp, #72]	; 0x48
   15144:	b	143c4 <__assert_fail@plt+0x2ff4>
   15148:	mov	r2, #56	; 0x38
   1514c:	mov	r1, #0
   15150:	mov	r0, r8
   15154:	bl	112c8 <memset@plt>
   15158:	mov	r3, #0
   1515c:	str	r3, [sp, #84]	; 0x54
   15160:	str	r3, [sp, #88]	; 0x58
   15164:	str	r3, [sp, #48]	; 0x30
   15168:	str	r3, [sp, #92]	; 0x5c
   1516c:	str	r3, [sp, #52]	; 0x34
   15170:	str	r3, [sp, #96]	; 0x60
   15174:	str	r3, [sp, #76]	; 0x4c
   15178:	str	r3, [sp, #80]	; 0x50
   1517c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15180:	mov	r7, #80	; 0x50
   15184:	strd	r2, [sp, #64]	; 0x40
   15188:	mov	r3, #0
   1518c:	str	r3, [sp, #72]	; 0x48
   15190:	b	143c4 <__assert_fail@plt+0x2ff4>
   15194:	mov	r4, #0
   15198:	mov	r5, #0
   1519c:	mov	r2, #56	; 0x38
   151a0:	mov	r1, #0
   151a4:	mov	r0, r8
   151a8:	strd	r4, [sp, #64]	; 0x40
   151ac:	bl	112c8 <memset@plt>
   151b0:	ldr	r3, [r9, #-48]	; 0xffffffd0
   151b4:	str	r4, [sp, #92]	; 0x5c
   151b8:	str	r3, [sp, #84]	; 0x54
   151bc:	ldr	r3, [r9, #-44]	; 0xffffffd4
   151c0:	str	r5, [sp, #96]	; 0x60
   151c4:	str	r3, [sp, #88]	; 0x58
   151c8:	mov	r3, #0
   151cc:	strd	r4, [sp, #48]	; 0x30
   151d0:	str	r4, [sp, #76]	; 0x4c
   151d4:	str	r5, [sp, #80]	; 0x50
   151d8:	mov	r7, #79	; 0x4f
   151dc:	str	r3, [sp, #72]	; 0x48
   151e0:	b	143c4 <__assert_fail@plt+0x2ff4>
   151e4:	mov	r4, #0
   151e8:	mov	r5, #0
   151ec:	mov	r2, #56	; 0x38
   151f0:	mov	r1, #0
   151f4:	mov	r0, r8
   151f8:	strd	r4, [sp, #64]	; 0x40
   151fc:	bl	112c8 <memset@plt>
   15200:	mov	r3, r5
   15204:	mov	r2, r4
   15208:	str	r4, [sp, #84]	; 0x54
   1520c:	strd	r2, [sp, #48]	; 0x30
   15210:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15214:	str	r5, [sp, #88]	; 0x58
   15218:	str	r3, [sp, #92]	; 0x5c
   1521c:	ldr	r3, [r9, #-44]	; 0xffffffd4
   15220:	str	r4, [sp, #76]	; 0x4c
   15224:	str	r3, [sp, #96]	; 0x60
   15228:	mov	r3, #0
   1522c:	str	r5, [sp, #80]	; 0x50
   15230:	mov	r7, #78	; 0x4e
   15234:	str	r3, [sp, #72]	; 0x48
   15238:	b	143c4 <__assert_fail@plt+0x2ff4>
   1523c:	ldrd	r2, [r9, #8]
   15240:	mov	r7, #91	; 0x5b
   15244:	strd	r2, [r6, #-8]
   15248:	b	143c4 <__assert_fail@plt+0x2ff4>
   1524c:	mvn	r2, #0
   15250:	mvn	r3, #0
   15254:	mov	r7, #90	; 0x5a
   15258:	strd	r2, [r6, #-8]
   1525c:	b	143c4 <__assert_fail@plt+0x2ff4>
   15260:	ldr	r4, [sp, #60]	; 0x3c
   15264:	ldm	r9, {r0, r1}
   15268:	add	r3, r4, #88	; 0x58
   1526c:	mov	ip, #1
   15270:	stm	r3, {r0, r1}
   15274:	mov	r2, #5
   15278:	strb	ip, [r4, #152]	; 0x98
   1527c:	ldr	r1, [pc, #-1888]	; 14b24 <__assert_fail@plt+0x3754>
   15280:	mov	r0, #0
   15284:	bl	11130 <dcgettext@plt>
   15288:	ldrb	r3, [r4, #181]	; 0xb5
   1528c:	cmp	r3, #0
   15290:	moveq	r7, #4
   15294:	beq	143c4 <__assert_fail@plt+0x2ff4>
   15298:	ldr	r1, [sp, #60]	; 0x3c
   1529c:	bl	13990 <__assert_fail@plt+0x25c0>
   152a0:	mov	r7, #4
   152a4:	b	143c4 <__assert_fail@plt+0x2ff4>
   152a8:	mov	r2, #56	; 0x38
   152ac:	mov	r1, #0
   152b0:	mov	r0, r8
   152b4:	bl	112c8 <memset@plt>
   152b8:	ldr	r3, [r9, #-56]	; 0xffffffc8
   152bc:	mov	r2, #0
   152c0:	mov	r0, r3
   152c4:	asr	r1, r3, #31
   152c8:	ldr	r3, [r9, #-52]	; 0xffffffcc
   152cc:	str	r2, [sp, #84]	; 0x54
   152d0:	str	r2, [sp, #88]	; 0x58
   152d4:	str	r2, [sp, #48]	; 0x30
   152d8:	str	r2, [sp, #92]	; 0x5c
   152dc:	str	r2, [sp, #52]	; 0x34
   152e0:	str	r2, [sp, #96]	; 0x60
   152e4:	str	r2, [sp, #76]	; 0x4c
   152e8:	str	r2, [sp, #80]	; 0x50
   152ec:	strd	r0, [sp, #64]	; 0x40
   152f0:	str	r3, [sp, #72]	; 0x48
   152f4:	mov	r7, #72	; 0x48
   152f8:	b	143c4 <__assert_fail@plt+0x2ff4>
   152fc:	mov	r2, #56	; 0x38
   15300:	mov	r1, #0
   15304:	mov	r0, r8
   15308:	bl	112c8 <memset@plt>
   1530c:	ldr	r3, [r9, #-56]	; 0xffffffc8
   15310:	mov	r2, #0
   15314:	mov	r0, r3
   15318:	asr	r1, r3, #31
   1531c:	ldr	r3, [r9, #-52]	; 0xffffffcc
   15320:	str	r2, [sp, #84]	; 0x54
   15324:	str	r2, [sp, #88]	; 0x58
   15328:	str	r2, [sp, #48]	; 0x30
   1532c:	str	r2, [sp, #92]	; 0x5c
   15330:	str	r2, [sp, #52]	; 0x34
   15334:	str	r2, [sp, #96]	; 0x60
   15338:	str	r2, [sp, #76]	; 0x4c
   1533c:	str	r2, [sp, #80]	; 0x50
   15340:	strd	r0, [sp, #64]	; 0x40
   15344:	str	r3, [sp, #72]	; 0x48
   15348:	mov	r7, #71	; 0x47
   1534c:	b	143c4 <__assert_fail@plt+0x2ff4>
   15350:	mov	r2, #56	; 0x38
   15354:	mov	r1, #0
   15358:	mov	r0, r8
   1535c:	bl	112c8 <memset@plt>
   15360:	mov	r3, #0
   15364:	str	r3, [sp, #84]	; 0x54
   15368:	str	r3, [sp, #88]	; 0x58
   1536c:	str	r3, [sp, #48]	; 0x30
   15370:	str	r3, [sp, #92]	; 0x5c
   15374:	str	r3, [sp, #52]	; 0x34
   15378:	str	r3, [sp, #96]	; 0x60
   1537c:	str	r3, [sp, #76]	; 0x4c
   15380:	str	r3, [sp, #80]	; 0x50
   15384:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15388:	mov	r7, #70	; 0x46
   1538c:	strd	r2, [sp, #64]	; 0x40
   15390:	mov	r3, #0
   15394:	str	r3, [sp, #72]	; 0x48
   15398:	b	143c4 <__assert_fail@plt+0x2ff4>
   1539c:	mov	r2, #56	; 0x38
   153a0:	mov	r1, #0
   153a4:	mov	r0, r8
   153a8:	bl	112c8 <memset@plt>
   153ac:	mov	r3, #0
   153b0:	str	r3, [sp, #84]	; 0x54
   153b4:	str	r3, [sp, #88]	; 0x58
   153b8:	str	r3, [sp, #48]	; 0x30
   153bc:	str	r3, [sp, #92]	; 0x5c
   153c0:	str	r3, [sp, #52]	; 0x34
   153c4:	str	r3, [sp, #96]	; 0x60
   153c8:	str	r3, [sp, #76]	; 0x4c
   153cc:	str	r3, [sp, #80]	; 0x50
   153d0:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   153d4:	mov	r7, #69	; 0x45
   153d8:	strd	r2, [sp, #64]	; 0x40
   153dc:	mov	r3, #0
   153e0:	str	r3, [sp, #72]	; 0x48
   153e4:	b	143c4 <__assert_fail@plt+0x2ff4>
   153e8:	mov	r4, #0
   153ec:	mov	r5, #0
   153f0:	mov	r2, #56	; 0x38
   153f4:	mov	r1, #0
   153f8:	mov	r0, r8
   153fc:	strd	r4, [sp, #64]	; 0x40
   15400:	bl	112c8 <memset@plt>
   15404:	mov	r3, #0
   15408:	str	r3, [sp, #72]	; 0x48
   1540c:	mov	r3, #1
   15410:	str	r3, [sp, #84]	; 0x54
   15414:	mov	r3, #0
   15418:	str	r4, [sp, #92]	; 0x5c
   1541c:	str	r5, [sp, #96]	; 0x60
   15420:	strd	r4, [sp, #48]	; 0x30
   15424:	str	r4, [sp, #76]	; 0x4c
   15428:	str	r5, [sp, #80]	; 0x50
   1542c:	mov	r7, #68	; 0x44
   15430:	str	r3, [sp, #88]	; 0x58
   15434:	b	143c4 <__assert_fail@plt+0x2ff4>
   15438:	mov	r4, #0
   1543c:	mov	r5, #0
   15440:	mov	r2, #56	; 0x38
   15444:	mov	r1, #0
   15448:	mov	r0, r8
   1544c:	strd	r4, [sp, #64]	; 0x40
   15450:	bl	112c8 <memset@plt>
   15454:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15458:	str	r4, [sp, #92]	; 0x5c
   1545c:	str	r3, [sp, #84]	; 0x54
   15460:	ldr	r3, [r9, #-44]	; 0xffffffd4
   15464:	str	r5, [sp, #96]	; 0x60
   15468:	str	r3, [sp, #88]	; 0x58
   1546c:	mov	r3, #0
   15470:	strd	r4, [sp, #48]	; 0x30
   15474:	str	r4, [sp, #76]	; 0x4c
   15478:	str	r5, [sp, #80]	; 0x50
   1547c:	mov	r7, #67	; 0x43
   15480:	str	r3, [sp, #72]	; 0x48
   15484:	b	143c4 <__assert_fail@plt+0x2ff4>
   15488:	mov	r4, #0
   1548c:	mov	r5, #0
   15490:	mov	r2, #56	; 0x38
   15494:	mov	r1, #0
   15498:	mov	r0, r8
   1549c:	strd	r4, [sp, #64]	; 0x40
   154a0:	bl	112c8 <memset@plt>
   154a4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   154a8:	str	r4, [sp, #92]	; 0x5c
   154ac:	str	r3, [sp, #84]	; 0x54
   154b0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   154b4:	str	r5, [sp, #96]	; 0x60
   154b8:	str	r3, [sp, #88]	; 0x58
   154bc:	mov	r3, #0
   154c0:	strd	r4, [sp, #48]	; 0x30
   154c4:	str	r4, [sp, #76]	; 0x4c
   154c8:	str	r5, [sp, #80]	; 0x50
   154cc:	mov	r7, #66	; 0x42
   154d0:	str	r3, [sp, #72]	; 0x48
   154d4:	b	143c4 <__assert_fail@plt+0x2ff4>
   154d8:	mov	r4, #0
   154dc:	mov	r5, #0
   154e0:	mov	r2, #56	; 0x38
   154e4:	mov	r1, #0
   154e8:	mov	r0, r8
   154ec:	strd	r4, [sp, #64]	; 0x40
   154f0:	bl	112c8 <memset@plt>
   154f4:	mov	r3, r5
   154f8:	mov	r2, r4
   154fc:	str	r4, [sp, #84]	; 0x54
   15500:	strd	r2, [sp, #48]	; 0x30
   15504:	mov	r3, #0
   15508:	str	r3, [sp, #72]	; 0x48
   1550c:	mov	r3, #1
   15510:	str	r3, [sp, #92]	; 0x5c
   15514:	mov	r3, #0
   15518:	str	r5, [sp, #88]	; 0x58
   1551c:	str	r4, [sp, #76]	; 0x4c
   15520:	str	r5, [sp, #80]	; 0x50
   15524:	mov	r7, #65	; 0x41
   15528:	str	r3, [sp, #96]	; 0x60
   1552c:	b	143c4 <__assert_fail@plt+0x2ff4>
   15530:	mov	r4, #0
   15534:	mov	r5, #0
   15538:	mov	r2, #56	; 0x38
   1553c:	mov	r1, #0
   15540:	mov	r0, r8
   15544:	strd	r4, [sp, #64]	; 0x40
   15548:	bl	112c8 <memset@plt>
   1554c:	mov	r3, r5
   15550:	mov	r2, r4
   15554:	str	r4, [sp, #84]	; 0x54
   15558:	strd	r2, [sp, #48]	; 0x30
   1555c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15560:	str	r5, [sp, #88]	; 0x58
   15564:	str	r3, [sp, #92]	; 0x5c
   15568:	ldr	r3, [r9, #-44]	; 0xffffffd4
   1556c:	str	r4, [sp, #76]	; 0x4c
   15570:	str	r3, [sp, #96]	; 0x60
   15574:	mov	r3, #0
   15578:	str	r5, [sp, #80]	; 0x50
   1557c:	mov	r7, #64	; 0x40
   15580:	str	r3, [sp, #72]	; 0x48
   15584:	b	143c4 <__assert_fail@plt+0x2ff4>
   15588:	mov	r4, #0
   1558c:	mov	r5, #0
   15590:	mov	r2, #56	; 0x38
   15594:	mov	r1, #0
   15598:	mov	r0, r8
   1559c:	strd	r4, [sp, #64]	; 0x40
   155a0:	bl	112c8 <memset@plt>
   155a4:	mov	r3, r5
   155a8:	mov	r2, r4
   155ac:	str	r4, [sp, #84]	; 0x54
   155b0:	strd	r2, [sp, #48]	; 0x30
   155b4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   155b8:	str	r5, [sp, #88]	; 0x58
   155bc:	str	r3, [sp, #92]	; 0x5c
   155c0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   155c4:	str	r4, [sp, #76]	; 0x4c
   155c8:	str	r3, [sp, #96]	; 0x60
   155cc:	mov	r3, #0
   155d0:	str	r5, [sp, #80]	; 0x50
   155d4:	mov	r7, #63	; 0x3f
   155d8:	str	r3, [sp, #72]	; 0x48
   155dc:	b	143c4 <__assert_fail@plt+0x2ff4>
   155e0:	mov	r4, #0
   155e4:	mov	r5, #0
   155e8:	mov	r2, #56	; 0x38
   155ec:	mov	r1, #0
   155f0:	mov	r0, r8
   155f4:	strd	r4, [sp, #64]	; 0x40
   155f8:	bl	112c8 <memset@plt>
   155fc:	ldrd	r2, [r9]
   15600:	str	r4, [sp, #84]	; 0x54
   15604:	str	r5, [sp, #88]	; 0x58
   15608:	strd	r2, [sp, #48]	; 0x30
   1560c:	mov	r3, #0
   15610:	str	r4, [sp, #92]	; 0x5c
   15614:	str	r5, [sp, #96]	; 0x60
   15618:	str	r4, [sp, #76]	; 0x4c
   1561c:	str	r5, [sp, #80]	; 0x50
   15620:	mov	r7, #62	; 0x3e
   15624:	str	r3, [sp, #72]	; 0x48
   15628:	b	143c4 <__assert_fail@plt+0x2ff4>
   1562c:	mov	r2, #56	; 0x38
   15630:	mov	r1, #0
   15634:	mov	r0, r8
   15638:	bl	112c8 <memset@plt>
   1563c:	ldrd	r4, [r9]
   15640:	cmp	r4, #0
   15644:	sbcs	r3, r5, #0
   15648:	blt	15c68 <__assert_fail@plt+0x4898>
   1564c:	orrs	r3, r4, r5
   15650:	beq	15698 <__assert_fail@plt+0x42c8>
   15654:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15658:	cmp	r2, #0
   1565c:	strd	r2, [sp, #48]	; 0x30
   15660:	sbcs	r3, r3, #0
   15664:	blt	15ec4 <__assert_fail@plt+0x4af4>
   15668:	mov	r2, r4
   1566c:	mov	r3, r5
   15670:	mvn	r0, #0
   15674:	mvn	r1, #-2147483648	; 0x80000000
   15678:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   1567c:	ldrd	r2, [sp, #48]	; 0x30
   15680:	cmp	r0, r2
   15684:	sbcs	r3, r1, r3
   15688:	movlt	r3, #1
   1568c:	movge	r3, #0
   15690:	cmp	r3, #0
   15694:	bne	14044 <__assert_fail@plt+0x2c74>
   15698:	ldr	r3, [r9, #-48]	; 0xffffffd0
   1569c:	mov	r0, #0
   156a0:	mov	r1, #0
   156a4:	ldr	r2, [r9, #-44]	; 0xffffffd4
   156a8:	strd	r0, [sp, #64]	; 0x40
   156ac:	umull	r0, r1, r3, r4
   156b0:	mul	r2, r4, r2
   156b4:	strd	r0, [sp, #48]	; 0x30
   156b8:	mla	r3, r3, r5, r2
   156bc:	ldr	r2, [sp, #52]	; 0x34
   156c0:	mov	r0, #0
   156c4:	add	r3, r3, r2
   156c8:	mov	r1, #0
   156cc:	str	r3, [sp, #52]	; 0x34
   156d0:	mov	r3, #0
   156d4:	str	r0, [sp, #84]	; 0x54
   156d8:	str	r1, [sp, #88]	; 0x58
   156dc:	str	r0, [sp, #92]	; 0x5c
   156e0:	str	r1, [sp, #96]	; 0x60
   156e4:	str	r0, [sp, #76]	; 0x4c
   156e8:	str	r1, [sp, #80]	; 0x50
   156ec:	mov	r7, #61	; 0x3d
   156f0:	str	r3, [sp, #72]	; 0x48
   156f4:	b	143c4 <__assert_fail@plt+0x2ff4>
   156f8:	ldr	r2, [sp, #60]	; 0x3c
   156fc:	ldr	r3, [pc, #-3036]	; 14b28 <__assert_fail@plt+0x3758>
   15700:	mov	r7, #31
   15704:	str	r3, [r2, #24]
   15708:	b	143c4 <__assert_fail@plt+0x2ff4>
   1570c:	ldr	r2, [sp, #60]	; 0x3c
   15710:	ldr	r3, [r9]
   15714:	mov	r7, #30
   15718:	str	r3, [r2, #24]
   1571c:	b	143c4 <__assert_fail@plt+0x2ff4>
   15720:	ldr	r1, [sp, #60]	; 0x3c
   15724:	mov	r2, #1
   15728:	mov	r7, #29
   1572c:	ldr	r3, [r1, #168]	; 0xa8
   15730:	str	r2, [r1, #20]
   15734:	add	r3, r3, r2
   15738:	str	r3, [r1, #168]	; 0xa8
   1573c:	b	143c4 <__assert_fail@plt+0x2ff4>
   15740:	ldr	r2, [sp, #60]	; 0x3c
   15744:	ldr	r3, [r9]
   15748:	mov	r7, #28
   1574c:	str	r3, [r2, #20]
   15750:	b	143c4 <__assert_fail@plt+0x2ff4>
   15754:	mov	r2, #56	; 0x38
   15758:	mov	r1, #0
   1575c:	mov	r0, r8
   15760:	bl	112c8 <memset@plt>
   15764:	ldrd	r4, [r9]
   15768:	cmp	r4, #0
   1576c:	sbcs	r3, r5, #0
   15770:	blt	15c18 <__assert_fail@plt+0x4848>
   15774:	orrs	r3, r4, r5
   15778:	beq	157c0 <__assert_fail@plt+0x43f0>
   1577c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15780:	cmp	r2, #0
   15784:	strd	r2, [sp, #48]	; 0x30
   15788:	sbcs	r3, r3, #0
   1578c:	blt	15e84 <__assert_fail@plt+0x4ab4>
   15790:	mov	r2, r4
   15794:	mov	r3, r5
   15798:	mvn	r0, #0
   1579c:	mvn	r1, #-2147483648	; 0x80000000
   157a0:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   157a4:	ldrd	r2, [sp, #48]	; 0x30
   157a8:	cmp	r0, r2
   157ac:	sbcs	r3, r1, r3
   157b0:	movlt	r3, #1
   157b4:	movge	r3, #0
   157b8:	cmp	r3, #0
   157bc:	bne	14044 <__assert_fail@plt+0x2c74>
   157c0:	ldr	r3, [r9, #-48]	; 0xffffffd0
   157c4:	mov	r0, #0
   157c8:	mov	r1, #0
   157cc:	ldr	r2, [r9, #-44]	; 0xffffffd4
   157d0:	strd	r0, [sp, #64]	; 0x40
   157d4:	umull	r0, r1, r3, r4
   157d8:	mul	r2, r4, r2
   157dc:	strd	r0, [sp, #48]	; 0x30
   157e0:	mla	r3, r3, r5, r2
   157e4:	ldr	r2, [sp, #52]	; 0x34
   157e8:	mov	r0, #0
   157ec:	add	r3, r3, r2
   157f0:	mov	r1, #0
   157f4:	str	r3, [sp, #52]	; 0x34
   157f8:	mov	r3, #0
   157fc:	str	r0, [sp, #84]	; 0x54
   15800:	str	r1, [sp, #88]	; 0x58
   15804:	str	r0, [sp, #92]	; 0x5c
   15808:	str	r1, [sp, #96]	; 0x60
   1580c:	str	r0, [sp, #76]	; 0x4c
   15810:	str	r1, [sp, #80]	; 0x50
   15814:	mov	r7, #77	; 0x4d
   15818:	str	r3, [sp, #72]	; 0x48
   1581c:	b	143c4 <__assert_fail@plt+0x2ff4>
   15820:	mov	r4, #0
   15824:	mov	r5, #0
   15828:	mov	r2, #56	; 0x38
   1582c:	mov	r1, #0
   15830:	mov	r0, r8
   15834:	strd	r4, [sp, #64]	; 0x40
   15838:	bl	112c8 <memset@plt>
   1583c:	mov	r3, r5
   15840:	mov	r2, r4
   15844:	str	r4, [sp, #84]	; 0x54
   15848:	strd	r2, [sp, #48]	; 0x30
   1584c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   15850:	str	r5, [sp, #88]	; 0x58
   15854:	str	r3, [sp, #76]	; 0x4c
   15858:	ldr	r3, [r9, #-44]	; 0xffffffd4
   1585c:	str	r4, [sp, #92]	; 0x5c
   15860:	str	r3, [sp, #80]	; 0x50
   15864:	mov	r3, #0
   15868:	str	r5, [sp, #96]	; 0x60
   1586c:	mov	r7, #76	; 0x4c
   15870:	str	r3, [sp, #72]	; 0x48
   15874:	b	143c4 <__assert_fail@plt+0x2ff4>
   15878:	mov	r2, #56	; 0x38
   1587c:	mov	r1, #0
   15880:	mov	r0, r8
   15884:	bl	112c8 <memset@plt>
   15888:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   1588c:	mov	r0, #0
   15890:	mov	r1, #0
   15894:	strd	r2, [r6, #-8]
   15898:	mov	r3, r1
   1589c:	mov	r2, r0
   158a0:	str	r3, [sp, #96]	; 0x60
   158a4:	strd	r2, [sp, #48]	; 0x30
   158a8:	str	r3, [sp, #80]	; 0x50
   158ac:	mov	r3, #0
   158b0:	strd	r0, [sp, #64]	; 0x40
   158b4:	str	r0, [sp, #84]	; 0x54
   158b8:	str	r1, [sp, #88]	; 0x58
   158bc:	str	r0, [sp, #92]	; 0x5c
   158c0:	str	r0, [sp, #76]	; 0x4c
   158c4:	mov	r7, #75	; 0x4b
   158c8:	str	r3, [sp, #72]	; 0x48
   158cc:	b	143c4 <__assert_fail@plt+0x2ff4>
   158d0:	mov	r2, #56	; 0x38
   158d4:	mov	r1, #0
   158d8:	mov	r0, r8
   158dc:	bl	112c8 <memset@plt>
   158e0:	mov	r3, #0
   158e4:	str	r3, [sp, #84]	; 0x54
   158e8:	str	r3, [sp, #88]	; 0x58
   158ec:	str	r3, [sp, #48]	; 0x30
   158f0:	str	r3, [sp, #92]	; 0x5c
   158f4:	str	r3, [sp, #52]	; 0x34
   158f8:	str	r3, [sp, #96]	; 0x60
   158fc:	str	r3, [sp, #76]	; 0x4c
   15900:	str	r3, [sp, #80]	; 0x50
   15904:	str	r3, [sp, #72]	; 0x48
   15908:	mov	r2, #1
   1590c:	mov	r3, #0
   15910:	mov	r7, #73	; 0x49
   15914:	strd	r2, [sp, #64]	; 0x40
   15918:	b	143c4 <__assert_fail@plt+0x2ff4>
   1591c:	ldr	r7, [sp, #60]	; 0x3c
   15920:	mov	r1, #1
   15924:	ldr	r0, [r9, #-56]	; 0xffffffc8
   15928:	ldrd	r2, [r9]
   1592c:	str	r1, [sp, #44]	; 0x2c
   15930:	ldr	r1, [r9, #48]	; 0x30
   15934:	str	r0, [r7, #24]
   15938:	str	r1, [sp, #40]	; 0x28
   1593c:	ldrd	r4, [r9, #40]	; 0x28
   15940:	mov	r0, r7
   15944:	strd	r4, [sp, #32]
   15948:	ldrd	r4, [r9, #32]
   1594c:	strd	r4, [sp, #24]
   15950:	ldrd	r4, [r9, #24]
   15954:	strd	r4, [sp, #16]
   15958:	ldrd	r4, [r9, #16]
   1595c:	strd	r4, [sp, #8]
   15960:	ldrd	r4, [r9, #8]
   15964:	strd	r4, [sp]
   15968:	bl	12b14 <__assert_fail@plt+0x1744>
   1596c:	cmp	r0, #0
   15970:	beq	14044 <__assert_fail@plt+0x2c74>
   15974:	mov	r2, #5
   15978:	ldr	r1, [pc, #2308]	; 16284 <__assert_fail@plt+0x4eb4>
   1597c:	mov	r0, #0
   15980:	bl	11130 <dcgettext@plt>
   15984:	ldrb	r3, [r7, #181]	; 0xb5
   15988:	cmp	r3, #0
   1598c:	moveq	r7, #32
   15990:	beq	143c4 <__assert_fail@plt+0x2ff4>
   15994:	ldr	r1, [sp, #60]	; 0x3c
   15998:	bl	13624 <__assert_fail@plt+0x2254>
   1599c:	mov	r7, #32
   159a0:	b	143c4 <__assert_fail@plt+0x2ff4>
   159a4:	ldr	lr, [sp, #60]	; 0x3c
   159a8:	ldrd	r4, [r9]
   159ac:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   159b0:	ldr	r0, [lr, #176]	; 0xb0
   159b4:	ldrb	r1, [r9, #-56]	; 0xffffffc8
   159b8:	strd	r4, [sp, #8]
   159bc:	ldr	ip, [r9, #-40]	; 0xffffffd8
   159c0:	add	r0, r0, #1
   159c4:	str	ip, [sp]
   159c8:	str	r0, [lr, #176]	; 0xb0
   159cc:	add	r0, lr, #24
   159d0:	bl	133a0 <__assert_fail@plt+0x1fd0>
   159d4:	cmp	r0, #0
   159d8:	beq	14044 <__assert_fail@plt+0x2c74>
   159dc:	mov	r7, #27
   159e0:	b	143c4 <__assert_fail@plt+0x2ff4>
   159e4:	ldr	lr, [sp, #60]	; 0x3c
   159e8:	ldrd	r2, [r9, #-160]	; 0xffffff60
   159ec:	sub	r1, r9, #272	; 0x110
   159f0:	ldr	ip, [r9, #-56]	; 0xffffffc8
   159f4:	ldrd	r0, [r1]
   159f8:	strd	r2, [lr, #80]	; 0x50
   159fc:	ldr	r2, [r9, #-52]	; 0xffffffcc
   15a00:	mov	r3, #2
   15a04:	strd	r0, [lr, #72]	; 0x48
   15a08:	str	ip, [lr, #88]	; 0x58
   15a0c:	str	r2, [lr, #92]	; 0x5c
   15a10:	str	r3, [lr, #28]
   15a14:	mov	r7, #24
   15a18:	b	143c4 <__assert_fail@plt+0x2ff4>
   15a1c:	ldr	ip, [sp, #60]	; 0x3c
   15a20:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15a24:	ldrd	r0, [r9, #-160]	; 0xffffff60
   15a28:	mov	r7, #23
   15a2c:	strd	r2, [ip, #80]	; 0x50
   15a30:	mov	r3, #0
   15a34:	mov	r2, #2
   15a38:	strd	r0, [ip, #72]	; 0x48
   15a3c:	str	r3, [ip, #88]	; 0x58
   15a40:	str	r3, [ip, #92]	; 0x5c
   15a44:	str	r2, [ip, #28]
   15a48:	b	143c4 <__assert_fail@plt+0x2ff4>
   15a4c:	ldr	ip, [sp, #60]	; 0x3c
   15a50:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15a54:	mov	r0, #0
   15a58:	mov	r1, #0
   15a5c:	strd	r2, [ip, #72]	; 0x48
   15a60:	mov	r3, #0
   15a64:	mov	r2, #2
   15a68:	strd	r0, [ip, #80]	; 0x50
   15a6c:	str	r3, [ip, #88]	; 0x58
   15a70:	str	r3, [ip, #92]	; 0x5c
   15a74:	str	r2, [ip, #28]
   15a78:	mov	r7, #22
   15a7c:	b	143c4 <__assert_fail@plt+0x2ff4>
   15a80:	ldr	r4, [sp, #60]	; 0x3c
   15a84:	ldr	lr, [pc, #2044]	; 16288 <__assert_fail@plt+0x4eb8>
   15a88:	ldr	ip, [pc, #2044]	; 1628c <__assert_fail@plt+0x4ebc>
   15a8c:	ldr	r0, [r4]
   15a90:	cmp	r2, #0
   15a94:	sub	r0, r1, r0
   15a98:	lsr	r2, r2, #31
   15a9c:	str	r0, [sp, #124]	; 0x7c
   15aa0:	str	r1, [r4]
   15aa4:	mov	r0, r3
   15aa8:	asr	r1, r3, #31
   15aac:	strb	r2, [sp, #192]	; 0xc0
   15ab0:	movne	r2, lr
   15ab4:	moveq	r2, ip
   15ab8:	str	r2, [sp, #56]	; 0x38
   15abc:	strd	r0, [sp, #112]	; 0x70
   15ac0:	movne	r2, #19
   15ac4:	moveq	r2, #20
   15ac8:	b	13d68 <__assert_fail@plt+0x2998>
   15acc:	mov	ip, r4
   15ad0:	b	144f0 <__assert_fail@plt+0x3120>
   15ad4:	mov	r0, #2
   15ad8:	b	14048 <__assert_fail@plt+0x2c78>
   15adc:	mov	r0, #0
   15ae0:	b	14048 <__assert_fail@plt+0x2c78>
   15ae4:	ldr	r3, [sp, #60]	; 0x3c
   15ae8:	add	r4, sp, #132	; 0x84
   15aec:	add	r1, sp, #151	; 0x97
   15af0:	ldr	r3, [r3]
   15af4:	mov	r2, r4
   15af8:	ldr	r0, [sp, #60]	; 0x3c
   15afc:	add	r3, r3, #1
   15b00:	cmp	r2, r1
   15b04:	strbcc	r5, [r2]
   15b08:	str	r3, [r0]
   15b0c:	ldrb	r5, [r3]
   15b10:	addcc	r2, r2, #1
   15b14:	cmp	r5, #65	; 0x41
   15b18:	sub	r0, r5, #97	; 0x61
   15b1c:	bcc	15b30 <__assert_fail@plt+0x4760>
   15b20:	cmp	r5, #90	; 0x5a
   15b24:	bls	15af8 <__assert_fail@plt+0x4728>
   15b28:	cmp	r0, #25
   15b2c:	bls	15af8 <__assert_fail@plt+0x4728>
   15b30:	cmp	r5, #46	; 0x2e
   15b34:	beq	15af8 <__assert_fail@plt+0x4728>
   15b38:	mov	r3, #0
   15b3c:	strb	r3, [r2]
   15b40:	ldrb	r3, [sp, #132]	; 0x84
   15b44:	cmp	r3, #0
   15b48:	movne	r2, r4
   15b4c:	beq	15b6c <__assert_fail@plt+0x479c>
   15b50:	sub	r1, r3, #97	; 0x61
   15b54:	cmp	r1, #25
   15b58:	subls	r3, r3, #32
   15b5c:	strb	r3, [r2]
   15b60:	ldrb	r3, [r2, #1]!
   15b64:	cmp	r3, #0
   15b68:	bne	15b50 <__assert_fail@plt+0x4780>
   15b6c:	ldr	r6, [pc, #1820]	; 16290 <__assert_fail@plt+0x4ec0>
   15b70:	ldr	r5, [pc, #1820]	; 16294 <__assert_fail@plt+0x4ec4>
   15b74:	mov	r1, r6
   15b78:	b	15b88 <__assert_fail@plt+0x47b8>
   15b7c:	ldr	r1, [r5, #12]!
   15b80:	cmp	r1, #0
   15b84:	beq	15f28 <__assert_fail@plt+0x4b58>
   15b88:	mov	r0, r4
   15b8c:	bl	110a0 <strcmp@plt>
   15b90:	cmp	r0, #0
   15b94:	bne	15b7c <__assert_fail@plt+0x47ac>
   15b98:	ldr	r2, [r5, #8]
   15b9c:	ldr	r3, [r5, #4]
   15ba0:	str	r3, [sp, #56]	; 0x38
   15ba4:	asr	r3, r2, #31
   15ba8:	b	15fd8 <__assert_fail@plt+0x4c08>
   15bac:	mov	r2, #0
   15bb0:	b	14234 <__assert_fail@plt+0x2e64>
   15bb4:	cmp	r3, #0
   15bb8:	bne	15e60 <__assert_fail@plt+0x4a90>
   15bbc:	ldrd	r2, [r9, #-216]	; 0xffffff28
   15bc0:	mov	r4, r2
   15bc4:	mov	r5, r3
   15bc8:	ldr	ip, [sp, #60]	; 0x3c
   15bcc:	mov	lr, r9
   15bd0:	strd	r4, [ip, #56]	; 0x38
   15bd4:	ldm	lr!, {r0, r1, r2, r3}
   15bd8:	mov	r4, ip
   15bdc:	mov	r7, r4
   15be0:	ldrd	r4, [r9, #-104]	; 0xffffff98
   15be4:	add	ip, ip, #32
   15be8:	strd	r4, [r7, #64]	; 0x40
   15bec:	stmia	ip!, {r0, r1, r2, r3}
   15bf0:	mov	r7, #42	; 0x2a
   15bf4:	ldm	lr, {r0, r1}
   15bf8:	stm	ip, {r0, r1}
   15bfc:	b	143c4 <__assert_fail@plt+0x2ff4>
   15c00:	ldr	r1, [sp, #60]	; 0x3c
   15c04:	mov	r2, #0
   15c08:	mov	r3, #-2147483648	; 0x80000000
   15c0c:	mov	r0, #1
   15c10:	strd	r2, [r1, #40]	; 0x28
   15c14:	b	14048 <__assert_fail@plt+0x2c78>
   15c18:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15c1c:	cmp	r2, #0
   15c20:	strd	r2, [sp, #48]	; 0x30
   15c24:	sbcs	r3, r3, #0
   15c28:	blt	15dec <__assert_fail@plt+0x4a1c>
   15c2c:	mvn	r3, #0
   15c30:	mvn	r2, #0
   15c34:	cmp	r5, r3
   15c38:	cmpeq	r4, r2
   15c3c:	beq	157c0 <__assert_fail@plt+0x43f0>
   15c40:	mov	r2, r4
   15c44:	mov	r3, r5
   15c48:	mov	r0, #0
   15c4c:	mov	r1, #-2147483648	; 0x80000000
   15c50:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15c54:	ldrd	r2, [sp, #48]	; 0x30
   15c58:	cmp	r0, r2
   15c5c:	sbcs	r3, r1, r3
   15c60:	blt	14044 <__assert_fail@plt+0x2c74>
   15c64:	b	157c0 <__assert_fail@plt+0x43f0>
   15c68:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   15c6c:	cmp	r2, #0
   15c70:	strd	r2, [sp, #48]	; 0x30
   15c74:	sbcs	r3, r3, #0
   15c78:	blt	15dc0 <__assert_fail@plt+0x49f0>
   15c7c:	mvn	r3, #0
   15c80:	mvn	r2, #0
   15c84:	cmp	r5, r3
   15c88:	cmpeq	r4, r2
   15c8c:	beq	15698 <__assert_fail@plt+0x42c8>
   15c90:	mov	r2, r4
   15c94:	mov	r3, r5
   15c98:	mov	r0, #0
   15c9c:	mov	r1, #-2147483648	; 0x80000000
   15ca0:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15ca4:	ldrd	r2, [sp, #48]	; 0x30
   15ca8:	cmp	r0, r2
   15cac:	sbcs	r3, r1, r3
   15cb0:	blt	14044 <__assert_fail@plt+0x2c74>
   15cb4:	b	15698 <__assert_fail@plt+0x42c8>
   15cb8:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   15cbc:	cmp	r2, #0
   15cc0:	strd	r2, [sp, #48]	; 0x30
   15cc4:	sbcs	r3, r3, #0
   15cc8:	blt	15e34 <__assert_fail@plt+0x4a64>
   15ccc:	mvn	r3, #0
   15cd0:	mvn	r2, #0
   15cd4:	cmp	r5, r3
   15cd8:	cmpeq	r4, r2
   15cdc:	beq	14594 <__assert_fail@plt+0x31c4>
   15ce0:	mov	r2, r4
   15ce4:	mov	r3, r5
   15ce8:	mov	r0, #0
   15cec:	mov	r1, #-2147483648	; 0x80000000
   15cf0:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15cf4:	ldrd	r2, [sp, #48]	; 0x30
   15cf8:	cmp	r0, r2
   15cfc:	sbcs	r3, r1, r3
   15d00:	blt	14044 <__assert_fail@plt+0x2c74>
   15d04:	b	14594 <__assert_fail@plt+0x31c4>
   15d08:	mov	r2, #-2147483648	; 0x80000000
   15d0c:	subs	r2, r2, r0
   15d10:	mvn	r3, #0
   15d14:	sbc	r3, r3, r1
   15d18:	asr	r5, ip, #31
   15d1c:	cmp	ip, r2
   15d20:	sbcs	r3, r5, r3
   15d24:	movlt	r3, #1
   15d28:	movge	r3, #0
   15d2c:	cmp	r3, #0
   15d30:	bne	14ca0 <__assert_fail@plt+0x38d0>
   15d34:	ldr	r3, [sp, #60]	; 0x3c
   15d38:	add	r0, ip, r0
   15d3c:	mov	r7, #34	; 0x22
   15d40:	str	r0, [r3, #24]
   15d44:	b	143c4 <__assert_fail@plt+0x2ff4>
   15d48:	ldr	r1, [sp, #60]	; 0x3c
   15d4c:	mov	r2, #0
   15d50:	mov	r3, #-2147483648	; 0x80000000
   15d54:	mov	r0, #1
   15d58:	strd	r2, [r1, #64]	; 0x40
   15d5c:	b	14048 <__assert_fail@plt+0x2c78>
   15d60:	subs	r2, r4, r0
   15d64:	sbc	r3, r5, r1
   15d68:	asr	r5, ip, #31
   15d6c:	cmp	r2, ip
   15d70:	sbcs	r3, r3, r5
   15d74:	movlt	r3, #1
   15d78:	movge	r3, #0
   15d7c:	b	15d2c <__assert_fail@plt+0x495c>
   15d80:	ldrd	r0, [sp, #48]	; 0x30
   15d84:	mvn	r3, #0
   15d88:	mvn	r2, #0
   15d8c:	cmp	r1, r3
   15d90:	cmpeq	r0, r2
   15d94:	beq	14594 <__assert_fail@plt+0x31c4>
   15d98:	mov	r3, r1
   15d9c:	mov	r2, r0
   15da0:	mov	r1, #-2147483648	; 0x80000000
   15da4:	mov	r0, #0
   15da8:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15dac:	cmp	r0, r4
   15db0:	sbcs	r3, r1, r5
   15db4:	movlt	r3, #1
   15db8:	movge	r3, #0
   15dbc:	b	1458c <__assert_fail@plt+0x31bc>
   15dc0:	mov	r2, r4
   15dc4:	mov	r3, r5
   15dc8:	mvn	r0, #0
   15dcc:	mvn	r1, #-2147483648	; 0x80000000
   15dd0:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15dd4:	ldrd	r2, [sp, #48]	; 0x30
   15dd8:	cmp	r2, r0
   15ddc:	sbcs	r3, r3, r1
   15de0:	movlt	r3, #1
   15de4:	movge	r3, #0
   15de8:	b	15690 <__assert_fail@plt+0x42c0>
   15dec:	mov	r2, r4
   15df0:	mov	r3, r5
   15df4:	mvn	r0, #0
   15df8:	mvn	r1, #-2147483648	; 0x80000000
   15dfc:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15e00:	ldrd	r2, [sp, #48]	; 0x30
   15e04:	cmp	r2, r0
   15e08:	sbcs	r3, r3, r1
   15e0c:	movlt	r3, #1
   15e10:	movge	r3, #0
   15e14:	b	157b8 <__assert_fail@plt+0x43e8>
   15e18:	adds	r2, r0, ip
   15e1c:	adc	r3, r1, ip, asr #31
   15e20:	cmp	r2, #-2147483648	; 0x80000000
   15e24:	sbcs	r3, r3, #0
   15e28:	movge	r3, #1
   15e2c:	movlt	r3, #0
   15e30:	b	15d2c <__assert_fail@plt+0x495c>
   15e34:	mov	r2, r4
   15e38:	mov	r3, r5
   15e3c:	mvn	r0, #0
   15e40:	mvn	r1, #-2147483648	; 0x80000000
   15e44:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15e48:	ldrd	r2, [sp, #48]	; 0x30
   15e4c:	cmp	r2, r0
   15e50:	sbcs	r3, r3, r1
   15e54:	movlt	r3, #1
   15e58:	movge	r3, #0
   15e5c:	b	1458c <__assert_fail@plt+0x31bc>
   15e60:	mov	r2, #5
   15e64:	ldr	r1, [pc, #1068]	; 16298 <__assert_fail@plt+0x4ec8>
   15e68:	mov	r0, #0
   15e6c:	bl	11130 <dcgettext@plt>
   15e70:	ldrd	r2, [r9, #-216]	; 0xffffff28
   15e74:	mov	r4, r2
   15e78:	mov	r5, r3
   15e7c:	bl	12abc <__assert_fail@plt+0x16ec>
   15e80:	b	15bc8 <__assert_fail@plt+0x47f8>
   15e84:	ldrd	r0, [sp, #48]	; 0x30
   15e88:	mvn	r3, #0
   15e8c:	mvn	r2, #0
   15e90:	cmp	r1, r3
   15e94:	cmpeq	r0, r2
   15e98:	beq	157c0 <__assert_fail@plt+0x43f0>
   15e9c:	mov	r3, r1
   15ea0:	mov	r2, r0
   15ea4:	mov	r1, #-2147483648	; 0x80000000
   15ea8:	mov	r0, #0
   15eac:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15eb0:	cmp	r0, r4
   15eb4:	sbcs	r3, r1, r5
   15eb8:	movlt	r3, #1
   15ebc:	movge	r3, #0
   15ec0:	b	157b8 <__assert_fail@plt+0x43e8>
   15ec4:	ldrd	r0, [sp, #48]	; 0x30
   15ec8:	mvn	r3, #0
   15ecc:	mvn	r2, #0
   15ed0:	cmp	r1, r3
   15ed4:	cmpeq	r0, r2
   15ed8:	beq	15698 <__assert_fail@plt+0x42c8>
   15edc:	mov	r3, r1
   15ee0:	mov	r2, r0
   15ee4:	mov	r1, #-2147483648	; 0x80000000
   15ee8:	mov	r0, #0
   15eec:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   15ef0:	cmp	r0, r4
   15ef4:	sbcs	r3, r1, r5
   15ef8:	movlt	r3, #1
   15efc:	movge	r3, #0
   15f00:	b	15690 <__assert_fail@plt+0x42c0>
   15f04:	ldr	r2, [sp, #60]	; 0x3c
   15f08:	add	r3, r4, #1
   15f0c:	str	r3, [r2]
   15f10:	ldrb	r3, [r4]
   15f14:	cmp	r3, #0
   15f18:	str	r3, [sp, #56]	; 0x38
   15f1c:	bne	1406c <__assert_fail@plt+0x2c9c>
   15f20:	ldr	r2, [sp, #56]	; 0x38
   15f24:	b	13d68 <__assert_fail@plt+0x2998>
   15f28:	mov	r0, r4
   15f2c:	mov	r6, r1
   15f30:	bl	11274 <strlen@plt>
   15f34:	cmp	r0, #3
   15f38:	str	r0, [sp, #56]	; 0x38
   15f3c:	beq	160cc <__assert_fail@plt+0x4cfc>
   15f40:	cmp	r0, #4
   15f44:	movne	r5, r6
   15f48:	bne	15f60 <__assert_fail@plt+0x4b90>
   15f4c:	ldrb	r3, [sp, #135]	; 0x87
   15f50:	sub	r3, r3, #46	; 0x2e
   15f54:	clz	r3, r3
   15f58:	lsr	r3, r3, #5
   15f5c:	mov	r5, r3
   15f60:	ldr	r6, [pc, #820]	; 1629c <__assert_fail@plt+0x4ecc>
   15f64:	ldr	r3, [pc, #820]	; 162a0 <__assert_fail@plt+0x4ed0>
   15f68:	b	15f8c <__assert_fail@plt+0x4bbc>
   15f6c:	bl	11394 <strncmp@plt>
   15f70:	clz	r0, r0
   15f74:	lsr	r0, r0, #5
   15f78:	cmp	r0, #0
   15f7c:	bne	15fe0 <__assert_fail@plt+0x4c10>
   15f80:	ldr	r3, [r6, #12]!
   15f84:	cmp	r3, #0
   15f88:	beq	15fb0 <__assert_fail@plt+0x4be0>
   15f8c:	cmp	r5, #0
   15f90:	mov	r1, r3
   15f94:	mov	r0, r4
   15f98:	mov	r2, #3
   15f9c:	bne	15f6c <__assert_fail@plt+0x4b9c>
   15fa0:	bl	110a0 <strcmp@plt>
   15fa4:	clz	r0, r0
   15fa8:	lsr	r0, r0, #5
   15fac:	b	15f78 <__assert_fail@plt+0x4ba8>
   15fb0:	mov	r5, r0
   15fb4:	mov	r1, r4
   15fb8:	ldr	r0, [sp, #60]	; 0x3c
   15fbc:	bl	13558 <__assert_fail@plt+0x2188>
   15fc0:	cmp	r0, #0
   15fc4:	beq	15ff4 <__assert_fail@plt+0x4c24>
   15fc8:	ldr	r2, [r0, #8]
   15fcc:	ldr	r3, [r0, #4]
   15fd0:	str	r3, [sp, #56]	; 0x38
   15fd4:	asr	r3, r2, #31
   15fd8:	strd	r2, [sp, #192]	; 0xc0
   15fdc:	b	13d4c <__assert_fail@plt+0x297c>
   15fe0:	ldr	r2, [r6, #8]
   15fe4:	ldr	r3, [r6, #4]
   15fe8:	str	r3, [sp, #56]	; 0x38
   15fec:	asr	r3, r2, #31
   15ff0:	b	15fd8 <__assert_fail@plt+0x4c08>
   15ff4:	ldr	r1, [pc, #680]	; 162a4 <__assert_fail@plt+0x4ed4>
   15ff8:	mov	r0, r4
   15ffc:	bl	110a0 <strcmp@plt>
   16000:	cmp	r0, #0
   16004:	beq	14054 <__assert_fail@plt+0x2c84>
   16008:	ldr	r6, [pc, #664]	; 162a8 <__assert_fail@plt+0x4ed8>
   1600c:	ldr	r2, [pc, #664]	; 162ac <__assert_fail@plt+0x4edc>
   16010:	mov	r3, r6
   16014:	str	r6, [sp, #48]	; 0x30
   16018:	mov	r1, r2
   1601c:	mov	r6, r5
   16020:	mov	r5, r3
   16024:	mov	r0, r4
   16028:	bl	110a0 <strcmp@plt>
   1602c:	cmp	r0, #0
   16030:	beq	160e0 <__assert_fail@plt+0x4d10>
   16034:	ldr	r1, [r5, #12]!
   16038:	cmp	r1, #0
   1603c:	bne	16024 <__assert_fail@plt+0x4c54>
   16040:	ldr	r3, [sp, #56]	; 0x38
   16044:	mov	r2, r1
   16048:	sub	r3, r3, #1
   1604c:	mov	r5, r6
   16050:	ldrb	r1, [r4, r3]
   16054:	ldr	r6, [sp, #48]	; 0x30
   16058:	cmp	r1, #83	; 0x53
   1605c:	beq	16168 <__assert_fail@plt+0x4d98>
   16060:	ldr	r6, [pc, #584]	; 162b0 <__assert_fail@plt+0x4ee0>
   16064:	ldr	r1, [pc, #584]	; 162b4 <__assert_fail@plt+0x4ee4>
   16068:	mov	r0, r4
   1606c:	bl	110a0 <strcmp@plt>
   16070:	cmp	r0, #0
   16074:	beq	15fe0 <__assert_fail@plt+0x4c10>
   16078:	ldr	r1, [r6, #12]!
   1607c:	cmp	r1, #0
   16080:	bne	16068 <__assert_fail@plt+0x4c98>
   16084:	ldr	r3, [sp, #56]	; 0x38
   16088:	cmp	r3, #1
   1608c:	ldrb	r3, [sp, #132]	; 0x84
   16090:	beq	161f4 <__assert_fail@plt+0x4e24>
   16094:	cmp	r3, #0
   16098:	beq	161bc <__assert_fail@plt+0x4dec>
   1609c:	mov	r1, r4
   160a0:	mov	r2, r4
   160a4:	mov	r0, #1
   160a8:	cmp	r3, #46	; 0x2e
   160ac:	ldrb	r3, [r2, #1]!
   160b0:	addne	r1, r1, #1
   160b4:	moveq	r5, r0
   160b8:	cmp	r3, #0
   160bc:	strb	r3, [r1]
   160c0:	beq	161a0 <__assert_fail@plt+0x4dd0>
   160c4:	ldrb	r3, [r2]
   160c8:	b	160a8 <__assert_fail@plt+0x4cd8>
   160cc:	mov	r3, #1
   160d0:	mov	r5, r3
   160d4:	b	15f60 <__assert_fail@plt+0x4b90>
   160d8:	mov	r7, lr
   160dc:	b	143c4 <__assert_fail@plt+0x2ff4>
   160e0:	ldr	r2, [r5, #8]
   160e4:	ldr	r3, [r5, #4]
   160e8:	str	r3, [sp, #56]	; 0x38
   160ec:	asr	r3, r2, #31
   160f0:	b	15fd8 <__assert_fail@plt+0x4c08>
   160f4:	adds	r0, r1, #0
   160f8:	movne	r0, #1
   160fc:	ands	r0, r0, r2, lsr #31
   16100:	beq	16228 <__assert_fail@plt+0x4e58>
   16104:	cmp	r3, #-2147483648	; 0x80000000
   16108:	beq	16158 <__assert_fail@plt+0x4d88>
   1610c:	sub	r3, r3, #1
   16110:	str	r3, [sp, #192]	; 0xc0
   16114:	ldr	r3, [sp, #60]	; 0x3c
   16118:	ldr	r2, [pc, #408]	; 162b8 <__assert_fail@plt+0x4ee8>
   1611c:	str	r4, [r3]
   16120:	sub	r2, r2, r1
   16124:	mov	r3, #276	; 0x114
   16128:	str	r2, [sp, #196]	; 0xc4
   1612c:	str	r3, [sp, #56]	; 0x38
   16130:	mov	r2, #21
   16134:	b	13d68 <__assert_fail@plt+0x2998>
   16138:	ldrb	ip, [r4, #1]!
   1613c:	sub	r0, ip, #48	; 0x30
   16140:	cmp	r0, #9
   16144:	bhi	14324 <__assert_fail@plt+0x2f54>
   16148:	cmp	ip, #48	; 0x30
   1614c:	beq	16138 <__assert_fail@plt+0x4d68>
   16150:	add	r1, r1, #1
   16154:	b	14324 <__assert_fail@plt+0x2f54>
   16158:	mov	r3, #63	; 0x3f
   1615c:	mov	r2, #2
   16160:	str	r3, [sp, #56]	; 0x38
   16164:	b	13d68 <__assert_fail@plt+0x2998>
   16168:	ldr	r1, [pc, #316]	; 162ac <__assert_fail@plt+0x4edc>
   1616c:	strb	r2, [r4, r3]
   16170:	mov	r0, r4
   16174:	str	r3, [sp, #48]	; 0x30
   16178:	bl	110a0 <strcmp@plt>
   1617c:	ldr	r3, [sp, #48]	; 0x30
   16180:	cmp	r0, #0
   16184:	beq	15fe0 <__assert_fail@plt+0x4c10>
   16188:	ldr	r1, [r6, #12]!
   1618c:	cmp	r1, #0
   16190:	bne	16170 <__assert_fail@plt+0x4da0>
   16194:	mov	r2, #83	; 0x53
   16198:	strb	r2, [r4, r3]
   1619c:	b	16060 <__assert_fail@plt+0x4c90>
   161a0:	cmp	r5, #0
   161a4:	beq	161bc <__assert_fail@plt+0x4dec>
   161a8:	mov	r1, r4
   161ac:	ldr	r0, [sp, #60]	; 0x3c
   161b0:	bl	13558 <__assert_fail@plt+0x2188>
   161b4:	cmp	r0, #0
   161b8:	bne	15fc8 <__assert_fail@plt+0x4bf8>
   161bc:	ldr	r3, [sp, #60]	; 0x3c
   161c0:	ldrb	r3, [r3, #181]	; 0xb5
   161c4:	cmp	r3, #0
   161c8:	beq	16158 <__assert_fail@plt+0x4d88>
   161cc:	mov	r2, #5
   161d0:	ldr	r1, [pc, #228]	; 162bc <__assert_fail@plt+0x4eec>
   161d4:	mov	r0, #0
   161d8:	bl	11130 <dcgettext@plt>
   161dc:	mov	r1, r4
   161e0:	bl	12abc <__assert_fail@plt+0x16ec>
   161e4:	mov	r3, #63	; 0x3f
   161e8:	str	r3, [sp, #56]	; 0x38
   161ec:	mov	r2, #2
   161f0:	b	13d68 <__assert_fail@plt+0x2998>
   161f4:	cmp	r3, #65	; 0x41
   161f8:	beq	1626c <__assert_fail@plt+0x4e9c>
   161fc:	ldr	r2, [pc, #188]	; 162c0 <__assert_fail@plt+0x4ef0>
   16200:	ldr	r1, [pc, #188]	; 162c4 <__assert_fail@plt+0x4ef4>
   16204:	cmp	r2, #0
   16208:	add	r0, r1, #12
   1620c:	beq	16094 <__assert_fail@plt+0x4cc4>
   16210:	ldrb	r2, [r2]
   16214:	cmp	r2, r3
   16218:	beq	16258 <__assert_fail@plt+0x4e88>
   1621c:	ldr	r2, [r0, #12]
   16220:	mov	r1, r0
   16224:	b	16204 <__assert_fail@plt+0x4e34>
   16228:	str	r3, [sp, #192]	; 0xc0
   1622c:	ldr	r3, [sp, #60]	; 0x3c
   16230:	ldr	r0, [pc, #144]	; 162c8 <__assert_fail@plt+0x4ef8>
   16234:	cmp	r2, #0
   16238:	str	r4, [r3]
   1623c:	moveq	r3, r0
   16240:	movne	r3, #276	; 0x114
   16244:	str	r1, [sp, #196]	; 0xc4
   16248:	moveq	r2, #22
   1624c:	movne	r2, #21
   16250:	str	r3, [sp, #56]	; 0x38
   16254:	b	13d68 <__assert_fail@plt+0x2998>
   16258:	ldr	r2, [r1, #20]
   1625c:	ldr	r3, [r1, #16]
   16260:	str	r3, [sp, #56]	; 0x38
   16264:	asr	r3, r2, #31
   16268:	b	15fd8 <__assert_fail@plt+0x4c08>
   1626c:	mov	r2, #3600	; 0xe10
   16270:	mov	r3, #0
   16274:	ldr	r1, [pc, #80]	; 162cc <__assert_fail@plt+0x4efc>
   16278:	strd	r2, [sp, #192]	; 0xc0
   1627c:	str	r1, [sp, #56]	; 0x38
   16280:	b	14068 <__assert_fail@plt+0x2c98>
   16284:	andeq	pc, r1, r0, asr #7
   16288:	andeq	r0, r0, r2, lsl r1
   1628c:	andeq	r0, r0, r3, lsl r1
   16290:	andeq	pc, r1, ip, asr #6
   16294:	andeq	lr, r1, r0, lsr #23
   16298:	andeq	pc, r1, r8, lsl r4	; <UNPREDICTABLE>
   1629c:	ldrdeq	lr, [r1], -ip
   162a0:	andeq	pc, r1, r0, asr r3	; <UNPREDICTABLE>
   162a4:	andeq	pc, r1, r0, ror r3	; <UNPREDICTABLE>
   162a8:	andeq	lr, r1, r8, lsl #26
   162ac:	andeq	pc, r1, r8, asr r3	; <UNPREDICTABLE>
   162b0:	andeq	lr, r1, ip, lsl #27
   162b4:	andeq	pc, r1, r0, ror #6
   162b8:	blcc	fe6c8ac0 <optarg@@GLIBC_2.4+0xfe697918>
   162bc:	andeq	pc, r1, r4, ror r3	; <UNPREDICTABLE>
   162c0:	andeq	pc, r1, ip, ror #6
   162c4:	strdeq	lr, [r1], -r4
   162c8:	andeq	r0, r0, r5, lsl r1
   162cc:	andeq	r0, r0, r1, lsl r1
   162d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162d4:	sub	sp, sp, #900	; 0x384
   162d8:	mov	r7, r2
   162dc:	str	r0, [sp, #36]	; 0x24
   162e0:	mov	r0, r1
   162e4:	mov	r4, r1
   162e8:	mov	r6, r3
   162ec:	bl	11274 <strlen@plt>
   162f0:	cmp	r7, #0
   162f4:	str	r0, [sp, #40]	; 0x28
   162f8:	beq	169c4 <__assert_fail@plt+0x55f4>
   162fc:	ldrb	r3, [r4]
   16300:	ldr	sl, [r7]
   16304:	ldr	r8, [r7, #4]
   16308:	sub	r3, r3, #9
   1630c:	cmp	r3, #23
   16310:	movhi	r5, r4
   16314:	bhi	16344 <__assert_fail@plt+0x4f74>
   16318:	mov	r1, #1
   1631c:	ldr	r2, [pc, #4004]	; 172c8 <__assert_fail@plt+0x5ef8>
   16320:	mov	r5, r4
   16324:	ands	r3, r2, r1, lsl r3
   16328:	beq	16344 <__assert_fail@plt+0x4f74>
   1632c:	ldrb	r3, [r5, #1]!
   16330:	sub	r3, r3, #9
   16334:	cmp	r3, #23
   16338:	bhi	16344 <__assert_fail@plt+0x4f74>
   1633c:	ands	r3, r2, r1, lsl r3
   16340:	bne	1632c <__assert_fail@plt+0x4f5c>
   16344:	mov	r2, #56	; 0x38
   16348:	mov	r1, #0
   1634c:	add	r0, sp, #304	; 0x130
   16350:	bl	112c8 <memset@plt>
   16354:	mov	r2, #4
   16358:	ldr	r1, [pc, #3948]	; 172cc <__assert_fail@plt+0x5efc>
   1635c:	mov	r0, r5
   16360:	bl	11394 <strncmp@plt>
   16364:	cmp	r0, #0
   16368:	bne	163c8 <__assert_fail@plt+0x4ff8>
   1636c:	ldrb	lr, [r5, #4]
   16370:	add	r1, r5, #4
   16374:	cmp	lr, #0
   16378:	beq	163c8 <__assert_fail@plt+0x4ff8>
   1637c:	mov	r3, lr
   16380:	mov	ip, r1
   16384:	mov	r0, #1
   16388:	b	163a8 <__assert_fail@plt+0x4fd8>
   1638c:	cmp	r3, #34	; 0x22
   16390:	beq	165ec <__assert_fail@plt+0x521c>
   16394:	ldrb	r3, [r2, #1]
   16398:	add	r0, r0, #1
   1639c:	add	ip, r2, #1
   163a0:	cmp	r3, #0
   163a4:	beq	163c8 <__assert_fail@plt+0x4ff8>
   163a8:	cmp	r3, #92	; 0x5c
   163ac:	mov	r2, ip
   163b0:	bne	1638c <__assert_fail@plt+0x4fbc>
   163b4:	ldrb	r3, [ip, #1]
   163b8:	add	r2, ip, #1
   163bc:	cmp	r3, #92	; 0x5c
   163c0:	cmpne	r3, #34	; 0x22
   163c4:	beq	16394 <__assert_fail@plt+0x4fc4>
   163c8:	mov	r1, r7
   163cc:	add	r2, sp, #216	; 0xd8
   163d0:	ldr	r0, [sp, #936]	; 0x3a8
   163d4:	bl	1aa14 <__assert_fail@plt+0x9644>
   163d8:	cmp	r0, #0
   163dc:	beq	169b8 <__assert_fail@plt+0x55e8>
   163e0:	ldr	fp, [sp, #936]	; 0x3a8
   163e4:	mov	r3, #0
   163e8:	str	r3, [sp, #32]
   163ec:	and	r6, r6, #1
   163f0:	strb	r6, [sp, #845]	; 0x34d
   163f4:	ldr	r6, [sp, #232]	; 0xe8
   163f8:	str	r8, [sp, #756]	; 0x2f4
   163fc:	add	r6, r6, #1
   16400:	add	r8, sp, #720	; 0x2d0
   16404:	asr	r7, r6, #31
   16408:	add	ip, sp, #304	; 0x130
   1640c:	strd	r6, [r8]
   16410:	ldrb	r7, [r5]
   16414:	ldr	r6, [pc, #3764]	; 172d0 <__assert_fail@plt+0x5f00>
   16418:	ldr	r8, [sp, #236]	; 0xec
   1641c:	cmp	r7, #0
   16420:	moveq	r5, r6
   16424:	ldr	r6, [pc, #3752]	; 172d4 <__assert_fail@plt+0x5f04>
   16428:	mov	r7, #0
   1642c:	adds	r6, r6, r8
   16430:	adc	r7, r7, r8, asr #31
   16434:	ldr	r8, [sp, #228]	; 0xe4
   16438:	str	r5, [sp, #664]	; 0x298
   1643c:	add	r5, sp, #704	; 0x2c0
   16440:	ldm	ip!, {r0, r1, r2, r3}
   16444:	add	lr, sp, #760	; 0x2f8
   16448:	strd	r6, [r5]
   1644c:	ldr	r9, [sp, #224]	; 0xe0
   16450:	mov	r6, r8
   16454:	asr	r7, r8, #31
   16458:	add	r5, sp, #728	; 0x2d8
   1645c:	mov	r8, r9
   16460:	strd	r6, [r5]
   16464:	ldr	r6, [sp, #220]	; 0xdc
   16468:	asr	r9, r9, #31
   1646c:	add	r5, sp, #736	; 0x2e0
   16470:	stmia	lr!, {r0, r1, r2, r3}
   16474:	asr	r7, r6, #31
   16478:	ldm	ip!, {r0, r1, r2, r3}
   1647c:	strd	r8, [r5]
   16480:	add	r8, sp, #744	; 0x2e8
   16484:	ldr	r9, [sp, #216]	; 0xd8
   16488:	ldr	r5, [sp, #248]	; 0xf8
   1648c:	strd	r6, [r8]
   16490:	mov	r8, #0
   16494:	mov	r6, #2
   16498:	str	r9, [sp, #752]	; 0x2f0
   1649c:	str	r6, [sp, #692]	; 0x2b4
   164a0:	str	r5, [sp, #160]	; 0xa0
   164a4:	str	r8, [sp, #712]	; 0x2c8
   164a8:	stmia	lr!, {r0, r1, r2, r3}
   164ac:	sub	r6, sl, #-2147483647	; 0x80000001
   164b0:	ldm	ip!, {r0, r1, r2, r3}
   164b4:	ldr	r9, [pc, #3612]	; 172d8 <__assert_fail@plt+0x5f08>
   164b8:	ldr	r7, [pc, #3612]	; 172dc <__assert_fail@plt+0x5f0c>
   164bc:	stmia	lr!, {r0, r1, r2, r3}
   164c0:	ldm	ip, {r0, r1}
   164c4:	ldr	r2, [sp, #256]	; 0x100
   164c8:	ldr	r3, [pc, #3600]	; 172e0 <__assert_fail@plt+0x5f10>
   164cc:	strb	r8, [sp, #816]	; 0x330
   164d0:	strb	r8, [sp, #817]	; 0x331
   164d4:	str	r8, [sp, #820]	; 0x334
   164d8:	str	r8, [sp, #824]	; 0x338
   164dc:	str	r8, [sp, #836]	; 0x344
   164e0:	str	r8, [sp, #828]	; 0x33c
   164e4:	str	r8, [sp, #832]	; 0x340
   164e8:	str	r8, [sp, #840]	; 0x348
   164ec:	strb	r8, [sp, #844]	; 0x34c
   164f0:	strb	r8, [sp, #846]	; 0x34e
   164f4:	strb	r8, [sp, #847]	; 0x34f
   164f8:	strb	r8, [sp, #849]	; 0x351
   164fc:	strb	r8, [sp, #848]	; 0x350
   16500:	strb	r8, [sp, #850]	; 0x352
   16504:	strb	r8, [sp, #851]	; 0x353
   16508:	strb	r8, [sp, #852]	; 0x354
   1650c:	stm	lr, {r0, r1}
   16510:	str	r2, [sp, #856]	; 0x358
   16514:	str	r5, [sp, #864]	; 0x360
   16518:	str	r8, [sp, #868]	; 0x364
   1651c:	str	r3, [sp, #860]	; 0x35c
   16520:	cmp	sl, #0
   16524:	sub	r3, r6, r9
   16528:	add	r2, sp, #564	; 0x234
   1652c:	add	r1, sp, #364	; 0x16c
   16530:	mov	r0, fp
   16534:	blt	16540 <__assert_fail@plt+0x5170>
   16538:	cmp	sl, r9
   1653c:	bgt	1657c <__assert_fail@plt+0x51ac>
   16540:	str	r3, [sp, #364]	; 0x16c
   16544:	bl	1aa14 <__assert_fail@plt+0x9644>
   16548:	sub	r9, r9, #7733248	; 0x760000
   1654c:	sub	r9, r9, #42752	; 0xa700
   16550:	cmp	r0, #0
   16554:	beq	16574 <__assert_fail@plt+0x51a4>
   16558:	ldr	r3, [sp, #604]	; 0x25c
   1655c:	cmp	r3, #0
   16560:	beq	16574 <__assert_fail@plt+0x51a4>
   16564:	ldr	r2, [sp, #596]	; 0x254
   16568:	ldr	r1, [sp, #864]	; 0x360
   1656c:	cmp	r2, r1
   16570:	bne	16a38 <__assert_fail@plt+0x5668>
   16574:	cmp	r9, r7
   16578:	bne	16520 <__assert_fail@plt+0x5150>
   1657c:	ldr	r0, [sp, #856]	; 0x358
   16580:	cmp	r0, #0
   16584:	beq	165a8 <__assert_fail@plt+0x51d8>
   16588:	ldr	r1, [sp, #868]	; 0x364
   1658c:	cmp	r1, #0
   16590:	beq	165a8 <__assert_fail@plt+0x51d8>
   16594:	bl	110a0 <strcmp@plt>
   16598:	cmp	r0, #0
   1659c:	mvneq	r3, #0
   165a0:	streq	r0, [sp, #868]	; 0x364
   165a4:	streq	r3, [sp, #864]	; 0x360
   165a8:	add	r0, sp, #664	; 0x298
   165ac:	bl	13d00 <__assert_fail@plt+0x2930>
   165b0:	subs	r9, r0, #0
   165b4:	beq	166b4 <__assert_fail@plt+0x52e4>
   165b8:	ldrb	r8, [sp, #845]	; 0x34d
   165bc:	cmp	r8, #0
   165c0:	bne	167f0 <__assert_fail@plt+0x5420>
   165c4:	ldr	r3, [sp, #936]	; 0x3a8
   165c8:	cmp	fp, r3
   165cc:	beq	165d8 <__assert_fail@plt+0x5208>
   165d0:	mov	r0, fp
   165d4:	bl	1a9e8 <__assert_fail@plt+0x9618>
   165d8:	ldr	r0, [sp, #32]
   165dc:	bl	1b874 <__assert_fail@plt+0xa4a4>
   165e0:	mov	r0, r8
   165e4:	add	sp, sp, #900	; 0x384
   165e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165ec:	cmp	r0, #100	; 0x64
   165f0:	movle	r3, #0
   165f4:	addle	r9, sp, #464	; 0x1d0
   165f8:	strle	r3, [sp, #32]
   165fc:	bgt	168cc <__assert_fail@plt+0x54fc>
   16600:	cmp	lr, #34	; 0x22
   16604:	mov	r2, r9
   16608:	beq	16634 <__assert_fail@plt+0x5264>
   1660c:	sub	lr, lr, #92	; 0x5c
   16610:	clz	lr, lr
   16614:	lsr	lr, lr, #5
   16618:	add	r3, r1, lr
   1661c:	ldrb	r0, [r1, lr]
   16620:	ldrb	lr, [r3, #1]
   16624:	add	r1, r3, #1
   16628:	strb	r0, [r2], #1
   1662c:	cmp	lr, #34	; 0x22
   16630:	bne	1660c <__assert_fail@plt+0x523c>
   16634:	mov	r3, #0
   16638:	strb	r3, [r2]
   1663c:	mov	r0, r9
   16640:	str	r1, [sp, #48]	; 0x30
   16644:	bl	1a79c <__assert_fail@plt+0x93cc>
   16648:	subs	fp, r0, #0
   1664c:	moveq	r8, fp
   16650:	beq	165d8 <__assert_fail@plt+0x5208>
   16654:	ldr	r1, [sp, #48]	; 0x30
   16658:	add	r5, r1, #1
   1665c:	ldrb	r3, [r1, #1]
   16660:	sub	r3, r3, #9
   16664:	cmp	r3, #23
   16668:	bhi	16694 <__assert_fail@plt+0x52c4>
   1666c:	mov	r1, #1
   16670:	ldr	r2, [pc, #3152]	; 172c8 <__assert_fail@plt+0x5ef8>
   16674:	ands	r3, r2, r1, lsl r3
   16678:	beq	16694 <__assert_fail@plt+0x52c4>
   1667c:	ldrb	r3, [r5, #1]!
   16680:	sub	r3, r3, #9
   16684:	cmp	r3, #23
   16688:	bhi	16694 <__assert_fail@plt+0x52c4>
   1668c:	ands	r3, r2, r1, lsl r3
   16690:	bne	1667c <__assert_fail@plt+0x52ac>
   16694:	mov	r1, r7
   16698:	add	r2, sp, #216	; 0xd8
   1669c:	mov	r0, fp
   166a0:	bl	1aa14 <__assert_fail@plt+0x9644>
   166a4:	cmp	r0, #0
   166a8:	beq	1681c <__assert_fail@plt+0x544c>
   166ac:	str	r9, [sp, #940]	; 0x3ac
   166b0:	b	163ec <__assert_fail@plt+0x501c>
   166b4:	ldrb	ip, [sp, #845]	; 0x34d
   166b8:	cmp	ip, #0
   166bc:	mov	sl, ip
   166c0:	bne	168f0 <__assert_fail@plt+0x5520>
   166c4:	ldrb	r8, [sp, #816]	; 0x330
   166c8:	cmp	r8, #0
   166cc:	beq	16824 <__assert_fail@plt+0x5454>
   166d0:	add	r3, sp, #752	; 0x2f0
   166d4:	ldm	r3, {r0, r1}
   166d8:	ldr	r3, [sp, #36]	; 0x24
   166dc:	stm	r3, {r0, r1}
   166e0:	cmp	sl, #0
   166e4:	beq	169d4 <__assert_fail@plt+0x5604>
   166e8:	ldr	r3, [sp, #940]	; 0x3ac
   166ec:	cmp	r3, #0
   166f0:	beq	16a08 <__assert_fail@plt+0x5638>
   166f4:	ldr	r1, [pc, #3048]	; 172e4 <__assert_fail@plt+0x5f14>
   166f8:	ldr	r0, [sp, #940]	; 0x3ac
   166fc:	bl	110a0 <strcmp@plt>
   16700:	mov	r2, #5
   16704:	cmp	r0, #0
   16708:	bne	16a20 <__assert_fail@plt+0x5650>
   1670c:	ldr	r1, [pc, #3028]	; 172e8 <__assert_fail@plt+0x5f18>
   16710:	bl	11130 <dcgettext@plt>
   16714:	bl	12abc <__assert_fail@plt+0x16ec>
   16718:	ldr	r7, [sp, #36]	; 0x24
   1671c:	ldr	r1, [pc, #3016]	; 172ec <__assert_fail@plt+0x5f1c>
   16720:	mov	r2, #5
   16724:	ldm	r7, {r4, r6}
   16728:	mov	r0, #0
   1672c:	bl	11130 <dcgettext@plt>
   16730:	asr	r5, r4, #31
   16734:	mov	r2, r4
   16738:	mov	r3, r5
   1673c:	str	r6, [sp]
   16740:	bl	12abc <__assert_fail@plt+0x16ec>
   16744:	add	r1, sp, #260	; 0x104
   16748:	mov	r0, r7
   1674c:	bl	11088 <gmtime_r@plt>
   16750:	cmp	r0, #0
   16754:	beq	16788 <__assert_fail@plt+0x53b8>
   16758:	mov	r2, #5
   1675c:	ldr	r1, [pc, #2956]	; 172f0 <__assert_fail@plt+0x5f20>
   16760:	mov	r0, #0
   16764:	bl	11130 <dcgettext@plt>
   16768:	mov	r1, #0
   1676c:	add	r2, sp, #364	; 0x16c
   16770:	mov	r4, r0
   16774:	add	r0, sp, #260	; 0x104
   16778:	bl	137e4 <__assert_fail@plt+0x2414>
   1677c:	mov	r1, r0
   16780:	mov	r0, r4
   16784:	bl	12abc <__assert_fail@plt+0x16ec>
   16788:	ldr	r1, [sp, #36]	; 0x24
   1678c:	add	r2, sp, #564	; 0x234
   16790:	mov	r0, fp
   16794:	bl	1aa14 <__assert_fail@plt+0x9644>
   16798:	cmp	r0, #0
   1679c:	beq	167e8 <__assert_fail@plt+0x5418>
   167a0:	mov	r2, #5
   167a4:	ldr	r1, [pc, #2888]	; 172f4 <__assert_fail@plt+0x5f24>
   167a8:	mov	r0, #0
   167ac:	ldr	r6, [sp, #600]	; 0x258
   167b0:	bl	11130 <dcgettext@plt>
   167b4:	add	r2, sp, #364	; 0x16c
   167b8:	mov	r1, #0
   167bc:	mov	r4, r0
   167c0:	add	r0, sp, #564	; 0x234
   167c4:	bl	137e4 <__assert_fail@plt+0x2414>
   167c8:	add	r1, sp, #100	; 0x64
   167cc:	mov	r5, r0
   167d0:	mov	r0, r6
   167d4:	bl	12998 <__assert_fail@plt+0x15c8>
   167d8:	mov	r1, r5
   167dc:	mov	r2, r0
   167e0:	mov	r0, r4
   167e4:	bl	12abc <__assert_fail@plt+0x16ec>
   167e8:	mov	r8, sl
   167ec:	b	165c4 <__assert_fail@plt+0x51f4>
   167f0:	ldr	r2, [sp, #40]	; 0x28
   167f4:	ldr	r3, [sp, #664]	; 0x298
   167f8:	add	r4, r4, r2
   167fc:	cmp	r3, r4
   16800:	mov	r2, #5
   16804:	ldrcs	r1, [pc, #2796]	; 172f8 <__assert_fail@plt+0x5f28>
   16808:	ldrcc	r1, [pc, #2796]	; 172fc <__assert_fail@plt+0x5f2c>
   1680c:	mov	r0, #0
   16810:	bl	11130 <dcgettext@plt>
   16814:	ldr	r1, [sp, #664]	; 0x298
   16818:	bl	12abc <__assert_fail@plt+0x16ec>
   1681c:	mov	r8, #0
   16820:	b	165c4 <__assert_fail@plt+0x51f4>
   16824:	ldr	r0, [sp, #836]	; 0x344
   16828:	ldr	r1, [sp, #820]	; 0x334
   1682c:	ldr	lr, [sp, #824]	; 0x338
   16830:	orr	r3, r0, r1
   16834:	orr	r3, r3, lr
   16838:	ldr	r4, [sp, #832]	; 0x340
   1683c:	ldr	r2, [sp, #828]	; 0x33c
   16840:	ldr	lr, [sp, #840]	; 0x348
   16844:	orr	r3, r3, r4
   16848:	add	r2, r2, lr
   1684c:	orr	r3, r3, r2
   16850:	cmp	r3, #1
   16854:	ble	16a7c <__assert_fail@plt+0x56ac>
   16858:	cmp	ip, #0
   1685c:	beq	165c4 <__assert_fail@plt+0x51f4>
   16860:	cmp	r0, #1
   16864:	ble	16874 <__assert_fail@plt+0x54a4>
   16868:	ldr	r0, [pc, #2704]	; 17300 <__assert_fail@plt+0x5f30>
   1686c:	bl	12abc <__assert_fail@plt+0x16ec>
   16870:	ldr	r1, [sp, #820]	; 0x334
   16874:	cmp	r1, #1
   16878:	ble	16884 <__assert_fail@plt+0x54b4>
   1687c:	ldr	r0, [pc, #2688]	; 17304 <__assert_fail@plt+0x5f34>
   16880:	bl	12abc <__assert_fail@plt+0x16ec>
   16884:	ldr	r3, [sp, #824]	; 0x338
   16888:	cmp	r3, #1
   1688c:	ble	16898 <__assert_fail@plt+0x54c8>
   16890:	ldr	r0, [pc, #2672]	; 17308 <__assert_fail@plt+0x5f38>
   16894:	bl	12abc <__assert_fail@plt+0x16ec>
   16898:	ldr	r3, [sp, #832]	; 0x340
   1689c:	cmp	r3, #1
   168a0:	ble	168ac <__assert_fail@plt+0x54dc>
   168a4:	ldr	r0, [pc, #2656]	; 1730c <__assert_fail@plt+0x5f3c>
   168a8:	bl	12abc <__assert_fail@plt+0x16ec>
   168ac:	ldr	r3, [sp, #828]	; 0x33c
   168b0:	ldr	r2, [sp, #840]	; 0x348
   168b4:	add	r3, r3, r2
   168b8:	cmp	r3, #1
   168bc:	ble	165c4 <__assert_fail@plt+0x51f4>
   168c0:	ldr	r0, [pc, #2632]	; 17310 <__assert_fail@plt+0x5f40>
   168c4:	bl	12abc <__assert_fail@plt+0x16ec>
   168c8:	b	165c4 <__assert_fail@plt+0x51f4>
   168cc:	str	r1, [sp, #48]	; 0x30
   168d0:	bl	1b670 <__assert_fail@plt+0xa2a0>
   168d4:	ldr	r1, [sp, #48]	; 0x30
   168d8:	subs	r3, r0, #0
   168dc:	str	r3, [sp, #32]
   168e0:	beq	169b8 <__assert_fail@plt+0x55e8>
   168e4:	ldrb	lr, [r5, #4]
   168e8:	ldr	r9, [sp, #32]
   168ec:	b	16600 <__assert_fail@plt+0x5230>
   168f0:	mov	r2, #5
   168f4:	ldr	r1, [pc, #2584]	; 17314 <__assert_fail@plt+0x5f44>
   168f8:	bl	11130 <dcgettext@plt>
   168fc:	bl	12abc <__assert_fail@plt+0x16ec>
   16900:	ldrb	r3, [sp, #816]	; 0x330
   16904:	cmp	r3, #0
   16908:	bne	169dc <__assert_fail@plt+0x560c>
   1690c:	ldr	r3, [sp, #840]	; 0x348
   16910:	cmp	r3, #0
   16914:	bne	16b08 <__assert_fail@plt+0x5738>
   16918:	ldr	r3, [sp, #940]	; 0x3ac
   1691c:	cmp	r3, #0
   16920:	beq	16cd4 <__assert_fail@plt+0x5904>
   16924:	ldr	r3, [sp, #936]	; 0x3a8
   16928:	cmp	r3, fp
   1692c:	beq	16b20 <__assert_fail@plt+0x5750>
   16930:	ldr	r4, [pc, #2528]	; 17318 <__assert_fail@plt+0x5f48>
   16934:	ldr	r1, [pc, #2528]	; 1731c <__assert_fail@plt+0x5f4c>
   16938:	mov	r2, #5
   1693c:	mov	r0, r9
   16940:	ldr	r5, [r4]
   16944:	bl	11130 <dcgettext@plt>
   16948:	ldr	r3, [sp, #940]	; 0x3ac
   1694c:	mov	r1, #1
   16950:	mov	r2, r0
   16954:	mov	r0, r5
   16958:	bl	112ec <__fprintf_chk@plt>
   1695c:	ldr	r3, [sp, #828]	; 0x33c
   16960:	cmp	r3, #0
   16964:	beq	16994 <__assert_fail@plt+0x55c4>
   16968:	ldr	r3, [sp, #840]	; 0x348
   1696c:	cmp	r3, #0
   16970:	bne	16a54 <__assert_fail@plt+0x5684>
   16974:	ldr	r3, [sp, #684]	; 0x2ac
   16978:	cmp	r3, #0
   1697c:	ble	169a0 <__assert_fail@plt+0x55d0>
   16980:	ldr	r3, [r4]
   16984:	mov	r2, #5
   16988:	mov	r1, #1
   1698c:	ldr	r0, [pc, #2444]	; 17320 <__assert_fail@plt+0x5f50>
   16990:	bl	11184 <fwrite@plt>
   16994:	ldr	r3, [sp, #840]	; 0x348
   16998:	cmp	r3, #0
   1699c:	bne	16a54 <__assert_fail@plt+0x5684>
   169a0:	ldr	r1, [r4]
   169a4:	mov	r0, #10
   169a8:	bl	11340 <fputc@plt>
   169ac:	ldrb	ip, [sp, #845]	; 0x34d
   169b0:	mov	sl, ip
   169b4:	b	166c4 <__assert_fail@plt+0x52f4>
   169b8:	mov	r8, #0
   169bc:	str	r8, [sp, #32]
   169c0:	b	165d8 <__assert_fail@plt+0x5208>
   169c4:	add	r0, sp, #92	; 0x5c
   169c8:	bl	1276c <__assert_fail@plt+0x139c>
   169cc:	add	r7, sp, #92	; 0x5c
   169d0:	b	162fc <__assert_fail@plt+0x4f2c>
   169d4:	mov	r8, #1
   169d8:	b	165c4 <__assert_fail@plt+0x51f4>
   169dc:	ldr	r4, [pc, #2356]	; 17318 <__assert_fail@plt+0x5f48>
   169e0:	ldr	r1, [pc, #2364]	; 17324 <__assert_fail@plt+0x5f54>
   169e4:	mov	r2, #5
   169e8:	ldr	r5, [r4]
   169ec:	mov	r0, r9
   169f0:	bl	11130 <dcgettext@plt>
   169f4:	mov	r1, #1
   169f8:	mov	r2, r0
   169fc:	mov	r0, r5
   16a00:	bl	112ec <__fprintf_chk@plt>
   16a04:	b	1695c <__assert_fail@plt+0x558c>
   16a08:	mov	r2, #5
   16a0c:	ldr	r1, [pc, #2324]	; 17328 <__assert_fail@plt+0x5f58>
   16a10:	mov	r0, r3
   16a14:	bl	11130 <dcgettext@plt>
   16a18:	bl	12abc <__assert_fail@plt+0x16ec>
   16a1c:	b	16718 <__assert_fail@plt+0x5348>
   16a20:	ldr	r1, [pc, #2308]	; 1732c <__assert_fail@plt+0x5f5c>
   16a24:	mov	r0, #0
   16a28:	bl	11130 <dcgettext@plt>
   16a2c:	ldr	r1, [sp, #940]	; 0x3ac
   16a30:	bl	12abc <__assert_fail@plt+0x16ec>
   16a34:	b	16718 <__assert_fail@plt+0x5348>
   16a38:	ldr	r1, [pc, #2208]	; 172e0 <__assert_fail@plt+0x5f10>
   16a3c:	str	r3, [sp, #868]	; 0x364
   16a40:	mov	r3, #0
   16a44:	str	r2, [sp, #876]	; 0x36c
   16a48:	str	r1, [sp, #872]	; 0x368
   16a4c:	str	r3, [sp, #880]	; 0x370
   16a50:	b	1657c <__assert_fail@plt+0x51ac>
   16a54:	add	r1, sp, #100	; 0x64
   16a58:	ldr	r0, [sp, #688]	; 0x2b0
   16a5c:	ldr	r5, [r4]
   16a60:	bl	12998 <__assert_fail@plt+0x15c8>
   16a64:	ldr	r2, [pc, #2244]	; 17330 <__assert_fail@plt+0x5f60>
   16a68:	mov	r1, #1
   16a6c:	mov	r3, r0
   16a70:	mov	r0, r5
   16a74:	bl	112ec <__fprintf_chk@plt>
   16a78:	b	169a0 <__assert_fail@plt+0x55d0>
   16a7c:	add	r3, sp, #704	; 0x2c0
   16a80:	ldrd	r6, [r3]
   16a84:	cmp	r6, #0
   16a88:	sbcs	r3, r7, #0
   16a8c:	blt	16b8c <__assert_fail@plt+0x57bc>
   16a90:	ldr	r3, [sp, #712]	; 0x2c8
   16a94:	cmp	r3, #2
   16a98:	beq	16c8c <__assert_fail@plt+0x58bc>
   16a9c:	ldr	r2, [pc, #2192]	; 17334 <__assert_fail@plt+0x5f64>
   16aa0:	mov	r3, #0
   16aa4:	cmp	r2, r6
   16aa8:	sbcs	r3, r3, r7
   16aac:	movge	r4, r6
   16ab0:	bge	16b4c <__assert_fail@plt+0x577c>
   16ab4:	sub	r3, r6, #1888	; 0x760
   16ab8:	sub	r3, r3, #12
   16abc:	cmp	ip, #0
   16ac0:	str	r3, [sp, #148]	; 0x94
   16ac4:	beq	165c4 <__assert_fail@plt+0x51f4>
   16ac8:	mov	r2, #5
   16acc:	ldr	r1, [pc, #2148]	; 17338 <__assert_fail@plt+0x5f68>
   16ad0:	mov	r0, #0
   16ad4:	bl	11130 <dcgettext@plt>
   16ad8:	mov	r2, r6
   16adc:	mov	r3, r7
   16ae0:	bl	12abc <__assert_fail@plt+0x16ec>
   16ae4:	ldrb	sl, [sp, #845]	; 0x34d
   16ae8:	cmp	sl, #0
   16aec:	beq	165c4 <__assert_fail@plt+0x51f4>
   16af0:	mov	r2, #5
   16af4:	ldr	r1, [pc, #2112]	; 1733c <__assert_fail@plt+0x5f6c>
   16af8:	mov	r0, #0
   16afc:	bl	11130 <dcgettext@plt>
   16b00:	bl	12abc <__assert_fail@plt+0x16ec>
   16b04:	b	165c4 <__assert_fail@plt+0x51f4>
   16b08:	ldr	r4, [pc, #2056]	; 17318 <__assert_fail@plt+0x5f48>
   16b0c:	mov	r2, #5
   16b10:	ldr	r1, [pc, #2088]	; 17340 <__assert_fail@plt+0x5f70>
   16b14:	ldr	r5, [r4]
   16b18:	mov	r0, r9
   16b1c:	b	169f0 <__assert_fail@plt+0x5620>
   16b20:	ldr	r1, [pc, #1980]	; 172e4 <__assert_fail@plt+0x5f14>
   16b24:	ldr	r0, [sp, #940]	; 0x3ac
   16b28:	bl	110a0 <strcmp@plt>
   16b2c:	ldr	r4, [pc, #2020]	; 17318 <__assert_fail@plt+0x5f48>
   16b30:	mov	r2, #5
   16b34:	cmp	r0, #0
   16b38:	bne	16bb8 <__assert_fail@plt+0x57e8>
   16b3c:	ldr	r1, [pc, #2048]	; 17344 <__assert_fail@plt+0x5f74>
   16b40:	ldr	r5, [r4]
   16b44:	b	169f0 <__assert_fail@plt+0x5620>
   16b48:	ldrb	ip, [sp, #845]	; 0x34d
   16b4c:	sub	r3, r4, #1888	; 0x760
   16b50:	mov	sl, ip
   16b54:	sub	r3, r3, #12
   16b58:	str	r3, [sp, #148]	; 0x94
   16b5c:	add	r3, sp, #720	; 0x2d0
   16b60:	mov	r1, #0
   16b64:	ldrd	r2, [r3]
   16b68:	mvn	r0, #0
   16b6c:	subs	r4, r2, #-2147483647	; 0x80000001
   16b70:	adc	r5, r3, #0
   16b74:	cmp	r5, r1
   16b78:	cmpeq	r4, r0
   16b7c:	bls	16bc0 <__assert_fail@plt+0x57f0>
   16b80:	sub	r2, r2, #1
   16b84:	str	r2, [sp, #144]	; 0x90
   16b88:	b	16ae8 <__assert_fail@plt+0x5718>
   16b8c:	ldr	r2, [pc, #1972]	; 17348 <__assert_fail@plt+0x5f78>
   16b90:	mvn	r3, #0
   16b94:	cmp	r6, r2
   16b98:	sbcs	r3, r7, r3
   16b9c:	blt	16cec <__assert_fail@plt+0x591c>
   16ba0:	rsb	r6, r6, #-16777216	; 0xff000000
   16ba4:	add	r6, r6, #16711680	; 0xff0000
   16ba8:	add	r6, r6, #63488	; 0xf800
   16bac:	add	r6, r6, #148	; 0x94
   16bb0:	str	r6, [sp, #148]	; 0x94
   16bb4:	b	16b5c <__assert_fail@plt+0x578c>
   16bb8:	ldr	r1, [pc, #1932]	; 1734c <__assert_fail@plt+0x5f7c>
   16bbc:	b	1693c <__assert_fail@plt+0x556c>
   16bc0:	add	r1, sp, #728	; 0x2d8
   16bc4:	sub	r2, r2, #1
   16bc8:	ldrd	r4, [r1]
   16bcc:	str	r2, [sp, #144]	; 0x90
   16bd0:	cmp	r4, #0
   16bd4:	sbcs	r3, r5, #0
   16bd8:	blt	17a48 <__assert_fail@plt+0x6678>
   16bdc:	cmp	r4, #-2147483648	; 0x80000000
   16be0:	sbcs	r3, r5, #0
   16be4:	movge	r3, #1
   16be8:	movlt	r3, #0
   16bec:	str	r3, [sp, #48]	; 0x30
   16bf0:	ldr	r3, [sp, #48]	; 0x30
   16bf4:	cmp	r3, #0
   16bf8:	strne	r4, [sp, #140]	; 0x8c
   16bfc:	bne	16ae8 <__assert_fail@plt+0x5718>
   16c00:	ldr	r0, [sp, #836]	; 0x344
   16c04:	str	r4, [sp, #140]	; 0x8c
   16c08:	cmp	r0, #0
   16c0c:	mov	sl, r4
   16c10:	beq	16d74 <__assert_fail@plt+0x59a4>
   16c14:	ldr	r3, [sp, #692]	; 0x2b4
   16c18:	add	r1, sp, #736	; 0x2e0
   16c1c:	cmp	r3, #0
   16c20:	ldrd	r6, [r1]
   16c24:	beq	17bc4 <__assert_fail@plt+0x67f4>
   16c28:	cmp	r3, #1
   16c2c:	bne	17b08 <__assert_fail@plt+0x6738>
   16c30:	subs	r4, r6, #1
   16c34:	sbc	r5, r7, #0
   16c38:	cmp	r5, #0
   16c3c:	cmpeq	r4, #10
   16c40:	addls	r3, r6, #12
   16c44:	bls	17b18 <__assert_fail@plt+0x6748>
   16c48:	cmp	r7, #0
   16c4c:	cmpeq	r6, #12
   16c50:	beq	17bb0 <__assert_fail@plt+0x67e0>
   16c54:	ldr	r4, [pc, #1780]	; 17350 <__assert_fail@plt+0x5f80>
   16c58:	mvn	r3, #0
   16c5c:	str	r3, [sp, #136]	; 0x88
   16c60:	cmp	ip, #0
   16c64:	beq	165c4 <__assert_fail@plt+0x51f4>
   16c68:	mov	r2, #5
   16c6c:	ldr	r1, [pc, #1760]	; 17354 <__assert_fail@plt+0x5f84>
   16c70:	mov	r0, #0
   16c74:	bl	11130 <dcgettext@plt>
   16c78:	add	r3, sp, #736	; 0x2e0
   16c7c:	ldrd	r2, [r3]
   16c80:	str	r4, [sp]
   16c84:	bl	12abc <__assert_fail@plt+0x16ec>
   16c88:	b	165c4 <__assert_fail@plt+0x51f4>
   16c8c:	cmp	r6, #69	; 0x45
   16c90:	sbcs	r3, r7, #0
   16c94:	movlt	r4, #2000	; 0x7d0
   16c98:	ldrge	r4, [pc, #1588]	; 172d4 <__assert_fail@plt+0x5f04>
   16c9c:	mov	r5, #0
   16ca0:	adds	r4, r4, r6
   16ca4:	adc	r5, r5, r7
   16ca8:	cmp	ip, #0
   16cac:	bne	16d28 <__assert_fail@plt+0x5958>
   16cb0:	ldr	r2, [pc, #1660]	; 17334 <__assert_fail@plt+0x5f64>
   16cb4:	mov	r3, #0
   16cb8:	cmp	r2, r4
   16cbc:	sbcs	r3, r3, r5
   16cc0:	sublt	r3, r4, #1888	; 0x760
   16cc4:	sublt	r3, r3, #12
   16cc8:	strlt	r3, [sp, #148]	; 0x94
   16ccc:	blt	165c4 <__assert_fail@plt+0x51f4>
   16cd0:	b	16b4c <__assert_fail@plt+0x577c>
   16cd4:	ldr	r4, [pc, #1596]	; 17318 <__assert_fail@plt+0x5f48>
   16cd8:	mov	r2, #5
   16cdc:	ldr	r1, [pc, #1652]	; 17358 <__assert_fail@plt+0x5f88>
   16ce0:	ldr	r5, [r4]
   16ce4:	ldr	r0, [sp, #940]	; 0x3ac
   16ce8:	b	169f0 <__assert_fail@plt+0x5620>
   16cec:	ldr	r2, [pc, #1640]	; 1735c <__assert_fail@plt+0x5f8c>
   16cf0:	mvn	r3, #0
   16cf4:	subs	r2, r2, r6
   16cf8:	sbc	r3, r3, r7
   16cfc:	cmp	r2, #-2147483648	; 0x80000000
   16d00:	sbcs	r3, r3, #0
   16d04:	blt	16ba0 <__assert_fail@plt+0x57d0>
   16d08:	rsb	r3, r6, #-16777216	; 0xff000000
   16d0c:	add	r3, r3, #16711680	; 0xff0000
   16d10:	add	r3, r3, #63488	; 0xf800
   16d14:	add	r3, r3, #148	; 0x94
   16d18:	cmp	ip, #0
   16d1c:	str	r3, [sp, #148]	; 0x94
   16d20:	beq	165c4 <__assert_fail@plt+0x51f4>
   16d24:	b	16ac8 <__assert_fail@plt+0x56f8>
   16d28:	mov	r2, #5
   16d2c:	ldr	r1, [pc, #1580]	; 17360 <__assert_fail@plt+0x5f90>
   16d30:	mov	r0, #0
   16d34:	bl	11130 <dcgettext@plt>
   16d38:	mov	r2, r6
   16d3c:	mov	r3, r7
   16d40:	strd	r4, [sp]
   16d44:	bl	12abc <__assert_fail@plt+0x16ec>
   16d48:	ldr	r2, [pc, #1508]	; 17334 <__assert_fail@plt+0x5f64>
   16d4c:	mov	r3, #0
   16d50:	cmp	r2, r4
   16d54:	sbcs	r3, r3, r5
   16d58:	bge	16b48 <__assert_fail@plt+0x5778>
   16d5c:	sub	r3, r4, #1888	; 0x760
   16d60:	sub	r3, r3, #12
   16d64:	str	r3, [sp, #148]	; 0x94
   16d68:	mov	r6, r4
   16d6c:	mov	r7, r5
   16d70:	b	16ac8 <__assert_fail@plt+0x56f8>
   16d74:	ldrb	r3, [sp, #817]	; 0x331
   16d78:	cmp	r3, #0
   16d7c:	beq	17a08 <__assert_fail@plt+0x6638>
   16d80:	ldr	r3, [sp, #820]	; 0x334
   16d84:	cmp	r3, #0
   16d88:	bne	17a08 <__assert_fail@plt+0x6638>
   16d8c:	ldr	r3, [sp, #824]	; 0x338
   16d90:	cmp	r3, #0
   16d94:	beq	16c14 <__assert_fail@plt+0x5844>
   16d98:	ldr	r3, [sp, #48]	; 0x30
   16d9c:	cmp	ip, #0
   16da0:	str	r3, [sp, #128]	; 0x80
   16da4:	str	r3, [sp, #132]	; 0x84
   16da8:	str	r3, [sp, #136]	; 0x88
   16dac:	str	r3, [sp, #756]	; 0x2f4
   16db0:	bne	17bb8 <__assert_fail@plt+0x67e8>
   16db4:	mov	r3, r9
   16db8:	mov	lr, r9
   16dbc:	mov	r1, r9
   16dc0:	mvn	r0, #0
   16dc4:	str	r0, [sp, #160]	; 0xa0
   16dc8:	ldr	r0, [sp, #828]	; 0x33c
   16dcc:	ldr	r6, [sp, #148]	; 0x94
   16dd0:	cmp	r0, #0
   16dd4:	str	r1, [sp, #172]	; 0xac
   16dd8:	ldrne	ip, [sp, #684]	; 0x2ac
   16ddc:	ldreq	ip, [sp, #160]	; 0xa0
   16de0:	add	r1, sp, #128	; 0x80
   16de4:	mvn	r5, #0
   16de8:	mov	r0, fp
   16dec:	strne	ip, [sp, #160]	; 0xa0
   16df0:	str	lr, [sp, #176]	; 0xb0
   16df4:	str	r3, [sp, #180]	; 0xb4
   16df8:	str	r2, [sp, #188]	; 0xbc
   16dfc:	str	ip, [sp, #204]	; 0xcc
   16e00:	str	sl, [sp, #184]	; 0xb8
   16e04:	str	r6, [sp, #192]	; 0xc0
   16e08:	str	r5, [sp, #152]	; 0x98
   16e0c:	bl	1aa98 <__assert_fail@plt+0x96c8>
   16e10:	add	r1, sp, #128	; 0x80
   16e14:	str	r0, [sp, #40]	; 0x28
   16e18:	add	r0, sp, #172	; 0xac
   16e1c:	bl	12918 <__assert_fail@plt+0x1548>
   16e20:	cmp	r0, #0
   16e24:	bne	170ec <__assert_fail@plt+0x5d1c>
   16e28:	ldr	r4, [sp, #840]	; 0x348
   16e2c:	cmp	r4, #0
   16e30:	bne	17054 <__assert_fail@plt+0x5c84>
   16e34:	ldr	r3, [sp, #172]	; 0xac
   16e38:	ldr	r2, [sp, #128]	; 0x80
   16e3c:	ldr	r1, [sp, #176]	; 0xb0
   16e40:	ldr	r0, [sp, #132]	; 0x84
   16e44:	str	r2, [sp, #48]	; 0x30
   16e48:	cmp	r3, r2
   16e4c:	cmpeq	r1, r0
   16e50:	ldr	r2, [sp, #188]	; 0xbc
   16e54:	str	r1, [sp, #56]	; 0x38
   16e58:	str	r2, [sp, #36]	; 0x24
   16e5c:	mov	r1, r2
   16e60:	ldr	r2, [sp, #192]	; 0xc0
   16e64:	str	r3, [sp, #40]	; 0x28
   16e68:	str	r0, [sp, #64]	; 0x40
   16e6c:	ldr	ip, [sp, #180]	; 0xb4
   16e70:	ldr	r3, [sp, #136]	; 0x88
   16e74:	mov	r0, r2
   16e78:	str	r2, [sp, #80]	; 0x50
   16e7c:	ldr	r2, [sp, #148]	; 0x94
   16e80:	str	ip, [sp, #72]	; 0x48
   16e84:	str	r3, [sp, #76]	; 0x4c
   16e88:	ldr	r5, [sp, #184]	; 0xb8
   16e8c:	ldr	r7, [sp, #140]	; 0x8c
   16e90:	ldr	sl, [sp, #144]	; 0x90
   16e94:	mov	lr, r2
   16e98:	str	r2, [sp, #84]	; 0x54
   16e9c:	bne	16ed4 <__assert_fail@plt+0x5b04>
   16ea0:	mov	r2, r3
   16ea4:	cmp	ip, r2
   16ea8:	sub	r3, r5, r7
   16eac:	clz	r3, r3
   16eb0:	lsr	r3, r3, #5
   16eb4:	moveq	r3, #0
   16eb8:	cmp	r3, #0
   16ebc:	beq	16ed4 <__assert_fail@plt+0x5b04>
   16ec0:	mov	r2, r1
   16ec4:	cmp	r2, sl
   16ec8:	cmpeq	r0, lr
   16ecc:	moveq	r9, #1
   16ed0:	movne	r9, #0
   16ed4:	ldrb	r3, [sp, #845]	; 0x34d
   16ed8:	cmp	r3, #0
   16edc:	beq	165c4 <__assert_fail@plt+0x51f4>
   16ee0:	mov	r2, #5
   16ee4:	ldr	r1, [pc, #1144]	; 17364 <__assert_fail@plt+0x5f94>
   16ee8:	mov	r0, #0
   16eec:	bl	11130 <dcgettext@plt>
   16ef0:	bl	12abc <__assert_fail@plt+0x16ec>
   16ef4:	mov	r2, #5
   16ef8:	ldr	r1, [pc, #1128]	; 17368 <__assert_fail@plt+0x5f98>
   16efc:	mov	r0, #0
   16f00:	bl	11130 <dcgettext@plt>
   16f04:	add	r2, sp, #564	; 0x234
   16f08:	add	r1, sp, #664	; 0x298
   16f0c:	mov	r6, r0
   16f10:	add	r0, sp, #172	; 0xac
   16f14:	bl	137e4 <__assert_fail@plt+0x2414>
   16f18:	mov	r1, r0
   16f1c:	mov	r0, r6
   16f20:	bl	12abc <__assert_fail@plt+0x16ec>
   16f24:	mov	r2, #5
   16f28:	ldr	r1, [pc, #1084]	; 1736c <__assert_fail@plt+0x5f9c>
   16f2c:	mov	r0, #0
   16f30:	bl	11130 <dcgettext@plt>
   16f34:	add	r2, sp, #564	; 0x234
   16f38:	add	r1, sp, #664	; 0x298
   16f3c:	mov	r6, r0
   16f40:	add	r0, sp, #128	; 0x80
   16f44:	bl	137e4 <__assert_fail@plt+0x2414>
   16f48:	mov	r1, r0
   16f4c:	mov	r0, r6
   16f50:	bl	12abc <__assert_fail@plt+0x16ec>
   16f54:	ldr	r1, [sp, #80]	; 0x50
   16f58:	ldr	r0, [sp, #84]	; 0x54
   16f5c:	ldr	r3, [pc, #1036]	; 17370 <__assert_fail@plt+0x5fa0>
   16f60:	cmp	r1, r0
   16f64:	ldr	r1, [sp, #72]	; 0x48
   16f68:	ldr	r0, [sp, #76]	; 0x4c
   16f6c:	ldr	r6, [pc, #1024]	; 17374 <__assert_fail@plt+0x5fa4>
   16f70:	ldr	r2, [pc, #1024]	; 17378 <__assert_fail@plt+0x5fa8>
   16f74:	moveq	r2, r3
   16f78:	cmp	r1, r0
   16f7c:	ldr	r1, [sp, #56]	; 0x38
   16f80:	ldr	r0, [sp, #64]	; 0x40
   16f84:	moveq	lr, r3
   16f88:	movne	lr, r6
   16f8c:	cmp	r1, r0
   16f90:	ldr	r0, [sp, #48]	; 0x30
   16f94:	ldr	r1, [sp, #40]	; 0x28
   16f98:	moveq	ip, r3
   16f9c:	movne	ip, r6
   16fa0:	cmp	r1, r0
   16fa4:	ldr	r1, [sp, #36]	; 0x24
   16fa8:	moveq	r0, r3
   16fac:	movne	r0, r6
   16fb0:	cmp	r1, sl
   16fb4:	moveq	r1, r3
   16fb8:	movne	r1, r6
   16fbc:	str	r2, [sp, #4]
   16fc0:	cmp	r5, r7
   16fc4:	ldr	r2, [pc, #944]	; 1737c <__assert_fail@plt+0x5fac>
   16fc8:	moveq	r6, r3
   16fcc:	mov	r3, #100	; 0x64
   16fd0:	str	r0, [sp, #24]
   16fd4:	str	r1, [sp, #8]
   16fd8:	str	r2, [sp]
   16fdc:	mov	r1, r3
   16fe0:	str	lr, [sp, #16]
   16fe4:	str	ip, [sp, #20]
   16fe8:	str	r6, [sp, #12]
   16fec:	add	r0, sp, #564	; 0x234
   16ff0:	mov	r2, #1
   16ff4:	bl	113c4 <__snprintf_chk@plt>
   16ff8:	subs	r3, r0, #0
   16ffc:	blt	17f50 <__assert_fail@plt+0x6b80>
   17000:	cmp	r3, #99	; 0x63
   17004:	movge	r3, #99	; 0x63
   17008:	cmp	r3, #0
   1700c:	beq	17f40 <__assert_fail@plt+0x6b70>
   17010:	sub	r2, r3, #1
   17014:	add	r1, sp, #896	; 0x380
   17018:	add	r1, r1, r2
   1701c:	ldrb	r1, [r1, #-332]	; 0xfffffeb4
   17020:	cmp	r1, #32
   17024:	addeq	r3, sp, #564	; 0x234
   17028:	addeq	r1, r3, r2
   1702c:	moveq	r3, r2
   17030:	bne	17f40 <__assert_fail@plt+0x6b70>
   17034:	cmp	r3, #0
   17038:	beq	17f40 <__assert_fail@plt+0x6b70>
   1703c:	ldrb	r0, [r1, #-1]!
   17040:	sub	r2, r3, #1
   17044:	cmp	r0, #32
   17048:	bne	17f40 <__assert_fail@plt+0x6b70>
   1704c:	mov	r3, r2
   17050:	b	17034 <__assert_fail@plt+0x5c64>
   17054:	add	r6, sp, #896	; 0x380
   17058:	mov	r3, #88	; 0x58
   1705c:	strb	r3, [r6, #-332]!	; 0xfffffeb4
   17060:	ldr	r0, [sp, #688]	; 0x2b0
   17064:	add	r1, r6, #3
   17068:	strb	r3, [sp, #566]	; 0x236
   1706c:	strb	r3, [sp, #565]	; 0x235
   17070:	bl	12998 <__assert_fail@plt+0x15c8>
   17074:	mov	r0, r6
   17078:	bl	1a79c <__assert_fail@plt+0x93cc>
   1707c:	subs	r7, r0, #0
   17080:	beq	17e68 <__assert_fail@plt+0x6a98>
   17084:	ldr	r3, [sp, #172]	; 0xac
   17088:	ldr	r1, [sp, #176]	; 0xb0
   1708c:	ldr	r2, [sp, #180]	; 0xb4
   17090:	str	r3, [sp, #128]	; 0x80
   17094:	ldr	r3, [sp, #184]	; 0xb8
   17098:	str	r1, [sp, #132]	; 0x84
   1709c:	ldr	r1, [sp, #188]	; 0xbc
   170a0:	str	r2, [sp, #136]	; 0x88
   170a4:	str	r3, [sp, #140]	; 0x8c
   170a8:	ldr	r2, [sp, #192]	; 0xc0
   170ac:	ldr	r3, [sp, #204]	; 0xcc
   170b0:	str	r1, [sp, #144]	; 0x90
   170b4:	add	r1, sp, #128	; 0x80
   170b8:	str	r2, [sp, #148]	; 0x94
   170bc:	str	r3, [sp, #160]	; 0xa0
   170c0:	str	r5, [sp, #152]	; 0x98
   170c4:	bl	1aa98 <__assert_fail@plt+0x96c8>
   170c8:	add	r1, sp, #128	; 0x80
   170cc:	str	r0, [sp, #40]	; 0x28
   170d0:	add	r0, sp, #172	; 0xac
   170d4:	bl	12918 <__assert_fail@plt+0x1548>
   170d8:	mov	r5, r0
   170dc:	mov	r0, r7
   170e0:	bl	1a9e8 <__assert_fail@plt+0x9618>
   170e4:	cmp	r5, #0
   170e8:	beq	16e34 <__assert_fail@plt+0x5a64>
   170ec:	ldr	r3, [sp, #824]	; 0x338
   170f0:	cmp	r3, #0
   170f4:	beq	173e8 <__assert_fail@plt+0x6018>
   170f8:	ldr	r1, [sp, #820]	; 0x334
   170fc:	cmp	r1, #0
   17100:	bne	175e0 <__assert_fail@plt+0x6210>
   17104:	add	r3, sp, #672	; 0x2a0
   17108:	ldrd	r4, [r3]
   1710c:	cmp	r4, #1
   17110:	sbcs	r3, r5, #0
   17114:	blt	17ff4 <__assert_fail@plt+0x6c24>
   17118:	ldr	ip, [sp, #152]	; 0x98
   1711c:	ldr	r0, [sp, #680]	; 0x2a8
   17120:	mov	r3, r1
   17124:	subs	r2, ip, r0
   17128:	movne	r2, #1
   1712c:	add	r1, pc, #396	; 0x18c
   17130:	ldrd	r0, [r1]
   17134:	subs	r2, r4, r2
   17138:	sbc	r3, r5, r3
   1713c:	cmp	r0, r2
   17140:	sbcs	r3, r1, r3
   17144:	blt	17254 <__assert_fail@plt+0x5e84>
   17148:	cmp	r4, #1
   1714c:	sbcs	r3, r5, #0
   17150:	blt	17e4c <__assert_fail@plt+0x6a7c>
   17154:	ldr	r3, [sp, #152]	; 0x98
   17158:	ldr	r2, [sp, #680]	; 0x2a8
   1715c:	cmp	r3, r2
   17160:	movne	r0, #1
   17164:	movne	r1, #0
   17168:	beq	17ed0 <__assert_fail@plt+0x6b00>
   1716c:	subs	r4, r4, r0
   17170:	sbc	r5, r5, r1
   17174:	lsl	r0, r4, #3
   17178:	lsl	ip, r5, #3
   1717c:	orr	r1, ip, r4, lsr #29
   17180:	subs	r0, r0, r4
   17184:	sbc	r1, r1, r5
   17188:	cmp	r0, #0
   1718c:	sbcs	ip, r1, #0
   17190:	sub	ip, r2, r3
   17194:	add	r3, ip, #7
   17198:	ldr	r2, [pc, #480]	; 17380 <__assert_fail@plt+0x5fb0>
   1719c:	blt	17e8c <__assert_fail@plt+0x6abc>
   171a0:	smull	lr, r2, r2, r3
   171a4:	add	r2, r2, r3
   171a8:	asr	lr, r3, #31
   171ac:	rsb	r2, lr, r2, asr #2
   171b0:	rsb	r2, r2, r2, lsl #3
   171b4:	subs	r2, r3, r2
   171b8:	bmi	17208 <__assert_fail@plt+0x5e38>
   171bc:	mvn	r4, #0
   171c0:	subs	r4, r4, r0
   171c4:	mvn	r5, #-2147483648	; 0x80000000
   171c8:	sbc	r5, r5, r1
   171cc:	asr	r3, r2, #31
   171d0:	cmp	r4, r2
   171d4:	sbcs	r3, r5, r3
   171d8:	movlt	r3, #1
   171dc:	movge	r3, #0
   171e0:	cmp	r3, #0
   171e4:	bne	17254 <__assert_fail@plt+0x5e84>
   171e8:	ldr	lr, [pc, #400]	; 17380 <__assert_fail@plt+0x5fb0>
   171ec:	add	r3, ip, #7
   171f0:	smull	r2, lr, lr, r3
   171f4:	add	lr, lr, r3
   171f8:	asr	r2, r3, #31
   171fc:	rsb	r2, r2, lr, asr #2
   17200:	rsb	r2, r2, r2, lsl #3
   17204:	sub	r2, r3, r2
   17208:	ldr	ip, [sp, #140]	; 0x8c
   1720c:	adds	r0, r0, r2
   17210:	adc	r1, r1, r2, asr #31
   17214:	cmp	ip, #0
   17218:	blt	17da4 <__assert_fail@plt+0x69d4>
   1721c:	cmp	r0, #0
   17220:	sbcs	r3, r1, #0
   17224:	blt	17d7c <__assert_fail@plt+0x69ac>
   17228:	mvn	r2, #-2147483648	; 0x80000000
   1722c:	sub	r2, r2, ip
   17230:	cmp	r2, r0
   17234:	asr	r3, r2, #31
   17238:	sbcs	r3, r3, r1
   1723c:	movlt	r3, #1
   17240:	movge	r3, #0
   17244:	cmp	r3, #0
   17248:	beq	17dd8 <__assert_fail@plt+0x6a08>
   1724c:	add	r0, ip, r0
   17250:	str	r0, [sp, #140]	; 0x8c
   17254:	ldrb	r3, [sp, #845]	; 0x34d
   17258:	cmp	r3, #0
   1725c:	beq	165c4 <__assert_fail@plt+0x51f4>
   17260:	mov	r2, #5
   17264:	ldr	r1, [pc, #280]	; 17384 <__assert_fail@plt+0x5fb4>
   17268:	mov	r0, #0
   1726c:	bl	11130 <dcgettext@plt>
   17270:	add	r1, sp, #564	; 0x234
   17274:	mov	r6, r0
   17278:	add	r0, sp, #664	; 0x298
   1727c:	bl	1388c <__assert_fail@plt+0x24bc>
   17280:	add	r3, sp, #672	; 0x2a0
   17284:	add	r1, sp, #664	; 0x298
   17288:	add	r2, sp, #364	; 0x16c
   1728c:	ldrd	r4, [r3]
   17290:	ldr	r9, [sp, #680]	; 0x2a8
   17294:	mov	r7, r0
   17298:	add	r0, sp, #128	; 0x80
   1729c:	bl	137e4 <__assert_fail@plt+0x2414>
   172a0:	str	r9, [sp]
   172a4:	mov	r2, r4
   172a8:	mov	r3, r5
   172ac:	mov	r1, r7
   172b0:	str	r0, [sp, #4]
   172b4:	mov	r0, r6
   172b8:	bl	12abc <__assert_fail@plt+0x16ec>
   172bc:	b	165c4 <__assert_fail@plt+0x51f4>
   172c0:	stmdbmi	r4!, {r0, r3, r6, r9, ip, pc}
   172c4:	subne	r2, r9, #-1845493760	; 0x92000000
   172c8:	addeq	r0, r0, pc, lsl r0
   172cc:	andeq	pc, r1, r4, lsl #28
   172d0:	andeq	pc, r1, ip, ror #8
   172d4:	andeq	r0, r0, ip, ror #14
   172d8:	svcvc	0x008958ff
   172dc:	mcrvc	3, 1, r6, cr5, cr15, {7}
   172e0:	andeq	r0, r0, sp, lsl #2
   172e4:	andeq	pc, r1, r0, lsl r5	; <UNPREDICTABLE>
   172e8:	andeq	pc, r1, r4, ror sp	; <UNPREDICTABLE>
   172ec:			; <UNDEFINED> instruction: 0x0001fdb8
   172f0:	ldrdeq	pc, [r1], -ip
   172f4:	strdeq	pc, [r1], -r0
   172f8:	andeq	pc, r1, r0, ror r4	; <UNPREDICTABLE>
   172fc:	andeq	pc, r1, r8, lsl #9
   17300:	andeq	pc, r1, r8, ror r5	; <UNPREDICTABLE>
   17304:	muleq	r1, ip, r5
   17308:	andeq	pc, r1, r0, asr #11
   1730c:	andeq	pc, r1, r4, ror #11
   17310:	andeq	pc, r1, r0, lsl r6	; <UNPREDICTABLE>
   17314:			; <UNDEFINED> instruction: 0x0001f4b0
   17318:	andeq	r1, r3, r0, lsr #3
   1731c:	strdeq	pc, [r1], -r8
   17320:	andeq	pc, r1, r0, ror r5	; <UNPREDICTABLE>
   17324:	andeq	pc, r1, r4, asr #9
   17328:	andeq	pc, r1, r8, asr sp	; <UNPREDICTABLE>
   1732c:	muleq	r1, r0, sp
   17330:	andeq	pc, r1, r8, ror #10
   17334:	andhi	r0, r0, fp, ror #14
   17338:	andeq	pc, r1, r4, ror #12
   1733c:	andeq	pc, r1, r4, lsl #13
   17340:	andeq	pc, r1, r0, ror #9
   17344:	andeq	pc, r1, r8, lsl r5	; <UNPREDICTABLE>
   17348:			; <UNDEFINED> instruction: 0xfffff895
   1734c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   17350:	strdeq	pc, [r1], -ip
   17354:	andeq	pc, r1, ip, lsr #13
   17358:	andeq	pc, r1, r8, asr r5	; <UNPREDICTABLE>
   1735c:			; <UNDEFINED> instruction: 0xfffff894
   17360:	andeq	pc, r1, r8, lsr r6	; <UNPREDICTABLE>
   17364:	andeq	pc, r1, r8, lsl #15
   17368:	andeq	pc, r1, ip, lsr #15
   1736c:	andeq	pc, r1, ip, asr #15
   17370:	andeq	pc, r1, ip, ror #27
   17374:	andeq	pc, r1, r8, ror #8
   17378:	andeq	pc, r1, r0, ror #8
   1737c:	andeq	pc, r1, ip, ror #15
   17380:	subls	r2, r9, #-1828716544	; 0x93000000
   17384:	strdeq	pc, [r1], -r4
   17388:	andeq	pc, r1, r4, asr #18
   1738c:	andeq	pc, r1, r4, ror #19
   17390:	andeq	pc, r1, r4, ror #20
   17394:	andeq	pc, r1, ip, lsr #21
   17398:	andeq	r0, r0, r5, ror #16
   1739c:			; <UNDEFINED> instruction: 0x0001fabc
   173a0:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   173a4:	mov	r2, #5
   173a8:	ldr	r1, [pc, #-40]	; 17388 <__assert_fail@plt+0x5fb8>
   173ac:	mov	r0, #0
   173b0:	bl	11130 <dcgettext@plt>
   173b4:	add	r1, sp, #564	; 0x234
   173b8:	mov	r4, r0
   173bc:	add	r0, sp, #664	; 0x298
   173c0:	bl	1388c <__assert_fail@plt+0x24bc>
   173c4:	add	r2, sp, #364	; 0x16c
   173c8:	add	r1, sp, #664	; 0x298
   173cc:	mov	r5, r0
   173d0:	add	r0, sp, #128	; 0x80
   173d4:	bl	137e4 <__assert_fail@plt+0x2414>
   173d8:	mov	r1, r5
   173dc:	mov	r2, r0
   173e0:	mov	r0, r4
   173e4:	bl	12abc <__assert_fail@plt+0x16ec>
   173e8:	ldrb	r3, [sp, #845]	; 0x34d
   173ec:	cmp	r3, #0
   173f0:	beq	175ec <__assert_fail@plt+0x621c>
   173f4:	ldr	r3, [sp, #820]	; 0x334
   173f8:	cmp	r3, #0
   173fc:	beq	182f0 <__assert_fail@plt+0x6f20>
   17400:	ldr	r3, [sp, #824]	; 0x338
   17404:	cmp	r3, #0
   17408:	bne	17ed8 <__assert_fail@plt+0x6b08>
   1740c:	add	r4, sp, #364	; 0x16c
   17410:	mov	r2, #5
   17414:	ldr	r1, [pc, #-144]	; 1738c <__assert_fail@plt+0x5fbc>
   17418:	mov	r0, #0
   1741c:	bl	11130 <dcgettext@plt>
   17420:	mov	r2, r4
   17424:	add	r1, sp, #664	; 0x298
   17428:	mov	r5, r0
   1742c:	add	r0, sp, #128	; 0x80
   17430:	bl	137e4 <__assert_fail@plt+0x2414>
   17434:	mov	r1, r0
   17438:	mov	r0, r5
   1743c:	bl	12abc <__assert_fail@plt+0x16ec>
   17440:	add	r3, sp, #760	; 0x2f8
   17444:	add	r1, sp, #768	; 0x300
   17448:	add	ip, sp, #776	; 0x308
   1744c:	ldrd	r2, [r3]
   17450:	ldrd	r0, [r1]
   17454:	ldrd	r4, [ip]
   17458:	ldrb	sl, [sp, #845]	; 0x34d
   1745c:	orr	r0, r0, r2
   17460:	orr	r1, r1, r3
   17464:	orr	r6, r0, r4
   17468:	orr	r7, r1, r5
   1746c:	orrs	ip, r6, r7
   17470:	beq	17e3c <__assert_fail@plt+0x6a6c>
   17474:	cmp	sl, #0
   17478:	beq	174ac <__assert_fail@plt+0x60dc>
   1747c:	orrs	r3, r0, r1
   17480:	bne	17f0c <__assert_fail@plt+0x6b3c>
   17484:	ldr	r3, [sp, #136]	; 0x88
   17488:	cmp	r3, #12
   1748c:	beq	174a4 <__assert_fail@plt+0x60d4>
   17490:	mov	r2, #5
   17494:	ldr	r1, [pc, #-268]	; 17390 <__assert_fail@plt+0x5fc0>
   17498:	mov	r0, #0
   1749c:	bl	11130 <dcgettext@plt>
   174a0:	bl	12abc <__assert_fail@plt+0x16ec>
   174a4:	add	r3, sp, #760	; 0x2f8
   174a8:	ldrd	r2, [r3]
   174ac:	cmp	r2, #0
   174b0:	sbcs	r1, r3, #0
   174b4:	ldr	ip, [sp, #148]	; 0x94
   174b8:	blt	180c8 <__assert_fail@plt+0x6cf8>
   174bc:	cmp	ip, #0
   174c0:	blt	182d4 <__assert_fail@plt+0x6f04>
   174c4:	mvn	r0, #-2147483648	; 0x80000000
   174c8:	mov	r1, #0
   174cc:	cmp	r0, r2
   174d0:	sbcs	lr, r1, r3
   174d4:	blt	175b4 <__assert_fail@plt+0x61e4>
   174d8:	subs	r0, r0, r2
   174dc:	sbc	r1, r1, r3
   174e0:	asr	r5, ip, #31
   174e4:	cmp	r0, ip
   174e8:	sbcs	r1, r1, r5
   174ec:	movlt	r1, #1
   174f0:	movge	r1, #0
   174f4:	cmp	r1, #0
   174f8:	bne	175b4 <__assert_fail@plt+0x61e4>
   174fc:	add	r1, sp, #768	; 0x300
   17500:	add	sl, ip, r2
   17504:	ldrd	r0, [r1]
   17508:	cmp	r0, #0
   1750c:	sbcs	r3, r1, #0
   17510:	ldr	r3, [sp, #144]	; 0x90
   17514:	blt	183d8 <__assert_fail@plt+0x7008>
   17518:	cmp	r3, #0
   1751c:	blt	183bc <__assert_fail@plt+0x6fec>
   17520:	mvn	r4, #-2147483648	; 0x80000000
   17524:	mov	r5, #0
   17528:	cmp	r4, r0
   1752c:	sbcs	r2, r5, r1
   17530:	blt	175b4 <__assert_fail@plt+0x61e4>
   17534:	subs	r4, r4, r0
   17538:	sbc	r5, r5, r1
   1753c:	asr	r7, r3, #31
   17540:	cmp	r4, r3
   17544:	sbcs	r2, r5, r7
   17548:	movlt	r2, #1
   1754c:	movge	r2, #0
   17550:	cmp	r2, #0
   17554:	bne	175b4 <__assert_fail@plt+0x61e4>
   17558:	add	r2, sp, #776	; 0x308
   1755c:	add	r9, r3, r0
   17560:	ldrd	r6, [r2]
   17564:	ldr	r4, [sp, #140]	; 0x8c
   17568:	cmp	r6, #0
   1756c:	sbcs	r3, r7, #0
   17570:	blt	18394 <__assert_fail@plt+0x6fc4>
   17574:	cmp	r4, #0
   17578:	blt	18378 <__assert_fail@plt+0x6fa8>
   1757c:	mvn	r2, #-2147483648	; 0x80000000
   17580:	mov	r3, #0
   17584:	cmp	r2, r6
   17588:	sbcs	r1, r3, r7
   1758c:	blt	175b4 <__assert_fail@plt+0x61e4>
   17590:	subs	r2, r2, r6
   17594:	sbc	r3, r3, r7
   17598:	asr	r1, r4, #31
   1759c:	cmp	r2, r4
   175a0:	sbcs	r3, r3, r1
   175a4:	movlt	r5, #1
   175a8:	movge	r5, #0
   175ac:	cmp	r5, #0
   175b0:	beq	180f0 <__assert_fail@plt+0x6d20>
   175b4:	ldrb	r3, [sp, #845]	; 0x34d
   175b8:	cmp	r3, #0
   175bc:	beq	165c4 <__assert_fail@plt+0x51f4>
   175c0:	mov	r2, #5
   175c4:	ldr	r1, [pc, #-568]	; 17394 <__assert_fail@plt+0x5fc4>
   175c8:	mov	r0, #0
   175cc:	bl	11130 <dcgettext@plt>
   175d0:	ldr	r2, [pc, #-576]	; 17398 <__assert_fail@plt+0x5fc8>
   175d4:	ldr	r1, [pc, #-576]	; 1739c <__assert_fail@plt+0x5fcc>
   175d8:	bl	12abc <__assert_fail@plt+0x16ec>
   175dc:	b	165c4 <__assert_fail@plt+0x51f4>
   175e0:	ldrb	r2, [sp, #845]	; 0x34d
   175e4:	cmp	r2, #0
   175e8:	bne	17404 <__assert_fail@plt+0x6034>
   175ec:	add	r3, sp, #760	; 0x2f8
   175f0:	add	r1, sp, #768	; 0x300
   175f4:	add	ip, sp, #776	; 0x308
   175f8:	ldrd	r2, [r3]
   175fc:	ldrd	r0, [r1]
   17600:	ldrd	r4, [ip]
   17604:	orr	r0, r0, r2
   17608:	orr	r1, r1, r3
   1760c:	orr	r0, r0, r4
   17610:	orr	r1, r1, r5
   17614:	orrs	r1, r0, r1
   17618:	bne	174ac <__assert_fail@plt+0x60dc>
   1761c:	ldr	r3, [sp, #840]	; 0x348
   17620:	ldr	sl, [sp, #48]	; 0x30
   17624:	cmp	r3, #0
   17628:	beq	176d8 <__assert_fail@plt+0x6308>
   1762c:	ldr	r2, [sp, #164]	; 0xa4
   17630:	ldr	r1, [sp, #688]	; 0x2b0
   17634:	ldr	ip, [sp, #40]	; 0x28
   17638:	asr	r3, r2, #31
   1763c:	subs	r2, r1, r2
   17640:	rsc	r3, r3, r1, asr #31
   17644:	mvn	r1, ip
   17648:	lsr	r1, r1, #31
   1764c:	cmp	r1, r3, lsr #31
   17650:	beq	18060 <__assert_fail@plt+0x6c90>
   17654:	asr	r1, ip, #31
   17658:	cmp	ip, r2
   1765c:	mov	r0, ip
   17660:	sbcs	ip, r1, r3
   17664:	bge	18090 <__assert_fail@plt+0x6cc0>
   17668:	subs	r0, r2, r0
   1766c:	sbc	r1, r3, r1
   17670:	cmp	r0, #-2147483647	; 0x80000001
   17674:	sbcs	r1, r1, #0
   17678:	movge	r1, #1
   1767c:	movlt	r1, #0
   17680:	cmp	r1, #0
   17684:	bne	1803c <__assert_fail@plt+0x6c6c>
   17688:	ldr	r1, [sp, #40]	; 0x28
   1768c:	sub	r3, r1, r2
   17690:	str	r3, [sp, #40]	; 0x28
   17694:	cmp	sl, #0
   17698:	beq	176d8 <__assert_fail@plt+0x6308>
   1769c:	mov	r2, #5
   176a0:	ldr	r1, [pc, #-776]	; 173a0 <__assert_fail@plt+0x5fd0>
   176a4:	mov	r0, #0
   176a8:	bl	11130 <dcgettext@plt>
   176ac:	add	r1, sp, #664	; 0x298
   176b0:	add	r2, sp, #364	; 0x16c
   176b4:	mov	r4, r0
   176b8:	add	r0, sp, #128	; 0x80
   176bc:	bl	137e4 <__assert_fail@plt+0x2414>
   176c0:	ldr	r2, [sp, #40]	; 0x28
   176c4:	asr	r3, r2, #31
   176c8:	mov	r1, r0
   176cc:	mov	r0, r4
   176d0:	bl	12abc <__assert_fail@plt+0x16ec>
   176d4:	ldrb	sl, [sp, #845]	; 0x34d
   176d8:	ldr	r2, [sp, #808]	; 0x328
   176dc:	ldr	r3, [sp, #756]	; 0x2f4
   176e0:	mov	r0, r2
   176e4:	asr	r1, r2, #31
   176e8:	add	r5, pc, #896	; 0x380
   176ec:	ldrd	r4, [r5]
   176f0:	strd	r0, [sp, #56]	; 0x38
   176f4:	adds	r0, r2, r3
   176f8:	adc	r1, r1, r3, asr #31
   176fc:	add	r3, pc, #876	; 0x36c
   17700:	ldrd	r2, [r3]
   17704:	strd	r0, [sp, #48]	; 0x30
   17708:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   1770c:	adds	r0, r2, r4
   17710:	adc	r1, r3, r5
   17714:	mov	r2, r4
   17718:	mov	r3, r5
   1771c:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   17720:	ldrd	r0, [sp, #48]	; 0x30
   17724:	mov	r6, r2
   17728:	mov	r7, r3
   1772c:	mov	r2, r4
   17730:	subs	r4, r0, r6
   17734:	mov	r3, r5
   17738:	sbc	r5, r1, r7
   1773c:	mov	r0, r4
   17740:	mov	r1, r5
   17744:	strd	r6, [sp, #64]	; 0x40
   17748:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   1774c:	add	r3, sp, #784	; 0x310
   17750:	ldrd	r2, [r3]
   17754:	cmp	r2, #0
   17758:	strd	r2, [sp, #48]	; 0x30
   1775c:	sbcs	r3, r3, #0
   17760:	mov	r9, r0
   17764:	blt	17c94 <__assert_fail@plt+0x68c4>
   17768:	add	r3, pc, #776	; 0x308
   1776c:	ldrd	r2, [r3]
   17770:	ldrd	r0, [sp, #48]	; 0x30
   17774:	cmp	r2, r0
   17778:	sbcs	r3, r3, r1
   1777c:	blt	17c74 <__assert_fail@plt+0x68a4>
   17780:	ldrd	r4, [sp, #48]	; 0x30
   17784:	mov	r1, #3600	; 0xe10
   17788:	umull	r2, r3, r4, r1
   1778c:	mla	r3, r1, r5, r3
   17790:	cmp	r2, #0
   17794:	sbcs	r1, r3, #0
   17798:	blt	17d08 <__assert_fail@plt+0x6938>
   1779c:	ldr	r1, [sp, #40]	; 0x28
   177a0:	cmp	r1, #0
   177a4:	movlt	r4, r1
   177a8:	asrlt	r5, r4, #31
   177ac:	blt	177e0 <__assert_fail@plt+0x6410>
   177b0:	ldr	r4, [sp, #40]	; 0x28
   177b4:	mvn	r0, #0
   177b8:	subs	r0, r0, r2
   177bc:	mvn	r1, #-2147483648	; 0x80000000
   177c0:	sbc	r1, r1, r3
   177c4:	asr	r5, r4, #31
   177c8:	cmp	r0, r4
   177cc:	sbcs	r1, r1, r5
   177d0:	movlt	r1, #1
   177d4:	movge	r1, #0
   177d8:	cmp	r1, #0
   177dc:	bne	17c74 <__assert_fail@plt+0x68a4>
   177e0:	add	r1, sp, #792	; 0x318
   177e4:	adds	r4, r4, r2
   177e8:	ldrd	r6, [r1]
   177ec:	adc	r5, r5, r3
   177f0:	cmp	r6, #0
   177f4:	sbcs	r3, r7, #0
   177f8:	blt	17cd0 <__assert_fail@plt+0x6900>
   177fc:	add	r3, pc, #636	; 0x27c
   17800:	ldrd	r2, [r3]
   17804:	cmp	r2, r6
   17808:	sbcs	r3, r3, r7
   1780c:	blt	17c74 <__assert_fail@plt+0x68a4>
   17810:	mov	r1, #60	; 0x3c
   17814:	umull	r2, r3, r6, r1
   17818:	mla	r3, r1, r7, r3
   1781c:	cmp	r2, #0
   17820:	sbcs	r1, r3, #0
   17824:	blt	17d58 <__assert_fail@plt+0x6988>
   17828:	cmp	r4, #0
   1782c:	sbcs	r1, r5, #0
   17830:	blt	1785c <__assert_fail@plt+0x648c>
   17834:	mvn	r0, #0
   17838:	subs	r0, r0, r2
   1783c:	mvn	r1, #-2147483648	; 0x80000000
   17840:	sbc	r1, r1, r3
   17844:	cmp	r0, r4
   17848:	sbcs	r1, r1, r5
   1784c:	movlt	r1, #1
   17850:	movge	r1, #0
   17854:	cmp	r1, #0
   17858:	bne	17c74 <__assert_fail@plt+0x68a4>
   1785c:	add	r1, sp, #800	; 0x320
   17860:	adds	r4, r4, r2
   17864:	ldrd	r0, [r1]
   17868:	adc	r5, r5, r3
   1786c:	cmp	r0, #0
   17870:	sbcs	r3, r1, #0
   17874:	strd	r0, [sp, #40]	; 0x28
   17878:	blt	17d34 <__assert_fail@plt+0x6964>
   1787c:	cmp	r4, #0
   17880:	sbcs	r3, r5, #0
   17884:	blt	178b4 <__assert_fail@plt+0x64e4>
   17888:	ldrd	r0, [sp, #40]	; 0x28
   1788c:	mvn	r2, #0
   17890:	mvn	r3, #-2147483648	; 0x80000000
   17894:	subs	r0, r2, r0
   17898:	sbc	r1, r3, r1
   1789c:	cmp	r0, r4
   178a0:	sbcs	r3, r1, r5
   178a4:	movlt	r3, #1
   178a8:	movge	r3, #0
   178ac:	cmp	r3, #0
   178b0:	bne	17c74 <__assert_fail@plt+0x68a4>
   178b4:	ldrd	r2, [sp, #40]	; 0x28
   178b8:	adds	r2, r2, r4
   178bc:	adc	r3, r3, r5
   178c0:	cmp	r9, #0
   178c4:	mov	r4, r2
   178c8:	mov	r5, r3
   178cc:	blt	17c40 <__assert_fail@plt+0x6870>
   178d0:	cmp	r2, #0
   178d4:	sbcs	r3, r5, #0
   178d8:	blt	17c18 <__assert_fail@plt+0x6848>
   178dc:	rsb	r2, r9, #2130706432	; 0x7f000000
   178e0:	add	r2, r2, #16711680	; 0xff0000
   178e4:	add	r2, r2, #65280	; 0xff00
   178e8:	add	r2, r2, #255	; 0xff
   178ec:	cmp	r2, r4
   178f0:	asr	r3, r2, #31
   178f4:	sbcs	r3, r3, r5
   178f8:	movlt	r3, #1
   178fc:	movge	r3, #0
   17900:	cmp	r3, #0
   17904:	bne	17c74 <__assert_fail@plt+0x68a4>
   17908:	ldr	r3, [sp, #36]	; 0x24
   1790c:	ldr	r2, [sp, #64]	; 0x40
   17910:	add	r4, r4, r9
   17914:	cmp	sl, #0
   17918:	str	r4, [r3]
   1791c:	str	r2, [r3, #4]
   17920:	beq	169d4 <__assert_fail@plt+0x5604>
   17924:	ldrd	r2, [sp, #48]	; 0x30
   17928:	ldrd	r0, [sp, #40]	; 0x28
   1792c:	orr	r2, r2, r6
   17930:	orr	r3, r3, r7
   17934:	orr	r0, r0, r2
   17938:	orr	r1, r1, r3
   1793c:	mov	r2, r0
   17940:	mov	r3, r1
   17944:	ldrd	r0, [sp, #56]	; 0x38
   17948:	orr	r0, r0, r2
   1794c:	orr	r1, r1, r3
   17950:	mov	r2, r0
   17954:	mov	r3, r1
   17958:	orrs	r3, r2, r3
   1795c:	beq	166e0 <__assert_fail@plt+0x5310>
   17960:	mov	r2, #5
   17964:	ldr	r1, [pc, #284]	; 17a88 <__assert_fail@plt+0x66b8>
   17968:	mov	r0, #0
   1796c:	bl	11130 <dcgettext@plt>
   17970:	add	r1, sp, #800	; 0x320
   17974:	add	r3, sp, #784	; 0x310
   17978:	ldrd	r6, [r1]
   1797c:	add	r1, sp, #792	; 0x318
   17980:	ldrd	r2, [r3]
   17984:	ldrd	r8, [r1]
   17988:	ldr	r1, [sp, #808]	; 0x328
   1798c:	strd	r6, [sp, #8]
   17990:	str	r1, [sp, #16]
   17994:	strd	r8, [sp]
   17998:	bl	12abc <__assert_fail@plt+0x16ec>
   1799c:	mov	r2, #5
   179a0:	ldr	r1, [pc, #228]	; 17a8c <__assert_fail@plt+0x66bc>
   179a4:	mov	r0, #0
   179a8:	bl	11130 <dcgettext@plt>
   179ac:	asr	r3, r4, #31
   179b0:	mov	r2, r4
   179b4:	bl	12abc <__assert_fail@plt+0x16ec>
   179b8:	ldr	r3, [sp, #160]	; 0xa0
   179bc:	cmn	r3, #1
   179c0:	beq	17a00 <__assert_fail@plt+0x6630>
   179c4:	add	r2, sp, #260	; 0x104
   179c8:	ldr	r1, [sp, #36]	; 0x24
   179cc:	mov	r0, fp
   179d0:	bl	1aa14 <__assert_fail@plt+0x9644>
   179d4:	cmp	r0, #0
   179d8:	beq	17a00 <__assert_fail@plt+0x6630>
   179dc:	ldr	r2, [sp, #160]	; 0xa0
   179e0:	ldr	r3, [sp, #292]	; 0x124
   179e4:	cmp	r2, r3
   179e8:	beq	17a00 <__assert_fail@plt+0x6630>
   179ec:	mov	r2, #5
   179f0:	ldr	r1, [pc, #152]	; 17a90 <__assert_fail@plt+0x66c0>
   179f4:	mov	r0, #0
   179f8:	bl	11130 <dcgettext@plt>
   179fc:	bl	12abc <__assert_fail@plt+0x16ec>
   17a00:	ldrb	sl, [sp, #845]	; 0x34d
   17a04:	b	166e0 <__assert_fail@plt+0x5310>
   17a08:	mov	r3, #0
   17a0c:	cmp	ip, #0
   17a10:	str	r3, [sp, #128]	; 0x80
   17a14:	str	r3, [sp, #132]	; 0x84
   17a18:	str	r3, [sp, #136]	; 0x88
   17a1c:	str	r3, [sp, #756]	; 0x2f4
   17a20:	moveq	lr, r9
   17a24:	moveq	r3, r9
   17a28:	moveq	r1, r9
   17a2c:	bne	17bb8 <__assert_fail@plt+0x67e8>
   17a30:	ldr	ip, [sp, #820]	; 0x334
   17a34:	ldr	r5, [sp, #824]	; 0x338
   17a38:	orr	ip, ip, r5
   17a3c:	orrs	r0, ip, r0
   17a40:	beq	16dc8 <__assert_fail@plt+0x59f8>
   17a44:	b	16dc0 <__assert_fail@plt+0x59f0>
   17a48:	mov	r0, #-2147483648	; 0x80000000
   17a4c:	subs	r0, r0, r4
   17a50:	mvn	r1, #0
   17a54:	sbc	r1, r1, r5
   17a58:	cmp	r0, #1
   17a5c:	sbcs	r3, r1, #0
   17a60:	movge	r3, #1
   17a64:	movlt	r3, #0
   17a68:	str	r3, [sp, #48]	; 0x30
   17a6c:	b	16bf0 <__assert_fail@plt+0x5820>
   17a70:	blcc	fe6ca278 <optarg@@GLIBC_2.4+0xfe6990d0>
   17a74:	andeq	r0, r0, r0
   17a78:	mcrrcc	14, 6, r5, sp, cr15
   17a7c:	andeq	r1, r9, fp, lsr #20
   17a80:	eorcs	r2, r2, #536870914	; 0x20000002
   17a84:	eoreq	r2, r2, #536870914	; 0x20000002
   17a88:	andeq	pc, r1, r8, lsr #25
   17a8c:	strdeq	pc, [r1], -r4
   17a90:	andeq	pc, r1, r8, lsl sp	; <UNPREDICTABLE>
   17a94:	andeq	pc, r1, r8, asr #13
   17a98:	strdeq	pc, [r1], -r8
   17a9c:	andeq	pc, r1, r4, lsr #14
   17aa0:	andeq	pc, r1, r4, lsr r7	; <UNPREDICTABLE>
   17aa4:	andeq	pc, r1, ip, asr r4	; <UNPREDICTABLE>
   17aa8:	strdeq	pc, [r1], -ip
   17aac:	andeq	pc, r1, ip, ror #27
   17ab0:	andeq	pc, r1, r8, ror ip	; <UNPREDICTABLE>
   17ab4:	andeq	pc, r1, r8, ror #14
   17ab8:	andeq	pc, r1, r8, lsr #19
   17abc:	andeq	pc, r1, r0, lsl #20
   17ac0:	andeq	r0, r2, r8, lsr #4
   17ac4:	andeq	pc, r1, r8, lsr #16
   17ac8:	andeq	pc, r1, r0, asr #16
   17acc:	andeq	pc, r1, r4, ror r8	; <UNPREDICTABLE>
   17ad0:	muleq	r1, ip, r8
   17ad4:	andeq	pc, r1, r0, asr #17
   17ad8:	ldrdeq	pc, [r1], -r4
   17adc:	andeq	pc, r1, r8, ror #17
   17ae0:	andeq	pc, r1, r0, lsr ip	; <UNPREDICTABLE>
   17ae4:	andeq	pc, r1, r0, lsl fp	; <UNPREDICTABLE>
   17ae8:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   17aec:	andeq	pc, r1, ip, ror #22
   17af0:	andeq	pc, r1, ip, lsr #23
   17af4:	andeq	pc, r1, r8, ror #23
   17af8:	andeq	pc, r1, ip, lsl #24
   17afc:	ldrdeq	pc, [r1], -r0
   17b00:	andeq	pc, r1, r4, ror #18
   17b04:	muleq	r1, r0, r9
   17b08:	cmp	r7, #0
   17b0c:	cmpeq	r6, #23
   17b10:	bhi	17bf4 <__assert_fail@plt+0x6824>
   17b14:	mov	r3, r6
   17b18:	ldr	lr, [sp, #744]	; 0x2e8
   17b1c:	ldr	r1, [sp, #752]	; 0x2f0
   17b20:	cmp	ip, #0
   17b24:	str	r3, [sp, #136]	; 0x88
   17b28:	str	lr, [sp, #132]	; 0x84
   17b2c:	str	r1, [sp, #128]	; 0x80
   17b30:	beq	17a30 <__assert_fail@plt+0x6660>
   17b34:	cmp	r0, #0
   17b38:	mov	r2, #5
   17b3c:	ldrne	r1, [pc, #-176]	; 17a94 <__assert_fail@plt+0x66c4>
   17b40:	ldreq	r1, [pc, #-176]	; 17a98 <__assert_fail@plt+0x66c8>
   17b44:	movne	r0, #0
   17b48:	bl	11130 <dcgettext@plt>
   17b4c:	ldr	r1, [sp, #136]	; 0x88
   17b50:	ldr	ip, [sp, #128]	; 0x80
   17b54:	ldr	r2, [pc, #-192]	; 17a9c <__assert_fail@plt+0x66cc>
   17b58:	add	r4, sp, #364	; 0x16c
   17b5c:	mov	r3, #100	; 0x64
   17b60:	str	r1, [sp, #4]
   17b64:	str	r2, [sp]
   17b68:	mov	r1, r3
   17b6c:	str	ip, [sp, #12]
   17b70:	mov	r2, #1
   17b74:	mov	r5, r0
   17b78:	ldr	r0, [sp, #132]	; 0x84
   17b7c:	str	r0, [sp, #8]
   17b80:	mov	r0, r4
   17b84:	bl	113c4 <__snprintf_chk@plt>
   17b88:	mov	r1, r4
   17b8c:	mov	r0, r5
   17b90:	bl	12abc <__assert_fail@plt+0x16ec>
   17b94:	ldr	r0, [sp, #836]	; 0x344
   17b98:	ldr	r1, [sp, #128]	; 0x80
   17b9c:	ldr	lr, [sp, #132]	; 0x84
   17ba0:	ldr	r3, [sp, #136]	; 0x88
   17ba4:	ldr	sl, [sp, #140]	; 0x8c
   17ba8:	ldr	r2, [sp, #144]	; 0x90
   17bac:	b	17a30 <__assert_fail@plt+0x6660>
   17bb0:	mov	r3, #12
   17bb4:	b	17b18 <__assert_fail@plt+0x6748>
   17bb8:	ldr	r0, [pc, #-288]	; 17aa0 <__assert_fail@plt+0x66d0>
   17bbc:	bl	12abc <__assert_fail@plt+0x16ec>
   17bc0:	b	17b94 <__assert_fail@plt+0x67c4>
   17bc4:	subs	r4, r6, #1
   17bc8:	sbc	r5, r7, #0
   17bcc:	cmp	r5, #0
   17bd0:	cmpeq	r4, #10
   17bd4:	bls	17b14 <__assert_fail@plt+0x6744>
   17bd8:	cmp	r7, #0
   17bdc:	cmpeq	r6, #12
   17be0:	mvnne	r3, #0
   17be4:	strne	r3, [sp, #136]	; 0x88
   17be8:	beq	17b18 <__assert_fail@plt+0x6748>
   17bec:	ldr	r4, [pc, #-336]	; 17aa4 <__assert_fail@plt+0x66d4>
   17bf0:	b	16c60 <__assert_fail@plt+0x5890>
   17bf4:	mvn	r2, #0
   17bf8:	cmp	r3, #0
   17bfc:	str	r2, [sp, #136]	; 0x88
   17c00:	beq	17bec <__assert_fail@plt+0x681c>
   17c04:	ldr	r2, [pc, #-356]	; 17aa8 <__assert_fail@plt+0x66d8>
   17c08:	cmp	r3, #1
   17c0c:	ldr	r4, [pc, #-360]	; 17aac <__assert_fail@plt+0x66dc>
   17c10:	moveq	r4, r2
   17c14:	b	16c60 <__assert_fail@plt+0x5890>
   17c18:	mov	r2, #-2147483648	; 0x80000000
   17c1c:	subs	r2, r2, r4
   17c20:	mvn	r3, #0
   17c24:	sbc	r3, r3, r5
   17c28:	asr	r1, r9, #31
   17c2c:	cmp	r9, r2
   17c30:	sbcs	r3, r1, r3
   17c34:	movlt	r3, #1
   17c38:	movge	r3, #0
   17c3c:	b	17900 <__assert_fail@plt+0x6530>
   17c40:	rsb	r2, r9, #-2147483648	; 0x80000000
   17c44:	cmp	r4, r2
   17c48:	asr	r3, r2, #31
   17c4c:	sbcs	r3, r5, r3
   17c50:	blt	17c74 <__assert_fail@plt+0x68a4>
   17c54:	cmp	r4, #0
   17c58:	sbcs	r3, r5, #0
   17c5c:	blt	17908 <__assert_fail@plt+0x6538>
   17c60:	adds	r2, r4, r9
   17c64:	adc	r3, r5, r9, asr #31
   17c68:	cmp	r2, #-2147483648	; 0x80000000
   17c6c:	sbcs	r3, r3, #0
   17c70:	blt	17908 <__assert_fail@plt+0x6538>
   17c74:	cmp	sl, #0
   17c78:	beq	165c4 <__assert_fail@plt+0x51f4>
   17c7c:	mov	r2, #5
   17c80:	ldr	r1, [pc, #-472]	; 17ab0 <__assert_fail@plt+0x66e0>
   17c84:	mov	r0, #0
   17c88:	bl	11130 <dcgettext@plt>
   17c8c:	bl	12abc <__assert_fail@plt+0x16ec>
   17c90:	b	165c4 <__assert_fail@plt+0x51f4>
   17c94:	ldrd	r0, [sp, #48]	; 0x30
   17c98:	mvn	r3, #0
   17c9c:	mvn	r2, #0
   17ca0:	cmp	r1, r3
   17ca4:	cmpeq	r0, r2
   17ca8:	beq	17780 <__assert_fail@plt+0x63b0>
   17cac:	mov	r3, r1
   17cb0:	mov	r2, r0
   17cb4:	mov	r1, #-2147483648	; 0x80000000
   17cb8:	mov	r0, #0
   17cbc:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   17cc0:	cmp	r0, #3600	; 0xe10
   17cc4:	sbcs	r3, r1, #0
   17cc8:	blt	17c74 <__assert_fail@plt+0x68a4>
   17ccc:	b	17780 <__assert_fail@plt+0x63b0>
   17cd0:	mvn	r3, #0
   17cd4:	mvn	r2, #0
   17cd8:	cmp	r7, r3
   17cdc:	cmpeq	r6, r2
   17ce0:	beq	17810 <__assert_fail@plt+0x6440>
   17ce4:	mov	r3, r7
   17ce8:	mov	r2, r6
   17cec:	mov	r0, #0
   17cf0:	mov	r1, #-2147483648	; 0x80000000
   17cf4:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   17cf8:	cmp	r0, #60	; 0x3c
   17cfc:	sbcs	r3, r1, #0
   17d00:	blt	17c74 <__assert_fail@plt+0x68a4>
   17d04:	b	17810 <__assert_fail@plt+0x6440>
   17d08:	ldr	r4, [sp, #40]	; 0x28
   17d0c:	mov	r0, #0
   17d10:	subs	r0, r0, r2
   17d14:	mov	r1, #-2147483648	; 0x80000000
   17d18:	sbc	r1, r1, r3
   17d1c:	asr	r5, r4, #31
   17d20:	cmp	r4, r0
   17d24:	sbcs	r1, r5, r1
   17d28:	movlt	r1, #1
   17d2c:	movge	r1, #0
   17d30:	b	177d8 <__assert_fail@plt+0x6408>
   17d34:	mov	r2, #0
   17d38:	mov	r3, #-2147483648	; 0x80000000
   17d3c:	subs	r0, r2, r0
   17d40:	sbc	r1, r3, r1
   17d44:	cmp	r4, r0
   17d48:	sbcs	r3, r5, r1
   17d4c:	movlt	r3, #1
   17d50:	movge	r3, #0
   17d54:	b	178ac <__assert_fail@plt+0x64dc>
   17d58:	mov	r0, #0
   17d5c:	subs	r0, r0, r2
   17d60:	mov	r1, #-2147483648	; 0x80000000
   17d64:	sbc	r1, r1, r3
   17d68:	cmp	r4, r0
   17d6c:	sbcs	r1, r5, r1
   17d70:	movlt	r1, #1
   17d74:	movge	r1, #0
   17d78:	b	17854 <__assert_fail@plt+0x6484>
   17d7c:	mov	r2, #-2147483648	; 0x80000000
   17d80:	subs	r2, r2, r0
   17d84:	mvn	r3, #0
   17d88:	sbc	r3, r3, r1
   17d8c:	asr	r5, ip, #31
   17d90:	cmp	ip, r2
   17d94:	sbcs	r3, r5, r3
   17d98:	movlt	r3, #1
   17d9c:	movge	r3, #0
   17da0:	b	17244 <__assert_fail@plt+0x5e74>
   17da4:	rsb	r2, ip, #-2147483648	; 0x80000000
   17da8:	cmp	r0, r2
   17dac:	asr	r3, r2, #31
   17db0:	sbcs	r3, r1, r3
   17db4:	blt	1724c <__assert_fail@plt+0x5e7c>
   17db8:	cmp	r0, #0
   17dbc:	sbcs	r3, r1, #0
   17dc0:	blt	17dd8 <__assert_fail@plt+0x6a08>
   17dc4:	adds	r2, r0, ip
   17dc8:	adc	r3, r1, ip, asr #31
   17dcc:	cmp	r2, #-2147483648	; 0x80000000
   17dd0:	sbcs	r3, r3, #0
   17dd4:	bge	1724c <__assert_fail@plt+0x5e7c>
   17dd8:	add	ip, ip, r0
   17ddc:	mvn	r3, #0
   17de0:	add	r1, sp, #128	; 0x80
   17de4:	mov	r0, fp
   17de8:	str	ip, [sp, #140]	; 0x8c
   17dec:	str	r3, [sp, #160]	; 0xa0
   17df0:	bl	1aa98 <__assert_fail@plt+0x96c8>
   17df4:	cmn	r0, #1
   17df8:	str	r0, [sp, #40]	; 0x28
   17dfc:	beq	17254 <__assert_fail@plt+0x5e84>
   17e00:	ldrb	sl, [sp, #845]	; 0x34d
   17e04:	cmp	sl, #0
   17e08:	bne	173a4 <__assert_fail@plt+0x5fd4>
   17e0c:	add	r3, sp, #760	; 0x2f8
   17e10:	add	r1, sp, #768	; 0x300
   17e14:	add	ip, sp, #776	; 0x308
   17e18:	ldrd	r2, [r3]
   17e1c:	ldrd	r0, [r1]
   17e20:	ldrd	r4, [ip]
   17e24:	orr	r0, r0, r2
   17e28:	orr	r1, r1, r3
   17e2c:	orr	r0, r0, r4
   17e30:	orr	r1, r1, r5
   17e34:	orrs	r1, r0, r1
   17e38:	bne	174ac <__assert_fail@plt+0x60dc>
   17e3c:	ldr	r3, [sp, #840]	; 0x348
   17e40:	cmp	r3, #0
   17e44:	beq	17694 <__assert_fail@plt+0x62c4>
   17e48:	b	1762c <__assert_fail@plt+0x625c>
   17e4c:	ldr	r2, [sp, #152]	; 0x98
   17e50:	ldr	ip, [sp, #680]	; 0x2a8
   17e54:	mov	r3, r2
   17e58:	mov	r0, #0
   17e5c:	mov	r1, #0
   17e60:	mov	r2, ip
   17e64:	b	1716c <__assert_fail@plt+0x5d9c>
   17e68:	ldrb	r3, [sp, #845]	; 0x34d
   17e6c:	cmp	r3, #0
   17e70:	beq	165c4 <__assert_fail@plt+0x51f4>
   17e74:	mov	r2, #5
   17e78:	ldr	r1, [pc, #-972]	; 17ab4 <__assert_fail@plt+0x66e4>
   17e7c:	bl	11130 <dcgettext@plt>
   17e80:	mov	r1, r6
   17e84:	bl	12abc <__assert_fail@plt+0x16ec>
   17e88:	b	165c4 <__assert_fail@plt+0x51f4>
   17e8c:	smull	lr, r2, r2, r3
   17e90:	add	r2, r2, r3
   17e94:	asr	lr, r3, #31
   17e98:	rsb	r2, lr, r2, asr #2
   17e9c:	mov	r4, #0
   17ea0:	rsb	r2, r2, r2, lsl #3
   17ea4:	sub	r3, r3, r2
   17ea8:	subs	r4, r4, r0
   17eac:	mov	r2, r3
   17eb0:	mov	r5, #-2147483648	; 0x80000000
   17eb4:	sbc	r5, r5, r1
   17eb8:	asr	r3, r3, #31
   17ebc:	cmp	r2, r4
   17ec0:	sbcs	r3, r3, r5
   17ec4:	movlt	r3, #1
   17ec8:	movge	r3, #0
   17ecc:	b	171e0 <__assert_fail@plt+0x5e10>
   17ed0:	mov	ip, r2
   17ed4:	b	17e54 <__assert_fail@plt+0x6a84>
   17ed8:	add	r4, sp, #364	; 0x16c
   17edc:	mov	r2, #5
   17ee0:	ldr	r1, [pc, #-1072]	; 17ab8 <__assert_fail@plt+0x66e8>
   17ee4:	mov	r0, #0
   17ee8:	bl	11130 <dcgettext@plt>
   17eec:	add	r1, sp, #564	; 0x234
   17ef0:	mov	r5, r0
   17ef4:	add	r0, sp, #664	; 0x298
   17ef8:	bl	1388c <__assert_fail@plt+0x24bc>
   17efc:	mov	r1, r0
   17f00:	mov	r0, r5
   17f04:	bl	12abc <__assert_fail@plt+0x16ec>
   17f08:	b	17410 <__assert_fail@plt+0x6040>
   17f0c:	ldr	r3, [sp, #140]	; 0x8c
   17f10:	cmp	r3, #15
   17f14:	beq	17f34 <__assert_fail@plt+0x6b64>
   17f18:	mov	r2, #5
   17f1c:	ldr	r1, [pc, #-1128]	; 17abc <__assert_fail@plt+0x66ec>
   17f20:	mov	r0, #0
   17f24:	bl	11130 <dcgettext@plt>
   17f28:	bl	12abc <__assert_fail@plt+0x16ec>
   17f2c:	add	r3, sp, #776	; 0x308
   17f30:	ldrd	r4, [r3]
   17f34:	orrs	r3, r4, r5
   17f38:	bne	17484 <__assert_fail@plt+0x60b4>
   17f3c:	b	174a4 <__assert_fail@plt+0x60d4>
   17f40:	add	r2, sp, #896	; 0x380
   17f44:	add	r3, r2, r3
   17f48:	mov	r2, #0
   17f4c:	strb	r2, [r3, #-332]	; 0xfffffeb4
   17f50:	add	r1, sp, #564	; 0x234
   17f54:	ldr	r0, [pc, #-1180]	; 17ac0 <__assert_fail@plt+0x66f0>
   17f58:	bl	12abc <__assert_fail@plt+0x16ec>
   17f5c:	mov	r2, #5
   17f60:	ldr	r1, [pc, #-1188]	; 17ac4 <__assert_fail@plt+0x66f4>
   17f64:	mov	r0, #0
   17f68:	bl	11130 <dcgettext@plt>
   17f6c:	bl	12abc <__assert_fail@plt+0x16ec>
   17f70:	cmp	r9, #0
   17f74:	beq	17f8c <__assert_fail@plt+0x6bbc>
   17f78:	mov	r2, #5
   17f7c:	ldr	r1, [pc, #-1212]	; 17ac8 <__assert_fail@plt+0x66f8>
   17f80:	mov	r0, #0
   17f84:	bl	11130 <dcgettext@plt>
   17f88:	bl	12abc <__assert_fail@plt+0x16ec>
   17f8c:	ldr	r3, [sp, #36]	; 0x24
   17f90:	cmp	r5, r7
   17f94:	cmpne	r3, sl
   17f98:	beq	17fb0 <__assert_fail@plt+0x6be0>
   17f9c:	mov	r2, #5
   17fa0:	ldr	r1, [pc, #-1244]	; 17acc <__assert_fail@plt+0x66fc>
   17fa4:	mov	r0, #0
   17fa8:	bl	11130 <dcgettext@plt>
   17fac:	bl	12abc <__assert_fail@plt+0x16ec>
   17fb0:	mov	r2, #5
   17fb4:	ldr	r1, [pc, #-1260]	; 17ad0 <__assert_fail@plt+0x6700>
   17fb8:	mov	r0, #0
   17fbc:	bl	11130 <dcgettext@plt>
   17fc0:	bl	12abc <__assert_fail@plt+0x16ec>
   17fc4:	cmp	r4, #0
   17fc8:	movne	r2, #5
   17fcc:	ldrne	r1, [pc, #-1280]	; 17ad4 <__assert_fail@plt+0x6704>
   17fd0:	ldreq	r1, [pc, #-1280]	; 17ad8 <__assert_fail@plt+0x6708>
   17fd4:	movne	r0, #0
   17fd8:	moveq	r0, r4
   17fdc:	moveq	r2, #5
   17fe0:	bl	11130 <dcgettext@plt>
   17fe4:	mov	r1, r0
   17fe8:	ldr	r0, [pc, #-1300]	; 17adc <__assert_fail@plt+0x670c>
   17fec:	bl	12abc <__assert_fail@plt+0x16ec>
   17ff0:	b	165c4 <__assert_fail@plt+0x51f4>
   17ff4:	orrs	r3, r4, r5
   17ff8:	moveq	r2, r4
   17ffc:	moveq	r3, r5
   18000:	beq	1712c <__assert_fail@plt+0x5d5c>
   18004:	mvn	r3, #0
   18008:	mvn	r2, #0
   1800c:	cmp	r5, r3
   18010:	cmpeq	r4, r2
   18014:	beq	17148 <__assert_fail@plt+0x5d78>
   18018:	mov	r3, r5
   1801c:	mov	r2, r4
   18020:	mov	r0, #0
   18024:	mov	r1, #-2147483648	; 0x80000000
   18028:	bl	1d9b4 <__assert_fail@plt+0xc5e4>
   1802c:	cmp	r0, #7
   18030:	sbcs	r3, r1, #0
   18034:	blt	17254 <__assert_fail@plt+0x5e84>
   18038:	b	17148 <__assert_fail@plt+0x5d78>
   1803c:	cmp	sl, #0
   18040:	beq	165c4 <__assert_fail@plt+0x51f4>
   18044:	mov	r2, #5
   18048:	ldr	r1, [pc, #-1392]	; 17ae0 <__assert_fail@plt+0x6710>
   1804c:	mov	r0, #0
   18050:	bl	11130 <dcgettext@plt>
   18054:	ldr	r1, [sp, #688]	; 0x2b0
   18058:	bl	12abc <__assert_fail@plt+0x16ec>
   1805c:	b	165c4 <__assert_fail@plt+0x51f4>
   18060:	ldr	r1, [sp, #40]	; 0x28
   18064:	cmp	r1, #0
   18068:	blt	180ac <__assert_fail@plt+0x6cdc>
   1806c:	ldr	r0, [sp, #40]	; 0x28
   18070:	subs	r4, r2, #-2147483647	; 0x80000001
   18074:	adc	r5, r3, #0
   18078:	asr	r1, r0, #31
   1807c:	cmp	r4, r0
   18080:	sbcs	r1, r5, r1
   18084:	movlt	r1, #1
   18088:	movge	r1, #0
   1808c:	b	17680 <__assert_fail@plt+0x62b0>
   18090:	subs	r0, r0, r2
   18094:	sbc	r1, r1, r3
   18098:	cmp	r0, #-2147483648	; 0x80000000
   1809c:	sbcs	r1, r1, #0
   180a0:	movge	r1, #1
   180a4:	movlt	r1, #0
   180a8:	b	17680 <__assert_fail@plt+0x62b0>
   180ac:	add	r0, r1, #-2147483648	; 0x80000000
   180b0:	cmp	r0, r2
   180b4:	asr	r1, r0, #31
   180b8:	sbcs	r1, r1, r3
   180bc:	movlt	r1, #1
   180c0:	movge	r1, #0
   180c4:	b	17680 <__assert_fail@plt+0x62b0>
   180c8:	mov	r0, #-2147483648	; 0x80000000
   180cc:	subs	r0, r0, r2
   180d0:	mvn	r1, #0
   180d4:	sbc	r1, r1, r3
   180d8:	asr	r5, ip, #31
   180dc:	cmp	ip, r0
   180e0:	sbcs	r1, r5, r1
   180e4:	movlt	r1, #1
   180e8:	movge	r1, #0
   180ec:	b	174f4 <__assert_fail@plt+0x6124>
   180f0:	ldr	r3, [sp, #180]	; 0xb4
   180f4:	ldr	r1, [sp, #176]	; 0xb0
   180f8:	ldr	r2, [sp, #172]	; 0xac
   180fc:	str	r3, [sp, #136]	; 0x88
   18100:	ldr	r3, [sp, #204]	; 0xcc
   18104:	str	r1, [sp, #132]	; 0x84
   18108:	add	r4, r4, r6
   1810c:	add	r1, sp, #128	; 0x80
   18110:	mov	r0, fp
   18114:	str	r4, [sp, #140]	; 0x8c
   18118:	str	sl, [sp, #148]	; 0x94
   1811c:	str	r9, [sp, #144]	; 0x90
   18120:	str	r2, [sp, #128]	; 0x80
   18124:	str	r3, [sp, #160]	; 0xa0
   18128:	bl	1aa98 <__assert_fail@plt+0x96c8>
   1812c:	cmn	r0, #1
   18130:	str	r0, [sp, #40]	; 0x28
   18134:	beq	18294 <__assert_fail@plt+0x6ec4>
   18138:	ldrb	r3, [sp, #845]	; 0x34d
   1813c:	cmp	r3, #0
   18140:	beq	1761c <__assert_fail@plt+0x624c>
   18144:	mov	r2, #5
   18148:	ldr	r1, [pc, #-1644]	; 17ae4 <__assert_fail@plt+0x6714>
   1814c:	mov	r0, r5
   18150:	bl	11130 <dcgettext@plt>
   18154:	add	r1, sp, #776	; 0x308
   18158:	add	r3, sp, #760	; 0x2f8
   1815c:	ldrd	r6, [r1]
   18160:	add	r1, sp, #768	; 0x300
   18164:	ldrd	r2, [r3]
   18168:	strd	r6, [sp, #8]
   1816c:	ldrd	r6, [r1]
   18170:	strd	r6, [sp]
   18174:	bl	12abc <__assert_fail@plt+0x16ec>
   18178:	mov	r2, #5
   1817c:	ldr	r1, [pc, #-1692]	; 17ae8 <__assert_fail@plt+0x6718>
   18180:	mov	r0, r5
   18184:	bl	11130 <dcgettext@plt>
   18188:	add	r2, sp, #364	; 0x16c
   1818c:	add	r1, sp, #664	; 0x298
   18190:	mov	r7, r0
   18194:	add	r0, sp, #128	; 0x80
   18198:	bl	137e4 <__assert_fail@plt+0x2414>
   1819c:	mov	r1, r0
   181a0:	mov	r0, r7
   181a4:	bl	12abc <__assert_fail@plt+0x16ec>
   181a8:	ldr	r3, [sp, #204]	; 0xcc
   181ac:	cmn	r3, #1
   181b0:	beq	181d4 <__assert_fail@plt+0x6e04>
   181b4:	ldr	r2, [sp, #160]	; 0xa0
   181b8:	cmp	r3, r2
   181bc:	beq	181d4 <__assert_fail@plt+0x6e04>
   181c0:	mov	r2, #5
   181c4:	ldr	r1, [pc, #-1760]	; 17aec <__assert_fail@plt+0x671c>
   181c8:	mov	r0, r5
   181cc:	bl	11130 <dcgettext@plt>
   181d0:	bl	12abc <__assert_fail@plt+0x16ec>
   181d4:	add	r3, sp, #776	; 0x308
   181d8:	ldrd	r2, [r3]
   181dc:	orrs	r3, r2, r3
   181e0:	bne	1828c <__assert_fail@plt+0x6ebc>
   181e4:	ldr	r3, [sp, #140]	; 0x8c
   181e8:	cmp	r4, r3
   181ec:	bne	1820c <__assert_fail@plt+0x6e3c>
   181f0:	add	r3, sp, #768	; 0x300
   181f4:	ldrd	r2, [r3]
   181f8:	orrs	r3, r2, r3
   181fc:	bne	1828c <__assert_fail@plt+0x6ebc>
   18200:	ldr	r3, [sp, #144]	; 0x90
   18204:	cmp	r9, r3
   18208:	beq	1828c <__assert_fail@plt+0x6ebc>
   1820c:	mov	r2, #5
   18210:	ldr	r1, [pc, #-1832]	; 17af0 <__assert_fail@plt+0x6720>
   18214:	mov	r0, #0
   18218:	bl	11130 <dcgettext@plt>
   1821c:	bl	12abc <__assert_fail@plt+0x16ec>
   18220:	mov	r2, #5
   18224:	ldr	r1, [pc, #-1848]	; 17af4 <__assert_fail@plt+0x6724>
   18228:	mov	r0, #0
   1822c:	bl	11130 <dcgettext@plt>
   18230:	add	r1, sp, #260	; 0x104
   18234:	mov	r5, r0
   18238:	mov	r0, sl
   1823c:	bl	113e0 <__assert_fail@plt+0x10>
   18240:	mov	r3, r4
   18244:	add	r2, r9, #1
   18248:	mov	r1, r0
   1824c:	mov	r0, r5
   18250:	bl	12abc <__assert_fail@plt+0x16ec>
   18254:	mov	r2, #5
   18258:	ldr	r1, [pc, #-1896]	; 17af8 <__assert_fail@plt+0x6728>
   1825c:	mov	r0, #0
   18260:	bl	11130 <dcgettext@plt>
   18264:	add	r1, sp, #260	; 0x104
   18268:	mov	r4, r0
   1826c:	ldr	r0, [sp, #148]	; 0x94
   18270:	bl	113e0 <__assert_fail@plt+0x10>
   18274:	ldr	r2, [sp, #144]	; 0x90
   18278:	ldr	r3, [sp, #140]	; 0x8c
   1827c:	add	r2, r2, #1
   18280:	mov	r1, r0
   18284:	mov	r0, r4
   18288:	bl	12abc <__assert_fail@plt+0x16ec>
   1828c:	ldrb	sl, [sp, #845]	; 0x34d
   18290:	b	17e3c <__assert_fail@plt+0x6a6c>
   18294:	ldrb	r3, [sp, #845]	; 0x34d
   18298:	cmp	r3, #0
   1829c:	beq	165c4 <__assert_fail@plt+0x51f4>
   182a0:	mov	r0, r5
   182a4:	mov	r2, #5
   182a8:	ldr	r1, [pc, #-1972]	; 17afc <__assert_fail@plt+0x672c>
   182ac:	bl	11130 <dcgettext@plt>
   182b0:	add	r1, sp, #664	; 0x298
   182b4:	add	r2, sp, #364	; 0x16c
   182b8:	mov	r4, r0
   182bc:	add	r0, sp, #128	; 0x80
   182c0:	bl	137e4 <__assert_fail@plt+0x2414>
   182c4:	mov	r1, r0
   182c8:	mov	r0, r4
   182cc:	bl	12abc <__assert_fail@plt+0x16ec>
   182d0:	b	165c4 <__assert_fail@plt+0x51f4>
   182d4:	adds	r0, r2, ip
   182d8:	adc	r1, r3, ip, asr #31
   182dc:	cmp	r0, #-2147483648	; 0x80000000
   182e0:	sbcs	r1, r1, #0
   182e4:	movge	r1, #1
   182e8:	movlt	r1, #0
   182ec:	b	174f4 <__assert_fail@plt+0x6124>
   182f0:	ldr	r0, [sp, #824]	; 0x338
   182f4:	cmp	r0, #0
   182f8:	bne	1740c <__assert_fail@plt+0x603c>
   182fc:	mov	r2, #5
   18300:	ldr	r1, [pc, #-2056]	; 17b00 <__assert_fail@plt+0x6730>
   18304:	bl	11130 <dcgettext@plt>
   18308:	add	r1, sp, #260	; 0x104
   1830c:	add	r4, sp, #364	; 0x16c
   18310:	mov	r5, r0
   18314:	ldr	r0, [sp, #148]	; 0x94
   18318:	bl	113e0 <__assert_fail@plt+0x10>
   1831c:	ldr	r2, [sp, #144]	; 0x90
   18320:	ldr	ip, [sp, #140]	; 0x8c
   18324:	ldr	r1, [pc, #-2088]	; 17b04 <__assert_fail@plt+0x6734>
   18328:	mov	r3, #100	; 0x64
   1832c:	add	r2, r2, #1
   18330:	str	r2, [sp, #8]
   18334:	str	ip, [sp, #12]
   18338:	str	r1, [sp]
   1833c:	mov	r2, #1
   18340:	mov	r1, r3
   18344:	str	r0, [sp, #4]
   18348:	mov	r0, r4
   1834c:	bl	113c4 <__snprintf_chk@plt>
   18350:	mov	r1, r4
   18354:	mov	r0, r5
   18358:	bl	12abc <__assert_fail@plt+0x16ec>
   1835c:	ldr	r3, [sp, #824]	; 0x338
   18360:	cmp	r3, #0
   18364:	beq	17410 <__assert_fail@plt+0x6040>
   18368:	ldr	r3, [sp, #820]	; 0x334
   1836c:	cmp	r3, #0
   18370:	beq	17410 <__assert_fail@plt+0x6040>
   18374:	b	17edc <__assert_fail@plt+0x6b0c>
   18378:	adds	r2, r6, r4
   1837c:	adc	r3, r7, r4, asr #31
   18380:	cmp	r2, #-2147483648	; 0x80000000
   18384:	sbcs	r3, r3, #0
   18388:	movge	r5, #1
   1838c:	movlt	r5, #0
   18390:	b	175ac <__assert_fail@plt+0x61dc>
   18394:	mov	r2, #-2147483648	; 0x80000000
   18398:	subs	r2, r2, r6
   1839c:	mvn	r3, #0
   183a0:	sbc	r3, r3, r7
   183a4:	asr	r1, r4, #31
   183a8:	cmp	r4, r2
   183ac:	sbcs	r3, r1, r3
   183b0:	movlt	r5, #1
   183b4:	movge	r5, #0
   183b8:	b	175ac <__assert_fail@plt+0x61dc>
   183bc:	adds	r4, r0, r3
   183c0:	adc	r5, r1, r3, asr #31
   183c4:	cmp	r4, #-2147483648	; 0x80000000
   183c8:	sbcs	r2, r5, #0
   183cc:	movge	r2, #1
   183d0:	movlt	r2, #0
   183d4:	b	17550 <__assert_fail@plt+0x6180>
   183d8:	mov	r4, #-2147483648	; 0x80000000
   183dc:	subs	r4, r4, r0
   183e0:	mvn	r5, #0
   183e4:	sbc	r5, r5, r1
   183e8:	asr	r7, r3, #31
   183ec:	cmp	r3, r4
   183f0:	sbcs	r2, r7, r5
   183f4:	movlt	r2, #1
   183f8:	movge	r2, #0
   183fc:	b	17550 <__assert_fail@plt+0x6180>
   18400:	b	162d0 <__assert_fail@plt+0x4f00>
   18404:	push	{r4, r5, r6, r7, r8, lr}
   18408:	mov	r5, r0
   1840c:	sub	sp, sp, #8
   18410:	ldr	r0, [pc, #76]	; 18464 <__assert_fail@plt+0x7094>
   18414:	mov	r6, r1
   18418:	mov	r7, r2
   1841c:	bl	111d8 <getenv@plt>
   18420:	mov	r8, r0
   18424:	bl	1a79c <__assert_fail@plt+0x93cc>
   18428:	subs	r4, r0, #0
   1842c:	moveq	r5, r4
   18430:	beq	18458 <__assert_fail@plt+0x7088>
   18434:	mov	r0, r5
   18438:	stm	sp, {r4, r8}
   1843c:	mov	r2, r7
   18440:	mov	r1, r6
   18444:	mov	r3, #0
   18448:	bl	162d0 <__assert_fail@plt+0x4f00>
   1844c:	mov	r5, r0
   18450:	mov	r0, r4
   18454:	bl	1a9e8 <__assert_fail@plt+0x9618>
   18458:	mov	r0, r5
   1845c:	add	sp, sp, #8
   18460:	pop	{r4, r5, r6, r7, r8, pc}
   18464:	andeq	pc, r1, ip, lsl #28
   18468:	cmp	r2, #1
   1846c:	beq	184d0 <__assert_fail@plt+0x7100>
   18470:	cmp	r2, #2
   18474:	beq	184bc <__assert_fail@plt+0x70ec>
   18478:	push	{r4, lr}
   1847c:	mov	r4, r0
   18480:	sub	sp, sp, #8
   18484:	mov	r0, #0
   18488:	bl	1110c <time@plt>
   1848c:	add	r3, sp, #8
   18490:	str	r0, [r3, #-4]!
   18494:	mov	r0, r3
   18498:	bl	11220 <localtime@plt>
   1849c:	cmp	r0, #0
   184a0:	beq	18520 <__assert_fail@plt+0x7150>
   184a4:	ldr	r3, [r0, #20]
   184a8:	mov	r2, #1
   184ac:	str	r3, [r4]
   184b0:	mov	r0, r2
   184b4:	add	sp, sp, #8
   184b8:	pop	{r4, pc}
   184bc:	tst	r3, #2
   184c0:	bne	184f8 <__assert_fail@plt+0x7128>
   184c4:	mov	r2, #0
   184c8:	mov	r0, r2
   184cc:	bx	lr
   184d0:	ldr	ip, [r1]
   184d4:	str	ip, [r0]
   184d8:	ldr	r1, [r1]
   184dc:	cmp	r1, #68	; 0x44
   184e0:	bgt	184c8 <__assert_fail@plt+0x70f8>
   184e4:	tst	r3, #8
   184e8:	addeq	ip, ip, #100	; 0x64
   184ec:	streq	ip, [r0]
   184f0:	beq	184c8 <__assert_fail@plt+0x70f8>
   184f4:	b	184c4 <__assert_fail@plt+0x70f4>
   184f8:	ldr	r3, [r1]
   184fc:	mov	ip, #100	; 0x64
   18500:	ldr	r1, [r1, #4]
   18504:	mov	r2, #1
   18508:	mla	r3, ip, r3, r1
   1850c:	sub	r3, r3, #1888	; 0x760
   18510:	sub	r3, r3, #12
   18514:	str	r3, [r0]
   18518:	mov	r0, r2
   1851c:	bx	lr
   18520:	mov	r2, r0
   18524:	b	184b0 <__assert_fail@plt+0x70e0>
   18528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1852c:	sub	sp, sp, #100	; 0x64
   18530:	mov	r6, r2
   18534:	str	r0, [sp, #4]
   18538:	mov	r0, r1
   1853c:	mov	r4, r1
   18540:	bl	11274 <strlen@plt>
   18544:	ands	fp, r6, #4
   18548:	mov	r5, r0
   1854c:	beq	18584 <__assert_fail@plt+0x71b4>
   18550:	mov	r1, #46	; 0x2e
   18554:	mov	r0, r4
   18558:	bl	11280 <strchr@plt>
   1855c:	subs	fp, r0, #0
   18560:	beq	18584 <__assert_fail@plt+0x71b4>
   18564:	sub	r3, fp, r4
   18568:	sub	r5, r5, r3
   1856c:	cmp	r5, #3
   18570:	beq	18580 <__assert_fail@plt+0x71b0>
   18574:	mov	r0, #0
   18578:	add	sp, sp, #100	; 0x64
   1857c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18580:	mov	r5, r3
   18584:	sub	r3, r5, #8
   18588:	cmp	r3, #4
   1858c:	bhi	18574 <__assert_fail@plt+0x71a4>
   18590:	tst	r5, #1
   18594:	bne	18574 <__assert_fail@plt+0x71a4>
   18598:	mov	r0, r4
   1859c:	add	r1, r4, r5
   185a0:	mov	r2, r4
   185a4:	ldrb	r3, [r2], #1
   185a8:	sub	r3, r3, #48	; 0x30
   185ac:	cmp	r3, #9
   185b0:	bhi	18574 <__assert_fail@plt+0x71a4>
   185b4:	cmp	r1, r2
   185b8:	bne	185a4 <__assert_fail@plt+0x71d4>
   185bc:	asr	r5, r5, #1
   185c0:	add	r1, sp, #48	; 0x30
   185c4:	add	r4, r4, r5, lsl #1
   185c8:	ldrb	r3, [r0]
   185cc:	ldrb	r2, [r0, #1]
   185d0:	add	r0, r0, #2
   185d4:	sub	r3, r3, #48	; 0x30
   185d8:	cmp	r4, r0
   185dc:	add	r3, r3, r3, lsl #2
   185e0:	add	r3, r2, r3, lsl #1
   185e4:	sub	r3, r3, #48	; 0x30
   185e8:	str	r3, [r1, #4]!
   185ec:	bne	185c8 <__assert_fail@plt+0x71f8>
   185f0:	tst	r6, #1
   185f4:	beq	18744 <__assert_fail@plt+0x7374>
   185f8:	ldr	r1, [sp, #52]	; 0x34
   185fc:	ldr	r0, [sp, #56]	; 0x38
   18600:	ldr	lr, [sp, #60]	; 0x3c
   18604:	ldr	ip, [sp, #64]	; 0x40
   18608:	sub	r1, r1, #1
   1860c:	str	r1, [sp, #24]
   18610:	str	r0, [sp, #20]
   18614:	mov	r3, r6
   18618:	sub	r2, r5, #4
   1861c:	add	r1, sp, #68	; 0x44
   18620:	add	r0, sp, #28
   18624:	str	lr, [sp, #16]
   18628:	str	ip, [sp, #12]
   1862c:	bl	18468 <__assert_fail@plt+0x7098>
   18630:	cmp	r0, #0
   18634:	beq	18574 <__assert_fail@plt+0x71a4>
   18638:	cmp	fp, #0
   1863c:	beq	1866c <__assert_fail@plt+0x729c>
   18640:	ldrb	r3, [fp, #1]
   18644:	sub	r3, r3, #48	; 0x30
   18648:	cmp	r3, #9
   1864c:	bhi	18574 <__assert_fail@plt+0x71a4>
   18650:	ldrb	r2, [fp, #2]
   18654:	sub	r1, r2, #48	; 0x30
   18658:	cmp	r1, #9
   1865c:	bhi	18574 <__assert_fail@plt+0x71a4>
   18660:	add	r3, r3, r3, lsl #2
   18664:	add	r3, r2, r3, lsl #1
   18668:	sub	fp, r3, #48	; 0x30
   1866c:	str	fp, [sp, #8]
   18670:	ldr	r8, [sp, #12]
   18674:	ldr	r7, [sp, #16]
   18678:	ldr	lr, [sp, #20]
   1867c:	ldr	ip, [sp, #24]
   18680:	ldr	r1, [sp, #28]
   18684:	mov	r5, #0
   18688:	add	r4, sp, #52	; 0x34
   1868c:	mvn	r9, #0
   18690:	mov	r6, #59	; 0x3b
   18694:	b	18708 <__assert_fail@plt+0x7338>
   18698:	ldr	r1, [sp, #28]
   1869c:	ldr	r3, [sp, #72]	; 0x48
   186a0:	ldr	ip, [sp, #24]
   186a4:	ldr	r8, [sp, #68]	; 0x44
   186a8:	ldr	lr, [sp, #20]
   186ac:	ldr	sl, [sp, #64]	; 0x40
   186b0:	eor	r8, r8, ip
   186b4:	eor	r3, r3, r1
   186b8:	ldr	r7, [sp, #16]
   186bc:	ldr	r2, [sp, #60]	; 0x3c
   186c0:	orr	r3, r3, r8
   186c4:	eor	sl, sl, lr
   186c8:	orr	r3, r3, sl
   186cc:	eor	r2, r2, r7
   186d0:	orr	r3, r3, r2
   186d4:	ldr	r8, [sp, #12]
   186d8:	ldr	r2, [sp, #56]	; 0x38
   186dc:	ldr	sl, [sp, #8]
   186e0:	eor	r2, r8, r2
   186e4:	orr	r3, r3, r2
   186e8:	ldr	r2, [sp, #52]	; 0x34
   186ec:	eor	r2, sl, r2
   186f0:	orrs	r3, r3, r2
   186f4:	beq	1878c <__assert_fail@plt+0x73bc>
   186f8:	cmp	sl, #60	; 0x3c
   186fc:	bne	18574 <__assert_fail@plt+0x71a4>
   18700:	mov	r5, #1
   18704:	str	r6, [sp, #8]
   18708:	mov	r0, r4
   1870c:	str	fp, [sp, #52]	; 0x34
   18710:	str	r8, [sp, #56]	; 0x38
   18714:	str	r7, [sp, #60]	; 0x3c
   18718:	str	lr, [sp, #64]	; 0x40
   1871c:	str	ip, [sp, #68]	; 0x44
   18720:	str	r1, [sp, #72]	; 0x48
   18724:	str	r9, [sp, #76]	; 0x4c
   18728:	str	r9, [sp, #84]	; 0x54
   1872c:	bl	110b8 <mktime@plt>
   18730:	ldr	r3, [sp, #76]	; 0x4c
   18734:	mov	fp, #59	; 0x3b
   18738:	cmp	r3, #0
   1873c:	bge	18698 <__assert_fail@plt+0x72c8>
   18740:	b	18574 <__assert_fail@plt+0x71a4>
   18744:	add	r4, sp, #52	; 0x34
   18748:	mov	r3, r6
   1874c:	mov	r1, r4
   18750:	sub	r2, r5, #4
   18754:	add	r0, sp, #28
   18758:	bl	18468 <__assert_fail@plt+0x7098>
   1875c:	cmp	r0, #0
   18760:	beq	18574 <__assert_fail@plt+0x71a4>
   18764:	sub	r5, r5, #-1073741820	; 0xc0000004
   18768:	add	r2, r4, r5, lsl #2
   1876c:	ldr	r3, [r4, r5, lsl #2]
   18770:	ldmib	r2, {r0, r1, r2}
   18774:	sub	r3, r3, #1
   18778:	str	r3, [sp, #24]
   1877c:	str	r0, [sp, #20]
   18780:	str	r1, [sp, #16]
   18784:	str	r2, [sp, #12]
   18788:	b	18638 <__assert_fail@plt+0x7268>
   1878c:	cmp	r0, #0
   18790:	blt	187a4 <__assert_fail@plt+0x73d4>
   18794:	mvn	r2, #-2147483648	; 0x80000000
   18798:	sub	r2, r2, r5
   1879c:	cmp	r0, r2
   187a0:	bgt	18574 <__assert_fail@plt+0x71a4>
   187a4:	ldr	r3, [sp, #4]
   187a8:	add	r0, r5, r0
   187ac:	str	r0, [r3]
   187b0:	mov	r0, #1
   187b4:	add	sp, sp, #100	; 0x64
   187b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187bc:	push	{lr}		; (str lr, [sp, #-4]!)
   187c0:	sub	sp, sp, #12
   187c4:	ldr	r0, [pc, #72]	; 18814 <__assert_fail@plt+0x7444>
   187c8:	bl	111d8 <getenv@plt>
   187cc:	subs	r3, r0, #0
   187d0:	beq	187e0 <__assert_fail@plt+0x7410>
   187d4:	ldrb	r3, [r3]
   187d8:	cmp	r3, #0
   187dc:	bne	187ec <__assert_fail@plt+0x741c>
   187e0:	ldr	r0, [pc, #48]	; 18818 <__assert_fail@plt+0x7448>
   187e4:	add	sp, sp, #12
   187e8:	pop	{pc}		; (ldr pc, [sp], #4)
   187ec:	mov	r2, #10
   187f0:	add	r1, sp, #4
   187f4:	bl	110ac <strtol@plt>
   187f8:	ldr	r2, [sp, #4]
   187fc:	ldr	r3, [pc, #20]	; 18818 <__assert_fail@plt+0x7448>
   18800:	ldrb	r2, [r2]
   18804:	cmp	r2, #0
   18808:	movne	r0, r3
   1880c:	add	sp, sp, #12
   18810:	pop	{pc}		; (ldr pc, [sp], #4)
   18814:	strdeq	r0, [r2], -r4
   18818:	andeq	r1, r3, r9, rrx
   1881c:	push	{r4, r5, r6, lr}
   18820:	subs	r4, r0, #0
   18824:	beq	18898 <__assert_fail@plt+0x74c8>
   18828:	mov	r1, #47	; 0x2f
   1882c:	bl	11328 <strrchr@plt>
   18830:	subs	r5, r0, #0
   18834:	beq	18884 <__assert_fail@plt+0x74b4>
   18838:	add	r6, r5, #1
   1883c:	sub	r3, r6, r4
   18840:	cmp	r3, #6
   18844:	ble	18884 <__assert_fail@plt+0x74b4>
   18848:	mov	r2, #7
   1884c:	ldr	r1, [pc, #96]	; 188b4 <__assert_fail@plt+0x74e4>
   18850:	sub	r0, r5, #6
   18854:	bl	11394 <strncmp@plt>
   18858:	cmp	r0, #0
   1885c:	bne	18884 <__assert_fail@plt+0x74b4>
   18860:	mov	r2, #3
   18864:	ldr	r1, [pc, #76]	; 188b8 <__assert_fail@plt+0x74e8>
   18868:	mov	r0, r6
   1886c:	bl	11394 <strncmp@plt>
   18870:	cmp	r0, #0
   18874:	movne	r4, r6
   18878:	ldreq	r3, [pc, #60]	; 188bc <__assert_fail@plt+0x74ec>
   1887c:	addeq	r4, r5, #4
   18880:	streq	r4, [r3]
   18884:	ldr	r2, [pc, #52]	; 188c0 <__assert_fail@plt+0x74f0>
   18888:	ldr	r3, [pc, #52]	; 188c4 <__assert_fail@plt+0x74f4>
   1888c:	str	r4, [r2]
   18890:	str	r4, [r3]
   18894:	pop	{r4, r5, r6, pc}
   18898:	ldr	r3, [pc, #40]	; 188c8 <__assert_fail@plt+0x74f8>
   1889c:	mov	r2, #55	; 0x37
   188a0:	mov	r1, #1
   188a4:	ldr	r3, [r3]
   188a8:	ldr	r0, [pc, #28]	; 188cc <__assert_fail@plt+0x74fc>
   188ac:	bl	11184 <fwrite@plt>
   188b0:	bl	113a0 <abort@plt>
   188b4:	andeq	r0, r2, ip, lsr r1
   188b8:	andeq	r0, r2, r4, asr #2
   188bc:	muleq	r3, r0, r1
   188c0:	ldrdeq	r1, [r3], -r8
   188c4:	muleq	r3, r4, r1
   188c8:	andeq	r1, r3, r0, lsr #3
   188cc:	andeq	r0, r2, r4, lsl #2
   188d0:	push	{r4, r5, r6, lr}
   188d4:	mov	r2, #48	; 0x30
   188d8:	mov	r4, r1
   188dc:	mov	r1, #0
   188e0:	mov	r5, r0
   188e4:	bl	112c8 <memset@plt>
   188e8:	cmp	r4, #10
   188ec:	beq	188fc <__assert_fail@plt+0x752c>
   188f0:	str	r4, [r5]
   188f4:	mov	r0, r5
   188f8:	pop	{r4, r5, r6, pc}
   188fc:	bl	113a0 <abort@plt>
   18900:	push	{r4, r5, r6, lr}
   18904:	mov	r4, r0
   18908:	mov	r5, r1
   1890c:	bl	1b96c <__assert_fail@plt+0xa59c>
   18910:	ldrb	r3, [r0]
   18914:	bic	r3, r3, #32
   18918:	cmp	r3, #85	; 0x55
   1891c:	bne	1897c <__assert_fail@plt+0x75ac>
   18920:	ldrb	r3, [r0, #1]
   18924:	bic	r3, r3, #32
   18928:	cmp	r3, #84	; 0x54
   1892c:	bne	189b8 <__assert_fail@plt+0x75e8>
   18930:	ldrb	r3, [r0, #2]
   18934:	bic	r3, r3, #32
   18938:	cmp	r3, #70	; 0x46
   1893c:	bne	189b8 <__assert_fail@plt+0x75e8>
   18940:	ldrb	r3, [r0, #3]
   18944:	cmp	r3, #45	; 0x2d
   18948:	bne	189b8 <__assert_fail@plt+0x75e8>
   1894c:	ldrb	r3, [r0, #4]
   18950:	cmp	r3, #56	; 0x38
   18954:	bne	189b8 <__assert_fail@plt+0x75e8>
   18958:	ldrb	r3, [r0, #5]
   1895c:	cmp	r3, #0
   18960:	bne	189b8 <__assert_fail@plt+0x75e8>
   18964:	ldrb	r2, [r4]
   18968:	ldr	r3, [pc, #152]	; 18a08 <__assert_fail@plt+0x7638>
   1896c:	ldr	r0, [pc, #152]	; 18a0c <__assert_fail@plt+0x763c>
   18970:	cmp	r2, #96	; 0x60
   18974:	movne	r0, r3
   18978:	pop	{r4, r5, r6, pc}
   1897c:	cmp	r3, #71	; 0x47
   18980:	bne	189b8 <__assert_fail@plt+0x75e8>
   18984:	ldrb	r3, [r0, #1]
   18988:	bic	r3, r3, #32
   1898c:	cmp	r3, #66	; 0x42
   18990:	bne	189b8 <__assert_fail@plt+0x75e8>
   18994:	ldrb	r3, [r0, #2]
   18998:	cmp	r3, #49	; 0x31
   1899c:	bne	189b8 <__assert_fail@plt+0x75e8>
   189a0:	ldrb	r3, [r0, #3]
   189a4:	cmp	r3, #56	; 0x38
   189a8:	bne	189b8 <__assert_fail@plt+0x75e8>
   189ac:	ldrb	r3, [r0, #4]
   189b0:	cmp	r3, #48	; 0x30
   189b4:	beq	189cc <__assert_fail@plt+0x75fc>
   189b8:	ldr	r3, [pc, #80]	; 18a10 <__assert_fail@plt+0x7640>
   189bc:	cmp	r5, #9
   189c0:	ldr	r0, [pc, #76]	; 18a14 <__assert_fail@plt+0x7644>
   189c4:	movne	r0, r3
   189c8:	pop	{r4, r5, r6, pc}
   189cc:	ldrb	r3, [r0, #5]
   189d0:	cmp	r3, #51	; 0x33
   189d4:	bne	189b8 <__assert_fail@plt+0x75e8>
   189d8:	ldrb	r3, [r0, #6]
   189dc:	cmp	r3, #48	; 0x30
   189e0:	bne	189b8 <__assert_fail@plt+0x75e8>
   189e4:	ldrb	r3, [r0, #7]
   189e8:	cmp	r3, #0
   189ec:	bne	189b8 <__assert_fail@plt+0x75e8>
   189f0:	ldrb	r2, [r4]
   189f4:	ldr	r3, [pc, #28]	; 18a18 <__assert_fail@plt+0x7648>
   189f8:	ldr	r0, [pc, #28]	; 18a1c <__assert_fail@plt+0x764c>
   189fc:	cmp	r2, #96	; 0x60
   18a00:	movne	r0, r3
   18a04:	pop	{r4, r5, r6, pc}
   18a08:	andeq	r0, r2, r0, lsr #3
   18a0c:	muleq	r2, ip, r1
   18a10:			; <UNDEFINED> instruction: 0x000201b0
   18a14:	andeq	r0, r2, ip, lsr #3
   18a18:	andeq	r0, r2, r8, lsr #3
   18a1c:	andeq	r0, r2, r4, lsr #3
   18a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a24:	sub	sp, sp, #116	; 0x74
   18a28:	mov	sl, r0
   18a2c:	str	r3, [sp, #24]
   18a30:	mov	r3, #1
   18a34:	mov	r8, r1
   18a38:	str	r2, [sp, #56]	; 0x38
   18a3c:	str	r3, [sp, #36]	; 0x24
   18a40:	bl	1119c <__ctype_get_mb_cur_max@plt>
   18a44:	ldr	r3, [sp, #156]	; 0x9c
   18a48:	mov	fp, r8
   18a4c:	mov	r2, #0
   18a50:	lsr	r3, r3, #1
   18a54:	and	r3, r3, #1
   18a58:	str	r2, [sp, #68]	; 0x44
   18a5c:	str	r3, [sp, #28]
   18a60:	str	r2, [sp, #40]	; 0x28
   18a64:	str	r2, [sp, #44]	; 0x2c
   18a68:	str	r2, [sp, #52]	; 0x34
   18a6c:	str	r2, [sp, #64]	; 0x40
   18a70:	str	r2, [sp, #72]	; 0x48
   18a74:	str	sl, [sp, #32]
   18a78:	str	r0, [sp, #76]	; 0x4c
   18a7c:	ldr	r3, [sp, #152]	; 0x98
   18a80:	cmp	r3, #10
   18a84:	ldrls	pc, [pc, r3, lsl #2]
   18a88:	b	19c48 <__assert_fail@plt+0x8878>
   18a8c:			; <UNDEFINED> instruction: 0x00018ab8
   18a90:	andeq	r8, r1, r0, lsr #27
   18a94:	andeq	r8, r1, r4, asr #27
   18a98:	andeq	r8, r1, r8, ror #27
   18a9c:	andeq	r8, r1, r4, lsl pc
   18aa0:	andeq	r8, r1, r8, ror #29
   18aa4:	andeq	r8, r1, r0, asr #29
   18aa8:	strdeq	r8, [r1], -ip
   18aac:	andeq	r8, r1, r4, lsl lr
   18ab0:	andeq	r8, r1, r4, lsl lr
   18ab4:	andeq	r8, r1, r4, lsl lr
   18ab8:	mov	r3, #0
   18abc:	mov	r7, r3
   18ac0:	str	r3, [sp, #28]
   18ac4:	ldr	r3, [sp, #44]	; 0x2c
   18ac8:	mov	sl, #0
   18acc:	eor	r3, r3, #1
   18ad0:	str	r3, [sp, #60]	; 0x3c
   18ad4:	ldr	r3, [sp, #24]
   18ad8:	cmn	r3, #1
   18adc:	beq	19040 <__assert_fail@plt+0x7c70>
   18ae0:	ldr	r3, [sp, #24]
   18ae4:	subs	r5, r3, sl
   18ae8:	movne	r5, #1
   18aec:	cmp	r5, #0
   18af0:	beq	19058 <__assert_fail@plt+0x7c88>
   18af4:	ldr	r3, [sp, #152]	; 0x98
   18af8:	ldr	r8, [sp, #44]	; 0x2c
   18afc:	cmp	r3, #2
   18b00:	moveq	r8, #0
   18b04:	andne	r8, r8, #1
   18b08:	ldr	r3, [sp, #52]	; 0x34
   18b0c:	adds	r9, r3, #0
   18b10:	movne	r9, #1
   18b14:	ands	r6, r9, r8
   18b18:	beq	194c0 <__assert_fail@plt+0x80f0>
   18b1c:	ldr	r2, [sp, #52]	; 0x34
   18b20:	ldr	r1, [sp, #24]
   18b24:	cmp	r2, #1
   18b28:	mov	r3, r2
   18b2c:	movls	r3, #0
   18b30:	movhi	r3, #1
   18b34:	cmn	r1, #1
   18b38:	movne	r3, #0
   18b3c:	cmp	r3, #0
   18b40:	add	r4, sl, r2
   18b44:	beq	18b54 <__assert_fail@plt+0x7784>
   18b48:	ldr	r0, [sp, #56]	; 0x38
   18b4c:	bl	11274 <strlen@plt>
   18b50:	str	r0, [sp, #24]
   18b54:	ldr	r3, [sp, #24]
   18b58:	cmp	r3, r4
   18b5c:	ldr	r3, [sp, #56]	; 0x38
   18b60:	add	r3, r3, sl
   18b64:	str	r3, [sp, #48]	; 0x30
   18b68:	bcc	194cc <__assert_fail@plt+0x80fc>
   18b6c:	mov	r0, r3
   18b70:	ldr	r2, [sp, #52]	; 0x34
   18b74:	ldr	r1, [sp, #64]	; 0x40
   18b78:	bl	11118 <memcmp@plt>
   18b7c:	cmp	r0, #0
   18b80:	bne	194cc <__assert_fail@plt+0x80fc>
   18b84:	ldr	r3, [sp, #28]
   18b88:	cmp	r3, #0
   18b8c:	bne	19d48 <__assert_fail@plt+0x8978>
   18b90:	ldr	r3, [sp, #48]	; 0x30
   18b94:	ldrb	r4, [r3]
   18b98:	cmp	r4, #126	; 0x7e
   18b9c:	ldrls	pc, [pc, r4, lsl #2]
   18ba0:	b	19460 <__assert_fail@plt+0x8090>
   18ba4:	andeq	r9, r1, r4, lsl #5
   18ba8:	andeq	r9, r1, r0, ror #8
   18bac:	andeq	r9, r1, r0, ror #8
   18bb0:	andeq	r9, r1, r0, ror #8
   18bb4:	andeq	r9, r1, r0, ror #8
   18bb8:	andeq	r9, r1, r0, ror #8
   18bbc:	andeq	r9, r1, r0, ror #8
   18bc0:	andeq	r9, r1, r8, ror #4
   18bc4:	andeq	r9, r1, ip, asr #4
   18bc8:	andeq	r9, r1, r8, asr #8
   18bcc:	andeq	r9, r1, ip, lsr #3
   18bd0:	muleq	r1, r0, r1
   18bd4:	andeq	r9, r1, r4, lsr #8
   18bd8:	andeq	r9, r1, r0, lsl #8
   18bdc:	andeq	r9, r1, r0, ror #8
   18be0:	andeq	r9, r1, r0, ror #8
   18be4:	andeq	r9, r1, r0, ror #8
   18be8:	andeq	r9, r1, r0, ror #8
   18bec:	andeq	r9, r1, r0, ror #8
   18bf0:	andeq	r9, r1, r0, ror #8
   18bf4:	andeq	r9, r1, r0, ror #8
   18bf8:	andeq	r9, r1, r0, ror #8
   18bfc:	andeq	r9, r1, r0, ror #8
   18c00:	andeq	r9, r1, r0, ror #8
   18c04:	andeq	r9, r1, r0, ror #8
   18c08:	andeq	r9, r1, r0, ror #8
   18c0c:	andeq	r9, r1, r0, ror #8
   18c10:	andeq	r9, r1, r0, ror #8
   18c14:	andeq	r9, r1, r0, ror #8
   18c18:	andeq	r9, r1, r0, ror #8
   18c1c:	andeq	r9, r1, r0, ror #8
   18c20:	andeq	r9, r1, r0, ror #8
   18c24:	andeq	r9, r1, r0, asr #8
   18c28:	andeq	r9, r1, r4, ror r3
   18c2c:	andeq	r9, r1, r4, ror r3
   18c30:	andeq	r8, r1, r4, lsl #31
   18c34:	andeq	r9, r1, r4, ror r3
   18c38:	andeq	r9, r1, ip, lsl #8
   18c3c:	andeq	r9, r1, r4, ror r3
   18c40:	andeq	r9, r1, r0, ror #7
   18c44:	andeq	r9, r1, r4, ror r3
   18c48:	andeq	r9, r1, r4, ror r3
   18c4c:	andeq	r9, r1, r4, ror r3
   18c50:	andeq	r9, r1, ip, lsl #8
   18c54:	andeq	r9, r1, ip, lsl #8
   18c58:	andeq	r9, r1, ip, lsl #8
   18c5c:	andeq	r9, r1, ip, lsl #8
   18c60:	andeq	r9, r1, ip, lsl #8
   18c64:	andeq	r9, r1, ip, lsl #8
   18c68:	andeq	r9, r1, ip, lsl #8
   18c6c:	andeq	r9, r1, ip, lsl #8
   18c70:	andeq	r9, r1, ip, lsl #8
   18c74:	andeq	r9, r1, ip, lsl #8
   18c78:	andeq	r9, r1, ip, lsl #8
   18c7c:	andeq	r9, r1, ip, lsl #8
   18c80:	andeq	r9, r1, ip, lsl #8
   18c84:	andeq	r9, r1, ip, lsl #8
   18c88:	andeq	r9, r1, ip, lsl #8
   18c8c:	andeq	r9, r1, ip, lsl #8
   18c90:	andeq	r9, r1, r4, ror r3
   18c94:	andeq	r9, r1, r4, ror r3
   18c98:	andeq	r9, r1, r4, ror r3
   18c9c:	andeq	r9, r1, r4, ror r3
   18ca0:			; <UNDEFINED> instruction: 0x000193b0
   18ca4:	andeq	r9, r1, r0, ror #8
   18ca8:	andeq	r9, r1, ip, lsl #8
   18cac:	andeq	r9, r1, ip, lsl #8
   18cb0:	andeq	r9, r1, ip, lsl #8
   18cb4:	andeq	r9, r1, ip, lsl #8
   18cb8:	andeq	r9, r1, ip, lsl #8
   18cbc:	andeq	r9, r1, ip, lsl #8
   18cc0:	andeq	r9, r1, ip, lsl #8
   18cc4:	andeq	r9, r1, ip, lsl #8
   18cc8:	andeq	r9, r1, ip, lsl #8
   18ccc:	andeq	r9, r1, ip, lsl #8
   18cd0:	andeq	r9, r1, ip, lsl #8
   18cd4:	andeq	r9, r1, ip, lsl #8
   18cd8:	andeq	r9, r1, ip, lsl #8
   18cdc:	andeq	r9, r1, ip, lsl #8
   18ce0:	andeq	r9, r1, ip, lsl #8
   18ce4:	andeq	r9, r1, ip, lsl #8
   18ce8:	andeq	r9, r1, ip, lsl #8
   18cec:	andeq	r9, r1, ip, lsl #8
   18cf0:	andeq	r9, r1, ip, lsl #8
   18cf4:	andeq	r9, r1, ip, lsl #8
   18cf8:	andeq	r9, r1, ip, lsl #8
   18cfc:	andeq	r9, r1, ip, lsl #8
   18d00:	andeq	r9, r1, ip, lsl #8
   18d04:	andeq	r9, r1, ip, lsl #8
   18d08:	andeq	r9, r1, ip, lsl #8
   18d0c:	andeq	r9, r1, ip, lsl #8
   18d10:	andeq	r9, r1, r4, ror r3
   18d14:	ldrdeq	r9, [r1], -r0
   18d18:	andeq	r9, r1, ip, lsl #8
   18d1c:	andeq	r9, r1, r4, ror r3
   18d20:	andeq	r9, r1, ip, lsl #8
   18d24:	andeq	r9, r1, r4, ror r3
   18d28:	andeq	r9, r1, ip, lsl #8
   18d2c:	andeq	r9, r1, ip, lsl #8
   18d30:	andeq	r9, r1, ip, lsl #8
   18d34:	andeq	r9, r1, ip, lsl #8
   18d38:	andeq	r9, r1, ip, lsl #8
   18d3c:	andeq	r9, r1, ip, lsl #8
   18d40:	andeq	r9, r1, ip, lsl #8
   18d44:	andeq	r9, r1, ip, lsl #8
   18d48:	andeq	r9, r1, ip, lsl #8
   18d4c:	andeq	r9, r1, ip, lsl #8
   18d50:	andeq	r9, r1, ip, lsl #8
   18d54:	andeq	r9, r1, ip, lsl #8
   18d58:	andeq	r9, r1, ip, lsl #8
   18d5c:	andeq	r9, r1, ip, lsl #8
   18d60:	andeq	r9, r1, ip, lsl #8
   18d64:	andeq	r9, r1, ip, lsl #8
   18d68:	andeq	r9, r1, ip, lsl #8
   18d6c:	andeq	r9, r1, ip, lsl #8
   18d70:	andeq	r9, r1, ip, lsl #8
   18d74:	andeq	r9, r1, ip, lsl #8
   18d78:	andeq	r9, r1, ip, lsl #8
   18d7c:	andeq	r9, r1, ip, lsl #8
   18d80:	andeq	r9, r1, ip, lsl #8
   18d84:	andeq	r9, r1, ip, lsl #8
   18d88:	andeq	r9, r1, ip, lsl #8
   18d8c:	andeq	r9, r1, ip, lsl #8
   18d90:	andeq	r8, r1, r4, ror #30
   18d94:	andeq	r9, r1, r4, ror r3
   18d98:	andeq	r8, r1, r4, ror #30
   18d9c:	andeq	r8, r1, r4, lsl #31
   18da0:	mov	r3, #1
   18da4:	str	r3, [sp, #28]
   18da8:	str	r3, [sp, #52]	; 0x34
   18dac:	ldr	r3, [pc, #4000]	; 19d54 <__assert_fail@plt+0x8984>
   18db0:	mov	r7, #0
   18db4:	str	r3, [sp, #64]	; 0x40
   18db8:	mov	r3, #2
   18dbc:	str	r3, [sp, #152]	; 0x98
   18dc0:	b	18ac4 <__assert_fail@plt+0x76f4>
   18dc4:	ldr	r3, [sp, #28]
   18dc8:	cmp	r3, #0
   18dcc:	beq	18f28 <__assert_fail@plt+0x7b58>
   18dd0:	mov	r3, #1
   18dd4:	str	r3, [sp, #52]	; 0x34
   18dd8:	ldr	r3, [pc, #3956]	; 19d54 <__assert_fail@plt+0x8984>
   18ddc:	mov	r7, #0
   18de0:	str	r3, [sp, #64]	; 0x40
   18de4:	b	18ac4 <__assert_fail@plt+0x76f4>
   18de8:	mov	r3, #1
   18dec:	str	r3, [sp, #44]	; 0x2c
   18df0:	str	r3, [sp, #52]	; 0x34
   18df4:	str	r3, [sp, #28]
   18df8:	b	18dac <__assert_fail@plt+0x79dc>
   18dfc:	mov	r3, #0
   18e00:	str	r3, [sp, #28]
   18e04:	mov	r3, #1
   18e08:	str	r3, [sp, #44]	; 0x2c
   18e0c:	mov	r7, #0
   18e10:	b	18ac4 <__assert_fail@plt+0x76f4>
   18e14:	ldr	r3, [sp, #152]	; 0x98
   18e18:	cmp	r3, #10
   18e1c:	beq	18e60 <__assert_fail@plt+0x7a90>
   18e20:	mov	r2, #5
   18e24:	ldr	r1, [pc, #3884]	; 19d58 <__assert_fail@plt+0x8988>
   18e28:	mov	r0, #0
   18e2c:	bl	11130 <dcgettext@plt>
   18e30:	ldr	r2, [pc, #3872]	; 19d58 <__assert_fail@plt+0x8988>
   18e34:	cmp	r0, r2
   18e38:	str	r0, [sp, #164]	; 0xa4
   18e3c:	beq	19e44 <__assert_fail@plt+0x8a74>
   18e40:	mov	r2, #5
   18e44:	ldr	r1, [pc, #3848]	; 19d54 <__assert_fail@plt+0x8984>
   18e48:	mov	r0, #0
   18e4c:	bl	11130 <dcgettext@plt>
   18e50:	ldr	r2, [pc, #3836]	; 19d54 <__assert_fail@plt+0x8984>
   18e54:	cmp	r0, r2
   18e58:	str	r0, [sp, #168]	; 0xa8
   18e5c:	beq	19e34 <__assert_fail@plt+0x8a64>
   18e60:	ldr	r7, [sp, #28]
   18e64:	cmp	r7, #0
   18e68:	movne	r7, #0
   18e6c:	bne	18ea0 <__assert_fail@plt+0x7ad0>
   18e70:	ldr	r3, [sp, #164]	; 0xa4
   18e74:	ldrb	r3, [r3]
   18e78:	cmp	r3, #0
   18e7c:	beq	19e54 <__assert_fail@plt+0x8a84>
   18e80:	ldr	r2, [sp, #164]	; 0xa4
   18e84:	ldr	r1, [sp, #32]
   18e88:	cmp	fp, r7
   18e8c:	strbhi	r3, [r1, r7]
   18e90:	ldrb	r3, [r2, #1]!
   18e94:	add	r7, r7, #1
   18e98:	cmp	r3, #0
   18e9c:	bne	18e88 <__assert_fail@plt+0x7ab8>
   18ea0:	ldr	r0, [sp, #168]	; 0xa8
   18ea4:	bl	11274 <strlen@plt>
   18ea8:	ldr	r3, [sp, #168]	; 0xa8
   18eac:	str	r3, [sp, #64]	; 0x40
   18eb0:	mov	r3, #1
   18eb4:	str	r3, [sp, #44]	; 0x2c
   18eb8:	str	r0, [sp, #52]	; 0x34
   18ebc:	b	18ac4 <__assert_fail@plt+0x76f4>
   18ec0:	mov	r3, #1
   18ec4:	str	r3, [sp, #44]	; 0x2c
   18ec8:	str	r3, [sp, #52]	; 0x34
   18ecc:	str	r3, [sp, #28]
   18ed0:	ldr	r3, [pc, #3716]	; 19d5c <__assert_fail@plt+0x898c>
   18ed4:	mov	r7, #0
   18ed8:	str	r3, [sp, #64]	; 0x40
   18edc:	mov	r3, #5
   18ee0:	str	r3, [sp, #152]	; 0x98
   18ee4:	b	18ac4 <__assert_fail@plt+0x76f4>
   18ee8:	ldr	r3, [sp, #28]
   18eec:	cmp	r3, #0
   18ef0:	beq	19bf0 <__assert_fail@plt+0x8820>
   18ef4:	ldr	r3, [sp, #28]
   18ef8:	mov	r7, #0
   18efc:	str	r3, [sp, #44]	; 0x2c
   18f00:	mov	r3, #1
   18f04:	str	r3, [sp, #52]	; 0x34
   18f08:	ldr	r3, [pc, #3660]	; 19d5c <__assert_fail@plt+0x898c>
   18f0c:	str	r3, [sp, #64]	; 0x40
   18f10:	b	18ac4 <__assert_fail@plt+0x76f4>
   18f14:	ldr	r3, [sp, #28]
   18f18:	cmp	r3, #0
   18f1c:	mov	r3, #1
   18f20:	streq	r3, [sp, #44]	; 0x2c
   18f24:	bne	18da8 <__assert_fail@plt+0x79d8>
   18f28:	cmp	fp, #0
   18f2c:	beq	19c20 <__assert_fail@plt+0x8850>
   18f30:	ldr	r3, [sp, #32]
   18f34:	mov	r2, #39	; 0x27
   18f38:	mov	r7, #1
   18f3c:	strb	r2, [r3]
   18f40:	mov	r3, #0
   18f44:	str	r3, [sp, #28]
   18f48:	mov	r3, #1
   18f4c:	str	r3, [sp, #52]	; 0x34
   18f50:	ldr	r3, [pc, #3580]	; 19d54 <__assert_fail@plt+0x8984>
   18f54:	str	r3, [sp, #64]	; 0x40
   18f58:	mov	r3, #2
   18f5c:	str	r3, [sp, #152]	; 0x98
   18f60:	b	18ac4 <__assert_fail@plt+0x76f4>
   18f64:	ldr	r3, [sp, #24]
   18f68:	cmn	r3, #1
   18f6c:	beq	19b84 <__assert_fail@plt+0x87b4>
   18f70:	ldr	r3, [sp, #24]
   18f74:	subs	r3, r3, #1
   18f78:	movne	r3, #1
   18f7c:	cmp	r3, #0
   18f80:	bne	18f8c <__assert_fail@plt+0x7bbc>
   18f84:	cmp	sl, #0
   18f88:	beq	19378 <__assert_fail@plt+0x7fa8>
   18f8c:	ldr	r3, [sp, #152]	; 0x98
   18f90:	mov	r5, #0
   18f94:	sub	r2, r3, #2
   18f98:	mov	r8, r5
   18f9c:	clz	r2, r2
   18fa0:	lsr	r2, r2, #5
   18fa4:	ldr	r3, [sp, #60]	; 0x3c
   18fa8:	ldr	r1, [sp, #28]
   18fac:	orr	r3, r2, r3
   18fb0:	eor	r3, r3, #1
   18fb4:	orr	r3, r1, r3
   18fb8:	tst	r3, #255	; 0xff
   18fbc:	bne	196e8 <__assert_fail@plt+0x8318>
   18fc0:	cmp	r6, #0
   18fc4:	bne	19114 <__assert_fail@plt+0x7d44>
   18fc8:	ldr	r3, [sp, #40]	; 0x28
   18fcc:	eor	r8, r8, #1
   18fd0:	and	r8, r8, r3
   18fd4:	add	sl, sl, #1
   18fd8:	uxtb	r6, r8
   18fdc:	cmp	r6, #0
   18fe0:	beq	19014 <__assert_fail@plt+0x7c44>
   18fe4:	cmp	fp, r7
   18fe8:	movhi	r2, #39	; 0x27
   18fec:	ldrhi	r3, [sp, #32]
   18ff0:	strbhi	r2, [r3, r7]
   18ff4:	add	r3, r7, #1
   18ff8:	cmp	fp, r3
   18ffc:	movhi	r1, #39	; 0x27
   19000:	ldrhi	r2, [sp, #32]
   19004:	add	r7, r7, #2
   19008:	strbhi	r1, [r2, r3]
   1900c:	mov	r3, #0
   19010:	str	r3, [sp, #40]	; 0x28
   19014:	cmp	r7, fp
   19018:	ldrcc	r3, [sp, #32]
   1901c:	strbcc	r4, [r3, r7]
   19020:	ldr	r3, [sp, #36]	; 0x24
   19024:	cmp	r5, #0
   19028:	moveq	r3, #0
   1902c:	str	r3, [sp, #36]	; 0x24
   19030:	ldr	r3, [sp, #24]
   19034:	add	r7, r7, #1
   19038:	cmn	r3, #1
   1903c:	bne	18ae0 <__assert_fail@plt+0x7710>
   19040:	ldr	r3, [sp, #56]	; 0x38
   19044:	ldrb	r5, [r3, sl]
   19048:	adds	r5, r5, #0
   1904c:	movne	r5, #1
   19050:	cmp	r5, #0
   19054:	bne	18af4 <__assert_fail@plt+0x7724>
   19058:	ldr	r3, [sp, #152]	; 0x98
   1905c:	ldr	r1, [sp, #28]
   19060:	sub	r3, r3, #2
   19064:	clz	r3, r3
   19068:	lsr	r3, r3, #5
   1906c:	and	r9, r1, r3
   19070:	cmp	r7, #0
   19074:	movne	r2, #0
   19078:	andeq	r2, r9, #1
   1907c:	cmp	r2, #0
   19080:	bne	19a5c <__assert_fail@plt+0x868c>
   19084:	eor	r2, r1, #1
   19088:	ands	r3, r3, r2
   1908c:	beq	19f18 <__assert_fail@plt+0x8b48>
   19090:	ldr	r2, [sp, #68]	; 0x44
   19094:	cmp	r2, #0
   19098:	beq	19f04 <__assert_fail@plt+0x8b34>
   1909c:	ldr	r3, [sp, #36]	; 0x24
   190a0:	cmp	r3, #0
   190a4:	bne	19ebc <__assert_fail@plt+0x8aec>
   190a8:	ldr	r2, [sp, #72]	; 0x48
   190ac:	clz	r3, fp
   190b0:	cmp	r2, #0
   190b4:	lsr	r3, r3, #5
   190b8:	moveq	r3, #0
   190bc:	cmp	r3, #0
   190c0:	beq	19e5c <__assert_fail@plt+0x8a8c>
   190c4:	str	r3, [sp, #68]	; 0x44
   190c8:	ldr	fp, [sp, #72]	; 0x48
   190cc:	b	18a7c <__assert_fail@plt+0x76ac>
   190d0:	ldr	r3, [sp, #152]	; 0x98
   190d4:	cmp	r3, #2
   190d8:	beq	1972c <__assert_fail@plt+0x835c>
   190dc:	ldr	r3, [sp, #44]	; 0x2c
   190e0:	ldr	r2, [sp, #28]
   190e4:	and	r2, r3, r2
   190e8:	ands	r2, r9, r2
   190ec:	bne	19738 <__assert_fail@plt+0x8368>
   190f0:	mov	r4, #92	; 0x5c
   190f4:	mov	r3, r4
   190f8:	ldr	r1, [sp, #44]	; 0x2c
   190fc:	cmp	r1, #0
   19100:	moveq	r5, #0
   19104:	moveq	r8, r1
   19108:	beq	18fa4 <__assert_fail@plt+0x7bd4>
   1910c:	mov	r4, r3
   19110:	mov	r5, #0
   19114:	ldr	r3, [sp, #28]
   19118:	cmp	r3, #0
   1911c:	bne	19720 <__assert_fail@plt+0x8350>
   19120:	ldr	r3, [sp, #40]	; 0x28
   19124:	eor	r9, r3, #1
   19128:	and	r9, r9, r2
   1912c:	ands	r9, r9, #255	; 0xff
   19130:	beq	19174 <__assert_fail@plt+0x7da4>
   19134:	cmp	fp, r7
   19138:	movhi	r2, #39	; 0x27
   1913c:	ldrhi	r3, [sp, #32]
   19140:	str	r9, [sp, #40]	; 0x28
   19144:	strbhi	r2, [r3, r7]
   19148:	add	r3, r7, #1
   1914c:	cmp	fp, r3
   19150:	movhi	r1, #36	; 0x24
   19154:	ldrhi	r2, [sp, #32]
   19158:	strbhi	r1, [r2, r3]
   1915c:	add	r3, r7, #2
   19160:	cmp	fp, r3
   19164:	add	r7, r7, #3
   19168:	ldrhi	r2, [sp, #32]
   1916c:	movhi	r1, #39	; 0x27
   19170:	strbhi	r1, [r2, r3]
   19174:	cmp	fp, r7
   19178:	movhi	r2, #92	; 0x5c
   1917c:	ldrhi	r3, [sp, #32]
   19180:	add	sl, sl, #1
   19184:	strbhi	r2, [r3, r7]
   19188:	add	r7, r7, #1
   1918c:	b	19014 <__assert_fail@plt+0x7c44>
   19190:	ldr	r3, [sp, #152]	; 0x98
   19194:	mov	r4, #11
   19198:	sub	r2, r3, #2
   1919c:	mov	r3, #118	; 0x76
   191a0:	clz	r2, r2
   191a4:	lsr	r2, r2, #5
   191a8:	b	190f8 <__assert_fail@plt+0x7d28>
   191ac:	mov	r4, #10
   191b0:	mov	r3, #110	; 0x6e
   191b4:	ldr	r2, [sp, #152]	; 0x98
   191b8:	ldr	r1, [sp, #28]
   191bc:	sub	r2, r2, #2
   191c0:	clz	r2, r2
   191c4:	lsr	r2, r2, #5
   191c8:	ands	r1, r1, r2
   191cc:	beq	190f8 <__assert_fail@plt+0x7d28>
   191d0:	ldr	sl, [sp, #32]
   191d4:	mov	r8, fp
   191d8:	mov	r2, r1
   191dc:	mov	r3, #2
   191e0:	str	r3, [sp, #152]	; 0x98
   191e4:	ldr	r9, [sp, #44]	; 0x2c
   191e8:	ldr	r3, [sp, #152]	; 0x98
   191ec:	and	r9, r9, r2
   191f0:	tst	r9, #255	; 0xff
   191f4:	movne	r3, #4
   191f8:	str	r3, [sp, #152]	; 0x98
   191fc:	ldr	r3, [sp, #156]	; 0x9c
   19200:	mov	ip, #0
   19204:	bic	r3, r3, #2
   19208:	str	r3, [sp, #4]
   1920c:	ldr	r3, [sp, #168]	; 0xa8
   19210:	ldr	r2, [sp, #56]	; 0x38
   19214:	str	r3, [sp, #16]
   19218:	ldr	r3, [sp, #164]	; 0xa4
   1921c:	mov	r1, r8
   19220:	str	r3, [sp, #12]
   19224:	ldr	r3, [sp, #152]	; 0x98
   19228:	mov	r0, sl
   1922c:	str	r3, [sp]
   19230:	str	ip, [sp, #8]
   19234:	ldr	r3, [sp, #24]
   19238:	bl	18a20 <__assert_fail@plt+0x7650>
   1923c:	mov	fp, r0
   19240:	mov	r0, fp
   19244:	add	sp, sp, #116	; 0x74
   19248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1924c:	ldr	r3, [sp, #152]	; 0x98
   19250:	mov	r4, #8
   19254:	sub	r2, r3, #2
   19258:	mov	r3, #98	; 0x62
   1925c:	clz	r2, r2
   19260:	lsr	r2, r2, #5
   19264:	b	190f8 <__assert_fail@plt+0x7d28>
   19268:	ldr	r3, [sp, #152]	; 0x98
   1926c:	mov	r4, #7
   19270:	sub	r2, r3, #2
   19274:	mov	r3, #97	; 0x61
   19278:	clz	r2, r2
   1927c:	lsr	r2, r2, #5
   19280:	b	190f8 <__assert_fail@plt+0x7d28>
   19284:	ldr	r3, [sp, #44]	; 0x2c
   19288:	cmp	r3, #0
   1928c:	beq	19a70 <__assert_fail@plt+0x86a0>
   19290:	ldr	r3, [sp, #28]
   19294:	cmp	r3, #0
   19298:	bne	19d48 <__assert_fail@plt+0x8978>
   1929c:	ldr	r3, [sp, #152]	; 0x98
   192a0:	sub	r2, r3, #2
   192a4:	ldr	r3, [sp, #40]	; 0x28
   192a8:	clz	r2, r2
   192ac:	eor	r3, r3, #1
   192b0:	lsr	r2, r2, #5
   192b4:	ands	r3, r2, r3
   192b8:	moveq	r1, r7
   192bc:	beq	19300 <__assert_fail@plt+0x7f30>
   192c0:	cmp	fp, r7
   192c4:	movhi	r0, #39	; 0x27
   192c8:	ldrhi	r1, [sp, #32]
   192cc:	str	r3, [sp, #40]	; 0x28
   192d0:	strbhi	r0, [r1, r7]
   192d4:	add	r1, r7, #1
   192d8:	cmp	fp, r1
   192dc:	movhi	ip, #36	; 0x24
   192e0:	ldrhi	r0, [sp, #32]
   192e4:	strbhi	ip, [r0, r1]
   192e8:	add	r1, r7, #2
   192ec:	cmp	fp, r1
   192f0:	movhi	ip, #39	; 0x27
   192f4:	ldrhi	r0, [sp, #32]
   192f8:	strbhi	ip, [r0, r1]
   192fc:	add	r1, r7, #3
   19300:	cmp	fp, r1
   19304:	movhi	r0, #92	; 0x5c
   19308:	ldrhi	r3, [sp, #32]
   1930c:	add	r7, r1, #1
   19310:	strbhi	r0, [r3, r1]
   19314:	cmp	r8, #0
   19318:	beq	19c5c <__assert_fail@plt+0x888c>
   1931c:	ldr	r0, [sp, #24]
   19320:	add	r3, sl, #1
   19324:	cmp	r3, r0
   19328:	bcs	19b98 <__assert_fail@plt+0x87c8>
   1932c:	ldr	r0, [sp, #56]	; 0x38
   19330:	ldrb	r3, [r0, r3]
   19334:	sub	r3, r3, #48	; 0x30
   19338:	cmp	r3, #9
   1933c:	bhi	19b98 <__assert_fail@plt+0x87c8>
   19340:	cmp	fp, r7
   19344:	movhi	r3, #48	; 0x30
   19348:	ldrhi	r0, [sp, #32]
   1934c:	ldr	r5, [sp, #28]
   19350:	mov	r4, #48	; 0x30
   19354:	strbhi	r3, [r0, r7]
   19358:	add	r3, r1, #2
   1935c:	cmp	fp, r3
   19360:	movhi	r0, #48	; 0x30
   19364:	ldrhi	ip, [sp, #32]
   19368:	add	r7, r1, #3
   1936c:	strbhi	r0, [ip, r3]
   19370:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19374:	mov	r5, #0
   19378:	ldr	r3, [sp, #152]	; 0x98
   1937c:	sub	r2, r3, #2
   19380:	ldr	r3, [sp, #28]
   19384:	clz	r2, r2
   19388:	lsr	r2, r2, #5
   1938c:	ands	r8, r3, r2
   19390:	beq	18fa4 <__assert_fail@plt+0x7bd4>
   19394:	mov	r3, r8
   19398:	mov	r2, r3
   1939c:	mov	r3, #2
   193a0:	ldr	sl, [sp, #32]
   193a4:	mov	r8, fp
   193a8:	str	r3, [sp, #152]	; 0x98
   193ac:	b	191e4 <__assert_fail@plt+0x7e14>
   193b0:	ldr	r3, [sp, #152]	; 0x98
   193b4:	cmp	r3, #2
   193b8:	beq	19adc <__assert_fail@plt+0x870c>
   193bc:	cmp	r3, #5
   193c0:	beq	19a9c <__assert_fail@plt+0x86cc>
   193c4:	mov	r5, #0
   193c8:	sub	r2, r3, #2
   193cc:	mov	r8, r5
   193d0:	clz	r2, r2
   193d4:	mov	r4, #63	; 0x3f
   193d8:	lsr	r2, r2, #5
   193dc:	b	18fa4 <__assert_fail@plt+0x7bd4>
   193e0:	ldr	r3, [sp, #152]	; 0x98
   193e4:	cmp	r3, #2
   193e8:	beq	19afc <__assert_fail@plt+0x872c>
   193ec:	mov	r2, #0
   193f0:	str	r5, [sp, #68]	; 0x44
   193f4:	mov	r8, r2
   193f8:	mov	r4, #39	; 0x27
   193fc:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19400:	mov	r4, #13
   19404:	mov	r3, #114	; 0x72
   19408:	b	191b4 <__assert_fail@plt+0x7de4>
   1940c:	ldr	r3, [sp, #152]	; 0x98
   19410:	mov	r8, #0
   19414:	sub	r2, r3, #2
   19418:	clz	r2, r2
   1941c:	lsr	r2, r2, #5
   19420:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19424:	ldr	r3, [sp, #152]	; 0x98
   19428:	mov	r4, #12
   1942c:	sub	r2, r3, #2
   19430:	mov	r3, #102	; 0x66
   19434:	clz	r2, r2
   19438:	lsr	r2, r2, #5
   1943c:	b	190f8 <__assert_fail@plt+0x7d28>
   19440:	mov	r5, r6
   19444:	b	19378 <__assert_fail@plt+0x7fa8>
   19448:	ldr	r3, [sp, #152]	; 0x98
   1944c:	sub	r2, r3, #2
   19450:	mov	r3, #116	; 0x74
   19454:	clz	r2, r2
   19458:	lsr	r2, r2, #5
   1945c:	b	190f8 <__assert_fail@plt+0x7d28>
   19460:	ldr	r8, [sp, #76]	; 0x4c
   19464:	cmp	r8, #1
   19468:	bne	19918 <__assert_fail@plt+0x8548>
   1946c:	bl	1125c <__ctype_b_loc@plt>
   19470:	sxth	r3, r4
   19474:	mov	ip, r8
   19478:	lsl	r3, r3, #1
   1947c:	ldr	r2, [r0]
   19480:	ldrh	r3, [r2, r3]
   19484:	and	r3, r3, #16384	; 0x4000
   19488:	cmp	r3, #0
   1948c:	movne	r5, #1
   19490:	moveq	r5, #0
   19494:	moveq	r3, #1
   19498:	movne	r3, #0
   1949c:	ldr	r2, [sp, #44]	; 0x2c
   194a0:	and	r3, r3, r2
   194a4:	ands	r8, r3, #255	; 0xff
   194a8:	bne	197ac <__assert_fail@plt+0x83dc>
   194ac:	ldr	r3, [sp, #152]	; 0x98
   194b0:	sub	r2, r3, #2
   194b4:	clz	r2, r2
   194b8:	lsr	r2, r2, #5
   194bc:	b	18fa4 <__assert_fail@plt+0x7bd4>
   194c0:	ldr	r3, [sp, #56]	; 0x38
   194c4:	add	r3, r3, sl
   194c8:	str	r3, [sp, #48]	; 0x30
   194cc:	ldr	r3, [sp, #48]	; 0x30
   194d0:	mov	r6, #0
   194d4:	ldrb	r4, [r3]
   194d8:	cmp	r4, #126	; 0x7e
   194dc:	ldrls	pc, [pc, r4, lsl #2]
   194e0:	b	19460 <__assert_fail@plt+0x8090>
   194e4:	andeq	r9, r1, r4, lsl #5
   194e8:	andeq	r9, r1, r0, ror #8
   194ec:	andeq	r9, r1, r0, ror #8
   194f0:	andeq	r9, r1, r0, ror #8
   194f4:	andeq	r9, r1, r0, ror #8
   194f8:	andeq	r9, r1, r0, ror #8
   194fc:	andeq	r9, r1, r0, ror #8
   19500:	andeq	r9, r1, r8, ror #4
   19504:	andeq	r9, r1, ip, asr #4
   19508:	andeq	r9, r1, r0, ror #13
   1950c:	andeq	r9, r1, ip, lsr #3
   19510:	muleq	r1, r0, r1
   19514:	andeq	r9, r1, r4, lsr #8
   19518:	andeq	r9, r1, r0, lsl #8
   1951c:	andeq	r9, r1, r0, ror #8
   19520:	andeq	r9, r1, r0, ror #8
   19524:	andeq	r9, r1, r0, ror #8
   19528:	andeq	r9, r1, r0, ror #8
   1952c:	andeq	r9, r1, r0, ror #8
   19530:	andeq	r9, r1, r0, ror #8
   19534:	andeq	r9, r1, r0, ror #8
   19538:	andeq	r9, r1, r0, ror #8
   1953c:	andeq	r9, r1, r0, ror #8
   19540:	andeq	r9, r1, r0, ror #8
   19544:	andeq	r9, r1, r0, ror #8
   19548:	andeq	r9, r1, r0, ror #8
   1954c:	andeq	r9, r1, r0, ror #8
   19550:	andeq	r9, r1, r0, ror #8
   19554:	andeq	r9, r1, r0, ror #8
   19558:	andeq	r9, r1, r0, ror #8
   1955c:	andeq	r9, r1, r0, ror #8
   19560:	andeq	r9, r1, r0, ror #8
   19564:	andeq	r9, r1, r8, ror r3
   19568:	andeq	r9, r1, r4, ror r3
   1956c:	andeq	r9, r1, r4, ror r3
   19570:	andeq	r8, r1, r4, lsl #31
   19574:	andeq	r9, r1, r4, ror r3
   19578:	andeq	r9, r1, ip, lsl #8
   1957c:	andeq	r9, r1, r4, ror r3
   19580:	andeq	r9, r1, r0, ror #7
   19584:	andeq	r9, r1, r4, ror r3
   19588:	andeq	r9, r1, r4, ror r3
   1958c:	andeq	r9, r1, r4, ror r3
   19590:	andeq	r9, r1, ip, lsl #8
   19594:	andeq	r9, r1, ip, lsl #8
   19598:	andeq	r9, r1, ip, lsl #8
   1959c:	andeq	r9, r1, ip, lsl #8
   195a0:	andeq	r9, r1, ip, lsl #8
   195a4:	andeq	r9, r1, ip, lsl #8
   195a8:	andeq	r9, r1, ip, lsl #8
   195ac:	andeq	r9, r1, ip, lsl #8
   195b0:	andeq	r9, r1, ip, lsl #8
   195b4:	andeq	r9, r1, ip, lsl #8
   195b8:	andeq	r9, r1, ip, lsl #8
   195bc:	andeq	r9, r1, ip, lsl #8
   195c0:	andeq	r9, r1, ip, lsl #8
   195c4:	andeq	r9, r1, ip, lsl #8
   195c8:	andeq	r9, r1, ip, lsl #8
   195cc:	andeq	r9, r1, ip, lsl #8
   195d0:	andeq	r9, r1, r4, ror r3
   195d4:	andeq	r9, r1, r4, ror r3
   195d8:	andeq	r9, r1, r4, ror r3
   195dc:	andeq	r9, r1, r4, ror r3
   195e0:			; <UNDEFINED> instruction: 0x000193b0
   195e4:	andeq	r9, r1, r0, ror #8
   195e8:	andeq	r9, r1, ip, lsl #8
   195ec:	andeq	r9, r1, ip, lsl #8
   195f0:	andeq	r9, r1, ip, lsl #8
   195f4:	andeq	r9, r1, ip, lsl #8
   195f8:	andeq	r9, r1, ip, lsl #8
   195fc:	andeq	r9, r1, ip, lsl #8
   19600:	andeq	r9, r1, ip, lsl #8
   19604:	andeq	r9, r1, ip, lsl #8
   19608:	andeq	r9, r1, ip, lsl #8
   1960c:	andeq	r9, r1, ip, lsl #8
   19610:	andeq	r9, r1, ip, lsl #8
   19614:	andeq	r9, r1, ip, lsl #8
   19618:	andeq	r9, r1, ip, lsl #8
   1961c:	andeq	r9, r1, ip, lsl #8
   19620:	andeq	r9, r1, ip, lsl #8
   19624:	andeq	r9, r1, ip, lsl #8
   19628:	andeq	r9, r1, ip, lsl #8
   1962c:	andeq	r9, r1, ip, lsl #8
   19630:	andeq	r9, r1, ip, lsl #8
   19634:	andeq	r9, r1, ip, lsl #8
   19638:	andeq	r9, r1, ip, lsl #8
   1963c:	andeq	r9, r1, ip, lsl #8
   19640:	andeq	r9, r1, ip, lsl #8
   19644:	andeq	r9, r1, ip, lsl #8
   19648:	andeq	r9, r1, ip, lsl #8
   1964c:	andeq	r9, r1, ip, lsl #8
   19650:	andeq	r9, r1, r4, ror r3
   19654:	ldrdeq	r9, [r1], -r0
   19658:	andeq	r9, r1, ip, lsl #8
   1965c:	andeq	r9, r1, r4, ror r3
   19660:	andeq	r9, r1, ip, lsl #8
   19664:	andeq	r9, r1, r4, ror r3
   19668:	andeq	r9, r1, ip, lsl #8
   1966c:	andeq	r9, r1, ip, lsl #8
   19670:	andeq	r9, r1, ip, lsl #8
   19674:	andeq	r9, r1, ip, lsl #8
   19678:	andeq	r9, r1, ip, lsl #8
   1967c:	andeq	r9, r1, ip, lsl #8
   19680:	andeq	r9, r1, ip, lsl #8
   19684:	andeq	r9, r1, ip, lsl #8
   19688:	andeq	r9, r1, ip, lsl #8
   1968c:	andeq	r9, r1, ip, lsl #8
   19690:	andeq	r9, r1, ip, lsl #8
   19694:	andeq	r9, r1, ip, lsl #8
   19698:	andeq	r9, r1, ip, lsl #8
   1969c:	andeq	r9, r1, ip, lsl #8
   196a0:	andeq	r9, r1, ip, lsl #8
   196a4:	andeq	r9, r1, ip, lsl #8
   196a8:	andeq	r9, r1, ip, lsl #8
   196ac:	andeq	r9, r1, ip, lsl #8
   196b0:	andeq	r9, r1, ip, lsl #8
   196b4:	andeq	r9, r1, ip, lsl #8
   196b8:	andeq	r9, r1, ip, lsl #8
   196bc:	andeq	r9, r1, ip, lsl #8
   196c0:	andeq	r9, r1, ip, lsl #8
   196c4:	andeq	r9, r1, ip, lsl #8
   196c8:	andeq	r9, r1, ip, lsl #8
   196cc:	andeq	r9, r1, ip, lsl #8
   196d0:	andeq	r8, r1, r4, ror #30
   196d4:	andeq	r9, r1, r4, ror r3
   196d8:	andeq	r8, r1, r4, ror #30
   196dc:	andeq	r8, r1, r4, lsl #31
   196e0:	mov	r3, #116	; 0x74
   196e4:	b	191b4 <__assert_fail@plt+0x7de4>
   196e8:	ldr	r3, [sp, #160]	; 0xa0
   196ec:	cmp	r3, #0
   196f0:	beq	18fc0 <__assert_fail@plt+0x7bf0>
   196f4:	lsr	r3, r4, #5
   196f8:	ldr	r0, [sp, #160]	; 0xa0
   196fc:	uxtb	r3, r3
   19700:	and	r1, r4, #31
   19704:	ldr	r0, [r0, r3, lsl #2]
   19708:	lsr	r3, r0, r1
   1970c:	tst	r3, #1
   19710:	beq	18fc0 <__assert_fail@plt+0x7bf0>
   19714:	ldr	r3, [sp, #28]
   19718:	cmp	r3, #0
   1971c:	beq	19120 <__assert_fail@plt+0x7d50>
   19720:	ldr	sl, [sp, #32]
   19724:	mov	r8, fp
   19728:	b	191e4 <__assert_fail@plt+0x7e14>
   1972c:	ldr	r3, [sp, #28]
   19730:	cmp	r3, #0
   19734:	bne	19c88 <__assert_fail@plt+0x88b8>
   19738:	add	sl, sl, #1
   1973c:	ldr	r6, [sp, #40]	; 0x28
   19740:	mov	r5, #0
   19744:	mov	r4, #92	; 0x5c
   19748:	b	18fdc <__assert_fail@plt+0x7c0c>
   1974c:	cmp	r9, r8
   19750:	bne	199c0 <__assert_fail@plt+0x85f0>
   19754:	ldr	r0, [sp, #100]	; 0x64
   19758:	bl	1116c <iswprint@plt>
   1975c:	add	r5, r5, r4
   19760:	cmp	r0, #0
   19764:	add	r0, sp, #104	; 0x68
   19768:	moveq	r6, #0
   1976c:	bl	11100 <mbsinit@plt>
   19770:	cmp	r0, #0
   19774:	beq	19954 <__assert_fail@plt+0x8584>
   19778:	mov	r2, r6
   1977c:	mov	ip, r5
   19780:	eor	r5, r2, #1
   19784:	ldr	r4, [sp, #80]	; 0x50
   19788:	ldr	r6, [sp, #84]	; 0x54
   1978c:	ldr	r7, [sp, #88]	; 0x58
   19790:	uxtb	r5, r5
   19794:	cmp	ip, #1
   19798:	bls	19c98 <__assert_fail@plt+0x88c8>
   1979c:	ldr	r3, [sp, #44]	; 0x2c
   197a0:	and	r8, r3, r5
   197a4:	mov	r5, r2
   197a8:	uxtb	r8, r8
   197ac:	add	r2, sl, ip
   197b0:	ldr	r0, [sp, #48]	; 0x30
   197b4:	mov	r1, #0
   197b8:	str	r5, [sp, #48]	; 0x30
   197bc:	ldr	r9, [sp, #28]
   197c0:	ldr	ip, [sp, #40]	; 0x28
   197c4:	ldr	r3, [sp, #32]
   197c8:	ldr	r5, [sp, #152]	; 0x98
   197cc:	b	19888 <__assert_fail@plt+0x84b8>
   197d0:	cmp	r9, #0
   197d4:	bne	19bac <__assert_fail@plt+0x87dc>
   197d8:	eor	r1, ip, #1
   197dc:	cmp	r5, #2
   197e0:	movne	r1, #0
   197e4:	andeq	r1, r1, #1
   197e8:	cmp	r1, #0
   197ec:	beq	19824 <__assert_fail@plt+0x8454>
   197f0:	cmp	fp, r7
   197f4:	movhi	ip, #39	; 0x27
   197f8:	strbhi	ip, [r3, r7]
   197fc:	add	ip, r7, #1
   19800:	cmp	fp, ip
   19804:	movhi	lr, #36	; 0x24
   19808:	strbhi	lr, [r3, ip]
   1980c:	add	ip, r7, #2
   19810:	cmp	fp, ip
   19814:	movhi	lr, #39	; 0x27
   19818:	strbhi	lr, [r3, ip]
   1981c:	add	r7, r7, #3
   19820:	mov	ip, r1
   19824:	cmp	fp, r7
   19828:	movhi	r1, #92	; 0x5c
   1982c:	strbhi	r1, [r3, r7]
   19830:	add	r1, r7, #1
   19834:	cmp	fp, r1
   19838:	lsrhi	lr, r4, #6
   1983c:	addhi	lr, lr, #48	; 0x30
   19840:	strbhi	lr, [r3, r1]
   19844:	add	lr, r7, #2
   19848:	cmp	fp, lr
   1984c:	lsrhi	r1, r4, #3
   19850:	andhi	r1, r1, #7
   19854:	addhi	r1, r1, #48	; 0x30
   19858:	add	sl, sl, #1
   1985c:	strbhi	r1, [r3, lr]
   19860:	and	r4, r4, #7
   19864:	cmp	r2, sl
   19868:	add	r4, r4, #48	; 0x30
   1986c:	add	r7, r7, #3
   19870:	bls	19bd0 <__assert_fail@plt+0x8800>
   19874:	mov	r1, r8
   19878:	cmp	fp, r7
   1987c:	strbhi	r4, [r3, r7]
   19880:	ldrb	r4, [r0, #1]!
   19884:	add	r7, r7, #1
   19888:	cmp	r8, #0
   1988c:	bne	197d0 <__assert_fail@plt+0x8400>
   19890:	cmp	r6, #0
   19894:	bne	198e4 <__assert_fail@plt+0x8514>
   19898:	eor	r6, r1, #1
   1989c:	and	r6, r6, ip
   198a0:	add	sl, sl, #1
   198a4:	cmp	r2, sl
   198a8:	uxtb	r6, r6
   198ac:	bls	1990c <__assert_fail@plt+0x853c>
   198b0:	cmp	r6, #0
   198b4:	beq	19878 <__assert_fail@plt+0x84a8>
   198b8:	cmp	fp, r7
   198bc:	movhi	ip, #39	; 0x27
   198c0:	strbhi	ip, [r3, r7]
   198c4:	add	ip, r7, #1
   198c8:	cmp	fp, ip
   198cc:	movhi	lr, #39	; 0x27
   198d0:	strbhi	lr, [r3, ip]
   198d4:	add	r7, r7, #2
   198d8:	mov	r6, r8
   198dc:	mov	ip, r8
   198e0:	b	19878 <__assert_fail@plt+0x84a8>
   198e4:	cmp	fp, r7
   198e8:	eor	r6, r1, #1
   198ec:	movhi	lr, #92	; 0x5c
   198f0:	and	r6, r6, ip
   198f4:	add	sl, sl, #1
   198f8:	strbhi	lr, [r3, r7]
   198fc:	cmp	r2, sl
   19900:	add	r7, r7, #1
   19904:	uxtb	r6, r6
   19908:	bhi	198b0 <__assert_fail@plt+0x84e0>
   1990c:	str	ip, [sp, #40]	; 0x28
   19910:	ldr	r5, [sp, #48]	; 0x30
   19914:	b	18fdc <__assert_fail@plt+0x7c0c>
   19918:	ldr	r3, [sp, #24]
   1991c:	cmn	r3, #1
   19920:	mov	r3, #0
   19924:	str	r3, [sp, #104]	; 0x68
   19928:	str	r3, [sp, #108]	; 0x6c
   1992c:	beq	19c4c <__assert_fail@plt+0x887c>
   19930:	mov	r2, r5
   19934:	mov	r3, #0
   19938:	str	r7, [sp, #88]	; 0x58
   1993c:	ldr	r7, [sp, #152]	; 0x98
   19940:	str	r5, [sp, #92]	; 0x5c
   19944:	str	r6, [sp, #84]	; 0x54
   19948:	mov	r5, r3
   1994c:	mov	r6, r2
   19950:	str	r4, [sp, #80]	; 0x50
   19954:	ldr	r3, [sp, #56]	; 0x38
   19958:	add	r9, sl, r5
   1995c:	add	r8, r3, r9
   19960:	ldr	r3, [sp, #24]
   19964:	mov	r1, r8
   19968:	sub	r2, r3, r9
   1996c:	add	r0, sp, #100	; 0x64
   19970:	add	r3, sp, #104	; 0x68
   19974:	bl	1b9a0 <__assert_fail@plt+0xa5d0>
   19978:	subs	r4, r0, #0
   1997c:	beq	19d24 <__assert_fail@plt+0x8954>
   19980:	cmn	r4, #1
   19984:	beq	19d04 <__assert_fail@plt+0x8934>
   19988:	cmn	r4, #2
   1998c:	beq	19ca4 <__assert_fail@plt+0x88d4>
   19990:	ldr	r2, [sp, #28]
   19994:	cmp	r7, #2
   19998:	movne	r2, #0
   1999c:	andeq	r2, r2, #1
   199a0:	cmp	r2, #0
   199a4:	beq	19754 <__assert_fail@plt+0x8384>
   199a8:	cmp	r4, #1
   199ac:	beq	19754 <__assert_fail@plt+0x8384>
   199b0:	sub	r3, r4, #1
   199b4:	add	r9, r3, r9
   199b8:	ldr	r3, [sp, #56]	; 0x38
   199bc:	add	r9, r3, r9
   199c0:	ldrb	r3, [r8, #1]!
   199c4:	sub	r3, r3, #91	; 0x5b
   199c8:	cmp	r3, #33	; 0x21
   199cc:	ldrls	pc, [pc, r3, lsl #2]
   199d0:	b	1974c <__assert_fail@plt+0x837c>
   199d4:	andeq	r9, r1, ip, asr sl
   199d8:	andeq	r9, r1, ip, asr sl
   199dc:	andeq	r9, r1, ip, asr #14
   199e0:	andeq	r9, r1, ip, asr sl
   199e4:	andeq	r9, r1, ip, asr #14
   199e8:	andeq	r9, r1, ip, asr sl
   199ec:	andeq	r9, r1, ip, asr #14
   199f0:	andeq	r9, r1, ip, asr #14
   199f4:	andeq	r9, r1, ip, asr #14
   199f8:	andeq	r9, r1, ip, asr #14
   199fc:	andeq	r9, r1, ip, asr #14
   19a00:	andeq	r9, r1, ip, asr #14
   19a04:	andeq	r9, r1, ip, asr #14
   19a08:	andeq	r9, r1, ip, asr #14
   19a0c:	andeq	r9, r1, ip, asr #14
   19a10:	andeq	r9, r1, ip, asr #14
   19a14:	andeq	r9, r1, ip, asr #14
   19a18:	andeq	r9, r1, ip, asr #14
   19a1c:	andeq	r9, r1, ip, asr #14
   19a20:	andeq	r9, r1, ip, asr #14
   19a24:	andeq	r9, r1, ip, asr #14
   19a28:	andeq	r9, r1, ip, asr #14
   19a2c:	andeq	r9, r1, ip, asr #14
   19a30:	andeq	r9, r1, ip, asr #14
   19a34:	andeq	r9, r1, ip, asr #14
   19a38:	andeq	r9, r1, ip, asr #14
   19a3c:	andeq	r9, r1, ip, asr #14
   19a40:	andeq	r9, r1, ip, asr #14
   19a44:	andeq	r9, r1, ip, asr #14
   19a48:	andeq	r9, r1, ip, asr #14
   19a4c:	andeq	r9, r1, ip, asr #14
   19a50:	andeq	r9, r1, ip, asr #14
   19a54:	andeq	r9, r1, ip, asr #14
   19a58:	andeq	r9, r1, ip, asr sl
   19a5c:	mov	r3, #2
   19a60:	ldr	sl, [sp, #32]
   19a64:	mov	r8, fp
   19a68:	str	r3, [sp, #152]	; 0x98
   19a6c:	b	191e4 <__assert_fail@plt+0x7e14>
   19a70:	ldr	r3, [sp, #156]	; 0x9c
   19a74:	tst	r3, #1
   19a78:	bne	19ba4 <__assert_fail@plt+0x87d4>
   19a7c:	ldr	r3, [sp, #152]	; 0x98
   19a80:	ldr	r4, [sp, #44]	; 0x2c
   19a84:	sub	r2, r3, #2
   19a88:	mov	r5, #0
   19a8c:	clz	r2, r2
   19a90:	mov	r8, r4
   19a94:	lsr	r2, r2, #5
   19a98:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19a9c:	ldr	r3, [sp, #156]	; 0x9c
   19aa0:	ands	r9, r3, #4
   19aa4:	beq	19bdc <__assert_fail@plt+0x880c>
   19aa8:	ldr	r2, [sp, #24]
   19aac:	add	r3, sl, #2
   19ab0:	cmp	r3, r2
   19ab4:	bcs	19ac8 <__assert_fail@plt+0x86f8>
   19ab8:	ldr	r2, [sp, #48]	; 0x30
   19abc:	ldrb	r4, [r2, #1]
   19ac0:	cmp	r4, #63	; 0x3f
   19ac4:	beq	19d64 <__assert_fail@plt+0x8994>
   19ac8:	mov	r2, #0
   19acc:	mov	r8, r2
   19ad0:	mov	r5, r2
   19ad4:	mov	r4, #63	; 0x3f
   19ad8:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19adc:	ldr	r3, [sp, #28]
   19ae0:	cmp	r3, #0
   19ae4:	bne	19e08 <__assert_fail@plt+0x8a38>
   19ae8:	mov	r2, r5
   19aec:	mov	r8, r3
   19af0:	mov	r5, #0
   19af4:	mov	r4, #63	; 0x3f
   19af8:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19afc:	ldr	r3, [sp, #28]
   19b00:	cmp	r3, #0
   19b04:	bne	19e08 <__assert_fail@plt+0x8a38>
   19b08:	ldr	r2, [sp, #72]	; 0x48
   19b0c:	adds	r3, fp, #0
   19b10:	movne	r3, #1
   19b14:	cmp	r2, #0
   19b18:	movne	r3, #0
   19b1c:	cmp	r3, #0
   19b20:	strne	fp, [sp, #72]	; 0x48
   19b24:	movne	fp, #0
   19b28:	bne	19b64 <__assert_fail@plt+0x8794>
   19b2c:	cmp	fp, r7
   19b30:	movhi	r2, #39	; 0x27
   19b34:	ldrhi	r3, [sp, #32]
   19b38:	strbhi	r2, [r3, r7]
   19b3c:	add	r3, r7, #1
   19b40:	cmp	fp, r3
   19b44:	movhi	r1, #92	; 0x5c
   19b48:	ldrhi	r2, [sp, #32]
   19b4c:	strbhi	r1, [r2, r3]
   19b50:	add	r3, r7, #2
   19b54:	cmp	fp, r3
   19b58:	movhi	r1, #39	; 0x27
   19b5c:	ldrhi	r2, [sp, #32]
   19b60:	strbhi	r1, [r2, r3]
   19b64:	ldr	r3, [sp, #28]
   19b68:	add	r7, r7, #3
   19b6c:	mov	r2, r5
   19b70:	mov	r8, r3
   19b74:	str	r5, [sp, #68]	; 0x44
   19b78:	str	r3, [sp, #40]	; 0x28
   19b7c:	mov	r4, #39	; 0x27
   19b80:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19b84:	ldr	r3, [sp, #56]	; 0x38
   19b88:	ldrb	r3, [r3, #1]
   19b8c:	adds	r3, r3, #0
   19b90:	movne	r3, #1
   19b94:	b	18f7c <__assert_fail@plt+0x7bac>
   19b98:	ldr	r5, [sp, #28]
   19b9c:	mov	r4, #48	; 0x30
   19ba0:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19ba4:	add	sl, sl, #1
   19ba8:	b	18ad4 <__assert_fail@plt+0x7704>
   19bac:	mov	sl, r3
   19bb0:	ldr	r3, [sp, #28]
   19bb4:	mov	r8, fp
   19bb8:	str	r3, [sp, #44]	; 0x2c
   19bbc:	ldr	r3, [sp, #152]	; 0x98
   19bc0:	sub	r2, r3, #2
   19bc4:	clz	r2, r2
   19bc8:	lsr	r2, r2, #5
   19bcc:	b	191e4 <__assert_fail@plt+0x7e14>
   19bd0:	str	ip, [sp, #40]	; 0x28
   19bd4:	ldr	r5, [sp, #48]	; 0x30
   19bd8:	b	19014 <__assert_fail@plt+0x7c44>
   19bdc:	mov	r2, r9
   19be0:	mov	r8, r9
   19be4:	mov	r5, #0
   19be8:	mov	r4, #63	; 0x3f
   19bec:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19bf0:	cmp	fp, #0
   19bf4:	beq	19c6c <__assert_fail@plt+0x889c>
   19bf8:	ldr	r1, [sp, #32]
   19bfc:	mov	r3, #34	; 0x22
   19c00:	mov	r2, #1
   19c04:	strb	r3, [r1]
   19c08:	ldr	r3, [pc, #332]	; 19d5c <__assert_fail@plt+0x898c>
   19c0c:	str	r2, [sp, #52]	; 0x34
   19c10:	mov	r7, r2
   19c14:	str	r2, [sp, #44]	; 0x2c
   19c18:	str	r3, [sp, #64]	; 0x40
   19c1c:	b	18ac4 <__assert_fail@plt+0x76f4>
   19c20:	ldr	r3, [pc, #300]	; 19d54 <__assert_fail@plt+0x8984>
   19c24:	str	r3, [sp, #64]	; 0x40
   19c28:	mov	r3, #0
   19c2c:	str	r3, [sp, #28]
   19c30:	mov	r3, #1
   19c34:	str	r3, [sp, #52]	; 0x34
   19c38:	mov	r7, r3
   19c3c:	mov	r3, #2
   19c40:	str	r3, [sp, #152]	; 0x98
   19c44:	b	18ac4 <__assert_fail@plt+0x76f4>
   19c48:	bl	113a0 <abort@plt>
   19c4c:	ldr	r0, [sp, #56]	; 0x38
   19c50:	bl	11274 <strlen@plt>
   19c54:	str	r0, [sp, #24]
   19c58:	b	19930 <__assert_fail@plt+0x8560>
   19c5c:	mov	r5, r8
   19c60:	mov	r4, #48	; 0x30
   19c64:	ldr	r8, [sp, #44]	; 0x2c
   19c68:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19c6c:	mov	r3, #1
   19c70:	str	r3, [sp, #52]	; 0x34
   19c74:	mov	r7, r3
   19c78:	str	r3, [sp, #44]	; 0x2c
   19c7c:	ldr	r3, [pc, #216]	; 19d5c <__assert_fail@plt+0x898c>
   19c80:	str	r3, [sp, #64]	; 0x40
   19c84:	b	18ac4 <__assert_fail@plt+0x76f4>
   19c88:	ldr	sl, [sp, #32]
   19c8c:	mov	r8, fp
   19c90:	mov	r2, r3
   19c94:	b	191e4 <__assert_fail@plt+0x7e14>
   19c98:	mov	r3, r5
   19c9c:	mov	r5, r2
   19ca0:	b	1949c <__assert_fail@plt+0x80cc>
   19ca4:	ldr	r1, [sp, #24]
   19ca8:	mov	r2, r5
   19cac:	cmp	r1, r9
   19cb0:	mov	ip, r5
   19cb4:	ldr	r4, [sp, #80]	; 0x50
   19cb8:	ldr	r5, [sp, #92]	; 0x5c
   19cbc:	ldr	r6, [sp, #84]	; 0x54
   19cc0:	ldr	r7, [sp, #88]	; 0x58
   19cc4:	bls	19cf8 <__assert_fail@plt+0x8928>
   19cc8:	ldrb	r3, [r8]
   19ccc:	cmp	r3, #0
   19cd0:	bne	19ce4 <__assert_fail@plt+0x8914>
   19cd4:	b	19cfc <__assert_fail@plt+0x892c>
   19cd8:	ldrb	r3, [r8, #1]!
   19cdc:	cmp	r3, #0
   19ce0:	beq	19dfc <__assert_fail@plt+0x8a2c>
   19ce4:	add	r2, r2, #1
   19ce8:	add	r3, sl, r2
   19cec:	cmp	r1, r3
   19cf0:	bhi	19cd8 <__assert_fail@plt+0x8908>
   19cf4:	mov	ip, r2
   19cf8:	mov	r3, #0
   19cfc:	mov	r2, r3
   19d00:	b	19794 <__assert_fail@plt+0x83c4>
   19d04:	mov	r3, #0
   19d08:	mov	ip, r5
   19d0c:	ldr	r4, [sp, #80]	; 0x50
   19d10:	ldr	r5, [sp, #92]	; 0x5c
   19d14:	ldr	r6, [sp, #84]	; 0x54
   19d18:	ldr	r7, [sp, #88]	; 0x58
   19d1c:	mov	r2, r3
   19d20:	b	19794 <__assert_fail@plt+0x83c4>
   19d24:	mov	r3, r6
   19d28:	mov	ip, r5
   19d2c:	eor	r5, r3, #1
   19d30:	mov	r2, r6
   19d34:	ldr	r4, [sp, #80]	; 0x50
   19d38:	ldr	r6, [sp, #84]	; 0x54
   19d3c:	ldr	r7, [sp, #88]	; 0x58
   19d40:	uxtb	r5, r5
   19d44:	b	19794 <__assert_fail@plt+0x83c4>
   19d48:	ldr	sl, [sp, #32]
   19d4c:	mov	r8, fp
   19d50:	b	19bb8 <__assert_fail@plt+0x87e8>
   19d54:			; <UNDEFINED> instruction: 0x000201b0
   19d58:			; <UNDEFINED> instruction: 0x000201b4
   19d5c:	andeq	r0, r2, ip, lsr #3
   19d60:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   19d64:	ldr	r2, [sp, #56]	; 0x38
   19d68:	ldrb	r1, [r2, r3]
   19d6c:	sub	r2, r1, #33	; 0x21
   19d70:	uxtb	r2, r2
   19d74:	cmp	r2, #29
   19d78:	bhi	19e18 <__assert_fail@plt+0x8a48>
   19d7c:	ldr	r0, [pc, #-36]	; 19d60 <__assert_fail@plt+0x8990>
   19d80:	mov	ip, #1
   19d84:	ands	r2, r0, ip, lsl r2
   19d88:	beq	19e28 <__assert_fail@plt+0x8a58>
   19d8c:	ldr	r2, [sp, #28]
   19d90:	cmp	r2, #0
   19d94:	bne	19f28 <__assert_fail@plt+0x8b58>
   19d98:	cmp	fp, r7
   19d9c:	ldr	r8, [sp, #28]
   19da0:	ldrhi	r2, [sp, #32]
   19da4:	mov	sl, r3
   19da8:	mov	r5, r8
   19dac:	strbhi	r4, [r2, r7]
   19db0:	add	r2, r7, #1
   19db4:	cmp	fp, r2
   19db8:	movhi	r0, #34	; 0x22
   19dbc:	ldrhi	ip, [sp, #32]
   19dc0:	mov	r4, r1
   19dc4:	strbhi	r0, [ip, r2]
   19dc8:	add	r2, r7, #2
   19dcc:	cmp	fp, r2
   19dd0:	movhi	r0, #34	; 0x22
   19dd4:	ldrhi	ip, [sp, #32]
   19dd8:	strbhi	r0, [ip, r2]
   19ddc:	add	r2, r7, #3
   19de0:	cmp	fp, r2
   19de4:	movhi	r0, #63	; 0x3f
   19de8:	ldrhi	ip, [sp, #32]
   19dec:	add	r7, r7, #4
   19df0:	strbhi	r0, [ip, r2]
   19df4:	mov	r2, r8
   19df8:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19dfc:	mov	ip, r2
   19e00:	mov	r2, r3
   19e04:	b	19794 <__assert_fail@plt+0x83c4>
   19e08:	ldr	sl, [sp, #32]
   19e0c:	mov	r8, fp
   19e10:	ldr	r2, [sp, #28]
   19e14:	b	191e4 <__assert_fail@plt+0x7e14>
   19e18:	mov	r2, #0
   19e1c:	mov	r8, r2
   19e20:	mov	r5, r2
   19e24:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19e28:	mov	r8, r2
   19e2c:	mov	r5, #0
   19e30:	b	18fa4 <__assert_fail@plt+0x7bd4>
   19e34:	ldr	r1, [sp, #152]	; 0x98
   19e38:	bl	18900 <__assert_fail@plt+0x7530>
   19e3c:	str	r0, [sp, #168]	; 0xa8
   19e40:	b	18e60 <__assert_fail@plt+0x7a90>
   19e44:	ldr	r1, [sp, #152]	; 0x98
   19e48:	bl	18900 <__assert_fail@plt+0x7530>
   19e4c:	str	r0, [sp, #164]	; 0xa4
   19e50:	b	18e40 <__assert_fail@plt+0x7a70>
   19e54:	ldr	r7, [sp, #28]
   19e58:	b	18ea0 <__assert_fail@plt+0x7ad0>
   19e5c:	ldr	sl, [sp, #32]
   19e60:	ldr	r2, [sp, #68]	; 0x44
   19e64:	mov	r8, fp
   19e68:	mov	fp, r7
   19e6c:	ldr	r3, [sp, #64]	; 0x40
   19e70:	cmp	r3, #0
   19e74:	moveq	r2, #0
   19e78:	andne	r2, r2, #1
   19e7c:	cmp	r2, #0
   19e80:	beq	19eac <__assert_fail@plt+0x8adc>
   19e84:	mov	r2, r3
   19e88:	ldrb	r3, [r3]
   19e8c:	cmp	r3, #0
   19e90:	beq	19eac <__assert_fail@plt+0x8adc>
   19e94:	cmp	r8, fp
   19e98:	strbhi	r3, [sl, fp]
   19e9c:	ldrb	r3, [r2, #1]!
   19ea0:	add	fp, fp, #1
   19ea4:	cmp	r3, #0
   19ea8:	bne	19e94 <__assert_fail@plt+0x8ac4>
   19eac:	cmp	r8, fp
   19eb0:	movhi	r3, #0
   19eb4:	strbhi	r3, [sl, fp]
   19eb8:	b	19240 <__assert_fail@plt+0x7e70>
   19ebc:	ldr	r3, [sp, #168]	; 0xa8
   19ec0:	ldr	sl, [sp, #32]
   19ec4:	str	r3, [sp, #16]
   19ec8:	ldr	r3, [sp, #164]	; 0xa4
   19ecc:	mov	ip, #5
   19ed0:	str	r3, [sp, #12]
   19ed4:	ldr	r3, [sp, #160]	; 0xa0
   19ed8:	ldr	r2, [sp, #56]	; 0x38
   19edc:	str	r3, [sp, #8]
   19ee0:	ldr	r3, [sp, #156]	; 0x9c
   19ee4:	ldr	r1, [sp, #72]	; 0x48
   19ee8:	str	r3, [sp, #4]
   19eec:	mov	r0, sl
   19ef0:	ldr	r3, [sp, #24]
   19ef4:	str	ip, [sp]
   19ef8:	bl	18a20 <__assert_fail@plt+0x7650>
   19efc:	mov	fp, r0
   19f00:	b	19240 <__assert_fail@plt+0x7e70>
   19f04:	mov	r8, fp
   19f08:	ldr	sl, [sp, #32]
   19f0c:	mov	fp, r7
   19f10:	mov	r2, r3
   19f14:	b	19e6c <__assert_fail@plt+0x8a9c>
   19f18:	mov	r8, fp
   19f1c:	ldr	sl, [sp, #32]
   19f20:	mov	fp, r7
   19f24:	b	19e6c <__assert_fail@plt+0x8a9c>
   19f28:	ldr	sl, [sp, #32]
   19f2c:	mov	r8, fp
   19f30:	b	191fc <__assert_fail@plt+0x7e2c>
   19f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f38:	sub	sp, sp, #52	; 0x34
   19f3c:	mov	r4, r0
   19f40:	mov	r5, r3
   19f44:	mov	sl, r1
   19f48:	mov	fp, r2
   19f4c:	bl	11298 <__errno_location@plt>
   19f50:	ldr	r7, [pc, #412]	; 1a0f4 <__assert_fail@plt+0x8d24>
   19f54:	cmn	r4, #-2147483647	; 0x80000001
   19f58:	ldr	r6, [r7]
   19f5c:	mov	r8, r0
   19f60:	movne	r0, #0
   19f64:	moveq	r0, #1
   19f68:	ldr	r3, [r8]
   19f6c:	orrs	r0, r0, r4, lsr #31
   19f70:	str	r3, [sp, #24]
   19f74:	bne	1a0f0 <__assert_fail@plt+0x8d20>
   19f78:	ldr	r2, [r7, #4]
   19f7c:	cmp	r4, r2
   19f80:	blt	19fe0 <__assert_fail@plt+0x8c10>
   19f84:	add	r9, r7, #8
   19f88:	cmp	r6, r9
   19f8c:	str	r2, [sp, #44]	; 0x2c
   19f90:	beq	1a0c0 <__assert_fail@plt+0x8cf0>
   19f94:	mov	r3, #8
   19f98:	sub	r2, r4, r2
   19f9c:	mov	r0, r6
   19fa0:	str	r3, [sp]
   19fa4:	add	r2, r2, #1
   19fa8:	mvn	r3, #-2147483648	; 0x80000000
   19fac:	add	r1, sp, #44	; 0x2c
   19fb0:	bl	1b22c <__assert_fail@plt+0x9e5c>
   19fb4:	mov	r6, r0
   19fb8:	str	r0, [r7]
   19fbc:	ldr	r0, [r7, #4]
   19fc0:	ldr	r2, [sp, #44]	; 0x2c
   19fc4:	mov	r1, #0
   19fc8:	sub	r2, r2, r0
   19fcc:	add	r0, r6, r0, lsl #3
   19fd0:	lsl	r2, r2, #3
   19fd4:	bl	112c8 <memset@plt>
   19fd8:	ldr	r3, [sp, #44]	; 0x2c
   19fdc:	str	r3, [r7, #4]
   19fe0:	add	r3, r6, r4, lsl #3
   19fe4:	ldr	r1, [r5, #4]
   19fe8:	ldr	r7, [r3, #4]
   19fec:	ldr	r9, [r6, r4, lsl #3]
   19ff0:	ldr	r2, [r5, #40]	; 0x28
   19ff4:	ldr	ip, [r5, #44]	; 0x2c
   19ff8:	add	r0, r5, #8
   19ffc:	str	r3, [sp, #28]
   1a000:	ldr	r3, [r5]
   1a004:	orr	r1, r1, #1
   1a008:	mov	lr, r0
   1a00c:	str	r1, [sp, #32]
   1a010:	str	r0, [sp, #36]	; 0x24
   1a014:	str	r1, [sp, #4]
   1a018:	str	r2, [sp, #12]
   1a01c:	str	r3, [sp]
   1a020:	mov	r0, r7
   1a024:	mov	r1, r9
   1a028:	str	ip, [sp, #16]
   1a02c:	str	lr, [sp, #8]
   1a030:	mov	r3, fp
   1a034:	mov	r2, sl
   1a038:	bl	18a20 <__assert_fail@plt+0x7650>
   1a03c:	cmp	r9, r0
   1a040:	bhi	1a0ac <__assert_fail@plt+0x8cdc>
   1a044:	ldr	r3, [pc, #172]	; 1a0f8 <__assert_fail@plt+0x8d28>
   1a048:	add	r9, r0, #1
   1a04c:	cmp	r7, r3
   1a050:	str	r9, [r6, r4, lsl #3]
   1a054:	beq	1a060 <__assert_fail@plt+0x8c90>
   1a058:	mov	r0, r7
   1a05c:	bl	1b874 <__assert_fail@plt+0xa4a4>
   1a060:	mov	r0, r9
   1a064:	bl	1b0c8 <__assert_fail@plt+0x9cf8>
   1a068:	ldr	lr, [sp, #28]
   1a06c:	ldr	ip, [r5, #44]	; 0x2c
   1a070:	ldr	r4, [r5, #40]	; 0x28
   1a074:	mov	r3, fp
   1a078:	mov	r2, sl
   1a07c:	mov	r1, r9
   1a080:	str	r0, [lr, #4]
   1a084:	ldr	lr, [r5]
   1a088:	ldr	r5, [sp, #36]	; 0x24
   1a08c:	str	ip, [sp, #16]
   1a090:	str	r5, [sp, #8]
   1a094:	ldr	r5, [sp, #32]
   1a098:	str	r4, [sp, #12]
   1a09c:	str	r5, [sp, #4]
   1a0a0:	str	lr, [sp]
   1a0a4:	mov	r7, r0
   1a0a8:	bl	18a20 <__assert_fail@plt+0x7650>
   1a0ac:	ldr	r3, [sp, #24]
   1a0b0:	mov	r0, r7
   1a0b4:	str	r3, [r8]
   1a0b8:	add	sp, sp, #52	; 0x34
   1a0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0c0:	mov	r3, #8
   1a0c4:	sub	r2, r4, r2
   1a0c8:	str	r3, [sp]
   1a0cc:	add	r1, sp, #44	; 0x2c
   1a0d0:	add	r2, r2, #1
   1a0d4:	mvn	r3, #-2147483648	; 0x80000000
   1a0d8:	bl	1b22c <__assert_fail@plt+0x9e5c>
   1a0dc:	mov	r6, r0
   1a0e0:	ldm	r9, {r0, r1}
   1a0e4:	str	r6, [r7]
   1a0e8:	stm	r6, {r0, r1}
   1a0ec:	b	19fbc <__assert_fail@plt+0x8bec>
   1a0f0:	bl	113a0 <abort@plt>
   1a0f4:	andeq	r1, r3, ip, asr #2
   1a0f8:	ldrdeq	r1, [r3], -ip
   1a0fc:	push	{r4, r5, r6, lr}
   1a100:	mov	r5, r0
   1a104:	bl	11298 <__errno_location@plt>
   1a108:	cmp	r5, #0
   1a10c:	mov	r1, #48	; 0x30
   1a110:	mov	r4, r0
   1a114:	ldr	r0, [pc, #16]	; 1a12c <__assert_fail@plt+0x8d5c>
   1a118:	ldr	r6, [r4]
   1a11c:	movne	r0, r5
   1a120:	bl	1b528 <__assert_fail@plt+0xa158>
   1a124:	str	r6, [r4]
   1a128:	pop	{r4, r5, r6, pc}
   1a12c:	ldrdeq	r1, [r3], -ip
   1a130:	ldr	r3, [pc, #12]	; 1a144 <__assert_fail@plt+0x8d74>
   1a134:	cmp	r0, #0
   1a138:	moveq	r0, r3
   1a13c:	ldr	r0, [r0]
   1a140:	bx	lr
   1a144:	ldrdeq	r1, [r3], -ip
   1a148:	ldr	r3, [pc, #12]	; 1a15c <__assert_fail@plt+0x8d8c>
   1a14c:	cmp	r0, #0
   1a150:	moveq	r0, r3
   1a154:	str	r1, [r0]
   1a158:	bx	lr
   1a15c:	ldrdeq	r1, [r3], -ip
   1a160:	ldr	r3, [pc, #52]	; 1a19c <__assert_fail@plt+0x8dcc>
   1a164:	cmp	r0, #0
   1a168:	moveq	r0, r3
   1a16c:	add	r3, r0, #8
   1a170:	push	{lr}		; (str lr, [sp, #-4]!)
   1a174:	lsr	lr, r1, #5
   1a178:	and	r1, r1, #31
   1a17c:	ldr	ip, [r3, lr, lsl #2]
   1a180:	lsr	r0, ip, r1
   1a184:	eor	r2, r2, r0
   1a188:	and	r2, r2, #1
   1a18c:	and	r0, r0, #1
   1a190:	eor	r1, ip, r2, lsl r1
   1a194:	str	r1, [r3, lr, lsl #2]
   1a198:	pop	{pc}		; (ldr pc, [sp], #4)
   1a19c:	ldrdeq	r1, [r3], -ip
   1a1a0:	ldr	r3, [pc, #16]	; 1a1b8 <__assert_fail@plt+0x8de8>
   1a1a4:	cmp	r0, #0
   1a1a8:	movne	r3, r0
   1a1ac:	ldr	r0, [r3, #4]
   1a1b0:	str	r1, [r3, #4]
   1a1b4:	bx	lr
   1a1b8:	ldrdeq	r1, [r3], -ip
   1a1bc:	ldr	r3, [pc, #44]	; 1a1f0 <__assert_fail@plt+0x8e20>
   1a1c0:	cmp	r0, #0
   1a1c4:	moveq	r0, r3
   1a1c8:	mov	ip, #10
   1a1cc:	cmp	r2, #0
   1a1d0:	cmpne	r1, #0
   1a1d4:	str	ip, [r0]
   1a1d8:	beq	1a1e8 <__assert_fail@plt+0x8e18>
   1a1dc:	str	r1, [r0, #40]	; 0x28
   1a1e0:	str	r2, [r0, #44]	; 0x2c
   1a1e4:	bx	lr
   1a1e8:	push	{r4, lr}
   1a1ec:	bl	113a0 <abort@plt>
   1a1f0:	ldrdeq	r1, [r3], -ip
   1a1f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a1f8:	sub	sp, sp, #24
   1a1fc:	ldr	ip, [pc, #108]	; 1a270 <__assert_fail@plt+0x8ea0>
   1a200:	ldr	r4, [sp, #56]	; 0x38
   1a204:	mov	r9, r2
   1a208:	cmp	r4, #0
   1a20c:	moveq	r4, ip
   1a210:	mov	sl, r3
   1a214:	mov	r7, r0
   1a218:	mov	r8, r1
   1a21c:	bl	11298 <__errno_location@plt>
   1a220:	ldr	r3, [r4, #44]	; 0x2c
   1a224:	mov	r1, r8
   1a228:	ldr	r6, [r0]
   1a22c:	str	r3, [sp, #16]
   1a230:	ldr	r2, [r4, #40]	; 0x28
   1a234:	add	r3, r4, #8
   1a238:	str	r3, [sp, #8]
   1a23c:	str	r2, [sp, #12]
   1a240:	ldr	r2, [r4, #4]
   1a244:	mov	r5, r0
   1a248:	str	r2, [sp, #4]
   1a24c:	ldr	ip, [r4]
   1a250:	mov	r3, sl
   1a254:	mov	r2, r9
   1a258:	mov	r0, r7
   1a25c:	str	ip, [sp]
   1a260:	bl	18a20 <__assert_fail@plt+0x7650>
   1a264:	str	r6, [r5]
   1a268:	add	sp, sp, #24
   1a26c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a270:	ldrdeq	r1, [r3], -ip
   1a274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a278:	cmp	r3, #0
   1a27c:	sub	sp, sp, #44	; 0x2c
   1a280:	ldr	r4, [pc, #192]	; 1a348 <__assert_fail@plt+0x8f78>
   1a284:	mov	r6, r2
   1a288:	movne	r4, r3
   1a28c:	mov	r9, r1
   1a290:	mov	r8, r0
   1a294:	bl	11298 <__errno_location@plt>
   1a298:	ldr	r3, [r4, #44]	; 0x2c
   1a29c:	ldr	r5, [r4, #4]
   1a2a0:	add	sl, r4, #8
   1a2a4:	cmp	r6, #0
   1a2a8:	orreq	r5, r5, #1
   1a2ac:	mov	r1, #0
   1a2b0:	ldr	r2, [r0]
   1a2b4:	str	r3, [sp, #16]
   1a2b8:	ldr	r3, [r4, #40]	; 0x28
   1a2bc:	stmib	sp, {r5, sl}
   1a2c0:	str	r3, [sp, #12]
   1a2c4:	ldr	r3, [r4]
   1a2c8:	mov	r7, r0
   1a2cc:	str	r2, [sp, #28]
   1a2d0:	str	r3, [sp]
   1a2d4:	mov	r2, r8
   1a2d8:	mov	r3, r9
   1a2dc:	mov	r0, r1
   1a2e0:	bl	18a20 <__assert_fail@plt+0x7650>
   1a2e4:	add	r1, r0, #1
   1a2e8:	mov	fp, r0
   1a2ec:	mov	r0, r1
   1a2f0:	str	r1, [sp, #36]	; 0x24
   1a2f4:	bl	1b0c8 <__assert_fail@plt+0x9cf8>
   1a2f8:	ldr	r3, [r4, #44]	; 0x2c
   1a2fc:	mov	r2, r8
   1a300:	str	r3, [sp, #16]
   1a304:	ldr	r3, [r4, #40]	; 0x28
   1a308:	str	r5, [sp, #4]
   1a30c:	str	r3, [sp, #12]
   1a310:	str	sl, [sp, #8]
   1a314:	ldr	ip, [r4]
   1a318:	ldr	r1, [sp, #36]	; 0x24
   1a31c:	mov	r3, r9
   1a320:	str	ip, [sp]
   1a324:	str	r0, [sp, #32]
   1a328:	bl	18a20 <__assert_fail@plt+0x7650>
   1a32c:	ldr	r2, [sp, #28]
   1a330:	cmp	r6, #0
   1a334:	str	r2, [r7]
   1a338:	ldr	r0, [sp, #32]
   1a33c:	strne	fp, [r6]
   1a340:	add	sp, sp, #44	; 0x2c
   1a344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a348:	ldrdeq	r1, [r3], -ip
   1a34c:	mov	r3, r2
   1a350:	mov	r2, #0
   1a354:	b	1a274 <__assert_fail@plt+0x8ea4>
   1a358:	push	{r4, r5, r6, r7, r8, lr}
   1a35c:	ldr	r6, [pc, #116]	; 1a3d8 <__assert_fail@plt+0x9008>
   1a360:	ldr	r3, [r6, #4]
   1a364:	ldr	r7, [r6]
   1a368:	cmp	r3, #1
   1a36c:	movgt	r5, r7
   1a370:	movgt	r4, #1
   1a374:	ble	1a394 <__assert_fail@plt+0x8fc4>
   1a378:	ldr	r0, [r5, #12]
   1a37c:	bl	1b874 <__assert_fail@plt+0xa4a4>
   1a380:	ldr	r3, [r6, #4]
   1a384:	add	r4, r4, #1
   1a388:	cmp	r3, r4
   1a38c:	add	r5, r5, #8
   1a390:	bgt	1a378 <__assert_fail@plt+0x8fa8>
   1a394:	ldr	r0, [r7, #4]
   1a398:	ldr	r4, [pc, #60]	; 1a3dc <__assert_fail@plt+0x900c>
   1a39c:	cmp	r0, r4
   1a3a0:	beq	1a3b4 <__assert_fail@plt+0x8fe4>
   1a3a4:	bl	1b874 <__assert_fail@plt+0xa4a4>
   1a3a8:	mov	r3, #256	; 0x100
   1a3ac:	str	r4, [r6, #12]
   1a3b0:	str	r3, [r6, #8]
   1a3b4:	ldr	r4, [pc, #36]	; 1a3e0 <__assert_fail@plt+0x9010>
   1a3b8:	cmp	r7, r4
   1a3bc:	beq	1a3cc <__assert_fail@plt+0x8ffc>
   1a3c0:	mov	r0, r7
   1a3c4:	bl	1b874 <__assert_fail@plt+0xa4a4>
   1a3c8:	str	r4, [r6]
   1a3cc:	mov	r3, #1
   1a3d0:	str	r3, [r6, #4]
   1a3d4:	pop	{r4, r5, r6, r7, r8, pc}
   1a3d8:	andeq	r1, r3, ip, asr #2
   1a3dc:	ldrdeq	r1, [r3], -ip
   1a3e0:	andeq	r1, r3, r4, asr r1
   1a3e4:	ldr	r3, [pc, #4]	; 1a3f0 <__assert_fail@plt+0x9020>
   1a3e8:	mvn	r2, #0
   1a3ec:	b	19f34 <__assert_fail@plt+0x8b64>
   1a3f0:	ldrdeq	r1, [r3], -ip
   1a3f4:	ldr	r3, [pc]	; 1a3fc <__assert_fail@plt+0x902c>
   1a3f8:	b	19f34 <__assert_fail@plt+0x8b64>
   1a3fc:	ldrdeq	r1, [r3], -ip
   1a400:	mov	r1, r0
   1a404:	ldr	r3, [pc, #8]	; 1a414 <__assert_fail@plt+0x9044>
   1a408:	mvn	r2, #0
   1a40c:	mov	r0, #0
   1a410:	b	19f34 <__assert_fail@plt+0x8b64>
   1a414:	ldrdeq	r1, [r3], -ip
   1a418:	mov	r2, r1
   1a41c:	ldr	r3, [pc, #8]	; 1a42c <__assert_fail@plt+0x905c>
   1a420:	mov	r1, r0
   1a424:	mov	r0, #0
   1a428:	b	19f34 <__assert_fail@plt+0x8b64>
   1a42c:	ldrdeq	r1, [r3], -ip
   1a430:	push	{r4, r5, lr}
   1a434:	sub	sp, sp, #52	; 0x34
   1a438:	mov	r5, r2
   1a43c:	mov	r4, r0
   1a440:	mov	r0, sp
   1a444:	bl	188d0 <__assert_fail@plt+0x7500>
   1a448:	mov	r3, sp
   1a44c:	mov	r1, r5
   1a450:	mov	r0, r4
   1a454:	mvn	r2, #0
   1a458:	bl	19f34 <__assert_fail@plt+0x8b64>
   1a45c:	add	sp, sp, #52	; 0x34
   1a460:	pop	{r4, r5, pc}
   1a464:	push	{r4, r5, r6, lr}
   1a468:	sub	sp, sp, #48	; 0x30
   1a46c:	mov	r5, r2
   1a470:	mov	r6, r3
   1a474:	mov	r4, r0
   1a478:	mov	r0, sp
   1a47c:	bl	188d0 <__assert_fail@plt+0x7500>
   1a480:	mov	r3, sp
   1a484:	mov	r2, r6
   1a488:	mov	r1, r5
   1a48c:	mov	r0, r4
   1a490:	bl	19f34 <__assert_fail@plt+0x8b64>
   1a494:	add	sp, sp, #48	; 0x30
   1a498:	pop	{r4, r5, r6, pc}
   1a49c:	mov	r2, r1
   1a4a0:	mov	r1, r0
   1a4a4:	mov	r0, #0
   1a4a8:	b	1a430 <__assert_fail@plt+0x9060>
   1a4ac:	mov	r3, r2
   1a4b0:	mov	r2, r1
   1a4b4:	mov	r1, r0
   1a4b8:	mov	r0, #0
   1a4bc:	b	1a464 <__assert_fail@plt+0x9094>
   1a4c0:	push	{r4, r5, r6, r7, r8, lr}
   1a4c4:	mov	r7, r0
   1a4c8:	ldr	lr, [pc, #100]	; 1a534 <__assert_fail@plt+0x9164>
   1a4cc:	mov	r8, r1
   1a4d0:	mov	r4, r2
   1a4d4:	ldm	lr!, {r0, r1, r2, r3}
   1a4d8:	sub	sp, sp, #48	; 0x30
   1a4dc:	mov	ip, sp
   1a4e0:	lsr	r5, r4, #5
   1a4e4:	stmia	ip!, {r0, r1, r2, r3}
   1a4e8:	add	r6, sp, #8
   1a4ec:	ldm	lr!, {r0, r1, r2, r3}
   1a4f0:	and	r4, r4, #31
   1a4f4:	stmia	ip!, {r0, r1, r2, r3}
   1a4f8:	ldm	lr, {r0, r1, r2, r3}
   1a4fc:	stm	ip, {r0, r1, r2, r3}
   1a500:	mov	r2, r8
   1a504:	ldr	lr, [r6, r5, lsl #2]
   1a508:	mov	r1, r7
   1a50c:	mov	r3, sp
   1a510:	lsr	ip, lr, r4
   1a514:	eor	ip, ip, #1
   1a518:	and	ip, ip, #1
   1a51c:	mov	r0, #0
   1a520:	eor	r4, lr, ip, lsl r4
   1a524:	str	r4, [r6, r5, lsl #2]
   1a528:	bl	19f34 <__assert_fail@plt+0x8b64>
   1a52c:	add	sp, sp, #48	; 0x30
   1a530:	pop	{r4, r5, r6, r7, r8, pc}
   1a534:	ldrdeq	r1, [r3], -ip
   1a538:	mov	r2, r1
   1a53c:	mvn	r1, #0
   1a540:	b	1a4c0 <__assert_fail@plt+0x90f0>
   1a544:	mov	r2, #58	; 0x3a
   1a548:	mvn	r1, #0
   1a54c:	b	1a4c0 <__assert_fail@plt+0x90f0>
   1a550:	mov	r2, #58	; 0x3a
   1a554:	b	1a4c0 <__assert_fail@plt+0x90f0>
   1a558:	push	{r4, r5, r6, r7, lr}
   1a55c:	sub	sp, sp, #100	; 0x64
   1a560:	mov	r6, r0
   1a564:	mov	r0, sp
   1a568:	mov	r7, r2
   1a56c:	bl	188d0 <__assert_fail@plt+0x7500>
   1a570:	mov	ip, sp
   1a574:	add	lr, sp, #48	; 0x30
   1a578:	ldm	ip!, {r0, r1, r2, r3}
   1a57c:	stmia	lr!, {r0, r1, r2, r3}
   1a580:	ldm	ip!, {r0, r1, r2, r3}
   1a584:	ldr	r5, [sp, #60]	; 0x3c
   1a588:	stmia	lr!, {r0, r1, r2, r3}
   1a58c:	mvn	r4, r5
   1a590:	ldm	ip, {r0, r1, r2, r3}
   1a594:	and	ip, r4, #67108864	; 0x4000000
   1a598:	eor	ip, ip, r5
   1a59c:	str	ip, [sp, #60]	; 0x3c
   1a5a0:	stm	lr, {r0, r1, r2, r3}
   1a5a4:	mov	r1, r7
   1a5a8:	mov	r0, r6
   1a5ac:	add	r3, sp, #48	; 0x30
   1a5b0:	mvn	r2, #0
   1a5b4:	bl	19f34 <__assert_fail@plt+0x8b64>
   1a5b8:	add	sp, sp, #100	; 0x64
   1a5bc:	pop	{r4, r5, r6, r7, pc}
   1a5c0:	push	{r4, r5, r6, r7, r8, lr}
   1a5c4:	mov	r5, r1
   1a5c8:	ldr	lr, [pc, #100]	; 1a634 <__assert_fail@plt+0x9264>
   1a5cc:	mov	r4, r2
   1a5d0:	mov	r7, r0
   1a5d4:	mov	r8, r3
   1a5d8:	ldm	lr!, {r0, r1, r2, r3}
   1a5dc:	sub	sp, sp, #48	; 0x30
   1a5e0:	mov	ip, sp
   1a5e4:	mov	r6, #10
   1a5e8:	stmia	ip!, {r0, r1, r2, r3}
   1a5ec:	cmp	r4, #0
   1a5f0:	cmpne	r5, #0
   1a5f4:	ldm	lr!, {r0, r1, r2, r3}
   1a5f8:	str	r6, [sp]
   1a5fc:	stmia	ip!, {r0, r1, r2, r3}
   1a600:	ldm	lr, {r0, r1, r2, r3}
   1a604:	stm	ip, {r0, r1, r2, r3}
   1a608:	beq	1a630 <__assert_fail@plt+0x9260>
   1a60c:	mov	r3, sp
   1a610:	mov	r1, r8
   1a614:	mov	r0, r7
   1a618:	ldr	r2, [sp, #72]	; 0x48
   1a61c:	str	r5, [sp, #40]	; 0x28
   1a620:	str	r4, [sp, #44]	; 0x2c
   1a624:	bl	19f34 <__assert_fail@plt+0x8b64>
   1a628:	add	sp, sp, #48	; 0x30
   1a62c:	pop	{r4, r5, r6, r7, r8, pc}
   1a630:	bl	113a0 <abort@plt>
   1a634:	ldrdeq	r1, [r3], -ip
   1a638:	push	{lr}		; (str lr, [sp, #-4]!)
   1a63c:	sub	sp, sp, #12
   1a640:	mvn	ip, #0
   1a644:	str	ip, [sp]
   1a648:	bl	1a5c0 <__assert_fail@plt+0x91f0>
   1a64c:	add	sp, sp, #12
   1a650:	pop	{pc}		; (ldr pc, [sp], #4)
   1a654:	push	{lr}		; (str lr, [sp, #-4]!)
   1a658:	sub	sp, sp, #12
   1a65c:	mvn	ip, #0
   1a660:	mov	r3, r2
   1a664:	str	ip, [sp]
   1a668:	mov	r2, r1
   1a66c:	mov	r1, r0
   1a670:	mov	r0, #0
   1a674:	bl	1a5c0 <__assert_fail@plt+0x91f0>
   1a678:	add	sp, sp, #12
   1a67c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a680:	push	{lr}		; (str lr, [sp, #-4]!)
   1a684:	sub	sp, sp, #12
   1a688:	str	r3, [sp]
   1a68c:	mov	r3, r2
   1a690:	mov	r2, r1
   1a694:	mov	r1, r0
   1a698:	mov	r0, #0
   1a69c:	bl	1a5c0 <__assert_fail@plt+0x91f0>
   1a6a0:	add	sp, sp, #12
   1a6a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6a8:	ldr	r3, [pc]	; 1a6b0 <__assert_fail@plt+0x92e0>
   1a6ac:	b	19f34 <__assert_fail@plt+0x8b64>
   1a6b0:	andeq	r1, r3, ip, asr r1
   1a6b4:	mov	r2, r1
   1a6b8:	ldr	r3, [pc, #8]	; 1a6c8 <__assert_fail@plt+0x92f8>
   1a6bc:	mov	r1, r0
   1a6c0:	mov	r0, #0
   1a6c4:	b	19f34 <__assert_fail@plt+0x8b64>
   1a6c8:	andeq	r1, r3, ip, asr r1
   1a6cc:	ldr	r3, [pc, #4]	; 1a6d8 <__assert_fail@plt+0x9308>
   1a6d0:	mvn	r2, #0
   1a6d4:	b	19f34 <__assert_fail@plt+0x8b64>
   1a6d8:	andeq	r1, r3, ip, asr r1
   1a6dc:	mov	r1, r0
   1a6e0:	ldr	r3, [pc, #8]	; 1a6f0 <__assert_fail@plt+0x9320>
   1a6e4:	mvn	r2, #0
   1a6e8:	mov	r0, #0
   1a6ec:	b	19f34 <__assert_fail@plt+0x8b64>
   1a6f0:	andeq	r1, r3, ip, asr r1
   1a6f4:	push	{r4, lr}
   1a6f8:	ldrb	r3, [r0, #4]
   1a6fc:	cmp	r3, #0
   1a700:	bne	1a71c <__assert_fail@plt+0x934c>
   1a704:	ldr	r0, [pc, #52]	; 1a740 <__assert_fail@plt+0x9370>
   1a708:	bl	1137c <unsetenv@plt>
   1a70c:	cmp	r0, #0
   1a710:	beq	1a734 <__assert_fail@plt+0x9364>
   1a714:	mov	r0, #0
   1a718:	pop	{r4, pc}
   1a71c:	add	r1, r0, #5
   1a720:	mov	r2, #1
   1a724:	ldr	r0, [pc, #20]	; 1a740 <__assert_fail@plt+0x9370>
   1a728:	bl	1128c <setenv@plt>
   1a72c:	cmp	r0, #0
   1a730:	bne	1a714 <__assert_fail@plt+0x9344>
   1a734:	bl	11178 <tzset@plt>
   1a738:	mov	r0, #1
   1a73c:	pop	{r4, pc}
   1a740:	andeq	pc, r1, ip, lsl #28
   1a744:	cmp	r0, #1
   1a748:	push	{r4, r5, r6, r7, r8, lr}
   1a74c:	mov	r4, r0
   1a750:	moveq	r7, r0
   1a754:	beq	1a794 <__assert_fail@plt+0x93c4>
   1a758:	bl	11298 <__errno_location@plt>
   1a75c:	mov	r6, r0
   1a760:	mov	r0, r4
   1a764:	ldr	r8, [r6]
   1a768:	bl	1a6f4 <__assert_fail@plt+0x9324>
   1a76c:	subs	r7, r0, #0
   1a770:	ldreq	r8, [r6]
   1a774:	cmp	r4, #0
   1a778:	beq	1a790 <__assert_fail@plt+0x93c0>
   1a77c:	ldr	r5, [r4]
   1a780:	mov	r0, r4
   1a784:	bl	1b874 <__assert_fail@plt+0xa4a4>
   1a788:	subs	r4, r5, #0
   1a78c:	bne	1a77c <__assert_fail@plt+0x93ac>
   1a790:	str	r8, [r6]
   1a794:	mov	r0, r7
   1a798:	pop	{r4, r5, r6, r7, r8, pc}
   1a79c:	push	{r4, r5, r6, r7, r8, lr}
   1a7a0:	subs	r7, r0, #0
   1a7a4:	beq	1a800 <__assert_fail@plt+0x9430>
   1a7a8:	bl	11274 <strlen@plt>
   1a7ac:	add	r5, r0, #1
   1a7b0:	cmp	r5, #58	; 0x3a
   1a7b4:	addhi	r0, r0, #10
   1a7b8:	bichi	r0, r0, #3
   1a7bc:	movls	r0, #64	; 0x40
   1a7c0:	bl	1b670 <__assert_fail@plt+0xa2a0>
   1a7c4:	subs	r4, r0, #0
   1a7c8:	beq	1a7f8 <__assert_fail@plt+0x9428>
   1a7cc:	mov	r3, r4
   1a7d0:	mov	r6, #0
   1a7d4:	mov	r2, #1
   1a7d8:	strb	r2, [r4, #4]
   1a7dc:	str	r6, [r4]
   1a7e0:	mov	r1, r7
   1a7e4:	strb	r6, [r3, #5]!
   1a7e8:	mov	r2, r5
   1a7ec:	mov	r0, r3
   1a7f0:	bl	110f4 <memcpy@plt>
   1a7f4:	strb	r6, [r0, r5]
   1a7f8:	mov	r0, r4
   1a7fc:	pop	{r4, r5, r6, r7, r8, pc}
   1a800:	mov	r0, #64	; 0x40
   1a804:	bl	1b670 <__assert_fail@plt+0xa2a0>
   1a808:	subs	r4, r0, #0
   1a80c:	beq	1a7f8 <__assert_fail@plt+0x9428>
   1a810:	str	r7, [r4]
   1a814:	strb	r7, [r4, #4]
   1a818:	strb	r7, [r4, #5]
   1a81c:	mov	r0, r4
   1a820:	pop	{r4, r5, r6, r7, r8, pc}
   1a824:	push	{r4, r5, r6, r7, r8, lr}
   1a828:	ldr	r6, [r1, #40]	; 0x28
   1a82c:	cmp	r6, #0
   1a830:	beq	1a8f8 <__assert_fail@plt+0x9528>
   1a834:	cmp	r1, r6
   1a838:	mov	r7, r1
   1a83c:	mov	r5, r0
   1a840:	bhi	1a850 <__assert_fail@plt+0x9480>
   1a844:	add	r3, r1, #44	; 0x2c
   1a848:	cmp	r6, r3
   1a84c:	bcc	1a8f8 <__assert_fail@plt+0x9528>
   1a850:	ldrb	r3, [r6]
   1a854:	cmp	r3, #0
   1a858:	addne	r4, r5, #5
   1a85c:	beq	1a8f0 <__assert_fail@plt+0x9520>
   1a860:	mov	r1, r6
   1a864:	mov	r0, r4
   1a868:	bl	110a0 <strcmp@plt>
   1a86c:	add	r2, r5, #5
   1a870:	cmp	r0, #0
   1a874:	mov	r0, r4
   1a878:	beq	1a8e4 <__assert_fail@plt+0x9514>
   1a87c:	ldrb	r3, [r4]
   1a880:	cmp	r3, #0
   1a884:	bne	1a89c <__assert_fail@plt+0x94cc>
   1a888:	cmp	r4, r2
   1a88c:	bne	1a900 <__assert_fail@plt+0x9530>
   1a890:	ldrb	r3, [r5, #4]
   1a894:	cmp	r3, #0
   1a898:	beq	1a900 <__assert_fail@plt+0x9530>
   1a89c:	bl	11274 <strlen@plt>
   1a8a0:	add	r0, r0, #1
   1a8a4:	ldrb	r3, [r4, r0]!
   1a8a8:	cmp	r3, #0
   1a8ac:	bne	1a860 <__assert_fail@plt+0x9490>
   1a8b0:	ldr	r3, [r5]
   1a8b4:	cmp	r3, #0
   1a8b8:	addne	r4, r3, #5
   1a8bc:	movne	r5, r3
   1a8c0:	b	1a860 <__assert_fail@plt+0x9490>
   1a8c4:	mov	r0, r6
   1a8c8:	bl	1a79c <__assert_fail@plt+0x93cc>
   1a8cc:	cmp	r0, #0
   1a8d0:	str	r0, [r5]
   1a8d4:	popeq	{r4, r5, r6, r7, r8, pc}
   1a8d8:	add	r4, r0, #5
   1a8dc:	mov	r3, #0
   1a8e0:	strb	r3, [r0, #4]
   1a8e4:	str	r4, [r7, #40]	; 0x28
   1a8e8:	mov	r0, #1
   1a8ec:	pop	{r4, r5, r6, r7, r8, pc}
   1a8f0:	ldr	r4, [pc, #64]	; 1a938 <__assert_fail@plt+0x9568>
   1a8f4:	b	1a8e4 <__assert_fail@plt+0x9514>
   1a8f8:	mov	r0, #1
   1a8fc:	pop	{r4, r5, r6, r7, r8, pc}
   1a900:	mov	r0, r6
   1a904:	bl	11274 <strlen@plt>
   1a908:	add	r3, r5, #64	; 0x40
   1a90c:	sub	r3, r3, r4
   1a910:	add	r8, r0, #1
   1a914:	cmp	r8, r3
   1a918:	bge	1a8c4 <__assert_fail@plt+0x94f4>
   1a91c:	mov	r1, r6
   1a920:	mov	r2, r8
   1a924:	mov	r0, r4
   1a928:	bl	110f4 <memcpy@plt>
   1a92c:	mov	r3, #0
   1a930:	strb	r3, [r4, r8]
   1a934:	b	1a8e4 <__assert_fail@plt+0x9514>
   1a938:	andeq	pc, r1, ip, ror #27
   1a93c:	push	{r4, r5, r6, r7, r8, lr}
   1a940:	mov	r4, r0
   1a944:	ldr	r0, [pc, #152]	; 1a9e4 <__assert_fail@plt+0x9614>
   1a948:	bl	111d8 <getenv@plt>
   1a94c:	ldrb	r3, [r4, #4]
   1a950:	subs	r5, r0, #0
   1a954:	beq	1a99c <__assert_fail@plt+0x95cc>
   1a958:	cmp	r3, #0
   1a95c:	beq	1a974 <__assert_fail@plt+0x95a4>
   1a960:	mov	r1, r5
   1a964:	add	r0, r4, #5
   1a968:	bl	110a0 <strcmp@plt>
   1a96c:	cmp	r0, #0
   1a970:	beq	1a9a4 <__assert_fail@plt+0x95d4>
   1a974:	mov	r0, r5
   1a978:	bl	1a79c <__assert_fail@plt+0x93cc>
   1a97c:	subs	r5, r0, #0
   1a980:	beq	1a994 <__assert_fail@plt+0x95c4>
   1a984:	mov	r0, r4
   1a988:	bl	1a6f4 <__assert_fail@plt+0x9324>
   1a98c:	cmp	r0, #0
   1a990:	beq	1a9b0 <__assert_fail@plt+0x95e0>
   1a994:	mov	r0, r5
   1a998:	pop	{r4, r5, r6, r7, r8, pc}
   1a99c:	cmp	r3, #0
   1a9a0:	bne	1a974 <__assert_fail@plt+0x95a4>
   1a9a4:	mov	r5, #1
   1a9a8:	mov	r0, r5
   1a9ac:	pop	{r4, r5, r6, r7, r8, pc}
   1a9b0:	bl	11298 <__errno_location@plt>
   1a9b4:	cmp	r5, #1
   1a9b8:	mov	r6, r0
   1a9bc:	ldr	r7, [r0]
   1a9c0:	beq	1a9d8 <__assert_fail@plt+0x9608>
   1a9c4:	ldr	r4, [r5]
   1a9c8:	mov	r0, r5
   1a9cc:	bl	1b874 <__assert_fail@plt+0xa4a4>
   1a9d0:	subs	r5, r4, #0
   1a9d4:	bne	1a9c4 <__assert_fail@plt+0x95f4>
   1a9d8:	str	r7, [r6]
   1a9dc:	mov	r5, #0
   1a9e0:	b	1a994 <__assert_fail@plt+0x95c4>
   1a9e4:	andeq	pc, r1, ip, lsl #28
   1a9e8:	cmp	r0, #1
   1a9ec:	bxeq	lr
   1a9f0:	cmp	r0, #0
   1a9f4:	beq	1aa10 <__assert_fail@plt+0x9640>
   1a9f8:	push	{r4, lr}
   1a9fc:	ldr	r4, [r0]
   1aa00:	bl	1b874 <__assert_fail@plt+0xa4a4>
   1aa04:	subs	r0, r4, #0
   1aa08:	bne	1a9fc <__assert_fail@plt+0x962c>
   1aa0c:	pop	{r4, pc}
   1aa10:	bx	lr
   1aa14:	subs	ip, r0, #0
   1aa18:	push	{r4, r5, r6, r7, r8, lr}
   1aa1c:	mov	r5, r1
   1aa20:	beq	1aa88 <__assert_fail@plt+0x96b8>
   1aa24:	mov	r4, r2
   1aa28:	mov	r6, ip
   1aa2c:	bl	1a93c <__assert_fail@plt+0x956c>
   1aa30:	subs	r7, r0, #0
   1aa34:	beq	1aa80 <__assert_fail@plt+0x96b0>
   1aa38:	mov	r0, r5
   1aa3c:	mov	r1, r4
   1aa40:	bl	11154 <localtime_r@plt>
   1aa44:	cmp	r0, #0
   1aa48:	beq	1aa78 <__assert_fail@plt+0x96a8>
   1aa4c:	mov	r0, r6
   1aa50:	mov	r1, r4
   1aa54:	bl	1a824 <__assert_fail@plt+0x9454>
   1aa58:	cmp	r0, #0
   1aa5c:	beq	1aa78 <__assert_fail@plt+0x96a8>
   1aa60:	mov	r0, r7
   1aa64:	bl	1a744 <__assert_fail@plt+0x9374>
   1aa68:	cmp	r0, #0
   1aa6c:	beq	1aa80 <__assert_fail@plt+0x96b0>
   1aa70:	mov	r0, r4
   1aa74:	pop	{r4, r5, r6, r7, r8, pc}
   1aa78:	mov	r0, r7
   1aa7c:	bl	1a744 <__assert_fail@plt+0x9374>
   1aa80:	mov	r0, #0
   1aa84:	pop	{r4, r5, r6, r7, r8, pc}
   1aa88:	mov	r0, r5
   1aa8c:	mov	r1, r2
   1aa90:	pop	{r4, r5, r6, r7, r8, lr}
   1aa94:	b	11088 <gmtime_r@plt>
   1aa98:	push	{r4, r5, r6, r7, lr}
   1aa9c:	subs	r7, r0, #0
   1aaa0:	sub	sp, sp, #52	; 0x34
   1aaa4:	mov	r4, r1
   1aaa8:	beq	1ab68 <__assert_fail@plt+0x9798>
   1aaac:	bl	1a93c <__assert_fail@plt+0x956c>
   1aab0:	subs	r6, r0, #0
   1aab4:	beq	1ab60 <__assert_fail@plt+0x9790>
   1aab8:	ldm	r4, {r1, r2, ip}
   1aabc:	ldr	r0, [r4, #12]
   1aac0:	ldr	r3, [r4, #16]
   1aac4:	str	r1, [sp, #4]
   1aac8:	str	r2, [sp, #8]
   1aacc:	ldr	r1, [r4, #20]
   1aad0:	ldr	r2, [r4, #32]
   1aad4:	str	r0, [sp, #16]
   1aad8:	str	r3, [sp, #20]
   1aadc:	add	r0, sp, #4
   1aae0:	mvn	r3, #0
   1aae4:	str	r3, [sp, #32]
   1aae8:	str	ip, [sp, #12]
   1aaec:	str	r1, [sp, #24]
   1aaf0:	str	r2, [sp, #36]	; 0x24
   1aaf4:	bl	110b8 <mktime@plt>
   1aaf8:	ldr	r3, [sp, #32]
   1aafc:	cmp	r3, #0
   1ab00:	mov	r5, r0
   1ab04:	blt	1ab58 <__assert_fail@plt+0x9788>
   1ab08:	mov	r0, r7
   1ab0c:	add	r1, sp, #4
   1ab10:	bl	1a824 <__assert_fail@plt+0x9454>
   1ab14:	cmp	r0, #0
   1ab18:	beq	1ab58 <__assert_fail@plt+0x9788>
   1ab1c:	mov	r0, r6
   1ab20:	bl	1a744 <__assert_fail@plt+0x9374>
   1ab24:	cmp	r0, #0
   1ab28:	beq	1ab60 <__assert_fail@plt+0x9790>
   1ab2c:	add	lr, sp, #4
   1ab30:	mov	ip, r4
   1ab34:	ldm	lr!, {r0, r1, r2, r3}
   1ab38:	stmia	ip!, {r0, r1, r2, r3}
   1ab3c:	ldm	lr!, {r0, r1, r2, r3}
   1ab40:	stmia	ip!, {r0, r1, r2, r3}
   1ab44:	ldm	lr, {r0, r1, r2}
   1ab48:	stm	ip, {r0, r1, r2}
   1ab4c:	mov	r0, r5
   1ab50:	add	sp, sp, #52	; 0x34
   1ab54:	pop	{r4, r5, r6, r7, pc}
   1ab58:	mov	r0, r6
   1ab5c:	bl	1a744 <__assert_fail@plt+0x9374>
   1ab60:	mvn	r5, #0
   1ab64:	b	1ab4c <__assert_fail@plt+0x977c>
   1ab68:	mov	r0, r1
   1ab6c:	bl	1134c <timegm@plt>
   1ab70:	mov	r5, r0
   1ab74:	mov	r0, r5
   1ab78:	add	sp, sp, #52	; 0x34
   1ab7c:	pop	{r4, r5, r6, r7, pc}
   1ab80:	push	{r4, r5, r6, lr}
   1ab84:	sub	sp, sp, #32
   1ab88:	cmp	r1, #0
   1ab8c:	mov	r4, r0
   1ab90:	ldr	r5, [sp, #48]	; 0x30
   1ab94:	ldr	r6, [sp, #52]	; 0x34
   1ab98:	beq	1aeb0 <__assert_fail@plt+0x9ae0>
   1ab9c:	stm	sp, {r2, r3}
   1aba0:	mov	r3, r1
   1aba4:	ldr	r2, [pc, #808]	; 1aed4 <__assert_fail@plt+0x9b04>
   1aba8:	mov	r1, #1
   1abac:	bl	112ec <__fprintf_chk@plt>
   1abb0:	mov	r2, #5
   1abb4:	ldr	r1, [pc, #796]	; 1aed8 <__assert_fail@plt+0x9b08>
   1abb8:	mov	r0, #0
   1abbc:	bl	11130 <dcgettext@plt>
   1abc0:	ldr	r3, [pc, #788]	; 1aedc <__assert_fail@plt+0x9b0c>
   1abc4:	ldr	r2, [pc, #788]	; 1aee0 <__assert_fail@plt+0x9b10>
   1abc8:	str	r3, [sp]
   1abcc:	mov	r1, #1
   1abd0:	mov	r3, r0
   1abd4:	mov	r0, r4
   1abd8:	bl	112ec <__fprintf_chk@plt>
   1abdc:	mov	r1, r4
   1abe0:	mov	r0, #10
   1abe4:	bl	11124 <fputc_unlocked@plt>
   1abe8:	mov	r2, #5
   1abec:	ldr	r1, [pc, #752]	; 1aee4 <__assert_fail@plt+0x9b14>
   1abf0:	mov	r0, #0
   1abf4:	bl	11130 <dcgettext@plt>
   1abf8:	mov	r1, #1
   1abfc:	ldr	r3, [pc, #740]	; 1aee8 <__assert_fail@plt+0x9b18>
   1ac00:	mov	r2, r0
   1ac04:	mov	r0, r4
   1ac08:	bl	112ec <__fprintf_chk@plt>
   1ac0c:	mov	r1, r4
   1ac10:	mov	r0, #10
   1ac14:	bl	11124 <fputc_unlocked@plt>
   1ac18:	cmp	r6, #9
   1ac1c:	ldrls	pc, [pc, r6, lsl #2]
   1ac20:	b	1aec8 <__assert_fail@plt+0x9af8>
   1ac24:	andeq	sl, r1, r8, lsr #25
   1ac28:			; <UNDEFINED> instruction: 0x0001acb0
   1ac2c:	ldrdeq	sl, [r1], -ip
   1ac30:	andeq	sl, r1, r0, lsl sp
   1ac34:	andeq	sl, r1, ip, asr #26
   1ac38:	andeq	sl, r1, r8, lsl #27
   1ac3c:	andeq	sl, r1, r4, asr #27
   1ac40:	andeq	sl, r1, r8, lsl #28
   1ac44:	andeq	sl, r1, r8, asr lr
   1ac48:	andeq	sl, r1, ip, asr #24
   1ac4c:	ldr	r1, [pc, #664]	; 1aeec <__assert_fail@plt+0x9b1c>
   1ac50:	mov	r2, #5
   1ac54:	mov	r0, #0
   1ac58:	bl	11130 <dcgettext@plt>
   1ac5c:	ldr	ip, [r5, #32]
   1ac60:	ldr	r1, [r5, #28]
   1ac64:	ldr	r2, [r5, #24]
   1ac68:	ldr	r3, [r5]
   1ac6c:	ldr	r6, [r5, #20]
   1ac70:	str	ip, [sp, #28]
   1ac74:	ldr	lr, [r5, #16]
   1ac78:	str	r1, [sp, #24]
   1ac7c:	ldr	ip, [r5, #12]
   1ac80:	str	r2, [sp, #20]
   1ac84:	ldr	r1, [r5, #8]
   1ac88:	ldr	r2, [r5, #4]
   1ac8c:	str	r6, [sp, #16]
   1ac90:	stmib	sp, {r1, ip, lr}
   1ac94:	mov	r1, #1
   1ac98:	str	r2, [sp]
   1ac9c:	mov	r2, r0
   1aca0:	mov	r0, r4
   1aca4:	bl	112ec <__fprintf_chk@plt>
   1aca8:	add	sp, sp, #32
   1acac:	pop	{r4, r5, r6, pc}
   1acb0:	mov	r2, #5
   1acb4:	ldr	r1, [pc, #564]	; 1aef0 <__assert_fail@plt+0x9b20>
   1acb8:	mov	r0, #0
   1acbc:	bl	11130 <dcgettext@plt>
   1acc0:	ldr	r3, [r5]
   1acc4:	mov	r1, #1
   1acc8:	mov	r2, r0
   1accc:	mov	r0, r4
   1acd0:	add	sp, sp, #32
   1acd4:	pop	{r4, r5, r6, lr}
   1acd8:	b	112ec <__fprintf_chk@plt>
   1acdc:	mov	r2, #5
   1ace0:	ldr	r1, [pc, #524]	; 1aef4 <__assert_fail@plt+0x9b24>
   1ace4:	mov	r0, #0
   1ace8:	bl	11130 <dcgettext@plt>
   1acec:	ldr	r2, [r5, #4]
   1acf0:	ldr	r3, [r5]
   1acf4:	mov	r1, #1
   1acf8:	str	r2, [sp, #48]	; 0x30
   1acfc:	mov	r2, r0
   1ad00:	mov	r0, r4
   1ad04:	add	sp, sp, #32
   1ad08:	pop	{r4, r5, r6, lr}
   1ad0c:	b	112ec <__fprintf_chk@plt>
   1ad10:	mov	r2, #5
   1ad14:	ldr	r1, [pc, #476]	; 1aef8 <__assert_fail@plt+0x9b28>
   1ad18:	mov	r0, #0
   1ad1c:	bl	11130 <dcgettext@plt>
   1ad20:	ldr	r1, [r5, #8]
   1ad24:	ldr	r2, [r5, #4]
   1ad28:	ldr	r3, [r5]
   1ad2c:	str	r1, [sp, #52]	; 0x34
   1ad30:	str	r2, [sp, #48]	; 0x30
   1ad34:	mov	r1, #1
   1ad38:	mov	r2, r0
   1ad3c:	mov	r0, r4
   1ad40:	add	sp, sp, #32
   1ad44:	pop	{r4, r5, r6, lr}
   1ad48:	b	112ec <__fprintf_chk@plt>
   1ad4c:	mov	r2, #5
   1ad50:	ldr	r1, [pc, #420]	; 1aefc <__assert_fail@plt+0x9b2c>
   1ad54:	mov	r0, #0
   1ad58:	bl	11130 <dcgettext@plt>
   1ad5c:	ldr	r1, [r5, #8]
   1ad60:	ldr	ip, [r5, #12]
   1ad64:	ldr	r2, [r5, #4]
   1ad68:	ldr	r3, [r5]
   1ad6c:	stmib	sp, {r1, ip}
   1ad70:	str	r2, [sp]
   1ad74:	mov	r1, #1
   1ad78:	mov	r2, r0
   1ad7c:	mov	r0, r4
   1ad80:	bl	112ec <__fprintf_chk@plt>
   1ad84:	b	1aca8 <__assert_fail@plt+0x98d8>
   1ad88:	mov	r2, #5
   1ad8c:	ldr	r1, [pc, #364]	; 1af00 <__assert_fail@plt+0x9b30>
   1ad90:	mov	r0, #0
   1ad94:	bl	11130 <dcgettext@plt>
   1ad98:	add	r1, r5, #8
   1ad9c:	ldr	r2, [r5, #4]
   1ada0:	ldm	r1, {r1, ip, lr}
   1ada4:	ldr	r3, [r5]
   1ada8:	str	r2, [sp]
   1adac:	stmib	sp, {r1, ip, lr}
   1adb0:	mov	r1, #1
   1adb4:	mov	r2, r0
   1adb8:	mov	r0, r4
   1adbc:	bl	112ec <__fprintf_chk@plt>
   1adc0:	b	1aca8 <__assert_fail@plt+0x98d8>
   1adc4:	mov	r2, #5
   1adc8:	ldr	r1, [pc, #308]	; 1af04 <__assert_fail@plt+0x9b34>
   1adcc:	mov	r0, #0
   1add0:	bl	11130 <dcgettext@plt>
   1add4:	add	r1, r5, #8
   1add8:	ldr	r2, [r5, #4]
   1addc:	ldm	r1, {r1, ip, lr}
   1ade0:	ldr	r6, [r5, #20]
   1ade4:	ldr	r3, [r5]
   1ade8:	stmib	sp, {r1, ip, lr}
   1adec:	mov	r1, #1
   1adf0:	str	r2, [sp]
   1adf4:	str	r6, [sp, #16]
   1adf8:	mov	r2, r0
   1adfc:	mov	r0, r4
   1ae00:	bl	112ec <__fprintf_chk@plt>
   1ae04:	b	1aca8 <__assert_fail@plt+0x98d8>
   1ae08:	mov	r2, #5
   1ae0c:	ldr	r1, [pc, #244]	; 1af08 <__assert_fail@plt+0x9b38>
   1ae10:	mov	r0, #0
   1ae14:	bl	11130 <dcgettext@plt>
   1ae18:	ldr	r2, [r5, #24]
   1ae1c:	ldr	r3, [r5]
   1ae20:	ldr	r6, [r5, #20]
   1ae24:	ldr	lr, [r5, #16]
   1ae28:	ldr	ip, [r5, #12]
   1ae2c:	str	r2, [sp, #20]
   1ae30:	ldr	r1, [r5, #8]
   1ae34:	ldr	r2, [r5, #4]
   1ae38:	str	r6, [sp, #16]
   1ae3c:	stmib	sp, {r1, ip, lr}
   1ae40:	mov	r1, #1
   1ae44:	str	r2, [sp]
   1ae48:	mov	r2, r0
   1ae4c:	mov	r0, r4
   1ae50:	bl	112ec <__fprintf_chk@plt>
   1ae54:	b	1aca8 <__assert_fail@plt+0x98d8>
   1ae58:	mov	r2, #5
   1ae5c:	ldr	r1, [pc, #168]	; 1af0c <__assert_fail@plt+0x9b3c>
   1ae60:	mov	r0, #0
   1ae64:	bl	11130 <dcgettext@plt>
   1ae68:	ldr	r1, [r5, #28]
   1ae6c:	ldr	r2, [r5, #24]
   1ae70:	ldr	r3, [r5]
   1ae74:	ldr	r6, [r5, #20]
   1ae78:	ldr	lr, [r5, #16]
   1ae7c:	str	r1, [sp, #24]
   1ae80:	ldr	ip, [r5, #12]
   1ae84:	str	r2, [sp, #20]
   1ae88:	ldr	r1, [r5, #8]
   1ae8c:	ldr	r2, [r5, #4]
   1ae90:	str	r6, [sp, #16]
   1ae94:	stmib	sp, {r1, ip, lr}
   1ae98:	mov	r1, #1
   1ae9c:	str	r2, [sp]
   1aea0:	mov	r2, r0
   1aea4:	mov	r0, r4
   1aea8:	bl	112ec <__fprintf_chk@plt>
   1aeac:	b	1aca8 <__assert_fail@plt+0x98d8>
   1aeb0:	str	r3, [sp]
   1aeb4:	mov	r1, #1
   1aeb8:	mov	r3, r2
   1aebc:	ldr	r2, [pc, #76]	; 1af10 <__assert_fail@plt+0x9b40>
   1aec0:	bl	112ec <__fprintf_chk@plt>
   1aec4:	b	1abb0 <__assert_fail@plt+0x97e0>
   1aec8:	mov	r2, #5
   1aecc:	ldr	r1, [pc, #64]	; 1af14 <__assert_fail@plt+0x9b44>
   1aed0:	b	1ac54 <__assert_fail@plt+0x9884>
   1aed4:	andeq	r0, r2, r0, lsr #4
   1aed8:	andeq	r0, r2, r4, lsr r2
   1aedc:	andeq	r0, r0, r6, ror #15
   1aee0:	andeq	r0, r2, ip, lsl #10
   1aee4:	andeq	r0, r2, r8, lsr r2
   1aee8:	andeq	r0, r2, r4, ror #5
   1aeec:	andeq	r0, r2, r4, lsl r4
   1aef0:	andeq	r0, r2, r8, lsl #6
   1aef4:	andeq	r0, r2, r8, lsl r3
   1aef8:	andeq	r0, r2, r0, lsr r3
   1aefc:	andeq	r0, r2, ip, asr #6
   1af00:	andeq	r0, r2, ip, ror #6
   1af04:	muleq	r2, r0, r3
   1af08:			; <UNDEFINED> instruction: 0x000203b8
   1af0c:	andeq	r0, r2, r4, ror #7
   1af10:	andeq	r0, r2, ip, lsr #4
   1af14:	andeq	r0, r2, r8, asr #8
   1af18:	push	{r4, r5, lr}
   1af1c:	sub	sp, sp, #12
   1af20:	ldr	r5, [sp, #24]
   1af24:	ldr	ip, [r5]
   1af28:	cmp	ip, #0
   1af2c:	beq	1af48 <__assert_fail@plt+0x9b78>
   1af30:	mov	lr, r5
   1af34:	mov	ip, #0
   1af38:	ldr	r4, [lr, #4]!
   1af3c:	add	ip, ip, #1
   1af40:	cmp	r4, #0
   1af44:	bne	1af38 <__assert_fail@plt+0x9b68>
   1af48:	stm	sp, {r5, ip}
   1af4c:	bl	1ab80 <__assert_fail@plt+0x97b0>
   1af50:	add	sp, sp, #12
   1af54:	pop	{r4, r5, pc}
   1af58:	push	{r4, r5, lr}
   1af5c:	sub	sp, sp, #52	; 0x34
   1af60:	add	r5, sp, #4
   1af64:	ldr	r4, [sp, #64]	; 0x40
   1af68:	mov	ip, #0
   1af6c:	sub	r4, r4, #4
   1af70:	ldr	lr, [r4, #4]!
   1af74:	cmp	lr, #0
   1af78:	str	lr, [r5, #4]!
   1af7c:	beq	1af8c <__assert_fail@plt+0x9bbc>
   1af80:	add	ip, ip, #1
   1af84:	cmp	ip, #10
   1af88:	bne	1af70 <__assert_fail@plt+0x9ba0>
   1af8c:	add	lr, sp, #8
   1af90:	str	ip, [sp, #4]
   1af94:	str	lr, [sp]
   1af98:	bl	1ab80 <__assert_fail@plt+0x97b0>
   1af9c:	add	sp, sp, #52	; 0x34
   1afa0:	pop	{r4, r5, pc}
   1afa4:	push	{r3}		; (str r3, [sp, #-4]!)
   1afa8:	push	{r4, lr}
   1afac:	sub	sp, sp, #60	; 0x3c
   1afb0:	add	lr, sp, #56	; 0x38
   1afb4:	add	r3, sp, #72	; 0x48
   1afb8:	str	r3, [lr, #-44]!	; 0xffffffd4
   1afbc:	add	r4, sp, #68	; 0x44
   1afc0:	mov	r3, #0
   1afc4:	ldr	ip, [r4, #4]!
   1afc8:	cmp	ip, #0
   1afcc:	str	ip, [lr, #4]!
   1afd0:	beq	1afe0 <__assert_fail@plt+0x9c10>
   1afd4:	add	r3, r3, #1
   1afd8:	cmp	r3, #10
   1afdc:	bne	1afc4 <__assert_fail@plt+0x9bf4>
   1afe0:	add	ip, sp, #16
   1afe4:	str	r3, [sp, #4]
   1afe8:	str	ip, [sp]
   1afec:	ldr	r3, [sp, #68]	; 0x44
   1aff0:	bl	1ab80 <__assert_fail@plt+0x97b0>
   1aff4:	add	sp, sp, #60	; 0x3c
   1aff8:	pop	{r4, lr}
   1affc:	add	sp, sp, #4
   1b000:	bx	lr
   1b004:	ldr	r3, [pc, #116]	; 1b080 <__assert_fail@plt+0x9cb0>
   1b008:	push	{r4, lr}
   1b00c:	mov	r0, #10
   1b010:	ldr	r1, [r3]
   1b014:	bl	11124 <fputc_unlocked@plt>
   1b018:	mov	r2, #5
   1b01c:	ldr	r1, [pc, #96]	; 1b084 <__assert_fail@plt+0x9cb4>
   1b020:	mov	r0, #0
   1b024:	bl	11130 <dcgettext@plt>
   1b028:	ldr	r2, [pc, #88]	; 1b088 <__assert_fail@plt+0x9cb8>
   1b02c:	mov	r1, r0
   1b030:	mov	r0, #1
   1b034:	bl	112d4 <__printf_chk@plt>
   1b038:	mov	r2, #5
   1b03c:	ldr	r1, [pc, #72]	; 1b08c <__assert_fail@plt+0x9cbc>
   1b040:	mov	r0, #0
   1b044:	bl	11130 <dcgettext@plt>
   1b048:	ldr	r3, [pc, #64]	; 1b090 <__assert_fail@plt+0x9cc0>
   1b04c:	ldr	r2, [pc, #64]	; 1b094 <__assert_fail@plt+0x9cc4>
   1b050:	mov	r1, r0
   1b054:	mov	r0, #1
   1b058:	bl	112d4 <__printf_chk@plt>
   1b05c:	mov	r2, #5
   1b060:	ldr	r1, [pc, #48]	; 1b098 <__assert_fail@plt+0x9cc8>
   1b064:	mov	r0, #0
   1b068:	bl	11130 <dcgettext@plt>
   1b06c:	ldr	r2, [pc, #40]	; 1b09c <__assert_fail@plt+0x9ccc>
   1b070:	pop	{r4, lr}
   1b074:	mov	r1, r0
   1b078:	mov	r0, #1
   1b07c:	b	112d4 <__printf_chk@plt>
   1b080:	andeq	r1, r3, r4, lsr #3
   1b084:	andeq	r0, r2, r4, lsl #9
   1b088:	muleq	r2, r8, r4
   1b08c:			; <UNDEFINED> instruction: 0x000204b0
   1b090:	andeq	lr, r1, r8, lsl #6
   1b094:	andeq	lr, r1, r0, lsr r3
   1b098:	andeq	r0, r2, r4, asr #9
   1b09c:	andeq	r0, r2, ip, ror #9
   1b0a0:	push	{r4, lr}
   1b0a4:	bl	1b670 <__assert_fail@plt+0xa2a0>
   1b0a8:	cmp	r0, #0
   1b0ac:	popne	{r4, pc}
   1b0b0:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b0b4:	push	{r4, lr}
   1b0b8:	bl	1b670 <__assert_fail@plt+0xa2a0>
   1b0bc:	cmp	r0, #0
   1b0c0:	popne	{r4, pc}
   1b0c4:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b0c8:	push	{r4, lr}
   1b0cc:	bl	1b670 <__assert_fail@plt+0xa2a0>
   1b0d0:	cmp	r0, #0
   1b0d4:	popne	{r4, pc}
   1b0d8:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b0dc:	push	{r4, r5, r6, lr}
   1b0e0:	mov	r5, r0
   1b0e4:	mov	r4, r1
   1b0e8:	bl	1b69c <__assert_fail@plt+0xa2cc>
   1b0ec:	cmp	r0, #0
   1b0f0:	popne	{r4, r5, r6, pc}
   1b0f4:	adds	r4, r4, #0
   1b0f8:	movne	r4, #1
   1b0fc:	cmp	r5, #0
   1b100:	orreq	r4, r4, #1
   1b104:	cmp	r4, #0
   1b108:	popeq	{r4, r5, r6, pc}
   1b10c:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b110:	push	{r4, lr}
   1b114:	cmp	r1, #0
   1b118:	orreq	r1, r1, #1
   1b11c:	bl	1b69c <__assert_fail@plt+0xa2cc>
   1b120:	cmp	r0, #0
   1b124:	popne	{r4, pc}
   1b128:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b12c:	push	{r4, r5, r6, lr}
   1b130:	mov	r6, r0
   1b134:	mov	r5, r1
   1b138:	mov	r4, r2
   1b13c:	bl	1d428 <__assert_fail@plt+0xc058>
   1b140:	cmp	r0, #0
   1b144:	popne	{r4, r5, r6, pc}
   1b148:	cmp	r6, #0
   1b14c:	beq	1b15c <__assert_fail@plt+0x9d8c>
   1b150:	cmp	r5, #0
   1b154:	cmpne	r4, #0
   1b158:	popeq	{r4, r5, r6, pc}
   1b15c:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b160:	b	1b12c <__assert_fail@plt+0x9d5c>
   1b164:	cmp	r2, #0
   1b168:	cmpne	r1, #0
   1b16c:	moveq	r2, #1
   1b170:	moveq	r1, r2
   1b174:	push	{r4, lr}
   1b178:	bl	1d428 <__assert_fail@plt+0xc058>
   1b17c:	cmp	r0, #0
   1b180:	popne	{r4, pc}
   1b184:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b188:	mov	r2, r1
   1b18c:	mov	r1, r0
   1b190:	mov	r0, #0
   1b194:	b	1b12c <__assert_fail@plt+0x9d5c>
   1b198:	mov	r2, r1
   1b19c:	mov	r1, r0
   1b1a0:	mov	r0, #0
   1b1a4:	b	1b164 <__assert_fail@plt+0x9d94>
   1b1a8:	push	{r4, r5, r6, lr}
   1b1ac:	subs	r6, r0, #0
   1b1b0:	sub	sp, sp, #8
   1b1b4:	mov	r5, r1
   1b1b8:	ldr	r4, [r1]
   1b1bc:	beq	1b1f8 <__assert_fail@plt+0x9e28>
   1b1c0:	lsr	r1, r4, #1
   1b1c4:	add	r3, r1, #1
   1b1c8:	mvn	r3, r3
   1b1cc:	cmp	r4, r3
   1b1d0:	bhi	1b1f4 <__assert_fail@plt+0x9e24>
   1b1d4:	add	r4, r4, #1
   1b1d8:	add	r4, r4, r1
   1b1dc:	mov	r0, r6
   1b1e0:	mov	r1, r4
   1b1e4:	bl	1b12c <__assert_fail@plt+0x9d5c>
   1b1e8:	str	r4, [r5]
   1b1ec:	add	sp, sp, #8
   1b1f0:	pop	{r4, r5, r6, pc}
   1b1f4:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b1f8:	cmp	r4, #0
   1b1fc:	bne	1b1dc <__assert_fail@plt+0x9e0c>
   1b200:	mov	r1, r2
   1b204:	mov	r0, #64	; 0x40
   1b208:	str	r2, [sp, #4]
   1b20c:	bl	1d568 <__assert_fail@plt+0xc198>
   1b210:	ldr	r2, [sp, #4]
   1b214:	cmp	r0, #0
   1b218:	movne	r4, r0
   1b21c:	addeq	r4, r0, #1
   1b220:	b	1b1dc <__assert_fail@plt+0x9e0c>
   1b224:	mov	r2, #1
   1b228:	b	1b1a8 <__assert_fail@plt+0x9dd8>
   1b22c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b230:	sub	sp, sp, #12
   1b234:	ldr	r6, [r1]
   1b238:	mov	sl, r1
   1b23c:	mov	r9, r0
   1b240:	asrs	r4, r6, #1
   1b244:	mov	r5, r2
   1b248:	mov	fp, r3
   1b24c:	ldr	r7, [sp, #48]	; 0x30
   1b250:	bmi	1b3bc <__assert_fail@plt+0x9fec>
   1b254:	mvn	r3, #-2147483648	; 0x80000000
   1b258:	sub	r3, r3, r4
   1b25c:	cmp	r6, r3
   1b260:	movle	r3, #0
   1b264:	movgt	r3, #1
   1b268:	mvn	r8, fp
   1b26c:	cmp	r3, #0
   1b270:	addeq	r4, r4, r6
   1b274:	mvnne	r4, #-2147483648	; 0x80000000
   1b278:	lsr	r8, r8, #31
   1b27c:	cmp	fp, r4
   1b280:	movge	r3, #0
   1b284:	andlt	r3, r8, #1
   1b288:	cmp	r3, #0
   1b28c:	beq	1b374 <__assert_fail@plt+0x9fa4>
   1b290:	cmp	r7, #0
   1b294:	blt	1b444 <__assert_fail@plt+0xa074>
   1b298:	bne	1b43c <__assert_fail@plt+0xa06c>
   1b29c:	mov	r2, #64	; 0x40
   1b2a0:	mov	r1, r7
   1b2a4:	mov	r0, r2
   1b2a8:	str	r2, [sp, #4]
   1b2ac:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b2b0:	ldr	r2, [sp, #4]
   1b2b4:	mov	r1, r7
   1b2b8:	mov	r4, r0
   1b2bc:	mov	r0, r2
   1b2c0:	bl	1d994 <__assert_fail@plt+0xc5c4>
   1b2c4:	ldr	r2, [sp, #4]
   1b2c8:	sub	r1, r2, r1
   1b2cc:	cmp	r9, #0
   1b2d0:	sub	r3, r4, r6
   1b2d4:	streq	r9, [sl]
   1b2d8:	cmp	r3, r5
   1b2dc:	bge	1b360 <__assert_fail@plt+0x9f90>
   1b2e0:	cmp	r5, #0
   1b2e4:	blt	1b3d0 <__assert_fail@plt+0xa000>
   1b2e8:	cmp	r6, #0
   1b2ec:	blt	1b30c <__assert_fail@plt+0x9f3c>
   1b2f0:	mvn	r3, #-2147483648	; 0x80000000
   1b2f4:	sub	r3, r3, r5
   1b2f8:	cmp	r6, r3
   1b2fc:	movle	r3, #0
   1b300:	movgt	r3, #1
   1b304:	cmp	r3, #0
   1b308:	bne	1b4cc <__assert_fail@plt+0xa0fc>
   1b30c:	add	r5, r6, r5
   1b310:	cmp	fp, r5
   1b314:	movge	r8, #0
   1b318:	andlt	r8, r8, #1
   1b31c:	cmp	r8, #0
   1b320:	mov	r4, r5
   1b324:	bne	1b4cc <__assert_fail@plt+0xa0fc>
   1b328:	cmp	r7, #0
   1b32c:	blt	1b3e4 <__assert_fail@plt+0xa014>
   1b330:	beq	1b35c <__assert_fail@plt+0x9f8c>
   1b334:	cmp	r5, #0
   1b338:	blt	1b48c <__assert_fail@plt+0xa0bc>
   1b33c:	mov	r1, r7
   1b340:	mvn	r0, #-2147483648	; 0x80000000
   1b344:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b348:	cmp	r5, r0
   1b34c:	movle	r0, #0
   1b350:	movgt	r0, #1
   1b354:	cmp	r0, #0
   1b358:	bne	1b4cc <__assert_fail@plt+0xa0fc>
   1b35c:	mul	r1, r5, r7
   1b360:	mov	r0, r9
   1b364:	bl	1b0dc <__assert_fail@plt+0x9d0c>
   1b368:	str	r4, [sl]
   1b36c:	add	sp, sp, #12
   1b370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b374:	cmp	r7, #0
   1b378:	blt	1b410 <__assert_fail@plt+0xa040>
   1b37c:	beq	1b29c <__assert_fail@plt+0x9ecc>
   1b380:	cmp	r4, #0
   1b384:	blt	1b44c <__assert_fail@plt+0xa07c>
   1b388:	mov	r1, r7
   1b38c:	mvn	r0, #-2147483648	; 0x80000000
   1b390:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b394:	cmp	r0, r4
   1b398:	movge	r0, #0
   1b39c:	movlt	r0, #1
   1b3a0:	cmp	r0, #0
   1b3a4:	mvnne	r2, #-2147483648	; 0x80000000
   1b3a8:	bne	1b2a0 <__assert_fail@plt+0x9ed0>
   1b3ac:	mul	r1, r7, r4
   1b3b0:	cmp	r1, #63	; 0x3f
   1b3b4:	bgt	1b2cc <__assert_fail@plt+0x9efc>
   1b3b8:	b	1b29c <__assert_fail@plt+0x9ecc>
   1b3bc:	rsb	r3, r4, #-2147483648	; 0x80000000
   1b3c0:	cmp	r6, r3
   1b3c4:	movge	r3, #0
   1b3c8:	movlt	r3, #1
   1b3cc:	b	1b268 <__assert_fail@plt+0x9e98>
   1b3d0:	rsb	r3, r5, #-2147483648	; 0x80000000
   1b3d4:	cmp	r6, r3
   1b3d8:	movge	r3, #0
   1b3dc:	movlt	r3, #1
   1b3e0:	b	1b304 <__assert_fail@plt+0x9f34>
   1b3e4:	cmp	r5, #0
   1b3e8:	blt	1b470 <__assert_fail@plt+0xa0a0>
   1b3ec:	cmn	r7, #1
   1b3f0:	beq	1b35c <__assert_fail@plt+0x9f8c>
   1b3f4:	mov	r1, r7
   1b3f8:	mov	r0, #-2147483648	; 0x80000000
   1b3fc:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b400:	cmp	r5, r0
   1b404:	movle	r0, #0
   1b408:	movgt	r0, #1
   1b40c:	b	1b354 <__assert_fail@plt+0x9f84>
   1b410:	cmp	r4, #0
   1b414:	blt	1b4b0 <__assert_fail@plt+0xa0e0>
   1b418:	cmn	r7, #1
   1b41c:	beq	1b3ac <__assert_fail@plt+0x9fdc>
   1b420:	mov	r1, r7
   1b424:	mov	r0, #-2147483648	; 0x80000000
   1b428:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b42c:	cmp	r0, r4
   1b430:	movge	r0, #0
   1b434:	movlt	r0, #1
   1b438:	b	1b3a0 <__assert_fail@plt+0x9fd0>
   1b43c:	mov	r4, fp
   1b440:	b	1b388 <__assert_fail@plt+0x9fb8>
   1b444:	mov	r4, fp
   1b448:	b	1b418 <__assert_fail@plt+0xa048>
   1b44c:	cmn	r4, #1
   1b450:	beq	1b3ac <__assert_fail@plt+0x9fdc>
   1b454:	mov	r1, r4
   1b458:	mov	r0, #-2147483648	; 0x80000000
   1b45c:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b460:	cmp	r7, r0
   1b464:	movle	r0, #0
   1b468:	movgt	r0, #1
   1b46c:	b	1b3a0 <__assert_fail@plt+0x9fd0>
   1b470:	mov	r1, r7
   1b474:	mvn	r0, #-2147483648	; 0x80000000
   1b478:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b47c:	cmp	r5, r0
   1b480:	movge	r0, #0
   1b484:	movlt	r0, #1
   1b488:	b	1b354 <__assert_fail@plt+0x9f84>
   1b48c:	cmn	r5, #1
   1b490:	beq	1b35c <__assert_fail@plt+0x9f8c>
   1b494:	mov	r1, r5
   1b498:	mov	r0, #-2147483648	; 0x80000000
   1b49c:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b4a0:	cmp	r7, r0
   1b4a4:	movle	r0, #0
   1b4a8:	movgt	r0, #1
   1b4ac:	b	1b354 <__assert_fail@plt+0x9f84>
   1b4b0:	mov	r1, r7
   1b4b4:	mvn	r0, #-2147483648	; 0x80000000
   1b4b8:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1b4bc:	cmp	r0, r4
   1b4c0:	movle	r0, #0
   1b4c4:	movgt	r0, #1
   1b4c8:	b	1b3a0 <__assert_fail@plt+0x9fd0>
   1b4cc:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b4d0:	push	{r4, lr}
   1b4d4:	mov	r1, #1
   1b4d8:	bl	1b628 <__assert_fail@plt+0xa258>
   1b4dc:	cmp	r0, #0
   1b4e0:	popne	{r4, pc}
   1b4e4:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b4e8:	push	{r4, lr}
   1b4ec:	mov	r1, #1
   1b4f0:	bl	1b628 <__assert_fail@plt+0xa258>
   1b4f4:	cmp	r0, #0
   1b4f8:	popne	{r4, pc}
   1b4fc:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b500:	push	{r4, lr}
   1b504:	bl	1b628 <__assert_fail@plt+0xa258>
   1b508:	cmp	r0, #0
   1b50c:	popne	{r4, pc}
   1b510:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b514:	push	{r4, lr}
   1b518:	bl	1b628 <__assert_fail@plt+0xa258>
   1b51c:	cmp	r0, #0
   1b520:	popne	{r4, pc}
   1b524:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b528:	push	{r4, r5, r6, lr}
   1b52c:	mov	r6, r0
   1b530:	mov	r0, r1
   1b534:	mov	r4, r1
   1b538:	bl	1b670 <__assert_fail@plt+0xa2a0>
   1b53c:	subs	r5, r0, #0
   1b540:	beq	1b558 <__assert_fail@plt+0xa188>
   1b544:	mov	r2, r4
   1b548:	mov	r1, r6
   1b54c:	bl	110f4 <memcpy@plt>
   1b550:	mov	r0, r5
   1b554:	pop	{r4, r5, r6, pc}
   1b558:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b55c:	push	{r4, r5, r6, lr}
   1b560:	mov	r6, r0
   1b564:	mov	r0, r1
   1b568:	mov	r4, r1
   1b56c:	bl	1b670 <__assert_fail@plt+0xa2a0>
   1b570:	subs	r5, r0, #0
   1b574:	beq	1b58c <__assert_fail@plt+0xa1bc>
   1b578:	mov	r2, r4
   1b57c:	mov	r1, r6
   1b580:	bl	110f4 <memcpy@plt>
   1b584:	mov	r0, r5
   1b588:	pop	{r4, r5, r6, pc}
   1b58c:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b590:	push	{r4, r5, r6, lr}
   1b594:	mov	r6, r0
   1b598:	add	r0, r1, #1
   1b59c:	mov	r4, r1
   1b5a0:	bl	1b670 <__assert_fail@plt+0xa2a0>
   1b5a4:	subs	r5, r0, #0
   1b5a8:	beq	1b5c8 <__assert_fail@plt+0xa1f8>
   1b5ac:	mov	r3, #0
   1b5b0:	mov	r1, r6
   1b5b4:	strb	r3, [r5, r4]
   1b5b8:	mov	r2, r4
   1b5bc:	bl	110f4 <memcpy@plt>
   1b5c0:	mov	r0, r5
   1b5c4:	pop	{r4, r5, r6, pc}
   1b5c8:	bl	1b5e8 <__assert_fail@plt+0xa218>
   1b5cc:	push	{r4, lr}
   1b5d0:	mov	r4, r0
   1b5d4:	bl	11274 <strlen@plt>
   1b5d8:	add	r1, r0, #1
   1b5dc:	mov	r0, r4
   1b5e0:	pop	{r4, lr}
   1b5e4:	b	1b528 <__assert_fail@plt+0xa158>
   1b5e8:	ldr	r3, [pc, #44]	; 1b61c <__assert_fail@plt+0xa24c>
   1b5ec:	push	{r4, lr}
   1b5f0:	mov	r2, #5
   1b5f4:	ldr	r1, [pc, #36]	; 1b620 <__assert_fail@plt+0xa250>
   1b5f8:	mov	r0, #0
   1b5fc:	ldr	r4, [r3]
   1b600:	bl	11130 <dcgettext@plt>
   1b604:	ldr	r2, [pc, #24]	; 1b624 <__assert_fail@plt+0xa254>
   1b608:	mov	r1, #0
   1b60c:	mov	r3, r0
   1b610:	mov	r0, r4
   1b614:	bl	111c0 <error@plt>
   1b618:	bl	113a0 <abort@plt>
   1b61c:	andeq	r1, r3, r8, asr #2
   1b620:	andeq	r0, r2, ip, lsr r5
   1b624:	andeq	lr, r1, r8, asr #13
   1b628:	cmp	r1, #0
   1b62c:	cmpne	r0, #0
   1b630:	moveq	r1, #1
   1b634:	moveq	r0, r1
   1b638:	umull	r2, r3, r0, r1
   1b63c:	adds	r3, r3, #0
   1b640:	movne	r3, #1
   1b644:	cmp	r2, #0
   1b648:	blt	1b658 <__assert_fail@plt+0xa288>
   1b64c:	cmp	r3, #0
   1b650:	bne	1b658 <__assert_fail@plt+0xa288>
   1b654:	b	11064 <calloc@plt>
   1b658:	push	{r4, lr}
   1b65c:	bl	11298 <__errno_location@plt>
   1b660:	mov	r3, #12
   1b664:	str	r3, [r0]
   1b668:	mov	r0, #0
   1b66c:	pop	{r4, pc}
   1b670:	cmp	r0, #0
   1b674:	moveq	r0, #1
   1b678:	cmp	r0, #0
   1b67c:	blt	1b684 <__assert_fail@plt+0xa2b4>
   1b680:	b	111e4 <malloc@plt>
   1b684:	push	{r4, lr}
   1b688:	bl	11298 <__errno_location@plt>
   1b68c:	mov	r3, #12
   1b690:	str	r3, [r0]
   1b694:	mov	r0, #0
   1b698:	pop	{r4, pc}
   1b69c:	cmp	r0, #0
   1b6a0:	beq	1b6c4 <__assert_fail@plt+0xa2f4>
   1b6a4:	cmp	r1, #0
   1b6a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b6ac:	sub	sp, sp, #12
   1b6b0:	beq	1b6cc <__assert_fail@plt+0xa2fc>
   1b6b4:	blt	1b6e4 <__assert_fail@plt+0xa314>
   1b6b8:	add	sp, sp, #12
   1b6bc:	pop	{lr}		; (ldr lr, [sp], #4)
   1b6c0:	b	11148 <realloc@plt>
   1b6c4:	mov	r0, r1
   1b6c8:	b	1b670 <__assert_fail@plt+0xa2a0>
   1b6cc:	str	r1, [sp, #4]
   1b6d0:	bl	1b874 <__assert_fail@plt+0xa4a4>
   1b6d4:	ldr	r3, [sp, #4]
   1b6d8:	mov	r0, r3
   1b6dc:	add	sp, sp, #12
   1b6e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6e4:	bl	11298 <__errno_location@plt>
   1b6e8:	mov	r2, #12
   1b6ec:	mov	r3, #0
   1b6f0:	str	r2, [r0]
   1b6f4:	b	1b6d8 <__assert_fail@plt+0xa308>
   1b6f8:	push	{r4, r5, r6, lr}
   1b6fc:	mov	r4, r0
   1b700:	bl	111a8 <__fpending@plt>
   1b704:	ldr	r5, [r4]
   1b708:	and	r5, r5, #32
   1b70c:	mov	r6, r0
   1b710:	mov	r0, r4
   1b714:	bl	1b774 <__assert_fail@plt+0xa3a4>
   1b718:	cmp	r5, #0
   1b71c:	mov	r4, r0
   1b720:	bne	1b740 <__assert_fail@plt+0xa370>
   1b724:	cmp	r0, #0
   1b728:	beq	1b738 <__assert_fail@plt+0xa368>
   1b72c:	cmp	r6, #0
   1b730:	beq	1b75c <__assert_fail@plt+0xa38c>
   1b734:	mvn	r4, #0
   1b738:	mov	r0, r4
   1b73c:	pop	{r4, r5, r6, pc}
   1b740:	cmp	r0, #0
   1b744:	bne	1b734 <__assert_fail@plt+0xa364>
   1b748:	bl	11298 <__errno_location@plt>
   1b74c:	str	r4, [r0]
   1b750:	mvn	r4, #0
   1b754:	mov	r0, r4
   1b758:	pop	{r4, r5, r6, pc}
   1b75c:	bl	11298 <__errno_location@plt>
   1b760:	ldr	r4, [r0]
   1b764:	subs	r4, r4, #9
   1b768:	mvnne	r4, #0
   1b76c:	mov	r0, r4
   1b770:	pop	{r4, r5, r6, pc}
   1b774:	push	{r4, r5, lr}
   1b778:	sub	sp, sp, #12
   1b77c:	mov	r4, r0
   1b780:	bl	112e0 <fileno@plt>
   1b784:	cmp	r0, #0
   1b788:	mov	r0, r4
   1b78c:	blt	1b808 <__assert_fail@plt+0xa438>
   1b790:	bl	11214 <__freading@plt>
   1b794:	cmp	r0, #0
   1b798:	bne	1b7d4 <__assert_fail@plt+0xa404>
   1b79c:	mov	r0, r4
   1b7a0:	bl	1b814 <__assert_fail@plt+0xa444>
   1b7a4:	cmp	r0, #0
   1b7a8:	beq	1b804 <__assert_fail@plt+0xa434>
   1b7ac:	bl	11298 <__errno_location@plt>
   1b7b0:	mov	r5, r0
   1b7b4:	mov	r0, r4
   1b7b8:	ldr	r4, [r5]
   1b7bc:	bl	112f8 <fclose@plt>
   1b7c0:	cmp	r4, #0
   1b7c4:	mvnne	r0, #0
   1b7c8:	strne	r4, [r5]
   1b7cc:	add	sp, sp, #12
   1b7d0:	pop	{r4, r5, pc}
   1b7d4:	mov	r0, r4
   1b7d8:	bl	112e0 <fileno@plt>
   1b7dc:	mov	r3, #1
   1b7e0:	str	r3, [sp]
   1b7e4:	mov	r2, #0
   1b7e8:	mov	r3, #0
   1b7ec:	bl	11190 <lseek64@plt>
   1b7f0:	mvn	r3, #0
   1b7f4:	mvn	r2, #0
   1b7f8:	cmp	r1, r3
   1b7fc:	cmpeq	r0, r2
   1b800:	bne	1b79c <__assert_fail@plt+0xa3cc>
   1b804:	mov	r0, r4
   1b808:	add	sp, sp, #12
   1b80c:	pop	{r4, r5, lr}
   1b810:	b	112f8 <fclose@plt>
   1b814:	push	{r4, lr}
   1b818:	subs	r4, r0, #0
   1b81c:	sub	sp, sp, #8
   1b820:	beq	1b83c <__assert_fail@plt+0xa46c>
   1b824:	bl	11214 <__freading@plt>
   1b828:	cmp	r0, #0
   1b82c:	beq	1b83c <__assert_fail@plt+0xa46c>
   1b830:	ldr	r3, [r4]
   1b834:	tst	r3, #256	; 0x100
   1b838:	bne	1b84c <__assert_fail@plt+0xa47c>
   1b83c:	mov	r0, r4
   1b840:	add	sp, sp, #8
   1b844:	pop	{r4, lr}
   1b848:	b	110c4 <fflush@plt>
   1b84c:	mov	r3, #1
   1b850:	str	r3, [sp]
   1b854:	mov	r2, #0
   1b858:	mov	r3, #0
   1b85c:	mov	r0, r4
   1b860:	bl	1b8cc <__assert_fail@plt+0xa4fc>
   1b864:	mov	r0, r4
   1b868:	add	sp, sp, #8
   1b86c:	pop	{r4, lr}
   1b870:	b	110c4 <fflush@plt>
   1b874:	push	{r4, r5, lr}
   1b878:	sub	sp, sp, #12
   1b87c:	mov	r5, r0
   1b880:	bl	11298 <__errno_location@plt>
   1b884:	mov	r2, #0
   1b888:	mov	r4, r0
   1b88c:	ldr	r3, [r0]
   1b890:	str	r2, [r4]
   1b894:	mov	r0, r5
   1b898:	str	r3, [sp]
   1b89c:	str	r3, [sp, #4]
   1b8a0:	bl	110d0 <free@plt>
   1b8a4:	ldr	r3, [r4]
   1b8a8:	add	r2, sp, #8
   1b8ac:	cmp	r3, #0
   1b8b0:	moveq	r3, #4
   1b8b4:	movne	r3, #0
   1b8b8:	add	r3, r2, r3
   1b8bc:	ldr	r3, [r3, #-8]
   1b8c0:	str	r3, [r4]
   1b8c4:	add	sp, sp, #12
   1b8c8:	pop	{r4, r5, pc}
   1b8cc:	push	{r4, r5, r6, r7, r8, lr}
   1b8d0:	sub	sp, sp, #8
   1b8d4:	ldmib	r0, {ip, lr}
   1b8d8:	mov	r4, r0
   1b8dc:	ldr	r5, [sp, #32]
   1b8e0:	cmp	lr, ip
   1b8e4:	beq	1b8fc <__assert_fail@plt+0xa52c>
   1b8e8:	str	r5, [sp, #32]
   1b8ec:	mov	r0, r4
   1b8f0:	add	sp, sp, #8
   1b8f4:	pop	{r4, r5, r6, r7, r8, lr}
   1b8f8:	b	11304 <fseeko64@plt>
   1b8fc:	ldr	lr, [r0, #20]
   1b900:	ldr	ip, [r0, #16]
   1b904:	cmp	lr, ip
   1b908:	bne	1b8e8 <__assert_fail@plt+0xa518>
   1b90c:	ldr	r8, [r0, #36]	; 0x24
   1b910:	cmp	r8, #0
   1b914:	bne	1b8e8 <__assert_fail@plt+0xa518>
   1b918:	mov	r6, r2
   1b91c:	mov	r7, r3
   1b920:	bl	112e0 <fileno@plt>
   1b924:	mov	r2, r6
   1b928:	mov	r3, r7
   1b92c:	str	r5, [sp]
   1b930:	bl	11190 <lseek64@plt>
   1b934:	mvn	r3, #0
   1b938:	mvn	r2, #0
   1b93c:	cmp	r1, r3
   1b940:	cmpeq	r0, r2
   1b944:	beq	1b964 <__assert_fail@plt+0xa594>
   1b948:	ldr	r3, [r4]
   1b94c:	strd	r0, [r4, #80]	; 0x50
   1b950:	mov	r0, r8
   1b954:	bic	r3, r3, #16
   1b958:	str	r3, [r4]
   1b95c:	add	sp, sp, #8
   1b960:	pop	{r4, r5, r6, r7, r8, pc}
   1b964:	mvn	r0, #0
   1b968:	b	1b95c <__assert_fail@plt+0xa58c>
   1b96c:	push	{r4, lr}
   1b970:	mov	r0, #14
   1b974:	bl	11334 <nl_langinfo@plt>
   1b978:	cmp	r0, #0
   1b97c:	beq	1b994 <__assert_fail@plt+0xa5c4>
   1b980:	ldrb	r2, [r0]
   1b984:	ldr	r3, [pc, #16]	; 1b99c <__assert_fail@plt+0xa5cc>
   1b988:	cmp	r2, #0
   1b98c:	moveq	r0, r3
   1b990:	pop	{r4, pc}
   1b994:	ldr	r0, [pc]	; 1b99c <__assert_fail@plt+0xa5cc>
   1b998:	pop	{r4, pc}
   1b99c:	andeq	r0, r2, r0, asr r5
   1b9a0:	push	{r4, r5, r6, r7, lr}
   1b9a4:	subs	r6, r0, #0
   1b9a8:	sub	sp, sp, #12
   1b9ac:	addeq	r6, sp, #4
   1b9b0:	mov	r0, r6
   1b9b4:	mov	r5, r2
   1b9b8:	mov	r7, r1
   1b9bc:	bl	111b4 <mbrtowc@plt>
   1b9c0:	cmp	r5, #0
   1b9c4:	cmnne	r0, #3
   1b9c8:	mov	r4, r0
   1b9cc:	bls	1b9e8 <__assert_fail@plt+0xa618>
   1b9d0:	mov	r0, #0
   1b9d4:	bl	1d474 <__assert_fail@plt+0xc0a4>
   1b9d8:	cmp	r0, #0
   1b9dc:	moveq	r4, #1
   1b9e0:	ldrbeq	r3, [r7]
   1b9e4:	streq	r3, [r6]
   1b9e8:	mov	r0, r4
   1b9ec:	add	sp, sp, #12
   1b9f0:	pop	{r4, r5, r6, r7, pc}
   1b9f4:	push	{r4, r5, r6, lr}
   1b9f8:	subs	r4, r2, #0
   1b9fc:	mov	r6, r0
   1ba00:	beq	1ba2c <__assert_fail@plt+0xa65c>
   1ba04:	mov	r5, r1
   1ba08:	bl	1122c <__ctype_tolower_loc@plt>
   1ba0c:	add	r3, r5, r4
   1ba10:	add	r2, r6, r4
   1ba14:	ldrb	lr, [r3, #-1]!
   1ba18:	ldr	ip, [r0]
   1ba1c:	cmp	r5, r3
   1ba20:	ldr	ip, [ip, lr, lsl #2]
   1ba24:	strb	ip, [r2, #-1]!
   1ba28:	bne	1ba14 <__assert_fail@plt+0xa644>
   1ba2c:	mov	r0, r6
   1ba30:	pop	{r4, r5, r6, pc}
   1ba34:	push	{r4, r5, r6, lr}
   1ba38:	subs	r4, r2, #0
   1ba3c:	mov	r6, r0
   1ba40:	beq	1ba6c <__assert_fail@plt+0xa69c>
   1ba44:	mov	r5, r1
   1ba48:	bl	11238 <__ctype_toupper_loc@plt>
   1ba4c:	add	r3, r5, r4
   1ba50:	add	r2, r6, r4
   1ba54:	ldrb	lr, [r3, #-1]!
   1ba58:	ldr	ip, [r0]
   1ba5c:	cmp	r5, r3
   1ba60:	ldr	ip, [ip, lr, lsl #2]
   1ba64:	strb	ip, [r2, #-1]!
   1ba68:	bne	1ba54 <__assert_fail@plt+0xa684>
   1ba6c:	mov	r0, r6
   1ba70:	pop	{r4, r5, r6, pc}
   1ba74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba78:	sub	sp, sp, #1104	; 0x450
   1ba7c:	sub	sp, sp, #12
   1ba80:	mov	r4, r3
   1ba84:	str	r3, [sp, #32]
   1ba88:	str	r1, [sp, #28]
   1ba8c:	mov	r9, r2
   1ba90:	mov	fp, r0
   1ba94:	bl	11298 <__errno_location@plt>
   1ba98:	ldr	r3, [r4, #40]	; 0x28
   1ba9c:	ldr	r2, [r4, #8]
   1baa0:	mov	r1, r3
   1baa4:	ldr	r3, [pc, #3936]	; 1ca0c <__assert_fail@plt+0xb63c>
   1baa8:	mov	ip, r2
   1baac:	str	r2, [sp, #48]	; 0x30
   1bab0:	subs	r2, r1, #0
   1bab4:	moveq	r2, r3
   1bab8:	cmp	ip, #12
   1babc:	str	r2, [sp, #56]	; 0x38
   1bac0:	ldr	r6, [sp, #1160]	; 0x488
   1bac4:	ldr	r3, [r0]
   1bac8:	str	r0, [sp, #44]	; 0x2c
   1bacc:	str	r3, [sp, #60]	; 0x3c
   1bad0:	ldrb	r3, [sp, #1152]	; 0x480
   1bad4:	str	r3, [sp, #52]	; 0x34
   1bad8:	ble	1bf60 <__assert_fail@plt+0xab90>
   1badc:	mov	r2, ip
   1bae0:	sub	r3, ip, #12
   1bae4:	str	r3, [sp, #48]	; 0x30
   1bae8:	ldrb	r3, [r9]
   1baec:	cmp	r3, #0
   1baf0:	beq	1d0a4 <__assert_fail@plt+0xbcd4>
   1baf4:	ldr	sl, [pc, #3860]	; 1ca10 <__assert_fail@plt+0xb640>
   1baf8:	mov	r8, #0
   1bafc:	cmp	r3, #37	; 0x25
   1bb00:	beq	1bbcc <__assert_fail@plt+0xa7fc>
   1bb04:	bic	r6, r6, r6, asr #31
   1bb08:	ldr	r3, [sp, #28]
   1bb0c:	cmp	r6, #1
   1bb10:	movcs	r4, r6
   1bb14:	movcc	r4, #1
   1bb18:	sub	r3, r3, r8
   1bb1c:	cmp	r4, r3
   1bb20:	bcs	1bbac <__assert_fail@plt+0xa7dc>
   1bb24:	cmp	fp, #0
   1bb28:	beq	1bb54 <__assert_fail@plt+0xa784>
   1bb2c:	cmp	r6, #1
   1bb30:	ble	1bb4c <__assert_fail@plt+0xa77c>
   1bb34:	sub	r6, r6, #1
   1bb38:	mov	r0, fp
   1bb3c:	mov	r2, r6
   1bb40:	mov	r1, #32
   1bb44:	bl	112c8 <memset@plt>
   1bb48:	add	fp, fp, r6
   1bb4c:	ldrb	r3, [r9]
   1bb50:	strb	r3, [fp], #1
   1bb54:	add	r8, r8, r4
   1bb58:	mov	r4, r9
   1bb5c:	ldrb	r3, [r4, #1]
   1bb60:	add	r9, r4, #1
   1bb64:	mvn	r6, #0
   1bb68:	cmp	r3, #0
   1bb6c:	bne	1bafc <__assert_fail@plt+0xa72c>
   1bb70:	ldr	r3, [sp, #28]
   1bb74:	ldr	r2, [sp, #60]	; 0x3c
   1bb78:	cmp	fp, #0
   1bb7c:	cmpne	r3, #0
   1bb80:	movne	r3, #0
   1bb84:	strbne	r3, [fp]
   1bb88:	ldr	r3, [sp, #44]	; 0x2c
   1bb8c:	str	r2, [r3]
   1bb90:	b	1bbbc <__assert_fail@plt+0xa7ec>
   1bb94:	ldr	r2, [sp, #28]
   1bb98:	add	r8, r8, r7
   1bb9c:	sub	r2, r2, r8
   1bba0:	cmp	r2, #1
   1bba4:	sub	r6, r6, r7
   1bba8:	bhi	1c360 <__assert_fail@plt+0xaf90>
   1bbac:	ldr	r2, [sp, #44]	; 0x2c
   1bbb0:	mov	r3, #34	; 0x22
   1bbb4:	str	r3, [r2]
   1bbb8:	mov	r8, #0
   1bbbc:	mov	r0, r8
   1bbc0:	add	sp, sp, #1104	; 0x450
   1bbc4:	add	sp, sp, #12
   1bbc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbcc:	ldr	r3, [sp, #52]	; 0x34
   1bbd0:	mov	r4, r9
   1bbd4:	mov	r5, #0
   1bbd8:	str	r5, [sp, #24]
   1bbdc:	str	r3, [sp, #40]	; 0x28
   1bbe0:	ldrb	r1, [r4, #1]!
   1bbe4:	sub	r3, r1, #35	; 0x23
   1bbe8:	mov	r7, r1
   1bbec:	cmp	r3, #60	; 0x3c
   1bbf0:	ldrls	pc, [pc, r3, lsl #2]
   1bbf4:	b	1bd08 <__assert_fail@plt+0xa938>
   1bbf8:	andeq	fp, r1, r0, lsl #26
   1bbfc:	andeq	fp, r1, r8, lsl #26
   1bc00:	andeq	fp, r1, r8, lsl #26
   1bc04:	andeq	fp, r1, r8, lsl #26
   1bc08:	andeq	fp, r1, r8, lsl #26
   1bc0c:	andeq	fp, r1, r8, lsl #26
   1bc10:	andeq	fp, r1, r8, lsl #26
   1bc14:	andeq	fp, r1, r8, lsl #26
   1bc18:	strdeq	fp, [r1], -r8
   1bc1c:	andeq	fp, r1, r8, lsl #26
   1bc20:	strdeq	fp, [r1], -r8
   1bc24:	andeq	fp, r1, r8, lsl #26
   1bc28:	andeq	fp, r1, r8, lsl #26
   1bc2c:	strdeq	fp, [r1], -r8
   1bc30:	andeq	fp, r1, r8, lsl #26
   1bc34:	andeq	fp, r1, r8, lsl #26
   1bc38:	andeq	fp, r1, r8, lsl #26
   1bc3c:	andeq	fp, r1, r8, lsl #26
   1bc40:	andeq	fp, r1, r8, lsl #26
   1bc44:	andeq	fp, r1, r8, lsl #26
   1bc48:	andeq	fp, r1, r8, lsl #26
   1bc4c:	andeq	fp, r1, r8, lsl #26
   1bc50:	andeq	fp, r1, r8, lsl #26
   1bc54:	andeq	fp, r1, r8, lsl #26
   1bc58:	andeq	fp, r1, r8, lsl #26
   1bc5c:	andeq	fp, r1, r8, lsl #26
   1bc60:	andeq	fp, r1, r8, lsl #26
   1bc64:	andeq	fp, r1, r8, lsl #26
   1bc68:	andeq	fp, r1, r8, lsl #26
   1bc6c:	andeq	fp, r1, r8, lsl #26
   1bc70:	andeq	fp, r1, r8, lsl #26
   1bc74:	andeq	fp, r1, r8, lsl #26
   1bc78:	andeq	fp, r1, r8, lsl #26
   1bc7c:	andeq	fp, r1, r8, lsl #26
   1bc80:	andeq	fp, r1, r8, lsl #26
   1bc84:	andeq	fp, r1, r8, lsl #26
   1bc88:	andeq	fp, r1, r8, lsl #26
   1bc8c:	andeq	fp, r1, r8, lsl #26
   1bc90:	andeq	fp, r1, r8, lsl #26
   1bc94:	andeq	fp, r1, r8, lsl #26
   1bc98:	andeq	fp, r1, r8, lsl #26
   1bc9c:	andeq	fp, r1, r8, lsl #26
   1bca0:	andeq	fp, r1, r8, lsl #26
   1bca4:	andeq	fp, r1, r8, lsl #26
   1bca8:	andeq	fp, r1, r8, lsl #26
   1bcac:	andeq	fp, r1, r8, lsl #26
   1bcb0:	andeq	fp, r1, r8, lsl #26
   1bcb4:	andeq	fp, r1, r8, lsl #26
   1bcb8:	andeq	fp, r1, r8, lsl #26
   1bcbc:	andeq	fp, r1, r8, lsl #26
   1bcc0:	andeq	fp, r1, r8, lsl #26
   1bcc4:	andeq	fp, r1, r8, lsl #26
   1bcc8:	andeq	fp, r1, r8, lsl #26
   1bccc:	andeq	fp, r1, r8, lsl #26
   1bcd0:	andeq	fp, r1, r8, lsl #26
   1bcd4:	andeq	fp, r1, r8, lsl #26
   1bcd8:	andeq	fp, r1, r8, lsl #26
   1bcdc:	andeq	fp, r1, r8, lsl #26
   1bce0:	andeq	fp, r1, r8, lsl #26
   1bce4:	andeq	fp, r1, ip, ror #25
   1bce8:	strdeq	fp, [r1], -r8
   1bcec:	mov	r3, #1
   1bcf0:	str	r3, [sp, #40]	; 0x28
   1bcf4:	b	1bbe0 <__assert_fail@plt+0xa810>
   1bcf8:	str	r1, [sp, #24]
   1bcfc:	b	1bbe0 <__assert_fail@plt+0xa810>
   1bd00:	mov	r5, #1
   1bd04:	b	1bbe0 <__assert_fail@plt+0xa810>
   1bd08:	sub	r3, r1, #48	; 0x30
   1bd0c:	cmp	r3, #9
   1bd10:	bhi	1bd54 <__assert_fail@plt+0xa984>
   1bd14:	mov	r6, #0
   1bd18:	mvn	r7, #-2147483648	; 0x80000000
   1bd1c:	cmp	r6, #0
   1bd20:	blt	1c024 <__assert_fail@plt+0xac54>
   1bd24:	ldr	r3, [pc, #3304]	; 1ca14 <__assert_fail@plt+0xb644>
   1bd28:	cmp	r6, r3
   1bd2c:	ble	1c040 <__assert_fail@plt+0xac70>
   1bd30:	mov	r3, r4
   1bd34:	ldrb	r1, [r3, #1]
   1bd38:	add	r4, r3, #1
   1bd3c:	mov	r3, r4
   1bd40:	sub	r2, r1, #48	; 0x30
   1bd44:	cmp	r2, #9
   1bd48:	bls	1bd34 <__assert_fail@plt+0xa964>
   1bd4c:	mov	r7, r1
   1bd50:	mvn	r6, #-2147483648	; 0x80000000
   1bd54:	cmp	r1, #69	; 0x45
   1bd58:	beq	1bf74 <__assert_fail@plt+0xaba4>
   1bd5c:	cmp	r1, #79	; 0x4f
   1bd60:	movne	r7, #0
   1bd64:	beq	1bf74 <__assert_fail@plt+0xaba4>
   1bd68:	cmp	r1, #122	; 0x7a
   1bd6c:	ldrls	pc, [pc, r1, lsl #2]
   1bd70:	b	1bf84 <__assert_fail@plt+0xabb4>
   1bd74:	andeq	fp, r1, r0, lsl #31
   1bd78:	andeq	fp, r1, r4, lsl #31
   1bd7c:	andeq	fp, r1, r4, lsl #31
   1bd80:	andeq	fp, r1, r4, lsl #31
   1bd84:	andeq	fp, r1, r4, lsl #31
   1bd88:	andeq	fp, r1, r4, lsl #31
   1bd8c:	andeq	fp, r1, r4, lsl #31
   1bd90:	andeq	fp, r1, r4, lsl #31
   1bd94:	andeq	fp, r1, r4, lsl #31
   1bd98:	andeq	fp, r1, r4, lsl #31
   1bd9c:	andeq	fp, r1, r4, lsl #31
   1bda0:	andeq	fp, r1, r4, lsl #31
   1bda4:	andeq	fp, r1, r4, lsl #31
   1bda8:	andeq	fp, r1, r4, lsl #31
   1bdac:	andeq	fp, r1, r4, lsl #31
   1bdb0:	andeq	fp, r1, r4, lsl #31
   1bdb4:	andeq	fp, r1, r4, lsl #31
   1bdb8:	andeq	fp, r1, r4, lsl #31
   1bdbc:	andeq	fp, r1, r4, lsl #31
   1bdc0:	andeq	fp, r1, r4, lsl #31
   1bdc4:	andeq	fp, r1, r4, lsl #31
   1bdc8:	andeq	fp, r1, r4, lsl #31
   1bdcc:	andeq	fp, r1, r4, lsl #31
   1bdd0:	andeq	fp, r1, r4, lsl #31
   1bdd4:	andeq	fp, r1, r4, lsl #31
   1bdd8:	andeq	fp, r1, r4, lsl #31
   1bddc:	andeq	fp, r1, r4, lsl #31
   1bde0:	andeq	fp, r1, r4, lsl #31
   1bde4:	andeq	fp, r1, r4, lsl #31
   1bde8:	andeq	fp, r1, r4, lsl #31
   1bdec:	andeq	fp, r1, r4, lsl #31
   1bdf0:	andeq	fp, r1, r4, lsl #31
   1bdf4:	andeq	fp, r1, r4, lsl #31
   1bdf8:	andeq	fp, r1, r4, lsl #31
   1bdfc:	andeq	fp, r1, r4, lsl #31
   1be00:	andeq	fp, r1, r4, lsl #31
   1be04:	andeq	fp, r1, r4, lsl #31
   1be08:	muleq	r1, r4, sp
   1be0c:	andeq	fp, r1, r4, lsl #31
   1be10:	andeq	fp, r1, r4, lsl #31
   1be14:	andeq	fp, r1, r4, lsl #31
   1be18:	andeq	fp, r1, r4, lsl #31
   1be1c:	andeq	fp, r1, r4, lsl #31
   1be20:	andeq	fp, r1, r4, lsl #31
   1be24:	andeq	fp, r1, r4, lsl #31
   1be28:	andeq	fp, r1, r4, lsl #31
   1be2c:	andeq	fp, r1, r4, lsl #31
   1be30:	andeq	fp, r1, r4, lsl #31
   1be34:	andeq	fp, r1, r4, lsl #31
   1be38:	andeq	fp, r1, r4, lsl #31
   1be3c:	andeq	fp, r1, r4, lsl #31
   1be40:	andeq	fp, r1, r4, lsl #31
   1be44:	andeq	fp, r1, r4, lsl #31
   1be48:	andeq	fp, r1, r4, lsl #31
   1be4c:	andeq	fp, r1, r4, lsl #31
   1be50:	andeq	fp, r1, r4, lsl #31
   1be54:	andeq	fp, r1, r4, lsl #31
   1be58:	andeq	fp, r1, r4, lsl #31
   1be5c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1be60:	andeq	fp, r1, r4, lsl #31
   1be64:	andeq	fp, r1, r4, lsl #31
   1be68:	andeq	fp, r1, r4, lsl #31
   1be6c:	andeq	fp, r1, r4, lsl #31
   1be70:	andeq	fp, r1, r4, lsl #31
   1be74:	andeq	fp, r1, r4, lsl #31
   1be78:	andeq	ip, r1, ip, lsl #8
   1be7c:	andeq	ip, r1, r8, ror #1
   1be80:			; <UNDEFINED> instruction: 0x0001c7b0
   1be84:	andeq	ip, r1, r0, lsr #13
   1be88:	andeq	fp, r1, r4, lsl #31
   1be8c:	andeq	ip, r1, r4, ror ip
   1be90:	andeq	ip, r1, ip, ror #21
   1be94:	strdeq	ip, [r1], -r4
   1be98:	andeq	ip, r1, r0, lsr #25
   1be9c:	andeq	fp, r1, r4, lsl #31
   1bea0:	andeq	fp, r1, r4, lsl #31
   1bea4:	andeq	fp, r1, r4, lsl #31
   1bea8:	andeq	ip, r1, ip, ror sp
   1beac:	andeq	ip, r1, r8, asr lr
   1beb0:	andeq	fp, r1, r4, lsl #31
   1beb4:	andeq	ip, r1, r0, asr lr
   1beb8:	andeq	fp, r1, r4, lsl #31
   1bebc:	andeq	ip, r1, r4, asr #28
   1bec0:	andeq	ip, r1, ip, lsr #28
   1bec4:	andeq	ip, r1, r0, lsr #28
   1bec8:	andeq	ip, r1, ip, lsr r8
   1becc:	andeq	ip, r1, ip, ror #21
   1bed0:			; <UNDEFINED> instruction: 0x0001cfb8
   1bed4:	andeq	ip, r1, r0, lsl #8
   1bed8:	andeq	ip, r1, r8, lsr r6
   1bedc:	andeq	ip, r1, r8, lsl #11
   1bee0:	andeq	fp, r1, r4, lsl #31
   1bee4:	andeq	fp, r1, r4, lsl #31
   1bee8:	andeq	fp, r1, r4, lsl #31
   1beec:	andeq	fp, r1, r4, lsl #31
   1bef0:	andeq	fp, r1, r4, lsl #31
   1bef4:	andeq	fp, r1, r4, lsl #31
   1bef8:	andeq	ip, r1, ip, lsl #8
   1befc:	andeq	ip, r1, r0, lsl #10
   1bf00:	andeq	ip, r1, r0, lsl #8
   1bf04:	andeq	ip, r1, r0, lsl r2
   1bf08:			; <UNDEFINED> instruction: 0x0001c8b0
   1bf0c:	andeq	fp, r1, r4, lsl #31
   1bf10:	andeq	ip, r1, ip, ror #21
   1bf14:	andeq	ip, r1, r0, lsl #10
   1bf18:	andeq	fp, r1, r4, lsl #31
   1bf1c:	andeq	ip, r1, r4, ror r8
   1bf20:	andeq	ip, r1, r4, lsr #19
   1bf24:	muleq	r1, r4, r9
   1bf28:	andeq	ip, r1, r8, asr r9
   1bf2c:	ldrdeq	ip, [r1], -r8
   1bf30:	andeq	fp, r1, r4, lsl #31
   1bf34:	andeq	ip, r1, ip, ror #19
   1bf38:			; <UNDEFINED> instruction: 0x0001c9b8
   1bf3c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bf40:	andeq	ip, r1, r4, asr sl
   1bf44:	andeq	ip, r1, r0, lsl #26
   1bf48:	andeq	ip, r1, ip, asr #25
   1bf4c:	andeq	fp, r1, r4, lsl #31
   1bf50:			; <UNDEFINED> instruction: 0x0001ccb4
   1bf54:	andeq	ip, r1, r0, lsl #8
   1bf58:	andeq	ip, r1, r4, lsr #10
   1bf5c:	andeq	ip, r1, r4, asr #8
   1bf60:	ldr	r2, [sp, #48]	; 0x30
   1bf64:	subs	r3, r2, #0
   1bf68:	moveq	r3, #12
   1bf6c:	str	r3, [sp, #48]	; 0x30
   1bf70:	b	1bae8 <__assert_fail@plt+0xa718>
   1bf74:	ldrb	r1, [r4, #1]
   1bf78:	add	r4, r4, #1
   1bf7c:	b	1bd68 <__assert_fail@plt+0xa998>
   1bf80:	sub	r4, r4, #1
   1bf84:	ldr	r3, [sp, #24]
   1bf88:	sub	r5, r4, r9
   1bf8c:	subs	r3, r3, #45	; 0x2d
   1bf90:	movne	r3, #1
   1bf94:	cmp	r6, #0
   1bf98:	movlt	r3, #0
   1bf9c:	cmp	r3, #0
   1bfa0:	add	r5, r5, #1
   1bfa4:	moveq	r6, #0
   1bfa8:	ldr	r3, [sp, #28]
   1bfac:	cmp	r5, r6
   1bfb0:	movcs	r7, r5
   1bfb4:	movcc	r7, r6
   1bfb8:	sub	r3, r3, r8
   1bfbc:	cmp	r7, r3
   1bfc0:	bcs	1bbac <__assert_fail@plt+0xa7dc>
   1bfc4:	cmp	fp, #0
   1bfc8:	beq	1c01c <__assert_fail@plt+0xac4c>
   1bfcc:	cmp	r5, r6
   1bfd0:	bcs	1bffc <__assert_fail@plt+0xac2c>
   1bfd4:	ldr	r3, [sp, #24]
   1bfd8:	sub	r6, r6, r5
   1bfdc:	cmp	r3, #43	; 0x2b
   1bfe0:	cmpne	r3, #48	; 0x30
   1bfe4:	mov	r0, fp
   1bfe8:	mov	r2, r6
   1bfec:	moveq	r1, #48	; 0x30
   1bff0:	movne	r1, #32
   1bff4:	bl	112c8 <memset@plt>
   1bff8:	add	fp, fp, r6
   1bffc:	ldr	r3, [sp, #40]	; 0x28
   1c000:	mov	r1, r9
   1c004:	cmp	r3, #0
   1c008:	mov	r2, r5
   1c00c:	mov	r0, fp
   1c010:	beq	1c3f8 <__assert_fail@plt+0xb028>
   1c014:	bl	1ba34 <__assert_fail@plt+0xa664>
   1c018:	add	fp, fp, r5
   1c01c:	add	r8, r8, r7
   1c020:	b	1bb5c <__assert_fail@plt+0xa78c>
   1c024:	cmn	r6, #1
   1c028:	beq	1c0bc <__assert_fail@plt+0xacec>
   1c02c:	mov	r1, r6
   1c030:	mov	r0, #-2147483648	; 0x80000000
   1c034:	bl	1d774 <__assert_fail@plt+0xc3a4>
   1c038:	cmp	r0, #9
   1c03c:	ble	1bd30 <__assert_fail@plt+0xa960>
   1c040:	ldrb	r0, [r4]
   1c044:	add	r6, r6, r6, lsl #2
   1c048:	cmp	r0, #47	; 0x2f
   1c04c:	lsl	r3, r6, #1
   1c050:	mov	r1, r3
   1c054:	ble	1c0d4 <__assert_fail@plt+0xad04>
   1c058:	cmp	r3, #0
   1c05c:	blt	1c098 <__assert_fail@plt+0xacc8>
   1c060:	sub	r2, r0, #48	; 0x30
   1c064:	sub	r2, r7, r2
   1c068:	cmp	r3, r2
   1c06c:	movle	r2, #0
   1c070:	movgt	r2, #1
   1c074:	cmp	r2, #0
   1c078:	beq	1c098 <__assert_fail@plt+0xacc8>
   1c07c:	ldrb	r1, [r4, #1]
   1c080:	add	r3, r4, #1
   1c084:	sub	r2, r1, #48	; 0x30
   1c088:	cmp	r2, #9
   1c08c:	bls	1bd34 <__assert_fail@plt+0xa964>
   1c090:	mov	r4, r3
   1c094:	b	1bd4c <__assert_fail@plt+0xa97c>
   1c098:	ldrb	r1, [r4, #1]
   1c09c:	add	r3, r0, r3
   1c0a0:	sub	r6, r3, #48	; 0x30
   1c0a4:	sub	r3, r1, #48	; 0x30
   1c0a8:	cmp	r3, #9
   1c0ac:	add	r4, r4, #1
   1c0b0:	bls	1bd1c <__assert_fail@plt+0xa94c>
   1c0b4:	mov	r7, r1
   1c0b8:	b	1bd54 <__assert_fail@plt+0xa984>
   1c0bc:	ldrb	r0, [r4]
   1c0c0:	cmp	r0, #47	; 0x2f
   1c0c4:	mvngt	r3, #9
   1c0c8:	bgt	1c098 <__assert_fail@plt+0xacc8>
   1c0cc:	mvn	r1, #9
   1c0d0:	mov	r3, r1
   1c0d4:	rsb	r2, r0, #-2147483600	; 0x80000030
   1c0d8:	cmp	r2, r1
   1c0dc:	movle	r2, #0
   1c0e0:	movgt	r2, #1
   1c0e4:	b	1c074 <__assert_fail@plt+0xaca4>
   1c0e8:	cmp	r7, #69	; 0x45
   1c0ec:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c0f0:	cmp	r5, #0
   1c0f4:	beq	1c100 <__assert_fail@plt+0xad30>
   1c0f8:	str	r5, [sp, #40]	; 0x28
   1c0fc:	mov	r5, #0
   1c100:	cmp	r7, #0
   1c104:	mov	r2, #32
   1c108:	mov	r3, #37	; 0x25
   1c10c:	strb	r2, [sp, #72]	; 0x48
   1c110:	strb	r3, [sp, #73]	; 0x49
   1c114:	addeq	r9, sp, #72	; 0x48
   1c118:	addeq	ip, sp, #74	; 0x4a
   1c11c:	bne	1c200 <__assert_fail@plt+0xae30>
   1c120:	mov	lr, #0
   1c124:	strb	r1, [ip]
   1c128:	mov	r2, r9
   1c12c:	add	r0, sp, #88	; 0x58
   1c130:	ldr	r3, [sp, #32]
   1c134:	strb	lr, [ip, #1]
   1c138:	mov	r1, #1024	; 0x400
   1c13c:	bl	111fc <strftime@plt>
   1c140:	cmp	r0, #0
   1c144:	beq	1bb5c <__assert_fail@plt+0xa78c>
   1c148:	ldr	r2, [sp, #24]
   1c14c:	mvn	r3, r6
   1c150:	cmp	r2, #45	; 0x2d
   1c154:	lsr	r3, r3, #31
   1c158:	moveq	r3, #0
   1c15c:	cmp	r3, #0
   1c160:	sub	r7, r0, #1
   1c164:	moveq	r6, #0
   1c168:	ldr	r3, [sp, #28]
   1c16c:	cmp	r7, r6
   1c170:	movcs	r9, r7
   1c174:	movcc	r9, r6
   1c178:	sub	r3, r3, r8
   1c17c:	cmp	r9, r3
   1c180:	bcs	1bbac <__assert_fail@plt+0xa7dc>
   1c184:	cmp	fp, #0
   1c188:	beq	1c1e4 <__assert_fail@plt+0xae14>
   1c18c:	cmp	r7, r6
   1c190:	bcs	1c1bc <__assert_fail@plt+0xadec>
   1c194:	ldr	r3, [sp, #24]
   1c198:	sub	r6, r6, r7
   1c19c:	cmp	r3, #43	; 0x2b
   1c1a0:	cmpne	r3, #48	; 0x30
   1c1a4:	mov	r0, fp
   1c1a8:	mov	r2, r6
   1c1ac:	moveq	r1, #48	; 0x30
   1c1b0:	movne	r1, #32
   1c1b4:	bl	112c8 <memset@plt>
   1c1b8:	add	fp, fp, r6
   1c1bc:	cmp	r5, #0
   1c1c0:	bne	1d02c <__assert_fail@plt+0xbc5c>
   1c1c4:	ldr	r3, [sp, #40]	; 0x28
   1c1c8:	add	r1, sp, #89	; 0x59
   1c1cc:	cmp	r3, #0
   1c1d0:	mov	r2, r7
   1c1d4:	mov	r0, fp
   1c1d8:	beq	1c3f0 <__assert_fail@plt+0xb020>
   1c1dc:	bl	1ba34 <__assert_fail@plt+0xa664>
   1c1e0:	add	fp, fp, r7
   1c1e4:	add	r8, r8, r9
   1c1e8:	b	1bb5c <__assert_fail@plt+0xa78c>
   1c1ec:	mov	r5, #0
   1c1f0:	mov	r2, #32
   1c1f4:	mov	r3, #37	; 0x25
   1c1f8:	strb	r2, [sp, #72]	; 0x48
   1c1fc:	strb	r3, [sp, #73]	; 0x49
   1c200:	add	r9, sp, #72	; 0x48
   1c204:	strb	r7, [sp, #74]	; 0x4a
   1c208:	add	ip, r9, #3
   1c20c:	b	1c120 <__assert_fail@plt+0xad50>
   1c210:	cmp	r7, #69	; 0x45
   1c214:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c218:	ldr	r3, [sp, #32]
   1c21c:	mov	lr, #2
   1c220:	ldr	r2, [r3, #12]
   1c224:	mov	r3, r2
   1c228:	mov	r0, #0
   1c22c:	lsr	r2, r2, #31
   1c230:	cmp	r3, r0
   1c234:	str	r2, [sp, #36]	; 0x24
   1c238:	mov	ip, r0
   1c23c:	movlt	r2, #0
   1c240:	movge	r2, #1
   1c244:	cmp	r7, #79	; 0x4f
   1c248:	movne	r2, #0
   1c24c:	andeq	r2, r2, #1
   1c250:	cmp	r2, #0
   1c254:	uxtbne	r1, r1
   1c258:	bne	1c1ec <__assert_fail@plt+0xae1c>
   1c25c:	ldr	r2, [sp, #36]	; 0x24
   1c260:	cmp	r2, #0
   1c264:	rsbne	r3, r3, #0
   1c268:	add	r9, sp, #72	; 0x48
   1c26c:	add	r5, r9, #14
   1c270:	mov	r2, r5
   1c274:	mov	r5, r3
   1c278:	mov	r3, r2
   1c27c:	tst	r0, #1
   1c280:	movne	r2, #58	; 0x3a
   1c284:	mov	r7, r3
   1c288:	strbne	r2, [r3, #-1]
   1c28c:	subne	r7, r3, #1
   1c290:	ldr	r3, [pc, #1920]	; 1ca18 <__assert_fail@plt+0xb648>
   1c294:	asrs	r0, r0, #1
   1c298:	movne	r1, #1
   1c29c:	umull	r3, r2, r3, r5
   1c2a0:	moveq	r1, #0
   1c2a4:	lsr	r2, r2, #3
   1c2a8:	cmp	r2, #0
   1c2ac:	orrne	r1, r1, #1
   1c2b0:	add	r3, r2, r2, lsl #2
   1c2b4:	cmp	r1, #0
   1c2b8:	sub	r3, r5, r3, lsl #1
   1c2bc:	add	r3, r3, #48	; 0x30
   1c2c0:	strb	r3, [r7, #-1]
   1c2c4:	mov	r5, r2
   1c2c8:	sub	r3, r7, #1
   1c2cc:	bne	1c27c <__assert_fail@plt+0xaeac>
   1c2d0:	mov	r5, r3
   1c2d4:	ldr	r3, [sp, #24]
   1c2d8:	cmp	r3, #0
   1c2dc:	beq	1d018 <__assert_fail@plt+0xbc48>
   1c2e0:	subs	r3, r3, #45	; 0x2d
   1c2e4:	movne	r3, #1
   1c2e8:	str	r3, [sp, #64]	; 0x40
   1c2ec:	ldr	r3, [sp, #36]	; 0x24
   1c2f0:	cmp	r6, #0
   1c2f4:	movlt	r6, lr
   1c2f8:	cmp	r3, #0
   1c2fc:	bne	1d00c <__assert_fail@plt+0xbc3c>
   1c300:	cmp	ip, #0
   1c304:	beq	1d040 <__assert_fail@plt+0xbc70>
   1c308:	mov	r3, #43	; 0x2b
   1c30c:	str	r3, [sp, #36]	; 0x24
   1c310:	add	r3, r9, #14
   1c314:	sub	r3, r3, r5
   1c318:	sub	r7, r6, #1
   1c31c:	ldr	r2, [sp, #64]	; 0x40
   1c320:	sub	r7, r7, r3
   1c324:	cmp	r7, #0
   1c328:	movle	r2, #0
   1c32c:	andgt	r2, r2, #1
   1c330:	cmp	r2, #0
   1c334:	ldr	r2, [sp, #24]
   1c338:	moveq	r7, #0
   1c33c:	cmp	r2, #95	; 0x5f
   1c340:	beq	1d074 <__assert_fail@plt+0xbca4>
   1c344:	ldr	r2, [sp, #28]
   1c348:	sub	r2, r2, r8
   1c34c:	cmp	r2, #1
   1c350:	bls	1bbac <__assert_fail@plt+0xa7dc>
   1c354:	cmp	fp, #0
   1c358:	ldrbne	r2, [sp, #36]	; 0x24
   1c35c:	strbne	r2, [fp], #1
   1c360:	ldr	r9, [sp, #64]	; 0x40
   1c364:	sub	r6, r6, #1
   1c368:	cmp	r6, #0
   1c36c:	movlt	r9, #0
   1c370:	andge	r9, r9, #1
   1c374:	cmp	r9, #0
   1c378:	add	r8, r8, #1
   1c37c:	mov	r7, r3
   1c380:	moveq	r6, r9
   1c384:	ldr	r3, [sp, #28]
   1c388:	cmp	r6, r7
   1c38c:	movcs	r9, r6
   1c390:	movcc	r9, r7
   1c394:	sub	r3, r3, r8
   1c398:	cmp	r9, r3
   1c39c:	bcs	1bbac <__assert_fail@plt+0xa7dc>
   1c3a0:	cmp	fp, #0
   1c3a4:	beq	1c1e4 <__assert_fail@plt+0xae14>
   1c3a8:	cmp	r6, r7
   1c3ac:	bls	1c3d8 <__assert_fail@plt+0xb008>
   1c3b0:	ldr	r3, [sp, #24]
   1c3b4:	sub	r6, r6, r7
   1c3b8:	cmp	r3, #43	; 0x2b
   1c3bc:	cmpne	r3, #48	; 0x30
   1c3c0:	mov	r0, fp
   1c3c4:	mov	r2, r6
   1c3c8:	moveq	r1, #48	; 0x30
   1c3cc:	movne	r1, #32
   1c3d0:	bl	112c8 <memset@plt>
   1c3d4:	add	fp, fp, r6
   1c3d8:	ldr	r3, [sp, #40]	; 0x28
   1c3dc:	mov	r1, r5
   1c3e0:	cmp	r3, #0
   1c3e4:	mov	r2, r7
   1c3e8:	mov	r0, fp
   1c3ec:	bne	1c1dc <__assert_fail@plt+0xae0c>
   1c3f0:	bl	110f4 <memcpy@plt>
   1c3f4:	b	1c1e0 <__assert_fail@plt+0xae10>
   1c3f8:	bl	110f4 <memcpy@plt>
   1c3fc:	b	1c018 <__assert_fail@plt+0xac48>
   1c400:	cmp	r7, #79	; 0x4f
   1c404:	bne	1c0fc <__assert_fail@plt+0xad2c>
   1c408:	b	1bf84 <__assert_fail@plt+0xabb4>
   1c40c:	cmp	r7, #0
   1c410:	bne	1bf84 <__assert_fail@plt+0xabb4>
   1c414:	ldr	r3, [sp, #40]	; 0x28
   1c418:	cmp	r5, #0
   1c41c:	moveq	r5, r3
   1c420:	mov	r2, #32
   1c424:	mov	r3, #37	; 0x25
   1c428:	add	r9, sp, #72	; 0x48
   1c42c:	str	r5, [sp, #40]	; 0x28
   1c430:	strb	r2, [sp, #72]	; 0x48
   1c434:	strb	r3, [sp, #73]	; 0x49
   1c438:	add	ip, r9, #2
   1c43c:	mov	r5, #0
   1c440:	b	1c120 <__assert_fail@plt+0xad50>
   1c444:	mov	lr, #0
   1c448:	ldr	r2, [sp, #32]
   1c44c:	ldr	r3, [r2, #32]
   1c450:	cmp	r3, #0
   1c454:	blt	1bb5c <__assert_fail@plt+0xa78c>
   1c458:	ldr	ip, [r2, #36]	; 0x24
   1c45c:	mov	r3, r2
   1c460:	cmp	ip, #0
   1c464:	blt	1d320 <__assert_fail@plt+0xbf50>
   1c468:	movne	r3, #0
   1c46c:	strne	r3, [sp, #36]	; 0x24
   1c470:	bne	1c48c <__assert_fail@plt+0xb0bc>
   1c474:	ldr	r3, [sp, #56]	; 0x38
   1c478:	ldrb	r3, [r3]
   1c47c:	sub	r3, r3, #45	; 0x2d
   1c480:	clz	r3, r3
   1c484:	lsr	r3, r3, #5
   1c488:	str	r3, [sp, #36]	; 0x24
   1c48c:	ldr	r3, [pc, #1416]	; 1ca1c <__assert_fail@plt+0xb64c>
   1c490:	smull	r3, r2, r3, ip
   1c494:	ldr	r3, [pc, #1412]	; 1ca20 <__assert_fail@plt+0xb650>
   1c498:	add	r2, r2, ip
   1c49c:	smull	r3, r5, r3, ip
   1c4a0:	add	r0, r5, ip
   1c4a4:	asr	r3, ip, #31
   1c4a8:	str	r0, [sp, #64]	; 0x40
   1c4ac:	ldr	r0, [pc, #1384]	; 1ca1c <__assert_fail@plt+0xb64c>
   1c4b0:	rsb	r2, r3, r2, asr #5
   1c4b4:	smull	r5, r0, r0, r2
   1c4b8:	add	r0, r0, r2
   1c4bc:	asr	r5, r2, #31
   1c4c0:	rsb	r0, r5, r0, asr #5
   1c4c4:	rsb	r5, r2, r2, lsl #4
   1c4c8:	rsb	r0, r0, r0, lsl #4
   1c4cc:	str	r0, [sp, #68]	; 0x44
   1c4d0:	ldr	r0, [sp, #64]	; 0x40
   1c4d4:	sub	ip, ip, r5, lsl #2
   1c4d8:	rsb	r3, r3, r0, asr #11
   1c4dc:	ldr	r0, [sp, #68]	; 0x44
   1c4e0:	sub	r0, r2, r0, lsl #2
   1c4e4:	cmp	lr, #3
   1c4e8:	ldrls	pc, [pc, lr, lsl #2]
   1c4ec:	b	1bf84 <__assert_fail@plt+0xabb4>
   1c4f0:	andeq	sp, r1, r4, asr #7
   1c4f4:	andeq	sp, r1, r4, lsr #7
   1c4f8:	andeq	sp, r1, r8, ror r3
   1c4fc:	andeq	sp, r1, r4, asr r3
   1c500:	ldr	r3, [sp, #40]	; 0x28
   1c504:	cmp	r5, #0
   1c508:	movne	r3, r5
   1c50c:	cmp	r7, #69	; 0x45
   1c510:	str	r3, [sp, #40]	; 0x28
   1c514:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c518:	uxtb	r1, r1
   1c51c:	mov	r5, #0
   1c520:	b	1c100 <__assert_fail@plt+0xad30>
   1c524:	cmp	r7, #69	; 0x45
   1c528:	beq	1c1ec <__assert_fail@plt+0xae1c>
   1c52c:	ldr	r3, [sp, #32]
   1c530:	mov	r0, #100	; 0x64
   1c534:	ldr	r2, [r3, #20]
   1c538:	ldr	r3, [pc, #1272]	; 1ca38 <__assert_fail@plt+0xb668>
   1c53c:	smull	r3, ip, r3, r2
   1c540:	asr	r3, r2, #31
   1c544:	rsb	r3, r3, ip, asr #5
   1c548:	mul	r3, r0, r3
   1c54c:	subs	r3, r2, r3
   1c550:	bmi	1d284 <__assert_fail@plt+0xbeb4>
   1c554:	ldr	r2, [sp, #24]
   1c558:	cmp	r2, #0
   1c55c:	beq	1cc50 <__assert_fail@plt+0xb880>
   1c560:	mov	r2, #1
   1c564:	mov	r0, #0
   1c568:	str	r0, [sp, #36]	; 0x24
   1c56c:	ldr	r0, [sp, #24]
   1c570:	cmp	r0, #43	; 0x2b
   1c574:	beq	1d0dc <__assert_fail@plt+0xbd0c>
   1c578:	mov	ip, #0
   1c57c:	mov	lr, #2
   1c580:	mov	r0, #0
   1c584:	b	1c244 <__assert_fail@plt+0xae74>
   1c588:	ldr	r0, [sp, #56]	; 0x38
   1c58c:	bl	11274 <strlen@plt>
   1c590:	ldr	r2, [sp, #24]
   1c594:	mvn	r3, r6
   1c598:	cmp	r2, #45	; 0x2d
   1c59c:	lsr	r3, r3, #31
   1c5a0:	moveq	r3, #0
   1c5a4:	cmp	r3, #0
   1c5a8:	moveq	r6, #0
   1c5ac:	ldr	r3, [sp, #40]	; 0x28
   1c5b0:	cmp	r5, #0
   1c5b4:	movne	r3, #0
   1c5b8:	str	r3, [sp, #40]	; 0x28
   1c5bc:	ldr	r3, [sp, #28]
   1c5c0:	sub	r3, r3, r8
   1c5c4:	cmp	r0, r6
   1c5c8:	movcs	r9, r0
   1c5cc:	movcc	r9, r6
   1c5d0:	cmp	r9, r3
   1c5d4:	mov	r7, r0
   1c5d8:	bcs	1bbac <__assert_fail@plt+0xa7dc>
   1c5dc:	cmp	fp, #0
   1c5e0:	beq	1c1e4 <__assert_fail@plt+0xae14>
   1c5e4:	cmp	r0, r6
   1c5e8:	bcs	1c614 <__assert_fail@plt+0xb244>
   1c5ec:	ldr	r3, [sp, #24]
   1c5f0:	sub	r6, r6, r0
   1c5f4:	cmp	r3, #43	; 0x2b
   1c5f8:	cmpne	r3, #48	; 0x30
   1c5fc:	mov	r0, fp
   1c600:	mov	r2, r6
   1c604:	moveq	r1, #48	; 0x30
   1c608:	movne	r1, #32
   1c60c:	bl	112c8 <memset@plt>
   1c610:	add	fp, fp, r6
   1c614:	cmp	r5, #0
   1c618:	bne	1d1c4 <__assert_fail@plt+0xbdf4>
   1c61c:	ldr	r3, [sp, #40]	; 0x28
   1c620:	mov	r2, r7
   1c624:	cmp	r3, #0
   1c628:	ldr	r1, [sp, #56]	; 0x38
   1c62c:	mov	r0, fp
   1c630:	beq	1c3f0 <__assert_fail@plt+0xb020>
   1c634:	b	1c1dc <__assert_fail@plt+0xae0c>
   1c638:	cmp	r7, #69	; 0x45
   1c63c:	beq	1c1ec <__assert_fail@plt+0xae1c>
   1c640:	cmp	r7, #79	; 0x4f
   1c644:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c648:	ldr	r3, [sp, #32]
   1c64c:	ldr	r0, [pc, #1012]	; 1ca48 <__assert_fail@plt+0xb678>
   1c650:	ldr	r2, [r3, #20]
   1c654:	cmp	r2, r0
   1c658:	movge	ip, #0
   1c65c:	movlt	ip, #1
   1c660:	str	ip, [sp, #36]	; 0x24
   1c664:	ldr	ip, [sp, #24]
   1c668:	add	r3, r2, #1888	; 0x760
   1c66c:	cmp	ip, #0
   1c670:	add	r3, r3, #12
   1c674:	bne	1d0ac <__assert_fail@plt+0xbcdc>
   1c678:	ldr	ip, [sp, #1156]	; 0x484
   1c67c:	cmp	r2, r0
   1c680:	movlt	r2, #0
   1c684:	movge	r2, #1
   1c688:	cmp	ip, #43	; 0x2b
   1c68c:	beq	1d32c <__assert_fail@plt+0xbf5c>
   1c690:	str	ip, [sp, #24]
   1c694:	mov	lr, #4
   1c698:	mov	ip, #0
   1c69c:	b	1c580 <__assert_fail@plt+0xb1b0>
   1c6a0:	cmp	r7, #0
   1c6a4:	bne	1bf84 <__assert_fail@plt+0xabb4>
   1c6a8:	ldr	r7, [pc, #884]	; 1ca24 <__assert_fail@plt+0xb654>
   1c6ac:	mvn	r5, #0
   1c6b0:	ldr	r3, [sp, #1172]	; 0x494
   1c6b4:	ldr	r2, [sp, #40]	; 0x28
   1c6b8:	str	r3, [sp, #20]
   1c6bc:	ldr	r3, [sp, #1168]	; 0x490
   1c6c0:	str	r2, [sp]
   1c6c4:	str	r3, [sp, #16]
   1c6c8:	ldr	r3, [sp, #1164]	; 0x48c
   1c6cc:	str	r5, [sp, #8]
   1c6d0:	str	r3, [sp, #12]
   1c6d4:	ldr	r3, [sp, #24]
   1c6d8:	mov	r2, r7
   1c6dc:	str	r3, [sp, #4]
   1c6e0:	mvn	r1, #0
   1c6e4:	ldr	r3, [sp, #32]
   1c6e8:	mov	r0, #0
   1c6ec:	bl	1ba74 <__assert_fail@plt+0xa6a4>
   1c6f0:	ldr	r3, [sp, #24]
   1c6f4:	cmp	r3, #45	; 0x2d
   1c6f8:	moveq	r3, #0
   1c6fc:	bicne	r3, r6, r6, asr #31
   1c700:	mov	r9, r0
   1c704:	ldr	r1, [sp, #28]
   1c708:	cmp	r3, r9
   1c70c:	movcs	r2, r3
   1c710:	movcc	r2, r9
   1c714:	sub	r1, r1, r8
   1c718:	cmp	r2, r1
   1c71c:	str	r2, [sp, #36]	; 0x24
   1c720:	str	r1, [sp, #64]	; 0x40
   1c724:	bcs	1bbac <__assert_fail@plt+0xa7dc>
   1c728:	cmp	fp, #0
   1c72c:	beq	1c7a4 <__assert_fail@plt+0xb3d4>
   1c730:	cmp	r3, r9
   1c734:	bls	1c760 <__assert_fail@plt+0xb390>
   1c738:	ldr	r2, [sp, #24]
   1c73c:	sub	r6, r3, r9
   1c740:	cmp	r2, #43	; 0x2b
   1c744:	cmpne	r2, #48	; 0x30
   1c748:	mov	r0, fp
   1c74c:	mov	r2, r6
   1c750:	moveq	r1, #48	; 0x30
   1c754:	movne	r1, #32
   1c758:	bl	112c8 <memset@plt>
   1c75c:	add	fp, fp, r6
   1c760:	ldr	r3, [sp, #1172]	; 0x494
   1c764:	mov	r0, fp
   1c768:	str	r3, [sp, #20]
   1c76c:	ldr	r3, [sp, #1168]	; 0x490
   1c770:	str	r5, [sp, #8]
   1c774:	str	r3, [sp, #16]
   1c778:	ldr	r3, [sp, #1164]	; 0x48c
   1c77c:	mov	r2, r7
   1c780:	str	r3, [sp, #12]
   1c784:	ldr	r3, [sp, #24]
   1c788:	ldr	r1, [sp, #64]	; 0x40
   1c78c:	str	r3, [sp, #4]
   1c790:	ldr	r3, [sp, #40]	; 0x28
   1c794:	add	fp, fp, r9
   1c798:	str	r3, [sp]
   1c79c:	ldr	r3, [sp, #32]
   1c7a0:	bl	1ba74 <__assert_fail@plt+0xa6a4>
   1c7a4:	ldr	r3, [sp, #36]	; 0x24
   1c7a8:	add	r8, r8, r3
   1c7ac:	b	1bb5c <__assert_fail@plt+0xa78c>
   1c7b0:	cmp	r7, #69	; 0x45
   1c7b4:	beq	1c1ec <__assert_fail@plt+0xae1c>
   1c7b8:	ldr	r3, [sp, #32]
   1c7bc:	ldr	r0, [pc, #612]	; 1ca28 <__assert_fail@plt+0xb658>
   1c7c0:	mvn	ip, #98	; 0x62
   1c7c4:	ldr	r2, [r3, #20]
   1c7c8:	add	r3, r2, #1888	; 0x760
   1c7cc:	add	r3, r3, #12
   1c7d0:	cmp	r3, r0
   1c7d4:	ldr	r0, [pc, #620]	; 1ca48 <__assert_fail@plt+0xb678>
   1c7d8:	movhi	r3, #0
   1c7dc:	movls	r3, #1
   1c7e0:	cmp	r2, r0
   1c7e4:	mla	r3, ip, r3, r2
   1c7e8:	movge	ip, #0
   1c7ec:	movlt	ip, #1
   1c7f0:	str	ip, [sp, #36]	; 0x24
   1c7f4:	ldr	ip, [sp, #24]
   1c7f8:	cmp	ip, #0
   1c7fc:	ldr	ip, [pc, #564]	; 1ca38 <__assert_fail@plt+0xb668>
   1c800:	smull	lr, ip, ip, r3
   1c804:	asr	r3, r3, #31
   1c808:	rsb	r3, r3, ip, asr #5
   1c80c:	add	r3, r3, #19
   1c810:	bne	1d0cc <__assert_fail@plt+0xbcfc>
   1c814:	ldr	ip, [sp, #1156]	; 0x484
   1c818:	cmp	r2, r0
   1c81c:	movlt	r2, #0
   1c820:	movge	r2, #1
   1c824:	cmp	ip, #43	; 0x2b
   1c828:	beq	1d0dc <__assert_fail@plt+0xbd0c>
   1c82c:	str	ip, [sp, #24]
   1c830:	mov	lr, #2
   1c834:	mov	ip, #0
   1c838:	b	1c580 <__assert_fail@plt+0xb1b0>
   1c83c:	cmp	r7, #69	; 0x45
   1c840:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c844:	ldr	r2, [sp, #32]
   1c848:	mov	lr, #2
   1c84c:	ldr	r3, [r2, #28]
   1c850:	ldr	r2, [r2, #24]
   1c854:	sub	r3, r3, r2
   1c858:	ldr	r2, [pc, #484]	; 1ca44 <__assert_fail@plt+0xb674>
   1c85c:	add	r3, r3, #7
   1c860:	smull	r0, r2, r2, r3
   1c864:	add	r2, r2, r3
   1c868:	asr	r3, r3, #31
   1c86c:	rsb	r2, r3, r2, asr lr
   1c870:	b	1c224 <__assert_fail@plt+0xae54>
   1c874:	cmp	r7, #69	; 0x45
   1c878:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c87c:	ldr	r3, [sp, #32]
   1c880:	mov	r0, #0
   1c884:	mov	ip, r0
   1c888:	ldr	r3, [r3, #28]
   1c88c:	mov	lr, #3
   1c890:	cmn	r3, #1
   1c894:	movlt	r2, #1
   1c898:	movge	r2, r0
   1c89c:	str	r2, [sp, #36]	; 0x24
   1c8a0:	add	r3, r3, #1
   1c8a4:	movge	r2, #1
   1c8a8:	movlt	r2, r0
   1c8ac:	b	1c244 <__assert_fail@plt+0xae74>
   1c8b0:	cmp	r7, #69	; 0x45
   1c8b4:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c8b8:	ldr	r3, [sp, #32]
   1c8bc:	ldr	r2, [r3, #12]
   1c8c0:	ldr	r3, [sp, #24]
   1c8c4:	mov	lr, #2
   1c8c8:	cmp	r3, #0
   1c8cc:	moveq	r3, #95	; 0x5f
   1c8d0:	streq	r3, [sp, #24]
   1c8d4:	b	1c224 <__assert_fail@plt+0xae54>
   1c8d8:	ldr	r2, [sp, #24]
   1c8dc:	mvn	r3, r6
   1c8e0:	cmp	r2, #45	; 0x2d
   1c8e4:	lsr	r3, r3, #31
   1c8e8:	moveq	r3, #0
   1c8ec:	cmp	r3, #0
   1c8f0:	beq	1d348 <__assert_fail@plt+0xbf78>
   1c8f4:	cmp	r6, #1
   1c8f8:	movcs	r5, r6
   1c8fc:	movcc	r5, #1
   1c900:	ldr	r3, [sp, #28]
   1c904:	sub	r3, r3, r8
   1c908:	cmp	r3, r5
   1c90c:	bls	1bbac <__assert_fail@plt+0xa7dc>
   1c910:	cmp	fp, #0
   1c914:	beq	1c950 <__assert_fail@plt+0xb580>
   1c918:	cmp	r6, #1
   1c91c:	bls	1c948 <__assert_fail@plt+0xb578>
   1c920:	ldr	r3, [sp, #24]
   1c924:	sub	r6, r6, #1
   1c928:	cmp	r3, #43	; 0x2b
   1c92c:	cmpne	r3, #48	; 0x30
   1c930:	mov	r0, fp
   1c934:	mov	r2, r6
   1c938:	moveq	r1, #48	; 0x30
   1c93c:	movne	r1, #32
   1c940:	bl	112c8 <memset@plt>
   1c944:	add	fp, fp, r6
   1c948:	mov	r3, #10
   1c94c:	strb	r3, [fp], #1
   1c950:	add	r8, r8, r5
   1c954:	b	1bb5c <__assert_fail@plt+0xa78c>
   1c958:	cmp	r7, #69	; 0x45
   1c95c:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c960:	ldr	r3, [sp, #32]
   1c964:	mov	r0, #0
   1c968:	mov	ip, r0
   1c96c:	ldr	r3, [r3, #16]
   1c970:	mov	lr, #2
   1c974:	cmn	r3, #1
   1c978:	movlt	r2, #1
   1c97c:	movge	r2, r0
   1c980:	str	r2, [sp, #36]	; 0x24
   1c984:	add	r3, r3, #1
   1c988:	movge	r2, #1
   1c98c:	movlt	r2, r0
   1c990:	b	1c244 <__assert_fail@plt+0xae74>
   1c994:	cmp	r7, #69	; 0x45
   1c998:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c99c:	ldr	r2, [sp, #48]	; 0x30
   1c9a0:	b	1c8c0 <__assert_fail@plt+0xb4f0>
   1c9a4:	cmp	r7, #69	; 0x45
   1c9a8:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1c9ac:	ldr	r3, [sp, #32]
   1c9b0:	ldr	r2, [r3, #8]
   1c9b4:	b	1c8c0 <__assert_fail@plt+0xb4f0>
   1c9b8:	ldr	r3, [sp, #32]
   1c9bc:	cmp	r7, #79	; 0x4f
   1c9c0:	ldr	r3, [r3, #16]
   1c9c4:	beq	1c1ec <__assert_fail@plt+0xae1c>
   1c9c8:	add	r2, r3, r3, lsl #2
   1c9cc:	mov	ip, #0
   1c9d0:	add	r3, r3, r2, lsl #1
   1c9d4:	str	ip, [sp, #36]	; 0x24
   1c9d8:	asr	r3, r3, #5
   1c9dc:	add	r3, r3, #1
   1c9e0:	mov	r0, ip
   1c9e4:	mov	lr, #1
   1c9e8:	b	1c268 <__assert_fail@plt+0xae98>
   1c9ec:	mov	r3, #0
   1c9f0:	cmp	r5, #0
   1c9f4:	moveq	r5, r3
   1c9f8:	moveq	r1, #112	; 0x70
   1c9fc:	movne	r3, #0
   1ca00:	movne	r1, #112	; 0x70
   1ca04:	strne	r3, [sp, #40]	; 0x28
   1ca08:	b	1c100 <__assert_fail@plt+0xad30>
   1ca0c:	andeq	pc, r1, ip, ror #27
   1ca10:	strbtvs	r6, [r6], -r7, ror #12
   1ca14:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1ca18:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ca1c:	stmhi	r8, {r0, r3, r7, fp, pc}
   1ca20:			; <UNDEFINED> instruction: 0x91a2b3c5
   1ca24:	andeq	r0, r2, r0, ror #10
   1ca28:	andeq	r0, r0, fp, ror #14
   1ca2c:	andeq	r0, r2, ip, ror #10
   1ca30:	andeq	r0, r2, r8, asr r5
   1ca34:	andeq	r0, r2, r8, ror r5
   1ca38:	mvnpl	r8, pc, lsl r5
   1ca3c:	andeq	r0, r0, lr, ror #2
   1ca40:	andeq	r0, r0, sp, ror #2
   1ca44:	subls	r2, r9, #-1828716544	; 0x93000000
   1ca48:			; <UNDEFINED> instruction: 0xfffff894
   1ca4c:	andeq	r2, r0, pc, lsl #14
   1ca50:	andeq	r2, r0, r0, lsl r7
   1ca54:	ldr	lr, [sp, #32]
   1ca58:	add	ip, sp, #88	; 0x58
   1ca5c:	mvn	r5, #0
   1ca60:	ldm	lr!, {r0, r1, r2, r3}
   1ca64:	stmia	ip!, {r0, r1, r2, r3}
   1ca68:	ldm	lr!, {r0, r1, r2, r3}
   1ca6c:	stmia	ip!, {r0, r1, r2, r3}
   1ca70:	ldm	lr, {r0, r1, r2}
   1ca74:	str	r5, [sp, #116]	; 0x74
   1ca78:	stm	ip, {r0, r1, r2}
   1ca7c:	add	r1, sp, #88	; 0x58
   1ca80:	ldr	r0, [sp, #1168]	; 0x490
   1ca84:	bl	1aa98 <__assert_fail@plt+0x96c8>
   1ca88:	ldr	r3, [sp, #116]	; 0x74
   1ca8c:	cmp	r3, #0
   1ca90:	blt	1d338 <__assert_fail@plt+0xbf68>
   1ca94:	add	r9, sp, #72	; 0x48
   1ca98:	add	lr, r9, #13
   1ca9c:	mov	r1, r0
   1caa0:	lsr	r3, r0, #31
   1caa4:	str	r3, [sp, #36]	; 0x24
   1caa8:	smull	r2, r3, sl, r1
   1caac:	asr	ip, r1, #31
   1cab0:	rsb	ip, ip, r3, asr #2
   1cab4:	cmp	r0, #0
   1cab8:	add	r3, ip, ip, lsl #2
   1cabc:	mov	r5, lr
   1cac0:	sub	r3, r1, r3, lsl #1
   1cac4:	add	r2, r3, #48	; 0x30
   1cac8:	rsblt	r3, r3, #48	; 0x30
   1cacc:	uxtb	r2, r2
   1cad0:	uxtblt	r2, r3
   1cad4:	cmp	ip, #0
   1cad8:	mov	r1, ip
   1cadc:	strb	r2, [lr], #-1
   1cae0:	bne	1caa8 <__assert_fail@plt+0xb6d8>
   1cae4:	mov	lr, #1
   1cae8:	b	1c2d4 <__assert_fail@plt+0xaf04>
   1caec:	cmp	r7, #69	; 0x45
   1caf0:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1caf4:	ldr	r3, [sp, #32]
   1caf8:	ldr	r9, [r3, #28]
   1cafc:	ldr	r2, [r3, #24]
   1cb00:	ldr	r5, [r3, #20]
   1cb04:	str	r2, [sp, #36]	; 0x24
   1cb08:	sub	r2, r9, r2
   1cb0c:	add	r2, r2, #380	; 0x17c
   1cb10:	ldr	r3, [pc, #-212]	; 1ca44 <__assert_fail@plt+0xb674>
   1cb14:	add	r2, r2, #2
   1cb18:	cmp	r5, #0
   1cb1c:	smull	r0, r3, r3, r2
   1cb20:	add	r3, r3, r2
   1cb24:	asr	r0, r2, #31
   1cb28:	rsb	r0, r0, r3, asr #2
   1cb2c:	mvnge	r3, #99	; 0x63
   1cb30:	rsb	r0, r0, r0, lsl #3
   1cb34:	sub	r2, r2, r0
   1cb38:	sub	r2, r9, r2
   1cb3c:	movlt	r3, #300	; 0x12c
   1cb40:	adds	r2, r2, #3
   1cb44:	str	r2, [sp, #64]	; 0x40
   1cb48:	add	r3, r3, r5
   1cb4c:	bmi	1d1d8 <__assert_fail@plt+0xbe08>
   1cb50:	tst	r3, #3
   1cb54:	ldrne	r3, [pc, #-284]	; 1ca40 <__assert_fail@plt+0xb670>
   1cb58:	bne	1cba0 <__assert_fail@plt+0xb7d0>
   1cb5c:	ldr	r2, [pc, #-300]	; 1ca38 <__assert_fail@plt+0xb668>
   1cb60:	mov	r0, #100	; 0x64
   1cb64:	smull	r2, ip, r2, r3
   1cb68:	asr	r2, r3, #31
   1cb6c:	rsb	lr, r2, ip, asr #5
   1cb70:	mul	r0, r0, lr
   1cb74:	cmp	r3, r0
   1cb78:	ldrne	r3, [pc, #-324]	; 1ca3c <__assert_fail@plt+0xb66c>
   1cb7c:	bne	1cba0 <__assert_fail@plt+0xb7d0>
   1cb80:	rsb	r2, r2, ip, asr #7
   1cb84:	mov	ip, #400	; 0x190
   1cb88:	ldr	r0, [pc, #-336]	; 1ca40 <__assert_fail@plt+0xb670>
   1cb8c:	mul	r2, ip, r2
   1cb90:	sub	ip, ip, #34	; 0x22
   1cb94:	cmp	r3, r2
   1cb98:	movne	r3, r0
   1cb9c:	moveq	r3, ip
   1cba0:	ldr	r2, [sp, #36]	; 0x24
   1cba4:	sub	r3, r9, r3
   1cba8:	sub	r2, r3, r2
   1cbac:	ldr	r0, [pc, #-368]	; 1ca44 <__assert_fail@plt+0xb674>
   1cbb0:	add	r2, r2, #380	; 0x17c
   1cbb4:	add	r2, r2, #2
   1cbb8:	smull	r0, ip, r0, r2
   1cbbc:	add	ip, ip, r2
   1cbc0:	asr	r0, r2, #31
   1cbc4:	rsb	r0, r0, ip, asr #2
   1cbc8:	rsb	r0, r0, r0, lsl #3
   1cbcc:	sub	r2, r2, r0
   1cbd0:	sub	r3, r3, r2
   1cbd4:	adds	r3, r3, #3
   1cbd8:	movmi	lr, #0
   1cbdc:	ldrmi	r3, [sp, #64]	; 0x40
   1cbe0:	movpl	lr, #1
   1cbe4:	cmp	r1, #71	; 0x47
   1cbe8:	beq	1d2c8 <__assert_fail@plt+0xbef8>
   1cbec:	cmp	r1, #103	; 0x67
   1cbf0:	bne	1d2a8 <__assert_fail@plt+0xbed8>
   1cbf4:	ldr	r3, [pc, #-452]	; 1ca38 <__assert_fail@plt+0xb668>
   1cbf8:	mov	r0, #100	; 0x64
   1cbfc:	smull	r2, r3, r3, r5
   1cc00:	asr	r2, r5, #31
   1cc04:	rsb	r2, r2, r3, asr #5
   1cc08:	ldr	r3, [pc, #-472]	; 1ca38 <__assert_fail@plt+0xb668>
   1cc0c:	mul	r2, r0, r2
   1cc10:	sub	r2, r5, r2
   1cc14:	add	r2, r2, lr
   1cc18:	smull	r3, ip, r3, r2
   1cc1c:	asr	r3, r2, #31
   1cc20:	rsb	r3, r3, ip, asr #5
   1cc24:	mul	r3, r0, r3
   1cc28:	subs	r3, r2, r3
   1cc2c:	bpl	1c554 <__assert_fail@plt+0xb184>
   1cc30:	ldr	r2, [pc, #-496]	; 1ca48 <__assert_fail@plt+0xb678>
   1cc34:	sub	r2, r2, lr
   1cc38:	cmp	r5, r2
   1cc3c:	ldr	r2, [sp, #24]
   1cc40:	bge	1d298 <__assert_fail@plt+0xbec8>
   1cc44:	cmp	r2, #0
   1cc48:	rsb	r3, r3, #0
   1cc4c:	bne	1c560 <__assert_fail@plt+0xb190>
   1cc50:	ldr	r2, [sp, #1156]	; 0x484
   1cc54:	cmp	r2, #43	; 0x2b
   1cc58:	beq	1d26c <__assert_fail@plt+0xbe9c>
   1cc5c:	mov	ip, #0
   1cc60:	str	r2, [sp, #24]
   1cc64:	str	ip, [sp, #36]	; 0x24
   1cc68:	mov	r2, #1
   1cc6c:	mov	lr, #2
   1cc70:	b	1c580 <__assert_fail@plt+0xb1b0>
   1cc74:	cmp	r7, #0
   1cc78:	bne	1bf84 <__assert_fail@plt+0xabb4>
   1cc7c:	ldr	r3, [sp, #24]
   1cc80:	clz	r3, r3
   1cc84:	lsr	r3, r3, #5
   1cc88:	ands	r3, r3, r6, lsr #31
   1cc8c:	bne	1d14c <__assert_fail@plt+0xbd7c>
   1cc90:	sub	r5, r6, #6
   1cc94:	ldr	r7, [pc, #-616]	; 1ca34 <__assert_fail@plt+0xb664>
   1cc98:	bic	r5, r5, r5, asr #31
   1cc9c:	b	1c6b0 <__assert_fail@plt+0xb2e0>
   1cca0:	cmp	r7, #69	; 0x45
   1cca4:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1cca8:	ldr	r2, [sp, #48]	; 0x30
   1ccac:	mov	lr, #2
   1ccb0:	b	1c224 <__assert_fail@plt+0xae54>
   1ccb4:	cmp	r7, #69	; 0x45
   1ccb8:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1ccbc:	ldr	r3, [sp, #32]
   1ccc0:	mov	lr, #1
   1ccc4:	ldr	r2, [r3, #24]
   1ccc8:	b	1c224 <__assert_fail@plt+0xae54>
   1cccc:	ldr	r3, [sp, #32]
   1ccd0:	ldr	r2, [pc, #-660]	; 1ca44 <__assert_fail@plt+0xb674>
   1ccd4:	mov	lr, #1
   1ccd8:	ldr	r3, [r3, #24]
   1ccdc:	add	r3, r3, #6
   1cce0:	smull	r0, r2, r2, r3
   1cce4:	add	r0, r2, r3
   1cce8:	asr	r2, r3, #31
   1ccec:	rsb	r2, r2, r0, asr #2
   1ccf0:	rsb	r2, r2, r2, lsl #3
   1ccf4:	sub	r3, r3, r2
   1ccf8:	add	r2, r3, lr
   1ccfc:	b	1c224 <__assert_fail@plt+0xae54>
   1cd00:	ldr	r3, [sp, #24]
   1cd04:	subs	r3, r3, #45	; 0x2d
   1cd08:	movne	r3, #1
   1cd0c:	cmp	r6, #0
   1cd10:	movlt	r3, #0
   1cd14:	cmp	r3, #0
   1cd18:	beq	1d1b8 <__assert_fail@plt+0xbde8>
   1cd1c:	cmp	r6, #1
   1cd20:	movcs	r5, r6
   1cd24:	movcc	r5, #1
   1cd28:	ldr	r3, [sp, #28]
   1cd2c:	sub	r3, r3, r8
   1cd30:	cmp	r3, r5
   1cd34:	bls	1bbac <__assert_fail@plt+0xa7dc>
   1cd38:	cmp	fp, #0
   1cd3c:	beq	1c950 <__assert_fail@plt+0xb580>
   1cd40:	cmp	r6, #1
   1cd44:	bls	1cd70 <__assert_fail@plt+0xb9a0>
   1cd48:	ldr	r3, [sp, #24]
   1cd4c:	sub	r6, r6, #1
   1cd50:	cmp	r3, #43	; 0x2b
   1cd54:	cmpne	r3, #48	; 0x30
   1cd58:	mov	r0, fp
   1cd5c:	mov	r2, r6
   1cd60:	moveq	r1, #48	; 0x30
   1cd64:	movne	r1, #32
   1cd68:	bl	112c8 <memset@plt>
   1cd6c:	add	fp, fp, r6
   1cd70:	mov	r3, #9
   1cd74:	strb	r3, [fp], #1
   1cd78:	b	1c950 <__assert_fail@plt+0xb580>
   1cd7c:	cmp	r7, #69	; 0x45
   1cd80:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1cd84:	ldr	r3, [sp, #32]
   1cd88:	mov	lr, #2
   1cd8c:	ldr	r2, [r3, #4]
   1cd90:	b	1c224 <__assert_fail@plt+0xae54>
   1cd94:	sub	r3, r4, #1
   1cd98:	cmp	r3, r9
   1cd9c:	movne	r4, r3
   1cda0:	bne	1bf84 <__assert_fail@plt+0xabb4>
   1cda4:	ldr	r2, [sp, #24]
   1cda8:	mvn	r3, r6
   1cdac:	cmp	r2, #45	; 0x2d
   1cdb0:	lsr	r3, r3, #31
   1cdb4:	moveq	r3, #0
   1cdb8:	cmp	r3, #0
   1cdbc:	beq	1d108 <__assert_fail@plt+0xbd38>
   1cdc0:	cmp	r6, #1
   1cdc4:	movcs	r5, r6
   1cdc8:	movcc	r5, #1
   1cdcc:	ldr	r3, [sp, #28]
   1cdd0:	sub	r3, r3, r8
   1cdd4:	cmp	r3, r5
   1cdd8:	bls	1bbac <__assert_fail@plt+0xa7dc>
   1cddc:	cmp	fp, #0
   1cde0:	beq	1c950 <__assert_fail@plt+0xb580>
   1cde4:	cmp	r6, #1
   1cde8:	bls	1ce18 <__assert_fail@plt+0xba48>
   1cdec:	ldr	r3, [sp, #24]
   1cdf0:	sub	r6, r6, #1
   1cdf4:	cmp	r3, #43	; 0x2b
   1cdf8:	cmpne	r3, #48	; 0x30
   1cdfc:	mov	r2, r6
   1ce00:	bne	1d114 <__assert_fail@plt+0xbd44>
   1ce04:	mov	r1, #48	; 0x30
   1ce08:	mov	r0, fp
   1ce0c:	bl	112c8 <memset@plt>
   1ce10:	ldrb	r1, [r4]
   1ce14:	add	fp, fp, r6
   1ce18:	strb	r1, [fp], #1
   1ce1c:	b	1c950 <__assert_fail@plt+0xb580>
   1ce20:	ldr	r7, [pc, #-1020]	; 1ca2c <__assert_fail@plt+0xb65c>
   1ce24:	mvn	r5, #0
   1ce28:	b	1c6b0 <__assert_fail@plt+0xb2e0>
   1ce2c:	cmp	r7, #69	; 0x45
   1ce30:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1ce34:	ldr	r3, [sp, #32]
   1ce38:	mov	lr, #2
   1ce3c:	ldr	r2, [r3]
   1ce40:	b	1c224 <__assert_fail@plt+0xae54>
   1ce44:	mvn	r5, #0
   1ce48:	ldr	r7, [pc, #-1056]	; 1ca30 <__assert_fail@plt+0xb660>
   1ce4c:	b	1c6b0 <__assert_fail@plt+0xb2e0>
   1ce50:	mov	r3, #1
   1ce54:	b	1c9f0 <__assert_fail@plt+0xb620>
   1ce58:	cmp	r7, #69	; 0x45
   1ce5c:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1ce60:	cmp	r6, #0
   1ce64:	movle	r6, #9
   1ce68:	ldr	r3, [sp, #1172]	; 0x494
   1ce6c:	mov	r7, #9
   1ce70:	b	1ce84 <__assert_fail@plt+0xbab4>
   1ce74:	asr	r2, r3, #31
   1ce78:	smull	r1, r3, sl, r3
   1ce7c:	sub	r7, r7, #1
   1ce80:	rsb	r3, r2, r3, asr #2
   1ce84:	cmp	r7, r6
   1ce88:	bgt	1ce74 <__assert_fail@plt+0xbaa4>
   1ce8c:	smull	r2, r1, sl, r3
   1ce90:	asr	r2, r3, #31
   1ce94:	rsb	r1, r2, r1, asr #2
   1ce98:	cmp	r7, #1
   1ce9c:	add	r1, r1, r1, lsl #2
   1cea0:	ble	1d1a4 <__assert_fail@plt+0xbdd4>
   1cea4:	cmp	r3, r1, lsl #1
   1cea8:	beq	1ce78 <__assert_fail@plt+0xbaa8>
   1ceac:	add	r0, sp, #72	; 0x48
   1ceb0:	add	r1, r0, r7
   1ceb4:	b	1cebc <__assert_fail@plt+0xbaec>
   1ceb8:	asr	r2, r2, #31
   1cebc:	smull	lr, ip, sl, r3
   1cec0:	rsb	r2, r2, ip, asr #2
   1cec4:	add	ip, r2, r2, lsl #2
   1cec8:	sub	r3, r3, ip, lsl #1
   1cecc:	add	r3, r3, #48	; 0x30
   1ced0:	strb	r3, [r1, #-1]!
   1ced4:	cmp	r1, r0
   1ced8:	mov	r3, r2
   1cedc:	bne	1ceb8 <__assert_fail@plt+0xbae8>
   1cee0:	ldr	r2, [sp, #24]
   1cee4:	subs	r3, r2, #0
   1cee8:	moveq	r3, #48	; 0x30
   1ceec:	str	r3, [sp, #24]
   1cef0:	ldr	r3, [sp, #28]
   1cef4:	cmp	r7, #0
   1cef8:	movcs	r5, r7
   1cefc:	movcc	r5, #0
   1cf00:	sub	r3, r3, r8
   1cf04:	cmp	r5, r3
   1cf08:	bcs	1bbac <__assert_fail@plt+0xa7dc>
   1cf0c:	cmp	fp, #0
   1cf10:	beq	1cf34 <__assert_fail@plt+0xbb64>
   1cf14:	ldr	r3, [sp, #40]	; 0x28
   1cf18:	mov	r2, r7
   1cf1c:	cmp	r3, #0
   1cf20:	add	r1, sp, #72	; 0x48
   1cf24:	mov	r0, fp
   1cf28:	beq	1d1b0 <__assert_fail@plt+0xbde0>
   1cf2c:	bl	1ba34 <__assert_fail@plt+0xa664>
   1cf30:	add	fp, fp, r7
   1cf34:	ldr	r3, [sp, #24]
   1cf38:	add	r8, r5, r8
   1cf3c:	cmp	r3, #45	; 0x2d
   1cf40:	subne	r5, r6, r7
   1cf44:	ldr	r3, [sp, #28]
   1cf48:	bicne	r5, r5, r5, asr #31
   1cf4c:	moveq	r5, #0
   1cf50:	sub	r3, r3, r8
   1cf54:	cmp	r5, r3
   1cf58:	bcs	1bbac <__assert_fail@plt+0xa7dc>
   1cf5c:	cmp	fp, #0
   1cf60:	beq	1c950 <__assert_fail@plt+0xb580>
   1cf64:	cmp	r5, #0
   1cf68:	beq	1c950 <__assert_fail@plt+0xb580>
   1cf6c:	ldr	r3, [sp, #24]
   1cf70:	mov	r0, fp
   1cf74:	cmp	r3, #43	; 0x2b
   1cf78:	cmpne	r3, #48	; 0x30
   1cf7c:	mov	r2, r5
   1cf80:	moveq	r1, #48	; 0x30
   1cf84:	movne	r1, #32
   1cf88:	bl	112c8 <memset@plt>
   1cf8c:	add	fp, fp, r5
   1cf90:	b	1c950 <__assert_fail@plt+0xb580>
   1cf94:	ldrb	r3, [r4, #1]
   1cf98:	add	r0, r4, #1
   1cf9c:	cmp	r3, #58	; 0x3a
   1cfa0:	movne	lr, #1
   1cfa4:	beq	1d12c <__assert_fail@plt+0xbd5c>
   1cfa8:	cmp	r3, #122	; 0x7a
   1cfac:	moveq	r4, r0
   1cfb0:	bne	1bf84 <__assert_fail@plt+0xabb4>
   1cfb4:	b	1c448 <__assert_fail@plt+0xb078>
   1cfb8:	cmp	r7, #69	; 0x45
   1cfbc:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1cfc0:	ldr	r3, [sp, #32]
   1cfc4:	ldr	r0, [pc, #-1416]	; 1ca44 <__assert_fail@plt+0xb674>
   1cfc8:	mov	lr, #2
   1cfcc:	ldr	r2, [r3, #24]
   1cfd0:	ldr	r3, [r3, #28]
   1cfd4:	add	r2, r2, #6
   1cfd8:	smull	ip, r0, r0, r2
   1cfdc:	add	ip, r0, r2
   1cfe0:	asr	r0, r2, #31
   1cfe4:	rsb	r0, r0, ip, asr #2
   1cfe8:	rsb	r0, r0, r0, lsl #3
   1cfec:	sub	r2, r2, r0
   1cff0:	b	1c854 <__assert_fail@plt+0xb484>
   1cff4:	cmp	r7, #69	; 0x45
   1cff8:	beq	1bf84 <__assert_fail@plt+0xabb4>
   1cffc:	ldr	r3, [sp, #32]
   1d000:	mov	lr, #2
   1d004:	ldr	r2, [r3, #8]
   1d008:	b	1c224 <__assert_fail@plt+0xae54>
   1d00c:	mov	r3, #45	; 0x2d
   1d010:	str	r3, [sp, #36]	; 0x24
   1d014:	b	1c310 <__assert_fail@plt+0xaf40>
   1d018:	mov	r3, #1
   1d01c:	str	r3, [sp, #64]	; 0x40
   1d020:	mov	r3, #48	; 0x30
   1d024:	str	r3, [sp, #24]
   1d028:	b	1c2ec <__assert_fail@plt+0xaf1c>
   1d02c:	add	r1, sp, #89	; 0x59
   1d030:	mov	r2, r7
   1d034:	mov	r0, fp
   1d038:	bl	1b9f4 <__assert_fail@plt+0xa624>
   1d03c:	b	1c1e0 <__assert_fail@plt+0xae10>
   1d040:	add	r7, r9, #14
   1d044:	sub	r7, r7, r5
   1d048:	ldr	r2, [sp, #64]	; 0x40
   1d04c:	sub	r3, r6, r7
   1d050:	cmp	r3, #0
   1d054:	movle	r2, #0
   1d058:	andgt	r2, r2, #1
   1d05c:	cmp	r2, #0
   1d060:	bne	1c384 <__assert_fail@plt+0xafb4>
   1d064:	ldr	r3, [sp, #64]	; 0x40
   1d068:	cmp	r3, #0
   1d06c:	moveq	r6, r3
   1d070:	b	1c384 <__assert_fail@plt+0xafb4>
   1d074:	cmp	fp, #0
   1d078:	beq	1bb94 <__assert_fail@plt+0xa7c4>
   1d07c:	mov	r0, fp
   1d080:	mov	r2, r7
   1d084:	mov	r1, #32
   1d088:	str	r3, [sp, #68]	; 0x44
   1d08c:	add	r8, r8, r7
   1d090:	bl	112c8 <memset@plt>
   1d094:	sub	r6, r6, r7
   1d098:	add	fp, fp, r7
   1d09c:	ldr	r3, [sp, #68]	; 0x44
   1d0a0:	b	1c344 <__assert_fail@plt+0xaf74>
   1d0a4:	mov	r8, r3
   1d0a8:	b	1bb70 <__assert_fail@plt+0xa7a0>
   1d0ac:	ldr	r2, [sp, #24]
   1d0b0:	cmp	r2, #43	; 0x2b
   1d0b4:	ldr	r2, [sp, #36]	; 0x24
   1d0b8:	eor	r2, r2, #1
   1d0bc:	beq	1d32c <__assert_fail@plt+0xbf5c>
   1d0c0:	mov	ip, #0
   1d0c4:	mov	lr, #4
   1d0c8:	b	1c580 <__assert_fail@plt+0xb1b0>
   1d0cc:	cmp	r2, r0
   1d0d0:	movlt	r2, #0
   1d0d4:	movge	r2, #1
   1d0d8:	b	1c56c <__assert_fail@plt+0xb19c>
   1d0dc:	mov	lr, #2
   1d0e0:	mov	r0, #99	; 0x63
   1d0e4:	cmp	r0, r3
   1d0e8:	movcs	r0, #0
   1d0ec:	movcc	r0, #1
   1d0f0:	cmp	r6, lr
   1d0f4:	movle	ip, r0
   1d0f8:	orrgt	ip, r0, #1
   1d0fc:	mov	r0, #43	; 0x2b
   1d100:	str	r0, [sp, #24]
   1d104:	b	1c580 <__assert_fail@plt+0xb1b0>
   1d108:	mov	r6, r3
   1d10c:	mov	r5, #1
   1d110:	b	1cdcc <__assert_fail@plt+0xb9fc>
   1d114:	mov	r1, #32
   1d118:	mov	r0, fp
   1d11c:	bl	112c8 <memset@plt>
   1d120:	add	fp, fp, r6
   1d124:	ldrb	r1, [r4]
   1d128:	b	1ce18 <__assert_fail@plt+0xba48>
   1d12c:	add	r2, r4, #2
   1d130:	mov	lr, #1
   1d134:	mov	r0, r2
   1d138:	ldrb	r3, [r2], #1
   1d13c:	add	lr, lr, #1
   1d140:	cmp	r3, #58	; 0x3a
   1d144:	bne	1cfa8 <__assert_fail@plt+0xbbd8>
   1d148:	b	1d134 <__assert_fail@plt+0xbd64>
   1d14c:	ldr	r3, [sp, #1172]	; 0x494
   1d150:	mov	ip, #43	; 0x2b
   1d154:	str	r3, [sp, #20]
   1d158:	ldr	r3, [sp, #1168]	; 0x490
   1d15c:	mov	r5, #4
   1d160:	str	r3, [sp, #16]
   1d164:	ldr	r3, [sp, #1164]	; 0x48c
   1d168:	mov	r0, r7
   1d16c:	str	r3, [sp, #12]
   1d170:	ldr	r3, [sp, #40]	; 0x28
   1d174:	str	r5, [sp, #8]
   1d178:	str	r3, [sp]
   1d17c:	str	ip, [sp, #4]
   1d180:	ldr	r3, [sp, #32]
   1d184:	ldr	r2, [pc, #-1880]	; 1ca34 <__assert_fail@plt+0xb664>
   1d188:	mvn	r1, #0
   1d18c:	str	ip, [sp, #24]
   1d190:	bl	1ba74 <__assert_fail@plt+0xa6a4>
   1d194:	mov	r3, r7
   1d198:	ldr	r7, [pc, #-1900]	; 1ca34 <__assert_fail@plt+0xb664>
   1d19c:	mov	r9, r0
   1d1a0:	b	1c704 <__assert_fail@plt+0xb334>
   1d1a4:	cmp	r7, #0
   1d1a8:	bgt	1ceac <__assert_fail@plt+0xbadc>
   1d1ac:	b	1cee0 <__assert_fail@plt+0xbb10>
   1d1b0:	bl	110f4 <memcpy@plt>
   1d1b4:	b	1cf30 <__assert_fail@plt+0xbb60>
   1d1b8:	mov	r6, r3
   1d1bc:	mov	r5, #1
   1d1c0:	b	1cd28 <__assert_fail@plt+0xb958>
   1d1c4:	mov	r2, r7
   1d1c8:	ldr	r1, [sp, #56]	; 0x38
   1d1cc:	mov	r0, fp
   1d1d0:	bl	1b9f4 <__assert_fail@plt+0xa624>
   1d1d4:	b	1c1e0 <__assert_fail@plt+0xae10>
   1d1d8:	sub	r3, r3, #1
   1d1dc:	tst	r3, #3
   1d1e0:	ldrne	r3, [pc, #-1960]	; 1ca40 <__assert_fail@plt+0xb670>
   1d1e4:	bne	1d22c <__assert_fail@plt+0xbe5c>
   1d1e8:	ldr	r2, [pc, #-1976]	; 1ca38 <__assert_fail@plt+0xb668>
   1d1ec:	mov	r0, #100	; 0x64
   1d1f0:	smull	r2, ip, r2, r3
   1d1f4:	asr	r2, r3, #31
   1d1f8:	rsb	lr, r2, ip, asr #5
   1d1fc:	mul	r0, r0, lr
   1d200:	cmp	r3, r0
   1d204:	ldrne	r3, [pc, #-2000]	; 1ca3c <__assert_fail@plt+0xb66c>
   1d208:	bne	1d22c <__assert_fail@plt+0xbe5c>
   1d20c:	rsb	r2, r2, ip, asr #7
   1d210:	mov	ip, #400	; 0x190
   1d214:	ldr	r0, [pc, #-2012]	; 1ca40 <__assert_fail@plt+0xb670>
   1d218:	mul	r2, ip, r2
   1d21c:	sub	ip, ip, #34	; 0x22
   1d220:	cmp	r3, r2
   1d224:	movne	r3, r0
   1d228:	moveq	r3, ip
   1d22c:	ldr	r2, [sp, #36]	; 0x24
   1d230:	add	r3, r9, r3
   1d234:	sub	r2, r3, r2
   1d238:	ldr	r0, [pc, #-2044]	; 1ca44 <__assert_fail@plt+0xb674>
   1d23c:	add	r2, r2, #380	; 0x17c
   1d240:	add	r2, r2, #2
   1d244:	mvn	lr, #0
   1d248:	smull	r0, ip, r0, r2
   1d24c:	add	ip, ip, r2
   1d250:	asr	r0, r2, #31
   1d254:	rsb	r0, r0, ip, asr #2
   1d258:	rsb	r0, r0, r0, lsl #3
   1d25c:	sub	r2, r2, r0
   1d260:	sub	r3, r3, r2
   1d264:	add	r3, r3, #3
   1d268:	b	1cbe4 <__assert_fail@plt+0xb814>
   1d26c:	ldr	r2, [sp, #24]
   1d270:	mov	lr, #2
   1d274:	str	r2, [sp, #36]	; 0x24
   1d278:	mov	r0, #99	; 0x63
   1d27c:	mov	r2, #1
   1d280:	b	1d0e4 <__assert_fail@plt+0xbd14>
   1d284:	sub	r0, r0, #2000	; 0x7d0
   1d288:	cmp	r2, r0
   1d28c:	rsblt	r3, r3, #0
   1d290:	addge	r3, r3, #100	; 0x64
   1d294:	b	1c554 <__assert_fail@plt+0xb184>
   1d298:	cmp	r2, #0
   1d29c:	add	r3, r3, #100	; 0x64
   1d2a0:	beq	1cc50 <__assert_fail@plt+0xb880>
   1d2a4:	b	1c560 <__assert_fail@plt+0xb190>
   1d2a8:	ldr	r2, [pc, #-2156]	; 1ca44 <__assert_fail@plt+0xb674>
   1d2ac:	mov	lr, #2
   1d2b0:	smull	r0, r2, r2, r3
   1d2b4:	add	r0, r2, r3
   1d2b8:	asr	r2, r3, #31
   1d2bc:	rsb	r2, r2, r0, asr #2
   1d2c0:	add	r2, r2, #1
   1d2c4:	b	1c224 <__assert_fail@plt+0xae54>
   1d2c8:	ldr	r2, [pc, #-2184]	; 1ca48 <__assert_fail@plt+0xb678>
   1d2cc:	add	r3, r5, #1888	; 0x760
   1d2d0:	sub	r2, r2, lr
   1d2d4:	cmp	r5, r2
   1d2d8:	movge	r0, #0
   1d2dc:	movlt	r0, #1
   1d2e0:	str	r0, [sp, #36]	; 0x24
   1d2e4:	ldr	r0, [sp, #24]
   1d2e8:	add	r3, r3, #12
   1d2ec:	cmp	r0, #0
   1d2f0:	add	r3, r3, lr
   1d2f4:	bne	1d0ac <__assert_fail@plt+0xbcdc>
   1d2f8:	ldr	r0, [sp, #1156]	; 0x484
   1d2fc:	cmp	r5, r2
   1d300:	movlt	r2, #0
   1d304:	movge	r2, #1
   1d308:	cmp	r0, #43	; 0x2b
   1d30c:	beq	1d32c <__assert_fail@plt+0xbf5c>
   1d310:	str	r0, [sp, #24]
   1d314:	mov	ip, #0
   1d318:	mov	lr, #4
   1d31c:	b	1c580 <__assert_fail@plt+0xb1b0>
   1d320:	mov	r3, #1
   1d324:	str	r3, [sp, #36]	; 0x24
   1d328:	b	1c48c <__assert_fail@plt+0xb0bc>
   1d32c:	mov	lr, #4
   1d330:	ldr	r0, [pc, #-2284]	; 1ca4c <__assert_fail@plt+0xb67c>
   1d334:	b	1d0e4 <__assert_fail@plt+0xbd14>
   1d338:	ldr	r2, [sp, #44]	; 0x2c
   1d33c:	mov	r3, #75	; 0x4b
   1d340:	str	r3, [r2]
   1d344:	b	1bbb8 <__assert_fail@plt+0xa7e8>
   1d348:	mov	r6, r3
   1d34c:	mov	r5, #1
   1d350:	b	1c900 <__assert_fail@plt+0xb530>
   1d354:	cmp	ip, #0
   1d358:	bne	1d378 <__assert_fail@plt+0xbfa8>
   1d35c:	cmp	r0, #0
   1d360:	bne	1d3a4 <__assert_fail@plt+0xbfd4>
   1d364:	ldr	r2, [sp, #36]	; 0x24
   1d368:	mov	ip, #1
   1d36c:	eor	r2, r2, #1
   1d370:	mov	lr, #3
   1d374:	b	1c244 <__assert_fail@plt+0xae74>
   1d378:	mov	r2, #100	; 0x64
   1d37c:	ldr	lr, [pc, #-2356]	; 1ca50 <__assert_fail@plt+0xb680>
   1d380:	mul	r0, r2, r0
   1d384:	ldr	r2, [sp, #36]	; 0x24
   1d388:	mla	r3, lr, r3, r0
   1d38c:	eor	r2, r2, #1
   1d390:	add	r3, r3, ip
   1d394:	mov	r0, #20
   1d398:	mov	ip, #1
   1d39c:	mov	lr, #9
   1d3a0:	b	1c244 <__assert_fail@plt+0xae74>
   1d3a4:	mov	ip, #100	; 0x64
   1d3a8:	ldr	r2, [sp, #36]	; 0x24
   1d3ac:	mla	r3, ip, r3, r0
   1d3b0:	eor	r2, r2, #1
   1d3b4:	mov	ip, #1
   1d3b8:	mov	r0, #4
   1d3bc:	mov	lr, #6
   1d3c0:	b	1c244 <__assert_fail@plt+0xae74>
   1d3c4:	mov	ip, #100	; 0x64
   1d3c8:	ldr	r2, [sp, #36]	; 0x24
   1d3cc:	mla	r3, ip, r3, r0
   1d3d0:	eor	r2, r2, #1
   1d3d4:	mov	ip, #1
   1d3d8:	mov	r0, #0
   1d3dc:	mov	lr, #5
   1d3e0:	b	1c244 <__assert_fail@plt+0xae74>
   1d3e4:	push	{r4, r5, lr}
   1d3e8:	sub	sp, sp, #36	; 0x24
   1d3ec:	add	lr, sp, #32
   1d3f0:	mov	ip, #0
   1d3f4:	ldr	r5, [sp, #48]	; 0x30
   1d3f8:	ldr	r4, [sp, #52]	; 0x34
   1d3fc:	strb	ip, [lr, #-1]!
   1d400:	str	lr, [sp, #12]
   1d404:	mvn	lr, #0
   1d408:	str	ip, [sp, #4]
   1d40c:	str	ip, [sp]
   1d410:	str	r5, [sp, #16]
   1d414:	str	r4, [sp, #20]
   1d418:	str	lr, [sp, #8]
   1d41c:	bl	1ba74 <__assert_fail@plt+0xa6a4>
   1d420:	add	sp, sp, #36	; 0x24
   1d424:	pop	{r4, r5, pc}
   1d428:	push	{r4, r5, r6, lr}
   1d42c:	subs	r4, r2, #0
   1d430:	mov	r6, r0
   1d434:	mov	r5, r1
   1d438:	beq	1d464 <__assert_fail@plt+0xc094>
   1d43c:	mov	r1, r4
   1d440:	mvn	r0, #0
   1d444:	bl	1d568 <__assert_fail@plt+0xc198>
   1d448:	cmp	r0, r5
   1d44c:	bcs	1d464 <__assert_fail@plt+0xc094>
   1d450:	bl	11298 <__errno_location@plt>
   1d454:	mov	r3, #12
   1d458:	str	r3, [r0]
   1d45c:	mov	r0, #0
   1d460:	pop	{r4, r5, r6, pc}
   1d464:	mul	r1, r5, r4
   1d468:	mov	r0, r6
   1d46c:	pop	{r4, r5, r6, lr}
   1d470:	b	1b69c <__assert_fail@plt+0xa2cc>
   1d474:	push	{lr}		; (str lr, [sp, #-4]!)
   1d478:	sub	sp, sp, #268	; 0x10c
   1d47c:	add	r1, sp, #4
   1d480:	ldr	r2, [pc, #60]	; 1d4c4 <__assert_fail@plt+0xc0f4>
   1d484:	bl	1d4d0 <__assert_fail@plt+0xc100>
   1d488:	cmp	r0, #0
   1d48c:	movne	r0, #0
   1d490:	bne	1d4bc <__assert_fail@plt+0xc0ec>
   1d494:	ldr	r1, [pc, #44]	; 1d4c8 <__assert_fail@plt+0xc0f8>
   1d498:	add	r0, sp, #4
   1d49c:	bl	110a0 <strcmp@plt>
   1d4a0:	cmp	r0, #0
   1d4a4:	beq	1d4bc <__assert_fail@plt+0xc0ec>
   1d4a8:	add	r0, sp, #4
   1d4ac:	ldr	r1, [pc, #24]	; 1d4cc <__assert_fail@plt+0xc0fc>
   1d4b0:	bl	110a0 <strcmp@plt>
   1d4b4:	adds	r0, r0, #0
   1d4b8:	movne	r0, #1
   1d4bc:	add	sp, sp, #268	; 0x10c
   1d4c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4c4:	andeq	r0, r0, r1, lsl #2
   1d4c8:	andeq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
   1d4cc:	andeq	r0, r2, r4, lsl #11
   1d4d0:	push	{r4, r5, r6, lr}
   1d4d4:	mov	r5, r1
   1d4d8:	mov	r1, #0
   1d4dc:	mov	r4, r2
   1d4e0:	bl	1131c <setlocale@plt>
   1d4e4:	subs	r6, r0, #0
   1d4e8:	beq	1d544 <__assert_fail@plt+0xc174>
   1d4ec:	bl	11274 <strlen@plt>
   1d4f0:	cmp	r4, r0
   1d4f4:	bhi	1d52c <__assert_fail@plt+0xc15c>
   1d4f8:	cmp	r4, #0
   1d4fc:	bne	1d508 <__assert_fail@plt+0xc138>
   1d500:	mov	r0, #34	; 0x22
   1d504:	pop	{r4, r5, r6, pc}
   1d508:	sub	r4, r4, #1
   1d50c:	mov	r1, r6
   1d510:	mov	r2, r4
   1d514:	mov	r0, r5
   1d518:	bl	110f4 <memcpy@plt>
   1d51c:	mov	r3, #0
   1d520:	strb	r3, [r5, r4]
   1d524:	mov	r0, #34	; 0x22
   1d528:	pop	{r4, r5, r6, pc}
   1d52c:	add	r2, r0, #1
   1d530:	mov	r1, r6
   1d534:	mov	r0, r5
   1d538:	bl	110f4 <memcpy@plt>
   1d53c:	mov	r0, #0
   1d540:	pop	{r4, r5, r6, pc}
   1d544:	cmp	r4, #0
   1d548:	beq	1d558 <__assert_fail@plt+0xc188>
   1d54c:	strb	r6, [r5]
   1d550:	mov	r0, #22
   1d554:	pop	{r4, r5, r6, pc}
   1d558:	mov	r0, #22
   1d55c:	pop	{r4, r5, r6, pc}
   1d560:	mov	r1, #0
   1d564:	b	1131c <setlocale@plt>
   1d568:	subs	r2, r1, #1
   1d56c:	bxeq	lr
   1d570:	bcc	1d748 <__assert_fail@plt+0xc378>
   1d574:	cmp	r0, r1
   1d578:	bls	1d72c <__assert_fail@plt+0xc35c>
   1d57c:	tst	r1, r2
   1d580:	beq	1d738 <__assert_fail@plt+0xc368>
   1d584:	clz	r3, r0
   1d588:	clz	r2, r1
   1d58c:	sub	r3, r2, r3
   1d590:	rsbs	r3, r3, #31
   1d594:	addne	r3, r3, r3, lsl #1
   1d598:	mov	r2, #0
   1d59c:	addne	pc, pc, r3, lsl #2
   1d5a0:	nop			; (mov r0, r0)
   1d5a4:	cmp	r0, r1, lsl #31
   1d5a8:	adc	r2, r2, r2
   1d5ac:	subcs	r0, r0, r1, lsl #31
   1d5b0:	cmp	r0, r1, lsl #30
   1d5b4:	adc	r2, r2, r2
   1d5b8:	subcs	r0, r0, r1, lsl #30
   1d5bc:	cmp	r0, r1, lsl #29
   1d5c0:	adc	r2, r2, r2
   1d5c4:	subcs	r0, r0, r1, lsl #29
   1d5c8:	cmp	r0, r1, lsl #28
   1d5cc:	adc	r2, r2, r2
   1d5d0:	subcs	r0, r0, r1, lsl #28
   1d5d4:	cmp	r0, r1, lsl #27
   1d5d8:	adc	r2, r2, r2
   1d5dc:	subcs	r0, r0, r1, lsl #27
   1d5e0:	cmp	r0, r1, lsl #26
   1d5e4:	adc	r2, r2, r2
   1d5e8:	subcs	r0, r0, r1, lsl #26
   1d5ec:	cmp	r0, r1, lsl #25
   1d5f0:	adc	r2, r2, r2
   1d5f4:	subcs	r0, r0, r1, lsl #25
   1d5f8:	cmp	r0, r1, lsl #24
   1d5fc:	adc	r2, r2, r2
   1d600:	subcs	r0, r0, r1, lsl #24
   1d604:	cmp	r0, r1, lsl #23
   1d608:	adc	r2, r2, r2
   1d60c:	subcs	r0, r0, r1, lsl #23
   1d610:	cmp	r0, r1, lsl #22
   1d614:	adc	r2, r2, r2
   1d618:	subcs	r0, r0, r1, lsl #22
   1d61c:	cmp	r0, r1, lsl #21
   1d620:	adc	r2, r2, r2
   1d624:	subcs	r0, r0, r1, lsl #21
   1d628:	cmp	r0, r1, lsl #20
   1d62c:	adc	r2, r2, r2
   1d630:	subcs	r0, r0, r1, lsl #20
   1d634:	cmp	r0, r1, lsl #19
   1d638:	adc	r2, r2, r2
   1d63c:	subcs	r0, r0, r1, lsl #19
   1d640:	cmp	r0, r1, lsl #18
   1d644:	adc	r2, r2, r2
   1d648:	subcs	r0, r0, r1, lsl #18
   1d64c:	cmp	r0, r1, lsl #17
   1d650:	adc	r2, r2, r2
   1d654:	subcs	r0, r0, r1, lsl #17
   1d658:	cmp	r0, r1, lsl #16
   1d65c:	adc	r2, r2, r2
   1d660:	subcs	r0, r0, r1, lsl #16
   1d664:	cmp	r0, r1, lsl #15
   1d668:	adc	r2, r2, r2
   1d66c:	subcs	r0, r0, r1, lsl #15
   1d670:	cmp	r0, r1, lsl #14
   1d674:	adc	r2, r2, r2
   1d678:	subcs	r0, r0, r1, lsl #14
   1d67c:	cmp	r0, r1, lsl #13
   1d680:	adc	r2, r2, r2
   1d684:	subcs	r0, r0, r1, lsl #13
   1d688:	cmp	r0, r1, lsl #12
   1d68c:	adc	r2, r2, r2
   1d690:	subcs	r0, r0, r1, lsl #12
   1d694:	cmp	r0, r1, lsl #11
   1d698:	adc	r2, r2, r2
   1d69c:	subcs	r0, r0, r1, lsl #11
   1d6a0:	cmp	r0, r1, lsl #10
   1d6a4:	adc	r2, r2, r2
   1d6a8:	subcs	r0, r0, r1, lsl #10
   1d6ac:	cmp	r0, r1, lsl #9
   1d6b0:	adc	r2, r2, r2
   1d6b4:	subcs	r0, r0, r1, lsl #9
   1d6b8:	cmp	r0, r1, lsl #8
   1d6bc:	adc	r2, r2, r2
   1d6c0:	subcs	r0, r0, r1, lsl #8
   1d6c4:	cmp	r0, r1, lsl #7
   1d6c8:	adc	r2, r2, r2
   1d6cc:	subcs	r0, r0, r1, lsl #7
   1d6d0:	cmp	r0, r1, lsl #6
   1d6d4:	adc	r2, r2, r2
   1d6d8:	subcs	r0, r0, r1, lsl #6
   1d6dc:	cmp	r0, r1, lsl #5
   1d6e0:	adc	r2, r2, r2
   1d6e4:	subcs	r0, r0, r1, lsl #5
   1d6e8:	cmp	r0, r1, lsl #4
   1d6ec:	adc	r2, r2, r2
   1d6f0:	subcs	r0, r0, r1, lsl #4
   1d6f4:	cmp	r0, r1, lsl #3
   1d6f8:	adc	r2, r2, r2
   1d6fc:	subcs	r0, r0, r1, lsl #3
   1d700:	cmp	r0, r1, lsl #2
   1d704:	adc	r2, r2, r2
   1d708:	subcs	r0, r0, r1, lsl #2
   1d70c:	cmp	r0, r1, lsl #1
   1d710:	adc	r2, r2, r2
   1d714:	subcs	r0, r0, r1, lsl #1
   1d718:	cmp	r0, r1
   1d71c:	adc	r2, r2, r2
   1d720:	subcs	r0, r0, r1
   1d724:	mov	r0, r2
   1d728:	bx	lr
   1d72c:	moveq	r0, #1
   1d730:	movne	r0, #0
   1d734:	bx	lr
   1d738:	clz	r2, r1
   1d73c:	rsb	r2, r2, #31
   1d740:	lsr	r0, r0, r2
   1d744:	bx	lr
   1d748:	cmp	r0, #0
   1d74c:	mvnne	r0, #0
   1d750:	b	1da88 <__assert_fail@plt+0xc6b8>
   1d754:	cmp	r1, #0
   1d758:	beq	1d748 <__assert_fail@plt+0xc378>
   1d75c:	push	{r0, r1, lr}
   1d760:	bl	1d568 <__assert_fail@plt+0xc198>
   1d764:	pop	{r1, r2, lr}
   1d768:	mul	r3, r2, r0
   1d76c:	sub	r1, r1, r3
   1d770:	bx	lr
   1d774:	cmp	r1, #0
   1d778:	beq	1d984 <__assert_fail@plt+0xc5b4>
   1d77c:	eor	ip, r0, r1
   1d780:	rsbmi	r1, r1, #0
   1d784:	subs	r2, r1, #1
   1d788:	beq	1d950 <__assert_fail@plt+0xc580>
   1d78c:	movs	r3, r0
   1d790:	rsbmi	r3, r0, #0
   1d794:	cmp	r3, r1
   1d798:	bls	1d95c <__assert_fail@plt+0xc58c>
   1d79c:	tst	r1, r2
   1d7a0:	beq	1d96c <__assert_fail@plt+0xc59c>
   1d7a4:	clz	r2, r3
   1d7a8:	clz	r0, r1
   1d7ac:	sub	r2, r0, r2
   1d7b0:	rsbs	r2, r2, #31
   1d7b4:	addne	r2, r2, r2, lsl #1
   1d7b8:	mov	r0, #0
   1d7bc:	addne	pc, pc, r2, lsl #2
   1d7c0:	nop			; (mov r0, r0)
   1d7c4:	cmp	r3, r1, lsl #31
   1d7c8:	adc	r0, r0, r0
   1d7cc:	subcs	r3, r3, r1, lsl #31
   1d7d0:	cmp	r3, r1, lsl #30
   1d7d4:	adc	r0, r0, r0
   1d7d8:	subcs	r3, r3, r1, lsl #30
   1d7dc:	cmp	r3, r1, lsl #29
   1d7e0:	adc	r0, r0, r0
   1d7e4:	subcs	r3, r3, r1, lsl #29
   1d7e8:	cmp	r3, r1, lsl #28
   1d7ec:	adc	r0, r0, r0
   1d7f0:	subcs	r3, r3, r1, lsl #28
   1d7f4:	cmp	r3, r1, lsl #27
   1d7f8:	adc	r0, r0, r0
   1d7fc:	subcs	r3, r3, r1, lsl #27
   1d800:	cmp	r3, r1, lsl #26
   1d804:	adc	r0, r0, r0
   1d808:	subcs	r3, r3, r1, lsl #26
   1d80c:	cmp	r3, r1, lsl #25
   1d810:	adc	r0, r0, r0
   1d814:	subcs	r3, r3, r1, lsl #25
   1d818:	cmp	r3, r1, lsl #24
   1d81c:	adc	r0, r0, r0
   1d820:	subcs	r3, r3, r1, lsl #24
   1d824:	cmp	r3, r1, lsl #23
   1d828:	adc	r0, r0, r0
   1d82c:	subcs	r3, r3, r1, lsl #23
   1d830:	cmp	r3, r1, lsl #22
   1d834:	adc	r0, r0, r0
   1d838:	subcs	r3, r3, r1, lsl #22
   1d83c:	cmp	r3, r1, lsl #21
   1d840:	adc	r0, r0, r0
   1d844:	subcs	r3, r3, r1, lsl #21
   1d848:	cmp	r3, r1, lsl #20
   1d84c:	adc	r0, r0, r0
   1d850:	subcs	r3, r3, r1, lsl #20
   1d854:	cmp	r3, r1, lsl #19
   1d858:	adc	r0, r0, r0
   1d85c:	subcs	r3, r3, r1, lsl #19
   1d860:	cmp	r3, r1, lsl #18
   1d864:	adc	r0, r0, r0
   1d868:	subcs	r3, r3, r1, lsl #18
   1d86c:	cmp	r3, r1, lsl #17
   1d870:	adc	r0, r0, r0
   1d874:	subcs	r3, r3, r1, lsl #17
   1d878:	cmp	r3, r1, lsl #16
   1d87c:	adc	r0, r0, r0
   1d880:	subcs	r3, r3, r1, lsl #16
   1d884:	cmp	r3, r1, lsl #15
   1d888:	adc	r0, r0, r0
   1d88c:	subcs	r3, r3, r1, lsl #15
   1d890:	cmp	r3, r1, lsl #14
   1d894:	adc	r0, r0, r0
   1d898:	subcs	r3, r3, r1, lsl #14
   1d89c:	cmp	r3, r1, lsl #13
   1d8a0:	adc	r0, r0, r0
   1d8a4:	subcs	r3, r3, r1, lsl #13
   1d8a8:	cmp	r3, r1, lsl #12
   1d8ac:	adc	r0, r0, r0
   1d8b0:	subcs	r3, r3, r1, lsl #12
   1d8b4:	cmp	r3, r1, lsl #11
   1d8b8:	adc	r0, r0, r0
   1d8bc:	subcs	r3, r3, r1, lsl #11
   1d8c0:	cmp	r3, r1, lsl #10
   1d8c4:	adc	r0, r0, r0
   1d8c8:	subcs	r3, r3, r1, lsl #10
   1d8cc:	cmp	r3, r1, lsl #9
   1d8d0:	adc	r0, r0, r0
   1d8d4:	subcs	r3, r3, r1, lsl #9
   1d8d8:	cmp	r3, r1, lsl #8
   1d8dc:	adc	r0, r0, r0
   1d8e0:	subcs	r3, r3, r1, lsl #8
   1d8e4:	cmp	r3, r1, lsl #7
   1d8e8:	adc	r0, r0, r0
   1d8ec:	subcs	r3, r3, r1, lsl #7
   1d8f0:	cmp	r3, r1, lsl #6
   1d8f4:	adc	r0, r0, r0
   1d8f8:	subcs	r3, r3, r1, lsl #6
   1d8fc:	cmp	r3, r1, lsl #5
   1d900:	adc	r0, r0, r0
   1d904:	subcs	r3, r3, r1, lsl #5
   1d908:	cmp	r3, r1, lsl #4
   1d90c:	adc	r0, r0, r0
   1d910:	subcs	r3, r3, r1, lsl #4
   1d914:	cmp	r3, r1, lsl #3
   1d918:	adc	r0, r0, r0
   1d91c:	subcs	r3, r3, r1, lsl #3
   1d920:	cmp	r3, r1, lsl #2
   1d924:	adc	r0, r0, r0
   1d928:	subcs	r3, r3, r1, lsl #2
   1d92c:	cmp	r3, r1, lsl #1
   1d930:	adc	r0, r0, r0
   1d934:	subcs	r3, r3, r1, lsl #1
   1d938:	cmp	r3, r1
   1d93c:	adc	r0, r0, r0
   1d940:	subcs	r3, r3, r1
   1d944:	cmp	ip, #0
   1d948:	rsbmi	r0, r0, #0
   1d94c:	bx	lr
   1d950:	teq	ip, r0
   1d954:	rsbmi	r0, r0, #0
   1d958:	bx	lr
   1d95c:	movcc	r0, #0
   1d960:	asreq	r0, ip, #31
   1d964:	orreq	r0, r0, #1
   1d968:	bx	lr
   1d96c:	clz	r2, r1
   1d970:	rsb	r2, r2, #31
   1d974:	cmp	ip, #0
   1d978:	lsr	r0, r3, r2
   1d97c:	rsbmi	r0, r0, #0
   1d980:	bx	lr
   1d984:	cmp	r0, #0
   1d988:	mvngt	r0, #-2147483648	; 0x80000000
   1d98c:	movlt	r0, #-2147483648	; 0x80000000
   1d990:	b	1da88 <__assert_fail@plt+0xc6b8>
   1d994:	cmp	r1, #0
   1d998:	beq	1d984 <__assert_fail@plt+0xc5b4>
   1d99c:	push	{r0, r1, lr}
   1d9a0:	bl	1d77c <__assert_fail@plt+0xc3ac>
   1d9a4:	pop	{r1, r2, lr}
   1d9a8:	mul	r3, r2, r0
   1d9ac:	sub	r1, r1, r3
   1d9b0:	bx	lr
   1d9b4:	cmp	r3, #0
   1d9b8:	cmpeq	r2, #0
   1d9bc:	bne	1d9e0 <__assert_fail@plt+0xc610>
   1d9c0:	cmp	r1, #0
   1d9c4:	movlt	r1, #-2147483648	; 0x80000000
   1d9c8:	movlt	r0, #0
   1d9cc:	blt	1d9dc <__assert_fail@plt+0xc60c>
   1d9d0:	cmpeq	r0, #0
   1d9d4:	mvnne	r1, #-2147483648	; 0x80000000
   1d9d8:	mvnne	r0, #0
   1d9dc:	b	1da88 <__assert_fail@plt+0xc6b8>
   1d9e0:	sub	sp, sp, #8
   1d9e4:	push	{sp, lr}
   1d9e8:	cmp	r1, #0
   1d9ec:	blt	1da0c <__assert_fail@plt+0xc63c>
   1d9f0:	cmp	r3, #0
   1d9f4:	blt	1da40 <__assert_fail@plt+0xc670>
   1d9f8:	bl	1da98 <__assert_fail@plt+0xc6c8>
   1d9fc:	ldr	lr, [sp, #4]
   1da00:	add	sp, sp, #8
   1da04:	pop	{r2, r3}
   1da08:	bx	lr
   1da0c:	rsbs	r0, r0, #0
   1da10:	sbc	r1, r1, r1, lsl #1
   1da14:	cmp	r3, #0
   1da18:	blt	1da64 <__assert_fail@plt+0xc694>
   1da1c:	bl	1da98 <__assert_fail@plt+0xc6c8>
   1da20:	ldr	lr, [sp, #4]
   1da24:	add	sp, sp, #8
   1da28:	pop	{r2, r3}
   1da2c:	rsbs	r0, r0, #0
   1da30:	sbc	r1, r1, r1, lsl #1
   1da34:	rsbs	r2, r2, #0
   1da38:	sbc	r3, r3, r3, lsl #1
   1da3c:	bx	lr
   1da40:	rsbs	r2, r2, #0
   1da44:	sbc	r3, r3, r3, lsl #1
   1da48:	bl	1da98 <__assert_fail@plt+0xc6c8>
   1da4c:	ldr	lr, [sp, #4]
   1da50:	add	sp, sp, #8
   1da54:	pop	{r2, r3}
   1da58:	rsbs	r0, r0, #0
   1da5c:	sbc	r1, r1, r1, lsl #1
   1da60:	bx	lr
   1da64:	rsbs	r2, r2, #0
   1da68:	sbc	r3, r3, r3, lsl #1
   1da6c:	bl	1da98 <__assert_fail@plt+0xc6c8>
   1da70:	ldr	lr, [sp, #4]
   1da74:	add	sp, sp, #8
   1da78:	pop	{r2, r3}
   1da7c:	rsbs	r2, r2, #0
   1da80:	sbc	r3, r3, r3, lsl #1
   1da84:	bx	lr
   1da88:	push	{r1, lr}
   1da8c:	mov	r0, #8
   1da90:	bl	1107c <raise@plt>
   1da94:	pop	{r1, pc}
   1da98:	cmp	r1, r3
   1da9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1daa0:	cmpeq	r0, r2
   1daa4:	mov	r4, r0
   1daa8:	mov	r5, r1
   1daac:	ldr	r9, [sp, #28]
   1dab0:	movcc	r0, #0
   1dab4:	movcc	r1, #0
   1dab8:	bcc	1dbb0 <__assert_fail@plt+0xc7e0>
   1dabc:	cmp	r3, #0
   1dac0:	clzeq	ip, r2
   1dac4:	clzne	ip, r3
   1dac8:	addeq	ip, ip, #32
   1dacc:	cmp	r5, #0
   1dad0:	clzeq	r1, r4
   1dad4:	addeq	r1, r1, #32
   1dad8:	clzne	r1, r5
   1dadc:	sub	ip, ip, r1
   1dae0:	sub	lr, ip, #32
   1dae4:	lsl	r7, r3, ip
   1dae8:	rsb	r8, ip, #32
   1daec:	orr	r7, r7, r2, lsl lr
   1daf0:	orr	r7, r7, r2, lsr r8
   1daf4:	lsl	r6, r2, ip
   1daf8:	cmp	r5, r7
   1dafc:	cmpeq	r4, r6
   1db00:	movcc	r0, #0
   1db04:	movcc	r1, #0
   1db08:	bcc	1db24 <__assert_fail@plt+0xc754>
   1db0c:	mov	r3, #1
   1db10:	subs	r4, r4, r6
   1db14:	lsl	r1, r3, lr
   1db18:	lsl	r0, r3, ip
   1db1c:	orr	r1, r1, r3, lsr r8
   1db20:	sbc	r5, r5, r7
   1db24:	cmp	ip, #0
   1db28:	beq	1dbb0 <__assert_fail@plt+0xc7e0>
   1db2c:	lsrs	r3, r7, #1
   1db30:	rrx	r2, r6
   1db34:	mov	r6, ip
   1db38:	b	1db5c <__assert_fail@plt+0xc78c>
   1db3c:	subs	r4, r4, r2
   1db40:	sbc	r5, r5, r3
   1db44:	adds	r4, r4, r4
   1db48:	adc	r5, r5, r5
   1db4c:	adds	r4, r4, #1
   1db50:	adc	r5, r5, #0
   1db54:	subs	r6, r6, #1
   1db58:	beq	1db78 <__assert_fail@plt+0xc7a8>
   1db5c:	cmp	r5, r3
   1db60:	cmpeq	r4, r2
   1db64:	bcs	1db3c <__assert_fail@plt+0xc76c>
   1db68:	adds	r4, r4, r4
   1db6c:	adc	r5, r5, r5
   1db70:	subs	r6, r6, #1
   1db74:	bne	1db5c <__assert_fail@plt+0xc78c>
   1db78:	lsr	r6, r4, ip
   1db7c:	lsr	r7, r5, ip
   1db80:	orr	r6, r6, r5, lsl r8
   1db84:	adds	r2, r0, r4
   1db88:	orr	r6, r6, r5, lsr lr
   1db8c:	adc	r3, r1, r5
   1db90:	lsl	r1, r7, ip
   1db94:	orr	r1, r1, r6, lsl lr
   1db98:	lsl	r0, r6, ip
   1db9c:	orr	r1, r1, r6, lsr r8
   1dba0:	subs	r0, r2, r0
   1dba4:	mov	r4, r6
   1dba8:	mov	r5, r7
   1dbac:	sbc	r1, r3, r1
   1dbb0:	cmp	r9, #0
   1dbb4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1dbb8:	strd	r4, [r9]
   1dbbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dbc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dbc4:	mov	r7, r0
   1dbc8:	ldr	r6, [pc, #72]	; 1dc18 <__assert_fail@plt+0xc848>
   1dbcc:	ldr	r5, [pc, #72]	; 1dc1c <__assert_fail@plt+0xc84c>
   1dbd0:	add	r6, pc, r6
   1dbd4:	add	r5, pc, r5
   1dbd8:	sub	r6, r6, r5
   1dbdc:	mov	r8, r1
   1dbe0:	mov	r9, r2
   1dbe4:	bl	11044 <calloc@plt-0x20>
   1dbe8:	asrs	r6, r6, #2
   1dbec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dbf0:	mov	r4, #0
   1dbf4:	add	r4, r4, #1
   1dbf8:	ldr	r3, [r5], #4
   1dbfc:	mov	r2, r9
   1dc00:	mov	r1, r8
   1dc04:	mov	r0, r7
   1dc08:	blx	r3
   1dc0c:	cmp	r6, r4
   1dc10:	bne	1dbf4 <__assert_fail@plt+0xc824>
   1dc14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dc18:	andeq	r3, r1, r8, lsr r3
   1dc1c:	andeq	r3, r1, r0, lsr r3
   1dc20:	bx	lr
   1dc24:	ldr	r3, [pc, #12]	; 1dc38 <__assert_fail@plt+0xc868>
   1dc28:	mov	r1, #0
   1dc2c:	add	r3, pc, r3
   1dc30:	ldr	r2, [r3]
   1dc34:	b	112bc <__cxa_atexit@plt>
   1dc38:	andeq	r3, r1, r8, lsl #10

Disassembly of section .fini:

0001dc3c <.fini>:
   1dc3c:	push	{r3, lr}
   1dc40:	pop	{r3, pc}
