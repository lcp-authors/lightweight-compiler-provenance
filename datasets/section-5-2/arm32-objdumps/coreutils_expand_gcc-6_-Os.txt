
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c58 <.init>:
   10c58:	push	{r3, lr}
   10c5c:	bl	1122c <__assert_fail@plt+0x35c>
   10c60:	pop	{r3, pc}

Disassembly of section .plt:

00010c64 <calloc@plt-0x14>:
   10c64:	push	{lr}		; (str lr, [sp, #-4]!)
   10c68:	ldr	lr, [pc, #4]	; 10c74 <calloc@plt-0x4>
   10c6c:	add	lr, pc, lr
   10c70:	ldr	pc, [lr, #8]!
   10c74:	andeq	r5, r1, ip, lsl #7

00010c78 <calloc@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #86016	; 0x15000
   10c80:	ldr	pc, [ip, #908]!	; 0x38c

00010c84 <fputs_unlocked@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #86016	; 0x15000
   10c8c:	ldr	pc, [ip, #900]!	; 0x384

00010c90 <raise@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #86016	; 0x15000
   10c98:	ldr	pc, [ip, #892]!	; 0x37c

00010c9c <strcmp@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #86016	; 0x15000
   10ca4:	ldr	pc, [ip, #884]!	; 0x374

00010ca8 <posix_fadvise64@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #86016	; 0x15000
   10cb0:	ldr	pc, [ip, #876]!	; 0x36c

00010cb4 <fflush@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #86016	; 0x15000
   10cbc:	ldr	pc, [ip, #868]!	; 0x364

00010cc0 <free@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #860]!	; 0x35c

00010ccc <_exit@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #852]!	; 0x354

00010cd8 <memcpy@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #844]!	; 0x34c

00010ce4 <mbsinit@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #836]!	; 0x344

00010cf0 <memcmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #828]!	; 0x33c

00010cfc <fputc_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #820]!	; 0x334

00010d08 <getc_unlocked@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #812]!	; 0x32c

00010d14 <dcgettext@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #804]!	; 0x324

00010d20 <realloc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #796]!	; 0x31c

00010d2c <textdomain@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #788]!	; 0x314

00010d38 <iswprint@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #780]!	; 0x30c

00010d44 <lseek64@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #772]!	; 0x304

00010d50 <__ctype_get_mb_cur_max@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #764]!	; 0x2fc

00010d5c <__fpending@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #756]!	; 0x2f4

00010d68 <ferror_unlocked@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #748]!	; 0x2ec

00010d74 <mbrtowc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d80 <error@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #732]!	; 0x2dc

00010d8c <malloc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #724]!	; 0x2d4

00010d98 <__libc_start_main@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #716]!	; 0x2cc

00010da4 <__freading@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #708]!	; 0x2c4

00010db0 <__gmon_start__@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #700]!	; 0x2bc

00010dbc <getopt_long@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #692]!	; 0x2b4

00010dc8 <__ctype_b_loc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #684]!	; 0x2ac

00010dd4 <exit@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #676]!	; 0x2a4

00010de0 <strlen@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #668]!	; 0x29c

00010dec <__errno_location@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #660]!	; 0x294

00010df8 <__cxa_atexit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #652]!	; 0x28c

00010e04 <memset@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #644]!	; 0x284

00010e10 <__printf_chk@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #636]!	; 0x27c

00010e1c <fileno@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #628]!	; 0x274

00010e28 <__fprintf_chk@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #620]!	; 0x26c

00010e34 <fclose@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #612]!	; 0x264

00010e40 <fseeko64@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #604]!	; 0x25c

00010e4c <setlocale@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #596]!	; 0x254

00010e58 <strrchr@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #588]!	; 0x24c

00010e64 <nl_langinfo@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #580]!	; 0x244

00010e70 <clearerr_unlocked@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #572]!	; 0x23c

00010e7c <fopen64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #564]!	; 0x234

00010e88 <bindtextdomain@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #556]!	; 0x22c

00010e94 <fputs@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #548]!	; 0x224

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #540]!	; 0x21c

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #532]!	; 0x214

00010eb8 <putchar_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #524]!	; 0x20c

00010ec4 <strspn@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #516]!	; 0x204

00010ed0 <__assert_fail@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #508]!	; 0x1fc

Disassembly of section .text:

00010ee0 <.text>:
   10ee0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   10ee4:	mov	r6, r0
   10ee8:	ldr	r0, [r1]
   10eec:	mov	r4, r1
   10ef0:	bl	12174 <__assert_fail@plt+0x12a4>
   10ef4:	ldr	r1, [pc, #692]	; 111b0 <__assert_fail@plt+0x2e0>
   10ef8:	mov	r0, #6
   10efc:	bl	10e4c <setlocale@plt>
   10f00:	ldr	r1, [pc, #684]	; 111b4 <__assert_fail@plt+0x2e4>
   10f04:	ldr	r0, [pc, #684]	; 111b8 <__assert_fail@plt+0x2e8>
   10f08:	bl	10e88 <bindtextdomain@plt>
   10f0c:	ldr	r8, [pc, #680]	; 111bc <__assert_fail@plt+0x2ec>
   10f10:	ldr	r0, [pc, #672]	; 111b8 <__assert_fail@plt+0x2e8>
   10f14:	ldr	r7, [pc, #676]	; 111c0 <__assert_fail@plt+0x2f0>
   10f18:	bl	10d2c <textdomain@plt>
   10f1c:	mov	r5, #0
   10f20:	ldr	r0, [pc, #668]	; 111c4 <__assert_fail@plt+0x2f4>
   10f24:	bl	14ab8 <__assert_fail@plt+0x3be8>
   10f28:	mov	r3, #1
   10f2c:	strb	r3, [r8]
   10f30:	ldr	r3, [pc, #656]	; 111c8 <__assert_fail@plt+0x2f8>
   10f34:	str	r5, [sp]
   10f38:	add	r2, r3, #80	; 0x50
   10f3c:	mov	r1, r4
   10f40:	mov	r0, r6
   10f44:	bl	10dbc <getopt_long@plt>
   10f48:	cmn	r0, #1
   10f4c:	bne	10fd0 <__assert_fail@plt+0x100>
   10f50:	bl	11a34 <__assert_fail@plt+0xb64>
   10f54:	ldr	r3, [pc, #624]	; 111cc <__assert_fail@plt+0x2fc>
   10f58:	ldr	r0, [r3]
   10f5c:	cmp	r6, r0
   10f60:	addgt	r0, r4, r0, lsl #2
   10f64:	movle	r0, #0
   10f68:	bl	11c1c <__assert_fail@plt+0xd4c>
   10f6c:	mov	r0, #0
   10f70:	bl	11c44 <__assert_fail@plt+0xd74>
   10f74:	subs	r9, r0, #0
   10f78:	beq	10fbc <__assert_fail@plt+0xec>
   10f7c:	mov	r4, #0
   10f80:	mov	r5, #0
   10f84:	mov	r7, #1
   10f88:	mov	sl, #32
   10f8c:	mov	r3, #0
   10f90:	str	r3, [sp, #12]
   10f94:	mov	r0, r9
   10f98:	bl	10d08 <getc_unlocked@plt>
   10f9c:	subs	r6, r0, #0
   10fa0:	bge	11144 <__assert_fail@plt+0x274>
   10fa4:	mov	r0, r9
   10fa8:	bl	11c44 <__assert_fail@plt+0xd74>
   10fac:	subs	r9, r0, #0
   10fb0:	bne	10f94 <__assert_fail@plt+0xc4>
   10fb4:	cmp	r7, #0
   10fb8:	bne	11100 <__assert_fail@plt+0x230>
   10fbc:	bl	11dc4 <__assert_fail@plt+0xef4>
   10fc0:	ldr	r3, [pc, #520]	; 111d0 <__assert_fail@plt+0x300>
   10fc4:	ldr	r0, [r3]
   10fc8:	add	sp, sp, #16
   10fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10fd0:	cmp	r0, #57	; 0x39
   10fd4:	bgt	10ffc <__assert_fail@plt+0x12c>
   10fd8:	cmp	r0, #48	; 0x30
   10fdc:	bge	11020 <__assert_fail@plt+0x150>
   10fe0:	cmn	r0, #3
   10fe4:	beq	1103c <__assert_fail@plt+0x16c>
   10fe8:	cmn	r0, #2
   10fec:	moveq	r0, #0
   10ff0:	beq	10ff8 <__assert_fail@plt+0x128>
   10ff4:	mov	r0, #1
   10ff8:	bl	11318 <__assert_fail@plt+0x448>
   10ffc:	cmp	r0, #105	; 0x69
   11000:	beq	11018 <__assert_fail@plt+0x148>
   11004:	cmp	r0, #116	; 0x74
   11008:	bne	10ff4 <__assert_fail@plt+0x124>
   1100c:	ldr	r0, [r7]
   11010:	bl	1172c <__assert_fail@plt+0x85c>
   11014:	b	10f30 <__assert_fail@plt+0x60>
   11018:	strb	r5, [r8]
   1101c:	b	10f30 <__assert_fail@plt+0x60>
   11020:	ldr	r3, [r7]
   11024:	cmp	r3, #0
   11028:	strbeq	r0, [sp, #12]
   1102c:	subne	r0, r3, #1
   11030:	strbeq	r3, [sp, #13]
   11034:	addeq	r0, sp, #12
   11038:	b	11010 <__assert_fail@plt+0x140>
   1103c:	ldr	r3, [pc, #400]	; 111d4 <__assert_fail@plt+0x304>
   11040:	ldr	r0, [pc, #400]	; 111d8 <__assert_fail@plt+0x308>
   11044:	str	r3, [sp]
   11048:	ldr	r3, [pc, #396]	; 111dc <__assert_fail@plt+0x30c>
   1104c:	str	r5, [sp, #4]
   11050:	ldr	r2, [pc, #392]	; 111e0 <__assert_fail@plt+0x310>
   11054:	ldr	r0, [r0]
   11058:	ldr	r3, [r3]
   1105c:	ldr	r1, [pc, #384]	; 111e4 <__assert_fail@plt+0x314>
   11060:	bl	13bf4 <__assert_fail@plt+0x2d24>
   11064:	mov	r0, #0
   11068:	bl	10dd4 <exit@plt>
   1106c:	mov	r0, sl
   11070:	bl	10eb8 <putchar_unlocked@plt>
   11074:	cmp	r0, #0
   11078:	bge	110a0 <__assert_fail@plt+0x1d0>
   1107c:	bl	10dec <__errno_location@plt>
   11080:	mov	r2, #5
   11084:	ldr	r1, [pc, #348]	; 111e8 <__assert_fail@plt+0x318>
   11088:	ldr	r4, [r0]
   1108c:	mov	r0, #0
   11090:	bl	10d14 <dcgettext@plt>
   11094:	mov	r1, r4
   11098:	mov	r2, r0
   1109c:	b	111a8 <__assert_fail@plt+0x2d8>
   110a0:	adds	r4, r4, #1
   110a4:	adc	r5, r5, #0
   110a8:	cmp	r7, r5
   110ac:	cmpeq	r6, r4
   110b0:	bhi	1106c <__assert_fail@plt+0x19c>
   110b4:	mov	r6, sl
   110b8:	ldrb	r3, [r8]
   110bc:	cmp	r3, #0
   110c0:	movne	r7, #1
   110c4:	bne	110d8 <__assert_fail@plt+0x208>
   110c8:	bl	10dc8 <__ctype_b_loc@plt>
   110cc:	lsl	r3, r6, #1
   110d0:	ldr	r2, [r0]
   110d4:	ldrh	r7, [r2, r3]
   110d8:	cmp	r6, #0
   110dc:	and	r7, r7, #1
   110e0:	blt	10fbc <__assert_fail@plt+0xec>
   110e4:	mov	r0, r6
   110e8:	bl	10eb8 <putchar_unlocked@plt>
   110ec:	cmp	r0, #0
   110f0:	blt	1107c <__assert_fail@plt+0x1ac>
   110f4:	cmp	r6, #10
   110f8:	bne	10f94 <__assert_fail@plt+0xc4>
   110fc:	b	10f7c <__assert_fail@plt+0xac>
   11100:	cmp	r6, #8
   11104:	bne	11130 <__assert_fail@plt+0x260>
   11108:	orrs	r3, r4, r5
   1110c:	movne	r3, #1
   11110:	moveq	r3, #0
   11114:	subs	r4, r4, r3
   11118:	ldr	r3, [sp, #12]
   1111c:	sbc	r5, r5, #0
   11120:	cmp	r3, #0
   11124:	subne	r3, r3, #1
   11128:	str	r3, [sp, #12]
   1112c:	b	110b8 <__assert_fail@plt+0x1e8>
   11130:	adds	r4, r4, #1
   11134:	adc	r5, r5, #0
   11138:	orrs	r3, r4, r5
   1113c:	bne	110b8 <__assert_fail@plt+0x1e8>
   11140:	b	11190 <__assert_fail@plt+0x2c0>
   11144:	cmp	r7, #0
   11148:	beq	110e4 <__assert_fail@plt+0x214>
   1114c:	cmp	r6, #9
   11150:	bne	11100 <__assert_fail@plt+0x230>
   11154:	add	r3, sp, #11
   11158:	add	r2, sp, #12
   1115c:	mov	r0, r4
   11160:	mov	r1, r5
   11164:	bl	11b30 <__assert_fail@plt+0xc60>
   11168:	ldrb	r3, [sp, #11]
   1116c:	cmp	r3, #0
   11170:	mov	r6, r0
   11174:	mov	r7, r1
   11178:	beq	11184 <__assert_fail@plt+0x2b4>
   1117c:	adds	r6, r4, #1
   11180:	adc	r7, r5, #0
   11184:	cmp	r5, r7
   11188:	cmpeq	r4, r6
   1118c:	bls	110a0 <__assert_fail@plt+0x1d0>
   11190:	mov	r2, #5
   11194:	ldr	r1, [pc, #80]	; 111ec <__assert_fail@plt+0x31c>
   11198:	mov	r0, #0
   1119c:	bl	10d14 <dcgettext@plt>
   111a0:	mov	r1, #0
   111a4:	mov	r2, r0
   111a8:	mov	r0, #1
   111ac:	bl	10d80 <error@plt>
   111b0:	andeq	r4, r1, r2, asr lr
   111b4:	andeq	r4, r1, r3, asr lr
   111b8:			; <UNDEFINED> instruction: 0x00014db0
   111bc:	muleq	r2, r8, r1
   111c0:	andeq	r6, r2, r8, asr r1
   111c4:	andeq	r1, r1, r4, ror lr
   111c8:	andeq	r4, r1, r4, lsl fp
   111cc:	andeq	r6, r2, r0, asr #2
   111d0:	muleq	r2, r4, r1
   111d4:	andeq	r4, r1, fp, ror #28
   111d8:	andeq	r6, r2, r4, asr r1
   111dc:	andeq	r6, r2, ip, ror #1
   111e0:	andeq	r4, r1, ip, lsr #27
   111e4:	andeq	r4, r1, r6, lsl #23
   111e8:	muleq	r1, r2, lr
   111ec:	andeq	r4, r1, fp, ror lr
   111f0:	mov	fp, #0
   111f4:	mov	lr, #0
   111f8:	pop	{r1}		; (ldr r1, [sp], #4)
   111fc:	mov	r2, sp
   11200:	push	{r2}		; (str r2, [sp, #-4]!)
   11204:	push	{r0}		; (str r0, [sp, #-4]!)
   11208:	ldr	ip, [pc, #16]	; 11220 <__assert_fail@plt+0x350>
   1120c:	push	{ip}		; (str ip, [sp, #-4]!)
   11210:	ldr	r0, [pc, #12]	; 11224 <__assert_fail@plt+0x354>
   11214:	ldr	r3, [pc, #12]	; 11228 <__assert_fail@plt+0x358>
   11218:	bl	10d98 <__libc_start_main@plt>
   1121c:	bl	10eac <abort@plt>
   11220:			; <UNDEFINED> instruction: 0x00014ab4
   11224:	andeq	r0, r1, r0, ror #29
   11228:	andeq	r4, r1, r4, asr sl
   1122c:	ldr	r3, [pc, #20]	; 11248 <__assert_fail@plt+0x378>
   11230:	ldr	r2, [pc, #20]	; 1124c <__assert_fail@plt+0x37c>
   11234:	add	r3, pc, r3
   11238:	ldr	r2, [r3, r2]
   1123c:	cmp	r2, #0
   11240:	bxeq	lr
   11244:	b	10db0 <__gmon_start__@plt>
   11248:	andeq	r4, r1, r4, asr #27
   1124c:	ldrdeq	r0, [r0], -r8
   11250:	ldr	r3, [pc, #28]	; 11274 <__assert_fail@plt+0x3a4>
   11254:	ldr	r0, [pc, #28]	; 11278 <__assert_fail@plt+0x3a8>
   11258:	sub	r3, r3, r0
   1125c:	cmp	r3, #6
   11260:	bxls	lr
   11264:	ldr	r3, [pc, #16]	; 1127c <__assert_fail@plt+0x3ac>
   11268:	cmp	r3, #0
   1126c:	bxeq	lr
   11270:	bx	r3
   11274:	andeq	r6, r2, r7, lsr r1
   11278:	andeq	r6, r2, r4, lsr r1
   1127c:	andeq	r0, r0, r0
   11280:	ldr	r1, [pc, #36]	; 112ac <__assert_fail@plt+0x3dc>
   11284:	ldr	r0, [pc, #36]	; 112b0 <__assert_fail@plt+0x3e0>
   11288:	sub	r1, r1, r0
   1128c:	asr	r1, r1, #2
   11290:	add	r1, r1, r1, lsr #31
   11294:	asrs	r1, r1, #1
   11298:	bxeq	lr
   1129c:	ldr	r3, [pc, #16]	; 112b4 <__assert_fail@plt+0x3e4>
   112a0:	cmp	r3, #0
   112a4:	bxeq	lr
   112a8:	bx	r3
   112ac:	andeq	r6, r2, r4, lsr r1
   112b0:	andeq	r6, r2, r4, lsr r1
   112b4:	andeq	r0, r0, r0
   112b8:	push	{r4, lr}
   112bc:	ldr	r4, [pc, #24]	; 112dc <__assert_fail@plt+0x40c>
   112c0:	ldrb	r3, [r4]
   112c4:	cmp	r3, #0
   112c8:	popne	{r4, pc}
   112cc:	bl	11250 <__assert_fail@plt+0x380>
   112d0:	mov	r3, #1
   112d4:	strb	r3, [r4]
   112d8:	pop	{r4, pc}
   112dc:	andeq	r6, r2, ip, asr r1
   112e0:	ldr	r0, [pc, #40]	; 11310 <__assert_fail@plt+0x440>
   112e4:	ldr	r3, [r0]
   112e8:	cmp	r3, #0
   112ec:	bne	112f4 <__assert_fail@plt+0x424>
   112f0:	b	11280 <__assert_fail@plt+0x3b0>
   112f4:	ldr	r3, [pc, #24]	; 11314 <__assert_fail@plt+0x444>
   112f8:	cmp	r3, #0
   112fc:	beq	112f0 <__assert_fail@plt+0x420>
   11300:	push	{r4, lr}
   11304:	blx	r3
   11308:	pop	{r4, lr}
   1130c:	b	11280 <__assert_fail@plt+0x3b0>
   11310:	andeq	r5, r2, r4, lsl pc
   11314:	andeq	r0, r0, r0
   11318:	subs	r5, r0, #0
   1131c:	push	{r7, lr}
   11320:	sub	sp, sp, #56	; 0x38
   11324:	ldr	r4, [pc, #528]	; 1153c <__assert_fail@plt+0x66c>
   11328:	beq	11360 <__assert_fail@plt+0x490>
   1132c:	ldr	r3, [pc, #524]	; 11540 <__assert_fail@plt+0x670>
   11330:	mov	r2, #5
   11334:	ldr	r1, [pc, #520]	; 11544 <__assert_fail@plt+0x674>
   11338:	mov	r0, #0
   1133c:	ldr	r6, [r3]
   11340:	bl	10d14 <dcgettext@plt>
   11344:	ldr	r3, [r4]
   11348:	mov	r1, #1
   1134c:	mov	r2, r0
   11350:	mov	r0, r6
   11354:	bl	10e28 <__fprintf_chk@plt>
   11358:	mov	r0, r5
   1135c:	bl	10dd4 <exit@plt>
   11360:	mov	r2, #5
   11364:	ldr	r1, [pc, #476]	; 11548 <__assert_fail@plt+0x678>
   11368:	bl	10d14 <dcgettext@plt>
   1136c:	ldr	r2, [r4]
   11370:	ldr	r4, [pc, #468]	; 1154c <__assert_fail@plt+0x67c>
   11374:	ldr	r8, [pc, #468]	; 11550 <__assert_fail@plt+0x680>
   11378:	mov	r6, r5
   1137c:	mov	r1, r0
   11380:	mov	r0, #1
   11384:	bl	10e10 <__printf_chk@plt>
   11388:	mov	r2, #5
   1138c:	ldr	r1, [pc, #448]	; 11554 <__assert_fail@plt+0x684>
   11390:	mov	r0, r5
   11394:	bl	10d14 <dcgettext@plt>
   11398:	ldr	r1, [r4]
   1139c:	bl	10c84 <fputs_unlocked@plt>
   113a0:	mov	r2, #5
   113a4:	ldr	r1, [pc, #428]	; 11558 <__assert_fail@plt+0x688>
   113a8:	mov	r0, r5
   113ac:	bl	10d14 <dcgettext@plt>
   113b0:	ldr	r1, [r4]
   113b4:	bl	10c84 <fputs_unlocked@plt>
   113b8:	mov	r2, #5
   113bc:	ldr	r1, [pc, #408]	; 1155c <__assert_fail@plt+0x68c>
   113c0:	mov	r0, r5
   113c4:	bl	10d14 <dcgettext@plt>
   113c8:	ldr	r1, [r4]
   113cc:	bl	10c84 <fputs_unlocked@plt>
   113d0:	mov	r2, #5
   113d4:	ldr	r1, [pc, #388]	; 11560 <__assert_fail@plt+0x690>
   113d8:	mov	r0, r5
   113dc:	bl	10d14 <dcgettext@plt>
   113e0:	ldr	r1, [r4]
   113e4:	bl	10c84 <fputs_unlocked@plt>
   113e8:	bl	11e0c <__assert_fail@plt+0xf3c>
   113ec:	mov	r2, #5
   113f0:	ldr	r1, [pc, #364]	; 11564 <__assert_fail@plt+0x694>
   113f4:	mov	r0, r5
   113f8:	bl	10d14 <dcgettext@plt>
   113fc:	ldr	r1, [r4]
   11400:	bl	10c84 <fputs_unlocked@plt>
   11404:	mov	r2, #5
   11408:	ldr	r1, [pc, #344]	; 11568 <__assert_fail@plt+0x698>
   1140c:	mov	r0, r5
   11410:	bl	10d14 <dcgettext@plt>
   11414:	ldr	r1, [r4]
   11418:	bl	10c84 <fputs_unlocked@plt>
   1141c:	ldr	lr, [pc, #328]	; 1156c <__assert_fail@plt+0x69c>
   11420:	mov	ip, sp
   11424:	ldm	lr!, {r0, r1, r2, r3}
   11428:	stmia	ip!, {r0, r1, r2, r3}
   1142c:	ldm	lr!, {r0, r1, r2, r3}
   11430:	stmia	ip!, {r0, r1, r2, r3}
   11434:	ldm	lr!, {r0, r1, r2, r3}
   11438:	stmia	ip!, {r0, r1, r2, r3}
   1143c:	ldm	lr, {r0, r1}
   11440:	stm	ip, {r0, r1}
   11444:	ldr	r1, [sp, r6]
   11448:	add	r7, sp, r6
   1144c:	cmp	r1, #0
   11450:	bne	114f4 <__assert_fail@plt+0x624>
   11454:	ldr	r6, [r7, #4]
   11458:	ldr	r7, [pc, #240]	; 11550 <__assert_fail@plt+0x680>
   1145c:	cmp	r6, #0
   11460:	mov	r2, #5
   11464:	ldr	r1, [pc, #260]	; 11570 <__assert_fail@plt+0x6a0>
   11468:	mov	r0, #0
   1146c:	moveq	r6, r7
   11470:	bl	10d14 <dcgettext@plt>
   11474:	ldr	r3, [pc, #248]	; 11574 <__assert_fail@plt+0x6a4>
   11478:	ldr	r2, [pc, #248]	; 11578 <__assert_fail@plt+0x6a8>
   1147c:	mov	r1, r0
   11480:	mov	r0, #1
   11484:	bl	10e10 <__printf_chk@plt>
   11488:	mov	r1, #0
   1148c:	mov	r0, #5
   11490:	bl	10e4c <setlocale@plt>
   11494:	cmp	r0, #0
   11498:	bne	1150c <__assert_fail@plt+0x63c>
   1149c:	mov	r2, #5
   114a0:	ldr	r1, [pc, #212]	; 1157c <__assert_fail@plt+0x6ac>
   114a4:	mov	r0, #0
   114a8:	bl	10d14 <dcgettext@plt>
   114ac:	ldr	r3, [pc, #156]	; 11550 <__assert_fail@plt+0x680>
   114b0:	ldr	r2, [pc, #188]	; 11574 <__assert_fail@plt+0x6a4>
   114b4:	mov	r1, r0
   114b8:	mov	r0, #1
   114bc:	bl	10e10 <__printf_chk@plt>
   114c0:	mov	r2, #5
   114c4:	ldr	r1, [pc, #180]	; 11580 <__assert_fail@plt+0x6b0>
   114c8:	mov	r0, #0
   114cc:	bl	10d14 <dcgettext@plt>
   114d0:	ldr	r2, [pc, #172]	; 11584 <__assert_fail@plt+0x6b4>
   114d4:	cmp	r6, r7
   114d8:	ldr	r3, [pc, #168]	; 11588 <__assert_fail@plt+0x6b8>
   114dc:	moveq	r3, r2
   114e0:	mov	r2, r6
   114e4:	mov	r1, r0
   114e8:	mov	r0, #1
   114ec:	bl	10e10 <__printf_chk@plt>
   114f0:	b	11358 <__assert_fail@plt+0x488>
   114f4:	mov	r0, r8
   114f8:	bl	10c9c <strcmp@plt>
   114fc:	add	r6, r6, #8
   11500:	cmp	r0, #0
   11504:	bne	11444 <__assert_fail@plt+0x574>
   11508:	b	11454 <__assert_fail@plt+0x584>
   1150c:	mov	r2, #3
   11510:	ldr	r1, [pc, #116]	; 1158c <__assert_fail@plt+0x6bc>
   11514:	bl	10ea0 <strncmp@plt>
   11518:	cmp	r0, #0
   1151c:	beq	1149c <__assert_fail@plt+0x5cc>
   11520:	mov	r2, #5
   11524:	ldr	r1, [pc, #100]	; 11590 <__assert_fail@plt+0x6c0>
   11528:	mov	r0, #0
   1152c:	bl	10d14 <dcgettext@plt>
   11530:	ldr	r1, [r4]
   11534:	bl	10c84 <fputs_unlocked@plt>
   11538:	b	1149c <__assert_fail@plt+0x5cc>
   1153c:	andeq	r6, r2, r4, lsr #3
   11540:	andeq	r6, r2, r8, asr #2
   11544:	andeq	r4, r1, sp, lsl #23
   11548:			; <UNDEFINED> instruction: 0x00014bb4
   1154c:	andeq	r6, r2, r4, asr r1
   11550:	andeq	r4, r1, r6, lsl #23
   11554:	ldrdeq	r4, [r1], -r5
   11558:	andeq	r4, r1, r7, lsl ip
   1155c:	andeq	r4, r1, pc, asr #24
   11560:	muleq	r1, sl, ip
   11564:	andeq	r4, r1, sl, lsl #26
   11568:	andeq	r4, r1, r7, lsr sp
   1156c:	ldrdeq	r4, [r1], -ip
   11570:	andeq	r4, r1, sp, ror #26
   11574:	andeq	r4, r1, r4, lsl #27
   11578:	andeq	r4, r1, ip, lsr #27
   1157c:	andeq	r4, r1, r5, lsl #28
   11580:	andeq	r4, r1, r0, lsr #28
   11584:			; <UNDEFINED> instruction: 0x00014eba
   11588:	andeq	r4, r1, r2, asr lr
   1158c:			; <UNDEFINED> instruction: 0x00014dba
   11590:			; <UNDEFINED> instruction: 0x00014dbe
   11594:	andeq	r0, r0, r0
   11598:	ldr	r3, [pc, #72]	; 115e8 <__assert_fail@plt+0x718>
   1159c:	push	{r4, r6, r7, lr}
   115a0:	mov	r6, r0
   115a4:	mov	r7, r1
   115a8:	ldrd	r0, [r3]
   115ac:	mov	r4, r3
   115b0:	orrs	r2, r0, r1
   115b4:	moveq	r0, #1
   115b8:	beq	115e0 <__assert_fail@plt+0x710>
   115bc:	mov	r2, #5
   115c0:	ldr	r1, [pc, #36]	; 115ec <__assert_fail@plt+0x71c>
   115c4:	mov	r0, #0
   115c8:	bl	10d14 <dcgettext@plt>
   115cc:	mov	r1, #0
   115d0:	mov	r2, r0
   115d4:	mov	r0, r1
   115d8:	bl	10d80 <error@plt>
   115dc:	mov	r0, #0
   115e0:	strd	r6, [r4]
   115e4:	pop	{r4, r6, r7, pc}
   115e8:	andeq	r6, r2, r0, ror #2
   115ec:	andeq	r4, r1, r1, lsr #30
   115f0:	ldr	r3, [pc, #72]	; 11640 <__assert_fail@plt+0x770>
   115f4:	push	{r4, r6, r7, lr}
   115f8:	mov	r6, r0
   115fc:	mov	r7, r1
   11600:	ldrd	r0, [r3, #8]
   11604:	mov	r4, r3
   11608:	orrs	r2, r0, r1
   1160c:	moveq	r0, #1
   11610:	beq	11638 <__assert_fail@plt+0x768>
   11614:	mov	r2, #5
   11618:	ldr	r1, [pc, #36]	; 11644 <__assert_fail@plt+0x774>
   1161c:	mov	r0, #0
   11620:	bl	10d14 <dcgettext@plt>
   11624:	mov	r1, #0
   11628:	mov	r2, r0
   1162c:	mov	r0, r1
   11630:	bl	10d80 <error@plt>
   11634:	mov	r0, #0
   11638:	strd	r6, [r4, #8]
   1163c:	pop	{r4, r6, r7, pc}
   11640:	andeq	r6, r2, r0, ror #2
   11644:	andeq	r4, r1, r0, asr pc
   11648:	push	{r4, r6, r7, r8, r9, lr}
   1164c:	mov	r8, r0
   11650:	ldr	r4, [pc, #200]	; 11720 <__assert_fail@plt+0x850>
   11654:	mov	r9, r1
   11658:	ldr	r3, [r4, #16]
   1165c:	cmp	r3, #0
   11660:	beq	1170c <__assert_fail@plt+0x83c>
   11664:	ldr	r2, [r4, #20]
   11668:	add	r2, r2, r3, lsl #3
   1166c:	ldrd	r6, [r2, #-8]
   11670:	cmp	r7, r1
   11674:	cmpeq	r6, r0
   11678:	movhi	r6, #0
   1167c:	movhi	r7, #0
   11680:	bhi	1168c <__assert_fail@plt+0x7bc>
   11684:	subs	r6, r8, r6
   11688:	sbc	r7, r9, r7
   1168c:	ldr	r2, [r4, #24]
   11690:	cmp	r3, r2
   11694:	bne	116ac <__assert_fail@plt+0x7dc>
   11698:	mov	r2, #8
   1169c:	ldr	r1, [pc, #128]	; 11724 <__assert_fail@plt+0x854>
   116a0:	ldr	r0, [r4, #20]
   116a4:	bl	13db4 <__assert_fail@plt+0x2ee4>
   116a8:	str	r0, [r4, #20]
   116ac:	ldr	r3, [r4, #16]
   116b0:	ldr	r2, [r4, #20]
   116b4:	add	r1, r3, #1
   116b8:	lsl	r3, r3, #3
   116bc:	str	r1, [r4, #16]
   116c0:	strd	r8, [r2, r3]
   116c4:	ldr	r2, [r4, #28]
   116c8:	mov	r3, #0
   116cc:	cmp	r7, r3
   116d0:	cmpeq	r6, r2
   116d4:	popls	{r4, r6, r7, r8, r9, pc}
   116d8:	mov	r3, #0
   116dc:	mvn	r2, #0
   116e0:	cmp	r7, r3
   116e4:	cmpeq	r6, r2
   116e8:	bls	11718 <__assert_fail@plt+0x848>
   116ec:	mov	r2, #5
   116f0:	ldr	r1, [pc, #48]	; 11728 <__assert_fail@plt+0x858>
   116f4:	mov	r0, #0
   116f8:	bl	10d14 <dcgettext@plt>
   116fc:	mov	r1, #0
   11700:	mov	r2, r0
   11704:	mov	r0, #1
   11708:	bl	10d80 <error@plt>
   1170c:	mov	r6, #0
   11710:	mov	r7, #0
   11714:	b	11684 <__assert_fail@plt+0x7b4>
   11718:	str	r6, [r4, #28]
   1171c:	pop	{r4, r6, r7, r8, r9, pc}
   11720:	andeq	r6, r2, r0, ror #2
   11724:	andeq	r6, r2, r8, ror r1
   11728:	andeq	r4, r1, pc, ror pc
   1172c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11730:	mov	r8, #0
   11734:	sub	sp, sp, #20
   11738:	mov	r2, #0
   1173c:	mov	r3, #0
   11740:	mov	r7, r0
   11744:	mov	fp, #1
   11748:	mov	sl, r8
   1174c:	mov	r9, r8
   11750:	mov	r5, r8
   11754:	mov	r6, r8
   11758:	strd	r2, [sp]
   1175c:	ldrb	r3, [r7]
   11760:	cmp	r3, #0
   11764:	moveq	r0, fp
   11768:	beq	117b8 <__assert_fail@plt+0x8e8>
   1176c:	cmp	r3, #44	; 0x2c
   11770:	str	r3, [sp, #12]
   11774:	beq	11794 <__assert_fail@plt+0x8c4>
   11778:	bl	10dc8 <__ctype_b_loc@plt>
   1177c:	ldr	r3, [sp, #12]
   11780:	lsl	r2, r3, #1
   11784:	ldr	r1, [r0]
   11788:	ldrh	r4, [r1, r2]
   1178c:	ands	r4, r4, #1
   11790:	beq	11814 <__assert_fail@plt+0x944>
   11794:	cmp	r5, #0
   11798:	beq	1180c <__assert_fail@plt+0x93c>
   1179c:	cmp	r9, #0
   117a0:	ldrd	r0, [sp]
   117a4:	beq	117e4 <__assert_fail@plt+0x914>
   117a8:	bl	11598 <__assert_fail@plt+0x6c8>
   117ac:	cmp	r0, #0
   117b0:	bne	119d0 <__assert_fail@plt+0xb00>
   117b4:	mov	r5, r9
   117b8:	and	r5, r5, r0
   117bc:	tst	r5, #255	; 0xff
   117c0:	beq	117d4 <__assert_fail@plt+0x904>
   117c4:	cmp	r9, #0
   117c8:	ldrd	r0, [sp]
   117cc:	beq	119f0 <__assert_fail@plt+0xb20>
   117d0:	bl	11598 <__assert_fail@plt+0x6c8>
   117d4:	cmp	r0, #0
   117d8:	bne	11a0c <__assert_fail@plt+0xb3c>
   117dc:	mov	r0, #1
   117e0:	bl	10dd4 <exit@plt>
   117e4:	cmp	sl, #0
   117e8:	beq	11800 <__assert_fail@plt+0x930>
   117ec:	bl	115f0 <__assert_fail@plt+0x720>
   117f0:	cmp	r0, #0
   117f4:	bne	119dc <__assert_fail@plt+0xb0c>
   117f8:	mov	r5, sl
   117fc:	b	117b8 <__assert_fail@plt+0x8e8>
   11800:	bl	11648 <__assert_fail@plt+0x778>
   11804:	mov	r9, r6
   11808:	mov	r5, #0
   1180c:	add	r7, r7, #1
   11810:	b	1175c <__assert_fail@plt+0x88c>
   11814:	cmp	r3, #47	; 0x2f
   11818:	bne	1186c <__assert_fail@plt+0x99c>
   1181c:	cmp	r5, #0
   11820:	moveq	sl, r6
   11824:	moveq	r9, #1
   11828:	beq	1180c <__assert_fail@plt+0x93c>
   1182c:	mov	r2, #5
   11830:	ldr	r1, [pc, #488]	; 11a20 <__assert_fail@plt+0xb50>
   11834:	mov	r0, r6
   11838:	bl	10d14 <dcgettext@plt>
   1183c:	mov	fp, r6
   11840:	mov	sl, #0
   11844:	mov	r9, r0
   11848:	mov	r0, r7
   1184c:	bl	137a4 <__assert_fail@plt+0x28d4>
   11850:	mov	r2, r9
   11854:	mov	r1, r6
   11858:	mov	r9, r5
   1185c:	mov	r3, r0
   11860:	mov	r0, r4
   11864:	bl	10d80 <error@plt>
   11868:	b	1180c <__assert_fail@plt+0x93c>
   1186c:	cmp	r3, #43	; 0x2b
   11870:	bne	118c4 <__assert_fail@plt+0x9f4>
   11874:	cmp	r5, #0
   11878:	moveq	r9, r6
   1187c:	moveq	sl, #1
   11880:	beq	1180c <__assert_fail@plt+0x93c>
   11884:	mov	r2, #5
   11888:	ldr	r1, [pc, #404]	; 11a24 <__assert_fail@plt+0xb54>
   1188c:	mov	r0, r6
   11890:	bl	10d14 <dcgettext@plt>
   11894:	mov	sl, r5
   11898:	mov	fp, r6
   1189c:	mov	r9, r0
   118a0:	mov	r0, r7
   118a4:	bl	137a4 <__assert_fail@plt+0x28d4>
   118a8:	mov	r2, r9
   118ac:	mov	r1, r6
   118b0:	mov	r9, #0
   118b4:	mov	r3, r0
   118b8:	mov	r0, r4
   118bc:	bl	10d80 <error@plt>
   118c0:	b	1180c <__assert_fail@plt+0x93c>
   118c4:	sub	r1, r3, #48	; 0x30
   118c8:	cmp	r1, #9
   118cc:	bhi	11998 <__assert_fail@plt+0xac8>
   118d0:	cmp	r5, #0
   118d4:	beq	11984 <__assert_fail@plt+0xab4>
   118d8:	ldrd	r2, [sp]
   118dc:	add	r5, pc, #308	; 0x134
   118e0:	ldrd	r4, [r5]
   118e4:	cmp	r3, r5
   118e8:	cmpeq	r2, r4
   118ec:	bhi	1191c <__assert_fail@plt+0xa4c>
   118f0:	ldr	r3, [sp]
   118f4:	mov	r0, #10
   118f8:	ldr	ip, [sp, #4]
   118fc:	umull	r2, r3, r3, r0
   11900:	mla	r3, r0, ip, r3
   11904:	adds	r2, r2, r1
   11908:	adc	r3, r3, r1, asr #31
   1190c:	ldrd	r0, [sp]
   11910:	cmp	r3, r1
   11914:	cmpeq	r2, r0
   11918:	bcs	119e4 <__assert_fail@plt+0xb14>
   1191c:	ldr	r1, [pc, #260]	; 11a28 <__assert_fail@plt+0xb58>
   11920:	mov	r0, r8
   11924:	bl	10ec4 <strspn@plt>
   11928:	mov	fp, r6
   1192c:	mov	r1, r0
   11930:	mov	r7, r0
   11934:	mov	r0, r8
   11938:	bl	14108 <__assert_fail@plt+0x3238>
   1193c:	mov	r2, #5
   11940:	ldr	r1, [pc, #228]	; 11a2c <__assert_fail@plt+0xb5c>
   11944:	sub	r7, r7, #1
   11948:	add	r7, r8, r7
   1194c:	mov	r4, r0
   11950:	mov	r0, r6
   11954:	bl	10d14 <dcgettext@plt>
   11958:	mov	r5, r0
   1195c:	mov	r0, r4
   11960:	bl	137a4 <__assert_fail@plt+0x28d4>
   11964:	mov	r2, r5
   11968:	mov	r1, r6
   1196c:	mov	r3, r0
   11970:	mov	r0, #0
   11974:	bl	10d80 <error@plt>
   11978:	mov	r0, r4
   1197c:	bl	1208c <__assert_fail@plt+0x11bc>
   11980:	b	119e8 <__assert_fail@plt+0xb18>
   11984:	mov	r2, #0
   11988:	mov	r3, #0
   1198c:	mov	r8, r7
   11990:	strd	r2, [sp]
   11994:	b	118f0 <__assert_fail@plt+0xa20>
   11998:	mov	r2, #5
   1199c:	ldr	r1, [pc, #140]	; 11a30 <__assert_fail@plt+0xb60>
   119a0:	mov	r0, r4
   119a4:	bl	10d14 <dcgettext@plt>
   119a8:	mov	r6, r0
   119ac:	mov	r0, r7
   119b0:	bl	137a4 <__assert_fail@plt+0x28d4>
   119b4:	mov	r2, r6
   119b8:	mov	r1, r4
   119bc:	mov	r3, r0
   119c0:	mov	r0, r4
   119c4:	bl	10d80 <error@plt>
   119c8:	mov	r0, r4
   119cc:	b	117b8 <__assert_fail@plt+0x8e8>
   119d0:	mov	r9, r0
   119d4:	mov	r5, r6
   119d8:	b	1180c <__assert_fail@plt+0x93c>
   119dc:	mov	sl, r0
   119e0:	b	119d4 <__assert_fail@plt+0xb04>
   119e4:	strd	r2, [sp]
   119e8:	mov	r5, #1
   119ec:	b	1180c <__assert_fail@plt+0x93c>
   119f0:	cmp	sl, #0
   119f4:	beq	11a00 <__assert_fail@plt+0xb30>
   119f8:	bl	115f0 <__assert_fail@plt+0x720>
   119fc:	b	117d4 <__assert_fail@plt+0x904>
   11a00:	add	sp, sp, #20
   11a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a08:	b	11648 <__assert_fail@plt+0x778>
   11a0c:	add	sp, sp, #20
   11a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a14:	nop			; (mov r0, r0)
   11a18:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11a1c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11a20:	muleq	r1, r6, pc	; <UNPREDICTABLE>
   11a24:			; <UNDEFINED> instruction: 0x00014fbf
   11a28:	andeq	r5, r1, r3, lsl r0
   11a2c:	andeq	r5, r1, lr, lsl r0
   11a30:	andeq	r4, r1, r8, ror #31
   11a34:	ldr	r3, [pc, #228]	; 11b20 <__assert_fail@plt+0xc50>
   11a38:	push	{r4, r5, r6, r7, r8, lr}
   11a3c:	mov	r1, #0
   11a40:	ldr	ip, [r3, #20]
   11a44:	ldr	r2, [r3, #16]
   11a48:	sub	r0, ip, #8
   11a4c:	mov	r6, #0
   11a50:	mov	r7, #0
   11a54:	cmp	r2, r1
   11a58:	bne	11a80 <__assert_fail@plt+0xbb0>
   11a5c:	ldrd	r0, [r3, #8]
   11a60:	orrs	lr, r0, r1
   11a64:	beq	11ad0 <__assert_fail@plt+0xc00>
   11a68:	ldrd	r4, [r3]
   11a6c:	orrs	ip, r4, r5
   11a70:	beq	11b10 <__assert_fail@plt+0xc40>
   11a74:	mov	r2, #5
   11a78:	ldr	r1, [pc, #164]	; 11b24 <__assert_fail@plt+0xc54>
   11a7c:	b	11a94 <__assert_fail@plt+0xbc4>
   11a80:	ldrd	r4, [r0, #8]!
   11a84:	orrs	lr, r4, r5
   11a88:	bne	11aac <__assert_fail@plt+0xbdc>
   11a8c:	ldr	r1, [pc, #148]	; 11b28 <__assert_fail@plt+0xc58>
   11a90:	mov	r2, #5
   11a94:	mov	r0, #0
   11a98:	bl	10d14 <dcgettext@plt>
   11a9c:	mov	r1, #0
   11aa0:	mov	r2, r0
   11aa4:	mov	r0, #1
   11aa8:	bl	10d80 <error@plt>
   11aac:	cmp	r5, r7
   11ab0:	cmpeq	r4, r6
   11ab4:	movls	r2, #5
   11ab8:	ldrls	r1, [pc, #108]	; 11b2c <__assert_fail@plt+0xc5c>
   11abc:	bls	11a94 <__assert_fail@plt+0xbc4>
   11ac0:	add	r1, r1, #1
   11ac4:	mov	r6, r4
   11ac8:	mov	r7, r5
   11acc:	b	11a54 <__assert_fail@plt+0xb84>
   11ad0:	cmp	r2, #0
   11ad4:	bne	11af0 <__assert_fail@plt+0xc20>
   11ad8:	ldrd	r0, [r3]
   11adc:	orrs	r2, r0, r1
   11ae0:	moveq	r0, #8
   11ae4:	str	r0, [r3, #28]
   11ae8:	mov	r1, #0
   11aec:	b	11b08 <__assert_fail@plt+0xc38>
   11af0:	cmp	r2, #1
   11af4:	bne	11b18 <__assert_fail@plt+0xc48>
   11af8:	ldrd	r0, [r3]
   11afc:	orrs	r2, r0, r1
   11b00:	bne	11b18 <__assert_fail@plt+0xc48>
   11b04:	ldrd	r0, [ip]
   11b08:	strd	r0, [r3, #32]
   11b0c:	pop	{r4, r5, r6, r7, r8, pc}
   11b10:	cmp	r2, #0
   11b14:	beq	11ae4 <__assert_fail@plt+0xc14>
   11b18:	mov	r0, #0
   11b1c:	b	11ae8 <__assert_fail@plt+0xc18>
   11b20:	andeq	r6, r2, r0, ror #2
   11b24:	andeq	r5, r1, r8, rrx
   11b28:	andeq	r5, r1, r7, lsr r0
   11b2c:	andeq	r5, r1, ip, asr #32
   11b30:	ldr	ip, [pc, #224]	; 11c18 <__assert_fail@plt+0xd48>
   11b34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11b38:	mov	r6, r3
   11b3c:	ldrd	r8, [ip, #32]
   11b40:	mov	r3, #0
   11b44:	strb	r3, [r6]
   11b48:	orrs	r3, r8, r9
   11b4c:	mov	r4, r0
   11b50:	mov	r5, r1
   11b54:	ldreq	r9, [ip, #16]
   11b58:	ldreq	r8, [ip, #20]
   11b5c:	beq	11ba4 <__assert_fail@plt+0xcd4>
   11b60:	adds	r4, r0, r8
   11b64:	adc	r5, r1, r9
   11b68:	mov	r2, r8
   11b6c:	mov	r3, r9
   11b70:	bl	148e0 <__assert_fail@plt+0x3a10>
   11b74:	mov	r0, r4
   11b78:	mov	r1, r5
   11b7c:	subs	r0, r0, r2
   11b80:	sbc	r1, r1, r3
   11b84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b88:	lsl	r3, lr, #3
   11b8c:	ldrd	r0, [r8, r3]
   11b90:	cmp	r5, r1
   11b94:	cmpeq	r4, r0
   11b98:	popcc	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b9c:	add	lr, lr, #1
   11ba0:	str	lr, [r2]
   11ba4:	ldr	lr, [r2]
   11ba8:	cmp	lr, r9
   11bac:	bcc	11b88 <__assert_fail@plt+0xcb8>
   11bb0:	ldrd	r2, [ip]
   11bb4:	orrs	r1, r2, r3
   11bb8:	beq	11bdc <__assert_fail@plt+0xd0c>
   11bbc:	adds	r6, r4, r2
   11bc0:	adc	r7, r5, r3
   11bc4:	mov	r0, r4
   11bc8:	mov	r1, r5
   11bcc:	bl	148e0 <__assert_fail@plt+0x3a10>
   11bd0:	mov	r0, r6
   11bd4:	mov	r1, r7
   11bd8:	b	11b7c <__assert_fail@plt+0xcac>
   11bdc:	ldrd	r0, [ip, #8]
   11be0:	orrs	r3, r0, r1
   11be4:	beq	11c0c <__assert_fail@plt+0xd3c>
   11be8:	add	r8, r8, r9, lsl #3
   11bec:	adds	r6, r4, r0
   11bf0:	ldrd	r8, [r8, #-8]
   11bf4:	adc	r7, r5, r1
   11bf8:	mov	r2, r0
   11bfc:	subs	r0, r4, r8
   11c00:	mov	r3, r1
   11c04:	sbc	r1, r5, r9
   11c08:	b	11bcc <__assert_fail@plt+0xcfc>
   11c0c:	mov	r3, #1
   11c10:	strb	r3, [r6]
   11c14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c18:	andeq	r6, r2, r0, ror #2
   11c1c:	ldr	r3, [pc, #24]	; 11c3c <__assert_fail@plt+0xd6c>
   11c20:	cmp	r0, #0
   11c24:	mov	r2, #0
   11c28:	strb	r2, [r3, #40]	; 0x28
   11c2c:	ldreq	r2, [pc, #12]	; 11c40 <__assert_fail@plt+0xd70>
   11c30:	strne	r0, [r3, #44]	; 0x2c
   11c34:	streq	r2, [r3, #44]	; 0x2c
   11c38:	bx	lr
   11c3c:	andeq	r6, r2, r0, ror #2
   11c40:	andeq	r6, r2, r4, ror #1
   11c44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c48:	subs	r6, r0, #0
   11c4c:	ldr	r4, [pc, #336]	; 11da4 <__assert_fail@plt+0xed4>
   11c50:	beq	11ce0 <__assert_fail@plt+0xe10>
   11c54:	ldr	r8, [r4, #48]	; 0x30
   11c58:	cmp	r8, #0
   11c5c:	bne	11c74 <__assert_fail@plt+0xda4>
   11c60:	ldr	r3, [pc, #320]	; 11da8 <__assert_fail@plt+0xed8>
   11c64:	mov	r2, #340	; 0x154
   11c68:	ldr	r1, [pc, #316]	; 11dac <__assert_fail@plt+0xedc>
   11c6c:	ldr	r0, [pc, #316]	; 11db0 <__assert_fail@plt+0xee0>
   11c70:	bl	10ed0 <__assert_fail@plt>
   11c74:	bl	10dec <__errno_location@plt>
   11c78:	ldr	r5, [r0]
   11c7c:	mov	r7, r0
   11c80:	mov	r0, r6
   11c84:	bl	10d68 <ferror_unlocked@plt>
   11c88:	ldr	r1, [pc, #292]	; 11db4 <__assert_fail@plt+0xee4>
   11c8c:	cmp	r0, #0
   11c90:	mov	r0, r8
   11c94:	moveq	r5, #0
   11c98:	bl	10c9c <strcmp@plt>
   11c9c:	cmp	r0, #0
   11ca0:	mov	r0, r6
   11ca4:	bne	11d0c <__assert_fail@plt+0xe3c>
   11ca8:	bl	10e70 <clearerr_unlocked@plt>
   11cac:	cmp	r5, #0
   11cb0:	beq	11ce0 <__assert_fail@plt+0xe10>
   11cb4:	ldr	r2, [r4, #48]	; 0x30
   11cb8:	mov	r1, #3
   11cbc:	mov	r0, #0
   11cc0:	bl	13664 <__assert_fail@plt+0x2794>
   11cc4:	ldr	r2, [pc, #236]	; 11db8 <__assert_fail@plt+0xee8>
   11cc8:	mov	r1, r5
   11ccc:	mov	r3, r0
   11cd0:	mov	r0, #0
   11cd4:	bl	10d80 <error@plt>
   11cd8:	mov	r3, #1
   11cdc:	str	r3, [r4, #52]	; 0x34
   11ce0:	ldr	r7, [pc, #204]	; 11db4 <__assert_fail@plt+0xee4>
   11ce4:	ldr	r8, [pc, #208]	; 11dbc <__assert_fail@plt+0xeec>
   11ce8:	ldr	r9, [pc, #208]	; 11dc0 <__assert_fail@plt+0xef0>
   11cec:	ldr	r3, [r4, #44]	; 0x2c
   11cf0:	add	r2, r3, #4
   11cf4:	ldr	r6, [r3]
   11cf8:	str	r2, [r4, #44]	; 0x2c
   11cfc:	cmp	r6, #0
   11d00:	bne	11d1c <__assert_fail@plt+0xe4c>
   11d04:	mov	r5, r6
   11d08:	b	11d64 <__assert_fail@plt+0xe94>
   11d0c:	bl	11f94 <__assert_fail@plt+0x10c4>
   11d10:	cmp	r0, #0
   11d14:	ldrne	r5, [r7]
   11d18:	b	11cac <__assert_fail@plt+0xddc>
   11d1c:	mov	r1, r7
   11d20:	mov	r0, r6
   11d24:	bl	10c9c <strcmp@plt>
   11d28:	cmp	r0, #0
   11d2c:	moveq	r3, #1
   11d30:	strbeq	r3, [r4, #40]	; 0x28
   11d34:	ldreq	r5, [r9]
   11d38:	beq	11d4c <__assert_fail@plt+0xe7c>
   11d3c:	mov	r1, r8
   11d40:	mov	r0, r6
   11d44:	bl	10e7c <fopen64@plt>
   11d48:	mov	r5, r0
   11d4c:	cmp	r5, #0
   11d50:	beq	11d6c <__assert_fail@plt+0xe9c>
   11d54:	mov	r1, #2
   11d58:	mov	r0, r5
   11d5c:	str	r6, [r4, #48]	; 0x30
   11d60:	bl	11f64 <__assert_fail@plt+0x1094>
   11d64:	mov	r0, r5
   11d68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d6c:	bl	10dec <__errno_location@plt>
   11d70:	mov	r2, r6
   11d74:	mov	r1, #3
   11d78:	ldr	sl, [r0]
   11d7c:	mov	r0, r5
   11d80:	bl	13664 <__assert_fail@plt+0x2794>
   11d84:	ldr	r2, [pc, #44]	; 11db8 <__assert_fail@plt+0xee8>
   11d88:	mov	r1, sl
   11d8c:	mov	r3, r0
   11d90:	mov	r0, r5
   11d94:	bl	10d80 <error@plt>
   11d98:	mov	r3, #1
   11d9c:	str	r3, [r4, #52]	; 0x34
   11da0:	b	11cec <__assert_fail@plt+0xe1c>
   11da4:	andeq	r6, r2, r0, ror #2
   11da8:	andeq	r4, r1, r7, lsl pc
   11dac:	muleq	r1, r5, r0
   11db0:	andeq	r5, r1, r9, lsr #1
   11db4:			; <UNDEFINED> instruction: 0x000152b7
   11db8:	andeq	r5, r1, r0, lsl r0
   11dbc:	muleq	r1, ip, lr
   11dc0:	andeq	r6, r2, r0, asr r1
   11dc4:	ldr	r3, [pc, #52]	; 11e00 <__assert_fail@plt+0xf30>
   11dc8:	ldrb	r3, [r3, #40]	; 0x28
   11dcc:	cmp	r3, #0
   11dd0:	bxeq	lr
   11dd4:	ldr	r3, [pc, #40]	; 11e04 <__assert_fail@plt+0xf34>
   11dd8:	push	{r4, lr}
   11ddc:	ldr	r0, [r3]
   11de0:	bl	11f94 <__assert_fail@plt+0x10c4>
   11de4:	cmp	r0, #0
   11de8:	popeq	{r4, pc}
   11dec:	bl	10dec <__errno_location@plt>
   11df0:	ldr	r2, [pc, #16]	; 11e08 <__assert_fail@plt+0xf38>
   11df4:	ldr	r1, [r0]
   11df8:	mov	r0, #1
   11dfc:	bl	10d80 <error@plt>
   11e00:	andeq	r6, r2, r0, ror #2
   11e04:	andeq	r6, r2, r0, asr r1
   11e08:			; <UNDEFINED> instruction: 0x000152b7
   11e0c:	push	{r4, lr}
   11e10:	mov	r2, #5
   11e14:	ldr	r4, [pc, #44]	; 11e48 <__assert_fail@plt+0xf78>
   11e18:	ldr	r1, [pc, #44]	; 11e4c <__assert_fail@plt+0xf7c>
   11e1c:	mov	r0, #0
   11e20:	bl	10d14 <dcgettext@plt>
   11e24:	ldr	r1, [r4]
   11e28:	bl	10c84 <fputs_unlocked@plt>
   11e2c:	ldr	r1, [pc, #28]	; 11e50 <__assert_fail@plt+0xf80>
   11e30:	mov	r2, #5
   11e34:	mov	r0, #0
   11e38:	bl	10d14 <dcgettext@plt>
   11e3c:	ldr	r1, [r4]
   11e40:	pop	{r4, lr}
   11e44:	b	10c84 <fputs_unlocked@plt>
   11e48:	andeq	r6, r2, r4, asr r1
   11e4c:	strheq	r5, [r1], -r3
   11e50:	strdeq	r5, [r1], -r2
   11e54:	ldr	r3, [pc, #4]	; 11e60 <__assert_fail@plt+0xf90>
   11e58:	str	r0, [r3]
   11e5c:	bx	lr
   11e60:	muleq	r2, ip, r1
   11e64:	ldr	r3, [pc, #4]	; 11e70 <__assert_fail@plt+0xfa0>
   11e68:	strb	r0, [r3, #4]
   11e6c:	bx	lr
   11e70:	muleq	r2, ip, r1
   11e74:	ldr	r3, [pc, #192]	; 11f3c <__assert_fail@plt+0x106c>
   11e78:	push	{r0, r1, r4, r5, r6, lr}
   11e7c:	ldr	r0, [r3]
   11e80:	bl	14274 <__assert_fail@plt+0x33a4>
   11e84:	cmp	r0, #0
   11e88:	beq	11f20 <__assert_fail@plt+0x1050>
   11e8c:	ldr	r3, [pc, #172]	; 11f40 <__assert_fail@plt+0x1070>
   11e90:	mov	r4, r3
   11e94:	ldrb	r2, [r3, #4]
   11e98:	cmp	r2, #0
   11e9c:	beq	11eb0 <__assert_fail@plt+0xfe0>
   11ea0:	bl	10dec <__errno_location@plt>
   11ea4:	ldr	r3, [r0]
   11ea8:	cmp	r3, #32
   11eac:	beq	11f20 <__assert_fail@plt+0x1050>
   11eb0:	mov	r2, #5
   11eb4:	ldr	r1, [pc, #136]	; 11f44 <__assert_fail@plt+0x1074>
   11eb8:	mov	r0, #0
   11ebc:	bl	10d14 <dcgettext@plt>
   11ec0:	ldr	r4, [r4]
   11ec4:	cmp	r4, #0
   11ec8:	mov	r5, r0
   11ecc:	beq	11f04 <__assert_fail@plt+0x1034>
   11ed0:	bl	10dec <__errno_location@plt>
   11ed4:	ldr	r6, [r0]
   11ed8:	mov	r0, r4
   11edc:	bl	13654 <__assert_fail@plt+0x2784>
   11ee0:	str	r5, [sp]
   11ee4:	ldr	r2, [pc, #92]	; 11f48 <__assert_fail@plt+0x1078>
   11ee8:	mov	r1, r6
   11eec:	mov	r3, r0
   11ef0:	mov	r0, #0
   11ef4:	bl	10d80 <error@plt>
   11ef8:	ldr	r3, [pc, #76]	; 11f4c <__assert_fail@plt+0x107c>
   11efc:	ldr	r0, [r3]
   11f00:	bl	10ccc <_exit@plt>
   11f04:	bl	10dec <__errno_location@plt>
   11f08:	mov	r3, r5
   11f0c:	ldr	r2, [pc, #60]	; 11f50 <__assert_fail@plt+0x1080>
   11f10:	ldr	r1, [r0]
   11f14:	mov	r0, r4
   11f18:	bl	10d80 <error@plt>
   11f1c:	b	11ef8 <__assert_fail@plt+0x1028>
   11f20:	ldr	r3, [pc, #44]	; 11f54 <__assert_fail@plt+0x1084>
   11f24:	ldr	r0, [r3]
   11f28:	bl	14274 <__assert_fail@plt+0x33a4>
   11f2c:	cmp	r0, #0
   11f30:	bne	11ef8 <__assert_fail@plt+0x1028>
   11f34:	add	sp, sp, #8
   11f38:	pop	{r4, r5, r6, pc}
   11f3c:	andeq	r6, r2, r4, asr r1
   11f40:	muleq	r2, ip, r1
   11f44:	muleq	r1, r2, lr
   11f48:	andeq	r5, r1, lr, ror #4
   11f4c:	strdeq	r6, [r2], -r0
   11f50:	andeq	r5, r1, r0, lsl r0
   11f54:	andeq	r6, r2, r8, asr #2
   11f58:	push	{r4, r5}
   11f5c:	pop	{r4, r5}
   11f60:	b	10ca8 <posix_fadvise64@plt>
   11f64:	cmp	r0, #0
   11f68:	bxeq	lr
   11f6c:	push	{r0, r1, r2, r3, r4, lr}
   11f70:	mov	r4, r1
   11f74:	bl	10e1c <fileno@plt>
   11f78:	mov	r2, #0
   11f7c:	mov	r3, #0
   11f80:	str	r4, [sp, #8]
   11f84:	strd	r2, [sp]
   11f88:	bl	10ca8 <posix_fadvise64@plt>
   11f8c:	add	sp, sp, #16
   11f90:	pop	{r4, pc}
   11f94:	push	{r0, r1, r2, r4, r5, lr}
   11f98:	mov	r4, r0
   11f9c:	bl	10e1c <fileno@plt>
   11fa0:	cmp	r0, #0
   11fa4:	mov	r0, r4
   11fa8:	bge	11fb8 <__assert_fail@plt+0x10e8>
   11fac:	add	sp, sp, #12
   11fb0:	pop	{r4, r5, lr}
   11fb4:	b	10e34 <fclose@plt>
   11fb8:	bl	10da4 <__freading@plt>
   11fbc:	cmp	r0, #0
   11fc0:	bne	11ffc <__assert_fail@plt+0x112c>
   11fc4:	mov	r0, r4
   11fc8:	bl	1203c <__assert_fail@plt+0x116c>
   11fcc:	cmp	r0, #0
   11fd0:	bne	12030 <__assert_fail@plt+0x1160>
   11fd4:	mov	r5, #0
   11fd8:	mov	r0, r4
   11fdc:	bl	10e34 <fclose@plt>
   11fe0:	cmp	r5, #0
   11fe4:	beq	11ff4 <__assert_fail@plt+0x1124>
   11fe8:	bl	10dec <__errno_location@plt>
   11fec:	str	r5, [r0]
   11ff0:	mvn	r0, #0
   11ff4:	add	sp, sp, #12
   11ff8:	pop	{r4, r5, pc}
   11ffc:	mov	r0, r4
   12000:	bl	10e1c <fileno@plt>
   12004:	mov	r3, #1
   12008:	str	r3, [sp]
   1200c:	mov	r2, #0
   12010:	mov	r3, #0
   12014:	bl	10d44 <lseek64@plt>
   12018:	mvn	r3, #0
   1201c:	mvn	r2, #0
   12020:	cmp	r1, r3
   12024:	cmpeq	r0, r2
   12028:	bne	11fc4 <__assert_fail@plt+0x10f4>
   1202c:	b	11fd4 <__assert_fail@plt+0x1104>
   12030:	bl	10dec <__errno_location@plt>
   12034:	ldr	r5, [r0]
   12038:	b	11fd8 <__assert_fail@plt+0x1108>
   1203c:	push	{r0, r1, r4, lr}
   12040:	subs	r4, r0, #0
   12044:	bne	12058 <__assert_fail@plt+0x1188>
   12048:	mov	r0, r4
   1204c:	add	sp, sp, #8
   12050:	pop	{r4, lr}
   12054:	b	10cb4 <fflush@plt>
   12058:	bl	10da4 <__freading@plt>
   1205c:	cmp	r0, #0
   12060:	beq	12048 <__assert_fail@plt+0x1178>
   12064:	ldr	r3, [r4]
   12068:	tst	r3, #256	; 0x100
   1206c:	beq	12048 <__assert_fail@plt+0x1178>
   12070:	mov	r3, #1
   12074:	str	r3, [sp]
   12078:	mov	r2, #0
   1207c:	mov	r3, #0
   12080:	mov	r0, r4
   12084:	bl	120e0 <__assert_fail@plt+0x1210>
   12088:	b	12048 <__assert_fail@plt+0x1178>
   1208c:	push	{r0, r1, r2, r4, r5, lr}
   12090:	mov	r5, r0
   12094:	bl	10dec <__errno_location@plt>
   12098:	ldr	r3, [r0]
   1209c:	mov	r4, r0
   120a0:	str	r3, [sp]
   120a4:	str	r3, [sp, #4]
   120a8:	mov	r3, #0
   120ac:	str	r3, [r0]
   120b0:	mov	r0, r5
   120b4:	bl	10cc0 <free@plt>
   120b8:	ldr	r3, [r4]
   120bc:	add	r2, sp, #8
   120c0:	cmp	r3, #0
   120c4:	moveq	r3, #4
   120c8:	movne	r3, #0
   120cc:	add	r3, r2, r3
   120d0:	ldr	r3, [r3, #-8]
   120d4:	str	r3, [r4]
   120d8:	add	sp, sp, #12
   120dc:	pop	{r4, r5, pc}
   120e0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   120e4:	mov	r4, r0
   120e8:	ldmib	r0, {ip, lr}
   120ec:	ldr	r8, [sp, #32]
   120f0:	cmp	lr, ip
   120f4:	bne	12160 <__assert_fail@plt+0x1290>
   120f8:	ldr	lr, [r0, #20]
   120fc:	ldr	ip, [r0, #16]
   12100:	cmp	lr, ip
   12104:	bne	12160 <__assert_fail@plt+0x1290>
   12108:	ldr	r5, [r0, #36]	; 0x24
   1210c:	cmp	r5, #0
   12110:	bne	12160 <__assert_fail@plt+0x1290>
   12114:	mov	r6, r2
   12118:	mov	r7, r3
   1211c:	bl	10e1c <fileno@plt>
   12120:	mov	r2, r6
   12124:	mov	r3, r7
   12128:	str	r8, [sp]
   1212c:	bl	10d44 <lseek64@plt>
   12130:	mvn	r3, #0
   12134:	mvn	r2, #0
   12138:	cmp	r1, r3
   1213c:	cmpeq	r0, r2
   12140:	mvneq	r0, #0
   12144:	ldrne	r3, [r4]
   12148:	strdne	r0, [r4, #80]	; 0x50
   1214c:	movne	r0, r5
   12150:	bicne	r3, r3, #16
   12154:	strne	r3, [r4]
   12158:	add	sp, sp, #8
   1215c:	pop	{r4, r5, r6, r7, r8, pc}
   12160:	str	r8, [sp, #32]
   12164:	mov	r0, r4
   12168:	add	sp, sp, #8
   1216c:	pop	{r4, r5, r6, r7, r8, lr}
   12170:	b	10e40 <fseeko64@plt>
   12174:	push	{r4, r5, r6, lr}
   12178:	subs	r5, r0, #0
   1217c:	bne	12194 <__assert_fail@plt+0x12c4>
   12180:	ldr	r3, [pc, #124]	; 12204 <__assert_fail@plt+0x1334>
   12184:	ldr	r0, [pc, #124]	; 12208 <__assert_fail@plt+0x1338>
   12188:	ldr	r1, [r3]
   1218c:	bl	10e94 <fputs@plt>
   12190:	bl	10eac <abort@plt>
   12194:	mov	r1, #47	; 0x2f
   12198:	bl	10e58 <strrchr@plt>
   1219c:	cmp	r0, #0
   121a0:	addne	r4, r0, #1
   121a4:	moveq	r4, r5
   121a8:	sub	r3, r4, r5
   121ac:	cmp	r3, #6
   121b0:	ble	121f0 <__assert_fail@plt+0x1320>
   121b4:	mov	r2, #7
   121b8:	ldr	r1, [pc, #76]	; 1220c <__assert_fail@plt+0x133c>
   121bc:	sub	r0, r4, #7
   121c0:	bl	10ea0 <strncmp@plt>
   121c4:	cmp	r0, #0
   121c8:	bne	121f0 <__assert_fail@plt+0x1320>
   121cc:	mov	r2, #3
   121d0:	ldr	r1, [pc, #56]	; 12210 <__assert_fail@plt+0x1340>
   121d4:	mov	r0, r4
   121d8:	bl	10ea0 <strncmp@plt>
   121dc:	cmp	r0, #0
   121e0:	movne	r5, r4
   121e4:	ldreq	r3, [pc, #40]	; 12214 <__assert_fail@plt+0x1344>
   121e8:	addeq	r5, r4, #3
   121ec:	streq	r5, [r3]
   121f0:	ldr	r3, [pc, #32]	; 12218 <__assert_fail@plt+0x1348>
   121f4:	str	r5, [r3]
   121f8:	ldr	r3, [pc, #28]	; 1221c <__assert_fail@plt+0x134c>
   121fc:	str	r5, [r3]
   12200:	pop	{r4, r5, r6, pc}
   12204:	andeq	r6, r2, r8, asr #2
   12208:	andeq	r5, r1, r5, ror r2
   1220c:	andeq	r5, r1, sp, lsr #5
   12210:			; <UNDEFINED> instruction: 0x000152b5
   12214:	andeq	r6, r2, r8, lsr r1
   12218:	andeq	r6, r2, r4, lsr #3
   1221c:	andeq	r6, r2, ip, lsr r1
   12220:	push	{r4, r5, r6, lr}
   12224:	mov	r2, #48	; 0x30
   12228:	mov	r5, r1
   1222c:	mov	r1, #0
   12230:	mov	r4, r0
   12234:	bl	10e04 <memset@plt>
   12238:	cmp	r5, #10
   1223c:	bne	12244 <__assert_fail@plt+0x1374>
   12240:	bl	10eac <abort@plt>
   12244:	str	r5, [r4]
   12248:	mov	r0, r4
   1224c:	pop	{r4, r5, r6, pc}
   12250:	push	{r4, r5, r6, lr}
   12254:	mov	r4, r0
   12258:	mov	r5, r1
   1225c:	bl	142e4 <__assert_fail@plt+0x3414>
   12260:	ldrb	r3, [r0]
   12264:	bic	r3, r3, #32
   12268:	cmp	r3, #85	; 0x55
   1226c:	bne	122dc <__assert_fail@plt+0x140c>
   12270:	ldrb	r3, [r0, #1]
   12274:	bic	r3, r3, #32
   12278:	cmp	r3, #84	; 0x54
   1227c:	bne	122b4 <__assert_fail@plt+0x13e4>
   12280:	ldrb	r3, [r0, #2]
   12284:	bic	r3, r3, #32
   12288:	cmp	r3, #70	; 0x46
   1228c:	bne	122b4 <__assert_fail@plt+0x13e4>
   12290:	ldrb	r3, [r0, #3]
   12294:	cmp	r3, #45	; 0x2d
   12298:	bne	122b4 <__assert_fail@plt+0x13e4>
   1229c:	ldrb	r3, [r0, #4]
   122a0:	cmp	r3, #56	; 0x38
   122a4:	bne	122b4 <__assert_fail@plt+0x13e4>
   122a8:	ldrb	r3, [r0, #5]
   122ac:	cmp	r3, #0
   122b0:	beq	122c8 <__assert_fail@plt+0x13f8>
   122b4:	ldr	r1, [pc, #144]	; 1234c <__assert_fail@plt+0x147c>
   122b8:	ldr	r0, [pc, #144]	; 12350 <__assert_fail@plt+0x1480>
   122bc:	cmp	r5, #9
   122c0:	movne	r0, r1
   122c4:	pop	{r4, r5, r6, pc}
   122c8:	ldrb	r3, [r4]
   122cc:	ldr	r1, [pc, #128]	; 12354 <__assert_fail@plt+0x1484>
   122d0:	ldr	r0, [pc, #128]	; 12358 <__assert_fail@plt+0x1488>
   122d4:	cmp	r3, #96	; 0x60
   122d8:	b	122c0 <__assert_fail@plt+0x13f0>
   122dc:	cmp	r3, #71	; 0x47
   122e0:	bne	122b4 <__assert_fail@plt+0x13e4>
   122e4:	ldrb	r3, [r0, #1]
   122e8:	bic	r3, r3, #32
   122ec:	cmp	r3, #66	; 0x42
   122f0:	bne	122b4 <__assert_fail@plt+0x13e4>
   122f4:	ldrb	r3, [r0, #2]
   122f8:	cmp	r3, #49	; 0x31
   122fc:	bne	122b4 <__assert_fail@plt+0x13e4>
   12300:	ldrb	r3, [r0, #3]
   12304:	cmp	r3, #56	; 0x38
   12308:	bne	122b4 <__assert_fail@plt+0x13e4>
   1230c:	ldrb	r3, [r0, #4]
   12310:	cmp	r3, #48	; 0x30
   12314:	bne	122b4 <__assert_fail@plt+0x13e4>
   12318:	ldrb	r3, [r0, #5]
   1231c:	cmp	r3, #51	; 0x33
   12320:	bne	122b4 <__assert_fail@plt+0x13e4>
   12324:	ldrb	r3, [r0, #6]
   12328:	cmp	r3, #48	; 0x30
   1232c:	bne	122b4 <__assert_fail@plt+0x13e4>
   12330:	ldrb	r3, [r0, #7]
   12334:	cmp	r3, #0
   12338:	bne	122b4 <__assert_fail@plt+0x13e4>
   1233c:	ldrb	r3, [r4]
   12340:	ldr	r1, [pc, #20]	; 1235c <__assert_fail@plt+0x148c>
   12344:	ldr	r0, [pc, #20]	; 12360 <__assert_fail@plt+0x1490>
   12348:	b	122d4 <__assert_fail@plt+0x1404>
   1234c:	muleq	r1, r3, r0
   12350:	andeq	r5, r1, pc, lsl r3
   12354:	andeq	r5, r1, r4, lsl r3
   12358:	andeq	r5, r1, r0, lsl r3
   1235c:	andeq	r5, r1, ip, lsl r3
   12360:	andeq	r5, r1, r8, lsl r3
   12364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12368:	sub	sp, sp, #108	; 0x6c
   1236c:	mov	r8, r0
   12370:	str	r3, [sp, #36]	; 0x24
   12374:	mov	r5, r1
   12378:	str	r2, [sp, #44]	; 0x2c
   1237c:	ldr	sl, [sp, #144]	; 0x90
   12380:	bl	10d50 <__ctype_get_mb_cur_max@plt>
   12384:	ldr	r3, [sp, #148]	; 0x94
   12388:	mov	r7, #0
   1238c:	str	r7, [sp, #48]	; 0x30
   12390:	lsr	r6, r3, #1
   12394:	and	r6, r6, #1
   12398:	mov	r3, #1
   1239c:	str	r3, [sp, #72]	; 0x48
   123a0:	str	r7, [sp, #24]
   123a4:	str	r7, [sp, #32]
   123a8:	str	r7, [sp, #40]	; 0x28
   123ac:	str	r7, [sp, #60]	; 0x3c
   123b0:	str	r0, [sp, #76]	; 0x4c
   123b4:	cmp	sl, #10
   123b8:	ldrls	pc, [pc, sl, lsl #2]
   123bc:	b	125f8 <__assert_fail@plt+0x1728>
   123c0:	andeq	r2, r1, ip, ror #7
   123c4:	andeq	r3, r1, r0, lsl #1
   123c8:	andeq	r2, r1, r4, asr #11
   123cc:	andeq	r2, r1, r0, lsl r6
   123d0:	andeq	r2, r1, r0, lsr #11
   123d4:	strdeq	r2, [r1], -r8
   123d8:	andeq	r3, r1, r0, rrx
   123dc:	strdeq	r2, [r1], -ip
   123e0:	strdeq	r2, [r1], -r0
   123e4:	strdeq	r2, [r1], -r0
   123e8:	strdeq	r2, [r1], -r0
   123ec:	mov	r6, #0
   123f0:	mov	r4, #0
   123f4:	b	12424 <__assert_fail@plt+0x1554>
   123f8:	cmp	r6, #0
   123fc:	bne	12620 <__assert_fail@plt+0x1750>
   12400:	cmp	r5, #0
   12404:	movne	r3, #34	; 0x22
   12408:	strbne	r3, [r8]
   1240c:	mov	r3, #1
   12410:	str	r3, [sp, #24]
   12414:	str	r3, [sp, #32]
   12418:	mov	r4, #1
   1241c:	ldr	r3, [pc, #3172]	; 13088 <__assert_fail@plt+0x21b8>
   12420:	str	r3, [sp, #40]	; 0x28
   12424:	mov	r9, r5
   12428:	mov	r3, #0
   1242c:	str	r7, [sp, #68]	; 0x44
   12430:	str	r3, [sp, #28]
   12434:	ldr	r3, [sp, #36]	; 0x24
   12438:	cmn	r3, #1
   1243c:	bne	12fcc <__assert_fail@plt+0x20fc>
   12440:	ldr	r3, [sp, #44]	; 0x2c
   12444:	ldr	r2, [sp, #28]
   12448:	ldrb	r3, [r3, r2]
   1244c:	adds	r3, r3, #0
   12450:	movne	r3, #1
   12454:	str	r3, [sp, #52]	; 0x34
   12458:	ldr	r3, [sp, #52]	; 0x34
   1245c:	cmp	r3, #0
   12460:	bne	12648 <__assert_fail@plt+0x1778>
   12464:	sub	r2, sl, #2
   12468:	clz	r2, r2
   1246c:	lsr	r2, r2, #5
   12470:	and	r3, r6, r2
   12474:	cmp	r4, #0
   12478:	movne	r3, #0
   1247c:	andeq	r3, r3, #1
   12480:	cmp	r3, #0
   12484:	bne	12810 <__assert_fail@plt+0x1940>
   12488:	eor	r3, r6, #1
   1248c:	ands	r2, r2, r3
   12490:	beq	13004 <__assert_fail@plt+0x2134>
   12494:	ldr	r3, [sp, #68]	; 0x44
   12498:	cmp	r3, #0
   1249c:	beq	1303c <__assert_fail@plt+0x216c>
   124a0:	ldr	r3, [sp, #72]	; 0x48
   124a4:	cmp	r3, #0
   124a8:	beq	12fe0 <__assert_fail@plt+0x2110>
   124ac:	ldr	r3, [sp, #160]	; 0xa0
   124b0:	ldr	r2, [sp, #44]	; 0x2c
   124b4:	str	r3, [sp, #16]
   124b8:	ldr	r3, [sp, #156]	; 0x9c
   124bc:	ldr	r1, [sp, #60]	; 0x3c
   124c0:	str	r3, [sp, #12]
   124c4:	ldr	r3, [sp, #152]	; 0x98
   124c8:	str	r3, [sp, #8]
   124cc:	ldr	r3, [sp, #148]	; 0x94
   124d0:	str	r3, [sp, #4]
   124d4:	mov	r3, #5
   124d8:	str	r3, [sp]
   124dc:	ldr	r3, [sp, #36]	; 0x24
   124e0:	mov	r0, r8
   124e4:	bl	12364 <__assert_fail@plt+0x1494>
   124e8:	mov	r4, r0
   124ec:	b	13030 <__assert_fail@plt+0x2160>
   124f0:	cmp	sl, #10
   124f4:	beq	12550 <__assert_fail@plt+0x1680>
   124f8:	ldr	r4, [pc, #2956]	; 1308c <__assert_fail@plt+0x21bc>
   124fc:	mov	r2, #5
   12500:	mov	r1, r4
   12504:	mov	r0, #0
   12508:	bl	10d14 <dcgettext@plt>
   1250c:	cmp	r0, r4
   12510:	str	r0, [sp, #156]	; 0x9c
   12514:	bne	12524 <__assert_fail@plt+0x1654>
   12518:	mov	r1, sl
   1251c:	bl	12250 <__assert_fail@plt+0x1380>
   12520:	str	r0, [sp, #156]	; 0x9c
   12524:	ldr	r4, [pc, #2916]	; 13090 <__assert_fail@plt+0x21c0>
   12528:	mov	r2, #5
   1252c:	mov	r1, r4
   12530:	mov	r0, #0
   12534:	bl	10d14 <dcgettext@plt>
   12538:	cmp	r0, r4
   1253c:	str	r0, [sp, #160]	; 0xa0
   12540:	bne	12550 <__assert_fail@plt+0x1680>
   12544:	mov	r1, sl
   12548:	bl	12250 <__assert_fail@plt+0x1380>
   1254c:	str	r0, [sp, #160]	; 0xa0
   12550:	cmp	r6, #0
   12554:	moveq	r4, r6
   12558:	beq	12570 <__assert_fail@plt+0x16a0>
   1255c:	mov	r4, #0
   12560:	b	12580 <__assert_fail@plt+0x16b0>
   12564:	cmp	r5, r4
   12568:	strbhi	r3, [r8, r4]
   1256c:	add	r4, r4, #1
   12570:	ldr	r3, [sp, #156]	; 0x9c
   12574:	ldrb	r3, [r3, r4]
   12578:	cmp	r3, #0
   1257c:	bne	12564 <__assert_fail@plt+0x1694>
   12580:	ldr	r0, [sp, #160]	; 0xa0
   12584:	bl	10de0 <strlen@plt>
   12588:	ldr	r3, [sp, #160]	; 0xa0
   1258c:	str	r3, [sp, #40]	; 0x28
   12590:	mov	r3, #1
   12594:	str	r3, [sp, #24]
   12598:	str	r0, [sp, #32]
   1259c:	b	12424 <__assert_fail@plt+0x1554>
   125a0:	mov	r3, #1
   125a4:	cmp	r6, #0
   125a8:	streq	r3, [sp, #24]
   125ac:	beq	125cc <__assert_fail@plt+0x16fc>
   125b0:	str	r3, [sp, #32]
   125b4:	ldr	r3, [pc, #2772]	; 13090 <__assert_fail@plt+0x21c0>
   125b8:	mov	r4, #0
   125bc:	str	r3, [sp, #40]	; 0x28
   125c0:	b	125f0 <__assert_fail@plt+0x1720>
   125c4:	cmp	r6, #0
   125c8:	bne	12638 <__assert_fail@plt+0x1768>
   125cc:	cmp	r5, #0
   125d0:	movne	r3, #39	; 0x27
   125d4:	strbne	r3, [r8]
   125d8:	mov	r3, #1
   125dc:	str	r3, [sp, #32]
   125e0:	mov	r6, #0
   125e4:	ldr	r3, [pc, #2724]	; 13090 <__assert_fail@plt+0x21c0>
   125e8:	mov	r4, #1
   125ec:	str	r3, [sp, #40]	; 0x28
   125f0:	mov	sl, #2
   125f4:	b	12424 <__assert_fail@plt+0x1554>
   125f8:	bl	10eac <abort@plt>
   125fc:	mov	r6, #0
   12600:	mov	r3, #1
   12604:	str	r3, [sp, #24]
   12608:	mov	r4, r6
   1260c:	b	12424 <__assert_fail@plt+0x1554>
   12610:	mov	r6, #1
   12614:	str	r6, [sp, #24]
   12618:	str	r6, [sp, #32]
   1261c:	b	125b4 <__assert_fail@plt+0x16e4>
   12620:	mov	r3, #1
   12624:	str	r3, [sp, #32]
   12628:	ldr	r3, [pc, #2648]	; 13088 <__assert_fail@plt+0x21b8>
   1262c:	str	r6, [sp, #24]
   12630:	str	r3, [sp, #40]	; 0x28
   12634:	b	123f0 <__assert_fail@plt+0x1520>
   12638:	mov	r3, #1
   1263c:	str	r3, [sp, #32]
   12640:	ldr	r3, [pc, #2632]	; 13090 <__assert_fail@plt+0x21c0>
   12644:	b	12630 <__assert_fail@plt+0x1760>
   12648:	ldr	r3, [sp, #32]
   1264c:	ldr	fp, [sp, #24]
   12650:	cmp	sl, #2
   12654:	moveq	fp, #0
   12658:	andne	fp, fp, #1
   1265c:	adds	r5, r3, #0
   12660:	movne	r5, #1
   12664:	ands	r3, r5, fp
   12668:	str	r3, [sp, #64]	; 0x40
   1266c:	beq	1273c <__assert_fail@plt+0x186c>
   12670:	ldr	r2, [sp, #32]
   12674:	ldr	r3, [sp, #28]
   12678:	add	r7, r3, r2
   1267c:	mov	r3, r2
   12680:	ldr	r2, [sp, #36]	; 0x24
   12684:	cmp	r3, #1
   12688:	movls	r3, #0
   1268c:	movhi	r3, #1
   12690:	cmn	r2, #1
   12694:	movne	r3, #0
   12698:	cmp	r3, #0
   1269c:	beq	126ac <__assert_fail@plt+0x17dc>
   126a0:	ldr	r0, [sp, #44]	; 0x2c
   126a4:	bl	10de0 <strlen@plt>
   126a8:	str	r0, [sp, #36]	; 0x24
   126ac:	ldr	r3, [sp, #36]	; 0x24
   126b0:	cmp	r3, r7
   126b4:	bcc	12734 <__assert_fail@plt+0x1864>
   126b8:	ldr	r3, [sp, #44]	; 0x2c
   126bc:	ldr	r0, [sp, #28]
   126c0:	ldr	r2, [sp, #32]
   126c4:	ldr	r1, [sp, #40]	; 0x28
   126c8:	add	r0, r3, r0
   126cc:	bl	10cf0 <memcmp@plt>
   126d0:	cmp	r0, #0
   126d4:	bne	12734 <__assert_fail@plt+0x1864>
   126d8:	cmp	r6, #0
   126dc:	beq	1273c <__assert_fail@plt+0x186c>
   126e0:	str	r6, [sp, #24]
   126e4:	ldr	r3, [sp, #24]
   126e8:	ldr	r2, [sp, #44]	; 0x2c
   126ec:	cmp	sl, #2
   126f0:	movne	r3, #0
   126f4:	andeq	r3, r3, #1
   126f8:	cmp	r3, #0
   126fc:	ldr	r3, [sp, #160]	; 0xa0
   12700:	movne	sl, #4
   12704:	str	r3, [sp, #16]
   12708:	ldr	r3, [sp, #156]	; 0x9c
   1270c:	str	sl, [sp]
   12710:	str	r3, [sp, #12]
   12714:	mov	r3, #0
   12718:	str	r3, [sp, #8]
   1271c:	ldr	r3, [sp, #148]	; 0x94
   12720:	mov	r1, r9
   12724:	bic	r3, r3, #2
   12728:	str	r3, [sp, #4]
   1272c:	ldr	r3, [sp, #36]	; 0x24
   12730:	b	124e0 <__assert_fail@plt+0x1610>
   12734:	mov	r3, #0
   12738:	str	r3, [sp, #64]	; 0x40
   1273c:	ldr	r2, [sp, #28]
   12740:	ldr	r3, [sp, #44]	; 0x2c
   12744:	add	r3, r3, r2
   12748:	str	r3, [sp, #80]	; 0x50
   1274c:	ldr	r3, [sp, #44]	; 0x2c
   12750:	ldrb	r7, [r3, r2]
   12754:	cmp	r7, #58	; 0x3a
   12758:	bhi	128c0 <__assert_fail@plt+0x19f0>
   1275c:	cmp	r7, #43	; 0x2b
   12760:	bcs	12914 <__assert_fail@plt+0x1a44>
   12764:	cmp	r7, #32
   12768:	beq	1296c <__assert_fail@plt+0x1a9c>
   1276c:	bhi	12818 <__assert_fail@plt+0x1948>
   12770:	cmp	r7, #9
   12774:	beq	12c20 <__assert_fail@plt+0x1d50>
   12778:	bhi	127dc <__assert_fail@plt+0x190c>
   1277c:	cmp	r7, #7
   12780:	beq	12ccc <__assert_fail@plt+0x1dfc>
   12784:	bhi	12988 <__assert_fail@plt+0x1ab8>
   12788:	cmp	r7, #0
   1278c:	beq	129a4 <__assert_fail@plt+0x1ad4>
   12790:	ldr	r3, [sp, #76]	; 0x4c
   12794:	cmp	r3, #1
   12798:	bne	12d10 <__assert_fail@plt+0x1e40>
   1279c:	bl	10dc8 <__ctype_b_loc@plt>
   127a0:	sxth	r3, r7
   127a4:	lsl	r3, r3, #1
   127a8:	ldr	r2, [r0]
   127ac:	ldrh	r5, [r2, r3]
   127b0:	ldr	r3, [sp, #76]	; 0x4c
   127b4:	str	r3, [sp, #56]	; 0x38
   127b8:	lsr	r5, r5, #14
   127bc:	and	r5, r5, #1
   127c0:	ldr	r3, [sp, #24]
   127c4:	eor	fp, r5, #1
   127c8:	and	fp, fp, r3
   127cc:	ands	fp, fp, #255	; 0xff
   127d0:	beq	12b58 <__assert_fail@plt+0x1c88>
   127d4:	mov	r5, #0
   127d8:	b	12dbc <__assert_fail@plt+0x1eec>
   127dc:	cmp	r7, #11
   127e0:	beq	12c28 <__assert_fail@plt+0x1d58>
   127e4:	bcc	12cc4 <__assert_fail@plt+0x1df4>
   127e8:	cmp	r7, #12
   127ec:	beq	12cd4 <__assert_fail@plt+0x1e04>
   127f0:	cmp	r7, #13
   127f4:	moveq	r3, #114	; 0x72
   127f8:	bne	12790 <__assert_fail@plt+0x18c0>
   127fc:	cmp	sl, #2
   12800:	movne	r2, #0
   12804:	andeq	r2, r6, #1
   12808:	cmp	r2, #0
   1280c:	beq	1298c <__assert_fail@plt+0x1abc>
   12810:	mov	sl, #2
   12814:	b	126e4 <__assert_fail@plt+0x1814>
   12818:	cmp	r7, #37	; 0x25
   1281c:	beq	12914 <__assert_fail@plt+0x1a44>
   12820:	bhi	12834 <__assert_fail@plt+0x1964>
   12824:	cmp	r7, #35	; 0x23
   12828:	beq	12960 <__assert_fail@plt+0x1a90>
   1282c:	mov	r5, #0
   12830:	b	12970 <__assert_fail@plt+0x1aa0>
   12834:	cmp	r7, #39	; 0x27
   12838:	bne	1282c <__assert_fail@plt+0x195c>
   1283c:	cmp	sl, #2
   12840:	ldrne	r5, [sp, #52]	; 0x34
   12844:	movne	r3, r5
   12848:	strne	r3, [sp, #68]	; 0x44
   1284c:	bne	12918 <__assert_fail@plt+0x1a48>
   12850:	cmp	r6, #0
   12854:	bne	126e4 <__assert_fail@plt+0x1814>
   12858:	ldr	r2, [sp, #60]	; 0x3c
   1285c:	adds	r3, r9, #0
   12860:	movne	r3, #1
   12864:	cmp	r2, #0
   12868:	movne	r3, #0
   1286c:	cmp	r3, #0
   12870:	strne	r9, [sp, #60]	; 0x3c
   12874:	movne	r9, #0
   12878:	bne	12888 <__assert_fail@plt+0x19b8>
   1287c:	cmp	r9, r4
   12880:	movhi	r3, #39	; 0x27
   12884:	strbhi	r3, [r8, r4]
   12888:	add	r3, r4, #1
   1288c:	cmp	r3, r9
   12890:	movcc	r2, #92	; 0x5c
   12894:	strbcc	r2, [r8, r3]
   12898:	add	r3, r4, #2
   1289c:	cmp	r3, r9
   128a0:	ldr	r5, [sp, #52]	; 0x34
   128a4:	movcc	r2, #39	; 0x27
   128a8:	strbcc	r2, [r8, r3]
   128ac:	add	r4, r4, #3
   128b0:	mov	fp, r6
   128b4:	str	r5, [sp, #68]	; 0x44
   128b8:	str	r6, [sp, #48]	; 0x30
   128bc:	b	12b58 <__assert_fail@plt+0x1c88>
   128c0:	cmp	r7, #94	; 0x5e
   128c4:	beq	1282c <__assert_fail@plt+0x195c>
   128c8:	bhi	12920 <__assert_fail@plt+0x1a50>
   128cc:	cmp	r7, #90	; 0x5a
   128d0:	bhi	12908 <__assert_fail@plt+0x1a38>
   128d4:	cmp	r7, #65	; 0x41
   128d8:	bcs	12914 <__assert_fail@plt+0x1a44>
   128dc:	cmp	r7, #62	; 0x3e
   128e0:	bls	1282c <__assert_fail@plt+0x195c>
   128e4:	cmp	r7, #63	; 0x3f
   128e8:	bne	12790 <__assert_fail@plt+0x18c0>
   128ec:	cmp	sl, #2
   128f0:	beq	12a94 <__assert_fail@plt+0x1bc4>
   128f4:	cmp	sl, #5
   128f8:	beq	12aa4 <__assert_fail@plt+0x1bd4>
   128fc:	mov	fp, #0
   12900:	mov	r5, fp
   12904:	b	12b58 <__assert_fail@plt+0x1c88>
   12908:	cmp	r7, #92	; 0x5c
   1290c:	beq	12c30 <__assert_fail@plt+0x1d60>
   12910:	bls	1282c <__assert_fail@plt+0x195c>
   12914:	ldr	r5, [sp, #52]	; 0x34
   12918:	mov	fp, #0
   1291c:	b	12b58 <__assert_fail@plt+0x1c88>
   12920:	cmp	r7, #122	; 0x7a
   12924:	bhi	12944 <__assert_fail@plt+0x1a74>
   12928:	cmp	r7, #97	; 0x61
   1292c:	bcs	12914 <__assert_fail@plt+0x1a44>
   12930:	cmp	r7, #95	; 0x5f
   12934:	beq	12914 <__assert_fail@plt+0x1a44>
   12938:	cmp	r7, #96	; 0x60
   1293c:	bne	12790 <__assert_fail@plt+0x18c0>
   12940:	b	1282c <__assert_fail@plt+0x195c>
   12944:	cmp	r7, #124	; 0x7c
   12948:	beq	1282c <__assert_fail@plt+0x195c>
   1294c:	bcc	12cdc <__assert_fail@plt+0x1e0c>
   12950:	cmp	r7, #125	; 0x7d
   12954:	beq	12cdc <__assert_fail@plt+0x1e0c>
   12958:	cmp	r7, #126	; 0x7e
   1295c:	bne	12790 <__assert_fail@plt+0x18c0>
   12960:	ldr	r3, [sp, #28]
   12964:	cmp	r3, #0
   12968:	bne	12a9c <__assert_fail@plt+0x1bcc>
   1296c:	ldr	r5, [sp, #52]	; 0x34
   12970:	cmp	sl, #2
   12974:	movne	fp, #0
   12978:	andeq	fp, r6, #1
   1297c:	cmp	fp, #0
   12980:	beq	12b58 <__assert_fail@plt+0x1c88>
   12984:	b	12810 <__assert_fail@plt+0x1940>
   12988:	mov	r3, #98	; 0x62
   1298c:	ldr	r2, [sp, #24]
   12990:	cmp	r2, #0
   12994:	beq	12a9c <__assert_fail@plt+0x1bcc>
   12998:	mov	r7, r3
   1299c:	mov	r5, #0
   129a0:	b	12bb0 <__assert_fail@plt+0x1ce0>
   129a4:	ldr	r3, [sp, #24]
   129a8:	cmp	r3, #0
   129ac:	beq	12a78 <__assert_fail@plt+0x1ba8>
   129b0:	cmp	r6, #0
   129b4:	bne	126e0 <__assert_fail@plt+0x1810>
   129b8:	ldr	r3, [sp, #48]	; 0x30
   129bc:	eor	r2, r3, #1
   129c0:	cmp	sl, #2
   129c4:	movne	r2, #0
   129c8:	andeq	r2, r2, #1
   129cc:	cmp	r2, #0
   129d0:	moveq	r3, r4
   129d4:	beq	12a0c <__assert_fail@plt+0x1b3c>
   129d8:	cmp	r9, r4
   129dc:	movhi	r3, #39	; 0x27
   129e0:	strbhi	r3, [r8, r4]
   129e4:	add	r3, r4, #1
   129e8:	cmp	r9, r3
   129ec:	movhi	r1, #36	; 0x24
   129f0:	strbhi	r1, [r8, r3]
   129f4:	add	r3, r4, #2
   129f8:	cmp	r9, r3
   129fc:	movhi	r1, #39	; 0x27
   12a00:	strbhi	r1, [r8, r3]
   12a04:	add	r3, r4, #3
   12a08:	str	r2, [sp, #48]	; 0x30
   12a0c:	cmp	r9, r3
   12a10:	movhi	r2, #92	; 0x5c
   12a14:	strbhi	r2, [r8, r3]
   12a18:	cmp	fp, #0
   12a1c:	add	r4, r3, #1
   12a20:	beq	12fb0 <__assert_fail@plt+0x20e0>
   12a24:	ldr	r2, [sp, #28]
   12a28:	ldr	r1, [sp, #36]	; 0x24
   12a2c:	add	r2, r2, #1
   12a30:	cmp	r1, r2
   12a34:	bls	12a70 <__assert_fail@plt+0x1ba0>
   12a38:	ldr	r1, [sp, #44]	; 0x2c
   12a3c:	mov	r7, #48	; 0x30
   12a40:	ldrb	r2, [r1, r2]
   12a44:	sub	r2, r2, #48	; 0x30
   12a48:	cmp	r2, #9
   12a4c:	movhi	r5, r6
   12a50:	bhi	12b58 <__assert_fail@plt+0x1c88>
   12a54:	cmp	r9, r4
   12a58:	add	r2, r3, #2
   12a5c:	strbhi	r7, [r8, r4]
   12a60:	cmp	r9, r2
   12a64:	add	r4, r3, #3
   12a68:	movhi	r1, #48	; 0x30
   12a6c:	strbhi	r1, [r8, r2]
   12a70:	mov	r5, r6
   12a74:	b	12fb8 <__assert_fail@plt+0x20e8>
   12a78:	ldr	r3, [sp, #148]	; 0x94
   12a7c:	tst	r3, #1
   12a80:	ldreq	r5, [sp, #24]
   12a84:	beq	12fc4 <__assert_fail@plt+0x20f4>
   12a88:	ldr	r3, [sp, #28]
   12a8c:	add	r3, r3, #1
   12a90:	b	12430 <__assert_fail@plt+0x1560>
   12a94:	cmp	r6, #0
   12a98:	bne	126e4 <__assert_fail@plt+0x1814>
   12a9c:	mov	r5, #0
   12aa0:	b	12918 <__assert_fail@plt+0x1a48>
   12aa4:	ldr	r3, [sp, #148]	; 0x94
   12aa8:	tst	r3, #4
   12aac:	beq	12a9c <__assert_fail@plt+0x1bcc>
   12ab0:	ldr	r3, [sp, #28]
   12ab4:	add	r2, r3, #2
   12ab8:	ldr	r3, [sp, #36]	; 0x24
   12abc:	cmp	r3, r2
   12ac0:	bls	12a9c <__assert_fail@plt+0x1bcc>
   12ac4:	ldr	r3, [sp, #44]	; 0x2c
   12ac8:	ldr	r1, [sp, #28]
   12acc:	add	r3, r3, r1
   12ad0:	ldrb	r0, [r3, #1]
   12ad4:	cmp	r0, #63	; 0x3f
   12ad8:	bne	12a9c <__assert_fail@plt+0x1bcc>
   12adc:	ldr	r3, [sp, #44]	; 0x2c
   12ae0:	ldrb	r1, [r3, r2]
   12ae4:	sub	r3, r1, #33	; 0x21
   12ae8:	uxtb	r3, r3
   12aec:	cmp	r3, #29
   12af0:	bhi	12fc0 <__assert_fail@plt+0x20f0>
   12af4:	mov	ip, #1
   12af8:	ldr	r5, [pc, #1428]	; 13094 <__assert_fail@plt+0x21c4>
   12afc:	ands	r5, r5, ip, lsl r3
   12b00:	beq	12918 <__assert_fail@plt+0x1a48>
   12b04:	cmp	r6, #0
   12b08:	bne	126e4 <__assert_fail@plt+0x1814>
   12b0c:	add	r3, r4, #1
   12b10:	cmp	r9, r4
   12b14:	strbhi	r0, [r8, r4]
   12b18:	cmp	r9, r3
   12b1c:	movhi	r0, #34	; 0x22
   12b20:	strbhi	r0, [r8, r3]
   12b24:	add	r3, r4, #2
   12b28:	cmp	r9, r3
   12b2c:	movhi	r0, #34	; 0x22
   12b30:	strbhi	r0, [r8, r3]
   12b34:	add	r3, r4, #3
   12b38:	cmp	r9, r3
   12b3c:	add	r4, r4, #4
   12b40:	mov	r5, r6
   12b44:	mov	fp, r6
   12b48:	mov	r7, r1
   12b4c:	movhi	r0, #63	; 0x3f
   12b50:	strbhi	r0, [r8, r3]
   12b54:	str	r2, [sp, #28]
   12b58:	ldr	r3, [sp, #24]
   12b5c:	eor	r3, r3, #1
   12b60:	cmp	sl, #2
   12b64:	orreq	r3, r3, #1
   12b68:	eor	r3, r3, #1
   12b6c:	orr	r3, r6, r3
   12b70:	tst	r3, #255	; 0xff
   12b74:	beq	12ba4 <__assert_fail@plt+0x1cd4>
   12b78:	ldr	r3, [sp, #152]	; 0x98
   12b7c:	cmp	r3, #0
   12b80:	beq	12ba4 <__assert_fail@plt+0x1cd4>
   12b84:	lsr	r2, r7, #5
   12b88:	ldr	r1, [sp, #152]	; 0x98
   12b8c:	uxtb	r2, r2
   12b90:	and	r3, r7, #31
   12b94:	ldr	r2, [r1, r2, lsl #2]
   12b98:	lsr	r3, r2, r3
   12b9c:	tst	r3, #1
   12ba0:	bne	12bb0 <__assert_fail@plt+0x1ce0>
   12ba4:	ldr	r3, [sp, #64]	; 0x40
   12ba8:	cmp	r3, #0
   12bac:	beq	12c48 <__assert_fail@plt+0x1d78>
   12bb0:	cmp	r6, #0
   12bb4:	bne	126e4 <__assert_fail@plt+0x1814>
   12bb8:	ldr	r3, [sp, #48]	; 0x30
   12bbc:	eor	r3, r3, #1
   12bc0:	cmp	sl, #2
   12bc4:	movne	r3, #0
   12bc8:	andeq	r3, r3, #1
   12bcc:	cmp	r3, #0
   12bd0:	beq	12c08 <__assert_fail@plt+0x1d38>
   12bd4:	cmp	r9, r4
   12bd8:	movhi	r2, #39	; 0x27
   12bdc:	strbhi	r2, [r8, r4]
   12be0:	add	r2, r4, #1
   12be4:	cmp	r9, r2
   12be8:	movhi	r1, #36	; 0x24
   12bec:	strbhi	r1, [r8, r2]
   12bf0:	add	r2, r4, #2
   12bf4:	cmp	r9, r2
   12bf8:	add	r4, r4, #3
   12bfc:	movhi	r1, #39	; 0x27
   12c00:	strbhi	r1, [r8, r2]
   12c04:	str	r3, [sp, #48]	; 0x30
   12c08:	cmp	r9, r4
   12c0c:	movhi	r3, #92	; 0x5c
   12c10:	strbhi	r3, [r8, r4]
   12c14:	ldr	fp, [sp, #52]	; 0x34
   12c18:	add	r4, r4, #1
   12c1c:	b	12c48 <__assert_fail@plt+0x1d78>
   12c20:	mov	r3, #116	; 0x74
   12c24:	b	127fc <__assert_fail@plt+0x192c>
   12c28:	mov	r3, #118	; 0x76
   12c2c:	b	1298c <__assert_fail@plt+0x1abc>
   12c30:	cmp	sl, #2
   12c34:	bne	12ca4 <__assert_fail@plt+0x1dd4>
   12c38:	cmp	r6, #0
   12c3c:	bne	126e4 <__assert_fail@plt+0x1814>
   12c40:	mov	r5, r6
   12c44:	mov	fp, r6
   12c48:	ldr	r3, [sp, #48]	; 0x30
   12c4c:	eor	fp, fp, #1
   12c50:	and	fp, fp, r3
   12c54:	tst	fp, #255	; 0xff
   12c58:	beq	12c84 <__assert_fail@plt+0x1db4>
   12c5c:	cmp	r9, r4
   12c60:	movhi	r3, #39	; 0x27
   12c64:	strbhi	r3, [r8, r4]
   12c68:	add	r3, r4, #1
   12c6c:	cmp	r9, r3
   12c70:	movhi	r2, #39	; 0x27
   12c74:	add	r4, r4, #2
   12c78:	strbhi	r2, [r8, r3]
   12c7c:	mov	r3, #0
   12c80:	str	r3, [sp, #48]	; 0x30
   12c84:	cmp	r9, r4
   12c88:	strbhi	r7, [r8, r4]
   12c8c:	ldr	r3, [sp, #72]	; 0x48
   12c90:	cmp	r5, #0
   12c94:	moveq	r3, #0
   12c98:	add	r4, r4, #1
   12c9c:	str	r3, [sp, #72]	; 0x48
   12ca0:	b	12a88 <__assert_fail@plt+0x1bb8>
   12ca4:	ldr	r3, [sp, #24]
   12ca8:	and	r3, r3, r6
   12cac:	tst	r5, r3
   12cb0:	moveq	r3, r7
   12cb4:	beq	127fc <__assert_fail@plt+0x192c>
   12cb8:	mov	fp, #0
   12cbc:	mov	r5, fp
   12cc0:	b	12c48 <__assert_fail@plt+0x1d78>
   12cc4:	mov	r3, #110	; 0x6e
   12cc8:	b	127fc <__assert_fail@plt+0x192c>
   12ccc:	mov	r3, #97	; 0x61
   12cd0:	b	1298c <__assert_fail@plt+0x1abc>
   12cd4:	mov	r3, #102	; 0x66
   12cd8:	b	1298c <__assert_fail@plt+0x1abc>
   12cdc:	ldr	r3, [sp, #36]	; 0x24
   12ce0:	cmn	r3, #1
   12ce4:	bne	12d04 <__assert_fail@plt+0x1e34>
   12ce8:	ldr	r3, [sp, #44]	; 0x2c
   12cec:	ldrb	r3, [r3, #1]
   12cf0:	adds	r3, r3, #0
   12cf4:	movne	r3, #1
   12cf8:	cmp	r3, #0
   12cfc:	bne	12a9c <__assert_fail@plt+0x1bcc>
   12d00:	b	12960 <__assert_fail@plt+0x1a90>
   12d04:	ldr	r3, [sp, #36]	; 0x24
   12d08:	subs	r3, r3, #1
   12d0c:	b	12cf4 <__assert_fail@plt+0x1e24>
   12d10:	mov	r3, #0
   12d14:	str	r3, [sp, #96]	; 0x60
   12d18:	str	r3, [sp, #100]	; 0x64
   12d1c:	ldr	r3, [sp, #36]	; 0x24
   12d20:	cmn	r3, #1
   12d24:	bne	12d34 <__assert_fail@plt+0x1e64>
   12d28:	ldr	r0, [sp, #44]	; 0x2c
   12d2c:	bl	10de0 <strlen@plt>
   12d30:	str	r0, [sp, #36]	; 0x24
   12d34:	ldr	r5, [sp, #52]	; 0x34
   12d38:	mov	r3, #0
   12d3c:	str	r3, [sp, #56]	; 0x38
   12d40:	ldr	r3, [sp, #28]
   12d44:	ldr	r2, [sp, #56]	; 0x38
   12d48:	ldr	r1, [sp, #36]	; 0x24
   12d4c:	add	r2, r3, r2
   12d50:	ldr	r3, [sp, #44]	; 0x2c
   12d54:	add	r0, sp, #92	; 0x5c
   12d58:	add	fp, r3, r2
   12d5c:	sub	r2, r1, r2
   12d60:	add	r3, sp, #96	; 0x60
   12d64:	mov	r1, fp
   12d68:	bl	14318 <__assert_fail@plt+0x3448>
   12d6c:	subs	r2, r0, #0
   12d70:	beq	12db0 <__assert_fail@plt+0x1ee0>
   12d74:	cmn	r2, #1
   12d78:	beq	12f88 <__assert_fail@plt+0x20b8>
   12d7c:	cmn	r2, #2
   12d80:	bne	12ef8 <__assert_fail@plt+0x2028>
   12d84:	ldr	r2, [sp, #56]	; 0x38
   12d88:	ldr	r3, [sp, #28]
   12d8c:	add	r3, r3, r2
   12d90:	ldr	r2, [sp, #36]	; 0x24
   12d94:	cmp	r2, r3
   12d98:	bls	12f88 <__assert_fail@plt+0x20b8>
   12d9c:	ldr	r3, [sp, #80]	; 0x50
   12da0:	ldr	r2, [sp, #56]	; 0x38
   12da4:	ldrb	r5, [r3, r2]
   12da8:	cmp	r5, #0
   12dac:	bne	12ee8 <__assert_fail@plt+0x2018>
   12db0:	ldr	r3, [sp, #56]	; 0x38
   12db4:	cmp	r3, #1
   12db8:	bls	127c0 <__assert_fail@plt+0x18f0>
   12dbc:	ldr	r2, [sp, #56]	; 0x38
   12dc0:	ldr	r3, [sp, #28]
   12dc4:	mov	fp, #0
   12dc8:	add	r3, r3, r2
   12dcc:	ldr	r2, [sp, #24]
   12dd0:	str	r3, [sp, #52]	; 0x34
   12dd4:	eor	r3, r5, #1
   12dd8:	and	r3, r3, r2
   12ddc:	mov	ip, #92	; 0x5c
   12de0:	uxtb	r3, r3
   12de4:	mov	r2, #39	; 0x27
   12de8:	cmp	r3, #0
   12dec:	beq	12f90 <__assert_fail@plt+0x20c0>
   12df0:	cmp	r6, #0
   12df4:	bne	126e0 <__assert_fail@plt+0x1810>
   12df8:	ldr	r1, [sp, #48]	; 0x30
   12dfc:	eor	r1, r1, #1
   12e00:	cmp	sl, #2
   12e04:	movne	r1, #0
   12e08:	andeq	r1, r1, #1
   12e0c:	cmp	r1, #0
   12e10:	beq	12e40 <__assert_fail@plt+0x1f70>
   12e14:	add	r0, r4, #1
   12e18:	cmp	r9, r4
   12e1c:	strbhi	r2, [r8, r4]
   12e20:	cmp	r9, r0
   12e24:	movhi	lr, #36	; 0x24
   12e28:	strbhi	lr, [r8, r0]
   12e2c:	add	r0, r4, #2
   12e30:	add	r4, r4, #3
   12e34:	cmp	r9, r0
   12e38:	strbhi	r2, [r8, r0]
   12e3c:	str	r1, [sp, #48]	; 0x30
   12e40:	add	r0, r4, #1
   12e44:	cmp	r9, r4
   12e48:	strbhi	ip, [r8, r4]
   12e4c:	cmp	r9, r0
   12e50:	lsrhi	r1, r7, #6
   12e54:	addhi	r1, r1, #48	; 0x30
   12e58:	strbhi	r1, [r8, r0]
   12e5c:	add	r0, r4, #2
   12e60:	cmp	r9, r0
   12e64:	lsrhi	r1, r7, #3
   12e68:	and	r7, r7, #7
   12e6c:	andhi	r1, r1, #7
   12e70:	add	r4, r4, #3
   12e74:	add	r7, r7, #48	; 0x30
   12e78:	mov	fp, r3
   12e7c:	addhi	r1, r1, #48	; 0x30
   12e80:	strbhi	r1, [r8, r0]
   12e84:	ldr	r1, [sp, #28]
   12e88:	ldr	r0, [sp, #52]	; 0x34
   12e8c:	add	r1, r1, #1
   12e90:	cmp	r0, r1
   12e94:	bls	12c48 <__assert_fail@plt+0x1d78>
   12e98:	ldr	lr, [sp, #48]	; 0x30
   12e9c:	eor	r0, fp, #1
   12ea0:	and	r0, r0, lr
   12ea4:	tst	r0, #255	; 0xff
   12ea8:	beq	12ecc <__assert_fail@plt+0x1ffc>
   12eac:	add	r0, r4, #1
   12eb0:	cmp	r9, r4
   12eb4:	strbhi	r2, [r8, r4]
   12eb8:	cmp	r9, r0
   12ebc:	add	r4, r4, #2
   12ec0:	strbhi	r2, [r8, r0]
   12ec4:	mov	r0, #0
   12ec8:	str	r0, [sp, #48]	; 0x30
   12ecc:	ldr	r0, [sp, #44]	; 0x2c
   12ed0:	cmp	r9, r4
   12ed4:	strbhi	r7, [r8, r4]
   12ed8:	str	r1, [sp, #28]
   12edc:	add	r4, r4, #1
   12ee0:	ldrb	r7, [r0, r1]
   12ee4:	b	12de8 <__assert_fail@plt+0x1f18>
   12ee8:	ldr	r3, [sp, #56]	; 0x38
   12eec:	add	r3, r3, #1
   12ef0:	str	r3, [sp, #56]	; 0x38
   12ef4:	b	12d84 <__assert_fail@plt+0x1eb4>
   12ef8:	cmp	sl, #2
   12efc:	movne	r3, #0
   12f00:	andeq	r3, r6, #1
   12f04:	cmp	r3, #0
   12f08:	movne	r1, #1
   12f0c:	bne	12f68 <__assert_fail@plt+0x2098>
   12f10:	ldr	r0, [sp, #92]	; 0x5c
   12f14:	str	r2, [sp, #84]	; 0x54
   12f18:	bl	10d38 <iswprint@plt>
   12f1c:	ldr	r3, [sp, #56]	; 0x38
   12f20:	ldr	r2, [sp, #84]	; 0x54
   12f24:	add	r3, r3, r2
   12f28:	str	r3, [sp, #56]	; 0x38
   12f2c:	cmp	r0, #0
   12f30:	add	r0, sp, #96	; 0x60
   12f34:	moveq	r5, #0
   12f38:	bl	10ce4 <mbsinit@plt>
   12f3c:	cmp	r0, #0
   12f40:	beq	12d40 <__assert_fail@plt+0x1e70>
   12f44:	b	12db0 <__assert_fail@plt+0x1ee0>
   12f48:	ldrb	r3, [fp, r1]
   12f4c:	cmp	r3, #94	; 0x5e
   12f50:	beq	12810 <__assert_fail@plt+0x1940>
   12f54:	bhi	12f74 <__assert_fail@plt+0x20a4>
   12f58:	sub	r3, r3, #91	; 0x5b
   12f5c:	cmp	r3, #1
   12f60:	bls	12810 <__assert_fail@plt+0x1940>
   12f64:	add	r1, r1, #1
   12f68:	cmp	r1, r2
   12f6c:	bne	12f48 <__assert_fail@plt+0x2078>
   12f70:	b	12f10 <__assert_fail@plt+0x2040>
   12f74:	cmp	r3, #96	; 0x60
   12f78:	beq	12810 <__assert_fail@plt+0x1940>
   12f7c:	cmp	r3, #124	; 0x7c
   12f80:	bne	12f64 <__assert_fail@plt+0x2094>
   12f84:	b	12810 <__assert_fail@plt+0x1940>
   12f88:	mov	r5, #0
   12f8c:	b	12db0 <__assert_fail@plt+0x1ee0>
   12f90:	ldr	r1, [sp, #64]	; 0x40
   12f94:	cmp	r1, #0
   12f98:	beq	12e84 <__assert_fail@plt+0x1fb4>
   12f9c:	cmp	r9, r4
   12fa0:	strbhi	ip, [r8, r4]
   12fa4:	str	r3, [sp, #64]	; 0x40
   12fa8:	add	r4, r4, #1
   12fac:	b	12e84 <__assert_fail@plt+0x1fb4>
   12fb0:	mov	r5, fp
   12fb4:	ldr	fp, [sp, #24]
   12fb8:	mov	r7, #48	; 0x30
   12fbc:	b	12b58 <__assert_fail@plt+0x1c88>
   12fc0:	mov	r5, #0
   12fc4:	mov	fp, r5
   12fc8:	b	12b58 <__assert_fail@plt+0x1c88>
   12fcc:	ldr	r3, [sp, #36]	; 0x24
   12fd0:	ldr	r2, [sp, #28]
   12fd4:	subs	r3, r3, r2
   12fd8:	movne	r3, #1
   12fdc:	b	12454 <__assert_fail@plt+0x1584>
   12fe0:	ldr	r3, [sp, #60]	; 0x3c
   12fe4:	clz	r7, r9
   12fe8:	cmp	r3, #0
   12fec:	lsr	r7, r7, #5
   12ff0:	moveq	r7, #0
   12ff4:	cmp	r7, #0
   12ff8:	mov	r5, r3
   12ffc:	bne	123b4 <__assert_fail@plt+0x14e4>
   13000:	ldr	r3, [sp, #68]	; 0x44
   13004:	ldr	r2, [sp, #40]	; 0x28
   13008:	cmp	r2, #0
   1300c:	moveq	r3, #0
   13010:	andne	r3, r3, #1
   13014:	cmp	r3, #0
   13018:	movne	r3, r2
   1301c:	subne	r2, r3, #1
   13020:	bne	13050 <__assert_fail@plt+0x2180>
   13024:	cmp	r9, r4
   13028:	movhi	r3, #0
   1302c:	strbhi	r3, [r8, r4]
   13030:	mov	r0, r4
   13034:	add	sp, sp, #108	; 0x6c
   13038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1303c:	mov	r3, r2
   13040:	b	13004 <__assert_fail@plt+0x2134>
   13044:	cmp	r9, r4
   13048:	strbhi	r3, [r8, r4]
   1304c:	add	r4, r4, #1
   13050:	ldrb	r3, [r2, #1]!
   13054:	cmp	r3, #0
   13058:	bne	13044 <__assert_fail@plt+0x2174>
   1305c:	b	13024 <__assert_fail@plt+0x2154>
   13060:	ldr	r3, [pc, #32]	; 13088 <__assert_fail@plt+0x21b8>
   13064:	mov	r6, #1
   13068:	str	r6, [sp, #24]
   1306c:	str	r6, [sp, #32]
   13070:	str	r3, [sp, #40]	; 0x28
   13074:	mov	r4, #0
   13078:	mov	sl, #5
   1307c:	b	12424 <__assert_fail@plt+0x1554>
   13080:	mov	r6, #1
   13084:	b	12618 <__assert_fail@plt+0x1748>
   13088:	andeq	r5, r1, pc, lsl r3
   1308c:	andeq	r5, r1, r1, lsr #6
   13090:	muleq	r1, r3, r0
   13094:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1309c:	sub	sp, sp, #52	; 0x34
   130a0:	mov	r6, r0
   130a4:	mov	r5, r3
   130a8:	mov	r8, r1
   130ac:	mov	r9, r2
   130b0:	bl	10dec <__errno_location@plt>
   130b4:	ldr	r7, [pc, #380]	; 13238 <__assert_fail@plt+0x2368>
   130b8:	cmn	r6, #-2147483647	; 0x80000001
   130bc:	ldr	r4, [r7]
   130c0:	ldr	r3, [r0]
   130c4:	str	r0, [sp, #24]
   130c8:	str	r3, [sp, #32]
   130cc:	movne	r3, #0
   130d0:	moveq	r3, #1
   130d4:	orrs	r3, r3, r6, lsr #31
   130d8:	beq	130e0 <__assert_fail@plt+0x2210>
   130dc:	bl	10eac <abort@plt>
   130e0:	ldr	r2, [r7, #4]
   130e4:	cmp	r6, r2
   130e8:	blt	13158 <__assert_fail@plt+0x2288>
   130ec:	add	r1, sp, #48	; 0x30
   130f0:	add	sl, r7, #8
   130f4:	str	r2, [r1, #-4]!
   130f8:	cmp	r4, sl
   130fc:	mov	r3, #8
   13100:	sub	r2, r6, r2
   13104:	movne	r0, r4
   13108:	str	r3, [sp]
   1310c:	add	r2, r2, #1
   13110:	mvn	r3, #-2147483648	; 0x80000000
   13114:	moveq	r0, #0
   13118:	bl	13e2c <__assert_fail@plt+0x2f5c>
   1311c:	cmp	r4, sl
   13120:	ldr	r2, [sp, #44]	; 0x2c
   13124:	mov	fp, r0
   13128:	str	r0, [r7]
   1312c:	ldmeq	r4, {r0, r1}
   13130:	mov	r4, fp
   13134:	stmeq	fp, {r0, r1}
   13138:	ldr	r0, [r7, #4]
   1313c:	mov	r1, #0
   13140:	sub	r2, r2, r0
   13144:	add	r0, fp, r0, lsl #3
   13148:	lsl	r2, r2, #3
   1314c:	bl	10e04 <memset@plt>
   13150:	ldr	r3, [sp, #44]	; 0x2c
   13154:	str	r3, [r7, #4]
   13158:	ldr	r3, [r5, #4]
   1315c:	add	sl, r4, r6, lsl #3
   13160:	orr	r3, r3, #1
   13164:	str	r3, [sp, #28]
   13168:	add	r3, r5, #8
   1316c:	str	r3, [sp, #36]	; 0x24
   13170:	ldr	r3, [r5, #44]	; 0x2c
   13174:	ldr	fp, [r4, r6, lsl #3]
   13178:	ldr	r7, [sl, #4]
   1317c:	str	r3, [sp, #16]
   13180:	ldr	r3, [r5, #40]	; 0x28
   13184:	mov	r2, r8
   13188:	str	r3, [sp, #12]
   1318c:	add	r3, r5, #8
   13190:	str	r3, [sp, #8]
   13194:	ldr	r3, [sp, #28]
   13198:	mov	r1, fp
   1319c:	str	r3, [sp, #4]
   131a0:	ldr	r3, [r5]
   131a4:	mov	r0, r7
   131a8:	str	r3, [sp]
   131ac:	mov	r3, r9
   131b0:	bl	12364 <__assert_fail@plt+0x1494>
   131b4:	cmp	fp, r0
   131b8:	bhi	13220 <__assert_fail@plt+0x2350>
   131bc:	ldr	r3, [pc, #120]	; 1323c <__assert_fail@plt+0x236c>
   131c0:	add	fp, r0, #1
   131c4:	cmp	r7, r3
   131c8:	str	fp, [r4, r6, lsl #3]
   131cc:	beq	131d8 <__assert_fail@plt+0x2308>
   131d0:	mov	r0, r7
   131d4:	bl	1208c <__assert_fail@plt+0x11bc>
   131d8:	mov	r0, fp
   131dc:	bl	13ce4 <__assert_fail@plt+0x2e14>
   131e0:	ldr	r3, [r5, #44]	; 0x2c
   131e4:	mov	r2, r8
   131e8:	mov	r1, fp
   131ec:	str	r0, [sl, #4]
   131f0:	str	r3, [sp, #16]
   131f4:	ldr	r3, [r5, #40]	; 0x28
   131f8:	mov	r7, r0
   131fc:	str	r3, [sp, #12]
   13200:	add	r3, r5, #8
   13204:	str	r3, [sp, #8]
   13208:	ldr	r3, [sp, #28]
   1320c:	str	r3, [sp, #4]
   13210:	ldr	r3, [r5]
   13214:	str	r3, [sp]
   13218:	mov	r3, r9
   1321c:	bl	12364 <__assert_fail@plt+0x1494>
   13220:	ldr	r3, [sp, #24]
   13224:	ldr	r2, [sp, #32]
   13228:	mov	r0, r7
   1322c:	str	r2, [r3]
   13230:	add	sp, sp, #52	; 0x34
   13234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13238:	strdeq	r6, [r2], -r4
   1323c:	andeq	r6, r2, r8, lsr #3
   13240:	push	{r4, r5, r6, lr}
   13244:	mov	r5, r0
   13248:	bl	10dec <__errno_location@plt>
   1324c:	cmp	r5, #0
   13250:	mov	r1, #48	; 0x30
   13254:	ldr	r6, [r0]
   13258:	mov	r4, r0
   1325c:	ldr	r0, [pc, #12]	; 13270 <__assert_fail@plt+0x23a0>
   13260:	movne	r0, r5
   13264:	bl	140c0 <__assert_fail@plt+0x31f0>
   13268:	str	r6, [r4]
   1326c:	pop	{r4, r5, r6, pc}
   13270:	andeq	r6, r2, r8, lsr #5
   13274:	ldr	r3, [pc, #12]	; 13288 <__assert_fail@plt+0x23b8>
   13278:	cmp	r0, #0
   1327c:	moveq	r0, r3
   13280:	ldr	r0, [r0]
   13284:	bx	lr
   13288:	andeq	r6, r2, r8, lsr #5
   1328c:	ldr	r3, [pc, #12]	; 132a0 <__assert_fail@plt+0x23d0>
   13290:	cmp	r0, #0
   13294:	moveq	r0, r3
   13298:	str	r1, [r0]
   1329c:	bx	lr
   132a0:	andeq	r6, r2, r8, lsr #5
   132a4:	ldr	r3, [pc, #52]	; 132e0 <__assert_fail@plt+0x2410>
   132a8:	cmp	r0, #0
   132ac:	moveq	r0, r3
   132b0:	add	r3, r0, #8
   132b4:	push	{lr}		; (str lr, [sp, #-4]!)
   132b8:	lsr	lr, r1, #5
   132bc:	and	r1, r1, #31
   132c0:	ldr	ip, [r3, lr, lsl #2]
   132c4:	lsr	r0, ip, r1
   132c8:	eor	r2, r2, r0
   132cc:	and	r2, r2, #1
   132d0:	and	r0, r0, #1
   132d4:	eor	r1, ip, r2, lsl r1
   132d8:	str	r1, [r3, lr, lsl #2]
   132dc:	pop	{pc}		; (ldr pc, [sp], #4)
   132e0:	andeq	r6, r2, r8, lsr #5
   132e4:	ldr	r3, [pc, #16]	; 132fc <__assert_fail@plt+0x242c>
   132e8:	cmp	r0, #0
   132ec:	movne	r3, r0
   132f0:	ldr	r0, [r3, #4]
   132f4:	str	r1, [r3, #4]
   132f8:	bx	lr
   132fc:	andeq	r6, r2, r8, lsr #5
   13300:	ldr	r3, [pc, #44]	; 13334 <__assert_fail@plt+0x2464>
   13304:	cmp	r0, #0
   13308:	moveq	r0, r3
   1330c:	mov	r3, #10
   13310:	cmp	r2, #0
   13314:	cmpne	r1, #0
   13318:	str	r3, [r0]
   1331c:	bne	13328 <__assert_fail@plt+0x2458>
   13320:	push	{r4, lr}
   13324:	bl	10eac <abort@plt>
   13328:	str	r1, [r0, #40]	; 0x28
   1332c:	str	r2, [r0, #44]	; 0x2c
   13330:	bx	lr
   13334:	andeq	r6, r2, r8, lsr #5
   13338:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1333c:	sub	sp, sp, #24
   13340:	mov	sl, r3
   13344:	ldr	r4, [sp, #56]	; 0x38
   13348:	ldr	r3, [pc, #100]	; 133b4 <__assert_fail@plt+0x24e4>
   1334c:	cmp	r4, #0
   13350:	moveq	r4, r3
   13354:	mov	r7, r0
   13358:	mov	r8, r1
   1335c:	mov	r9, r2
   13360:	bl	10dec <__errno_location@plt>
   13364:	ldr	r3, [r4, #44]	; 0x2c
   13368:	mov	r2, r9
   1336c:	mov	r1, r8
   13370:	ldr	r6, [r0]
   13374:	str	r3, [sp, #16]
   13378:	ldr	r3, [r4, #40]	; 0x28
   1337c:	mov	r5, r0
   13380:	str	r3, [sp, #12]
   13384:	add	r3, r4, #8
   13388:	str	r3, [sp, #8]
   1338c:	ldr	r3, [r4, #4]
   13390:	mov	r0, r7
   13394:	str	r3, [sp, #4]
   13398:	ldr	r3, [r4]
   1339c:	str	r3, [sp]
   133a0:	mov	r3, sl
   133a4:	bl	12364 <__assert_fail@plt+0x1494>
   133a8:	str	r6, [r5]
   133ac:	add	sp, sp, #24
   133b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133b4:	andeq	r6, r2, r8, lsr #5
   133b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133bc:	cmp	r3, #0
   133c0:	sub	sp, sp, #44	; 0x2c
   133c4:	ldr	r4, [pc, #188]	; 13488 <__assert_fail@plt+0x25b8>
   133c8:	mov	r6, r2
   133cc:	movne	r4, r3
   133d0:	mov	sl, r1
   133d4:	mov	r9, r0
   133d8:	bl	10dec <__errno_location@plt>
   133dc:	ldr	r5, [r4, #4]
   133e0:	add	fp, r4, #8
   133e4:	cmp	r6, #0
   133e8:	orreq	r5, r5, #1
   133ec:	mov	r1, #0
   133f0:	mov	r2, r9
   133f4:	ldr	r3, [r0]
   133f8:	mov	r8, r0
   133fc:	str	r3, [sp, #28]
   13400:	ldr	r3, [r4, #44]	; 0x2c
   13404:	mov	r0, r1
   13408:	str	r3, [sp, #16]
   1340c:	ldr	r3, [r4, #40]	; 0x28
   13410:	stmib	sp, {r5, fp}
   13414:	str	r3, [sp, #12]
   13418:	ldr	r3, [r4]
   1341c:	str	r3, [sp]
   13420:	mov	r3, sl
   13424:	bl	12364 <__assert_fail@plt+0x1494>
   13428:	add	r1, r0, #1
   1342c:	mov	r7, r0
   13430:	mov	r0, r1
   13434:	str	r1, [sp, #36]	; 0x24
   13438:	bl	13ce4 <__assert_fail@plt+0x2e14>
   1343c:	ldr	r3, [r4, #44]	; 0x2c
   13440:	mov	r2, r9
   13444:	str	r3, [sp, #16]
   13448:	ldr	r3, [r4, #40]	; 0x28
   1344c:	stmib	sp, {r5, fp}
   13450:	str	r3, [sp, #12]
   13454:	ldr	r3, [r4]
   13458:	ldr	r1, [sp, #36]	; 0x24
   1345c:	str	r3, [sp]
   13460:	mov	r3, sl
   13464:	str	r0, [sp, #32]
   13468:	bl	12364 <__assert_fail@plt+0x1494>
   1346c:	ldr	r3, [sp, #28]
   13470:	cmp	r6, #0
   13474:	str	r3, [r8]
   13478:	ldr	r0, [sp, #32]
   1347c:	strne	r7, [r6]
   13480:	add	sp, sp, #44	; 0x2c
   13484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13488:	andeq	r6, r2, r8, lsr #5
   1348c:	mov	r3, r2
   13490:	mov	r2, #0
   13494:	b	133b8 <__assert_fail@plt+0x24e8>
   13498:	push	{r4, r5, r6, r7, r8, lr}
   1349c:	mov	r6, #1
   134a0:	ldr	r4, [pc, #104]	; 13510 <__assert_fail@plt+0x2640>
   134a4:	ldr	r5, [r4]
   134a8:	add	r7, r5, #12
   134ac:	ldr	r3, [r4, #4]
   134b0:	add	r7, r7, #8
   134b4:	cmp	r6, r3
   134b8:	blt	13500 <__assert_fail@plt+0x2630>
   134bc:	ldr	r0, [r5, #4]
   134c0:	ldr	r6, [pc, #76]	; 13514 <__assert_fail@plt+0x2644>
   134c4:	cmp	r0, r6
   134c8:	beq	134dc <__assert_fail@plt+0x260c>
   134cc:	bl	1208c <__assert_fail@plt+0x11bc>
   134d0:	mov	r3, #256	; 0x100
   134d4:	str	r3, [r4, #8]
   134d8:	str	r6, [r4, #12]
   134dc:	ldr	r6, [pc, #52]	; 13518 <__assert_fail@plt+0x2648>
   134e0:	cmp	r5, r6
   134e4:	beq	134f4 <__assert_fail@plt+0x2624>
   134e8:	mov	r0, r5
   134ec:	bl	1208c <__assert_fail@plt+0x11bc>
   134f0:	str	r6, [r4]
   134f4:	mov	r3, #1
   134f8:	str	r3, [r4, #4]
   134fc:	pop	{r4, r5, r6, r7, r8, pc}
   13500:	ldr	r0, [r7, #-8]
   13504:	bl	1208c <__assert_fail@plt+0x11bc>
   13508:	add	r6, r6, #1
   1350c:	b	134ac <__assert_fail@plt+0x25dc>
   13510:	strdeq	r6, [r2], -r4
   13514:	andeq	r6, r2, r8, lsr #3
   13518:	strdeq	r6, [r2], -ip
   1351c:	ldr	r3, [pc, #4]	; 13528 <__assert_fail@plt+0x2658>
   13520:	mvn	r2, #0
   13524:	b	13098 <__assert_fail@plt+0x21c8>
   13528:	andeq	r6, r2, r8, lsr #5
   1352c:	ldr	r3, [pc]	; 13534 <__assert_fail@plt+0x2664>
   13530:	b	13098 <__assert_fail@plt+0x21c8>
   13534:	andeq	r6, r2, r8, lsr #5
   13538:	mov	r1, r0
   1353c:	mov	r0, #0
   13540:	b	1351c <__assert_fail@plt+0x264c>
   13544:	mov	r2, r1
   13548:	mov	r1, r0
   1354c:	mov	r0, #0
   13550:	b	1352c <__assert_fail@plt+0x265c>
   13554:	push	{r4, r5, lr}
   13558:	sub	sp, sp, #52	; 0x34
   1355c:	mov	r5, r2
   13560:	mov	r4, r0
   13564:	mov	r0, sp
   13568:	bl	12220 <__assert_fail@plt+0x1350>
   1356c:	mov	r3, sp
   13570:	mvn	r2, #0
   13574:	mov	r1, r5
   13578:	mov	r0, r4
   1357c:	bl	13098 <__assert_fail@plt+0x21c8>
   13580:	add	sp, sp, #52	; 0x34
   13584:	pop	{r4, r5, pc}
   13588:	push	{r4, r5, r6, lr}
   1358c:	sub	sp, sp, #48	; 0x30
   13590:	mov	r5, r2
   13594:	mov	r6, r3
   13598:	mov	r4, r0
   1359c:	mov	r0, sp
   135a0:	bl	12220 <__assert_fail@plt+0x1350>
   135a4:	mov	r3, sp
   135a8:	mov	r2, r6
   135ac:	mov	r1, r5
   135b0:	mov	r0, r4
   135b4:	bl	13098 <__assert_fail@plt+0x21c8>
   135b8:	add	sp, sp, #48	; 0x30
   135bc:	pop	{r4, r5, r6, pc}
   135c0:	mov	r2, r1
   135c4:	mov	r1, r0
   135c8:	mov	r0, #0
   135cc:	b	13554 <__assert_fail@plt+0x2684>
   135d0:	mov	r3, r2
   135d4:	mov	r2, r1
   135d8:	mov	r1, r0
   135dc:	mov	r0, #0
   135e0:	b	13588 <__assert_fail@plt+0x26b8>
   135e4:	push	{r4, r5, r6, lr}
   135e8:	mov	r4, r0
   135ec:	ldr	lr, [pc, #80]	; 13644 <__assert_fail@plt+0x2774>
   135f0:	mov	r5, r1
   135f4:	mov	r6, r2
   135f8:	ldm	lr!, {r0, r1, r2, r3}
   135fc:	sub	sp, sp, #48	; 0x30
   13600:	mov	ip, sp
   13604:	stmia	ip!, {r0, r1, r2, r3}
   13608:	ldm	lr!, {r0, r1, r2, r3}
   1360c:	stmia	ip!, {r0, r1, r2, r3}
   13610:	ldm	lr, {r0, r1, r2, r3}
   13614:	stm	ip, {r0, r1, r2, r3}
   13618:	mov	r1, r6
   1361c:	mov	r2, #1
   13620:	mov	r0, sp
   13624:	bl	132a4 <__assert_fail@plt+0x23d4>
   13628:	mov	r3, sp
   1362c:	mov	r2, r5
   13630:	mov	r1, r4
   13634:	mov	r0, #0
   13638:	bl	13098 <__assert_fail@plt+0x21c8>
   1363c:	add	sp, sp, #48	; 0x30
   13640:	pop	{r4, r5, r6, pc}
   13644:	andeq	r6, r2, r8, lsr #5
   13648:	mov	r2, r1
   1364c:	mvn	r1, #0
   13650:	b	135e4 <__assert_fail@plt+0x2714>
   13654:	mov	r1, #58	; 0x3a
   13658:	b	13648 <__assert_fail@plt+0x2778>
   1365c:	mov	r2, #58	; 0x3a
   13660:	b	135e4 <__assert_fail@plt+0x2714>
   13664:	push	{r4, r5, lr}
   13668:	sub	sp, sp, #100	; 0x64
   1366c:	mov	r4, r0
   13670:	mov	r0, sp
   13674:	mov	r5, r2
   13678:	bl	12220 <__assert_fail@plt+0x1350>
   1367c:	mov	ip, sp
   13680:	add	lr, sp, #48	; 0x30
   13684:	ldm	ip!, {r0, r1, r2, r3}
   13688:	stmia	lr!, {r0, r1, r2, r3}
   1368c:	ldm	ip!, {r0, r1, r2, r3}
   13690:	stmia	lr!, {r0, r1, r2, r3}
   13694:	ldm	ip, {r0, r1, r2, r3}
   13698:	stm	lr, {r0, r1, r2, r3}
   1369c:	mov	r2, #1
   136a0:	mov	r1, #58	; 0x3a
   136a4:	add	r0, sp, #48	; 0x30
   136a8:	bl	132a4 <__assert_fail@plt+0x23d4>
   136ac:	add	r3, sp, #48	; 0x30
   136b0:	mvn	r2, #0
   136b4:	mov	r1, r5
   136b8:	mov	r0, r4
   136bc:	bl	13098 <__assert_fail@plt+0x21c8>
   136c0:	add	sp, sp, #100	; 0x64
   136c4:	pop	{r4, r5, pc}
   136c8:	push	{r4, r5, r6, r7, lr}
   136cc:	mov	r4, r0
   136d0:	ldr	lr, [pc, #84]	; 1372c <__assert_fail@plt+0x285c>
   136d4:	mov	r6, r1
   136d8:	mov	r7, r2
   136dc:	mov	r5, r3
   136e0:	ldm	lr!, {r0, r1, r2, r3}
   136e4:	sub	sp, sp, #52	; 0x34
   136e8:	mov	ip, sp
   136ec:	stmia	ip!, {r0, r1, r2, r3}
   136f0:	ldm	lr!, {r0, r1, r2, r3}
   136f4:	stmia	ip!, {r0, r1, r2, r3}
   136f8:	ldm	lr, {r0, r1, r2, r3}
   136fc:	stm	ip, {r0, r1, r2, r3}
   13700:	mov	r2, r7
   13704:	mov	r1, r6
   13708:	mov	r0, sp
   1370c:	bl	13300 <__assert_fail@plt+0x2430>
   13710:	mov	r3, sp
   13714:	ldr	r2, [sp, #72]	; 0x48
   13718:	mov	r1, r5
   1371c:	mov	r0, r4
   13720:	bl	13098 <__assert_fail@plt+0x21c8>
   13724:	add	sp, sp, #52	; 0x34
   13728:	pop	{r4, r5, r6, r7, pc}
   1372c:	andeq	r6, r2, r8, lsr #5
   13730:	mvn	ip, #0
   13734:	push	{r0, r1, r2, lr}
   13738:	str	ip, [sp]
   1373c:	bl	136c8 <__assert_fail@plt+0x27f8>
   13740:	add	sp, sp, #12
   13744:	pop	{pc}		; (ldr pc, [sp], #4)
   13748:	mov	r3, r2
   1374c:	mov	r2, r1
   13750:	mov	r1, r0
   13754:	mov	r0, #0
   13758:	b	13730 <__assert_fail@plt+0x2860>
   1375c:	push	{r0, r1, r2, lr}
   13760:	str	r3, [sp]
   13764:	mov	r3, r2
   13768:	mov	r2, r1
   1376c:	mov	r1, r0
   13770:	mov	r0, #0
   13774:	bl	136c8 <__assert_fail@plt+0x27f8>
   13778:	add	sp, sp, #12
   1377c:	pop	{pc}		; (ldr pc, [sp], #4)
   13780:	ldr	r3, [pc]	; 13788 <__assert_fail@plt+0x28b8>
   13784:	b	13098 <__assert_fail@plt+0x21c8>
   13788:	andeq	r6, r2, r4, lsl #2
   1378c:	mov	r2, r1
   13790:	mov	r1, r0
   13794:	mov	r0, #0
   13798:	b	13780 <__assert_fail@plt+0x28b0>
   1379c:	mvn	r2, #0
   137a0:	b	13780 <__assert_fail@plt+0x28b0>
   137a4:	mov	r1, r0
   137a8:	mov	r0, #0
   137ac:	b	1379c <__assert_fail@plt+0x28cc>
   137b0:	push	{r4, r5, r6, lr}
   137b4:	sub	sp, sp, #32
   137b8:	cmp	r1, #0
   137bc:	mov	r5, r0
   137c0:	ldr	r4, [sp, #48]	; 0x30
   137c4:	ldr	r6, [sp, #52]	; 0x34
   137c8:	beq	1387c <__assert_fail@plt+0x29ac>
   137cc:	stm	sp, {r2, r3}
   137d0:	mov	r3, r1
   137d4:	ldr	r2, [pc, #860]	; 13b38 <__assert_fail@plt+0x2c68>
   137d8:	mov	r1, #1
   137dc:	bl	10e28 <__fprintf_chk@plt>
   137e0:	mov	r2, #5
   137e4:	ldr	r1, [pc, #848]	; 13b3c <__assert_fail@plt+0x2c6c>
   137e8:	mov	r0, #0
   137ec:	bl	10d14 <dcgettext@plt>
   137f0:	ldr	r3, [pc, #840]	; 13b40 <__assert_fail@plt+0x2c70>
   137f4:	ldr	r2, [pc, #840]	; 13b44 <__assert_fail@plt+0x2c74>
   137f8:	str	r3, [sp]
   137fc:	mov	r1, #1
   13800:	mov	r3, r0
   13804:	mov	r0, r5
   13808:	bl	10e28 <__fprintf_chk@plt>
   1380c:	mov	r1, r5
   13810:	mov	r0, #10
   13814:	bl	10cfc <fputc_unlocked@plt>
   13818:	mov	r2, #5
   1381c:	ldr	r1, [pc, #804]	; 13b48 <__assert_fail@plt+0x2c78>
   13820:	mov	r0, #0
   13824:	bl	10d14 <dcgettext@plt>
   13828:	mov	r1, #1
   1382c:	ldr	r3, [pc, #792]	; 13b4c <__assert_fail@plt+0x2c7c>
   13830:	mov	r2, r0
   13834:	mov	r0, r5
   13838:	bl	10e28 <__fprintf_chk@plt>
   1383c:	mov	r1, r5
   13840:	mov	r0, #10
   13844:	bl	10cfc <fputc_unlocked@plt>
   13848:	cmp	r6, #9
   1384c:	ldrls	pc, [pc, r6, lsl #2]
   13850:	b	13b2c <__assert_fail@plt+0x2c5c>
   13854:	andeq	r3, r1, ip, ror #18
   13858:	muleq	r1, r4, r8
   1385c:	andeq	r3, r1, r0, asr #17
   13860:	strdeq	r3, [r1], -r4
   13864:	andeq	r3, r1, r0, lsr r9
   13868:	andeq	r3, r1, r4, ror r9
   1386c:			; <UNDEFINED> instruction: 0x000139bc
   13870:	andeq	r3, r1, ip, lsl #20
   13874:	andeq	r3, r1, r4, ror #20
   13878:	andeq	r3, r1, r4, asr #21
   1387c:	str	r3, [sp]
   13880:	mov	r1, #1
   13884:	mov	r3, r2
   13888:	ldr	r2, [pc, #704]	; 13b50 <__assert_fail@plt+0x2c80>
   1388c:	bl	10e28 <__fprintf_chk@plt>
   13890:	b	137e0 <__assert_fail@plt+0x2910>
   13894:	mov	r2, #5
   13898:	ldr	r1, [pc, #692]	; 13b54 <__assert_fail@plt+0x2c84>
   1389c:	mov	r0, #0
   138a0:	bl	10d14 <dcgettext@plt>
   138a4:	ldr	r3, [r4]
   138a8:	mov	r1, #1
   138ac:	mov	r2, r0
   138b0:	mov	r0, r5
   138b4:	add	sp, sp, #32
   138b8:	pop	{r4, r5, r6, lr}
   138bc:	b	10e28 <__fprintf_chk@plt>
   138c0:	mov	r2, #5
   138c4:	ldr	r1, [pc, #652]	; 13b58 <__assert_fail@plt+0x2c88>
   138c8:	mov	r0, #0
   138cc:	bl	10d14 <dcgettext@plt>
   138d0:	ldr	r3, [r4, #4]
   138d4:	mov	r1, #1
   138d8:	str	r3, [sp, #48]	; 0x30
   138dc:	ldr	r3, [r4]
   138e0:	mov	r2, r0
   138e4:	mov	r0, r5
   138e8:	add	sp, sp, #32
   138ec:	pop	{r4, r5, r6, lr}
   138f0:	b	10e28 <__fprintf_chk@plt>
   138f4:	mov	r2, #5
   138f8:	ldr	r1, [pc, #604]	; 13b5c <__assert_fail@plt+0x2c8c>
   138fc:	mov	r0, #0
   13900:	bl	10d14 <dcgettext@plt>
   13904:	ldr	r3, [r4, #8]
   13908:	mov	r1, #1
   1390c:	str	r3, [sp, #52]	; 0x34
   13910:	ldr	r3, [r4, #4]
   13914:	str	r3, [sp, #48]	; 0x30
   13918:	ldr	r3, [r4]
   1391c:	mov	r2, r0
   13920:	mov	r0, r5
   13924:	add	sp, sp, #32
   13928:	pop	{r4, r5, r6, lr}
   1392c:	b	10e28 <__fprintf_chk@plt>
   13930:	mov	r2, #5
   13934:	ldr	r1, [pc, #548]	; 13b60 <__assert_fail@plt+0x2c90>
   13938:	mov	r0, #0
   1393c:	bl	10d14 <dcgettext@plt>
   13940:	ldr	r3, [r4, #12]
   13944:	mov	r1, #1
   13948:	str	r3, [sp, #8]
   1394c:	ldr	r3, [r4, #8]
   13950:	str	r3, [sp, #4]
   13954:	ldr	r3, [r4, #4]
   13958:	str	r3, [sp]
   1395c:	ldr	r3, [r4]
   13960:	mov	r2, r0
   13964:	mov	r0, r5
   13968:	bl	10e28 <__fprintf_chk@plt>
   1396c:	add	sp, sp, #32
   13970:	pop	{r4, r5, r6, pc}
   13974:	mov	r2, #5
   13978:	ldr	r1, [pc, #484]	; 13b64 <__assert_fail@plt+0x2c94>
   1397c:	mov	r0, #0
   13980:	bl	10d14 <dcgettext@plt>
   13984:	ldr	r3, [r4, #16]
   13988:	mov	r1, #1
   1398c:	str	r3, [sp, #12]
   13990:	ldr	r3, [r4, #12]
   13994:	str	r3, [sp, #8]
   13998:	ldr	r3, [r4, #8]
   1399c:	str	r3, [sp, #4]
   139a0:	ldr	r3, [r4, #4]
   139a4:	str	r3, [sp]
   139a8:	ldr	r3, [r4]
   139ac:	mov	r2, r0
   139b0:	mov	r0, r5
   139b4:	bl	10e28 <__fprintf_chk@plt>
   139b8:	b	1396c <__assert_fail@plt+0x2a9c>
   139bc:	mov	r2, #5
   139c0:	ldr	r1, [pc, #416]	; 13b68 <__assert_fail@plt+0x2c98>
   139c4:	mov	r0, #0
   139c8:	bl	10d14 <dcgettext@plt>
   139cc:	ldr	r3, [r4, #20]
   139d0:	mov	r1, #1
   139d4:	str	r3, [sp, #16]
   139d8:	ldr	r3, [r4, #16]
   139dc:	str	r3, [sp, #12]
   139e0:	ldr	r3, [r4, #12]
   139e4:	str	r3, [sp, #8]
   139e8:	ldr	r3, [r4, #8]
   139ec:	str	r3, [sp, #4]
   139f0:	ldr	r3, [r4, #4]
   139f4:	str	r3, [sp]
   139f8:	ldr	r3, [r4]
   139fc:	mov	r2, r0
   13a00:	mov	r0, r5
   13a04:	bl	10e28 <__fprintf_chk@plt>
   13a08:	b	1396c <__assert_fail@plt+0x2a9c>
   13a0c:	mov	r2, #5
   13a10:	ldr	r1, [pc, #340]	; 13b6c <__assert_fail@plt+0x2c9c>
   13a14:	mov	r0, #0
   13a18:	bl	10d14 <dcgettext@plt>
   13a1c:	ldr	r3, [r4, #24]
   13a20:	mov	r1, #1
   13a24:	str	r3, [sp, #20]
   13a28:	ldr	r3, [r4, #20]
   13a2c:	str	r3, [sp, #16]
   13a30:	ldr	r3, [r4, #16]
   13a34:	str	r3, [sp, #12]
   13a38:	ldr	r3, [r4, #12]
   13a3c:	str	r3, [sp, #8]
   13a40:	ldr	r3, [r4, #8]
   13a44:	str	r3, [sp, #4]
   13a48:	ldr	r3, [r4, #4]
   13a4c:	str	r3, [sp]
   13a50:	ldr	r3, [r4]
   13a54:	mov	r2, r0
   13a58:	mov	r0, r5
   13a5c:	bl	10e28 <__fprintf_chk@plt>
   13a60:	b	1396c <__assert_fail@plt+0x2a9c>
   13a64:	mov	r2, #5
   13a68:	ldr	r1, [pc, #256]	; 13b70 <__assert_fail@plt+0x2ca0>
   13a6c:	mov	r0, #0
   13a70:	bl	10d14 <dcgettext@plt>
   13a74:	ldr	r3, [r4, #28]
   13a78:	mov	r1, #1
   13a7c:	str	r3, [sp, #24]
   13a80:	ldr	r3, [r4, #24]
   13a84:	str	r3, [sp, #20]
   13a88:	ldr	r3, [r4, #20]
   13a8c:	str	r3, [sp, #16]
   13a90:	ldr	r3, [r4, #16]
   13a94:	str	r3, [sp, #12]
   13a98:	ldr	r3, [r4, #12]
   13a9c:	str	r3, [sp, #8]
   13aa0:	ldr	r3, [r4, #8]
   13aa4:	str	r3, [sp, #4]
   13aa8:	ldr	r3, [r4, #4]
   13aac:	str	r3, [sp]
   13ab0:	ldr	r3, [r4]
   13ab4:	mov	r2, r0
   13ab8:	mov	r0, r5
   13abc:	bl	10e28 <__fprintf_chk@plt>
   13ac0:	b	1396c <__assert_fail@plt+0x2a9c>
   13ac4:	ldr	r1, [pc, #168]	; 13b74 <__assert_fail@plt+0x2ca4>
   13ac8:	mov	r2, #5
   13acc:	mov	r0, #0
   13ad0:	bl	10d14 <dcgettext@plt>
   13ad4:	ldr	r3, [r4, #32]
   13ad8:	mov	r1, #1
   13adc:	str	r3, [sp, #28]
   13ae0:	ldr	r3, [r4, #28]
   13ae4:	str	r3, [sp, #24]
   13ae8:	ldr	r3, [r4, #24]
   13aec:	str	r3, [sp, #20]
   13af0:	ldr	r3, [r4, #20]
   13af4:	str	r3, [sp, #16]
   13af8:	ldr	r3, [r4, #16]
   13afc:	str	r3, [sp, #12]
   13b00:	ldr	r3, [r4, #12]
   13b04:	str	r3, [sp, #8]
   13b08:	ldr	r3, [r4, #8]
   13b0c:	str	r3, [sp, #4]
   13b10:	ldr	r3, [r4, #4]
   13b14:	str	r3, [sp]
   13b18:	ldr	r3, [r4]
   13b1c:	mov	r2, r0
   13b20:	mov	r0, r5
   13b24:	bl	10e28 <__fprintf_chk@plt>
   13b28:	b	1396c <__assert_fail@plt+0x2a9c>
   13b2c:	mov	r2, #5
   13b30:	ldr	r1, [pc, #64]	; 13b78 <__assert_fail@plt+0x2ca8>
   13b34:	b	13acc <__assert_fail@plt+0x2bfc>
   13b38:	andeq	r5, r1, pc, ror #6
   13b3c:	andeq	r5, r1, r2, lsl #7
   13b40:	andeq	r0, r0, r6, ror #15
   13b44:	andeq	r5, r1, r0, asr r6
   13b48:	andeq	r5, r1, r6, lsl #7
   13b4c:	andeq	r5, r1, r1, lsr r4
   13b50:	andeq	r5, r1, fp, ror r3
   13b54:	andeq	r5, r1, r3, asr r4
   13b58:	andeq	r5, r1, r3, ror #8
   13b5c:	andeq	r5, r1, sl, ror r4
   13b60:	muleq	r1, r6, r4
   13b64:			; <UNDEFINED> instruction: 0x000154b6
   13b68:	ldrdeq	r5, [r1], -sl
   13b6c:	andeq	r5, r1, r2, lsl #10
   13b70:	andeq	r5, r1, lr, lsr #10
   13b74:	andeq	r5, r1, lr, asr r5
   13b78:	muleq	r1, r2, r5
   13b7c:	push	{r0, r1, r4, lr}
   13b80:	mov	ip, #0
   13b84:	ldr	lr, [sp, #16]
   13b88:	ldr	r4, [lr, ip, lsl #2]
   13b8c:	cmp	r4, #0
   13b90:	bne	13ba8 <__assert_fail@plt+0x2cd8>
   13b94:	str	ip, [sp, #4]
   13b98:	str	lr, [sp]
   13b9c:	bl	137b0 <__assert_fail@plt+0x28e0>
   13ba0:	add	sp, sp, #8
   13ba4:	pop	{r4, pc}
   13ba8:	add	ip, ip, #1
   13bac:	b	13b88 <__assert_fail@plt+0x2cb8>
   13bb0:	push	{r4, r5, lr}
   13bb4:	sub	sp, sp, #52	; 0x34
   13bb8:	mov	ip, #0
   13bbc:	ldr	r5, [sp, #64]	; 0x40
   13bc0:	add	lr, sp, #8
   13bc4:	ldr	r4, [r5, ip, lsl #2]
   13bc8:	cmp	r4, #0
   13bcc:	str	r4, [lr, ip, lsl #2]
   13bd0:	beq	13be0 <__assert_fail@plt+0x2d10>
   13bd4:	add	ip, ip, #1
   13bd8:	cmp	ip, #10
   13bdc:	bne	13bc4 <__assert_fail@plt+0x2cf4>
   13be0:	str	ip, [sp, #4]
   13be4:	str	lr, [sp]
   13be8:	bl	137b0 <__assert_fail@plt+0x28e0>
   13bec:	add	sp, sp, #52	; 0x34
   13bf0:	pop	{r4, r5, pc}
   13bf4:	push	{r3}		; (str r3, [sp, #-4]!)
   13bf8:	push	{r0, r1, r2, r3, lr}
   13bfc:	add	r3, sp, #24
   13c00:	str	r3, [sp, #12]
   13c04:	str	r3, [sp]
   13c08:	ldr	r3, [sp, #20]
   13c0c:	bl	13bb0 <__assert_fail@plt+0x2ce0>
   13c10:	add	sp, sp, #16
   13c14:	pop	{lr}		; (ldr lr, [sp], #4)
   13c18:	add	sp, sp, #4
   13c1c:	bx	lr
   13c20:	ldr	r3, [pc, #116]	; 13c9c <__assert_fail@plt+0x2dcc>
   13c24:	push	{r4, lr}
   13c28:	mov	r0, #10
   13c2c:	ldr	r1, [r3]
   13c30:	bl	10cfc <fputc_unlocked@plt>
   13c34:	mov	r2, #5
   13c38:	ldr	r1, [pc, #96]	; 13ca0 <__assert_fail@plt+0x2dd0>
   13c3c:	mov	r0, #0
   13c40:	bl	10d14 <dcgettext@plt>
   13c44:	ldr	r2, [pc, #88]	; 13ca4 <__assert_fail@plt+0x2dd4>
   13c48:	mov	r1, r0
   13c4c:	mov	r0, #1
   13c50:	bl	10e10 <__printf_chk@plt>
   13c54:	mov	r2, #5
   13c58:	ldr	r1, [pc, #72]	; 13ca8 <__assert_fail@plt+0x2dd8>
   13c5c:	mov	r0, #0
   13c60:	bl	10d14 <dcgettext@plt>
   13c64:	ldr	r3, [pc, #64]	; 13cac <__assert_fail@plt+0x2ddc>
   13c68:	ldr	r2, [pc, #64]	; 13cb0 <__assert_fail@plt+0x2de0>
   13c6c:	mov	r1, r0
   13c70:	mov	r0, #1
   13c74:	bl	10e10 <__printf_chk@plt>
   13c78:	mov	r2, #5
   13c7c:	ldr	r1, [pc, #48]	; 13cb4 <__assert_fail@plt+0x2de4>
   13c80:	mov	r0, #0
   13c84:	bl	10d14 <dcgettext@plt>
   13c88:	ldr	r2, [pc, #40]	; 13cb8 <__assert_fail@plt+0x2de8>
   13c8c:	pop	{r4, lr}
   13c90:	mov	r1, r0
   13c94:	mov	r0, #1
   13c98:	b	10e10 <__printf_chk@plt>
   13c9c:	andeq	r6, r2, r4, asr r1
   13ca0:	andeq	r5, r1, lr, asr #11
   13ca4:	andeq	r5, r1, r2, ror #11
   13ca8:	strdeq	r5, [r1], -r8
   13cac:	andeq	r4, r1, r4, lsl #27
   13cb0:	andeq	r4, r1, ip, lsr #27
   13cb4:	andeq	r5, r1, ip, lsl #12
   13cb8:	andeq	r5, r1, r3, lsr r6
   13cbc:	push	{r4, lr}
   13cc0:	bl	141d8 <__assert_fail@plt+0x3308>
   13cc4:	cmp	r0, #0
   13cc8:	popne	{r4, pc}
   13ccc:	bl	14150 <__assert_fail@plt+0x3280>
   13cd0:	push	{r4, lr}
   13cd4:	bl	141d8 <__assert_fail@plt+0x3308>
   13cd8:	cmp	r0, #0
   13cdc:	popne	{r4, pc}
   13ce0:	bl	14150 <__assert_fail@plt+0x3280>
   13ce4:	b	13cbc <__assert_fail@plt+0x2dec>
   13ce8:	push	{r4, r5, r6, lr}
   13cec:	mov	r5, r0
   13cf0:	mov	r4, r1
   13cf4:	bl	14218 <__assert_fail@plt+0x3348>
   13cf8:	cmp	r0, #0
   13cfc:	popne	{r4, r5, r6, pc}
   13d00:	adds	r4, r4, #0
   13d04:	movne	r4, #1
   13d08:	cmp	r5, #0
   13d0c:	orreq	r4, r4, #1
   13d10:	cmp	r4, #0
   13d14:	popeq	{r4, r5, r6, pc}
   13d18:	bl	14150 <__assert_fail@plt+0x3280>
   13d1c:	push	{r4, lr}
   13d20:	cmp	r1, #0
   13d24:	orreq	r1, r1, #1
   13d28:	bl	14218 <__assert_fail@plt+0x3348>
   13d2c:	cmp	r0, #0
   13d30:	popne	{r4, pc}
   13d34:	bl	14150 <__assert_fail@plt+0x3280>
   13d38:	push	{r4, r5, r6, lr}
   13d3c:	mov	r6, r0
   13d40:	mov	r5, r1
   13d44:	mov	r4, r2
   13d48:	bl	14368 <__assert_fail@plt+0x3498>
   13d4c:	cmp	r0, #0
   13d50:	popne	{r4, r5, r6, pc}
   13d54:	cmp	r6, #0
   13d58:	beq	13d68 <__assert_fail@plt+0x2e98>
   13d5c:	cmp	r5, #0
   13d60:	cmpne	r4, #0
   13d64:	popeq	{r4, r5, r6, pc}
   13d68:	bl	14150 <__assert_fail@plt+0x3280>
   13d6c:	b	13d38 <__assert_fail@plt+0x2e68>
   13d70:	cmp	r2, #0
   13d74:	cmpne	r1, #0
   13d78:	moveq	r2, #1
   13d7c:	moveq	r1, r2
   13d80:	push	{r4, lr}
   13d84:	bl	14368 <__assert_fail@plt+0x3498>
   13d88:	cmp	r0, #0
   13d8c:	popne	{r4, pc}
   13d90:	bl	14150 <__assert_fail@plt+0x3280>
   13d94:	mov	r2, r1
   13d98:	mov	r1, r0
   13d9c:	mov	r0, #0
   13da0:	b	13d38 <__assert_fail@plt+0x2e68>
   13da4:	mov	r2, r1
   13da8:	mov	r1, r0
   13dac:	mov	r0, #0
   13db0:	b	13d70 <__assert_fail@plt+0x2ea0>
   13db4:	push	{r4, r5, r6, r7, r8, lr}
   13db8:	subs	r7, r0, #0
   13dbc:	mov	r5, r1
   13dc0:	mov	r6, r2
   13dc4:	ldr	r4, [r1]
   13dc8:	bne	13e04 <__assert_fail@plt+0x2f34>
   13dcc:	cmp	r4, #0
   13dd0:	bne	13dec <__assert_fail@plt+0x2f1c>
   13dd4:	mov	r1, r2
   13dd8:	mov	r0, #64	; 0x40
   13ddc:	bl	14494 <__assert_fail@plt+0x35c4>
   13de0:	cmp	r0, #0
   13de4:	movne	r4, r0
   13de8:	addeq	r4, r0, #1
   13dec:	mov	r2, r6
   13df0:	mov	r1, r4
   13df4:	mov	r0, r7
   13df8:	bl	13d38 <__assert_fail@plt+0x2e68>
   13dfc:	str	r4, [r5]
   13e00:	pop	{r4, r5, r6, r7, r8, pc}
   13e04:	lsr	r2, r4, #1
   13e08:	add	r3, r2, #1
   13e0c:	mvn	r3, r3
   13e10:	cmp	r4, r3
   13e14:	addls	r4, r4, #1
   13e18:	addls	r4, r4, r2
   13e1c:	bls	13dec <__assert_fail@plt+0x2f1c>
   13e20:	bl	14150 <__assert_fail@plt+0x3280>
   13e24:	mov	r2, #1
   13e28:	b	13db4 <__assert_fail@plt+0x2ee4>
   13e2c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e30:	mov	sl, r0
   13e34:	ldr	r8, [r1]
   13e38:	mov	fp, r1
   13e3c:	mov	r5, r2
   13e40:	asrs	r4, r8, #1
   13e44:	mov	r9, r3
   13e48:	ldr	r7, [sp, #48]	; 0x30
   13e4c:	bpl	13ee8 <__assert_fail@plt+0x3018>
   13e50:	rsb	r2, r4, #-2147483648	; 0x80000000
   13e54:	cmp	r8, r2
   13e58:	movge	r2, #0
   13e5c:	movlt	r2, #1
   13e60:	mvn	r3, r9
   13e64:	cmp	r2, #0
   13e68:	lsr	r3, r3, #31
   13e6c:	addeq	r4, r4, r8
   13e70:	mvnne	r4, #-2147483648	; 0x80000000
   13e74:	mov	r0, r3
   13e78:	cmp	r9, r4
   13e7c:	movge	r0, #0
   13e80:	andlt	r0, r0, #1
   13e84:	cmp	r0, #0
   13e88:	str	r3, [sp, #4]
   13e8c:	bne	1405c <__assert_fail@plt+0x318c>
   13e90:	cmp	r7, #0
   13e94:	bge	13fa8 <__assert_fail@plt+0x30d8>
   13e98:	cmp	r4, #0
   13e9c:	bge	13f00 <__assert_fail@plt+0x3030>
   13ea0:	mov	r1, r7
   13ea4:	mvn	r0, #-2147483648	; 0x80000000
   13ea8:	bl	146a0 <__assert_fail@plt+0x37d0>
   13eac:	cmp	r0, r4
   13eb0:	movle	r0, #0
   13eb4:	movgt	r0, #1
   13eb8:	cmp	r0, #0
   13ebc:	mvnne	r6, #-2147483648	; 0x80000000
   13ec0:	beq	13f10 <__assert_fail@plt+0x3040>
   13ec4:	mov	r1, r7
   13ec8:	mov	r0, r6
   13ecc:	bl	146a0 <__assert_fail@plt+0x37d0>
   13ed0:	mov	r1, r7
   13ed4:	mov	r4, r0
   13ed8:	mov	r0, r6
   13edc:	bl	148c0 <__assert_fail@plt+0x39f0>
   13ee0:	sub	r1, r6, r1
   13ee4:	b	13f20 <__assert_fail@plt+0x3050>
   13ee8:	mvn	r2, #-2147483648	; 0x80000000
   13eec:	sub	r2, r2, r4
   13ef0:	cmp	r8, r2
   13ef4:	movle	r2, #0
   13ef8:	movgt	r2, #1
   13efc:	b	13e60 <__assert_fail@plt+0x2f90>
   13f00:	cmn	r7, #1
   13f04:	movne	r1, r7
   13f08:	movne	r0, #-2147483648	; 0x80000000
   13f0c:	bne	14074 <__assert_fail@plt+0x31a4>
   13f10:	mul	r1, r7, r4
   13f14:	cmp	r1, #63	; 0x3f
   13f18:	movle	r6, #64	; 0x40
   13f1c:	ble	13ec4 <__assert_fail@plt+0x2ff4>
   13f20:	cmp	sl, #0
   13f24:	sub	r2, r4, r8
   13f28:	streq	sl, [fp]
   13f2c:	cmp	r2, r5
   13f30:	bge	14004 <__assert_fail@plt+0x3134>
   13f34:	cmp	r5, #0
   13f38:	bge	13fd0 <__assert_fail@plt+0x3100>
   13f3c:	rsb	r2, r5, #-2147483648	; 0x80000000
   13f40:	cmp	r8, r2
   13f44:	movge	r2, #0
   13f48:	movlt	r2, #1
   13f4c:	cmp	r2, #0
   13f50:	bne	13fa4 <__assert_fail@plt+0x30d4>
   13f54:	ldr	r0, [sp, #4]
   13f58:	add	r5, r8, r5
   13f5c:	cmp	r9, r5
   13f60:	movge	r0, #0
   13f64:	andlt	r0, r0, #1
   13f68:	cmp	r0, #0
   13f6c:	mov	r4, r5
   13f70:	bne	13fa4 <__assert_fail@plt+0x30d4>
   13f74:	cmp	r7, #0
   13f78:	bge	14018 <__assert_fail@plt+0x3148>
   13f7c:	cmp	r5, #0
   13f80:	bge	13ff0 <__assert_fail@plt+0x3120>
   13f84:	mov	r1, r7
   13f88:	mvn	r0, #-2147483648	; 0x80000000
   13f8c:	bl	146a0 <__assert_fail@plt+0x37d0>
   13f90:	cmp	r5, r0
   13f94:	movge	r0, #0
   13f98:	movlt	r0, #1
   13f9c:	cmp	r0, #0
   13fa0:	beq	14000 <__assert_fail@plt+0x3130>
   13fa4:	bl	14150 <__assert_fail@plt+0x3280>
   13fa8:	beq	13f10 <__assert_fail@plt+0x3040>
   13fac:	cmp	r4, #0
   13fb0:	bge	1406c <__assert_fail@plt+0x319c>
   13fb4:	cmn	r4, #1
   13fb8:	beq	13f10 <__assert_fail@plt+0x3040>
   13fbc:	mov	r1, r4
   13fc0:	mov	r0, #-2147483648	; 0x80000000
   13fc4:	bl	146a0 <__assert_fail@plt+0x37d0>
   13fc8:	cmp	r7, r0
   13fcc:	b	13eb0 <__assert_fail@plt+0x2fe0>
   13fd0:	cmp	r8, #0
   13fd4:	blt	13f54 <__assert_fail@plt+0x3084>
   13fd8:	mvn	r2, #-2147483648	; 0x80000000
   13fdc:	sub	r2, r2, r5
   13fe0:	cmp	r8, r2
   13fe4:	movle	r2, #0
   13fe8:	movgt	r2, #1
   13fec:	b	13f4c <__assert_fail@plt+0x307c>
   13ff0:	cmn	r7, #1
   13ff4:	movne	r1, r7
   13ff8:	movne	r0, #-2147483648	; 0x80000000
   13ffc:	bne	14050 <__assert_fail@plt+0x3180>
   14000:	mul	r1, r5, r7
   14004:	mov	r0, sl
   14008:	bl	13ce8 <__assert_fail@plt+0x2e18>
   1400c:	str	r4, [fp]
   14010:	add	sp, sp, #12
   14014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14018:	beq	14000 <__assert_fail@plt+0x3130>
   1401c:	cmp	r5, #0
   14020:	movge	r1, r7
   14024:	mvnge	r0, #-2147483648	; 0x80000000
   14028:	bge	14050 <__assert_fail@plt+0x3180>
   1402c:	cmn	r5, #1
   14030:	beq	14000 <__assert_fail@plt+0x3130>
   14034:	mov	r1, r5
   14038:	mov	r0, #-2147483648	; 0x80000000
   1403c:	bl	146a0 <__assert_fail@plt+0x37d0>
   14040:	cmp	r7, r0
   14044:	movle	r0, #0
   14048:	movgt	r0, #1
   1404c:	b	13f9c <__assert_fail@plt+0x30cc>
   14050:	bl	146a0 <__assert_fail@plt+0x37d0>
   14054:	cmp	r5, r0
   14058:	b	14044 <__assert_fail@plt+0x3174>
   1405c:	cmp	r7, #0
   14060:	mov	r4, r9
   14064:	blt	13f00 <__assert_fail@plt+0x3030>
   14068:	beq	13f10 <__assert_fail@plt+0x3040>
   1406c:	mov	r1, r7
   14070:	mvn	r0, #-2147483648	; 0x80000000
   14074:	bl	146a0 <__assert_fail@plt+0x37d0>
   14078:	cmp	r0, r4
   1407c:	movge	r0, #0
   14080:	movlt	r0, #1
   14084:	b	13eb8 <__assert_fail@plt+0x2fe8>
   14088:	push	{r4, lr}
   1408c:	bl	14190 <__assert_fail@plt+0x32c0>
   14090:	cmp	r0, #0
   14094:	popne	{r4, pc}
   14098:	bl	14150 <__assert_fail@plt+0x3280>
   1409c:	mov	r1, #1
   140a0:	b	14088 <__assert_fail@plt+0x31b8>
   140a4:	push	{r4, lr}
   140a8:	bl	14190 <__assert_fail@plt+0x32c0>
   140ac:	cmp	r0, #0
   140b0:	popne	{r4, pc}
   140b4:	bl	14150 <__assert_fail@plt+0x3280>
   140b8:	mov	r1, #1
   140bc:	b	140a4 <__assert_fail@plt+0x31d4>
   140c0:	push	{r4, r5, r6, lr}
   140c4:	mov	r4, r1
   140c8:	mov	r5, r0
   140cc:	mov	r0, r1
   140d0:	bl	13cbc <__assert_fail@plt+0x2dec>
   140d4:	mov	r2, r4
   140d8:	mov	r1, r5
   140dc:	pop	{r4, r5, r6, lr}
   140e0:	b	10cd8 <memcpy@plt>
   140e4:	push	{r4, r5, r6, lr}
   140e8:	mov	r4, r1
   140ec:	mov	r5, r0
   140f0:	mov	r0, r1
   140f4:	bl	13cd0 <__assert_fail@plt+0x2e00>
   140f8:	mov	r2, r4
   140fc:	mov	r1, r5
   14100:	pop	{r4, r5, r6, lr}
   14104:	b	10cd8 <memcpy@plt>
   14108:	push	{r4, r5, r6, lr}
   1410c:	mov	r5, r0
   14110:	add	r0, r1, #1
   14114:	mov	r4, r1
   14118:	bl	13cd0 <__assert_fail@plt+0x2e00>
   1411c:	mov	r2, #0
   14120:	mov	r1, r5
   14124:	strb	r2, [r0, r4]
   14128:	mov	r2, r4
   1412c:	pop	{r4, r5, r6, lr}
   14130:	b	10cd8 <memcpy@plt>
   14134:	push	{r4, lr}
   14138:	mov	r4, r0
   1413c:	bl	10de0 <strlen@plt>
   14140:	add	r1, r0, #1
   14144:	mov	r0, r4
   14148:	pop	{r4, lr}
   1414c:	b	140c0 <__assert_fail@plt+0x31f0>
   14150:	ldr	r3, [pc, #44]	; 14184 <__assert_fail@plt+0x32b4>
   14154:	push	{r4, lr}
   14158:	mov	r2, #5
   1415c:	ldr	r1, [pc, #36]	; 14188 <__assert_fail@plt+0x32b8>
   14160:	mov	r0, #0
   14164:	ldr	r4, [r3]
   14168:	bl	10d14 <dcgettext@plt>
   1416c:	ldr	r2, [pc, #24]	; 1418c <__assert_fail@plt+0x32bc>
   14170:	mov	r1, #0
   14174:	mov	r3, r0
   14178:	mov	r0, r4
   1417c:	bl	10d80 <error@plt>
   14180:	bl	10eac <abort@plt>
   14184:	strdeq	r6, [r2], -r0
   14188:	andeq	r5, r1, pc, ror r6
   1418c:	andeq	r5, r1, r0, lsl r0
   14190:	cmp	r1, #0
   14194:	cmpne	r0, #0
   14198:	moveq	r1, #1
   1419c:	moveq	r0, r1
   141a0:	umull	r2, r3, r0, r1
   141a4:	adds	r3, r3, #0
   141a8:	movne	r3, #1
   141ac:	cmp	r2, #0
   141b0:	blt	141c0 <__assert_fail@plt+0x32f0>
   141b4:	cmp	r3, #0
   141b8:	bne	141c0 <__assert_fail@plt+0x32f0>
   141bc:	b	10c78 <calloc@plt>
   141c0:	push	{r4, lr}
   141c4:	bl	10dec <__errno_location@plt>
   141c8:	mov	r3, #12
   141cc:	str	r3, [r0]
   141d0:	mov	r0, #0
   141d4:	pop	{r4, pc}
   141d8:	cmp	r0, #0
   141dc:	mov	r3, #0
   141e0:	moveq	r0, #1
   141e4:	adds	r3, r3, #0
   141e8:	movne	r3, #1
   141ec:	cmp	r0, #0
   141f0:	blt	14200 <__assert_fail@plt+0x3330>
   141f4:	cmp	r3, #0
   141f8:	bne	14200 <__assert_fail@plt+0x3330>
   141fc:	b	10d8c <malloc@plt>
   14200:	push	{r4, lr}
   14204:	bl	10dec <__errno_location@plt>
   14208:	mov	r3, #12
   1420c:	str	r3, [r0]
   14210:	mov	r0, #0
   14214:	pop	{r4, pc}
   14218:	cmp	r0, #0
   1421c:	push	{r4, lr}
   14220:	mov	r4, r1
   14224:	bne	14234 <__assert_fail@plt+0x3364>
   14228:	mov	r0, r1
   1422c:	pop	{r4, lr}
   14230:	b	141d8 <__assert_fail@plt+0x3308>
   14234:	cmp	r1, #0
   14238:	bne	14248 <__assert_fail@plt+0x3378>
   1423c:	bl	1208c <__assert_fail@plt+0x11bc>
   14240:	mov	r0, #0
   14244:	pop	{r4, pc}
   14248:	cmp	r1, #0
   1424c:	blt	1425c <__assert_fail@plt+0x338c>
   14250:	mov	r3, #0
   14254:	cmp	r3, r3
   14258:	beq	1426c <__assert_fail@plt+0x339c>
   1425c:	bl	10dec <__errno_location@plt>
   14260:	mov	r3, #12
   14264:	str	r3, [r0]
   14268:	b	14240 <__assert_fail@plt+0x3370>
   1426c:	pop	{r4, lr}
   14270:	b	10d20 <realloc@plt>
   14274:	push	{r4, r5, r6, lr}
   14278:	mov	r4, r0
   1427c:	bl	10d5c <__fpending@plt>
   14280:	mov	r5, r0
   14284:	mov	r0, r4
   14288:	bl	10d68 <ferror_unlocked@plt>
   1428c:	mov	r6, r0
   14290:	mov	r0, r4
   14294:	bl	11f94 <__assert_fail@plt+0x10c4>
   14298:	cmp	r6, #0
   1429c:	mov	r4, r0
   142a0:	bne	142cc <__assert_fail@plt+0x33fc>
   142a4:	cmp	r0, #0
   142a8:	beq	142c4 <__assert_fail@plt+0x33f4>
   142ac:	cmp	r5, #0
   142b0:	bne	142dc <__assert_fail@plt+0x340c>
   142b4:	bl	10dec <__errno_location@plt>
   142b8:	ldr	r4, [r0]
   142bc:	subs	r4, r4, #9
   142c0:	mvnne	r4, #0
   142c4:	mov	r0, r4
   142c8:	pop	{r4, r5, r6, pc}
   142cc:	cmp	r0, #0
   142d0:	bne	142dc <__assert_fail@plt+0x340c>
   142d4:	bl	10dec <__errno_location@plt>
   142d8:	str	r4, [r0]
   142dc:	mvn	r4, #0
   142e0:	b	142c4 <__assert_fail@plt+0x33f4>
   142e4:	push	{r4, lr}
   142e8:	mov	r0, #14
   142ec:	bl	10e64 <nl_langinfo@plt>
   142f0:	ldr	r3, [pc, #24]	; 14310 <__assert_fail@plt+0x3440>
   142f4:	cmp	r0, #0
   142f8:	moveq	r0, r3
   142fc:	ldr	r3, [pc, #16]	; 14314 <__assert_fail@plt+0x3444>
   14300:	ldrb	r2, [r0]
   14304:	cmp	r2, #0
   14308:	moveq	r0, r3
   1430c:	pop	{r4, pc}
   14310:	andeq	r4, r1, r2, asr lr
   14314:	muleq	r1, r0, r6
   14318:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1431c:	subs	r5, r0, #0
   14320:	addeq	r5, sp, #4
   14324:	mov	r0, r5
   14328:	mov	r7, r2
   1432c:	mov	r6, r1
   14330:	bl	10d74 <mbrtowc@plt>
   14334:	cmp	r7, #0
   14338:	cmnne	r0, #3
   1433c:	mov	r4, r0
   14340:	bls	1435c <__assert_fail@plt+0x348c>
   14344:	mov	r0, #0
   14348:	bl	143b4 <__assert_fail@plt+0x34e4>
   1434c:	cmp	r0, #0
   14350:	moveq	r4, #1
   14354:	ldrbeq	r3, [r6]
   14358:	streq	r3, [r5]
   1435c:	mov	r0, r4
   14360:	add	sp, sp, #12
   14364:	pop	{r4, r5, r6, r7, pc}
   14368:	push	{r4, r5, r6, lr}
   1436c:	subs	r4, r2, #0
   14370:	mov	r6, r0
   14374:	mov	r5, r1
   14378:	beq	14390 <__assert_fail@plt+0x34c0>
   1437c:	mov	r1, r4
   14380:	mvn	r0, #0
   14384:	bl	14494 <__assert_fail@plt+0x35c4>
   14388:	cmp	r0, r5
   1438c:	bcc	143a0 <__assert_fail@plt+0x34d0>
   14390:	mul	r1, r5, r4
   14394:	mov	r0, r6
   14398:	pop	{r4, r5, r6, lr}
   1439c:	b	14218 <__assert_fail@plt+0x3348>
   143a0:	bl	10dec <__errno_location@plt>
   143a4:	mov	r3, #12
   143a8:	str	r3, [r0]
   143ac:	mov	r0, #0
   143b0:	pop	{r4, r5, r6, pc}
   143b4:	push	{lr}		; (str lr, [sp, #-4]!)
   143b8:	sub	sp, sp, #268	; 0x10c
   143bc:	ldr	r2, [pc, #64]	; 14404 <__assert_fail@plt+0x3534>
   143c0:	add	r1, sp, #4
   143c4:	bl	14410 <__assert_fail@plt+0x3540>
   143c8:	cmp	r0, #0
   143cc:	movne	r0, #0
   143d0:	bne	143fc <__assert_fail@plt+0x352c>
   143d4:	ldr	r1, [pc, #44]	; 14408 <__assert_fail@plt+0x3538>
   143d8:	add	r0, sp, #4
   143dc:	bl	10c9c <strcmp@plt>
   143e0:	cmp	r0, #0
   143e4:	beq	143fc <__assert_fail@plt+0x352c>
   143e8:	ldr	r1, [pc, #28]	; 1440c <__assert_fail@plt+0x353c>
   143ec:	add	r0, sp, #4
   143f0:	bl	10c9c <strcmp@plt>
   143f4:	adds	r0, r0, #0
   143f8:	movne	r0, #1
   143fc:	add	sp, sp, #268	; 0x10c
   14400:	pop	{pc}		; (ldr pc, [sp], #4)
   14404:	andeq	r0, r0, r1, lsl #2
   14408:	muleq	r1, r6, r6
   1440c:	muleq	r1, r8, r6
   14410:	push	{r4, r5, r6, lr}
   14414:	mov	r5, r1
   14418:	mov	r1, #0
   1441c:	mov	r4, r2
   14420:	bl	10e4c <setlocale@plt>
   14424:	subs	r6, r0, #0
   14428:	bne	1443c <__assert_fail@plt+0x356c>
   1442c:	cmp	r4, #0
   14430:	strbne	r6, [r5]
   14434:	mov	r0, #22
   14438:	pop	{r4, r5, r6, pc}
   1443c:	bl	10de0 <strlen@plt>
   14440:	cmp	r4, r0
   14444:	bls	14460 <__assert_fail@plt+0x3590>
   14448:	add	r2, r0, #1
   1444c:	mov	r1, r6
   14450:	mov	r0, r5
   14454:	bl	10cd8 <memcpy@plt>
   14458:	mov	r0, #0
   1445c:	pop	{r4, r5, r6, pc}
   14460:	cmp	r4, #0
   14464:	beq	14484 <__assert_fail@plt+0x35b4>
   14468:	sub	r4, r4, #1
   1446c:	mov	r2, r4
   14470:	mov	r1, r6
   14474:	mov	r0, r5
   14478:	bl	10cd8 <memcpy@plt>
   1447c:	mov	r3, #0
   14480:	strb	r3, [r5, r4]
   14484:	mov	r0, #34	; 0x22
   14488:	pop	{r4, r5, r6, pc}
   1448c:	mov	r1, #0
   14490:	b	10e4c <setlocale@plt>
   14494:	subs	r2, r1, #1
   14498:	bxeq	lr
   1449c:	bcc	14674 <__assert_fail@plt+0x37a4>
   144a0:	cmp	r0, r1
   144a4:	bls	14658 <__assert_fail@plt+0x3788>
   144a8:	tst	r1, r2
   144ac:	beq	14664 <__assert_fail@plt+0x3794>
   144b0:	clz	r3, r0
   144b4:	clz	r2, r1
   144b8:	sub	r3, r2, r3
   144bc:	rsbs	r3, r3, #31
   144c0:	addne	r3, r3, r3, lsl #1
   144c4:	mov	r2, #0
   144c8:	addne	pc, pc, r3, lsl #2
   144cc:	nop			; (mov r0, r0)
   144d0:	cmp	r0, r1, lsl #31
   144d4:	adc	r2, r2, r2
   144d8:	subcs	r0, r0, r1, lsl #31
   144dc:	cmp	r0, r1, lsl #30
   144e0:	adc	r2, r2, r2
   144e4:	subcs	r0, r0, r1, lsl #30
   144e8:	cmp	r0, r1, lsl #29
   144ec:	adc	r2, r2, r2
   144f0:	subcs	r0, r0, r1, lsl #29
   144f4:	cmp	r0, r1, lsl #28
   144f8:	adc	r2, r2, r2
   144fc:	subcs	r0, r0, r1, lsl #28
   14500:	cmp	r0, r1, lsl #27
   14504:	adc	r2, r2, r2
   14508:	subcs	r0, r0, r1, lsl #27
   1450c:	cmp	r0, r1, lsl #26
   14510:	adc	r2, r2, r2
   14514:	subcs	r0, r0, r1, lsl #26
   14518:	cmp	r0, r1, lsl #25
   1451c:	adc	r2, r2, r2
   14520:	subcs	r0, r0, r1, lsl #25
   14524:	cmp	r0, r1, lsl #24
   14528:	adc	r2, r2, r2
   1452c:	subcs	r0, r0, r1, lsl #24
   14530:	cmp	r0, r1, lsl #23
   14534:	adc	r2, r2, r2
   14538:	subcs	r0, r0, r1, lsl #23
   1453c:	cmp	r0, r1, lsl #22
   14540:	adc	r2, r2, r2
   14544:	subcs	r0, r0, r1, lsl #22
   14548:	cmp	r0, r1, lsl #21
   1454c:	adc	r2, r2, r2
   14550:	subcs	r0, r0, r1, lsl #21
   14554:	cmp	r0, r1, lsl #20
   14558:	adc	r2, r2, r2
   1455c:	subcs	r0, r0, r1, lsl #20
   14560:	cmp	r0, r1, lsl #19
   14564:	adc	r2, r2, r2
   14568:	subcs	r0, r0, r1, lsl #19
   1456c:	cmp	r0, r1, lsl #18
   14570:	adc	r2, r2, r2
   14574:	subcs	r0, r0, r1, lsl #18
   14578:	cmp	r0, r1, lsl #17
   1457c:	adc	r2, r2, r2
   14580:	subcs	r0, r0, r1, lsl #17
   14584:	cmp	r0, r1, lsl #16
   14588:	adc	r2, r2, r2
   1458c:	subcs	r0, r0, r1, lsl #16
   14590:	cmp	r0, r1, lsl #15
   14594:	adc	r2, r2, r2
   14598:	subcs	r0, r0, r1, lsl #15
   1459c:	cmp	r0, r1, lsl #14
   145a0:	adc	r2, r2, r2
   145a4:	subcs	r0, r0, r1, lsl #14
   145a8:	cmp	r0, r1, lsl #13
   145ac:	adc	r2, r2, r2
   145b0:	subcs	r0, r0, r1, lsl #13
   145b4:	cmp	r0, r1, lsl #12
   145b8:	adc	r2, r2, r2
   145bc:	subcs	r0, r0, r1, lsl #12
   145c0:	cmp	r0, r1, lsl #11
   145c4:	adc	r2, r2, r2
   145c8:	subcs	r0, r0, r1, lsl #11
   145cc:	cmp	r0, r1, lsl #10
   145d0:	adc	r2, r2, r2
   145d4:	subcs	r0, r0, r1, lsl #10
   145d8:	cmp	r0, r1, lsl #9
   145dc:	adc	r2, r2, r2
   145e0:	subcs	r0, r0, r1, lsl #9
   145e4:	cmp	r0, r1, lsl #8
   145e8:	adc	r2, r2, r2
   145ec:	subcs	r0, r0, r1, lsl #8
   145f0:	cmp	r0, r1, lsl #7
   145f4:	adc	r2, r2, r2
   145f8:	subcs	r0, r0, r1, lsl #7
   145fc:	cmp	r0, r1, lsl #6
   14600:	adc	r2, r2, r2
   14604:	subcs	r0, r0, r1, lsl #6
   14608:	cmp	r0, r1, lsl #5
   1460c:	adc	r2, r2, r2
   14610:	subcs	r0, r0, r1, lsl #5
   14614:	cmp	r0, r1, lsl #4
   14618:	adc	r2, r2, r2
   1461c:	subcs	r0, r0, r1, lsl #4
   14620:	cmp	r0, r1, lsl #3
   14624:	adc	r2, r2, r2
   14628:	subcs	r0, r0, r1, lsl #3
   1462c:	cmp	r0, r1, lsl #2
   14630:	adc	r2, r2, r2
   14634:	subcs	r0, r0, r1, lsl #2
   14638:	cmp	r0, r1, lsl #1
   1463c:	adc	r2, r2, r2
   14640:	subcs	r0, r0, r1, lsl #1
   14644:	cmp	r0, r1
   14648:	adc	r2, r2, r2
   1464c:	subcs	r0, r0, r1
   14650:	mov	r0, r2
   14654:	bx	lr
   14658:	moveq	r0, #1
   1465c:	movne	r0, #0
   14660:	bx	lr
   14664:	clz	r2, r1
   14668:	rsb	r2, r2, #31
   1466c:	lsr	r0, r0, r2
   14670:	bx	lr
   14674:	cmp	r0, #0
   14678:	mvnne	r0, #0
   1467c:	b	1491c <__assert_fail@plt+0x3a4c>
   14680:	cmp	r1, #0
   14684:	beq	14674 <__assert_fail@plt+0x37a4>
   14688:	push	{r0, r1, lr}
   1468c:	bl	14494 <__assert_fail@plt+0x35c4>
   14690:	pop	{r1, r2, lr}
   14694:	mul	r3, r2, r0
   14698:	sub	r1, r1, r3
   1469c:	bx	lr
   146a0:	cmp	r1, #0
   146a4:	beq	148b0 <__assert_fail@plt+0x39e0>
   146a8:	eor	ip, r0, r1
   146ac:	rsbmi	r1, r1, #0
   146b0:	subs	r2, r1, #1
   146b4:	beq	1487c <__assert_fail@plt+0x39ac>
   146b8:	movs	r3, r0
   146bc:	rsbmi	r3, r0, #0
   146c0:	cmp	r3, r1
   146c4:	bls	14888 <__assert_fail@plt+0x39b8>
   146c8:	tst	r1, r2
   146cc:	beq	14898 <__assert_fail@plt+0x39c8>
   146d0:	clz	r2, r3
   146d4:	clz	r0, r1
   146d8:	sub	r2, r0, r2
   146dc:	rsbs	r2, r2, #31
   146e0:	addne	r2, r2, r2, lsl #1
   146e4:	mov	r0, #0
   146e8:	addne	pc, pc, r2, lsl #2
   146ec:	nop			; (mov r0, r0)
   146f0:	cmp	r3, r1, lsl #31
   146f4:	adc	r0, r0, r0
   146f8:	subcs	r3, r3, r1, lsl #31
   146fc:	cmp	r3, r1, lsl #30
   14700:	adc	r0, r0, r0
   14704:	subcs	r3, r3, r1, lsl #30
   14708:	cmp	r3, r1, lsl #29
   1470c:	adc	r0, r0, r0
   14710:	subcs	r3, r3, r1, lsl #29
   14714:	cmp	r3, r1, lsl #28
   14718:	adc	r0, r0, r0
   1471c:	subcs	r3, r3, r1, lsl #28
   14720:	cmp	r3, r1, lsl #27
   14724:	adc	r0, r0, r0
   14728:	subcs	r3, r3, r1, lsl #27
   1472c:	cmp	r3, r1, lsl #26
   14730:	adc	r0, r0, r0
   14734:	subcs	r3, r3, r1, lsl #26
   14738:	cmp	r3, r1, lsl #25
   1473c:	adc	r0, r0, r0
   14740:	subcs	r3, r3, r1, lsl #25
   14744:	cmp	r3, r1, lsl #24
   14748:	adc	r0, r0, r0
   1474c:	subcs	r3, r3, r1, lsl #24
   14750:	cmp	r3, r1, lsl #23
   14754:	adc	r0, r0, r0
   14758:	subcs	r3, r3, r1, lsl #23
   1475c:	cmp	r3, r1, lsl #22
   14760:	adc	r0, r0, r0
   14764:	subcs	r3, r3, r1, lsl #22
   14768:	cmp	r3, r1, lsl #21
   1476c:	adc	r0, r0, r0
   14770:	subcs	r3, r3, r1, lsl #21
   14774:	cmp	r3, r1, lsl #20
   14778:	adc	r0, r0, r0
   1477c:	subcs	r3, r3, r1, lsl #20
   14780:	cmp	r3, r1, lsl #19
   14784:	adc	r0, r0, r0
   14788:	subcs	r3, r3, r1, lsl #19
   1478c:	cmp	r3, r1, lsl #18
   14790:	adc	r0, r0, r0
   14794:	subcs	r3, r3, r1, lsl #18
   14798:	cmp	r3, r1, lsl #17
   1479c:	adc	r0, r0, r0
   147a0:	subcs	r3, r3, r1, lsl #17
   147a4:	cmp	r3, r1, lsl #16
   147a8:	adc	r0, r0, r0
   147ac:	subcs	r3, r3, r1, lsl #16
   147b0:	cmp	r3, r1, lsl #15
   147b4:	adc	r0, r0, r0
   147b8:	subcs	r3, r3, r1, lsl #15
   147bc:	cmp	r3, r1, lsl #14
   147c0:	adc	r0, r0, r0
   147c4:	subcs	r3, r3, r1, lsl #14
   147c8:	cmp	r3, r1, lsl #13
   147cc:	adc	r0, r0, r0
   147d0:	subcs	r3, r3, r1, lsl #13
   147d4:	cmp	r3, r1, lsl #12
   147d8:	adc	r0, r0, r0
   147dc:	subcs	r3, r3, r1, lsl #12
   147e0:	cmp	r3, r1, lsl #11
   147e4:	adc	r0, r0, r0
   147e8:	subcs	r3, r3, r1, lsl #11
   147ec:	cmp	r3, r1, lsl #10
   147f0:	adc	r0, r0, r0
   147f4:	subcs	r3, r3, r1, lsl #10
   147f8:	cmp	r3, r1, lsl #9
   147fc:	adc	r0, r0, r0
   14800:	subcs	r3, r3, r1, lsl #9
   14804:	cmp	r3, r1, lsl #8
   14808:	adc	r0, r0, r0
   1480c:	subcs	r3, r3, r1, lsl #8
   14810:	cmp	r3, r1, lsl #7
   14814:	adc	r0, r0, r0
   14818:	subcs	r3, r3, r1, lsl #7
   1481c:	cmp	r3, r1, lsl #6
   14820:	adc	r0, r0, r0
   14824:	subcs	r3, r3, r1, lsl #6
   14828:	cmp	r3, r1, lsl #5
   1482c:	adc	r0, r0, r0
   14830:	subcs	r3, r3, r1, lsl #5
   14834:	cmp	r3, r1, lsl #4
   14838:	adc	r0, r0, r0
   1483c:	subcs	r3, r3, r1, lsl #4
   14840:	cmp	r3, r1, lsl #3
   14844:	adc	r0, r0, r0
   14848:	subcs	r3, r3, r1, lsl #3
   1484c:	cmp	r3, r1, lsl #2
   14850:	adc	r0, r0, r0
   14854:	subcs	r3, r3, r1, lsl #2
   14858:	cmp	r3, r1, lsl #1
   1485c:	adc	r0, r0, r0
   14860:	subcs	r3, r3, r1, lsl #1
   14864:	cmp	r3, r1
   14868:	adc	r0, r0, r0
   1486c:	subcs	r3, r3, r1
   14870:	cmp	ip, #0
   14874:	rsbmi	r0, r0, #0
   14878:	bx	lr
   1487c:	teq	ip, r0
   14880:	rsbmi	r0, r0, #0
   14884:	bx	lr
   14888:	movcc	r0, #0
   1488c:	asreq	r0, ip, #31
   14890:	orreq	r0, r0, #1
   14894:	bx	lr
   14898:	clz	r2, r1
   1489c:	rsb	r2, r2, #31
   148a0:	cmp	ip, #0
   148a4:	lsr	r0, r3, r2
   148a8:	rsbmi	r0, r0, #0
   148ac:	bx	lr
   148b0:	cmp	r0, #0
   148b4:	mvngt	r0, #-2147483648	; 0x80000000
   148b8:	movlt	r0, #-2147483648	; 0x80000000
   148bc:	b	1491c <__assert_fail@plt+0x3a4c>
   148c0:	cmp	r1, #0
   148c4:	beq	148b0 <__assert_fail@plt+0x39e0>
   148c8:	push	{r0, r1, lr}
   148cc:	bl	146a8 <__assert_fail@plt+0x37d8>
   148d0:	pop	{r1, r2, lr}
   148d4:	mul	r3, r2, r0
   148d8:	sub	r1, r1, r3
   148dc:	bx	lr
   148e0:	cmp	r3, #0
   148e4:	cmpeq	r2, #0
   148e8:	bne	14900 <__assert_fail@plt+0x3a30>
   148ec:	cmp	r1, #0
   148f0:	cmpeq	r0, #0
   148f4:	mvnne	r1, #0
   148f8:	mvnne	r0, #0
   148fc:	b	1491c <__assert_fail@plt+0x3a4c>
   14900:	sub	sp, sp, #8
   14904:	push	{sp, lr}
   14908:	bl	1492c <__assert_fail@plt+0x3a5c>
   1490c:	ldr	lr, [sp, #4]
   14910:	add	sp, sp, #8
   14914:	pop	{r2, r3}
   14918:	bx	lr
   1491c:	push	{r1, lr}
   14920:	mov	r0, #8
   14924:	bl	10c90 <raise@plt>
   14928:	pop	{r1, pc}
   1492c:	cmp	r1, r3
   14930:	push	{r4, r5, r6, r7, r8, r9, lr}
   14934:	cmpeq	r0, r2
   14938:	mov	r4, r0
   1493c:	mov	r5, r1
   14940:	ldr	r9, [sp, #28]
   14944:	movcc	r0, #0
   14948:	movcc	r1, #0
   1494c:	bcc	14a44 <__assert_fail@plt+0x3b74>
   14950:	cmp	r3, #0
   14954:	clzeq	ip, r2
   14958:	clzne	ip, r3
   1495c:	addeq	ip, ip, #32
   14960:	cmp	r5, #0
   14964:	clzeq	r1, r4
   14968:	addeq	r1, r1, #32
   1496c:	clzne	r1, r5
   14970:	sub	ip, ip, r1
   14974:	sub	lr, ip, #32
   14978:	lsl	r7, r3, ip
   1497c:	rsb	r8, ip, #32
   14980:	orr	r7, r7, r2, lsl lr
   14984:	orr	r7, r7, r2, lsr r8
   14988:	lsl	r6, r2, ip
   1498c:	cmp	r5, r7
   14990:	cmpeq	r4, r6
   14994:	movcc	r0, #0
   14998:	movcc	r1, #0
   1499c:	bcc	149b8 <__assert_fail@plt+0x3ae8>
   149a0:	mov	r3, #1
   149a4:	subs	r4, r4, r6
   149a8:	lsl	r1, r3, lr
   149ac:	lsl	r0, r3, ip
   149b0:	orr	r1, r1, r3, lsr r8
   149b4:	sbc	r5, r5, r7
   149b8:	cmp	ip, #0
   149bc:	beq	14a44 <__assert_fail@plt+0x3b74>
   149c0:	lsrs	r3, r7, #1
   149c4:	rrx	r2, r6
   149c8:	mov	r6, ip
   149cc:	b	149f0 <__assert_fail@plt+0x3b20>
   149d0:	subs	r4, r4, r2
   149d4:	sbc	r5, r5, r3
   149d8:	adds	r4, r4, r4
   149dc:	adc	r5, r5, r5
   149e0:	adds	r4, r4, #1
   149e4:	adc	r5, r5, #0
   149e8:	subs	r6, r6, #1
   149ec:	beq	14a0c <__assert_fail@plt+0x3b3c>
   149f0:	cmp	r5, r3
   149f4:	cmpeq	r4, r2
   149f8:	bcs	149d0 <__assert_fail@plt+0x3b00>
   149fc:	adds	r4, r4, r4
   14a00:	adc	r5, r5, r5
   14a04:	subs	r6, r6, #1
   14a08:	bne	149f0 <__assert_fail@plt+0x3b20>
   14a0c:	lsr	r6, r4, ip
   14a10:	lsr	r7, r5, ip
   14a14:	orr	r6, r6, r5, lsl r8
   14a18:	adds	r2, r0, r4
   14a1c:	orr	r6, r6, r5, lsr lr
   14a20:	adc	r3, r1, r5
   14a24:	lsl	r1, r7, ip
   14a28:	orr	r1, r1, r6, lsl lr
   14a2c:	lsl	r0, r6, ip
   14a30:	orr	r1, r1, r6, lsr r8
   14a34:	subs	r0, r2, r0
   14a38:	mov	r4, r6
   14a3c:	mov	r5, r7
   14a40:	sbc	r1, r3, r1
   14a44:	cmp	r9, #0
   14a48:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   14a4c:	strd	r4, [r9]
   14a50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14a54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a58:	mov	r7, r0
   14a5c:	ldr	r6, [pc, #72]	; 14aac <__assert_fail@plt+0x3bdc>
   14a60:	ldr	r5, [pc, #72]	; 14ab0 <__assert_fail@plt+0x3be0>
   14a64:	add	r6, pc, r6
   14a68:	add	r5, pc, r5
   14a6c:	sub	r6, r6, r5
   14a70:	mov	r8, r1
   14a74:	mov	r9, r2
   14a78:	bl	10c58 <calloc@plt-0x20>
   14a7c:	asrs	r6, r6, #2
   14a80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a84:	mov	r4, #0
   14a88:	add	r4, r4, #1
   14a8c:	ldr	r3, [r5], #4
   14a90:	mov	r2, r9
   14a94:	mov	r1, r8
   14a98:	mov	r0, r7
   14a9c:	blx	r3
   14aa0:	cmp	r6, r4
   14aa4:	bne	14a88 <__assert_fail@plt+0x3bb8>
   14aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14aac:	andeq	r1, r1, r4, lsr #9
   14ab0:	muleq	r1, ip, r4
   14ab4:	bx	lr
   14ab8:	ldr	r3, [pc, #12]	; 14acc <__assert_fail@plt+0x3bfc>
   14abc:	mov	r1, #0
   14ac0:	add	r3, pc, r3
   14ac4:	ldr	r2, [r3]
   14ac8:	b	10df8 <__cxa_atexit@plt>
   14acc:	andeq	r1, r1, r8, lsl r6

Disassembly of section .fini:

00014ad0 <.fini>:
   14ad0:	push	{r3, lr}
   14ad4:	pop	{r3, pc}
