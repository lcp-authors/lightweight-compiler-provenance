
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011f74 <.init>:
   11f74:	push	{r3, lr}
   11f78:	bl	120a8 <_start@@Base+0x3c>
   11f7c:	pop	{r3, pc}

Disassembly of section .plt:

00011f80 <printf@plt-0x14>:
   11f80:	push	{lr}		; (str lr, [sp, #-4]!)
   11f84:	ldr	lr, [pc, #4]	; 11f90 <printf@plt-0x4>
   11f88:	add	lr, pc, lr
   11f8c:	ldr	pc, [lr, #8]!
   11f90:	andeq	r7, r1, r0, ror r0

00011f94 <printf@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #94208	; 0x17000
   11f9c:	ldr	pc, [ip, #112]!	; 0x70

00011fa0 <free@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #94208	; 0x17000
   11fa8:	ldr	pc, [ip, #104]!	; 0x68

00011fac <memcpy@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #94208	; 0x17000
   11fb4:	ldr	pc, [ip, #96]!	; 0x60

00011fb8 <memcmp@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #94208	; 0x17000
   11fc0:	ldr	pc, [ip, #88]!	; 0x58

00011fc4 <realloc@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #94208	; 0x17000
   11fcc:	ldr	pc, [ip, #80]!	; 0x50

00011fd0 <fwrite@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #94208	; 0x17000
   11fd8:	ldr	pc, [ip, #72]!	; 0x48

00011fdc <puts@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #94208	; 0x17000
   11fe4:	ldr	pc, [ip, #64]!	; 0x40

00011fe8 <malloc@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #94208	; 0x17000
   11ff0:	ldr	pc, [ip, #56]!	; 0x38

00011ff4 <__libc_start_main@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #94208	; 0x17000
   11ffc:	ldr	pc, [ip, #48]!	; 0x30

00012000 <__gmon_start__@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #94208	; 0x17000
   12008:	ldr	pc, [ip, #40]!	; 0x28

0001200c <strlen@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #94208	; 0x17000
   12014:	ldr	pc, [ip, #32]!

00012018 <fprintf@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #94208	; 0x17000
   12020:	ldr	pc, [ip, #24]!

00012024 <posix_memalign@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #94208	; 0x17000
   1202c:	ldr	pc, [ip, #16]!

00012030 <memset@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #94208	; 0x17000
   12038:	ldr	pc, [ip, #8]!

0001203c <memchr@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #94208	; 0x17000
   12044:	ldr	pc, [ip, #0]!

00012048 <fputc@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #90112	; 0x16000
   12050:	ldr	pc, [ip, #4088]!	; 0xff8

00012054 <abort@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #90112	; 0x16000
   1205c:	ldr	pc, [ip, #4080]!	; 0xff0

00012060 <__assert_fail@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #90112	; 0x16000
   12068:	ldr	pc, [ip, #4072]!	; 0xfe8

Disassembly of section .text:

0001206c <_start@@Base>:
   1206c:	mov	fp, #0
   12070:	mov	lr, #0
   12074:	pop	{r1}		; (ldr r1, [sp], #4)
   12078:	mov	r2, sp
   1207c:	push	{r2}		; (str r2, [sp, #-4]!)
   12080:	push	{r0}		; (str r0, [sp, #-4]!)
   12084:	ldr	ip, [pc, #16]	; 1209c <_start@@Base+0x30>
   12088:	push	{ip}		; (str ip, [sp, #-4]!)
   1208c:	ldr	r0, [pc, #12]	; 120a0 <_start@@Base+0x34>
   12090:	ldr	r3, [pc, #12]	; 120a4 <_start@@Base+0x38>
   12094:	bl	11ff4 <__libc_start_main@plt>
   12098:	bl	12054 <abort@plt>
   1209c:	andeq	r7, r1, ip, lsr #11
   120a0:	andeq	r2, r1, r0, lsr #18
   120a4:	andeq	r7, r1, ip, asr #10
   120a8:	ldr	r3, [pc, #20]	; 120c4 <_start@@Base+0x58>
   120ac:	ldr	r2, [pc, #20]	; 120c8 <_start@@Base+0x5c>
   120b0:	add	r3, pc, r3
   120b4:	ldr	r2, [r3, r2]
   120b8:	cmp	r2, #0
   120bc:	bxeq	lr
   120c0:	b	12000 <__gmon_start__@plt>
   120c4:	andeq	r6, r1, r8, asr #30
   120c8:	andeq	r0, r0, r4, asr r0
   120cc:	ldr	r0, [pc, #24]	; 120ec <_start@@Base+0x80>
   120d0:	ldr	r3, [pc, #24]	; 120f0 <_start@@Base+0x84>
   120d4:	cmp	r3, r0
   120d8:	bxeq	lr
   120dc:	ldr	r3, [pc, #16]	; 120f4 <_start@@Base+0x88>
   120e0:	cmp	r3, #0
   120e4:	bxeq	lr
   120e8:	bx	r3
   120ec:	andeq	r9, r2, r0, rrx
   120f0:	andeq	r9, r2, r0, rrx
   120f4:	andeq	r0, r0, r0
   120f8:	ldr	r0, [pc, #36]	; 12124 <_start@@Base+0xb8>
   120fc:	ldr	r1, [pc, #36]	; 12128 <_start@@Base+0xbc>
   12100:	sub	r1, r1, r0
   12104:	asr	r1, r1, #2
   12108:	add	r1, r1, r1, lsr #31
   1210c:	asrs	r1, r1, #1
   12110:	bxeq	lr
   12114:	ldr	r3, [pc, #16]	; 1212c <_start@@Base+0xc0>
   12118:	cmp	r3, #0
   1211c:	bxeq	lr
   12120:	bx	r3
   12124:	andeq	r9, r2, r0, rrx
   12128:	andeq	r9, r2, r0, rrx
   1212c:	andeq	r0, r0, r0
   12130:	push	{r4, lr}
   12134:	ldr	r4, [pc, #24]	; 12154 <_start@@Base+0xe8>
   12138:	ldrb	r3, [r4]
   1213c:	cmp	r3, #0
   12140:	popne	{r4, pc}
   12144:	bl	120cc <_start@@Base+0x60>
   12148:	mov	r3, #1
   1214c:	strb	r3, [r4]
   12150:	pop	{r4, pc}
   12154:	andeq	r9, r2, r4, rrx
   12158:	b	120f8 <_start@@Base+0x8c>

0001215c <dbg_emitter@@Base>:
   1215c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12160:	strd	r6, [sp, #8]
   12164:	strd	r8, [sp, #16]
   12168:	str	sl, [sp, #24]
   1216c:	str	lr, [sp, #28]
   12170:	mov	r4, r1
   12174:	mov	r7, r2
   12178:	mov	r6, r3
   1217c:	ldr	r3, [sp, #32]
   12180:	mov	r2, r6
   12184:	mov	r1, r7
   12188:	movw	r0, #30256	; 0x7630
   1218c:	movt	r0, #1
   12190:	bl	11f94 <printf@plt>
   12194:	cmp	r7, #0
   12198:	ble	12218 <dbg_emitter@@Base+0xbc>
   1219c:	add	r4, r4, #4
   121a0:	add	r7, r4, r7, lsl #3
   121a4:	movw	r8, #30956	; 0x78ec
   121a8:	movt	r8, #1
   121ac:	movw	sl, #30308	; 0x7664
   121b0:	movt	sl, #1
   121b4:	movw	r9, #30344	; 0x7688
   121b8:	movt	r9, #1
   121bc:	b	121e8 <dbg_emitter@@Base+0x8c>
   121c0:	ldr	r2, [r4]
   121c4:	mov	r1, r6
   121c8:	mov	r0, sl
   121cc:	bl	11f94 <printf@plt>
   121d0:	b	121f8 <dbg_emitter@@Base+0x9c>
   121d4:	ldr	r3, [r5]
   121d8:	add	r6, r6, r3
   121dc:	add	r4, r4, #8
   121e0:	cmp	r4, r7
   121e4:	beq	12218 <dbg_emitter@@Base+0xbc>
   121e8:	mov	r5, r4
   121ec:	ldr	r3, [r4, #-4]
   121f0:	cmp	r3, r8
   121f4:	beq	121c0 <dbg_emitter@@Base+0x64>
   121f8:	ldr	r3, [r5, #-4]
   121fc:	cmp	r3, #0
   12200:	bne	121d4 <dbg_emitter@@Base+0x78>
   12204:	ldr	r2, [r5]
   12208:	mov	r1, r6
   1220c:	mov	r0, r9
   12210:	bl	11f94 <printf@plt>
   12214:	b	121d4 <dbg_emitter@@Base+0x78>
   12218:	mov	r0, #0
   1221c:	ldrd	r4, [sp]
   12220:	ldrd	r6, [sp, #8]
   12224:	ldrd	r8, [sp, #16]
   12228:	ldr	sl, [sp, #24]
   1222c:	add	sp, sp, #28
   12230:	pop	{pc}		; (ldr pc, [sp], #4)

00012234 <debug_test@@Base>:
   12234:	strd	r4, [sp, #-16]!
   12238:	str	r6, [sp, #8]
   1223c:	str	lr, [sp, #12]
   12240:	sub	sp, sp, #280	; 0x118
   12244:	mov	r2, #0
   12248:	mov	r3, #0
   1224c:	strd	r2, [sp, #8]
   12250:	strd	r2, [sp, #16]
   12254:	strd	r2, [sp, #24]
   12258:	strd	r2, [sp, #32]
   1225c:	strd	r2, [sp, #40]	; 0x28
   12260:	movw	r0, #30392	; 0x76b8
   12264:	movt	r0, #1
   12268:	bl	11fdc <puts@plt>
   1226c:	mov	r4, #0
   12270:	str	r4, [sp]
   12274:	mov	r3, r4
   12278:	mov	r2, r4
   1227c:	movw	r1, #8540	; 0x215c
   12280:	movt	r1, #1
   12284:	add	r0, sp, #48	; 0x30
   12288:	bl	12fd0 <flatcc_builder_custom_init@@Base>
   1228c:	mvn	r3, #-1073741824	; 0xc0000000
   12290:	str	r3, [sp, #4]
   12294:	mov	r3, #4
   12298:	str	r3, [sp]
   1229c:	mov	r2, #10
   122a0:	add	r1, sp, #8
   122a4:	add	r0, sp, #48	; 0x30
   122a8:	bl	156a8 <flatcc_builder_create_vector@@Base>
   122ac:	mov	r5, r0
   122b0:	mov	r3, r4
   122b4:	mov	r2, r4
   122b8:	mov	r1, r4
   122bc:	add	r0, sp, #48	; 0x30
   122c0:	bl	13a4c <flatcc_builder_start_buffer@@Base>
   122c4:	subs	r4, r0, #0
   122c8:	beq	122ec <debug_test@@Base+0xb8>
   122cc:	add	r0, sp, #48	; 0x30
   122d0:	bl	1323c <flatcc_builder_clear@@Base>
   122d4:	mov	r0, #0
   122d8:	add	sp, sp, #280	; 0x118
   122dc:	ldrd	r4, [sp]
   122e0:	ldr	r6, [sp, #8]
   122e4:	add	sp, sp, #12
   122e8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ec:	mov	r1, #3
   122f0:	add	r0, sp, #48	; 0x30
   122f4:	bl	14a0c <flatcc_builder_start_table@@Base>
   122f8:	subs	r6, r0, #0
   122fc:	bne	12394 <debug_test@@Base+0x160>
   12300:	mov	r3, #8
   12304:	mov	r2, r3
   12308:	mov	r1, #0
   1230c:	add	r0, sp, #48	; 0x30
   12310:	bl	165d0 <flatcc_builder_table_add@@Base>
   12314:	cmp	r0, #0
   12318:	beq	123c0 <debug_test@@Base+0x18c>
   1231c:	mov	r2, #42	; 0x2a
   12320:	mov	r3, #0
   12324:	strd	r2, [r0]
   12328:	cmp	r5, #0
   1232c:	beq	123c8 <debug_test@@Base+0x194>
   12330:	mov	r1, #2
   12334:	add	r0, sp, #48	; 0x30
   12338:	bl	167c0 <flatcc_builder_table_add_offset@@Base>
   1233c:	cmp	r0, #0
   12340:	beq	123d0 <debug_test@@Base+0x19c>
   12344:	str	r5, [r0]
   12348:	mov	r3, #1
   1234c:	mov	r2, r3
   12350:	mov	r1, r3
   12354:	add	r0, sp, #48	; 0x30
   12358:	bl	165d0 <flatcc_builder_table_add@@Base>
   1235c:	cmp	r0, #0
   12360:	beq	123d8 <debug_test@@Base+0x1a4>
   12364:	mov	r3, #1
   12368:	strb	r3, [r0]
   1236c:	mov	r2, #0
   12370:	movw	r1, #30140	; 0x75bc
   12374:	movt	r1, #1
   12378:	add	r0, sp, #48	; 0x30
   1237c:	bl	15434 <flatcc_builder_check_required@@Base>
   12380:	cmp	r0, #0
   12384:	beq	123a4 <debug_test@@Base+0x170>
   12388:	add	r0, sp, #48	; 0x30
   1238c:	bl	154e4 <flatcc_builder_end_table@@Base>
   12390:	mov	r4, r0
   12394:	mov	r1, r4
   12398:	add	r0, sp, #48	; 0x30
   1239c:	bl	13b20 <flatcc_builder_end_buffer@@Base>
   123a0:	b	122cc <debug_test@@Base+0x98>
   123a4:	ldr	r3, [pc, #52]	; 123e0 <debug_test@@Base+0x1ac>
   123a8:	mov	r2, #21
   123ac:	movw	r1, #30476	; 0x770c
   123b0:	movt	r1, #1
   123b4:	movw	r0, #30572	; 0x776c
   123b8:	movt	r0, #1
   123bc:	bl	12060 <__assert_fail@plt>
   123c0:	mov	r4, r6
   123c4:	b	12394 <debug_test@@Base+0x160>
   123c8:	mov	r4, r5
   123cc:	b	12394 <debug_test@@Base+0x160>
   123d0:	mov	r4, r6
   123d4:	b	12394 <debug_test@@Base+0x160>
   123d8:	mov	r4, r6
   123dc:	b	12394 <debug_test@@Base+0x160>
   123e0:	andeq	r7, r1, r0, asr #11

000123e4 <emit_test@@Base>:
   123e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123e8:	strd	r6, [sp, #8]
   123ec:	strd	r8, [sp, #16]
   123f0:	strd	sl, [sp, #24]
   123f4:	str	lr, [sp, #32]
   123f8:	sub	sp, sp, #348	; 0x15c
   123fc:	movw	ip, #30140	; 0x75bc
   12400:	movt	ip, #1
   12404:	add	r3, sp, #284	; 0x11c
   12408:	ldrd	r0, [ip, #16]
   1240c:	strd	r0, [r3]
   12410:	ldrd	r0, [ip, #24]
   12414:	strd	r0, [r3, #8]
   12418:	ldrd	r0, [ip, #32]
   1241c:	strd	r0, [r3, #16]
   12420:	ldrd	r0, [ip, #40]	; 0x28
   12424:	strd	r0, [r3, #24]
   12428:	ldrd	r0, [ip, #48]	; 0x30
   1242c:	strd	r0, [r3, #32]
   12430:	ldrd	r0, [ip, #56]	; 0x38
   12434:	strd	r0, [r3, #40]	; 0x28
   12438:	ldrd	r0, [ip, #64]	; 0x40
   1243c:	strd	r0, [r3, #48]	; 0x30
   12440:	ldrh	r1, [ip, #72]	; 0x48
   12444:	strh	r1, [r3, #56]	; 0x38
   12448:	ldrb	r2, [ip, #74]	; 0x4a
   1244c:	strb	r2, [sp, #342]	; 0x156
   12450:	ldrd	r2, [ip, #76]	; 0x4c
   12454:	strd	r2, [sp, #36]	; 0x24
   12458:	ldrd	r2, [ip, #84]	; 0x54
   1245c:	strd	r2, [sp, #44]	; 0x2c
   12460:	add	r0, sp, #52	; 0x34
   12464:	bl	13058 <flatcc_builder_init@@Base>
   12468:	add	r0, sp, #52	; 0x34
   1246c:	bl	16ed8 <flatcc_builder_get_emit_context@@Base>
   12470:	mov	r4, r0
   12474:	mvn	r3, #-1073741824	; 0xc0000000
   12478:	str	r3, [sp, #4]
   1247c:	mov	r2, #4
   12480:	str	r2, [sp]
   12484:	mov	r3, r2
   12488:	add	r1, sp, #36	; 0x24
   1248c:	add	r0, sp, #52	; 0x34
   12490:	bl	156a8 <flatcc_builder_create_vector@@Base>
   12494:	mov	r6, r0
   12498:	mov	r3, #0
   1249c:	mov	r2, r3
   124a0:	mov	r1, r3
   124a4:	add	r0, sp, #52	; 0x34
   124a8:	bl	13a4c <flatcc_builder_start_buffer@@Base>
   124ac:	subs	r5, r0, #0
   124b0:	beq	124e8 <emit_test@@Base+0x104>
   124b4:	ldr	r2, [r4, #4]
   124b8:	ldr	r3, [r4]
   124bc:	cmp	r2, r3
   124c0:	mvnne	r4, #0
   124c4:	beq	125dc <emit_test@@Base+0x1f8>
   124c8:	mov	r0, r4
   124cc:	add	sp, sp, #348	; 0x15c
   124d0:	ldrd	r4, [sp]
   124d4:	ldrd	r6, [sp, #8]
   124d8:	ldrd	r8, [sp, #16]
   124dc:	ldrd	sl, [sp, #24]
   124e0:	add	sp, sp, #32
   124e4:	pop	{pc}		; (ldr pc, [sp], #4)
   124e8:	mov	r1, #3
   124ec:	add	r0, sp, #52	; 0x34
   124f0:	bl	14a0c <flatcc_builder_start_table@@Base>
   124f4:	subs	r7, r0, #0
   124f8:	bne	12590 <emit_test@@Base+0x1ac>
   124fc:	mov	r3, #8
   12500:	mov	r2, r3
   12504:	mov	r1, #0
   12508:	add	r0, sp, #52	; 0x34
   1250c:	bl	165d0 <flatcc_builder_table_add@@Base>
   12510:	cmp	r0, #0
   12514:	beq	125bc <emit_test@@Base+0x1d8>
   12518:	mov	r2, #42	; 0x2a
   1251c:	mov	r3, #0
   12520:	strd	r2, [r0]
   12524:	cmp	r6, #0
   12528:	beq	125c4 <emit_test@@Base+0x1e0>
   1252c:	mov	r1, #2
   12530:	add	r0, sp, #52	; 0x34
   12534:	bl	167c0 <flatcc_builder_table_add_offset@@Base>
   12538:	cmp	r0, #0
   1253c:	beq	125cc <emit_test@@Base+0x1e8>
   12540:	str	r6, [r0]
   12544:	mov	r3, #1
   12548:	mov	r2, r3
   1254c:	mov	r1, r3
   12550:	add	r0, sp, #52	; 0x34
   12554:	bl	165d0 <flatcc_builder_table_add@@Base>
   12558:	cmp	r0, #0
   1255c:	beq	125d4 <emit_test@@Base+0x1f0>
   12560:	mov	r3, #1
   12564:	strb	r3, [r0]
   12568:	mov	r2, #0
   1256c:	movw	r1, #30140	; 0x75bc
   12570:	movt	r1, #1
   12574:	add	r0, sp, #52	; 0x34
   12578:	bl	15434 <flatcc_builder_check_required@@Base>
   1257c:	cmp	r0, #0
   12580:	beq	125a0 <emit_test@@Base+0x1bc>
   12584:	add	r0, sp, #52	; 0x34
   12588:	bl	154e4 <flatcc_builder_end_table@@Base>
   1258c:	mov	r5, r0
   12590:	mov	r1, r5
   12594:	add	r0, sp, #52	; 0x34
   12598:	bl	13b20 <flatcc_builder_end_buffer@@Base>
   1259c:	b	124b4 <emit_test@@Base+0xd0>
   125a0:	ldr	r3, [pc, #876]	; 12914 <emit_test@@Base+0x530>
   125a4:	mov	r2, #21
   125a8:	movw	r1, #30476	; 0x770c
   125ac:	movt	r1, #1
   125b0:	movw	r0, #30572	; 0x776c
   125b4:	movt	r0, #1
   125b8:	bl	12060 <__assert_fail@plt>
   125bc:	mov	r5, r7
   125c0:	b	12590 <emit_test@@Base+0x1ac>
   125c4:	mov	r5, r6
   125c8:	b	12590 <emit_test@@Base+0x1ac>
   125cc:	mov	r5, r7
   125d0:	b	12590 <emit_test@@Base+0x1ac>
   125d4:	mov	r5, r7
   125d8:	b	12590 <emit_test@@Base+0x1ac>
   125dc:	ldr	r8, [r4, #24]
   125e0:	ldr	sl, [r4, #8]
   125e4:	cmp	sl, #0
   125e8:	beq	128d8 <emit_test@@Base+0x4f4>
   125ec:	add	r0, sp, #52	; 0x34
   125f0:	bl	16bb0 <flatcc_builder_get_buffer_size@@Base>
   125f4:	cmp	r0, r8
   125f8:	bne	12664 <emit_test@@Base+0x280>
   125fc:	movw	r4, #36960	; 0x9060
   12600:	movt	r4, #2
   12604:	mov	r2, r8
   12608:	movw	r1, #30756	; 0x7824
   1260c:	movt	r1, #1
   12610:	ldr	r0, [r4]
   12614:	bl	12018 <fprintf@plt>
   12618:	ldr	r6, [r4]
   1261c:	movw	r2, #30776	; 0x7838
   12620:	movt	r2, #1
   12624:	movw	r1, #30788	; 0x7844
   12628:	movt	r1, #1
   1262c:	mov	r0, r6
   12630:	bl	12018 <fprintf@plt>
   12634:	cmp	r8, #0
   12638:	beq	128e0 <emit_test@@Base+0x4fc>
   1263c:	sub	r7, sl, #1
   12640:	mov	r4, #0
   12644:	movw	fp, #30804	; 0x7854
   12648:	movt	fp, #1
   1264c:	movw	r3, #30796	; 0x784c
   12650:	movt	r3, #1
   12654:	str	r3, [sp, #12]
   12658:	movw	r9, #30812	; 0x785c
   1265c:	movt	r9, #1
   12660:	b	126e4 <emit_test@@Base+0x300>
   12664:	ldr	r3, [pc, #684]	; 12918 <emit_test@@Base+0x534>
   12668:	mov	r2, #101	; 0x65
   1266c:	movw	r1, #30680	; 0x77d8
   12670:	movt	r1, #1
   12674:	movw	r0, #32912	; 0x8090
   12678:	movt	r0, #1
   1267c:	bl	12060 <__assert_fail@plt>
   12680:	add	r2, sp, #16
   12684:	ldr	r1, [sp, #12]
   12688:	mov	r0, r6
   1268c:	bl	12018 <fprintf@plt>
   12690:	mov	r2, r4
   12694:	mov	r1, fp
   12698:	mov	r0, r6
   1269c:	bl	12018 <fprintf@plt>
   126a0:	ldrb	r2, [r7, #1]!
   126a4:	mov	r1, r9
   126a8:	mov	r0, r6
   126ac:	bl	12018 <fprintf@plt>
   126b0:	ldrb	r3, [r7]
   126b4:	sub	r2, r3, #32
   126b8:	uxtb	r2, r2
   126bc:	cmp	r2, #95	; 0x5f
   126c0:	movcs	r3, #46	; 0x2e
   126c4:	add	r2, sp, #344	; 0x158
   126c8:	add	r5, r2, r5
   126cc:	strb	r3, [r5, #-328]	; 0xfffffeb8
   126d0:	mov	r3, #0
   126d4:	strb	r3, [r5, #-327]	; 0xfffffeb9
   126d8:	add	r4, r4, #1
   126dc:	cmp	r8, r4
   126e0:	beq	12710 <emit_test@@Base+0x32c>
   126e4:	ands	r5, r4, #15
   126e8:	bne	126f8 <emit_test@@Base+0x314>
   126ec:	cmp	r4, #0
   126f0:	beq	12690 <emit_test@@Base+0x2ac>
   126f4:	b	12680 <emit_test@@Base+0x29c>
   126f8:	tst	r4, #7
   126fc:	bne	126a0 <emit_test@@Base+0x2bc>
   12700:	mov	r1, r6
   12704:	mov	r0, #32
   12708:	bl	12048 <fputc@plt>
   1270c:	b	126a0 <emit_test@@Base+0x2bc>
   12710:	tst	r8, #15
   12714:	beq	1274c <emit_test@@Base+0x368>
   12718:	mov	r4, r8
   1271c:	movw	r5, #30820	; 0x7864
   12720:	movt	r5, #1
   12724:	mov	r9, #3
   12728:	mov	r7, #1
   1272c:	mov	r3, r6
   12730:	mov	r2, r9
   12734:	mov	r1, r7
   12738:	mov	r0, r5
   1273c:	bl	11fd0 <fwrite@plt>
   12740:	add	r4, r4, #1
   12744:	tst	r4, #15
   12748:	bne	1272c <emit_test@@Base+0x348>
   1274c:	add	r2, sp, #16
   12750:	movw	r1, #30796	; 0x784c
   12754:	movt	r1, #1
   12758:	mov	r0, r6
   1275c:	bl	12018 <fprintf@plt>
   12760:	cmp	r8, #58	; 0x3a
   12764:	bne	128f4 <emit_test@@Base+0x510>
   12768:	mov	r2, #58	; 0x3a
   1276c:	add	r1, sp, #284	; 0x11c
   12770:	mov	r0, sl
   12774:	bl	11fb8 <memcmp@plt>
   12778:	subs	r4, r0, #0
   1277c:	bne	12830 <emit_test@@Base+0x44c>
   12780:	ldr	r3, [sl]
   12784:	adds	r2, sl, r3
   12788:	beq	1284c <emit_test@@Base+0x468>
   1278c:	ldr	r3, [sl, r3]
   12790:	sub	r3, r2, r3
   12794:	ldrh	r1, [r3]
   12798:	cmp	r1, #5
   1279c:	bls	12868 <emit_test@@Base+0x484>
   127a0:	ldrh	r0, [r3, #4]
   127a4:	cmp	r0, #0
   127a8:	beq	12868 <emit_test@@Base+0x484>
   127ac:	ldrd	r6, [r2, r0]
   127b0:	cmp	r7, #0
   127b4:	cmpeq	r6, #42	; 0x2a
   127b8:	bne	12868 <emit_test@@Base+0x484>
   127bc:	cmp	r1, #7
   127c0:	bls	12884 <emit_test@@Base+0x4a0>
   127c4:	ldrh	r0, [r3, #6]
   127c8:	cmp	r0, #0
   127cc:	beq	12884 <emit_test@@Base+0x4a0>
   127d0:	ldrb	r0, [r2, r0]
   127d4:	cmp	r0, #1
   127d8:	bne	12884 <emit_test@@Base+0x4a0>
   127dc:	cmp	r1, #9
   127e0:	bls	128a0 <emit_test@@Base+0x4bc>
   127e4:	ldrh	r1, [r3, #8]
   127e8:	cmp	r1, #0
   127ec:	beq	128a0 <emit_test@@Base+0x4bc>
   127f0:	add	r3, r2, r1
   127f4:	ldr	r2, [r2, r1]
   127f8:	add	r2, r2, #4
   127fc:	adds	r3, r3, r2
   12800:	beq	128a0 <emit_test@@Base+0x4bc>
   12804:	ldr	r2, [r3, #-4]
   12808:	cmp	r2, #4
   1280c:	bne	128a0 <emit_test@@Base+0x4bc>
   12810:	vldr	s14, [r3, #8]
   12814:	vldr	s15, [pc, #244]	; 12910 <emit_test@@Base+0x52c>
   12818:	vcmp.f32	s14, s15
   1281c:	vmrs	APSR_nzcv, fpscr
   12820:	bne	128bc <emit_test@@Base+0x4d8>
   12824:	add	r0, sp, #52	; 0x34
   12828:	bl	1323c <flatcc_builder_clear@@Base>
   1282c:	b	124c8 <emit_test@@Base+0xe4>
   12830:	ldr	r3, [pc, #224]	; 12918 <emit_test@@Base+0x534>
   12834:	mov	r2, #108	; 0x6c
   12838:	movw	r1, #30680	; 0x77d8
   1283c:	movt	r1, #1
   12840:	movw	r0, #32912	; 0x8090
   12844:	movt	r0, #1
   12848:	bl	12060 <__assert_fail@plt>
   1284c:	ldr	r3, [pc, #200]	; 1291c <emit_test@@Base+0x538>
   12850:	mov	r2, #41	; 0x29
   12854:	movw	r1, #30824	; 0x7868
   12858:	movt	r1, #1
   1285c:	movw	r0, #30916	; 0x78c4
   12860:	movt	r0, #1
   12864:	bl	12060 <__assert_fail@plt>
   12868:	ldr	r3, [pc, #168]	; 12918 <emit_test@@Base+0x534>
   1286c:	mov	r2, #112	; 0x70
   12870:	movw	r1, #30680	; 0x77d8
   12874:	movt	r1, #1
   12878:	movw	r0, #32912	; 0x8090
   1287c:	movt	r0, #1
   12880:	bl	12060 <__assert_fail@plt>
   12884:	ldr	r3, [pc, #140]	; 12918 <emit_test@@Base+0x534>
   12888:	mov	r2, #113	; 0x71
   1288c:	movw	r1, #30680	; 0x77d8
   12890:	movt	r1, #1
   12894:	movw	r0, #32912	; 0x8090
   12898:	movt	r0, #1
   1289c:	bl	12060 <__assert_fail@plt>
   128a0:	ldr	r3, [pc, #112]	; 12918 <emit_test@@Base+0x534>
   128a4:	mov	r2, #114	; 0x72
   128a8:	movw	r1, #30680	; 0x77d8
   128ac:	movt	r1, #1
   128b0:	movw	r0, #32912	; 0x8090
   128b4:	movt	r0, #1
   128b8:	bl	12060 <__assert_fail@plt>
   128bc:	ldr	r3, [pc, #84]	; 12918 <emit_test@@Base+0x534>
   128c0:	mov	r2, #115	; 0x73
   128c4:	movw	r1, #30680	; 0x77d8
   128c8:	movt	r1, #1
   128cc:	movw	r0, #32912	; 0x8090
   128d0:	movt	r0, #1
   128d4:	bl	12060 <__assert_fail@plt>
   128d8:	mvn	r4, #0
   128dc:	b	124c8 <emit_test@@Base+0xe4>
   128e0:	add	r2, sp, #16
   128e4:	movw	r1, #30796	; 0x784c
   128e8:	movt	r1, #1
   128ec:	mov	r0, r6
   128f0:	bl	12018 <fprintf@plt>
   128f4:	ldr	r3, [pc, #28]	; 12918 <emit_test@@Base+0x534>
   128f8:	mov	r2, #106	; 0x6a
   128fc:	movw	r1, #30680	; 0x77d8
   12900:	movt	r1, #1
   12904:	movw	r0, #32912	; 0x8090
   12908:	movt	r0, #1
   1290c:	bl	12060 <__assert_fail@plt>
   12910:	svccc	0x0099999a
   12914:	andeq	r7, r1, r0, asr #11
   12918:	andeq	r7, r1, r8, lsl r6
   1291c:	andeq	r7, r1, r4, lsr #12

00012920 <main@@Base>:
   12920:	str	r4, [sp, #-8]!
   12924:	str	lr, [sp, #4]
   12928:	bl	12234 <debug_test@@Base>
   1292c:	mov	r4, r0
   12930:	bl	123e4 <emit_test@@Base>
   12934:	orr	r0, r4, r0
   12938:	ldr	r4, [sp]
   1293c:	add	sp, sp, #4
   12940:	pop	{pc}		; (ldr pc, [sp], #4)
   12944:	strd	r4, [sp, #-16]!
   12948:	str	r6, [sp, #8]
   1294c:	str	lr, [sp, #12]
   12950:	sub	sp, sp, #8
   12954:	mov	r4, r0
   12958:	mov	r5, r2
   1295c:	ldr	r2, [r0, #28]
   12960:	mov	r3, #1
   12964:	str	r3, [sp]
   12968:	ldr	r6, [r0, #48]	; 0x30
   1296c:	add	r2, r1, r2
   12970:	add	r1, r0, #60	; 0x3c
   12974:	ldr	r0, [r0, #40]	; 0x28
   12978:	blx	r6
   1297c:	cmp	r0, #0
   12980:	bne	129c4 <main@@Base+0xa4>
   12984:	ldr	r1, [r4, #28]
   12988:	ldr	r2, [r4, #60]	; 0x3c
   1298c:	add	r2, r2, r1
   12990:	str	r2, [r4, #16]
   12994:	ldr	r3, [r4, #64]	; 0x40
   12998:	sub	r3, r3, r1
   1299c:	cmp	r3, r5
   129a0:	movcs	r3, r5
   129a4:	str	r3, [r4, #24]
   129a8:	ldr	r3, [r4, #32]
   129ac:	str	r5, [r3, #4]
   129b0:	add	sp, sp, #8
   129b4:	ldrd	r4, [sp]
   129b8:	ldr	r6, [sp, #8]
   129bc:	add	sp, sp, #12
   129c0:	pop	{pc}		; (ldr pc, [sp], #4)
   129c4:	mvn	r0, #0
   129c8:	b	129b0 <main@@Base+0x90>

000129cc <flatcc_builder_default_alloc@@Base>:
   129cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   129d0:	strd	r6, [sp, #8]
   129d4:	str	r8, [sp, #16]
   129d8:	str	lr, [sp, #20]
   129dc:	mov	r5, r1
   129e0:	cmp	r2, #0
   129e4:	beq	12a1c <flatcc_builder_default_alloc@@Base+0x50>
   129e8:	mov	r6, r3
   129ec:	ldr	r3, [sp, #24]
   129f0:	sub	r3, r3, #1
   129f4:	cmp	r3, #6
   129f8:	ldrls	pc, [pc, r3, lsl #2]
   129fc:	b	12ac8 <flatcc_builder_default_alloc@@Base+0xfc>
   12a00:	andeq	r2, r1, r8, asr #20
   12a04:	andeq	r2, r1, r8, asr #21
   12a08:	andeq	r2, r1, r8, asr #21
   12a0c:	andeq	r2, r1, r0, asr #20
   12a10:	ldrdeq	r2, [r1], -r0
   12a14:	andeq	r2, r1, r8, asr #21
   12a18:	andeq	r2, r1, r0, asr #21
   12a1c:	ldr	r0, [r1]
   12a20:	cmp	r0, #0
   12a24:	moveq	r0, #0
   12a28:	beq	12aac <flatcc_builder_default_alloc@@Base+0xe0>
   12a2c:	bl	11fa0 <free@plt>
   12a30:	mov	r0, #0
   12a34:	str	r0, [r5]
   12a38:	str	r0, [r5, #4]
   12a3c:	b	12aac <flatcc_builder_default_alloc@@Base+0xe0>
   12a40:	mov	r4, #288	; 0x120
   12a44:	b	12a4c <flatcc_builder_default_alloc@@Base+0x80>
   12a48:	mov	r4, #256	; 0x100
   12a4c:	cmp	r4, r2
   12a50:	bcs	12a60 <flatcc_builder_default_alloc@@Base+0x94>
   12a54:	lsl	r4, r4, #1
   12a58:	cmp	r2, r4
   12a5c:	bhi	12a54 <flatcc_builder_default_alloc@@Base+0x88>
   12a60:	ldr	r3, [r5, #4]
   12a64:	cmp	r3, r2
   12a68:	bcc	12a78 <flatcc_builder_default_alloc@@Base+0xac>
   12a6c:	cmp	r4, r3, lsr #1
   12a70:	movls	r0, #0
   12a74:	bls	12aac <flatcc_builder_default_alloc@@Base+0xe0>
   12a78:	mov	r1, r4
   12a7c:	ldr	r0, [r5]
   12a80:	bl	11fc4 <realloc@plt>
   12a84:	subs	r7, r0, #0
   12a88:	beq	12aec <flatcc_builder_default_alloc@@Base+0x120>
   12a8c:	cmp	r6, #0
   12a90:	beq	12aa0 <flatcc_builder_default_alloc@@Base+0xd4>
   12a94:	ldr	r0, [r5, #4]
   12a98:	cmp	r0, r4
   12a9c:	bcc	12ad8 <flatcc_builder_default_alloc@@Base+0x10c>
   12aa0:	str	r7, [r5]
   12aa4:	str	r4, [r5, #4]
   12aa8:	mov	r0, #0
   12aac:	ldrd	r4, [sp]
   12ab0:	ldrd	r6, [sp, #8]
   12ab4:	ldr	r8, [sp, #16]
   12ab8:	add	sp, sp, #20
   12abc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ac0:	mov	r4, #64	; 0x40
   12ac4:	b	12a4c <flatcc_builder_default_alloc@@Base+0x80>
   12ac8:	mov	r4, #32
   12acc:	b	12a4c <flatcc_builder_default_alloc@@Base+0x80>
   12ad0:	mov	r4, r2
   12ad4:	b	12a60 <flatcc_builder_default_alloc@@Base+0x94>
   12ad8:	sub	r2, r4, r0
   12adc:	mov	r1, #0
   12ae0:	add	r0, r7, r0
   12ae4:	bl	12030 <memset@plt>
   12ae8:	b	12aa0 <flatcc_builder_default_alloc@@Base+0xd4>
   12aec:	mvn	r0, #0
   12af0:	b	12aac <flatcc_builder_default_alloc@@Base+0xe0>
   12af4:	cmp	r2, #0
   12af8:	bne	12b08 <flatcc_builder_default_alloc@@Base+0x13c>
   12afc:	ldrh	r2, [r0, #132]	; 0x84
   12b00:	cmp	r2, #0
   12b04:	moveq	r2, #1
   12b08:	ldrh	ip, [r1]
   12b0c:	cmp	ip, #3
   12b10:	movls	ip, #4
   12b14:	strhls	ip, [r1]
   12b18:	ldrh	ip, [r1]
   12b1c:	cmp	ip, r2
   12b20:	strhcc	r2, [r1]
   12b24:	cmp	r3, #0
   12b28:	bne	12c08 <flatcc_builder_default_alloc@@Base+0x23c>
   12b2c:	strd	r4, [sp, #-12]!
   12b30:	str	lr, [sp, #8]
   12b34:	sub	sp, sp, #84	; 0x54
   12b38:	ldr	r4, [r0, #140]	; 0x8c
   12b3c:	sub	r2, r2, #1
   12b40:	ands	r2, r2, r4
   12b44:	bne	12b5c <flatcc_builder_default_alloc@@Base+0x190>
   12b48:	mov	r0, #0
   12b4c:	add	sp, sp, #84	; 0x54
   12b50:	ldrd	r4, [sp]
   12b54:	add	sp, sp, #8
   12b58:	pop	{pc}		; (ldr pc, [sp], #4)
   12b5c:	str	r2, [sp, #8]
   12b60:	movw	r3, #30956	; 0x78ec
   12b64:	movt	r3, #1
   12b68:	str	r3, [sp, #16]
   12b6c:	str	r2, [sp, #20]
   12b70:	mov	r3, #1
   12b74:	str	r3, [sp, #12]
   12b78:	add	r3, r4, r2
   12b7c:	str	r3, [r0, #140]	; 0x8c
   12b80:	cmp	r4, r3
   12b84:	bgt	12bd0 <flatcc_builder_default_alloc@@Base+0x204>
   12b88:	str	r2, [sp]
   12b8c:	ldr	r5, [r0, #44]	; 0x2c
   12b90:	mov	r3, r4
   12b94:	mov	r2, #1
   12b98:	add	r1, sp, #16
   12b9c:	ldr	r0, [r0, #36]	; 0x24
   12ba0:	blx	r5
   12ba4:	cmp	r0, #0
   12ba8:	bne	12bec <flatcc_builder_default_alloc@@Base+0x220>
   12bac:	cmn	r4, #1
   12bb0:	bne	12b48 <flatcc_builder_default_alloc@@Base+0x17c>
   12bb4:	ldr	r3, [pc, #84]	; 12c10 <flatcc_builder_default_alloc@@Base+0x244>
   12bb8:	movw	r2, #702	; 0x2be
   12bbc:	movw	r1, #32828	; 0x803c
   12bc0:	movt	r1, #1
   12bc4:	movw	r0, #32912	; 0x8090
   12bc8:	movt	r0, #1
   12bcc:	bl	12060 <__assert_fail@plt>
   12bd0:	ldr	r3, [pc, #60]	; 12c14 <flatcc_builder_default_alloc@@Base+0x248>
   12bd4:	movw	r2, #673	; 0x2a1
   12bd8:	movw	r1, #32828	; 0x803c
   12bdc:	movt	r1, #1
   12be0:	movw	r0, #32912	; 0x8090
   12be4:	movt	r0, #1
   12be8:	bl	12060 <__assert_fail@plt>
   12bec:	ldr	r3, [pc, #32]	; 12c14 <flatcc_builder_default_alloc@@Base+0x248>
   12bf0:	movw	r2, #677	; 0x2a5
   12bf4:	movw	r1, #32828	; 0x803c
   12bf8:	movt	r1, #1
   12bfc:	movw	r0, #32912	; 0x8090
   12c00:	movt	r0, #1
   12c04:	bl	12060 <__assert_fail@plt>
   12c08:	mov	r0, #0
   12c0c:	bx	lr
   12c10:	strdeq	r7, [r1], -r8
   12c14:	andeq	r7, r1, ip, ror #21
   12c18:	strd	r4, [sp, #-20]!	; 0xffffffec
   12c1c:	strd	r6, [sp, #8]
   12c20:	str	lr, [sp, #16]
   12c24:	sub	sp, sp, #12
   12c28:	mov	r4, r0
   12c2c:	mov	r6, r1
   12c30:	ldr	r3, [r0, #156]	; 0x9c
   12c34:	add	r2, r3, #1
   12c38:	str	r2, [r0, #156]	; 0x9c
   12c3c:	ldr	r1, [r0, #160]	; 0xa0
   12c40:	cmp	r2, r1
   12c44:	ble	12cfc <flatcc_builder_default_alloc@@Base+0x330>
   12c48:	ldr	r1, [r0, #176]	; 0xb0
   12c4c:	cmp	r2, r1
   12c50:	cmpgt	r1, #0
   12c54:	bgt	12d70 <flatcc_builder_default_alloc@@Base+0x3a4>
   12c58:	add	r3, r3, r3, lsl #3
   12c5c:	lsl	r5, r3, #2
   12c60:	add	r2, r5, #36	; 0x24
   12c64:	ldr	r3, [r0, #88]	; 0x58
   12c68:	cmp	r2, r3
   12c6c:	bls	12c94 <flatcc_builder_default_alloc@@Base+0x2c8>
   12c70:	mov	r3, #4
   12c74:	str	r3, [sp]
   12c78:	ldr	r7, [r0, #48]	; 0x30
   12c7c:	mov	r3, #0
   12c80:	add	r1, r0, #84	; 0x54
   12c84:	ldr	r0, [r0, #40]	; 0x28
   12c88:	blx	r7
   12c8c:	cmp	r0, #0
   12c90:	bne	12ce0 <flatcc_builder_default_alloc@@Base+0x314>
   12c94:	ldr	r3, [r4, #84]	; 0x54
   12c98:	add	r5, r3, r5
   12c9c:	str	r5, [r4, #32]
   12ca0:	cmp	r5, #0
   12ca4:	beq	12d78 <flatcc_builder_default_alloc@@Base+0x3ac>
   12ca8:	ldr	r3, [r4, #88]	; 0x58
   12cac:	movw	r2, #36409	; 0x8e39
   12cb0:	movt	r2, #14563	; 0x38e3
   12cb4:	umull	r2, r3, r2, r3
   12cb8:	lsr	r3, r3, #3
   12cbc:	ldr	r2, [r4, #176]	; 0xb0
   12cc0:	cmp	r2, #0
   12cc4:	cmpgt	r3, r2
   12cc8:	movgt	r1, #1
   12ccc:	movle	r1, #0
   12cd0:	cmp	r1, #0
   12cd4:	movne	r3, r2
   12cd8:	str	r3, [r4, #160]	; 0xa0
   12cdc:	b	12d08 <flatcc_builder_default_alloc@@Base+0x33c>
   12ce0:	ldr	r3, [pc, #152]	; 12d80 <flatcc_builder_default_alloc@@Base+0x3b4>
   12ce4:	mov	r2, #308	; 0x134
   12ce8:	movw	r1, #32828	; 0x803c
   12cec:	movt	r1, #1
   12cf0:	movw	r0, #32912	; 0x8090
   12cf4:	movt	r0, #1
   12cf8:	bl	12060 <__assert_fail@plt>
   12cfc:	ldr	r3, [r0, #32]
   12d00:	add	r3, r3, #36	; 0x24
   12d04:	str	r3, [r0, #32]
   12d08:	ldr	r3, [r4, #32]
   12d0c:	ldr	r2, [r4, #20]
   12d10:	str	r2, [r3, #8]
   12d14:	ldr	r3, [r4, #32]
   12d18:	ldrh	r2, [r4, #130]	; 0x82
   12d1c:	strh	r2, [r3, #12]
   12d20:	strh	r6, [r4, #130]	; 0x82
   12d24:	ldr	r3, [r4, #32]
   12d28:	ldr	r2, [r4, #28]
   12d2c:	str	r2, [r3]
   12d30:	ldr	r3, [r4, #32]
   12d34:	mvn	r2, #3
   12d38:	str	r2, [r3, #4]
   12d3c:	ldr	r3, [r4, #28]
   12d40:	ldr	r2, [r4, #20]
   12d44:	add	r3, r3, r2
   12d48:	add	r3, r3, #7
   12d4c:	bic	r3, r3, #7
   12d50:	str	r3, [r4, #28]
   12d54:	mov	r0, #0
   12d58:	str	r0, [r4, #20]
   12d5c:	add	sp, sp, #12
   12d60:	ldrd	r4, [sp]
   12d64:	ldrd	r6, [sp, #8]
   12d68:	add	sp, sp, #16
   12d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d70:	mvn	r0, #0
   12d74:	b	12d5c <flatcc_builder_default_alloc@@Base+0x390>
   12d78:	mvn	r0, #0
   12d7c:	b	12d5c <flatcc_builder_default_alloc@@Base+0x390>
   12d80:	andeq	r7, r1, r8, lsl #22
   12d84:	strd	r4, [sp, #-16]!
   12d88:	str	r6, [sp, #8]
   12d8c:	str	lr, [sp, #12]
   12d90:	sub	sp, sp, #88	; 0x58
   12d94:	cmn	r2, #-1073741823	; 0xc0000001
   12d98:	bhi	12f7c <flatcc_builder_default_alloc@@Base+0x5b0>
   12d9c:	ldrh	ip, [r0, #128]	; 0x80
   12da0:	cmp	ip, #3
   12da4:	movls	ip, #4
   12da8:	strhls	ip, [r0, #128]	; 0x80
   12dac:	str	r2, [sp, #84]	; 0x54
   12db0:	ldr	lr, [r0, #136]	; 0x88
   12db4:	and	ip, lr, #3
   12db8:	mov	r4, #4
   12dbc:	str	r4, [sp, #12]
   12dc0:	add	r5, sp, #84	; 0x54
   12dc4:	str	r5, [sp, #20]
   12dc8:	str	r4, [sp, #24]
   12dcc:	mov	r4, #1
   12dd0:	str	r4, [sp, #16]
   12dd4:	lsls	r4, r2, #2
   12dd8:	beq	12df4 <flatcc_builder_default_alloc@@Base+0x428>
   12ddc:	add	r5, r4, #4
   12de0:	str	r5, [sp, #12]
   12de4:	str	r1, [sp, #28]
   12de8:	str	r4, [sp, #32]
   12dec:	mov	r4, #2
   12df0:	str	r4, [sp, #16]
   12df4:	cmp	ip, #0
   12df8:	beq	12e2c <flatcc_builder_default_alloc@@Base+0x460>
   12dfc:	ldr	r4, [sp, #12]
   12e00:	add	r4, r4, ip
   12e04:	str	r4, [sp, #12]
   12e08:	ldr	r4, [sp, #16]
   12e0c:	add	r4, r4, #1
   12e10:	add	r5, sp, #88	; 0x58
   12e14:	add	r6, r5, r4, lsl #3
   12e18:	movw	r5, #30956	; 0x78ec
   12e1c:	movt	r5, #1
   12e20:	str	r5, [r6, #-76]	; 0xffffffb4
   12e24:	str	ip, [r6, #-72]	; 0xffffffb8
   12e28:	str	r4, [sp, #16]
   12e2c:	mov	r5, r0
   12e30:	ldr	r6, [sp, #12]
   12e34:	cmp	r2, #0
   12e38:	beq	12ef4 <flatcc_builder_default_alloc@@Base+0x528>
   12e3c:	mov	ip, r3
   12e40:	add	r4, r2, r3
   12e44:	mov	r2, r1
   12e48:	add	r1, r1, r6
   12e4c:	sub	r0, r1, lr
   12e50:	b	12e74 <flatcc_builder_default_alloc@@Base+0x4a8>
   12e54:	cmp	r3, #0
   12e58:	beq	12ed8 <flatcc_builder_default_alloc@@Base+0x50c>
   12e5c:	ldrb	r1, [ip]
   12e60:	cmp	r1, #0
   12e64:	bne	12ebc <flatcc_builder_default_alloc@@Base+0x4f0>
   12e68:	add	ip, ip, #1
   12e6c:	cmp	ip, r4
   12e70:	beq	12ef4 <flatcc_builder_default_alloc@@Base+0x528>
   12e74:	ldr	r1, [r2], #4
   12e78:	cmp	r1, #0
   12e7c:	beq	12e54 <flatcc_builder_default_alloc@@Base+0x488>
   12e80:	sub	lr, r0, r2
   12e84:	add	r1, lr, r1
   12e88:	str	r1, [r2, #-4]
   12e8c:	cmp	r3, #0
   12e90:	beq	12e68 <flatcc_builder_default_alloc@@Base+0x49c>
   12e94:	ldrb	r1, [ip]
   12e98:	cmp	r1, #0
   12e9c:	bne	12e68 <flatcc_builder_default_alloc@@Base+0x49c>
   12ea0:	ldr	r3, [pc, #220]	; 12f84 <flatcc_builder_default_alloc@@Base+0x5b8>
   12ea4:	movw	r2, #1457	; 0x5b1
   12ea8:	movw	r1, #32828	; 0x803c
   12eac:	movt	r1, #1
   12eb0:	movw	r0, #32900	; 0x8084
   12eb4:	movt	r0, #1
   12eb8:	bl	12060 <__assert_fail@plt>
   12ebc:	ldr	r3, [pc, #192]	; 12f84 <flatcc_builder_default_alloc@@Base+0x5b8>
   12ec0:	movw	r2, #1461	; 0x5b5
   12ec4:	movw	r1, #32828	; 0x803c
   12ec8:	movt	r1, #1
   12ecc:	movw	r0, #32916	; 0x8094
   12ed0:	movt	r0, #1
   12ed4:	bl	12060 <__assert_fail@plt>
   12ed8:	ldr	r3, [pc, #164]	; 12f84 <flatcc_builder_default_alloc@@Base+0x5b8>
   12edc:	movw	r2, #1463	; 0x5b7
   12ee0:	movw	r1, #32828	; 0x803c
   12ee4:	movt	r1, #1
   12ee8:	movw	r0, #32912	; 0x8090
   12eec:	movt	r0, #1
   12ef0:	bl	12060 <__assert_fail@plt>
   12ef4:	ldr	r3, [r5, #136]	; 0x88
   12ef8:	sub	r4, r3, r6
   12efc:	cmp	r3, r4
   12f00:	ble	12f44 <flatcc_builder_default_alloc@@Base+0x578>
   12f04:	str	r6, [sp]
   12f08:	ldr	r6, [r5, #44]	; 0x2c
   12f0c:	mov	r3, r4
   12f10:	ldr	r2, [sp, #16]
   12f14:	add	r1, sp, #20
   12f18:	ldr	r0, [r5, #36]	; 0x24
   12f1c:	blx	r6
   12f20:	cmp	r0, #0
   12f24:	streq	r4, [r5, #136]	; 0x88
   12f28:	bne	12f60 <flatcc_builder_default_alloc@@Base+0x594>
   12f2c:	mov	r0, r4
   12f30:	add	sp, sp, #88	; 0x58
   12f34:	ldrd	r4, [sp]
   12f38:	ldr	r6, [sp, #8]
   12f3c:	add	sp, sp, #12
   12f40:	pop	{pc}		; (ldr pc, [sp], #4)
   12f44:	ldr	r3, [pc, #60]	; 12f88 <flatcc_builder_default_alloc@@Base+0x5bc>
   12f48:	movw	r2, #647	; 0x287
   12f4c:	movw	r1, #32828	; 0x803c
   12f50:	movt	r1, #1
   12f54:	movw	r0, #32912	; 0x8090
   12f58:	movt	r0, #1
   12f5c:	bl	12060 <__assert_fail@plt>
   12f60:	ldr	r3, [pc, #32]	; 12f88 <flatcc_builder_default_alloc@@Base+0x5bc>
   12f64:	movw	r2, #651	; 0x28b
   12f68:	movw	r1, #32828	; 0x803c
   12f6c:	movt	r1, #1
   12f70:	movw	r0, #32912	; 0x8090
   12f74:	movt	r0, #1
   12f78:	bl	12060 <__assert_fail@plt>
   12f7c:	mov	r4, #0
   12f80:	b	12f2c <flatcc_builder_default_alloc@@Base+0x560>
   12f84:	andeq	r7, r1, r8, lsl fp
   12f88:	andeq	r7, r1, r8, lsr fp

00012f8c <flatcc_builder_flush_vtable_cache@@Base>:
   12f8c:	ldr	r3, [r0, #116]	; 0x74
   12f90:	cmp	r3, #0
   12f94:	bxeq	lr
   12f98:	str	r4, [sp, #-8]!
   12f9c:	str	lr, [sp, #4]
   12fa0:	mov	r4, r0
   12fa4:	ldr	r2, [r0, #96]	; 0x60
   12fa8:	mov	r1, #0
   12fac:	ldr	r0, [r0, #92]	; 0x5c
   12fb0:	bl	12030 <memset@plt>
   12fb4:	mov	r3, #16
   12fb8:	str	r3, [r4, #124]	; 0x7c
   12fbc:	mov	r3, #0
   12fc0:	str	r3, [r4, #120]	; 0x78
   12fc4:	ldr	r4, [sp]
   12fc8:	add	sp, sp, #4
   12fcc:	pop	{pc}		; (ldr pc, [sp], #4)

00012fd0 <flatcc_builder_custom_init@@Base>:
   12fd0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12fd4:	strd	r6, [sp, #8]
   12fd8:	str	r8, [sp, #16]
   12fdc:	str	lr, [sp, #20]
   12fe0:	mov	r4, r0
   12fe4:	mov	r6, r1
   12fe8:	mov	r7, r2
   12fec:	mov	r5, r3
   12ff0:	mov	r2, #232	; 0xe8
   12ff4:	mov	r1, #0
   12ff8:	bl	12030 <memset@plt>
   12ffc:	cmp	r6, #0
   13000:	beq	13040 <flatcc_builder_custom_init@@Base+0x70>
   13004:	movw	r3, #10700	; 0x29cc
   13008:	movt	r3, #1
   1300c:	cmp	r5, #0
   13010:	moveq	r5, r3
   13014:	ldr	r3, [sp, #24]
   13018:	str	r3, [r4, #40]	; 0x28
   1301c:	str	r5, [r4, #48]	; 0x30
   13020:	str	r7, [r4, #36]	; 0x24
   13024:	str	r6, [r4, #44]	; 0x2c
   13028:	mov	r0, #0
   1302c:	ldrd	r4, [sp]
   13030:	ldrd	r6, [sp, #8]
   13034:	ldr	r8, [sp, #16]
   13038:	add	sp, sp, #20
   1303c:	pop	{pc}		; (ldr pc, [sp], #4)
   13040:	mov	r3, #1
   13044:	str	r3, [r4, #184]	; 0xb8
   13048:	add	r7, r4, #188	; 0xbc
   1304c:	movw	r6, #28828	; 0x709c
   13050:	movt	r6, #1
   13054:	b	13004 <flatcc_builder_custom_init@@Base+0x34>

00013058 <flatcc_builder_init@@Base>:
   13058:	str	r4, [sp, #-8]!
   1305c:	str	lr, [sp, #4]
   13060:	mov	r4, r0
   13064:	mov	r2, #232	; 0xe8
   13068:	mov	r1, #0
   1306c:	bl	12030 <memset@plt>
   13070:	mov	r3, #1
   13074:	str	r3, [r4, #184]	; 0xb8
   13078:	movw	r3, #10700	; 0x29cc
   1307c:	movt	r3, #1
   13080:	str	r3, [r4, #48]	; 0x30
   13084:	add	r3, r4, #188	; 0xbc
   13088:	str	r3, [r4, #36]	; 0x24
   1308c:	movw	r3, #28828	; 0x709c
   13090:	movt	r3, #1
   13094:	str	r3, [r4, #44]	; 0x2c
   13098:	mov	r0, #0
   1309c:	ldr	r4, [sp]
   130a0:	add	sp, sp, #4
   130a4:	pop	{pc}		; (ldr pc, [sp], #4)

000130a8 <flatcc_builder_custom_reset@@Base>:
   130a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130ac:	strd	r6, [sp, #8]
   130b0:	strd	r8, [sp, #16]
   130b4:	strd	sl, [sp, #24]
   130b8:	str	lr, [sp, #32]
   130bc:	sub	sp, sp, #12
   130c0:	mov	r6, r0
   130c4:	mov	fp, r1
   130c8:	mov	r9, r2
   130cc:	mov	r4, r0
   130d0:	mov	r5, #0
   130d4:	mov	sl, r5
   130d8:	mov	r8, #1
   130dc:	b	13100 <flatcc_builder_custom_reset@@Base+0x58>
   130e0:	ldr	r2, [r7, #56]	; 0x38
   130e4:	mov	r1, sl
   130e8:	ldr	r0, [r7, #52]	; 0x34
   130ec:	bl	12030 <memset@plt>
   130f0:	add	r5, r5, #1
   130f4:	add	r4, r4, #8
   130f8:	cmp	r5, #8
   130fc:	beq	13170 <flatcc_builder_custom_reset@@Base+0xc8>
   13100:	add	r1, r4, #52	; 0x34
   13104:	mov	r7, r4
   13108:	ldr	r3, [r4, #52]	; 0x34
   1310c:	cmp	r3, #0
   13110:	beq	13148 <flatcc_builder_custom_reset@@Base+0xa0>
   13114:	cmp	r5, #5
   13118:	cmpne	r9, #0
   1311c:	beq	130e0 <flatcc_builder_custom_reset@@Base+0x38>
   13120:	str	r5, [sp]
   13124:	mov	r3, r8
   13128:	mov	r2, r8
   1312c:	ldr	r0, [r6, #40]	; 0x28
   13130:	ldr	ip, [r6, #48]	; 0x30
   13134:	blx	ip
   13138:	cmp	r0, #0
   1313c:	beq	130e0 <flatcc_builder_custom_reset@@Base+0x38>
   13140:	mvn	r0, #0
   13144:	b	131ec <flatcc_builder_custom_reset@@Base+0x144>
   13148:	ldr	r3, [r4, #56]	; 0x38
   1314c:	cmp	r3, #0
   13150:	beq	130f0 <flatcc_builder_custom_reset@@Base+0x48>
   13154:	ldr	r3, [pc, #188]	; 13218 <flatcc_builder_custom_reset@@Base+0x170>
   13158:	movw	r2, #434	; 0x1b2
   1315c:	movw	r1, #32828	; 0x803c
   13160:	movt	r1, #1
   13164:	movw	r0, #32932	; 0x80a4
   13168:	movt	r0, #1
   1316c:	bl	12060 <__assert_fail@plt>
   13170:	mov	r3, #0
   13174:	str	r3, [r6, #120]	; 0x78
   13178:	ldr	r3, [r6, #124]	; 0x7c
   1317c:	cmp	r3, #0
   13180:	movne	r3, #16
   13184:	strne	r3, [r6, #124]	; 0x7c
   13188:	mov	r3, #0
   1318c:	strh	r3, [r6, #128]	; 0x80
   13190:	str	r3, [r6, #136]	; 0x88
   13194:	str	r3, [r6, #140]	; 0x8c
   13198:	str	r3, [r6, #156]	; 0x9c
   1319c:	str	r3, [r6, #160]	; 0xa0
   131a0:	str	r3, [r6, #20]
   131a4:	str	r3, [r6, #24]
   131a8:	str	r3, [r6, #148]	; 0x94
   131ac:	str	r3, [r6, #152]	; 0x98
   131b0:	ldr	r2, [r6, #60]	; 0x3c
   131b4:	str	r2, [r6, #16]
   131b8:	ldr	r2, [r6, #76]	; 0x4c
   131bc:	str	r2, [r6]
   131c0:	ldr	r2, [r6, #52]	; 0x34
   131c4:	str	r2, [r6, #4]
   131c8:	str	r3, [r6, #32]
   131cc:	cmp	fp, r3
   131d0:	beq	131e0 <flatcc_builder_custom_reset@@Base+0x138>
   131d4:	str	r3, [r6, #172]	; 0xac
   131d8:	str	r3, [r6, #176]	; 0xb0
   131dc:	str	r3, [r6, #180]	; 0xb4
   131e0:	ldr	r0, [r6, #184]	; 0xb8
   131e4:	cmp	r0, #0
   131e8:	bne	13208 <flatcc_builder_custom_reset@@Base+0x160>
   131ec:	add	sp, sp, #12
   131f0:	ldrd	r4, [sp]
   131f4:	ldrd	r6, [sp, #8]
   131f8:	ldrd	r8, [sp, #16]
   131fc:	ldrd	sl, [sp, #24]
   13200:	add	sp, sp, #32
   13204:	pop	{pc}		; (ldr pc, [sp], #4)
   13208:	add	r0, r6, #188	; 0xbc
   1320c:	bl	16f44 <flatcc_emitter_reset@@Base>
   13210:	mov	r0, #0
   13214:	b	131ec <flatcc_builder_custom_reset@@Base+0x144>
   13218:	andeq	r7, r1, r4, asr #22

0001321c <flatcc_builder_reset@@Base>:
   1321c:	str	r4, [sp, #-8]!
   13220:	str	lr, [sp, #4]
   13224:	mov	r2, #0
   13228:	mov	r1, r2
   1322c:	bl	130a8 <flatcc_builder_custom_reset@@Base>
   13230:	ldr	r4, [sp]
   13234:	add	sp, sp, #4
   13238:	pop	{pc}		; (ldr pc, [sp], #4)

0001323c <flatcc_builder_clear@@Base>:
   1323c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13240:	strd	r6, [sp, #8]
   13244:	str	r8, [sp, #16]
   13248:	str	lr, [sp, #20]
   1324c:	sub	sp, sp, #8
   13250:	mov	r6, r0
   13254:	add	r5, r0, #52	; 0x34
   13258:	mov	r4, #0
   1325c:	mov	r8, r4
   13260:	str	r4, [sp]
   13264:	ldr	r7, [r6, #48]	; 0x30
   13268:	mov	r3, r8
   1326c:	mov	r2, r8
   13270:	mov	r1, r5
   13274:	ldr	r0, [r6, #40]	; 0x28
   13278:	blx	r7
   1327c:	add	r4, r4, #1
   13280:	add	r5, r5, #8
   13284:	cmp	r4, #8
   13288:	bne	13260 <flatcc_builder_clear@@Base+0x24>
   1328c:	ldr	r3, [r6, #184]	; 0xb8
   13290:	cmp	r3, #0
   13294:	bne	132c0 <flatcc_builder_clear@@Base+0x84>
   13298:	mov	r2, #232	; 0xe8
   1329c:	mov	r1, #0
   132a0:	mov	r0, r6
   132a4:	bl	12030 <memset@plt>
   132a8:	add	sp, sp, #8
   132ac:	ldrd	r4, [sp]
   132b0:	ldrd	r6, [sp, #8]
   132b4:	ldr	r8, [sp, #16]
   132b8:	add	sp, sp, #20
   132bc:	pop	{pc}		; (ldr pc, [sp], #4)
   132c0:	add	r0, r6, #188	; 0xbc
   132c4:	bl	17020 <flatcc_emitter_clear@@Base>
   132c8:	b	13298 <flatcc_builder_clear@@Base+0x5c>

000132cc <flatcc_builder_enter_user_frame_ptr@@Base>:
   132cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   132d0:	strd	r6, [sp, #8]
   132d4:	str	r8, [sp, #16]
   132d8:	str	lr, [sp, #20]
   132dc:	sub	sp, sp, #8
   132e0:	mov	r4, r0
   132e4:	add	r5, r1, #3
   132e8:	bic	r5, r5, #3
   132ec:	add	r5, r5, #4
   132f0:	ldr	r6, [r0, #228]	; 0xe4
   132f4:	add	r2, r6, r5
   132f8:	ldr	r3, [r0, #112]	; 0x70
   132fc:	cmp	r2, r3
   13300:	bls	13328 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   13304:	mov	r3, #7
   13308:	str	r3, [sp]
   1330c:	ldr	r7, [r0, #48]	; 0x30
   13310:	mov	r3, #0
   13314:	add	r1, r0, #108	; 0x6c
   13318:	ldr	r0, [r0, #40]	; 0x28
   1331c:	blx	r7
   13320:	cmp	r0, #0
   13324:	bne	13380 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   13328:	ldr	r8, [r4, #108]	; 0x6c
   1332c:	adds	r7, r8, r6
   13330:	moveq	r0, #0
   13334:	beq	13368 <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   13338:	mov	r2, r5
   1333c:	mov	r1, #0
   13340:	mov	r0, r7
   13344:	bl	12030 <memset@plt>
   13348:	add	r0, r7, #4
   1334c:	ldr	r3, [r4, #224]	; 0xe0
   13350:	str	r3, [r8, r6]
   13354:	ldr	r1, [r4, #228]	; 0xe4
   13358:	add	r3, r1, #4
   1335c:	str	r3, [r4, #224]	; 0xe0
   13360:	add	r5, r1, r5
   13364:	str	r5, [r4, #228]	; 0xe4
   13368:	add	sp, sp, #8
   1336c:	ldrd	r4, [sp]
   13370:	ldrd	r6, [sp, #8]
   13374:	ldr	r8, [sp, #16]
   13378:	add	sp, sp, #20
   1337c:	pop	{pc}		; (ldr pc, [sp], #4)
   13380:	ldr	r3, [pc, #20]	; 1339c <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   13384:	mov	r2, #308	; 0x134
   13388:	movw	r1, #32828	; 0x803c
   1338c:	movt	r1, #1
   13390:	movw	r0, #32912	; 0x8090
   13394:	movt	r0, #1
   13398:	bl	12060 <__assert_fail@plt>
   1339c:	andeq	r7, r1, r8, lsl #22

000133a0 <flatcc_builder_enter_user_frame@@Base>:
   133a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   133a4:	strd	r6, [sp, #8]
   133a8:	str	lr, [sp, #16]
   133ac:	sub	sp, sp, #12
   133b0:	mov	r4, r0
   133b4:	add	r5, r1, #3
   133b8:	bic	r5, r5, #3
   133bc:	add	r5, r5, #4
   133c0:	ldr	r6, [r0, #228]	; 0xe4
   133c4:	add	r2, r6, r5
   133c8:	ldr	r3, [r0, #112]	; 0x70
   133cc:	cmp	r2, r3
   133d0:	bls	133f8 <flatcc_builder_enter_user_frame@@Base+0x58>
   133d4:	mov	r3, #7
   133d8:	str	r3, [sp]
   133dc:	ldr	r7, [r0, #48]	; 0x30
   133e0:	mov	r3, #0
   133e4:	add	r1, r0, #108	; 0x6c
   133e8:	ldr	r0, [r0, #40]	; 0x28
   133ec:	blx	r7
   133f0:	cmp	r0, #0
   133f4:	bne	13440 <flatcc_builder_enter_user_frame@@Base+0xa0>
   133f8:	ldr	r7, [r4, #108]	; 0x6c
   133fc:	adds	r0, r7, r6
   13400:	beq	1342c <flatcc_builder_enter_user_frame@@Base+0x8c>
   13404:	mov	r2, r5
   13408:	mov	r1, #0
   1340c:	bl	12030 <memset@plt>
   13410:	ldr	r3, [r4, #224]	; 0xe0
   13414:	str	r3, [r7, r6]
   13418:	ldr	r1, [r4, #228]	; 0xe4
   1341c:	add	r0, r1, #4
   13420:	str	r0, [r4, #224]	; 0xe0
   13424:	add	r5, r1, r5
   13428:	str	r5, [r4, #228]	; 0xe4
   1342c:	add	sp, sp, #12
   13430:	ldrd	r4, [sp]
   13434:	ldrd	r6, [sp, #8]
   13438:	add	sp, sp, #16
   1343c:	pop	{pc}		; (ldr pc, [sp], #4)
   13440:	ldr	r3, [pc, #20]	; 1345c <flatcc_builder_enter_user_frame@@Base+0xbc>
   13444:	mov	r2, #308	; 0x134
   13448:	movw	r1, #32828	; 0x803c
   1344c:	movt	r1, #1
   13450:	movw	r0, #32912	; 0x8090
   13454:	movt	r0, #1
   13458:	bl	12060 <__assert_fail@plt>
   1345c:	andeq	r7, r1, r8, lsl #22

00013460 <flatcc_builder_exit_user_frame@@Base>:
   13460:	ldr	r3, [r0, #224]	; 0xe0
   13464:	cmp	r3, #0
   13468:	beq	1348c <flatcc_builder_exit_user_frame@@Base+0x2c>
   1346c:	ldr	r2, [r0, #108]	; 0x6c
   13470:	add	r2, r2, r3
   13474:	sub	r3, r3, #4
   13478:	str	r3, [r0, #228]	; 0xe4
   1347c:	ldr	r3, [r2, #-4]
   13480:	str	r3, [r0, #224]	; 0xe0
   13484:	mov	r0, r3
   13488:	bx	lr
   1348c:	str	r4, [sp, #-8]!
   13490:	str	lr, [sp, #4]
   13494:	ldr	r3, [pc, #20]	; 134b0 <flatcc_builder_exit_user_frame@@Base+0x50>
   13498:	movw	r2, #542	; 0x21e
   1349c:	movw	r1, #32828	; 0x803c
   134a0:	movt	r1, #1
   134a4:	movw	r0, #32952	; 0x80b8
   134a8:	movt	r0, #1
   134ac:	bl	12060 <__assert_fail@plt>
   134b0:	andeq	r7, r1, r0, ror #22

000134b4 <flatcc_builder_exit_user_frame_at@@Base>:
   134b4:	str	r4, [sp, #-8]!
   134b8:	str	lr, [sp, #4]
   134bc:	ldr	r3, [r0, #224]	; 0xe0
   134c0:	cmp	r3, r1
   134c4:	bcc	134dc <flatcc_builder_exit_user_frame_at@@Base+0x28>
   134c8:	str	r1, [r0, #224]	; 0xe0
   134cc:	bl	13460 <flatcc_builder_exit_user_frame@@Base>
   134d0:	ldr	r4, [sp]
   134d4:	add	sp, sp, #4
   134d8:	pop	{pc}		; (ldr pc, [sp], #4)
   134dc:	ldr	r3, [pc, #20]	; 134f8 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   134e0:	movw	r2, #551	; 0x227
   134e4:	movw	r1, #32828	; 0x803c
   134e8:	movt	r1, #1
   134ec:	movw	r0, #32980	; 0x80d4
   134f0:	movt	r0, #1
   134f4:	bl	12060 <__assert_fail@plt>
   134f8:	andeq	r7, r1, r0, lsl #23

000134fc <flatcc_builder_get_current_user_frame@@Base>:
   134fc:	ldr	r0, [r0, #224]	; 0xe0
   13500:	bx	lr

00013504 <flatcc_builder_get_user_frame_ptr@@Base>:
   13504:	ldr	r0, [r0, #108]	; 0x6c
   13508:	add	r0, r0, r1
   1350c:	bx	lr

00013510 <flatcc_builder_embed_buffer@@Base>:
   13510:	strd	r4, [sp, #-16]!
   13514:	str	r6, [sp, #8]
   13518:	str	lr, [sp, #12]
   1351c:	sub	sp, sp, #88	; 0x58
   13520:	mov	r4, r0
   13524:	mov	r6, r2
   13528:	mov	r5, r3
   1352c:	ldr	r3, [r0, #152]	; 0x98
   13530:	adds	r3, r3, #0
   13534:	movne	r3, #1
   13538:	mov	r2, r1
   1353c:	add	r1, sp, #104	; 0x68
   13540:	bl	12af4 <flatcc_builder_default_alloc@@Base+0x128>
   13544:	cmp	r0, #0
   13548:	bne	136a4 <flatcc_builder_embed_buffer@@Base+0x194>
   1354c:	ldr	r3, [sp, #108]	; 0x6c
   13550:	and	r3, r3, #2
   13554:	cmp	r3, #0
   13558:	movne	r2, #4
   1355c:	moveq	r2, #0
   13560:	ldr	r1, [r4, #136]	; 0x88
   13564:	sub	r3, r1, r5
   13568:	sub	r2, r3, r2
   1356c:	ldrh	r3, [sp, #104]	; 0x68
   13570:	sub	r3, r3, #1
   13574:	and	r3, r3, r2
   13578:	add	r2, r5, r3
   1357c:	str	r2, [sp, #84]	; 0x54
   13580:	mov	r2, #0
   13584:	str	r2, [sp, #12]
   13588:	str	r2, [sp, #16]
   1358c:	ldr	r2, [r4, #152]	; 0x98
   13590:	cmp	r2, #0
   13594:	beq	135b4 <flatcc_builder_embed_buffer@@Base+0xa4>
   13598:	mov	r2, #4
   1359c:	str	r2, [sp, #12]
   135a0:	add	r0, sp, #84	; 0x54
   135a4:	str	r0, [sp, #20]
   135a8:	str	r2, [sp, #24]
   135ac:	mov	r2, #1
   135b0:	str	r2, [sp, #16]
   135b4:	cmp	r5, #0
   135b8:	beq	135e4 <flatcc_builder_embed_buffer@@Base+0xd4>
   135bc:	ldr	r2, [sp, #12]
   135c0:	add	r2, r2, r5
   135c4:	str	r2, [sp, #12]
   135c8:	ldr	r2, [sp, #16]
   135cc:	add	r2, r2, #1
   135d0:	add	r0, sp, #88	; 0x58
   135d4:	add	r0, r0, r2, lsl #3
   135d8:	str	r6, [r0, #-76]	; 0xffffffb4
   135dc:	str	r5, [r0, #-72]	; 0xffffffb8
   135e0:	str	r2, [sp, #16]
   135e4:	cmp	r3, #0
   135e8:	beq	1361c <flatcc_builder_embed_buffer@@Base+0x10c>
   135ec:	ldr	r2, [sp, #12]
   135f0:	add	r2, r2, r3
   135f4:	str	r2, [sp, #12]
   135f8:	ldr	r2, [sp, #16]
   135fc:	add	r2, r2, #1
   13600:	add	r0, sp, #88	; 0x58
   13604:	add	ip, r0, r2, lsl #3
   13608:	movw	r0, #30956	; 0x78ec
   1360c:	movt	r0, #1
   13610:	str	r0, [ip, #-76]	; 0xffffffb4
   13614:	str	r3, [ip, #-72]	; 0xffffffb8
   13618:	str	r2, [sp, #16]
   1361c:	ldr	r3, [sp, #12]
   13620:	sub	r5, r1, r3
   13624:	cmp	r1, r5
   13628:	ble	1366c <flatcc_builder_embed_buffer@@Base+0x15c>
   1362c:	str	r3, [sp]
   13630:	ldr	r6, [r4, #44]	; 0x2c
   13634:	mov	r3, r5
   13638:	ldr	r2, [sp, #16]
   1363c:	add	r1, sp, #20
   13640:	ldr	r0, [r4, #36]	; 0x24
   13644:	blx	r6
   13648:	cmp	r0, #0
   1364c:	streq	r5, [r4, #136]	; 0x88
   13650:	bne	13688 <flatcc_builder_embed_buffer@@Base+0x178>
   13654:	mov	r0, r5
   13658:	add	sp, sp, #88	; 0x58
   1365c:	ldrd	r4, [sp]
   13660:	ldr	r6, [sp, #8]
   13664:	add	sp, sp, #12
   13668:	pop	{pc}		; (ldr pc, [sp], #4)
   1366c:	ldr	r3, [pc, #56]	; 136ac <flatcc_builder_embed_buffer@@Base+0x19c>
   13670:	movw	r2, #647	; 0x287
   13674:	movw	r1, #32828	; 0x803c
   13678:	movt	r1, #1
   1367c:	movw	r0, #32912	; 0x8090
   13680:	movt	r0, #1
   13684:	bl	12060 <__assert_fail@plt>
   13688:	ldr	r3, [pc, #28]	; 136ac <flatcc_builder_embed_buffer@@Base+0x19c>
   1368c:	movw	r2, #651	; 0x28b
   13690:	movw	r1, #32828	; 0x803c
   13694:	movt	r1, #1
   13698:	movw	r0, #32912	; 0x8090
   1369c:	movt	r0, #1
   136a0:	bl	12060 <__assert_fail@plt>
   136a4:	mov	r5, #0
   136a8:	b	13654 <flatcc_builder_embed_buffer@@Base+0x144>
   136ac:	andeq	r7, r1, r8, lsr fp

000136b0 <flatcc_builder_create_buffer@@Base>:
   136b0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   136b4:	strd	r6, [sp, #8]
   136b8:	strd	r8, [sp, #16]
   136bc:	str	lr, [sp, #24]
   136c0:	sub	sp, sp, #100	; 0x64
   136c4:	mov	r5, r0
   136c8:	mov	r8, r1
   136cc:	mov	r4, r3
   136d0:	ldr	r7, [sp, #132]	; 0x84
   136d4:	mov	r3, #0
   136d8:	str	r3, [sp, #12]
   136dc:	and	r6, r7, #1
   136e0:	mov	r3, r6
   136e4:	add	r1, sp, #128	; 0x80
   136e8:	bl	12af4 <flatcc_builder_default_alloc@@Base+0x128>
   136ec:	cmp	r0, #0
   136f0:	bne	138ec <flatcc_builder_create_buffer@@Base+0x23c>
   136f4:	ldrh	r2, [sp, #128]	; 0x80
   136f8:	ldrh	r3, [r5, #128]	; 0x80
   136fc:	cmp	r3, r2
   13700:	strhcc	r2, [r5, #128]	; 0x80
   13704:	cmp	r8, #0
   13708:	ldrne	r3, [r8]
   1370c:	strne	r3, [sp, #12]
   13710:	ldr	r1, [sp, #12]
   13714:	cmp	r1, #0
   13718:	movne	r1, #4
   1371c:	and	r3, r7, #2
   13720:	cmp	r3, #0
   13724:	movne	ip, #4
   13728:	moveq	ip, #0
   1372c:	ldr	r0, [r5, #136]	; 0x88
   13730:	sub	r3, r0, #4
   13734:	sub	r3, r3, r1
   13738:	sub	r3, r3, ip
   1373c:	sub	r2, r2, #1
   13740:	and	r3, r3, r2
   13744:	mov	r2, #0
   13748:	str	r2, [sp, #16]
   1374c:	str	r2, [sp, #20]
   13750:	ands	r7, r7, #3
   13754:	beq	13774 <flatcc_builder_create_buffer@@Base+0xc4>
   13758:	mov	r2, #4
   1375c:	str	r2, [sp, #16]
   13760:	add	ip, sp, #88	; 0x58
   13764:	str	ip, [sp, #24]
   13768:	str	r2, [sp, #28]
   1376c:	mov	r2, #1
   13770:	str	r2, [sp, #20]
   13774:	ldr	ip, [sp, #16]
   13778:	add	ip, ip, #4
   1377c:	str	ip, [sp, #16]
   13780:	ldr	lr, [sp, #20]
   13784:	add	r2, lr, #1
   13788:	add	r8, sp, #96	; 0x60
   1378c:	add	r8, r8, r2, lsl #3
   13790:	add	r9, sp, #92	; 0x5c
   13794:	str	r9, [r8, #-80]	; 0xffffffb0
   13798:	mov	r9, #4
   1379c:	str	r9, [r8, #-76]	; 0xffffffb4
   137a0:	str	r2, [sp, #20]
   137a4:	cmp	r1, #0
   137a8:	beq	137d4 <flatcc_builder_create_buffer@@Base+0x124>
   137ac:	add	ip, ip, r1
   137b0:	str	ip, [sp, #16]
   137b4:	add	r2, lr, #2
   137b8:	add	ip, sp, #96	; 0x60
   137bc:	add	r2, ip, r2, lsl #3
   137c0:	add	ip, sp, #12
   137c4:	str	ip, [r2, #-80]	; 0xffffffb0
   137c8:	str	r1, [r2, #-76]	; 0xffffffb4
   137cc:	add	lr, lr, #2
   137d0:	str	lr, [sp, #20]
   137d4:	cmp	r3, #0
   137d8:	beq	1380c <flatcc_builder_create_buffer@@Base+0x15c>
   137dc:	ldr	r2, [sp, #16]
   137e0:	add	r2, r2, r3
   137e4:	str	r2, [sp, #16]
   137e8:	ldr	r2, [sp, #20]
   137ec:	add	r2, r2, #1
   137f0:	add	r1, sp, #96	; 0x60
   137f4:	add	ip, r1, r2, lsl #3
   137f8:	movw	r1, #30956	; 0x78ec
   137fc:	movt	r1, #1
   13800:	str	r1, [ip, #-80]	; 0xffffffb0
   13804:	str	r3, [ip, #-76]	; 0xffffffb4
   13808:	str	r2, [sp, #20]
   1380c:	ldr	r1, [sp, #16]
   13810:	sub	r3, r0, r1
   13814:	cmp	r7, #0
   13818:	movne	r2, #4
   1381c:	moveq	r2, #0
   13820:	add	r3, r3, r2
   13824:	cmp	r6, #0
   13828:	ldrne	r2, [r5, #144]	; 0x90
   1382c:	ldreq	r2, [r5, #140]	; 0x8c
   13830:	sub	r2, r2, r3
   13834:	str	r2, [sp, #88]	; 0x58
   13838:	sub	r4, r4, r3
   1383c:	str	r4, [sp, #92]	; 0x5c
   13840:	sub	r4, r0, r1
   13844:	cmp	r0, r4
   13848:	ble	13898 <flatcc_builder_create_buffer@@Base+0x1e8>
   1384c:	str	r1, [sp]
   13850:	ldr	r6, [r5, #44]	; 0x2c
   13854:	mov	r3, r4
   13858:	ldr	r2, [sp, #20]
   1385c:	add	r1, sp, #24
   13860:	ldr	r0, [r5, #36]	; 0x24
   13864:	blx	r6
   13868:	cmp	r0, #0
   1386c:	bne	138b4 <flatcc_builder_create_buffer@@Base+0x204>
   13870:	str	r4, [r5, #136]	; 0x88
   13874:	cmp	r4, #0
   13878:	beq	138d0 <flatcc_builder_create_buffer@@Base+0x220>
   1387c:	mov	r0, r4
   13880:	add	sp, sp, #100	; 0x64
   13884:	ldrd	r4, [sp]
   13888:	ldrd	r6, [sp, #8]
   1388c:	ldrd	r8, [sp, #16]
   13890:	add	sp, sp, #24
   13894:	pop	{pc}		; (ldr pc, [sp], #4)
   13898:	ldr	r3, [pc, #84]	; 138f4 <flatcc_builder_create_buffer@@Base+0x244>
   1389c:	movw	r2, #647	; 0x287
   138a0:	movw	r1, #32828	; 0x803c
   138a4:	movt	r1, #1
   138a8:	movw	r0, #32912	; 0x8090
   138ac:	movt	r0, #1
   138b0:	bl	12060 <__assert_fail@plt>
   138b4:	ldr	r3, [pc, #56]	; 138f4 <flatcc_builder_create_buffer@@Base+0x244>
   138b8:	movw	r2, #651	; 0x28b
   138bc:	movw	r1, #32828	; 0x803c
   138c0:	movt	r1, #1
   138c4:	movw	r0, #32912	; 0x8090
   138c8:	movt	r0, #1
   138cc:	bl	12060 <__assert_fail@plt>
   138d0:	ldr	r3, [pc, #32]	; 138f8 <flatcc_builder_create_buffer@@Base+0x248>
   138d4:	mov	r2, #772	; 0x304
   138d8:	movw	r1, #32828	; 0x803c
   138dc:	movt	r1, #1
   138e0:	movw	r0, #32912	; 0x8090
   138e4:	movt	r0, #1
   138e8:	bl	12060 <__assert_fail@plt>
   138ec:	mov	r4, #0
   138f0:	b	1387c <flatcc_builder_create_buffer@@Base+0x1cc>
   138f4:	andeq	r7, r1, r8, lsr fp
   138f8:	andeq	r7, r1, r4, lsr #23

000138fc <flatcc_builder_create_struct@@Base>:
   138fc:	strd	r4, [sp, #-16]!
   13900:	str	r6, [sp, #8]
   13904:	str	lr, [sp, #12]
   13908:	sub	sp, sp, #80	; 0x50
   1390c:	cmp	r3, #0
   13910:	beq	13968 <flatcc_builder_create_struct@@Base+0x6c>
   13914:	mov	r4, r0
   13918:	ldrh	r0, [r0, #128]	; 0x80
   1391c:	cmp	r0, r3
   13920:	strhcc	r3, [r4, #128]	; 0x80
   13924:	ldr	ip, [r4, #136]	; 0x88
   13928:	sub	r0, ip, r2
   1392c:	sub	r3, r3, #1
   13930:	and	r3, r3, r0
   13934:	mov	r0, #0
   13938:	str	r0, [sp, #8]
   1393c:	str	r0, [sp, #12]
   13940:	cmp	r2, r0
   13944:	beq	139bc <flatcc_builder_create_struct@@Base+0xc0>
   13948:	str	r2, [sp, #8]
   1394c:	str	r1, [sp, #16]
   13950:	str	r2, [sp, #20]
   13954:	mov	r2, #1
   13958:	str	r2, [sp, #12]
   1395c:	cmp	r3, r0
   13960:	beq	139f4 <flatcc_builder_create_struct@@Base+0xf8>
   13964:	b	139c4 <flatcc_builder_create_struct@@Base+0xc8>
   13968:	ldr	r3, [pc, #212]	; 13a44 <flatcc_builder_create_struct@@Base+0x148>
   1396c:	movw	r2, #783	; 0x30f
   13970:	movw	r1, #32828	; 0x803c
   13974:	movt	r1, #1
   13978:	movw	r0, #33012	; 0x80f4
   1397c:	movt	r0, #1
   13980:	bl	12060 <__assert_fail@plt>
   13984:	ldr	r3, [pc, #188]	; 13a48 <flatcc_builder_create_struct@@Base+0x14c>
   13988:	movw	r2, #647	; 0x287
   1398c:	movw	r1, #32828	; 0x803c
   13990:	movt	r1, #1
   13994:	movw	r0, #32912	; 0x8090
   13998:	movt	r0, #1
   1399c:	bl	12060 <__assert_fail@plt>
   139a0:	ldr	r3, [pc, #160]	; 13a48 <flatcc_builder_create_struct@@Base+0x14c>
   139a4:	movw	r2, #651	; 0x28b
   139a8:	movw	r1, #32828	; 0x803c
   139ac:	movt	r1, #1
   139b0:	movw	r0, #32912	; 0x8090
   139b4:	movt	r0, #1
   139b8:	bl	12060 <__assert_fail@plt>
   139bc:	cmp	r3, #0
   139c0:	beq	13984 <flatcc_builder_create_struct@@Base+0x88>
   139c4:	ldr	r2, [sp, #8]
   139c8:	add	r2, r2, r3
   139cc:	str	r2, [sp, #8]
   139d0:	ldr	r2, [sp, #12]
   139d4:	add	r2, r2, #1
   139d8:	add	r1, sp, #80	; 0x50
   139dc:	add	r0, r1, r2, lsl #3
   139e0:	movw	r1, #30956	; 0x78ec
   139e4:	movt	r1, #1
   139e8:	str	r1, [r0, #-72]	; 0xffffffb8
   139ec:	str	r3, [r0, #-68]	; 0xffffffbc
   139f0:	str	r2, [sp, #12]
   139f4:	ldr	r3, [sp, #8]
   139f8:	sub	r5, ip, r3
   139fc:	cmp	ip, r5
   13a00:	ble	13984 <flatcc_builder_create_struct@@Base+0x88>
   13a04:	str	r3, [sp]
   13a08:	ldr	r6, [r4, #44]	; 0x2c
   13a0c:	mov	r3, r5
   13a10:	ldr	r2, [sp, #12]
   13a14:	add	r1, sp, #16
   13a18:	ldr	r0, [r4, #36]	; 0x24
   13a1c:	blx	r6
   13a20:	cmp	r0, #0
   13a24:	bne	139a0 <flatcc_builder_create_struct@@Base+0xa4>
   13a28:	str	r5, [r4, #136]	; 0x88
   13a2c:	mov	r0, r5
   13a30:	add	sp, sp, #80	; 0x50
   13a34:	ldrd	r4, [sp]
   13a38:	ldr	r6, [sp, #8]
   13a3c:	add	sp, sp, #12
   13a40:	pop	{pc}		; (ldr pc, [sp], #4)
   13a44:	andeq	r7, r1, r4, asr #23
   13a48:	andeq	r7, r1, r8, lsr fp

00013a4c <flatcc_builder_start_buffer@@Base>:
   13a4c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13a50:	strd	r6, [sp, #8]
   13a54:	str	r8, [sp, #16]
   13a58:	str	lr, [sp, #20]
   13a5c:	mov	r4, r0
   13a60:	mov	r5, r1
   13a64:	mov	r7, r2
   13a68:	mov	r6, r3
   13a6c:	ldrh	r1, [r0, #128]	; 0x80
   13a70:	bl	12c18 <flatcc_builder_default_alloc@@Base+0x24c>
   13a74:	cmp	r0, #0
   13a78:	bne	13b18 <flatcc_builder_start_buffer@@Base+0xcc>
   13a7c:	mov	r3, #1
   13a80:	strh	r3, [r4, #128]	; 0x80
   13a84:	ldr	r3, [r4, #32]
   13a88:	ldrh	r2, [r4, #132]	; 0x84
   13a8c:	strh	r2, [r3, #34]	; 0x22
   13a90:	strh	r7, [r4, #132]	; 0x84
   13a94:	ldr	r3, [r4, #32]
   13a98:	ldrh	r2, [r4, #164]	; 0xa4
   13a9c:	strh	r2, [r3, #32]
   13aa0:	strh	r6, [r4, #164]	; 0xa4
   13aa4:	ldr	r3, [r4, #32]
   13aa8:	ldr	r2, [r4, #144]	; 0x90
   13aac:	str	r2, [r3, #20]
   13ab0:	ldr	r3, [r4, #32]
   13ab4:	ldr	r2, [r4, #152]	; 0x98
   13ab8:	str	r2, [r3, #28]
   13abc:	ldr	r3, [r4, #136]	; 0x88
   13ac0:	str	r3, [r4, #144]	; 0x90
   13ac4:	ldr	r3, [r4, #148]	; 0x94
   13ac8:	add	r2, r3, #1
   13acc:	str	r2, [r4, #148]	; 0x94
   13ad0:	str	r3, [r4, #152]	; 0x98
   13ad4:	ldr	r3, [r4, #32]
   13ad8:	ldr	r2, [r4, #168]	; 0xa8
   13adc:	str	r2, [r3, #16]
   13ae0:	movw	r3, #30956	; 0x78ec
   13ae4:	movt	r3, #1
   13ae8:	cmp	r5, #0
   13aec:	moveq	r5, r3
   13af0:	ldr	r3, [r5]
   13af4:	str	r3, [r4, #168]	; 0xa8
   13af8:	ldr	r3, [r4, #32]
   13afc:	mov	r2, #1
   13b00:	strh	r2, [r3, #14]
   13b04:	ldrd	r4, [sp]
   13b08:	ldrd	r6, [sp, #8]
   13b0c:	ldr	r8, [sp, #16]
   13b10:	add	sp, sp, #20
   13b14:	pop	{pc}		; (ldr pc, [sp], #4)
   13b18:	mvn	r0, #0
   13b1c:	b	13b04 <flatcc_builder_start_buffer@@Base+0xb8>

00013b20 <flatcc_builder_end_buffer@@Base>:
   13b20:	strd	r4, [sp, #-12]!
   13b24:	str	lr, [sp, #8]
   13b28:	sub	sp, sp, #12
   13b2c:	mov	r4, r0
   13b30:	ldrh	r2, [r0, #164]	; 0xa4
   13b34:	and	r2, r2, #2
   13b38:	ldr	r0, [r0, #152]	; 0x98
   13b3c:	cmp	r0, #0
   13b40:	moveq	r0, r2
   13b44:	orrne	r0, r2, #1
   13b48:	ldr	r2, [r4, #32]
   13b4c:	ldrh	r2, [r2, #14]
   13b50:	cmp	r2, #1
   13b54:	bne	13ba0 <flatcc_builder_end_buffer@@Base+0x80>
   13b58:	ldrh	r2, [r4, #132]	; 0x84
   13b5c:	ldrh	r3, [r4, #128]	; 0x80
   13b60:	cmp	r3, r2
   13b64:	strhcc	r2, [r4, #128]	; 0x80
   13b68:	str	r0, [sp, #4]
   13b6c:	ldrh	r3, [r4, #128]	; 0x80
   13b70:	str	r3, [sp]
   13b74:	mov	r3, r1
   13b78:	add	r1, r4, #168	; 0xa8
   13b7c:	mov	r0, r4
   13b80:	bl	136b0 <flatcc_builder_create_buffer@@Base>
   13b84:	subs	r5, r0, #0
   13b88:	bne	13bbc <flatcc_builder_end_buffer@@Base+0x9c>
   13b8c:	mov	r0, r5
   13b90:	add	sp, sp, #12
   13b94:	ldrd	r4, [sp]
   13b98:	add	sp, sp, #8
   13b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13ba0:	ldr	r3, [pc, #184]	; 13c60 <flatcc_builder_end_buffer@@Base+0x140>
   13ba4:	movw	r2, #838	; 0x346
   13ba8:	movw	r1, #32828	; 0x803c
   13bac:	movt	r1, #1
   13bb0:	movw	r0, #33024	; 0x8100
   13bb4:	movt	r0, #1
   13bb8:	bl	12060 <__assert_fail@plt>
   13bbc:	ldr	r3, [r4, #32]
   13bc0:	ldr	r2, [r3, #20]
   13bc4:	str	r2, [r4, #144]	; 0x90
   13bc8:	ldr	r2, [r3, #28]
   13bcc:	str	r2, [r4, #152]	; 0x98
   13bd0:	ldr	r2, [r3, #16]
   13bd4:	str	r2, [r4, #168]	; 0xa8
   13bd8:	ldrh	r3, [r3, #32]
   13bdc:	strh	r3, [r4, #164]	; 0xa4
   13be0:	ldr	r2, [r4, #20]
   13be4:	mov	r1, #0
   13be8:	ldr	r0, [r4, #16]
   13bec:	bl	12030 <memset@plt>
   13bf0:	ldr	r2, [r4, #32]
   13bf4:	ldr	r3, [r2, #8]
   13bf8:	str	r3, [r4, #20]
   13bfc:	ldr	r0, [r2]
   13c00:	str	r0, [r4, #28]
   13c04:	ldr	r1, [r2, #4]
   13c08:	ldr	r3, [r4, #60]	; 0x3c
   13c0c:	add	r3, r3, r0
   13c10:	str	r3, [r4, #16]
   13c14:	ldr	r3, [r4, #64]	; 0x40
   13c18:	sub	r3, r3, r0
   13c1c:	cmp	r3, r1
   13c20:	movcs	r3, r1
   13c24:	str	r3, [r4, #24]
   13c28:	str	r1, [r2, #4]
   13c2c:	ldrh	r3, [r4, #130]	; 0x82
   13c30:	ldrh	r2, [r4, #128]	; 0x80
   13c34:	cmp	r2, r3
   13c38:	strhcc	r3, [r4, #128]	; 0x80
   13c3c:	ldr	r3, [r4, #32]
   13c40:	ldrh	r2, [r3, #12]
   13c44:	strh	r2, [r4, #130]	; 0x82
   13c48:	sub	r3, r3, #36	; 0x24
   13c4c:	str	r3, [r4, #32]
   13c50:	ldr	r3, [r4, #156]	; 0x9c
   13c54:	sub	r3, r3, #1
   13c58:	str	r3, [r4, #156]	; 0x9c
   13c5c:	b	13b8c <flatcc_builder_end_buffer@@Base+0x6c>
   13c60:	andeq	r7, r1, r4, ror #23

00013c64 <flatcc_builder_start_struct@@Base>:
   13c64:	strd	r4, [sp, #-16]!
   13c68:	str	r6, [sp, #8]
   13c6c:	str	lr, [sp, #12]
   13c70:	mov	r4, r0
   13c74:	mov	r5, r1
   13c78:	mov	r1, r2
   13c7c:	bl	12c18 <flatcc_builder_default_alloc@@Base+0x24c>
   13c80:	cmp	r0, #0
   13c84:	movne	r0, #0
   13c88:	bne	13ce8 <flatcc_builder_start_struct@@Base+0x84>
   13c8c:	ldr	r3, [r4, #32]
   13c90:	mov	r2, #2
   13c94:	strh	r2, [r3, #14]
   13c98:	ldr	r1, [r4, #28]
   13c9c:	ldr	r2, [r4, #60]	; 0x3c
   13ca0:	add	r2, r2, r1
   13ca4:	str	r2, [r4, #16]
   13ca8:	ldr	r3, [r4, #64]	; 0x40
   13cac:	sub	r3, r3, r1
   13cb0:	cmn	r3, #4
   13cb4:	mvnhi	r3, #3
   13cb8:	str	r3, [r4, #24]
   13cbc:	ldr	r3, [r4, #32]
   13cc0:	mvn	r2, #3
   13cc4:	str	r2, [r3, #4]
   13cc8:	ldr	r6, [r4, #20]
   13ccc:	add	r5, r5, r6
   13cd0:	str	r5, [r4, #20]
   13cd4:	ldr	r3, [r4, #24]
   13cd8:	cmp	r5, r3
   13cdc:	bcs	13cf8 <flatcc_builder_start_struct@@Base+0x94>
   13ce0:	ldr	r0, [r4, #16]
   13ce4:	add	r0, r0, r6
   13ce8:	ldrd	r4, [sp]
   13cec:	ldr	r6, [sp, #8]
   13cf0:	add	sp, sp, #12
   13cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf8:	add	r1, r5, #1
   13cfc:	mov	r0, r4
   13d00:	bl	12944 <main@@Base+0x24>
   13d04:	cmp	r0, #0
   13d08:	movne	r0, #0
   13d0c:	beq	13ce0 <flatcc_builder_start_struct@@Base+0x7c>
   13d10:	b	13ce8 <flatcc_builder_start_struct@@Base+0x84>

00013d14 <flatcc_builder_struct_edit@@Base>:
   13d14:	ldr	r0, [r0, #16]
   13d18:	bx	lr

00013d1c <flatcc_builder_end_struct@@Base>:
   13d1c:	strd	r4, [sp, #-16]!
   13d20:	str	r6, [sp, #8]
   13d24:	str	lr, [sp, #12]
   13d28:	ldr	r3, [r0, #32]
   13d2c:	ldrh	r3, [r3, #14]
   13d30:	cmp	r3, #2
   13d34:	bne	13d68 <flatcc_builder_end_struct@@Base+0x4c>
   13d38:	mov	r4, r0
   13d3c:	ldrh	r3, [r0, #130]	; 0x82
   13d40:	ldr	r2, [r0, #20]
   13d44:	ldr	r1, [r0, #16]
   13d48:	bl	138fc <flatcc_builder_create_struct@@Base>
   13d4c:	subs	r5, r0, #0
   13d50:	bne	13d84 <flatcc_builder_end_struct@@Base+0x68>
   13d54:	mov	r0, r5
   13d58:	ldrd	r4, [sp]
   13d5c:	ldr	r6, [sp, #8]
   13d60:	add	sp, sp, #12
   13d64:	pop	{pc}		; (ldr pc, [sp], #4)
   13d68:	ldr	r3, [pc, #148]	; 13e04 <flatcc_builder_end_struct@@Base+0xe8>
   13d6c:	mov	r2, #872	; 0x368
   13d70:	movw	r1, #32828	; 0x803c
   13d74:	movt	r1, #1
   13d78:	movw	r0, #33068	; 0x812c
   13d7c:	movt	r0, #1
   13d80:	bl	12060 <__assert_fail@plt>
   13d84:	ldr	r2, [r4, #20]
   13d88:	mov	r1, #0
   13d8c:	ldr	r0, [r4, #16]
   13d90:	bl	12030 <memset@plt>
   13d94:	ldr	r2, [r4, #32]
   13d98:	ldr	r3, [r2, #8]
   13d9c:	str	r3, [r4, #20]
   13da0:	ldr	r0, [r2]
   13da4:	str	r0, [r4, #28]
   13da8:	ldr	r1, [r2, #4]
   13dac:	ldr	r3, [r4, #60]	; 0x3c
   13db0:	add	r3, r3, r0
   13db4:	str	r3, [r4, #16]
   13db8:	ldr	r3, [r4, #64]	; 0x40
   13dbc:	sub	r3, r3, r0
   13dc0:	cmp	r3, r1
   13dc4:	movcs	r3, r1
   13dc8:	str	r3, [r4, #24]
   13dcc:	str	r1, [r2, #4]
   13dd0:	ldrh	r3, [r4, #130]	; 0x82
   13dd4:	ldrh	r2, [r4, #128]	; 0x80
   13dd8:	cmp	r2, r3
   13ddc:	strhcc	r3, [r4, #128]	; 0x80
   13de0:	ldr	r3, [r4, #32]
   13de4:	ldrh	r2, [r3, #12]
   13de8:	strh	r2, [r4, #130]	; 0x82
   13dec:	sub	r3, r3, #36	; 0x24
   13df0:	str	r3, [r4, #32]
   13df4:	ldr	r3, [r4, #156]	; 0x9c
   13df8:	sub	r3, r3, #1
   13dfc:	str	r3, [r4, #156]	; 0x9c
   13e00:	b	13d54 <flatcc_builder_end_struct@@Base+0x38>
   13e04:	andeq	r7, r1, r0, lsl #24

00013e08 <flatcc_builder_extend_vector@@Base>:
   13e08:	strd	r4, [sp, #-16]!
   13e0c:	str	r6, [sp, #8]
   13e10:	str	lr, [sp, #12]
   13e14:	mov	r4, r0
   13e18:	ldr	r2, [r0, #32]
   13e1c:	ldr	r3, [r2, #20]
   13e20:	add	r0, r1, r3
   13e24:	ldr	ip, [r2, #24]
   13e28:	cmp	r3, r0
   13e2c:	movls	r3, #0
   13e30:	movhi	r3, #1
   13e34:	cmp	ip, r0
   13e38:	orrcc	r3, r3, #1
   13e3c:	cmp	r3, #0
   13e40:	bne	13e80 <flatcc_builder_extend_vector@@Base+0x78>
   13e44:	str	r0, [r2, #20]
   13e48:	ldr	r5, [r4, #20]
   13e4c:	ldr	r3, [r4, #32]
   13e50:	ldr	r3, [r3, #16]
   13e54:	mla	r1, r3, r1, r5
   13e58:	str	r1, [r4, #20]
   13e5c:	ldr	r3, [r4, #24]
   13e60:	cmp	r1, r3
   13e64:	bcs	13e9c <flatcc_builder_extend_vector@@Base+0x94>
   13e68:	ldr	r0, [r4, #16]
   13e6c:	add	r0, r0, r5
   13e70:	ldrd	r4, [sp]
   13e74:	ldr	r6, [sp, #8]
   13e78:	add	sp, sp, #12
   13e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e80:	ldr	r3, [pc, #52]	; 13ebc <flatcc_builder_extend_vector@@Base+0xb4>
   13e84:	mov	r2, #892	; 0x37c
   13e88:	movw	r1, #32828	; 0x803c
   13e8c:	movt	r1, #1
   13e90:	movw	r0, #33112	; 0x8158
   13e94:	movt	r0, #1
   13e98:	bl	12060 <__assert_fail@plt>
   13e9c:	mvn	r2, #3
   13ea0:	add	r1, r1, #1
   13ea4:	mov	r0, r4
   13ea8:	bl	12944 <main@@Base+0x24>
   13eac:	cmp	r0, #0
   13eb0:	movne	r0, #0
   13eb4:	beq	13e68 <flatcc_builder_extend_vector@@Base+0x60>
   13eb8:	b	13e70 <flatcc_builder_extend_vector@@Base+0x68>
   13ebc:	andeq	r7, r1, ip, lsl ip

00013ec0 <flatcc_builder_vector_push@@Base>:
   13ec0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13ec4:	strd	r6, [sp, #8]
   13ec8:	str	r8, [sp, #16]
   13ecc:	str	lr, [sp, #20]
   13ed0:	ldr	r3, [r0, #32]
   13ed4:	ldrh	r2, [r3, #14]
   13ed8:	cmp	r2, #4
   13edc:	bne	13f54 <flatcc_builder_vector_push@@Base+0x94>
   13ee0:	mov	r4, r0
   13ee4:	mov	r6, r1
   13ee8:	ldr	r2, [r3, #20]
   13eec:	ldr	r1, [r3, #24]
   13ef0:	cmp	r2, r1
   13ef4:	bhi	13f70 <flatcc_builder_vector_push@@Base+0xb0>
   13ef8:	add	r2, r2, #1
   13efc:	str	r2, [r3, #20]
   13f00:	ldr	r3, [r0, #32]
   13f04:	ldr	r7, [r3, #16]
   13f08:	ldr	r5, [r0, #20]
   13f0c:	add	r1, r7, r5
   13f10:	str	r1, [r0, #20]
   13f14:	ldr	r3, [r0, #24]
   13f18:	cmp	r1, r3
   13f1c:	bcs	13f8c <flatcc_builder_vector_push@@Base+0xcc>
   13f20:	ldr	r4, [r4, #16]
   13f24:	adds	r4, r4, r5
   13f28:	beq	13f3c <flatcc_builder_vector_push@@Base+0x7c>
   13f2c:	mov	r2, r7
   13f30:	mov	r1, r6
   13f34:	mov	r0, r4
   13f38:	bl	11fac <memcpy@plt>
   13f3c:	mov	r0, r4
   13f40:	ldrd	r4, [sp]
   13f44:	ldrd	r6, [sp, #8]
   13f48:	ldr	r8, [sp, #16]
   13f4c:	add	sp, sp, #20
   13f50:	pop	{pc}		; (ldr pc, [sp], #4)
   13f54:	ldr	r3, [pc, #76]	; 13fa8 <flatcc_builder_vector_push@@Base+0xe8>
   13f58:	movw	r2, #907	; 0x38b
   13f5c:	movw	r1, #32828	; 0x803c
   13f60:	movt	r1, #1
   13f64:	movw	r0, #33140	; 0x8174
   13f68:	movt	r0, #1
   13f6c:	bl	12060 <__assert_fail@plt>
   13f70:	ldr	r3, [pc, #48]	; 13fa8 <flatcc_builder_vector_push@@Base+0xe8>
   13f74:	mov	r2, #908	; 0x38c
   13f78:	movw	r1, #32828	; 0x803c
   13f7c:	movt	r1, #1
   13f80:	movw	r0, #33184	; 0x81a0
   13f84:	movt	r0, #1
   13f88:	bl	12060 <__assert_fail@plt>
   13f8c:	mvn	r2, #3
   13f90:	add	r1, r1, #1
   13f94:	bl	12944 <main@@Base+0x24>
   13f98:	cmp	r0, #0
   13f9c:	movne	r4, #0
   13fa0:	beq	13f20 <flatcc_builder_vector_push@@Base+0x60>
   13fa4:	b	13f3c <flatcc_builder_vector_push@@Base+0x7c>
   13fa8:	andeq	r7, r1, r0, lsr ip

00013fac <flatcc_builder_append_vector@@Base>:
   13fac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13fb0:	strd	r6, [sp, #8]
   13fb4:	str	r8, [sp, #16]
   13fb8:	str	lr, [sp, #20]
   13fbc:	mov	r6, r1
   13fc0:	ldr	r1, [r0, #32]
   13fc4:	ldrh	r3, [r1, #14]
   13fc8:	cmp	r3, #4
   13fcc:	bne	14058 <flatcc_builder_append_vector@@Base+0xac>
   13fd0:	mov	r4, r0
   13fd4:	ldr	r3, [r1, #20]
   13fd8:	add	r0, r2, r3
   13fdc:	ldr	ip, [r1, #24]
   13fe0:	cmp	r3, r0
   13fe4:	movls	r3, #0
   13fe8:	movhi	r3, #1
   13fec:	cmp	ip, r0
   13ff0:	orrcc	r3, r3, #1
   13ff4:	cmp	r3, #0
   13ff8:	bne	14074 <flatcc_builder_append_vector@@Base+0xc8>
   13ffc:	str	r0, [r1, #20]
   14000:	ldr	r3, [r4, #32]
   14004:	ldr	r5, [r3, #16]
   14008:	mul	r5, r5, r2
   1400c:	ldr	r7, [r4, #20]
   14010:	add	r1, r5, r7
   14014:	str	r1, [r4, #20]
   14018:	ldr	r3, [r4, #24]
   1401c:	cmp	r1, r3
   14020:	bcs	14090 <flatcc_builder_append_vector@@Base+0xe4>
   14024:	ldr	r4, [r4, #16]
   14028:	adds	r4, r4, r7
   1402c:	beq	14040 <flatcc_builder_append_vector@@Base+0x94>
   14030:	mov	r2, r5
   14034:	mov	r1, r6
   14038:	mov	r0, r4
   1403c:	bl	11fac <memcpy@plt>
   14040:	mov	r0, r4
   14044:	ldrd	r4, [sp]
   14048:	ldrd	r6, [sp, #8]
   1404c:	ldr	r8, [sp, #16]
   14050:	add	sp, sp, #20
   14054:	pop	{pc}		; (ldr pc, [sp], #4)
   14058:	ldr	r3, [pc, #80]	; 140b0 <flatcc_builder_append_vector@@Base+0x104>
   1405c:	movw	r2, #915	; 0x393
   14060:	movw	r1, #32828	; 0x803c
   14064:	movt	r1, #1
   14068:	movw	r0, #33140	; 0x8174
   1406c:	movt	r0, #1
   14070:	bl	12060 <__assert_fail@plt>
   14074:	ldr	r3, [pc, #56]	; 140b4 <flatcc_builder_append_vector@@Base+0x108>
   14078:	mov	r2, #892	; 0x37c
   1407c:	movw	r1, #32828	; 0x803c
   14080:	movt	r1, #1
   14084:	movw	r0, #33112	; 0x8158
   14088:	movt	r0, #1
   1408c:	bl	12060 <__assert_fail@plt>
   14090:	mvn	r2, #3
   14094:	add	r1, r1, #1
   14098:	mov	r0, r4
   1409c:	bl	12944 <main@@Base+0x24>
   140a0:	cmp	r0, #0
   140a4:	movne	r4, #0
   140a8:	beq	14024 <flatcc_builder_append_vector@@Base+0x78>
   140ac:	b	14040 <flatcc_builder_append_vector@@Base+0x94>
   140b0:	andeq	r7, r1, ip, asr #24
   140b4:	andeq	r7, r1, ip, lsl ip

000140b8 <flatcc_builder_extend_offset_vector@@Base>:
   140b8:	strd	r4, [sp, #-16]!
   140bc:	str	r6, [sp, #8]
   140c0:	str	lr, [sp, #12]
   140c4:	mov	r4, r0
   140c8:	ldr	r2, [r0, #32]
   140cc:	ldr	r3, [r2, #20]
   140d0:	adds	r3, r1, r3
   140d4:	movcs	ip, #1
   140d8:	movcc	ip, #0
   140dc:	cmn	r3, #-1073741823	; 0xc0000001
   140e0:	movls	r0, #0
   140e4:	movhi	r0, #1
   140e8:	orrs	r0, ip, r0
   140ec:	bne	14124 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   140f0:	str	r3, [r2, #20]
   140f4:	ldr	r5, [r4, #20]
   140f8:	add	r1, r5, r1, lsl #2
   140fc:	str	r1, [r4, #20]
   14100:	ldr	r3, [r4, #24]
   14104:	cmp	r1, r3
   14108:	bcs	14140 <flatcc_builder_extend_offset_vector@@Base+0x88>
   1410c:	ldr	r0, [r4, #16]
   14110:	add	r0, r0, r5
   14114:	ldrd	r4, [sp]
   14118:	ldr	r6, [sp, #8]
   1411c:	add	sp, sp, #12
   14120:	pop	{pc}		; (ldr pc, [sp], #4)
   14124:	ldr	r3, [pc, #52]	; 14160 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   14128:	mov	r2, #892	; 0x37c
   1412c:	movw	r1, #32828	; 0x803c
   14130:	movt	r1, #1
   14134:	movw	r0, #33112	; 0x8158
   14138:	movt	r0, #1
   1413c:	bl	12060 <__assert_fail@plt>
   14140:	mvn	r2, #3
   14144:	add	r1, r1, #1
   14148:	mov	r0, r4
   1414c:	bl	12944 <main@@Base+0x24>
   14150:	cmp	r0, #0
   14154:	movne	r0, #0
   14158:	beq	1410c <flatcc_builder_extend_offset_vector@@Base+0x54>
   1415c:	b	14114 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   14160:	andeq	r7, r1, ip, lsl ip

00014164 <flatcc_builder_offset_vector_push@@Base>:
   14164:	strd	r4, [sp, #-16]!
   14168:	str	r6, [sp, #8]
   1416c:	str	lr, [sp, #12]
   14170:	ldr	r2, [r0, #32]
   14174:	ldrh	r3, [r2, #14]
   14178:	cmp	r3, #5
   1417c:	bne	141d4 <flatcc_builder_offset_vector_push@@Base+0x70>
   14180:	mov	r4, r0
   14184:	mov	r6, r1
   14188:	ldr	r3, [r2, #20]
   1418c:	cmn	r3, #-1073741823	; 0xc0000001
   14190:	moveq	r0, #0
   14194:	beq	141c4 <flatcc_builder_offset_vector_push@@Base+0x60>
   14198:	add	r3, r3, #1
   1419c:	str	r3, [r2, #20]
   141a0:	ldr	r5, [r4, #20]
   141a4:	add	r3, r5, #4
   141a8:	str	r3, [r4, #20]
   141ac:	ldr	r2, [r4, #24]
   141b0:	cmp	r3, r2
   141b4:	bcs	141f0 <flatcc_builder_offset_vector_push@@Base+0x8c>
   141b8:	ldr	r3, [r4, #16]
   141bc:	adds	r0, r3, r5
   141c0:	strne	r6, [r3, r5]
   141c4:	ldrd	r4, [sp]
   141c8:	ldr	r6, [sp, #8]
   141cc:	add	sp, sp, #12
   141d0:	pop	{pc}		; (ldr pc, [sp], #4)
   141d4:	ldr	r3, [pc, #52]	; 14210 <flatcc_builder_offset_vector_push@@Base+0xac>
   141d8:	movw	r2, #934	; 0x3a6
   141dc:	movw	r1, #32828	; 0x803c
   141e0:	movt	r1, #1
   141e4:	movw	r0, #33248	; 0x81e0
   141e8:	movt	r0, #1
   141ec:	bl	12060 <__assert_fail@plt>
   141f0:	mvn	r2, #3
   141f4:	add	r1, r5, #5
   141f8:	mov	r0, r4
   141fc:	bl	12944 <main@@Base+0x24>
   14200:	cmp	r0, #0
   14204:	movne	r0, #0
   14208:	beq	141b8 <flatcc_builder_offset_vector_push@@Base+0x54>
   1420c:	b	141c4 <flatcc_builder_offset_vector_push@@Base+0x60>
   14210:	andeq	r7, r1, ip, ror #24

00014214 <flatcc_builder_append_offset_vector@@Base>:
   14214:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14218:	strd	r6, [sp, #8]
   1421c:	str	r8, [sp, #16]
   14220:	str	lr, [sp, #20]
   14224:	mov	r6, r1
   14228:	ldr	r1, [r0, #32]
   1422c:	ldrh	r3, [r1, #14]
   14230:	cmp	r3, #5
   14234:	bne	142b4 <flatcc_builder_append_offset_vector@@Base+0xa0>
   14238:	mov	r5, r0
   1423c:	ldr	r3, [r1, #20]
   14240:	adds	r3, r2, r3
   14244:	movcs	ip, #1
   14248:	movcc	ip, #0
   1424c:	cmn	r3, #-1073741823	; 0xc0000001
   14250:	movls	r0, #0
   14254:	movhi	r0, #1
   14258:	orrs	r0, ip, r0
   1425c:	bne	142d0 <flatcc_builder_append_offset_vector@@Base+0xbc>
   14260:	str	r3, [r1, #20]
   14264:	lsl	r4, r2, #2
   14268:	ldr	r7, [r5, #20]
   1426c:	add	r1, r4, r7
   14270:	str	r1, [r5, #20]
   14274:	ldr	r3, [r5, #24]
   14278:	cmp	r1, r3
   1427c:	bcs	142ec <flatcc_builder_append_offset_vector@@Base+0xd8>
   14280:	ldr	r5, [r5, #16]
   14284:	adds	r5, r5, r7
   14288:	beq	1429c <flatcc_builder_append_offset_vector@@Base+0x88>
   1428c:	mov	r2, r4
   14290:	mov	r1, r6
   14294:	mov	r0, r5
   14298:	bl	11fac <memcpy@plt>
   1429c:	mov	r0, r5
   142a0:	ldrd	r4, [sp]
   142a4:	ldrd	r6, [sp, #8]
   142a8:	ldr	r8, [sp, #16]
   142ac:	add	sp, sp, #20
   142b0:	pop	{pc}		; (ldr pc, [sp], #4)
   142b4:	ldr	r3, [pc, #80]	; 1430c <flatcc_builder_append_offset_vector@@Base+0xf8>
   142b8:	mov	r2, #948	; 0x3b4
   142bc:	movw	r1, #32828	; 0x803c
   142c0:	movt	r1, #1
   142c4:	movw	r0, #33248	; 0x81e0
   142c8:	movt	r0, #1
   142cc:	bl	12060 <__assert_fail@plt>
   142d0:	ldr	r3, [pc, #56]	; 14310 <flatcc_builder_append_offset_vector@@Base+0xfc>
   142d4:	mov	r2, #892	; 0x37c
   142d8:	movw	r1, #32828	; 0x803c
   142dc:	movt	r1, #1
   142e0:	movw	r0, #33112	; 0x8158
   142e4:	movt	r0, #1
   142e8:	bl	12060 <__assert_fail@plt>
   142ec:	mvn	r2, #3
   142f0:	add	r1, r1, #1
   142f4:	mov	r0, r5
   142f8:	bl	12944 <main@@Base+0x24>
   142fc:	cmp	r0, #0
   14300:	movne	r5, #0
   14304:	beq	14280 <flatcc_builder_append_offset_vector@@Base+0x6c>
   14308:	b	1429c <flatcc_builder_append_offset_vector@@Base+0x88>
   1430c:	muleq	r1, r0, ip
   14310:	andeq	r7, r1, ip, lsl ip

00014314 <flatcc_builder_extend_string@@Base>:
   14314:	strd	r4, [sp, #-16]!
   14318:	str	r6, [sp, #8]
   1431c:	str	lr, [sp, #12]
   14320:	ldr	r2, [r0, #32]
   14324:	ldrh	r3, [r2, #14]
   14328:	cmp	r3, #6
   1432c:	bne	14374 <flatcc_builder_extend_string@@Base+0x60>
   14330:	mov	r4, r0
   14334:	ldr	r3, [r2, #20]
   14338:	adds	r3, r1, r3
   1433c:	bcs	14390 <flatcc_builder_extend_string@@Base+0x7c>
   14340:	str	r3, [r2, #20]
   14344:	ldr	r5, [r0, #20]
   14348:	add	r1, r1, r5
   1434c:	str	r1, [r0, #20]
   14350:	ldr	r3, [r0, #24]
   14354:	cmp	r1, r3
   14358:	bcs	143ac <flatcc_builder_extend_string@@Base+0x98>
   1435c:	ldr	r0, [r4, #16]
   14360:	add	r0, r0, r5
   14364:	ldrd	r4, [sp]
   14368:	ldr	r6, [sp, #8]
   1436c:	add	sp, sp, #12
   14370:	pop	{pc}		; (ldr pc, [sp], #4)
   14374:	ldr	r3, [pc, #76]	; 143c8 <flatcc_builder_extend_string@@Base+0xb4>
   14378:	movw	r2, #957	; 0x3bd
   1437c:	movw	r1, #32828	; 0x803c
   14380:	movt	r1, #1
   14384:	movw	r0, #33300	; 0x8214
   14388:	movt	r0, #1
   1438c:	bl	12060 <__assert_fail@plt>
   14390:	ldr	r3, [pc, #52]	; 143cc <flatcc_builder_extend_string@@Base+0xb8>
   14394:	mov	r2, #892	; 0x37c
   14398:	movw	r1, #32828	; 0x803c
   1439c:	movt	r1, #1
   143a0:	movw	r0, #33112	; 0x8158
   143a4:	movt	r0, #1
   143a8:	bl	12060 <__assert_fail@plt>
   143ac:	mvn	r2, #3
   143b0:	add	r1, r1, #1
   143b4:	bl	12944 <main@@Base+0x24>
   143b8:	cmp	r0, #0
   143bc:	movne	r0, #0
   143c0:	beq	1435c <flatcc_builder_extend_string@@Base+0x48>
   143c4:	b	14364 <flatcc_builder_extend_string@@Base+0x50>
   143c8:			; <UNDEFINED> instruction: 0x00017cb4
   143cc:	andeq	r7, r1, ip, lsl ip

000143d0 <flatcc_builder_append_string@@Base>:
   143d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143d4:	strd	r6, [sp, #8]
   143d8:	str	r8, [sp, #16]
   143dc:	str	lr, [sp, #20]
   143e0:	mov	r5, r2
   143e4:	ldr	r2, [r0, #32]
   143e8:	ldrh	r3, [r2, #14]
   143ec:	cmp	r3, #6
   143f0:	bne	14458 <flatcc_builder_append_string@@Base+0x88>
   143f4:	mov	r4, r0
   143f8:	mov	r6, r1
   143fc:	ldr	r3, [r2, #20]
   14400:	adds	r3, r5, r3
   14404:	bcs	14474 <flatcc_builder_append_string@@Base+0xa4>
   14408:	str	r3, [r2, #20]
   1440c:	ldr	r7, [r0, #20]
   14410:	add	r1, r5, r7
   14414:	str	r1, [r0, #20]
   14418:	ldr	r3, [r0, #24]
   1441c:	cmp	r1, r3
   14420:	bcs	14490 <flatcc_builder_append_string@@Base+0xc0>
   14424:	ldr	r4, [r4, #16]
   14428:	adds	r4, r4, r7
   1442c:	beq	14440 <flatcc_builder_append_string@@Base+0x70>
   14430:	mov	r2, r5
   14434:	mov	r1, r6
   14438:	mov	r0, r4
   1443c:	bl	11fac <memcpy@plt>
   14440:	mov	r0, r4
   14444:	ldrd	r4, [sp]
   14448:	ldrd	r6, [sp, #8]
   1444c:	ldr	r8, [sp, #16]
   14450:	add	sp, sp, #20
   14454:	pop	{pc}		; (ldr pc, [sp], #4)
   14458:	ldr	r3, [pc, #76]	; 144ac <flatcc_builder_append_string@@Base+0xdc>
   1445c:	movw	r2, #966	; 0x3c6
   14460:	movw	r1, #32828	; 0x803c
   14464:	movt	r1, #1
   14468:	movw	r0, #33300	; 0x8214
   1446c:	movt	r0, #1
   14470:	bl	12060 <__assert_fail@plt>
   14474:	ldr	r3, [pc, #52]	; 144b0 <flatcc_builder_append_string@@Base+0xe0>
   14478:	mov	r2, #892	; 0x37c
   1447c:	movw	r1, #32828	; 0x803c
   14480:	movt	r1, #1
   14484:	movw	r0, #33112	; 0x8158
   14488:	movt	r0, #1
   1448c:	bl	12060 <__assert_fail@plt>
   14490:	mvn	r2, #3
   14494:	add	r1, r1, #1
   14498:	bl	12944 <main@@Base+0x24>
   1449c:	cmp	r0, #0
   144a0:	movne	r4, #0
   144a4:	beq	14424 <flatcc_builder_append_string@@Base+0x54>
   144a8:	b	14440 <flatcc_builder_append_string@@Base+0x70>
   144ac:	ldrdeq	r7, [r1], -r4
   144b0:	andeq	r7, r1, ip, lsl ip

000144b4 <flatcc_builder_append_string_str@@Base>:
   144b4:	strd	r4, [sp, #-16]!
   144b8:	str	r6, [sp, #8]
   144bc:	str	lr, [sp, #12]
   144c0:	mov	r5, r0
   144c4:	mov	r4, r1
   144c8:	mov	r0, r1
   144cc:	bl	1200c <strlen@plt>
   144d0:	mov	r2, r0
   144d4:	mov	r1, r4
   144d8:	mov	r0, r5
   144dc:	bl	143d0 <flatcc_builder_append_string@@Base>
   144e0:	ldrd	r4, [sp]
   144e4:	ldr	r6, [sp, #8]
   144e8:	add	sp, sp, #12
   144ec:	pop	{pc}		; (ldr pc, [sp], #4)

000144f0 <flatcc_builder_append_string_strn@@Base>:
   144f0:	strd	r4, [sp, #-16]!
   144f4:	str	r6, [sp, #8]
   144f8:	str	lr, [sp, #12]
   144fc:	mov	r6, r0
   14500:	mov	r4, r1
   14504:	mov	r5, r2
   14508:	mov	r1, #0
   1450c:	mov	r0, r4
   14510:	bl	1203c <memchr@plt>
   14514:	cmp	r0, #0
   14518:	subne	r5, r0, r4
   1451c:	mov	r2, r5
   14520:	mov	r1, r4
   14524:	mov	r0, r6
   14528:	bl	143d0 <flatcc_builder_append_string@@Base>
   1452c:	ldrd	r4, [sp]
   14530:	ldr	r6, [sp, #8]
   14534:	add	sp, sp, #12
   14538:	pop	{pc}		; (ldr pc, [sp], #4)

0001453c <flatcc_builder_truncate_vector@@Base>:
   1453c:	str	r4, [sp, #-8]!
   14540:	str	lr, [sp, #4]
   14544:	ldr	ip, [r0, #32]
   14548:	ldrh	r3, [ip, #14]
   1454c:	cmp	r3, #4
   14550:	bne	145a0 <flatcc_builder_truncate_vector@@Base+0x64>
   14554:	ldr	r3, [ip, #20]
   14558:	cmp	r3, r1
   1455c:	bcc	145bc <flatcc_builder_truncate_vector@@Base+0x80>
   14560:	sub	r3, r3, r1
   14564:	str	r3, [ip, #20]
   14568:	ldr	r3, [r0, #32]
   1456c:	ldr	r2, [r3, #16]
   14570:	mul	r2, r2, r1
   14574:	ldr	r3, [r0, #20]
   14578:	sub	r3, r3, r2
   1457c:	str	r3, [r0, #20]
   14580:	ldr	r0, [r0, #16]
   14584:	mov	r1, #0
   14588:	add	r0, r0, r3
   1458c:	bl	12030 <memset@plt>
   14590:	mov	r0, #0
   14594:	ldr	r4, [sp]
   14598:	add	sp, sp, #4
   1459c:	pop	{pc}		; (ldr pc, [sp], #4)
   145a0:	ldr	r3, [pc, #48]	; 145d8 <flatcc_builder_truncate_vector@@Base+0x9c>
   145a4:	movw	r2, #985	; 0x3d9
   145a8:	movw	r1, #32828	; 0x803c
   145ac:	movt	r1, #1
   145b0:	movw	r0, #33140	; 0x8174
   145b4:	movt	r0, #1
   145b8:	bl	12060 <__assert_fail@plt>
   145bc:	ldr	r3, [pc, #20]	; 145d8 <flatcc_builder_truncate_vector@@Base+0x9c>
   145c0:	movw	r2, #986	; 0x3da
   145c4:	movw	r1, #32828	; 0x803c
   145c8:	movt	r1, #1
   145cc:	movw	r0, #33344	; 0x8240
   145d0:	movt	r0, #1
   145d4:	bl	12060 <__assert_fail@plt>
   145d8:	strdeq	r7, [r1], -r4

000145dc <flatcc_builder_truncate_offset_vector@@Base>:
   145dc:	str	r4, [sp, #-8]!
   145e0:	str	lr, [sp, #4]
   145e4:	ldr	ip, [r0, #32]
   145e8:	ldrh	r3, [ip, #14]
   145ec:	cmp	r3, #5
   145f0:	bne	14640 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   145f4:	ldr	r3, [ip, #20]
   145f8:	cmp	r3, r1
   145fc:	bcc	1465c <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14600:	sub	r3, r3, r1
   14604:	str	r3, [ip, #20]
   14608:	ldr	r3, [r0, #32]
   1460c:	ldr	r2, [r3, #16]
   14610:	mul	r2, r2, r1
   14614:	ldr	r3, [r0, #20]
   14618:	sub	r3, r3, r2
   1461c:	str	r3, [r0, #20]
   14620:	ldr	r0, [r0, #16]
   14624:	mov	r1, #0
   14628:	add	r0, r0, r3
   1462c:	bl	12030 <memset@plt>
   14630:	mov	r0, #0
   14634:	ldr	r4, [sp]
   14638:	add	sp, sp, #4
   1463c:	pop	{pc}		; (ldr pc, [sp], #4)
   14640:	ldr	r3, [pc, #48]	; 14678 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14644:	movw	r2, #994	; 0x3e2
   14648:	movw	r1, #32828	; 0x803c
   1464c:	movt	r1, #1
   14650:	movw	r0, #33248	; 0x81e0
   14654:	movt	r0, #1
   14658:	bl	12060 <__assert_fail@plt>
   1465c:	ldr	r3, [pc, #20]	; 14678 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14660:	movw	r2, #995	; 0x3e3
   14664:	movw	r1, #32828	; 0x803c
   14668:	movt	r1, #1
   1466c:	movw	r0, #33380	; 0x8264
   14670:	movt	r0, #1
   14674:	bl	12060 <__assert_fail@plt>
   14678:	andeq	r7, r1, r4, lsl sp

0001467c <flatcc_builder_truncate_string@@Base>:
   1467c:	str	r4, [sp, #-8]!
   14680:	str	lr, [sp, #4]
   14684:	ldr	r2, [r0, #32]
   14688:	ldrh	r3, [r2, #14]
   1468c:	cmp	r3, #6
   14690:	bne	146d8 <flatcc_builder_truncate_string@@Base+0x5c>
   14694:	ldr	r3, [r2, #20]
   14698:	cmp	r3, r1
   1469c:	bcc	146f4 <flatcc_builder_truncate_string@@Base+0x78>
   146a0:	sub	r3, r3, r1
   146a4:	str	r3, [r2, #20]
   146a8:	ldr	r3, [r0, #20]
   146ac:	sub	r3, r3, r1
   146b0:	str	r3, [r0, #20]
   146b4:	ldr	r0, [r0, #16]
   146b8:	mov	r2, r1
   146bc:	mov	r1, #0
   146c0:	add	r0, r0, r3
   146c4:	bl	12030 <memset@plt>
   146c8:	mov	r0, #0
   146cc:	ldr	r4, [sp]
   146d0:	add	sp, sp, #4
   146d4:	pop	{pc}		; (ldr pc, [sp], #4)
   146d8:	ldr	r3, [pc, #48]	; 14710 <flatcc_builder_truncate_string@@Base+0x94>
   146dc:	movw	r2, #1003	; 0x3eb
   146e0:	movw	r1, #32828	; 0x803c
   146e4:	movt	r1, #1
   146e8:	movw	r0, #33300	; 0x8214
   146ec:	movt	r0, #1
   146f0:	bl	12060 <__assert_fail@plt>
   146f4:	ldr	r3, [pc, #20]	; 14710 <flatcc_builder_truncate_string@@Base+0x94>
   146f8:	mov	r2, #1004	; 0x3ec
   146fc:	movw	r1, #32828	; 0x803c
   14700:	movt	r1, #1
   14704:	movw	r0, #33440	; 0x82a0
   14708:	movt	r0, #1
   1470c:	bl	12060 <__assert_fail@plt>
   14710:	andeq	r7, r1, ip, lsr sp

00014714 <flatcc_builder_start_vector@@Base>:
   14714:	strd	r4, [sp, #-16]!
   14718:	str	r6, [sp, #8]
   1471c:	str	lr, [sp, #12]
   14720:	mov	r4, r0
   14724:	mov	r6, r1
   14728:	mov	r5, r3
   1472c:	cmp	r2, #4
   14730:	movcs	r1, r2
   14734:	movcc	r1, #4
   14738:	bl	12c18 <flatcc_builder_default_alloc@@Base+0x24c>
   1473c:	cmp	r0, #0
   14740:	bne	147ac <flatcc_builder_start_vector@@Base+0x98>
   14744:	ldr	r3, [r4, #32]
   14748:	str	r6, [r3, #16]
   1474c:	ldr	r3, [r4, #32]
   14750:	mov	r2, #0
   14754:	str	r2, [r3, #20]
   14758:	ldr	r3, [r4, #32]
   1475c:	str	r5, [r3, #24]
   14760:	ldr	r3, [r4, #32]
   14764:	mov	r2, #4
   14768:	strh	r2, [r3, #14]
   1476c:	ldr	r1, [r4, #28]
   14770:	ldr	r2, [r4, #60]	; 0x3c
   14774:	add	r2, r2, r1
   14778:	str	r2, [r4, #16]
   1477c:	ldr	r3, [r4, #64]	; 0x40
   14780:	sub	r3, r3, r1
   14784:	cmn	r3, #4
   14788:	mvnhi	r3, #3
   1478c:	str	r3, [r4, #24]
   14790:	ldr	r3, [r4, #32]
   14794:	mvn	r2, #3
   14798:	str	r2, [r3, #4]
   1479c:	ldrd	r4, [sp]
   147a0:	ldr	r6, [sp, #8]
   147a4:	add	sp, sp, #12
   147a8:	pop	{pc}		; (ldr pc, [sp], #4)
   147ac:	mvn	r0, #0
   147b0:	b	1479c <flatcc_builder_start_vector@@Base+0x88>

000147b4 <flatcc_builder_start_offset_vector@@Base>:
   147b4:	str	r4, [sp, #-8]!
   147b8:	str	lr, [sp, #4]
   147bc:	mov	r4, r0
   147c0:	mov	r1, #4
   147c4:	bl	12c18 <flatcc_builder_default_alloc@@Base+0x24c>
   147c8:	cmp	r0, #0
   147cc:	bne	14830 <flatcc_builder_start_offset_vector@@Base+0x7c>
   147d0:	ldr	r3, [r4, #32]
   147d4:	mov	r2, #4
   147d8:	str	r2, [r3, #16]
   147dc:	ldr	r3, [r4, #32]
   147e0:	mov	r2, #0
   147e4:	str	r2, [r3, #20]
   147e8:	ldr	r3, [r4, #32]
   147ec:	mov	r2, #5
   147f0:	strh	r2, [r3, #14]
   147f4:	ldr	r1, [r4, #28]
   147f8:	ldr	r2, [r4, #60]	; 0x3c
   147fc:	add	r2, r2, r1
   14800:	str	r2, [r4, #16]
   14804:	ldr	r3, [r4, #64]	; 0x40
   14808:	sub	r3, r3, r1
   1480c:	cmn	r3, #4
   14810:	mvnhi	r3, #3
   14814:	str	r3, [r4, #24]
   14818:	ldr	r3, [r4, #32]
   1481c:	mvn	r2, #3
   14820:	str	r2, [r3, #4]
   14824:	ldr	r4, [sp]
   14828:	add	sp, sp, #4
   1482c:	pop	{pc}		; (ldr pc, [sp], #4)
   14830:	mvn	r0, #0
   14834:	b	14824 <flatcc_builder_start_offset_vector@@Base+0x70>

00014838 <flatcc_builder_start_string@@Base>:
   14838:	str	r4, [sp, #-8]!
   1483c:	str	lr, [sp, #4]
   14840:	mov	r4, r0
   14844:	mov	r1, #1
   14848:	bl	12c18 <flatcc_builder_default_alloc@@Base+0x24c>
   1484c:	cmp	r0, #0
   14850:	bne	148b4 <flatcc_builder_start_string@@Base+0x7c>
   14854:	ldr	r3, [r4, #32]
   14858:	mov	r2, #1
   1485c:	str	r2, [r3, #16]
   14860:	ldr	r3, [r4, #32]
   14864:	mov	r2, #0
   14868:	str	r2, [r3, #20]
   1486c:	ldr	r3, [r4, #32]
   14870:	mov	r2, #6
   14874:	strh	r2, [r3, #14]
   14878:	ldr	r1, [r4, #28]
   1487c:	ldr	r2, [r4, #60]	; 0x3c
   14880:	add	r2, r2, r1
   14884:	str	r2, [r4, #16]
   14888:	ldr	r3, [r4, #64]	; 0x40
   1488c:	sub	r3, r3, r1
   14890:	cmn	r3, #4
   14894:	mvnhi	r3, #3
   14898:	str	r3, [r4, #24]
   1489c:	ldr	r3, [r4, #32]
   148a0:	mvn	r2, #3
   148a4:	str	r2, [r3, #4]
   148a8:	ldr	r4, [sp]
   148ac:	add	sp, sp, #4
   148b0:	pop	{pc}		; (ldr pc, [sp], #4)
   148b4:	mvn	r0, #0
   148b8:	b	148a8 <flatcc_builder_start_string@@Base+0x70>

000148bc <flatcc_builder_reserve_table@@Base>:
   148bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   148c0:	strd	r6, [sp, #8]
   148c4:	str	lr, [sp, #16]
   148c8:	sub	sp, sp, #12
   148cc:	cmp	r1, #0
   148d0:	blt	149b0 <flatcc_builder_reserve_table@@Base+0xf4>
   148d4:	mov	r4, r0
   148d8:	ldr	r2, [r0, #32]
   148dc:	ldrh	r6, [r2, #28]
   148e0:	ldr	r3, [r2, #16]
   148e4:	add	r6, r3, r6, lsl #1
   148e8:	add	r1, r1, #2
   148ec:	lsl	r5, r1, #1
   148f0:	add	r2, r6, r5
   148f4:	ldr	r3, [r0, #56]	; 0x38
   148f8:	cmp	r2, r3
   148fc:	bls	14924 <flatcc_builder_reserve_table@@Base+0x68>
   14900:	mov	r3, #0
   14904:	str	r3, [sp]
   14908:	ldr	r7, [r0, #48]	; 0x30
   1490c:	mov	r3, #1
   14910:	add	r1, r0, #52	; 0x34
   14914:	ldr	r0, [r0, #40]	; 0x28
   14918:	blx	r7
   1491c:	cmp	r0, #0
   14920:	bne	149cc <flatcc_builder_reserve_table@@Base+0x110>
   14924:	ldr	r3, [r4, #52]	; 0x34
   14928:	adds	r3, r3, r6
   1492c:	moveq	r3, #0
   14930:	streq	r3, [r4, #4]
   14934:	mvneq	r0, #0
   14938:	beq	1499c <flatcc_builder_reserve_table@@Base+0xe0>
   1493c:	add	r3, r3, #4
   14940:	str	r3, [r4, #4]
   14944:	ldr	r3, [r4, #32]
   14948:	ldr	r6, [r3, #20]
   1494c:	add	r2, r5, r6
   14950:	sub	r2, r2, #3
   14954:	ldr	r3, [r4, #80]	; 0x50
   14958:	cmp	r2, r3
   1495c:	bls	14984 <flatcc_builder_reserve_table@@Base+0xc8>
   14960:	mov	r3, #3
   14964:	str	r3, [sp]
   14968:	ldr	r5, [r4, #48]	; 0x30
   1496c:	mov	r3, #0
   14970:	add	r1, r4, #76	; 0x4c
   14974:	ldr	r0, [r4, #40]	; 0x28
   14978:	blx	r5
   1497c:	cmp	r0, #0
   14980:	bne	149e8 <flatcc_builder_reserve_table@@Base+0x12c>
   14984:	ldr	r0, [r4, #76]	; 0x4c
   14988:	add	r0, r0, r6
   1498c:	str	r0, [r4]
   14990:	clz	r0, r0
   14994:	lsr	r0, r0, #5
   14998:	rsb	r0, r0, #0
   1499c:	add	sp, sp, #12
   149a0:	ldrd	r4, [sp]
   149a4:	ldrd	r6, [sp, #8]
   149a8:	add	sp, sp, #16
   149ac:	pop	{pc}		; (ldr pc, [sp], #4)
   149b0:	ldr	r3, [pc, #76]	; 14a04 <flatcc_builder_reserve_table@@Base+0x148>
   149b4:	movw	r2, #1065	; 0x429
   149b8:	movw	r1, #32828	; 0x803c
   149bc:	movt	r1, #1
   149c0:	movw	r0, #33476	; 0x82c4
   149c4:	movt	r0, #1
   149c8:	bl	12060 <__assert_fail@plt>
   149cc:	ldr	r3, [pc, #52]	; 14a08 <flatcc_builder_reserve_table@@Base+0x14c>
   149d0:	mov	r2, #308	; 0x134
   149d4:	movw	r1, #32828	; 0x803c
   149d8:	movt	r1, #1
   149dc:	movw	r0, #32912	; 0x8090
   149e0:	movt	r0, #1
   149e4:	bl	12060 <__assert_fail@plt>
   149e8:	ldr	r3, [pc, #24]	; 14a08 <flatcc_builder_reserve_table@@Base+0x14c>
   149ec:	mov	r2, #308	; 0x134
   149f0:	movw	r1, #32828	; 0x803c
   149f4:	movt	r1, #1
   149f8:	movw	r0, #32912	; 0x8090
   149fc:	movt	r0, #1
   14a00:	bl	12060 <__assert_fail@plt>
   14a04:	andeq	r7, r1, ip, asr sp
   14a08:	andeq	r7, r1, r8, lsl #22

00014a0c <flatcc_builder_start_table@@Base>:
   14a0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a10:	strd	r6, [sp, #8]
   14a14:	str	r8, [sp, #16]
   14a18:	str	lr, [sp, #20]
   14a1c:	sub	sp, sp, #8
   14a20:	mov	r4, r0
   14a24:	mov	r5, r1
   14a28:	mov	r1, #4
   14a2c:	bl	12c18 <flatcc_builder_default_alloc@@Base+0x24c>
   14a30:	subs	r6, r0, #0
   14a34:	bne	14be0 <flatcc_builder_start_table@@Base+0x1d4>
   14a38:	ldr	r2, [r4, #32]
   14a3c:	ldr	r3, [r4, #4]
   14a40:	ldr	r1, [r4, #52]	; 0x34
   14a44:	sub	r3, r3, r1
   14a48:	str	r3, [r2, #16]
   14a4c:	ldr	r2, [r4, #32]
   14a50:	ldr	r3, [r4]
   14a54:	ldr	r1, [r4, #76]	; 0x4c
   14a58:	sub	r3, r3, r1
   14a5c:	str	r3, [r2, #20]
   14a60:	ldr	r3, [r4, #32]
   14a64:	ldr	r2, [r4, #12]
   14a68:	str	r2, [r3, #24]
   14a6c:	ldr	r3, [r4, #32]
   14a70:	ldrh	r2, [r4, #8]
   14a74:	strh	r2, [r3, #28]
   14a78:	movw	r3, #15186	; 0x3b52
   14a7c:	movt	r3, #12137	; 0x2f69
   14a80:	str	r3, [r4, #12]
   14a84:	mov	r3, #0
   14a88:	strh	r3, [r4, #8]
   14a8c:	ldr	r3, [r4, #32]
   14a90:	mov	r2, #3
   14a94:	strh	r2, [r3, #14]
   14a98:	ldr	r2, [r4, #32]
   14a9c:	ldrh	r7, [r2, #28]
   14aa0:	ldr	r3, [r2, #16]
   14aa4:	add	r7, r3, r7, lsl #1
   14aa8:	add	r5, r5, #2
   14aac:	lsl	r5, r5, #1
   14ab0:	add	r2, r7, r5
   14ab4:	ldr	r3, [r4, #56]	; 0x38
   14ab8:	cmp	r2, r3
   14abc:	bls	14ae4 <flatcc_builder_start_table@@Base+0xd8>
   14ac0:	mov	r3, #0
   14ac4:	str	r3, [sp]
   14ac8:	ldr	r8, [r4, #48]	; 0x30
   14acc:	mov	r3, #1
   14ad0:	add	r1, r4, #52	; 0x34
   14ad4:	ldr	r0, [r4, #40]	; 0x28
   14ad8:	blx	r8
   14adc:	cmp	r0, #0
   14ae0:	bne	14ba8 <flatcc_builder_start_table@@Base+0x19c>
   14ae4:	ldr	r3, [r4, #52]	; 0x34
   14ae8:	adds	r3, r3, r7
   14aec:	moveq	r3, #0
   14af0:	streq	r3, [r4, #4]
   14af4:	mvneq	r6, #0
   14af8:	beq	14b8c <flatcc_builder_start_table@@Base+0x180>
   14afc:	add	r3, r3, #4
   14b00:	str	r3, [r4, #4]
   14b04:	ldr	r3, [r4, #32]
   14b08:	ldr	r7, [r3, #20]
   14b0c:	sub	r2, r5, #3
   14b10:	add	r2, r2, r7
   14b14:	ldr	r3, [r4, #80]	; 0x50
   14b18:	cmp	r2, r3
   14b1c:	bls	14b44 <flatcc_builder_start_table@@Base+0x138>
   14b20:	mov	r3, #3
   14b24:	str	r3, [sp]
   14b28:	ldr	r5, [r4, #48]	; 0x30
   14b2c:	mov	r3, #0
   14b30:	add	r1, r4, #76	; 0x4c
   14b34:	ldr	r0, [r4, #40]	; 0x28
   14b38:	blx	r5
   14b3c:	cmp	r0, #0
   14b40:	bne	14bc4 <flatcc_builder_start_table@@Base+0x1b8>
   14b44:	ldr	r3, [r4, #76]	; 0x4c
   14b48:	add	r3, r3, r7
   14b4c:	str	r3, [r4]
   14b50:	cmp	r3, #0
   14b54:	beq	14be8 <flatcc_builder_start_table@@Base+0x1dc>
   14b58:	ldr	r1, [r4, #28]
   14b5c:	ldr	r2, [r4, #60]	; 0x3c
   14b60:	add	r2, r2, r1
   14b64:	str	r2, [r4, #16]
   14b68:	ldr	r3, [r4, #64]	; 0x40
   14b6c:	sub	r3, r3, r1
   14b70:	movw	r2, #65532	; 0xfffc
   14b74:	cmp	r3, r2
   14b78:	movwhi	r3, #65532	; 0xfffc
   14b7c:	str	r3, [r4, #24]
   14b80:	ldr	r3, [r4, #32]
   14b84:	movw	r2, #65532	; 0xfffc
   14b88:	str	r2, [r3, #4]
   14b8c:	mov	r0, r6
   14b90:	add	sp, sp, #8
   14b94:	ldrd	r4, [sp]
   14b98:	ldrd	r6, [sp, #8]
   14b9c:	ldr	r8, [sp, #16]
   14ba0:	add	sp, sp, #20
   14ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba8:	ldr	r3, [pc, #64]	; 14bf0 <flatcc_builder_start_table@@Base+0x1e4>
   14bac:	mov	r2, #308	; 0x134
   14bb0:	movw	r1, #32828	; 0x803c
   14bb4:	movt	r1, #1
   14bb8:	movw	r0, #32912	; 0x8090
   14bbc:	movt	r0, #1
   14bc0:	bl	12060 <__assert_fail@plt>
   14bc4:	ldr	r3, [pc, #36]	; 14bf0 <flatcc_builder_start_table@@Base+0x1e4>
   14bc8:	mov	r2, #308	; 0x134
   14bcc:	movw	r1, #32828	; 0x803c
   14bd0:	movt	r1, #1
   14bd4:	movw	r0, #32912	; 0x8090
   14bd8:	movt	r0, #1
   14bdc:	bl	12060 <__assert_fail@plt>
   14be0:	mvn	r6, #0
   14be4:	b	14b8c <flatcc_builder_start_table@@Base+0x180>
   14be8:	mvn	r6, #0
   14bec:	b	14b8c <flatcc_builder_start_table@@Base+0x180>
   14bf0:	andeq	r7, r1, r8, lsl #22

00014bf4 <flatcc_builder_create_vtable@@Base>:
   14bf4:	strd	r4, [sp, #-16]!
   14bf8:	str	r6, [sp, #8]
   14bfc:	str	lr, [sp, #12]
   14c00:	sub	sp, sp, #80	; 0x50
   14c04:	mov	r5, r0
   14c08:	mov	r3, #0
   14c0c:	str	r3, [sp, #8]
   14c10:	str	r3, [sp, #12]
   14c14:	cmp	r2, #0
   14c18:	beq	14cb4 <flatcc_builder_create_vtable@@Base+0xc0>
   14c1c:	str	r2, [sp, #8]
   14c20:	str	r1, [sp, #16]
   14c24:	str	r2, [sp, #20]
   14c28:	mov	r3, #1
   14c2c:	str	r3, [sp, #12]
   14c30:	ldr	r3, [r0, #152]	; 0x98
   14c34:	cmp	r3, #0
   14c38:	bne	14ccc <flatcc_builder_create_vtable@@Base+0xd8>
   14c3c:	ldr	r3, [r0, #180]	; 0xb4
   14c40:	cmp	r3, #0
   14c44:	bne	14ccc <flatcc_builder_create_vtable@@Base+0xd8>
   14c48:	ldr	r4, [r0, #140]	; 0x8c
   14c4c:	mov	r3, r2
   14c50:	add	r2, r2, r4
   14c54:	str	r2, [r0, #140]	; 0x8c
   14c58:	cmp	r4, r2
   14c5c:	ble	14d38 <flatcc_builder_create_vtable@@Base+0x144>
   14c60:	ldr	r3, [pc, #276]	; 14d7c <flatcc_builder_create_vtable@@Base+0x188>
   14c64:	movw	r2, #673	; 0x2a1
   14c68:	movw	r1, #32828	; 0x803c
   14c6c:	movt	r1, #1
   14c70:	movw	r0, #32912	; 0x8090
   14c74:	movt	r0, #1
   14c78:	bl	12060 <__assert_fail@plt>
   14c7c:	ldr	r3, [pc, #252]	; 14d80 <flatcc_builder_create_vtable@@Base+0x18c>
   14c80:	movw	r2, #647	; 0x287
   14c84:	movw	r1, #32828	; 0x803c
   14c88:	movt	r1, #1
   14c8c:	movw	r0, #32912	; 0x8090
   14c90:	movt	r0, #1
   14c94:	bl	12060 <__assert_fail@plt>
   14c98:	ldr	r3, [pc, #224]	; 14d80 <flatcc_builder_create_vtable@@Base+0x18c>
   14c9c:	movw	r2, #651	; 0x28b
   14ca0:	movw	r1, #32828	; 0x803c
   14ca4:	movt	r1, #1
   14ca8:	movw	r0, #32912	; 0x8090
   14cac:	movt	r0, #1
   14cb0:	bl	12060 <__assert_fail@plt>
   14cb4:	ldr	r3, [r0, #152]	; 0x98
   14cb8:	cmp	r3, #0
   14cbc:	bne	14c7c <flatcc_builder_create_vtable@@Base+0x88>
   14cc0:	ldr	r3, [r0, #180]	; 0xb4
   14cc4:	cmp	r3, #0
   14cc8:	beq	14d28 <flatcc_builder_create_vtable@@Base+0x134>
   14ccc:	ldr	r2, [r5, #136]	; 0x88
   14cd0:	ldr	r3, [sp, #8]
   14cd4:	sub	r4, r2, r3
   14cd8:	cmp	r2, r4
   14cdc:	ble	14c7c <flatcc_builder_create_vtable@@Base+0x88>
   14ce0:	str	r3, [sp]
   14ce4:	ldr	r6, [r5, #44]	; 0x2c
   14ce8:	mov	r3, r4
   14cec:	ldr	r2, [sp, #12]
   14cf0:	add	r1, sp, #16
   14cf4:	ldr	r0, [r5, #36]	; 0x24
   14cf8:	blx	r6
   14cfc:	cmp	r0, #0
   14d00:	bne	14c98 <flatcc_builder_create_vtable@@Base+0xa4>
   14d04:	str	r4, [r5, #136]	; 0x88
   14d08:	cmp	r4, #0
   14d0c:	addne	r4, r4, #1
   14d10:	mov	r0, r4
   14d14:	add	sp, sp, #80	; 0x50
   14d18:	ldrd	r4, [sp]
   14d1c:	ldr	r6, [sp, #8]
   14d20:	add	sp, sp, #12
   14d24:	pop	{pc}		; (ldr pc, [sp], #4)
   14d28:	ldr	r4, [r5, #140]	; 0x8c
   14d2c:	ldr	r3, [sp, #8]
   14d30:	add	r2, r3, r4
   14d34:	str	r2, [r5, #140]	; 0x8c
   14d38:	str	r3, [sp]
   14d3c:	ldr	r6, [r5, #44]	; 0x2c
   14d40:	mov	r3, r4
   14d44:	ldr	r2, [sp, #12]
   14d48:	add	r1, sp, #16
   14d4c:	ldr	r0, [r5, #36]	; 0x24
   14d50:	blx	r6
   14d54:	cmp	r0, #0
   14d58:	addeq	r4, r4, #1
   14d5c:	beq	14d10 <flatcc_builder_create_vtable@@Base+0x11c>
   14d60:	ldr	r3, [pc, #20]	; 14d7c <flatcc_builder_create_vtable@@Base+0x188>
   14d64:	movw	r2, #677	; 0x2a5
   14d68:	movw	r1, #32828	; 0x803c
   14d6c:	movt	r1, #1
   14d70:	movw	r0, #32912	; 0x8090
   14d74:	movt	r0, #1
   14d78:	bl	12060 <__assert_fail@plt>
   14d7c:	andeq	r7, r1, ip, ror #21
   14d80:	andeq	r7, r1, r8, lsr fp

00014d84 <flatcc_builder_create_cached_vtable@@Base>:
   14d84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d88:	strd	r6, [sp, #8]
   14d8c:	strd	r8, [sp, #16]
   14d90:	strd	sl, [sp, #24]
   14d94:	str	lr, [sp, #32]
   14d98:	sub	sp, sp, #36	; 0x24
   14d9c:	mov	r5, r0
   14da0:	str	r1, [sp, #12]
   14da4:	str	r2, [sp, #16]
   14da8:	mov	r6, r3
   14dac:	ldr	r3, [r0, #116]	; 0x74
   14db0:	cmp	r3, #0
   14db4:	beq	14dfc <flatcc_builder_create_cached_vtable@@Base+0x78>
   14db8:	ldr	r8, [r5, #116]	; 0x74
   14dbc:	rsb	r3, r8, #32
   14dc0:	lsr	r8, r6, r3
   14dc4:	ldr	sl, [r5, #92]	; 0x5c
   14dc8:	adds	r9, sl, r8, lsl #2
   14dcc:	str	r9, [sp, #20]
   14dd0:	beq	1510c <flatcc_builder_create_cached_vtable@@Base+0x388>
   14dd4:	ldr	r6, [sl, r8, lsl #2]
   14dd8:	cmp	r6, #0
   14ddc:	beq	15034 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   14de0:	ldr	fp, [r5, #100]	; 0x64
   14de4:	ldr	r7, [r5, #68]	; 0x44
   14de8:	mov	r3, #0
   14dec:	str	r3, [sp, #28]
   14df0:	str	r8, [sp, #24]
   14df4:	ldr	r8, [sp, #16]
   14df8:	b	14f04 <flatcc_builder_create_cached_vtable@@Base+0x180>
   14dfc:	add	r8, r0, #92	; 0x5c
   14e00:	ldr	r4, [r0, #124]	; 0x7c
   14e04:	cmp	r4, #0
   14e08:	bne	14e88 <flatcc_builder_create_cached_vtable@@Base+0x104>
   14e0c:	ldr	r3, [r0, #104]	; 0x68
   14e10:	cmp	r3, #15
   14e14:	bhi	14e40 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14e18:	mov	r3, #6
   14e1c:	str	r3, [sp]
   14e20:	ldr	r7, [r0, #48]	; 0x30
   14e24:	mov	r3, #0
   14e28:	mov	r2, #16
   14e2c:	add	r1, r0, #100	; 0x64
   14e30:	ldr	r0, [r0, #40]	; 0x28
   14e34:	blx	r7
   14e38:	cmp	r0, #0
   14e3c:	bne	14ea4 <flatcc_builder_create_cached_vtable@@Base+0x120>
   14e40:	ldr	r3, [r5, #100]	; 0x64
   14e44:	cmp	r3, #0
   14e48:	beq	15124 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   14e4c:	mov	r3, #16
   14e50:	str	r3, [r5, #124]	; 0x7c
   14e54:	mov	r3, #5
   14e58:	str	r3, [sp]
   14e5c:	ldr	r7, [r5, #48]	; 0x30
   14e60:	mov	r3, #1
   14e64:	mov	r2, #256	; 0x100
   14e68:	mov	r1, r8
   14e6c:	ldr	r0, [r5, #40]	; 0x28
   14e70:	blx	r7
   14e74:	cmp	r0, #0
   14e78:	bne	15124 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   14e7c:	ldr	r1, [r5, #96]	; 0x60
   14e80:	mov	r2, #256	; 0x100
   14e84:	b	14ec4 <flatcc_builder_create_cached_vtable@@Base+0x140>
   14e88:	ldr	r3, [pc, #668]	; 1512c <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   14e8c:	movw	r2, #342	; 0x156
   14e90:	movw	r1, #32828	; 0x803c
   14e94:	movt	r1, #1
   14e98:	movw	r0, #33488	; 0x82d0
   14e9c:	movt	r0, #1
   14ea0:	bl	12060 <__assert_fail@plt>
   14ea4:	ldr	r3, [pc, #644]	; 15130 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   14ea8:	mov	r2, #308	; 0x134
   14eac:	movw	r1, #32828	; 0x803c
   14eb0:	movt	r1, #1
   14eb4:	movw	r0, #32912	; 0x8090
   14eb8:	movt	r0, #1
   14ebc:	bl	12060 <__assert_fail@plt>
   14ec0:	mov	r2, r3
   14ec4:	lsl	r3, r2, #1
   14ec8:	cmp	r3, r1
   14ecc:	bls	14ec0 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   14ed0:	lsr	r3, r2, #2
   14ed4:	cmp	r2, #7
   14ed8:	bls	14eec <flatcc_builder_create_cached_vtable@@Base+0x168>
   14edc:	mov	r2, #1
   14ee0:	add	r4, r4, #1
   14ee4:	cmp	r3, r2, lsl r4
   14ee8:	bhi	14ee0 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   14eec:	str	r4, [r5, #116]	; 0x74
   14ef0:	b	14db8 <flatcc_builder_create_cached_vtable@@Base+0x34>
   14ef4:	add	r9, r4, #12
   14ef8:	ldr	r6, [r4, #12]
   14efc:	cmp	r6, #0
   14f00:	beq	14f94 <flatcc_builder_create_cached_vtable@@Base+0x210>
   14f04:	add	r4, fp, r6
   14f08:	ldr	r3, [r4, #8]
   14f0c:	add	r1, r7, r3
   14f10:	ldrh	r3, [r7, r3]
   14f14:	cmp	r3, r8
   14f18:	bne	14ef4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14f1c:	mov	r2, r8
   14f20:	ldr	r0, [sp, #12]
   14f24:	bl	11fb8 <memcmp@plt>
   14f28:	cmp	r0, #0
   14f2c:	bne	14ef4 <flatcc_builder_create_cached_vtable@@Base+0x170>
   14f30:	ldr	r2, [r4, #4]
   14f34:	ldr	r3, [r5, #152]	; 0x98
   14f38:	cmp	r2, r3
   14f3c:	bne	14f84 <flatcc_builder_create_cached_vtable@@Base+0x200>
   14f40:	ldr	r8, [sp, #24]
   14f44:	ldr	r3, [sp, #20]
   14f48:	cmp	r3, r9
   14f4c:	beq	14f64 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   14f50:	ldr	r3, [r4, #12]
   14f54:	str	r3, [r9]
   14f58:	ldr	r3, [sl, r8, lsl #2]
   14f5c:	str	r3, [r4, #12]
   14f60:	str	r6, [sl, r8, lsl #2]
   14f64:	ldr	r0, [r4]
   14f68:	add	sp, sp, #36	; 0x24
   14f6c:	ldrd	r4, [sp]
   14f70:	ldrd	r6, [sp, #8]
   14f74:	ldrd	r8, [sp, #16]
   14f78:	ldrd	sl, [sp, #24]
   14f7c:	add	sp, sp, #32
   14f80:	pop	{pc}		; (ldr pc, [sp], #4)
   14f84:	add	r9, r4, #12
   14f88:	ldr	r6, [r4, #12]
   14f8c:	str	r4, [sp, #28]
   14f90:	b	14efc <flatcc_builder_create_cached_vtable@@Base+0x178>
   14f94:	ldr	r8, [sp, #24]
   14f98:	ldr	r4, [r5, #124]	; 0x7c
   14f9c:	add	r2, r4, #16
   14fa0:	ldr	r3, [r5, #104]	; 0x68
   14fa4:	cmp	r2, r3
   14fa8:	bls	14fd0 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   14fac:	mov	r3, #6
   14fb0:	str	r3, [sp]
   14fb4:	ldr	r6, [r5, #48]	; 0x30
   14fb8:	mov	r3, #0
   14fbc:	add	r1, r5, #100	; 0x64
   14fc0:	ldr	r0, [r5, #40]	; 0x28
   14fc4:	blx	r6
   14fc8:	cmp	r0, #0
   14fcc:	bne	15040 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   14fd0:	ldr	r6, [r5, #100]	; 0x64
   14fd4:	adds	r7, r6, r4
   14fd8:	beq	15114 <flatcc_builder_create_cached_vtable@@Base+0x390>
   14fdc:	ldr	r3, [r5, #124]	; 0x7c
   14fe0:	add	r2, r3, #16
   14fe4:	str	r2, [r5, #124]	; 0x7c
   14fe8:	ldr	r2, [r5, #152]	; 0x98
   14fec:	str	r2, [r7, #4]
   14ff0:	ldr	r2, [sl, r8, lsl #2]
   14ff4:	str	r2, [r7, #12]
   14ff8:	str	r3, [sl, r8, lsl #2]
   14ffc:	ldr	r2, [sp, #16]
   15000:	ldr	r1, [sp, #12]
   15004:	mov	r0, r5
   15008:	bl	14bf4 <flatcc_builder_create_vtable@@Base>
   1500c:	str	r0, [r6, r4]
   15010:	cmp	r0, #0
   15014:	beq	14f68 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15018:	ldr	r3, [sp, #28]
   1501c:	cmp	r3, #0
   15020:	beq	1505c <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   15024:	ldr	r3, [r3, #8]
   15028:	str	r3, [r7, #8]
   1502c:	ldr	r0, [r6, r4]
   15030:	b	14f68 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15034:	mov	r3, #0
   15038:	str	r3, [sp, #28]
   1503c:	b	14f98 <flatcc_builder_create_cached_vtable@@Base+0x214>
   15040:	ldr	r3, [pc, #232]	; 15130 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   15044:	mov	r2, #308	; 0x134
   15048:	movw	r1, #32828	; 0x803c
   1504c:	movt	r1, #1
   15050:	movw	r0, #32912	; 0x8090
   15054:	movt	r0, #1
   15058:	bl	12060 <__assert_fail@plt>
   1505c:	ldr	r2, [r5, #172]	; 0xac
   15060:	cmp	r2, #0
   15064:	beq	1507c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15068:	ldr	r3, [r5, #120]	; 0x78
   1506c:	ldr	r1, [sp, #16]
   15070:	add	r3, r1, r3
   15074:	cmp	r2, r3
   15078:	bcc	150e4 <flatcc_builder_create_cached_vtable@@Base+0x360>
   1507c:	ldr	r8, [r5, #120]	; 0x78
   15080:	ldr	r3, [sp, #16]
   15084:	add	r2, r8, r3
   15088:	ldr	r3, [r5, #72]	; 0x48
   1508c:	cmp	r2, r3
   15090:	bls	150b8 <flatcc_builder_create_cached_vtable@@Base+0x334>
   15094:	mov	r3, #2
   15098:	str	r3, [sp]
   1509c:	ldr	sl, [r5, #48]	; 0x30
   150a0:	mov	r3, #0
   150a4:	add	r1, r5, #68	; 0x44
   150a8:	ldr	r0, [r5, #40]	; 0x28
   150ac:	blx	sl
   150b0:	cmp	r0, #0
   150b4:	bne	150f0 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   150b8:	ldr	r3, [r5, #68]	; 0x44
   150bc:	adds	r0, r3, r8
   150c0:	beq	1511c <flatcc_builder_create_cached_vtable@@Base+0x398>
   150c4:	ldr	r3, [r5, #120]	; 0x78
   150c8:	str	r3, [r7, #8]
   150cc:	ldr	r2, [sp, #16]
   150d0:	add	r3, r2, r3
   150d4:	str	r3, [r5, #120]	; 0x78
   150d8:	ldr	r1, [sp, #12]
   150dc:	bl	11fac <memcpy@plt>
   150e0:	b	1502c <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   150e4:	mov	r0, r5
   150e8:	bl	12f8c <flatcc_builder_flush_vtable_cache@@Base>
   150ec:	b	1502c <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   150f0:	ldr	r3, [pc, #56]	; 15130 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   150f4:	mov	r2, #308	; 0x134
   150f8:	movw	r1, #32828	; 0x803c
   150fc:	movt	r1, #1
   15100:	movw	r0, #32912	; 0x8090
   15104:	movt	r0, #1
   15108:	bl	12060 <__assert_fail@plt>
   1510c:	mov	r0, #0
   15110:	b	14f68 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15114:	mov	r0, #0
   15118:	b	14f68 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   1511c:	mvn	r0, #0
   15120:	b	14f68 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15124:	mov	r0, #0
   15128:	b	14f68 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   1512c:	andeq	r7, r1, ip, ror sp
   15130:	andeq	r7, r1, r8, lsl #22

00015134 <flatcc_builder_create_table@@Base>:
   15134:	strd	r4, [sp, #-20]!	; 0xffffffec
   15138:	strd	r6, [sp, #8]
   1513c:	str	lr, [sp, #16]
   15140:	sub	sp, sp, #92	; 0x5c
   15144:	ldr	r7, [sp, #116]	; 0x74
   15148:	ldr	ip, [sp, #120]	; 0x78
   1514c:	cmp	r7, #0
   15150:	blt	15298 <flatcc_builder_create_table@@Base+0x164>
   15154:	mov	r4, r0
   15158:	tst	ip, #1
   1515c:	beq	152b4 <flatcc_builder_create_table@@Base+0x180>
   15160:	cmp	r3, #4
   15164:	movcc	r3, #4
   15168:	ldrh	r0, [r0, #128]	; 0x80
   1516c:	cmp	r0, r3
   15170:	strhcc	r3, [r4, #128]	; 0x80
   15174:	ldr	r0, [r4, #136]	; 0x88
   15178:	sub	r6, r0, r2
   1517c:	sub	r3, r3, #1
   15180:	and	r6, r6, r3
   15184:	sub	r0, r0, r2
   15188:	sub	r0, r0, #4
   1518c:	sub	ip, ip, #1
   15190:	sub	ip, r0, ip
   15194:	sub	ip, ip, r6
   15198:	str	ip, [sp, #84]	; 0x54
   1519c:	cmp	r7, #0
   151a0:	ble	151d0 <flatcc_builder_create_table@@Base+0x9c>
   151a4:	ldr	ip, [sp, #112]	; 0x70
   151a8:	add	r7, ip, r7, lsl #1
   151ac:	sub	r0, r6, r0
   151b0:	sub	lr, r0, #4
   151b4:	ldrh	r3, [ip], #2
   151b8:	sub	r5, lr, r3
   151bc:	ldr	r0, [r1, r3]
   151c0:	add	r0, r0, r5
   151c4:	str	r0, [r1, r3]
   151c8:	cmp	r7, ip
   151cc:	bne	151b4 <flatcc_builder_create_table@@Base+0x80>
   151d0:	mov	r3, #4
   151d4:	str	r3, [sp, #12]
   151d8:	add	r0, sp, #84	; 0x54
   151dc:	str	r0, [sp, #20]
   151e0:	str	r3, [sp, #24]
   151e4:	mov	r3, #1
   151e8:	str	r3, [sp, #16]
   151ec:	cmp	r2, #0
   151f0:	beq	1520c <flatcc_builder_create_table@@Base+0xd8>
   151f4:	add	r3, r2, #4
   151f8:	str	r3, [sp, #12]
   151fc:	str	r1, [sp, #28]
   15200:	str	r2, [sp, #32]
   15204:	mov	r3, #2
   15208:	str	r3, [sp, #16]
   1520c:	cmp	r6, #0
   15210:	beq	15244 <flatcc_builder_create_table@@Base+0x110>
   15214:	ldr	r3, [sp, #12]
   15218:	add	r3, r3, r6
   1521c:	str	r3, [sp, #12]
   15220:	ldr	r3, [sp, #16]
   15224:	add	r3, r3, #1
   15228:	add	r2, sp, #88	; 0x58
   1522c:	add	r1, r2, r3, lsl #3
   15230:	movw	r2, #30956	; 0x78ec
   15234:	movt	r2, #1
   15238:	str	r2, [r1, #-76]	; 0xffffffb4
   1523c:	str	r6, [r1, #-72]	; 0xffffffb8
   15240:	str	r3, [sp, #16]
   15244:	ldr	r2, [r4, #136]	; 0x88
   15248:	ldr	r3, [sp, #12]
   1524c:	sub	r5, r2, r3
   15250:	cmp	r2, r5
   15254:	ble	152d0 <flatcc_builder_create_table@@Base+0x19c>
   15258:	str	r3, [sp]
   1525c:	ldr	r6, [r4, #44]	; 0x2c
   15260:	mov	r3, r5
   15264:	ldr	r2, [sp, #16]
   15268:	add	r1, sp, #20
   1526c:	ldr	r0, [r4, #36]	; 0x24
   15270:	blx	r6
   15274:	cmp	r0, #0
   15278:	bne	152ec <flatcc_builder_create_table@@Base+0x1b8>
   1527c:	str	r5, [r4, #136]	; 0x88
   15280:	mov	r0, r5
   15284:	add	sp, sp, #92	; 0x5c
   15288:	ldrd	r4, [sp]
   1528c:	ldrd	r6, [sp, #8]
   15290:	add	sp, sp, #16
   15294:	pop	{pc}		; (ldr pc, [sp], #4)
   15298:	ldr	r3, [pc, #104]	; 15308 <flatcc_builder_create_table@@Base+0x1d4>
   1529c:	movw	r2, #1237	; 0x4d5
   152a0:	movw	r1, #32828	; 0x803c
   152a4:	movt	r1, #1
   152a8:	movw	r0, #33504	; 0x82e0
   152ac:	movt	r0, #1
   152b0:	bl	12060 <__assert_fail@plt>
   152b4:	ldr	r3, [pc, #76]	; 15308 <flatcc_builder_create_table@@Base+0x1d4>
   152b8:	movw	r2, #1243	; 0x4db
   152bc:	movw	r1, #32828	; 0x803c
   152c0:	movt	r1, #1
   152c4:	movw	r0, #33524	; 0x82f4
   152c8:	movt	r0, #1
   152cc:	bl	12060 <__assert_fail@plt>
   152d0:	ldr	r3, [pc, #52]	; 1530c <flatcc_builder_create_table@@Base+0x1d8>
   152d4:	movw	r2, #647	; 0x287
   152d8:	movw	r1, #32828	; 0x803c
   152dc:	movt	r1, #1
   152e0:	movw	r0, #32912	; 0x8090
   152e4:	movt	r0, #1
   152e8:	bl	12060 <__assert_fail@plt>
   152ec:	ldr	r3, [pc, #24]	; 1530c <flatcc_builder_create_table@@Base+0x1d8>
   152f0:	movw	r2, #651	; 0x28b
   152f4:	movw	r1, #32828	; 0x803c
   152f8:	movt	r1, #1
   152fc:	movw	r0, #32912	; 0x8090
   15300:	movt	r0, #1
   15304:	bl	12060 <__assert_fail@plt>
   15308:	andeq	r7, r1, r8, lsl #27
   1530c:	andeq	r7, r1, r8, lsr fp

00015310 <flatcc_builder_check_required_field@@Base>:
   15310:	ldr	r3, [r0, #32]
   15314:	ldrh	r3, [r3, #14]
   15318:	cmp	r3, #3
   1531c:	bne	15344 <flatcc_builder_check_required_field@@Base+0x34>
   15320:	ldrh	r3, [r0, #8]
   15324:	cmp	r3, r1
   15328:	bls	15368 <flatcc_builder_check_required_field@@Base+0x58>
   1532c:	ldr	r3, [r0, #4]
   15330:	lsl	r1, r1, #1
   15334:	ldrh	r0, [r3, r1]
   15338:	adds	r0, r0, #0
   1533c:	movne	r0, #1
   15340:	bx	lr
   15344:	str	r4, [sp, #-8]!
   15348:	str	lr, [sp, #4]
   1534c:	ldr	r3, [pc, #28]	; 15370 <flatcc_builder_check_required_field@@Base+0x60>
   15350:	movw	r2, #1272	; 0x4f8
   15354:	movw	r1, #32828	; 0x803c
   15358:	movt	r1, #1
   1535c:	movw	r0, #33536	; 0x8300
   15360:	movt	r0, #1
   15364:	bl	12060 <__assert_fail@plt>
   15368:	mov	r0, #0
   1536c:	bx	lr
   15370:	andeq	r7, r1, r4, lsr #27

00015374 <flatcc_builder_check_union_field@@Base>:
   15374:	ldr	r3, [r0, #32]
   15378:	ldrh	r3, [r3, #14]
   1537c:	cmp	r3, #3
   15380:	bne	153d4 <flatcc_builder_check_union_field@@Base+0x60>
   15384:	cmp	r1, #0
   15388:	beq	15420 <flatcc_builder_check_union_field@@Base+0xac>
   1538c:	ldrh	r3, [r0, #8]
   15390:	cmp	r3, r1
   15394:	bls	15428 <flatcc_builder_check_union_field@@Base+0xb4>
   15398:	ldr	r3, [r0, #4]
   1539c:	sub	r1, r1, #-2147483647	; 0x80000001
   153a0:	lsl	r1, r1, #1
   153a4:	ldrh	r2, [r3, r1]
   153a8:	cmp	r2, #0
   153ac:	beq	153f8 <flatcc_builder_check_union_field@@Base+0x84>
   153b0:	ldr	r0, [r0, #16]
   153b4:	ldrb	r2, [r0, r2]
   153b8:	cmp	r2, #0
   153bc:	bne	1540c <flatcc_builder_check_union_field@@Base+0x98>
   153c0:	add	r1, r3, r1
   153c4:	ldrh	r0, [r1, #2]
   153c8:	clz	r0, r0
   153cc:	lsr	r0, r0, #5
   153d0:	bx	lr
   153d4:	str	r4, [sp, #-8]!
   153d8:	str	lr, [sp, #4]
   153dc:	ldr	r3, [pc, #76]	; 15430 <flatcc_builder_check_union_field@@Base+0xbc>
   153e0:	movw	r2, #1279	; 0x4ff
   153e4:	movw	r1, #32828	; 0x803c
   153e8:	movt	r1, #1
   153ec:	movw	r0, #33536	; 0x8300
   153f0:	movt	r0, #1
   153f4:	bl	12060 <__assert_fail@plt>
   153f8:	add	r1, r3, r1
   153fc:	ldrh	r0, [r1, #2]
   15400:	clz	r0, r0
   15404:	lsr	r0, r0, #5
   15408:	bx	lr
   1540c:	add	r1, r3, r1
   15410:	ldrh	r0, [r1, #2]
   15414:	adds	r0, r0, #0
   15418:	movne	r0, #1
   1541c:	bx	lr
   15420:	mov	r0, #0
   15424:	bx	lr
   15428:	mov	r0, #0
   1542c:	bx	lr
   15430:	andeq	r7, r1, r8, asr #27

00015434 <flatcc_builder_check_required@@Base>:
   15434:	ldr	r3, [r0, #32]
   15438:	ldrh	r3, [r3, #14]
   1543c:	cmp	r3, #3
   15440:	bne	1549c <flatcc_builder_check_required@@Base+0x68>
   15444:	ldrh	r3, [r0, #8]
   15448:	cmp	r3, r2
   1544c:	blt	154c8 <flatcc_builder_check_required@@Base+0x94>
   15450:	cmp	r2, #0
   15454:	ble	154d0 <flatcc_builder_check_required@@Base+0x9c>
   15458:	ldr	ip, [r0, #4]
   1545c:	ldrh	r3, [r1]
   15460:	lsl	r3, r3, #1
   15464:	ldrh	r3, [ip, r3]
   15468:	cmp	r3, #0
   1546c:	beq	154d8 <flatcc_builder_check_required@@Base+0xa4>
   15470:	add	r0, r1, #2
   15474:	add	r2, r1, r2, lsl #1
   15478:	cmp	r0, r2
   1547c:	beq	154c0 <flatcc_builder_check_required@@Base+0x8c>
   15480:	ldrh	r3, [r0], #2
   15484:	lsl	r3, r3, #1
   15488:	ldrh	r3, [ip, r3]
   1548c:	cmp	r3, #0
   15490:	bne	15478 <flatcc_builder_check_required@@Base+0x44>
   15494:	mov	r0, #0
   15498:	bx	lr
   1549c:	str	r4, [sp, #-8]!
   154a0:	str	lr, [sp, #4]
   154a4:	ldr	r3, [pc, #52]	; 154e0 <flatcc_builder_check_required@@Base+0xac>
   154a8:	movw	r2, #1297	; 0x511
   154ac:	movw	r1, #32828	; 0x803c
   154b0:	movt	r1, #1
   154b4:	movw	r0, #33536	; 0x8300
   154b8:	movt	r0, #1
   154bc:	bl	12060 <__assert_fail@plt>
   154c0:	mov	r0, #1
   154c4:	bx	lr
   154c8:	mov	r0, #0
   154cc:	bx	lr
   154d0:	mov	r0, #1
   154d4:	bx	lr
   154d8:	mov	r0, #0
   154dc:	bx	lr
   154e0:	andeq	r7, r1, ip, ror #27

000154e4 <flatcc_builder_end_table@@Base>:
   154e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   154e8:	strd	r6, [sp, #8]
   154ec:	str	lr, [sp, #16]
   154f0:	sub	sp, sp, #20
   154f4:	ldr	r3, [r0, #32]
   154f8:	ldrh	r3, [r3, #14]
   154fc:	cmp	r3, #3
   15500:	bne	15580 <flatcc_builder_end_table@@Base+0x9c>
   15504:	mov	r4, r0
   15508:	ldr	r2, [r0, #4]
   1550c:	sub	r6, r2, #4
   15510:	ldrh	r5, [r0, #8]
   15514:	add	r5, r5, #2
   15518:	lsl	r5, r5, #1
   1551c:	uxth	r5, r5
   15520:	strh	r5, [r2, #-4]
   15524:	ldr	r3, [r0, #20]
   15528:	add	r3, r3, #4
   1552c:	uxth	r1, r3
   15530:	strh	r1, [r2, #-2]
   15534:	ldr	r3, [r0, #12]
   15538:	eor	r3, r3, r5
   1553c:	movw	r2, #31153	; 0x79b1
   15540:	movt	r2, #40503	; 0x9e37
   15544:	mul	r3, r2, r3
   15548:	eor	r3, r3, r1
   1554c:	mul	r3, r2, r3
   15550:	str	r3, [r0, #12]
   15554:	mov	r2, r5
   15558:	mov	r1, r6
   1555c:	bl	14d84 <flatcc_builder_create_cached_vtable@@Base>
   15560:	subs	r7, r0, #0
   15564:	bne	1559c <flatcc_builder_end_table@@Base+0xb8>
   15568:	mov	r0, r7
   1556c:	add	sp, sp, #20
   15570:	ldrd	r4, [sp]
   15574:	ldrd	r6, [sp, #8]
   15578:	add	sp, sp, #16
   1557c:	pop	{pc}		; (ldr pc, [sp], #4)
   15580:	ldr	r3, [pc, #284]	; 156a4 <flatcc_builder_end_table@@Base+0x1c0>
   15584:	movw	r2, #1317	; 0x525
   15588:	movw	r1, #32828	; 0x803c
   1558c:	movt	r1, #1
   15590:	movw	r0, #33536	; 0x8300
   15594:	movt	r0, #1
   15598:	bl	12060 <__assert_fail@plt>
   1559c:	mov	r2, r5
   155a0:	mov	r1, #0
   155a4:	mov	r0, r6
   155a8:	bl	12030 <memset@plt>
   155ac:	ldr	r3, [r4, #32]
   155b0:	ldr	r2, [r4, #76]	; 0x4c
   155b4:	ldr	r3, [r3, #20]
   155b8:	add	r2, r2, r3
   155bc:	str	r7, [sp, #8]
   155c0:	ldr	r3, [r4]
   155c4:	sub	r3, r3, r2
   155c8:	asr	r3, r3, #1
   155cc:	str	r3, [sp, #4]
   155d0:	str	r2, [sp]
   155d4:	ldrh	r3, [r4, #130]	; 0x82
   155d8:	ldr	r2, [r4, #20]
   155dc:	ldr	r1, [r4, #16]
   155e0:	mov	r0, r4
   155e4:	bl	15134 <flatcc_builder_create_table@@Base>
   155e8:	subs	r7, r0, #0
   155ec:	beq	15568 <flatcc_builder_end_table@@Base+0x84>
   155f0:	ldr	r3, [r4, #32]
   155f4:	ldr	r2, [r3, #24]
   155f8:	str	r2, [r4, #12]
   155fc:	ldrh	r2, [r3, #28]
   15600:	strh	r2, [r4, #8]
   15604:	ldr	r2, [r4, #52]	; 0x34
   15608:	ldr	r1, [r3, #16]
   1560c:	add	r2, r2, r1
   15610:	str	r2, [r4, #4]
   15614:	ldr	r2, [r4, #76]	; 0x4c
   15618:	ldr	r3, [r3, #20]
   1561c:	add	r3, r2, r3
   15620:	str	r3, [r4]
   15624:	ldr	r2, [r4, #20]
   15628:	mov	r1, #0
   1562c:	ldr	r0, [r4, #16]
   15630:	bl	12030 <memset@plt>
   15634:	ldr	r2, [r4, #32]
   15638:	ldr	r3, [r2, #8]
   1563c:	str	r3, [r4, #20]
   15640:	ldr	r0, [r2]
   15644:	str	r0, [r4, #28]
   15648:	ldr	r1, [r2, #4]
   1564c:	ldr	r3, [r4, #60]	; 0x3c
   15650:	add	r3, r3, r0
   15654:	str	r3, [r4, #16]
   15658:	ldr	r3, [r4, #64]	; 0x40
   1565c:	sub	r3, r3, r0
   15660:	cmp	r3, r1
   15664:	movcs	r3, r1
   15668:	str	r3, [r4, #24]
   1566c:	str	r1, [r2, #4]
   15670:	ldrh	r3, [r4, #130]	; 0x82
   15674:	ldrh	r2, [r4, #128]	; 0x80
   15678:	cmp	r2, r3
   1567c:	strhcc	r3, [r4, #128]	; 0x80
   15680:	ldr	r3, [r4, #32]
   15684:	ldrh	r2, [r3, #12]
   15688:	strh	r2, [r4, #130]	; 0x82
   1568c:	sub	r3, r3, #36	; 0x24
   15690:	str	r3, [r4, #32]
   15694:	ldr	r3, [r4, #156]	; 0x9c
   15698:	sub	r3, r3, #1
   1569c:	str	r3, [r4, #156]	; 0x9c
   156a0:	b	15568 <flatcc_builder_end_table@@Base+0x84>
   156a4:	andeq	r7, r1, ip, lsl #28

000156a8 <flatcc_builder_create_vector@@Base>:
   156a8:	strd	r4, [sp, #-16]!
   156ac:	str	r6, [sp, #8]
   156b0:	str	lr, [sp, #12]
   156b4:	sub	sp, sp, #88	; 0x58
   156b8:	mov	r4, r0
   156bc:	ldrh	r0, [sp, #104]	; 0x68
   156c0:	ldr	ip, [sp, #108]	; 0x6c
   156c4:	cmp	r2, ip
   156c8:	bhi	157bc <flatcc_builder_create_vector@@Base+0x114>
   156cc:	cmp	r0, #4
   156d0:	movcc	r0, #4
   156d4:	ldrh	ip, [r4, #128]	; 0x80
   156d8:	cmp	ip, r0
   156dc:	strhcc	r0, [r4, #128]	; 0x80
   156e0:	mul	r3, r3, r2
   156e4:	str	r2, [sp, #84]	; 0x54
   156e8:	ldr	r2, [r4, #136]	; 0x88
   156ec:	sub	ip, r2, r3
   156f0:	sub	r0, r0, #1
   156f4:	and	r0, r0, ip
   156f8:	mov	ip, #4
   156fc:	str	ip, [sp, #12]
   15700:	add	lr, sp, #84	; 0x54
   15704:	str	lr, [sp, #20]
   15708:	str	ip, [sp, #24]
   1570c:	mov	ip, #1
   15710:	str	ip, [sp, #16]
   15714:	cmp	r3, #0
   15718:	beq	15734 <flatcc_builder_create_vector@@Base+0x8c>
   1571c:	add	ip, r3, #4
   15720:	str	ip, [sp, #12]
   15724:	str	r1, [sp, #28]
   15728:	str	r3, [sp, #32]
   1572c:	mov	r3, #2
   15730:	str	r3, [sp, #16]
   15734:	cmp	r0, #0
   15738:	beq	1576c <flatcc_builder_create_vector@@Base+0xc4>
   1573c:	ldr	r3, [sp, #12]
   15740:	add	r3, r3, r0
   15744:	str	r3, [sp, #12]
   15748:	ldr	r3, [sp, #16]
   1574c:	add	r3, r3, #1
   15750:	add	r1, sp, #88	; 0x58
   15754:	add	ip, r1, r3, lsl #3
   15758:	movw	r1, #30956	; 0x78ec
   1575c:	movt	r1, #1
   15760:	str	r1, [ip, #-76]	; 0xffffffb4
   15764:	str	r0, [ip, #-72]	; 0xffffffb8
   15768:	str	r3, [sp, #16]
   1576c:	ldr	r3, [sp, #12]
   15770:	sub	r5, r2, r3
   15774:	cmp	r2, r5
   15778:	ble	157d8 <flatcc_builder_create_vector@@Base+0x130>
   1577c:	str	r3, [sp]
   15780:	ldr	r6, [r4, #44]	; 0x2c
   15784:	mov	r3, r5
   15788:	ldr	r2, [sp, #16]
   1578c:	add	r1, sp, #20
   15790:	ldr	r0, [r4, #36]	; 0x24
   15794:	blx	r6
   15798:	cmp	r0, #0
   1579c:	bne	157f4 <flatcc_builder_create_vector@@Base+0x14c>
   157a0:	str	r5, [r4, #136]	; 0x88
   157a4:	mov	r0, r5
   157a8:	add	sp, sp, #88	; 0x58
   157ac:	ldrd	r4, [sp]
   157b0:	ldr	r6, [sp, #8]
   157b4:	add	sp, sp, #12
   157b8:	pop	{pc}		; (ldr pc, [sp], #4)
   157bc:	ldr	r3, [pc, #76]	; 15810 <flatcc_builder_create_vector@@Base+0x168>
   157c0:	movw	r2, #1365	; 0x555
   157c4:	movw	r1, #32828	; 0x803c
   157c8:	movt	r1, #1
   157cc:	movw	r0, #33580	; 0x832c
   157d0:	movt	r0, #1
   157d4:	bl	12060 <__assert_fail@plt>
   157d8:	ldr	r3, [pc, #52]	; 15814 <flatcc_builder_create_vector@@Base+0x16c>
   157dc:	movw	r2, #647	; 0x287
   157e0:	movw	r1, #32828	; 0x803c
   157e4:	movt	r1, #1
   157e8:	movw	r0, #32912	; 0x8090
   157ec:	movt	r0, #1
   157f0:	bl	12060 <__assert_fail@plt>
   157f4:	ldr	r3, [pc, #24]	; 15814 <flatcc_builder_create_vector@@Base+0x16c>
   157f8:	movw	r2, #651	; 0x28b
   157fc:	movw	r1, #32828	; 0x803c
   15800:	movt	r1, #1
   15804:	movw	r0, #32912	; 0x8090
   15808:	movt	r0, #1
   1580c:	bl	12060 <__assert_fail@plt>
   15810:	andeq	r7, r1, r8, lsr #28
   15814:	andeq	r7, r1, r8, lsr fp

00015818 <flatcc_builder_end_vector@@Base>:
   15818:	strd	r4, [sp, #-12]!
   1581c:	str	lr, [sp, #8]
   15820:	sub	sp, sp, #12
   15824:	ldr	r1, [r0, #32]
   15828:	ldrh	r3, [r1, #14]
   1582c:	cmp	r3, #4
   15830:	bne	15874 <flatcc_builder_end_vector@@Base+0x5c>
   15834:	mov	r4, r0
   15838:	ldr	r3, [r1, #16]
   1583c:	ldr	r2, [r1, #20]
   15840:	ldr	r1, [r1, #24]
   15844:	str	r1, [sp, #4]
   15848:	ldrh	r1, [r0, #130]	; 0x82
   1584c:	str	r1, [sp]
   15850:	ldr	r1, [r0, #16]
   15854:	bl	156a8 <flatcc_builder_create_vector@@Base>
   15858:	subs	r5, r0, #0
   1585c:	bne	15890 <flatcc_builder_end_vector@@Base+0x78>
   15860:	mov	r0, r5
   15864:	add	sp, sp, #12
   15868:	ldrd	r4, [sp]
   1586c:	add	sp, sp, #8
   15870:	pop	{pc}		; (ldr pc, [sp], #4)
   15874:	ldr	r3, [pc, #148]	; 15910 <flatcc_builder_end_vector@@Base+0xf8>
   15878:	movw	r2, #1400	; 0x578
   1587c:	movw	r1, #32828	; 0x803c
   15880:	movt	r1, #1
   15884:	movw	r0, #33140	; 0x8174
   15888:	movt	r0, #1
   1588c:	bl	12060 <__assert_fail@plt>
   15890:	ldr	r2, [r4, #20]
   15894:	mov	r1, #0
   15898:	ldr	r0, [r4, #16]
   1589c:	bl	12030 <memset@plt>
   158a0:	ldr	r2, [r4, #32]
   158a4:	ldr	r3, [r2, #8]
   158a8:	str	r3, [r4, #20]
   158ac:	ldr	r0, [r2]
   158b0:	str	r0, [r4, #28]
   158b4:	ldr	r1, [r2, #4]
   158b8:	ldr	r3, [r4, #60]	; 0x3c
   158bc:	add	r3, r3, r0
   158c0:	str	r3, [r4, #16]
   158c4:	ldr	r3, [r4, #64]	; 0x40
   158c8:	sub	r3, r3, r0
   158cc:	cmp	r3, r1
   158d0:	movcs	r3, r1
   158d4:	str	r3, [r4, #24]
   158d8:	str	r1, [r2, #4]
   158dc:	ldrh	r3, [r4, #130]	; 0x82
   158e0:	ldrh	r2, [r4, #128]	; 0x80
   158e4:	cmp	r2, r3
   158e8:	strhcc	r3, [r4, #128]	; 0x80
   158ec:	ldr	r3, [r4, #32]
   158f0:	ldrh	r2, [r3, #12]
   158f4:	strh	r2, [r4, #130]	; 0x82
   158f8:	sub	r3, r3, #36	; 0x24
   158fc:	str	r3, [r4, #32]
   15900:	ldr	r3, [r4, #156]	; 0x9c
   15904:	sub	r3, r3, #1
   15908:	str	r3, [r4, #156]	; 0x9c
   1590c:	b	15860 <flatcc_builder_end_vector@@Base+0x48>
   15910:	andeq	r7, r1, r8, asr #28

00015914 <flatcc_builder_vector_count@@Base>:
   15914:	ldr	r3, [r0, #32]
   15918:	ldr	r0, [r3, #20]
   1591c:	bx	lr

00015920 <flatcc_builder_vector_edit@@Base>:
   15920:	ldr	r0, [r0, #16]
   15924:	bx	lr

00015928 <flatcc_builder_create_offset_vector_direct@@Base>:
   15928:	str	r4, [sp, #-8]!
   1592c:	str	lr, [sp, #4]
   15930:	mov	r3, #0
   15934:	bl	12d84 <flatcc_builder_default_alloc@@Base+0x3b8>
   15938:	ldr	r4, [sp]
   1593c:	add	sp, sp, #4
   15940:	pop	{pc}		; (ldr pc, [sp], #4)

00015944 <flatcc_builder_end_offset_vector@@Base>:
   15944:	strd	r4, [sp, #-16]!
   15948:	str	r6, [sp, #8]
   1594c:	str	lr, [sp, #12]
   15950:	ldr	r3, [r0, #32]
   15954:	ldrh	r2, [r3, #14]
   15958:	cmp	r2, #5
   1595c:	bne	1598c <flatcc_builder_end_offset_vector@@Base+0x48>
   15960:	mov	r4, r0
   15964:	ldr	r2, [r3, #20]
   15968:	ldr	r1, [r0, #16]
   1596c:	bl	15928 <flatcc_builder_create_offset_vector_direct@@Base>
   15970:	subs	r5, r0, #0
   15974:	bne	159a8 <flatcc_builder_end_offset_vector@@Base+0x64>
   15978:	mov	r0, r5
   1597c:	ldrd	r4, [sp]
   15980:	ldr	r6, [sp, #8]
   15984:	add	sp, sp, #12
   15988:	pop	{pc}		; (ldr pc, [sp], #4)
   1598c:	ldr	r3, [pc, #148]	; 15a28 <flatcc_builder_end_offset_vector@@Base+0xe4>
   15990:	movw	r2, #1480	; 0x5c8
   15994:	movw	r1, #32828	; 0x803c
   15998:	movt	r1, #1
   1599c:	movw	r0, #33248	; 0x81e0
   159a0:	movt	r0, #1
   159a4:	bl	12060 <__assert_fail@plt>
   159a8:	ldr	r2, [r4, #20]
   159ac:	mov	r1, #0
   159b0:	ldr	r0, [r4, #16]
   159b4:	bl	12030 <memset@plt>
   159b8:	ldr	r2, [r4, #32]
   159bc:	ldr	r3, [r2, #8]
   159c0:	str	r3, [r4, #20]
   159c4:	ldr	r0, [r2]
   159c8:	str	r0, [r4, #28]
   159cc:	ldr	r1, [r2, #4]
   159d0:	ldr	r3, [r4, #60]	; 0x3c
   159d4:	add	r3, r3, r0
   159d8:	str	r3, [r4, #16]
   159dc:	ldr	r3, [r4, #64]	; 0x40
   159e0:	sub	r3, r3, r0
   159e4:	cmp	r3, r1
   159e8:	movcs	r3, r1
   159ec:	str	r3, [r4, #24]
   159f0:	str	r1, [r2, #4]
   159f4:	ldrh	r3, [r4, #130]	; 0x82
   159f8:	ldrh	r2, [r4, #128]	; 0x80
   159fc:	cmp	r2, r3
   15a00:	strhcc	r3, [r4, #128]	; 0x80
   15a04:	ldr	r3, [r4, #32]
   15a08:	ldrh	r2, [r3, #12]
   15a0c:	strh	r2, [r4, #130]	; 0x82
   15a10:	sub	r3, r3, #36	; 0x24
   15a14:	str	r3, [r4, #32]
   15a18:	ldr	r3, [r4, #156]	; 0x9c
   15a1c:	sub	r3, r3, #1
   15a20:	str	r3, [r4, #156]	; 0x9c
   15a24:	b	15978 <flatcc_builder_end_offset_vector@@Base+0x34>
   15a28:	andeq	r7, r1, r4, ror #28

00015a2c <flatcc_builder_create_offset_vector@@Base>:
   15a2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a30:	strd	r6, [sp, #8]
   15a34:	str	r8, [sp, #16]
   15a38:	str	lr, [sp, #20]
   15a3c:	mov	r5, r0
   15a40:	mov	r7, r1
   15a44:	mov	r6, r2
   15a48:	bl	147b4 <flatcc_builder_start_offset_vector@@Base>
   15a4c:	subs	r4, r0, #0
   15a50:	movne	r4, #0
   15a54:	beq	15a70 <flatcc_builder_create_offset_vector@@Base+0x44>
   15a58:	mov	r0, r4
   15a5c:	ldrd	r4, [sp]
   15a60:	ldrd	r6, [sp, #8]
   15a64:	ldr	r8, [sp, #16]
   15a68:	add	sp, sp, #20
   15a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a70:	mov	r1, r6
   15a74:	mov	r0, r5
   15a78:	bl	140b8 <flatcc_builder_extend_offset_vector@@Base>
   15a7c:	cmp	r0, #0
   15a80:	beq	15a58 <flatcc_builder_create_offset_vector@@Base+0x2c>
   15a84:	lsl	r2, r6, #2
   15a88:	mov	r1, r7
   15a8c:	bl	11fac <memcpy@plt>
   15a90:	mov	r0, r5
   15a94:	bl	15944 <flatcc_builder_end_offset_vector@@Base>
   15a98:	mov	r4, r0
   15a9c:	b	15a58 <flatcc_builder_create_offset_vector@@Base+0x2c>

00015aa0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15aa0:	strd	r4, [sp, #-16]!
   15aa4:	str	r6, [sp, #8]
   15aa8:	str	lr, [sp, #12]
   15aac:	mov	r4, r0
   15ab0:	ldr	r2, [r0, #32]
   15ab4:	ldrh	r0, [r2, #14]
   15ab8:	cmp	r0, #5
   15abc:	bne	15af0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   15ac0:	mov	r3, r1
   15ac4:	ldr	r2, [r2, #20]
   15ac8:	ldr	r1, [r4, #16]
   15acc:	mov	r0, r4
   15ad0:	bl	12d84 <flatcc_builder_default_alloc@@Base+0x3b8>
   15ad4:	subs	r5, r0, #0
   15ad8:	bne	15b0c <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   15adc:	mov	r0, r5
   15ae0:	ldrd	r4, [sp]
   15ae4:	ldr	r6, [sp, #8]
   15ae8:	add	sp, sp, #12
   15aec:	pop	{pc}		; (ldr pc, [sp], #4)
   15af0:	ldr	r3, [pc, #148]	; 15b8c <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   15af4:	movw	r2, #1493	; 0x5d5
   15af8:	movw	r1, #32828	; 0x803c
   15afc:	movt	r1, #1
   15b00:	movw	r0, #33248	; 0x81e0
   15b04:	movt	r0, #1
   15b08:	bl	12060 <__assert_fail@plt>
   15b0c:	ldr	r2, [r4, #20]
   15b10:	mov	r1, #0
   15b14:	ldr	r0, [r4, #16]
   15b18:	bl	12030 <memset@plt>
   15b1c:	ldr	r2, [r4, #32]
   15b20:	ldr	r3, [r2, #8]
   15b24:	str	r3, [r4, #20]
   15b28:	ldr	r0, [r2]
   15b2c:	str	r0, [r4, #28]
   15b30:	ldr	r1, [r2, #4]
   15b34:	ldr	r3, [r4, #60]	; 0x3c
   15b38:	add	r3, r3, r0
   15b3c:	str	r3, [r4, #16]
   15b40:	ldr	r3, [r4, #64]	; 0x40
   15b44:	sub	r3, r3, r0
   15b48:	cmp	r3, r1
   15b4c:	movcs	r3, r1
   15b50:	str	r3, [r4, #24]
   15b54:	str	r1, [r2, #4]
   15b58:	ldrh	r3, [r4, #130]	; 0x82
   15b5c:	ldrh	r2, [r4, #128]	; 0x80
   15b60:	cmp	r2, r3
   15b64:	strhcc	r3, [r4, #128]	; 0x80
   15b68:	ldr	r3, [r4, #32]
   15b6c:	ldrh	r2, [r3, #12]
   15b70:	strh	r2, [r4, #130]	; 0x82
   15b74:	sub	r3, r3, #36	; 0x24
   15b78:	str	r3, [r4, #32]
   15b7c:	ldr	r3, [r4, #156]	; 0x9c
   15b80:	sub	r3, r3, #1
   15b84:	str	r3, [r4, #156]	; 0x9c
   15b88:	b	15adc <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   15b8c:	andeq	r7, r1, r8, lsl #29

00015b90 <flatcc_builder_offset_vector_edit@@Base>:
   15b90:	ldr	r0, [r0, #16]
   15b94:	bx	lr

00015b98 <flatcc_builder_offset_vector_count@@Base>:
   15b98:	ldr	r3, [r0, #32]
   15b9c:	ldr	r0, [r3, #20]
   15ba0:	bx	lr

00015ba4 <flatcc_builder_create_union_vector_direct@@Base>:
   15ba4:	strd	r4, [sp, #-20]!	; 0xffffffec
   15ba8:	strd	r6, [sp, #8]
   15bac:	str	lr, [sp, #16]
   15bb0:	sub	sp, sp, #12
   15bb4:	mov	r4, r0
   15bb8:	mov	r5, r1
   15bbc:	mov	r6, r2
   15bc0:	mov	r1, r3
   15bc4:	mov	r3, r2
   15bc8:	ldr	r2, [sp, #32]
   15bcc:	mov	r0, r5
   15bd0:	bl	12d84 <flatcc_builder_default_alloc@@Base+0x3b8>
   15bd4:	subs	r7, r0, #0
   15bd8:	bne	15c00 <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   15bdc:	mov	r3, #0
   15be0:	str	r3, [r4]
   15be4:	str	r3, [r4, #4]
   15be8:	mov	r0, r4
   15bec:	add	sp, sp, #12
   15bf0:	ldrd	r4, [sp]
   15bf4:	ldrd	r6, [sp, #8]
   15bf8:	add	sp, sp, #16
   15bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15c00:	mvn	r3, #0
   15c04:	str	r3, [sp, #4]
   15c08:	mov	r3, #1
   15c0c:	str	r3, [sp]
   15c10:	ldr	r2, [sp, #32]
   15c14:	mov	r1, r6
   15c18:	mov	r0, r5
   15c1c:	bl	156a8 <flatcc_builder_create_vector@@Base>
   15c20:	cmp	r0, #0
   15c24:	moveq	r3, #0
   15c28:	streq	r3, [r4]
   15c2c:	strne	r0, [r4]
   15c30:	str	r7, [r4, #4]
   15c34:	b	15be8 <flatcc_builder_create_union_vector_direct@@Base+0x44>

00015c38 <flatcc_builder_create_union_vector@@Base>:
   15c38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c3c:	strd	r6, [sp, #8]
   15c40:	str	r8, [sp, #16]
   15c44:	str	lr, [sp, #20]
   15c48:	sub	sp, sp, #16
   15c4c:	mov	r5, r0
   15c50:	mov	r4, r1
   15c54:	mov	r7, r2
   15c58:	mov	r6, r3
   15c5c:	mov	r0, r1
   15c60:	bl	147b4 <flatcc_builder_start_offset_vector@@Base>
   15c64:	cmp	r0, #0
   15c68:	beq	15c94 <flatcc_builder_create_union_vector@@Base+0x5c>
   15c6c:	mov	r3, #0
   15c70:	str	r3, [r5]
   15c74:	str	r3, [r5, #4]
   15c78:	mov	r0, r5
   15c7c:	add	sp, sp, #16
   15c80:	ldrd	r4, [sp]
   15c84:	ldrd	r6, [sp, #8]
   15c88:	ldr	r8, [sp, #16]
   15c8c:	add	sp, sp, #20
   15c90:	pop	{pc}		; (ldr pc, [sp], #4)
   15c94:	mov	r1, r6
   15c98:	mov	r0, r4
   15c9c:	bl	140b8 <flatcc_builder_extend_offset_vector@@Base>
   15ca0:	cmp	r0, #0
   15ca4:	moveq	r3, #0
   15ca8:	streq	r3, [r5]
   15cac:	streq	r3, [r5, #4]
   15cb0:	beq	15c78 <flatcc_builder_create_union_vector@@Base+0x40>
   15cb4:	ldr	r8, [r4, #20]
   15cb8:	add	r1, r6, r8
   15cbc:	str	r1, [r4, #20]
   15cc0:	ldr	r3, [r4, #24]
   15cc4:	cmp	r1, r3
   15cc8:	bcs	15dac <flatcc_builder_create_union_vector@@Base+0x174>
   15ccc:	ldr	r3, [r4, #16]
   15cd0:	adds	r2, r3, r8
   15cd4:	beq	15dc4 <flatcc_builder_create_union_vector@@Base+0x18c>
   15cd8:	cmp	r6, #0
   15cdc:	beq	15d0c <flatcc_builder_create_union_vector@@Base+0xd4>
   15ce0:	mov	r1, r7
   15ce4:	sub	ip, r2, #1
   15ce8:	sub	r0, r3, #4
   15cec:	add	r7, r7, r6, lsl #3
   15cf0:	ldrb	lr, [r1]
   15cf4:	strb	lr, [ip, #1]!
   15cf8:	ldr	lr, [r1, #4]
   15cfc:	str	lr, [r0, #4]!
   15d00:	add	r1, r1, #8
   15d04:	cmp	r1, r7
   15d08:	bne	15cf0 <flatcc_builder_create_union_vector@@Base+0xb8>
   15d0c:	str	r6, [sp]
   15d10:	mov	r1, r4
   15d14:	add	r0, sp, #8
   15d18:	bl	15ba4 <flatcc_builder_create_union_vector_direct@@Base>
   15d1c:	ldr	r7, [sp, #8]
   15d20:	ldr	r6, [sp, #12]
   15d24:	ldr	r2, [r4, #20]
   15d28:	mov	r1, #0
   15d2c:	ldr	r0, [r4, #16]
   15d30:	bl	12030 <memset@plt>
   15d34:	ldr	r2, [r4, #32]
   15d38:	ldr	r3, [r2, #8]
   15d3c:	str	r3, [r4, #20]
   15d40:	ldr	r0, [r2]
   15d44:	str	r0, [r4, #28]
   15d48:	ldr	r1, [r2, #4]
   15d4c:	ldr	r3, [r4, #60]	; 0x3c
   15d50:	add	r3, r3, r0
   15d54:	str	r3, [r4, #16]
   15d58:	ldr	r3, [r4, #64]	; 0x40
   15d5c:	sub	r3, r3, r0
   15d60:	cmp	r3, r1
   15d64:	movcs	r3, r1
   15d68:	str	r3, [r4, #24]
   15d6c:	str	r1, [r2, #4]
   15d70:	ldrh	r3, [r4, #130]	; 0x82
   15d74:	ldrh	r2, [r4, #128]	; 0x80
   15d78:	cmp	r2, r3
   15d7c:	strhcc	r3, [r4, #128]	; 0x80
   15d80:	ldr	r3, [r4, #32]
   15d84:	ldrh	r2, [r3, #12]
   15d88:	strh	r2, [r4, #130]	; 0x82
   15d8c:	sub	r3, r3, #36	; 0x24
   15d90:	str	r3, [r4, #32]
   15d94:	ldr	r3, [r4, #156]	; 0x9c
   15d98:	sub	r3, r3, #1
   15d9c:	str	r3, [r4, #156]	; 0x9c
   15da0:	str	r7, [r5]
   15da4:	str	r6, [r5, #4]
   15da8:	b	15c78 <flatcc_builder_create_union_vector@@Base+0x40>
   15dac:	mvn	r2, #3
   15db0:	add	r1, r1, #1
   15db4:	mov	r0, r4
   15db8:	bl	12944 <main@@Base+0x24>
   15dbc:	cmp	r0, #0
   15dc0:	beq	15ccc <flatcc_builder_create_union_vector@@Base+0x94>
   15dc4:	mov	r3, #0
   15dc8:	str	r3, [r5]
   15dcc:	str	r3, [r5, #4]
   15dd0:	b	15c78 <flatcc_builder_create_union_vector@@Base+0x40>

00015dd4 <flatcc_builder_start_union_vector@@Base>:
   15dd4:	str	r4, [sp, #-8]!
   15dd8:	str	lr, [sp, #4]
   15ddc:	mov	r4, r0
   15de0:	mov	r1, #4
   15de4:	bl	12c18 <flatcc_builder_default_alloc@@Base+0x24c>
   15de8:	cmp	r0, #0
   15dec:	bne	15e50 <flatcc_builder_start_union_vector@@Base+0x7c>
   15df0:	ldr	r3, [r4, #32]
   15df4:	mov	r2, #8
   15df8:	str	r2, [r3, #16]
   15dfc:	ldr	r3, [r4, #32]
   15e00:	mov	r2, #0
   15e04:	str	r2, [r3, #20]
   15e08:	ldr	r3, [r4, #32]
   15e0c:	mov	r2, #7
   15e10:	strh	r2, [r3, #14]
   15e14:	ldr	r1, [r4, #28]
   15e18:	ldr	r2, [r4, #60]	; 0x3c
   15e1c:	add	r2, r2, r1
   15e20:	str	r2, [r4, #16]
   15e24:	ldr	r3, [r4, #64]	; 0x40
   15e28:	sub	r3, r3, r1
   15e2c:	cmn	r3, #4
   15e30:	mvnhi	r3, #3
   15e34:	str	r3, [r4, #24]
   15e38:	ldr	r3, [r4, #32]
   15e3c:	mvn	r2, #3
   15e40:	str	r2, [r3, #4]
   15e44:	ldr	r4, [sp]
   15e48:	add	sp, sp, #4
   15e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e50:	mvn	r0, #0
   15e54:	b	15e44 <flatcc_builder_start_union_vector@@Base+0x70>

00015e58 <flatcc_builder_end_union_vector@@Base>:
   15e58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15e5c:	strd	r6, [sp, #8]
   15e60:	str	r8, [sp, #16]
   15e64:	str	lr, [sp, #20]
   15e68:	sub	sp, sp, #16
   15e6c:	ldr	r3, [r1, #32]
   15e70:	ldrh	r2, [r3, #14]
   15e74:	cmp	r2, #7
   15e78:	bne	15fa0 <flatcc_builder_end_union_vector@@Base+0x148>
   15e7c:	mov	r6, r0
   15e80:	mov	r4, r1
   15e84:	ldr	r5, [r3, #20]
   15e88:	ldr	r8, [r1, #20]
   15e8c:	add	r1, r5, r5, lsl #2
   15e90:	add	r1, r1, r8
   15e94:	str	r1, [r4, #20]
   15e98:	ldr	r3, [r4, #24]
   15e9c:	cmp	r1, r3
   15ea0:	bcs	15fbc <flatcc_builder_end_union_vector@@Base+0x164>
   15ea4:	ldr	r7, [r4, #16]
   15ea8:	adds	r3, r7, r8
   15eac:	beq	15fd4 <flatcc_builder_end_union_vector@@Base+0x17c>
   15eb0:	add	r2, r3, r5, lsl #2
   15eb4:	cmp	r5, #0
   15eb8:	beq	15ee8 <flatcc_builder_end_union_vector@@Base+0x90>
   15ebc:	mov	r1, r7
   15ec0:	sub	ip, r2, #1
   15ec4:	sub	r0, r3, #4
   15ec8:	add	r7, r7, r5, lsl #3
   15ecc:	ldrb	lr, [r1]
   15ed0:	strb	lr, [ip, #1]!
   15ed4:	ldr	lr, [r1, #4]
   15ed8:	str	lr, [r0, #4]!
   15edc:	add	r1, r1, #8
   15ee0:	cmp	r1, r7
   15ee4:	bne	15ecc <flatcc_builder_end_union_vector@@Base+0x74>
   15ee8:	str	r5, [sp]
   15eec:	mov	r1, r4
   15ef0:	add	r0, sp, #8
   15ef4:	bl	15ba4 <flatcc_builder_create_union_vector_direct@@Base>
   15ef8:	ldr	r7, [sp, #8]
   15efc:	ldr	r5, [sp, #12]
   15f00:	ldr	r2, [r4, #20]
   15f04:	mov	r1, #0
   15f08:	ldr	r0, [r4, #16]
   15f0c:	bl	12030 <memset@plt>
   15f10:	ldr	r2, [r4, #32]
   15f14:	ldr	r3, [r2, #8]
   15f18:	str	r3, [r4, #20]
   15f1c:	ldr	r0, [r2]
   15f20:	str	r0, [r4, #28]
   15f24:	ldr	r1, [r2, #4]
   15f28:	ldr	r3, [r4, #60]	; 0x3c
   15f2c:	add	r3, r3, r0
   15f30:	str	r3, [r4, #16]
   15f34:	ldr	r3, [r4, #64]	; 0x40
   15f38:	sub	r3, r3, r0
   15f3c:	cmp	r3, r1
   15f40:	movcs	r3, r1
   15f44:	str	r3, [r4, #24]
   15f48:	str	r1, [r2, #4]
   15f4c:	ldrh	r3, [r4, #130]	; 0x82
   15f50:	ldrh	r2, [r4, #128]	; 0x80
   15f54:	cmp	r2, r3
   15f58:	strhcc	r3, [r4, #128]	; 0x80
   15f5c:	ldr	r3, [r4, #32]
   15f60:	ldrh	r2, [r3, #12]
   15f64:	strh	r2, [r4, #130]	; 0x82
   15f68:	sub	r3, r3, #36	; 0x24
   15f6c:	str	r3, [r4, #32]
   15f70:	ldr	r3, [r4, #156]	; 0x9c
   15f74:	sub	r3, r3, #1
   15f78:	str	r3, [r4, #156]	; 0x9c
   15f7c:	str	r7, [r6]
   15f80:	str	r5, [r6, #4]
   15f84:	mov	r0, r6
   15f88:	add	sp, sp, #16
   15f8c:	ldrd	r4, [sp]
   15f90:	ldrd	r6, [sp, #8]
   15f94:	ldr	r8, [sp, #16]
   15f98:	add	sp, sp, #20
   15f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa0:	ldr	r3, [pc, #60]	; 15fe4 <flatcc_builder_end_union_vector@@Base+0x18c>
   15fa4:	movw	r2, #1617	; 0x651
   15fa8:	movw	r1, #32828	; 0x803c
   15fac:	movt	r1, #1
   15fb0:	movw	r0, #33600	; 0x8340
   15fb4:	movt	r0, #1
   15fb8:	bl	12060 <__assert_fail@plt>
   15fbc:	mvn	r2, #3
   15fc0:	add	r1, r1, #1
   15fc4:	mov	r0, r4
   15fc8:	bl	12944 <main@@Base+0x24>
   15fcc:	cmp	r0, #0
   15fd0:	beq	15ea4 <flatcc_builder_end_union_vector@@Base+0x4c>
   15fd4:	mov	r3, #0
   15fd8:	str	r3, [r6]
   15fdc:	str	r3, [r6, #4]
   15fe0:	b	15f84 <flatcc_builder_end_union_vector@@Base+0x12c>
   15fe4:			; <UNDEFINED> instruction: 0x00017eb4

00015fe8 <flatcc_builder_union_vector_edit@@Base>:
   15fe8:	ldr	r0, [r0, #16]
   15fec:	bx	lr

00015ff0 <flatcc_builder_union_vector_count@@Base>:
   15ff0:	ldr	r3, [r0, #32]
   15ff4:	ldr	r0, [r3, #20]
   15ff8:	bx	lr

00015ffc <flatcc_builder_extend_union_vector@@Base>:
   15ffc:	strd	r4, [sp, #-16]!
   16000:	str	r6, [sp, #8]
   16004:	str	lr, [sp, #12]
   16008:	mov	r4, r0
   1600c:	ldr	r2, [r0, #32]
   16010:	ldr	r3, [r2, #20]
   16014:	adds	r3, r1, r3
   16018:	movcs	ip, #1
   1601c:	movcc	ip, #0
   16020:	cmn	r3, #-536870911	; 0xe0000001
   16024:	movls	r0, #0
   16028:	movhi	r0, #1
   1602c:	orrs	r0, ip, r0
   16030:	bne	16068 <flatcc_builder_extend_union_vector@@Base+0x6c>
   16034:	str	r3, [r2, #20]
   16038:	ldr	r5, [r4, #20]
   1603c:	add	r1, r5, r1, lsl #3
   16040:	str	r1, [r4, #20]
   16044:	ldr	r3, [r4, #24]
   16048:	cmp	r1, r3
   1604c:	bcs	16084 <flatcc_builder_extend_union_vector@@Base+0x88>
   16050:	ldr	r0, [r4, #16]
   16054:	add	r0, r0, r5
   16058:	ldrd	r4, [sp]
   1605c:	ldr	r6, [sp, #8]
   16060:	add	sp, sp, #12
   16064:	pop	{pc}		; (ldr pc, [sp], #4)
   16068:	ldr	r3, [pc, #52]	; 160a4 <flatcc_builder_extend_union_vector@@Base+0xa8>
   1606c:	mov	r2, #892	; 0x37c
   16070:	movw	r1, #32828	; 0x803c
   16074:	movt	r1, #1
   16078:	movw	r0, #33112	; 0x8158
   1607c:	movt	r0, #1
   16080:	bl	12060 <__assert_fail@plt>
   16084:	mvn	r2, #3
   16088:	add	r1, r1, #1
   1608c:	mov	r0, r4
   16090:	bl	12944 <main@@Base+0x24>
   16094:	cmp	r0, #0
   16098:	movne	r0, #0
   1609c:	beq	16050 <flatcc_builder_extend_union_vector@@Base+0x54>
   160a0:	b	16058 <flatcc_builder_extend_union_vector@@Base+0x5c>
   160a4:	andeq	r7, r1, ip, lsl ip

000160a8 <flatcc_builder_truncate_union_vector@@Base>:
   160a8:	str	r4, [sp, #-8]!
   160ac:	str	lr, [sp, #4]
   160b0:	ldr	ip, [r0, #32]
   160b4:	ldrh	r3, [ip, #14]
   160b8:	cmp	r3, #7
   160bc:	bne	1610c <flatcc_builder_truncate_union_vector@@Base+0x64>
   160c0:	ldr	r3, [ip, #20]
   160c4:	cmp	r3, r1
   160c8:	bcc	16128 <flatcc_builder_truncate_union_vector@@Base+0x80>
   160cc:	sub	r3, r3, r1
   160d0:	str	r3, [ip, #20]
   160d4:	ldr	r3, [r0, #32]
   160d8:	ldr	r2, [r3, #16]
   160dc:	mul	r2, r2, r1
   160e0:	ldr	r3, [r0, #20]
   160e4:	sub	r3, r3, r2
   160e8:	str	r3, [r0, #20]
   160ec:	ldr	r0, [r0, #16]
   160f0:	mov	r1, #0
   160f4:	add	r0, r0, r3
   160f8:	bl	12030 <memset@plt>
   160fc:	mov	r0, #0
   16100:	ldr	r4, [sp]
   16104:	add	sp, sp, #4
   16108:	pop	{pc}		; (ldr pc, [sp], #4)
   1610c:	ldr	r3, [pc, #48]	; 16144 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   16110:	movw	r2, #1665	; 0x681
   16114:	movw	r1, #32828	; 0x803c
   16118:	movt	r1, #1
   1611c:	movw	r0, #33600	; 0x8340
   16120:	movt	r0, #1
   16124:	bl	12060 <__assert_fail@plt>
   16128:	ldr	r3, [pc, #20]	; 16144 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   1612c:	movw	r2, #1666	; 0x682
   16130:	movw	r1, #32828	; 0x803c
   16134:	movt	r1, #1
   16138:	movw	r0, #33380	; 0x8264
   1613c:	movt	r0, #1
   16140:	bl	12060 <__assert_fail@plt>
   16144:	ldrdeq	r7, [r1], -r4

00016148 <flatcc_builder_union_vector_push@@Base>:
   16148:	strd	r4, [sp, #-20]!	; 0xffffffec
   1614c:	strd	r6, [sp, #8]
   16150:	str	lr, [sp, #16]
   16154:	sub	sp, sp, #12
   16158:	add	r3, sp, #8
   1615c:	stmdb	r3, {r1, r2}
   16160:	ldr	r2, [r0, #32]
   16164:	ldrh	r3, [r2, #14]
   16168:	cmp	r3, #7
   1616c:	bne	161c8 <flatcc_builder_union_vector_push@@Base+0x80>
   16170:	mov	r4, r0
   16174:	ldr	r3, [r2, #20]
   16178:	cmn	r3, #-536870911	; 0xe0000001
   1617c:	moveq	r0, #0
   16180:	beq	161b4 <flatcc_builder_union_vector_push@@Base+0x6c>
   16184:	add	r3, r3, #1
   16188:	str	r3, [r2, #20]
   1618c:	ldr	r5, [r4, #20]
   16190:	add	r3, r5, #8
   16194:	str	r3, [r4, #20]
   16198:	ldr	r2, [r4, #24]
   1619c:	cmp	r3, r2
   161a0:	bcs	161e4 <flatcc_builder_union_vector_push@@Base+0x9c>
   161a4:	ldr	r3, [r4, #16]
   161a8:	adds	r0, r3, r5
   161ac:	ldrdne	r6, [sp]
   161b0:	strdne	r6, [r3, r5]
   161b4:	add	sp, sp, #12
   161b8:	ldrd	r4, [sp]
   161bc:	ldrd	r6, [sp, #8]
   161c0:	add	sp, sp, #16
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	ldr	r3, [pc, #52]	; 16204 <flatcc_builder_union_vector_push@@Base+0xbc>
   161cc:	movw	r2, #1677	; 0x68d
   161d0:	movw	r1, #32828	; 0x803c
   161d4:	movt	r1, #1
   161d8:	movw	r0, #33600	; 0x8340
   161dc:	movt	r0, #1
   161e0:	bl	12060 <__assert_fail@plt>
   161e4:	mvn	r2, #3
   161e8:	add	r1, r5, #9
   161ec:	mov	r0, r4
   161f0:	bl	12944 <main@@Base+0x24>
   161f4:	cmp	r0, #0
   161f8:	movne	r0, #0
   161fc:	beq	161a4 <flatcc_builder_union_vector_push@@Base+0x5c>
   16200:	b	161b4 <flatcc_builder_union_vector_push@@Base+0x6c>
   16204:	strdeq	r7, [r1], -ip

00016208 <flatcc_builder_append_union_vector@@Base>:
   16208:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1620c:	strd	r6, [sp, #8]
   16210:	str	r8, [sp, #16]
   16214:	str	lr, [sp, #20]
   16218:	mov	r6, r1
   1621c:	ldr	r1, [r0, #32]
   16220:	ldrh	r3, [r1, #14]
   16224:	cmp	r3, #7
   16228:	bne	162a8 <flatcc_builder_append_union_vector@@Base+0xa0>
   1622c:	mov	r5, r0
   16230:	ldr	r3, [r1, #20]
   16234:	adds	r3, r2, r3
   16238:	movcs	ip, #1
   1623c:	movcc	ip, #0
   16240:	cmn	r3, #-536870911	; 0xe0000001
   16244:	movls	r0, #0
   16248:	movhi	r0, #1
   1624c:	orrs	r0, ip, r0
   16250:	bne	162c4 <flatcc_builder_append_union_vector@@Base+0xbc>
   16254:	str	r3, [r1, #20]
   16258:	lsl	r4, r2, #3
   1625c:	ldr	r7, [r5, #20]
   16260:	add	r1, r4, r7
   16264:	str	r1, [r5, #20]
   16268:	ldr	r3, [r5, #24]
   1626c:	cmp	r1, r3
   16270:	bcs	162e0 <flatcc_builder_append_union_vector@@Base+0xd8>
   16274:	ldr	r5, [r5, #16]
   16278:	adds	r5, r5, r7
   1627c:	beq	16290 <flatcc_builder_append_union_vector@@Base+0x88>
   16280:	mov	r2, r4
   16284:	mov	r1, r6
   16288:	mov	r0, r5
   1628c:	bl	11fac <memcpy@plt>
   16290:	mov	r0, r5
   16294:	ldrd	r4, [sp]
   16298:	ldrd	r6, [sp, #8]
   1629c:	ldr	r8, [sp, #16]
   162a0:	add	sp, sp, #20
   162a4:	pop	{pc}		; (ldr pc, [sp], #4)
   162a8:	ldr	r3, [pc, #80]	; 16300 <flatcc_builder_append_union_vector@@Base+0xf8>
   162ac:	movw	r2, #1692	; 0x69c
   162b0:	movw	r1, #32828	; 0x803c
   162b4:	movt	r1, #1
   162b8:	movw	r0, #33600	; 0x8340
   162bc:	movt	r0, #1
   162c0:	bl	12060 <__assert_fail@plt>
   162c4:	ldr	r3, [pc, #56]	; 16304 <flatcc_builder_append_union_vector@@Base+0xfc>
   162c8:	mov	r2, #892	; 0x37c
   162cc:	movw	r1, #32828	; 0x803c
   162d0:	movt	r1, #1
   162d4:	movw	r0, #33112	; 0x8158
   162d8:	movt	r0, #1
   162dc:	bl	12060 <__assert_fail@plt>
   162e0:	mvn	r2, #3
   162e4:	add	r1, r1, #1
   162e8:	mov	r0, r5
   162ec:	bl	12944 <main@@Base+0x24>
   162f0:	cmp	r0, #0
   162f4:	movne	r5, #0
   162f8:	beq	16274 <flatcc_builder_append_union_vector@@Base+0x6c>
   162fc:	b	16290 <flatcc_builder_append_union_vector@@Base+0x88>
   16300:	andeq	r7, r1, r0, lsr #30
   16304:	andeq	r7, r1, ip, lsl ip

00016308 <flatcc_builder_create_string@@Base>:
   16308:	strd	r4, [sp, #-16]!
   1630c:	str	r6, [sp, #8]
   16310:	str	lr, [sp, #12]
   16314:	sub	sp, sp, #88	; 0x58
   16318:	mov	r4, r0
   1631c:	str	r2, [sp, #84]	; 0x54
   16320:	ldr	r0, [r0, #136]	; 0x88
   16324:	sub	r3, r0, r2
   16328:	sub	r3, r3, #1
   1632c:	and	r3, r3, #3
   16330:	add	r3, r3, #1
   16334:	mov	ip, #4
   16338:	str	ip, [sp, #12]
   1633c:	add	lr, sp, #84	; 0x54
   16340:	str	lr, [sp, #20]
   16344:	str	ip, [sp, #24]
   16348:	mov	ip, #1
   1634c:	str	ip, [sp, #16]
   16350:	cmp	r2, #0
   16354:	beq	16370 <flatcc_builder_create_string@@Base+0x68>
   16358:	add	ip, r2, #4
   1635c:	str	ip, [sp, #12]
   16360:	str	r1, [sp, #28]
   16364:	str	r2, [sp, #32]
   16368:	mov	r2, #2
   1636c:	str	r2, [sp, #16]
   16370:	ldr	r1, [sp, #12]
   16374:	add	r1, r3, r1
   16378:	str	r1, [sp, #12]
   1637c:	ldr	r2, [sp, #16]
   16380:	add	r2, r2, #1
   16384:	add	ip, sp, #88	; 0x58
   16388:	add	lr, ip, r2, lsl #3
   1638c:	movw	ip, #30956	; 0x78ec
   16390:	movt	ip, #1
   16394:	str	ip, [lr, #-76]	; 0xffffffb4
   16398:	str	r3, [lr, #-72]	; 0xffffffb8
   1639c:	str	r2, [sp, #16]
   163a0:	sub	r5, r0, r1
   163a4:	cmp	r0, r5
   163a8:	ble	163e8 <flatcc_builder_create_string@@Base+0xe0>
   163ac:	str	r1, [sp]
   163b0:	ldr	r6, [r4, #44]	; 0x2c
   163b4:	mov	r3, r5
   163b8:	add	r1, sp, #20
   163bc:	ldr	r0, [r4, #36]	; 0x24
   163c0:	blx	r6
   163c4:	cmp	r0, #0
   163c8:	bne	16404 <flatcc_builder_create_string@@Base+0xfc>
   163cc:	str	r5, [r4, #136]	; 0x88
   163d0:	mov	r0, r5
   163d4:	add	sp, sp, #88	; 0x58
   163d8:	ldrd	r4, [sp]
   163dc:	ldr	r6, [sp, #8]
   163e0:	add	sp, sp, #12
   163e4:	pop	{pc}		; (ldr pc, [sp], #4)
   163e8:	add	r3, ip, #588	; 0x24c
   163ec:	movw	r2, #647	; 0x287
   163f0:	movw	r1, #32828	; 0x803c
   163f4:	movt	r1, #1
   163f8:	movw	r0, #32912	; 0x8090
   163fc:	movt	r0, #1
   16400:	bl	12060 <__assert_fail@plt>
   16404:	ldr	r3, [pc, #20]	; 16420 <flatcc_builder_create_string@@Base+0x118>
   16408:	movw	r2, #651	; 0x28b
   1640c:	movw	r1, #32828	; 0x803c
   16410:	movt	r1, #1
   16414:	movw	r0, #32912	; 0x8090
   16418:	movt	r0, #1
   1641c:	bl	12060 <__assert_fail@plt>
   16420:	andeq	r7, r1, r8, lsr fp

00016424 <flatcc_builder_create_string_str@@Base>:
   16424:	strd	r4, [sp, #-16]!
   16428:	str	r6, [sp, #8]
   1642c:	str	lr, [sp, #12]
   16430:	mov	r5, r0
   16434:	mov	r4, r1
   16438:	mov	r0, r1
   1643c:	bl	1200c <strlen@plt>
   16440:	mov	r2, r0
   16444:	mov	r1, r4
   16448:	mov	r0, r5
   1644c:	bl	16308 <flatcc_builder_create_string@@Base>
   16450:	ldrd	r4, [sp]
   16454:	ldr	r6, [sp, #8]
   16458:	add	sp, sp, #12
   1645c:	pop	{pc}		; (ldr pc, [sp], #4)

00016460 <flatcc_builder_create_string_strn@@Base>:
   16460:	strd	r4, [sp, #-16]!
   16464:	str	r6, [sp, #8]
   16468:	str	lr, [sp, #12]
   1646c:	mov	r6, r0
   16470:	mov	r4, r1
   16474:	mov	r5, r2
   16478:	mov	r1, #0
   1647c:	mov	r0, r4
   16480:	bl	1203c <memchr@plt>
   16484:	cmp	r0, #0
   16488:	subne	r5, r0, r4
   1648c:	mov	r2, r5
   16490:	mov	r1, r4
   16494:	mov	r0, r6
   16498:	bl	16308 <flatcc_builder_create_string@@Base>
   1649c:	ldrd	r4, [sp]
   164a0:	ldr	r6, [sp, #8]
   164a4:	add	sp, sp, #12
   164a8:	pop	{pc}		; (ldr pc, [sp], #4)

000164ac <flatcc_builder_end_string@@Base>:
   164ac:	strd	r4, [sp, #-16]!
   164b0:	str	r6, [sp, #8]
   164b4:	str	lr, [sp, #12]
   164b8:	ldr	r3, [r0, #32]
   164bc:	ldrh	r2, [r3, #14]
   164c0:	cmp	r2, #6
   164c4:	bne	16500 <flatcc_builder_end_string@@Base+0x54>
   164c8:	mov	r4, r0
   164cc:	ldr	r2, [r0, #20]
   164d0:	ldr	r3, [r3, #20]
   164d4:	cmp	r3, r2
   164d8:	bne	1651c <flatcc_builder_end_string@@Base+0x70>
   164dc:	ldr	r1, [r0, #16]
   164e0:	bl	16308 <flatcc_builder_create_string@@Base>
   164e4:	subs	r5, r0, #0
   164e8:	bne	16538 <flatcc_builder_end_string@@Base+0x8c>
   164ec:	mov	r0, r5
   164f0:	ldrd	r4, [sp]
   164f4:	ldr	r6, [sp, #8]
   164f8:	add	sp, sp, #12
   164fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16500:	ldr	r3, [pc, #176]	; 165b8 <flatcc_builder_end_string@@Base+0x10c>
   16504:	movw	r2, #1732	; 0x6c4
   16508:	movw	r1, #32828	; 0x803c
   1650c:	movt	r1, #1
   16510:	movw	r0, #33300	; 0x8214
   16514:	movt	r0, #1
   16518:	bl	12060 <__assert_fail@plt>
   1651c:	ldr	r3, [pc, #148]	; 165b8 <flatcc_builder_end_string@@Base+0x10c>
   16520:	movw	r2, #1733	; 0x6c5
   16524:	movw	r1, #32828	; 0x803c
   16528:	movt	r1, #1
   1652c:	movw	r0, #33652	; 0x8374
   16530:	movt	r0, #1
   16534:	bl	12060 <__assert_fail@plt>
   16538:	ldr	r2, [r4, #20]
   1653c:	mov	r1, #0
   16540:	ldr	r0, [r4, #16]
   16544:	bl	12030 <memset@plt>
   16548:	ldr	r2, [r4, #32]
   1654c:	ldr	r3, [r2, #8]
   16550:	str	r3, [r4, #20]
   16554:	ldr	r0, [r2]
   16558:	str	r0, [r4, #28]
   1655c:	ldr	r1, [r2, #4]
   16560:	ldr	r3, [r4, #60]	; 0x3c
   16564:	add	r3, r3, r0
   16568:	str	r3, [r4, #16]
   1656c:	ldr	r3, [r4, #64]	; 0x40
   16570:	sub	r3, r3, r0
   16574:	cmp	r3, r1
   16578:	movcs	r3, r1
   1657c:	str	r3, [r4, #24]
   16580:	str	r1, [r2, #4]
   16584:	ldrh	r3, [r4, #130]	; 0x82
   16588:	ldrh	r2, [r4, #128]	; 0x80
   1658c:	cmp	r2, r3
   16590:	strhcc	r3, [r4, #128]	; 0x80
   16594:	ldr	r3, [r4, #32]
   16598:	ldrh	r2, [r3, #12]
   1659c:	strh	r2, [r4, #130]	; 0x82
   165a0:	sub	r3, r3, #36	; 0x24
   165a4:	str	r3, [r4, #32]
   165a8:	ldr	r3, [r4, #156]	; 0x9c
   165ac:	sub	r3, r3, #1
   165b0:	str	r3, [r4, #156]	; 0x9c
   165b4:	b	164ec <flatcc_builder_end_string@@Base+0x40>
   165b8:	andeq	r7, r1, r4, asr #30

000165bc <flatcc_builder_string_edit@@Base>:
   165bc:	ldr	r0, [r0, #16]
   165c0:	bx	lr

000165c4 <flatcc_builder_string_len@@Base>:
   165c4:	ldr	r3, [r0, #32]
   165c8:	ldr	r0, [r3, #20]
   165cc:	bx	lr

000165d0 <flatcc_builder_table_add@@Base>:
   165d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   165d4:	strd	r6, [sp, #8]
   165d8:	str	r8, [sp, #16]
   165dc:	str	lr, [sp, #20]
   165e0:	mov	r5, r1
   165e4:	ldr	r1, [r0, #32]
   165e8:	ldrh	r1, [r1, #14]
   165ec:	cmp	r1, #3
   165f0:	bne	166b0 <flatcc_builder_table_add@@Base+0xe0>
   165f4:	mov	r4, r0
   165f8:	movw	r1, #32764	; 0x7ffc
   165fc:	cmp	r5, r1
   16600:	bhi	166cc <flatcc_builder_table_add@@Base+0xfc>
   16604:	ldrh	r1, [r0, #130]	; 0x82
   16608:	cmp	r1, r3
   1660c:	strhcc	r3, [r0, #130]	; 0x82
   16610:	ldr	r0, [r0, #4]
   16614:	lsl	r1, r5, #1
   16618:	ldrh	r1, [r0, r1]
   1661c:	cmp	r1, #0
   16620:	bne	166e8 <flatcc_builder_table_add@@Base+0x118>
   16624:	ldr	r0, [r4, #12]
   16628:	eor	r0, r0, r5
   1662c:	movw	r1, #31153	; 0x79b1
   16630:	movt	r1, #40503	; 0x9e37
   16634:	mul	r0, r1, r0
   16638:	eor	r0, r0, r2
   1663c:	mul	r0, r1, r0
   16640:	str	r0, [r4, #12]
   16644:	uxth	r7, r5
   16648:	sub	r6, r3, #1
   1664c:	ldr	r0, [r4, #20]
   16650:	add	r6, r6, r0
   16654:	rsb	r3, r3, #0
   16658:	and	r6, r6, r3
   1665c:	add	r1, r2, r6
   16660:	str	r1, [r4, #20]
   16664:	ldr	r3, [r4, #24]
   16668:	cmp	r1, r3
   1666c:	bcs	16704 <flatcc_builder_table_add@@Base+0x134>
   16670:	uxth	r5, r5
   16674:	ldr	r3, [r4, #4]
   16678:	lsl	r5, r5, #1
   1667c:	add	r2, r6, #4
   16680:	strh	r2, [r3, r5]
   16684:	ldrh	r3, [r4, #8]
   16688:	cmp	r3, r7
   1668c:	addls	r7, r7, #1
   16690:	strhls	r7, [r4, #8]
   16694:	ldr	r0, [r4, #16]
   16698:	add	r0, r0, r6
   1669c:	ldrd	r4, [sp]
   166a0:	ldrd	r6, [sp, #8]
   166a4:	ldr	r8, [sp, #16]
   166a8:	add	sp, sp, #20
   166ac:	pop	{pc}		; (ldr pc, [sp], #4)
   166b0:	ldr	r3, [pc, #108]	; 16724 <flatcc_builder_table_add@@Base+0x154>
   166b4:	movw	r2, #1773	; 0x6ed
   166b8:	movw	r1, #32828	; 0x803c
   166bc:	movt	r1, #1
   166c0:	movw	r0, #33536	; 0x8300
   166c4:	movt	r0, #1
   166c8:	bl	12060 <__assert_fail@plt>
   166cc:	ldr	r3, [pc, #80]	; 16724 <flatcc_builder_table_add@@Base+0x154>
   166d0:	movw	r2, #1774	; 0x6ee
   166d4:	movw	r1, #32828	; 0x803c
   166d8:	movt	r1, #1
   166dc:	movw	r0, #33688	; 0x8398
   166e0:	movt	r0, #1
   166e4:	bl	12060 <__assert_fail@plt>
   166e8:	ldr	r3, [pc, #52]	; 16724 <flatcc_builder_table_add@@Base+0x154>
   166ec:	movw	r2, #1784	; 0x6f8
   166f0:	movw	r1, #32828	; 0x803c
   166f4:	movt	r1, #1
   166f8:	movw	r0, #32912	; 0x8090
   166fc:	movt	r0, #1
   16700:	bl	12060 <__assert_fail@plt>
   16704:	movw	r2, #65532	; 0xfffc
   16708:	add	r1, r1, #1
   1670c:	mov	r0, r4
   16710:	bl	12944 <main@@Base+0x24>
   16714:	cmp	r0, #0
   16718:	movne	r0, #0
   1671c:	beq	16670 <flatcc_builder_table_add@@Base+0xa0>
   16720:	b	1669c <flatcc_builder_table_add@@Base+0xcc>
   16724:	andeq	r7, r1, r0, ror #30

00016728 <flatcc_builder_table_edit@@Base>:
   16728:	ldr	r2, [r0, #32]
   1672c:	ldrh	r2, [r2, #14]
   16730:	cmp	r2, #3
   16734:	bne	1674c <flatcc_builder_table_edit@@Base+0x24>
   16738:	ldr	r3, [r0, #20]
   1673c:	sub	r3, r3, r1
   16740:	ldr	r0, [r0, #16]
   16744:	add	r0, r0, r3
   16748:	bx	lr
   1674c:	str	r4, [sp, #-8]!
   16750:	str	lr, [sp, #4]
   16754:	ldr	r3, [pc, #20]	; 16770 <flatcc_builder_table_edit@@Base+0x48>
   16758:	movw	r2, #1794	; 0x702
   1675c:	movw	r1, #32828	; 0x803c
   16760:	movt	r1, #1
   16764:	movw	r0, #33536	; 0x8300
   16768:	movt	r0, #1
   1676c:	bl	12060 <__assert_fail@plt>
   16770:	andeq	r7, r1, ip, ror pc

00016774 <flatcc_builder_table_add_copy@@Base>:
   16774:	strd	r4, [sp, #-16]!
   16778:	str	r6, [sp, #8]
   1677c:	str	lr, [sp, #12]
   16780:	mov	r6, r2
   16784:	mov	r5, r3
   16788:	ldrh	r3, [sp, #16]
   1678c:	mov	r2, r5
   16790:	bl	165d0 <flatcc_builder_table_add@@Base>
   16794:	subs	r4, r0, #0
   16798:	beq	167ac <flatcc_builder_table_add_copy@@Base+0x38>
   1679c:	mov	r2, r5
   167a0:	mov	r1, r6
   167a4:	mov	r0, r4
   167a8:	bl	11fac <memcpy@plt>
   167ac:	mov	r0, r4
   167b0:	ldrd	r4, [sp]
   167b4:	ldr	r6, [sp, #8]
   167b8:	add	sp, sp, #12
   167bc:	pop	{pc}		; (ldr pc, [sp], #4)

000167c0 <flatcc_builder_table_add_offset@@Base>:
   167c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   167c4:	strd	r6, [sp, #8]
   167c8:	str	r8, [sp, #16]
   167cc:	str	lr, [sp, #20]
   167d0:	ldr	r3, [r0, #32]
   167d4:	ldrh	r3, [r3, #14]
   167d8:	cmp	r3, #3
   167dc:	bne	168a0 <flatcc_builder_table_add_offset@@Base+0xe0>
   167e0:	mov	r4, r0
   167e4:	mov	r5, r1
   167e8:	movw	r3, #32764	; 0x7ffc
   167ec:	cmp	r1, r3
   167f0:	bhi	168bc <flatcc_builder_table_add_offset@@Base+0xfc>
   167f4:	ldr	r2, [r0, #4]
   167f8:	lsl	r3, r1, #1
   167fc:	ldrh	r3, [r2, r3]
   16800:	cmp	r3, #0
   16804:	bne	168d8 <flatcc_builder_table_add_offset@@Base+0x118>
   16808:	ldr	r3, [r0, #12]
   1680c:	eor	r3, r3, r1
   16810:	movw	r2, #31153	; 0x79b1
   16814:	movt	r2, #40503	; 0x9e37
   16818:	mul	r3, r2, r3
   1681c:	eor	r3, r3, #4
   16820:	mul	r3, r2, r3
   16824:	str	r3, [r0, #12]
   16828:	uxth	r7, r1
   1682c:	ldr	r6, [r0, #20]
   16830:	add	r6, r6, #3
   16834:	bic	r6, r6, #3
   16838:	add	r1, r6, #4
   1683c:	str	r1, [r0, #20]
   16840:	ldr	r3, [r0, #24]
   16844:	cmp	r1, r3
   16848:	bhi	168f4 <flatcc_builder_table_add_offset@@Base+0x134>
   1684c:	uxth	r2, r6
   16850:	uxth	r5, r5
   16854:	ldr	r3, [r4, #4]
   16858:	lsl	r5, r5, #1
   1685c:	add	r1, r2, #4
   16860:	strh	r1, [r3, r5]
   16864:	ldrh	r3, [r4, #8]
   16868:	cmp	r3, r7
   1686c:	addls	r7, r7, #1
   16870:	strhls	r7, [r4, #8]
   16874:	ldr	r3, [r4]
   16878:	add	r1, r3, #2
   1687c:	str	r1, [r4]
   16880:	strh	r2, [r3]
   16884:	ldr	r0, [r4, #16]
   16888:	add	r0, r0, r6
   1688c:	ldrd	r4, [sp]
   16890:	ldrd	r6, [sp, #8]
   16894:	ldr	r8, [sp, #16]
   16898:	add	sp, sp, #20
   1689c:	pop	{pc}		; (ldr pc, [sp], #4)
   168a0:	ldr	r3, [pc, #100]	; 1690c <flatcc_builder_table_add_offset@@Base+0x14c>
   168a4:	movw	r2, #1811	; 0x713
   168a8:	movw	r1, #32828	; 0x803c
   168ac:	movt	r1, #1
   168b0:	movw	r0, #33536	; 0x8300
   168b4:	movt	r0, #1
   168b8:	bl	12060 <__assert_fail@plt>
   168bc:	ldr	r3, [pc, #72]	; 1690c <flatcc_builder_table_add_offset@@Base+0x14c>
   168c0:	movw	r2, #1812	; 0x714
   168c4:	movw	r1, #32828	; 0x803c
   168c8:	movt	r1, #1
   168cc:	movw	r0, #33688	; 0x8398
   168d0:	movt	r0, #1
   168d4:	bl	12060 <__assert_fail@plt>
   168d8:	ldr	r3, [pc, #44]	; 1690c <flatcc_builder_table_add_offset@@Base+0x14c>
   168dc:	movw	r2, #1819	; 0x71b
   168e0:	movw	r1, #32828	; 0x803c
   168e4:	movt	r1, #1
   168e8:	movw	r0, #32912	; 0x8090
   168ec:	movt	r0, #1
   168f0:	bl	12060 <__assert_fail@plt>
   168f4:	movw	r2, #65532	; 0xfffc
   168f8:	bl	12944 <main@@Base+0x24>
   168fc:	cmp	r0, #0
   16900:	movne	r0, #0
   16904:	beq	1684c <flatcc_builder_table_add_offset@@Base+0x8c>
   16908:	b	1688c <flatcc_builder_table_add_offset@@Base+0xcc>
   1690c:	muleq	r1, r8, pc	; <UNPREDICTABLE>

00016910 <flatcc_builder_table_add_union@@Base>:
   16910:	strd	r4, [sp, #-20]!	; 0xffffffec
   16914:	strd	r6, [sp, #8]
   16918:	str	lr, [sp, #16]
   1691c:	sub	sp, sp, #12
   16920:	mov	r7, r1
   16924:	add	r1, sp, #8
   16928:	stmdb	r1, {r2, r3}
   1692c:	ldrb	r6, [sp]
   16930:	ldr	r5, [sp, #4]
   16934:	ldr	r3, [r0, #32]
   16938:	ldrh	r3, [r3, #14]
   1693c:	cmp	r3, #3
   16940:	bne	169b4 <flatcc_builder_table_add_union@@Base+0xa4>
   16944:	mov	r4, r0
   16948:	clz	r3, r6
   1694c:	lsr	r3, r3, #5
   16950:	cmp	r5, #0
   16954:	moveq	r3, #0
   16958:	cmp	r3, #0
   1695c:	bne	169d0 <flatcc_builder_table_add_union@@Base+0xc0>
   16960:	cmp	r5, #0
   16964:	beq	1697c <flatcc_builder_table_add_union@@Base+0x6c>
   16968:	mov	r1, r7
   1696c:	bl	167c0 <flatcc_builder_table_add_offset@@Base>
   16970:	cmp	r0, #0
   16974:	strne	r5, [r0]
   16978:	beq	169ec <flatcc_builder_table_add_union@@Base+0xdc>
   1697c:	mov	r3, #1
   16980:	mov	r2, r3
   16984:	sub	r1, r7, #1
   16988:	mov	r0, r4
   1698c:	bl	165d0 <flatcc_builder_table_add@@Base>
   16990:	cmp	r0, #0
   16994:	beq	16a08 <flatcc_builder_table_add_union@@Base+0xf8>
   16998:	strb	r6, [r0]
   1699c:	mov	r0, #0
   169a0:	add	sp, sp, #12
   169a4:	ldrd	r4, [sp]
   169a8:	ldrd	r6, [sp, #8]
   169ac:	add	sp, sp, #16
   169b0:	pop	{pc}		; (ldr pc, [sp], #4)
   169b4:	ldr	r3, [pc, #104]	; 16a24 <flatcc_builder_table_add_union@@Base+0x114>
   169b8:	movw	r2, #1518	; 0x5ee
   169bc:	movw	r1, #32828	; 0x803c
   169c0:	movt	r1, #1
   169c4:	movw	r0, #33536	; 0x8300
   169c8:	movt	r0, #1
   169cc:	bl	12060 <__assert_fail@plt>
   169d0:	ldr	r3, [pc, #76]	; 16a24 <flatcc_builder_table_add_union@@Base+0x114>
   169d4:	movw	r2, #1519	; 0x5ef
   169d8:	movw	r1, #32828	; 0x803c
   169dc:	movt	r1, #1
   169e0:	movw	r0, #33756	; 0x83dc
   169e4:	movt	r0, #1
   169e8:	bl	12060 <__assert_fail@plt>
   169ec:	ldr	r3, [pc, #48]	; 16a24 <flatcc_builder_table_add_union@@Base+0x114>
   169f0:	movw	r2, #1522	; 0x5f2
   169f4:	movw	r1, #32828	; 0x803c
   169f8:	movt	r1, #1
   169fc:	movw	r0, #33792	; 0x8400
   16a00:	movt	r0, #1
   16a04:	bl	12060 <__assert_fail@plt>
   16a08:	ldr	r3, [pc, #20]	; 16a24 <flatcc_builder_table_add_union@@Base+0x114>
   16a0c:	movw	r2, #1526	; 0x5f6
   16a10:	movw	r1, #32828	; 0x803c
   16a14:	movt	r1, #1
   16a18:	movw	r0, #33804	; 0x840c
   16a1c:	movt	r0, #1
   16a20:	bl	12060 <__assert_fail@plt>
   16a24:			; <UNDEFINED> instruction: 0x00017fb8

00016a28 <flatcc_builder_table_add_union_vector@@Base>:
   16a28:	strd	r4, [sp, #-20]!	; 0xffffffec
   16a2c:	strd	r6, [sp, #8]
   16a30:	str	lr, [sp, #16]
   16a34:	sub	sp, sp, #12
   16a38:	mov	r7, r1
   16a3c:	add	r1, sp, #8
   16a40:	stmdb	r1, {r2, r3}
   16a44:	ldr	r4, [sp]
   16a48:	ldr	r6, [sp, #4]
   16a4c:	ldr	r3, [r0, #32]
   16a50:	ldrh	r3, [r3, #14]
   16a54:	cmp	r3, #3
   16a58:	bne	16aa4 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   16a5c:	mov	r5, r0
   16a60:	clz	r3, r6
   16a64:	lsr	r3, r3, #5
   16a68:	clz	r2, r4
   16a6c:	lsr	r2, r2, #5
   16a70:	cmp	r2, r3
   16a74:	beq	16adc <flatcc_builder_table_add_union_vector@@Base+0xb4>
   16a78:	adds	r4, r4, #0
   16a7c:	movne	r4, #1
   16a80:	cmp	r4, r3
   16a84:	mvnne	r4, #0
   16a88:	beq	16ac0 <flatcc_builder_table_add_union_vector@@Base+0x98>
   16a8c:	mov	r0, r4
   16a90:	add	sp, sp, #12
   16a94:	ldrd	r4, [sp]
   16a98:	ldrd	r6, [sp, #8]
   16a9c:	add	sp, sp, #16
   16aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   16aa4:	ldr	r3, [pc, #160]	; 16b4c <flatcc_builder_table_add_union_vector@@Base+0x124>
   16aa8:	mov	r2, #1536	; 0x600
   16aac:	movw	r1, #32828	; 0x803c
   16ab0:	movt	r1, #1
   16ab4:	movw	r0, #33536	; 0x8300
   16ab8:	movt	r0, #1
   16abc:	bl	12060 <__assert_fail@plt>
   16ac0:	ldr	r3, [pc, #132]	; 16b4c <flatcc_builder_table_add_union_vector@@Base+0x124>
   16ac4:	movw	r2, #1537	; 0x601
   16ac8:	movw	r1, #32828	; 0x803c
   16acc:	movt	r1, #1
   16ad0:	movw	r0, #33816	; 0x8418
   16ad4:	movt	r0, #1
   16ad8:	bl	12060 <__assert_fail@plt>
   16adc:	cmp	r4, #0
   16ae0:	beq	16a8c <flatcc_builder_table_add_union_vector@@Base+0x64>
   16ae4:	sub	r1, r7, #1
   16ae8:	bl	167c0 <flatcc_builder_table_add_offset@@Base>
   16aec:	cmp	r0, #0
   16af0:	beq	16b30 <flatcc_builder_table_add_union_vector@@Base+0x108>
   16af4:	str	r4, [r0]
   16af8:	mov	r1, r7
   16afc:	mov	r0, r5
   16b00:	bl	167c0 <flatcc_builder_table_add_offset@@Base>
   16b04:	cmp	r0, #0
   16b08:	strne	r6, [r0]
   16b0c:	movne	r4, #0
   16b10:	bne	16a8c <flatcc_builder_table_add_union_vector@@Base+0x64>
   16b14:	ldr	r3, [pc, #48]	; 16b4c <flatcc_builder_table_add_union_vector@@Base+0x124>
   16b18:	movw	r2, #1544	; 0x608
   16b1c:	movw	r1, #32828	; 0x803c
   16b20:	movt	r1, #1
   16b24:	movw	r0, #33792	; 0x8400
   16b28:	movt	r0, #1
   16b2c:	bl	12060 <__assert_fail@plt>
   16b30:	ldr	r3, [pc, #20]	; 16b4c <flatcc_builder_table_add_union_vector@@Base+0x124>
   16b34:	movw	r2, #1540	; 0x604
   16b38:	movw	r1, #32828	; 0x803c
   16b3c:	movt	r1, #1
   16b40:	movw	r0, #33792	; 0x8400
   16b44:	movt	r0, #1
   16b48:	bl	12060 <__assert_fail@plt>
   16b4c:	ldrdeq	r7, [r1], -r8

00016b50 <flatcc_builder_push_buffer_alignment@@Base>:
   16b50:	mov	r3, r0
   16b54:	ldrh	r0, [r0, #128]	; 0x80
   16b58:	mov	r2, #4
   16b5c:	strh	r2, [r3, #128]	; 0x80
   16b60:	bx	lr

00016b64 <flatcc_builder_pop_buffer_alignment@@Base>:
   16b64:	ldrh	r3, [r0, #128]	; 0x80
   16b68:	cmp	r3, r1
   16b6c:	strhcc	r1, [r0, #128]	; 0x80
   16b70:	bx	lr

00016b74 <flatcc_builder_get_buffer_alignment@@Base>:
   16b74:	ldrh	r0, [r0, #128]	; 0x80
   16b78:	bx	lr

00016b7c <flatcc_builder_set_vtable_clustering@@Base>:
   16b7c:	clz	r1, r1
   16b80:	lsr	r1, r1, #5
   16b84:	str	r1, [r0, #180]	; 0xb4
   16b88:	bx	lr

00016b8c <flatcc_builder_set_block_align@@Base>:
   16b8c:	strh	r1, [r0, #132]	; 0x84
   16b90:	bx	lr

00016b94 <flatcc_builder_get_level@@Base>:
   16b94:	ldr	r0, [r0, #156]	; 0x9c
   16b98:	bx	lr

00016b9c <flatcc_builder_set_max_level@@Base>:
   16b9c:	str	r1, [r0, #176]	; 0xb0
   16ba0:	ldr	r3, [r0, #160]	; 0xa0
   16ba4:	cmp	r3, r1
   16ba8:	strlt	r1, [r0, #160]	; 0xa0
   16bac:	bx	lr

00016bb0 <flatcc_builder_get_buffer_size@@Base>:
   16bb0:	ldr	r2, [r0, #140]	; 0x8c
   16bb4:	ldr	r0, [r0, #136]	; 0x88
   16bb8:	sub	r0, r2, r0
   16bbc:	bx	lr

00016bc0 <flatcc_builder_get_buffer_start@@Base>:
   16bc0:	ldr	r0, [r0, #136]	; 0x88
   16bc4:	bx	lr

00016bc8 <flatcc_builder_get_buffer_end@@Base>:
   16bc8:	ldr	r0, [r0, #140]	; 0x8c
   16bcc:	bx	lr

00016bd0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16bd0:	str	r1, [r0, #172]	; 0xac
   16bd4:	bx	lr

00016bd8 <flatcc_builder_set_identifier@@Base>:
   16bd8:	movw	r3, #30956	; 0x78ec
   16bdc:	movt	r3, #1
   16be0:	cmp	r1, #0
   16be4:	moveq	r1, r3
   16be8:	ldr	r3, [r1]
   16bec:	str	r3, [r0, #168]	; 0xa8
   16bf0:	bx	lr

00016bf4 <flatcc_builder_get_type@@Base>:
   16bf4:	ldr	r3, [r0, #32]
   16bf8:	cmp	r3, #0
   16bfc:	ldrhne	r0, [r3, #14]
   16c00:	moveq	r0, #0
   16c04:	bx	lr

00016c08 <flatcc_builder_get_type_at@@Base>:
   16c08:	cmp	r1, #0
   16c0c:	ble	16c34 <flatcc_builder_get_type_at@@Base+0x2c>
   16c10:	ldr	r3, [r0, #156]	; 0x9c
   16c14:	cmp	r3, r1
   16c18:	blt	16c3c <flatcc_builder_get_type_at@@Base+0x34>
   16c1c:	sub	r1, r1, r3
   16c20:	ldr	r3, [r0, #32]
   16c24:	add	r1, r1, r1, lsl #3
   16c28:	add	r1, r3, r1, lsl #2
   16c2c:	ldrh	r0, [r1, #14]
   16c30:	bx	lr
   16c34:	mov	r0, #0
   16c38:	bx	lr
   16c3c:	mov	r0, #0
   16c40:	bx	lr

00016c44 <flatcc_builder_get_direct_buffer@@Base>:
   16c44:	ldr	r3, [r0, #184]	; 0xb8
   16c48:	cmp	r3, #0
   16c4c:	bne	16c64 <flatcc_builder_get_direct_buffer@@Base+0x20>
   16c50:	cmp	r1, #0
   16c54:	beq	16ca4 <flatcc_builder_get_direct_buffer@@Base+0x60>
   16c58:	mov	r0, #0
   16c5c:	str	r0, [r1]
   16c60:	bx	lr
   16c64:	ldr	r2, [r0, #188]	; 0xbc
   16c68:	ldr	r3, [r0, #192]	; 0xc0
   16c6c:	cmp	r2, r3
   16c70:	beq	16c88 <flatcc_builder_get_direct_buffer@@Base+0x44>
   16c74:	cmp	r1, #0
   16c78:	beq	16c9c <flatcc_builder_get_direct_buffer@@Base+0x58>
   16c7c:	mov	r0, #0
   16c80:	str	r0, [r1]
   16c84:	bx	lr
   16c88:	cmp	r1, #0
   16c8c:	ldrne	r3, [r0, #212]	; 0xd4
   16c90:	strne	r3, [r1]
   16c94:	ldr	r0, [r0, #196]	; 0xc4
   16c98:	bx	lr
   16c9c:	mov	r0, r1
   16ca0:	bx	lr
   16ca4:	mov	r0, r1
   16ca8:	bx	lr

00016cac <flatcc_builder_copy_buffer@@Base>:
   16cac:	ldr	r3, [r0, #184]	; 0xb8
   16cb0:	cmp	r3, #0
   16cb4:	beq	16cf8 <flatcc_builder_copy_buffer@@Base+0x4c>
   16cb8:	str	r4, [sp, #-8]!
   16cbc:	str	lr, [sp, #4]
   16cc0:	add	r0, r0, #188	; 0xbc
   16cc4:	bl	17468 <flatcc_emitter_copy_buffer@@Base>
   16cc8:	cmp	r0, #0
   16ccc:	beq	16cdc <flatcc_builder_copy_buffer@@Base+0x30>
   16cd0:	ldr	r4, [sp]
   16cd4:	add	sp, sp, #4
   16cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16cdc:	ldr	r3, [pc, #28]	; 16d00 <flatcc_builder_copy_buffer@@Base+0x54>
   16ce0:	movw	r2, #1926	; 0x786
   16ce4:	movw	r1, #32828	; 0x803c
   16ce8:	movt	r1, #1
   16cec:	movw	r0, #33856	; 0x8440
   16cf0:	movt	r0, #1
   16cf4:	bl	12060 <__assert_fail@plt>
   16cf8:	mov	r0, #0
   16cfc:	bx	lr
   16d00:	andeq	r8, r1, r0

00016d04 <flatcc_builder_finalize_buffer@@Base>:
   16d04:	strd	r4, [sp, #-16]!
   16d08:	str	r6, [sp, #8]
   16d0c:	str	lr, [sp, #12]
   16d10:	mov	r5, r0
   16d14:	ldr	r4, [r0, #140]	; 0x8c
   16d18:	ldr	r3, [r0, #136]	; 0x88
   16d1c:	sub	r4, r4, r3
   16d20:	cmp	r1, #0
   16d24:	strne	r4, [r1]
   16d28:	mov	r0, r4
   16d2c:	bl	11fe8 <malloc@plt>
   16d30:	subs	r6, r0, #0
   16d34:	beq	16d64 <flatcc_builder_finalize_buffer@@Base+0x60>
   16d38:	mov	r2, r4
   16d3c:	mov	r1, r6
   16d40:	mov	r0, r5
   16d44:	bl	16cac <flatcc_builder_copy_buffer@@Base>
   16d48:	cmp	r0, #0
   16d4c:	beq	16d80 <flatcc_builder_finalize_buffer@@Base+0x7c>
   16d50:	mov	r0, r6
   16d54:	ldrd	r4, [sp]
   16d58:	ldr	r6, [sp, #8]
   16d5c:	add	sp, sp, #12
   16d60:	pop	{pc}		; (ldr pc, [sp], #4)
   16d64:	ldr	r3, [pc, #48]	; 16d9c <flatcc_builder_finalize_buffer@@Base+0x98>
   16d68:	movw	r2, #1944	; 0x798
   16d6c:	movw	r1, #32828	; 0x803c
   16d70:	movt	r1, #1
   16d74:	movw	r0, #32912	; 0x8090
   16d78:	movt	r0, #1
   16d7c:	bl	12060 <__assert_fail@plt>
   16d80:	ldr	r3, [pc, #20]	; 16d9c <flatcc_builder_finalize_buffer@@Base+0x98>
   16d84:	movw	r2, #1948	; 0x79c
   16d88:	movw	r1, #32828	; 0x803c
   16d8c:	movt	r1, #1
   16d90:	movw	r0, #32912	; 0x8090
   16d94:	movt	r0, #1
   16d98:	bl	12060 <__assert_fail@plt>
   16d9c:	andeq	r8, r1, ip, lsl r0

00016da0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16da0:	strd	r4, [sp, #-20]!	; 0xffffffec
   16da4:	strd	r6, [sp, #8]
   16da8:	str	lr, [sp, #16]
   16dac:	sub	sp, sp, #12
   16db0:	mov	r7, r0
   16db4:	ldr	r4, [r0, #140]	; 0x8c
   16db8:	ldr	r3, [r0, #136]	; 0x88
   16dbc:	sub	r3, r4, r3
   16dc0:	subs	r6, r1, #0
   16dc4:	strne	r3, [r6]
   16dc8:	ldrh	r1, [r0, #128]	; 0x80
   16dcc:	sub	r4, r1, #1
   16dd0:	add	r4, r4, r3
   16dd4:	rsb	r3, r1, #0
   16dd8:	and	r4, r4, r3
   16ddc:	mov	r3, #0
   16de0:	str	r3, [sp, #4]
   16de4:	mov	r2, r4
   16de8:	cmp	r1, #4
   16dec:	movcc	r1, #4
   16df0:	add	r0, sp, #4
   16df4:	bl	12024 <posix_memalign@plt>
   16df8:	cmp	r0, #0
   16dfc:	beq	16e24 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   16e00:	ldr	r0, [sp, #4]
   16e04:	cmp	r0, #0
   16e08:	beq	16e10 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   16e0c:	bl	11fa0 <free@plt>
   16e10:	cmp	r6, #0
   16e14:	movne	r5, #0
   16e18:	strne	r5, [r6]
   16e1c:	moveq	r5, r6
   16e20:	b	16e48 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   16e24:	ldr	r5, [sp, #4]
   16e28:	cmp	r5, #0
   16e2c:	beq	16e10 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   16e30:	mov	r2, r4
   16e34:	mov	r1, r5
   16e38:	mov	r0, r7
   16e3c:	bl	16cac <flatcc_builder_copy_buffer@@Base>
   16e40:	cmp	r0, #0
   16e44:	beq	16e60 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   16e48:	mov	r0, r5
   16e4c:	add	sp, sp, #12
   16e50:	ldrd	r4, [sp]
   16e54:	ldrd	r6, [sp, #8]
   16e58:	add	sp, sp, #16
   16e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e60:	mov	r0, r5
   16e64:	bl	11fa0 <free@plt>
   16e68:	b	16e10 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

00016e6c <flatcc_builder_aligned_alloc@@Base>:
   16e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   16e70:	sub	sp, sp, #12
   16e74:	mov	r3, #0
   16e78:	str	r3, [sp, #4]
   16e7c:	mov	r2, r1
   16e80:	cmp	r0, #4
   16e84:	movcs	r1, r0
   16e88:	movcc	r1, #4
   16e8c:	add	r0, sp, #4
   16e90:	bl	12024 <posix_memalign@plt>
   16e94:	cmp	r0, #0
   16e98:	beq	16eb4 <flatcc_builder_aligned_alloc@@Base+0x48>
   16e9c:	ldr	r0, [sp, #4]
   16ea0:	cmp	r0, #0
   16ea4:	beq	16eb4 <flatcc_builder_aligned_alloc@@Base+0x48>
   16ea8:	bl	11fa0 <free@plt>
   16eac:	mov	r3, #0
   16eb0:	str	r3, [sp, #4]
   16eb4:	ldr	r0, [sp, #4]
   16eb8:	add	sp, sp, #12
   16ebc:	pop	{pc}		; (ldr pc, [sp], #4)

00016ec0 <flatcc_builder_aligned_free@@Base>:
   16ec0:	str	r4, [sp, #-8]!
   16ec4:	str	lr, [sp, #4]
   16ec8:	bl	11fa0 <free@plt>
   16ecc:	ldr	r4, [sp]
   16ed0:	add	sp, sp, #4
   16ed4:	pop	{pc}		; (ldr pc, [sp], #4)

00016ed8 <flatcc_builder_get_emit_context@@Base>:
   16ed8:	ldr	r0, [r0, #36]	; 0x24
   16edc:	bx	lr

00016ee0 <flatcc_emitter_recycle_page@@Base>:
   16ee0:	ldr	r3, [r0]
   16ee4:	cmp	r3, r1
   16ee8:	beq	16f34 <flatcc_emitter_recycle_page@@Base+0x54>
   16eec:	ldr	r3, [r0, #4]
   16ef0:	cmp	r3, r1
   16ef4:	beq	16f3c <flatcc_emitter_recycle_page@@Base+0x5c>
   16ef8:	ldr	r2, [r1, #2944]	; 0xb80
   16efc:	ldr	r3, [r1, #2948]	; 0xb84
   16f00:	str	r3, [r2, #2948]	; 0xb84
   16f04:	ldr	r2, [r1, #2944]	; 0xb80
   16f08:	str	r2, [r3, #2944]	; 0xb80
   16f0c:	ldr	r3, [r0]
   16f10:	ldr	r3, [r3, #2948]	; 0xb84
   16f14:	str	r3, [r1, #2948]	; 0xb84
   16f18:	ldr	r2, [r0]
   16f1c:	str	r2, [r1, #2944]	; 0xb80
   16f20:	str	r1, [r3, #2944]	; 0xb80
   16f24:	ldr	r3, [r1, #2944]	; 0xb80
   16f28:	str	r1, [r3, #2948]	; 0xb84
   16f2c:	mov	r0, #0
   16f30:	bx	lr
   16f34:	mvn	r0, #0
   16f38:	bx	lr
   16f3c:	mvn	r0, #0
   16f40:	bx	lr

00016f44 <flatcc_emitter_reset@@Base>:
   16f44:	ldr	r3, [r0]
   16f48:	cmp	r3, #0
   16f4c:	bxeq	lr
   16f50:	str	r3, [r0, #4]
   16f54:	add	r2, r3, #1472	; 0x5c0
   16f58:	str	r2, [r0, #8]
   16f5c:	str	r2, [r0, #16]
   16f60:	mov	r2, #1472	; 0x5c0
   16f64:	str	r2, [r0, #12]
   16f68:	str	r2, [r0, #20]
   16f6c:	movw	r2, #64064	; 0xfa40
   16f70:	movt	r2, #65535	; 0xffff
   16f74:	str	r2, [r3, #2952]	; 0xb88
   16f78:	ldr	r3, [r0, #32]
   16f7c:	cmp	r3, #0
   16f80:	ldreq	r3, [r0, #24]
   16f84:	streq	r3, [r0, #32]
   16f88:	ldr	r3, [r0, #32]
   16f8c:	add	r2, r3, r3, lsl #1
   16f90:	ldr	r3, [r0, #24]
   16f94:	lsr	r3, r3, #2
   16f98:	add	r3, r3, r2, lsr #2
   16f9c:	str	r3, [r0, #32]
   16fa0:	mov	r2, #0
   16fa4:	str	r2, [r0, #24]
   16fa8:	ldr	r2, [r0, #28]
   16fac:	cmp	r2, r3, lsl #1
   16fb0:	bxls	lr
   16fb4:	str	r4, [sp, #-8]!
   16fb8:	str	lr, [sp, #4]
   16fbc:	mov	r4, r0
   16fc0:	ldr	r3, [r0, #4]
   16fc4:	ldr	r0, [r3, #2944]	; 0xb80
   16fc8:	ldr	r2, [r4]
   16fcc:	cmp	r0, r2
   16fd0:	beq	17014 <flatcc_emitter_reset@@Base+0xd0>
   16fd4:	ldr	r2, [r0, #2944]	; 0xb80
   16fd8:	str	r2, [r3, #2944]	; 0xb80
   16fdc:	ldr	r3, [r4, #4]
   16fe0:	str	r3, [r2, #2948]	; 0xb84
   16fe4:	bl	11fa0 <free@plt>
   16fe8:	ldr	r3, [r4, #28]
   16fec:	sub	r3, r3, #2944	; 0xb80
   16ff0:	str	r3, [r4, #28]
   16ff4:	ldr	r2, [r4, #32]
   16ff8:	cmp	r3, r2, lsl #1
   16ffc:	bls	17014 <flatcc_emitter_reset@@Base+0xd0>
   17000:	ldr	r3, [r4, #4]
   17004:	ldr	r0, [r3, #2944]	; 0xb80
   17008:	ldr	r2, [r4]
   1700c:	cmp	r0, r2
   17010:	bne	16fd4 <flatcc_emitter_reset@@Base+0x90>
   17014:	ldr	r4, [sp]
   17018:	add	sp, sp, #4
   1701c:	pop	{pc}		; (ldr pc, [sp], #4)

00017020 <flatcc_emitter_clear@@Base>:
   17020:	ldr	r3, [r0]
   17024:	cmp	r3, #0
   17028:	bxeq	lr
   1702c:	strd	r4, [sp, #-16]!
   17030:	str	r6, [sp, #8]
   17034:	str	lr, [sp, #12]
   17038:	mov	r5, r0
   1703c:	ldr	r2, [r3, #2948]	; 0xb84
   17040:	mov	r1, #0
   17044:	str	r1, [r2, #2944]	; 0xb80
   17048:	ldr	r4, [r3, #2944]	; 0xb80
   1704c:	cmp	r4, r1
   17050:	bne	17060 <flatcc_emitter_clear@@Base+0x40>
   17054:	mov	r4, r3
   17058:	b	17074 <flatcc_emitter_clear@@Base+0x54>
   1705c:	mov	r4, r3
   17060:	ldr	r0, [r4, #2948]	; 0xb84
   17064:	bl	11fa0 <free@plt>
   17068:	ldr	r3, [r4, #2944]	; 0xb80
   1706c:	cmp	r3, #0
   17070:	bne	1705c <flatcc_emitter_clear@@Base+0x3c>
   17074:	mov	r0, r4
   17078:	bl	11fa0 <free@plt>
   1707c:	mov	r2, #36	; 0x24
   17080:	mov	r1, #0
   17084:	mov	r0, r5
   17088:	bl	12030 <memset@plt>
   1708c:	ldrd	r4, [sp]
   17090:	ldr	r6, [sp, #8]
   17094:	add	sp, sp, #12
   17098:	pop	{pc}		; (ldr pc, [sp], #4)

0001709c <flatcc_emitter@@Base>:
   1709c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   170a0:	strd	r6, [sp, #8]
   170a4:	strd	r8, [sp, #16]
   170a8:	strd	sl, [sp, #24]
   170ac:	str	lr, [sp, #32]
   170b0:	sub	sp, sp, #4
   170b4:	mov	r4, r0
   170b8:	ldr	ip, [sp, #40]	; 0x28
   170bc:	ldr	r0, [r0, #24]
   170c0:	add	r0, r0, ip
   170c4:	str	r0, [r4, #24]
   170c8:	cmp	r3, #0
   170cc:	blt	170fc <flatcc_emitter@@Base+0x60>
   170d0:	ldr	r3, [r4, #20]
   170d4:	cmp	r3, ip
   170d8:	bcs	171e4 <flatcc_emitter@@Base+0x148>
   170dc:	cmp	r2, #0
   170e0:	moveq	r0, r2
   170e4:	beq	172e4 <flatcc_emitter@@Base+0x248>
   170e8:	add	r5, r1, #8
   170ec:	mov	r8, r2
   170f0:	movw	fp, #64064	; 0xfa40
   170f4:	movt	fp, #65535	; 0xffff
   170f8:	b	17340 <flatcc_emitter@@Base+0x2a4>
   170fc:	ldr	r3, [r4, #12]
   17100:	cmp	r3, ip
   17104:	bcs	1711c <flatcc_emitter@@Base+0x80>
   17108:	add	r5, r1, r2, lsl #3
   1710c:	sub	r8, r2, #1
   17110:	movw	fp, #64064	; 0xfa40
   17114:	movt	fp, #65535	; 0xffff
   17118:	b	17310 <flatcc_emitter@@Base+0x274>
   1711c:	ldr	r6, [r4, #8]
   17120:	sub	r6, r6, ip
   17124:	str	r6, [r4, #8]
   17128:	sub	ip, r3, ip
   1712c:	str	ip, [r4, #12]
   17130:	b	171f8 <flatcc_emitter@@Base+0x15c>
   17134:	mov	r2, r6
   17138:	rsb	r1, r2, #0
   1713c:	ldr	r0, [r4, #8]
   17140:	add	r0, r0, r1
   17144:	str	r0, [r4, #8]
   17148:	sub	r3, r3, r2
   1714c:	str	r3, [r4, #12]
   17150:	add	r9, r9, r1
   17154:	sub	r6, r6, r2
   17158:	mov	r1, r9
   1715c:	bl	11fac <memcpy@plt>
   17160:	cmp	r6, #0
   17164:	beq	17308 <flatcc_emitter@@Base+0x26c>
   17168:	ldr	r3, [r4, #12]
   1716c:	cmp	r3, r6
   17170:	bcs	17134 <flatcc_emitter@@Base+0x98>
   17174:	cmp	r3, #0
   17178:	movne	r2, r3
   1717c:	bne	17138 <flatcc_emitter@@Base+0x9c>
   17180:	ldr	r7, [r4]
   17184:	cmp	r7, #0
   17188:	beq	1739c <flatcc_emitter@@Base+0x300>
   1718c:	ldr	r2, [r7, #2948]	; 0xb84
   17190:	ldr	r3, [r4, #4]
   17194:	cmp	r2, r3
   17198:	beq	17360 <flatcc_emitter@@Base+0x2c4>
   1719c:	ldr	r3, [r7, #2952]	; 0xb88
   171a0:	sub	r3, r3, #2944	; 0xb80
   171a4:	str	r3, [r2, #2952]	; 0xb88
   171a8:	ldr	r3, [r4]
   171ac:	ldr	r3, [r3, #2948]	; 0xb84
   171b0:	str	r3, [r4]
   171b4:	ldr	r3, [r4]
   171b8:	add	r2, r3, #2944	; 0xb80
   171bc:	str	r2, [r4, #8]
   171c0:	mov	r2, #2944	; 0xb80
   171c4:	str	r2, [r4, #12]
   171c8:	ldr	r2, [r3, #2944]	; 0xb80
   171cc:	ldr	r2, [r2, #2952]	; 0xb88
   171d0:	sub	r2, r2, #2944	; 0xb80
   171d4:	str	r2, [r3, #2952]	; 0xb88
   171d8:	b	17160 <flatcc_emitter@@Base+0xc4>
   171dc:	mov	r0, #0
   171e0:	b	172e4 <flatcc_emitter@@Base+0x248>
   171e4:	ldr	r6, [r4, #16]
   171e8:	add	r0, r6, ip
   171ec:	str	r0, [r4, #16]
   171f0:	sub	ip, r3, ip
   171f4:	str	ip, [r4, #20]
   171f8:	sub	r4, r2, #1
   171fc:	cmp	r2, #0
   17200:	moveq	r0, r2
   17204:	beq	172e4 <flatcc_emitter@@Base+0x248>
   17208:	add	r5, r1, #8
   1720c:	ldr	r2, [r5, #-4]
   17210:	ldr	r1, [r5, #-8]
   17214:	mov	r0, r6
   17218:	bl	11fac <memcpy@plt>
   1721c:	ldr	r3, [r5, #-4]
   17220:	add	r6, r6, r3
   17224:	sub	r4, r4, #1
   17228:	add	r5, r5, #8
   1722c:	cmn	r4, #1
   17230:	bne	1720c <flatcc_emitter@@Base+0x170>
   17234:	mov	r0, #0
   17238:	b	172e4 <flatcc_emitter@@Base+0x248>
   1723c:	mov	r6, r7
   17240:	mov	r2, r6
   17244:	mov	r1, r9
   17248:	ldr	r0, [r4, #16]
   1724c:	bl	11fac <memcpy@plt>
   17250:	sub	r7, r7, r6
   17254:	add	r9, r9, r6
   17258:	ldr	r3, [r4, #16]
   1725c:	add	r3, r3, r6
   17260:	str	r3, [r4, #16]
   17264:	ldr	r3, [r4, #20]
   17268:	sub	r6, r3, r6
   1726c:	str	r6, [r4, #20]
   17270:	cmp	r7, #0
   17274:	beq	17334 <flatcc_emitter@@Base+0x298>
   17278:	ldr	r6, [r4, #20]
   1727c:	cmp	r6, r7
   17280:	bcs	1723c <flatcc_emitter@@Base+0x1a0>
   17284:	cmp	r6, #0
   17288:	bne	17240 <flatcc_emitter@@Base+0x1a4>
   1728c:	ldr	r6, [r4, #4]
   17290:	cmp	r6, #0
   17294:	beq	17420 <flatcc_emitter@@Base+0x384>
   17298:	ldr	r3, [r6, #2944]	; 0xb80
   1729c:	ldr	r2, [r4]
   172a0:	cmp	r3, r2
   172a4:	beq	173e4 <flatcc_emitter@@Base+0x348>
   172a8:	str	r3, [r4, #4]
   172ac:	ldr	r3, [r4, #4]
   172b0:	str	r3, [r4, #16]
   172b4:	mov	r2, #2944	; 0xb80
   172b8:	str	r2, [r4, #20]
   172bc:	ldr	r2, [r3, #2948]	; 0xb84
   172c0:	ldr	r2, [r2, #2952]	; 0xb88
   172c4:	add	r2, r2, #2944	; 0xb80
   172c8:	str	r2, [r3, #2952]	; 0xb88
   172cc:	b	17270 <flatcc_emitter@@Base+0x1d4>
   172d0:	mvn	r0, #0
   172d4:	b	172e4 <flatcc_emitter@@Base+0x248>
   172d8:	mvn	r0, #0
   172dc:	b	172e4 <flatcc_emitter@@Base+0x248>
   172e0:	mvn	r0, #0
   172e4:	add	sp, sp, #4
   172e8:	ldrd	r4, [sp]
   172ec:	ldrd	r6, [sp, #8]
   172f0:	ldrd	r8, [sp, #16]
   172f4:	ldrd	sl, [sp, #24]
   172f8:	add	sp, sp, #32
   172fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17300:	mvn	r0, #0
   17304:	b	172e4 <flatcc_emitter@@Base+0x248>
   17308:	sub	r5, r5, #8
   1730c:	sub	r8, r8, #1
   17310:	cmn	r8, #1
   17314:	beq	171dc <flatcc_emitter@@Base+0x140>
   17318:	ldr	r6, [r5, #-4]
   1731c:	ldr	r9, [r5, #-8]
   17320:	add	r9, r9, r6
   17324:	cmp	r6, #0
   17328:	beq	17308 <flatcc_emitter@@Base+0x26c>
   1732c:	mov	sl, #1472	; 0x5c0
   17330:	b	17168 <flatcc_emitter@@Base+0xcc>
   17334:	add	r5, r5, #8
   17338:	subs	r8, r8, #1
   1733c:	beq	17358 <flatcc_emitter@@Base+0x2bc>
   17340:	ldr	r9, [r5, #-8]
   17344:	ldr	r7, [r5, #-4]
   17348:	cmp	r7, #0
   1734c:	beq	17334 <flatcc_emitter@@Base+0x298>
   17350:	mov	sl, #1472	; 0x5c0
   17354:	b	17278 <flatcc_emitter@@Base+0x1dc>
   17358:	mov	r0, #0
   1735c:	b	172e4 <flatcc_emitter@@Base+0x248>
   17360:	movw	r0, #2956	; 0xb8c
   17364:	bl	11fe8 <malloc@plt>
   17368:	cmp	r0, #0
   1736c:	beq	172d0 <flatcc_emitter@@Base+0x234>
   17370:	ldr	r3, [r4, #28]
   17374:	add	r3, r3, #2944	; 0xb80
   17378:	str	r3, [r4, #28]
   1737c:	ldr	r3, [r4, #4]
   17380:	str	r3, [r0, #2948]	; 0xb84
   17384:	str	r7, [r0, #2944]	; 0xb80
   17388:	str	r0, [r7, #2948]	; 0xb84
   1738c:	ldr	r3, [r4, #4]
   17390:	str	r0, [r3, #2944]	; 0xb80
   17394:	str	r0, [r4]
   17398:	b	171b4 <flatcc_emitter@@Base+0x118>
   1739c:	movw	r0, #2956	; 0xb8c
   173a0:	bl	11fe8 <malloc@plt>
   173a4:	cmp	r0, #0
   173a8:	beq	172d8 <flatcc_emitter@@Base+0x23c>
   173ac:	ldr	r3, [r4, #28]
   173b0:	add	r3, r3, #2944	; 0xb80
   173b4:	str	r3, [r4, #28]
   173b8:	str	r0, [r4]
   173bc:	str	r0, [r4, #4]
   173c0:	str	r0, [r0, #2944]	; 0xb80
   173c4:	str	r0, [r0, #2948]	; 0xb84
   173c8:	add	r3, r0, #1472	; 0x5c0
   173cc:	str	r3, [r4, #8]
   173d0:	str	r3, [r4, #16]
   173d4:	str	sl, [r4, #12]
   173d8:	str	sl, [r4, #20]
   173dc:	str	fp, [r0, #2952]	; 0xb88
   173e0:	b	17160 <flatcc_emitter@@Base+0xc4>
   173e4:	movw	r0, #2956	; 0xb8c
   173e8:	bl	11fe8 <malloc@plt>
   173ec:	cmp	r0, #0
   173f0:	beq	172e0 <flatcc_emitter@@Base+0x244>
   173f4:	ldr	r3, [r4, #28]
   173f8:	add	r3, r3, #2944	; 0xb80
   173fc:	str	r3, [r4, #28]
   17400:	str	r6, [r0, #2948]	; 0xb84
   17404:	ldr	r3, [r4]
   17408:	str	r3, [r0, #2944]	; 0xb80
   1740c:	str	r0, [r3, #2948]	; 0xb84
   17410:	ldr	r3, [r4, #4]
   17414:	str	r0, [r3, #2944]	; 0xb80
   17418:	str	r0, [r4, #4]
   1741c:	b	172ac <flatcc_emitter@@Base+0x210>
   17420:	movw	r0, #2956	; 0xb8c
   17424:	bl	11fe8 <malloc@plt>
   17428:	cmp	r0, #0
   1742c:	beq	17300 <flatcc_emitter@@Base+0x264>
   17430:	ldr	r3, [r4, #28]
   17434:	add	r3, r3, #2944	; 0xb80
   17438:	str	r3, [r4, #28]
   1743c:	str	r0, [r4]
   17440:	str	r0, [r4, #4]
   17444:	str	r0, [r0, #2944]	; 0xb80
   17448:	str	r0, [r0, #2948]	; 0xb84
   1744c:	add	r3, r0, #1472	; 0x5c0
   17450:	str	r3, [r4, #8]
   17454:	str	r3, [r4, #16]
   17458:	str	sl, [r4, #12]
   1745c:	str	sl, [r4, #20]
   17460:	str	fp, [r0, #2952]	; 0xb88
   17464:	b	17270 <flatcc_emitter@@Base+0x1d4>

00017468 <flatcc_emitter_copy_buffer@@Base>:
   17468:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1746c:	strd	r6, [sp, #8]
   17470:	str	r8, [sp, #16]
   17474:	str	lr, [sp, #20]
   17478:	ldr	r3, [r0, #24]
   1747c:	cmp	r3, r2
   17480:	movhi	r4, #0
   17484:	bhi	17514 <flatcc_emitter_copy_buffer@@Base+0xac>
   17488:	ldr	r4, [r0]
   1748c:	cmp	r4, #0
   17490:	beq	17514 <flatcc_emitter_copy_buffer@@Base+0xac>
   17494:	mov	r5, r1
   17498:	mov	r7, r0
   1749c:	ldr	r2, [r0, #4]
   174a0:	cmp	r4, r2
   174a4:	beq	1752c <flatcc_emitter_copy_buffer@@Base+0xc4>
   174a8:	ldr	r4, [r0, #12]
   174ac:	rsb	r4, r4, #2944	; 0xb80
   174b0:	mov	r2, r4
   174b4:	ldr	r1, [r0, #8]
   174b8:	mov	r0, r5
   174bc:	bl	11fac <memcpy@plt>
   174c0:	add	r4, r5, r4
   174c4:	ldr	r3, [r7]
   174c8:	ldr	r5, [r3, #2944]	; 0xb80
   174cc:	ldr	r3, [r7, #4]
   174d0:	cmp	r5, r3
   174d4:	beq	17544 <flatcc_emitter_copy_buffer@@Base+0xdc>
   174d8:	mov	r6, #2944	; 0xb80
   174dc:	mov	r2, r6
   174e0:	mov	r1, r5
   174e4:	mov	r0, r4
   174e8:	bl	11fac <memcpy@plt>
   174ec:	add	r4, r4, #2944	; 0xb80
   174f0:	ldr	r5, [r5, #2944]	; 0xb80
   174f4:	ldr	r3, [r7, #4]
   174f8:	cmp	r3, r5
   174fc:	bne	174dc <flatcc_emitter_copy_buffer@@Base+0x74>
   17500:	ldr	r2, [r7, #20]
   17504:	rsb	r2, r2, #2944	; 0xb80
   17508:	mov	r1, r5
   1750c:	mov	r0, r4
   17510:	bl	11fac <memcpy@plt>
   17514:	mov	r0, r4
   17518:	ldrd	r4, [sp]
   1751c:	ldrd	r6, [sp, #8]
   17520:	ldr	r8, [sp, #16]
   17524:	add	sp, sp, #20
   17528:	pop	{pc}		; (ldr pc, [sp], #4)
   1752c:	mov	r2, r3
   17530:	ldr	r1, [r0, #8]
   17534:	mov	r0, r5
   17538:	bl	11fac <memcpy@plt>
   1753c:	mov	r4, r5
   17540:	b	17514 <flatcc_emitter_copy_buffer@@Base+0xac>
   17544:	mov	r5, r3
   17548:	b	17500 <flatcc_emitter_copy_buffer@@Base+0x98>

0001754c <__libc_csu_init@@Base>:
   1754c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17550:	mov	r7, r0
   17554:	ldr	r6, [pc, #72]	; 175a4 <__libc_csu_init@@Base+0x58>
   17558:	ldr	r5, [pc, #72]	; 175a8 <__libc_csu_init@@Base+0x5c>
   1755c:	add	r6, pc, r6
   17560:	add	r5, pc, r5
   17564:	sub	r6, r6, r5
   17568:	mov	r8, r1
   1756c:	mov	r9, r2
   17570:	bl	11f74 <printf@plt-0x20>
   17574:	asrs	r6, r6, #2
   17578:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1757c:	mov	r4, #0
   17580:	add	r4, r4, #1
   17584:	ldr	r3, [r5], #4
   17588:	mov	r2, r9
   1758c:	mov	r1, r8
   17590:	mov	r0, r7
   17594:	blx	r3
   17598:	cmp	r6, r4
   1759c:	bne	17580 <__libc_csu_init@@Base+0x34>
   175a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175a4:			; <UNDEFINED> instruction: 0x000119b0
   175a8:	andeq	r1, r1, r8, lsr #19

000175ac <__libc_csu_fini@@Base>:
   175ac:	bx	lr

Disassembly of section .fini:

000175b0 <.fini>:
   175b0:	push	{r3, lr}
   175b4:	pop	{r3, pc}
