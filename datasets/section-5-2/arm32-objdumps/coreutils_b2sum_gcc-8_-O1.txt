
../repos/coreutils/src/b2sum:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	111d4 <__assert_fail@plt+0x48>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <fdopen@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <fdopen@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	sp, r1, r4, asr r1

00010eb0 <fdopen@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #118784	; 0x1d000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <calloc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #118784	; 0x1d000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <fputs_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #118784	; 0x1d000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <raise@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #118784	; 0x1d000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <__getdelim@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #118784	; 0x1d000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <strcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #118784	; 0x1d000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <posix_fadvise64@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #118784	; 0x1d000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <fflush@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #118784	; 0x1d000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <free@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #118784	; 0x1d000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <ferror@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #118784	; 0x1d000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <_exit@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #118784	; 0x1d000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <memcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #118784	; 0x1d000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <__strtoull_internal@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #118784	; 0x1d000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <mbsinit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #118784	; 0x1d000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <fwrite_unlocked@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #118784	; 0x1d000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <memcmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #118784	; 0x1d000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <fputc_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #118784	; 0x1d000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <dcgettext@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #118784	; 0x1d000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <realloc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #118784	; 0x1d000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <textdomain@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #118784	; 0x1d000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <iswprint@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #118784	; 0x1d000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <__memcpy_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #118784	; 0x1d000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <fwrite@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #118784	; 0x1d000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <lseek64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #118784	; 0x1d000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <__ctype_get_mb_cur_max@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #118784	; 0x1d000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <fread@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #118784	; 0x1d000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <__fpending@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #118784	; 0x1d000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <mbrtowc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #118784	; 0x1d000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <error@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #118784	; 0x1d000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <malloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #118784	; 0x1d000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <__libc_start_main@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #118784	; 0x1d000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <__freading@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #118784	; 0x1d000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <__ctype_tolower_loc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #118784	; 0x1d000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <__gmon_start__@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #118784	; 0x1d000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <getopt_long@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #118784	; 0x1d000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #118784	; 0x1d000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #118784	; 0x1d000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <feof@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #118784	; 0x1d000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #118784	; 0x1d000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #118784	; 0x1d000
   1108c:	ldr	pc, [ip, #28]!

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #118784	; 0x1d000
   11098:	ldr	pc, [ip, #20]!

0001109c <__cxa_atexit@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #118784	; 0x1d000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <setvbuf@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #118784	; 0x1d000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <__printf_chk@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <fileno@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <__fprintf_chk@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <fclose@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <fseeko64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <fcntl64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

00011108 <__overflow@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #4036]!	; 0xfc4

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #4028]!	; 0xfbc

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #4020]!	; 0xfb4

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #4012]!	; 0xfac

00011138 <clearerr_unlocked@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #4004]!	; 0xfa4

00011144 <fopen64@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3988]!	; 0xf94

0001115c <strncmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3980]!	; 0xf8c

00011168 <abort@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3972]!	; 0xf84

00011174 <close@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011180 <dcngettext@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3956]!	; 0xf74

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3948]!	; 0xf6c

Disassembly of section .text:

00011198 <.text>:
   11198:	mov	fp, #0
   1119c:	mov	lr, #0
   111a0:	pop	{r1}		; (ldr r1, [sp], #4)
   111a4:	mov	r2, sp
   111a8:	push	{r2}		; (str r2, [sp, #-4]!)
   111ac:	push	{r0}		; (str r0, [sp, #-4]!)
   111b0:	ldr	ip, [pc, #16]	; 111c8 <__assert_fail@plt+0x3c>
   111b4:	push	{ip}		; (str ip, [sp, #-4]!)
   111b8:	ldr	r0, [pc, #12]	; 111cc <__assert_fail@plt+0x40>
   111bc:	ldr	r3, [pc, #12]	; 111d0 <__assert_fail@plt+0x44>
   111c0:	bl	11018 <__libc_start_main@plt>
   111c4:	bl	11168 <abort@plt>
   111c8:	andeq	ip, r1, ip, lsl #13
   111cc:	andeq	r1, r1, ip, lsl #23
   111d0:	andeq	ip, r1, ip, lsr #12
   111d4:	ldr	r3, [pc, #20]	; 111f0 <__assert_fail@plt+0x64>
   111d8:	ldr	r2, [pc, #20]	; 111f4 <__assert_fail@plt+0x68>
   111dc:	add	r3, pc, r3
   111e0:	ldr	r2, [r3, r2]
   111e4:	cmp	r2, #0
   111e8:	bxeq	lr
   111ec:	b	1103c <__gmon_start__@plt>
   111f0:	andeq	ip, r1, ip, lsl lr
   111f4:	andeq	r0, r0, r4, lsl #2
   111f8:	ldr	r0, [pc, #24]	; 11218 <__assert_fail@plt+0x8c>
   111fc:	ldr	r3, [pc, #24]	; 1121c <__assert_fail@plt+0x90>
   11200:	cmp	r3, r0
   11204:	bxeq	lr
   11208:	ldr	r3, [pc, #16]	; 11220 <__assert_fail@plt+0x94>
   1120c:	cmp	r3, #0
   11210:	bxeq	lr
   11214:	bx	r3
   11218:	andeq	lr, r2, r4, ror #2
   1121c:	andeq	lr, r2, r4, ror #2
   11220:	andeq	r0, r0, r0
   11224:	ldr	r0, [pc, #36]	; 11250 <__assert_fail@plt+0xc4>
   11228:	ldr	r1, [pc, #36]	; 11254 <__assert_fail@plt+0xc8>
   1122c:	sub	r1, r1, r0
   11230:	asr	r1, r1, #2
   11234:	add	r1, r1, r1, lsr #31
   11238:	asrs	r1, r1, #1
   1123c:	bxeq	lr
   11240:	ldr	r3, [pc, #16]	; 11258 <__assert_fail@plt+0xcc>
   11244:	cmp	r3, #0
   11248:	bxeq	lr
   1124c:	bx	r3
   11250:	andeq	lr, r2, r4, ror #2
   11254:	andeq	lr, r2, r4, ror #2
   11258:	andeq	r0, r0, r0
   1125c:	push	{r4, lr}
   11260:	ldr	r4, [pc, #24]	; 11280 <__assert_fail@plt+0xf4>
   11264:	ldrb	r3, [r4]
   11268:	cmp	r3, #0
   1126c:	popne	{r4, pc}
   11270:	bl	111f8 <__assert_fail@plt+0x6c>
   11274:	mov	r3, #1
   11278:	strb	r3, [r4]
   1127c:	pop	{r4, pc}
   11280:	andeq	lr, r2, ip, lsl #3
   11284:	b	11224 <__assert_fail@plt+0x98>
   11288:	cmp	r1, #0
   1128c:	bxeq	lr
   11290:	strd	r4, [sp, #-20]!	; 0xffffffec
   11294:	strd	r6, [sp, #8]
   11298:	str	lr, [sp, #16]
   1129c:	add	ip, r0, #1
   112a0:	mov	r3, #0
   112a4:	sub	lr, r1, #1
   112a8:	mov	r7, #10
   112ac:	mov	r6, #13
   112b0:	mov	r5, #92	; 0x5c
   112b4:	b	112f4 <__assert_fail@plt+0x168>
   112b8:	mov	r4, ip
   112bc:	strb	r7, [ip, #-1]
   112c0:	b	112e4 <__assert_fail@plt+0x158>
   112c4:	mov	r4, ip
   112c8:	strb	r6, [ip, #-1]
   112cc:	b	112e4 <__assert_fail@plt+0x158>
   112d0:	mov	r4, ip
   112d4:	strb	r5, [ip, #-1]
   112d8:	b	112e4 <__assert_fail@plt+0x158>
   112dc:	mov	r4, ip
   112e0:	strb	r2, [ip, #-1]
   112e4:	add	r3, r3, #1
   112e8:	add	ip, ip, #1
   112ec:	cmp	r1, r3
   112f0:	bls	11338 <__assert_fail@plt+0x1ac>
   112f4:	ldrb	r2, [r0, r3]
   112f8:	cmp	r2, #0
   112fc:	beq	11350 <__assert_fail@plt+0x1c4>
   11300:	cmp	r2, #92	; 0x5c
   11304:	bne	112dc <__assert_fail@plt+0x150>
   11308:	cmp	lr, r3
   1130c:	beq	11364 <__assert_fail@plt+0x1d8>
   11310:	add	r3, r3, #1
   11314:	ldrb	r2, [r0, r3]
   11318:	cmp	r2, #110	; 0x6e
   1131c:	beq	112b8 <__assert_fail@plt+0x12c>
   11320:	cmp	r2, #114	; 0x72
   11324:	beq	112c4 <__assert_fail@plt+0x138>
   11328:	cmp	r2, #92	; 0x5c
   1132c:	beq	112d0 <__assert_fail@plt+0x144>
   11330:	mov	r0, #0
   11334:	b	11354 <__assert_fail@plt+0x1c8>
   11338:	add	r1, r0, r1
   1133c:	cmp	r4, r1
   11340:	bcs	11354 <__assert_fail@plt+0x1c8>
   11344:	mov	r3, #0
   11348:	strb	r3, [r4]
   1134c:	b	11354 <__assert_fail@plt+0x1c8>
   11350:	mov	r0, #0
   11354:	ldrd	r4, [sp]
   11358:	ldrd	r6, [sp, #8]
   1135c:	add	sp, sp, #16
   11360:	pop	{pc}		; (ldr pc, [sp], #4)
   11364:	mov	r0, #0
   11368:	b	11354 <__assert_fail@plt+0x1c8>
   1136c:	strd	r4, [sp, #-16]!
   11370:	str	r6, [sp, #8]
   11374:	str	lr, [sp, #12]
   11378:	mov	r5, r0
   1137c:	movw	r3, #57744	; 0xe190
   11380:	movt	r3, #2
   11384:	ldr	r4, [r3]
   11388:	cmp	r4, #0
   1138c:	beq	113c0 <__assert_fail@plt+0x234>
   11390:	bl	11054 <__ctype_b_loc@plt>
   11394:	ldr	r0, [r0]
   11398:	mov	r2, r5
   1139c:	add	r1, r5, r4
   113a0:	ldrb	r3, [r2], #1
   113a4:	lsl	r3, r3, #1
   113a8:	ldrh	r3, [r0, r3]
   113ac:	tst	r3, #4096	; 0x1000
   113b0:	beq	113dc <__assert_fail@plt+0x250>
   113b4:	mov	r5, r2
   113b8:	cmp	r2, r1
   113bc:	bne	113a0 <__assert_fail@plt+0x214>
   113c0:	ldrb	r0, [r5]
   113c4:	clz	r0, r0
   113c8:	lsr	r0, r0, #5
   113cc:	ldrd	r4, [sp]
   113d0:	ldr	r6, [sp, #8]
   113d4:	add	sp, sp, #12
   113d8:	pop	{pc}		; (ldr pc, [sp], #4)
   113dc:	mov	r0, #0
   113e0:	b	113cc <__assert_fail@plt+0x240>
   113e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   113e8:	strd	r6, [sp, #8]
   113ec:	str	r8, [sp, #16]
   113f0:	str	lr, [sp, #20]
   113f4:	mov	r4, r0
   113f8:	cmp	r1, #0
   113fc:	beq	11428 <__assert_fail@plt+0x29c>
   11400:	ldrb	r1, [r0]
   11404:	cmp	r1, #0
   11408:	beq	11438 <__assert_fail@plt+0x2ac>
   1140c:	movw	r5, #57732	; 0xe184
   11410:	movt	r5, #2
   11414:	movw	r7, #51168	; 0xc7e0
   11418:	movt	r7, #1
   1141c:	movw	r6, #51172	; 0xc7e4
   11420:	movt	r6, #1
   11424:	b	11470 <__assert_fail@plt+0x2e4>
   11428:	movw	r3, #57732	; 0xe184
   1142c:	movt	r3, #2
   11430:	ldr	r1, [r3]
   11434:	bl	10ec8 <fputs_unlocked@plt>
   11438:	ldrd	r4, [sp]
   1143c:	ldrd	r6, [sp, #8]
   11440:	ldr	r8, [sp, #16]
   11444:	add	sp, sp, #20
   11448:	pop	{pc}		; (ldr pc, [sp], #4)
   1144c:	ldr	r3, [r5]
   11450:	mov	r2, #2
   11454:	mov	r1, #1
   11458:	movw	r0, #51164	; 0xc7dc
   1145c:	movt	r0, #1
   11460:	bl	10f58 <fwrite_unlocked@plt>
   11464:	ldrb	r1, [r4, #1]!
   11468:	cmp	r1, #0
   1146c:	beq	11438 <__assert_fail@plt+0x2ac>
   11470:	cmp	r1, #13
   11474:	beq	114b0 <__assert_fail@plt+0x324>
   11478:	cmp	r1, #92	; 0x5c
   1147c:	beq	114c8 <__assert_fail@plt+0x33c>
   11480:	cmp	r1, #10
   11484:	beq	1144c <__assert_fail@plt+0x2c0>
   11488:	ldr	r0, [r5]
   1148c:	ldr	r3, [r0, #20]
   11490:	ldr	r2, [r0, #24]
   11494:	cmp	r3, r2
   11498:	addcc	r2, r3, #1
   1149c:	strcc	r2, [r0, #20]
   114a0:	strbcc	r1, [r3]
   114a4:	bcc	11464 <__assert_fail@plt+0x2d8>
   114a8:	bl	11108 <__overflow@plt>
   114ac:	b	11464 <__assert_fail@plt+0x2d8>
   114b0:	ldr	r3, [r5]
   114b4:	mov	r2, #2
   114b8:	mov	r1, #1
   114bc:	mov	r0, r7
   114c0:	bl	10f58 <fwrite_unlocked@plt>
   114c4:	b	11464 <__assert_fail@plt+0x2d8>
   114c8:	ldr	r3, [r5]
   114cc:	mov	r2, #2
   114d0:	mov	r1, #1
   114d4:	mov	r0, r6
   114d8:	bl	10f58 <fwrite_unlocked@plt>
   114dc:	b	11464 <__assert_fail@plt+0x2d8>
   114e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   114e4:	strd	r6, [sp, #8]
   114e8:	str	r8, [sp, #16]
   114ec:	str	lr, [sp, #20]
   114f0:	mov	r6, r0
   114f4:	mov	r7, r2
   114f8:	mov	r5, r3
   114fc:	movw	r1, #51176	; 0xc7e8
   11500:	movt	r1, #1
   11504:	bl	10eec <strcmp@plt>
   11508:	mov	r3, #0
   1150c:	strb	r3, [r5]
   11510:	cmp	r0, r3
   11514:	bne	11590 <__assert_fail@plt+0x404>
   11518:	movw	r4, #57744	; 0xe190
   1151c:	movt	r4, #2
   11520:	mov	r3, #1
   11524:	strb	r3, [r4, #4]
   11528:	movw	r3, #57728	; 0xe180
   1152c:	movt	r3, #2
   11530:	ldr	r5, [r3]
   11534:	mov	r1, #2
   11538:	mov	r0, r5
   1153c:	bl	185c8 <__assert_fail@plt+0x743c>
   11540:	ldr	r3, [r4, #8]
   11544:	ldr	r2, [r4, #12]
   11548:	lsr	r3, r3, #3
   1154c:	orr	r2, r3, r2, lsl #29
   11550:	mov	r1, r7
   11554:	mov	r0, r5
   11558:	bl	18358 <__assert_fail@plt+0x71cc>
   1155c:	subs	r4, r0, #0
   11560:	bne	116c0 <__assert_fail@plt+0x534>
   11564:	mov	r0, r5
   11568:	bl	11138 <clearerr_unlocked@plt>
   1156c:	cmp	r4, #0
   11570:	moveq	r4, #1
   11574:	bne	11678 <__assert_fail@plt+0x4ec>
   11578:	mov	r0, r4
   1157c:	ldrd	r4, [sp]
   11580:	ldrd	r6, [sp, #8]
   11584:	ldr	r8, [sp, #16]
   11588:	add	sp, sp, #20
   1158c:	pop	{pc}		; (ldr pc, [sp], #4)
   11590:	movw	r1, #51180	; 0xc7ec
   11594:	movt	r1, #1
   11598:	mov	r0, r6
   1159c:	bl	18734 <__assert_fail@plt+0x75a8>
   115a0:	subs	r8, r0, #0
   115a4:	beq	11614 <__assert_fail@plt+0x488>
   115a8:	mov	r1, #2
   115ac:	mov	r0, r8
   115b0:	bl	185c8 <__assert_fail@plt+0x743c>
   115b4:	movw	r3, #57744	; 0xe190
   115b8:	movt	r3, #2
   115bc:	ldr	r1, [r3, #8]
   115c0:	ldr	r2, [r3, #12]
   115c4:	lsr	r1, r1, #3
   115c8:	orr	r2, r1, r2, lsl #29
   115cc:	mov	r1, r7
   115d0:	mov	r0, r8
   115d4:	bl	18358 <__assert_fail@plt+0x71cc>
   115d8:	cmp	r0, #0
   115dc:	beq	116a8 <__assert_fail@plt+0x51c>
   115e0:	bl	11090 <__errno_location@plt>
   115e4:	ldr	r4, [r0]
   115e8:	mov	r0, r8
   115ec:	bl	18608 <__assert_fail@plt+0x747c>
   115f0:	adds	r0, r0, #0
   115f4:	movne	r0, #1
   115f8:	cmp	r4, #0
   115fc:	movne	r0, #0
   11600:	cmp	r0, #0
   11604:	beq	1156c <__assert_fail@plt+0x3e0>
   11608:	bl	11090 <__errno_location@plt>
   1160c:	ldr	r4, [r0]
   11610:	b	1156c <__assert_fail@plt+0x3e0>
   11614:	movw	r3, #57744	; 0xe190
   11618:	movt	r3, #2
   1161c:	ldrb	r4, [r3, #16]
   11620:	cmp	r4, #0
   11624:	beq	11640 <__assert_fail@plt+0x4b4>
   11628:	bl	11090 <__errno_location@plt>
   1162c:	ldr	r3, [r0]
   11630:	cmp	r3, #2
   11634:	moveq	r3, #1
   11638:	strbeq	r3, [r5]
   1163c:	beq	11578 <__assert_fail@plt+0x3ec>
   11640:	bl	11090 <__errno_location@plt>
   11644:	ldr	r4, [r0]
   11648:	mov	r2, r6
   1164c:	mov	r1, #3
   11650:	mov	r0, #0
   11654:	bl	1aa34 <__assert_fail@plt+0x98a8>
   11658:	mov	r3, r0
   1165c:	movw	r2, #53188	; 0xcfc4
   11660:	movt	r2, #1
   11664:	mov	r1, r4
   11668:	mov	r0, #0
   1166c:	bl	11000 <error@plt>
   11670:	mov	r4, #0
   11674:	b	11578 <__assert_fail@plt+0x3ec>
   11678:	mov	r2, r6
   1167c:	mov	r1, #3
   11680:	mov	r0, #0
   11684:	bl	1aa34 <__assert_fail@plt+0x98a8>
   11688:	mov	r3, r0
   1168c:	movw	r2, #53188	; 0xcfc4
   11690:	movt	r2, #1
   11694:	mov	r1, r4
   11698:	mov	r0, #0
   1169c:	bl	11000 <error@plt>
   116a0:	mov	r4, #0
   116a4:	b	11578 <__assert_fail@plt+0x3ec>
   116a8:	mov	r0, r8
   116ac:	bl	18608 <__assert_fail@plt+0x747c>
   116b0:	cmp	r0, #0
   116b4:	moveq	r4, #1
   116b8:	beq	11578 <__assert_fail@plt+0x3ec>
   116bc:	b	11608 <__assert_fail@plt+0x47c>
   116c0:	bl	11090 <__errno_location@plt>
   116c4:	ldr	r4, [r0]
   116c8:	b	11564 <__assert_fail@plt+0x3d8>
   116cc:	push	{lr}		; (str lr, [sp, #-4]!)
   116d0:	sub	sp, sp, #60	; 0x3c
   116d4:	subs	r5, r0, #0
   116d8:	beq	11720 <__assert_fail@plt+0x594>
   116dc:	movw	r3, #57720	; 0xe178
   116e0:	movt	r3, #2
   116e4:	ldr	r4, [r3]
   116e8:	mov	r2, #5
   116ec:	movw	r1, #51192	; 0xc7f8
   116f0:	movt	r1, #1
   116f4:	mov	r0, #0
   116f8:	bl	10f7c <dcgettext@plt>
   116fc:	movw	r3, #57780	; 0xe1b4
   11700:	movt	r3, #2
   11704:	ldr	r3, [r3]
   11708:	mov	r2, r0
   1170c:	mov	r1, #1
   11710:	mov	r0, r4
   11714:	bl	110d8 <__fprintf_chk@plt>
   11718:	mov	r0, r5
   1171c:	bl	11060 <exit@plt>
   11720:	mov	r2, #5
   11724:	movw	r1, #51232	; 0xc820
   11728:	movt	r1, #1
   1172c:	mov	r0, #0
   11730:	bl	10f7c <dcgettext@plt>
   11734:	movw	r3, #57780	; 0xe1b4
   11738:	movt	r3, #2
   1173c:	ldr	r2, [r3]
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	bl	110c0 <__printf_chk@plt>
   1174c:	mov	r2, #5
   11750:	movw	r1, #51268	; 0xc844
   11754:	movt	r1, #1
   11758:	mov	r0, #0
   1175c:	bl	10f7c <dcgettext@plt>
   11760:	mov	r3, #512	; 0x200
   11764:	movw	r2, #51308	; 0xc86c
   11768:	movt	r2, #1
   1176c:	mov	r1, r0
   11770:	mov	r0, #1
   11774:	bl	110c0 <__printf_chk@plt>
   11778:	mov	r2, #5
   1177c:	movw	r1, #51316	; 0xc874
   11780:	movt	r1, #1
   11784:	mov	r0, #0
   11788:	bl	10f7c <dcgettext@plt>
   1178c:	movw	r4, #57732	; 0xe184
   11790:	movt	r4, #2
   11794:	ldr	r1, [r4]
   11798:	bl	10ec8 <fputs_unlocked@plt>
   1179c:	mov	r2, #5
   117a0:	movw	r1, #51372	; 0xc8ac
   117a4:	movt	r1, #1
   117a8:	mov	r0, #0
   117ac:	bl	10f7c <dcgettext@plt>
   117b0:	ldr	r1, [r4]
   117b4:	bl	10ec8 <fputs_unlocked@plt>
   117b8:	mov	r2, #5
   117bc:	movw	r1, #51448	; 0xc8f8
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	bl	10f7c <dcgettext@plt>
   117cc:	ldr	r1, [r4]
   117d0:	bl	10ec8 <fputs_unlocked@plt>
   117d4:	mov	r2, #5
   117d8:	movw	r1, #51496	; 0xc928
   117dc:	movt	r1, #1
   117e0:	mov	r0, #0
   117e4:	bl	10f7c <dcgettext@plt>
   117e8:	ldr	r1, [r4]
   117ec:	bl	10ec8 <fputs_unlocked@plt>
   117f0:	mov	r2, #5
   117f4:	movw	r1, #51568	; 0xc970
   117f8:	movt	r1, #1
   117fc:	mov	r0, #0
   11800:	bl	10f7c <dcgettext@plt>
   11804:	ldr	r1, [r4]
   11808:	bl	10ec8 <fputs_unlocked@plt>
   1180c:	mov	r2, #5
   11810:	movw	r1, #51720	; 0xca08
   11814:	movt	r1, #1
   11818:	mov	r0, #0
   1181c:	bl	10f7c <dcgettext@plt>
   11820:	ldr	r1, [r4]
   11824:	bl	10ec8 <fputs_unlocked@plt>
   11828:	mov	r2, #5
   1182c:	movw	r1, #51776	; 0xca40
   11830:	movt	r1, #1
   11834:	mov	r0, #0
   11838:	bl	10f7c <dcgettext@plt>
   1183c:	ldr	r1, [r4]
   11840:	bl	10ec8 <fputs_unlocked@plt>
   11844:	mov	r2, #5
   11848:	movw	r1, #51832	; 0xca78
   1184c:	movt	r1, #1
   11850:	mov	r0, #0
   11854:	bl	10f7c <dcgettext@plt>
   11858:	ldr	r1, [r4]
   1185c:	bl	10ec8 <fputs_unlocked@plt>
   11860:	mov	r2, #5
   11864:	movw	r1, #51960	; 0xcaf8
   11868:	movt	r1, #1
   1186c:	mov	r0, #0
   11870:	bl	10f7c <dcgettext@plt>
   11874:	ldr	r1, [r4]
   11878:	bl	10ec8 <fputs_unlocked@plt>
   1187c:	mov	r2, #5
   11880:	movw	r1, #52400	; 0xccb0
   11884:	movt	r1, #1
   11888:	mov	r0, #0
   1188c:	bl	10f7c <dcgettext@plt>
   11890:	ldr	r1, [r4]
   11894:	bl	10ec8 <fputs_unlocked@plt>
   11898:	mov	r2, #5
   1189c:	movw	r1, #52448	; 0xcce0
   118a0:	movt	r1, #1
   118a4:	mov	r0, #0
   118a8:	bl	10f7c <dcgettext@plt>
   118ac:	ldr	r1, [r4]
   118b0:	bl	10ec8 <fputs_unlocked@plt>
   118b4:	mov	r2, #5
   118b8:	movw	r1, #52504	; 0xcd18
   118bc:	movt	r1, #1
   118c0:	mov	r0, #0
   118c4:	bl	10f7c <dcgettext@plt>
   118c8:	movw	r2, #52548	; 0xcd44
   118cc:	movt	r2, #1
   118d0:	mov	r1, r0
   118d4:	mov	r0, #1
   118d8:	bl	110c0 <__printf_chk@plt>
   118dc:	mov	r2, #5
   118e0:	movw	r1, #52560	; 0xcd50
   118e4:	movt	r1, #1
   118e8:	mov	r0, #0
   118ec:	bl	10f7c <dcgettext@plt>
   118f0:	ldr	r1, [r4]
   118f4:	bl	10ec8 <fputs_unlocked@plt>
   118f8:	movw	r0, #50868	; 0xc6b4
   118fc:	movt	r0, #1
   11900:	ldr	r1, [r0]
   11904:	ldr	r3, [r0, #4]
   11908:	str	r1, [sp]
   1190c:	str	r3, [sp, #4]
   11910:	ldrd	r2, [r0, #8]
   11914:	strd	r2, [sp, #8]
   11918:	ldrd	r2, [r0, #16]
   1191c:	strd	r2, [sp, #16]
   11920:	ldrd	r2, [r0, #24]
   11924:	strd	r2, [sp, #24]
   11928:	ldrd	r2, [r0, #32]
   1192c:	strd	r2, [sp, #32]
   11930:	ldrd	r2, [r0, #40]	; 0x28
   11934:	strd	r2, [sp, #40]	; 0x28
   11938:	ldrd	r2, [r0, #48]	; 0x30
   1193c:	strd	r2, [sp, #48]	; 0x30
   11940:	cmp	r1, #0
   11944:	moveq	r4, sp
   11948:	beq	11974 <__assert_fail@plt+0x7e8>
   1194c:	mov	r4, sp
   11950:	movw	r6, #51184	; 0xc7f0
   11954:	movt	r6, #1
   11958:	mov	r0, r6
   1195c:	bl	10eec <strcmp@plt>
   11960:	cmp	r0, #0
   11964:	beq	11974 <__assert_fail@plt+0x7e8>
   11968:	ldr	r1, [r4, #8]!
   1196c:	cmp	r1, #0
   11970:	bne	11958 <__assert_fail@plt+0x7cc>
   11974:	ldr	r4, [r4, #4]
   11978:	cmp	r4, #0
   1197c:	beq	11ad8 <__assert_fail@plt+0x94c>
   11980:	mov	r2, #5
   11984:	movw	r1, #52896	; 0xcea0
   11988:	movt	r1, #1
   1198c:	mov	r0, #0
   11990:	bl	10f7c <dcgettext@plt>
   11994:	movw	r3, #52920	; 0xceb8
   11998:	movt	r3, #1
   1199c:	movw	r2, #52960	; 0xcee0
   119a0:	movt	r2, #1
   119a4:	mov	r1, r0
   119a8:	mov	r0, #1
   119ac:	bl	110c0 <__printf_chk@plt>
   119b0:	mov	r1, #0
   119b4:	mov	r0, #5
   119b8:	bl	11114 <setlocale@plt>
   119bc:	cmp	r0, #0
   119c0:	beq	119dc <__assert_fail@plt+0x850>
   119c4:	mov	r2, #3
   119c8:	movw	r1, #52976	; 0xcef0
   119cc:	movt	r1, #1
   119d0:	bl	1115c <strncmp@plt>
   119d4:	cmp	r0, #0
   119d8:	bne	11a58 <__assert_fail@plt+0x8cc>
   119dc:	mov	r2, #5
   119e0:	movw	r1, #53052	; 0xcf3c
   119e4:	movt	r1, #1
   119e8:	mov	r0, #0
   119ec:	bl	10f7c <dcgettext@plt>
   119f0:	movw	r6, #51184	; 0xc7f0
   119f4:	movt	r6, #1
   119f8:	mov	r3, r6
   119fc:	movw	r2, #52920	; 0xceb8
   11a00:	movt	r2, #1
   11a04:	mov	r1, r0
   11a08:	mov	r0, #1
   11a0c:	bl	110c0 <__printf_chk@plt>
   11a10:	mov	r2, #5
   11a14:	movw	r1, #53080	; 0xcf58
   11a18:	movt	r1, #1
   11a1c:	mov	r0, #0
   11a20:	bl	10f7c <dcgettext@plt>
   11a24:	mov	r1, r0
   11a28:	movw	r2, #54404	; 0xd484
   11a2c:	movt	r2, #1
   11a30:	movw	r3, #51828	; 0xca74
   11a34:	movt	r3, #1
   11a38:	cmp	r4, r6
   11a3c:	moveq	r3, r2
   11a40:	mov	r2, r4
   11a44:	mov	r0, #1
   11a48:	bl	110c0 <__printf_chk@plt>
   11a4c:	b	11718 <__assert_fail@plt+0x58c>
   11a50:	movw	r4, #51184	; 0xc7f0
   11a54:	movt	r4, #1
   11a58:	mov	r2, #5
   11a5c:	movw	r1, #52980	; 0xcef4
   11a60:	movt	r1, #1
   11a64:	mov	r0, #0
   11a68:	bl	10f7c <dcgettext@plt>
   11a6c:	movw	r3, #57732	; 0xe184
   11a70:	movt	r3, #2
   11a74:	ldr	r1, [r3]
   11a78:	bl	10ec8 <fputs_unlocked@plt>
   11a7c:	b	119dc <__assert_fail@plt+0x850>
   11a80:	mov	r2, #5
   11a84:	movw	r1, #53052	; 0xcf3c
   11a88:	movt	r1, #1
   11a8c:	mov	r0, #0
   11a90:	bl	10f7c <dcgettext@plt>
   11a94:	movw	r4, #51184	; 0xc7f0
   11a98:	movt	r4, #1
   11a9c:	mov	r3, r4
   11aa0:	movw	r2, #52920	; 0xceb8
   11aa4:	movt	r2, #1
   11aa8:	mov	r1, r0
   11aac:	mov	r0, #1
   11ab0:	bl	110c0 <__printf_chk@plt>
   11ab4:	mov	r2, #5
   11ab8:	movw	r1, #53080	; 0xcf58
   11abc:	movt	r1, #1
   11ac0:	mov	r0, #0
   11ac4:	bl	10f7c <dcgettext@plt>
   11ac8:	mov	r1, r0
   11acc:	movw	r3, #54404	; 0xd484
   11ad0:	movt	r3, #1
   11ad4:	b	11a40 <__assert_fail@plt+0x8b4>
   11ad8:	mov	r2, #5
   11adc:	movw	r1, #52896	; 0xcea0
   11ae0:	movt	r1, #1
   11ae4:	mov	r0, #0
   11ae8:	bl	10f7c <dcgettext@plt>
   11aec:	movw	r3, #52920	; 0xceb8
   11af0:	movt	r3, #1
   11af4:	movw	r2, #52960	; 0xcee0
   11af8:	movt	r2, #1
   11afc:	mov	r1, r0
   11b00:	mov	r0, #1
   11b04:	bl	110c0 <__printf_chk@plt>
   11b08:	mov	r1, #0
   11b0c:	mov	r0, #5
   11b10:	bl	11114 <setlocale@plt>
   11b14:	cmp	r0, #0
   11b18:	beq	11a80 <__assert_fail@plt+0x8f4>
   11b1c:	mov	r2, #3
   11b20:	movw	r1, #52976	; 0xcef0
   11b24:	movt	r1, #1
   11b28:	bl	1115c <strncmp@plt>
   11b2c:	cmp	r0, #0
   11b30:	bne	11a50 <__assert_fail@plt+0x8c4>
   11b34:	mov	r2, #5
   11b38:	movw	r1, #53052	; 0xcf3c
   11b3c:	movt	r1, #1
   11b40:	mov	r0, #0
   11b44:	bl	10f7c <dcgettext@plt>
   11b48:	movw	r4, #51184	; 0xc7f0
   11b4c:	movt	r4, #1
   11b50:	mov	r3, r4
   11b54:	movw	r2, #52920	; 0xceb8
   11b58:	movt	r2, #1
   11b5c:	mov	r1, r0
   11b60:	mov	r0, #1
   11b64:	bl	110c0 <__printf_chk@plt>
   11b68:	mov	r2, #5
   11b6c:	movw	r1, #53080	; 0xcf58
   11b70:	movt	r1, #1
   11b74:	mov	r0, #0
   11b78:	bl	10f7c <dcgettext@plt>
   11b7c:	mov	r1, r0
   11b80:	movw	r3, #54404	; 0xd484
   11b84:	movt	r3, #1
   11b88:	b	11a40 <__assert_fail@plt+0x8b4>
   11b8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11b90:	strd	r6, [sp, #8]
   11b94:	strd	r8, [sp, #16]
   11b98:	strd	sl, [sp, #24]
   11b9c:	str	lr, [sp, #32]
   11ba0:	sub	sp, sp, #308	; 0x134
   11ba4:	mov	r8, r0
   11ba8:	mov	r6, r1
   11bac:	ldr	r0, [r1]
   11bb0:	bl	18904 <__assert_fail@plt+0x7778>
   11bb4:	movw	r9, #51828	; 0xca74
   11bb8:	movt	r9, #1
   11bbc:	mov	r1, r9
   11bc0:	mov	r0, #6
   11bc4:	bl	11114 <setlocale@plt>
   11bc8:	movw	r4, #52964	; 0xcee4
   11bcc:	movt	r4, #1
   11bd0:	movw	r1, #53132	; 0xcf8c
   11bd4:	movt	r1, #1
   11bd8:	mov	r0, r4
   11bdc:	bl	11150 <bindtextdomain@plt>
   11be0:	mov	r0, r4
   11be4:	bl	10f94 <textdomain@plt>
   11be8:	movw	r0, #33928	; 0x8488
   11bec:	movt	r0, #1
   11bf0:	bl	1c690 <__assert_fail@plt+0xb504>
   11bf4:	movw	r0, #57732	; 0xe184
   11bf8:	movt	r0, #2
   11bfc:	mov	r3, #0
   11c00:	mov	r2, #1
   11c04:	mov	r1, r3
   11c08:	ldr	r0, [r0]
   11c0c:	bl	110a8 <setvbuf@plt>
   11c10:	mov	r3, #0
   11c14:	str	r3, [sp, #40]	; 0x28
   11c18:	mvn	r4, #0
   11c1c:	str	r3, [sp, #28]
   11c20:	ldr	fp, [pc, #4008]	; 12bd0 <__assert_fail@plt+0x1a44>
   11c24:	movw	r7, #53256	; 0xd008
   11c28:	movt	r7, #1
   11c2c:	movw	r5, #57744	; 0xe190
   11c30:	movt	r5, #2
   11c34:	b	11d00 <__assert_fail@plt+0xb74>
   11c38:	cmp	r0, #98	; 0x62
   11c3c:	beq	11e8c <__assert_fail@plt+0xd00>
   11c40:	ble	11c64 <__assert_fail@plt+0xad8>
   11c44:	cmp	r0, #108	; 0x6c
   11c48:	beq	11d68 <__assert_fail@plt+0xbdc>
   11c4c:	cmp	r0, #116	; 0x74
   11c50:	beq	11e94 <__assert_fail@plt+0xd08>
   11c54:	cmp	r0, #99	; 0x63
   11c58:	beq	11e9c <__assert_fail@plt+0xd10>
   11c5c:	mov	r0, #1
   11c60:	bl	116cc <__assert_fail@plt+0x540>
   11c64:	cmn	r0, #3
   11c68:	bne	11cc0 <__assert_fail@plt+0xb34>
   11c6c:	movw	r3, #57628	; 0xe11c
   11c70:	movt	r3, #2
   11c74:	movw	r0, #57732	; 0xe184
   11c78:	movt	r0, #2
   11c7c:	mov	r4, #0
   11c80:	str	r4, [sp, #8]
   11c84:	movw	r2, #53224	; 0xcfe8
   11c88:	movt	r2, #1
   11c8c:	str	r2, [sp, #4]
   11c90:	movw	r2, #53240	; 0xcff8
   11c94:	movt	r2, #1
   11c98:	str	r2, [sp]
   11c9c:	ldr	r3, [r3]
   11ca0:	movw	r2, #52960	; 0xcee0
   11ca4:	movt	r2, #1
   11ca8:	movw	r1, #51184	; 0xc7f0
   11cac:	movt	r1, #1
   11cb0:	ldr	r0, [r0]
   11cb4:	bl	1b11c <__assert_fail@plt+0x9f90>
   11cb8:	mov	r0, r4
   11cbc:	bl	11060 <exit@plt>
   11cc0:	cmn	r0, #2
   11cc4:	bne	11c5c <__assert_fail@plt+0xad0>
   11cc8:	mov	r0, #0
   11ccc:	bl	116cc <__assert_fail@plt+0x540>
   11cd0:	cmp	r0, #122	; 0x7a
   11cd4:	beq	11e78 <__assert_fail@plt+0xcec>
   11cd8:	cmp	r0, #256	; 0x100
   11cdc:	bne	11c5c <__assert_fail@plt+0xad0>
   11ce0:	mov	r3, #1
   11ce4:	strb	r3, [r5, #16]
   11ce8:	b	11d00 <__assert_fail@plt+0xb74>
   11cec:	cmp	r0, #260	; 0x104
   11cf0:	bne	11c5c <__assert_fail@plt+0xad0>
   11cf4:	mov	r3, #1
   11cf8:	str	r3, [sp, #40]	; 0x28
   11cfc:	mov	r4, r3
   11d00:	mov	r3, #0
   11d04:	str	r3, [sp]
   11d08:	mov	r3, fp
   11d0c:	mov	r2, r7
   11d10:	mov	r1, r6
   11d14:	mov	r0, r8
   11d18:	bl	11048 <getopt_long@plt>
   11d1c:	cmn	r0, #1
   11d20:	beq	11ea8 <__assert_fail@plt+0xd1c>
   11d24:	cmp	r0, #119	; 0x77
   11d28:	beq	11e54 <__assert_fail@plt+0xcc8>
   11d2c:	ble	11c38 <__assert_fail@plt+0xaac>
   11d30:	movw	r3, #257	; 0x101
   11d34:	cmp	r0, r3
   11d38:	beq	11e3c <__assert_fail@plt+0xcb0>
   11d3c:	ble	11cd0 <__assert_fail@plt+0xb44>
   11d40:	movw	r3, #259	; 0x103
   11d44:	cmp	r0, r3
   11d48:	beq	11e6c <__assert_fail@plt+0xce0>
   11d4c:	bge	11cec <__assert_fail@plt+0xb60>
   11d50:	mov	r3, #0
   11d54:	strb	r3, [r5, #17]
   11d58:	strb	r3, [r5, #18]
   11d5c:	mov	r3, #1
   11d60:	strb	r3, [r5, #19]
   11d64:	b	11d00 <__assert_fail@plt+0xb74>
   11d68:	movw	r9, #57736	; 0xe188
   11d6c:	movt	r9, #2
   11d70:	ldr	r3, [r9]
   11d74:	str	r3, [sp, #44]	; 0x2c
   11d78:	mov	r2, #5
   11d7c:	movw	r1, #53156	; 0xcfa4
   11d80:	movt	r1, #1
   11d84:	mov	r0, #0
   11d88:	bl	10f7c <dcgettext@plt>
   11d8c:	mov	sl, #0
   11d90:	str	sl, [sp, #16]
   11d94:	str	r0, [sp, #12]
   11d98:	movw	r3, #51828	; 0xca74
   11d9c:	movt	r3, #1
   11da0:	str	r3, [sp, #8]
   11da4:	mvn	r2, #0
   11da8:	mvn	r3, #0
   11dac:	strd	r2, [sp]
   11db0:	mov	r2, #0
   11db4:	mov	r3, #0
   11db8:	ldr	r0, [sp, #44]	; 0x2c
   11dbc:	bl	1b7f0 <__assert_fail@plt+0xa664>
   11dc0:	str	r0, [r5, #8]
   11dc4:	str	r1, [r5, #12]
   11dc8:	ldr	r9, [r9]
   11dcc:	and	r3, r0, #7
   11dd0:	str	r3, [sp, #32]
   11dd4:	str	sl, [sp, #36]	; 0x24
   11dd8:	ldrd	r2, [sp, #32]
   11ddc:	orrs	r3, r2, r3
   11de0:	beq	11d00 <__assert_fail@plt+0xb74>
   11de4:	mov	r2, #5
   11de8:	movw	r1, #53172	; 0xcfb4
   11dec:	movt	r1, #1
   11df0:	mov	r0, sl
   11df4:	bl	10f7c <dcgettext@plt>
   11df8:	mov	r4, r0
   11dfc:	mov	r0, r9
   11e00:	bl	1ac00 <__assert_fail@plt+0x9a74>
   11e04:	mov	r3, r0
   11e08:	mov	r2, r4
   11e0c:	mov	r1, sl
   11e10:	mov	r0, sl
   11e14:	bl	11000 <error@plt>
   11e18:	mov	r2, #5
   11e1c:	movw	r1, #53192	; 0xcfc8
   11e20:	movt	r1, #1
   11e24:	mov	r0, sl
   11e28:	bl	10f7c <dcgettext@plt>
   11e2c:	mov	r2, r0
   11e30:	mov	r1, sl
   11e34:	mov	r0, #1
   11e38:	bl	11000 <error@plt>
   11e3c:	mov	r3, #1
   11e40:	strb	r3, [r5, #17]
   11e44:	mov	r3, #0
   11e48:	strb	r3, [r5, #18]
   11e4c:	strb	r3, [r5, #19]
   11e50:	b	11d00 <__assert_fail@plt+0xb74>
   11e54:	mov	r3, #0
   11e58:	strb	r3, [r5, #17]
   11e5c:	mov	r2, #1
   11e60:	strb	r2, [r5, #18]
   11e64:	strb	r3, [r5, #19]
   11e68:	b	11d00 <__assert_fail@plt+0xb74>
   11e6c:	mov	r3, #1
   11e70:	strb	r3, [r5, #20]
   11e74:	b	11d00 <__assert_fail@plt+0xb74>
   11e78:	movw	r3, #57616	; 0xe110
   11e7c:	movt	r3, #2
   11e80:	mov	r2, #0
   11e84:	strb	r2, [r3]
   11e88:	b	11d00 <__assert_fail@plt+0xb74>
   11e8c:	mov	r4, #1
   11e90:	b	11d00 <__assert_fail@plt+0xb74>
   11e94:	mov	r4, #0
   11e98:	b	11d00 <__assert_fail@plt+0xb74>
   11e9c:	mov	r3, #1
   11ea0:	str	r3, [sp, #28]
   11ea4:	b	11d00 <__assert_fail@plt+0xb74>
   11ea8:	movw	r3, #57744	; 0xe190
   11eac:	movt	r3, #2
   11eb0:	mov	r2, #3
   11eb4:	str	r2, [r3, #24]
   11eb8:	ldrd	r2, [r3, #8]
   11ebc:	cmp	r3, #0
   11ec0:	cmpeq	r2, #512	; 0x200
   11ec4:	bhi	12048 <__assert_fail@plt+0xebc>
   11ec8:	orrs	r3, r2, r3
   11ecc:	bne	11ee4 <__assert_fail@plt+0xd58>
   11ed0:	movw	r3, #57744	; 0xe190
   11ed4:	movt	r3, #2
   11ed8:	mov	r0, #512	; 0x200
   11edc:	mov	r1, #0
   11ee0:	strd	r0, [r3, #8]
   11ee4:	movw	r3, #57744	; 0xe190
   11ee8:	movt	r3, #2
   11eec:	ldr	r2, [r3, #8]
   11ef0:	ldr	r1, [r3, #12]
   11ef4:	lsr	r2, r2, #2
   11ef8:	orr	r2, r2, r1, lsl #30
   11efc:	str	r2, [r3]
   11f00:	ldr	r3, [sp, #40]	; 0x28
   11f04:	cmp	r4, #0
   11f08:	movne	r3, #0
   11f0c:	cmp	r3, #0
   11f10:	bne	120bc <__assert_fail@plt+0xf30>
   11f14:	movw	r3, #57616	; 0xe110
   11f18:	movt	r3, #2
   11f1c:	ldrb	r3, [r3]
   11f20:	ldr	r2, [sp, #28]
   11f24:	cmp	r3, #10
   11f28:	moveq	r2, #0
   11f2c:	andne	r2, r2, #1
   11f30:	cmp	r2, #0
   11f34:	bne	120e8 <__assert_fail@plt+0xf5c>
   11f38:	ldr	r3, [sp, #28]
   11f3c:	ldr	r2, [sp, #40]	; 0x28
   11f40:	tst	r3, r2
   11f44:	bne	12114 <__assert_fail@plt+0xf88>
   11f48:	ldr	r3, [sp, #28]
   11f4c:	cmp	r4, #0
   11f50:	movlt	r3, #0
   11f54:	andge	r3, r3, #1
   11f58:	cmp	r3, #0
   11f5c:	bne	12140 <__assert_fail@plt+0xfb4>
   11f60:	movw	r3, #57744	; 0xe190
   11f64:	movt	r3, #2
   11f68:	ldrb	r3, [r3, #16]
   11f6c:	eor	r3, r3, #1
   11f70:	ldr	r2, [sp, #28]
   11f74:	orrs	r3, r2, r3
   11f78:	beq	1216c <__assert_fail@plt+0xfe0>
   11f7c:	movw	r3, #57744	; 0xe190
   11f80:	movt	r3, #2
   11f84:	ldrb	r3, [r3, #17]
   11f88:	eor	r3, r3, #1
   11f8c:	ldr	r2, [sp, #28]
   11f90:	orrs	r3, r2, r3
   11f94:	beq	12198 <__assert_fail@plt+0x100c>
   11f98:	movw	r3, #57744	; 0xe190
   11f9c:	movt	r3, #2
   11fa0:	ldrb	r3, [r3, #18]
   11fa4:	eor	r3, r3, #1
   11fa8:	ldr	r2, [sp, #28]
   11fac:	orrs	r3, r2, r3
   11fb0:	beq	121c4 <__assert_fail@plt+0x1038>
   11fb4:	movw	r3, #57744	; 0xe190
   11fb8:	movt	r3, #2
   11fbc:	ldrb	r3, [r3, #19]
   11fc0:	eor	r3, r3, #1
   11fc4:	ldr	r2, [sp, #28]
   11fc8:	orrs	r3, r2, r3
   11fcc:	str	r3, [sp, #84]	; 0x54
   11fd0:	beq	121f0 <__assert_fail@plt+0x1064>
   11fd4:	movw	r2, #57744	; 0xe190
   11fd8:	movt	r2, #2
   11fdc:	ldr	r3, [sp, #28]
   11fe0:	eor	r3, r3, #1
   11fe4:	ldrb	r2, [r2, #20]
   11fe8:	ands	r3, r2, r3
   11fec:	str	r3, [sp, #64]	; 0x40
   11ff0:	bne	1221c <__assert_fail@plt+0x1090>
   11ff4:	bic	r3, r4, r4, asr #31
   11ff8:	str	r3, [sp, #120]	; 0x78
   11ffc:	add	r3, r6, r8, lsl #2
   12000:	str	r3, [sp, #92]	; 0x5c
   12004:	movw	r3, #57712	; 0xe170
   12008:	movt	r3, #2
   1200c:	ldr	r3, [r3]
   12010:	cmp	r3, r8
   12014:	beq	12248 <__assert_fail@plt+0x10bc>
   12018:	movw	r3, #57712	; 0xe170
   1201c:	movt	r3, #2
   12020:	ldr	r3, [r3]
   12024:	add	r6, r6, r3, lsl #2
   12028:	ldr	r3, [sp, #92]	; 0x5c
   1202c:	cmp	r3, r6
   12030:	bls	12e74 <__assert_fail@plt+0x1ce8>
   12034:	str	r6, [sp, #48]	; 0x30
   12038:	movw	r3, #50868	; 0xc6b4
   1203c:	movt	r3, #1
   12040:	str	r3, [sp, #124]	; 0x7c
   12044:	b	12ae8 <__assert_fail@plt+0x195c>
   12048:	mov	r2, #5
   1204c:	movw	r1, #53172	; 0xcfb4
   12050:	movt	r1, #1
   12054:	mov	r0, #0
   12058:	bl	10f7c <dcgettext@plt>
   1205c:	mov	r4, r0
   12060:	mov	r0, r9
   12064:	bl	1ac00 <__assert_fail@plt+0x9a74>
   12068:	mov	r3, r0
   1206c:	mov	r2, r4
   12070:	mov	r1, #0
   12074:	mov	r0, r1
   12078:	bl	11000 <error@plt>
   1207c:	mov	r2, #5
   12080:	movw	r1, #53264	; 0xd010
   12084:	movt	r1, #1
   12088:	mov	r0, #0
   1208c:	bl	10f7c <dcgettext@plt>
   12090:	mov	r4, r0
   12094:	movw	r0, #51308	; 0xc86c
   12098:	movt	r0, #1
   1209c:	bl	1ac00 <__assert_fail@plt+0x9a74>
   120a0:	mov	r3, #512	; 0x200
   120a4:	str	r3, [sp]
   120a8:	mov	r3, r0
   120ac:	mov	r2, r4
   120b0:	mov	r1, #0
   120b4:	mov	r0, #1
   120b8:	bl	11000 <error@plt>
   120bc:	mov	r2, #5
   120c0:	movw	r1, #53304	; 0xd038
   120c4:	movt	r1, #1
   120c8:	mov	r0, #0
   120cc:	bl	10f7c <dcgettext@plt>
   120d0:	mov	r2, r0
   120d4:	mov	r1, #0
   120d8:	mov	r0, r1
   120dc:	bl	11000 <error@plt>
   120e0:	mov	r0, #1
   120e4:	bl	116cc <__assert_fail@plt+0x540>
   120e8:	mov	r2, #5
   120ec:	movw	r1, #53340	; 0xd05c
   120f0:	movt	r1, #1
   120f4:	mov	r0, #0
   120f8:	bl	10f7c <dcgettext@plt>
   120fc:	mov	r2, r0
   12100:	mov	r1, #0
   12104:	mov	r0, r1
   12108:	bl	11000 <error@plt>
   1210c:	mov	r0, #1
   12110:	bl	116cc <__assert_fail@plt+0x540>
   12114:	mov	r2, #5
   12118:	movw	r1, #53400	; 0xd098
   1211c:	movt	r1, #1
   12120:	mov	r0, #0
   12124:	bl	10f7c <dcgettext@plt>
   12128:	mov	r2, r0
   1212c:	mov	r1, #0
   12130:	mov	r0, r1
   12134:	bl	11000 <error@plt>
   12138:	mov	r0, #1
   1213c:	bl	116cc <__assert_fail@plt+0x540>
   12140:	mov	r2, #5
   12144:	movw	r1, #53460	; 0xd0d4
   12148:	movt	r1, #1
   1214c:	mov	r0, #0
   12150:	bl	10f7c <dcgettext@plt>
   12154:	mov	r2, r0
   12158:	mov	r1, #0
   1215c:	mov	r0, r1
   12160:	bl	11000 <error@plt>
   12164:	mov	r0, #1
   12168:	bl	116cc <__assert_fail@plt+0x540>
   1216c:	mov	r2, #5
   12170:	movw	r1, #53536	; 0xd120
   12174:	movt	r1, #1
   12178:	mov	r0, #0
   1217c:	bl	10f7c <dcgettext@plt>
   12180:	mov	r2, r0
   12184:	mov	r1, #0
   12188:	mov	r0, r1
   1218c:	bl	11000 <error@plt>
   12190:	mov	r0, #1
   12194:	bl	116cc <__assert_fail@plt+0x540>
   12198:	mov	r2, #5
   1219c:	movw	r1, #53608	; 0xd168
   121a0:	movt	r1, #1
   121a4:	mov	r0, #0
   121a8:	bl	10f7c <dcgettext@plt>
   121ac:	mov	r2, r0
   121b0:	mov	r1, #0
   121b4:	mov	r0, r1
   121b8:	bl	11000 <error@plt>
   121bc:	mov	r0, #1
   121c0:	bl	116cc <__assert_fail@plt+0x540>
   121c4:	mov	r2, #5
   121c8:	movw	r1, #53672	; 0xd1a8
   121cc:	movt	r1, #1
   121d0:	mov	r0, #0
   121d4:	bl	10f7c <dcgettext@plt>
   121d8:	mov	r2, r0
   121dc:	mov	r1, #0
   121e0:	mov	r0, r1
   121e4:	bl	11000 <error@plt>
   121e8:	mov	r0, #1
   121ec:	bl	116cc <__assert_fail@plt+0x540>
   121f0:	mov	r2, #5
   121f4:	movw	r1, #53736	; 0xd1e8
   121f8:	movt	r1, #1
   121fc:	mov	r0, #0
   12200:	bl	10f7c <dcgettext@plt>
   12204:	mov	r2, r0
   12208:	mov	r1, #0
   1220c:	mov	r0, r1
   12210:	bl	11000 <error@plt>
   12214:	mov	r0, #1
   12218:	bl	116cc <__assert_fail@plt+0x540>
   1221c:	mov	r2, #5
   12220:	movw	r1, #53800	; 0xd228
   12224:	movt	r1, #1
   12228:	mov	r0, #0
   1222c:	bl	10f7c <dcgettext@plt>
   12230:	mov	r2, r0
   12234:	mov	r1, #0
   12238:	mov	r0, r1
   1223c:	bl	11000 <error@plt>
   12240:	mov	r0, #1
   12244:	bl	116cc <__assert_fail@plt+0x540>
   12248:	movw	r3, #51176	; 0xc7e8
   1224c:	movt	r3, #1
   12250:	str	r3, [r6, r8, lsl #2]
   12254:	ldr	r3, [sp, #92]	; 0x5c
   12258:	add	r3, r3, #4
   1225c:	str	r3, [sp, #92]	; 0x5c
   12260:	b	12018 <__assert_fail@plt+0xe8c>
   12264:	movw	r1, #51180	; 0xc7ec
   12268:	movt	r1, #1
   1226c:	ldr	r0, [sp, #52]	; 0x34
   12270:	bl	18734 <__assert_fail@plt+0x75a8>
   12274:	subs	r9, r0, #0
   12278:	bne	12b4c <__assert_fail@plt+0x19c0>
   1227c:	bl	11090 <__errno_location@plt>
   12280:	ldr	r4, [r0]
   12284:	ldr	r2, [sp, #52]	; 0x34
   12288:	mov	r1, #3
   1228c:	mov	r0, #0
   12290:	bl	1aa34 <__assert_fail@plt+0x98a8>
   12294:	mov	r3, r0
   12298:	movw	r2, #53188	; 0xcfc4
   1229c:	movt	r2, #1
   122a0:	mov	r1, r4
   122a4:	mov	r0, #0
   122a8:	bl	11000 <error@plt>
   122ac:	ldr	r3, [sp, #64]	; 0x40
   122b0:	b	12acc <__assert_fail@plt+0x1940>
   122b4:	mov	r2, #5
   122b8:	movw	r1, #53880	; 0xd278
   122bc:	movt	r1, #1
   122c0:	mov	r0, #0
   122c4:	bl	10f7c <dcgettext@plt>
   122c8:	mov	r4, r0
   122cc:	ldr	r2, [sp, #52]	; 0x34
   122d0:	mov	r1, #3
   122d4:	mov	r0, #0
   122d8:	bl	1aa34 <__assert_fail@plt+0x98a8>
   122dc:	mov	r3, r0
   122e0:	mov	r2, r4
   122e4:	mov	r1, #0
   122e8:	mov	r0, #1
   122ec:	bl	11000 <error@plt>
   122f0:	mov	r6, #0
   122f4:	b	130ec <__assert_fail@plt+0x1f60>
   122f8:	add	r8, r8, #1
   122fc:	mov	r3, #0
   12300:	str	r3, [sp, #148]	; 0x94
   12304:	subs	r4, r4, r8
   12308:	beq	13010 <__assert_fail@plt+0x1e84>
   1230c:	add	r6, r5, r8
   12310:	subs	r4, r4, #1
   12314:	beq	1235c <__assert_fail@plt+0x11d0>
   12318:	add	r3, r6, r4
   1231c:	ldrb	r2, [r6, r4]
   12320:	cmp	r2, #41	; 0x29
   12324:	beq	1233c <__assert_fail@plt+0x11b0>
   12328:	subs	r4, r4, #1
   1232c:	beq	1235c <__assert_fail@plt+0x11d0>
   12330:	ldrb	r2, [r3, #-1]!
   12334:	cmp	r2, #41	; 0x29
   12338:	bne	12328 <__assert_fail@plt+0x119c>
   1233c:	add	r5, r6, r4
   12340:	ldr	r3, [sp, #68]	; 0x44
   12344:	cmp	r3, #0
   12348:	bne	12374 <__assert_fail@plt+0x11e8>
   1234c:	add	r4, r4, #1
   12350:	mov	r3, #0
   12354:	strb	r3, [r5]
   12358:	b	12390 <__assert_fail@plt+0x1204>
   1235c:	ldrb	r3, [r5, r8]
   12360:	cmp	r3, #41	; 0x29
   12364:	bne	13010 <__assert_fail@plt+0x1e84>
   12368:	mov	r5, r6
   1236c:	mov	r4, #0
   12370:	b	12340 <__assert_fail@plt+0x11b4>
   12374:	mov	r1, r4
   12378:	mov	r0, r6
   1237c:	bl	11288 <__assert_fail@plt+0xfc>
   12380:	cmp	r0, #0
   12384:	bne	1234c <__assert_fail@plt+0x11c0>
   12388:	b	13010 <__assert_fail@plt+0x1e84>
   1238c:	add	r4, r4, #1
   12390:	ldrb	r3, [r6, r4]
   12394:	cmp	r3, #9
   12398:	cmpne	r3, #32
   1239c:	beq	1238c <__assert_fail@plt+0x1200>
   123a0:	cmp	r3, #61	; 0x3d
   123a4:	bne	13010 <__assert_fail@plt+0x1e84>
   123a8:	add	r4, r4, #1
   123ac:	add	r3, r6, r4
   123b0:	mov	r7, r3
   123b4:	ldrb	r2, [r3], #1
   123b8:	cmp	r2, #9
   123bc:	cmpne	r2, #32
   123c0:	beq	123b0 <__assert_fail@plt+0x1224>
   123c4:	mov	r0, r7
   123c8:	bl	1136c <__assert_fail@plt+0x1e0>
   123cc:	cmp	r0, #0
   123d0:	beq	13010 <__assert_fail@plt+0x1e84>
   123d4:	ldr	r3, [sp, #80]	; 0x50
   123d8:	cmp	r3, #0
   123dc:	bne	123f8 <__assert_fail@plt+0x126c>
   123e0:	movw	r1, #51176	; 0xc7e8
   123e4:	movt	r1, #1
   123e8:	mov	r0, r6
   123ec:	bl	10eec <strcmp@plt>
   123f0:	cmp	r0, #0
   123f4:	beq	13010 <__assert_fail@plt+0x1e84>
   123f8:	movw	r3, #57744	; 0xe190
   123fc:	movt	r3, #2
   12400:	ldrb	r3, [r3, #17]
   12404:	cmp	r3, #0
   12408:	movne	r0, #0
   1240c:	bne	12424 <__assert_fail@plt+0x1298>
   12410:	mov	r1, #10
   12414:	mov	r0, r6
   12418:	bl	11084 <strchr@plt>
   1241c:	adds	r0, r0, #0
   12420:	movne	r0, #1
   12424:	mov	r4, r0
   12428:	str	r0, [sp, #68]	; 0x44
   1242c:	add	r3, sp, #152	; 0x98
   12430:	str	r3, [sp]
   12434:	add	r3, sp, #139	; 0x8b
   12438:	add	r2, sp, #160	; 0xa0
   1243c:	add	r1, sp, #148	; 0x94
   12440:	mov	r0, r6
   12444:	bl	114e0 <__assert_fail@plt+0x354>
   12448:	subs	r5, r0, #0
   1244c:	bne	126b0 <__assert_fail@plt+0x1524>
   12450:	ldr	r3, [sp, #56]	; 0x38
   12454:	adds	r3, r3, #1
   12458:	str	r3, [sp, #56]	; 0x38
   1245c:	ldr	r3, [sp, #60]	; 0x3c
   12460:	adc	r3, r3, #0
   12464:	str	r3, [sp, #60]	; 0x3c
   12468:	movw	r3, #57744	; 0xe190
   1246c:	movt	r3, #2
   12470:	ldrb	r3, [r3, #17]
   12474:	cmp	r3, #0
   12478:	bne	126d0 <__assert_fail@plt+0x1544>
   1247c:	cmp	r4, #0
   12480:	beq	124b0 <__assert_fail@plt+0x1324>
   12484:	movw	r3, #57732	; 0xe184
   12488:	movt	r3, #2
   1248c:	ldr	r0, [r3]
   12490:	ldr	r3, [r0, #20]
   12494:	ldr	r2, [r0, #24]
   12498:	cmp	r3, r2
   1249c:	addcc	r2, r3, #1
   124a0:	strcc	r2, [r0, #20]
   124a4:	movcc	r2, #92	; 0x5c
   124a8:	strbcc	r2, [r3]
   124ac:	bcs	126a4 <__assert_fail@plt+0x1518>
   124b0:	ldr	r1, [sp, #68]	; 0x44
   124b4:	mov	r0, r6
   124b8:	bl	113e4 <__assert_fail@plt+0x258>
   124bc:	mov	r2, #5
   124c0:	movw	r1, #53956	; 0xd2c4
   124c4:	movt	r1, #1
   124c8:	mov	r0, #0
   124cc:	bl	10f7c <dcgettext@plt>
   124d0:	mov	r2, r0
   124d4:	movw	r1, #53976	; 0xd2d8
   124d8:	movt	r1, #1
   124dc:	mov	r0, #1
   124e0:	bl	110c0 <__printf_chk@plt>
   124e4:	b	126d0 <__assert_fail@plt+0x1544>
   124e8:	sub	r2, r4, r6
   124ec:	ldrb	r0, [r5, r6]
   124f0:	movw	r1, #57744	; 0xe190
   124f4:	movt	r1, #2
   124f8:	ldr	r3, [r1, #24]
   124fc:	cmp	r0, #92	; 0x5c
   12500:	addeq	r3, r3, #1
   12504:	cmp	r2, r3
   12508:	bcc	13010 <__assert_fail@plt+0x1e84>
   1250c:	mov	r2, #0
   12510:	str	r2, [r1]
   12514:	bl	11054 <__ctype_b_loc@plt>
   12518:	ldr	ip, [r0]
   1251c:	ldr	r0, [sp, #64]	; 0x40
   12520:	mov	r2, r7
   12524:	ldr	lr, [sp, #28]
   12528:	b	12530 <__assert_fail@plt+0x13a4>
   1252c:	mov	r0, lr
   12530:	sub	r1, r2, r7
   12534:	ldrb	r3, [r2], #1
   12538:	lsl	r3, r3, #1
   1253c:	ldrh	r3, [ip, r3]
   12540:	tst	r3, #4096	; 0x1000
   12544:	bne	1252c <__assert_fail@plt+0x13a0>
   12548:	cmp	r0, #0
   1254c:	beq	13010 <__assert_fail@plt+0x1e84>
   12550:	movw	r3, #57744	; 0xe190
   12554:	movt	r3, #2
   12558:	str	r1, [r3]
   1255c:	sub	r3, r1, #2
   12560:	cmp	r3, #126	; 0x7e
   12564:	bhi	13010 <__assert_fail@plt+0x1e84>
   12568:	tst	r1, #1
   1256c:	bne	13010 <__assert_fail@plt+0x1e84>
   12570:	movw	r3, #57744	; 0xe190
   12574:	movt	r3, #2
   12578:	lsl	r2, r1, #2
   1257c:	str	r2, [r3, #8]
   12580:	mov	r2, #0
   12584:	str	r2, [r3, #12]
   12588:	add	r6, r6, r1
   1258c:	ldrb	r3, [r5, r6]
   12590:	cmp	r3, #32
   12594:	cmpne	r3, #9
   12598:	bne	13010 <__assert_fail@plt+0x1e84>
   1259c:	strb	r2, [r5, r6]
   125a0:	mov	r0, r7
   125a4:	bl	1136c <__assert_fail@plt+0x1e0>
   125a8:	cmp	r0, #0
   125ac:	beq	13010 <__assert_fail@plt+0x1e84>
   125b0:	add	r1, r6, #1
   125b4:	sub	r3, r4, r1
   125b8:	cmp	r3, #1
   125bc:	beq	125d0 <__assert_fail@plt+0x1444>
   125c0:	ldrb	r3, [r5, r1]
   125c4:	cmp	r3, #32
   125c8:	cmpne	r3, #42	; 0x2a
   125cc:	beq	1261c <__assert_fail@plt+0x1490>
   125d0:	movw	r3, #57616	; 0xe110
   125d4:	movt	r3, #2
   125d8:	ldr	r3, [r3, #4]
   125dc:	cmp	r3, #0
   125e0:	beq	13010 <__assert_fail@plt+0x1e84>
   125e4:	movw	r3, #57616	; 0xe110
   125e8:	movt	r3, #2
   125ec:	mov	r2, #1
   125f0:	str	r2, [r3, #4]
   125f4:	add	r6, r5, r1
   125f8:	ldr	r3, [sp, #68]	; 0x44
   125fc:	cmp	r3, #0
   12600:	beq	123d4 <__assert_fail@plt+0x1248>
   12604:	sub	r1, r4, r1
   12608:	mov	r0, r6
   1260c:	bl	11288 <__assert_fail@plt+0xfc>
   12610:	adds	r0, r0, #0
   12614:	movne	r0, #1
   12618:	b	123cc <__assert_fail@plt+0x1240>
   1261c:	movw	r2, #57616	; 0xe110
   12620:	movt	r2, #2
   12624:	ldr	r2, [r2, #4]
   12628:	cmp	r2, #1
   1262c:	beq	125f4 <__assert_fail@plt+0x1468>
   12630:	movw	r2, #57616	; 0xe110
   12634:	movt	r2, #2
   12638:	mov	r1, #0
   1263c:	str	r1, [r2, #4]
   12640:	add	r1, r6, #2
   12644:	cmp	r3, #42	; 0x2a
   12648:	movne	r3, #0
   1264c:	moveq	r3, #1
   12650:	str	r3, [sp, #148]	; 0x94
   12654:	b	125f4 <__assert_fail@plt+0x1468>
   12658:	mov	r2, #5
   1265c:	movw	r1, #53908	; 0xd294
   12660:	movt	r1, #1
   12664:	mov	r0, #0
   12668:	bl	10f7c <dcgettext@plt>
   1266c:	mov	r4, r0
   12670:	ldr	r2, [sp, #52]	; 0x34
   12674:	mov	r1, #3
   12678:	mov	r0, #0
   1267c:	bl	1aa34 <__assert_fail@plt+0x98a8>
   12680:	ldr	r3, [sp, #44]	; 0x2c
   12684:	str	r3, [sp, #8]
   12688:	strd	sl, [sp]
   1268c:	mov	r3, r0
   12690:	mov	r2, r4
   12694:	mov	r1, #0
   12698:	mov	r0, r1
   1269c:	bl	11000 <error@plt>
   126a0:	b	1303c <__assert_fail@plt+0x1eb0>
   126a4:	mov	r1, #92	; 0x5c
   126a8:	bl	11108 <__overflow@plt>
   126ac:	b	124b0 <__assert_fail@plt+0x1324>
   126b0:	movw	r3, #57744	; 0xe190
   126b4:	movt	r3, #2
   126b8:	ldrb	r3, [r3, #16]
   126bc:	cmp	r3, #0
   126c0:	beq	126dc <__assert_fail@plt+0x1550>
   126c4:	ldrb	r3, [sp, #139]	; 0x8b
   126c8:	cmp	r3, #0
   126cc:	beq	126dc <__assert_fail@plt+0x1550>
   126d0:	ldr	r3, [sp, #28]
   126d4:	str	r3, [sp, #88]	; 0x58
   126d8:	b	1303c <__assert_fail@plt+0x1eb0>
   126dc:	movw	r3, #57744	; 0xe190
   126e0:	movt	r3, #2
   126e4:	ldr	r3, [r3]
   126e8:	lsr	r8, r3, #1
   126ec:	cmp	r3, #1
   126f0:	bls	12ef4 <__assert_fail@plt+0x1d68>
   126f4:	bl	11030 <__ctype_tolower_loc@plt>
   126f8:	ldr	r1, [r0]
   126fc:	add	r2, sp, #159	; 0x9f
   12700:	mov	r4, #0
   12704:	add	ip, r7, #1
   12708:	strd	sl, [sp, #72]	; 0x48
   1270c:	ldr	r0, [sp, #124]	; 0x7c
   12710:	ldrb	r3, [r2, #1]!
   12714:	ldrb	fp, [r7, r4, lsl #1]
   12718:	add	lr, r0, r3, lsr #4
   1271c:	ldrb	lr, [lr, #280]	; 0x118
   12720:	ldr	fp, [r1, fp, lsl #2]
   12724:	cmp	fp, lr
   12728:	bne	12754 <__assert_fail@plt+0x15c8>
   1272c:	ldrb	lr, [ip, r4, lsl #1]
   12730:	and	r3, r3, #15
   12734:	add	r3, r0, r3
   12738:	ldrb	r3, [r3, #280]	; 0x118
   1273c:	ldr	lr, [r1, lr, lsl #2]
   12740:	cmp	lr, r3
   12744:	bne	12754 <__assert_fail@plt+0x15c8>
   12748:	add	r4, r4, #1
   1274c:	cmp	r8, r4
   12750:	bhi	12710 <__assert_fail@plt+0x1584>
   12754:	ldrd	sl, [sp, #72]	; 0x48
   12758:	cmp	r8, r4
   1275c:	beq	12ef8 <__assert_fail@plt+0x1d6c>
   12760:	ldr	r3, [sp, #96]	; 0x60
   12764:	adds	r3, r3, #1
   12768:	str	r3, [sp, #96]	; 0x60
   1276c:	ldr	r3, [sp, #100]	; 0x64
   12770:	adc	r3, r3, #0
   12774:	str	r3, [sp, #100]	; 0x64
   12778:	movw	r3, #57744	; 0xe190
   1277c:	movt	r3, #2
   12780:	ldrb	r3, [r3, #17]
   12784:	cmp	r3, #0
   12788:	bne	126d0 <__assert_fail@plt+0x1544>
   1278c:	ldr	r3, [sp, #68]	; 0x44
   12790:	cmp	r3, #0
   12794:	bne	12f3c <__assert_fail@plt+0x1db0>
   12798:	ldr	r1, [sp, #68]	; 0x44
   1279c:	mov	r0, r6
   127a0:	bl	113e4 <__assert_fail@plt+0x258>
   127a4:	mov	r2, #5
   127a8:	movw	r1, #53984	; 0xd2e0
   127ac:	movt	r1, #1
   127b0:	mov	r0, #0
   127b4:	bl	10f7c <dcgettext@plt>
   127b8:	mov	r2, r0
   127bc:	movw	r1, #53976	; 0xd2d8
   127c0:	movt	r1, #1
   127c4:	mov	r0, #1
   127c8:	bl	110c0 <__printf_chk@plt>
   127cc:	b	126d0 <__assert_fail@plt+0x1544>
   127d0:	mov	r1, #92	; 0x5c
   127d4:	bl	11108 <__overflow@plt>
   127d8:	b	12f68 <__assert_fail@plt+0x1ddc>
   127dc:	ldr	r0, [sp, #140]	; 0x8c
   127e0:	bl	187e4 <__assert_fail@plt+0x7658>
   127e4:	ldr	r4, [r9]
   127e8:	eor	r4, r4, #32
   127ec:	ubfx	r4, r4, #5, #1
   127f0:	rsb	r5, r4, #0
   127f4:	ldr	r3, [sp, #80]	; 0x50
   127f8:	cmp	r3, #0
   127fc:	bne	12a0c <__assert_fail@plt+0x1880>
   12800:	mov	r0, r9
   12804:	bl	11138 <clearerr_unlocked@plt>
   12808:	cmp	r5, #0
   1280c:	bge	12a34 <__assert_fail@plt+0x18a8>
   12810:	ldr	r3, [sp, #88]	; 0x58
   12814:	cmp	r3, #0
   12818:	beq	12a88 <__assert_fail@plt+0x18fc>
   1281c:	movw	r3, #57744	; 0xe190
   12820:	movt	r3, #2
   12824:	ldrb	r3, [r3, #17]
   12828:	cmp	r3, #0
   1282c:	bne	129ac <__assert_fail@plt+0x1820>
   12830:	ldrd	r0, [sp, #32]
   12834:	orrs	r3, r0, r1
   12838:	beq	128a4 <__assert_fail@plt+0x1718>
   1283c:	mvn	r2, #0
   12840:	mov	r3, #0
   12844:	cmp	r1, r3
   12848:	cmpeq	r0, r2
   1284c:	ldrls	r3, [sp, #32]
   12850:	bls	1286c <__assert_fail@plt+0x16e0>
   12854:	movw	r2, #16960	; 0x4240
   12858:	movt	r2, #15
   1285c:	mov	r3, #0
   12860:	bl	1c4b8 <__assert_fail@plt+0xb32c>
   12864:	add	r3, r2, #999424	; 0xf4000
   12868:	add	r3, r3, #576	; 0x240
   1286c:	mov	r2, #5
   12870:	str	r2, [sp]
   12874:	movw	r2, #54060	; 0xd32c
   12878:	movt	r2, #1
   1287c:	movw	r1, #54108	; 0xd35c
   12880:	movt	r1, #1
   12884:	mov	r0, #0
   12888:	bl	11180 <dcngettext@plt>
   1288c:	ldrd	r2, [sp, #32]
   12890:	strd	r2, [sp]
   12894:	mov	r2, r0
   12898:	mov	r1, #0
   1289c:	mov	r0, r1
   128a0:	bl	11000 <error@plt>
   128a4:	ldrd	r0, [sp, #56]	; 0x38
   128a8:	orrs	r3, r0, r1
   128ac:	beq	12918 <__assert_fail@plt+0x178c>
   128b0:	mvn	r2, #0
   128b4:	mov	r3, #0
   128b8:	cmp	r1, r3
   128bc:	cmpeq	r0, r2
   128c0:	ldrls	r3, [sp, #56]	; 0x38
   128c4:	bls	128e0 <__assert_fail@plt+0x1754>
   128c8:	movw	r2, #16960	; 0x4240
   128cc:	movt	r2, #15
   128d0:	mov	r3, #0
   128d4:	bl	1c4b8 <__assert_fail@plt+0xb32c>
   128d8:	add	r3, r2, #999424	; 0xf4000
   128dc:	add	r3, r3, #576	; 0x240
   128e0:	mov	r2, #5
   128e4:	str	r2, [sp]
   128e8:	movw	r2, #54152	; 0xd388
   128ec:	movt	r2, #1
   128f0:	movw	r1, #54200	; 0xd3b8
   128f4:	movt	r1, #1
   128f8:	mov	r0, #0
   128fc:	bl	11180 <dcngettext@plt>
   12900:	ldrd	r2, [sp, #56]	; 0x38
   12904:	strd	r2, [sp]
   12908:	mov	r2, r0
   1290c:	mov	r1, #0
   12910:	mov	r0, r1
   12914:	bl	11000 <error@plt>
   12918:	ldrd	r0, [sp, #96]	; 0x60
   1291c:	orrs	r3, r0, r1
   12920:	beq	1298c <__assert_fail@plt+0x1800>
   12924:	mvn	r2, #0
   12928:	mov	r3, #0
   1292c:	cmp	r1, r3
   12930:	cmpeq	r0, r2
   12934:	ldrls	r3, [sp, #96]	; 0x60
   12938:	bls	12954 <__assert_fail@plt+0x17c8>
   1293c:	movw	r2, #16960	; 0x4240
   12940:	movt	r2, #15
   12944:	mov	r3, #0
   12948:	bl	1c4b8 <__assert_fail@plt+0xb32c>
   1294c:	add	r3, r2, #999424	; 0xf4000
   12950:	add	r3, r3, #576	; 0x240
   12954:	mov	r2, #5
   12958:	str	r2, [sp]
   1295c:	movw	r2, #54244	; 0xd3e4
   12960:	movt	r2, #1
   12964:	movw	r1, #54292	; 0xd414
   12968:	movt	r1, #1
   1296c:	mov	r0, #0
   12970:	bl	11180 <dcngettext@plt>
   12974:	ldrd	r2, [sp, #96]	; 0x60
   12978:	strd	r2, [sp]
   1297c:	mov	r2, r0
   12980:	mov	r1, #0
   12984:	mov	r0, r1
   12988:	bl	11000 <error@plt>
   1298c:	movw	r3, #57744	; 0xe190
   12990:	movt	r3, #2
   12994:	ldrb	r3, [r3, #16]
   12998:	eor	r3, r3, #1
   1299c:	ldr	r2, [sp, #108]	; 0x6c
   129a0:	orr	r3, r2, r3
   129a4:	tst	r3, #255	; 0xff
   129a8:	beq	12b90 <__assert_fail@plt+0x1a04>
   129ac:	ldr	r3, [sp, #108]	; 0x6c
   129b0:	cmp	r3, #0
   129b4:	moveq	r3, #0
   129b8:	beq	12ac8 <__assert_fail@plt+0x193c>
   129bc:	ldrd	r0, [sp, #56]	; 0x38
   129c0:	ldrd	r2, [sp, #96]	; 0x60
   129c4:	mov	lr, r2
   129c8:	orr	ip, r0, r2
   129cc:	str	ip, [sp, #112]	; 0x70
   129d0:	orr	r3, r1, r3
   129d4:	str	r3, [sp, #116]	; 0x74
   129d8:	ldrd	r2, [sp, #112]	; 0x70
   129dc:	orrs	r3, r2, r3
   129e0:	movne	r3, #0
   129e4:	bne	12ac8 <__assert_fail@plt+0x193c>
   129e8:	movw	r3, #57744	; 0xe190
   129ec:	movt	r3, #2
   129f0:	ldrb	r3, [r3, #20]
   129f4:	eor	r3, r3, #1
   129f8:	ldrd	r0, [sp, #32]
   129fc:	mov	r2, r0
   12a00:	orrs	r2, r2, r1
   12a04:	orreq	r3, r3, #1
   12a08:	b	12ac8 <__assert_fail@plt+0x193c>
   12a0c:	mov	r0, r9
   12a10:	bl	18608 <__assert_fail@plt+0x747c>
   12a14:	cmp	r0, #0
   12a18:	movne	r0, r4
   12a1c:	moveq	r0, #0
   12a20:	cmp	r0, #0
   12a24:	beq	12808 <__assert_fail@plt+0x167c>
   12a28:	bl	11090 <__errno_location@plt>
   12a2c:	ldr	r5, [r0]
   12a30:	b	12808 <__assert_fail@plt+0x167c>
   12a34:	movwne	r4, #53188	; 0xcfc4
   12a38:	movtne	r4, #1
   12a3c:	beq	12a6c <__assert_fail@plt+0x18e0>
   12a40:	ldr	r2, [sp, #52]	; 0x34
   12a44:	mov	r1, #3
   12a48:	mov	r0, #0
   12a4c:	bl	1aa34 <__assert_fail@plt+0x98a8>
   12a50:	mov	r3, r0
   12a54:	mov	r2, r4
   12a58:	mov	r1, r5
   12a5c:	mov	r0, #0
   12a60:	bl	11000 <error@plt>
   12a64:	ldr	r3, [sp, #64]	; 0x40
   12a68:	b	12acc <__assert_fail@plt+0x1940>
   12a6c:	mov	r2, #5
   12a70:	movw	r1, #53996	; 0xd2ec
   12a74:	movt	r1, #1
   12a78:	mov	r0, #0
   12a7c:	bl	10f7c <dcgettext@plt>
   12a80:	mov	r4, r0
   12a84:	b	12a40 <__assert_fail@plt+0x18b4>
   12a88:	mov	r2, #5
   12a8c:	movw	r1, #54012	; 0xd2fc
   12a90:	movt	r1, #1
   12a94:	mov	r0, #0
   12a98:	bl	10f7c <dcgettext@plt>
   12a9c:	mov	r4, r0
   12aa0:	ldr	r2, [sp, #52]	; 0x34
   12aa4:	mov	r1, #3
   12aa8:	mov	r0, #0
   12aac:	bl	1aa34 <__assert_fail@plt+0x98a8>
   12ab0:	mov	r3, r0
   12ab4:	mov	r2, r4
   12ab8:	mov	r1, #0
   12abc:	mov	r0, r1
   12ac0:	bl	11000 <error@plt>
   12ac4:	mov	r3, #0
   12ac8:	and	r3, r3, #1
   12acc:	ldr	r2, [sp, #84]	; 0x54
   12ad0:	and	r2, r2, r3
   12ad4:	str	r2, [sp, #84]	; 0x54
   12ad8:	ldr	r3, [sp, #92]	; 0x5c
   12adc:	ldr	r2, [sp, #48]	; 0x30
   12ae0:	cmp	r3, r2
   12ae4:	bls	12e74 <__assert_fail@plt+0x1ce8>
   12ae8:	ldr	r3, [sp, #48]	; 0x30
   12aec:	ldr	r0, [r3], #4
   12af0:	str	r0, [sp, #52]	; 0x34
   12af4:	str	r3, [sp, #48]	; 0x30
   12af8:	ldr	r3, [sp, #28]
   12afc:	cmp	r3, #0
   12b00:	beq	12bd4 <__assert_fail@plt+0x1a48>
   12b04:	movw	r1, #51176	; 0xc7e8
   12b08:	movt	r1, #1
   12b0c:	bl	10eec <strcmp@plt>
   12b10:	subs	r3, r0, #0
   12b14:	str	r3, [sp, #80]	; 0x50
   12b18:	bne	12264 <__assert_fail@plt+0x10d8>
   12b1c:	movw	r3, #57744	; 0xe190
   12b20:	movt	r3, #2
   12b24:	mov	r2, #1
   12b28:	strb	r2, [r3, #4]
   12b2c:	mov	r2, #5
   12b30:	movw	r1, #53864	; 0xd268
   12b34:	movt	r1, #1
   12b38:	bl	10f7c <dcgettext@plt>
   12b3c:	str	r0, [sp, #52]	; 0x34
   12b40:	movw	r3, #57728	; 0xe180
   12b44:	movt	r3, #2
   12b48:	ldr	r9, [r3]
   12b4c:	mov	r3, #0
   12b50:	str	r3, [sp, #140]	; 0x8c
   12b54:	str	r3, [sp, #144]	; 0x90
   12b58:	ldr	r3, [sp, #64]	; 0x40
   12b5c:	str	r3, [sp, #108]	; 0x6c
   12b60:	str	r3, [sp, #88]	; 0x58
   12b64:	mov	r2, #0
   12b68:	mov	r3, #0
   12b6c:	strd	r2, [sp, #96]	; 0x60
   12b70:	strd	r2, [sp, #56]	; 0x38
   12b74:	strd	r2, [sp, #32]
   12b78:	mov	sl, #1
   12b7c:	mov	fp, #0
   12b80:	movw	r3, #51308	; 0xc86c
   12b84:	movt	r3, #1
   12b88:	str	r3, [sp, #44]	; 0x2c
   12b8c:	b	13058 <__assert_fail@plt+0x1ecc>
   12b90:	mov	r2, #5
   12b94:	movw	r1, #54340	; 0xd444
   12b98:	movt	r1, #1
   12b9c:	mov	r0, #0
   12ba0:	bl	10f7c <dcgettext@plt>
   12ba4:	mov	r4, r0
   12ba8:	ldr	r2, [sp, #52]	; 0x34
   12bac:	mov	r1, #3
   12bb0:	mov	r0, #0
   12bb4:	bl	1aa34 <__assert_fail@plt+0x98a8>
   12bb8:	mov	r3, r0
   12bbc:	mov	r2, r4
   12bc0:	mov	r1, #0
   12bc4:	mov	r0, r1
   12bc8:	bl	11000 <error@plt>
   12bcc:	b	12ac4 <__assert_fail@plt+0x1938>
   12bd0:	andeq	ip, r1, ip, ror #13
   12bd4:	ldr	r3, [sp, #120]	; 0x78
   12bd8:	str	r3, [sp, #152]	; 0x98
   12bdc:	add	r3, sp, #160	; 0xa0
   12be0:	str	r3, [sp]
   12be4:	add	r3, sp, #148	; 0x94
   12be8:	add	r2, sp, #232	; 0xe8
   12bec:	add	r1, sp, #152	; 0x98
   12bf0:	ldr	r0, [sp, #52]	; 0x34
   12bf4:	bl	114e0 <__assert_fail@plt+0x354>
   12bf8:	subs	r8, r0, #0
   12bfc:	streq	r8, [sp, #84]	; 0x54
   12c00:	beq	12ad8 <__assert_fail@plt+0x194c>
   12c04:	ldr	fp, [sp, #152]	; 0x98
   12c08:	movw	r3, #57616	; 0xe110
   12c0c:	movt	r3, #2
   12c10:	ldrb	sl, [r3]
   12c14:	cmp	sl, #10
   12c18:	ldrne	r8, [sp, #28]
   12c1c:	beq	12d34 <__assert_fail@plt+0x1ba8>
   12c20:	ldr	r3, [sp, #40]	; 0x28
   12c24:	cmp	r3, #0
   12c28:	bne	12db0 <__assert_fail@plt+0x1c24>
   12c2c:	movw	r3, #57744	; 0xe190
   12c30:	movt	r3, #2
   12c34:	ldr	r3, [r3]
   12c38:	cmp	r3, #1
   12c3c:	bls	12c94 <__assert_fail@plt+0x1b08>
   12c40:	add	r4, sp, #231	; 0xe7
   12c44:	movw	r7, #54388	; 0xd474
   12c48:	movt	r7, #1
   12c4c:	mov	r9, #1
   12c50:	movw	r6, #57744	; 0xe190
   12c54:	movt	r6, #2
   12c58:	add	r5, r4, #1
   12c5c:	ldrb	r2, [r4, #1]
   12c60:	mov	r1, r7
   12c64:	mov	r0, r9
   12c68:	bl	110c0 <__printf_chk@plt>
   12c6c:	add	r4, r4, #2
   12c70:	add	r3, sp, #232	; 0xe8
   12c74:	sub	r3, r4, r3
   12c78:	mov	r4, r5
   12c7c:	ldr	r2, [r6]
   12c80:	cmp	r3, r2, lsr #1
   12c84:	bcc	12c58 <__assert_fail@plt+0x1acc>
   12c88:	ldr	r3, [sp, #40]	; 0x28
   12c8c:	cmp	r3, #0
   12c90:	bne	12d00 <__assert_fail@plt+0x1b74>
   12c94:	movw	r3, #57732	; 0xe184
   12c98:	movt	r3, #2
   12c9c:	ldr	r0, [r3]
   12ca0:	ldr	r3, [r0, #20]
   12ca4:	ldr	r2, [r0, #24]
   12ca8:	cmp	r3, r2
   12cac:	addcc	r2, r3, #1
   12cb0:	strcc	r2, [r0, #20]
   12cb4:	movcc	r2, #32
   12cb8:	strbcc	r2, [r3]
   12cbc:	bcs	12e60 <__assert_fail@plt+0x1cd4>
   12cc0:	cmp	fp, #0
   12cc4:	movne	r1, #42	; 0x2a
   12cc8:	moveq	r1, #32
   12ccc:	movw	r3, #57732	; 0xe184
   12cd0:	movt	r3, #2
   12cd4:	ldr	r0, [r3]
   12cd8:	ldr	r3, [r0, #20]
   12cdc:	ldr	r2, [r0, #24]
   12ce0:	cmp	r3, r2
   12ce4:	addcc	r2, r3, #1
   12ce8:	strcc	r2, [r0, #20]
   12cec:	strbcc	r1, [r3]
   12cf0:	bcs	12e6c <__assert_fail@plt+0x1ce0>
   12cf4:	mov	r1, r8
   12cf8:	ldr	r0, [sp, #52]	; 0x34
   12cfc:	bl	113e4 <__assert_fail@plt+0x258>
   12d00:	movw	r3, #57732	; 0xe184
   12d04:	movt	r3, #2
   12d08:	ldr	r0, [r3]
   12d0c:	ldr	r3, [r0, #20]
   12d10:	ldr	r2, [r0, #24]
   12d14:	cmp	r3, r2
   12d18:	addcc	r2, r3, #1
   12d1c:	strcc	r2, [r0, #20]
   12d20:	strbcc	sl, [r3]
   12d24:	bcc	12ad8 <__assert_fail@plt+0x194c>
   12d28:	mov	r1, sl
   12d2c:	bl	11108 <__overflow@plt>
   12d30:	b	12ad8 <__assert_fail@plt+0x194c>
   12d34:	mov	r1, #92	; 0x5c
   12d38:	ldr	r0, [sp, #52]	; 0x34
   12d3c:	bl	11084 <strchr@plt>
   12d40:	cmp	r0, #0
   12d44:	beq	12d80 <__assert_fail@plt+0x1bf4>
   12d48:	movw	r3, #57732	; 0xe184
   12d4c:	movt	r3, #2
   12d50:	ldr	r0, [r3]
   12d54:	ldr	r3, [r0, #20]
   12d58:	ldr	r2, [r0, #24]
   12d5c:	cmp	r3, r2
   12d60:	addcc	r2, r3, #1
   12d64:	strcc	r2, [r0, #20]
   12d68:	movcc	r2, #92	; 0x5c
   12d6c:	strbcc	r2, [r3]
   12d70:	bcc	12c20 <__assert_fail@plt+0x1a94>
   12d74:	mov	r1, #92	; 0x5c
   12d78:	bl	11108 <__overflow@plt>
   12d7c:	b	12c20 <__assert_fail@plt+0x1a94>
   12d80:	mov	r1, #10
   12d84:	ldr	r0, [sp, #52]	; 0x34
   12d88:	bl	11084 <strchr@plt>
   12d8c:	cmp	r0, #0
   12d90:	bne	12d48 <__assert_fail@plt+0x1bbc>
   12d94:	mov	r1, #13
   12d98:	ldr	r0, [sp, #52]	; 0x34
   12d9c:	bl	11084 <strchr@plt>
   12da0:	cmp	r0, #0
   12da4:	ldreq	r8, [sp, #28]
   12da8:	bne	12d48 <__assert_fail@plt+0x1bbc>
   12dac:	b	12c20 <__assert_fail@plt+0x1a94>
   12db0:	movw	r3, #57732	; 0xe184
   12db4:	movt	r3, #2
   12db8:	ldr	r3, [r3]
   12dbc:	mov	r2, #7
   12dc0:	mov	r1, #1
   12dc4:	movw	r0, #51308	; 0xc86c
   12dc8:	movt	r0, #1
   12dcc:	bl	10f58 <fwrite_unlocked@plt>
   12dd0:	movw	r3, #57744	; 0xe190
   12dd4:	movt	r3, #2
   12dd8:	ldrd	r2, [r3, #8]
   12ddc:	movw	r0, #511	; 0x1ff
   12de0:	mov	r1, #0
   12de4:	cmp	r3, r1
   12de8:	cmpeq	r2, r0
   12dec:	bls	12e4c <__assert_fail@plt+0x1cc0>
   12df0:	movw	r4, #57732	; 0xe184
   12df4:	movt	r4, #2
   12df8:	ldr	r3, [r4]
   12dfc:	mov	r2, #2
   12e00:	mov	r1, #1
   12e04:	movw	r0, #54376	; 0xd468
   12e08:	movt	r0, #1
   12e0c:	bl	10f58 <fwrite_unlocked@plt>
   12e10:	mov	r1, r8
   12e14:	ldr	r0, [sp, #52]	; 0x34
   12e18:	bl	113e4 <__assert_fail@plt+0x258>
   12e1c:	ldr	r3, [r4]
   12e20:	mov	r2, #4
   12e24:	mov	r1, #1
   12e28:	movw	r0, #54380	; 0xd46c
   12e2c:	movt	r0, #1
   12e30:	bl	10f58 <fwrite_unlocked@plt>
   12e34:	movw	r3, #57744	; 0xe190
   12e38:	movt	r3, #2
   12e3c:	ldr	r3, [r3]
   12e40:	cmp	r3, #1
   12e44:	bhi	12c40 <__assert_fail@plt+0x1ab4>
   12e48:	b	12d00 <__assert_fail@plt+0x1b74>
   12e4c:	movw	r1, #54368	; 0xd460
   12e50:	movt	r1, #1
   12e54:	mov	r0, #1
   12e58:	bl	110c0 <__printf_chk@plt>
   12e5c:	b	12df0 <__assert_fail@plt+0x1c64>
   12e60:	mov	r1, #32
   12e64:	bl	11108 <__overflow@plt>
   12e68:	b	12cc0 <__assert_fail@plt+0x1b34>
   12e6c:	bl	11108 <__overflow@plt>
   12e70:	b	12cf4 <__assert_fail@plt+0x1b68>
   12e74:	movw	r3, #57744	; 0xe190
   12e78:	movt	r3, #2
   12e7c:	ldrb	r3, [r3, #4]
   12e80:	cmp	r3, #0
   12e84:	bne	12eb0 <__assert_fail@plt+0x1d24>
   12e88:	ldr	r3, [sp, #84]	; 0x54
   12e8c:	eor	r0, r3, #1
   12e90:	uxtb	r0, r0
   12e94:	add	sp, sp, #308	; 0x134
   12e98:	ldrd	r4, [sp]
   12e9c:	ldrd	r6, [sp, #8]
   12ea0:	ldrd	r8, [sp, #16]
   12ea4:	ldrd	sl, [sp, #24]
   12ea8:	add	sp, sp, #32
   12eac:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb0:	movw	r3, #57728	; 0xe180
   12eb4:	movt	r3, #2
   12eb8:	ldr	r0, [r3]
   12ebc:	bl	18608 <__assert_fail@plt+0x747c>
   12ec0:	cmn	r0, #1
   12ec4:	bne	12e88 <__assert_fail@plt+0x1cfc>
   12ec8:	bl	11090 <__errno_location@plt>
   12ecc:	ldr	r4, [r0]
   12ed0:	mov	r2, #5
   12ed4:	movw	r1, #53864	; 0xd268
   12ed8:	movt	r1, #1
   12edc:	mov	r0, #0
   12ee0:	bl	10f7c <dcgettext@plt>
   12ee4:	mov	r2, r0
   12ee8:	mov	r1, r4
   12eec:	mov	r0, #1
   12ef0:	bl	11000 <error@plt>
   12ef4:	mov	r4, #0
   12ef8:	movw	r3, #57744	; 0xe190
   12efc:	movt	r3, #2
   12f00:	ldrb	r3, [r3, #17]
   12f04:	str	r3, [sp, #108]	; 0x6c
   12f08:	cmp	r3, #0
   12f0c:	bne	126d0 <__assert_fail@plt+0x1544>
   12f10:	movw	r3, #57744	; 0xe190
   12f14:	movt	r3, #2
   12f18:	ldrb	r3, [r3, #19]
   12f1c:	str	r3, [sp, #108]	; 0x6c
   12f20:	cmp	r3, #0
   12f24:	bne	126d0 <__assert_fail@plt+0x1544>
   12f28:	ldr	r3, [sp, #68]	; 0x44
   12f2c:	cmp	r3, #0
   12f30:	streq	r5, [sp, #108]	; 0x6c
   12f34:	beq	12f68 <__assert_fail@plt+0x1ddc>
   12f38:	str	r3, [sp, #108]	; 0x6c
   12f3c:	movw	r3, #57732	; 0xe184
   12f40:	movt	r3, #2
   12f44:	ldr	r0, [r3]
   12f48:	ldr	r3, [r0, #20]
   12f4c:	ldr	r2, [r0, #24]
   12f50:	cmp	r3, r2
   12f54:	addcc	r2, r3, #1
   12f58:	strcc	r2, [r0, #20]
   12f5c:	movcc	r2, #92	; 0x5c
   12f60:	strbcc	r2, [r3]
   12f64:	bcs	127d0 <__assert_fail@plt+0x1644>
   12f68:	ldr	r1, [sp, #68]	; 0x44
   12f6c:	mov	r0, r6
   12f70:	bl	113e4 <__assert_fail@plt+0x258>
   12f74:	cmp	r8, r4
   12f78:	bne	127a4 <__assert_fail@plt+0x1618>
   12f7c:	movw	r3, #57744	; 0xe190
   12f80:	movt	r3, #2
   12f84:	ldrb	r3, [r3, #19]
   12f88:	cmp	r3, #0
   12f8c:	bne	126d0 <__assert_fail@plt+0x1544>
   12f90:	mov	r2, #5
   12f94:	movw	r1, #53992	; 0xd2e8
   12f98:	movt	r1, #1
   12f9c:	mov	r0, #0
   12fa0:	bl	10f7c <dcgettext@plt>
   12fa4:	mov	r2, r0
   12fa8:	movw	r1, #53976	; 0xd2d8
   12fac:	movt	r1, #1
   12fb0:	mov	r0, #1
   12fb4:	bl	110c0 <__printf_chk@plt>
   12fb8:	b	126d0 <__assert_fail@plt+0x1544>
   12fbc:	mov	r3, #40	; 0x28
   12fc0:	ldr	r2, [sp, #104]	; 0x68
   12fc4:	strb	r3, [r2]
   12fc8:	movw	r3, #57744	; 0xe190
   12fcc:	movt	r3, #2
   12fd0:	mov	r0, #512	; 0x200
   12fd4:	mov	r1, #0
   12fd8:	strd	r0, [r3, #8]
   12fdc:	movw	r3, #57744	; 0xe190
   12fe0:	movt	r3, #2
   12fe4:	ldr	r2, [r3, #8]
   12fe8:	ldr	r1, [r3, #12]
   12fec:	lsr	r2, r2, #2
   12ff0:	orr	r2, r2, r1, lsl #30
   12ff4:	str	r2, [r3]
   12ff8:	ldrb	r3, [r5, r8]
   12ffc:	cmp	r3, #32
   13000:	addeq	r8, r8, #1
   13004:	ldrb	r3, [r5, r8]
   13008:	cmp	r3, #40	; 0x28
   1300c:	beq	122f8 <__assert_fail@plt+0x116c>
   13010:	ldr	r3, [sp, #32]
   13014:	adds	r3, r3, #1
   13018:	str	r3, [sp, #32]
   1301c:	ldr	r3, [sp, #36]	; 0x24
   13020:	adc	r3, r3, #0
   13024:	str	r3, [sp, #36]	; 0x24
   13028:	movw	r3, #57744	; 0xe190
   1302c:	movt	r3, #2
   13030:	ldrb	r3, [r3, #18]
   13034:	cmp	r3, #0
   13038:	bne	12658 <__assert_fail@plt+0x14cc>
   1303c:	ldr	r3, [r9]
   13040:	tst	r3, #48	; 0x30
   13044:	bne	127dc <__assert_fail@plt+0x1650>
   13048:	adds	sl, sl, #1
   1304c:	adc	fp, fp, #0
   13050:	orrs	r3, sl, fp
   13054:	beq	122b4 <__assert_fail@plt+0x1128>
   13058:	mov	r3, r9
   1305c:	mov	r2, #10
   13060:	add	r1, sp, #144	; 0x90
   13064:	add	r0, sp, #140	; 0x8c
   13068:	bl	10ee0 <__getdelim@plt>
   1306c:	subs	r4, r0, #0
   13070:	ble	127dc <__assert_fail@plt+0x1650>
   13074:	ldr	r3, [sp, #140]	; 0x8c
   13078:	ldrb	r2, [r3]
   1307c:	cmp	r2, #35	; 0x23
   13080:	beq	1303c <__assert_fail@plt+0x1eb0>
   13084:	add	r2, r3, r4
   13088:	ldrb	r0, [r2, #-1]
   1308c:	cmp	r0, #10
   13090:	subeq	r4, r4, #1
   13094:	cmp	r4, #0
   13098:	movle	r2, r4
   1309c:	subgt	r2, r4, #1
   130a0:	ldrb	r0, [r3, r2]
   130a4:	cmp	r0, #13
   130a8:	subeq	r4, r4, #1
   130ac:	cmp	r4, #0
   130b0:	beq	1303c <__assert_fail@plt+0x1eb0>
   130b4:	mov	r2, #0
   130b8:	strb	r2, [r3, r4]
   130bc:	ldr	r5, [sp, #140]	; 0x8c
   130c0:	ldrb	r3, [r5]
   130c4:	cmp	r3, #9
   130c8:	cmpne	r3, #32
   130cc:	bne	122f0 <__assert_fail@plt+0x1164>
   130d0:	mov	r2, r5
   130d4:	rsb	r1, r5, #1
   130d8:	add	r6, r1, r2
   130dc:	ldrb	r3, [r2, #1]!
   130e0:	cmp	r3, #9
   130e4:	cmpne	r3, #32
   130e8:	beq	130d8 <__assert_fail@plt+0x1f4c>
   130ec:	cmp	r3, #92	; 0x5c
   130f0:	addeq	r6, r6, #1
   130f4:	ldreq	r3, [sp, #28]
   130f8:	ldrne	r3, [sp, #64]	; 0x40
   130fc:	str	r3, [sp, #68]	; 0x44
   13100:	add	r7, r5, r6
   13104:	mov	r2, #7
   13108:	ldr	r1, [sp, #44]	; 0x2c
   1310c:	mov	r0, r7
   13110:	bl	1115c <strncmp@plt>
   13114:	cmp	r0, #0
   13118:	bne	124e8 <__assert_fail@plt+0x135c>
   1311c:	add	r8, r6, #7
   13120:	add	r3, r5, r8
   13124:	str	r3, [sp, #104]	; 0x68
   13128:	ldrb	r2, [r5, r8]
   1312c:	str	r2, [sp, #72]	; 0x48
   13130:	mov	r3, #0
   13134:	strb	r3, [r5, r8]
   13138:	ldr	r1, [sp, #44]	; 0x2c
   1313c:	mov	r0, r7
   13140:	bl	10eec <strcmp@plt>
   13144:	cmp	r0, #0
   13148:	bne	13010 <__assert_fail@plt+0x1e84>
   1314c:	ldr	r2, [sp, #72]	; 0x48
   13150:	cmp	r2, #40	; 0x28
   13154:	beq	12fbc <__assert_fail@plt+0x1e30>
   13158:	add	r8, r6, #8
   1315c:	movw	r3, #57744	; 0xe190
   13160:	movt	r3, #2
   13164:	mov	r0, #512	; 0x200
   13168:	mov	r1, #0
   1316c:	strd	r0, [r3, #8]
   13170:	cmp	r2, #45	; 0x2d
   13174:	bne	12fdc <__assert_fail@plt+0x1e50>
   13178:	mov	r2, #0
   1317c:	str	r2, [sp]
   13180:	add	r3, sp, #152	; 0x98
   13184:	add	r1, sp, #148	; 0x94
   13188:	add	r0, r5, r8
   1318c:	bl	1b958 <__assert_fail@plt+0xa7cc>
   13190:	cmp	r0, #0
   13194:	bne	13010 <__assert_fail@plt+0x1e84>
   13198:	ldrd	r2, [sp, #152]	; 0x98
   1319c:	orrs	r1, r2, r3
   131a0:	beq	13010 <__assert_fail@plt+0x1e84>
   131a4:	movw	r1, #57744	; 0xe190
   131a8:	movt	r1, #2
   131ac:	ldrd	r0, [r1, #8]
   131b0:	cmp	r3, r1
   131b4:	cmpeq	r2, r0
   131b8:	bhi	13010 <__assert_fail@plt+0x1e84>
   131bc:	and	r1, r2, #7
   131c0:	str	r1, [sp, #128]	; 0x80
   131c4:	mov	r1, #0
   131c8:	str	r1, [sp, #132]	; 0x84
   131cc:	ldrd	r0, [sp, #128]	; 0x80
   131d0:	orrs	r1, r0, r1
   131d4:	bne	13010 <__assert_fail@plt+0x1e84>
   131d8:	ldr	r8, [sp, #148]	; 0x94
   131dc:	sub	r8, r8, r5
   131e0:	movw	r1, #57744	; 0xe190
   131e4:	movt	r1, #2
   131e8:	strd	r2, [r1, #8]
   131ec:	b	12fdc <__assert_fail@plt+0x1e50>
   131f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   131f4:	strd	r6, [sp, #8]
   131f8:	strd	r8, [sp, #16]
   131fc:	strd	sl, [sp, #24]
   13200:	str	lr, [sp, #32]
   13204:	sub	sp, sp, #412	; 0x19c
   13208:	add	ip, sp, #272	; 0x110
   1320c:	add	lr, sp, #400	; 0x190
   13210:	ldr	r2, [r1]
   13214:	ldr	r3, [r1, #4]
   13218:	str	r2, [sp, #144]	; 0x90
   1321c:	str	r3, [sp, #148]	; 0x94
   13220:	ldrd	r2, [sp, #144]	; 0x90
   13224:	strd	r2, [ip, #8]!
   13228:	add	r1, r1, #8
   1322c:	cmp	ip, lr
   13230:	bne	13210 <__assert_fail@plt+0x2084>
   13234:	sub	r3, r0, #8
   13238:	str	r3, [sp, #132]	; 0x84
   1323c:	add	r2, sp, #144	; 0x90
   13240:	str	r2, [sp, #136]	; 0x88
   13244:	add	r1, r0, #56	; 0x38
   13248:	str	r1, [sp, #140]	; 0x8c
   1324c:	ldrd	r4, [r3, #8]!
   13250:	strd	r4, [r2, #8]!
   13254:	cmp	r3, r1
   13258:	bne	1324c <__assert_fail@plt+0x20c0>
   1325c:	ldr	r7, [sp, #184]	; 0xb8
   13260:	ldr	r6, [sp, #188]	; 0xbc
   13264:	ldr	r3, [sp, #152]	; 0x98
   13268:	ldr	sl, [sp, #156]	; 0x9c
   1326c:	adds	r3, r7, r3
   13270:	adc	sl, r6, sl
   13274:	ldr	r2, [sp, #280]	; 0x118
   13278:	adds	r3, r3, r2
   1327c:	ldr	r2, [sp, #284]	; 0x11c
   13280:	adc	sl, sl, r2
   13284:	ldr	r1, [r0, #64]	; 0x40
   13288:	ldr	ip, [r0, #68]	; 0x44
   1328c:	eor	r1, r1, r3
   13290:	eor	ip, ip, sl
   13294:	eor	r5, ip, #1358954496	; 0x51000000
   13298:	eor	r5, r5, #937984	; 0xe5000
   1329c:	eor	r5, r5, #636	; 0x27c
   132a0:	eor	r5, r5, #3
   132a4:	eor	r2, r1, #-1392508928	; 0xad000000
   132a8:	eor	r2, r2, #15073280	; 0xe60000
   132ac:	eor	r2, r2, #33280	; 0x8200
   132b0:	eor	r2, r2, #209	; 0xd1
   132b4:	movw	r1, #51464	; 0xc908
   132b8:	movt	r1, #62396	; 0xf3bc
   132bc:	movw	lr, #58983	; 0xe667
   132c0:	movt	lr, #27145	; 0x6a09
   132c4:	adds	r1, r5, r1
   132c8:	adc	lr, r2, lr
   132cc:	eor	r7, r7, r1
   132d0:	eor	r6, r6, lr
   132d4:	lsr	r8, r7, #24
   132d8:	orr	ip, r8, r6, lsl #8
   132dc:	lsr	r4, r6, #24
   132e0:	orr	r4, r4, r7, lsl #8
   132e4:	ldr	r6, [sp, #288]	; 0x120
   132e8:	adds	r3, r3, r6
   132ec:	ldr	r6, [sp, #292]	; 0x124
   132f0:	adc	sl, sl, r6
   132f4:	adds	r3, r3, ip
   132f8:	adc	sl, sl, r4
   132fc:	str	r3, [sp, #8]
   13300:	eor	r5, r5, r3
   13304:	eor	r2, r2, sl
   13308:	lsr	r3, r5, #16
   1330c:	orr	r6, r3, r2, lsl #16
   13310:	lsr	r2, r2, #16
   13314:	orr	r2, r2, r5, lsl #16
   13318:	str	r6, [sp, #60]	; 0x3c
   1331c:	adds	r5, r1, r6
   13320:	str	r2, [sp, #64]	; 0x40
   13324:	adc	lr, lr, r2
   13328:	str	r5, [sp, #12]
   1332c:	eor	ip, ip, r5
   13330:	str	lr, [sp, #16]
   13334:	eor	r4, r4, lr
   13338:	lsl	r3, r4, #1
   1333c:	orr	r7, r3, ip, lsr #31
   13340:	str	r7, [sp, #72]	; 0x48
   13344:	lsl	ip, ip, #1
   13348:	orr	r4, ip, r4, lsr #31
   1334c:	str	r4, [sp, #68]	; 0x44
   13350:	ldr	r5, [sp, #192]	; 0xc0
   13354:	ldr	r4, [sp, #196]	; 0xc4
   13358:	ldr	r3, [sp, #160]	; 0xa0
   1335c:	ldr	r7, [sp, #164]	; 0xa4
   13360:	adds	r3, r5, r3
   13364:	adc	r7, r4, r7
   13368:	ldr	r8, [sp, #296]	; 0x128
   1336c:	adds	r3, r3, r8
   13370:	ldr	r8, [sp, #300]	; 0x12c
   13374:	adc	r7, r7, r8
   13378:	ldr	ip, [r0, #72]	; 0x48
   1337c:	ldr	lr, [r0, #76]	; 0x4c
   13380:	eor	ip, ip, r3
   13384:	eor	lr, lr, r7
   13388:	eor	r1, lr, #-1694498816	; 0x9b000000
   1338c:	eor	r1, r1, #352256	; 0x56000
   13390:	eor	r1, r1, #2176	; 0x880
   13394:	eor	r1, r1, #12
   13398:	eor	r2, ip, #721420288	; 0x2b000000
   1339c:	eor	r2, r2, #4079616	; 0x3e4000
   133a0:	eor	r2, r2, #11264	; 0x2c00
   133a4:	eor	r2, r2, #31
   133a8:	movw	lr, #42811	; 0xa73b
   133ac:	movt	lr, #33994	; 0x84ca
   133b0:	movw	r8, #44677	; 0xae85
   133b4:	movt	r8, #47975	; 0xbb67
   133b8:	adds	lr, r1, lr
   133bc:	adc	r8, r2, r8
   133c0:	eor	r5, r5, lr
   133c4:	eor	r4, r4, r8
   133c8:	lsr	r9, r5, #24
   133cc:	orr	ip, r9, r4, lsl #8
   133d0:	lsr	r4, r4, #24
   133d4:	orr	r6, r4, r5, lsl #8
   133d8:	ldr	r9, [sp, #304]	; 0x130
   133dc:	adds	r3, r3, r9
   133e0:	ldr	r9, [sp, #308]	; 0x134
   133e4:	adc	r7, r7, r9
   133e8:	adds	r9, r3, ip
   133ec:	adc	fp, r7, r6
   133f0:	str	r9, [sp, #20]
   133f4:	eor	r1, r1, r9
   133f8:	str	fp, [sp, #24]
   133fc:	eor	r2, r2, fp
   13400:	lsr	r3, r1, #16
   13404:	orr	r4, r3, r2, lsl #16
   13408:	lsr	r2, r2, #16
   1340c:	orr	r7, r2, r1, lsl #16
   13410:	str	r4, [sp, #76]	; 0x4c
   13414:	adds	r3, lr, r4
   13418:	str	r7, [sp, #80]	; 0x50
   1341c:	adc	r8, r8, r7
   13420:	mov	r2, r8
   13424:	str	r3, [sp, #28]
   13428:	eor	ip, ip, r3
   1342c:	str	r2, [sp, #32]
   13430:	eor	r6, r6, r2
   13434:	lsl	r3, r6, #1
   13438:	orr	r8, r3, ip, lsr #31
   1343c:	str	r8, [sp, #48]	; 0x30
   13440:	lsl	ip, ip, #1
   13444:	orr	fp, ip, r6, lsr #31
   13448:	ldr	r7, [sp, #200]	; 0xc8
   1344c:	ldr	r5, [sp, #204]	; 0xcc
   13450:	ldr	r3, [sp, #168]	; 0xa8
   13454:	ldr	r8, [sp, #172]	; 0xac
   13458:	adds	r3, r7, r3
   1345c:	adc	r8, r5, r8
   13460:	ldr	ip, [sp, #312]	; 0x138
   13464:	adds	r3, r3, ip
   13468:	ldr	ip, [sp, #316]	; 0x13c
   1346c:	adc	r8, r8, ip
   13470:	ldr	r2, [r0, #80]	; 0x50
   13474:	ldr	ip, [r0, #84]	; 0x54
   13478:	eor	r2, r2, r3
   1347c:	eor	ip, ip, r8
   13480:	eor	lr, ip, #528482304	; 0x1f800000
   13484:	eor	lr, lr, #251904	; 0x3d800
   13488:	eor	lr, lr, #424	; 0x1a8
   1348c:	eor	lr, lr, #3
   13490:	eor	r1, r2, #-83886080	; 0xfb000000
   13494:	eor	r1, r1, #4259840	; 0x410000
   13498:	eor	r1, r1, #48384	; 0xbd00
   1349c:	eor	r1, r1, #107	; 0x6b
   134a0:	movw	r2, #63531	; 0xf82b
   134a4:	movt	r2, #65172	; 0xfe94
   134a8:	movw	ip, #62322	; 0xf372
   134ac:	movt	ip, #15470	; 0x3c6e
   134b0:	adds	r2, lr, r2
   134b4:	adc	ip, r1, ip
   134b8:	eor	r7, r7, r2
   134bc:	eor	r5, r5, ip
   134c0:	lsr	r9, r7, #24
   134c4:	orr	r4, r9, r5, lsl #8
   134c8:	lsr	r5, r5, #24
   134cc:	orr	r6, r5, r7, lsl #8
   134d0:	ldr	r5, [sp, #320]	; 0x140
   134d4:	adds	r3, r3, r5
   134d8:	ldr	r5, [sp, #324]	; 0x144
   134dc:	adc	r8, r8, r5
   134e0:	adds	r3, r3, r4
   134e4:	adc	r5, r8, r6
   134e8:	str	r3, [sp, #36]	; 0x24
   134ec:	eor	lr, lr, r3
   134f0:	str	r5, [sp, #40]	; 0x28
   134f4:	eor	r1, r1, r5
   134f8:	lsr	r3, lr, #16
   134fc:	orr	r7, r3, r1, lsl #16
   13500:	lsr	r1, r1, #16
   13504:	orr	r1, r1, lr, lsl #16
   13508:	str	r7, [sp, #84]	; 0x54
   1350c:	adds	r2, r2, r7
   13510:	str	r1, [sp, #88]	; 0x58
   13514:	adc	ip, ip, r1
   13518:	eor	r4, r4, r2
   1351c:	eor	r6, r6, ip
   13520:	lsl	r3, r6, #1
   13524:	orr	r8, r3, r4, lsr #31
   13528:	str	r8, [sp, #96]	; 0x60
   1352c:	lsl	r4, r4, #1
   13530:	orr	r6, r4, r6, lsr #31
   13534:	str	r6, [sp, #92]	; 0x5c
   13538:	ldr	r9, [sp, #208]	; 0xd0
   1353c:	ldr	r8, [sp, #212]	; 0xd4
   13540:	ldr	r1, [sp, #176]	; 0xb0
   13544:	ldr	r6, [sp, #180]	; 0xb4
   13548:	adds	r1, r9, r1
   1354c:	adc	r6, r8, r6
   13550:	ldr	r4, [sp, #328]	; 0x148
   13554:	adds	r1, r1, r4
   13558:	ldr	r4, [sp, #332]	; 0x14c
   1355c:	adc	r6, r6, r4
   13560:	ldr	r3, [r0, #88]	; 0x58
   13564:	ldr	r0, [r0, #92]	; 0x5c
   13568:	eor	r3, r3, r1
   1356c:	eor	r0, r0, r6
   13570:	eor	r4, r0, #1526726656	; 0x5b000000
   13574:	eor	r4, r4, #14680064	; 0xe00000
   13578:	eor	r4, r4, #52480	; 0xcd00
   1357c:	eor	r4, r4, #25
   13580:	eor	lr, r3, #322961408	; 0x13400000
   13584:	eor	lr, lr, #4063232	; 0x3e0000
   13588:	eor	lr, lr, #8512	; 0x2140
   1358c:	eor	lr, lr, #57	; 0x39
   13590:	movw	r3, #14065	; 0x36f1
   13594:	movt	r3, #24349	; 0x5f1d
   13598:	movw	r0, #62778	; 0xf53a
   1359c:	movt	r0, #42319	; 0xa54f
   135a0:	adds	r3, r4, r3
   135a4:	adc	r0, lr, r0
   135a8:	eor	r9, r9, r3
   135ac:	eor	r8, r8, r0
   135b0:	lsr	r5, r9, #24
   135b4:	orr	r5, r5, r8, lsl #8
   135b8:	lsr	r7, r8, #24
   135bc:	orr	r7, r7, r9, lsl #8
   135c0:	ldr	r8, [sp, #336]	; 0x150
   135c4:	adds	r1, r1, r8
   135c8:	ldr	r8, [sp, #340]	; 0x154
   135cc:	adc	r6, r6, r8
   135d0:	adds	r8, r1, r5
   135d4:	adc	r6, r6, r7
   135d8:	mov	r9, r6
   135dc:	str	r8, [sp, #4]
   135e0:	eor	r4, r4, r8
   135e4:	str	r9, [sp, #44]	; 0x2c
   135e8:	eor	lr, lr, r9
   135ec:	lsr	r1, r4, #16
   135f0:	orr	r8, r1, lr, lsl #16
   135f4:	lsr	lr, lr, #16
   135f8:	orr	r9, lr, r4, lsl #16
   135fc:	adds	r3, r3, r8
   13600:	adc	r0, r0, r9
   13604:	eor	r5, r5, r3
   13608:	eor	r7, r7, r0
   1360c:	lsl	r1, r7, #1
   13610:	orr	r4, r1, r5, lsr #31
   13614:	str	r4, [sp, #100]	; 0x64
   13618:	lsl	r5, r5, #1
   1361c:	orr	r6, r5, r7, lsr #31
   13620:	ldr	r1, [sp, #8]
   13624:	ldr	lr, [sp, #344]	; 0x158
   13628:	adds	r1, r1, lr
   1362c:	ldr	lr, [sp, #348]	; 0x15c
   13630:	adc	sl, sl, lr
   13634:	adds	r1, r1, fp
   13638:	ldr	lr, [sp, #48]	; 0x30
   1363c:	adc	sl, sl, lr
   13640:	eor	r7, sl, r9
   13644:	eor	r4, r1, r8
   13648:	adds	r2, r2, r7
   1364c:	adc	ip, ip, r4
   13650:	eor	r8, r2, fp
   13654:	eor	r5, ip, lr
   13658:	lsr	fp, r8, #24
   1365c:	orr	lr, fp, r5, lsl #8
   13660:	lsr	r5, r5, #24
   13664:	orr	r9, r5, r8, lsl #8
   13668:	ldr	r8, [sp, #352]	; 0x160
   1366c:	adds	r1, r1, r8
   13670:	ldr	r8, [sp, #356]	; 0x164
   13674:	adc	sl, sl, r8
   13678:	adds	r1, r1, lr
   1367c:	adc	sl, sl, r9
   13680:	mov	r8, sl
   13684:	str	r1, [sp, #8]
   13688:	eor	r7, r7, r1
   1368c:	str	r8, [sp, #48]	; 0x30
   13690:	eor	r4, r4, r8
   13694:	lsr	r1, r7, #16
   13698:	orr	sl, r1, r4, lsl #16
   1369c:	lsr	r4, r4, #16
   136a0:	orr	r4, r4, r7, lsl #16
   136a4:	str	sl, [sp, #104]	; 0x68
   136a8:	adds	r2, r2, sl
   136ac:	str	r4, [sp, #108]	; 0x6c
   136b0:	adc	ip, ip, r4
   136b4:	mov	fp, ip
   136b8:	str	r2, [sp, #52]	; 0x34
   136bc:	eor	lr, lr, r2
   136c0:	str	fp, [sp, #56]	; 0x38
   136c4:	eor	r9, r9, fp
   136c8:	lsl	r2, r9, #1
   136cc:	orr	ip, r2, lr, lsr #31
   136d0:	str	ip, [sp, #116]	; 0x74
   136d4:	lsl	lr, lr, #1
   136d8:	orr	lr, lr, r9, lsr #31
   136dc:	str	lr, [sp, #112]	; 0x70
   136e0:	ldr	r9, [sp, #20]
   136e4:	ldr	ip, [sp, #360]	; 0x168
   136e8:	adds	r2, r9, ip
   136ec:	ldr	fp, [sp, #24]
   136f0:	ldr	r9, [sp, #364]	; 0x16c
   136f4:	adc	r4, fp, r9
   136f8:	ldr	fp, [sp, #92]	; 0x5c
   136fc:	adds	r2, r2, fp
   13700:	ldr	sl, [sp, #96]	; 0x60
   13704:	adc	r4, r4, sl
   13708:	ldr	ip, [sp, #64]	; 0x40
   1370c:	eor	lr, r4, ip
   13710:	ldr	r1, [sp, #60]	; 0x3c
   13714:	eor	ip, r2, r1
   13718:	adds	r3, r3, lr
   1371c:	adc	r0, r0, ip
   13720:	eor	r8, r3, fp
   13724:	eor	r5, r0, sl
   13728:	lsr	r9, r8, #24
   1372c:	orr	r1, r9, r5, lsl #8
   13730:	lsr	r5, r5, #24
   13734:	orr	r7, r5, r8, lsl #8
   13738:	ldr	fp, [sp, #368]	; 0x170
   1373c:	adds	r2, r2, fp
   13740:	ldr	fp, [sp, #372]	; 0x174
   13744:	adc	r4, r4, fp
   13748:	adds	fp, r2, r1
   1374c:	adc	r2, r4, r7
   13750:	str	fp, [sp, #20]
   13754:	eor	lr, lr, fp
   13758:	str	r2, [sp, #24]
   1375c:	eor	ip, ip, r2
   13760:	lsr	r2, lr, #16
   13764:	orr	r9, r2, ip, lsl #16
   13768:	lsr	ip, ip, #16
   1376c:	orr	r8, ip, lr, lsl #16
   13770:	str	r9, [sp, #92]	; 0x5c
   13774:	adds	ip, r3, r9
   13778:	adc	r0, r0, r8
   1377c:	mov	r3, r0
   13780:	str	ip, [sp, #60]	; 0x3c
   13784:	eor	r1, r1, ip
   13788:	str	r3, [sp, #64]	; 0x40
   1378c:	eor	r7, r7, r3
   13790:	lsl	r3, r7, #1
   13794:	orr	ip, r3, r1, lsr #31
   13798:	str	ip, [sp, #120]	; 0x78
   1379c:	lsl	r1, r1, #1
   137a0:	orr	lr, r1, r7, lsr #31
   137a4:	str	lr, [sp, #96]	; 0x60
   137a8:	ldr	r3, [sp, #36]	; 0x24
   137ac:	ldr	r5, [sp, #376]	; 0x178
   137b0:	adds	r3, r3, r5
   137b4:	ldr	r9, [sp, #40]	; 0x28
   137b8:	ldr	r5, [sp, #380]	; 0x17c
   137bc:	adc	r5, r9, r5
   137c0:	adds	r3, r3, r6
   137c4:	ldr	sl, [sp, #100]	; 0x64
   137c8:	adc	r5, r5, sl
   137cc:	ldr	ip, [sp, #80]	; 0x50
   137d0:	eor	r4, r5, ip
   137d4:	ldr	r1, [sp, #76]	; 0x4c
   137d8:	eor	ip, r3, r1
   137dc:	ldr	r2, [sp, #12]
   137e0:	adds	r1, r2, r4
   137e4:	ldr	lr, [sp, #16]
   137e8:	adc	lr, lr, ip
   137ec:	eor	r6, r6, r1
   137f0:	eor	r7, lr, sl
   137f4:	lsr	r9, r6, #24
   137f8:	orr	r2, r9, r7, lsl #8
   137fc:	lsr	r0, r7, #24
   13800:	orr	r0, r0, r6, lsl #8
   13804:	ldr	r6, [sp, #384]	; 0x180
   13808:	adds	r3, r3, r6
   1380c:	ldr	r6, [sp, #388]	; 0x184
   13810:	adc	r5, r5, r6
   13814:	adds	r6, r3, r2
   13818:	adc	r5, r5, r0
   1381c:	mov	r3, r5
   13820:	str	r6, [sp, #12]
   13824:	eor	r4, r4, r6
   13828:	str	r3, [sp, #16]
   1382c:	eor	ip, ip, r3
   13830:	lsr	r3, r4, #16
   13834:	orr	r6, r3, ip, lsl #16
   13838:	lsr	ip, ip, #16
   1383c:	orr	r4, ip, r4, lsl #16
   13840:	str	r6, [sp, #76]	; 0x4c
   13844:	adds	r1, r1, r6
   13848:	str	r4, [sp, #80]	; 0x50
   1384c:	adc	lr, lr, r4
   13850:	eor	r2, r2, r1
   13854:	eor	r0, r0, lr
   13858:	lsl	r3, r0, #1
   1385c:	orr	r6, r3, r2, lsr #31
   13860:	str	r6, [sp, #124]	; 0x7c
   13864:	lsl	r2, r2, #1
   13868:	orr	r9, r2, r0, lsr #31
   1386c:	str	r9, [sp, #100]	; 0x64
   13870:	ldr	r6, [sp, #4]
   13874:	ldr	r3, [sp, #392]	; 0x188
   13878:	adds	r3, r6, r3
   1387c:	ldr	r9, [sp, #44]	; 0x2c
   13880:	ldr	r2, [sp, #396]	; 0x18c
   13884:	adc	sl, r9, r2
   13888:	ldr	r5, [sp, #68]	; 0x44
   1388c:	adds	r3, r3, r5
   13890:	ldr	r0, [sp, #72]	; 0x48
   13894:	adc	sl, sl, r0
   13898:	ldr	ip, [sp, #88]	; 0x58
   1389c:	eor	r6, sl, ip
   138a0:	ldr	r7, [sp, #84]	; 0x54
   138a4:	eor	r4, r3, r7
   138a8:	ldr	r2, [sp, #28]
   138ac:	adds	r2, r2, r6
   138b0:	ldr	ip, [sp, #32]
   138b4:	adc	ip, ip, r4
   138b8:	eor	r7, r2, r5
   138bc:	eor	r5, ip, r0
   138c0:	lsr	fp, r7, #24
   138c4:	orr	r0, fp, r5, lsl #8
   138c8:	lsr	r5, r5, #24
   138cc:	orr	r9, r5, r7, lsl #8
   138d0:	ldr	r7, [sp, #400]	; 0x190
   138d4:	adds	r3, r3, r7
   138d8:	ldr	r7, [sp, #404]	; 0x194
   138dc:	adc	sl, sl, r7
   138e0:	adds	r7, r3, r0
   138e4:	adc	r3, sl, r9
   138e8:	str	r7, [sp, #28]
   138ec:	eor	r6, r6, r7
   138f0:	str	r3, [sp, #32]
   138f4:	eor	r4, r4, r3
   138f8:	lsr	r3, r6, #16
   138fc:	orr	fp, r3, r4, lsl #16
   13900:	lsr	r4, r4, #16
   13904:	orr	sl, r4, r6, lsl #16
   13908:	adds	r2, r2, fp
   1390c:	adc	ip, ip, sl
   13910:	eor	r0, r0, r2
   13914:	eor	r9, r9, ip
   13918:	lsl	r3, r9, #1
   1391c:	orr	r5, r3, r0, lsr #31
   13920:	lsl	r7, r0, #1
   13924:	orr	r7, r7, r9, lsr #31
   13928:	ldr	r3, [sp, #8]
   1392c:	ldr	r4, [sp, #392]	; 0x188
   13930:	adds	r3, r3, r4
   13934:	ldr	r0, [sp, #48]	; 0x30
   13938:	ldr	r4, [sp, #396]	; 0x18c
   1393c:	adc	r9, r0, r4
   13940:	adds	r3, r3, r7
   13944:	adc	r9, r9, r5
   13948:	eor	r6, r9, r8
   1394c:	ldr	r8, [sp, #92]	; 0x5c
   13950:	eor	r4, r3, r8
   13954:	adds	r1, r1, r6
   13958:	adc	lr, lr, r4
   1395c:	eor	r7, r7, r1
   13960:	eor	r5, r5, lr
   13964:	lsr	r8, r7, #24
   13968:	orr	r0, r8, r5, lsl #8
   1396c:	lsr	r5, r5, #24
   13970:	orr	r8, r5, r7, lsl #8
   13974:	ldr	r5, [sp, #360]	; 0x168
   13978:	adds	r3, r5, r3
   1397c:	ldr	r5, [sp, #364]	; 0x16c
   13980:	adc	r9, r5, r9
   13984:	adds	r5, r3, r0
   13988:	adc	r9, r9, r8
   1398c:	mov	r7, r9
   13990:	str	r5, [sp, #4]
   13994:	eor	r6, r6, r5
   13998:	str	r7, [sp, #8]
   1399c:	eor	r4, r4, r7
   139a0:	lsr	r3, r6, #16
   139a4:	orr	r9, r3, r4, lsl #16
   139a8:	lsr	r4, r4, #16
   139ac:	orr	r4, r4, r6, lsl #16
   139b0:	str	r9, [sp, #68]	; 0x44
   139b4:	adds	r1, r1, r9
   139b8:	mov	r3, r1
   139bc:	str	r4, [sp, #72]	; 0x48
   139c0:	adc	r1, lr, r4
   139c4:	str	r3, [sp, #36]	; 0x24
   139c8:	eor	r0, r0, r3
   139cc:	str	r1, [sp, #40]	; 0x28
   139d0:	eor	r8, r8, r1
   139d4:	lsl	r3, r8, #1
   139d8:	orr	r4, r3, r0, lsr #31
   139dc:	str	r4, [sp, #88]	; 0x58
   139e0:	lsl	r0, r0, #1
   139e4:	orr	r8, r0, r8, lsr #31
   139e8:	str	r8, [sp, #84]	; 0x54
   139ec:	ldr	r8, [sp, #312]	; 0x138
   139f0:	ldr	r0, [sp, #20]
   139f4:	adds	r3, r8, r0
   139f8:	ldr	r8, [sp, #316]	; 0x13c
   139fc:	ldr	r0, [sp, #24]
   13a00:	adc	r6, r8, r0
   13a04:	ldr	lr, [sp, #112]	; 0x70
   13a08:	adds	r3, r3, lr
   13a0c:	ldr	r1, [sp, #116]	; 0x74
   13a10:	adc	r6, r6, r1
   13a14:	ldr	r8, [sp, #80]	; 0x50
   13a18:	eor	r4, r6, r8
   13a1c:	ldr	r7, [sp, #76]	; 0x4c
   13a20:	eor	r0, r3, r7
   13a24:	adds	r2, r2, r4
   13a28:	adc	ip, ip, r0
   13a2c:	eor	r5, r2, lr
   13a30:	eor	lr, ip, r1
   13a34:	lsr	r7, r5, #24
   13a38:	orr	r1, r7, lr, lsl #8
   13a3c:	lsr	lr, lr, #24
   13a40:	orr	r8, lr, r5, lsl #8
   13a44:	ldr	lr, [sp, #344]	; 0x158
   13a48:	adds	r3, lr, r3
   13a4c:	ldr	lr, [sp, #348]	; 0x15c
   13a50:	adc	r6, lr, r6
   13a54:	adds	lr, r3, r1
   13a58:	adc	r6, r6, r8
   13a5c:	str	lr, [sp, #20]
   13a60:	eor	r4, r4, lr
   13a64:	str	r6, [sp, #24]
   13a68:	eor	r0, r0, r6
   13a6c:	lsr	r3, r4, #16
   13a70:	orr	r7, r3, r0, lsl #16
   13a74:	lsr	r0, r0, #16
   13a78:	orr	r0, r0, r4, lsl #16
   13a7c:	mov	r4, r0
   13a80:	str	r7, [sp, #76]	; 0x4c
   13a84:	adds	r2, r2, r7
   13a88:	mov	r0, r2
   13a8c:	str	r4, [sp, #80]	; 0x50
   13a90:	adc	r2, ip, r4
   13a94:	str	r0, [sp, #44]	; 0x2c
   13a98:	eor	r1, r1, r0
   13a9c:	str	r2, [sp, #48]	; 0x30
   13aa0:	eor	r8, r8, r2
   13aa4:	lsl	r3, r8, #1
   13aa8:	orr	ip, r3, r1, lsr #31
   13aac:	str	ip, [sp, #92]	; 0x5c
   13ab0:	lsl	r1, r1, #1
   13ab4:	orr	r7, r1, r8, lsr #31
   13ab8:	ldr	r8, [sp, #352]	; 0x160
   13abc:	ldr	r5, [sp, #12]
   13ac0:	adds	r3, r8, r5
   13ac4:	ldr	r8, [sp, #356]	; 0x164
   13ac8:	ldr	r5, [sp, #16]
   13acc:	adc	r0, r8, r5
   13ad0:	ldr	lr, [sp, #96]	; 0x60
   13ad4:	adds	r3, r3, lr
   13ad8:	ldr	r1, [sp, #120]	; 0x78
   13adc:	adc	r0, r0, r1
   13ae0:	eor	r5, r0, sl
   13ae4:	eor	ip, r3, fp
   13ae8:	ldr	r2, [sp, #52]	; 0x34
   13aec:	adds	r2, r2, r5
   13af0:	ldr	fp, [sp, #56]	; 0x38
   13af4:	adc	r4, fp, ip
   13af8:	eor	r6, r2, lr
   13afc:	eor	lr, r4, r1
   13b00:	lsr	r9, r6, #24
   13b04:	orr	r1, r9, lr, lsl #8
   13b08:	lsr	lr, lr, #24
   13b0c:	orr	r8, lr, r6, lsl #8
   13b10:	ldr	fp, [sp, #400]	; 0x190
   13b14:	adds	r3, fp, r3
   13b18:	ldr	fp, [sp, #404]	; 0x194
   13b1c:	adc	r0, fp, r0
   13b20:	adds	fp, r3, r1
   13b24:	adc	lr, r0, r8
   13b28:	str	fp, [sp, #12]
   13b2c:	eor	r5, r5, fp
   13b30:	str	lr, [sp, #16]
   13b34:	eor	ip, ip, lr
   13b38:	lsr	r3, r5, #16
   13b3c:	orr	sl, r3, ip, lsl #16
   13b40:	lsr	ip, ip, #16
   13b44:	orr	ip, ip, r5, lsl #16
   13b48:	mov	r5, ip
   13b4c:	str	sl, [sp, #96]	; 0x60
   13b50:	adds	r2, r2, sl
   13b54:	str	r5, [sp, #112]	; 0x70
   13b58:	adc	r4, r4, r5
   13b5c:	eor	r1, r1, r2
   13b60:	eor	r8, r8, r4
   13b64:	lsl	r3, r8, #1
   13b68:	orr	ip, r3, r1, lsr #31
   13b6c:	str	ip, [sp, #120]	; 0x78
   13b70:	lsl	r1, r1, #1
   13b74:	orr	r8, r1, r8, lsr #31
   13b78:	str	r8, [sp, #116]	; 0x74
   13b7c:	ldr	r8, [sp, #384]	; 0x180
   13b80:	ldr	r1, [sp, #28]
   13b84:	adds	r3, r8, r1
   13b88:	ldr	r8, [sp, #388]	; 0x184
   13b8c:	ldr	r1, [sp, #32]
   13b90:	adc	sl, r8, r1
   13b94:	ldr	r9, [sp, #100]	; 0x64
   13b98:	adds	r1, r3, r9
   13b9c:	ldr	r6, [sp, #124]	; 0x7c
   13ba0:	adc	lr, sl, r6
   13ba4:	ldr	r3, [sp, #108]	; 0x6c
   13ba8:	eor	r8, lr, r3
   13bac:	ldr	sl, [sp, #104]	; 0x68
   13bb0:	eor	r5, r1, sl
   13bb4:	ldr	r0, [sp, #60]	; 0x3c
   13bb8:	adds	r3, r0, r8
   13bbc:	ldr	r0, [sp, #64]	; 0x40
   13bc0:	adc	r0, r0, r5
   13bc4:	eor	r9, r3, r9
   13bc8:	eor	r6, r0, r6
   13bcc:	lsr	fp, r9, #24
   13bd0:	orr	ip, fp, r6, lsl #8
   13bd4:	lsr	r6, r6, #24
   13bd8:	orr	sl, r6, r9, lsl #8
   13bdc:	ldr	r6, [sp, #328]	; 0x148
   13be0:	adds	r1, r6, r1
   13be4:	ldr	r6, [sp, #332]	; 0x14c
   13be8:	adc	lr, r6, lr
   13bec:	adds	r6, r1, ip
   13bf0:	adc	r1, lr, sl
   13bf4:	str	r6, [sp, #28]
   13bf8:	eor	r8, r8, r6
   13bfc:	str	r1, [sp, #32]
   13c00:	eor	r5, r5, r1
   13c04:	lsr	r1, r8, #16
   13c08:	orr	r9, r1, r5, lsl #16
   13c0c:	lsr	r5, r5, #16
   13c10:	orr	fp, r5, r8, lsl #16
   13c14:	adds	r3, r3, r9
   13c18:	adc	r0, r0, fp
   13c1c:	eor	ip, ip, r3
   13c20:	eor	sl, sl, r0
   13c24:	lsl	r1, sl, #1
   13c28:	orr	r8, r1, ip, lsr #31
   13c2c:	str	r8, [sp, #104]	; 0x68
   13c30:	lsl	ip, ip, #1
   13c34:	orr	sl, ip, sl, lsr #31
   13c38:	str	sl, [sp, #100]	; 0x64
   13c3c:	ldr	ip, [sp, #288]	; 0x120
   13c40:	ldr	r5, [sp, #4]
   13c44:	adds	r1, ip, r5
   13c48:	ldr	sl, [sp, #292]	; 0x124
   13c4c:	ldr	ip, [sp, #8]
   13c50:	adc	r8, sl, ip
   13c54:	adds	r1, r1, r7
   13c58:	ldr	sl, [sp, #92]	; 0x5c
   13c5c:	adc	r8, r8, sl
   13c60:	eor	r6, r8, fp
   13c64:	eor	lr, r1, r9
   13c68:	adds	r2, r2, r6
   13c6c:	adc	r4, r4, lr
   13c70:	eor	r7, r7, r2
   13c74:	eor	r5, r4, sl
   13c78:	lsr	sl, r7, #24
   13c7c:	orr	ip, sl, r5, lsl #8
   13c80:	lsr	r5, r5, #24
   13c84:	orr	r9, r5, r7, lsl #8
   13c88:	ldr	r7, [sp, #376]	; 0x178
   13c8c:	adds	r1, r7, r1
   13c90:	ldr	r7, [sp, #380]	; 0x17c
   13c94:	adc	r8, r7, r8
   13c98:	adds	r7, r1, ip
   13c9c:	adc	sl, r8, r9
   13ca0:	str	r7, [sp, #4]
   13ca4:	eor	r6, r6, r7
   13ca8:	str	sl, [sp, #8]
   13cac:	eor	lr, lr, sl
   13cb0:	lsr	r1, r6, #16
   13cb4:	orr	r5, r1, lr, lsl #16
   13cb8:	lsr	lr, lr, #16
   13cbc:	orr	lr, lr, r6, lsl #16
   13cc0:	str	r5, [sp, #92]	; 0x5c
   13cc4:	adds	r2, r2, r5
   13cc8:	mov	r6, r2
   13ccc:	str	lr, [sp, #108]	; 0x6c
   13cd0:	adc	r4, r4, lr
   13cd4:	mov	r2, r4
   13cd8:	str	r6, [sp, #52]	; 0x34
   13cdc:	eor	ip, ip, r6
   13ce0:	str	r2, [sp, #56]	; 0x38
   13ce4:	eor	r9, r9, r2
   13ce8:	lsl	r2, r9, #1
   13cec:	orr	r4, r2, ip, lsr #31
   13cf0:	str	r4, [sp, #128]	; 0x80
   13cf4:	lsl	ip, ip, #1
   13cf8:	orr	ip, ip, r9, lsr #31
   13cfc:	str	ip, [sp, #124]	; 0x7c
   13d00:	ldr	r9, [sp, #280]	; 0x118
   13d04:	ldr	r5, [sp, #20]
   13d08:	adds	r2, r9, r5
   13d0c:	ldr	r9, [sp, #284]	; 0x11c
   13d10:	ldr	r5, [sp, #24]
   13d14:	adc	r6, r9, r5
   13d18:	ldr	r7, [sp, #116]	; 0x74
   13d1c:	adds	r2, r2, r7
   13d20:	ldr	r8, [sp, #120]	; 0x78
   13d24:	adc	r6, r6, r8
   13d28:	ldr	r1, [sp, #72]	; 0x48
   13d2c:	eor	lr, r6, r1
   13d30:	ldr	r9, [sp, #68]	; 0x44
   13d34:	eor	ip, r2, r9
   13d38:	adds	r3, r3, lr
   13d3c:	adc	r0, r0, ip
   13d40:	eor	r7, r3, r7
   13d44:	eor	r4, r0, r8
   13d48:	lsr	r8, r7, #24
   13d4c:	orr	r1, r8, r4, lsl #8
   13d50:	lsr	r4, r4, #24
   13d54:	orr	r5, r4, r7, lsl #8
   13d58:	ldr	r9, [sp, #296]	; 0x128
   13d5c:	adds	r2, r9, r2
   13d60:	ldr	r9, [sp, #300]	; 0x12c
   13d64:	adc	r6, r9, r6
   13d68:	adds	r9, r2, r1
   13d6c:	adc	r8, r6, r5
   13d70:	str	r9, [sp, #20]
   13d74:	eor	lr, lr, r9
   13d78:	str	r8, [sp, #24]
   13d7c:	eor	ip, ip, r8
   13d80:	lsr	r2, lr, #16
   13d84:	orr	r6, r2, ip, lsl #16
   13d88:	lsr	ip, ip, #16
   13d8c:	orr	r9, ip, lr, lsl #16
   13d90:	str	r6, [sp, #68]	; 0x44
   13d94:	adds	r3, r3, r6
   13d98:	adc	ip, r0, r9
   13d9c:	str	r3, [sp, #60]	; 0x3c
   13da0:	eor	r1, r1, r3
   13da4:	str	ip, [sp, #64]	; 0x40
   13da8:	eor	r5, r5, ip
   13dac:	lsl	r3, r5, #1
   13db0:	orr	lr, r3, r1, lsr #31
   13db4:	str	lr, [sp, #116]	; 0x74
   13db8:	lsl	r1, r1, #1
   13dbc:	orr	r1, r1, r5, lsr #31
   13dc0:	str	r1, [sp, #72]	; 0x48
   13dc4:	ldr	r0, [sp, #368]	; 0x170
   13dc8:	ldr	fp, [sp, #12]
   13dcc:	adds	r3, r0, fp
   13dd0:	ldr	r0, [sp, #372]	; 0x174
   13dd4:	ldr	fp, [sp, #16]
   13dd8:	adc	r0, r0, fp
   13ddc:	ldr	r8, [sp, #100]	; 0x64
   13de0:	adds	r3, r3, r8
   13de4:	ldr	fp, [sp, #104]	; 0x68
   13de8:	adc	r0, r0, fp
   13dec:	ldr	r5, [sp, #80]	; 0x50
   13df0:	eor	r6, r0, r5
   13df4:	ldr	r7, [sp, #76]	; 0x4c
   13df8:	eor	ip, r3, r7
   13dfc:	ldr	lr, [sp, #36]	; 0x24
   13e00:	adds	r1, lr, r6
   13e04:	ldr	r2, [sp, #40]	; 0x28
   13e08:	adc	r4, r2, ip
   13e0c:	eor	r7, r1, r8
   13e10:	eor	r5, r4, fp
   13e14:	lsr	r8, r7, #24
   13e18:	orr	r2, r8, r5, lsl #8
   13e1c:	lsr	lr, r5, #24
   13e20:	orr	lr, lr, r7, lsl #8
   13e24:	ldr	fp, [sp, #336]	; 0x150
   13e28:	adds	r3, fp, r3
   13e2c:	ldr	fp, [sp, #340]	; 0x154
   13e30:	adc	r0, fp, r0
   13e34:	adds	fp, r3, r2
   13e38:	adc	r7, r0, lr
   13e3c:	str	fp, [sp, #12]
   13e40:	eor	r6, r6, fp
   13e44:	str	r7, [sp, #16]
   13e48:	eor	ip, ip, r7
   13e4c:	lsr	r3, r6, #16
   13e50:	orr	fp, r3, ip, lsl #16
   13e54:	lsr	ip, ip, #16
   13e58:	orr	r3, ip, r6, lsl #16
   13e5c:	str	fp, [sp, #76]	; 0x4c
   13e60:	adds	r1, r1, fp
   13e64:	str	r3, [sp, #80]	; 0x50
   13e68:	adc	r4, r4, r3
   13e6c:	eor	r2, r2, r1
   13e70:	eor	lr, lr, r4
   13e74:	lsl	r3, lr, #1
   13e78:	orr	r0, r3, r2, lsr #31
   13e7c:	str	r0, [sp, #104]	; 0x68
   13e80:	lsl	r2, r2, #1
   13e84:	orr	lr, r2, lr, lsr #31
   13e88:	str	lr, [sp, #100]	; 0x64
   13e8c:	ldr	lr, [sp, #320]	; 0x140
   13e90:	ldr	r3, [sp, #28]
   13e94:	adds	r2, lr, r3
   13e98:	ldr	lr, [sp, #324]	; 0x144
   13e9c:	ldr	r3, [sp, #32]
   13ea0:	adc	lr, lr, r3
   13ea4:	ldr	r6, [sp, #84]	; 0x54
   13ea8:	adds	r2, r2, r6
   13eac:	ldr	ip, [sp, #88]	; 0x58
   13eb0:	adc	lr, lr, ip
   13eb4:	ldr	r5, [sp, #112]	; 0x70
   13eb8:	eor	r7, lr, r5
   13ebc:	ldr	sl, [sp, #96]	; 0x60
   13ec0:	eor	r5, r2, sl
   13ec4:	ldr	r0, [sp, #44]	; 0x2c
   13ec8:	adds	r3, r0, r7
   13ecc:	ldr	r0, [sp, #48]	; 0x30
   13ed0:	adc	r0, r0, r5
   13ed4:	eor	r8, r3, r6
   13ed8:	eor	r6, r0, ip
   13edc:	lsr	fp, r8, #24
   13ee0:	orr	ip, fp, r6, lsl #8
   13ee4:	lsr	r6, r6, #24
   13ee8:	orr	sl, r6, r8, lsl #8
   13eec:	ldr	r6, [sp, #304]	; 0x130
   13ef0:	adds	r2, r6, r2
   13ef4:	ldr	r6, [sp, #308]	; 0x134
   13ef8:	adc	lr, r6, lr
   13efc:	adds	r2, r2, ip
   13f00:	adc	lr, lr, sl
   13f04:	str	r2, [sp, #28]
   13f08:	eor	r7, r7, r2
   13f0c:	str	lr, [sp, #32]
   13f10:	eor	r5, r5, lr
   13f14:	lsr	r2, r7, #16
   13f18:	orr	r6, r2, r5, lsl #16
   13f1c:	lsr	r5, r5, #16
   13f20:	orr	fp, r5, r7, lsl #16
   13f24:	str	r6, [sp, #84]	; 0x54
   13f28:	adds	r3, r3, r6
   13f2c:	adc	r0, r0, fp
   13f30:	eor	ip, ip, r3
   13f34:	eor	sl, sl, r0
   13f38:	lsl	r2, sl, #1
   13f3c:	orr	r5, r2, ip, lsr #31
   13f40:	lsl	ip, ip, #1
   13f44:	orr	r8, ip, sl, lsr #31
   13f48:	ldr	r2, [sp, #368]	; 0x170
   13f4c:	ldr	r7, [sp, #4]
   13f50:	adds	r2, r2, r7
   13f54:	ldr	r7, [sp, #372]	; 0x174
   13f58:	ldr	sl, [sp, #8]
   13f5c:	adc	r7, r7, sl
   13f60:	adds	r2, r2, r8
   13f64:	adc	r7, r7, r5
   13f68:	eor	r6, r7, r9
   13f6c:	ldr	sl, [sp, #68]	; 0x44
   13f70:	eor	lr, r2, sl
   13f74:	adds	r1, r1, r6
   13f78:	adc	r4, r4, lr
   13f7c:	eor	r8, r8, r1
   13f80:	eor	r5, r5, r4
   13f84:	lsr	sl, r8, #24
   13f88:	orr	ip, sl, r5, lsl #8
   13f8c:	lsr	r5, r5, #24
   13f90:	orr	r9, r5, r8, lsl #8
   13f94:	ldr	sl, [sp, #344]	; 0x158
   13f98:	adds	r2, sl, r2
   13f9c:	ldr	sl, [sp, #348]	; 0x15c
   13fa0:	adc	r7, sl, r7
   13fa4:	adds	sl, r2, ip
   13fa8:	adc	r7, r7, r9
   13fac:	str	sl, [sp, #4]
   13fb0:	eor	r6, r6, sl
   13fb4:	str	r7, [sp, #8]
   13fb8:	eor	lr, lr, r7
   13fbc:	lsr	r2, r6, #16
   13fc0:	orr	r5, r2, lr, lsl #16
   13fc4:	lsr	lr, lr, #16
   13fc8:	orr	r6, lr, r6, lsl #16
   13fcc:	mov	r7, r6
   13fd0:	str	r5, [sp, #68]	; 0x44
   13fd4:	adds	r1, r1, r5
   13fd8:	mov	r6, r1
   13fdc:	str	r7, [sp, #88]	; 0x58
   13fe0:	adc	r4, r4, r7
   13fe4:	mov	sl, r4
   13fe8:	str	r6, [sp, #36]	; 0x24
   13fec:	eor	ip, ip, r6
   13ff0:	str	sl, [sp, #40]	; 0x28
   13ff4:	eor	r9, r9, sl
   13ff8:	lsl	r2, r9, #1
   13ffc:	orr	r2, r2, ip, lsr #31
   14000:	str	r2, [sp, #112]	; 0x70
   14004:	lsl	ip, ip, #1
   14008:	orr	r6, ip, r9, lsr #31
   1400c:	str	r6, [sp, #96]	; 0x60
   14010:	ldr	r1, [sp, #376]	; 0x178
   14014:	ldr	r9, [sp, #20]
   14018:	adds	r2, r1, r9
   1401c:	ldr	r9, [sp, #380]	; 0x17c
   14020:	ldr	r8, [sp, #24]
   14024:	adc	r6, r9, r8
   14028:	ldr	ip, [sp, #124]	; 0x7c
   1402c:	adds	r2, r2, ip
   14030:	ldr	r7, [sp, #128]	; 0x80
   14034:	adc	r6, r6, r7
   14038:	ldr	r8, [sp, #80]	; 0x50
   1403c:	eor	r5, r6, r8
   14040:	ldr	sl, [sp, #76]	; 0x4c
   14044:	eor	lr, r2, sl
   14048:	adds	r3, r3, r5
   1404c:	adc	r0, r0, lr
   14050:	eor	ip, r3, ip
   14054:	eor	r4, r0, r7
   14058:	lsr	r7, ip, #24
   1405c:	orr	r1, r7, r4, lsl #8
   14060:	lsr	r4, r4, #24
   14064:	orr	r8, r4, ip, lsl #8
   14068:	ldr	r9, [sp, #280]	; 0x118
   1406c:	adds	r2, r9, r2
   14070:	ldr	r9, [sp, #284]	; 0x11c
   14074:	adc	r6, r9, r6
   14078:	adds	r9, r2, r1
   1407c:	adc	r4, r6, r8
   14080:	str	r9, [sp, #20]
   14084:	eor	r5, r5, r9
   14088:	str	r4, [sp, #24]
   1408c:	eor	lr, lr, r4
   14090:	lsr	r2, r5, #16
   14094:	orr	r7, r2, lr, lsl #16
   14098:	lsr	lr, lr, #16
   1409c:	orr	ip, lr, r5, lsl #16
   140a0:	str	r7, [sp, #76]	; 0x4c
   140a4:	adds	r3, r3, r7
   140a8:	mov	r9, r3
   140ac:	str	ip, [sp, #80]	; 0x50
   140b0:	adc	r0, r0, ip
   140b4:	mov	r3, r0
   140b8:	str	r9, [sp, #44]	; 0x2c
   140bc:	eor	r1, r1, r9
   140c0:	str	r3, [sp, #48]	; 0x30
   140c4:	eor	r8, r8, r3
   140c8:	lsl	r3, r8, #1
   140cc:	orr	r0, r3, r1, lsr #31
   140d0:	str	r0, [sp, #120]	; 0x78
   140d4:	lsl	r1, r1, #1
   140d8:	orr	r7, r1, r8, lsr #31
   140dc:	ldr	r8, [sp, #320]	; 0x140
   140e0:	ldr	r0, [sp, #12]
   140e4:	adds	r3, r8, r0
   140e8:	ldr	r8, [sp, #324]	; 0x144
   140ec:	ldr	r0, [sp, #16]
   140f0:	adc	r0, r8, r0
   140f4:	ldr	r9, [sp, #72]	; 0x48
   140f8:	adds	r3, r3, r9
   140fc:	ldr	r8, [sp, #116]	; 0x74
   14100:	adc	r0, r0, r8
   14104:	eor	r5, r0, fp
   14108:	ldr	sl, [sp, #84]	; 0x54
   1410c:	eor	ip, r3, sl
   14110:	ldr	r4, [sp, #52]	; 0x34
   14114:	adds	r2, r4, r5
   14118:	ldr	r1, [sp, #56]	; 0x38
   1411c:	adc	r4, r1, ip
   14120:	eor	r6, r2, r9
   14124:	eor	lr, r4, r8
   14128:	lsr	r9, r6, #24
   1412c:	orr	r1, r9, lr, lsl #8
   14130:	lsr	lr, lr, #24
   14134:	orr	r8, lr, r6, lsl #8
   14138:	ldr	fp, [sp, #296]	; 0x128
   1413c:	adds	r3, fp, r3
   14140:	ldr	fp, [sp, #300]	; 0x12c
   14144:	adc	r0, fp, r0
   14148:	adds	fp, r3, r1
   1414c:	adc	r0, r0, r8
   14150:	str	fp, [sp, #12]
   14154:	eor	r5, r5, fp
   14158:	str	r0, [sp, #16]
   1415c:	eor	ip, ip, r0
   14160:	lsr	r3, r5, #16
   14164:	orr	lr, r3, ip, lsl #16
   14168:	lsr	ip, ip, #16
   1416c:	orr	r6, ip, r5, lsl #16
   14170:	str	lr, [sp, #72]	; 0x48
   14174:	adds	r2, r2, lr
   14178:	str	r6, [sp, #84]	; 0x54
   1417c:	adc	r4, r4, r6
   14180:	eor	r1, r1, r2
   14184:	eor	r8, r8, r4
   14188:	lsl	r3, r8, #1
   1418c:	orr	r9, r3, r1, lsr #31
   14190:	str	r9, [sp, #124]	; 0x7c
   14194:	lsl	r1, r1, #1
   14198:	orr	r8, r1, r8, lsr #31
   1419c:	str	r8, [sp, #116]	; 0x74
   141a0:	ldr	r8, [sp, #400]	; 0x190
   141a4:	ldr	r1, [sp, #28]
   141a8:	adds	r1, r8, r1
   141ac:	ldr	fp, [sp, #404]	; 0x194
   141b0:	ldr	r8, [sp, #32]
   141b4:	adc	lr, fp, r8
   141b8:	ldr	r9, [sp, #100]	; 0x64
   141bc:	adds	r1, r1, r9
   141c0:	ldr	r6, [sp, #104]	; 0x68
   141c4:	adc	lr, lr, r6
   141c8:	ldr	r3, [sp, #108]	; 0x6c
   141cc:	eor	r8, lr, r3
   141d0:	ldr	r5, [sp, #92]	; 0x5c
   141d4:	eor	r5, r1, r5
   141d8:	ldr	r3, [sp, #60]	; 0x3c
   141dc:	adds	r3, r3, r8
   141e0:	ldr	ip, [sp, #64]	; 0x40
   141e4:	adc	r0, ip, r5
   141e8:	eor	r9, r3, r9
   141ec:	eor	r6, r0, r6
   141f0:	lsr	fp, r9, #24
   141f4:	orr	ip, fp, r6, lsl #8
   141f8:	lsr	r6, r6, #24
   141fc:	orr	sl, r6, r9, lsl #8
   14200:	ldr	r9, [sp, #384]	; 0x180
   14204:	adds	r1, r9, r1
   14208:	ldr	r9, [sp, #388]	; 0x184
   1420c:	adc	lr, r9, lr
   14210:	adds	r1, r1, ip
   14214:	adc	lr, lr, sl
   14218:	str	r1, [sp, #28]
   1421c:	eor	r8, r8, r1
   14220:	str	lr, [sp, #32]
   14224:	eor	r5, r5, lr
   14228:	lsr	r1, r8, #16
   1422c:	orr	r9, r1, r5, lsl #16
   14230:	lsr	r5, r5, #16
   14234:	orr	fp, r5, r8, lsl #16
   14238:	adds	r3, r3, r9
   1423c:	adc	r0, r0, fp
   14240:	eor	ip, ip, r3
   14244:	eor	sl, sl, r0
   14248:	lsl	r1, sl, #1
   1424c:	orr	r5, r1, ip, lsr #31
   14250:	str	r5, [sp, #100]	; 0x64
   14254:	lsl	ip, ip, #1
   14258:	orr	r1, ip, sl, lsr #31
   1425c:	str	r1, [sp, #92]	; 0x5c
   14260:	ldr	ip, [sp, #360]	; 0x168
   14264:	ldr	sl, [sp, #4]
   14268:	adds	r1, ip, sl
   1426c:	ldr	sl, [sp, #364]	; 0x16c
   14270:	ldr	ip, [sp, #8]
   14274:	adc	r8, sl, ip
   14278:	adds	r1, r1, r7
   1427c:	ldr	ip, [sp, #120]	; 0x78
   14280:	adc	r8, r8, ip
   14284:	eor	r6, r8, fp
   14288:	eor	lr, r1, r9
   1428c:	adds	r2, r2, r6
   14290:	adc	r4, r4, lr
   14294:	eor	r7, r7, r2
   14298:	eor	r5, r4, ip
   1429c:	lsr	sl, r7, #24
   142a0:	orr	ip, sl, r5, lsl #8
   142a4:	lsr	r5, r5, #24
   142a8:	orr	r9, r5, r7, lsl #8
   142ac:	ldr	sl, [sp, #392]	; 0x188
   142b0:	adds	r1, sl, r1
   142b4:	ldr	sl, [sp, #396]	; 0x18c
   142b8:	adc	r8, sl, r8
   142bc:	adds	sl, r1, ip
   142c0:	adc	r5, r8, r9
   142c4:	str	sl, [sp, #4]
   142c8:	eor	r6, r6, sl
   142cc:	str	r5, [sp, #8]
   142d0:	eor	lr, lr, r5
   142d4:	lsr	r1, r6, #16
   142d8:	orr	r8, r1, lr, lsl #16
   142dc:	lsr	lr, lr, #16
   142e0:	orr	r1, lr, r6, lsl #16
   142e4:	str	r8, [sp, #104]	; 0x68
   142e8:	adds	r2, r2, r8
   142ec:	mov	lr, r2
   142f0:	str	r1, [sp, #108]	; 0x6c
   142f4:	adc	r2, r4, r1
   142f8:	mov	r4, r2
   142fc:	str	lr, [sp, #52]	; 0x34
   14300:	eor	ip, ip, lr
   14304:	str	r4, [sp, #56]	; 0x38
   14308:	eor	r9, r9, r4
   1430c:	lsl	r2, r9, #1
   14310:	orr	r7, r2, ip, lsr #31
   14314:	str	r7, [sp, #128]	; 0x80
   14318:	lsl	ip, ip, #1
   1431c:	orr	ip, ip, r9, lsr #31
   14320:	str	ip, [sp, #120]	; 0x78
   14324:	ldr	r2, [sp, #304]	; 0x130
   14328:	ldr	r9, [sp, #20]
   1432c:	adds	r2, r2, r9
   14330:	ldr	r9, [sp, #308]	; 0x134
   14334:	ldr	lr, [sp, #24]
   14338:	adc	r6, r9, lr
   1433c:	ldr	r4, [sp, #116]	; 0x74
   14340:	adds	r2, r2, r4
   14344:	ldr	r8, [sp, #124]	; 0x7c
   14348:	adc	r6, r6, r8
   1434c:	ldr	r1, [sp, #88]	; 0x58
   14350:	eor	lr, r6, r1
   14354:	ldr	r5, [sp, #68]	; 0x44
   14358:	eor	ip, r2, r5
   1435c:	adds	r3, r3, lr
   14360:	adc	r0, r0, ip
   14364:	eor	r7, r3, r4
   14368:	eor	r4, r0, r8
   1436c:	lsr	r8, r7, #24
   14370:	orr	r1, r8, r4, lsl #8
   14374:	lsr	r4, r4, #24
   14378:	orr	r5, r4, r7, lsl #8
   1437c:	ldr	r9, [sp, #328]	; 0x148
   14380:	adds	r2, r9, r2
   14384:	ldr	r9, [sp, #332]	; 0x14c
   14388:	adc	r6, r9, r6
   1438c:	adds	r9, r2, r1
   14390:	adc	r4, r6, r5
   14394:	str	r9, [sp, #20]
   14398:	eor	lr, lr, r9
   1439c:	str	r4, [sp, #24]
   143a0:	eor	ip, ip, r4
   143a4:	lsr	r2, lr, #16
   143a8:	orr	r8, r2, ip, lsl #16
   143ac:	lsr	ip, ip, #16
   143b0:	orr	r9, ip, lr, lsl #16
   143b4:	str	r8, [sp, #68]	; 0x44
   143b8:	adds	r3, r3, r8
   143bc:	adc	r0, r0, r9
   143c0:	str	r3, [sp, #60]	; 0x3c
   143c4:	eor	r1, r1, r3
   143c8:	str	r0, [sp, #64]	; 0x40
   143cc:	eor	r5, r5, r0
   143d0:	lsl	r3, r5, #1
   143d4:	orr	r2, r3, r1, lsr #31
   143d8:	str	r2, [sp, #116]	; 0x74
   143dc:	lsl	r1, r1, #1
   143e0:	orr	r1, r1, r5, lsr #31
   143e4:	str	r1, [sp, #88]	; 0x58
   143e8:	ldr	r1, [sp, #336]	; 0x150
   143ec:	ldr	fp, [sp, #12]
   143f0:	adds	r3, r1, fp
   143f4:	ldr	r1, [sp, #340]	; 0x154
   143f8:	ldr	fp, [sp, #16]
   143fc:	adc	r0, r1, fp
   14400:	ldr	r2, [sp, #92]	; 0x5c
   14404:	adds	r3, r3, r2
   14408:	ldr	fp, [sp, #100]	; 0x64
   1440c:	adc	r0, r0, fp
   14410:	ldr	r1, [sp, #80]	; 0x50
   14414:	eor	r6, r0, r1
   14418:	ldr	r7, [sp, #76]	; 0x4c
   1441c:	eor	ip, r3, r7
   14420:	ldr	r4, [sp, #36]	; 0x24
   14424:	adds	r1, r4, r6
   14428:	ldr	sl, [sp, #40]	; 0x28
   1442c:	adc	r4, sl, ip
   14430:	eor	r7, r1, r2
   14434:	eor	r5, r4, fp
   14438:	lsr	r8, r7, #24
   1443c:	orr	r2, r8, r5, lsl #8
   14440:	lsr	lr, r5, #24
   14444:	orr	lr, lr, r7, lsl #8
   14448:	ldr	fp, [sp, #288]	; 0x120
   1444c:	adds	r3, fp, r3
   14450:	ldr	fp, [sp, #292]	; 0x124
   14454:	adc	r0, fp, r0
   14458:	adds	fp, r3, r2
   1445c:	adc	r7, r0, lr
   14460:	str	fp, [sp, #12]
   14464:	eor	r6, r6, fp
   14468:	str	r7, [sp, #16]
   1446c:	eor	ip, ip, r7
   14470:	lsr	r3, r6, #16
   14474:	orr	fp, r3, ip, lsl #16
   14478:	lsr	ip, ip, #16
   1447c:	orr	r5, ip, r6, lsl #16
   14480:	str	fp, [sp, #76]	; 0x4c
   14484:	adds	r1, r1, fp
   14488:	str	r5, [sp, #80]	; 0x50
   1448c:	adc	r4, r4, r5
   14490:	eor	r2, r2, r1
   14494:	eor	lr, lr, r4
   14498:	lsl	r3, lr, #1
   1449c:	orr	r7, r3, r2, lsr #31
   144a0:	str	r7, [sp, #100]	; 0x64
   144a4:	lsl	r2, r2, #1
   144a8:	orr	r6, r2, lr, lsr #31
   144ac:	str	r6, [sp, #92]	; 0x5c
   144b0:	ldr	r2, [sp, #352]	; 0x160
   144b4:	ldr	r8, [sp, #28]
   144b8:	adds	r2, r2, r8
   144bc:	ldr	r7, [sp, #356]	; 0x164
   144c0:	ldr	r8, [sp, #32]
   144c4:	adc	lr, r7, r8
   144c8:	ldr	r6, [sp, #96]	; 0x60
   144cc:	adds	r2, r2, r6
   144d0:	ldr	ip, [sp, #112]	; 0x70
   144d4:	adc	lr, lr, ip
   144d8:	ldr	r7, [sp, #84]	; 0x54
   144dc:	eor	r7, lr, r7
   144e0:	ldr	r5, [sp, #72]	; 0x48
   144e4:	eor	r5, r2, r5
   144e8:	ldr	r0, [sp, #44]	; 0x2c
   144ec:	adds	r3, r0, r7
   144f0:	ldr	r0, [sp, #48]	; 0x30
   144f4:	adc	r0, r0, r5
   144f8:	eor	r8, r3, r6
   144fc:	eor	r6, r0, ip
   14500:	lsr	fp, r8, #24
   14504:	orr	ip, fp, r6, lsl #8
   14508:	lsr	r6, r6, #24
   1450c:	orr	sl, r6, r8, lsl #8
   14510:	ldr	r6, [sp, #312]	; 0x138
   14514:	adds	r2, r6, r2
   14518:	ldr	r6, [sp, #316]	; 0x13c
   1451c:	adc	lr, r6, lr
   14520:	adds	r6, r2, ip
   14524:	adc	lr, lr, sl
   14528:	mov	r2, lr
   1452c:	str	r6, [sp, #28]
   14530:	eor	r7, r7, r6
   14534:	str	r2, [sp, #32]
   14538:	eor	r5, r5, r2
   1453c:	lsr	r2, r7, #16
   14540:	orr	r6, r2, r5, lsl #16
   14544:	lsr	r5, r5, #16
   14548:	orr	fp, r5, r7, lsl #16
   1454c:	str	r6, [sp, #72]	; 0x48
   14550:	adds	r3, r3, r6
   14554:	adc	r0, r0, fp
   14558:	eor	ip, ip, r3
   1455c:	eor	sl, sl, r0
   14560:	lsl	r2, sl, #1
   14564:	orr	r5, r2, ip, lsr #31
   14568:	lsl	ip, ip, #1
   1456c:	orr	r8, ip, sl, lsr #31
   14570:	ldr	r7, [sp, #336]	; 0x150
   14574:	ldr	sl, [sp, #4]
   14578:	adds	r2, r7, sl
   1457c:	ldr	sl, [sp, #340]	; 0x154
   14580:	ldr	ip, [sp, #8]
   14584:	adc	r7, sl, ip
   14588:	adds	r2, r2, r8
   1458c:	adc	r7, r7, r5
   14590:	eor	r6, r7, r9
   14594:	ldr	sl, [sp, #68]	; 0x44
   14598:	eor	lr, r2, sl
   1459c:	adds	r1, r1, r6
   145a0:	adc	r4, r4, lr
   145a4:	eor	r8, r8, r1
   145a8:	eor	r5, r5, r4
   145ac:	lsr	sl, r8, #24
   145b0:	orr	ip, sl, r5, lsl #8
   145b4:	lsr	r5, r5, #24
   145b8:	orr	r9, r5, r8, lsl #8
   145bc:	ldr	r8, [sp, #352]	; 0x160
   145c0:	adds	r2, r8, r2
   145c4:	ldr	r8, [sp, #356]	; 0x164
   145c8:	adc	r7, r8, r7
   145cc:	adds	r8, r2, ip
   145d0:	adc	sl, r7, r9
   145d4:	str	r8, [sp, #4]
   145d8:	eor	r6, r6, r8
   145dc:	str	sl, [sp, #8]
   145e0:	eor	lr, lr, sl
   145e4:	lsr	r2, r6, #16
   145e8:	orr	r5, r2, lr, lsl #16
   145ec:	lsr	lr, lr, #16
   145f0:	orr	r7, lr, r6, lsl #16
   145f4:	str	r5, [sp, #68]	; 0x44
   145f8:	adds	r1, r1, r5
   145fc:	mov	lr, r1
   14600:	str	r7, [sp, #84]	; 0x54
   14604:	adc	r4, r4, r7
   14608:	str	lr, [sp, #36]	; 0x24
   1460c:	eor	ip, ip, lr
   14610:	str	r4, [sp, #40]	; 0x28
   14614:	eor	r9, r9, r4
   14618:	lsl	r2, r9, #1
   1461c:	orr	r7, r2, ip, lsr #31
   14620:	str	r7, [sp, #112]	; 0x70
   14624:	lsl	ip, ip, #1
   14628:	orr	r9, ip, r9, lsr #31
   1462c:	str	r9, [sp, #96]	; 0x60
   14630:	ldr	ip, [sp, #304]	; 0x130
   14634:	ldr	r9, [sp, #20]
   14638:	adds	r2, ip, r9
   1463c:	ldr	r9, [sp, #308]	; 0x134
   14640:	ldr	r5, [sp, #24]
   14644:	adc	r6, r9, r5
   14648:	ldr	ip, [sp, #120]	; 0x78
   1464c:	adds	r2, r2, ip
   14650:	ldr	r7, [sp, #128]	; 0x80
   14654:	adc	r6, r6, r7
   14658:	ldr	r5, [sp, #80]	; 0x50
   1465c:	eor	r5, r6, r5
   14660:	ldr	sl, [sp, #76]	; 0x4c
   14664:	eor	lr, r2, sl
   14668:	adds	r3, r3, r5
   1466c:	adc	r0, r0, lr
   14670:	eor	ip, r3, ip
   14674:	eor	r4, r0, r7
   14678:	lsr	r7, ip, #24
   1467c:	orr	r1, r7, r4, lsl #8
   14680:	lsr	r4, r4, #24
   14684:	orr	r8, r4, ip, lsl #8
   14688:	ldr	r9, [sp, #288]	; 0x120
   1468c:	adds	r2, r9, r2
   14690:	ldr	r9, [sp, #292]	; 0x124
   14694:	adc	r6, r9, r6
   14698:	adds	r9, r2, r1
   1469c:	adc	ip, r6, r8
   146a0:	str	r9, [sp, #20]
   146a4:	eor	r5, r5, r9
   146a8:	str	ip, [sp, #24]
   146ac:	eor	lr, lr, ip
   146b0:	lsr	r2, r5, #16
   146b4:	orr	r7, r2, lr, lsl #16
   146b8:	lsr	lr, lr, #16
   146bc:	orr	r5, lr, r5, lsl #16
   146c0:	mov	r9, r5
   146c4:	str	r7, [sp, #76]	; 0x4c
   146c8:	adds	r3, r3, r7
   146cc:	str	r9, [sp, #80]	; 0x50
   146d0:	adc	r0, r0, r9
   146d4:	mov	sl, r0
   146d8:	str	r3, [sp, #44]	; 0x2c
   146dc:	eor	r1, r1, r3
   146e0:	str	sl, [sp, #48]	; 0x30
   146e4:	eor	r8, r8, sl
   146e8:	lsl	r3, r8, #1
   146ec:	orr	r0, r3, r1, lsr #31
   146f0:	str	r0, [sp, #120]	; 0x78
   146f4:	lsl	r1, r1, #1
   146f8:	orr	r7, r1, r8, lsr #31
   146fc:	ldr	r0, [sp, #384]	; 0x180
   14700:	ldr	ip, [sp, #12]
   14704:	adds	r3, r0, ip
   14708:	ldr	r0, [sp, #388]	; 0x184
   1470c:	ldr	ip, [sp, #16]
   14710:	adc	r0, r0, ip
   14714:	ldr	r6, [sp, #88]	; 0x58
   14718:	adds	r3, r3, r6
   1471c:	ldr	r9, [sp, #116]	; 0x74
   14720:	adc	r0, r0, r9
   14724:	eor	r5, r0, fp
   14728:	ldr	sl, [sp, #72]	; 0x48
   1472c:	eor	ip, r3, sl
   14730:	ldr	lr, [sp, #52]	; 0x34
   14734:	adds	r2, lr, r5
   14738:	ldr	r4, [sp, #56]	; 0x38
   1473c:	adc	r4, r4, ip
   14740:	eor	r6, r2, r6
   14744:	eor	lr, r4, r9
   14748:	lsr	r9, r6, #24
   1474c:	orr	r1, r9, lr, lsl #8
   14750:	lsr	lr, lr, #24
   14754:	orr	r8, lr, r6, lsl #8
   14758:	ldr	fp, [sp, #376]	; 0x178
   1475c:	adds	r3, fp, r3
   14760:	ldr	fp, [sp, #380]	; 0x17c
   14764:	adc	r0, fp, r0
   14768:	adds	fp, r3, r1
   1476c:	adc	lr, r0, r8
   14770:	str	fp, [sp, #12]
   14774:	eor	r5, r5, fp
   14778:	str	lr, [sp, #16]
   1477c:	eor	ip, ip, lr
   14780:	lsr	r3, r5, #16
   14784:	orr	r6, r3, ip, lsl #16
   14788:	lsr	ip, ip, #16
   1478c:	orr	r0, ip, r5, lsl #16
   14790:	str	r6, [sp, #72]	; 0x48
   14794:	adds	r2, r2, r6
   14798:	str	r0, [sp, #88]	; 0x58
   1479c:	adc	r4, r4, r0
   147a0:	eor	r1, r1, r2
   147a4:	eor	r8, r8, r4
   147a8:	lsl	r3, r8, #1
   147ac:	orr	ip, r3, r1, lsr #31
   147b0:	str	ip, [sp, #124]	; 0x7c
   147b4:	lsl	r1, r1, #1
   147b8:	orr	r1, r1, r8, lsr #31
   147bc:	str	r1, [sp, #116]	; 0x74
   147c0:	ldr	r9, [sp, #368]	; 0x170
   147c4:	ldr	lr, [sp, #28]
   147c8:	adds	r1, r9, lr
   147cc:	ldr	r6, [sp, #372]	; 0x174
   147d0:	ldr	lr, [sp, #32]
   147d4:	adc	lr, r6, lr
   147d8:	ldr	r6, [sp, #92]	; 0x5c
   147dc:	adds	r1, r1, r6
   147e0:	ldr	ip, [sp, #100]	; 0x64
   147e4:	adc	lr, lr, ip
   147e8:	ldr	r0, [sp, #108]	; 0x6c
   147ec:	eor	r8, lr, r0
   147f0:	ldr	r3, [sp, #104]	; 0x68
   147f4:	eor	r5, r1, r3
   147f8:	ldr	r3, [sp, #60]	; 0x3c
   147fc:	adds	r3, r3, r8
   14800:	ldr	r0, [sp, #64]	; 0x40
   14804:	adc	r0, r0, r5
   14808:	eor	r9, r3, r6
   1480c:	eor	r6, r0, ip
   14810:	lsr	fp, r9, #24
   14814:	orr	ip, fp, r6, lsl #8
   14818:	lsr	r6, r6, #24
   1481c:	orr	sl, r6, r9, lsl #8
   14820:	ldr	r6, [sp, #392]	; 0x188
   14824:	adds	r1, r6, r1
   14828:	ldr	r6, [sp, #396]	; 0x18c
   1482c:	adc	lr, r6, lr
   14830:	adds	r6, r1, ip
   14834:	adc	lr, lr, sl
   14838:	mov	r1, lr
   1483c:	str	r6, [sp, #28]
   14840:	eor	r8, r8, r6
   14844:	str	r1, [sp, #32]
   14848:	eor	r5, r5, r1
   1484c:	lsr	r1, r8, #16
   14850:	orr	r9, r1, r5, lsl #16
   14854:	lsr	r5, r5, #16
   14858:	orr	fp, r5, r8, lsl #16
   1485c:	adds	r3, r3, r9
   14860:	adc	r0, r0, fp
   14864:	eor	ip, ip, r3
   14868:	eor	sl, sl, r0
   1486c:	lsl	r1, sl, #1
   14870:	orr	r8, r1, ip, lsr #31
   14874:	str	r8, [sp, #100]	; 0x64
   14878:	lsl	ip, ip, #1
   1487c:	orr	r6, ip, sl, lsr #31
   14880:	str	r6, [sp, #92]	; 0x5c
   14884:	ldr	ip, [sp, #296]	; 0x128
   14888:	ldr	r8, [sp, #4]
   1488c:	adds	r1, ip, r8
   14890:	ldr	r8, [sp, #300]	; 0x12c
   14894:	ldr	sl, [sp, #8]
   14898:	adc	r8, r8, sl
   1489c:	adds	r1, r1, r7
   148a0:	ldr	sl, [sp, #120]	; 0x78
   148a4:	adc	r8, r8, sl
   148a8:	eor	r6, r8, fp
   148ac:	eor	lr, r1, r9
   148b0:	adds	r2, r2, r6
   148b4:	adc	r4, r4, lr
   148b8:	eor	r7, r7, r2
   148bc:	eor	r5, r4, sl
   148c0:	lsr	sl, r7, #24
   148c4:	orr	ip, sl, r5, lsl #8
   148c8:	lsr	r5, r5, #24
   148cc:	orr	r9, r5, r7, lsl #8
   148d0:	ldr	r7, [sp, #328]	; 0x148
   148d4:	adds	r1, r7, r1
   148d8:	ldr	r7, [sp, #332]	; 0x14c
   148dc:	adc	r8, r7, r8
   148e0:	adds	r7, r1, ip
   148e4:	adc	r8, r8, r9
   148e8:	str	r7, [sp, #4]
   148ec:	eor	r6, r6, r7
   148f0:	str	r8, [sp, #8]
   148f4:	eor	lr, lr, r8
   148f8:	lsr	r1, r6, #16
   148fc:	orr	sl, r1, lr, lsl #16
   14900:	lsr	lr, lr, #16
   14904:	orr	r6, lr, r6, lsl #16
   14908:	str	sl, [sp, #104]	; 0x68
   1490c:	adds	r2, r2, sl
   14910:	mov	r8, r2
   14914:	str	r6, [sp, #108]	; 0x6c
   14918:	adc	r2, r4, r6
   1491c:	mov	r4, r2
   14920:	str	r8, [sp, #52]	; 0x34
   14924:	eor	ip, ip, r8
   14928:	str	r4, [sp, #56]	; 0x38
   1492c:	eor	r9, r9, r4
   14930:	lsl	r2, r9, #1
   14934:	orr	r2, r2, ip, lsr #31
   14938:	str	r2, [sp, #128]	; 0x80
   1493c:	lsl	ip, ip, #1
   14940:	orr	r2, ip, r9, lsr #31
   14944:	str	r2, [sp, #120]	; 0x78
   14948:	ldr	r9, [sp, #320]	; 0x140
   1494c:	ldr	r2, [sp, #20]
   14950:	adds	r2, r9, r2
   14954:	ldr	r9, [sp, #324]	; 0x144
   14958:	ldr	ip, [sp, #24]
   1495c:	adc	r6, r9, ip
   14960:	ldr	r4, [sp, #116]	; 0x74
   14964:	adds	r2, r2, r4
   14968:	ldr	r8, [sp, #124]	; 0x7c
   1496c:	adc	r6, r6, r8
   14970:	ldr	r1, [sp, #84]	; 0x54
   14974:	eor	lr, r6, r1
   14978:	ldr	r5, [sp, #68]	; 0x44
   1497c:	eor	ip, r2, r5
   14980:	adds	r3, r3, lr
   14984:	adc	r0, r0, ip
   14988:	eor	r7, r3, r4
   1498c:	eor	r4, r0, r8
   14990:	lsr	r8, r7, #24
   14994:	orr	r1, r8, r4, lsl #8
   14998:	lsr	r4, r4, #24
   1499c:	orr	r5, r4, r7, lsl #8
   149a0:	ldr	r9, [sp, #360]	; 0x168
   149a4:	adds	r2, r9, r2
   149a8:	ldr	r9, [sp, #364]	; 0x16c
   149ac:	adc	r6, r9, r6
   149b0:	adds	r9, r2, r1
   149b4:	adc	r2, r6, r5
   149b8:	str	r9, [sp, #20]
   149bc:	eor	lr, lr, r9
   149c0:	str	r2, [sp, #24]
   149c4:	eor	ip, ip, r2
   149c8:	lsr	r2, lr, #16
   149cc:	orr	r7, r2, ip, lsl #16
   149d0:	lsr	ip, ip, #16
   149d4:	orr	r9, ip, lr, lsl #16
   149d8:	str	r7, [sp, #68]	; 0x44
   149dc:	adds	r3, r3, r7
   149e0:	adc	r0, r0, r9
   149e4:	str	r3, [sp, #60]	; 0x3c
   149e8:	eor	r1, r1, r3
   149ec:	str	r0, [sp, #64]	; 0x40
   149f0:	eor	r5, r5, r0
   149f4:	lsl	r3, r5, #1
   149f8:	orr	r3, r3, r1, lsr #31
   149fc:	str	r3, [sp, #116]	; 0x74
   14a00:	lsl	r1, r1, #1
   14a04:	orr	r5, r1, r5, lsr #31
   14a08:	str	r5, [sp, #84]	; 0x54
   14a0c:	ldr	r5, [sp, #312]	; 0x138
   14a10:	ldr	fp, [sp, #12]
   14a14:	adds	r3, r5, fp
   14a18:	ldr	r5, [sp, #316]	; 0x13c
   14a1c:	ldr	fp, [sp, #16]
   14a20:	adc	r0, r5, fp
   14a24:	ldr	fp, [sp, #92]	; 0x5c
   14a28:	adds	r3, r3, fp
   14a2c:	ldr	r8, [sp, #100]	; 0x64
   14a30:	adc	r0, r0, r8
   14a34:	ldr	r2, [sp, #80]	; 0x50
   14a38:	eor	r6, r0, r2
   14a3c:	ldr	r5, [sp, #76]	; 0x4c
   14a40:	eor	ip, r3, r5
   14a44:	ldr	r1, [sp, #36]	; 0x24
   14a48:	adds	r1, r1, r6
   14a4c:	ldr	r4, [sp, #40]	; 0x28
   14a50:	adc	r4, r4, ip
   14a54:	eor	r7, r1, fp
   14a58:	eor	r5, r4, r8
   14a5c:	lsr	r8, r7, #24
   14a60:	orr	r2, r8, r5, lsl #8
   14a64:	lsr	lr, r5, #24
   14a68:	orr	lr, lr, r7, lsl #8
   14a6c:	ldr	fp, [sp, #280]	; 0x118
   14a70:	adds	r3, fp, r3
   14a74:	ldr	fp, [sp, #284]	; 0x11c
   14a78:	adc	r0, fp, r0
   14a7c:	adds	fp, r3, r2
   14a80:	adc	r5, r0, lr
   14a84:	str	fp, [sp, #12]
   14a88:	eor	r6, r6, fp
   14a8c:	str	r5, [sp, #16]
   14a90:	eor	ip, ip, r5
   14a94:	lsr	r3, r6, #16
   14a98:	orr	fp, r3, ip, lsl #16
   14a9c:	lsr	ip, ip, #16
   14aa0:	orr	r5, ip, r6, lsl #16
   14aa4:	str	fp, [sp, #76]	; 0x4c
   14aa8:	adds	r1, r1, fp
   14aac:	str	r5, [sp, #80]	; 0x50
   14ab0:	adc	r4, r4, r5
   14ab4:	eor	r2, r2, r1
   14ab8:	eor	lr, lr, r4
   14abc:	lsl	r3, lr, #1
   14ac0:	orr	r8, r3, r2, lsr #31
   14ac4:	str	r8, [sp, #100]	; 0x64
   14ac8:	lsl	r2, r2, #1
   14acc:	orr	fp, r2, lr, lsr #31
   14ad0:	str	fp, [sp, #92]	; 0x5c
   14ad4:	ldr	r8, [sp, #400]	; 0x190
   14ad8:	ldr	lr, [sp, #28]
   14adc:	adds	r2, r8, lr
   14ae0:	ldr	r6, [sp, #404]	; 0x194
   14ae4:	ldr	lr, [sp, #32]
   14ae8:	adc	lr, r6, lr
   14aec:	ldr	r6, [sp, #96]	; 0x60
   14af0:	adds	r2, r2, r6
   14af4:	ldr	ip, [sp, #112]	; 0x70
   14af8:	adc	lr, lr, ip
   14afc:	ldr	r0, [sp, #88]	; 0x58
   14b00:	eor	r7, lr, r0
   14b04:	ldr	r5, [sp, #72]	; 0x48
   14b08:	eor	r5, r2, r5
   14b0c:	ldr	r3, [sp, #44]	; 0x2c
   14b10:	adds	r3, r3, r7
   14b14:	ldr	sl, [sp, #48]	; 0x30
   14b18:	adc	r0, sl, r5
   14b1c:	eor	r8, r3, r6
   14b20:	eor	r6, r0, ip
   14b24:	lsr	fp, r8, #24
   14b28:	orr	ip, fp, r6, lsl #8
   14b2c:	lsr	r6, r6, #24
   14b30:	orr	sl, r6, r8, lsl #8
   14b34:	ldr	r6, [sp, #344]	; 0x158
   14b38:	adds	r2, r6, r2
   14b3c:	ldr	r6, [sp, #348]	; 0x15c
   14b40:	adc	lr, r6, lr
   14b44:	adds	r6, r2, ip
   14b48:	adc	lr, lr, sl
   14b4c:	str	r6, [sp, #28]
   14b50:	eor	r7, r7, r6
   14b54:	str	lr, [sp, #32]
   14b58:	eor	r5, r5, lr
   14b5c:	lsr	r2, r7, #16
   14b60:	orr	r6, r2, r5, lsl #16
   14b64:	lsr	r5, r5, #16
   14b68:	orr	fp, r5, r7, lsl #16
   14b6c:	str	r6, [sp, #72]	; 0x48
   14b70:	adds	r3, r3, r6
   14b74:	adc	r0, r0, fp
   14b78:	eor	ip, ip, r3
   14b7c:	eor	sl, sl, r0
   14b80:	lsl	r2, sl, #1
   14b84:	orr	r5, r2, ip, lsr #31
   14b88:	lsl	ip, ip, #1
   14b8c:	orr	r8, ip, sl, lsr #31
   14b90:	ldr	sl, [sp, #352]	; 0x160
   14b94:	ldr	r7, [sp, #4]
   14b98:	adds	r2, sl, r7
   14b9c:	ldr	r7, [sp, #356]	; 0x164
   14ba0:	ldr	ip, [sp, #8]
   14ba4:	adc	r7, r7, ip
   14ba8:	adds	r2, r2, r8
   14bac:	adc	r7, r7, r5
   14bb0:	eor	r6, r7, r9
   14bb4:	ldr	ip, [sp, #68]	; 0x44
   14bb8:	eor	lr, r2, ip
   14bbc:	adds	r1, r1, r6
   14bc0:	adc	r4, r4, lr
   14bc4:	eor	r8, r8, r1
   14bc8:	eor	r5, r5, r4
   14bcc:	lsr	sl, r8, #24
   14bd0:	orr	ip, sl, r5, lsl #8
   14bd4:	lsr	r5, r5, #24
   14bd8:	orr	r9, r5, r8, lsl #8
   14bdc:	ldr	r8, [sp, #280]	; 0x118
   14be0:	adds	r2, r8, r2
   14be4:	ldr	r8, [sp, #284]	; 0x11c
   14be8:	adc	r7, r8, r7
   14bec:	adds	r8, r2, ip
   14bf0:	adc	r7, r7, r9
   14bf4:	mov	sl, r7
   14bf8:	str	r8, [sp, #4]
   14bfc:	eor	r6, r6, r8
   14c00:	str	sl, [sp, #8]
   14c04:	eor	lr, lr, sl
   14c08:	lsr	r2, r6, #16
   14c0c:	orr	r7, r2, lr, lsl #16
   14c10:	lsr	lr, lr, #16
   14c14:	orr	lr, lr, r6, lsl #16
   14c18:	str	r7, [sp, #68]	; 0x44
   14c1c:	adds	r1, r1, r7
   14c20:	mov	r5, r1
   14c24:	str	lr, [sp, #88]	; 0x58
   14c28:	adc	r4, r4, lr
   14c2c:	mov	r1, r4
   14c30:	str	r5, [sp, #36]	; 0x24
   14c34:	eor	ip, ip, r5
   14c38:	str	r1, [sp, #40]	; 0x28
   14c3c:	eor	r9, r9, r1
   14c40:	lsl	r2, r9, #1
   14c44:	orr	r4, r2, ip, lsr #31
   14c48:	str	r4, [sp, #112]	; 0x70
   14c4c:	lsl	ip, ip, #1
   14c50:	orr	r8, ip, r9, lsr #31
   14c54:	str	r8, [sp, #96]	; 0x60
   14c58:	ldr	sl, [sp, #320]	; 0x140
   14c5c:	ldr	r9, [sp, #20]
   14c60:	adds	r2, sl, r9
   14c64:	ldr	r9, [sp, #324]	; 0x144
   14c68:	ldr	lr, [sp, #24]
   14c6c:	adc	r6, r9, lr
   14c70:	ldr	ip, [sp, #120]	; 0x78
   14c74:	adds	r2, r2, ip
   14c78:	ldr	r1, [sp, #128]	; 0x80
   14c7c:	adc	r6, r6, r1
   14c80:	ldr	r9, [sp, #80]	; 0x50
   14c84:	eor	r5, r6, r9
   14c88:	ldr	r7, [sp, #76]	; 0x4c
   14c8c:	eor	lr, r2, r7
   14c90:	adds	r3, r3, r5
   14c94:	adc	r0, r0, lr
   14c98:	eor	ip, r3, ip
   14c9c:	eor	r4, r0, r1
   14ca0:	lsr	r7, ip, #24
   14ca4:	orr	r1, r7, r4, lsl #8
   14ca8:	lsr	r4, r4, #24
   14cac:	orr	r8, r4, ip, lsl #8
   14cb0:	ldr	r9, [sp, #336]	; 0x150
   14cb4:	adds	r2, r9, r2
   14cb8:	ldr	r9, [sp, #340]	; 0x154
   14cbc:	adc	r6, r9, r6
   14cc0:	adds	r9, r2, r1
   14cc4:	adc	r2, r6, r8
   14cc8:	str	r9, [sp, #20]
   14ccc:	eor	r5, r5, r9
   14cd0:	str	r2, [sp, #24]
   14cd4:	eor	lr, lr, r2
   14cd8:	lsr	r2, r5, #16
   14cdc:	orr	r2, r2, lr, lsl #16
   14ce0:	lsr	lr, lr, #16
   14ce4:	orr	ip, lr, r5, lsl #16
   14ce8:	str	r2, [sp, #76]	; 0x4c
   14cec:	adds	r3, r3, r2
   14cf0:	mov	lr, r3
   14cf4:	str	ip, [sp, #80]	; 0x50
   14cf8:	adc	r0, r0, ip
   14cfc:	mov	r3, r0
   14d00:	str	lr, [sp, #44]	; 0x2c
   14d04:	eor	r1, r1, lr
   14d08:	str	r3, [sp, #48]	; 0x30
   14d0c:	eor	r8, r8, r3
   14d10:	lsl	r3, r8, #1
   14d14:	orr	sl, r3, r1, lsr #31
   14d18:	str	sl, [sp, #120]	; 0x78
   14d1c:	lsl	r1, r1, #1
   14d20:	orr	r7, r1, r8, lsr #31
   14d24:	ldr	r5, [sp, #296]	; 0x128
   14d28:	ldr	ip, [sp, #12]
   14d2c:	adds	r3, r5, ip
   14d30:	ldr	r5, [sp, #300]	; 0x12c
   14d34:	ldr	ip, [sp, #16]
   14d38:	adc	r0, r5, ip
   14d3c:	ldr	lr, [sp, #84]	; 0x54
   14d40:	adds	r3, r3, lr
   14d44:	ldr	r1, [sp, #116]	; 0x74
   14d48:	adc	r0, r0, r1
   14d4c:	eor	r5, r0, fp
   14d50:	ldr	ip, [sp, #72]	; 0x48
   14d54:	eor	ip, r3, ip
   14d58:	ldr	r8, [sp, #52]	; 0x34
   14d5c:	adds	r2, r8, r5
   14d60:	ldr	r4, [sp, #56]	; 0x38
   14d64:	adc	r4, r4, ip
   14d68:	eor	r6, r2, lr
   14d6c:	eor	lr, r4, r1
   14d70:	lsr	r9, r6, #24
   14d74:	orr	r1, r9, lr, lsl #8
   14d78:	lsr	lr, lr, #24
   14d7c:	orr	r8, lr, r6, lsl #8
   14d80:	ldr	fp, [sp, #312]	; 0x138
   14d84:	adds	r3, fp, r3
   14d88:	ldr	fp, [sp, #316]	; 0x13c
   14d8c:	adc	r0, fp, r0
   14d90:	adds	fp, r3, r1
   14d94:	adc	lr, r0, r8
   14d98:	str	fp, [sp, #12]
   14d9c:	eor	r5, r5, fp
   14da0:	str	lr, [sp, #16]
   14da4:	eor	ip, ip, lr
   14da8:	lsr	r3, r5, #16
   14dac:	orr	r6, r3, ip, lsl #16
   14db0:	lsr	ip, ip, #16
   14db4:	orr	ip, ip, r5, lsl #16
   14db8:	str	r6, [sp, #72]	; 0x48
   14dbc:	adds	r2, r2, r6
   14dc0:	str	ip, [sp, #84]	; 0x54
   14dc4:	adc	r4, r4, ip
   14dc8:	eor	r1, r1, r2
   14dcc:	eor	r8, r8, r4
   14dd0:	lsl	r3, r8, #1
   14dd4:	orr	r5, r3, r1, lsr #31
   14dd8:	str	r5, [sp, #124]	; 0x7c
   14ddc:	lsl	r1, r1, #1
   14de0:	orr	r8, r1, r8, lsr #31
   14de4:	str	r8, [sp, #116]	; 0x74
   14de8:	ldr	ip, [sp, #360]	; 0x168
   14dec:	ldr	r1, [sp, #28]
   14df0:	adds	r1, ip, r1
   14df4:	ldr	r6, [sp, #364]	; 0x16c
   14df8:	ldr	lr, [sp, #32]
   14dfc:	adc	lr, r6, lr
   14e00:	ldr	r9, [sp, #92]	; 0x5c
   14e04:	adds	r1, r1, r9
   14e08:	ldr	ip, [sp, #100]	; 0x64
   14e0c:	adc	lr, lr, ip
   14e10:	ldr	r6, [sp, #108]	; 0x6c
   14e14:	eor	r8, lr, r6
   14e18:	ldr	sl, [sp, #104]	; 0x68
   14e1c:	eor	r5, r1, sl
   14e20:	ldr	r3, [sp, #60]	; 0x3c
   14e24:	adds	r3, r3, r8
   14e28:	ldr	r0, [sp, #64]	; 0x40
   14e2c:	adc	r0, r0, r5
   14e30:	eor	r9, r3, r9
   14e34:	eor	r6, r0, ip
   14e38:	lsr	fp, r9, #24
   14e3c:	orr	ip, fp, r6, lsl #8
   14e40:	lsr	r6, r6, #24
   14e44:	orr	sl, r6, r9, lsl #8
   14e48:	ldr	r6, [sp, #400]	; 0x190
   14e4c:	adds	r1, r6, r1
   14e50:	ldr	r6, [sp, #404]	; 0x194
   14e54:	adc	lr, r6, lr
   14e58:	adds	r6, r1, ip
   14e5c:	adc	lr, lr, sl
   14e60:	str	r6, [sp, #28]
   14e64:	eor	r8, r8, r6
   14e68:	str	lr, [sp, #32]
   14e6c:	eor	r5, r5, lr
   14e70:	lsr	r1, r8, #16
   14e74:	orr	r9, r1, r5, lsl #16
   14e78:	lsr	r5, r5, #16
   14e7c:	orr	fp, r5, r8, lsl #16
   14e80:	adds	r3, r3, r9
   14e84:	adc	r0, r0, fp
   14e88:	eor	ip, ip, r3
   14e8c:	eor	sl, sl, r0
   14e90:	lsl	r1, sl, #1
   14e94:	orr	r1, r1, ip, lsr #31
   14e98:	str	r1, [sp, #100]	; 0x64
   14e9c:	lsl	ip, ip, #1
   14ea0:	orr	ip, ip, sl, lsr #31
   14ea4:	str	ip, [sp, #92]	; 0x5c
   14ea8:	ldr	r6, [sp, #392]	; 0x188
   14eac:	ldr	r8, [sp, #4]
   14eb0:	adds	r1, r6, r8
   14eb4:	ldr	r8, [sp, #396]	; 0x18c
   14eb8:	ldr	sl, [sp, #8]
   14ebc:	adc	r8, r8, sl
   14ec0:	adds	r1, r1, r7
   14ec4:	ldr	sl, [sp, #120]	; 0x78
   14ec8:	adc	r8, r8, sl
   14ecc:	eor	r6, r8, fp
   14ed0:	eor	lr, r1, r9
   14ed4:	adds	r2, r2, r6
   14ed8:	adc	r4, r4, lr
   14edc:	eor	r7, r7, r2
   14ee0:	eor	r5, r4, sl
   14ee4:	lsr	sl, r7, #24
   14ee8:	orr	ip, sl, r5, lsl #8
   14eec:	lsr	r5, r5, #24
   14ef0:	orr	r9, r5, r7, lsl #8
   14ef4:	ldr	sl, [sp, #288]	; 0x120
   14ef8:	adds	r1, sl, r1
   14efc:	ldr	sl, [sp, #292]	; 0x124
   14f00:	adc	r8, sl, r8
   14f04:	adds	sl, r1, ip
   14f08:	adc	r8, r8, r9
   14f0c:	str	sl, [sp, #4]
   14f10:	eor	r6, r6, sl
   14f14:	str	r8, [sp, #8]
   14f18:	eor	lr, lr, r8
   14f1c:	lsr	r1, r6, #16
   14f20:	orr	r7, r1, lr, lsl #16
   14f24:	lsr	lr, lr, #16
   14f28:	orr	r6, lr, r6, lsl #16
   14f2c:	str	r7, [sp, #104]	; 0x68
   14f30:	adds	r8, r2, r7
   14f34:	str	r6, [sp, #108]	; 0x6c
   14f38:	adc	r4, r4, r6
   14f3c:	mov	r2, r4
   14f40:	str	r8, [sp, #52]	; 0x34
   14f44:	eor	ip, ip, r8
   14f48:	str	r2, [sp, #56]	; 0x38
   14f4c:	eor	r9, r9, r2
   14f50:	lsl	r2, r9, #1
   14f54:	orr	r4, r2, ip, lsr #31
   14f58:	str	r4, [sp, #128]	; 0x80
   14f5c:	lsl	ip, ip, #1
   14f60:	orr	r5, ip, r9, lsr #31
   14f64:	str	r5, [sp, #120]	; 0x78
   14f68:	ldr	r8, [sp, #368]	; 0x170
   14f6c:	ldr	r9, [sp, #20]
   14f70:	adds	r2, r8, r9
   14f74:	ldr	r8, [sp, #372]	; 0x174
   14f78:	ldr	r9, [sp, #24]
   14f7c:	adc	r6, r8, r9
   14f80:	ldr	sl, [sp, #116]	; 0x74
   14f84:	adds	r2, r2, sl
   14f88:	ldr	r9, [sp, #124]	; 0x7c
   14f8c:	adc	r6, r6, r9
   14f90:	ldr	r1, [sp, #88]	; 0x58
   14f94:	eor	lr, r6, r1
   14f98:	ldr	r7, [sp, #68]	; 0x44
   14f9c:	eor	ip, r2, r7
   14fa0:	adds	r3, r3, lr
   14fa4:	adc	r0, r0, ip
   14fa8:	eor	r7, r3, sl
   14fac:	eor	r4, r0, r9
   14fb0:	lsr	r8, r7, #24
   14fb4:	orr	r1, r8, r4, lsl #8
   14fb8:	lsr	r4, r4, #24
   14fbc:	orr	r5, r4, r7, lsl #8
   14fc0:	ldr	r9, [sp, #376]	; 0x178
   14fc4:	adds	r2, r9, r2
   14fc8:	ldr	r9, [sp, #380]	; 0x17c
   14fcc:	adc	r6, r9, r6
   14fd0:	adds	r9, r2, r1
   14fd4:	adc	r7, r6, r5
   14fd8:	str	r9, [sp, #20]
   14fdc:	eor	lr, lr, r9
   14fe0:	str	r7, [sp, #24]
   14fe4:	eor	ip, ip, r7
   14fe8:	lsr	r2, lr, #16
   14fec:	orr	r8, r2, ip, lsl #16
   14ff0:	lsr	ip, ip, #16
   14ff4:	orr	r9, ip, lr, lsl #16
   14ff8:	str	r8, [sp, #68]	; 0x44
   14ffc:	adds	r3, r3, r8
   15000:	adc	r0, r0, r9
   15004:	mov	r2, r0
   15008:	str	r3, [sp, #60]	; 0x3c
   1500c:	eor	r1, r1, r3
   15010:	str	r2, [sp, #64]	; 0x40
   15014:	eor	r5, r5, r2
   15018:	lsl	r3, r5, #1
   1501c:	orr	r7, r3, r1, lsr #31
   15020:	str	r7, [sp, #116]	; 0x74
   15024:	lsl	r1, r1, #1
   15028:	orr	r1, r1, r5, lsr #31
   1502c:	str	r1, [sp, #88]	; 0x58
   15030:	ldr	r1, [sp, #328]	; 0x148
   15034:	ldr	fp, [sp, #12]
   15038:	adds	r3, r1, fp
   1503c:	ldr	r1, [sp, #332]	; 0x14c
   15040:	ldr	fp, [sp, #16]
   15044:	adc	r0, r1, fp
   15048:	ldr	fp, [sp, #92]	; 0x5c
   1504c:	adds	r3, r3, fp
   15050:	ldr	sl, [sp, #100]	; 0x64
   15054:	adc	r0, r0, sl
   15058:	ldr	lr, [sp, #80]	; 0x50
   1505c:	eor	r6, r0, lr
   15060:	ldr	lr, [sp, #76]	; 0x4c
   15064:	eor	ip, r3, lr
   15068:	ldr	r4, [sp, #36]	; 0x24
   1506c:	adds	r1, r4, r6
   15070:	ldr	r2, [sp, #40]	; 0x28
   15074:	adc	r4, r2, ip
   15078:	eor	r7, r1, fp
   1507c:	eor	r5, r4, sl
   15080:	lsr	r8, r7, #24
   15084:	orr	r2, r8, r5, lsl #8
   15088:	lsr	lr, r5, #24
   1508c:	orr	lr, lr, r7, lsl #8
   15090:	ldr	fp, [sp, #344]	; 0x158
   15094:	adds	r3, fp, r3
   15098:	ldr	fp, [sp, #348]	; 0x15c
   1509c:	adc	r0, fp, r0
   150a0:	adds	fp, r3, r2
   150a4:	adc	r5, r0, lr
   150a8:	str	fp, [sp, #12]
   150ac:	eor	r6, r6, fp
   150b0:	str	r5, [sp, #16]
   150b4:	eor	ip, ip, r5
   150b8:	lsr	r3, r6, #16
   150bc:	orr	fp, r3, ip, lsl #16
   150c0:	lsr	ip, ip, #16
   150c4:	orr	r3, ip, r6, lsl #16
   150c8:	str	fp, [sp, #76]	; 0x4c
   150cc:	adds	r1, r1, fp
   150d0:	str	r3, [sp, #80]	; 0x50
   150d4:	adc	r4, r4, r3
   150d8:	eor	r2, r2, r1
   150dc:	eor	lr, lr, r4
   150e0:	lsl	r3, lr, #1
   150e4:	orr	r5, r3, r2, lsr #31
   150e8:	str	r5, [sp, #100]	; 0x64
   150ec:	lsl	r2, r2, #1
   150f0:	orr	r2, r2, lr, lsr #31
   150f4:	str	r2, [sp, #92]	; 0x5c
   150f8:	ldr	sl, [sp, #304]	; 0x130
   150fc:	ldr	r2, [sp, #28]
   15100:	adds	r2, sl, r2
   15104:	ldr	r6, [sp, #308]	; 0x134
   15108:	ldr	lr, [sp, #32]
   1510c:	adc	lr, r6, lr
   15110:	ldr	r6, [sp, #96]	; 0x60
   15114:	adds	r2, r2, r6
   15118:	ldr	ip, [sp, #112]	; 0x70
   1511c:	adc	lr, lr, ip
   15120:	ldr	r7, [sp, #84]	; 0x54
   15124:	eor	r7, lr, r7
   15128:	ldr	r5, [sp, #72]	; 0x48
   1512c:	eor	r5, r2, r5
   15130:	ldr	r0, [sp, #44]	; 0x2c
   15134:	adds	r3, r0, r7
   15138:	ldr	r0, [sp, #48]	; 0x30
   1513c:	adc	r0, r0, r5
   15140:	eor	r8, r3, r6
   15144:	eor	r6, r0, ip
   15148:	lsr	fp, r8, #24
   1514c:	orr	ip, fp, r6, lsl #8
   15150:	lsr	r6, r6, #24
   15154:	orr	sl, r6, r8, lsl #8
   15158:	ldr	r6, [sp, #384]	; 0x180
   1515c:	adds	r2, r6, r2
   15160:	ldr	r6, [sp, #388]	; 0x184
   15164:	adc	lr, r6, lr
   15168:	adds	r6, r2, ip
   1516c:	adc	r2, lr, sl
   15170:	str	r6, [sp, #28]
   15174:	eor	r7, r7, r6
   15178:	str	r2, [sp, #32]
   1517c:	eor	r5, r5, r2
   15180:	lsr	r2, r7, #16
   15184:	orr	lr, r2, r5, lsl #16
   15188:	lsr	r5, r5, #16
   1518c:	orr	fp, r5, r7, lsl #16
   15190:	str	lr, [sp, #72]	; 0x48
   15194:	adds	r3, r3, lr
   15198:	adc	r0, r0, fp
   1519c:	eor	ip, ip, r3
   151a0:	eor	sl, sl, r0
   151a4:	lsl	r2, sl, #1
   151a8:	orr	r5, r2, ip, lsr #31
   151ac:	lsl	ip, ip, #1
   151b0:	orr	r8, ip, sl, lsr #31
   151b4:	ldr	ip, [sp, #296]	; 0x128
   151b8:	ldr	sl, [sp, #4]
   151bc:	adds	r2, ip, sl
   151c0:	ldr	sl, [sp, #300]	; 0x12c
   151c4:	ldr	ip, [sp, #8]
   151c8:	adc	r7, sl, ip
   151cc:	adds	r2, r2, r8
   151d0:	adc	r7, r7, r5
   151d4:	eor	r6, r7, r9
   151d8:	ldr	sl, [sp, #68]	; 0x44
   151dc:	eor	lr, r2, sl
   151e0:	adds	r1, r1, r6
   151e4:	adc	r4, r4, lr
   151e8:	eor	r8, r8, r1
   151ec:	eor	r5, r5, r4
   151f0:	lsr	sl, r8, #24
   151f4:	orr	ip, sl, r5, lsl #8
   151f8:	lsr	r5, r5, #24
   151fc:	orr	r9, r5, r8, lsl #8
   15200:	ldr	r8, [sp, #376]	; 0x178
   15204:	adds	r2, r8, r2
   15208:	ldr	r8, [sp, #380]	; 0x17c
   1520c:	adc	r7, r8, r7
   15210:	adds	r8, r2, ip
   15214:	adc	sl, r7, r9
   15218:	str	r8, [sp, #4]
   1521c:	eor	r6, r6, r8
   15220:	str	sl, [sp, #8]
   15224:	eor	lr, lr, sl
   15228:	lsr	r2, r6, #16
   1522c:	orr	r8, r2, lr, lsl #16
   15230:	lsr	lr, lr, #16
   15234:	orr	sl, lr, r6, lsl #16
   15238:	str	r8, [sp, #68]	; 0x44
   1523c:	adds	r1, r1, r8
   15240:	mov	r5, r1
   15244:	str	sl, [sp, #84]	; 0x54
   15248:	adc	r4, r4, sl
   1524c:	mov	r1, r4
   15250:	str	r5, [sp, #36]	; 0x24
   15254:	eor	ip, ip, r5
   15258:	str	r1, [sp, #40]	; 0x28
   1525c:	eor	r9, r9, r1
   15260:	lsl	r2, r9, #1
   15264:	orr	r4, r2, ip, lsr #31
   15268:	str	r4, [sp, #112]	; 0x70
   1526c:	lsl	ip, ip, #1
   15270:	orr	ip, ip, r9, lsr #31
   15274:	str	ip, [sp, #96]	; 0x60
   15278:	ldr	ip, [sp, #328]	; 0x148
   1527c:	ldr	lr, [sp, #20]
   15280:	adds	r2, ip, lr
   15284:	ldr	r9, [sp, #332]	; 0x14c
   15288:	ldr	lr, [sp, #24]
   1528c:	adc	r6, r9, lr
   15290:	ldr	ip, [sp, #120]	; 0x78
   15294:	adds	r2, r2, ip
   15298:	ldr	r9, [sp, #128]	; 0x80
   1529c:	adc	r6, r6, r9
   152a0:	ldr	lr, [sp, #80]	; 0x50
   152a4:	eor	r5, r6, lr
   152a8:	ldr	sl, [sp, #76]	; 0x4c
   152ac:	eor	lr, r2, sl
   152b0:	adds	r3, r3, r5
   152b4:	adc	r0, r0, lr
   152b8:	eor	ip, r3, ip
   152bc:	eor	r4, r0, r9
   152c0:	lsr	r7, ip, #24
   152c4:	orr	r1, r7, r4, lsl #8
   152c8:	lsr	r4, r4, #24
   152cc:	orr	r8, r4, ip, lsl #8
   152d0:	ldr	r9, [sp, #360]	; 0x168
   152d4:	adds	r2, r9, r2
   152d8:	ldr	r9, [sp, #364]	; 0x16c
   152dc:	adc	r6, r9, r6
   152e0:	adds	r9, r2, r1
   152e4:	adc	r7, r6, r8
   152e8:	str	r9, [sp, #20]
   152ec:	eor	r5, r5, r9
   152f0:	str	r7, [sp, #24]
   152f4:	eor	lr, lr, r7
   152f8:	lsr	r2, r5, #16
   152fc:	orr	ip, r2, lr, lsl #16
   15300:	lsr	lr, lr, #16
   15304:	orr	lr, lr, r5, lsl #16
   15308:	mov	sl, lr
   1530c:	str	ip, [sp, #76]	; 0x4c
   15310:	adds	r3, r3, ip
   15314:	mov	ip, r3
   15318:	str	sl, [sp, #80]	; 0x50
   1531c:	adc	r3, r0, sl
   15320:	str	ip, [sp, #44]	; 0x2c
   15324:	eor	r1, r1, ip
   15328:	str	r3, [sp, #48]	; 0x30
   1532c:	eor	r8, r8, r3
   15330:	lsl	r3, r8, #1
   15334:	orr	r5, r3, r1, lsr #31
   15338:	str	r5, [sp, #120]	; 0x78
   1533c:	lsl	r1, r1, #1
   15340:	orr	r7, r1, r8, lsr #31
   15344:	ldr	lr, [sp, #280]	; 0x118
   15348:	ldr	ip, [sp, #12]
   1534c:	adds	r3, lr, ip
   15350:	ldr	ip, [sp, #284]	; 0x11c
   15354:	ldr	r5, [sp, #16]
   15358:	adc	r0, ip, r5
   1535c:	ldr	r9, [sp, #88]	; 0x58
   15360:	adds	r3, r3, r9
   15364:	ldr	lr, [sp, #116]	; 0x74
   15368:	adc	r0, r0, lr
   1536c:	eor	r5, r0, fp
   15370:	ldr	sl, [sp, #72]	; 0x48
   15374:	eor	ip, r3, sl
   15378:	ldr	r4, [sp, #52]	; 0x34
   1537c:	adds	r2, r4, r5
   15380:	ldr	r1, [sp, #56]	; 0x38
   15384:	adc	r4, r1, ip
   15388:	eor	r6, r2, r9
   1538c:	eor	lr, r4, lr
   15390:	lsr	r9, r6, #24
   15394:	orr	r1, r9, lr, lsl #8
   15398:	lsr	lr, lr, #24
   1539c:	orr	r8, lr, r6, lsl #8
   153a0:	ldr	fp, [sp, #368]	; 0x170
   153a4:	adds	r3, fp, r3
   153a8:	ldr	fp, [sp, #372]	; 0x174
   153ac:	adc	r0, fp, r0
   153b0:	adds	fp, r3, r1
   153b4:	adc	lr, r0, r8
   153b8:	str	fp, [sp, #12]
   153bc:	eor	r5, r5, fp
   153c0:	str	lr, [sp, #16]
   153c4:	eor	ip, ip, lr
   153c8:	lsr	r3, r5, #16
   153cc:	orr	fp, r3, ip, lsl #16
   153d0:	lsr	ip, ip, #16
   153d4:	orr	r5, ip, r5, lsl #16
   153d8:	str	fp, [sp, #72]	; 0x48
   153dc:	adds	r2, r2, fp
   153e0:	str	r5, [sp, #88]	; 0x58
   153e4:	adc	r4, r4, r5
   153e8:	eor	r1, r1, r2
   153ec:	eor	r8, r8, r4
   153f0:	lsl	r3, r8, #1
   153f4:	orr	r9, r3, r1, lsr #31
   153f8:	str	r9, [sp, #124]	; 0x7c
   153fc:	lsl	r1, r1, #1
   15400:	orr	r1, r1, r8, lsr #31
   15404:	str	r1, [sp, #116]	; 0x74
   15408:	ldr	ip, [sp, #344]	; 0x158
   1540c:	ldr	r1, [sp, #28]
   15410:	adds	r1, ip, r1
   15414:	ldr	r6, [sp, #348]	; 0x15c
   15418:	ldr	lr, [sp, #32]
   1541c:	adc	lr, r6, lr
   15420:	ldr	r9, [sp, #92]	; 0x5c
   15424:	adds	r1, r1, r9
   15428:	ldr	ip, [sp, #100]	; 0x64
   1542c:	adc	lr, lr, ip
   15430:	ldr	r6, [sp, #108]	; 0x6c
   15434:	eor	r8, lr, r6
   15438:	ldr	r3, [sp, #104]	; 0x68
   1543c:	eor	r5, r1, r3
   15440:	ldr	r3, [sp, #60]	; 0x3c
   15444:	adds	r3, r3, r8
   15448:	ldr	r0, [sp, #64]	; 0x40
   1544c:	adc	r0, r0, r5
   15450:	eor	r9, r3, r9
   15454:	eor	r6, r0, ip
   15458:	lsr	fp, r9, #24
   1545c:	orr	ip, fp, r6, lsl #8
   15460:	lsr	r6, r6, #24
   15464:	orr	sl, r6, r9, lsl #8
   15468:	ldr	r6, [sp, #304]	; 0x130
   1546c:	adds	r1, r6, r1
   15470:	ldr	r6, [sp, #308]	; 0x134
   15474:	adc	lr, r6, lr
   15478:	adds	r6, r1, ip
   1547c:	adc	lr, lr, sl
   15480:	str	r6, [sp, #28]
   15484:	eor	r8, r8, r6
   15488:	str	lr, [sp, #32]
   1548c:	eor	r5, r5, lr
   15490:	lsr	r1, r8, #16
   15494:	orr	r9, r1, r5, lsl #16
   15498:	lsr	r5, r5, #16
   1549c:	orr	fp, r5, r8, lsl #16
   154a0:	adds	r3, r3, r9
   154a4:	adc	r0, r0, fp
   154a8:	eor	ip, ip, r3
   154ac:	eor	sl, sl, r0
   154b0:	lsl	r1, sl, #1
   154b4:	orr	r6, r1, ip, lsr #31
   154b8:	str	r6, [sp, #100]	; 0x64
   154bc:	lsl	ip, ip, #1
   154c0:	orr	ip, ip, sl, lsr #31
   154c4:	str	ip, [sp, #92]	; 0x5c
   154c8:	ldr	r1, [sp, #312]	; 0x138
   154cc:	ldr	r8, [sp, #4]
   154d0:	adds	r1, r1, r8
   154d4:	ldr	r8, [sp, #316]	; 0x13c
   154d8:	ldr	sl, [sp, #8]
   154dc:	adc	r8, r8, sl
   154e0:	adds	r1, r1, r7
   154e4:	ldr	r5, [sp, #120]	; 0x78
   154e8:	adc	r8, r8, r5
   154ec:	eor	r6, r8, fp
   154f0:	eor	lr, r1, r9
   154f4:	adds	r2, r2, r6
   154f8:	adc	r4, r4, lr
   154fc:	eor	r7, r7, r2
   15500:	eor	r5, r4, r5
   15504:	lsr	sl, r7, #24
   15508:	orr	ip, sl, r5, lsl #8
   1550c:	lsr	r5, r5, #24
   15510:	orr	r9, r5, r7, lsl #8
   15514:	ldr	sl, [sp, #384]	; 0x180
   15518:	adds	r1, sl, r1
   1551c:	ldr	sl, [sp, #388]	; 0x184
   15520:	adc	r8, sl, r8
   15524:	adds	sl, r1, ip
   15528:	adc	r5, r8, r9
   1552c:	str	sl, [sp, #4]
   15530:	eor	r6, r6, sl
   15534:	str	r5, [sp, #8]
   15538:	eor	lr, lr, r5
   1553c:	lsr	r1, r6, #16
   15540:	orr	r8, r1, lr, lsl #16
   15544:	lsr	lr, lr, #16
   15548:	orr	r1, lr, r6, lsl #16
   1554c:	str	r8, [sp, #104]	; 0x68
   15550:	adds	r2, r2, r8
   15554:	mov	r6, r2
   15558:	str	r1, [sp, #108]	; 0x6c
   1555c:	adc	r4, r4, r1
   15560:	str	r6, [sp, #52]	; 0x34
   15564:	eor	ip, ip, r6
   15568:	str	r4, [sp, #56]	; 0x38
   1556c:	eor	r9, r9, r4
   15570:	lsl	r2, r9, #1
   15574:	orr	r2, r2, ip, lsr #31
   15578:	str	r2, [sp, #128]	; 0x80
   1557c:	lsl	ip, ip, #1
   15580:	orr	r2, ip, r9, lsr #31
   15584:	str	r2, [sp, #120]	; 0x78
   15588:	ldr	r2, [sp, #336]	; 0x150
   1558c:	ldr	r9, [sp, #20]
   15590:	adds	r2, r2, r9
   15594:	ldr	r9, [sp, #340]	; 0x154
   15598:	ldr	r7, [sp, #24]
   1559c:	adc	r6, r9, r7
   155a0:	ldr	r7, [sp, #116]	; 0x74
   155a4:	adds	r2, r2, r7
   155a8:	ldr	r9, [sp, #124]	; 0x7c
   155ac:	adc	r6, r6, r9
   155b0:	ldr	r1, [sp, #84]	; 0x54
   155b4:	eor	lr, r6, r1
   155b8:	ldr	r8, [sp, #68]	; 0x44
   155bc:	eor	ip, r2, r8
   155c0:	adds	r3, r3, lr
   155c4:	adc	r0, r0, ip
   155c8:	eor	r7, r3, r7
   155cc:	eor	r4, r0, r9
   155d0:	lsr	r8, r7, #24
   155d4:	orr	r1, r8, r4, lsl #8
   155d8:	lsr	r4, r4, #24
   155dc:	orr	r5, r4, r7, lsl #8
   155e0:	ldr	r9, [sp, #320]	; 0x140
   155e4:	adds	r2, r9, r2
   155e8:	ldr	r9, [sp, #324]	; 0x144
   155ec:	adc	r6, r9, r6
   155f0:	adds	r9, r2, r1
   155f4:	adc	r7, r6, r5
   155f8:	str	r9, [sp, #20]
   155fc:	eor	lr, lr, r9
   15600:	str	r7, [sp, #24]
   15604:	eor	ip, ip, r7
   15608:	lsr	r2, lr, #16
   1560c:	orr	r8, r2, ip, lsl #16
   15610:	lsr	ip, ip, #16
   15614:	orr	r9, ip, lr, lsl #16
   15618:	str	r8, [sp, #68]	; 0x44
   1561c:	adds	r3, r3, r8
   15620:	adc	r0, r0, r9
   15624:	mov	r7, r0
   15628:	str	r3, [sp, #60]	; 0x3c
   1562c:	eor	r1, r1, r3
   15630:	str	r7, [sp, #64]	; 0x40
   15634:	eor	r5, r5, r7
   15638:	lsl	r3, r5, #1
   1563c:	orr	r8, r3, r1, lsr #31
   15640:	str	r8, [sp, #116]	; 0x74
   15644:	lsl	r1, r1, #1
   15648:	orr	r1, r1, r5, lsr #31
   1564c:	str	r1, [sp, #84]	; 0x54
   15650:	ldr	r1, [sp, #400]	; 0x190
   15654:	ldr	fp, [sp, #12]
   15658:	adds	r3, r1, fp
   1565c:	ldr	fp, [sp, #404]	; 0x194
   15660:	ldr	r7, [sp, #16]
   15664:	adc	r0, fp, r7
   15668:	ldr	r7, [sp, #92]	; 0x5c
   1566c:	adds	r3, r3, r7
   15670:	ldr	r8, [sp, #100]	; 0x64
   15674:	adc	r0, r0, r8
   15678:	ldr	sl, [sp, #80]	; 0x50
   1567c:	eor	r6, r0, sl
   15680:	ldr	lr, [sp, #76]	; 0x4c
   15684:	eor	ip, r3, lr
   15688:	ldr	r4, [sp, #36]	; 0x24
   1568c:	adds	r1, r4, r6
   15690:	ldr	r2, [sp, #40]	; 0x28
   15694:	adc	r4, r2, ip
   15698:	eor	r7, r1, r7
   1569c:	eor	r5, r4, r8
   156a0:	lsr	r8, r7, #24
   156a4:	orr	r2, r8, r5, lsl #8
   156a8:	lsr	lr, r5, #24
   156ac:	orr	lr, lr, r7, lsl #8
   156b0:	ldr	fp, [sp, #392]	; 0x188
   156b4:	adds	r3, fp, r3
   156b8:	ldr	fp, [sp, #396]	; 0x18c
   156bc:	adc	r0, fp, r0
   156c0:	adds	fp, r3, r2
   156c4:	adc	r7, r0, lr
   156c8:	str	fp, [sp, #12]
   156cc:	eor	r6, r6, fp
   156d0:	str	r7, [sp, #16]
   156d4:	eor	ip, ip, r7
   156d8:	lsr	r3, r6, #16
   156dc:	orr	sl, r3, ip, lsl #16
   156e0:	lsr	ip, ip, #16
   156e4:	orr	r3, ip, r6, lsl #16
   156e8:	str	sl, [sp, #76]	; 0x4c
   156ec:	adds	r1, r1, sl
   156f0:	str	r3, [sp, #80]	; 0x50
   156f4:	adc	r4, r4, r3
   156f8:	eor	r2, r2, r1
   156fc:	eor	lr, lr, r4
   15700:	lsl	r3, lr, #1
   15704:	orr	r8, r3, r2, lsr #31
   15708:	str	r8, [sp, #100]	; 0x64
   1570c:	lsl	r2, r2, #1
   15710:	orr	lr, r2, lr, lsr #31
   15714:	str	lr, [sp, #92]	; 0x5c
   15718:	ldr	lr, [sp, #288]	; 0x120
   1571c:	ldr	r2, [sp, #28]
   15720:	adds	r2, lr, r2
   15724:	ldr	r6, [sp, #292]	; 0x124
   15728:	ldr	lr, [sp, #32]
   1572c:	adc	lr, r6, lr
   15730:	ldr	r6, [sp, #96]	; 0x60
   15734:	adds	r2, r2, r6
   15738:	ldr	ip, [sp, #112]	; 0x70
   1573c:	adc	lr, lr, ip
   15740:	ldr	r5, [sp, #88]	; 0x58
   15744:	eor	r7, lr, r5
   15748:	ldr	fp, [sp, #72]	; 0x48
   1574c:	eor	r5, r2, fp
   15750:	ldr	r0, [sp, #44]	; 0x2c
   15754:	adds	r3, r0, r7
   15758:	ldr	r0, [sp, #48]	; 0x30
   1575c:	adc	r0, r0, r5
   15760:	eor	r8, r3, r6
   15764:	eor	r6, r0, ip
   15768:	lsr	fp, r8, #24
   1576c:	orr	ip, fp, r6, lsl #8
   15770:	lsr	r6, r6, #24
   15774:	orr	sl, r6, r8, lsl #8
   15778:	ldr	fp, [sp, #352]	; 0x160
   1577c:	adds	r2, fp, r2
   15780:	ldr	fp, [sp, #356]	; 0x164
   15784:	adc	lr, fp, lr
   15788:	adds	fp, r2, ip
   1578c:	adc	lr, lr, sl
   15790:	str	fp, [sp, #28]
   15794:	eor	r7, r7, fp
   15798:	str	lr, [sp, #32]
   1579c:	eor	r5, r5, lr
   157a0:	lsr	r2, r7, #16
   157a4:	orr	r6, r2, r5, lsl #16
   157a8:	lsr	r5, r5, #16
   157ac:	orr	fp, r5, r7, lsl #16
   157b0:	str	r6, [sp, #72]	; 0x48
   157b4:	adds	r3, r3, r6
   157b8:	adc	r0, r0, fp
   157bc:	eor	ip, ip, r3
   157c0:	eor	sl, sl, r0
   157c4:	lsl	r2, sl, #1
   157c8:	orr	r5, r2, ip, lsr #31
   157cc:	lsl	ip, ip, #1
   157d0:	orr	r8, ip, sl, lsr #31
   157d4:	ldr	r2, [sp, #376]	; 0x178
   157d8:	ldr	sl, [sp, #4]
   157dc:	adds	r2, r2, sl
   157e0:	ldr	r6, [sp, #380]	; 0x17c
   157e4:	ldr	ip, [sp, #8]
   157e8:	adc	r7, r6, ip
   157ec:	adds	r2, r2, r8
   157f0:	adc	r7, r7, r5
   157f4:	eor	r6, r7, r9
   157f8:	ldr	sl, [sp, #68]	; 0x44
   157fc:	eor	lr, r2, sl
   15800:	adds	r1, r1, r6
   15804:	adc	r4, r4, lr
   15808:	eor	r8, r8, r1
   1580c:	eor	r5, r5, r4
   15810:	lsr	sl, r8, #24
   15814:	orr	ip, sl, r5, lsl #8
   15818:	lsr	r5, r5, #24
   1581c:	orr	r9, r5, r8, lsl #8
   15820:	ldr	r5, [sp, #320]	; 0x140
   15824:	adds	r2, r5, r2
   15828:	ldr	r5, [sp, #324]	; 0x144
   1582c:	adc	r7, r5, r7
   15830:	adds	r5, r2, ip
   15834:	adc	r2, r7, r9
   15838:	str	r5, [sp, #4]
   1583c:	eor	r6, r6, r5
   15840:	str	r2, [sp, #8]
   15844:	eor	lr, lr, r2
   15848:	lsr	r2, r6, #16
   1584c:	orr	r5, r2, lr, lsl #16
   15850:	lsr	lr, lr, #16
   15854:	orr	r8, lr, r6, lsl #16
   15858:	str	r5, [sp, #68]	; 0x44
   1585c:	adds	r1, r1, r5
   15860:	mov	sl, r1
   15864:	str	r8, [sp, #88]	; 0x58
   15868:	adc	r1, r4, r8
   1586c:	str	sl, [sp, #36]	; 0x24
   15870:	eor	ip, ip, sl
   15874:	str	r1, [sp, #40]	; 0x28
   15878:	eor	r9, r9, r1
   1587c:	lsl	r2, r9, #1
   15880:	orr	r4, r2, ip, lsr #31
   15884:	str	r4, [sp, #112]	; 0x70
   15888:	lsl	ip, ip, #1
   1588c:	orr	r9, ip, r9, lsr #31
   15890:	str	r9, [sp, #96]	; 0x60
   15894:	ldr	r8, [sp, #288]	; 0x120
   15898:	ldr	r9, [sp, #20]
   1589c:	adds	r2, r8, r9
   158a0:	ldr	r9, [sp, #292]	; 0x124
   158a4:	ldr	lr, [sp, #24]
   158a8:	adc	r6, r9, lr
   158ac:	ldr	ip, [sp, #120]	; 0x78
   158b0:	adds	r2, r2, ip
   158b4:	ldr	r7, [sp, #128]	; 0x80
   158b8:	adc	r6, r6, r7
   158bc:	ldr	r5, [sp, #80]	; 0x50
   158c0:	eor	r5, r6, r5
   158c4:	ldr	sl, [sp, #76]	; 0x4c
   158c8:	eor	lr, r2, sl
   158cc:	adds	r3, r3, r5
   158d0:	adc	r0, r0, lr
   158d4:	eor	ip, r3, ip
   158d8:	eor	r4, r0, r7
   158dc:	lsr	r7, ip, #24
   158e0:	orr	r1, r7, r4, lsl #8
   158e4:	lsr	r4, r4, #24
   158e8:	orr	r8, r4, ip, lsl #8
   158ec:	ldr	r9, [sp, #400]	; 0x190
   158f0:	adds	r2, r9, r2
   158f4:	ldr	r9, [sp, #404]	; 0x194
   158f8:	adc	r6, r9, r6
   158fc:	adds	r9, r2, r1
   15900:	adc	sl, r6, r8
   15904:	str	r9, [sp, #20]
   15908:	eor	r5, r5, r9
   1590c:	str	sl, [sp, #24]
   15910:	eor	lr, lr, sl
   15914:	lsr	r2, r5, #16
   15918:	orr	r7, r2, lr, lsl #16
   1591c:	lsr	lr, lr, #16
   15920:	orr	r9, lr, r5, lsl #16
   15924:	str	r7, [sp, #76]	; 0x4c
   15928:	adds	r3, r3, r7
   1592c:	mov	sl, r3
   15930:	str	r9, [sp, #80]	; 0x50
   15934:	adc	r3, r0, r9
   15938:	str	sl, [sp, #44]	; 0x2c
   1593c:	eor	r1, r1, sl
   15940:	str	r3, [sp, #48]	; 0x30
   15944:	eor	r8, r8, r3
   15948:	lsl	r3, r8, #1
   1594c:	orr	ip, r3, r1, lsr #31
   15950:	str	ip, [sp, #120]	; 0x78
   15954:	lsl	r1, r1, #1
   15958:	orr	r7, r1, r8, lsr #31
   1595c:	ldr	r2, [sp, #392]	; 0x188
   15960:	ldr	ip, [sp, #12]
   15964:	adds	r3, r2, ip
   15968:	ldr	r2, [sp, #396]	; 0x18c
   1596c:	ldr	ip, [sp, #16]
   15970:	adc	r0, r2, ip
   15974:	ldr	r9, [sp, #84]	; 0x54
   15978:	adds	r3, r3, r9
   1597c:	ldr	lr, [sp, #116]	; 0x74
   15980:	adc	r0, r0, lr
   15984:	eor	r5, r0, fp
   15988:	ldr	sl, [sp, #72]	; 0x48
   1598c:	eor	ip, r3, sl
   15990:	ldr	r6, [sp, #52]	; 0x34
   15994:	adds	r2, r6, r5
   15998:	ldr	r4, [sp, #56]	; 0x38
   1599c:	adc	r4, r4, ip
   159a0:	eor	r6, r2, r9
   159a4:	eor	lr, r4, lr
   159a8:	lsr	r9, r6, #24
   159ac:	orr	r1, r9, lr, lsl #8
   159b0:	lsr	lr, lr, #24
   159b4:	orr	r8, lr, r6, lsl #8
   159b8:	ldr	r6, [sp, #384]	; 0x180
   159bc:	adds	r3, r6, r3
   159c0:	ldr	r6, [sp, #388]	; 0x184
   159c4:	adc	r0, r6, r0
   159c8:	adds	r6, r3, r1
   159cc:	adc	fp, r0, r8
   159d0:	str	r6, [sp, #12]
   159d4:	eor	r5, r5, r6
   159d8:	str	fp, [sp, #16]
   159dc:	eor	ip, ip, fp
   159e0:	lsr	r3, r5, #16
   159e4:	orr	r6, r3, ip, lsl #16
   159e8:	lsr	ip, ip, #16
   159ec:	orr	r9, ip, r5, lsl #16
   159f0:	str	r6, [sp, #72]	; 0x48
   159f4:	adds	r2, r2, r6
   159f8:	str	r9, [sp, #84]	; 0x54
   159fc:	adc	r4, r4, r9
   15a00:	eor	r1, r1, r2
   15a04:	eor	r8, r8, r4
   15a08:	lsl	r3, r8, #1
   15a0c:	orr	sl, r3, r1, lsr #31
   15a10:	str	sl, [sp, #124]	; 0x7c
   15a14:	lsl	r1, r1, #1
   15a18:	orr	r1, r1, r8, lsr #31
   15a1c:	str	r1, [sp, #116]	; 0x74
   15a20:	ldr	ip, [sp, #312]	; 0x138
   15a24:	ldr	fp, [sp, #28]
   15a28:	adds	r1, ip, fp
   15a2c:	ldr	fp, [sp, #316]	; 0x13c
   15a30:	ldr	lr, [sp, #32]
   15a34:	adc	lr, fp, lr
   15a38:	ldr	r6, [sp, #92]	; 0x5c
   15a3c:	adds	r1, r1, r6
   15a40:	ldr	ip, [sp, #100]	; 0x64
   15a44:	adc	lr, lr, ip
   15a48:	ldr	r0, [sp, #108]	; 0x6c
   15a4c:	eor	r8, lr, r0
   15a50:	ldr	r3, [sp, #104]	; 0x68
   15a54:	eor	r5, r1, r3
   15a58:	ldr	r3, [sp, #60]	; 0x3c
   15a5c:	adds	r3, r3, r8
   15a60:	ldr	r0, [sp, #64]	; 0x40
   15a64:	adc	r0, r0, r5
   15a68:	eor	r9, r3, r6
   15a6c:	eor	r6, r0, ip
   15a70:	lsr	fp, r9, #24
   15a74:	orr	ip, fp, r6, lsl #8
   15a78:	lsr	r6, r6, #24
   15a7c:	orr	sl, r6, r9, lsl #8
   15a80:	ldr	fp, [sp, #360]	; 0x168
   15a84:	adds	r1, fp, r1
   15a88:	ldr	fp, [sp, #364]	; 0x16c
   15a8c:	adc	lr, fp, lr
   15a90:	adds	fp, r1, ip
   15a94:	adc	lr, lr, sl
   15a98:	str	fp, [sp, #28]
   15a9c:	eor	r8, r8, fp
   15aa0:	str	lr, [sp, #32]
   15aa4:	eor	r5, r5, lr
   15aa8:	lsr	r1, r8, #16
   15aac:	orr	r9, r1, r5, lsl #16
   15ab0:	lsr	r5, r5, #16
   15ab4:	orr	fp, r5, r8, lsl #16
   15ab8:	adds	r3, r3, r9
   15abc:	adc	r0, r0, fp
   15ac0:	eor	ip, ip, r3
   15ac4:	eor	sl, sl, r0
   15ac8:	lsl	r1, sl, #1
   15acc:	orr	r8, r1, ip, lsr #31
   15ad0:	str	r8, [sp, #100]	; 0x64
   15ad4:	lsl	ip, ip, #1
   15ad8:	orr	ip, ip, sl, lsr #31
   15adc:	str	ip, [sp, #92]	; 0x5c
   15ae0:	ldr	r8, [sp, #280]	; 0x118
   15ae4:	ldr	r5, [sp, #4]
   15ae8:	adds	r1, r8, r5
   15aec:	ldr	r8, [sp, #284]	; 0x11c
   15af0:	ldr	ip, [sp, #8]
   15af4:	adc	r8, r8, ip
   15af8:	adds	r1, r1, r7
   15afc:	ldr	ip, [sp, #120]	; 0x78
   15b00:	adc	r8, r8, ip
   15b04:	eor	r6, r8, fp
   15b08:	eor	lr, r1, r9
   15b0c:	adds	r2, r2, r6
   15b10:	adc	r4, r4, lr
   15b14:	eor	r7, r7, r2
   15b18:	eor	r5, r4, ip
   15b1c:	lsr	sl, r7, #24
   15b20:	orr	ip, sl, r5, lsl #8
   15b24:	lsr	r5, r5, #24
   15b28:	orr	r9, r5, r7, lsl #8
   15b2c:	ldr	r7, [sp, #336]	; 0x150
   15b30:	adds	r1, r7, r1
   15b34:	ldr	r7, [sp, #340]	; 0x154
   15b38:	adc	r8, r7, r8
   15b3c:	adds	r7, r1, ip
   15b40:	adc	r8, r8, r9
   15b44:	str	r7, [sp, #4]
   15b48:	eor	r6, r6, r7
   15b4c:	str	r8, [sp, #8]
   15b50:	eor	lr, lr, r8
   15b54:	lsr	r1, r6, #16
   15b58:	orr	r1, r1, lr, lsl #16
   15b5c:	lsr	lr, lr, #16
   15b60:	orr	r5, lr, r6, lsl #16
   15b64:	str	r1, [sp, #104]	; 0x68
   15b68:	adds	r2, r2, r1
   15b6c:	mov	r6, r2
   15b70:	str	r5, [sp, #108]	; 0x6c
   15b74:	adc	r2, r4, r5
   15b78:	mov	r4, r2
   15b7c:	str	r6, [sp, #52]	; 0x34
   15b80:	eor	ip, ip, r6
   15b84:	str	r4, [sp, #56]	; 0x38
   15b88:	eor	r9, r9, r4
   15b8c:	lsl	r2, r9, #1
   15b90:	orr	r2, r2, ip, lsr #31
   15b94:	str	r2, [sp, #128]	; 0x80
   15b98:	lsl	ip, ip, #1
   15b9c:	orr	ip, ip, r9, lsr #31
   15ba0:	str	ip, [sp, #120]	; 0x78
   15ba4:	ldr	r2, [sp, #328]	; 0x148
   15ba8:	ldr	lr, [sp, #20]
   15bac:	adds	r2, r2, lr
   15bb0:	ldr	r9, [sp, #332]	; 0x14c
   15bb4:	ldr	lr, [sp, #24]
   15bb8:	adc	r6, r9, lr
   15bbc:	ldr	r4, [sp, #116]	; 0x74
   15bc0:	adds	r2, r2, r4
   15bc4:	ldr	r8, [sp, #124]	; 0x7c
   15bc8:	adc	r6, r6, r8
   15bcc:	ldr	r1, [sp, #88]	; 0x58
   15bd0:	eor	lr, r6, r1
   15bd4:	ldr	r5, [sp, #68]	; 0x44
   15bd8:	eor	ip, r2, r5
   15bdc:	adds	r3, r3, lr
   15be0:	adc	r0, r0, ip
   15be4:	eor	r7, r3, r4
   15be8:	eor	r4, r0, r8
   15bec:	lsr	r8, r7, #24
   15bf0:	orr	r1, r8, r4, lsl #8
   15bf4:	lsr	r4, r4, #24
   15bf8:	orr	r5, r4, r7, lsl #8
   15bfc:	ldr	sl, [sp, #304]	; 0x130
   15c00:	adds	r2, sl, r2
   15c04:	ldr	sl, [sp, #308]	; 0x134
   15c08:	adc	r6, sl, r6
   15c0c:	adds	sl, r2, r1
   15c10:	adc	r8, r6, r5
   15c14:	str	sl, [sp, #20]
   15c18:	eor	lr, lr, sl
   15c1c:	str	r8, [sp, #24]
   15c20:	eor	ip, ip, r8
   15c24:	lsr	r2, lr, #16
   15c28:	orr	r2, r2, ip, lsl #16
   15c2c:	lsr	ip, ip, #16
   15c30:	orr	r9, ip, lr, lsl #16
   15c34:	str	r2, [sp, #68]	; 0x44
   15c38:	adds	r3, r3, r2
   15c3c:	adc	r0, r0, r9
   15c40:	mov	ip, r0
   15c44:	str	r3, [sp, #60]	; 0x3c
   15c48:	eor	r1, r1, r3
   15c4c:	str	ip, [sp, #64]	; 0x40
   15c50:	eor	r5, r5, ip
   15c54:	lsl	r3, r5, #1
   15c58:	orr	r4, r3, r1, lsr #31
   15c5c:	str	r4, [sp, #116]	; 0x74
   15c60:	lsl	r1, r1, #1
   15c64:	orr	r1, r1, r5, lsr #31
   15c68:	str	r1, [sp, #88]	; 0x58
   15c6c:	ldr	r5, [sp, #352]	; 0x160
   15c70:	ldr	lr, [sp, #12]
   15c74:	adds	r3, r5, lr
   15c78:	ldr	r5, [sp, #356]	; 0x164
   15c7c:	ldr	fp, [sp, #16]
   15c80:	adc	r0, r5, fp
   15c84:	ldr	r5, [sp, #92]	; 0x5c
   15c88:	adds	r3, r3, r5
   15c8c:	ldr	r8, [sp, #100]	; 0x64
   15c90:	adc	r0, r0, r8
   15c94:	ldr	lr, [sp, #80]	; 0x50
   15c98:	eor	r6, r0, lr
   15c9c:	ldr	r7, [sp, #76]	; 0x4c
   15ca0:	eor	ip, r3, r7
   15ca4:	ldr	r4, [sp, #36]	; 0x24
   15ca8:	adds	r1, r4, r6
   15cac:	ldr	r2, [sp, #40]	; 0x28
   15cb0:	adc	r4, r2, ip
   15cb4:	eor	r7, r1, r5
   15cb8:	eor	r5, r4, r8
   15cbc:	lsr	r8, r7, #24
   15cc0:	orr	r2, r8, r5, lsl #8
   15cc4:	lsr	lr, r5, #24
   15cc8:	orr	lr, lr, r7, lsl #8
   15ccc:	ldr	r5, [sp, #296]	; 0x128
   15cd0:	adds	r3, r5, r3
   15cd4:	ldr	r5, [sp, #300]	; 0x12c
   15cd8:	adc	r0, r5, r0
   15cdc:	adds	r5, r3, r2
   15ce0:	adc	fp, r0, lr
   15ce4:	str	r5, [sp, #12]
   15ce8:	eor	r6, r6, r5
   15cec:	str	fp, [sp, #16]
   15cf0:	eor	ip, ip, fp
   15cf4:	lsr	r3, r6, #16
   15cf8:	orr	sl, r3, ip, lsl #16
   15cfc:	lsr	ip, ip, #16
   15d00:	orr	r3, ip, r6, lsl #16
   15d04:	str	sl, [sp, #76]	; 0x4c
   15d08:	adds	r1, r1, sl
   15d0c:	str	r3, [sp, #80]	; 0x50
   15d10:	adc	r4, r4, r3
   15d14:	eor	r2, r2, r1
   15d18:	eor	lr, lr, r4
   15d1c:	lsl	r3, lr, #1
   15d20:	orr	r6, r3, r2, lsr #31
   15d24:	str	r6, [sp, #100]	; 0x64
   15d28:	lsl	r2, r2, #1
   15d2c:	orr	r2, r2, lr, lsr #31
   15d30:	str	r2, [sp, #92]	; 0x5c
   15d34:	ldr	ip, [sp, #344]	; 0x158
   15d38:	ldr	fp, [sp, #28]
   15d3c:	adds	r2, ip, fp
   15d40:	ldr	fp, [sp, #348]	; 0x15c
   15d44:	ldr	lr, [sp, #32]
   15d48:	adc	lr, fp, lr
   15d4c:	ldr	r6, [sp, #96]	; 0x60
   15d50:	adds	r2, r2, r6
   15d54:	ldr	ip, [sp, #112]	; 0x70
   15d58:	adc	lr, lr, ip
   15d5c:	ldr	r7, [sp, #84]	; 0x54
   15d60:	eor	r7, lr, r7
   15d64:	ldr	r5, [sp, #72]	; 0x48
   15d68:	eor	r5, r2, r5
   15d6c:	ldr	r0, [sp, #44]	; 0x2c
   15d70:	adds	r3, r0, r7
   15d74:	ldr	r0, [sp, #48]	; 0x30
   15d78:	adc	r0, r0, r5
   15d7c:	eor	r8, r3, r6
   15d80:	eor	r6, r0, ip
   15d84:	lsr	fp, r8, #24
   15d88:	orr	ip, fp, r6, lsl #8
   15d8c:	lsr	r6, r6, #24
   15d90:	orr	sl, r6, r8, lsl #8
   15d94:	ldr	fp, [sp, #368]	; 0x170
   15d98:	adds	r2, fp, r2
   15d9c:	ldr	fp, [sp, #372]	; 0x174
   15da0:	adc	lr, fp, lr
   15da4:	adds	fp, r2, ip
   15da8:	adc	lr, lr, sl
   15dac:	str	fp, [sp, #28]
   15db0:	eor	r7, r7, fp
   15db4:	str	lr, [sp, #32]
   15db8:	eor	r5, r5, lr
   15dbc:	lsr	r2, r7, #16
   15dc0:	orr	r6, r2, r5, lsl #16
   15dc4:	lsr	r5, r5, #16
   15dc8:	orr	fp, r5, r7, lsl #16
   15dcc:	str	r6, [sp, #72]	; 0x48
   15dd0:	adds	r3, r3, r6
   15dd4:	adc	r0, r0, fp
   15dd8:	eor	ip, ip, r3
   15ddc:	eor	sl, sl, r0
   15de0:	lsl	r2, sl, #1
   15de4:	orr	r5, r2, ip, lsr #31
   15de8:	lsl	ip, ip, #1
   15dec:	orr	r8, ip, sl, lsr #31
   15df0:	ldr	ip, [sp, #384]	; 0x180
   15df4:	ldr	r7, [sp, #4]
   15df8:	adds	r2, ip, r7
   15dfc:	ldr	r7, [sp, #388]	; 0x184
   15e00:	ldr	ip, [sp, #8]
   15e04:	adc	r7, r7, ip
   15e08:	adds	r2, r2, r8
   15e0c:	adc	r7, r7, r5
   15e10:	eor	r6, r7, r9
   15e14:	ldr	lr, [sp, #68]	; 0x44
   15e18:	eor	lr, r2, lr
   15e1c:	adds	r1, r1, r6
   15e20:	adc	r4, r4, lr
   15e24:	eor	r8, r8, r1
   15e28:	eor	r5, r5, r4
   15e2c:	lsr	sl, r8, #24
   15e30:	orr	ip, sl, r5, lsl #8
   15e34:	lsr	r5, r5, #24
   15e38:	orr	r9, r5, r8, lsl #8
   15e3c:	ldr	r5, [sp, #368]	; 0x170
   15e40:	adds	r2, r5, r2
   15e44:	ldr	r5, [sp, #372]	; 0x174
   15e48:	adc	r7, r5, r7
   15e4c:	adds	r5, r2, ip
   15e50:	adc	r7, r7, r9
   15e54:	mov	r8, r7
   15e58:	str	r5, [sp, #4]
   15e5c:	eor	r6, r6, r5
   15e60:	str	r8, [sp, #8]
   15e64:	eor	lr, lr, r8
   15e68:	lsr	r2, r6, #16
   15e6c:	orr	r7, r2, lr, lsl #16
   15e70:	lsr	lr, lr, #16
   15e74:	orr	r2, lr, r6, lsl #16
   15e78:	str	r7, [sp, #68]	; 0x44
   15e7c:	adds	r1, r1, r7
   15e80:	mov	lr, r1
   15e84:	str	r2, [sp, #84]	; 0x54
   15e88:	adc	r4, r4, r2
   15e8c:	mov	r1, r4
   15e90:	str	lr, [sp, #36]	; 0x24
   15e94:	eor	ip, ip, lr
   15e98:	str	r1, [sp, #40]	; 0x28
   15e9c:	eor	r9, r9, r1
   15ea0:	lsl	r2, r9, #1
   15ea4:	orr	r2, r2, ip, lsr #31
   15ea8:	str	r2, [sp, #112]	; 0x70
   15eac:	lsl	ip, ip, #1
   15eb0:	orr	r9, ip, r9, lsr #31
   15eb4:	str	r9, [sp, #96]	; 0x60
   15eb8:	ldr	ip, [sp, #336]	; 0x150
   15ebc:	ldr	sl, [sp, #20]
   15ec0:	adds	r2, ip, sl
   15ec4:	ldr	ip, [sp, #340]	; 0x154
   15ec8:	ldr	r8, [sp, #24]
   15ecc:	adc	r6, ip, r8
   15ed0:	ldr	ip, [sp, #120]	; 0x78
   15ed4:	adds	r2, r2, ip
   15ed8:	ldr	r7, [sp, #128]	; 0x80
   15edc:	adc	r6, r6, r7
   15ee0:	ldr	lr, [sp, #80]	; 0x50
   15ee4:	eor	r5, r6, lr
   15ee8:	ldr	sl, [sp, #76]	; 0x4c
   15eec:	eor	lr, r2, sl
   15ef0:	adds	r3, r3, r5
   15ef4:	adc	r0, r0, lr
   15ef8:	eor	ip, r3, ip
   15efc:	eor	r4, r0, r7
   15f00:	lsr	r7, ip, #24
   15f04:	orr	r1, r7, r4, lsl #8
   15f08:	lsr	r4, r4, #24
   15f0c:	orr	r8, r4, ip, lsl #8
   15f10:	ldr	sl, [sp, #392]	; 0x188
   15f14:	adds	r2, sl, r2
   15f18:	ldr	sl, [sp, #396]	; 0x18c
   15f1c:	adc	r6, sl, r6
   15f20:	adds	sl, r2, r1
   15f24:	adc	ip, r6, r8
   15f28:	str	sl, [sp, #20]
   15f2c:	eor	r5, r5, sl
   15f30:	str	ip, [sp, #24]
   15f34:	eor	lr, lr, ip
   15f38:	lsr	r2, r5, #16
   15f3c:	orr	r9, r2, lr, lsl #16
   15f40:	lsr	lr, lr, #16
   15f44:	orr	sl, lr, r5, lsl #16
   15f48:	str	r9, [sp, #76]	; 0x4c
   15f4c:	adds	r3, r3, r9
   15f50:	mov	ip, r3
   15f54:	str	sl, [sp, #80]	; 0x50
   15f58:	adc	r3, r0, sl
   15f5c:	str	ip, [sp, #44]	; 0x2c
   15f60:	eor	r1, r1, ip
   15f64:	str	r3, [sp, #48]	; 0x30
   15f68:	eor	r8, r8, r3
   15f6c:	lsl	r3, r8, #1
   15f70:	orr	r7, r3, r1, lsr #31
   15f74:	str	r7, [sp, #120]	; 0x78
   15f78:	lsl	r1, r1, #1
   15f7c:	orr	r7, r1, r8, lsr #31
   15f80:	ldr	r8, [sp, #376]	; 0x178
   15f84:	ldr	r9, [sp, #12]
   15f88:	adds	r3, r8, r9
   15f8c:	ldr	r8, [sp, #380]	; 0x17c
   15f90:	ldr	r9, [sp, #16]
   15f94:	adc	r0, r8, r9
   15f98:	ldr	r8, [sp, #88]	; 0x58
   15f9c:	adds	r3, r3, r8
   15fa0:	ldr	lr, [sp, #116]	; 0x74
   15fa4:	adc	r0, r0, lr
   15fa8:	eor	r5, r0, fp
   15fac:	ldr	sl, [sp, #72]	; 0x48
   15fb0:	eor	ip, r3, sl
   15fb4:	ldr	r6, [sp, #52]	; 0x34
   15fb8:	adds	r2, r6, r5
   15fbc:	ldr	r4, [sp, #56]	; 0x38
   15fc0:	adc	r4, r4, ip
   15fc4:	eor	r6, r2, r8
   15fc8:	eor	lr, r4, lr
   15fcc:	lsr	r9, r6, #24
   15fd0:	orr	r1, r9, lr, lsl #8
   15fd4:	lsr	lr, lr, #24
   15fd8:	orr	r8, lr, r6, lsl #8
   15fdc:	ldr	r6, [sp, #288]	; 0x120
   15fe0:	adds	r3, r6, r3
   15fe4:	ldr	r6, [sp, #292]	; 0x124
   15fe8:	adc	r0, r6, r0
   15fec:	adds	r6, r3, r1
   15ff0:	adc	fp, r0, r8
   15ff4:	str	r6, [sp, #12]
   15ff8:	eor	r5, r5, r6
   15ffc:	str	fp, [sp, #16]
   16000:	eor	ip, ip, fp
   16004:	lsr	r3, r5, #16
   16008:	orr	r9, r3, ip, lsl #16
   1600c:	lsr	ip, ip, #16
   16010:	orr	lr, ip, r5, lsl #16
   16014:	str	r9, [sp, #72]	; 0x48
   16018:	adds	r2, r2, r9
   1601c:	str	lr, [sp, #88]	; 0x58
   16020:	adc	r4, r4, lr
   16024:	eor	r1, r1, r2
   16028:	eor	r8, r8, r4
   1602c:	lsl	r3, r8, #1
   16030:	orr	sl, r3, r1, lsr #31
   16034:	str	sl, [sp, #124]	; 0x7c
   16038:	lsl	r1, r1, #1
   1603c:	orr	r8, r1, r8, lsr #31
   16040:	str	r8, [sp, #116]	; 0x74
   16044:	ldr	r8, [sp, #304]	; 0x130
   16048:	ldr	fp, [sp, #28]
   1604c:	adds	r1, r8, fp
   16050:	ldr	fp, [sp, #308]	; 0x134
   16054:	ldr	lr, [sp, #32]
   16058:	adc	lr, fp, lr
   1605c:	ldr	r9, [sp, #92]	; 0x5c
   16060:	adds	r1, r1, r9
   16064:	ldr	r6, [sp, #100]	; 0x64
   16068:	adc	lr, lr, r6
   1606c:	ldr	r5, [sp, #108]	; 0x6c
   16070:	eor	r8, lr, r5
   16074:	ldr	r3, [sp, #104]	; 0x68
   16078:	eor	r5, r1, r3
   1607c:	ldr	r3, [sp, #60]	; 0x3c
   16080:	adds	r3, r3, r8
   16084:	ldr	r0, [sp, #64]	; 0x40
   16088:	adc	r0, r0, r5
   1608c:	eor	r9, r3, r9
   16090:	eor	r6, r0, r6
   16094:	lsr	fp, r9, #24
   16098:	orr	ip, fp, r6, lsl #8
   1609c:	lsr	r6, r6, #24
   160a0:	orr	sl, r6, r9, lsl #8
   160a4:	ldr	fp, [sp, #352]	; 0x160
   160a8:	adds	r1, fp, r1
   160ac:	ldr	fp, [sp, #356]	; 0x164
   160b0:	adc	lr, fp, lr
   160b4:	adds	r1, r1, ip
   160b8:	adc	fp, lr, sl
   160bc:	str	r1, [sp, #28]
   160c0:	eor	r8, r8, r1
   160c4:	str	fp, [sp, #32]
   160c8:	eor	r5, r5, fp
   160cc:	lsr	r1, r8, #16
   160d0:	orr	r9, r1, r5, lsl #16
   160d4:	lsr	r5, r5, #16
   160d8:	orr	fp, r5, r8, lsl #16
   160dc:	adds	r3, r3, r9
   160e0:	adc	r0, r0, fp
   160e4:	eor	ip, ip, r3
   160e8:	eor	sl, sl, r0
   160ec:	lsl	r1, sl, #1
   160f0:	orr	lr, r1, ip, lsr #31
   160f4:	str	lr, [sp, #100]	; 0x64
   160f8:	lsl	ip, ip, #1
   160fc:	orr	r6, ip, sl, lsr #31
   16100:	str	r6, [sp, #92]	; 0x5c
   16104:	ldr	r1, [sp, #320]	; 0x140
   16108:	ldr	r5, [sp, #4]
   1610c:	adds	r1, r1, r5
   16110:	ldr	r5, [sp, #324]	; 0x144
   16114:	ldr	r8, [sp, #8]
   16118:	adc	r8, r5, r8
   1611c:	adds	r1, r1, r7
   16120:	ldr	r5, [sp, #120]	; 0x78
   16124:	adc	r8, r8, r5
   16128:	eor	r6, r8, fp
   1612c:	eor	lr, r1, r9
   16130:	adds	r2, r2, r6
   16134:	adc	r4, r4, lr
   16138:	eor	r7, r7, r2
   1613c:	eor	r5, r4, r5
   16140:	lsr	sl, r7, #24
   16144:	orr	ip, sl, r5, lsl #8
   16148:	lsr	r5, r5, #24
   1614c:	orr	r9, r5, r7, lsl #8
   16150:	ldr	r5, [sp, #280]	; 0x118
   16154:	adds	r1, r5, r1
   16158:	ldr	r5, [sp, #284]	; 0x11c
   1615c:	adc	r8, r5, r8
   16160:	adds	r5, r1, ip
   16164:	adc	r8, r8, r9
   16168:	str	r5, [sp, #4]
   1616c:	eor	r6, r6, r5
   16170:	str	r8, [sp, #8]
   16174:	eor	lr, lr, r8
   16178:	lsr	r1, r6, #16
   1617c:	orr	r1, r1, lr, lsl #16
   16180:	lsr	lr, lr, #16
   16184:	orr	lr, lr, r6, lsl #16
   16188:	str	r1, [sp, #104]	; 0x68
   1618c:	adds	r2, r2, r1
   16190:	mov	r5, r2
   16194:	str	lr, [sp, #108]	; 0x6c
   16198:	adc	r4, r4, lr
   1619c:	mov	r2, r4
   161a0:	str	r5, [sp, #52]	; 0x34
   161a4:	eor	ip, ip, r5
   161a8:	str	r2, [sp, #56]	; 0x38
   161ac:	eor	r9, r9, r2
   161b0:	lsl	r2, r9, #1
   161b4:	orr	r7, r2, ip, lsr #31
   161b8:	str	r7, [sp, #128]	; 0x80
   161bc:	lsl	ip, ip, #1
   161c0:	orr	r6, ip, r9, lsr #31
   161c4:	str	r6, [sp, #120]	; 0x78
   161c8:	ldr	r8, [sp, #400]	; 0x190
   161cc:	ldr	sl, [sp, #20]
   161d0:	adds	r2, r8, sl
   161d4:	ldr	sl, [sp, #404]	; 0x194
   161d8:	ldr	ip, [sp, #24]
   161dc:	adc	r6, sl, ip
   161e0:	ldr	r5, [sp, #116]	; 0x74
   161e4:	adds	r2, r2, r5
   161e8:	ldr	r8, [sp, #124]	; 0x7c
   161ec:	adc	r6, r6, r8
   161f0:	ldr	r1, [sp, #84]	; 0x54
   161f4:	eor	lr, r6, r1
   161f8:	ldr	r7, [sp, #68]	; 0x44
   161fc:	eor	ip, r2, r7
   16200:	adds	r3, r3, lr
   16204:	adc	r0, r0, ip
   16208:	eor	r7, r3, r5
   1620c:	eor	r4, r0, r8
   16210:	lsr	r8, r7, #24
   16214:	orr	r1, r8, r4, lsl #8
   16218:	lsr	r4, r4, #24
   1621c:	orr	r5, r4, r7, lsl #8
   16220:	ldr	sl, [sp, #312]	; 0x138
   16224:	adds	r2, sl, r2
   16228:	ldr	sl, [sp, #316]	; 0x13c
   1622c:	adc	r6, sl, r6
   16230:	adds	sl, r2, r1
   16234:	adc	r8, r6, r5
   16238:	str	sl, [sp, #20]
   1623c:	eor	lr, lr, sl
   16240:	str	r8, [sp, #24]
   16244:	eor	ip, ip, r8
   16248:	lsr	r2, lr, #16
   1624c:	orr	r7, r2, ip, lsl #16
   16250:	lsr	ip, ip, #16
   16254:	orr	r9, ip, lr, lsl #16
   16258:	str	r7, [sp, #68]	; 0x44
   1625c:	adds	r3, r3, r7
   16260:	adc	r0, r0, r9
   16264:	mov	ip, r0
   16268:	str	r3, [sp, #60]	; 0x3c
   1626c:	eor	r1, r1, r3
   16270:	str	ip, [sp, #64]	; 0x40
   16274:	eor	r5, r5, ip
   16278:	lsl	r3, r5, #1
   1627c:	orr	r0, r3, r1, lsr #31
   16280:	str	r0, [sp, #116]	; 0x74
   16284:	lsl	r1, r1, #1
   16288:	orr	r1, r1, r5, lsr #31
   1628c:	str	r1, [sp, #84]	; 0x54
   16290:	ldr	r0, [sp, #344]	; 0x158
   16294:	ldr	r6, [sp, #12]
   16298:	adds	r3, r0, r6
   1629c:	ldr	r6, [sp, #348]	; 0x15c
   162a0:	ldr	fp, [sp, #16]
   162a4:	adc	r0, r6, fp
   162a8:	ldr	r7, [sp, #92]	; 0x5c
   162ac:	adds	r3, r3, r7
   162b0:	ldr	r2, [sp, #100]	; 0x64
   162b4:	adc	r0, r0, r2
   162b8:	ldr	sl, [sp, #80]	; 0x50
   162bc:	eor	r6, r0, sl
   162c0:	ldr	r5, [sp, #76]	; 0x4c
   162c4:	eor	ip, r3, r5
   162c8:	ldr	lr, [sp, #36]	; 0x24
   162cc:	adds	r1, lr, r6
   162d0:	ldr	r4, [sp, #40]	; 0x28
   162d4:	adc	r4, r4, ip
   162d8:	eor	r7, r1, r7
   162dc:	eor	r5, r4, r2
   162e0:	lsr	r8, r7, #24
   162e4:	orr	r2, r8, r5, lsl #8
   162e8:	lsr	lr, r5, #24
   162ec:	orr	lr, lr, r7, lsl #8
   162f0:	ldr	sl, [sp, #328]	; 0x148
   162f4:	adds	r3, sl, r3
   162f8:	ldr	sl, [sp, #332]	; 0x14c
   162fc:	adc	r0, sl, r0
   16300:	adds	sl, r3, r2
   16304:	adc	fp, r0, lr
   16308:	str	sl, [sp, #12]
   1630c:	eor	r6, r6, sl
   16310:	str	fp, [sp, #16]
   16314:	eor	ip, ip, fp
   16318:	lsr	r3, r6, #16
   1631c:	orr	r5, r3, ip, lsl #16
   16320:	lsr	ip, ip, #16
   16324:	orr	r6, ip, r6, lsl #16
   16328:	mov	r3, r6
   1632c:	str	r5, [sp, #76]	; 0x4c
   16330:	adds	r1, r1, r5
   16334:	str	r3, [sp, #80]	; 0x50
   16338:	adc	r4, r4, r3
   1633c:	eor	r2, r2, r1
   16340:	eor	lr, lr, r4
   16344:	lsl	r3, lr, #1
   16348:	orr	r6, r3, r2, lsr #31
   1634c:	str	r6, [sp, #100]	; 0x64
   16350:	lsl	r2, r2, #1
   16354:	orr	lr, r2, lr, lsr #31
   16358:	str	lr, [sp, #92]	; 0x5c
   1635c:	ldr	lr, [sp, #296]	; 0x128
   16360:	ldr	r8, [sp, #28]
   16364:	adds	r2, lr, r8
   16368:	ldr	lr, [sp, #300]	; 0x12c
   1636c:	ldr	fp, [sp, #32]
   16370:	adc	lr, lr, fp
   16374:	ldr	r6, [sp, #96]	; 0x60
   16378:	adds	r2, r2, r6
   1637c:	ldr	ip, [sp, #112]	; 0x70
   16380:	adc	lr, lr, ip
   16384:	ldr	r7, [sp, #88]	; 0x58
   16388:	eor	r7, lr, r7
   1638c:	ldr	r5, [sp, #72]	; 0x48
   16390:	eor	r5, r2, r5
   16394:	ldr	r0, [sp, #44]	; 0x2c
   16398:	adds	r3, r0, r7
   1639c:	ldr	r0, [sp, #48]	; 0x30
   163a0:	adc	r0, r0, r5
   163a4:	eor	r8, r3, r6
   163a8:	eor	r6, r0, ip
   163ac:	lsr	fp, r8, #24
   163b0:	orr	ip, fp, r6, lsl #8
   163b4:	lsr	r6, r6, #24
   163b8:	orr	sl, r6, r8, lsl #8
   163bc:	ldr	fp, [sp, #360]	; 0x168
   163c0:	adds	r2, fp, r2
   163c4:	ldr	fp, [sp, #364]	; 0x16c
   163c8:	adc	lr, fp, lr
   163cc:	adds	fp, r2, ip
   163d0:	adc	lr, lr, sl
   163d4:	str	fp, [sp, #28]
   163d8:	eor	r7, r7, fp
   163dc:	str	lr, [sp, #32]
   163e0:	eor	r5, r5, lr
   163e4:	lsr	r2, r7, #16
   163e8:	orr	r2, r2, r5, lsl #16
   163ec:	lsr	r5, r5, #16
   163f0:	orr	fp, r5, r7, lsl #16
   163f4:	str	r2, [sp, #72]	; 0x48
   163f8:	adds	r3, r3, r2
   163fc:	adc	r0, r0, fp
   16400:	eor	ip, ip, r3
   16404:	eor	sl, sl, r0
   16408:	lsl	r2, sl, #1
   1640c:	orr	r5, r2, ip, lsr #31
   16410:	lsl	ip, ip, #1
   16414:	orr	r8, ip, sl, lsr #31
   16418:	ldr	lr, [sp, #328]	; 0x148
   1641c:	ldr	r2, [sp, #4]
   16420:	adds	r2, lr, r2
   16424:	ldr	lr, [sp, #332]	; 0x14c
   16428:	ldr	ip, [sp, #8]
   1642c:	adc	r7, lr, ip
   16430:	adds	r2, r2, r8
   16434:	adc	r7, r7, r5
   16438:	eor	r6, r7, r9
   1643c:	ldr	r9, [sp, #68]	; 0x44
   16440:	eor	lr, r2, r9
   16444:	adds	r1, r1, r6
   16448:	adc	r4, r4, lr
   1644c:	eor	r8, r8, r1
   16450:	eor	r5, r5, r4
   16454:	lsr	sl, r8, #24
   16458:	orr	ip, sl, r5, lsl #8
   1645c:	lsr	r5, r5, #24
   16460:	orr	r9, r5, r8, lsl #8
   16464:	ldr	r5, [sp, #400]	; 0x190
   16468:	adds	r2, r5, r2
   1646c:	ldr	r5, [sp, #404]	; 0x194
   16470:	adc	r7, r5, r7
   16474:	adds	r5, r2, ip
   16478:	adc	r7, r7, r9
   1647c:	mov	r8, r7
   16480:	str	r5, [sp, #4]
   16484:	eor	r6, r6, r5
   16488:	str	r8, [sp, #8]
   1648c:	eor	lr, lr, r8
   16490:	lsr	r2, r6, #16
   16494:	orr	r7, r2, lr, lsl #16
   16498:	lsr	lr, lr, #16
   1649c:	orr	lr, lr, r6, lsl #16
   164a0:	str	r7, [sp, #68]	; 0x44
   164a4:	adds	r1, r1, r7
   164a8:	mov	r2, r1
   164ac:	str	lr, [sp, #88]	; 0x58
   164b0:	adc	r4, r4, lr
   164b4:	mov	r1, r4
   164b8:	str	r2, [sp, #36]	; 0x24
   164bc:	eor	ip, ip, r2
   164c0:	str	r1, [sp, #40]	; 0x28
   164c4:	eor	r9, r9, r1
   164c8:	lsl	r2, r9, #1
   164cc:	orr	lr, r2, ip, lsr #31
   164d0:	str	lr, [sp, #112]	; 0x70
   164d4:	lsl	ip, ip, #1
   164d8:	orr	r9, ip, r9, lsr #31
   164dc:	str	r9, [sp, #96]	; 0x60
   164e0:	ldr	r9, [sp, #392]	; 0x188
   164e4:	ldr	sl, [sp, #20]
   164e8:	adds	r2, r9, sl
   164ec:	ldr	r9, [sp, #396]	; 0x18c
   164f0:	ldr	r8, [sp, #24]
   164f4:	adc	r6, r9, r8
   164f8:	ldr	ip, [sp, #120]	; 0x78
   164fc:	adds	r2, r2, ip
   16500:	ldr	r7, [sp, #128]	; 0x80
   16504:	adc	r6, r6, r7
   16508:	ldr	lr, [sp, #80]	; 0x50
   1650c:	eor	r5, r6, lr
   16510:	ldr	lr, [sp, #76]	; 0x4c
   16514:	eor	lr, r2, lr
   16518:	adds	r3, r3, r5
   1651c:	adc	r0, r0, lr
   16520:	eor	ip, r3, ip
   16524:	eor	r4, r0, r7
   16528:	lsr	r7, ip, #24
   1652c:	orr	r1, r7, r4, lsl #8
   16530:	lsr	r4, r4, #24
   16534:	orr	r8, r4, ip, lsl #8
   16538:	ldr	r9, [sp, #352]	; 0x160
   1653c:	adds	r2, r9, r2
   16540:	ldr	r9, [sp, #356]	; 0x164
   16544:	adc	r6, r9, r6
   16548:	adds	r9, r2, r1
   1654c:	adc	ip, r6, r8
   16550:	str	r9, [sp, #20]
   16554:	eor	r5, r5, r9
   16558:	str	ip, [sp, #24]
   1655c:	eor	lr, lr, ip
   16560:	lsr	r2, r5, #16
   16564:	orr	r6, r2, lr, lsl #16
   16568:	lsr	lr, lr, #16
   1656c:	orr	sl, lr, r5, lsl #16
   16570:	str	r6, [sp, #76]	; 0x4c
   16574:	adds	r3, r3, r6
   16578:	mov	r7, r3
   1657c:	str	sl, [sp, #80]	; 0x50
   16580:	adc	r0, r0, sl
   16584:	mov	r3, r0
   16588:	str	r7, [sp, #44]	; 0x2c
   1658c:	eor	r1, r1, r7
   16590:	str	r3, [sp, #48]	; 0x30
   16594:	eor	r8, r8, r3
   16598:	lsl	r3, r8, #1
   1659c:	orr	r0, r3, r1, lsr #31
   165a0:	str	r0, [sp, #120]	; 0x78
   165a4:	lsl	r1, r1, #1
   165a8:	orr	r7, r1, r8, lsr #31
   165ac:	ldr	r8, [sp, #368]	; 0x170
   165b0:	ldr	sl, [sp, #12]
   165b4:	adds	r3, r8, sl
   165b8:	ldr	r8, [sp, #372]	; 0x174
   165bc:	ldr	r9, [sp, #16]
   165c0:	adc	r0, r8, r9
   165c4:	ldr	r6, [sp, #84]	; 0x54
   165c8:	adds	r3, r3, r6
   165cc:	ldr	r8, [sp, #116]	; 0x74
   165d0:	adc	r0, r0, r8
   165d4:	eor	r5, r0, fp
   165d8:	ldr	sl, [sp, #72]	; 0x48
   165dc:	eor	ip, r3, sl
   165e0:	ldr	r4, [sp, #52]	; 0x34
   165e4:	adds	r2, r4, r5
   165e8:	ldr	r4, [sp, #56]	; 0x38
   165ec:	adc	r4, r4, ip
   165f0:	eor	r6, r2, r6
   165f4:	eor	lr, r4, r8
   165f8:	lsr	r9, r6, #24
   165fc:	orr	r1, r9, lr, lsl #8
   16600:	lsr	lr, lr, #24
   16604:	orr	r8, lr, r6, lsl #8
   16608:	ldr	sl, [sp, #304]	; 0x130
   1660c:	adds	r3, sl, r3
   16610:	ldr	sl, [sp, #308]	; 0x134
   16614:	adc	r0, sl, r0
   16618:	adds	sl, r3, r1
   1661c:	adc	fp, r0, r8
   16620:	str	sl, [sp, #12]
   16624:	eor	r5, r5, sl
   16628:	str	fp, [sp, #16]
   1662c:	eor	ip, ip, fp
   16630:	lsr	r3, r5, #16
   16634:	orr	r9, r3, ip, lsl #16
   16638:	lsr	ip, ip, #16
   1663c:	orr	sl, ip, r5, lsl #16
   16640:	str	r9, [sp, #72]	; 0x48
   16644:	adds	r2, r2, r9
   16648:	str	sl, [sp, #84]	; 0x54
   1664c:	adc	r4, r4, sl
   16650:	eor	r1, r1, r2
   16654:	eor	r8, r8, r4
   16658:	lsl	r3, r8, #1
   1665c:	orr	r0, r3, r1, lsr #31
   16660:	str	r0, [sp, #124]	; 0x7c
   16664:	lsl	r1, r1, #1
   16668:	orr	r8, r1, r8, lsr #31
   1666c:	str	r8, [sp, #116]	; 0x74
   16670:	ldr	r1, [sp, #280]	; 0x118
   16674:	ldr	fp, [sp, #28]
   16678:	adds	r1, r1, fp
   1667c:	ldr	fp, [sp, #284]	; 0x11c
   16680:	ldr	r5, [sp, #32]
   16684:	adc	lr, fp, r5
   16688:	ldr	r9, [sp, #92]	; 0x5c
   1668c:	adds	r1, r1, r9
   16690:	ldr	r6, [sp, #100]	; 0x64
   16694:	adc	lr, lr, r6
   16698:	ldr	r0, [sp, #108]	; 0x6c
   1669c:	eor	r8, lr, r0
   166a0:	ldr	r3, [sp, #104]	; 0x68
   166a4:	eor	r5, r1, r3
   166a8:	ldr	r3, [sp, #60]	; 0x3c
   166ac:	adds	r3, r3, r8
   166b0:	ldr	ip, [sp, #64]	; 0x40
   166b4:	adc	r0, ip, r5
   166b8:	eor	r9, r3, r9
   166bc:	eor	r6, r0, r6
   166c0:	lsr	fp, r9, #24
   166c4:	orr	ip, fp, r6, lsl #8
   166c8:	lsr	r6, r6, #24
   166cc:	orr	sl, r6, r9, lsl #8
   166d0:	ldr	r6, [sp, #344]	; 0x158
   166d4:	adds	r1, r6, r1
   166d8:	ldr	r6, [sp, #348]	; 0x15c
   166dc:	adc	lr, r6, lr
   166e0:	adds	r1, r1, ip
   166e4:	adc	lr, lr, sl
   166e8:	mov	r6, lr
   166ec:	str	r1, [sp, #28]
   166f0:	eor	r8, r8, r1
   166f4:	str	r6, [sp, #32]
   166f8:	eor	r5, r5, r6
   166fc:	lsr	r1, r8, #16
   16700:	orr	r9, r1, r5, lsl #16
   16704:	lsr	r5, r5, #16
   16708:	orr	fp, r5, r8, lsl #16
   1670c:	adds	r3, r3, r9
   16710:	adc	r0, r0, fp
   16714:	eor	ip, ip, r3
   16718:	eor	sl, sl, r0
   1671c:	lsl	r1, sl, #1
   16720:	orr	lr, r1, ip, lsr #31
   16724:	str	lr, [sp, #100]	; 0x64
   16728:	lsl	ip, ip, #1
   1672c:	orr	r1, ip, sl, lsr #31
   16730:	str	r1, [sp, #92]	; 0x5c
   16734:	ldr	ip, [sp, #376]	; 0x178
   16738:	ldr	r5, [sp, #4]
   1673c:	adds	r1, ip, r5
   16740:	ldr	ip, [sp, #380]	; 0x17c
   16744:	ldr	r8, [sp, #8]
   16748:	adc	r8, ip, r8
   1674c:	adds	r1, r1, r7
   16750:	ldr	r5, [sp, #120]	; 0x78
   16754:	adc	r8, r8, r5
   16758:	eor	r6, r8, fp
   1675c:	eor	lr, r1, r9
   16760:	adds	r2, r2, r6
   16764:	adc	r4, r4, lr
   16768:	eor	r7, r7, r2
   1676c:	eor	r5, r4, r5
   16770:	lsr	sl, r7, #24
   16774:	orr	ip, sl, r5, lsl #8
   16778:	lsr	r5, r5, #24
   1677c:	orr	r9, r5, r7, lsl #8
   16780:	ldr	r5, [sp, #296]	; 0x128
   16784:	adds	r1, r5, r1
   16788:	ldr	r5, [sp, #300]	; 0x12c
   1678c:	adc	r8, r5, r8
   16790:	adds	r5, r1, ip
   16794:	adc	r7, r8, r9
   16798:	str	r5, [sp, #4]
   1679c:	eor	r6, r6, r5
   167a0:	str	r7, [sp, #8]
   167a4:	eor	lr, lr, r7
   167a8:	lsr	r1, r6, #16
   167ac:	orr	r8, r1, lr, lsl #16
   167b0:	lsr	lr, lr, #16
   167b4:	orr	lr, lr, r6, lsl #16
   167b8:	str	r8, [sp, #104]	; 0x68
   167bc:	adds	r2, r2, r8
   167c0:	mov	fp, r2
   167c4:	str	lr, [sp, #108]	; 0x6c
   167c8:	adc	r2, r4, lr
   167cc:	str	fp, [sp, #52]	; 0x34
   167d0:	eor	ip, ip, fp
   167d4:	str	r2, [sp, #56]	; 0x38
   167d8:	eor	r9, r9, r2
   167dc:	lsl	r2, r9, #1
   167e0:	orr	lr, r2, ip, lsr #31
   167e4:	str	lr, [sp, #128]	; 0x80
   167e8:	lsl	ip, ip, #1
   167ec:	orr	ip, ip, r9, lsr #31
   167f0:	str	ip, [sp, #120]	; 0x78
   167f4:	ldr	r4, [sp, #384]	; 0x180
   167f8:	ldr	r5, [sp, #20]
   167fc:	adds	r2, r4, r5
   16800:	ldr	r9, [sp, #388]	; 0x184
   16804:	ldr	ip, [sp, #24]
   16808:	adc	r6, r9, ip
   1680c:	ldr	r5, [sp, #116]	; 0x74
   16810:	adds	r2, r2, r5
   16814:	ldr	r8, [sp, #124]	; 0x7c
   16818:	adc	r6, r6, r8
   1681c:	ldr	r1, [sp, #88]	; 0x58
   16820:	eor	lr, r6, r1
   16824:	ldr	r7, [sp, #68]	; 0x44
   16828:	eor	ip, r2, r7
   1682c:	adds	r3, r3, lr
   16830:	adc	r0, r0, ip
   16834:	eor	r7, r3, r5
   16838:	eor	r4, r0, r8
   1683c:	lsr	r8, r7, #24
   16840:	orr	r1, r8, r4, lsl #8
   16844:	lsr	r4, r4, #24
   16848:	orr	r5, r4, r7, lsl #8
   1684c:	ldr	r9, [sp, #336]	; 0x150
   16850:	adds	r2, r9, r2
   16854:	ldr	r9, [sp, #340]	; 0x154
   16858:	adc	r6, r9, r6
   1685c:	adds	r9, r2, r1
   16860:	adc	r8, r6, r5
   16864:	str	r9, [sp, #20]
   16868:	eor	lr, lr, r9
   1686c:	str	r8, [sp, #24]
   16870:	eor	ip, ip, r8
   16874:	lsr	r2, lr, #16
   16878:	orr	r4, r2, ip, lsl #16
   1687c:	lsr	ip, ip, #16
   16880:	orr	r9, ip, lr, lsl #16
   16884:	str	r4, [sp, #68]	; 0x44
   16888:	adds	r3, r3, r4
   1688c:	adc	r0, r0, r9
   16890:	mov	ip, r0
   16894:	str	r3, [sp, #60]	; 0x3c
   16898:	eor	r1, r1, r3
   1689c:	str	ip, [sp, #64]	; 0x40
   168a0:	eor	r5, r5, ip
   168a4:	lsl	r3, r5, #1
   168a8:	orr	r0, r3, r1, lsr #31
   168ac:	str	r0, [sp, #116]	; 0x74
   168b0:	lsl	r1, r1, #1
   168b4:	orr	r1, r1, r5, lsr #31
   168b8:	str	r1, [sp, #88]	; 0x58
   168bc:	ldr	r1, [sp, #288]	; 0x120
   168c0:	ldr	r8, [sp, #12]
   168c4:	adds	r3, r1, r8
   168c8:	ldr	r1, [sp, #292]	; 0x124
   168cc:	ldr	fp, [sp, #16]
   168d0:	adc	r0, r1, fp
   168d4:	ldr	fp, [sp, #92]	; 0x5c
   168d8:	adds	r3, r3, fp
   168dc:	ldr	r8, [sp, #100]	; 0x64
   168e0:	adc	r0, r0, r8
   168e4:	ldr	sl, [sp, #80]	; 0x50
   168e8:	eor	r6, r0, sl
   168ec:	ldr	r5, [sp, #76]	; 0x4c
   168f0:	eor	ip, r3, r5
   168f4:	ldr	r2, [sp, #36]	; 0x24
   168f8:	adds	r1, r2, r6
   168fc:	ldr	r4, [sp, #40]	; 0x28
   16900:	adc	r4, r4, ip
   16904:	eor	r7, r1, fp
   16908:	eor	r5, r4, r8
   1690c:	lsr	r8, r7, #24
   16910:	orr	r2, r8, r5, lsl #8
   16914:	lsr	lr, r5, #24
   16918:	orr	lr, lr, r7, lsl #8
   1691c:	ldr	fp, [sp, #312]	; 0x138
   16920:	adds	r3, fp, r3
   16924:	ldr	fp, [sp, #316]	; 0x13c
   16928:	adc	r0, fp, r0
   1692c:	adds	fp, r3, r2
   16930:	adc	sl, r0, lr
   16934:	str	fp, [sp, #12]
   16938:	eor	r6, r6, fp
   1693c:	str	sl, [sp, #16]
   16940:	eor	ip, ip, sl
   16944:	lsr	r3, r6, #16
   16948:	orr	fp, r3, ip, lsl #16
   1694c:	lsr	ip, ip, #16
   16950:	orr	r8, ip, r6, lsl #16
   16954:	str	fp, [sp, #76]	; 0x4c
   16958:	adds	r1, r1, fp
   1695c:	str	r8, [sp, #80]	; 0x50
   16960:	adc	r4, r4, r8
   16964:	eor	r2, r2, r1
   16968:	eor	lr, lr, r4
   1696c:	lsl	r3, lr, #1
   16970:	orr	r6, r3, r2, lsr #31
   16974:	str	r6, [sp, #100]	; 0x64
   16978:	lsl	r2, r2, #1
   1697c:	orr	r2, r2, lr, lsr #31
   16980:	str	r2, [sp, #92]	; 0x5c
   16984:	ldr	r3, [sp, #360]	; 0x168
   16988:	ldr	r2, [sp, #28]
   1698c:	adds	r2, r3, r2
   16990:	ldr	lr, [sp, #364]	; 0x16c
   16994:	ldr	r6, [sp, #32]
   16998:	adc	lr, lr, r6
   1699c:	ldr	r6, [sp, #96]	; 0x60
   169a0:	adds	r2, r2, r6
   169a4:	ldr	ip, [sp, #112]	; 0x70
   169a8:	adc	lr, lr, ip
   169ac:	ldr	sl, [sp, #84]	; 0x54
   169b0:	eor	r7, lr, sl
   169b4:	ldr	r5, [sp, #72]	; 0x48
   169b8:	eor	r5, r2, r5
   169bc:	ldr	r0, [sp, #44]	; 0x2c
   169c0:	adds	r3, r0, r7
   169c4:	ldr	r0, [sp, #48]	; 0x30
   169c8:	adc	r0, r0, r5
   169cc:	eor	r8, r3, r6
   169d0:	eor	r6, r0, ip
   169d4:	lsr	fp, r8, #24
   169d8:	orr	ip, fp, r6, lsl #8
   169dc:	lsr	r6, r6, #24
   169e0:	orr	sl, r6, r8, lsl #8
   169e4:	ldr	r6, [sp, #320]	; 0x140
   169e8:	adds	r2, r6, r2
   169ec:	ldr	r6, [sp, #324]	; 0x144
   169f0:	adc	lr, r6, lr
   169f4:	adds	r6, r2, ip
   169f8:	adc	lr, lr, sl
   169fc:	str	r6, [sp, #28]
   16a00:	eor	r7, r7, r6
   16a04:	str	lr, [sp, #32]
   16a08:	eor	r5, r5, lr
   16a0c:	lsr	r2, r7, #16
   16a10:	orr	r2, r2, r5, lsl #16
   16a14:	lsr	r5, r5, #16
   16a18:	orr	fp, r5, r7, lsl #16
   16a1c:	str	r2, [sp, #72]	; 0x48
   16a20:	adds	r3, r3, r2
   16a24:	adc	r0, r0, fp
   16a28:	eor	ip, ip, r3
   16a2c:	eor	sl, sl, r0
   16a30:	lsl	r2, sl, #1
   16a34:	orr	r5, r2, ip, lsr #31
   16a38:	lsl	ip, ip, #1
   16a3c:	orr	r8, ip, sl, lsr #31
   16a40:	ldr	sl, [sp, #360]	; 0x168
   16a44:	ldr	r2, [sp, #4]
   16a48:	adds	r2, sl, r2
   16a4c:	ldr	sl, [sp, #364]	; 0x16c
   16a50:	ldr	r7, [sp, #8]
   16a54:	adc	r7, sl, r7
   16a58:	adds	r2, r2, r8
   16a5c:	adc	r7, r7, r5
   16a60:	eor	r6, r7, r9
   16a64:	ldr	sl, [sp, #68]	; 0x44
   16a68:	eor	lr, r2, sl
   16a6c:	adds	r1, r1, r6
   16a70:	adc	r4, r4, lr
   16a74:	eor	r8, r8, r1
   16a78:	eor	r5, r5, r4
   16a7c:	lsr	sl, r8, #24
   16a80:	orr	ip, sl, r5, lsl #8
   16a84:	lsr	r5, r5, #24
   16a88:	orr	r9, r5, r8, lsl #8
   16a8c:	ldr	r5, [sp, #296]	; 0x128
   16a90:	adds	r2, r5, r2
   16a94:	ldr	r5, [sp, #300]	; 0x12c
   16a98:	adc	r7, r5, r7
   16a9c:	adds	r5, r2, ip
   16aa0:	adc	r7, r7, r9
   16aa4:	mov	sl, r7
   16aa8:	str	r5, [sp, #4]
   16aac:	eor	r6, r6, r5
   16ab0:	str	sl, [sp, #8]
   16ab4:	eor	lr, lr, sl
   16ab8:	lsr	r2, r6, #16
   16abc:	orr	r7, r2, lr, lsl #16
   16ac0:	lsr	lr, lr, #16
   16ac4:	orr	r2, lr, r6, lsl #16
   16ac8:	str	r7, [sp, #68]	; 0x44
   16acc:	adds	r1, r1, r7
   16ad0:	mov	r5, r1
   16ad4:	str	r2, [sp, #84]	; 0x54
   16ad8:	adc	r4, r4, r2
   16adc:	mov	r1, r4
   16ae0:	str	r5, [sp, #36]	; 0x24
   16ae4:	eor	ip, ip, r5
   16ae8:	str	r1, [sp, #40]	; 0x28
   16aec:	eor	r9, r9, r1
   16af0:	lsl	r2, r9, #1
   16af4:	orr	r6, r2, ip, lsr #31
   16af8:	str	r6, [sp, #112]	; 0x70
   16afc:	lsl	ip, ip, #1
   16b00:	orr	r9, ip, r9, lsr #31
   16b04:	str	r9, [sp, #96]	; 0x60
   16b08:	ldr	r2, [sp, #344]	; 0x158
   16b0c:	ldr	r9, [sp, #20]
   16b10:	adds	r2, r2, r9
   16b14:	ldr	r9, [sp, #348]	; 0x15c
   16b18:	ldr	r5, [sp, #24]
   16b1c:	adc	r6, r9, r5
   16b20:	ldr	ip, [sp, #120]	; 0x78
   16b24:	adds	r2, r2, ip
   16b28:	ldr	r7, [sp, #128]	; 0x80
   16b2c:	adc	r6, r6, r7
   16b30:	ldr	r5, [sp, #80]	; 0x50
   16b34:	eor	r5, r6, r5
   16b38:	ldr	lr, [sp, #76]	; 0x4c
   16b3c:	eor	lr, r2, lr
   16b40:	adds	r3, r3, r5
   16b44:	adc	r0, r0, lr
   16b48:	eor	ip, r3, ip
   16b4c:	eor	r4, r0, r7
   16b50:	lsr	r7, ip, #24
   16b54:	orr	r1, r7, r4, lsl #8
   16b58:	lsr	r4, r4, #24
   16b5c:	orr	r8, r4, ip, lsl #8
   16b60:	ldr	r9, [sp, #312]	; 0x138
   16b64:	adds	r2, r9, r2
   16b68:	ldr	r9, [sp, #316]	; 0x13c
   16b6c:	adc	r6, r9, r6
   16b70:	adds	r9, r2, r1
   16b74:	adc	ip, r6, r8
   16b78:	str	r9, [sp, #20]
   16b7c:	eor	r5, r5, r9
   16b80:	str	ip, [sp, #24]
   16b84:	eor	lr, lr, ip
   16b88:	lsr	r2, r5, #16
   16b8c:	orr	r7, r2, lr, lsl #16
   16b90:	lsr	lr, lr, #16
   16b94:	orr	lr, lr, r5, lsl #16
   16b98:	str	r7, [sp, #76]	; 0x4c
   16b9c:	adds	r3, r3, r7
   16ba0:	mov	r5, r3
   16ba4:	str	lr, [sp, #80]	; 0x50
   16ba8:	adc	r0, r0, lr
   16bac:	mov	r3, r0
   16bb0:	str	r5, [sp, #44]	; 0x2c
   16bb4:	eor	r1, r1, r5
   16bb8:	str	r3, [sp, #48]	; 0x30
   16bbc:	eor	r8, r8, r3
   16bc0:	lsl	r3, r8, #1
   16bc4:	orr	r0, r3, r1, lsr #31
   16bc8:	str	r0, [sp, #120]	; 0x78
   16bcc:	lsl	r1, r1, #1
   16bd0:	orr	r7, r1, r8, lsr #31
   16bd4:	ldr	r8, [sp, #336]	; 0x150
   16bd8:	ldr	r5, [sp, #12]
   16bdc:	adds	r3, r8, r5
   16be0:	ldr	r8, [sp, #340]	; 0x154
   16be4:	ldr	sl, [sp, #16]
   16be8:	adc	r0, r8, sl
   16bec:	ldr	r6, [sp, #88]	; 0x58
   16bf0:	adds	r3, r3, r6
   16bf4:	ldr	r9, [sp, #116]	; 0x74
   16bf8:	adc	r0, r0, r9
   16bfc:	eor	r5, r0, fp
   16c00:	ldr	sl, [sp, #72]	; 0x48
   16c04:	eor	ip, r3, sl
   16c08:	ldr	r4, [sp, #52]	; 0x34
   16c0c:	adds	r2, r4, r5
   16c10:	ldr	r1, [sp, #56]	; 0x38
   16c14:	adc	r4, r1, ip
   16c18:	eor	r6, r2, r6
   16c1c:	eor	lr, r4, r9
   16c20:	lsr	r9, r6, #24
   16c24:	orr	r1, r9, lr, lsl #8
   16c28:	lsr	lr, lr, #24
   16c2c:	orr	r8, lr, r6, lsl #8
   16c30:	ldr	fp, [sp, #328]	; 0x148
   16c34:	adds	r3, fp, r3
   16c38:	ldr	fp, [sp, #332]	; 0x14c
   16c3c:	adc	r0, fp, r0
   16c40:	adds	fp, r3, r1
   16c44:	adc	r9, r0, r8
   16c48:	str	fp, [sp, #12]
   16c4c:	eor	r5, r5, fp
   16c50:	str	r9, [sp, #16]
   16c54:	eor	ip, ip, r9
   16c58:	lsr	r3, r5, #16
   16c5c:	orr	sl, r3, ip, lsl #16
   16c60:	lsr	ip, ip, #16
   16c64:	orr	r0, ip, r5, lsl #16
   16c68:	str	sl, [sp, #72]	; 0x48
   16c6c:	adds	r2, r2, sl
   16c70:	str	r0, [sp, #88]	; 0x58
   16c74:	adc	r4, r4, r0
   16c78:	eor	r1, r1, r2
   16c7c:	eor	r8, r8, r4
   16c80:	lsl	r3, r8, #1
   16c84:	orr	r5, r3, r1, lsr #31
   16c88:	str	r5, [sp, #124]	; 0x7c
   16c8c:	lsl	r1, r1, #1
   16c90:	orr	r1, r1, r8, lsr #31
   16c94:	str	r1, [sp, #116]	; 0x74
   16c98:	ldr	r8, [sp, #288]	; 0x120
   16c9c:	ldr	r1, [sp, #28]
   16ca0:	adds	r1, r8, r1
   16ca4:	ldr	r6, [sp, #292]	; 0x124
   16ca8:	ldr	lr, [sp, #32]
   16cac:	adc	lr, r6, lr
   16cb0:	ldr	r9, [sp, #92]	; 0x5c
   16cb4:	adds	r1, r1, r9
   16cb8:	ldr	r6, [sp, #100]	; 0x64
   16cbc:	adc	lr, lr, r6
   16cc0:	ldr	r0, [sp, #108]	; 0x6c
   16cc4:	eor	r8, lr, r0
   16cc8:	ldr	r3, [sp, #104]	; 0x68
   16ccc:	eor	r5, r1, r3
   16cd0:	ldr	r3, [sp, #60]	; 0x3c
   16cd4:	adds	r3, r3, r8
   16cd8:	ldr	ip, [sp, #64]	; 0x40
   16cdc:	adc	r0, ip, r5
   16ce0:	eor	r9, r3, r9
   16ce4:	eor	r6, r0, r6
   16ce8:	lsr	fp, r9, #24
   16cec:	orr	ip, fp, r6, lsl #8
   16cf0:	lsr	r6, r6, #24
   16cf4:	orr	sl, r6, r9, lsl #8
   16cf8:	ldr	r6, [sp, #320]	; 0x140
   16cfc:	adds	r1, r6, r1
   16d00:	ldr	r6, [sp, #324]	; 0x144
   16d04:	adc	lr, r6, lr
   16d08:	adds	r6, r1, ip
   16d0c:	adc	lr, lr, sl
   16d10:	str	r6, [sp, #28]
   16d14:	eor	r8, r8, r6
   16d18:	str	lr, [sp, #32]
   16d1c:	eor	r5, r5, lr
   16d20:	lsr	r1, r8, #16
   16d24:	orr	r9, r1, r5, lsl #16
   16d28:	lsr	r5, r5, #16
   16d2c:	orr	fp, r5, r8, lsl #16
   16d30:	adds	r3, r3, r9
   16d34:	adc	r0, r0, fp
   16d38:	eor	ip, ip, r3
   16d3c:	eor	sl, sl, r0
   16d40:	lsl	r1, sl, #1
   16d44:	orr	r8, r1, ip, lsr #31
   16d48:	str	r8, [sp, #100]	; 0x64
   16d4c:	lsl	ip, ip, #1
   16d50:	orr	r8, ip, sl, lsr #31
   16d54:	str	r8, [sp, #92]	; 0x5c
   16d58:	ldr	r1, [sp, #400]	; 0x190
   16d5c:	ldr	r5, [sp, #4]
   16d60:	adds	r1, r1, r5
   16d64:	ldr	ip, [sp, #404]	; 0x194
   16d68:	ldr	sl, [sp, #8]
   16d6c:	adc	r8, ip, sl
   16d70:	adds	r1, r1, r7
   16d74:	ldr	sl, [sp, #120]	; 0x78
   16d78:	adc	r8, r8, sl
   16d7c:	eor	r6, r8, fp
   16d80:	eor	lr, r1, r9
   16d84:	adds	r2, r2, r6
   16d88:	adc	r4, r4, lr
   16d8c:	eor	r7, r7, r2
   16d90:	eor	r5, r4, sl
   16d94:	lsr	sl, r7, #24
   16d98:	orr	ip, sl, r5, lsl #8
   16d9c:	lsr	r5, r5, #24
   16da0:	orr	r9, r5, r7, lsl #8
   16da4:	ldr	sl, [sp, #368]	; 0x170
   16da8:	adds	r1, sl, r1
   16dac:	ldr	sl, [sp, #372]	; 0x174
   16db0:	adc	r8, sl, r8
   16db4:	adds	sl, r1, ip
   16db8:	adc	r1, r8, r9
   16dbc:	str	sl, [sp, #4]
   16dc0:	eor	r6, r6, sl
   16dc4:	str	r1, [sp, #8]
   16dc8:	eor	lr, lr, r1
   16dcc:	lsr	r1, r6, #16
   16dd0:	orr	r5, r1, lr, lsl #16
   16dd4:	lsr	lr, lr, #16
   16dd8:	orr	r6, lr, r6, lsl #16
   16ddc:	str	r5, [sp, #104]	; 0x68
   16de0:	adds	r2, r2, r5
   16de4:	mov	r8, r2
   16de8:	str	r6, [sp, #108]	; 0x6c
   16dec:	adc	r2, r4, r6
   16df0:	str	r8, [sp, #52]	; 0x34
   16df4:	eor	ip, ip, r8
   16df8:	str	r2, [sp, #56]	; 0x38
   16dfc:	eor	r9, r9, r2
   16e00:	lsl	r2, r9, #1
   16e04:	orr	r4, r2, ip, lsr #31
   16e08:	str	r4, [sp, #128]	; 0x80
   16e0c:	lsl	ip, ip, #1
   16e10:	orr	ip, ip, r9, lsr #31
   16e14:	str	ip, [sp, #120]	; 0x78
   16e18:	ldr	r7, [sp, #352]	; 0x160
   16e1c:	ldr	lr, [sp, #20]
   16e20:	adds	r2, r7, lr
   16e24:	ldr	r9, [sp, #356]	; 0x164
   16e28:	ldr	ip, [sp, #24]
   16e2c:	adc	r6, r9, ip
   16e30:	ldr	r9, [sp, #116]	; 0x74
   16e34:	adds	r2, r2, r9
   16e38:	ldr	r8, [sp, #124]	; 0x7c
   16e3c:	adc	r6, r6, r8
   16e40:	ldr	r1, [sp, #84]	; 0x54
   16e44:	eor	lr, r6, r1
   16e48:	ldr	r7, [sp, #68]	; 0x44
   16e4c:	eor	ip, r2, r7
   16e50:	adds	r3, r3, lr
   16e54:	adc	r0, r0, ip
   16e58:	eor	r7, r3, r9
   16e5c:	eor	r4, r0, r8
   16e60:	lsr	r8, r7, #24
   16e64:	orr	r1, r8, r4, lsl #8
   16e68:	lsr	r4, r4, #24
   16e6c:	orr	r5, r4, r7, lsl #8
   16e70:	ldr	r7, [sp, #392]	; 0x188
   16e74:	adds	r2, r7, r2
   16e78:	ldr	r7, [sp, #396]	; 0x18c
   16e7c:	adc	r6, r7, r6
   16e80:	adds	r7, r2, r1
   16e84:	adc	r9, r6, r5
   16e88:	str	r7, [sp, #20]
   16e8c:	eor	lr, lr, r7
   16e90:	str	r9, [sp, #24]
   16e94:	eor	ip, ip, r9
   16e98:	lsr	r2, lr, #16
   16e9c:	orr	r2, r2, ip, lsl #16
   16ea0:	lsr	ip, ip, #16
   16ea4:	orr	r9, ip, lr, lsl #16
   16ea8:	str	r2, [sp, #68]	; 0x44
   16eac:	adds	r3, r3, r2
   16eb0:	adc	r0, r0, r9
   16eb4:	str	r3, [sp, #60]	; 0x3c
   16eb8:	eor	r1, r1, r3
   16ebc:	str	r0, [sp, #64]	; 0x40
   16ec0:	eor	r5, r5, r0
   16ec4:	lsl	r3, r5, #1
   16ec8:	orr	lr, r3, r1, lsr #31
   16ecc:	str	lr, [sp, #116]	; 0x74
   16ed0:	lsl	r1, r1, #1
   16ed4:	orr	r1, r1, r5, lsr #31
   16ed8:	str	r1, [sp, #84]	; 0x54
   16edc:	ldr	r1, [sp, #304]	; 0x130
   16ee0:	ldr	fp, [sp, #12]
   16ee4:	adds	r3, r1, fp
   16ee8:	ldr	r1, [sp, #308]	; 0x134
   16eec:	ldr	fp, [sp, #16]
   16ef0:	adc	r0, r1, fp
   16ef4:	ldr	r2, [sp, #92]	; 0x5c
   16ef8:	adds	r3, r3, r2
   16efc:	ldr	fp, [sp, #100]	; 0x64
   16f00:	adc	r0, r0, fp
   16f04:	ldr	lr, [sp, #80]	; 0x50
   16f08:	eor	r6, r0, lr
   16f0c:	ldr	r7, [sp, #76]	; 0x4c
   16f10:	eor	ip, r3, r7
   16f14:	ldr	r4, [sp, #36]	; 0x24
   16f18:	adds	r1, r4, r6
   16f1c:	ldr	r4, [sp, #40]	; 0x28
   16f20:	adc	r4, r4, ip
   16f24:	eor	r7, r1, r2
   16f28:	eor	r5, r4, fp
   16f2c:	lsr	r8, r7, #24
   16f30:	orr	r2, r8, r5, lsl #8
   16f34:	lsr	lr, r5, #24
   16f38:	orr	lr, lr, r7, lsl #8
   16f3c:	ldr	fp, [sp, #376]	; 0x178
   16f40:	adds	r3, fp, r3
   16f44:	ldr	fp, [sp, #380]	; 0x17c
   16f48:	adc	r0, fp, r0
   16f4c:	adds	fp, r3, r2
   16f50:	adc	r7, r0, lr
   16f54:	str	fp, [sp, #12]
   16f58:	eor	r6, r6, fp
   16f5c:	str	r7, [sp, #16]
   16f60:	eor	ip, ip, r7
   16f64:	lsr	r3, r6, #16
   16f68:	orr	fp, r3, ip, lsl #16
   16f6c:	lsr	ip, ip, #16
   16f70:	orr	r5, ip, r6, lsl #16
   16f74:	str	fp, [sp, #76]	; 0x4c
   16f78:	adds	r1, r1, fp
   16f7c:	str	r5, [sp, #80]	; 0x50
   16f80:	adc	r4, r4, r5
   16f84:	eor	r2, r2, r1
   16f88:	eor	lr, lr, r4
   16f8c:	lsl	r3, lr, #1
   16f90:	orr	r8, r3, r2, lsr #31
   16f94:	str	r8, [sp, #100]	; 0x64
   16f98:	lsl	r2, r2, #1
   16f9c:	orr	r3, r2, lr, lsr #31
   16fa0:	str	r3, [sp, #92]	; 0x5c
   16fa4:	ldr	lr, [sp, #384]	; 0x180
   16fa8:	ldr	r2, [sp, #28]
   16fac:	adds	r2, lr, r2
   16fb0:	ldr	r6, [sp, #388]	; 0x184
   16fb4:	ldr	lr, [sp, #32]
   16fb8:	adc	lr, r6, lr
   16fbc:	ldr	r8, [sp, #96]	; 0x60
   16fc0:	adds	r2, r2, r8
   16fc4:	ldr	ip, [sp, #112]	; 0x70
   16fc8:	adc	lr, lr, ip
   16fcc:	ldr	r6, [sp, #88]	; 0x58
   16fd0:	eor	r7, lr, r6
   16fd4:	ldr	sl, [sp, #72]	; 0x48
   16fd8:	eor	r5, r2, sl
   16fdc:	ldr	r0, [sp, #44]	; 0x2c
   16fe0:	adds	r3, r0, r7
   16fe4:	ldr	r0, [sp, #48]	; 0x30
   16fe8:	adc	r0, r0, r5
   16fec:	eor	r8, r3, r8
   16ff0:	eor	r6, r0, ip
   16ff4:	lsr	fp, r8, #24
   16ff8:	orr	ip, fp, r6, lsl #8
   16ffc:	lsr	r6, r6, #24
   17000:	orr	sl, r6, r8, lsl #8
   17004:	ldr	r6, [sp, #280]	; 0x118
   17008:	adds	r2, r6, r2
   1700c:	ldr	r6, [sp, #284]	; 0x11c
   17010:	adc	lr, r6, lr
   17014:	adds	r6, r2, ip
   17018:	adc	lr, lr, sl
   1701c:	str	r6, [sp, #28]
   17020:	eor	r7, r7, r6
   17024:	str	lr, [sp, #32]
   17028:	eor	r5, r5, lr
   1702c:	lsr	r2, r7, #16
   17030:	orr	r2, r2, r5, lsl #16
   17034:	lsr	r5, r5, #16
   17038:	orr	fp, r5, r7, lsl #16
   1703c:	str	r2, [sp, #72]	; 0x48
   17040:	adds	r3, r3, r2
   17044:	adc	r0, r0, fp
   17048:	eor	ip, ip, r3
   1704c:	eor	sl, sl, r0
   17050:	lsl	r2, sl, #1
   17054:	orr	r5, r2, ip, lsr #31
   17058:	lsl	ip, ip, #1
   1705c:	orr	r8, ip, sl, lsr #31
   17060:	ldr	r6, [sp, #280]	; 0x118
   17064:	ldr	sl, [sp, #4]
   17068:	adds	r2, r6, sl
   1706c:	ldr	sl, [sp, #284]	; 0x11c
   17070:	ldr	ip, [sp, #8]
   17074:	adc	r7, sl, ip
   17078:	adds	r2, r2, r8
   1707c:	adc	r7, r7, r5
   17080:	eor	r6, r7, r9
   17084:	ldr	lr, [sp, #68]	; 0x44
   17088:	eor	lr, r2, lr
   1708c:	adds	r1, r1, r6
   17090:	adc	r4, r4, lr
   17094:	eor	r8, r8, r1
   17098:	eor	r5, r5, r4
   1709c:	lsr	sl, r8, #24
   170a0:	orr	ip, sl, r5, lsl #8
   170a4:	lsr	r5, r5, #24
   170a8:	orr	r9, r5, r8, lsl #8
   170ac:	ldr	sl, [sp, #288]	; 0x120
   170b0:	adds	r2, sl, r2
   170b4:	ldr	sl, [sp, #292]	; 0x124
   170b8:	adc	r7, sl, r7
   170bc:	adds	sl, r2, ip
   170c0:	adc	r8, r7, r9
   170c4:	str	sl, [sp, #4]
   170c8:	eor	r6, r6, sl
   170cc:	str	r8, [sp, #8]
   170d0:	eor	lr, lr, r8
   170d4:	lsr	r2, r6, #16
   170d8:	orr	sl, r2, lr, lsl #16
   170dc:	lsr	lr, lr, #16
   170e0:	orr	r6, lr, r6, lsl #16
   170e4:	str	sl, [sp, #68]	; 0x44
   170e8:	adds	r1, r1, sl
   170ec:	mov	r2, r1
   170f0:	str	r6, [sp, #88]	; 0x58
   170f4:	adc	r4, r4, r6
   170f8:	mov	r1, r4
   170fc:	str	r2, [sp, #36]	; 0x24
   17100:	eor	ip, ip, r2
   17104:	str	r1, [sp, #40]	; 0x28
   17108:	eor	r9, r9, r1
   1710c:	lsl	r2, r9, #1
   17110:	orr	lr, r2, ip, lsr #31
   17114:	str	lr, [sp, #112]	; 0x70
   17118:	lsl	ip, ip, #1
   1711c:	orr	r6, ip, r9, lsr #31
   17120:	str	r6, [sp, #96]	; 0x60
   17124:	ldr	ip, [sp, #296]	; 0x128
   17128:	ldr	r7, [sp, #20]
   1712c:	adds	r2, ip, r7
   17130:	ldr	r7, [sp, #300]	; 0x12c
   17134:	ldr	r9, [sp, #24]
   17138:	adc	r6, r7, r9
   1713c:	ldr	ip, [sp, #120]	; 0x78
   17140:	adds	r2, r2, ip
   17144:	ldr	r4, [sp, #128]	; 0x80
   17148:	adc	r6, r6, r4
   1714c:	ldr	r7, [sp, #80]	; 0x50
   17150:	eor	r5, r6, r7
   17154:	ldr	sl, [sp, #76]	; 0x4c
   17158:	eor	lr, r2, sl
   1715c:	adds	r3, r3, r5
   17160:	adc	r0, r0, lr
   17164:	eor	ip, r3, ip
   17168:	eor	r4, r0, r4
   1716c:	lsr	r7, ip, #24
   17170:	orr	r1, r7, r4, lsl #8
   17174:	lsr	r4, r4, #24
   17178:	orr	r8, r4, ip, lsl #8
   1717c:	ldr	r7, [sp, #304]	; 0x130
   17180:	adds	r2, r7, r2
   17184:	ldr	r7, [sp, #308]	; 0x134
   17188:	adc	r6, r7, r6
   1718c:	adds	r7, r2, r1
   17190:	adc	r9, r6, r8
   17194:	str	r7, [sp, #20]
   17198:	eor	r5, r5, r7
   1719c:	str	r9, [sp, #24]
   171a0:	eor	lr, lr, r9
   171a4:	lsr	r2, r5, #16
   171a8:	orr	ip, r2, lr, lsl #16
   171ac:	lsr	lr, lr, #16
   171b0:	orr	r5, lr, r5, lsl #16
   171b4:	str	ip, [sp, #76]	; 0x4c
   171b8:	adds	r3, r3, ip
   171bc:	str	r5, [sp, #80]	; 0x50
   171c0:	adc	r0, r0, r5
   171c4:	mov	r4, r0
   171c8:	str	r3, [sp, #44]	; 0x2c
   171cc:	eor	r1, r1, r3
   171d0:	str	r4, [sp, #48]	; 0x30
   171d4:	eor	r8, r8, r4
   171d8:	lsl	r3, r8, #1
   171dc:	orr	r7, r3, r1, lsr #31
   171e0:	str	r7, [sp, #120]	; 0x78
   171e4:	lsl	r1, r1, #1
   171e8:	orr	r7, r1, r8, lsr #31
   171ec:	ldr	r0, [sp, #312]	; 0x138
   171f0:	ldr	ip, [sp, #12]
   171f4:	adds	r3, r0, ip
   171f8:	ldr	r0, [sp, #316]	; 0x13c
   171fc:	ldr	ip, [sp, #16]
   17200:	adc	r0, r0, ip
   17204:	ldr	r9, [sp, #84]	; 0x54
   17208:	adds	r3, r3, r9
   1720c:	ldr	lr, [sp, #116]	; 0x74
   17210:	adc	r0, r0, lr
   17214:	eor	r5, r0, fp
   17218:	ldr	r4, [sp, #72]	; 0x48
   1721c:	eor	ip, r3, r4
   17220:	ldr	r8, [sp, #52]	; 0x34
   17224:	adds	r2, r8, r5
   17228:	ldr	r1, [sp, #56]	; 0x38
   1722c:	adc	r4, r1, ip
   17230:	eor	r6, r2, r9
   17234:	eor	lr, r4, lr
   17238:	lsr	r9, r6, #24
   1723c:	orr	r1, r9, lr, lsl #8
   17240:	lsr	lr, lr, #24
   17244:	orr	r8, lr, r6, lsl #8
   17248:	ldr	fp, [sp, #320]	; 0x140
   1724c:	adds	r3, fp, r3
   17250:	ldr	fp, [sp, #324]	; 0x144
   17254:	adc	r0, fp, r0
   17258:	adds	fp, r3, r1
   1725c:	adc	lr, r0, r8
   17260:	str	fp, [sp, #12]
   17264:	eor	r5, r5, fp
   17268:	str	lr, [sp, #16]
   1726c:	eor	ip, ip, lr
   17270:	lsr	r3, r5, #16
   17274:	orr	r9, r3, ip, lsl #16
   17278:	lsr	ip, ip, #16
   1727c:	orr	r0, ip, r5, lsl #16
   17280:	str	r9, [sp, #72]	; 0x48
   17284:	adds	r2, r2, r9
   17288:	str	r0, [sp, #84]	; 0x54
   1728c:	adc	r4, r4, r0
   17290:	eor	r1, r1, r2
   17294:	eor	r8, r8, r4
   17298:	lsl	r3, r8, #1
   1729c:	orr	ip, r3, r1, lsr #31
   172a0:	str	ip, [sp, #124]	; 0x7c
   172a4:	lsl	r1, r1, #1
   172a8:	orr	r1, r1, r8, lsr #31
   172ac:	str	r1, [sp, #116]	; 0x74
   172b0:	ldr	lr, [sp, #328]	; 0x148
   172b4:	ldr	r1, [sp, #28]
   172b8:	adds	r1, lr, r1
   172bc:	ldr	r6, [sp, #332]	; 0x14c
   172c0:	ldr	lr, [sp, #32]
   172c4:	adc	lr, r6, lr
   172c8:	ldr	r9, [sp, #92]	; 0x5c
   172cc:	adds	r1, r1, r9
   172d0:	ldr	ip, [sp, #100]	; 0x64
   172d4:	adc	lr, lr, ip
   172d8:	ldr	r6, [sp, #108]	; 0x6c
   172dc:	eor	r8, lr, r6
   172e0:	ldr	r5, [sp, #104]	; 0x68
   172e4:	eor	r5, r1, r5
   172e8:	ldr	r3, [sp, #60]	; 0x3c
   172ec:	adds	r3, r3, r8
   172f0:	ldr	r0, [sp, #64]	; 0x40
   172f4:	adc	r0, r0, r5
   172f8:	eor	r9, r3, r9
   172fc:	eor	r6, r0, ip
   17300:	lsr	fp, r9, #24
   17304:	orr	ip, fp, r6, lsl #8
   17308:	lsr	r6, r6, #24
   1730c:	orr	sl, r6, r9, lsl #8
   17310:	ldr	r6, [sp, #336]	; 0x150
   17314:	adds	r1, r6, r1
   17318:	ldr	r6, [sp, #340]	; 0x154
   1731c:	adc	lr, r6, lr
   17320:	adds	r6, r1, ip
   17324:	adc	lr, lr, sl
   17328:	mov	r1, lr
   1732c:	str	r6, [sp, #28]
   17330:	eor	r8, r8, r6
   17334:	str	r1, [sp, #32]
   17338:	eor	r5, r5, r1
   1733c:	lsr	r1, r8, #16
   17340:	orr	r9, r1, r5, lsl #16
   17344:	lsr	r5, r5, #16
   17348:	orr	fp, r5, r8, lsl #16
   1734c:	adds	r3, r3, r9
   17350:	adc	r0, r0, fp
   17354:	eor	ip, ip, r3
   17358:	eor	sl, sl, r0
   1735c:	lsl	r1, sl, #1
   17360:	orr	r8, r1, ip, lsr #31
   17364:	str	r8, [sp, #100]	; 0x64
   17368:	lsl	ip, ip, #1
   1736c:	orr	lr, ip, sl, lsr #31
   17370:	str	lr, [sp, #92]	; 0x5c
   17374:	ldr	r6, [sp, #344]	; 0x158
   17378:	ldr	sl, [sp, #4]
   1737c:	adds	r1, r6, sl
   17380:	ldr	r6, [sp, #348]	; 0x15c
   17384:	ldr	r8, [sp, #8]
   17388:	adc	r8, r6, r8
   1738c:	adds	r1, r1, r7
   17390:	ldr	r5, [sp, #120]	; 0x78
   17394:	adc	r8, r8, r5
   17398:	eor	r6, r8, fp
   1739c:	eor	lr, r1, r9
   173a0:	adds	r2, r2, r6
   173a4:	adc	r4, r4, lr
   173a8:	eor	r7, r7, r2
   173ac:	eor	r5, r4, r5
   173b0:	lsr	sl, r7, #24
   173b4:	orr	ip, sl, r5, lsl #8
   173b8:	lsr	r5, r5, #24
   173bc:	orr	r9, r5, r7, lsl #8
   173c0:	ldr	r5, [sp, #352]	; 0x160
   173c4:	adds	r1, r5, r1
   173c8:	ldr	r5, [sp, #356]	; 0x164
   173cc:	adc	r8, r5, r8
   173d0:	adds	r5, r1, ip
   173d4:	adc	r8, r8, r9
   173d8:	mov	sl, r8
   173dc:	str	r5, [sp, #4]
   173e0:	eor	r6, r6, r5
   173e4:	str	sl, [sp, #8]
   173e8:	eor	lr, lr, sl
   173ec:	lsr	r1, r6, #16
   173f0:	orr	r8, r1, lr, lsl #16
   173f4:	lsr	lr, lr, #16
   173f8:	orr	r6, lr, r6, lsl #16
   173fc:	str	r8, [sp, #104]	; 0x68
   17400:	adds	r2, r2, r8
   17404:	mov	r1, r2
   17408:	str	r6, [sp, #108]	; 0x6c
   1740c:	adc	r2, r4, r6
   17410:	mov	lr, r2
   17414:	str	r1, [sp, #52]	; 0x34
   17418:	eor	ip, ip, r1
   1741c:	str	lr, [sp, #56]	; 0x38
   17420:	eor	r9, r9, lr
   17424:	lsl	r2, r9, #1
   17428:	orr	r4, r2, ip, lsr #31
   1742c:	str	r4, [sp, #128]	; 0x80
   17430:	lsl	ip, ip, #1
   17434:	orr	ip, ip, r9, lsr #31
   17438:	str	ip, [sp, #120]	; 0x78
   1743c:	ldr	r2, [sp, #360]	; 0x168
   17440:	ldr	r7, [sp, #20]
   17444:	adds	r2, r2, r7
   17448:	ldr	r7, [sp, #364]	; 0x16c
   1744c:	ldr	r9, [sp, #24]
   17450:	adc	r6, r7, r9
   17454:	ldr	r7, [sp, #116]	; 0x74
   17458:	adds	r2, r2, r7
   1745c:	ldr	r8, [sp, #124]	; 0x7c
   17460:	adc	r6, r6, r8
   17464:	ldr	r1, [sp, #88]	; 0x58
   17468:	eor	lr, r6, r1
   1746c:	ldr	sl, [sp, #68]	; 0x44
   17470:	eor	ip, r2, sl
   17474:	adds	r3, r3, lr
   17478:	adc	r0, r0, ip
   1747c:	eor	r7, r3, r7
   17480:	eor	r4, r0, r8
   17484:	lsr	r8, r7, #24
   17488:	orr	r1, r8, r4, lsl #8
   1748c:	lsr	r4, r4, #24
   17490:	orr	r5, r4, r7, lsl #8
   17494:	ldr	r7, [sp, #368]	; 0x170
   17498:	adds	r2, r7, r2
   1749c:	ldr	r7, [sp, #372]	; 0x174
   174a0:	adc	r6, r7, r6
   174a4:	adds	r7, r2, r1
   174a8:	adc	r9, r6, r5
   174ac:	str	r7, [sp, #20]
   174b0:	eor	lr, lr, r7
   174b4:	str	r9, [sp, #24]
   174b8:	eor	ip, ip, r9
   174bc:	lsr	r2, lr, #16
   174c0:	orr	r7, r2, ip, lsl #16
   174c4:	lsr	ip, ip, #16
   174c8:	orr	r9, ip, lr, lsl #16
   174cc:	str	r7, [sp, #68]	; 0x44
   174d0:	adds	r3, r3, r7
   174d4:	adc	r0, r0, r9
   174d8:	str	r3, [sp, #60]	; 0x3c
   174dc:	eor	r1, r1, r3
   174e0:	str	r0, [sp, #64]	; 0x40
   174e4:	eor	r5, r5, r0
   174e8:	lsl	r3, r5, #1
   174ec:	orr	r3, r3, r1, lsr #31
   174f0:	str	r3, [sp, #116]	; 0x74
   174f4:	lsl	r1, r1, #1
   174f8:	orr	r1, r1, r5, lsr #31
   174fc:	str	r1, [sp, #88]	; 0x58
   17500:	ldr	r3, [sp, #376]	; 0x178
   17504:	ldr	fp, [sp, #12]
   17508:	adds	r3, r3, fp
   1750c:	ldr	r1, [sp, #380]	; 0x17c
   17510:	ldr	fp, [sp, #16]
   17514:	adc	r0, r1, fp
   17518:	ldr	sl, [sp, #92]	; 0x5c
   1751c:	adds	r3, r3, sl
   17520:	ldr	r8, [sp, #100]	; 0x64
   17524:	adc	r0, r0, r8
   17528:	ldr	r5, [sp, #80]	; 0x50
   1752c:	eor	r6, r0, r5
   17530:	ldr	ip, [sp, #76]	; 0x4c
   17534:	eor	ip, r3, ip
   17538:	ldr	r2, [sp, #36]	; 0x24
   1753c:	adds	r1, r2, r6
   17540:	ldr	r4, [sp, #40]	; 0x28
   17544:	adc	r4, r4, ip
   17548:	eor	r7, r1, sl
   1754c:	eor	r5, r4, r8
   17550:	lsr	r8, r7, #24
   17554:	orr	r2, r8, r5, lsl #8
   17558:	lsr	lr, r5, #24
   1755c:	orr	lr, lr, r7, lsl #8
   17560:	ldr	fp, [sp, #384]	; 0x180
   17564:	adds	r3, fp, r3
   17568:	ldr	fp, [sp, #388]	; 0x184
   1756c:	adc	r0, fp, r0
   17570:	adds	fp, r3, r2
   17574:	adc	r5, r0, lr
   17578:	str	fp, [sp, #12]
   1757c:	eor	r6, r6, fp
   17580:	str	r5, [sp, #16]
   17584:	eor	ip, ip, r5
   17588:	lsr	r3, r6, #16
   1758c:	orr	r8, r3, ip, lsl #16
   17590:	lsr	ip, ip, #16
   17594:	orr	fp, ip, r6, lsl #16
   17598:	str	r8, [sp, #76]	; 0x4c
   1759c:	adds	r1, r1, r8
   175a0:	str	fp, [sp, #80]	; 0x50
   175a4:	adc	r4, r4, fp
   175a8:	eor	r2, r2, r1
   175ac:	eor	lr, lr, r4
   175b0:	lsl	r3, lr, #1
   175b4:	orr	ip, r3, r2, lsr #31
   175b8:	str	ip, [sp, #100]	; 0x64
   175bc:	lsl	r2, r2, #1
   175c0:	orr	r2, r2, lr, lsr #31
   175c4:	str	r2, [sp, #92]	; 0x5c
   175c8:	ldr	sl, [sp, #392]	; 0x188
   175cc:	ldr	r2, [sp, #28]
   175d0:	adds	r2, sl, r2
   175d4:	ldr	r6, [sp, #396]	; 0x18c
   175d8:	ldr	r8, [sp, #32]
   175dc:	adc	lr, r6, r8
   175e0:	ldr	r6, [sp, #96]	; 0x60
   175e4:	adds	r2, r2, r6
   175e8:	ldr	ip, [sp, #112]	; 0x70
   175ec:	adc	lr, lr, ip
   175f0:	ldr	r7, [sp, #84]	; 0x54
   175f4:	eor	r7, lr, r7
   175f8:	ldr	r5, [sp, #72]	; 0x48
   175fc:	eor	r5, r2, r5
   17600:	ldr	r3, [sp, #44]	; 0x2c
   17604:	adds	r3, r3, r7
   17608:	ldr	r0, [sp, #48]	; 0x30
   1760c:	adc	r0, r0, r5
   17610:	eor	r8, r3, r6
   17614:	eor	r6, r0, ip
   17618:	lsr	fp, r8, #24
   1761c:	orr	ip, fp, r6, lsl #8
   17620:	lsr	r6, r6, #24
   17624:	orr	sl, r6, r8, lsl #8
   17628:	ldr	r6, [sp, #400]	; 0x190
   1762c:	adds	r2, r6, r2
   17630:	ldr	r6, [sp, #404]	; 0x194
   17634:	adc	lr, r6, lr
   17638:	adds	r6, r2, ip
   1763c:	adc	lr, lr, sl
   17640:	str	r6, [sp, #28]
   17644:	eor	r7, r7, r6
   17648:	str	lr, [sp, #32]
   1764c:	eor	r5, r5, lr
   17650:	lsr	r2, r7, #16
   17654:	orr	r6, r2, r5, lsl #16
   17658:	lsr	r5, r5, #16
   1765c:	orr	fp, r5, r7, lsl #16
   17660:	str	r6, [sp, #72]	; 0x48
   17664:	adds	r3, r3, r6
   17668:	adc	r0, r0, fp
   1766c:	eor	ip, ip, r3
   17670:	eor	sl, sl, r0
   17674:	lsl	r2, sl, #1
   17678:	orr	r5, r2, ip, lsr #31
   1767c:	lsl	ip, ip, #1
   17680:	orr	r8, ip, sl, lsr #31
   17684:	ldr	ip, [sp, #392]	; 0x188
   17688:	ldr	r2, [sp, #4]
   1768c:	adds	r2, ip, r2
   17690:	ldr	ip, [sp, #396]	; 0x18c
   17694:	ldr	sl, [sp, #8]
   17698:	adc	r7, ip, sl
   1769c:	adds	r2, r2, r8
   176a0:	adc	r7, r7, r5
   176a4:	eor	r6, r7, r9
   176a8:	ldr	sl, [sp, #68]	; 0x44
   176ac:	eor	lr, r2, sl
   176b0:	adds	r1, r1, r6
   176b4:	adc	r4, r4, lr
   176b8:	eor	r8, r8, r1
   176bc:	eor	r5, r5, r4
   176c0:	lsr	sl, r8, #24
   176c4:	orr	ip, sl, r5, lsl #8
   176c8:	lsr	r5, r5, #24
   176cc:	orr	r9, r5, r8, lsl #8
   176d0:	ldr	sl, [sp, #360]	; 0x168
   176d4:	adds	r2, sl, r2
   176d8:	ldr	sl, [sp, #364]	; 0x16c
   176dc:	adc	r7, sl, r7
   176e0:	adds	sl, r2, ip
   176e4:	adc	r7, r7, r9
   176e8:	str	sl, [sp, #4]
   176ec:	eor	r6, r6, sl
   176f0:	str	r7, [sp, #8]
   176f4:	eor	lr, lr, r7
   176f8:	lsr	r2, r6, #16
   176fc:	orr	r8, r2, lr, lsl #16
   17700:	lsr	lr, lr, #16
   17704:	orr	sl, lr, r6, lsl #16
   17708:	str	r8, [sp, #68]	; 0x44
   1770c:	adds	r1, r1, r8
   17710:	mov	r2, r1
   17714:	str	sl, [sp, #84]	; 0x54
   17718:	adc	r1, r4, sl
   1771c:	str	r2, [sp, #36]	; 0x24
   17720:	eor	ip, ip, r2
   17724:	str	r1, [sp, #40]	; 0x28
   17728:	eor	r9, r9, r1
   1772c:	lsl	r2, r9, #1
   17730:	orr	r5, r2, ip, lsr #31
   17734:	str	r5, [sp, #112]	; 0x70
   17738:	lsl	ip, ip, #1
   1773c:	orr	ip, ip, r9, lsr #31
   17740:	str	ip, [sp, #96]	; 0x60
   17744:	ldr	ip, [sp, #312]	; 0x138
   17748:	ldr	r7, [sp, #20]
   1774c:	adds	r2, ip, r7
   17750:	ldr	r7, [sp, #316]	; 0x13c
   17754:	ldr	r9, [sp, #24]
   17758:	adc	r6, r7, r9
   1775c:	ldr	ip, [sp, #120]	; 0x78
   17760:	adds	r2, r2, ip
   17764:	ldr	r4, [sp, #128]	; 0x80
   17768:	adc	r6, r6, r4
   1776c:	ldr	r9, [sp, #80]	; 0x50
   17770:	eor	r5, r6, r9
   17774:	ldr	r7, [sp, #76]	; 0x4c
   17778:	eor	lr, r2, r7
   1777c:	adds	r3, r3, r5
   17780:	adc	r0, r0, lr
   17784:	eor	ip, r3, ip
   17788:	eor	r4, r0, r4
   1778c:	lsr	r7, ip, #24
   17790:	orr	r1, r7, r4, lsl #8
   17794:	lsr	r4, r4, #24
   17798:	orr	r8, r4, ip, lsl #8
   1779c:	ldr	r9, [sp, #344]	; 0x158
   177a0:	adds	r2, r9, r2
   177a4:	ldr	r9, [sp, #348]	; 0x15c
   177a8:	adc	r6, r9, r6
   177ac:	adds	r9, r2, r1
   177b0:	adc	r7, r6, r8
   177b4:	str	r9, [sp, #20]
   177b8:	eor	r5, r5, r9
   177bc:	str	r7, [sp, #24]
   177c0:	eor	lr, lr, r7
   177c4:	lsr	r2, r5, #16
   177c8:	orr	ip, r2, lr, lsl #16
   177cc:	lsr	lr, lr, #16
   177d0:	orr	r4, lr, r5, lsl #16
   177d4:	str	ip, [sp, #76]	; 0x4c
   177d8:	adds	r3, r3, ip
   177dc:	str	r4, [sp, #80]	; 0x50
   177e0:	adc	r0, r0, r4
   177e4:	str	r3, [sp, #44]	; 0x2c
   177e8:	eor	r1, r1, r3
   177ec:	str	r0, [sp, #48]	; 0x30
   177f0:	eor	r8, r8, r0
   177f4:	lsl	r3, r8, #1
   177f8:	orr	r9, r3, r1, lsr #31
   177fc:	str	r9, [sp, #120]	; 0x78
   17800:	lsl	r1, r1, #1
   17804:	orr	r7, r1, r8, lsr #31
   17808:	ldr	ip, [sp, #352]	; 0x160
   1780c:	ldr	r5, [sp, #12]
   17810:	adds	r3, ip, r5
   17814:	ldr	ip, [sp, #356]	; 0x164
   17818:	ldr	r5, [sp, #16]
   1781c:	adc	r0, ip, r5
   17820:	ldr	r4, [sp, #88]	; 0x58
   17824:	adds	r3, r3, r4
   17828:	ldr	ip, [sp, #116]	; 0x74
   1782c:	adc	r0, r0, ip
   17830:	eor	r5, r0, fp
   17834:	ldr	sl, [sp, #72]	; 0x48
   17838:	eor	r2, r3, sl
   1783c:	ldr	r1, [sp, #52]	; 0x34
   17840:	adds	r1, r1, r5
   17844:	ldr	lr, [sp, #56]	; 0x38
   17848:	adc	lr, lr, r2
   1784c:	eor	r6, r1, r4
   17850:	eor	r4, lr, ip
   17854:	lsr	r9, r6, #24
   17858:	orr	ip, r9, r4, lsl #8
   1785c:	lsr	r4, r4, #24
   17860:	orr	r8, r4, r6, lsl #8
   17864:	ldr	fp, [sp, #400]	; 0x190
   17868:	adds	r3, fp, r3
   1786c:	ldr	fp, [sp, #404]	; 0x194
   17870:	adc	r0, fp, r0
   17874:	adds	fp, r3, ip
   17878:	adc	r3, r0, r8
   1787c:	str	fp, [sp, #12]
   17880:	eor	r5, r5, fp
   17884:	str	r3, [sp, #16]
   17888:	eor	r2, r2, r3
   1788c:	lsr	r3, r5, #16
   17890:	orr	fp, r3, r2, lsl #16
   17894:	lsr	r2, r2, #16
   17898:	orr	r5, r2, r5, lsl #16
   1789c:	str	fp, [sp, #52]	; 0x34
   178a0:	adds	r1, r1, fp
   178a4:	str	r5, [sp, #56]	; 0x38
   178a8:	adc	lr, lr, r5
   178ac:	eor	ip, ip, r1
   178b0:	eor	r8, r8, lr
   178b4:	lsl	r3, r8, #1
   178b8:	orr	r9, r3, ip, lsr #31
   178bc:	str	r9, [sp, #88]	; 0x58
   178c0:	lsl	ip, ip, #1
   178c4:	orr	r6, ip, r8, lsr #31
   178c8:	str	r6, [sp, #72]	; 0x48
   178cc:	ldr	ip, [sp, #384]	; 0x180
   178d0:	ldr	r5, [sp, #28]
   178d4:	adds	r2, ip, r5
   178d8:	ldr	ip, [sp, #388]	; 0x184
   178dc:	ldr	r5, [sp, #32]
   178e0:	adc	ip, ip, r5
   178e4:	ldr	r9, [sp, #92]	; 0x5c
   178e8:	adds	r3, r2, r9
   178ec:	ldr	r4, [sp, #100]	; 0x64
   178f0:	adc	ip, ip, r4
   178f4:	ldr	r6, [sp, #108]	; 0x6c
   178f8:	eor	r8, ip, r6
   178fc:	ldr	r2, [sp, #104]	; 0x68
   17900:	eor	r5, r3, r2
   17904:	ldr	r2, [sp, #60]	; 0x3c
   17908:	adds	r2, r2, r8
   1790c:	ldr	r0, [sp, #64]	; 0x40
   17910:	adc	r0, r0, r5
   17914:	eor	r9, r2, r9
   17918:	eor	r6, r0, r4
   1791c:	lsr	fp, r9, #24
   17920:	orr	r4, fp, r6, lsl #8
   17924:	lsr	r6, r6, #24
   17928:	orr	sl, r6, r9, lsl #8
   1792c:	ldr	r6, [sp, #328]	; 0x148
   17930:	adds	r3, r6, r3
   17934:	ldr	r6, [sp, #332]	; 0x14c
   17938:	adc	ip, r6, ip
   1793c:	adds	r6, r3, r4
   17940:	adc	r3, ip, sl
   17944:	str	r6, [sp, #28]
   17948:	eor	r8, r8, r6
   1794c:	str	r3, [sp, #32]
   17950:	eor	r5, r5, r3
   17954:	lsr	r3, r8, #16
   17958:	orr	ip, r3, r5, lsl #16
   1795c:	lsr	r5, r5, #16
   17960:	orr	r9, r5, r8, lsl #16
   17964:	adds	r2, r2, ip
   17968:	adc	r0, r0, r9
   1796c:	eor	r4, r4, r2
   17970:	eor	sl, sl, r0
   17974:	lsl	r3, sl, #1
   17978:	orr	r8, r3, r4, lsr #31
   1797c:	str	r8, [sp, #60]	; 0x3c
   17980:	lsl	r4, r4, #1
   17984:	orr	fp, r4, sl, lsr #31
   17988:	ldr	r4, [sp, #288]	; 0x120
   1798c:	ldr	sl, [sp, #4]
   17990:	adds	r3, r4, sl
   17994:	ldr	sl, [sp, #292]	; 0x124
   17998:	ldr	r4, [sp, #8]
   1799c:	adc	r5, sl, r4
   179a0:	adds	r3, r3, r7
   179a4:	ldr	sl, [sp, #120]	; 0x78
   179a8:	adc	r5, r5, sl
   179ac:	eor	r4, r5, r9
   179b0:	eor	r6, r3, ip
   179b4:	adds	r1, r1, r4
   179b8:	adc	lr, lr, r6
   179bc:	eor	r7, r7, r1
   179c0:	eor	ip, lr, sl
   179c4:	lsr	sl, r7, #24
   179c8:	orr	r8, sl, ip, lsl #8
   179cc:	lsr	ip, ip, #24
   179d0:	orr	r9, ip, r7, lsl #8
   179d4:	ldr	sl, [sp, #376]	; 0x178
   179d8:	adds	r3, sl, r3
   179dc:	ldr	sl, [sp, #380]	; 0x17c
   179e0:	adc	r5, sl, r5
   179e4:	adds	r3, r3, r8
   179e8:	adc	r5, r5, r9
   179ec:	str	r3, [sp, #152]	; 0x98
   179f0:	str	r5, [sp, #156]	; 0x9c
   179f4:	eor	r4, r4, r3
   179f8:	eor	r6, r6, r5
   179fc:	lsr	r5, r4, #16
   17a00:	orr	r3, r5, r6, lsl #16
   17a04:	lsr	r6, r6, #16
   17a08:	orr	ip, r6, r4, lsl #16
   17a0c:	str	r3, [sp, #272]	; 0x110
   17a10:	str	ip, [sp, #276]	; 0x114
   17a14:	adds	r1, r1, r3
   17a18:	adc	lr, lr, ip
   17a1c:	str	r1, [sp, #232]	; 0xe8
   17a20:	str	lr, [sp, #236]	; 0xec
   17a24:	eor	r1, r1, r8
   17a28:	eor	lr, lr, r9
   17a2c:	lsl	r4, lr, #1
   17a30:	orr	r4, r4, r1, lsr #31
   17a34:	lsl	r1, r1, #1
   17a38:	orr	r1, r1, lr, lsr #31
   17a3c:	str	r1, [sp, #192]	; 0xc0
   17a40:	str	r4, [sp, #196]	; 0xc4
   17a44:	ldr	lr, [sp, #280]	; 0x118
   17a48:	ldr	r9, [sp, #20]
   17a4c:	adds	r3, lr, r9
   17a50:	ldr	lr, [sp, #284]	; 0x11c
   17a54:	ldr	r7, [sp, #24]
   17a58:	adc	ip, lr, r7
   17a5c:	ldr	r6, [sp, #72]	; 0x48
   17a60:	adds	r3, r3, r6
   17a64:	ldr	r9, [sp, #88]	; 0x58
   17a68:	adc	ip, ip, r9
   17a6c:	ldr	r1, [sp, #84]	; 0x54
   17a70:	eor	r1, ip, r1
   17a74:	ldr	r8, [sp, #68]	; 0x44
   17a78:	eor	lr, r3, r8
   17a7c:	adds	r2, r2, r1
   17a80:	adc	r0, r0, lr
   17a84:	eor	r7, r2, r6
   17a88:	eor	r4, r0, r9
   17a8c:	lsr	r8, r7, #24
   17a90:	orr	r5, r8, r4, lsl #8
   17a94:	lsr	r4, r4, #24
   17a98:	orr	r6, r4, r7, lsl #8
   17a9c:	ldr	r9, [sp, #296]	; 0x128
   17aa0:	adds	r3, r9, r3
   17aa4:	ldr	r9, [sp, #300]	; 0x12c
   17aa8:	adc	ip, r9, ip
   17aac:	adds	r3, r3, r5
   17ab0:	adc	ip, ip, r6
   17ab4:	str	r3, [sp, #160]	; 0xa0
   17ab8:	str	ip, [sp, #164]	; 0xa4
   17abc:	eor	r1, r1, r3
   17ac0:	eor	lr, lr, ip
   17ac4:	lsr	r4, r1, #16
   17ac8:	orr	r3, r4, lr, lsl #16
   17acc:	lsr	lr, lr, #16
   17ad0:	orr	ip, lr, r1, lsl #16
   17ad4:	str	r3, [sp, #248]	; 0xf8
   17ad8:	str	ip, [sp, #252]	; 0xfc
   17adc:	adds	r2, r2, r3
   17ae0:	adc	r0, r0, ip
   17ae4:	str	r2, [sp, #240]	; 0xf0
   17ae8:	str	r0, [sp, #244]	; 0xf4
   17aec:	eor	r2, r2, r5
   17af0:	eor	r0, r0, r6
   17af4:	lsl	r1, r0, #1
   17af8:	orr	r1, r1, r2, lsr #31
   17afc:	lsl	r2, r2, #1
   17b00:	orr	r2, r2, r0, lsr #31
   17b04:	str	r2, [sp, #200]	; 0xc8
   17b08:	str	r1, [sp, #204]	; 0xcc
   17b0c:	ldr	r9, [sp, #368]	; 0x170
   17b10:	ldr	r7, [sp, #12]
   17b14:	adds	r3, r9, r7
   17b18:	ldr	r9, [sp, #372]	; 0x174
   17b1c:	ldr	r7, [sp, #16]
   17b20:	adc	r0, r9, r7
   17b24:	adds	r3, r3, fp
   17b28:	ldr	r7, [sp, #60]	; 0x3c
   17b2c:	adc	r0, r0, r7
   17b30:	ldr	r4, [sp, #80]	; 0x50
   17b34:	eor	ip, r0, r4
   17b38:	ldr	lr, [sp, #76]	; 0x4c
   17b3c:	eor	lr, r3, lr
   17b40:	ldr	r2, [sp, #36]	; 0x24
   17b44:	adds	r1, r2, ip
   17b48:	ldr	r2, [sp, #40]	; 0x28
   17b4c:	adc	r4, r2, lr
   17b50:	eor	fp, fp, r1
   17b54:	eor	r2, r4, r7
   17b58:	lsr	r7, fp, #24
   17b5c:	orr	r5, r7, r2, lsl #8
   17b60:	lsr	r2, r2, #24
   17b64:	orr	r6, r2, fp, lsl #8
   17b68:	ldr	r7, [sp, #336]	; 0x150
   17b6c:	adds	r3, r7, r3
   17b70:	ldr	r7, [sp, #340]	; 0x154
   17b74:	adc	r0, r7, r0
   17b78:	adds	r3, r3, r5
   17b7c:	adc	r0, r0, r6
   17b80:	str	r3, [sp, #168]	; 0xa8
   17b84:	str	r0, [sp, #172]	; 0xac
   17b88:	eor	ip, ip, r3
   17b8c:	eor	lr, lr, r0
   17b90:	lsr	r0, ip, #16
   17b94:	orr	r3, r0, lr, lsl #16
   17b98:	lsr	lr, lr, #16
   17b9c:	orr	r2, lr, ip, lsl #16
   17ba0:	str	r3, [sp, #256]	; 0x100
   17ba4:	str	r2, [sp, #260]	; 0x104
   17ba8:	adds	r1, r1, r3
   17bac:	adc	r4, r4, r2
   17bb0:	str	r1, [sp, #216]	; 0xd8
   17bb4:	str	r4, [sp, #220]	; 0xdc
   17bb8:	eor	r1, r1, r5
   17bbc:	eor	r4, r4, r6
   17bc0:	lsl	r0, r4, #1
   17bc4:	orr	r0, r0, r1, lsr #31
   17bc8:	lsl	r1, r1, #1
   17bcc:	orr	r1, r1, r4, lsr #31
   17bd0:	str	r1, [sp, #208]	; 0xd0
   17bd4:	str	r0, [sp, #212]	; 0xd4
   17bd8:	ldr	r1, [sp, #320]	; 0x140
   17bdc:	ldr	r2, [sp, #28]
   17be0:	adds	r3, r1, r2
   17be4:	ldr	r1, [sp, #324]	; 0x144
   17be8:	ldr	r2, [sp, #32]
   17bec:	adc	ip, r1, r2
   17bf0:	ldr	r6, [sp, #96]	; 0x60
   17bf4:	adds	r1, r3, r6
   17bf8:	ldr	r5, [sp, #112]	; 0x70
   17bfc:	adc	r2, ip, r5
   17c00:	ldr	ip, [sp, #56]	; 0x38
   17c04:	eor	lr, r2, ip
   17c08:	ldr	fp, [sp, #52]	; 0x34
   17c0c:	eor	r4, r1, fp
   17c10:	ldr	r3, [sp, #44]	; 0x2c
   17c14:	adds	r3, r3, lr
   17c18:	ldr	r0, [sp, #48]	; 0x30
   17c1c:	adc	r0, r0, r4
   17c20:	eor	ip, r3, r6
   17c24:	eor	r5, r0, r5
   17c28:	lsr	r8, ip, #24
   17c2c:	orr	r6, r8, r5, lsl #8
   17c30:	lsr	r5, r5, #24
   17c34:	orr	r7, r5, ip, lsl #8
   17c38:	ldr	ip, [sp, #304]	; 0x130
   17c3c:	adds	r1, ip, r1
   17c40:	ldr	ip, [sp, #308]	; 0x134
   17c44:	adc	r2, ip, r2
   17c48:	adds	r1, r1, r6
   17c4c:	adc	r2, r2, r7
   17c50:	str	r1, [sp, #176]	; 0xb0
   17c54:	str	r2, [sp, #180]	; 0xb4
   17c58:	eor	lr, lr, r1
   17c5c:	eor	r4, r4, r2
   17c60:	lsr	ip, lr, #16
   17c64:	orr	r2, ip, r4, lsl #16
   17c68:	lsr	r4, r4, #16
   17c6c:	orr	r1, r4, lr, lsl #16
   17c70:	str	r2, [sp, #264]	; 0x108
   17c74:	str	r1, [sp, #268]	; 0x10c
   17c78:	adds	r3, r3, r2
   17c7c:	adc	r0, r0, r1
   17c80:	str	r3, [sp, #224]	; 0xe0
   17c84:	str	r0, [sp, #228]	; 0xe4
   17c88:	eor	r6, r6, r3
   17c8c:	eor	r7, r7, r0
   17c90:	lsl	r3, r7, #1
   17c94:	orr	r3, r3, r6, lsr #31
   17c98:	lsl	r6, r6, #1
   17c9c:	orr	r6, r6, r7, lsr #31
   17ca0:	str	r6, [sp, #184]	; 0xb8
   17ca4:	str	r3, [sp, #188]	; 0xbc
   17ca8:	ldr	r3, [sp, #132]	; 0x84
   17cac:	ldr	r0, [sp, #136]	; 0x88
   17cb0:	ldr	r4, [sp, #140]	; 0x8c
   17cb4:	ldr	r1, [r3, #8]!
   17cb8:	ldr	r2, [r3, #4]
   17cbc:	ldr	lr, [r0, #8]!
   17cc0:	ldr	ip, [r0, #4]
   17cc4:	eor	r1, r1, lr
   17cc8:	eor	r2, r2, ip
   17ccc:	ldr	lr, [r0, #64]	; 0x40
   17cd0:	ldr	ip, [r0, #68]	; 0x44
   17cd4:	eor	r1, r1, lr
   17cd8:	eor	r2, r2, ip
   17cdc:	str	r1, [r3]
   17ce0:	str	r2, [r3, #4]
   17ce4:	cmp	r3, r4
   17ce8:	bne	17cb4 <__assert_fail@plt+0x6b28>
   17cec:	add	sp, sp, #412	; 0x19c
   17cf0:	ldrd	r4, [sp]
   17cf4:	ldrd	r6, [sp, #8]
   17cf8:	ldrd	r8, [sp, #16]
   17cfc:	ldrd	sl, [sp, #24]
   17d00:	add	sp, sp, #32
   17d04:	pop	{pc}		; (ldr pc, [sp], #4)
   17d08:	strd	r4, [sp, #-16]!
   17d0c:	str	r6, [sp, #8]
   17d10:	str	lr, [sp, #12]
   17d14:	sub	sp, sp, #8
   17d18:	mov	r4, r0
   17d1c:	mov	r5, r1
   17d20:	mov	r2, #240	; 0xf0
   17d24:	mov	r1, #0
   17d28:	bl	110b4 <memset@plt>
   17d2c:	ldr	ip, [pc, #112]	; 17da4 <__assert_fail@plt+0x6c18>
   17d30:	sub	r3, r4, #8
   17d34:	add	r6, r4, #56	; 0x38
   17d38:	mov	r2, r3
   17d3c:	ldrd	r0, [ip, #8]!
   17d40:	strd	r0, [r2, #8]!
   17d44:	cmp	r2, r6
   17d48:	bne	17d3c <__assert_fail@plt+0x6bb0>
   17d4c:	mov	r2, r5
   17d50:	ldr	lr, [r2]
   17d54:	ldr	ip, [r2, #4]
   17d58:	str	lr, [sp]
   17d5c:	str	ip, [sp, #4]
   17d60:	ldr	r0, [r3, #8]!
   17d64:	ldr	r1, [r3, #4]
   17d68:	eor	r0, r0, lr
   17d6c:	eor	r1, r1, ip
   17d70:	str	r0, [r3]
   17d74:	str	r1, [r3, #4]
   17d78:	add	r2, r2, #8
   17d7c:	cmp	r3, r6
   17d80:	bne	17d50 <__assert_fail@plt+0x6bc4>
   17d84:	ldrb	r3, [r5]
   17d88:	str	r3, [r4, #228]	; 0xe4
   17d8c:	mov	r0, #0
   17d90:	add	sp, sp, #8
   17d94:	ldrd	r4, [sp]
   17d98:	ldr	r6, [sp, #8]
   17d9c:	add	sp, sp, #12
   17da0:	pop	{pc}		; (ldr pc, [sp], #4)
   17da4:	andeq	sp, r1, r8, asr #10
   17da8:	sub	r3, r1, #1
   17dac:	cmp	r3, #63	; 0x3f
   17db0:	bhi	17e20 <__assert_fail@plt+0x6c94>
   17db4:	push	{lr}		; (str lr, [sp, #-4]!)
   17db8:	sub	sp, sp, #68	; 0x44
   17dbc:	strb	r1, [sp]
   17dc0:	mov	r3, #0
   17dc4:	strb	r3, [sp, #1]
   17dc8:	mov	r2, #1
   17dcc:	strb	r2, [sp, #2]
   17dd0:	strb	r2, [sp, #3]
   17dd4:	str	r3, [sp, #4]
   17dd8:	str	r3, [sp, #8]
   17ddc:	str	r3, [sp, #12]
   17de0:	strb	r3, [sp, #16]
   17de4:	strb	r3, [sp, #17]
   17de8:	str	r3, [sp, #18]
   17dec:	str	r3, [sp, #22]
   17df0:	str	r3, [sp, #26]
   17df4:	strh	r3, [sp, #30]
   17df8:	mov	r2, #0
   17dfc:	mov	r3, #0
   17e00:	strd	r2, [sp, #32]
   17e04:	strd	r2, [sp, #40]	; 0x28
   17e08:	strd	r2, [sp, #48]	; 0x30
   17e0c:	strd	r2, [sp, #56]	; 0x38
   17e10:	mov	r1, sp
   17e14:	bl	17d08 <__assert_fail@plt+0x6b7c>
   17e18:	add	sp, sp, #68	; 0x44
   17e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e20:	mvn	r0, #0
   17e24:	bx	lr
   17e28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e2c:	strd	r6, [sp, #8]
   17e30:	strd	r8, [sp, #16]
   17e34:	strd	sl, [sp, #24]
   17e38:	str	lr, [sp, #32]
   17e3c:	sub	sp, sp, #12
   17e40:	subs	r8, r2, #0
   17e44:	beq	17e84 <__assert_fail@plt+0x6cf8>
   17e48:	mov	r4, r0
   17e4c:	mov	r9, r1
   17e50:	ldr	sl, [r0, #224]	; 0xe0
   17e54:	rsb	r5, sl, #128	; 0x80
   17e58:	cmp	r8, r5
   17e5c:	bhi	17ea4 <__assert_fail@plt+0x6d18>
   17e60:	add	r0, r4, #96	; 0x60
   17e64:	ldr	r3, [r4, #224]	; 0xe0
   17e68:	mov	r2, r8
   17e6c:	mov	r1, r9
   17e70:	add	r0, r0, r3
   17e74:	bl	10f34 <memcpy@plt>
   17e78:	ldr	r3, [r4, #224]	; 0xe0
   17e7c:	add	r8, r3, r8
   17e80:	str	r8, [r4, #224]	; 0xe0
   17e84:	mov	r0, #0
   17e88:	add	sp, sp, #12
   17e8c:	ldrd	r4, [sp]
   17e90:	ldrd	r6, [sp, #8]
   17e94:	ldrd	r8, [sp, #16]
   17e98:	ldrd	sl, [sp, #24]
   17e9c:	add	sp, sp, #32
   17ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ea4:	mov	r3, #0
   17ea8:	str	r3, [r0, #224]	; 0xe0
   17eac:	add	fp, r0, #96	; 0x60
   17eb0:	mov	r2, r5
   17eb4:	add	r0, fp, sl
   17eb8:	bl	10f34 <memcpy@plt>
   17ebc:	ldr	r3, [r4, #64]	; 0x40
   17ec0:	ldr	r2, [r4, #68]	; 0x44
   17ec4:	adds	r3, r3, #128	; 0x80
   17ec8:	mov	r6, r3
   17ecc:	adc	r3, r2, #0
   17ed0:	mov	r2, r6
   17ed4:	strd	r2, [r4, #64]	; 0x40
   17ed8:	cmp	r3, #0
   17edc:	cmpeq	r6, #127	; 0x7f
   17ee0:	movls	r1, #1
   17ee4:	movhi	r1, #0
   17ee8:	ldrd	r2, [r4, #72]	; 0x48
   17eec:	adds	r6, r2, r1
   17ef0:	adc	r7, r3, #0
   17ef4:	mov	r2, r6
   17ef8:	mov	r3, r7
   17efc:	strd	r2, [r4, #72]	; 0x48
   17f00:	mov	r1, fp
   17f04:	mov	r0, r4
   17f08:	bl	131f0 <__assert_fail@plt+0x2064>
   17f0c:	add	r5, r9, r5
   17f10:	sub	sl, sl, #128	; 0x80
   17f14:	add	r8, r8, sl
   17f18:	cmp	r8, #128	; 0x80
   17f1c:	bls	17f98 <__assert_fail@plt+0x6e0c>
   17f20:	sub	sl, r8, #129	; 0x81
   17f24:	lsr	sl, sl, #7
   17f28:	add	r9, sl, #1
   17f2c:	add	r9, r5, r9, lsl #7
   17f30:	str	sl, [sp]
   17f34:	ldr	r3, [r4, #64]	; 0x40
   17f38:	ldr	r2, [r4, #68]	; 0x44
   17f3c:	adds	r6, r3, #128	; 0x80
   17f40:	adc	r7, r2, #0
   17f44:	strd	r6, [r4, #64]	; 0x40
   17f48:	cmp	r7, #0
   17f4c:	cmpeq	r6, #127	; 0x7f
   17f50:	movls	r1, #1
   17f54:	movhi	r1, #0
   17f58:	ldrd	r2, [r4, #72]	; 0x48
   17f5c:	adds	sl, r2, r1
   17f60:	adc	fp, r3, #0
   17f64:	mov	r2, sl
   17f68:	mov	r3, fp
   17f6c:	strd	r2, [r4, #72]	; 0x48
   17f70:	mov	r1, r5
   17f74:	mov	r0, r4
   17f78:	bl	131f0 <__assert_fail@plt+0x2064>
   17f7c:	add	r5, r5, #128	; 0x80
   17f80:	cmp	r5, r9
   17f84:	bne	17f34 <__assert_fail@plt+0x6da8>
   17f88:	ldr	sl, [sp]
   17f8c:	sub	r8, r8, #128	; 0x80
   17f90:	sub	r8, r8, sl, lsl #7
   17f94:	b	17e60 <__assert_fail@plt+0x6cd4>
   17f98:	mov	r9, r5
   17f9c:	b	17e60 <__assert_fail@plt+0x6cd4>
   17fa0:	sub	ip, r1, #1
   17fa4:	cmp	ip, #63	; 0x3f
   17fa8:	bhi	180b4 <__assert_fail@plt+0x6f28>
   17fac:	strd	r4, [sp, #-20]!	; 0xffffffec
   17fb0:	strd	r6, [sp, #8]
   17fb4:	str	lr, [sp, #16]
   17fb8:	sub	sp, sp, #196	; 0xc4
   17fbc:	sub	lr, r3, #1
   17fc0:	clz	ip, r2
   17fc4:	lsr	ip, ip, #5
   17fc8:	cmp	lr, #63	; 0x3f
   17fcc:	orrhi	ip, ip, #1
   17fd0:	cmp	ip, #0
   17fd4:	bne	180bc <__assert_fail@plt+0x6f30>
   17fd8:	mov	r4, r3
   17fdc:	mov	r5, r2
   17fe0:	mov	r6, r0
   17fe4:	strb	r1, [sp, #128]	; 0x80
   17fe8:	strb	r3, [sp, #129]	; 0x81
   17fec:	mov	r3, #1
   17ff0:	strb	r3, [sp, #130]	; 0x82
   17ff4:	strb	r3, [sp, #131]	; 0x83
   17ff8:	mov	r1, #0
   17ffc:	str	r1, [sp, #132]	; 0x84
   18000:	str	r1, [sp, #136]	; 0x88
   18004:	str	r1, [sp, #140]	; 0x8c
   18008:	strb	r1, [sp, #144]	; 0x90
   1800c:	strb	r1, [sp, #145]	; 0x91
   18010:	str	r1, [sp, #146]	; 0x92
   18014:	str	r1, [sp, #150]	; 0x96
   18018:	str	r1, [sp, #154]	; 0x9a
   1801c:	strh	r1, [sp, #158]	; 0x9e
   18020:	mov	r2, #0
   18024:	mov	r3, #0
   18028:	strd	r2, [sp, #160]	; 0xa0
   1802c:	strd	r2, [sp, #168]	; 0xa8
   18030:	strd	r2, [sp, #176]	; 0xb0
   18034:	strd	r2, [sp, #184]	; 0xb8
   18038:	add	r1, sp, #128	; 0x80
   1803c:	bl	17d08 <__assert_fail@plt+0x6b7c>
   18040:	cmp	r0, #0
   18044:	blt	180c4 <__assert_fail@plt+0x6f38>
   18048:	mov	r7, #128	; 0x80
   1804c:	mov	r2, r7
   18050:	mov	r1, #0
   18054:	mov	r0, sp
   18058:	bl	110b4 <memset@plt>
   1805c:	mov	r3, r7
   18060:	mov	r2, r4
   18064:	mov	r1, r5
   18068:	mov	r0, sp
   1806c:	bl	10fac <__memcpy_chk@plt>
   18070:	mov	r2, r7
   18074:	mov	r1, sp
   18078:	mov	r0, r6
   1807c:	bl	17e28 <__assert_fail@plt+0x6c9c>
   18080:	movw	r3, #57624	; 0xe118
   18084:	movt	r3, #2
   18088:	ldr	r3, [r3]
   1808c:	mov	r2, r7
   18090:	mov	r1, #0
   18094:	mov	r0, sp
   18098:	blx	r3
   1809c:	mov	r0, #0
   180a0:	add	sp, sp, #196	; 0xc4
   180a4:	ldrd	r4, [sp]
   180a8:	ldrd	r6, [sp, #8]
   180ac:	add	sp, sp, #16
   180b0:	pop	{pc}		; (ldr pc, [sp], #4)
   180b4:	mvn	r0, #0
   180b8:	bx	lr
   180bc:	mvn	r0, #0
   180c0:	b	180a0 <__assert_fail@plt+0x6f14>
   180c4:	mvn	r0, #0
   180c8:	b	180a0 <__assert_fail@plt+0x6f14>
   180cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   180d0:	strd	r6, [sp, #8]
   180d4:	str	r8, [sp, #16]
   180d8:	str	lr, [sp, #20]
   180dc:	sub	sp, sp, #72	; 0x48
   180e0:	mov	r4, r0
   180e4:	mov	r5, r1
   180e8:	mov	r8, r2
   180ec:	mov	r2, #64	; 0x40
   180f0:	mov	r1, #0
   180f4:	add	r0, sp, #8
   180f8:	bl	110b4 <memset@plt>
   180fc:	cmp	r5, #0
   18100:	beq	18214 <__assert_fail@plt+0x7088>
   18104:	ldr	r3, [r4, #228]	; 0xe4
   18108:	cmp	r3, r8
   1810c:	bhi	1821c <__assert_fail@plt+0x7090>
   18110:	ldrd	r2, [r4, #80]	; 0x50
   18114:	orrs	r3, r2, r3
   18118:	bne	18224 <__assert_fail@plt+0x7098>
   1811c:	ldr	r0, [r4, #224]	; 0xe0
   18120:	mov	r3, #0
   18124:	ldr	r1, [r4, #64]	; 0x40
   18128:	ldr	ip, [r4, #68]	; 0x44
   1812c:	adds	r6, r0, r1
   18130:	adc	r7, r3, ip
   18134:	strd	r6, [r4, #64]	; 0x40
   18138:	cmp	r3, r7
   1813c:	cmpeq	r0, r6
   18140:	movhi	r1, #1
   18144:	movls	r1, #0
   18148:	ldrd	r2, [r4, #72]	; 0x48
   1814c:	adds	r6, r2, r1
   18150:	adc	r7, r3, #0
   18154:	strd	r6, [r4, #72]	; 0x48
   18158:	ldrb	r3, [r4, #232]	; 0xe8
   1815c:	cmp	r3, #0
   18160:	bne	18204 <__assert_fail@plt+0x7078>
   18164:	mvn	r2, #0
   18168:	mvn	r3, #0
   1816c:	strd	r2, [r4, #80]	; 0x50
   18170:	add	r6, r4, #96	; 0x60
   18174:	rsb	r2, r0, #128	; 0x80
   18178:	mov	r1, #0
   1817c:	add	r0, r6, r0
   18180:	bl	110b4 <memset@plt>
   18184:	mov	r1, r6
   18188:	mov	r0, r4
   1818c:	bl	131f0 <__assert_fail@plt+0x2064>
   18190:	sub	r2, r4, #8
   18194:	add	r3, sp, #8
   18198:	add	ip, r4, #56	; 0x38
   1819c:	ldrd	r0, [r2, #8]!
   181a0:	strd	r0, [sp]
   181a4:	str	r0, [r3]
   181a8:	ldr	r1, [sp, #4]
   181ac:	str	r1, [r3, #4]
   181b0:	add	r3, r3, #8
   181b4:	cmp	r2, ip
   181b8:	bne	1819c <__assert_fail@plt+0x7010>
   181bc:	ldr	r2, [r4, #228]	; 0xe4
   181c0:	add	r1, sp, #8
   181c4:	mov	r0, r5
   181c8:	bl	10f34 <memcpy@plt>
   181cc:	movw	r3, #57624	; 0xe118
   181d0:	movt	r3, #2
   181d4:	ldr	r3, [r3]
   181d8:	mov	r2, #64	; 0x40
   181dc:	mov	r1, #0
   181e0:	add	r0, sp, #8
   181e4:	blx	r3
   181e8:	mov	r0, #0
   181ec:	add	sp, sp, #72	; 0x48
   181f0:	ldrd	r4, [sp]
   181f4:	ldrd	r6, [sp, #8]
   181f8:	ldr	r8, [sp, #16]
   181fc:	add	sp, sp, #20
   18200:	pop	{pc}		; (ldr pc, [sp], #4)
   18204:	mvn	r2, #0
   18208:	mvn	r3, #0
   1820c:	strd	r2, [r4, #88]	; 0x58
   18210:	b	18164 <__assert_fail@plt+0x6fd8>
   18214:	mvn	r0, #0
   18218:	b	181ec <__assert_fail@plt+0x7060>
   1821c:	mvn	r0, #0
   18220:	b	181ec <__assert_fail@plt+0x7060>
   18224:	mvn	r0, #0
   18228:	b	181ec <__assert_fail@plt+0x7060>
   1822c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18230:	strd	r6, [sp, #8]
   18234:	str	r8, [sp, #16]
   18238:	str	lr, [sp, #20]
   1823c:	sub	sp, sp, #240	; 0xf0
   18240:	ldr	r6, [sp, #264]	; 0x108
   18244:	ldr	ip, [sp, #268]	; 0x10c
   18248:	mov	r8, r3
   1824c:	adds	r3, r3, #0
   18250:	movne	r3, #1
   18254:	cmp	r2, #0
   18258:	movne	r3, #0
   1825c:	cmp	r0, #0
   18260:	moveq	r3, #1
   18264:	cmp	r3, #0
   18268:	bne	18314 <__assert_fail@plt+0x7188>
   1826c:	mov	r7, r2
   18270:	mov	r5, r0
   18274:	adds	r3, ip, #0
   18278:	movne	r3, #1
   1827c:	cmp	r6, #0
   18280:	movne	r3, #0
   18284:	cmp	r3, #0
   18288:	bne	1831c <__assert_fail@plt+0x7190>
   1828c:	sub	r3, r1, #1
   18290:	cmp	ip, #64	; 0x40
   18294:	cmpls	r3, #63	; 0x3f
   18298:	bhi	18324 <__assert_fail@plt+0x7198>
   1829c:	mov	r4, r1
   182a0:	cmp	ip, #0
   182a4:	beq	182fc <__assert_fail@plt+0x7170>
   182a8:	mov	r3, ip
   182ac:	mov	r2, r6
   182b0:	mov	r0, sp
   182b4:	bl	17fa0 <__assert_fail@plt+0x6e14>
   182b8:	cmp	r0, #0
   182bc:	blt	1832c <__assert_fail@plt+0x71a0>
   182c0:	mov	r2, r8
   182c4:	mov	r1, r7
   182c8:	mov	r0, sp
   182cc:	bl	17e28 <__assert_fail@plt+0x6c9c>
   182d0:	mov	r2, r4
   182d4:	mov	r1, r5
   182d8:	mov	r0, sp
   182dc:	bl	180cc <__assert_fail@plt+0x6f40>
   182e0:	mov	r0, #0
   182e4:	add	sp, sp, #240	; 0xf0
   182e8:	ldrd	r4, [sp]
   182ec:	ldrd	r6, [sp, #8]
   182f0:	ldr	r8, [sp, #16]
   182f4:	add	sp, sp, #20
   182f8:	pop	{pc}		; (ldr pc, [sp], #4)
   182fc:	mov	r0, sp
   18300:	bl	17da8 <__assert_fail@plt+0x6c1c>
   18304:	cmp	r0, #0
   18308:	bge	182c0 <__assert_fail@plt+0x7134>
   1830c:	mvn	r0, #0
   18310:	b	182e4 <__assert_fail@plt+0x7158>
   18314:	mvn	r0, #0
   18318:	b	182e4 <__assert_fail@plt+0x7158>
   1831c:	mvn	r0, #0
   18320:	b	182e4 <__assert_fail@plt+0x7158>
   18324:	mvn	r0, #0
   18328:	b	182e4 <__assert_fail@plt+0x7158>
   1832c:	mvn	r0, #0
   18330:	b	182e4 <__assert_fail@plt+0x7158>
   18334:	push	{lr}		; (str lr, [sp, #-4]!)
   18338:	sub	sp, sp, #12
   1833c:	ldr	ip, [sp, #20]
   18340:	str	ip, [sp, #4]
   18344:	ldr	ip, [sp, #16]
   18348:	str	ip, [sp]
   1834c:	bl	1822c <__assert_fail@plt+0x70a0>
   18350:	add	sp, sp, #12
   18354:	pop	{pc}		; (ldr pc, [sp], #4)
   18358:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1835c:	strd	r6, [sp, #8]
   18360:	strd	r8, [sp, #16]
   18364:	str	sl, [sp, #24]
   18368:	str	lr, [sp, #28]
   1836c:	sub	sp, sp, #240	; 0xf0
   18370:	mov	r5, r0
   18374:	mov	r9, r1
   18378:	mov	r8, r2
   1837c:	mov	r0, #32768	; 0x8000
   18380:	bl	1bf1c <__assert_fail@plt+0xad90>
   18384:	subs	r6, r0, #0
   18388:	beq	18460 <__assert_fail@plt+0x72d4>
   1838c:	mov	r1, r8
   18390:	mov	r0, sp
   18394:	bl	17da8 <__assert_fail@plt+0x6c1c>
   18398:	mov	r7, #1
   1839c:	mov	sl, #32768	; 0x8000
   183a0:	mov	r4, #0
   183a4:	mov	r3, r5
   183a8:	rsb	r2, r4, #32768	; 0x8000
   183ac:	mov	r1, r7
   183b0:	add	r0, r6, r4
   183b4:	bl	10fdc <fread@plt>
   183b8:	add	r4, r4, r0
   183bc:	cmp	r4, #32768	; 0x8000
   183c0:	beq	18438 <__assert_fail@plt+0x72ac>
   183c4:	cmp	r0, #0
   183c8:	beq	18420 <__assert_fail@plt+0x7294>
   183cc:	mov	r0, r5
   183d0:	bl	1106c <feof@plt>
   183d4:	cmp	r0, #0
   183d8:	beq	183a4 <__assert_fail@plt+0x7218>
   183dc:	cmp	r4, #0
   183e0:	bne	1844c <__assert_fail@plt+0x72c0>
   183e4:	mov	r2, r8
   183e8:	mov	r1, r9
   183ec:	mov	r0, sp
   183f0:	bl	180cc <__assert_fail@plt+0x6f40>
   183f4:	mov	r4, #0
   183f8:	mov	r0, r6
   183fc:	bl	187e4 <__assert_fail@plt+0x7658>
   18400:	mov	r0, r4
   18404:	add	sp, sp, #240	; 0xf0
   18408:	ldrd	r4, [sp]
   1840c:	ldrd	r6, [sp, #8]
   18410:	ldrd	r8, [sp, #16]
   18414:	ldr	sl, [sp, #24]
   18418:	add	sp, sp, #28
   1841c:	pop	{pc}		; (ldr pc, [sp], #4)
   18420:	mov	r0, r5
   18424:	bl	10f1c <ferror@plt>
   18428:	cmp	r0, #0
   1842c:	mvnne	r4, #0
   18430:	bne	183f8 <__assert_fail@plt+0x726c>
   18434:	b	183dc <__assert_fail@plt+0x7250>
   18438:	mov	r2, sl
   1843c:	mov	r1, r6
   18440:	mov	r0, sp
   18444:	bl	17e28 <__assert_fail@plt+0x6c9c>
   18448:	b	183a0 <__assert_fail@plt+0x7214>
   1844c:	mov	r2, r4
   18450:	mov	r1, r6
   18454:	mov	r0, sp
   18458:	bl	17e28 <__assert_fail@plt+0x6c9c>
   1845c:	b	183e4 <__assert_fail@plt+0x7258>
   18460:	mvn	r4, #0
   18464:	b	18400 <__assert_fail@plt+0x7274>
   18468:	movw	r3, #57772	; 0xe1ac
   1846c:	movt	r3, #2
   18470:	str	r0, [r3]
   18474:	bx	lr
   18478:	movw	r3, #57772	; 0xe1ac
   1847c:	movt	r3, #2
   18480:	strb	r0, [r3, #4]
   18484:	bx	lr
   18488:	strd	r4, [sp, #-16]!
   1848c:	str	r6, [sp, #8]
   18490:	str	lr, [sp, #12]
   18494:	sub	sp, sp, #8
   18498:	movw	r3, #57732	; 0xe184
   1849c:	movt	r3, #2
   184a0:	ldr	r0, [r3]
   184a4:	bl	1bfb4 <__assert_fail@plt+0xae28>
   184a8:	cmp	r0, #0
   184ac:	beq	184d4 <__assert_fail@plt+0x7348>
   184b0:	movw	r3, #57772	; 0xe1ac
   184b4:	movt	r3, #2
   184b8:	ldrb	r3, [r3, #4]
   184bc:	cmp	r3, #0
   184c0:	beq	18500 <__assert_fail@plt+0x7374>
   184c4:	bl	11090 <__errno_location@plt>
   184c8:	ldr	r3, [r0]
   184cc:	cmp	r3, #32
   184d0:	bne	18500 <__assert_fail@plt+0x7374>
   184d4:	movw	r3, #57720	; 0xe178
   184d8:	movt	r3, #2
   184dc:	ldr	r0, [r3]
   184e0:	bl	1bfb4 <__assert_fail@plt+0xae28>
   184e4:	cmp	r0, #0
   184e8:	bne	18588 <__assert_fail@plt+0x73fc>
   184ec:	add	sp, sp, #8
   184f0:	ldrd	r4, [sp]
   184f4:	ldr	r6, [sp, #8]
   184f8:	add	sp, sp, #12
   184fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18500:	mov	r2, #5
   18504:	movw	r1, #54688	; 0xd5a0
   18508:	movt	r1, #1
   1850c:	mov	r0, #0
   18510:	bl	10f7c <dcgettext@plt>
   18514:	mov	r4, r0
   18518:	movw	r3, #57772	; 0xe1ac
   1851c:	movt	r3, #2
   18520:	ldr	r5, [r3]
   18524:	cmp	r5, #0
   18528:	beq	18568 <__assert_fail@plt+0x73dc>
   1852c:	bl	11090 <__errno_location@plt>
   18530:	ldr	r6, [r0]
   18534:	mov	r0, r5
   18538:	bl	1a9fc <__assert_fail@plt+0x9870>
   1853c:	str	r4, [sp]
   18540:	mov	r3, r0
   18544:	movw	r2, #54700	; 0xd5ac
   18548:	movt	r2, #1
   1854c:	mov	r1, r6
   18550:	mov	r0, #0
   18554:	bl	11000 <error@plt>
   18558:	movw	r3, #57632	; 0xe120
   1855c:	movt	r3, #2
   18560:	ldr	r0, [r3]
   18564:	bl	10f28 <_exit@plt>
   18568:	bl	11090 <__errno_location@plt>
   1856c:	mov	r3, r4
   18570:	movw	r2, #53188	; 0xcfc4
   18574:	movt	r2, #1
   18578:	ldr	r1, [r0]
   1857c:	mov	r0, #0
   18580:	bl	11000 <error@plt>
   18584:	b	18558 <__assert_fail@plt+0x73cc>
   18588:	movw	r3, #57632	; 0xe120
   1858c:	movt	r3, #2
   18590:	ldr	r0, [r3]
   18594:	bl	10f28 <_exit@plt>
   18598:	strd	r4, [sp, #-12]!
   1859c:	str	lr, [sp, #8]
   185a0:	sub	sp, sp, #20
   185a4:	ldr	r1, [sp, #40]	; 0x28
   185a8:	str	r1, [sp, #8]
   185ac:	ldrd	r4, [sp, #32]
   185b0:	strd	r4, [sp]
   185b4:	bl	10ef8 <posix_fadvise64@plt>
   185b8:	add	sp, sp, #20
   185bc:	ldrd	r4, [sp]
   185c0:	add	sp, sp, #8
   185c4:	pop	{pc}		; (ldr pc, [sp], #4)
   185c8:	cmp	r0, #0
   185cc:	bxeq	lr
   185d0:	str	r4, [sp, #-8]!
   185d4:	str	lr, [sp, #4]
   185d8:	sub	sp, sp, #16
   185dc:	mov	r4, r1
   185e0:	bl	110cc <fileno@plt>
   185e4:	str	r4, [sp, #8]
   185e8:	mov	r2, #0
   185ec:	mov	r3, #0
   185f0:	strd	r2, [sp]
   185f4:	bl	10ef8 <posix_fadvise64@plt>
   185f8:	add	sp, sp, #16
   185fc:	ldr	r4, [sp]
   18600:	add	sp, sp, #4
   18604:	pop	{pc}		; (ldr pc, [sp], #4)
   18608:	strd	r4, [sp, #-16]!
   1860c:	str	r6, [sp, #8]
   18610:	str	lr, [sp, #12]
   18614:	sub	sp, sp, #8
   18618:	mov	r4, r0
   1861c:	bl	110cc <fileno@plt>
   18620:	cmp	r0, #0
   18624:	blt	1869c <__assert_fail@plt+0x7510>
   18628:	mov	r0, r4
   1862c:	bl	11024 <__freading@plt>
   18630:	cmp	r0, #0
   18634:	beq	18668 <__assert_fail@plt+0x74dc>
   18638:	mov	r0, r4
   1863c:	bl	110cc <fileno@plt>
   18640:	mov	r3, #1
   18644:	str	r3, [sp]
   18648:	mov	r2, #0
   1864c:	mov	r3, #0
   18650:	bl	10fc4 <lseek64@plt>
   18654:	mvn	r2, #0
   18658:	mvn	r3, #0
   1865c:	cmp	r1, r3
   18660:	cmpeq	r0, r2
   18664:	beq	186a8 <__assert_fail@plt+0x751c>
   18668:	mov	r0, r4
   1866c:	bl	186c4 <__assert_fail@plt+0x7538>
   18670:	cmp	r0, #0
   18674:	beq	186a8 <__assert_fail@plt+0x751c>
   18678:	bl	11090 <__errno_location@plt>
   1867c:	mov	r5, r0
   18680:	ldr	r6, [r0]
   18684:	mov	r0, r4
   18688:	bl	110e4 <fclose@plt>
   1868c:	cmp	r6, #0
   18690:	strne	r6, [r5]
   18694:	mvnne	r0, #0
   18698:	b	186b0 <__assert_fail@plt+0x7524>
   1869c:	mov	r0, r4
   186a0:	bl	110e4 <fclose@plt>
   186a4:	b	186b0 <__assert_fail@plt+0x7524>
   186a8:	mov	r0, r4
   186ac:	bl	110e4 <fclose@plt>
   186b0:	add	sp, sp, #8
   186b4:	ldrd	r4, [sp]
   186b8:	ldr	r6, [sp, #8]
   186bc:	add	sp, sp, #12
   186c0:	pop	{pc}		; (ldr pc, [sp], #4)
   186c4:	str	r4, [sp, #-8]!
   186c8:	str	lr, [sp, #4]
   186cc:	sub	sp, sp, #8
   186d0:	subs	r4, r0, #0
   186d4:	beq	186e8 <__assert_fail@plt+0x755c>
   186d8:	mov	r0, r4
   186dc:	bl	11024 <__freading@plt>
   186e0:	cmp	r0, #0
   186e4:	bne	18700 <__assert_fail@plt+0x7574>
   186e8:	mov	r0, r4
   186ec:	bl	10f04 <fflush@plt>
   186f0:	add	sp, sp, #8
   186f4:	ldr	r4, [sp]
   186f8:	add	sp, sp, #4
   186fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18700:	ldr	r3, [r4]
   18704:	tst	r3, #256	; 0x100
   18708:	bne	18718 <__assert_fail@plt+0x758c>
   1870c:	mov	r0, r4
   18710:	bl	10f04 <fflush@plt>
   18714:	b	186f0 <__assert_fail@plt+0x7564>
   18718:	mov	r3, #1
   1871c:	str	r3, [sp]
   18720:	mov	r2, #0
   18724:	mov	r3, #0
   18728:	mov	r0, r4
   1872c:	bl	18844 <__assert_fail@plt+0x76b8>
   18730:	b	1870c <__assert_fail@plt+0x7580>
   18734:	strd	r4, [sp, #-16]!
   18738:	str	r6, [sp, #8]
   1873c:	str	lr, [sp, #12]
   18740:	mov	r5, r1
   18744:	bl	11144 <fopen64@plt>
   18748:	subs	r4, r0, #0
   1874c:	beq	18760 <__assert_fail@plt+0x75d4>
   18750:	mov	r0, r4
   18754:	bl	110cc <fileno@plt>
   18758:	cmp	r0, #2
   1875c:	bls	18774 <__assert_fail@plt+0x75e8>
   18760:	mov	r0, r4
   18764:	ldrd	r4, [sp]
   18768:	ldr	r6, [sp, #8]
   1876c:	add	sp, sp, #12
   18770:	pop	{pc}		; (ldr pc, [sp], #4)
   18774:	bl	1ac20 <__assert_fail@plt+0x9a94>
   18778:	subs	r6, r0, #0
   1877c:	blt	187c4 <__assert_fail@plt+0x7638>
   18780:	mov	r0, r4
   18784:	bl	18608 <__assert_fail@plt+0x747c>
   18788:	cmp	r0, #0
   1878c:	bne	187a4 <__assert_fail@plt+0x7618>
   18790:	mov	r1, r5
   18794:	mov	r0, r6
   18798:	bl	10eb0 <fdopen@plt>
   1879c:	subs	r4, r0, #0
   187a0:	bne	18760 <__assert_fail@plt+0x75d4>
   187a4:	bl	11090 <__errno_location@plt>
   187a8:	mov	r4, r0
   187ac:	ldr	r5, [r0]
   187b0:	mov	r0, r6
   187b4:	bl	11174 <close@plt>
   187b8:	str	r5, [r4]
   187bc:	mov	r4, #0
   187c0:	b	18760 <__assert_fail@plt+0x75d4>
   187c4:	bl	11090 <__errno_location@plt>
   187c8:	mov	r5, r0
   187cc:	ldr	r6, [r0]
   187d0:	mov	r0, r4
   187d4:	bl	18608 <__assert_fail@plt+0x747c>
   187d8:	str	r6, [r5]
   187dc:	mov	r4, #0
   187e0:	b	18760 <__assert_fail@plt+0x75d4>
   187e4:	strd	r4, [sp, #-12]!
   187e8:	str	lr, [sp, #8]
   187ec:	sub	sp, sp, #12
   187f0:	mov	r5, r0
   187f4:	bl	11090 <__errno_location@plt>
   187f8:	mov	r4, r0
   187fc:	ldr	r3, [r0]
   18800:	str	r3, [sp]
   18804:	str	r3, [sp, #4]
   18808:	mov	r3, #0
   1880c:	str	r3, [r0]
   18810:	mov	r0, r5
   18814:	bl	10f10 <free@plt>
   18818:	ldr	r3, [r4]
   1881c:	clz	r3, r3
   18820:	lsr	r3, r3, #5
   18824:	add	r2, sp, #8
   18828:	add	r3, r2, r3, lsl #2
   1882c:	ldr	r3, [r3, #-8]
   18830:	str	r3, [r4]
   18834:	add	sp, sp, #12
   18838:	ldrd	r4, [sp]
   1883c:	add	sp, sp, #8
   18840:	pop	{pc}		; (ldr pc, [sp], #4)
   18844:	str	r4, [sp, #-16]!
   18848:	strd	r6, [sp, #4]
   1884c:	str	lr, [sp, #12]
   18850:	sub	sp, sp, #8
   18854:	mov	r4, r0
   18858:	mov	r6, r2
   1885c:	mov	r7, r3
   18860:	ldr	r2, [r0, #8]
   18864:	ldr	r3, [r0, #4]
   18868:	cmp	r2, r3
   1886c:	beq	1889c <__assert_fail@plt+0x7710>
   18870:	ldr	r3, [sp, #24]
   18874:	str	r3, [sp]
   18878:	mov	r2, r6
   1887c:	mov	r3, r7
   18880:	mov	r0, r4
   18884:	bl	110f0 <fseeko64@plt>
   18888:	add	sp, sp, #8
   1888c:	ldr	r4, [sp]
   18890:	ldrd	r6, [sp, #4]
   18894:	add	sp, sp, #12
   18898:	pop	{pc}		; (ldr pc, [sp], #4)
   1889c:	ldr	r2, [r0, #20]
   188a0:	ldr	r3, [r0, #16]
   188a4:	cmp	r2, r3
   188a8:	bne	18870 <__assert_fail@plt+0x76e4>
   188ac:	ldr	r3, [r0, #36]	; 0x24
   188b0:	cmp	r3, #0
   188b4:	bne	18870 <__assert_fail@plt+0x76e4>
   188b8:	bl	110cc <fileno@plt>
   188bc:	ldr	r3, [sp, #24]
   188c0:	str	r3, [sp]
   188c4:	mov	r2, r6
   188c8:	mov	r3, r7
   188cc:	bl	10fc4 <lseek64@plt>
   188d0:	mvn	r2, #0
   188d4:	mvn	r3, #0
   188d8:	cmp	r1, r3
   188dc:	cmpeq	r0, r2
   188e0:	beq	188fc <__assert_fail@plt+0x7770>
   188e4:	ldr	r3, [r4]
   188e8:	bic	r3, r3, #16
   188ec:	str	r3, [r4]
   188f0:	strd	r0, [r4, #80]	; 0x50
   188f4:	mov	r0, #0
   188f8:	b	18888 <__assert_fail@plt+0x76fc>
   188fc:	mvn	r0, #0
   18900:	b	18888 <__assert_fail@plt+0x76fc>
   18904:	strd	r4, [sp, #-16]!
   18908:	str	r6, [sp, #8]
   1890c:	str	lr, [sp, #12]
   18910:	subs	r4, r0, #0
   18914:	beq	189b0 <__assert_fail@plt+0x7824>
   18918:	mov	r1, #47	; 0x2f
   1891c:	mov	r0, r4
   18920:	bl	11120 <strrchr@plt>
   18924:	subs	r5, r0, #0
   18928:	beq	18988 <__assert_fail@plt+0x77fc>
   1892c:	add	r6, r5, #1
   18930:	sub	r3, r6, r4
   18934:	cmp	r3, #6
   18938:	ble	18988 <__assert_fail@plt+0x77fc>
   1893c:	mov	r2, #7
   18940:	movw	r1, #54764	; 0xd5ec
   18944:	movt	r1, #1
   18948:	sub	r0, r5, #6
   1894c:	bl	1115c <strncmp@plt>
   18950:	cmp	r0, #0
   18954:	bne	18988 <__assert_fail@plt+0x77fc>
   18958:	mov	r2, #3
   1895c:	movw	r1, #54772	; 0xd5f4
   18960:	movt	r1, #1
   18964:	mov	r0, r6
   18968:	bl	1115c <strncmp@plt>
   1896c:	cmp	r0, #0
   18970:	movne	r4, r6
   18974:	bne	18988 <__assert_fail@plt+0x77fc>
   18978:	add	r4, r5, #4
   1897c:	movw	r3, #57704	; 0xe168
   18980:	movt	r3, #2
   18984:	str	r4, [r3]
   18988:	movw	r3, #57780	; 0xe1b4
   1898c:	movt	r3, #2
   18990:	str	r4, [r3]
   18994:	movw	r3, #57708	; 0xe16c
   18998:	movt	r3, #2
   1899c:	str	r4, [r3]
   189a0:	ldrd	r4, [sp]
   189a4:	ldr	r6, [sp, #8]
   189a8:	add	sp, sp, #12
   189ac:	pop	{pc}		; (ldr pc, [sp], #4)
   189b0:	movw	r3, #57720	; 0xe178
   189b4:	movt	r3, #2
   189b8:	ldr	r3, [r3]
   189bc:	mov	r2, #55	; 0x37
   189c0:	mov	r1, #1
   189c4:	movw	r0, #54708	; 0xd5b4
   189c8:	movt	r0, #1
   189cc:	bl	10fb8 <fwrite@plt>
   189d0:	bl	11168 <abort@plt>
   189d4:	mov	r2, #0
   189d8:	mov	r3, #0
   189dc:	strd	r2, [r0]
   189e0:	strd	r2, [r0, #8]
   189e4:	strd	r2, [r0, #16]
   189e8:	strd	r2, [r0, #24]
   189ec:	strd	r2, [r0, #32]
   189f0:	strd	r2, [r0, #40]	; 0x28
   189f4:	cmp	r1, #10
   189f8:	beq	18a04 <__assert_fail@plt+0x7878>
   189fc:	str	r1, [r0]
   18a00:	bx	lr
   18a04:	str	r4, [sp, #-8]!
   18a08:	str	lr, [sp, #4]
   18a0c:	bl	11168 <abort@plt>
   18a10:	strd	r4, [sp, #-16]!
   18a14:	str	r6, [sp, #8]
   18a18:	str	lr, [sp, #12]
   18a1c:	mov	r5, r0
   18a20:	mov	r6, r1
   18a24:	mov	r2, #5
   18a28:	mov	r1, r0
   18a2c:	mov	r0, #0
   18a30:	bl	10f7c <dcgettext@plt>
   18a34:	mov	r4, r0
   18a38:	cmp	r5, r0
   18a3c:	beq	18a54 <__assert_fail@plt+0x78c8>
   18a40:	mov	r0, r4
   18a44:	ldrd	r4, [sp]
   18a48:	ldr	r6, [sp, #8]
   18a4c:	add	sp, sp, #12
   18a50:	pop	{pc}		; (ldr pc, [sp], #4)
   18a54:	bl	1c2ac <__assert_fail@plt+0xb120>
   18a58:	ldrb	r3, [r0]
   18a5c:	bic	r3, r3, #32
   18a60:	cmp	r3, #85	; 0x55
   18a64:	bne	18ae8 <__assert_fail@plt+0x795c>
   18a68:	ldrb	r3, [r0, #1]
   18a6c:	bic	r3, r3, #32
   18a70:	cmp	r3, #84	; 0x54
   18a74:	bne	18aac <__assert_fail@plt+0x7920>
   18a78:	ldrb	r3, [r0, #2]
   18a7c:	bic	r3, r3, #32
   18a80:	cmp	r3, #70	; 0x46
   18a84:	bne	18aac <__assert_fail@plt+0x7920>
   18a88:	ldrb	r3, [r0, #3]
   18a8c:	cmp	r3, #45	; 0x2d
   18a90:	bne	18aac <__assert_fail@plt+0x7920>
   18a94:	ldrb	r3, [r0, #4]
   18a98:	cmp	r3, #56	; 0x38
   18a9c:	bne	18aac <__assert_fail@plt+0x7920>
   18aa0:	ldrb	r3, [r0, #5]
   18aa4:	cmp	r3, #0
   18aa8:	beq	18ac8 <__assert_fail@plt+0x793c>
   18aac:	movw	r4, #54860	; 0xd64c
   18ab0:	movt	r4, #1
   18ab4:	movw	r3, #54880	; 0xd660
   18ab8:	movt	r3, #1
   18abc:	cmp	r6, #9
   18ac0:	movne	r4, r3
   18ac4:	b	18a40 <__assert_fail@plt+0x78b4>
   18ac8:	ldrb	r2, [r4]
   18acc:	movw	r4, #54876	; 0xd65c
   18ad0:	movt	r4, #1
   18ad4:	movw	r3, #54864	; 0xd650
   18ad8:	movt	r3, #1
   18adc:	cmp	r2, #96	; 0x60
   18ae0:	movne	r4, r3
   18ae4:	b	18a40 <__assert_fail@plt+0x78b4>
   18ae8:	cmp	r3, #71	; 0x47
   18aec:	bne	18aac <__assert_fail@plt+0x7920>
   18af0:	ldrb	r3, [r0, #1]
   18af4:	bic	r3, r3, #32
   18af8:	cmp	r3, #66	; 0x42
   18afc:	bne	18aac <__assert_fail@plt+0x7920>
   18b00:	ldrb	r3, [r0, #2]
   18b04:	cmp	r3, #49	; 0x31
   18b08:	bne	18aac <__assert_fail@plt+0x7920>
   18b0c:	ldrb	r3, [r0, #3]
   18b10:	cmp	r3, #56	; 0x38
   18b14:	bne	18aac <__assert_fail@plt+0x7920>
   18b18:	ldrb	r3, [r0, #4]
   18b1c:	cmp	r3, #48	; 0x30
   18b20:	bne	18aac <__assert_fail@plt+0x7920>
   18b24:	ldrb	r3, [r0, #5]
   18b28:	cmp	r3, #51	; 0x33
   18b2c:	bne	18aac <__assert_fail@plt+0x7920>
   18b30:	ldrb	r3, [r0, #6]
   18b34:	cmp	r3, #48	; 0x30
   18b38:	bne	18aac <__assert_fail@plt+0x7920>
   18b3c:	ldrb	r3, [r0, #7]
   18b40:	cmp	r3, #0
   18b44:	bne	18aac <__assert_fail@plt+0x7920>
   18b48:	ldrb	r2, [r4]
   18b4c:	movw	r4, #54872	; 0xd658
   18b50:	movt	r4, #1
   18b54:	movw	r3, #54868	; 0xd654
   18b58:	movt	r3, #1
   18b5c:	cmp	r2, #96	; 0x60
   18b60:	movne	r4, r3
   18b64:	b	18a40 <__assert_fail@plt+0x78b4>
   18b68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18b6c:	strd	r6, [sp, #8]
   18b70:	strd	r8, [sp, #16]
   18b74:	strd	sl, [sp, #24]
   18b78:	str	lr, [sp, #32]
   18b7c:	sub	sp, sp, #116	; 0x74
   18b80:	str	r0, [sp, #64]	; 0x40
   18b84:	mov	r8, r1
   18b88:	str	r2, [sp, #48]	; 0x30
   18b8c:	str	r3, [sp, #24]
   18b90:	ldr	r7, [sp, #152]	; 0x98
   18b94:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   18b98:	str	r0, [sp, #76]	; 0x4c
   18b9c:	ldr	r3, [sp, #156]	; 0x9c
   18ba0:	ubfx	r3, r3, #1, #1
   18ba4:	str	r3, [sp, #32]
   18ba8:	mov	r3, #1
   18bac:	str	r3, [sp, #40]	; 0x28
   18bb0:	mov	r3, #0
   18bb4:	str	r3, [sp, #68]	; 0x44
   18bb8:	str	r3, [sp, #36]	; 0x24
   18bbc:	str	r3, [sp, #28]
   18bc0:	str	r3, [sp, #52]	; 0x34
   18bc4:	str	r3, [sp, #60]	; 0x3c
   18bc8:	str	r3, [sp, #72]	; 0x48
   18bcc:	movw	r3, #54884	; 0xd664
   18bd0:	movt	r3, #1
   18bd4:	str	r3, [sp, #80]	; 0x50
   18bd8:	mov	r9, r8
   18bdc:	mov	sl, r7
   18be0:	cmp	sl, #10
   18be4:	ldrls	pc, [pc, sl, lsl #2]
   18be8:	b	18dac <__assert_fail@plt+0x7c20>
   18bec:	andeq	r8, r1, ip, asr #24
   18bf0:	andeq	r8, r1, r0, lsr #24
   18bf4:	andeq	r8, r1, r4, lsl #27
   18bf8:	andeq	r8, r1, r8, lsl ip
   18bfc:	andeq	r8, r1, r8, lsr sp
   18c00:	andeq	r8, r1, ip, asr ip
   18c04:	andeq	sl, r1, r8, lsr #32
   18c08:			; <UNDEFINED> instruction: 0x00018db0
   18c0c:	muleq	r1, r8, ip
   18c10:	muleq	r1, r8, ip
   18c14:	muleq	r1, r8, ip
   18c18:	mov	r3, #1
   18c1c:	str	r3, [sp, #28]
   18c20:	mov	r3, #1
   18c24:	str	r3, [sp, #32]
   18c28:	str	r3, [sp, #52]	; 0x34
   18c2c:	movw	r3, #54880	; 0xd660
   18c30:	movt	r3, #1
   18c34:	str	r3, [sp, #60]	; 0x3c
   18c38:	mov	fp, #0
   18c3c:	mov	sl, #2
   18c40:	mov	r6, #0
   18c44:	ldr	r8, [sp, #64]	; 0x40
   18c48:	b	194c0 <__assert_fail@plt+0x8334>
   18c4c:	mov	fp, sl
   18c50:	mov	r3, #0
   18c54:	str	r3, [sp, #32]
   18c58:	b	18c40 <__assert_fail@plt+0x7ab4>
   18c5c:	ldr	r3, [sp, #32]
   18c60:	cmp	r3, #0
   18c64:	bne	18dc4 <__assert_fail@plt+0x7c38>
   18c68:	cmp	r9, #0
   18c6c:	beq	18de8 <__assert_fail@plt+0x7c5c>
   18c70:	mov	r3, #34	; 0x22
   18c74:	ldr	r2, [sp, #64]	; 0x40
   18c78:	strb	r3, [r2]
   18c7c:	mov	fp, #1
   18c80:	str	fp, [sp, #28]
   18c84:	str	fp, [sp, #52]	; 0x34
   18c88:	movw	r3, #54860	; 0xd64c
   18c8c:	movt	r3, #1
   18c90:	str	r3, [sp, #60]	; 0x3c
   18c94:	b	18c40 <__assert_fail@plt+0x7ab4>
   18c98:	cmp	sl, #10
   18c9c:	bne	18cd0 <__assert_fail@plt+0x7b44>
   18ca0:	ldr	r3, [sp, #32]
   18ca4:	cmp	r3, #0
   18ca8:	movne	fp, #0
   18cac:	beq	18cf8 <__assert_fail@plt+0x7b6c>
   18cb0:	ldr	r0, [sp, #168]	; 0xa8
   18cb4:	bl	11078 <strlen@plt>
   18cb8:	str	r0, [sp, #52]	; 0x34
   18cbc:	ldr	r3, [sp, #168]	; 0xa8
   18cc0:	str	r3, [sp, #60]	; 0x3c
   18cc4:	mov	r3, #1
   18cc8:	str	r3, [sp, #28]
   18ccc:	b	18c40 <__assert_fail@plt+0x7ab4>
   18cd0:	mov	r1, sl
   18cd4:	ldr	r0, [sp, #80]	; 0x50
   18cd8:	bl	18a10 <__assert_fail@plt+0x7884>
   18cdc:	str	r0, [sp, #164]	; 0xa4
   18ce0:	mov	r1, sl
   18ce4:	movw	r0, #54880	; 0xd660
   18ce8:	movt	r0, #1
   18cec:	bl	18a10 <__assert_fail@plt+0x7884>
   18cf0:	str	r0, [sp, #168]	; 0xa8
   18cf4:	b	18ca0 <__assert_fail@plt+0x7b14>
   18cf8:	ldr	r3, [sp, #164]	; 0xa4
   18cfc:	ldrb	r3, [r3]
   18d00:	cmp	r3, #0
   18d04:	beq	18d30 <__assert_fail@plt+0x7ba4>
   18d08:	ldr	r2, [sp, #164]	; 0xa4
   18d0c:	mov	fp, #0
   18d10:	ldr	r1, [sp, #64]	; 0x40
   18d14:	cmp	r9, fp
   18d18:	strbhi	r3, [r1, fp]
   18d1c:	add	fp, fp, #1
   18d20:	ldrb	r3, [r2, #1]!
   18d24:	cmp	r3, #0
   18d28:	bne	18d14 <__assert_fail@plt+0x7b88>
   18d2c:	b	18cb0 <__assert_fail@plt+0x7b24>
   18d30:	mov	fp, #0
   18d34:	b	18cb0 <__assert_fail@plt+0x7b24>
   18d38:	ldr	r3, [sp, #32]
   18d3c:	cmp	r3, #0
   18d40:	bne	18c20 <__assert_fail@plt+0x7a94>
   18d44:	mov	r3, #1
   18d48:	str	r3, [sp, #28]
   18d4c:	cmp	r9, #0
   18d50:	beq	18e04 <__assert_fail@plt+0x7c78>
   18d54:	mov	r3, #39	; 0x27
   18d58:	ldr	r2, [sp, #64]	; 0x40
   18d5c:	strb	r3, [r2]
   18d60:	mov	r3, #0
   18d64:	str	r3, [sp, #32]
   18d68:	mov	fp, #1
   18d6c:	str	fp, [sp, #52]	; 0x34
   18d70:	movw	r3, #54880	; 0xd660
   18d74:	movt	r3, #1
   18d78:	str	r3, [sp, #60]	; 0x3c
   18d7c:	mov	sl, #2
   18d80:	b	18c40 <__assert_fail@plt+0x7ab4>
   18d84:	ldr	r3, [sp, #32]
   18d88:	cmp	r3, #0
   18d8c:	beq	18d4c <__assert_fail@plt+0x7bc0>
   18d90:	mov	r3, #1
   18d94:	str	r3, [sp, #52]	; 0x34
   18d98:	movw	r3, #54880	; 0xd660
   18d9c:	movt	r3, #1
   18da0:	str	r3, [sp, #60]	; 0x3c
   18da4:	mov	fp, #0
   18da8:	b	18c40 <__assert_fail@plt+0x7ab4>
   18dac:	bl	11168 <abort@plt>
   18db0:	mov	fp, #0
   18db4:	str	fp, [sp, #32]
   18db8:	mov	r3, #1
   18dbc:	str	r3, [sp, #28]
   18dc0:	b	18c40 <__assert_fail@plt+0x7ab4>
   18dc4:	ldr	r3, [sp, #32]
   18dc8:	str	r3, [sp, #28]
   18dcc:	mov	r3, #1
   18dd0:	str	r3, [sp, #52]	; 0x34
   18dd4:	movw	r3, #54860	; 0xd64c
   18dd8:	movt	r3, #1
   18ddc:	str	r3, [sp, #60]	; 0x3c
   18de0:	mov	fp, #0
   18de4:	b	18c40 <__assert_fail@plt+0x7ab4>
   18de8:	mov	fp, #1
   18dec:	str	fp, [sp, #28]
   18df0:	str	fp, [sp, #52]	; 0x34
   18df4:	movw	r3, #54860	; 0xd64c
   18df8:	movt	r3, #1
   18dfc:	str	r3, [sp, #60]	; 0x3c
   18e00:	b	18c40 <__assert_fail@plt+0x7ab4>
   18e04:	mov	r3, #0
   18e08:	str	r3, [sp, #32]
   18e0c:	mov	fp, #1
   18e10:	str	fp, [sp, #52]	; 0x34
   18e14:	movw	r3, #54880	; 0xd660
   18e18:	movt	r3, #1
   18e1c:	str	r3, [sp, #60]	; 0x3c
   18e20:	mov	sl, #2
   18e24:	b	18c40 <__assert_fail@plt+0x7ab4>
   18e28:	mov	r3, r2
   18e2c:	add	r4, r6, r2
   18e30:	ldr	r2, [sp, #24]
   18e34:	cmp	r3, #1
   18e38:	movls	r3, #0
   18e3c:	movhi	r3, #1
   18e40:	cmn	r2, #1
   18e44:	movne	r3, #0
   18e48:	cmp	r3, #0
   18e4c:	beq	18e5c <__assert_fail@plt+0x7cd0>
   18e50:	ldr	r0, [sp, #48]	; 0x30
   18e54:	bl	11078 <strlen@plt>
   18e58:	str	r0, [sp, #24]
   18e5c:	ldr	r3, [sp, #24]
   18e60:	cmp	r4, r3
   18e64:	bhi	1a050 <__assert_fail@plt+0x8ec4>
   18e68:	ldr	r3, [sp, #48]	; 0x30
   18e6c:	add	r4, r3, r6
   18e70:	ldr	r2, [sp, #52]	; 0x34
   18e74:	ldr	r1, [sp, #60]	; 0x3c
   18e78:	mov	r0, r4
   18e7c:	bl	10f64 <memcmp@plt>
   18e80:	cmp	r0, #0
   18e84:	bne	1a050 <__assert_fail@plt+0x8ec4>
   18e88:	ldr	r3, [sp, #32]
   18e8c:	cmp	r3, #0
   18e90:	bne	190a0 <__assert_fail@plt+0x7f14>
   18e94:	ldrb	r4, [r4]
   18e98:	cmp	r4, #126	; 0x7e
   18e9c:	ldrls	pc, [pc, r4, lsl #2]
   18ea0:	b	19954 <__assert_fail@plt+0x87c8>
   18ea4:	andeq	r9, r1, r4, ror #1
   18ea8:	andeq	r9, r1, r4, asr r9
   18eac:	andeq	r9, r1, r4, asr r9
   18eb0:	andeq	r9, r1, r4, asr r9
   18eb4:	andeq	r9, r1, r4, asr r9
   18eb8:	andeq	r9, r1, r4, asr r9
   18ebc:	andeq	r9, r1, r4, asr r9
   18ec0:	strdeq	r9, [r1], -ip
   18ec4:	andeq	r9, r1, r0, lsl #7
   18ec8:	andeq	r9, r1, r4, lsr #14
   18ecc:	ldrdeq	r9, [r1], -r0
   18ed0:	andeq	r9, r1, r8, lsr r7
   18ed4:	muleq	r1, r4, r3
   18ed8:	andeq	r9, r1, r8, lsr #7
   18edc:	andeq	r9, r1, r4, asr r9
   18ee0:	andeq	r9, r1, r4, asr r9
   18ee4:	andeq	r9, r1, r4, asr r9
   18ee8:	andeq	r9, r1, r4, asr r9
   18eec:	andeq	r9, r1, r4, asr r9
   18ef0:	andeq	r9, r1, r4, asr r9
   18ef4:	andeq	r9, r1, r4, asr r9
   18ef8:	andeq	r9, r1, r4, asr r9
   18efc:	andeq	r9, r1, r4, asr r9
   18f00:	andeq	r9, r1, r4, asr r9
   18f04:	andeq	r9, r1, r4, asr r9
   18f08:	andeq	r9, r1, r4, asr r9
   18f0c:	andeq	r9, r1, r4, asr r9
   18f10:	andeq	r9, r1, r4, asr r9
   18f14:	andeq	r9, r1, r4, asr r9
   18f18:	andeq	r9, r1, r4, asr r9
   18f1c:	andeq	r9, r1, r4, asr r9
   18f20:	andeq	r9, r1, r4, asr r9
   18f24:	andeq	r9, r1, r0, ror r8
   18f28:	muleq	r1, r4, r8
   18f2c:	muleq	r1, r4, r8
   18f30:	andeq	r9, r1, ip, lsr #16
   18f34:	muleq	r1, r4, r8
   18f38:			; <UNDEFINED> instruction: 0x00019db4
   18f3c:	muleq	r1, r4, r8
   18f40:			; <UNDEFINED> instruction: 0x000198b4
   18f44:	muleq	r1, r4, r8
   18f48:	muleq	r1, r4, r8
   18f4c:	muleq	r1, r4, r8
   18f50:			; <UNDEFINED> instruction: 0x00019db4
   18f54:			; <UNDEFINED> instruction: 0x00019db4
   18f58:			; <UNDEFINED> instruction: 0x00019db4
   18f5c:			; <UNDEFINED> instruction: 0x00019db4
   18f60:			; <UNDEFINED> instruction: 0x00019db4
   18f64:			; <UNDEFINED> instruction: 0x00019db4
   18f68:			; <UNDEFINED> instruction: 0x00019db4
   18f6c:			; <UNDEFINED> instruction: 0x00019db4
   18f70:			; <UNDEFINED> instruction: 0x00019db4
   18f74:			; <UNDEFINED> instruction: 0x00019db4
   18f78:			; <UNDEFINED> instruction: 0x00019db4
   18f7c:			; <UNDEFINED> instruction: 0x00019db4
   18f80:			; <UNDEFINED> instruction: 0x00019db4
   18f84:			; <UNDEFINED> instruction: 0x00019db4
   18f88:			; <UNDEFINED> instruction: 0x00019db4
   18f8c:			; <UNDEFINED> instruction: 0x00019db4
   18f90:	muleq	r1, r4, r8
   18f94:	muleq	r1, r4, r8
   18f98:	muleq	r1, r4, r8
   18f9c:	muleq	r1, r4, r8
   18fa0:	andeq	r9, r1, r4, lsl r2
   18fa4:	andeq	r9, r1, r4, asr r9
   18fa8:			; <UNDEFINED> instruction: 0x00019db4
   18fac:			; <UNDEFINED> instruction: 0x00019db4
   18fb0:			; <UNDEFINED> instruction: 0x00019db4
   18fb4:			; <UNDEFINED> instruction: 0x00019db4
   18fb8:			; <UNDEFINED> instruction: 0x00019db4
   18fbc:			; <UNDEFINED> instruction: 0x00019db4
   18fc0:			; <UNDEFINED> instruction: 0x00019db4
   18fc4:			; <UNDEFINED> instruction: 0x00019db4
   18fc8:			; <UNDEFINED> instruction: 0x00019db4
   18fcc:			; <UNDEFINED> instruction: 0x00019db4
   18fd0:			; <UNDEFINED> instruction: 0x00019db4
   18fd4:			; <UNDEFINED> instruction: 0x00019db4
   18fd8:			; <UNDEFINED> instruction: 0x00019db4
   18fdc:			; <UNDEFINED> instruction: 0x00019db4
   18fe0:			; <UNDEFINED> instruction: 0x00019db4
   18fe4:			; <UNDEFINED> instruction: 0x00019db4
   18fe8:			; <UNDEFINED> instruction: 0x00019db4
   18fec:			; <UNDEFINED> instruction: 0x00019db4
   18ff0:			; <UNDEFINED> instruction: 0x00019db4
   18ff4:			; <UNDEFINED> instruction: 0x00019db4
   18ff8:			; <UNDEFINED> instruction: 0x00019db4
   18ffc:			; <UNDEFINED> instruction: 0x00019db4
   19000:			; <UNDEFINED> instruction: 0x00019db4
   19004:			; <UNDEFINED> instruction: 0x00019db4
   19008:			; <UNDEFINED> instruction: 0x00019db4
   1900c:			; <UNDEFINED> instruction: 0x00019db4
   19010:	muleq	r1, r4, r8
   19014:	andeq	r9, r1, ip, asr #14
   19018:			; <UNDEFINED> instruction: 0x00019db4
   1901c:	muleq	r1, r4, r8
   19020:			; <UNDEFINED> instruction: 0x00019db4
   19024:	muleq	r1, r4, r8
   19028:			; <UNDEFINED> instruction: 0x00019db4
   1902c:			; <UNDEFINED> instruction: 0x00019db4
   19030:			; <UNDEFINED> instruction: 0x00019db4
   19034:			; <UNDEFINED> instruction: 0x00019db4
   19038:			; <UNDEFINED> instruction: 0x00019db4
   1903c:			; <UNDEFINED> instruction: 0x00019db4
   19040:			; <UNDEFINED> instruction: 0x00019db4
   19044:			; <UNDEFINED> instruction: 0x00019db4
   19048:			; <UNDEFINED> instruction: 0x00019db4
   1904c:			; <UNDEFINED> instruction: 0x00019db4
   19050:			; <UNDEFINED> instruction: 0x00019db4
   19054:			; <UNDEFINED> instruction: 0x00019db4
   19058:			; <UNDEFINED> instruction: 0x00019db4
   1905c:			; <UNDEFINED> instruction: 0x00019db4
   19060:			; <UNDEFINED> instruction: 0x00019db4
   19064:			; <UNDEFINED> instruction: 0x00019db4
   19068:			; <UNDEFINED> instruction: 0x00019db4
   1906c:			; <UNDEFINED> instruction: 0x00019db4
   19070:			; <UNDEFINED> instruction: 0x00019db4
   19074:			; <UNDEFINED> instruction: 0x00019db4
   19078:			; <UNDEFINED> instruction: 0x00019db4
   1907c:			; <UNDEFINED> instruction: 0x00019db4
   19080:			; <UNDEFINED> instruction: 0x00019db4
   19084:			; <UNDEFINED> instruction: 0x00019db4
   19088:			; <UNDEFINED> instruction: 0x00019db4
   1908c:			; <UNDEFINED> instruction: 0x00019db4
   19090:	andeq	r9, r1, ip, lsl #16
   19094:	muleq	r1, r4, r8
   19098:	andeq	r9, r1, ip, lsl #16
   1909c:	andeq	r9, r1, ip, lsr #16
   190a0:	mov	r8, r9
   190a4:	mov	r7, sl
   190a8:	b	19fa8 <__assert_fail@plt+0x8e1c>
   190ac:	ldr	r3, [sp, #28]
   190b0:	cmp	r3, #0
   190b4:	bne	190d4 <__assert_fail@plt+0x7f48>
   190b8:	ldr	r3, [sp, #156]	; 0x9c
   190bc:	tst	r3, #1
   190c0:	bne	194bc <__assert_fail@plt+0x8330>
   190c4:	ldr	r3, [sp, #28]
   190c8:	str	r3, [sp, #44]	; 0x2c
   190cc:	mov	r5, r3
   190d0:	b	193dc <__assert_fail@plt+0x8250>
   190d4:	ldr	r3, [sp, #32]
   190d8:	cmp	r3, #0
   190dc:	bne	19f58 <__assert_fail@plt+0x8dcc>
   190e0:	str	r3, [sp, #44]	; 0x2c
   190e4:	ldr	r3, [sp, #36]	; 0x24
   190e8:	eor	r3, r3, #1
   190ec:	cmp	sl, #2
   190f0:	movne	r3, #0
   190f4:	andeq	r3, r3, #1
   190f8:	cmp	r3, #0
   190fc:	beq	19154 <__assert_fail@plt+0x7fc8>
   19100:	cmp	r9, fp
   19104:	movhi	r2, #39	; 0x27
   19108:	strbhi	r2, [r8, fp]
   1910c:	add	r2, fp, #1
   19110:	cmp	r9, r2
   19114:	movhi	r1, #36	; 0x24
   19118:	strbhi	r1, [r8, r2]
   1911c:	add	r2, fp, #2
   19120:	cmp	r9, r2
   19124:	movhi	r1, #39	; 0x27
   19128:	strbhi	r1, [r8, r2]
   1912c:	add	r2, fp, #3
   19130:	cmp	r9, r2
   19134:	bls	1a014 <__assert_fail@plt+0x8e88>
   19138:	mov	r1, #92	; 0x5c
   1913c:	strb	r1, [r8, r2]
   19140:	add	fp, fp, #4
   19144:	str	r3, [sp, #36]	; 0x24
   19148:	mov	r5, #0
   1914c:	mov	r4, #48	; 0x30
   19150:	b	19428 <__assert_fail@plt+0x829c>
   19154:	cmp	r9, fp
   19158:	bhi	19180 <__assert_fail@plt+0x7ff4>
   1915c:	add	r1, fp, #1
   19160:	ldr	r2, [sp, #56]	; 0x38
   19164:	cmp	r2, #0
   19168:	bne	191a8 <__assert_fail@plt+0x801c>
   1916c:	mov	r3, r5
   19170:	ldr	r5, [sp, #56]	; 0x38
   19174:	mov	fp, r1
   19178:	mov	r4, #48	; 0x30
   1917c:	b	193dc <__assert_fail@plt+0x8250>
   19180:	mov	r2, #92	; 0x5c
   19184:	strb	r2, [r8, fp]
   19188:	add	r1, fp, #1
   1918c:	ldr	r2, [sp, #56]	; 0x38
   19190:	cmp	r2, #0
   19194:	moveq	r3, r5
   19198:	moveq	r5, r2
   1919c:	moveq	fp, r1
   191a0:	moveq	r4, #48	; 0x30
   191a4:	beq	19428 <__assert_fail@plt+0x829c>
   191a8:	add	r2, r6, #1
   191ac:	ldr	r0, [sp, #24]
   191b0:	cmp	r2, r0
   191b4:	bcs	191d0 <__assert_fail@plt+0x8044>
   191b8:	ldr	r0, [sp, #48]	; 0x30
   191bc:	ldrb	r2, [r0, r2]
   191c0:	sub	r2, r2, #48	; 0x30
   191c4:	uxtb	r2, r2
   191c8:	cmp	r2, #9
   191cc:	bls	191e8 <__assert_fail@plt+0x805c>
   191d0:	mov	r2, r3
   191d4:	mov	r3, r5
   191d8:	mov	r5, r2
   191dc:	mov	fp, r1
   191e0:	mov	r4, #48	; 0x30
   191e4:	b	19400 <__assert_fail@plt+0x8274>
   191e8:	cmp	r9, r1
   191ec:	movhi	r2, #48	; 0x30
   191f0:	strbhi	r2, [r8, r1]
   191f4:	add	r2, fp, #2
   191f8:	cmp	r9, r2
   191fc:	movhi	r1, #48	; 0x30
   19200:	strbhi	r1, [r8, r2]
   19204:	add	r1, fp, #3
   19208:	b	191d0 <__assert_fail@plt+0x8044>
   1920c:	mov	r3, #0
   19210:	str	r3, [sp, #44]	; 0x2c
   19214:	cmp	sl, #2
   19218:	beq	19234 <__assert_fail@plt+0x80a8>
   1921c:	cmp	sl, #5
   19220:	beq	1924c <__assert_fail@plt+0x80c0>
   19224:	mov	r5, #0
   19228:	mov	r3, r5
   1922c:	mov	r4, #63	; 0x3f
   19230:	b	193dc <__assert_fail@plt+0x8250>
   19234:	ldr	r3, [sp, #32]
   19238:	cmp	r3, #0
   1923c:	bne	19f64 <__assert_fail@plt+0x8dd8>
   19240:	mov	r5, r3
   19244:	mov	r4, #63	; 0x3f
   19248:	b	19944 <__assert_fail@plt+0x87b8>
   1924c:	ldr	r3, [sp, #156]	; 0x9c
   19250:	tst	r3, #4
   19254:	beq	19d7c <__assert_fail@plt+0x8bf0>
   19258:	add	r2, r6, #2
   1925c:	ldr	r3, [sp, #24]
   19260:	cmp	r2, r3
   19264:	bcs	19d8c <__assert_fail@plt+0x8c00>
   19268:	ldr	r3, [sp, #48]	; 0x30
   1926c:	add	r3, r3, r6
   19270:	ldrb	r4, [r3, #1]
   19274:	cmp	r4, #63	; 0x3f
   19278:	movne	r5, #0
   1927c:	movne	r3, r5
   19280:	movne	r4, #63	; 0x3f
   19284:	bne	193dc <__assert_fail@plt+0x8250>
   19288:	ldr	r3, [sp, #48]	; 0x30
   1928c:	ldrb	r1, [r3, r2]
   19290:	sub	r3, r1, #33	; 0x21
   19294:	cmp	r3, #29
   19298:	ldrls	pc, [pc, r3, lsl #2]
   1929c:	b	19d9c <__assert_fail@plt+0x8c10>
   192a0:	andeq	r9, r1, r8, lsl r3
   192a4:	muleq	r1, ip, sp
   192a8:	muleq	r1, ip, sp
   192ac:	muleq	r1, ip, sp
   192b0:	muleq	r1, ip, sp
   192b4:	muleq	r1, ip, sp
   192b8:	andeq	r9, r1, r8, lsl r3
   192bc:	andeq	r9, r1, r8, lsl r3
   192c0:	andeq	r9, r1, r8, lsl r3
   192c4:	muleq	r1, ip, sp
   192c8:	muleq	r1, ip, sp
   192cc:	muleq	r1, ip, sp
   192d0:	andeq	r9, r1, r8, lsl r3
   192d4:	muleq	r1, ip, sp
   192d8:	andeq	r9, r1, r8, lsl r3
   192dc:	muleq	r1, ip, sp
   192e0:	muleq	r1, ip, sp
   192e4:	muleq	r1, ip, sp
   192e8:	muleq	r1, ip, sp
   192ec:	muleq	r1, ip, sp
   192f0:	muleq	r1, ip, sp
   192f4:	muleq	r1, ip, sp
   192f8:	muleq	r1, ip, sp
   192fc:	muleq	r1, ip, sp
   19300:	muleq	r1, ip, sp
   19304:	muleq	r1, ip, sp
   19308:	muleq	r1, ip, sp
   1930c:	andeq	r9, r1, r8, lsl r3
   19310:	andeq	r9, r1, r8, lsl r3
   19314:	andeq	r9, r1, r8, lsl r3
   19318:	ldr	r3, [sp, #32]
   1931c:	cmp	r3, #0
   19320:	bne	1a008 <__assert_fail@plt+0x8e7c>
   19324:	cmp	r9, fp
   19328:	movhi	r3, #63	; 0x3f
   1932c:	strbhi	r3, [r8, fp]
   19330:	add	r3, fp, #1
   19334:	cmp	r9, r3
   19338:	movhi	r0, #34	; 0x22
   1933c:	strbhi	r0, [r8, r3]
   19340:	add	r3, fp, #2
   19344:	cmp	r9, r3
   19348:	movhi	r0, #34	; 0x22
   1934c:	strbhi	r0, [r8, r3]
   19350:	add	r3, fp, #3
   19354:	cmp	r9, r3
   19358:	movhi	r0, #63	; 0x3f
   1935c:	strbhi	r0, [r8, r3]
   19360:	add	fp, fp, #4
   19364:	ldr	r3, [sp, #32]
   19368:	mov	r5, r3
   1936c:	mov	r4, r1
   19370:	mov	r6, r2
   19374:	b	193dc <__assert_fail@plt+0x8250>
   19378:	mov	r3, #0
   1937c:	str	r3, [sp, #44]	; 0x2c
   19380:	mov	r4, #8
   19384:	mov	r3, #98	; 0x62
   19388:	b	193c8 <__assert_fail@plt+0x823c>
   1938c:	mov	r3, #0
   19390:	str	r3, [sp, #44]	; 0x2c
   19394:	mov	r4, #12
   19398:	mov	r3, #102	; 0x66
   1939c:	b	193c8 <__assert_fail@plt+0x823c>
   193a0:	mov	r3, #0
   193a4:	str	r3, [sp, #44]	; 0x2c
   193a8:	mov	r4, #13
   193ac:	mov	r3, #114	; 0x72
   193b0:	ldr	r2, [sp, #32]
   193b4:	cmp	sl, #2
   193b8:	movne	r2, #0
   193bc:	andeq	r2, r2, #1
   193c0:	cmp	r2, #0
   193c4:	bne	197e8 <__assert_fail@plt+0x865c>
   193c8:	ldr	r2, [sp, #28]
   193cc:	cmp	r2, #0
   193d0:	bne	19dd0 <__assert_fail@plt+0x8c44>
   193d4:	mov	r5, r2
   193d8:	mov	r3, r2
   193dc:	ldr	r2, [sp, #28]
   193e0:	eor	r2, r2, #1
   193e4:	cmp	sl, #2
   193e8:	orreq	r2, r2, #1
   193ec:	eor	r2, r2, #1
   193f0:	ldr	r1, [sp, #32]
   193f4:	orr	r2, r1, r2
   193f8:	tst	r2, #255	; 0xff
   193fc:	beq	19428 <__assert_fail@plt+0x829c>
   19400:	ldr	r2, [sp, #160]	; 0xa0
   19404:	cmp	r2, #0
   19408:	beq	19428 <__assert_fail@plt+0x829c>
   1940c:	ubfx	r1, r4, #5, #8
   19410:	and	r2, r4, #31
   19414:	ldr	r0, [sp, #160]	; 0xa0
   19418:	ldr	r1, [r0, r1, lsl #2]
   1941c:	lsr	r2, r1, r2
   19420:	tst	r2, #1
   19424:	bne	19434 <__assert_fail@plt+0x82a8>
   19428:	ldr	r2, [sp, #44]	; 0x2c
   1942c:	cmp	r2, #0
   19430:	beq	19788 <__assert_fail@plt+0x85fc>
   19434:	ldr	r3, [sp, #32]
   19438:	cmp	r3, #0
   1943c:	bne	19f88 <__assert_fail@plt+0x8dfc>
   19440:	ldr	r3, [sp, #36]	; 0x24
   19444:	eor	r3, r3, #1
   19448:	cmp	sl, #2
   1944c:	movne	r3, #0
   19450:	andeq	r3, r3, #1
   19454:	cmp	r3, #0
   19458:	beq	19490 <__assert_fail@plt+0x8304>
   1945c:	cmp	r9, fp
   19460:	movhi	r2, #39	; 0x27
   19464:	strbhi	r2, [r8, fp]
   19468:	add	r2, fp, #1
   1946c:	cmp	r9, r2
   19470:	movhi	r1, #36	; 0x24
   19474:	strbhi	r1, [r8, r2]
   19478:	add	r2, fp, #2
   1947c:	cmp	r9, r2
   19480:	movhi	r1, #39	; 0x27
   19484:	strbhi	r1, [r8, r2]
   19488:	add	fp, fp, #3
   1948c:	str	r3, [sp, #36]	; 0x24
   19490:	cmp	r9, fp
   19494:	movhi	r3, #92	; 0x5c
   19498:	strbhi	r3, [r8, fp]
   1949c:	add	fp, fp, #1
   194a0:	cmp	fp, r9
   194a4:	strbcc	r4, [r8, fp]
   194a8:	add	fp, fp, #1
   194ac:	cmp	r5, #0
   194b0:	ldr	r3, [sp, #40]	; 0x28
   194b4:	moveq	r3, r5
   194b8:	str	r3, [sp, #40]	; 0x28
   194bc:	add	r6, r6, #1
   194c0:	ldr	r3, [sp, #24]
   194c4:	cmn	r3, #1
   194c8:	beq	19df8 <__assert_fail@plt+0x8c6c>
   194cc:	ldr	r3, [sp, #24]
   194d0:	subs	r5, r3, r6
   194d4:	movne	r5, #1
   194d8:	cmp	r5, #0
   194dc:	beq	19e0c <__assert_fail@plt+0x8c80>
   194e0:	ldr	r3, [sp, #28]
   194e4:	cmp	sl, #2
   194e8:	moveq	r3, #0
   194ec:	andne	r3, r3, #1
   194f0:	str	r3, [sp, #56]	; 0x38
   194f4:	ldr	r2, [sp, #52]	; 0x34
   194f8:	adds	r7, r2, #0
   194fc:	movne	r7, #1
   19500:	ands	r3, r3, r7
   19504:	str	r3, [sp, #44]	; 0x2c
   19508:	bne	18e28 <__assert_fail@plt+0x7c9c>
   1950c:	ldr	r3, [sp, #48]	; 0x30
   19510:	ldrb	r4, [r3, r6]
   19514:	cmp	r4, #126	; 0x7e
   19518:	ldrls	pc, [pc, r4, lsl #2]
   1951c:	b	19954 <__assert_fail@plt+0x87c8>
   19520:	andeq	r9, r1, ip, lsr #1
   19524:	andeq	r9, r1, r4, asr r9
   19528:	andeq	r9, r1, r4, asr r9
   1952c:	andeq	r9, r1, r4, asr r9
   19530:	andeq	r9, r1, r4, asr r9
   19534:	andeq	r9, r1, r4, asr r9
   19538:	andeq	r9, r1, r4, asr r9
   1953c:	strdeq	r9, [r1], -r4
   19540:	andeq	r9, r1, r0, lsl #7
   19544:	andeq	r9, r1, r4, lsr #14
   19548:	andeq	r9, r1, r8, asr #15
   1954c:	andeq	r9, r1, r8, lsr r7
   19550:	muleq	r1, r4, r3
   19554:	andeq	r9, r1, r8, lsr #7
   19558:	andeq	r9, r1, r4, asr r9
   1955c:	andeq	r9, r1, r4, asr r9
   19560:	andeq	r9, r1, r4, asr r9
   19564:	andeq	r9, r1, r4, asr r9
   19568:	andeq	r9, r1, r4, asr r9
   1956c:	andeq	r9, r1, r4, asr r9
   19570:	andeq	r9, r1, r4, asr r9
   19574:	andeq	r9, r1, r4, asr r9
   19578:	andeq	r9, r1, r4, asr r9
   1957c:	andeq	r9, r1, r4, asr r9
   19580:	andeq	r9, r1, r4, asr r9
   19584:	andeq	r9, r1, r4, asr r9
   19588:	andeq	r9, r1, r4, asr r9
   1958c:	andeq	r9, r1, r4, asr r9
   19590:	andeq	r9, r1, r4, asr r9
   19594:	andeq	r9, r1, r4, asr r9
   19598:	andeq	r9, r1, r4, asr r9
   1959c:	andeq	r9, r1, r4, asr r9
   195a0:	andeq	r9, r1, r0, ror r8
   195a4:	andeq	r9, r1, ip, ror #16
   195a8:	andeq	r9, r1, ip, ror #16
   195ac:	andeq	r9, r1, ip, lsr #16
   195b0:	andeq	r9, r1, ip, ror #16
   195b4:	andeq	r9, r1, r4, ror sp
   195b8:	andeq	r9, r1, ip, ror #16
   195bc:			; <UNDEFINED> instruction: 0x000198b4
   195c0:	andeq	r9, r1, ip, ror #16
   195c4:	andeq	r9, r1, ip, ror #16
   195c8:	andeq	r9, r1, ip, ror #16
   195cc:	andeq	r9, r1, r4, ror sp
   195d0:	andeq	r9, r1, r4, ror sp
   195d4:	andeq	r9, r1, r4, ror sp
   195d8:	andeq	r9, r1, r4, ror sp
   195dc:	andeq	r9, r1, r4, ror sp
   195e0:	andeq	r9, r1, r4, ror sp
   195e4:	andeq	r9, r1, r4, ror sp
   195e8:	andeq	r9, r1, r4, ror sp
   195ec:	andeq	r9, r1, r4, ror sp
   195f0:	andeq	r9, r1, r4, ror sp
   195f4:	andeq	r9, r1, r4, ror sp
   195f8:	andeq	r9, r1, r4, ror sp
   195fc:	andeq	r9, r1, r4, ror sp
   19600:	andeq	r9, r1, r4, ror sp
   19604:	andeq	r9, r1, r4, ror sp
   19608:	andeq	r9, r1, r4, ror sp
   1960c:	andeq	r9, r1, ip, ror #16
   19610:	andeq	r9, r1, ip, ror #16
   19614:	andeq	r9, r1, ip, ror #16
   19618:	andeq	r9, r1, ip, ror #16
   1961c:	andeq	r9, r1, r4, lsl r2
   19620:	andeq	r9, r1, r4, asr r9
   19624:	andeq	r9, r1, r4, ror sp
   19628:	andeq	r9, r1, r4, ror sp
   1962c:	andeq	r9, r1, r4, ror sp
   19630:	andeq	r9, r1, r4, ror sp
   19634:	andeq	r9, r1, r4, ror sp
   19638:	andeq	r9, r1, r4, ror sp
   1963c:	andeq	r9, r1, r4, ror sp
   19640:	andeq	r9, r1, r4, ror sp
   19644:	andeq	r9, r1, r4, ror sp
   19648:	andeq	r9, r1, r4, ror sp
   1964c:	andeq	r9, r1, r4, ror sp
   19650:	andeq	r9, r1, r4, ror sp
   19654:	andeq	r9, r1, r4, ror sp
   19658:	andeq	r9, r1, r4, ror sp
   1965c:	andeq	r9, r1, r4, ror sp
   19660:	andeq	r9, r1, r4, ror sp
   19664:	andeq	r9, r1, r4, ror sp
   19668:	andeq	r9, r1, r4, ror sp
   1966c:	andeq	r9, r1, r4, ror sp
   19670:	andeq	r9, r1, r4, ror sp
   19674:	andeq	r9, r1, r4, ror sp
   19678:	andeq	r9, r1, r4, ror sp
   1967c:	andeq	r9, r1, r4, ror sp
   19680:	andeq	r9, r1, r4, ror sp
   19684:	andeq	r9, r1, r4, ror sp
   19688:	andeq	r9, r1, r4, ror sp
   1968c:	andeq	r9, r1, ip, ror #16
   19690:	andeq	r9, r1, ip, asr #14
   19694:	andeq	r9, r1, r4, ror sp
   19698:	andeq	r9, r1, ip, ror #16
   1969c:	andeq	r9, r1, r4, ror sp
   196a0:	andeq	r9, r1, ip, ror #16
   196a4:	andeq	r9, r1, r4, ror sp
   196a8:	andeq	r9, r1, r4, ror sp
   196ac:	andeq	r9, r1, r4, ror sp
   196b0:	andeq	r9, r1, r4, ror sp
   196b4:	andeq	r9, r1, r4, ror sp
   196b8:	andeq	r9, r1, r4, ror sp
   196bc:	andeq	r9, r1, r4, ror sp
   196c0:	andeq	r9, r1, r4, ror sp
   196c4:	andeq	r9, r1, r4, ror sp
   196c8:	andeq	r9, r1, r4, ror sp
   196cc:	andeq	r9, r1, r4, ror sp
   196d0:	andeq	r9, r1, r4, ror sp
   196d4:	andeq	r9, r1, r4, ror sp
   196d8:	andeq	r9, r1, r4, ror sp
   196dc:	andeq	r9, r1, r4, ror sp
   196e0:	andeq	r9, r1, r4, ror sp
   196e4:	andeq	r9, r1, r4, ror sp
   196e8:	andeq	r9, r1, r4, ror sp
   196ec:	andeq	r9, r1, r4, ror sp
   196f0:	andeq	r9, r1, r4, ror sp
   196f4:	andeq	r9, r1, r4, ror sp
   196f8:	andeq	r9, r1, r4, ror sp
   196fc:	andeq	r9, r1, r4, ror sp
   19700:	andeq	r9, r1, r4, ror sp
   19704:	andeq	r9, r1, r4, ror sp
   19708:	andeq	r9, r1, r4, ror sp
   1970c:	andeq	r9, r1, ip, lsl #16
   19710:	andeq	r9, r1, ip, ror #16
   19714:	andeq	r9, r1, ip, lsl #16
   19718:	andeq	r9, r1, ip, lsr #16
   1971c:	mov	r3, #0
   19720:	str	r3, [sp, #44]	; 0x2c
   19724:	mov	r4, #9
   19728:	mov	r3, #116	; 0x74
   1972c:	b	193b0 <__assert_fail@plt+0x8224>
   19730:	mov	r3, #0
   19734:	str	r3, [sp, #44]	; 0x2c
   19738:	mov	r4, #11
   1973c:	mov	r3, #118	; 0x76
   19740:	b	193c8 <__assert_fail@plt+0x823c>
   19744:	mov	r3, #0
   19748:	str	r3, [sp, #44]	; 0x2c
   1974c:	cmp	sl, #2
   19750:	beq	19774 <__assert_fail@plt+0x85e8>
   19754:	ldr	r3, [sp, #28]
   19758:	ldr	r2, [sp, #32]
   1975c:	and	r3, r3, r2
   19760:	tst	r7, r3
   19764:	bne	19de8 <__assert_fail@plt+0x8c5c>
   19768:	mov	r4, #92	; 0x5c
   1976c:	mov	r3, r4
   19770:	b	193c8 <__assert_fail@plt+0x823c>
   19774:	ldr	r3, [sp, #32]
   19778:	cmp	r3, #0
   1977c:	bne	19f70 <__assert_fail@plt+0x8de4>
   19780:	mov	r5, r3
   19784:	mov	r4, #92	; 0x5c
   19788:	eor	r3, r3, #1
   1978c:	ldr	r2, [sp, #36]	; 0x24
   19790:	and	r3, r3, r2
   19794:	tst	r3, #255	; 0xff
   19798:	beq	194a0 <__assert_fail@plt+0x8314>
   1979c:	cmp	r9, fp
   197a0:	movhi	r3, #39	; 0x27
   197a4:	strbhi	r3, [r8, fp]
   197a8:	add	r3, fp, #1
   197ac:	cmp	r9, r3
   197b0:	movhi	r2, #39	; 0x27
   197b4:	strbhi	r2, [r8, r3]
   197b8:	add	fp, fp, #2
   197bc:	mov	r3, #0
   197c0:	str	r3, [sp, #36]	; 0x24
   197c4:	b	194a0 <__assert_fail@plt+0x8314>
   197c8:	mov	r3, #110	; 0x6e
   197cc:	b	193b0 <__assert_fail@plt+0x8224>
   197d0:	mov	r3, #110	; 0x6e
   197d4:	b	193b0 <__assert_fail@plt+0x8224>
   197d8:	mov	r3, #0
   197dc:	str	r3, [sp, #44]	; 0x2c
   197e0:	mov	r3, #110	; 0x6e
   197e4:	b	193b0 <__assert_fail@plt+0x8224>
   197e8:	mov	r8, r9
   197ec:	mov	r7, #2
   197f0:	b	19f90 <__assert_fail@plt+0x8e04>
   197f4:	mov	r3, #97	; 0x61
   197f8:	b	193c8 <__assert_fail@plt+0x823c>
   197fc:	mov	r3, #97	; 0x61
   19800:	b	193c8 <__assert_fail@plt+0x823c>
   19804:	mov	r3, #0
   19808:	str	r3, [sp, #44]	; 0x2c
   1980c:	ldr	r3, [sp, #24]
   19810:	cmn	r3, #1
   19814:	beq	19840 <__assert_fail@plt+0x86b4>
   19818:	ldr	r3, [sp, #24]
   1981c:	subs	r3, r3, #1
   19820:	movne	r3, #1
   19824:	cmp	r3, #0
   19828:	bne	19da8 <__assert_fail@plt+0x8c1c>
   1982c:	cmp	r6, #0
   19830:	beq	19870 <__assert_fail@plt+0x86e4>
   19834:	mov	r5, #0
   19838:	mov	r3, r5
   1983c:	b	193dc <__assert_fail@plt+0x8250>
   19840:	ldr	r3, [sp, #48]	; 0x30
   19844:	ldrb	r3, [r3, #1]
   19848:	adds	r3, r3, #0
   1984c:	movne	r3, #1
   19850:	b	19824 <__assert_fail@plt+0x8698>
   19854:	mov	r3, #0
   19858:	str	r3, [sp, #44]	; 0x2c
   1985c:	b	1982c <__assert_fail@plt+0x86a0>
   19860:	mov	r3, #0
   19864:	str	r3, [sp, #44]	; 0x2c
   19868:	b	19870 <__assert_fail@plt+0x86e4>
   1986c:	ldr	r5, [sp, #44]	; 0x2c
   19870:	ldr	r3, [sp, #32]
   19874:	cmp	sl, #2
   19878:	movne	r3, #0
   1987c:	andeq	r3, r3, #1
   19880:	cmp	r3, #0
   19884:	beq	193dc <__assert_fail@plt+0x8250>
   19888:	mov	r8, r9
   1988c:	mov	r7, #2
   19890:	b	19f90 <__assert_fail@plt+0x8e04>
   19894:	ldr	r5, [sp, #32]
   19898:	b	19870 <__assert_fail@plt+0x86e4>
   1989c:	mov	r3, #0
   198a0:	str	r3, [sp, #44]	; 0x2c
   198a4:	mov	r5, r3
   198a8:	b	19870 <__assert_fail@plt+0x86e4>
   198ac:	mov	r3, #0
   198b0:	str	r3, [sp, #44]	; 0x2c
   198b4:	cmp	sl, #2
   198b8:	strne	r5, [sp, #68]	; 0x44
   198bc:	movne	r3, #0
   198c0:	movne	r4, #39	; 0x27
   198c4:	bne	193dc <__assert_fail@plt+0x8250>
   198c8:	ldr	r3, [sp, #32]
   198cc:	cmp	r3, #0
   198d0:	bne	19f7c <__assert_fail@plt+0x8df0>
   198d4:	ldr	r3, [sp, #72]	; 0x48
   198d8:	clz	r3, r3
   198dc:	lsr	r3, r3, #5
   198e0:	cmp	r9, #0
   198e4:	moveq	r3, #0
   198e8:	cmp	r3, #0
   198ec:	movne	r3, #0
   198f0:	bne	19918 <__assert_fail@plt+0x878c>
   198f4:	cmp	r9, fp
   198f8:	movhi	r3, #39	; 0x27
   198fc:	strbhi	r3, [r8, fp]
   19900:	add	r3, fp, #1
   19904:	cmp	r9, r3
   19908:	movhi	r2, #92	; 0x5c
   1990c:	strbhi	r2, [r8, r3]
   19910:	mov	r3, r9
   19914:	ldr	r9, [sp, #72]	; 0x48
   19918:	add	r2, fp, #2
   1991c:	cmp	r2, r3
   19920:	movcc	r1, #39	; 0x27
   19924:	strbcc	r1, [r8, r2]
   19928:	add	fp, fp, #3
   1992c:	str	r5, [sp, #68]	; 0x44
   19930:	ldr	r2, [sp, #32]
   19934:	str	r2, [sp, #36]	; 0x24
   19938:	str	r9, [sp, #72]	; 0x48
   1993c:	mov	r9, r3
   19940:	mov	r4, #39	; 0x27
   19944:	mov	r3, #0
   19948:	b	19428 <__assert_fail@plt+0x829c>
   1994c:	mov	r3, #0
   19950:	str	r3, [sp, #44]	; 0x2c
   19954:	ldr	r7, [sp, #76]	; 0x4c
   19958:	cmp	r7, #1
   1995c:	bne	19994 <__assert_fail@plt+0x8808>
   19960:	bl	11054 <__ctype_b_loc@plt>
   19964:	ldr	r2, [r0]
   19968:	lsl	r3, r4, #1
   1996c:	ldrh	r5, [r2, r3]
   19970:	ubfx	r5, r5, #14, #1
   19974:	mov	ip, r7
   19978:	eor	r3, r5, #1
   1997c:	ldr	r2, [sp, #28]
   19980:	and	r3, r3, r2
   19984:	ands	r3, r3, #255	; 0xff
   19988:	beq	193dc <__assert_fail@plt+0x8250>
   1998c:	mov	r5, #0
   19990:	b	19bf0 <__assert_fail@plt+0x8a64>
   19994:	mov	r2, #0
   19998:	mov	r3, #0
   1999c:	strd	r2, [sp, #104]	; 0x68
   199a0:	ldr	r3, [sp, #24]
   199a4:	cmn	r3, #1
   199a8:	beq	199cc <__assert_fail@plt+0x8840>
   199ac:	mov	r3, #0
   199b0:	str	r4, [sp, #88]	; 0x58
   199b4:	str	fp, [sp, #92]	; 0x5c
   199b8:	str	r8, [sp, #56]	; 0x38
   199bc:	mov	r8, r3
   199c0:	str	r9, [sp, #84]	; 0x54
   199c4:	ldr	r9, [sp, #48]	; 0x30
   199c8:	b	19b18 <__assert_fail@plt+0x898c>
   199cc:	ldr	r0, [sp, #48]	; 0x30
   199d0:	bl	11078 <strlen@plt>
   199d4:	str	r0, [sp, #24]
   199d8:	b	199ac <__assert_fail@plt+0x8820>
   199dc:	mov	r1, fp
   199e0:	ldr	r4, [sp, #88]	; 0x58
   199e4:	mov	r2, r8
   199e8:	mov	ip, r8
   199ec:	ldr	fp, [sp, #92]	; 0x5c
   199f0:	ldr	r8, [sp, #56]	; 0x38
   199f4:	ldr	r9, [sp, #84]	; 0x54
   199f8:	ldr	r0, [sp, #24]
   199fc:	cmp	r7, r0
   19a00:	bcs	19bb8 <__assert_fail@plt+0x8a2c>
   19a04:	ldrb	r3, [r1]
   19a08:	cmp	r3, #0
   19a0c:	beq	19bc0 <__assert_fail@plt+0x8a34>
   19a10:	mov	r3, r1
   19a14:	add	r2, r2, #1
   19a18:	add	r1, r6, r2
   19a1c:	cmp	r0, r1
   19a20:	bls	19bc8 <__assert_fail@plt+0x8a3c>
   19a24:	ldrb	r1, [r3, #1]!
   19a28:	cmp	r1, #0
   19a2c:	bne	19a14 <__assert_fail@plt+0x8888>
   19a30:	mov	ip, r2
   19a34:	mov	r5, #0
   19a38:	b	19be8 <__assert_fail@plt+0x8a5c>
   19a3c:	ldr	r3, [sp, #56]	; 0x38
   19a40:	str	r3, [sp, #64]	; 0x40
   19a44:	ldr	r8, [sp, #84]	; 0x54
   19a48:	mov	r7, #2
   19a4c:	b	19f90 <__assert_fail@plt+0x8e04>
   19a50:	cmp	r2, r7
   19a54:	beq	19af4 <__assert_fail@plt+0x8968>
   19a58:	ldrb	r3, [r2], #1
   19a5c:	sub	r3, r3, #91	; 0x5b
   19a60:	cmp	r3, #33	; 0x21
   19a64:	ldrls	pc, [pc, r3, lsl #2]
   19a68:	b	19a50 <__assert_fail@plt+0x88c4>
   19a6c:	andeq	r9, r1, ip, lsr sl
   19a70:	andeq	r9, r1, ip, lsr sl
   19a74:	andeq	r9, r1, r0, asr sl
   19a78:	andeq	r9, r1, ip, lsr sl
   19a7c:	andeq	r9, r1, r0, asr sl
   19a80:	andeq	r9, r1, ip, lsr sl
   19a84:	andeq	r9, r1, r0, asr sl
   19a88:	andeq	r9, r1, r0, asr sl
   19a8c:	andeq	r9, r1, r0, asr sl
   19a90:	andeq	r9, r1, r0, asr sl
   19a94:	andeq	r9, r1, r0, asr sl
   19a98:	andeq	r9, r1, r0, asr sl
   19a9c:	andeq	r9, r1, r0, asr sl
   19aa0:	andeq	r9, r1, r0, asr sl
   19aa4:	andeq	r9, r1, r0, asr sl
   19aa8:	andeq	r9, r1, r0, asr sl
   19aac:	andeq	r9, r1, r0, asr sl
   19ab0:	andeq	r9, r1, r0, asr sl
   19ab4:	andeq	r9, r1, r0, asr sl
   19ab8:	andeq	r9, r1, r0, asr sl
   19abc:	andeq	r9, r1, r0, asr sl
   19ac0:	andeq	r9, r1, r0, asr sl
   19ac4:	andeq	r9, r1, r0, asr sl
   19ac8:	andeq	r9, r1, r0, asr sl
   19acc:	andeq	r9, r1, r0, asr sl
   19ad0:	andeq	r9, r1, r0, asr sl
   19ad4:	andeq	r9, r1, r0, asr sl
   19ad8:	andeq	r9, r1, r0, asr sl
   19adc:	andeq	r9, r1, r0, asr sl
   19ae0:	andeq	r9, r1, r0, asr sl
   19ae4:	andeq	r9, r1, r0, asr sl
   19ae8:	andeq	r9, r1, r0, asr sl
   19aec:	andeq	r9, r1, r0, asr sl
   19af0:	andeq	r9, r1, ip, lsr sl
   19af4:	ldr	r0, [sp, #100]	; 0x64
   19af8:	bl	10fa0 <iswprint@plt>
   19afc:	cmp	r0, #0
   19b00:	moveq	r5, #0
   19b04:	add	r8, r8, r4
   19b08:	add	r0, sp, #104	; 0x68
   19b0c:	bl	10f4c <mbsinit@plt>
   19b10:	cmp	r0, #0
   19b14:	bne	19b84 <__assert_fail@plt+0x89f8>
   19b18:	add	r7, r6, r8
   19b1c:	add	fp, r9, r7
   19b20:	add	r3, sp, #104	; 0x68
   19b24:	ldr	r2, [sp, #24]
   19b28:	sub	r2, r2, r7
   19b2c:	mov	r1, fp
   19b30:	add	r0, sp, #100	; 0x64
   19b34:	bl	1c2f0 <__assert_fail@plt+0xb164>
   19b38:	subs	r4, r0, #0
   19b3c:	beq	19bd4 <__assert_fail@plt+0x8a48>
   19b40:	cmn	r4, #1
   19b44:	beq	19b9c <__assert_fail@plt+0x8a10>
   19b48:	cmn	r4, #2
   19b4c:	beq	199dc <__assert_fail@plt+0x8850>
   19b50:	ldr	r3, [sp, #32]
   19b54:	cmp	sl, #2
   19b58:	movne	r3, #0
   19b5c:	andeq	r3, r3, #1
   19b60:	cmp	r3, #0
   19b64:	beq	19af4 <__assert_fail@plt+0x8968>
   19b68:	cmp	r4, #1
   19b6c:	bls	19af4 <__assert_fail@plt+0x8968>
   19b70:	add	r2, r7, #1
   19b74:	add	r2, r9, r2
   19b78:	add	r3, r9, r4
   19b7c:	add	r7, r3, r7
   19b80:	b	19a58 <__assert_fail@plt+0x88cc>
   19b84:	ldr	r4, [sp, #88]	; 0x58
   19b88:	mov	ip, r8
   19b8c:	ldr	fp, [sp, #92]	; 0x5c
   19b90:	ldr	r8, [sp, #56]	; 0x38
   19b94:	ldr	r9, [sp, #84]	; 0x54
   19b98:	b	19be8 <__assert_fail@plt+0x8a5c>
   19b9c:	ldr	r4, [sp, #88]	; 0x58
   19ba0:	mov	ip, r8
   19ba4:	ldr	fp, [sp, #92]	; 0x5c
   19ba8:	ldr	r8, [sp, #56]	; 0x38
   19bac:	ldr	r9, [sp, #84]	; 0x54
   19bb0:	mov	r5, #0
   19bb4:	b	19be8 <__assert_fail@plt+0x8a5c>
   19bb8:	mov	r5, #0
   19bbc:	b	19be8 <__assert_fail@plt+0x8a5c>
   19bc0:	mov	r5, #0
   19bc4:	b	19be8 <__assert_fail@plt+0x8a5c>
   19bc8:	mov	ip, r2
   19bcc:	mov	r5, #0
   19bd0:	b	19be8 <__assert_fail@plt+0x8a5c>
   19bd4:	ldr	r4, [sp, #88]	; 0x58
   19bd8:	mov	ip, r8
   19bdc:	ldr	fp, [sp, #92]	; 0x5c
   19be0:	ldr	r8, [sp, #56]	; 0x38
   19be4:	ldr	r9, [sp, #84]	; 0x54
   19be8:	cmp	ip, #1
   19bec:	bls	19978 <__assert_fail@plt+0x87ec>
   19bf0:	add	lr, r6, ip
   19bf4:	ldr	r3, [sp, #48]	; 0x30
   19bf8:	add	r1, r3, r6
   19bfc:	mov	r3, #0
   19c00:	eor	r0, r5, #1
   19c04:	ldr	r2, [sp, #28]
   19c08:	and	r0, r0, r2
   19c0c:	uxtb	r0, r0
   19c10:	str	r0, [sp, #56]	; 0x38
   19c14:	mov	r7, #92	; 0x5c
   19c18:	ldr	ip, [sp, #36]	; 0x24
   19c1c:	str	r5, [sp, #84]	; 0x54
   19c20:	ldr	r2, [sp, #44]	; 0x2c
   19c24:	b	19c94 <__assert_fail@plt+0x8b08>
   19c28:	cmp	r2, #0
   19c2c:	beq	19c3c <__assert_fail@plt+0x8ab0>
   19c30:	cmp	r9, fp
   19c34:	strbhi	r7, [r8, fp]
   19c38:	add	fp, fp, #1
   19c3c:	add	r5, r6, #1
   19c40:	cmp	r5, lr
   19c44:	bcs	19d50 <__assert_fail@plt+0x8bc4>
   19c48:	eor	r2, r3, #1
   19c4c:	and	r2, r2, ip
   19c50:	ands	r2, r2, #255	; 0xff
   19c54:	beq	19d6c <__assert_fail@plt+0x8be0>
   19c58:	cmp	r9, fp
   19c5c:	movhi	r2, #39	; 0x27
   19c60:	strbhi	r2, [r8, fp]
   19c64:	add	r2, fp, #1
   19c68:	cmp	r9, r2
   19c6c:	movhi	ip, #39	; 0x27
   19c70:	strbhi	ip, [r8, r2]
   19c74:	add	fp, fp, #2
   19c78:	ldr	ip, [sp, #56]	; 0x38
   19c7c:	mov	r2, ip
   19c80:	mov	r6, r5
   19c84:	cmp	r9, fp
   19c88:	strbhi	r4, [r8, fp]
   19c8c:	add	fp, fp, #1
   19c90:	ldrb	r4, [r1, #1]!
   19c94:	cmp	r0, #0
   19c98:	beq	19c28 <__assert_fail@plt+0x8a9c>
   19c9c:	ldr	r3, [sp, #32]
   19ca0:	cmp	r3, #0
   19ca4:	bne	19f38 <__assert_fail@plt+0x8dac>
   19ca8:	eor	r3, ip, #1
   19cac:	cmp	sl, #2
   19cb0:	movne	r3, #0
   19cb4:	andeq	r3, r3, #1
   19cb8:	cmp	r3, #0
   19cbc:	beq	19cf4 <__assert_fail@plt+0x8b68>
   19cc0:	cmp	r9, fp
   19cc4:	movhi	ip, #39	; 0x27
   19cc8:	strbhi	ip, [r8, fp]
   19ccc:	add	ip, fp, #1
   19cd0:	cmp	r9, ip
   19cd4:	movhi	r5, #36	; 0x24
   19cd8:	strbhi	r5, [r8, ip]
   19cdc:	add	ip, fp, #2
   19ce0:	cmp	r9, ip
   19ce4:	movhi	r5, #39	; 0x27
   19ce8:	strbhi	r5, [r8, ip]
   19cec:	add	fp, fp, #3
   19cf0:	mov	ip, r3
   19cf4:	cmp	r9, fp
   19cf8:	strbhi	r7, [r8, fp]
   19cfc:	add	r3, fp, #1
   19d00:	cmp	r9, r3
   19d04:	bls	19d14 <__assert_fail@plt+0x8b88>
   19d08:	lsr	r5, r4, #6
   19d0c:	add	r5, r5, #48	; 0x30
   19d10:	strb	r5, [r8, r3]
   19d14:	add	r3, fp, #2
   19d18:	cmp	r9, r3
   19d1c:	bls	19d2c <__assert_fail@plt+0x8ba0>
   19d20:	ubfx	r5, r4, #3, #3
   19d24:	add	r5, r5, #48	; 0x30
   19d28:	strb	r5, [r8, r3]
   19d2c:	add	fp, fp, #3
   19d30:	and	r4, r4, #7
   19d34:	add	r4, r4, #48	; 0x30
   19d38:	add	r5, r6, #1
   19d3c:	cmp	r5, lr
   19d40:	bcs	19d5c <__assert_fail@plt+0x8bd0>
   19d44:	ldr	r3, [sp, #56]	; 0x38
   19d48:	mov	r6, r5
   19d4c:	b	19c84 <__assert_fail@plt+0x8af8>
   19d50:	str	ip, [sp, #36]	; 0x24
   19d54:	ldr	r5, [sp, #84]	; 0x54
   19d58:	b	19788 <__assert_fail@plt+0x85fc>
   19d5c:	str	ip, [sp, #36]	; 0x24
   19d60:	ldr	r5, [sp, #84]	; 0x54
   19d64:	mov	r3, r0
   19d68:	b	19788 <__assert_fail@plt+0x85fc>
   19d6c:	mov	r6, r5
   19d70:	b	19c84 <__assert_fail@plt+0x8af8>
   19d74:	ldr	r3, [sp, #44]	; 0x2c
   19d78:	b	193dc <__assert_fail@plt+0x8250>
   19d7c:	mov	r5, #0
   19d80:	mov	r3, r5
   19d84:	mov	r4, #63	; 0x3f
   19d88:	b	193dc <__assert_fail@plt+0x8250>
   19d8c:	mov	r5, #0
   19d90:	mov	r3, r5
   19d94:	mov	r4, #63	; 0x3f
   19d98:	b	193dc <__assert_fail@plt+0x8250>
   19d9c:	mov	r5, #0
   19da0:	mov	r3, r5
   19da4:	b	193dc <__assert_fail@plt+0x8250>
   19da8:	mov	r5, #0
   19dac:	mov	r3, r5
   19db0:	b	193dc <__assert_fail@plt+0x8250>
   19db4:	ldr	r5, [sp, #44]	; 0x2c
   19db8:	ldr	r3, [sp, #32]
   19dbc:	b	193dc <__assert_fail@plt+0x8250>
   19dc0:	ldr	r5, [sp, #44]	; 0x2c
   19dc4:	mov	r3, #0
   19dc8:	str	r3, [sp, #44]	; 0x2c
   19dcc:	b	193dc <__assert_fail@plt+0x8250>
   19dd0:	mov	r4, r3
   19dd4:	mov	r5, #0
   19dd8:	b	19434 <__assert_fail@plt+0x82a8>
   19ddc:	mov	r5, #0
   19de0:	mov	r4, #97	; 0x61
   19de4:	b	19434 <__assert_fail@plt+0x82a8>
   19de8:	mov	r5, #0
   19dec:	mov	r3, r5
   19df0:	mov	r4, #92	; 0x5c
   19df4:	b	19788 <__assert_fail@plt+0x85fc>
   19df8:	ldr	r3, [sp, #48]	; 0x30
   19dfc:	ldrb	r5, [r3, r6]
   19e00:	adds	r5, r5, #0
   19e04:	movne	r5, #1
   19e08:	b	194d8 <__assert_fail@plt+0x834c>
   19e0c:	cmp	sl, #2
   19e10:	movne	r3, #0
   19e14:	moveq	r3, #1
   19e18:	ldr	r1, [sp, #32]
   19e1c:	cmp	fp, #0
   19e20:	andeq	r2, r3, r1
   19e24:	movne	r2, #0
   19e28:	cmp	r2, #0
   19e2c:	bne	19f4c <__assert_fail@plt+0x8dc0>
   19e30:	eor	r2, r1, #1
   19e34:	uxtb	r2, r2
   19e38:	and	r3, r3, r2
   19e3c:	ldr	r1, [sp, #68]	; 0x44
   19e40:	ands	r3, r1, r3
   19e44:	beq	19ed8 <__assert_fail@plt+0x8d4c>
   19e48:	ldr	r2, [sp, #40]	; 0x28
   19e4c:	cmp	r2, #0
   19e50:	bne	19e88 <__assert_fail@plt+0x8cfc>
   19e54:	ldr	r2, [sp, #72]	; 0x48
   19e58:	adds	r2, r2, #0
   19e5c:	movne	r2, #1
   19e60:	cmp	r9, #0
   19e64:	movne	r2, #0
   19e68:	str	r2, [sp, #68]	; 0x44
   19e6c:	mov	sl, #2
   19e70:	ldr	r1, [sp, #40]	; 0x28
   19e74:	str	r1, [sp, #32]
   19e78:	cmp	r2, #0
   19e7c:	beq	19ecc <__assert_fail@plt+0x8d40>
   19e80:	ldr	r9, [sp, #72]	; 0x48
   19e84:	b	18be0 <__assert_fail@plt+0x7a54>
   19e88:	ldr	r3, [sp, #168]	; 0xa8
   19e8c:	str	r3, [sp, #16]
   19e90:	ldr	r3, [sp, #164]	; 0xa4
   19e94:	str	r3, [sp, #12]
   19e98:	ldr	r3, [sp, #160]	; 0xa0
   19e9c:	str	r3, [sp, #8]
   19ea0:	ldr	r3, [sp, #156]	; 0x9c
   19ea4:	str	r3, [sp, #4]
   19ea8:	mov	r3, #5
   19eac:	str	r3, [sp]
   19eb0:	ldr	r3, [sp, #24]
   19eb4:	ldr	r2, [sp, #48]	; 0x30
   19eb8:	ldr	r1, [sp, #72]	; 0x48
   19ebc:	ldr	r0, [sp, #64]	; 0x40
   19ec0:	bl	18b68 <__assert_fail@plt+0x79dc>
   19ec4:	mov	fp, r0
   19ec8:	b	19fe8 <__assert_fail@plt+0x8e5c>
   19ecc:	mov	r8, r9
   19ed0:	mov	r2, r3
   19ed4:	b	19edc <__assert_fail@plt+0x8d50>
   19ed8:	mov	r8, r9
   19edc:	ldr	r3, [sp, #60]	; 0x3c
   19ee0:	cmp	r3, #0
   19ee4:	moveq	r2, #0
   19ee8:	andne	r2, r2, #1
   19eec:	cmp	r2, #0
   19ef0:	beq	19f20 <__assert_fail@plt+0x8d94>
   19ef4:	mov	r2, r3
   19ef8:	ldrb	r3, [r3]
   19efc:	cmp	r3, #0
   19f00:	beq	19f20 <__assert_fail@plt+0x8d94>
   19f04:	ldr	r1, [sp, #64]	; 0x40
   19f08:	cmp	r8, fp
   19f0c:	strbhi	r3, [r1, fp]
   19f10:	add	fp, fp, #1
   19f14:	ldrb	r3, [r2, #1]!
   19f18:	cmp	r3, #0
   19f1c:	bne	19f08 <__assert_fail@plt+0x8d7c>
   19f20:	cmp	r8, fp
   19f24:	bls	19fe8 <__assert_fail@plt+0x8e5c>
   19f28:	mov	r3, #0
   19f2c:	ldr	r2, [sp, #64]	; 0x40
   19f30:	strb	r3, [r2, fp]
   19f34:	b	19fe8 <__assert_fail@plt+0x8e5c>
   19f38:	mov	r8, r9
   19f3c:	mov	r7, sl
   19f40:	ldr	r3, [sp, #32]
   19f44:	str	r3, [sp, #28]
   19f48:	b	19f90 <__assert_fail@plt+0x8e04>
   19f4c:	mov	r8, r9
   19f50:	mov	r7, #2
   19f54:	b	19f90 <__assert_fail@plt+0x8e04>
   19f58:	mov	r8, r9
   19f5c:	mov	r7, sl
   19f60:	b	19f90 <__assert_fail@plt+0x8e04>
   19f64:	mov	r8, r9
   19f68:	mov	r7, sl
   19f6c:	b	19f90 <__assert_fail@plt+0x8e04>
   19f70:	mov	r8, r9
   19f74:	mov	r7, sl
   19f78:	b	19f90 <__assert_fail@plt+0x8e04>
   19f7c:	mov	r8, r9
   19f80:	mov	r7, sl
   19f84:	b	19f90 <__assert_fail@plt+0x8e04>
   19f88:	mov	r8, r9
   19f8c:	mov	r7, sl
   19f90:	ldr	r3, [sp, #28]
   19f94:	cmp	r7, #2
   19f98:	movne	r3, #0
   19f9c:	andeq	r3, r3, #1
   19fa0:	cmp	r3, #0
   19fa4:	movne	r7, #4
   19fa8:	ldr	r3, [sp, #168]	; 0xa8
   19fac:	str	r3, [sp, #16]
   19fb0:	ldr	r3, [sp, #164]	; 0xa4
   19fb4:	str	r3, [sp, #12]
   19fb8:	mov	r3, #0
   19fbc:	str	r3, [sp, #8]
   19fc0:	ldr	r3, [sp, #156]	; 0x9c
   19fc4:	bic	r3, r3, #2
   19fc8:	str	r3, [sp, #4]
   19fcc:	str	r7, [sp]
   19fd0:	ldr	r3, [sp, #24]
   19fd4:	ldr	r2, [sp, #48]	; 0x30
   19fd8:	mov	r1, r8
   19fdc:	ldr	r0, [sp, #64]	; 0x40
   19fe0:	bl	18b68 <__assert_fail@plt+0x79dc>
   19fe4:	mov	fp, r0
   19fe8:	mov	r0, fp
   19fec:	add	sp, sp, #116	; 0x74
   19ff0:	ldrd	r4, [sp]
   19ff4:	ldrd	r6, [sp, #8]
   19ff8:	ldrd	r8, [sp, #16]
   19ffc:	ldrd	sl, [sp, #24]
   1a000:	add	sp, sp, #32
   1a004:	pop	{pc}		; (ldr pc, [sp], #4)
   1a008:	mov	r8, r9
   1a00c:	mov	r7, sl
   1a010:	b	19fa8 <__assert_fail@plt+0x8e1c>
   1a014:	add	fp, fp, #4
   1a018:	str	r3, [sp, #36]	; 0x24
   1a01c:	mov	r5, #0
   1a020:	mov	r4, #48	; 0x30
   1a024:	b	193dc <__assert_fail@plt+0x8250>
   1a028:	mov	r3, #1
   1a02c:	str	r3, [sp, #32]
   1a030:	str	r3, [sp, #28]
   1a034:	str	r3, [sp, #52]	; 0x34
   1a038:	movw	r3, #54860	; 0xd64c
   1a03c:	movt	r3, #1
   1a040:	str	r3, [sp, #60]	; 0x3c
   1a044:	mov	fp, #0
   1a048:	mov	sl, #5
   1a04c:	b	18c40 <__assert_fail@plt+0x7ab4>
   1a050:	ldr	r3, [sp, #48]	; 0x30
   1a054:	ldrb	r4, [r3, r6]
   1a058:	cmp	r4, #126	; 0x7e
   1a05c:	ldrls	pc, [pc, r4, lsl #2]
   1a060:	b	1994c <__assert_fail@plt+0x87c0>
   1a064:	ldrdeq	r9, [r1], -r4
   1a068:	andeq	r9, r1, ip, asr #18
   1a06c:	andeq	r9, r1, ip, asr #18
   1a070:	andeq	r9, r1, ip, asr #18
   1a074:	andeq	r9, r1, ip, asr #18
   1a078:	andeq	r9, r1, ip, asr #18
   1a07c:	andeq	r9, r1, ip, asr #18
   1a080:	ldrdeq	r9, [r1], -ip
   1a084:	andeq	r9, r1, r8, ror r3
   1a088:	andeq	r9, r1, ip, lsl r7
   1a08c:	ldrdeq	r9, [r1], -r8
   1a090:	andeq	r9, r1, r0, lsr r7
   1a094:	andeq	r9, r1, ip, lsl #7
   1a098:	andeq	r9, r1, r0, lsr #7
   1a09c:	andeq	r9, r1, ip, asr #18
   1a0a0:	andeq	r9, r1, ip, asr #18
   1a0a4:	andeq	r9, r1, ip, asr #18
   1a0a8:	andeq	r9, r1, ip, asr #18
   1a0ac:	andeq	r9, r1, ip, asr #18
   1a0b0:	andeq	r9, r1, ip, asr #18
   1a0b4:	andeq	r9, r1, ip, asr #18
   1a0b8:	andeq	r9, r1, ip, asr #18
   1a0bc:	andeq	r9, r1, ip, asr #18
   1a0c0:	andeq	r9, r1, ip, asr #18
   1a0c4:	andeq	r9, r1, ip, asr #18
   1a0c8:	andeq	r9, r1, ip, asr #18
   1a0cc:	andeq	r9, r1, ip, asr #18
   1a0d0:	andeq	r9, r1, ip, asr #18
   1a0d4:	andeq	r9, r1, ip, asr #18
   1a0d8:	andeq	r9, r1, ip, asr #18
   1a0dc:	andeq	r9, r1, ip, asr #18
   1a0e0:	andeq	r9, r1, ip, asr #18
   1a0e4:	andeq	r9, r1, r0, ror #16
   1a0e8:	muleq	r1, ip, r8
   1a0ec:	muleq	r1, ip, r8
   1a0f0:	andeq	r9, r1, r4, asr r8
   1a0f4:	muleq	r1, ip, r8
   1a0f8:	andeq	r9, r1, r0, asr #27
   1a0fc:	muleq	r1, ip, r8
   1a100:	andeq	r9, r1, ip, lsr #17
   1a104:	muleq	r1, ip, r8
   1a108:	muleq	r1, ip, r8
   1a10c:	muleq	r1, ip, r8
   1a110:	andeq	r9, r1, r0, asr #27
   1a114:	andeq	r9, r1, r0, asr #27
   1a118:	andeq	r9, r1, r0, asr #27
   1a11c:	andeq	r9, r1, r0, asr #27
   1a120:	andeq	r9, r1, r0, asr #27
   1a124:	andeq	r9, r1, r0, asr #27
   1a128:	andeq	r9, r1, r0, asr #27
   1a12c:	andeq	r9, r1, r0, asr #27
   1a130:	andeq	r9, r1, r0, asr #27
   1a134:	andeq	r9, r1, r0, asr #27
   1a138:	andeq	r9, r1, r0, asr #27
   1a13c:	andeq	r9, r1, r0, asr #27
   1a140:	andeq	r9, r1, r0, asr #27
   1a144:	andeq	r9, r1, r0, asr #27
   1a148:	andeq	r9, r1, r0, asr #27
   1a14c:	andeq	r9, r1, r0, asr #27
   1a150:	muleq	r1, ip, r8
   1a154:	muleq	r1, ip, r8
   1a158:	muleq	r1, ip, r8
   1a15c:	muleq	r1, ip, r8
   1a160:	andeq	r9, r1, ip, lsl #4
   1a164:	andeq	r9, r1, ip, asr #18
   1a168:	andeq	r9, r1, r0, asr #27
   1a16c:	andeq	r9, r1, r0, asr #27
   1a170:	andeq	r9, r1, r0, asr #27
   1a174:	andeq	r9, r1, r0, asr #27
   1a178:	andeq	r9, r1, r0, asr #27
   1a17c:	andeq	r9, r1, r0, asr #27
   1a180:	andeq	r9, r1, r0, asr #27
   1a184:	andeq	r9, r1, r0, asr #27
   1a188:	andeq	r9, r1, r0, asr #27
   1a18c:	andeq	r9, r1, r0, asr #27
   1a190:	andeq	r9, r1, r0, asr #27
   1a194:	andeq	r9, r1, r0, asr #27
   1a198:	andeq	r9, r1, r0, asr #27
   1a19c:	andeq	r9, r1, r0, asr #27
   1a1a0:	andeq	r9, r1, r0, asr #27
   1a1a4:	andeq	r9, r1, r0, asr #27
   1a1a8:	andeq	r9, r1, r0, asr #27
   1a1ac:	andeq	r9, r1, r0, asr #27
   1a1b0:	andeq	r9, r1, r0, asr #27
   1a1b4:	andeq	r9, r1, r0, asr #27
   1a1b8:	andeq	r9, r1, r0, asr #27
   1a1bc:	andeq	r9, r1, r0, asr #27
   1a1c0:	andeq	r9, r1, r0, asr #27
   1a1c4:	andeq	r9, r1, r0, asr #27
   1a1c8:	andeq	r9, r1, r0, asr #27
   1a1cc:	andeq	r9, r1, r0, asr #27
   1a1d0:	muleq	r1, ip, r8
   1a1d4:	andeq	r9, r1, r4, asr #14
   1a1d8:	andeq	r9, r1, r0, asr #27
   1a1dc:	muleq	r1, ip, r8
   1a1e0:	andeq	r9, r1, r0, asr #27
   1a1e4:	muleq	r1, ip, r8
   1a1e8:	andeq	r9, r1, r0, asr #27
   1a1ec:	andeq	r9, r1, r0, asr #27
   1a1f0:	andeq	r9, r1, r0, asr #27
   1a1f4:	andeq	r9, r1, r0, asr #27
   1a1f8:	andeq	r9, r1, r0, asr #27
   1a1fc:	andeq	r9, r1, r0, asr #27
   1a200:	andeq	r9, r1, r0, asr #27
   1a204:	andeq	r9, r1, r0, asr #27
   1a208:	andeq	r9, r1, r0, asr #27
   1a20c:	andeq	r9, r1, r0, asr #27
   1a210:	andeq	r9, r1, r0, asr #27
   1a214:	andeq	r9, r1, r0, asr #27
   1a218:	andeq	r9, r1, r0, asr #27
   1a21c:	andeq	r9, r1, r0, asr #27
   1a220:	andeq	r9, r1, r0, asr #27
   1a224:	andeq	r9, r1, r0, asr #27
   1a228:	andeq	r9, r1, r0, asr #27
   1a22c:	andeq	r9, r1, r0, asr #27
   1a230:	andeq	r9, r1, r0, asr #27
   1a234:	andeq	r9, r1, r0, asr #27
   1a238:	andeq	r9, r1, r0, asr #27
   1a23c:	andeq	r9, r1, r0, asr #27
   1a240:	andeq	r9, r1, r0, asr #27
   1a244:	andeq	r9, r1, r0, asr #27
   1a248:	andeq	r9, r1, r0, asr #27
   1a24c:	andeq	r9, r1, r0, asr #27
   1a250:	andeq	r9, r1, r4, lsl #16
   1a254:	muleq	r1, ip, r8
   1a258:	andeq	r9, r1, r4, lsl #16
   1a25c:	andeq	r9, r1, r4, asr r8
   1a260:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a264:	strd	r6, [sp, #8]
   1a268:	strd	r8, [sp, #16]
   1a26c:	strd	sl, [sp, #24]
   1a270:	str	lr, [sp, #32]
   1a274:	sub	sp, sp, #52	; 0x34
   1a278:	mov	r5, r0
   1a27c:	str	r1, [sp, #24]
   1a280:	str	r2, [sp, #28]
   1a284:	mov	r4, r3
   1a288:	bl	11090 <__errno_location@plt>
   1a28c:	str	r0, [sp, #32]
   1a290:	ldr	r3, [r0]
   1a294:	str	r3, [sp, #36]	; 0x24
   1a298:	movw	r3, #57636	; 0xe124
   1a29c:	movt	r3, #2
   1a2a0:	ldr	r6, [r3]
   1a2a4:	cmn	r5, #-2147483647	; 0x80000001
   1a2a8:	movne	r3, #0
   1a2ac:	moveq	r3, #1
   1a2b0:	orrs	r3, r3, r5, lsr #31
   1a2b4:	bne	1a418 <__assert_fail@plt+0x928c>
   1a2b8:	movw	r3, #57636	; 0xe124
   1a2bc:	movt	r3, #2
   1a2c0:	ldr	r2, [r3, #4]
   1a2c4:	cmp	r2, r5
   1a2c8:	bgt	1a338 <__assert_fail@plt+0x91ac>
   1a2cc:	str	r2, [sp, #44]	; 0x2c
   1a2d0:	add	r3, r3, #8
   1a2d4:	cmp	r6, r3
   1a2d8:	beq	1a41c <__assert_fail@plt+0x9290>
   1a2dc:	sub	r2, r5, r2
   1a2e0:	mov	r3, #8
   1a2e4:	str	r3, [sp]
   1a2e8:	mvn	r3, #-2147483648	; 0x80000000
   1a2ec:	add	r2, r2, #1
   1a2f0:	add	r1, sp, #44	; 0x2c
   1a2f4:	mov	r0, r6
   1a2f8:	bl	1b440 <__assert_fail@plt+0xa2b4>
   1a2fc:	mov	r6, r0
   1a300:	movw	r3, #57636	; 0xe124
   1a304:	movt	r3, #2
   1a308:	str	r0, [r3]
   1a30c:	movw	r7, #57636	; 0xe124
   1a310:	movt	r7, #2
   1a314:	ldr	r0, [r7, #4]
   1a318:	ldr	r2, [sp, #44]	; 0x2c
   1a31c:	sub	r2, r2, r0
   1a320:	lsl	r2, r2, #3
   1a324:	mov	r1, #0
   1a328:	add	r0, r6, r0, lsl #3
   1a32c:	bl	110b4 <memset@plt>
   1a330:	ldr	r3, [sp, #44]	; 0x2c
   1a334:	str	r3, [r7, #4]
   1a338:	add	fp, r6, r5, lsl #3
   1a33c:	ldr	r8, [r6, r5, lsl #3]
   1a340:	ldr	r7, [fp, #4]
   1a344:	ldr	r3, [r4, #4]
   1a348:	orr	r9, r3, #1
   1a34c:	add	sl, r4, #8
   1a350:	ldr	r3, [r4, #44]	; 0x2c
   1a354:	str	r3, [sp, #16]
   1a358:	ldr	r3, [r4, #40]	; 0x28
   1a35c:	str	r3, [sp, #12]
   1a360:	str	sl, [sp, #8]
   1a364:	str	r9, [sp, #4]
   1a368:	ldr	r3, [r4]
   1a36c:	str	r3, [sp]
   1a370:	ldr	r3, [sp, #28]
   1a374:	ldr	r2, [sp, #24]
   1a378:	mov	r1, r8
   1a37c:	mov	r0, r7
   1a380:	bl	18b68 <__assert_fail@plt+0x79dc>
   1a384:	cmp	r8, r0
   1a388:	bhi	1a3ec <__assert_fail@plt+0x9260>
   1a38c:	add	r8, r0, #1
   1a390:	str	r8, [r6, r5, lsl #3]
   1a394:	movw	r3, #57784	; 0xe1b8
   1a398:	movt	r3, #2
   1a39c:	cmp	r7, r3
   1a3a0:	beq	1a3ac <__assert_fail@plt+0x9220>
   1a3a4:	mov	r0, r7
   1a3a8:	bl	187e4 <__assert_fail@plt+0x7658>
   1a3ac:	mov	r0, r8
   1a3b0:	bl	1b23c <__assert_fail@plt+0xa0b0>
   1a3b4:	mov	r7, r0
   1a3b8:	str	r0, [fp, #4]
   1a3bc:	ldr	r3, [r4, #44]	; 0x2c
   1a3c0:	str	r3, [sp, #16]
   1a3c4:	ldr	r3, [r4, #40]	; 0x28
   1a3c8:	str	r3, [sp, #12]
   1a3cc:	str	sl, [sp, #8]
   1a3d0:	str	r9, [sp, #4]
   1a3d4:	ldr	r3, [r4]
   1a3d8:	str	r3, [sp]
   1a3dc:	ldr	r3, [sp, #28]
   1a3e0:	ldr	r2, [sp, #24]
   1a3e4:	mov	r1, r8
   1a3e8:	bl	18b68 <__assert_fail@plt+0x79dc>
   1a3ec:	ldr	r3, [sp, #32]
   1a3f0:	ldr	r2, [sp, #36]	; 0x24
   1a3f4:	str	r2, [r3]
   1a3f8:	mov	r0, r7
   1a3fc:	add	sp, sp, #52	; 0x34
   1a400:	ldrd	r4, [sp]
   1a404:	ldrd	r6, [sp, #8]
   1a408:	ldrd	r8, [sp, #16]
   1a40c:	ldrd	sl, [sp, #24]
   1a410:	add	sp, sp, #32
   1a414:	pop	{pc}		; (ldr pc, [sp], #4)
   1a418:	bl	11168 <abort@plt>
   1a41c:	sub	r2, r5, r2
   1a420:	mov	r3, #8
   1a424:	str	r3, [sp]
   1a428:	mvn	r3, #-2147483648	; 0x80000000
   1a42c:	add	r2, r2, #1
   1a430:	add	r1, sp, #44	; 0x2c
   1a434:	mov	r0, #0
   1a438:	bl	1b440 <__assert_fail@plt+0xa2b4>
   1a43c:	mov	r6, r0
   1a440:	movw	r3, #57636	; 0xe124
   1a444:	movt	r3, #2
   1a448:	str	r0, [r3]
   1a44c:	ldrd	r2, [r3, #8]
   1a450:	strd	r2, [r0]
   1a454:	b	1a30c <__assert_fail@plt+0x9180>
   1a458:	strd	r4, [sp, #-16]!
   1a45c:	str	r6, [sp, #8]
   1a460:	str	lr, [sp, #12]
   1a464:	mov	r4, r0
   1a468:	bl	11090 <__errno_location@plt>
   1a46c:	mov	r5, r0
   1a470:	ldr	r6, [r0]
   1a474:	cmp	r4, #0
   1a478:	ldr	r3, [pc, #32]	; 1a4a0 <__assert_fail@plt+0x9314>
   1a47c:	moveq	r4, r3
   1a480:	mov	r1, #48	; 0x30
   1a484:	mov	r0, r4
   1a488:	bl	1b5b0 <__assert_fail@plt+0xa424>
   1a48c:	str	r6, [r5]
   1a490:	ldrd	r4, [sp]
   1a494:	ldr	r6, [sp, #8]
   1a498:	add	sp, sp, #12
   1a49c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4a0:			; <UNDEFINED> instruction: 0x0002e2b8
   1a4a4:	subs	r3, r0, #0
   1a4a8:	ldr	r2, [pc, #8]	; 1a4b8 <__assert_fail@plt+0x932c>
   1a4ac:	moveq	r3, r2
   1a4b0:	ldr	r0, [r3]
   1a4b4:	bx	lr
   1a4b8:			; <UNDEFINED> instruction: 0x0002e2b8
   1a4bc:	subs	r3, r0, #0
   1a4c0:	ldr	r2, [pc, #8]	; 1a4d0 <__assert_fail@plt+0x9344>
   1a4c4:	moveq	r3, r2
   1a4c8:	str	r1, [r3]
   1a4cc:	bx	lr
   1a4d0:			; <UNDEFINED> instruction: 0x0002e2b8
   1a4d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a4d8:	subs	r3, r0, #0
   1a4dc:	ldr	r0, [pc, #44]	; 1a510 <__assert_fail@plt+0x9384>
   1a4e0:	moveq	r3, r0
   1a4e4:	add	r3, r3, #8
   1a4e8:	lsr	lr, r1, #5
   1a4ec:	and	r1, r1, #31
   1a4f0:	ldr	ip, [r3, lr, lsl #2]
   1a4f4:	lsr	r0, ip, r1
   1a4f8:	eor	r2, r2, r0
   1a4fc:	and	r2, r2, #1
   1a500:	eor	r1, ip, r2, lsl r1
   1a504:	str	r1, [r3, lr, lsl #2]
   1a508:	and	r0, r0, #1
   1a50c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a510:			; <UNDEFINED> instruction: 0x0002e2b8
   1a514:	subs	r3, r0, #0
   1a518:	ldr	r2, [pc, #12]	; 1a52c <__assert_fail@plt+0x93a0>
   1a51c:	moveq	r3, r2
   1a520:	ldr	r0, [r3, #4]
   1a524:	str	r1, [r3, #4]
   1a528:	bx	lr
   1a52c:			; <UNDEFINED> instruction: 0x0002e2b8
   1a530:	subs	r3, r0, #0
   1a534:	ldr	r0, [pc, #44]	; 1a568 <__assert_fail@plt+0x93dc>
   1a538:	moveq	r3, r0
   1a53c:	mov	r0, #10
   1a540:	str	r0, [r3]
   1a544:	cmp	r2, #0
   1a548:	cmpne	r1, #0
   1a54c:	beq	1a55c <__assert_fail@plt+0x93d0>
   1a550:	str	r1, [r3, #40]	; 0x28
   1a554:	str	r2, [r3, #44]	; 0x2c
   1a558:	bx	lr
   1a55c:	str	r4, [sp, #-8]!
   1a560:	str	lr, [sp, #4]
   1a564:	bl	11168 <abort@plt>
   1a568:			; <UNDEFINED> instruction: 0x0002e2b8
   1a56c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a570:	strd	r6, [sp, #8]
   1a574:	strd	r8, [sp, #16]
   1a578:	str	sl, [sp, #24]
   1a57c:	str	lr, [sp, #28]
   1a580:	sub	sp, sp, #24
   1a584:	mov	r7, r0
   1a588:	mov	r8, r1
   1a58c:	mov	r9, r2
   1a590:	mov	sl, r3
   1a594:	ldr	r4, [sp, #56]	; 0x38
   1a598:	cmp	r4, #0
   1a59c:	ldr	r3, [pc, #104]	; 1a60c <__assert_fail@plt+0x9480>
   1a5a0:	moveq	r4, r3
   1a5a4:	bl	11090 <__errno_location@plt>
   1a5a8:	mov	r5, r0
   1a5ac:	ldr	r6, [r0]
   1a5b0:	ldr	r3, [r4, #44]	; 0x2c
   1a5b4:	str	r3, [sp, #16]
   1a5b8:	ldr	r3, [r4, #40]	; 0x28
   1a5bc:	str	r3, [sp, #12]
   1a5c0:	add	r3, r4, #8
   1a5c4:	str	r3, [sp, #8]
   1a5c8:	ldr	r3, [r4, #4]
   1a5cc:	str	r3, [sp, #4]
   1a5d0:	ldr	r3, [r4]
   1a5d4:	str	r3, [sp]
   1a5d8:	mov	r3, sl
   1a5dc:	mov	r2, r9
   1a5e0:	mov	r1, r8
   1a5e4:	mov	r0, r7
   1a5e8:	bl	18b68 <__assert_fail@plt+0x79dc>
   1a5ec:	str	r6, [r5]
   1a5f0:	add	sp, sp, #24
   1a5f4:	ldrd	r4, [sp]
   1a5f8:	ldrd	r6, [sp, #8]
   1a5fc:	ldrd	r8, [sp, #16]
   1a600:	ldr	sl, [sp, #24]
   1a604:	add	sp, sp, #28
   1a608:	pop	{pc}		; (ldr pc, [sp], #4)
   1a60c:			; <UNDEFINED> instruction: 0x0002e2b8
   1a610:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a614:	strd	r6, [sp, #8]
   1a618:	strd	r8, [sp, #16]
   1a61c:	strd	sl, [sp, #24]
   1a620:	str	lr, [sp, #32]
   1a624:	sub	sp, sp, #44	; 0x2c
   1a628:	mov	r8, r0
   1a62c:	mov	sl, r1
   1a630:	mov	r6, r2
   1a634:	subs	r4, r3, #0
   1a638:	ldr	r3, [pc, #200]	; 1a708 <__assert_fail@plt+0x957c>
   1a63c:	moveq	r4, r3
   1a640:	bl	11090 <__errno_location@plt>
   1a644:	mov	r7, r0
   1a648:	ldr	fp, [r0]
   1a64c:	ldr	r5, [r4, #4]
   1a650:	cmp	r6, #0
   1a654:	orreq	r5, r5, #1
   1a658:	add	r9, r4, #8
   1a65c:	ldr	r3, [r4, #44]	; 0x2c
   1a660:	str	r3, [sp, #16]
   1a664:	ldr	r3, [r4, #40]	; 0x28
   1a668:	str	r3, [sp, #12]
   1a66c:	str	r9, [sp, #8]
   1a670:	str	r5, [sp, #4]
   1a674:	ldr	r3, [r4]
   1a678:	str	r3, [sp]
   1a67c:	str	sl, [sp, #36]	; 0x24
   1a680:	mov	r3, sl
   1a684:	str	r8, [sp, #32]
   1a688:	mov	r2, r8
   1a68c:	mov	r1, #0
   1a690:	mov	r0, r1
   1a694:	bl	18b68 <__assert_fail@plt+0x79dc>
   1a698:	mov	sl, r0
   1a69c:	add	r8, r0, #1
   1a6a0:	mov	r0, r8
   1a6a4:	bl	1b23c <__assert_fail@plt+0xa0b0>
   1a6a8:	str	r0, [sp, #28]
   1a6ac:	ldr	r3, [r4, #44]	; 0x2c
   1a6b0:	str	r3, [sp, #16]
   1a6b4:	ldr	r3, [r4, #40]	; 0x28
   1a6b8:	str	r3, [sp, #12]
   1a6bc:	str	r9, [sp, #8]
   1a6c0:	str	r5, [sp, #4]
   1a6c4:	ldr	r3, [r4]
   1a6c8:	str	r3, [sp]
   1a6cc:	ldr	r3, [sp, #36]	; 0x24
   1a6d0:	ldr	r2, [sp, #32]
   1a6d4:	mov	r1, r8
   1a6d8:	bl	18b68 <__assert_fail@plt+0x79dc>
   1a6dc:	str	fp, [r7]
   1a6e0:	cmp	r6, #0
   1a6e4:	strne	sl, [r6]
   1a6e8:	ldr	r0, [sp, #28]
   1a6ec:	add	sp, sp, #44	; 0x2c
   1a6f0:	ldrd	r4, [sp]
   1a6f4:	ldrd	r6, [sp, #8]
   1a6f8:	ldrd	r8, [sp, #16]
   1a6fc:	ldrd	sl, [sp, #24]
   1a700:	add	sp, sp, #32
   1a704:	pop	{pc}		; (ldr pc, [sp], #4)
   1a708:			; <UNDEFINED> instruction: 0x0002e2b8
   1a70c:	str	r4, [sp, #-8]!
   1a710:	str	lr, [sp, #4]
   1a714:	mov	r3, r2
   1a718:	mov	r2, #0
   1a71c:	bl	1a610 <__assert_fail@plt+0x9484>
   1a720:	ldr	r4, [sp]
   1a724:	add	sp, sp, #4
   1a728:	pop	{pc}		; (ldr pc, [sp], #4)
   1a72c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a730:	strd	r6, [sp, #8]
   1a734:	str	r8, [sp, #16]
   1a738:	str	lr, [sp, #20]
   1a73c:	movw	r3, #57636	; 0xe124
   1a740:	movt	r3, #2
   1a744:	ldr	r7, [r3]
   1a748:	ldr	r3, [r3, #4]
   1a74c:	cmp	r3, #1
   1a750:	ble	1a77c <__assert_fail@plt+0x95f0>
   1a754:	mov	r4, #1
   1a758:	add	r6, r7, #4
   1a75c:	movw	r5, #57636	; 0xe124
   1a760:	movt	r5, #2
   1a764:	ldr	r0, [r6, r4, lsl #3]
   1a768:	bl	187e4 <__assert_fail@plt+0x7658>
   1a76c:	add	r4, r4, #1
   1a770:	ldr	r3, [r5, #4]
   1a774:	cmp	r3, r4
   1a778:	bgt	1a764 <__assert_fail@plt+0x95d8>
   1a77c:	ldr	r0, [r7, #4]
   1a780:	movw	r3, #57784	; 0xe1b8
   1a784:	movt	r3, #2
   1a788:	cmp	r0, r3
   1a78c:	beq	1a7b0 <__assert_fail@plt+0x9624>
   1a790:	bl	187e4 <__assert_fail@plt+0x7658>
   1a794:	movw	r3, #57636	; 0xe124
   1a798:	movt	r3, #2
   1a79c:	mov	r2, #256	; 0x100
   1a7a0:	str	r2, [r3, #8]
   1a7a4:	movw	r2, #57784	; 0xe1b8
   1a7a8:	movt	r2, #2
   1a7ac:	str	r2, [r3, #12]
   1a7b0:	ldr	r3, [pc, #64]	; 1a7f8 <__assert_fail@plt+0x966c>
   1a7b4:	cmp	r7, r3
   1a7b8:	beq	1a7d4 <__assert_fail@plt+0x9648>
   1a7bc:	mov	r0, r7
   1a7c0:	bl	187e4 <__assert_fail@plt+0x7658>
   1a7c4:	movw	r3, #57636	; 0xe124
   1a7c8:	movt	r3, #2
   1a7cc:	add	r2, r3, #8
   1a7d0:	str	r2, [r3]
   1a7d4:	movw	r3, #57636	; 0xe124
   1a7d8:	movt	r3, #2
   1a7dc:	mov	r2, #1
   1a7e0:	str	r2, [r3, #4]
   1a7e4:	ldrd	r4, [sp]
   1a7e8:	ldrd	r6, [sp, #8]
   1a7ec:	ldr	r8, [sp, #16]
   1a7f0:	add	sp, sp, #20
   1a7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7f8:	andeq	lr, r2, ip, lsr #2
   1a7fc:	str	r4, [sp, #-8]!
   1a800:	str	lr, [sp, #4]
   1a804:	ldr	r3, [pc, #16]	; 1a81c <__assert_fail@plt+0x9690>
   1a808:	mvn	r2, #0
   1a80c:	bl	1a260 <__assert_fail@plt+0x90d4>
   1a810:	ldr	r4, [sp]
   1a814:	add	sp, sp, #4
   1a818:	pop	{pc}		; (ldr pc, [sp], #4)
   1a81c:			; <UNDEFINED> instruction: 0x0002e2b8
   1a820:	str	r4, [sp, #-8]!
   1a824:	str	lr, [sp, #4]
   1a828:	ldr	r3, [pc, #12]	; 1a83c <__assert_fail@plt+0x96b0>
   1a82c:	bl	1a260 <__assert_fail@plt+0x90d4>
   1a830:	ldr	r4, [sp]
   1a834:	add	sp, sp, #4
   1a838:	pop	{pc}		; (ldr pc, [sp], #4)
   1a83c:			; <UNDEFINED> instruction: 0x0002e2b8
   1a840:	str	r4, [sp, #-8]!
   1a844:	str	lr, [sp, #4]
   1a848:	mov	r1, r0
   1a84c:	mov	r0, #0
   1a850:	bl	1a7fc <__assert_fail@plt+0x9670>
   1a854:	ldr	r4, [sp]
   1a858:	add	sp, sp, #4
   1a85c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a860:	str	r4, [sp, #-8]!
   1a864:	str	lr, [sp, #4]
   1a868:	mov	r2, r1
   1a86c:	mov	r1, r0
   1a870:	mov	r0, #0
   1a874:	bl	1a820 <__assert_fail@plt+0x9694>
   1a878:	ldr	r4, [sp]
   1a87c:	add	sp, sp, #4
   1a880:	pop	{pc}		; (ldr pc, [sp], #4)
   1a884:	strd	r4, [sp, #-12]!
   1a888:	str	lr, [sp, #8]
   1a88c:	sub	sp, sp, #52	; 0x34
   1a890:	mov	r4, r0
   1a894:	mov	r5, r2
   1a898:	mov	r0, sp
   1a89c:	bl	189d4 <__assert_fail@plt+0x7848>
   1a8a0:	mov	r3, sp
   1a8a4:	mvn	r2, #0
   1a8a8:	mov	r1, r5
   1a8ac:	mov	r0, r4
   1a8b0:	bl	1a260 <__assert_fail@plt+0x90d4>
   1a8b4:	add	sp, sp, #52	; 0x34
   1a8b8:	ldrd	r4, [sp]
   1a8bc:	add	sp, sp, #8
   1a8c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8c4:	strd	r4, [sp, #-16]!
   1a8c8:	str	r6, [sp, #8]
   1a8cc:	str	lr, [sp, #12]
   1a8d0:	sub	sp, sp, #48	; 0x30
   1a8d4:	mov	r4, r0
   1a8d8:	mov	r5, r2
   1a8dc:	mov	r6, r3
   1a8e0:	mov	r0, sp
   1a8e4:	bl	189d4 <__assert_fail@plt+0x7848>
   1a8e8:	mov	r3, sp
   1a8ec:	mov	r2, r6
   1a8f0:	mov	r1, r5
   1a8f4:	mov	r0, r4
   1a8f8:	bl	1a260 <__assert_fail@plt+0x90d4>
   1a8fc:	add	sp, sp, #48	; 0x30
   1a900:	ldrd	r4, [sp]
   1a904:	ldr	r6, [sp, #8]
   1a908:	add	sp, sp, #12
   1a90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a910:	str	r4, [sp, #-8]!
   1a914:	str	lr, [sp, #4]
   1a918:	mov	r2, r1
   1a91c:	mov	r1, r0
   1a920:	mov	r0, #0
   1a924:	bl	1a884 <__assert_fail@plt+0x96f8>
   1a928:	ldr	r4, [sp]
   1a92c:	add	sp, sp, #4
   1a930:	pop	{pc}		; (ldr pc, [sp], #4)
   1a934:	str	r4, [sp, #-8]!
   1a938:	str	lr, [sp, #4]
   1a93c:	mov	r3, r2
   1a940:	mov	r2, r1
   1a944:	mov	r1, r0
   1a948:	mov	r0, #0
   1a94c:	bl	1a8c4 <__assert_fail@plt+0x9738>
   1a950:	ldr	r4, [sp]
   1a954:	add	sp, sp, #4
   1a958:	pop	{pc}		; (ldr pc, [sp], #4)
   1a95c:	strd	r4, [sp, #-12]!
   1a960:	str	lr, [sp, #8]
   1a964:	sub	sp, sp, #52	; 0x34
   1a968:	mov	r4, r0
   1a96c:	mov	r5, r1
   1a970:	mov	r1, r2
   1a974:	ldr	r0, [pc, #92]	; 1a9d8 <__assert_fail@plt+0x984c>
   1a978:	ldrd	r2, [r0]
   1a97c:	strd	r2, [sp]
   1a980:	ldrd	r2, [r0, #8]
   1a984:	strd	r2, [sp, #8]
   1a988:	ldrd	r2, [r0, #16]
   1a98c:	strd	r2, [sp, #16]
   1a990:	ldrd	r2, [r0, #24]
   1a994:	strd	r2, [sp, #24]
   1a998:	ldrd	r2, [r0, #32]
   1a99c:	strd	r2, [sp, #32]
   1a9a0:	ldrd	r2, [r0, #40]	; 0x28
   1a9a4:	strd	r2, [sp, #40]	; 0x28
   1a9a8:	mov	r2, #1
   1a9ac:	mov	r0, sp
   1a9b0:	bl	1a4d4 <__assert_fail@plt+0x9348>
   1a9b4:	mov	r3, sp
   1a9b8:	mov	r2, r5
   1a9bc:	mov	r1, r4
   1a9c0:	mov	r0, #0
   1a9c4:	bl	1a260 <__assert_fail@plt+0x90d4>
   1a9c8:	add	sp, sp, #52	; 0x34
   1a9cc:	ldrd	r4, [sp]
   1a9d0:	add	sp, sp, #8
   1a9d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9d8:			; <UNDEFINED> instruction: 0x0002e2b8
   1a9dc:	str	r4, [sp, #-8]!
   1a9e0:	str	lr, [sp, #4]
   1a9e4:	mov	r2, r1
   1a9e8:	mvn	r1, #0
   1a9ec:	bl	1a95c <__assert_fail@plt+0x97d0>
   1a9f0:	ldr	r4, [sp]
   1a9f4:	add	sp, sp, #4
   1a9f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9fc:	str	r4, [sp, #-8]!
   1aa00:	str	lr, [sp, #4]
   1aa04:	mov	r1, #58	; 0x3a
   1aa08:	bl	1a9dc <__assert_fail@plt+0x9850>
   1aa0c:	ldr	r4, [sp]
   1aa10:	add	sp, sp, #4
   1aa14:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa18:	str	r4, [sp, #-8]!
   1aa1c:	str	lr, [sp, #4]
   1aa20:	mov	r2, #58	; 0x3a
   1aa24:	bl	1a95c <__assert_fail@plt+0x97d0>
   1aa28:	ldr	r4, [sp]
   1aa2c:	add	sp, sp, #4
   1aa30:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa34:	strd	r4, [sp, #-12]!
   1aa38:	str	lr, [sp, #8]
   1aa3c:	sub	sp, sp, #100	; 0x64
   1aa40:	mov	r4, r0
   1aa44:	mov	r5, r2
   1aa48:	mov	r0, sp
   1aa4c:	bl	189d4 <__assert_fail@plt+0x7848>
   1aa50:	ldrd	r2, [sp]
   1aa54:	strd	r2, [sp, #48]	; 0x30
   1aa58:	ldrd	r2, [sp, #8]
   1aa5c:	strd	r2, [sp, #56]	; 0x38
   1aa60:	ldrd	r2, [sp, #16]
   1aa64:	strd	r2, [sp, #64]	; 0x40
   1aa68:	ldrd	r2, [sp, #24]
   1aa6c:	strd	r2, [sp, #72]	; 0x48
   1aa70:	ldrd	r2, [sp, #32]
   1aa74:	strd	r2, [sp, #80]	; 0x50
   1aa78:	ldrd	r2, [sp, #40]	; 0x28
   1aa7c:	strd	r2, [sp, #88]	; 0x58
   1aa80:	mov	r2, #1
   1aa84:	mov	r1, #58	; 0x3a
   1aa88:	add	r0, sp, #48	; 0x30
   1aa8c:	bl	1a4d4 <__assert_fail@plt+0x9348>
   1aa90:	add	r3, sp, #48	; 0x30
   1aa94:	mvn	r2, #0
   1aa98:	mov	r1, r5
   1aa9c:	mov	r0, r4
   1aaa0:	bl	1a260 <__assert_fail@plt+0x90d4>
   1aaa4:	add	sp, sp, #100	; 0x64
   1aaa8:	ldrd	r4, [sp]
   1aaac:	add	sp, sp, #8
   1aab0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aab4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1aab8:	strd	r6, [sp, #8]
   1aabc:	str	lr, [sp, #16]
   1aac0:	sub	sp, sp, #52	; 0x34
   1aac4:	mov	r4, r0
   1aac8:	mov	r5, r3
   1aacc:	ldr	r3, [pc, #92]	; 1ab30 <__assert_fail@plt+0x99a4>
   1aad0:	ldrd	r6, [r3]
   1aad4:	strd	r6, [sp]
   1aad8:	ldrd	r6, [r3, #8]
   1aadc:	strd	r6, [sp, #8]
   1aae0:	ldrd	r6, [r3, #16]
   1aae4:	strd	r6, [sp, #16]
   1aae8:	ldrd	r6, [r3, #24]
   1aaec:	strd	r6, [sp, #24]
   1aaf0:	ldrd	r6, [r3, #32]
   1aaf4:	strd	r6, [sp, #32]
   1aaf8:	ldrd	r6, [r3, #40]	; 0x28
   1aafc:	strd	r6, [sp, #40]	; 0x28
   1ab00:	mov	r0, sp
   1ab04:	bl	1a530 <__assert_fail@plt+0x93a4>
   1ab08:	mov	r3, sp
   1ab0c:	ldr	r2, [sp, #72]	; 0x48
   1ab10:	mov	r1, r5
   1ab14:	mov	r0, r4
   1ab18:	bl	1a260 <__assert_fail@plt+0x90d4>
   1ab1c:	add	sp, sp, #52	; 0x34
   1ab20:	ldrd	r4, [sp]
   1ab24:	ldrd	r6, [sp, #8]
   1ab28:	add	sp, sp, #16
   1ab2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab30:			; <UNDEFINED> instruction: 0x0002e2b8
   1ab34:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab38:	sub	sp, sp, #12
   1ab3c:	mvn	ip, #0
   1ab40:	str	ip, [sp]
   1ab44:	bl	1aab4 <__assert_fail@plt+0x9928>
   1ab48:	add	sp, sp, #12
   1ab4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab50:	str	r4, [sp, #-8]!
   1ab54:	str	lr, [sp, #4]
   1ab58:	mov	r3, r2
   1ab5c:	mov	r2, r1
   1ab60:	mov	r1, r0
   1ab64:	mov	r0, #0
   1ab68:	bl	1ab34 <__assert_fail@plt+0x99a8>
   1ab6c:	ldr	r4, [sp]
   1ab70:	add	sp, sp, #4
   1ab74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab78:	push	{lr}		; (str lr, [sp, #-4]!)
   1ab7c:	sub	sp, sp, #12
   1ab80:	str	r3, [sp]
   1ab84:	mov	r3, r2
   1ab88:	mov	r2, r1
   1ab8c:	mov	r1, r0
   1ab90:	mov	r0, #0
   1ab94:	bl	1aab4 <__assert_fail@plt+0x9928>
   1ab98:	add	sp, sp, #12
   1ab9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aba0:	str	r4, [sp, #-8]!
   1aba4:	str	lr, [sp, #4]
   1aba8:	ldr	r3, [pc, #12]	; 1abbc <__assert_fail@plt+0x9a30>
   1abac:	bl	1a260 <__assert_fail@plt+0x90d4>
   1abb0:	ldr	r4, [sp]
   1abb4:	add	sp, sp, #4
   1abb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abbc:	andeq	lr, r2, r4, lsr r1
   1abc0:	str	r4, [sp, #-8]!
   1abc4:	str	lr, [sp, #4]
   1abc8:	mov	r2, r1
   1abcc:	mov	r1, r0
   1abd0:	mov	r0, #0
   1abd4:	bl	1aba0 <__assert_fail@plt+0x9a14>
   1abd8:	ldr	r4, [sp]
   1abdc:	add	sp, sp, #4
   1abe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1abe4:	str	r4, [sp, #-8]!
   1abe8:	str	lr, [sp, #4]
   1abec:	mvn	r2, #0
   1abf0:	bl	1aba0 <__assert_fail@plt+0x9a14>
   1abf4:	ldr	r4, [sp]
   1abf8:	add	sp, sp, #4
   1abfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac00:	str	r4, [sp, #-8]!
   1ac04:	str	lr, [sp, #4]
   1ac08:	mov	r1, r0
   1ac0c:	mov	r0, #0
   1ac10:	bl	1abe4 <__assert_fail@plt+0x9a58>
   1ac14:	ldr	r4, [sp]
   1ac18:	add	sp, sp, #4
   1ac1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac20:	str	r4, [sp, #-8]!
   1ac24:	str	lr, [sp, #4]
   1ac28:	mov	r2, #3
   1ac2c:	mov	r1, #0
   1ac30:	bl	1c040 <__assert_fail@plt+0xaeb4>
   1ac34:	ldr	r4, [sp]
   1ac38:	add	sp, sp, #4
   1ac3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac40:	strd	r4, [sp, #-16]!
   1ac44:	str	r6, [sp, #8]
   1ac48:	str	lr, [sp, #12]
   1ac4c:	sub	sp, sp, #32
   1ac50:	mov	r4, r0
   1ac54:	ldr	r5, [sp, #48]	; 0x30
   1ac58:	ldr	r6, [sp, #52]	; 0x34
   1ac5c:	cmp	r1, #0
   1ac60:	beq	1ad2c <__assert_fail@plt+0x9ba0>
   1ac64:	str	r3, [sp, #4]
   1ac68:	str	r2, [sp]
   1ac6c:	mov	r3, r1
   1ac70:	movw	r2, #54988	; 0xd6cc
   1ac74:	movt	r2, #1
   1ac78:	mov	r1, #1
   1ac7c:	bl	110d8 <__fprintf_chk@plt>
   1ac80:	mov	r2, #5
   1ac84:	movw	r1, #55008	; 0xd6e0
   1ac88:	movt	r1, #1
   1ac8c:	mov	r0, #0
   1ac90:	bl	10f7c <dcgettext@plt>
   1ac94:	movw	r3, #2022	; 0x7e6
   1ac98:	str	r3, [sp]
   1ac9c:	mov	r3, r0
   1aca0:	movw	r2, #55736	; 0xd9b8
   1aca4:	movt	r2, #1
   1aca8:	mov	r1, #1
   1acac:	mov	r0, r4
   1acb0:	bl	110d8 <__fprintf_chk@plt>
   1acb4:	mov	r1, r4
   1acb8:	mov	r0, #10
   1acbc:	bl	10f70 <fputc_unlocked@plt>
   1acc0:	mov	r2, #5
   1acc4:	movw	r1, #55012	; 0xd6e4
   1acc8:	movt	r1, #1
   1accc:	mov	r0, #0
   1acd0:	bl	10f7c <dcgettext@plt>
   1acd4:	movw	r3, #55184	; 0xd790
   1acd8:	movt	r3, #1
   1acdc:	mov	r2, r0
   1ace0:	mov	r1, #1
   1ace4:	mov	r0, r4
   1ace8:	bl	110d8 <__fprintf_chk@plt>
   1acec:	mov	r1, r4
   1acf0:	mov	r0, #10
   1acf4:	bl	10f70 <fputc_unlocked@plt>
   1acf8:	cmp	r6, #9
   1acfc:	ldrls	pc, [pc, r6, lsl #2]
   1ad00:	b	1b004 <__assert_fail@plt+0x9e78>
   1ad04:	andeq	sl, r1, r0, ror sp
   1ad08:	andeq	sl, r1, r8, asr #26
   1ad0c:	andeq	sl, r1, r4, lsl #27
   1ad10:			; <UNDEFINED> instruction: 0x0001adb8
   1ad14:	strdeq	sl, [r1], -r4
   1ad18:	andeq	sl, r1, r8, lsr lr
   1ad1c:	andeq	sl, r1, r4, lsl #29
   1ad20:	ldrdeq	sl, [r1], -r8
   1ad24:	andeq	sl, r1, r4, lsr pc
   1ad28:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ad2c:	str	r3, [sp]
   1ad30:	mov	r3, r2
   1ad34:	movw	r2, #55000	; 0xd6d8
   1ad38:	movt	r2, #1
   1ad3c:	mov	r1, #1
   1ad40:	bl	110d8 <__fprintf_chk@plt>
   1ad44:	b	1ac80 <__assert_fail@plt+0x9af4>
   1ad48:	mov	r2, #5
   1ad4c:	movw	r1, #55220	; 0xd7b4
   1ad50:	movt	r1, #1
   1ad54:	mov	r0, #0
   1ad58:	bl	10f7c <dcgettext@plt>
   1ad5c:	ldr	r3, [r5]
   1ad60:	mov	r2, r0
   1ad64:	mov	r1, #1
   1ad68:	mov	r0, r4
   1ad6c:	bl	110d8 <__fprintf_chk@plt>
   1ad70:	add	sp, sp, #32
   1ad74:	ldrd	r4, [sp]
   1ad78:	ldr	r6, [sp, #8]
   1ad7c:	add	sp, sp, #12
   1ad80:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad84:	mov	r2, #5
   1ad88:	movw	r1, #55236	; 0xd7c4
   1ad8c:	movt	r1, #1
   1ad90:	mov	r0, #0
   1ad94:	bl	10f7c <dcgettext@plt>
   1ad98:	ldr	r3, [r5, #4]
   1ad9c:	str	r3, [sp]
   1ada0:	ldr	r3, [r5]
   1ada4:	mov	r2, r0
   1ada8:	mov	r1, #1
   1adac:	mov	r0, r4
   1adb0:	bl	110d8 <__fprintf_chk@plt>
   1adb4:	b	1ad70 <__assert_fail@plt+0x9be4>
   1adb8:	mov	r2, #5
   1adbc:	movw	r1, #55260	; 0xd7dc
   1adc0:	movt	r1, #1
   1adc4:	mov	r0, #0
   1adc8:	bl	10f7c <dcgettext@plt>
   1adcc:	ldr	r3, [r5, #8]
   1add0:	str	r3, [sp, #4]
   1add4:	ldr	r3, [r5, #4]
   1add8:	str	r3, [sp]
   1addc:	ldr	r3, [r5]
   1ade0:	mov	r2, r0
   1ade4:	mov	r1, #1
   1ade8:	mov	r0, r4
   1adec:	bl	110d8 <__fprintf_chk@plt>
   1adf0:	b	1ad70 <__assert_fail@plt+0x9be4>
   1adf4:	mov	r2, #5
   1adf8:	movw	r1, #55288	; 0xd7f8
   1adfc:	movt	r1, #1
   1ae00:	mov	r0, #0
   1ae04:	bl	10f7c <dcgettext@plt>
   1ae08:	ldr	r3, [r5, #12]
   1ae0c:	str	r3, [sp, #8]
   1ae10:	ldr	r3, [r5, #8]
   1ae14:	str	r3, [sp, #4]
   1ae18:	ldr	r3, [r5, #4]
   1ae1c:	str	r3, [sp]
   1ae20:	ldr	r3, [r5]
   1ae24:	mov	r2, r0
   1ae28:	mov	r1, #1
   1ae2c:	mov	r0, r4
   1ae30:	bl	110d8 <__fprintf_chk@plt>
   1ae34:	b	1ad70 <__assert_fail@plt+0x9be4>
   1ae38:	mov	r2, #5
   1ae3c:	movw	r1, #55320	; 0xd818
   1ae40:	movt	r1, #1
   1ae44:	mov	r0, #0
   1ae48:	bl	10f7c <dcgettext@plt>
   1ae4c:	ldr	r3, [r5, #16]
   1ae50:	str	r3, [sp, #12]
   1ae54:	ldr	r3, [r5, #12]
   1ae58:	str	r3, [sp, #8]
   1ae5c:	ldr	r3, [r5, #8]
   1ae60:	str	r3, [sp, #4]
   1ae64:	ldr	r3, [r5, #4]
   1ae68:	str	r3, [sp]
   1ae6c:	ldr	r3, [r5]
   1ae70:	mov	r2, r0
   1ae74:	mov	r1, #1
   1ae78:	mov	r0, r4
   1ae7c:	bl	110d8 <__fprintf_chk@plt>
   1ae80:	b	1ad70 <__assert_fail@plt+0x9be4>
   1ae84:	mov	r2, #5
   1ae88:	movw	r1, #55356	; 0xd83c
   1ae8c:	movt	r1, #1
   1ae90:	mov	r0, #0
   1ae94:	bl	10f7c <dcgettext@plt>
   1ae98:	ldr	r3, [r5, #20]
   1ae9c:	str	r3, [sp, #16]
   1aea0:	ldr	r3, [r5, #16]
   1aea4:	str	r3, [sp, #12]
   1aea8:	ldr	r3, [r5, #12]
   1aeac:	str	r3, [sp, #8]
   1aeb0:	ldr	r3, [r5, #8]
   1aeb4:	str	r3, [sp, #4]
   1aeb8:	ldr	r3, [r5, #4]
   1aebc:	str	r3, [sp]
   1aec0:	ldr	r3, [r5]
   1aec4:	mov	r2, r0
   1aec8:	mov	r1, #1
   1aecc:	mov	r0, r4
   1aed0:	bl	110d8 <__fprintf_chk@plt>
   1aed4:	b	1ad70 <__assert_fail@plt+0x9be4>
   1aed8:	mov	r2, #5
   1aedc:	movw	r1, #55396	; 0xd864
   1aee0:	movt	r1, #1
   1aee4:	mov	r0, #0
   1aee8:	bl	10f7c <dcgettext@plt>
   1aeec:	ldr	r3, [r5, #24]
   1aef0:	str	r3, [sp, #20]
   1aef4:	ldr	r3, [r5, #20]
   1aef8:	str	r3, [sp, #16]
   1aefc:	ldr	r3, [r5, #16]
   1af00:	str	r3, [sp, #12]
   1af04:	ldr	r3, [r5, #12]
   1af08:	str	r3, [sp, #8]
   1af0c:	ldr	r3, [r5, #8]
   1af10:	str	r3, [sp, #4]
   1af14:	ldr	r3, [r5, #4]
   1af18:	str	r3, [sp]
   1af1c:	ldr	r3, [r5]
   1af20:	mov	r2, r0
   1af24:	mov	r1, #1
   1af28:	mov	r0, r4
   1af2c:	bl	110d8 <__fprintf_chk@plt>
   1af30:	b	1ad70 <__assert_fail@plt+0x9be4>
   1af34:	mov	r2, #5
   1af38:	movw	r1, #55440	; 0xd890
   1af3c:	movt	r1, #1
   1af40:	mov	r0, #0
   1af44:	bl	10f7c <dcgettext@plt>
   1af48:	ldr	r3, [r5, #28]
   1af4c:	str	r3, [sp, #24]
   1af50:	ldr	r3, [r5, #24]
   1af54:	str	r3, [sp, #20]
   1af58:	ldr	r3, [r5, #20]
   1af5c:	str	r3, [sp, #16]
   1af60:	ldr	r3, [r5, #16]
   1af64:	str	r3, [sp, #12]
   1af68:	ldr	r3, [r5, #12]
   1af6c:	str	r3, [sp, #8]
   1af70:	ldr	r3, [r5, #8]
   1af74:	str	r3, [sp, #4]
   1af78:	ldr	r3, [r5, #4]
   1af7c:	str	r3, [sp]
   1af80:	ldr	r3, [r5]
   1af84:	mov	r2, r0
   1af88:	mov	r1, #1
   1af8c:	mov	r0, r4
   1af90:	bl	110d8 <__fprintf_chk@plt>
   1af94:	b	1ad70 <__assert_fail@plt+0x9be4>
   1af98:	mov	r2, #5
   1af9c:	movw	r1, #55488	; 0xd8c0
   1afa0:	movt	r1, #1
   1afa4:	mov	r0, #0
   1afa8:	bl	10f7c <dcgettext@plt>
   1afac:	ldr	r3, [r5, #32]
   1afb0:	str	r3, [sp, #28]
   1afb4:	ldr	r3, [r5, #28]
   1afb8:	str	r3, [sp, #24]
   1afbc:	ldr	r3, [r5, #24]
   1afc0:	str	r3, [sp, #20]
   1afc4:	ldr	r3, [r5, #20]
   1afc8:	str	r3, [sp, #16]
   1afcc:	ldr	r3, [r5, #16]
   1afd0:	str	r3, [sp, #12]
   1afd4:	ldr	r3, [r5, #12]
   1afd8:	str	r3, [sp, #8]
   1afdc:	ldr	r3, [r5, #8]
   1afe0:	str	r3, [sp, #4]
   1afe4:	ldr	r3, [r5, #4]
   1afe8:	str	r3, [sp]
   1afec:	ldr	r3, [r5]
   1aff0:	mov	r2, r0
   1aff4:	mov	r1, #1
   1aff8:	mov	r0, r4
   1affc:	bl	110d8 <__fprintf_chk@plt>
   1b000:	b	1ad70 <__assert_fail@plt+0x9be4>
   1b004:	mov	r2, #5
   1b008:	movw	r1, #55540	; 0xd8f4
   1b00c:	movt	r1, #1
   1b010:	mov	r0, #0
   1b014:	bl	10f7c <dcgettext@plt>
   1b018:	ldr	r3, [r5, #32]
   1b01c:	str	r3, [sp, #28]
   1b020:	ldr	r3, [r5, #28]
   1b024:	str	r3, [sp, #24]
   1b028:	ldr	r3, [r5, #24]
   1b02c:	str	r3, [sp, #20]
   1b030:	ldr	r3, [r5, #20]
   1b034:	str	r3, [sp, #16]
   1b038:	ldr	r3, [r5, #16]
   1b03c:	str	r3, [sp, #12]
   1b040:	ldr	r3, [r5, #12]
   1b044:	str	r3, [sp, #8]
   1b048:	ldr	r3, [r5, #8]
   1b04c:	str	r3, [sp, #4]
   1b050:	ldr	r3, [r5, #4]
   1b054:	str	r3, [sp]
   1b058:	ldr	r3, [r5]
   1b05c:	mov	r2, r0
   1b060:	mov	r1, #1
   1b064:	mov	r0, r4
   1b068:	bl	110d8 <__fprintf_chk@plt>
   1b06c:	b	1ad70 <__assert_fail@plt+0x9be4>
   1b070:	strd	r4, [sp, #-12]!
   1b074:	str	lr, [sp, #8]
   1b078:	sub	sp, sp, #12
   1b07c:	ldr	r5, [sp, #24]
   1b080:	ldr	ip, [r5]
   1b084:	cmp	ip, #0
   1b088:	beq	1b0c0 <__assert_fail@plt+0x9f34>
   1b08c:	mov	lr, r5
   1b090:	mov	ip, #0
   1b094:	add	ip, ip, #1
   1b098:	ldr	r4, [lr, #4]!
   1b09c:	cmp	r4, #0
   1b0a0:	bne	1b094 <__assert_fail@plt+0x9f08>
   1b0a4:	str	ip, [sp, #4]
   1b0a8:	str	r5, [sp]
   1b0ac:	bl	1ac40 <__assert_fail@plt+0x9ab4>
   1b0b0:	add	sp, sp, #12
   1b0b4:	ldrd	r4, [sp]
   1b0b8:	add	sp, sp, #8
   1b0bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0c0:	mov	ip, #0
   1b0c4:	b	1b0a4 <__assert_fail@plt+0x9f18>
   1b0c8:	strd	r4, [sp, #-12]!
   1b0cc:	str	lr, [sp, #8]
   1b0d0:	sub	sp, sp, #52	; 0x34
   1b0d4:	ldr	r5, [sp, #64]	; 0x40
   1b0d8:	add	r4, sp, #8
   1b0dc:	mov	ip, #0
   1b0e0:	ldr	lr, [r5], #4
   1b0e4:	str	lr, [r4], #4
   1b0e8:	cmp	lr, #0
   1b0ec:	beq	1b0fc <__assert_fail@plt+0x9f70>
   1b0f0:	add	ip, ip, #1
   1b0f4:	cmp	ip, #10
   1b0f8:	bne	1b0e0 <__assert_fail@plt+0x9f54>
   1b0fc:	str	ip, [sp, #4]
   1b100:	add	ip, sp, #8
   1b104:	str	ip, [sp]
   1b108:	bl	1ac40 <__assert_fail@plt+0x9ab4>
   1b10c:	add	sp, sp, #52	; 0x34
   1b110:	ldrd	r4, [sp]
   1b114:	add	sp, sp, #8
   1b118:	pop	{pc}		; (ldr pc, [sp], #4)
   1b11c:	push	{r3}		; (str r3, [sp, #-4]!)
   1b120:	push	{lr}		; (str lr, [sp, #-4]!)
   1b124:	sub	sp, sp, #16
   1b128:	add	r3, sp, #24
   1b12c:	str	r3, [sp, #12]
   1b130:	str	r3, [sp]
   1b134:	ldr	r3, [sp, #20]
   1b138:	bl	1b0c8 <__assert_fail@plt+0x9f3c>
   1b13c:	add	sp, sp, #16
   1b140:	pop	{lr}		; (ldr lr, [sp], #4)
   1b144:	add	sp, sp, #4
   1b148:	bx	lr
   1b14c:	str	r4, [sp, #-8]!
   1b150:	str	lr, [sp, #4]
   1b154:	movw	r3, #57732	; 0xe184
   1b158:	movt	r3, #2
   1b15c:	ldr	r1, [r3]
   1b160:	mov	r0, #10
   1b164:	bl	10f70 <fputc_unlocked@plt>
   1b168:	mov	r2, #5
   1b16c:	movw	r1, #55600	; 0xd930
   1b170:	movt	r1, #1
   1b174:	mov	r0, #0
   1b178:	bl	10f7c <dcgettext@plt>
   1b17c:	movw	r2, #55620	; 0xd944
   1b180:	movt	r2, #1
   1b184:	mov	r1, r0
   1b188:	mov	r0, #1
   1b18c:	bl	110c0 <__printf_chk@plt>
   1b190:	mov	r2, #5
   1b194:	movw	r1, #55644	; 0xd95c
   1b198:	movt	r1, #1
   1b19c:	mov	r0, #0
   1b1a0:	bl	10f7c <dcgettext@plt>
   1b1a4:	movw	r3, #52920	; 0xceb8
   1b1a8:	movt	r3, #1
   1b1ac:	movw	r2, #52960	; 0xcee0
   1b1b0:	movt	r2, #1
   1b1b4:	mov	r1, r0
   1b1b8:	mov	r0, #1
   1b1bc:	bl	110c0 <__printf_chk@plt>
   1b1c0:	mov	r2, #5
   1b1c4:	movw	r1, #55664	; 0xd970
   1b1c8:	movt	r1, #1
   1b1cc:	mov	r0, #0
   1b1d0:	bl	10f7c <dcgettext@plt>
   1b1d4:	movw	r2, #55704	; 0xd998
   1b1d8:	movt	r2, #1
   1b1dc:	mov	r1, r0
   1b1e0:	mov	r0, #1
   1b1e4:	bl	110c0 <__printf_chk@plt>
   1b1e8:	ldr	r4, [sp]
   1b1ec:	add	sp, sp, #4
   1b1f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1f4:	str	r4, [sp, #-8]!
   1b1f8:	str	lr, [sp, #4]
   1b1fc:	bl	1bf1c <__assert_fail@plt+0xad90>
   1b200:	cmp	r0, #0
   1b204:	beq	1b214 <__assert_fail@plt+0xa088>
   1b208:	ldr	r4, [sp]
   1b20c:	add	sp, sp, #4
   1b210:	pop	{pc}		; (ldr pc, [sp], #4)
   1b214:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b218:	str	r4, [sp, #-8]!
   1b21c:	str	lr, [sp, #4]
   1b220:	bl	1bf1c <__assert_fail@plt+0xad90>
   1b224:	cmp	r0, #0
   1b228:	beq	1b238 <__assert_fail@plt+0xa0ac>
   1b22c:	ldr	r4, [sp]
   1b230:	add	sp, sp, #4
   1b234:	pop	{pc}		; (ldr pc, [sp], #4)
   1b238:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b23c:	str	r4, [sp, #-8]!
   1b240:	str	lr, [sp, #4]
   1b244:	bl	1b1f4 <__assert_fail@plt+0xa068>
   1b248:	ldr	r4, [sp]
   1b24c:	add	sp, sp, #4
   1b250:	pop	{pc}		; (ldr pc, [sp], #4)
   1b254:	strd	r4, [sp, #-16]!
   1b258:	str	r6, [sp, #8]
   1b25c:	str	lr, [sp, #12]
   1b260:	mov	r5, r0
   1b264:	mov	r4, r1
   1b268:	bl	1bf58 <__assert_fail@plt+0xadcc>
   1b26c:	cmp	r0, #0
   1b270:	beq	1b284 <__assert_fail@plt+0xa0f8>
   1b274:	ldrd	r4, [sp]
   1b278:	ldr	r6, [sp, #8]
   1b27c:	add	sp, sp, #12
   1b280:	pop	{pc}		; (ldr pc, [sp], #4)
   1b284:	adds	r4, r4, #0
   1b288:	movne	r4, #1
   1b28c:	cmp	r5, #0
   1b290:	moveq	r4, #1
   1b294:	cmp	r4, #0
   1b298:	beq	1b274 <__assert_fail@plt+0xa0e8>
   1b29c:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b2a0:	str	r4, [sp, #-8]!
   1b2a4:	str	lr, [sp, #4]
   1b2a8:	cmp	r1, #0
   1b2ac:	orreq	r1, r1, #1
   1b2b0:	bl	1bf58 <__assert_fail@plt+0xadcc>
   1b2b4:	cmp	r0, #0
   1b2b8:	beq	1b2c8 <__assert_fail@plt+0xa13c>
   1b2bc:	ldr	r4, [sp]
   1b2c0:	add	sp, sp, #4
   1b2c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2c8:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b2cc:	strd	r4, [sp, #-16]!
   1b2d0:	str	r6, [sp, #8]
   1b2d4:	str	lr, [sp, #12]
   1b2d8:	mov	r4, r0
   1b2dc:	mov	r6, r1
   1b2e0:	mov	r5, r2
   1b2e4:	bl	1c360 <__assert_fail@plt+0xb1d4>
   1b2e8:	cmp	r0, #0
   1b2ec:	beq	1b300 <__assert_fail@plt+0xa174>
   1b2f0:	ldrd	r4, [sp]
   1b2f4:	ldr	r6, [sp, #8]
   1b2f8:	add	sp, sp, #12
   1b2fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b300:	cmp	r4, #0
   1b304:	beq	1b314 <__assert_fail@plt+0xa188>
   1b308:	cmp	r6, #0
   1b30c:	cmpne	r5, #0
   1b310:	beq	1b2f0 <__assert_fail@plt+0xa164>
   1b314:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b318:	str	r4, [sp, #-8]!
   1b31c:	str	lr, [sp, #4]
   1b320:	bl	1b2cc <__assert_fail@plt+0xa140>
   1b324:	ldr	r4, [sp]
   1b328:	add	sp, sp, #4
   1b32c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b330:	str	r4, [sp, #-8]!
   1b334:	str	lr, [sp, #4]
   1b338:	mov	ip, r1
   1b33c:	mov	r3, r2
   1b340:	cmp	r2, #0
   1b344:	cmpne	r1, #0
   1b348:	moveq	r3, #1
   1b34c:	moveq	ip, r3
   1b350:	mov	r2, r3
   1b354:	mov	r1, ip
   1b358:	bl	1c360 <__assert_fail@plt+0xb1d4>
   1b35c:	cmp	r0, #0
   1b360:	beq	1b370 <__assert_fail@plt+0xa1e4>
   1b364:	ldr	r4, [sp]
   1b368:	add	sp, sp, #4
   1b36c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b370:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b374:	str	r4, [sp, #-8]!
   1b378:	str	lr, [sp, #4]
   1b37c:	mov	r2, r1
   1b380:	mov	r1, r0
   1b384:	mov	r0, #0
   1b388:	bl	1b2cc <__assert_fail@plt+0xa140>
   1b38c:	ldr	r4, [sp]
   1b390:	add	sp, sp, #4
   1b394:	pop	{pc}		; (ldr pc, [sp], #4)
   1b398:	str	r4, [sp, #-8]!
   1b39c:	str	lr, [sp, #4]
   1b3a0:	mov	r2, r1
   1b3a4:	mov	r1, r0
   1b3a8:	mov	r0, #0
   1b3ac:	bl	1b330 <__assert_fail@plt+0xa1a4>
   1b3b0:	ldr	r4, [sp]
   1b3b4:	add	sp, sp, #4
   1b3b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3bc:	strd	r4, [sp, #-16]!
   1b3c0:	str	r6, [sp, #8]
   1b3c4:	str	lr, [sp, #12]
   1b3c8:	mov	r5, r1
   1b3cc:	ldr	r4, [r1]
   1b3d0:	cmp	r0, #0
   1b3d4:	beq	1b404 <__assert_fail@plt+0xa278>
   1b3d8:	lsr	r3, r4, #1
   1b3dc:	add	r3, r3, #1
   1b3e0:	adds	r4, r4, r3
   1b3e4:	bcs	1b420 <__assert_fail@plt+0xa294>
   1b3e8:	mov	r1, r4
   1b3ec:	bl	1b2cc <__assert_fail@plt+0xa140>
   1b3f0:	str	r4, [r5]
   1b3f4:	ldrd	r4, [sp]
   1b3f8:	ldr	r6, [sp, #8]
   1b3fc:	add	sp, sp, #12
   1b400:	pop	{pc}		; (ldr pc, [sp], #4)
   1b404:	cmp	r4, #0
   1b408:	bne	1b3e8 <__assert_fail@plt+0xa25c>
   1b40c:	mov	r4, #64	; 0x40
   1b410:	udiv	r4, r4, r2
   1b414:	cmp	r2, #64	; 0x40
   1b418:	addhi	r4, r4, #1
   1b41c:	b	1b3e8 <__assert_fail@plt+0xa25c>
   1b420:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b424:	str	r4, [sp, #-8]!
   1b428:	str	lr, [sp, #4]
   1b42c:	mov	r2, #1
   1b430:	bl	1b3bc <__assert_fail@plt+0xa230>
   1b434:	ldr	r4, [sp]
   1b438:	add	sp, sp, #4
   1b43c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b440:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b444:	strd	r6, [sp, #8]
   1b448:	str	r8, [sp, #16]
   1b44c:	str	lr, [sp, #20]
   1b450:	mov	r5, r1
   1b454:	ldr	lr, [sp, #24]
   1b458:	ldr	ip, [r1]
   1b45c:	asr	r4, ip, #1
   1b460:	adds	r4, ip, r4
   1b464:	movvs	r1, #1
   1b468:	movvc	r1, #0
   1b46c:	cmp	r1, #0
   1b470:	mvnne	r4, #-2147483648	; 0x80000000
   1b474:	mvn	r8, r3
   1b478:	lsr	r8, r8, #31
   1b47c:	cmp	r3, r4
   1b480:	movge	r1, #0
   1b484:	andlt	r1, r8, #1
   1b488:	cmp	r1, #0
   1b48c:	movne	r4, r3
   1b490:	smull	r6, r7, r4, lr
   1b494:	asr	r1, r6, #31
   1b498:	cmp	r1, r7
   1b49c:	bne	1b4b4 <__assert_fail@plt+0xa328>
   1b4a0:	mov	r1, r6
   1b4a4:	cmp	r6, #63	; 0x3f
   1b4a8:	movle	r1, #64	; 0x40
   1b4ac:	ble	1b4b8 <__assert_fail@plt+0xa32c>
   1b4b0:	b	1b4c4 <__assert_fail@plt+0xa338>
   1b4b4:	mvn	r1, #-2147483648	; 0x80000000
   1b4b8:	sdiv	r4, r1, lr
   1b4bc:	mls	r6, lr, r4, r1
   1b4c0:	sub	r1, r1, r6
   1b4c4:	cmp	r0, #0
   1b4c8:	moveq	r6, #0
   1b4cc:	streq	r6, [r5]
   1b4d0:	sub	r6, r4, ip
   1b4d4:	cmp	r6, r2
   1b4d8:	bge	1b510 <__assert_fail@plt+0xa384>
   1b4dc:	adds	r2, ip, r2
   1b4e0:	mov	r4, r2
   1b4e4:	bvs	1b52c <__assert_fail@plt+0xa3a0>
   1b4e8:	cmp	r2, r3
   1b4ec:	movle	r3, #0
   1b4f0:	andgt	r3, r8, #1
   1b4f4:	cmp	r3, #0
   1b4f8:	bne	1b52c <__assert_fail@plt+0xa3a0>
   1b4fc:	smull	r2, r3, r2, lr
   1b500:	asr	ip, r2, #31
   1b504:	mov	r1, r2
   1b508:	cmp	ip, r3
   1b50c:	bne	1b52c <__assert_fail@plt+0xa3a0>
   1b510:	bl	1b254 <__assert_fail@plt+0xa0c8>
   1b514:	str	r4, [r5]
   1b518:	ldrd	r4, [sp]
   1b51c:	ldrd	r6, [sp, #8]
   1b520:	ldr	r8, [sp, #16]
   1b524:	add	sp, sp, #20
   1b528:	pop	{pc}		; (ldr pc, [sp], #4)
   1b52c:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b530:	str	r4, [sp, #-8]!
   1b534:	str	lr, [sp, #4]
   1b538:	bl	1bea8 <__assert_fail@plt+0xad1c>
   1b53c:	cmp	r0, #0
   1b540:	beq	1b550 <__assert_fail@plt+0xa3c4>
   1b544:	ldr	r4, [sp]
   1b548:	add	sp, sp, #4
   1b54c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b550:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b554:	str	r4, [sp, #-8]!
   1b558:	str	lr, [sp, #4]
   1b55c:	mov	r1, #1
   1b560:	bl	1b530 <__assert_fail@plt+0xa3a4>
   1b564:	ldr	r4, [sp]
   1b568:	add	sp, sp, #4
   1b56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b570:	str	r4, [sp, #-8]!
   1b574:	str	lr, [sp, #4]
   1b578:	bl	1bea8 <__assert_fail@plt+0xad1c>
   1b57c:	cmp	r0, #0
   1b580:	beq	1b590 <__assert_fail@plt+0xa404>
   1b584:	ldr	r4, [sp]
   1b588:	add	sp, sp, #4
   1b58c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b590:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b594:	str	r4, [sp, #-8]!
   1b598:	str	lr, [sp, #4]
   1b59c:	mov	r1, #1
   1b5a0:	bl	1b570 <__assert_fail@plt+0xa3e4>
   1b5a4:	ldr	r4, [sp]
   1b5a8:	add	sp, sp, #4
   1b5ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5b0:	strd	r4, [sp, #-16]!
   1b5b4:	str	r6, [sp, #8]
   1b5b8:	str	lr, [sp, #12]
   1b5bc:	mov	r5, r0
   1b5c0:	mov	r4, r1
   1b5c4:	mov	r0, r1
   1b5c8:	bl	1b1f4 <__assert_fail@plt+0xa068>
   1b5cc:	mov	r2, r4
   1b5d0:	mov	r1, r5
   1b5d4:	bl	10f34 <memcpy@plt>
   1b5d8:	ldrd	r4, [sp]
   1b5dc:	ldr	r6, [sp, #8]
   1b5e0:	add	sp, sp, #12
   1b5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5e8:	strd	r4, [sp, #-16]!
   1b5ec:	str	r6, [sp, #8]
   1b5f0:	str	lr, [sp, #12]
   1b5f4:	mov	r5, r0
   1b5f8:	mov	r4, r1
   1b5fc:	mov	r0, r1
   1b600:	bl	1b218 <__assert_fail@plt+0xa08c>
   1b604:	mov	r2, r4
   1b608:	mov	r1, r5
   1b60c:	bl	10f34 <memcpy@plt>
   1b610:	ldrd	r4, [sp]
   1b614:	ldr	r6, [sp, #8]
   1b618:	add	sp, sp, #12
   1b61c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b620:	strd	r4, [sp, #-16]!
   1b624:	str	r6, [sp, #8]
   1b628:	str	lr, [sp, #12]
   1b62c:	mov	r5, r0
   1b630:	mov	r4, r1
   1b634:	add	r0, r1, #1
   1b638:	bl	1b218 <__assert_fail@plt+0xa08c>
   1b63c:	mov	r2, #0
   1b640:	strb	r2, [r0, r4]
   1b644:	mov	r2, r4
   1b648:	mov	r1, r5
   1b64c:	bl	10f34 <memcpy@plt>
   1b650:	ldrd	r4, [sp]
   1b654:	ldr	r6, [sp, #8]
   1b658:	add	sp, sp, #12
   1b65c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b660:	str	r4, [sp, #-8]!
   1b664:	str	lr, [sp, #4]
   1b668:	mov	r4, r0
   1b66c:	bl	11078 <strlen@plt>
   1b670:	add	r1, r0, #1
   1b674:	mov	r0, r4
   1b678:	bl	1b5b0 <__assert_fail@plt+0xa424>
   1b67c:	ldr	r4, [sp]
   1b680:	add	sp, sp, #4
   1b684:	pop	{pc}		; (ldr pc, [sp], #4)
   1b688:	str	r4, [sp, #-8]!
   1b68c:	str	lr, [sp, #4]
   1b690:	movw	r3, #57632	; 0xe120
   1b694:	movt	r3, #2
   1b698:	ldr	r4, [r3]
   1b69c:	mov	r2, #5
   1b6a0:	movw	r1, #55784	; 0xd9e8
   1b6a4:	movt	r1, #1
   1b6a8:	mov	r0, #0
   1b6ac:	bl	10f7c <dcgettext@plt>
   1b6b0:	mov	r3, r0
   1b6b4:	movw	r2, #53188	; 0xcfc4
   1b6b8:	movt	r2, #1
   1b6bc:	mov	r1, #0
   1b6c0:	mov	r0, r4
   1b6c4:	bl	11000 <error@plt>
   1b6c8:	bl	11168 <abort@plt>
   1b6cc:	strd	r4, [sp, #-16]!
   1b6d0:	str	r6, [sp, #8]
   1b6d4:	str	lr, [sp, #12]
   1b6d8:	sub	sp, sp, #16
   1b6dc:	mov	r6, r0
   1b6e0:	mov	r4, r2
   1b6e4:	mov	r5, r3
   1b6e8:	ldr	r3, [sp, #40]	; 0x28
   1b6ec:	str	r3, [sp]
   1b6f0:	add	r3, sp, #8
   1b6f4:	mov	r2, r1
   1b6f8:	mov	r1, #0
   1b6fc:	bl	1b958 <__assert_fail@plt+0xa7cc>
   1b700:	cmp	r0, #0
   1b704:	bne	1b77c <__assert_fail@plt+0xa5f0>
   1b708:	ldrd	r0, [sp, #8]
   1b70c:	ldrd	r2, [sp, #32]
   1b710:	cmp	r1, r3
   1b714:	cmpeq	r0, r2
   1b718:	movhi	r3, #1
   1b71c:	movls	r3, #0
   1b720:	cmp	r1, r5
   1b724:	cmpeq	r0, r4
   1b728:	orrcc	r3, r3, #1
   1b72c:	cmp	r3, #0
   1b730:	bne	1b748 <__assert_fail@plt+0xa5bc>
   1b734:	add	sp, sp, #16
   1b738:	ldrd	r4, [sp]
   1b73c:	ldr	r6, [sp, #8]
   1b740:	add	sp, sp, #12
   1b744:	pop	{pc}		; (ldr pc, [sp], #4)
   1b748:	mvn	r2, #-1073741824	; 0xc0000000
   1b74c:	mov	r3, #0
   1b750:	cmp	r1, r3
   1b754:	cmpeq	r0, r2
   1b758:	bls	1b76c <__assert_fail@plt+0xa5e0>
   1b75c:	bl	11090 <__errno_location@plt>
   1b760:	mov	r3, #75	; 0x4b
   1b764:	str	r3, [r0]
   1b768:	b	1b78c <__assert_fail@plt+0xa600>
   1b76c:	bl	11090 <__errno_location@plt>
   1b770:	mov	r3, #34	; 0x22
   1b774:	str	r3, [r0]
   1b778:	b	1b78c <__assert_fail@plt+0xa600>
   1b77c:	cmp	r0, #1
   1b780:	beq	1b7d0 <__assert_fail@plt+0xa644>
   1b784:	cmp	r0, #3
   1b788:	beq	1b7e0 <__assert_fail@plt+0xa654>
   1b78c:	ldr	r3, [sp, #48]	; 0x30
   1b790:	cmp	r3, #0
   1b794:	moveq	r3, #1
   1b798:	str	r3, [sp, #48]	; 0x30
   1b79c:	bl	11090 <__errno_location@plt>
   1b7a0:	ldr	r4, [r0]
   1b7a4:	cmp	r4, #22
   1b7a8:	moveq	r4, #0
   1b7ac:	mov	r0, r6
   1b7b0:	bl	1ac00 <__assert_fail@plt+0x9a74>
   1b7b4:	str	r0, [sp]
   1b7b8:	ldr	r3, [sp, #44]	; 0x2c
   1b7bc:	movw	r2, #54700	; 0xd5ac
   1b7c0:	movt	r2, #1
   1b7c4:	mov	r1, r4
   1b7c8:	ldr	r0, [sp, #48]	; 0x30
   1b7cc:	bl	11000 <error@plt>
   1b7d0:	bl	11090 <__errno_location@plt>
   1b7d4:	mov	r3, #75	; 0x4b
   1b7d8:	str	r3, [r0]
   1b7dc:	b	1b78c <__assert_fail@plt+0xa600>
   1b7e0:	bl	11090 <__errno_location@plt>
   1b7e4:	mov	r3, #0
   1b7e8:	str	r3, [r0]
   1b7ec:	b	1b78c <__assert_fail@plt+0xa600>
   1b7f0:	strd	r4, [sp, #-12]!
   1b7f4:	str	lr, [sp, #8]
   1b7f8:	sub	sp, sp, #28
   1b7fc:	ldr	r1, [sp, #56]	; 0x38
   1b800:	str	r1, [sp, #16]
   1b804:	ldr	r1, [sp, #52]	; 0x34
   1b808:	str	r1, [sp, #12]
   1b80c:	ldr	r1, [sp, #48]	; 0x30
   1b810:	str	r1, [sp, #8]
   1b814:	ldrd	r4, [sp, #40]	; 0x28
   1b818:	strd	r4, [sp]
   1b81c:	mov	r1, #10
   1b820:	bl	1b6cc <__assert_fail@plt+0xa540>
   1b824:	add	sp, sp, #28
   1b828:	ldrd	r4, [sp]
   1b82c:	add	sp, sp, #8
   1b830:	pop	{pc}		; (ldr pc, [sp], #4)
   1b834:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b838:	strd	r6, [sp, #8]
   1b83c:	strd	r8, [sp, #16]
   1b840:	strd	sl, [sp, #24]
   1b844:	str	lr, [sp, #32]
   1b848:	sub	sp, sp, #12
   1b84c:	str	r0, [sp, #4]
   1b850:	cmp	r2, #0
   1b854:	beq	1b950 <__assert_fail@plt+0xa7c4>
   1b858:	sub	ip, r2, #1
   1b85c:	ldrd	r2, [r0]
   1b860:	mov	r0, #0
   1b864:	mov	r8, r1
   1b868:	asr	r9, r1, #31
   1b86c:	str	r1, [sp]
   1b870:	b	1b8c0 <__assert_fail@plt+0xa734>
   1b874:	orrs	r4, r2, r3
   1b878:	movne	lr, #1
   1b87c:	b	1b8d0 <__assert_fail@plt+0xa744>
   1b880:	mov	sl, r3
   1b884:	ldr	fp, [sp]
   1b888:	umull	r6, r7, r1, r2
   1b88c:	mov	r4, r7
   1b890:	mov	r5, #0
   1b894:	umlal	r4, r5, sl, fp
   1b898:	cmp	r5, #0
   1b89c:	bne	1b904 <__assert_fail@plt+0xa778>
   1b8a0:	cmp	lr, #0
   1b8a4:	bne	1b91c <__assert_fail@plt+0xa790>
   1b8a8:	mov	r2, r6
   1b8ac:	mov	r3, r4
   1b8b0:	orr	r0, r0, lr
   1b8b4:	sub	ip, ip, #1
   1b8b8:	cmn	ip, #1
   1b8bc:	beq	1b92c <__assert_fail@plt+0xa7a0>
   1b8c0:	mov	lr, #0
   1b8c4:	cmp	r8, #0
   1b8c8:	sbcs	r4, r9, #0
   1b8cc:	blt	1b874 <__assert_fail@plt+0xa6e8>
   1b8d0:	cmp	r9, #0
   1b8d4:	bne	1b8f0 <__assert_fail@plt+0xa764>
   1b8d8:	cmp	r3, #0
   1b8dc:	bne	1b880 <__assert_fail@plt+0xa6f4>
   1b8e0:	umull	r2, r3, r1, r2
   1b8e4:	mov	r6, r2
   1b8e8:	mov	r4, r3
   1b8ec:	b	1b8a0 <__assert_fail@plt+0xa714>
   1b8f0:	cmp	r3, #0
   1b8f4:	bne	1b904 <__assert_fail@plt+0xa778>
   1b8f8:	mov	sl, r9
   1b8fc:	mov	fp, r2
   1b900:	b	1b888 <__assert_fail@plt+0xa6fc>
   1b904:	mul	r4, r1, r3
   1b908:	mla	r4, r2, r9, r4
   1b90c:	umull	r6, r7, r1, r2
   1b910:	add	r4, r4, r7
   1b914:	mov	lr, #1
   1b918:	b	1b8a0 <__assert_fail@plt+0xa714>
   1b91c:	mvn	r2, #0
   1b920:	mvn	r3, #0
   1b924:	mov	lr, #1
   1b928:	b	1b8b0 <__assert_fail@plt+0xa724>
   1b92c:	ldr	r1, [sp, #4]
   1b930:	strd	r2, [r1]
   1b934:	add	sp, sp, #12
   1b938:	ldrd	r4, [sp]
   1b93c:	ldrd	r6, [sp, #8]
   1b940:	ldrd	r8, [sp, #16]
   1b944:	ldrd	sl, [sp, #24]
   1b948:	add	sp, sp, #32
   1b94c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b950:	mov	r0, #0
   1b954:	b	1b934 <__assert_fail@plt+0xa7a8>
   1b958:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1b95c:	strd	r6, [sp, #8]
   1b960:	strd	r8, [sp, #16]
   1b964:	str	lr, [sp, #24]
   1b968:	sub	sp, sp, #20
   1b96c:	cmp	r2, #36	; 0x24
   1b970:	bhi	1b9c4 <__assert_fail@plt+0xa838>
   1b974:	mov	r5, r0
   1b978:	mov	r6, r1
   1b97c:	mov	r7, r2
   1b980:	mov	r9, r3
   1b984:	cmp	r1, #0
   1b988:	addeq	r6, sp, #12
   1b98c:	bl	11090 <__errno_location@plt>
   1b990:	mov	r8, r0
   1b994:	mov	r3, #0
   1b998:	str	r3, [r0]
   1b99c:	ldrb	r4, [r5]
   1b9a0:	bl	11054 <__ctype_b_loc@plt>
   1b9a4:	ldr	r1, [r0]
   1b9a8:	mov	r2, r5
   1b9ac:	lsl	r3, r4, #1
   1b9b0:	ldrh	r3, [r1, r3]
   1b9b4:	tst	r3, #8192	; 0x2000
   1b9b8:	beq	1b9e4 <__assert_fail@plt+0xa858>
   1b9bc:	ldrb	r4, [r2, #1]!
   1b9c0:	b	1b9ac <__assert_fail@plt+0xa820>
   1b9c4:	movw	r3, #55804	; 0xd9fc
   1b9c8:	movt	r3, #1
   1b9cc:	mov	r2, #85	; 0x55
   1b9d0:	movw	r1, #55816	; 0xda08
   1b9d4:	movt	r1, #1
   1b9d8:	movw	r0, #55832	; 0xda18
   1b9dc:	movt	r0, #1
   1b9e0:	bl	1118c <__assert_fail@plt>
   1b9e4:	cmp	r4, #45	; 0x2d
   1b9e8:	moveq	r4, #4
   1b9ec:	beq	1bb80 <__assert_fail@plt+0xa9f4>
   1b9f0:	mov	r3, #0
   1b9f4:	mov	r2, r7
   1b9f8:	mov	r1, r6
   1b9fc:	mov	r0, r5
   1ba00:	bl	10f40 <__strtoull_internal@plt>
   1ba04:	strd	r0, [sp]
   1ba08:	ldr	r7, [r6]
   1ba0c:	cmp	r7, r5
   1ba10:	beq	1ba34 <__assert_fail@plt+0xa8a8>
   1ba14:	ldr	r3, [r8]
   1ba18:	cmp	r3, #0
   1ba1c:	beq	1bb58 <__assert_fail@plt+0xa9cc>
   1ba20:	cmp	r3, #34	; 0x22
   1ba24:	moveq	r4, #1
   1ba28:	beq	1bb5c <__assert_fail@plt+0xa9d0>
   1ba2c:	mov	r4, #4
   1ba30:	b	1bb80 <__assert_fail@plt+0xa9f4>
   1ba34:	ldr	r3, [sp, #48]	; 0x30
   1ba38:	cmp	r3, #0
   1ba3c:	beq	1be98 <__assert_fail@plt+0xad0c>
   1ba40:	ldrb	r1, [r5]
   1ba44:	cmp	r1, #0
   1ba48:	moveq	r4, #4
   1ba4c:	beq	1bb80 <__assert_fail@plt+0xa9f4>
   1ba50:	mov	r0, r3
   1ba54:	bl	11084 <strchr@plt>
   1ba58:	cmp	r0, #0
   1ba5c:	beq	1bea0 <__assert_fail@plt+0xad14>
   1ba60:	mov	r2, #1
   1ba64:	mov	r3, #0
   1ba68:	strd	r2, [sp]
   1ba6c:	ldrb	r5, [r7]
   1ba70:	mov	r4, #0
   1ba74:	mov	r1, r5
   1ba78:	ldr	r0, [sp, #48]	; 0x30
   1ba7c:	bl	11084 <strchr@plt>
   1ba80:	cmp	r0, #0
   1ba84:	beq	1bb9c <__assert_fail@plt+0xaa10>
   1ba88:	sub	r3, r5, #69	; 0x45
   1ba8c:	cmp	r3, #47	; 0x2f
   1ba90:	ldrls	pc, [pc, r3, lsl #2]
   1ba94:	b	1bce8 <__assert_fail@plt+0xab5c>
   1ba98:	andeq	fp, r1, ip, lsr #23
   1ba9c:	andeq	fp, r1, r8, ror #25
   1baa0:	andeq	fp, r1, ip, lsr #23
   1baa4:	andeq	fp, r1, r8, ror #25
   1baa8:	andeq	fp, r1, r8, ror #25
   1baac:	andeq	fp, r1, r8, ror #25
   1bab0:	andeq	fp, r1, ip, lsr #23
   1bab4:	andeq	fp, r1, r8, ror #25
   1bab8:	andeq	fp, r1, ip, lsr #23
   1babc:	andeq	fp, r1, r8, ror #25
   1bac0:	andeq	fp, r1, r8, ror #25
   1bac4:	andeq	fp, r1, ip, lsr #23
   1bac8:	andeq	fp, r1, r8, ror #25
   1bacc:	andeq	fp, r1, r8, ror #25
   1bad0:	andeq	fp, r1, r8, ror #25
   1bad4:	andeq	fp, r1, ip, lsr #23
   1bad8:	andeq	fp, r1, r8, ror #25
   1badc:	andeq	fp, r1, r8, ror #25
   1bae0:	andeq	fp, r1, r8, ror #25
   1bae4:	andeq	fp, r1, r8, ror #25
   1bae8:	andeq	fp, r1, ip, lsr #23
   1baec:	andeq	fp, r1, ip, lsr #23
   1baf0:	andeq	fp, r1, r8, ror #25
   1baf4:	andeq	fp, r1, r8, ror #25
   1baf8:	andeq	fp, r1, r8, ror #25
   1bafc:	andeq	fp, r1, r8, ror #25
   1bb00:	andeq	fp, r1, r8, ror #25
   1bb04:	andeq	fp, r1, r8, ror #25
   1bb08:	andeq	fp, r1, r8, ror #25
   1bb0c:	andeq	fp, r1, r8, ror #25
   1bb10:	andeq	fp, r1, r8, ror #25
   1bb14:	andeq	fp, r1, r8, ror #25
   1bb18:	andeq	fp, r1, r8, ror #25
   1bb1c:	andeq	fp, r1, r8, ror #25
   1bb20:	andeq	fp, r1, ip, lsr #23
   1bb24:	andeq	fp, r1, r8, ror #25
   1bb28:	andeq	fp, r1, r8, ror #25
   1bb2c:	andeq	fp, r1, r8, ror #25
   1bb30:	andeq	fp, r1, ip, lsr #23
   1bb34:	andeq	fp, r1, r8, ror #25
   1bb38:	andeq	fp, r1, ip, lsr #23
   1bb3c:	andeq	fp, r1, r8, ror #25
   1bb40:	andeq	fp, r1, r8, ror #25
   1bb44:	andeq	fp, r1, r8, ror #25
   1bb48:	andeq	fp, r1, r8, ror #25
   1bb4c:	andeq	fp, r1, r8, ror #25
   1bb50:	andeq	fp, r1, r8, ror #25
   1bb54:	andeq	fp, r1, ip, lsr #23
   1bb58:	mov	r4, #0
   1bb5c:	ldr	r3, [sp, #48]	; 0x30
   1bb60:	cmp	r3, #0
   1bb64:	strdeq	r0, [r9]
   1bb68:	beq	1bb80 <__assert_fail@plt+0xa9f4>
   1bb6c:	ldrb	r5, [r7]
   1bb70:	cmp	r5, #0
   1bb74:	bne	1ba74 <__assert_fail@plt+0xa8e8>
   1bb78:	ldrd	r2, [sp]
   1bb7c:	strd	r2, [r9]
   1bb80:	mov	r0, r4
   1bb84:	add	sp, sp, #20
   1bb88:	ldrd	r4, [sp]
   1bb8c:	ldrd	r6, [sp, #8]
   1bb90:	ldrd	r8, [sp, #16]
   1bb94:	add	sp, sp, #24
   1bb98:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb9c:	ldrd	r2, [sp]
   1bba0:	strd	r2, [r9]
   1bba4:	orr	r4, r4, #2
   1bba8:	b	1bb80 <__assert_fail@plt+0xa9f4>
   1bbac:	mov	r1, #48	; 0x30
   1bbb0:	ldr	r0, [sp, #48]	; 0x30
   1bbb4:	bl	11084 <strchr@plt>
   1bbb8:	cmp	r0, #0
   1bbbc:	beq	1bcf4 <__assert_fail@plt+0xab68>
   1bbc0:	ldrb	r3, [r7, #1]
   1bbc4:	cmp	r3, #68	; 0x44
   1bbc8:	beq	1bd00 <__assert_fail@plt+0xab74>
   1bbcc:	cmp	r3, #105	; 0x69
   1bbd0:	beq	1bcd0 <__assert_fail@plt+0xab44>
   1bbd4:	cmp	r3, #66	; 0x42
   1bbd8:	moveq	r7, #2
   1bbdc:	movne	r7, #1
   1bbe0:	moveq	r1, #1000	; 0x3e8
   1bbe4:	movne	r1, #1024	; 0x400
   1bbe8:	sub	r5, r5, #66	; 0x42
   1bbec:	cmp	r5, #53	; 0x35
   1bbf0:	ldrls	pc, [pc, r5, lsl #2]
   1bbf4:	b	1be64 <__assert_fail@plt+0xacd8>
   1bbf8:	andeq	fp, r1, r4, asr sp
   1bbfc:	andeq	fp, r1, r4, ror #28
   1bc00:	andeq	fp, r1, r4, ror #28
   1bc04:	muleq	r1, ip, sp
   1bc08:	andeq	fp, r1, r4, ror #28
   1bc0c:	andeq	fp, r1, ip, lsr #27
   1bc10:	andeq	fp, r1, r4, ror #28
   1bc14:	andeq	fp, r1, r4, ror #28
   1bc18:	andeq	fp, r1, r4, ror #28
   1bc1c:			; <UNDEFINED> instruction: 0x0001bdbc
   1bc20:	andeq	fp, r1, r4, ror #28
   1bc24:	andeq	fp, r1, ip, asr #27
   1bc28:	andeq	fp, r1, r4, ror #28
   1bc2c:	andeq	fp, r1, r4, ror #28
   1bc30:	ldrdeq	fp, [r1], -ip
   1bc34:	andeq	fp, r1, r4, ror #28
   1bc38:	andeq	fp, r1, r4, ror #28
   1bc3c:	andeq	fp, r1, r4, ror #28
   1bc40:	andeq	fp, r1, ip, ror #27
   1bc44:	andeq	fp, r1, r4, ror #28
   1bc48:	andeq	fp, r1, r4, ror #28
   1bc4c:	andeq	fp, r1, r4, ror #28
   1bc50:	andeq	fp, r1, r4, ror #28
   1bc54:	andeq	fp, r1, r4, asr #28
   1bc58:	andeq	fp, r1, r4, asr lr
   1bc5c:	andeq	fp, r1, r4, ror #28
   1bc60:	andeq	fp, r1, r4, ror #28
   1bc64:	andeq	fp, r1, r4, ror #28
   1bc68:	andeq	fp, r1, r4, ror #28
   1bc6c:	andeq	fp, r1, r4, ror #28
   1bc70:	andeq	fp, r1, r4, ror #28
   1bc74:	andeq	fp, r1, r4, ror #28
   1bc78:	andeq	fp, r1, ip, lsl #26
   1bc7c:	andeq	fp, r1, r4, ror lr
   1bc80:	andeq	fp, r1, r4, ror #28
   1bc84:	andeq	fp, r1, r4, ror #28
   1bc88:	andeq	fp, r1, r4, ror #28
   1bc8c:	andeq	fp, r1, ip, lsr #27
   1bc90:	andeq	fp, r1, r4, ror #28
   1bc94:	andeq	fp, r1, r4, ror #28
   1bc98:	andeq	fp, r1, r4, ror #28
   1bc9c:			; <UNDEFINED> instruction: 0x0001bdbc
   1bca0:	andeq	fp, r1, r4, ror #28
   1bca4:	andeq	fp, r1, ip, asr #27
   1bca8:	andeq	fp, r1, r4, ror #28
   1bcac:	andeq	fp, r1, r4, ror #28
   1bcb0:	andeq	fp, r1, r4, ror #28
   1bcb4:	andeq	fp, r1, r4, ror #28
   1bcb8:	andeq	fp, r1, r4, ror #28
   1bcbc:	andeq	fp, r1, r4, ror #28
   1bcc0:	andeq	fp, r1, ip, ror #27
   1bcc4:	andeq	fp, r1, r4, ror #28
   1bcc8:	andeq	fp, r1, r4, ror #28
   1bccc:	strdeq	fp, [r1], -ip
   1bcd0:	ldrb	r3, [r7, #2]
   1bcd4:	cmp	r3, #66	; 0x42
   1bcd8:	movne	r7, #1
   1bcdc:	moveq	r7, #3
   1bce0:	mov	r1, #1024	; 0x400
   1bce4:	b	1bbe8 <__assert_fail@plt+0xaa5c>
   1bce8:	mov	r7, #1
   1bcec:	mov	r1, #1024	; 0x400
   1bcf0:	b	1bbe8 <__assert_fail@plt+0xaa5c>
   1bcf4:	mov	r7, #1
   1bcf8:	mov	r1, #1024	; 0x400
   1bcfc:	b	1bbe8 <__assert_fail@plt+0xaa5c>
   1bd00:	mov	r7, #2
   1bd04:	mov	r1, #1000	; 0x3e8
   1bd08:	b	1bbe8 <__assert_fail@plt+0xaa5c>
   1bd0c:	ldr	r3, [sp]
   1bd10:	ldr	ip, [sp, #4]
   1bd14:	lsl	r2, ip, #9
   1bd18:	orr	r2, r2, r3, lsr #23
   1bd1c:	lsl	r3, r3, #9
   1bd20:	mov	r0, #0
   1bd24:	mov	r1, r0
   1bd28:	lsr	r0, ip, #23
   1bd2c:	orrs	r1, r0, r1
   1bd30:	streq	r3, [sp]
   1bd34:	streq	r2, [sp, #4]
   1bd38:	moveq	r0, #0
   1bd3c:	beq	1be78 <__assert_fail@plt+0xacec>
   1bd40:	mvn	r2, #0
   1bd44:	mvn	r3, #0
   1bd48:	strd	r2, [sp]
   1bd4c:	mov	r0, #1
   1bd50:	b	1be78 <__assert_fail@plt+0xacec>
   1bd54:	ldr	r3, [sp]
   1bd58:	ldr	ip, [sp, #4]
   1bd5c:	lsl	r2, ip, #10
   1bd60:	orr	r2, r2, r3, lsr #22
   1bd64:	lsl	r3, r3, #10
   1bd68:	mov	r0, #0
   1bd6c:	mov	r1, r0
   1bd70:	lsr	r0, ip, #22
   1bd74:	orrs	r1, r0, r1
   1bd78:	streq	r3, [sp]
   1bd7c:	streq	r2, [sp, #4]
   1bd80:	moveq	r0, #0
   1bd84:	beq	1be78 <__assert_fail@plt+0xacec>
   1bd88:	mvn	r2, #0
   1bd8c:	mvn	r3, #0
   1bd90:	strd	r2, [sp]
   1bd94:	mov	r0, #1
   1bd98:	b	1be78 <__assert_fail@plt+0xacec>
   1bd9c:	mov	r2, #6
   1bda0:	mov	r0, sp
   1bda4:	bl	1b834 <__assert_fail@plt+0xa6a8>
   1bda8:	b	1be78 <__assert_fail@plt+0xacec>
   1bdac:	mov	r2, #3
   1bdb0:	mov	r0, sp
   1bdb4:	bl	1b834 <__assert_fail@plt+0xa6a8>
   1bdb8:	b	1be78 <__assert_fail@plt+0xacec>
   1bdbc:	mov	r2, #1
   1bdc0:	mov	r0, sp
   1bdc4:	bl	1b834 <__assert_fail@plt+0xa6a8>
   1bdc8:	b	1be78 <__assert_fail@plt+0xacec>
   1bdcc:	mov	r2, #2
   1bdd0:	mov	r0, sp
   1bdd4:	bl	1b834 <__assert_fail@plt+0xa6a8>
   1bdd8:	b	1be78 <__assert_fail@plt+0xacec>
   1bddc:	mov	r2, #5
   1bde0:	mov	r0, sp
   1bde4:	bl	1b834 <__assert_fail@plt+0xa6a8>
   1bde8:	b	1be78 <__assert_fail@plt+0xacec>
   1bdec:	mov	r2, #4
   1bdf0:	mov	r0, sp
   1bdf4:	bl	1b834 <__assert_fail@plt+0xa6a8>
   1bdf8:	b	1be78 <__assert_fail@plt+0xacec>
   1bdfc:	ldr	r3, [sp]
   1be00:	ldr	r2, [sp, #4]
   1be04:	adds	r3, r3, r3
   1be08:	adc	r2, r2, r2
   1be0c:	mov	r1, #0
   1be10:	mov	r0, r1
   1be14:	ldr	r1, [sp, #4]
   1be18:	lsr	r1, r1, #31
   1be1c:	orrs	r1, r1, r0
   1be20:	streq	r3, [sp]
   1be24:	streq	r2, [sp, #4]
   1be28:	moveq	r0, #0
   1be2c:	beq	1be78 <__assert_fail@plt+0xacec>
   1be30:	mvn	r2, #0
   1be34:	mvn	r3, #0
   1be38:	strd	r2, [sp]
   1be3c:	mov	r0, #1
   1be40:	b	1be78 <__assert_fail@plt+0xacec>
   1be44:	mov	r2, #8
   1be48:	mov	r0, sp
   1be4c:	bl	1b834 <__assert_fail@plt+0xa6a8>
   1be50:	b	1be78 <__assert_fail@plt+0xacec>
   1be54:	mov	r2, #7
   1be58:	mov	r0, sp
   1be5c:	bl	1b834 <__assert_fail@plt+0xa6a8>
   1be60:	b	1be78 <__assert_fail@plt+0xacec>
   1be64:	ldrd	r2, [sp]
   1be68:	strd	r2, [r9]
   1be6c:	orr	r4, r4, #2
   1be70:	b	1bb80 <__assert_fail@plt+0xa9f4>
   1be74:	mov	r0, #0
   1be78:	orr	r4, r4, r0
   1be7c:	ldr	r3, [r6]
   1be80:	add	r2, r3, r7
   1be84:	str	r2, [r6]
   1be88:	ldrb	r3, [r3, r7]
   1be8c:	cmp	r3, #0
   1be90:	orrne	r4, r4, #2
   1be94:	b	1bb78 <__assert_fail@plt+0xa9ec>
   1be98:	mov	r4, #4
   1be9c:	b	1bb80 <__assert_fail@plt+0xa9f4>
   1bea0:	mov	r4, #4
   1bea4:	b	1bb80 <__assert_fail@plt+0xa9f4>
   1bea8:	strd	r4, [sp, #-16]!
   1beac:	str	r6, [sp, #8]
   1beb0:	str	lr, [sp, #12]
   1beb4:	cmp	r1, #0
   1beb8:	cmpne	r0, #0
   1bebc:	beq	1bef8 <__assert_fail@plt+0xad6c>
   1bec0:	mov	r2, r0
   1bec4:	mov	r3, r1
   1bec8:	umull	r4, r5, r0, r1
   1becc:	adds	r1, r5, #0
   1bed0:	movne	r1, #1
   1bed4:	cmp	r4, #0
   1bed8:	movlt	r1, #1
   1bedc:	cmp	r1, #0
   1bee0:	beq	1bf00 <__assert_fail@plt+0xad74>
   1bee4:	bl	11090 <__errno_location@plt>
   1bee8:	mov	r3, #12
   1beec:	str	r3, [r0]
   1bef0:	mov	r0, #0
   1bef4:	b	1bf0c <__assert_fail@plt+0xad80>
   1bef8:	mov	r3, #1
   1befc:	mov	r2, r3
   1bf00:	mov	r1, r3
   1bf04:	mov	r0, r2
   1bf08:	bl	10ebc <calloc@plt>
   1bf0c:	ldrd	r4, [sp]
   1bf10:	ldr	r6, [sp, #8]
   1bf14:	add	sp, sp, #12
   1bf18:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf1c:	str	r4, [sp, #-8]!
   1bf20:	str	lr, [sp, #4]
   1bf24:	cmp	r0, #0
   1bf28:	beq	1bf44 <__assert_fail@plt+0xadb8>
   1bf2c:	bge	1bf48 <__assert_fail@plt+0xadbc>
   1bf30:	bl	11090 <__errno_location@plt>
   1bf34:	mov	r3, #12
   1bf38:	str	r3, [r0]
   1bf3c:	mov	r0, #0
   1bf40:	b	1bf4c <__assert_fail@plt+0xadc0>
   1bf44:	mov	r0, #1
   1bf48:	bl	1100c <malloc@plt>
   1bf4c:	ldr	r4, [sp]
   1bf50:	add	sp, sp, #4
   1bf54:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf58:	str	r4, [sp, #-8]!
   1bf5c:	str	lr, [sp, #4]
   1bf60:	cmp	r0, #0
   1bf64:	beq	1bf88 <__assert_fail@plt+0xadfc>
   1bf68:	cmp	r1, #0
   1bf6c:	beq	1bf94 <__assert_fail@plt+0xae08>
   1bf70:	cmp	r1, #0
   1bf74:	blt	1bfa0 <__assert_fail@plt+0xae14>
   1bf78:	bl	10f88 <realloc@plt>
   1bf7c:	ldr	r4, [sp]
   1bf80:	add	sp, sp, #4
   1bf84:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf88:	mov	r0, r1
   1bf8c:	bl	1bf1c <__assert_fail@plt+0xad90>
   1bf90:	b	1bf7c <__assert_fail@plt+0xadf0>
   1bf94:	bl	187e4 <__assert_fail@plt+0x7658>
   1bf98:	mov	r0, #0
   1bf9c:	b	1bf7c <__assert_fail@plt+0xadf0>
   1bfa0:	bl	11090 <__errno_location@plt>
   1bfa4:	mov	r3, #12
   1bfa8:	str	r3, [r0]
   1bfac:	mov	r0, #0
   1bfb0:	b	1bf7c <__assert_fail@plt+0xadf0>
   1bfb4:	strd	r4, [sp, #-16]!
   1bfb8:	str	r6, [sp, #8]
   1bfbc:	str	lr, [sp, #12]
   1bfc0:	mov	r5, r0
   1bfc4:	bl	10fe8 <__fpending@plt>
   1bfc8:	mov	r6, r0
   1bfcc:	ldr	r4, [r5]
   1bfd0:	and	r4, r4, #32
   1bfd4:	mov	r0, r5
   1bfd8:	bl	18608 <__assert_fail@plt+0x747c>
   1bfdc:	cmp	r4, #0
   1bfe0:	bne	1c014 <__assert_fail@plt+0xae88>
   1bfe4:	cmp	r0, #0
   1bfe8:	beq	1c004 <__assert_fail@plt+0xae78>
   1bfec:	cmp	r6, #0
   1bff0:	bne	1c030 <__assert_fail@plt+0xaea4>
   1bff4:	bl	11090 <__errno_location@plt>
   1bff8:	ldr	r0, [r0]
   1bffc:	subs	r0, r0, #9
   1c000:	mvnne	r0, #0
   1c004:	ldrd	r4, [sp]
   1c008:	ldr	r6, [sp, #8]
   1c00c:	add	sp, sp, #12
   1c010:	pop	{pc}		; (ldr pc, [sp], #4)
   1c014:	cmp	r0, #0
   1c018:	bne	1c038 <__assert_fail@plt+0xaeac>
   1c01c:	bl	11090 <__errno_location@plt>
   1c020:	mov	r3, #0
   1c024:	str	r3, [r0]
   1c028:	mvn	r0, #0
   1c02c:	b	1c004 <__assert_fail@plt+0xae78>
   1c030:	mvn	r0, #0
   1c034:	b	1c004 <__assert_fail@plt+0xae78>
   1c038:	mvn	r0, #0
   1c03c:	b	1c004 <__assert_fail@plt+0xae78>
   1c040:	push	{r1, r2, r3}
   1c044:	strd	r4, [sp, #-16]!
   1c048:	str	r6, [sp, #8]
   1c04c:	str	lr, [sp, #12]
   1c050:	sub	sp, sp, #12
   1c054:	mov	r5, r0
   1c058:	ldr	r1, [sp, #28]
   1c05c:	add	r3, sp, #32
   1c060:	str	r3, [sp, #4]
   1c064:	cmp	r1, #0
   1c068:	beq	1c0b0 <__assert_fail@plt+0xaf24>
   1c06c:	movw	r3, #1030	; 0x406
   1c070:	cmp	r1, r3
   1c074:	beq	1c0ec <__assert_fail@plt+0xaf60>
   1c078:	cmp	r1, #11
   1c07c:	beq	1c29c <__assert_fail@plt+0xb110>
   1c080:	bgt	1c228 <__assert_fail@plt+0xb09c>
   1c084:	cmp	r1, #3
   1c088:	beq	1c29c <__assert_fail@plt+0xb110>
   1c08c:	ble	1c1e8 <__assert_fail@plt+0xb05c>
   1c090:	cmp	r1, #8
   1c094:	beq	1c208 <__assert_fail@plt+0xb07c>
   1c098:	ble	1c200 <__assert_fail@plt+0xb074>
   1c09c:	cmp	r1, #9
   1c0a0:	beq	1c29c <__assert_fail@plt+0xb110>
   1c0a4:	cmp	r1, #10
   1c0a8:	bne	1c260 <__assert_fail@plt+0xb0d4>
   1c0ac:	b	1c208 <__assert_fail@plt+0xb07c>
   1c0b0:	ldr	r3, [sp, #4]
   1c0b4:	add	r2, r3, #4
   1c0b8:	str	r2, [sp, #4]
   1c0bc:	ldr	r2, [r3]
   1c0c0:	mov	r1, #0
   1c0c4:	bl	110fc <fcntl64@plt>
   1c0c8:	mov	r4, r0
   1c0cc:	mov	r0, r4
   1c0d0:	add	sp, sp, #12
   1c0d4:	ldrd	r4, [sp]
   1c0d8:	ldr	r6, [sp, #8]
   1c0dc:	ldr	lr, [sp, #12]
   1c0e0:	add	sp, sp, #16
   1c0e4:	add	sp, sp, #12
   1c0e8:	bx	lr
   1c0ec:	ldr	r3, [sp, #4]
   1c0f0:	add	r2, r3, #4
   1c0f4:	str	r2, [sp, #4]
   1c0f8:	ldr	r6, [r3]
   1c0fc:	movw	r3, #58088	; 0xe2e8
   1c100:	movt	r3, #2
   1c104:	ldr	r3, [r3]
   1c108:	cmp	r3, #0
   1c10c:	blt	1c174 <__assert_fail@plt+0xafe8>
   1c110:	mov	r2, r6
   1c114:	movw	r1, #1030	; 0x406
   1c118:	bl	110fc <fcntl64@plt>
   1c11c:	subs	r4, r0, #0
   1c120:	blt	1c138 <__assert_fail@plt+0xafac>
   1c124:	movw	r3, #58088	; 0xe2e8
   1c128:	movt	r3, #2
   1c12c:	mov	r2, #1
   1c130:	str	r2, [r3]
   1c134:	b	1c0cc <__assert_fail@plt+0xaf40>
   1c138:	bl	11090 <__errno_location@plt>
   1c13c:	ldr	r3, [r0]
   1c140:	cmp	r3, #22
   1c144:	bne	1c124 <__assert_fail@plt+0xaf98>
   1c148:	mov	r2, r6
   1c14c:	mov	r1, #0
   1c150:	mov	r0, r5
   1c154:	bl	110fc <fcntl64@plt>
   1c158:	subs	r4, r0, #0
   1c15c:	blt	1c0cc <__assert_fail@plt+0xaf40>
   1c160:	movw	r3, #58088	; 0xe2e8
   1c164:	movt	r3, #2
   1c168:	mvn	r2, #0
   1c16c:	str	r2, [r3]
   1c170:	b	1c19c <__assert_fail@plt+0xb010>
   1c174:	mov	r2, r6
   1c178:	mov	r1, #0
   1c17c:	bl	110fc <fcntl64@plt>
   1c180:	subs	r4, r0, #0
   1c184:	blt	1c0cc <__assert_fail@plt+0xaf40>
   1c188:	movw	r3, #58088	; 0xe2e8
   1c18c:	movt	r3, #2
   1c190:	ldr	r3, [r3]
   1c194:	cmn	r3, #1
   1c198:	bne	1c0cc <__assert_fail@plt+0xaf40>
   1c19c:	mov	r1, #1
   1c1a0:	mov	r0, r4
   1c1a4:	bl	110fc <fcntl64@plt>
   1c1a8:	subs	r2, r0, #0
   1c1ac:	blt	1c1c8 <__assert_fail@plt+0xb03c>
   1c1b0:	orr	r2, r2, #1
   1c1b4:	mov	r1, #2
   1c1b8:	mov	r0, r4
   1c1bc:	bl	110fc <fcntl64@plt>
   1c1c0:	cmn	r0, #1
   1c1c4:	bne	1c0cc <__assert_fail@plt+0xaf40>
   1c1c8:	bl	11090 <__errno_location@plt>
   1c1cc:	mov	r5, r0
   1c1d0:	ldr	r6, [r0]
   1c1d4:	mov	r0, r4
   1c1d8:	bl	11174 <close@plt>
   1c1dc:	str	r6, [r5]
   1c1e0:	mvn	r4, #0
   1c1e4:	b	1c0cc <__assert_fail@plt+0xaf40>
   1c1e8:	cmp	r1, #1
   1c1ec:	beq	1c29c <__assert_fail@plt+0xb110>
   1c1f0:	bgt	1c208 <__assert_fail@plt+0xb07c>
   1c1f4:	cmp	r1, #0
   1c1f8:	bne	1c260 <__assert_fail@plt+0xb0d4>
   1c1fc:	b	1c208 <__assert_fail@plt+0xb07c>
   1c200:	cmp	r1, #4
   1c204:	bne	1c260 <__assert_fail@plt+0xb0d4>
   1c208:	ldr	r3, [sp, #4]
   1c20c:	add	r2, r3, #4
   1c210:	str	r2, [sp, #4]
   1c214:	ldr	r2, [r3]
   1c218:	mov	r0, r5
   1c21c:	bl	110fc <fcntl64@plt>
   1c220:	mov	r4, r0
   1c224:	b	1c0cc <__assert_fail@plt+0xaf40>
   1c228:	movw	r3, #1031	; 0x407
   1c22c:	cmp	r1, r3
   1c230:	bgt	1c280 <__assert_fail@plt+0xb0f4>
   1c234:	movw	r3, #1030	; 0x406
   1c238:	cmp	r1, r3
   1c23c:	bge	1c208 <__assert_fail@plt+0xb07c>
   1c240:	movw	r3, #1025	; 0x401
   1c244:	cmp	r1, r3
   1c248:	beq	1c29c <__assert_fail@plt+0xb110>
   1c24c:	movw	r3, #1026	; 0x402
   1c250:	cmp	r1, r3
   1c254:	beq	1c208 <__assert_fail@plt+0xb07c>
   1c258:	cmp	r1, #1024	; 0x400
   1c25c:	beq	1c208 <__assert_fail@plt+0xb07c>
   1c260:	ldr	r3, [sp, #4]
   1c264:	add	r2, r3, #4
   1c268:	str	r2, [sp, #4]
   1c26c:	ldr	r2, [r3]
   1c270:	mov	r0, r5
   1c274:	bl	110fc <fcntl64@plt>
   1c278:	mov	r4, r0
   1c27c:	b	1c0cc <__assert_fail@plt+0xaf40>
   1c280:	movw	r3, #1033	; 0x409
   1c284:	cmp	r1, r3
   1c288:	beq	1c208 <__assert_fail@plt+0xb07c>
   1c28c:	blt	1c29c <__assert_fail@plt+0xb110>
   1c290:	movw	r3, #1034	; 0x40a
   1c294:	cmp	r1, r3
   1c298:	bne	1c260 <__assert_fail@plt+0xb0d4>
   1c29c:	mov	r0, r5
   1c2a0:	bl	110fc <fcntl64@plt>
   1c2a4:	mov	r4, r0
   1c2a8:	b	1c0cc <__assert_fail@plt+0xaf40>
   1c2ac:	str	r4, [sp, #-8]!
   1c2b0:	str	lr, [sp, #4]
   1c2b4:	mov	r0, #14
   1c2b8:	bl	1112c <nl_langinfo@plt>
   1c2bc:	cmp	r0, #0
   1c2c0:	beq	1c2e4 <__assert_fail@plt+0xb158>
   1c2c4:	ldrb	r2, [r0]
   1c2c8:	movw	r3, #55872	; 0xda40
   1c2cc:	movt	r3, #1
   1c2d0:	cmp	r2, #0
   1c2d4:	moveq	r0, r3
   1c2d8:	ldr	r4, [sp]
   1c2dc:	add	sp, sp, #4
   1c2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2e4:	movw	r0, #55872	; 0xda40
   1c2e8:	movt	r0, #1
   1c2ec:	b	1c2d8 <__assert_fail@plt+0xb14c>
   1c2f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c2f4:	strd	r6, [sp, #8]
   1c2f8:	str	lr, [sp, #16]
   1c2fc:	sub	sp, sp, #12
   1c300:	mov	r7, r1
   1c304:	mov	r5, r2
   1c308:	subs	r6, r0, #0
   1c30c:	addeq	r6, sp, #4
   1c310:	mov	r0, r6
   1c314:	bl	10ff4 <mbrtowc@plt>
   1c318:	mov	r4, r0
   1c31c:	cmp	r5, #0
   1c320:	cmnne	r0, #3
   1c324:	bhi	1c340 <__assert_fail@plt+0xb1b4>
   1c328:	mov	r0, r4
   1c32c:	add	sp, sp, #12
   1c330:	ldrd	r4, [sp]
   1c334:	ldrd	r6, [sp, #8]
   1c338:	add	sp, sp, #16
   1c33c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c340:	mov	r0, #0
   1c344:	bl	1c39c <__assert_fail@plt+0xb210>
   1c348:	cmp	r0, #0
   1c34c:	bne	1c328 <__assert_fail@plt+0xb19c>
   1c350:	ldrb	r3, [r7]
   1c354:	str	r3, [r6]
   1c358:	mov	r4, #1
   1c35c:	b	1c328 <__assert_fail@plt+0xb19c>
   1c360:	str	r4, [sp, #-8]!
   1c364:	str	lr, [sp, #4]
   1c368:	umull	r2, r3, r1, r2
   1c36c:	cmp	r3, #0
   1c370:	bne	1c388 <__assert_fail@plt+0xb1fc>
   1c374:	mov	r1, r2
   1c378:	bl	1bf58 <__assert_fail@plt+0xadcc>
   1c37c:	ldr	r4, [sp]
   1c380:	add	sp, sp, #4
   1c384:	pop	{pc}		; (ldr pc, [sp], #4)
   1c388:	bl	11090 <__errno_location@plt>
   1c38c:	mov	r3, #12
   1c390:	str	r3, [r0]
   1c394:	mov	r0, #0
   1c398:	b	1c37c <__assert_fail@plt+0xb1f0>
   1c39c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c3a0:	sub	sp, sp, #268	; 0x10c
   1c3a4:	movw	r2, #257	; 0x101
   1c3a8:	add	r1, sp, #4
   1c3ac:	bl	1c3f8 <__assert_fail@plt+0xb26c>
   1c3b0:	cmp	r0, #0
   1c3b4:	movne	r0, #0
   1c3b8:	bne	1c3f0 <__assert_fail@plt+0xb264>
   1c3bc:	movw	r1, #55880	; 0xda48
   1c3c0:	movt	r1, #1
   1c3c4:	add	r0, sp, #4
   1c3c8:	bl	10eec <strcmp@plt>
   1c3cc:	cmp	r0, #0
   1c3d0:	beq	1c3ec <__assert_fail@plt+0xb260>
   1c3d4:	movw	r1, #55884	; 0xda4c
   1c3d8:	movt	r1, #1
   1c3dc:	add	r0, sp, #4
   1c3e0:	bl	10eec <strcmp@plt>
   1c3e4:	adds	r0, r0, #0
   1c3e8:	movne	r0, #1
   1c3ec:	and	r0, r0, #1
   1c3f0:	add	sp, sp, #268	; 0x10c
   1c3f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3f8:	strd	r4, [sp, #-16]!
   1c3fc:	str	r6, [sp, #8]
   1c400:	str	lr, [sp, #12]
   1c404:	mov	r6, r1
   1c408:	mov	r4, r2
   1c40c:	mov	r1, #0
   1c410:	bl	11114 <setlocale@plt>
   1c414:	subs	r5, r0, #0
   1c418:	beq	1c45c <__assert_fail@plt+0xb2d0>
   1c41c:	mov	r0, r5
   1c420:	bl	11078 <strlen@plt>
   1c424:	cmp	r4, r0
   1c428:	bhi	1c478 <__assert_fail@plt+0xb2ec>
   1c42c:	cmp	r4, #0
   1c430:	moveq	r0, #34	; 0x22
   1c434:	beq	1c48c <__assert_fail@plt+0xb300>
   1c438:	sub	r4, r4, #1
   1c43c:	mov	r2, r4
   1c440:	mov	r1, r5
   1c444:	mov	r0, r6
   1c448:	bl	10f34 <memcpy@plt>
   1c44c:	mov	r3, #0
   1c450:	strb	r3, [r6, r4]
   1c454:	mov	r0, #34	; 0x22
   1c458:	b	1c48c <__assert_fail@plt+0xb300>
   1c45c:	cmp	r4, #0
   1c460:	moveq	r0, #22
   1c464:	beq	1c48c <__assert_fail@plt+0xb300>
   1c468:	mov	r3, #0
   1c46c:	strb	r3, [r6]
   1c470:	mov	r0, #22
   1c474:	b	1c48c <__assert_fail@plt+0xb300>
   1c478:	add	r2, r0, #1
   1c47c:	mov	r1, r5
   1c480:	mov	r0, r6
   1c484:	bl	10f34 <memcpy@plt>
   1c488:	mov	r0, #0
   1c48c:	ldrd	r4, [sp]
   1c490:	ldr	r6, [sp, #8]
   1c494:	add	sp, sp, #12
   1c498:	pop	{pc}		; (ldr pc, [sp], #4)
   1c49c:	str	r4, [sp, #-8]!
   1c4a0:	str	lr, [sp, #4]
   1c4a4:	mov	r1, #0
   1c4a8:	bl	11114 <setlocale@plt>
   1c4ac:	ldr	r4, [sp]
   1c4b0:	add	sp, sp, #4
   1c4b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4b8:	cmp	r3, #0
   1c4bc:	cmpeq	r2, #0
   1c4c0:	bne	1c4d8 <__assert_fail@plt+0xb34c>
   1c4c4:	cmp	r1, #0
   1c4c8:	cmpeq	r0, #0
   1c4cc:	mvnne	r1, #0
   1c4d0:	mvnne	r0, #0
   1c4d4:	b	1c4f4 <__assert_fail@plt+0xb368>
   1c4d8:	sub	sp, sp, #8
   1c4dc:	push	{sp, lr}
   1c4e0:	bl	1c504 <__assert_fail@plt+0xb378>
   1c4e4:	ldr	lr, [sp, #4]
   1c4e8:	add	sp, sp, #8
   1c4ec:	pop	{r2, r3}
   1c4f0:	bx	lr
   1c4f4:	push	{r1, lr}
   1c4f8:	mov	r0, #8
   1c4fc:	bl	10ed4 <raise@plt>
   1c500:	pop	{r1, pc}
   1c504:	cmp	r1, r3
   1c508:	cmpeq	r0, r2
   1c50c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c510:	mov	r4, r0
   1c514:	movcc	r0, #0
   1c518:	mov	r5, r1
   1c51c:	ldr	lr, [sp, #36]	; 0x24
   1c520:	movcc	r1, r0
   1c524:	bcc	1c620 <__assert_fail@plt+0xb494>
   1c528:	cmp	r3, #0
   1c52c:	clzeq	ip, r2
   1c530:	clzne	ip, r3
   1c534:	addeq	ip, ip, #32
   1c538:	cmp	r5, #0
   1c53c:	clzeq	r1, r4
   1c540:	addeq	r1, r1, #32
   1c544:	clzne	r1, r5
   1c548:	sub	ip, ip, r1
   1c54c:	sub	sl, ip, #32
   1c550:	lsl	r9, r3, ip
   1c554:	rsb	fp, ip, #32
   1c558:	orr	r9, r9, r2, lsl sl
   1c55c:	orr	r9, r9, r2, lsr fp
   1c560:	lsl	r8, r2, ip
   1c564:	cmp	r5, r9
   1c568:	cmpeq	r4, r8
   1c56c:	movcc	r0, #0
   1c570:	movcc	r1, r0
   1c574:	bcc	1c590 <__assert_fail@plt+0xb404>
   1c578:	mov	r0, #1
   1c57c:	subs	r4, r4, r8
   1c580:	lsl	r1, r0, sl
   1c584:	orr	r1, r1, r0, lsr fp
   1c588:	lsl	r0, r0, ip
   1c58c:	sbc	r5, r5, r9
   1c590:	cmp	ip, #0
   1c594:	beq	1c620 <__assert_fail@plt+0xb494>
   1c598:	lsr	r6, r8, #1
   1c59c:	orr	r6, r6, r9, lsl #31
   1c5a0:	lsr	r7, r9, #1
   1c5a4:	mov	r2, ip
   1c5a8:	b	1c5cc <__assert_fail@plt+0xb440>
   1c5ac:	subs	r3, r4, r6
   1c5b0:	sbc	r8, r5, r7
   1c5b4:	adds	r3, r3, r3
   1c5b8:	adc	r8, r8, r8
   1c5bc:	adds	r4, r3, #1
   1c5c0:	adc	r5, r8, #0
   1c5c4:	subs	r2, r2, #1
   1c5c8:	beq	1c5e8 <__assert_fail@plt+0xb45c>
   1c5cc:	cmp	r5, r7
   1c5d0:	cmpeq	r4, r6
   1c5d4:	bcs	1c5ac <__assert_fail@plt+0xb420>
   1c5d8:	adds	r4, r4, r4
   1c5dc:	adc	r5, r5, r5
   1c5e0:	subs	r2, r2, #1
   1c5e4:	bne	1c5cc <__assert_fail@plt+0xb440>
   1c5e8:	lsr	r3, r4, ip
   1c5ec:	orr	r3, r3, r5, lsl fp
   1c5f0:	lsr	r2, r5, ip
   1c5f4:	orr	r3, r3, r5, lsr sl
   1c5f8:	adds	r0, r0, r4
   1c5fc:	mov	r4, r3
   1c600:	lsl	r3, r2, ip
   1c604:	orr	r3, r3, r4, lsl sl
   1c608:	lsl	ip, r4, ip
   1c60c:	orr	r3, r3, r4, lsr fp
   1c610:	adc	r1, r1, r5
   1c614:	subs	r0, r0, ip
   1c618:	mov	r5, r2
   1c61c:	sbc	r1, r1, r3
   1c620:	cmp	lr, #0
   1c624:	strdne	r4, [lr]
   1c628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c62c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c630:	mov	r7, r0
   1c634:	ldr	r6, [pc, #72]	; 1c684 <__assert_fail@plt+0xb4f8>
   1c638:	ldr	r5, [pc, #72]	; 1c688 <__assert_fail@plt+0xb4fc>
   1c63c:	add	r6, pc, r6
   1c640:	add	r5, pc, r5
   1c644:	sub	r6, r6, r5
   1c648:	mov	r8, r1
   1c64c:	mov	r9, r2
   1c650:	bl	10e90 <fdopen@plt-0x20>
   1c654:	asrs	r6, r6, #2
   1c658:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c65c:	mov	r4, #0
   1c660:	add	r4, r4, #1
   1c664:	ldr	r3, [r5], #4
   1c668:	mov	r2, r9
   1c66c:	mov	r1, r8
   1c670:	mov	r0, r7
   1c674:	blx	r3
   1c678:	cmp	r6, r4
   1c67c:	bne	1c660 <__assert_fail@plt+0xb4d4>
   1c680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c684:	ldrdeq	r1, [r1], -r0
   1c688:	andeq	r1, r1, r8, asr #17
   1c68c:	bx	lr
   1c690:	ldr	r3, [pc, #12]	; 1c6a4 <__assert_fail@plt+0xb518>
   1c694:	mov	r1, #0
   1c698:	add	r3, pc, r3
   1c69c:	ldr	r2, [r3]
   1c6a0:	b	1109c <__cxa_atexit@plt>
   1c6a4:	andeq	r1, r1, ip, ror #20

Disassembly of section .fini:

0001c6a8 <.fini>:
   1c6a8:	push	{r3, lr}
   1c6ac:	pop	{r3, pc}
