
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00011e84 <.init>:
   11e84:	push	{r3, lr}
   11e88:	bl	12d5c <__assert_fail@plt+0x768>
   11e8c:	pop	{r3, pc}

Disassembly of section .plt:

00011e90 <pthread_mutex_unlock@plt-0x14>:
   11e90:	push	{lr}		; (str lr, [sp, #-4]!)
   11e94:	ldr	lr, [pc, #4]	; 11ea0 <pthread_mutex_unlock@plt-0x4>
   11e98:	add	lr, pc, lr
   11e9c:	ldr	pc, [lr, #8]!
   11ea0:	andeq	r2, r5, r0, ror #2

00011ea4 <pthread_mutex_unlock@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #335872	; 0x52000
   11eac:	ldr	pc, [ip, #352]!	; 0x160

00011eb0 <fdopen@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #335872	; 0x52000
   11eb8:	ldr	pc, [ip, #344]!	; 0x158

00011ebc <fstatfs64@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #335872	; 0x52000
   11ec4:	ldr	pc, [ip, #336]!	; 0x150

00011ec8 <calloc@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #335872	; 0x52000
   11ed0:	ldr	pc, [ip, #328]!	; 0x148

00011ed4 <endgrent@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #335872	; 0x52000
   11edc:	ldr	pc, [ip, #320]!	; 0x140

00011ee0 <wctype@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #335872	; 0x52000
   11ee8:	ldr	pc, [ip, #312]!	; 0x138

00011eec <raise@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #335872	; 0x52000
   11ef4:	ldr	pc, [ip, #304]!	; 0x130

00011ef8 <wcrtomb@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #335872	; 0x52000
   11f00:	ldr	pc, [ip, #296]!	; 0x128

00011f04 <gmtime_r@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #335872	; 0x52000
   11f0c:	ldr	pc, [ip, #288]!	; 0x120

00011f10 <__getdelim@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #335872	; 0x52000
   11f18:	ldr	pc, [ip, #280]!	; 0x118

00011f1c <getpwnam@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #335872	; 0x52000
   11f24:	ldr	pc, [ip, #272]!	; 0x110

00011f28 <is_selinux_enabled@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #335872	; 0x52000
   11f30:	ldr	pc, [ip, #264]!	; 0x108

00011f34 <iswctype@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #335872	; 0x52000
   11f3c:	ldr	pc, [ip, #256]!	; 0x100

00011f40 <strcmp@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #335872	; 0x52000
   11f48:	ldr	pc, [ip, #248]!	; 0xf8

00011f4c <strtol@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #335872	; 0x52000
   11f54:	ldr	pc, [ip, #240]!	; 0xf0

00011f58 <getpwuid@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #335872	; 0x52000
   11f60:	ldr	pc, [ip, #232]!	; 0xe8

00011f64 <printf@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #335872	; 0x52000
   11f6c:	ldr	pc, [ip, #224]!	; 0xe0

00011f70 <pthread_mutex_destroy@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #335872	; 0x52000
   11f78:	ldr	pc, [ip, #216]!	; 0xd8

00011f7c <mktime@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #335872	; 0x52000
   11f84:	ldr	pc, [ip, #208]!	; 0xd0

00011f88 <fflush@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #335872	; 0x52000
   11f90:	ldr	pc, [ip, #200]!	; 0xc8

00011f94 <unlinkat@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #335872	; 0x52000
   11f9c:	ldr	pc, [ip, #192]!	; 0xc0

00011fa0 <wcwidth@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #335872	; 0x52000
   11fa8:	ldr	pc, [ip, #184]!	; 0xb8

00011fac <lsetfilecon@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #335872	; 0x52000
   11fb4:	ldr	pc, [ip, #176]!	; 0xb0

00011fb8 <memmove@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #335872	; 0x52000
   11fc0:	ldr	pc, [ip, #168]!	; 0xa8

00011fc4 <free@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #335872	; 0x52000
   11fcc:	ldr	pc, [ip, #160]!	; 0xa0

00011fd0 <pthread_mutex_lock@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #335872	; 0x52000
   11fd8:	ldr	pc, [ip, #152]!	; 0x98

00011fdc <faccessat@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #335872	; 0x52000
   11fe4:	ldr	pc, [ip, #144]!	; 0x90

00011fe8 <ferror@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #335872	; 0x52000
   11ff0:	ldr	pc, [ip, #136]!	; 0x88

00011ff4 <thrd_exit@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #335872	; 0x52000
   11ffc:	ldr	pc, [ip, #128]!	; 0x80

00012000 <strndup@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #335872	; 0x52000
   12008:	ldr	pc, [ip, #120]!	; 0x78

0001200c <clock_gettime@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #335872	; 0x52000
   12014:	ldr	pc, [ip, #112]!	; 0x70

00012018 <_exit@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #335872	; 0x52000
   12020:	ldr	pc, [ip, #104]!	; 0x68

00012024 <memcpy@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #335872	; 0x52000
   1202c:	ldr	pc, [ip, #96]!	; 0x60

00012030 <execvp@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #335872	; 0x52000
   12038:	ldr	pc, [ip, #88]!	; 0x58

0001203c <pthread_mutex_init@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #335872	; 0x52000
   12044:	ldr	pc, [ip, #80]!	; 0x50

00012048 <__strtoull_internal@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #335872	; 0x52000
   12050:	ldr	pc, [ip, #72]!	; 0x48

00012054 <towlower@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #335872	; 0x52000
   1205c:	ldr	pc, [ip, #64]!	; 0x40

00012060 <mbsinit@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #335872	; 0x52000
   12068:	ldr	pc, [ip, #56]!	; 0x38

0001206c <signal@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #335872	; 0x52000
   12074:	ldr	pc, [ip, #48]!	; 0x30

00012078 <time@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #335872	; 0x52000
   12080:	ldr	pc, [ip, #40]!	; 0x28

00012084 <memcmp@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #335872	; 0x52000
   1208c:	ldr	pc, [ip, #32]!

00012090 <stpcpy@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #335872	; 0x52000
   12098:	ldr	pc, [ip, #24]!

0001209c <uname@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #335872	; 0x52000
   120a4:	ldr	pc, [ip, #16]!

000120a8 <ctime@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #335872	; 0x52000
   120b0:	ldr	pc, [ip, #8]!

000120b4 <dcgettext@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #335872	; 0x52000
   120bc:	ldr	pc, [ip, #0]!

000120c0 <strdup@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #331776	; 0x51000
   120c8:	ldr	pc, [ip, #4088]!	; 0xff8

000120cc <sysconf@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #331776	; 0x51000
   120d4:	ldr	pc, [ip, #4080]!	; 0xff0

000120d8 <getrlimit64@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #331776	; 0x51000
   120e0:	ldr	pc, [ip, #4072]!	; 0xfe8

000120e4 <realloc@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #331776	; 0x51000
   120ec:	ldr	pc, [ip, #4064]!	; 0xfe0

000120f0 <fgetfilecon@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #331776	; 0x51000
   120f8:	ldr	pc, [ip, #4056]!	; 0xfd8

000120fc <localtime_r@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #331776	; 0x51000
   12104:	ldr	pc, [ip, #4048]!	; 0xfd0

00012108 <textdomain@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #331776	; 0x51000
   12110:	ldr	pc, [ip, #4040]!	; 0xfc8

00012114 <iswcntrl@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #331776	; 0x51000
   1211c:	ldr	pc, [ip, #4032]!	; 0xfc0

00012120 <chdir@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #331776	; 0x51000
   12128:	ldr	pc, [ip, #4024]!	; 0xfb8

0001212c <__fxstatat64@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #331776	; 0x51000
   12134:	ldr	pc, [ip, #4016]!	; 0xfb0

00012138 <iswprint@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #331776	; 0x51000
   12140:	ldr	pc, [ip, #4008]!	; 0xfa8

00012144 <tzset@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #331776	; 0x51000
   1214c:	ldr	pc, [ip, #4000]!	; 0xfa0

00012150 <poll@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #331776	; 0x51000
   12158:	ldr	pc, [ip, #3992]!	; 0xf98

0001215c <__fxstat64@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #331776	; 0x51000
   12164:	ldr	pc, [ip, #3984]!	; 0xf90

00012168 <fwrite@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #331776	; 0x51000
   12170:	ldr	pc, [ip, #3976]!	; 0xf88

00012174 <strcat@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #331776	; 0x51000
   1217c:	ldr	pc, [ip, #3968]!	; 0xf80

00012180 <lseek64@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #331776	; 0x51000
   12188:	ldr	pc, [ip, #3960]!	; 0xf78

0001218c <waitpid@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #331776	; 0x51000
   12194:	ldr	pc, [ip, #3952]!	; 0xf70

00012198 <__ctype_get_mb_cur_max@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #331776	; 0x51000
   121a0:	ldr	pc, [ip, #3944]!	; 0xf68

000121a4 <hasmntopt@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #331776	; 0x51000
   121ac:	ldr	pc, [ip, #3936]!	; 0xf60

000121b0 <strcpy@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #331776	; 0x51000
   121b8:	ldr	pc, [ip, #3928]!	; 0xf58

000121bc <gettimeofday@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #331776	; 0x51000
   121c4:	ldr	pc, [ip, #3920]!	; 0xf50

000121c8 <__fpending@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #331776	; 0x51000
   121d0:	ldr	pc, [ip, #3912]!	; 0xf48

000121d4 <mbrtowc@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #331776	; 0x51000
   121dc:	ldr	pc, [ip, #3904]!	; 0xf40

000121e0 <strtok_r@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #331776	; 0x51000
   121e8:	ldr	pc, [ip, #3896]!	; 0xf38

000121ec <error@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #331776	; 0x51000
   121f4:	ldr	pc, [ip, #3888]!	; 0xf30

000121f8 <getmntent@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #331776	; 0x51000
   12200:	ldr	pc, [ip, #3880]!	; 0xf28

00012204 <opendir@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #331776	; 0x51000
   1220c:	ldr	pc, [ip, #3872]!	; 0xf20

00012210 <fnmatch@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #331776	; 0x51000
   12218:	ldr	pc, [ip, #3864]!	; 0xf18

0001221c <open64@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #331776	; 0x51000
   12224:	ldr	pc, [ip, #3856]!	; 0xf10

00012228 <getenv@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #331776	; 0x51000
   12230:	ldr	pc, [ip, #3848]!	; 0xf08

00012234 <lgetfilecon@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #331776	; 0x51000
   1223c:	ldr	pc, [ip, #3840]!	; 0xf00

00012240 <malloc@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #331776	; 0x51000
   12248:	ldr	pc, [ip, #3832]!	; 0xef8

0001224c <__libc_start_main@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #331776	; 0x51000
   12254:	ldr	pc, [ip, #3824]!	; 0xef0

00012258 <readlinkat@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #331776	; 0x51000
   12260:	ldr	pc, [ip, #3816]!	; 0xee8

00012264 <strftime@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #331776	; 0x51000
   1226c:	ldr	pc, [ip, #3808]!	; 0xee0

00012270 <__freading@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #331776	; 0x51000
   12278:	ldr	pc, [ip, #3800]!	; 0xed8

0001227c <localtime@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #331776	; 0x51000
   12284:	ldr	pc, [ip, #3792]!	; 0xed0

00012288 <__ctype_tolower_loc@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #331776	; 0x51000
   12290:	ldr	pc, [ip, #3784]!	; 0xec8

00012294 <modf@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #331776	; 0x51000
   1229c:	ldr	pc, [ip, #3776]!	; 0xec0

000122a0 <__ctype_toupper_loc@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #331776	; 0x51000
   122a8:	ldr	pc, [ip, #3768]!	; 0xeb8

000122ac <__gmon_start__@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #331776	; 0x51000
   122b4:	ldr	pc, [ip, #3760]!	; 0xeb0

000122b8 <__ctype_b_loc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #331776	; 0x51000
   122c0:	ldr	pc, [ip, #3752]!	; 0xea8

000122c4 <getcwd@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #331776	; 0x51000
   122cc:	ldr	pc, [ip, #3744]!	; 0xea0

000122d0 <exit@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #331776	; 0x51000
   122d8:	ldr	pc, [ip, #3736]!	; 0xe98

000122dc <feof@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #331776	; 0x51000
   122e4:	ldr	pc, [ip, #3728]!	; 0xe90

000122e8 <getfilecon@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #331776	; 0x51000
   122f0:	ldr	pc, [ip, #3720]!	; 0xe88

000122f4 <strtoul@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #331776	; 0x51000
   122fc:	ldr	pc, [ip, #3712]!	; 0xe80

00012300 <strlen@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #331776	; 0x51000
   12308:	ldr	pc, [ip, #3704]!	; 0xe78

0001230c <strchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #331776	; 0x51000
   12314:	ldr	pc, [ip, #3696]!	; 0xe70

00012318 <setenv@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #331776	; 0x51000
   12320:	ldr	pc, [ip, #3688]!	; 0xe68

00012324 <openat64@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #331776	; 0x51000
   1232c:	ldr	pc, [ip, #3680]!	; 0xe60

00012330 <memrchr@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #331776	; 0x51000
   12338:	ldr	pc, [ip, #3672]!	; 0xe58

0001233c <fprintf@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #331776	; 0x51000
   12344:	ldr	pc, [ip, #3664]!	; 0xe50

00012348 <__errno_location@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #331776	; 0x51000
   12350:	ldr	pc, [ip, #3656]!	; 0xe48

00012354 <iswalnum@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #331776	; 0x51000
   1235c:	ldr	pc, [ip, #3648]!	; 0xe40

00012360 <snprintf@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #331776	; 0x51000
   12368:	ldr	pc, [ip, #3640]!	; 0xe38

0001236c <__cxa_atexit@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #331776	; 0x51000
   12374:	ldr	pc, [ip, #3632]!	; 0xe30

00012378 <memset@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #331776	; 0x51000
   12380:	ldr	pc, [ip, #3624]!	; 0xe28

00012384 <putchar@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #331776	; 0x51000
   1238c:	ldr	pc, [ip, #3616]!	; 0xe20

00012390 <strncpy@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #331776	; 0x51000
   12398:	ldr	pc, [ip, #3608]!	; 0xe18

0001239c <pthread_mutexattr_gettype@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #331776	; 0x51000
   123a4:	ldr	pc, [ip, #3600]!	; 0xe10

000123a8 <btowc@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #331776	; 0x51000
   123b0:	ldr	pc, [ip, #3592]!	; 0xe08

000123b4 <strtod@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #331776	; 0x51000
   123bc:	ldr	pc, [ip, #3584]!	; 0xe00

000123c0 <fileno@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #331776	; 0x51000
   123c8:	ldr	pc, [ip, #3576]!	; 0xdf8

000123cc <difftime@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #331776	; 0x51000
   123d4:	ldr	pc, [ip, #3568]!	; 0xdf0

000123d8 <memchr@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #331776	; 0x51000
   123e0:	ldr	pc, [ip, #3560]!	; 0xde8

000123e4 <setfilecon@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #331776	; 0x51000
   123ec:	ldr	pc, [ip, #3552]!	; 0xde0

000123f0 <access@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #331776	; 0x51000
   123f8:	ldr	pc, [ip, #3544]!	; 0xdd8

000123fc <fclose@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #331776	; 0x51000
   12404:	ldr	pc, [ip, #3536]!	; 0xdd0

00012408 <strnlen@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #331776	; 0x51000
   12410:	ldr	pc, [ip, #3528]!	; 0xdc8

00012414 <fseeko64@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #331776	; 0x51000
   1241c:	ldr	pc, [ip, #3520]!	; 0xdc0

00012420 <endmntent@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #331776	; 0x51000
   12428:	ldr	pc, [ip, #3512]!	; 0xdb8

0001242c <fcntl64@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #331776	; 0x51000
   12434:	ldr	pc, [ip, #3504]!	; 0xdb0

00012438 <rpmatch@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #331776	; 0x51000
   12440:	ldr	pc, [ip, #3496]!	; 0xda8

00012444 <setlocale@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #331776	; 0x51000
   1244c:	ldr	pc, [ip, #3488]!	; 0xda0

00012450 <fork@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #331776	; 0x51000
   12458:	ldr	pc, [ip, #3480]!	; 0xd98

0001245c <endpwent@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #331776	; 0x51000
   12464:	ldr	pc, [ip, #3472]!	; 0xd90

00012468 <strrchr@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #331776	; 0x51000
   12470:	ldr	pc, [ip, #3464]!	; 0xd88

00012474 <vfprintf@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #331776	; 0x51000
   1247c:	ldr	pc, [ip, #3456]!	; 0xd80

00012480 <nl_langinfo@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #331776	; 0x51000
   12488:	ldr	pc, [ip, #3448]!	; 0xd78

0001248c <fputc@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #331776	; 0x51000
   12494:	ldr	pc, [ip, #3440]!	; 0xd70

00012498 <sscanf@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #331776	; 0x51000
   124a0:	ldr	pc, [ip, #3432]!	; 0xd68

000124a4 <localeconv@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #331776	; 0x51000
   124ac:	ldr	pc, [ip, #3424]!	; 0xd60

000124b0 <sprintf@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #331776	; 0x51000
   124b8:	ldr	pc, [ip, #3416]!	; 0xd58

000124bc <readdir64@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #331776	; 0x51000
   124c4:	ldr	pc, [ip, #3408]!	; 0xd50

000124c8 <fdopendir@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #331776	; 0x51000
   124d0:	ldr	pc, [ip, #3400]!	; 0xd48

000124d4 <timegm@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #331776	; 0x51000
   124dc:	ldr	pc, [ip, #3392]!	; 0xd40

000124e0 <putc@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #331776	; 0x51000
   124e8:	ldr	pc, [ip, #3384]!	; 0xd38

000124ec <dirfd@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #331776	; 0x51000
   124f4:	ldr	pc, [ip, #3376]!	; 0xd30

000124f8 <fchdir@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #331776	; 0x51000
   12500:	ldr	pc, [ip, #3368]!	; 0xd28

00012504 <fopen64@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #331776	; 0x51000
   1250c:	ldr	pc, [ip, #3360]!	; 0xd20

00012510 <qsort@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #331776	; 0x51000
   12518:	ldr	pc, [ip, #3352]!	; 0xd18

0001251c <freecon@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #331776	; 0x51000
   12524:	ldr	pc, [ip, #3344]!	; 0xd10

00012528 <strpbrk@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #331776	; 0x51000
   12530:	ldr	pc, [ip, #3336]!	; 0xd08

00012534 <setmntent@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #331776	; 0x51000
   1253c:	ldr	pc, [ip, #3328]!	; 0xd00

00012540 <bindtextdomain@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #331776	; 0x51000
   12548:	ldr	pc, [ip, #3320]!	; 0xcf8

0001254c <getdelim@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #331776	; 0x51000
   12554:	ldr	pc, [ip, #3312]!	; 0xcf0

00012558 <__xstat64@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #331776	; 0x51000
   12560:	ldr	pc, [ip, #3304]!	; 0xce8

00012564 <isatty@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #331776	; 0x51000
   1256c:	ldr	pc, [ip, #3296]!	; 0xce0

00012570 <unsetenv@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #331776	; 0x51000
   12578:	ldr	pc, [ip, #3288]!	; 0xcd8

0001257c <towupper@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #331776	; 0x51000
   12584:	ldr	pc, [ip, #3280]!	; 0xcd0

00012588 <fputs@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #331776	; 0x51000
   12590:	ldr	pc, [ip, #3272]!	; 0xcc8

00012594 <strncmp@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #331776	; 0x51000
   1259c:	ldr	pc, [ip, #3264]!	; 0xcc0

000125a0 <abort@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #331776	; 0x51000
   125a8:	ldr	pc, [ip, #3256]!	; 0xcb8

000125ac <close@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #331776	; 0x51000
   125b4:	ldr	pc, [ip, #3248]!	; 0xcb0

000125b8 <__lxstat64@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #331776	; 0x51000
   125c0:	ldr	pc, [ip, #3240]!	; 0xca8

000125c4 <closedir@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #331776	; 0x51000
   125cc:	ldr	pc, [ip, #3232]!	; 0xca0

000125d0 <getgrgid@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #331776	; 0x51000
   125d8:	ldr	pc, [ip, #3224]!	; 0xc98

000125dc <getgrnam@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #331776	; 0x51000
   125e4:	ldr	pc, [ip, #3216]!	; 0xc90

000125e8 <strspn@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #331776	; 0x51000
   125f0:	ldr	pc, [ip, #3208]!	; 0xc88

000125f4 <__assert_fail@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #331776	; 0x51000
   125fc:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

00012600 <.text>:
   12600:	push	{r4, lr}
   12604:	bl	12348 <__errno_location@plt>
   12608:	mov	r2, #5
   1260c:	ldr	r1, [pc, #24]	; 1262c <__assert_fail@plt+0x38>
   12610:	ldr	r4, [r0]
   12614:	mov	r0, #0
   12618:	bl	120b4 <dcgettext@plt>
   1261c:	mov	r1, r4
   12620:	mov	r2, r0
   12624:	mov	r0, #1
   12628:	bl	121ec <error@plt>
   1262c:	andeq	lr, r4, r0, ror #9
   12630:	push	{r4, lr}
   12634:	ldr	r3, [pc, #12]	; 12648 <__assert_fail@plt+0x54>
   12638:	ldr	r2, [pc, #12]	; 1264c <__assert_fail@plt+0x58>
   1263c:	ldr	r1, [pc, #12]	; 12650 <__assert_fail@plt+0x5c>
   12640:	ldr	r0, [pc, #12]	; 12654 <__assert_fail@plt+0x60>
   12644:	bl	125f4 <__assert_fail@plt>
   12648:	andeq	lr, r4, r4, ror #8
   1264c:	ldrdeq	r0, [r0], -r1
   12650:	andeq	lr, r4, r8, asr #9
   12654:	andeq	lr, r4, r0, lsl #10
   12658:	push	{r4, lr}
   1265c:	ldr	r3, [pc, #12]	; 12670 <__assert_fail@plt+0x7c>
   12660:	ldr	r2, [pc, #12]	; 12674 <__assert_fail@plt+0x80>
   12664:	ldr	r1, [pc, #12]	; 12678 <__assert_fail@plt+0x84>
   12668:	ldr	r0, [pc, #12]	; 1267c <__assert_fail@plt+0x88>
   1266c:	bl	125f4 <__assert_fail@plt>
   12670:	andeq	lr, r4, r0, asr #18
   12674:	andeq	r0, r0, lr, asr #11
   12678:	andeq	lr, r4, r0, lsr ip
   1267c:	andeq	lr, r4, r8, lsr ip
   12680:	push	{r4, lr}
   12684:	mov	r2, #123	; 0x7b
   12688:	ldr	r3, [pc, #8]	; 12698 <__assert_fail@plt+0xa4>
   1268c:	ldr	r1, [pc, #8]	; 1269c <__assert_fail@plt+0xa8>
   12690:	ldr	r0, [pc, #8]	; 126a0 <__assert_fail@plt+0xac>
   12694:	bl	125f4 <__assert_fail@plt>
   12698:			; <UNDEFINED> instruction: 0x0004f3b0
   1269c:	andeq	pc, r4, ip, lsl #9
   126a0:	muleq	r4, r4, r4
   126a4:	push	{r4, lr}
   126a8:	mov	r4, r0
   126ac:	bl	12348 <__errno_location@plt>
   126b0:	ldr	r1, [r4, #16]
   126b4:	ldr	r0, [r0]
   126b8:	bl	1bf50 <__assert_fail@plt+0x995c>
   126bc:	mov	r2, #5
   126c0:	ldr	r1, [pc, #24]	; 126e0 <__assert_fail@plt+0xec>
   126c4:	push	{r4, lr}
   126c8:	mov	r0, #0
   126cc:	bl	120b4 <dcgettext@plt>
   126d0:	mov	r1, #0
   126d4:	mov	r2, r0
   126d8:	mov	r0, #1
   126dc:	bl	121ec <error@plt>
   126e0:			; <UNDEFINED> instruction: 0x000515bc
   126e4:	push	{r4, lr}
   126e8:	mov	r5, r0
   126ec:	bl	12348 <__errno_location@plt>
   126f0:	mov	r2, #5
   126f4:	ldr	r1, [pc, #28]	; 12718 <__assert_fail@plt+0x124>
   126f8:	ldr	r4, [r0]
   126fc:	mov	r0, #0
   12700:	bl	120b4 <dcgettext@plt>
   12704:	mov	r3, r5
   12708:	mov	r1, r4
   1270c:	mov	r2, r0
   12710:	mov	r0, #1
   12714:	bl	121ec <error@plt>
   12718:	ldrdeq	r1, [r5], -r8
   1271c:	push	{r4, lr}
   12720:	mov	r2, #64	; 0x40
   12724:	ldr	r3, [pc, #8]	; 12734 <__assert_fail@plt+0x140>
   12728:	ldr	r1, [pc, #8]	; 12738 <__assert_fail@plt+0x144>
   1272c:	ldr	r0, [pc, #8]	; 1273c <__assert_fail@plt+0x148>
   12730:	bl	125f4 <__assert_fail@plt>
   12734:	ldrdeq	r3, [r5], -r0
   12738:	andeq	r3, r5, r8, ror #17
   1273c:	strdeq	r3, [r5], -r8
   12740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12744:	mov	r4, r0
   12748:	ldr	r0, [r1]
   1274c:	ldr	r8, [pc, #1340]	; 12c90 <__assert_fail@plt+0x69c>
   12750:	cmp	r0, #0
   12754:	sub	sp, sp, #236	; 0xec
   12758:	ldreq	r0, [pc, #1332]	; 12c94 <__assert_fail@plt+0x6a0>
   1275c:	mov	r5, r1
   12760:	bl	30474 <__assert_fail@plt+0x1de80>
   12764:	bl	1ae4c <__assert_fail@plt+0x8858>
   12768:	mov	r3, #0
   1276c:	mvn	r2, #99	; 0x63
   12770:	str	r2, [r8, #16]
   12774:	strb	r3, [r8, #40]	; 0x28
   12778:	str	r3, [r8, #28]
   1277c:	strb	r3, [r8, #32]
   12780:	bl	253f4 <__assert_fail@plt+0x12e00>
   12784:	cmp	r0, #0
   12788:	bne	12a50 <__assert_fail@plt+0x45c>
   1278c:	ldr	r0, [pc, #1284]	; 12c98 <__assert_fail@plt+0x6a4>
   12790:	bl	1c04c <__assert_fail@plt+0x9a58>
   12794:	cmp	r0, #0
   12798:	str	r0, [r8, #36]	; 0x24
   1279c:	beq	12c64 <__assert_fail@plt+0x670>
   127a0:	ldr	r6, [pc, #1268]	; 12c9c <__assert_fail@plt+0x6a8>
   127a4:	mov	r0, r6
   127a8:	bl	1bba8 <__assert_fail@plt+0x95b4>
   127ac:	ldr	r1, [pc, #1260]	; 12ca0 <__assert_fail@plt+0x6ac>
   127b0:	mov	r0, #6
   127b4:	bl	12444 <setlocale@plt>
   127b8:	ldr	r1, [pc, #1252]	; 12ca4 <__assert_fail@plt+0x6b0>
   127bc:	ldr	r0, [pc, #1252]	; 12ca8 <__assert_fail@plt+0x6b4>
   127c0:	bl	12540 <bindtextdomain@plt>
   127c4:	ldr	r0, [pc, #1244]	; 12ca8 <__assert_fail@plt+0x6b4>
   127c8:	bl	12108 <textdomain@plt>
   127cc:	ldr	r0, [pc, #1240]	; 12cac <__assert_fail@plt+0x6b8>
   127d0:	bl	4de7c <__assert_fail@plt+0x3b888>
   127d4:	cmp	r0, #0
   127d8:	bne	12c3c <__assert_fail@plt+0x648>
   127dc:	mov	r1, r5
   127e0:	mov	r0, r4
   127e4:	bl	1b69c <__assert_fail@plt+0x90a8>
   127e8:	ldr	r3, [r6, #44]	; 0x2c
   127ec:	tst	r3, #2
   127f0:	ldrne	r2, [pc, #1208]	; 12cb0 <__assert_fail@plt+0x6bc>
   127f4:	strne	r2, [r6, #52]	; 0x34
   127f8:	tst	r3, #128	; 0x80
   127fc:	mov	r7, r0
   12800:	bne	12a2c <__assert_fail@plt+0x438>
   12804:	mov	r0, r4
   12808:	mov	r2, r7
   1280c:	mov	r1, r5
   12810:	bl	19808 <__assert_fail@plt+0x7214>
   12814:	sub	r4, r4, r7
   12818:	cmp	r4, #0
   1281c:	str	r0, [sp, #20]
   12820:	ble	1283c <__assert_fail@plt+0x248>
   12824:	mov	r1, #1
   12828:	ldr	r0, [r5, r7, lsl #2]
   1282c:	bl	1b618 <__assert_fail@plt+0x9024>
   12830:	add	r3, r5, r7, lsl #2
   12834:	subs	r4, r0, #0
   12838:	beq	12a04 <__assert_fail@plt+0x410>
   1283c:	ldr	r4, [r6, #76]	; 0x4c
   12840:	cmp	r4, #0
   12844:	beq	12b04 <__assert_fail@plt+0x510>
   12848:	ldr	r1, [pc, #1124]	; 12cb4 <__assert_fail@plt+0x6c0>
   1284c:	mov	r0, r4
   12850:	bl	11f40 <strcmp@plt>
   12854:	subs	r5, r0, #0
   12858:	bne	12a58 <__assert_fail@plt+0x464>
   1285c:	ldrb	r4, [r6, #80]	; 0x50
   12860:	mov	r2, #5
   12864:	cmp	r4, #0
   12868:	bne	12c74 <__assert_fail@plt+0x680>
   1286c:	ldr	r1, [pc, #1092]	; 12cb8 <__assert_fail@plt+0x6c4>
   12870:	bl	120b4 <dcgettext@plt>
   12874:	mov	r1, r0
   12878:	mov	r0, r4
   1287c:	bl	1be34 <__assert_fail@plt+0x9840>
   12880:	ldr	r3, [pc, #1076]	; 12cbc <__assert_fail@plt+0x6c8>
   12884:	ldr	r3, [r3]
   12888:	str	r3, [sp, #16]
   1288c:	str	r0, [sp, #12]
   12890:	mov	r0, r3
   12894:	bl	267a0 <__assert_fail@plt+0x141ac>
   12898:	mov	r7, r0
   1289c:	cmp	r7, #0
   128a0:	beq	12ac4 <__assert_fail@plt+0x4d0>
   128a4:	mov	sl, #1
   128a8:	mov	fp, sl
   128ac:	mov	r9, #0
   128b0:	add	r1, sp, #128	; 0x80
   128b4:	mov	r0, r7
   128b8:	bl	267d4 <__assert_fail@plt+0x141e0>
   128bc:	subs	r4, r0, #0
   128c0:	beq	129d4 <__assert_fail@plt+0x3e0>
   128c4:	ldrb	r5, [r4]
   128c8:	ldr	r3, [r6, #76]	; 0x4c
   128cc:	cmp	r5, #0
   128d0:	bne	12920 <__assert_fail@plt+0x32c>
   128d4:	cmp	r3, #0
   128d8:	beq	1299c <__assert_fail@plt+0x3a8>
   128dc:	mov	r0, r7
   128e0:	bl	26870 <__assert_fail@plt+0x1427c>
   128e4:	mov	r2, #5
   128e8:	ldr	r1, [pc, #976]	; 12cc0 <__assert_fail@plt+0x6cc>
   128ec:	mov	r4, r0
   128f0:	mov	r0, r9
   128f4:	bl	120b4 <dcgettext@plt>
   128f8:	str	r4, [sp]
   128fc:	ldr	r3, [sp, #12]
   12900:	ldr	r2, [pc, #956]	; 12cc4 <__assert_fail@plt+0x6d0>
   12904:	mov	r1, r9
   12908:	str	r0, [sp, #4]
   1290c:	mov	r0, r5
   12910:	bl	121ec <error@plt>
   12914:	str	fp, [r8, #28]
   12918:	mov	sl, r9
   1291c:	b	128b0 <__assert_fail@plt+0x2bc>
   12920:	cmp	r3, #0
   12924:	beq	129c0 <__assert_fail@plt+0x3cc>
   12928:	mov	r0, r4
   1292c:	bl	12300 <strlen@plt>
   12930:	str	r0, [r8, #20]
   12934:	mov	r0, r4
   12938:	bl	12e48 <__assert_fail@plt+0x854>
   1293c:	cmp	r0, #0
   12940:	bne	128b0 <__assert_fail@plt+0x2bc>
   12944:	mov	sl, r0
   12948:	mov	r0, r7
   1294c:	bl	26890 <__assert_fail@plt+0x1429c>
   12950:	cmp	sl, #0
   12954:	beq	12990 <__assert_fail@plt+0x39c>
   12958:	ldr	r3, [r6, #76]	; 0x4c
   1295c:	cmp	r3, #0
   12960:	beq	12984 <__assert_fail@plt+0x390>
   12964:	ldr	r0, [sp, #16]
   12968:	bl	11fe8 <ferror@plt>
   1296c:	cmp	r0, #0
   12970:	bne	12bc4 <__assert_fail@plt+0x5d0>
   12974:	ldr	r0, [sp, #16]
   12978:	bl	123fc <fclose@plt>
   1297c:	cmp	r0, #0
   12980:	bne	12bc4 <__assert_fail@plt+0x5d0>
   12984:	ldr	r0, [sp, #20]
   12988:	bl	15888 <__assert_fail@plt+0x3294>
   1298c:	bl	1aee0 <__assert_fail@plt+0x88ec>
   12990:	ldr	r0, [r8, #28]
   12994:	add	sp, sp, #236	; 0xec
   12998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1299c:	mov	r1, r4
   129a0:	mov	r0, r9
   129a4:	bl	1be34 <__assert_fail@plt+0x9840>
   129a8:	ldr	r2, [pc, #792]	; 12cc8 <__assert_fail@plt+0x6d4>
   129ac:	mov	r1, #2
   129b0:	mov	r3, r0
   129b4:	mov	r0, r9
   129b8:	bl	121ec <error@plt>
   129bc:	b	12914 <__assert_fail@plt+0x320>
   129c0:	mov	r1, fp
   129c4:	bl	1b618 <__assert_fail@plt+0x9024>
   129c8:	cmp	r0, #0
   129cc:	beq	12928 <__assert_fail@plt+0x334>
   129d0:	b	12948 <__assert_fail@plt+0x354>
   129d4:	ldr	r3, [sp, #128]	; 0x80
   129d8:	cmp	r3, #3
   129dc:	beq	12ac4 <__assert_fail@plt+0x4d0>
   129e0:	cmp	r3, #4
   129e4:	beq	12ac8 <__assert_fail@plt+0x4d4>
   129e8:	cmp	r3, #2
   129ec:	beq	12948 <__assert_fail@plt+0x354>
   129f0:	ldr	r3, [pc, #724]	; 12ccc <__assert_fail@plt+0x6d8>
   129f4:	ldr	r2, [pc, #724]	; 12cd0 <__assert_fail@plt+0x6dc>
   129f8:	ldr	r1, [pc, #724]	; 12cd4 <__assert_fail@plt+0x6e0>
   129fc:	ldr	r0, [pc, #724]	; 12cd8 <__assert_fail@plt+0x6e4>
   12a00:	bl	125f4 <__assert_fail@plt>
   12a04:	ldr	r2, [r6, #76]	; 0x4c
   12a08:	cmp	r2, #0
   12a0c:	str	r2, [sp, #12]
   12a10:	bne	12be8 <__assert_fail@plt+0x5f4>
   12a14:	mov	r0, r3
   12a18:	bl	26778 <__assert_fail@plt+0x14184>
   12a1c:	ldr	r3, [sp, #12]
   12a20:	str	r3, [sp, #16]
   12a24:	mov	r7, r0
   12a28:	b	1289c <__assert_fail@plt+0x2a8>
   12a2c:	ldr	r3, [pc, #680]	; 12cdc <__assert_fail@plt+0x6e8>
   12a30:	ldr	r0, [pc, #680]	; 12ce0 <__assert_fail@plt+0x6ec>
   12a34:	ldr	r9, [r3]
   12a38:	bl	120a8 <ctime@plt>
   12a3c:	ldr	r1, [pc, #672]	; 12ce4 <__assert_fail@plt+0x6f0>
   12a40:	mov	r2, r0
   12a44:	mov	r0, r9
   12a48:	bl	1233c <fprintf@plt>
   12a4c:	b	12804 <__assert_fail@plt+0x210>
   12a50:	bl	2527c <__assert_fail@plt+0x12c88>
   12a54:	b	1278c <__assert_fail@plt+0x198>
   12a58:	mov	r1, r4
   12a5c:	mov	r0, #0
   12a60:	bl	1be34 <__assert_fail@plt+0x9840>
   12a64:	ldr	r1, [pc, #636]	; 12ce8 <__assert_fail@plt+0x6f4>
   12a68:	str	r0, [sp, #12]
   12a6c:	ldr	r0, [r6, #76]	; 0x4c
   12a70:	bl	12504 <fopen64@plt>
   12a74:	subs	r3, r0, #0
   12a78:	str	r3, [sp, #16]
   12a7c:	beq	12b84 <__assert_fail@plt+0x590>
   12a80:	bl	123c0 <fileno@plt>
   12a84:	subs	r7, r0, #0
   12a88:	blt	12bb0 <__assert_fail@plt+0x5bc>
   12a8c:	ldrb	r3, [r6, #80]	; 0x50
   12a90:	cmp	r3, #0
   12a94:	beq	12ab0 <__assert_fail@plt+0x4bc>
   12a98:	mov	r1, r7
   12a9c:	add	r2, sp, #24
   12aa0:	mov	r0, #3
   12aa4:	bl	1215c <__fxstat64@plt>
   12aa8:	subs	r1, r0, #0
   12aac:	beq	12b20 <__assert_fail@plt+0x52c>
   12ab0:	mov	r0, r7
   12ab4:	mov	r1, #1
   12ab8:	bl	26a7c <__assert_fail@plt+0x14488>
   12abc:	ldr	r0, [sp, #16]
   12ac0:	b	12894 <__assert_fail@plt+0x2a0>
   12ac4:	bl	35c84 <__assert_fail@plt+0x23690>
   12ac8:	bl	12348 <__errno_location@plt>
   12acc:	mov	r2, #5
   12ad0:	ldr	r1, [pc, #532]	; 12cec <__assert_fail@plt+0x6f8>
   12ad4:	mov	sl, r4
   12ad8:	ldr	r5, [r0]
   12adc:	mov	r0, r4
   12ae0:	bl	120b4 <dcgettext@plt>
   12ae4:	ldr	r3, [sp, #12]
   12ae8:	mov	r1, r5
   12aec:	mov	r2, r0
   12af0:	mov	r0, r4
   12af4:	bl	121ec <error@plt>
   12af8:	mov	r3, #1
   12afc:	str	r3, [r8, #28]
   12b00:	b	12948 <__assert_fail@plt+0x354>
   12b04:	add	r0, sp, #232	; 0xe8
   12b08:	mov	r3, #46	; 0x2e
   12b0c:	strh	r3, [r0, #-104]!	; 0xffffff98
   12b10:	bl	12e48 <__assert_fail@plt+0x854>
   12b14:	cmp	r0, #0
   12b18:	beq	12990 <__assert_fail@plt+0x39c>
   12b1c:	b	12984 <__assert_fail@plt+0x390>
   12b20:	add	r2, sp, #128	; 0x80
   12b24:	mov	r0, #3
   12b28:	bl	1215c <__fxstat64@plt>
   12b2c:	subs	r9, r0, #0
   12b30:	bne	12ab0 <__assert_fail@plt+0x4bc>
   12b34:	ldrd	r4, [sp, #120]	; 0x78
   12b38:	ldrd	r2, [sp, #224]	; 0xe0
   12b3c:	cmp	r5, r3
   12b40:	cmpeq	r4, r2
   12b44:	bne	12ab0 <__assert_fail@plt+0x4bc>
   12b48:	ldrd	r4, [sp, #24]
   12b4c:	ldrd	r2, [sp, #128]	; 0x80
   12b50:	cmp	r5, r3
   12b54:	cmpeq	r4, r2
   12b58:	bne	12ab0 <__assert_fail@plt+0x4bc>
   12b5c:	mov	r2, #5
   12b60:	ldr	r1, [pc, #392]	; 12cf0 <__assert_fail@plt+0x6fc>
   12b64:	bl	120b4 <dcgettext@plt>
   12b68:	ldr	r3, [sp, #12]
   12b6c:	mov	r1, r9
   12b70:	str	r3, [sp]
   12b74:	ldr	r2, [pc, #376]	; 12cf4 <__assert_fail@plt+0x700>
   12b78:	mov	r3, r0
   12b7c:	mov	r0, #1
   12b80:	bl	121ec <error@plt>
   12b84:	bl	12348 <__errno_location@plt>
   12b88:	mov	r2, #5
   12b8c:	ldr	r1, [pc, #356]	; 12cf8 <__assert_fail@plt+0x704>
   12b90:	ldr	r4, [r0]
   12b94:	ldr	r0, [sp, #16]
   12b98:	bl	120b4 <dcgettext@plt>
   12b9c:	ldr	r3, [sp, #12]
   12ba0:	mov	r1, r4
   12ba4:	mov	r2, r0
   12ba8:	mov	r0, #1
   12bac:	bl	121ec <error@plt>
   12bb0:	ldr	r3, [pc, #276]	; 12ccc <__assert_fail@plt+0x6d8>
   12bb4:	ldr	r2, [pc, #320]	; 12cfc <__assert_fail@plt+0x708>
   12bb8:	ldr	r1, [pc, #276]	; 12cd4 <__assert_fail@plt+0x6e0>
   12bbc:	ldr	r0, [pc, #316]	; 12d00 <__assert_fail@plt+0x70c>
   12bc0:	bl	125f4 <__assert_fail@plt>
   12bc4:	mov	r2, #5
   12bc8:	ldr	r1, [pc, #308]	; 12d04 <__assert_fail@plt+0x710>
   12bcc:	mov	r0, #0
   12bd0:	bl	120b4 <dcgettext@plt>
   12bd4:	ldr	r3, [sp, #12]
   12bd8:	mov	r1, #0
   12bdc:	mov	r2, r0
   12be0:	mov	r0, #1
   12be4:	bl	121ec <error@plt>
   12be8:	mov	r2, #5
   12bec:	ldr	r1, [pc, #276]	; 12d08 <__assert_fail@plt+0x714>
   12bf0:	bl	120b4 <dcgettext@plt>
   12bf4:	ldr	r1, [r5, r7, lsl #2]
   12bf8:	mov	r6, r0
   12bfc:	mov	r0, r4
   12c00:	bl	1be34 <__assert_fail@plt+0x9840>
   12c04:	mov	r2, r6
   12c08:	mov	r1, r4
   12c0c:	mov	r3, r0
   12c10:	mov	r0, r4
   12c14:	bl	121ec <error@plt>
   12c18:	mov	r2, #5
   12c1c:	ldr	r1, [pc, #232]	; 12d0c <__assert_fail@plt+0x718>
   12c20:	mov	r0, r4
   12c24:	bl	120b4 <dcgettext@plt>
   12c28:	mov	r1, r4
   12c2c:	ldr	r2, [pc, #148]	; 12cc8 <__assert_fail@plt+0x6d4>
   12c30:	mov	r3, r0
   12c34:	mov	r0, #1
   12c38:	bl	121ec <error@plt>
   12c3c:	bl	12348 <__errno_location@plt>
   12c40:	ldr	r1, [pc, #200]	; 12d10 <__assert_fail@plt+0x71c>
   12c44:	mov	r2, #5
   12c48:	ldr	r4, [r0]
   12c4c:	mov	r0, #0
   12c50:	bl	120b4 <dcgettext@plt>
   12c54:	mov	r1, r4
   12c58:	mov	r2, r0
   12c5c:	mov	r0, #1
   12c60:	bl	121ec <error@plt>
   12c64:	bl	12348 <__errno_location@plt>
   12c68:	mov	r2, #5
   12c6c:	ldr	r1, [pc, #160]	; 12d14 <__assert_fail@plt+0x720>
   12c70:	b	12c48 <__assert_fail@plt+0x654>
   12c74:	ldr	r1, [pc, #156]	; 12d18 <__assert_fail@plt+0x724>
   12c78:	bl	120b4 <dcgettext@plt>
   12c7c:	mov	r1, r5
   12c80:	ldr	r2, [pc, #148]	; 12d1c <__assert_fail@plt+0x728>
   12c84:	mov	r3, r0
   12c88:	mov	r0, #1
   12c8c:	bl	121ec <error@plt>
   12c90:	andeq	r4, r6, r0, asr #28
   12c94:	andeq	lr, r4, r4, lsl r2
   12c98:	andeq	lr, r4, ip, lsl r2
   12c9c:	andeq	r4, r6, ip, ror #28
   12ca0:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   12ca4:	andeq	lr, r4, ip, asr #4
   12ca8:	andeq	r2, r5, r8, lsr #2
   12cac:	andeq	r6, r2, r0, lsl fp
   12cb0:	andeq	fp, r1, ip, lsr #5
   12cb4:	andeq	lr, r4, r4, ror #5
   12cb8:	andeq	lr, r4, ip, lsr r3
   12cbc:	andeq	r4, r6, r0, asr r5
   12cc0:	andeq	lr, r4, r8, lsl r4
   12cc4:	andeq	lr, r4, r8, lsr r4
   12cc8:	andeq	r2, r5, r4, asr #9
   12ccc:	andeq	sp, r4, r0, asr #29
   12cd0:	andeq	r0, r0, r3, lsr #5
   12cd4:	ldrdeq	sp, [r4], -ip
   12cd8:	strdeq	lr, [r4], -r0
   12cdc:	andeq	r4, r6, r8, asr #10
   12ce0:	andeq	r4, r6, r8, lsl #29
   12ce4:	andeq	lr, r4, r8, lsl #5
   12ce8:	muleq	r5, r4, ip
   12cec:	andeq	lr, r4, r0, ror #7
   12cf0:	andeq	lr, r4, r4, ror r3
   12cf4:	ldrdeq	lr, [r4], -r8
   12cf8:	andeq	lr, r4, r0, asr r3
   12cfc:	andeq	r0, r0, r2, ror #4
   12d00:	andeq	lr, r4, ip, ror #6
   12d04:	andeq	lr, r4, r4, asr #8
   12d08:	muleq	r4, ip, r2
   12d0c:			; <UNDEFINED> instruction: 0x0004e2b0
   12d10:	andeq	lr, r4, r4, ror #4
   12d14:	andeq	lr, r4, r0, lsr #4
   12d18:	andeq	lr, r4, r8, ror #5
   12d1c:	andeq	r3, r5, r4, ror r5
   12d20:	mov	fp, #0
   12d24:	mov	lr, #0
   12d28:	pop	{r1}		; (ldr r1, [sp], #4)
   12d2c:	mov	r2, sp
   12d30:	push	{r2}		; (str r2, [sp, #-4]!)
   12d34:	push	{r0}		; (str r0, [sp, #-4]!)
   12d38:	ldr	ip, [pc, #16]	; 12d50 <__assert_fail@plt+0x75c>
   12d3c:	push	{ip}		; (str ip, [sp, #-4]!)
   12d40:	ldr	r0, [pc, #12]	; 12d54 <__assert_fail@plt+0x760>
   12d44:	ldr	r3, [pc, #12]	; 12d58 <__assert_fail@plt+0x764>
   12d48:	bl	1224c <__libc_start_main@plt>
   12d4c:	bl	125a0 <abort@plt>
   12d50:	andeq	sp, r4, r8, ror lr
   12d54:	andeq	r2, r1, r0, asr #14
   12d58:	andeq	sp, r4, r8, lsl lr
   12d5c:	ldr	r3, [pc, #20]	; 12d78 <__assert_fail@plt+0x784>
   12d60:	ldr	r2, [pc, #20]	; 12d7c <__assert_fail@plt+0x788>
   12d64:	add	r3, pc, r3
   12d68:	ldr	r2, [r3, r2]
   12d6c:	cmp	r2, #0
   12d70:	bxeq	lr
   12d74:	b	122ac <__gmon_start__@plt>
   12d78:	muleq	r5, r4, r2
   12d7c:	andeq	r0, r0, r0, lsl #5
   12d80:	ldr	r3, [pc, #28]	; 12da4 <__assert_fail@plt+0x7b0>
   12d84:	ldr	r0, [pc, #28]	; 12da8 <__assert_fail@plt+0x7b4>
   12d88:	sub	r3, r3, r0
   12d8c:	cmp	r3, #6
   12d90:	bxls	lr
   12d94:	ldr	r3, [pc, #16]	; 12dac <__assert_fail@plt+0x7b8>
   12d98:	cmp	r3, #0
   12d9c:	bxeq	lr
   12da0:	bx	r3
   12da4:	andeq	r4, r6, fp, lsr r5
   12da8:	andeq	r4, r6, r8, lsr r5
   12dac:	andeq	r0, r0, r0
   12db0:	ldr	r1, [pc, #36]	; 12ddc <__assert_fail@plt+0x7e8>
   12db4:	ldr	r0, [pc, #36]	; 12de0 <__assert_fail@plt+0x7ec>
   12db8:	sub	r1, r1, r0
   12dbc:	asr	r1, r1, #2
   12dc0:	add	r1, r1, r1, lsr #31
   12dc4:	asrs	r1, r1, #1
   12dc8:	bxeq	lr
   12dcc:	ldr	r3, [pc, #16]	; 12de4 <__assert_fail@plt+0x7f0>
   12dd0:	cmp	r3, #0
   12dd4:	bxeq	lr
   12dd8:	bx	r3
   12ddc:	andeq	r4, r6, r8, lsr r5
   12de0:	andeq	r4, r6, r8, lsr r5
   12de4:	andeq	r0, r0, r0
   12de8:	push	{r4, lr}
   12dec:	ldr	r4, [pc, #24]	; 12e0c <__assert_fail@plt+0x818>
   12df0:	ldrb	r3, [r4]
   12df4:	cmp	r3, #0
   12df8:	popne	{r4, pc}
   12dfc:	bl	12d80 <__assert_fail@plt+0x78c>
   12e00:	mov	r3, #1
   12e04:	strb	r3, [r4]
   12e08:	pop	{r4, pc}
   12e0c:	andeq	r4, r6, r8, asr r5
   12e10:	ldr	r0, [pc, #40]	; 12e40 <__assert_fail@plt+0x84c>
   12e14:	ldr	r3, [r0]
   12e18:	cmp	r3, #0
   12e1c:	bne	12e24 <__assert_fail@plt+0x830>
   12e20:	b	12db0 <__assert_fail@plt+0x7bc>
   12e24:	ldr	r3, [pc, #24]	; 12e44 <__assert_fail@plt+0x850>
   12e28:	cmp	r3, #0
   12e2c:	beq	12e20 <__assert_fail@plt+0x82c>
   12e30:	push	{r4, lr}
   12e34:	blx	r3
   12e38:	pop	{r4, lr}
   12e3c:	b	12db0 <__assert_fail@plt+0x7bc>
   12e40:	andeq	r3, r6, r4, lsl #30
   12e44:	andeq	r0, r0, r0
   12e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e4c:	sub	sp, sp, #260	; 0x104
   12e50:	ldr	r6, [pc, #2536]	; 13840 <__assert_fail@plt+0x124c>
   12e54:	str	r0, [sp, #36]	; 0x24
   12e58:	bl	12300 <strlen@plt>
   12e5c:	ldr	r5, [pc, #2528]	; 13844 <__assert_fail@plt+0x1250>
   12e60:	ldr	r1, [r6]
   12e64:	tst	r1, #512	; 0x200
   12e68:	str	r0, [r5, #20]
   12e6c:	beq	12e84 <__assert_fail@plt+0x890>
   12e70:	ldr	r2, [r6, #4]
   12e74:	mvn	r3, #99	; 0x63
   12e78:	cmp	r2, #0
   12e7c:	str	r3, [r5, #16]
   12e80:	strlt	r3, [r6, #4]
   12e84:	ldr	r8, [pc, #2492]	; 13848 <__assert_fail@plt+0x1254>
   12e88:	ldr	r3, [sp, #36]	; 0x24
   12e8c:	mov	r2, #0
   12e90:	str	r3, [sp, #40]	; 0x28
   12e94:	ldr	r3, [r8, #48]	; 0x30
   12e98:	str	r2, [sp, #44]	; 0x2c
   12e9c:	cmp	r3, #1
   12ea0:	beq	13618 <__assert_fail@plt+0x1024>
   12ea4:	bcc	1360c <__assert_fail@plt+0x1018>
   12ea8:	cmp	r3, #2
   12eac:	orreq	r1, r1, #17
   12eb0:	streq	r1, [r6]
   12eb4:	ldrb	r3, [r8, #13]
   12eb8:	mov	r2, #0
   12ebc:	add	r0, sp, #40	; 0x28
   12ec0:	cmp	r3, #0
   12ec4:	orrne	r1, r1, #64	; 0x40
   12ec8:	strne	r1, [r6]
   12ecc:	bl	38b6c <__assert_fail@plt+0x26578>
   12ed0:	subs	r9, r0, #0
   12ed4:	beq	137bc <__assert_fail@plt+0x11c8>
   12ed8:	bl	12348 <__errno_location@plt>
   12edc:	mov	sl, r9
   12ee0:	mov	r3, #-2147483648	; 0x80000000
   12ee4:	str	r3, [sp, #16]
   12ee8:	mov	r9, r0
   12eec:	mov	r3, #0
   12ef0:	str	r3, [r9]
   12ef4:	mov	r0, sl
   12ef8:	bl	39330 <__assert_fail@plt+0x26d3c>
   12efc:	subs	r4, r0, #0
   12f00:	beq	134ac <__assert_fail@plt+0xeb8>
   12f04:	ldrb	r3, [r5, #32]
   12f08:	cmp	r3, #0
   12f0c:	ldr	r3, [r4, #48]	; 0x30
   12f10:	beq	12f28 <__assert_fail@plt+0x934>
   12f14:	ldr	r2, [sp, #16]
   12f18:	cmp	r2, r3
   12f1c:	beq	12f2c <__assert_fail@plt+0x938>
   12f20:	bl	1ae20 <__assert_fail@plt+0x882c>
   12f24:	ldr	r3, [r4, #48]	; 0x30
   12f28:	str	r3, [sp, #16]
   12f2c:	ldr	r3, [r4, #80]	; 0x50
   12f30:	ldr	r2, [r8, #44]	; 0x2c
   12f34:	str	r3, [r5, #8]
   12f38:	adds	r3, r3, #0
   12f3c:	movne	r3, #1
   12f40:	mov	r0, #0
   12f44:	tst	r2, #4
   12f48:	strb	r3, [r5, #5]
   12f4c:	strb	r0, [r5, #40]	; 0x28
   12f50:	strb	r0, [r5, #4]
   12f54:	bne	13158 <__assert_fail@plt+0xb64>
   12f58:	ldrh	r1, [r4, #56]	; 0x38
   12f5c:	cmp	r1, #6
   12f60:	beq	131c0 <__assert_fail@plt+0xbcc>
   12f64:	ldr	ip, [r4, #48]	; 0x30
   12f68:	ldr	r2, [r6, #8]
   12f6c:	clz	r3, ip
   12f70:	lsr	r3, r3, #5
   12f74:	cmp	ip, r2
   12f78:	orrgt	r3, r3, #1
   12f7c:	cmp	r3, #0
   12f80:	bne	13130 <__assert_fail@plt+0xb3c>
   12f84:	ldr	r3, [r6]
   12f88:	ldr	r0, [sl, #32]
   12f8c:	tst	r3, #512	; 0x200
   12f90:	beq	12fb0 <__assert_fail@plt+0x9bc>
   12f94:	cmn	r0, #100	; 0x64
   12f98:	cmpne	r0, #0
   12f9c:	blt	13804 <__assert_fail@plt+0x1210>
   12fa0:	ldr	r3, [r6, #4]
   12fa4:	str	r0, [r5, #16]
   12fa8:	cmp	r3, #0
   12fac:	blt	13298 <__assert_fail@plt+0xca4>
   12fb0:	ldrh	r1, [r4, #56]	; 0x38
   12fb4:	ldr	ip, [r4, #48]	; 0x30
   12fb8:	ldrd	r2, [r4, #160]	; 0xa0
   12fbc:	cmp	r1, #7
   12fc0:	str	ip, [r6, #8]
   12fc4:	strd	r2, [sp, #144]	; 0x90
   12fc8:	beq	132b4 <__assert_fail@plt+0xcc0>
   12fcc:	cmp	r1, #4
   12fd0:	beq	133d4 <__assert_fail@plt+0xde0>
   12fd4:	cmp	r1, #2
   12fd8:	beq	13418 <__assert_fail@plt+0xe24>
   12fdc:	cmp	r1, #13
   12fe0:	beq	134d8 <__assert_fail@plt+0xee4>
   12fe4:	cmp	r1, #10
   12fe8:	beq	1333c <__assert_fail@plt+0xd48>
   12fec:	sub	r3, r1, #10
   12ff0:	cmp	r3, #1
   12ff4:	bls	131e8 <__assert_fail@plt+0xbf4>
   12ff8:	add	r3, sp, #48	; 0x30
   12ffc:	mov	ip, #1
   13000:	mov	r0, r3
   13004:	mov	r2, #104	; 0x68
   13008:	add	r1, r4, #64	; 0x40
   1300c:	strb	ip, [r5, #4]
   13010:	strb	ip, [r5, #5]
   13014:	bl	12024 <memcpy@plt>
   13018:	ldr	r7, [sp, #64]	; 0x40
   1301c:	cmp	r7, #0
   13020:	str	r7, [sp, #152]	; 0x98
   13024:	str	r7, [r5, #8]
   13028:	mov	r3, r0
   1302c:	beq	1337c <__assert_fail@plt+0xd88>
   13030:	ldr	r2, [r4, #48]	; 0x30
   13034:	str	r2, [r5]
   13038:	mov	r2, #0
   1303c:	ldr	r1, [r4, #28]
   13040:	add	r0, sp, #152	; 0x98
   13044:	str	r2, [sp]
   13048:	add	r2, r4, #168	; 0xa8
   1304c:	bl	1b3e8 <__assert_fail@plt+0x8df4>
   13050:	cmp	r0, #0
   13054:	beq	12eec <__assert_fail@plt+0x8f8>
   13058:	ldr	r3, [sp, #152]	; 0x98
   1305c:	and	r3, r3, #61440	; 0xf000
   13060:	cmp	r3, #16384	; 0x4000
   13064:	ldrheq	r1, [r4, #56]	; 0x38
   13068:	bne	133cc <__assert_fail@plt+0xdd8>
   1306c:	cmp	r1, #11
   13070:	beq	135f8 <__assert_fail@plt+0x1004>
   13074:	ldr	r3, [r8, #4]
   13078:	mov	fp, #1
   1307c:	cmp	r3, #0
   13080:	blt	13090 <__assert_fail@plt+0xa9c>
   13084:	ldr	r2, [r4, #48]	; 0x30
   13088:	cmp	r2, r3
   1308c:	bge	13248 <__assert_fail@plt+0xc54>
   13090:	cmp	r1, #1
   13094:	mov	r7, #0
   13098:	beq	13278 <__assert_fail@plt+0xc84>
   1309c:	cmp	r1, #6
   130a0:	beq	133f4 <__assert_fail@plt+0xe00>
   130a4:	ldr	r3, [r8, #8]
   130a8:	ldr	r2, [r4, #48]	; 0x30
   130ac:	cmp	r2, r3
   130b0:	ldr	r3, [r8, #44]	; 0x2c
   130b4:	blt	132c4 <__assert_fail@plt+0xcd0>
   130b8:	tst	r3, #4
   130bc:	bne	132d0 <__assert_fail@plt+0xcdc>
   130c0:	cmp	r7, #0
   130c4:	bne	13120 <__assert_fail@plt+0xb2c>
   130c8:	sub	r1, r1, #10
   130cc:	cmp	r1, #1
   130d0:	ldr	r3, [sl, #32]
   130d4:	ldr	r2, [r4, #24]
   130d8:	movls	r1, #0
   130dc:	movhi	r1, #1
   130e0:	str	r3, [r5, #16]
   130e4:	strb	r1, [r5, #4]
   130e8:	str	r2, [r5, #12]
   130ec:	bl	17414 <__assert_fail@plt+0x4e20>
   130f0:	add	r1, sp, #48	; 0x30
   130f4:	mov	r2, r0
   130f8:	ldr	r0, [r4, #28]
   130fc:	bl	1bd14 <__assert_fail@plt+0x9720>
   13100:	ldrb	r3, [r5, #24]
   13104:	cmp	r3, #0
   13108:	beq	1311c <__assert_fail@plt+0xb28>
   1310c:	mov	r2, #4
   13110:	mov	r1, r4
   13114:	mov	r0, sl
   13118:	bl	39c88 <__assert_fail@plt+0x27694>
   1311c:	ldrh	r1, [r4, #56]	; 0x38
   13120:	cmp	r1, #6
   13124:	moveq	r3, #0
   13128:	strbeq	r3, [r5, #24]
   1312c:	b	12eec <__assert_fail@plt+0x8f8>
   13130:	ldr	r3, [r6]
   13134:	tst	r3, #512	; 0x200
   13138:	beq	12fb8 <__assert_fail@plt+0x9c4>
   1313c:	ldr	r0, [r6, #4]
   13140:	cmp	r0, #0
   13144:	blt	13508 <__assert_fail@plt+0xf14>
   13148:	bl	125ac <close@plt>
   1314c:	mvn	r3, #0
   13150:	str	r3, [r6, #4]
   13154:	b	12f84 <__assert_fail@plt+0x990>
   13158:	ldr	r3, [pc, #1772]	; 1384c <__assert_fail@plt+0x1258>
   1315c:	ldr	r2, [r4, #28]
   13160:	ldr	r1, [r8, #72]	; 0x48
   13164:	ldr	r3, [r3]
   13168:	str	r3, [sp, #28]
   1316c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   13170:	ldrh	r2, [r4, #56]	; 0x38
   13174:	sub	r3, r2, #1
   13178:	str	r0, [sp, #32]
   1317c:	cmp	r3, #13
   13180:	ldrls	pc, [pc, r3, lsl #2]
   13184:	b	13790 <__assert_fail@plt+0x119c>
   13188:	andeq	r3, r1, r4, lsr #12
   1318c:	andeq	r3, r1, ip, asr r5
   13190:	andeq	r3, r1, ip, ror #12
   13194:	andeq	r3, r1, r4, ror r6
   13198:	andeq	r3, r1, ip, ror r6
   1319c:	andeq	r3, r1, r4, lsl #13
   131a0:	andeq	r3, r1, ip, lsr #12
   131a4:	andeq	r3, r1, r4, lsr r6
   131a8:	andeq	r3, r1, ip, lsr r6
   131ac:	andeq	r3, r1, r4, asr #12
   131b0:	andeq	r3, r1, ip, asr #12
   131b4:	andeq	r3, r1, r4, asr r6
   131b8:	andeq	r3, r1, ip, asr r6
   131bc:	andeq	r3, r1, r4, ror #12
   131c0:	ldr	r3, [r6]
   131c4:	tst	r3, #512	; 0x200
   131c8:	bne	1313c <__assert_fail@plt+0xb48>
   131cc:	ldrd	r2, [r4, #160]	; 0xa0
   131d0:	ldr	ip, [r4, #48]	; 0x30
   131d4:	strd	r2, [sp, #144]	; 0x90
   131d8:	sub	r3, r1, #10
   131dc:	cmp	r3, #1
   131e0:	str	ip, [r6, #8]
   131e4:	bhi	12ff8 <__assert_fail@plt+0xa04>
   131e8:	ldrb	r3, [r5, #4]
   131ec:	cmp	r3, #0
   131f0:	bne	13818 <__assert_fail@plt+0x1224>
   131f4:	cmp	r1, #11
   131f8:	ldr	r3, [r5, #8]
   131fc:	beq	135c0 <__assert_fail@plt+0xfcc>
   13200:	cmp	r3, #0
   13204:	bne	1382c <__assert_fail@plt+0x1238>
   13208:	str	r3, [sp, #152]	; 0x98
   1320c:	ldr	r3, [r4, #48]	; 0x30
   13210:	str	r3, [r5]
   13214:	sub	fp, r1, #1
   13218:	cmp	r1, #6
   1321c:	cmpne	fp, #1
   13220:	movls	fp, #1
   13224:	movhi	fp, #0
   13228:	bls	1306c <__assert_fail@plt+0xa78>
   1322c:	ldr	r3, [r8, #4]
   13230:	cmp	r3, #0
   13234:	movlt	r7, fp
   13238:	blt	1309c <__assert_fail@plt+0xaa8>
   1323c:	ldr	r2, [r4, #48]	; 0x30
   13240:	cmp	r2, r3
   13244:	blt	13090 <__assert_fail@plt+0xa9c>
   13248:	mov	r1, r4
   1324c:	mov	r2, #4
   13250:	mov	r0, sl
   13254:	bl	39c88 <__assert_fail@plt+0x27694>
   13258:	ldr	r7, [r4, #48]	; 0x30
   1325c:	ldr	r3, [r8, #4]
   13260:	ldrh	r1, [r4, #56]	; 0x38
   13264:	cmp	r7, r3
   13268:	movle	r7, #0
   1326c:	movgt	r7, #1
   13270:	cmp	r1, #1
   13274:	bne	1309c <__assert_fail@plt+0xaa8>
   13278:	ldrb	r3, [r8]
   1327c:	cmp	r3, #0
   13280:	bne	130a4 <__assert_fail@plt+0xab0>
   13284:	ldr	r3, [r8, #44]	; 0x2c
   13288:	tst	r3, #4
   1328c:	beq	12eec <__assert_fail@plt+0x8f8>
   13290:	mov	r7, r1
   13294:	b	132d0 <__assert_fail@plt+0xcdc>
   13298:	cmn	r0, #100	; 0x64
   1329c:	beq	135b8 <__assert_fail@plt+0xfc4>
   132a0:	bl	26ae0 <__assert_fail@plt+0x144ec>
   132a4:	ldrh	r1, [r4, #56]	; 0x38
   132a8:	ldr	ip, [r4, #48]	; 0x30
   132ac:	str	r0, [r6, #4]
   132b0:	b	12fb8 <__assert_fail@plt+0x9c4>
   132b4:	ldr	r1, [r4, #28]
   132b8:	ldr	r0, [r4, #32]
   132bc:	bl	1be48 <__assert_fail@plt+0x9854>
   132c0:	b	12eec <__assert_fail@plt+0x8f8>
   132c4:	tst	r3, #4
   132c8:	beq	13120 <__assert_fail@plt+0xb2c>
   132cc:	mov	r7, #1
   132d0:	ldr	r3, [pc, #1396]	; 1384c <__assert_fail@plt+0x1258>
   132d4:	ldr	r2, [r4, #28]
   132d8:	ldr	r1, [r8, #72]	; 0x48
   132dc:	ldr	r3, [r3]
   132e0:	mov	r0, #0
   132e4:	str	r3, [sp, #20]
   132e8:	bl	325f0 <__assert_fail@plt+0x1fffc>
   132ec:	ldrh	r2, [r4, #56]	; 0x38
   132f0:	sub	r3, r2, #1
   132f4:	str	r0, [sp, #24]
   132f8:	cmp	r3, #13
   132fc:	ldrls	pc, [pc, r3, lsl #2]
   13300:	b	137a4 <__assert_fail@plt+0x11b0>
   13304:	andeq	r3, r1, r0, asr #13
   13308:	andeq	r3, r1, ip, lsl #13
   1330c:	andeq	r3, r1, r4, asr #14
   13310:	andeq	r3, r1, r0, asr r7
   13314:	andeq	r3, r1, ip, asr #13
   13318:	ldrdeq	r3, [r1], -r8
   1331c:	andeq	r3, r1, r4, ror #13
   13320:	strdeq	r3, [r1], -r0
   13324:	strdeq	r3, [r1], -ip
   13328:	andeq	r3, r1, r8, lsl #14
   1332c:	andeq	r3, r1, r4, lsl r7
   13330:	andeq	r3, r1, r0, lsr #14
   13334:	andeq	r3, r1, ip, lsr #14
   13338:	andeq	r3, r1, r8, lsr r7
   1333c:	cmp	ip, #0
   13340:	beq	132b4 <__assert_fail@plt+0xcc0>
   13344:	ldr	r3, [r8, #52]	; 0x34
   13348:	add	r1, sp, #152	; 0x98
   1334c:	ldr	r0, [r4, #24]
   13350:	blx	r3
   13354:	cmp	r0, #0
   13358:	beq	13368 <__assert_fail@plt+0xd74>
   1335c:	ldr	r0, [r9]
   13360:	cmp	r0, #40	; 0x28
   13364:	beq	134fc <__assert_fail@plt+0xf08>
   13368:	ldr	r1, [r4, #28]
   1336c:	ldr	r0, [r4, #32]
   13370:	bl	1be48 <__assert_fail@plt+0x9854>
   13374:	ldrh	r1, [r4, #56]	; 0x38
   13378:	b	12fec <__assert_fail@plt+0x9f8>
   1337c:	mov	r2, #5
   13380:	ldr	r1, [pc, #1224]	; 13850 <__assert_fail@plt+0x125c>
   13384:	mov	r0, r7
   13388:	bl	120b4 <dcgettext@plt>
   1338c:	ldr	r2, [r4, #28]
   13390:	ldr	r1, [r8, #72]	; 0x48
   13394:	mov	fp, r0
   13398:	mov	r0, r7
   1339c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   133a0:	mov	r2, fp
   133a4:	mov	r1, r7
   133a8:	mov	r3, r0
   133ac:	mov	r0, r7
   133b0:	bl	121ec <error@plt>
   133b4:	ldr	r3, [sp, #152]	; 0x98
   133b8:	ldr	r2, [r4, #48]	; 0x30
   133bc:	cmp	r3, #0
   133c0:	str	r2, [r5]
   133c4:	addne	r3, sp, #48	; 0x30
   133c8:	bne	13038 <__assert_fail@plt+0xa44>
   133cc:	ldrh	r1, [r4, #56]	; 0x38
   133d0:	b	13214 <__assert_fail@plt+0xc20>
   133d4:	ldr	r1, [r4, #28]
   133d8:	ldr	r0, [r4, #32]
   133dc:	bl	1be48 <__assert_fail@plt+0x9854>
   133e0:	ldrb	r3, [r8]
   133e4:	cmp	r3, #0
   133e8:	bne	12eec <__assert_fail@plt+0x8f8>
   133ec:	ldrh	r1, [r4, #56]	; 0x38
   133f0:	b	12fec <__assert_fail@plt+0x9f8>
   133f4:	ldrb	r3, [r8]
   133f8:	cmp	r3, #0
   133fc:	beq	130a4 <__assert_fail@plt+0xab0>
   13400:	ldr	r3, [r8, #44]	; 0x2c
   13404:	tst	r3, #4
   13408:	bne	132cc <__assert_fail@plt+0xcd8>
   1340c:	mov	r3, #0
   13410:	strb	r3, [r5, #24]
   13414:	b	12eec <__assert_fail@plt+0x8f8>
   13418:	ldr	r3, [r4, #80]	; 0x50
   1341c:	mov	r2, #5
   13420:	and	r3, r3, #61440	; 0xf000
   13424:	cmp	r3, #40960	; 0xa000
   13428:	beq	1375c <__assert_fail@plt+0x1168>
   1342c:	ldr	r1, [pc, #1056]	; 13854 <__assert_fail@plt+0x1260>
   13430:	mov	r0, #0
   13434:	bl	120b4 <dcgettext@plt>
   13438:	ldr	r1, [r4, #28]
   1343c:	mov	fp, r0
   13440:	mov	r0, #0
   13444:	bl	1be34 <__assert_fail@plt+0x9840>
   13448:	ldr	r3, [r4]
   1344c:	ldr	r1, [r8, #72]	; 0x48
   13450:	ldr	r4, [r3, #40]	; 0x28
   13454:	cmp	r4, #0
   13458:	str	r0, [sp, #20]
   1345c:	beq	13510 <__assert_fail@plt+0xf1c>
   13460:	ldr	r7, [r3, #28]
   13464:	mov	r3, #0
   13468:	mov	r0, #1
   1346c:	ldrb	r2, [r7, r4]
   13470:	strb	r3, [r7, r4]
   13474:	str	r2, [sp, #24]
   13478:	mov	r2, r7
   1347c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   13480:	ldrb	r3, [sp, #24]
   13484:	strb	r3, [r7, r4]
   13488:	mov	r1, #0
   1348c:	str	r0, [sp]
   13490:	ldr	r3, [sp, #20]
   13494:	mov	r2, fp
   13498:	mov	r0, r1
   1349c:	bl	121ec <error@plt>
   134a0:	mov	r3, #1
   134a4:	str	r3, [r5, #28]
   134a8:	b	12eec <__assert_fail@plt+0x8f8>
   134ac:	mov	fp, r9
   134b0:	ldr	r6, [fp]
   134b4:	cmp	r6, #0
   134b8:	bne	135c8 <__assert_fail@plt+0xfd4>
   134bc:	mov	r0, sl
   134c0:	bl	39168 <__assert_fail@plt+0x26b74>
   134c4:	cmp	r0, #0
   134c8:	moveq	r0, #1
   134cc:	bne	13520 <__assert_fail@plt+0xf2c>
   134d0:	add	sp, sp, #260	; 0x104
   134d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134d8:	ldr	r3, [r8, #52]	; 0x34
   134dc:	add	r1, sp, #152	; 0x98
   134e0:	ldr	r0, [r4, #24]
   134e4:	blx	r3
   134e8:	cmp	r0, #0
   134ec:	beq	133ec <__assert_fail@plt+0xdf8>
   134f0:	ldr	r0, [r9]
   134f4:	cmp	r0, #40	; 0x28
   134f8:	bne	133ec <__assert_fail@plt+0xdf8>
   134fc:	ldr	r1, [r4, #28]
   13500:	bl	1be48 <__assert_fail@plt+0x9854>
   13504:	b	12eec <__assert_fail@plt+0x8f8>
   13508:	ldr	r0, [sl, #32]
   1350c:	b	12f94 <__assert_fail@plt+0x9a0>
   13510:	ldr	r2, [pc, #832]	; 13858 <__assert_fail@plt+0x1264>
   13514:	mov	r0, #1
   13518:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1351c:	b	13488 <__assert_fail@plt+0xe94>
   13520:	mov	r2, #5
   13524:	ldr	r1, [pc, #816]	; 1385c <__assert_fail@plt+0x1268>
   13528:	mov	r0, r6
   1352c:	ldr	r4, [fp]
   13530:	bl	120b4 <dcgettext@plt>
   13534:	ldr	r3, [sp, #36]	; 0x24
   13538:	mov	r1, r4
   1353c:	mov	r2, r0
   13540:	mov	r0, r6
   13544:	bl	121ec <error@plt>
   13548:	mov	r3, #1
   1354c:	mov	r0, r6
   13550:	str	r3, [r5, #28]
   13554:	add	sp, sp, #260	; 0x104
   13558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1355c:	ldr	r3, [pc, #764]	; 13860 <__assert_fail@plt+0x126c>
   13560:	ldr	r2, [r4, #28]
   13564:	ldr	r1, [r8, #72]	; 0x48
   13568:	mov	r0, #1
   1356c:	str	r3, [sp, #24]
   13570:	ldr	r7, [r4, #48]	; 0x30
   13574:	ldr	fp, [r6, #8]
   13578:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1357c:	ldr	r2, [r4, #24]
   13580:	ldr	r1, [r8, #72]	; 0x48
   13584:	str	r0, [sp, #20]
   13588:	mov	r0, #2
   1358c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   13590:	ldr	r3, [sp, #20]
   13594:	stm	sp, {r7, fp}
   13598:	str	r3, [sp, #8]
   1359c:	ldr	r2, [sp, #32]
   135a0:	ldr	r3, [sp, #24]
   135a4:	ldr	r1, [pc, #696]	; 13864 <__assert_fail@plt+0x1270>
   135a8:	str	r0, [sp, #12]
   135ac:	ldr	r0, [sp, #28]
   135b0:	bl	1233c <fprintf@plt>
   135b4:	b	12f58 <__assert_fail@plt+0x964>
   135b8:	str	r0, [r6, #4]
   135bc:	b	12fb0 <__assert_fail@plt+0x9bc>
   135c0:	str	r3, [sp, #152]	; 0x98
   135c4:	b	133b8 <__assert_fail@plt+0xdc4>
   135c8:	ldr	r1, [sp, #36]	; 0x24
   135cc:	bl	1be34 <__assert_fail@plt+0x9840>
   135d0:	mov	r1, r6
   135d4:	ldr	r2, [pc, #652]	; 13868 <__assert_fail@plt+0x1274>
   135d8:	mov	r3, r0
   135dc:	mov	r0, r4
   135e0:	bl	121ec <error@plt>
   135e4:	mov	r3, #1
   135e8:	mov	r0, r4
   135ec:	str	r3, [r5, #28]
   135f0:	add	sp, sp, #260	; 0x104
   135f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f8:	mov	r1, r4
   135fc:	mov	r2, #1
   13600:	mov	r0, sl
   13604:	bl	39c88 <__assert_fail@plt+0x27694>
   13608:	b	12eec <__assert_fail@plt+0x8f8>
   1360c:	orr	r1, r1, #16
   13610:	str	r1, [r6]
   13614:	b	12eb4 <__assert_fail@plt+0x8c0>
   13618:	orr	r1, r1, #3
   1361c:	str	r1, [r6]
   13620:	b	12eb4 <__assert_fail@plt+0x8c0>
   13624:	ldr	r3, [pc, #576]	; 1386c <__assert_fail@plt+0x1278>
   13628:	b	13560 <__assert_fail@plt+0xf6c>
   1362c:	ldr	r3, [pc, #572]	; 13870 <__assert_fail@plt+0x127c>
   13630:	b	13560 <__assert_fail@plt+0xf6c>
   13634:	ldr	r3, [pc, #568]	; 13874 <__assert_fail@plt+0x1280>
   13638:	b	13560 <__assert_fail@plt+0xf6c>
   1363c:	ldr	r3, [pc, #564]	; 13878 <__assert_fail@plt+0x1284>
   13640:	b	13560 <__assert_fail@plt+0xf6c>
   13644:	ldr	r3, [pc, #560]	; 1387c <__assert_fail@plt+0x1288>
   13648:	b	13560 <__assert_fail@plt+0xf6c>
   1364c:	ldr	r3, [pc, #556]	; 13880 <__assert_fail@plt+0x128c>
   13650:	b	13560 <__assert_fail@plt+0xf6c>
   13654:	ldr	r3, [pc, #552]	; 13884 <__assert_fail@plt+0x1290>
   13658:	b	13560 <__assert_fail@plt+0xf6c>
   1365c:	ldr	r3, [pc, #548]	; 13888 <__assert_fail@plt+0x1294>
   13660:	b	13560 <__assert_fail@plt+0xf6c>
   13664:	ldr	r3, [pc, #544]	; 1388c <__assert_fail@plt+0x1298>
   13668:	b	13560 <__assert_fail@plt+0xf6c>
   1366c:	ldr	r3, [pc, #540]	; 13890 <__assert_fail@plt+0x129c>
   13670:	b	13560 <__assert_fail@plt+0xf6c>
   13674:	ldr	r3, [pc, #536]	; 13894 <__assert_fail@plt+0x12a0>
   13678:	b	13560 <__assert_fail@plt+0xf6c>
   1367c:	ldr	r3, [pc, #532]	; 13898 <__assert_fail@plt+0x12a4>
   13680:	b	13560 <__assert_fail@plt+0xf6c>
   13684:	ldr	r3, [pc, #528]	; 1389c <__assert_fail@plt+0x12a8>
   13688:	b	13560 <__assert_fail@plt+0xf6c>
   1368c:	ldr	r3, [pc, #460]	; 13860 <__assert_fail@plt+0x126c>
   13690:	mov	r2, r0
   13694:	ldrb	r1, [r5, #4]
   13698:	ldrb	ip, [r5, #5]
   1369c:	str	r7, [sp, #4]
   136a0:	str	r1, [sp, #8]
   136a4:	str	fp, [sp]
   136a8:	ldr	r1, [pc, #496]	; 138a0 <__assert_fail@plt+0x12ac>
   136ac:	ldr	r0, [sp, #20]
   136b0:	str	ip, [sp, #12]
   136b4:	bl	1233c <fprintf@plt>
   136b8:	ldrh	r1, [r4, #56]	; 0x38
   136bc:	b	130c0 <__assert_fail@plt+0xacc>
   136c0:	ldr	r3, [pc, #420]	; 1386c <__assert_fail@plt+0x1278>
   136c4:	mov	r2, r0
   136c8:	b	13694 <__assert_fail@plt+0x10a0>
   136cc:	ldr	r3, [pc, #452]	; 13898 <__assert_fail@plt+0x12a4>
   136d0:	mov	r2, r0
   136d4:	b	13694 <__assert_fail@plt+0x10a0>
   136d8:	ldr	r3, [pc, #444]	; 1389c <__assert_fail@plt+0x12a8>
   136dc:	mov	r2, r0
   136e0:	b	13694 <__assert_fail@plt+0x10a0>
   136e4:	ldr	r3, [pc, #388]	; 13870 <__assert_fail@plt+0x127c>
   136e8:	mov	r2, r0
   136ec:	b	13694 <__assert_fail@plt+0x10a0>
   136f0:	ldr	r3, [pc, #380]	; 13874 <__assert_fail@plt+0x1280>
   136f4:	mov	r2, r0
   136f8:	b	13694 <__assert_fail@plt+0x10a0>
   136fc:	ldr	r3, [pc, #372]	; 13878 <__assert_fail@plt+0x1284>
   13700:	mov	r2, r0
   13704:	b	13694 <__assert_fail@plt+0x10a0>
   13708:	ldr	r3, [pc, #364]	; 1387c <__assert_fail@plt+0x1288>
   1370c:	mov	r2, r0
   13710:	b	13694 <__assert_fail@plt+0x10a0>
   13714:	ldr	r3, [pc, #356]	; 13880 <__assert_fail@plt+0x128c>
   13718:	mov	r2, r0
   1371c:	b	13694 <__assert_fail@plt+0x10a0>
   13720:	ldr	r3, [pc, #348]	; 13884 <__assert_fail@plt+0x1290>
   13724:	mov	r2, r0
   13728:	b	13694 <__assert_fail@plt+0x10a0>
   1372c:	ldr	r3, [pc, #340]	; 13888 <__assert_fail@plt+0x1294>
   13730:	mov	r2, r0
   13734:	b	13694 <__assert_fail@plt+0x10a0>
   13738:	ldr	r3, [pc, #332]	; 1388c <__assert_fail@plt+0x1298>
   1373c:	mov	r2, r0
   13740:	b	13694 <__assert_fail@plt+0x10a0>
   13744:	ldr	r3, [pc, #324]	; 13890 <__assert_fail@plt+0x129c>
   13748:	mov	r2, r0
   1374c:	b	13694 <__assert_fail@plt+0x10a0>
   13750:	ldr	r3, [pc, #316]	; 13894 <__assert_fail@plt+0x12a0>
   13754:	mov	r2, r0
   13758:	b	13694 <__assert_fail@plt+0x10a0>
   1375c:	ldr	r1, [pc, #320]	; 138a4 <__assert_fail@plt+0x12b0>
   13760:	mov	r0, #0
   13764:	bl	120b4 <dcgettext@plt>
   13768:	ldr	r1, [r4, #28]
   1376c:	mov	r7, r0
   13770:	mov	r0, #0
   13774:	bl	1be34 <__assert_fail@plt+0x9840>
   13778:	mov	r1, #0
   1377c:	mov	r2, r7
   13780:	mov	r3, r0
   13784:	mov	r0, r1
   13788:	bl	121ec <error@plt>
   1378c:	b	134a0 <__assert_fail@plt+0xeac>
   13790:	ldr	r1, [pc, #272]	; 138a8 <__assert_fail@plt+0x12b4>
   13794:	ldr	r0, [pc, #272]	; 138ac <__assert_fail@plt+0x12b8>
   13798:	bl	124b0 <sprintf@plt>
   1379c:	ldr	r3, [pc, #264]	; 138ac <__assert_fail@plt+0x12b8>
   137a0:	b	13560 <__assert_fail@plt+0xf6c>
   137a4:	ldr	r1, [pc, #252]	; 138a8 <__assert_fail@plt+0x12b4>
   137a8:	ldr	r0, [pc, #252]	; 138ac <__assert_fail@plt+0x12b8>
   137ac:	bl	124b0 <sprintf@plt>
   137b0:	ldr	r3, [pc, #244]	; 138ac <__assert_fail@plt+0x12b8>
   137b4:	ldr	r2, [sp, #24]
   137b8:	b	13694 <__assert_fail@plt+0x10a0>
   137bc:	bl	12348 <__errno_location@plt>
   137c0:	mov	r2, #5
   137c4:	ldr	r1, [pc, #228]	; 138b0 <__assert_fail@plt+0x12bc>
   137c8:	ldr	r4, [r0]
   137cc:	mov	r0, r9
   137d0:	bl	120b4 <dcgettext@plt>
   137d4:	ldr	r1, [sp, #36]	; 0x24
   137d8:	mov	r6, r0
   137dc:	mov	r0, r9
   137e0:	bl	1be34 <__assert_fail@plt+0x9840>
   137e4:	mov	r2, r6
   137e8:	mov	r1, r4
   137ec:	mov	r3, r0
   137f0:	mov	r0, r9
   137f4:	bl	121ec <error@plt>
   137f8:	mov	r0, #1
   137fc:	str	r0, [r5, #28]
   13800:	b	134d0 <__assert_fail@plt+0xedc>
   13804:	ldr	r3, [pc, #168]	; 138b4 <__assert_fail@plt+0x12c0>
   13808:	mov	r2, #107	; 0x6b
   1380c:	ldr	r1, [pc, #164]	; 138b8 <__assert_fail@plt+0x12c4>
   13810:	ldr	r0, [pc, #164]	; 138bc <__assert_fail@plt+0x12c8>
   13814:	bl	125f4 <__assert_fail@plt>
   13818:	ldr	r3, [pc, #160]	; 138c0 <__assert_fail@plt+0x12cc>
   1381c:	mov	r2, #380	; 0x17c
   13820:	ldr	r1, [pc, #144]	; 138b8 <__assert_fail@plt+0x12c4>
   13824:	ldr	r0, [pc, #152]	; 138c4 <__assert_fail@plt+0x12d0>
   13828:	bl	125f4 <__assert_fail@plt>
   1382c:	ldr	r3, [pc, #140]	; 138c0 <__assert_fail@plt+0x12cc>
   13830:	ldr	r2, [pc, #144]	; 138c8 <__assert_fail@plt+0x12d4>
   13834:	ldr	r1, [pc, #124]	; 138b8 <__assert_fail@plt+0x12c4>
   13838:	ldr	r0, [pc, #140]	; 138cc <__assert_fail@plt+0x12d8>
   1383c:	bl	125f4 <__assert_fail@plt>
   13840:	andeq	r4, r6, ip, lsl #5
   13844:	andeq	r4, r6, r0, asr #28
   13848:	andeq	r4, r6, ip, ror #28
   1384c:	andeq	r4, r6, r8, asr #10
   13850:	andeq	lr, r4, r8, lsl r1
   13854:	andeq	lr, r4, r8, lsl #1
   13858:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   1385c:	ldrdeq	lr, [r4], -ip
   13860:	andeq	sp, r4, r0, ror #29
   13864:	andeq	sp, r4, r4, ror pc
   13868:	andeq	lr, r4, r0, lsr #3
   1386c:	ldrdeq	sp, [r4], -r8
   13870:	andeq	sp, r4, ip, lsl #30
   13874:	andeq	sp, r4, r4, lsl pc
   13878:	andeq	sp, r4, ip, lsl pc
   1387c:	andeq	sp, r4, r8, lsr #30
   13880:	andeq	sp, r4, r0, lsr pc
   13884:	andeq	sp, r4, ip, lsr pc
   13888:	andeq	sp, r4, r4, asr #30
   1388c:	andeq	sp, r4, r0, asr pc
   13890:	andeq	sp, r4, r8, ror #29
   13894:	strdeq	sp, [r4], -r4
   13898:	strdeq	sp, [r4], -ip
   1389c:	andeq	sp, r4, r4, lsl #30
   138a0:	andeq	lr, r4, r4, asr #2
   138a4:	andeq	lr, r4, ip
   138a8:	andeq	sp, r4, ip, ror #30
   138ac:	andeq	r4, r6, ip, asr r5
   138b0:	andeq	sp, r4, r8, asr pc
   138b4:	andeq	sp, r4, r0, lsr #29
   138b8:	ldrdeq	sp, [r4], -ip
   138bc:	andeq	sp, r4, r8, ror #31
   138c0:	andeq	sp, r4, ip, lsr #29
   138c4:	ldrdeq	lr, [r4], -r4
   138c8:	andeq	r0, r0, sp, ror r1
   138cc:	andeq	lr, r4, r8, ror #1
   138d0:	ldr	r3, [pc, #12]	; 138e4 <__assert_fail@plt+0x12f0>
   138d4:	ldr	r3, [r3]
   138d8:	str	r3, [r0]
   138dc:	mov	r0, #1
   138e0:	bx	lr
   138e4:	andeq	r4, r6, ip, lsl #5
   138e8:	push	{r4, lr}
   138ec:	bl	1aee0 <__assert_fail@plt+0x88ec>
   138f0:	ldr	r3, [pc, #4]	; 138fc <__assert_fail@plt+0x1308>
   138f4:	ldr	r0, [r3, #28]
   138f8:	bl	122d0 <exit@plt>
   138fc:	andeq	r4, r6, r0, asr #28
   13900:	ldr	r3, [pc, #84]	; 1395c <__assert_fail@plt+0x1368>
   13904:	ldrb	r3, [r3]
   13908:	cmp	r3, #0
   1390c:	beq	1393c <__assert_fail@plt+0x1348>
   13910:	ldr	r2, [pc, #72]	; 13960 <__assert_fail@plt+0x136c>
   13914:	ldrb	r3, [r2, #4]
   13918:	cmp	r3, #0
   1391c:	beq	13944 <__assert_fail@plt+0x1350>
   13920:	cmp	r1, #0
   13924:	beq	1393c <__assert_fail@plt+0x1348>
   13928:	ldr	r3, [r1, #16]
   1392c:	and	r3, r3, #61440	; 0xf000
   13930:	cmp	r3, #16384	; 0x4000
   13934:	moveq	r3, #1
   13938:	strbeq	r3, [r2, #24]
   1393c:	mov	r0, #1
   13940:	bx	lr
   13944:	push	{r4, lr}
   13948:	ldr	r3, [pc, #20]	; 13964 <__assert_fail@plt+0x1370>
   1394c:	ldr	r2, [pc, #20]	; 13968 <__assert_fail@plt+0x1374>
   13950:	ldr	r1, [pc, #20]	; 1396c <__assert_fail@plt+0x1378>
   13954:	ldr	r0, [pc, #20]	; 13970 <__assert_fail@plt+0x137c>
   13958:	bl	125f4 <__assert_fail@plt>
   1395c:	andeq	r4, r6, ip, ror #28
   13960:	andeq	r4, r6, r0, asr #28
   13964:	andeq	lr, r4, r8, asr r4
   13968:	andeq	r0, r0, r5, asr r3
   1396c:	andeq	lr, r4, r8, asr #9
   13970:	ldrdeq	lr, [r4], -r0
   13974:	push	{r4, r5, r6, lr}
   13978:	mov	r4, r2
   1397c:	ldr	r2, [r2, #156]	; 0x9c
   13980:	mov	r5, r0
   13984:	cmp	r2, #0
   13988:	mov	r6, r1
   1398c:	beq	1399c <__assert_fail@plt+0x13a8>
   13990:	bl	1bd14 <__assert_fail@plt+0x9720>
   13994:	cmp	r0, #0
   13998:	beq	139b0 <__assert_fail@plt+0x13bc>
   1399c:	ldr	r2, [r4, #160]	; 0xa0
   139a0:	mov	r1, r6
   139a4:	mov	r0, r5
   139a8:	pop	{r4, r5, r6, lr}
   139ac:	b	1bd14 <__assert_fail@plt+0x9720>
   139b0:	pop	{r4, r5, r6, pc}
   139b4:	push	{r4, r5, r6, lr}
   139b8:	mov	r4, r2
   139bc:	ldr	r2, [r2, #156]	; 0x9c
   139c0:	mov	r5, r0
   139c4:	cmp	r2, #0
   139c8:	mov	r6, r1
   139cc:	beq	139dc <__assert_fail@plt+0x13e8>
   139d0:	bl	1bd14 <__assert_fail@plt+0x9720>
   139d4:	cmp	r0, #0
   139d8:	bne	139f0 <__assert_fail@plt+0x13fc>
   139dc:	ldr	r2, [r4, #160]	; 0xa0
   139e0:	mov	r1, r6
   139e4:	mov	r0, r5
   139e8:	pop	{r4, r5, r6, lr}
   139ec:	b	1bd14 <__assert_fail@plt+0x9720>
   139f0:	pop	{r4, r5, r6, pc}
   139f4:	push	{r4, r5, r6, lr}
   139f8:	mov	r5, r2
   139fc:	ldr	r3, [r2, #44]	; 0x2c
   13a00:	ldr	r0, [r1, #72]	; 0x48
   13a04:	cmp	r3, #1
   13a08:	ldr	r4, [r1, #76]	; 0x4c
   13a0c:	beq	13ab4 <__assert_fail@plt+0x14c0>
   13a10:	bcc	13a74 <__assert_fail@plt+0x1480>
   13a14:	cmp	r3, #2
   13a18:	bne	13a60 <__assert_fail@plt+0x146c>
   13a1c:	ldr	r1, [r2, #48]	; 0x30
   13a20:	bl	123cc <difftime@plt>
   13a24:	ldr	r3, [r5, #52]	; 0x34
   13a28:	vldr	d6, [pc, #208]	; 13b00 <__assert_fail@plt+0x150c>
   13a2c:	sub	r4, r4, r3
   13a30:	vmov	s15, r4
   13a34:	vcvt.f64.s32	d7, s15
   13a38:	vmla.f64	d0, d7, d6
   13a3c:	vcmpe.f64	d0, #0.0
   13a40:	vmrs	APSR_nzcv, fpscr
   13a44:	ble	13af4 <__assert_fail@plt+0x1500>
   13a48:	vldr	d7, [pc, #184]	; 13b08 <__assert_fail@plt+0x1514>
   13a4c:	vcmpe.f64	d0, d7
   13a50:	vmrs	APSR_nzcv, fpscr
   13a54:	movls	r0, #1
   13a58:	movhi	r0, #0
   13a5c:	pop	{r4, r5, r6, pc}
   13a60:	ldr	r3, [pc, #168]	; 13b10 <__assert_fail@plt+0x151c>
   13a64:	mov	r2, #138	; 0x8a
   13a68:	ldr	r1, [pc, #164]	; 13b14 <__assert_fail@plt+0x1520>
   13a6c:	ldr	r0, [pc, #164]	; 13b18 <__assert_fail@plt+0x1524>
   13a70:	bl	125f4 <__assert_fail@plt>
   13a74:	ldr	r1, [r2, #48]	; 0x30
   13a78:	ldr	r5, [r2, #52]	; 0x34
   13a7c:	cmp	r0, r1
   13a80:	cmpeq	r4, r5
   13a84:	beq	13af4 <__assert_fail@plt+0x1500>
   13a88:	bl	123cc <difftime@plt>
   13a8c:	sub	r4, r4, r5
   13a90:	vldr	d6, [pc, #104]	; 13b00 <__assert_fail@plt+0x150c>
   13a94:	vmov	s15, r4
   13a98:	vcvt.f64.s32	d7, s15
   13a9c:	vmla.f64	d0, d7, d6
   13aa0:	vcmpe.f64	d0, #0.0
   13aa4:	vmrs	APSR_nzcv, fpscr
   13aa8:	movpl	r0, #1
   13aac:	movmi	r0, #0
   13ab0:	pop	{r4, r5, r6, pc}
   13ab4:	ldr	r1, [r2, #48]	; 0x30
   13ab8:	ldr	r5, [r2, #52]	; 0x34
   13abc:	cmp	r4, r5
   13ac0:	cmpeq	r0, r1
   13ac4:	beq	13af4 <__assert_fail@plt+0x1500>
   13ac8:	bl	123cc <difftime@plt>
   13acc:	sub	r4, r4, r5
   13ad0:	vldr	d6, [pc, #40]	; 13b00 <__assert_fail@plt+0x150c>
   13ad4:	vmov	s15, r4
   13ad8:	vcvt.f64.s32	d7, s15
   13adc:	vmla.f64	d0, d7, d6
   13ae0:	vcmpe.f64	d0, #0.0
   13ae4:	vmrs	APSR_nzcv, fpscr
   13ae8:	movmi	r0, #1
   13aec:	movpl	r0, #0
   13af0:	pop	{r4, r5, r6, pc}
   13af4:	mov	r0, #0
   13af8:	pop	{r4, r5, r6, pc}
   13afc:	nop			; (mov r0, r0)
   13b00:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13b04:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13b08:	andeq	r0, r0, r0
   13b0c:	submi	r0, lr, r0
   13b10:	andeq	lr, r4, r0, ror r4
   13b14:	andeq	lr, r4, r8, asr #9
   13b18:	andeq	r2, r5, r8, lsl r6
   13b1c:	push	{r4, r5, r6, lr}
   13b20:	ldr	r3, [r2, #44]	; 0x2c
   13b24:	cmp	r3, #0
   13b28:	bne	13b7c <__assert_fail@plt+0x1588>
   13b2c:	ldr	r0, [r1, #72]	; 0x48
   13b30:	ldr	r4, [r1, #76]	; 0x4c
   13b34:	ldr	r5, [r2, #52]	; 0x34
   13b38:	ldr	r1, [r2, #48]	; 0x30
   13b3c:	cmp	r0, r1
   13b40:	cmpeq	r4, r5
   13b44:	beq	13b74 <__assert_fail@plt+0x1580>
   13b48:	bl	123cc <difftime@plt>
   13b4c:	sub	r4, r4, r5
   13b50:	vldr	d6, [pc, #56]	; 13b90 <__assert_fail@plt+0x159c>
   13b54:	vmov	s15, r4
   13b58:	vcvt.f64.s32	d7, s15
   13b5c:	vmla.f64	d0, d7, d6
   13b60:	vcmpe.f64	d0, #0.0
   13b64:	vmrs	APSR_nzcv, fpscr
   13b68:	movpl	r0, #1
   13b6c:	movmi	r0, #0
   13b70:	pop	{r4, r5, r6, pc}
   13b74:	mov	r0, r3
   13b78:	pop	{r4, r5, r6, pc}
   13b7c:	ldr	r3, [pc, #20]	; 13b98 <__assert_fail@plt+0x15a4>
   13b80:	mov	r2, #166	; 0xa6
   13b84:	ldr	r1, [pc, #16]	; 13b9c <__assert_fail@plt+0x15a8>
   13b88:	ldr	r0, [pc, #16]	; 13ba0 <__assert_fail@plt+0x15ac>
   13b8c:	bl	125f4 <__assert_fail@plt>
   13b90:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13b94:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13b98:	andeq	lr, r4, r0, lsl #9
   13b9c:	andeq	lr, r4, r8, asr #9
   13ba0:	andeq	lr, r4, r0, lsl r5
   13ba4:	push	{r4, r5, r6, lr}
   13ba8:	mov	r5, r2
   13bac:	ldr	r3, [r2, #44]	; 0x2c
   13bb0:	ldr	r0, [r1, #72]	; 0x48
   13bb4:	cmp	r3, #1
   13bb8:	ldr	r4, [r1, #76]	; 0x4c
   13bbc:	beq	13c64 <__assert_fail@plt+0x1670>
   13bc0:	bcc	13c24 <__assert_fail@plt+0x1630>
   13bc4:	cmp	r3, #2
   13bc8:	bne	13c10 <__assert_fail@plt+0x161c>
   13bcc:	ldr	r1, [r2, #48]	; 0x30
   13bd0:	bl	123cc <difftime@plt>
   13bd4:	ldr	r3, [r5, #52]	; 0x34
   13bd8:	vldr	d6, [pc, #208]	; 13cb0 <__assert_fail@plt+0x16bc>
   13bdc:	sub	r4, r4, r3
   13be0:	vmov	s15, r4
   13be4:	vcvt.f64.s32	d7, s15
   13be8:	vmla.f64	d0, d7, d6
   13bec:	vcmpe.f64	d0, #0.0
   13bf0:	vmrs	APSR_nzcv, fpscr
   13bf4:	ble	13ca4 <__assert_fail@plt+0x16b0>
   13bf8:	vldr	d7, [pc, #184]	; 13cb8 <__assert_fail@plt+0x16c4>
   13bfc:	vcmpe.f64	d0, d7
   13c00:	vmrs	APSR_nzcv, fpscr
   13c04:	movls	r0, #1
   13c08:	movhi	r0, #0
   13c0c:	pop	{r4, r5, r6, pc}
   13c10:	ldr	r3, [pc, #168]	; 13cc0 <__assert_fail@plt+0x16cc>
   13c14:	mov	r2, #138	; 0x8a
   13c18:	ldr	r1, [pc, #164]	; 13cc4 <__assert_fail@plt+0x16d0>
   13c1c:	ldr	r0, [pc, #164]	; 13cc8 <__assert_fail@plt+0x16d4>
   13c20:	bl	125f4 <__assert_fail@plt>
   13c24:	ldr	r1, [r2, #48]	; 0x30
   13c28:	ldr	r5, [r2, #52]	; 0x34
   13c2c:	cmp	r0, r1
   13c30:	cmpeq	r4, r5
   13c34:	beq	13ca4 <__assert_fail@plt+0x16b0>
   13c38:	bl	123cc <difftime@plt>
   13c3c:	sub	r4, r4, r5
   13c40:	vldr	d6, [pc, #104]	; 13cb0 <__assert_fail@plt+0x16bc>
   13c44:	vmov	s15, r4
   13c48:	vcvt.f64.s32	d7, s15
   13c4c:	vmla.f64	d0, d7, d6
   13c50:	vcmpe.f64	d0, #0.0
   13c54:	vmrs	APSR_nzcv, fpscr
   13c58:	movpl	r0, #1
   13c5c:	movmi	r0, #0
   13c60:	pop	{r4, r5, r6, pc}
   13c64:	ldr	r1, [r2, #48]	; 0x30
   13c68:	ldr	r5, [r2, #52]	; 0x34
   13c6c:	cmp	r4, r5
   13c70:	cmpeq	r0, r1
   13c74:	beq	13ca4 <__assert_fail@plt+0x16b0>
   13c78:	bl	123cc <difftime@plt>
   13c7c:	sub	r4, r4, r5
   13c80:	vldr	d6, [pc, #40]	; 13cb0 <__assert_fail@plt+0x16bc>
   13c84:	vmov	s15, r4
   13c88:	vcvt.f64.s32	d7, s15
   13c8c:	vmla.f64	d0, d7, d6
   13c90:	vcmpe.f64	d0, #0.0
   13c94:	vmrs	APSR_nzcv, fpscr
   13c98:	movmi	r0, #1
   13c9c:	movpl	r0, #0
   13ca0:	pop	{r4, r5, r6, pc}
   13ca4:	mov	r0, #0
   13ca8:	pop	{r4, r5, r6, pc}
   13cac:	nop			; (mov r0, r0)
   13cb0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13cb4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13cb8:	andeq	r0, r0, r0
   13cbc:	rscsmi	r1, r5, r0, lsl #16
   13cc0:	andeq	lr, r4, r0, ror r4
   13cc4:	andeq	lr, r4, r8, asr #9
   13cc8:	andeq	r2, r5, r8, lsl r6
   13ccc:	mov	r0, #1
   13cd0:	bx	lr
   13cd4:	push	{r4, r5, r6, lr}
   13cd8:	mov	r5, r2
   13cdc:	ldr	r3, [r2, #44]	; 0x2c
   13ce0:	ldr	r0, [r1, #88]	; 0x58
   13ce4:	cmp	r3, #1
   13ce8:	ldr	r4, [r1, #92]	; 0x5c
   13cec:	beq	13d94 <__assert_fail@plt+0x17a0>
   13cf0:	bcc	13d54 <__assert_fail@plt+0x1760>
   13cf4:	cmp	r3, #2
   13cf8:	bne	13d40 <__assert_fail@plt+0x174c>
   13cfc:	ldr	r1, [r2, #48]	; 0x30
   13d00:	bl	123cc <difftime@plt>
   13d04:	ldr	r3, [r5, #52]	; 0x34
   13d08:	vldr	d6, [pc, #208]	; 13de0 <__assert_fail@plt+0x17ec>
   13d0c:	sub	r4, r4, r3
   13d10:	vmov	s15, r4
   13d14:	vcvt.f64.s32	d7, s15
   13d18:	vmla.f64	d0, d7, d6
   13d1c:	vcmpe.f64	d0, #0.0
   13d20:	vmrs	APSR_nzcv, fpscr
   13d24:	ble	13dd4 <__assert_fail@plt+0x17e0>
   13d28:	vldr	d7, [pc, #184]	; 13de8 <__assert_fail@plt+0x17f4>
   13d2c:	vcmpe.f64	d0, d7
   13d30:	vmrs	APSR_nzcv, fpscr
   13d34:	movls	r0, #1
   13d38:	movhi	r0, #0
   13d3c:	pop	{r4, r5, r6, pc}
   13d40:	ldr	r3, [pc, #168]	; 13df0 <__assert_fail@plt+0x17fc>
   13d44:	mov	r2, #138	; 0x8a
   13d48:	ldr	r1, [pc, #164]	; 13df4 <__assert_fail@plt+0x1800>
   13d4c:	ldr	r0, [pc, #164]	; 13df8 <__assert_fail@plt+0x1804>
   13d50:	bl	125f4 <__assert_fail@plt>
   13d54:	ldr	r1, [r2, #48]	; 0x30
   13d58:	ldr	r5, [r2, #52]	; 0x34
   13d5c:	cmp	r0, r1
   13d60:	cmpeq	r4, r5
   13d64:	beq	13dd4 <__assert_fail@plt+0x17e0>
   13d68:	bl	123cc <difftime@plt>
   13d6c:	sub	r4, r4, r5
   13d70:	vldr	d6, [pc, #104]	; 13de0 <__assert_fail@plt+0x17ec>
   13d74:	vmov	s15, r4
   13d78:	vcvt.f64.s32	d7, s15
   13d7c:	vmla.f64	d0, d7, d6
   13d80:	vcmpe.f64	d0, #0.0
   13d84:	vmrs	APSR_nzcv, fpscr
   13d88:	movpl	r0, #1
   13d8c:	movmi	r0, #0
   13d90:	pop	{r4, r5, r6, pc}
   13d94:	ldr	r1, [r2, #48]	; 0x30
   13d98:	ldr	r5, [r2, #52]	; 0x34
   13d9c:	cmp	r4, r5
   13da0:	cmpeq	r0, r1
   13da4:	beq	13dd4 <__assert_fail@plt+0x17e0>
   13da8:	bl	123cc <difftime@plt>
   13dac:	sub	r4, r4, r5
   13db0:	vldr	d6, [pc, #40]	; 13de0 <__assert_fail@plt+0x17ec>
   13db4:	vmov	s15, r4
   13db8:	vcvt.f64.s32	d7, s15
   13dbc:	vmla.f64	d0, d7, d6
   13dc0:	vcmpe.f64	d0, #0.0
   13dc4:	vmrs	APSR_nzcv, fpscr
   13dc8:	movmi	r0, #1
   13dcc:	movpl	r0, #0
   13dd0:	pop	{r4, r5, r6, pc}
   13dd4:	mov	r0, #0
   13dd8:	pop	{r4, r5, r6, pc}
   13ddc:	nop			; (mov r0, r0)
   13de0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13de4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13de8:	andeq	r0, r0, r0
   13dec:	submi	r0, lr, r0
   13df0:	andeq	lr, r4, r0, ror r4
   13df4:	andeq	lr, r4, r8, asr #9
   13df8:	andeq	r2, r5, r8, lsl r6
   13dfc:	push	{r4, r5, r6, lr}
   13e00:	ldr	r3, [r2, #44]	; 0x2c
   13e04:	cmp	r3, #0
   13e08:	bne	13e5c <__assert_fail@plt+0x1868>
   13e0c:	ldr	r0, [r1, #88]	; 0x58
   13e10:	ldr	r4, [r1, #92]	; 0x5c
   13e14:	ldr	r5, [r2, #52]	; 0x34
   13e18:	ldr	r1, [r2, #48]	; 0x30
   13e1c:	cmp	r0, r1
   13e20:	cmpeq	r4, r5
   13e24:	beq	13e54 <__assert_fail@plt+0x1860>
   13e28:	bl	123cc <difftime@plt>
   13e2c:	sub	r4, r4, r5
   13e30:	vldr	d6, [pc, #56]	; 13e70 <__assert_fail@plt+0x187c>
   13e34:	vmov	s15, r4
   13e38:	vcvt.f64.s32	d7, s15
   13e3c:	vmla.f64	d0, d7, d6
   13e40:	vcmpe.f64	d0, #0.0
   13e44:	vmrs	APSR_nzcv, fpscr
   13e48:	movpl	r0, #1
   13e4c:	movmi	r0, #0
   13e50:	pop	{r4, r5, r6, pc}
   13e54:	mov	r0, r3
   13e58:	pop	{r4, r5, r6, pc}
   13e5c:	ldr	r3, [pc, #20]	; 13e78 <__assert_fail@plt+0x1884>
   13e60:	mov	r2, #199	; 0xc7
   13e64:	ldr	r1, [pc, #16]	; 13e7c <__assert_fail@plt+0x1888>
   13e68:	ldr	r0, [pc, #16]	; 13e80 <__assert_fail@plt+0x188c>
   13e6c:	bl	125f4 <__assert_fail@plt>
   13e70:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13e74:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13e78:	andeq	lr, r4, ip, lsl #9
   13e7c:	andeq	lr, r4, r8, asr #9
   13e80:	andeq	lr, r4, r0, lsl r5
   13e84:	push	{r4, r5, r6, lr}
   13e88:	mov	r4, r2
   13e8c:	ldr	r2, [r2, #156]	; 0x9c
   13e90:	mov	r5, r0
   13e94:	cmp	r2, #0
   13e98:	mov	r6, r1
   13e9c:	beq	13ea4 <__assert_fail@plt+0x18b0>
   13ea0:	bl	1bd14 <__assert_fail@plt+0x9720>
   13ea4:	ldr	r2, [r4, #160]	; 0xa0
   13ea8:	mov	r1, r6
   13eac:	mov	r0, r5
   13eb0:	pop	{r4, r5, r6, lr}
   13eb4:	b	1bd14 <__assert_fail@plt+0x9720>
   13eb8:	push	{r4, r5, r6, lr}
   13ebc:	mov	r5, r2
   13ec0:	ldr	r3, [r2, #44]	; 0x2c
   13ec4:	ldr	r0, [r1, #88]	; 0x58
   13ec8:	cmp	r3, #1
   13ecc:	ldr	r4, [r1, #92]	; 0x5c
   13ed0:	beq	13f78 <__assert_fail@plt+0x1984>
   13ed4:	bcc	13f38 <__assert_fail@plt+0x1944>
   13ed8:	cmp	r3, #2
   13edc:	bne	13f24 <__assert_fail@plt+0x1930>
   13ee0:	ldr	r1, [r2, #48]	; 0x30
   13ee4:	bl	123cc <difftime@plt>
   13ee8:	ldr	r3, [r5, #52]	; 0x34
   13eec:	vldr	d6, [pc, #204]	; 13fc0 <__assert_fail@plt+0x19cc>
   13ef0:	sub	r4, r4, r3
   13ef4:	vmov	s15, r4
   13ef8:	vcvt.f64.s32	d7, s15
   13efc:	vmla.f64	d0, d7, d6
   13f00:	vcmpe.f64	d0, #0.0
   13f04:	vmrs	APSR_nzcv, fpscr
   13f08:	ble	13fb8 <__assert_fail@plt+0x19c4>
   13f0c:	vldr	d7, [pc, #180]	; 13fc8 <__assert_fail@plt+0x19d4>
   13f10:	vcmpe.f64	d0, d7
   13f14:	vmrs	APSR_nzcv, fpscr
   13f18:	movls	r0, #1
   13f1c:	movhi	r0, #0
   13f20:	pop	{r4, r5, r6, pc}
   13f24:	ldr	r3, [pc, #164]	; 13fd0 <__assert_fail@plt+0x19dc>
   13f28:	mov	r2, #138	; 0x8a
   13f2c:	ldr	r1, [pc, #160]	; 13fd4 <__assert_fail@plt+0x19e0>
   13f30:	ldr	r0, [pc, #160]	; 13fd8 <__assert_fail@plt+0x19e4>
   13f34:	bl	125f4 <__assert_fail@plt>
   13f38:	ldr	r1, [r2, #48]	; 0x30
   13f3c:	ldr	r5, [r2, #52]	; 0x34
   13f40:	cmp	r0, r1
   13f44:	cmpeq	r4, r5
   13f48:	beq	13fb8 <__assert_fail@plt+0x19c4>
   13f4c:	bl	123cc <difftime@plt>
   13f50:	sub	r4, r4, r5
   13f54:	vldr	d6, [pc, #100]	; 13fc0 <__assert_fail@plt+0x19cc>
   13f58:	vmov	s15, r4
   13f5c:	vcvt.f64.s32	d7, s15
   13f60:	vmla.f64	d0, d7, d6
   13f64:	vcmpe.f64	d0, #0.0
   13f68:	vmrs	APSR_nzcv, fpscr
   13f6c:	movpl	r0, #1
   13f70:	movmi	r0, #0
   13f74:	pop	{r4, r5, r6, pc}
   13f78:	ldr	r1, [r2, #48]	; 0x30
   13f7c:	ldr	r5, [r2, #52]	; 0x34
   13f80:	cmp	r4, r5
   13f84:	cmpeq	r0, r1
   13f88:	beq	13fb8 <__assert_fail@plt+0x19c4>
   13f8c:	bl	123cc <difftime@plt>
   13f90:	sub	r4, r4, r5
   13f94:	vldr	d6, [pc, #36]	; 13fc0 <__assert_fail@plt+0x19cc>
   13f98:	vmov	s15, r4
   13f9c:	vcvt.f64.s32	d7, s15
   13fa0:	vmla.f64	d0, d7, d6
   13fa4:	vcmpe.f64	d0, #0.0
   13fa8:	vmrs	APSR_nzcv, fpscr
   13fac:	movmi	r0, #1
   13fb0:	movpl	r0, #0
   13fb4:	pop	{r4, r5, r6, pc}
   13fb8:	mov	r0, #0
   13fbc:	pop	{r4, r5, r6, pc}
   13fc0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13fc4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13fc8:	andeq	r0, r0, r0
   13fcc:	rscsmi	r1, r5, r0, lsl #16
   13fd0:	andeq	lr, r4, r0, ror r4
   13fd4:	andeq	lr, r4, r8, asr #9
   13fd8:	andeq	r2, r5, r8, lsl r6
   13fdc:	push	{r4, r5, r6, r7, r8, lr}
   13fe0:	mov	r7, r0
   13fe4:	ldr	r5, [pc, #256]	; 140ec <__assert_fail@plt+0x1af8>
   13fe8:	mov	r4, r1
   13fec:	ldr	r1, [pc, #252]	; 140f0 <__assert_fail@plt+0x1afc>
   13ff0:	ldr	r6, [r5, #12]
   13ff4:	mov	r0, r6
   13ff8:	bl	11f40 <strcmp@plt>
   13ffc:	cmp	r0, #0
   14000:	beq	140a8 <__assert_fail@plt+0x1ab4>
   14004:	ldrb	r2, [r5, #4]
   14008:	cmp	r2, #0
   1400c:	moveq	r4, r2
   14010:	beq	14028 <__assert_fail@plt+0x1a34>
   14014:	ldr	r2, [r4, #16]
   14018:	and	r2, r2, #61440	; 0xf000
   1401c:	cmp	r2, #16384	; 0x4000
   14020:	moveq	r4, #512	; 0x200
   14024:	movne	r4, #0
   14028:	mov	r1, r6
   1402c:	mov	r2, r4
   14030:	ldr	r0, [r5, #16]
   14034:	bl	11f94 <unlinkat@plt>
   14038:	cmp	r0, #0
   1403c:	beq	140a8 <__assert_fail@plt+0x1ab4>
   14040:	bl	12348 <__errno_location@plt>
   14044:	ldr	r6, [r0]
   14048:	mov	r8, r0
   1404c:	cmp	r6, #2
   14050:	beq	140b0 <__assert_fail@plt+0x1abc>
   14054:	cmp	r6, #21
   14058:	bne	14064 <__assert_fail@plt+0x1a70>
   1405c:	cmp	r4, #0
   14060:	beq	140cc <__assert_fail@plt+0x1ad8>
   14064:	mov	r2, #5
   14068:	ldr	r1, [pc, #132]	; 140f4 <__assert_fail@plt+0x1b00>
   1406c:	mov	r0, #0
   14070:	bl	120b4 <dcgettext@plt>
   14074:	mov	r1, r7
   14078:	mov	r4, r0
   1407c:	mov	r0, #0
   14080:	bl	1be34 <__assert_fail@plt+0x9840>
   14084:	mov	r2, r4
   14088:	mov	r1, r6
   1408c:	mov	r3, r0
   14090:	mov	r0, #0
   14094:	bl	121ec <error@plt>
   14098:	mov	r3, #1
   1409c:	mov	r0, #0
   140a0:	str	r3, [r5, #28]
   140a4:	pop	{r4, r5, r6, r7, r8, pc}
   140a8:	mov	r0, #1
   140ac:	pop	{r4, r5, r6, r7, r8, pc}
   140b0:	ldr	r3, [pc, #64]	; 140f8 <__assert_fail@plt+0x1b04>
   140b4:	ldrb	r0, [r3, #14]
   140b8:	cmp	r0, #0
   140bc:	beq	14064 <__assert_fail@plt+0x1a70>
   140c0:	mov	r3, #0
   140c4:	str	r3, [r8]
   140c8:	pop	{r4, r5, r6, r7, r8, pc}
   140cc:	mov	r2, #512	; 0x200
   140d0:	ldr	r1, [r5, #12]
   140d4:	ldr	r0, [r5, #16]
   140d8:	bl	11f94 <unlinkat@plt>
   140dc:	cmp	r0, #0
   140e0:	beq	140a8 <__assert_fail@plt+0x1ab4>
   140e4:	ldr	r6, [r8]
   140e8:	b	14064 <__assert_fail@plt+0x1a70>
   140ec:	andeq	r4, r6, r0, asr #28
   140f0:	andeq	r1, r5, r4, asr #17
   140f4:	andeq	lr, r4, r8, lsr r5
   140f8:	andeq	r4, r6, ip, ror #28
   140fc:	ldr	r3, [r1, #16]
   14100:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14104:	and	r3, r3, #61440	; 0xf000
   14108:	cmp	r3, #16384	; 0x4000
   1410c:	beq	14138 <__assert_fail@plt+0x1b44>
   14110:	cmp	r3, #32768	; 0x8000
   14114:	movne	r4, #0
   14118:	bne	14130 <__assert_fail@plt+0x1b3c>
   1411c:	ldr	r2, [r1, #48]	; 0x30
   14120:	ldr	r3, [r1, #52]	; 0x34
   14124:	orrs	r3, r2, r3
   14128:	moveq	r4, #1
   1412c:	movne	r4, #0
   14130:	mov	r0, r4
   14134:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14138:	mov	r6, r0
   1413c:	bl	12348 <__errno_location@plt>
   14140:	ldr	r8, [pc, #352]	; 142a8 <__assert_fail@plt+0x1cb4>
   14144:	mov	r4, #0
   14148:	ldr	r2, [pc, #348]	; 142ac <__assert_fail@plt+0x1cb8>
   1414c:	ldr	r1, [r8, #12]
   14150:	str	r4, [r0]
   14154:	mov	r7, r0
   14158:	ldr	r0, [r8, #16]
   1415c:	bl	2bb5c <__assert_fail@plt+0x19568>
   14160:	subs	r9, r0, #0
   14164:	blt	14240 <__assert_fail@plt+0x1c4c>
   14168:	bl	124c8 <fdopendir@plt>
   1416c:	subs	r5, r0, #0
   14170:	strne	r4, [r7]
   14174:	beq	14270 <__assert_fail@plt+0x1c7c>
   14178:	bl	124bc <readdir64@plt>
   1417c:	subs	r3, r0, #0
   14180:	beq	14238 <__assert_fail@plt+0x1c44>
   14184:	ldrb	r2, [r3, #19]
   14188:	cmp	r2, #46	; 0x2e
   1418c:	bne	141ac <__assert_fail@plt+0x1bb8>
   14190:	ldrb	r2, [r3, #20]
   14194:	mov	r0, r5
   14198:	cmp	r2, #0
   1419c:	beq	14178 <__assert_fail@plt+0x1b84>
   141a0:	ldrh	r3, [r3, #20]
   141a4:	cmp	r3, #46	; 0x2e
   141a8:	beq	14178 <__assert_fail@plt+0x1b84>
   141ac:	mov	r4, #0
   141b0:	ldr	r9, [r7]
   141b4:	cmp	r9, #0
   141b8:	bne	14200 <__assert_fail@plt+0x1c0c>
   141bc:	mov	r0, r5
   141c0:	bl	125c4 <closedir@plt>
   141c4:	cmp	r0, #0
   141c8:	beq	14130 <__assert_fail@plt+0x1b3c>
   141cc:	mov	r1, r6
   141d0:	mov	r0, r9
   141d4:	ldr	r4, [r7]
   141d8:	bl	1be34 <__assert_fail@plt+0x9840>
   141dc:	mov	r1, r4
   141e0:	ldr	r2, [pc, #200]	; 142b0 <__assert_fail@plt+0x1cbc>
   141e4:	mov	r4, r9
   141e8:	mov	r3, r0
   141ec:	mov	r0, r9
   141f0:	bl	121ec <error@plt>
   141f4:	mov	r3, #1
   141f8:	str	r3, [r8, #28]
   141fc:	b	14130 <__assert_fail@plt+0x1b3c>
   14200:	mov	r1, r6
   14204:	mov	r0, #0
   14208:	bl	1be34 <__assert_fail@plt+0x9840>
   1420c:	mov	r1, r9
   14210:	ldr	r2, [pc, #152]	; 142b0 <__assert_fail@plt+0x1cbc>
   14214:	mov	r4, #0
   14218:	mov	r3, r0
   1421c:	mov	r0, #0
   14220:	bl	121ec <error@plt>
   14224:	mov	r3, #1
   14228:	mov	r0, r5
   1422c:	str	r3, [r8, #28]
   14230:	bl	125c4 <closedir@plt>
   14234:	b	14130 <__assert_fail@plt+0x1b3c>
   14238:	mov	r4, #1
   1423c:	b	141b0 <__assert_fail@plt+0x1bbc>
   14240:	mov	r1, r6
   14244:	mov	r0, r4
   14248:	ldr	r5, [r7]
   1424c:	bl	1be34 <__assert_fail@plt+0x9840>
   14250:	mov	r1, r5
   14254:	ldr	r2, [pc, #84]	; 142b0 <__assert_fail@plt+0x1cbc>
   14258:	mov	r3, r0
   1425c:	mov	r0, r4
   14260:	bl	121ec <error@plt>
   14264:	mov	r3, #1
   14268:	str	r3, [r8, #28]
   1426c:	b	14130 <__assert_fail@plt+0x1b3c>
   14270:	mov	r1, r6
   14274:	ldr	r4, [r7]
   14278:	bl	1be34 <__assert_fail@plt+0x9840>
   1427c:	mov	r1, r4
   14280:	ldr	r2, [pc, #40]	; 142b0 <__assert_fail@plt+0x1cbc>
   14284:	mov	r4, r5
   14288:	mov	r3, r0
   1428c:	mov	r0, r5
   14290:	bl	121ec <error@plt>
   14294:	mov	r3, #1
   14298:	mov	r0, r9
   1429c:	str	r3, [r8, #28]
   142a0:	bl	125ac <close@plt>
   142a4:	b	14130 <__assert_fail@plt+0x1b3c>
   142a8:	andeq	r4, r6, r0, asr #28
   142ac:	andeq	r4, sl, r0, lsl #18
   142b0:	andeq	r2, r5, r4, asr #9
   142b4:	b	15adc <__assert_fail@plt+0x34e8>
   142b8:	ldr	r3, [pc, #4]	; 142c4 <__assert_fail@plt+0x1cd0>
   142bc:	ldr	r0, [r3, #12]
   142c0:	b	15adc <__assert_fail@plt+0x34e8>
   142c4:	andeq	r4, r6, r0, asr #28
   142c8:	mov	r0, #0
   142cc:	bx	lr
   142d0:	ldr	ip, [pc, #68]	; 1431c <__assert_fail@plt+0x1d28>
   142d4:	ldr	r3, [pc, #68]	; 14320 <__assert_fail@plt+0x1d2c>
   142d8:	push	{r4, r5, r6, lr}
   142dc:	sub	sp, sp, #16
   142e0:	ldr	r4, [ip, #16]
   142e4:	ldrb	r6, [r2, #32]
   142e8:	ldr	r5, [r2, #44]	; 0x2c
   142ec:	ldr	lr, [r3, #40]	; 0x28
   142f0:	ldr	r2, [ip, #12]
   142f4:	ldr	ip, [r3, #20]
   142f8:	mov	r3, r1
   142fc:	str	r6, [sp, #8]
   14300:	str	r5, [sp, #12]
   14304:	mov	r1, r4
   14308:	stm	sp, {ip, lr}
   1430c:	bl	25740 <__assert_fail@plt+0x1314c>
   14310:	mov	r0, #1
   14314:	add	sp, sp, #16
   14318:	pop	{r4, r5, r6, pc}
   1431c:	andeq	r4, r6, r0, asr #28
   14320:	andeq	r4, r6, ip, ror #28
   14324:	push	{lr}		; (str lr, [sp, #-4]!)
   14328:	mov	r3, r2
   1432c:	sub	sp, sp, #12
   14330:	str	r0, [sp]
   14334:	ldr	r1, [r3, #56]	; 0x38
   14338:	ldrb	r2, [r2, #52]	; 0x34
   1433c:	ldr	r0, [r3, #44]	; 0x2c
   14340:	ldr	r3, [pc, #12]	; 14354 <__assert_fail@plt+0x1d60>
   14344:	bl	25dc0 <__assert_fail@plt+0x137cc>
   14348:	mov	r0, #1
   1434c:	add	sp, sp, #12
   14350:	pop	{pc}		; (ldr pc, [sp], #4)
   14354:	andeq	r3, r5, r4, ror r5
   14358:	push	{r4, lr}
   1435c:	ldr	r4, [r2, #44]	; 0x2c
   14360:	mov	r1, r4
   14364:	bl	12588 <fputs@plt>
   14368:	mov	r1, r4
   1436c:	mov	r0, #0
   14370:	bl	124e0 <putc@plt>
   14374:	mov	r0, #1
   14378:	pop	{r4, pc}
   1437c:	mov	r3, r1
   14380:	push	{r4, lr}
   14384:	mov	r4, r2
   14388:	mov	r1, r0
   1438c:	mov	r0, r3
   14390:	bl	1e16c <__assert_fail@plt+0xbb78>
   14394:	ldr	r1, [r4, #40]	; 0x28
   14398:	bl	11f40 <strcmp@plt>
   1439c:	clz	r0, r0
   143a0:	lsr	r0, r0, #5
   143a4:	pop	{r4, pc}
   143a8:	ldr	r3, [r2, #40]	; 0x28
   143ac:	cmp	r3, #1
   143b0:	beq	14410 <__assert_fail@plt+0x1e1c>
   143b4:	bcc	143ec <__assert_fail@plt+0x1df8>
   143b8:	cmp	r3, #2
   143bc:	bne	143e4 <__assert_fail@plt+0x1df0>
   143c0:	ldr	r3, [r1, #28]
   143c4:	ldrd	r0, [r2, #48]	; 0x30
   143c8:	mov	r2, r3
   143cc:	mov	r3, #0
   143d0:	cmp	r1, r3
   143d4:	cmpeq	r0, r2
   143d8:	moveq	r0, #1
   143dc:	movne	r0, #0
   143e0:	bx	lr
   143e4:	mov	r0, #0
   143e8:	bx	lr
   143ec:	ldr	r3, [r1, #28]
   143f0:	ldrd	r0, [r2, #48]	; 0x30
   143f4:	mov	r2, r3
   143f8:	mov	r3, #0
   143fc:	cmp	r3, r1
   14400:	cmpeq	r2, r0
   14404:	movhi	r0, #1
   14408:	movls	r0, #0
   1440c:	bx	lr
   14410:	ldr	r3, [r1, #28]
   14414:	ldrd	r0, [r2, #48]	; 0x30
   14418:	mov	r2, r3
   1441c:	mov	r3, #0
   14420:	cmp	r3, r1
   14424:	cmpeq	r2, r0
   14428:	movcc	r0, #1
   1442c:	movcs	r0, #0
   14430:	bx	lr
   14434:	ldr	r0, [r2, #40]	; 0x28
   14438:	ldr	r3, [r1, #28]
   1443c:	sub	r0, r0, r3
   14440:	clz	r0, r0
   14444:	lsr	r0, r0, #5
   14448:	bx	lr
   1444c:	ldr	r3, [r1, #16]
   14450:	push	{r4, r5, r6, r7, r8, lr}
   14454:	and	r3, r3, #61440	; 0xf000
   14458:	cmp	r3, #40960	; 0xa000
   1445c:	movne	r4, #0
   14460:	beq	1446c <__assert_fail@plt+0x1e78>
   14464:	mov	r0, r4
   14468:	pop	{r4, r5, r6, r7, r8, pc}
   1446c:	ldr	r6, [pc, #96]	; 144d4 <__assert_fail@plt+0x1ee0>
   14470:	mov	r5, r0
   14474:	mov	r4, r2
   14478:	ldr	r1, [r6, #12]
   1447c:	ldr	r0, [r6, #16]
   14480:	bl	2674c <__assert_fail@plt+0x14158>
   14484:	subs	r7, r0, #0
   14488:	beq	144b4 <__assert_fail@plt+0x1ec0>
   1448c:	ldr	r0, [r4, #40]	; 0x28
   14490:	mov	r2, #16
   14494:	mov	r1, r7
   14498:	bl	12210 <fnmatch@plt>
   1449c:	clz	r4, r0
   144a0:	lsr	r4, r4, #5
   144a4:	mov	r0, r7
   144a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   144ac:	mov	r0, r4
   144b0:	pop	{r4, r5, r6, r7, r8, pc}
   144b4:	bl	12348 <__errno_location@plt>
   144b8:	mov	r1, r5
   144bc:	mov	r4, r7
   144c0:	ldr	r0, [r0]
   144c4:	bl	1be48 <__assert_fail@plt+0x9854>
   144c8:	mov	r3, #1
   144cc:	str	r3, [r6, #28]
   144d0:	b	144a4 <__assert_fail@plt+0x1eb0>
   144d4:	andeq	r4, r6, r0, asr #28
   144d8:	push	{r4, r5, r6, lr}
   144dc:	ldr	r5, [r2, #40]	; 0x28
   144e0:	bl	26c84 <__assert_fail@plt+0x14690>
   144e4:	mov	r4, r0
   144e8:	bl	26e48 <__assert_fail@plt+0x14854>
   144ec:	mov	r1, r4
   144f0:	mov	r2, #16
   144f4:	mov	r0, r5
   144f8:	bl	12210 <fnmatch@plt>
   144fc:	mov	r5, r0
   14500:	mov	r0, r4
   14504:	bl	376d0 <__assert_fail@plt+0x250dc>
   14508:	clz	r0, r5
   1450c:	lsr	r0, r0, #5
   14510:	pop	{r4, r5, r6, pc}
   14514:	ldr	r3, [r2, #40]	; 0x28
   14518:	cmp	r3, #1
   1451c:	beq	1456c <__assert_fail@plt+0x1f78>
   14520:	bcc	14550 <__assert_fail@plt+0x1f5c>
   14524:	cmp	r3, #2
   14528:	bne	14548 <__assert_fail@plt+0x1f54>
   1452c:	ldrd	r0, [r1, #96]	; 0x60
   14530:	ldrd	r2, [r2, #48]	; 0x30
   14534:	cmp	r1, r3
   14538:	cmpeq	r0, r2
   1453c:	moveq	r0, #1
   14540:	movne	r0, #0
   14544:	bx	lr
   14548:	mov	r0, #0
   1454c:	bx	lr
   14550:	ldrd	r0, [r1, #96]	; 0x60
   14554:	ldrd	r2, [r2, #48]	; 0x30
   14558:	cmp	r1, r3
   1455c:	cmpeq	r0, r2
   14560:	movhi	r0, #1
   14564:	movls	r0, #0
   14568:	bx	lr
   1456c:	ldrd	r0, [r1, #96]	; 0x60
   14570:	ldrd	r2, [r2, #48]	; 0x30
   14574:	cmp	r1, r3
   14578:	cmpeq	r0, r2
   1457c:	movcc	r0, #1
   14580:	movcs	r0, #0
   14584:	bx	lr
   14588:	push	{r4, lr}
   1458c:	mov	r1, r0
   14590:	ldr	r3, [r2, #40]	; 0x28
   14594:	mov	r2, #16
   14598:	mov	r0, r3
   1459c:	bl	12210 <fnmatch@plt>
   145a0:	clz	r0, r0
   145a4:	lsr	r0, r0, #5
   145a8:	pop	{r4, pc}
   145ac:	ldr	r3, [r2, #40]	; 0x28
   145b0:	cmp	r3, #1
   145b4:	beq	14614 <__assert_fail@plt+0x2020>
   145b8:	bcc	145f0 <__assert_fail@plt+0x1ffc>
   145bc:	cmp	r3, #2
   145c0:	bne	145e8 <__assert_fail@plt+0x1ff4>
   145c4:	ldr	r3, [r1, #20]
   145c8:	ldrd	r0, [r2, #48]	; 0x30
   145cc:	mov	r2, r3
   145d0:	mov	r3, #0
   145d4:	cmp	r1, r3
   145d8:	cmpeq	r0, r2
   145dc:	moveq	r0, #1
   145e0:	movne	r0, #0
   145e4:	bx	lr
   145e8:	mov	r0, #0
   145ec:	bx	lr
   145f0:	ldr	r3, [r1, #20]
   145f4:	ldrd	r0, [r2, #48]	; 0x30
   145f8:	mov	r2, r3
   145fc:	mov	r3, #0
   14600:	cmp	r3, r1
   14604:	cmpeq	r2, r0
   14608:	movhi	r0, #1
   1460c:	movls	r0, #0
   14610:	bx	lr
   14614:	ldr	r3, [r1, #20]
   14618:	ldrd	r0, [r2, #48]	; 0x30
   1461c:	mov	r2, r3
   14620:	mov	r3, #0
   14624:	cmp	r3, r1
   14628:	cmpeq	r2, r0
   1462c:	movcc	r0, #1
   14630:	movcs	r0, #0
   14634:	bx	lr
   14638:	ldr	r3, [r1, #16]
   1463c:	push	{r4, r5, r6, r7, r8, lr}
   14640:	and	r3, r3, #61440	; 0xf000
   14644:	cmp	r3, #40960	; 0xa000
   14648:	movne	r4, #0
   1464c:	beq	14658 <__assert_fail@plt+0x2064>
   14650:	mov	r0, r4
   14654:	pop	{r4, r5, r6, r7, r8, pc}
   14658:	ldr	r6, [pc, #96]	; 146c0 <__assert_fail@plt+0x20cc>
   1465c:	mov	r5, r0
   14660:	mov	r4, r2
   14664:	ldr	r1, [r6, #12]
   14668:	ldr	r0, [r6, #16]
   1466c:	bl	2674c <__assert_fail@plt+0x14158>
   14670:	subs	r7, r0, #0
   14674:	beq	146a0 <__assert_fail@plt+0x20ac>
   14678:	ldr	r0, [r4, #40]	; 0x28
   1467c:	mov	r2, #0
   14680:	mov	r1, r7
   14684:	bl	12210 <fnmatch@plt>
   14688:	clz	r4, r0
   1468c:	lsr	r4, r4, #5
   14690:	mov	r0, r7
   14694:	bl	376d0 <__assert_fail@plt+0x250dc>
   14698:	mov	r0, r4
   1469c:	pop	{r4, r5, r6, r7, r8, pc}
   146a0:	bl	12348 <__errno_location@plt>
   146a4:	mov	r1, r5
   146a8:	mov	r4, r7
   146ac:	ldr	r0, [r0]
   146b0:	bl	1be48 <__assert_fail@plt+0x9854>
   146b4:	mov	r3, #1
   146b8:	str	r3, [r6, #28]
   146bc:	b	14690 <__assert_fail@plt+0x209c>
   146c0:	andeq	r4, r6, r0, asr #28
   146c4:	ldr	ip, [pc, #68]	; 14710 <__assert_fail@plt+0x211c>
   146c8:	ldr	r3, [pc, #68]	; 14714 <__assert_fail@plt+0x2120>
   146cc:	push	{r4, r5, r6, lr}
   146d0:	sub	sp, sp, #16
   146d4:	ldr	r4, [ip, #16]
   146d8:	ldrb	r6, [r2, #32]
   146dc:	ldr	r5, [r2, #44]	; 0x2c
   146e0:	ldr	lr, [r3, #40]	; 0x28
   146e4:	ldr	r2, [ip, #12]
   146e8:	ldr	ip, [r3, #20]
   146ec:	mov	r3, r1
   146f0:	str	r6, [sp, #8]
   146f4:	str	r5, [sp, #12]
   146f8:	mov	r1, r4
   146fc:	stm	sp, {ip, lr}
   14700:	bl	25740 <__assert_fail@plt+0x1314c>
   14704:	mov	r0, #1
   14708:	add	sp, sp, #16
   1470c:	pop	{r4, r5, r6, pc}
   14710:	andeq	r4, r6, r0, asr #28
   14714:	andeq	r4, r6, ip, ror #28
   14718:	push	{r4, r5, r6, lr}
   1471c:	mov	r5, r2
   14720:	ldr	r3, [r2, #44]	; 0x2c
   14724:	ldr	r0, [r1, #80]	; 0x50
   14728:	cmp	r3, #1
   1472c:	ldr	r4, [r1, #84]	; 0x54
   14730:	beq	147d8 <__assert_fail@plt+0x21e4>
   14734:	bcc	14798 <__assert_fail@plt+0x21a4>
   14738:	cmp	r3, #2
   1473c:	bne	14784 <__assert_fail@plt+0x2190>
   14740:	ldr	r1, [r2, #48]	; 0x30
   14744:	bl	123cc <difftime@plt>
   14748:	ldr	r3, [r5, #52]	; 0x34
   1474c:	vldr	d6, [pc, #204]	; 14820 <__assert_fail@plt+0x222c>
   14750:	sub	r4, r4, r3
   14754:	vmov	s15, r4
   14758:	vcvt.f64.s32	d7, s15
   1475c:	vmla.f64	d0, d7, d6
   14760:	vcmpe.f64	d0, #0.0
   14764:	vmrs	APSR_nzcv, fpscr
   14768:	ble	14818 <__assert_fail@plt+0x2224>
   1476c:	vldr	d7, [pc, #180]	; 14828 <__assert_fail@plt+0x2234>
   14770:	vcmpe.f64	d0, d7
   14774:	vmrs	APSR_nzcv, fpscr
   14778:	movls	r0, #1
   1477c:	movhi	r0, #0
   14780:	pop	{r4, r5, r6, pc}
   14784:	ldr	r3, [pc, #164]	; 14830 <__assert_fail@plt+0x223c>
   14788:	mov	r2, #138	; 0x8a
   1478c:	ldr	r1, [pc, #160]	; 14834 <__assert_fail@plt+0x2240>
   14790:	ldr	r0, [pc, #160]	; 14838 <__assert_fail@plt+0x2244>
   14794:	bl	125f4 <__assert_fail@plt>
   14798:	ldr	r1, [r2, #48]	; 0x30
   1479c:	ldr	r5, [r2, #52]	; 0x34
   147a0:	cmp	r0, r1
   147a4:	cmpeq	r4, r5
   147a8:	beq	14818 <__assert_fail@plt+0x2224>
   147ac:	bl	123cc <difftime@plt>
   147b0:	sub	r4, r4, r5
   147b4:	vldr	d6, [pc, #100]	; 14820 <__assert_fail@plt+0x222c>
   147b8:	vmov	s15, r4
   147bc:	vcvt.f64.s32	d7, s15
   147c0:	vmla.f64	d0, d7, d6
   147c4:	vcmpe.f64	d0, #0.0
   147c8:	vmrs	APSR_nzcv, fpscr
   147cc:	movpl	r0, #1
   147d0:	movmi	r0, #0
   147d4:	pop	{r4, r5, r6, pc}
   147d8:	ldr	r1, [r2, #48]	; 0x30
   147dc:	ldr	r5, [r2, #52]	; 0x34
   147e0:	cmp	r4, r5
   147e4:	cmpeq	r0, r1
   147e8:	beq	14818 <__assert_fail@plt+0x2224>
   147ec:	bl	123cc <difftime@plt>
   147f0:	sub	r4, r4, r5
   147f4:	vldr	d6, [pc, #36]	; 14820 <__assert_fail@plt+0x222c>
   147f8:	vmov	s15, r4
   147fc:	vcvt.f64.s32	d7, s15
   14800:	vmla.f64	d0, d7, d6
   14804:	vcmpe.f64	d0, #0.0
   14808:	vmrs	APSR_nzcv, fpscr
   1480c:	movmi	r0, #1
   14810:	movpl	r0, #0
   14814:	pop	{r4, r5, r6, pc}
   14818:	mov	r0, #0
   1481c:	pop	{r4, r5, r6, pc}
   14820:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14824:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14828:	andeq	r0, r0, r0
   1482c:	submi	r0, lr, r0
   14830:	andeq	lr, r4, r0, ror r4
   14834:	andeq	lr, r4, r8, asr #9
   14838:	andeq	r2, r5, r8, lsl r6
   1483c:	push	{r4, r5, r6, lr}
   14840:	mov	r5, r2
   14844:	ldr	r3, [r2, #44]	; 0x2c
   14848:	ldr	r0, [r1, #80]	; 0x50
   1484c:	cmp	r3, #1
   14850:	ldr	r4, [r1, #84]	; 0x54
   14854:	beq	148fc <__assert_fail@plt+0x2308>
   14858:	bcc	148bc <__assert_fail@plt+0x22c8>
   1485c:	cmp	r3, #2
   14860:	bne	148a8 <__assert_fail@plt+0x22b4>
   14864:	ldr	r1, [r2, #48]	; 0x30
   14868:	bl	123cc <difftime@plt>
   1486c:	ldr	r3, [r5, #52]	; 0x34
   14870:	vldr	d6, [pc, #208]	; 14948 <__assert_fail@plt+0x2354>
   14874:	sub	r4, r4, r3
   14878:	vmov	s15, r4
   1487c:	vcvt.f64.s32	d7, s15
   14880:	vmla.f64	d0, d7, d6
   14884:	vcmpe.f64	d0, #0.0
   14888:	vmrs	APSR_nzcv, fpscr
   1488c:	ble	1493c <__assert_fail@plt+0x2348>
   14890:	vldr	d7, [pc, #184]	; 14950 <__assert_fail@plt+0x235c>
   14894:	vcmpe.f64	d0, d7
   14898:	vmrs	APSR_nzcv, fpscr
   1489c:	movls	r0, #1
   148a0:	movhi	r0, #0
   148a4:	pop	{r4, r5, r6, pc}
   148a8:	ldr	r3, [pc, #168]	; 14958 <__assert_fail@plt+0x2364>
   148ac:	mov	r2, #138	; 0x8a
   148b0:	ldr	r1, [pc, #164]	; 1495c <__assert_fail@plt+0x2368>
   148b4:	ldr	r0, [pc, #164]	; 14960 <__assert_fail@plt+0x236c>
   148b8:	bl	125f4 <__assert_fail@plt>
   148bc:	ldr	r1, [r2, #48]	; 0x30
   148c0:	ldr	r5, [r2, #52]	; 0x34
   148c4:	cmp	r0, r1
   148c8:	cmpeq	r4, r5
   148cc:	beq	1493c <__assert_fail@plt+0x2348>
   148d0:	bl	123cc <difftime@plt>
   148d4:	sub	r4, r4, r5
   148d8:	vldr	d6, [pc, #104]	; 14948 <__assert_fail@plt+0x2354>
   148dc:	vmov	s15, r4
   148e0:	vcvt.f64.s32	d7, s15
   148e4:	vmla.f64	d0, d7, d6
   148e8:	vcmpe.f64	d0, #0.0
   148ec:	vmrs	APSR_nzcv, fpscr
   148f0:	movpl	r0, #1
   148f4:	movmi	r0, #0
   148f8:	pop	{r4, r5, r6, pc}
   148fc:	ldr	r1, [r2, #48]	; 0x30
   14900:	ldr	r5, [r2, #52]	; 0x34
   14904:	cmp	r4, r5
   14908:	cmpeq	r0, r1
   1490c:	beq	1493c <__assert_fail@plt+0x2348>
   14910:	bl	123cc <difftime@plt>
   14914:	sub	r4, r4, r5
   14918:	vldr	d6, [pc, #40]	; 14948 <__assert_fail@plt+0x2354>
   1491c:	vmov	s15, r4
   14920:	vcvt.f64.s32	d7, s15
   14924:	vmla.f64	d0, d7, d6
   14928:	vcmpe.f64	d0, #0.0
   1492c:	vmrs	APSR_nzcv, fpscr
   14930:	movmi	r0, #1
   14934:	movpl	r0, #0
   14938:	pop	{r4, r5, r6, pc}
   1493c:	mov	r0, #0
   14940:	pop	{r4, r5, r6, pc}
   14944:	nop			; (mov r0, r0)
   14948:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1494c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14950:	andeq	r0, r0, r0
   14954:	rscsmi	r1, r5, r0, lsl #16
   14958:	andeq	lr, r4, r0, ror r4
   1495c:	andeq	lr, r4, r8, asr #9
   14960:	andeq	r2, r5, r8, lsl r6
   14964:	push	{r4, r5, r6, lr}
   14968:	ldr	r5, [r2, #40]	; 0x28
   1496c:	bl	26c84 <__assert_fail@plt+0x14690>
   14970:	mov	r4, r0
   14974:	bl	26e48 <__assert_fail@plt+0x14854>
   14978:	mov	r1, r4
   1497c:	mov	r2, #0
   14980:	mov	r0, r5
   14984:	bl	12210 <fnmatch@plt>
   14988:	mov	r5, r0
   1498c:	mov	r0, r4
   14990:	bl	376d0 <__assert_fail@plt+0x250dc>
   14994:	clz	r0, r5
   14998:	lsr	r0, r0, #5
   1499c:	pop	{r4, r5, r6, pc}
   149a0:	push	{r4, lr}
   149a4:	ldr	r2, [r2, #160]	; 0xa0
   149a8:	bl	1bd14 <__assert_fail@plt+0x9720>
   149ac:	eor	r0, r0, #1
   149b0:	uxtb	r0, r0
   149b4:	pop	{r4, pc}
   149b8:	push	{r4, r5, r6, lr}
   149bc:	ldr	r3, [r2, #44]	; 0x2c
   149c0:	cmp	r3, #0
   149c4:	bne	14a18 <__assert_fail@plt+0x2424>
   149c8:	ldr	r0, [r1, #80]	; 0x50
   149cc:	ldr	r4, [r1, #84]	; 0x54
   149d0:	ldr	r5, [r2, #52]	; 0x34
   149d4:	ldr	r1, [r2, #48]	; 0x30
   149d8:	cmp	r0, r1
   149dc:	cmpeq	r4, r5
   149e0:	beq	14a10 <__assert_fail@plt+0x241c>
   149e4:	bl	123cc <difftime@plt>
   149e8:	sub	r4, r4, r5
   149ec:	vldr	d6, [pc, #60]	; 14a30 <__assert_fail@plt+0x243c>
   149f0:	vmov	s15, r4
   149f4:	vcvt.f64.s32	d7, s15
   149f8:	vmla.f64	d0, d7, d6
   149fc:	vcmpe.f64	d0, #0.0
   14a00:	vmrs	APSR_nzcv, fpscr
   14a04:	movpl	r0, #1
   14a08:	movmi	r0, #0
   14a0c:	pop	{r4, r5, r6, pc}
   14a10:	mov	r0, r3
   14a14:	pop	{r4, r5, r6, pc}
   14a18:	ldr	r3, [pc, #24]	; 14a38 <__assert_fail@plt+0x2444>
   14a1c:	ldr	r2, [pc, #24]	; 14a3c <__assert_fail@plt+0x2448>
   14a20:	ldr	r1, [pc, #24]	; 14a40 <__assert_fail@plt+0x244c>
   14a24:	ldr	r0, [pc, #24]	; 14a44 <__assert_fail@plt+0x2450>
   14a28:	bl	125f4 <__assert_fail@plt>
   14a2c:	nop			; (mov r0, r0)
   14a30:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14a34:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14a38:	muleq	r4, r8, r4
   14a3c:	andeq	r0, r0, sp, ror #4
   14a40:	andeq	lr, r4, r8, asr #9
   14a44:	andeq	lr, r4, r0, lsl r5
   14a48:	push	{r4, r5, r6, lr}
   14a4c:	ldr	r3, [r2, #44]	; 0x2c
   14a50:	cmp	r3, #0
   14a54:	bne	14b4c <__assert_fail@plt+0x2558>
   14a58:	ldr	r3, [r2, #40]	; 0x28
   14a5c:	cmp	r3, #4
   14a60:	ldrls	pc, [pc, r3, lsl #2]
   14a64:	b	14b1c <__assert_fail@plt+0x2528>
   14a68:	andeq	r4, r1, r4, asr #21
   14a6c:	ldrdeq	r4, [r1], -r0
   14a70:	andeq	r4, r1, r0, lsl fp
   14a74:	andeq	r4, r1, ip, ror sl
   14a78:	andeq	r4, r1, r8, lsr fp
   14a7c:	ldr	r0, [r1, #80]	; 0x50
   14a80:	ldr	r4, [r1, #84]	; 0x54
   14a84:	ldr	r1, [r2, #48]	; 0x30
   14a88:	ldr	r5, [r2, #52]	; 0x34
   14a8c:	cmp	r1, r0
   14a90:	cmpeq	r5, r4
   14a94:	beq	14b30 <__assert_fail@plt+0x253c>
   14a98:	bl	123cc <difftime@plt>
   14a9c:	sub	r4, r4, r5
   14aa0:	vldr	d6, [pc, #184]	; 14b60 <__assert_fail@plt+0x256c>
   14aa4:	vmov	s15, r4
   14aa8:	vcvt.f64.s32	d7, s15
   14aac:	vmla.f64	d0, d7, d6
   14ab0:	vcmpe.f64	d0, #0.0
   14ab4:	vmrs	APSR_nzcv, fpscr
   14ab8:	movpl	r0, #1
   14abc:	movmi	r0, #0
   14ac0:	pop	{r4, r5, r6, pc}
   14ac4:	ldr	r0, [r1, #72]	; 0x48
   14ac8:	ldr	r4, [r1, #76]	; 0x4c
   14acc:	b	14a84 <__assert_fail@plt+0x2490>
   14ad0:	mov	r4, r0
   14ad4:	mov	r2, #5
   14ad8:	ldr	r1, [pc, #136]	; 14b68 <__assert_fail@plt+0x2574>
   14adc:	mov	r0, #0
   14ae0:	bl	120b4 <dcgettext@plt>
   14ae4:	mov	r1, r4
   14ae8:	mov	r5, r0
   14aec:	mov	r0, #0
   14af0:	bl	1be34 <__assert_fail@plt+0x9840>
   14af4:	mov	r1, #0
   14af8:	mov	r2, r5
   14afc:	mov	r3, r0
   14b00:	mov	r0, r1
   14b04:	bl	121ec <error@plt>
   14b08:	mov	r0, #0
   14b0c:	pop	{r4, r5, r6, pc}
   14b10:	ldr	r0, [r1, #88]	; 0x58
   14b14:	ldr	r4, [r1, #92]	; 0x5c
   14b18:	b	14a84 <__assert_fail@plt+0x2490>
   14b1c:	ldr	r3, [pc, #72]	; 14b6c <__assert_fail@plt+0x2578>
   14b20:	ldr	r2, [pc, #72]	; 14b70 <__assert_fail@plt+0x257c>
   14b24:	ldr	r1, [pc, #72]	; 14b74 <__assert_fail@plt+0x2580>
   14b28:	ldr	r0, [pc, #72]	; 14b78 <__assert_fail@plt+0x2584>
   14b2c:	bl	125f4 <__assert_fail@plt>
   14b30:	mov	r0, #0
   14b34:	pop	{r4, r5, r6, pc}
   14b38:	ldr	r3, [pc, #44]	; 14b6c <__assert_fail@plt+0x2578>
   14b3c:	mov	r2, #636	; 0x27c
   14b40:	ldr	r1, [pc, #44]	; 14b74 <__assert_fail@plt+0x2580>
   14b44:	ldr	r0, [pc, #48]	; 14b7c <__assert_fail@plt+0x2588>
   14b48:	bl	125f4 <__assert_fail@plt>
   14b4c:	ldr	r3, [pc, #24]	; 14b6c <__assert_fail@plt+0x2578>
   14b50:	ldr	r2, [pc, #40]	; 14b80 <__assert_fail@plt+0x258c>
   14b54:	ldr	r1, [pc, #24]	; 14b74 <__assert_fail@plt+0x2580>
   14b58:	ldr	r0, [pc, #36]	; 14b84 <__assert_fail@plt+0x2590>
   14b5c:	bl	125f4 <__assert_fail@plt>
   14b60:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14b64:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14b68:	andeq	lr, r4, r8, ror r5
   14b6c:	andeq	lr, r4, r4, lsr #9
   14b70:	muleq	r0, fp, r2
   14b74:	andeq	lr, r4, r8, asr #9
   14b78:	andeq	lr, r4, r8, lsr #11
   14b7c:	andeq	lr, r4, ip, asr #10
   14b80:	andeq	r0, r0, r7, ror r2
   14b84:	andeq	lr, r4, r0, lsl r5
   14b88:	push	{r4, lr}
   14b8c:	ldr	r0, [r1, #28]
   14b90:	bl	125d0 <getgrgid@plt>
   14b94:	clz	r0, r0
   14b98:	lsr	r0, r0, #5
   14b9c:	pop	{r4, pc}
   14ba0:	push	{r4, lr}
   14ba4:	ldr	r0, [r1, #24]
   14ba8:	bl	11f58 <getpwuid@plt>
   14bac:	clz	r0, r0
   14bb0:	lsr	r0, r0, #5
   14bb4:	pop	{r4, pc}
   14bb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14bbc:	mov	r6, r2
   14bc0:	ldr	r2, [pc, #116]	; 14c3c <__assert_fail@plt+0x2648>
   14bc4:	ldr	r3, [r6, #132]	; 0x84
   14bc8:	ldr	r4, [pc, #112]	; 14c40 <__assert_fail@plt+0x264c>
   14bcc:	mov	r5, r0
   14bd0:	ldr	r0, [r2]
   14bd4:	ldr	r8, [r3]
   14bd8:	mov	r9, r1
   14bdc:	bl	37670 <__assert_fail@plt+0x2507c>
   14be0:	mov	r2, #5
   14be4:	ldr	r1, [pc, #88]	; 14c44 <__assert_fail@plt+0x2650>
   14be8:	mov	r0, #0
   14bec:	ldr	r7, [r4]
   14bf0:	bl	120b4 <dcgettext@plt>
   14bf4:	mov	r3, r5
   14bf8:	mov	r2, r8
   14bfc:	mov	r1, r0
   14c00:	mov	r0, r7
   14c04:	bl	1233c <fprintf@plt>
   14c08:	cmp	r0, #0
   14c0c:	blt	14c38 <__assert_fail@plt+0x2644>
   14c10:	ldr	r0, [r4]
   14c14:	bl	37670 <__assert_fail@plt+0x2507c>
   14c18:	bl	370b4 <__assert_fail@plt+0x24ac0>
   14c1c:	cmp	r0, #0
   14c20:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c24:	mov	r2, r6
   14c28:	mov	r1, r9
   14c2c:	mov	r0, r5
   14c30:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c34:	b	15adc <__assert_fail@plt+0x34e8>
   14c38:	bl	12600 <__assert_fail@plt+0xc>
   14c3c:	andeq	r4, r6, r4, asr r5
   14c40:	andeq	r4, r6, r8, asr #10
   14c44:			; <UNDEFINED> instruction: 0x0004e5b4
   14c48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c4c:	mov	r5, r2
   14c50:	ldr	r2, [pc, #120]	; 14cd0 <__assert_fail@plt+0x26dc>
   14c54:	ldr	r3, [r5, #132]	; 0x84
   14c58:	ldr	r4, [pc, #116]	; 14cd4 <__assert_fail@plt+0x26e0>
   14c5c:	mov	r8, r0
   14c60:	ldr	r0, [r2]
   14c64:	ldr	r7, [r3]
   14c68:	mov	r9, r1
   14c6c:	bl	37670 <__assert_fail@plt+0x2507c>
   14c70:	mov	r2, #5
   14c74:	ldr	r1, [pc, #92]	; 14cd8 <__assert_fail@plt+0x26e4>
   14c78:	mov	r0, #0
   14c7c:	ldr	r6, [r4]
   14c80:	bl	120b4 <dcgettext@plt>
   14c84:	mov	r3, r8
   14c88:	mov	r2, r7
   14c8c:	mov	r1, r0
   14c90:	mov	r0, r6
   14c94:	bl	1233c <fprintf@plt>
   14c98:	cmp	r0, #0
   14c9c:	blt	14ccc <__assert_fail@plt+0x26d8>
   14ca0:	ldr	r0, [r4]
   14ca4:	bl	37670 <__assert_fail@plt+0x2507c>
   14ca8:	bl	370b4 <__assert_fail@plt+0x24ac0>
   14cac:	cmp	r0, #0
   14cb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14cb4:	ldr	r3, [pc, #32]	; 14cdc <__assert_fail@plt+0x26e8>
   14cb8:	mov	r2, r5
   14cbc:	mov	r1, r9
   14cc0:	ldr	r0, [r3, #12]
   14cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14cc8:	b	15adc <__assert_fail@plt+0x34e8>
   14ccc:	bl	12600 <__assert_fail@plt+0xc>
   14cd0:	andeq	r4, r6, r4, asr r5
   14cd4:	andeq	r4, r6, r8, asr #10
   14cd8:			; <UNDEFINED> instruction: 0x0004e5b4
   14cdc:	andeq	r4, r6, r0, asr #28
   14ce0:	mov	r0, #1
   14ce4:	bx	lr
   14ce8:	push	{r4, lr}
   14cec:	mov	r1, r0
   14cf0:	ldr	r3, [r2, #40]	; 0x28
   14cf4:	mov	r2, #0
   14cf8:	mov	r0, r3
   14cfc:	bl	12210 <fnmatch@plt>
   14d00:	clz	r0, r0
   14d04:	lsr	r0, r0, #5
   14d08:	pop	{r4, pc}
   14d0c:	ldr	r3, [r1, #16]
   14d10:	ldr	r0, [r2, #40]	; 0x28
   14d14:	and	r1, r3, #61440	; 0xf000
   14d18:	cmp	r1, #16384	; 0x4000
   14d1c:	moveq	r1, #44	; 0x2c
   14d20:	movne	r1, #40	; 0x28
   14d24:	add	r2, r2, r1
   14d28:	cmp	r0, #1
   14d2c:	ldr	r2, [r2, #4]
   14d30:	beq	14d74 <__assert_fail@plt+0x2780>
   14d34:	bcc	14d60 <__assert_fail@plt+0x276c>
   14d38:	cmp	r0, #2
   14d3c:	bne	14d58 <__assert_fail@plt+0x2764>
   14d40:	lsl	r0, r3, #20
   14d44:	lsr	r0, r0, #20
   14d48:	sub	r0, r0, r2
   14d4c:	clz	r0, r0
   14d50:	lsr	r0, r0, #5
   14d54:	bx	lr
   14d58:	push	{r4, lr}
   14d5c:	bl	125a0 <abort@plt>
   14d60:	and	r0, r3, r2
   14d64:	sub	r0, r0, r2
   14d68:	clz	r0, r0
   14d6c:	lsr	r0, r0, #5
   14d70:	bx	lr
   14d74:	cmp	r2, #0
   14d78:	beq	14d54 <__assert_fail@plt+0x2760>
   14d7c:	tst	r3, r2
   14d80:	movne	r0, #1
   14d84:	moveq	r0, #0
   14d88:	bx	lr
   14d8c:	ldr	r0, [pc, #32]	; 14db4 <__assert_fail@plt+0x27c0>
   14d90:	push	{r4, lr}
   14d94:	mov	r3, #0
   14d98:	ldr	r1, [r0, #12]
   14d9c:	mov	r2, #1
   14da0:	ldr	r0, [r0, #16]
   14da4:	bl	11fdc <faccessat@plt>
   14da8:	clz	r0, r0
   14dac:	lsr	r0, r0, #5
   14db0:	pop	{r4, pc}
   14db4:	andeq	r4, r6, r0, asr #28
   14db8:	ldr	r0, [pc, #32]	; 14de0 <__assert_fail@plt+0x27ec>
   14dbc:	push	{r4, lr}
   14dc0:	mov	r3, #0
   14dc4:	ldr	r1, [r0, #12]
   14dc8:	mov	r2, #4
   14dcc:	ldr	r0, [r0, #16]
   14dd0:	bl	11fdc <faccessat@plt>
   14dd4:	clz	r0, r0
   14dd8:	lsr	r0, r0, #5
   14ddc:	pop	{r4, pc}
   14de0:	andeq	r4, r6, r0, asr #28
   14de4:	ldr	r0, [pc, #32]	; 14e0c <__assert_fail@plt+0x2818>
   14de8:	push	{r4, lr}
   14dec:	mov	r3, #0
   14df0:	ldr	r1, [r0, #12]
   14df4:	mov	r2, #2
   14df8:	ldr	r0, [r0, #16]
   14dfc:	bl	11fdc <faccessat@plt>
   14e00:	clz	r0, r0
   14e04:	lsr	r0, r0, #5
   14e08:	pop	{r4, pc}
   14e0c:	andeq	r4, r6, r0, asr #28
   14e10:	push	{lr}		; (str lr, [sp, #-4]!)
   14e14:	mov	r3, r2
   14e18:	sub	sp, sp, #12
   14e1c:	str	r0, [sp]
   14e20:	ldr	r1, [r3, #56]	; 0x38
   14e24:	ldrb	r2, [r2, #52]	; 0x34
   14e28:	ldr	r0, [r3, #44]	; 0x2c
   14e2c:	ldr	r3, [pc, #12]	; 14e40 <__assert_fail@plt+0x284c>
   14e30:	bl	25dc0 <__assert_fail@plt+0x137cc>
   14e34:	mov	r0, #1
   14e38:	add	sp, sp, #12
   14e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e40:	andeq	r3, r5, r4, ror r5
   14e44:	push	{r4, lr}
   14e48:	ldr	r4, [r2, #44]	; 0x2c
   14e4c:	mov	r1, r4
   14e50:	bl	12588 <fputs@plt>
   14e54:	mov	r1, r4
   14e58:	mov	r0, #0
   14e5c:	bl	124e0 <putc@plt>
   14e60:	mov	r0, #1
   14e64:	pop	{r4, pc}
   14e68:	push	{r4, r5, r6, lr}
   14e6c:	sub	sp, sp, #8
   14e70:	mov	r6, r2
   14e74:	mov	r5, r0
   14e78:	bl	12300 <strlen@plt>
   14e7c:	mov	r3, #0
   14e80:	mov	r1, r5
   14e84:	mov	r4, r0
   14e88:	mov	r2, r4
   14e8c:	ldr	r0, [r6, #40]	; 0x28
   14e90:	str	r3, [sp]
   14e94:	bl	4b3e0 <__assert_fail@plt+0x38dec>
   14e98:	sub	r0, r4, r0
   14e9c:	clz	r0, r0
   14ea0:	lsr	r0, r0, #5
   14ea4:	add	sp, sp, #8
   14ea8:	pop	{r4, r5, r6, pc}
   14eac:	push	{r4, r5, r6, r7, r8, lr}
   14eb0:	mov	r8, r2
   14eb4:	ldr	r6, [r2, #44]	; 0x2c
   14eb8:	ldrd	r4, [r1, #48]	; 0x30
   14ebc:	mov	r2, r6
   14ec0:	asr	r7, r6, #31
   14ec4:	mov	r0, r4
   14ec8:	mov	r1, r5
   14ecc:	mov	r3, r7
   14ed0:	bl	4db88 <__assert_fail@plt+0x3b594>
   14ed4:	mov	r0, r4
   14ed8:	mov	r1, r5
   14edc:	mov	r5, #0
   14ee0:	orrs	r3, r2, r3
   14ee4:	mov	r3, r7
   14ee8:	mov	r2, r6
   14eec:	movne	r4, #1
   14ef0:	moveq	r4, #0
   14ef4:	bl	4db88 <__assert_fail@plt+0x3b594>
   14ef8:	ldr	r3, [r8, #40]	; 0x28
   14efc:	adds	r0, r0, r4
   14f00:	adc	r1, r1, r5
   14f04:	cmp	r3, #1
   14f08:	beq	14f50 <__assert_fail@plt+0x295c>
   14f0c:	bcc	14f38 <__assert_fail@plt+0x2944>
   14f10:	cmp	r3, #2
   14f14:	bne	14f30 <__assert_fail@plt+0x293c>
   14f18:	ldrd	r2, [r8, #48]	; 0x30
   14f1c:	cmp	r3, r1
   14f20:	cmpeq	r2, r0
   14f24:	moveq	r0, #1
   14f28:	movne	r0, #0
   14f2c:	pop	{r4, r5, r6, r7, r8, pc}
   14f30:	mov	r0, #0
   14f34:	pop	{r4, r5, r6, r7, r8, pc}
   14f38:	ldrd	r2, [r8, #48]	; 0x30
   14f3c:	cmp	r1, r3
   14f40:	cmpeq	r0, r2
   14f44:	movhi	r0, #1
   14f48:	movls	r0, #0
   14f4c:	pop	{r4, r5, r6, r7, r8, pc}
   14f50:	ldrd	r2, [r8, #48]	; 0x30
   14f54:	cmp	r1, r3
   14f58:	cmpeq	r0, r2
   14f5c:	movcc	r0, #1
   14f60:	movcs	r0, #0
   14f64:	pop	{r4, r5, r6, r7, r8, pc}
   14f68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f6c:	ldrd	r4, [r1, #96]	; 0x60
   14f70:	orrs	r3, r4, r5
   14f74:	beq	14f90 <__assert_fail@plt+0x299c>
   14f78:	ldrd	r6, [r2, #40]	; 0x28
   14f7c:	cmp	r5, r7
   14f80:	cmpeq	r4, r6
   14f84:	beq	14f90 <__assert_fail@plt+0x299c>
   14f88:	mov	r0, #0
   14f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f90:	ldr	r3, [pc, #72]	; 14fe0 <__assert_fail@plt+0x29ec>
   14f94:	mov	r5, r2
   14f98:	mov	r4, r1
   14f9c:	mov	r2, r1
   14fa0:	ldr	r1, [r3, #12]
   14fa4:	bl	1ac40 <__assert_fail@plt+0x864c>
   14fa8:	cmp	r0, #0
   14fac:	bne	14f88 <__assert_fail@plt+0x2994>
   14fb0:	ldrd	r8, [r4, #96]	; 0x60
   14fb4:	ldrd	r6, [r5, #40]	; 0x28
   14fb8:	cmp	r9, r7
   14fbc:	cmpeq	r8, r6
   14fc0:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fc4:	ldrd	r0, [r4]
   14fc8:	ldrd	r2, [r5, #48]	; 0x30
   14fcc:	cmp	r1, r3
   14fd0:	cmpeq	r0, r2
   14fd4:	moveq	r0, #1
   14fd8:	movne	r0, #0
   14fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fe0:	andeq	r4, r6, r0, asr #28
   14fe4:	mov	r0, #1
   14fe8:	bx	lr
   14fec:	ldr	r3, [pc, #176]	; 150a4 <__assert_fail@plt+0x2ab0>
   14ff0:	ldrb	r0, [r3, #5]
   14ff4:	cmp	r0, #0
   14ff8:	beq	1509c <__assert_fail@plt+0x2aa8>
   14ffc:	ldr	r0, [r3, #8]
   15000:	cmp	r0, #0
   15004:	beq	15040 <__assert_fail@plt+0x2a4c>
   15008:	ldrb	r3, [r3, #4]
   1500c:	cmp	r3, #0
   15010:	ldrne	r0, [r1, #16]
   15014:	and	r0, r0, #61440	; 0xf000
   15018:	cmp	r0, #24576	; 0x6000
   1501c:	beq	15084 <__assert_fail@plt+0x2a90>
   15020:	bls	15044 <__assert_fail@plt+0x2a50>
   15024:	cmp	r0, #40960	; 0xa000
   15028:	beq	15064 <__assert_fail@plt+0x2a70>
   1502c:	cmp	r0, #49152	; 0xc000
   15030:	beq	15094 <__assert_fail@plt+0x2aa0>
   15034:	cmp	r0, #32768	; 0x8000
   15038:	beq	1508c <__assert_fail@plt+0x2a98>
   1503c:	mov	r0, #0
   15040:	bx	lr
   15044:	cmp	r0, #8192	; 0x2000
   15048:	beq	15074 <__assert_fail@plt+0x2a80>
   1504c:	cmp	r0, #16384	; 0x4000
   15050:	beq	1507c <__assert_fail@plt+0x2a88>
   15054:	cmp	r0, #4096	; 0x1000
   15058:	bne	1503c <__assert_fail@plt+0x2a48>
   1505c:	mov	r3, #5
   15060:	b	15068 <__assert_fail@plt+0x2a74>
   15064:	mov	r3, #4
   15068:	add	r2, r2, r3
   1506c:	ldrb	r0, [r2, #40]	; 0x28
   15070:	bx	lr
   15074:	mov	r3, #1
   15078:	b	15068 <__assert_fail@plt+0x2a74>
   1507c:	mov	r3, #2
   15080:	b	15068 <__assert_fail@plt+0x2a74>
   15084:	mov	r3, #0
   15088:	b	15068 <__assert_fail@plt+0x2a74>
   1508c:	mov	r3, #3
   15090:	b	15068 <__assert_fail@plt+0x2a74>
   15094:	mov	r3, #6
   15098:	b	15068 <__assert_fail@plt+0x2a74>
   1509c:	push	{r4, lr}
   150a0:	bl	12630 <__assert_fail@plt+0x3c>
   150a4:	andeq	r4, r6, r0, asr #28
   150a8:	ldr	r3, [r2, #40]	; 0x28
   150ac:	cmp	r3, #1
   150b0:	beq	15110 <__assert_fail@plt+0x2b1c>
   150b4:	bcc	150ec <__assert_fail@plt+0x2af8>
   150b8:	cmp	r3, #2
   150bc:	bne	150e4 <__assert_fail@plt+0x2af0>
   150c0:	ldr	r3, [r1, #24]
   150c4:	ldrd	r0, [r2, #48]	; 0x30
   150c8:	mov	r2, r3
   150cc:	mov	r3, #0
   150d0:	cmp	r1, r3
   150d4:	cmpeq	r0, r2
   150d8:	moveq	r0, #1
   150dc:	movne	r0, #0
   150e0:	bx	lr
   150e4:	mov	r0, #0
   150e8:	bx	lr
   150ec:	ldr	r3, [r1, #24]
   150f0:	ldrd	r0, [r2, #48]	; 0x30
   150f4:	mov	r2, r3
   150f8:	mov	r3, #0
   150fc:	cmp	r3, r1
   15100:	cmpeq	r2, r0
   15104:	movhi	r0, #1
   15108:	movls	r0, #0
   1510c:	bx	lr
   15110:	ldr	r3, [r1, #24]
   15114:	ldrd	r0, [r2, #48]	; 0x30
   15118:	mov	r2, r3
   1511c:	mov	r3, #0
   15120:	cmp	r3, r1
   15124:	cmpeq	r2, r0
   15128:	movcc	r0, #1
   1512c:	movcs	r0, #0
   15130:	bx	lr
   15134:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15138:	mov	r8, r2
   1513c:	ldr	r7, [r1, #72]	; 0x48
   15140:	ldr	r5, [r1, #76]	; 0x4c
   15144:	ldr	r4, [r1, #88]	; 0x58
   15148:	ldr	r6, [r1, #92]	; 0x5c
   1514c:	cmp	r7, r4
   15150:	cmpeq	r5, r6
   15154:	moveq	r9, #1
   15158:	movne	r9, #0
   1515c:	beq	1518c <__assert_fail@plt+0x2b98>
   15160:	mov	r1, r4
   15164:	mov	r0, r7
   15168:	bl	123cc <difftime@plt>
   1516c:	sub	r3, r5, r6
   15170:	vldr	d6, [pc, #328]	; 152c0 <__assert_fail@plt+0x2ccc>
   15174:	vmov	s15, r3
   15178:	vcvt.f64.s32	d7, s15
   1517c:	vmla.f64	d0, d7, d6
   15180:	vcmpe.f64	d0, #0.0
   15184:	vmrs	APSR_nzcv, fpscr
   15188:	bmi	151f0 <__assert_fail@plt+0x2bfc>
   1518c:	subs	r5, r6, r5
   15190:	sub	r0, r4, r7
   15194:	bmi	1523c <__assert_fail@plt+0x2c48>
   15198:	ldr	r3, [r8, #44]	; 0x2c
   1519c:	cmp	r3, #1
   151a0:	beq	15258 <__assert_fail@plt+0x2c64>
   151a4:	bcc	151f8 <__assert_fail@plt+0x2c04>
   151a8:	cmp	r3, #2
   151ac:	bne	1529c <__assert_fail@plt+0x2ca8>
   151b0:	ldr	r1, [r8, #48]	; 0x30
   151b4:	bl	123cc <difftime@plt>
   151b8:	ldr	r6, [r8, #52]	; 0x34
   151bc:	vldr	d6, [pc, #252]	; 152c0 <__assert_fail@plt+0x2ccc>
   151c0:	sub	r5, r5, r6
   151c4:	vmov	s15, r5
   151c8:	vcvt.f64.s32	d7, s15
   151cc:	vmla.f64	d0, d7, d6
   151d0:	vcmpe.f64	d0, #0.0
   151d4:	vmrs	APSR_nzcv, fpscr
   151d8:	ble	152b0 <__assert_fail@plt+0x2cbc>
   151dc:	vldr	d7, [pc, #228]	; 152c8 <__assert_fail@plt+0x2cd4>
   151e0:	vcmpe.f64	d0, d7
   151e4:	vmrs	APSR_nzcv, fpscr
   151e8:	movls	r9, #1
   151ec:	movhi	r9, #0
   151f0:	mov	r0, r9
   151f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151f8:	ldr	r1, [r8, #48]	; 0x30
   151fc:	ldr	r6, [r8, #52]	; 0x34
   15200:	cmp	r5, r6
   15204:	cmpeq	r0, r1
   15208:	beq	152b0 <__assert_fail@plt+0x2cbc>
   1520c:	bl	123cc <difftime@plt>
   15210:	sub	r5, r5, r6
   15214:	vldr	d6, [pc, #164]	; 152c0 <__assert_fail@plt+0x2ccc>
   15218:	vmov	s15, r5
   1521c:	vcvt.f64.s32	d7, s15
   15220:	vmla.f64	d0, d7, d6
   15224:	vcmpe.f64	d0, #0.0
   15228:	vmrs	APSR_nzcv, fpscr
   1522c:	movpl	r9, #1
   15230:	movmi	r9, #0
   15234:	mov	r0, r9
   15238:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1523c:	ldr	r3, [r8, #44]	; 0x2c
   15240:	add	r5, r5, #998244352	; 0x3b800000
   15244:	add	r5, r5, #1753088	; 0x1ac000
   15248:	cmp	r3, #1
   1524c:	add	r5, r5, #2560	; 0xa00
   15250:	sub	r0, r0, #1
   15254:	bne	151a4 <__assert_fail@plt+0x2bb0>
   15258:	ldr	r1, [r8, #48]	; 0x30
   1525c:	ldr	r6, [r8, #52]	; 0x34
   15260:	cmp	r5, r6
   15264:	cmpeq	r0, r1
   15268:	beq	152b0 <__assert_fail@plt+0x2cbc>
   1526c:	bl	123cc <difftime@plt>
   15270:	sub	r5, r5, r6
   15274:	vldr	d6, [pc, #68]	; 152c0 <__assert_fail@plt+0x2ccc>
   15278:	vmov	s15, r5
   1527c:	vcvt.f64.s32	d7, s15
   15280:	vmla.f64	d0, d7, d6
   15284:	vcmpe.f64	d0, #0.0
   15288:	vmrs	APSR_nzcv, fpscr
   1528c:	movmi	r9, #1
   15290:	movpl	r9, #0
   15294:	mov	r0, r9
   15298:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1529c:	ldr	r3, [pc, #44]	; 152d0 <__assert_fail@plt+0x2cdc>
   152a0:	mov	r2, #138	; 0x8a
   152a4:	ldr	r1, [pc, #40]	; 152d4 <__assert_fail@plt+0x2ce0>
   152a8:	ldr	r0, [pc, #40]	; 152d8 <__assert_fail@plt+0x2ce4>
   152ac:	bl	125f4 <__assert_fail@plt>
   152b0:	mov	r9, #0
   152b4:	mov	r0, r9
   152b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152bc:	nop			; (mov r0, r0)
   152c0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   152c4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   152c8:	andeq	r0, r0, r0
   152cc:	rscsmi	r1, r5, r0, lsl #16
   152d0:	andeq	lr, r4, r0, ror r4
   152d4:	andeq	lr, r4, r8, asr #9
   152d8:	andeq	r2, r5, r8, lsl r6
   152dc:	ldr	r0, [r2, #40]	; 0x28
   152e0:	ldr	r3, [r1, #24]
   152e4:	sub	r0, r0, r3
   152e8:	clz	r0, r0
   152ec:	lsr	r0, r0, #5
   152f0:	bx	lr
   152f4:	push	{r4, r5, r6, r7, r8, lr}
   152f8:	sub	sp, sp, #104	; 0x68
   152fc:	mov	r8, r1
   15300:	mov	r6, r2
   15304:	mov	r7, r0
   15308:	bl	1b3b4 <__assert_fail@plt+0x8dc0>
   1530c:	ldr	r5, [pc, #356]	; 15478 <__assert_fail@plt+0x2e84>
   15310:	ldr	r3, [pc, #356]	; 1547c <__assert_fail@plt+0x2e88>
   15314:	ldr	r4, [pc, #356]	; 15480 <__assert_fail@plt+0x2e8c>
   15318:	cmp	r0, #0
   1531c:	mov	r0, sp
   15320:	movne	r4, r3
   15324:	bl	1ac3c <__assert_fail@plt+0x8648>
   15328:	mov	r1, sp
   1532c:	ldr	r0, [r5, #12]
   15330:	blx	r4
   15334:	cmp	r0, #0
   15338:	beq	1538c <__assert_fail@plt+0x2d98>
   1533c:	bl	1b3b4 <__assert_fail@plt+0x8dc0>
   15340:	cmp	r0, #0
   15344:	beq	15404 <__assert_fail@plt+0x2e10>
   15348:	bl	12348 <__errno_location@plt>
   1534c:	ldr	r4, [r0]
   15350:	cmp	r4, #2
   15354:	beq	15410 <__assert_fail@plt+0x2e1c>
   15358:	mov	r1, r7
   1535c:	mov	r0, #0
   15360:	bl	1be34 <__assert_fail@plt+0x9840>
   15364:	mov	r1, r4
   15368:	ldr	r2, [pc, #276]	; 15484 <__assert_fail@plt+0x2e90>
   1536c:	mov	r3, r0
   15370:	mov	r0, #0
   15374:	bl	121ec <error@plt>
   15378:	mov	r3, #1
   1537c:	mov	r0, #0
   15380:	str	r3, [r5, #28]
   15384:	add	sp, sp, #104	; 0x68
   15388:	pop	{r4, r5, r6, r7, r8, pc}
   1538c:	ldrb	r3, [r5, #5]
   15390:	cmp	r3, #0
   15394:	beq	1544c <__assert_fail@plt+0x2e58>
   15398:	ldr	r3, [r5, #8]
   1539c:	cmp	r3, #0
   153a0:	beq	153d8 <__assert_fail@plt+0x2de4>
   153a4:	ldrb	r2, [r5, #4]
   153a8:	cmp	r2, #0
   153ac:	ldrne	r3, [sp, #16]
   153b0:	and	r3, r3, #61440	; 0xf000
   153b4:	cmp	r3, #24576	; 0x6000
   153b8:	beq	15470 <__assert_fail@plt+0x2e7c>
   153bc:	bls	153e4 <__assert_fail@plt+0x2df0>
   153c0:	cmp	r3, #40960	; 0xa000
   153c4:	beq	15460 <__assert_fail@plt+0x2e6c>
   153c8:	cmp	r3, #49152	; 0xc000
   153cc:	beq	15458 <__assert_fail@plt+0x2e64>
   153d0:	cmp	r3, #32768	; 0x8000
   153d4:	beq	15438 <__assert_fail@plt+0x2e44>
   153d8:	mov	r0, #0
   153dc:	add	sp, sp, #104	; 0x68
   153e0:	pop	{r4, r5, r6, r7, r8, pc}
   153e4:	cmp	r3, #8192	; 0x2000
   153e8:	beq	15468 <__assert_fail@plt+0x2e74>
   153ec:	cmp	r3, #16384	; 0x4000
   153f0:	beq	15450 <__assert_fail@plt+0x2e5c>
   153f4:	cmp	r3, #4096	; 0x1000
   153f8:	bne	153d8 <__assert_fail@plt+0x2de4>
   153fc:	mov	r3, #5
   15400:	b	1543c <__assert_fail@plt+0x2e48>
   15404:	bl	12348 <__errno_location@plt>
   15408:	ldr	r4, [r0]
   1540c:	b	15358 <__assert_fail@plt+0x2d64>
   15410:	ldrb	r3, [r5, #5]
   15414:	cmp	r3, #0
   15418:	beq	1544c <__assert_fail@plt+0x2e58>
   1541c:	ldr	r3, [r5, #8]
   15420:	cmp	r3, #0
   15424:	beq	153d8 <__assert_fail@plt+0x2de4>
   15428:	ldrb	r2, [r5, #4]
   1542c:	cmp	r2, #0
   15430:	ldrne	r3, [r8, #16]
   15434:	b	153b0 <__assert_fail@plt+0x2dbc>
   15438:	mov	r3, #3
   1543c:	add	r6, r6, r3
   15440:	ldrb	r0, [r6, #40]	; 0x28
   15444:	add	sp, sp, #104	; 0x68
   15448:	pop	{r4, r5, r6, r7, r8, pc}
   1544c:	bl	12630 <__assert_fail@plt+0x3c>
   15450:	mov	r3, #2
   15454:	b	1543c <__assert_fail@plt+0x2e48>
   15458:	mov	r3, #6
   1545c:	b	1543c <__assert_fail@plt+0x2e48>
   15460:	mov	r3, #4
   15464:	b	1543c <__assert_fail@plt+0x2e48>
   15468:	mov	r3, #1
   1546c:	b	1543c <__assert_fail@plt+0x2e48>
   15470:	mov	r3, #0
   15474:	b	1543c <__assert_fail@plt+0x2e48>
   15478:	andeq	r4, r6, r0, asr #28
   1547c:	andeq	fp, r1, r4, asr #4
   15480:	andeq	fp, r1, r8, asr r1
   15484:	andeq	r2, r5, r4, asr #9
   15488:	ldr	r3, [pc, #164]	; 15534 <__assert_fail@plt+0x2f40>
   1548c:	ldr	ip, [pc, #164]	; 15538 <__assert_fail@plt+0x2f44>
   15490:	push	{r4, r5, r6, r7, lr}
   15494:	sub	sp, sp, #12
   15498:	ldr	r1, [r3, #12]
   1549c:	mov	r5, r0
   154a0:	mov	r4, r2
   154a4:	ldr	r0, [r3, #16]
   154a8:	add	r2, sp, #4
   154ac:	ldr	r3, [ip, #64]	; 0x40
   154b0:	blx	r3
   154b4:	cmp	r0, #0
   154b8:	blt	154e8 <__assert_fail@plt+0x2ef4>
   154bc:	mov	r2, #0
   154c0:	ldr	r1, [sp, #4]
   154c4:	ldr	r0, [r4, #40]	; 0x28
   154c8:	bl	12210 <fnmatch@plt>
   154cc:	clz	r4, r0
   154d0:	ldr	r0, [sp, #4]
   154d4:	bl	1251c <freecon@plt>
   154d8:	lsr	r4, r4, #5
   154dc:	mov	r0, r4
   154e0:	add	sp, sp, #12
   154e4:	pop	{r4, r5, r6, r7, pc}
   154e8:	bl	12348 <__errno_location@plt>
   154ec:	mov	r4, #0
   154f0:	mov	r2, #5
   154f4:	ldr	r1, [pc, #64]	; 1553c <__assert_fail@plt+0x2f48>
   154f8:	ldr	r6, [r0]
   154fc:	mov	r0, r4
   15500:	bl	120b4 <dcgettext@plt>
   15504:	mov	r1, r5
   15508:	mov	r7, r0
   1550c:	mov	r0, r4
   15510:	bl	1be34 <__assert_fail@plt+0x9840>
   15514:	mov	r2, r7
   15518:	mov	r1, r6
   1551c:	mov	r3, r0
   15520:	mov	r0, r4
   15524:	bl	121ec <error@plt>
   15528:	mov	r0, r4
   1552c:	add	sp, sp, #12
   15530:	pop	{r4, r5, r6, r7, pc}
   15534:	andeq	r4, r6, r0, asr #28
   15538:	andeq	r4, r6, ip, ror #28
   1553c:	andeq	lr, r4, r8, asr #11
   15540:	push	{r4, r5, r6, r7, r8, lr}
   15544:	subs	r8, r1, #0
   15548:	sub	sp, sp, #256	; 0x100
   1554c:	mov	r5, r0
   15550:	beq	155d8 <__assert_fail@plt+0x2fe4>
   15554:	ldr	r7, [pc, #152]	; 155f4 <__assert_fail@plt+0x3000>
   15558:	mov	r6, #0
   1555c:	mov	r4, sp
   15560:	ldr	r1, [r8, #4]
   15564:	cmp	r1, #0
   15568:	beq	155ec <__assert_fail@plt+0x2ff8>
   1556c:	mov	r0, r4
   15570:	bl	12090 <stpcpy@plt>
   15574:	sub	r0, r0, r4
   15578:	subs	r0, r0, #1
   1557c:	bmi	155b0 <__assert_fail@plt+0x2fbc>
   15580:	ldrb	r3, [r4, r0]
   15584:	add	r2, r4, r0
   15588:	cmp	r3, #9
   1558c:	cmpne	r3, #32
   15590:	beq	155a8 <__assert_fail@plt+0x2fb4>
   15594:	b	155b0 <__assert_fail@plt+0x2fbc>
   15598:	ldrb	r3, [r2, #-1]!
   1559c:	cmp	r3, #9
   155a0:	cmpne	r3, #32
   155a4:	bne	155b0 <__assert_fail@plt+0x2fbc>
   155a8:	subs	r0, r0, #1
   155ac:	bcs	15598 <__assert_fail@plt+0x2fa4>
   155b0:	add	r3, sp, #256	; 0x100
   155b4:	add	r0, r3, r0
   155b8:	mov	r2, r4
   155bc:	strb	r6, [r0, #-255]	; 0xffffff01
   155c0:	mov	r1, r7
   155c4:	mov	r0, r5
   155c8:	bl	1233c <fprintf@plt>
   155cc:	ldr	r8, [r8, #152]	; 0x98
   155d0:	cmp	r8, #0
   155d4:	bne	15560 <__assert_fail@plt+0x2f6c>
   155d8:	mov	r1, r5
   155dc:	mov	r0, #10
   155e0:	bl	1248c <fputc@plt>
   155e4:	add	sp, sp, #256	; 0x100
   155e8:	pop	{r4, r5, r6, r7, r8, pc}
   155ec:	mov	r2, r6
   155f0:	b	155c0 <__assert_fail@plt+0x2fcc>
   155f4:	andeq	lr, r4, r0, ror #11
   155f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155fc:	subs	r5, r1, #0
   15600:	sub	sp, sp, #12
   15604:	beq	15830 <__assert_fail@plt+0x323c>
   15608:	ldr	r4, [r5, #156]	; 0x9c
   1560c:	mov	r6, r0
   15610:	cmp	r4, #0
   15614:	beq	15690 <__assert_fail@plt+0x309c>
   15618:	ldr	r3, [r4]
   1561c:	ldr	r1, [pc, #556]	; 15850 <__assert_fail@plt+0x325c>
   15620:	ldr	r2, [pc, #556]	; 15854 <__assert_fail@plt+0x3260>
   15624:	cmp	r3, r2
   15628:	cmpne	r3, r1
   1562c:	beq	15650 <__assert_fail@plt+0x305c>
   15630:	b	157a0 <__assert_fail@plt+0x31ac>
   15634:	ldr	r4, [r4, #160]	; 0xa0
   15638:	cmp	r4, #0
   1563c:	beq	15690 <__assert_fail@plt+0x309c>
   15640:	ldr	r3, [r4]
   15644:	cmp	r3, r1
   15648:	cmpne	r3, r2
   1564c:	bne	157a0 <__assert_fail@plt+0x31ac>
   15650:	ldr	r3, [r4, #156]	; 0x9c
   15654:	cmp	r3, #0
   15658:	beq	15634 <__assert_fail@plt+0x3040>
   1565c:	mov	r3, r6
   15660:	mov	r2, #3
   15664:	mov	r1, #1
   15668:	ldr	r0, [pc, #488]	; 15858 <__assert_fail@plt+0x3264>
   1566c:	bl	12168 <fwrite@plt>
   15670:	mov	r1, r4
   15674:	mov	r0, r6
   15678:	bl	155f8 <__assert_fail@plt+0x3004>
   1567c:	mov	r3, r6
   15680:	mov	r2, #3
   15684:	mov	r1, #1
   15688:	ldr	r0, [pc, #460]	; 1585c <__assert_fail@plt+0x3268>
   1568c:	bl	12168 <fwrite@plt>
   15690:	ldr	fp, [pc, #456]	; 15860 <__assert_fail@plt+0x326c>
   15694:	ldr	r7, [pc, #456]	; 15864 <__assert_fail@plt+0x3270>
   15698:	ldr	sl, [pc, #456]	; 15868 <__assert_fail@plt+0x3274>
   1569c:	ldr	r9, [pc, #456]	; 1586c <__assert_fail@plt+0x3278>
   156a0:	ldr	r8, [pc, #456]	; 15870 <__assert_fail@plt+0x327c>
   156a4:	ldrb	r1, [r5, #20]
   156a8:	ldrb	r2, [r5, #18]
   156ac:	ldrb	r3, [r5, #19]
   156b0:	cmp	r1, #0
   156b4:	moveq	r1, r7
   156b8:	movne	r1, r8
   156bc:	cmp	r2, #0
   156c0:	moveq	r2, r7
   156c4:	movne	r2, sl
   156c8:	cmp	r3, #0
   156cc:	moveq	r3, r7
   156d0:	movne	r3, r9
   156d4:	str	r1, [sp]
   156d8:	mov	r0, r6
   156dc:	ldr	r1, [pc, #400]	; 15874 <__assert_fail@plt+0x3280>
   156e0:	bl	1233c <fprintf@plt>
   156e4:	mov	r1, r5
   156e8:	mov	r0, r6
   156ec:	bl	173e8 <__assert_fail@plt+0x4df4>
   156f0:	vldr	s15, [r5, #28]
   156f4:	ldr	r1, [pc, #380]	; 15878 <__assert_fail@plt+0x3284>
   156f8:	mov	r0, r6
   156fc:	vcvt.f64.f32	d7, s15
   15700:	vmov	r2, r3, d7
   15704:	bl	1233c <fprintf@plt>
   15708:	ldr	r3, [fp, #44]	; 0x2c
   1570c:	tst	r3, #64	; 0x40
   15710:	bne	157e8 <__assert_fail@plt+0x31f4>
   15714:	ldr	r4, [r5, #160]	; 0xa0
   15718:	cmp	r4, #0
   1571c:	beq	15830 <__assert_fail@plt+0x323c>
   15720:	ldr	r3, [r4]
   15724:	ldr	r2, [pc, #296]	; 15854 <__assert_fail@plt+0x3260>
   15728:	ldr	r1, [pc, #288]	; 15850 <__assert_fail@plt+0x325c>
   1572c:	cmp	r3, r1
   15730:	cmpne	r3, r2
   15734:	beq	15758 <__assert_fail@plt+0x3164>
   15738:	b	157c8 <__assert_fail@plt+0x31d4>
   1573c:	ldr	r4, [r4, #160]	; 0xa0
   15740:	cmp	r4, #0
   15744:	beq	15830 <__assert_fail@plt+0x323c>
   15748:	ldr	r3, [r4]
   1574c:	cmp	r3, r2
   15750:	cmpne	r3, r1
   15754:	bne	157c8 <__assert_fail@plt+0x31d4>
   15758:	ldr	r3, [r4, #156]	; 0x9c
   1575c:	cmp	r3, #0
   15760:	beq	1573c <__assert_fail@plt+0x3148>
   15764:	mov	r3, r6
   15768:	mov	r2, #3
   1576c:	mov	r1, #1
   15770:	ldr	r0, [pc, #224]	; 15858 <__assert_fail@plt+0x3264>
   15774:	bl	12168 <fwrite@plt>
   15778:	mov	r1, r4
   1577c:	mov	r0, r6
   15780:	bl	155f8 <__assert_fail@plt+0x3004>
   15784:	mov	r3, r6
   15788:	mov	r2, #3
   1578c:	mov	r1, #1
   15790:	ldr	r0, [pc, #196]	; 1585c <__assert_fail@plt+0x3268>
   15794:	add	sp, sp, #12
   15798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1579c:	b	12168 <fwrite@plt>
   157a0:	ldr	r3, [r4, #156]	; 0x9c
   157a4:	cmp	r3, #0
   157a8:	bne	1565c <__assert_fail@plt+0x3068>
   157ac:	ldr	r3, [r4, #160]	; 0xa0
   157b0:	cmp	r3, #0
   157b4:	bne	1565c <__assert_fail@plt+0x3068>
   157b8:	mov	r1, r4
   157bc:	mov	r0, r6
   157c0:	bl	155f8 <__assert_fail@plt+0x3004>
   157c4:	b	15690 <__assert_fail@plt+0x309c>
   157c8:	ldr	r3, [r4, #156]	; 0x9c
   157cc:	cmp	r3, #0
   157d0:	bne	15764 <__assert_fail@plt+0x3170>
   157d4:	ldr	r3, [r4, #160]	; 0xa0
   157d8:	mov	r5, r4
   157dc:	cmp	r3, #0
   157e0:	bne	15764 <__assert_fail@plt+0x3170>
   157e4:	b	156a4 <__assert_fail@plt+0x30b0>
   157e8:	ldr	r3, [r5, #164]	; 0xa4
   157ec:	ldr	r2, [r5, #168]	; 0xa8
   157f0:	ldr	r1, [pc, #132]	; 1587c <__assert_fail@plt+0x3288>
   157f4:	mov	r0, r6
   157f8:	bl	1233c <fprintf@plt>
   157fc:	ldr	r3, [r5, #164]	; 0xa4
   15800:	cmp	r3, #0
   15804:	beq	15838 <__assert_fail@plt+0x3244>
   15808:	vmov	s15, r3
   1580c:	vldr	s13, [r5, #168]	; 0xa8
   15810:	ldr	r1, [pc, #104]	; 15880 <__assert_fail@plt+0x328c>
   15814:	mov	r0, r6
   15818:	vcvt.f64.u32	d7, s15
   1581c:	vcvt.f64.u32	d6, s13
   15820:	vdiv.f64	d5, d6, d7
   15824:	vmov	r2, r3, d5
   15828:	bl	1233c <fprintf@plt>
   1582c:	b	15714 <__assert_fail@plt+0x3120>
   15830:	add	sp, sp, #12
   15834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15838:	mov	r3, r6
   1583c:	mov	r2, #4
   15840:	mov	r1, #1
   15844:	ldr	r0, [pc, #56]	; 15884 <__assert_fail@plt+0x3290>
   15848:	bl	12168 <fwrite@plt>
   1584c:	b	15714 <__assert_fail@plt+0x3120>
   15850:			; <UNDEFINED> instruction: 0x000139b4
   15854:	andeq	r3, r1, r4, ror r9
   15858:	andeq	lr, r4, r8, ror #12
   1585c:	andeq	lr, r4, ip, ror #12
   15860:	andeq	r4, r6, ip, ror #28
   15864:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   15868:	andeq	lr, r4, r8, ror #11
   1586c:	strdeq	lr, [r4], -r8
   15870:	andeq	lr, r4, r8, lsl #12
   15874:	andeq	lr, r4, r8, lsl r6
   15878:	andeq	lr, r4, r0, lsr #12
   1587c:	andeq	lr, r4, ip, lsr r6
   15880:	andeq	lr, r4, r8, asr r6
   15884:	andeq	lr, r4, r0, ror #12
   15888:	ldr	r3, [pc, #68]	; 158d4 <__assert_fail@plt+0x32e0>
   1588c:	ldr	r3, [r3, #44]	; 0x2c
   15890:	tst	r3, #64	; 0x40
   15894:	bxeq	lr
   15898:	push	{r4, r5, r6, lr}
   1589c:	mov	r2, #42	; 0x2a
   158a0:	ldr	r5, [pc, #48]	; 158d8 <__assert_fail@plt+0x32e4>
   158a4:	mov	r4, r0
   158a8:	mov	r1, #1
   158ac:	ldr	r3, [r5]
   158b0:	ldr	r0, [pc, #36]	; 158dc <__assert_fail@plt+0x32e8>
   158b4:	bl	12168 <fwrite@plt>
   158b8:	mov	r1, r4
   158bc:	ldr	r0, [r5]
   158c0:	bl	155f8 <__assert_fail@plt+0x3004>
   158c4:	ldr	r1, [r5]
   158c8:	mov	r0, #10
   158cc:	pop	{r4, r5, r6, lr}
   158d0:	b	1248c <fputc@plt>
   158d4:	andeq	r4, r6, ip, ror #28
   158d8:	andeq	r4, r6, r8, asr #10
   158dc:	andeq	lr, r4, r0, ror r6
   158e0:	cmp	r0, #0
   158e4:	bxeq	lr
   158e8:	ldr	r2, [r0]
   158ec:	push	{r4, lr}
   158f0:	cmp	r2, #0
   158f4:	beq	15a0c <__assert_fail@plt+0x3418>
   158f8:	ldr	r3, [r0, #172]	; 0xac
   158fc:	cmp	r3, #0
   15900:	beq	159f8 <__assert_fail@plt+0x3404>
   15904:	ldr	r1, [r3, #12]
   15908:	cmp	r1, #0
   1590c:	cmpne	r1, r2
   15910:	bne	15a20 <__assert_fail@plt+0x342c>
   15914:	ldr	r4, [pc, #360]	; 15a84 <__assert_fail@plt+0x3490>
   15918:	ldr	lr, [pc, #360]	; 15a88 <__assert_fail@plt+0x3494>
   1591c:	mov	ip, #1
   15920:	b	1598c <__assert_fail@plt+0x3398>
   15924:	tst	r1, #5
   15928:	bne	159d0 <__assert_fail@plt+0x33dc>
   1592c:	tst	r1, #64	; 0x40
   15930:	beq	15958 <__assert_fail@plt+0x3364>
   15934:	ldrb	r3, [r0, #16]
   15938:	cmp	r3, #0
   1593c:	beq	15a48 <__assert_fail@plt+0x3454>
   15940:	cmp	r2, r4
   15944:	cmpne	r2, lr
   15948:	beq	15958 <__assert_fail@plt+0x3364>
   1594c:	ldrb	r3, [r0, #17]
   15950:	cmp	r3, #0
   15954:	beq	15a5c <__assert_fail@plt+0x3468>
   15958:	ldr	r0, [r0, #152]	; 0x98
   1595c:	cmp	r0, #0
   15960:	beq	159f4 <__assert_fail@plt+0x3400>
   15964:	ldr	r2, [r0]
   15968:	cmp	r2, #0
   1596c:	beq	15a0c <__assert_fail@plt+0x3418>
   15970:	ldr	r3, [r0, #172]	; 0xac
   15974:	cmp	r3, #0
   15978:	beq	159f8 <__assert_fail@plt+0x3404>
   1597c:	ldr	r1, [r3, #12]
   15980:	cmp	r2, r1
   15984:	cmpne	r1, #0
   15988:	bne	15a20 <__assert_fail@plt+0x342c>
   1598c:	ldr	r3, [r3]
   15990:	cmp	r3, #6
   15994:	bhi	15958 <__assert_fail@plt+0x3364>
   15998:	lsl	r1, ip, r3
   1599c:	tst	r1, #58	; 0x3a
   159a0:	beq	15924 <__assert_fail@plt+0x3330>
   159a4:	ldrb	r3, [r0, #17]
   159a8:	cmp	r3, #0
   159ac:	bne	15a34 <__assert_fail@plt+0x3440>
   159b0:	ldrb	r3, [r0, #16]
   159b4:	cmp	r3, #0
   159b8:	beq	15958 <__assert_fail@plt+0x3364>
   159bc:	ldr	r3, [pc, #200]	; 15a8c <__assert_fail@plt+0x3498>
   159c0:	ldr	r2, [pc, #200]	; 15a90 <__assert_fail@plt+0x349c>
   159c4:	ldr	r1, [pc, #200]	; 15a94 <__assert_fail@plt+0x34a0>
   159c8:	ldr	r0, [pc, #200]	; 15a98 <__assert_fail@plt+0x34a4>
   159cc:	bl	125f4 <__assert_fail@plt>
   159d0:	cmp	r3, #0
   159d4:	beq	15a70 <__assert_fail@plt+0x347c>
   159d8:	cmp	r3, #2
   159dc:	bne	15958 <__assert_fail@plt+0x3364>
   159e0:	ldr	r3, [pc, #164]	; 15a8c <__assert_fail@plt+0x3498>
   159e4:	ldr	r2, [pc, #176]	; 15a9c <__assert_fail@plt+0x34a8>
   159e8:	ldr	r1, [pc, #164]	; 15a94 <__assert_fail@plt+0x34a0>
   159ec:	ldr	r0, [pc, #172]	; 15aa0 <__assert_fail@plt+0x34ac>
   159f0:	bl	125f4 <__assert_fail@plt>
   159f4:	pop	{r4, pc}
   159f8:	ldr	r3, [pc, #140]	; 15a8c <__assert_fail@plt+0x3498>
   159fc:	ldr	r2, [pc, #160]	; 15aa4 <__assert_fail@plt+0x34b0>
   15a00:	ldr	r1, [pc, #140]	; 15a94 <__assert_fail@plt+0x34a0>
   15a04:	ldr	r0, [pc, #156]	; 15aa8 <__assert_fail@plt+0x34b4>
   15a08:	bl	125f4 <__assert_fail@plt>
   15a0c:	ldr	r3, [pc, #120]	; 15a8c <__assert_fail@plt+0x3498>
   15a10:	ldr	r2, [pc, #148]	; 15aac <__assert_fail@plt+0x34b8>
   15a14:	ldr	r1, [pc, #120]	; 15a94 <__assert_fail@plt+0x34a0>
   15a18:	ldr	r0, [pc, #144]	; 15ab0 <__assert_fail@plt+0x34bc>
   15a1c:	bl	125f4 <__assert_fail@plt>
   15a20:	ldr	r3, [pc, #100]	; 15a8c <__assert_fail@plt+0x3498>
   15a24:	ldr	r2, [pc, #136]	; 15ab4 <__assert_fail@plt+0x34c0>
   15a28:	ldr	r1, [pc, #100]	; 15a94 <__assert_fail@plt+0x34a0>
   15a2c:	ldr	r0, [pc, #132]	; 15ab8 <__assert_fail@plt+0x34c4>
   15a30:	bl	125f4 <__assert_fail@plt>
   15a34:	ldr	r3, [pc, #80]	; 15a8c <__assert_fail@plt+0x3498>
   15a38:	ldr	r2, [pc, #124]	; 15abc <__assert_fail@plt+0x34c8>
   15a3c:	ldr	r1, [pc, #80]	; 15a94 <__assert_fail@plt+0x34a0>
   15a40:	ldr	r0, [pc, #120]	; 15ac0 <__assert_fail@plt+0x34cc>
   15a44:	bl	125f4 <__assert_fail@plt>
   15a48:	ldr	r3, [pc, #60]	; 15a8c <__assert_fail@plt+0x3498>
   15a4c:	ldr	r2, [pc, #112]	; 15ac4 <__assert_fail@plt+0x34d0>
   15a50:	ldr	r1, [pc, #60]	; 15a94 <__assert_fail@plt+0x34a0>
   15a54:	ldr	r0, [pc, #108]	; 15ac8 <__assert_fail@plt+0x34d4>
   15a58:	bl	125f4 <__assert_fail@plt>
   15a5c:	ldr	r3, [pc, #40]	; 15a8c <__assert_fail@plt+0x3498>
   15a60:	ldr	r2, [pc, #100]	; 15acc <__assert_fail@plt+0x34d8>
   15a64:	ldr	r1, [pc, #40]	; 15a94 <__assert_fail@plt+0x34a0>
   15a68:	ldr	r0, [pc, #96]	; 15ad0 <__assert_fail@plt+0x34dc>
   15a6c:	bl	125f4 <__assert_fail@plt>
   15a70:	ldr	r3, [pc, #20]	; 15a8c <__assert_fail@plt+0x3498>
   15a74:	ldr	r2, [pc, #88]	; 15ad4 <__assert_fail@plt+0x34e0>
   15a78:	ldr	r1, [pc, #20]	; 15a94 <__assert_fail@plt+0x34a0>
   15a7c:	ldr	r0, [pc, #84]	; 15ad8 <__assert_fail@plt+0x34e4>
   15a80:	bl	125f4 <__assert_fail@plt>
   15a84:	andeq	r3, r1, r8, ror #17
   15a88:	andeq	r3, r1, r0, lsl #18
   15a8c:			; <UNDEFINED> instruction: 0x0004e4b4
   15a90:	andeq	r0, r0, r4, asr r5
   15a94:	andeq	lr, r4, r8, asr #9
   15a98:	andeq	lr, r4, r8, lsl #15
   15a9c:	andeq	r0, r0, fp, lsr r5
   15aa0:	andeq	lr, r4, ip, lsl r7
   15aa4:	andeq	r0, r0, r1, lsr #10
   15aa8:			; <UNDEFINED> instruction: 0x0004e6b4
   15aac:	andeq	r0, r0, lr, lsl r5
   15ab0:	muleq	r4, ip, r6
   15ab4:	andeq	r0, r0, sl, lsr #10
   15ab8:	andeq	lr, r4, ip, asr #13
   15abc:	andeq	r0, r0, r3, asr r5
   15ac0:	andeq	lr, r4, r0, ror r7
   15ac4:	andeq	r0, r0, pc, lsr r5
   15ac8:	andeq	lr, r4, ip, asr #14
   15acc:	andeq	r0, r0, r5, asr #10
   15ad0:	andeq	lr, r4, ip, asr r7
   15ad4:	andeq	r0, r0, sl, lsr r5
   15ad8:	strdeq	lr, [r4], -r8
   15adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ae0:	mov	r6, r0
   15ae4:	sub	sp, sp, #44	; 0x2c
   15ae8:	ldr	r0, [r2]
   15aec:	mov	r5, r2
   15af0:	bl	1be10 <__assert_fail@plt+0x981c>
   15af4:	subs	r3, r0, #0
   15af8:	str	r3, [sp, #28]
   15afc:	bne	15c84 <__assert_fail@plt+0x3690>
   15b00:	ldr	r3, [pc, #772]	; 15e0c <__assert_fail@plt+0x3818>
   15b04:	ldr	r2, [r5, #144]	; 0x90
   15b08:	ldr	r3, [r3]
   15b0c:	cmp	r2, r3
   15b10:	bne	15df8 <__assert_fail@plt+0x3804>
   15b14:	ldr	r3, [sp, #28]
   15b18:	mov	r9, r3
   15b1c:	str	r3, [sp, #24]
   15b20:	str	r3, [sp, #36]	; 0x24
   15b24:	ldrb	r3, [r5, #40]	; 0x28
   15b28:	cmp	r3, #0
   15b2c:	str	r3, [sp, #32]
   15b30:	bne	15c1c <__assert_fail@plt+0x3628>
   15b34:	ldr	r3, [r5, #136]	; 0x88
   15b38:	cmp	r3, #0
   15b3c:	ble	15d4c <__assert_fail@plt+0x3758>
   15b40:	ldr	r4, [sp, #32]
   15b44:	add	r8, r5, #44	; 0x2c
   15b48:	add	r7, r5, #88	; 0x58
   15b4c:	ldr	r3, [r5, #132]	; 0x84
   15b50:	ldr	sl, [r3, r4, lsl #2]
   15b54:	add	r4, r4, #1
   15b58:	mov	r0, sl
   15b5c:	bl	12300 <strlen@plt>
   15b60:	mov	fp, r0
   15b64:	mov	r0, r6
   15b68:	bl	12300 <strlen@plt>
   15b6c:	mov	r1, #0
   15b70:	str	r1, [sp, #16]
   15b74:	ldr	r1, [sp, #24]
   15b78:	mov	r3, fp
   15b7c:	str	r1, [sp]
   15b80:	mov	r2, sl
   15b84:	str	r6, [sp, #8]
   15b88:	str	r9, [sp, #4]
   15b8c:	mov	r1, r7
   15b90:	str	r0, [sp, #12]
   15b94:	mov	r0, r8
   15b98:	bl	24148 <__assert_fail@plt+0x11b54>
   15b9c:	ldr	r3, [r5, #136]	; 0x88
   15ba0:	cmp	r3, r4
   15ba4:	bgt	15b4c <__assert_fail@plt+0x3558>
   15ba8:	mov	r1, r7
   15bac:	mov	r0, r8
   15bb0:	bl	243c8 <__assert_fail@plt+0x11dd4>
   15bb4:	ldr	r3, [r5, #148]	; 0x94
   15bb8:	tst	r3, #127	; 0x7f
   15bbc:	beq	15be4 <__assert_fail@plt+0x35f0>
   15bc0:	ldr	r3, [sp, #28]
   15bc4:	cmp	r3, #0
   15bc8:	bne	15c04 <__assert_fail@plt+0x3610>
   15bcc:	ldr	r3, [sp, #36]	; 0x24
   15bd0:	cmp	r3, #0
   15bd4:	bne	15de4 <__assert_fail@plt+0x37f0>
   15bd8:	ldr	r0, [sp, #32]
   15bdc:	add	sp, sp, #44	; 0x2c
   15be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15be4:	asr	r3, r3, #8
   15be8:	tst	r3, #255	; 0xff
   15bec:	moveq	r3, #1
   15bf0:	movne	r3, #0
   15bf4:	str	r3, [sp, #32]
   15bf8:	ldr	r3, [sp, #28]
   15bfc:	cmp	r3, #0
   15c00:	beq	15bcc <__assert_fail@plt+0x35d8>
   15c04:	ldr	r0, [r5, #144]	; 0x90
   15c08:	bl	34530 <__assert_fail@plt+0x21f3c>
   15c0c:	ldr	r3, [sp, #36]	; 0x24
   15c10:	cmp	r3, #0
   15c14:	bne	15c70 <__assert_fail@plt+0x367c>
   15c18:	b	15bd8 <__assert_fail@plt+0x35e4>
   15c1c:	mov	r0, r6
   15c20:	bl	12300 <strlen@plt>
   15c24:	ldr	r2, [sp, #24]
   15c28:	mov	r3, #0
   15c2c:	str	r2, [sp]
   15c30:	str	r3, [sp, #8]
   15c34:	str	r9, [sp, #4]
   15c38:	mov	r2, r6
   15c3c:	add	r1, r5, #88	; 0x58
   15c40:	add	r3, r0, #1
   15c44:	add	r0, r5, #44	; 0x2c
   15c48:	bl	23e9c <__assert_fail@plt+0x118a8>
   15c4c:	ldr	r3, [r5, #116]	; 0x74
   15c50:	cmp	r3, #0
   15c54:	bne	15d30 <__assert_fail@plt+0x373c>
   15c58:	ldr	r3, [sp, #36]	; 0x24
   15c5c:	cmp	r3, #0
   15c60:	beq	15bd8 <__assert_fail@plt+0x35e4>
   15c64:	ldr	r3, [sp, #28]
   15c68:	cmp	r3, #0
   15c6c:	beq	15de4 <__assert_fail@plt+0x37f0>
   15c70:	ldr	r0, [sp, #36]	; 0x24
   15c74:	bl	376d0 <__assert_fail@plt+0x250dc>
   15c78:	ldr	r0, [sp, #32]
   15c7c:	add	sp, sp, #44	; 0x2c
   15c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c84:	ldr	r7, [r5, #116]	; 0x74
   15c88:	ldr	r4, [pc, #384]	; 15e10 <__assert_fail@plt+0x381c>
   15c8c:	cmp	r7, #0
   15c90:	bne	15d04 <__assert_fail@plt+0x3710>
   15c94:	ldr	r8, [r4, #12]
   15c98:	mov	r1, #47	; 0x2f
   15c9c:	mov	r0, r8
   15ca0:	bl	1230c <strchr@plt>
   15ca4:	subs	r9, r0, #0
   15ca8:	beq	15d9c <__assert_fail@plt+0x37a8>
   15cac:	mov	r0, r8
   15cb0:	bl	26d60 <__assert_fail@plt+0x1476c>
   15cb4:	ldr	sl, [r4, #16]
   15cb8:	mov	r9, r0
   15cbc:	mov	r0, #8
   15cc0:	bl	3563c <__assert_fail@plt+0x23048>
   15cc4:	mov	r2, r7
   15cc8:	mov	r1, r9
   15ccc:	mov	r8, r0
   15cd0:	str	r0, [r5, #144]	; 0x90
   15cd4:	str	r7, [r8, #4]
   15cd8:	mov	r0, sl
   15cdc:	bl	2bb5c <__assert_fail@plt+0x19568>
   15ce0:	ldr	r3, [r5, #144]	; 0x90
   15ce4:	str	r0, [r8]
   15ce8:	ldr	r0, [r3]
   15cec:	cmp	r0, #0
   15cf0:	blt	15d58 <__assert_fail@plt+0x3764>
   15cf4:	mov	r1, #1
   15cf8:	bl	26a7c <__assert_fail@plt+0x14488>
   15cfc:	mov	r0, r9
   15d00:	bl	376d0 <__assert_fail@plt+0x250dc>
   15d04:	ldr	r0, [r4, #12]
   15d08:	bl	26c84 <__assert_fail@plt+0x14690>
   15d0c:	ldrb	r3, [r0]
   15d10:	str	r0, [sp, #36]	; 0x24
   15d14:	mov	r6, r0
   15d18:	cmp	r3, #47	; 0x2f
   15d1c:	beq	15d40 <__assert_fail@plt+0x374c>
   15d20:	ldr	r3, [pc, #236]	; 15e14 <__assert_fail@plt+0x3820>
   15d24:	mov	r9, #2
   15d28:	str	r3, [sp, #24]
   15d2c:	b	15b24 <__assert_fail@plt+0x3530>
   15d30:	ldr	r3, [pc, #216]	; 15e10 <__assert_fail@plt+0x381c>
   15d34:	mov	r2, #1
   15d38:	strb	r2, [r3, #32]
   15d3c:	b	15c58 <__assert_fail@plt+0x3664>
   15d40:	mov	r9, #0
   15d44:	str	r9, [sp, #24]
   15d48:	b	15b24 <__assert_fail@plt+0x3530>
   15d4c:	add	r7, r5, #88	; 0x58
   15d50:	add	r8, r5, #44	; 0x2c
   15d54:	b	15ba8 <__assert_fail@plt+0x35b4>
   15d58:	mov	r0, r9
   15d5c:	bl	376d0 <__assert_fail@plt+0x250dc>
   15d60:	bl	12348 <__errno_location@plt>
   15d64:	mov	r2, #5
   15d68:	ldr	r1, [pc, #168]	; 15e18 <__assert_fail@plt+0x3824>
   15d6c:	ldr	r4, [r0]
   15d70:	mov	r0, #0
   15d74:	bl	120b4 <dcgettext@plt>
   15d78:	mov	r1, r6
   15d7c:	mov	r5, r0
   15d80:	mov	r0, #0
   15d84:	bl	1be34 <__assert_fail@plt+0x9840>
   15d88:	mov	r2, r5
   15d8c:	mov	r1, r4
   15d90:	mov	r3, r0
   15d94:	mov	r0, #1
   15d98:	bl	121ec <error@plt>
   15d9c:	mov	r0, #8
   15da0:	ldr	r8, [r4, #16]
   15da4:	bl	3563c <__assert_fail@plt+0x23048>
   15da8:	mov	r2, r9
   15dac:	ldr	r1, [pc, #104]	; 15e1c <__assert_fail@plt+0x3828>
   15db0:	mov	r7, r0
   15db4:	str	r0, [r5, #144]	; 0x90
   15db8:	str	r9, [r7, #4]
   15dbc:	mov	r0, r8
   15dc0:	bl	2bb5c <__assert_fail@plt+0x19568>
   15dc4:	ldr	r3, [r5, #144]	; 0x90
   15dc8:	str	r0, [r7]
   15dcc:	ldr	r0, [r3]
   15dd0:	cmp	r0, #0
   15dd4:	blt	15d60 <__assert_fail@plt+0x376c>
   15dd8:	mov	r1, #1
   15ddc:	bl	26a7c <__assert_fail@plt+0x14488>
   15de0:	b	15d04 <__assert_fail@plt+0x3710>
   15de4:	ldr	r3, [pc, #52]	; 15e20 <__assert_fail@plt+0x382c>
   15de8:	mov	r2, #208	; 0xd0
   15dec:	ldr	r1, [pc, #48]	; 15e24 <__assert_fail@plt+0x3830>
   15df0:	ldr	r0, [pc, #48]	; 15e28 <__assert_fail@plt+0x3834>
   15df4:	bl	125f4 <__assert_fail@plt>
   15df8:	ldr	r3, [pc, #32]	; 15e20 <__assert_fail@plt+0x382c>
   15dfc:	mov	r2, #148	; 0x94
   15e00:	ldr	r1, [pc, #28]	; 15e24 <__assert_fail@plt+0x3830>
   15e04:	ldr	r0, [pc, #32]	; 15e2c <__assert_fail@plt+0x3838>
   15e08:	bl	125f4 <__assert_fail@plt>
   15e0c:	andeq	r4, r6, ip, ror #10
   15e10:	andeq	r4, r6, r0, asr #28
   15e14:			; <UNDEFINED> instruction: 0x0004e7b4
   15e18:			; <UNDEFINED> instruction: 0x0004e7b8
   15e1c:	andeq	r1, r5, r4, asr #17
   15e20:	muleq	r4, ip, r7
   15e24:	strdeq	lr, [r4], -ip
   15e28:	andeq	lr, r4, r8, lsr #16
   15e2c:	andeq	lr, r4, r4, lsl #16
   15e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e34:	mov	sl, r3
   15e38:	ldr	r9, [pc, #1056]	; 16260 <__assert_fail@plt+0x3c6c>
   15e3c:	sub	sp, sp, #28
   15e40:	mov	r5, r1
   15e44:	ldr	r3, [r9, #44]	; 0x2c
   15e48:	tst	r3, #32
   15e4c:	bne	15fdc <__assert_fail@plt+0x39e8>
   15e50:	ldr	r6, [pc, #1036]	; 16264 <__assert_fail@plt+0x3c70>
   15e54:	ldr	r3, [pc, #1036]	; 16268 <__assert_fail@plt+0x3c74>
   15e58:	ldr	r0, [r3]
   15e5c:	bl	37670 <__assert_fail@plt+0x2507c>
   15e60:	ldr	r0, [r6]
   15e64:	bl	37670 <__assert_fail@plt+0x2507c>
   15e68:	ldr	r3, [pc, #1020]	; 1626c <__assert_fail@plt+0x3c78>
   15e6c:	ldr	r2, [r3]
   15e70:	cmp	r2, #0
   15e74:	bne	15fc4 <__assert_fail@plt+0x39d0>
   15e78:	bl	12450 <fork@plt>
   15e7c:	cmn	r0, #1
   15e80:	mov	r7, r0
   15e84:	beq	16224 <__assert_fail@plt+0x3c30>
   15e88:	cmp	r0, #0
   15e8c:	bne	15f10 <__assert_fail@plt+0x391c>
   15e90:	ldr	r4, [r5, #104]	; 0x68
   15e94:	cmp	r4, #0
   15e98:	beq	1624c <__assert_fail@plt+0x3c58>
   15e9c:	ldrb	r3, [r5, #100]	; 0x64
   15ea0:	cmp	r3, #0
   15ea4:	bne	160a8 <__assert_fail@plt+0x3ab4>
   15ea8:	mov	r0, r4
   15eac:	bl	34514 <__assert_fail@plt+0x21f20>
   15eb0:	cmp	r0, #0
   15eb4:	bne	1617c <__assert_fail@plt+0x3b88>
   15eb8:	bl	12348 <__errno_location@plt>
   15ebc:	mov	r5, r0
   15ec0:	bl	253f4 <__assert_fail@plt+0x12e00>
   15ec4:	cmp	r0, #0
   15ec8:	bne	16174 <__assert_fail@plt+0x3b80>
   15ecc:	mov	r0, sl
   15ed0:	bl	24908 <__assert_fail@plt+0x12314>
   15ed4:	cmp	r0, #0
   15ed8:	beq	16160 <__assert_fail@plt+0x3b6c>
   15edc:	mov	r1, #7
   15ee0:	mov	r4, r1
   15ee4:	str	r1, [r5]
   15ee8:	ldr	r1, [sl]
   15eec:	mov	r0, #0
   15ef0:	bl	1be34 <__assert_fail@plt+0x9840>
   15ef4:	mov	r1, r4
   15ef8:	ldr	r2, [pc, #880]	; 16270 <__assert_fail@plt+0x3c7c>
   15efc:	mov	r3, r0
   15f00:	mov	r0, #0
   15f04:	bl	121ec <error@plt>
   15f08:	mov	r0, #1
   15f0c:	bl	12018 <_exit@plt>
   15f10:	add	fp, r5, #108	; 0x6c
   15f14:	mov	r8, #0
   15f18:	b	15f2c <__assert_fail@plt+0x3938>
   15f1c:	bl	12348 <__errno_location@plt>
   15f20:	ldr	r4, [r0]
   15f24:	cmp	r4, #4
   15f28:	bne	1605c <__assert_fail@plt+0x3a68>
   15f2c:	mov	r2, r8
   15f30:	mov	r1, fp
   15f34:	mov	r0, r7
   15f38:	bl	1218c <waitpid@plt>
   15f3c:	cmn	r0, #1
   15f40:	beq	15f1c <__assert_fail@plt+0x3928>
   15f44:	ldr	r2, [r5, #108]	; 0x6c
   15f48:	and	r3, r2, #127	; 0x7f
   15f4c:	add	r3, r3, #1
   15f50:	sxtb	r3, r3
   15f54:	cmp	r3, #1
   15f58:	ble	16138 <__assert_fail@plt+0x3b44>
   15f5c:	mov	r2, #5
   15f60:	ldr	r1, [pc, #780]	; 16274 <__assert_fail@plt+0x3c80>
   15f64:	mov	r0, #0
   15f68:	bl	120b4 <dcgettext@plt>
   15f6c:	ldr	r2, [sl]
   15f70:	ldr	r1, [r9, #72]	; 0x48
   15f74:	mov	r4, r0
   15f78:	mov	r0, #0
   15f7c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   15f80:	ldr	r3, [r5, #108]	; 0x6c
   15f84:	mov	r1, #0
   15f88:	and	r3, r3, #127	; 0x7f
   15f8c:	str	r3, [sp]
   15f90:	mov	r2, r4
   15f94:	mov	r3, r0
   15f98:	mov	r0, r1
   15f9c:	bl	121ec <error@plt>
   15fa0:	ldrb	r3, [r5]
   15fa4:	cmp	r3, #0
   15fa8:	beq	16154 <__assert_fail@plt+0x3b60>
   15fac:	ldr	r2, [pc, #708]	; 16278 <__assert_fail@plt+0x3c84>
   15fb0:	mov	r3, #1
   15fb4:	mov	r0, r3
   15fb8:	str	r3, [r2, #28]
   15fbc:	add	sp, sp, #28
   15fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fc4:	mov	r2, #0
   15fc8:	mov	r1, r2
   15fcc:	mov	r0, #17
   15fd0:	str	r2, [r3]
   15fd4:	bl	1206c <signal@plt>
   15fd8:	b	15e78 <__assert_fail@plt+0x3884>
   15fdc:	ldr	r2, [r1, #48]	; 0x30
   15fe0:	ldr	r6, [pc, #636]	; 16264 <__assert_fail@plt+0x3c70>
   15fe4:	subs	r2, r2, #1
   15fe8:	mov	r3, #0
   15fec:	sbc	r3, r3, #0
   15ff0:	ldr	r0, [r6]
   15ff4:	ldr	r1, [pc, #640]	; 1627c <__assert_fail@plt+0x3c88>
   15ff8:	bl	1233c <fprintf@plt>
   15ffc:	ldr	r3, [r5, #48]	; 0x30
   16000:	cmp	r3, #1
   16004:	beq	1604c <__assert_fail@plt+0x3a58>
   16008:	mov	r4, #0
   1600c:	ldr	r8, [pc, #620]	; 16280 <__assert_fail@plt+0x3c8c>
   16010:	mov	r7, r4
   16014:	ldr	r3, [r5, #52]	; 0x34
   16018:	mov	r0, r7
   1601c:	ldr	fp, [r6]
   16020:	ldr	r1, [r3, r4, lsl #2]
   16024:	bl	1be34 <__assert_fail@plt+0x9840>
   16028:	mov	r1, r8
   1602c:	add	r4, r4, #1
   16030:	mov	r2, r0
   16034:	mov	r0, fp
   16038:	bl	1233c <fprintf@plt>
   1603c:	ldr	r3, [r5, #48]	; 0x30
   16040:	sub	r3, r3, #1
   16044:	cmp	r3, r4
   16048:	bhi	16014 <__assert_fail@plt+0x3a20>
   1604c:	ldr	r1, [r6]
   16050:	mov	r0, #10
   16054:	bl	1248c <fputc@plt>
   16058:	b	15e54 <__assert_fail@plt+0x3860>
   1605c:	mov	r2, #5
   16060:	ldr	r1, [pc, #540]	; 16284 <__assert_fail@plt+0x3c90>
   16064:	mov	r0, #0
   16068:	bl	120b4 <dcgettext@plt>
   1606c:	ldr	r1, [sl]
   16070:	mov	r5, r0
   16074:	mov	r0, #0
   16078:	bl	1be34 <__assert_fail@plt+0x9840>
   1607c:	mov	r2, r5
   16080:	mov	r1, r4
   16084:	mov	r3, r0
   16088:	mov	r0, #0
   1608c:	bl	121ec <error@plt>
   16090:	ldr	r3, [pc, #480]	; 16278 <__assert_fail@plt+0x3c84>
   16094:	mov	r2, #1
   16098:	mov	r0, #0
   1609c:	str	r2, [r3, #28]
   160a0:	add	sp, sp, #28
   160a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160a8:	ldr	r2, [pc, #472]	; 16288 <__assert_fail@plt+0x3c94>
   160ac:	add	r3, sp, #12
   160b0:	ldm	r2, {r0, r1, r2}
   160b4:	stmia	r3!, {r0, r1}
   160b8:	mov	r0, r7
   160bc:	strh	r2, [r3]
   160c0:	bl	125ac <close@plt>
   160c4:	cmp	r0, #0
   160c8:	blt	1619c <__assert_fail@plt+0x3ba8>
   160cc:	mov	r1, #131072	; 0x20000
   160d0:	add	r0, sp, #12
   160d4:	bl	26e80 <__assert_fail@plt+0x1488c>
   160d8:	cmp	r0, #0
   160dc:	blt	161f4 <__assert_fail@plt+0x3c00>
   160e0:	bl	12348 <__errno_location@plt>
   160e4:	mov	r5, r0
   160e8:	mov	r0, r4
   160ec:	bl	34514 <__assert_fail@plt+0x21f20>
   160f0:	cmp	r0, #0
   160f4:	beq	15ec0 <__assert_fail@plt+0x38cc>
   160f8:	mov	r2, #5
   160fc:	ldr	r1, [pc, #392]	; 1628c <__assert_fail@plt+0x3c98>
   16100:	mov	r0, #0
   16104:	ldr	r5, [r5]
   16108:	bl	120b4 <dcgettext@plt>
   1610c:	ldr	r3, [r4]
   16110:	cmp	r3, #0
   16114:	mov	r2, r0
   16118:	blt	16188 <__assert_fail@plt+0x3b94>
   1611c:	ldr	r3, [pc, #364]	; 16290 <__assert_fail@plt+0x3c9c>
   16120:	mov	r1, r3
   16124:	str	r1, [sp]
   16128:	mov	r0, #0
   1612c:	mov	r1, r5
   16130:	bl	121ec <error@plt>
   16134:	b	15f08 <__assert_fail@plt+0x3914>
   16138:	ldr	r3, [r9, #44]	; 0x2c
   1613c:	asr	r2, r2, #8
   16140:	tst	r3, #32
   16144:	uxtb	r4, r2
   16148:	bne	161dc <__assert_fail@plt+0x3be8>
   1614c:	cmp	r4, #0
   16150:	bne	15fa0 <__assert_fail@plt+0x39ac>
   16154:	mov	r0, #1
   16158:	add	sp, sp, #28
   1615c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16160:	mov	r1, sl
   16164:	ldr	r0, [sl]
   16168:	bl	12030 <execvp@plt>
   1616c:	ldr	r4, [r5]
   16170:	b	15ee8 <__assert_fail@plt+0x38f4>
   16174:	bl	25410 <__assert_fail@plt+0x12e1c>
   16178:	b	15ecc <__assert_fail@plt+0x38d8>
   1617c:	bl	12348 <__errno_location@plt>
   16180:	mov	r5, r0
   16184:	b	160f8 <__assert_fail@plt+0x3b04>
   16188:	ldr	r1, [r4, #4]
   1618c:	cmp	r1, #0
   16190:	ldrne	r3, [pc, #252]	; 16294 <__assert_fail@plt+0x3ca0>
   16194:	bne	16124 <__assert_fail@plt+0x3b30>
   16198:	b	1611c <__assert_fail@plt+0x3b28>
   1619c:	bl	12348 <__errno_location@plt>
   161a0:	mov	r2, #5
   161a4:	ldr	r1, [pc, #236]	; 16298 <__assert_fail@plt+0x3ca4>
   161a8:	ldr	r6, [r0]
   161ac:	mov	r5, r0
   161b0:	mov	r0, r7
   161b4:	bl	120b4 <dcgettext@plt>
   161b8:	mov	r1, r6
   161bc:	mov	r2, r0
   161c0:	mov	r0, r7
   161c4:	bl	121ec <error@plt>
   161c8:	mov	r0, r4
   161cc:	bl	34514 <__assert_fail@plt+0x21f20>
   161d0:	cmp	r0, #0
   161d4:	beq	15f08 <__assert_fail@plt+0x3914>
   161d8:	b	160f8 <__assert_fail@plt+0x3b04>
   161dc:	mov	r2, r7
   161e0:	ldr	r0, [r6]
   161e4:	mov	r3, r4
   161e8:	ldr	r1, [pc, #172]	; 1629c <__assert_fail@plt+0x3ca8>
   161ec:	bl	1233c <fprintf@plt>
   161f0:	b	1614c <__assert_fail@plt+0x3b58>
   161f4:	bl	12348 <__errno_location@plt>
   161f8:	add	r1, sp, #12
   161fc:	ldr	r6, [r0]
   16200:	mov	r5, r0
   16204:	mov	r0, r7
   16208:	bl	1be34 <__assert_fail@plt+0x9840>
   1620c:	mov	r1, r6
   16210:	ldr	r2, [pc, #88]	; 16270 <__assert_fail@plt+0x3c7c>
   16214:	mov	r3, r0
   16218:	mov	r0, r7
   1621c:	bl	121ec <error@plt>
   16220:	b	160e8 <__assert_fail@plt+0x3af4>
   16224:	bl	12348 <__errno_location@plt>
   16228:	mov	r2, #5
   1622c:	ldr	r1, [pc, #108]	; 162a0 <__assert_fail@plt+0x3cac>
   16230:	ldr	r4, [r0]
   16234:	mov	r0, #0
   16238:	bl	120b4 <dcgettext@plt>
   1623c:	mov	r1, r4
   16240:	mov	r2, r0
   16244:	mov	r0, #1
   16248:	bl	121ec <error@plt>
   1624c:	ldr	r3, [pc, #80]	; 162a4 <__assert_fail@plt+0x3cb0>
   16250:	ldr	r2, [pc, #80]	; 162a8 <__assert_fail@plt+0x3cb4>
   16254:	ldr	r1, [pc, #80]	; 162ac <__assert_fail@plt+0x3cb8>
   16258:	ldr	r0, [pc, #80]	; 162b0 <__assert_fail@plt+0x3cbc>
   1625c:	bl	125f4 <__assert_fail@plt>
   16260:	andeq	r4, r6, ip, ror #28
   16264:	andeq	r4, r6, r8, asr #10
   16268:	andeq	r4, r6, r4, asr r5
   1626c:	muleq	r6, r8, r2
   16270:	andeq	r2, r5, r4, asr #9
   16274:	ldrdeq	lr, [r4], -r8
   16278:	andeq	r4, r6, r0, asr #28
   1627c:	andeq	lr, r4, r0, lsr r8
   16280:	andeq	r3, r5, r0, asr sp
   16284:	andeq	lr, r4, r0, asr #17
   16288:	andeq	lr, r4, r4, lsr r9
   1628c:	andeq	lr, r4, r0, lsr #17
   16290:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   16294:	andeq	r0, r5, ip, lsr #24
   16298:	andeq	lr, r4, r4, lsl #17
   1629c:	strdeq	lr, [r4], -r4
   162a0:	andeq	lr, r4, ip, asr r8
   162a4:	andeq	lr, r4, ip, lsr #15
   162a8:	andeq	r0, r0, r1, asr #2
   162ac:	strdeq	lr, [r4], -ip
   162b0:	andeq	lr, r4, r8, ror #16
   162b4:	push	{r4, r5, r6, r7, r8, lr}
   162b8:	ldr	r4, [r0]
   162bc:	cmp	r4, #0
   162c0:	beq	162fc <__assert_fail@plt+0x3d08>
   162c4:	ldr	r3, [r4, #8]
   162c8:	mov	r5, r0
   162cc:	mov	r6, r1
   162d0:	cmp	r3, #5
   162d4:	ldrls	pc, [pc, r3, lsl #2]
   162d8:	b	16418 <__assert_fail@plt+0x3e24>
   162dc:	strdeq	r6, [r1], -ip
   162e0:	andeq	r6, r1, ip, lsl r3
   162e4:	andeq	r6, r1, r0, asr #6
   162e8:	andeq	r6, r1, r0, ror #6
   162ec:	andeq	r6, r1, r4, lsl #7
   162f0:	ldrdeq	r6, [r1], -ip
   162f4:	cmp	r4, #0
   162f8:	bne	16338 <__assert_fail@plt+0x3d44>
   162fc:	ldr	r1, [pc, #600]	; 1655c <__assert_fail@plt+0x3f68>
   16300:	mov	r2, #5
   16304:	mov	r0, #0
   16308:	bl	120b4 <dcgettext@plt>
   1630c:	mov	r1, #0
   16310:	mov	r2, r0
   16314:	mov	r0, #1
   16318:	bl	121ec <error@plt>
   1631c:	ldr	r2, [r4, #152]	; 0x98
   16320:	str	r2, [r0]
   16324:	cmp	r2, #0
   16328:	beq	16338 <__assert_fail@plt+0x3d44>
   1632c:	ldr	r3, [r2, #12]
   16330:	cmp	r3, r6
   16334:	bgt	16424 <__assert_fail@plt+0x3e30>
   16338:	mov	r0, r4
   1633c:	pop	{r4, r5, r6, r7, r8, pc}
   16340:	ldr	r3, [r4, #152]	; 0x98
   16344:	mov	r2, r4
   16348:	str	r3, [r0]
   1634c:	mov	r1, #4
   16350:	bl	162b4 <__assert_fail@plt+0x3cc0>
   16354:	str	r0, [r4, #160]	; 0xa0
   16358:	ldr	r2, [r5]
   1635c:	b	16324 <__assert_fail@plt+0x3d30>
   16360:	ldr	r1, [pc, #504]	; 16560 <__assert_fail@plt+0x3f6c>
   16364:	mov	r2, #5
   16368:	mov	r0, #0
   1636c:	bl	120b4 <dcgettext@plt>
   16370:	ldr	r3, [r4, #4]
   16374:	mov	r1, #0
   16378:	mov	r2, r0
   1637c:	mov	r0, #1
   16380:	bl	121ec <error@plt>
   16384:	ldr	r3, [r4, #152]	; 0x98
   16388:	cmp	r3, #0
   1638c:	beq	16550 <__assert_fail@plt+0x3f5c>
   16390:	ldrb	r7, [r3, #33]	; 0x21
   16394:	cmp	r7, #0
   16398:	bne	16550 <__assert_fail@plt+0x3f5c>
   1639c:	ldr	r2, [r3, #8]
   163a0:	str	r3, [r0]
   163a4:	cmp	r2, #5
   163a8:	bne	16454 <__assert_fail@plt+0x3e60>
   163ac:	ldrb	r4, [r4, #33]	; 0x21
   163b0:	cmp	r4, #0
   163b4:	beq	164f4 <__assert_fail@plt+0x3f00>
   163b8:	ldr	r1, [pc, #420]	; 16564 <__assert_fail@plt+0x3f70>
   163bc:	mov	r0, r7
   163c0:	bl	120b4 <dcgettext@plt>
   163c4:	ldr	r3, [r5]
   163c8:	mov	r1, r7
   163cc:	ldr	r3, [r3, #4]
   163d0:	mov	r2, r0
   163d4:	mov	r0, #1
   163d8:	bl	121ec <error@plt>
   163dc:	cmp	r2, #0
   163e0:	mov	r7, r2
   163e4:	ldreq	r1, [pc, #376]	; 16564 <__assert_fail@plt+0x3f70>
   163e8:	moveq	r2, #5
   163ec:	beq	16368 <__assert_fail@plt+0x3d74>
   163f0:	ldr	r3, [r7, #8]
   163f4:	ldrb	r4, [r4, #33]	; 0x21
   163f8:	sub	r3, r3, #2
   163fc:	cmp	r3, #1
   16400:	bls	164fc <__assert_fail@plt+0x3f08>
   16404:	cmp	r4, #0
   16408:	bne	16490 <__assert_fail@plt+0x3e9c>
   1640c:	mov	r2, #5
   16410:	ldr	r1, [pc, #336]	; 16568 <__assert_fail@plt+0x3f74>
   16414:	b	16304 <__assert_fail@plt+0x3d10>
   16418:	mov	r2, #5
   1641c:	ldr	r1, [pc, #328]	; 1656c <__assert_fail@plt+0x3f78>
   16420:	b	16304 <__assert_fail@plt+0x3d10>
   16424:	ldr	r3, [r2, #8]
   16428:	cmp	r3, #5
   1642c:	beq	162fc <__assert_fail@plt+0x3d08>
   16430:	cmp	r3, #5
   16434:	ldrls	pc, [pc, r3, lsl #2]
   16438:	b	16528 <__assert_fail@plt+0x3f34>
   1643c:	strdeq	r6, [r1], -ip
   16440:	strdeq	r6, [r1], -ip
   16444:	strdeq	r6, [r1], -ip
   16448:			; <UNDEFINED> instruction: 0x000164b4
   1644c:	strdeq	r6, [r1], -ip
   16450:	strdeq	r6, [r1], -r4
   16454:	mov	r2, r4
   16458:	mov	r1, r7
   1645c:	bl	162b4 <__assert_fail@plt+0x3cc0>
   16460:	ldr	r3, [r5]
   16464:	cmp	r3, #0
   16468:	mov	r4, r0
   1646c:	beq	16484 <__assert_fail@plt+0x3e90>
   16470:	ldr	r2, [r3, #8]
   16474:	cmp	r2, #5
   16478:	ldreq	r2, [r3, #152]	; 0x98
   1647c:	streq	r2, [r5]
   16480:	beq	16324 <__assert_fail@plt+0x3d30>
   16484:	mov	r2, #5
   16488:	ldr	r1, [pc, #224]	; 16570 <__assert_fail@plt+0x3f7c>
   1648c:	b	16304 <__assert_fail@plt+0x3d10>
   16490:	mov	r2, #5
   16494:	ldr	r1, [pc, #216]	; 16574 <__assert_fail@plt+0x3f80>
   16498:	mov	r0, #0
   1649c:	bl	120b4 <dcgettext@plt>
   164a0:	ldr	r3, [r7, #4]
   164a4:	mov	r1, #0
   164a8:	mov	r2, r0
   164ac:	mov	r0, #1
   164b0:	bl	121ec <error@plt>
   164b4:	str	r4, [r2, #156]	; 0x9c
   164b8:	ldr	r4, [r5]
   164bc:	mov	r0, r5
   164c0:	ldr	r3, [r4, #152]	; 0x98
   164c4:	ldrsh	r1, [r4, #12]
   164c8:	str	r3, [r5]
   164cc:	bl	162b4 <__assert_fail@plt+0x3cc0>
   164d0:	str	r0, [r4, #160]	; 0xa0
   164d4:	ldr	r2, [r5]
   164d8:	cmp	r2, #0
   164dc:	beq	16338 <__assert_fail@plt+0x3d44>
   164e0:	ldr	r3, [r2, #12]
   164e4:	cmp	r6, r3
   164e8:	bge	16338 <__assert_fail@plt+0x3d44>
   164ec:	ldr	r3, [r2, #8]
   164f0:	b	16430 <__assert_fail@plt+0x3e3c>
   164f4:	ldr	r1, [pc, #124]	; 16578 <__assert_fail@plt+0x3f84>
   164f8:	b	16304 <__assert_fail@plt+0x3d10>
   164fc:	cmp	r4, #0
   16500:	bne	16490 <__assert_fail@plt+0x3e9c>
   16504:	mov	r2, #5
   16508:	ldr	r1, [pc, #108]	; 1657c <__assert_fail@plt+0x3f88>
   1650c:	mov	r0, r4
   16510:	bl	120b4 <dcgettext@plt>
   16514:	ldr	r3, [r7, #4]
   16518:	mov	r1, r4
   1651c:	mov	r2, r0
   16520:	mov	r0, #1
   16524:	bl	121ec <error@plt>
   16528:	mov	r2, #5
   1652c:	ldr	r1, [pc, #76]	; 16580 <__assert_fail@plt+0x3f8c>
   16530:	mov	r0, #0
   16534:	bl	120b4 <dcgettext@plt>
   16538:	ldr	r3, [r5]
   1653c:	mov	r1, #0
   16540:	ldr	r3, [r3, #8]
   16544:	mov	r2, r0
   16548:	mov	r0, #1
   1654c:	bl	121ec <error@plt>
   16550:	mov	r2, #5
   16554:	ldr	r1, [pc, #40]	; 16584 <__assert_fail@plt+0x3f90>
   16558:	b	16368 <__assert_fail@plt+0x3d74>
   1655c:			; <UNDEFINED> instruction: 0x0004e9b8
   16560:	andeq	lr, r4, ip, asr #19
   16564:	andeq	lr, r4, r0, lsr #20
   16568:			; <UNDEFINED> instruction: 0x0004eabc
   1656c:	andeq	lr, r4, r4, ror #23
   16570:	muleq	r4, r0, fp
   16574:	muleq	r4, r8, sl
   16578:	andeq	lr, r4, r8, asr fp
   1657c:	andeq	lr, r4, ip, ror #20
   16580:	andeq	lr, r4, r8, lsl #24
   16584:	andeq	lr, r4, r8, ror #21
   16588:	push	{lr}		; (str lr, [sp, #-4]!)
   1658c:	sub	sp, sp, #12
   16590:	ldr	r2, [r1]
   16594:	add	r1, sp, #8
   16598:	ldr	r3, [r0]
   1659c:	str	r2, [r1, #-4]!
   165a0:	mov	r0, sp
   165a4:	mov	r2, #4
   165a8:	str	r3, [sp]
   165ac:	bl	12084 <memcmp@plt>
   165b0:	add	sp, sp, #12
   165b4:	pop	{pc}		; (ldr pc, [sp], #4)
   165b8:	cmp	r0, #0
   165bc:	bxeq	lr
   165c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165c4:	sub	sp, sp, #20
   165c8:	mov	r4, r0
   165cc:	str	r0, [sp]
   165d0:	ldr	r0, [r0, #160]	; 0xa0
   165d4:	bl	165b8 <__assert_fail@plt+0x3fc4>
   165d8:	ldr	r0, [r4, #156]	; 0x9c
   165dc:	bl	165b8 <__assert_fail@plt+0x3fc4>
   165e0:	ldrb	r3, [r4, #18]
   165e4:	cmp	r3, #0
   165e8:	movne	r3, #3
   165ec:	strne	r3, [sp, #4]
   165f0:	beq	166c4 <__assert_fail@plt+0x40d0>
   165f4:	ldr	r3, [sp]
   165f8:	ldr	r2, [pc, #504]	; 167f8 <__assert_fail@plt+0x4204>
   165fc:	ldr	r9, [r3]
   16600:	ldr	r3, [pc, #500]	; 167fc <__assert_fail@plt+0x4208>
   16604:	cmp	r9, r3
   16608:	cmpne	r9, r2
   1660c:	beq	16710 <__assert_fail@plt+0x411c>
   16610:	ldr	r3, [pc, #488]	; 16800 <__assert_fail@plt+0x420c>
   16614:	cmp	r9, r3
   16618:	beq	16734 <__assert_fail@plt+0x4140>
   1661c:	ldr	r3, [pc, #480]	; 16804 <__assert_fail@plt+0x4210>
   16620:	ldr	r4, [r3]
   16624:	cmp	r4, #0
   16628:	beq	16740 <__assert_fail@plt+0x414c>
   1662c:	ldr	r5, [pc, #468]	; 16808 <__assert_fail@plt+0x4214>
   16630:	add	r8, sp, #12
   16634:	add	r7, sp, #8
   16638:	mov	sl, #59	; 0x3b
   1663c:	mov	r6, #0
   16640:	mov	fp, #4
   16644:	b	16658 <__assert_fail@plt+0x4064>
   16648:	beq	166f0 <__assert_fail@plt+0x40fc>
   1664c:	add	r6, r4, #1
   16650:	cmp	sl, r6
   16654:	bls	16694 <__assert_fail@plt+0x40a0>
   16658:	add	r4, r6, sl
   1665c:	mov	r2, fp
   16660:	lsr	r4, r4, #1
   16664:	mov	r1, r8
   16668:	ldr	r3, [r5, r4, lsl #3]
   1666c:	mov	r0, r7
   16670:	str	r9, [sp, #8]
   16674:	str	r3, [sp, #12]
   16678:	bl	12084 <memcmp@plt>
   1667c:	add	r2, r5, r4, lsl #3
   16680:	cmp	r0, #0
   16684:	bge	16648 <__assert_fail@plt+0x4054>
   16688:	mov	sl, r4
   1668c:	cmp	sl, r6
   16690:	bhi	16658 <__assert_fail@plt+0x4064>
   16694:	mov	r2, #5
   16698:	ldr	r1, [pc, #364]	; 1680c <__assert_fail@plt+0x4218>
   1669c:	mov	r0, #0
   166a0:	bl	120b4 <dcgettext@plt>
   166a4:	ldr	r3, [sp]
   166a8:	mov	r1, #0
   166ac:	ldr	r3, [r3, #4]
   166b0:	mov	r2, r0
   166b4:	mov	r0, r1
   166b8:	bl	121ec <error@plt>
   166bc:	mov	r3, #10
   166c0:	b	166f4 <__assert_fail@plt+0x4100>
   166c4:	ldrb	r3, [r4, #20]
   166c8:	cmp	r3, #0
   166cc:	movne	r3, #1
   166d0:	strne	r3, [sp, #4]
   166d4:	bne	165f4 <__assert_fail@plt+0x4000>
   166d8:	ldrb	r3, [r4, #19]
   166dc:	cmp	r3, #0
   166e0:	movne	r3, #2
   166e4:	moveq	r3, #0
   166e8:	str	r3, [sp, #4]
   166ec:	b	165f4 <__assert_fail@plt+0x4000>
   166f0:	ldr	r3, [r2, #4]
   166f4:	ldr	r2, [sp, #4]
   166f8:	cmp	r2, r3
   166fc:	movcs	r3, r2
   16700:	ldr	r2, [sp]
   16704:	str	r3, [r2, #24]
   16708:	add	sp, sp, #20
   1670c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16710:	ldr	r3, [sp]
   16714:	ldr	r2, [sp]
   16718:	ldrb	r3, [r3, #40]	; 0x28
   1671c:	cmp	r3, #0
   16720:	moveq	r3, #8
   16724:	movne	r3, #7
   16728:	str	r3, [r2, #24]
   1672c:	add	sp, sp, #20
   16730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16734:	ldr	r3, [sp]
   16738:	ldr	r3, [r3, #24]
   1673c:	b	166f4 <__assert_fail@plt+0x4100>
   16740:	ldr	r3, [pc, #200]	; 16810 <__assert_fail@plt+0x421c>
   16744:	mov	r2, #8
   16748:	mov	r1, #59	; 0x3b
   1674c:	ldr	r0, [pc, #180]	; 16808 <__assert_fail@plt+0x4214>
   16750:	bl	12510 <qsort@plt>
   16754:	ldr	r5, [pc, #172]	; 16808 <__assert_fail@plt+0x4214>
   16758:	add	r8, sp, #12
   1675c:	add	r7, sp, #8
   16760:	mov	r9, #4
   16764:	add	r3, r5, r4
   16768:	ldr	sl, [r5, r4]
   1676c:	ldr	r6, [r3, #8]
   16770:	mov	r2, r9
   16774:	mov	r1, r8
   16778:	mov	r0, r7
   1677c:	str	r6, [sp, #8]
   16780:	str	sl, [sp, #12]
   16784:	bl	12084 <memcmp@plt>
   16788:	cmp	r0, #0
   1678c:	blt	167d4 <__assert_fail@plt+0x41e0>
   16790:	mov	r2, r9
   16794:	mov	r1, r8
   16798:	mov	r0, r7
   1679c:	str	sl, [sp, #8]
   167a0:	str	r6, [sp, #12]
   167a4:	bl	12084 <memcmp@plt>
   167a8:	cmp	r0, #0
   167ac:	bgt	167e4 <__assert_fail@plt+0x41f0>
   167b0:	add	r4, r4, #8
   167b4:	cmp	r4, #464	; 0x1d0
   167b8:	bne	16764 <__assert_fail@plt+0x4170>
   167bc:	ldr	r2, [pc, #64]	; 16804 <__assert_fail@plt+0x4210>
   167c0:	mov	r3, #1
   167c4:	str	r3, [r2]
   167c8:	ldr	r3, [sp]
   167cc:	ldr	r9, [r3]
   167d0:	b	16638 <__assert_fail@plt+0x4044>
   167d4:	ldr	r2, [pc, #56]	; 16814 <__assert_fail@plt+0x4220>
   167d8:	mov	r1, #0
   167dc:	mov	r0, #1
   167e0:	bl	121ec <error@plt>
   167e4:	ldr	r3, [pc, #44]	; 16818 <__assert_fail@plt+0x4224>
   167e8:	ldr	r2, [pc, #44]	; 1681c <__assert_fail@plt+0x4228>
   167ec:	ldr	r1, [pc, #44]	; 16820 <__assert_fail@plt+0x422c>
   167f0:	ldr	r0, [pc, #44]	; 16824 <__assert_fail@plt+0x4230>
   167f4:	bl	125f4 <__assert_fail@plt>
   167f8:			; <UNDEFINED> instruction: 0x000142b4
   167fc:			; <UNDEFINED> instruction: 0x000142b8
   16800:	strheq	sp, [r1], -ip
   16804:	andeq	r4, r6, r0, ror r5
   16808:	muleq	r6, ip, r2
   1680c:	muleq	r4, r0, ip
   16810:	andeq	r6, r1, r8, lsl #11
   16814:	andeq	lr, r4, ip, ror #24
   16818:	andeq	lr, r4, r0, asr r9
   1681c:	strdeq	r0, [r0], -r5
   16820:	andeq	lr, r4, r0, lsr ip
   16824:	andeq	lr, r4, r0, ror #24
   16828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1682c:	mov	r3, r0
   16830:	sub	sp, sp, #12
   16834:	str	r0, [sp, #4]
   16838:	ldr	r5, [r3, #156]	; 0x9c
   1683c:	cmp	r5, #0
   16840:	beq	16974 <__assert_fail@plt+0x4380>
   16844:	ldr	r3, [r5, #8]
   16848:	cmp	r3, #3
   1684c:	bne	16990 <__assert_fail@plt+0x439c>
   16850:	ldr	r6, [r5, #156]	; 0x9c
   16854:	cmp	r6, #0
   16858:	beq	16968 <__assert_fail@plt+0x4374>
   1685c:	ldr	r3, [r6, #8]
   16860:	cmp	r3, #3
   16864:	bne	16990 <__assert_fail@plt+0x439c>
   16868:	ldr	r7, [r6, #156]	; 0x9c
   1686c:	cmp	r7, #0
   16870:	beq	1695c <__assert_fail@plt+0x4368>
   16874:	ldr	r3, [r7, #8]
   16878:	cmp	r3, #3
   1687c:	bne	16990 <__assert_fail@plt+0x439c>
   16880:	ldr	r8, [r7, #156]	; 0x9c
   16884:	cmp	r8, #0
   16888:	beq	16950 <__assert_fail@plt+0x435c>
   1688c:	ldr	r3, [r8, #8]
   16890:	cmp	r3, #3
   16894:	bne	16990 <__assert_fail@plt+0x439c>
   16898:	ldr	r9, [r8, #156]	; 0x9c
   1689c:	cmp	r9, #0
   168a0:	beq	16944 <__assert_fail@plt+0x4350>
   168a4:	ldr	r3, [r9, #8]
   168a8:	cmp	r3, #3
   168ac:	bne	16990 <__assert_fail@plt+0x439c>
   168b0:	ldr	sl, [r9, #156]	; 0x9c
   168b4:	cmp	sl, #0
   168b8:	beq	16938 <__assert_fail@plt+0x4344>
   168bc:	ldr	r3, [sl, #8]
   168c0:	cmp	r3, #3
   168c4:	bne	16990 <__assert_fail@plt+0x439c>
   168c8:	ldr	r4, [sl, #156]	; 0x9c
   168cc:	cmp	r4, #0
   168d0:	beq	1692c <__assert_fail@plt+0x4338>
   168d4:	ldr	r3, [r4, #8]
   168d8:	cmp	r3, #3
   168dc:	bne	16990 <__assert_fail@plt+0x439c>
   168e0:	ldr	fp, [r4, #156]	; 0x9c
   168e4:	cmp	fp, #0
   168e8:	beq	16920 <__assert_fail@plt+0x432c>
   168ec:	ldr	r2, [fp, #8]
   168f0:	cmp	r2, #3
   168f4:	bne	16990 <__assert_fail@plt+0x439c>
   168f8:	ldr	r0, [fp, #156]	; 0x9c
   168fc:	cmp	r0, #0
   16900:	beq	16914 <__assert_fail@plt+0x4320>
   16904:	ldr	r2, [r0, #8]
   16908:	cmp	r2, #3
   1690c:	bne	16990 <__assert_fail@plt+0x439c>
   16910:	bl	16828 <__assert_fail@plt+0x4234>
   16914:	ldr	fp, [fp, #160]	; 0xa0
   16918:	cmp	fp, #0
   1691c:	bne	168f8 <__assert_fail@plt+0x4304>
   16920:	ldr	r4, [r4, #160]	; 0xa0
   16924:	cmp	r4, #0
   16928:	bne	168e0 <__assert_fail@plt+0x42ec>
   1692c:	ldr	sl, [sl, #160]	; 0xa0
   16930:	cmp	sl, #0
   16934:	bne	168c8 <__assert_fail@plt+0x42d4>
   16938:	ldr	r9, [r9, #160]	; 0xa0
   1693c:	cmp	r9, #0
   16940:	bne	168b0 <__assert_fail@plt+0x42bc>
   16944:	ldr	r8, [r8, #160]	; 0xa0
   16948:	cmp	r8, #0
   1694c:	bne	16898 <__assert_fail@plt+0x42a4>
   16950:	ldr	r7, [r7, #160]	; 0xa0
   16954:	cmp	r7, #0
   16958:	bne	16880 <__assert_fail@plt+0x428c>
   1695c:	ldr	r6, [r6, #160]	; 0xa0
   16960:	cmp	r6, #0
   16964:	bne	16868 <__assert_fail@plt+0x4274>
   16968:	ldr	r5, [r5, #160]	; 0xa0
   1696c:	cmp	r5, #0
   16970:	bne	16850 <__assert_fail@plt+0x425c>
   16974:	ldr	r3, [sp, #4]
   16978:	ldr	r3, [r3, #160]	; 0xa0
   1697c:	cmp	r3, #0
   16980:	str	r3, [sp, #4]
   16984:	bne	16838 <__assert_fail@plt+0x4244>
   16988:	add	sp, sp, #12
   1698c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16990:	ldr	r3, [pc, #12]	; 169a4 <__assert_fail@plt+0x43b0>
   16994:	ldr	r2, [pc, #12]	; 169a8 <__assert_fail@plt+0x43b4>
   16998:	ldr	r1, [pc, #12]	; 169ac <__assert_fail@plt+0x43b8>
   1699c:	ldr	r0, [pc, #12]	; 169b0 <__assert_fail@plt+0x43bc>
   169a0:	bl	125f4 <__assert_fail@plt>
   169a4:	andeq	lr, r4, r0, ror #18
   169a8:	ldrdeq	r0, [r0], -r3
   169ac:	andeq	lr, r4, r0, lsr ip
   169b0:	andeq	lr, r4, r0, lsl #26
   169b4:	cmp	r1, #0
   169b8:	push	{r4, r5, r6, lr}
   169bc:	mov	r5, r0
   169c0:	beq	169d0 <__assert_fail@plt+0x43dc>
   169c4:	ldr	r3, [r0, #8]
   169c8:	cmp	r3, #3
   169cc:	bne	16a34 <__assert_fail@plt+0x4440>
   169d0:	ldr	r4, [r5, #156]	; 0x9c
   169d4:	cmp	r4, #0
   169d8:	beq	16a10 <__assert_fail@plt+0x441c>
   169dc:	ldr	r3, [r4, #8]
   169e0:	cmp	r3, #3
   169e4:	bne	16a20 <__assert_fail@plt+0x442c>
   169e8:	ldr	r0, [r4, #156]	; 0x9c
   169ec:	cmp	r0, #0
   169f0:	beq	16a04 <__assert_fail@plt+0x4410>
   169f4:	ldr	r3, [r0, #8]
   169f8:	cmp	r3, #3
   169fc:	bne	16a20 <__assert_fail@plt+0x442c>
   16a00:	bl	16828 <__assert_fail@plt+0x4234>
   16a04:	ldr	r4, [r4, #160]	; 0xa0
   16a08:	cmp	r4, #0
   16a0c:	bne	169e8 <__assert_fail@plt+0x43f4>
   16a10:	ldr	r5, [r5, #160]	; 0xa0
   16a14:	cmp	r5, #0
   16a18:	bne	169d0 <__assert_fail@plt+0x43dc>
   16a1c:	pop	{r4, r5, r6, pc}
   16a20:	ldr	r3, [pc, #32]	; 16a48 <__assert_fail@plt+0x4454>
   16a24:	ldr	r2, [pc, #32]	; 16a4c <__assert_fail@plt+0x4458>
   16a28:	ldr	r1, [pc, #32]	; 16a50 <__assert_fail@plt+0x445c>
   16a2c:	ldr	r0, [pc, #32]	; 16a54 <__assert_fail@plt+0x4460>
   16a30:	bl	125f4 <__assert_fail@plt>
   16a34:	ldr	r3, [pc, #12]	; 16a48 <__assert_fail@plt+0x4454>
   16a38:	ldr	r2, [pc, #24]	; 16a58 <__assert_fail@plt+0x4464>
   16a3c:	ldr	r1, [pc, #12]	; 16a50 <__assert_fail@plt+0x445c>
   16a40:	ldr	r0, [pc, #20]	; 16a5c <__assert_fail@plt+0x4468>
   16a44:	bl	125f4 <__assert_fail@plt>
   16a48:	andeq	lr, r4, r0, ror #18
   16a4c:	ldrdeq	r0, [r0], -r3
   16a50:	andeq	lr, r4, r0, lsr ip
   16a54:	andeq	lr, r4, r0, lsl #26
   16a58:	andeq	r0, r0, lr, asr #9
   16a5c:	andeq	lr, r4, r0, lsr #26
   16a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a64:	subs	r5, r0, #0
   16a68:	sub	sp, sp, #20
   16a6c:	moveq	r0, r5
   16a70:	beq	172f4 <__assert_fail@plt+0x4d00>
   16a74:	ldr	r4, [r5, #156]	; 0x9c
   16a78:	cmp	r4, #0
   16a7c:	beq	16e68 <__assert_fail@plt+0x4874>
   16a80:	ldr	r6, [r4, #156]	; 0x9c
   16a84:	cmp	r6, #0
   16a88:	beq	16ca0 <__assert_fail@plt+0x46ac>
   16a8c:	ldr	r8, [r6, #156]	; 0x9c
   16a90:	cmp	r8, #0
   16a94:	beq	16ba0 <__assert_fail@plt+0x45ac>
   16a98:	ldr	r9, [r8, #156]	; 0x9c
   16a9c:	cmp	r9, #0
   16aa0:	moveq	r7, r9
   16aa4:	beq	16af8 <__assert_fail@plt+0x4504>
   16aa8:	ldr	r7, [r9, #156]	; 0x9c
   16aac:	cmp	r7, #0
   16ab0:	beq	16adc <__assert_fail@plt+0x44e8>
   16ab4:	ldr	r0, [r7, #156]	; 0x9c
   16ab8:	bl	16a60 <__assert_fail@plt+0x446c>
   16abc:	mov	sl, r0
   16ac0:	ldr	r0, [r7, #160]	; 0xa0
   16ac4:	bl	16a60 <__assert_fail@plt+0x446c>
   16ac8:	ldr	r7, [r7, #24]
   16acc:	cmp	sl, r0
   16ad0:	movcs	r0, sl
   16ad4:	cmp	r0, r7
   16ad8:	movcs	r7, r0
   16adc:	ldr	r0, [r9, #160]	; 0xa0
   16ae0:	bl	16a60 <__assert_fail@plt+0x446c>
   16ae4:	ldr	r3, [r9, #24]
   16ae8:	cmp	r7, r3
   16aec:	movcc	r7, r3
   16af0:	cmp	r7, r0
   16af4:	movcc	r7, r0
   16af8:	ldr	fp, [r8, #160]	; 0xa0
   16afc:	cmp	fp, #0
   16b00:	moveq	r9, fp
   16b04:	beq	16b8c <__assert_fail@plt+0x4598>
   16b08:	ldr	sl, [fp, #156]	; 0x9c
   16b0c:	cmp	sl, #0
   16b10:	beq	16b3c <__assert_fail@plt+0x4548>
   16b14:	ldr	r0, [sl, #156]	; 0x9c
   16b18:	bl	16a60 <__assert_fail@plt+0x446c>
   16b1c:	mov	r9, r0
   16b20:	ldr	r0, [sl, #160]	; 0xa0
   16b24:	bl	16a60 <__assert_fail@plt+0x446c>
   16b28:	ldr	sl, [sl, #24]
   16b2c:	cmp	r9, r0
   16b30:	movcs	r0, r9
   16b34:	cmp	r0, sl
   16b38:	movcs	sl, r0
   16b3c:	ldr	r9, [fp, #160]	; 0xa0
   16b40:	cmp	r9, #0
   16b44:	beq	16b78 <__assert_fail@plt+0x4584>
   16b48:	ldr	r0, [r9, #156]	; 0x9c
   16b4c:	bl	16a60 <__assert_fail@plt+0x446c>
   16b50:	str	r0, [sp]
   16b54:	ldr	r0, [r9, #160]	; 0xa0
   16b58:	bl	16a60 <__assert_fail@plt+0x446c>
   16b5c:	ldr	r2, [sp]
   16b60:	ldr	r3, [r9, #24]
   16b64:	cmp	r2, r0
   16b68:	movcc	r9, r0
   16b6c:	movcs	r9, r2
   16b70:	cmp	r9, r3
   16b74:	movcc	r9, r3
   16b78:	ldr	r0, [fp, #24]
   16b7c:	cmp	sl, r0
   16b80:	movcs	r0, sl
   16b84:	cmp	r0, r9
   16b88:	movcs	r9, r0
   16b8c:	ldr	r8, [r8, #24]
   16b90:	cmp	r7, r8
   16b94:	movcs	r8, r7
   16b98:	cmp	r8, r9
   16b9c:	movcc	r8, r9
   16ba0:	ldr	sl, [r6, #160]	; 0xa0
   16ba4:	cmp	sl, #0
   16ba8:	moveq	r9, sl
   16bac:	beq	16c8c <__assert_fail@plt+0x4698>
   16bb0:	ldr	fp, [sl, #156]	; 0x9c
   16bb4:	cmp	fp, #0
   16bb8:	moveq	r7, fp
   16bbc:	beq	16c40 <__assert_fail@plt+0x464c>
   16bc0:	ldr	r7, [fp, #156]	; 0x9c
   16bc4:	cmp	r7, #0
   16bc8:	beq	16bf4 <__assert_fail@plt+0x4600>
   16bcc:	ldr	r0, [r7, #156]	; 0x9c
   16bd0:	bl	16a60 <__assert_fail@plt+0x446c>
   16bd4:	mov	r9, r0
   16bd8:	ldr	r0, [r7, #160]	; 0xa0
   16bdc:	bl	16a60 <__assert_fail@plt+0x446c>
   16be0:	ldr	r7, [r7, #24]
   16be4:	cmp	r9, r0
   16be8:	movcs	r0, r9
   16bec:	cmp	r0, r7
   16bf0:	movcs	r7, r0
   16bf4:	ldr	r9, [fp, #160]	; 0xa0
   16bf8:	cmp	r9, #0
   16bfc:	beq	16c2c <__assert_fail@plt+0x4638>
   16c00:	ldr	r0, [r9, #156]	; 0x9c
   16c04:	bl	16a60 <__assert_fail@plt+0x446c>
   16c08:	str	r0, [sp]
   16c0c:	ldr	r0, [r9, #160]	; 0xa0
   16c10:	bl	16a60 <__assert_fail@plt+0x446c>
   16c14:	ldr	r3, [sp]
   16c18:	ldr	r9, [r9, #24]
   16c1c:	cmp	r3, r0
   16c20:	movcs	r0, r3
   16c24:	cmp	r0, r9
   16c28:	movcs	r9, r0
   16c2c:	ldr	r0, [fp, #24]
   16c30:	cmp	r7, r0
   16c34:	movcc	r7, r0
   16c38:	cmp	r7, r9
   16c3c:	movcc	r7, r9
   16c40:	ldr	r9, [sl, #160]	; 0xa0
   16c44:	cmp	r9, #0
   16c48:	beq	16c78 <__assert_fail@plt+0x4684>
   16c4c:	ldr	r0, [r9, #156]	; 0x9c
   16c50:	bl	16a60 <__assert_fail@plt+0x446c>
   16c54:	mov	fp, r0
   16c58:	ldr	r0, [r9, #160]	; 0xa0
   16c5c:	bl	16a60 <__assert_fail@plt+0x446c>
   16c60:	ldr	r3, [r9, #24]
   16c64:	cmp	fp, r0
   16c68:	movcc	r9, r0
   16c6c:	movcs	r9, fp
   16c70:	cmp	r9, r3
   16c74:	movcc	r9, r3
   16c78:	ldr	sl, [sl, #24]
   16c7c:	cmp	r7, sl
   16c80:	movcc	r7, sl
   16c84:	cmp	r7, r9
   16c88:	movcs	r9, r7
   16c8c:	ldr	r6, [r6, #24]
   16c90:	cmp	r8, r6
   16c94:	movcs	r6, r8
   16c98:	cmp	r6, r9
   16c9c:	movcc	r6, r9
   16ca0:	ldr	r8, [r4, #160]	; 0xa0
   16ca4:	cmp	r8, #0
   16ca8:	moveq	r0, r8
   16cac:	beq	16e54 <__assert_fail@plt+0x4860>
   16cb0:	ldr	sl, [r8, #156]	; 0x9c
   16cb4:	cmp	sl, #0
   16cb8:	moveq	r7, sl
   16cbc:	beq	16d3c <__assert_fail@plt+0x4748>
   16cc0:	ldr	r7, [sl, #156]	; 0x9c
   16cc4:	cmp	r7, #0
   16cc8:	beq	16cf4 <__assert_fail@plt+0x4700>
   16ccc:	ldr	r0, [r7, #156]	; 0x9c
   16cd0:	bl	16a60 <__assert_fail@plt+0x446c>
   16cd4:	mov	r9, r0
   16cd8:	ldr	r0, [r7, #160]	; 0xa0
   16cdc:	bl	16a60 <__assert_fail@plt+0x446c>
   16ce0:	ldr	r7, [r7, #24]
   16ce4:	cmp	r9, r0
   16ce8:	movcs	r0, r9
   16cec:	cmp	r0, r7
   16cf0:	movcs	r7, r0
   16cf4:	ldr	r9, [sl, #160]	; 0xa0
   16cf8:	cmp	r9, #0
   16cfc:	beq	16d28 <__assert_fail@plt+0x4734>
   16d00:	ldr	r0, [r9, #156]	; 0x9c
   16d04:	bl	16a60 <__assert_fail@plt+0x446c>
   16d08:	mov	fp, r0
   16d0c:	ldr	r0, [r9, #160]	; 0xa0
   16d10:	bl	16a60 <__assert_fail@plt+0x446c>
   16d14:	ldr	r9, [r9, #24]
   16d18:	cmp	fp, r0
   16d1c:	movcs	r0, fp
   16d20:	cmp	r0, r9
   16d24:	movcs	r9, r0
   16d28:	ldr	r0, [sl, #24]
   16d2c:	cmp	r7, r0
   16d30:	movcc	r7, r0
   16d34:	cmp	r7, r9
   16d38:	movcc	r7, r9
   16d3c:	ldr	sl, [r8, #160]	; 0xa0
   16d40:	cmp	sl, #0
   16d44:	moveq	r9, sl
   16d48:	beq	16e40 <__assert_fail@plt+0x484c>
   16d4c:	ldr	r2, [sl, #156]	; 0x9c
   16d50:	cmp	r2, #0
   16d54:	moveq	fp, r2
   16d58:	beq	16df0 <__assert_fail@plt+0x47fc>
   16d5c:	ldr	r9, [r2, #156]	; 0x9c
   16d60:	cmp	r9, #0
   16d64:	beq	16d98 <__assert_fail@plt+0x47a4>
   16d68:	ldr	r0, [r9, #156]	; 0x9c
   16d6c:	str	r2, [sp]
   16d70:	bl	16a60 <__assert_fail@plt+0x446c>
   16d74:	mov	fp, r0
   16d78:	ldr	r0, [r9, #160]	; 0xa0
   16d7c:	bl	16a60 <__assert_fail@plt+0x446c>
   16d80:	ldr	r9, [r9, #24]
   16d84:	ldr	r2, [sp]
   16d88:	cmp	fp, r0
   16d8c:	movcs	r0, fp
   16d90:	cmp	r0, r9
   16d94:	movcs	r9, r0
   16d98:	ldr	fp, [r2, #160]	; 0xa0
   16d9c:	cmp	fp, #0
   16da0:	beq	16ddc <__assert_fail@plt+0x47e8>
   16da4:	ldr	r0, [fp, #156]	; 0x9c
   16da8:	str	r2, [sp, #4]
   16dac:	bl	16a60 <__assert_fail@plt+0x446c>
   16db0:	str	r0, [sp]
   16db4:	ldr	r0, [fp, #160]	; 0xa0
   16db8:	bl	16a60 <__assert_fail@plt+0x446c>
   16dbc:	ldr	r1, [sp]
   16dc0:	ldr	r3, [fp, #24]
   16dc4:	ldr	r2, [sp, #4]
   16dc8:	cmp	r1, r0
   16dcc:	movcc	fp, r0
   16dd0:	movcs	fp, r1
   16dd4:	cmp	fp, r3
   16dd8:	movcc	fp, r3
   16ddc:	ldr	r0, [r2, #24]
   16de0:	cmp	r9, r0
   16de4:	movcs	r0, r9
   16de8:	cmp	r0, fp
   16dec:	movcs	fp, r0
   16df0:	ldr	r9, [sl, #160]	; 0xa0
   16df4:	cmp	r9, #0
   16df8:	beq	16e2c <__assert_fail@plt+0x4838>
   16dfc:	ldr	r0, [r9, #156]	; 0x9c
   16e00:	bl	16a60 <__assert_fail@plt+0x446c>
   16e04:	str	r0, [sp]
   16e08:	ldr	r0, [r9, #160]	; 0xa0
   16e0c:	bl	16a60 <__assert_fail@plt+0x446c>
   16e10:	ldr	r2, [sp]
   16e14:	ldr	r3, [r9, #24]
   16e18:	cmp	r2, r0
   16e1c:	movcc	r9, r0
   16e20:	movcs	r9, r2
   16e24:	cmp	r9, r3
   16e28:	movcc	r9, r3
   16e2c:	ldr	r0, [sl, #24]
   16e30:	cmp	fp, r0
   16e34:	movcs	r0, fp
   16e38:	cmp	r0, r9
   16e3c:	movcs	r9, r0
   16e40:	ldr	r0, [r8, #24]
   16e44:	cmp	r7, r0
   16e48:	movcs	r0, r7
   16e4c:	cmp	r0, r9
   16e50:	movcc	r0, r9
   16e54:	ldr	r4, [r4, #24]
   16e58:	cmp	r6, r4
   16e5c:	movcs	r4, r6
   16e60:	cmp	r4, r0
   16e64:	movcc	r4, r0
   16e68:	ldr	r7, [r5, #160]	; 0xa0
   16e6c:	cmp	r7, #0
   16e70:	beq	172e0 <__assert_fail@plt+0x4cec>
   16e74:	ldr	r6, [r7, #156]	; 0x9c
   16e78:	cmp	r6, #0
   16e7c:	beq	17094 <__assert_fail@plt+0x4aa0>
   16e80:	ldr	sl, [r6, #156]	; 0x9c
   16e84:	cmp	sl, #0
   16e88:	moveq	r8, sl
   16e8c:	beq	16f0c <__assert_fail@plt+0x4918>
   16e90:	ldr	r8, [sl, #156]	; 0x9c
   16e94:	cmp	r8, #0
   16e98:	beq	16ec4 <__assert_fail@plt+0x48d0>
   16e9c:	ldr	r0, [r8, #156]	; 0x9c
   16ea0:	bl	16a60 <__assert_fail@plt+0x446c>
   16ea4:	mov	r9, r0
   16ea8:	ldr	r0, [r8, #160]	; 0xa0
   16eac:	bl	16a60 <__assert_fail@plt+0x446c>
   16eb0:	ldr	r8, [r8, #24]
   16eb4:	cmp	r9, r0
   16eb8:	movcs	r0, r9
   16ebc:	cmp	r0, r8
   16ec0:	movcs	r8, r0
   16ec4:	ldr	r9, [sl, #160]	; 0xa0
   16ec8:	cmp	r9, #0
   16ecc:	beq	16ef8 <__assert_fail@plt+0x4904>
   16ed0:	ldr	r0, [r9, #156]	; 0x9c
   16ed4:	bl	16a60 <__assert_fail@plt+0x446c>
   16ed8:	mov	fp, r0
   16edc:	ldr	r0, [r9, #160]	; 0xa0
   16ee0:	bl	16a60 <__assert_fail@plt+0x446c>
   16ee4:	ldr	r9, [r9, #24]
   16ee8:	cmp	fp, r0
   16eec:	movcs	r0, fp
   16ef0:	cmp	r0, r9
   16ef4:	movcs	r9, r0
   16ef8:	ldr	r0, [sl, #24]
   16efc:	cmp	r8, r0
   16f00:	movcc	r8, r0
   16f04:	cmp	r8, r9
   16f08:	movcc	r8, r9
   16f0c:	ldr	fp, [r6, #160]	; 0xa0
   16f10:	cmp	fp, #0
   16f14:	beq	17080 <__assert_fail@plt+0x4a8c>
   16f18:	ldr	r3, [fp, #156]	; 0x9c
   16f1c:	cmp	r3, #0
   16f20:	moveq	r9, r3
   16f24:	beq	16fb8 <__assert_fail@plt+0x49c4>
   16f28:	ldr	r9, [r3, #156]	; 0x9c
   16f2c:	cmp	r9, #0
   16f30:	beq	16f64 <__assert_fail@plt+0x4970>
   16f34:	ldr	r0, [r9, #156]	; 0x9c
   16f38:	str	r3, [sp]
   16f3c:	bl	16a60 <__assert_fail@plt+0x446c>
   16f40:	mov	sl, r0
   16f44:	ldr	r0, [r9, #160]	; 0xa0
   16f48:	bl	16a60 <__assert_fail@plt+0x446c>
   16f4c:	ldr	r9, [r9, #24]
   16f50:	ldr	r3, [sp]
   16f54:	cmp	sl, r0
   16f58:	movcs	r0, sl
   16f5c:	cmp	r0, r9
   16f60:	movcs	r9, r0
   16f64:	ldr	sl, [r3, #160]	; 0xa0
   16f68:	cmp	sl, #0
   16f6c:	beq	16fa4 <__assert_fail@plt+0x49b0>
   16f70:	ldr	r0, [sl, #156]	; 0x9c
   16f74:	str	r3, [sp, #4]
   16f78:	bl	16a60 <__assert_fail@plt+0x446c>
   16f7c:	str	r0, [sp]
   16f80:	ldr	r0, [sl, #160]	; 0xa0
   16f84:	bl	16a60 <__assert_fail@plt+0x446c>
   16f88:	ldr	r2, [sp]
   16f8c:	ldr	sl, [sl, #24]
   16f90:	ldr	r3, [sp, #4]
   16f94:	cmp	r2, r0
   16f98:	movcs	r0, r2
   16f9c:	cmp	r0, sl
   16fa0:	movcs	sl, r0
   16fa4:	ldr	r0, [r3, #24]
   16fa8:	cmp	r9, r0
   16fac:	movcc	r9, r0
   16fb0:	cmp	r9, sl
   16fb4:	movcc	r9, sl
   16fb8:	ldr	r2, [fp, #160]	; 0xa0
   16fbc:	cmp	r2, #0
   16fc0:	moveq	r3, r2
   16fc4:	beq	1706c <__assert_fail@plt+0x4a78>
   16fc8:	ldr	sl, [r2, #156]	; 0x9c
   16fcc:	cmp	sl, #0
   16fd0:	streq	sl, [sp]
   16fd4:	beq	17010 <__assert_fail@plt+0x4a1c>
   16fd8:	ldr	r0, [sl, #156]	; 0x9c
   16fdc:	str	r2, [sp, #4]
   16fe0:	bl	16a60 <__assert_fail@plt+0x446c>
   16fe4:	str	r0, [sp]
   16fe8:	ldr	r0, [sl, #160]	; 0xa0
   16fec:	bl	16a60 <__assert_fail@plt+0x446c>
   16ff0:	ldr	r1, [sp]
   16ff4:	ldr	r3, [sl, #24]
   16ff8:	ldr	r2, [sp, #4]
   16ffc:	cmp	r1, r0
   17000:	movcs	r0, r1
   17004:	cmp	r0, r3
   17008:	movcs	r3, r0
   1700c:	str	r3, [sp]
   17010:	ldr	sl, [r2, #160]	; 0xa0
   17014:	cmp	sl, #0
   17018:	moveq	r3, sl
   1701c:	beq	17054 <__assert_fail@plt+0x4a60>
   17020:	ldr	r0, [sl, #156]	; 0x9c
   17024:	str	r2, [sp, #8]
   17028:	bl	16a60 <__assert_fail@plt+0x446c>
   1702c:	str	r0, [sp, #4]
   17030:	ldr	r0, [sl, #160]	; 0xa0
   17034:	bl	16a60 <__assert_fail@plt+0x446c>
   17038:	ldr	r1, [sp, #4]
   1703c:	ldr	r3, [sl, #24]
   17040:	ldr	r2, [sp, #8]
   17044:	cmp	r1, r0
   17048:	movcs	r0, r1
   1704c:	cmp	r0, r3
   17050:	movcs	r3, r0
   17054:	ldr	r2, [r2, #24]
   17058:	ldr	r1, [sp]
   1705c:	cmp	r1, r2
   17060:	movcs	r2, r1
   17064:	cmp	r2, r3
   17068:	movcs	r3, r2
   1706c:	ldr	fp, [fp, #24]
   17070:	cmp	r9, fp
   17074:	movcs	fp, r9
   17078:	cmp	fp, r3
   1707c:	movcc	fp, r3
   17080:	ldr	r6, [r6, #24]
   17084:	cmp	r8, r6
   17088:	movcs	r6, r8
   1708c:	cmp	r6, fp
   17090:	movcc	r6, fp
   17094:	ldr	sl, [r7, #160]	; 0xa0
   17098:	cmp	sl, #0
   1709c:	beq	172cc <__assert_fail@plt+0x4cd8>
   170a0:	ldr	r8, [sl, #156]	; 0x9c
   170a4:	cmp	r8, #0
   170a8:	streq	r8, [sp]
   170ac:	beq	171a8 <__assert_fail@plt+0x4bb4>
   170b0:	ldr	r2, [r8, #156]	; 0x9c
   170b4:	cmp	r2, #0
   170b8:	moveq	fp, r2
   170bc:	beq	17154 <__assert_fail@plt+0x4b60>
   170c0:	ldr	fp, [r2, #156]	; 0x9c
   170c4:	cmp	fp, #0
   170c8:	beq	170fc <__assert_fail@plt+0x4b08>
   170cc:	ldr	r0, [fp, #156]	; 0x9c
   170d0:	str	r2, [sp]
   170d4:	bl	16a60 <__assert_fail@plt+0x446c>
   170d8:	mov	r9, r0
   170dc:	ldr	r0, [fp, #160]	; 0xa0
   170e0:	bl	16a60 <__assert_fail@plt+0x446c>
   170e4:	ldr	fp, [fp, #24]
   170e8:	ldr	r2, [sp]
   170ec:	cmp	r9, r0
   170f0:	movcs	r0, r9
   170f4:	cmp	r0, fp
   170f8:	movcs	fp, r0
   170fc:	ldr	r9, [r2, #160]	; 0xa0
   17100:	cmp	r9, #0
   17104:	beq	17140 <__assert_fail@plt+0x4b4c>
   17108:	ldr	r0, [r9, #156]	; 0x9c
   1710c:	str	r2, [sp, #4]
   17110:	bl	16a60 <__assert_fail@plt+0x446c>
   17114:	str	r0, [sp]
   17118:	ldr	r0, [r9, #160]	; 0xa0
   1711c:	bl	16a60 <__assert_fail@plt+0x446c>
   17120:	ldr	r1, [sp]
   17124:	ldr	r3, [r9, #24]
   17128:	ldr	r2, [sp, #4]
   1712c:	cmp	r1, r0
   17130:	movcc	r9, r0
   17134:	movcs	r9, r1
   17138:	cmp	r9, r3
   1713c:	movcc	r9, r3
   17140:	ldr	r0, [r2, #24]
   17144:	cmp	fp, r0
   17148:	movcc	fp, r0
   1714c:	cmp	fp, r9
   17150:	movcc	fp, r9
   17154:	ldr	r9, [r8, #160]	; 0xa0
   17158:	cmp	r9, #0
   1715c:	beq	1718c <__assert_fail@plt+0x4b98>
   17160:	ldr	r0, [r9, #156]	; 0x9c
   17164:	bl	16a60 <__assert_fail@plt+0x446c>
   17168:	str	r0, [sp]
   1716c:	ldr	r0, [r9, #160]	; 0xa0
   17170:	bl	16a60 <__assert_fail@plt+0x446c>
   17174:	ldr	r3, [sp]
   17178:	ldr	r9, [r9, #24]
   1717c:	cmp	r3, r0
   17180:	movcs	r0, r3
   17184:	cmp	r0, r9
   17188:	movcs	r9, r0
   1718c:	ldr	r8, [r8, #24]
   17190:	cmp	fp, r8
   17194:	movcs	r8, fp
   17198:	cmp	r8, r9
   1719c:	movcs	r3, r8
   171a0:	movcc	r3, r9
   171a4:	str	r3, [sp]
   171a8:	ldr	r8, [sl, #160]	; 0xa0
   171ac:	cmp	r8, #0
   171b0:	moveq	r3, r8
   171b4:	beq	172b4 <__assert_fail@plt+0x4cc0>
   171b8:	ldr	r9, [r8, #156]	; 0x9c
   171bc:	cmp	r9, #0
   171c0:	beq	171ec <__assert_fail@plt+0x4bf8>
   171c4:	ldr	r0, [r9, #156]	; 0x9c
   171c8:	bl	16a60 <__assert_fail@plt+0x446c>
   171cc:	mov	fp, r0
   171d0:	ldr	r0, [r9, #160]	; 0xa0
   171d4:	bl	16a60 <__assert_fail@plt+0x446c>
   171d8:	ldr	r9, [r9, #24]
   171dc:	cmp	fp, r0
   171e0:	movcs	r0, fp
   171e4:	cmp	r0, r9
   171e8:	movcs	r9, r0
   171ec:	ldr	r1, [r8, #160]	; 0xa0
   171f0:	cmp	r1, #0
   171f4:	beq	172a0 <__assert_fail@plt+0x4cac>
   171f8:	ldr	fp, [r1, #156]	; 0x9c
   171fc:	cmp	fp, #0
   17200:	streq	fp, [sp, #4]
   17204:	beq	17244 <__assert_fail@plt+0x4c50>
   17208:	ldr	r0, [fp, #156]	; 0x9c
   1720c:	str	r1, [sp, #8]
   17210:	bl	16a60 <__assert_fail@plt+0x446c>
   17214:	str	r0, [sp, #4]
   17218:	ldr	r0, [fp, #160]	; 0xa0
   1721c:	bl	16a60 <__assert_fail@plt+0x446c>
   17220:	ldr	r3, [sp, #4]
   17224:	ldr	r2, [fp, #24]
   17228:	ldr	r1, [sp, #8]
   1722c:	cmp	r3, r0
   17230:	movcs	r0, r3
   17234:	cmp	r0, r2
   17238:	movcs	r3, r0
   1723c:	movcc	r3, r2
   17240:	str	r3, [sp, #4]
   17244:	ldr	fp, [r1, #160]	; 0xa0
   17248:	cmp	fp, #0
   1724c:	moveq	r2, fp
   17250:	beq	17288 <__assert_fail@plt+0x4c94>
   17254:	ldr	r0, [fp, #156]	; 0x9c
   17258:	str	r1, [sp, #12]
   1725c:	bl	16a60 <__assert_fail@plt+0x446c>
   17260:	str	r0, [sp, #8]
   17264:	ldr	r0, [fp, #160]	; 0xa0
   17268:	bl	16a60 <__assert_fail@plt+0x446c>
   1726c:	ldr	r3, [sp, #8]
   17270:	ldr	r2, [fp, #24]
   17274:	ldr	r1, [sp, #12]
   17278:	cmp	r3, r0
   1727c:	movcs	r0, r3
   17280:	cmp	r0, r2
   17284:	movcs	r2, r0
   17288:	ldr	r1, [r1, #24]
   1728c:	ldr	r3, [sp, #4]
   17290:	cmp	r3, r1
   17294:	movcs	r1, r3
   17298:	cmp	r1, r2
   1729c:	movcc	r1, r2
   172a0:	ldr	r3, [r8, #24]
   172a4:	cmp	r9, r3
   172a8:	movcs	r3, r9
   172ac:	cmp	r3, r1
   172b0:	movcc	r3, r1
   172b4:	ldr	sl, [sl, #24]
   172b8:	ldr	r2, [sp]
   172bc:	cmp	r2, sl
   172c0:	movcs	sl, r2
   172c4:	cmp	sl, r3
   172c8:	movcc	sl, r3
   172cc:	ldr	r7, [r7, #24]
   172d0:	cmp	r6, r7
   172d4:	movcs	r7, r6
   172d8:	cmp	r7, sl
   172dc:	movcc	r7, sl
   172e0:	ldr	r0, [r5, #24]
   172e4:	cmp	r4, r0
   172e8:	movcs	r0, r4
   172ec:	cmp	r0, r7
   172f0:	movcc	r0, r7
   172f4:	add	sp, sp, #20
   172f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172fc:	push	{r4, r5, r6, lr}
   17300:	subs	r4, r0, #0
   17304:	beq	17358 <__assert_fail@plt+0x4d64>
   17308:	ldrb	r0, [r4, #16]
   1730c:	cmp	r0, #0
   17310:	popne	{r4, r5, r6, pc}
   17314:	ldr	r5, [r4, #156]	; 0x9c
   17318:	cmp	r5, #0
   1731c:	beq	1734c <__assert_fail@plt+0x4d58>
   17320:	ldrb	r0, [r5, #16]
   17324:	cmp	r0, #0
   17328:	popne	{r4, r5, r6, pc}
   1732c:	ldr	r0, [r5, #156]	; 0x9c
   17330:	bl	172fc <__assert_fail@plt+0x4d08>
   17334:	cmp	r0, #0
   17338:	popne	{r4, r5, r6, pc}
   1733c:	ldr	r0, [r5, #160]	; 0xa0
   17340:	bl	172fc <__assert_fail@plt+0x4d08>
   17344:	cmp	r0, #0
   17348:	popne	{r4, r5, r6, pc}
   1734c:	ldr	r0, [r4, #160]	; 0xa0
   17350:	bl	172fc <__assert_fail@plt+0x4d08>
   17354:	pop	{r4, r5, r6, pc}
   17358:	mov	r0, r4
   1735c:	pop	{r4, r5, r6, pc}
   17360:	push	{r4, r5, r6, r7, r8, lr}
   17364:	cmp	r1, #0
   17368:	ldr	r5, [pc, #112]	; 173e0 <__assert_fail@plt+0x4dec>
   1736c:	movne	r6, #16
   17370:	moveq	r6, #0
   17374:	ldr	r3, [r5, #4]
   17378:	cmp	r3, #0
   1737c:	beq	173c8 <__assert_fail@plt+0x4dd4>
   17380:	mov	r7, r0
   17384:	mov	r4, #0
   17388:	b	17398 <__assert_fail@plt+0x4da4>
   1738c:	ldr	r3, [r5, #4]
   17390:	cmp	r3, r4
   17394:	bls	173c0 <__assert_fail@plt+0x4dcc>
   17398:	ldr	r3, [r5, #8]
   1739c:	mov	r2, r6
   173a0:	mov	r0, r7
   173a4:	ldr	r1, [r3, r4, lsl #2]
   173a8:	bl	12210 <fnmatch@plt>
   173ac:	add	r4, r4, #1
   173b0:	cmp	r0, #0
   173b4:	bne	1738c <__assert_fail@plt+0x4d98>
   173b8:	mov	r0, #1
   173bc:	pop	{r4, r5, r6, r7, r8, pc}
   173c0:	mov	r0, #0
   173c4:	pop	{r4, r5, r6, r7, r8, pc}
   173c8:	mov	r2, r6
   173cc:	ldr	r1, [pc, #16]	; 173e4 <__assert_fail@plt+0x4df0>
   173d0:	bl	12210 <fnmatch@plt>
   173d4:	clz	r0, r0
   173d8:	lsr	r0, r0, #5
   173dc:	pop	{r4, r5, r6, r7, r8, pc}
   173e0:	andeq	r4, r6, r0, ror r5
   173e4:	andeq	r1, r5, r4, asr #17
   173e8:	mov	r2, r1
   173ec:	mov	r1, r0
   173f0:	ldr	r3, [r2, #36]	; 0x24
   173f4:	cmp	r3, #0
   173f8:	beq	17408 <__assert_fail@plt+0x4e14>
   173fc:	ldr	r2, [r2, #4]
   17400:	ldr	r1, [pc, #8]	; 17410 <__assert_fail@plt+0x4e1c>
   17404:	b	1233c <fprintf@plt>
   17408:	ldr	r0, [r2, #4]
   1740c:	b	12588 <fputs@plt>
   17410:	andeq	lr, r4, r4, lsr sp
   17414:	ldr	r3, [pc, #4]	; 17420 <__assert_fail@plt+0x4e2c>
   17418:	ldr	r0, [r3, #12]
   1741c:	bx	lr
   17420:	andeq	r4, r6, r0, ror r5
   17424:	push	{r4, r5, r6, lr}
   17428:	subs	r5, r0, #0
   1742c:	beq	1791c <__assert_fail@plt+0x5328>
   17430:	ldr	r4, [r5, #160]	; 0xa0
   17434:	cmp	r4, #0
   17438:	beq	174f0 <__assert_fail@plt+0x4efc>
   1743c:	ldr	r0, [r4, #160]	; 0xa0
   17440:	cmp	r0, #0
   17444:	beq	1744c <__assert_fail@plt+0x4e58>
   17448:	bl	17424 <__assert_fail@plt+0x4e30>
   1744c:	ldr	r0, [r4, #156]	; 0x9c
   17450:	cmp	r0, #0
   17454:	beq	1745c <__assert_fail@plt+0x4e68>
   17458:	bl	17424 <__assert_fail@plt+0x4e30>
   1745c:	ldr	r3, [r4, #8]
   17460:	cmp	r3, #5
   17464:	beq	17890 <__assert_fail@plt+0x529c>
   17468:	cmp	r3, #4
   1746c:	beq	17908 <__assert_fail@plt+0x5314>
   17470:	cmp	r3, #3
   17474:	ldrls	pc, [pc, r3, lsl #2]
   17478:	b	175e0 <__assert_fail@plt+0x4fec>
   1747c:	ldrdeq	r7, [r1], -ip
   17480:	andeq	r7, r1, r8, lsl #14
   17484:	andeq	r7, r1, r4, lsr #14
   17488:	andeq	r7, r1, ip, lsl #9
   1748c:	ldr	r3, [r4]
   17490:	ldr	r2, [pc, #1044]	; 178ac <__assert_fail@plt+0x52b8>
   17494:	cmp	r3, r2
   17498:	beq	17828 <__assert_fail@plt+0x5234>
   1749c:	ldr	r2, [pc, #1036]	; 178b0 <__assert_fail@plt+0x52bc>
   174a0:	cmp	r3, r2
   174a4:	beq	17880 <__assert_fail@plt+0x528c>
   174a8:	ldr	r2, [pc, #1028]	; 178b4 <__assert_fail@plt+0x52c0>
   174ac:	cmp	r3, r2
   174b0:	bne	17980 <__assert_fail@plt+0x538c>
   174b4:	ldr	r3, [r4, #160]	; 0xa0
   174b8:	cmp	r3, #0
   174bc:	vldrne	s14, [r3, #28]
   174c0:	ldr	r3, [r4, #156]	; 0x9c
   174c4:	vldreq	s14, [pc, #984]	; 178a4 <__assert_fail@plt+0x52b0>
   174c8:	cmp	r3, #0
   174cc:	vldrne	s15, [r3, #28]
   174d0:	vldreq	s15, [pc, #972]	; 178a4 <__assert_fail@plt+0x52b0>
   174d4:	vadd.f32	s15, s15, s14
   174d8:	vldr	s14, [pc, #964]	; 178a4 <__assert_fail@plt+0x52b0>
   174dc:	vcmpe.f32	s15, s14
   174e0:	vmrs	APSR_nzcv, fpscr
   174e4:	vmovgt.f32	s15, s14
   174e8:	ble	177d8 <__assert_fail@plt+0x51e4>
   174ec:	vstr	s15, [r4, #28]
   174f0:	ldr	r4, [r5, #156]	; 0x9c
   174f4:	cmp	r4, #0
   174f8:	beq	175b0 <__assert_fail@plt+0x4fbc>
   174fc:	ldr	r0, [r4, #160]	; 0xa0
   17500:	cmp	r0, #0
   17504:	beq	1750c <__assert_fail@plt+0x4f18>
   17508:	bl	17424 <__assert_fail@plt+0x4e30>
   1750c:	ldr	r0, [r4, #156]	; 0x9c
   17510:	cmp	r0, #0
   17514:	beq	1751c <__assert_fail@plt+0x4f28>
   17518:	bl	17424 <__assert_fail@plt+0x4e30>
   1751c:	ldr	r3, [r4, #8]
   17520:	cmp	r3, #5
   17524:	beq	17890 <__assert_fail@plt+0x529c>
   17528:	cmp	r3, #4
   1752c:	beq	17908 <__assert_fail@plt+0x5314>
   17530:	cmp	r3, #3
   17534:	ldrls	pc, [pc, r3, lsl #2]
   17538:	b	175e0 <__assert_fail@plt+0x4fec>
   1753c:	andeq	r7, r1, r8, asr r7
   17540:	andeq	r7, r1, r4, ror r7
   17544:	muleq	r1, r0, r7
   17548:	andeq	r7, r1, ip, asr #10
   1754c:	ldr	r3, [r4]
   17550:	ldr	r2, [pc, #852]	; 178ac <__assert_fail@plt+0x52b8>
   17554:	cmp	r3, r2
   17558:	beq	17858 <__assert_fail@plt+0x5264>
   1755c:	ldr	r2, [pc, #844]	; 178b0 <__assert_fail@plt+0x52bc>
   17560:	cmp	r3, r2
   17564:	beq	17888 <__assert_fail@plt+0x5294>
   17568:	ldr	r2, [pc, #836]	; 178b4 <__assert_fail@plt+0x52c0>
   1756c:	cmp	r3, r2
   17570:	bne	17980 <__assert_fail@plt+0x538c>
   17574:	ldr	r3, [r4, #160]	; 0xa0
   17578:	cmp	r3, #0
   1757c:	vldrne	s14, [r3, #28]
   17580:	ldr	r3, [r4, #156]	; 0x9c
   17584:	vldreq	s14, [pc, #792]	; 178a4 <__assert_fail@plt+0x52b0>
   17588:	cmp	r3, #0
   1758c:	vldrne	s15, [r3, #28]
   17590:	vldreq	s15, [pc, #780]	; 178a4 <__assert_fail@plt+0x52b0>
   17594:	vadd.f32	s15, s15, s14
   17598:	vldr	s14, [pc, #772]	; 178a4 <__assert_fail@plt+0x52b0>
   1759c:	vcmpe.f32	s15, s14
   175a0:	vmrs	APSR_nzcv, fpscr
   175a4:	vmovgt.f32	s15, s14
   175a8:	ble	177ec <__assert_fail@plt+0x51f8>
   175ac:	vstr	s15, [r4, #28]
   175b0:	ldr	r3, [r5, #8]
   175b4:	cmp	r3, #5
   175b8:	beq	17890 <__assert_fail@plt+0x529c>
   175bc:	cmp	r3, #4
   175c0:	beq	17908 <__assert_fail@plt+0x5314>
   175c4:	cmp	r3, #3
   175c8:	ldrls	pc, [pc, r3, lsl #2]
   175cc:	b	175e0 <__assert_fail@plt+0x4fec>
   175d0:	andeq	r7, r1, ip, asr r6
   175d4:	andeq	r7, r1, ip, ror r6
   175d8:	andeq	r7, r1, r8, lsr #13
   175dc:	strdeq	r7, [r1], -r4
   175e0:	ldr	r3, [pc, #792]	; 17900 <__assert_fail@plt+0x530c>
   175e4:	mov	r2, #1216	; 0x4c0
   175e8:	ldr	r1, [pc, #788]	; 17904 <__assert_fail@plt+0x5310>
   175ec:	ldr	r0, [pc, #776]	; 178fc <__assert_fail@plt+0x5308>
   175f0:	bl	125f4 <__assert_fail@plt>
   175f4:	ldr	r3, [r5]
   175f8:	ldr	r2, [pc, #684]	; 178ac <__assert_fail@plt+0x52b8>
   175fc:	cmp	r3, r2
   17600:	beq	17800 <__assert_fail@plt+0x520c>
   17604:	ldr	r2, [pc, #676]	; 178b0 <__assert_fail@plt+0x52bc>
   17608:	cmp	r3, r2
   1760c:	beq	17850 <__assert_fail@plt+0x525c>
   17610:	ldr	r2, [pc, #668]	; 178b4 <__assert_fail@plt+0x52c0>
   17614:	cmp	r3, r2
   17618:	bne	17980 <__assert_fail@plt+0x538c>
   1761c:	ldr	r3, [r5, #160]	; 0xa0
   17620:	cmp	r3, #0
   17624:	vldrne	s15, [r3, #28]
   17628:	ldr	r3, [r5, #156]	; 0x9c
   1762c:	vldreq	s15, [pc, #624]	; 178a4 <__assert_fail@plt+0x52b0>
   17630:	cmp	r3, #0
   17634:	vldrne	s0, [r3, #28]
   17638:	vldreq	s0, [pc, #612]	; 178a4 <__assert_fail@plt+0x52b0>
   1763c:	vadd.f32	s0, s0, s15
   17640:	vldr	s15, [pc, #604]	; 178a4 <__assert_fail@plt+0x52b0>
   17644:	vcmpe.f32	s0, s15
   17648:	vmrs	APSR_nzcv, fpscr
   1764c:	vmovgt.f32	s0, s15
   17650:	ble	177c4 <__assert_fail@plt+0x51d0>
   17654:	vstr	s0, [r5, #28]
   17658:	pop	{r4, r5, r6, pc}
   1765c:	ldr	r3, [r5, #160]	; 0xa0
   17660:	cmp	r3, #0
   17664:	bne	17958 <__assert_fail@plt+0x5364>
   17668:	ldr	r3, [r5, #156]	; 0x9c
   1766c:	cmp	r3, #0
   17670:	bne	176f4 <__assert_fail@plt+0x5100>
   17674:	vldr	s0, [r5, #28]
   17678:	pop	{r4, r5, r6, pc}
   1767c:	ldr	r3, [r5, #160]	; 0xa0
   17680:	cmp	r3, #0
   17684:	bne	1796c <__assert_fail@plt+0x5378>
   17688:	ldr	r3, [r5, #156]	; 0x9c
   1768c:	cmp	r3, #0
   17690:	beq	17674 <__assert_fail@plt+0x5080>
   17694:	ldr	r3, [pc, #612]	; 17900 <__assert_fail@plt+0x530c>
   17698:	ldr	r2, [pc, #536]	; 178b8 <__assert_fail@plt+0x52c4>
   1769c:	ldr	r1, [pc, #608]	; 17904 <__assert_fail@plt+0x5310>
   176a0:	ldr	r0, [pc, #564]	; 178dc <__assert_fail@plt+0x52e8>
   176a4:	bl	125f4 <__assert_fail@plt>
   176a8:	ldr	r3, [pc, #524]	; 178bc <__assert_fail@plt+0x52c8>
   176ac:	ldr	r2, [r5]
   176b0:	cmp	r2, r3
   176b4:	bne	17944 <__assert_fail@plt+0x5350>
   176b8:	ldr	r3, [r5, #156]	; 0x9c
   176bc:	cmp	r3, #0
   176c0:	bne	17930 <__assert_fail@plt+0x533c>
   176c4:	ldr	r3, [r5, #160]	; 0xa0
   176c8:	vldr	s0, [pc, #468]	; 178a4 <__assert_fail@plt+0x52b0>
   176cc:	vldr	s15, [r3, #28]
   176d0:	vsub.f32	s0, s0, s15
   176d4:	vstr	s0, [r5, #28]
   176d8:	pop	{r4, r5, r6, pc}
   176dc:	ldr	r3, [r4, #160]	; 0xa0
   176e0:	cmp	r3, #0
   176e4:	bne	17958 <__assert_fail@plt+0x5364>
   176e8:	ldr	r3, [r4, #156]	; 0x9c
   176ec:	cmp	r3, #0
   176f0:	beq	174f0 <__assert_fail@plt+0x4efc>
   176f4:	ldr	r3, [pc, #516]	; 17900 <__assert_fail@plt+0x530c>
   176f8:	ldr	r2, [pc, #448]	; 178c0 <__assert_fail@plt+0x52cc>
   176fc:	ldr	r1, [pc, #512]	; 17904 <__assert_fail@plt+0x5310>
   17700:	ldr	r0, [pc, #468]	; 178dc <__assert_fail@plt+0x52e8>
   17704:	bl	125f4 <__assert_fail@plt>
   17708:	ldr	r3, [r4, #160]	; 0xa0
   1770c:	cmp	r3, #0
   17710:	bne	1796c <__assert_fail@plt+0x5378>
   17714:	ldr	r3, [r4, #156]	; 0x9c
   17718:	cmp	r3, #0
   1771c:	beq	174f0 <__assert_fail@plt+0x4efc>
   17720:	b	17694 <__assert_fail@plt+0x50a0>
   17724:	ldr	r3, [pc, #400]	; 178bc <__assert_fail@plt+0x52c8>
   17728:	ldr	r2, [r4]
   1772c:	cmp	r2, r3
   17730:	bne	17944 <__assert_fail@plt+0x5350>
   17734:	ldr	r3, [r4, #156]	; 0x9c
   17738:	cmp	r3, #0
   1773c:	bne	17930 <__assert_fail@plt+0x533c>
   17740:	ldr	r3, [r4, #160]	; 0xa0
   17744:	vldr	s15, [pc, #344]	; 178a4 <__assert_fail@plt+0x52b0>
   17748:	vldr	s14, [r3, #28]
   1774c:	vsub.f32	s15, s15, s14
   17750:	vstr	s15, [r4, #28]
   17754:	b	174f0 <__assert_fail@plt+0x4efc>
   17758:	ldr	r3, [r4, #160]	; 0xa0
   1775c:	cmp	r3, #0
   17760:	bne	17958 <__assert_fail@plt+0x5364>
   17764:	ldr	r3, [r4, #156]	; 0x9c
   17768:	cmp	r3, #0
   1776c:	beq	175b0 <__assert_fail@plt+0x4fbc>
   17770:	b	176f4 <__assert_fail@plt+0x5100>
   17774:	ldr	r3, [r4, #160]	; 0xa0
   17778:	cmp	r3, #0
   1777c:	bne	1796c <__assert_fail@plt+0x5378>
   17780:	ldr	r3, [r4, #156]	; 0x9c
   17784:	cmp	r3, #0
   17788:	beq	175b0 <__assert_fail@plt+0x4fbc>
   1778c:	b	17694 <__assert_fail@plt+0x50a0>
   17790:	ldr	r3, [pc, #292]	; 178bc <__assert_fail@plt+0x52c8>
   17794:	ldr	r2, [r4]
   17798:	cmp	r2, r3
   1779c:	bne	17944 <__assert_fail@plt+0x5350>
   177a0:	ldr	r3, [r4, #156]	; 0x9c
   177a4:	cmp	r3, #0
   177a8:	bne	17930 <__assert_fail@plt+0x533c>
   177ac:	ldr	r3, [r4, #160]	; 0xa0
   177b0:	vldr	s15, [pc, #236]	; 178a4 <__assert_fail@plt+0x52b0>
   177b4:	vldr	s14, [r3, #28]
   177b8:	vsub.f32	s15, s15, s14
   177bc:	vstr	s15, [r4, #28]
   177c0:	b	175b0 <__assert_fail@plt+0x4fbc>
   177c4:	vldr	s15, [pc, #220]	; 178a8 <__assert_fail@plt+0x52b4>
   177c8:	vcmp.f32	s0, s15
   177cc:	vmrs	APSR_nzcv, fpscr
   177d0:	vmovmi.f32	s0, s15
   177d4:	b	17654 <__assert_fail@plt+0x5060>
   177d8:	vldr	s14, [pc, #200]	; 178a8 <__assert_fail@plt+0x52b4>
   177dc:	vcmp.f32	s15, s14
   177e0:	vmrs	APSR_nzcv, fpscr
   177e4:	vmovmi.f32	s15, s14
   177e8:	b	174ec <__assert_fail@plt+0x4ef8>
   177ec:	vldr	s14, [pc, #180]	; 178a8 <__assert_fail@plt+0x52b4>
   177f0:	vcmp.f32	s15, s14
   177f4:	vmrs	APSR_nzcv, fpscr
   177f8:	vmovmi.f32	s15, s14
   177fc:	b	175ac <__assert_fail@plt+0x4fb8>
   17800:	ldr	r3, [r5, #160]	; 0xa0
   17804:	cmp	r3, #0
   17808:	vldrne	s0, [r3, #28]
   1780c:	ldr	r3, [r5, #156]	; 0x9c
   17810:	vldreq	s0, [pc, #140]	; 178a4 <__assert_fail@plt+0x52b0>
   17814:	cmp	r3, #0
   17818:	vldrne	s15, [r3, #28]
   1781c:	vldreq	s15, [pc, #128]	; 178a4 <__assert_fail@plt+0x52b0>
   17820:	vmul.f32	s0, s0, s15
   17824:	b	17640 <__assert_fail@plt+0x504c>
   17828:	ldr	r3, [r4, #160]	; 0xa0
   1782c:	cmp	r3, #0
   17830:	vldrne	s15, [r3, #28]
   17834:	ldr	r3, [r4, #156]	; 0x9c
   17838:	vldreq	s15, [pc, #100]	; 178a4 <__assert_fail@plt+0x52b0>
   1783c:	cmp	r3, #0
   17840:	vldrne	s14, [r3, #28]
   17844:	vldreq	s14, [pc, #88]	; 178a4 <__assert_fail@plt+0x52b0>
   17848:	vmul.f32	s15, s15, s14
   1784c:	b	174d8 <__assert_fail@plt+0x4ee4>
   17850:	vldr	s0, [pc, #76]	; 178a4 <__assert_fail@plt+0x52b0>
   17854:	b	17654 <__assert_fail@plt+0x5060>
   17858:	ldr	r3, [r4, #160]	; 0xa0
   1785c:	cmp	r3, #0
   17860:	vldrne	s15, [r3, #28]
   17864:	ldr	r3, [r4, #156]	; 0x9c
   17868:	vldreq	s15, [pc, #52]	; 178a4 <__assert_fail@plt+0x52b0>
   1786c:	cmp	r3, #0
   17870:	vldrne	s14, [r3, #28]
   17874:	vldreq	s14, [pc, #40]	; 178a4 <__assert_fail@plt+0x52b0>
   17878:	vmul.f32	s15, s15, s14
   1787c:	b	17598 <__assert_fail@plt+0x4fa4>
   17880:	vldr	s15, [pc, #28]	; 178a4 <__assert_fail@plt+0x52b0>
   17884:	b	174ec <__assert_fail@plt+0x4ef8>
   17888:	vldr	s15, [pc, #20]	; 178a4 <__assert_fail@plt+0x52b0>
   1788c:	b	175ac <__assert_fail@plt+0x4fb8>
   17890:	ldr	r3, [pc, #104]	; 17900 <__assert_fail@plt+0x530c>
   17894:	ldr	r2, [pc, #40]	; 178c4 <__assert_fail@plt+0x52d0>
   17898:	ldr	r1, [pc, #100]	; 17904 <__assert_fail@plt+0x5310>
   1789c:	ldr	r0, [pc, #36]	; 178c8 <__assert_fail@plt+0x52d4>
   178a0:	bl	125f4 <__assert_fail@plt>
   178a4:	svccc	0x00800000
   178a8:	andeq	r0, r0, r0
   178ac:	andeq	r3, r1, r4, ror r9
   178b0:	andeq	r3, r1, r4, lsl #29
   178b4:			; <UNDEFINED> instruction: 0x000139b4
   178b8:	muleq	r0, r7, r4
   178bc:	andeq	r4, r1, r0, lsr #19
   178c0:	muleq	r0, r2, r4
   178c4:	andeq	r0, r0, fp, lsl #9
   178c8:	andeq	lr, r4, r8, asr #26
   178cc:	andeq	r0, r0, ip, lsl #9
   178d0:	andeq	lr, r4, r4, ror #26
   178d4:	andeq	r0, r0, r4, lsl #9
   178d8:	andeq	lr, r4, ip, lsr sp
   178dc:	muleq	r4, r4, sp
   178e0:	muleq	r0, ip, r4
   178e4:	andeq	lr, r4, ip, lsr #27
   178e8:	muleq	r0, sp, r4
   178ec:	muleq	r0, r1, r4
   178f0:	muleq	r0, r6, r4
   178f4:	andeq	lr, r4, ip, ror sp
   178f8:			; <UNDEFINED> instruction: 0x000004b4
   178fc:	andeq	r2, r5, r8, lsl r6
   17900:	andeq	lr, r4, r4, ror r9
   17904:	andeq	lr, r4, r0, lsr ip
   17908:	ldr	r3, [pc, #-16]	; 17900 <__assert_fail@plt+0x530c>
   1790c:	ldr	r2, [pc, #-72]	; 178cc <__assert_fail@plt+0x52d8>
   17910:	ldr	r1, [pc, #-20]	; 17904 <__assert_fail@plt+0x5310>
   17914:	ldr	r0, [pc, #-76]	; 178d0 <__assert_fail@plt+0x52dc>
   17918:	bl	125f4 <__assert_fail@plt>
   1791c:	ldr	r3, [pc, #-36]	; 17900 <__assert_fail@plt+0x530c>
   17920:	ldr	r2, [pc, #-84]	; 178d4 <__assert_fail@plt+0x52e0>
   17924:	ldr	r1, [pc, #-40]	; 17904 <__assert_fail@plt+0x5310>
   17928:	ldr	r0, [pc, #-88]	; 178d8 <__assert_fail@plt+0x52e4>
   1792c:	bl	125f4 <__assert_fail@plt>
   17930:	ldr	r3, [pc, #-56]	; 17900 <__assert_fail@plt+0x530c>
   17934:	ldr	r2, [pc, #-84]	; 178e8 <__assert_fail@plt+0x52f4>
   17938:	ldr	r1, [pc, #-60]	; 17904 <__assert_fail@plt+0x5310>
   1793c:	ldr	r0, [pc, #-104]	; 178dc <__assert_fail@plt+0x52e8>
   17940:	bl	125f4 <__assert_fail@plt>
   17944:	ldr	r3, [pc, #-76]	; 17900 <__assert_fail@plt+0x530c>
   17948:	ldr	r2, [pc, #-112]	; 178e0 <__assert_fail@plt+0x52ec>
   1794c:	ldr	r1, [pc, #-80]	; 17904 <__assert_fail@plt+0x5310>
   17950:	ldr	r0, [pc, #-116]	; 178e4 <__assert_fail@plt+0x52f0>
   17954:	bl	125f4 <__assert_fail@plt>
   17958:	ldr	r3, [pc, #-96]	; 17900 <__assert_fail@plt+0x530c>
   1795c:	ldr	r2, [pc, #-120]	; 178ec <__assert_fail@plt+0x52f8>
   17960:	ldr	r1, [pc, #-100]	; 17904 <__assert_fail@plt+0x5310>
   17964:	ldr	r0, [pc, #-120]	; 178f4 <__assert_fail@plt+0x5300>
   17968:	bl	125f4 <__assert_fail@plt>
   1796c:	ldr	r3, [pc, #-116]	; 17900 <__assert_fail@plt+0x530c>
   17970:	ldr	r2, [pc, #-136]	; 178f0 <__assert_fail@plt+0x52fc>
   17974:	ldr	r1, [pc, #-120]	; 17904 <__assert_fail@plt+0x5310>
   17978:	ldr	r0, [pc, #-140]	; 178f4 <__assert_fail@plt+0x5300>
   1797c:	bl	125f4 <__assert_fail@plt>
   17980:	ldr	r3, [pc, #-136]	; 17900 <__assert_fail@plt+0x530c>
   17984:	ldr	r2, [pc, #-148]	; 178f8 <__assert_fail@plt+0x5304>
   17988:	ldr	r1, [pc, #-140]	; 17904 <__assert_fail@plt+0x5310>
   1798c:	ldr	r0, [pc, #-152]	; 178fc <__assert_fail@plt+0x5308>
   17990:	bl	125f4 <__assert_fail@plt>
   17994:	ldr	r3, [r0]
   17998:	push	{r4, r6, r7, lr}
   1799c:	cmp	r3, #0
   179a0:	beq	17a20 <__assert_fail@plt+0x542c>
   179a4:	cmp	r3, #2
   179a8:	beq	17a34 <__assert_fail@plt+0x5440>
   179ac:	mov	r4, r0
   179b0:	mov	r0, #176	; 0xb0
   179b4:	bl	35b50 <__assert_fail@plt+0x2355c>
   179b8:	ldr	r3, [pc, #120]	; 17a38 <__assert_fail@plt+0x5444>
   179bc:	mov	r6, #0
   179c0:	mov	r7, #0
   179c4:	ldr	r2, [r3, #16]
   179c8:	mov	ip, #1065353216	; 0x3f800000
   179cc:	cmp	r2, #0
   179d0:	mov	r1, #10
   179d4:	ldrne	r2, [r3, #20]
   179d8:	strne	r0, [r2, #152]	; 0x98
   179dc:	ldr	r2, [pc, #88]	; 17a3c <__assert_fail@plt+0x5448>
   179e0:	streq	r0, [r3, #16]
   179e4:	str	r0, [r3, #20]
   179e8:	ldrb	lr, [r2, #15]
   179ec:	mov	r3, #0
   179f0:	mov	r2, #1
   179f4:	str	r4, [r0, #172]	; 0xac
   179f8:	strb	lr, [r0, #32]
   179fc:	str	ip, [r0, #28]
   17a00:	strd	r6, [r0, #8]
   17a04:	strb	r2, [r0, #18]
   17a08:	strb	r2, [r0, #19]
   17a0c:	str	r1, [r0, #24]
   17a10:	str	r3, [r0, #168]	; 0xa8
   17a14:	str	r3, [r0, #164]	; 0xa4
   17a18:	str	r3, [r0, #36]	; 0x24
   17a1c:	pop	{r4, r6, r7, pc}
   17a20:	ldr	r3, [pc, #24]	; 17a40 <__assert_fail@plt+0x544c>
   17a24:	ldr	r2, [pc, #24]	; 17a44 <__assert_fail@plt+0x5450>
   17a28:	ldr	r1, [pc, #24]	; 17a48 <__assert_fail@plt+0x5454>
   17a2c:	ldr	r0, [pc, #24]	; 17a4c <__assert_fail@plt+0x5458>
   17a30:	bl	125f4 <__assert_fail@plt>
   17a34:	bl	12658 <__assert_fail@plt+0x64>
   17a38:	andeq	r4, r6, r0, ror r5
   17a3c:	andeq	r4, r6, ip, ror #28
   17a40:	andeq	lr, r4, r0, asr #18
   17a44:	andeq	r0, r0, sp, asr #11
   17a48:	andeq	lr, r4, r0, lsr ip
   17a4c:	andeq	lr, r4, r8, asr #27
   17a50:	ldr	r3, [r0]
   17a54:	push	{r4, r5, r6, r7, r8, lr}
   17a58:	cmp	r3, #0
   17a5c:	beq	17ae0 <__assert_fail@plt+0x54ec>
   17a60:	cmp	r3, #2
   17a64:	beq	17af4 <__assert_fail@plt+0x5500>
   17a68:	mov	r4, r0
   17a6c:	mov	r0, #176	; 0xb0
   17a70:	bl	35b50 <__assert_fail@plt+0x2355c>
   17a74:	ldr	r3, [pc, #124]	; 17af8 <__assert_fail@plt+0x5504>
   17a78:	mov	r6, #0
   17a7c:	mov	r7, #0
   17a80:	ldr	r2, [r3, #16]
   17a84:	ldr	ip, [pc, #112]	; 17afc <__assert_fail@plt+0x5508>
   17a88:	cmp	r2, #0
   17a8c:	mov	lr, #1065353216	; 0x3f800000
   17a90:	ldrne	r2, [r3, #20]
   17a94:	mov	r1, #10
   17a98:	strne	r0, [r2, #152]	; 0x98
   17a9c:	ldr	r2, [pc, #92]	; 17b00 <__assert_fail@plt+0x550c>
   17aa0:	streq	r0, [r3, #16]
   17aa4:	str	r0, [r3, #20]
   17aa8:	ldrb	r5, [r2, #15]
   17aac:	mov	r3, #0
   17ab0:	mov	r2, #1
   17ab4:	str	r4, [r0, #172]	; 0xac
   17ab8:	strb	r5, [r0, #32]
   17abc:	str	lr, [r0, #28]
   17ac0:	strd	r6, [r0, #8]
   17ac4:	str	ip, [r0, #36]	; 0x24
   17ac8:	strb	r2, [r0, #18]
   17acc:	strb	r2, [r0, #19]
   17ad0:	str	r1, [r0, #24]
   17ad4:	str	r3, [r0, #168]	; 0xa8
   17ad8:	str	r3, [r0, #164]	; 0xa4
   17adc:	pop	{r4, r5, r6, r7, r8, pc}
   17ae0:	ldr	r3, [pc, #28]	; 17b04 <__assert_fail@plt+0x5510>
   17ae4:	ldr	r2, [pc, #28]	; 17b08 <__assert_fail@plt+0x5514>
   17ae8:	ldr	r1, [pc, #28]	; 17b0c <__assert_fail@plt+0x5518>
   17aec:	ldr	r0, [pc, #28]	; 17b10 <__assert_fail@plt+0x551c>
   17af0:	bl	125f4 <__assert_fail@plt>
   17af4:	bl	12658 <__assert_fail@plt+0x64>
   17af8:	andeq	r4, r6, r0, ror r5
   17afc:	andeq	lr, r4, r4, ror #27
   17b00:	andeq	r4, r6, ip, ror #28
   17b04:	andeq	lr, r4, r0, asr #18
   17b08:	andeq	r0, r0, sp, asr #11
   17b0c:	andeq	lr, r4, r0, lsr ip
   17b10:	andeq	lr, r4, r8, asr #27
   17b14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b18:	mov	r7, r0
   17b1c:	ldr	r4, [pc, #432]	; 17cd4 <__assert_fail@plt+0x56e0>
   17b20:	mov	r6, r1
   17b24:	ldr	r5, [r4, #24]
   17b28:	cmp	r5, #0
   17b2c:	beq	17c90 <__assert_fail@plt+0x569c>
   17b30:	ldr	r3, [r4, #20]
   17b34:	cmp	r3, #0
   17b38:	beq	17b54 <__assert_fail@plt+0x5560>
   17b3c:	ldr	r3, [r3, #8]
   17b40:	cmp	r3, #1
   17b44:	beq	17bf4 <__assert_fail@plt+0x5600>
   17b48:	bcc	17bd4 <__assert_fail@plt+0x55e0>
   17b4c:	cmp	r3, #5
   17b50:	beq	17bf4 <__assert_fail@plt+0x5600>
   17b54:	ldr	r3, [r7]
   17b58:	cmp	r3, #0
   17b5c:	beq	17cc0 <__assert_fail@plt+0x56cc>
   17b60:	cmp	r3, #2
   17b64:	beq	17cbc <__assert_fail@plt+0x56c8>
   17b68:	mov	r0, #176	; 0xb0
   17b6c:	bl	35b50 <__assert_fail@plt+0x2355c>
   17b70:	ldr	r3, [r4, #16]
   17b74:	mov	r8, #0
   17b78:	cmp	r3, #0
   17b7c:	mov	r9, #0
   17b80:	ldrne	r3, [r4, #20]
   17b84:	mov	r2, #1
   17b88:	mov	ip, #1065353216	; 0x3f800000
   17b8c:	mov	r1, #10
   17b90:	strne	r0, [r3, #152]	; 0x98
   17b94:	ldr	r3, [pc, #316]	; 17cd8 <__assert_fail@plt+0x56e4>
   17b98:	streq	r0, [r4, #16]
   17b9c:	str	r0, [r4, #20]
   17ba0:	ldrb	lr, [r3, #15]
   17ba4:	mov	r3, #0
   17ba8:	str	r7, [r0, #172]	; 0xac
   17bac:	str	r6, [r0, #36]	; 0x24
   17bb0:	strb	lr, [r0, #32]
   17bb4:	str	ip, [r0, #28]
   17bb8:	strd	r8, [r0, #8]
   17bbc:	strb	r2, [r0, #18]
   17bc0:	strb	r2, [r0, #19]
   17bc4:	str	r1, [r0, #24]
   17bc8:	str	r3, [r0, #168]	; 0xa8
   17bcc:	str	r3, [r0, #164]	; 0xa4
   17bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17bd4:	mov	r2, #5
   17bd8:	ldr	r1, [pc, #252]	; 17cdc <__assert_fail@plt+0x56e8>
   17bdc:	mov	r0, #0
   17be0:	bl	120b4 <dcgettext@plt>
   17be4:	mov	r1, #0
   17be8:	mov	r2, r0
   17bec:	mov	r0, #1
   17bf0:	bl	121ec <error@plt>
   17bf4:	ldr	r3, [r5]
   17bf8:	cmp	r3, #0
   17bfc:	beq	17cc0 <__assert_fail@plt+0x56cc>
   17c00:	cmp	r3, #2
   17c04:	beq	17cbc <__assert_fail@plt+0x56c8>
   17c08:	mov	r0, #176	; 0xb0
   17c0c:	bl	35b50 <__assert_fail@plt+0x2355c>
   17c10:	ldr	r3, [r4, #16]
   17c14:	mov	r2, #1065353216	; 0x3f800000
   17c18:	cmp	r3, #0
   17c1c:	mov	r8, #3
   17c20:	ldrne	r3, [r4, #20]
   17c24:	mov	r9, #3
   17c28:	strne	r0, [r3, #152]	; 0x98
   17c2c:	ldr	r3, [pc, #164]	; 17cd8 <__assert_fail@plt+0x56e4>
   17c30:	str	r2, [r0, #28]
   17c34:	ldr	r2, [pc, #164]	; 17ce0 <__assert_fail@plt+0x56ec>
   17c38:	ldrb	r1, [r3, #15]
   17c3c:	ldr	r3, [pc, #160]	; 17ce4 <__assert_fail@plt+0x56f0>
   17c40:	str	r2, [r0]
   17c44:	str	r3, [r0, #4]
   17c48:	mov	r2, #10
   17c4c:	mov	r3, #0
   17c50:	streq	r0, [r4, #16]
   17c54:	str	r0, [r4, #20]
   17c58:	str	r5, [r0, #172]	; 0xac
   17c5c:	strb	r1, [r0, #32]
   17c60:	strd	r8, [r0, #8]
   17c64:	str	r2, [r0, #24]
   17c68:	str	r3, [r0, #168]	; 0xa8
   17c6c:	str	r3, [r0, #164]	; 0xa4
   17c70:	strb	r3, [r0, #18]
   17c74:	strb	r3, [r0, #19]
   17c78:	strb	r3, [r0, #20]
   17c7c:	str	r3, [r0, #36]	; 0x24
   17c80:	str	r3, [r0, #40]	; 0x28
   17c84:	strb	r3, [r0, #16]
   17c88:	strb	r3, [r0, #17]
   17c8c:	b	17b54 <__assert_fail@plt+0x5560>
   17c90:	ldr	r0, [pc, #80]	; 17ce8 <__assert_fail@plt+0x56f4>
   17c94:	bl	23bb8 <__assert_fail@plt+0x115c4>
   17c98:	cmp	r0, #0
   17c9c:	mov	r5, r0
   17ca0:	str	r0, [r4, #24]
   17ca4:	bne	17b30 <__assert_fail@plt+0x553c>
   17ca8:	ldr	r3, [pc, #60]	; 17cec <__assert_fail@plt+0x56f8>
   17cac:	ldr	r2, [pc, #60]	; 17cf0 <__assert_fail@plt+0x56fc>
   17cb0:	ldr	r1, [pc, #60]	; 17cf4 <__assert_fail@plt+0x5700>
   17cb4:	ldr	r0, [pc, #60]	; 17cf8 <__assert_fail@plt+0x5704>
   17cb8:	bl	125f4 <__assert_fail@plt>
   17cbc:	bl	12658 <__assert_fail@plt+0x64>
   17cc0:	ldr	r3, [pc, #52]	; 17cfc <__assert_fail@plt+0x5708>
   17cc4:	ldr	r2, [pc, #52]	; 17d00 <__assert_fail@plt+0x570c>
   17cc8:	ldr	r1, [pc, #36]	; 17cf4 <__assert_fail@plt+0x5700>
   17ccc:	ldr	r0, [pc, #48]	; 17d04 <__assert_fail@plt+0x5710>
   17cd0:	bl	125f4 <__assert_fail@plt>
   17cd4:	andeq	r4, r6, r0, ror r5
   17cd8:	andeq	r4, r6, ip, ror #28
   17cdc:	andeq	lr, r4, ip, lsl lr
   17ce0:	andeq	r3, r1, r4, ror r9
   17ce4:	andeq	lr, r4, r8, asr #28
   17ce8:	andeq	lr, r4, r4, lsl #28
   17cec:	andeq	lr, r4, ip, lsl #19
   17cf0:	strdeq	r0, [r0], -r8
   17cf4:	andeq	lr, r4, r0, lsr ip
   17cf8:	andeq	lr, r4, r8, lsl #28
   17cfc:	andeq	lr, r4, r0, asr #18
   17d00:	andeq	r0, r0, sp, asr #11
   17d04:	andeq	lr, r4, r8, asr #27
   17d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d0c:	subs	r8, r1, #0
   17d10:	sub	sp, sp, #20
   17d14:	beq	18014 <__assert_fail@plt+0x5a20>
   17d18:	ldr	r9, [pc, #1188]	; 181c4 <__assert_fail@plt+0x5bd0>
   17d1c:	ldr	r7, [pc, #1188]	; 181c8 <__assert_fail@plt+0x5bd4>
   17d20:	mov	r4, r0
   17d24:	mov	r5, r2
   17d28:	cmp	r5, #0
   17d2c:	movgt	r6, #0
   17d30:	movgt	fp, #4
   17d34:	movgt	sl, #1
   17d38:	ble	17d5c <__assert_fail@plt+0x5768>
   17d3c:	add	r6, r6, #1
   17d40:	mov	r3, r4
   17d44:	mov	r2, fp
   17d48:	mov	r1, sl
   17d4c:	mov	r0, r7
   17d50:	bl	12168 <fwrite@plt>
   17d54:	cmp	r6, r5
   17d58:	bne	17d3c <__assert_fail@plt+0x5748>
   17d5c:	mov	r3, r4
   17d60:	mov	r2, #6
   17d64:	mov	r1, #1
   17d68:	ldr	r0, [pc, #1116]	; 181cc <__assert_fail@plt+0x5bd8>
   17d6c:	bl	12168 <fwrite@plt>
   17d70:	ldr	r3, [r8, #36]	; 0x24
   17d74:	cmp	r3, #0
   17d78:	beq	18040 <__assert_fail@plt+0x5a4c>
   17d7c:	ldr	r2, [r8, #4]
   17d80:	ldr	r1, [pc, #1096]	; 181d0 <__assert_fail@plt+0x5bdc>
   17d84:	mov	r0, r4
   17d88:	bl	1233c <fprintf@plt>
   17d8c:	ldrsh	r3, [r8, #8]
   17d90:	cmp	r3, #0
   17d94:	beq	18058 <__assert_fail@plt+0x5a64>
   17d98:	cmp	r3, #1
   17d9c:	beq	18110 <__assert_fail@plt+0x5b1c>
   17da0:	cmp	r3, #2
   17da4:	beq	18120 <__assert_fail@plt+0x5b2c>
   17da8:	cmp	r3, #3
   17dac:	beq	18118 <__assert_fail@plt+0x5b24>
   17db0:	cmp	r3, #4
   17db4:	beq	180d8 <__assert_fail@plt+0x5ae4>
   17db8:	ldr	r1, [pc, #1044]	; 181d4 <__assert_fail@plt+0x5be0>
   17dbc:	cmp	r3, #5
   17dc0:	ldr	r2, [pc, #1040]	; 181d8 <__assert_fail@plt+0x5be4>
   17dc4:	moveq	r2, r1
   17dc8:	ldrsh	r1, [r8, #12]
   17dcc:	cmp	r1, #0
   17dd0:	beq	18068 <__assert_fail@plt+0x5a74>
   17dd4:	cmp	r1, #1
   17dd8:	beq	18108 <__assert_fail@plt+0x5b14>
   17ddc:	cmp	r1, #2
   17de0:	beq	18100 <__assert_fail@plt+0x5b0c>
   17de4:	cmp	r1, #3
   17de8:	beq	180f8 <__assert_fail@plt+0x5b04>
   17dec:	cmp	r1, #4
   17df0:	beq	180f0 <__assert_fail@plt+0x5afc>
   17df4:	ldr	r0, [pc, #992]	; 181dc <__assert_fail@plt+0x5be8>
   17df8:	cmp	r1, #5
   17dfc:	ldr	r3, [pc, #988]	; 181e0 <__assert_fail@plt+0x5bec>
   17e00:	moveq	r3, r0
   17e04:	ldr	r1, [pc, #984]	; 181e4 <__assert_fail@plt+0x5bf0>
   17e08:	mov	r0, r4
   17e0c:	bl	1233c <fprintf@plt>
   17e10:	ldr	r3, [r8, #24]
   17e14:	ldr	r2, [r9, #472]	; 0x1d8
   17e18:	cmp	r2, r3
   17e1c:	beq	180c8 <__assert_fail@plt+0x5ad4>
   17e20:	ldr	r2, [r9, #480]	; 0x1e0
   17e24:	cmp	r2, r3
   17e28:	beq	180e0 <__assert_fail@plt+0x5aec>
   17e2c:	ldr	r2, [r9, #488]	; 0x1e8
   17e30:	cmp	r3, r2
   17e34:	beq	18128 <__assert_fail@plt+0x5b34>
   17e38:	ldr	r2, [r9, #496]	; 0x1f0
   17e3c:	cmp	r3, r2
   17e40:	beq	18138 <__assert_fail@plt+0x5b44>
   17e44:	ldr	r2, [r9, #504]	; 0x1f8
   17e48:	cmp	r3, r2
   17e4c:	beq	18148 <__assert_fail@plt+0x5b54>
   17e50:	ldr	r2, [r9, #512]	; 0x200
   17e54:	cmp	r3, r2
   17e58:	beq	18158 <__assert_fail@plt+0x5b64>
   17e5c:	ldr	r2, [r9, #520]	; 0x208
   17e60:	cmp	r3, r2
   17e64:	beq	18168 <__assert_fail@plt+0x5b74>
   17e68:	ldr	r2, [r9, #528]	; 0x210
   17e6c:	cmp	r3, r2
   17e70:	beq	18178 <__assert_fail@plt+0x5b84>
   17e74:	ldr	r2, [r9, #536]	; 0x218
   17e78:	cmp	r3, r2
   17e7c:	beq	18188 <__assert_fail@plt+0x5b94>
   17e80:	ldr	r2, [r9, #544]	; 0x220
   17e84:	cmp	r3, r2
   17e88:	beq	18030 <__assert_fail@plt+0x5a3c>
   17e8c:	ldr	r2, [r9, #552]	; 0x228
   17e90:	cmp	r3, r2
   17e94:	moveq	r3, #10
   17e98:	beq	18034 <__assert_fail@plt+0x5a40>
   17e9c:	ldr	r2, [pc, #820]	; 181d8 <__assert_fail@plt+0x5be4>
   17ea0:	vldr	s14, [r8, #28]
   17ea4:	ldrb	r0, [r8, #16]
   17ea8:	ldr	r1, [pc, #824]	; 181e8 <__assert_fail@plt+0x5bf4>
   17eac:	ldr	r3, [pc, #824]	; 181ec <__assert_fail@plt+0x5bf8>
   17eb0:	vcvt.f64.f32	d7, s14
   17eb4:	cmp	r0, #0
   17eb8:	movne	r3, r1
   17ebc:	str	r3, [sp, #8]
   17ec0:	ldr	r1, [pc, #808]	; 181f0 <__assert_fail@plt+0x5bfc>
   17ec4:	mov	r0, r4
   17ec8:	vstr	d7, [sp]
   17ecc:	bl	1233c <fprintf@plt>
   17ed0:	ldrh	r3, [r8, #18]
   17ed4:	cmp	r3, #0
   17ed8:	bne	17ee8 <__assert_fail@plt+0x58f4>
   17edc:	ldrb	r3, [r8, #20]
   17ee0:	cmp	r3, #0
   17ee4:	beq	17f40 <__assert_fail@plt+0x594c>
   17ee8:	mov	r3, r4
   17eec:	mov	r2, #6
   17ef0:	mov	r1, #1
   17ef4:	ldr	r0, [pc, #760]	; 181f4 <__assert_fail@plt+0x5c00>
   17ef8:	bl	12168 <fwrite@plt>
   17efc:	ldrb	r3, [r8, #18]
   17f00:	cmp	r3, #0
   17f04:	bne	18070 <__assert_fail@plt+0x5a7c>
   17f08:	ldrb	r3, [r8, #20]
   17f0c:	cmp	r3, #0
   17f10:	beq	1801c <__assert_fail@plt+0x5a28>
   17f14:	ldr	r2, [pc, #716]	; 181e8 <__assert_fail@plt+0x5bf4>
   17f18:	ldr	r1, [pc, #728]	; 181f8 <__assert_fail@plt+0x5c04>
   17f1c:	mov	r0, r4
   17f20:	bl	1233c <fprintf@plt>
   17f24:	ldrb	r3, [r8, #19]
   17f28:	cmp	r3, #0
   17f2c:	beq	17f40 <__assert_fail@plt+0x594c>
   17f30:	ldr	r2, [pc, #708]	; 181fc <__assert_fail@plt+0x5c08>
   17f34:	ldr	r1, [pc, #708]	; 18200 <__assert_fail@plt+0x5c0c>
   17f38:	mov	r0, r4
   17f3c:	bl	1233c <fprintf@plt>
   17f40:	mov	r1, r4
   17f44:	mov	r0, #10
   17f48:	bl	1248c <fputc@plt>
   17f4c:	cmp	r5, #0
   17f50:	movgt	r6, #0
   17f54:	movgt	fp, #4
   17f58:	movgt	sl, #1
   17f5c:	ble	17f80 <__assert_fail@plt+0x598c>
   17f60:	add	r6, r6, #1
   17f64:	mov	r3, r4
   17f68:	mov	r2, fp
   17f6c:	mov	r1, sl
   17f70:	mov	r0, r7
   17f74:	bl	12168 <fwrite@plt>
   17f78:	cmp	r6, r5
   17f7c:	bne	17f60 <__assert_fail@plt+0x596c>
   17f80:	ldr	r3, [r8, #156]	; 0x9c
   17f84:	cmp	r3, #0
   17f88:	beq	180a4 <__assert_fail@plt+0x5ab0>
   17f8c:	mov	r2, #6
   17f90:	mov	r1, #1
   17f94:	mov	r3, r4
   17f98:	ldr	r0, [pc, #612]	; 18204 <__assert_fail@plt+0x5c10>
   17f9c:	bl	12168 <fwrite@plt>
   17fa0:	add	r2, r5, #1
   17fa4:	ldr	r1, [r8, #156]	; 0x9c
   17fa8:	mov	r0, r4
   17fac:	bl	17d08 <__assert_fail@plt+0x5714>
   17fb0:	cmp	r5, #0
   17fb4:	movgt	r6, #0
   17fb8:	movgt	fp, #4
   17fbc:	movgt	sl, #1
   17fc0:	ble	17fe4 <__assert_fail@plt+0x59f0>
   17fc4:	add	r6, r6, #1
   17fc8:	mov	r3, r4
   17fcc:	mov	r2, fp
   17fd0:	mov	r1, sl
   17fd4:	mov	r0, r7
   17fd8:	bl	12168 <fwrite@plt>
   17fdc:	cmp	r6, r5
   17fe0:	bne	17fc4 <__assert_fail@plt+0x59d0>
   17fe4:	ldr	r3, [r8, #160]	; 0xa0
   17fe8:	cmp	r3, #0
   17fec:	beq	18198 <__assert_fail@plt+0x5ba4>
   17ff0:	mov	r3, r4
   17ff4:	mov	r2, #7
   17ff8:	mov	r1, #1
   17ffc:	ldr	r0, [pc, #516]	; 18208 <__assert_fail@plt+0x5c14>
   18000:	bl	12168 <fwrite@plt>
   18004:	ldr	r8, [r8, #160]	; 0xa0
   18008:	add	r5, r5, #1
   1800c:	cmp	r8, #0
   18010:	bne	17d28 <__assert_fail@plt+0x5734>
   18014:	add	sp, sp, #20
   18018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1801c:	ldrb	r3, [r8, #19]
   18020:	cmp	r3, #0
   18024:	beq	17f40 <__assert_fail@plt+0x594c>
   18028:	ldr	r2, [pc, #440]	; 181e8 <__assert_fail@plt+0x5bf4>
   1802c:	b	17f34 <__assert_fail@plt+0x5940>
   18030:	mov	r3, #9
   18034:	add	r3, r9, r3, lsl #3
   18038:	ldr	r2, [r3, #476]	; 0x1dc
   1803c:	b	17ea0 <__assert_fail@plt+0x58ac>
   18040:	mov	r1, r4
   18044:	ldr	r0, [r8, #4]
   18048:	bl	12588 <fputs@plt>
   1804c:	ldrsh	r3, [r8, #8]
   18050:	cmp	r3, #0
   18054:	bne	17d98 <__assert_fail@plt+0x57a4>
   18058:	ldrsh	r1, [r8, #12]
   1805c:	ldr	r2, [pc, #424]	; 1820c <__assert_fail@plt+0x5c18>
   18060:	cmp	r1, #0
   18064:	bne	17dd4 <__assert_fail@plt+0x57e0>
   18068:	ldr	r3, [pc, #412]	; 1820c <__assert_fail@plt+0x5c18>
   1806c:	b	17e04 <__assert_fail@plt+0x5810>
   18070:	mov	r3, r4
   18074:	mov	r2, #4
   18078:	mov	r1, #1
   1807c:	ldr	r0, [pc, #396]	; 18210 <__assert_fail@plt+0x5c1c>
   18080:	bl	12168 <fwrite@plt>
   18084:	ldrb	r3, [r8, #20]
   18088:	cmp	r3, #0
   1808c:	ldrne	r2, [pc, #360]	; 181fc <__assert_fail@plt+0x5c08>
   18090:	bne	17f18 <__assert_fail@plt+0x5924>
   18094:	ldrb	r3, [r8, #19]
   18098:	cmp	r3, #0
   1809c:	beq	17f40 <__assert_fail@plt+0x594c>
   180a0:	b	17f30 <__assert_fail@plt+0x593c>
   180a4:	ldr	r3, [r8, #160]	; 0xa0
   180a8:	cmp	r3, #0
   180ac:	mov	r3, r4
   180b0:	beq	181b4 <__assert_fail@plt+0x5bc0>
   180b4:	mov	r2, #9
   180b8:	mov	r1, #1
   180bc:	ldr	r0, [pc, #336]	; 18214 <__assert_fail@plt+0x5c20>
   180c0:	bl	12168 <fwrite@plt>
   180c4:	b	17fb0 <__assert_fail@plt+0x59bc>
   180c8:	mov	r3, #0
   180cc:	add	r3, r9, r3, lsl #3
   180d0:	ldr	r2, [r3, #476]	; 0x1dc
   180d4:	b	17ea0 <__assert_fail@plt+0x58ac>
   180d8:	ldr	r2, [pc, #312]	; 18218 <__assert_fail@plt+0x5c24>
   180dc:	b	17dc8 <__assert_fail@plt+0x57d4>
   180e0:	mov	r3, #1
   180e4:	add	r3, r9, r3, lsl #3
   180e8:	ldr	r2, [r3, #476]	; 0x1dc
   180ec:	b	17ea0 <__assert_fail@plt+0x58ac>
   180f0:	ldr	r3, [pc, #292]	; 1821c <__assert_fail@plt+0x5c28>
   180f4:	b	17e04 <__assert_fail@plt+0x5810>
   180f8:	ldr	r3, [pc, #288]	; 18220 <__assert_fail@plt+0x5c2c>
   180fc:	b	17e04 <__assert_fail@plt+0x5810>
   18100:	ldr	r3, [pc, #284]	; 18224 <__assert_fail@plt+0x5c30>
   18104:	b	17e04 <__assert_fail@plt+0x5810>
   18108:	ldr	r3, [pc, #280]	; 18228 <__assert_fail@plt+0x5c34>
   1810c:	b	17e04 <__assert_fail@plt+0x5810>
   18110:	ldr	r2, [pc, #276]	; 1822c <__assert_fail@plt+0x5c38>
   18114:	b	17dc8 <__assert_fail@plt+0x57d4>
   18118:	ldr	r2, [pc, #272]	; 18230 <__assert_fail@plt+0x5c3c>
   1811c:	b	17dc8 <__assert_fail@plt+0x57d4>
   18120:	ldr	r2, [pc, #268]	; 18234 <__assert_fail@plt+0x5c40>
   18124:	b	17dc8 <__assert_fail@plt+0x57d4>
   18128:	mov	r3, #2
   1812c:	add	r3, r9, r3, lsl #3
   18130:	ldr	r2, [r3, #476]	; 0x1dc
   18134:	b	17ea0 <__assert_fail@plt+0x58ac>
   18138:	mov	r3, #3
   1813c:	add	r3, r9, r3, lsl #3
   18140:	ldr	r2, [r3, #476]	; 0x1dc
   18144:	b	17ea0 <__assert_fail@plt+0x58ac>
   18148:	mov	r3, #4
   1814c:	add	r3, r9, r3, lsl #3
   18150:	ldr	r2, [r3, #476]	; 0x1dc
   18154:	b	17ea0 <__assert_fail@plt+0x58ac>
   18158:	mov	r3, #5
   1815c:	add	r3, r9, r3, lsl #3
   18160:	ldr	r2, [r3, #476]	; 0x1dc
   18164:	b	17ea0 <__assert_fail@plt+0x58ac>
   18168:	mov	r3, #6
   1816c:	add	r3, r9, r3, lsl #3
   18170:	ldr	r2, [r3, #476]	; 0x1dc
   18174:	b	17ea0 <__assert_fail@plt+0x58ac>
   18178:	mov	r3, #7
   1817c:	add	r3, r9, r3, lsl #3
   18180:	ldr	r2, [r3, #476]	; 0x1dc
   18184:	b	17ea0 <__assert_fail@plt+0x58ac>
   18188:	mov	r3, #8
   1818c:	add	r3, r9, r3, lsl #3
   18190:	ldr	r2, [r3, #476]	; 0x1dc
   18194:	b	17ea0 <__assert_fail@plt+0x58ac>
   18198:	ldr	r0, [pc, #152]	; 18238 <__assert_fail@plt+0x5c44>
   1819c:	mov	r3, r4
   181a0:	mov	r2, #10
   181a4:	mov	r1, #1
   181a8:	add	sp, sp, #20
   181ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181b0:	b	12168 <fwrite@plt>
   181b4:	mov	r2, #13
   181b8:	mov	r1, #1
   181bc:	ldr	r0, [pc, #120]	; 1823c <__assert_fail@plt+0x5c48>
   181c0:	b	181a8 <__assert_fail@plt+0x5bb4>
   181c4:	muleq	r6, ip, r2
   181c8:	andeq	lr, r4, r0, asr #29
   181cc:			; <UNDEFINED> instruction: 0x0004eeb8
   181d0:	andeq	lr, r4, r4, lsr sp
   181d4:	andeq	lr, r4, ip, asr #28
   181d8:	andeq	lr, r4, ip, asr lr
   181dc:	muleq	r4, r0, lr
   181e0:	muleq	r4, r4, lr
   181e4:	andeq	lr, r4, r8, asr #29
   181e8:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   181ec:			; <UNDEFINED> instruction: 0x0004eeb0
   181f0:	ldrdeq	lr, [r4], -ip
   181f4:	andeq	lr, r4, ip, lsl #30
   181f8:	andeq	lr, r4, r4, lsl pc
   181fc:			; <UNDEFINED> instruction: 0x0004eeb4
   18200:	andeq	lr, r4, ip, lsl pc
   18204:	andeq	lr, r4, r4, lsr pc
   18208:	andeq	lr, r4, r8, asr #30
   1820c:	andeq	lr, r4, ip, ror #28
   18210:	andeq	lr, r4, r0, ror #1
   18214:	andeq	lr, r4, ip, lsr pc
   18218:	andeq	lr, r4, r0, ror lr
   1821c:	andeq	lr, r4, r0, lsr #29
   18220:	andeq	lr, r4, r4, lsl #28
   18224:	andeq	lr, r4, ip, ror #7
   18228:	andeq	lr, r4, r8, lsr #29
   1822c:	andeq	lr, r4, r0, lsl #29
   18230:	andeq	lr, r4, r8, lsl #29
   18234:	andeq	lr, r4, r4, ror #28
   18238:	andeq	lr, r4, r0, asr pc
   1823c:	andeq	lr, r4, r4, lsr #30
   18240:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18244:	ldr	r3, [r0]
   18248:	cmp	r3, #0
   1824c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18250:	ldr	r8, [pc, #352]	; 183b8 <__assert_fail@plt+0x5dc4>
   18254:	mov	r7, r1
   18258:	mov	r6, r0
   1825c:	ldr	r2, [r8, #44]	; 0x2c
   18260:	tst	r2, #8
   18264:	bne	1838c <__assert_fail@plt+0x5d98>
   18268:	mov	r5, #0
   1826c:	mov	r0, r3
   18270:	bl	17424 <__assert_fail@plt+0x4e30>
   18274:	mov	r4, r5
   18278:	mov	fp, r5
   1827c:	ldr	r9, [r6]
   18280:	b	1829c <__assert_fail@plt+0x5ca8>
   18284:	ldr	r2, [r3, #156]	; 0x9c
   18288:	cmp	r2, #0
   1828c:	moveq	r5, r9
   18290:	str	r2, [r9, #156]	; 0x9c
   18294:	str	r9, [r3, #156]	; 0x9c
   18298:	mov	r9, sl
   1829c:	cmp	r9, #0
   182a0:	beq	18338 <__assert_fail@plt+0x5d44>
   182a4:	ldr	sl, [r9, #156]	; 0x9c
   182a8:	cmp	r4, #0
   182ac:	str	sl, [r6]
   182b0:	str	fp, [r9, #156]	; 0x9c
   182b4:	beq	1830c <__assert_fail@plt+0x5d18>
   182b8:	ldr	r0, [r9, #160]	; 0xa0
   182bc:	mov	r3, r4
   182c0:	ldr	r1, [r0, #24]
   182c4:	ldr	r2, [r3, #160]	; 0xa0
   182c8:	ldr	lr, [r3, #12]
   182cc:	ldr	ip, [r2, #24]
   182d0:	cmp	ip, r1
   182d4:	bne	18324 <__assert_fail@plt+0x5d30>
   182d8:	vldr	s14, [r2, #28]
   182dc:	vldr	s15, [r0, #28]
   182e0:	vcmp.f32	s14, s15
   182e4:	vmrs	APSR_nzcv, fpscr
   182e8:	beq	18284 <__assert_fail@plt+0x5c90>
   182ec:	cmp	lr, #2
   182f0:	vcmpe.f32	s14, s15
   182f4:	bne	1832c <__assert_fail@plt+0x5d38>
   182f8:	vmrs	APSR_nzcv, fpscr
   182fc:	bmi	18284 <__assert_fail@plt+0x5c90>
   18300:	ldr	r3, [r3, #156]	; 0x9c
   18304:	cmp	r3, #0
   18308:	bne	182c4 <__assert_fail@plt+0x5cd0>
   1830c:	cmp	r5, #0
   18310:	moveq	r5, r9
   18314:	str	r4, [r9, #156]	; 0x9c
   18318:	movne	r4, r9
   1831c:	moveq	r4, r5
   18320:	b	18298 <__assert_fail@plt+0x5ca4>
   18324:	bcc	18300 <__assert_fail@plt+0x5d0c>
   18328:	b	18284 <__assert_fail@plt+0x5c90>
   1832c:	vmrs	APSR_nzcv, fpscr
   18330:	bmi	18300 <__assert_fail@plt+0x5d0c>
   18334:	b	18284 <__assert_fail@plt+0x5c90>
   18338:	ldr	r3, [r8, #44]	; 0x2c
   1833c:	tst	r3, #8
   18340:	beq	18368 <__assert_fail@plt+0x5d74>
   18344:	ldr	r8, [pc, #112]	; 183bc <__assert_fail@plt+0x5dc8>
   18348:	ldr	r2, [pc, #112]	; 183c0 <__assert_fail@plt+0x5dcc>
   1834c:	ldr	r1, [pc, #112]	; 183c4 <__assert_fail@plt+0x5dd0>
   18350:	ldr	r0, [r8]
   18354:	bl	1233c <fprintf@plt>
   18358:	ldr	r0, [r8]
   1835c:	mov	r2, #2
   18360:	mov	r1, r4
   18364:	bl	17d08 <__assert_fail@plt+0x5714>
   18368:	mov	r0, r4
   1836c:	bl	17424 <__assert_fail@plt+0x4e30>
   18370:	ldr	r2, [r7]
   18374:	mov	r3, #0
   18378:	str	r2, [r5, #156]	; 0x9c
   1837c:	str	r4, [r7]
   18380:	str	r3, [r6, #4]
   18384:	str	r3, [r6]
   18388:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1838c:	ldr	r4, [pc, #40]	; 183bc <__assert_fail@plt+0x5dc8>
   18390:	ldr	r2, [pc, #48]	; 183c8 <__assert_fail@plt+0x5dd4>
   18394:	ldr	r1, [pc, #40]	; 183c4 <__assert_fail@plt+0x5dd0>
   18398:	ldr	r0, [r4]
   1839c:	bl	1233c <fprintf@plt>
   183a0:	ldr	r0, [r4]
   183a4:	mov	r2, #2
   183a8:	ldr	r1, [r6]
   183ac:	bl	17d08 <__assert_fail@plt+0x5714>
   183b0:	ldr	r3, [r6]
   183b4:	b	18268 <__assert_fail@plt+0x5c74>
   183b8:	andeq	r4, r6, ip, ror #28
   183bc:	andeq	r4, r6, r8, asr #10
   183c0:	andeq	lr, r4, r0, lsl #31
   183c4:	andeq	lr, r4, r8, ror pc
   183c8:	andeq	lr, r4, ip, asr pc
   183cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183d0:	vpush	{d8}
   183d4:	mov	r3, #0
   183d8:	subs	r6, r0, #0
   183dc:	sub	sp, sp, #108	; 0x6c
   183e0:	str	r3, [sp]
   183e4:	str	r3, [sp, #4]
   183e8:	str	r3, [sp, #8]
   183ec:	str	r3, [sp, #12]
   183f0:	beq	188e0 <__assert_fail@plt+0x62ec>
   183f4:	ldr	r5, [r6]
   183f8:	cmp	r5, r3
   183fc:	beq	18920 <__assert_fail@plt+0x632c>
   18400:	ldr	r4, [r5, #156]	; 0x9c
   18404:	str	r3, [sp, #20]
   18408:	cmp	r4, r3
   1840c:	str	r3, [sp, #16]
   18410:	str	r3, [sp, #28]
   18414:	str	r3, [sp, #24]
   18418:	str	r3, [sp, #36]	; 0x24
   1841c:	str	r3, [sp, #32]
   18420:	str	r3, [sp, #44]	; 0x2c
   18424:	str	r3, [sp, #40]	; 0x28
   18428:	str	r3, [sp, #52]	; 0x34
   1842c:	str	r3, [sp, #48]	; 0x30
   18430:	str	r3, [sp, #60]	; 0x3c
   18434:	str	r3, [sp, #56]	; 0x38
   18438:	str	r3, [sp, #68]	; 0x44
   1843c:	str	r3, [sp, #64]	; 0x40
   18440:	str	r3, [sp, #76]	; 0x4c
   18444:	str	r3, [sp, #72]	; 0x48
   18448:	str	r3, [sp, #84]	; 0x54
   1844c:	str	r3, [sp, #80]	; 0x50
   18450:	str	r3, [sp, #92]	; 0x5c
   18454:	str	r3, [sp, #88]	; 0x58
   18458:	str	r3, [sp, #100]	; 0x64
   1845c:	str	r3, [sp, #96]	; 0x60
   18460:	beq	18548 <__assert_fail@plt+0x5f54>
   18464:	mov	r3, r5
   18468:	b	18474 <__assert_fail@plt+0x5e80>
   1846c:	mov	r3, r4
   18470:	mov	r4, r7
   18474:	ldr	r7, [r4, #156]	; 0x9c
   18478:	cmp	r7, #0
   1847c:	bne	1846c <__assert_fail@plt+0x5e78>
   18480:	ldr	r2, [r4, #8]
   18484:	cmp	r2, #3
   18488:	beq	18554 <__assert_fail@plt+0x5f60>
   1848c:	mov	r0, #176	; 0xb0
   18490:	ldr	r8, [r3, #12]
   18494:	add	r5, r3, #156	; 0x9c
   18498:	bl	35b50 <__assert_fail@plt+0x2355c>
   1849c:	mov	r3, #3
   184a0:	cmp	r8, #2
   184a4:	str	r8, [r0, #12]
   184a8:	str	r7, [r0, #24]
   184ac:	str	r3, [r0, #8]
   184b0:	beq	188cc <__assert_fail@plt+0x62d8>
   184b4:	cmp	r8, r3
   184b8:	beq	1889c <__assert_fail@plt+0x62a8>
   184bc:	cmp	r8, #1
   184c0:	beq	18830 <__assert_fail@plt+0x623c>
   184c4:	ldr	r9, [pc, #1144]	; 18944 <__assert_fail@plt+0x6350>
   184c8:	str	r4, [r0, #160]	; 0xa0
   184cc:	str	r0, [r5]
   184d0:	ldr	r3, [r9, #44]	; 0x2c
   184d4:	tst	r3, #9
   184d8:	bne	187d8 <__assert_fail@plt+0x61e4>
   184dc:	ldr	r5, [r6]
   184e0:	cmp	r5, #0
   184e4:	bne	18564 <__assert_fail@plt+0x5f70>
   184e8:	mov	r4, r5
   184ec:	ldr	r7, [pc, #1108]	; 18948 <__assert_fail@plt+0x6354>
   184f0:	ldr	r3, [pc, #1108]	; 1894c <__assert_fail@plt+0x6358>
   184f4:	mov	r1, r6
   184f8:	add	r0, sp, #8
   184fc:	str	r3, [r7, #28]
   18500:	bl	18240 <__assert_fail@plt+0x5c4c>
   18504:	ldr	r3, [r7, #28]
   18508:	mov	r1, r6
   1850c:	mov	r0, sp
   18510:	blx	r3
   18514:	add	r5, sp, #16
   18518:	add	r8, sp, #104	; 0x68
   1851c:	mov	r0, r5
   18520:	ldr	r3, [r7, #28]
   18524:	mov	r1, r6
   18528:	add	r5, r5, #8
   1852c:	blx	r3
   18530:	cmp	r8, r5
   18534:	bne	1851c <__assert_fail@plt+0x5f28>
   18538:	mov	r0, r4
   1853c:	add	sp, sp, #108	; 0x6c
   18540:	vpop	{d8}
   18544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18548:	ldr	r3, [r5, #8]
   1854c:	cmp	r3, #3
   18550:	bne	1887c <__assert_fail@plt+0x6288>
   18554:	ldr	r9, [pc, #1000]	; 18944 <__assert_fail@plt+0x6350>
   18558:	ldr	r3, [r9, #44]	; 0x2c
   1855c:	tst	r3, #9
   18560:	bne	187d8 <__assert_fail@plt+0x61e4>
   18564:	ldr	r3, [r5, #8]
   18568:	ldr	r7, [r5, #8]
   1856c:	cmp	r3, #3
   18570:	movne	r8, #0
   18574:	ldreq	r8, [r5, #12]
   18578:	cmp	r7, #3
   1857c:	vldr	s16, [pc, #952]	; 1893c <__assert_fail@plt+0x6348>
   18580:	vldr	s17, [pc, #952]	; 18940 <__assert_fail@plt+0x634c>
   18584:	ldr	fp, [pc, #964]	; 18950 <__assert_fail@plt+0x635c>
   18588:	mov	r4, #0
   1858c:	beq	185ec <__assert_fail@plt+0x5ff8>
   18590:	ldr	r7, [r5, #160]	; 0xa0
   18594:	ldr	r3, [r7, #8]
   18598:	cmp	r3, #3
   1859c:	ldrls	pc, [pc, r3, lsl #2]
   185a0:	b	187b8 <__assert_fail@plt+0x61c4>
   185a4:			; <UNDEFINED> instruction: 0x000186b4
   185a8:			; <UNDEFINED> instruction: 0x000186b4
   185ac:	andeq	r8, r1, r4, asr #12
   185b0:			; <UNDEFINED> instruction: 0x000185b4
   185b4:	add	r0, r5, #160	; 0xa0
   185b8:	bl	183cc <__assert_fail@plt+0x5dd8>
   185bc:	strb	r0, [r7, #16]
   185c0:	ldr	r7, [r5, #160]	; 0xa0
   185c4:	ldrb	r3, [r7, #16]
   185c8:	cmp	r3, #0
   185cc:	bne	18660 <__assert_fail@plt+0x606c>
   185d0:	add	r6, r5, #156	; 0x9c
   185d4:	ldr	r5, [r6]
   185d8:	cmp	r5, #0
   185dc:	beq	184ec <__assert_fail@plt+0x5ef8>
   185e0:	ldr	r7, [r5, #8]
   185e4:	cmp	r7, #3
   185e8:	bne	18590 <__assert_fail@plt+0x5f9c>
   185ec:	ldr	r3, [r5, #12]
   185f0:	cmp	r3, r8
   185f4:	beq	18590 <__assert_fail@plt+0x5f9c>
   185f8:	mov	r0, #176	; 0xb0
   185fc:	bl	35b50 <__assert_fail@plt+0x2355c>
   18600:	mov	r3, #0
   18604:	cmp	r8, #2
   18608:	str	r7, [r0, #8]
   1860c:	str	r8, [r0, #12]
   18610:	str	r3, [r0, #24]
   18614:	beq	188f4 <__assert_fail@plt+0x6300>
   18618:	cmp	r8, #3
   1861c:	beq	18804 <__assert_fail@plt+0x6210>
   18620:	cmp	r8, #1
   18624:	vstreq	s16, [r0, #28]
   18628:	ldreq	r2, [pc, #804]	; 18954 <__assert_fail@plt+0x6360>
   1862c:	ldreq	r3, [pc, #804]	; 18958 <__assert_fail@plt+0x6364>
   18630:	stmeq	r0, {r2, r3}
   18634:	str	r5, [r0, #160]	; 0xa0
   18638:	mov	r5, r0
   1863c:	str	r0, [r6]
   18640:	b	18590 <__assert_fail@plt+0x5f9c>
   18644:	add	r0, r7, #160	; 0xa0
   18648:	bl	183cc <__assert_fail@plt+0x5dd8>
   1864c:	strb	r0, [r7, #16]
   18650:	ldr	r7, [r5, #160]	; 0xa0
   18654:	ldrb	r3, [r7, #16]
   18658:	cmp	r3, #0
   1865c:	beq	185d0 <__assert_fail@plt+0x5fdc>
   18660:	ldr	sl, [pc, #736]	; 18948 <__assert_fail@plt+0x6354>
   18664:	ldr	r3, [pc, #736]	; 1894c <__assert_fail@plt+0x6358>
   18668:	mov	r1, r6
   1866c:	add	r0, sp, #8
   18670:	str	r3, [sl, #28]
   18674:	bl	18240 <__assert_fail@plt+0x5c4c>
   18678:	ldr	r3, [sl, #28]
   1867c:	mov	r1, r6
   18680:	mov	r0, sp
   18684:	blx	r3
   18688:	add	r4, sp, #16
   1868c:	add	r7, sp, #104	; 0x68
   18690:	mov	r0, r4
   18694:	ldr	r3, [sl, #28]
   18698:	mov	r1, r6
   1869c:	add	r4, r4, #8
   186a0:	blx	r3
   186a4:	cmp	r7, r4
   186a8:	bne	18690 <__assert_fail@plt+0x609c>
   186ac:	mov	r4, #1
   186b0:	b	185d0 <__assert_fail@plt+0x5fdc>
   186b4:	cmp	r8, #1
   186b8:	beq	185c4 <__assert_fail@plt+0x5fd0>
   186bc:	ldrb	r3, [r7, #16]
   186c0:	cmp	r3, #0
   186c4:	bne	18660 <__assert_fail@plt+0x606c>
   186c8:	ldr	r2, [pc, #652]	; 1895c <__assert_fail@plt+0x6368>
   186cc:	ldr	r3, [r7]
   186d0:	ldr	r1, [pc, #648]	; 18960 <__assert_fail@plt+0x636c>
   186d4:	ldr	r0, [pc, #648]	; 18964 <__assert_fail@plt+0x6370>
   186d8:	cmp	r3, r1
   186dc:	cmpne	r3, r2
   186e0:	moveq	r2, #1
   186e4:	movne	r2, #0
   186e8:	ldr	r1, [pc, #632]	; 18968 <__assert_fail@plt+0x6374>
   186ec:	cmp	r3, r0
   186f0:	orreq	r2, r2, #1
   186f4:	cmp	r3, r1
   186f8:	orreq	r2, r2, #1
   186fc:	cmp	r2, #0
   18700:	bne	1884c <__assert_fail@plt+0x6258>
   18704:	ldr	r1, [pc, #608]	; 1896c <__assert_fail@plt+0x6378>
   18708:	ldr	r0, [pc, #608]	; 18970 <__assert_fail@plt+0x637c>
   1870c:	ldrh	r2, [r9, #68]	; 0x44
   18710:	cmp	r3, r1
   18714:	cmpne	r3, r0
   18718:	moveq	r1, #1
   1871c:	movne	r1, #0
   18720:	ldr	r0, [pc, #556]	; 18954 <__assert_fail@plt+0x6360>
   18724:	cmp	r2, #0
   18728:	orreq	r1, r1, #1
   1872c:	cmp	r3, r0
   18730:	orreq	r1, r1, #1
   18734:	cmp	r3, fp
   18738:	orreq	r1, r1, #1
   1873c:	cmp	r1, #0
   18740:	bne	18750 <__assert_fail@plt+0x615c>
   18744:	ldr	r1, [r7, #24]
   18748:	cmp	r1, #0
   1874c:	beq	1884c <__assert_fail@plt+0x6258>
   18750:	ldr	r1, [pc, #540]	; 18974 <__assert_fail@plt+0x6380>
   18754:	cmp	r3, r1
   18758:	beq	18ae8 <__assert_fail@plt+0x64f4>
   1875c:	cmp	r2, #1
   18760:	bls	185d0 <__assert_fail@plt+0x5fdc>
   18764:	ldr	r3, [r7, #24]
   18768:	sub	r1, r3, #1
   1876c:	cmp	r1, #1
   18770:	bls	18ad8 <__assert_fail@plt+0x64e4>
   18774:	cmp	r2, #2
   18778:	beq	185d0 <__assert_fail@plt+0x5fdc>
   1877c:	ldr	r1, [r9, #44]	; 0x2c
   18780:	tst	r1, #8
   18784:	bne	189a8 <__assert_fail@plt+0x63b4>
   18788:	ldr	r1, [r5, #156]	; 0x9c
   1878c:	add	r2, sp, #16
   18790:	str	r1, [r6]
   18794:	add	r1, sp, #104	; 0x68
   18798:	ldr	r0, [r2, r3, lsl #3]
   1879c:	add	r1, r1, r3, lsl #3
   187a0:	str	r0, [r5, #156]	; 0x9c
   187a4:	str	r5, [r2, r3, lsl #3]
   187a8:	ldr	r3, [r1, #-84]	; 0xffffffac
   187ac:	cmp	r3, #0
   187b0:	streq	r5, [r1, #-84]	; 0xffffffac
   187b4:	b	185d4 <__assert_fail@plt+0x5fe0>
   187b8:	mov	r2, #5
   187bc:	ldr	r1, [pc, #436]	; 18978 <__assert_fail@plt+0x6384>
   187c0:	mov	r0, #0
   187c4:	bl	120b4 <dcgettext@plt>
   187c8:	mov	r1, #0
   187cc:	mov	r2, r0
   187d0:	mov	r0, #1
   187d4:	bl	121ec <error@plt>
   187d8:	ldr	r4, [pc, #440]	; 18998 <__assert_fail@plt+0x63a4>
   187dc:	mov	r2, #22
   187e0:	mov	r1, #1
   187e4:	ldr	r3, [r4]
   187e8:	ldr	r0, [pc, #396]	; 1897c <__assert_fail@plt+0x6388>
   187ec:	bl	12168 <fwrite@plt>
   187f0:	ldr	r0, [r4]
   187f4:	mov	r2, #0
   187f8:	ldr	r1, [r6]
   187fc:	bl	17d08 <__assert_fail@plt+0x5714>
   18800:	b	184dc <__assert_fail@plt+0x5ee8>
   18804:	vldr	s15, [r5, #28]
   18808:	ldr	r3, [pc, #352]	; 18970 <__assert_fail@plt+0x637c>
   1880c:	str	r3, [r0]
   18810:	vcmpe.f32	s15, s16
   18814:	ldr	r3, [pc, #356]	; 18980 <__assert_fail@plt+0x638c>
   18818:	str	r3, [r0, #4]
   1881c:	vmrs	APSR_nzcv, fpscr
   18820:	ble	18910 <__assert_fail@plt+0x631c>
   18824:	vldr	s15, [pc, #272]	; 1893c <__assert_fail@plt+0x6348>
   18828:	vstr	s15, [r0, #28]
   1882c:	b	18634 <__assert_fail@plt+0x6040>
   18830:	ldr	r1, [pc, #284]	; 18954 <__assert_fail@plt+0x6360>
   18834:	ldr	r3, [pc, #284]	; 18958 <__assert_fail@plt+0x6364>
   18838:	mov	r2, #1065353216	; 0x3f800000
   1883c:	str	r1, [r0]
   18840:	str	r2, [r0, #28]
   18844:	str	r3, [r0, #4]
   18848:	b	184c4 <__assert_fail@plt+0x5ed0>
   1884c:	ldr	r3, [r9, #44]	; 0x2c
   18850:	tst	r3, #8
   18854:	bne	18a8c <__assert_fail@plt+0x6498>
   18858:	ldr	r3, [r5, #156]	; 0x9c
   1885c:	str	r3, [r6]
   18860:	ldr	r2, [sp, #12]
   18864:	ldr	r3, [sp, #8]
   18868:	cmp	r2, #0
   1886c:	str	r3, [r5, #156]	; 0x9c
   18870:	str	r5, [sp, #8]
   18874:	streq	r5, [sp, #12]
   18878:	b	185d4 <__assert_fail@plt+0x5fe0>
   1887c:	mov	r0, #176	; 0xb0
   18880:	bl	35b50 <__assert_fail@plt+0x2355c>
   18884:	mov	r3, #3
   18888:	str	r4, [r0, #24]
   1888c:	mov	r4, r5
   18890:	mov	r5, r6
   18894:	str	r3, [r0, #8]
   18898:	str	r3, [r0, #12]
   1889c:	vldr	s15, [r4, #28]
   188a0:	vldr	s14, [pc, #148]	; 1893c <__assert_fail@plt+0x6348>
   188a4:	ldr	r2, [pc, #196]	; 18970 <__assert_fail@plt+0x637c>
   188a8:	ldr	r3, [pc, #208]	; 18980 <__assert_fail@plt+0x638c>
   188ac:	vcmpe.f32	s15, s14
   188b0:	str	r2, [r0]
   188b4:	str	r3, [r0, #4]
   188b8:	vmrs	APSR_nzcv, fpscr
   188bc:	vmovgt.f32	s15, s14
   188c0:	ble	18928 <__assert_fail@plt+0x6334>
   188c4:	vstr	s15, [r0, #28]
   188c8:	b	184c4 <__assert_fail@plt+0x5ed0>
   188cc:	vldr	s15, [r4, #28]
   188d0:	vldr	s14, [pc, #100]	; 1893c <__assert_fail@plt+0x6348>
   188d4:	ldr	r2, [pc, #116]	; 18950 <__assert_fail@plt+0x635c>
   188d8:	ldr	r3, [pc, #164]	; 18984 <__assert_fail@plt+0x6390>
   188dc:	b	188ac <__assert_fail@plt+0x62b8>
   188e0:	mov	r4, r6
   188e4:	mov	r0, r4
   188e8:	add	sp, sp, #108	; 0x6c
   188ec:	vpop	{d8}
   188f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188f4:	vldr	s15, [r5, #28]
   188f8:	ldr	r3, [pc, #132]	; 18984 <__assert_fail@plt+0x6390>
   188fc:	str	fp, [r0]
   18900:	str	r3, [r0, #4]
   18904:	vcmpe.f32	s15, s16
   18908:	vmrs	APSR_nzcv, fpscr
   1890c:	bgt	18824 <__assert_fail@plt+0x6230>
   18910:	vcmp.f32	s15, s17
   18914:	vmrs	APSR_nzcv, fpscr
   18918:	vmovmi.f32	s15, s17
   1891c:	b	18828 <__assert_fail@plt+0x6234>
   18920:	mov	r4, r5
   18924:	b	18538 <__assert_fail@plt+0x5f44>
   18928:	vldr	s14, [pc, #16]	; 18940 <__assert_fail@plt+0x634c>
   1892c:	vcmp.f32	s15, s14
   18930:	vmrs	APSR_nzcv, fpscr
   18934:	vmovmi.f32	s15, s14
   18938:	b	188c4 <__assert_fail@plt+0x62d0>
   1893c:	svccc	0x00800000
   18940:	andeq	r0, r0, r0
   18944:	andeq	r4, r6, ip, ror #28
   18948:	andeq	r4, r6, r0, ror r5
   1894c:	andeq	r8, r1, r0, asr #4
   18950:			; <UNDEFINED> instruction: 0x000139b4
   18954:	andeq	r3, r1, r4, lsl #29
   18958:			; <UNDEFINED> instruction: 0x0004eeb4
   1895c:	andeq	r4, r1, r4, ror #18
   18960:	andeq	r4, r1, r8, ror #25
   18964:	ldrdeq	r4, [r1], -r8
   18968:	andeq	r4, r1, r8, lsl #11
   1896c:	andeq	r4, r1, r0, lsr #19
   18970:	andeq	r3, r1, r4, ror r9
   18974:	andeq	r4, r1, r8, ror #28
   18978:	andeq	lr, r4, r4, ror #23
   1897c:	andeq	lr, r4, r0, lsr #31
   18980:	andeq	lr, r4, r8, asr #28
   18984:	muleq	r4, ip, pc	; <UNPREDICTABLE>
   18988:	strdeq	lr, [r4], -r0
   1898c:	muleq	r6, ip, r2
   18990:	andeq	lr, r4, ip, asr lr
   18994:	andeq	pc, r4, r0, lsl r0	; <UNPREDICTABLE>
   18998:	andeq	r4, r6, r8, asr #10
   1899c:			; <UNDEFINED> instruction: 0x0004efb8
   189a0:	andeq	lr, r4, r4, lsr sp
   189a4:	ldrdeq	lr, [r4], -ip
   189a8:	ldr	r7, [pc, #-24]	; 18998 <__assert_fail@plt+0x63a4>
   189ac:	ldr	r1, [pc, #-44]	; 18988 <__assert_fail@plt+0x6394>
   189b0:	ldr	r0, [r7]
   189b4:	bl	1233c <fprintf@plt>
   189b8:	ldr	r2, [r5, #160]	; 0xa0
   189bc:	ldr	r1, [r7]
   189c0:	ldr	r3, [r2, #36]	; 0x24
   189c4:	cmp	r3, #0
   189c8:	beq	18b2c <__assert_fail@plt+0x6538>
   189cc:	mov	r0, r1
   189d0:	ldr	r2, [r2, #4]
   189d4:	ldr	r1, [pc, #-60]	; 189a0 <__assert_fail@plt+0x63ac>
   189d8:	bl	1233c <fprintf@plt>
   189dc:	ldr	r2, [r5, #160]	; 0xa0
   189e0:	ldr	r3, [pc, #-92]	; 1898c <__assert_fail@plt+0x6398>
   189e4:	ldr	r0, [r7]
   189e8:	ldr	r2, [r2, #24]
   189ec:	ldr	r1, [r3, #472]	; 0x1d8
   189f0:	cmp	r1, r2
   189f4:	beq	18b38 <__assert_fail@plt+0x6544>
   189f8:	ldr	r1, [r3, #480]	; 0x1e0
   189fc:	cmp	r1, r2
   18a00:	beq	18b48 <__assert_fail@plt+0x6554>
   18a04:	ldr	r1, [r3, #488]	; 0x1e8
   18a08:	cmp	r1, r2
   18a0c:	beq	18b40 <__assert_fail@plt+0x654c>
   18a10:	ldr	r1, [r3, #496]	; 0x1f0
   18a14:	cmp	r2, r1
   18a18:	beq	18b68 <__assert_fail@plt+0x6574>
   18a1c:	ldr	r1, [r3, #504]	; 0x1f8
   18a20:	cmp	r1, r2
   18a24:	beq	18b60 <__assert_fail@plt+0x656c>
   18a28:	ldr	r1, [r3, #512]	; 0x200
   18a2c:	cmp	r2, r1
   18a30:	beq	18b58 <__assert_fail@plt+0x6564>
   18a34:	ldr	r1, [r3, #520]	; 0x208
   18a38:	cmp	r2, r1
   18a3c:	beq	18b50 <__assert_fail@plt+0x655c>
   18a40:	ldr	r1, [r3, #528]	; 0x210
   18a44:	cmp	r2, r1
   18a48:	beq	18b78 <__assert_fail@plt+0x6584>
   18a4c:	ldr	r1, [r3, #536]	; 0x218
   18a50:	cmp	r2, r1
   18a54:	beq	18b70 <__assert_fail@plt+0x657c>
   18a58:	ldr	r1, [r3, #544]	; 0x220
   18a5c:	cmp	r2, r1
   18a60:	beq	18b1c <__assert_fail@plt+0x6528>
   18a64:	ldr	r1, [r3, #552]	; 0x228
   18a68:	cmp	r2, r1
   18a6c:	moveq	r2, #10
   18a70:	beq	18b20 <__assert_fail@plt+0x652c>
   18a74:	ldr	r2, [pc, #-236]	; 18990 <__assert_fail@plt+0x639c>
   18a78:	ldr	r1, [pc, #-236]	; 18994 <__assert_fail@plt+0x63a0>
   18a7c:	bl	1233c <fprintf@plt>
   18a80:	ldr	r3, [r5, #160]	; 0xa0
   18a84:	ldr	r3, [r3, #24]
   18a88:	b	18788 <__assert_fail@plt+0x6194>
   18a8c:	ldr	r7, [pc, #-252]	; 18998 <__assert_fail@plt+0x63a4>
   18a90:	ldrh	r2, [r9, #68]	; 0x44
   18a94:	ldr	r1, [pc, #-256]	; 1899c <__assert_fail@plt+0x63a8>
   18a98:	ldr	r0, [r7]
   18a9c:	bl	1233c <fprintf@plt>
   18aa0:	ldr	r2, [r5, #160]	; 0xa0
   18aa4:	ldr	r0, [r7]
   18aa8:	ldr	r3, [r2, #36]	; 0x24
   18aac:	cmp	r3, #0
   18ab0:	beq	18b0c <__assert_fail@plt+0x6518>
   18ab4:	ldr	r2, [r2, #4]
   18ab8:	ldr	r1, [pc, #-288]	; 189a0 <__assert_fail@plt+0x63ac>
   18abc:	bl	1233c <fprintf@plt>
   18ac0:	ldr	r3, [r7]
   18ac4:	mov	r2, #16
   18ac8:	mov	r1, #1
   18acc:	ldr	r0, [pc, #-304]	; 189a4 <__assert_fail@plt+0x63b0>
   18ad0:	bl	12168 <fwrite@plt>
   18ad4:	b	18858 <__assert_fail@plt+0x6264>
   18ad8:	ldrb	r1, [r7, #18]
   18adc:	cmp	r1, #0
   18ae0:	beq	1877c <__assert_fail@plt+0x6188>
   18ae4:	b	18774 <__assert_fail@plt+0x6180>
   18ae8:	ldr	r3, [r5, #156]	; 0x9c
   18aec:	str	r3, [r6]
   18af0:	ldr	r2, [sp, #4]
   18af4:	ldr	r3, [sp]
   18af8:	cmp	r2, #0
   18afc:	str	r3, [r5, #156]	; 0x9c
   18b00:	str	r5, [sp]
   18b04:	streq	r5, [sp, #4]
   18b08:	b	185d4 <__assert_fail@plt+0x5fe0>
   18b0c:	mov	r1, r0
   18b10:	ldr	r0, [r2, #4]
   18b14:	bl	12588 <fputs@plt>
   18b18:	b	18ac0 <__assert_fail@plt+0x64cc>
   18b1c:	mov	r2, #9
   18b20:	add	r3, r3, r2, lsl #3
   18b24:	ldr	r2, [r3, #476]	; 0x1dc
   18b28:	b	18a78 <__assert_fail@plt+0x6484>
   18b2c:	ldr	r0, [r2, #4]
   18b30:	bl	12588 <fputs@plt>
   18b34:	b	189dc <__assert_fail@plt+0x63e8>
   18b38:	mov	r2, #0
   18b3c:	b	18b20 <__assert_fail@plt+0x652c>
   18b40:	mov	r2, #2
   18b44:	b	18b20 <__assert_fail@plt+0x652c>
   18b48:	mov	r2, #1
   18b4c:	b	18b20 <__assert_fail@plt+0x652c>
   18b50:	mov	r2, #6
   18b54:	b	18b20 <__assert_fail@plt+0x652c>
   18b58:	mov	r2, #5
   18b5c:	b	18b20 <__assert_fail@plt+0x652c>
   18b60:	mov	r2, #4
   18b64:	b	18b20 <__assert_fail@plt+0x652c>
   18b68:	mov	r2, #3
   18b6c:	b	18b20 <__assert_fail@plt+0x652c>
   18b70:	mov	r2, #8
   18b74:	b	18b20 <__assert_fail@plt+0x652c>
   18b78:	mov	r2, #7
   18b7c:	b	18b20 <__assert_fail@plt+0x652c>
   18b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b84:	vpush	{d8}
   18b88:	subs	r6, r0, #0
   18b8c:	sub	sp, sp, #44	; 0x2c
   18b90:	beq	18c50 <__assert_fail@plt+0x665c>
   18b94:	ldr	fp, [pc, #3116]	; 197c8 <__assert_fail@plt+0x71d4>
   18b98:	ldr	sl, [pc, #3116]	; 197cc <__assert_fail@plt+0x71d8>
   18b9c:	ldr	r3, [fp, #44]	; 0x2c
   18ba0:	and	r5, r3, #8
   18ba4:	ldr	r3, [r6, #8]
   18ba8:	cmp	r3, #3
   18bac:	ldrne	r2, [pc, #3100]	; 197d0 <__assert_fail@plt+0x71dc>
   18bb0:	beq	18c00 <__assert_fail@plt+0x660c>
   18bb4:	cmp	r5, #0
   18bb8:	beq	18bd8 <__assert_fail@plt+0x65e4>
   18bbc:	ldr	r1, [pc, #3088]	; 197d4 <__assert_fail@plt+0x71e0>
   18bc0:	ldr	r0, [sl]
   18bc4:	bl	1233c <fprintf@plt>
   18bc8:	mov	r2, #0
   18bcc:	mov	r1, r6
   18bd0:	ldr	r0, [sl]
   18bd4:	bl	17d08 <__assert_fail@plt+0x5714>
   18bd8:	ldr	r0, [r6, #156]	; 0x9c
   18bdc:	bl	18b80 <__assert_fail@plt+0x658c>
   18be0:	cmp	r0, #0
   18be4:	beq	18c40 <__assert_fail@plt+0x664c>
   18be8:	ldr	r3, [r6, #8]
   18bec:	ldr	r5, [fp, #44]	; 0x2c
   18bf0:	cmp	r3, #3
   18bf4:	and	r5, r5, #8
   18bf8:	ldrne	r2, [pc, #3024]	; 197d0 <__assert_fail@plt+0x71dc>
   18bfc:	bne	18bb4 <__assert_fail@plt+0x65c0>
   18c00:	ldr	r3, [r6, #156]	; 0x9c
   18c04:	cmp	r3, #0
   18c08:	beq	18c60 <__assert_fail@plt+0x666c>
   18c0c:	ldr	r2, [r6, #160]	; 0xa0
   18c10:	cmp	r2, #0
   18c14:	str	r2, [sp, #12]
   18c18:	beq	18c60 <__assert_fail@plt+0x666c>
   18c1c:	ldr	r7, [r3, #160]	; 0xa0
   18c20:	cmp	r7, #0
   18c24:	ldreq	r2, [pc, #2988]	; 197d8 <__assert_fail@plt+0x71e4>
   18c28:	beq	18bb4 <__assert_fail@plt+0x65c0>
   18c2c:	ldrb	r3, [r7, #16]
   18c30:	cmp	r3, #0
   18c34:	beq	18c68 <__assert_fail@plt+0x6674>
   18c38:	ldr	r2, [pc, #2972]	; 197dc <__assert_fail@plt+0x71e8>
   18c3c:	b	18bb4 <__assert_fail@plt+0x65c0>
   18c40:	ldr	r0, [r6, #160]	; 0xa0
   18c44:	bl	18b80 <__assert_fail@plt+0x658c>
   18c48:	cmp	r0, #0
   18c4c:	bne	18be8 <__assert_fail@plt+0x65f4>
   18c50:	mov	r0, #0
   18c54:	add	sp, sp, #44	; 0x2c
   18c58:	vpop	{d8}
   18c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c60:	ldr	r2, [pc, #2936]	; 197e0 <__assert_fail@plt+0x71ec>
   18c64:	b	18bb4 <__assert_fail@plt+0x65c0>
   18c68:	ldr	r3, [r7, #156]	; 0x9c
   18c6c:	cmp	r3, #0
   18c70:	str	r3, [sp, #16]
   18c74:	beq	18dc4 <__assert_fail@plt+0x67d0>
   18c78:	ldrb	r3, [r3, #16]
   18c7c:	cmp	r3, #0
   18c80:	bne	18c38 <__assert_fail@plt+0x6644>
   18c84:	ldr	r3, [sp, #16]
   18c88:	ldr	r3, [r3, #156]	; 0x9c
   18c8c:	cmp	r3, #0
   18c90:	beq	18d60 <__assert_fail@plt+0x676c>
   18c94:	ldrb	r2, [r3, #16]
   18c98:	cmp	r2, #0
   18c9c:	bne	18c38 <__assert_fail@plt+0x6644>
   18ca0:	ldr	r2, [r3, #156]	; 0x9c
   18ca4:	cmp	r2, #0
   18ca8:	beq	18d00 <__assert_fail@plt+0x670c>
   18cac:	ldrb	r1, [r2, #16]
   18cb0:	cmp	r1, #0
   18cb4:	bne	18c38 <__assert_fail@plt+0x6644>
   18cb8:	ldr	r1, [r2, #156]	; 0x9c
   18cbc:	cmp	r1, #0
   18cc0:	beq	18cf0 <__assert_fail@plt+0x66fc>
   18cc4:	ldrb	r0, [r1, #16]
   18cc8:	cmp	r0, #0
   18ccc:	bne	18c38 <__assert_fail@plt+0x6644>
   18cd0:	ldr	r0, [r1, #156]	; 0x9c
   18cd4:	bl	172fc <__assert_fail@plt+0x4d08>
   18cd8:	cmp	r0, #0
   18cdc:	bne	18c38 <__assert_fail@plt+0x6644>
   18ce0:	ldr	r0, [r1, #160]	; 0xa0
   18ce4:	bl	172fc <__assert_fail@plt+0x4d08>
   18ce8:	cmp	r0, #0
   18cec:	bne	18c38 <__assert_fail@plt+0x6644>
   18cf0:	ldr	r0, [r2, #160]	; 0xa0
   18cf4:	bl	172fc <__assert_fail@plt+0x4d08>
   18cf8:	cmp	r0, #0
   18cfc:	bne	18c38 <__assert_fail@plt+0x6644>
   18d00:	ldr	r3, [r3, #160]	; 0xa0
   18d04:	cmp	r3, #0
   18d08:	beq	18d60 <__assert_fail@plt+0x676c>
   18d0c:	ldrb	r2, [r3, #16]
   18d10:	cmp	r2, #0
   18d14:	bne	18c38 <__assert_fail@plt+0x6644>
   18d18:	ldr	r2, [r3, #156]	; 0x9c
   18d1c:	cmp	r2, #0
   18d20:	beq	18d50 <__assert_fail@plt+0x675c>
   18d24:	ldrb	r1, [r2, #16]
   18d28:	cmp	r1, #0
   18d2c:	bne	18c38 <__assert_fail@plt+0x6644>
   18d30:	ldr	r0, [r2, #156]	; 0x9c
   18d34:	bl	172fc <__assert_fail@plt+0x4d08>
   18d38:	cmp	r0, #0
   18d3c:	bne	18c38 <__assert_fail@plt+0x6644>
   18d40:	ldr	r0, [r2, #160]	; 0xa0
   18d44:	bl	172fc <__assert_fail@plt+0x4d08>
   18d48:	cmp	r0, #0
   18d4c:	bne	18c38 <__assert_fail@plt+0x6644>
   18d50:	ldr	r0, [r3, #160]	; 0xa0
   18d54:	bl	172fc <__assert_fail@plt+0x4d08>
   18d58:	cmp	r0, #0
   18d5c:	bne	18c38 <__assert_fail@plt+0x6644>
   18d60:	ldr	r3, [sp, #16]
   18d64:	ldr	r3, [r3, #160]	; 0xa0
   18d68:	cmp	r3, #0
   18d6c:	beq	18dc4 <__assert_fail@plt+0x67d0>
   18d70:	ldrb	r2, [r3, #16]
   18d74:	cmp	r2, #0
   18d78:	bne	18c38 <__assert_fail@plt+0x6644>
   18d7c:	ldr	r2, [r3, #156]	; 0x9c
   18d80:	cmp	r2, #0
   18d84:	beq	18db4 <__assert_fail@plt+0x67c0>
   18d88:	ldrb	r1, [r2, #16]
   18d8c:	cmp	r1, #0
   18d90:	bne	18c38 <__assert_fail@plt+0x6644>
   18d94:	ldr	r0, [r2, #156]	; 0x9c
   18d98:	bl	172fc <__assert_fail@plt+0x4d08>
   18d9c:	cmp	r0, #0
   18da0:	bne	18c38 <__assert_fail@plt+0x6644>
   18da4:	ldr	r0, [r2, #160]	; 0xa0
   18da8:	bl	172fc <__assert_fail@plt+0x4d08>
   18dac:	cmp	r0, #0
   18db0:	bne	18c38 <__assert_fail@plt+0x6644>
   18db4:	ldr	r0, [r3, #160]	; 0xa0
   18db8:	bl	172fc <__assert_fail@plt+0x4d08>
   18dbc:	cmp	r0, #0
   18dc0:	bne	18c38 <__assert_fail@plt+0x6644>
   18dc4:	ldr	r3, [r7, #160]	; 0xa0
   18dc8:	cmp	r3, #0
   18dcc:	str	r3, [sp, #28]
   18dd0:	beq	18ea8 <__assert_fail@plt+0x68b4>
   18dd4:	ldrb	r3, [r3, #16]
   18dd8:	cmp	r3, #0
   18ddc:	bne	18c38 <__assert_fail@plt+0x6644>
   18de0:	ldr	r3, [sp, #28]
   18de4:	ldr	r3, [r3, #156]	; 0x9c
   18de8:	cmp	r3, #0
   18dec:	beq	18e44 <__assert_fail@plt+0x6850>
   18df0:	ldrb	r2, [r3, #16]
   18df4:	cmp	r2, #0
   18df8:	bne	18c38 <__assert_fail@plt+0x6644>
   18dfc:	ldr	r2, [r3, #156]	; 0x9c
   18e00:	cmp	r2, #0
   18e04:	beq	18e34 <__assert_fail@plt+0x6840>
   18e08:	ldrb	r1, [r2, #16]
   18e0c:	cmp	r1, #0
   18e10:	bne	18c38 <__assert_fail@plt+0x6644>
   18e14:	ldr	r0, [r2, #156]	; 0x9c
   18e18:	bl	172fc <__assert_fail@plt+0x4d08>
   18e1c:	cmp	r0, #0
   18e20:	bne	18c38 <__assert_fail@plt+0x6644>
   18e24:	ldr	r0, [r2, #160]	; 0xa0
   18e28:	bl	172fc <__assert_fail@plt+0x4d08>
   18e2c:	cmp	r0, #0
   18e30:	bne	18c38 <__assert_fail@plt+0x6644>
   18e34:	ldr	r0, [r3, #160]	; 0xa0
   18e38:	bl	172fc <__assert_fail@plt+0x4d08>
   18e3c:	cmp	r0, #0
   18e40:	bne	18c38 <__assert_fail@plt+0x6644>
   18e44:	ldr	r3, [sp, #28]
   18e48:	ldr	r3, [r3, #160]	; 0xa0
   18e4c:	cmp	r3, #0
   18e50:	beq	18ea8 <__assert_fail@plt+0x68b4>
   18e54:	ldrb	r2, [r3, #16]
   18e58:	cmp	r2, #0
   18e5c:	bne	18c38 <__assert_fail@plt+0x6644>
   18e60:	ldr	r2, [r3, #156]	; 0x9c
   18e64:	cmp	r2, #0
   18e68:	beq	18e98 <__assert_fail@plt+0x68a4>
   18e6c:	ldrb	r1, [r2, #16]
   18e70:	cmp	r1, #0
   18e74:	bne	18c38 <__assert_fail@plt+0x6644>
   18e78:	ldr	r0, [r2, #156]	; 0x9c
   18e7c:	bl	172fc <__assert_fail@plt+0x4d08>
   18e80:	cmp	r0, #0
   18e84:	bne	18c38 <__assert_fail@plt+0x6644>
   18e88:	ldr	r0, [r2, #160]	; 0xa0
   18e8c:	bl	172fc <__assert_fail@plt+0x4d08>
   18e90:	cmp	r0, #0
   18e94:	bne	18c38 <__assert_fail@plt+0x6644>
   18e98:	ldr	r0, [r3, #160]	; 0xa0
   18e9c:	bl	172fc <__assert_fail@plt+0x4d08>
   18ea0:	cmp	r0, #0
   18ea4:	bne	18c38 <__assert_fail@plt+0x6644>
   18ea8:	ldr	r3, [sp, #12]
   18eac:	ldrb	r3, [r3, #16]
   18eb0:	cmp	r3, #0
   18eb4:	beq	18ec0 <__assert_fail@plt+0x68cc>
   18eb8:	ldr	r2, [pc, #2340]	; 197e4 <__assert_fail@plt+0x71f0>
   18ebc:	b	18bb4 <__assert_fail@plt+0x65c0>
   18ec0:	ldr	r3, [sp, #12]
   18ec4:	ldr	r3, [r3, #156]	; 0x9c
   18ec8:	cmp	r3, #0
   18ecc:	str	r3, [sp, #20]
   18ed0:	beq	19020 <__assert_fail@plt+0x6a2c>
   18ed4:	ldrb	r3, [r3, #16]
   18ed8:	cmp	r3, #0
   18edc:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18ee0:	ldr	r3, [sp, #20]
   18ee4:	ldr	r3, [r3, #156]	; 0x9c
   18ee8:	cmp	r3, #0
   18eec:	beq	18fbc <__assert_fail@plt+0x69c8>
   18ef0:	ldrb	r2, [r3, #16]
   18ef4:	cmp	r2, #0
   18ef8:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18efc:	ldr	r1, [r3, #156]	; 0x9c
   18f00:	cmp	r1, #0
   18f04:	beq	18f5c <__assert_fail@plt+0x6968>
   18f08:	ldrb	r2, [r1, #16]
   18f0c:	cmp	r2, #0
   18f10:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18f14:	ldr	r2, [r1, #156]	; 0x9c
   18f18:	cmp	r2, #0
   18f1c:	beq	18f4c <__assert_fail@plt+0x6958>
   18f20:	ldrb	r0, [r2, #16]
   18f24:	cmp	r0, #0
   18f28:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18f2c:	ldr	r0, [r2, #156]	; 0x9c
   18f30:	bl	172fc <__assert_fail@plt+0x4d08>
   18f34:	cmp	r0, #0
   18f38:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18f3c:	ldr	r0, [r2, #160]	; 0xa0
   18f40:	bl	172fc <__assert_fail@plt+0x4d08>
   18f44:	cmp	r0, #0
   18f48:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18f4c:	ldr	r0, [r1, #160]	; 0xa0
   18f50:	bl	172fc <__assert_fail@plt+0x4d08>
   18f54:	cmp	r0, #0
   18f58:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18f5c:	ldr	r3, [r3, #160]	; 0xa0
   18f60:	cmp	r3, #0
   18f64:	beq	18fbc <__assert_fail@plt+0x69c8>
   18f68:	ldrb	r2, [r3, #16]
   18f6c:	cmp	r2, #0
   18f70:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18f74:	ldr	r2, [r3, #156]	; 0x9c
   18f78:	cmp	r2, #0
   18f7c:	beq	18fac <__assert_fail@plt+0x69b8>
   18f80:	ldrb	r1, [r2, #16]
   18f84:	cmp	r1, #0
   18f88:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18f8c:	ldr	r0, [r2, #156]	; 0x9c
   18f90:	bl	172fc <__assert_fail@plt+0x4d08>
   18f94:	cmp	r0, #0
   18f98:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18f9c:	ldr	r0, [r2, #160]	; 0xa0
   18fa0:	bl	172fc <__assert_fail@plt+0x4d08>
   18fa4:	cmp	r0, #0
   18fa8:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18fac:	ldr	r0, [r3, #160]	; 0xa0
   18fb0:	bl	172fc <__assert_fail@plt+0x4d08>
   18fb4:	cmp	r0, #0
   18fb8:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18fbc:	ldr	r3, [sp, #20]
   18fc0:	ldr	r3, [r3, #160]	; 0xa0
   18fc4:	cmp	r3, #0
   18fc8:	beq	19020 <__assert_fail@plt+0x6a2c>
   18fcc:	ldrb	r2, [r3, #16]
   18fd0:	cmp	r2, #0
   18fd4:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18fd8:	ldr	r2, [r3, #156]	; 0x9c
   18fdc:	cmp	r2, #0
   18fe0:	beq	19010 <__assert_fail@plt+0x6a1c>
   18fe4:	ldrb	r1, [r2, #16]
   18fe8:	cmp	r1, #0
   18fec:	bne	18eb8 <__assert_fail@plt+0x68c4>
   18ff0:	ldr	r0, [r2, #156]	; 0x9c
   18ff4:	bl	172fc <__assert_fail@plt+0x4d08>
   18ff8:	cmp	r0, #0
   18ffc:	bne	18eb8 <__assert_fail@plt+0x68c4>
   19000:	ldr	r0, [r2, #160]	; 0xa0
   19004:	bl	172fc <__assert_fail@plt+0x4d08>
   19008:	cmp	r0, #0
   1900c:	bne	18eb8 <__assert_fail@plt+0x68c4>
   19010:	ldr	r0, [r3, #160]	; 0xa0
   19014:	bl	172fc <__assert_fail@plt+0x4d08>
   19018:	cmp	r0, #0
   1901c:	bne	18eb8 <__assert_fail@plt+0x68c4>
   19020:	ldr	r3, [sp, #12]
   19024:	ldr	r3, [r3, #160]	; 0xa0
   19028:	cmp	r3, #0
   1902c:	str	r3, [sp, #24]
   19030:	beq	19108 <__assert_fail@plt+0x6b14>
   19034:	ldrb	r3, [r3, #16]
   19038:	cmp	r3, #0
   1903c:	bne	18eb8 <__assert_fail@plt+0x68c4>
   19040:	ldr	r3, [sp, #24]
   19044:	ldr	r3, [r3, #156]	; 0x9c
   19048:	cmp	r3, #0
   1904c:	beq	190a4 <__assert_fail@plt+0x6ab0>
   19050:	ldrb	r2, [r3, #16]
   19054:	cmp	r2, #0
   19058:	bne	18eb8 <__assert_fail@plt+0x68c4>
   1905c:	ldr	r2, [r3, #156]	; 0x9c
   19060:	cmp	r2, #0
   19064:	beq	19094 <__assert_fail@plt+0x6aa0>
   19068:	ldrb	r1, [r2, #16]
   1906c:	cmp	r1, #0
   19070:	bne	18eb8 <__assert_fail@plt+0x68c4>
   19074:	ldr	r0, [r2, #156]	; 0x9c
   19078:	bl	172fc <__assert_fail@plt+0x4d08>
   1907c:	cmp	r0, #0
   19080:	bne	18eb8 <__assert_fail@plt+0x68c4>
   19084:	ldr	r0, [r2, #160]	; 0xa0
   19088:	bl	172fc <__assert_fail@plt+0x4d08>
   1908c:	cmp	r0, #0
   19090:	bne	18eb8 <__assert_fail@plt+0x68c4>
   19094:	ldr	r0, [r3, #160]	; 0xa0
   19098:	bl	172fc <__assert_fail@plt+0x4d08>
   1909c:	cmp	r0, #0
   190a0:	bne	18eb8 <__assert_fail@plt+0x68c4>
   190a4:	ldr	r3, [sp, #24]
   190a8:	ldr	r3, [r3, #160]	; 0xa0
   190ac:	cmp	r3, #0
   190b0:	beq	19108 <__assert_fail@plt+0x6b14>
   190b4:	ldrb	r2, [r3, #16]
   190b8:	cmp	r2, #0
   190bc:	bne	18eb8 <__assert_fail@plt+0x68c4>
   190c0:	ldr	r2, [r3, #156]	; 0x9c
   190c4:	cmp	r2, #0
   190c8:	beq	190f8 <__assert_fail@plt+0x6b04>
   190cc:	ldrb	r1, [r2, #16]
   190d0:	cmp	r1, #0
   190d4:	bne	18eb8 <__assert_fail@plt+0x68c4>
   190d8:	ldr	r0, [r2, #156]	; 0x9c
   190dc:	bl	172fc <__assert_fail@plt+0x4d08>
   190e0:	cmp	r0, #0
   190e4:	bne	18eb8 <__assert_fail@plt+0x68c4>
   190e8:	ldr	r0, [r2, #160]	; 0xa0
   190ec:	bl	172fc <__assert_fail@plt+0x4d08>
   190f0:	cmp	r0, #0
   190f4:	bne	18eb8 <__assert_fail@plt+0x68c4>
   190f8:	ldr	r0, [r3, #160]	; 0xa0
   190fc:	bl	172fc <__assert_fail@plt+0x4d08>
   19100:	cmp	r0, #0
   19104:	bne	18eb8 <__assert_fail@plt+0x68c4>
   19108:	ldr	r3, [sp, #16]
   1910c:	cmp	r3, #0
   19110:	moveq	r4, r3
   19114:	beq	19260 <__assert_fail@plt+0x6c6c>
   19118:	ldr	r8, [r3, #156]	; 0x9c
   1911c:	cmp	r8, #0
   19120:	beq	191a8 <__assert_fail@plt+0x6bb4>
   19124:	ldr	r9, [r8, #156]	; 0x9c
   19128:	cmp	r9, #0
   1912c:	beq	19158 <__assert_fail@plt+0x6b64>
   19130:	ldr	r0, [r9, #156]	; 0x9c
   19134:	bl	16a60 <__assert_fail@plt+0x446c>
   19138:	mov	r4, r0
   1913c:	ldr	r0, [r9, #160]	; 0xa0
   19140:	bl	16a60 <__assert_fail@plt+0x446c>
   19144:	ldr	r9, [r9, #24]
   19148:	cmp	r4, r0
   1914c:	movcs	r0, r4
   19150:	cmp	r0, r9
   19154:	movcs	r9, r0
   19158:	ldr	r4, [r8, #160]	; 0xa0
   1915c:	cmp	r4, #0
   19160:	beq	19190 <__assert_fail@plt+0x6b9c>
   19164:	ldr	r0, [r4, #156]	; 0x9c
   19168:	bl	16a60 <__assert_fail@plt+0x446c>
   1916c:	str	r0, [sp, #32]
   19170:	ldr	r0, [r4, #160]	; 0xa0
   19174:	bl	16a60 <__assert_fail@plt+0x446c>
   19178:	ldr	r3, [sp, #32]
   1917c:	ldr	r4, [r4, #24]
   19180:	cmp	r3, r0
   19184:	movcs	r0, r3
   19188:	cmp	r0, r4
   1918c:	movcs	r4, r0
   19190:	ldr	r8, [r8, #24]
   19194:	ldr	r3, [sp, #16]
   19198:	cmp	r9, r8
   1919c:	movcs	r8, r9
   191a0:	cmp	r8, r4
   191a4:	movcc	r8, r4
   191a8:	ldr	r3, [r3, #160]	; 0xa0
   191ac:	cmp	r3, #0
   191b0:	moveq	r4, r3
   191b4:	beq	19248 <__assert_fail@plt+0x6c54>
   191b8:	ldr	r9, [r3, #156]	; 0x9c
   191bc:	cmp	r9, #0
   191c0:	beq	191f4 <__assert_fail@plt+0x6c00>
   191c4:	ldr	r0, [r9, #156]	; 0x9c
   191c8:	str	r3, [sp, #32]
   191cc:	bl	16a60 <__assert_fail@plt+0x446c>
   191d0:	mov	r4, r0
   191d4:	ldr	r0, [r9, #160]	; 0xa0
   191d8:	bl	16a60 <__assert_fail@plt+0x446c>
   191dc:	ldr	r9, [r9, #24]
   191e0:	ldr	r3, [sp, #32]
   191e4:	cmp	r4, r0
   191e8:	movcs	r0, r4
   191ec:	cmp	r0, r9
   191f0:	movcs	r9, r0
   191f4:	ldr	r4, [r3, #160]	; 0xa0
   191f8:	cmp	r4, #0
   191fc:	beq	19234 <__assert_fail@plt+0x6c40>
   19200:	ldr	r0, [r4, #156]	; 0x9c
   19204:	str	r3, [sp, #36]	; 0x24
   19208:	bl	16a60 <__assert_fail@plt+0x446c>
   1920c:	str	r0, [sp, #32]
   19210:	ldr	r0, [r4, #160]	; 0xa0
   19214:	bl	16a60 <__assert_fail@plt+0x446c>
   19218:	ldr	r2, [sp, #32]
   1921c:	ldr	r4, [r4, #24]
   19220:	ldr	r3, [sp, #36]	; 0x24
   19224:	cmp	r2, r0
   19228:	movcs	r0, r2
   1922c:	cmp	r0, r4
   19230:	movcs	r4, r0
   19234:	ldr	r3, [r3, #24]
   19238:	cmp	r9, r3
   1923c:	movcs	r3, r9
   19240:	cmp	r3, r4
   19244:	movcs	r4, r3
   19248:	ldr	r3, [sp, #16]
   1924c:	ldr	r3, [r3, #24]
   19250:	cmp	r8, r3
   19254:	movcc	r8, r3
   19258:	cmp	r8, r4
   1925c:	movcs	r4, r8
   19260:	ldr	r3, [sp, #28]
   19264:	cmp	r3, #0
   19268:	moveq	r2, r3
   1926c:	beq	193dc <__assert_fail@plt+0x6de8>
   19270:	ldr	r3, [r3, #156]	; 0x9c
   19274:	cmp	r3, #0
   19278:	moveq	r8, r3
   1927c:	beq	19310 <__assert_fail@plt+0x6d1c>
   19280:	ldr	r9, [r3, #156]	; 0x9c
   19284:	cmp	r9, #0
   19288:	beq	192bc <__assert_fail@plt+0x6cc8>
   1928c:	ldr	r0, [r9, #156]	; 0x9c
   19290:	str	r3, [sp, #16]
   19294:	bl	16a60 <__assert_fail@plt+0x446c>
   19298:	mov	r8, r0
   1929c:	ldr	r0, [r9, #160]	; 0xa0
   192a0:	bl	16a60 <__assert_fail@plt+0x446c>
   192a4:	ldr	r9, [r9, #24]
   192a8:	ldr	r3, [sp, #16]
   192ac:	cmp	r8, r0
   192b0:	movcs	r0, r8
   192b4:	cmp	r0, r9
   192b8:	movcs	r9, r0
   192bc:	ldr	r8, [r3, #160]	; 0xa0
   192c0:	cmp	r8, #0
   192c4:	beq	192fc <__assert_fail@plt+0x6d08>
   192c8:	ldr	r0, [r8, #156]	; 0x9c
   192cc:	str	r3, [sp, #32]
   192d0:	bl	16a60 <__assert_fail@plt+0x446c>
   192d4:	str	r0, [sp, #16]
   192d8:	ldr	r0, [r8, #160]	; 0xa0
   192dc:	bl	16a60 <__assert_fail@plt+0x446c>
   192e0:	ldr	r2, [sp, #16]
   192e4:	ldr	r8, [r8, #24]
   192e8:	ldr	r3, [sp, #32]
   192ec:	cmp	r2, r0
   192f0:	movcs	r0, r2
   192f4:	cmp	r0, r8
   192f8:	movcs	r8, r0
   192fc:	ldr	r3, [r3, #24]
   19300:	cmp	r9, r3
   19304:	movcc	r9, r3
   19308:	cmp	r9, r8
   1930c:	movcs	r8, r9
   19310:	ldr	r3, [sp, #28]
   19314:	ldr	r2, [r3, #160]	; 0xa0
   19318:	cmp	r2, #0
   1931c:	beq	193c8 <__assert_fail@plt+0x6dd4>
   19320:	ldr	r9, [r2, #156]	; 0x9c
   19324:	cmp	r9, #0
   19328:	streq	r9, [sp, #16]
   1932c:	beq	19368 <__assert_fail@plt+0x6d74>
   19330:	ldr	r0, [r9, #156]	; 0x9c
   19334:	str	r2, [sp, #32]
   19338:	bl	16a60 <__assert_fail@plt+0x446c>
   1933c:	str	r0, [sp, #16]
   19340:	ldr	r0, [r9, #160]	; 0xa0
   19344:	bl	16a60 <__assert_fail@plt+0x446c>
   19348:	ldr	r1, [sp, #16]
   1934c:	ldr	r3, [r9, #24]
   19350:	ldr	r2, [sp, #32]
   19354:	cmp	r1, r0
   19358:	movcs	r0, r1
   1935c:	cmp	r0, r3
   19360:	movcs	r3, r0
   19364:	str	r3, [sp, #16]
   19368:	ldr	r9, [r2, #160]	; 0xa0
   1936c:	cmp	r9, #0
   19370:	moveq	r3, r9
   19374:	beq	193ac <__assert_fail@plt+0x6db8>
   19378:	ldr	r0, [r9, #156]	; 0x9c
   1937c:	str	r2, [sp, #36]	; 0x24
   19380:	bl	16a60 <__assert_fail@plt+0x446c>
   19384:	str	r0, [sp, #32]
   19388:	ldr	r0, [r9, #160]	; 0xa0
   1938c:	bl	16a60 <__assert_fail@plt+0x446c>
   19390:	ldr	r1, [sp, #32]
   19394:	ldr	r3, [r9, #24]
   19398:	ldr	r2, [sp, #36]	; 0x24
   1939c:	cmp	r1, r0
   193a0:	movcs	r0, r1
   193a4:	cmp	r0, r3
   193a8:	movcs	r3, r0
   193ac:	ldr	r2, [r2, #24]
   193b0:	ldr	r1, [sp, #16]
   193b4:	cmp	r1, r2
   193b8:	movcs	r2, r1
   193bc:	cmp	r2, r3
   193c0:	movcc	r2, r3
   193c4:	ldr	r3, [sp, #28]
   193c8:	ldr	r3, [r3, #24]
   193cc:	cmp	r8, r3
   193d0:	movcc	r8, r3
   193d4:	cmp	r8, r2
   193d8:	movcs	r2, r8
   193dc:	ldr	r3, [r7, #24]
   193e0:	cmp	r4, r3
   193e4:	movcc	r4, r3
   193e8:	cmp	r4, r2
   193ec:	movcs	r3, r4
   193f0:	movcc	r3, r2
   193f4:	str	r3, [sp, #16]
   193f8:	ldr	r3, [sp, #20]
   193fc:	cmp	r3, #0
   19400:	moveq	r4, r3
   19404:	beq	19550 <__assert_fail@plt+0x6f5c>
   19408:	ldr	r8, [r3, #156]	; 0x9c
   1940c:	cmp	r8, #0
   19410:	beq	19498 <__assert_fail@plt+0x6ea4>
   19414:	ldr	r9, [r8, #156]	; 0x9c
   19418:	cmp	r9, #0
   1941c:	beq	19448 <__assert_fail@plt+0x6e54>
   19420:	ldr	r0, [r9, #156]	; 0x9c
   19424:	bl	16a60 <__assert_fail@plt+0x446c>
   19428:	mov	r4, r0
   1942c:	ldr	r0, [r9, #160]	; 0xa0
   19430:	bl	16a60 <__assert_fail@plt+0x446c>
   19434:	ldr	r9, [r9, #24]
   19438:	cmp	r4, r0
   1943c:	movcs	r0, r4
   19440:	cmp	r0, r9
   19444:	movcs	r9, r0
   19448:	ldr	r4, [r8, #160]	; 0xa0
   1944c:	cmp	r4, #0
   19450:	beq	19480 <__assert_fail@plt+0x6e8c>
   19454:	ldr	r0, [r4, #156]	; 0x9c
   19458:	bl	16a60 <__assert_fail@plt+0x446c>
   1945c:	str	r0, [sp, #28]
   19460:	ldr	r0, [r4, #160]	; 0xa0
   19464:	bl	16a60 <__assert_fail@plt+0x446c>
   19468:	ldr	r3, [sp, #28]
   1946c:	ldr	r4, [r4, #24]
   19470:	cmp	r3, r0
   19474:	movcs	r0, r3
   19478:	cmp	r0, r4
   1947c:	movcs	r4, r0
   19480:	ldr	r8, [r8, #24]
   19484:	ldr	r3, [sp, #20]
   19488:	cmp	r9, r8
   1948c:	movcs	r8, r9
   19490:	cmp	r8, r4
   19494:	movcc	r8, r4
   19498:	ldr	r3, [r3, #160]	; 0xa0
   1949c:	cmp	r3, #0
   194a0:	moveq	r4, r3
   194a4:	beq	19538 <__assert_fail@plt+0x6f44>
   194a8:	ldr	r9, [r3, #156]	; 0x9c
   194ac:	cmp	r9, #0
   194b0:	beq	194e4 <__assert_fail@plt+0x6ef0>
   194b4:	ldr	r0, [r9, #156]	; 0x9c
   194b8:	str	r3, [sp, #28]
   194bc:	bl	16a60 <__assert_fail@plt+0x446c>
   194c0:	mov	r4, r0
   194c4:	ldr	r0, [r9, #160]	; 0xa0
   194c8:	bl	16a60 <__assert_fail@plt+0x446c>
   194cc:	ldr	r9, [r9, #24]
   194d0:	ldr	r3, [sp, #28]
   194d4:	cmp	r4, r0
   194d8:	movcs	r0, r4
   194dc:	cmp	r0, r9
   194e0:	movcs	r9, r0
   194e4:	ldr	r4, [r3, #160]	; 0xa0
   194e8:	cmp	r4, #0
   194ec:	beq	19524 <__assert_fail@plt+0x6f30>
   194f0:	ldr	r0, [r4, #156]	; 0x9c
   194f4:	str	r3, [sp, #32]
   194f8:	bl	16a60 <__assert_fail@plt+0x446c>
   194fc:	str	r0, [sp, #28]
   19500:	ldr	r0, [r4, #160]	; 0xa0
   19504:	bl	16a60 <__assert_fail@plt+0x446c>
   19508:	ldr	r2, [sp, #28]
   1950c:	ldr	r4, [r4, #24]
   19510:	ldr	r3, [sp, #32]
   19514:	cmp	r2, r0
   19518:	movcs	r0, r2
   1951c:	cmp	r0, r4
   19520:	movcs	r4, r0
   19524:	ldr	r3, [r3, #24]
   19528:	cmp	r9, r3
   1952c:	movcs	r3, r9
   19530:	cmp	r3, r4
   19534:	movcs	r4, r3
   19538:	ldr	r3, [sp, #20]
   1953c:	ldr	r3, [r3, #24]
   19540:	cmp	r8, r3
   19544:	movcc	r8, r3
   19548:	cmp	r8, r4
   1954c:	movcs	r4, r8
   19550:	ldr	r3, [sp, #24]
   19554:	cmp	r3, #0
   19558:	moveq	r2, r3
   1955c:	beq	196cc <__assert_fail@plt+0x70d8>
   19560:	ldr	r3, [r3, #156]	; 0x9c
   19564:	cmp	r3, #0
   19568:	moveq	r8, r3
   1956c:	beq	19600 <__assert_fail@plt+0x700c>
   19570:	ldr	r9, [r3, #156]	; 0x9c
   19574:	cmp	r9, #0
   19578:	beq	195ac <__assert_fail@plt+0x6fb8>
   1957c:	ldr	r0, [r9, #156]	; 0x9c
   19580:	str	r3, [sp, #20]
   19584:	bl	16a60 <__assert_fail@plt+0x446c>
   19588:	mov	r8, r0
   1958c:	ldr	r0, [r9, #160]	; 0xa0
   19590:	bl	16a60 <__assert_fail@plt+0x446c>
   19594:	ldr	r9, [r9, #24]
   19598:	ldr	r3, [sp, #20]
   1959c:	cmp	r8, r0
   195a0:	movcs	r0, r8
   195a4:	cmp	r0, r9
   195a8:	movcs	r9, r0
   195ac:	ldr	r8, [r3, #160]	; 0xa0
   195b0:	cmp	r8, #0
   195b4:	beq	195ec <__assert_fail@plt+0x6ff8>
   195b8:	ldr	r0, [r8, #156]	; 0x9c
   195bc:	str	r3, [sp, #28]
   195c0:	bl	16a60 <__assert_fail@plt+0x446c>
   195c4:	str	r0, [sp, #20]
   195c8:	ldr	r0, [r8, #160]	; 0xa0
   195cc:	bl	16a60 <__assert_fail@plt+0x446c>
   195d0:	ldr	r2, [sp, #20]
   195d4:	ldr	r8, [r8, #24]
   195d8:	ldr	r3, [sp, #28]
   195dc:	cmp	r2, r0
   195e0:	movcs	r0, r2
   195e4:	cmp	r0, r8
   195e8:	movcs	r8, r0
   195ec:	ldr	r3, [r3, #24]
   195f0:	cmp	r9, r3
   195f4:	movcc	r9, r3
   195f8:	cmp	r9, r8
   195fc:	movcs	r8, r9
   19600:	ldr	r3, [sp, #24]
   19604:	ldr	r2, [r3, #160]	; 0xa0
   19608:	cmp	r2, #0
   1960c:	beq	196b8 <__assert_fail@plt+0x70c4>
   19610:	ldr	r9, [r2, #156]	; 0x9c
   19614:	cmp	r9, #0
   19618:	streq	r9, [sp, #20]
   1961c:	beq	19658 <__assert_fail@plt+0x7064>
   19620:	ldr	r0, [r9, #156]	; 0x9c
   19624:	str	r2, [sp, #28]
   19628:	bl	16a60 <__assert_fail@plt+0x446c>
   1962c:	str	r0, [sp, #20]
   19630:	ldr	r0, [r9, #160]	; 0xa0
   19634:	bl	16a60 <__assert_fail@plt+0x446c>
   19638:	ldr	r1, [sp, #20]
   1963c:	ldr	r3, [r9, #24]
   19640:	ldr	r2, [sp, #28]
   19644:	cmp	r1, r0
   19648:	movcs	r0, r1
   1964c:	cmp	r0, r3
   19650:	movcs	r3, r0
   19654:	str	r3, [sp, #20]
   19658:	ldr	r9, [r2, #160]	; 0xa0
   1965c:	cmp	r9, #0
   19660:	moveq	r3, r9
   19664:	beq	1969c <__assert_fail@plt+0x70a8>
   19668:	ldr	r0, [r9, #156]	; 0x9c
   1966c:	str	r2, [sp, #32]
   19670:	bl	16a60 <__assert_fail@plt+0x446c>
   19674:	str	r0, [sp, #28]
   19678:	ldr	r0, [r9, #160]	; 0xa0
   1967c:	bl	16a60 <__assert_fail@plt+0x446c>
   19680:	ldr	r1, [sp, #28]
   19684:	ldr	r3, [r9, #24]
   19688:	ldr	r2, [sp, #32]
   1968c:	cmp	r1, r0
   19690:	movcs	r0, r1
   19694:	cmp	r0, r3
   19698:	movcs	r3, r0
   1969c:	ldr	r2, [r2, #24]
   196a0:	ldr	r1, [sp, #20]
   196a4:	cmp	r1, r2
   196a8:	movcs	r2, r1
   196ac:	cmp	r2, r3
   196b0:	movcc	r2, r3
   196b4:	ldr	r3, [sp, #24]
   196b8:	ldr	r3, [r3, #24]
   196bc:	cmp	r8, r3
   196c0:	movcc	r8, r3
   196c4:	cmp	r8, r2
   196c8:	movcs	r2, r8
   196cc:	ldr	r3, [sp, #12]
   196d0:	ldr	r3, [r3, #24]
   196d4:	cmp	r4, r3
   196d8:	movcc	r4, r3
   196dc:	cmp	r4, r2
   196e0:	ldr	r3, [sp, #16]
   196e4:	movcc	r4, r2
   196e8:	cmp	r4, r3
   196ec:	ldrgt	r2, [pc, #244]	; 197e8 <__assert_fail@plt+0x71f4>
   196f0:	bgt	18bb4 <__assert_fail@plt+0x65c0>
   196f4:	beq	19744 <__assert_fail@plt+0x7150>
   196f8:	cmp	r5, #0
   196fc:	beq	1972c <__assert_fail@plt+0x7138>
   19700:	ldr	r3, [sl]
   19704:	mov	r2, #24
   19708:	mov	r1, #1
   1970c:	ldr	r0, [pc, #216]	; 197ec <__assert_fail@plt+0x71f8>
   19710:	bl	12168 <fwrite@plt>
   19714:	mov	r2, #0
   19718:	mov	r1, r6
   1971c:	ldr	r0, [sl]
   19720:	bl	17d08 <__assert_fail@plt+0x5714>
   19724:	ldr	r5, [fp, #44]	; 0x2c
   19728:	and	r5, r5, #8
   1972c:	ldr	r3, [r6, #156]	; 0x9c
   19730:	ldr	r1, [r6, #160]	; 0xa0
   19734:	ldr	r2, [r3, #160]	; 0xa0
   19738:	str	r1, [r3, #160]	; 0xa0
   1973c:	str	r2, [r6, #160]	; 0xa0
   19740:	b	18ba4 <__assert_fail@plt+0x65b0>
   19744:	ldr	r3, [sp, #12]
   19748:	cmp	r5, #0
   1974c:	vldr	s17, [r7, #28]
   19750:	vldr	s16, [r3, #28]
   19754:	bne	1978c <__assert_fail@plt+0x7198>
   19758:	ldr	r3, [r6]
   1975c:	ldr	r2, [pc, #140]	; 197f0 <__assert_fail@plt+0x71fc>
   19760:	cmp	r3, r2
   19764:	beq	197b4 <__assert_fail@plt+0x71c0>
   19768:	ldr	r2, [pc, #132]	; 197f4 <__assert_fail@plt+0x7200>
   1976c:	cmp	r3, r2
   19770:	ldrne	r2, [pc, #128]	; 197f8 <__assert_fail@plt+0x7204>
   19774:	bne	18bb4 <__assert_fail@plt+0x65c0>
   19778:	vcmpe.f32	s17, s16
   1977c:	vmrs	APSR_nzcv, fpscr
   19780:	bmi	196f8 <__assert_fail@plt+0x7104>
   19784:	ldr	r2, [pc, #112]	; 197fc <__assert_fail@plt+0x7208>
   19788:	b	18bb4 <__assert_fail@plt+0x65c0>
   1978c:	vcvt.f64.f32	d7, s16
   19790:	vcvt.f64.f32	d6, s17
   19794:	ldr	r0, [sl]
   19798:	ldr	r1, [pc, #96]	; 19800 <__assert_fail@plt+0x720c>
   1979c:	vstr	d7, [sp]
   197a0:	vmov	r2, r3, d6
   197a4:	bl	1233c <fprintf@plt>
   197a8:	ldr	r5, [fp, #44]	; 0x2c
   197ac:	and	r5, r5, #8
   197b0:	b	19758 <__assert_fail@plt+0x7164>
   197b4:	vcmpe.f32	s17, s16
   197b8:	vmrs	APSR_nzcv, fpscr
   197bc:	bgt	196f8 <__assert_fail@plt+0x7104>
   197c0:	ldr	r2, [pc, #60]	; 19804 <__assert_fail@plt+0x7210>
   197c4:	b	18bb4 <__assert_fail@plt+0x65c0>
   197c8:	andeq	r4, r6, ip, ror #28
   197cc:	andeq	r4, r6, r8, asr #10
   197d0:	andeq	pc, r4, r0, lsr #32
   197d4:	andeq	pc, r4, r8, ror #2
   197d8:	muleq	r4, ip, r0
   197dc:	andeq	pc, r4, ip, ror r0	; <UNPREDICTABLE>
   197e0:	strheq	pc, [r4], -ip	; <UNPREDICTABLE>
   197e4:	andeq	pc, r4, ip, asr r0	; <UNPREDICTABLE>
   197e8:	andeq	pc, r4, ip, asr #32
   197ec:	andeq	pc, r4, ip, asr #2
   197f0:			; <UNDEFINED> instruction: 0x000139b4
   197f4:	andeq	r3, r1, r4, ror r9
   197f8:	andeq	pc, r4, r8, lsr r0	; <UNPREDICTABLE>
   197fc:	ldrdeq	pc, [r4], -r4
   19800:	andeq	pc, r4, r0, lsr r1	; <UNPREDICTABLE>
   19804:	andeq	pc, r4, r4, lsl #2
   19808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1980c:	sub	sp, sp, #36	; 0x24
   19810:	ldr	r6, [pc, #1444]	; 19dbc <__assert_fail@plt+0x77c8>
   19814:	mov	r4, r1
   19818:	cmp	r2, r0
   1981c:	add	r1, r1, r2, lsl #2
   19820:	mov	r3, #0
   19824:	str	r2, [sp, #28]
   19828:	str	r0, [sp, #20]
   1982c:	str	r1, [r6, #8]
   19830:	str	r3, [r6, #16]
   19834:	movlt	r5, #1
   19838:	blt	19864 <__assert_fail@plt+0x7270>
   1983c:	b	19878 <__assert_fail@plt+0x7284>
   19840:	ldr	r2, [sp, #28]
   19844:	ldr	r3, [r6, #4]
   19848:	ldr	r1, [sp, #20]
   1984c:	add	r2, r2, #1
   19850:	add	r3, r3, #1
   19854:	cmp	r1, r2
   19858:	str	r2, [sp, #28]
   1985c:	str	r3, [r6, #4]
   19860:	ble	19878 <__assert_fail@plt+0x7284>
   19864:	ldr	r0, [r4, r2, lsl #2]
   19868:	mov	r1, r5
   1986c:	bl	1b618 <__assert_fail@plt+0x9024>
   19870:	cmp	r0, #0
   19874:	beq	19840 <__assert_fail@plt+0x724c>
   19878:	ldr	r5, [pc, #1344]	; 19dc0 <__assert_fail@plt+0x77cc>
   1987c:	mov	r0, r5
   19880:	bl	23bb8 <__assert_fail@plt+0x115c4>
   19884:	mov	r7, r0
   19888:	ldr	r0, [pc, #1332]	; 19dc4 <__assert_fail@plt+0x77d0>
   1988c:	bl	23bb8 <__assert_fail@plt+0x115c4>
   19890:	str	r0, [sp, #16]
   19894:	ldr	r0, [pc, #1324]	; 19dc8 <__assert_fail@plt+0x77d4>
   19898:	bl	23bb8 <__assert_fail@plt+0x115c4>
   1989c:	cmp	r7, #0
   198a0:	str	r0, [sp, #12]
   198a4:	beq	19d68 <__assert_fail@plt+0x7774>
   198a8:	ldr	r3, [sp, #16]
   198ac:	cmp	r3, #0
   198b0:	beq	19d54 <__assert_fail@plt+0x7760>
   198b4:	cmp	r0, #0
   198b8:	beq	19da8 <__assert_fail@plt+0x77b4>
   198bc:	add	r2, sp, #20
   198c0:	mov	r1, r4
   198c4:	mov	r0, r7
   198c8:	bl	1fe14 <__assert_fail@plt+0xd820>
   198cc:	ldr	r3, [r6, #16]
   198d0:	ldr	r2, [r6, #20]
   198d4:	mov	r1, #1
   198d8:	mov	r0, r4
   198dc:	str	r5, [r2, #4]
   198e0:	strb	r1, [r3, #33]	; 0x21
   198e4:	ldr	r1, [sp, #20]
   198e8:	bl	23ba0 <__assert_fail@plt+0x115ac>
   198ec:	ldr	r0, [r6, #20]
   198f0:	bl	158e0 <__assert_fail@plt+0x32ec>
   198f4:	ldr	r3, [sp, #28]
   198f8:	ldr	r1, [sp, #20]
   198fc:	cmp	r1, r3
   19900:	ble	199f8 <__assert_fail@plt+0x7404>
   19904:	ldr	r9, [pc, #1216]	; 19dcc <__assert_fail@plt+0x77d8>
   19908:	mov	r8, #0
   1990c:	b	19948 <__assert_fail@plt+0x7354>
   19910:	ldr	r3, [sp, #28]
   19914:	ldr	r0, [r6, #20]
   19918:	cmp	r3, fp
   1991c:	moveq	r3, r8
   19920:	str	r7, [r0, #4]
   19924:	ldrne	r3, [r4, fp, lsl #2]
   19928:	str	r3, [r0, #36]	; 0x24
   1992c:	bl	158e0 <__assert_fail@plt+0x32ec>
   19930:	ldr	r0, [r6, #16]
   19934:	bl	158e0 <__assert_fail@plt+0x32ec>
   19938:	ldr	r3, [sp, #28]
   1993c:	ldr	r1, [sp, #20]
   19940:	cmp	r3, r1
   19944:	bge	199f8 <__assert_fail@plt+0x7404>
   19948:	ldr	r0, [r4, r3, lsl #2]
   1994c:	mov	r1, #0
   19950:	strb	r8, [r9, #40]	; 0x28
   19954:	bl	1b618 <__assert_fail@plt+0x9024>
   19958:	subs	r5, r0, #0
   1995c:	beq	19cc8 <__assert_fail@plt+0x76d4>
   19960:	ldr	r3, [sp, #28]
   19964:	ldr	r7, [r4, r3, lsl #2]
   19968:	mov	r0, r7
   1996c:	bl	23bb8 <__assert_fail@plt+0x115c4>
   19970:	subs	r5, r0, #0
   19974:	beq	19d0c <__assert_fail@plt+0x7718>
   19978:	ldr	r3, [r5]
   1997c:	ldr	fp, [sp, #28]
   19980:	cmp	r3, #4
   19984:	addne	fp, fp, #1
   19988:	strne	fp, [sp, #28]
   1998c:	ldr	r3, [r5, #8]
   19990:	add	r2, sp, #28
   19994:	mov	r1, r4
   19998:	mov	r0, r5
   1999c:	blx	r3
   199a0:	subs	sl, r0, #0
   199a4:	bne	19910 <__assert_fail@plt+0x731c>
   199a8:	ldr	r1, [sp, #28]
   199ac:	ldr	r6, [r4, r1, lsl #2]
   199b0:	cmp	r6, #0
   199b4:	beq	19d88 <__assert_fail@plt+0x7794>
   199b8:	ldr	r2, [r5]
   199bc:	cmp	r2, #4
   199c0:	cmpeq	r1, fp
   199c4:	moveq	r5, #1
   199c8:	movne	r5, #0
   199cc:	mov	r2, #5
   199d0:	beq	19c24 <__assert_fail@plt+0x7630>
   199d4:	ldr	r1, [pc, #1012]	; 19dd0 <__assert_fail@plt+0x77dc>
   199d8:	bl	120b4 <dcgettext@plt>
   199dc:	ldr	r3, [sp, #28]
   199e0:	str	r7, [sp]
   199e4:	mov	r1, r5
   199e8:	ldr	r3, [r4, r3, lsl #2]
   199ec:	mov	r2, r0
   199f0:	mov	r0, #1
   199f4:	bl	121ec <error@plt>
   199f8:	ldr	r3, [r6, #16]
   199fc:	ldr	r2, [r6, #20]
   19a00:	mov	r0, r4
   19a04:	bl	23bb4 <__assert_fail@plt+0x115c0>
   19a08:	ldr	r2, [r6, #16]
   19a0c:	ldr	r3, [r2, #152]	; 0x98
   19a10:	cmp	r3, #0
   19a14:	beq	19b84 <__assert_fail@plt+0x7590>
   19a18:	mov	r0, r3
   19a1c:	bl	1b5d8 <__assert_fail@plt+0x8fe4>
   19a20:	cmp	r0, #0
   19a24:	bne	19ad8 <__assert_fail@plt+0x74e4>
   19a28:	ldr	r3, [r6, #16]
   19a2c:	str	r3, [sp, #24]
   19a30:	ldr	r3, [r3, #152]	; 0x98
   19a34:	mov	r0, r3
   19a38:	str	r3, [r6, #16]
   19a3c:	bl	158e0 <__assert_fail@plt+0x32ec>
   19a40:	ldr	r0, [sp, #24]
   19a44:	bl	376d0 <__assert_fail@plt+0x250dc>
   19a48:	ldr	r5, [pc, #900]	; 19dd4 <__assert_fail@plt+0x77e0>
   19a4c:	ldr	r3, [r5, #44]	; 0x2c
   19a50:	tst	r3, #9
   19a54:	bne	19b40 <__assert_fail@plt+0x754c>
   19a58:	ldr	r0, [r6, #16]
   19a5c:	bl	23a84 <__assert_fail@plt+0x11490>
   19a60:	ldr	r0, [r6, #16]
   19a64:	bl	158e0 <__assert_fail@plt+0x32ec>
   19a68:	ldr	r3, [r6, #16]
   19a6c:	add	r0, sp, #32
   19a70:	mov	r2, #0
   19a74:	str	r3, [r0, #-8]!
   19a78:	mov	r1, r2
   19a7c:	bl	162b4 <__assert_fail@plt+0x3cc0>
   19a80:	str	r0, [r6, #12]
   19a84:	bl	17424 <__assert_fail@plt+0x4e30>
   19a88:	ldr	r4, [sp, #24]
   19a8c:	cmp	r4, #0
   19a90:	beq	19bc8 <__assert_fail@plt+0x75d4>
   19a94:	ldr	r3, [pc, #828]	; 19dd8 <__assert_fail@plt+0x77e4>
   19a98:	ldr	r2, [r4]
   19a9c:	cmp	r2, r3
   19aa0:	beq	19d7c <__assert_fail@plt+0x7788>
   19aa4:	ldr	r4, [r4, #4]
   19aa8:	mov	r2, #5
   19aac:	cmp	r4, #0
   19ab0:	beq	19b68 <__assert_fail@plt+0x7574>
   19ab4:	ldr	r1, [pc, #800]	; 19ddc <__assert_fail@plt+0x77e8>
   19ab8:	mov	r0, #0
   19abc:	bl	120b4 <dcgettext@plt>
   19ac0:	ldr	r3, [sp, #24]
   19ac4:	mov	r1, #0
   19ac8:	ldr	r3, [r3, #4]
   19acc:	mov	r2, r0
   19ad0:	mov	r0, #1
   19ad4:	bl	121ec <error@plt>
   19ad8:	add	r2, sp, #20
   19adc:	mov	r1, r4
   19ae0:	ldr	r0, [sp, #16]
   19ae4:	bl	1fc08 <__assert_fail@plt+0xd614>
   19ae8:	ldr	r0, [r6, #20]
   19aec:	ldr	r3, [pc, #720]	; 19dc4 <__assert_fail@plt+0x77d0>
   19af0:	mov	r5, #1
   19af4:	str	r3, [r0, #4]
   19af8:	strb	r5, [r0, #33]	; 0x21
   19afc:	bl	158e0 <__assert_fail@plt+0x32ec>
   19b00:	mov	r1, r4
   19b04:	add	r2, sp, #20
   19b08:	ldr	r0, [sp, #12]
   19b0c:	bl	235a4 <__assert_fail@plt+0x10fb0>
   19b10:	ldr	r3, [r6, #20]
   19b14:	ldr	r2, [pc, #708]	; 19de0 <__assert_fail@plt+0x77ec>
   19b18:	mov	r0, r3
   19b1c:	strb	r5, [r3, #33]	; 0x21
   19b20:	ldr	r5, [pc, #684]	; 19dd4 <__assert_fail@plt+0x77e0>
   19b24:	str	r2, [r3, #4]
   19b28:	bl	158e0 <__assert_fail@plt+0x32ec>
   19b2c:	ldr	r0, [r6, #16]
   19b30:	bl	158e0 <__assert_fail@plt+0x32ec>
   19b34:	ldr	r3, [r5, #44]	; 0x2c
   19b38:	tst	r3, #9
   19b3c:	beq	19a58 <__assert_fail@plt+0x7464>
   19b40:	ldr	r4, [pc, #668]	; 19de4 <__assert_fail@plt+0x77f0>
   19b44:	mov	r2, #16
   19b48:	mov	r1, #1
   19b4c:	ldr	r3, [r4]
   19b50:	ldr	r0, [pc, #656]	; 19de8 <__assert_fail@plt+0x77f4>
   19b54:	bl	12168 <fwrite@plt>
   19b58:	ldr	r0, [r4]
   19b5c:	ldr	r1, [r6, #16]
   19b60:	bl	15540 <__assert_fail@plt+0x2f4c>
   19b64:	b	19a58 <__assert_fail@plt+0x7464>
   19b68:	ldr	r1, [pc, #636]	; 19dec <__assert_fail@plt+0x77f8>
   19b6c:	mov	r0, #0
   19b70:	bl	120b4 <dcgettext@plt>
   19b74:	mov	r1, #0
   19b78:	mov	r2, r0
   19b7c:	mov	r0, #1
   19b80:	bl	121ec <error@plt>
   19b84:	mov	r0, r2
   19b88:	str	r3, [r6, #20]
   19b8c:	str	r3, [r6, #16]
   19b90:	str	r2, [sp, #24]
   19b94:	bl	376d0 <__assert_fail@plt+0x250dc>
   19b98:	add	r2, sp, #20
   19b9c:	mov	r1, r4
   19ba0:	ldr	r0, [sp, #12]
   19ba4:	bl	235a4 <__assert_fail@plt+0x10fb0>
   19ba8:	ldr	r3, [r6, #20]
   19bac:	ldr	r2, [pc, #556]	; 19de0 <__assert_fail@plt+0x77ec>
   19bb0:	mov	r0, r3
   19bb4:	str	r2, [r3, #4]
   19bb8:	bl	158e0 <__assert_fail@plt+0x32ec>
   19bbc:	ldr	r0, [r6, #16]
   19bc0:	bl	158e0 <__assert_fail@plt+0x32ec>
   19bc4:	b	19a48 <__assert_fail@plt+0x7454>
   19bc8:	ldr	r3, [r5, #44]	; 0x2c
   19bcc:	tst	r3, #9
   19bd0:	bne	19c9c <__assert_fail@plt+0x76a8>
   19bd4:	ldr	r0, [r6, #12]
   19bd8:	bl	165b8 <__assert_fail@plt+0x3fc4>
   19bdc:	ldr	r0, [pc, #524]	; 19df0 <__assert_fail@plt+0x77fc>
   19be0:	bl	183cc <__assert_fail@plt+0x5dd8>
   19be4:	ldr	r4, [r6, #12]
   19be8:	mov	r1, #1
   19bec:	mov	r0, r4
   19bf0:	bl	169b4 <__assert_fail@plt+0x43c0>
   19bf4:	mov	r0, r4
   19bf8:	bl	18b80 <__assert_fail@plt+0x658c>
   19bfc:	ldr	r4, [r6, #12]
   19c00:	mov	r1, #1
   19c04:	mov	r0, r4
   19c08:	bl	169b4 <__assert_fail@plt+0x43c0>
   19c0c:	ldr	r3, [r5, #44]	; 0x2c
   19c10:	tst	r3, #9
   19c14:	bne	19c40 <__assert_fail@plt+0x764c>
   19c18:	mov	r0, r4
   19c1c:	add	sp, sp, #36	; 0x24
   19c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c24:	ldr	r1, [pc, #456]	; 19df4 <__assert_fail@plt+0x7800>
   19c28:	bl	120b4 <dcgettext@plt>
   19c2c:	mov	r3, r7
   19c30:	mov	r1, sl
   19c34:	mov	r2, r0
   19c38:	mov	r0, #1
   19c3c:	bl	121ec <error@plt>
   19c40:	ldr	r4, [pc, #412]	; 19de4 <__assert_fail@plt+0x77f0>
   19c44:	mov	r2, #21
   19c48:	mov	r1, #1
   19c4c:	ldr	r3, [r4]
   19c50:	ldr	r0, [pc, #416]	; 19df8 <__assert_fail@plt+0x7804>
   19c54:	bl	12168 <fwrite@plt>
   19c58:	ldr	r0, [r4]
   19c5c:	mov	r2, #0
   19c60:	ldr	r1, [r6, #12]
   19c64:	bl	17d08 <__assert_fail@plt+0x5714>
   19c68:	ldr	r3, [r4]
   19c6c:	mov	r2, #24
   19c70:	mov	r1, #1
   19c74:	ldr	r0, [pc, #384]	; 19dfc <__assert_fail@plt+0x7808>
   19c78:	bl	12168 <fwrite@plt>
   19c7c:	ldr	r0, [r4]
   19c80:	ldr	r1, [r6, #12]
   19c84:	bl	155f8 <__assert_fail@plt+0x3004>
   19c88:	ldr	r1, [r4]
   19c8c:	mov	r0, #10
   19c90:	bl	1248c <fputc@plt>
   19c94:	ldr	r4, [r6, #12]
   19c98:	b	19c18 <__assert_fail@plt+0x7624>
   19c9c:	ldr	r7, [pc, #320]	; 19de4 <__assert_fail@plt+0x77f0>
   19ca0:	mov	r2, #11
   19ca4:	mov	r1, #1
   19ca8:	ldr	r3, [r7]
   19cac:	ldr	r0, [pc, #332]	; 19e00 <__assert_fail@plt+0x780c>
   19cb0:	bl	12168 <fwrite@plt>
   19cb4:	mov	r2, r4
   19cb8:	ldr	r0, [r7]
   19cbc:	ldr	r1, [r6, #12]
   19cc0:	bl	17d08 <__assert_fail@plt+0x5714>
   19cc4:	b	19bd4 <__assert_fail@plt+0x75e0>
   19cc8:	mov	r2, #5
   19ccc:	ldr	r1, [pc, #304]	; 19e04 <__assert_fail@plt+0x7810>
   19cd0:	bl	120b4 <dcgettext@plt>
   19cd4:	ldr	r3, [sp, #28]
   19cd8:	mov	r1, r5
   19cdc:	ldr	r3, [r4, r3, lsl #2]
   19ce0:	mov	r2, r0
   19ce4:	mov	r0, r5
   19ce8:	bl	121ec <error@plt>
   19cec:	ldr	r3, [sp, #28]
   19cf0:	mov	r1, r5
   19cf4:	ldr	r0, [r4, r3, lsl #2]
   19cf8:	bl	123f0 <access@plt>
   19cfc:	subs	r4, r0, #0
   19d00:	beq	19d2c <__assert_fail@plt+0x7738>
   19d04:	mov	r0, #1
   19d08:	bl	122d0 <exit@plt>
   19d0c:	mov	r2, #5
   19d10:	ldr	r1, [pc, #240]	; 19e08 <__assert_fail@plt+0x7814>
   19d14:	bl	120b4 <dcgettext@plt>
   19d18:	mov	r3, r7
   19d1c:	mov	r1, r5
   19d20:	mov	r2, r0
   19d24:	mov	r0, #1
   19d28:	bl	121ec <error@plt>
   19d2c:	mov	r2, #5
   19d30:	ldr	r1, [pc, #212]	; 19e0c <__assert_fail@plt+0x7818>
   19d34:	bl	120b4 <dcgettext@plt>
   19d38:	ldr	r3, [r6, #20]
   19d3c:	mov	r1, r4
   19d40:	ldr	r3, [r3, #4]
   19d44:	mov	r2, r0
   19d48:	mov	r0, r4
   19d4c:	bl	121ec <error@plt>
   19d50:	b	19d04 <__assert_fail@plt+0x7710>
   19d54:	ldr	r3, [pc, #180]	; 19e10 <__assert_fail@plt+0x781c>
   19d58:	ldr	r2, [pc, #180]	; 19e14 <__assert_fail@plt+0x7820>
   19d5c:	ldr	r1, [pc, #180]	; 19e18 <__assert_fail@plt+0x7824>
   19d60:	ldr	r0, [pc, #180]	; 19e1c <__assert_fail@plt+0x7828>
   19d64:	bl	125f4 <__assert_fail@plt>
   19d68:	ldr	r3, [pc, #160]	; 19e10 <__assert_fail@plt+0x781c>
   19d6c:	ldr	r2, [pc, #172]	; 19e20 <__assert_fail@plt+0x782c>
   19d70:	ldr	r1, [pc, #160]	; 19e18 <__assert_fail@plt+0x7824>
   19d74:	ldr	r0, [pc, #168]	; 19e24 <__assert_fail@plt+0x7830>
   19d78:	bl	125f4 <__assert_fail@plt>
   19d7c:	mov	r2, #5
   19d80:	ldr	r1, [pc, #160]	; 19e28 <__assert_fail@plt+0x7834>
   19d84:	b	19b6c <__assert_fail@plt+0x7578>
   19d88:	mov	r2, #5
   19d8c:	ldr	r1, [pc, #152]	; 19e2c <__assert_fail@plt+0x7838>
   19d90:	bl	120b4 <dcgettext@plt>
   19d94:	mov	r3, r7
   19d98:	mov	r1, r6
   19d9c:	mov	r2, r0
   19da0:	mov	r0, #1
   19da4:	bl	121ec <error@plt>
   19da8:	ldr	r3, [pc, #96]	; 19e10 <__assert_fail@plt+0x781c>
   19dac:	ldr	r2, [pc, #124]	; 19e30 <__assert_fail@plt+0x783c>
   19db0:	ldr	r1, [pc, #96]	; 19e18 <__assert_fail@plt+0x7824>
   19db4:	ldr	r0, [pc, #120]	; 19e34 <__assert_fail@plt+0x7840>
   19db8:	bl	125f4 <__assert_fail@plt>
   19dbc:	andeq	r4, r6, r0, ror r5
   19dc0:	andeq	pc, r4, ip, lsl #3
   19dc4:	andeq	r0, r5, r4, lsl r1
   19dc8:	muleq	r4, r0, r1
   19dcc:	andeq	r4, r6, r0, asr #28
   19dd0:	andeq	pc, r4, r8, asr r2	; <UNPREDICTABLE>
   19dd4:	andeq	r4, r6, ip, ror #28
   19dd8:	andeq	r3, r1, ip, asr #25
   19ddc:			; <UNDEFINED> instruction: 0x0004f2b0
   19de0:	muleq	r4, r4, r2
   19de4:	andeq	r4, r6, r8, asr #10
   19de8:	muleq	r4, ip, r2
   19dec:	ldrdeq	pc, [r4], -r0
   19df0:	andeq	r4, r6, ip, ror r5
   19df4:	andeq	pc, r4, r0, asr #4
   19df8:	strdeq	pc, [r4], -r8
   19dfc:	andeq	pc, r4, r0, lsl r3	; <UNPREDICTABLE>
   19e00:	andeq	pc, r4, ip, ror #5
   19e04:	ldrdeq	pc, [r4], -r4
   19e08:	andeq	pc, r4, r8, lsr #4
   19e0c:	strdeq	pc, [r4], -r8
   19e10:	andeq	lr, r4, r0, lsr #19
   19e14:	strdeq	r0, [r0], -r7
   19e18:	andeq	lr, r4, r0, lsr ip
   19e1c:	andeq	pc, r4, ip, lsr #3
   19e20:	strdeq	r0, [r0], -r6
   19e24:	muleq	r4, r8, r1
   19e28:	ldrdeq	lr, [r4], -r0
   19e2c:	andeq	pc, r4, r8, ror r2	; <UNPREDICTABLE>
   19e30:	strdeq	r0, [r0], -r8
   19e34:	andeq	pc, r4, r0, asr #3
   19e38:	ldr	r3, [pc, #60]	; 19e7c <__assert_fail@plt+0x7888>
   19e3c:	ldr	r2, [r0]
   19e40:	ldr	r1, [pc, #56]	; 19e80 <__assert_fail@plt+0x788c>
   19e44:	ldr	ip, [pc, #56]	; 19e84 <__assert_fail@plt+0x7890>
   19e48:	cmp	r2, r1
   19e4c:	cmpne	r2, r3
   19e50:	moveq	r3, #1
   19e54:	movne	r3, #0
   19e58:	ldr	r1, [pc, #40]	; 19e88 <__assert_fail@plt+0x7894>
   19e5c:	cmp	r2, ip
   19e60:	orreq	r3, r3, #1
   19e64:	cmp	r2, r1
   19e68:	orreq	r3, r3, #1
   19e6c:	cmp	r3, #0
   19e70:	movne	r3, #0
   19e74:	strne	r3, [r0, #44]	; 0x2c
   19e78:	bx	lr
   19e7c:	strheq	sp, [r1], -ip
   19e80:	andeq	r4, r1, r4, lsr #6
   19e84:	ldrdeq	r4, [r1], -r0
   19e88:	andeq	r4, r1, r8, asr r3
   19e8c:	add	r1, r0, #48	; 0x30
   19e90:	push	{r4, lr}
   19e94:	add	r0, r0, #4
   19e98:	bl	243c8 <__assert_fail@plt+0x11dd4>
   19e9c:	mov	r0, #0
   19ea0:	pop	{r4, pc}
   19ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ea8:	mov	r3, r0
   19eac:	sub	sp, sp, #12
   19eb0:	mov	r4, r1
   19eb4:	str	r0, [sp, #4]
   19eb8:	ldr	r3, [r3, #156]	; 0x9c
   19ebc:	cmp	r3, #0
   19ec0:	str	r3, [sp]
   19ec4:	beq	19fd8 <__assert_fail@plt+0x79e4>
   19ec8:	ldr	r9, [r3, #156]	; 0x9c
   19ecc:	cmp	r9, #0
   19ed0:	beq	19fbc <__assert_fail@plt+0x79c8>
   19ed4:	ldr	sl, [r9, #156]	; 0x9c
   19ed8:	cmp	sl, #0
   19edc:	beq	19fa8 <__assert_fail@plt+0x79b4>
   19ee0:	ldr	fp, [sl, #156]	; 0x9c
   19ee4:	cmp	fp, #0
   19ee8:	beq	19f94 <__assert_fail@plt+0x79a0>
   19eec:	ldr	r7, [fp, #156]	; 0x9c
   19ef0:	cmp	r7, #0
   19ef4:	beq	19f80 <__assert_fail@plt+0x798c>
   19ef8:	ldr	r6, [r7, #156]	; 0x9c
   19efc:	cmp	r6, #0
   19f00:	beq	19f6c <__assert_fail@plt+0x7978>
   19f04:	ldr	r5, [r6, #156]	; 0x9c
   19f08:	cmp	r5, #0
   19f0c:	beq	19f58 <__assert_fail@plt+0x7964>
   19f10:	ldr	r8, [r5, #156]	; 0x9c
   19f14:	cmp	r8, #0
   19f18:	beq	19f44 <__assert_fail@plt+0x7950>
   19f1c:	ldr	r2, [r8, #156]	; 0x9c
   19f20:	mov	r1, r4
   19f24:	subs	r0, r2, #0
   19f28:	beq	19f30 <__assert_fail@plt+0x793c>
   19f2c:	bl	19ea4 <__assert_fail@plt+0x78b0>
   19f30:	mov	r0, r8
   19f34:	blx	r4
   19f38:	ldr	r8, [r8, #160]	; 0xa0
   19f3c:	cmp	r8, #0
   19f40:	bne	19f1c <__assert_fail@plt+0x7928>
   19f44:	mov	r0, r5
   19f48:	blx	r4
   19f4c:	ldr	r5, [r5, #160]	; 0xa0
   19f50:	cmp	r5, #0
   19f54:	bne	19f10 <__assert_fail@plt+0x791c>
   19f58:	mov	r0, r6
   19f5c:	blx	r4
   19f60:	ldr	r6, [r6, #160]	; 0xa0
   19f64:	cmp	r6, #0
   19f68:	bne	19f04 <__assert_fail@plt+0x7910>
   19f6c:	mov	r0, r7
   19f70:	blx	r4
   19f74:	ldr	r7, [r7, #160]	; 0xa0
   19f78:	cmp	r7, #0
   19f7c:	bne	19ef8 <__assert_fail@plt+0x7904>
   19f80:	mov	r0, fp
   19f84:	blx	r4
   19f88:	ldr	fp, [fp, #160]	; 0xa0
   19f8c:	cmp	fp, #0
   19f90:	bne	19eec <__assert_fail@plt+0x78f8>
   19f94:	mov	r0, sl
   19f98:	blx	r4
   19f9c:	ldr	sl, [sl, #160]	; 0xa0
   19fa0:	cmp	sl, #0
   19fa4:	bne	19ee0 <__assert_fail@plt+0x78ec>
   19fa8:	mov	r0, r9
   19fac:	blx	r4
   19fb0:	ldr	r9, [r9, #160]	; 0xa0
   19fb4:	cmp	r9, #0
   19fb8:	bne	19ed4 <__assert_fail@plt+0x78e0>
   19fbc:	ldr	r5, [sp]
   19fc0:	mov	r0, r5
   19fc4:	blx	r4
   19fc8:	ldr	r3, [r5, #160]	; 0xa0
   19fcc:	cmp	r3, #0
   19fd0:	str	r3, [sp]
   19fd4:	bne	19ec8 <__assert_fail@plt+0x78d4>
   19fd8:	ldr	r5, [sp, #4]
   19fdc:	mov	r0, r5
   19fe0:	blx	r4
   19fe4:	ldr	r3, [r5, #160]	; 0xa0
   19fe8:	cmp	r3, #0
   19fec:	str	r3, [sp, #4]
   19ff0:	bne	19eb8 <__assert_fail@plt+0x78c4>
   19ff4:	add	sp, sp, #12
   19ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a000:	sub	sp, sp, #12
   1a004:	subs	r3, r0, #0
   1a008:	str	r3, [sp, #4]
   1a00c:	beq	1a1a4 <__assert_fail@plt+0x7bb0>
   1a010:	ldr	r4, [pc, #732]	; 1a2f4 <__assert_fail@plt+0x7d00>
   1a014:	ldr	r3, [r3, #156]	; 0x9c
   1a018:	cmp	r3, #0
   1a01c:	str	r3, [sp]
   1a020:	beq	1a180 <__assert_fail@plt+0x7b8c>
   1a024:	ldr	r8, [r3, #156]	; 0x9c
   1a028:	cmp	r8, #0
   1a02c:	beq	1a160 <__assert_fail@plt+0x7b6c>
   1a030:	ldr	r9, [r8, #156]	; 0x9c
   1a034:	cmp	r9, #0
   1a038:	beq	1a144 <__assert_fail@plt+0x7b50>
   1a03c:	ldr	sl, [r9, #156]	; 0x9c
   1a040:	cmp	sl, #0
   1a044:	beq	1a12c <__assert_fail@plt+0x7b38>
   1a048:	ldr	fp, [sl, #156]	; 0x9c
   1a04c:	cmp	fp, #0
   1a050:	beq	1a114 <__assert_fail@plt+0x7b20>
   1a054:	ldr	r6, [fp, #156]	; 0x9c
   1a058:	cmp	r6, #0
   1a05c:	beq	1a0fc <__assert_fail@plt+0x7b08>
   1a060:	ldr	r5, [r6, #156]	; 0x9c
   1a064:	cmp	r5, #0
   1a068:	beq	1a0e4 <__assert_fail@plt+0x7af0>
   1a06c:	ldr	r7, [r5, #156]	; 0x9c
   1a070:	cmp	r7, #0
   1a074:	bne	1a088 <__assert_fail@plt+0x7a94>
   1a078:	b	1a0cc <__assert_fail@plt+0x7ad8>
   1a07c:	ldr	r7, [r7, #160]	; 0xa0
   1a080:	cmp	r7, #0
   1a084:	beq	1a0cc <__assert_fail@plt+0x7ad8>
   1a088:	ldr	r0, [r7, #156]	; 0x9c
   1a08c:	bl	19ffc <__assert_fail@plt+0x7a08>
   1a090:	ldr	r2, [r7]
   1a094:	cmp	r2, r4
   1a098:	bne	1a07c <__assert_fail@plt+0x7a88>
   1a09c:	ldrb	r2, [r7, #40]	; 0x28
   1a0a0:	cmp	r2, #0
   1a0a4:	beq	1a07c <__assert_fail@plt+0x7a88>
   1a0a8:	ldr	r2, [r7, #116]	; 0x74
   1a0ac:	cmp	r2, #0
   1a0b0:	beq	1a07c <__assert_fail@plt+0x7a88>
   1a0b4:	add	r1, r7, #88	; 0x58
   1a0b8:	add	r0, r7, #44	; 0x2c
   1a0bc:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a0c0:	ldr	r7, [r7, #160]	; 0xa0
   1a0c4:	cmp	r7, #0
   1a0c8:	bne	1a088 <__assert_fail@plt+0x7a94>
   1a0cc:	ldr	r3, [r5]
   1a0d0:	cmp	r3, r4
   1a0d4:	beq	1a1ac <__assert_fail@plt+0x7bb8>
   1a0d8:	ldr	r5, [r5, #160]	; 0xa0
   1a0dc:	cmp	r5, #0
   1a0e0:	bne	1a06c <__assert_fail@plt+0x7a78>
   1a0e4:	ldr	r3, [r6]
   1a0e8:	cmp	r3, r4
   1a0ec:	beq	1a1d4 <__assert_fail@plt+0x7be0>
   1a0f0:	ldr	r6, [r6, #160]	; 0xa0
   1a0f4:	cmp	r6, #0
   1a0f8:	bne	1a060 <__assert_fail@plt+0x7a6c>
   1a0fc:	ldr	r3, [fp]
   1a100:	cmp	r3, r4
   1a104:	beq	1a1fc <__assert_fail@plt+0x7c08>
   1a108:	ldr	fp, [fp, #160]	; 0xa0
   1a10c:	cmp	fp, #0
   1a110:	bne	1a054 <__assert_fail@plt+0x7a60>
   1a114:	ldr	r3, [sl]
   1a118:	cmp	r3, r4
   1a11c:	beq	1a224 <__assert_fail@plt+0x7c30>
   1a120:	ldr	sl, [sl, #160]	; 0xa0
   1a124:	cmp	sl, #0
   1a128:	bne	1a048 <__assert_fail@plt+0x7a54>
   1a12c:	ldr	r3, [r9]
   1a130:	cmp	r3, r4
   1a134:	beq	1a24c <__assert_fail@plt+0x7c58>
   1a138:	ldr	r9, [r9, #160]	; 0xa0
   1a13c:	cmp	r9, #0
   1a140:	bne	1a03c <__assert_fail@plt+0x7a48>
   1a144:	ldr	r3, [r8]
   1a148:	cmp	r3, r4
   1a14c:	beq	1a2a0 <__assert_fail@plt+0x7cac>
   1a150:	ldr	r8, [r8, #160]	; 0xa0
   1a154:	cmp	r8, #0
   1a158:	bne	1a030 <__assert_fail@plt+0x7a3c>
   1a15c:	ldr	r3, [sp]
   1a160:	ldr	r3, [r3]
   1a164:	cmp	r3, r4
   1a168:	beq	1a2c8 <__assert_fail@plt+0x7cd4>
   1a16c:	ldr	r3, [sp]
   1a170:	ldr	r3, [r3, #160]	; 0xa0
   1a174:	cmp	r3, #0
   1a178:	str	r3, [sp]
   1a17c:	bne	1a024 <__assert_fail@plt+0x7a30>
   1a180:	ldr	r3, [sp, #4]
   1a184:	ldr	r3, [r3]
   1a188:	cmp	r3, r4
   1a18c:	beq	1a274 <__assert_fail@plt+0x7c80>
   1a190:	ldr	r3, [sp, #4]
   1a194:	ldr	r3, [r3, #160]	; 0xa0
   1a198:	cmp	r3, #0
   1a19c:	str	r3, [sp, #4]
   1a1a0:	bne	1a014 <__assert_fail@plt+0x7a20>
   1a1a4:	add	sp, sp, #12
   1a1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1ac:	ldrb	r3, [r5, #40]	; 0x28
   1a1b0:	cmp	r3, #0
   1a1b4:	beq	1a0d8 <__assert_fail@plt+0x7ae4>
   1a1b8:	ldr	r3, [r5, #116]	; 0x74
   1a1bc:	cmp	r3, #0
   1a1c0:	beq	1a0d8 <__assert_fail@plt+0x7ae4>
   1a1c4:	add	r1, r5, #88	; 0x58
   1a1c8:	add	r0, r5, #44	; 0x2c
   1a1cc:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a1d0:	b	1a0d8 <__assert_fail@plt+0x7ae4>
   1a1d4:	ldrb	r3, [r6, #40]	; 0x28
   1a1d8:	cmp	r3, #0
   1a1dc:	beq	1a0f0 <__assert_fail@plt+0x7afc>
   1a1e0:	ldr	r3, [r6, #116]	; 0x74
   1a1e4:	cmp	r3, #0
   1a1e8:	beq	1a0f0 <__assert_fail@plt+0x7afc>
   1a1ec:	add	r1, r6, #88	; 0x58
   1a1f0:	add	r0, r6, #44	; 0x2c
   1a1f4:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a1f8:	b	1a0f0 <__assert_fail@plt+0x7afc>
   1a1fc:	ldrb	r3, [fp, #40]	; 0x28
   1a200:	cmp	r3, #0
   1a204:	beq	1a108 <__assert_fail@plt+0x7b14>
   1a208:	ldr	r3, [fp, #116]	; 0x74
   1a20c:	cmp	r3, #0
   1a210:	beq	1a108 <__assert_fail@plt+0x7b14>
   1a214:	add	r1, fp, #88	; 0x58
   1a218:	add	r0, fp, #44	; 0x2c
   1a21c:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a220:	b	1a108 <__assert_fail@plt+0x7b14>
   1a224:	ldrb	r3, [sl, #40]	; 0x28
   1a228:	cmp	r3, #0
   1a22c:	beq	1a120 <__assert_fail@plt+0x7b2c>
   1a230:	ldr	r3, [sl, #116]	; 0x74
   1a234:	cmp	r3, #0
   1a238:	beq	1a120 <__assert_fail@plt+0x7b2c>
   1a23c:	add	r1, sl, #88	; 0x58
   1a240:	add	r0, sl, #44	; 0x2c
   1a244:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a248:	b	1a120 <__assert_fail@plt+0x7b2c>
   1a24c:	ldrb	r3, [r9, #40]	; 0x28
   1a250:	cmp	r3, #0
   1a254:	beq	1a138 <__assert_fail@plt+0x7b44>
   1a258:	ldr	r3, [r9, #116]	; 0x74
   1a25c:	cmp	r3, #0
   1a260:	beq	1a138 <__assert_fail@plt+0x7b44>
   1a264:	add	r1, r9, #88	; 0x58
   1a268:	add	r0, r9, #44	; 0x2c
   1a26c:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a270:	b	1a138 <__assert_fail@plt+0x7b44>
   1a274:	ldr	r2, [sp, #4]
   1a278:	ldrb	r3, [r2, #40]	; 0x28
   1a27c:	cmp	r3, #0
   1a280:	beq	1a190 <__assert_fail@plt+0x7b9c>
   1a284:	ldr	r3, [r2, #116]	; 0x74
   1a288:	cmp	r3, #0
   1a28c:	beq	1a190 <__assert_fail@plt+0x7b9c>
   1a290:	add	r1, r2, #88	; 0x58
   1a294:	add	r0, r2, #44	; 0x2c
   1a298:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a29c:	b	1a190 <__assert_fail@plt+0x7b9c>
   1a2a0:	ldrb	r3, [r8, #40]	; 0x28
   1a2a4:	cmp	r3, #0
   1a2a8:	beq	1a150 <__assert_fail@plt+0x7b5c>
   1a2ac:	ldr	r3, [r8, #116]	; 0x74
   1a2b0:	cmp	r3, #0
   1a2b4:	beq	1a150 <__assert_fail@plt+0x7b5c>
   1a2b8:	add	r1, r8, #88	; 0x58
   1a2bc:	add	r0, r8, #44	; 0x2c
   1a2c0:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a2c4:	b	1a150 <__assert_fail@plt+0x7b5c>
   1a2c8:	ldr	r2, [sp]
   1a2cc:	ldrb	r3, [r2, #40]	; 0x28
   1a2d0:	cmp	r3, #0
   1a2d4:	beq	1a16c <__assert_fail@plt+0x7b78>
   1a2d8:	ldr	r3, [r2, #116]	; 0x74
   1a2dc:	cmp	r3, #0
   1a2e0:	beq	1a16c <__assert_fail@plt+0x7b78>
   1a2e4:	add	r1, r2, #88	; 0x58
   1a2e8:	add	r0, r2, #44	; 0x2c
   1a2ec:	bl	243c8 <__assert_fail@plt+0x11dd4>
   1a2f0:	b	1a16c <__assert_fail@plt+0x7b78>
   1a2f4:			; <UNDEFINED> instruction: 0x000142b4
   1a2f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2fc:	sub	sp, sp, #36	; 0x24
   1a300:	subs	r3, r0, #0
   1a304:	str	r3, [sp, #28]
   1a308:	beq	1a5d8 <__assert_fail@plt+0x7fe4>
   1a30c:	ldr	r6, [pc, #1572]	; 1a938 <__assert_fail@plt+0x8344>
   1a310:	ldrb	r3, [r6, #32]
   1a314:	cmp	r3, #0
   1a318:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a31c:	ldr	r3, [sp, #28]
   1a320:	ldr	r4, [pc, #1556]	; 1a93c <__assert_fail@plt+0x8348>
   1a324:	ldr	r5, [pc, #1556]	; 1a940 <__assert_fail@plt+0x834c>
   1a328:	ldr	r3, [r3, #156]	; 0x9c
   1a32c:	cmp	r3, #0
   1a330:	str	r3, [sp, #24]
   1a334:	beq	1a850 <__assert_fail@plt+0x825c>
   1a338:	ldr	r3, [r3, #156]	; 0x9c
   1a33c:	cmp	r3, #0
   1a340:	str	r3, [sp, #20]
   1a344:	beq	1a800 <__assert_fail@plt+0x820c>
   1a348:	ldr	r3, [r3, #156]	; 0x9c
   1a34c:	cmp	r3, #0
   1a350:	str	r3, [sp, #16]
   1a354:	beq	1a718 <__assert_fail@plt+0x8124>
   1a358:	ldr	r3, [r3, #156]	; 0x9c
   1a35c:	cmp	r3, #0
   1a360:	str	r3, [sp, #12]
   1a364:	beq	1a6c8 <__assert_fail@plt+0x80d4>
   1a368:	ldr	r3, [r3, #156]	; 0x9c
   1a36c:	cmp	r3, #0
   1a370:	str	r3, [sp, #8]
   1a374:	beq	1a5e0 <__assert_fail@plt+0x7fec>
   1a378:	ldr	r3, [r3, #156]	; 0x9c
   1a37c:	cmp	r3, #0
   1a380:	str	r3, [sp, #4]
   1a384:	beq	1a578 <__assert_fail@plt+0x7f84>
   1a388:	ldr	r7, [r3, #156]	; 0x9c
   1a38c:	cmp	r7, #0
   1a390:	beq	1a4d8 <__assert_fail@plt+0x7ee4>
   1a394:	ldr	fp, [r7, #156]	; 0x9c
   1a398:	cmp	fp, #0
   1a39c:	beq	1a434 <__assert_fail@plt+0x7e40>
   1a3a0:	ldr	r9, [pc, #1436]	; 1a944 <__assert_fail@plt+0x8350>
   1a3a4:	ldr	r8, [pc, #1436]	; 1a948 <__assert_fail@plt+0x8354>
   1a3a8:	mov	sl, #0
   1a3ac:	b	1a3c8 <__assert_fail@plt+0x7dd4>
   1a3b0:	ldr	fp, [fp, #160]	; 0xa0
   1a3b4:	cmp	fp, #0
   1a3b8:	beq	1a434 <__assert_fail@plt+0x7e40>
   1a3bc:	ldrb	r3, [r6, #32]
   1a3c0:	cmp	r3, #0
   1a3c4:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a3c8:	ldr	r0, [fp, #156]	; 0x9c
   1a3cc:	bl	1a2f8 <__assert_fail@plt+0x7d04>
   1a3d0:	ldr	r3, [fp]
   1a3d4:	cmp	r3, r5
   1a3d8:	cmpne	r3, r4
   1a3dc:	bne	1a3b0 <__assert_fail@plt+0x7dbc>
   1a3e0:	ldrb	r3, [fp, #40]	; 0x28
   1a3e4:	cmp	r3, #0
   1a3e8:	beq	1a3b0 <__assert_fail@plt+0x7dbc>
   1a3ec:	ldr	r3, [fp, #116]	; 0x74
   1a3f0:	cmp	r3, #0
   1a3f4:	beq	1a3b0 <__assert_fail@plt+0x7dbc>
   1a3f8:	add	r2, fp, #40	; 0x28
   1a3fc:	mov	r1, r9
   1a400:	ldr	r0, [fp, #144]	; 0x90
   1a404:	bl	249fc <__assert_fail@plt+0x12408>
   1a408:	ldr	r0, [fp, #144]	; 0x90
   1a40c:	ldr	r3, [r8]
   1a410:	cmp	r0, r3
   1a414:	beq	1a3b0 <__assert_fail@plt+0x7dbc>
   1a418:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a41c:	ldr	r0, [fp, #144]	; 0x90
   1a420:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a424:	str	sl, [fp, #144]	; 0x90
   1a428:	ldr	fp, [fp, #160]	; 0xa0
   1a42c:	cmp	fp, #0
   1a430:	bne	1a3bc <__assert_fail@plt+0x7dc8>
   1a434:	ldr	r3, [r7]
   1a438:	ldr	sl, [pc, #1284]	; 1a944 <__assert_fail@plt+0x8350>
   1a43c:	cmp	r3, r5
   1a440:	cmpne	r3, r4
   1a444:	ldr	r9, [pc, #1276]	; 1a948 <__assert_fail@plt+0x8354>
   1a448:	mov	r8, #0
   1a44c:	beq	1a484 <__assert_fail@plt+0x7e90>
   1a450:	ldr	r7, [r7, #160]	; 0xa0
   1a454:	cmp	r7, #0
   1a458:	beq	1a4d8 <__assert_fail@plt+0x7ee4>
   1a45c:	ldrb	r3, [r6, #32]
   1a460:	cmp	r3, #0
   1a464:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a468:	ldr	fp, [r7, #156]	; 0x9c
   1a46c:	cmp	fp, #0
   1a470:	bne	1a3a0 <__assert_fail@plt+0x7dac>
   1a474:	ldr	r3, [r7]
   1a478:	cmp	r3, r5
   1a47c:	cmpne	r3, r4
   1a480:	bne	1a450 <__assert_fail@plt+0x7e5c>
   1a484:	ldrb	r3, [r7, #40]	; 0x28
   1a488:	cmp	r3, #0
   1a48c:	beq	1a450 <__assert_fail@plt+0x7e5c>
   1a490:	ldr	r3, [r7, #116]	; 0x74
   1a494:	cmp	r3, #0
   1a498:	beq	1a450 <__assert_fail@plt+0x7e5c>
   1a49c:	add	r2, r7, #40	; 0x28
   1a4a0:	mov	r1, sl
   1a4a4:	ldr	r0, [r7, #144]	; 0x90
   1a4a8:	bl	249fc <__assert_fail@plt+0x12408>
   1a4ac:	ldr	r0, [r7, #144]	; 0x90
   1a4b0:	ldr	r3, [r9]
   1a4b4:	cmp	r0, r3
   1a4b8:	beq	1a450 <__assert_fail@plt+0x7e5c>
   1a4bc:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a4c0:	ldr	r0, [r7, #144]	; 0x90
   1a4c4:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a4c8:	str	r8, [r7, #144]	; 0x90
   1a4cc:	ldr	r7, [r7, #160]	; 0xa0
   1a4d0:	cmp	r7, #0
   1a4d4:	bne	1a45c <__assert_fail@plt+0x7e68>
   1a4d8:	ldr	r9, [pc, #1124]	; 1a944 <__assert_fail@plt+0x8350>
   1a4dc:	ldr	sl, [pc, #1124]	; 1a948 <__assert_fail@plt+0x8354>
   1a4e0:	ldr	fp, [sp, #4]
   1a4e4:	mov	r8, #0
   1a4e8:	ldr	r3, [fp]
   1a4ec:	cmp	r3, r4
   1a4f0:	cmpne	r3, r5
   1a4f4:	beq	1a524 <__assert_fail@plt+0x7f30>
   1a4f8:	ldr	fp, [fp, #160]	; 0xa0
   1a4fc:	cmp	fp, #0
   1a500:	beq	1a578 <__assert_fail@plt+0x7f84>
   1a504:	ldrb	r3, [r6, #32]
   1a508:	cmp	r3, #0
   1a50c:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a510:	ldr	r7, [fp, #156]	; 0x9c
   1a514:	cmp	r7, #0
   1a518:	beq	1a4e8 <__assert_fail@plt+0x7ef4>
   1a51c:	str	fp, [sp, #4]
   1a520:	b	1a394 <__assert_fail@plt+0x7da0>
   1a524:	ldrb	r3, [fp, #40]	; 0x28
   1a528:	cmp	r3, #0
   1a52c:	beq	1a4f8 <__assert_fail@plt+0x7f04>
   1a530:	ldr	r3, [fp, #116]	; 0x74
   1a534:	cmp	r3, #0
   1a538:	beq	1a4f8 <__assert_fail@plt+0x7f04>
   1a53c:	add	r2, fp, #40	; 0x28
   1a540:	mov	r1, r9
   1a544:	ldr	r0, [fp, #144]	; 0x90
   1a548:	bl	249fc <__assert_fail@plt+0x12408>
   1a54c:	ldr	r0, [fp, #144]	; 0x90
   1a550:	ldr	r3, [sl]
   1a554:	cmp	r0, r3
   1a558:	beq	1a4f8 <__assert_fail@plt+0x7f04>
   1a55c:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a560:	ldr	r0, [fp, #144]	; 0x90
   1a564:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a568:	str	r8, [fp, #144]	; 0x90
   1a56c:	ldr	fp, [fp, #160]	; 0xa0
   1a570:	cmp	fp, #0
   1a574:	bne	1a504 <__assert_fail@plt+0x7f10>
   1a578:	ldr	r9, [pc, #964]	; 1a944 <__assert_fail@plt+0x8350>
   1a57c:	ldr	r8, [pc, #964]	; 1a948 <__assert_fail@plt+0x8354>
   1a580:	ldr	sl, [sp, #8]
   1a584:	mov	r7, #0
   1a588:	ldr	r3, [sl]
   1a58c:	cmp	r3, r5
   1a590:	cmpne	r3, r4
   1a594:	beq	1a630 <__assert_fail@plt+0x803c>
   1a598:	ldr	sl, [sl, #160]	; 0xa0
   1a59c:	cmp	sl, #0
   1a5a0:	beq	1a5e0 <__assert_fail@plt+0x7fec>
   1a5a4:	ldrb	r3, [r6, #32]
   1a5a8:	cmp	r3, #0
   1a5ac:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a5b0:	ldr	r3, [sl, #156]	; 0x9c
   1a5b4:	cmp	r3, #0
   1a5b8:	beq	1a588 <__assert_fail@plt+0x7f94>
   1a5bc:	stmib	sp, {r3, sl}
   1a5c0:	b	1a388 <__assert_fail@plt+0x7d94>
   1a5c4:	ldr	r3, [pc, #896]	; 1a94c <__assert_fail@plt+0x8358>
   1a5c8:	mov	r2, #396	; 0x18c
   1a5cc:	ldr	r1, [pc, #892]	; 1a950 <__assert_fail@plt+0x835c>
   1a5d0:	ldr	r0, [pc, #892]	; 1a954 <__assert_fail@plt+0x8360>
   1a5d4:	bl	125f4 <__assert_fail@plt>
   1a5d8:	add	sp, sp, #36	; 0x24
   1a5dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5e0:	ldr	r9, [pc, #860]	; 1a944 <__assert_fail@plt+0x8350>
   1a5e4:	ldr	r8, [pc, #860]	; 1a948 <__assert_fail@plt+0x8354>
   1a5e8:	ldr	sl, [sp, #12]
   1a5ec:	mov	r7, #0
   1a5f0:	ldr	r3, [sl]
   1a5f4:	cmp	r3, r4
   1a5f8:	cmpne	r3, r5
   1a5fc:	beq	1a67c <__assert_fail@plt+0x8088>
   1a600:	ldr	sl, [sl, #160]	; 0xa0
   1a604:	cmp	sl, #0
   1a608:	beq	1a6c8 <__assert_fail@plt+0x80d4>
   1a60c:	ldrb	r3, [r6, #32]
   1a610:	cmp	r3, #0
   1a614:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a618:	ldr	r3, [sl, #156]	; 0x9c
   1a61c:	cmp	r3, #0
   1a620:	beq	1a5f0 <__assert_fail@plt+0x7ffc>
   1a624:	str	r3, [sp, #8]
   1a628:	str	sl, [sp, #12]
   1a62c:	b	1a378 <__assert_fail@plt+0x7d84>
   1a630:	ldrb	r3, [sl, #40]	; 0x28
   1a634:	cmp	r3, #0
   1a638:	beq	1a598 <__assert_fail@plt+0x7fa4>
   1a63c:	ldr	r3, [sl, #116]	; 0x74
   1a640:	add	r2, sl, #40	; 0x28
   1a644:	cmp	r3, #0
   1a648:	beq	1a598 <__assert_fail@plt+0x7fa4>
   1a64c:	mov	r1, r9
   1a650:	ldr	r0, [sl, #144]	; 0x90
   1a654:	bl	249fc <__assert_fail@plt+0x12408>
   1a658:	ldr	r0, [sl, #144]	; 0x90
   1a65c:	ldr	r3, [r8]
   1a660:	cmp	r0, r3
   1a664:	beq	1a598 <__assert_fail@plt+0x7fa4>
   1a668:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a66c:	ldr	r0, [sl, #144]	; 0x90
   1a670:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a674:	str	r7, [sl, #144]	; 0x90
   1a678:	b	1a598 <__assert_fail@plt+0x7fa4>
   1a67c:	ldrb	r3, [sl, #40]	; 0x28
   1a680:	cmp	r3, #0
   1a684:	beq	1a600 <__assert_fail@plt+0x800c>
   1a688:	ldr	r3, [sl, #116]	; 0x74
   1a68c:	add	r2, sl, #40	; 0x28
   1a690:	cmp	r3, #0
   1a694:	beq	1a600 <__assert_fail@plt+0x800c>
   1a698:	mov	r1, r9
   1a69c:	ldr	r0, [sl, #144]	; 0x90
   1a6a0:	bl	249fc <__assert_fail@plt+0x12408>
   1a6a4:	ldr	r0, [sl, #144]	; 0x90
   1a6a8:	ldr	r3, [r8]
   1a6ac:	cmp	r0, r3
   1a6b0:	beq	1a600 <__assert_fail@plt+0x800c>
   1a6b4:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a6b8:	ldr	r0, [sl, #144]	; 0x90
   1a6bc:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a6c0:	str	r7, [sl, #144]	; 0x90
   1a6c4:	b	1a600 <__assert_fail@plt+0x800c>
   1a6c8:	ldr	r9, [pc, #628]	; 1a944 <__assert_fail@plt+0x8350>
   1a6cc:	ldr	r8, [pc, #628]	; 1a948 <__assert_fail@plt+0x8354>
   1a6d0:	ldr	sl, [sp, #16]
   1a6d4:	mov	r7, #0
   1a6d8:	ldr	r3, [sl]
   1a6dc:	cmp	r3, r5
   1a6e0:	cmpne	r3, r4
   1a6e4:	beq	1a768 <__assert_fail@plt+0x8174>
   1a6e8:	ldr	sl, [sl, #160]	; 0xa0
   1a6ec:	cmp	sl, #0
   1a6f0:	beq	1a718 <__assert_fail@plt+0x8124>
   1a6f4:	ldrb	r3, [r6, #32]
   1a6f8:	cmp	r3, #0
   1a6fc:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a700:	ldr	r3, [sl, #156]	; 0x9c
   1a704:	cmp	r3, #0
   1a708:	beq	1a6d8 <__assert_fail@plt+0x80e4>
   1a70c:	str	r3, [sp, #12]
   1a710:	str	sl, [sp, #16]
   1a714:	b	1a368 <__assert_fail@plt+0x7d74>
   1a718:	ldr	r9, [pc, #548]	; 1a944 <__assert_fail@plt+0x8350>
   1a71c:	ldr	r8, [pc, #548]	; 1a948 <__assert_fail@plt+0x8354>
   1a720:	ldr	sl, [sp, #20]
   1a724:	mov	r7, #0
   1a728:	ldr	r3, [sl]
   1a72c:	cmp	r3, r4
   1a730:	cmpne	r3, r5
   1a734:	beq	1a7b4 <__assert_fail@plt+0x81c0>
   1a738:	ldr	sl, [sl, #160]	; 0xa0
   1a73c:	cmp	sl, #0
   1a740:	beq	1a800 <__assert_fail@plt+0x820c>
   1a744:	ldrb	r3, [r6, #32]
   1a748:	cmp	r3, #0
   1a74c:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a750:	ldr	r3, [sl, #156]	; 0x9c
   1a754:	cmp	r3, #0
   1a758:	beq	1a728 <__assert_fail@plt+0x8134>
   1a75c:	str	r3, [sp, #16]
   1a760:	str	sl, [sp, #20]
   1a764:	b	1a358 <__assert_fail@plt+0x7d64>
   1a768:	ldrb	r3, [sl, #40]	; 0x28
   1a76c:	cmp	r3, #0
   1a770:	beq	1a6e8 <__assert_fail@plt+0x80f4>
   1a774:	ldr	r3, [sl, #116]	; 0x74
   1a778:	add	r2, sl, #40	; 0x28
   1a77c:	cmp	r3, #0
   1a780:	beq	1a6e8 <__assert_fail@plt+0x80f4>
   1a784:	mov	r1, r9
   1a788:	ldr	r0, [sl, #144]	; 0x90
   1a78c:	bl	249fc <__assert_fail@plt+0x12408>
   1a790:	ldr	r0, [sl, #144]	; 0x90
   1a794:	ldr	r3, [r8]
   1a798:	cmp	r0, r3
   1a79c:	beq	1a6e8 <__assert_fail@plt+0x80f4>
   1a7a0:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a7a4:	ldr	r0, [sl, #144]	; 0x90
   1a7a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a7ac:	str	r7, [sl, #144]	; 0x90
   1a7b0:	b	1a6e8 <__assert_fail@plt+0x80f4>
   1a7b4:	ldrb	r3, [sl, #40]	; 0x28
   1a7b8:	cmp	r3, #0
   1a7bc:	beq	1a738 <__assert_fail@plt+0x8144>
   1a7c0:	ldr	r3, [sl, #116]	; 0x74
   1a7c4:	add	r2, sl, #40	; 0x28
   1a7c8:	cmp	r3, #0
   1a7cc:	beq	1a738 <__assert_fail@plt+0x8144>
   1a7d0:	mov	r1, r9
   1a7d4:	ldr	r0, [sl, #144]	; 0x90
   1a7d8:	bl	249fc <__assert_fail@plt+0x12408>
   1a7dc:	ldr	r0, [sl, #144]	; 0x90
   1a7e0:	ldr	r3, [r8]
   1a7e4:	cmp	r0, r3
   1a7e8:	beq	1a738 <__assert_fail@plt+0x8144>
   1a7ec:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a7f0:	ldr	r0, [sl, #144]	; 0x90
   1a7f4:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a7f8:	str	r7, [sl, #144]	; 0x90
   1a7fc:	b	1a738 <__assert_fail@plt+0x8144>
   1a800:	ldr	r9, [pc, #316]	; 1a944 <__assert_fail@plt+0x8350>
   1a804:	ldr	r8, [pc, #316]	; 1a948 <__assert_fail@plt+0x8354>
   1a808:	ldr	sl, [sp, #24]
   1a80c:	mov	r7, #0
   1a810:	ldr	r3, [sl]
   1a814:	cmp	r3, r4
   1a818:	cmpne	r3, r5
   1a81c:	beq	1a8a0 <__assert_fail@plt+0x82ac>
   1a820:	ldr	sl, [sl, #160]	; 0xa0
   1a824:	cmp	sl, #0
   1a828:	beq	1a850 <__assert_fail@plt+0x825c>
   1a82c:	ldrb	r3, [r6, #32]
   1a830:	cmp	r3, #0
   1a834:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a838:	ldr	r3, [sl, #156]	; 0x9c
   1a83c:	cmp	r3, #0
   1a840:	beq	1a810 <__assert_fail@plt+0x821c>
   1a844:	str	r3, [sp, #20]
   1a848:	str	sl, [sp, #24]
   1a84c:	b	1a348 <__assert_fail@plt+0x7d54>
   1a850:	ldr	r9, [pc, #236]	; 1a944 <__assert_fail@plt+0x8350>
   1a854:	ldr	r8, [pc, #236]	; 1a948 <__assert_fail@plt+0x8354>
   1a858:	ldr	sl, [sp, #28]
   1a85c:	mov	r7, #0
   1a860:	ldr	r3, [sl]
   1a864:	cmp	r3, r5
   1a868:	cmpne	r3, r4
   1a86c:	beq	1a8ec <__assert_fail@plt+0x82f8>
   1a870:	ldr	sl, [sl, #160]	; 0xa0
   1a874:	cmp	sl, #0
   1a878:	beq	1a5d8 <__assert_fail@plt+0x7fe4>
   1a87c:	ldrb	r3, [r6, #32]
   1a880:	cmp	r3, #0
   1a884:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a888:	ldr	r3, [sl, #156]	; 0x9c
   1a88c:	cmp	r3, #0
   1a890:	beq	1a860 <__assert_fail@plt+0x826c>
   1a894:	str	r3, [sp, #24]
   1a898:	str	sl, [sp, #28]
   1a89c:	b	1a338 <__assert_fail@plt+0x7d44>
   1a8a0:	ldrb	r3, [sl, #40]	; 0x28
   1a8a4:	cmp	r3, #0
   1a8a8:	beq	1a820 <__assert_fail@plt+0x822c>
   1a8ac:	ldr	r3, [sl, #116]	; 0x74
   1a8b0:	add	r2, sl, #40	; 0x28
   1a8b4:	cmp	r3, #0
   1a8b8:	beq	1a820 <__assert_fail@plt+0x822c>
   1a8bc:	mov	r1, r9
   1a8c0:	ldr	r0, [sl, #144]	; 0x90
   1a8c4:	bl	249fc <__assert_fail@plt+0x12408>
   1a8c8:	ldr	r0, [sl, #144]	; 0x90
   1a8cc:	ldr	r3, [r8]
   1a8d0:	cmp	r0, r3
   1a8d4:	beq	1a820 <__assert_fail@plt+0x822c>
   1a8d8:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a8dc:	ldr	r0, [sl, #144]	; 0x90
   1a8e0:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a8e4:	str	r7, [sl, #144]	; 0x90
   1a8e8:	b	1a820 <__assert_fail@plt+0x822c>
   1a8ec:	ldrb	r3, [sl, #40]	; 0x28
   1a8f0:	cmp	r3, #0
   1a8f4:	beq	1a870 <__assert_fail@plt+0x827c>
   1a8f8:	ldr	r3, [sl, #116]	; 0x74
   1a8fc:	add	r2, sl, #40	; 0x28
   1a900:	cmp	r3, #0
   1a904:	beq	1a870 <__assert_fail@plt+0x827c>
   1a908:	mov	r1, r9
   1a90c:	ldr	r0, [sl, #144]	; 0x90
   1a910:	bl	249fc <__assert_fail@plt+0x12408>
   1a914:	ldr	r0, [sl, #144]	; 0x90
   1a918:	ldr	r3, [r8]
   1a91c:	cmp	r0, r3
   1a920:	beq	1a870 <__assert_fail@plt+0x827c>
   1a924:	bl	34530 <__assert_fail@plt+0x21f3c>
   1a928:	ldr	r0, [sl, #144]	; 0x90
   1a92c:	bl	376d0 <__assert_fail@plt+0x250dc>
   1a930:	str	r7, [sl, #144]	; 0x90
   1a934:	b	1a870 <__assert_fail@plt+0x827c>
   1a938:	andeq	r4, r6, r0, asr #28
   1a93c:	andeq	r4, r1, r8, asr #24
   1a940:			; <UNDEFINED> instruction: 0x000142b8
   1a944:	andeq	r9, r1, ip, lsl #29
   1a948:	andeq	r4, r6, ip, ror #10
   1a94c:	andeq	pc, r4, r0, asr #7
   1a950:	andeq	pc, r4, ip, lsl #9
   1a954:			; <UNDEFINED> instruction: 0x0004f4b0
   1a958:	push	{r4, r5, r6, lr}
   1a95c:	mov	r4, r1
   1a960:	mov	r1, r2
   1a964:	mov	r5, r0
   1a968:	bl	17b14 <__assert_fail@plt+0x5520>
   1a96c:	ldr	ip, [r5, #4]
   1a970:	mov	r2, #0
   1a974:	mov	r1, #1
   1a978:	stm	r0, {r4, ip}
   1a97c:	str	r1, [r0, #8]
   1a980:	str	r2, [r0, #40]	; 0x28
   1a984:	str	r2, [r0, #12]
   1a988:	pop	{r4, r5, r6, pc}
   1a98c:	push	{r4, r5, r6, lr}
   1a990:	ldr	r4, [r0, #12]
   1a994:	cmp	r4, #0
   1a998:	beq	1a9c4 <__assert_fail@plt+0x83d0>
   1a99c:	mov	r5, r0
   1a9a0:	bl	17b14 <__assert_fail@plt+0x5520>
   1a9a4:	ldr	ip, [r5, #4]
   1a9a8:	mov	r2, #0
   1a9ac:	mov	r1, #1
   1a9b0:	stm	r0, {r4, ip}
   1a9b4:	str	r1, [r0, #8]
   1a9b8:	str	r2, [r0, #40]	; 0x28
   1a9bc:	str	r2, [r0, #12]
   1a9c0:	pop	{r4, r5, r6, pc}
   1a9c4:	bl	12680 <__assert_fail@plt+0x8c>
   1a9c8:	push	{r4, r5, r6, lr}
   1a9cc:	ldr	r4, [r0, #12]
   1a9d0:	cmp	r4, #0
   1a9d4:	beq	1aa04 <__assert_fail@plt+0x8410>
   1a9d8:	mov	r1, #0
   1a9dc:	mov	r5, r0
   1a9e0:	bl	17b14 <__assert_fail@plt+0x5520>
   1a9e4:	ldr	ip, [r5, #4]
   1a9e8:	mov	r2, #0
   1a9ec:	mov	r1, #1
   1a9f0:	stm	r0, {r4, ip}
   1a9f4:	str	r1, [r0, #8]
   1a9f8:	str	r2, [r0, #40]	; 0x28
   1a9fc:	str	r2, [r0, #12]
   1aa00:	pop	{r4, r5, r6, pc}
   1aa04:	bl	12680 <__assert_fail@plt+0x8c>
   1aa08:	push	{r7, fp, lr}
   1aa0c:	subs	r7, r0, #0
   1aa10:	sub	sp, sp, #12
   1aa14:	beq	1aa4c <__assert_fail@plt+0x8458>
   1aa18:	ldr	r3, [pc, #460]	; 1abec <__assert_fail@plt+0x85f8>
   1aa1c:	mov	r2, #5
   1aa20:	ldr	r1, [pc, #456]	; 1abf0 <__assert_fail@plt+0x85fc>
   1aa24:	mov	r0, #0
   1aa28:	ldr	r4, [r3]
   1aa2c:	bl	120b4 <dcgettext@plt>
   1aa30:	ldr	r3, [pc, #444]	; 1abf4 <__assert_fail@plt+0x8600>
   1aa34:	ldr	r2, [r3]
   1aa38:	mov	r1, r0
   1aa3c:	mov	r0, r4
   1aa40:	bl	1233c <fprintf@plt>
   1aa44:	mov	r0, r7
   1aa48:	bl	122d0 <exit@plt>
   1aa4c:	ldr	r6, [pc, #420]	; 1abf8 <__assert_fail@plt+0x8604>
   1aa50:	mov	r2, #5
   1aa54:	ldr	r1, [pc, #416]	; 1abfc <__assert_fail@plt+0x8608>
   1aa58:	ldr	r3, [r6]
   1aa5c:	ldr	fp, [pc, #400]	; 1abf4 <__assert_fail@plt+0x8600>
   1aa60:	str	r3, [sp, #4]
   1aa64:	bl	120b4 <dcgettext@plt>
   1aa68:	ldr	r3, [sp, #4]
   1aa6c:	ldr	r2, [fp]
   1aa70:	mov	r5, r7
   1aa74:	mov	r4, #1
   1aa78:	ldr	r9, [pc, #384]	; 1ac00 <__assert_fail@plt+0x860c>
   1aa7c:	ldr	r8, [pc, #384]	; 1ac04 <__assert_fail@plt+0x8610>
   1aa80:	ldr	sl, [pc, #384]	; 1ac08 <__assert_fail@plt+0x8614>
   1aa84:	mov	r1, r0
   1aa88:	mov	r0, r3
   1aa8c:	bl	1233c <fprintf@plt>
   1aa90:	mov	r2, #5
   1aa94:	ldr	r1, [pc, #368]	; 1ac0c <__assert_fail@plt+0x8618>
   1aa98:	mov	r0, r7
   1aa9c:	bl	120b4 <dcgettext@plt>
   1aaa0:	ldr	r1, [r6]
   1aaa4:	bl	12588 <fputs@plt>
   1aaa8:	mov	r2, #5
   1aaac:	ldr	r1, [pc, #348]	; 1ac10 <__assert_fail@plt+0x861c>
   1aab0:	mov	r0, r7
   1aab4:	bl	120b4 <dcgettext@plt>
   1aab8:	ldr	r1, [r6]
   1aabc:	bl	12588 <fputs@plt>
   1aac0:	mov	r2, #5
   1aac4:	ldr	r1, [pc, #328]	; 1ac14 <__assert_fail@plt+0x8620>
   1aac8:	mov	r0, r7
   1aacc:	bl	120b4 <dcgettext@plt>
   1aad0:	ldr	r1, [r6]
   1aad4:	bl	12588 <fputs@plt>
   1aad8:	mov	r2, #5
   1aadc:	ldr	r1, [pc, #308]	; 1ac18 <__assert_fail@plt+0x8624>
   1aae0:	mov	r0, r7
   1aae4:	bl	120b4 <dcgettext@plt>
   1aae8:	ldr	r1, [r6]
   1aaec:	bl	12588 <fputs@plt>
   1aaf0:	mov	r2, #5
   1aaf4:	ldr	r1, [pc, #288]	; 1ac1c <__assert_fail@plt+0x8628>
   1aaf8:	mov	r0, r7
   1aafc:	bl	120b4 <dcgettext@plt>
   1ab00:	ldr	r1, [r6]
   1ab04:	bl	12588 <fputs@plt>
   1ab08:	mov	r2, #5
   1ab0c:	ldr	r1, [pc, #268]	; 1ac20 <__assert_fail@plt+0x862c>
   1ab10:	mov	r0, r7
   1ab14:	bl	120b4 <dcgettext@plt>
   1ab18:	ldr	r1, [r6]
   1ab1c:	bl	12588 <fputs@plt>
   1ab20:	mov	r2, #5
   1ab24:	ldr	r1, [pc, #248]	; 1ac24 <__assert_fail@plt+0x8630>
   1ab28:	mov	r0, r7
   1ab2c:	bl	120b4 <dcgettext@plt>
   1ab30:	ldr	r1, [r6]
   1ab34:	bl	12588 <fputs@plt>
   1ab38:	mov	r2, #5
   1ab3c:	ldr	r1, [pc, #228]	; 1ac28 <__assert_fail@plt+0x8634>
   1ab40:	mov	r0, r7
   1ab44:	bl	120b4 <dcgettext@plt>
   1ab48:	ldr	r1, [r6]
   1ab4c:	bl	12588 <fputs@plt>
   1ab50:	mov	r2, #5
   1ab54:	ldr	r1, [pc, #208]	; 1ac2c <__assert_fail@plt+0x8638>
   1ab58:	mov	r0, r7
   1ab5c:	bl	120b4 <dcgettext@plt>
   1ab60:	ldr	r1, [r6]
   1ab64:	bl	12588 <fputs@plt>
   1ab68:	mov	r2, #5
   1ab6c:	ldr	r1, [pc, #188]	; 1ac30 <__assert_fail@plt+0x863c>
   1ab70:	mov	r0, r7
   1ab74:	bl	120b4 <dcgettext@plt>
   1ab78:	ldr	r1, [r6]
   1ab7c:	bl	12588 <fputs@plt>
   1ab80:	b	1ab8c <__assert_fail@plt+0x8598>
   1ab84:	add	r4, r4, #1
   1ab88:	add	r5, r5, #12
   1ab8c:	cmp	r4, #1
   1ab90:	ldr	r3, [r9, r5]
   1ab94:	ldr	r0, [r6]
   1ab98:	beq	1abdc <__assert_fail@plt+0x85e8>
   1ab9c:	mov	r2, sl
   1aba0:	mov	r1, r8
   1aba4:	bl	1233c <fprintf@plt>
   1aba8:	cmp	r4, #9
   1abac:	bne	1ab84 <__assert_fail@plt+0x8590>
   1abb0:	mov	r2, #5
   1abb4:	ldr	r1, [pc, #120]	; 1ac34 <__assert_fail@plt+0x8640>
   1abb8:	mov	r0, #0
   1abbc:	bl	120b4 <dcgettext@plt>
   1abc0:	ldr	r1, [r6]
   1abc4:	bl	12588 <fputs@plt>
   1abc8:	ldr	r1, [fp]
   1abcc:	ldr	r0, [r6]
   1abd0:	bl	266e8 <__assert_fail@plt+0x140f4>
   1abd4:	mov	r0, #0
   1abd8:	bl	122d0 <exit@plt>
   1abdc:	ldr	r2, [pc, #84]	; 1ac38 <__assert_fail@plt+0x8644>
   1abe0:	mov	r1, r8
   1abe4:	bl	1233c <fprintf@plt>
   1abe8:	b	1ab84 <__assert_fail@plt+0x8590>
   1abec:	andeq	r4, r6, r8, asr #10
   1abf0:	andeq	pc, r4, ip, asr #9
   1abf4:	andeq	r4, r6, r4, lsl #26
   1abf8:	andeq	r4, r6, r4, asr r5
   1abfc:	strdeq	pc, [r4], -r4
   1ac00:	andeq	pc, r4, r0, ror #7
   1ac04:	andeq	pc, r4, ip, lsl ip	; <UNPREDICTABLE>
   1ac08:	muleq	r4, ip, fp
   1ac0c:	andeq	pc, r4, r0, asr #10
   1ac10:	andeq	pc, r4, ip, asr #11
   1ac14:	muleq	r4, ip, r6
   1ac18:	strdeq	pc, [r4], -r4
   1ac1c:	andeq	pc, r4, r4, asr #15
   1ac20:	andeq	pc, r4, r4, ror #19
   1ac24:	andeq	pc, r4, r4, ror #21
   1ac28:	strdeq	pc, [r4], -ip
   1ac2c:	andeq	pc, r4, r8, lsr fp	; <UNPREDICTABLE>
   1ac30:	andeq	pc, r4, r0, lsl #23
   1ac34:	andeq	pc, r4, r0, lsr #23
   1ac38:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   1ac3c:	bx	lr
   1ac40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ac44:	ldr	r4, [pc, #276]	; 1ad60 <__assert_fail@plt+0x876c>
   1ac48:	ldrb	r3, [r4, #4]
   1ac4c:	cmp	r3, #0
   1ac50:	ldrne	r6, [r2, #16]
   1ac54:	beq	1ac70 <__assert_fail@plt+0x867c>
   1ac58:	mov	r3, #1
   1ac5c:	str	r6, [r4, #8]
   1ac60:	strb	r3, [r4, #4]
   1ac64:	strb	r3, [r4, #5]
   1ac68:	mov	r0, #0
   1ac6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac70:	ldr	r8, [pc, #236]	; 1ad64 <__assert_fail@plt+0x8770>
   1ac74:	mov	r7, r1
   1ac78:	mov	r6, r0
   1ac7c:	mov	r1, r2
   1ac80:	mov	r0, r7
   1ac84:	ldr	r3, [r8, #52]	; 0x34
   1ac88:	mov	r5, r2
   1ac8c:	blx	r3
   1ac90:	cmp	r0, #0
   1ac94:	beq	1acfc <__assert_fail@plt+0x8708>
   1ac98:	ldrb	r3, [r8, #14]
   1ac9c:	cmp	r3, #0
   1aca0:	beq	1ad54 <__assert_fail@plt+0x8760>
   1aca4:	bl	12348 <__errno_location@plt>
   1aca8:	ldr	r5, [r0]
   1acac:	cmp	r5, #2
   1acb0:	beq	1ad4c <__assert_fail@plt+0x8758>
   1acb4:	ldrb	r7, [r4, #40]	; 0x28
   1acb8:	cmp	r7, #0
   1acbc:	bne	1acec <__assert_fail@plt+0x86f8>
   1acc0:	mov	r2, r6
   1acc4:	ldr	r1, [r8, #72]	; 0x48
   1acc8:	mov	r0, r7
   1accc:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1acd0:	mov	r1, r5
   1acd4:	ldr	r2, [pc, #140]	; 1ad68 <__assert_fail@plt+0x8774>
   1acd8:	mov	r3, r0
   1acdc:	mov	r0, r7
   1ace0:	bl	121ec <error@plt>
   1ace4:	mov	r3, #1
   1ace8:	str	r3, [r4, #28]
   1acec:	mov	r3, #1
   1acf0:	strb	r3, [r4, #40]	; 0x28
   1acf4:	mvn	r0, #0
   1acf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1acfc:	ldr	r6, [r5, #16]
   1ad00:	cmp	r6, #0
   1ad04:	bne	1ac58 <__assert_fail@plt+0x8664>
   1ad08:	mov	r2, #5
   1ad0c:	ldr	r1, [pc, #88]	; 1ad6c <__assert_fail@plt+0x8778>
   1ad10:	bl	120b4 <dcgettext@plt>
   1ad14:	mov	r2, r7
   1ad18:	ldr	r1, [r8, #72]	; 0x48
   1ad1c:	mov	r9, r0
   1ad20:	mov	r0, r6
   1ad24:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1ad28:	mov	r1, r6
   1ad2c:	mov	r2, r9
   1ad30:	mov	r3, r0
   1ad34:	mov	r0, r6
   1ad38:	bl	121ec <error@plt>
   1ad3c:	mov	r3, #1
   1ad40:	ldr	r6, [r5, #16]
   1ad44:	str	r3, [r4, #28]
   1ad48:	b	1ac58 <__assert_fail@plt+0x8664>
   1ad4c:	mvn	r0, #0
   1ad50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad54:	bl	12348 <__errno_location@plt>
   1ad58:	ldr	r5, [r0]
   1ad5c:	b	1acb4 <__assert_fail@plt+0x86c0>
   1ad60:	andeq	r4, r6, r0, asr #28
   1ad64:	andeq	r4, r6, ip, ror #28
   1ad68:	andeq	r2, r5, r4, asr #9
   1ad6c:	andeq	lr, r4, r8, lsl r1
   1ad70:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad74:	vpush	{d8}
   1ad78:	sub	sp, sp, #396	; 0x18c
   1ad7c:	mov	r0, sp
   1ad80:	bl	1209c <uname@plt>
   1ad84:	subs	r1, r0, #0
   1ad88:	bne	1ade0 <__assert_fail@plt+0x87ec>
   1ad8c:	add	r0, sp, #130	; 0x82
   1ad90:	bl	123b4 <strtod@plt>
   1ad94:	mov	r1, sp
   1ad98:	ldr	r0, [pc, #120]	; 1ae18 <__assert_fail@plt+0x8824>
   1ad9c:	vcvt.f32.f64	s16, d0
   1ada0:	bl	11f40 <strcmp@plt>
   1ada4:	cmp	r0, #0
   1ada8:	beq	1adf0 <__assert_fail@plt+0x87fc>
   1adac:	mov	r1, sp
   1adb0:	ldr	r0, [pc, #100]	; 1ae1c <__assert_fail@plt+0x8828>
   1adb4:	bl	11f40 <strcmp@plt>
   1adb8:	cmp	r0, #0
   1adbc:	bne	1ade0 <__assert_fail@plt+0x87ec>
   1adc0:	vldr	s15, [pc, #72]	; 1ae10 <__assert_fail@plt+0x881c>
   1adc4:	vcmpe.f32	s16, s15
   1adc8:	vmrs	APSR_nzcv, fpscr
   1adcc:	movge	r0, #1
   1add0:	movlt	r0, #0
   1add4:	add	sp, sp, #396	; 0x18c
   1add8:	vpop	{d8}
   1addc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ade0:	mov	r0, #1
   1ade4:	add	sp, sp, #396	; 0x18c
   1ade8:	vpop	{d8}
   1adec:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf0:	vldr	s15, [pc, #28]	; 1ae14 <__assert_fail@plt+0x8820>
   1adf4:	vcmpe.f32	s16, s15
   1adf8:	vmrs	APSR_nzcv, fpscr
   1adfc:	movge	r0, #1
   1ae00:	movlt	r0, #0
   1ae04:	add	sp, sp, #396	; 0x18c
   1ae08:	vpop	{d8}
   1ae0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae10:	submi	r6, r6, r6, ror #12
   1ae14:	andmi	ip, ip, sp, asr #25
   1ae18:	andeq	pc, r4, r4, ror #23
   1ae1c:	andeq	pc, r4, ip, ror #23
   1ae20:	push	{r4, lr}
   1ae24:	ldr	r4, [pc, #28]	; 1ae48 <__assert_fail@plt+0x8854>
   1ae28:	ldrb	r3, [r4, #32]
   1ae2c:	cmp	r3, #0
   1ae30:	popeq	{r4, pc}
   1ae34:	bl	17414 <__assert_fail@plt+0x4e20>
   1ae38:	bl	1a2f8 <__assert_fail@plt+0x7d04>
   1ae3c:	mov	r3, #0
   1ae40:	strb	r3, [r4, #32]
   1ae44:	pop	{r4, pc}
   1ae48:	andeq	r4, r6, r0, asr #28
   1ae4c:	push	{r4, r5, lr}
   1ae50:	mov	r0, #8
   1ae54:	sub	sp, sp, #12
   1ae58:	bl	3563c <__assert_fail@plt+0x23048>
   1ae5c:	ldr	r4, [pc, #108]	; 1aed0 <__assert_fail@plt+0x88dc>
   1ae60:	str	r0, [r4]
   1ae64:	bl	344c0 <__assert_fail@plt+0x21ecc>
   1ae68:	cmp	r0, #0
   1ae6c:	bne	1ae78 <__assert_fail@plt+0x8884>
   1ae70:	add	sp, sp, #12
   1ae74:	pop	{r4, r5, pc}
   1ae78:	bl	12348 <__errno_location@plt>
   1ae7c:	mov	r2, #5
   1ae80:	ldr	r1, [pc, #76]	; 1aed4 <__assert_fail@plt+0x88e0>
   1ae84:	ldr	r5, [r0]
   1ae88:	mov	r0, #0
   1ae8c:	bl	120b4 <dcgettext@plt>
   1ae90:	ldr	r3, [r4]
   1ae94:	ldr	r1, [r3]
   1ae98:	cmp	r1, #0
   1ae9c:	mov	r2, r0
   1aea0:	blt	1aebc <__assert_fail@plt+0x88c8>
   1aea4:	ldr	r3, [pc, #44]	; 1aed8 <__assert_fail@plt+0x88e4>
   1aea8:	mov	r1, r3
   1aeac:	str	r1, [sp]
   1aeb0:	mov	r0, #1
   1aeb4:	mov	r1, r5
   1aeb8:	bl	121ec <error@plt>
   1aebc:	ldr	r1, [r3, #4]
   1aec0:	cmp	r1, #0
   1aec4:	ldrne	r3, [pc, #16]	; 1aedc <__assert_fail@plt+0x88e8>
   1aec8:	bne	1aeac <__assert_fail@plt+0x88b8>
   1aecc:	b	1aea4 <__assert_fail@plt+0x88b0>
   1aed0:	andeq	r4, r6, ip, ror #10
   1aed4:	strdeq	pc, [r4], -r4
   1aed8:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   1aedc:	andeq	r0, r5, ip, lsr #24
   1aee0:	push	{r4, r5, r6, lr}
   1aee4:	sub	sp, sp, #8
   1aee8:	bl	17414 <__assert_fail@plt+0x4e20>
   1aeec:	ldr	r5, [pc, #328]	; 1b03c <__assert_fail@plt+0x8a48>
   1aef0:	subs	r4, r0, #0
   1aef4:	beq	1af84 <__assert_fail@plt+0x8990>
   1aef8:	ldr	r1, [pc, #320]	; 1b040 <__assert_fail@plt+0x8a4c>
   1aefc:	bl	19ea4 <__assert_fail@plt+0x78b0>
   1af00:	ldrb	r3, [r5, #32]
   1af04:	cmp	r3, #0
   1af08:	bne	1af70 <__assert_fail@plt+0x897c>
   1af0c:	ldr	r0, [r5, #36]	; 0x24
   1af10:	bl	1c0ec <__assert_fail@plt+0x9af8>
   1af14:	mov	r0, r4
   1af18:	ldr	r1, [pc, #292]	; 1b044 <__assert_fail@plt+0x8a50>
   1af1c:	bl	19ea4 <__assert_fail@plt+0x78b0>
   1af20:	ldr	r4, [pc, #288]	; 1b048 <__assert_fail@plt+0x8a54>
   1af24:	ldr	r0, [r4]
   1af28:	bl	34514 <__assert_fail@plt+0x21f20>
   1af2c:	subs	r6, r0, #0
   1af30:	bne	1afdc <__assert_fail@plt+0x89e8>
   1af34:	ldr	r0, [r4]
   1af38:	bl	34530 <__assert_fail@plt+0x21f3c>
   1af3c:	ldr	r0, [r4]
   1af40:	bl	376d0 <__assert_fail@plt+0x250dc>
   1af44:	str	r6, [r4]
   1af48:	bl	253f4 <__assert_fail@plt+0x12e00>
   1af4c:	cmp	r0, #0
   1af50:	bne	1af90 <__assert_fail@plt+0x899c>
   1af54:	ldr	r3, [pc, #240]	; 1b04c <__assert_fail@plt+0x8a58>
   1af58:	ldr	r0, [r3]
   1af5c:	bl	37670 <__assert_fail@plt+0x2507c>
   1af60:	cmn	r0, #1
   1af64:	beq	1af9c <__assert_fail@plt+0x89a8>
   1af68:	add	sp, sp, #8
   1af6c:	pop	{r4, r5, r6, pc}
   1af70:	bl	17414 <__assert_fail@plt+0x4e20>
   1af74:	bl	1a2f8 <__assert_fail@plt+0x7d04>
   1af78:	mov	r3, #0
   1af7c:	strb	r3, [r5, #32]
   1af80:	b	1af0c <__assert_fail@plt+0x8918>
   1af84:	ldr	r0, [r5, #36]	; 0x24
   1af88:	bl	1c0ec <__assert_fail@plt+0x9af8>
   1af8c:	b	1af20 <__assert_fail@plt+0x892c>
   1af90:	bl	25410 <__assert_fail@plt+0x12e1c>
   1af94:	bl	253d0 <__assert_fail@plt+0x12ddc>
   1af98:	b	1af54 <__assert_fail@plt+0x8960>
   1af9c:	bl	12348 <__errno_location@plt>
   1afa0:	ldr	r3, [pc, #168]	; 1b050 <__assert_fail@plt+0x8a5c>
   1afa4:	ldr	r2, [pc, #168]	; 1b054 <__assert_fail@plt+0x8a60>
   1afa8:	ldr	r1, [r3, #72]	; 0x48
   1afac:	ldr	r4, [r0]
   1afb0:	mov	r0, #0
   1afb4:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1afb8:	mov	r1, r4
   1afbc:	ldr	r2, [pc, #148]	; 1b058 <__assert_fail@plt+0x8a64>
   1afc0:	mov	r3, r0
   1afc4:	mov	r0, #0
   1afc8:	bl	121ec <error@plt>
   1afcc:	mov	r3, #1
   1afd0:	str	r3, [r5, #28]
   1afd4:	add	sp, sp, #8
   1afd8:	pop	{r4, r5, r6, pc}
   1afdc:	bl	12348 <__errno_location@plt>
   1afe0:	mov	r2, #5
   1afe4:	ldr	r1, [pc, #112]	; 1b05c <__assert_fail@plt+0x8a68>
   1afe8:	ldr	r5, [r0]
   1afec:	mov	r0, #0
   1aff0:	bl	120b4 <dcgettext@plt>
   1aff4:	ldr	r3, [r4]
   1aff8:	ldr	r1, [r3]
   1affc:	cmp	r1, #0
   1b000:	mov	r2, r0
   1b004:	blt	1b028 <__assert_fail@plt+0x8a34>
   1b008:	ldr	r3, [pc, #80]	; 1b060 <__assert_fail@plt+0x8a6c>
   1b00c:	mov	r1, r3
   1b010:	str	r1, [sp]
   1b014:	mov	r0, #0
   1b018:	mov	r1, r5
   1b01c:	bl	121ec <error@plt>
   1b020:	mov	r0, #1
   1b024:	bl	12018 <_exit@plt>
   1b028:	ldr	r1, [r3, #4]
   1b02c:	cmp	r1, #0
   1b030:	ldrne	r3, [pc, #44]	; 1b064 <__assert_fail@plt+0x8a70>
   1b034:	bne	1b010 <__assert_fail@plt+0x8a1c>
   1b038:	b	1b008 <__assert_fail@plt+0x8a14>
   1b03c:	andeq	r4, r6, r0, asr #28
   1b040:	strdeq	r9, [r1], -ip
   1b044:	andeq	r9, r1, r8, lsr lr
   1b048:	andeq	r4, r6, ip, ror #10
   1b04c:	andeq	r4, r6, r4, asr r5
   1b050:	andeq	r4, r6, ip, ror #28
   1b054:	andeq	pc, r4, r4, asr ip	; <UNPREDICTABLE>
   1b058:	andeq	r2, r5, r4, asr #9
   1b05c:	andeq	pc, r4, r4, lsr #24
   1b060:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   1b064:	andeq	r0, r5, ip, lsr #24
   1b068:	push	{r4, r5, r6, r7, lr}
   1b06c:	mov	r7, r1
   1b070:	ldr	r4, [pc, #192]	; 1b138 <__assert_fail@plt+0x8b44>
   1b074:	sub	sp, sp, #12
   1b078:	ldr	r1, [r4, #16]
   1b07c:	cmn	r1, #100	; 0x64
   1b080:	cmpne	r1, #0
   1b084:	blt	1b124 <__assert_fail@plt+0x8b30>
   1b088:	ldr	r3, [r4]
   1b08c:	mov	r5, r0
   1b090:	cmp	r3, #0
   1b094:	beq	1b0c0 <__assert_fail@plt+0x8acc>
   1b098:	mov	r0, #256	; 0x100
   1b09c:	str	r0, [sp]
   1b0a0:	mov	r3, r7
   1b0a4:	mov	r2, r5
   1b0a8:	mov	r0, #3
   1b0ac:	bl	1212c <__fxstatat64@plt>
   1b0b0:	mov	r6, r0
   1b0b4:	mov	r0, r6
   1b0b8:	add	sp, sp, #12
   1b0bc:	pop	{r4, r5, r6, r7, pc}
   1b0c0:	str	r3, [sp]
   1b0c4:	mov	r2, r0
   1b0c8:	mov	r3, r7
   1b0cc:	mov	r0, #3
   1b0d0:	bl	1212c <__fxstatat64@plt>
   1b0d4:	subs	r6, r0, #0
   1b0d8:	beq	1b0b4 <__assert_fail@plt+0x8ac0>
   1b0dc:	bl	12348 <__errno_location@plt>
   1b0e0:	ldr	r3, [r0]
   1b0e4:	cmp	r3, #2
   1b0e8:	beq	1b0f4 <__assert_fail@plt+0x8b00>
   1b0ec:	cmp	r3, #20
   1b0f0:	bne	1b0b4 <__assert_fail@plt+0x8ac0>
   1b0f4:	ldr	r3, [pc, #64]	; 1b13c <__assert_fail@plt+0x8b48>
   1b0f8:	ldr	r3, [r3, #44]	; 0x2c
   1b0fc:	tst	r3, #2
   1b100:	bne	1b10c <__assert_fail@plt+0x8b18>
   1b104:	ldr	r1, [r4, #16]
   1b108:	b	1b098 <__assert_fail@plt+0x8aa4>
   1b10c:	ldr	r3, [pc, #44]	; 1b140 <__assert_fail@plt+0x8b4c>
   1b110:	mov	r2, r5
   1b114:	ldr	r1, [pc, #40]	; 1b144 <__assert_fail@plt+0x8b50>
   1b118:	ldr	r0, [r3]
   1b11c:	bl	1233c <fprintf@plt>
   1b120:	b	1b104 <__assert_fail@plt+0x8b10>
   1b124:	ldr	r3, [pc, #28]	; 1b148 <__assert_fail@plt+0x8b54>
   1b128:	ldr	r2, [pc, #28]	; 1b14c <__assert_fail@plt+0x8b58>
   1b12c:	ldr	r1, [pc, #28]	; 1b150 <__assert_fail@plt+0x8b5c>
   1b130:	ldr	r0, [pc, #28]	; 1b154 <__assert_fail@plt+0x8b60>
   1b134:	bl	125f4 <__assert_fail@plt>
   1b138:	andeq	r4, r6, r0, asr #28
   1b13c:	andeq	r4, r6, ip, ror #28
   1b140:	andeq	r4, r6, r8, asr #10
   1b144:	andeq	pc, r4, ip, ror ip	; <UNPREDICTABLE>
   1b148:	andeq	pc, r4, ip, asr #8
   1b14c:	andeq	r0, r0, sp, asr r2
   1b150:	andeq	pc, r4, ip, lsl #9
   1b154:	andeq	pc, r4, r4, ror #24
   1b158:	push	{r4, r5, r6, r7, lr}
   1b15c:	mov	r7, r1
   1b160:	ldr	r5, [pc, #192]	; 1b228 <__assert_fail@plt+0x8c34>
   1b164:	sub	sp, sp, #12
   1b168:	ldr	r1, [r5, #16]
   1b16c:	cmn	r1, #100	; 0x64
   1b170:	cmpne	r1, #0
   1b174:	blt	1b214 <__assert_fail@plt+0x8c20>
   1b178:	mov	r3, #0
   1b17c:	str	r3, [sp]
   1b180:	mov	r2, r0
   1b184:	mov	r4, r0
   1b188:	mov	r3, r7
   1b18c:	mov	r0, #3
   1b190:	bl	1212c <__fxstatat64@plt>
   1b194:	subs	r6, r0, #0
   1b198:	bne	1b1a8 <__assert_fail@plt+0x8bb4>
   1b19c:	mov	r0, r6
   1b1a0:	add	sp, sp, #12
   1b1a4:	pop	{r4, r5, r6, r7, pc}
   1b1a8:	bl	12348 <__errno_location@plt>
   1b1ac:	ldr	r3, [r0]
   1b1b0:	cmp	r3, #2
   1b1b4:	beq	1b1c0 <__assert_fail@plt+0x8bcc>
   1b1b8:	cmp	r3, #20
   1b1bc:	bne	1b19c <__assert_fail@plt+0x8ba8>
   1b1c0:	ldr	r3, [pc, #100]	; 1b22c <__assert_fail@plt+0x8c38>
   1b1c4:	ldr	r3, [r3, #44]	; 0x2c
   1b1c8:	tst	r3, #2
   1b1cc:	bne	1b1fc <__assert_fail@plt+0x8c08>
   1b1d0:	mov	r0, #256	; 0x100
   1b1d4:	str	r0, [sp]
   1b1d8:	ldr	r1, [r5, #16]
   1b1dc:	mov	r3, r7
   1b1e0:	mov	r2, r4
   1b1e4:	mov	r0, #3
   1b1e8:	bl	1212c <__fxstatat64@plt>
   1b1ec:	mov	r6, r0
   1b1f0:	mov	r0, r6
   1b1f4:	add	sp, sp, #12
   1b1f8:	pop	{r4, r5, r6, r7, pc}
   1b1fc:	ldr	r3, [pc, #44]	; 1b230 <__assert_fail@plt+0x8c3c>
   1b200:	mov	r2, r4
   1b204:	ldr	r1, [pc, #40]	; 1b234 <__assert_fail@plt+0x8c40>
   1b208:	ldr	r0, [r3]
   1b20c:	bl	1233c <fprintf@plt>
   1b210:	b	1b1d0 <__assert_fail@plt+0x8bdc>
   1b214:	ldr	r3, [pc, #28]	; 1b238 <__assert_fail@plt+0x8c44>
   1b218:	mov	r2, #636	; 0x27c
   1b21c:	ldr	r1, [pc, #24]	; 1b23c <__assert_fail@plt+0x8c48>
   1b220:	ldr	r0, [pc, #24]	; 1b240 <__assert_fail@plt+0x8c4c>
   1b224:	bl	125f4 <__assert_fail@plt>
   1b228:	andeq	r4, r6, r0, asr #28
   1b22c:	andeq	r4, r6, ip, ror #28
   1b230:	andeq	r4, r6, r8, asr #10
   1b234:	andeq	pc, r4, ip, ror ip	; <UNPREDICTABLE>
   1b238:	andeq	pc, r4, ip, asr r4	; <UNPREDICTABLE>
   1b23c:	andeq	pc, r4, ip, lsl #9
   1b240:	andeq	pc, r4, r4, ror #24
   1b244:	ldr	ip, [pc, #76]	; 1b298 <__assert_fail@plt+0x8ca4>
   1b248:	push	{lr}		; (str lr, [sp, #-4]!)
   1b24c:	sub	sp, sp, #12
   1b250:	ldr	ip, [ip, #16]
   1b254:	cmn	ip, #100	; 0x64
   1b258:	cmpne	ip, #0
   1b25c:	blt	1b284 <__assert_fail@plt+0x8c90>
   1b260:	mov	lr, #256	; 0x100
   1b264:	mov	r3, r1
   1b268:	mov	r2, r0
   1b26c:	mov	r1, ip
   1b270:	str	lr, [sp]
   1b274:	mov	r0, #3
   1b278:	bl	1212c <__fxstatat64@plt>
   1b27c:	add	sp, sp, #12
   1b280:	pop	{pc}		; (ldr pc, [sp], #4)
   1b284:	ldr	r3, [pc, #16]	; 1b29c <__assert_fail@plt+0x8ca8>
   1b288:	ldr	r2, [pc, #16]	; 1b2a0 <__assert_fail@plt+0x8cac>
   1b28c:	ldr	r1, [pc, #16]	; 1b2a4 <__assert_fail@plt+0x8cb0>
   1b290:	ldr	r0, [pc, #16]	; 1b2a8 <__assert_fail@plt+0x8cb4>
   1b294:	bl	125f4 <__assert_fail@plt>
   1b298:	andeq	r4, r6, r0, asr #28
   1b29c:	andeq	pc, r4, ip, ror #8
   1b2a0:	andeq	r0, r0, sp, lsl #5
   1b2a4:	andeq	pc, r4, ip, lsl #9
   1b2a8:			; <UNDEFINED> instruction: 0x0004fcb8
   1b2ac:	ldr	r3, [pc, #208]	; 1b384 <__assert_fail@plt+0x8d90>
   1b2b0:	push	{r4, r5, r6, r7, lr}
   1b2b4:	mov	r2, r0
   1b2b8:	ldrd	r4, [r3]
   1b2bc:	ldr	ip, [pc, #196]	; 1b388 <__assert_fail@plt+0x8d94>
   1b2c0:	sub	sp, sp, #12
   1b2c4:	adds	r4, r4, #1
   1b2c8:	adc	r5, r5, #0
   1b2cc:	mov	r6, r0
   1b2d0:	mov	r7, r1
   1b2d4:	ldr	r0, [ip]
   1b2d8:	ldr	r1, [pc, #172]	; 1b38c <__assert_fail@plt+0x8d98>
   1b2dc:	strd	r4, [r3]
   1b2e0:	bl	1233c <fprintf@plt>
   1b2e4:	ldr	r3, [pc, #164]	; 1b390 <__assert_fail@plt+0x8d9c>
   1b2e8:	ldr	r3, [r3, #48]	; 0x30
   1b2ec:	cmp	r3, #1
   1b2f0:	beq	1b35c <__assert_fail@plt+0x8d68>
   1b2f4:	bcc	1b328 <__assert_fail@plt+0x8d34>
   1b2f8:	cmp	r3, #2
   1b2fc:	bne	1b314 <__assert_fail@plt+0x8d20>
   1b300:	mov	r1, r7
   1b304:	mov	r0, r6
   1b308:	add	sp, sp, #12
   1b30c:	pop	{r4, r5, r6, r7, lr}
   1b310:	b	1b068 <__assert_fail@plt+0x8a74>
   1b314:	ldr	r3, [pc, #120]	; 1b394 <__assert_fail@plt+0x8da0>
   1b318:	ldr	r2, [pc, #120]	; 1b398 <__assert_fail@plt+0x8da4>
   1b31c:	ldr	r1, [pc, #120]	; 1b39c <__assert_fail@plt+0x8da8>
   1b320:	ldr	r0, [pc, #120]	; 1b3a0 <__assert_fail@plt+0x8dac>
   1b324:	bl	125f4 <__assert_fail@plt>
   1b328:	ldr	r3, [pc, #116]	; 1b3a4 <__assert_fail@plt+0x8db0>
   1b32c:	ldr	r1, [r3, #16]
   1b330:	cmn	r1, #100	; 0x64
   1b334:	cmpne	r1, #0
   1b338:	blt	1b370 <__assert_fail@plt+0x8d7c>
   1b33c:	mov	r0, #256	; 0x100
   1b340:	str	r0, [sp]
   1b344:	mov	r3, r7
   1b348:	mov	r2, r6
   1b34c:	mov	r0, #3
   1b350:	bl	1212c <__fxstatat64@plt>
   1b354:	add	sp, sp, #12
   1b358:	pop	{r4, r5, r6, r7, pc}
   1b35c:	mov	r1, r7
   1b360:	mov	r0, r6
   1b364:	add	sp, sp, #12
   1b368:	pop	{r4, r5, r6, r7, lr}
   1b36c:	b	1b158 <__assert_fail@plt+0x8b64>
   1b370:	ldr	r3, [pc, #48]	; 1b3a8 <__assert_fail@plt+0x8db4>
   1b374:	ldr	r2, [pc, #48]	; 1b3ac <__assert_fail@plt+0x8db8>
   1b378:	ldr	r1, [pc, #28]	; 1b39c <__assert_fail@plt+0x8da8>
   1b37c:	ldr	r0, [pc, #44]	; 1b3b0 <__assert_fail@plt+0x8dbc>
   1b380:	bl	125f4 <__assert_fail@plt>
   1b384:	muleq	r6, r0, r5
   1b388:	andeq	r4, r6, r8, asr #10
   1b38c:	strdeq	pc, [r4], -r0
   1b390:	andeq	r4, r6, ip, ror #28
   1b394:	andeq	pc, r4, ip, ror r4	; <UNPREDICTABLE>
   1b398:	andeq	r0, r0, r5, lsr #5
   1b39c:	andeq	pc, r4, ip, lsl #9
   1b3a0:	andeq	r2, r5, r8, lsl r6
   1b3a4:	andeq	r4, r6, r0, asr #28
   1b3a8:	andeq	pc, r4, ip, ror #8
   1b3ac:	andeq	r0, r0, sp, lsl #5
   1b3b0:			; <UNDEFINED> instruction: 0x0004fcb8
   1b3b4:	ldr	r3, [pc, #36]	; 1b3e0 <__assert_fail@plt+0x8dec>
   1b3b8:	ldr	r0, [r3, #48]	; 0x30
   1b3bc:	cmp	r0, #1
   1b3c0:	bxeq	lr
   1b3c4:	cmp	r0, #2
   1b3c8:	movne	r0, #0
   1b3cc:	ldreq	r3, [pc, #16]	; 1b3e4 <__assert_fail@plt+0x8df0>
   1b3d0:	ldreq	r0, [r3]
   1b3d4:	clzeq	r0, r0
   1b3d8:	lsreq	r0, r0, #5
   1b3dc:	bx	lr
   1b3e0:	andeq	r4, r6, ip, ror #28
   1b3e4:	andeq	r4, r6, r0, asr #28
   1b3e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b3ec:	mov	r9, r1
   1b3f0:	ldr	r1, [r0]
   1b3f4:	mov	r6, r0
   1b3f8:	cmp	r1, #0
   1b3fc:	mov	r8, r2
   1b400:	mov	r7, r3
   1b404:	ldrb	r4, [sp, #32]
   1b408:	beq	1b434 <__assert_fail@plt+0x8e40>
   1b40c:	and	r3, r1, #61440	; 0xf000
   1b410:	cmp	r3, #40960	; 0xa000
   1b414:	beq	1b488 <__assert_fail@plt+0x8e94>
   1b418:	ldr	r5, [pc, #424]	; 1b5c8 <__assert_fail@plt+0x8fd4>
   1b41c:	mov	r4, #1
   1b420:	str	r1, [r5, #8]
   1b424:	str	r1, [r7, #16]
   1b428:	strb	r4, [r5, #5]
   1b42c:	mov	r0, r4
   1b430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b434:	cmp	r4, #0
   1b438:	beq	1b454 <__assert_fail@plt+0x8e60>
   1b43c:	ldr	r3, [pc, #388]	; 1b5c8 <__assert_fail@plt+0x8fd4>
   1b440:	mov	r0, r4
   1b444:	strb	r1, [r3, #4]
   1b448:	strb	r1, [r3, #5]
   1b44c:	str	r1, [r3, #8]
   1b450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b454:	ldr	r5, [pc, #364]	; 1b5c8 <__assert_fail@plt+0x8fd4>
   1b458:	ldrb	r4, [r5, #4]
   1b45c:	cmp	r4, #0
   1b460:	ldrne	r9, [r3, #16]
   1b464:	beq	1b4d0 <__assert_fail@plt+0x8edc>
   1b468:	mov	r3, #1
   1b46c:	mov	r4, r3
   1b470:	strb	r3, [r5, #4]
   1b474:	mov	r0, r4
   1b478:	str	r9, [r6]
   1b47c:	strb	r3, [r5, #5]
   1b480:	str	r9, [r5, #8]
   1b484:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b488:	ldr	r3, [pc, #316]	; 1b5cc <__assert_fail@plt+0x8fd8>
   1b48c:	ldr	r3, [r3, #48]	; 0x30
   1b490:	cmp	r3, #1
   1b494:	beq	1b4b0 <__assert_fail@plt+0x8ebc>
   1b498:	cmp	r3, #2
   1b49c:	ldr	r5, [pc, #292]	; 1b5c8 <__assert_fail@plt+0x8fd4>
   1b4a0:	bne	1b41c <__assert_fail@plt+0x8e28>
   1b4a4:	ldr	r3, [r5]
   1b4a8:	cmp	r3, #0
   1b4ac:	bne	1b41c <__assert_fail@plt+0x8e28>
   1b4b0:	mov	r1, r8
   1b4b4:	mov	r0, r9
   1b4b8:	mov	r2, r7
   1b4bc:	bl	1ac40 <__assert_fail@plt+0x864c>
   1b4c0:	cmp	r0, #0
   1b4c4:	beq	1b54c <__assert_fail@plt+0x8f58>
   1b4c8:	mov	r4, #0
   1b4cc:	b	1b42c <__assert_fail@plt+0x8e38>
   1b4d0:	ldr	sl, [pc, #244]	; 1b5cc <__assert_fail@plt+0x8fd8>
   1b4d4:	mov	r1, r3
   1b4d8:	mov	r0, r2
   1b4dc:	ldr	r3, [sl, #52]	; 0x34
   1b4e0:	blx	r3
   1b4e4:	cmp	r0, #0
   1b4e8:	beq	1b56c <__assert_fail@plt+0x8f78>
   1b4ec:	ldrb	r3, [sl, #14]
   1b4f0:	cmp	r3, #0
   1b4f4:	beq	1b5bc <__assert_fail@plt+0x8fc8>
   1b4f8:	bl	12348 <__errno_location@plt>
   1b4fc:	ldr	r6, [r0]
   1b500:	cmp	r6, #2
   1b504:	beq	1b4c8 <__assert_fail@plt+0x8ed4>
   1b508:	ldrb	r7, [r5, #40]	; 0x28
   1b50c:	cmp	r7, #0
   1b510:	bne	1b540 <__assert_fail@plt+0x8f4c>
   1b514:	mov	r2, r9
   1b518:	ldr	r1, [sl, #72]	; 0x48
   1b51c:	mov	r0, r7
   1b520:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1b524:	mov	r1, r6
   1b528:	ldr	r2, [pc, #160]	; 1b5d0 <__assert_fail@plt+0x8fdc>
   1b52c:	mov	r3, r0
   1b530:	mov	r0, r7
   1b534:	bl	121ec <error@plt>
   1b538:	mov	r3, #1
   1b53c:	str	r3, [r5, #28]
   1b540:	mov	r3, #1
   1b544:	strb	r3, [r5, #40]	; 0x28
   1b548:	b	1b42c <__assert_fail@plt+0x8e38>
   1b54c:	ldr	r3, [pc, #116]	; 1b5c8 <__assert_fail@plt+0x8fd4>
   1b550:	ldr	r1, [r7, #16]
   1b554:	mov	r2, #1
   1b558:	str	r1, [r3, #8]
   1b55c:	mov	r4, r2
   1b560:	str	r1, [r6]
   1b564:	strb	r2, [r3, #5]
   1b568:	b	1b42c <__assert_fail@plt+0x8e38>
   1b56c:	ldr	r9, [r7, #16]
   1b570:	cmp	r9, #0
   1b574:	bne	1b468 <__assert_fail@plt+0x8e74>
   1b578:	mov	r2, #5
   1b57c:	ldr	r1, [pc, #80]	; 1b5d4 <__assert_fail@plt+0x8fe0>
   1b580:	bl	120b4 <dcgettext@plt>
   1b584:	mov	r2, r8
   1b588:	ldr	r1, [sl, #72]	; 0x48
   1b58c:	mov	r4, r0
   1b590:	mov	r0, r9
   1b594:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1b598:	mov	r1, r9
   1b59c:	mov	r2, r4
   1b5a0:	mov	r3, r0
   1b5a4:	mov	r0, r9
   1b5a8:	bl	121ec <error@plt>
   1b5ac:	mov	r3, #1
   1b5b0:	ldr	r9, [r7, #16]
   1b5b4:	str	r3, [r5, #28]
   1b5b8:	b	1b468 <__assert_fail@plt+0x8e74>
   1b5bc:	bl	12348 <__errno_location@plt>
   1b5c0:	ldr	r6, [r0]
   1b5c4:	b	1b508 <__assert_fail@plt+0x8f14>
   1b5c8:	andeq	r4, r6, r0, asr #28
   1b5cc:	andeq	r4, r6, ip, ror #28
   1b5d0:	andeq	r2, r5, r4, asr #9
   1b5d4:	andeq	lr, r4, r8, lsl r1
   1b5d8:	subs	r3, r0, #0
   1b5dc:	beq	1b608 <__assert_fail@plt+0x9014>
   1b5e0:	ldrb	r0, [r3, #17]
   1b5e4:	cmp	r0, #0
   1b5e8:	beq	1b5fc <__assert_fail@plt+0x9008>
   1b5ec:	b	1b610 <__assert_fail@plt+0x901c>
   1b5f0:	ldrb	r2, [r3, #17]
   1b5f4:	cmp	r2, #0
   1b5f8:	bxne	lr
   1b5fc:	ldr	r3, [r3, #152]	; 0x98
   1b600:	cmp	r3, #0
   1b604:	bne	1b5f0 <__assert_fail@plt+0x8ffc>
   1b608:	mov	r0, #1
   1b60c:	bx	lr
   1b610:	mov	r0, #0
   1b614:	bx	lr
   1b618:	ldrb	r3, [r0]
   1b61c:	sub	r3, r3, #33	; 0x21
   1b620:	cmp	r3, #12
   1b624:	ldrls	pc, [pc, r3, lsl #2]
   1b628:	b	1b67c <__assert_fail@plt+0x9088>
   1b62c:	andeq	fp, r1, r4, lsl #13
   1b630:	andeq	fp, r1, ip, ror r6
   1b634:	andeq	fp, r1, ip, ror r6
   1b638:	andeq	fp, r1, ip, ror r6
   1b63c:	andeq	fp, r1, ip, ror r6
   1b640:	andeq	fp, r1, ip, ror r6
   1b644:	andeq	fp, r1, ip, ror r6
   1b648:	andeq	fp, r1, r4, lsl #13
   1b64c:	andeq	fp, r1, r0, ror r6
   1b650:	andeq	fp, r1, ip, ror r6
   1b654:	andeq	fp, r1, ip, ror r6
   1b658:	andeq	fp, r1, r0, ror r6
   1b65c:	andeq	fp, r1, r0, ror #12
   1b660:	ldrb	r0, [r0, #1]
   1b664:	adds	r0, r0, #0
   1b668:	movne	r0, #1
   1b66c:	bx	lr
   1b670:	ldrb	r3, [r0, #1]
   1b674:	cmp	r3, #0
   1b678:	beq	1b694 <__assert_fail@plt+0x90a0>
   1b67c:	mov	r0, #0
   1b680:	bx	lr
   1b684:	ldrb	r0, [r0, #1]
   1b688:	clz	r0, r0
   1b68c:	lsr	r0, r0, #5
   1b690:	bx	lr
   1b694:	eor	r0, r1, #1
   1b698:	bx	lr
   1b69c:	cmp	r0, #1
   1b6a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6a4:	sub	sp, sp, #28
   1b6a8:	ble	1ba50 <__assert_fail@plt+0x945c>
   1b6ac:	mov	fp, #1
   1b6b0:	str	r1, [sp]
   1b6b4:	str	r0, [sp, #4]
   1b6b8:	ldr	r3, [sp]
   1b6bc:	ldr	r0, [pc, #1140]	; 1bb38 <__assert_fail@plt+0x9544>
   1b6c0:	lsl	r5, fp, #2
   1b6c4:	ldr	r4, [r3, fp, lsl #2]
   1b6c8:	mov	r1, r4
   1b6cc:	bl	11f40 <strcmp@plt>
   1b6d0:	cmp	r0, #0
   1b6d4:	beq	1b8e4 <__assert_fail@plt+0x92f0>
   1b6d8:	mov	r1, r4
   1b6dc:	ldr	r0, [pc, #1112]	; 1bb3c <__assert_fail@plt+0x9548>
   1b6e0:	bl	11f40 <strcmp@plt>
   1b6e4:	cmp	r0, #0
   1b6e8:	beq	1b8f0 <__assert_fail@plt+0x92fc>
   1b6ec:	mov	r1, r4
   1b6f0:	ldr	r0, [pc, #1096]	; 1bb40 <__assert_fail@plt+0x954c>
   1b6f4:	bl	11f40 <strcmp@plt>
   1b6f8:	cmp	r0, #0
   1b6fc:	beq	1b98c <__assert_fail@plt+0x9398>
   1b700:	mov	r1, r4
   1b704:	ldr	r0, [pc, #1080]	; 1bb44 <__assert_fail@plt+0x9550>
   1b708:	bl	11f40 <strcmp@plt>
   1b70c:	cmp	r0, #0
   1b710:	beq	1ba40 <__assert_fail@plt+0x944c>
   1b714:	mov	r1, r4
   1b718:	ldr	r0, [pc, #1064]	; 1bb48 <__assert_fail@plt+0x9554>
   1b71c:	bl	11f40 <strcmp@plt>
   1b720:	subs	r6, r0, #0
   1b724:	bne	1b8fc <__assert_fail@plt+0x9308>
   1b728:	ldr	r3, [sp, #4]
   1b72c:	add	fp, fp, #1
   1b730:	cmp	r3, fp
   1b734:	ble	1baa0 <__assert_fail@plt+0x94ac>
   1b738:	ldr	r3, [sp]
   1b73c:	add	r2, sp, #20
   1b740:	add	r5, r3, r5
   1b744:	add	r1, sp, #16
   1b748:	ldr	r3, [r5, #4]
   1b74c:	str	r6, [sp, #20]
   1b750:	str	r3, [sp, #8]
   1b754:	mov	r0, r3
   1b758:	mov	r3, #44	; 0x2c
   1b75c:	strh	r3, [sp, #16]
   1b760:	bl	121e0 <strtok_r@plt>
   1b764:	subs	r5, r0, #0
   1b768:	beq	1ba1c <__assert_fail@plt+0x9428>
   1b76c:	str	fp, [sp, #12]
   1b770:	ldr	r4, [pc, #980]	; 1bb4c <__assert_fail@plt+0x9558>
   1b774:	ldr	r6, [pc, #980]	; 1bb50 <__assert_fail@plt+0x955c>
   1b778:	ldr	r7, [pc, #980]	; 1bb54 <__assert_fail@plt+0x9560>
   1b77c:	ldr	r8, [pc, #980]	; 1bb58 <__assert_fail@plt+0x9564>
   1b780:	ldr	r9, [pc, #980]	; 1bb5c <__assert_fail@plt+0x9568>
   1b784:	ldr	sl, [pc, #980]	; 1bb60 <__assert_fail@plt+0x956c>
   1b788:	ldr	fp, [sp, #8]
   1b78c:	mov	r1, r5
   1b790:	mov	r0, r6
   1b794:	bl	11f40 <strcmp@plt>
   1b798:	cmp	r0, #0
   1b79c:	beq	1b8c4 <__assert_fail@plt+0x92d0>
   1b7a0:	mov	r1, r5
   1b7a4:	mov	r0, r7
   1b7a8:	bl	11f40 <strcmp@plt>
   1b7ac:	cmp	r0, #0
   1b7b0:	beq	1b9dc <__assert_fail@plt+0x93e8>
   1b7b4:	mov	r1, r5
   1b7b8:	mov	r0, r8
   1b7bc:	bl	11f40 <strcmp@plt>
   1b7c0:	cmp	r0, #0
   1b7c4:	beq	1b9e4 <__assert_fail@plt+0x93f0>
   1b7c8:	mov	r1, r5
   1b7cc:	mov	r0, r9
   1b7d0:	bl	11f40 <strcmp@plt>
   1b7d4:	cmp	r0, #0
   1b7d8:	beq	1b9ec <__assert_fail@plt+0x93f8>
   1b7dc:	mov	r1, r5
   1b7e0:	mov	r0, sl
   1b7e4:	bl	11f40 <strcmp@plt>
   1b7e8:	cmp	r0, #0
   1b7ec:	beq	1b9f4 <__assert_fail@plt+0x9400>
   1b7f0:	mov	r1, r5
   1b7f4:	ldr	r0, [pc, #872]	; 1bb64 <__assert_fail@plt+0x9570>
   1b7f8:	bl	11f40 <strcmp@plt>
   1b7fc:	cmp	r0, #0
   1b800:	beq	1b9fc <__assert_fail@plt+0x9408>
   1b804:	mov	r1, r5
   1b808:	ldr	r0, [pc, #856]	; 1bb68 <__assert_fail@plt+0x9574>
   1b80c:	bl	11f40 <strcmp@plt>
   1b810:	cmp	r0, #0
   1b814:	beq	1ba04 <__assert_fail@plt+0x9410>
   1b818:	mov	r1, r5
   1b81c:	ldr	r0, [pc, #840]	; 1bb6c <__assert_fail@plt+0x9578>
   1b820:	bl	11f40 <strcmp@plt>
   1b824:	cmp	r0, #0
   1b828:	beq	1b8c0 <__assert_fail@plt+0x92cc>
   1b82c:	mov	r1, r5
   1b830:	ldr	r0, [pc, #824]	; 1bb70 <__assert_fail@plt+0x957c>
   1b834:	bl	11f40 <strcmp@plt>
   1b838:	cmp	r0, #0
   1b83c:	moveq	r0, #8
   1b840:	beq	1b8c4 <__assert_fail@plt+0x92d0>
   1b844:	mov	r2, #5
   1b848:	ldr	r1, [pc, #804]	; 1bb74 <__assert_fail@plt+0x9580>
   1b84c:	mov	r0, #0
   1b850:	bl	120b4 <dcgettext@plt>
   1b854:	mov	r2, fp
   1b858:	ldr	r1, [r4, #72]	; 0x48
   1b85c:	mov	r5, r0
   1b860:	mov	r0, #0
   1b864:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1b868:	mov	r1, #0
   1b86c:	mov	r2, r5
   1b870:	mov	r3, r0
   1b874:	mov	r0, r1
   1b878:	bl	121ec <error@plt>
   1b87c:	add	r2, sp, #20
   1b880:	add	r1, sp, #16
   1b884:	mov	r0, #0
   1b888:	bl	121e0 <strtok_r@plt>
   1b88c:	subs	r5, r0, #0
   1b890:	bne	1b78c <__assert_fail@plt+0x9198>
   1b894:	ldr	r3, [r4, #44]	; 0x2c
   1b898:	ldr	fp, [sp, #12]
   1b89c:	tst	r3, #16
   1b8a0:	bne	1ba58 <__assert_fail@plt+0x9464>
   1b8a4:	ldr	r3, [sp, #4]
   1b8a8:	add	fp, fp, #1
   1b8ac:	cmp	r3, fp
   1b8b0:	bgt	1b6b8 <__assert_fail@plt+0x90c4>
   1b8b4:	mov	r0, fp
   1b8b8:	add	sp, sp, #28
   1b8bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8c0:	mov	r0, #7
   1b8c4:	ldr	r2, [pc, #684]	; 1bb78 <__assert_fail@plt+0x9584>
   1b8c8:	add	r0, r0, r0, lsl #1
   1b8cc:	ldr	r3, [r4, #44]	; 0x2c
   1b8d0:	add	r0, r2, r0, lsl #2
   1b8d4:	ldr	r2, [r0, #52]	; 0x34
   1b8d8:	orr	r3, r3, r2
   1b8dc:	str	r3, [r4, #44]	; 0x2c
   1b8e0:	b	1b87c <__assert_fail@plt+0x9288>
   1b8e4:	mov	r0, #2
   1b8e8:	bl	23b0c <__assert_fail@plt+0x11518>
   1b8ec:	b	1b8a4 <__assert_fail@plt+0x92b0>
   1b8f0:	mov	r0, #1
   1b8f4:	bl	23b0c <__assert_fail@plt+0x11518>
   1b8f8:	b	1b8a4 <__assert_fail@plt+0x92b0>
   1b8fc:	mov	r2, #2
   1b900:	mov	r1, r4
   1b904:	ldr	r0, [pc, #624]	; 1bb7c <__assert_fail@plt+0x9588>
   1b908:	bl	12594 <strncmp@plt>
   1b90c:	subs	r6, r0, #0
   1b910:	bne	1b8b4 <__assert_fail@plt+0x92c0>
   1b914:	ldrb	r5, [r4, #2]
   1b918:	add	r4, r4, #2
   1b91c:	cmp	r5, #0
   1b920:	beq	1bb2c <__assert_fail@plt+0x9538>
   1b924:	bl	122b8 <__ctype_b_loc@plt>
   1b928:	lsl	r5, r5, #1
   1b92c:	ldr	r3, [r0]
   1b930:	ldrh	r3, [r3, r5]
   1b934:	ands	r5, r3, #2048	; 0x800
   1b938:	beq	1bb0c <__assert_fail@plt+0x9518>
   1b93c:	bl	12348 <__errno_location@plt>
   1b940:	mov	r2, #10
   1b944:	add	r1, sp, #20
   1b948:	ldr	r7, [r0]
   1b94c:	mov	r5, r0
   1b950:	str	r6, [r0]
   1b954:	mov	r0, r4
   1b958:	bl	122f4 <strtoul@plt>
   1b95c:	ldr	r3, [sp, #20]
   1b960:	cmp	r0, #0
   1b964:	bne	1b994 <__assert_fail@plt+0x93a0>
   1b968:	cmp	r4, r3
   1b96c:	beq	1bb0c <__assert_fail@plt+0x9518>
   1b970:	ldrb	r3, [r3]
   1b974:	cmp	r3, #0
   1b978:	bne	1bae8 <__assert_fail@plt+0x94f4>
   1b97c:	ldr	r4, [pc, #456]	; 1bb4c <__assert_fail@plt+0x9558>
   1b980:	strh	r0, [r4, #68]	; 0x44
   1b984:	str	r7, [r5]
   1b988:	b	1b8a4 <__assert_fail@plt+0x92b0>
   1b98c:	bl	23b0c <__assert_fail@plt+0x11518>
   1b990:	b	1b8a4 <__assert_fail@plt+0x92b0>
   1b994:	ldrb	r3, [r3]
   1b998:	cmp	r3, #0
   1b99c:	bne	1bae8 <__assert_fail@plt+0x94f4>
   1b9a0:	cmn	r0, #1
   1b9a4:	bne	1ba0c <__assert_fail@plt+0x9418>
   1b9a8:	ldr	r5, [r5]
   1b9ac:	mov	r6, r0
   1b9b0:	cmp	r5, #0
   1b9b4:	bne	1bac4 <__assert_fail@plt+0x94d0>
   1b9b8:	mov	r2, #5
   1b9bc:	ldr	r1, [pc, #444]	; 1bb80 <__assert_fail@plt+0x958c>
   1b9c0:	mov	r0, #0
   1b9c4:	bl	120b4 <dcgettext@plt>
   1b9c8:	mov	r3, r6
   1b9cc:	mov	r1, #0
   1b9d0:	mov	r2, r0
   1b9d4:	mov	r0, #1
   1b9d8:	bl	121ec <error@plt>
   1b9dc:	mov	r0, #1
   1b9e0:	b	1b8c4 <__assert_fail@plt+0x92d0>
   1b9e4:	mov	r0, #2
   1b9e8:	b	1b8c4 <__assert_fail@plt+0x92d0>
   1b9ec:	mov	r0, #3
   1b9f0:	b	1b8c4 <__assert_fail@plt+0x92d0>
   1b9f4:	mov	r0, #4
   1b9f8:	b	1b8c4 <__assert_fail@plt+0x92d0>
   1b9fc:	mov	r0, #5
   1ba00:	b	1b8c4 <__assert_fail@plt+0x92d0>
   1ba04:	mov	r0, #6
   1ba08:	b	1b8c4 <__assert_fail@plt+0x92d0>
   1ba0c:	cmp	r0, #65536	; 0x10000
   1ba10:	bcc	1b97c <__assert_fail@plt+0x9388>
   1ba14:	mov	r6, r0
   1ba18:	b	1b9b8 <__assert_fail@plt+0x93c4>
   1ba1c:	mov	r2, #5
   1ba20:	ldr	r1, [pc, #348]	; 1bb84 <__assert_fail@plt+0x9590>
   1ba24:	bl	120b4 <dcgettext@plt>
   1ba28:	mov	r1, r5
   1ba2c:	mov	r2, r0
   1ba30:	mov	r0, r5
   1ba34:	bl	121ec <error@plt>
   1ba38:	mov	r0, #1
   1ba3c:	bl	1aa08 <__assert_fail@plt+0x8414>
   1ba40:	add	fp, fp, #1
   1ba44:	mov	r0, fp
   1ba48:	add	sp, sp, #28
   1ba4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba50:	mov	fp, #1
   1ba54:	b	1b8b4 <__assert_fail@plt+0x92c0>
   1ba58:	ldr	r5, [pc, #296]	; 1bb88 <__assert_fail@plt+0x9594>
   1ba5c:	mov	r2, #5
   1ba60:	ldr	r1, [pc, #292]	; 1bb8c <__assert_fail@plt+0x9598>
   1ba64:	bl	120b4 <dcgettext@plt>
   1ba68:	ldr	r1, [r5]
   1ba6c:	bl	12588 <fputs@plt>
   1ba70:	ldr	r4, [pc, #280]	; 1bb90 <__assert_fail@plt+0x959c>
   1ba74:	ldr	r7, [pc, #280]	; 1bb94 <__assert_fail@plt+0x95a0>
   1ba78:	add	r6, r4, #108	; 0x6c
   1ba7c:	ldr	r3, [r4, #8]
   1ba80:	ldr	r2, [r4], #12
   1ba84:	mov	r1, r7
   1ba88:	ldr	r0, [r5]
   1ba8c:	bl	1233c <fprintf@plt>
   1ba90:	cmp	r4, r6
   1ba94:	bne	1ba7c <__assert_fail@plt+0x9488>
   1ba98:	mov	r0, #0
   1ba9c:	bl	122d0 <exit@plt>
   1baa0:	mov	r2, #5
   1baa4:	ldr	r1, [pc, #236]	; 1bb98 <__assert_fail@plt+0x95a4>
   1baa8:	bl	120b4 <dcgettext@plt>
   1baac:	mov	r1, r6
   1bab0:	mov	r2, r0
   1bab4:	mov	r0, r6
   1bab8:	bl	121ec <error@plt>
   1babc:	mov	r0, #1
   1bac0:	bl	1aa08 <__assert_fail@plt+0x8414>
   1bac4:	mov	r2, #5
   1bac8:	ldr	r1, [pc, #204]	; 1bb9c <__assert_fail@plt+0x95a8>
   1bacc:	mov	r0, #0
   1bad0:	bl	120b4 <dcgettext@plt>
   1bad4:	mov	r3, r4
   1bad8:	mov	r1, r5
   1badc:	mov	r2, r0
   1bae0:	mov	r0, #1
   1bae4:	bl	121ec <error@plt>
   1bae8:	mov	r2, #5
   1baec:	ldr	r1, [pc, #168]	; 1bb9c <__assert_fail@plt+0x95a8>
   1baf0:	mov	r0, #0
   1baf4:	bl	120b4 <dcgettext@plt>
   1baf8:	mov	r3, r4
   1bafc:	mov	r1, #0
   1bb00:	mov	r2, r0
   1bb04:	mov	r0, #1
   1bb08:	bl	121ec <error@plt>
   1bb0c:	ldr	r1, [pc, #140]	; 1bba0 <__assert_fail@plt+0x95ac>
   1bb10:	mov	r2, #5
   1bb14:	mov	r0, #0
   1bb18:	bl	120b4 <dcgettext@plt>
   1bb1c:	mov	r1, #0
   1bb20:	mov	r2, r0
   1bb24:	mov	r0, #1
   1bb28:	bl	121ec <error@plt>
   1bb2c:	mov	r2, #5
   1bb30:	ldr	r1, [pc, #108]	; 1bba4 <__assert_fail@plt+0x95b0>
   1bb34:	b	1bb18 <__assert_fail@plt+0x9524>
   1bb38:	andeq	pc, r4, r4, lsl #26
   1bb3c:	andeq	pc, r4, r8, lsl #26
   1bb40:	andeq	pc, r4, ip, lsl #26
   1bb44:	andeq	pc, r4, r0, lsl sp	; <UNPREDICTABLE>
   1bb48:	andeq	pc, r4, r4, lsl sp	; <UNPREDICTABLE>
   1bb4c:	andeq	r4, r6, ip, ror #28
   1bb50:	andeq	pc, r4, r0, asr #26
   1bb54:	andeq	pc, r4, r8, asr #26
   1bb58:	andeq	pc, r4, ip, asr #26
   1bb5c:	andeq	pc, r4, r4, asr sp	; <UNPREDICTABLE>
   1bb60:	andeq	lr, r4, r0, ror #1
   1bb64:	andeq	r3, r5, r0, lsr #2
   1bb68:	andeq	pc, r4, ip, asr sp	; <UNPREDICTABLE>
   1bb6c:	andeq	pc, r4, r4, ror #26
   1bb70:	andeq	pc, r4, r8, ror #26
   1bb74:	andeq	pc, r4, r0, lsl #29
   1bb78:			; <UNDEFINED> instruction: 0x0004f3b0
   1bb7c:	andeq	pc, r4, ip, ror sp	; <UNPREDICTABLE>
   1bb80:	andeq	pc, r4, r8, lsl lr	; <UNPREDICTABLE>
   1bb84:	andeq	pc, r4, r4, lsr #29
   1bb88:	andeq	r4, r6, r4, asr r5
   1bb8c:	andeq	pc, r4, r0, lsl #23
   1bb90:	andeq	pc, r4, r0, ror #7
   1bb94:	andeq	pc, r4, r0, ror sp	; <UNPREDICTABLE>
   1bb98:	andeq	pc, r4, r8, lsl sp	; <UNPREDICTABLE>
   1bb9c:	strdeq	pc, [r4], -r8
   1bba0:	andeq	pc, r4, r0, asr #27
   1bba4:	andeq	pc, r4, r0, lsl #27
   1bba8:	push	{r4, r5, r6, lr}
   1bbac:	mov	r4, r0
   1bbb0:	sub	sp, sp, #8
   1bbb4:	ldr	r0, [pc, #316]	; 1bcf8 <__assert_fail@plt+0x9704>
   1bbb8:	bl	12228 <getenv@plt>
   1bbbc:	mov	r5, #0
   1bbc0:	subs	r0, r0, r5
   1bbc4:	movne	r0, #1
   1bbc8:	strb	r0, [r4, #17]
   1bbcc:	bl	1ad70 <__assert_fail@plt+0x877c>
   1bbd0:	str	r5, [r4, #60]	; 0x3c
   1bbd4:	strb	r0, [r4, #56]	; 0x38
   1bbd8:	mov	r0, r5
   1bbdc:	bl	12564 <isatty@plt>
   1bbe0:	ldrb	r3, [r4, #17]
   1bbe4:	strb	r5, [r4, #15]
   1bbe8:	mov	r2, #1
   1bbec:	strb	r2, [r4]
   1bbf0:	subs	r0, r0, r5
   1bbf4:	movne	r0, #1
   1bbf8:	cmp	r3, r5
   1bbfc:	strb	r0, [r4, #16]
   1bc00:	mvn	r3, #0
   1bc04:	strbne	r5, [r4, #16]
   1bc08:	mov	r5, #0
   1bc0c:	strb	r5, [r4, #1]
   1bc10:	mov	r1, r5
   1bc14:	str	r3, [r4, #8]
   1bc18:	str	r3, [r4, #4]
   1bc1c:	mov	r0, sp
   1bc20:	bl	121bc <gettimeofday@plt>
   1bc24:	cmp	r0, r5
   1bc28:	bne	1bcb4 <__assert_fail@plt+0x96c0>
   1bc2c:	ldr	r3, [sp, #4]
   1bc30:	mov	r5, #1000	; 0x3e8
   1bc34:	ldr	r0, [sp]
   1bc38:	mul	r5, r5, r3
   1bc3c:	ldrb	r3, [r4, #17]
   1bc40:	sub	r2, r0, #86016	; 0x15000
   1bc44:	mov	r6, #0
   1bc48:	cmp	r3, #0
   1bc4c:	moveq	r3, #1024	; 0x400
   1bc50:	movne	r3, #512	; 0x200
   1bc54:	sub	r2, r2, #384	; 0x180
   1bc58:	mov	r1, #2
   1bc5c:	str	r0, [r4, #20]
   1bc60:	str	r5, [r4, #24]
   1bc64:	str	r5, [r4, #32]
   1bc68:	str	r2, [r4, #28]
   1bc6c:	str	r3, [r4, #40]	; 0x28
   1bc70:	strb	r6, [r4, #36]	; 0x24
   1bc74:	strb	r6, [r4, #13]
   1bc78:	strb	r6, [r4, #14]
   1bc7c:	str	r6, [r4, #44]	; 0x2c
   1bc80:	strh	r1, [r4, #68]	; 0x44
   1bc84:	ldr	r0, [pc, #112]	; 1bcfc <__assert_fail@plt+0x9708>
   1bc88:	bl	12228 <getenv@plt>
   1bc8c:	subs	r5, r0, #0
   1bc90:	bne	1bcd8 <__assert_fail@plt+0x96e4>
   1bc94:	strb	r5, [r4, #12]
   1bc98:	bl	23b0c <__assert_fail@plt+0x11518>
   1bc9c:	mov	r3, #8
   1bca0:	str	r5, [r4, #76]	; 0x4c
   1bca4:	strb	r5, [r4, #80]	; 0x50
   1bca8:	str	r3, [r4, #72]	; 0x48
   1bcac:	add	sp, sp, #8
   1bcb0:	pop	{r4, r5, r6, pc}
   1bcb4:	mov	r0, r5
   1bcb8:	bl	12078 <time@plt>
   1bcbc:	cmn	r0, #1
   1bcc0:	bne	1bc3c <__assert_fail@plt+0x9648>
   1bcc4:	ldr	r3, [pc, #52]	; 1bd00 <__assert_fail@plt+0x970c>
   1bcc8:	ldr	r2, [pc, #52]	; 1bd04 <__assert_fail@plt+0x9710>
   1bccc:	ldr	r1, [pc, #52]	; 1bd08 <__assert_fail@plt+0x9714>
   1bcd0:	ldr	r0, [pc, #52]	; 1bd0c <__assert_fail@plt+0x9718>
   1bcd4:	bl	125f4 <__assert_fail@plt>
   1bcd8:	mov	r2, #5
   1bcdc:	ldr	r1, [pc, #44]	; 1bd10 <__assert_fail@plt+0x971c>
   1bce0:	mov	r0, r6
   1bce4:	bl	120b4 <dcgettext@plt>
   1bce8:	mov	r1, r6
   1bcec:	mov	r2, r0
   1bcf0:	mov	r0, #1
   1bcf4:	bl	121ec <error@plt>
   1bcf8:	andeq	pc, r4, r8, asr #29
   1bcfc:	andeq	pc, r4, r8, ror #29
   1bd00:	andeq	pc, r4, r8, lsl #9
   1bd04:	ldrdeq	r0, [r0], -r2
   1bd08:	andeq	pc, r4, ip, lsl #9
   1bd0c:	ldrdeq	pc, [r4], -r8
   1bd10:	strdeq	pc, [r4], -r8
   1bd14:	push	{r4, r5, r6, lr}
   1bd18:	mov	r4, r2
   1bd1c:	ldrh	r2, [r2, #18]
   1bd20:	ldr	r3, [r4, #164]	; 0xa4
   1bd24:	mov	r6, r0
   1bd28:	add	r3, r3, #1
   1bd2c:	cmp	r2, #0
   1bd30:	mov	r5, r1
   1bd34:	str	r3, [r4, #164]	; 0xa4
   1bd38:	bne	1bd74 <__assert_fail@plt+0x9780>
   1bd3c:	ldrb	r3, [r4, #20]
   1bd40:	cmp	r3, #0
   1bd44:	bne	1bd74 <__assert_fail@plt+0x9780>
   1bd48:	mov	r1, r5
   1bd4c:	mov	r0, r6
   1bd50:	ldr	r3, [r4]
   1bd54:	mov	r2, r4
   1bd58:	blx	r3
   1bd5c:	cmp	r0, #0
   1bd60:	beq	1bdb4 <__assert_fail@plt+0x97c0>
   1bd64:	ldr	r3, [r4, #168]	; 0xa8
   1bd68:	add	r3, r3, #1
   1bd6c:	str	r3, [r4, #168]	; 0xa8
   1bd70:	pop	{r4, r5, r6, pc}
   1bd74:	ldrb	r3, [r4, #18]
   1bd78:	cmp	r3, #0
   1bd7c:	bne	1bdbc <__assert_fail@plt+0x97c8>
   1bd80:	ldrb	r3, [r4, #19]
   1bd84:	cmp	r3, #0
   1bd88:	beq	1bdd0 <__assert_fail@plt+0x97dc>
   1bd8c:	ldr	r3, [pc, #120]	; 1be0c <__assert_fail@plt+0x9818>
   1bd90:	ldrb	r2, [r3, #5]
   1bd94:	cmp	r2, #0
   1bd98:	bne	1bdd0 <__assert_fail@plt+0x97dc>
   1bd9c:	ldr	r1, [r3, #12]
   1bda0:	mov	r2, r5
   1bda4:	mov	r0, r6
   1bda8:	bl	1ac40 <__assert_fail@plt+0x864c>
   1bdac:	cmp	r0, #0
   1bdb0:	beq	1bd48 <__assert_fail@plt+0x9754>
   1bdb4:	mov	r0, #0
   1bdb8:	pop	{r4, r5, r6, pc}
   1bdbc:	ldr	r3, [pc, #72]	; 1be0c <__assert_fail@plt+0x9818>
   1bdc0:	ldrb	r2, [r3, #4]
   1bdc4:	cmp	r2, #0
   1bdc8:	beq	1bd9c <__assert_fail@plt+0x97a8>
   1bdcc:	b	1bd80 <__assert_fail@plt+0x978c>
   1bdd0:	ldrb	r3, [r4, #20]
   1bdd4:	cmp	r3, #0
   1bdd8:	beq	1bd48 <__assert_fail@plt+0x9754>
   1bddc:	ldrd	r2, [r5, #96]	; 0x60
   1bde0:	orrs	r3, r2, r3
   1bde4:	ldr	r3, [pc, #32]	; 1be0c <__assert_fail@plt+0x9818>
   1bde8:	beq	1bd9c <__assert_fail@plt+0x97a8>
   1bdec:	ldrb	r2, [r3, #5]
   1bdf0:	cmp	r2, #0
   1bdf4:	beq	1bd9c <__assert_fail@plt+0x97a8>
   1bdf8:	ldr	r2, [r5, #16]
   1bdfc:	and	r2, r2, #61440	; 0xf000
   1be00:	cmp	r2, #16384	; 0x4000
   1be04:	bne	1bd48 <__assert_fail@plt+0x9754>
   1be08:	b	1bd9c <__assert_fail@plt+0x97a8>
   1be0c:	andeq	r4, r6, r0, asr #28
   1be10:	ldr	r2, [pc, #20]	; 1be2c <__assert_fail@plt+0x9838>
   1be14:	ldr	r3, [pc, #20]	; 1be30 <__assert_fail@plt+0x983c>
   1be18:	cmp	r3, r0
   1be1c:	cmpne	r2, r0
   1be20:	moveq	r0, #1
   1be24:	movne	r0, #0
   1be28:	bx	lr
   1be2c:	andeq	r4, r1, r8, asr #24
   1be30:			; <UNDEFINED> instruction: 0x000142b8
   1be34:	ldr	r3, [pc, #8]	; 1be44 <__assert_fail@plt+0x9850>
   1be38:	mov	r2, r1
   1be3c:	ldr	r1, [r3, #72]	; 0x48
   1be40:	b	325f0 <__assert_fail@plt+0x1fffc>
   1be44:	andeq	r4, r6, ip, ror #28
   1be48:	push	{r4, r5, r6, lr}
   1be4c:	ldr	r4, [pc, #72]	; 1be9c <__assert_fail@plt+0x98a8>
   1be50:	ldrb	r5, [r4, #40]	; 0x28
   1be54:	cmp	r5, #0
   1be58:	bne	1be90 <__assert_fail@plt+0x989c>
   1be5c:	ldr	r3, [pc, #60]	; 1bea0 <__assert_fail@plt+0x98ac>
   1be60:	mov	r2, r1
   1be64:	mov	r6, r0
   1be68:	ldr	r1, [r3, #72]	; 0x48
   1be6c:	mov	r0, r5
   1be70:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1be74:	mov	r1, r6
   1be78:	ldr	r2, [pc, #36]	; 1bea4 <__assert_fail@plt+0x98b0>
   1be7c:	mov	r3, r0
   1be80:	mov	r0, r5
   1be84:	bl	121ec <error@plt>
   1be88:	mov	r3, #1
   1be8c:	str	r3, [r4, #28]
   1be90:	mov	r3, #1
   1be94:	strb	r3, [r4, #40]	; 0x28
   1be98:	pop	{r4, r5, r6, pc}
   1be9c:	andeq	r4, r6, r0, asr #28
   1bea0:	andeq	r4, r6, ip, ror #28
   1bea4:	andeq	r2, r5, r4, asr #9
   1bea8:	push	{r4, lr}
   1beac:	mov	r5, r0
   1beb0:	ldr	r4, [pc, #64]	; 1bef8 <__assert_fail@plt+0x9904>
   1beb4:	ldrb	r0, [r4, #40]	; 0x28
   1beb8:	cmp	r0, #0
   1bebc:	bne	1beec <__assert_fail@plt+0x98f8>
   1bec0:	ldr	r3, [pc, #52]	; 1befc <__assert_fail@plt+0x9908>
   1bec4:	mov	r2, r1
   1bec8:	ldr	r1, [r3, #72]	; 0x48
   1becc:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1bed0:	mov	r1, r5
   1bed4:	ldr	r2, [pc, #36]	; 1bf00 <__assert_fail@plt+0x990c>
   1bed8:	mov	r3, r0
   1bedc:	mov	r0, #1
   1bee0:	bl	121ec <error@plt>
   1bee4:	mov	r3, #1
   1bee8:	str	r3, [r4, #28]
   1beec:	mov	r3, #1
   1bef0:	strb	r3, [r4, #40]	; 0x28
   1bef4:	bl	125a0 <abort@plt>
   1bef8:	andeq	r4, r6, r0, asr #28
   1befc:	andeq	r4, r6, ip, ror #28
   1bf00:	andeq	r2, r5, r4, asr #9
   1bf04:	ldr	r3, [pc, #56]	; 1bf44 <__assert_fail@plt+0x9950>
   1bf08:	push	{r4, lr}
   1bf0c:	mov	r2, r1
   1bf10:	mov	r4, r0
   1bf14:	ldr	r1, [r3, #72]	; 0x48
   1bf18:	mov	r0, #0
   1bf1c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1bf20:	ldr	r2, [pc, #32]	; 1bf48 <__assert_fail@plt+0x9954>
   1bf24:	mov	r1, r4
   1bf28:	mov	r3, r0
   1bf2c:	mov	r0, #0
   1bf30:	bl	121ec <error@plt>
   1bf34:	ldr	r3, [pc, #16]	; 1bf4c <__assert_fail@plt+0x9958>
   1bf38:	mov	r2, #1
   1bf3c:	str	r2, [r3, #28]
   1bf40:	pop	{r4, pc}
   1bf44:	andeq	r4, r6, ip, ror #28
   1bf48:	andeq	r2, r5, r4, asr #9
   1bf4c:	andeq	r4, r6, r0, asr #28
   1bf50:	ldr	ip, [pc, #64]	; 1bf98 <__assert_fail@plt+0x99a4>
   1bf54:	push	{r4, lr}
   1bf58:	mov	r3, #0
   1bf5c:	ldr	r4, [pc, #56]	; 1bf9c <__assert_fail@plt+0x99a8>
   1bf60:	mov	r2, r1
   1bf64:	mov	r5, r0
   1bf68:	ldr	r1, [ip, #72]	; 0x48
   1bf6c:	mov	r0, r3
   1bf70:	strb	r3, [r4, #40]	; 0x28
   1bf74:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1bf78:	mov	r1, r5
   1bf7c:	ldr	r2, [pc, #28]	; 1bfa0 <__assert_fail@plt+0x99ac>
   1bf80:	mov	r3, r0
   1bf84:	mov	r0, #1
   1bf88:	bl	121ec <error@plt>
   1bf8c:	mov	r3, #1
   1bf90:	str	r3, [r4, #28]
   1bf94:	bl	125a0 <abort@plt>
   1bf98:	andeq	r4, r6, ip, ror #28
   1bf9c:	andeq	r4, r6, r0, asr #28
   1bfa0:	andeq	r2, r5, r4, asr #9
   1bfa4:	ldrd	r2, [r1, #8]
   1bfa8:	push	{r4, r5}
   1bfac:	ldrd	r4, [r0, #8]
   1bfb0:	cmp	r5, r3
   1bfb4:	cmpeq	r4, r2
   1bfb8:	movne	r0, #0
   1bfbc:	beq	1bfc8 <__assert_fail@plt+0x99d4>
   1bfc0:	pop	{r4, r5}
   1bfc4:	bx	lr
   1bfc8:	ldrd	r4, [r0]
   1bfcc:	ldrd	r2, [r1]
   1bfd0:	cmp	r5, r3
   1bfd4:	cmpeq	r4, r2
   1bfd8:	moveq	r0, #1
   1bfdc:	movne	r0, #0
   1bfe0:	pop	{r4, r5}
   1bfe4:	bx	lr
   1bfe8:	push	{r4, r5, r6, lr}
   1bfec:	mov	r2, r1
   1bff0:	ldrd	r4, [r0]
   1bff4:	ldrd	r0, [r0, #8]
   1bff8:	mov	r3, #0
   1bffc:	eor	r0, r0, r4
   1c000:	eor	r1, r1, r5
   1c004:	bl	4dc5c <__assert_fail@plt+0x3b668>
   1c008:	mov	r0, r2
   1c00c:	pop	{r4, r5, r6, pc}
   1c010:	push	{r4, lr}
   1c014:	mov	r4, r0
   1c018:	ldr	r0, [r0, #20]
   1c01c:	cmp	r0, #0
   1c020:	beq	1c030 <__assert_fail@plt+0x9a3c>
   1c024:	bl	123fc <fclose@plt>
   1c028:	cmp	r0, #0
   1c02c:	bne	1c044 <__assert_fail@plt+0x9a50>
   1c030:	ldr	r0, [r4, #16]
   1c034:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c038:	mov	r0, r4
   1c03c:	pop	{r4, lr}
   1c040:	b	376d0 <__assert_fail@plt+0x250dc>
   1c044:	mov	r0, r4
   1c048:	bl	126a4 <__assert_fail@plt+0xb0>
   1c04c:	push	{r4, r5, lr}
   1c050:	mov	r5, r0
   1c054:	sub	sp, sp, #12
   1c058:	mov	r0, #8
   1c05c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   1c060:	subs	r4, r0, #0
   1c064:	beq	1c0ac <__assert_fail@plt+0x9ab8>
   1c068:	mov	r0, r5
   1c06c:	bl	120c0 <strdup@plt>
   1c070:	cmp	r0, #0
   1c074:	mov	r5, r0
   1c078:	str	r0, [r4]
   1c07c:	beq	1c0b8 <__assert_fail@plt+0x9ac4>
   1c080:	ldr	r2, [pc, #88]	; 1c0e0 <__assert_fail@plt+0x9aec>
   1c084:	ldr	r3, [pc, #88]	; 1c0e4 <__assert_fail@plt+0x9af0>
   1c088:	str	r2, [sp]
   1c08c:	mov	r1, #0
   1c090:	ldr	r2, [pc, #80]	; 1c0e8 <__assert_fail@plt+0x9af4>
   1c094:	mov	r0, #11
   1c098:	bl	27958 <__assert_fail@plt+0x15364>
   1c09c:	cmp	r0, #0
   1c0a0:	mov	r5, r0
   1c0a4:	str	r0, [r4, #4]
   1c0a8:	beq	1c0c8 <__assert_fail@plt+0x9ad4>
   1c0ac:	mov	r0, r4
   1c0b0:	add	sp, sp, #12
   1c0b4:	pop	{r4, r5, pc}
   1c0b8:	mov	r0, r4
   1c0bc:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c0c0:	mov	r0, r5
   1c0c4:	b	1c0b0 <__assert_fail@plt+0x9abc>
   1c0c8:	ldr	r0, [r4]
   1c0cc:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c0d0:	mov	r0, r4
   1c0d4:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c0d8:	mov	r0, r5
   1c0dc:	b	1c0b0 <__assert_fail@plt+0x9abc>
   1c0e0:	andeq	ip, r1, r0, lsl r0
   1c0e4:	andeq	fp, r1, r4, lsr #31
   1c0e8:	andeq	fp, r1, r8, ror #31
   1c0ec:	push	{r4, lr}
   1c0f0:	mov	r4, r0
   1c0f4:	ldr	r0, [r0]
   1c0f8:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c0fc:	ldr	r0, [r4, #4]
   1c100:	pop	{r4, lr}
   1c104:	b	27c48 <__assert_fail@plt+0x15654>
   1c108:	push	{r4, r5, r6, r7, r8, lr}
   1c10c:	mov	r8, r0
   1c110:	sub	sp, sp, #104	; 0x68
   1c114:	mov	r0, #24
   1c118:	mov	r6, r1
   1c11c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   1c120:	subs	r5, r0, #0
   1c124:	beq	1c238 <__assert_fail@plt+0x9c44>
   1c128:	mov	r0, r6
   1c12c:	bl	120c0 <strdup@plt>
   1c130:	cmp	r0, #0
   1c134:	mov	r4, r0
   1c138:	str	r0, [r5, #16]
   1c13c:	beq	1c248 <__assert_fail@plt+0x9c54>
   1c140:	mov	r0, r6
   1c144:	ldr	r1, [r8]
   1c148:	bl	2714c <__assert_fail@plt+0x14b58>
   1c14c:	cmp	r0, #0
   1c150:	mov	r4, r0
   1c154:	str	r0, [r5, #20]
   1c158:	beq	1c240 <__assert_fail@plt+0x9c4c>
   1c15c:	bl	123c0 <fileno@plt>
   1c160:	subs	r4, r0, #0
   1c164:	blt	1c294 <__assert_fail@plt+0x9ca0>
   1c168:	mov	r1, #1
   1c16c:	bl	26a7c <__assert_fail@plt+0x14488>
   1c170:	mov	r1, r4
   1c174:	mov	r2, sp
   1c178:	mov	r0, #3
   1c17c:	bl	1215c <__fxstat64@plt>
   1c180:	cmp	r0, #0
   1c184:	blt	1c1e4 <__assert_fail@plt+0x9bf0>
   1c188:	ldrd	r6, [sp]
   1c18c:	ldrd	r2, [sp, #96]	; 0x60
   1c190:	mov	r1, r5
   1c194:	strd	r6, [r5]
   1c198:	strd	r2, [r5, #8]
   1c19c:	ldr	r0, [r8, #4]
   1c1a0:	bl	27678 <__assert_fail@plt+0x15084>
   1c1a4:	subs	r4, r0, #0
   1c1a8:	beq	1c21c <__assert_fail@plt+0x9c28>
   1c1ac:	ldr	r0, [r5, #20]
   1c1b0:	cmp	r0, #0
   1c1b4:	beq	1c1c4 <__assert_fail@plt+0x9bd0>
   1c1b8:	bl	123fc <fclose@plt>
   1c1bc:	cmp	r0, #0
   1c1c0:	bne	1c2a8 <__assert_fail@plt+0x9cb4>
   1c1c4:	ldr	r0, [r5, #16]
   1c1c8:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c1cc:	mov	r0, r5
   1c1d0:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c1d4:	ldr	r4, [r4, #20]
   1c1d8:	mov	r0, r4
   1c1dc:	add	sp, sp, #104	; 0x68
   1c1e0:	pop	{r4, r5, r6, r7, r8, pc}
   1c1e4:	ldr	r0, [r5, #20]
   1c1e8:	cmp	r0, #0
   1c1ec:	beq	1c1fc <__assert_fail@plt+0x9c08>
   1c1f0:	bl	123fc <fclose@plt>
   1c1f4:	cmp	r0, #0
   1c1f8:	bne	1c2a8 <__assert_fail@plt+0x9cb4>
   1c1fc:	ldr	r0, [r5, #16]
   1c200:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c204:	mov	r0, r5
   1c208:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c20c:	mov	r4, #0
   1c210:	mov	r0, r4
   1c214:	add	sp, sp, #104	; 0x68
   1c218:	pop	{r4, r5, r6, r7, r8, pc}
   1c21c:	ldr	r0, [r8, #4]
   1c220:	mov	r1, r5
   1c224:	bl	282c0 <__assert_fail@plt+0x15ccc>
   1c228:	cmp	r0, #0
   1c22c:	beq	1c254 <__assert_fail@plt+0x9c60>
   1c230:	ldr	r4, [r5, #20]
   1c234:	b	1c1d8 <__assert_fail@plt+0x9be4>
   1c238:	mov	r4, r5
   1c23c:	b	1c1d8 <__assert_fail@plt+0x9be4>
   1c240:	ldr	r0, [r5, #16]
   1c244:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c248:	mov	r0, r5
   1c24c:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c250:	b	1c1d8 <__assert_fail@plt+0x9be4>
   1c254:	bl	12348 <__errno_location@plt>
   1c258:	mov	r6, r0
   1c25c:	ldr	r0, [r5, #20]
   1c260:	ldr	r7, [r6]
   1c264:	cmp	r0, #0
   1c268:	beq	1c278 <__assert_fail@plt+0x9c84>
   1c26c:	bl	123fc <fclose@plt>
   1c270:	cmp	r0, #0
   1c274:	bne	1c2a8 <__assert_fail@plt+0x9cb4>
   1c278:	ldr	r0, [r5, #16]
   1c27c:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c280:	mov	r0, r5
   1c284:	bl	376d0 <__assert_fail@plt+0x250dc>
   1c288:	mov	r4, #0
   1c28c:	str	r7, [r6]
   1c290:	b	1c1d8 <__assert_fail@plt+0x9be4>
   1c294:	ldr	r3, [pc, #20]	; 1c2b0 <__assert_fail@plt+0x9cbc>
   1c298:	mov	r2, #166	; 0xa6
   1c29c:	ldr	r1, [pc, #16]	; 1c2b4 <__assert_fail@plt+0x9cc0>
   1c2a0:	ldr	r0, [pc, #16]	; 1c2b8 <__assert_fail@plt+0x9cc4>
   1c2a4:	bl	125f4 <__assert_fail@plt>
   1c2a8:	mov	r0, r5
   1c2ac:	bl	126a4 <__assert_fail@plt+0xb0>
   1c2b0:	andeq	r0, r5, r8, lsr r1
   1c2b4:	andeq	r0, r5, r8, asr #2
   1c2b8:	andeq	lr, r4, ip, ror #6
   1c2bc:	andeq	r0, r0, r0
   1c2c0:	push	{r1, r2, r3}
   1c2c4:	push	{r4, lr}
   1c2c8:	sub	sp, sp, #12
   1c2cc:	add	r3, sp, #24
   1c2d0:	mov	r4, r0
   1c2d4:	mov	r2, r3
   1c2d8:	ldr	r0, [r0, #4]
   1c2dc:	ldr	r1, [sp, #20]
   1c2e0:	str	r3, [sp, #4]
   1c2e4:	bl	12474 <vfprintf@plt>
   1c2e8:	cmp	r0, #0
   1c2ec:	blt	1c300 <__assert_fail@plt+0x9d0c>
   1c2f0:	add	sp, sp, #12
   1c2f4:	pop	{r4, lr}
   1c2f8:	add	sp, sp, #12
   1c2fc:	bx	lr
   1c300:	bl	12348 <__errno_location@plt>
   1c304:	ldr	r1, [r4, #8]
   1c308:	ldr	r0, [r0]
   1c30c:	bl	1bf04 <__assert_fail@plt+0x9910>
   1c310:	add	sp, sp, #12
   1c314:	pop	{r4, lr}
   1c318:	add	sp, sp, #12
   1c31c:	bx	lr
   1c320:	push	{r4, lr}
   1c324:	sub	sp, sp, #8
   1c328:	mov	r3, r1
   1c32c:	str	r2, [sp]
   1c330:	ldr	ip, [r0, #16]
   1c334:	ldrb	r2, [r0, #12]
   1c338:	mov	r4, r0
   1c33c:	mov	r1, ip
   1c340:	ldr	r0, [r0, #4]
   1c344:	bl	25dc0 <__assert_fail@plt+0x137cc>
   1c348:	cmp	r0, #0
   1c34c:	blt	1c358 <__assert_fail@plt+0x9d64>
   1c350:	add	sp, sp, #8
   1c354:	pop	{r4, pc}
   1c358:	bl	12348 <__errno_location@plt>
   1c35c:	ldr	r1, [r4, #8]
   1c360:	ldr	r0, [r0]
   1c364:	add	sp, sp, #8
   1c368:	pop	{r4, lr}
   1c36c:	b	1bf04 <__assert_fail@plt+0x9910>
   1c370:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c374:	sub	sp, sp, #76	; 0x4c
   1c378:	add	r3, sp, #32
   1c37c:	stm	r3, {r0, r1}
   1c380:	mov	r0, r3
   1c384:	bl	1227c <localtime@plt>
   1c388:	cmp	r0, #0
   1c38c:	beq	1c450 <__assert_fail@plt+0x9e5c>
   1c390:	ldr	r3, [r0, #24]
   1c394:	cmp	r3, #0
   1c398:	blt	1c600 <__assert_fail@plt+0xa00c>
   1c39c:	cmp	r3, #6
   1c3a0:	bgt	1c5ec <__assert_fail@plt+0x9ff8>
   1c3a4:	ldr	ip, [r0, #16]
   1c3a8:	cmp	ip, #0
   1c3ac:	blt	1c5d8 <__assert_fail@plt+0x9fe4>
   1c3b0:	cmp	ip, #11
   1c3b4:	bgt	1c5c4 <__assert_fail@plt+0x9fd0>
   1c3b8:	ldr	lr, [r0, #8]
   1c3bc:	cmp	lr, #0
   1c3c0:	blt	1c59c <__assert_fail@plt+0x9fa8>
   1c3c4:	cmp	lr, #23
   1c3c8:	bgt	1c588 <__assert_fail@plt+0x9f94>
   1c3cc:	ldr	r4, [r0, #4]
   1c3d0:	cmp	r4, #59	; 0x3b
   1c3d4:	bgt	1c574 <__assert_fail@plt+0x9f80>
   1c3d8:	ldr	r5, [r0]
   1c3dc:	cmp	r5, #61	; 0x3d
   1c3e0:	bgt	1c560 <__assert_fail@plt+0x9f6c>
   1c3e4:	ldr	r2, [r0, #20]
   1c3e8:	ldr	r1, [pc, #628]	; 1c664 <__assert_fail@plt+0xa070>
   1c3ec:	add	r2, r2, #1888	; 0x760
   1c3f0:	add	r3, r1, r3, lsl #2
   1c3f4:	add	r1, r1, ip, lsl #2
   1c3f8:	ldr	ip, [sp, #36]	; 0x24
   1c3fc:	add	r2, r2, #12
   1c400:	str	r2, [sp, #24]
   1c404:	str	r4, [sp, #12]
   1c408:	ldr	r2, [r1, #44]	; 0x2c
   1c40c:	str	r5, [sp, #16]
   1c410:	str	lr, [sp, #8]
   1c414:	str	ip, [sp, #20]
   1c418:	ldr	r0, [r0, #12]
   1c41c:	ldr	r3, [r3, #16]
   1c420:	str	r0, [sp, #4]
   1c424:	str	r2, [sp]
   1c428:	mov	r1, #1024	; 0x400
   1c42c:	ldr	r2, [pc, #564]	; 1c668 <__assert_fail@plt+0xa074>
   1c430:	ldr	r0, [pc, #564]	; 1c66c <__assert_fail@plt+0xa078>
   1c434:	bl	12360 <snprintf@plt>
   1c438:	cmp	r0, #1024	; 0x400
   1c43c:	ldrlt	r4, [pc, #552]	; 1c66c <__assert_fail@plt+0xa078>
   1c440:	bge	1c5b0 <__assert_fail@plt+0x9fbc>
   1c444:	mov	r0, r4
   1c448:	add	sp, sp, #76	; 0x4c
   1c44c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c450:	add	r0, sp, #40	; 0x28
   1c454:	ldr	r3, [sp, #36]	; 0x24
   1c458:	ldr	r2, [pc, #528]	; 1c670 <__assert_fail@plt+0xa07c>
   1c45c:	mov	r1, #32
   1c460:	ldr	r6, [sp, #32]
   1c464:	bl	12360 <snprintf@plt>
   1c468:	cmp	r0, #31
   1c46c:	mov	r7, r0
   1c470:	bgt	1c628 <__assert_fail@plt+0xa034>
   1c474:	cmp	r6, #0
   1c478:	mov	r0, r6
   1c47c:	asr	r1, r6, #31
   1c480:	blt	1c510 <__assert_fail@plt+0x9f1c>
   1c484:	ldr	r5, [pc, #488]	; 1c674 <__assert_fail@plt+0xa080>
   1c488:	mov	r8, #1
   1c48c:	mov	r9, #0
   1c490:	add	r2, r5, #1
   1c494:	strd	r8, [sp, #8]
   1c498:	strd	r8, [sp]
   1c49c:	mov	r3, #0
   1c4a0:	bl	28a68 <__assert_fail@plt+0x16474>
   1c4a4:	cmp	r0, r5
   1c4a8:	mov	r4, r0
   1c4ac:	bls	1c650 <__assert_fail@plt+0xa05c>
   1c4b0:	add	r3, r5, #788	; 0x314
   1c4b4:	add	r3, r3, #3
   1c4b8:	cmp	r3, r0
   1c4bc:	bls	1c63c <__assert_fail@plt+0xa048>
   1c4c0:	cmp	r6, #0
   1c4c4:	movlt	r3, #45	; 0x2d
   1c4c8:	sublt	r4, r0, #1
   1c4cc:	strblt	r3, [r0, #-1]
   1c4d0:	mov	r0, r4
   1c4d4:	bl	12300 <strlen@plt>
   1c4d8:	ldr	r3, [pc, #408]	; 1c678 <__assert_fail@plt+0xa084>
   1c4dc:	sub	r5, r0, r5
   1c4e0:	add	r5, r4, r5
   1c4e4:	cmp	r5, r3
   1c4e8:	bhi	1c614 <__assert_fail@plt+0xa020>
   1c4ec:	add	r0, sp, #40	; 0x28
   1c4f0:	sub	r5, r3, r5
   1c4f4:	bl	12300 <strlen@plt>
   1c4f8:	cmp	r5, r0
   1c4fc:	bls	1c51c <__assert_fail@plt+0x9f28>
   1c500:	add	r1, sp, #40	; 0x28
   1c504:	mov	r0, r4
   1c508:	bl	12174 <strcat@plt>
   1c50c:	b	1c444 <__assert_fail@plt+0x9e50>
   1c510:	rsbs	r0, r6, #0
   1c514:	rsc	r1, r1, #0
   1c518:	b	1c484 <__assert_fail@plt+0x9e90>
   1c51c:	mov	r1, #0
   1c520:	add	r3, sp, #40	; 0x28
   1c524:	mov	r0, r1
   1c528:	str	r3, [sp, #4]
   1c52c:	ldr	r2, [pc, #328]	; 1c67c <__assert_fail@plt+0xa088>
   1c530:	mov	r3, r7
   1c534:	str	r5, [sp]
   1c538:	bl	121ec <error@plt>
   1c53c:	add	r0, sp, #40	; 0x28
   1c540:	bl	12300 <strlen@plt>
   1c544:	cmp	r5, r0
   1c548:	bhi	1c500 <__assert_fail@plt+0x9f0c>
   1c54c:	ldr	r3, [pc, #300]	; 1c680 <__assert_fail@plt+0xa08c>
   1c550:	mov	r2, #720	; 0x2d0
   1c554:	ldr	r1, [pc, #296]	; 1c684 <__assert_fail@plt+0xa090>
   1c558:	ldr	r0, [pc, #296]	; 1c688 <__assert_fail@plt+0xa094>
   1c55c:	bl	125f4 <__assert_fail@plt>
   1c560:	ldr	r3, [pc, #252]	; 1c664 <__assert_fail@plt+0xa070>
   1c564:	mov	r2, #756	; 0x2f4
   1c568:	ldr	r1, [pc, #276]	; 1c684 <__assert_fail@plt+0xa090>
   1c56c:	ldr	r0, [pc, #280]	; 1c68c <__assert_fail@plt+0xa098>
   1c570:	bl	125f4 <__assert_fail@plt>
   1c574:	ldr	r3, [pc, #232]	; 1c664 <__assert_fail@plt+0xa070>
   1c578:	ldr	r2, [pc, #272]	; 1c690 <__assert_fail@plt+0xa09c>
   1c57c:	ldr	r1, [pc, #256]	; 1c684 <__assert_fail@plt+0xa090>
   1c580:	ldr	r0, [pc, #268]	; 1c694 <__assert_fail@plt+0xa0a0>
   1c584:	bl	125f4 <__assert_fail@plt>
   1c588:	ldr	r3, [pc, #212]	; 1c664 <__assert_fail@plt+0xa070>
   1c58c:	ldr	r2, [pc, #260]	; 1c698 <__assert_fail@plt+0xa0a4>
   1c590:	ldr	r1, [pc, #236]	; 1c684 <__assert_fail@plt+0xa090>
   1c594:	ldr	r0, [pc, #256]	; 1c69c <__assert_fail@plt+0xa0a8>
   1c598:	bl	125f4 <__assert_fail@plt>
   1c59c:	ldr	r3, [pc, #192]	; 1c664 <__assert_fail@plt+0xa070>
   1c5a0:	ldr	r2, [pc, #248]	; 1c6a0 <__assert_fail@plt+0xa0ac>
   1c5a4:	ldr	r1, [pc, #216]	; 1c684 <__assert_fail@plt+0xa090>
   1c5a8:	ldr	r0, [pc, #244]	; 1c6a4 <__assert_fail@plt+0xa0b0>
   1c5ac:	bl	125f4 <__assert_fail@plt>
   1c5b0:	ldr	r3, [pc, #172]	; 1c664 <__assert_fail@plt+0xa070>
   1c5b4:	ldr	r2, [pc, #236]	; 1c6a8 <__assert_fail@plt+0xa0b4>
   1c5b8:	ldr	r1, [pc, #196]	; 1c684 <__assert_fail@plt+0xa090>
   1c5bc:	ldr	r0, [pc, #232]	; 1c6ac <__assert_fail@plt+0xa0b8>
   1c5c0:	bl	125f4 <__assert_fail@plt>
   1c5c4:	ldr	r3, [pc, #152]	; 1c664 <__assert_fail@plt+0xa070>
   1c5c8:	mov	r2, #752	; 0x2f0
   1c5cc:	ldr	r1, [pc, #176]	; 1c684 <__assert_fail@plt+0xa090>
   1c5d0:	ldr	r0, [pc, #216]	; 1c6b0 <__assert_fail@plt+0xa0bc>
   1c5d4:	bl	125f4 <__assert_fail@plt>
   1c5d8:	ldr	r3, [pc, #132]	; 1c664 <__assert_fail@plt+0xa070>
   1c5dc:	ldr	r2, [pc, #208]	; 1c6b4 <__assert_fail@plt+0xa0c0>
   1c5e0:	ldr	r1, [pc, #156]	; 1c684 <__assert_fail@plt+0xa090>
   1c5e4:	ldr	r0, [pc, #204]	; 1c6b8 <__assert_fail@plt+0xa0c4>
   1c5e8:	bl	125f4 <__assert_fail@plt>
   1c5ec:	ldr	r3, [pc, #112]	; 1c664 <__assert_fail@plt+0xa070>
   1c5f0:	ldr	r2, [pc, #196]	; 1c6bc <__assert_fail@plt+0xa0c8>
   1c5f4:	ldr	r1, [pc, #136]	; 1c684 <__assert_fail@plt+0xa090>
   1c5f8:	ldr	r0, [pc, #192]	; 1c6c0 <__assert_fail@plt+0xa0cc>
   1c5fc:	bl	125f4 <__assert_fail@plt>
   1c600:	ldr	r3, [pc, #92]	; 1c664 <__assert_fail@plt+0xa070>
   1c604:	ldr	r2, [pc, #184]	; 1c6c4 <__assert_fail@plt+0xa0d0>
   1c608:	ldr	r1, [pc, #116]	; 1c684 <__assert_fail@plt+0xa090>
   1c60c:	ldr	r0, [pc, #180]	; 1c6c8 <__assert_fail@plt+0xa0d4>
   1c610:	bl	125f4 <__assert_fail@plt>
   1c614:	ldr	r3, [pc, #100]	; 1c680 <__assert_fail@plt+0xa08c>
   1c618:	ldr	r2, [pc, #172]	; 1c6cc <__assert_fail@plt+0xa0d8>
   1c61c:	ldr	r1, [pc, #96]	; 1c684 <__assert_fail@plt+0xa090>
   1c620:	ldr	r0, [pc, #168]	; 1c6d0 <__assert_fail@plt+0xa0dc>
   1c624:	bl	125f4 <__assert_fail@plt>
   1c628:	ldr	r3, [pc, #80]	; 1c680 <__assert_fail@plt+0xa08c>
   1c62c:	ldr	r2, [pc, #160]	; 1c6d4 <__assert_fail@plt+0xa0e0>
   1c630:	ldr	r1, [pc, #76]	; 1c684 <__assert_fail@plt+0xa090>
   1c634:	ldr	r0, [pc, #156]	; 1c6d8 <__assert_fail@plt+0xa0e4>
   1c638:	bl	125f4 <__assert_fail@plt>
   1c63c:	ldr	r3, [pc, #60]	; 1c680 <__assert_fail@plt+0xa08c>
   1c640:	ldr	r2, [pc, #148]	; 1c6dc <__assert_fail@plt+0xa0e8>
   1c644:	ldr	r1, [pc, #56]	; 1c684 <__assert_fail@plt+0xa090>
   1c648:	ldr	r0, [pc, #144]	; 1c6e0 <__assert_fail@plt+0xa0ec>
   1c64c:	bl	125f4 <__assert_fail@plt>
   1c650:	ldr	r3, [pc, #40]	; 1c680 <__assert_fail@plt+0xa08c>
   1c654:	ldr	r2, [pc, #136]	; 1c6e4 <__assert_fail@plt+0xa0f0>
   1c658:	ldr	r1, [pc, #36]	; 1c684 <__assert_fail@plt+0xa090>
   1c65c:	ldr	r0, [pc, #132]	; 1c6e8 <__assert_fail@plt+0xa0f4>
   1c660:	bl	125f4 <__assert_fail@plt>
   1c664:	andeq	r0, r5, r4, asr r1
   1c668:			; <UNDEFINED> instruction: 0x000502b0
   1c66c:	muleq	r6, r8, r5
   1c670:	andeq	r0, r5, ip, ror #5
   1c674:	muleq	r6, r8, r9
   1c678:	andeq	r0, r0, r6, lsl r3
   1c67c:	andeq	r0, r5, r8, asr #6
   1c680:			; <UNDEFINED> instruction: 0x000501b0
   1c684:	andeq	r0, r5, r8, lsl #4
   1c688:	andeq	r0, r5, r8, ror r3
   1c68c:	muleq	r5, ip, r2
   1c690:	strdeq	r0, [r0], -r3
   1c694:	andeq	r0, r5, r8, lsl #5
   1c698:	strdeq	r0, [r0], -r2
   1c69c:	andeq	r0, r5, r4, ror r2
   1c6a0:	strdeq	r0, [r0], -r1
   1c6a4:	andeq	r0, r5, r0, ror #4
   1c6a8:	andeq	r0, r0, r2, lsl #6
   1c6ac:	ldrdeq	r0, [r5], -r8
   1c6b0:	andeq	r0, r5, ip, asr #4
   1c6b4:	andeq	r0, r0, pc, ror #5
   1c6b8:	andeq	r0, r5, r8, lsr r2
   1c6bc:	andeq	r0, r0, lr, ror #5
   1c6c0:	andeq	r0, r5, r4, lsr #4
   1c6c4:	andeq	r0, r0, sp, ror #5
   1c6c8:	andeq	r0, r5, r0, lsl r2
   1c6cc:	andeq	r0, r0, r7, asr #5
   1c6d0:	andeq	r0, r5, r4, lsr r3
   1c6d4:	muleq	r0, r9, r2
   1c6d8:	strdeq	r0, [r5], -r4
   1c6dc:			; <UNDEFINED> instruction: 0x000002ba
   1c6e0:	andeq	r0, r5, r8, lsl r3
   1c6e4:			; <UNDEFINED> instruction: 0x000002b9
   1c6e8:	andeq	r0, r5, r0, lsl r3
   1c6ec:	push	{r4, r5, r6, r7, r8, lr}
   1c6f0:	vpush	{d8}
   1c6f4:	mov	r4, r1
   1c6f8:	ldr	r1, [r1]
   1c6fc:	mov	r5, r0
   1c700:	cmp	r1, #1
   1c704:	sub	sp, sp, #696	; 0x2b8
   1c708:	beq	1c9b0 <__assert_fail@plt+0xa3bc>
   1c70c:	bcc	1c974 <__assert_fail@plt+0xa380>
   1c710:	cmp	r1, #2
   1c714:	bne	1c968 <__assert_fail@plt+0xa374>
   1c718:	mov	r6, r2
   1c71c:	ldrb	r2, [r4, #4]
   1c720:	cmp	r2, #121	; 0x79
   1c724:	ldrls	pc, [pc, r2, lsl #2]
   1c728:	b	1c968 <__assert_fail@plt+0xa374>
   1c72c:	muleq	r1, r0, sl
   1c730:	andeq	ip, r1, r8, ror #18
   1c734:	andeq	ip, r1, r8, ror #18
   1c738:	andeq	ip, r1, r8, ror #18
   1c73c:	andeq	ip, r1, r8, ror #18
   1c740:	andeq	ip, r1, r8, ror #18
   1c744:	andeq	ip, r1, r8, ror #18
   1c748:	andeq	ip, r1, r8, ror #18
   1c74c:	andeq	ip, r1, r8, ror #18
   1c750:	andeq	ip, r1, r8, ror #18
   1c754:	andeq	ip, r1, r8, ror #18
   1c758:	andeq	ip, r1, r8, ror #18
   1c75c:	andeq	ip, r1, r8, ror #18
   1c760:	andeq	ip, r1, r8, ror #18
   1c764:	andeq	ip, r1, r8, ror #18
   1c768:	andeq	ip, r1, r8, ror #18
   1c76c:	andeq	ip, r1, r8, ror #18
   1c770:	andeq	ip, r1, r8, ror #18
   1c774:	andeq	ip, r1, r8, ror #18
   1c778:	andeq	ip, r1, r8, ror #18
   1c77c:	andeq	ip, r1, r8, ror #18
   1c780:	andeq	ip, r1, r8, ror #18
   1c784:	andeq	ip, r1, r8, ror #18
   1c788:	andeq	ip, r1, r8, ror #18
   1c78c:	andeq	ip, r1, r8, ror #18
   1c790:	andeq	ip, r1, r8, ror #18
   1c794:	andeq	ip, r1, r8, ror #18
   1c798:	andeq	ip, r1, r8, ror #18
   1c79c:	andeq	ip, r1, r8, ror #18
   1c7a0:	andeq	ip, r1, r8, ror #18
   1c7a4:	andeq	ip, r1, r8, ror #18
   1c7a8:	andeq	ip, r1, r8, ror #18
   1c7ac:	andeq	ip, r1, r8, ror #18
   1c7b0:	andeq	ip, r1, r8, ror #18
   1c7b4:	andeq	ip, r1, r8, ror #18
   1c7b8:	andeq	ip, r1, r8, ror #18
   1c7bc:	andeq	ip, r1, r8, ror #18
   1c7c0:	andeq	ip, r1, r4, ror r9
   1c7c4:	andeq	ip, r1, r8, ror #18
   1c7c8:	andeq	ip, r1, r8, ror #18
   1c7cc:	andeq	ip, r1, r8, ror #18
   1c7d0:	andeq	ip, r1, r8, ror #18
   1c7d4:	andeq	ip, r1, r8, ror #18
   1c7d8:	andeq	ip, r1, r8, ror #18
   1c7dc:	andeq	ip, r1, r8, ror #18
   1c7e0:	andeq	ip, r1, r8, ror #18
   1c7e4:	andeq	ip, r1, r8, ror #18
   1c7e8:	andeq	ip, r1, r8, ror #18
   1c7ec:	andeq	ip, r1, r8, ror #18
   1c7f0:	andeq	ip, r1, r8, ror #18
   1c7f4:	andeq	ip, r1, r8, ror #18
   1c7f8:	andeq	ip, r1, r8, ror #18
   1c7fc:	andeq	ip, r1, r8, ror #18
   1c800:	andeq	ip, r1, r8, ror #18
   1c804:	andeq	ip, r1, r8, ror #18
   1c808:	andeq	ip, r1, r8, ror #18
   1c80c:	andeq	ip, r1, r8, ror #18
   1c810:	andeq	ip, r1, r8, ror #18
   1c814:	andeq	ip, r1, r8, ror #18
   1c818:	andeq	ip, r1, r8, ror #18
   1c81c:	andeq	ip, r1, r8, ror #18
   1c820:	andeq	ip, r1, r8, ror #18
   1c824:	andeq	ip, r1, r8, ror #18
   1c828:	andeq	ip, r1, r8, ror #18
   1c82c:	andeq	ip, r1, r8, ror #18
   1c830:	andeq	ip, r1, r8, ror #18
   1c834:	andeq	ip, r1, r8, ror #18
   1c838:	andeq	ip, r1, r8, ror #18
   1c83c:	andeq	ip, r1, ip, ror fp
   1c840:	andeq	ip, r1, r8, ror #18
   1c844:	andeq	ip, r1, r8, asr sl
   1c848:	andeq	ip, r1, r4, lsl sl
   1c84c:	muleq	r1, r8, ip
   1c850:	andeq	ip, r1, r8, ror #18
   1c854:	andeq	ip, r1, r8, ror #18
   1c858:	andeq	ip, r1, r8, ror #18
   1c85c:	andeq	ip, r1, r8, ror #18
   1c860:	ldrdeq	ip, [r1], -r8
   1c864:	andeq	ip, r1, r8, ror #18
   1c868:	andeq	ip, r1, r8, ror #18
   1c86c:	andeq	ip, r1, r4, lsl #23
   1c870:	andeq	ip, r1, r8, ror #18
   1c874:	andeq	ip, r1, r8, ror #18
   1c878:	andeq	ip, r1, r4, asr ip
   1c87c:	andeq	ip, r1, r8, ror #18
   1c880:	andeq	ip, r1, r0, asr sl
   1c884:	andeq	ip, r1, r8, ror #18
   1c888:	andeq	ip, r1, r8, ror #18
   1c88c:	andeq	ip, r1, r8, ror #18
   1c890:	andeq	ip, r1, r8, ror #23
   1c894:	andeq	ip, r1, r4, lsl ip
   1c898:	andeq	ip, r1, r8, ror #18
   1c89c:	andeq	ip, r1, r8, ror #18
   1c8a0:	andeq	ip, r1, r8, ror #18
   1c8a4:	andeq	ip, r1, r8, ror #18
   1c8a8:	andeq	ip, r1, r8, ror #18
   1c8ac:	andeq	ip, r1, r8, ror #18
   1c8b0:	andeq	ip, r1, r8, asr fp
   1c8b4:	andeq	ip, r1, r4, ror #22
   1c8b8:	andeq	ip, r1, r0, ror fp
   1c8bc:	ldrdeq	ip, [r1], -r4
   1c8c0:	andeq	ip, r1, r8, ror #18
   1c8c4:	andeq	ip, r1, r0, ror #25
   1c8c8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8cc:	andeq	ip, r1, r0, lsr #26
   1c8d0:	andeq	ip, r1, r8, lsl sp
   1c8d4:	andeq	ip, r1, r8, ror #18
   1c8d8:	andeq	ip, r1, r8, asr #28
   1c8dc:	andeq	ip, r1, r0, lsl #28
   1c8e0:	andeq	ip, r1, r0, lsr lr
   1c8e4:	andeq	ip, r1, ip, asr #23
   1c8e8:	andeq	ip, r1, r8, ror #18
   1c8ec:			; <UNDEFINED> instruction: 0x0001cab4
   1c8f0:	andeq	ip, r1, r8, ror #18
   1c8f4:	andeq	ip, r1, r8, ror #18
   1c8f8:	ldrdeq	ip, [r1], -r8
   1c8fc:	strdeq	ip, [r1], -r8
   1c900:	andeq	ip, r1, ip, lsl fp
   1c904:	andeq	ip, r1, r8, ror #18
   1c908:	andeq	ip, r1, r8, ror #18
   1c90c:	andeq	ip, r1, r8, ror #18
   1c910:	andeq	ip, r1, r4, lsl r9
   1c914:	ldr	r3, [r3, #16]
   1c918:	ldr	r1, [r4, #8]
   1c91c:	and	r3, r3, #61440	; 0xf000
   1c920:	cmp	r3, #32768	; 0x8000
   1c924:	beq	1cf30 <__assert_fail@plt+0xa93c>
   1c928:	cmp	r3, #16384	; 0x4000
   1c92c:	beq	1cc0c <__assert_fail@plt+0xa618>
   1c930:	cmp	r3, #40960	; 0xa000
   1c934:	beq	1cfa0 <__assert_fail@plt+0xa9ac>
   1c938:	cmp	r3, #49152	; 0xc000
   1c93c:	beq	1cf98 <__assert_fail@plt+0xa9a4>
   1c940:	cmp	r3, #24576	; 0x6000
   1c944:	beq	1cfa8 <__assert_fail@plt+0xa9b4>
   1c948:	cmp	r3, #8192	; 0x2000
   1c94c:	beq	1d010 <__assert_fail@plt+0xaa1c>
   1c950:	ldr	r0, [pc, #1816]	; 1d070 <__assert_fail@plt+0xaa7c>
   1c954:	cmp	r3, #4096	; 0x1000
   1c958:	ldr	r2, [pc, #1812]	; 1d074 <__assert_fail@plt+0xaa80>
   1c95c:	movne	r2, r0
   1c960:	mov	r0, r5
   1c964:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1c968:	add	sp, sp, #696	; 0x2b8
   1c96c:	vpop	{d8}
   1c970:	pop	{r4, r5, r6, r7, r8, pc}
   1c974:	ldr	r6, [r4, #12]
   1c978:	ldr	r0, [r4, #8]
   1c97c:	mov	r2, r6
   1c980:	ldr	r3, [r5, #4]
   1c984:	mov	r1, #1
   1c988:	bl	12168 <fwrite@plt>
   1c98c:	cmp	r6, r0
   1c990:	bls	1c968 <__assert_fail@plt+0xa374>
   1c994:	bl	12348 <__errno_location@plt>
   1c998:	ldr	r1, [r5, #8]
   1c99c:	ldr	r0, [r0]
   1c9a0:	bl	1bf04 <__assert_fail@plt+0x9910>
   1c9a4:	add	sp, sp, #696	; 0x2b8
   1c9a8:	vpop	{d8}
   1c9ac:	pop	{r4, r5, r6, r7, r8, pc}
   1c9b0:	ldr	r6, [r4, #12]
   1c9b4:	ldr	r0, [r4, #8]
   1c9b8:	mov	r2, r6
   1c9bc:	ldr	r3, [r5, #4]
   1c9c0:	bl	12168 <fwrite@plt>
   1c9c4:	cmp	r6, r0
   1c9c8:	bhi	1c9e8 <__assert_fail@plt+0xa3f4>
   1c9cc:	ldr	r0, [r5, #4]
   1c9d0:	bl	37670 <__assert_fail@plt+0x2507c>
   1c9d4:	cmp	r0, #0
   1c9d8:	bne	1c994 <__assert_fail@plt+0xa3a0>
   1c9dc:	add	sp, sp, #696	; 0x2b8
   1c9e0:	vpop	{d8}
   1c9e4:	pop	{r4, r5, r6, r7, r8, pc}
   1c9e8:	bl	12348 <__errno_location@plt>
   1c9ec:	ldr	r1, [r5, #8]
   1c9f0:	ldr	r0, [r0]
   1c9f4:	bl	1bf04 <__assert_fail@plt+0x9910>
   1c9f8:	b	1c9cc <__assert_fail@plt+0xa3d8>
   1c9fc:	ldr	r0, [r3, #28]
   1ca00:	str	r3, [sp, #20]
   1ca04:	bl	125d0 <getgrgid@plt>
   1ca08:	ldr	r3, [sp, #20]
   1ca0c:	subs	r2, r0, #0
   1ca10:	bne	1cb34 <__assert_fail@plt+0xa540>
   1ca14:	ldr	r0, [r3, #28]
   1ca18:	mov	r3, #0
   1ca1c:	mov	r6, #1
   1ca20:	mov	r7, #0
   1ca24:	mov	r1, r3
   1ca28:	ldr	r4, [r4, #8]
   1ca2c:	strd	r6, [sp, #8]
   1ca30:	strd	r6, [sp]
   1ca34:	add	r2, sp, #40	; 0x28
   1ca38:	bl	28a68 <__assert_fail@plt+0x16474>
   1ca3c:	mov	r1, r4
   1ca40:	mov	r2, r0
   1ca44:	mov	r0, r5
   1ca48:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1ca4c:	b	1c968 <__assert_fail@plt+0xa374>
   1ca50:	ldr	r0, [r3, #24]
   1ca54:	b	1ca18 <__assert_fail@plt+0xa424>
   1ca58:	mov	r1, r6
   1ca5c:	mov	r0, r3
   1ca60:	ldr	r4, [r4, #8]
   1ca64:	bl	1e16c <__assert_fail@plt+0xbb78>
   1ca68:	ldr	ip, [r5, #4]
   1ca6c:	ldrb	r2, [r5, #12]
   1ca70:	ldr	r1, [r5, #16]
   1ca74:	mov	r3, r4
   1ca78:	str	r0, [sp]
   1ca7c:	mov	r0, ip
   1ca80:	bl	25dc0 <__assert_fail@plt+0x137cc>
   1ca84:	cmp	r0, #0
   1ca88:	bge	1c968 <__assert_fail@plt+0xa374>
   1ca8c:	b	1c994 <__assert_fail@plt+0xa3a0>
   1ca90:	mov	r2, #5
   1ca94:	ldr	r1, [pc, #1500]	; 1d078 <__assert_fail@plt+0xaa84>
   1ca98:	mov	r0, #0
   1ca9c:	bl	120b4 <dcgettext@plt>
   1caa0:	ldr	r3, [pc, #1492]	; 1d07c <__assert_fail@plt+0xaa88>
   1caa4:	mov	r1, #0
   1caa8:	mov	r2, r0
   1caac:	mov	r0, #1
   1cab0:	bl	121ec <error@plt>
   1cab4:	ldrb	r2, [r0, #12]
   1cab8:	ldr	r1, [r0, #16]
   1cabc:	ldr	r3, [r4, #8]
   1cac0:	ldr	r0, [r0, #4]
   1cac4:	str	r6, [sp]
   1cac8:	bl	25dc0 <__assert_fail@plt+0x137cc>
   1cacc:	cmp	r0, #0
   1cad0:	bge	1c968 <__assert_fail@plt+0xa374>
   1cad4:	b	1c994 <__assert_fail@plt+0xa3a0>
   1cad8:	ldrd	r0, [r3, #48]	; 0x30
   1cadc:	mov	r2, #1
   1cae0:	mov	r3, #0
   1cae4:	ldr	r4, [r4, #8]
   1cae8:	strd	r2, [sp, #8]
   1caec:	strd	r2, [sp]
   1caf0:	mov	r3, #0
   1caf4:	b	1ca34 <__assert_fail@plt+0xa440>
   1caf8:	add	r3, r3, #80	; 0x50
   1cafc:	add	r2, sp, #40	; 0x28
   1cb00:	ldm	r3, {r0, r1}
   1cb04:	ldr	r4, [r4, #8]
   1cb08:	stm	r2, {r0, r1}
   1cb0c:	bl	1c370 <__assert_fail@plt+0x9d7c>
   1cb10:	mov	r1, r4
   1cb14:	mov	r2, r0
   1cb18:	b	1c960 <__assert_fail@plt+0xa36c>
   1cb1c:	ldr	r0, [r3, #24]
   1cb20:	str	r3, [sp, #20]
   1cb24:	bl	11f58 <getpwuid@plt>
   1cb28:	ldr	r3, [sp, #20]
   1cb2c:	subs	r2, r0, #0
   1cb30:	beq	1ca50 <__assert_fail@plt+0xa45c>
   1cb34:	ldr	r1, [r4, #8]
   1cb38:	ldr	r3, [r4, #12]
   1cb3c:	mov	ip, #115	; 0x73
   1cb40:	mov	r0, r5
   1cb44:	strb	ip, [r1, r3]
   1cb48:	ldr	r2, [r2]
   1cb4c:	ldr	r1, [r4, #8]
   1cb50:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1cb54:	b	1c968 <__assert_fail@plt+0xa374>
   1cb58:	add	r3, r3, #72	; 0x48
   1cb5c:	add	r2, sp, #24
   1cb60:	b	1cb00 <__assert_fail@plt+0xa50c>
   1cb64:	ldrd	r0, [r3, #64]	; 0x40
   1cb68:	mov	r2, #512	; 0x200
   1cb6c:	b	1cae0 <__assert_fail@plt+0xa4ec>
   1cb70:	add	r3, r3, #88	; 0x58
   1cb74:	add	r2, sp, #32
   1cb78:	b	1cb00 <__assert_fail@plt+0xa50c>
   1cb7c:	ldrd	r0, [r3]
   1cb80:	b	1cadc <__assert_fail@plt+0xa4e8>
   1cb84:	ldr	r3, [pc, #1268]	; 1d080 <__assert_fail@plt+0xaa8c>
   1cb88:	ldr	r2, [r3]
   1cb8c:	cmp	r2, #0
   1cb90:	ble	1cf90 <__assert_fail@plt+0xa99c>
   1cb94:	ldr	r3, [r3, #20]
   1cb98:	add	ip, r6, r3
   1cb9c:	ldrb	r3, [r6, r3]
   1cba0:	cmp	r3, #47	; 0x2f
   1cba4:	addeq	ip, ip, #1
   1cba8:	ldrb	r2, [r5, #12]
   1cbac:	ldr	r3, [r4, #8]
   1cbb0:	ldr	r1, [r5, #16]
   1cbb4:	ldr	r0, [r5, #4]
   1cbb8:	str	ip, [sp]
   1cbbc:	bl	25dc0 <__assert_fail@plt+0x137cc>
   1cbc0:	cmp	r0, #0
   1cbc4:	bge	1c968 <__assert_fail@plt+0xa374>
   1cbc8:	b	1c994 <__assert_fail@plt+0xa3a0>
   1cbcc:	ldr	r0, [r3, #20]
   1cbd0:	b	1ca18 <__assert_fail@plt+0xa424>
   1cbd4:	ldr	r3, [pc, #1188]	; 1d080 <__assert_fail@plt+0xaa8c>
   1cbd8:	ldr	r1, [r4, #8]
   1cbdc:	ldr	r2, [r3]
   1cbe0:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1cbe4:	b	1c968 <__assert_fail@plt+0xa374>
   1cbe8:	ldr	r3, [r3, #16]
   1cbec:	and	r3, r3, #61440	; 0xf000
   1cbf0:	cmp	r3, #40960	; 0xa000
   1cbf4:	beq	1ce94 <__assert_fail@plt+0xa8a0>
   1cbf8:	cmp	r3, #32768	; 0x8000
   1cbfc:	ldr	r1, [r4, #8]
   1cc00:	beq	1cf30 <__assert_fail@plt+0xa93c>
   1cc04:	cmp	r3, #16384	; 0x4000
   1cc08:	bne	1c938 <__assert_fail@plt+0xa344>
   1cc0c:	ldr	r2, [pc, #1136]	; 1d084 <__assert_fail@plt+0xaa90>
   1cc10:	b	1c960 <__assert_fail@plt+0xa36c>
   1cc14:	ldr	r7, [pc, #1124]	; 1d080 <__assert_fail@plt+0xaa8c>
   1cc18:	ldr	r3, [pc, #1128]	; 1d088 <__assert_fail@plt+0xaa94>
   1cc1c:	add	r2, sp, #40	; 0x28
   1cc20:	ldr	r1, [r7, #12]
   1cc24:	ldr	r0, [r7, #16]
   1cc28:	ldr	r3, [r3, #64]	; 0x40
   1cc2c:	blx	r3
   1cc30:	ldr	r1, [r4, #8]
   1cc34:	cmp	r0, #0
   1cc38:	mov	r0, r5
   1cc3c:	blt	1cf38 <__assert_fail@plt+0xa944>
   1cc40:	ldr	r2, [sp, #40]	; 0x28
   1cc44:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1cc48:	ldr	r0, [sp, #40]	; 0x28
   1cc4c:	bl	1251c <freecon@plt>
   1cc50:	b	1c968 <__assert_fail@plt+0xa374>
   1cc54:	ldrd	r6, [r3, #48]	; 0x30
   1cc58:	ldr	r4, [r4, #8]
   1cc5c:	orrs	r2, r6, r7
   1cc60:	bne	1ce68 <__assert_fail@plt+0xa874>
   1cc64:	ldrd	r2, [r3, #64]	; 0x40
   1cc68:	orrs	r1, r2, r3
   1cc6c:	beq	1cf88 <__assert_fail@plt+0xa994>
   1cc70:	vldr	d7, [pc, #984]	; 1d050 <__assert_fail@plt+0xaa5c>
   1cc74:	vldr	d6, [pc, #988]	; 1d058 <__assert_fail@plt+0xaa64>
   1cc78:	cmp	r2, #0
   1cc7c:	sbcs	r3, r3, #0
   1cc80:	vmovge.f64	d7, d6
   1cc84:	mov	r1, r4
   1cc88:	mov	r0, r5
   1cc8c:	vmov	r2, r3, d7
   1cc90:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1cc94:	b	1c968 <__assert_fail@plt+0xa374>
   1cc98:	ldr	r8, [pc, #992]	; 1d080 <__assert_fail@plt+0xaa8c>
   1cc9c:	ldr	r0, [r8, #20]
   1cca0:	add	r0, r0, #1
   1cca4:	bl	3563c <__assert_fail@plt+0x23048>
   1cca8:	ldr	r8, [r8, #20]
   1ccac:	mov	r1, r6
   1ccb0:	mov	r2, r8
   1ccb4:	mov	r7, r0
   1ccb8:	bl	12024 <memcpy@plt>
   1ccbc:	mov	r3, #0
   1ccc0:	mov	r0, r5
   1ccc4:	ldr	r1, [r4, #8]
   1ccc8:	mov	r2, r7
   1cccc:	strb	r3, [r7, r8]
   1ccd0:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1ccd4:	mov	r0, r7
   1ccd8:	bl	376d0 <__assert_fail@plt+0x250dc>
   1ccdc:	b	1c968 <__assert_fail@plt+0xa374>
   1cce0:	mov	r0, r6
   1cce4:	bl	26c84 <__assert_fail@plt+0x14690>
   1cce8:	ldrb	r2, [r5, #12]
   1ccec:	ldr	r3, [r4, #8]
   1ccf0:	ldr	r1, [r5, #16]
   1ccf4:	mov	r6, r0
   1ccf8:	ldr	r0, [r5, #4]
   1ccfc:	str	r6, [sp]
   1cd00:	bl	25dc0 <__assert_fail@plt+0x137cc>
   1cd04:	cmp	r0, #0
   1cd08:	blt	1cdc4 <__assert_fail@plt+0xa7d0>
   1cd0c:	mov	r0, r6
   1cd10:	bl	376d0 <__assert_fail@plt+0x250dc>
   1cd14:	b	1c968 <__assert_fail@plt+0xa374>
   1cd18:	ldrd	r0, [r3, #96]	; 0x60
   1cd1c:	b	1cadc <__assert_fail@plt+0xa4e8>
   1cd20:	mov	r0, r6
   1cd24:	bl	35c4c <__assert_fail@plt+0x23658>
   1cd28:	mov	r6, r0
   1cd2c:	bl	12300 <strlen@plt>
   1cd30:	sub	r0, r0, #1
   1cd34:	adds	r2, r6, r0
   1cd38:	bcs	1cd88 <__assert_fail@plt+0xa794>
   1cd3c:	ldrb	r3, [r6, r0]
   1cd40:	cmp	r3, #47	; 0x2f
   1cd44:	bne	1cd70 <__assert_fail@plt+0xa77c>
   1cd48:	sub	r3, r2, #1
   1cd4c:	sub	r0, r6, #1
   1cd50:	b	1cd64 <__assert_fail@plt+0xa770>
   1cd54:	ldrb	r1, [r2]
   1cd58:	sub	r3, r3, #1
   1cd5c:	cmp	r1, #47	; 0x2f
   1cd60:	bne	1cd70 <__assert_fail@plt+0xa77c>
   1cd64:	cmp	r3, r0
   1cd68:	mov	r2, r3
   1cd6c:	bne	1cd54 <__assert_fail@plt+0xa760>
   1cd70:	cmp	r6, r2
   1cd74:	bcs	1cd88 <__assert_fail@plt+0xa794>
   1cd78:	ldrb	r3, [r2, #1]
   1cd7c:	cmp	r3, #47	; 0x2f
   1cd80:	moveq	r3, #0
   1cd84:	strbeq	r3, [r2, #1]
   1cd88:	mov	r1, #47	; 0x2f
   1cd8c:	mov	r0, r6
   1cd90:	bl	12468 <strrchr@plt>
   1cd94:	subs	ip, r0, #0
   1cd98:	beq	1cfb0 <__assert_fail@plt+0xa9bc>
   1cd9c:	mov	lr, #0
   1cda0:	ldrb	r2, [r5, #12]
   1cda4:	ldr	r3, [r4, #8]
   1cda8:	ldr	r1, [r5, #16]
   1cdac:	ldr	r0, [r5, #4]
   1cdb0:	strb	lr, [ip]
   1cdb4:	str	r6, [sp]
   1cdb8:	bl	25dc0 <__assert_fail@plt+0x137cc>
   1cdbc:	cmp	r0, #0
   1cdc0:	bge	1cd0c <__assert_fail@plt+0xa718>
   1cdc4:	bl	12348 <__errno_location@plt>
   1cdc8:	ldr	r1, [r5, #8]
   1cdcc:	ldr	r0, [r0]
   1cdd0:	bl	1bf04 <__assert_fail@plt+0x9910>
   1cdd4:	b	1cd0c <__assert_fail@plt+0xa718>
   1cdd8:	mov	r0, r3
   1cddc:	add	r1, sp, #40	; 0x28
   1cde0:	bl	27000 <__assert_fail@plt+0x14a0c>
   1cde4:	mov	r3, #0
   1cde8:	add	r2, sp, #40	; 0x28
   1cdec:	ldr	r1, [r4, #8]
   1cdf0:	mov	r0, r5
   1cdf4:	strb	r3, [sp, #50]	; 0x32
   1cdf8:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1cdfc:	b	1c968 <__assert_fail@plt+0xa374>
   1ce00:	ldr	r3, [r3, #16]
   1ce04:	and	r3, r3, #61440	; 0xf000
   1ce08:	cmp	r3, #40960	; 0xa000
   1ce0c:	beq	1cfc4 <__assert_fail@plt+0xa9d0>
   1ce10:	ldr	r1, [r4, #8]
   1ce14:	mov	r0, r5
   1ce18:	ldr	r2, [pc, #620]	; 1d08c <__assert_fail@plt+0xaa98>
   1ce1c:	bl	1c320 <__assert_fail@plt+0x9d2c>
   1ce20:	mov	r7, #0
   1ce24:	mov	r0, r7
   1ce28:	bl	376d0 <__assert_fail@plt+0x250dc>
   1ce2c:	b	1c968 <__assert_fail@plt+0xa374>
   1ce30:	ldr	r2, [r3, #16]
   1ce34:	ldr	r1, [r4, #8]
   1ce38:	lsl	r2, r2, #20
   1ce3c:	lsr	r2, r2, #20
   1ce40:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1ce44:	b	1c968 <__assert_fail@plt+0xa374>
   1ce48:	mov	r6, #1024	; 0x400
   1ce4c:	mov	r7, #0
   1ce50:	ldrd	r0, [r3, #64]	; 0x40
   1ce54:	ldr	r4, [r4, #8]
   1ce58:	mov	r2, #512	; 0x200
   1ce5c:	mov	r3, #0
   1ce60:	strd	r6, [sp, #8]
   1ce64:	b	1caec <__assert_fail@plt+0xa4f8>
   1ce68:	ldrd	r0, [r3, #64]	; 0x40
   1ce6c:	bl	4db28 <__assert_fail@plt+0x3b534>
   1ce70:	vldr	d8, [pc, #488]	; 1d060 <__assert_fail@plt+0xaa6c>
   1ce74:	vmov	d7, r0, r1
   1ce78:	mov	r0, r6
   1ce7c:	mov	r1, r7
   1ce80:	vmul.f64	d8, d7, d8
   1ce84:	bl	4db28 <__assert_fail@plt+0x3b534>
   1ce88:	vmov	d6, r0, r1
   1ce8c:	vdiv.f64	d7, d8, d6
   1ce90:	b	1cc84 <__assert_fail@plt+0xa690>
   1ce94:	ldr	r3, [pc, #484]	; 1d080 <__assert_fail@plt+0xaa8c>
   1ce98:	mov	r2, #0
   1ce9c:	str	r2, [sp]
   1cea0:	mov	r0, #3
   1cea4:	ldr	r2, [r3, #12]
   1cea8:	ldr	r1, [r3, #16]
   1ceac:	add	r3, sp, #40	; 0x28
   1ceb0:	bl	1212c <__fxstatat64@plt>
   1ceb4:	cmp	r0, #0
   1ceb8:	beq	1cf1c <__assert_fail@plt+0xa928>
   1cebc:	bl	12348 <__errno_location@plt>
   1cec0:	ldr	r1, [r4, #8]
   1cec4:	ldr	r3, [r0]
   1cec8:	mov	r7, r0
   1cecc:	cmp	r3, #20
   1ced0:	cmpne	r3, #2
   1ced4:	mov	r0, r5
   1ced8:	moveq	r8, #1
   1cedc:	movne	r8, #0
   1cee0:	beq	1d018 <__assert_fail@plt+0xaa24>
   1cee4:	cmp	r3, #40	; 0x28
   1cee8:	beq	1d024 <__assert_fail@plt+0xaa30>
   1ceec:	ldr	r2, [pc, #412]	; 1d090 <__assert_fail@plt+0xaa9c>
   1cef0:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1cef4:	mov	r1, r6
   1cef8:	mov	r0, r8
   1cefc:	ldr	r4, [r7]
   1cf00:	bl	1be34 <__assert_fail@plt+0x9840>
   1cf04:	mov	r1, r4
   1cf08:	ldr	r2, [pc, #388]	; 1d094 <__assert_fail@plt+0xaaa0>
   1cf0c:	mov	r3, r0
   1cf10:	mov	r0, r8
   1cf14:	bl	121ec <error@plt>
   1cf18:	b	1c968 <__assert_fail@plt+0xa374>
   1cf1c:	ldr	r3, [sp, #56]	; 0x38
   1cf20:	ldr	r1, [r4, #8]
   1cf24:	and	r3, r3, #61440	; 0xf000
   1cf28:	cmp	r3, #32768	; 0x8000
   1cf2c:	bne	1c928 <__assert_fail@plt+0xa334>
   1cf30:	ldr	r2, [pc, #352]	; 1d098 <__assert_fail@plt+0xaaa4>
   1cf34:	b	1c960 <__assert_fail@plt+0xa36c>
   1cf38:	ldr	r2, [pc, #332]	; 1d08c <__assert_fail@plt+0xaa98>
   1cf3c:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1cf40:	bl	12348 <__errno_location@plt>
   1cf44:	mov	r2, #5
   1cf48:	ldr	r1, [pc, #332]	; 1d09c <__assert_fail@plt+0xaaa8>
   1cf4c:	ldr	r4, [r0]
   1cf50:	mov	r0, #0
   1cf54:	bl	120b4 <dcgettext@plt>
   1cf58:	mov	r1, r6
   1cf5c:	mov	r5, r0
   1cf60:	mov	r0, #0
   1cf64:	bl	1be34 <__assert_fail@plt+0x9840>
   1cf68:	mov	r2, r5
   1cf6c:	mov	r1, r4
   1cf70:	mov	r3, r0
   1cf74:	mov	r0, #0
   1cf78:	bl	121ec <error@plt>
   1cf7c:	mov	r3, #1
   1cf80:	str	r3, [r7, #28]
   1cf84:	b	1c968 <__assert_fail@plt+0xa374>
   1cf88:	vldr	d7, [pc, #216]	; 1d068 <__assert_fail@plt+0xaa74>
   1cf8c:	b	1cc84 <__assert_fail@plt+0xa690>
   1cf90:	ldr	ip, [pc, #244]	; 1d08c <__assert_fail@plt+0xaa98>
   1cf94:	b	1cba8 <__assert_fail@plt+0xa5b4>
   1cf98:	ldr	r2, [pc, #256]	; 1d0a0 <__assert_fail@plt+0xaaac>
   1cf9c:	b	1c960 <__assert_fail@plt+0xa36c>
   1cfa0:	ldr	r2, [pc, #252]	; 1d0a4 <__assert_fail@plt+0xaab0>
   1cfa4:	b	1c960 <__assert_fail@plt+0xa36c>
   1cfa8:	ldr	r2, [pc, #248]	; 1d0a8 <__assert_fail@plt+0xaab4>
   1cfac:	b	1c960 <__assert_fail@plt+0xa36c>
   1cfb0:	ldr	r1, [r4, #8]
   1cfb4:	mov	r0, r5
   1cfb8:	ldr	r2, [pc, #236]	; 1d0ac <__assert_fail@plt+0xaab8>
   1cfbc:	bl	1c320 <__assert_fail@plt+0x9d2c>
   1cfc0:	b	1cd0c <__assert_fail@plt+0xa718>
   1cfc4:	ldr	r8, [pc, #180]	; 1d080 <__assert_fail@plt+0xaa8c>
   1cfc8:	ldr	r1, [r8, #12]
   1cfcc:	ldr	r0, [r8, #16]
   1cfd0:	bl	2674c <__assert_fail@plt+0x14158>
   1cfd4:	subs	r7, r0, #0
   1cfd8:	beq	1d030 <__assert_fail@plt+0xaa3c>
   1cfdc:	ldrb	r2, [r5, #12]
   1cfe0:	ldr	r3, [r4, #8]
   1cfe4:	ldr	r1, [r5, #16]
   1cfe8:	ldr	r0, [r5, #4]
   1cfec:	str	r7, [sp]
   1cff0:	bl	25dc0 <__assert_fail@plt+0x137cc>
   1cff4:	cmp	r0, #0
   1cff8:	bge	1ce24 <__assert_fail@plt+0xa830>
   1cffc:	bl	12348 <__errno_location@plt>
   1d000:	ldr	r1, [r5, #8]
   1d004:	ldr	r0, [r0]
   1d008:	bl	1bf04 <__assert_fail@plt+0x9910>
   1d00c:	b	1ce24 <__assert_fail@plt+0xa830>
   1d010:	ldr	r2, [pc, #152]	; 1d0b0 <__assert_fail@plt+0xaabc>
   1d014:	b	1c960 <__assert_fail@plt+0xa36c>
   1d018:	ldr	r2, [pc, #148]	; 1d0b4 <__assert_fail@plt+0xaac0>
   1d01c:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1d020:	b	1c968 <__assert_fail@plt+0xa374>
   1d024:	ldr	r2, [pc, #140]	; 1d0b8 <__assert_fail@plt+0xaac4>
   1d028:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1d02c:	b	1c968 <__assert_fail@plt+0xa374>
   1d030:	bl	12348 <__errno_location@plt>
   1d034:	mov	r1, r6
   1d038:	ldr	r0, [r0]
   1d03c:	bl	1be48 <__assert_fail@plt+0x9854>
   1d040:	mov	r3, #1
   1d044:	str	r3, [r8, #28]
   1d048:	b	1ce10 <__assert_fail@plt+0xa81c>
   1d04c:	nop			; (mov r0, r0)
   1d050:	andeq	r0, r0, r0
   1d054:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1d058:	andeq	r0, r0, r0
   1d05c:	svcvc	0x00f00000	; IMB
   1d060:	andeq	r0, r0, r0
   1d064:	addmi	r0, r0, r0
   1d068:	andeq	r0, r0, r0
   1d06c:	svccc	0x00f00000	; IMB
   1d070:	muleq	r5, r4, r3
   1d074:	andeq	lr, r4, r4, asr #26
   1d078:	muleq	r5, r8, r3
   1d07c:			; <UNDEFINED> instruction: 0x000503bc
   1d080:	andeq	r4, r6, r0, asr #28
   1d084:	andeq	r3, r5, r8, lsl #19
   1d088:	andeq	r4, r6, ip, ror #28
   1d08c:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   1d090:	andeq	r1, r5, r0, ror #13
   1d094:	andeq	r2, r5, r4, asr #9
   1d098:	andeq	r2, r5, ip, ror #10
   1d09c:	andeq	lr, r4, r8, asr #11
   1d0a0:	andeq	r1, r5, r4, ror #15
   1d0a4:	andeq	lr, r4, ip, lsr #16
   1d0a8:	muleq	r5, r8, sl
   1d0ac:	andeq	r1, r5, r4, asr #17
   1d0b0:	andeq	sp, r4, r4, ror #31
   1d0b4:	andeq	r0, r5, ip, lsl #6
   1d0b8:	andeq	r3, r5, ip, lsl #7
   1d0bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0c0:	sub	sp, sp, #180	; 0xb4
   1d0c4:	ldr	sl, [r2, #40]	; 0x28
   1d0c8:	cmp	sl, #0
   1d0cc:	beq	1d294 <__assert_fail@plt+0xaca0>
   1d0d0:	ldr	r3, [pc, #1656]	; 1d750 <__assert_fail@plt+0xb15c>
   1d0d4:	add	r9, r2, #40	; 0x28
   1d0d8:	add	r3, r3, #788	; 0x314
   1d0dc:	add	r3, r3, #3
   1d0e0:	str	r3, [sp, #40]	; 0x28
   1d0e4:	ldr	r3, [pc, #1636]	; 1d750 <__assert_fail@plt+0xb15c>
   1d0e8:	mov	fp, r9
   1d0ec:	mov	r9, r1
   1d0f0:	add	r3, r3, #796	; 0x31c
   1d0f4:	str	r0, [sp, #20]
   1d0f8:	str	r3, [sp, #48]	; 0x30
   1d0fc:	ldr	r3, [sl]
   1d100:	cmp	r3, #2
   1d104:	bne	1d2dc <__assert_fail@plt+0xace8>
   1d108:	ldrb	r4, [sl, #5]
   1d10c:	cmp	r4, #0
   1d110:	beq	1d2dc <__assert_fail@plt+0xace8>
   1d114:	ldrb	r3, [sl, #4]
   1d118:	sub	r3, r3, #65	; 0x41
   1d11c:	cmp	r3, #19
   1d120:	ldrls	pc, [pc, r3, lsl #2]
   1d124:	b	1d300 <__assert_fail@plt+0xad0c>
   1d128:	strdeq	sp, [r1], -r4
   1d12c:	andeq	sp, r1, ip, lsr #5
   1d130:	andeq	sp, r1, r0, lsr #5
   1d134:	andeq	sp, r1, r0, lsl #6
   1d138:	andeq	sp, r1, r0, lsl #6
   1d13c:	andeq	sp, r1, r0, lsl #6
   1d140:	andeq	sp, r1, r0, lsl #6
   1d144:	andeq	sp, r1, r0, lsl #6
   1d148:	andeq	sp, r1, r0, lsl #6
   1d14c:	andeq	sp, r1, r0, lsl #6
   1d150:	andeq	sp, r1, r0, lsl #6
   1d154:	andeq	sp, r1, r0, lsl #6
   1d158:	andeq	sp, r1, r0, lsl #6
   1d15c:	andeq	sp, r1, r0, lsl #6
   1d160:	andeq	sp, r1, r0, lsl #6
   1d164:	andeq	sp, r1, r0, lsl #6
   1d168:	andeq	sp, r1, r0, lsl #6
   1d16c:	andeq	sp, r1, r0, lsl #6
   1d170:	andeq	sp, r1, r0, lsl #6
   1d174:	andeq	sp, r1, r8, ror r1
   1d178:	ldr	r2, [r9, #80]	; 0x50
   1d17c:	ldr	r3, [r9, #84]	; 0x54
   1d180:	str	r2, [sp, #80]	; 0x50
   1d184:	ldr	r2, [sl, #8]
   1d188:	cmp	r4, #43	; 0x2b
   1d18c:	str	r3, [sp, #84]	; 0x54
   1d190:	str	r2, [sp, #28]
   1d194:	beq	1d314 <__assert_fail@plt+0xad20>
   1d198:	sub	r2, r4, #64	; 0x40
   1d19c:	mov	r0, #37	; 0x25
   1d1a0:	mov	r1, #0
   1d1a4:	cmp	r2, #24
   1d1a8:	strb	r4, [sp, #89]	; 0x59
   1d1ac:	strb	r0, [sp, #88]	; 0x58
   1d1b0:	strb	r1, [sp, #90]	; 0x5a
   1d1b4:	bls	1d548 <__assert_fail@plt+0xaf54>
   1d1b8:	mov	r3, #0
   1d1bc:	str	r3, [sp, #32]
   1d1c0:	strb	r3, [sp, #100]	; 0x64
   1d1c4:	str	r3, [sp, #36]	; 0x24
   1d1c8:	cmp	r4, #64	; 0x40
   1d1cc:	bne	1d348 <__assert_fail@plt+0xad54>
   1d1d0:	ldr	r0, [sp, #80]	; 0x50
   1d1d4:	cmp	r0, #0
   1d1d8:	asr	r1, r0, #31
   1d1dc:	blt	1d680 <__assert_fail@plt+0xb08c>
   1d1e0:	mov	r2, #1
   1d1e4:	mov	r3, #0
   1d1e8:	strd	r2, [sp, #8]
   1d1ec:	strd	r2, [sp]
   1d1f0:	mov	r3, #0
   1d1f4:	ldr	r2, [pc, #1368]	; 1d754 <__assert_fail@plt+0xb160>
   1d1f8:	bl	28a68 <__assert_fail@plt+0x16474>
   1d1fc:	ldr	r3, [pc, #1356]	; 1d750 <__assert_fail@plt+0xb15c>
   1d200:	cmp	r0, r3
   1d204:	mov	r4, r0
   1d208:	bls	1d700 <__assert_fail@plt+0xb10c>
   1d20c:	ldr	r3, [sp, #40]	; 0x28
   1d210:	cmp	r0, r3
   1d214:	bcs	1d728 <__assert_fail@plt+0xb134>
   1d218:	ldr	r3, [sp, #80]	; 0x50
   1d21c:	cmp	r3, #0
   1d220:	movlt	r3, #45	; 0x2d
   1d224:	strblt	r3, [r0, #-1]
   1d228:	ldr	r3, [sp, #32]
   1d22c:	sublt	r4, r0, #1
   1d230:	cmp	r3, #0
   1d234:	beq	1d278 <__assert_fail@plt+0xac84>
   1d238:	mov	r0, r4
   1d23c:	bl	12300 <strlen@plt>
   1d240:	ldr	r3, [pc, #1288]	; 1d750 <__assert_fail@plt+0xb15c>
   1d244:	ldr	r5, [pc, #1292]	; 1d758 <__assert_fail@plt+0xb164>
   1d248:	sub	r3, r4, r3
   1d24c:	add	r3, r3, r0
   1d250:	cmp	r3, r5
   1d254:	bhi	1d714 <__assert_fail@plt+0xb120>
   1d258:	add	r0, sp, #100	; 0x64
   1d25c:	sub	r5, r5, r3
   1d260:	bl	12300 <strlen@plt>
   1d264:	cmp	r5, r0
   1d268:	bls	1d68c <__assert_fail@plt+0xb098>
   1d26c:	add	r1, sp, #100	; 0x64
   1d270:	mov	r0, r4
   1d274:	bl	12174 <strcat@plt>
   1d278:	mov	r2, r4
   1d27c:	ldr	r1, [sp, #28]
   1d280:	mov	r0, fp
   1d284:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1d288:	ldr	sl, [sl, #16]
   1d28c:	cmp	sl, #0
   1d290:	bne	1d0fc <__assert_fail@plt+0xab08>
   1d294:	mov	r0, #1
   1d298:	add	sp, sp, #180	; 0xb4
   1d29c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2a0:	ldr	r2, [r9, #88]	; 0x58
   1d2a4:	ldr	r3, [r9, #92]	; 0x5c
   1d2a8:	b	1d180 <__assert_fail@plt+0xab8c>
   1d2ac:	cmp	r4, #64	; 0x40
   1d2b0:	beq	1d630 <__assert_fail@plt+0xb03c>
   1d2b4:	ldr	r2, [pc, #1184]	; 1d75c <__assert_fail@plt+0xb168>
   1d2b8:	ldr	r1, [sl, #8]
   1d2bc:	mov	r0, fp
   1d2c0:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1d2c4:	ldr	sl, [sl, #16]
   1d2c8:	cmp	sl, #0
   1d2cc:	beq	1d294 <__assert_fail@plt+0xaca0>
   1d2d0:	ldr	r3, [sl]
   1d2d4:	cmp	r3, #2
   1d2d8:	beq	1d108 <__assert_fail@plt+0xab14>
   1d2dc:	mov	r3, r9
   1d2e0:	ldr	r2, [sp, #20]
   1d2e4:	mov	r1, sl
   1d2e8:	mov	r0, fp
   1d2ec:	bl	1c6ec <__assert_fail@plt+0xa0f8>
   1d2f0:	b	1d2c4 <__assert_fail@plt+0xacd0>
   1d2f4:	ldr	r2, [r9, #72]	; 0x48
   1d2f8:	ldr	r3, [r9, #76]	; 0x4c
   1d2fc:	b	1d180 <__assert_fail@plt+0xab8c>
   1d300:	ldr	r3, [pc, #1112]	; 1d760 <__assert_fail@plt+0xb16c>
   1d304:	ldr	r2, [pc, #1112]	; 1d764 <__assert_fail@plt+0xb170>
   1d308:	ldr	r1, [pc, #1112]	; 1d768 <__assert_fail@plt+0xb174>
   1d30c:	ldr	r0, [pc, #1112]	; 1d76c <__assert_fail@plt+0xb178>
   1d310:	bl	125f4 <__assert_fail@plt>
   1d314:	ldr	r2, [pc, #1108]	; 1d770 <__assert_fail@plt+0xb17c>
   1d318:	add	ip, sp, #88	; 0x58
   1d31c:	ldm	r2, {r0, r1, r2}
   1d320:	stm	ip, {r0, r1, r2}
   1d324:	mov	r1, #32
   1d328:	ldr	r2, [pc, #1092]	; 1d774 <__assert_fail@plt+0xb180>
   1d32c:	add	r0, sp, #100	; 0x64
   1d330:	bl	12360 <snprintf@plt>
   1d334:	cmp	r0, #31
   1d338:	str	r0, [sp, #36]	; 0x24
   1d33c:	bgt	1d73c <__assert_fail@plt+0xb148>
   1d340:	mov	r3, #1
   1d344:	str	r3, [sp, #32]
   1d348:	add	r0, sp, #80	; 0x50
   1d34c:	bl	1227c <localtime@plt>
   1d350:	subs	r5, r0, #0
   1d354:	beq	1d1d0 <__assert_fail@plt+0xabdc>
   1d358:	add	r0, sp, #88	; 0x58
   1d35c:	bl	12300 <strlen@plt>
   1d360:	ldr	r6, [pc, #1040]	; 1d778 <__assert_fail@plt+0xb184>
   1d364:	add	r0, r0, #2
   1d368:	bl	3563c <__assert_fail@plt+0x23048>
   1d36c:	mov	r3, #95	; 0x5f
   1d370:	mov	r4, r0
   1d374:	str	r0, [sp, #44]	; 0x2c
   1d378:	strb	r3, [r4], #1
   1d37c:	add	r0, sp, #88	; 0x58
   1d380:	bl	12300 <strlen@plt>
   1d384:	add	r1, sp, #88	; 0x58
   1d388:	add	r2, r0, #1
   1d38c:	mov	r0, r4
   1d390:	bl	12024 <memcpy@plt>
   1d394:	mov	lr, r5
   1d398:	add	ip, sp, #132	; 0x84
   1d39c:	ldm	lr!, {r0, r1, r2, r3}
   1d3a0:	stmia	ip!, {r0, r1, r2, r3}
   1d3a4:	ldm	lr!, {r0, r1, r2, r3}
   1d3a8:	ldr	r4, [sp, #132]	; 0x84
   1d3ac:	cmp	r4, #10
   1d3b0:	subgt	r4, r4, #11
   1d3b4:	addle	r4, r4, #11
   1d3b8:	stmia	ip!, {r0, r1, r2, r3}
   1d3bc:	ldm	lr, {r0, r1, r2}
   1d3c0:	str	r4, [sp, #132]	; 0x84
   1d3c4:	ldr	r4, [r6, #1816]	; 0x718
   1d3c8:	stm	ip, {r0, r1, r2}
   1d3cc:	cmp	r4, #0
   1d3d0:	beq	1d6d0 <__assert_fail@plt+0xb0dc>
   1d3d4:	str	fp, [sp, #24]
   1d3d8:	mov	r7, #1
   1d3dc:	ldr	fp, [sp, #44]	; 0x2c
   1d3e0:	ldr	r8, [sp, #48]	; 0x30
   1d3e4:	b	1d400 <__assert_fail@plt+0xae0c>
   1d3e8:	mov	r0, r4
   1d3ec:	mov	r2, r7
   1d3f0:	mov	r1, r8
   1d3f4:	bl	357ec <__assert_fail@plt+0x231f8>
   1d3f8:	mov	r4, r0
   1d3fc:	str	r0, [r6, #1816]	; 0x718
   1d400:	mov	r3, r5
   1d404:	mov	r2, fp
   1d408:	ldr	r1, [r6, #1820]	; 0x71c
   1d40c:	mov	r0, r4
   1d410:	bl	12264 <strftime@plt>
   1d414:	cmp	r0, #0
   1d418:	beq	1d3e8 <__assert_fail@plt+0xadf4>
   1d41c:	ldr	r3, [r6, #1820]	; 0x71c
   1d420:	cmp	r0, r3
   1d424:	bcs	1d3e8 <__assert_fail@plt+0xadf4>
   1d428:	ldr	r3, [sp, #36]	; 0x24
   1d42c:	mov	r8, r0
   1d430:	add	r3, r3, #1
   1d434:	add	r3, r3, r0
   1d438:	mov	r1, r3
   1d43c:	mov	r0, r4
   1d440:	str	r3, [sp, #76]	; 0x4c
   1d444:	mov	r4, r3
   1d448:	ldr	fp, [sp, #24]
   1d44c:	bl	35678 <__assert_fail@plt+0x23084>
   1d450:	str	r4, [r6, #1820]	; 0x71c
   1d454:	str	r0, [r6, #1816]	; 0x718
   1d458:	mov	r0, r4
   1d45c:	bl	3563c <__assert_fail@plt+0x23048>
   1d460:	add	r3, sp, #132	; 0x84
   1d464:	ldr	r2, [sp, #44]	; 0x2c
   1d468:	ldr	r1, [r6, #1820]	; 0x71c
   1d46c:	mov	r5, r0
   1d470:	str	r0, [sp, #52]	; 0x34
   1d474:	bl	12264 <strftime@plt>
   1d478:	ldr	r3, [r6, #1816]	; 0x718
   1d47c:	mov	r2, r3
   1d480:	ldrb	r4, [r3]
   1d484:	str	r3, [sp, #72]	; 0x48
   1d488:	cmp	r4, #0
   1d48c:	beq	1d5f0 <__assert_fail@plt+0xaffc>
   1d490:	mov	r1, r5
   1d494:	ldrb	r5, [r5]
   1d498:	cmp	r5, #0
   1d49c:	beq	1d5f0 <__assert_fail@plt+0xaffc>
   1d4a0:	mov	r3, #0
   1d4a4:	str	fp, [sp, #56]	; 0x38
   1d4a8:	str	sl, [sp, #60]	; 0x3c
   1d4ac:	str	r8, [sp, #68]	; 0x44
   1d4b0:	str	r9, [sp, #64]	; 0x40
   1d4b4:	str	r3, [sp, #24]
   1d4b8:	mov	r7, r3
   1d4bc:	mov	r8, r3
   1d4c0:	mov	sl, r3
   1d4c4:	mov	fp, r2
   1d4c8:	mov	r9, r1
   1d4cc:	b	1d500 <__assert_fail@plt+0xaf0c>
   1d4d0:	ldr	r3, [sp, #24]
   1d4d4:	sub	r0, r7, r3
   1d4d8:	cmp	r0, sl
   1d4dc:	bne	1d620 <__assert_fail@plt+0xb02c>
   1d4e0:	add	sl, sl, #1
   1d4e4:	ldrb	r4, [fp, #1]!
   1d4e8:	add	r7, r7, #1
   1d4ec:	cmp	r4, #0
   1d4f0:	beq	1d55c <__assert_fail@plt+0xaf68>
   1d4f4:	ldrb	r5, [r9, #1]!
   1d4f8:	cmp	r5, #0
   1d4fc:	beq	1d620 <__assert_fail@plt+0xb02c>
   1d500:	cmp	r5, r4
   1d504:	beq	1d4e4 <__assert_fail@plt+0xaef0>
   1d508:	bl	122b8 <__ctype_b_loc@plt>
   1d50c:	lsl	r4, r4, #1
   1d510:	ldr	r0, [r0]
   1d514:	ldrh	ip, [r0, r4]
   1d518:	tst	ip, #2048	; 0x800
   1d51c:	beq	1d620 <__assert_fail@plt+0xb02c>
   1d520:	lsl	r5, r5, #1
   1d524:	ldrh	r0, [r0, r5]
   1d528:	tst	r0, #2048	; 0x800
   1d52c:	beq	1d620 <__assert_fail@plt+0xb02c>
   1d530:	cmp	r8, #0
   1d534:	bne	1d4d0 <__assert_fail@plt+0xaedc>
   1d538:	mov	sl, #1
   1d53c:	mov	r8, sl
   1d540:	str	r7, [sp, #24]
   1d544:	b	1d4e4 <__assert_fail@plt+0xaef0>
   1d548:	mov	r0, #1
   1d54c:	ldr	r1, [pc, #552]	; 1d77c <__assert_fail@plt+0xb188>
   1d550:	ands	r2, r1, r0, lsl r2
   1d554:	beq	1d1b8 <__assert_fail@plt+0xabc4>
   1d558:	b	1d658 <__assert_fail@plt+0xb064>
   1d55c:	ldr	r2, [sp, #52]	; 0x34
   1d560:	mov	r3, sl
   1d564:	ldr	fp, [sp, #56]	; 0x38
   1d568:	ldrb	r2, [r2, r7]
   1d56c:	ldr	r8, [sp, #68]	; 0x44
   1d570:	ldr	sl, [sp, #60]	; 0x3c
   1d574:	cmp	r2, #0
   1d578:	cmpeq	r3, #2
   1d57c:	ldr	r9, [sp, #64]	; 0x40
   1d580:	bne	1d5f0 <__assert_fail@plt+0xaffc>
   1d584:	bl	122b8 <__ctype_b_loc@plt>
   1d588:	ldr	r3, [sp, #24]
   1d58c:	add	r1, r3, #2
   1d590:	ldr	r3, [sp, #72]	; 0x48
   1d594:	add	r4, r3, r1
   1d598:	ldrb	r3, [r3, r1]
   1d59c:	lsl	r3, r3, #1
   1d5a0:	ldr	r2, [r0]
   1d5a4:	ldrh	r3, [r2, r3]
   1d5a8:	tst	r3, #2048	; 0x800
   1d5ac:	bne	1d5f0 <__assert_fail@plt+0xaffc>
   1d5b0:	ldr	r3, [sp, #36]	; 0x24
   1d5b4:	add	r2, r8, #1
   1d5b8:	sub	r2, r2, r1
   1d5bc:	add	r0, r3, r1
   1d5c0:	ldr	r1, [sp, #76]	; 0x4c
   1d5c4:	add	r3, r2, r0
   1d5c8:	cmp	r1, r3
   1d5cc:	bne	1d6ec <__assert_fail@plt+0xb0f8>
   1d5d0:	ldr	r3, [sp, #72]	; 0x48
   1d5d4:	mov	r1, r4
   1d5d8:	add	r0, r3, r0
   1d5dc:	bl	11fb8 <memmove@plt>
   1d5e0:	ldr	r2, [sp, #36]	; 0x24
   1d5e4:	mov	r0, r4
   1d5e8:	add	r1, sp, #100	; 0x64
   1d5ec:	bl	12024 <memcpy@plt>
   1d5f0:	ldr	r0, [sp, #44]	; 0x2c
   1d5f4:	bl	376d0 <__assert_fail@plt+0x250dc>
   1d5f8:	ldr	r0, [sp, #52]	; 0x34
   1d5fc:	bl	376d0 <__assert_fail@plt+0x250dc>
   1d600:	ldr	r4, [r6, #1816]	; 0x718
   1d604:	adds	r4, r4, #1
   1d608:	beq	1d1d0 <__assert_fail@plt+0xabdc>
   1d60c:	mov	r2, r4
   1d610:	ldr	r1, [sp, #28]
   1d614:	mov	r0, fp
   1d618:	bl	1c2c0 <__assert_fail@plt+0x9ccc>
   1d61c:	b	1d288 <__assert_fail@plt+0xac94>
   1d620:	ldr	fp, [sp, #56]	; 0x38
   1d624:	ldr	sl, [sp, #60]	; 0x3c
   1d628:	ldr	r9, [sp, #64]	; 0x40
   1d62c:	b	1d5f0 <__assert_fail@plt+0xaffc>
   1d630:	ldr	r0, [sl, #8]
   1d634:	mvn	r3, #0
   1d638:	mov	r1, #37	; 0x25
   1d63c:	mov	r2, #0
   1d640:	str	r3, [sp, #80]	; 0x50
   1d644:	str	r3, [sp, #84]	; 0x54
   1d648:	str	r0, [sp, #28]
   1d64c:	strb	r1, [sp, #88]	; 0x58
   1d650:	strb	r4, [sp, #89]	; 0x59
   1d654:	strb	r2, [sp, #90]	; 0x5a
   1d658:	ldr	r2, [pc, #276]	; 1d774 <__assert_fail@plt+0xb180>
   1d65c:	mov	r1, #32
   1d660:	add	r0, sp, #100	; 0x64
   1d664:	bl	12360 <snprintf@plt>
   1d668:	cmp	r0, #31
   1d66c:	str	r0, [sp, #36]	; 0x24
   1d670:	bgt	1d73c <__assert_fail@plt+0xb148>
   1d674:	mov	r3, #1
   1d678:	str	r3, [sp, #32]
   1d67c:	b	1d1c8 <__assert_fail@plt+0xabd4>
   1d680:	rsbs	r0, r0, #0
   1d684:	rsc	r1, r1, #0
   1d688:	b	1d1e0 <__assert_fail@plt+0xabec>
   1d68c:	mov	r1, #0
   1d690:	add	r3, sp, #100	; 0x64
   1d694:	mov	r0, r1
   1d698:	str	r3, [sp, #4]
   1d69c:	ldr	r2, [pc, #220]	; 1d780 <__assert_fail@plt+0xb18c>
   1d6a0:	ldr	r3, [sp, #36]	; 0x24
   1d6a4:	str	r5, [sp]
   1d6a8:	bl	121ec <error@plt>
   1d6ac:	add	r0, sp, #100	; 0x64
   1d6b0:	bl	12300 <strlen@plt>
   1d6b4:	cmp	r5, r0
   1d6b8:	bhi	1d26c <__assert_fail@plt+0xac78>
   1d6bc:	ldr	r3, [pc, #192]	; 1d784 <__assert_fail@plt+0xb190>
   1d6c0:	mov	r2, #720	; 0x2d0
   1d6c4:	ldr	r1, [pc, #156]	; 1d768 <__assert_fail@plt+0xb174>
   1d6c8:	ldr	r0, [pc, #184]	; 1d788 <__assert_fail@plt+0xb194>
   1d6cc:	bl	125f4 <__assert_fail@plt>
   1d6d0:	mov	r3, #1
   1d6d4:	mov	r0, r3
   1d6d8:	str	r3, [r6, #1820]	; 0x71c
   1d6dc:	bl	3563c <__assert_fail@plt+0x23048>
   1d6e0:	mov	r4, r0
   1d6e4:	str	r0, [r6, #1816]	; 0x718
   1d6e8:	b	1d3d4 <__assert_fail@plt+0xade0>
   1d6ec:	ldr	r3, [pc, #152]	; 1d78c <__assert_fail@plt+0xb198>
   1d6f0:	ldr	r2, [pc, #152]	; 1d790 <__assert_fail@plt+0xb19c>
   1d6f4:	ldr	r1, [pc, #108]	; 1d768 <__assert_fail@plt+0xb174>
   1d6f8:	ldr	r0, [pc, #148]	; 1d794 <__assert_fail@plt+0xb1a0>
   1d6fc:	bl	125f4 <__assert_fail@plt>
   1d700:	ldr	r3, [pc, #124]	; 1d784 <__assert_fail@plt+0xb190>
   1d704:	ldr	r2, [pc, #140]	; 1d798 <__assert_fail@plt+0xb1a4>
   1d708:	ldr	r1, [pc, #88]	; 1d768 <__assert_fail@plt+0xb174>
   1d70c:	ldr	r0, [pc, #136]	; 1d79c <__assert_fail@plt+0xb1a8>
   1d710:	bl	125f4 <__assert_fail@plt>
   1d714:	ldr	r3, [pc, #104]	; 1d784 <__assert_fail@plt+0xb190>
   1d718:	ldr	r2, [pc, #128]	; 1d7a0 <__assert_fail@plt+0xb1ac>
   1d71c:	ldr	r1, [pc, #68]	; 1d768 <__assert_fail@plt+0xb174>
   1d720:	ldr	r0, [pc, #124]	; 1d7a4 <__assert_fail@plt+0xb1b0>
   1d724:	bl	125f4 <__assert_fail@plt>
   1d728:	ldr	r3, [pc, #84]	; 1d784 <__assert_fail@plt+0xb190>
   1d72c:	ldr	r2, [pc, #116]	; 1d7a8 <__assert_fail@plt+0xb1b4>
   1d730:	ldr	r1, [pc, #48]	; 1d768 <__assert_fail@plt+0xb174>
   1d734:	ldr	r0, [pc, #112]	; 1d7ac <__assert_fail@plt+0xb1b8>
   1d738:	bl	125f4 <__assert_fail@plt>
   1d73c:	ldr	r3, [pc, #64]	; 1d784 <__assert_fail@plt+0xb190>
   1d740:	ldr	r2, [pc, #104]	; 1d7b0 <__assert_fail@plt+0xb1bc>
   1d744:	ldr	r1, [pc, #28]	; 1d768 <__assert_fail@plt+0xb174>
   1d748:	ldr	r0, [pc, #100]	; 1d7b4 <__assert_fail@plt+0xb1c0>
   1d74c:	bl	125f4 <__assert_fail@plt>
   1d750:	muleq	r6, r8, r9
   1d754:	muleq	r6, r9, r9
   1d758:	andeq	r0, r0, r6, lsl r3
   1d75c:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   1d760:			; <UNDEFINED> instruction: 0x000501bc
   1d764:	andeq	r0, r0, r8, lsl r5
   1d768:	andeq	r0, r5, r8, lsl #4
   1d76c:	andeq	r2, r5, r8, lsl r6
   1d770:	strdeq	r0, [r5], -r4
   1d774:	andeq	r0, r5, ip, ror #5
   1d778:	muleq	r6, r8, r5
   1d77c:	tsteq	r8, r1
   1d780:	andeq	r0, r5, r8, asr #6
   1d784:			; <UNDEFINED> instruction: 0x000501b0
   1d788:	andeq	r0, r5, r8, ror r3
   1d78c:	andeq	r0, r5, ip, asr #3
   1d790:	andeq	r0, r0, r5, lsr #4
   1d794:	andeq	r0, r5, r0, asr #7
   1d798:			; <UNDEFINED> instruction: 0x000002b9
   1d79c:	andeq	r0, r5, r0, lsl r3
   1d7a0:	andeq	r0, r0, r7, asr #5
   1d7a4:	andeq	r0, r5, r4, lsr r3
   1d7a8:			; <UNDEFINED> instruction: 0x000002ba
   1d7ac:	andeq	r0, r5, r8, lsl r3
   1d7b0:	muleq	r0, r9, r2
   1d7b4:	strdeq	r0, [r5], -r4
   1d7b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7bc:	ldrb	r4, [sp, #40]	; 0x28
   1d7c0:	ldrb	r9, [sp, #44]	; 0x2c
   1d7c4:	cmp	r4, #123	; 0x7b
   1d7c8:	beq	1db2c <__assert_fail@plt+0xb538>
   1d7cc:	cmp	r4, #91	; 0x5b
   1d7d0:	beq	1db18 <__assert_fail@plt+0xb524>
   1d7d4:	cmp	r4, #40	; 0x28
   1d7d8:	beq	1db40 <__assert_fail@plt+0xb54c>
   1d7dc:	mov	r8, r0
   1d7e0:	mov	r0, #20
   1d7e4:	mov	r6, r2
   1d7e8:	mov	fp, r3
   1d7ec:	mov	sl, r1
   1d7f0:	bl	3563c <__assert_fail@plt+0x23048>
   1d7f4:	mov	r3, #0
   1d7f8:	mov	r5, r0
   1d7fc:	str	r0, [r8]
   1d800:	add	r0, r6, #2
   1d804:	str	r3, [r5, #16]
   1d808:	str	fp, [r5]
   1d80c:	strb	r4, [r5, #4]
   1d810:	strb	r9, [r5, #5]
   1d814:	str	r6, [r5, #12]
   1d818:	bl	3563c <__assert_fail@plt+0x23048>
   1d81c:	mov	r1, sl
   1d820:	mov	r2, r6
   1d824:	mov	r7, r0
   1d828:	str	r0, [r5, #8]
   1d82c:	bl	12390 <strncpy@plt>
   1d830:	cmp	fp, #1
   1d834:	add	r3, r7, r6
   1d838:	bls	1d9c8 <__assert_fail@plt+0xb3d4>
   1d83c:	cmp	fp, #2
   1d840:	bne	1db54 <__assert_fail@plt+0xb560>
   1d844:	sub	r4, r4, #37	; 0x25
   1d848:	cmp	r4, #84	; 0x54
   1d84c:	ldrls	pc, [pc, r4, lsl #2]
   1d850:	b	1d9b4 <__assert_fail@plt+0xb3c0>
   1d854:	andeq	sp, r1, r8, lsr #19
   1d858:			; <UNDEFINED> instruction: 0x0001d9b4
   1d85c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d860:			; <UNDEFINED> instruction: 0x0001d9b4
   1d864:			; <UNDEFINED> instruction: 0x0001d9b4
   1d868:			; <UNDEFINED> instruction: 0x0001d9b4
   1d86c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d870:			; <UNDEFINED> instruction: 0x0001d9b4
   1d874:			; <UNDEFINED> instruction: 0x0001d9b4
   1d878:			; <UNDEFINED> instruction: 0x0001d9b4
   1d87c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d880:			; <UNDEFINED> instruction: 0x0001d9b4
   1d884:			; <UNDEFINED> instruction: 0x0001d9b4
   1d888:			; <UNDEFINED> instruction: 0x0001d9b4
   1d88c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d890:			; <UNDEFINED> instruction: 0x0001d9b4
   1d894:			; <UNDEFINED> instruction: 0x0001d9b4
   1d898:			; <UNDEFINED> instruction: 0x0001d9b4
   1d89c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8a0:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8a4:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8a8:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8ac:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8b0:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8b4:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8b8:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8bc:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8c0:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8c4:	strdeq	sp, [r1], -r8
   1d8c8:	strdeq	sp, [r1], -r8
   1d8cc:	strdeq	sp, [r1], -r8
   1d8d0:	strdeq	sp, [r1], -r8
   1d8d4:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8d8:	strdeq	sp, [r1], -r8
   1d8dc:	strdeq	sp, [r1], -r8
   1d8e0:	andeq	sp, r1, r8, ror #19
   1d8e4:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8e8:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8ec:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8f0:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8f4:	strdeq	sp, [r1], -r8
   1d8f8:			; <UNDEFINED> instruction: 0x0001d9b4
   1d8fc:			; <UNDEFINED> instruction: 0x0001d9b4
   1d900:	andeq	sp, r1, r8, ror #19
   1d904:			; <UNDEFINED> instruction: 0x0001d9b4
   1d908:			; <UNDEFINED> instruction: 0x0001d9b4
   1d90c:	andeq	sp, r1, ip, lsl #22
   1d910:	strdeq	sp, [r1], -r8
   1d914:	strdeq	sp, [r1], -r8
   1d918:			; <UNDEFINED> instruction: 0x0001d9b4
   1d91c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d920:			; <UNDEFINED> instruction: 0x0001d9b4
   1d924:	andeq	sp, r1, ip, ror sl
   1d928:	andeq	sp, r1, r0, lsr #21
   1d92c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d930:			; <UNDEFINED> instruction: 0x0001d9b4
   1d934:			; <UNDEFINED> instruction: 0x0001d9b4
   1d938:			; <UNDEFINED> instruction: 0x0001d9b4
   1d93c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d940:			; <UNDEFINED> instruction: 0x0001d9b4
   1d944:	strdeq	sp, [r1], -r8
   1d948:	strdeq	sp, [r1], -r8
   1d94c:	strdeq	sp, [r1], -r8
   1d950:			; <UNDEFINED> instruction: 0x0001dab8
   1d954:			; <UNDEFINED> instruction: 0x0001d9b4
   1d958:	andeq	sp, r1, r8, ror #19
   1d95c:	strdeq	sp, [r1], -r8
   1d960:	andeq	sp, r1, r8, ror #19
   1d964:	andeq	sp, r1, r8, asr #21
   1d968:			; <UNDEFINED> instruction: 0x0001d9b4
   1d96c:	strdeq	sp, [r1], -r8
   1d970:	andeq	sp, r1, r8, asr sl
   1d974:	andeq	sp, r1, r4, lsr sl
   1d978:	strdeq	sp, [r1], -r8
   1d97c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d980:	andeq	sp, r1, r8, ror #19
   1d984:			; <UNDEFINED> instruction: 0x0001d9b4
   1d988:			; <UNDEFINED> instruction: 0x0001d9b4
   1d98c:	strdeq	sp, [r1], -r8
   1d990:	strdeq	sp, [r1], -r8
   1d994:	strdeq	sp, [r1], -r8
   1d998:			; <UNDEFINED> instruction: 0x0001d9b4
   1d99c:			; <UNDEFINED> instruction: 0x0001d9b4
   1d9a0:			; <UNDEFINED> instruction: 0x0001d9b4
   1d9a4:	andeq	sp, r1, r8, ror #21
   1d9a8:	add	r3, r3, #1
   1d9ac:	mov	r2, #37	; 0x25
   1d9b0:	strb	r2, [r7, r6]
   1d9b4:	mov	r2, #0
   1d9b8:	strb	r2, [r3]
   1d9bc:	ldr	r0, [r8]
   1d9c0:	add	r0, r0, #16
   1d9c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9c8:	cmp	r4, #0
   1d9cc:	bne	1db68 <__assert_fail@plt+0xb574>
   1d9d0:	cmp	r9, #0
   1d9d4:	bne	1db7c <__assert_fail@plt+0xb588>
   1d9d8:	ldr	r0, [r8]
   1d9dc:	strb	r9, [r7, r6]
   1d9e0:	add	r0, r0, #16
   1d9e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9e8:	mov	r2, #115	; 0x73
   1d9ec:	add	r3, r3, #1
   1d9f0:	strb	r2, [r7, r6]
   1d9f4:	b	1d9b4 <__assert_fail@plt+0xb3c0>
   1d9f8:	mov	r1, #1
   1d9fc:	mov	r2, #115	; 0x73
   1da00:	ldr	r0, [sp, #48]	; 0x30
   1da04:	add	r3, r3, r1
   1da08:	strb	r2, [r7, r6]
   1da0c:	strb	r1, [r0, #18]
   1da10:	mov	r2, #3
   1da14:	mov	r1, r0
   1da18:	ldr	r0, [r1, #24]
   1da1c:	mov	r1, #0
   1da20:	cmp	r2, r0
   1da24:	strb	r1, [r3]
   1da28:	ldrhi	r3, [sp, #48]	; 0x30
   1da2c:	strhi	r2, [r3, #24]
   1da30:	b	1d9bc <__assert_fail@plt+0xb3c8>
   1da34:	mov	r0, #111	; 0x6f
   1da38:	strb	r0, [r7, r6]
   1da3c:	ldr	r0, [sp, #48]	; 0x30
   1da40:	mov	r1, #1
   1da44:	add	r3, r3, #1
   1da48:	strb	r1, [r0, #18]
   1da4c:	mov	r2, #3
   1da50:	mov	r1, r0
   1da54:	b	1da18 <__assert_fail@plt+0xb424>
   1da58:	ldr	r0, [sp, #48]	; 0x30
   1da5c:	mov	r1, #1
   1da60:	mov	r2, #115	; 0x73
   1da64:	add	r3, r3, r1
   1da68:	strb	r1, [r0, #18]
   1da6c:	strb	r2, [r7, r6]
   1da70:	mov	r1, r0
   1da74:	mov	r2, #4
   1da78:	b	1da18 <__assert_fail@plt+0xb424>
   1da7c:	ldr	r0, [sp, #48]	; 0x30
   1da80:	mov	r1, #1
   1da84:	mov	r2, #115	; 0x73
   1da88:	add	r3, r3, r1
   1da8c:	strb	r1, [r0, #18]
   1da90:	strb	r2, [r7, r6]
   1da94:	mov	r1, r0
   1da98:	mov	r2, #2
   1da9c:	b	1da18 <__assert_fail@plt+0xb424>
   1daa0:	mov	r2, #115	; 0x73
   1daa4:	strb	r2, [r7, r6]
   1daa8:	add	r3, r3, #1
   1daac:	mov	r2, #5
   1dab0:	ldr	r1, [sp, #48]	; 0x30
   1dab4:	b	1da18 <__assert_fail@plt+0xb424>
   1dab8:	mov	r2, #100	; 0x64
   1dabc:	add	r3, r3, #1
   1dac0:	strb	r2, [r7, r6]
   1dac4:	b	1d9b4 <__assert_fail@plt+0xb3c0>
   1dac8:	ldr	r0, [sp, #48]	; 0x30
   1dacc:	mov	r2, #1
   1dad0:	mov	r1, #115	; 0x73
   1dad4:	strb	r1, [r7, r6]
   1dad8:	add	r3, r3, r2
   1dadc:	strb	r2, [r0, #20]
   1dae0:	mov	r1, r0
   1dae4:	b	1da18 <__assert_fail@plt+0xb424>
   1dae8:	ldr	r0, [sp, #48]	; 0x30
   1daec:	mov	r1, #1
   1daf0:	mov	r2, #115	; 0x73
   1daf4:	add	r3, r3, r1
   1daf8:	strb	r1, [r0, #19]
   1dafc:	strb	r2, [r7, r6]
   1db00:	mov	r1, r0
   1db04:	mov	r2, #2
   1db08:	b	1da18 <__assert_fail@plt+0xb424>
   1db0c:	mov	r1, #1
   1db10:	mov	r2, #103	; 0x67
   1db14:	b	1da00 <__assert_fail@plt+0xb40c>
   1db18:	ldr	r3, [pc, #112]	; 1db90 <__assert_fail@plt+0xb59c>
   1db1c:	mov	r2, #79	; 0x4f
   1db20:	ldr	r1, [pc, #108]	; 1db94 <__assert_fail@plt+0xb5a0>
   1db24:	ldr	r0, [pc, #108]	; 1db98 <__assert_fail@plt+0xb5a4>
   1db28:	bl	125f4 <__assert_fail@plt>
   1db2c:	ldr	r3, [pc, #92]	; 1db90 <__assert_fail@plt+0xb59c>
   1db30:	mov	r2, #78	; 0x4e
   1db34:	ldr	r1, [pc, #88]	; 1db94 <__assert_fail@plt+0xb5a0>
   1db38:	ldr	r0, [pc, #92]	; 1db9c <__assert_fail@plt+0xb5a8>
   1db3c:	bl	125f4 <__assert_fail@plt>
   1db40:	ldr	r3, [pc, #72]	; 1db90 <__assert_fail@plt+0xb59c>
   1db44:	mov	r2, #80	; 0x50
   1db48:	ldr	r1, [pc, #68]	; 1db94 <__assert_fail@plt+0xb5a0>
   1db4c:	ldr	r0, [pc, #76]	; 1dba0 <__assert_fail@plt+0xb5ac>
   1db50:	bl	125f4 <__assert_fail@plt>
   1db54:	ldr	r3, [pc, #52]	; 1db90 <__assert_fail@plt+0xb59c>
   1db58:	mov	r2, #105	; 0x69
   1db5c:	ldr	r1, [pc, #48]	; 1db94 <__assert_fail@plt+0xb5a0>
   1db60:	ldr	r0, [pc, #60]	; 1dba4 <__assert_fail@plt+0xb5b0>
   1db64:	bl	125f4 <__assert_fail@plt>
   1db68:	ldr	r3, [pc, #32]	; 1db90 <__assert_fail@plt+0xb59c>
   1db6c:	mov	r2, #97	; 0x61
   1db70:	ldr	r1, [pc, #28]	; 1db94 <__assert_fail@plt+0xb5a0>
   1db74:	ldr	r0, [pc, #44]	; 1dba8 <__assert_fail@plt+0xb5b4>
   1db78:	bl	125f4 <__assert_fail@plt>
   1db7c:	ldr	r3, [pc, #12]	; 1db90 <__assert_fail@plt+0xb59c>
   1db80:	mov	r2, #98	; 0x62
   1db84:	ldr	r1, [pc, #8]	; 1db94 <__assert_fail@plt+0xb5a0>
   1db88:	ldr	r0, [pc, #28]	; 1dbac <__assert_fail@plt+0xb5b8>
   1db8c:	bl	125f4 <__assert_fail@plt>
   1db90:	ldrdeq	r0, [r5], -ip
   1db94:	andeq	r0, r5, r8, lsl #4
   1db98:	andeq	r0, r5, r4, lsl r4
   1db9c:	andeq	r0, r5, r0, lsl #8
   1dba0:	andeq	r0, r5, r8, lsr #8
   1dba4:	andeq	r0, r5, r8, ror #8
   1dba8:	andeq	r0, r5, ip, lsr r4
   1dbac:	andeq	r0, r5, r0, asr r4
   1dbb0:	mov	r3, r1
   1dbb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbb8:	mov	r4, r0
   1dbbc:	ldr	r1, [pc, #1392]	; 1e134 <__assert_fail@plt+0xbb40>
   1dbc0:	mov	r0, r3
   1dbc4:	sub	sp, sp, #36	; 0x24
   1dbc8:	mov	r7, r2
   1dbcc:	bl	1a958 <__assert_fail@plt+0x8364>
   1dbd0:	mov	ip, r4
   1dbd4:	mov	r4, #1
   1dbd8:	mov	r6, r0
   1dbdc:	add	lr, r0, #40	; 0x28
   1dbe0:	ldm	ip!, {r0, r1, r2, r3}
   1dbe4:	strb	r4, [r6, #17]
   1dbe8:	strb	r4, [r6, #16]
   1dbec:	stmia	lr!, {r0, r1, r2, r3}
   1dbf0:	mov	r3, #0
   1dbf4:	ldr	r2, [ip]
   1dbf8:	str	r2, [lr]
   1dbfc:	strb	r3, [r6, #19]
   1dc00:	strb	r3, [r6, #18]
   1dc04:	str	r3, [r6, #24]
   1dc08:	str	r3, [r6, #40]	; 0x28
   1dc0c:	ldrb	sl, [r7]
   1dc10:	cmp	sl, r3
   1dc14:	beq	1dca4 <__assert_fail@plt+0xb6b0>
   1dc18:	add	r1, r6, #40	; 0x28
   1dc1c:	ldr	r8, [pc, #1300]	; 1e138 <__assert_fail@plt+0xbb44>
   1dc20:	str	r6, [sp, #28]
   1dc24:	mov	r4, r7
   1dc28:	mov	r6, r1
   1dc2c:	cmp	sl, #92	; 0x5c
   1dc30:	beq	1dcb0 <__assert_fail@plt+0xb6bc>
   1dc34:	cmp	sl, #37	; 0x25
   1dc38:	beq	1dd88 <__assert_fail@plt+0xb794>
   1dc3c:	mov	r5, r4
   1dc40:	add	r4, r4, #1
   1dc44:	ldrb	sl, [r5, #1]
   1dc48:	cmp	sl, #0
   1dc4c:	bne	1dc2c <__assert_fail@plt+0xb638>
   1dc50:	cmp	r7, r4
   1dc54:	bcs	1dca4 <__assert_fail@plt+0xb6b0>
   1dc58:	mov	r0, #20
   1dc5c:	bl	3563c <__assert_fail@plt+0x23048>
   1dc60:	mov	r3, r6
   1dc64:	sub	r4, r4, r7
   1dc68:	mov	r5, r0
   1dc6c:	str	r0, [r3]
   1dc70:	add	r0, r4, #2
   1dc74:	str	sl, [r5]
   1dc78:	strb	sl, [r5, #4]
   1dc7c:	strb	sl, [r5, #5]
   1dc80:	str	sl, [r5, #16]
   1dc84:	str	r4, [r5, #12]
   1dc88:	bl	3563c <__assert_fail@plt+0x23048>
   1dc8c:	mov	r1, r7
   1dc90:	mov	r2, r4
   1dc94:	mov	r6, r0
   1dc98:	str	r0, [r5, #8]
   1dc9c:	bl	12390 <strncpy@plt>
   1dca0:	strb	sl, [r6, r4]
   1dca4:	mov	r0, #1
   1dca8:	add	sp, sp, #36	; 0x24
   1dcac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcb0:	ldrb	r5, [r4, #1]
   1dcb4:	cmp	r5, #99	; 0x63
   1dcb8:	beq	1e06c <__assert_fail@plt+0xba78>
   1dcbc:	cmp	r5, #0
   1dcc0:	beq	1deec <__assert_fail@plt+0xb8f8>
   1dcc4:	sub	r3, r5, #48	; 0x30
   1dcc8:	uxtb	r2, r3
   1dccc:	cmp	r2, #7
   1dcd0:	bhi	1deb4 <__assert_fail@plt+0xb8c0>
   1dcd4:	ldrb	r2, [r4, #2]
   1dcd8:	sub	r1, r2, #48	; 0x30
   1dcdc:	cmp	r1, #7
   1dce0:	bhi	1e0f0 <__assert_fail@plt+0xbafc>
   1dce4:	ldrb	r1, [r4, #3]
   1dce8:	add	r3, r2, r3, lsl #3
   1dcec:	sub	r3, r3, #48	; 0x30
   1dcf0:	sub	r2, r1, #48	; 0x30
   1dcf4:	cmp	r2, #7
   1dcf8:	bhi	1e100 <__assert_fail@plt+0xbb0c>
   1dcfc:	add	r3, r1, r3, lsl #3
   1dd00:	sub	r3, r3, #48	; 0x30
   1dd04:	mov	r5, #3
   1dd08:	mov	r2, #4
   1dd0c:	str	r2, [sp, #24]
   1dd10:	strb	r3, [r4]
   1dd14:	mov	r0, #20
   1dd18:	bl	3563c <__assert_fail@plt+0x23048>
   1dd1c:	mov	r9, #0
   1dd20:	add	r5, r4, r5
   1dd24:	mov	r2, r0
   1dd28:	sub	r0, r4, r7
   1dd2c:	add	fp, r0, #1
   1dd30:	str	r2, [r6]
   1dd34:	add	r0, r0, #3
   1dd38:	str	fp, [r2, #12]
   1dd3c:	str	r9, [r2]
   1dd40:	strb	r9, [r2, #4]
   1dd44:	strb	r9, [r2, #5]
   1dd48:	str	r9, [r2, #16]
   1dd4c:	str	r2, [sp, #20]
   1dd50:	bl	3563c <__assert_fail@plt+0x23048>
   1dd54:	ldr	r2, [sp, #20]
   1dd58:	mov	r1, r7
   1dd5c:	mov	sl, r0
   1dd60:	str	r0, [r2, #8]
   1dd64:	mov	r2, fp
   1dd68:	bl	12390 <strncpy@plt>
   1dd6c:	strb	r9, [sl, fp]
   1dd70:	ldr	r2, [sp, #24]
   1dd74:	ldr	r3, [r6]
   1dd78:	add	r7, r4, r2
   1dd7c:	add	r6, r3, #16
   1dd80:	add	r4, r5, #1
   1dd84:	b	1dc44 <__assert_fail@plt+0xb650>
   1dd88:	ldrb	r9, [r4, #1]
   1dd8c:	cmp	r9, #0
   1dd90:	beq	1e110 <__assert_fail@plt+0xbb1c>
   1dd94:	cmp	r9, #37	; 0x25
   1dd98:	beq	1df18 <__assert_fail@plt+0xb924>
   1dd9c:	add	sl, r4, #1
   1dda0:	mov	r5, #0
   1dda4:	b	1ddc0 <__assert_fail@plt+0xb7cc>
   1dda8:	mov	r1, r9
   1ddac:	mov	r0, r8
   1ddb0:	bl	1230c <strchr@plt>
   1ddb4:	cmp	r0, #0
   1ddb8:	beq	1ddcc <__assert_fail@plt+0xb7d8>
   1ddbc:	ldrb	r9, [sl, #1]!
   1ddc0:	cmp	r9, #0
   1ddc4:	add	r5, r5, #1
   1ddc8:	bne	1dda8 <__assert_fail@plt+0xb7b4>
   1ddcc:	bl	122b8 <__ctype_b_loc@plt>
   1ddd0:	add	r2, r4, r5
   1ddd4:	ldr	r1, [r0]
   1ddd8:	b	1dde4 <__assert_fail@plt+0xb7f0>
   1dddc:	ldrb	r9, [r2, #1]!
   1dde0:	add	r5, r5, #1
   1dde4:	lsl	r3, r9, #1
   1dde8:	ldrh	r3, [r1, r3]
   1ddec:	tst	r3, #2048	; 0x800
   1ddf0:	bne	1dddc <__assert_fail@plt+0xb7e8>
   1ddf4:	cmp	r9, #46	; 0x2e
   1ddf8:	addne	r5, r4, r5
   1ddfc:	beq	1df94 <__assert_fail@plt+0xb9a0>
   1de00:	mov	r1, r9
   1de04:	ldr	r0, [pc, #816]	; 1e13c <__assert_fail@plt+0xbb48>
   1de08:	bl	1230c <strchr@plt>
   1de0c:	mov	sl, r9
   1de10:	cmp	r0, #0
   1de14:	beq	1dfd4 <__assert_fail@plt+0xb9e0>
   1de18:	cmp	r9, #0
   1de1c:	bne	1df28 <__assert_fail@plt+0xb934>
   1de20:	ldr	r3, [pc, #792]	; 1e140 <__assert_fail@plt+0xbb4c>
   1de24:	cmp	r3, #0
   1de28:	bne	1e048 <__assert_fail@plt+0xba54>
   1de2c:	mov	r2, #5
   1de30:	ldr	r1, [pc, #780]	; 1e144 <__assert_fail@plt+0xbb50>
   1de34:	mov	r0, #0
   1de38:	bl	120b4 <dcgettext@plt>
   1de3c:	mov	r4, r5
   1de40:	mov	r1, #0
   1de44:	ldrb	r3, [r4], #1
   1de48:	mov	r2, r0
   1de4c:	mov	r0, r1
   1de50:	bl	121ec <error@plt>
   1de54:	mov	r0, #20
   1de58:	bl	3563c <__assert_fail@plt+0x23048>
   1de5c:	mov	sl, #0
   1de60:	sub	fp, r4, r7
   1de64:	mov	r9, r0
   1de68:	str	r0, [r6]
   1de6c:	add	r0, fp, #2
   1de70:	str	fp, [r9, #12]
   1de74:	str	sl, [r9]
   1de78:	strb	sl, [r9, #4]
   1de7c:	strb	sl, [r9, #5]
   1de80:	str	sl, [r9, #16]
   1de84:	bl	3563c <__assert_fail@plt+0x23048>
   1de88:	mov	r1, r7
   1de8c:	mov	r2, fp
   1de90:	str	r0, [r9, #8]
   1de94:	str	r0, [sp, #20]
   1de98:	bl	12390 <strncpy@plt>
   1de9c:	ldr	r3, [sp, #20]
   1dea0:	strb	sl, [r3, fp]
   1dea4:	ldr	r3, [r6]
   1dea8:	add	r6, r3, #16
   1deac:	mov	r7, r4
   1deb0:	b	1dc44 <__assert_fail@plt+0xb650>
   1deb4:	sub	r5, r5, #92	; 0x5c
   1deb8:	uxtb	r5, r5
   1debc:	cmp	r5, #26
   1dec0:	bhi	1df64 <__assert_fail@plt+0xb970>
   1dec4:	ldr	r3, [pc, #636]	; 1e148 <__assert_fail@plt+0xbb54>
   1dec8:	add	r5, r3, r5
   1decc:	ldrb	r3, [r5, #152]	; 0x98
   1ded0:	cmp	r3, #0
   1ded4:	beq	1df64 <__assert_fail@plt+0xb970>
   1ded8:	strb	r3, [r4]
   1dedc:	mov	r3, #2
   1dee0:	str	r3, [sp, #24]
   1dee4:	mov	r5, #1
   1dee8:	b	1dd14 <__assert_fail@plt+0xb720>
   1deec:	mov	r2, #5
   1def0:	ldr	r1, [pc, #596]	; 1e14c <__assert_fail@plt+0xbb58>
   1def4:	mov	r0, r5
   1def8:	bl	120b4 <dcgettext@plt>
   1defc:	mov	r1, r5
   1df00:	mov	r2, r0
   1df04:	mov	r0, r5
   1df08:	bl	121ec <error@plt>
   1df0c:	mov	r3, #1
   1df10:	str	r3, [sp, #24]
   1df14:	b	1dd14 <__assert_fail@plt+0xb720>
   1df18:	ldr	r3, [pc, #560]	; 1e150 <__assert_fail@plt+0xbb5c>
   1df1c:	add	r5, r4, #1
   1df20:	cmp	r3, #0
   1df24:	beq	1e034 <__assert_fail@plt+0xba40>
   1df28:	mov	sl, r5
   1df2c:	mov	r3, #0
   1df30:	ldr	r2, [sp, #28]
   1df34:	str	r3, [sp, #4]
   1df38:	str	r2, [sp, #8]
   1df3c:	mov	r0, r6
   1df40:	sub	r2, r5, r7
   1df44:	str	r9, [sp]
   1df48:	mov	r1, r7
   1df4c:	mov	r3, #2
   1df50:	bl	1d7b8 <__assert_fail@plt+0xb1c4>
   1df54:	add	r4, sl, #1
   1df58:	mov	r5, sl
   1df5c:	mov	r6, r0
   1df60:	b	1deac <__assert_fail@plt+0xb8b8>
   1df64:	mov	r2, #5
   1df68:	ldr	r1, [pc, #484]	; 1e154 <__assert_fail@plt+0xbb60>
   1df6c:	mov	r0, #0
   1df70:	bl	120b4 <dcgettext@plt>
   1df74:	mov	r5, r4
   1df78:	mov	r1, #0
   1df7c:	ldrb	r3, [r5, #1]!
   1df80:	add	r4, r4, #2
   1df84:	mov	r2, r0
   1df88:	mov	r0, r1
   1df8c:	bl	121ec <error@plt>
   1df90:	b	1dc44 <__assert_fail@plt+0xb650>
   1df94:	add	r3, r5, #1
   1df98:	add	r2, r4, r3
   1df9c:	ldrb	r9, [r4, r3]
   1dfa0:	lsl	r3, r9, #1
   1dfa4:	ldrh	r3, [r1, r3]
   1dfa8:	tst	r3, #2048	; 0x800
   1dfac:	beq	1e0e8 <__assert_fail@plt+0xbaf4>
   1dfb0:	add	r5, r5, #2
   1dfb4:	add	r4, r4, r5
   1dfb8:	mov	r5, r4
   1dfbc:	ldrb	r9, [r4], #1
   1dfc0:	lsl	r3, r9, #1
   1dfc4:	ldrh	r3, [r1, r3]
   1dfc8:	tst	r3, #2048	; 0x800
   1dfcc:	bne	1dfb8 <__assert_fail@plt+0xb9c4>
   1dfd0:	b	1de00 <__assert_fail@plt+0xb80c>
   1dfd4:	mov	r1, r9
   1dfd8:	ldr	r0, [pc, #376]	; 1e158 <__assert_fail@plt+0xbb64>
   1dfdc:	bl	1230c <strchr@plt>
   1dfe0:	cmp	r0, #0
   1dfe4:	beq	1e034 <__assert_fail@plt+0xba40>
   1dfe8:	ldrb	r3, [r5, #1]
   1dfec:	add	r4, r5, #1
   1dff0:	mov	sl, r4
   1dff4:	cmp	r3, #0
   1dff8:	bne	1df30 <__assert_fail@plt+0xb93c>
   1dffc:	mov	r1, r9
   1e000:	ldr	r0, [pc, #340]	; 1e15c <__assert_fail@plt+0xbb68>
   1e004:	bl	1230c <strchr@plt>
   1e008:	subs	r9, r0, #0
   1e00c:	bne	1e048 <__assert_fail@plt+0xba54>
   1e010:	mov	r2, #5
   1e014:	ldr	r1, [pc, #324]	; 1e160 <__assert_fail@plt+0xbb6c>
   1e018:	bl	120b4 <dcgettext@plt>
   1e01c:	ldrb	r3, [r5]
   1e020:	mov	r1, r9
   1e024:	mov	r2, r0
   1e028:	mov	r0, r9
   1e02c:	bl	121ec <error@plt>
   1e030:	b	1de54 <__assert_fail@plt+0xb860>
   1e034:	mov	r1, sl
   1e038:	ldr	r0, [pc, #284]	; 1e15c <__assert_fail@plt+0xbb68>
   1e03c:	bl	1230c <strchr@plt>
   1e040:	cmp	r0, #0
   1e044:	beq	1de2c <__assert_fail@plt+0xb838>
   1e048:	mov	r2, #5
   1e04c:	ldr	r1, [pc, #272]	; 1e164 <__assert_fail@plt+0xbb70>
   1e050:	mov	r0, #0
   1e054:	bl	120b4 <dcgettext@plt>
   1e058:	ldrb	r3, [r5]
   1e05c:	mov	r1, #0
   1e060:	mov	r2, r0
   1e064:	mov	r0, #1
   1e068:	bl	121ec <error@plt>
   1e06c:	mov	r0, #20
   1e070:	mov	r8, r6
   1e074:	ldr	r6, [sp, #28]
   1e078:	bl	3563c <__assert_fail@plt+0x23048>
   1e07c:	mov	r3, r8
   1e080:	sub	r4, r4, r7
   1e084:	mov	r8, #0
   1e088:	mov	r5, r0
   1e08c:	str	r0, [r3]
   1e090:	mov	r3, #1
   1e094:	str	r3, [r5]
   1e098:	add	r0, r4, #2
   1e09c:	str	r4, [r5, #12]
   1e0a0:	strb	r8, [r5, #4]
   1e0a4:	strb	r8, [r5, #5]
   1e0a8:	str	r8, [r5, #16]
   1e0ac:	bl	3563c <__assert_fail@plt+0x23048>
   1e0b0:	mov	r1, r7
   1e0b4:	mov	r2, r4
   1e0b8:	mov	r9, r0
   1e0bc:	str	r0, [r5, #8]
   1e0c0:	bl	12390 <strncpy@plt>
   1e0c4:	strb	r8, [r9, r4]
   1e0c8:	ldrb	r3, [r6, #18]
   1e0cc:	cmp	r3, r8
   1e0d0:	beq	1dca4 <__assert_fail@plt+0xb6b0>
   1e0d4:	ldr	r3, [r6, #24]
   1e0d8:	cmp	r3, #2
   1e0dc:	movls	r3, #3
   1e0e0:	strls	r3, [r6, #24]
   1e0e4:	b	1dca4 <__assert_fail@plt+0xb6b0>
   1e0e8:	mov	r5, r2
   1e0ec:	b	1de00 <__assert_fail@plt+0xb80c>
   1e0f0:	mov	r2, #2
   1e0f4:	str	r2, [sp, #24]
   1e0f8:	mov	r5, #1
   1e0fc:	b	1dd10 <__assert_fail@plt+0xb71c>
   1e100:	mov	r2, #3
   1e104:	str	r2, [sp, #24]
   1e108:	mov	r5, #2
   1e10c:	b	1dd10 <__assert_fail@plt+0xb71c>
   1e110:	mov	r2, #5
   1e114:	ldr	r1, [pc, #76]	; 1e168 <__assert_fail@plt+0xbb74>
   1e118:	mov	r0, r9
   1e11c:	bl	120b4 <dcgettext@plt>
   1e120:	mov	r3, r4
   1e124:	mov	r1, r9
   1e128:	mov	r2, r0
   1e12c:	mov	r0, #1
   1e130:	bl	121ec <error@plt>
   1e134:	strheq	sp, [r1], -ip
   1e138:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   1e13c:	ldrdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   1e140:	andeq	r0, r5, r3, lsl #10
   1e144:	muleq	r5, r0, r5
   1e148:	andeq	r0, r5, r4, asr r1
   1e14c:	andeq	r0, r5, ip, ror r4
   1e150:	andeq	r0, r5, fp, ror #9
   1e154:	andeq	r0, r5, ip, lsr #9
   1e158:	strdeq	r0, [r5], -r8
   1e15c:	andeq	r0, r5, r0, lsl #10
   1e160:	andeq	r0, r5, r4, asr #10
   1e164:	andeq	r0, r5, r4, lsl #10
   1e168:	muleq	r5, r8, r3
   1e16c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e170:	mov	r5, r0
   1e174:	ldr	r4, [pc, #356]	; 1e2e0 <__assert_fail@plt+0xbcec>
   1e178:	sub	sp, sp, #108	; 0x6c
   1e17c:	ldr	r0, [r4]
   1e180:	cmp	r0, #0
   1e184:	beq	1e1ac <__assert_fail@plt+0xbbb8>
   1e188:	ldrb	r3, [r4, #4]
   1e18c:	cmp	r3, #0
   1e190:	beq	1e1a8 <__assert_fail@plt+0xbbb4>
   1e194:	ldrd	r6, [r5]
   1e198:	ldrd	r2, [r4, #8]
   1e19c:	cmp	r7, r3
   1e1a0:	cmpeq	r6, r2
   1e1a4:	beq	1e23c <__assert_fail@plt+0xbc48>
   1e1a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   1e1ac:	ldrd	r2, [r5]
   1e1b0:	ldr	r8, [r4, #16]
   1e1b4:	cmp	r8, #0
   1e1b8:	strd	r2, [r4, #8]
   1e1bc:	beq	1e25c <__assert_fail@plt+0xbc68>
   1e1c0:	ldrb	r3, [r4, #20]
   1e1c4:	cmp	r3, #0
   1e1c8:	beq	1e244 <__assert_fail@plt+0xbc50>
   1e1cc:	ldr	r6, [pc, #272]	; 1e2e4 <__assert_fail@plt+0xbcf0>
   1e1d0:	ldr	r9, [pc, #272]	; 1e2e8 <__assert_fail@plt+0xbcf4>
   1e1d4:	mov	r7, #0
   1e1d8:	mvn	sl, #0
   1e1dc:	mvn	fp, #0
   1e1e0:	mov	r1, r6
   1e1e4:	ldr	r0, [r8, #12]
   1e1e8:	bl	11f40 <strcmp@plt>
   1e1ec:	cmp	r0, #0
   1e1f0:	beq	1e214 <__assert_fail@plt+0xbc20>
   1e1f4:	ldrd	r0, [r8, #16]
   1e1f8:	cmp	r1, fp
   1e1fc:	cmpeq	r0, sl
   1e200:	beq	1e298 <__assert_fail@plt+0xbca4>
   1e204:	ldrd	r2, [r5]
   1e208:	cmp	r3, r1
   1e20c:	cmpeq	r2, r0
   1e210:	moveq	r7, r8
   1e214:	ldr	r8, [r8, #28]
   1e218:	cmp	r8, #0
   1e21c:	bne	1e1e0 <__assert_fail@plt+0xbbec>
   1e220:	cmp	r7, #0
   1e224:	beq	1e2c4 <__assert_fail@plt+0xbcd0>
   1e228:	ldr	r0, [r7, #12]
   1e22c:	bl	35c4c <__assert_fail@plt+0x23658>
   1e230:	mov	r3, #1
   1e234:	strb	r3, [r4, #4]
   1e238:	str	r0, [r4]
   1e23c:	add	sp, sp, #108	; 0x6c
   1e240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e244:	ldr	r6, [r8, #28]
   1e248:	mov	r0, r8
   1e24c:	bl	3aa8c <__assert_fail@plt+0x28498>
   1e250:	subs	r8, r6, #0
   1e254:	bne	1e244 <__assert_fail@plt+0xbc50>
   1e258:	str	r8, [r4, #16]
   1e25c:	mov	r0, #1
   1e260:	bl	3a138 <__assert_fail@plt+0x27b44>
   1e264:	mov	r6, #1
   1e268:	strb	r6, [r4, #20]
   1e26c:	cmp	r0, #0
   1e270:	mov	r8, r0
   1e274:	str	r0, [r4, #16]
   1e278:	bne	1e1cc <__assert_fail@plt+0xbbd8>
   1e27c:	mov	r2, #5
   1e280:	ldr	r1, [pc, #100]	; 1e2ec <__assert_fail@plt+0xbcf8>
   1e284:	bl	120b4 <dcgettext@plt>
   1e288:	mov	r1, r8
   1e28c:	mov	r2, r0
   1e290:	mov	r0, r6
   1e294:	bl	121ec <error@plt>
   1e298:	mov	r0, sp
   1e29c:	bl	1ac3c <__assert_fail@plt+0x8648>
   1e2a0:	ldr	r3, [r9, #52]	; 0x34
   1e2a4:	mov	r1, sp
   1e2a8:	ldr	r0, [r8, #4]
   1e2ac:	blx	r3
   1e2b0:	cmp	r0, #0
   1e2b4:	bne	1e214 <__assert_fail@plt+0xbc20>
   1e2b8:	ldrd	r0, [sp]
   1e2bc:	strd	r0, [r8, #16]
   1e2c0:	b	1e204 <__assert_fail@plt+0xbc10>
   1e2c4:	mov	r2, #5
   1e2c8:	ldr	r1, [pc, #32]	; 1e2f0 <__assert_fail@plt+0xbcfc>
   1e2cc:	mov	r0, r7
   1e2d0:	strb	r7, [r4, #4]
   1e2d4:	bl	120b4 <dcgettext@plt>
   1e2d8:	bl	35c4c <__assert_fail@plt+0x23658>
   1e2dc:	b	1e238 <__assert_fail@plt+0xbc44>
   1e2e0:			; <UNDEFINED> instruction: 0x00064cb8
   1e2e4:	andeq	r0, r5, r4, lsr r6
   1e2e8:	andeq	r4, r6, ip, ror #28
   1e2ec:	andeq	r0, r5, ip, lsl #12
   1e2f0:	andeq	lr, r4, ip, asr lr
   1e2f4:	push	{r4, r5, r6, lr}
   1e2f8:	mov	r1, r0
   1e2fc:	mov	r5, r0
   1e300:	ldr	r0, [pc, #104]	; 1e370 <__assert_fail@plt+0xbd7c>
   1e304:	bl	11f40 <strcmp@plt>
   1e308:	cmp	r0, #0
   1e30c:	bne	1e318 <__assert_fail@plt+0xbd24>
   1e310:	mov	r0, #1
   1e314:	pop	{r4, r5, r6, pc}
   1e318:	ldr	r4, [pc, #84]	; 1e374 <__assert_fail@plt+0xbd80>
   1e31c:	ldr	r0, [r4, #16]
   1e320:	cmp	r0, #0
   1e324:	beq	1e354 <__assert_fail@plt+0xbd60>
   1e328:	mov	r4, r0
   1e32c:	ldr	r1, [r4, #12]
   1e330:	mov	r0, r5
   1e334:	bl	11f40 <strcmp@plt>
   1e338:	cmp	r0, #0
   1e33c:	beq	1e310 <__assert_fail@plt+0xbd1c>
   1e340:	ldr	r4, [r4, #28]
   1e344:	cmp	r4, #0
   1e348:	bne	1e32c <__assert_fail@plt+0xbd38>
   1e34c:	mov	r0, r4
   1e350:	pop	{r4, r5, r6, pc}
   1e354:	bl	3a138 <__assert_fail@plt+0x27b44>
   1e358:	mov	r3, #0
   1e35c:	strb	r3, [r4, #20]
   1e360:	cmp	r0, #0
   1e364:	str	r0, [r4, #16]
   1e368:	beq	1e310 <__assert_fail@plt+0xbd1c>
   1e36c:	b	1e328 <__assert_fail@plt+0xbd34>
   1e370:	andeq	r0, r5, ip, lsr r6
   1e374:			; <UNDEFINED> instruction: 0x00064cb8
   1e378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e37c:	sub	sp, sp, #124	; 0x7c
   1e380:	mov	r8, #0
   1e384:	str	r0, [sp, #4]
   1e388:	mov	r0, r8
   1e38c:	str	r8, [sp, #12]
   1e390:	bl	3a138 <__assert_fail@plt+0x27b44>
   1e394:	subs	r6, r0, #0
   1e398:	beq	1e468 <__assert_fail@plt+0xbe74>
   1e39c:	ldr	fp, [pc, #204]	; 1e470 <__assert_fail@plt+0xbe7c>
   1e3a0:	mov	sl, r8
   1e3a4:	mov	r4, r6
   1e3a8:	b	1e3c8 <__assert_fail@plt+0xbdd4>
   1e3ac:	add	r5, r9, r5
   1e3b0:	mov	sl, r7
   1e3b4:	strd	r2, [r5, #-8]
   1e3b8:	mov	r8, r9
   1e3bc:	ldr	r4, [r4, #28]
   1e3c0:	cmp	r4, #0
   1e3c4:	beq	1e42c <__assert_fail@plt+0xbe38>
   1e3c8:	add	r7, sl, #1
   1e3cc:	add	r2, sp, #12
   1e3d0:	lsl	r5, r7, #3
   1e3d4:	mov	r1, r5
   1e3d8:	mov	r0, r8
   1e3dc:	bl	24bb8 <__assert_fail@plt+0x125c4>
   1e3e0:	subs	r9, r0, #0
   1e3e4:	beq	1e458 <__assert_fail@plt+0xbe64>
   1e3e8:	ldrd	r2, [r4, #16]
   1e3ec:	mvn	r1, #0
   1e3f0:	mvn	r0, #0
   1e3f4:	cmp	r3, r1
   1e3f8:	cmpeq	r2, r0
   1e3fc:	bne	1e3ac <__assert_fail@plt+0xbdb8>
   1e400:	add	r0, sp, #16
   1e404:	bl	1ac3c <__assert_fail@plt+0x8648>
   1e408:	ldr	r3, [fp, #52]	; 0x34
   1e40c:	add	r1, sp, #16
   1e410:	ldr	r0, [r4, #4]
   1e414:	blx	r3
   1e418:	cmp	r0, #0
   1e41c:	bne	1e3b8 <__assert_fail@plt+0xbdc4>
   1e420:	ldrd	r2, [sp, #16]
   1e424:	strd	r2, [r4, #16]
   1e428:	b	1e3ac <__assert_fail@plt+0xbdb8>
   1e42c:	mov	r0, r6
   1e430:	ldr	r4, [r0, #28]
   1e434:	bl	3aa8c <__assert_fail@plt+0x28498>
   1e438:	subs	r0, r4, #0
   1e43c:	bne	1e430 <__assert_fail@plt+0xbe3c>
   1e440:	cmp	r9, #0
   1e444:	ldrne	r3, [sp, #4]
   1e448:	strne	sl, [r3]
   1e44c:	mov	r0, r8
   1e450:	add	sp, sp, #124	; 0x7c
   1e454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e458:	mov	r0, r8
   1e45c:	bl	376d0 <__assert_fail@plt+0x250dc>
   1e460:	mov	r8, #0
   1e464:	b	1e3bc <__assert_fail@plt+0xbdc8>
   1e468:	mov	r8, r6
   1e46c:	b	1e44c <__assert_fail@plt+0xbe58>
   1e470:	andeq	r4, r6, ip, ror #28
   1e474:	andeq	r0, r0, r0
   1e478:	subs	r0, r1, #0
   1e47c:	bxeq	lr
   1e480:	ldr	r3, [r2]
   1e484:	ldr	r1, [r0, r3, lsl #2]
   1e488:	cmp	r1, #0
   1e48c:	addne	r3, r3, #1
   1e490:	ldrne	ip, [pc, #16]	; 1e4a8 <__assert_fail@plt+0xbeb4>
   1e494:	strne	r3, [r2]
   1e498:	movne	r0, #1
   1e49c:	strne	r1, [ip, #76]	; 0x4c
   1e4a0:	moveq	r0, r1
   1e4a4:	bx	lr
   1e4a8:	andeq	r4, r6, ip, ror #28
   1e4ac:	b	3471c <__assert_fail@plt+0x22128>
   1e4b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1e4b4:	sub	sp, sp, #12
   1e4b8:	ldr	r0, [pc, #188]	; 1e57c <__assert_fail@plt+0xbf88>
   1e4bc:	bl	25500 <__assert_fail@plt+0x12f0c>
   1e4c0:	ldr	r4, [pc, #184]	; 1e580 <__assert_fail@plt+0xbf8c>
   1e4c4:	mov	r2, #5
   1e4c8:	ldr	r1, [pc, #180]	; 1e584 <__assert_fail@plt+0xbf90>
   1e4cc:	mov	r0, #0
   1e4d0:	bl	120b4 <dcgettext@plt>
   1e4d4:	bl	11f64 <printf@plt>
   1e4d8:	ldr	r0, [pc, #168]	; 1e588 <__assert_fail@plt+0xbf94>
   1e4dc:	bl	11f64 <printf@plt>
   1e4e0:	ldrb	r1, [r4, #56]	; 0x38
   1e4e4:	ldr	r2, [pc, #160]	; 1e58c <__assert_fail@plt+0xbf98>
   1e4e8:	ldr	r3, [pc, #160]	; 1e590 <__assert_fail@plt+0xbf9c>
   1e4ec:	cmp	r1, #0
   1e4f0:	movne	r1, r2
   1e4f4:	moveq	r1, r3
   1e4f8:	ldr	r0, [pc, #148]	; 1e594 <__assert_fail@plt+0xbfa0>
   1e4fc:	bl	11f64 <printf@plt>
   1e500:	ldr	r0, [pc, #144]	; 1e598 <__assert_fail@plt+0xbfa4>
   1e504:	bl	11f64 <printf@plt>
   1e508:	bl	11f28 <is_selinux_enabled@plt>
   1e50c:	cmp	r0, #0
   1e510:	ble	1e51c <__assert_fail@plt+0xbf28>
   1e514:	ldr	r0, [pc, #128]	; 1e59c <__assert_fail@plt+0xbfa8>
   1e518:	bl	11f64 <printf@plt>
   1e51c:	add	r0, sp, #8
   1e520:	mov	r3, #0
   1e524:	str	r3, [r0, #-4]!
   1e528:	bl	138d0 <__assert_fail@plt+0x12dc>
   1e52c:	cmp	r0, #0
   1e530:	bne	1e550 <__assert_fail@plt+0xbf5c>
   1e534:	ldrh	r1, [r4, #68]	; 0x44
   1e538:	ldr	r0, [pc, #96]	; 1e5a0 <__assert_fail@plt+0xbfac>
   1e53c:	bl	11f64 <printf@plt>
   1e540:	mov	r0, #10
   1e544:	bl	12384 <putchar@plt>
   1e548:	mov	r0, #0
   1e54c:	bl	122d0 <exit@plt>
   1e550:	ldr	r0, [pc, #76]	; 1e5a4 <__assert_fail@plt+0xbfb0>
   1e554:	bl	11f64 <printf@plt>
   1e558:	ldr	r3, [sp, #4]
   1e55c:	tst	r3, #512	; 0x200
   1e560:	bne	1e570 <__assert_fail@plt+0xbf7c>
   1e564:	ldr	r0, [pc, #60]	; 1e5a8 <__assert_fail@plt+0xbfb4>
   1e568:	bl	11f64 <printf@plt>
   1e56c:	b	1e534 <__assert_fail@plt+0xbf40>
   1e570:	ldr	r0, [pc, #52]	; 1e5ac <__assert_fail@plt+0xbfb8>
   1e574:	bl	11f64 <printf@plt>
   1e578:	b	1e564 <__assert_fail@plt+0xbf70>
   1e57c:	andeq	lr, r4, r4, lsl r2
   1e580:	andeq	r4, r6, ip, ror #28
   1e584:	andeq	r0, r5, ip, lsl ip
   1e588:	andeq	r0, r5, r0, lsr ip
   1e58c:	andeq	r0, r5, r8, lsl #24
   1e590:	andeq	r0, r5, r0, lsl ip
   1e594:	andeq	r0, r5, r8, lsr ip
   1e598:	andeq	r0, r5, r8, asr #24
   1e59c:	andeq	r0, r5, ip, asr ip
   1e5a0:	andeq	r0, r5, ip, ror ip
   1e5a4:	andeq	r0, r5, r8, ror #24
   1e5a8:	andeq	r0, r5, r8, lsl #25
   1e5ac:	andeq	r0, r5, r0, ror ip
   1e5b0:	push	{r4, lr}
   1e5b4:	mov	r0, #0
   1e5b8:	bl	1aa08 <__assert_fail@plt+0x8414>
   1e5bc:	push	{r4, lr}
   1e5c0:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   1e5c4:	mov	r3, #0
   1e5c8:	mov	r2, #1065353216	; 0x3f800000
   1e5cc:	strb	r3, [r0, #19]
   1e5d0:	strb	r3, [r0, #18]
   1e5d4:	str	r2, [r0, #28]
   1e5d8:	mov	r0, #1
   1e5dc:	pop	{r4, pc}
   1e5e0:	push	{r4, lr}
   1e5e4:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   1e5e8:	mov	r2, #1065353216	; 0x3f800000
   1e5ec:	mov	r3, r0
   1e5f0:	mov	r0, #1
   1e5f4:	str	r0, [r3, #16]
   1e5f8:	str	r2, [r3, #28]
   1e5fc:	pop	{r4, pc}
   1e600:	push	{r4, lr}
   1e604:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   1e608:	ldr	r2, [pc, #36]	; 1e634 <__assert_fail@plt+0xc040>
   1e60c:	ldrb	r2, [r2]
   1e610:	cmp	r2, #0
   1e614:	mov	r3, r0
   1e618:	strbeq	r2, [r0, #19]
   1e61c:	strbeq	r2, [r0, #18]
   1e620:	mov	r0, #1
   1e624:	mov	r2, #0
   1e628:	strb	r0, [r3, #16]
   1e62c:	strb	r2, [r3, #17]
   1e630:	pop	{r4, pc}
   1e634:	andeq	r4, r6, ip, ror #28
   1e638:	push	{r4, lr}
   1e63c:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   1e640:	ldr	r3, [pc, #8]	; 1e650 <__assert_fail@plt+0xc05c>
   1e644:	str	r3, [r0, #28]
   1e648:	mov	r0, #1
   1e64c:	pop	{r4, pc}
   1e650:	bcc	fe0e3014 <stdout@@GLIBC_2.4+0xfe07eac0>
   1e654:	push	{r4, lr}
   1e658:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   1e65c:	ldr	r2, [pc, #48]	; 1e694 <__assert_fail@plt+0xc0a0>
   1e660:	vldr	s14, [pc, #36]	; 1e68c <__assert_fail@plt+0xc098>
   1e664:	vldr	s15, [pc, #36]	; 1e690 <__assert_fail@plt+0xc09c>
   1e668:	ldr	r1, [r0]
   1e66c:	mov	r3, r0
   1e670:	cmp	r1, r2
   1e674:	mov	r2, #0
   1e678:	vmovne.f32	s15, s14
   1e67c:	str	r2, [r0, #16]
   1e680:	mov	r0, #1
   1e684:	vstr	s15, [r3, #28]
   1e688:	pop	{r4, pc}
   1e68c:	svccc	0x00666666
   1e690:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1e694:	andeq	r4, r1, ip, lsl #27
   1e698:	push	{r4, lr}
   1e69c:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   1e6a0:	ldr	r3, [pc, #8]	; 1e6b0 <__assert_fail@plt+0xc0bc>
   1e6a4:	str	r3, [r0, #28]
   1e6a8:	mov	r0, #1
   1e6ac:	pop	{r4, pc}
   1e6b0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e6b4:	push	{r4, lr}
   1e6b8:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   1e6bc:	ldr	r3, [pc, #28]	; 1e6e0 <__assert_fail@plt+0xc0ec>
   1e6c0:	ldr	ip, [pc, #28]	; 1e6e4 <__assert_fail@plt+0xc0f0>
   1e6c4:	mov	r1, #1065353216	; 0x3f800000
   1e6c8:	mov	r2, #0
   1e6cc:	strb	r2, [r3]
   1e6d0:	str	ip, [r0, #16]
   1e6d4:	str	r1, [r0, #28]
   1e6d8:	mov	r0, #1
   1e6dc:	pop	{r4, pc}
   1e6e0:	andeq	r4, r6, ip, ror #28
   1e6e4:	andeq	r0, r0, r1, lsl #2
   1e6e8:	push	{r4, r5, r6, r7, r8, lr}
   1e6ec:	sub	sp, sp, #8
   1e6f0:	ldr	r5, [pc, #760]	; 1e9f0 <__assert_fail@plt+0xc3fc>
   1e6f4:	ldr	r7, [pc, #760]	; 1e9f4 <__assert_fail@plt+0xc400>
   1e6f8:	ldr	r3, [pc, #760]	; 1e9f8 <__assert_fail@plt+0xc404>
   1e6fc:	cmp	r5, r7
   1e700:	ldr	r6, [pc, #756]	; 1e9fc <__assert_fail@plt+0xc408>
   1e704:	moveq	r6, r3
   1e708:	subs	r4, r1, #0
   1e70c:	beq	1e8ac <__assert_fail@plt+0xc2b8>
   1e710:	ldr	r3, [r2]
   1e714:	ldr	r4, [r4, r3, lsl #2]
   1e718:	cmp	r4, #0
   1e71c:	beq	1e8ac <__assert_fail@plt+0xc2b8>
   1e720:	add	r3, r3, #1
   1e724:	str	r3, [r2]
   1e728:	ldrb	r8, [r4]
   1e72c:	cmp	r8, #0
   1e730:	beq	1e9b0 <__assert_fail@plt+0xc3bc>
   1e734:	mov	r2, r4
   1e738:	mov	r1, r5
   1e73c:	bl	1a958 <__assert_fail@plt+0x8364>
   1e740:	cmp	r5, r7
   1e744:	movne	r2, #1
   1e748:	moveq	r2, #0
   1e74c:	moveq	r3, #1
   1e750:	movne	r3, #0
   1e754:	mov	r1, #0
   1e758:	mov	r7, r4
   1e75c:	str	r1, [r0, #28]
   1e760:	strb	r2, [r0, #19]
   1e764:	strb	r3, [r0, #18]
   1e768:	ldrb	r5, [r4]
   1e76c:	cmp	r5, #0
   1e770:	beq	1e974 <__assert_fail@plt+0xc380>
   1e774:	vldr	s7, [pc, #600]	; 1e9d4 <__assert_fail@plt+0xc3e0>
   1e778:	vldr	s8, [pc, #600]	; 1e9d8 <__assert_fail@plt+0xc3e4>
   1e77c:	vldr	s9, [pc, #600]	; 1e9dc <__assert_fail@plt+0xc3e8>
   1e780:	vldr	s10, [pc, #600]	; 1e9e0 <__assert_fail@plt+0xc3ec>
   1e784:	vldr	s11, [pc, #600]	; 1e9e4 <__assert_fail@plt+0xc3f0>
   1e788:	vldr	s12, [pc, #600]	; 1e9e8 <__assert_fail@plt+0xc3f4>
   1e78c:	vldr	s13, [pc, #600]	; 1e9ec <__assert_fail@plt+0xc3f8>
   1e790:	mov	r8, #2
   1e794:	mov	lr, #3
   1e798:	mov	ip, #4
   1e79c:	mov	r1, #5
   1e7a0:	mov	r2, #6
   1e7a4:	sub	r3, r5, #68	; 0x44
   1e7a8:	cmp	r3, #47	; 0x2f
   1e7ac:	ldrls	pc, [pc, r3, lsl #2]
   1e7b0:	b	1e92c <__assert_fail@plt+0xc338>
   1e7b4:	andeq	lr, r1, r4, asr #17
   1e7b8:	andeq	lr, r1, ip, lsr #18
   1e7bc:	andeq	lr, r1, ip, lsr #18
   1e7c0:	andeq	lr, r1, ip, lsr #18
   1e7c4:	andeq	lr, r1, ip, lsr #18
   1e7c8:	andeq	lr, r1, ip, lsr #18
   1e7cc:	andeq	lr, r1, ip, lsr #18
   1e7d0:	andeq	lr, r1, ip, lsr #18
   1e7d4:	andeq	lr, r1, ip, lsr #18
   1e7d8:	andeq	lr, r1, ip, lsr #18
   1e7dc:	andeq	lr, r1, ip, lsr #18
   1e7e0:	andeq	lr, r1, ip, lsr #18
   1e7e4:	andeq	lr, r1, ip, lsr #18
   1e7e8:	andeq	lr, r1, ip, lsr #18
   1e7ec:	andeq	lr, r1, ip, lsr #18
   1e7f0:	andeq	lr, r1, ip, lsr #18
   1e7f4:	andeq	lr, r1, ip, lsr #18
   1e7f8:	andeq	lr, r1, ip, lsr #18
   1e7fc:	andeq	lr, r1, ip, lsr #18
   1e800:	andeq	lr, r1, ip, lsr #18
   1e804:	andeq	lr, r1, ip, lsr #18
   1e808:	andeq	lr, r1, ip, lsr #18
   1e80c:	andeq	lr, r1, ip, lsr #18
   1e810:	andeq	lr, r1, ip, lsr #18
   1e814:	andeq	lr, r1, ip, lsr #18
   1e818:	andeq	lr, r1, ip, lsr #18
   1e81c:	andeq	lr, r1, ip, lsr #18
   1e820:	andeq	lr, r1, ip, lsr #18
   1e824:	andeq	lr, r1, ip, lsr #18
   1e828:	andeq	lr, r1, ip, lsr #18
   1e82c:			; <UNDEFINED> instruction: 0x0001e8b8
   1e830:	andeq	lr, r1, r4, ror r8
   1e834:	andeq	lr, r1, r0, lsr #18
   1e838:	andeq	lr, r1, ip, lsr #18
   1e83c:	andeq	lr, r1, r4, lsl r9
   1e840:	andeq	lr, r1, ip, lsr #18
   1e844:	andeq	lr, r1, ip, lsr #18
   1e848:	andeq	lr, r1, ip, lsr #18
   1e84c:	andeq	lr, r1, ip, lsr #18
   1e850:	andeq	lr, r1, ip, lsr #18
   1e854:	andeq	lr, r1, r8, lsl #18
   1e858:	andeq	lr, r1, ip, lsr #18
   1e85c:	andeq	lr, r1, ip, lsr #18
   1e860:	andeq	lr, r1, ip, lsr #18
   1e864:	strdeq	lr, [r1], -ip
   1e868:	andeq	lr, r1, ip, lsr #18
   1e86c:	andeq	lr, r1, ip, lsr #18
   1e870:	strdeq	lr, [r1], -r0
   1e874:	vmov.f32	s14, s13
   1e878:	mov	r3, #1
   1e87c:	add	r3, r0, r3
   1e880:	ldrb	r5, [r3, #40]	; 0x28
   1e884:	cmp	r5, #0
   1e888:	bne	1e97c <__assert_fail@plt+0xc388>
   1e88c:	vldr	s15, [r0, #28]
   1e890:	mov	r4, #1
   1e894:	vadd.f32	s15, s15, s14
   1e898:	vstr	s15, [r0, #28]
   1e89c:	strb	r4, [r3, #40]	; 0x28
   1e8a0:	ldrb	r3, [r7, #1]
   1e8a4:	cmp	r3, #0
   1e8a8:	bne	1e938 <__assert_fail@plt+0xc344>
   1e8ac:	mov	r0, r4
   1e8b0:	add	sp, sp, #8
   1e8b4:	pop	{r4, r5, r6, r7, r8, pc}
   1e8b8:	vmov.f32	s14, s12
   1e8bc:	mov	r3, #0
   1e8c0:	b	1e87c <__assert_fail@plt+0xc288>
   1e8c4:	ldr	r1, [pc, #308]	; 1ea00 <__assert_fail@plt+0xc40c>
   1e8c8:	mov	r2, #5
   1e8cc:	mov	r0, #0
   1e8d0:	bl	120b4 <dcgettext@plt>
   1e8d4:	ldrb	r2, [r7]
   1e8d8:	mov	r3, r6
   1e8dc:	mov	r1, #0
   1e8e0:	str	r2, [sp]
   1e8e4:	mov	r2, r0
   1e8e8:	mov	r0, #1
   1e8ec:	bl	121ec <error@plt>
   1e8f0:	vmov.f32	s14, s11
   1e8f4:	mov	r3, r2
   1e8f8:	b	1e87c <__assert_fail@plt+0xc288>
   1e8fc:	vmov.f32	s14, s10
   1e900:	mov	r3, r1
   1e904:	b	1e87c <__assert_fail@plt+0xc288>
   1e908:	vmov.f32	s14, s9
   1e90c:	mov	r3, ip
   1e910:	b	1e87c <__assert_fail@plt+0xc288>
   1e914:	vmov.f32	s14, s8
   1e918:	mov	r3, lr
   1e91c:	b	1e87c <__assert_fail@plt+0xc288>
   1e920:	vmov.f32	s14, s7
   1e924:	mov	r3, r8
   1e928:	b	1e87c <__assert_fail@plt+0xc288>
   1e92c:	mov	r2, #5
   1e930:	ldr	r1, [pc, #204]	; 1ea04 <__assert_fail@plt+0xc410>
   1e934:	b	1e8cc <__assert_fail@plt+0xc2d8>
   1e938:	cmp	r3, #44	; 0x2c
   1e93c:	bne	1e9a4 <__assert_fail@plt+0xc3b0>
   1e940:	ldrb	r5, [r7, #2]
   1e944:	add	r7, r7, #2
   1e948:	cmp	r5, #0
   1e94c:	bne	1e7a4 <__assert_fail@plt+0xc1b0>
   1e950:	ldr	r1, [pc, #176]	; 1ea08 <__assert_fail@plt+0xc414>
   1e954:	mov	r2, #5
   1e958:	mov	r0, r5
   1e95c:	bl	120b4 <dcgettext@plt>
   1e960:	mov	r3, r6
   1e964:	mov	r1, r5
   1e968:	mov	r2, r0
   1e96c:	mov	r0, r4
   1e970:	bl	121ec <error@plt>
   1e974:	mov	r4, #1
   1e978:	b	1e8ac <__assert_fail@plt+0xc2b8>
   1e97c:	mov	r2, #5
   1e980:	ldr	r1, [pc, #132]	; 1ea0c <__assert_fail@plt+0xc418>
   1e984:	mov	r0, #0
   1e988:	bl	120b4 <dcgettext@plt>
   1e98c:	ldrb	r3, [r7]
   1e990:	mov	r1, #0
   1e994:	str	r6, [sp]
   1e998:	mov	r2, r0
   1e99c:	mov	r0, #1
   1e9a0:	bl	121ec <error@plt>
   1e9a4:	mov	r2, #5
   1e9a8:	ldr	r1, [pc, #96]	; 1ea10 <__assert_fail@plt+0xc41c>
   1e9ac:	b	1e958 <__assert_fail@plt+0xc364>
   1e9b0:	mov	r2, #5
   1e9b4:	ldr	r1, [pc, #88]	; 1ea14 <__assert_fail@plt+0xc420>
   1e9b8:	mov	r0, r8
   1e9bc:	bl	120b4 <dcgettext@plt>
   1e9c0:	mov	r3, r6
   1e9c4:	mov	r1, r8
   1e9c8:	mov	r2, r0
   1e9cc:	mov	r0, #1
   1e9d0:	bl	121ec <error@plt>
   1e9d4:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1e9d8:	svccc	0x00600000
   1e9dc:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1e9e0:	usatcc	r7, #29, lr, asr #16
   1e9e4:			; <UNDEFINED> instruction: 0x378560fd
   1e9e8:	bcc	1a50ca0 <stdout@@GLIBC_2.4+0x19ec74c>
   1e9ec:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1e9f0:	andeq	r4, r1, ip, ror #31
   1e9f4:	strdeq	r5, [r1], -r4
   1e9f8:	andeq	r0, r5, ip, lsl #25
   1e9fc:	muleq	r5, r4, ip
   1ea00:	ldrdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   1ea04:	andeq	r0, r5, r8, lsr sp
   1ea08:	andeq	r0, r5, r0, asr #27
   1ea0c:	andeq	r0, r5, r4, asr sp
   1ea10:	andeq	r0, r5, ip, lsl #27
   1ea14:	muleq	r5, ip, ip
   1ea18:	cmp	r1, #0
   1ea1c:	beq	1ea8c <__assert_fail@plt+0xc498>
   1ea20:	ldr	r3, [r2]
   1ea24:	push	{r4, r5, r6, lr}
   1ea28:	ldr	r4, [r1, r3, lsl #2]
   1ea2c:	cmp	r4, #0
   1ea30:	beq	1ea94 <__assert_fail@plt+0xc4a0>
   1ea34:	add	r3, r3, #1
   1ea38:	str	r3, [r2]
   1ea3c:	mov	r6, r0
   1ea40:	mov	r0, r4
   1ea44:	bl	11f1c <getpwnam@plt>
   1ea48:	mov	r5, r0
   1ea4c:	bl	1245c <endpwent@plt>
   1ea50:	cmp	r5, #0
   1ea54:	beq	1ea9c <__assert_fail@plt+0xc4a8>
   1ea58:	ldr	r5, [r5, #8]
   1ea5c:	mov	r1, r4
   1ea60:	mov	r0, r6
   1ea64:	bl	1a98c <__assert_fail@plt+0x8398>
   1ea68:	vldr	s14, [pc, #200]	; 1eb38 <__assert_fail@plt+0xc544>
   1ea6c:	vldr	s15, [pc, #200]	; 1eb3c <__assert_fail@plt+0xc548>
   1ea70:	cmp	r5, #100	; 0x64
   1ea74:	vmovcs.f32	s15, s14
   1ea78:	mov	r3, r0
   1ea7c:	str	r5, [r0, #40]	; 0x28
   1ea80:	mov	r0, #1
   1ea84:	vstr	s15, [r3, #28]
   1ea88:	pop	{r4, r5, r6, pc}
   1ea8c:	mov	r0, r1
   1ea90:	bx	lr
   1ea94:	mov	r0, r4
   1ea98:	pop	{r4, r5, r6, pc}
   1ea9c:	ldr	r1, [pc, #156]	; 1eb40 <__assert_fail@plt+0xc54c>
   1eaa0:	mov	r0, r4
   1eaa4:	bl	125e8 <strspn@plt>
   1eaa8:	cmp	r0, #0
   1eaac:	beq	1ead4 <__assert_fail@plt+0xc4e0>
   1eab0:	ldrb	r3, [r4, r0]
   1eab4:	cmp	r3, #0
   1eab8:	bne	1ead4 <__assert_fail@plt+0xc4e0>
   1eabc:	ldr	r3, [pc, #128]	; 1eb44 <__assert_fail@plt+0xc550>
   1eac0:	mov	r0, r4
   1eac4:	ldr	r1, [r3, #72]	; 0x48
   1eac8:	bl	26544 <__assert_fail@plt+0x13f50>
   1eacc:	mov	r5, r0
   1ead0:	b	1ea5c <__assert_fail@plt+0xc468>
   1ead4:	ldrb	r5, [r4]
   1ead8:	mov	r2, #5
   1eadc:	cmp	r5, #0
   1eae0:	beq	1eb1c <__assert_fail@plt+0xc528>
   1eae4:	ldr	r1, [pc, #92]	; 1eb48 <__assert_fail@plt+0xc554>
   1eae8:	mov	r0, #0
   1eaec:	bl	120b4 <dcgettext@plt>
   1eaf0:	ldr	r3, [pc, #76]	; 1eb44 <__assert_fail@plt+0xc550>
   1eaf4:	mov	r2, r4
   1eaf8:	ldr	r1, [r3, #72]	; 0x48
   1eafc:	mov	r5, r0
   1eb00:	mov	r0, #0
   1eb04:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1eb08:	mov	r2, r5
   1eb0c:	mov	r1, #0
   1eb10:	mov	r3, r0
   1eb14:	mov	r0, #1
   1eb18:	bl	121ec <error@plt>
   1eb1c:	ldr	r1, [pc, #40]	; 1eb4c <__assert_fail@plt+0xc558>
   1eb20:	mov	r0, r5
   1eb24:	bl	120b4 <dcgettext@plt>
   1eb28:	mov	r1, r5
   1eb2c:	mov	r2, r0
   1eb30:	mov	r0, #1
   1eb34:	bl	121ec <error@plt>
   1eb38:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1eb3c:	svccc	0x007d70a4
   1eb40:	andeq	r0, r5, r0, lsl lr
   1eb44:	andeq	r4, r6, ip, ror #28
   1eb48:	andeq	r0, r5, ip, lsl lr
   1eb4c:	andeq	r0, r5, r0, asr #28
   1eb50:	push	{r4, lr}
   1eb54:	mov	r1, #0
   1eb58:	bl	1a98c <__assert_fail@plt+0x8398>
   1eb5c:	ldr	r3, [pc, #8]	; 1eb6c <__assert_fail@plt+0xc578>
   1eb60:	str	r3, [r0, #28]
   1eb64:	mov	r0, #1
   1eb68:	pop	{r4, pc}
   1eb6c:	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
   1eb70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb74:	subs	r6, r1, #0
   1eb78:	sub	sp, sp, #36	; 0x24
   1eb7c:	beq	1ee94 <__assert_fail@plt+0xc8a0>
   1eb80:	ldr	r3, [r2]
   1eb84:	ldr	r4, [r6, r3, lsl #2]
   1eb88:	cmp	r4, #0
   1eb8c:	beq	1eeb8 <__assert_fail@plt+0xc8c4>
   1eb90:	mov	r7, r0
   1eb94:	mov	r0, r4
   1eb98:	mov	r5, r2
   1eb9c:	bl	12300 <strlen@plt>
   1eba0:	subs	r8, r0, #0
   1eba4:	beq	1eef8 <__assert_fail@plt+0xc904>
   1eba8:	sub	r8, r8, #1
   1ebac:	ldrb	fp, [r4, r8]
   1ebb0:	sub	r3, fp, #48	; 0x30
   1ebb4:	cmp	r3, #71	; 0x47
   1ebb8:	ldrls	pc, [pc, r3, lsl #2]
   1ebbc:	b	1ee54 <__assert_fail@plt+0xc860>
   1ebc0:	andeq	lr, r1, r0, ror #25
   1ebc4:	andeq	lr, r1, r0, ror #25
   1ebc8:	andeq	lr, r1, r0, ror #25
   1ebcc:	andeq	lr, r1, r0, ror #25
   1ebd0:	andeq	lr, r1, r0, ror #25
   1ebd4:	andeq	lr, r1, r0, ror #25
   1ebd8:	andeq	lr, r1, r0, ror #25
   1ebdc:	andeq	lr, r1, r0, ror #25
   1ebe0:	andeq	lr, r1, r0, ror #25
   1ebe4:	andeq	lr, r1, r0, ror #25
   1ebe8:	andeq	lr, r1, r4, asr lr
   1ebec:	andeq	lr, r1, r4, asr lr
   1ebf0:	andeq	lr, r1, r4, asr lr
   1ebf4:	andeq	lr, r1, r4, asr lr
   1ebf8:	andeq	lr, r1, r4, asr lr
   1ebfc:	andeq	lr, r1, r4, asr lr
   1ec00:	andeq	lr, r1, r4, asr lr
   1ec04:	andeq	lr, r1, r4, asr lr
   1ec08:	andeq	lr, r1, r4, asr lr
   1ec0c:	andeq	lr, r1, r4, asr lr
   1ec10:	andeq	lr, r1, r4, asr lr
   1ec14:	andeq	lr, r1, r4, asr lr
   1ec18:	andeq	lr, r1, r4, asr lr
   1ec1c:			; <UNDEFINED> instruction: 0x0001edb0
   1ec20:	andeq	lr, r1, r4, asr lr
   1ec24:	andeq	lr, r1, r4, asr lr
   1ec28:	andeq	lr, r1, r4, asr lr
   1ec2c:	andeq	lr, r1, r4, asr lr
   1ec30:	andeq	lr, r1, r4, asr lr
   1ec34:	andeq	lr, r1, ip, lsr lr
   1ec38:	andeq	lr, r1, r4, asr lr
   1ec3c:	andeq	lr, r1, r4, asr lr
   1ec40:	andeq	lr, r1, r4, asr lr
   1ec44:	andeq	lr, r1, r4, asr lr
   1ec48:	andeq	lr, r1, r4, asr lr
   1ec4c:	andeq	lr, r1, r4, asr lr
   1ec50:	andeq	lr, r1, r4, asr lr
   1ec54:	andeq	lr, r1, r4, asr lr
   1ec58:	andeq	lr, r1, r4, asr lr
   1ec5c:	andeq	lr, r1, r4, asr lr
   1ec60:	andeq	lr, r1, r4, asr lr
   1ec64:	andeq	lr, r1, r4, asr lr
   1ec68:	andeq	lr, r1, r4, asr lr
   1ec6c:	andeq	lr, r1, r4, asr lr
   1ec70:	andeq	lr, r1, r4, asr lr
   1ec74:	andeq	lr, r1, r4, asr lr
   1ec78:	andeq	lr, r1, r4, asr lr
   1ec7c:	andeq	lr, r1, r4, asr lr
   1ec80:	andeq	lr, r1, r4, asr lr
   1ec84:	andeq	lr, r1, r4, asr lr
   1ec88:	ldrdeq	lr, [r1], -ip
   1ec8c:	strdeq	lr, [r1], -r4
   1ec90:	andeq	lr, r1, r4, asr lr
   1ec94:	andeq	lr, r1, r4, asr lr
   1ec98:	andeq	lr, r1, r4, asr lr
   1ec9c:	andeq	lr, r1, r4, asr lr
   1eca0:	andeq	lr, r1, r4, asr lr
   1eca4:	andeq	lr, r1, r4, asr lr
   1eca8:	andeq	lr, r1, r4, asr lr
   1ecac:	andeq	lr, r1, ip, lsl #28
   1ecb0:	andeq	lr, r1, r4, asr lr
   1ecb4:	andeq	lr, r1, r4, asr lr
   1ecb8:	andeq	lr, r1, r4, asr lr
   1ecbc:	andeq	lr, r1, r4, asr lr
   1ecc0:	andeq	lr, r1, r4, asr lr
   1ecc4:	andeq	lr, r1, r4, asr lr
   1ecc8:	andeq	lr, r1, r4, asr lr
   1eccc:	andeq	lr, r1, r4, asr lr
   1ecd0:	andeq	lr, r1, r4, asr lr
   1ecd4:	andeq	lr, r1, r4, asr lr
   1ecd8:	andeq	lr, r1, r4, asr lr
   1ecdc:	andeq	lr, r1, r4, lsr #28
   1ece0:	mov	r3, #0
   1ece4:	mov	r9, #512	; 0x200
   1ece8:	mov	sl, r9
   1ecec:	mov	fp, r3
   1ecf0:	str	r3, [sp, #12]
   1ecf4:	ldrb	r3, [r4]
   1ecf8:	cmp	r3, #43	; 0x2b
   1ecfc:	beq	1edd0 <__assert_fail@plt+0xc7dc>
   1ed00:	cmp	r3, #45	; 0x2d
   1ed04:	addeq	r0, r4, #1
   1ed08:	moveq	r8, #1
   1ed0c:	movne	r0, r4
   1ed10:	movne	r8, #2
   1ed14:	ldr	r3, [pc, #512]	; 1ef1c <__assert_fail@plt+0xc928>
   1ed18:	add	r1, sp, #20
   1ed1c:	str	r3, [sp]
   1ed20:	mov	r2, #10
   1ed24:	add	r3, sp, #24
   1ed28:	bl	36340 <__assert_fail@plt+0x23d4c>
   1ed2c:	subs	r6, r0, #0
   1ed30:	bne	1eec0 <__assert_fail@plt+0xc8cc>
   1ed34:	mov	r1, r4
   1ed38:	mov	r0, r7
   1ed3c:	bl	1a98c <__assert_fail@plt+0x8398>
   1ed40:	ldr	r2, [sp, #24]
   1ed44:	ldr	r1, [sp, #28]
   1ed48:	mov	ip, #1
   1ed4c:	cmp	r8, #0
   1ed50:	str	r8, [r0, #40]	; 0x28
   1ed54:	str	sl, [r0, #44]	; 0x2c
   1ed58:	strb	r6, [r0, #19]
   1ed5c:	strb	ip, [r0, #18]
   1ed60:	str	r2, [r0, #48]	; 0x30
   1ed64:	str	r1, [r0, #52]	; 0x34
   1ed68:	bne	1ee80 <__assert_fail@plt+0xc88c>
   1ed6c:	ldr	r3, [sp, #12]
   1ed70:	vldr	s15, [pc, #412]	; 1ef14 <__assert_fail@plt+0xc920>
   1ed74:	vldr	s14, [pc, #412]	; 1ef18 <__assert_fail@plt+0xc924>
   1ed78:	mul	r6, r2, r3
   1ed7c:	umull	r2, r3, r2, r9
   1ed80:	mla	r9, r9, r1, r6
   1ed84:	add	r3, r9, r3
   1ed88:	cmp	r3, #0
   1ed8c:	cmpeq	r2, #20480	; 0x5000
   1ed90:	vmovhi.f32	s15, s14
   1ed94:	vstr	s15, [r0, #28]
   1ed98:	ldr	r3, [r5]
   1ed9c:	mov	r0, #1
   1eda0:	add	r3, r3, r0
   1eda4:	str	r3, [r5]
   1eda8:	add	sp, sp, #36	; 0x24
   1edac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1edb0:	mov	r6, #0
   1edb4:	strb	r6, [r4, r8]
   1edb8:	ldrb	r3, [r4]
   1edbc:	mov	r9, #1073741824	; 0x40000000
   1edc0:	str	r6, [sp, #12]
   1edc4:	cmp	r3, #43	; 0x2b
   1edc8:	mov	sl, r9
   1edcc:	bne	1ed00 <__assert_fail@plt+0xc70c>
   1edd0:	add	r0, r4, #1
   1edd4:	mov	r8, #0
   1edd8:	b	1ed14 <__assert_fail@plt+0xc720>
   1eddc:	mov	r6, #0
   1ede0:	mov	r9, #512	; 0x200
   1ede4:	strb	r6, [r4, r8]
   1ede8:	str	r6, [sp, #12]
   1edec:	mov	sl, r9
   1edf0:	b	1ecf4 <__assert_fail@plt+0xc700>
   1edf4:	mov	r6, #0
   1edf8:	mov	r9, #1
   1edfc:	strb	r6, [r4, r8]
   1ee00:	str	r6, [sp, #12]
   1ee04:	mov	sl, r9
   1ee08:	b	1ecf4 <__assert_fail@plt+0xc700>
   1ee0c:	mov	r6, #0
   1ee10:	mov	r9, #1024	; 0x400
   1ee14:	strb	r6, [r4, r8]
   1ee18:	str	r6, [sp, #12]
   1ee1c:	mov	sl, r9
   1ee20:	b	1ecf4 <__assert_fail@plt+0xc700>
   1ee24:	mov	r6, #0
   1ee28:	mov	r9, #2
   1ee2c:	strb	r6, [r4, r8]
   1ee30:	str	r6, [sp, #12]
   1ee34:	mov	sl, r9
   1ee38:	b	1ecf4 <__assert_fail@plt+0xc700>
   1ee3c:	mov	r6, #0
   1ee40:	mov	r9, #1048576	; 0x100000
   1ee44:	strb	r6, [r4, r8]
   1ee48:	str	r6, [sp, #12]
   1ee4c:	mov	sl, r9
   1ee50:	b	1ecf4 <__assert_fail@plt+0xc700>
   1ee54:	mov	r2, #5
   1ee58:	ldr	r1, [pc, #192]	; 1ef20 <__assert_fail@plt+0xc92c>
   1ee5c:	mov	r0, #0
   1ee60:	bl	120b4 <dcgettext@plt>
   1ee64:	ldr	r3, [r5]
   1ee68:	mov	r1, #0
   1ee6c:	ldr	r3, [r6, r3, lsl #2]
   1ee70:	ldrb	r3, [r3, r8]
   1ee74:	mov	r2, r0
   1ee78:	mov	r0, #1
   1ee7c:	bl	121ec <error@plt>
   1ee80:	cmp	r8, #1
   1ee84:	beq	1eea0 <__assert_fail@plt+0xc8ac>
   1ee88:	ldr	r3, [pc, #148]	; 1ef24 <__assert_fail@plt+0xc930>
   1ee8c:	str	r3, [r0, #28]
   1ee90:	b	1ed98 <__assert_fail@plt+0xc7a4>
   1ee94:	mov	r0, r6
   1ee98:	add	sp, sp, #36	; 0x24
   1ee9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eea0:	ldr	r3, [sp, #12]
   1eea4:	vldr	s15, [pc, #108]	; 1ef18 <__assert_fail@plt+0xc924>
   1eea8:	vldr	s14, [pc, #100]	; 1ef14 <__assert_fail@plt+0xc920>
   1eeac:	mul	r6, r2, r3
   1eeb0:	umull	r2, r3, r2, r9
   1eeb4:	b	1ed80 <__assert_fail@plt+0xc78c>
   1eeb8:	mov	r0, r4
   1eebc:	b	1eda8 <__assert_fail@plt+0xc7b4>
   1eec0:	mov	r5, #0
   1eec4:	mov	r2, #5
   1eec8:	ldr	r1, [pc, #88]	; 1ef28 <__assert_fail@plt+0xc934>
   1eecc:	mov	r0, r5
   1eed0:	strb	fp, [sp, #20]
   1eed4:	strb	r5, [sp, #21]
   1eed8:	bl	120b4 <dcgettext@plt>
   1eedc:	add	r3, sp, #20
   1eee0:	str	r3, [sp]
   1eee4:	mov	r1, r5
   1eee8:	mov	r3, r4
   1eeec:	mov	r2, r0
   1eef0:	mov	r0, #1
   1eef4:	bl	121ec <error@plt>
   1eef8:	mov	r2, #5
   1eefc:	ldr	r1, [pc, #40]	; 1ef2c <__assert_fail@plt+0xc938>
   1ef00:	bl	120b4 <dcgettext@plt>
   1ef04:	mov	r1, r8
   1ef08:	mov	r2, r0
   1ef0c:	mov	r0, #1
   1ef10:	bl	121ec <error@plt>
   1ef14:	svccc	0x00666666
   1ef18:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ef1c:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   1ef20:	andeq	r0, r5, ip, lsl #29
   1ef24:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ef28:	andeq	r0, r5, r4, lsr #29
   1ef2c:	andeq	r0, r5, ip, ror #28
   1ef30:	push	{r4, r5, r6, r7, lr}
   1ef34:	sub	sp, sp, #212	; 0xd4
   1ef38:	mov	r4, r1
   1ef3c:	mov	r5, r0
   1ef40:	mov	r0, sp
   1ef44:	mov	r6, r2
   1ef48:	bl	1ac3c <__assert_fail@plt+0x8648>
   1ef4c:	cmp	r4, #0
   1ef50:	beq	1f09c <__assert_fail@plt+0xcaa8>
   1ef54:	ldr	r3, [r6]
   1ef58:	ldr	r4, [r4, r3, lsl #2]
   1ef5c:	cmp	r4, #0
   1ef60:	beq	1f09c <__assert_fail@plt+0xcaa8>
   1ef64:	ldr	r7, [pc, #368]	; 1f0dc <__assert_fail@plt+0xcae8>
   1ef68:	add	r3, r3, #1
   1ef6c:	str	r3, [r6]
   1ef70:	mov	r1, sp
   1ef74:	ldr	r3, [r7, #52]	; 0x34
   1ef78:	mov	r0, r4
   1ef7c:	blx	r3
   1ef80:	subs	r6, r0, #0
   1ef84:	bne	1f0cc <__assert_fail@plt+0xcad8>
   1ef88:	add	r0, sp, #104	; 0x68
   1ef8c:	bl	1ac3c <__assert_fail@plt+0x8648>
   1ef90:	ldr	r3, [r7, #48]	; 0x30
   1ef94:	cmp	r3, #0
   1ef98:	bne	1efb8 <__assert_fail@plt+0xc9c4>
   1ef9c:	ldrb	r3, [r7, #56]	; 0x38
   1efa0:	cmp	r3, #0
   1efa4:	bne	1f0a8 <__assert_fail@plt+0xcab4>
   1efa8:	ldr	r3, [sp, #16]
   1efac:	and	r3, r3, #61440	; 0xf000
   1efb0:	cmp	r3, #40960	; 0xa000
   1efb4:	beq	1f0c4 <__assert_fail@plt+0xcad0>
   1efb8:	mov	r1, r6
   1efbc:	mov	r0, r4
   1efc0:	bl	25318 <__assert_fail@plt+0x12d24>
   1efc4:	subs	r6, r0, #0
   1efc8:	blt	1f058 <__assert_fail@plt+0xca64>
   1efcc:	add	r2, sp, #104	; 0x68
   1efd0:	mov	r1, r6
   1efd4:	mov	r0, #3
   1efd8:	bl	1215c <__fxstat64@plt>
   1efdc:	cmp	r0, #0
   1efe0:	bne	1f0cc <__assert_fail@plt+0xcad8>
   1efe4:	ldr	r3, [r7, #52]	; 0x34
   1efe8:	mov	r1, sp
   1efec:	mov	r0, r4
   1eff0:	blx	r3
   1eff4:	cmp	r0, #0
   1eff8:	bne	1f0cc <__assert_fail@plt+0xcad8>
   1effc:	ldr	r3, [r7, #48]	; 0x30
   1f000:	cmp	r3, #0
   1f004:	bne	1f0b0 <__assert_fail@plt+0xcabc>
   1f008:	ldrb	r3, [r7, #56]	; 0x38
   1f00c:	cmp	r3, #0
   1f010:	bne	1f0b0 <__assert_fail@plt+0xcabc>
   1f014:	ldr	r3, [sp, #16]
   1f018:	and	r3, r3, #61440	; 0xf000
   1f01c:	cmp	r3, #40960	; 0xa000
   1f020:	beq	1f04c <__assert_fail@plt+0xca58>
   1f024:	ldrd	r0, [sp]
   1f028:	ldrd	r2, [sp, #104]	; 0x68
   1f02c:	cmp	r1, r3
   1f030:	cmpeq	r0, r2
   1f034:	bne	1f04c <__assert_fail@plt+0xca58>
   1f038:	ldrd	r0, [sp, #96]	; 0x60
   1f03c:	ldrd	r2, [sp, #200]	; 0xc8
   1f040:	cmp	r1, r3
   1f044:	cmpeq	r0, r2
   1f048:	beq	1f058 <__assert_fail@plt+0xca64>
   1f04c:	mov	r0, r6
   1f050:	bl	125ac <close@plt>
   1f054:	mvn	r6, #0
   1f058:	mov	r1, r4
   1f05c:	mov	r0, r5
   1f060:	bl	1a98c <__assert_fail@plt+0x8398>
   1f064:	ldrd	r4, [sp, #96]	; 0x60
   1f068:	ldrd	r2, [sp]
   1f06c:	ldr	r1, [pc, #108]	; 1f0e0 <__assert_fail@plt+0xcaec>
   1f070:	mov	ip, #0
   1f074:	strd	r4, [r0, #40]	; 0x28
   1f078:	mov	r4, #1
   1f07c:	str	r6, [r0, #56]	; 0x38
   1f080:	strd	r2, [r0, #48]	; 0x30
   1f084:	strb	ip, [r0, #19]
   1f088:	str	r1, [r0, #28]
   1f08c:	strb	r4, [r0, #18]
   1f090:	mov	r0, r4
   1f094:	add	sp, sp, #212	; 0xd4
   1f098:	pop	{r4, r5, r6, r7, pc}
   1f09c:	mov	r0, r4
   1f0a0:	add	sp, sp, #212	; 0xd4
   1f0a4:	pop	{r4, r5, r6, r7, pc}
   1f0a8:	mov	r6, #32768	; 0x8000
   1f0ac:	b	1efb8 <__assert_fail@plt+0xc9c4>
   1f0b0:	add	r1, sp, #104	; 0x68
   1f0b4:	mov	r0, sp
   1f0b8:	mov	r2, #104	; 0x68
   1f0bc:	bl	12024 <memcpy@plt>
   1f0c0:	b	1f058 <__assert_fail@plt+0xca64>
   1f0c4:	mvn	r6, #1
   1f0c8:	b	1f058 <__assert_fail@plt+0xca64>
   1f0cc:	bl	12348 <__errno_location@plt>
   1f0d0:	mov	r1, r4
   1f0d4:	ldr	r0, [r0]
   1f0d8:	bl	1bea8 <__assert_fail@plt+0x98b4>
   1f0dc:	andeq	r4, r6, ip, ror #28
   1f0e0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1f0e4:	mov	r3, #0
   1f0e8:	push	{r4, r5, r6, lr}
   1f0ec:	mov	r5, r0
   1f0f0:	str	r3, [r1]
   1f0f4:	mov	r0, r3
   1f0f8:	mov	r4, r1
   1f0fc:	bl	31bcc <__assert_fail@plt+0x1f5d8>
   1f100:	ldr	r1, [pc, #176]	; 1f1b8 <__assert_fail@plt+0xcbc4>
   1f104:	str	r0, [r4, #16]
   1f108:	mov	r0, r5
   1f10c:	bl	11f40 <strcmp@plt>
   1f110:	cmp	r0, #0
   1f114:	beq	1f198 <__assert_fail@plt+0xcba4>
   1f118:	ldr	r1, [pc, #156]	; 1f1bc <__assert_fail@plt+0xcbc8>
   1f11c:	mov	r0, r5
   1f120:	bl	11f40 <strcmp@plt>
   1f124:	cmp	r0, #0
   1f128:	beq	1f174 <__assert_fail@plt+0xcb80>
   1f12c:	ldr	r3, [pc, #140]	; 1f1c0 <__assert_fail@plt+0xcbcc>
   1f130:	mov	r1, r5
   1f134:	ldr	r0, [r3, #36]	; 0x24
   1f138:	bl	1c108 <__assert_fail@plt+0x9b14>
   1f13c:	mov	r3, r0
   1f140:	cmp	r0, #0
   1f144:	stmib	r4, {r3, r5}
   1f148:	beq	1f1a8 <__assert_fail@plt+0xcbb4>
   1f14c:	mov	r0, r3
   1f150:	bl	123c0 <fileno@plt>
   1f154:	cmn	r0, #1
   1f158:	moveq	r0, #0
   1f15c:	beq	1f16c <__assert_fail@plt+0xcb78>
   1f160:	bl	12564 <isatty@plt>
   1f164:	adds	r0, r0, #0
   1f168:	movne	r0, #1
   1f16c:	strb	r0, [r4, #12]
   1f170:	pop	{r4, r5, r6, pc}
   1f174:	ldr	r3, [pc, #72]	; 1f1c4 <__assert_fail@plt+0xcbd0>
   1f178:	ldr	r1, [pc, #72]	; 1f1c8 <__assert_fail@plt+0xcbd4>
   1f17c:	mov	r2, #5
   1f180:	ldr	r3, [r3]
   1f184:	str	r3, [r4, #4]
   1f188:	bl	120b4 <dcgettext@plt>
   1f18c:	ldr	r3, [r4, #4]
   1f190:	str	r0, [r4, #8]
   1f194:	b	1f14c <__assert_fail@plt+0xcb58>
   1f198:	ldr	r3, [pc, #44]	; 1f1cc <__assert_fail@plt+0xcbd8>
   1f19c:	mov	r2, #5
   1f1a0:	ldr	r1, [pc, #40]	; 1f1d0 <__assert_fail@plt+0xcbdc>
   1f1a4:	b	1f180 <__assert_fail@plt+0xcb8c>
   1f1a8:	bl	12348 <__errno_location@plt>
   1f1ac:	mov	r1, r5
   1f1b0:	ldr	r0, [r0]
   1f1b4:	bl	1bf50 <__assert_fail@plt+0x995c>
   1f1b8:	andeq	r0, r5, r8, asr #29
   1f1bc:	andeq	r0, r5, r4, ror #29
   1f1c0:	andeq	r4, r6, r0, asr #28
   1f1c4:	andeq	r4, r6, r4, asr r5
   1f1c8:	andeq	pc, r4, r4, asr ip	; <UNPREDICTABLE>
   1f1cc:	andeq	r4, r6, r8, asr #10
   1f1d0:	ldrdeq	r0, [r5], -r4
   1f1d4:	cmp	r1, #0
   1f1d8:	push	{r4, r5, r6, r7, lr}
   1f1dc:	mov	r5, r2
   1f1e0:	sub	sp, sp, #28
   1f1e4:	ldr	r4, [r2]
   1f1e8:	beq	1f244 <__assert_fail@plt+0xcc50>
   1f1ec:	mov	r7, r0
   1f1f0:	ldr	r0, [r1, r4, lsl #2]
   1f1f4:	lsl	r3, r4, #2
   1f1f8:	cmp	r0, #0
   1f1fc:	beq	1f244 <__assert_fail@plt+0xcc50>
   1f200:	add	r1, r1, r3
   1f204:	add	r3, r4, #1
   1f208:	ldr	r6, [r1, #4]
   1f20c:	str	r3, [r2]
   1f210:	cmp	r6, #0
   1f214:	beq	1f244 <__assert_fail@plt+0xcc50>
   1f218:	add	r4, r4, #2
   1f21c:	str	r4, [r2]
   1f220:	add	r1, sp, #4
   1f224:	bl	1f0e4 <__assert_fail@plt+0xcaf0>
   1f228:	add	r0, sp, #4
   1f22c:	mov	r2, r6
   1f230:	mov	r1, r7
   1f234:	ldr	r4, [r5]
   1f238:	bl	1dbb0 <__assert_fail@plt+0xb5bc>
   1f23c:	cmp	r0, #0
   1f240:	bne	1f24c <__assert_fail@plt+0xcc58>
   1f244:	mov	r0, #0
   1f248:	str	r4, [r5]
   1f24c:	add	sp, sp, #28
   1f250:	pop	{r4, r5, r6, r7, pc}
   1f254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f258:	subs	r4, r1, #0
   1f25c:	sub	sp, sp, #20
   1f260:	beq	1f36c <__assert_fail@plt+0xcd78>
   1f264:	ldr	r3, [r2]
   1f268:	ldr	r4, [r4, r3, lsl #2]
   1f26c:	cmp	r4, #0
   1f270:	beq	1f36c <__assert_fail@plt+0xcd78>
   1f274:	add	r3, r3, #1
   1f278:	str	r3, [r2]
   1f27c:	ldrb	r3, [r4]
   1f280:	cmp	r3, #45	; 0x2d
   1f284:	beq	1f378 <__assert_fail@plt+0xcd84>
   1f288:	cmp	r3, #47	; 0x2f
   1f28c:	beq	1f388 <__assert_fail@plt+0xcd94>
   1f290:	ldr	fp, [pc, #364]	; 1f404 <__assert_fail@plt+0xce10>
   1f294:	mov	r3, #0
   1f298:	mov	r7, #2
   1f29c:	mov	r8, r0
   1f2a0:	add	r0, r4, r3
   1f2a4:	bl	2b5b8 <__assert_fail@plt+0x18fc4>
   1f2a8:	subs	r9, r0, #0
   1f2ac:	beq	1f3c8 <__assert_fail@plt+0xcdd4>
   1f2b0:	ldrb	r3, [r4]
   1f2b4:	cmp	r3, #43	; 0x2b
   1f2b8:	bne	1f2cc <__assert_fail@plt+0xccd8>
   1f2bc:	ldrb	r3, [r4, #1]
   1f2c0:	sub	r3, r3, #48	; 0x30
   1f2c4:	cmp	r3, #7
   1f2c8:	bls	1f3c8 <__assert_fail@plt+0xcdd4>
   1f2cc:	mov	r5, #0
   1f2d0:	mov	r2, r5
   1f2d4:	mov	r1, r5
   1f2d8:	mov	r3, r9
   1f2dc:	str	r5, [sp]
   1f2e0:	mov	r0, r5
   1f2e4:	bl	2b9a8 <__assert_fail@plt+0x193b4>
   1f2e8:	mov	r3, r9
   1f2ec:	mov	r2, r5
   1f2f0:	mov	r1, #1
   1f2f4:	str	r5, [sp]
   1f2f8:	mov	sl, r0
   1f2fc:	mov	r0, r5
   1f300:	str	sl, [sp, #8]
   1f304:	bl	2b9a8 <__assert_fail@plt+0x193b4>
   1f308:	mov	r6, r0
   1f30c:	mov	r0, r9
   1f310:	str	r6, [sp, #12]
   1f314:	bl	376d0 <__assert_fail@plt+0x250dc>
   1f318:	ldrb	r3, [r4]
   1f31c:	cmp	r6, r5
   1f320:	cmpeq	sl, r5
   1f324:	moveq	r6, #1
   1f328:	movne	r6, #0
   1f32c:	cmp	r3, #47	; 0x2f
   1f330:	movne	r6, #0
   1f334:	andeq	r6, r6, #1
   1f338:	cmp	r6, r5
   1f33c:	bne	1f398 <__assert_fail@plt+0xcda4>
   1f340:	mov	r1, r4
   1f344:	mov	r0, r8
   1f348:	bl	1a98c <__assert_fail@plt+0x8398>
   1f34c:	add	r2, sp, #8
   1f350:	mov	r4, #1
   1f354:	mov	r3, r0
   1f358:	str	fp, [r0, #28]
   1f35c:	ldm	r2!, {r0, r1}
   1f360:	str	r7, [r3, #40]	; 0x28
   1f364:	str	r0, [r3, #44]	; 0x2c
   1f368:	str	r1, [r3, #48]	; 0x30
   1f36c:	mov	r0, r4
   1f370:	add	sp, sp, #20
   1f374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f378:	mov	r3, #1
   1f37c:	mov	r7, #0
   1f380:	ldr	fp, [pc, #128]	; 1f408 <__assert_fail@plt+0xce14>
   1f384:	b	1f29c <__assert_fail@plt+0xcca8>
   1f388:	mov	r3, #1
   1f38c:	ldr	fp, [pc, #120]	; 1f40c <__assert_fail@plt+0xce18>
   1f390:	mov	r7, r3
   1f394:	b	1f29c <__assert_fail@plt+0xcca8>
   1f398:	mov	r2, #5
   1f39c:	ldr	r1, [pc, #108]	; 1f410 <__assert_fail@plt+0xce1c>
   1f3a0:	mov	r0, r5
   1f3a4:	bl	120b4 <dcgettext@plt>
   1f3a8:	mov	r3, r4
   1f3ac:	mov	r1, r5
   1f3b0:	ldr	fp, [pc, #92]	; 1f414 <__assert_fail@plt+0xce20>
   1f3b4:	mov	r7, r5
   1f3b8:	mov	r2, r0
   1f3bc:	mov	r0, r5
   1f3c0:	bl	121ec <error@plt>
   1f3c4:	b	1f340 <__assert_fail@plt+0xcd4c>
   1f3c8:	mov	r2, #5
   1f3cc:	ldr	r1, [pc, #68]	; 1f418 <__assert_fail@plt+0xce24>
   1f3d0:	mov	r0, #0
   1f3d4:	bl	120b4 <dcgettext@plt>
   1f3d8:	ldr	r3, [pc, #60]	; 1f41c <__assert_fail@plt+0xce28>
   1f3dc:	mov	r2, r4
   1f3e0:	ldr	r1, [r3, #72]	; 0x48
   1f3e4:	mov	r5, r0
   1f3e8:	mov	r0, #0
   1f3ec:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1f3f0:	mov	r2, r5
   1f3f4:	mov	r1, #0
   1f3f8:	mov	r3, r0
   1f3fc:	mov	r0, #1
   1f400:	bl	121ec <error@plt>
   1f404:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1f408:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1f40c:			; <UNDEFINED> instruction: 0x3e99999a
   1f410:	andeq	r0, r5, r0, lsl #30
   1f414:	svccc	0x007fa440
   1f418:	strdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   1f41c:	andeq	r4, r6, ip, ror #28
   1f420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f424:	subs	r8, r2, #0
   1f428:	sub	sp, sp, #76	; 0x4c
   1f42c:	beq	1f66c <__assert_fail@plt+0xd078>
   1f430:	ldr	r2, [r3]
   1f434:	ldr	r2, [r8, r2, lsl #2]
   1f438:	cmp	r2, #0
   1f43c:	beq	1f770 <__assert_fail@plt+0xd17c>
   1f440:	str	r3, [sp, #32]
   1f444:	ldr	r3, [r1, #12]
   1f448:	ldr	r2, [pc, #1612]	; 1fa9c <__assert_fail@plt+0xd4a8>
   1f44c:	mov	r9, r0
   1f450:	mov	r0, r1
   1f454:	mov	r1, r3
   1f458:	mov	r4, r3
   1f45c:	str	r3, [sp, #36]	; 0x24
   1f460:	bl	1a958 <__assert_fail@plt+0x8364>
   1f464:	ldr	r7, [pc, #1588]	; 1faa0 <__assert_fail@plt+0xd4ac>
   1f468:	ldr	r3, [pc, #1588]	; 1faa4 <__assert_fail@plt+0xd4b0>
   1f46c:	ldr	r2, [pc, #1588]	; 1faa8 <__assert_fail@plt+0xd4b4>
   1f470:	cmp	r4, r3
   1f474:	cmpne	r4, r7
   1f478:	movne	r3, #1
   1f47c:	moveq	r3, #0
   1f480:	str	r3, [sp, #20]
   1f484:	mov	r3, #0
   1f488:	mov	r1, r0
   1f48c:	ldreq	r1, [pc, #1560]	; 1faac <__assert_fail@plt+0xd4b8>
   1f490:	str	r2, [r0, #16]
   1f494:	str	r0, [sp, #24]
   1f498:	moveq	r2, #1
   1f49c:	str	r3, [r0, #144]	; 0x90
   1f4a0:	strbeq	r2, [r1, #80]	; 0x50
   1f4a4:	moveq	r3, r2
   1f4a8:	ldr	r2, [sp, #24]
   1f4ac:	strb	r3, [r2, #140]	; 0x8c
   1f4b0:	ldr	r3, [sp, #36]	; 0x24
   1f4b4:	ldr	r2, [pc, #1524]	; 1fab0 <__assert_fail@plt+0xd4bc>
   1f4b8:	cmp	r3, r2
   1f4bc:	cmpne	r3, r7
   1f4c0:	moveq	r7, #1
   1f4c4:	movne	r7, #0
   1f4c8:	beq	1f7ec <__assert_fail@plt+0xd1f8>
   1f4cc:	ldr	r3, [pc, #1504]	; 1fab4 <__assert_fail@plt+0xd4c0>
   1f4d0:	ldr	r3, [r3]
   1f4d4:	cmp	r3, #0
   1f4d8:	beq	1fa7c <__assert_fail@plt+0xd488>
   1f4dc:	ldr	r1, [sp, #24]
   1f4e0:	ldr	r2, [sp, #32]
   1f4e4:	strb	r7, [r1, #40]	; 0x28
   1f4e8:	ldr	r2, [r2]
   1f4ec:	str	r3, [r1, #144]	; 0x90
   1f4f0:	str	r2, [sp, #28]
   1f4f4:	ldr	sl, [r8, r2, lsl #2]
   1f4f8:	lsl	r9, r2, #2
   1f4fc:	add	r3, r8, r9
   1f500:	cmp	sl, #0
   1f504:	mov	r5, r2
   1f508:	str	r3, [sp, #40]	; 0x28
   1f50c:	beq	1f65c <__assert_fail@plt+0xd068>
   1f510:	add	r4, r8, r9
   1f514:	sub	r9, r9, r4
   1f518:	add	r9, r9, #4
   1f51c:	mov	r6, r7
   1f520:	mov	r0, r7
   1f524:	mov	fp, r4
   1f528:	b	1f594 <__assert_fail@plt+0xcfa0>
   1f52c:	ldr	r2, [sp, #20]
   1f530:	cmp	r3, #43	; 0x2b
   1f534:	movne	r2, #0
   1f538:	andeq	r2, r2, #1
   1f53c:	cmp	r2, #0
   1f540:	beq	1f55c <__assert_fail@plt+0xcf68>
   1f544:	ldrb	r3, [sl, #1]
   1f548:	cmp	r3, #0
   1f54c:	movne	r0, #0
   1f550:	andeq	r0, r0, #1
   1f554:	cmp	r0, #0
   1f558:	bne	1f90c <__assert_fail@plt+0xd318>
   1f55c:	mov	r0, sl
   1f560:	ldr	r1, [pc, #1360]	; 1fab8 <__assert_fail@plt+0xd4c4>
   1f564:	bl	2a740 <__assert_fail@plt+0x1814c>
   1f568:	add	r4, r4, r9
   1f56c:	add	r4, r8, r4
   1f570:	add	r5, r5, #1
   1f574:	cmp	r0, #0
   1f578:	movne	r7, sl
   1f57c:	ldr	sl, [fp, #4]!
   1f580:	addne	r6, r6, #1
   1f584:	movne	r0, #1
   1f588:	moveq	r0, #0
   1f58c:	cmp	sl, #0
   1f590:	beq	1f65c <__assert_fail@plt+0xd068>
   1f594:	ldrb	r3, [sl]
   1f598:	cmp	r3, #59	; 0x3b
   1f59c:	bne	1f52c <__assert_fail@plt+0xcf38>
   1f5a0:	ldrb	r3, [sl, #1]
   1f5a4:	cmp	r3, #0
   1f5a8:	bne	1f55c <__assert_fail@plt+0xcf68>
   1f5ac:	mov	r2, #0
   1f5b0:	ldr	r3, [sp, #28]
   1f5b4:	cmp	r5, r3
   1f5b8:	beq	1f65c <__assert_fail@plt+0xd068>
   1f5bc:	ldr	r3, [r4]
   1f5c0:	cmp	r3, #0
   1f5c4:	beq	1f65c <__assert_fail@plt+0xd068>
   1f5c8:	cmp	r2, #0
   1f5cc:	beq	1f678 <__assert_fail@plt+0xd084>
   1f5d0:	ldr	r2, [sp, #36]	; 0x24
   1f5d4:	ldr	r1, [pc, #1236]	; 1fab0 <__assert_fail@plt+0xd4bc>
   1f5d8:	ldr	r3, [pc, #1244]	; 1fabc <__assert_fail@plt+0xd4c8>
   1f5dc:	cmp	r2, r1
   1f5e0:	ldr	r8, [pc, #1240]	; 1fac0 <__assert_fail@plt+0xd4cc>
   1f5e4:	moveq	r8, r3
   1f5e8:	cmp	r6, #1
   1f5ec:	bgt	1fa58 <__assert_fail@plt+0xd464>
   1f5f0:	mov	r0, r7
   1f5f4:	bl	12300 <strlen@plt>
   1f5f8:	cmp	r0, #2
   1f5fc:	beq	1f678 <__assert_fail@plt+0xd084>
   1f600:	mov	r3, r8
   1f604:	add	r0, sp, #52	; 0x34
   1f608:	ldr	r2, [pc, #1204]	; 1fac4 <__assert_fail@plt+0xd4d0>
   1f60c:	mov	r1, #19
   1f610:	bl	12360 <snprintf@plt>
   1f614:	cmp	r0, #19
   1f618:	bls	1f89c <__assert_fail@plt+0xd2a8>
   1f61c:	ldr	r3, [pc, #1188]	; 1fac8 <__assert_fail@plt+0xd4d4>
   1f620:	ldr	r2, [pc, #1188]	; 1facc <__assert_fail@plt+0xd4d8>
   1f624:	ldr	r1, [pc, #1188]	; 1fad0 <__assert_fail@plt+0xd4dc>
   1f628:	ldr	r0, [pc, #1188]	; 1fad4 <__assert_fail@plt+0xd4e0>
   1f62c:	bl	125f4 <__assert_fail@plt>
   1f630:	ldr	r3, [sp, #24]
   1f634:	mov	r7, #0
   1f638:	strb	r7, [r3, #40]	; 0x28
   1f63c:	ldr	r3, [sp, #32]
   1f640:	ldr	r5, [r3]
   1f644:	ldr	sl, [r8, r5, lsl #2]
   1f648:	lsl	r3, r5, #2
   1f64c:	add	r2, r8, r3
   1f650:	cmp	sl, r7
   1f654:	str	r2, [sp, #40]	; 0x28
   1f658:	bne	1f968 <__assert_fail@plt+0xd374>
   1f65c:	ldr	r3, [sp, #32]
   1f660:	ldr	r0, [sp, #24]
   1f664:	str	r5, [r3]
   1f668:	bl	376d0 <__assert_fail@plt+0x250dc>
   1f66c:	mov	r0, #0
   1f670:	add	sp, sp, #76	; 0x4c
   1f674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f678:	ldr	r6, [sp, #24]
   1f67c:	mov	r1, #2048	; 0x800
   1f680:	add	r8, r6, #44	; 0x2c
   1f684:	mov	r0, r8
   1f688:	bl	24714 <__assert_fail@plt+0x12120>
   1f68c:	add	r7, r6, #40	; 0x28
   1f690:	sub	r0, r0, #1
   1f694:	cmp	r0, #1
   1f698:	bls	1fa90 <__assert_fail@plt+0xd49c>
   1f69c:	mov	r0, r8
   1f6a0:	bl	24840 <__assert_fail@plt+0x1224c>
   1f6a4:	ldr	r1, [sp, #24]
   1f6a8:	ldr	r2, [pc, #1064]	; 1fad8 <__assert_fail@plt+0xd4e4>
   1f6ac:	ldrb	r3, [r1, #40]	; 0x28
   1f6b0:	str	r2, [r1, #76]	; 0x4c
   1f6b4:	cmp	r3, #0
   1f6b8:	beq	1f77c <__assert_fail@plt+0xd188>
   1f6bc:	ldr	fp, [sp, #28]
   1f6c0:	mov	r6, #0
   1f6c4:	sub	r3, r5, fp
   1f6c8:	sub	r3, r3, #1
   1f6cc:	add	r9, r1, #88	; 0x58
   1f6d0:	str	r3, [r1, #72]	; 0x48
   1f6d4:	str	r6, [r1, #132]	; 0x84
   1f6d8:	str	r6, [r1, #68]	; 0x44
   1f6dc:	str	r6, [r1, #64]	; 0x40
   1f6e0:	str	r6, [r1, #80]	; 0x50
   1f6e4:	str	r6, [r1, #84]	; 0x54
   1f6e8:	mov	r2, r7
   1f6ec:	mov	r1, r9
   1f6f0:	mov	r0, r8
   1f6f4:	sub	sl, r5, #1
   1f6f8:	bl	24860 <__assert_fail@plt+0x1226c>
   1f6fc:	cmp	sl, fp
   1f700:	ble	1f750 <__assert_fail@plt+0xd15c>
   1f704:	ldr	r7, [sp, #40]	; 0x28
   1f708:	ldr	fp, [sp, #28]
   1f70c:	str	r4, [sp, #20]
   1f710:	ldr	r4, [r7], #4
   1f714:	add	fp, fp, #1
   1f718:	mov	r0, r4
   1f71c:	bl	12300 <strlen@plt>
   1f720:	mov	r3, #1
   1f724:	str	r3, [sp, #8]
   1f728:	mov	r2, r4
   1f72c:	str	r6, [sp, #4]
   1f730:	str	r6, [sp]
   1f734:	mov	r1, r9
   1f738:	add	r3, r0, r3
   1f73c:	mov	r0, r8
   1f740:	bl	23e9c <__assert_fail@plt+0x118a8>
   1f744:	cmp	fp, sl
   1f748:	bne	1f710 <__assert_fail@plt+0xd11c>
   1f74c:	ldr	r4, [sp, #20]
   1f750:	ldr	r3, [r4]
   1f754:	mov	r0, #1
   1f758:	cmp	r3, #0
   1f75c:	ldr	r3, [sp, #32]
   1f760:	addne	r5, r5, #1
   1f764:	str	r5, [r3]
   1f768:	add	sp, sp, #76	; 0x4c
   1f76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f770:	mov	r0, r2
   1f774:	add	sp, sp, #76	; 0x4c
   1f778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f77c:	ldr	r2, [sp, #28]
   1f780:	str	r3, [r1, #80]	; 0x50
   1f784:	sub	r0, r5, r2
   1f788:	ldr	r2, [pc, #808]	; 1fab8 <__assert_fail@plt+0xd4c4>
   1f78c:	str	r3, [r1, #84]	; 0x54
   1f790:	mov	r3, #2
   1f794:	str	r0, [r1, #136]	; 0x88
   1f798:	str	r2, [r1, #68]	; 0x44
   1f79c:	str	r3, [r1, #64]	; 0x40
   1f7a0:	lsl	r0, r0, #2
   1f7a4:	mov	r6, r1
   1f7a8:	bl	3563c <__assert_fail@plt+0x23048>
   1f7ac:	add	r1, r6, #88	; 0x58
   1f7b0:	mov	r2, r7
   1f7b4:	str	r0, [r6, #132]	; 0x84
   1f7b8:	mov	r0, r8
   1f7bc:	bl	24860 <__assert_fail@plt+0x1226c>
   1f7c0:	ldr	r1, [r6, #136]	; 0x88
   1f7c4:	cmp	r1, #0
   1f7c8:	ble	1f750 <__assert_fail@plt+0xd15c>
   1f7cc:	ldr	r3, [r6, #132]	; 0x84
   1f7d0:	ldr	r7, [sp, #40]	; 0x28
   1f7d4:	add	r1, r3, r1, lsl #2
   1f7d8:	ldr	r2, [r7], #4
   1f7dc:	str	r2, [r3], #4
   1f7e0:	cmp	r3, r1
   1f7e4:	bne	1f7d8 <__assert_fail@plt+0xd1e4>
   1f7e8:	b	1f750 <__assert_fail@plt+0xd15c>
   1f7ec:	ldr	r3, [pc, #696]	; 1faac <__assert_fail@plt+0xd4b8>
   1f7f0:	mov	r5, #0
   1f7f4:	ldr	r0, [pc, #736]	; 1fadc <__assert_fail@plt+0xd4e8>
   1f7f8:	strb	r5, [r3, #14]
   1f7fc:	bl	12228 <getenv@plt>
   1f800:	subs	r4, r0, #0
   1f804:	beq	1f630 <__assert_fail@plt+0xd03c>
   1f808:	add	r6, sp, #52	; 0x34
   1f80c:	add	r3, sp, #48	; 0x30
   1f810:	str	r6, [sp]
   1f814:	mov	r2, #1
   1f818:	ldr	r1, [pc, #704]	; 1fae0 <__assert_fail@plt+0xd4ec>
   1f81c:	bl	26650 <__assert_fail@plt+0x1405c>
   1f820:	ldr	r7, [pc, #696]	; 1fae0 <__assert_fail@plt+0xd4ec>
   1f824:	b	1f850 <__assert_fail@plt+0xd25c>
   1f828:	cmp	r3, #47	; 0x2f
   1f82c:	bne	1f91c <__assert_fail@plt+0xd328>
   1f830:	str	r6, [sp]
   1f834:	add	r3, sp, #48	; 0x30
   1f838:	mov	r2, r5
   1f83c:	mov	r1, r7
   1f840:	mov	r0, r4
   1f844:	bl	26650 <__assert_fail@plt+0x1405c>
   1f848:	cmp	r0, #0
   1f84c:	beq	1f630 <__assert_fail@plt+0xd03c>
   1f850:	ldr	r1, [sp, #52]	; 0x34
   1f854:	cmp	r1, #0
   1f858:	beq	1f878 <__assert_fail@plt+0xd284>
   1f85c:	ldr	r3, [sp, #48]	; 0x30
   1f860:	cmp	r1, #1
   1f864:	add	r0, r4, r3
   1f868:	ldrb	r3, [r4, r3]
   1f86c:	bne	1f828 <__assert_fail@plt+0xd234>
   1f870:	cmp	r3, #46	; 0x2e
   1f874:	bne	1f828 <__assert_fail@plt+0xd234>
   1f878:	mov	r2, #5
   1f87c:	ldr	r1, [pc, #608]	; 1fae4 <__assert_fail@plt+0xd4f0>
   1f880:	mov	r0, #0
   1f884:	bl	120b4 <dcgettext@plt>
   1f888:	mov	r3, r9
   1f88c:	mov	r1, #0
   1f890:	mov	r2, r0
   1f894:	mov	r0, #1
   1f898:	bl	121ec <error@plt>
   1f89c:	mov	r2, #5
   1f8a0:	ldr	r1, [pc, #576]	; 1fae8 <__assert_fail@plt+0xd4f4>
   1f8a4:	mov	r0, #0
   1f8a8:	bl	120b4 <dcgettext@plt>
   1f8ac:	ldr	r4, [pc, #504]	; 1faac <__assert_fail@plt+0xd4b8>
   1f8b0:	add	r2, sp, #52	; 0x34
   1f8b4:	ldr	r1, [r4, #72]	; 0x48
   1f8b8:	mov	r5, r0
   1f8bc:	mov	r0, #0
   1f8c0:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1f8c4:	ldr	r1, [r4, #72]	; 0x48
   1f8c8:	ldr	r2, [pc, #488]	; 1fab8 <__assert_fail@plt+0xd4c4>
   1f8cc:	mov	r6, r0
   1f8d0:	mov	r0, #1
   1f8d4:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1f8d8:	mov	r2, r7
   1f8dc:	ldr	r1, [r4, #72]	; 0x48
   1f8e0:	mov	r8, r0
   1f8e4:	mov	r0, #2
   1f8e8:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1f8ec:	str	r8, [sp]
   1f8f0:	mov	r3, r6
   1f8f4:	mov	r2, r5
   1f8f8:	mov	r1, #0
   1f8fc:	str	r0, [sp, #4]
   1f900:	mov	r0, #1
   1f904:	bl	121ec <error@plt>
   1f908:	mov	r5, r9
   1f90c:	ldr	r3, [sp, #24]
   1f910:	mov	r2, #1
   1f914:	strb	r2, [r3, #40]	; 0x28
   1f918:	b	1f5b0 <__assert_fail@plt+0xcfbc>
   1f91c:	bl	12000 <strndup@plt>
   1f920:	ldr	r1, [pc, #452]	; 1faec <__assert_fail@plt+0xd4f8>
   1f924:	mov	r2, #5
   1f928:	mov	r5, r0
   1f92c:	mov	r0, #0
   1f930:	bl	120b4 <dcgettext@plt>
   1f934:	cmp	r5, #0
   1f938:	movne	r1, r5
   1f93c:	ldreq	r1, [sp, #48]	; 0x30
   1f940:	mov	r6, r0
   1f944:	addeq	r1, r4, r1
   1f948:	mov	r0, #0
   1f94c:	bl	1be34 <__assert_fail@plt+0x9840>
   1f950:	str	r9, [sp]
   1f954:	mov	r2, r6
   1f958:	mov	r1, #0
   1f95c:	mov	r3, r0
   1f960:	mov	r0, #1
   1f964:	bl	121ec <error@plt>
   1f968:	add	r4, r8, r3
   1f96c:	sub	r2, r3, r4
   1f970:	add	r2, r2, #4
   1f974:	ldr	r3, [pc, #316]	; 1fab8 <__assert_fail@plt+0xd4c4>
   1f978:	mov	r9, r5
   1f97c:	str	r5, [sp, #28]
   1f980:	mov	r6, r7
   1f984:	mov	r1, r7
   1f988:	mov	fp, r4
   1f98c:	mov	r5, r2
   1f990:	ldrb	r0, [sl]
   1f994:	cmp	r0, #59	; 0x3b
   1f998:	beq	1fa44 <__assert_fail@plt+0xd450>
   1f99c:	ldr	r2, [sp, #20]
   1f9a0:	cmp	r0, #43	; 0x2b
   1f9a4:	movne	r2, #0
   1f9a8:	andeq	r2, r2, #1
   1f9ac:	cmp	r2, #0
   1f9b0:	beq	1f9cc <__assert_fail@plt+0xd3d8>
   1f9b4:	ldrb	r0, [sl, #1]
   1f9b8:	cmp	r0, #0
   1f9bc:	movne	r1, #0
   1f9c0:	andeq	r1, r1, #1
   1f9c4:	cmp	r1, #0
   1f9c8:	bne	1f908 <__assert_fail@plt+0xd314>
   1f9cc:	mov	r1, r3
   1f9d0:	mov	r0, sl
   1f9d4:	str	r3, [sp, #44]	; 0x2c
   1f9d8:	bl	2a740 <__assert_fail@plt+0x1814c>
   1f9dc:	ldr	r3, [sp, #44]	; 0x2c
   1f9e0:	cmp	r0, #0
   1f9e4:	beq	1fa3c <__assert_fail@plt+0xd448>
   1f9e8:	cmp	r9, #0
   1f9ec:	add	r6, r6, #1
   1f9f0:	beq	1fa1c <__assert_fail@plt+0xd428>
   1f9f4:	mov	r7, sl
   1f9f8:	mov	r1, #1
   1f9fc:	ldr	sl, [fp, #4]!
   1fa00:	add	r4, r4, r5
   1fa04:	cmp	sl, #0
   1fa08:	add	r4, r8, r4
   1fa0c:	add	r9, r9, #1
   1fa10:	bne	1f990 <__assert_fail@plt+0xd39c>
   1fa14:	mov	r5, r9
   1fa18:	b	1f65c <__assert_fail@plt+0xd068>
   1fa1c:	ldr	r1, [pc, #204]	; 1faf0 <__assert_fail@plt+0xd4fc>
   1fa20:	mov	r2, #5
   1fa24:	mov	r0, #0
   1fa28:	bl	120b4 <dcgettext@plt>
   1fa2c:	mov	r1, #0
   1fa30:	mov	r2, r0
   1fa34:	mov	r0, #1
   1fa38:	bl	121ec <error@plt>
   1fa3c:	mov	r1, #0
   1fa40:	b	1f9fc <__assert_fail@plt+0xd408>
   1fa44:	ldrb	r1, [sl, #1]
   1fa48:	cmp	r1, #0
   1fa4c:	bne	1f9cc <__assert_fail@plt+0xd3d8>
   1fa50:	mov	r5, r9
   1fa54:	b	1f5ac <__assert_fail@plt+0xcfb8>
   1fa58:	mov	r2, #5
   1fa5c:	ldr	r1, [pc, #144]	; 1faf4 <__assert_fail@plt+0xd500>
   1fa60:	mov	r0, #0
   1fa64:	bl	120b4 <dcgettext@plt>
   1fa68:	mov	r3, r8
   1fa6c:	mov	r1, #0
   1fa70:	mov	r2, r0
   1fa74:	mov	r0, #1
   1fa78:	bl	121ec <error@plt>
   1fa7c:	ldr	r3, [pc, #68]	; 1fac8 <__assert_fail@plt+0xd4d4>
   1fa80:	ldr	r2, [pc, #112]	; 1faf8 <__assert_fail@plt+0xd504>
   1fa84:	ldr	r1, [pc, #68]	; 1fad0 <__assert_fail@plt+0xd4dc>
   1fa88:	ldr	r0, [pc, #108]	; 1fafc <__assert_fail@plt+0xd508>
   1fa8c:	bl	125f4 <__assert_fail@plt>
   1fa90:	mov	r2, #5
   1fa94:	ldr	r1, [pc, #100]	; 1fb00 <__assert_fail@plt+0xd50c>
   1fa98:	b	1fa24 <__assert_fail@plt+0xd430>
   1fa9c:	andeq	r0, r5, r4, ror #31
   1faa0:	andeq	r4, r1, r8, asr #24
   1faa4:			; <UNDEFINED> instruction: 0x00014bb8
   1faa8:	andeq	r0, r0, r1, lsl #2
   1faac:	andeq	r4, r6, ip, ror #28
   1fab0:			; <UNDEFINED> instruction: 0x000142b8
   1fab4:	andeq	r4, r6, ip, ror #10
   1fab8:	andeq	r1, r5, r0, asr #3
   1fabc:	ldrdeq	r1, [r5], -r4
   1fac0:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   1fac4:	andeq	r1, r5, r0, ror r2
   1fac8:	andeq	r0, r5, r0, asr #12
   1facc:	andeq	r0, r0, r6, asr #23
   1fad0:	andeq	r1, r5, r0, lsr #3
   1fad4:	andeq	r1, r5, r4, lsl #5
   1fad8:	andeq	r5, r1, r0, lsr lr
   1fadc:	muleq	r5, r8, r1
   1fae0:	andeq	lr, r4, r8, asr r8
   1fae4:	strdeq	r0, [r5], -ip
   1fae8:	muleq	r5, ip, r2
   1faec:	strdeq	r1, [r5], -r8
   1faf0:	andeq	r1, r5, r4, asr #3
   1faf4:	andeq	r1, r5, r8, lsr r2
   1faf8:	andeq	r0, r0, r9, ror fp
   1fafc:	andeq	r1, r5, ip, lsr #3
   1fb00:	ldrdeq	r1, [r5], -r8
   1fb04:	mov	r3, r2
   1fb08:	mov	r2, r1
   1fb0c:	mov	r1, r0
   1fb10:	ldr	r0, [pc]	; 1fb18 <__assert_fail@plt+0xd524>
   1fb14:	b	1f420 <__assert_fail@plt+0xce2c>
   1fb18:	ldrdeq	lr, [r4], -r0
   1fb1c:	mov	r3, r2
   1fb20:	mov	r2, r1
   1fb24:	mov	r1, r0
   1fb28:	ldr	r0, [pc]	; 1fb30 <__assert_fail@plt+0xd53c>
   1fb2c:	b	1f420 <__assert_fail@plt+0xce2c>
   1fb30:	andeq	r1, r5, r4, lsl #6
   1fb34:	mov	r3, r2
   1fb38:	mov	r2, r1
   1fb3c:	mov	r1, r0
   1fb40:	ldr	r0, [pc]	; 1fb48 <__assert_fail@plt+0xd554>
   1fb44:	b	1f420 <__assert_fail@plt+0xce2c>
   1fb48:	andeq	r1, r5, r8, lsl #6
   1fb4c:	mov	r3, r2
   1fb50:	mov	r2, r1
   1fb54:	mov	r1, r0
   1fb58:	ldr	r0, [pc]	; 1fb60 <__assert_fail@plt+0xd56c>
   1fb5c:	b	1f420 <__assert_fail@plt+0xce2c>
   1fb60:	andeq	r1, r5, r4, lsl r3
   1fb64:	push	{r4, r5, r6, lr}
   1fb68:	bl	17994 <__assert_fail@plt+0x53a0>
   1fb6c:	mov	r4, #3
   1fb70:	ldr	r2, [pc, #28]	; 1fb94 <__assert_fail@plt+0xd5a0>
   1fb74:	mov	r5, #2
   1fb78:	mov	r3, #0
   1fb7c:	str	r2, [r0]
   1fb80:	strd	r4, [r0, #8]
   1fb84:	strb	r3, [r0, #19]
   1fb88:	strb	r3, [r0, #18]
   1fb8c:	mov	r0, #1
   1fb90:	pop	{r4, r5, r6, pc}
   1fb94:			; <UNDEFINED> instruction: 0x000139b4
   1fb98:	push	{r4, r5, r6, lr}
   1fb9c:	bl	17994 <__assert_fail@plt+0x53a0>
   1fba0:	mov	r4, #3
   1fba4:	ldr	r2, [pc, #28]	; 1fbc8 <__assert_fail@plt+0xd5d4>
   1fba8:	mov	r5, #3
   1fbac:	mov	r3, #0
   1fbb0:	str	r2, [r0]
   1fbb4:	strd	r4, [r0, #8]
   1fbb8:	strb	r3, [r0, #19]
   1fbbc:	strb	r3, [r0, #18]
   1fbc0:	mov	r0, #1
   1fbc4:	pop	{r4, r5, r6, pc}
   1fbc8:	andeq	r3, r1, r4, ror r9
   1fbcc:	push	{r4, r5, r6, lr}
   1fbd0:	bl	17994 <__assert_fail@plt+0x53a0>
   1fbd4:	mov	r4, #3
   1fbd8:	ldr	r1, [pc, #36]	; 1fc04 <__assert_fail@plt+0xd610>
   1fbdc:	mov	r5, #1
   1fbe0:	mov	r3, #0
   1fbe4:	mov	r2, #1065353216	; 0x3f800000
   1fbe8:	str	r1, [r0]
   1fbec:	strd	r4, [r0, #8]
   1fbf0:	str	r2, [r0, #28]
   1fbf4:	strb	r3, [r0, #19]
   1fbf8:	strb	r3, [r0, #18]
   1fbfc:	mov	r0, #1
   1fc00:	pop	{r4, r5, r6, pc}
   1fc04:	andeq	r3, r1, r4, lsl #29
   1fc08:	push	{r4, r5, r6, lr}
   1fc0c:	bl	17994 <__assert_fail@plt+0x53a0>
   1fc10:	mov	r4, #5
   1fc14:	ldr	r2, [pc, #28]	; 1fc38 <__assert_fail@plt+0xd644>
   1fc18:	mov	r5, #0
   1fc1c:	mov	r3, #0
   1fc20:	str	r2, [r0]
   1fc24:	strd	r4, [r0, #8]
   1fc28:	strb	r3, [r0, #19]
   1fc2c:	strb	r3, [r0, #18]
   1fc30:	mov	r0, #1
   1fc34:	pop	{r4, r5, r6, pc}
   1fc38:	andeq	r3, r1, ip, asr #25
   1fc3c:	cmp	r1, #0
   1fc40:	ldr	r3, [r2]
   1fc44:	beq	1fcc0 <__assert_fail@plt+0xd6cc>
   1fc48:	push	{r4, r5, r6, r7, r8, lr}
   1fc4c:	sub	sp, sp, #8
   1fc50:	ldr	r4, [r1, r3, lsl #2]
   1fc54:	cmp	r4, #0
   1fc58:	beq	1fcc8 <__assert_fail@plt+0xd6d4>
   1fc5c:	add	r3, r3, #1
   1fc60:	str	r3, [r2]
   1fc64:	mov	r6, r0
   1fc68:	mov	r0, r4
   1fc6c:	bl	125dc <getgrnam@plt>
   1fc70:	mov	r5, r0
   1fc74:	bl	11ed4 <endgrent@plt>
   1fc78:	cmp	r5, #0
   1fc7c:	beq	1fcd4 <__assert_fail@plt+0xd6e0>
   1fc80:	ldr	r5, [r5, #8]
   1fc84:	mov	r1, r4
   1fc88:	mov	r0, r6
   1fc8c:	bl	1a98c <__assert_fail@plt+0x8398>
   1fc90:	vldr	s14, [pc, #296]	; 1fdc0 <__assert_fail@plt+0xd7cc>
   1fc94:	vldr	s15, [pc, #296]	; 1fdc4 <__assert_fail@plt+0xd7d0>
   1fc98:	mov	r3, r0
   1fc9c:	ldrd	r0, [r0, #48]	; 0x30
   1fca0:	str	r5, [r3, #40]	; 0x28
   1fca4:	cmp	r1, #0
   1fca8:	cmpeq	r0, #100	; 0x64
   1fcac:	mov	r0, #1
   1fcb0:	vmovcs.f32	s15, s14
   1fcb4:	vstr	s15, [r3, #28]
   1fcb8:	add	sp, sp, #8
   1fcbc:	pop	{r4, r5, r6, r7, r8, pc}
   1fcc0:	mov	r0, r1
   1fcc4:	bx	lr
   1fcc8:	mov	r0, r4
   1fccc:	add	sp, sp, #8
   1fcd0:	pop	{r4, r5, r6, r7, r8, pc}
   1fcd4:	ldr	r1, [pc, #236]	; 1fdc8 <__assert_fail@plt+0xd7d4>
   1fcd8:	mov	r0, r4
   1fcdc:	bl	125e8 <strspn@plt>
   1fce0:	subs	r7, r0, #0
   1fce4:	beq	1fd10 <__assert_fail@plt+0xd71c>
   1fce8:	ldrb	r3, [r4, r7]
   1fcec:	add	r7, r4, r7
   1fcf0:	cmp	r3, #0
   1fcf4:	bne	1fd6c <__assert_fail@plt+0xd778>
   1fcf8:	ldr	r3, [pc, #204]	; 1fdcc <__assert_fail@plt+0xd7d8>
   1fcfc:	mov	r0, r4
   1fd00:	ldr	r1, [r3, #72]	; 0x48
   1fd04:	bl	26544 <__assert_fail@plt+0x13f50>
   1fd08:	mov	r5, r0
   1fd0c:	b	1fc84 <__assert_fail@plt+0xd690>
   1fd10:	ldrb	r5, [r4]
   1fd14:	mov	r2, #5
   1fd18:	cmp	r5, #0
   1fd1c:	beq	1fd54 <__assert_fail@plt+0xd760>
   1fd20:	ldr	r1, [pc, #168]	; 1fdd0 <__assert_fail@plt+0xd7dc>
   1fd24:	bl	120b4 <dcgettext@plt>
   1fd28:	ldr	r3, [pc, #156]	; 1fdcc <__assert_fail@plt+0xd7d8>
   1fd2c:	mov	r2, r4
   1fd30:	ldr	r1, [r3, #72]	; 0x48
   1fd34:	mov	r5, r0
   1fd38:	mov	r0, r7
   1fd3c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1fd40:	mov	r2, r5
   1fd44:	mov	r1, r7
   1fd48:	mov	r3, r0
   1fd4c:	mov	r0, #1
   1fd50:	bl	121ec <error@plt>
   1fd54:	ldr	r1, [pc, #120]	; 1fdd4 <__assert_fail@plt+0xd7e0>
   1fd58:	bl	120b4 <dcgettext@plt>
   1fd5c:	mov	r1, r5
   1fd60:	mov	r2, r0
   1fd64:	mov	r0, #1
   1fd68:	bl	121ec <error@plt>
   1fd6c:	mov	r2, #5
   1fd70:	ldr	r1, [pc, #96]	; 1fdd8 <__assert_fail@plt+0xd7e4>
   1fd74:	mov	r0, r5
   1fd78:	bl	120b4 <dcgettext@plt>
   1fd7c:	ldr	r6, [pc, #72]	; 1fdcc <__assert_fail@plt+0xd7d8>
   1fd80:	mov	r2, r4
   1fd84:	ldr	r1, [r6, #72]	; 0x48
   1fd88:	mov	r8, r0
   1fd8c:	mov	r0, r5
   1fd90:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1fd94:	mov	r2, r7
   1fd98:	ldr	r1, [r6, #72]	; 0x48
   1fd9c:	mov	r4, r0
   1fda0:	mov	r0, #1
   1fda4:	bl	325f0 <__assert_fail@plt+0x1fffc>
   1fda8:	mov	r3, r4
   1fdac:	mov	r2, r8
   1fdb0:	mov	r1, r5
   1fdb4:	str	r0, [sp]
   1fdb8:	mov	r0, #1
   1fdbc:	bl	121ec <error@plt>
   1fdc0:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1fdc4:	svccc	0x007d70a4
   1fdc8:	andeq	r0, r5, r0, lsl lr
   1fdcc:	andeq	r4, r6, ip, ror #28
   1fdd0:	muleq	r5, ip, r3
   1fdd4:	andeq	r1, r5, r4, asr #7
   1fdd8:	andeq	r1, r5, ip, lsl r3
   1fddc:	push	{r4, r5, r6, lr}
   1fde0:	mov	r1, #0
   1fde4:	bl	17b14 <__assert_fail@plt+0x5520>
   1fde8:	mov	r4, #2
   1fdec:	ldr	r2, [pc, #28]	; 1fe10 <__assert_fail@plt+0xd81c>
   1fdf0:	mov	r5, #4
   1fdf4:	mov	r3, #0
   1fdf8:	str	r2, [r0]
   1fdfc:	strd	r4, [r0, #8]
   1fe00:	strb	r3, [r0, #19]
   1fe04:	strb	r3, [r0, #18]
   1fe08:	mov	r0, #1
   1fe0c:	pop	{r4, r5, r6, pc}
   1fe10:	andeq	r4, r1, r0, lsr #19
   1fe14:	push	{r4, r5, r6, lr}
   1fe18:	mov	r1, #0
   1fe1c:	bl	17b14 <__assert_fail@plt+0x5520>
   1fe20:	mov	r4, #4
   1fe24:	ldr	r2, [pc, #28]	; 1fe48 <__assert_fail@plt+0xd854>
   1fe28:	mov	r5, #0
   1fe2c:	mov	r3, #0
   1fe30:	str	r2, [r0]
   1fe34:	strd	r4, [r0, #8]
   1fe38:	strb	r3, [r0, #19]
   1fe3c:	strb	r3, [r0, #18]
   1fe40:	mov	r0, #1
   1fe44:	pop	{r4, r5, r6, pc}
   1fe48:	andeq	r4, r1, r0, ror #25
   1fe4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe50:	subs	r6, r1, #0
   1fe54:	sub	sp, sp, #124	; 0x7c
   1fe58:	beq	1fe88 <__assert_fail@plt+0xd894>
   1fe5c:	ldr	r7, [r2]
   1fe60:	ldr	r4, [r6, r7, lsl #2]
   1fe64:	lsl	r9, r7, #2
   1fe68:	cmp	r4, #0
   1fe6c:	beq	1fe8c <__assert_fail@plt+0xd898>
   1fe70:	mov	r8, r0
   1fe74:	mov	r0, r4
   1fe78:	mov	r5, r2
   1fe7c:	bl	12300 <strlen@plt>
   1fe80:	cmp	r0, #8
   1fe84:	beq	1fe98 <__assert_fail@plt+0xd8a4>
   1fe88:	mov	r4, #0
   1fe8c:	mov	r0, r4
   1fe90:	add	sp, sp, #124	; 0x7c
   1fe94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe98:	ldr	r3, [pc, #1012]	; 20294 <__assert_fail@plt+0xdca0>
   1fe9c:	mov	r2, #6
   1fea0:	ldm	r3, {r0, r1}
   1fea4:	str	r0, [sp, #8]
   1fea8:	strh	r1, [sp, #12]
   1feac:	ldr	r0, [pc, #996]	; 20298 <__assert_fail@plt+0xdca4>
   1feb0:	mov	r1, r4
   1feb4:	bl	12594 <strncmp@plt>
   1feb8:	subs	r3, r0, #0
   1febc:	bne	201b0 <__assert_fail@plt+0xdbbc>
   1fec0:	ldrb	sl, [r4, #6]
   1fec4:	ldrb	fp, [r4, #7]
   1fec8:	cmp	fp, #66	; 0x42
   1fecc:	cmpne	sl, #66	; 0x42
   1fed0:	moveq	r4, #1
   1fed4:	movne	r4, #0
   1fed8:	beq	20064 <__assert_fail@plt+0xda70>
   1fedc:	cmp	sl, #116	; 0x74
   1fee0:	beq	1fe8c <__assert_fail@plt+0xd898>
   1fee4:	add	r0, sp, #8
   1fee8:	mov	r1, sl
   1feec:	bl	1230c <strchr@plt>
   1fef0:	cmp	r0, #0
   1fef4:	beq	1fe8c <__assert_fail@plt+0xd898>
   1fef8:	mov	r1, fp
   1fefc:	add	r0, sp, #8
   1ff00:	bl	1230c <strchr@plt>
   1ff04:	cmp	r0, #0
   1ff08:	beq	1fe8c <__assert_fail@plt+0xd898>
   1ff0c:	add	r9, r6, r9
   1ff10:	add	r7, r7, #1
   1ff14:	ldr	r4, [r9, #4]
   1ff18:	cmp	r4, #0
   1ff1c:	beq	201c4 <__assert_fail@plt+0xdbd0>
   1ff20:	mov	r1, r4
   1ff24:	str	r7, [r5]
   1ff28:	mov	r0, r8
   1ff2c:	bl	1a98c <__assert_fail@plt+0x8398>
   1ff30:	cmp	sl, #97	; 0x61
   1ff34:	mov	r4, r0
   1ff38:	beq	20108 <__assert_fail@plt+0xdb14>
   1ff3c:	bls	200a8 <__assert_fail@plt+0xdab4>
   1ff40:	cmp	sl, #99	; 0x63
   1ff44:	beq	20094 <__assert_fail@plt+0xdaa0>
   1ff48:	cmp	sl, #109	; 0x6d
   1ff4c:	moveq	r2, #3
   1ff50:	streq	r2, [r0, #40]	; 0x28
   1ff54:	bne	200b8 <__assert_fail@plt+0xdac4>
   1ff58:	cmp	fp, #116	; 0x74
   1ff5c:	beq	200e0 <__assert_fail@plt+0xdaec>
   1ff60:	add	r0, sp, #16
   1ff64:	bl	1ac3c <__assert_fail@plt+0x8648>
   1ff68:	ldr	r7, [pc, #812]	; 2029c <__assert_fail@plt+0xdca8>
   1ff6c:	ldr	r0, [r5]
   1ff70:	add	r1, sp, #16
   1ff74:	ldr	r2, [r7, #52]	; 0x34
   1ff78:	ldr	r0, [r6, r0, lsl #2]
   1ff7c:	blx	r2
   1ff80:	subs	r8, r0, #0
   1ff84:	bne	20268 <__assert_fail@plt+0xdc74>
   1ff88:	cmp	fp, #97	; 0x61
   1ff8c:	beq	20184 <__assert_fail@plt+0xdb90>
   1ff90:	bls	20114 <__assert_fail@plt+0xdb20>
   1ff94:	cmp	fp, #99	; 0x63
   1ff98:	beq	2015c <__assert_fail@plt+0xdb68>
   1ff9c:	cmp	fp, #109	; 0x6d
   1ffa0:	bne	20170 <__assert_fail@plt+0xdb7c>
   1ffa4:	ldr	r1, [sp, #96]	; 0x60
   1ffa8:	ldr	r3, [sp, #100]	; 0x64
   1ffac:	str	r1, [r4, #48]	; 0x30
   1ffb0:	str	r3, [r4, #52]	; 0x34
   1ffb4:	ldr	r3, [r7, #28]
   1ffb8:	ldr	r2, [pc, #736]	; 202a0 <__assert_fail@plt+0xdcac>
   1ffbc:	sub	r3, r3, r1
   1ffc0:	vldr	s14, [pc, #692]	; 2027c <__assert_fail@plt+0xdc88>
   1ffc4:	smull	r1, r2, r2, r3
   1ffc8:	add	r2, r2, r3
   1ffcc:	asr	r3, r3, #31
   1ffd0:	rsb	r3, r3, r2, asr #16
   1ffd4:	mov	r2, #0
   1ffd8:	vmov	s15, r3
   1ffdc:	str	r2, [r4, #44]	; 0x2c
   1ffe0:	vcvt.f32.s32	s15, s15
   1ffe4:	vcmpe.f32	s15, s14
   1ffe8:	vmrs	APSR_nzcv, fpscr
   1ffec:	bmi	200a0 <__assert_fail@plt+0xdaac>
   1fff0:	vldr	s14, [pc, #648]	; 20280 <__assert_fail@plt+0xdc8c>
   1fff4:	vcmpe.f32	s15, s14
   1fff8:	vmrs	APSR_nzcv, fpscr
   1fffc:	bmi	20198 <__assert_fail@plt+0xdba4>
   20000:	vldr	s12, [pc, #636]	; 20284 <__assert_fail@plt+0xdc90>
   20004:	vldr	s14, [pc, #636]	; 20288 <__assert_fail@plt+0xdc94>
   20008:	vldr	s13, [pc, #636]	; 2028c <__assert_fail@plt+0xdc98>
   2000c:	vcmpe.f32	s15, s12
   20010:	vmrs	APSR_nzcv, fpscr
   20014:	vmovle.f32	s15, s13
   20018:	vmovgt.f32	s15, s14
   2001c:	ldr	r3, [r5]
   20020:	ldr	r2, [r4]
   20024:	add	r3, r3, #1
   20028:	cmp	r2, #0
   2002c:	vstr	s15, [r4, #28]
   20030:	str	r3, [r5]
   20034:	beq	20204 <__assert_fail@plt+0xdc10>
   20038:	ldr	r3, [pc, #612]	; 202a4 <__assert_fail@plt+0xdcb0>
   2003c:	cmp	r2, r3
   20040:	bne	20254 <__assert_fail@plt+0xdc60>
   20044:	ldrb	r4, [r4, #18]
   20048:	cmp	r4, #0
   2004c:	bne	1fe8c <__assert_fail@plt+0xd898>
   20050:	ldr	r3, [pc, #592]	; 202a8 <__assert_fail@plt+0xdcb4>
   20054:	ldr	r2, [pc, #592]	; 202ac <__assert_fail@plt+0xdcb8>
   20058:	ldr	r1, [pc, #592]	; 202b0 <__assert_fail@plt+0xdcbc>
   2005c:	ldr	r0, [pc, #592]	; 202b4 <__assert_fail@plt+0xdcc0>
   20060:	bl	125f4 <__assert_fail@plt>
   20064:	mov	r2, #5
   20068:	ldr	r1, [pc, #584]	; 202b8 <__assert_fail@plt+0xdcc4>
   2006c:	str	r3, [sp, #4]
   20070:	bl	120b4 <dcgettext@plt>
   20074:	ldr	r3, [sp, #4]
   20078:	mov	r1, r3
   2007c:	mov	r2, r0
   20080:	mov	r0, r3
   20084:	bl	121ec <error@plt>
   20088:	ldr	r3, [sp, #4]
   2008c:	mov	r4, r3
   20090:	b	1fe8c <__assert_fail@plt+0xd898>
   20094:	mov	r2, #2
   20098:	str	r2, [r0, #40]	; 0x28
   2009c:	b	1ff58 <__assert_fail@plt+0xd964>
   200a0:	vldr	s15, [pc, #488]	; 20290 <__assert_fail@plt+0xdc9c>
   200a4:	b	2001c <__assert_fail@plt+0xda28>
   200a8:	cmp	sl, #66	; 0x42
   200ac:	moveq	r2, #1
   200b0:	streq	r2, [r0, #40]	; 0x28
   200b4:	beq	1ff58 <__assert_fail@plt+0xd964>
   200b8:	mov	r1, sl
   200bc:	add	r0, sp, #8
   200c0:	bl	1230c <strchr@plt>
   200c4:	ldr	r3, [pc, #476]	; 202a8 <__assert_fail@plt+0xdcb4>
   200c8:	cmp	r0, #0
   200cc:	beq	201a0 <__assert_fail@plt+0xdbac>
   200d0:	ldr	r2, [pc, #484]	; 202bc <__assert_fail@plt+0xdcc8>
   200d4:	ldr	r1, [pc, #468]	; 202b0 <__assert_fail@plt+0xdcbc>
   200d8:	ldr	r0, [pc, #480]	; 202c0 <__assert_fail@plt+0xdccc>
   200dc:	bl	125f4 <__assert_fail@plt>
   200e0:	ldr	r3, [r5]
   200e4:	ldr	r2, [pc, #472]	; 202c4 <__assert_fail@plt+0xdcd0>
   200e8:	add	r0, r4, #48	; 0x30
   200ec:	ldr	r1, [r6, r3, lsl #2]
   200f0:	bl	30420 <__assert_fail@plt+0x1de2c>
   200f4:	subs	r7, r0, #0
   200f8:	beq	20218 <__assert_fail@plt+0xdc24>
   200fc:	ldr	r1, [r4, #48]	; 0x30
   20100:	ldr	r7, [pc, #404]	; 2029c <__assert_fail@plt+0xdca8>
   20104:	b	1ffb4 <__assert_fail@plt+0xd9c0>
   20108:	mov	r2, #0
   2010c:	str	r2, [r0, #40]	; 0x28
   20110:	b	1ff58 <__assert_fail@plt+0xd964>
   20114:	cmp	fp, #66	; 0x42
   20118:	bne	20170 <__assert_fail@plt+0xdb7c>
   2011c:	mvn	r3, #0
   20120:	str	r3, [r4, #48]	; 0x30
   20124:	str	r3, [r4, #52]	; 0x34
   20128:	mov	r2, #5
   2012c:	ldr	r1, [pc, #404]	; 202c8 <__assert_fail@plt+0xdcd4>
   20130:	bl	120b4 <dcgettext@plt>
   20134:	ldr	r3, [r5]
   20138:	ldr	r1, [r6, r3, lsl #2]
   2013c:	mov	r4, r0
   20140:	mov	r0, r8
   20144:	bl	1be34 <__assert_fail@plt+0x9840>
   20148:	mov	r2, r4
   2014c:	mov	r1, r8
   20150:	mov	r3, r0
   20154:	mov	r0, #1
   20158:	bl	121ec <error@plt>
   2015c:	ldr	r1, [sp, #104]	; 0x68
   20160:	ldr	r3, [sp, #108]	; 0x6c
   20164:	str	r1, [r4, #48]	; 0x30
   20168:	str	r3, [r4, #52]	; 0x34
   2016c:	b	1ffb4 <__assert_fail@plt+0xd9c0>
   20170:	ldr	r3, [pc, #340]	; 202cc <__assert_fail@plt+0xdcd8>
   20174:	ldr	r2, [pc, #340]	; 202d0 <__assert_fail@plt+0xdcdc>
   20178:	ldr	r1, [pc, #304]	; 202b0 <__assert_fail@plt+0xdcbc>
   2017c:	ldr	r0, [pc, #316]	; 202c0 <__assert_fail@plt+0xdccc>
   20180:	bl	125f4 <__assert_fail@plt>
   20184:	ldr	r1, [sp, #88]	; 0x58
   20188:	ldr	r3, [sp, #92]	; 0x5c
   2018c:	str	r1, [r4, #48]	; 0x30
   20190:	str	r3, [r4, #52]	; 0x34
   20194:	b	1ffb4 <__assert_fail@plt+0xd9c0>
   20198:	vldr	s15, [pc, #232]	; 20288 <__assert_fail@plt+0xdc94>
   2019c:	b	2001c <__assert_fail@plt+0xda28>
   201a0:	ldr	r2, [pc, #300]	; 202d4 <__assert_fail@plt+0xdce0>
   201a4:	ldr	r1, [pc, #260]	; 202b0 <__assert_fail@plt+0xdcbc>
   201a8:	ldr	r0, [pc, #296]	; 202d8 <__assert_fail@plt+0xdce4>
   201ac:	bl	125f4 <__assert_fail@plt>
   201b0:	ldr	r3, [pc, #240]	; 202a8 <__assert_fail@plt+0xdcb4>
   201b4:	ldr	r2, [pc, #288]	; 202dc <__assert_fail@plt+0xdce8>
   201b8:	ldr	r1, [pc, #240]	; 202b0 <__assert_fail@plt+0xdcbc>
   201bc:	ldr	r0, [pc, #284]	; 202e0 <__assert_fail@plt+0xdcec>
   201c0:	bl	125f4 <__assert_fail@plt>
   201c4:	mov	r2, #5
   201c8:	ldr	r1, [pc, #276]	; 202e4 <__assert_fail@plt+0xdcf0>
   201cc:	mov	r0, r4
   201d0:	bl	120b4 <dcgettext@plt>
   201d4:	ldr	r3, [pc, #192]	; 2029c <__assert_fail@plt+0xdca8>
   201d8:	ldr	r2, [r5]
   201dc:	ldr	r1, [r3, #72]	; 0x48
   201e0:	ldr	r2, [r6, r2, lsl #2]
   201e4:	mov	r7, r0
   201e8:	mov	r0, r4
   201ec:	bl	325f0 <__assert_fail@plt+0x1fffc>
   201f0:	mov	r2, r7
   201f4:	mov	r1, r4
   201f8:	mov	r3, r0
   201fc:	mov	r0, #1
   20200:	bl	121ec <error@plt>
   20204:	ldr	r3, [pc, #156]	; 202a8 <__assert_fail@plt+0xdcb4>
   20208:	ldr	r2, [pc, #216]	; 202e8 <__assert_fail@plt+0xdcf4>
   2020c:	ldr	r1, [pc, #156]	; 202b0 <__assert_fail@plt+0xdcbc>
   20210:	ldr	r0, [pc, #212]	; 202ec <__assert_fail@plt+0xdcf8>
   20214:	bl	125f4 <__assert_fail@plt>
   20218:	mov	r2, #5
   2021c:	ldr	r1, [pc, #204]	; 202f0 <__assert_fail@plt+0xdcfc>
   20220:	bl	120b4 <dcgettext@plt>
   20224:	ldr	r3, [pc, #112]	; 2029c <__assert_fail@plt+0xdca8>
   20228:	ldr	r2, [r5]
   2022c:	ldr	r1, [r3, #72]	; 0x48
   20230:	ldr	r2, [r6, r2, lsl #2]
   20234:	mov	r4, r0
   20238:	mov	r0, r7
   2023c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   20240:	mov	r2, r4
   20244:	mov	r1, r7
   20248:	mov	r3, r0
   2024c:	mov	r0, #1
   20250:	bl	121ec <error@plt>
   20254:	ldr	r3, [pc, #76]	; 202a8 <__assert_fail@plt+0xdcb4>
   20258:	mov	r2, #1648	; 0x670
   2025c:	ldr	r1, [pc, #76]	; 202b0 <__assert_fail@plt+0xdcbc>
   20260:	ldr	r0, [pc, #140]	; 202f4 <__assert_fail@plt+0xdd00>
   20264:	bl	125f4 <__assert_fail@plt>
   20268:	bl	12348 <__errno_location@plt>
   2026c:	ldr	r3, [r5]
   20270:	ldr	r1, [r6, r3, lsl #2]
   20274:	ldr	r0, [r0]
   20278:	bl	1bea8 <__assert_fail@plt+0x98b4>
   2027c:	stclcc	12, cr12, [ip, #820]	; 0x334
   20280:	svccc	0x00800000
   20284:	sbcmi	r0, r8, #0
   20288:			; <UNDEFINED> instruction: 0x3e99999a
   2028c:	mcrcc	14, 6, sl, cr7, cr4, {0}
   20290:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   20294:	andeq	r1, r5, r4, ror #10
   20298:	strdeq	r1, [r5], -ip
   2029c:	andeq	r4, r6, ip, ror #28
   202a0:	eorgt	r4, lr, #29360128	; 0x1c00000
   202a4:	andeq	r4, r1, r8, asr #20
   202a8:	andeq	r0, r5, r0, asr r6
   202ac:	andeq	r0, r0, r1, ror r6
   202b0:	andeq	r1, r5, r0, lsr #3
   202b4:	andeq	r1, r5, r0, asr r5
   202b8:	andeq	r1, r5, r0, lsr r4
   202bc:	andeq	r0, r0, ip, asr #12
   202c0:	andeq	r2, r5, r8, lsl r6
   202c4:	andeq	r4, r6, r0, lsl #29
   202c8:	andeq	r1, r5, ip, ror #9
   202cc:	andeq	r0, r5, r0, ror #12
   202d0:	strdeq	r0, [r0], -r2
   202d4:	andeq	r0, r0, fp, asr #12
   202d8:	muleq	r5, r8, r4
   202dc:	andeq	r0, r0, r3, lsl r6
   202e0:	andeq	r1, r5, r4, lsl #8
   202e4:	andeq	r1, r5, r8, ror r4
   202e8:	andeq	r0, r0, pc, ror #12
   202ec:	andeq	r1, r5, r0, lsl r5
   202f0:			; <UNDEFINED> instruction: 0x000514b0
   202f4:	andeq	r1, r5, ip, lsr #10
   202f8:	ldr	ip, [pc, #132]	; 20384 <__assert_fail@plt+0xdd90>
   202fc:	ldr	ip, [ip]
   20300:	cmp	ip, #0
   20304:	bne	2032c <__assert_fail@plt+0xdd38>
   20308:	push	{r4, r5, r6, r7, r8, lr}
   2030c:	mov	r5, r1
   20310:	mov	r6, r2
   20314:	mov	r4, r0
   20318:	bl	34554 <__assert_fail@plt+0x21f60>
   2031c:	subs	r7, r0, #0
   20320:	bne	20330 <__assert_fail@plt+0xdd3c>
   20324:	mov	r0, r7
   20328:	pop	{r4, r5, r6, r7, r8, pc}
   2032c:	b	3471c <__assert_fail@plt+0x22128>
   20330:	bl	12348 <__errno_location@plt>
   20334:	ldr	r3, [r0]
   20338:	cmp	r3, #2
   2033c:	beq	20348 <__assert_fail@plt+0xdd54>
   20340:	cmp	r3, #20
   20344:	bne	20324 <__assert_fail@plt+0xdd30>
   20348:	ldr	r3, [pc, #56]	; 20388 <__assert_fail@plt+0xdd94>
   2034c:	ldr	r3, [r3, #44]	; 0x2c
   20350:	tst	r3, #2
   20354:	bne	2036c <__assert_fail@plt+0xdd78>
   20358:	mov	r2, r6
   2035c:	mov	r1, r5
   20360:	mov	r0, r4
   20364:	pop	{r4, r5, r6, r7, r8, lr}
   20368:	b	3471c <__assert_fail@plt+0x22128>
   2036c:	ldr	r3, [pc, #24]	; 2038c <__assert_fail@plt+0xdd98>
   20370:	mov	r2, r5
   20374:	ldr	r1, [pc, #20]	; 20390 <__assert_fail@plt+0xdd9c>
   20378:	ldr	r0, [r3]
   2037c:	bl	1233c <fprintf@plt>
   20380:	b	20358 <__assert_fail@plt+0xdd64>
   20384:	andeq	r4, r6, r0, asr #28
   20388:	andeq	r4, r6, ip, ror #28
   2038c:	andeq	r4, r6, r8, asr #10
   20390:	andeq	r1, r5, ip, ror #10
   20394:	subs	r0, r1, #0
   20398:	bxeq	lr
   2039c:	ldr	r3, [r2]
   203a0:	ldr	r0, [r0, r3, lsl #2]
   203a4:	cmp	r0, #0
   203a8:	bxeq	lr
   203ac:	add	r3, r3, #1
   203b0:	push	{r4, lr}
   203b4:	str	r3, [r2]
   203b8:	bl	261ac <__assert_fail@plt+0x13bb8>
   203bc:	ldr	ip, [pc, #104]	; 2042c <__assert_fail@plt+0xde38>
   203c0:	ldr	r3, [pc, #104]	; 20430 <__assert_fail@plt+0xde3c>
   203c4:	ldr	r2, [ip]
   203c8:	cmp	r2, #0
   203cc:	str	r0, [r3, #60]	; 0x3c
   203d0:	beq	203f8 <__assert_fail@plt+0xde04>
   203d4:	mov	r0, r2
   203d8:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   203dc:	mov	r3, #0
   203e0:	mov	r2, #1065353216	; 0x3f800000
   203e4:	strb	r3, [r0, #19]
   203e8:	strb	r3, [r0, #18]
   203ec:	str	r2, [r0, #28]
   203f0:	mov	r0, #1
   203f4:	pop	{r4, pc}
   203f8:	ldr	lr, [pc, #52]	; 20434 <__assert_fail@plt+0xde40>
   203fc:	mov	r1, r2
   20400:	mov	r3, lr
   20404:	ldr	r0, [r3, #20]
   20408:	add	r1, r1, #1
   2040c:	cmp	r0, #0
   20410:	beq	203d4 <__assert_fail@plt+0xdde0>
   20414:	ldr	r0, [r3, #16]!
   20418:	cmp	r0, #1
   2041c:	bne	20404 <__assert_fail@plt+0xde10>
   20420:	add	r2, lr, r1, lsl #4
   20424:	str	r2, [ip]
   20428:	b	203d4 <__assert_fail@plt+0xdde0>
   2042c:	ldrdeq	r4, [r6], -r0
   20430:	andeq	r4, r6, ip, ror #28
   20434:	andeq	r0, r5, r0, ror r6
   20438:	push	{r4, r5, r6, lr}
   2043c:	subs	r5, r1, #0
   20440:	beq	204ac <__assert_fail@plt+0xdeb8>
   20444:	ldr	r3, [r2]
   20448:	ldr	r3, [r5, r3, lsl #2]
   2044c:	cmp	r3, #0
   20450:	beq	204a4 <__assert_fail@plt+0xdeb0>
   20454:	mov	r4, r2
   20458:	mov	r6, r0
   2045c:	bl	11f28 <is_selinux_enabled@plt>
   20460:	cmp	r0, #0
   20464:	ble	204b4 <__assert_fail@plt+0xdec0>
   20468:	mov	r0, r6
   2046c:	mov	r1, #0
   20470:	bl	1a98c <__assert_fail@plt+0x8398>
   20474:	ldr	r3, [r4]
   20478:	ldr	r2, [pc, #84]	; 204d4 <__assert_fail@plt+0xdee0>
   2047c:	mov	r1, #0
   20480:	ldr	r3, [r5, r3, lsl #2]
   20484:	str	r3, [r0, #40]	; 0x28
   20488:	ldr	r3, [r4]
   2048c:	strb	r1, [r0, #18]
   20490:	add	r3, r3, #1
   20494:	str	r2, [r0, #28]
   20498:	str	r3, [r4]
   2049c:	mov	r0, #1
   204a0:	pop	{r4, r5, r6, pc}
   204a4:	mov	r0, r3
   204a8:	pop	{r4, r5, r6, pc}
   204ac:	mov	r0, r5
   204b0:	pop	{r4, r5, r6, pc}
   204b4:	mov	r2, #5
   204b8:	ldr	r1, [pc, #24]	; 204d8 <__assert_fail@plt+0xdee4>
   204bc:	mov	r0, #0
   204c0:	bl	120b4 <dcgettext@plt>
   204c4:	mov	r1, #0
   204c8:	mov	r2, r0
   204cc:	mov	r0, #1
   204d0:	bl	121ec <error@plt>
   204d4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   204d8:	strdeq	r1, [r5], -r4
   204dc:	push	{r4, lr}
   204e0:	ldr	r4, [pc, #140]	; 20574 <__assert_fail@plt+0xdf80>
   204e4:	ldrb	r3, [r4, #36]	; 0x24
   204e8:	cmp	r3, #0
   204ec:	beq	204f8 <__assert_fail@plt+0xdf04>
   204f0:	mov	r0, #1
   204f4:	pop	{r4, pc}
   204f8:	ldr	r2, [r4, #28]
   204fc:	add	r0, r4, #28
   20500:	add	r2, r2, #86016	; 0x15000
   20504:	add	r2, r2, #384	; 0x180
   20508:	str	r3, [r4, #32]
   2050c:	str	r2, [r4, #28]
   20510:	bl	1227c <localtime@plt>
   20514:	ldr	r1, [r4, #28]
   20518:	cmp	r0, #0
   2051c:	beq	20550 <__assert_fail@plt+0xdf5c>
   20520:	ldm	r0, {r3, ip}
   20524:	ldr	r2, [r0, #8]
   20528:	mov	r0, #3600	; 0xe10
   2052c:	rsb	ip, ip, ip, lsl #4
   20530:	add	ip, r3, ip, lsl #2
   20534:	mla	r3, r0, r2, ip
   20538:	sub	r3, r1, r3
   2053c:	mov	r2, #1
   20540:	str	r3, [r4, #28]
   20544:	strb	r2, [r4, #36]	; 0x24
   20548:	mov	r0, #1
   2054c:	pop	{r4, pc}
   20550:	ldr	r3, [pc, #32]	; 20578 <__assert_fail@plt+0xdf84>
   20554:	asr	r2, r1, #31
   20558:	ldr	r0, [pc, #28]	; 2057c <__assert_fail@plt+0xdf88>
   2055c:	smull	ip, r3, r3, r1
   20560:	add	r3, r3, r1
   20564:	rsb	r3, r2, r3, asr #16
   20568:	mul	r3, r0, r3
   2056c:	sub	r3, r1, r3
   20570:	b	20538 <__assert_fail@plt+0xdf44>
   20574:	andeq	r4, r6, ip, ror #28
   20578:	eorgt	r4, lr, #29360128	; 0x1c00000
   2057c:	andeq	r5, r1, r0, lsl #3
   20580:	push	{r4, lr}
   20584:	mov	r1, #0
   20588:	bl	1a98c <__assert_fail@plt+0x8398>
   2058c:	mov	r4, r0
   20590:	add	r1, r0, #40	; 0x28
   20594:	ldr	r0, [pc, #24]	; 205b4 <__assert_fail@plt+0xdfc0>
   20598:	bl	1f0e4 <__assert_fail@plt+0xcaf0>
   2059c:	ldr	r2, [pc, #20]	; 205b8 <__assert_fail@plt+0xdfc4>
   205a0:	mov	r3, #1065353216	; 0x3f800000
   205a4:	mov	r0, #1
   205a8:	str	r2, [r4, #16]
   205ac:	str	r3, [r4, #28]
   205b0:	pop	{r4, pc}
   205b4:	andeq	r0, r5, r4, ror #29
   205b8:	andeq	r0, r0, r1, lsl #2
   205bc:	push	{r4, lr}
   205c0:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   205c4:	mov	r4, r0
   205c8:	add	r1, r0, #40	; 0x28
   205cc:	ldr	r0, [pc, #24]	; 205ec <__assert_fail@plt+0xdff8>
   205d0:	bl	1f0e4 <__assert_fail@plt+0xcaf0>
   205d4:	mov	r0, #1
   205d8:	mov	r3, #1065353216	; 0x3f800000
   205dc:	strb	r0, [r4, #17]
   205e0:	strb	r0, [r4, #16]
   205e4:	str	r3, [r4, #28]
   205e8:	pop	{r4, pc}
   205ec:	andeq	r0, r5, r4, ror #29
   205f0:	cmp	r1, #0
   205f4:	ldr	r3, [r2]
   205f8:	beq	20764 <__assert_fail@plt+0xe170>
   205fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   20600:	sub	sp, sp, #12
   20604:	ldr	r4, [r1, r3, lsl #2]
   20608:	cmp	r4, #0
   2060c:	beq	2076c <__assert_fail@plt+0xe178>
   20610:	ldr	r6, [pc, #368]	; 20788 <__assert_fail@plt+0xe194>
   20614:	add	r3, r3, #1
   20618:	str	r3, [r2]
   2061c:	ldrb	r2, [r6, #4]
   20620:	mov	r5, r0
   20624:	cmp	r2, #0
   20628:	beq	20708 <__assert_fail@plt+0xe114>
   2062c:	ldr	r3, [pc, #344]	; 2078c <__assert_fail@plt+0xe198>
   20630:	ldrb	r6, [r3, #17]
   20634:	cmp	r6, #0
   20638:	bne	206b8 <__assert_fail@plt+0xe0c4>
   2063c:	ldrb	r3, [r3, #16]
   20640:	cmp	r3, #0
   20644:	beq	206b8 <__assert_fail@plt+0xe0c4>
   20648:	mov	r1, #47	; 0x2f
   2064c:	mov	r0, r4
   20650:	bl	1230c <strchr@plt>
   20654:	cmp	r0, #0
   20658:	beq	206b8 <__assert_fail@plt+0xe0c4>
   2065c:	mov	r2, #5
   20660:	ldr	r1, [pc, #296]	; 20790 <__assert_fail@plt+0xe19c>
   20664:	mov	r0, r6
   20668:	bl	120b4 <dcgettext@plt>
   2066c:	ldr	r1, [pc, #288]	; 20794 <__assert_fail@plt+0xe1a0>
   20670:	mov	r7, r0
   20674:	mov	r0, r6
   20678:	bl	1be34 <__assert_fail@plt+0x9840>
   2067c:	ldr	r1, [pc, #276]	; 20798 <__assert_fail@plt+0xe1a4>
   20680:	mov	r8, r0
   20684:	mov	r0, #1
   20688:	bl	1be34 <__assert_fail@plt+0x9840>
   2068c:	ldr	r1, [pc, #264]	; 2079c <__assert_fail@plt+0xe1a8>
   20690:	mov	r9, r0
   20694:	mov	r0, #2
   20698:	bl	1be34 <__assert_fail@plt+0x9840>
   2069c:	str	r9, [sp]
   206a0:	mov	r3, r8
   206a4:	mov	r2, r7
   206a8:	mov	r1, r6
   206ac:	str	r0, [sp, #4]
   206b0:	mov	r0, r6
   206b4:	bl	121ec <error@plt>
   206b8:	mov	r1, r4
   206bc:	mov	r0, r5
   206c0:	bl	1a98c <__assert_fail@plt+0x8398>
   206c4:	mov	r3, #0
   206c8:	ldr	r1, [pc, #208]	; 207a0 <__assert_fail@plt+0xe1ac>
   206cc:	mov	r5, r0
   206d0:	str	r4, [r0, #40]	; 0x28
   206d4:	mov	r0, r4
   206d8:	strb	r3, [r5, #19]
   206dc:	strb	r3, [r5, #18]
   206e0:	bl	12528 <strpbrk@plt>
   206e4:	vldr	s14, [pc, #148]	; 20780 <__assert_fail@plt+0xe18c>
   206e8:	vldr	s15, [pc, #148]	; 20784 <__assert_fail@plt+0xe190>
   206ec:	mov	r1, #1
   206f0:	cmp	r0, #0
   206f4:	mov	r0, r1
   206f8:	vmoveq.f32	s15, s14
   206fc:	vstr	s15, [r5, #28]
   20700:	add	sp, sp, #12
   20704:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20708:	ldr	r1, [pc, #148]	; 207a4 <__assert_fail@plt+0xe1b0>
   2070c:	mov	r0, r1
   20710:	bl	12210 <fnmatch@plt>
   20714:	subs	r2, r0, #0
   20718:	bne	2077c <__assert_fail@plt+0xe188>
   2071c:	ldr	r1, [pc, #128]	; 207a4 <__assert_fail@plt+0xe1b0>
   20720:	ldr	r0, [pc, #128]	; 207a8 <__assert_fail@plt+0xe1b4>
   20724:	bl	12210 <fnmatch@plt>
   20728:	cmp	r0, #0
   2072c:	beq	2077c <__assert_fail@plt+0xe188>
   20730:	mov	r2, #16
   20734:	ldr	r1, [pc, #104]	; 207a4 <__assert_fail@plt+0xe1b0>
   20738:	ldr	r0, [pc, #104]	; 207a8 <__assert_fail@plt+0xe1b4>
   2073c:	bl	12210 <fnmatch@plt>
   20740:	cmp	r0, #0
   20744:	bne	2077c <__assert_fail@plt+0xe188>
   20748:	mov	r3, #1
   2074c:	strb	r3, [r6, #4]
   20750:	ldr	r3, [pc, #52]	; 2078c <__assert_fail@plt+0xe198>
   20754:	ldrb	r6, [r3, #17]
   20758:	cmp	r6, #0
   2075c:	bne	206b8 <__assert_fail@plt+0xe0c4>
   20760:	b	2063c <__assert_fail@plt+0xe048>
   20764:	mov	r0, r1
   20768:	bx	lr
   2076c:	mov	r1, r4
   20770:	mov	r0, r1
   20774:	add	sp, sp, #12
   20778:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2077c:	bl	126bc <__assert_fail@plt+0xc8>
   20780:	stclcc	12, cr12, [ip, #820]	; 0x334
   20784:	svccc	0x004ccccd
   20788:	ldrdeq	r4, [r6], -r0
   2078c:	andeq	r4, r6, ip, ror #28
   20790:	andeq	r1, r5, r0, lsr r6
   20794:	andeq	r1, r5, r4, ror #13
   20798:	andeq	r3, r5, r4, lsl #27
   2079c:	andeq	r1, r5, ip, ror #13
   207a0:	strdeq	r1, [r5], -r8
   207a4:	andeq	r1, r5, r8, lsr #12
   207a8:	andeq	r1, r5, ip, lsr #12
   207ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207b0:	mov	r4, r1
   207b4:	sub	sp, sp, #44	; 0x2c
   207b8:	mov	r6, r2
   207bc:	mov	sl, r0
   207c0:	ldr	r1, [pc, #824]	; 20b00 <__assert_fail@plt+0xe50c>
   207c4:	mov	r2, #5
   207c8:	mov	r0, #0
   207cc:	bl	120b4 <dcgettext@plt>
   207d0:	cmp	r4, #0
   207d4:	ldr	r7, [r6]
   207d8:	str	r0, [sp, #12]
   207dc:	beq	20a08 <__assert_fail@plt+0xe414>
   207e0:	ldr	r5, [r4, r7, lsl #2]
   207e4:	cmp	r5, #0
   207e8:	beq	20a48 <__assert_fail@plt+0xe454>
   207ec:	add	r3, r7, #1
   207f0:	ldr	r9, [pc, #780]	; 20b04 <__assert_fail@plt+0xe510>
   207f4:	str	r3, [r6]
   207f8:	ldrb	r3, [r5]
   207fc:	ldr	r2, [r9, #32]
   20800:	ldr	r8, [r9, #28]
   20804:	cmp	r3, #45	; 0x2d
   20808:	str	r2, [sp, #16]
   2080c:	beq	20a14 <__assert_fail@plt+0xe420>
   20810:	cmp	r3, #43	; 0x2b
   20814:	beq	20a30 <__assert_fail@plt+0xe43c>
   20818:	cmp	r3, #45	; 0x2d
   2081c:	movne	r3, #2
   20820:	movne	fp, r5
   20824:	strne	r3, [sp, #20]
   20828:	beq	20a20 <__assert_fail@plt+0xe42c>
   2082c:	ldr	r3, [pc, #724]	; 20b08 <__assert_fail@plt+0xe514>
   20830:	add	r2, sp, #24
   20834:	mov	r1, #0
   20838:	mov	r0, fp
   2083c:	bl	35cc4 <__assert_fail@plt+0x236d0>
   20840:	subs	r4, r0, #0
   20844:	streq	r7, [r6]
   20848:	beq	20a08 <__assert_fail@plt+0xe414>
   2084c:	vldr	d7, [pc, #644]	; 20ad8 <__assert_fail@plt+0xe4e4>
   20850:	vldr	d0, [sp, #24]
   20854:	add	r0, sp, #32
   20858:	vmul.f64	d0, d0, d7
   2085c:	bl	12294 <modf@plt>
   20860:	vldr	d7, [pc, #632]	; 20ae0 <__assert_fail@plt+0xe4ec>
   20864:	vmul.f64	d0, d0, d7
   20868:	vcmpe.f64	d0, d7
   2086c:	vmrs	APSR_nzcv, fpscr
   20870:	bpl	20aac <__assert_fail@plt+0xe4b8>
   20874:	vmov	s15, r8
   20878:	vldr	d6, [sp, #32]
   2087c:	vcvt.f64.s32	d7, s15
   20880:	vcmpe.f64	d6, #0.0
   20884:	vmrs	APSR_nzcv, fpscr
   20888:	vsub.f64	d7, d7, d6
   2088c:	movmi	r3, #1
   20890:	movpl	r3, #0
   20894:	vcvt.s32.f64	s15, d7
   20898:	vmov	r6, s15
   2089c:	cmp	r6, r8
   208a0:	movle	r8, #0
   208a4:	movgt	r8, #1
   208a8:	cmp	r8, r3
   208ac:	bne	20ac0 <__assert_fail@plt+0xe4cc>
   208b0:	vldr	s15, [sp, #16]
   208b4:	vcvt.f64.s32	d7, s15
   208b8:	vcmpe.f64	d0, d7
   208bc:	vsub.f64	d7, d7, d0
   208c0:	vmrs	APSR_nzcv, fpscr
   208c4:	vcvt.s32.f64	s15, d7
   208c8:	vmov	r7, s15
   208cc:	addgt	r7, r7, #998244352	; 0x3b800000
   208d0:	addgt	r7, r7, #1753088	; 0x1ac000
   208d4:	addgt	r7, r7, #2560	; 0xa00
   208d8:	subgt	r6, r6, #1
   208dc:	mov	r1, r5
   208e0:	mov	r0, sl
   208e4:	bl	1a98c <__assert_fail@plt+0x8398>
   208e8:	ldr	r3, [r9, #28]
   208ec:	ldr	r2, [pc, #536]	; 20b0c <__assert_fail@plt+0xe518>
   208f0:	sub	r3, r3, r6
   208f4:	vldr	s14, [pc, #492]	; 20ae8 <__assert_fail@plt+0xe4f4>
   208f8:	smull	r1, r2, r2, r3
   208fc:	ldr	r1, [sp, #20]
   20900:	add	r2, r2, r3
   20904:	asr	r3, r3, #31
   20908:	rsb	r3, r3, r2, asr #16
   2090c:	vmov	s15, r3
   20910:	vcvt.f32.s32	s15, s15
   20914:	vcmpe.f32	s15, s14
   20918:	vmrs	APSR_nzcv, fpscr
   2091c:	mov	r5, r0
   20920:	str	r1, [r0, #44]	; 0x2c
   20924:	str	r6, [r0, #48]	; 0x30
   20928:	str	r7, [r0, #52]	; 0x34
   2092c:	bmi	20a40 <__assert_fail@plt+0xe44c>
   20930:	vldr	s14, [pc, #436]	; 20aec <__assert_fail@plt+0xe4f8>
   20934:	vcmpe.f32	s15, s14
   20938:	vmrs	APSR_nzcv, fpscr
   2093c:	bmi	20aa4 <__assert_fail@plt+0xe4b0>
   20940:	vldr	s12, [pc, #424]	; 20af0 <__assert_fail@plt+0xe4fc>
   20944:	vldr	s14, [pc, #424]	; 20af4 <__assert_fail@plt+0xe500>
   20948:	vldr	s13, [pc, #424]	; 20af8 <__assert_fail@plt+0xe504>
   2094c:	vcmpe.f32	s15, s12
   20950:	vmrs	APSR_nzcv, fpscr
   20954:	vmovle.f32	s15, s13
   20958:	vmovgt.f32	s15, s14
   2095c:	ldr	r3, [r9, #44]	; 0x2c
   20960:	vstr	s15, [r5, #28]
   20964:	tst	r3, #1
   20968:	beq	20a08 <__assert_fail@plt+0xe414>
   2096c:	ldr	r6, [pc, #412]	; 20b10 <__assert_fail@plt+0xe51c>
   20970:	ldr	r2, [r5, #4]
   20974:	ldr	r1, [pc, #408]	; 20b14 <__assert_fail@plt+0xe520>
   20978:	ldr	r0, [r6]
   2097c:	bl	1233c <fprintf@plt>
   20980:	ldr	r3, [sp, #20]
   20984:	ldr	r0, [r6]
   20988:	cmp	r3, #0
   2098c:	beq	20a58 <__assert_fail@plt+0xe464>
   20990:	cmp	r3, #1
   20994:	beq	20a98 <__assert_fail@plt+0xe4a4>
   20998:	ldr	r3, [pc, #376]	; 20b18 <__assert_fail@plt+0xe524>
   2099c:	ldr	r2, [pc, #376]	; 20b1c <__assert_fail@plt+0xe528>
   209a0:	ldr	r1, [pc, #376]	; 20b20 <__assert_fail@plt+0xe52c>
   209a4:	bl	1233c <fprintf@plt>
   209a8:	ldr	r7, [r5, #48]	; 0x30
   209ac:	add	r0, sp, #32
   209b0:	ldr	r8, [r6]
   209b4:	str	r7, [sp, #32]
   209b8:	bl	120a8 <ctime@plt>
   209bc:	mov	r2, r7
   209c0:	asr	r3, r7, #31
   209c4:	ldr	r1, [pc, #344]	; 20b24 <__assert_fail@plt+0xe530>
   209c8:	str	r0, [sp]
   209cc:	mov	r0, r8
   209d0:	bl	1233c <fprintf@plt>
   209d4:	ldr	r5, [r5, #48]	; 0x30
   209d8:	add	r0, sp, #32
   209dc:	add	r5, r5, #86016	; 0x15000
   209e0:	add	r5, r5, #384	; 0x180
   209e4:	ldr	r6, [r6]
   209e8:	str	r5, [sp, #32]
   209ec:	bl	120a8 <ctime@plt>
   209f0:	mov	r2, r5
   209f4:	asr	r3, r5, #31
   209f8:	ldr	r1, [pc, #296]	; 20b28 <__assert_fail@plt+0xe534>
   209fc:	str	r0, [sp]
   20a00:	mov	r0, r6
   20a04:	bl	1233c <fprintf@plt>
   20a08:	mov	r0, r4
   20a0c:	add	sp, sp, #44	; 0x2c
   20a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a14:	add	r8, r8, #86016	; 0x15000
   20a18:	add	r8, r8, #380	; 0x17c
   20a1c:	add	r8, r8, #3
   20a20:	mov	r3, #0
   20a24:	add	fp, r5, #1
   20a28:	str	r3, [sp, #20]
   20a2c:	b	2082c <__assert_fail@plt+0xe238>
   20a30:	mov	r3, #1
   20a34:	add	fp, r5, #1
   20a38:	str	r3, [sp, #20]
   20a3c:	b	2082c <__assert_fail@plt+0xe238>
   20a40:	vldr	s15, [pc, #180]	; 20afc <__assert_fail@plt+0xe508>
   20a44:	b	2095c <__assert_fail@plt+0xe368>
   20a48:	mov	r4, r5
   20a4c:	mov	r0, r4
   20a50:	add	sp, sp, #44	; 0x2c
   20a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a58:	ldr	r3, [pc, #204]	; 20b2c <__assert_fail@plt+0xe538>
   20a5c:	ldr	r2, [pc, #204]	; 20b30 <__assert_fail@plt+0xe53c>
   20a60:	ldr	r1, [pc, #184]	; 20b20 <__assert_fail@plt+0xe52c>
   20a64:	bl	1233c <fprintf@plt>
   20a68:	ldr	r5, [r5, #48]	; 0x30
   20a6c:	add	r0, sp, #32
   20a70:	ldr	r6, [r6]
   20a74:	str	r5, [sp, #32]
   20a78:	bl	120a8 <ctime@plt>
   20a7c:	mov	r2, r5
   20a80:	asr	r3, r5, #31
   20a84:	ldr	r1, [pc, #152]	; 20b24 <__assert_fail@plt+0xe530>
   20a88:	str	r0, [sp]
   20a8c:	mov	r0, r6
   20a90:	bl	1233c <fprintf@plt>
   20a94:	b	20a08 <__assert_fail@plt+0xe414>
   20a98:	ldr	r3, [pc, #148]	; 20b34 <__assert_fail@plt+0xe540>
   20a9c:	ldr	r2, [pc, #148]	; 20b38 <__assert_fail@plt+0xe544>
   20aa0:	b	20a60 <__assert_fail@plt+0xe46c>
   20aa4:	vldr	s15, [pc, #72]	; 20af4 <__assert_fail@plt+0xe500>
   20aa8:	b	2095c <__assert_fail@plt+0xe368>
   20aac:	ldr	r3, [pc, #136]	; 20b3c <__assert_fail@plt+0xe548>
   20ab0:	ldr	r2, [pc, #136]	; 20b40 <__assert_fail@plt+0xe54c>
   20ab4:	ldr	r1, [pc, #136]	; 20b44 <__assert_fail@plt+0xe550>
   20ab8:	ldr	r0, [pc, #136]	; 20b48 <__assert_fail@plt+0xe554>
   20abc:	bl	125f4 <__assert_fail@plt>
   20ac0:	mov	r3, fp
   20ac4:	ldr	r2, [sp, #12]
   20ac8:	mov	r1, #0
   20acc:	mov	r0, #1
   20ad0:	bl	121ec <error@plt>
   20ad4:	nop			; (mov r0, r0)
   20ad8:	andeq	r0, r0, r0
   20adc:	rscsmi	r1, r5, r0, lsl #16
   20ae0:	andeq	r0, r0, r0
   20ae4:	bicmi	ip, sp, r5, ror #26
   20ae8:	stclcc	12, cr12, [ip, #820]	; 0x334
   20aec:	svccc	0x00800000
   20af0:	sbcmi	r0, r8, #0
   20af4:			; <UNDEFINED> instruction: 0x3e99999a
   20af8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   20afc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   20b00:	strdeq	r1, [r5], -ip
   20b04:	andeq	r4, r6, ip, ror #28
   20b08:			; <UNDEFINED> instruction: 0x000123b4
   20b0c:	eorgt	r4, lr, #29360128	; 0x1c00000
   20b10:	andeq	r4, r6, r8, asr #10
   20b14:	andeq	r1, r5, ip, asr r7
   20b18:	andeq	r1, r5, ip, lsl #15
   20b1c:	muleq	r5, r0, r7
   20b20:	andeq	r1, r5, r4, ror r7
   20b24:	andeq	r1, r5, r8, lsr #15
   20b28:	muleq	r5, r4, r7
   20b2c:	andeq	r1, r5, ip, ror #14
   20b30:	andeq	r1, r5, r0, ror r7
   20b34:			; <UNDEFINED> instruction: 0x000517b0
   20b38:			; <UNDEFINED> instruction: 0x000517b4
   20b3c:	andeq	r0, r5, r0, ror #23
   20b40:	andeq	r0, r0, sp, asr #24
   20b44:	andeq	r1, r5, r0, lsr #3
   20b48:	andeq	r1, r5, r0, asr #14
   20b4c:	push	{r4, r5, r6, r7, r8, lr}
   20b50:	mov	r6, r0
   20b54:	mov	r5, r1
   20b58:	mov	r7, r2
   20b5c:	bl	34554 <__assert_fail@plt+0x21f60>
   20b60:	subs	r4, r0, #0
   20b64:	bne	20b70 <__assert_fail@plt+0xe57c>
   20b68:	mov	r0, r4
   20b6c:	pop	{r4, r5, r6, r7, r8, pc}
   20b70:	bl	12348 <__errno_location@plt>
   20b74:	ldr	r3, [r0]
   20b78:	cmp	r3, #2
   20b7c:	beq	20b88 <__assert_fail@plt+0xe594>
   20b80:	cmp	r3, #20
   20b84:	bne	20b68 <__assert_fail@plt+0xe574>
   20b88:	ldr	r3, [pc, #52]	; 20bc4 <__assert_fail@plt+0xe5d0>
   20b8c:	ldr	r3, [r3, #44]	; 0x2c
   20b90:	tst	r3, #2
   20b94:	bne	20bac <__assert_fail@plt+0xe5b8>
   20b98:	mov	r2, r7
   20b9c:	mov	r1, r5
   20ba0:	mov	r0, r6
   20ba4:	pop	{r4, r5, r6, r7, r8, lr}
   20ba8:	b	3471c <__assert_fail@plt+0x22128>
   20bac:	ldr	r3, [pc, #20]	; 20bc8 <__assert_fail@plt+0xe5d4>
   20bb0:	mov	r2, r5
   20bb4:	ldr	r1, [pc, #16]	; 20bcc <__assert_fail@plt+0xe5d8>
   20bb8:	ldr	r0, [r3]
   20bbc:	bl	1233c <fprintf@plt>
   20bc0:	b	20b98 <__assert_fail@plt+0xe5a4>
   20bc4:	andeq	r4, r6, ip, ror #28
   20bc8:	andeq	r4, r6, r8, asr #10
   20bcc:	andeq	r1, r5, ip, ror #10
   20bd0:	cmp	r1, #0
   20bd4:	beq	20cc4 <__assert_fail@plt+0xe6d0>
   20bd8:	ldr	ip, [r2]
   20bdc:	push	{r4, r5, r6, r7, r8, lr}
   20be0:	sub	sp, sp, #8
   20be4:	ldr	r4, [r1, ip, lsl #2]
   20be8:	cmp	r4, #0
   20bec:	beq	20ccc <__assert_fail@plt+0xe6d8>
   20bf0:	ldr	r1, [pc, #272]	; 20d08 <__assert_fail@plt+0xe714>
   20bf4:	mov	r3, r2
   20bf8:	add	ip, ip, #1
   20bfc:	mov	r2, r4
   20c00:	ldr	r7, [r1, #60]	; 0x3c
   20c04:	str	ip, [r3]
   20c08:	ldr	r1, [pc, #252]	; 20d0c <__assert_fail@plt+0xe718>
   20c0c:	bl	1a958 <__assert_fail@plt+0x8364>
   20c10:	mov	r6, #0
   20c14:	orr	r7, r7, #4194304	; 0x400000
   20c18:	mov	r8, r0
   20c1c:	strb	r6, [r0, #19]
   20c20:	strb	r6, [r0, #18]
   20c24:	mov	r0, #32
   20c28:	bl	3563c <__assert_fail@plt+0x23048>
   20c2c:	mov	r3, #100	; 0x64
   20c30:	mov	r5, r0
   20c34:	str	r0, [r8, #40]	; 0x28
   20c38:	str	r3, [r5, #4]
   20c3c:	mov	r0, r3
   20c40:	bl	3563c <__assert_fail@plt+0x23048>
   20c44:	str	r6, [r5, #16]
   20c48:	str	r0, [r5]
   20c4c:	mov	r0, r7
   20c50:	bl	4ab90 <__assert_fail@plt+0x3859c>
   20c54:	str	r7, [r5, #12]
   20c58:	str	r6, [r5, #20]
   20c5c:	mov	r0, r4
   20c60:	bl	12300 <strlen@plt>
   20c64:	mov	r2, r5
   20c68:	mov	r1, r0
   20c6c:	mov	r0, r4
   20c70:	bl	4ab20 <__assert_fail@plt+0x3852c>
   20c74:	subs	r5, r0, #0
   20c78:	bne	20cd8 <__assert_fail@plt+0xe6e4>
   20c7c:	ldr	r1, [pc, #140]	; 20d10 <__assert_fail@plt+0xe71c>
   20c80:	mov	r0, r4
   20c84:	bl	12528 <strpbrk@plt>
   20c88:	cmp	r0, #0
   20c8c:	beq	20ca4 <__assert_fail@plt+0xe6b0>
   20c90:	vldr	s15, [pc, #104]	; 20d00 <__assert_fail@plt+0xe70c>
   20c94:	mov	r0, #1
   20c98:	vstr	s15, [r8, #28]
   20c9c:	add	sp, sp, #8
   20ca0:	pop	{r4, r5, r6, r7, r8, pc}
   20ca4:	mov	r0, r4
   20ca8:	mov	r1, #46	; 0x2e
   20cac:	bl	1230c <strchr@plt>
   20cb0:	vldr	s15, [pc, #72]	; 20d00 <__assert_fail@plt+0xe70c>
   20cb4:	vldr	s14, [pc, #72]	; 20d04 <__assert_fail@plt+0xe710>
   20cb8:	cmp	r0, #0
   20cbc:	vmoveq.f32	s15, s14
   20cc0:	b	20c94 <__assert_fail@plt+0xe6a0>
   20cc4:	mov	r0, r1
   20cc8:	bx	lr
   20ccc:	mov	r0, r4
   20cd0:	add	sp, sp, #8
   20cd4:	pop	{r4, r5, r6, r7, r8, pc}
   20cd8:	mov	r2, #5
   20cdc:	ldr	r1, [pc, #48]	; 20d14 <__assert_fail@plt+0xe720>
   20ce0:	mov	r0, r6
   20ce4:	bl	120b4 <dcgettext@plt>
   20ce8:	str	r5, [sp]
   20cec:	mov	r3, r4
   20cf0:	mov	r1, r6
   20cf4:	mov	r2, r0
   20cf8:	mov	r0, #1
   20cfc:	bl	121ec <error@plt>
   20d00:	svccc	0x004ccccd
   20d04:	stclcc	12, cr12, [ip, #820]	; 0x334
   20d08:	andeq	r4, r6, ip, ror #28
   20d0c:	andeq	r4, r1, r8, ror #28
   20d10:	strdeq	r1, [r5], -r8
   20d14:			; <UNDEFINED> instruction: 0x000517b8
   20d18:	cmp	r1, #0
   20d1c:	push	{r4, r5, r6, r7, lr}
   20d20:	mov	r5, r2
   20d24:	sub	sp, sp, #28
   20d28:	ldr	r3, [r2]
   20d2c:	beq	20e74 <__assert_fail@plt+0xe880>
   20d30:	ldr	r4, [r1, r3, lsl #2]
   20d34:	cmp	r4, #0
   20d38:	beq	20e74 <__assert_fail@plt+0xe880>
   20d3c:	add	r3, r3, #1
   20d40:	str	r3, [r2]
   20d44:	ldrb	r3, [r4]
   20d48:	mov	r7, r0
   20d4c:	cmp	r3, #43	; 0x2b
   20d50:	beq	20de0 <__assert_fail@plt+0xe7ec>
   20d54:	cmp	r3, #45	; 0x2d
   20d58:	addeq	r0, r4, #1
   20d5c:	moveq	r6, #1
   20d60:	movne	r0, r4
   20d64:	movne	r6, #2
   20d68:	ldr	r3, [pc, #280]	; 20e88 <__assert_fail@plt+0xe894>
   20d6c:	mov	r2, #10
   20d70:	str	r3, [sp]
   20d74:	add	r1, sp, #12
   20d78:	add	r3, sp, #16
   20d7c:	bl	36340 <__assert_fail@plt+0x23d4c>
   20d80:	cmp	r0, #0
   20d84:	bne	20e70 <__assert_fail@plt+0xe87c>
   20d88:	mov	r1, r4
   20d8c:	mov	r0, r7
   20d90:	bl	1a98c <__assert_fail@plt+0x8398>
   20d94:	ldr	r1, [pc, #240]	; 20e8c <__assert_fail@plt+0xe898>
   20d98:	ldrd	r2, [sp, #16]
   20d9c:	str	r6, [r0, #40]	; 0x28
   20da0:	ldr	r1, [r1, #44]	; 0x2c
   20da4:	mov	r4, r0
   20da8:	tst	r1, #1
   20dac:	strd	r2, [r0, #48]	; 0x30
   20db0:	bne	20dec <__assert_fail@plt+0xe7f8>
   20db4:	cmp	r3, #0
   20db8:	cmpeq	r2, #1
   20dbc:	beq	20e3c <__assert_fail@plt+0xe848>
   20dc0:	cmp	r3, #0
   20dc4:	cmpeq	r2, #2
   20dc8:	mov	r0, #1
   20dcc:	ldreq	r3, [pc, #188]	; 20e90 <__assert_fail@plt+0xe89c>
   20dd0:	ldrne	r3, [pc, #188]	; 20e94 <__assert_fail@plt+0xe8a0>
   20dd4:	str	r3, [r4, #28]
   20dd8:	add	sp, sp, #28
   20ddc:	pop	{r4, r5, r6, r7, pc}
   20de0:	add	r0, r4, #1
   20de4:	mov	r6, #0
   20de8:	b	20d68 <__assert_fail@plt+0xe774>
   20dec:	ldr	r5, [pc, #164]	; 20e98 <__assert_fail@plt+0xe8a4>
   20df0:	ldr	r2, [r0, #4]
   20df4:	ldr	r1, [pc, #160]	; 20e9c <__assert_fail@plt+0xe8a8>
   20df8:	ldr	r0, [r5]
   20dfc:	bl	1233c <fprintf@plt>
   20e00:	cmp	r6, #0
   20e04:	ldr	r0, [r5]
   20e08:	bne	20e50 <__assert_fail@plt+0xe85c>
   20e0c:	ldr	r2, [pc, #140]	; 20ea0 <__assert_fail@plt+0xe8ac>
   20e10:	ldr	r3, [pc, #140]	; 20ea4 <__assert_fail@plt+0xe8b0>
   20e14:	ldr	r1, [pc, #140]	; 20ea8 <__assert_fail@plt+0xe8b4>
   20e18:	bl	1233c <fprintf@plt>
   20e1c:	ldrd	r2, [r4, #48]	; 0x30
   20e20:	ldr	r0, [r5]
   20e24:	ldr	r1, [pc, #128]	; 20eac <__assert_fail@plt+0xe8b8>
   20e28:	bl	1233c <fprintf@plt>
   20e2c:	ldrd	r2, [r4, #48]	; 0x30
   20e30:	cmp	r3, #0
   20e34:	cmpeq	r2, #1
   20e38:	bne	20dc0 <__assert_fail@plt+0xe7cc>
   20e3c:	ldr	r3, [pc, #108]	; 20eb0 <__assert_fail@plt+0xe8bc>
   20e40:	mov	r0, #1
   20e44:	str	r3, [r4, #28]
   20e48:	add	sp, sp, #28
   20e4c:	pop	{r4, r5, r6, r7, pc}
   20e50:	ldr	ip, [pc, #92]	; 20eb4 <__assert_fail@plt+0xe8c0>
   20e54:	ldr	r1, [pc, #92]	; 20eb8 <__assert_fail@plt+0xe8c4>
   20e58:	cmp	r6, #1
   20e5c:	ldr	r2, [pc, #88]	; 20ebc <__assert_fail@plt+0xe8c8>
   20e60:	ldr	r3, [pc, #88]	; 20ec0 <__assert_fail@plt+0xe8cc>
   20e64:	movne	r2, ip
   20e68:	movne	r3, r1
   20e6c:	b	20e14 <__assert_fail@plt+0xe820>
   20e70:	ldr	r3, [r5]
   20e74:	sub	r3, r3, #1
   20e78:	mov	r0, #0
   20e7c:	str	r3, [r5]
   20e80:	add	sp, sp, #28
   20e84:	pop	{r4, r5, r6, r7, pc}
   20e88:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   20e8c:	andeq	r4, r6, ip, ror #28
   20e90:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   20e94:	bcc	fe0e5858 <stdout@@GLIBC_2.4+0xfe081304>
   20e98:	andeq	r4, r6, r8, asr #10
   20e9c:	andeq	r1, r5, ip, asr r7
   20ea0:	andeq	r1, r5, r0, ror r7
   20ea4:	andeq	r1, r5, ip, ror #14
   20ea8:	andeq	r1, r5, r4, ror r7
   20eac:	andeq	r1, r5, ip, ror #15
   20eb0:	svccc	0x007d70a4
   20eb4:	muleq	r5, r0, r7
   20eb8:	andeq	r1, r5, r8, ror #15
   20ebc:			; <UNDEFINED> instruction: 0x000517b4
   20ec0:			; <UNDEFINED> instruction: 0x000517b0
   20ec4:	cmp	r1, #0
   20ec8:	beq	20f28 <__assert_fail@plt+0xe934>
   20ecc:	ldr	r3, [r2]
   20ed0:	push	{r4, r5, r6, lr}
   20ed4:	ldr	r4, [r1, r3, lsl #2]
   20ed8:	cmp	r4, #0
   20edc:	moveq	r1, r4
   20ee0:	beq	20f20 <__assert_fail@plt+0xe92c>
   20ee4:	add	r3, r3, #1
   20ee8:	str	r3, [r2]
   20eec:	mov	r1, r4
   20ef0:	bl	1a98c <__assert_fail@plt+0x8398>
   20ef4:	ldr	r1, [pc, #60]	; 20f38 <__assert_fail@plt+0xe944>
   20ef8:	mov	r5, r0
   20efc:	str	r4, [r0, #40]	; 0x28
   20f00:	mov	r0, r4
   20f04:	bl	12528 <strpbrk@plt>
   20f08:	vldr	s15, [pc, #32]	; 20f30 <__assert_fail@plt+0xe93c>
   20f0c:	vldr	s14, [pc, #32]	; 20f34 <__assert_fail@plt+0xe940>
   20f10:	mov	r1, #1
   20f14:	cmp	r0, #0
   20f18:	vmovne.f32	s15, s14
   20f1c:	vstr	s15, [r5, #28]
   20f20:	mov	r0, r1
   20f24:	pop	{r4, r5, r6, pc}
   20f28:	mov	r0, r1
   20f2c:	bx	lr
   20f30:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   20f34:	stccc	7, cr13, [r3, #44]!	; 0x2c
   20f38:	strdeq	r1, [r5], -r8
   20f3c:	push	{r4, r5, r6, r7, lr}
   20f40:	sub	sp, sp, #108	; 0x6c
   20f44:	mov	r4, r1
   20f48:	mov	r7, r0
   20f4c:	mov	r0, sp
   20f50:	mov	r5, r2
   20f54:	bl	1ac3c <__assert_fail@plt+0x8648>
   20f58:	cmp	r4, #0
   20f5c:	beq	2102c <__assert_fail@plt+0xea38>
   20f60:	ldr	r3, [r5]
   20f64:	ldr	r4, [r4, r3, lsl #2]
   20f68:	cmp	r4, #0
   20f6c:	beq	2102c <__assert_fail@plt+0xea38>
   20f70:	ldr	r6, [pc, #248]	; 21070 <__assert_fail@plt+0xea7c>
   20f74:	add	r3, r3, #1
   20f78:	str	r3, [r5]
   20f7c:	mov	r1, sp
   20f80:	ldr	r3, [r6, #52]	; 0x34
   20f84:	mov	r0, r4
   20f88:	blx	r3
   20f8c:	subs	r5, r0, #0
   20f90:	bne	21048 <__assert_fail@plt+0xea54>
   20f94:	mov	r1, r4
   20f98:	mov	r0, r7
   20f9c:	bl	1a98c <__assert_fail@plt+0x8398>
   20fa0:	ldr	r1, [sp, #80]	; 0x50
   20fa4:	ldr	r3, [r6, #28]
   20fa8:	ldr	r2, [pc, #196]	; 21074 <__assert_fail@plt+0xea80>
   20fac:	sub	r3, r3, r1
   20fb0:	vldr	s14, [pc, #160]	; 21058 <__assert_fail@plt+0xea64>
   20fb4:	smull	ip, r2, r2, r3
   20fb8:	ldr	ip, [sp, #84]	; 0x54
   20fbc:	add	r2, r2, r3
   20fc0:	asr	r3, r3, #31
   20fc4:	rsb	r3, r3, r2, asr #16
   20fc8:	mov	r2, #3
   20fcc:	vmov	s15, r3
   20fd0:	vcvt.f32.s32	s15, s15
   20fd4:	vcmpe.f32	s15, s14
   20fd8:	vmrs	APSR_nzcv, fpscr
   20fdc:	str	ip, [r0, #52]	; 0x34
   20fe0:	str	r1, [r0, #48]	; 0x30
   20fe4:	str	r5, [r0, #44]	; 0x2c
   20fe8:	str	r2, [r0, #40]	; 0x28
   20fec:	bmi	21038 <__assert_fail@plt+0xea44>
   20ff0:	vldr	s14, [pc, #100]	; 2105c <__assert_fail@plt+0xea68>
   20ff4:	vcmpe.f32	s15, s14
   20ff8:	vmrs	APSR_nzcv, fpscr
   20ffc:	bmi	21040 <__assert_fail@plt+0xea4c>
   21000:	vldr	s12, [pc, #88]	; 21060 <__assert_fail@plt+0xea6c>
   21004:	vldr	s14, [pc, #88]	; 21064 <__assert_fail@plt+0xea70>
   21008:	vldr	s13, [pc, #88]	; 21068 <__assert_fail@plt+0xea74>
   2100c:	vcmpe.f32	s15, s12
   21010:	vmrs	APSR_nzcv, fpscr
   21014:	vmovle.f32	s15, s13
   21018:	vmovgt.f32	s15, s14
   2101c:	vstr	s15, [r0, #28]
   21020:	mov	r0, #1
   21024:	add	sp, sp, #108	; 0x6c
   21028:	pop	{r4, r5, r6, r7, pc}
   2102c:	mov	r0, r4
   21030:	add	sp, sp, #108	; 0x6c
   21034:	pop	{r4, r5, r6, r7, pc}
   21038:	vldr	s15, [pc, #44]	; 2106c <__assert_fail@plt+0xea78>
   2103c:	b	2101c <__assert_fail@plt+0xea28>
   21040:	vldr	s15, [pc, #28]	; 21064 <__assert_fail@plt+0xea70>
   21044:	b	2101c <__assert_fail@plt+0xea28>
   21048:	bl	12348 <__errno_location@plt>
   2104c:	mov	r1, r4
   21050:	ldr	r0, [r0]
   21054:	bl	1bea8 <__assert_fail@plt+0x98b4>
   21058:	stclcc	12, cr12, [ip, #820]	; 0x334
   2105c:	svccc	0x00800000
   21060:	sbcmi	r0, r8, #0
   21064:			; <UNDEFINED> instruction: 0x3e99999a
   21068:	mcrcc	14, 6, sl, cr7, cr4, {0}
   2106c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   21070:	andeq	r4, r6, ip, ror #28
   21074:	eorgt	r4, lr, #29360128	; 0x1c00000
   21078:	push	{r4, r5, r6, r7, lr}
   2107c:	sub	sp, sp, #108	; 0x6c
   21080:	mov	r4, r1
   21084:	mov	r7, r0
   21088:	mov	r0, sp
   2108c:	mov	r5, r2
   21090:	bl	1ac3c <__assert_fail@plt+0x8648>
   21094:	cmp	r4, #0
   21098:	beq	21168 <__assert_fail@plt+0xeb74>
   2109c:	ldr	r3, [r5]
   210a0:	ldr	r4, [r4, r3, lsl #2]
   210a4:	cmp	r4, #0
   210a8:	beq	21168 <__assert_fail@plt+0xeb74>
   210ac:	ldr	r6, [pc, #248]	; 211ac <__assert_fail@plt+0xebb8>
   210b0:	add	r3, r3, #1
   210b4:	str	r3, [r5]
   210b8:	mov	r1, sp
   210bc:	ldr	r3, [r6, #52]	; 0x34
   210c0:	mov	r0, r4
   210c4:	blx	r3
   210c8:	subs	r5, r0, #0
   210cc:	bne	21184 <__assert_fail@plt+0xeb90>
   210d0:	mov	r1, r4
   210d4:	mov	r0, r7
   210d8:	bl	1a98c <__assert_fail@plt+0x8398>
   210dc:	mov	r3, #2
   210e0:	ldr	r2, [pc, #200]	; 211b0 <__assert_fail@plt+0xebbc>
   210e4:	vldr	s14, [pc, #168]	; 21194 <__assert_fail@plt+0xeba0>
   210e8:	str	r3, [r0, #40]	; 0x28
   210ec:	ldr	r1, [sp, #80]	; 0x50
   210f0:	ldr	r3, [r6, #28]
   210f4:	sub	r3, r3, r1
   210f8:	smull	ip, r2, r2, r3
   210fc:	ldr	ip, [sp, #84]	; 0x54
   21100:	add	r2, r2, r3
   21104:	asr	r3, r3, #31
   21108:	rsb	r3, r3, r2, asr #16
   2110c:	str	ip, [r0, #52]	; 0x34
   21110:	vmov	s15, r3
   21114:	str	r1, [r0, #48]	; 0x30
   21118:	str	r5, [r0, #44]	; 0x2c
   2111c:	vcvt.f32.s32	s15, s15
   21120:	vcmpe.f32	s15, s14
   21124:	vmrs	APSR_nzcv, fpscr
   21128:	bmi	21174 <__assert_fail@plt+0xeb80>
   2112c:	vldr	s14, [pc, #100]	; 21198 <__assert_fail@plt+0xeba4>
   21130:	vcmpe.f32	s15, s14
   21134:	vmrs	APSR_nzcv, fpscr
   21138:	bmi	2117c <__assert_fail@plt+0xeb88>
   2113c:	vldr	s12, [pc, #88]	; 2119c <__assert_fail@plt+0xeba8>
   21140:	vldr	s14, [pc, #88]	; 211a0 <__assert_fail@plt+0xebac>
   21144:	vldr	s13, [pc, #88]	; 211a4 <__assert_fail@plt+0xebb0>
   21148:	vcmpe.f32	s15, s12
   2114c:	vmrs	APSR_nzcv, fpscr
   21150:	vmovle.f32	s15, s13
   21154:	vmovgt.f32	s15, s14
   21158:	vstr	s15, [r0, #28]
   2115c:	mov	r0, #1
   21160:	add	sp, sp, #108	; 0x6c
   21164:	pop	{r4, r5, r6, r7, pc}
   21168:	mov	r0, r4
   2116c:	add	sp, sp, #108	; 0x6c
   21170:	pop	{r4, r5, r6, r7, pc}
   21174:	vldr	s15, [pc, #44]	; 211a8 <__assert_fail@plt+0xebb4>
   21178:	b	21158 <__assert_fail@plt+0xeb64>
   2117c:	vldr	s15, [pc, #28]	; 211a0 <__assert_fail@plt+0xebac>
   21180:	b	21158 <__assert_fail@plt+0xeb64>
   21184:	bl	12348 <__errno_location@plt>
   21188:	mov	r1, r4
   2118c:	ldr	r0, [r0]
   21190:	bl	1bea8 <__assert_fail@plt+0x98b4>
   21194:	stclcc	12, cr12, [ip, #820]	; 0x334
   21198:	svccc	0x00800000
   2119c:	sbcmi	r0, r8, #0
   211a0:			; <UNDEFINED> instruction: 0x3e99999a
   211a4:	mcrcc	14, 6, sl, cr7, cr4, {0}
   211a8:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   211ac:	andeq	r4, r6, ip, ror #28
   211b0:	eorgt	r4, lr, #29360128	; 0x1c00000
   211b4:	push	{r4, r5, r6, r7, lr}
   211b8:	sub	sp, sp, #108	; 0x6c
   211bc:	mov	r4, r1
   211c0:	mov	r7, r0
   211c4:	mov	r0, sp
   211c8:	mov	r5, r2
   211cc:	bl	1ac3c <__assert_fail@plt+0x8648>
   211d0:	cmp	r4, #0
   211d4:	beq	212a0 <__assert_fail@plt+0xecac>
   211d8:	ldr	r3, [r5]
   211dc:	ldr	r4, [r4, r3, lsl #2]
   211e0:	cmp	r4, #0
   211e4:	beq	212a0 <__assert_fail@plt+0xecac>
   211e8:	ldr	r6, [pc, #244]	; 212e4 <__assert_fail@plt+0xecf0>
   211ec:	add	r3, r3, #1
   211f0:	str	r3, [r5]
   211f4:	mov	r1, sp
   211f8:	ldr	r3, [r6, #52]	; 0x34
   211fc:	mov	r0, r4
   21200:	blx	r3
   21204:	subs	r5, r0, #0
   21208:	bne	212bc <__assert_fail@plt+0xecc8>
   2120c:	mov	r1, r4
   21210:	mov	r0, r7
   21214:	bl	1a98c <__assert_fail@plt+0x8398>
   21218:	ldr	r3, [r6, #28]
   2121c:	ldr	r2, [pc, #196]	; 212e8 <__assert_fail@plt+0xecf4>
   21220:	vldr	s14, [pc, #164]	; 212cc <__assert_fail@plt+0xecd8>
   21224:	str	r5, [r0, #40]	; 0x28
   21228:	ldr	r1, [sp, #80]	; 0x50
   2122c:	sub	r3, r3, r1
   21230:	smull	ip, r2, r2, r3
   21234:	ldr	ip, [sp, #84]	; 0x54
   21238:	add	r2, r2, r3
   2123c:	asr	r3, r3, #31
   21240:	rsb	r3, r3, r2, asr #16
   21244:	str	ip, [r0, #52]	; 0x34
   21248:	vmov	s15, r3
   2124c:	str	r1, [r0, #48]	; 0x30
   21250:	str	r5, [r0, #44]	; 0x2c
   21254:	vcvt.f32.s32	s15, s15
   21258:	vcmpe.f32	s15, s14
   2125c:	vmrs	APSR_nzcv, fpscr
   21260:	bmi	212ac <__assert_fail@plt+0xecb8>
   21264:	vldr	s14, [pc, #100]	; 212d0 <__assert_fail@plt+0xecdc>
   21268:	vcmpe.f32	s15, s14
   2126c:	vmrs	APSR_nzcv, fpscr
   21270:	bmi	212b4 <__assert_fail@plt+0xecc0>
   21274:	vldr	s12, [pc, #88]	; 212d4 <__assert_fail@plt+0xece0>
   21278:	vldr	s14, [pc, #88]	; 212d8 <__assert_fail@plt+0xece4>
   2127c:	vldr	s13, [pc, #88]	; 212dc <__assert_fail@plt+0xece8>
   21280:	vcmpe.f32	s15, s12
   21284:	vmrs	APSR_nzcv, fpscr
   21288:	vmovle.f32	s15, s13
   2128c:	vmovgt.f32	s15, s14
   21290:	vstr	s15, [r0, #28]
   21294:	mov	r0, #1
   21298:	add	sp, sp, #108	; 0x6c
   2129c:	pop	{r4, r5, r6, r7, pc}
   212a0:	mov	r0, r4
   212a4:	add	sp, sp, #108	; 0x6c
   212a8:	pop	{r4, r5, r6, r7, pc}
   212ac:	vldr	s15, [pc, #44]	; 212e0 <__assert_fail@plt+0xecec>
   212b0:	b	21290 <__assert_fail@plt+0xec9c>
   212b4:	vldr	s15, [pc, #28]	; 212d8 <__assert_fail@plt+0xece4>
   212b8:	b	21290 <__assert_fail@plt+0xec9c>
   212bc:	bl	12348 <__errno_location@plt>
   212c0:	mov	r1, r4
   212c4:	ldr	r0, [r0]
   212c8:	bl	1bea8 <__assert_fail@plt+0x98b4>
   212cc:	stclcc	12, cr12, [ip, #820]	; 0x334
   212d0:	svccc	0x00800000
   212d4:	sbcmi	r0, r8, #0
   212d8:			; <UNDEFINED> instruction: 0x3e99999a
   212dc:	mcrcc	14, 6, sl, cr7, cr4, {0}
   212e0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   212e4:	andeq	r4, r6, ip, ror #28
   212e8:	eorgt	r4, lr, #29360128	; 0x1c00000
   212ec:	cmp	r1, #0
   212f0:	beq	213dc <__assert_fail@plt+0xede8>
   212f4:	ldr	ip, [r2]
   212f8:	push	{r4, r5, r6, r7, r8, lr}
   212fc:	sub	sp, sp, #8
   21300:	ldr	r4, [r1, ip, lsl #2]
   21304:	cmp	r4, #0
   21308:	beq	213e4 <__assert_fail@plt+0xedf0>
   2130c:	ldr	r1, [pc, #268]	; 21420 <__assert_fail@plt+0xee2c>
   21310:	mov	r3, r2
   21314:	add	ip, ip, #1
   21318:	mov	r2, r4
   2131c:	ldr	r8, [r1, #60]	; 0x3c
   21320:	str	ip, [r3]
   21324:	ldr	r1, [pc, #248]	; 21424 <__assert_fail@plt+0xee30>
   21328:	bl	1a958 <__assert_fail@plt+0x8364>
   2132c:	mov	r6, #0
   21330:	mov	r7, r0
   21334:	strb	r6, [r0, #19]
   21338:	strb	r6, [r0, #18]
   2133c:	mov	r0, #32
   21340:	bl	3563c <__assert_fail@plt+0x23048>
   21344:	mov	r3, #100	; 0x64
   21348:	mov	r5, r0
   2134c:	str	r0, [r7, #40]	; 0x28
   21350:	str	r3, [r5, #4]
   21354:	mov	r0, r3
   21358:	bl	3563c <__assert_fail@plt+0x23048>
   2135c:	str	r6, [r5, #16]
   21360:	str	r0, [r5]
   21364:	mov	r0, r8
   21368:	bl	4ab90 <__assert_fail@plt+0x3859c>
   2136c:	str	r8, [r5, #12]
   21370:	str	r6, [r5, #20]
   21374:	mov	r0, r4
   21378:	bl	12300 <strlen@plt>
   2137c:	mov	r2, r5
   21380:	mov	r1, r0
   21384:	mov	r0, r4
   21388:	bl	4ab20 <__assert_fail@plt+0x3852c>
   2138c:	subs	r5, r0, #0
   21390:	bne	213f0 <__assert_fail@plt+0xedfc>
   21394:	ldr	r1, [pc, #140]	; 21428 <__assert_fail@plt+0xee34>
   21398:	mov	r0, r4
   2139c:	bl	12528 <strpbrk@plt>
   213a0:	cmp	r0, #0
   213a4:	beq	213bc <__assert_fail@plt+0xedc8>
   213a8:	vldr	s15, [pc, #104]	; 21418 <__assert_fail@plt+0xee24>
   213ac:	mov	r0, #1
   213b0:	vstr	s15, [r7, #28]
   213b4:	add	sp, sp, #8
   213b8:	pop	{r4, r5, r6, r7, r8, pc}
   213bc:	mov	r0, r4
   213c0:	mov	r1, #46	; 0x2e
   213c4:	bl	1230c <strchr@plt>
   213c8:	vldr	s15, [pc, #72]	; 21418 <__assert_fail@plt+0xee24>
   213cc:	vldr	s14, [pc, #72]	; 2141c <__assert_fail@plt+0xee28>
   213d0:	cmp	r0, #0
   213d4:	vmoveq.f32	s15, s14
   213d8:	b	213ac <__assert_fail@plt+0xedb8>
   213dc:	mov	r0, r1
   213e0:	bx	lr
   213e4:	mov	r0, r4
   213e8:	add	sp, sp, #8
   213ec:	pop	{r4, r5, r6, r7, r8, pc}
   213f0:	mov	r2, #5
   213f4:	ldr	r1, [pc, #48]	; 2142c <__assert_fail@plt+0xee38>
   213f8:	mov	r0, r6
   213fc:	bl	120b4 <dcgettext@plt>
   21400:	str	r5, [sp]
   21404:	mov	r3, r4
   21408:	mov	r1, r6
   2140c:	mov	r2, r0
   21410:	mov	r0, #1
   21414:	bl	121ec <error@plt>
   21418:	svccc	0x004ccccd
   2141c:	stclcc	12, cr12, [ip, #820]	; 0x334
   21420:	andeq	r4, r6, ip, ror #28
   21424:	andeq	r4, r1, r8, ror #28
   21428:	strdeq	r1, [r5], -r8
   2142c:			; <UNDEFINED> instruction: 0x000517b8
   21430:	push	{r4, r5, r6, r7, r8, lr}
   21434:	mov	r7, r0
   21438:	ldr	r6, [pc, #200]	; 21508 <__assert_fail@plt+0xef14>
   2143c:	mov	r4, r1
   21440:	mov	r5, r2
   21444:	ldrb	r3, [r6, #4]
   21448:	cmp	r3, #0
   2144c:	beq	214b0 <__assert_fail@plt+0xeebc>
   21450:	cmp	r4, #0
   21454:	beq	214a8 <__assert_fail@plt+0xeeb4>
   21458:	ldr	r3, [r5]
   2145c:	ldr	r4, [r4, r3, lsl #2]
   21460:	cmp	r4, #0
   21464:	beq	214a8 <__assert_fail@plt+0xeeb4>
   21468:	add	r3, r3, #1
   2146c:	str	r3, [r5]
   21470:	mov	r1, r4
   21474:	mov	r0, r7
   21478:	bl	1a98c <__assert_fail@plt+0x8398>
   2147c:	ldr	r1, [pc, #136]	; 2150c <__assert_fail@plt+0xef18>
   21480:	str	r4, [r0, #40]	; 0x28
   21484:	mov	r5, r0
   21488:	mov	r0, r4
   2148c:	bl	12528 <strpbrk@plt>
   21490:	vldr	s15, [pc, #104]	; 21500 <__assert_fail@plt+0xef0c>
   21494:	vldr	s14, [pc, #104]	; 21504 <__assert_fail@plt+0xef10>
   21498:	mov	r4, #1
   2149c:	cmp	r0, #0
   214a0:	vmovne.f32	s15, s14
   214a4:	vstr	s15, [r5, #28]
   214a8:	mov	r0, r4
   214ac:	pop	{r4, r5, r6, r7, r8, pc}
   214b0:	ldr	r1, [pc, #88]	; 21510 <__assert_fail@plt+0xef1c>
   214b4:	mov	r2, r3
   214b8:	mov	r0, r1
   214bc:	bl	12210 <fnmatch@plt>
   214c0:	subs	r2, r0, #0
   214c4:	bne	214fc <__assert_fail@plt+0xef08>
   214c8:	ldr	r1, [pc, #64]	; 21510 <__assert_fail@plt+0xef1c>
   214cc:	ldr	r0, [pc, #64]	; 21514 <__assert_fail@plt+0xef20>
   214d0:	bl	12210 <fnmatch@plt>
   214d4:	cmp	r0, #0
   214d8:	beq	214fc <__assert_fail@plt+0xef08>
   214dc:	mov	r2, #16
   214e0:	ldr	r1, [pc, #40]	; 21510 <__assert_fail@plt+0xef1c>
   214e4:	ldr	r0, [pc, #40]	; 21514 <__assert_fail@plt+0xef20>
   214e8:	bl	12210 <fnmatch@plt>
   214ec:	cmp	r0, #0
   214f0:	moveq	r3, #1
   214f4:	strbeq	r3, [r6, #4]
   214f8:	beq	21450 <__assert_fail@plt+0xee5c>
   214fc:	bl	126bc <__assert_fail@plt+0xc8>
   21500:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   21504:	stccc	7, cr13, [r3, #44]!	; 0x2c
   21508:	ldrdeq	r4, [r6], -r0
   2150c:	strdeq	r1, [r5], -r8
   21510:	andeq	r1, r5, r8, lsr #12
   21514:	andeq	r1, r5, ip, lsr #12
   21518:	ldr	ip, [pc, #108]	; 2158c <__assert_fail@plt+0xef98>
   2151c:	ldr	r3, [pc, #108]	; 21590 <__assert_fail@plt+0xef9c>
   21520:	mov	r2, #1
   21524:	ldr	r0, [ip]
   21528:	push	{r4, lr}
   2152c:	cmp	r0, #0
   21530:	strb	r2, [r3, #12]
   21534:	beq	21558 <__assert_fail@plt+0xef64>
   21538:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   2153c:	mov	r3, #0
   21540:	mov	r2, #1065353216	; 0x3f800000
   21544:	strb	r3, [r0, #19]
   21548:	strb	r3, [r0, #18]
   2154c:	str	r2, [r0, #28]
   21550:	mov	r0, #1
   21554:	pop	{r4, pc}
   21558:	ldr	lr, [pc, #52]	; 21594 <__assert_fail@plt+0xefa0>
   2155c:	mov	r2, r0
   21560:	mov	r3, lr
   21564:	ldr	r1, [r3, #20]
   21568:	add	r2, r2, #1
   2156c:	cmp	r1, #0
   21570:	beq	21538 <__assert_fail@plt+0xef44>
   21574:	ldr	r1, [r3, #16]!
   21578:	cmp	r1, #1
   2157c:	bne	21564 <__assert_fail@plt+0xef70>
   21580:	add	r0, lr, r2, lsl #4
   21584:	str	r0, [ip]
   21588:	b	21538 <__assert_fail@plt+0xef44>
   2158c:	ldrdeq	r4, [r6], -r0
   21590:	andeq	r4, r6, ip, ror #28
   21594:	andeq	r0, r5, r0, ror r6
   21598:	ldr	ip, [pc, #108]	; 2160c <__assert_fail@plt+0xf018>
   2159c:	ldr	r3, [pc, #108]	; 21610 <__assert_fail@plt+0xf01c>
   215a0:	mov	r2, #1
   215a4:	ldr	r0, [ip]
   215a8:	push	{r4, lr}
   215ac:	cmp	r0, #0
   215b0:	strb	r2, [r3, #13]
   215b4:	beq	215d8 <__assert_fail@plt+0xefe4>
   215b8:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   215bc:	mov	r3, #0
   215c0:	mov	r2, #1065353216	; 0x3f800000
   215c4:	strb	r3, [r0, #19]
   215c8:	strb	r3, [r0, #18]
   215cc:	str	r2, [r0, #28]
   215d0:	mov	r0, #1
   215d4:	pop	{r4, pc}
   215d8:	ldr	lr, [pc, #52]	; 21614 <__assert_fail@plt+0xf020>
   215dc:	mov	r2, r0
   215e0:	mov	r3, lr
   215e4:	ldr	r1, [r3, #20]
   215e8:	add	r2, r2, #1
   215ec:	cmp	r1, #0
   215f0:	beq	215b8 <__assert_fail@plt+0xefc4>
   215f4:	ldr	r1, [r3, #16]!
   215f8:	cmp	r1, #1
   215fc:	bne	215e4 <__assert_fail@plt+0xeff0>
   21600:	add	r0, lr, r2, lsl #4
   21604:	str	r0, [ip]
   21608:	b	215b8 <__assert_fail@plt+0xefc4>
   2160c:	ldrdeq	r4, [r6], -r0
   21610:	andeq	r4, r6, ip, ror #28
   21614:	andeq	r0, r5, r0, ror r6
   21618:	ldr	ip, [pc, #108]	; 2168c <__assert_fail@plt+0xf098>
   2161c:	ldr	r3, [pc, #108]	; 21690 <__assert_fail@plt+0xf09c>
   21620:	mov	r2, #0
   21624:	ldr	r0, [ip]
   21628:	push	{r4, lr}
   2162c:	cmp	r0, r2
   21630:	strb	r2, [r3, #16]
   21634:	beq	21658 <__assert_fail@plt+0xf064>
   21638:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   2163c:	mov	r3, #0
   21640:	mov	r2, #1065353216	; 0x3f800000
   21644:	strb	r3, [r0, #19]
   21648:	strb	r3, [r0, #18]
   2164c:	str	r2, [r0, #28]
   21650:	mov	r0, #1
   21654:	pop	{r4, pc}
   21658:	ldr	lr, [pc, #52]	; 21694 <__assert_fail@plt+0xf0a0>
   2165c:	mov	r2, r0
   21660:	mov	r3, lr
   21664:	ldr	r1, [r3, #20]
   21668:	add	r2, r2, #1
   2166c:	cmp	r1, #0
   21670:	beq	21638 <__assert_fail@plt+0xf044>
   21674:	ldr	r1, [r3, #16]!
   21678:	cmp	r1, #1
   2167c:	bne	21664 <__assert_fail@plt+0xf070>
   21680:	add	r0, lr, r2, lsl #4
   21684:	str	r0, [ip]
   21688:	b	21638 <__assert_fail@plt+0xf044>
   2168c:	ldrdeq	r4, [r6], -r0
   21690:	andeq	r4, r6, ip, ror #28
   21694:	andeq	r0, r5, r0, ror r6
   21698:	ldr	ip, [pc, #108]	; 2170c <__assert_fail@plt+0xf118>
   2169c:	ldr	r3, [pc, #108]	; 21710 <__assert_fail@plt+0xf11c>
   216a0:	mov	r2, #1
   216a4:	ldr	r0, [ip]
   216a8:	push	{r4, lr}
   216ac:	cmp	r0, #0
   216b0:	strb	r2, [r3, #14]
   216b4:	beq	216d8 <__assert_fail@plt+0xf0e4>
   216b8:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   216bc:	mov	r3, #0
   216c0:	mov	r2, #1065353216	; 0x3f800000
   216c4:	strb	r3, [r0, #19]
   216c8:	strb	r3, [r0, #18]
   216cc:	str	r2, [r0, #28]
   216d0:	mov	r0, #1
   216d4:	pop	{r4, pc}
   216d8:	ldr	lr, [pc, #52]	; 21714 <__assert_fail@plt+0xf120>
   216dc:	mov	r2, r0
   216e0:	mov	r3, lr
   216e4:	ldr	r1, [r3, #20]
   216e8:	add	r2, r2, #1
   216ec:	cmp	r1, #0
   216f0:	beq	216b8 <__assert_fail@plt+0xf0c4>
   216f4:	ldr	r1, [r3, #16]!
   216f8:	cmp	r1, #1
   216fc:	bne	216e4 <__assert_fail@plt+0xf0f0>
   21700:	add	r0, lr, r2, lsl #4
   21704:	str	r0, [ip]
   21708:	b	216b8 <__assert_fail@plt+0xf0c4>
   2170c:	ldrdeq	r4, [r6], -r0
   21710:	andeq	r4, r6, ip, ror #28
   21714:	andeq	r0, r5, r0, ror r6
   21718:	ldr	ip, [pc, #108]	; 2178c <__assert_fail@plt+0xf198>
   2171c:	ldr	r3, [pc, #108]	; 21790 <__assert_fail@plt+0xf19c>
   21720:	mov	r2, #0
   21724:	ldr	r0, [ip]
   21728:	push	{r4, lr}
   2172c:	cmp	r0, r2
   21730:	strb	r2, [r3, #14]
   21734:	beq	21758 <__assert_fail@plt+0xf164>
   21738:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   2173c:	mov	r3, #0
   21740:	mov	r2, #1065353216	; 0x3f800000
   21744:	strb	r3, [r0, #19]
   21748:	strb	r3, [r0, #18]
   2174c:	str	r2, [r0, #28]
   21750:	mov	r0, #1
   21754:	pop	{r4, pc}
   21758:	ldr	lr, [pc, #52]	; 21794 <__assert_fail@plt+0xf1a0>
   2175c:	mov	r2, r0
   21760:	mov	r3, lr
   21764:	ldr	r1, [r3, #20]
   21768:	add	r2, r2, #1
   2176c:	cmp	r1, #0
   21770:	beq	21738 <__assert_fail@plt+0xf144>
   21774:	ldr	r1, [r3, #16]!
   21778:	cmp	r1, #1
   2177c:	bne	21764 <__assert_fail@plt+0xf170>
   21780:	add	r0, lr, r2, lsl #4
   21784:	str	r0, [ip]
   21788:	b	21738 <__assert_fail@plt+0xf144>
   2178c:	ldrdeq	r4, [r6], -r0
   21790:	andeq	r4, r6, ip, ror #28
   21794:	andeq	r0, r5, r0, ror r6
   21798:	ldr	ip, [pc, #108]	; 2180c <__assert_fail@plt+0xf218>
   2179c:	ldr	r3, [pc, #108]	; 21810 <__assert_fail@plt+0xf21c>
   217a0:	mov	r2, #1
   217a4:	ldr	r0, [ip]
   217a8:	push	{r4, lr}
   217ac:	cmp	r0, #0
   217b0:	strb	r2, [r3, #16]
   217b4:	beq	217d8 <__assert_fail@plt+0xf1e4>
   217b8:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   217bc:	mov	r3, #0
   217c0:	mov	r2, #1065353216	; 0x3f800000
   217c4:	strb	r3, [r0, #19]
   217c8:	strb	r3, [r0, #18]
   217cc:	str	r2, [r0, #28]
   217d0:	mov	r0, #1
   217d4:	pop	{r4, pc}
   217d8:	ldr	lr, [pc, #52]	; 21814 <__assert_fail@plt+0xf220>
   217dc:	mov	r2, r0
   217e0:	mov	r3, lr
   217e4:	ldr	r1, [r3, #20]
   217e8:	add	r2, r2, #1
   217ec:	cmp	r1, #0
   217f0:	beq	217b8 <__assert_fail@plt+0xf1c4>
   217f4:	ldr	r1, [r3, #16]!
   217f8:	cmp	r1, #1
   217fc:	bne	217e4 <__assert_fail@plt+0xf1f0>
   21800:	add	r0, lr, r2, lsl #4
   21804:	str	r0, [ip]
   21808:	b	217b8 <__assert_fail@plt+0xf1c4>
   2180c:	ldrdeq	r4, [r6], -r0
   21810:	andeq	r4, r6, ip, ror #28
   21814:	andeq	r0, r5, r0, ror r6
   21818:	ldr	ip, [pc, #116]	; 21894 <__assert_fail@plt+0xf2a0>
   2181c:	ldr	r3, [pc, #116]	; 21898 <__assert_fail@plt+0xf2a4>
   21820:	mov	r1, #0
   21824:	ldr	r0, [ip]
   21828:	mov	r2, #1
   2182c:	cmp	r0, r1
   21830:	push	{r4, lr}
   21834:	strb	r1, [r3]
   21838:	strb	r2, [r3, #1]
   2183c:	beq	21860 <__assert_fail@plt+0xf26c>
   21840:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   21844:	mov	r3, #0
   21848:	mov	r2, #1065353216	; 0x3f800000
   2184c:	strb	r3, [r0, #19]
   21850:	strb	r3, [r0, #18]
   21854:	str	r2, [r0, #28]
   21858:	mov	r0, #1
   2185c:	pop	{r4, pc}
   21860:	ldr	lr, [pc, #52]	; 2189c <__assert_fail@plt+0xf2a8>
   21864:	mov	r2, r0
   21868:	mov	r3, lr
   2186c:	ldr	r1, [r3, #20]
   21870:	add	r2, r2, #1
   21874:	cmp	r1, #0
   21878:	beq	21840 <__assert_fail@plt+0xf24c>
   2187c:	ldr	r1, [r3, #16]!
   21880:	cmp	r1, #1
   21884:	bne	2186c <__assert_fail@plt+0xf278>
   21888:	add	r0, lr, r2, lsl #4
   2188c:	str	r0, [ip]
   21890:	b	21840 <__assert_fail@plt+0xf24c>
   21894:	ldrdeq	r4, [r6], -r0
   21898:	andeq	r4, r6, ip, ror #28
   2189c:	andeq	r0, r5, r0, ror r6
   218a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   218a4:	mov	r7, r0
   218a8:	ldr	r6, [pc, #360]	; 21a18 <__assert_fail@plt+0xf424>
   218ac:	sub	sp, sp, #12
   218b0:	mov	r4, r1
   218b4:	ldrb	r3, [r6, #4]
   218b8:	mov	r5, r2
   218bc:	cmp	r3, #0
   218c0:	beq	219c0 <__assert_fail@plt+0xf3cc>
   218c4:	cmp	r4, #0
   218c8:	beq	219b4 <__assert_fail@plt+0xf3c0>
   218cc:	ldr	r3, [r5]
   218d0:	ldr	r4, [r4, r3, lsl #2]
   218d4:	cmp	r4, #0
   218d8:	beq	219b4 <__assert_fail@plt+0xf3c0>
   218dc:	ldr	r2, [pc, #312]	; 21a1c <__assert_fail@plt+0xf428>
   218e0:	add	r3, r3, #1
   218e4:	str	r3, [r5]
   218e8:	ldrb	r5, [r2, #17]
   218ec:	cmp	r5, #0
   218f0:	bne	21970 <__assert_fail@plt+0xf37c>
   218f4:	ldrb	r3, [r2, #16]
   218f8:	cmp	r3, #0
   218fc:	beq	21970 <__assert_fail@plt+0xf37c>
   21900:	mov	r1, #47	; 0x2f
   21904:	mov	r0, r4
   21908:	bl	1230c <strchr@plt>
   2190c:	cmp	r0, #0
   21910:	beq	21970 <__assert_fail@plt+0xf37c>
   21914:	mov	r2, #5
   21918:	ldr	r1, [pc, #256]	; 21a20 <__assert_fail@plt+0xf42c>
   2191c:	mov	r0, r5
   21920:	bl	120b4 <dcgettext@plt>
   21924:	ldr	r1, [pc, #248]	; 21a24 <__assert_fail@plt+0xf430>
   21928:	mov	r6, r0
   2192c:	mov	r0, r5
   21930:	bl	1be34 <__assert_fail@plt+0x9840>
   21934:	ldr	r1, [pc, #236]	; 21a28 <__assert_fail@plt+0xf434>
   21938:	mov	r8, r0
   2193c:	mov	r0, #1
   21940:	bl	1be34 <__assert_fail@plt+0x9840>
   21944:	ldr	r1, [pc, #224]	; 21a2c <__assert_fail@plt+0xf438>
   21948:	mov	r9, r0
   2194c:	mov	r0, #2
   21950:	bl	1be34 <__assert_fail@plt+0x9840>
   21954:	str	r9, [sp]
   21958:	mov	r3, r8
   2195c:	mov	r2, r6
   21960:	mov	r1, r5
   21964:	str	r0, [sp, #4]
   21968:	mov	r0, r5
   2196c:	bl	121ec <error@plt>
   21970:	mov	r1, r4
   21974:	mov	r0, r7
   21978:	bl	1a98c <__assert_fail@plt+0x8398>
   2197c:	mov	r3, #0
   21980:	ldr	r1, [pc, #168]	; 21a30 <__assert_fail@plt+0xf43c>
   21984:	mov	r5, r0
   21988:	str	r4, [r0, #40]	; 0x28
   2198c:	mov	r0, r4
   21990:	strb	r3, [r5, #19]
   21994:	strb	r3, [r5, #18]
   21998:	bl	12528 <strpbrk@plt>
   2199c:	vldr	s15, [pc, #108]	; 21a10 <__assert_fail@plt+0xf41c>
   219a0:	vldr	s14, [pc, #108]	; 21a14 <__assert_fail@plt+0xf420>
   219a4:	mov	r4, #1
   219a8:	cmp	r0, #0
   219ac:	vmoveq.f32	s15, s14
   219b0:	vstr	s15, [r5, #28]
   219b4:	mov	r0, r4
   219b8:	add	sp, sp, #12
   219bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   219c0:	ldr	r1, [pc, #108]	; 21a34 <__assert_fail@plt+0xf440>
   219c4:	mov	r2, r3
   219c8:	mov	r0, r1
   219cc:	bl	12210 <fnmatch@plt>
   219d0:	subs	r2, r0, #0
   219d4:	bne	21a0c <__assert_fail@plt+0xf418>
   219d8:	ldr	r1, [pc, #84]	; 21a34 <__assert_fail@plt+0xf440>
   219dc:	ldr	r0, [pc, #84]	; 21a38 <__assert_fail@plt+0xf444>
   219e0:	bl	12210 <fnmatch@plt>
   219e4:	cmp	r0, #0
   219e8:	beq	21a0c <__assert_fail@plt+0xf418>
   219ec:	mov	r2, #16
   219f0:	ldr	r1, [pc, #60]	; 21a34 <__assert_fail@plt+0xf440>
   219f4:	ldr	r0, [pc, #60]	; 21a38 <__assert_fail@plt+0xf444>
   219f8:	bl	12210 <fnmatch@plt>
   219fc:	cmp	r0, #0
   21a00:	moveq	r3, #1
   21a04:	strbeq	r3, [r6, #4]
   21a08:	beq	218c4 <__assert_fail@plt+0xf2d0>
   21a0c:	bl	126bc <__assert_fail@plt+0xc8>
   21a10:	svccc	0x004ccccd
   21a14:	stclcc	12, cr12, [ip, #820]	; 0x334
   21a18:	ldrdeq	r4, [r6], -r0
   21a1c:	andeq	r4, r6, ip, ror #28
   21a20:	andeq	r1, r5, r0, lsr r6
   21a24:	strdeq	r1, [r5], -r4
   21a28:	andeq	r3, r5, r4, lsl #27
   21a2c:	strdeq	r1, [r5], -ip
   21a30:	strdeq	r1, [r5], -r8
   21a34:	andeq	r1, r5, r8, lsr #12
   21a38:	andeq	r1, r5, ip, lsr #12
   21a3c:	ldr	r3, [pc, #144]	; 21ad4 <__assert_fail@plt+0xf4e0>
   21a40:	ldr	r0, [pc, #144]	; 21ad8 <__assert_fail@plt+0xf4e4>
   21a44:	mov	r2, #1
   21a48:	ldr	ip, [r3, #44]	; 0x2c
   21a4c:	push	{r4, lr}
   21a50:	tst	ip, #2
   21a54:	ldr	ip, [pc, #128]	; 21adc <__assert_fail@plt+0xf4e8>
   21a58:	str	r0, [r3, #52]	; 0x34
   21a5c:	strb	r2, [r3, #12]
   21a60:	str	r2, [r3, #48]	; 0x30
   21a64:	ldr	r0, [ip]
   21a68:	ldrne	r2, [pc, #112]	; 21ae0 <__assert_fail@plt+0xf4ec>
   21a6c:	ldr	r1, [pc, #112]	; 21ae4 <__assert_fail@plt+0xf4f0>
   21a70:	strne	r2, [r3, #52]	; 0x34
   21a74:	cmp	r0, #0
   21a78:	str	r1, [r3, #64]	; 0x40
   21a7c:	beq	21aa0 <__assert_fail@plt+0xf4ac>
   21a80:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   21a84:	mov	r3, #0
   21a88:	mov	r2, #1065353216	; 0x3f800000
   21a8c:	strb	r3, [r0, #19]
   21a90:	strb	r3, [r0, #18]
   21a94:	str	r2, [r0, #28]
   21a98:	mov	r0, #1
   21a9c:	pop	{r4, pc}
   21aa0:	ldr	lr, [pc, #64]	; 21ae8 <__assert_fail@plt+0xf4f4>
   21aa4:	mov	r2, r0
   21aa8:	mov	r3, lr
   21aac:	ldr	r1, [r3, #20]
   21ab0:	add	r2, r2, #1
   21ab4:	cmp	r1, #0
   21ab8:	beq	21a80 <__assert_fail@plt+0xf48c>
   21abc:	ldr	r1, [r3, #16]!
   21ac0:	cmp	r1, #1
   21ac4:	bne	21aac <__assert_fail@plt+0xf4b8>
   21ac8:	add	r0, lr, r2, lsl #4
   21acc:	str	r0, [ip]
   21ad0:	b	21a80 <__assert_fail@plt+0xf48c>
   21ad4:	andeq	r4, r6, ip, ror #28
   21ad8:	andeq	fp, r1, r8, asr r1
   21adc:	ldrdeq	r4, [r6], -r0
   21ae0:	andeq	fp, r1, ip, lsr #5
   21ae4:	andeq	r0, r2, ip, asr #22
   21ae8:	andeq	r0, r5, r0, ror r6
   21aec:	push	{r4, r5, r6, r7, lr}
   21af0:	mov	r7, r0
   21af4:	ldr	r6, [pc, #360]	; 21c64 <__assert_fail@plt+0xf670>
   21af8:	sub	sp, sp, #12
   21afc:	mov	r4, r1
   21b00:	ldrb	r3, [r6, #4]
   21b04:	mov	r5, r2
   21b08:	cmp	r3, #0
   21b0c:	beq	21b90 <__assert_fail@plt+0xf59c>
   21b10:	cmp	r4, #0
   21b14:	beq	21be4 <__assert_fail@plt+0xf5f0>
   21b18:	ldr	r3, [r5]
   21b1c:	ldr	r4, [r4, r3, lsl #2]
   21b20:	cmp	r4, #0
   21b24:	beq	21be4 <__assert_fail@plt+0xf5f0>
   21b28:	add	r3, r3, #1
   21b2c:	str	r3, [r5]
   21b30:	mov	r2, r4
   21b34:	ldr	r1, [pc, #300]	; 21c68 <__assert_fail@plt+0xf674>
   21b38:	mov	r0, r7
   21b3c:	bl	1a958 <__assert_fail@plt+0x8364>
   21b40:	mov	r3, #0
   21b44:	ldr	r1, [pc, #288]	; 21c6c <__assert_fail@plt+0xf678>
   21b48:	strb	r3, [r0, #19]
   21b4c:	strb	r3, [r0, #18]
   21b50:	mov	r5, r0
   21b54:	str	r4, [r0, #40]	; 0x28
   21b58:	mov	r0, r4
   21b5c:	bl	12528 <strpbrk@plt>
   21b60:	vldr	s15, [pc, #244]	; 21c5c <__assert_fail@plt+0xf668>
   21b64:	vldr	s14, [pc, #244]	; 21c60 <__assert_fail@plt+0xf66c>
   21b68:	ldr	r3, [pc, #256]	; 21c70 <__assert_fail@plt+0xf67c>
   21b6c:	ldrb	r3, [r3, #17]
   21b70:	cmp	r0, #0
   21b74:	vmoveq.f32	s15, s14
   21b78:	cmp	r3, #0
   21b7c:	vstr	s15, [r5, #28]
   21b80:	beq	21bf0 <__assert_fail@plt+0xf5fc>
   21b84:	mov	r0, #1
   21b88:	add	sp, sp, #12
   21b8c:	pop	{r4, r5, r6, r7, pc}
   21b90:	ldr	r1, [pc, #220]	; 21c74 <__assert_fail@plt+0xf680>
   21b94:	mov	r2, r3
   21b98:	mov	r0, r1
   21b9c:	bl	12210 <fnmatch@plt>
   21ba0:	subs	r2, r0, #0
   21ba4:	bne	21c58 <__assert_fail@plt+0xf664>
   21ba8:	ldr	r1, [pc, #196]	; 21c74 <__assert_fail@plt+0xf680>
   21bac:	ldr	r0, [pc, #196]	; 21c78 <__assert_fail@plt+0xf684>
   21bb0:	bl	12210 <fnmatch@plt>
   21bb4:	cmp	r0, #0
   21bb8:	beq	21c58 <__assert_fail@plt+0xf664>
   21bbc:	mov	r2, #16
   21bc0:	ldr	r1, [pc, #172]	; 21c74 <__assert_fail@plt+0xf680>
   21bc4:	ldr	r0, [pc, #172]	; 21c78 <__assert_fail@plt+0xf684>
   21bc8:	bl	12210 <fnmatch@plt>
   21bcc:	cmp	r0, #0
   21bd0:	bne	21c58 <__assert_fail@plt+0xf664>
   21bd4:	mov	r3, #1
   21bd8:	cmp	r4, #0
   21bdc:	strb	r3, [r6, #4]
   21be0:	bne	21b18 <__assert_fail@plt+0xf524>
   21be4:	mov	r0, r4
   21be8:	add	sp, sp, #12
   21bec:	pop	{r4, r5, r6, r7, pc}
   21bf0:	mov	r1, #47	; 0x2f
   21bf4:	mov	r0, r4
   21bf8:	bl	12468 <strrchr@plt>
   21bfc:	cmp	r0, #0
   21c00:	beq	21b84 <__assert_fail@plt+0xf590>
   21c04:	ldrb	r3, [r0, #1]
   21c08:	cmp	r3, #0
   21c0c:	bne	21b84 <__assert_fail@plt+0xf590>
   21c10:	mov	r1, #1
   21c14:	mov	r0, r4
   21c18:	bl	17360 <__assert_fail@plt+0x4d6c>
   21c1c:	subs	r6, r0, #0
   21c20:	bne	21b84 <__assert_fail@plt+0xf590>
   21c24:	mov	r2, #5
   21c28:	ldr	r1, [pc, #76]	; 21c7c <__assert_fail@plt+0xf688>
   21c2c:	bl	120b4 <dcgettext@plt>
   21c30:	ldr	r3, [pc, #72]	; 21c80 <__assert_fail@plt+0xf68c>
   21c34:	str	r4, [sp]
   21c38:	mov	r1, r6
   21c3c:	mov	r2, r0
   21c40:	mov	r0, r6
   21c44:	bl	121ec <error@plt>
   21c48:	ldr	r3, [pc, #52]	; 21c84 <__assert_fail@plt+0xf690>
   21c4c:	mov	r0, #1
   21c50:	str	r3, [r5, #28]
   21c54:	b	21b88 <__assert_fail@plt+0xf594>
   21c58:	bl	126bc <__assert_fail@plt+0xc8>
   21c5c:	svccc	0x004ccccd
   21c60:	stclcc	12, cr12, [ip, #820]	; 0x334
   21c64:	ldrdeq	r4, [r6], -r0
   21c68:	andeq	r4, r1, r8, lsl #11
   21c6c:	strdeq	r1, [r5], -r8
   21c70:	andeq	r4, r6, ip, ror #28
   21c74:	andeq	r1, r5, r8, lsr #12
   21c78:	andeq	r1, r5, ip, lsr #12
   21c7c:	andeq	r1, r5, r8, lsl #16
   21c80:	andeq	r1, r5, r8, asr #16
   21c84:	eorcc	ip, fp, #30464	; 0x7700
   21c88:	push	{r4, r5, r6, lr}
   21c8c:	ldr	r4, [pc, #168]	; 21d3c <__assert_fail@plt+0xf748>
   21c90:	ldrb	r5, [r4, #17]
   21c94:	cmp	r5, #0
   21c98:	bne	21cc8 <__assert_fail@plt+0xf6d4>
   21c9c:	ldrb	r3, [r4, #16]
   21ca0:	cmp	r3, #0
   21ca4:	beq	21cc8 <__assert_fail@plt+0xf6d4>
   21ca8:	mov	r2, #5
   21cac:	ldr	r1, [pc, #140]	; 21d40 <__assert_fail@plt+0xf74c>
   21cb0:	mov	r0, r5
   21cb4:	bl	120b4 <dcgettext@plt>
   21cb8:	mov	r1, r5
   21cbc:	mov	r2, r0
   21cc0:	mov	r0, r5
   21cc4:	bl	121ec <error@plt>
   21cc8:	ldr	ip, [pc, #116]	; 21d44 <__assert_fail@plt+0xf750>
   21ccc:	mov	r2, #0
   21cd0:	mov	r3, #1
   21cd4:	ldr	r0, [ip]
   21cd8:	strb	r2, [r4]
   21cdc:	cmp	r0, r2
   21ce0:	strb	r3, [r4, #1]
   21ce4:	beq	21d08 <__assert_fail@plt+0xf714>
   21ce8:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   21cec:	mov	r3, #0
   21cf0:	mov	r2, #1065353216	; 0x3f800000
   21cf4:	strb	r3, [r0, #19]
   21cf8:	strb	r3, [r0, #18]
   21cfc:	str	r2, [r0, #28]
   21d00:	mov	r0, #1
   21d04:	pop	{r4, r5, r6, pc}
   21d08:	ldr	lr, [pc, #56]	; 21d48 <__assert_fail@plt+0xf754>
   21d0c:	mov	r2, r0
   21d10:	mov	r3, lr
   21d14:	ldr	r1, [r3, #20]
   21d18:	add	r2, r2, #1
   21d1c:	cmp	r1, #0
   21d20:	beq	21ce8 <__assert_fail@plt+0xf6f4>
   21d24:	ldr	r1, [r3, #16]!
   21d28:	cmp	r1, #1
   21d2c:	bne	21d14 <__assert_fail@plt+0xf720>
   21d30:	add	r0, lr, r2, lsl #4
   21d34:	str	r0, [ip]
   21d38:	b	21ce8 <__assert_fail@plt+0xf6f4>
   21d3c:	andeq	r4, r6, ip, ror #28
   21d40:	andeq	r1, r5, r4, asr r8
   21d44:	ldrdeq	r4, [r6], -r0
   21d48:	andeq	r0, r5, r0, ror r6
   21d4c:	cmp	r1, #0
   21d50:	ldr	r3, [r2]
   21d54:	beq	21e24 <__assert_fail@plt+0xf830>
   21d58:	push	{r4, r5, r6, r7, lr}
   21d5c:	lsl	r0, r3, #2
   21d60:	ldr	r4, [r1, r3, lsl #2]
   21d64:	sub	sp, sp, #12
   21d68:	cmp	r4, #0
   21d6c:	beq	21e2c <__assert_fail@plt+0xf838>
   21d70:	add	r1, r1, r0
   21d74:	add	r3, r3, #1
   21d78:	ldr	r6, [r1, #-4]
   21d7c:	mov	r0, r4
   21d80:	ldr	r1, [pc, #248]	; 21e80 <__assert_fail@plt+0xf88c>
   21d84:	str	r3, [r2]
   21d88:	bl	125e8 <strspn@plt>
   21d8c:	cmp	r0, #0
   21d90:	ldrle	r5, [pc, #236]	; 21e84 <__assert_fail@plt+0xf890>
   21d94:	ble	21e44 <__assert_fail@plt+0xf850>
   21d98:	ldrb	r3, [r4, r0]
   21d9c:	ldr	r5, [pc, #224]	; 21e84 <__assert_fail@plt+0xf890>
   21da0:	cmp	r3, #0
   21da4:	bne	21e44 <__assert_fail@plt+0xf850>
   21da8:	mov	r0, r4
   21dac:	ldr	r1, [r5, #72]	; 0x48
   21db0:	bl	26544 <__assert_fail@plt+0x13f50>
   21db4:	cmp	r0, #0
   21db8:	str	r0, [r5, #8]
   21dbc:	blt	21e44 <__assert_fail@plt+0xf850>
   21dc0:	ldr	ip, [pc, #192]	; 21e88 <__assert_fail@plt+0xf894>
   21dc4:	ldr	r0, [ip]
   21dc8:	cmp	r0, #0
   21dcc:	beq	21df4 <__assert_fail@plt+0xf800>
   21dd0:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   21dd4:	mov	r3, #0
   21dd8:	mov	r2, #1065353216	; 0x3f800000
   21ddc:	strb	r3, [r0, #19]
   21de0:	strb	r3, [r0, #18]
   21de4:	str	r2, [r0, #28]
   21de8:	mov	r0, #1
   21dec:	add	sp, sp, #12
   21df0:	pop	{r4, r5, r6, r7, pc}
   21df4:	ldr	lr, [pc, #144]	; 21e8c <__assert_fail@plt+0xf898>
   21df8:	mov	r2, r0
   21dfc:	mov	r3, lr
   21e00:	b	21e10 <__assert_fail@plt+0xf81c>
   21e04:	ldr	r1, [r3, #16]!
   21e08:	cmp	r1, #1
   21e0c:	beq	21e38 <__assert_fail@plt+0xf844>
   21e10:	ldr	r1, [r3, #20]
   21e14:	add	r2, r2, #1
   21e18:	cmp	r1, #0
   21e1c:	bne	21e04 <__assert_fail@plt+0xf810>
   21e20:	b	21dd0 <__assert_fail@plt+0xf7dc>
   21e24:	mov	r0, r1
   21e28:	bx	lr
   21e2c:	mov	r0, r4
   21e30:	add	sp, sp, #12
   21e34:	pop	{r4, r5, r6, r7, pc}
   21e38:	add	r0, lr, r2, lsl #4
   21e3c:	str	r0, [ip]
   21e40:	b	21dd0 <__assert_fail@plt+0xf7dc>
   21e44:	mov	r2, #5
   21e48:	ldr	r1, [pc, #64]	; 21e90 <__assert_fail@plt+0xf89c>
   21e4c:	mov	r0, #0
   21e50:	bl	120b4 <dcgettext@plt>
   21e54:	mov	r2, r4
   21e58:	ldr	r1, [r5, #72]	; 0x48
   21e5c:	mov	r7, r0
   21e60:	mov	r0, #0
   21e64:	bl	325f0 <__assert_fail@plt+0x1fffc>
   21e68:	mov	r2, r7
   21e6c:	mov	r3, r6
   21e70:	mov	r1, #0
   21e74:	str	r0, [sp]
   21e78:	mov	r0, #1
   21e7c:	bl	121ec <error@plt>
   21e80:	andeq	r0, r5, r0, lsl lr
   21e84:	andeq	r4, r6, ip, ror #28
   21e88:	ldrdeq	r4, [r6], -r0
   21e8c:	andeq	r0, r5, r0, ror r6
   21e90:	andeq	r1, r5, r8, asr #17
   21e94:	cmp	r1, #0
   21e98:	ldr	r3, [r2]
   21e9c:	beq	21f6c <__assert_fail@plt+0xf978>
   21ea0:	push	{r4, r5, r6, r7, lr}
   21ea4:	lsl	r0, r3, #2
   21ea8:	ldr	r4, [r1, r3, lsl #2]
   21eac:	sub	sp, sp, #12
   21eb0:	cmp	r4, #0
   21eb4:	beq	21f74 <__assert_fail@plt+0xf980>
   21eb8:	add	r1, r1, r0
   21ebc:	add	r3, r3, #1
   21ec0:	ldr	r6, [r1, #-4]
   21ec4:	mov	r0, r4
   21ec8:	ldr	r1, [pc, #248]	; 21fc8 <__assert_fail@plt+0xf9d4>
   21ecc:	str	r3, [r2]
   21ed0:	bl	125e8 <strspn@plt>
   21ed4:	cmp	r0, #0
   21ed8:	ldrle	r5, [pc, #236]	; 21fcc <__assert_fail@plt+0xf9d8>
   21edc:	ble	21f8c <__assert_fail@plt+0xf998>
   21ee0:	ldrb	r3, [r4, r0]
   21ee4:	ldr	r5, [pc, #224]	; 21fcc <__assert_fail@plt+0xf9d8>
   21ee8:	cmp	r3, #0
   21eec:	bne	21f8c <__assert_fail@plt+0xf998>
   21ef0:	mov	r0, r4
   21ef4:	ldr	r1, [r5, #72]	; 0x48
   21ef8:	bl	26544 <__assert_fail@plt+0x13f50>
   21efc:	cmp	r0, #0
   21f00:	str	r0, [r5, #4]
   21f04:	blt	21f8c <__assert_fail@plt+0xf998>
   21f08:	ldr	ip, [pc, #192]	; 21fd0 <__assert_fail@plt+0xf9dc>
   21f0c:	ldr	r0, [ip]
   21f10:	cmp	r0, #0
   21f14:	beq	21f3c <__assert_fail@plt+0xf948>
   21f18:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   21f1c:	mov	r3, #0
   21f20:	mov	r2, #1065353216	; 0x3f800000
   21f24:	strb	r3, [r0, #19]
   21f28:	strb	r3, [r0, #18]
   21f2c:	str	r2, [r0, #28]
   21f30:	mov	r0, #1
   21f34:	add	sp, sp, #12
   21f38:	pop	{r4, r5, r6, r7, pc}
   21f3c:	ldr	lr, [pc, #144]	; 21fd4 <__assert_fail@plt+0xf9e0>
   21f40:	mov	r2, r0
   21f44:	mov	r3, lr
   21f48:	b	21f58 <__assert_fail@plt+0xf964>
   21f4c:	ldr	r1, [r3, #16]!
   21f50:	cmp	r1, #1
   21f54:	beq	21f80 <__assert_fail@plt+0xf98c>
   21f58:	ldr	r1, [r3, #20]
   21f5c:	add	r2, r2, #1
   21f60:	cmp	r1, #0
   21f64:	bne	21f4c <__assert_fail@plt+0xf958>
   21f68:	b	21f18 <__assert_fail@plt+0xf924>
   21f6c:	mov	r0, r1
   21f70:	bx	lr
   21f74:	mov	r0, r4
   21f78:	add	sp, sp, #12
   21f7c:	pop	{r4, r5, r6, r7, pc}
   21f80:	add	r0, lr, r2, lsl #4
   21f84:	str	r0, [ip]
   21f88:	b	21f18 <__assert_fail@plt+0xf924>
   21f8c:	mov	r2, #5
   21f90:	ldr	r1, [pc, #64]	; 21fd8 <__assert_fail@plt+0xf9e4>
   21f94:	mov	r0, #0
   21f98:	bl	120b4 <dcgettext@plt>
   21f9c:	mov	r2, r4
   21fa0:	ldr	r1, [r5, #72]	; 0x48
   21fa4:	mov	r7, r0
   21fa8:	mov	r0, #0
   21fac:	bl	325f0 <__assert_fail@plt+0x1fffc>
   21fb0:	mov	r2, r7
   21fb4:	mov	r3, r6
   21fb8:	mov	r1, #0
   21fbc:	str	r0, [sp]
   21fc0:	mov	r0, #1
   21fc4:	bl	121ec <error@plt>
   21fc8:	andeq	r0, r5, r0, lsl lr
   21fcc:	andeq	r4, r6, ip, ror #28
   21fd0:	ldrdeq	r4, [r6], -r0
   21fd4:	andeq	r0, r5, r0, ror r6
   21fd8:	andeq	r1, r5, r8, asr #17
   21fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fe0:	subs	r7, r1, #0
   21fe4:	sub	sp, sp, #28
   21fe8:	ldr	r6, [r2]
   21fec:	beq	2205c <__assert_fail@plt+0xfa68>
   21ff0:	ldr	r5, [r7, r6, lsl #2]
   21ff4:	cmp	r5, #0
   21ff8:	beq	2219c <__assert_fail@plt+0xfba8>
   21ffc:	add	r3, r6, #1
   22000:	str	r3, [r2]
   22004:	ldrb	r3, [r5]
   22008:	cmp	r3, #43	; 0x2b
   2200c:	beq	22068 <__assert_fail@plt+0xfa74>
   22010:	cmp	r3, #45	; 0x2d
   22014:	addeq	sl, r5, #1
   22018:	moveq	fp, #0
   2201c:	movne	sl, r5
   22020:	movne	fp, #2
   22024:	ldr	r9, [pc, #484]	; 22210 <__assert_fail@plt+0xfc1c>
   22028:	str	r0, [sp, #4]
   2202c:	mov	r4, r2
   22030:	ldr	ip, [r9, #32]
   22034:	ldr	r3, [pc, #472]	; 22214 <__assert_fail@plt+0xfc20>
   22038:	add	r2, sp, #8
   2203c:	mov	r1, #0
   22040:	mov	r0, sl
   22044:	ldr	r8, [r9, #28]
   22048:	str	ip, [sp]
   2204c:	bl	35cc4 <__assert_fail@plt+0x236d0>
   22050:	subs	r7, r0, #0
   22054:	streq	r6, [r4]
   22058:	bne	22074 <__assert_fail@plt+0xfa80>
   2205c:	mov	r0, r7
   22060:	add	sp, sp, #28
   22064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22068:	add	sl, r5, #1
   2206c:	mov	fp, #1
   22070:	b	22024 <__assert_fail@plt+0xfa30>
   22074:	vldr	d7, [pc, #364]	; 221e8 <__assert_fail@plt+0xfbf4>
   22078:	vldr	d0, [sp, #8]
   2207c:	add	r0, sp, #16
   22080:	vmul.f64	d0, d0, d7
   22084:	bl	12294 <modf@plt>
   22088:	vldr	d7, [pc, #352]	; 221f0 <__assert_fail@plt+0xfbfc>
   2208c:	vmul.f64	d0, d0, d7
   22090:	vcmpe.f64	d0, d7
   22094:	vmrs	APSR_nzcv, fpscr
   22098:	bpl	221d0 <__assert_fail@plt+0xfbdc>
   2209c:	add	r8, r8, #86016	; 0x15000
   220a0:	add	r8, r8, #384	; 0x180
   220a4:	vldr	d6, [sp, #16]
   220a8:	vmov	s15, r8
   220ac:	vcmpe.f64	d6, #0.0
   220b0:	vcvt.f64.s32	d7, s15
   220b4:	vmrs	APSR_nzcv, fpscr
   220b8:	movmi	r2, #1
   220bc:	vsub.f64	d7, d7, d6
   220c0:	movpl	r2, #0
   220c4:	vcvt.s32.f64	s15, d7
   220c8:	vmov	r6, s15
   220cc:	cmp	r8, r6
   220d0:	movge	r8, #0
   220d4:	movlt	r8, #1
   220d8:	cmp	r8, r2
   220dc:	bne	221bc <__assert_fail@plt+0xfbc8>
   220e0:	vldr	s15, [sp]
   220e4:	vcvt.f64.s32	d7, s15
   220e8:	vcmpe.f64	d0, d7
   220ec:	vsub.f64	d7, d7, d0
   220f0:	vmrs	APSR_nzcv, fpscr
   220f4:	vcvt.s32.f64	s15, d7
   220f8:	vmov	r4, s15
   220fc:	addgt	r4, r4, #998244352	; 0x3b800000
   22100:	addgt	r4, r4, #1753088	; 0x1ac000
   22104:	addgt	r4, r4, #2560	; 0xa00
   22108:	subgt	r6, r6, #1
   2210c:	mov	r1, r5
   22110:	ldr	r0, [sp, #4]
   22114:	bl	1a98c <__assert_fail@plt+0x8398>
   22118:	ldr	r2, [r9, #28]
   2211c:	ldr	r1, [pc, #244]	; 22218 <__assert_fail@plt+0xfc24>
   22120:	sub	r2, r2, r6
   22124:	vldr	s14, [pc, #204]	; 221f8 <__assert_fail@plt+0xfc04>
   22128:	smull	r3, r1, r1, r2
   2212c:	add	r1, r1, r2
   22130:	asr	r2, r2, #31
   22134:	rsb	r2, r2, r1, asr #16
   22138:	mov	r1, #3
   2213c:	vmov	s15, r2
   22140:	vcvt.f32.s32	s15, s15
   22144:	vcmpe.f32	s15, s14
   22148:	vmrs	APSR_nzcv, fpscr
   2214c:	str	fp, [r0, #44]	; 0x2c
   22150:	str	r6, [r0, #48]	; 0x30
   22154:	str	r4, [r0, #52]	; 0x34
   22158:	str	r1, [r0, #40]	; 0x28
   2215c:	bmi	221ac <__assert_fail@plt+0xfbb8>
   22160:	vldr	s14, [pc, #148]	; 221fc <__assert_fail@plt+0xfc08>
   22164:	vcmpe.f32	s15, s14
   22168:	vmrs	APSR_nzcv, fpscr
   2216c:	bmi	221b4 <__assert_fail@plt+0xfbc0>
   22170:	vldr	s12, [pc, #136]	; 22200 <__assert_fail@plt+0xfc0c>
   22174:	vldr	s14, [pc, #136]	; 22204 <__assert_fail@plt+0xfc10>
   22178:	vldr	s13, [pc, #136]	; 22208 <__assert_fail@plt+0xfc14>
   2217c:	vcmpe.f32	s15, s12
   22180:	vmrs	APSR_nzcv, fpscr
   22184:	vmovle.f32	s15, s13
   22188:	vmovgt.f32	s15, s14
   2218c:	vstr	s15, [r0, #28]
   22190:	mov	r0, r7
   22194:	add	sp, sp, #28
   22198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2219c:	mov	r7, r5
   221a0:	mov	r0, r7
   221a4:	add	sp, sp, #28
   221a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221ac:	vldr	s15, [pc, #88]	; 2220c <__assert_fail@plt+0xfc18>
   221b0:	b	2218c <__assert_fail@plt+0xfb98>
   221b4:	vldr	s15, [pc, #72]	; 22204 <__assert_fail@plt+0xfc10>
   221b8:	b	2218c <__assert_fail@plt+0xfb98>
   221bc:	mov	r3, sl
   221c0:	ldr	r2, [pc, #84]	; 2221c <__assert_fail@plt+0xfc28>
   221c4:	mov	r1, #0
   221c8:	mov	r0, #1
   221cc:	bl	121ec <error@plt>
   221d0:	ldr	r3, [pc, #72]	; 22220 <__assert_fail@plt+0xfc2c>
   221d4:	ldr	r2, [pc, #72]	; 22224 <__assert_fail@plt+0xfc30>
   221d8:	ldr	r1, [pc, #72]	; 22228 <__assert_fail@plt+0xfc34>
   221dc:	ldr	r0, [pc, #72]	; 2222c <__assert_fail@plt+0xfc38>
   221e0:	bl	125f4 <__assert_fail@plt>
   221e4:	nop			; (mov r0, r0)
   221e8:	andeq	r0, r0, r0
   221ec:	submi	r0, lr, r0
   221f0:	andeq	r0, r0, r0
   221f4:	bicmi	ip, sp, r5, ror #26
   221f8:	stclcc	12, cr12, [ip, #820]	; 0x334
   221fc:	svccc	0x00800000
   22200:	sbcmi	r0, r8, #0
   22204:			; <UNDEFINED> instruction: 0x3e99999a
   22208:	mcrcc	14, 6, sl, cr7, cr4, {0}
   2220c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   22210:	andeq	r4, r6, ip, ror #28
   22214:			; <UNDEFINED> instruction: 0x000123b4
   22218:	eorgt	r4, lr, #29360128	; 0x1c00000
   2221c:	andeq	r1, r5, r8, lsl #18
   22220:	andeq	r0, r5, r0, ror #23
   22224:	andeq	r0, r0, sp, asr #24
   22228:	andeq	r1, r5, r0, lsr #3
   2222c:	andeq	r1, r5, r0, asr #14
   22230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22234:	subs	r7, r1, #0
   22238:	sub	sp, sp, #28
   2223c:	ldr	r6, [r2]
   22240:	beq	222b0 <__assert_fail@plt+0xfcbc>
   22244:	ldr	r5, [r7, r6, lsl #2]
   22248:	cmp	r5, #0
   2224c:	beq	223f0 <__assert_fail@plt+0xfdfc>
   22250:	add	r3, r6, #1
   22254:	str	r3, [r2]
   22258:	ldrb	r3, [r5]
   2225c:	cmp	r3, #43	; 0x2b
   22260:	beq	222bc <__assert_fail@plt+0xfcc8>
   22264:	cmp	r3, #45	; 0x2d
   22268:	addeq	sl, r5, #1
   2226c:	moveq	fp, #0
   22270:	movne	sl, r5
   22274:	movne	fp, #2
   22278:	ldr	r9, [pc, #480]	; 22460 <__assert_fail@plt+0xfe6c>
   2227c:	str	r0, [sp, #4]
   22280:	mov	r4, r2
   22284:	ldr	ip, [r9, #32]
   22288:	ldr	r3, [pc, #468]	; 22464 <__assert_fail@plt+0xfe70>
   2228c:	add	r2, sp, #8
   22290:	mov	r1, #0
   22294:	mov	r0, sl
   22298:	ldr	r8, [r9, #28]
   2229c:	str	ip, [sp]
   222a0:	bl	35cc4 <__assert_fail@plt+0x236d0>
   222a4:	subs	r7, r0, #0
   222a8:	streq	r6, [r4]
   222ac:	bne	222c8 <__assert_fail@plt+0xfcd4>
   222b0:	mov	r0, r7
   222b4:	add	sp, sp, #28
   222b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222bc:	add	sl, r5, #1
   222c0:	mov	fp, #1
   222c4:	b	22278 <__assert_fail@plt+0xfc84>
   222c8:	vldr	d7, [pc, #360]	; 22438 <__assert_fail@plt+0xfe44>
   222cc:	vldr	d0, [sp, #8]
   222d0:	add	r0, sp, #16
   222d4:	vmul.f64	d0, d0, d7
   222d8:	bl	12294 <modf@plt>
   222dc:	vldr	d7, [pc, #348]	; 22440 <__assert_fail@plt+0xfe4c>
   222e0:	vmul.f64	d0, d0, d7
   222e4:	vcmpe.f64	d0, d7
   222e8:	vmrs	APSR_nzcv, fpscr
   222ec:	bpl	22424 <__assert_fail@plt+0xfe30>
   222f0:	add	r8, r8, #86016	; 0x15000
   222f4:	add	r8, r8, #384	; 0x180
   222f8:	vldr	d6, [sp, #16]
   222fc:	vmov	s15, r8
   22300:	vcmpe.f64	d6, #0.0
   22304:	vcvt.f64.s32	d7, s15
   22308:	vmrs	APSR_nzcv, fpscr
   2230c:	movmi	r2, #1
   22310:	vsub.f64	d7, d7, d6
   22314:	movpl	r2, #0
   22318:	vcvt.s32.f64	s15, d7
   2231c:	vmov	r6, s15
   22320:	cmp	r8, r6
   22324:	movge	r8, #0
   22328:	movlt	r8, #1
   2232c:	cmp	r8, r2
   22330:	bne	22410 <__assert_fail@plt+0xfe1c>
   22334:	vldr	s15, [sp]
   22338:	vcvt.f64.s32	d7, s15
   2233c:	vcmpe.f64	d0, d7
   22340:	vsub.f64	d7, d7, d0
   22344:	vmrs	APSR_nzcv, fpscr
   22348:	vcvt.s32.f64	s15, d7
   2234c:	vmov	r4, s15
   22350:	addgt	r4, r4, #998244352	; 0x3b800000
   22354:	addgt	r4, r4, #1753088	; 0x1ac000
   22358:	addgt	r4, r4, #2560	; 0xa00
   2235c:	subgt	r6, r6, #1
   22360:	mov	r1, r5
   22364:	ldr	r0, [sp, #4]
   22368:	bl	1a98c <__assert_fail@plt+0x8398>
   2236c:	ldr	r2, [r9, #28]
   22370:	ldr	r1, [pc, #240]	; 22468 <__assert_fail@plt+0xfe74>
   22374:	sub	r2, r2, r6
   22378:	vldr	s14, [pc, #200]	; 22448 <__assert_fail@plt+0xfe54>
   2237c:	smull	r3, r1, r1, r2
   22380:	add	r1, r1, r2
   22384:	asr	r2, r2, #31
   22388:	rsb	r2, r2, r1, asr #16
   2238c:	mov	r1, #0
   22390:	vmov	s15, r2
   22394:	vcvt.f32.s32	s15, s15
   22398:	vcmpe.f32	s15, s14
   2239c:	vmrs	APSR_nzcv, fpscr
   223a0:	str	fp, [r0, #44]	; 0x2c
   223a4:	str	r6, [r0, #48]	; 0x30
   223a8:	str	r4, [r0, #52]	; 0x34
   223ac:	str	r1, [r0, #40]	; 0x28
   223b0:	bmi	22400 <__assert_fail@plt+0xfe0c>
   223b4:	vldr	s14, [pc, #144]	; 2244c <__assert_fail@plt+0xfe58>
   223b8:	vcmpe.f32	s15, s14
   223bc:	vmrs	APSR_nzcv, fpscr
   223c0:	bmi	22408 <__assert_fail@plt+0xfe14>
   223c4:	vldr	s12, [pc, #132]	; 22450 <__assert_fail@plt+0xfe5c>
   223c8:	vldr	s14, [pc, #132]	; 22454 <__assert_fail@plt+0xfe60>
   223cc:	vldr	s13, [pc, #132]	; 22458 <__assert_fail@plt+0xfe64>
   223d0:	vcmpe.f32	s15, s12
   223d4:	vmrs	APSR_nzcv, fpscr
   223d8:	vmovle.f32	s15, s13
   223dc:	vmovgt.f32	s15, s14
   223e0:	vstr	s15, [r0, #28]
   223e4:	mov	r0, r7
   223e8:	add	sp, sp, #28
   223ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223f0:	mov	r7, r5
   223f4:	mov	r0, r7
   223f8:	add	sp, sp, #28
   223fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22400:	vldr	s15, [pc, #84]	; 2245c <__assert_fail@plt+0xfe68>
   22404:	b	223e0 <__assert_fail@plt+0xfdec>
   22408:	vldr	s15, [pc, #68]	; 22454 <__assert_fail@plt+0xfe60>
   2240c:	b	223e0 <__assert_fail@plt+0xfdec>
   22410:	mov	r3, sl
   22414:	ldr	r2, [pc, #80]	; 2246c <__assert_fail@plt+0xfe78>
   22418:	mov	r1, #0
   2241c:	mov	r0, #1
   22420:	bl	121ec <error@plt>
   22424:	ldr	r3, [pc, #68]	; 22470 <__assert_fail@plt+0xfe7c>
   22428:	ldr	r2, [pc, #68]	; 22474 <__assert_fail@plt+0xfe80>
   2242c:	ldr	r1, [pc, #68]	; 22478 <__assert_fail@plt+0xfe84>
   22430:	ldr	r0, [pc, #68]	; 2247c <__assert_fail@plt+0xfe88>
   22434:	bl	125f4 <__assert_fail@plt>
   22438:	andeq	r0, r0, r0
   2243c:	submi	r0, lr, r0
   22440:	andeq	r0, r0, r0
   22444:	bicmi	ip, sp, r5, ror #26
   22448:	stclcc	12, cr12, [ip, #820]	; 0x334
   2244c:	svccc	0x00800000
   22450:	sbcmi	r0, r8, #0
   22454:			; <UNDEFINED> instruction: 0x3e99999a
   22458:	mcrcc	14, 6, sl, cr7, cr4, {0}
   2245c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   22460:	andeq	r4, r6, ip, ror #28
   22464:			; <UNDEFINED> instruction: 0x000123b4
   22468:	eorgt	r4, lr, #29360128	; 0x1c00000
   2246c:	andeq	r1, r5, r8, lsl #18
   22470:	andeq	r0, r5, r0, ror #23
   22474:	andeq	r0, r0, sp, asr #24
   22478:	andeq	r1, r5, r0, lsr #3
   2247c:	andeq	r1, r5, r0, asr #14
   22480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22484:	subs	r7, r1, #0
   22488:	sub	sp, sp, #28
   2248c:	ldr	r6, [r2]
   22490:	beq	22500 <__assert_fail@plt+0xff0c>
   22494:	ldr	r5, [r7, r6, lsl #2]
   22498:	cmp	r5, #0
   2249c:	beq	22640 <__assert_fail@plt+0x1004c>
   224a0:	add	r3, r6, #1
   224a4:	str	r3, [r2]
   224a8:	ldrb	r3, [r5]
   224ac:	cmp	r3, #43	; 0x2b
   224b0:	beq	2250c <__assert_fail@plt+0xff18>
   224b4:	cmp	r3, #45	; 0x2d
   224b8:	addeq	sl, r5, #1
   224bc:	moveq	fp, #0
   224c0:	movne	sl, r5
   224c4:	movne	fp, #2
   224c8:	ldr	r9, [pc, #480]	; 226b0 <__assert_fail@plt+0x100bc>
   224cc:	str	r0, [sp, #4]
   224d0:	mov	r4, r2
   224d4:	ldr	ip, [r9, #32]
   224d8:	ldr	r3, [pc, #468]	; 226b4 <__assert_fail@plt+0x100c0>
   224dc:	add	r2, sp, #8
   224e0:	mov	r1, #0
   224e4:	mov	r0, sl
   224e8:	ldr	r8, [r9, #28]
   224ec:	str	ip, [sp]
   224f0:	bl	35cc4 <__assert_fail@plt+0x236d0>
   224f4:	subs	r7, r0, #0
   224f8:	streq	r6, [r4]
   224fc:	bne	22518 <__assert_fail@plt+0xff24>
   22500:	mov	r0, r7
   22504:	add	sp, sp, #28
   22508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2250c:	add	sl, r5, #1
   22510:	mov	fp, #1
   22514:	b	224c8 <__assert_fail@plt+0xfed4>
   22518:	vldr	d7, [pc, #360]	; 22688 <__assert_fail@plt+0x10094>
   2251c:	vldr	d0, [sp, #8]
   22520:	add	r0, sp, #16
   22524:	vmul.f64	d0, d0, d7
   22528:	bl	12294 <modf@plt>
   2252c:	vldr	d7, [pc, #348]	; 22690 <__assert_fail@plt+0x1009c>
   22530:	vmul.f64	d0, d0, d7
   22534:	vcmpe.f64	d0, d7
   22538:	vmrs	APSR_nzcv, fpscr
   2253c:	bpl	22674 <__assert_fail@plt+0x10080>
   22540:	add	r8, r8, #86016	; 0x15000
   22544:	add	r8, r8, #384	; 0x180
   22548:	vldr	d6, [sp, #16]
   2254c:	vmov	s15, r8
   22550:	vcmpe.f64	d6, #0.0
   22554:	vcvt.f64.s32	d7, s15
   22558:	vmrs	APSR_nzcv, fpscr
   2255c:	movmi	r2, #1
   22560:	vsub.f64	d7, d7, d6
   22564:	movpl	r2, #0
   22568:	vcvt.s32.f64	s15, d7
   2256c:	vmov	r6, s15
   22570:	cmp	r8, r6
   22574:	movge	r8, #0
   22578:	movlt	r8, #1
   2257c:	cmp	r8, r2
   22580:	bne	22660 <__assert_fail@plt+0x1006c>
   22584:	vldr	s15, [sp]
   22588:	vcvt.f64.s32	d7, s15
   2258c:	vcmpe.f64	d0, d7
   22590:	vsub.f64	d7, d7, d0
   22594:	vmrs	APSR_nzcv, fpscr
   22598:	vcvt.s32.f64	s15, d7
   2259c:	vmov	r4, s15
   225a0:	addgt	r4, r4, #998244352	; 0x3b800000
   225a4:	addgt	r4, r4, #1753088	; 0x1ac000
   225a8:	addgt	r4, r4, #2560	; 0xa00
   225ac:	subgt	r6, r6, #1
   225b0:	mov	r1, r5
   225b4:	ldr	r0, [sp, #4]
   225b8:	bl	1a98c <__assert_fail@plt+0x8398>
   225bc:	ldr	r2, [r9, #28]
   225c0:	ldr	r1, [pc, #240]	; 226b8 <__assert_fail@plt+0x100c4>
   225c4:	sub	r2, r2, r6
   225c8:	vldr	s14, [pc, #200]	; 22698 <__assert_fail@plt+0x100a4>
   225cc:	smull	r3, r1, r1, r2
   225d0:	add	r1, r1, r2
   225d4:	asr	r2, r2, #31
   225d8:	rsb	r2, r2, r1, asr #16
   225dc:	mov	r1, #2
   225e0:	vmov	s15, r2
   225e4:	vcvt.f32.s32	s15, s15
   225e8:	vcmpe.f32	s15, s14
   225ec:	vmrs	APSR_nzcv, fpscr
   225f0:	str	fp, [r0, #44]	; 0x2c
   225f4:	str	r6, [r0, #48]	; 0x30
   225f8:	str	r4, [r0, #52]	; 0x34
   225fc:	str	r1, [r0, #40]	; 0x28
   22600:	bmi	22650 <__assert_fail@plt+0x1005c>
   22604:	vldr	s14, [pc, #144]	; 2269c <__assert_fail@plt+0x100a8>
   22608:	vcmpe.f32	s15, s14
   2260c:	vmrs	APSR_nzcv, fpscr
   22610:	bmi	22658 <__assert_fail@plt+0x10064>
   22614:	vldr	s12, [pc, #132]	; 226a0 <__assert_fail@plt+0x100ac>
   22618:	vldr	s14, [pc, #132]	; 226a4 <__assert_fail@plt+0x100b0>
   2261c:	vldr	s13, [pc, #132]	; 226a8 <__assert_fail@plt+0x100b4>
   22620:	vcmpe.f32	s15, s12
   22624:	vmrs	APSR_nzcv, fpscr
   22628:	vmovle.f32	s15, s13
   2262c:	vmovgt.f32	s15, s14
   22630:	vstr	s15, [r0, #28]
   22634:	mov	r0, r7
   22638:	add	sp, sp, #28
   2263c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22640:	mov	r7, r5
   22644:	mov	r0, r7
   22648:	add	sp, sp, #28
   2264c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22650:	vldr	s15, [pc, #84]	; 226ac <__assert_fail@plt+0x100b8>
   22654:	b	22630 <__assert_fail@plt+0x1003c>
   22658:	vldr	s15, [pc, #68]	; 226a4 <__assert_fail@plt+0x100b0>
   2265c:	b	22630 <__assert_fail@plt+0x1003c>
   22660:	mov	r3, sl
   22664:	ldr	r2, [pc, #80]	; 226bc <__assert_fail@plt+0x100c8>
   22668:	mov	r1, #0
   2266c:	mov	r0, #1
   22670:	bl	121ec <error@plt>
   22674:	ldr	r3, [pc, #68]	; 226c0 <__assert_fail@plt+0x100cc>
   22678:	ldr	r2, [pc, #68]	; 226c4 <__assert_fail@plt+0x100d0>
   2267c:	ldr	r1, [pc, #68]	; 226c8 <__assert_fail@plt+0x100d4>
   22680:	ldr	r0, [pc, #68]	; 226cc <__assert_fail@plt+0x100d8>
   22684:	bl	125f4 <__assert_fail@plt>
   22688:	andeq	r0, r0, r0
   2268c:	submi	r0, lr, r0
   22690:	andeq	r0, r0, r0
   22694:	bicmi	ip, sp, r5, ror #26
   22698:	stclcc	12, cr12, [ip, #820]	; 0x334
   2269c:	svccc	0x00800000
   226a0:	sbcmi	r0, r8, #0
   226a4:			; <UNDEFINED> instruction: 0x3e99999a
   226a8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   226ac:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   226b0:	andeq	r4, r6, ip, ror #28
   226b4:			; <UNDEFINED> instruction: 0x000123b4
   226b8:	eorgt	r4, lr, #29360128	; 0x1c00000
   226bc:	andeq	r1, r5, r8, lsl #18
   226c0:	andeq	r0, r5, r0, ror #23
   226c4:	andeq	r0, r0, sp, asr #24
   226c8:	andeq	r1, r5, r0, lsr #3
   226cc:	andeq	r1, r5, r0, asr #14
   226d0:	push	{r4, r5, r6, r7, lr}
   226d4:	mov	r7, r0
   226d8:	ldr	r6, [pc, #380]	; 2285c <__assert_fail@plt+0x10268>
   226dc:	sub	sp, sp, #12
   226e0:	mov	r4, r1
   226e4:	ldrb	r3, [r6, #4]
   226e8:	mov	r5, r2
   226ec:	cmp	r3, #0
   226f0:	beq	22774 <__assert_fail@plt+0x10180>
   226f4:	cmp	r4, #0
   226f8:	beq	227c8 <__assert_fail@plt+0x101d4>
   226fc:	ldr	r3, [r5]
   22700:	ldr	r4, [r4, r3, lsl #2]
   22704:	cmp	r4, #0
   22708:	beq	227c8 <__assert_fail@plt+0x101d4>
   2270c:	add	r3, r3, #1
   22710:	str	r3, [r5]
   22714:	mov	r2, r4
   22718:	ldr	r1, [pc, #320]	; 22860 <__assert_fail@plt+0x1026c>
   2271c:	mov	r0, r7
   22720:	bl	1a958 <__assert_fail@plt+0x8364>
   22724:	mov	r3, #0
   22728:	ldr	r1, [pc, #308]	; 22864 <__assert_fail@plt+0x10270>
   2272c:	strb	r3, [r0, #19]
   22730:	strb	r3, [r0, #18]
   22734:	mov	r5, r0
   22738:	str	r4, [r0, #40]	; 0x28
   2273c:	mov	r0, r4
   22740:	bl	12528 <strpbrk@plt>
   22744:	vldr	s15, [pc, #264]	; 22854 <__assert_fail@plt+0x10260>
   22748:	vldr	s14, [pc, #264]	; 22858 <__assert_fail@plt+0x10264>
   2274c:	ldr	r3, [pc, #276]	; 22868 <__assert_fail@plt+0x10274>
   22750:	ldrb	r3, [r3, #17]
   22754:	cmp	r0, #0
   22758:	vmoveq.f32	s15, s14
   2275c:	cmp	r3, #0
   22760:	vstr	s15, [r5, #28]
   22764:	beq	227d4 <__assert_fail@plt+0x101e0>
   22768:	mov	r0, #1
   2276c:	add	sp, sp, #12
   22770:	pop	{r4, r5, r6, r7, pc}
   22774:	ldr	r1, [pc, #240]	; 2286c <__assert_fail@plt+0x10278>
   22778:	mov	r2, r3
   2277c:	mov	r0, r1
   22780:	bl	12210 <fnmatch@plt>
   22784:	subs	r2, r0, #0
   22788:	bne	22850 <__assert_fail@plt+0x1025c>
   2278c:	ldr	r1, [pc, #216]	; 2286c <__assert_fail@plt+0x10278>
   22790:	ldr	r0, [pc, #216]	; 22870 <__assert_fail@plt+0x1027c>
   22794:	bl	12210 <fnmatch@plt>
   22798:	cmp	r0, #0
   2279c:	beq	22850 <__assert_fail@plt+0x1025c>
   227a0:	mov	r2, #16
   227a4:	ldr	r1, [pc, #192]	; 2286c <__assert_fail@plt+0x10278>
   227a8:	ldr	r0, [pc, #192]	; 22870 <__assert_fail@plt+0x1027c>
   227ac:	bl	12210 <fnmatch@plt>
   227b0:	cmp	r0, #0
   227b4:	bne	22850 <__assert_fail@plt+0x1025c>
   227b8:	mov	r3, #1
   227bc:	cmp	r4, #0
   227c0:	strb	r3, [r6, #4]
   227c4:	bne	226fc <__assert_fail@plt+0x10108>
   227c8:	mov	r0, r4
   227cc:	add	sp, sp, #12
   227d0:	pop	{r4, r5, r6, r7, pc}
   227d4:	mov	r1, #47	; 0x2f
   227d8:	mov	r0, r4
   227dc:	bl	12468 <strrchr@plt>
   227e0:	cmp	r0, #0
   227e4:	beq	22768 <__assert_fail@plt+0x10174>
   227e8:	ldrb	r3, [r0, #1]
   227ec:	cmp	r3, #0
   227f0:	bne	22768 <__assert_fail@plt+0x10174>
   227f4:	ldr	r0, [pc, #100]	; 22860 <__assert_fail@plt+0x1026c>
   227f8:	ldr	r2, [pc, #116]	; 22874 <__assert_fail@plt+0x10280>
   227fc:	mov	r1, #1
   22800:	cmp	r0, r2
   22804:	movne	r1, r3
   22808:	and	r1, r1, #1
   2280c:	mov	r0, r4
   22810:	bl	17360 <__assert_fail@plt+0x4d6c>
   22814:	subs	r6, r0, #0
   22818:	bne	22768 <__assert_fail@plt+0x10174>
   2281c:	mov	r2, #5
   22820:	ldr	r1, [pc, #80]	; 22878 <__assert_fail@plt+0x10284>
   22824:	bl	120b4 <dcgettext@plt>
   22828:	ldr	r3, [pc, #76]	; 2287c <__assert_fail@plt+0x10288>
   2282c:	str	r4, [sp]
   22830:	mov	r1, r6
   22834:	mov	r2, r0
   22838:	mov	r0, r6
   2283c:	bl	121ec <error@plt>
   22840:	ldr	r3, [pc, #56]	; 22880 <__assert_fail@plt+0x1028c>
   22844:	mov	r0, #1
   22848:	str	r3, [r5, #28]
   2284c:	b	2276c <__assert_fail@plt+0x10178>
   22850:	bl	126bc <__assert_fail@plt+0xc8>
   22854:	svccc	0x004ccccd
   22858:	stclcc	12, cr12, [ip, #820]	; 0x334
   2285c:	ldrdeq	r4, [r6], -r0
   22860:	andeq	r4, r1, r8, ror #25
   22864:	strdeq	r1, [r5], -r8
   22868:	andeq	r4, r6, ip, ror #28
   2286c:	andeq	r1, r5, r8, lsr #12
   22870:	andeq	r1, r5, ip, lsr #12
   22874:	andeq	r4, r1, r8, lsl #11
   22878:	andeq	r1, r5, r8, lsl #16
   2287c:	andeq	r1, r5, r0, asr r9
   22880:	eorcc	ip, fp, #30464	; 0x7700
   22884:	push	{r4, r5, r6, r7, lr}
   22888:	mov	r7, r0
   2288c:	ldr	r6, [pc, #360]	; 229fc <__assert_fail@plt+0x10408>
   22890:	sub	sp, sp, #12
   22894:	mov	r4, r1
   22898:	ldrb	r3, [r6, #4]
   2289c:	mov	r5, r2
   228a0:	cmp	r3, #0
   228a4:	beq	22928 <__assert_fail@plt+0x10334>
   228a8:	cmp	r4, #0
   228ac:	beq	2297c <__assert_fail@plt+0x10388>
   228b0:	ldr	r3, [r5]
   228b4:	ldr	r4, [r4, r3, lsl #2]
   228b8:	cmp	r4, #0
   228bc:	beq	2297c <__assert_fail@plt+0x10388>
   228c0:	add	r3, r3, #1
   228c4:	str	r3, [r5]
   228c8:	mov	r2, r4
   228cc:	ldr	r1, [pc, #300]	; 22a00 <__assert_fail@plt+0x1040c>
   228d0:	mov	r0, r7
   228d4:	bl	1a958 <__assert_fail@plt+0x8364>
   228d8:	mov	r3, #0
   228dc:	ldr	r1, [pc, #288]	; 22a04 <__assert_fail@plt+0x10410>
   228e0:	strb	r3, [r0, #19]
   228e4:	strb	r3, [r0, #18]
   228e8:	mov	r5, r0
   228ec:	str	r4, [r0, #40]	; 0x28
   228f0:	mov	r0, r4
   228f4:	bl	12528 <strpbrk@plt>
   228f8:	vldr	s15, [pc, #244]	; 229f4 <__assert_fail@plt+0x10400>
   228fc:	vldr	s14, [pc, #244]	; 229f8 <__assert_fail@plt+0x10404>
   22900:	ldr	r3, [pc, #256]	; 22a08 <__assert_fail@plt+0x10414>
   22904:	ldrb	r3, [r3, #17]
   22908:	cmp	r0, #0
   2290c:	vmoveq.f32	s15, s14
   22910:	cmp	r3, #0
   22914:	vstr	s15, [r5, #28]
   22918:	beq	22988 <__assert_fail@plt+0x10394>
   2291c:	mov	r0, #1
   22920:	add	sp, sp, #12
   22924:	pop	{r4, r5, r6, r7, pc}
   22928:	ldr	r1, [pc, #220]	; 22a0c <__assert_fail@plt+0x10418>
   2292c:	mov	r2, r3
   22930:	mov	r0, r1
   22934:	bl	12210 <fnmatch@plt>
   22938:	subs	r2, r0, #0
   2293c:	bne	229f0 <__assert_fail@plt+0x103fc>
   22940:	ldr	r1, [pc, #196]	; 22a0c <__assert_fail@plt+0x10418>
   22944:	ldr	r0, [pc, #196]	; 22a10 <__assert_fail@plt+0x1041c>
   22948:	bl	12210 <fnmatch@plt>
   2294c:	cmp	r0, #0
   22950:	beq	229f0 <__assert_fail@plt+0x103fc>
   22954:	mov	r2, #16
   22958:	ldr	r1, [pc, #172]	; 22a0c <__assert_fail@plt+0x10418>
   2295c:	ldr	r0, [pc, #172]	; 22a10 <__assert_fail@plt+0x1041c>
   22960:	bl	12210 <fnmatch@plt>
   22964:	cmp	r0, #0
   22968:	bne	229f0 <__assert_fail@plt+0x103fc>
   2296c:	mov	r3, #1
   22970:	cmp	r4, #0
   22974:	strb	r3, [r6, #4]
   22978:	bne	228b0 <__assert_fail@plt+0x102bc>
   2297c:	mov	r0, r4
   22980:	add	sp, sp, #12
   22984:	pop	{r4, r5, r6, r7, pc}
   22988:	mov	r1, #47	; 0x2f
   2298c:	mov	r0, r4
   22990:	bl	12468 <strrchr@plt>
   22994:	cmp	r0, #0
   22998:	beq	2291c <__assert_fail@plt+0x10328>
   2299c:	ldrb	r3, [r0, #1]
   229a0:	cmp	r3, #0
   229a4:	bne	2291c <__assert_fail@plt+0x10328>
   229a8:	mov	r1, #1
   229ac:	mov	r0, r4
   229b0:	bl	17360 <__assert_fail@plt+0x4d6c>
   229b4:	subs	r6, r0, #0
   229b8:	bne	2291c <__assert_fail@plt+0x10328>
   229bc:	mov	r2, #5
   229c0:	ldr	r1, [pc, #76]	; 22a14 <__assert_fail@plt+0x10420>
   229c4:	bl	120b4 <dcgettext@plt>
   229c8:	ldr	r3, [pc, #72]	; 22a18 <__assert_fail@plt+0x10424>
   229cc:	str	r4, [sp]
   229d0:	mov	r1, r6
   229d4:	mov	r2, r0
   229d8:	mov	r0, r6
   229dc:	bl	121ec <error@plt>
   229e0:	ldr	r3, [pc, #52]	; 22a1c <__assert_fail@plt+0x10428>
   229e4:	mov	r0, #1
   229e8:	str	r3, [r5, #28]
   229ec:	b	22920 <__assert_fail@plt+0x1032c>
   229f0:	bl	126bc <__assert_fail@plt+0xc8>
   229f4:	svccc	0x004ccccd
   229f8:	stclcc	12, cr12, [ip, #820]	; 0x334
   229fc:	ldrdeq	r4, [r6], -r0
   22a00:	andeq	r4, r1, r8, lsl #11
   22a04:	strdeq	r1, [r5], -r8
   22a08:	andeq	r4, r6, ip, ror #28
   22a0c:	andeq	r1, r5, r8, lsr #12
   22a10:	andeq	r1, r5, ip, lsr #12
   22a14:	andeq	r1, r5, r8, lsl #16
   22a18:	andeq	r1, r5, ip, asr r9
   22a1c:	eorcc	ip, fp, #30464	; 0x7700
   22a20:	push	{r4, r5, r6, r7, lr}
   22a24:	mov	r7, r0
   22a28:	ldr	r6, [pc, #380]	; 22bac <__assert_fail@plt+0x105b8>
   22a2c:	sub	sp, sp, #12
   22a30:	mov	r4, r1
   22a34:	ldrb	r3, [r6, #4]
   22a38:	mov	r5, r2
   22a3c:	cmp	r3, #0
   22a40:	beq	22ac4 <__assert_fail@plt+0x104d0>
   22a44:	cmp	r4, #0
   22a48:	beq	22b18 <__assert_fail@plt+0x10524>
   22a4c:	ldr	r3, [r5]
   22a50:	ldr	r4, [r4, r3, lsl #2]
   22a54:	cmp	r4, #0
   22a58:	beq	22b18 <__assert_fail@plt+0x10524>
   22a5c:	add	r3, r3, #1
   22a60:	str	r3, [r5]
   22a64:	mov	r2, r4
   22a68:	ldr	r1, [pc, #320]	; 22bb0 <__assert_fail@plt+0x105bc>
   22a6c:	mov	r0, r7
   22a70:	bl	1a958 <__assert_fail@plt+0x8364>
   22a74:	mov	r3, #0
   22a78:	ldr	r1, [pc, #308]	; 22bb4 <__assert_fail@plt+0x105c0>
   22a7c:	strb	r3, [r0, #19]
   22a80:	strb	r3, [r0, #18]
   22a84:	mov	r5, r0
   22a88:	str	r4, [r0, #40]	; 0x28
   22a8c:	mov	r0, r4
   22a90:	bl	12528 <strpbrk@plt>
   22a94:	vldr	s15, [pc, #264]	; 22ba4 <__assert_fail@plt+0x105b0>
   22a98:	vldr	s14, [pc, #264]	; 22ba8 <__assert_fail@plt+0x105b4>
   22a9c:	ldr	r3, [pc, #276]	; 22bb8 <__assert_fail@plt+0x105c4>
   22aa0:	ldrb	r3, [r3, #17]
   22aa4:	cmp	r0, #0
   22aa8:	vmoveq.f32	s15, s14
   22aac:	cmp	r3, #0
   22ab0:	vstr	s15, [r5, #28]
   22ab4:	beq	22b24 <__assert_fail@plt+0x10530>
   22ab8:	mov	r0, #1
   22abc:	add	sp, sp, #12
   22ac0:	pop	{r4, r5, r6, r7, pc}
   22ac4:	ldr	r1, [pc, #240]	; 22bbc <__assert_fail@plt+0x105c8>
   22ac8:	mov	r2, r3
   22acc:	mov	r0, r1
   22ad0:	bl	12210 <fnmatch@plt>
   22ad4:	subs	r2, r0, #0
   22ad8:	bne	22ba0 <__assert_fail@plt+0x105ac>
   22adc:	ldr	r1, [pc, #216]	; 22bbc <__assert_fail@plt+0x105c8>
   22ae0:	ldr	r0, [pc, #216]	; 22bc0 <__assert_fail@plt+0x105cc>
   22ae4:	bl	12210 <fnmatch@plt>
   22ae8:	cmp	r0, #0
   22aec:	beq	22ba0 <__assert_fail@plt+0x105ac>
   22af0:	mov	r2, #16
   22af4:	ldr	r1, [pc, #192]	; 22bbc <__assert_fail@plt+0x105c8>
   22af8:	ldr	r0, [pc, #192]	; 22bc0 <__assert_fail@plt+0x105cc>
   22afc:	bl	12210 <fnmatch@plt>
   22b00:	cmp	r0, #0
   22b04:	bne	22ba0 <__assert_fail@plt+0x105ac>
   22b08:	mov	r3, #1
   22b0c:	cmp	r4, #0
   22b10:	strb	r3, [r6, #4]
   22b14:	bne	22a4c <__assert_fail@plt+0x10458>
   22b18:	mov	r0, r4
   22b1c:	add	sp, sp, #12
   22b20:	pop	{r4, r5, r6, r7, pc}
   22b24:	mov	r1, #47	; 0x2f
   22b28:	mov	r0, r4
   22b2c:	bl	12468 <strrchr@plt>
   22b30:	cmp	r0, #0
   22b34:	beq	22ab8 <__assert_fail@plt+0x104c4>
   22b38:	ldrb	r3, [r0, #1]
   22b3c:	cmp	r3, #0
   22b40:	bne	22ab8 <__assert_fail@plt+0x104c4>
   22b44:	ldr	r0, [pc, #100]	; 22bb0 <__assert_fail@plt+0x105bc>
   22b48:	ldr	r2, [pc, #116]	; 22bc4 <__assert_fail@plt+0x105d0>
   22b4c:	mov	r1, #1
   22b50:	cmp	r0, r2
   22b54:	movne	r1, r3
   22b58:	and	r1, r1, #1
   22b5c:	mov	r0, r4
   22b60:	bl	17360 <__assert_fail@plt+0x4d6c>
   22b64:	subs	r6, r0, #0
   22b68:	bne	22ab8 <__assert_fail@plt+0x104c4>
   22b6c:	mov	r2, #5
   22b70:	ldr	r1, [pc, #80]	; 22bc8 <__assert_fail@plt+0x105d4>
   22b74:	bl	120b4 <dcgettext@plt>
   22b78:	ldr	r3, [pc, #76]	; 22bcc <__assert_fail@plt+0x105d8>
   22b7c:	str	r4, [sp]
   22b80:	mov	r1, r6
   22b84:	mov	r2, r0
   22b88:	mov	r0, r6
   22b8c:	bl	121ec <error@plt>
   22b90:	ldr	r3, [pc, #56]	; 22bd0 <__assert_fail@plt+0x105dc>
   22b94:	mov	r0, #1
   22b98:	str	r3, [r5, #28]
   22b9c:	b	22abc <__assert_fail@plt+0x104c8>
   22ba0:	bl	126bc <__assert_fail@plt+0xc8>
   22ba4:	svccc	0x004ccccd
   22ba8:	stclcc	12, cr12, [ip, #820]	; 0x334
   22bac:	ldrdeq	r4, [r6], -r0
   22bb0:	andeq	r4, r1, r8, ror #25
   22bb4:	strdeq	r1, [r5], -r8
   22bb8:	andeq	r4, r6, ip, ror #28
   22bbc:	andeq	r1, r5, r8, lsr #12
   22bc0:	andeq	r1, r5, ip, lsr #12
   22bc4:	andeq	r4, r1, r8, lsl #11
   22bc8:	andeq	r1, r5, r8, lsl #16
   22bcc:	andeq	r1, r5, r4, ror #18
   22bd0:	eorcc	ip, fp, #30464	; 0x7700
   22bd4:	cmp	r1, #0
   22bd8:	push	{r4, r5, r6, r7, lr}
   22bdc:	mov	r5, r2
   22be0:	sub	sp, sp, #28
   22be4:	ldr	r3, [r2]
   22be8:	beq	22d0c <__assert_fail@plt+0x10718>
   22bec:	ldr	r4, [r1, r3, lsl #2]
   22bf0:	cmp	r4, #0
   22bf4:	beq	22d0c <__assert_fail@plt+0x10718>
   22bf8:	add	r3, r3, #1
   22bfc:	str	r3, [r2]
   22c00:	ldrb	r3, [r4]
   22c04:	mov	r7, r0
   22c08:	cmp	r3, #43	; 0x2b
   22c0c:	beq	22c94 <__assert_fail@plt+0x106a0>
   22c10:	cmp	r3, #45	; 0x2d
   22c14:	addeq	r0, r4, #1
   22c18:	moveq	r6, #1
   22c1c:	movne	r0, r4
   22c20:	movne	r6, #2
   22c24:	ldr	r3, [pc, #252]	; 22d28 <__assert_fail@plt+0x10734>
   22c28:	mov	r2, #10
   22c2c:	str	r3, [sp]
   22c30:	add	r1, sp, #12
   22c34:	add	r3, sp, #16
   22c38:	bl	36340 <__assert_fail@plt+0x23d4c>
   22c3c:	cmp	r0, #0
   22c40:	bne	22d08 <__assert_fail@plt+0x10714>
   22c44:	mov	r1, r4
   22c48:	mov	r0, r7
   22c4c:	bl	1a98c <__assert_fail@plt+0x8398>
   22c50:	ldr	r1, [pc, #212]	; 22d2c <__assert_fail@plt+0x10738>
   22c54:	ldrd	r2, [sp, #16]
   22c58:	str	r6, [r0, #40]	; 0x28
   22c5c:	ldr	r1, [r1, #44]	; 0x2c
   22c60:	mov	r4, r0
   22c64:	tst	r1, #1
   22c68:	strd	r2, [r0, #48]	; 0x30
   22c6c:	bne	22ca0 <__assert_fail@plt+0x106ac>
   22c70:	vldr	s14, [pc, #168]	; 22d20 <__assert_fail@plt+0x1072c>
   22c74:	vldr	s15, [pc, #168]	; 22d24 <__assert_fail@plt+0x10730>
   22c78:	cmp	r3, #0
   22c7c:	cmpeq	r2, #99	; 0x63
   22c80:	mov	r0, #1
   22c84:	vmovls.f32	s15, s14
   22c88:	vstr	s15, [r4, #28]
   22c8c:	add	sp, sp, #28
   22c90:	pop	{r4, r5, r6, r7, pc}
   22c94:	add	r0, r4, #1
   22c98:	mov	r6, #0
   22c9c:	b	22c24 <__assert_fail@plt+0x10630>
   22ca0:	ldr	r5, [pc, #136]	; 22d30 <__assert_fail@plt+0x1073c>
   22ca4:	ldr	r2, [r0, #4]
   22ca8:	ldr	r1, [pc, #132]	; 22d34 <__assert_fail@plt+0x10740>
   22cac:	ldr	r0, [r5]
   22cb0:	bl	1233c <fprintf@plt>
   22cb4:	cmp	r6, #0
   22cb8:	ldr	r0, [r5]
   22cbc:	bne	22ce8 <__assert_fail@plt+0x106f4>
   22cc0:	ldr	r2, [pc, #112]	; 22d38 <__assert_fail@plt+0x10744>
   22cc4:	ldr	r3, [pc, #112]	; 22d3c <__assert_fail@plt+0x10748>
   22cc8:	ldr	r1, [pc, #112]	; 22d40 <__assert_fail@plt+0x1074c>
   22ccc:	bl	1233c <fprintf@plt>
   22cd0:	ldrd	r2, [r4, #48]	; 0x30
   22cd4:	ldr	r0, [r5]
   22cd8:	ldr	r1, [pc, #100]	; 22d44 <__assert_fail@plt+0x10750>
   22cdc:	bl	1233c <fprintf@plt>
   22ce0:	ldrd	r2, [r4, #48]	; 0x30
   22ce4:	b	22c70 <__assert_fail@plt+0x1067c>
   22ce8:	ldr	ip, [pc, #88]	; 22d48 <__assert_fail@plt+0x10754>
   22cec:	ldr	r1, [pc, #88]	; 22d4c <__assert_fail@plt+0x10758>
   22cf0:	cmp	r6, #1
   22cf4:	ldr	r2, [pc, #84]	; 22d50 <__assert_fail@plt+0x1075c>
   22cf8:	ldr	r3, [pc, #84]	; 22d54 <__assert_fail@plt+0x10760>
   22cfc:	movne	r2, ip
   22d00:	movne	r3, r1
   22d04:	b	22cc8 <__assert_fail@plt+0x106d4>
   22d08:	ldr	r3, [r5]
   22d0c:	sub	r3, r3, #1
   22d10:	mov	r0, #0
   22d14:	str	r3, [r5]
   22d18:	add	sp, sp, #28
   22d1c:	pop	{r4, r5, r6, r7, pc}
   22d20:	svccc	0x007d70a4
   22d24:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   22d28:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   22d2c:	andeq	r4, r6, ip, ror #28
   22d30:	andeq	r4, r6, r8, asr #10
   22d34:	andeq	r1, r5, ip, asr r7
   22d38:	andeq	r1, r5, r0, ror r7
   22d3c:	andeq	r1, r5, ip, ror #14
   22d40:	andeq	r1, r5, r4, ror r7
   22d44:	andeq	r1, r5, ip, ror #15
   22d48:	muleq	r5, r0, r7
   22d4c:	andeq	r1, r5, r8, ror #15
   22d50:			; <UNDEFINED> instruction: 0x000517b4
   22d54:			; <UNDEFINED> instruction: 0x000517b0
   22d58:	cmp	r1, #0
   22d5c:	push	{r4, r5, r6, r7, lr}
   22d60:	mov	r5, r2
   22d64:	sub	sp, sp, #28
   22d68:	ldr	r3, [r2]
   22d6c:	beq	22e6c <__assert_fail@plt+0x10878>
   22d70:	ldr	r4, [r1, r3, lsl #2]
   22d74:	cmp	r4, #0
   22d78:	beq	22e6c <__assert_fail@plt+0x10878>
   22d7c:	add	r3, r3, #1
   22d80:	str	r3, [r2]
   22d84:	ldrb	r3, [r4]
   22d88:	mov	r7, r0
   22d8c:	cmp	r3, #43	; 0x2b
   22d90:	beq	22e18 <__assert_fail@plt+0x10824>
   22d94:	cmp	r3, #45	; 0x2d
   22d98:	addeq	r0, r4, #1
   22d9c:	moveq	r6, #1
   22da0:	movne	r0, r4
   22da4:	movne	r6, #2
   22da8:	ldr	r3, [pc, #240]	; 22ea0 <__assert_fail@plt+0x108ac>
   22dac:	mov	r2, #10
   22db0:	str	r3, [sp]
   22db4:	add	r1, sp, #12
   22db8:	add	r3, sp, #16
   22dbc:	bl	36340 <__assert_fail@plt+0x23d4c>
   22dc0:	cmp	r0, #0
   22dc4:	bne	22e68 <__assert_fail@plt+0x10874>
   22dc8:	mov	r1, r4
   22dcc:	mov	r0, r7
   22dd0:	bl	1a98c <__assert_fail@plt+0x8398>
   22dd4:	ldr	r1, [pc, #200]	; 22ea4 <__assert_fail@plt+0x108b0>
   22dd8:	ldrd	r2, [sp, #16]
   22ddc:	str	r6, [r0, #40]	; 0x28
   22de0:	ldr	r1, [r1, #44]	; 0x2c
   22de4:	mov	r4, r0
   22de8:	tst	r1, #1
   22dec:	strd	r2, [r0, #48]	; 0x30
   22df0:	bne	22e24 <__assert_fail@plt+0x10830>
   22df4:	ldr	r2, [pc, #172]	; 22ea8 <__assert_fail@plt+0x108b4>
   22df8:	mov	r0, #1
   22dfc:	mov	r3, #0
   22e00:	strb	r0, [r4, #20]
   22e04:	str	r2, [r4, #28]
   22e08:	strb	r3, [r4, #18]
   22e0c:	strb	r3, [r4, #19]
   22e10:	add	sp, sp, #28
   22e14:	pop	{r4, r5, r6, r7, pc}
   22e18:	add	r0, r4, #1
   22e1c:	mov	r6, #0
   22e20:	b	22da8 <__assert_fail@plt+0x107b4>
   22e24:	ldr	r5, [pc, #128]	; 22eac <__assert_fail@plt+0x108b8>
   22e28:	ldr	r2, [r0, #4]
   22e2c:	ldr	r1, [pc, #124]	; 22eb0 <__assert_fail@plt+0x108bc>
   22e30:	ldr	r0, [r5]
   22e34:	bl	1233c <fprintf@plt>
   22e38:	cmp	r6, #0
   22e3c:	ldr	r0, [r5]
   22e40:	bne	22e80 <__assert_fail@plt+0x1088c>
   22e44:	ldr	r2, [pc, #104]	; 22eb4 <__assert_fail@plt+0x108c0>
   22e48:	ldr	r3, [pc, #104]	; 22eb8 <__assert_fail@plt+0x108c4>
   22e4c:	ldr	r1, [pc, #104]	; 22ebc <__assert_fail@plt+0x108c8>
   22e50:	bl	1233c <fprintf@plt>
   22e54:	ldr	r0, [r5]
   22e58:	ldrd	r2, [r4, #48]	; 0x30
   22e5c:	ldr	r1, [pc, #92]	; 22ec0 <__assert_fail@plt+0x108cc>
   22e60:	bl	1233c <fprintf@plt>
   22e64:	b	22df4 <__assert_fail@plt+0x10800>
   22e68:	ldr	r3, [r5]
   22e6c:	sub	r3, r3, #1
   22e70:	mov	r0, #0
   22e74:	str	r3, [r5]
   22e78:	add	sp, sp, #28
   22e7c:	pop	{r4, r5, r6, r7, pc}
   22e80:	ldr	ip, [pc, #60]	; 22ec4 <__assert_fail@plt+0x108d0>
   22e84:	ldr	r1, [pc, #60]	; 22ec8 <__assert_fail@plt+0x108d4>
   22e88:	cmp	r6, #1
   22e8c:	ldr	r2, [pc, #56]	; 22ecc <__assert_fail@plt+0x108d8>
   22e90:	ldr	r3, [pc, #56]	; 22ed0 <__assert_fail@plt+0x108dc>
   22e94:	movne	r2, ip
   22e98:	movne	r3, r1
   22e9c:	b	22e4c <__assert_fail@plt+0x10858>
   22ea0:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   22ea4:	andeq	r4, r6, ip, ror #28
   22ea8:	strcc	r3, [r6, #1981]	; 0x7bd
   22eac:	andeq	r4, r6, r8, asr #10
   22eb0:	andeq	r1, r5, ip, asr r7
   22eb4:	andeq	r1, r5, r0, ror r7
   22eb8:	andeq	r1, r5, ip, ror #14
   22ebc:	andeq	r1, r5, r4, ror r7
   22ec0:	andeq	r1, r5, ip, ror #15
   22ec4:	muleq	r5, r0, r7
   22ec8:	andeq	r1, r5, r8, ror #15
   22ecc:			; <UNDEFINED> instruction: 0x000517b4
   22ed0:			; <UNDEFINED> instruction: 0x000517b0
   22ed4:	push	{r4, r5, r6, r7, r8, r9, lr}
   22ed8:	subs	r6, r1, #0
   22edc:	sub	sp, sp, #20
   22ee0:	beq	23054 <__assert_fail@plt+0x10a60>
   22ee4:	ldr	r3, [r2]
   22ee8:	ldr	r4, [r6, r3, lsl #2]
   22eec:	cmp	r4, #0
   22ef0:	beq	23074 <__assert_fail@plt+0x10a80>
   22ef4:	add	r3, r3, #1
   22ef8:	str	r3, [r2]
   22efc:	ldrb	r3, [r4]
   22f00:	cmp	r3, #43	; 0x2b
   22f04:	beq	23060 <__assert_fail@plt+0x10a6c>
   22f08:	cmp	r3, #45	; 0x2d
   22f0c:	addeq	r7, r4, #1
   22f10:	moveq	r8, #0
   22f14:	movne	r7, r4
   22f18:	movne	r8, #2
   22f1c:	mov	r9, r0
   22f20:	ldr	r3, [pc, #448]	; 230e8 <__assert_fail@plt+0x10af4>
   22f24:	mov	r2, sp
   22f28:	mov	r1, #0
   22f2c:	mov	r0, r7
   22f30:	bl	35cc4 <__assert_fail@plt+0x236d0>
   22f34:	subs	r6, r0, #0
   22f38:	bne	22f5c <__assert_fail@plt+0x10968>
   22f3c:	mov	r2, #5
   22f40:	ldr	r1, [pc, #420]	; 230ec <__assert_fail@plt+0x10af8>
   22f44:	bl	120b4 <dcgettext@plt>
   22f48:	mov	r3, r4
   22f4c:	mov	r1, r6
   22f50:	mov	r2, r0
   22f54:	mov	r0, #1
   22f58:	bl	121ec <error@plt>
   22f5c:	vldr	d7, [pc, #340]	; 230b8 <__assert_fail@plt+0x10ac4>
   22f60:	vldr	d0, [sp]
   22f64:	add	r0, sp, #8
   22f68:	vmul.f64	d0, d0, d7
   22f6c:	bl	12294 <modf@plt>
   22f70:	vldr	d7, [pc, #328]	; 230c0 <__assert_fail@plt+0x10acc>
   22f74:	vmul.f64	d0, d0, d7
   22f78:	vcmpe.f64	d0, d7
   22f7c:	vmrs	APSR_nzcv, fpscr
   22f80:	bpl	230a0 <__assert_fail@plt+0x10aac>
   22f84:	vldr	d6, [sp, #8]
   22f88:	vldr	d7, [pc, #312]	; 230c8 <__assert_fail@plt+0x10ad4>
   22f8c:	vsub.f64	d5, d7, d6
   22f90:	vcmpe.f64	d6, d7
   22f94:	vmrs	APSR_nzcv, fpscr
   22f98:	vcvt.s32.f64	s13, d5
   22f9c:	movmi	r3, #1
   22fa0:	movpl	r3, #0
   22fa4:	vmov	r5, s13
   22fa8:	cmp	r5, #0
   22fac:	movle	r2, #0
   22fb0:	movgt	r2, #1
   22fb4:	cmp	r2, r3
   22fb8:	bne	2308c <__assert_fail@plt+0x10a98>
   22fbc:	vcmpe.f64	d0, d7
   22fc0:	vsub.f64	d7, d7, d0
   22fc4:	vmrs	APSR_nzcv, fpscr
   22fc8:	vcvt.s32.f64	s15, d7
   22fcc:	vmov	r7, s15
   22fd0:	addgt	r7, r7, #998244352	; 0x3b800000
   22fd4:	addgt	r7, r7, #1753088	; 0x1ac000
   22fd8:	addgt	r7, r7, #2560	; 0xa00
   22fdc:	subgt	r5, r5, #1
   22fe0:	mov	r1, r4
   22fe4:	mov	r0, r9
   22fe8:	bl	1a98c <__assert_fail@plt+0x8398>
   22fec:	ldr	r2, [pc, #252]	; 230f0 <__assert_fail@plt+0x10afc>
   22ff0:	asr	r3, r5, #31
   22ff4:	vldr	s14, [pc, #212]	; 230d0 <__assert_fail@plt+0x10adc>
   22ff8:	smull	r1, r2, r2, r5
   22ffc:	add	r2, r2, r5
   23000:	rsb	r3, r3, r2, asr #16
   23004:	vmov	s15, r3
   23008:	vcvt.f32.s32	s15, s15
   2300c:	vcmpe.f32	s15, s14
   23010:	vmrs	APSR_nzcv, fpscr
   23014:	str	r8, [r0, #44]	; 0x2c
   23018:	str	r5, [r0, #48]	; 0x30
   2301c:	str	r7, [r0, #52]	; 0x34
   23020:	bmi	2306c <__assert_fail@plt+0x10a78>
   23024:	vldr	s14, [pc, #168]	; 230d4 <__assert_fail@plt+0x10ae0>
   23028:	vcmpe.f32	s15, s14
   2302c:	vmrs	APSR_nzcv, fpscr
   23030:	bmi	23084 <__assert_fail@plt+0x10a90>
   23034:	vldr	s12, [pc, #156]	; 230d8 <__assert_fail@plt+0x10ae4>
   23038:	vldr	s14, [pc, #156]	; 230dc <__assert_fail@plt+0x10ae8>
   2303c:	vldr	s13, [pc, #156]	; 230e0 <__assert_fail@plt+0x10aec>
   23040:	vcmpe.f32	s15, s12
   23044:	vmrs	APSR_nzcv, fpscr
   23048:	vmovle.f32	s15, s13
   2304c:	vmovgt.f32	s15, s14
   23050:	vstr	s15, [r0, #28]
   23054:	mov	r0, r6
   23058:	add	sp, sp, #20
   2305c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23060:	add	r7, r4, #1
   23064:	mov	r8, #1
   23068:	b	22f1c <__assert_fail@plt+0x10928>
   2306c:	vldr	s15, [pc, #112]	; 230e4 <__assert_fail@plt+0x10af0>
   23070:	b	23050 <__assert_fail@plt+0x10a5c>
   23074:	mov	r6, r4
   23078:	mov	r0, r6
   2307c:	add	sp, sp, #20
   23080:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23084:	vldr	s15, [pc, #80]	; 230dc <__assert_fail@plt+0x10ae8>
   23088:	b	23050 <__assert_fail@plt+0x10a5c>
   2308c:	mov	r3, r7
   23090:	ldr	r2, [pc, #92]	; 230f4 <__assert_fail@plt+0x10b00>
   23094:	mov	r1, #0
   23098:	mov	r0, #1
   2309c:	bl	121ec <error@plt>
   230a0:	ldr	r3, [pc, #80]	; 230f8 <__assert_fail@plt+0x10b04>
   230a4:	ldr	r2, [pc, #80]	; 230fc <__assert_fail@plt+0x10b08>
   230a8:	ldr	r1, [pc, #80]	; 23100 <__assert_fail@plt+0x10b0c>
   230ac:	ldr	r0, [pc, #80]	; 23104 <__assert_fail@plt+0x10b10>
   230b0:	bl	125f4 <__assert_fail@plt>
   230b4:	nop			; (mov r0, r0)
   230b8:	andeq	r0, r0, r0
   230bc:	rscsmi	r1, r5, r0, lsl #16
   230c0:	andeq	r0, r0, r0
   230c4:	bicmi	ip, sp, r5, ror #26
	...
   230d0:	stclcc	12, cr12, [ip, #820]	; 0x334
   230d4:	svccc	0x00800000
   230d8:	sbcmi	r0, r8, #0
   230dc:			; <UNDEFINED> instruction: 0x3e99999a
   230e0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   230e4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   230e8:			; <UNDEFINED> instruction: 0x000123b4
   230ec:	andeq	r1, r5, ip, ror #18
   230f0:	eorgt	r4, lr, #29360128	; 0x1c00000
   230f4:	strdeq	r1, [r5], -ip
   230f8:	andeq	r0, r5, r0, ror #23
   230fc:	andeq	r0, r0, sp, asr #24
   23100:	andeq	r1, r5, r0, lsr #3
   23104:	andeq	r1, r5, r0, asr #14
   23108:	cmp	r1, #0
   2310c:	push	{r4, r5, r6, r7, lr}
   23110:	mov	r5, r2
   23114:	sub	sp, sp, #28
   23118:	ldr	r3, [r2]
   2311c:	beq	23240 <__assert_fail@plt+0x10c4c>
   23120:	ldr	r4, [r1, r3, lsl #2]
   23124:	cmp	r4, #0
   23128:	beq	23240 <__assert_fail@plt+0x10c4c>
   2312c:	add	r3, r3, #1
   23130:	str	r3, [r2]
   23134:	ldrb	r3, [r4]
   23138:	mov	r7, r0
   2313c:	cmp	r3, #43	; 0x2b
   23140:	beq	231c8 <__assert_fail@plt+0x10bd4>
   23144:	cmp	r3, #45	; 0x2d
   23148:	addeq	r0, r4, #1
   2314c:	moveq	r6, #1
   23150:	movne	r0, r4
   23154:	movne	r6, #2
   23158:	ldr	r3, [pc, #252]	; 2325c <__assert_fail@plt+0x10c68>
   2315c:	mov	r2, #10
   23160:	str	r3, [sp]
   23164:	add	r1, sp, #12
   23168:	add	r3, sp, #16
   2316c:	bl	36340 <__assert_fail@plt+0x23d4c>
   23170:	cmp	r0, #0
   23174:	bne	2323c <__assert_fail@plt+0x10c48>
   23178:	mov	r1, r4
   2317c:	mov	r0, r7
   23180:	bl	1a98c <__assert_fail@plt+0x8398>
   23184:	ldr	r1, [pc, #212]	; 23260 <__assert_fail@plt+0x10c6c>
   23188:	ldrd	r2, [sp, #16]
   2318c:	str	r6, [r0, #40]	; 0x28
   23190:	ldr	r1, [r1, #44]	; 0x2c
   23194:	mov	r4, r0
   23198:	tst	r1, #1
   2319c:	strd	r2, [r0, #48]	; 0x30
   231a0:	bne	231d4 <__assert_fail@plt+0x10be0>
   231a4:	vldr	s14, [pc, #168]	; 23254 <__assert_fail@plt+0x10c60>
   231a8:	vldr	s15, [pc, #168]	; 23258 <__assert_fail@plt+0x10c64>
   231ac:	cmp	r3, #0
   231b0:	cmpeq	r2, #99	; 0x63
   231b4:	mov	r0, #1
   231b8:	vmovls.f32	s15, s14
   231bc:	vstr	s15, [r4, #28]
   231c0:	add	sp, sp, #28
   231c4:	pop	{r4, r5, r6, r7, pc}
   231c8:	add	r0, r4, #1
   231cc:	mov	r6, #0
   231d0:	b	23158 <__assert_fail@plt+0x10b64>
   231d4:	ldr	r5, [pc, #136]	; 23264 <__assert_fail@plt+0x10c70>
   231d8:	ldr	r2, [r0, #4]
   231dc:	ldr	r1, [pc, #132]	; 23268 <__assert_fail@plt+0x10c74>
   231e0:	ldr	r0, [r5]
   231e4:	bl	1233c <fprintf@plt>
   231e8:	cmp	r6, #0
   231ec:	ldr	r0, [r5]
   231f0:	bne	2321c <__assert_fail@plt+0x10c28>
   231f4:	ldr	r2, [pc, #112]	; 2326c <__assert_fail@plt+0x10c78>
   231f8:	ldr	r3, [pc, #112]	; 23270 <__assert_fail@plt+0x10c7c>
   231fc:	ldr	r1, [pc, #112]	; 23274 <__assert_fail@plt+0x10c80>
   23200:	bl	1233c <fprintf@plt>
   23204:	ldrd	r2, [r4, #48]	; 0x30
   23208:	ldr	r0, [r5]
   2320c:	ldr	r1, [pc, #100]	; 23278 <__assert_fail@plt+0x10c84>
   23210:	bl	1233c <fprintf@plt>
   23214:	ldrd	r2, [r4, #48]	; 0x30
   23218:	b	231a4 <__assert_fail@plt+0x10bb0>
   2321c:	ldr	ip, [pc, #88]	; 2327c <__assert_fail@plt+0x10c88>
   23220:	ldr	r1, [pc, #88]	; 23280 <__assert_fail@plt+0x10c8c>
   23224:	cmp	r6, #1
   23228:	ldr	r2, [pc, #84]	; 23284 <__assert_fail@plt+0x10c90>
   2322c:	ldr	r3, [pc, #84]	; 23288 <__assert_fail@plt+0x10c94>
   23230:	movne	r2, ip
   23234:	movne	r3, r1
   23238:	b	231fc <__assert_fail@plt+0x10c08>
   2323c:	ldr	r3, [r5]
   23240:	sub	r3, r3, #1
   23244:	mov	r0, #0
   23248:	str	r3, [r5]
   2324c:	add	sp, sp, #28
   23250:	pop	{r4, r5, r6, r7, pc}
   23254:	svccc	0x007d70a4
   23258:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   2325c:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   23260:	andeq	r4, r6, ip, ror #28
   23264:	andeq	r4, r6, r8, asr #10
   23268:	andeq	r1, r5, ip, asr r7
   2326c:	andeq	r1, r5, r0, ror r7
   23270:	andeq	r1, r5, ip, ror #14
   23274:	andeq	r1, r5, r4, ror r7
   23278:	andeq	r1, r5, ip, ror #15
   2327c:	muleq	r5, r0, r7
   23280:	andeq	r1, r5, r8, ror #15
   23284:			; <UNDEFINED> instruction: 0x000517b4
   23288:			; <UNDEFINED> instruction: 0x000517b0
   2328c:	push	{r4, r5, r6, r7, lr}
   23290:	subs	r4, r1, #0
   23294:	sub	sp, sp, #20
   23298:	beq	2342c <__assert_fail@plt+0x10e38>
   2329c:	ldr	r3, [r2]
   232a0:	ldr	r4, [r4, r3, lsl #2]
   232a4:	cmp	r4, #0
   232a8:	beq	2342c <__assert_fail@plt+0x10e38>
   232ac:	add	r3, r3, #1
   232b0:	str	r3, [r2]
   232b4:	ldrb	r5, [r4]
   232b8:	cmp	r5, #0
   232bc:	beq	23544 <__assert_fail@plt+0x10f50>
   232c0:	mov	r2, r4
   232c4:	ldr	r1, [pc, #696]	; 23584 <__assert_fail@plt+0x10f90>
   232c8:	bl	1a958 <__assert_fail@plt+0x8364>
   232cc:	mov	r3, #0
   232d0:	mov	r2, #0
   232d4:	mov	r1, #1
   232d8:	mov	r5, r4
   232dc:	strb	r2, [r0, #19]
   232e0:	str	r3, [r0, #28]
   232e4:	strb	r1, [r0, #18]
   232e8:	ldrb	r3, [r4]
   232ec:	cmp	r3, r2
   232f0:	beq	234fc <__assert_fail@plt+0x10f08>
   232f4:	vldr	s7, [pc, #620]	; 23568 <__assert_fail@plt+0x10f74>
   232f8:	vldr	s8, [pc, #620]	; 2356c <__assert_fail@plt+0x10f78>
   232fc:	vldr	s9, [pc, #620]	; 23570 <__assert_fail@plt+0x10f7c>
   23300:	vldr	s10, [pc, #620]	; 23574 <__assert_fail@plt+0x10f80>
   23304:	vldr	s11, [pc, #620]	; 23578 <__assert_fail@plt+0x10f84>
   23308:	vldr	s12, [pc, #620]	; 2357c <__assert_fail@plt+0x10f88>
   2330c:	vldr	s13, [pc, #620]	; 23580 <__assert_fail@plt+0x10f8c>
   23310:	mov	r7, #2
   23314:	mov	lr, #3
   23318:	mov	ip, #4
   2331c:	mov	r1, #5
   23320:	mov	r2, #6
   23324:	sub	r3, r3, #68	; 0x44
   23328:	cmp	r3, #47	; 0x2f
   2332c:	ldrls	pc, [pc, r3, lsl #2]
   23330:	b	234ac <__assert_fail@plt+0x10eb8>
   23334:	andeq	r3, r2, r4, asr #8
   23338:	andeq	r3, r2, ip, lsr #9
   2333c:	andeq	r3, r2, ip, lsr #9
   23340:	andeq	r3, r2, ip, lsr #9
   23344:	andeq	r3, r2, ip, lsr #9
   23348:	andeq	r3, r2, ip, lsr #9
   2334c:	andeq	r3, r2, ip, lsr #9
   23350:	andeq	r3, r2, ip, lsr #9
   23354:	andeq	r3, r2, ip, lsr #9
   23358:	andeq	r3, r2, ip, lsr #9
   2335c:	andeq	r3, r2, ip, lsr #9
   23360:	andeq	r3, r2, ip, lsr #9
   23364:	andeq	r3, r2, ip, lsr #9
   23368:	andeq	r3, r2, ip, lsr #9
   2336c:	andeq	r3, r2, ip, lsr #9
   23370:	andeq	r3, r2, ip, lsr #9
   23374:	andeq	r3, r2, ip, lsr #9
   23378:	andeq	r3, r2, ip, lsr #9
   2337c:	andeq	r3, r2, ip, lsr #9
   23380:	andeq	r3, r2, ip, lsr #9
   23384:	andeq	r3, r2, ip, lsr #9
   23388:	andeq	r3, r2, ip, lsr #9
   2338c:	andeq	r3, r2, ip, lsr #9
   23390:	andeq	r3, r2, ip, lsr #9
   23394:	andeq	r3, r2, ip, lsr #9
   23398:	andeq	r3, r2, ip, lsr #9
   2339c:	andeq	r3, r2, ip, lsr #9
   233a0:	andeq	r3, r2, ip, lsr #9
   233a4:	andeq	r3, r2, ip, lsr #9
   233a8:	andeq	r3, r2, ip, lsr #9
   233ac:	andeq	r3, r2, r8, lsr r4
   233b0:	strdeq	r3, [r2], -r4
   233b4:	andeq	r3, r2, r0, lsr #9
   233b8:	andeq	r3, r2, ip, lsr #9
   233bc:	muleq	r2, r4, r4
   233c0:	andeq	r3, r2, ip, lsr #9
   233c4:	andeq	r3, r2, ip, lsr #9
   233c8:	andeq	r3, r2, ip, lsr #9
   233cc:	andeq	r3, r2, ip, lsr #9
   233d0:	andeq	r3, r2, ip, lsr #9
   233d4:	andeq	r3, r2, r8, lsl #9
   233d8:	andeq	r3, r2, ip, lsr #9
   233dc:	andeq	r3, r2, ip, lsr #9
   233e0:	andeq	r3, r2, ip, lsr #9
   233e4:	andeq	r3, r2, ip, ror r4
   233e8:	andeq	r3, r2, ip, lsr #9
   233ec:	andeq	r3, r2, ip, lsr #9
   233f0:	andeq	r3, r2, r0, ror r4
   233f4:	vmov.f32	s14, s13
   233f8:	mov	r3, #1
   233fc:	add	r3, r0, r3
   23400:	ldrb	r6, [r3, #40]	; 0x28
   23404:	cmp	r6, #0
   23408:	bne	23504 <__assert_fail@plt+0x10f10>
   2340c:	vldr	s15, [r0, #28]
   23410:	mov	r4, #1
   23414:	vadd.f32	s15, s15, s14
   23418:	vstr	s15, [r0, #28]
   2341c:	strb	r4, [r3, #40]	; 0x28
   23420:	ldrb	r3, [r5, #1]
   23424:	cmp	r3, #0
   23428:	bne	234b8 <__assert_fail@plt+0x10ec4>
   2342c:	mov	r0, r4
   23430:	add	sp, sp, #20
   23434:	pop	{r4, r5, r6, r7, pc}
   23438:	vmov.f32	s14, s12
   2343c:	mov	r3, #0
   23440:	b	233fc <__assert_fail@plt+0x10e08>
   23444:	ldr	r1, [pc, #316]	; 23588 <__assert_fail@plt+0x10f94>
   23448:	mov	r2, #5
   2344c:	mov	r0, #0
   23450:	bl	120b4 <dcgettext@plt>
   23454:	ldrb	r2, [r5]
   23458:	ldr	r3, [pc, #300]	; 2358c <__assert_fail@plt+0x10f98>
   2345c:	str	r2, [sp]
   23460:	mov	r1, #0
   23464:	mov	r2, r0
   23468:	mov	r0, #1
   2346c:	bl	121ec <error@plt>
   23470:	vmov.f32	s14, s11
   23474:	mov	r3, r2
   23478:	b	233fc <__assert_fail@plt+0x10e08>
   2347c:	vmov.f32	s14, s10
   23480:	mov	r3, r1
   23484:	b	233fc <__assert_fail@plt+0x10e08>
   23488:	vmov.f32	s14, s9
   2348c:	mov	r3, ip
   23490:	b	233fc <__assert_fail@plt+0x10e08>
   23494:	vmov.f32	s14, s8
   23498:	mov	r3, lr
   2349c:	b	233fc <__assert_fail@plt+0x10e08>
   234a0:	vmov.f32	s14, s7
   234a4:	mov	r3, r7
   234a8:	b	233fc <__assert_fail@plt+0x10e08>
   234ac:	mov	r2, #5
   234b0:	ldr	r1, [pc, #216]	; 23590 <__assert_fail@plt+0x10f9c>
   234b4:	b	2344c <__assert_fail@plt+0x10e58>
   234b8:	cmp	r3, #44	; 0x2c
   234bc:	bne	23520 <__assert_fail@plt+0x10f2c>
   234c0:	ldrb	r3, [r5, #2]
   234c4:	add	r5, r5, #2
   234c8:	cmp	r3, #0
   234cc:	bne	23324 <__assert_fail@plt+0x10d30>
   234d0:	mov	r2, #5
   234d4:	ldr	r1, [pc, #184]	; 23594 <__assert_fail@plt+0x10fa0>
   234d8:	mov	r0, r3
   234dc:	str	r3, [sp, #12]
   234e0:	bl	120b4 <dcgettext@plt>
   234e4:	ldr	r3, [sp, #12]
   234e8:	mov	r1, r3
   234ec:	ldr	r3, [pc, #152]	; 2358c <__assert_fail@plt+0x10f98>
   234f0:	mov	r2, r0
   234f4:	mov	r0, r4
   234f8:	bl	121ec <error@plt>
   234fc:	mov	r4, r1
   23500:	b	2342c <__assert_fail@plt+0x10e38>
   23504:	mov	r2, #5
   23508:	ldr	r1, [pc, #136]	; 23598 <__assert_fail@plt+0x10fa4>
   2350c:	mov	r0, #0
   23510:	bl	120b4 <dcgettext@plt>
   23514:	ldrb	r3, [r5]
   23518:	ldr	r2, [pc, #108]	; 2358c <__assert_fail@plt+0x10f98>
   2351c:	b	2345c <__assert_fail@plt+0x10e68>
   23520:	mov	r2, #5
   23524:	ldr	r1, [pc, #112]	; 2359c <__assert_fail@plt+0x10fa8>
   23528:	mov	r0, r6
   2352c:	bl	120b4 <dcgettext@plt>
   23530:	mov	r1, r6
   23534:	ldr	r3, [pc, #80]	; 2358c <__assert_fail@plt+0x10f98>
   23538:	mov	r2, r0
   2353c:	mov	r0, r4
   23540:	bl	121ec <error@plt>
   23544:	mov	r2, #5
   23548:	ldr	r1, [pc, #80]	; 235a0 <__assert_fail@plt+0x10fac>
   2354c:	mov	r0, r5
   23550:	bl	120b4 <dcgettext@plt>
   23554:	mov	r1, r5
   23558:	ldr	r3, [pc, #44]	; 2358c <__assert_fail@plt+0x10f98>
   2355c:	mov	r2, r0
   23560:	mov	r0, #1
   23564:	bl	121ec <error@plt>
   23568:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   2356c:	svccc	0x00600000
   23570:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   23574:	usatcc	r7, #29, lr, asr #16
   23578:			; <UNDEFINED> instruction: 0x378560fd
   2357c:	bcc	1a55834 <stdout@@GLIBC_2.4+0x19f12e0>
   23580:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   23584:	strdeq	r5, [r1], -r4
   23588:	ldrdeq	r0, [r5], -r0	; <UNPREDICTABLE>
   2358c:	andeq	r0, r5, ip, lsl #25
   23590:	andeq	r0, r5, r8, lsr sp
   23594:	andeq	r0, r5, r0, asr #27
   23598:	andeq	r0, r5, r4, asr sp
   2359c:	andeq	r0, r5, ip, lsl #27
   235a0:	muleq	r5, ip, ip
   235a4:	push	{r4, r5, r6, lr}
   235a8:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   235ac:	ldr	r3, [pc, #96]	; 23614 <__assert_fail@plt+0x11020>
   235b0:	mov	r5, #0
   235b4:	mov	r4, r0
   235b8:	str	r3, [r0, #16]
   235bc:	str	r5, [r0, #40]	; 0x28
   235c0:	mov	r0, r5
   235c4:	bl	31bcc <__assert_fail@plt+0x1f5d8>
   235c8:	ldr	r3, [pc, #72]	; 23618 <__assert_fail@plt+0x11024>
   235cc:	mov	r2, #5
   235d0:	ldr	r1, [pc, #68]	; 2361c <__assert_fail@plt+0x11028>
   235d4:	ldr	r3, [r3]
   235d8:	str	r3, [r4, #44]	; 0x2c
   235dc:	str	r0, [r4, #56]	; 0x38
   235e0:	mov	r0, r5
   235e4:	bl	120b4 <dcgettext@plt>
   235e8:	str	r0, [r4, #48]	; 0x30
   235ec:	ldr	r0, [r4, #44]	; 0x2c
   235f0:	bl	123c0 <fileno@plt>
   235f4:	cmn	r0, #1
   235f8:	beq	23608 <__assert_fail@plt+0x11014>
   235fc:	bl	12564 <isatty@plt>
   23600:	subs	r5, r0, r5
   23604:	movne	r5, #1
   23608:	strb	r5, [r4, #52]	; 0x34
   2360c:	mov	r0, #1
   23610:	pop	{r4, r5, r6, pc}
   23614:	andeq	r0, r0, r1, lsl #2
   23618:	andeq	r4, r6, r4, asr r5
   2361c:	andeq	pc, r4, r4, asr ip	; <UNPREDICTABLE>
   23620:	cmp	r1, #0
   23624:	push	{r4, r5, r6, r7, r8, lr}
   23628:	moveq	r0, r1
   2362c:	sub	sp, sp, #24
   23630:	ldr	r7, [r2]
   23634:	beq	236c4 <__assert_fail@plt+0x110d0>
   23638:	ldr	r4, [r1, r7, lsl #2]
   2363c:	cmp	r4, #0
   23640:	moveq	r0, r4
   23644:	beq	236c4 <__assert_fail@plt+0x110d0>
   23648:	add	r3, r7, #1
   2364c:	mov	r5, #0
   23650:	str	r3, [r2]
   23654:	mov	r8, r0
   23658:	mov	r0, r5
   2365c:	mov	r6, r2
   23660:	str	r5, [sp, #4]
   23664:	bl	31bcc <__assert_fail@plt+0x1f5d8>
   23668:	ldr	r3, [pc, #92]	; 236cc <__assert_fail@plt+0x110d8>
   2366c:	mov	r2, #5
   23670:	ldr	r1, [pc, #88]	; 236d0 <__assert_fail@plt+0x110dc>
   23674:	ldr	r3, [r3]
   23678:	str	r3, [sp, #8]
   2367c:	str	r0, [sp, #20]
   23680:	mov	r0, r5
   23684:	bl	120b4 <dcgettext@plt>
   23688:	str	r0, [sp, #12]
   2368c:	ldr	r0, [sp, #8]
   23690:	bl	123c0 <fileno@plt>
   23694:	cmn	r0, #1
   23698:	beq	236a8 <__assert_fail@plt+0x110b4>
   2369c:	bl	12564 <isatty@plt>
   236a0:	subs	r5, r0, r5
   236a4:	movne	r5, #1
   236a8:	mov	r2, r4
   236ac:	mov	r1, r8
   236b0:	add	r0, sp, #4
   236b4:	strb	r5, [sp, #16]
   236b8:	bl	1dbb0 <__assert_fail@plt+0xb5bc>
   236bc:	cmp	r0, #0
   236c0:	streq	r7, [r6]
   236c4:	add	sp, sp, #24
   236c8:	pop	{r4, r5, r6, r7, r8, pc}
   236cc:	andeq	r4, r6, r4, asr r5
   236d0:	andeq	pc, r4, r4, asr ip	; <UNPREDICTABLE>
   236d4:	cmp	r1, #0
   236d8:	beq	237c0 <__assert_fail@plt+0x111cc>
   236dc:	ldr	r3, [r2]
   236e0:	push	{r4, r5, r6, lr}
   236e4:	ldr	r4, [r1, r3, lsl #2]
   236e8:	cmp	r4, #0
   236ec:	beq	237c8 <__assert_fail@plt+0x111d4>
   236f0:	add	r3, r3, #1
   236f4:	str	r3, [r2]
   236f8:	mov	r1, r4
   236fc:	bl	1a98c <__assert_fail@plt+0x8398>
   23700:	mov	r5, r0
   23704:	mov	r0, #0
   23708:	str	r0, [r5, #40]	; 0x28
   2370c:	bl	31bcc <__assert_fail@plt+0x1f5d8>
   23710:	ldr	r1, [pc, #216]	; 237f0 <__assert_fail@plt+0x111fc>
   23714:	str	r0, [r5, #56]	; 0x38
   23718:	mov	r0, r4
   2371c:	bl	11f40 <strcmp@plt>
   23720:	cmp	r0, #0
   23724:	beq	237d0 <__assert_fail@plt+0x111dc>
   23728:	ldr	r1, [pc, #196]	; 237f4 <__assert_fail@plt+0x11200>
   2372c:	mov	r0, r4
   23730:	bl	11f40 <strcmp@plt>
   23734:	cmp	r0, #0
   23738:	beq	2379c <__assert_fail@plt+0x111a8>
   2373c:	ldr	r3, [pc, #180]	; 237f8 <__assert_fail@plt+0x11204>
   23740:	mov	r1, r4
   23744:	ldr	r0, [r3, #36]	; 0x24
   23748:	bl	1c108 <__assert_fail@plt+0x9b14>
   2374c:	str	r4, [r5, #48]	; 0x30
   23750:	cmp	r0, #0
   23754:	mov	r3, r0
   23758:	str	r0, [r5, #44]	; 0x2c
   2375c:	beq	237e0 <__assert_fail@plt+0x111ec>
   23760:	mov	r0, r3
   23764:	bl	123c0 <fileno@plt>
   23768:	cmn	r0, #1
   2376c:	moveq	r0, #0
   23770:	beq	23780 <__assert_fail@plt+0x1118c>
   23774:	bl	12564 <isatty@plt>
   23778:	adds	r0, r0, #0
   2377c:	movne	r0, #1
   23780:	ldr	r2, [pc, #116]	; 237fc <__assert_fail@plt+0x11208>
   23784:	mov	r3, #1065353216	; 0x3f800000
   23788:	strb	r0, [r5, #52]	; 0x34
   2378c:	str	r2, [r5, #16]
   23790:	str	r3, [r5, #28]
   23794:	mov	r0, #1
   23798:	pop	{r4, r5, r6, pc}
   2379c:	ldr	r3, [pc, #92]	; 23800 <__assert_fail@plt+0x1120c>
   237a0:	ldr	r1, [pc, #92]	; 23804 <__assert_fail@plt+0x11210>
   237a4:	mov	r2, #5
   237a8:	ldr	r3, [r3]
   237ac:	str	r3, [r5, #44]	; 0x2c
   237b0:	bl	120b4 <dcgettext@plt>
   237b4:	ldr	r3, [r5, #44]	; 0x2c
   237b8:	str	r0, [r5, #48]	; 0x30
   237bc:	b	23760 <__assert_fail@plt+0x1116c>
   237c0:	mov	r0, r1
   237c4:	bx	lr
   237c8:	mov	r0, r4
   237cc:	pop	{r4, r5, r6, pc}
   237d0:	ldr	r3, [pc, #48]	; 23808 <__assert_fail@plt+0x11214>
   237d4:	mov	r2, #5
   237d8:	ldr	r1, [pc, #44]	; 2380c <__assert_fail@plt+0x11218>
   237dc:	b	237a8 <__assert_fail@plt+0x111b4>
   237e0:	bl	12348 <__errno_location@plt>
   237e4:	mov	r1, r4
   237e8:	ldr	r0, [r0]
   237ec:	bl	1bf50 <__assert_fail@plt+0x995c>
   237f0:	andeq	r0, r5, r8, asr #29
   237f4:	andeq	r0, r5, r4, ror #29
   237f8:	andeq	r4, r6, r0, asr #28
   237fc:	andeq	r0, r0, r1, lsl #2
   23800:	andeq	r4, r6, r4, asr r5
   23804:	andeq	pc, r4, r4, asr ip	; <UNPREDICTABLE>
   23808:	andeq	r4, r6, r8, asr #10
   2380c:	ldrdeq	r0, [r5], -r4
   23810:	cmp	r1, #0
   23814:	beq	238fc <__assert_fail@plt+0x11308>
   23818:	ldr	r3, [r2]
   2381c:	push	{r4, r5, r6, lr}
   23820:	ldr	r4, [r1, r3, lsl #2]
   23824:	cmp	r4, #0
   23828:	beq	23904 <__assert_fail@plt+0x11310>
   2382c:	add	r3, r3, #1
   23830:	str	r3, [r2]
   23834:	mov	r1, r4
   23838:	bl	1a98c <__assert_fail@plt+0x8398>
   2383c:	mov	r5, r0
   23840:	mov	r0, #0
   23844:	str	r0, [r5, #40]	; 0x28
   23848:	bl	31bcc <__assert_fail@plt+0x1f5d8>
   2384c:	ldr	r1, [pc, #216]	; 2392c <__assert_fail@plt+0x11338>
   23850:	str	r0, [r5, #56]	; 0x38
   23854:	mov	r0, r4
   23858:	bl	11f40 <strcmp@plt>
   2385c:	cmp	r0, #0
   23860:	beq	2390c <__assert_fail@plt+0x11318>
   23864:	ldr	r1, [pc, #196]	; 23930 <__assert_fail@plt+0x1133c>
   23868:	mov	r0, r4
   2386c:	bl	11f40 <strcmp@plt>
   23870:	cmp	r0, #0
   23874:	beq	238d8 <__assert_fail@plt+0x112e4>
   23878:	ldr	r3, [pc, #180]	; 23934 <__assert_fail@plt+0x11340>
   2387c:	mov	r1, r4
   23880:	ldr	r0, [r3, #36]	; 0x24
   23884:	bl	1c108 <__assert_fail@plt+0x9b14>
   23888:	str	r4, [r5, #48]	; 0x30
   2388c:	cmp	r0, #0
   23890:	mov	r3, r0
   23894:	str	r0, [r5, #44]	; 0x2c
   23898:	beq	2391c <__assert_fail@plt+0x11328>
   2389c:	mov	r0, r3
   238a0:	bl	123c0 <fileno@plt>
   238a4:	cmn	r0, #1
   238a8:	moveq	r0, #0
   238ac:	beq	238bc <__assert_fail@plt+0x112c8>
   238b0:	bl	12564 <isatty@plt>
   238b4:	adds	r0, r0, #0
   238b8:	movne	r0, #1
   238bc:	ldr	r2, [pc, #116]	; 23938 <__assert_fail@plt+0x11344>
   238c0:	mov	r3, #1065353216	; 0x3f800000
   238c4:	strb	r0, [r5, #52]	; 0x34
   238c8:	str	r2, [r5, #16]
   238cc:	str	r3, [r5, #28]
   238d0:	mov	r0, #1
   238d4:	pop	{r4, r5, r6, pc}
   238d8:	ldr	r3, [pc, #92]	; 2393c <__assert_fail@plt+0x11348>
   238dc:	ldr	r1, [pc, #92]	; 23940 <__assert_fail@plt+0x1134c>
   238e0:	mov	r2, #5
   238e4:	ldr	r3, [r3]
   238e8:	str	r3, [r5, #44]	; 0x2c
   238ec:	bl	120b4 <dcgettext@plt>
   238f0:	ldr	r3, [r5, #44]	; 0x2c
   238f4:	str	r0, [r5, #48]	; 0x30
   238f8:	b	2389c <__assert_fail@plt+0x112a8>
   238fc:	mov	r0, r1
   23900:	bx	lr
   23904:	mov	r0, r4
   23908:	pop	{r4, r5, r6, pc}
   2390c:	ldr	r3, [pc, #48]	; 23944 <__assert_fail@plt+0x11350>
   23910:	mov	r2, #5
   23914:	ldr	r1, [pc, #44]	; 23948 <__assert_fail@plt+0x11354>
   23918:	b	238e4 <__assert_fail@plt+0x112f0>
   2391c:	bl	12348 <__errno_location@plt>
   23920:	mov	r1, r4
   23924:	ldr	r0, [r0]
   23928:	bl	1bf50 <__assert_fail@plt+0x995c>
   2392c:	andeq	r0, r5, r8, asr #29
   23930:	andeq	r0, r5, r4, ror #29
   23934:	andeq	r4, r6, r0, asr #28
   23938:	andeq	r0, r0, r1, lsl #2
   2393c:	andeq	r4, r6, r4, asr r5
   23940:	andeq	pc, r4, r4, asr ip	; <UNPREDICTABLE>
   23944:	andeq	r4, r6, r8, asr #10
   23948:	ldrdeq	r0, [r5], -r4
   2394c:	cmp	r1, #0
   23950:	beq	23a38 <__assert_fail@plt+0x11444>
   23954:	ldr	r3, [r2]
   23958:	push	{r4, r5, r6, lr}
   2395c:	ldr	r4, [r1, r3, lsl #2]
   23960:	cmp	r4, #0
   23964:	beq	23a40 <__assert_fail@plt+0x1144c>
   23968:	add	r3, r3, #1
   2396c:	str	r3, [r2]
   23970:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   23974:	mov	r5, r0
   23978:	mov	r0, #0
   2397c:	str	r0, [r5, #40]	; 0x28
   23980:	bl	31bcc <__assert_fail@plt+0x1f5d8>
   23984:	ldr	r1, [pc, #220]	; 23a68 <__assert_fail@plt+0x11474>
   23988:	str	r0, [r5, #56]	; 0x38
   2398c:	mov	r0, r4
   23990:	bl	11f40 <strcmp@plt>
   23994:	cmp	r0, #0
   23998:	beq	23a48 <__assert_fail@plt+0x11454>
   2399c:	ldr	r1, [pc, #200]	; 23a6c <__assert_fail@plt+0x11478>
   239a0:	mov	r0, r4
   239a4:	bl	11f40 <strcmp@plt>
   239a8:	cmp	r0, #0
   239ac:	beq	23a14 <__assert_fail@plt+0x11420>
   239b0:	ldr	r3, [pc, #184]	; 23a70 <__assert_fail@plt+0x1147c>
   239b4:	mov	r1, r4
   239b8:	ldr	r0, [r3, #36]	; 0x24
   239bc:	bl	1c108 <__assert_fail@plt+0x9b14>
   239c0:	str	r4, [r5, #48]	; 0x30
   239c4:	cmp	r0, #0
   239c8:	mov	r3, r0
   239cc:	str	r0, [r5, #44]	; 0x2c
   239d0:	beq	23a58 <__assert_fail@plt+0x11464>
   239d4:	mov	r0, r3
   239d8:	bl	123c0 <fileno@plt>
   239dc:	cmn	r0, #1
   239e0:	moveq	r0, #0
   239e4:	beq	239f4 <__assert_fail@plt+0x11400>
   239e8:	bl	12564 <isatty@plt>
   239ec:	adds	r0, r0, #0
   239f0:	movne	r0, #1
   239f4:	mov	r1, #1
   239f8:	mov	r3, #1065353216	; 0x3f800000
   239fc:	strb	r0, [r5, #52]	; 0x34
   23a00:	strb	r1, [r5, #17]
   23a04:	str	r3, [r5, #28]
   23a08:	strb	r1, [r5, #16]
   23a0c:	mov	r0, r1
   23a10:	pop	{r4, r5, r6, pc}
   23a14:	ldr	r3, [pc, #88]	; 23a74 <__assert_fail@plt+0x11480>
   23a18:	ldr	r1, [pc, #88]	; 23a78 <__assert_fail@plt+0x11484>
   23a1c:	mov	r2, #5
   23a20:	ldr	r3, [r3]
   23a24:	str	r3, [r5, #44]	; 0x2c
   23a28:	bl	120b4 <dcgettext@plt>
   23a2c:	ldr	r3, [r5, #44]	; 0x2c
   23a30:	str	r0, [r5, #48]	; 0x30
   23a34:	b	239d4 <__assert_fail@plt+0x113e0>
   23a38:	mov	r0, r1
   23a3c:	bx	lr
   23a40:	mov	r0, r4
   23a44:	pop	{r4, r5, r6, pc}
   23a48:	ldr	r3, [pc, #44]	; 23a7c <__assert_fail@plt+0x11488>
   23a4c:	mov	r2, #5
   23a50:	ldr	r1, [pc, #40]	; 23a80 <__assert_fail@plt+0x1148c>
   23a54:	b	23a20 <__assert_fail@plt+0x1142c>
   23a58:	bl	12348 <__errno_location@plt>
   23a5c:	mov	r1, r4
   23a60:	ldr	r0, [r0]
   23a64:	bl	1bf50 <__assert_fail@plt+0x995c>
   23a68:	andeq	r0, r5, r8, asr #29
   23a6c:	andeq	r0, r5, r4, ror #29
   23a70:	andeq	r4, r6, r0, asr #28
   23a74:	andeq	r4, r6, r4, asr r5
   23a78:	andeq	pc, r4, r4, asr ip	; <UNPREDICTABLE>
   23a7c:	andeq	r4, r6, r8, asr #10
   23a80:	ldrdeq	r0, [r5], -r4
   23a84:	push	{r4, lr}
   23a88:	subs	r4, r0, #0
   23a8c:	popeq	{r4, pc}
   23a90:	ldr	r2, [pc, #100]	; 23afc <__assert_fail@plt+0x11508>
   23a94:	ldr	r1, [pc, #100]	; 23b00 <__assert_fail@plt+0x1150c>
   23a98:	mov	r0, #0
   23a9c:	ldr	r3, [r4]
   23aa0:	cmp	r3, r2
   23aa4:	orreq	r0, r0, #1
   23aa8:	beq	23ab4 <__assert_fail@plt+0x114c0>
   23aac:	cmp	r3, r1
   23ab0:	orreq	r0, r0, #2
   23ab4:	ldr	r4, [r4, #152]	; 0x98
   23ab8:	cmp	r4, #0
   23abc:	bne	23a9c <__assert_fail@plt+0x114a8>
   23ac0:	and	r0, r0, #3
   23ac4:	cmp	r0, #3
   23ac8:	popne	{r4, pc}
   23acc:	ldr	r3, [pc, #48]	; 23b04 <__assert_fail@plt+0x11510>
   23ad0:	ldrb	r3, [r3, #1]
   23ad4:	cmp	r3, #0
   23ad8:	popne	{r4, pc}
   23adc:	mov	r2, #5
   23ae0:	ldr	r1, [pc, #32]	; 23b08 <__assert_fail@plt+0x11514>
   23ae4:	mov	r0, r4
   23ae8:	bl	120b4 <dcgettext@plt>
   23aec:	mov	r1, r4
   23af0:	mov	r2, r0
   23af4:	mov	r0, #1
   23af8:	bl	121ec <error@plt>
   23afc:	ldrdeq	r3, [r1], -ip
   23b00:	andeq	r3, r1, r0, lsl #18
   23b04:	andeq	r4, r6, ip, ror #28
   23b08:	andeq	r1, r5, ip, lsl #19
   23b0c:	cmp	r0, #1
   23b10:	ldr	r3, [pc, #104]	; 23b80 <__assert_fail@plt+0x1158c>
   23b14:	beq	23b68 <__assert_fail@plt+0x11574>
   23b18:	bcc	23b54 <__assert_fail@plt+0x11560>
   23b1c:	cmp	r0, #2
   23b20:	bne	23b3c <__assert_fail@plt+0x11548>
   23b24:	ldr	ip, [pc, #88]	; 23b84 <__assert_fail@plt+0x11590>
   23b28:	ldr	r1, [pc, #88]	; 23b88 <__assert_fail@plt+0x11594>
   23b2c:	mov	r2, #1
   23b30:	str	ip, [r3, #52]	; 0x34
   23b34:	str	r1, [r3, #64]	; 0x40
   23b38:	strb	r2, [r3, #12]
   23b3c:	ldr	r2, [r3, #44]	; 0x2c
   23b40:	str	r0, [r3, #48]	; 0x30
   23b44:	tst	r2, #2
   23b48:	ldrne	r2, [pc, #60]	; 23b8c <__assert_fail@plt+0x11598>
   23b4c:	strne	r2, [r3, #52]	; 0x34
   23b50:	bx	lr
   23b54:	ldr	r1, [pc, #52]	; 23b90 <__assert_fail@plt+0x1159c>
   23b58:	ldr	r2, [pc, #52]	; 23b94 <__assert_fail@plt+0x115a0>
   23b5c:	str	r1, [r3, #52]	; 0x34
   23b60:	str	r2, [r3, #64]	; 0x40
   23b64:	b	23b3c <__assert_fail@plt+0x11548>
   23b68:	ldr	r1, [pc, #40]	; 23b98 <__assert_fail@plt+0x115a4>
   23b6c:	ldr	r2, [pc, #40]	; 23b9c <__assert_fail@plt+0x115a8>
   23b70:	strb	r0, [r3, #12]
   23b74:	str	r1, [r3, #52]	; 0x34
   23b78:	str	r2, [r3, #64]	; 0x40
   23b7c:	b	23b3c <__assert_fail@plt+0x11548>
   23b80:	andeq	r4, r6, ip, ror #28
   23b84:	andeq	fp, r1, r8, rrx
   23b88:	strdeq	r0, [r2], -r8
   23b8c:	andeq	fp, r1, ip, lsr #5
   23b90:	andeq	fp, r1, r4, asr #4
   23b94:	andeq	lr, r1, ip, lsr #9
   23b98:	andeq	fp, r1, r8, asr r1
   23b9c:	andeq	r0, r2, ip, asr #22
   23ba0:	ldr	r3, [pc, #8]	; 23bb0 <__assert_fail@plt+0x115bc>
   23ba4:	mov	r2, #0
   23ba8:	str	r2, [r3, #8]
   23bac:	bx	lr
   23bb0:	ldrdeq	r4, [r6], -r0
   23bb4:	bx	lr
   23bb8:	push	{r4, r5, r6, r7, r8, lr}
   23bbc:	mov	r1, r0
   23bc0:	sub	sp, sp, #8
   23bc4:	mov	r7, r0
   23bc8:	mov	r2, #6
   23bcc:	ldr	r0, [pc, #316]	; 23d10 <__assert_fail@plt+0x1171c>
   23bd0:	bl	12594 <strncmp@plt>
   23bd4:	cmp	r0, #0
   23bd8:	bne	23bec <__assert_fail@plt+0x115f8>
   23bdc:	mov	r0, r7
   23be0:	bl	12300 <strlen@plt>
   23be4:	cmp	r0, #8
   23be8:	beq	23cec <__assert_fail@plt+0x116f8>
   23bec:	ldrb	r3, [r7]
   23bf0:	ldr	r8, [pc, #284]	; 23d14 <__assert_fail@plt+0x11720>
   23bf4:	ldr	r0, [pc, #284]	; 23d18 <__assert_fail@plt+0x11724>
   23bf8:	cmp	r3, #45	; 0x2d
   23bfc:	addeq	r6, r7, #1
   23c00:	movne	r6, r7
   23c04:	mov	r4, r8
   23c08:	mov	r5, #0
   23c0c:	b	23c20 <__assert_fail@plt+0x1162c>
   23c10:	ldr	r0, [r4, #4]
   23c14:	add	r5, r5, #1
   23c18:	cmp	r0, #0
   23c1c:	beq	23cc0 <__assert_fail@plt+0x116cc>
   23c20:	mov	r1, r6
   23c24:	bl	11f40 <strcmp@plt>
   23c28:	add	r4, r4, #16
   23c2c:	subs	r3, r0, #0
   23c30:	bne	23c10 <__assert_fail@plt+0x1161c>
   23c34:	ldr	r2, [pc, #224]	; 23d1c <__assert_fail@plt+0x11728>
   23c38:	lsl	r4, r5, #4
   23c3c:	add	r2, r2, r4
   23c40:	add	r4, r8, r4
   23c44:	ldr	r2, [r2, #48]	; 0x30
   23c48:	cmp	r2, #2
   23c4c:	beq	23cb4 <__assert_fail@plt+0x116c0>
   23c50:	cmp	r2, #1
   23c54:	beq	23d08 <__assert_fail@plt+0x11714>
   23c58:	cmp	r2, #0
   23c5c:	bne	23cd0 <__assert_fail@plt+0x116dc>
   23c60:	ldr	r5, [pc, #184]	; 23d20 <__assert_fail@plt+0x1172c>
   23c64:	ldr	r3, [r5, #8]
   23c68:	cmp	r3, #0
   23c6c:	beq	23cb4 <__assert_fail@plt+0x116c0>
   23c70:	ldr	r3, [pc, #172]	; 23d24 <__assert_fail@plt+0x11730>
   23c74:	ldrb	r6, [r3, #17]
   23c78:	cmp	r6, #0
   23c7c:	bne	23cb4 <__assert_fail@plt+0x116c0>
   23c80:	ldrb	r3, [r3, #16]
   23c84:	cmp	r3, #0
   23c88:	beq	23cb4 <__assert_fail@plt+0x116c0>
   23c8c:	mov	r2, #5
   23c90:	ldr	r1, [pc, #144]	; 23d28 <__assert_fail@plt+0x11734>
   23c94:	bl	120b4 <dcgettext@plt>
   23c98:	ldr	r3, [r5, #8]
   23c9c:	mov	r1, r6
   23ca0:	stm	sp, {r3, r7}
   23ca4:	mov	r3, r7
   23ca8:	mov	r2, r0
   23cac:	mov	r0, r6
   23cb0:	bl	121ec <error@plt>
   23cb4:	mov	r0, r4
   23cb8:	add	sp, sp, #8
   23cbc:	pop	{r4, r5, r6, r7, r8, pc}
   23cc0:	mov	r4, r0
   23cc4:	mov	r0, r4
   23cc8:	add	sp, sp, #8
   23ccc:	pop	{r4, r5, r6, r7, r8, pc}
   23cd0:	ldr	r3, [pc, #72]	; 23d20 <__assert_fail@plt+0x1172c>
   23cd4:	mov	r0, r4
   23cd8:	ldr	r2, [r3, #8]
   23cdc:	cmp	r2, #0
   23ce0:	streq	r7, [r3, #8]
   23ce4:	add	sp, sp, #8
   23ce8:	pop	{r4, r5, r6, r7, r8, pc}
   23cec:	ldr	r3, [pc, #44]	; 23d20 <__assert_fail@plt+0x1172c>
   23cf0:	ldr	r2, [r3, #8]
   23cf4:	cmp	r2, #0
   23cf8:	ldrne	r4, [pc, #44]	; 23d2c <__assert_fail@plt+0x11738>
   23cfc:	streq	r7, [r3, #8]
   23d00:	ldreq	r4, [pc, #36]	; 23d2c <__assert_fail@plt+0x11738>
   23d04:	b	23cb4 <__assert_fail@plt+0x116c0>
   23d08:	mov	r4, r3
   23d0c:	b	23cb4 <__assert_fail@plt+0x116c0>
   23d10:	strdeq	r1, [r5], -ip
   23d14:	andeq	r0, r5, r0, ror r6
   23d18:	andeq	lr, r4, ip, lsr #24
   23d1c:	andeq	r0, r5, r0, asr #12
   23d20:	ldrdeq	r4, [r6], -r0
   23d24:	andeq	r4, r6, ip, ror #28
   23d28:	andeq	r1, r5, r8, lsr sl
   23d2c:	strdeq	r0, [r5], -r8
   23d30:	cmp	r1, #0
   23d34:	beq	23df8 <__assert_fail@plt+0x11804>
   23d38:	ldr	r3, [r2]
   23d3c:	push	{r4, r5, r6, lr}
   23d40:	sub	sp, sp, #104	; 0x68
   23d44:	ldr	r4, [r1, r3, lsl #2]
   23d48:	cmp	r4, #0
   23d4c:	moveq	r0, r4
   23d50:	beq	23db0 <__assert_fail@plt+0x117bc>
   23d54:	ldr	r6, [pc, #244]	; 23e50 <__assert_fail@plt+0x1185c>
   23d58:	add	r3, r3, #1
   23d5c:	str	r3, [r2]
   23d60:	ldrh	r3, [r6, #68]	; 0x44
   23d64:	mov	r5, r0
   23d68:	cmp	r3, #1
   23d6c:	bls	23db8 <__assert_fail@plt+0x117c4>
   23d70:	mov	r0, r4
   23d74:	bl	1e2f4 <__assert_fail@plt+0xbd00>
   23d78:	cmp	r0, #0
   23d7c:	bne	23db8 <__assert_fail@plt+0x117c4>
   23d80:	ldr	r3, [r6, #44]	; 0x2c
   23d84:	tst	r3, #8
   23d88:	bne	23e2c <__assert_fail@plt+0x11838>
   23d8c:	ldr	r0, [pc, #192]	; 23e54 <__assert_fail@plt+0x11860>
   23d90:	bl	23bb8 <__assert_fail@plt+0x115c4>
   23d94:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   23d98:	mov	r1, #0
   23d9c:	mov	r2, #0
   23da0:	mov	r3, r0
   23da4:	str	r1, [r0, #16]
   23da8:	mov	r0, #1
   23dac:	str	r2, [r3, #28]
   23db0:	add	sp, sp, #104	; 0x68
   23db4:	pop	{r4, r5, r6, pc}
   23db8:	mov	r0, r5
   23dbc:	mov	r1, r4
   23dc0:	bl	1a98c <__assert_fail@plt+0x8398>
   23dc4:	mov	r2, sp
   23dc8:	ldr	r1, [pc, #136]	; 23e58 <__assert_fail@plt+0x11864>
   23dcc:	str	r4, [r0, #40]	; 0x28
   23dd0:	mov	r5, r0
   23dd4:	mov	r0, #3
   23dd8:	bl	12558 <__xstat64@plt>
   23ddc:	cmp	r0, #0
   23de0:	beq	23e00 <__assert_fail@plt+0x1180c>
   23de4:	vldr	s15, [pc, #88]	; 23e44 <__assert_fail@plt+0x11850>
   23de8:	mov	r0, #1
   23dec:	vstr	s15, [r5, #28]
   23df0:	add	sp, sp, #104	; 0x68
   23df4:	pop	{r4, r5, r6, pc}
   23df8:	mov	r0, r1
   23dfc:	bx	lr
   23e00:	ldr	r1, [pc, #80]	; 23e58 <__assert_fail@plt+0x11864>
   23e04:	mov	r0, sp
   23e08:	bl	1e16c <__assert_fail@plt+0xbb78>
   23e0c:	mov	r1, r0
   23e10:	mov	r0, r4
   23e14:	bl	11f40 <strcmp@plt>
   23e18:	vldr	s15, [pc, #40]	; 23e48 <__assert_fail@plt+0x11854>
   23e1c:	vldr	s14, [pc, #40]	; 23e4c <__assert_fail@plt+0x11858>
   23e20:	cmp	r0, #0
   23e24:	vmovne.f32	s15, s14
   23e28:	b	23de8 <__assert_fail@plt+0x117f4>
   23e2c:	ldr	r3, [pc, #40]	; 23e5c <__assert_fail@plt+0x11868>
   23e30:	mov	r2, r4
   23e34:	ldr	r1, [pc, #36]	; 23e60 <__assert_fail@plt+0x1186c>
   23e38:	ldr	r0, [r3]
   23e3c:	bl	1233c <fprintf@plt>
   23e40:	b	23d8c <__assert_fail@plt+0x11798>
   23e44:	svccc	0x00800000
   23e48:	svccc	0x00333333
   23e4c:			; <UNDEFINED> instruction: 0x3e99999a
   23e50:	andeq	r4, r6, ip, ror #28
   23e54:	andeq	r1, r5, r4, ror #22
   23e58:	andeq	r3, r5, r4, lsl #27
   23e5c:	andeq	r4, r6, r8, asr #10
   23e60:	andeq	r1, r5, r0, lsr fp
   23e64:	push	{r4, lr}
   23e68:	ldr	r0, [pc, #32]	; 23e90 <__assert_fail@plt+0x1189c>
   23e6c:	bl	23bb8 <__assert_fail@plt+0x115c4>
   23e70:	bl	1a9c8 <__assert_fail@plt+0x83d4>
   23e74:	mov	r2, #0
   23e78:	mov	r1, #0
   23e7c:	mov	r3, r0
   23e80:	str	r1, [r0, #16]
   23e84:	mov	r0, #1
   23e88:	str	r2, [r3, #28]
   23e8c:	pop	{r4, pc}
   23e90:	andeq	r1, r5, r4, ror #22
   23e94:	mov	r0, #0
   23e98:	bx	lr
   23e9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23ea0:	subs	r7, r2, #0
   23ea4:	ldr	r9, [sp, #36]	; 0x24
   23ea8:	ldr	r8, [sp, #40]	; 0x28
   23eac:	beq	240ec <__assert_fail@plt+0x11af8>
   23eb0:	ldr	sl, [pc, #628]	; 2412c <__assert_fail@plt+0x11b38>
   23eb4:	mov	r5, r0
   23eb8:	cmp	r7, sl
   23ebc:	mov	r4, r1
   23ec0:	mov	r6, r3
   23ec4:	beq	2403c <__assert_fail@plt+0x11a48>
   23ec8:	ldr	r1, [r1, #16]
   23ecc:	add	r3, r3, r9
   23ed0:	ldr	r2, [r0, #12]
   23ed4:	add	r3, r3, r1
   23ed8:	cmp	r3, r2
   23edc:	bls	24018 <__assert_fail@plt+0x11a24>
   23ee0:	cmp	r8, #0
   23ee4:	bne	24120 <__assert_fail@plt+0x11b2c>
   23ee8:	ldr	r2, [r4]
   23eec:	ldr	r3, [r0, #28]
   23ef0:	cmp	r2, r3
   23ef4:	beq	24120 <__assert_fail@plt+0x11b2c>
   23ef8:	ldr	r3, [r0, #24]
   23efc:	cmp	r3, #0
   23f00:	bne	24100 <__assert_fail@plt+0x11b0c>
   23f04:	ldr	r3, [r0]
   23f08:	cmp	r3, #0
   23f0c:	beq	23f28 <__assert_fail@plt+0x11934>
   23f10:	ldr	r3, [r0, #36]	; 0x24
   23f14:	cmp	r3, #0
   23f18:	bne	24100 <__assert_fail@plt+0x11b0c>
   23f1c:	ldr	r3, [r0, #40]	; 0x28
   23f20:	cmp	r3, #0
   23f24:	bne	24100 <__assert_fail@plt+0x11b0c>
   23f28:	mov	r1, r4
   23f2c:	mov	r0, r5
   23f30:	bl	243c8 <__assert_fail@plt+0x11dd4>
   23f34:	ldr	r3, [r4]
   23f38:	ldr	r2, [r5, #40]	; 0x28
   23f3c:	cmp	r2, #0
   23f40:	beq	23f54 <__assert_fail@plt+0x11960>
   23f44:	ldr	r1, [r5, #28]
   23f48:	sub	r1, r3, r1
   23f4c:	cmp	r2, r1
   23f50:	beq	24030 <__assert_fail@plt+0x11a3c>
   23f54:	ldr	r2, [r5, #16]
   23f58:	cmp	r2, r3
   23f5c:	beq	24030 <__assert_fail@plt+0x11a3c>
   23f60:	ldr	r3, [r4]
   23f64:	mov	r2, #1
   23f68:	str	r2, [r4, #28]
   23f6c:	ldr	r1, [r4, #8]
   23f70:	cmp	r1, r3
   23f74:	bls	24054 <__assert_fail@plt+0x11a60>
   23f78:	ldr	r1, [r4, #4]
   23f7c:	cmp	r7, sl
   23f80:	beq	24084 <__assert_fail@plt+0x11a90>
   23f84:	ldr	ip, [r4, #16]
   23f88:	ldr	r2, [r4, #12]
   23f8c:	ldr	r0, [sp, #32]
   23f90:	add	r2, r2, ip
   23f94:	cmp	r0, #0
   23f98:	add	r0, r3, #1
   23f9c:	str	r0, [r4]
   23fa0:	str	r2, [r1, r3, lsl #2]
   23fa4:	beq	23fc4 <__assert_fail@plt+0x119d0>
   23fa8:	ldr	r0, [r4, #12]
   23fac:	ldr	r1, [sp, #32]
   23fb0:	add	r0, r0, ip
   23fb4:	bl	121b0 <strcpy@plt>
   23fb8:	ldr	ip, [r4, #16]
   23fbc:	add	ip, r9, ip
   23fc0:	str	ip, [r4, #16]
   23fc4:	ldr	r0, [r4, #12]
   23fc8:	mov	r1, r7
   23fcc:	add	r0, r0, ip
   23fd0:	bl	121b0 <strcpy@plt>
   23fd4:	ldr	r3, [r4, #16]
   23fd8:	cmp	r8, #0
   23fdc:	add	r6, r6, r3
   23fe0:	str	r6, [r4, #16]
   23fe4:	ldr	r3, [r4]
   23fe8:	bne	240a0 <__assert_fail@plt+0x11aac>
   23fec:	ldr	r2, [r5, #40]	; 0x28
   23ff0:	cmp	r2, #0
   23ff4:	beq	24008 <__assert_fail@plt+0x11a14>
   23ff8:	ldr	r1, [r5, #28]
   23ffc:	sub	r1, r3, r1
   24000:	cmp	r2, r1
   24004:	beq	240ac <__assert_fail@plt+0x11ab8>
   24008:	ldr	r2, [r5, #16]
   2400c:	cmp	r3, r2
   24010:	beq	240ac <__assert_fail@plt+0x11ab8>
   24014:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24018:	cmp	r8, #0
   2401c:	ldr	r3, [r4]
   24020:	beq	23f38 <__assert_fail@plt+0x11944>
   24024:	ldr	r2, [r0, #16]
   24028:	cmp	r3, r2
   2402c:	bne	23f6c <__assert_fail@plt+0x11978>
   24030:	mov	r1, r4
   24034:	mov	r0, r5
   24038:	bl	243c8 <__assert_fail@plt+0x11dd4>
   2403c:	cmp	r8, #0
   24040:	ldrne	r3, [r4]
   24044:	moveq	r2, #1
   24048:	ldreq	r3, [r4]
   2404c:	streq	r2, [r4, #28]
   24050:	b	23f6c <__assert_fail@plt+0x11978>
   24054:	ldr	r0, [r4, #4]
   24058:	cmp	r0, #0
   2405c:	beq	240cc <__assert_fail@plt+0x11ad8>
   24060:	lsl	r3, r1, #1
   24064:	str	r3, [r4, #8]
   24068:	lsl	r1, r1, #3
   2406c:	bl	35678 <__assert_fail@plt+0x23084>
   24070:	cmp	r7, sl
   24074:	ldr	r3, [r4]
   24078:	mov	r1, r0
   2407c:	str	r0, [r4, #4]
   24080:	bne	23f84 <__assert_fail@plt+0x11990>
   24084:	add	r0, r3, #1
   24088:	mov	r2, #0
   2408c:	cmp	r8, #0
   24090:	str	r0, [r4]
   24094:	str	r2, [r1, r3, lsl #2]
   24098:	bne	240c0 <__assert_fail@plt+0x11acc>
   2409c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   240a0:	ldr	r2, [r5, #16]
   240a4:	cmp	r3, r2
   240a8:	bne	240c4 <__assert_fail@plt+0x11ad0>
   240ac:	mov	r0, r5
   240b0:	mov	r1, r4
   240b4:	bl	243c8 <__assert_fail@plt+0x11dd4>
   240b8:	cmp	r8, #0
   240bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   240c0:	ldr	r6, [r4, #16]
   240c4:	str	r6, [r4, #20]
   240c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   240cc:	mov	r3, #64	; 0x40
   240d0:	str	r3, [r4, #8]
   240d4:	mov	r0, #256	; 0x100
   240d8:	bl	3563c <__assert_fail@plt+0x23048>
   240dc:	ldr	r3, [r4]
   240e0:	str	r0, [r4, #4]
   240e4:	mov	r1, r0
   240e8:	b	23f7c <__assert_fail@plt+0x11988>
   240ec:	ldr	r3, [pc, #60]	; 24130 <__assert_fail@plt+0x11b3c>
   240f0:	ldr	r2, [pc, #60]	; 24134 <__assert_fail@plt+0x11b40>
   240f4:	ldr	r1, [pc, #60]	; 24138 <__assert_fail@plt+0x11b44>
   240f8:	ldr	r0, [pc, #60]	; 2413c <__assert_fail@plt+0x11b48>
   240fc:	bl	125f4 <__assert_fail@plt>
   24100:	ldr	r1, [pc, #56]	; 24140 <__assert_fail@plt+0x11b4c>
   24104:	mov	r2, #5
   24108:	mov	r0, #0
   2410c:	bl	120b4 <dcgettext@plt>
   24110:	mov	r1, #0
   24114:	mov	r2, r0
   24118:	mov	r0, #1
   2411c:	bl	121ec <error@plt>
   24120:	mov	r2, #5
   24124:	ldr	r1, [pc, #24]	; 24144 <__assert_fail@plt+0x11b50>
   24128:	b	24108 <__assert_fail@plt+0x11b14>
   2412c:	andeq	r1, r5, r0, lsr lr
   24130:	muleq	r5, r0, sp
   24134:	andeq	r0, r0, r5, asr r1
   24138:	andeq	r1, r5, r8, lsl lr
   2413c:	andeq	r1, r5, r4, lsr #28
   24140:	andeq	r1, r5, r8, ror lr
   24144:	andeq	r1, r5, ip, lsr lr
   24148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2414c:	sub	sp, sp, #36	; 0x24
   24150:	mov	r5, r3
   24154:	ldr	r3, [sp, #72]	; 0x48
   24158:	ldr	r4, [pc, #608]	; 243c0 <__assert_fail@plt+0x11dcc>
   2415c:	str	r3, [sp, #12]
   24160:	ldr	r3, [sp, #76]	; 0x4c
   24164:	str	r1, [sp, #24]
   24168:	str	r3, [sp, #16]
   2416c:	ldr	r3, [sp, #80]	; 0x50
   24170:	ldr	r1, [r4]
   24174:	str	r3, [sp, #8]
   24178:	ldr	r3, [sp, #84]	; 0x54
   2417c:	mov	r9, r0
   24180:	str	r3, [sp, #4]
   24184:	ldr	r0, [r0, #12]
   24188:	ldr	r3, [sp, #88]	; 0x58
   2418c:	cmp	r1, #0
   24190:	str	r1, [sp, #20]
   24194:	mov	r7, r2
   24198:	sub	r6, r0, #1
   2419c:	str	r3, [sp, #28]
   241a0:	beq	243ac <__assert_fail@plt+0x11db8>
   241a4:	ldr	r3, [sp, #12]
   241a8:	cmp	r3, #0
   241ac:	beq	242ec <__assert_fail@plt+0x11cf8>
   241b0:	ldr	r3, [sp, #4]
   241b4:	ldr	r2, [sp, #16]
   241b8:	ldr	r4, [sp, #20]
   241bc:	add	sl, r3, r2
   241c0:	mov	fp, r7
   241c4:	b	2423c <__assert_fail@plt+0x11c48>
   241c8:	sub	r7, r8, fp
   241cc:	cmp	r6, r7
   241d0:	bls	242bc <__assert_fail@plt+0x11cc8>
   241d4:	mov	r0, r4
   241d8:	mov	r1, fp
   241dc:	sub	r6, r6, r7
   241e0:	mov	r2, r7
   241e4:	bl	12390 <strncpy@plt>
   241e8:	cmp	sl, r6
   241ec:	sub	r5, r5, r7
   241f0:	add	r4, r4, r7
   241f4:	bcs	243a4 <__assert_fail@plt+0x11db0>
   241f8:	ldr	r3, [sp, #16]
   241fc:	ldr	r1, [sp, #12]
   24200:	mov	r0, r4
   24204:	add	r4, r4, r3
   24208:	bl	121b0 <strcpy@plt>
   2420c:	mov	r0, r4
   24210:	ldr	r1, [sp, #8]
   24214:	bl	121b0 <strcpy@plt>
   24218:	ldr	r2, [r9, #20]
   2421c:	ldr	r3, [sp, #4]
   24220:	add	fp, r8, r2
   24224:	sub	r5, r5, r2
   24228:	ldrb	r2, [fp]
   2422c:	sub	r6, r6, sl
   24230:	add	r4, r4, r3
   24234:	cmp	r2, #0
   24238:	beq	24284 <__assert_fail@plt+0x11c90>
   2423c:	ldr	r1, [r9, #24]
   24240:	mov	r0, fp
   24244:	bl	2a740 <__assert_fail@plt+0x1814c>
   24248:	subs	r8, r0, #0
   2424c:	bne	241c8 <__assert_fail@plt+0x11bd4>
   24250:	cmp	r5, r6
   24254:	bcs	242bc <__assert_fail@plt+0x11cc8>
   24258:	mov	r1, fp
   2425c:	add	fp, fp, r5
   24260:	mov	r2, r5
   24264:	mov	r0, r4
   24268:	bl	12390 <strncpy@plt>
   2426c:	ldrb	r2, [fp]
   24270:	sub	r6, r6, r5
   24274:	add	r4, r4, r5
   24278:	cmp	r2, #0
   2427c:	mov	r5, #0
   24280:	bne	2423c <__assert_fail@plt+0x11c48>
   24284:	mov	ip, #0
   24288:	strb	ip, [r4], #1
   2428c:	ldr	r3, [sp, #20]
   24290:	str	ip, [sp, #76]	; 0x4c
   24294:	str	ip, [sp, #72]	; 0x48
   24298:	ldr	ip, [sp, #28]
   2429c:	mov	r2, r3
   242a0:	ldr	r1, [sp, #24]
   242a4:	mov	r0, r9
   242a8:	sub	r3, r4, r3
   242ac:	str	ip, [sp, #80]	; 0x50
   242b0:	add	sp, sp, #36	; 0x24
   242b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   242b8:	b	23e9c <__assert_fail@plt+0x118a8>
   242bc:	mov	r7, fp
   242c0:	ldrb	r3, [r7]
   242c4:	cmp	r3, #0
   242c8:	beq	24284 <__assert_fail@plt+0x11c90>
   242cc:	mov	r2, #5
   242d0:	ldr	r1, [pc, #236]	; 243c4 <__assert_fail@plt+0x11dd0>
   242d4:	mov	r0, #0
   242d8:	bl	120b4 <dcgettext@plt>
   242dc:	mov	r1, #0
   242e0:	mov	r2, r0
   242e4:	mov	r0, #1
   242e8:	bl	121ec <error@plt>
   242ec:	ldr	r3, [sp, #4]
   242f0:	ldr	r2, [sp, #16]
   242f4:	ldr	r4, [sp, #20]
   242f8:	add	sl, r3, r2
   242fc:	mov	fp, r7
   24300:	b	24364 <__assert_fail@plt+0x11d70>
   24304:	sub	r7, r8, fp
   24308:	cmp	r7, r6
   2430c:	bcs	242bc <__assert_fail@plt+0x11cc8>
   24310:	mov	r0, r4
   24314:	mov	r1, fp
   24318:	sub	r6, r6, r7
   2431c:	mov	r2, r7
   24320:	bl	12390 <strncpy@plt>
   24324:	cmp	sl, r6
   24328:	sub	r5, r5, r7
   2432c:	add	r4, r4, r7
   24330:	bcs	243a4 <__assert_fail@plt+0x11db0>
   24334:	mov	r0, r4
   24338:	ldr	r1, [sp, #8]
   2433c:	bl	121b0 <strcpy@plt>
   24340:	ldr	r2, [r9, #20]
   24344:	ldr	r3, [sp, #4]
   24348:	sub	r6, r6, sl
   2434c:	add	r4, r4, r3
   24350:	add	fp, r8, r2
   24354:	sub	r5, r5, r2
   24358:	ldrb	r2, [fp]
   2435c:	cmp	r2, #0
   24360:	beq	24284 <__assert_fail@plt+0x11c90>
   24364:	ldr	r1, [r9, #24]
   24368:	mov	r0, fp
   2436c:	bl	2a740 <__assert_fail@plt+0x1814c>
   24370:	subs	r8, r0, #0
   24374:	bne	24304 <__assert_fail@plt+0x11d10>
   24378:	cmp	r6, r5
   2437c:	bls	242bc <__assert_fail@plt+0x11cc8>
   24380:	mov	r1, fp
   24384:	mov	r0, r4
   24388:	mov	r2, r5
   2438c:	sub	r6, r6, r5
   24390:	add	fp, fp, r5
   24394:	add	r4, r4, r5
   24398:	bl	12390 <strncpy@plt>
   2439c:	ldr	r5, [sp, #12]
   243a0:	b	24358 <__assert_fail@plt+0x11d64>
   243a4:	mov	r7, r8
   243a8:	b	242c0 <__assert_fail@plt+0x11ccc>
   243ac:	add	r0, r0, #1
   243b0:	bl	3563c <__assert_fail@plt+0x23048>
   243b4:	str	r0, [sp, #20]
   243b8:	str	r0, [r4]
   243bc:	b	241a4 <__assert_fail@plt+0x11bb0>
   243c0:	ldrdeq	r4, [r6], -ip
   243c4:	muleq	r5, r0, lr
   243c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243cc:	sub	sp, sp, #20
   243d0:	mov	r3, #0
   243d4:	mov	r7, r1
   243d8:	str	r3, [sp, #8]
   243dc:	str	r3, [sp, #4]
   243e0:	str	r3, [sp]
   243e4:	ldr	r2, [pc, #668]	; 24688 <__assert_fail@plt+0x12094>
   243e8:	mov	r9, r0
   243ec:	bl	23e9c <__assert_fail@plt+0x118a8>
   243f0:	ldr	r3, [r7]
   243f4:	cmp	r3, #0
   243f8:	beq	24630 <__assert_fail@plt+0x1203c>
   243fc:	ldr	r2, [r7, #4]
   24400:	sub	r3, r3, #-1073741823	; 0xc0000001
   24404:	ldr	r6, [r2, r3, lsl #2]
   24408:	lsl	r3, r3, #2
   2440c:	cmp	r6, #0
   24410:	bne	24674 <__assert_fail@plt+0x12080>
   24414:	add	r0, r3, #8
   24418:	bl	3563c <__assert_fail@plt+0x23048>
   2441c:	ldr	r1, [r7]
   24420:	mov	sl, r6
   24424:	mov	r5, r1
   24428:	mov	r8, r0
   2442c:	ldr	r0, [r9, #28]
   24430:	cmp	r0, #0
   24434:	beq	24618 <__assert_fail@plt+0x12024>
   24438:	ldr	r3, [r7, #4]
   2443c:	lsl	r4, r0, #2
   24440:	add	lr, r3, r4
   24444:	sub	r2, r8, #4
   24448:	ldr	ip, [r3], #4
   2444c:	cmp	lr, r3
   24450:	str	ip, [r2, #4]!
   24454:	bne	24448 <__assert_fail@plt+0x11e54>
   24458:	mov	r2, r4
   2445c:	mov	r4, r0
   24460:	add	ip, r6, r0
   24464:	cmp	r1, ip
   24468:	cmphi	r5, r0
   2446c:	bls	244a4 <__assert_fail@plt+0x11eb0>
   24470:	ldr	r3, [r7, #4]
   24474:	add	r2, r8, r0, lsl #2
   24478:	add	r3, r3, ip, lsl #2
   2447c:	add	r4, r4, #1
   24480:	add	lr, r6, r4
   24484:	ldr	ip, [r3], #4
   24488:	cmp	r1, lr
   2448c:	cmphi	r5, r4
   24490:	str	ip, [r2], #4
   24494:	bhi	2447c <__assert_fail@plt+0x11e88>
   24498:	cmp	r4, r0
   2449c:	bcc	24660 <__assert_fail@plt+0x1206c>
   244a0:	lsl	r2, r4, #2
   244a4:	str	sl, [r8, r2]
   244a8:	ldr	fp, [r9, #32]
   244ac:	mov	r3, r8
   244b0:	mov	r2, r4
   244b4:	ldr	r1, [r7, #24]
   244b8:	mov	r0, r9
   244bc:	blx	fp
   244c0:	subs	fp, r0, #0
   244c4:	bne	24590 <__assert_fail@plt+0x11f9c>
   244c8:	ldr	r2, [r9, #28]
   244cc:	add	r1, r2, #1
   244d0:	cmp	r5, r1
   244d4:	bls	24644 <__assert_fail@plt+0x12050>
   244d8:	ldr	r3, [r7, #40]	; 0x28
   244dc:	ldr	ip, [r7, #36]	; 0x24
   244e0:	cmp	r5, r3
   244e4:	movcs	r0, #0
   244e8:	movcc	r0, #1
   244ec:	cmp	r3, #0
   244f0:	orreq	r0, r0, #1
   244f4:	cmp	r0, #0
   244f8:	strne	r5, [r7, #40]	; 0x28
   244fc:	movne	r3, r5
   24500:	ldrne	r0, [r9, #28]
   24504:	moveq	r0, r2
   24508:	cmp	ip, #0
   2450c:	beq	24588 <__assert_fail@plt+0x11f94>
   24510:	cmp	ip, r3
   24514:	bcs	24588 <__assert_fail@plt+0x11f94>
   24518:	sub	r3, r3, ip
   2451c:	lsrs	r3, r3, #1
   24520:	subne	r5, r5, r3
   24524:	subeq	r5, r5, #1
   24528:	cmp	r2, #0
   2452c:	beq	2453c <__assert_fail@plt+0x11f48>
   24530:	cmp	r1, r5
   24534:	bcc	24544 <__assert_fail@plt+0x11f50>
   24538:	mov	r5, r1
   2453c:	cmp	r5, #0
   24540:	moveq	r5, #1
   24544:	ldr	r1, [r7]
   24548:	add	r3, r6, #1
   2454c:	sub	r2, r1, r0
   24550:	cmp	r3, r2
   24554:	bcc	24430 <__assert_fail@plt+0x11e3c>
   24558:	mov	r0, r8
   2455c:	bl	376d0 <__assert_fail@plt+0x250dc>
   24560:	ldr	r0, [r9, #28]
   24564:	ldr	r1, [r7, #20]
   24568:	mov	r2, #0
   2456c:	mvn	r3, #0
   24570:	str	r0, [r7]
   24574:	str	r1, [r7, #16]
   24578:	str	r2, [r7, #28]
   2457c:	str	r3, [r7, #32]
   24580:	add	sp, sp, #20
   24584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24588:	lsr	r5, r5, #1
   2458c:	b	24528 <__assert_fail@plt+0x11f34>
   24590:	ldr	r3, [r7, #36]	; 0x24
   24594:	ldr	r1, [r9, #28]
   24598:	cmp	r5, r3
   2459c:	movhi	r3, r5
   245a0:	strhi	r5, [r7, #36]	; 0x24
   245a4:	movls	r0, r1
   245a8:	ldrhi	r0, [r9, #28]
   245ac:	cmp	r3, #0
   245b0:	beq	24600 <__assert_fail@plt+0x1200c>
   245b4:	ldr	r2, [r7, #40]	; 0x28
   245b8:	cmp	r2, r3
   245bc:	bls	24600 <__assert_fail@plt+0x1200c>
   245c0:	sub	r3, r2, r3
   245c4:	lsrs	r3, r3, #1
   245c8:	addne	r3, r5, r3
   245cc:	addeq	r3, r5, #1
   245d0:	cmp	r1, #0
   245d4:	beq	245e8 <__assert_fail@plt+0x11ff4>
   245d8:	mov	r5, r3
   245dc:	add	r3, r1, #1
   245e0:	cmp	r3, r5
   245e4:	bcc	245f4 <__assert_fail@plt+0x12000>
   245e8:	cmp	r3, #0
   245ec:	movne	r5, r3
   245f0:	moveq	r5, #1
   245f4:	add	r6, r6, r4
   245f8:	sub	r6, r6, r0
   245fc:	b	24544 <__assert_fail@plt+0x11f50>
   24600:	cmn	r5, #1
   24604:	beq	24624 <__assert_fail@plt+0x12030>
   24608:	cmp	r1, #0
   2460c:	add	r5, r5, #1
   24610:	bne	245dc <__assert_fail@plt+0x11fe8>
   24614:	b	245f4 <__assert_fail@plt+0x12000>
   24618:	mov	r2, sl
   2461c:	mov	r4, r0
   24620:	b	24460 <__assert_fail@plt+0x11e6c>
   24624:	cmp	r1, #0
   24628:	bne	245dc <__assert_fail@plt+0x11fe8>
   2462c:	b	245f4 <__assert_fail@plt+0x12000>
   24630:	ldr	r3, [pc, #84]	; 2468c <__assert_fail@plt+0x12098>
   24634:	ldr	r2, [pc, #84]	; 24690 <__assert_fail@plt+0x1209c>
   24638:	ldr	r1, [pc, #84]	; 24694 <__assert_fail@plt+0x120a0>
   2463c:	ldr	r0, [pc, #84]	; 24698 <__assert_fail@plt+0x120a4>
   24640:	bl	125f4 <__assert_fail@plt>
   24644:	mov	r2, #5
   24648:	ldr	r1, [pc, #76]	; 2469c <__assert_fail@plt+0x120a8>
   2464c:	bl	120b4 <dcgettext@plt>
   24650:	mov	r1, fp
   24654:	mov	r2, r0
   24658:	mov	r0, #1
   2465c:	bl	121ec <error@plt>
   24660:	ldr	r3, [pc, #56]	; 246a0 <__assert_fail@plt+0x120ac>
   24664:	mov	r2, #242	; 0xf2
   24668:	ldr	r1, [pc, #36]	; 24694 <__assert_fail@plt+0x120a0>
   2466c:	ldr	r0, [pc, #48]	; 246a4 <__assert_fail@plt+0x120b0>
   24670:	bl	125f4 <__assert_fail@plt>
   24674:	ldr	r3, [pc, #16]	; 2468c <__assert_fail@plt+0x12098>
   24678:	ldr	r2, [pc, #40]	; 246a8 <__assert_fail@plt+0x120b4>
   2467c:	ldr	r1, [pc, #16]	; 24694 <__assert_fail@plt+0x120a0>
   24680:	ldr	r0, [pc, #36]	; 246ac <__assert_fail@plt+0x120b8>
   24684:	bl	125f4 <__assert_fail@plt>
   24688:	andeq	r1, r5, r0, lsr lr
   2468c:	muleq	r5, ip, sp
   24690:	andeq	r0, r0, r5, lsl #2
   24694:	andeq	r1, r5, r8, lsl lr
   24698:	andeq	r1, r5, r4, lsr #29
   2469c:	andeq	r1, r5, r4, lsl #30
   246a0:	andeq	r1, r5, r8, lsr #27
   246a4:	andeq	r1, r5, r4, ror #29
   246a8:	andeq	r0, r0, r6, lsl #2
   246ac:			; <UNDEFINED> instruction: 0x00051eb8
   246b0:	push	{r4, lr}
   246b4:	mov	r0, #0
   246b8:	bl	120cc <sysconf@plt>
   246bc:	cmp	r0, #0
   246c0:	mvnle	r0, #-2147483648	; 0x80000000
   246c4:	pop	{r4, pc}
   246c8:	ldr	r3, [pc, #64]	; 24710 <__assert_fail@plt+0x1211c>
   246cc:	push	{r4, r5, r6, lr}
   246d0:	ldr	r4, [r3]
   246d4:	ldr	r3, [r4]
   246d8:	cmp	r3, #0
   246dc:	beq	24708 <__assert_fail@plt+0x12114>
   246e0:	mov	r5, #0
   246e4:	mov	r0, r3
   246e8:	bl	12300 <strlen@plt>
   246ec:	ldr	r3, [r4, #4]!
   246f0:	cmp	r3, #0
   246f4:	add	r0, r0, #1
   246f8:	add	r5, r5, r0
   246fc:	bne	246e4 <__assert_fail@plt+0x120f0>
   24700:	mov	r0, r5
   24704:	pop	{r4, r5, r6, pc}
   24708:	mov	r5, r3
   2470c:	b	24700 <__assert_fail@plt+0x1210c>
   24710:	andeq	r4, r6, ip, lsr r5
   24714:	ldr	r3, [pc, #268]	; 24828 <__assert_fail@plt+0x12234>
   24718:	push	{r4, r5, r6, r7, r8, lr}
   2471c:	mov	r7, r0
   24720:	ldr	r6, [r3]
   24724:	mov	r8, r1
   24728:	ldr	r4, [r6]
   2472c:	cmp	r4, #0
   24730:	beq	247e0 <__assert_fail@plt+0x121ec>
   24734:	mov	r5, #0
   24738:	mov	r0, r4
   2473c:	bl	12300 <strlen@plt>
   24740:	ldr	r4, [r6, #4]!
   24744:	cmp	r4, #0
   24748:	add	r0, r0, #1
   2474c:	add	r5, r5, r0
   24750:	bne	24738 <__assert_fail@plt+0x12144>
   24754:	mov	r3, #4096	; 0x1000
   24758:	str	r3, [r7, #8]
   2475c:	mov	r0, r4
   24760:	bl	120cc <sysconf@plt>
   24764:	str	r4, [r7]
   24768:	cmp	r0, #0
   2476c:	mvnle	r0, #-2147483648	; 0x80000000
   24770:	cmp	r5, r0
   24774:	str	r0, [r7, #4]
   24778:	bhi	247d8 <__assert_fail@plt+0x121e4>
   2477c:	add	r3, r8, r5
   24780:	cmp	r3, r0
   24784:	bcc	24790 <__assert_fail@plt+0x1219c>
   24788:	mov	r0, #2
   2478c:	pop	{r4, r5, r6, r7, r8, pc}
   24790:	sub	r0, r0, r5
   24794:	sub	r1, r0, r8
   24798:	str	r1, [r7, #4]
   2479c:	lsr	r3, r1, #2
   247a0:	sub	r3, r3, #2
   247a4:	cmp	r3, #0
   247a8:	str	r3, [r7, #16]
   247ac:	beq	24814 <__assert_fail@plt+0x12220>
   247b0:	ldr	r3, [pc, #116]	; 2482c <__assert_fail@plt+0x12238>
   247b4:	mov	r0, #0
   247b8:	str	r1, [r7, #12]
   247bc:	str	r3, [r7, #32]
   247c0:	str	r0, [r7, #20]
   247c4:	str	r0, [r7, #24]
   247c8:	str	r0, [r7, #28]
   247cc:	str	r0, [r7, #36]	; 0x24
   247d0:	str	r0, [r7, #40]	; 0x28
   247d4:	pop	{r4, r5, r6, r7, r8, pc}
   247d8:	mov	r0, #1
   247dc:	pop	{r4, r5, r6, r7, r8, pc}
   247e0:	mov	r3, #4096	; 0x1000
   247e4:	str	r3, [r0, #8]
   247e8:	mov	r0, r4
   247ec:	bl	120cc <sysconf@plt>
   247f0:	cmp	r0, #0
   247f4:	strgt	r0, [r7, #4]
   247f8:	strgt	r4, [r7]
   247fc:	movgt	r5, r4
   24800:	mvnle	r0, #-2147483648	; 0x80000000
   24804:	strle	r4, [r7]
   24808:	movle	r5, r4
   2480c:	strle	r0, [r7, #4]
   24810:	b	2477c <__assert_fail@plt+0x12188>
   24814:	ldr	r3, [pc, #20]	; 24830 <__assert_fail@plt+0x1223c>
   24818:	ldr	r2, [pc, #20]	; 24834 <__assert_fail@plt+0x12240>
   2481c:	ldr	r1, [pc, #20]	; 24838 <__assert_fail@plt+0x12244>
   24820:	ldr	r0, [pc, #20]	; 2483c <__assert_fail@plt+0x12248>
   24824:	bl	125f4 <__assert_fail@plt>
   24828:	andeq	r4, r6, ip, lsr r5
   2482c:	muleq	r2, r4, lr
   24830:			; <UNDEFINED> instruction: 0x00051db4
   24834:	andeq	r0, r0, r6, lsl #4
   24838:	andeq	r1, r5, r8, lsl lr
   2483c:	andeq	r1, r5, r8, lsr pc
   24840:	ldr	r3, [r0, #4]
   24844:	cmp	r3, #131072	; 0x20000
   24848:	bcc	24858 <__assert_fail@plt+0x12264>
   2484c:	ldr	r3, [r0, #8]
   24850:	cmp	r3, #131072	; 0x20000
   24854:	movls	r3, #131072	; 0x20000
   24858:	str	r3, [r0, #12]
   2485c:	bx	lr
   24860:	ldr	r0, [r0, #12]
   24864:	ldr	r3, [pc, #104]	; 248d4 <__assert_fail@plt+0x122e0>
   24868:	push	{r4, r5, r6, lr}
   2486c:	cmp	r0, r3
   24870:	mov	r5, #0
   24874:	str	r5, [r1]
   24878:	str	r5, [r1, #16]
   2487c:	str	r5, [r1, #4]
   24880:	str	r5, [r1, #8]
   24884:	str	r5, [r1, #36]	; 0x24
   24888:	str	r5, [r1, #40]	; 0x28
   2488c:	bhi	248c0 <__assert_fail@plt+0x122cc>
   24890:	add	r0, r0, #1
   24894:	mov	r4, r1
   24898:	mov	r6, r2
   2489c:	bl	3563c <__assert_fail@plt+0x23048>
   248a0:	mvn	r3, #0
   248a4:	str	r5, [r4, #20]
   248a8:	str	r5, [r4, #16]
   248ac:	str	r5, [r4, #28]
   248b0:	str	r6, [r4, #24]
   248b4:	str	r3, [r4, #32]
   248b8:	str	r0, [r4, #12]
   248bc:	pop	{r4, r5, r6, pc}
   248c0:	ldr	r3, [pc, #16]	; 248d8 <__assert_fail@plt+0x122e4>
   248c4:	mov	r2, #572	; 0x23c
   248c8:	ldr	r1, [pc, #12]	; 248dc <__assert_fail@plt+0x122e8>
   248cc:	ldr	r0, [pc, #12]	; 248e0 <__assert_fail@plt+0x122ec>
   248d0:	bl	125f4 <__assert_fail@plt>
   248d4:	svcvc	0x00fff7ff
   248d8:	andeq	r1, r5, r8, asr #27
   248dc:	andeq	r1, r5, r8, lsl lr
   248e0:	andeq	r1, r5, r0, asr pc
   248e4:	ldr	ip, [r0, #28]
   248e8:	ldr	r0, [r1, #20]
   248ec:	mov	r2, #0
   248f0:	mvn	r3, #0
   248f4:	str	ip, [r1]
   248f8:	str	r0, [r1, #16]
   248fc:	str	r2, [r1, #28]
   24900:	str	r3, [r1, #32]
   24904:	bx	lr
   24908:	ldr	r3, [r0]
   2490c:	push	{r4, r5, r6, lr}
   24910:	cmp	r3, #0
   24914:	sub	sp, sp, #16
   24918:	beq	249d8 <__assert_fail@plt+0x123e4>
   2491c:	mov	r4, #0
   24920:	mov	r5, r0
   24924:	mov	r6, r4
   24928:	mov	r0, r3
   2492c:	bl	12300 <strlen@plt>
   24930:	ldr	r3, [r5, #4]!
   24934:	add	r4, r4, #1
   24938:	cmp	r3, #0
   2493c:	add	r6, r6, r0
   24940:	bne	24928 <__assert_fail@plt+0x12334>
   24944:	ldr	r0, [pc, #168]	; 249f4 <__assert_fail@plt+0x12400>
   24948:	bl	12228 <getenv@plt>
   2494c:	cmp	r0, #0
   24950:	beq	24984 <__assert_fail@plt+0x12390>
   24954:	mov	r3, #0
   24958:	str	r3, [sp]
   2495c:	mov	r2, #10
   24960:	add	r3, sp, #12
   24964:	add	r1, sp, #8
   24968:	bl	35d6c <__assert_fail@plt+0x23778>
   2496c:	cmp	r0, #0
   24970:	bne	249ec <__assert_fail@plt+0x123f8>
   24974:	ldr	r3, [sp, #12]
   24978:	cmp	r3, r4
   2497c:	movcc	r0, #1
   24980:	bcc	249c4 <__assert_fail@plt+0x123d0>
   24984:	ldr	r0, [pc, #108]	; 249f8 <__assert_fail@plt+0x12404>
   24988:	bl	12228 <getenv@plt>
   2498c:	subs	r3, r0, #0
   24990:	beq	249cc <__assert_fail@plt+0x123d8>
   24994:	mov	r3, #0
   24998:	str	r3, [sp]
   2499c:	mov	r2, #10
   249a0:	add	r3, sp, #12
   249a4:	add	r1, sp, #8
   249a8:	bl	35d6c <__assert_fail@plt+0x23778>
   249ac:	cmp	r0, #0
   249b0:	bne	249e4 <__assert_fail@plt+0x123f0>
   249b4:	ldr	r0, [sp, #12]
   249b8:	cmp	r0, r6
   249bc:	movcs	r0, #0
   249c0:	movcc	r0, #1
   249c4:	add	sp, sp, #16
   249c8:	pop	{r4, r5, r6, pc}
   249cc:	mov	r0, r3
   249d0:	add	sp, sp, #16
   249d4:	pop	{r4, r5, r6, pc}
   249d8:	mov	r4, r3
   249dc:	mov	r6, r3
   249e0:	b	24944 <__assert_fail@plt+0x12350>
   249e4:	ldr	r0, [pc, #12]	; 249f8 <__assert_fail@plt+0x12404>
   249e8:	bl	126e4 <__assert_fail@plt+0xf0>
   249ec:	ldr	r0, [pc]	; 249f4 <__assert_fail@plt+0x12400>
   249f0:	bl	126e4 <__assert_fail@plt+0xf0>
   249f4:	andeq	r1, r5, r4, ror pc
   249f8:	muleq	r5, ip, pc	; <UNPREDICTABLE>
   249fc:	push	{r4, r5, r6, lr}
   24a00:	sub	sp, sp, #8
   24a04:	mov	r6, r0
   24a08:	mov	r0, sp
   24a0c:	mov	r4, r1
   24a10:	mov	r5, r2
   24a14:	bl	344c0 <__assert_fail@plt+0x21ecc>
   24a18:	cmp	r0, #0
   24a1c:	bne	24aa8 <__assert_fail@plt+0x124b4>
   24a20:	mov	r0, r6
   24a24:	bl	34514 <__assert_fail@plt+0x21f20>
   24a28:	cmp	r0, #0
   24a2c:	bne	24a64 <__assert_fail@plt+0x12470>
   24a30:	mov	r0, r5
   24a34:	blx	r4
   24a38:	subs	r4, r0, #0
   24a3c:	blt	24a70 <__assert_fail@plt+0x1247c>
   24a40:	mov	r0, sp
   24a44:	bl	34514 <__assert_fail@plt+0x21f20>
   24a48:	cmp	r0, #0
   24a4c:	bne	24a64 <__assert_fail@plt+0x12470>
   24a50:	mov	r0, sp
   24a54:	bl	34530 <__assert_fail@plt+0x21f3c>
   24a58:	mov	r0, r4
   24a5c:	add	sp, sp, #8
   24a60:	pop	{r4, r5, r6, pc}
   24a64:	bl	12348 <__errno_location@plt>
   24a68:	ldr	r0, [r0]
   24a6c:	bl	2bb20 <__assert_fail@plt+0x1952c>
   24a70:	bl	12348 <__errno_location@plt>
   24a74:	mov	r6, r0
   24a78:	mov	r0, sp
   24a7c:	ldr	r5, [r6]
   24a80:	bl	34514 <__assert_fail@plt+0x21f20>
   24a84:	cmp	r0, #0
   24a88:	bne	24a64 <__assert_fail@plt+0x12470>
   24a8c:	mov	r0, sp
   24a90:	bl	34530 <__assert_fail@plt+0x21f3c>
   24a94:	cmp	r5, #0
   24a98:	mov	r0, r4
   24a9c:	strne	r5, [r6]
   24aa0:	add	sp, sp, #8
   24aa4:	pop	{r4, r5, r6, pc}
   24aa8:	bl	12348 <__errno_location@plt>
   24aac:	ldr	r0, [r0]
   24ab0:	bl	2bae4 <__assert_fail@plt+0x194f0>
   24ab4:	cmn	r0, #100	; 0x64
   24ab8:	push	{r4, r5, r6, lr}
   24abc:	mov	r5, r1
   24ac0:	sub	sp, sp, #8
   24ac4:	mov	r6, r2
   24ac8:	beq	24b4c <__assert_fail@plt+0x12558>
   24acc:	mov	r4, r0
   24ad0:	mov	r0, sp
   24ad4:	bl	344c0 <__assert_fail@plt+0x21ecc>
   24ad8:	cmp	r0, #0
   24adc:	bne	24bac <__assert_fail@plt+0x125b8>
   24ae0:	mov	r0, r4
   24ae4:	bl	124f8 <fchdir@plt>
   24ae8:	cmp	r0, #0
   24aec:	bne	24b24 <__assert_fail@plt+0x12530>
   24af0:	mov	r0, r6
   24af4:	blx	r5
   24af8:	subs	r4, r0, #0
   24afc:	blt	24b64 <__assert_fail@plt+0x12570>
   24b00:	mov	r0, sp
   24b04:	bl	34514 <__assert_fail@plt+0x21f20>
   24b08:	cmp	r0, #0
   24b0c:	bne	24ba0 <__assert_fail@plt+0x125ac>
   24b10:	mov	r0, sp
   24b14:	bl	34530 <__assert_fail@plt+0x21f3c>
   24b18:	mov	r0, r4
   24b1c:	add	sp, sp, #8
   24b20:	pop	{r4, r5, r6, pc}
   24b24:	bl	12348 <__errno_location@plt>
   24b28:	mvn	r4, #0
   24b2c:	mov	r5, r0
   24b30:	mov	r0, sp
   24b34:	ldr	r6, [r5]
   24b38:	bl	34530 <__assert_fail@plt+0x21f3c>
   24b3c:	mov	r0, r4
   24b40:	str	r6, [r5]
   24b44:	add	sp, sp, #8
   24b48:	pop	{r4, r5, r6, pc}
   24b4c:	mov	r0, r2
   24b50:	blx	r1
   24b54:	mov	r4, r0
   24b58:	mov	r0, r4
   24b5c:	add	sp, sp, #8
   24b60:	pop	{r4, r5, r6, pc}
   24b64:	bl	12348 <__errno_location@plt>
   24b68:	mov	r6, r0
   24b6c:	mov	r0, sp
   24b70:	ldr	r5, [r6]
   24b74:	bl	34514 <__assert_fail@plt+0x21f20>
   24b78:	cmp	r0, #0
   24b7c:	bne	24ba0 <__assert_fail@plt+0x125ac>
   24b80:	mov	r0, sp
   24b84:	bl	34530 <__assert_fail@plt+0x21f3c>
   24b88:	cmp	r5, #0
   24b8c:	beq	24b18 <__assert_fail@plt+0x12524>
   24b90:	mov	r0, r4
   24b94:	str	r5, [r6]
   24b98:	add	sp, sp, #8
   24b9c:	pop	{r4, r5, r6, pc}
   24ba0:	bl	12348 <__errno_location@plt>
   24ba4:	ldr	r0, [r0]
   24ba8:	bl	2bb20 <__assert_fail@plt+0x1952c>
   24bac:	bl	12348 <__errno_location@plt>
   24bb0:	ldr	r0, [r0]
   24bb4:	bl	2bae4 <__assert_fail@plt+0x194f0>
   24bb8:	push	{r4, r5, r6, r7, r8, lr}
   24bbc:	mov	r4, r1
   24bc0:	mov	r5, r0
   24bc4:	mov	r7, r2
   24bc8:	bl	12348 <__errno_location@plt>
   24bcc:	cmp	r4, #0
   24bd0:	ldr	r8, [r0]
   24bd4:	beq	24c94 <__assert_fail@plt+0x126a0>
   24bd8:	ldr	r1, [r7]
   24bdc:	mov	r6, r0
   24be0:	cmp	r1, #0
   24be4:	bne	24c3c <__assert_fail@plt+0x12648>
   24be8:	cmp	r4, #16
   24bec:	movls	r0, #16
   24bf0:	bls	24c1c <__assert_fail@plt+0x12628>
   24bf4:	mov	r0, #32
   24bf8:	b	24c0c <__assert_fail@plt+0x12618>
   24bfc:	lsl	r3, r0, #1
   24c00:	cmp	r3, r0
   24c04:	bcc	24c60 <__assert_fail@plt+0x1266c>
   24c08:	mov	r0, r3
   24c0c:	cmp	r4, r0
   24c10:	bhi	24bfc <__assert_fail@plt+0x12608>
   24c14:	cmp	r1, #0
   24c18:	bne	24c6c <__assert_fail@plt+0x12678>
   24c1c:	cmp	r5, #0
   24c20:	bne	24ca8 <__assert_fail@plt+0x126b4>
   24c24:	str	r0, [r7]
   24c28:	bl	3a010 <__assert_fail@plt+0x27a1c>
   24c2c:	cmp	r0, #0
   24c30:	beq	24c8c <__assert_fail@plt+0x12698>
   24c34:	str	r8, [r6]
   24c38:	pop	{r4, r5, r6, r7, r8, pc}
   24c3c:	cmp	r4, r1
   24c40:	bls	24c58 <__assert_fail@plt+0x12664>
   24c44:	lsl	r0, r1, #1
   24c48:	cmp	r1, r0
   24c4c:	bls	24c0c <__assert_fail@plt+0x12618>
   24c50:	mov	r0, r4
   24c54:	b	24c74 <__assert_fail@plt+0x12680>
   24c58:	mov	r0, r5
   24c5c:	b	24c2c <__assert_fail@plt+0x12638>
   24c60:	cmp	r1, #0
   24c64:	mov	r0, r4
   24c68:	beq	24c1c <__assert_fail@plt+0x12628>
   24c6c:	cmp	r1, r0
   24c70:	beq	24c58 <__assert_fail@plt+0x12664>
   24c74:	str	r0, [r7]
   24c78:	mov	r1, r0
   24c7c:	mov	r0, r5
   24c80:	bl	3aacc <__assert_fail@plt+0x284d8>
   24c84:	cmp	r0, #0
   24c88:	bne	24c34 <__assert_fail@plt+0x12640>
   24c8c:	mov	r0, #0
   24c90:	pop	{r4, r5, r6, r7, r8, pc}
   24c94:	ldr	r3, [pc, #32]	; 24cbc <__assert_fail@plt+0x126c8>
   24c98:	mov	r2, #71	; 0x47
   24c9c:	ldr	r1, [pc, #28]	; 24cc0 <__assert_fail@plt+0x126cc>
   24ca0:	ldr	r0, [pc, #28]	; 24cc4 <__assert_fail@plt+0x126d0>
   24ca4:	bl	125f4 <__assert_fail@plt>
   24ca8:	ldr	r3, [pc, #12]	; 24cbc <__assert_fail@plt+0x126c8>
   24cac:	mov	r2, #79	; 0x4f
   24cb0:	ldr	r1, [pc, #8]	; 24cc0 <__assert_fail@plt+0x126cc>
   24cb4:	ldr	r0, [pc, #12]	; 24cc8 <__assert_fail@plt+0x126d4>
   24cb8:	bl	125f4 <__assert_fail@plt>
   24cbc:	andeq	r1, r5, r4, asr #31
   24cc0:	ldrdeq	r1, [r5], -r0
   24cc4:	ldrdeq	r1, [r5], -ip
   24cc8:	andeq	r1, r5, r8, ror #31
   24ccc:	push	{r4, r5, r6, r7, r8, lr}
   24cd0:	mov	r4, r1
   24cd4:	mov	r7, r0
   24cd8:	mov	r6, r2
   24cdc:	bl	12348 <__errno_location@plt>
   24ce0:	cmp	r4, #0
   24ce4:	ldr	r8, [r0]
   24ce8:	beq	24dac <__assert_fail@plt+0x127b8>
   24cec:	ldr	r1, [r6]
   24cf0:	mov	r5, r0
   24cf4:	cmp	r1, #0
   24cf8:	bne	24d50 <__assert_fail@plt+0x1275c>
   24cfc:	cmp	r4, #16
   24d00:	movls	r0, #16
   24d04:	bls	24d30 <__assert_fail@plt+0x1273c>
   24d08:	mov	r0, #32
   24d0c:	b	24d20 <__assert_fail@plt+0x1272c>
   24d10:	lsl	r3, r0, #1
   24d14:	cmp	r3, r0
   24d18:	bcc	24d74 <__assert_fail@plt+0x12780>
   24d1c:	mov	r0, r3
   24d20:	cmp	r4, r0
   24d24:	bhi	24d10 <__assert_fail@plt+0x1271c>
   24d28:	cmp	r1, #0
   24d2c:	bne	24d80 <__assert_fail@plt+0x1278c>
   24d30:	cmp	r7, #0
   24d34:	bne	24dc0 <__assert_fail@plt+0x127cc>
   24d38:	str	r0, [r6]
   24d3c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   24d40:	cmp	r0, #0
   24d44:	beq	24da0 <__assert_fail@plt+0x127ac>
   24d48:	str	r8, [r5]
   24d4c:	pop	{r4, r5, r6, r7, r8, pc}
   24d50:	cmp	r4, r1
   24d54:	bls	24d6c <__assert_fail@plt+0x12778>
   24d58:	lsl	r0, r1, #1
   24d5c:	cmp	r1, r0
   24d60:	bls	24d20 <__assert_fail@plt+0x1272c>
   24d64:	mov	r0, r4
   24d68:	b	24d88 <__assert_fail@plt+0x12794>
   24d6c:	mov	r0, r7
   24d70:	b	24d40 <__assert_fail@plt+0x1274c>
   24d74:	cmp	r1, #0
   24d78:	mov	r0, r4
   24d7c:	beq	24d30 <__assert_fail@plt+0x1273c>
   24d80:	cmp	r1, r0
   24d84:	beq	24d6c <__assert_fail@plt+0x12778>
   24d88:	str	r0, [r6]
   24d8c:	mov	r1, r0
   24d90:	mov	r0, r7
   24d94:	bl	3aacc <__assert_fail@plt+0x284d8>
   24d98:	cmp	r0, #0
   24d9c:	bne	24d48 <__assert_fail@plt+0x12754>
   24da0:	mov	r0, r7
   24da4:	bl	376d0 <__assert_fail@plt+0x250dc>
   24da8:	bl	35c84 <__assert_fail@plt+0x23690>
   24dac:	ldr	r3, [pc, #32]	; 24dd4 <__assert_fail@plt+0x127e0>
   24db0:	mov	r2, #71	; 0x47
   24db4:	ldr	r1, [pc, #28]	; 24dd8 <__assert_fail@plt+0x127e4>
   24db8:	ldr	r0, [pc, #28]	; 24ddc <__assert_fail@plt+0x127e8>
   24dbc:	bl	125f4 <__assert_fail@plt>
   24dc0:	ldr	r3, [pc, #12]	; 24dd4 <__assert_fail@plt+0x127e0>
   24dc4:	mov	r2, #79	; 0x4f
   24dc8:	ldr	r1, [pc, #8]	; 24dd8 <__assert_fail@plt+0x127e4>
   24dcc:	ldr	r0, [pc, #12]	; 24de0 <__assert_fail@plt+0x127ec>
   24dd0:	bl	125f4 <__assert_fail@plt>
   24dd4:	andeq	r1, r5, r4, asr #31
   24dd8:	ldrdeq	r1, [r5], -r0
   24ddc:	ldrdeq	r1, [r5], -ip
   24de0:	andeq	r1, r5, r8, ror #31
   24de4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24de8:	ldr	r0, [pc, #212]	; 24ec4 <__assert_fail@plt+0x128d0>
   24dec:	bl	26bf4 <__assert_fail@plt+0x14600>
   24df0:	subs	r8, r0, #0
   24df4:	beq	24ebc <__assert_fail@plt+0x128c8>
   24df8:	bl	12348 <__errno_location@plt>
   24dfc:	mov	r9, #0
   24e00:	mov	r5, r9
   24e04:	mvn	r6, #0
   24e08:	mov	sl, #1
   24e0c:	mov	r7, r0
   24e10:	str	r5, [r7]
   24e14:	mov	r0, r8
   24e18:	bl	124bc <readdir64@plt>
   24e1c:	mov	r1, r5
   24e20:	subs	r4, r0, #0
   24e24:	beq	24e64 <__assert_fail@plt+0x12870>
   24e28:	ldrb	r3, [r4, #19]
   24e2c:	add	r0, r4, #19
   24e30:	cmp	r3, #46	; 0x2e
   24e34:	bne	24e50 <__assert_fail@plt+0x1285c>
   24e38:	ldrb	r3, [r4, #20]
   24e3c:	cmp	r3, #0
   24e40:	beq	24e10 <__assert_fail@plt+0x1281c>
   24e44:	ldrh	r3, [r4, #20]
   24e48:	cmp	r3, #46	; 0x2e
   24e4c:	beq	24e10 <__assert_fail@plt+0x1281c>
   24e50:	bl	26544 <__assert_fail@plt+0x13f50>
   24e54:	mov	r9, sl
   24e58:	cmp	r6, r0
   24e5c:	movlt	r6, r0
   24e60:	b	24e10 <__assert_fail@plt+0x1281c>
   24e64:	ldr	r5, [r7]
   24e68:	cmp	r5, #0
   24e6c:	bne	24e88 <__assert_fail@plt+0x12894>
   24e70:	mov	r0, r8
   24e74:	bl	125c4 <closedir@plt>
   24e78:	cmp	r9, #0
   24e7c:	beq	24ebc <__assert_fail@plt+0x128c8>
   24e80:	mov	r0, r6
   24e84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24e88:	ldr	r2, [pc, #52]	; 24ec4 <__assert_fail@plt+0x128d0>
   24e8c:	mov	r1, #8
   24e90:	bl	325f0 <__assert_fail@plt+0x1fffc>
   24e94:	mov	r1, r5
   24e98:	ldr	r2, [pc, #40]	; 24ec8 <__assert_fail@plt+0x128d4>
   24e9c:	mvn	r6, #0
   24ea0:	mov	r3, r0
   24ea4:	mov	r0, r4
   24ea8:	bl	121ec <error@plt>
   24eac:	mov	r0, r8
   24eb0:	bl	125c4 <closedir@plt>
   24eb4:	mov	r0, r6
   24eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24ebc:	mvn	r6, #0
   24ec0:	b	24e80 <__assert_fail@plt+0x1288c>
   24ec4:	andeq	r2, r5, r8, lsl r0
   24ec8:	andeq	r2, r5, r4, asr #9
   24ecc:	push	{r4, r5, r6, lr}
   24ed0:	mov	r4, r1
   24ed4:	mov	r1, #1
   24ed8:	mov	r6, r0
   24edc:	bl	3749c <__assert_fail@plt+0x24ea8>
   24ee0:	ands	r5, r0, #1
   24ee4:	movne	r5, #0
   24ee8:	bne	24f24 <__assert_fail@plt+0x12930>
   24eec:	ldr	r1, [r4, #4]
   24ef0:	add	r2, r4, #8
   24ef4:	add	r1, r1, #1
   24ef8:	ldr	r0, [r4]
   24efc:	lsl	r1, r1, #2
   24f00:	bl	24bb8 <__assert_fail@plt+0x125c4>
   24f04:	cmp	r0, #0
   24f08:	strne	r0, [r4]
   24f0c:	ldrne	r3, [r4, #4]
   24f10:	mvneq	r5, #0
   24f14:	strne	r6, [r0, r3, lsl #2]
   24f18:	ldrne	r3, [r4, #4]
   24f1c:	addne	r3, r3, #1
   24f20:	strne	r3, [r4, #4]
   24f24:	mov	r0, r5
   24f28:	pop	{r4, r5, r6, pc}
   24f2c:	push	{r4, r5, r6, lr}
   24f30:	mov	r4, r1
   24f34:	mov	r1, #1
   24f38:	mov	r5, r0
   24f3c:	bl	3749c <__assert_fail@plt+0x24ea8>
   24f40:	tst	r0, #1
   24f44:	bne	24fa0 <__assert_fail@plt+0x129ac>
   24f48:	ldmib	r4, {r0, r3}
   24f4c:	cmp	r3, r0
   24f50:	bcs	24f8c <__assert_fail@plt+0x12998>
   24f54:	ldr	r1, [r4]
   24f58:	add	r2, r1, r3, lsl #2
   24f5c:	ldr	r1, [r1, r3, lsl #2]
   24f60:	cmp	r5, r1
   24f64:	ble	24f98 <__assert_fail@plt+0x129a4>
   24f68:	add	r3, r3, #1
   24f6c:	b	24f80 <__assert_fail@plt+0x1298c>
   24f70:	ldr	r1, [r2, #4]!
   24f74:	add	r3, r3, #1
   24f78:	cmp	r5, r1
   24f7c:	ble	24f98 <__assert_fail@plt+0x129a4>
   24f80:	cmp	r0, r3
   24f84:	str	r3, [r4, #8]
   24f88:	bne	24f70 <__assert_fail@plt+0x1297c>
   24f8c:	mvn	r0, #0
   24f90:	str	r5, [r4, #12]
   24f94:	pop	{r4, r5, r6, pc}
   24f98:	cmp	r5, r1
   24f9c:	bne	24f8c <__assert_fail@plt+0x12998>
   24fa0:	mov	r0, #0
   24fa4:	pop	{r4, r5, r6, pc}
   24fa8:	cmp	r0, #0
   24fac:	ble	25104 <__assert_fail@plt+0x12b10>
   24fb0:	mov	r3, #0
   24fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fb8:	mov	r2, r0
   24fbc:	sub	sp, sp, #524	; 0x20c
   24fc0:	mov	fp, r1
   24fc4:	mov	r5, r3
   24fc8:	mov	r6, #5
   24fcc:	mov	r9, #1
   24fd0:	str	r0, [sp, #4]
   24fd4:	str	r3, [sp]
   24fd8:	sub	r8, r2, r3
   24fdc:	cmp	r8, #64	; 0x40
   24fe0:	movge	r8, #64	; 0x40
   24fe4:	cmp	r8, #0
   24fe8:	ble	250e0 <__assert_fail@plt+0x12aec>
   24fec:	add	r7, sp, #8
   24ff0:	mov	r2, r3
   24ff4:	add	r1, r7, r8, lsl #3
   24ff8:	mov	r4, r7
   24ffc:	strh	r6, [r4, #4]
   25000:	strh	r5, [r4, #6]
   25004:	str	r2, [r4], #8
   25008:	cmp	r4, r1
   2500c:	add	r2, r2, #1
   25010:	bne	24ffc <__assert_fail@plt+0x12a08>
   25014:	mov	r2, r5
   25018:	mov	r1, r8
   2501c:	add	r0, sp, #8
   25020:	bl	12150 <poll@plt>
   25024:	cmn	r0, #1
   25028:	beq	250f8 <__assert_fail@plt+0x12b04>
   2502c:	ldrsh	r2, [r7, #6]
   25030:	cmp	r2, #32
   25034:	beq	250b0 <__assert_fail@plt+0x12abc>
   25038:	ldr	sl, [r7]
   2503c:	mov	r1, r9
   25040:	mov	r0, sl
   25044:	bl	3749c <__assert_fail@plt+0x24ea8>
   25048:	tst	r0, #1
   2504c:	bne	250b0 <__assert_fail@plt+0x12abc>
   25050:	ldr	r1, [fp, #8]
   25054:	ldr	lr, [fp, #4]
   25058:	cmp	lr, r1
   2505c:	bls	25098 <__assert_fail@plt+0x12aa4>
   25060:	ldr	ip, [fp]
   25064:	add	r0, ip, r1, lsl #2
   25068:	ldr	ip, [ip, r1, lsl #2]
   2506c:	cmp	sl, ip
   25070:	ble	250a8 <__assert_fail@plt+0x12ab4>
   25074:	add	r1, r1, #1
   25078:	b	2508c <__assert_fail@plt+0x12a98>
   2507c:	ldr	ip, [r0, #4]!
   25080:	add	r1, r1, #1
   25084:	cmp	sl, ip
   25088:	ble	250a8 <__assert_fail@plt+0x12ab4>
   2508c:	cmp	lr, r1
   25090:	str	r1, [fp, #8]
   25094:	bne	2507c <__assert_fail@plt+0x12a88>
   25098:	mvn	r0, #0
   2509c:	str	sl, [fp, #12]
   250a0:	add	sp, sp, #524	; 0x20c
   250a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250a8:	cmp	sl, ip
   250ac:	bne	25098 <__assert_fail@plt+0x12aa4>
   250b0:	add	r7, r7, #8
   250b4:	cmp	r7, r4
   250b8:	bne	2502c <__assert_fail@plt+0x12a38>
   250bc:	ldr	r3, [sp]
   250c0:	ldr	r2, [sp, #4]
   250c4:	add	r3, r3, r8
   250c8:	cmp	r2, r3
   250cc:	str	r3, [sp]
   250d0:	bgt	24fd8 <__assert_fail@plt+0x129e4>
   250d4:	mov	r0, #0
   250d8:	add	sp, sp, #524	; 0x20c
   250dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250e0:	mov	r2, r5
   250e4:	mov	r1, r8
   250e8:	add	r0, sp, #8
   250ec:	bl	12150 <poll@plt>
   250f0:	cmn	r0, #1
   250f4:	bne	250bc <__assert_fail@plt+0x12ac8>
   250f8:	mvn	r0, #0
   250fc:	add	sp, sp, #524	; 0x20c
   25100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25104:	mov	r0, #0
   25108:	bx	lr
   2510c:	cmp	r0, #0
   25110:	ble	25274 <__assert_fail@plt+0x12c80>
   25114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25118:	sub	sp, sp, #532	; 0x214
   2511c:	mov	r3, #0
   25120:	str	r3, [sp, #8]
   25124:	mov	r5, r3
   25128:	add	r3, r1, #8
   2512c:	str	r3, [sp, #4]
   25130:	ldr	r3, [sp, #8]
   25134:	mov	fp, r1
   25138:	mov	r6, #5
   2513c:	mov	r9, #1
   25140:	mov	r2, r0
   25144:	str	r0, [sp, #12]
   25148:	sub	sl, r2, r3
   2514c:	cmp	sl, #64	; 0x40
   25150:	movge	sl, #64	; 0x40
   25154:	cmp	sl, #0
   25158:	ble	25250 <__assert_fail@plt+0x12c5c>
   2515c:	add	r7, sp, #16
   25160:	mov	r2, r3
   25164:	add	r1, r7, sl, lsl #3
   25168:	mov	r4, r7
   2516c:	strh	r6, [r4, #4]
   25170:	strh	r5, [r4, #6]
   25174:	str	r2, [r4], #8
   25178:	cmp	r4, r1
   2517c:	add	r2, r2, #1
   25180:	bne	2516c <__assert_fail@plt+0x12b78>
   25184:	mov	r2, r5
   25188:	mov	r1, sl
   2518c:	add	r0, sp, #16
   25190:	bl	12150 <poll@plt>
   25194:	cmn	r0, #1
   25198:	beq	25268 <__assert_fail@plt+0x12c74>
   2519c:	mov	r3, fp
   251a0:	mov	fp, sl
   251a4:	mov	sl, r3
   251a8:	b	251b8 <__assert_fail@plt+0x12bc4>
   251ac:	add	r7, r7, #8
   251b0:	cmp	r4, r7
   251b4:	beq	25220 <__assert_fail@plt+0x12c2c>
   251b8:	ldrsh	r2, [r7, #6]
   251bc:	mov	r1, r9
   251c0:	cmp	r2, #32
   251c4:	beq	251ac <__assert_fail@plt+0x12bb8>
   251c8:	ldr	r8, [r7]
   251cc:	mov	r0, r8
   251d0:	bl	3749c <__assert_fail@plt+0x24ea8>
   251d4:	tst	r0, #1
   251d8:	bne	251ac <__assert_fail@plt+0x12bb8>
   251dc:	ldr	r1, [sl, #4]
   251e0:	ldr	r2, [sp, #4]
   251e4:	add	r1, r1, #1
   251e8:	ldr	r0, [sl]
   251ec:	lsl	r1, r1, #2
   251f0:	bl	24bb8 <__assert_fail@plt+0x125c4>
   251f4:	cmp	r0, #0
   251f8:	beq	25268 <__assert_fail@plt+0x12c74>
   251fc:	ldr	r2, [sl, #4]
   25200:	str	r0, [sl]
   25204:	add	r7, r7, #8
   25208:	str	r8, [r0, r2, lsl #2]
   2520c:	ldr	r2, [sl, #4]
   25210:	cmp	r4, r7
   25214:	add	r2, r2, #1
   25218:	str	r2, [sl, #4]
   2521c:	bne	251b8 <__assert_fail@plt+0x12bc4>
   25220:	mov	r3, sl
   25224:	mov	sl, fp
   25228:	mov	fp, r3
   2522c:	ldr	r3, [sp, #8]
   25230:	ldr	r2, [sp, #12]
   25234:	add	r3, r3, sl
   25238:	cmp	r2, r3
   2523c:	str	r3, [sp, #8]
   25240:	bgt	25148 <__assert_fail@plt+0x12b54>
   25244:	mov	r0, #0
   25248:	add	sp, sp, #532	; 0x214
   2524c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25250:	mov	r2, r5
   25254:	mov	r1, sl
   25258:	add	r0, sp, #16
   2525c:	bl	12150 <poll@plt>
   25260:	cmn	r0, #1
   25264:	bne	2522c <__assert_fail@plt+0x12c38>
   25268:	mvn	r0, #0
   2526c:	add	sp, sp, #532	; 0x214
   25270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25274:	mov	r0, #0
   25278:	bx	lr
   2527c:	push	{r4, r5, lr}
   25280:	sub	sp, sp, #20
   25284:	bl	24de4 <__assert_fail@plt+0x127f0>
   25288:	cmp	r0, #0
   2528c:	movge	r5, sp
   25290:	blt	252c8 <__assert_fail@plt+0x12cd4>
   25294:	cmn	r0, #-2147483647	; 0x80000001
   25298:	mov	r3, #0
   2529c:	mov	r1, r5
   252a0:	addne	r0, r0, #1
   252a4:	str	r3, [sp]
   252a8:	str	r3, [sp, #8]
   252ac:	str	r3, [sp, #4]
   252b0:	bl	2510c <__assert_fail@plt+0x12b18>
   252b4:	ldr	r3, [pc, #88]	; 25314 <__assert_fail@plt+0x12d20>
   252b8:	ldm	sp, {r1, r2}
   252bc:	stm	r3, {r1, r2}
   252c0:	add	sp, sp, #20
   252c4:	pop	{r4, r5, pc}
   252c8:	mov	r0, #4
   252cc:	bl	120cc <sysconf@plt>
   252d0:	mov	r1, sp
   252d4:	mov	r5, sp
   252d8:	cmn	r0, #1
   252dc:	movne	r4, r0
   252e0:	mov	r0, #7
   252e4:	moveq	r4, #20
   252e8:	bl	120d8 <getrlimit64@plt>
   252ec:	cmp	r0, #0
   252f0:	movne	r0, r4
   252f4:	bne	25294 <__assert_fail@plt+0x12ca0>
   252f8:	ldrd	r0, [sp]
   252fc:	mvn	r3, #0
   25300:	mvn	r2, #0
   25304:	cmp	r1, r3
   25308:	cmpeq	r0, r2
   2530c:	moveq	r0, r4
   25310:	b	25294 <__assert_fail@plt+0x12ca0>
   25314:	andeq	r4, r6, r0, ror #25
   25318:	push	{r1, r2, r3}
   2531c:	push	{r4, r5, r6, r7, r8, r9, lr}
   25320:	sub	sp, sp, #8
   25324:	ldr	r6, [pc, #156]	; 253c8 <__assert_fail@plt+0x12dd4>
   25328:	ldr	r4, [sp, #36]	; 0x24
   2532c:	mov	r8, r0
   25330:	ldrb	r7, [r6, #8]
   25334:	ands	r5, r4, #64	; 0x40
   25338:	addne	r3, sp, #40	; 0x28
   2533c:	strne	r3, [sp, #4]
   25340:	ldrne	r5, [sp, #40]	; 0x28
   25344:	cmp	r7, #0
   25348:	beq	25390 <__assert_fail@plt+0x12d9c>
   2534c:	orr	r1, r4, #524288	; 0x80000
   25350:	mov	r2, r5
   25354:	mov	r0, r8
   25358:	bl	26e80 <__assert_fail@plt+0x1488c>
   2535c:	subs	r4, r0, #0
   25360:	blt	25370 <__assert_fail@plt+0x12d7c>
   25364:	ldrb	r3, [r6, #9]
   25368:	cmp	r3, #0
   2536c:	beq	25384 <__assert_fail@plt+0x12d90>
   25370:	mov	r0, r4
   25374:	add	sp, sp, #8
   25378:	pop	{r4, r5, r6, r7, r8, r9, lr}
   2537c:	add	sp, sp, #12
   25380:	bx	lr
   25384:	mov	r1, #1
   25388:	bl	26a7c <__assert_fail@plt+0x14488>
   2538c:	b	25370 <__assert_fail@plt+0x12d7c>
   25390:	mov	r1, #524288	; 0x80000
   25394:	ldr	r0, [pc, #48]	; 253cc <__assert_fail@plt+0x12dd8>
   25398:	bl	26e80 <__assert_fail@plt+0x1488c>
   2539c:	subs	r9, r0, #0
   253a0:	blt	253b8 <__assert_fail@plt+0x12dc4>
   253a4:	mov	r1, #1
   253a8:	bl	3749c <__assert_fail@plt+0x24ea8>
   253ac:	and	r7, r0, #1
   253b0:	mov	r0, r9
   253b4:	bl	125ac <close@plt>
   253b8:	mov	r3, #1
   253bc:	strb	r7, [r6, #9]
   253c0:	strb	r3, [r6, #8]
   253c4:	b	2534c <__assert_fail@plt+0x12d58>
   253c8:	andeq	r4, r6, r0, ror #25
   253cc:	andeq	r3, r5, r4, lsl #27
   253d0:	push	{r4, lr}
   253d4:	ldr	r4, [pc, #20]	; 253f0 <__assert_fail@plt+0x12dfc>
   253d8:	ldr	r0, [r4]
   253dc:	bl	376d0 <__assert_fail@plt+0x250dc>
   253e0:	mov	r3, #0
   253e4:	str	r3, [r4]
   253e8:	str	r3, [r4, #4]
   253ec:	pop	{r4, pc}
   253f0:	andeq	r4, r6, r0, ror #25
   253f4:	push	{r4, lr}
   253f8:	ldr	r0, [pc, #12]	; 2540c <__assert_fail@plt+0x12e18>
   253fc:	bl	12228 <getenv@plt>
   25400:	adds	r0, r0, #0
   25404:	movne	r0, #1
   25408:	pop	{r4, pc}
   2540c:	andeq	r2, r5, r8, lsr #32
   25410:	ldr	r3, [pc, #212]	; 254ec <__assert_fail@plt+0x12ef8>
   25414:	push	{r4, r5, r6, r7, lr}
   25418:	sub	sp, sp, #20
   2541c:	ldm	r3, {r6, r7}
   25420:	bl	24de4 <__assert_fail@plt+0x127f0>
   25424:	cmp	r0, #0
   25428:	movge	r5, sp
   2542c:	blt	254a0 <__assert_fail@plt+0x12eac>
   25430:	cmn	r0, #-2147483647	; 0x80000001
   25434:	addne	r0, r0, #1
   25438:	mov	r1, r5
   2543c:	mov	r4, #0
   25440:	mvn	r3, #0
   25444:	stm	sp, {r6, r7}
   25448:	str	r4, [sp, #8]
   2544c:	str	r3, [sp, #12]
   25450:	bl	24fa8 <__assert_fail@plt+0x129b4>
   25454:	ldr	r5, [sp, #12]
   25458:	cmp	r5, r4
   2545c:	blt	25498 <__assert_fail@plt+0x12ea4>
   25460:	mov	r2, #5
   25464:	ldr	r1, [pc, #132]	; 254f0 <__assert_fail@plt+0x12efc>
   25468:	mov	r0, r4
   2546c:	bl	120b4 <dcgettext@plt>
   25470:	mov	r3, r5
   25474:	mov	r1, r4
   25478:	mov	r2, r0
   2547c:	mov	r0, r4
   25480:	bl	121ec <error@plt>
   25484:	ldr	r3, [pc, #104]	; 254f4 <__assert_fail@plt+0x12f00>
   25488:	mov	r2, #396	; 0x18c
   2548c:	ldr	r1, [pc, #100]	; 254f8 <__assert_fail@plt+0x12f04>
   25490:	ldr	r0, [pc, #100]	; 254fc <__assert_fail@plt+0x12f08>
   25494:	bl	125f4 <__assert_fail@plt>
   25498:	add	sp, sp, #20
   2549c:	pop	{r4, r5, r6, r7, pc}
   254a0:	mov	r0, #4
   254a4:	bl	120cc <sysconf@plt>
   254a8:	mov	r1, sp
   254ac:	mov	r5, sp
   254b0:	cmn	r0, #1
   254b4:	movne	r4, r0
   254b8:	mov	r0, #7
   254bc:	moveq	r4, #20
   254c0:	bl	120d8 <getrlimit64@plt>
   254c4:	cmp	r0, #0
   254c8:	movne	r0, r4
   254cc:	bne	25430 <__assert_fail@plt+0x12e3c>
   254d0:	ldrd	r0, [sp]
   254d4:	mvn	r3, #0
   254d8:	mvn	r2, #0
   254dc:	cmp	r1, r3
   254e0:	cmpeq	r0, r2
   254e4:	moveq	r0, r4
   254e8:	b	25430 <__assert_fail@plt+0x12e3c>
   254ec:	andeq	r4, r6, r0, ror #25
   254f0:	andeq	r2, r5, r4, asr #32
   254f4:	strdeq	r1, [r5], -ip
   254f8:	ldrdeq	r2, [r5], -ip
   254fc:	andeq	r2, r5, r8, ror #1
   25500:	ldr	r3, [pc, #136]	; 25590 <__assert_fail@plt+0x12f9c>
   25504:	push	{r4, r5, r6, r7, r8, lr}
   25508:	mov	r5, r0
   2550c:	sub	sp, sp, #16
   25510:	ldr	r0, [r3]
   25514:	bl	37670 <__assert_fail@plt+0x2507c>
   25518:	ldr	ip, [pc, #116]	; 25594 <__assert_fail@plt+0x12fa0>
   2551c:	ldr	r3, [pc, #116]	; 25598 <__assert_fail@plt+0x12fa4>
   25520:	mov	r2, #5
   25524:	ldr	r1, [pc, #112]	; 2559c <__assert_fail@plt+0x12fa8>
   25528:	mov	r0, #0
   2552c:	ldr	r4, [ip]
   25530:	ldr	r7, [r3]
   25534:	bl	120b4 <dcgettext@plt>
   25538:	mov	r2, #5
   2553c:	ldr	r1, [pc, #92]	; 255a0 <__assert_fail@plt+0x12fac>
   25540:	mov	r8, r0
   25544:	mov	r0, #0
   25548:	bl	120b4 <dcgettext@plt>
   2554c:	mov	r2, #5
   25550:	ldr	r1, [pc, #76]	; 255a4 <__assert_fail@plt+0x12fb0>
   25554:	mov	r6, r0
   25558:	mov	r0, #0
   2555c:	bl	120b4 <dcgettext@plt>
   25560:	mov	r2, #0
   25564:	str	r2, [sp, #12]
   25568:	str	r8, [sp]
   2556c:	mov	r3, r7
   25570:	str	r6, [sp, #4]
   25574:	mov	r1, r5
   25578:	ldr	r2, [pc, #40]	; 255a8 <__assert_fail@plt+0x12fb4>
   2557c:	str	r0, [sp, #8]
   25580:	mov	r0, r4
   25584:	bl	3546c <__assert_fail@plt+0x22e78>
   25588:	add	sp, sp, #16
   2558c:	pop	{r4, r5, r6, r7, r8, pc}
   25590:	andeq	r4, r6, r8, asr #10
   25594:	andeq	r4, r6, r4, asr r5
   25598:	andeq	r4, r6, ip, asr #9
   2559c:	strdeq	r2, [r5], -r4
   255a0:	andeq	r2, r5, r4, lsl #2
   255a4:	andeq	r2, r5, r4, lsl r1
   255a8:	andeq	r2, r5, r4, lsr #2
   255ac:	cmp	r2, #0
   255b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255b4:	mov	fp, r0
   255b8:	mov	r4, r1
   255bc:	bne	256dc <__assert_fail@plt+0x130e8>
   255c0:	ldr	r9, [pc, #336]	; 25718 <__assert_fail@plt+0x13124>
   255c4:	ldr	sl, [pc, #336]	; 2571c <__assert_fail@plt+0x13128>
   255c8:	ldr	r8, [pc, #336]	; 25720 <__assert_fail@plt+0x1312c>
   255cc:	ldr	r7, [pc, #336]	; 25724 <__assert_fail@plt+0x13130>
   255d0:	ldr	r6, [pc, #336]	; 25728 <__assert_fail@plt+0x13134>
   255d4:	ldr	r5, [pc, #336]	; 2572c <__assert_fail@plt+0x13138>
   255d8:	b	2560c <__assert_fail@plt+0x13018>
   255dc:	cmp	r2, #32
   255e0:	beq	256ac <__assert_fail@plt+0x130b8>
   255e4:	bls	25664 <__assert_fail@plt+0x13070>
   255e8:	cmp	r2, #34	; 0x22
   255ec:	beq	256cc <__assert_fail@plt+0x130d8>
   255f0:	cmp	r2, #92	; 0x5c
   255f4:	bne	2563c <__assert_fail@plt+0x13048>
   255f8:	mov	r1, r6
   255fc:	mov	r0, r4
   25600:	bl	1233c <fprintf@plt>
   25604:	cmp	r0, #0
   25608:	blt	2565c <__assert_fail@plt+0x13068>
   2560c:	ldrb	r2, [fp], #1
   25610:	cmp	r2, #0
   25614:	beq	256f8 <__assert_fail@plt+0x13104>
   25618:	cmp	r2, #12
   2561c:	beq	256bc <__assert_fail@plt+0x130c8>
   25620:	bhi	255dc <__assert_fail@plt+0x12fe8>
   25624:	cmp	r2, #9
   25628:	beq	2568c <__assert_fail@plt+0x13098>
   2562c:	cmp	r2, #10
   25630:	beq	2567c <__assert_fail@plt+0x13088>
   25634:	cmp	r2, #8
   25638:	beq	2569c <__assert_fail@plt+0x130a8>
   2563c:	sub	r3, r2, #33	; 0x21
   25640:	cmp	r3, #93	; 0x5d
   25644:	bls	25700 <__assert_fail@plt+0x1310c>
   25648:	mov	r1, sl
   2564c:	mov	r0, r4
   25650:	bl	1233c <fprintf@plt>
   25654:	cmp	r0, #0
   25658:	bge	2560c <__assert_fail@plt+0x13018>
   2565c:	mov	r0, #0
   25660:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25664:	cmp	r2, #13
   25668:	bne	2563c <__assert_fail@plt+0x13048>
   2566c:	mov	r1, r5
   25670:	mov	r0, r4
   25674:	bl	1233c <fprintf@plt>
   25678:	b	25604 <__assert_fail@plt+0x13010>
   2567c:	ldr	r1, [pc, #172]	; 25730 <__assert_fail@plt+0x1313c>
   25680:	mov	r0, r4
   25684:	bl	1233c <fprintf@plt>
   25688:	b	25604 <__assert_fail@plt+0x13010>
   2568c:	ldr	r1, [pc, #160]	; 25734 <__assert_fail@plt+0x13140>
   25690:	mov	r0, r4
   25694:	bl	1233c <fprintf@plt>
   25698:	b	25604 <__assert_fail@plt+0x13010>
   2569c:	ldr	r1, [pc, #148]	; 25738 <__assert_fail@plt+0x13144>
   256a0:	mov	r0, r4
   256a4:	bl	1233c <fprintf@plt>
   256a8:	b	25604 <__assert_fail@plt+0x13010>
   256ac:	mov	r1, r8
   256b0:	mov	r0, r4
   256b4:	bl	1233c <fprintf@plt>
   256b8:	b	25604 <__assert_fail@plt+0x13010>
   256bc:	mov	r1, r9
   256c0:	mov	r0, r4
   256c4:	bl	1233c <fprintf@plt>
   256c8:	b	25604 <__assert_fail@plt+0x13010>
   256cc:	mov	r1, r7
   256d0:	mov	r0, r4
   256d4:	bl	1233c <fprintf@plt>
   256d8:	b	25604 <__assert_fail@plt+0x13010>
   256dc:	mov	r2, r0
   256e0:	mov	r0, r1
   256e4:	ldr	r1, [pc, #80]	; 2573c <__assert_fail@plt+0x13148>
   256e8:	bl	1233c <fprintf@plt>
   256ec:	mvn	r0, r0
   256f0:	lsr	r0, r0, #31
   256f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256f8:	mov	r0, #1
   256fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25700:	mov	r0, r2
   25704:	mov	r1, r4
   25708:	bl	124e0 <putc@plt>
   2570c:	cmn	r0, #1
   25710:	bne	2560c <__assert_fail@plt+0x13018>
   25714:	b	2565c <__assert_fail@plt+0x13068>
   25718:	andeq	r2, r5, r8, asr r1
   2571c:	andeq	r2, r5, r4, ror #2
   25720:	andeq	r2, r5, ip, asr r1
   25724:	andeq	r2, r5, r0, ror #2
   25728:	andeq	r2, r5, r4, asr #2
   2572c:	andeq	r2, r5, r0, asr r1
   25730:	andeq	r2, r5, r8, asr #2
   25734:	andeq	r2, r5, r4, asr r1
   25738:	andeq	r2, r5, ip, asr #2
   2573c:	andeq	r2, r5, r4, asr #9
   25740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25744:	add	fp, sp, #32
   25748:	mov	r6, r0
   2574c:	sub	sp, sp, #956	; 0x3bc
   25750:	ldr	r5, [pc, #1532]	; 25d54 <__assert_fail@plt+0x13760>
   25754:	str	r1, [fp, #-968]	; 0xfffffc38
   25758:	ldr	r0, [r3, #16]
   2575c:	sub	r1, fp, #956	; 0x3bc
   25760:	mov	r4, r3
   25764:	mov	r7, r2
   25768:	bl	26eb8 <__assert_fail@plt+0x148c4>
   2576c:	mov	r2, #1
   25770:	mov	r3, #0
   25774:	ldrd	r0, [r4, #96]	; 0x60
   25778:	ldr	r8, [r5]
   2577c:	strd	r2, [sp, #8]
   25780:	strd	r2, [sp]
   25784:	sub	r2, fp, #688	; 0x2b0
   25788:	mov	r3, #0
   2578c:	bl	28a68 <__assert_fail@plt+0x16474>
   25790:	mov	r2, r8
   25794:	ldr	r1, [pc, #1468]	; 25d58 <__assert_fail@plt+0x13764>
   25798:	mov	r3, r0
   2579c:	ldr	r0, [fp, #16]
   257a0:	bl	1233c <fprintf@plt>
   257a4:	cmp	r0, #0
   257a8:	blt	25afc <__assert_fail@plt+0x13508>
   257ac:	ldr	r3, [r5]
   257b0:	ldr	r1, [fp, #16]
   257b4:	cmp	r0, r3
   257b8:	strgt	r0, [r5]
   257bc:	mov	r0, #32
   257c0:	bl	124e0 <putc@plt>
   257c4:	ldr	r2, [fp, #8]
   257c8:	sub	r1, fp, #964	; 0x3c4
   257cc:	ldrd	r8, [r4, #64]	; 0x40
   257d0:	asr	r3, r2, #31
   257d4:	strd	r2, [r1]
   257d8:	strd	r2, [sp, #8]
   257dc:	mov	r2, #512	; 0x200
   257e0:	mov	r3, #0
   257e4:	mov	r1, r9
   257e8:	strd	r2, [sp]
   257ec:	mov	r3, #0
   257f0:	sub	r2, fp, #688	; 0x2b0
   257f4:	ldr	sl, [r5, #4]
   257f8:	cmn	r0, #1
   257fc:	mov	r0, r8
   25800:	moveq	r9, r3
   25804:	movne	r8, r3
   25808:	moveq	r8, #150	; 0x96
   2580c:	movne	r9, #1
   25810:	bl	28a68 <__assert_fail@plt+0x16474>
   25814:	mov	r2, sl
   25818:	ldr	r1, [pc, #1336]	; 25d58 <__assert_fail@plt+0x13764>
   2581c:	mov	r3, r0
   25820:	ldr	r0, [fp, #16]
   25824:	bl	1233c <fprintf@plt>
   25828:	cmp	r0, #0
   2582c:	blt	25be4 <__assert_fail@plt+0x135f0>
   25830:	ldr	r3, [r5, #4]
   25834:	cmp	r0, r3
   25838:	strgt	r0, [r5, #4]
   2583c:	cmp	r9, #0
   25840:	beq	25ad0 <__assert_fail@plt+0x134dc>
   25844:	ldr	r1, [fp, #16]
   25848:	mov	r0, #32
   2584c:	bl	124e0 <putc@plt>
   25850:	cmn	r0, #1
   25854:	beq	25bd4 <__assert_fail@plt+0x135e0>
   25858:	sub	r0, fp, #956	; 0x3bc
   2585c:	ldr	r1, [fp, #16]
   25860:	bl	12588 <fputs@plt>
   25864:	cmp	r0, #0
   25868:	blt	25bdc <__assert_fail@plt+0x135e8>
   2586c:	ldr	r3, [r4, #20]
   25870:	ldr	r2, [r5, #8]
   25874:	ldr	r1, [pc, #1248]	; 25d5c <__assert_fail@plt+0x13768>
   25878:	ldr	r0, [fp, #16]
   2587c:	bl	1233c <fprintf@plt>
   25880:	cmp	r0, #0
   25884:	blt	25bec <__assert_fail@plt+0x135f8>
   25888:	ldr	r3, [r5, #8]
   2588c:	ldr	r1, [fp, #16]
   25890:	cmp	r0, r3
   25894:	strgt	r0, [r5, #8]
   25898:	mov	r0, #32
   2589c:	bl	124e0 <putc@plt>
   258a0:	cmn	r0, #1
   258a4:	ldr	r0, [r4, #24]
   258a8:	moveq	r8, #250	; 0xfa
   258ac:	bl	29a30 <__assert_fail@plt+0x1743c>
   258b0:	subs	r9, r0, #0
   258b4:	beq	25c4c <__assert_fail@plt+0x13658>
   258b8:	mov	r1, #0
   258bc:	bl	2b594 <__assert_fail@plt+0x18fa0>
   258c0:	ldr	r2, [r5, #12]
   258c4:	mov	r3, r9
   258c8:	ldr	r1, [pc, #1168]	; 25d60 <__assert_fail@plt+0x1376c>
   258cc:	cmp	r0, r2
   258d0:	movgt	r2, r0
   258d4:	strgt	r0, [r5, #12]
   258d8:	ldr	r0, [fp, #16]
   258dc:	bl	1233c <fprintf@plt>
   258e0:	cmp	r0, #0
   258e4:	mvn	r0, r0
   258e8:	movlt	r8, #400	; 0x190
   258ec:	lsr	r0, r0, #31
   258f0:	cmp	r0, #0
   258f4:	beq	25ad0 <__assert_fail@plt+0x134dc>
   258f8:	ldr	r0, [r4, #28]
   258fc:	bl	29bd4 <__assert_fail@plt+0x175e0>
   25900:	subs	r8, r0, #0
   25904:	beq	25a90 <__assert_fail@plt+0x1349c>
   25908:	mov	r1, #0
   2590c:	bl	2b594 <__assert_fail@plt+0x18fa0>
   25910:	ldr	r2, [r5, #16]
   25914:	mov	r3, r8
   25918:	ldr	r1, [pc, #1088]	; 25d60 <__assert_fail@plt+0x1376c>
   2591c:	cmp	r0, r2
   25920:	movgt	r2, r0
   25924:	strgt	r0, [r5, #16]
   25928:	ldr	r0, [fp, #16]
   2592c:	bl	1233c <fprintf@plt>
   25930:	cmp	r0, #0
   25934:	blt	25b1c <__assert_fail@plt+0x13528>
   25938:	ldr	r3, [r4, #16]
   2593c:	and	r3, r3, #45056	; 0xb000
   25940:	cmp	r3, #8192	; 0x2000
   25944:	beq	25b2c <__assert_fail@plt+0x13538>
   25948:	ldr	r3, [fp, #8]
   2594c:	cmp	r3, #0
   25950:	movge	r2, #1
   25954:	movge	r3, #0
   25958:	subge	r1, fp, #964	; 0x3c4
   2595c:	strdge	r2, [r1]
   25960:	sub	ip, fp, #964	; 0x3c4
   25964:	mov	r2, #1
   25968:	ldrd	r8, [ip]
   2596c:	mov	r3, #0
   25970:	ldrd	r0, [r4, #48]	; 0x30
   25974:	strd	r2, [sp]
   25978:	strd	r8, [sp, #8]
   2597c:	mov	r3, #0
   25980:	sub	r2, fp, #688	; 0x2b0
   25984:	ldr	r8, [r5, #28]
   25988:	bl	28a68 <__assert_fail@plt+0x16474>
   2598c:	mov	r2, r8
   25990:	ldr	r1, [pc, #960]	; 25d58 <__assert_fail@plt+0x13764>
   25994:	mov	r3, r0
   25998:	ldr	r0, [fp, #16]
   2599c:	bl	1233c <fprintf@plt>
   259a0:	cmp	r0, #0
   259a4:	blt	25bc4 <__assert_fail@plt+0x135d0>
   259a8:	ldr	r3, [r5, #28]
   259ac:	cmp	r0, r3
   259b0:	strgt	r0, [r5, #28]
   259b4:	ldr	r1, [fp, #16]
   259b8:	mov	r0, #32
   259bc:	bl	124e0 <putc@plt>
   259c0:	cmn	r0, #1
   259c4:	beq	25bcc <__assert_fail@plt+0x135d8>
   259c8:	add	r0, r4, #80	; 0x50
   259cc:	bl	1227c <localtime@plt>
   259d0:	subs	sl, r0, #0
   259d4:	beq	25c90 <__assert_fail@plt+0x1369c>
   259d8:	ldr	r3, [fp, #4]
   259dc:	ldr	r2, [r4, #80]	; 0x50
   259e0:	sub	r3, r3, #15532032	; 0xed0000
   259e4:	sub	r3, r3, #19968	; 0x4e00
   259e8:	cmp	r3, r2
   259ec:	ldr	r9, [pc, #880]	; 25d64 <__assert_fail@plt+0x13770>
   259f0:	ble	25b04 <__assert_fail@plt+0x13510>
   259f4:	mov	r5, #256	; 0x100
   259f8:	sub	r8, fp, #944	; 0x3b0
   259fc:	b	25a14 <__assert_fail@plt+0x13420>
   25a00:	lsl	r5, r5, #1
   25a04:	add	r3, r5, #14
   25a08:	bic	r3, r3, #7
   25a0c:	sub	sp, sp, r3
   25a10:	add	r8, sp, #16
   25a14:	mov	r3, sl
   25a18:	mov	r2, r9
   25a1c:	mov	r1, r5
   25a20:	mov	r0, r8
   25a24:	bl	12264 <strftime@plt>
   25a28:	cmp	r0, #0
   25a2c:	beq	25a00 <__assert_fail@plt+0x1340c>
   25a30:	mov	r2, r8
   25a34:	ldr	r1, [pc, #812]	; 25d68 <__assert_fail@plt+0x13774>
   25a38:	ldr	r0, [fp, #16]
   25a3c:	bl	1233c <fprintf@plt>
   25a40:	cmp	r0, #0
   25a44:	blt	25b24 <__assert_fail@plt+0x13530>
   25a48:	ldr	r2, [fp, #12]
   25a4c:	ldr	r1, [fp, #16]
   25a50:	mov	r0, r6
   25a54:	bl	255ac <__assert_fail@plt+0x12fb8>
   25a58:	cmp	r0, #0
   25a5c:	moveq	r8, #1200	; 0x4b0
   25a60:	beq	25ad0 <__assert_fail@plt+0x134dc>
   25a64:	ldr	r3, [r4, #16]
   25a68:	and	r3, r3, #61440	; 0xf000
   25a6c:	cmp	r3, #40960	; 0xa000
   25a70:	beq	25bf4 <__assert_fail@plt+0x13600>
   25a74:	ldr	r1, [fp, #16]
   25a78:	mov	r0, #10
   25a7c:	bl	124e0 <putc@plt>
   25a80:	cmn	r0, #1
   25a84:	beq	25c44 <__assert_fail@plt+0x13650>
   25a88:	sub	sp, fp, #32
   25a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a90:	ldr	r3, [r4, #28]
   25a94:	ldr	r2, [r5, #16]
   25a98:	ldr	r1, [pc, #716]	; 25d6c <__assert_fail@plt+0x13778>
   25a9c:	ldr	r0, [fp, #16]
   25aa0:	bl	1233c <fprintf@plt>
   25aa4:	ldr	r3, [r5, #16]
   25aa8:	cmp	r0, r3
   25aac:	strgt	r0, [r5, #16]
   25ab0:	cmp	r0, #0
   25ab4:	blt	25cf0 <__assert_fail@plt+0x136fc>
   25ab8:	ldr	r1, [fp, #16]
   25abc:	mov	r0, #32
   25ac0:	bl	124e0 <putc@plt>
   25ac4:	cmn	r0, #1
   25ac8:	bne	25938 <__assert_fail@plt+0x13344>
   25acc:	ldr	r8, [pc, #668]	; 25d70 <__assert_fail@plt+0x1377c>
   25ad0:	bl	12348 <__errno_location@plt>
   25ad4:	mov	r2, #5
   25ad8:	ldr	r1, [pc, #660]	; 25d74 <__assert_fail@plt+0x13780>
   25adc:	ldr	r4, [r0]
   25ae0:	mov	r0, #0
   25ae4:	bl	120b4 <dcgettext@plt>
   25ae8:	mov	r3, r8
   25aec:	mov	r1, r4
   25af0:	mov	r2, r0
   25af4:	mov	r0, #1
   25af8:	bl	121ec <error@plt>
   25afc:	mov	r8, #100	; 0x64
   25b00:	b	25ad0 <__assert_fail@plt+0x134dc>
   25b04:	ldr	r1, [fp, #4]
   25b08:	ldr	r3, [pc, #616]	; 25d78 <__assert_fail@plt+0x13784>
   25b0c:	add	r1, r1, #3600	; 0xe10
   25b10:	cmp	r2, r1
   25b14:	movle	r9, r3
   25b18:	b	259f4 <__assert_fail@plt+0x13400>
   25b1c:	mov	r8, #500	; 0x1f4
   25b20:	b	25ad0 <__assert_fail@plt+0x134dc>
   25b24:	mov	r8, #900	; 0x384
   25b28:	b	25ad0 <__assert_fail@plt+0x134dc>
   25b2c:	ldr	r1, [r4, #32]
   25b30:	ldr	r3, [r4, #36]	; 0x24
   25b34:	ldr	r2, [r5, #20]
   25b38:	lsl	r1, r1, #12
   25b3c:	bic	r3, r3, #4080	; 0xff0
   25b40:	bic	r3, r3, #15
   25b44:	orr	r3, r3, r1, lsr #20
   25b48:	ldr	r0, [fp, #16]
   25b4c:	ldr	r1, [pc, #520]	; 25d5c <__assert_fail@plt+0x13768>
   25b50:	bl	1233c <fprintf@plt>
   25b54:	cmp	r0, #0
   25b58:	blt	25ce0 <__assert_fail@plt+0x136ec>
   25b5c:	ldr	r3, [r5, #20]
   25b60:	ldr	r1, [pc, #532]	; 25d7c <__assert_fail@plt+0x13788>
   25b64:	cmp	r0, r3
   25b68:	strgt	r0, [r5, #20]
   25b6c:	ldr	r0, [fp, #16]
   25b70:	bl	1233c <fprintf@plt>
   25b74:	cmp	r0, #0
   25b78:	blt	25ce8 <__assert_fail@plt+0x136f4>
   25b7c:	ldr	r3, [r4, #32]
   25b80:	ldr	r0, [r4, #36]	; 0x24
   25b84:	ldr	r2, [r5, #24]
   25b88:	lsr	r1, r3, #12
   25b8c:	orr	r1, r1, r0, lsl #20
   25b90:	bic	r1, r1, #255	; 0xff
   25b94:	uxtb	r3, r3
   25b98:	orr	r3, r1, r3
   25b9c:	ldr	r0, [fp, #16]
   25ba0:	ldr	r1, [pc, #436]	; 25d5c <__assert_fail@plt+0x13768>
   25ba4:	bl	1233c <fprintf@plt>
   25ba8:	cmp	r0, #0
   25bac:	ldrlt	r8, [pc, #460]	; 25d80 <__assert_fail@plt+0x1378c>
   25bb0:	blt	25ad0 <__assert_fail@plt+0x134dc>
   25bb4:	ldr	r3, [r5, #24]
   25bb8:	cmp	r0, r3
   25bbc:	strgt	r0, [r5, #24]
   25bc0:	b	259b4 <__assert_fail@plt+0x133c0>
   25bc4:	mov	r8, #800	; 0x320
   25bc8:	b	25ad0 <__assert_fail@plt+0x134dc>
   25bcc:	ldr	r8, [pc, #432]	; 25d84 <__assert_fail@plt+0x13790>
   25bd0:	b	25ad0 <__assert_fail@plt+0x134dc>
   25bd4:	mov	r8, #250	; 0xfa
   25bd8:	b	25ad0 <__assert_fail@plt+0x134dc>
   25bdc:	ldr	r8, [pc, #420]	; 25d88 <__assert_fail@plt+0x13794>
   25be0:	b	25ad0 <__assert_fail@plt+0x134dc>
   25be4:	mov	r8, #200	; 0xc8
   25be8:	b	25ad0 <__assert_fail@plt+0x134dc>
   25bec:	mov	r8, #300	; 0x12c
   25bf0:	b	25ad0 <__assert_fail@plt+0x134dc>
   25bf4:	mov	r1, r7
   25bf8:	ldr	r0, [fp, #-968]	; 0xfffffc38
   25bfc:	bl	2674c <__assert_fail@plt+0x14158>
   25c00:	subs	r4, r0, #0
   25c04:	beq	25d38 <__assert_fail@plt+0x13744>
   25c08:	ldr	r1, [fp, #16]
   25c0c:	ldr	r0, [pc, #376]	; 25d8c <__assert_fail@plt+0x13798>
   25c10:	bl	12588 <fputs@plt>
   25c14:	cmp	r0, #0
   25c18:	blt	25c80 <__assert_fail@plt+0x1368c>
   25c1c:	ldr	r2, [fp, #12]
   25c20:	ldr	r1, [fp, #16]
   25c24:	mov	r0, r4
   25c28:	bl	255ac <__assert_fail@plt+0x12fb8>
   25c2c:	cmp	r0, #0
   25c30:	ldreq	r8, [pc, #344]	; 25d90 <__assert_fail@plt+0x1379c>
   25c34:	beq	25c84 <__assert_fail@plt+0x13690>
   25c38:	mov	r0, r4
   25c3c:	bl	376d0 <__assert_fail@plt+0x250dc>
   25c40:	b	25a74 <__assert_fail@plt+0x13480>
   25c44:	ldr	r8, [pc, #328]	; 25d94 <__assert_fail@plt+0x137a0>
   25c48:	b	25ad0 <__assert_fail@plt+0x134dc>
   25c4c:	ldr	r2, [r4, #24]
   25c50:	ldr	r1, [pc, #320]	; 25d98 <__assert_fail@plt+0x137a4>
   25c54:	ldr	r0, [fp, #16]
   25c58:	bl	1233c <fprintf@plt>
   25c5c:	ldr	r3, [r5, #12]
   25c60:	cmp	r0, r3
   25c64:	ldr	r3, [pc, #304]	; 25d9c <__assert_fail@plt+0x137a8>
   25c68:	strgt	r0, [r5, #12]
   25c6c:	cmp	r0, #0
   25c70:	movle	r8, r3
   25c74:	movgt	r0, #1
   25c78:	movle	r0, #0
   25c7c:	b	258f0 <__assert_fail@plt+0x132fc>
   25c80:	ldr	r8, [pc, #280]	; 25da0 <__assert_fail@plt+0x137ac>
   25c84:	mov	r0, r4
   25c88:	bl	376d0 <__assert_fail@plt+0x250dc>
   25c8c:	b	25ad0 <__assert_fail@plt+0x134dc>
   25c90:	ldr	r0, [r4, #80]	; 0x50
   25c94:	mov	r8, #1
   25c98:	mov	r9, #0
   25c9c:	cmp	r0, #0
   25ca0:	mov	r3, sl
   25ca4:	sub	r2, fp, #688	; 0x2b0
   25ca8:	strd	r8, [sp, #8]
   25cac:	strd	r8, [sp]
   25cb0:	asr	r1, r0, #31
   25cb4:	blt	25cf8 <__assert_fail@plt+0x13704>
   25cb8:	bl	28a68 <__assert_fail@plt+0x16474>
   25cbc:	mov	r2, #12
   25cc0:	ldr	r1, [pc, #220]	; 25da4 <__assert_fail@plt+0x137b0>
   25cc4:	mov	r3, r0
   25cc8:	ldr	r0, [fp, #16]
   25ccc:	bl	1233c <fprintf@plt>
   25cd0:	cmp	r0, #0
   25cd4:	bge	25a48 <__assert_fail@plt+0x13454>
   25cd8:	ldr	r8, [pc, #200]	; 25da8 <__assert_fail@plt+0x137b4>
   25cdc:	b	25ad0 <__assert_fail@plt+0x134dc>
   25ce0:	mov	r8, #600	; 0x258
   25ce4:	b	25ad0 <__assert_fail@plt+0x134dc>
   25ce8:	ldr	r8, [pc, #188]	; 25dac <__assert_fail@plt+0x137b8>
   25cec:	b	25ad0 <__assert_fail@plt+0x134dc>
   25cf0:	ldr	r8, [pc, #184]	; 25db0 <__assert_fail@plt+0x137bc>
   25cf4:	b	25ad0 <__assert_fail@plt+0x134dc>
   25cf8:	rsbs	r0, r0, #0
   25cfc:	rsc	r1, r1, #0
   25d00:	bl	28a68 <__assert_fail@plt+0x16474>
   25d04:	mov	r5, r0
   25d08:	bl	12300 <strlen@plt>
   25d0c:	str	r5, [sp]
   25d10:	ldr	r3, [pc, #156]	; 25db4 <__assert_fail@plt+0x137c0>
   25d14:	ldr	r1, [pc, #156]	; 25db8 <__assert_fail@plt+0x137c4>
   25d18:	rsb	r2, r0, #12
   25d1c:	ldr	r0, [fp, #16]
   25d20:	bic	r2, r2, r2, asr #31
   25d24:	bl	1233c <fprintf@plt>
   25d28:	cmp	r0, #0
   25d2c:	bge	25a48 <__assert_fail@plt+0x13454>
   25d30:	mov	r8, #1000	; 0x3e8
   25d34:	b	25ad0 <__assert_fail@plt+0x134dc>
   25d38:	bl	12348 <__errno_location@plt>
   25d3c:	mov	r3, r6
   25d40:	ldr	r2, [pc, #116]	; 25dbc <__assert_fail@plt+0x137c8>
   25d44:	ldr	r1, [r0]
   25d48:	mov	r0, r4
   25d4c:	bl	121ec <error@plt>
   25d50:	b	25c38 <__assert_fail@plt+0x13644>
   25d54:	ldrdeq	r4, [r6], -r0
   25d58:	andeq	r2, r5, r4, lsl #3
   25d5c:	andeq	r2, r5, r0, lsr #3
   25d60:	andeq	r2, r5, r8, lsl #3
   25d64:	andeq	r2, r5, r8, ror r1
   25d68:	andeq	r2, r5, r8, lsr #3
   25d6c:	muleq	r5, r8, r1
   25d70:	andeq	r0, r0, sp, lsl #4
   25d74:	andeq	r2, r5, r4, asr #3
   25d78:	andeq	r2, r5, ip, ror #2
   25d7c:	muleq	r4, ip, fp
   25d80:	andeq	r0, r0, sl, lsl #5
   25d84:	andeq	r0, r0, r2, asr r3
   25d88:	andeq	r0, r0, r3, lsl r1
   25d8c:			; <UNDEFINED> instruction: 0x000521bc
   25d90:	andeq	r0, r0, r6, asr #10
   25d94:	andeq	r0, r0, r8, ror r5
   25d98:	muleq	r5, r0, r1
   25d9c:	andeq	r0, r0, r2, asr #3
   25da0:	andeq	r0, r0, r4, lsl r5
   25da4:			; <UNDEFINED> instruction: 0x000521b4
   25da8:	andeq	r0, r0, ip, asr #8
   25dac:	andeq	r0, r0, r1, ror r2
   25db0:	andeq	r0, r0, r6, lsr #4
   25db4:	andeq	lr, r4, r4, ror #5
   25db8:	andeq	r2, r5, ip, lsr #3
   25dbc:	andeq	r2, r5, r4, asr #9
   25dc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25dc4:	cmp	r2, #0
   25dc8:	sub	sp, sp, #8192	; 0x2000
   25dcc:	sub	sp, sp, #8
   25dd0:	mov	r5, r3
   25dd4:	beq	25e4c <__assert_fail@plt+0x13858>
   25dd8:	add	r2, sp, #8192	; 0x2000
   25ddc:	add	r2, r2, #40	; 0x28
   25de0:	add	r4, sp, #8
   25de4:	str	r1, [sp]
   25de8:	mov	r7, r1
   25dec:	mov	r8, r0
   25df0:	mvn	r3, #0
   25df4:	mov	r0, r4
   25df8:	ldr	r2, [r2]
   25dfc:	mov	r1, #8192	; 0x2000
   25e00:	bl	31cc4 <__assert_fail@plt+0x1f6d0>
   25e04:	cmp	r0, #8192	; 0x2000
   25e08:	mov	r6, r0
   25e0c:	bcs	25e74 <__assert_fail@plt+0x13880>
   25e10:	mov	r1, r0
   25e14:	mov	r0, r4
   25e18:	bl	25eec <__assert_fail@plt+0x138f8>
   25e1c:	mov	r1, r5
   25e20:	mov	ip, #0
   25e24:	mov	r2, r4
   25e28:	mov	r3, r0
   25e2c:	mov	r0, r8
   25e30:	strb	ip, [r4, r3]
   25e34:	bl	1233c <fprintf@plt>
   25e38:	mov	r5, r0
   25e3c:	mov	r0, r5
   25e40:	add	sp, sp, #8192	; 0x2000
   25e44:	add	sp, sp, #8
   25e48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25e4c:	mov	r1, r3
   25e50:	add	r3, sp, #8192	; 0x2000
   25e54:	add	r3, r3, #40	; 0x28
   25e58:	ldr	r2, [r3]
   25e5c:	bl	1233c <fprintf@plt>
   25e60:	mov	r5, r0
   25e64:	mov	r0, r5
   25e68:	add	sp, sp, #8192	; 0x2000
   25e6c:	add	sp, sp, #8
   25e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25e74:	add	sl, r0, #1
   25e78:	mov	r0, sl
   25e7c:	bl	3563c <__assert_fail@plt+0x23048>
   25e80:	add	r2, sp, #8192	; 0x2000
   25e84:	add	r2, r2, #40	; 0x28
   25e88:	mvn	r3, #0
   25e8c:	mov	r1, sl
   25e90:	str	r7, [sp]
   25e94:	ldr	r2, [r2]
   25e98:	mov	r9, r0
   25e9c:	bl	31cc4 <__assert_fail@plt+0x1f6d0>
   25ea0:	mov	r1, r6
   25ea4:	mov	r0, r9
   25ea8:	bl	25eec <__assert_fail@plt+0x138f8>
   25eac:	mov	r1, r5
   25eb0:	mov	ip, #0
   25eb4:	mov	r2, r9
   25eb8:	mov	r3, r0
   25ebc:	mov	r0, r8
   25ec0:	strb	ip, [r9, r3]
   25ec4:	bl	1233c <fprintf@plt>
   25ec8:	cmp	r9, r4
   25ecc:	mov	r5, r0
   25ed0:	beq	25e64 <__assert_fail@plt+0x13870>
   25ed4:	mov	r0, r9
   25ed8:	bl	376d0 <__assert_fail@plt+0x250dc>
   25edc:	mov	r0, r5
   25ee0:	add	sp, sp, #8192	; 0x2000
   25ee4:	add	sp, sp, #8
   25ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ef0:	sub	sp, sp, #28
   25ef4:	mov	r7, r1
   25ef8:	str	r0, [sp, #4]
   25efc:	bl	12198 <__ctype_get_mb_cur_max@plt>
   25f00:	cmp	r0, #1
   25f04:	bls	26158 <__assert_fail@plt+0x13b64>
   25f08:	ldr	r4, [sp, #4]
   25f0c:	add	r7, r4, r7
   25f10:	cmp	r4, r7
   25f14:	bcs	261a0 <__assert_fail@plt+0x13bac>
   25f18:	mov	r6, r4
   25f1c:	b	25f48 <__assert_fail@plt+0x13954>
   25f20:	cmp	r3, #37	; 0x25
   25f24:	bcs	25f34 <__assert_fail@plt+0x13940>
   25f28:	sub	r2, r3, #32
   25f2c:	cmp	r2, #3
   25f30:	bhi	25f70 <__assert_fail@plt+0x1397c>
   25f34:	strb	r3, [r6]
   25f38:	add	r4, r4, #1
   25f3c:	add	r6, r6, #1
   25f40:	cmp	r4, r7
   25f44:	bcs	26148 <__assert_fail@plt+0x13b54>
   25f48:	ldrb	r3, [r4]
   25f4c:	cmp	r3, #63	; 0x3f
   25f50:	bls	25f20 <__assert_fail@plt+0x1392c>
   25f54:	cmp	r3, #65	; 0x41
   25f58:	bcc	25f70 <__assert_fail@plt+0x1397c>
   25f5c:	cmp	r3, #95	; 0x5f
   25f60:	bls	25f34 <__assert_fail@plt+0x13940>
   25f64:	sub	r2, r3, #97	; 0x61
   25f68:	cmp	r2, #29
   25f6c:	bls	25f34 <__assert_fail@plt+0x13940>
   25f70:	mov	r3, #0
   25f74:	str	r3, [sp, #16]
   25f78:	str	r3, [sp, #20]
   25f7c:	b	2609c <__assert_fail@plt+0x13aa8>
   25f80:	bl	11fa0 <wcwidth@plt>
   25f84:	cmp	r0, #0
   25f88:	blt	260e0 <__assert_fail@plt+0x13aec>
   25f8c:	add	r3, r6, #4
   25f90:	add	r2, r4, #4
   25f94:	cmp	r6, r2
   25f98:	cmpcc	r4, r3
   25f9c:	movcs	r3, #1
   25fa0:	movcc	r3, #0
   25fa4:	cmp	r5, #11
   25fa8:	movls	r3, #0
   25fac:	andhi	r3, r3, #1
   25fb0:	cmp	r3, #0
   25fb4:	beq	2610c <__assert_fail@plt+0x13b18>
   25fb8:	rsb	r3, r4, #0
   25fbc:	ands	r3, r3, #3
   25fc0:	beq	260fc <__assert_fail@plt+0x13b08>
   25fc4:	ldrb	r2, [r4]
   25fc8:	cmp	r3, #1
   25fcc:	add	ip, r6, #1
   25fd0:	strb	r2, [r6]
   25fd4:	add	lr, r4, #1
   25fd8:	sub	r1, r5, #1
   25fdc:	beq	26010 <__assert_fail@plt+0x13a1c>
   25fe0:	ldrb	r2, [r4, #1]
   25fe4:	cmp	r3, #3
   25fe8:	add	ip, r6, #2
   25fec:	strb	r2, [r6, #1]
   25ff0:	add	lr, r4, #2
   25ff4:	sub	r1, r5, #2
   25ff8:	bne	26010 <__assert_fail@plt+0x13a1c>
   25ffc:	ldrb	r2, [r4, #2]
   26000:	add	ip, r6, #3
   26004:	add	lr, r4, #3
   26008:	sub	r1, r5, #3
   2600c:	strb	r2, [r6, #2]
   26010:	sub	r9, r5, r3
   26014:	sub	r2, r9, #4
   26018:	add	r8, r4, r3
   2601c:	lsr	r2, r2, #2
   26020:	add	r2, r2, #1
   26024:	add	r3, r6, r3
   26028:	lsl	sl, r2, #2
   2602c:	mov	r0, #0
   26030:	add	r0, r0, #1
   26034:	ldr	fp, [r8], #4
   26038:	cmp	r2, r0
   2603c:	str	fp, [r3], #4
   26040:	bhi	26030 <__assert_fail@plt+0x13a3c>
   26044:	cmp	r9, sl
   26048:	sub	r1, r1, sl
   2604c:	add	r0, lr, sl
   26050:	add	r3, ip, sl
   26054:	beq	260f4 <__assert_fail@plt+0x13b00>
   26058:	ldrb	lr, [lr, r2, lsl #2]
   2605c:	cmp	r1, #1
   26060:	strb	lr, [ip, r2, lsl #2]
   26064:	beq	260f4 <__assert_fail@plt+0x13b00>
   26068:	ldrb	r2, [r0, #1]
   2606c:	cmp	r1, #2
   26070:	strb	r2, [r3, #1]
   26074:	beq	260f4 <__assert_fail@plt+0x13b00>
   26078:	ldrb	r1, [r0, #2]
   2607c:	add	r2, r4, r5
   26080:	strb	r1, [r3, #2]
   26084:	add	r6, r6, r5
   26088:	mov	r4, r2
   2608c:	add	r0, sp, #16
   26090:	bl	12060 <mbsinit@plt>
   26094:	cmp	r0, #0
   26098:	bne	25f40 <__assert_fail@plt+0x1394c>
   2609c:	add	r3, sp, #16
   260a0:	sub	r2, r7, r4
   260a4:	mov	r1, r4
   260a8:	add	r0, sp, #12
   260ac:	bl	3a03c <__assert_fail@plt+0x27a48>
   260b0:	cmn	r0, #1
   260b4:	mov	r5, r0
   260b8:	beq	26128 <__assert_fail@plt+0x13b34>
   260bc:	cmn	r0, #2
   260c0:	beq	26130 <__assert_fail@plt+0x13b3c>
   260c4:	cmp	r5, #0
   260c8:	ldr	r0, [sp, #12]
   260cc:	bne	25f80 <__assert_fail@plt+0x1398c>
   260d0:	bl	11fa0 <wcwidth@plt>
   260d4:	mov	r5, #1
   260d8:	cmp	r0, #0
   260dc:	bge	2610c <__assert_fail@plt+0x13b18>
   260e0:	mov	r3, #63	; 0x3f
   260e4:	strb	r3, [r6]
   260e8:	add	r4, r4, r5
   260ec:	add	r6, r6, #1
   260f0:	b	2608c <__assert_fail@plt+0x13a98>
   260f4:	add	r2, r4, r5
   260f8:	b	26084 <__assert_fail@plt+0x13a90>
   260fc:	mov	r1, r5
   26100:	mov	ip, r6
   26104:	mov	lr, r4
   26108:	b	26010 <__assert_fail@plt+0x13a1c>
   2610c:	sub	r3, r6, #1
   26110:	add	r2, r4, r5
   26114:	ldrb	r1, [r4], #1
   26118:	cmp	r4, r2
   2611c:	strb	r1, [r3, #1]!
   26120:	bne	26114 <__assert_fail@plt+0x13b20>
   26124:	b	26084 <__assert_fail@plt+0x13a90>
   26128:	mov	r3, #63	; 0x3f
   2612c:	b	25f34 <__assert_fail@plt+0x13940>
   26130:	mov	r4, r7
   26134:	mov	r3, #63	; 0x3f
   26138:	cmp	r4, r7
   2613c:	strb	r3, [r6]
   26140:	add	r6, r6, #1
   26144:	bcc	25f48 <__assert_fail@plt+0x13954>
   26148:	ldr	r3, [sp, #4]
   2614c:	sub	r0, r6, r3
   26150:	add	sp, sp, #28
   26154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26158:	ldr	r3, [sp, #4]
   2615c:	add	r4, r3, r7
   26160:	cmp	r3, r4
   26164:	bcs	26198 <__assert_fail@plt+0x13ba4>
   26168:	bl	122b8 <__ctype_b_loc@plt>
   2616c:	ldr	r3, [sp, #4]
   26170:	mov	r1, #63	; 0x3f
   26174:	ldrb	r2, [r3]
   26178:	ldr	ip, [r0]
   2617c:	add	r3, r3, #1
   26180:	lsl	r2, r2, #1
   26184:	ldrh	r2, [ip, r2]
   26188:	tst	r2, #16384	; 0x4000
   2618c:	strbeq	r1, [r3, #-1]
   26190:	cmp	r4, r3
   26194:	bne	26174 <__assert_fail@plt+0x13b80>
   26198:	mov	r0, r7
   2619c:	b	26150 <__assert_fail@plt+0x13b5c>
   261a0:	mov	r0, #0
   261a4:	add	sp, sp, #28
   261a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261b0:	mov	r4, #0
   261b4:	ldr	r7, [pc, #296]	; 262e4 <__assert_fail@plt+0x13cf0>
   261b8:	sub	sp, sp, #20
   261bc:	mov	r8, r0
   261c0:	mov	r9, r4
   261c4:	mov	r5, r4
   261c8:	ldr	r6, [r7, r4]
   261cc:	mov	r1, r8
   261d0:	mov	r0, r6
   261d4:	bl	11f40 <strcmp@plt>
   261d8:	cmp	r0, #0
   261dc:	beq	262a4 <__assert_fail@plt+0x13cb0>
   261e0:	mov	r0, r6
   261e4:	bl	34340 <__assert_fail@plt+0x21d4c>
   261e8:	bl	12300 <strlen@plt>
   261ec:	add	r5, r5, #1
   261f0:	cmp	r5, #13
   261f4:	add	r4, r4, #12
   261f8:	add	r0, r0, #2
   261fc:	add	r9, r9, r0
   26200:	bne	261c8 <__assert_fail@plt+0x13bd4>
   26204:	add	r0, r9, #1
   26208:	bl	3563c <__assert_fail@plt+0x23048>
   2620c:	mov	r6, #0
   26210:	mov	r5, #1
   26214:	ldr	fp, [pc, #204]	; 262e8 <__assert_fail@plt+0x13cf4>
   26218:	ldr	r9, [pc, #204]	; 262ec <__assert_fail@plt+0x13cf8>
   2621c:	mov	sl, r0
   26220:	mov	r3, r0
   26224:	b	26230 <__assert_fail@plt+0x13c3c>
   26228:	add	r5, r5, #1
   2622c:	add	r6, r6, #12
   26230:	cmp	r5, #1
   26234:	beq	262b8 <__assert_fail@plt+0x13cc4>
   26238:	ldrh	r1, [fp]
   2623c:	ldrb	r2, [fp, #2]
   26240:	mov	r4, r3
   26244:	strh	r1, [r3]
   26248:	ldr	r0, [r7, r6]
   2624c:	strb	r2, [r4, #2]!
   26250:	bl	34340 <__assert_fail@plt+0x21d4c>
   26254:	mov	r1, r9
   26258:	mov	r2, r0
   2625c:	mov	r0, r4
   26260:	bl	124b0 <sprintf@plt>
   26264:	cmp	r5, #13
   26268:	add	r3, r4, r0
   2626c:	bne	26228 <__assert_fail@plt+0x13c34>
   26270:	mov	r2, #5
   26274:	ldr	r1, [pc, #116]	; 262f0 <__assert_fail@plt+0x13cfc>
   26278:	mov	r0, #0
   2627c:	bl	120b4 <dcgettext@plt>
   26280:	mov	r4, r0
   26284:	mov	r0, r8
   26288:	bl	34340 <__assert_fail@plt+0x21d4c>
   2628c:	mov	r2, r4
   26290:	str	sl, [sp]
   26294:	mov	r1, #0
   26298:	mov	r3, r0
   2629c:	mov	r0, #1
   262a0:	bl	121ec <error@plt>
   262a4:	add	r5, r5, r5, lsl #1
   262a8:	add	r7, r7, r5, lsl #2
   262ac:	ldr	r0, [r7, #8]
   262b0:	add	sp, sp, #20
   262b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262b8:	ldr	r0, [r7, r6]
   262bc:	str	r3, [sp, #12]
   262c0:	bl	34340 <__assert_fail@plt+0x21d4c>
   262c4:	ldr	r3, [sp, #12]
   262c8:	mov	r1, r9
   262cc:	mov	r2, r0
   262d0:	mov	r0, r3
   262d4:	bl	124b0 <sprintf@plt>
   262d8:	ldr	r3, [sp, #12]
   262dc:	add	r3, r3, r0
   262e0:	b	26228 <__assert_fail@plt+0x13c34>
   262e4:	andeq	r2, r5, ip, ror #3
   262e8:	muleq	r4, ip, fp
   262ec:	andeq	r2, r5, r4, asr #9
   262f0:	andeq	r2, r5, r8, lsl #5
   262f4:	cmp	r0, #12
   262f8:	addls	r0, r0, r0, lsl #1
   262fc:	ldrls	r3, [pc, #8]	; 2630c <__assert_fail@plt+0x13d18>
   26300:	ldrls	r0, [r3, r0, lsl #2]
   26304:	movhi	r0, #0
   26308:	bx	lr
   2630c:	andeq	r2, r5, ip, ror #3
   26310:	cmp	r0, #12
   26314:	addls	r0, r0, r0, lsl #1
   26318:	ldrls	r3, [pc, #12]	; 2632c <__assert_fail@plt+0x13d38>
   2631c:	addls	r0, r3, r0, lsl #2
   26320:	ldrls	r0, [r0, #8]
   26324:	mvnhi	r0, #0
   26328:	bx	lr
   2632c:	andeq	r2, r5, ip, ror #3
   26330:	cmp	r0, #12
   26334:	addls	r0, r0, r0, lsl #1
   26338:	ldrls	r3, [pc, #12]	; 2634c <__assert_fail@plt+0x13d58>
   2633c:	addls	r0, r3, r0, lsl #2
   26340:	ldrls	r0, [r0, #4]
   26344:	movhi	r0, #0
   26348:	bx	lr
   2634c:	andeq	r2, r5, ip, ror #3
   26350:	cmp	r0, #12
   26354:	bhi	26454 <__assert_fail@plt+0x13e60>
   26358:	ldr	r2, [pc, #448]	; 26520 <__assert_fail@plt+0x13f2c>
   2635c:	add	r3, r0, r0, lsl #1
   26360:	cmp	r0, #0
   26364:	add	r3, r2, r3, lsl #2
   26368:	ldr	r3, [r3, #8]
   2636c:	beq	26454 <__assert_fail@plt+0x13e60>
   26370:	tst	r1, #1
   26374:	bne	264a0 <__assert_fail@plt+0x13eac>
   26378:	cmp	r0, #1
   2637c:	beq	26454 <__assert_fail@plt+0x13e60>
   26380:	ands	r2, r1, #2
   26384:	bne	2648c <__assert_fail@plt+0x13e98>
   26388:	cmp	r0, #2
   2638c:	beq	26454 <__assert_fail@plt+0x13e60>
   26390:	ands	r1, r1, #3
   26394:	bne	2647c <__assert_fail@plt+0x13e88>
   26398:	cmp	r0, #3
   2639c:	beq	26454 <__assert_fail@plt+0x13e60>
   263a0:	cmp	r1, #0
   263a4:	bne	26468 <__assert_fail@plt+0x13e74>
   263a8:	cmp	r0, #4
   263ac:	beq	26454 <__assert_fail@plt+0x13e60>
   263b0:	cmp	r1, #0
   263b4:	bne	264c4 <__assert_fail@plt+0x13ed0>
   263b8:	cmp	r0, #5
   263bc:	beq	26454 <__assert_fail@plt+0x13e60>
   263c0:	cmp	r1, #0
   263c4:	bne	264b0 <__assert_fail@plt+0x13ebc>
   263c8:	cmp	r0, #6
   263cc:	beq	26454 <__assert_fail@plt+0x13e60>
   263d0:	cmp	r1, #0
   263d4:	bne	264d8 <__assert_fail@plt+0x13ee4>
   263d8:	cmp	r0, #7
   263dc:	beq	26454 <__assert_fail@plt+0x13e60>
   263e0:	cmp	r1, #0
   263e4:	beq	2645c <__assert_fail@plt+0x13e68>
   263e8:	ldr	ip, [pc, #308]	; 26524 <__assert_fail@plt+0x13f30>
   263ec:	cmp	r3, ip
   263f0:	beq	26518 <__assert_fail@plt+0x13f24>
   263f4:	cmp	r0, #8
   263f8:	beq	26454 <__assert_fail@plt+0x13e60>
   263fc:	ldr	ip, [pc, #292]	; 26528 <__assert_fail@plt+0x13f34>
   26400:	cmp	r3, ip
   26404:	beq	26500 <__assert_fail@plt+0x13f0c>
   26408:	cmp	r0, #9
   2640c:	bls	26454 <__assert_fail@plt+0x13e60>
   26410:	cmp	r1, #0
   26414:	beq	264ec <__assert_fail@plt+0x13ef8>
   26418:	ldr	r1, [pc, #264]	; 26528 <__assert_fail@plt+0x13f34>
   2641c:	cmp	r3, r1
   26420:	beq	26510 <__assert_fail@plt+0x13f1c>
   26424:	cmp	r0, #10
   26428:	beq	26454 <__assert_fail@plt+0x13e60>
   2642c:	ldr	r1, [pc, #248]	; 2652c <__assert_fail@plt+0x13f38>
   26430:	cmp	r3, r1
   26434:	beq	26508 <__assert_fail@plt+0x13f14>
   26438:	cmp	r0, #12
   2643c:	bne	26454 <__assert_fail@plt+0x13e60>
   26440:	cmp	r2, #0
   26444:	beq	26454 <__assert_fail@plt+0x13e60>
   26448:	ldr	r2, [pc, #224]	; 26530 <__assert_fail@plt+0x13f3c>
   2644c:	cmp	r3, r2
   26450:	beq	264f8 <__assert_fail@plt+0x13f04>
   26454:	mvn	r0, #0
   26458:	bx	lr
   2645c:	cmp	r0, #8
   26460:	bne	26408 <__assert_fail@plt+0x13e14>
   26464:	b	26454 <__assert_fail@plt+0x13e60>
   26468:	ldr	ip, [pc, #196]	; 26534 <__assert_fail@plt+0x13f40>
   2646c:	cmp	r3, ip
   26470:	bne	263a8 <__assert_fail@plt+0x13db4>
   26474:	mov	r0, #3
   26478:	bx	lr
   2647c:	cmp	r3, #0
   26480:	bne	26398 <__assert_fail@plt+0x13da4>
   26484:	mov	r0, #2
   26488:	bx	lr
   2648c:	ldr	ip, [pc, #144]	; 26524 <__assert_fail@plt+0x13f30>
   26490:	cmp	r3, ip
   26494:	bne	26388 <__assert_fail@plt+0x13d94>
   26498:	mov	r0, #1
   2649c:	bx	lr
   264a0:	cmp	r3, #64	; 0x40
   264a4:	bne	26378 <__assert_fail@plt+0x13d84>
   264a8:	mov	r0, #0
   264ac:	bx	lr
   264b0:	ldr	ip, [pc, #128]	; 26538 <__assert_fail@plt+0x13f44>
   264b4:	cmp	r3, ip
   264b8:	bne	263c8 <__assert_fail@plt+0x13dd4>
   264bc:	mov	r0, #5
   264c0:	bx	lr
   264c4:	ldr	ip, [pc, #112]	; 2653c <__assert_fail@plt+0x13f48>
   264c8:	cmp	r3, ip
   264cc:	bne	263b8 <__assert_fail@plt+0x13dc4>
   264d0:	mov	r0, #4
   264d4:	bx	lr
   264d8:	ldr	ip, [pc, #96]	; 26540 <__assert_fail@plt+0x13f4c>
   264dc:	cmp	r3, ip
   264e0:	bne	263d8 <__assert_fail@plt+0x13de4>
   264e4:	mov	r0, #6
   264e8:	bx	lr
   264ec:	cmp	r0, #10
   264f0:	bne	26438 <__assert_fail@plt+0x13e44>
   264f4:	b	26454 <__assert_fail@plt+0x13e60>
   264f8:	mov	r0, #11
   264fc:	bx	lr
   26500:	mov	r0, #8
   26504:	bx	lr
   26508:	mov	r0, #10
   2650c:	bx	lr
   26510:	mov	r0, #9
   26514:	bx	lr
   26518:	mov	r0, #7
   2651c:	bx	lr
   26520:	andeq	r2, r5, ip, ror #3
   26524:	smlabteq	r1, r6, r2, r0
   26528:	eoreq	fp, r3, ip, asr sl
   2652c:	strdeq	fp, [r3], -ip
   26530:	andeq	r0, r1, r4, asr #13
   26534:	eoreq	fp, r3, sp, asr #4
   26538:	strdeq	fp, [fp], -sp	; <UNPREDICTABLE>
   2653c:	andeq	r0, r1, r6, asr #20
   26540:	andeq	lr, fp, sp, asr #1
   26544:	push	{r4, r5, r6, r7, r8, lr}
   26548:	sub	sp, sp, #16
   2654c:	mov	r4, r0
   26550:	mov	r7, r1
   26554:	bl	12348 <__errno_location@plt>
   26558:	mov	r6, #0
   2655c:	mov	r2, #10
   26560:	add	r1, sp, #12
   26564:	str	r6, [r0]
   26568:	mov	r5, r0
   2656c:	mov	r0, r4
   26570:	bl	11f4c <strtol@plt>
   26574:	sub	r3, r0, #-2147483647	; 0x80000001
   26578:	cmn	r3, #3
   2657c:	bls	26594 <__assert_fail@plt+0x13fa0>
   26580:	ldr	r1, [r5]
   26584:	ldr	r2, [pc, #184]	; 26644 <__assert_fail@plt+0x14050>
   26588:	mov	r3, r4
   2658c:	mov	r0, #1
   26590:	bl	121ec <error@plt>
   26594:	ldr	r3, [sp, #12]
   26598:	ldrb	r8, [r3]
   2659c:	cmp	r8, #0
   265a0:	bne	265b4 <__assert_fail@plt+0x13fc0>
   265a4:	cmp	r4, r3
   265a8:	beq	26608 <__assert_fail@plt+0x14014>
   265ac:	add	sp, sp, #16
   265b0:	pop	{r4, r5, r6, r7, r8, pc}
   265b4:	mov	r2, #5
   265b8:	ldr	r1, [pc, #136]	; 26648 <__assert_fail@plt+0x14054>
   265bc:	mov	r0, r6
   265c0:	ldr	r5, [r5]
   265c4:	bl	120b4 <dcgettext@plt>
   265c8:	ldr	r2, [sp, #12]
   265cc:	mov	r1, r7
   265d0:	mov	r8, r0
   265d4:	mov	r0, r6
   265d8:	bl	325f0 <__assert_fail@plt+0x1fffc>
   265dc:	mov	r2, r4
   265e0:	mov	r1, r7
   265e4:	mov	r6, r0
   265e8:	mov	r0, #1
   265ec:	bl	325f0 <__assert_fail@plt+0x1fffc>
   265f0:	mov	r3, r6
   265f4:	mov	r2, r8
   265f8:	mov	r1, r5
   265fc:	str	r0, [sp]
   26600:	mov	r0, #1
   26604:	bl	121ec <error@plt>
   26608:	mov	r2, #5
   2660c:	ldr	r1, [pc, #56]	; 2664c <__assert_fail@plt+0x14058>
   26610:	mov	r0, r8
   26614:	ldr	r5, [r5]
   26618:	bl	120b4 <dcgettext@plt>
   2661c:	mov	r2, r4
   26620:	mov	r1, r7
   26624:	mov	r6, r0
   26628:	mov	r0, r8
   2662c:	bl	325f0 <__assert_fail@plt+0x1fffc>
   26630:	mov	r2, r6
   26634:	mov	r1, r5
   26638:	mov	r3, r0
   2663c:	mov	r0, #1
   26640:	b	26590 <__assert_fail@plt+0x13f9c>
   26644:	andeq	r2, r5, r4, asr #9
   26648:	andeq	r2, r5, r0, asr #6
   2664c:	andeq	r2, r5, ip, asr r3
   26650:	push	{r4, r5, r6, lr}
   26654:	cmp	r2, #0
   26658:	ldr	r5, [sp, #16]
   2665c:	beq	26698 <__assert_fail@plt+0x140a4>
   26660:	mov	r2, #0
   26664:	str	r2, [r3]
   26668:	str	r2, [r5]
   2666c:	ldr	r4, [r3]
   26670:	ldrb	r3, [r1]
   26674:	add	r4, r0, r4
   26678:	cmp	r3, #0
   2667c:	beq	266cc <__assert_fail@plt+0x140d8>
   26680:	mov	r0, r4
   26684:	bl	12528 <strpbrk@plt>
   26688:	cmp	r0, #0
   2668c:	beq	266cc <__assert_fail@plt+0x140d8>
   26690:	sub	r0, r0, r4
   26694:	b	266d4 <__assert_fail@plt+0x140e0>
   26698:	ldr	r2, [r5]
   2669c:	ldr	r4, [r3]
   266a0:	add	r4, r4, r2
   266a4:	str	r4, [r3]
   266a8:	ldrb	r2, [r0, r4]
   266ac:	cmp	r2, #0
   266b0:	beq	266e0 <__assert_fail@plt+0x140ec>
   266b4:	add	r4, r4, #1
   266b8:	str	r4, [r3]
   266bc:	ldrb	r3, [r1]
   266c0:	add	r4, r0, r4
   266c4:	cmp	r3, #0
   266c8:	bne	26680 <__assert_fail@plt+0x1408c>
   266cc:	mov	r0, r4
   266d0:	bl	12300 <strlen@plt>
   266d4:	str	r0, [r5]
   266d8:	mov	r0, #1
   266dc:	pop	{r4, r5, r6, pc}
   266e0:	mov	r0, r2
   266e4:	pop	{r4, r5, r6, pc}
   266e8:	push	{r4, r5, lr}
   266ec:	mov	r2, #5
   266f0:	sub	sp, sp, #20
   266f4:	mov	r4, r0
   266f8:	mov	r5, r1
   266fc:	mov	r0, #0
   26700:	ldr	r1, [pc, #48]	; 26738 <__assert_fail@plt+0x14144>
   26704:	bl	120b4 <dcgettext@plt>
   26708:	ldr	ip, [pc, #44]	; 2673c <__assert_fail@plt+0x14148>
   2670c:	ldr	r1, [pc, #44]	; 26740 <__assert_fail@plt+0x1414c>
   26710:	ldr	r2, [pc, #44]	; 26744 <__assert_fail@plt+0x14150>
   26714:	mov	r3, r5
   26718:	stmib	sp, {r1, ip}
   2671c:	str	r2, [sp]
   26720:	ldr	r2, [pc, #32]	; 26748 <__assert_fail@plt+0x14154>
   26724:	mov	r1, r0
   26728:	mov	r0, r4
   2672c:	bl	1233c <fprintf@plt>
   26730:	add	sp, sp, #20
   26734:	pop	{r4, r5, pc}
   26738:	andeq	r2, r5, r4, ror r3
   2673c:	andeq	r2, r5, ip, ror #8
   26740:	andeq	r2, r5, r4, lsl #9
   26744:	andeq	r2, r5, r4, lsr #2
   26748:	andeq	r2, r5, r4, asr #8
   2674c:	push	{lr}		; (str lr, [sp, #-4]!)
   26750:	sub	sp, sp, #12
   26754:	ldr	r2, [pc, #24]	; 26774 <__assert_fail@plt+0x14180>
   26758:	mov	r3, #0
   2675c:	str	r2, [sp, #4]
   26760:	str	r3, [sp]
   26764:	mov	r2, r3
   26768:	bl	268b8 <__assert_fail@plt+0x142c4>
   2676c:	add	sp, sp, #12
   26770:	pop	{pc}		; (ldr pc, [sp], #4)
   26774:	andeq	r2, r1, r8, asr r2
   26778:	push	{r4, lr}
   2677c:	mov	r4, r0
   26780:	mov	r0, #24
   26784:	bl	3a010 <__assert_fail@plt+0x27a1c>
   26788:	cmp	r0, #0
   2678c:	movne	r3, #0
   26790:	strne	r4, [r0, #16]
   26794:	strne	r4, [r0, #20]
   26798:	strne	r3, [r0]
   2679c:	pop	{r4, pc}
   267a0:	push	{r4, lr}
   267a4:	mov	r4, r0
   267a8:	mov	r0, #24
   267ac:	bl	3a010 <__assert_fail@plt+0x27a1c>
   267b0:	cmp	r0, #0
   267b4:	popeq	{r4, pc}
   267b8:	mov	r3, #0
   267bc:	str	r4, [r0]
   267c0:	str	r3, [r0, #8]
   267c4:	str	r3, [r0, #12]
   267c8:	str	r3, [r0, #4]
   267cc:	str	r3, [r0, #16]
   267d0:	pop	{r4, pc}
   267d4:	ldr	r3, [r0]
   267d8:	cmp	r3, #0
   267dc:	beq	26824 <__assert_fail@plt+0x14230>
   267e0:	push	{r4, r5, r6, lr}
   267e4:	mov	r2, #0
   267e8:	mov	r5, r1
   267ec:	mov	r4, r0
   267f0:	add	r1, r0, #12
   267f4:	add	r0, r0, #8
   267f8:	bl	1254c <getdelim@plt>
   267fc:	cmp	r0, #0
   26800:	blt	26850 <__assert_fail@plt+0x1425c>
   26804:	ldr	r3, [r4, #4]
   26808:	mov	r2, #1
   2680c:	add	r3, r3, r2
   26810:	str	r2, [r5]
   26814:	ldr	r2, [r4, #8]
   26818:	str	r3, [r4, #4]
   2681c:	mov	r0, r2
   26820:	pop	{r4, r5, r6, pc}
   26824:	ldr	r3, [r0, #20]
   26828:	ldr	r2, [r3]
   2682c:	cmp	r2, #0
   26830:	moveq	r3, #2
   26834:	addne	r3, r3, #4
   26838:	movne	ip, #1
   2683c:	strne	ip, [r1]
   26840:	streq	r3, [r1]
   26844:	strne	r3, [r0, #20]
   26848:	mov	r0, r2
   2684c:	bx	lr
   26850:	ldr	r0, [r4]
   26854:	bl	122dc <feof@plt>
   26858:	mov	r2, #0
   2685c:	cmp	r0, r2
   26860:	movne	r0, #2
   26864:	moveq	r0, #4
   26868:	str	r0, [r5]
   2686c:	b	2681c <__assert_fail@plt+0x14228>
   26870:	ldr	r3, [r0]
   26874:	cmp	r3, #0
   26878:	ldreq	r3, [r0, #20]
   2687c:	ldrne	r0, [r0, #4]
   26880:	ldreq	r0, [r0, #16]
   26884:	subeq	r0, r3, r0
   26888:	asreq	r0, r0, #2
   2688c:	bx	lr
   26890:	ldr	r3, [r0]
   26894:	push	{r4, lr}
   26898:	cmp	r3, #0
   2689c:	mov	r4, r0
   268a0:	beq	268ac <__assert_fail@plt+0x142b8>
   268a4:	ldr	r0, [r0, #8]
   268a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   268ac:	mov	r0, r4
   268b0:	pop	{r4, lr}
   268b4:	b	376d0 <__assert_fail@plt+0x250dc>
   268b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   268bc:	sub	sp, sp, #1024	; 0x400
   268c0:	sub	sp, sp, #8
   268c4:	ldr	ip, [pc, #428]	; 26a78 <__assert_fail@plt+0x14484>
   268c8:	ldr	r6, [sp, #1064]	; 0x428
   268cc:	mov	r8, r0
   268d0:	cmp	r6, #0
   268d4:	moveq	r6, ip
   268d8:	subs	r7, r2, #0
   268dc:	mov	r9, r1
   268e0:	ldr	sl, [sp, #1068]	; 0x42c
   268e4:	beq	26a38 <__assert_fail@plt+0x14444>
   268e8:	mvn	r4, #-2147483648	; 0x80000000
   268ec:	cmp	r3, r4
   268f0:	movcc	r4, r3
   268f4:	mov	r5, r7
   268f8:	mov	r1, r9
   268fc:	mov	r3, r4
   26900:	mov	r2, r5
   26904:	mov	r0, r8
   26908:	blx	sl
   2690c:	subs	r1, r0, #0
   26910:	mov	r0, r5
   26914:	blt	2698c <__assert_fail@plt+0x14398>
   26918:	cmp	r1, r4
   2691c:	blt	269c8 <__assert_fail@plt+0x143d4>
   26920:	cmp	r7, r5
   26924:	beq	26930 <__assert_fail@plt+0x1433c>
   26928:	ldr	r3, [r6, #8]
   2692c:	blx	r3
   26930:	lsl	r3, r4, #1
   26934:	cmn	r4, #-1073741822	; 0xc0000002
   26938:	add	r4, r3, #1
   2693c:	mov	r0, r4
   26940:	bgt	26a18 <__assert_fail@plt+0x14424>
   26944:	ldr	r3, [r6]
   26948:	blx	r3
   2694c:	mov	r3, r4
   26950:	subs	r5, r0, #0
   26954:	bne	268f8 <__assert_fail@plt+0x14304>
   26958:	ldr	r2, [r6, #12]
   2695c:	cmp	r2, #0
   26960:	beq	2696c <__assert_fail@plt+0x14378>
   26964:	mov	r0, r3
   26968:	blx	r2
   2696c:	bl	12348 <__errno_location@plt>
   26970:	mov	r5, #0
   26974:	mov	r3, #12
   26978:	str	r3, [r0]
   2697c:	mov	r0, r5
   26980:	add	sp, sp, #1024	; 0x400
   26984:	add	sp, sp, #8
   26988:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2698c:	cmp	r7, r5
   26990:	moveq	r5, #0
   26994:	beq	2697c <__assert_fail@plt+0x14388>
   26998:	bl	12348 <__errno_location@plt>
   2699c:	ldr	r3, [r6, #8]
   269a0:	mov	r4, r0
   269a4:	ldr	r6, [r0]
   269a8:	mov	r0, r5
   269ac:	blx	r3
   269b0:	mov	r5, #0
   269b4:	mov	r0, r5
   269b8:	str	r6, [r4]
   269bc:	add	sp, sp, #1024	; 0x400
   269c0:	add	sp, sp, #8
   269c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   269c8:	add	r3, sp, #8
   269cc:	cmp	r5, r3
   269d0:	mov	r3, #0
   269d4:	strb	r3, [r5, r1]
   269d8:	add	r1, r1, #1
   269dc:	beq	26a44 <__assert_fail@plt+0x14450>
   269e0:	cmp	r7, r5
   269e4:	cmpne	r1, r4
   269e8:	bge	2697c <__assert_fail@plt+0x14388>
   269ec:	ldr	r3, [r6, #4]
   269f0:	cmp	r3, #0
   269f4:	beq	2697c <__assert_fail@plt+0x14388>
   269f8:	mov	r0, r5
   269fc:	blx	r3
   26a00:	cmp	r0, #0
   26a04:	movne	r5, r0
   26a08:	mov	r0, r5
   26a0c:	add	sp, sp, #1024	; 0x400
   26a10:	add	sp, sp, #8
   26a14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26a18:	bl	12348 <__errno_location@plt>
   26a1c:	mov	r5, #0
   26a20:	mov	r3, #36	; 0x24
   26a24:	str	r3, [r0]
   26a28:	mov	r0, r5
   26a2c:	add	sp, sp, #1024	; 0x400
   26a30:	add	sp, sp, #8
   26a34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26a38:	mov	r4, #1024	; 0x400
   26a3c:	add	r7, sp, #8
   26a40:	b	268f4 <__assert_fail@plt+0x14300>
   26a44:	ldr	r3, [r6]
   26a48:	mov	r0, r1
   26a4c:	str	r1, [sp, #4]
   26a50:	blx	r3
   26a54:	ldr	r1, [sp, #4]
   26a58:	mov	r3, r1
   26a5c:	cmp	r0, #0
   26a60:	beq	26958 <__assert_fail@plt+0x14364>
   26a64:	mov	r2, r1
   26a68:	mov	r1, r5
   26a6c:	bl	12024 <memcpy@plt>
   26a70:	mov	r5, r0
   26a74:	b	2697c <__assert_fail@plt+0x14388>
   26a78:	andeq	r3, r5, r8, ror #25
   26a7c:	push	{r4, r5, r6, lr}
   26a80:	mov	r2, #0
   26a84:	mov	r4, r1
   26a88:	mov	r1, #1
   26a8c:	mov	r5, r0
   26a90:	bl	3749c <__assert_fail@plt+0x24ea8>
   26a94:	cmp	r0, #0
   26a98:	blt	26ad8 <__assert_fail@plt+0x144e4>
   26a9c:	cmp	r4, #0
   26aa0:	orrne	r2, r0, #1
   26aa4:	biceq	r2, r0, #1
   26aa8:	cmp	r2, r0
   26aac:	beq	26ad0 <__assert_fail@plt+0x144dc>
   26ab0:	mov	r0, r5
   26ab4:	mov	r1, #2
   26ab8:	bl	3749c <__assert_fail@plt+0x24ea8>
   26abc:	cmn	r0, #1
   26ac0:	movne	r0, #0
   26ac4:	moveq	r0, #1
   26ac8:	rsb	r0, r0, #0
   26acc:	pop	{r4, r5, r6, pc}
   26ad0:	mov	r0, #0
   26ad4:	pop	{r4, r5, r6, pc}
   26ad8:	mvn	r0, #0
   26adc:	pop	{r4, r5, r6, pc}
   26ae0:	mov	r2, #0
   26ae4:	ldr	r1, [pc]	; 26aec <__assert_fail@plt+0x144f8>
   26ae8:	b	3749c <__assert_fail@plt+0x24ea8>
   26aec:	andeq	r0, r0, r6, lsl #8
   26af0:	ldr	r3, [pc, #4]	; 26afc <__assert_fail@plt+0x14508>
   26af4:	str	r0, [r3]
   26af8:	bx	lr
   26afc:	andeq	r4, r6, ip, ror #25
   26b00:	ldr	r3, [pc, #4]	; 26b0c <__assert_fail@plt+0x14518>
   26b04:	strb	r0, [r3, #4]
   26b08:	bx	lr
   26b0c:	andeq	r4, r6, ip, ror #25
   26b10:	ldr	r3, [pc, #192]	; 26bd8 <__assert_fail@plt+0x145e4>
   26b14:	push	{r4, r5, r6, lr}
   26b18:	sub	sp, sp, #8
   26b1c:	ldr	r0, [r3]
   26b20:	bl	4cbec <__assert_fail@plt+0x3a5f8>
   26b24:	cmp	r0, #0
   26b28:	beq	26b4c <__assert_fail@plt+0x14558>
   26b2c:	ldr	r4, [pc, #168]	; 26bdc <__assert_fail@plt+0x145e8>
   26b30:	ldrb	r3, [r4, #4]
   26b34:	cmp	r3, #0
   26b38:	beq	26b68 <__assert_fail@plt+0x14574>
   26b3c:	bl	12348 <__errno_location@plt>
   26b40:	ldr	r3, [r0]
   26b44:	cmp	r3, #32
   26b48:	bne	26b68 <__assert_fail@plt+0x14574>
   26b4c:	ldr	r3, [pc, #140]	; 26be0 <__assert_fail@plt+0x145ec>
   26b50:	ldr	r0, [r3]
   26b54:	bl	4cbec <__assert_fail@plt+0x3a5f8>
   26b58:	cmp	r0, #0
   26b5c:	bne	26bb0 <__assert_fail@plt+0x145bc>
   26b60:	add	sp, sp, #8
   26b64:	pop	{r4, r5, r6, pc}
   26b68:	mov	r2, #5
   26b6c:	ldr	r1, [pc, #112]	; 26be4 <__assert_fail@plt+0x145f0>
   26b70:	mov	r0, #0
   26b74:	bl	120b4 <dcgettext@plt>
   26b78:	ldr	r4, [r4]
   26b7c:	cmp	r4, #0
   26b80:	mov	r5, r0
   26b84:	beq	26bbc <__assert_fail@plt+0x145c8>
   26b88:	bl	12348 <__errno_location@plt>
   26b8c:	ldr	r6, [r0]
   26b90:	mov	r0, r4
   26b94:	bl	330e0 <__assert_fail@plt+0x20aec>
   26b98:	mov	r1, r6
   26b9c:	str	r5, [sp]
   26ba0:	ldr	r2, [pc, #64]	; 26be8 <__assert_fail@plt+0x145f4>
   26ba4:	mov	r3, r0
   26ba8:	mov	r0, #0
   26bac:	bl	121ec <error@plt>
   26bb0:	ldr	r3, [pc, #52]	; 26bec <__assert_fail@plt+0x145f8>
   26bb4:	ldr	r0, [r3]
   26bb8:	bl	12018 <_exit@plt>
   26bbc:	bl	12348 <__errno_location@plt>
   26bc0:	mov	r3, r5
   26bc4:	ldr	r2, [pc, #36]	; 26bf0 <__assert_fail@plt+0x145fc>
   26bc8:	ldr	r1, [r0]
   26bcc:	mov	r0, r4
   26bd0:	bl	121ec <error@plt>
   26bd4:	b	26bb0 <__assert_fail@plt+0x145bc>
   26bd8:	andeq	r4, r6, r4, asr r5
   26bdc:	andeq	r4, r6, ip, ror #25
   26be0:	andeq	r4, r6, r8, asr #10
   26be4:			; <UNDEFINED> instruction: 0x000524b4
   26be8:	andeq	r2, r5, r0, asr #9
   26bec:	strdeq	r4, [r6], -r0
   26bf0:	andeq	r2, r5, r4, asr #9
   26bf4:	push	{r4, r5, r6, r7, r8, lr}
   26bf8:	bl	12204 <opendir@plt>
   26bfc:	subs	r4, r0, #0
   26c00:	beq	26c10 <__assert_fail@plt+0x1461c>
   26c04:	bl	124ec <dirfd@plt>
   26c08:	cmp	r0, #2
   26c0c:	bls	26c18 <__assert_fail@plt+0x14624>
   26c10:	mov	r0, r4
   26c14:	pop	{r4, r5, r6, r7, r8, pc}
   26c18:	mov	r2, #3
   26c1c:	ldr	r1, [pc, #92]	; 26c80 <__assert_fail@plt+0x1468c>
   26c20:	bl	3749c <__assert_fail@plt+0x24ea8>
   26c24:	subs	r8, r0, #0
   26c28:	blt	26c60 <__assert_fail@plt+0x1466c>
   26c2c:	bl	124c8 <fdopendir@plt>
   26c30:	mov	r6, r0
   26c34:	bl	12348 <__errno_location@plt>
   26c38:	cmp	r6, #0
   26c3c:	mov	r5, r0
   26c40:	ldr	r7, [r0]
   26c44:	beq	26c74 <__assert_fail@plt+0x14680>
   26c48:	mov	r0, r4
   26c4c:	mov	r4, r6
   26c50:	bl	125c4 <closedir@plt>
   26c54:	str	r7, [r5]
   26c58:	mov	r0, r4
   26c5c:	pop	{r4, r5, r6, r7, r8, pc}
   26c60:	bl	12348 <__errno_location@plt>
   26c64:	mov	r6, #0
   26c68:	mov	r5, r0
   26c6c:	ldr	r7, [r0]
   26c70:	b	26c48 <__assert_fail@plt+0x14654>
   26c74:	mov	r0, r8
   26c78:	bl	125ac <close@plt>
   26c7c:	b	26c48 <__assert_fail@plt+0x14654>
   26c80:	andeq	r0, r0, r6, lsl #8
   26c84:	push	{r4, r5, r6, lr}
   26c88:	mov	r5, r0
   26c8c:	bl	4cb40 <__assert_fail@plt+0x3a54c>
   26c90:	ldrb	r3, [r0]
   26c94:	cmp	r3, #0
   26c98:	bne	26cc8 <__assert_fail@plt+0x146d4>
   26c9c:	mov	r0, r5
   26ca0:	bl	4cb9c <__assert_fail@plt+0x3a5a8>
   26ca4:	mov	r4, r0
   26ca8:	add	r0, r4, #1
   26cac:	bl	35650 <__assert_fail@plt+0x2305c>
   26cb0:	mov	r2, r4
   26cb4:	mov	r1, r5
   26cb8:	bl	12024 <memcpy@plt>
   26cbc:	mov	r2, #0
   26cc0:	strb	r2, [r0, r4]
   26cc4:	pop	{r4, r5, r6, pc}
   26cc8:	mov	r4, r0
   26ccc:	bl	4cb9c <__assert_fail@plt+0x3a5a8>
   26cd0:	mov	r5, r4
   26cd4:	ldrb	r4, [r4, r0]
   26cd8:	cmp	r4, #47	; 0x2f
   26cdc:	movne	r4, r0
   26ce0:	addeq	r4, r0, #1
   26ce4:	b	26ca8 <__assert_fail@plt+0x146b4>
   26ce8:	push	{r4, r5, r6, lr}
   26cec:	mov	r5, r0
   26cf0:	ldrb	r4, [r0]
   26cf4:	bl	4cb40 <__assert_fail@plt+0x3a54c>
   26cf8:	sub	r4, r4, #47	; 0x2f
   26cfc:	clz	r4, r4
   26d00:	lsr	r4, r4, #5
   26d04:	sub	r0, r0, r5
   26d08:	cmp	r0, r4
   26d0c:	bls	26d58 <__assert_fail@plt+0x14764>
   26d10:	sub	r3, r0, #1
   26d14:	add	r2, r5, r3
   26d18:	ldrb	r1, [r5, r3]
   26d1c:	cmp	r1, #47	; 0x2f
   26d20:	beq	26d3c <__assert_fail@plt+0x14748>
   26d24:	b	26d58 <__assert_fail@plt+0x14764>
   26d28:	ldrb	r1, [r2, #-1]!
   26d2c:	sub	r0, r3, #1
   26d30:	cmp	r1, #47	; 0x2f
   26d34:	bne	26d4c <__assert_fail@plt+0x14758>
   26d38:	mov	r3, r0
   26d3c:	cmp	r4, r3
   26d40:	bne	26d28 <__assert_fail@plt+0x14734>
   26d44:	mov	r0, r4
   26d48:	pop	{r4, r5, r6, pc}
   26d4c:	mov	r4, r3
   26d50:	mov	r0, r4
   26d54:	pop	{r4, r5, r6, pc}
   26d58:	mov	r4, r0
   26d5c:	b	26d44 <__assert_fail@plt+0x14750>
   26d60:	push	{r4, r5, r6, r7, r8, lr}
   26d64:	mov	r6, r0
   26d68:	ldrb	r4, [r0]
   26d6c:	bl	4cb40 <__assert_fail@plt+0x3a54c>
   26d70:	sub	r4, r4, #47	; 0x2f
   26d74:	clz	r4, r4
   26d78:	lsr	r4, r4, #5
   26d7c:	sub	r5, r0, r6
   26d80:	cmp	r5, r4
   26d84:	bls	26e40 <__assert_fail@plt+0x1484c>
   26d88:	sub	r3, r5, #1
   26d8c:	add	r2, r6, r3
   26d90:	ldrb	r1, [r6, r3]
   26d94:	cmp	r1, #47	; 0x2f
   26d98:	beq	26db4 <__assert_fail@plt+0x147c0>
   26d9c:	b	26e10 <__assert_fail@plt+0x1481c>
   26da0:	ldrb	r0, [r2, #-1]!
   26da4:	sub	ip, r3, #1
   26da8:	cmp	r0, #47	; 0x2f
   26dac:	bne	26e0c <__assert_fail@plt+0x14818>
   26db0:	mov	r3, ip
   26db4:	cmp	r4, r3
   26db8:	bne	26da0 <__assert_fail@plt+0x147ac>
   26dbc:	eor	r3, r4, #1
   26dc0:	and	r3, r3, #1
   26dc4:	add	r0, r4, #1
   26dc8:	add	r0, r0, r3
   26dcc:	uxtb	r5, r3
   26dd0:	bl	3a010 <__assert_fail@plt+0x27a1c>
   26dd4:	subs	r7, r0, #0
   26dd8:	beq	26e38 <__assert_fail@plt+0x14844>
   26ddc:	mov	r1, r6
   26de0:	mov	r2, r4
   26de4:	bl	12024 <memcpy@plt>
   26de8:	cmp	r5, #0
   26dec:	movne	r5, #1
   26df0:	moveq	r5, r4
   26df4:	movne	r3, #46	; 0x2e
   26df8:	strbne	r3, [r7]
   26dfc:	mov	r3, #0
   26e00:	strb	r3, [r7, r5]
   26e04:	mov	r0, r7
   26e08:	pop	{r4, r5, r6, r7, r8, pc}
   26e0c:	mov	r5, r3
   26e10:	add	r0, r5, #1
   26e14:	cmp	r5, #0
   26e18:	addeq	r0, r0, #1
   26e1c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   26e20:	subs	r7, r0, #0
   26e24:	beq	26e38 <__assert_fail@plt+0x14844>
   26e28:	mov	r1, r6
   26e2c:	mov	r2, r5
   26e30:	bl	12024 <memcpy@plt>
   26e34:	b	26dfc <__assert_fail@plt+0x14808>
   26e38:	mov	r7, #0
   26e3c:	b	26e04 <__assert_fail@plt+0x14810>
   26e40:	mov	r4, r5
   26e44:	b	26dbc <__assert_fail@plt+0x147c8>
   26e48:	push	{r4, lr}
   26e4c:	mov	r4, r0
   26e50:	bl	4cb40 <__assert_fail@plt+0x3a54c>
   26e54:	ldrb	r3, [r0]
   26e58:	cmp	r3, #0
   26e5c:	movne	r4, r0
   26e60:	mov	r0, r4
   26e64:	bl	4cb9c <__assert_fail@plt+0x3a5a8>
   26e68:	mov	r2, #0
   26e6c:	ldrb	r3, [r4, r0]
   26e70:	strb	r2, [r4, r0]
   26e74:	subs	r0, r3, r2
   26e78:	movne	r0, #1
   26e7c:	pop	{r4, pc}
   26e80:	push	{r1, r2, r3}
   26e84:	push	{lr}		; (str lr, [sp, #-4]!)
   26e88:	sub	sp, sp, #8
   26e8c:	ldr	r1, [sp, #12]
   26e90:	ands	r2, r1, #64	; 0x40
   26e94:	addne	r3, sp, #16
   26e98:	ldrne	r2, [sp, #16]
   26e9c:	strne	r3, [sp, #4]
   26ea0:	bl	1221c <open64@plt>
   26ea4:	bl	34cac <__assert_fail@plt+0x226b8>
   26ea8:	add	sp, sp, #8
   26eac:	pop	{lr}		; (ldr lr, [sp], #4)
   26eb0:	add	sp, sp, #12
   26eb4:	bx	lr
   26eb8:	and	r3, r0, #61440	; 0xf000
   26ebc:	cmp	r3, #32768	; 0x8000
   26ec0:	moveq	r3, #45	; 0x2d
   26ec4:	beq	26f10 <__assert_fail@plt+0x1491c>
   26ec8:	cmp	r3, #16384	; 0x4000
   26ecc:	moveq	r3, #100	; 0x64
   26ed0:	beq	26f10 <__assert_fail@plt+0x1491c>
   26ed4:	cmp	r3, #24576	; 0x6000
   26ed8:	moveq	r3, #98	; 0x62
   26edc:	beq	26f10 <__assert_fail@plt+0x1491c>
   26ee0:	cmp	r3, #8192	; 0x2000
   26ee4:	moveq	r3, #99	; 0x63
   26ee8:	beq	26f10 <__assert_fail@plt+0x1491c>
   26eec:	cmp	r3, #40960	; 0xa000
   26ef0:	moveq	r3, #108	; 0x6c
   26ef4:	beq	26f10 <__assert_fail@plt+0x1491c>
   26ef8:	cmp	r3, #4096	; 0x1000
   26efc:	moveq	r3, #112	; 0x70
   26f00:	beq	26f10 <__assert_fail@plt+0x1491c>
   26f04:	cmp	r3, #49152	; 0xc000
   26f08:	moveq	r3, #115	; 0x73
   26f0c:	movne	r3, #63	; 0x3f
   26f10:	tst	r0, #256	; 0x100
   26f14:	movne	ip, #114	; 0x72
   26f18:	moveq	ip, #45	; 0x2d
   26f1c:	tst	r0, #128	; 0x80
   26f20:	movne	r2, #119	; 0x77
   26f24:	moveq	r2, #45	; 0x2d
   26f28:	tst	r0, #2048	; 0x800
   26f2c:	strb	r3, [r1]
   26f30:	strb	ip, [r1, #1]
   26f34:	strb	r2, [r1, #2]
   26f38:	beq	26fd0 <__assert_fail@plt+0x149dc>
   26f3c:	tst	r0, #64	; 0x40
   26f40:	movne	ip, #115	; 0x73
   26f44:	moveq	ip, #83	; 0x53
   26f48:	tst	r0, #32
   26f4c:	movne	r2, #114	; 0x72
   26f50:	moveq	r2, #45	; 0x2d
   26f54:	tst	r0, #16
   26f58:	movne	r3, #119	; 0x77
   26f5c:	moveq	r3, #45	; 0x2d
   26f60:	tst	r0, #1024	; 0x400
   26f64:	strb	ip, [r1, #3]
   26f68:	strb	r2, [r1, #4]
   26f6c:	strb	r3, [r1, #5]
   26f70:	beq	26ff0 <__assert_fail@plt+0x149fc>
   26f74:	tst	r0, #8
   26f78:	movne	ip, #115	; 0x73
   26f7c:	moveq	ip, #83	; 0x53
   26f80:	tst	r0, #4
   26f84:	movne	r2, #114	; 0x72
   26f88:	moveq	r2, #45	; 0x2d
   26f8c:	tst	r0, #2
   26f90:	movne	r3, #119	; 0x77
   26f94:	moveq	r3, #45	; 0x2d
   26f98:	tst	r0, #512	; 0x200
   26f9c:	strb	ip, [r1, #6]
   26fa0:	strb	r2, [r1, #7]
   26fa4:	strb	r3, [r1, #8]
   26fa8:	beq	26fe0 <__assert_fail@plt+0x149ec>
   26fac:	tst	r0, #1
   26fb0:	movne	r0, #116	; 0x74
   26fb4:	moveq	r0, #84	; 0x54
   26fb8:	mov	r2, #32
   26fbc:	mov	r3, #0
   26fc0:	strb	r0, [r1, #9]
   26fc4:	strb	r2, [r1, #10]
   26fc8:	strb	r3, [r1, #11]
   26fcc:	bx	lr
   26fd0:	tst	r0, #64	; 0x40
   26fd4:	movne	ip, #120	; 0x78
   26fd8:	moveq	ip, #45	; 0x2d
   26fdc:	b	26f48 <__assert_fail@plt+0x14954>
   26fe0:	tst	r0, #1
   26fe4:	movne	r0, #120	; 0x78
   26fe8:	moveq	r0, #45	; 0x2d
   26fec:	b	26fb8 <__assert_fail@plt+0x149c4>
   26ff0:	tst	r0, #8
   26ff4:	movne	ip, #120	; 0x78
   26ff8:	moveq	ip, #45	; 0x2d
   26ffc:	b	26f80 <__assert_fail@plt+0x1498c>
   27000:	ldr	r3, [r0, #16]
   27004:	and	r2, r3, #61440	; 0xf000
   27008:	cmp	r2, #32768	; 0x8000
   2700c:	moveq	r2, #45	; 0x2d
   27010:	beq	2705c <__assert_fail@plt+0x14a68>
   27014:	cmp	r2, #16384	; 0x4000
   27018:	moveq	r2, #100	; 0x64
   2701c:	beq	2705c <__assert_fail@plt+0x14a68>
   27020:	cmp	r2, #24576	; 0x6000
   27024:	moveq	r2, #98	; 0x62
   27028:	beq	2705c <__assert_fail@plt+0x14a68>
   2702c:	cmp	r2, #8192	; 0x2000
   27030:	moveq	r2, #99	; 0x63
   27034:	beq	2705c <__assert_fail@plt+0x14a68>
   27038:	cmp	r2, #40960	; 0xa000
   2703c:	moveq	r2, #108	; 0x6c
   27040:	beq	2705c <__assert_fail@plt+0x14a68>
   27044:	cmp	r2, #4096	; 0x1000
   27048:	moveq	r2, #112	; 0x70
   2704c:	beq	2705c <__assert_fail@plt+0x14a68>
   27050:	cmp	r2, #49152	; 0xc000
   27054:	moveq	r2, #115	; 0x73
   27058:	movne	r2, #63	; 0x3f
   2705c:	tst	r3, #256	; 0x100
   27060:	movne	ip, #114	; 0x72
   27064:	moveq	ip, #45	; 0x2d
   27068:	tst	r3, #128	; 0x80
   2706c:	movne	r0, #119	; 0x77
   27070:	moveq	r0, #45	; 0x2d
   27074:	tst	r3, #2048	; 0x800
   27078:	strb	r2, [r1]
   2707c:	strb	ip, [r1, #1]
   27080:	strb	r0, [r1, #2]
   27084:	beq	2711c <__assert_fail@plt+0x14b28>
   27088:	tst	r3, #64	; 0x40
   2708c:	movne	ip, #115	; 0x73
   27090:	moveq	ip, #83	; 0x53
   27094:	tst	r3, #32
   27098:	movne	r0, #114	; 0x72
   2709c:	moveq	r0, #45	; 0x2d
   270a0:	tst	r3, #16
   270a4:	movne	r2, #119	; 0x77
   270a8:	moveq	r2, #45	; 0x2d
   270ac:	tst	r3, #1024	; 0x400
   270b0:	strb	ip, [r1, #3]
   270b4:	strb	r0, [r1, #4]
   270b8:	strb	r2, [r1, #5]
   270bc:	beq	2713c <__assert_fail@plt+0x14b48>
   270c0:	tst	r3, #8
   270c4:	movne	ip, #115	; 0x73
   270c8:	moveq	ip, #83	; 0x53
   270cc:	tst	r3, #4
   270d0:	movne	r0, #114	; 0x72
   270d4:	moveq	r0, #45	; 0x2d
   270d8:	tst	r3, #2
   270dc:	movne	r2, #119	; 0x77
   270e0:	moveq	r2, #45	; 0x2d
   270e4:	tst	r3, #512	; 0x200
   270e8:	strb	ip, [r1, #6]
   270ec:	strb	r0, [r1, #7]
   270f0:	strb	r2, [r1, #8]
   270f4:	beq	2712c <__assert_fail@plt+0x14b38>
   270f8:	tst	r3, #1
   270fc:	movne	r0, #116	; 0x74
   27100:	moveq	r0, #84	; 0x54
   27104:	mov	r2, #32
   27108:	mov	r3, #0
   2710c:	strb	r0, [r1, #9]
   27110:	strb	r2, [r1, #10]
   27114:	strb	r3, [r1, #11]
   27118:	bx	lr
   2711c:	tst	r3, #64	; 0x40
   27120:	movne	ip, #120	; 0x78
   27124:	moveq	ip, #45	; 0x2d
   27128:	b	27094 <__assert_fail@plt+0x14aa0>
   2712c:	tst	r3, #1
   27130:	movne	r0, #120	; 0x78
   27134:	moveq	r0, #45	; 0x2d
   27138:	b	27104 <__assert_fail@plt+0x14b10>
   2713c:	tst	r3, #8
   27140:	movne	ip, #120	; 0x78
   27144:	moveq	ip, #45	; 0x2d
   27148:	b	270cc <__assert_fail@plt+0x14ad8>
   2714c:	push	{r4, r5, r6, lr}
   27150:	mov	r5, r1
   27154:	bl	12504 <fopen64@plt>
   27158:	subs	r4, r0, #0
   2715c:	beq	2716c <__assert_fail@plt+0x14b78>
   27160:	bl	123c0 <fileno@plt>
   27164:	cmp	r0, #2
   27168:	bls	27174 <__assert_fail@plt+0x14b80>
   2716c:	mov	r0, r4
   27170:	pop	{r4, r5, r6, pc}
   27174:	bl	34ca0 <__assert_fail@plt+0x226ac>
   27178:	subs	r6, r0, #0
   2717c:	blt	271c4 <__assert_fail@plt+0x14bd0>
   27180:	mov	r0, r4
   27184:	bl	123fc <fclose@plt>
   27188:	cmp	r0, #0
   2718c:	bne	271a4 <__assert_fail@plt+0x14bb0>
   27190:	mov	r1, r5
   27194:	mov	r0, r6
   27198:	bl	11eb0 <fdopen@plt>
   2719c:	subs	r4, r0, #0
   271a0:	bne	2716c <__assert_fail@plt+0x14b78>
   271a4:	bl	12348 <__errno_location@plt>
   271a8:	mov	r4, #0
   271ac:	mov	r5, r0
   271b0:	mov	r0, r6
   271b4:	ldr	r6, [r5]
   271b8:	bl	125ac <close@plt>
   271bc:	str	r6, [r5]
   271c0:	b	2716c <__assert_fail@plt+0x14b78>
   271c4:	bl	12348 <__errno_location@plt>
   271c8:	mov	r5, r0
   271cc:	mov	r0, r4
   271d0:	ldr	r6, [r5]
   271d4:	mov	r4, #0
   271d8:	bl	123fc <fclose@plt>
   271dc:	str	r6, [r5]
   271e0:	b	2716c <__assert_fail@plt+0x14b78>
   271e4:	andeq	r0, r0, r0
   271e8:	push	{r4, lr}
   271ec:	ror	r0, r0, #3
   271f0:	bl	4d570 <__assert_fail@plt+0x3af7c>
   271f4:	mov	r0, r1
   271f8:	pop	{r4, pc}
   271fc:	sub	r0, r1, r0
   27200:	clz	r0, r0
   27204:	lsr	r0, r0, #5
   27208:	bx	lr
   2720c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27210:	mov	r5, r1
   27214:	mov	r6, r0
   27218:	ldr	r4, [r0, #24]
   2721c:	ldr	r1, [r0, #8]
   27220:	mov	r0, r5
   27224:	mov	r8, r3
   27228:	mov	sl, r2
   2722c:	blx	r4
   27230:	ldr	r3, [r6, #8]
   27234:	cmp	r0, r3
   27238:	bcs	27328 <__assert_fail@plt+0x14d34>
   2723c:	ldr	r9, [r6]
   27240:	mov	r7, r0
   27244:	add	r4, r9, r0, lsl #3
   27248:	str	r4, [sl]
   2724c:	ldr	r3, [r9, r0, lsl #3]
   27250:	cmp	r3, #0
   27254:	beq	272e8 <__assert_fail@plt+0x14cf4>
   27258:	cmp	r5, r3
   2725c:	beq	2727c <__assert_fail@plt+0x14c88>
   27260:	mov	r1, r3
   27264:	mov	r0, r5
   27268:	ldr	r3, [r6, #28]
   2726c:	blx	r3
   27270:	cmp	r0, #0
   27274:	beq	272dc <__assert_fail@plt+0x14ce8>
   27278:	ldr	r3, [r9, r7, lsl #3]
   2727c:	cmp	r8, #0
   27280:	beq	272ac <__assert_fail@plt+0x14cb8>
   27284:	ldr	r2, [r4, #4]
   27288:	cmp	r2, #0
   2728c:	movne	ip, #0
   27290:	ldmne	r2, {r0, r1}
   27294:	streq	r2, [r9, r7, lsl #3]
   27298:	stmne	r4, {r0, r1}
   2729c:	strne	ip, [r2]
   272a0:	ldrne	r1, [r6, #36]	; 0x24
   272a4:	strne	r1, [r2, #4]
   272a8:	strne	r2, [r6, #36]	; 0x24
   272ac:	mov	r0, r3
   272b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   272b4:	ldr	r3, [r2]
   272b8:	cmp	r5, r3
   272bc:	beq	272fc <__assert_fail@plt+0x14d08>
   272c0:	mov	r1, r3
   272c4:	mov	r0, r5
   272c8:	ldr	r3, [r6, #28]
   272cc:	blx	r3
   272d0:	cmp	r0, #0
   272d4:	bne	272f4 <__assert_fail@plt+0x14d00>
   272d8:	ldr	r4, [r4, #4]
   272dc:	ldr	r2, [r4, #4]
   272e0:	cmp	r2, #0
   272e4:	bne	272b4 <__assert_fail@plt+0x14cc0>
   272e8:	mov	r3, #0
   272ec:	mov	r0, r3
   272f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   272f4:	ldr	r2, [r4, #4]
   272f8:	ldr	r3, [r2]
   272fc:	cmp	r8, #0
   27300:	beq	272ac <__assert_fail@plt+0x14cb8>
   27304:	ldr	r0, [r2, #4]
   27308:	mov	r1, #0
   2730c:	str	r0, [r4, #4]
   27310:	str	r1, [r2]
   27314:	ldr	r1, [r6, #36]	; 0x24
   27318:	mov	r0, r3
   2731c:	str	r1, [r2, #4]
   27320:	str	r2, [r6, #36]	; 0x24
   27324:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27328:	bl	125a0 <abort@plt>
   2732c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27330:	ldr	r6, [r1]
   27334:	ldr	r3, [r1, #4]
   27338:	cmp	r6, r3
   2733c:	bcs	2740c <__assert_fail@plt+0x14e18>
   27340:	mov	r9, r2
   27344:	mov	r5, r0
   27348:	mov	r8, r1
   2734c:	add	r6, r6, #8
   27350:	mov	sl, #0
   27354:	ldr	fp, [r6, #-8]
   27358:	mov	r7, r6
   2735c:	cmp	fp, #0
   27360:	beq	27400 <__assert_fail@plt+0x14e0c>
   27364:	ldr	r4, [r6, #-4]
   27368:	cmp	r4, #0
   2736c:	beq	273f0 <__assert_fail@plt+0x14dfc>
   27370:	ldr	r1, [r5, #8]
   27374:	b	27390 <__assert_fail@plt+0x14d9c>
   27378:	ldr	r3, [ip, #4]
   2737c:	cmp	r2, #0
   27380:	str	r3, [r4, #4]
   27384:	str	r4, [ip, #4]
   27388:	beq	273ec <__assert_fail@plt+0x14df8>
   2738c:	mov	r4, r2
   27390:	ldr	fp, [r4]
   27394:	ldr	r3, [r5, #24]
   27398:	mov	r0, fp
   2739c:	blx	r3
   273a0:	ldr	r1, [r5, #8]
   273a4:	cmp	r0, r1
   273a8:	bcs	274ac <__assert_fail@plt+0x14eb8>
   273ac:	ldr	r3, [r5]
   273b0:	ldr	r2, [r4, #4]
   273b4:	add	ip, r3, r0, lsl #3
   273b8:	ldr	lr, [r3, r0, lsl #3]
   273bc:	cmp	lr, #0
   273c0:	bne	27378 <__assert_fail@plt+0x14d84>
   273c4:	ldr	ip, [r5, #12]
   273c8:	str	fp, [r3, r0, lsl #3]
   273cc:	add	r3, ip, #1
   273d0:	str	r3, [r5, #12]
   273d4:	str	lr, [r4]
   273d8:	ldr	r3, [r5, #36]	; 0x24
   273dc:	cmp	r2, #0
   273e0:	str	r3, [r4, #4]
   273e4:	str	r4, [r5, #36]	; 0x24
   273e8:	bne	2738c <__assert_fail@plt+0x14d98>
   273ec:	ldr	fp, [r6, #-8]
   273f0:	cmp	r9, #0
   273f4:	str	sl, [r6, #-4]
   273f8:	beq	27414 <__assert_fail@plt+0x14e20>
   273fc:	ldr	r3, [r8, #4]
   27400:	cmp	r3, r7
   27404:	add	r6, r6, #8
   27408:	bhi	27354 <__assert_fail@plt+0x14d60>
   2740c:	mov	r0, #1
   27410:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27414:	ldr	r3, [r5, #24]
   27418:	ldr	r1, [r5, #8]
   2741c:	mov	r0, fp
   27420:	blx	r3
   27424:	ldr	r3, [r5, #8]
   27428:	cmp	r0, r3
   2742c:	bcs	274ac <__assert_fail@plt+0x14eb8>
   27430:	ldr	r3, [r5]
   27434:	add	r4, r3, r0, lsl #3
   27438:	ldr	r2, [r3, r0, lsl #3]
   2743c:	cmp	r2, #0
   27440:	beq	27480 <__assert_fail@plt+0x14e8c>
   27444:	ldr	r0, [r5, #36]	; 0x24
   27448:	cmp	r0, #0
   2744c:	beq	27494 <__assert_fail@plt+0x14ea0>
   27450:	ldr	r3, [r0, #4]
   27454:	str	r3, [r5, #36]	; 0x24
   27458:	ldr	r3, [r4, #4]
   2745c:	str	fp, [r0]
   27460:	str	r3, [r0, #4]
   27464:	str	r0, [r4, #4]
   27468:	ldr	r2, [r8, #12]
   2746c:	str	sl, [r6, #-8]
   27470:	sub	r2, r2, #1
   27474:	ldr	r3, [r8, #4]
   27478:	str	r2, [r8, #12]
   2747c:	b	27400 <__assert_fail@plt+0x14e0c>
   27480:	ldr	r2, [r5, #12]
   27484:	str	fp, [r3, r0, lsl #3]
   27488:	add	r3, r2, #1
   2748c:	str	r3, [r5, #12]
   27490:	b	27468 <__assert_fail@plt+0x14e74>
   27494:	mov	r0, #8
   27498:	bl	3a010 <__assert_fail@plt+0x27a1c>
   2749c:	cmp	r0, #0
   274a0:	bne	27458 <__assert_fail@plt+0x14e64>
   274a4:	mov	r0, r9
   274a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274ac:	bl	125a0 <abort@plt>
   274b0:	ldr	r0, [r0, #8]
   274b4:	bx	lr
   274b8:	ldr	r0, [r0, #12]
   274bc:	bx	lr
   274c0:	ldr	r0, [r0, #16]
   274c4:	bx	lr
   274c8:	ldm	r0, {r1, ip}
   274cc:	mov	r0, #0
   274d0:	cmp	r1, ip
   274d4:	bcs	2751c <__assert_fail@plt+0x14f28>
   274d8:	ldr	r3, [r1]
   274dc:	cmp	r3, #0
   274e0:	beq	2750c <__assert_fail@plt+0x14f18>
   274e4:	ldr	r3, [r1, #4]
   274e8:	mov	r2, #1
   274ec:	cmp	r3, #0
   274f0:	beq	27504 <__assert_fail@plt+0x14f10>
   274f4:	ldr	r3, [r3, #4]
   274f8:	add	r2, r2, #1
   274fc:	cmp	r3, #0
   27500:	bne	274f4 <__assert_fail@plt+0x14f00>
   27504:	cmp	r0, r2
   27508:	movcc	r0, r2
   2750c:	add	r1, r1, #8
   27510:	cmp	r1, ip
   27514:	bcc	274d8 <__assert_fail@plt+0x14ee4>
   27518:	bx	lr
   2751c:	bx	lr
   27520:	push	{lr}		; (str lr, [sp, #-4]!)
   27524:	mov	r2, #0
   27528:	ldm	r0, {r1, lr}
   2752c:	mov	ip, r2
   27530:	cmp	r1, lr
   27534:	bcs	27574 <__assert_fail@plt+0x14f80>
   27538:	ldr	r3, [r1]
   2753c:	cmp	r3, #0
   27540:	beq	27568 <__assert_fail@plt+0x14f74>
   27544:	ldr	r3, [r1, #4]
   27548:	add	ip, ip, #1
   2754c:	cmp	r3, #0
   27550:	add	r2, r2, #1
   27554:	beq	27568 <__assert_fail@plt+0x14f74>
   27558:	ldr	r3, [r3, #4]
   2755c:	add	r2, r2, #1
   27560:	cmp	r3, #0
   27564:	bne	27558 <__assert_fail@plt+0x14f64>
   27568:	add	r1, r1, #8
   2756c:	cmp	r1, lr
   27570:	bcc	27538 <__assert_fail@plt+0x14f44>
   27574:	ldr	r3, [r0, #12]
   27578:	cmp	r3, ip
   2757c:	ldreq	r0, [r0, #16]
   27580:	subeq	r0, r0, r2
   27584:	clzeq	r0, r0
   27588:	lsreq	r0, r0, #5
   2758c:	movne	r0, #0
   27590:	pop	{pc}		; (ldr pc, [sp], #4)
   27594:	push	{r4, r5, r6, r7, lr}
   27598:	mov	r5, r1
   2759c:	ldm	r0, {ip, lr}
   275a0:	sub	sp, sp, #12
   275a4:	ldr	r2, [r0, #16]
   275a8:	cmp	ip, lr
   275ac:	mov	r4, #0
   275b0:	ldr	r6, [r0, #8]
   275b4:	ldr	r7, [r0, #12]
   275b8:	bcs	275fc <__assert_fail@plt+0x15008>
   275bc:	ldr	r3, [ip]
   275c0:	cmp	r3, #0
   275c4:	beq	275f0 <__assert_fail@plt+0x14ffc>
   275c8:	ldr	r3, [ip, #4]
   275cc:	mov	r1, #1
   275d0:	cmp	r3, #0
   275d4:	beq	275e8 <__assert_fail@plt+0x14ff4>
   275d8:	ldr	r3, [r3, #4]
   275dc:	add	r1, r1, #1
   275e0:	cmp	r3, #0
   275e4:	bne	275d8 <__assert_fail@plt+0x14fe4>
   275e8:	cmp	r4, r1
   275ec:	movcc	r4, r1
   275f0:	add	ip, ip, #8
   275f4:	cmp	ip, lr
   275f8:	bcc	275bc <__assert_fail@plt+0x14fc8>
   275fc:	ldr	r1, [pc, #100]	; 27668 <__assert_fail@plt+0x15074>
   27600:	mov	r0, r5
   27604:	bl	1233c <fprintf@plt>
   27608:	mov	r2, r6
   2760c:	ldr	r1, [pc, #88]	; 2766c <__assert_fail@plt+0x15078>
   27610:	mov	r0, r5
   27614:	bl	1233c <fprintf@plt>
   27618:	vmov	s15, r7
   2761c:	vldr	d5, [pc, #60]	; 27660 <__assert_fail@plt+0x1506c>
   27620:	mov	r2, r7
   27624:	ldr	r1, [pc, #68]	; 27670 <__assert_fail@plt+0x1507c>
   27628:	vcvt.f64.u32	d6, s15
   2762c:	vmov	s15, r6
   27630:	mov	r0, r5
   27634:	vcvt.f64.u32	d7, s15
   27638:	vmul.f64	d6, d6, d5
   2763c:	vdiv.f64	d5, d6, d7
   27640:	vstr	d5, [sp]
   27644:	bl	1233c <fprintf@plt>
   27648:	mov	r2, r4
   2764c:	mov	r0, r5
   27650:	ldr	r1, [pc, #28]	; 27674 <__assert_fail@plt+0x15080>
   27654:	add	sp, sp, #12
   27658:	pop	{r4, r5, r6, r7, lr}
   2765c:	b	1233c <fprintf@plt>
   27660:	andeq	r0, r0, r0
   27664:	subsmi	r0, r9, r0
   27668:	ldrdeq	r2, [r5], -ip
   2766c:	strdeq	r2, [r5], -r4
   27670:	andeq	r2, r5, ip, lsl #10
   27674:	andeq	r2, r5, r0, lsr r5
   27678:	push	{r4, r5, r6, lr}
   2767c:	mov	r5, r1
   27680:	ldr	r3, [r0, #24]
   27684:	mov	r6, r0
   27688:	ldr	r1, [r0, #8]
   2768c:	mov	r0, r5
   27690:	blx	r3
   27694:	ldr	r3, [r6, #8]
   27698:	cmp	r0, r3
   2769c:	bcs	276fc <__assert_fail@plt+0x15108>
   276a0:	ldr	r3, [r6]
   276a4:	add	r4, r3, r0, lsl #3
   276a8:	ldr	r1, [r3, r0, lsl #3]
   276ac:	cmp	r1, #0
   276b0:	bne	276bc <__assert_fail@plt+0x150c8>
   276b4:	b	276e4 <__assert_fail@plt+0x150f0>
   276b8:	ldr	r1, [r4]
   276bc:	cmp	r5, r1
   276c0:	beq	276ec <__assert_fail@plt+0x150f8>
   276c4:	ldr	r3, [r6, #28]
   276c8:	mov	r0, r5
   276cc:	blx	r3
   276d0:	cmp	r0, #0
   276d4:	bne	276f4 <__assert_fail@plt+0x15100>
   276d8:	ldr	r4, [r4, #4]
   276dc:	cmp	r4, #0
   276e0:	bne	276b8 <__assert_fail@plt+0x150c4>
   276e4:	mov	r0, #0
   276e8:	pop	{r4, r5, r6, pc}
   276ec:	mov	r0, r5
   276f0:	pop	{r4, r5, r6, pc}
   276f4:	ldr	r0, [r4]
   276f8:	pop	{r4, r5, r6, pc}
   276fc:	bl	125a0 <abort@plt>
   27700:	ldr	r3, [r0, #16]
   27704:	cmp	r3, #0
   27708:	beq	2773c <__assert_fail@plt+0x15148>
   2770c:	ldr	r3, [r0]
   27710:	ldr	r2, [r0, #4]
   27714:	cmp	r3, r2
   27718:	bcc	2772c <__assert_fail@plt+0x15138>
   2771c:	b	27744 <__assert_fail@plt+0x15150>
   27720:	add	r3, r3, #8
   27724:	cmp	r3, r2
   27728:	bcs	27744 <__assert_fail@plt+0x15150>
   2772c:	ldr	r0, [r3]
   27730:	cmp	r0, #0
   27734:	beq	27720 <__assert_fail@plt+0x1512c>
   27738:	bx	lr
   2773c:	mov	r0, r3
   27740:	bx	lr
   27744:	push	{r4, lr}
   27748:	bl	125a0 <abort@plt>
   2774c:	push	{r4, r5, r6, lr}
   27750:	mov	r4, r1
   27754:	ldr	r3, [r0, #24]
   27758:	mov	r5, r0
   2775c:	ldr	r1, [r0, #8]
   27760:	mov	r0, r4
   27764:	blx	r3
   27768:	ldr	r3, [r5, #8]
   2776c:	cmp	r0, r3
   27770:	bcs	277d4 <__assert_fail@plt+0x151e0>
   27774:	ldr	r3, [r5]
   27778:	add	r0, r3, r0, lsl #3
   2777c:	mov	r3, r0
   27780:	b	2778c <__assert_fail@plt+0x15198>
   27784:	cmp	r3, #0
   27788:	beq	277a0 <__assert_fail@plt+0x151ac>
   2778c:	ldm	r3, {r2, r3}
   27790:	cmp	r4, r2
   27794:	bne	27784 <__assert_fail@plt+0x15190>
   27798:	cmp	r3, #0
   2779c:	bne	277cc <__assert_fail@plt+0x151d8>
   277a0:	ldr	r2, [r5, #4]
   277a4:	mov	r3, r0
   277a8:	b	277b8 <__assert_fail@plt+0x151c4>
   277ac:	ldr	r0, [r3]
   277b0:	cmp	r0, #0
   277b4:	popne	{r4, r5, r6, pc}
   277b8:	add	r3, r3, #8
   277bc:	cmp	r3, r2
   277c0:	bcc	277ac <__assert_fail@plt+0x151b8>
   277c4:	mov	r0, #0
   277c8:	pop	{r4, r5, r6, pc}
   277cc:	ldr	r0, [r3]
   277d0:	pop	{r4, r5, r6, pc}
   277d4:	bl	125a0 <abort@plt>
   277d8:	push	{r4, r5, r6, lr}
   277dc:	mov	r5, r0
   277e0:	ldr	r4, [r0]
   277e4:	ldr	r0, [r0, #4]
   277e8:	cmp	r4, r0
   277ec:	bcs	27868 <__assert_fail@plt+0x15274>
   277f0:	add	r4, r4, #8
   277f4:	mov	ip, #0
   277f8:	ldr	r3, [r4, #-8]
   277fc:	mov	r6, r4
   27800:	cmp	r3, #0
   27804:	beq	27850 <__assert_fail@plt+0x1525c>
   27808:	cmp	r2, ip
   2780c:	bls	2785c <__assert_fail@plt+0x15268>
   27810:	str	r3, [r1, ip, lsl #2]
   27814:	ldr	r3, [r4, #-4]
   27818:	add	r0, ip, #1
   2781c:	cmp	r3, #0
   27820:	add	ip, r1, ip, lsl #2
   27824:	beq	27848 <__assert_fail@plt+0x15254>
   27828:	cmp	r2, r0
   2782c:	beq	27864 <__assert_fail@plt+0x15270>
   27830:	ldr	lr, [r3]
   27834:	add	r0, r0, #1
   27838:	str	lr, [ip, #4]!
   2783c:	ldr	r3, [r3, #4]
   27840:	cmp	r3, #0
   27844:	bne	27828 <__assert_fail@plt+0x15234>
   27848:	mov	ip, r0
   2784c:	ldr	r0, [r5, #4]
   27850:	cmp	r0, r6
   27854:	add	r4, r4, #8
   27858:	bhi	277f8 <__assert_fail@plt+0x15204>
   2785c:	mov	r0, ip
   27860:	pop	{r4, r5, r6, pc}
   27864:	pop	{r4, r5, r6, pc}
   27868:	mov	r0, #0
   2786c:	pop	{r4, r5, r6, pc}
   27870:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27874:	ldr	r3, [r0, #4]
   27878:	ldr	r8, [r0]
   2787c:	cmp	r8, r3
   27880:	bcs	278e4 <__assert_fail@plt+0x152f0>
   27884:	mov	r7, r2
   27888:	mov	r6, r1
   2788c:	mov	r9, r0
   27890:	mov	r5, #0
   27894:	ldr	r0, [r8]
   27898:	cmp	r0, #0
   2789c:	beq	278d0 <__assert_fail@plt+0x152dc>
   278a0:	mov	r4, r8
   278a4:	b	278ac <__assert_fail@plt+0x152b8>
   278a8:	ldr	r0, [r4]
   278ac:	mov	r1, r7
   278b0:	blx	r6
   278b4:	cmp	r0, #0
   278b8:	beq	278dc <__assert_fail@plt+0x152e8>
   278bc:	ldr	r4, [r4, #4]
   278c0:	add	r5, r5, #1
   278c4:	cmp	r4, #0
   278c8:	bne	278a8 <__assert_fail@plt+0x152b4>
   278cc:	ldr	r3, [r9, #4]
   278d0:	add	r8, r8, #8
   278d4:	cmp	r3, r8
   278d8:	bhi	27894 <__assert_fail@plt+0x152a0>
   278dc:	mov	r0, r5
   278e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   278e4:	mov	r5, #0
   278e8:	b	278dc <__assert_fail@plt+0x152e8>
   278ec:	push	{r4, r5, r6, lr}
   278f0:	mov	r4, r0
   278f4:	ldrb	r0, [r0]
   278f8:	cmp	r0, #0
   278fc:	beq	2792c <__assert_fail@plt+0x15338>
   27900:	mov	r5, r1
   27904:	mov	r1, #0
   27908:	rsb	r1, r1, r1, lsl #5
   2790c:	add	r0, r1, r0
   27910:	mov	r1, r5
   27914:	bl	4d570 <__assert_fail@plt+0x3af7c>
   27918:	ldrb	r0, [r4, #1]!
   2791c:	cmp	r0, #0
   27920:	bne	27908 <__assert_fail@plt+0x15314>
   27924:	mov	r0, r1
   27928:	pop	{r4, r5, r6, pc}
   2792c:	mov	r1, r0
   27930:	b	27924 <__assert_fail@plt+0x15330>
   27934:	push	{lr}		; (str lr, [sp, #-4]!)
   27938:	mov	ip, r0
   2793c:	ldr	lr, [pc, #16]	; 27954 <__assert_fail@plt+0x15360>
   27940:	ldm	lr!, {r0, r1, r2, r3}
   27944:	ldr	lr, [lr]
   27948:	stmia	ip!, {r0, r1, r2, r3}
   2794c:	str	lr, [ip]
   27950:	pop	{pc}		; (ldr pc, [sp], #4)
   27954:	andeq	r2, r5, r8, asr #9
   27958:	cmp	r2, #0
   2795c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27960:	mov	r4, r0
   27964:	ldr	sl, [pc, #548]	; 27b90 <__assert_fail@plt+0x1559c>
   27968:	mov	r0, #40	; 0x28
   2796c:	movne	sl, r2
   27970:	cmp	r3, #0
   27974:	ldr	fp, [pc, #536]	; 27b94 <__assert_fail@plt+0x155a0>
   27978:	mov	r5, r1
   2797c:	movne	fp, r3
   27980:	bl	3a010 <__assert_fail@plt+0x27a1c>
   27984:	subs	r8, r0, #0
   27988:	beq	27a20 <__assert_fail@plt+0x1542c>
   2798c:	cmp	r5, #0
   27990:	ldr	r3, [pc, #512]	; 27b98 <__assert_fail@plt+0x155a4>
   27994:	beq	27a28 <__assert_fail@plt+0x15434>
   27998:	cmp	r5, r3
   2799c:	str	r5, [r8, #20]
   279a0:	beq	27a2c <__assert_fail@plt+0x15438>
   279a4:	vldr	s15, [r5, #8]
   279a8:	vldr	s14, [pc, #456]	; 27b78 <__assert_fail@plt+0x15584>
   279ac:	vcmpe.f32	s15, s14
   279b0:	vmrs	APSR_nzcv, fpscr
   279b4:	ble	27a10 <__assert_fail@plt+0x1541c>
   279b8:	vldr	s13, [pc, #444]	; 27b7c <__assert_fail@plt+0x15588>
   279bc:	vcmpe.f32	s15, s13
   279c0:	vmrs	APSR_nzcv, fpscr
   279c4:	bpl	27a10 <__assert_fail@plt+0x1541c>
   279c8:	vldr	s13, [pc, #432]	; 27b80 <__assert_fail@plt+0x1558c>
   279cc:	vldr	s12, [r5, #12]
   279d0:	vcmpe.f32	s12, s13
   279d4:	vmrs	APSR_nzcv, fpscr
   279d8:	ble	27a10 <__assert_fail@plt+0x1541c>
   279dc:	vldr	s13, [r5]
   279e0:	vcmpe.f32	s13, #0.0
   279e4:	vmrs	APSR_nzcv, fpscr
   279e8:	blt	27a10 <__assert_fail@plt+0x1541c>
   279ec:	vadd.f32	s14, s13, s14
   279f0:	vldr	s13, [r5, #4]
   279f4:	vcmpe.f32	s14, s13
   279f8:	vmrs	APSR_nzcv, fpscr
   279fc:	bpl	27a10 <__assert_fail@plt+0x1541c>
   27a00:	vldr	s12, [pc, #380]	; 27b84 <__assert_fail@plt+0x15590>
   27a04:	vcmpe.f32	s13, s12
   27a08:	vmrs	APSR_nzcv, fpscr
   27a0c:	bls	27b5c <__assert_fail@plt+0x15568>
   27a10:	str	r3, [r8, #20]
   27a14:	mov	r0, r8
   27a18:	bl	376d0 <__assert_fail@plt+0x250dc>
   27a1c:	mov	r8, #0
   27a20:	mov	r0, r8
   27a24:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a28:	str	r3, [r8, #20]
   27a2c:	vldr	s15, [pc, #340]	; 27b88 <__assert_fail@plt+0x15594>
   27a30:	vmov	s14, r4
   27a34:	vldr	s13, [pc, #336]	; 27b8c <__assert_fail@plt+0x15598>
   27a38:	vcvt.f32.u32	s12, s14
   27a3c:	vdiv.f32	s14, s12, s15
   27a40:	vcmpe.f32	s14, s13
   27a44:	vmrs	APSR_nzcv, fpscr
   27a48:	bge	27b48 <__assert_fail@plt+0x15554>
   27a4c:	vcvt.u32.f32	s15, s14
   27a50:	vmov	r4, s15
   27a54:	cmp	r4, #10
   27a58:	movcc	r4, #10
   27a5c:	orr	r7, r4, #1
   27a60:	cmn	r7, #1
   27a64:	ldrne	r9, [pc, #304]	; 27b9c <__assert_fail@plt+0x155a8>
   27a68:	beq	27ae0 <__assert_fail@plt+0x154ec>
   27a6c:	cmp	r7, #9
   27a70:	bls	27b54 <__assert_fail@plt+0x15560>
   27a74:	umull	r2, r3, r9, r7
   27a78:	lsr	r3, r3, #1
   27a7c:	add	r3, r3, r3, lsl #1
   27a80:	cmp	r7, r3
   27a84:	beq	27ad4 <__assert_fail@plt+0x154e0>
   27a88:	mov	r6, #16
   27a8c:	mov	r5, #9
   27a90:	mov	r4, #3
   27a94:	b	27aa8 <__assert_fail@plt+0x154b4>
   27a98:	bl	4d570 <__assert_fail@plt+0x3af7c>
   27a9c:	add	r6, r6, #8
   27aa0:	cmp	r1, #0
   27aa4:	beq	27ad4 <__assert_fail@plt+0x154e0>
   27aa8:	add	r5, r5, r6
   27aac:	add	r4, r4, #2
   27ab0:	cmp	r5, r7
   27ab4:	mov	r0, r7
   27ab8:	mov	r1, r4
   27abc:	bcc	27a98 <__assert_fail@plt+0x154a4>
   27ac0:	mov	r1, r4
   27ac4:	mov	r0, r7
   27ac8:	bl	4d570 <__assert_fail@plt+0x3af7c>
   27acc:	cmp	r1, #0
   27ad0:	bne	27ae0 <__assert_fail@plt+0x154ec>
   27ad4:	add	r7, r7, #2
   27ad8:	cmn	r7, #1
   27adc:	bne	27a6c <__assert_fail@plt+0x15478>
   27ae0:	lsrs	r3, r7, #30
   27ae4:	movne	r4, #1
   27ae8:	moveq	r4, #0
   27aec:	tst	r7, #536870912	; 0x20000000
   27af0:	bne	27b48 <__assert_fail@plt+0x15554>
   27af4:	cmp	r4, #0
   27af8:	bne	27b48 <__assert_fail@plt+0x15554>
   27afc:	str	r7, [r8, #8]
   27b00:	mov	r0, r7
   27b04:	mov	r1, #8
   27b08:	bl	37128 <__assert_fail@plt+0x24b34>
   27b0c:	cmp	r0, #0
   27b10:	str	r0, [r8]
   27b14:	beq	27a14 <__assert_fail@plt+0x15420>
   27b18:	ldr	r3, [r8, #8]
   27b1c:	str	r4, [r8, #12]
   27b20:	str	r4, [r8, #16]
   27b24:	add	r0, r0, r3, lsl #3
   27b28:	ldr	r3, [sp, #40]	; 0x28
   27b2c:	str	r0, [r8, #4]
   27b30:	str	sl, [r8, #24]
   27b34:	str	fp, [r8, #28]
   27b38:	str	r3, [r8, #32]
   27b3c:	str	r4, [r8, #36]	; 0x24
   27b40:	mov	r0, r8
   27b44:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b48:	mov	r3, #0
   27b4c:	str	r3, [r8, #8]
   27b50:	b	27a14 <__assert_fail@plt+0x15420>
   27b54:	mov	r4, #3
   27b58:	b	27ac0 <__assert_fail@plt+0x154cc>
   27b5c:	vcmpe.f32	s15, s14
   27b60:	vmrs	APSR_nzcv, fpscr
   27b64:	ble	27a10 <__assert_fail@plt+0x1541c>
   27b68:	ldrb	r3, [r5, #16]
   27b6c:	cmp	r3, #0
   27b70:	bne	27a54 <__assert_fail@plt+0x15460>
   27b74:	b	27a30 <__assert_fail@plt+0x1543c>
   27b78:	stclcc	12, cr12, [ip, #820]	; 0x334
   27b7c:	svccc	0x00666666
   27b80:	svccc	0x008ccccd
   27b84:	svccc	0x00800000
   27b88:	svccc	0x004ccccd
   27b8c:	svcmi	0x00800000
   27b90:	andeq	r7, r2, r8, ror #3
   27b94:	strdeq	r7, [r2], -ip
   27b98:	andeq	r2, r5, r8, asr #9
   27b9c:	bge	fead2650 <stdout@@GLIBC_2.4+0xfea6e0fc>
   27ba0:	push	{r4, r5, r6, r7, r8, lr}
   27ba4:	mov	r5, r0
   27ba8:	ldr	r7, [r0]
   27bac:	ldr	r3, [r0, #4]
   27bb0:	cmp	r7, r3
   27bb4:	addcc	r7, r7, #8
   27bb8:	movcc	r6, #0
   27bbc:	bcs	27c38 <__assert_fail@plt+0x15644>
   27bc0:	ldr	r2, [r7, #-8]
   27bc4:	mov	r8, r7
   27bc8:	cmp	r2, #0
   27bcc:	beq	27c2c <__assert_fail@plt+0x15638>
   27bd0:	ldr	r4, [r7, #-4]
   27bd4:	ldr	r2, [r5, #32]
   27bd8:	cmp	r4, #0
   27bdc:	beq	27c10 <__assert_fail@plt+0x1561c>
   27be0:	cmp	r2, #0
   27be4:	beq	27bf4 <__assert_fail@plt+0x15600>
   27be8:	ldr	r0, [r4]
   27bec:	blx	r2
   27bf0:	ldr	r2, [r5, #32]
   27bf4:	ldr	r3, [r4, #4]
   27bf8:	ldr	r1, [r5, #36]	; 0x24
   27bfc:	str	r6, [r4]
   27c00:	str	r1, [r4, #4]
   27c04:	str	r4, [r5, #36]	; 0x24
   27c08:	subs	r4, r3, #0
   27c0c:	bne	27be0 <__assert_fail@plt+0x155ec>
   27c10:	cmp	r2, #0
   27c14:	beq	27c20 <__assert_fail@plt+0x1562c>
   27c18:	ldr	r0, [r7, #-8]
   27c1c:	blx	r2
   27c20:	str	r6, [r7, #-8]
   27c24:	str	r6, [r7, #-4]
   27c28:	ldr	r3, [r5, #4]
   27c2c:	cmp	r3, r8
   27c30:	add	r7, r7, #8
   27c34:	bhi	27bc0 <__assert_fail@plt+0x155cc>
   27c38:	mov	r3, #0
   27c3c:	str	r3, [r5, #12]
   27c40:	str	r3, [r5, #16]
   27c44:	pop	{r4, r5, r6, r7, r8, pc}
   27c48:	ldr	r3, [r0, #32]
   27c4c:	push	{r4, r5, r6, lr}
   27c50:	cmp	r3, #0
   27c54:	mov	r5, r0
   27c58:	beq	27cb8 <__assert_fail@plt+0x156c4>
   27c5c:	ldr	r3, [r0, #16]
   27c60:	cmp	r3, #0
   27c64:	beq	27cb8 <__assert_fail@plt+0x156c4>
   27c68:	ldr	r6, [r0]
   27c6c:	ldr	r3, [r0, #4]
   27c70:	cmp	r6, r3
   27c74:	bcs	27cf4 <__assert_fail@plt+0x15700>
   27c78:	ldr	r0, [r6]
   27c7c:	cmp	r0, #0
   27c80:	beq	27ca8 <__assert_fail@plt+0x156b4>
   27c84:	mov	r4, r6
   27c88:	b	27c90 <__assert_fail@plt+0x1569c>
   27c8c:	ldr	r0, [r4]
   27c90:	ldr	r3, [r5, #32]
   27c94:	blx	r3
   27c98:	ldr	r4, [r4, #4]
   27c9c:	cmp	r4, #0
   27ca0:	bne	27c8c <__assert_fail@plt+0x15698>
   27ca4:	ldr	r3, [r5, #4]
   27ca8:	add	r6, r6, #8
   27cac:	cmp	r3, r6
   27cb0:	bhi	27c78 <__assert_fail@plt+0x15684>
   27cb4:	b	27cbc <__assert_fail@plt+0x156c8>
   27cb8:	ldr	r3, [r5, #4]
   27cbc:	ldr	r6, [r5]
   27cc0:	cmp	r6, r3
   27cc4:	bcs	27cf4 <__assert_fail@plt+0x15700>
   27cc8:	ldr	r0, [r6, #4]
   27ccc:	cmp	r0, #0
   27cd0:	beq	27ce8 <__assert_fail@plt+0x156f4>
   27cd4:	ldr	r4, [r0, #4]
   27cd8:	bl	376d0 <__assert_fail@plt+0x250dc>
   27cdc:	subs	r0, r4, #0
   27ce0:	bne	27cd4 <__assert_fail@plt+0x156e0>
   27ce4:	ldr	r3, [r5, #4]
   27ce8:	add	r6, r6, #8
   27cec:	cmp	r3, r6
   27cf0:	bhi	27cc8 <__assert_fail@plt+0x156d4>
   27cf4:	ldr	r0, [r5, #36]	; 0x24
   27cf8:	cmp	r0, #0
   27cfc:	beq	27d10 <__assert_fail@plt+0x1571c>
   27d00:	ldr	r4, [r0, #4]
   27d04:	bl	376d0 <__assert_fail@plt+0x250dc>
   27d08:	subs	r0, r4, #0
   27d0c:	bne	27d00 <__assert_fail@plt+0x1570c>
   27d10:	ldr	r0, [r5]
   27d14:	bl	376d0 <__assert_fail@plt+0x250dc>
   27d18:	mov	r0, r5
   27d1c:	pop	{r4, r5, r6, lr}
   27d20:	b	376d0 <__assert_fail@plt+0x250dc>
   27d24:	ldr	r3, [r0, #20]
   27d28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27d2c:	mov	r8, r0
   27d30:	ldrb	r2, [r3, #16]
   27d34:	sub	sp, sp, #40	; 0x28
   27d38:	cmp	r2, #0
   27d3c:	bne	27d68 <__assert_fail@plt+0x15774>
   27d40:	vmov	s15, r1
   27d44:	vldr	s13, [r3, #8]
   27d48:	vldr	s14, [pc, #648]	; 27fd8 <__assert_fail@plt+0x159e4>
   27d4c:	vcvt.f32.u32	s12, s15
   27d50:	vdiv.f32	s15, s12, s13
   27d54:	vcmpe.f32	s15, s14
   27d58:	vmrs	APSR_nzcv, fpscr
   27d5c:	bge	27f90 <__assert_fail@plt+0x1599c>
   27d60:	vcvt.u32.f32	s15, s15
   27d64:	vmov	r1, s15
   27d68:	cmp	r1, #10
   27d6c:	movcc	r1, #10
   27d70:	orr	r7, r1, #1
   27d74:	cmn	r7, #1
   27d78:	ldrne	r9, [pc, #604]	; 27fdc <__assert_fail@plt+0x159e8>
   27d7c:	beq	27df4 <__assert_fail@plt+0x15800>
   27d80:	cmp	r7, #9
   27d84:	bls	27fa0 <__assert_fail@plt+0x159ac>
   27d88:	umull	r2, r3, r9, r7
   27d8c:	lsr	r3, r3, #1
   27d90:	add	r3, r3, r3, lsl #1
   27d94:	cmp	r7, r3
   27d98:	beq	27de8 <__assert_fail@plt+0x157f4>
   27d9c:	mov	r6, #16
   27da0:	mov	r5, #9
   27da4:	mov	r4, #3
   27da8:	b	27dc4 <__assert_fail@plt+0x157d0>
   27dac:	mov	r1, r4
   27db0:	mov	r0, r7
   27db4:	bl	4d570 <__assert_fail@plt+0x3af7c>
   27db8:	add	r6, r6, #8
   27dbc:	cmp	r1, #0
   27dc0:	beq	27de8 <__assert_fail@plt+0x157f4>
   27dc4:	add	r5, r5, r6
   27dc8:	cmp	r5, r7
   27dcc:	add	r4, r4, #2
   27dd0:	bcc	27dac <__assert_fail@plt+0x157b8>
   27dd4:	mov	r1, r4
   27dd8:	mov	r0, r7
   27ddc:	bl	4d570 <__assert_fail@plt+0x3af7c>
   27de0:	cmp	r1, #0
   27de4:	bne	27df4 <__assert_fail@plt+0x15800>
   27de8:	add	r7, r7, #2
   27dec:	cmn	r7, #1
   27df0:	bne	27d80 <__assert_fail@plt+0x1578c>
   27df4:	lsrs	r3, r7, #30
   27df8:	movne	r4, #1
   27dfc:	moveq	r4, #0
   27e00:	tst	r7, #536870912	; 0x20000000
   27e04:	bne	27f90 <__assert_fail@plt+0x1599c>
   27e08:	cmp	r4, #0
   27e0c:	bne	27f90 <__assert_fail@plt+0x1599c>
   27e10:	ldr	r3, [r8, #8]
   27e14:	cmp	r3, r7
   27e18:	beq	27f80 <__assert_fail@plt+0x1598c>
   27e1c:	mov	r1, #8
   27e20:	mov	r0, r7
   27e24:	bl	37128 <__assert_fail@plt+0x24b34>
   27e28:	cmp	r0, #0
   27e2c:	str	r0, [sp]
   27e30:	beq	27f90 <__assert_fail@plt+0x1599c>
   27e34:	ldr	r1, [r8, #24]
   27e38:	ldr	r5, [r8, #20]
   27e3c:	ldr	lr, [r8, #28]
   27e40:	ldr	ip, [r8, #32]
   27e44:	add	r0, r0, r7, lsl #3
   27e48:	ldr	r3, [r8, #36]	; 0x24
   27e4c:	str	r0, [sp, #4]
   27e50:	str	r1, [sp, #24]
   27e54:	mov	r2, r4
   27e58:	mov	r0, sp
   27e5c:	mov	r1, r8
   27e60:	str	r7, [sp, #8]
   27e64:	str	r4, [sp, #12]
   27e68:	str	r4, [sp, #16]
   27e6c:	str	r5, [sp, #20]
   27e70:	str	lr, [sp, #28]
   27e74:	str	ip, [sp, #32]
   27e78:	str	r3, [sp, #36]	; 0x24
   27e7c:	bl	2732c <__assert_fail@plt+0x14d38>
   27e80:	subs	r9, r0, #0
   27e84:	bne	27fa8 <__assert_fail@plt+0x159b4>
   27e88:	ldr	r5, [sp]
   27e8c:	ldr	r2, [sp, #4]
   27e90:	ldr	r3, [sp, #36]	; 0x24
   27e94:	cmp	r5, r2
   27e98:	str	r3, [r8, #36]	; 0x24
   27e9c:	addcc	r5, r5, #8
   27ea0:	movcc	r7, r9
   27ea4:	bcs	27f54 <__assert_fail@plt+0x15960>
   27ea8:	ldr	r3, [r5, #-8]
   27eac:	mov	r6, r5
   27eb0:	cmp	r3, #0
   27eb4:	beq	27f48 <__assert_fail@plt+0x15954>
   27eb8:	ldr	r4, [r5, #-4]
   27ebc:	cmp	r4, #0
   27ec0:	beq	27f44 <__assert_fail@plt+0x15950>
   27ec4:	ldr	r1, [r8, #8]
   27ec8:	b	27ee4 <__assert_fail@plt+0x158f0>
   27ecc:	ldr	r3, [ip, #4]
   27ed0:	cmp	r2, #0
   27ed4:	str	r3, [r4, #4]
   27ed8:	str	r4, [ip, #4]
   27edc:	beq	27f40 <__assert_fail@plt+0x1594c>
   27ee0:	mov	r4, r2
   27ee4:	ldr	sl, [r4]
   27ee8:	ldr	r3, [r8, #24]
   27eec:	mov	r0, sl
   27ef0:	blx	r3
   27ef4:	ldr	r1, [r8, #8]
   27ef8:	cmp	r0, r1
   27efc:	bcs	27fd4 <__assert_fail@plt+0x159e0>
   27f00:	ldr	r3, [r8]
   27f04:	ldr	r2, [r4, #4]
   27f08:	add	ip, r3, r0, lsl #3
   27f0c:	ldr	lr, [r3, r0, lsl #3]
   27f10:	cmp	lr, #0
   27f14:	bne	27ecc <__assert_fail@plt+0x158d8>
   27f18:	ldr	ip, [r8, #12]
   27f1c:	str	sl, [r3, r0, lsl #3]
   27f20:	add	r3, ip, #1
   27f24:	str	r3, [r8, #12]
   27f28:	str	lr, [r4]
   27f2c:	ldr	r3, [r8, #36]	; 0x24
   27f30:	cmp	r2, #0
   27f34:	str	r3, [r4, #4]
   27f38:	str	r4, [r8, #36]	; 0x24
   27f3c:	bne	27ee0 <__assert_fail@plt+0x158ec>
   27f40:	ldr	r2, [sp, #4]
   27f44:	str	r7, [r5, #-4]
   27f48:	cmp	r6, r2
   27f4c:	add	r5, r5, #8
   27f50:	bcc	27ea8 <__assert_fail@plt+0x158b4>
   27f54:	mov	r1, sp
   27f58:	mov	r0, r8
   27f5c:	mov	r2, #0
   27f60:	bl	2732c <__assert_fail@plt+0x14d38>
   27f64:	cmp	r0, #0
   27f68:	beq	27fd4 <__assert_fail@plt+0x159e0>
   27f6c:	ldr	r0, [sp]
   27f70:	bl	376d0 <__assert_fail@plt+0x250dc>
   27f74:	mov	r0, r9
   27f78:	add	sp, sp, #40	; 0x28
   27f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27f80:	mov	r9, #1
   27f84:	mov	r0, r9
   27f88:	add	sp, sp, #40	; 0x28
   27f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27f90:	mov	r9, #0
   27f94:	mov	r0, r9
   27f98:	add	sp, sp, #40	; 0x28
   27f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27fa0:	mov	r4, #3
   27fa4:	b	27dd4 <__assert_fail@plt+0x157e0>
   27fa8:	ldr	r0, [r8]
   27fac:	bl	376d0 <__assert_fail@plt+0x250dc>
   27fb0:	ldmib	sp, {r0, r1, r2}
   27fb4:	ldr	ip, [sp]
   27fb8:	ldr	r3, [sp, #36]	; 0x24
   27fbc:	stmib	r8, {r0, r1, r2}
   27fc0:	mov	r0, r9
   27fc4:	str	ip, [r8]
   27fc8:	str	r3, [r8, #36]	; 0x24
   27fcc:	add	sp, sp, #40	; 0x28
   27fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27fd4:	bl	125a0 <abort@plt>
   27fd8:	svcmi	0x00800000
   27fdc:	bge	fead2a90 <stdout@@GLIBC_2.4+0xfea6e53c>
   27fe0:	push	{r4, r5, r6, r7, r8, r9, lr}
   27fe4:	subs	r5, r1, #0
   27fe8:	sub	sp, sp, #12
   27fec:	beq	28208 <__assert_fail@plt+0x15c14>
   27ff0:	ldr	r3, [r0, #24]
   27ff4:	mov	r6, r0
   27ff8:	ldr	r1, [r0, #8]
   27ffc:	mov	r0, r5
   28000:	mov	r7, r2
   28004:	blx	r3
   28008:	ldr	r3, [r6, #8]
   2800c:	cmp	r0, r3
   28010:	mov	r8, r0
   28014:	bcs	28208 <__assert_fail@plt+0x15c14>
   28018:	ldr	r9, [r6]
   2801c:	add	r4, r9, r0, lsl #3
   28020:	ldr	r1, [r9, r0, lsl #3]
   28024:	str	r4, [sp, #4]
   28028:	cmp	r1, #0
   2802c:	beq	2820c <__assert_fail@plt+0x15c18>
   28030:	cmp	r5, r1
   28034:	beq	2808c <__assert_fail@plt+0x15a98>
   28038:	ldr	r3, [r6, #28]
   2803c:	mov	r0, r5
   28040:	blx	r3
   28044:	cmp	r0, #0
   28048:	bne	280a0 <__assert_fail@plt+0x15aac>
   2804c:	ldr	r3, [r4, #4]
   28050:	cmp	r3, #0
   28054:	bne	28080 <__assert_fail@plt+0x15a8c>
   28058:	b	280ac <__assert_fail@plt+0x15ab8>
   2805c:	ldr	r3, [r6, #28]
   28060:	mov	r0, r5
   28064:	blx	r3
   28068:	cmp	r0, #0
   2806c:	bne	28120 <__assert_fail@plt+0x15b2c>
   28070:	ldr	r4, [r4, #4]
   28074:	ldr	r3, [r4, #4]
   28078:	cmp	r3, #0
   2807c:	beq	280ac <__assert_fail@plt+0x15ab8>
   28080:	ldr	r1, [r3]
   28084:	cmp	r5, r1
   28088:	bne	2805c <__assert_fail@plt+0x15a68>
   2808c:	mov	r0, #0
   28090:	cmp	r7, #0
   28094:	strne	r1, [r7]
   28098:	add	sp, sp, #12
   2809c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   280a0:	ldr	r1, [r9, r8, lsl #3]
   280a4:	cmp	r1, #0
   280a8:	bne	2808c <__assert_fail@plt+0x15a98>
   280ac:	vldr	s15, [r6, #8]
   280b0:	ldr	r3, [r6, #20]
   280b4:	vldr	s14, [r6, #12]
   280b8:	vcvt.f32.u32	s15, s15
   280bc:	vldr	s13, [r3, #8]
   280c0:	vcvt.f32.u32	s14, s14
   280c4:	vmul.f32	s12, s13, s15
   280c8:	vcmpe.f32	s14, s12
   280cc:	vmrs	APSR_nzcv, fpscr
   280d0:	bgt	2812c <__assert_fail@plt+0x15b38>
   280d4:	ldr	r4, [sp, #4]
   280d8:	ldr	r3, [r4]
   280dc:	cmp	r3, #0
   280e0:	beq	28270 <__assert_fail@plt+0x15c7c>
   280e4:	ldr	r3, [r6, #36]	; 0x24
   280e8:	cmp	r3, #0
   280ec:	beq	28258 <__assert_fail@plt+0x15c64>
   280f0:	ldr	r2, [r3, #4]
   280f4:	str	r2, [r6, #36]	; 0x24
   280f8:	ldr	r2, [r6, #16]
   280fc:	ldr	r1, [r4, #4]
   28100:	add	r2, r2, #1
   28104:	str	r5, [r3]
   28108:	str	r1, [r3, #4]
   2810c:	mov	r0, #1
   28110:	str	r3, [r4, #4]
   28114:	str	r2, [r6, #16]
   28118:	add	sp, sp, #12
   2811c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   28120:	ldr	r3, [r4, #4]
   28124:	ldr	r1, [r3]
   28128:	b	280a4 <__assert_fail@plt+0x15ab0>
   2812c:	ldr	r2, [pc, #392]	; 282bc <__assert_fail@plt+0x15cc8>
   28130:	cmp	r3, r2
   28134:	beq	281b8 <__assert_fail@plt+0x15bc4>
   28138:	vldr	s12, [pc, #352]	; 282a0 <__assert_fail@plt+0x15cac>
   2813c:	vcmpe.f32	s13, s12
   28140:	vmrs	APSR_nzcv, fpscr
   28144:	ble	281a0 <__assert_fail@plt+0x15bac>
   28148:	vldr	s11, [pc, #340]	; 282a4 <__assert_fail@plt+0x15cb0>
   2814c:	vcmpe.f32	s13, s11
   28150:	vmrs	APSR_nzcv, fpscr
   28154:	bpl	281a0 <__assert_fail@plt+0x15bac>
   28158:	vldr	s11, [r3, #12]
   2815c:	vldr	s10, [pc, #324]	; 282a8 <__assert_fail@plt+0x15cb4>
   28160:	vcmpe.f32	s11, s10
   28164:	vmrs	APSR_nzcv, fpscr
   28168:	ble	281a0 <__assert_fail@plt+0x15bac>
   2816c:	vldr	s10, [r3]
   28170:	vcmpe.f32	s10, #0.0
   28174:	vmrs	APSR_nzcv, fpscr
   28178:	blt	281a0 <__assert_fail@plt+0x15bac>
   2817c:	vadd.f32	s12, s10, s12
   28180:	vldr	s10, [r3, #4]
   28184:	vcmpe.f32	s12, s10
   28188:	vmrs	APSR_nzcv, fpscr
   2818c:	bpl	281a0 <__assert_fail@plt+0x15bac>
   28190:	vldr	s9, [pc, #276]	; 282ac <__assert_fail@plt+0x15cb8>
   28194:	vcmpe.f32	s10, s9
   28198:	vmrs	APSR_nzcv, fpscr
   2819c:	bls	28280 <__assert_fail@plt+0x15c8c>
   281a0:	vldr	s13, [pc, #264]	; 282b0 <__assert_fail@plt+0x15cbc>
   281a4:	str	r2, [r6, #20]
   281a8:	vmul.f32	s12, s15, s13
   281ac:	vcmpe.f32	s12, s14
   281b0:	vmrs	APSR_nzcv, fpscr
   281b4:	bpl	280d4 <__assert_fail@plt+0x15ae0>
   281b8:	vldr	s11, [pc, #244]	; 282b4 <__assert_fail@plt+0x15cc0>
   281bc:	vmul.f32	s15, s15, s11
   281c0:	vmul.f32	s15, s15, s13
   281c4:	vldr	s14, [pc, #236]	; 282b8 <__assert_fail@plt+0x15cc4>
   281c8:	vcmpe.f32	s15, s14
   281cc:	vmrs	APSR_nzcv, fpscr
   281d0:	bge	28278 <__assert_fail@plt+0x15c84>
   281d4:	vcvt.u32.f32	s15, s15
   281d8:	mov	r0, r6
   281dc:	vmov	r1, s15
   281e0:	bl	27d24 <__assert_fail@plt+0x15730>
   281e4:	cmp	r0, #0
   281e8:	beq	28278 <__assert_fail@plt+0x15c84>
   281ec:	mov	r3, #0
   281f0:	add	r2, sp, #4
   281f4:	mov	r1, r5
   281f8:	mov	r0, r6
   281fc:	bl	2720c <__assert_fail@plt+0x14c18>
   28200:	cmp	r0, #0
   28204:	beq	280d4 <__assert_fail@plt+0x15ae0>
   28208:	bl	125a0 <abort@plt>
   2820c:	vmov	s15, r3
   28210:	ldr	r2, [r6, #12]
   28214:	ldr	r3, [r6, #20]
   28218:	vcvt.f32.u32	s15, s15
   2821c:	vldr	s13, [r3, #8]
   28220:	vmov	s14, r2
   28224:	vcvt.f32.u32	s14, s14
   28228:	vmul.f32	s12, s13, s15
   2822c:	vcmpe.f32	s14, s12
   28230:	vmrs	APSR_nzcv, fpscr
   28234:	bgt	2812c <__assert_fail@plt+0x15b38>
   28238:	ldr	r3, [r6, #16]
   2823c:	add	r2, r2, #1
   28240:	add	r3, r3, #1
   28244:	str	r5, [r4]
   28248:	mov	r0, #1
   2824c:	str	r2, [r6, #12]
   28250:	str	r3, [r6, #16]
   28254:	b	28098 <__assert_fail@plt+0x15aa4>
   28258:	mov	r0, #8
   2825c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   28260:	subs	r3, r0, #0
   28264:	beq	28278 <__assert_fail@plt+0x15c84>
   28268:	ldr	r4, [sp, #4]
   2826c:	b	280f8 <__assert_fail@plt+0x15b04>
   28270:	ldr	r2, [r6, #12]
   28274:	b	28238 <__assert_fail@plt+0x15c44>
   28278:	mvn	r0, #0
   2827c:	b	28098 <__assert_fail@plt+0x15aa4>
   28280:	vcmpe.f32	s12, s13
   28284:	vmrs	APSR_nzcv, fpscr
   28288:	bpl	281a0 <__assert_fail@plt+0x15bac>
   2828c:	ldrb	r3, [r3, #16]
   28290:	cmp	r3, #0
   28294:	vmulne.f32	s15, s11, s15
   28298:	bne	281c4 <__assert_fail@plt+0x15bd0>
   2829c:	b	281bc <__assert_fail@plt+0x15bc8>
   282a0:	stclcc	12, cr12, [ip, #820]	; 0x334
   282a4:	svccc	0x00666666
   282a8:	svccc	0x008ccccd
   282ac:	svccc	0x00800000
   282b0:	svccc	0x004ccccd
   282b4:	svccc	0x00b4fdf4
   282b8:	svcmi	0x00800000
   282bc:	andeq	r2, r5, r8, asr #9
   282c0:	push	{r4, r5, r6, r7, r8, lr}
   282c4:	subs	r5, r1, #0
   282c8:	sub	sp, sp, #8
   282cc:	beq	284d0 <__assert_fail@plt+0x15edc>
   282d0:	ldr	r3, [r0, #24]
   282d4:	mov	r6, r0
   282d8:	ldr	r1, [r0, #8]
   282dc:	mov	r0, r5
   282e0:	blx	r3
   282e4:	ldr	r3, [r6, #8]
   282e8:	cmp	r0, r3
   282ec:	mov	r7, r0
   282f0:	bcs	284d0 <__assert_fail@plt+0x15edc>
   282f4:	ldr	r8, [r6]
   282f8:	add	r4, r8, r0, lsl #3
   282fc:	ldr	r1, [r8, r0, lsl #3]
   28300:	str	r4, [sp, #4]
   28304:	cmp	r1, #0
   28308:	beq	284d4 <__assert_fail@plt+0x15ee0>
   2830c:	cmp	r5, r1
   28310:	beq	28334 <__assert_fail@plt+0x15d40>
   28314:	ldr	r3, [r6, #28]
   28318:	mov	r0, r5
   2831c:	blx	r3
   28320:	cmp	r0, #0
   28324:	beq	28364 <__assert_fail@plt+0x15d70>
   28328:	ldr	r1, [r8, r7, lsl #3]
   2832c:	cmp	r1, #0
   28330:	beq	28370 <__assert_fail@plt+0x15d7c>
   28334:	mov	r0, r1
   28338:	add	sp, sp, #8
   2833c:	pop	{r4, r5, r6, r7, r8, pc}
   28340:	ldr	r1, [r3]
   28344:	cmp	r5, r1
   28348:	beq	28334 <__assert_fail@plt+0x15d40>
   2834c:	ldr	r3, [r6, #28]
   28350:	mov	r0, r5
   28354:	blx	r3
   28358:	cmp	r0, #0
   2835c:	bne	283e8 <__assert_fail@plt+0x15df4>
   28360:	ldr	r4, [r4, #4]
   28364:	ldr	r3, [r4, #4]
   28368:	cmp	r3, #0
   2836c:	bne	28340 <__assert_fail@plt+0x15d4c>
   28370:	vldr	s15, [r6, #8]
   28374:	ldr	r3, [r6, #20]
   28378:	vldr	s14, [r6, #12]
   2837c:	vcvt.f32.u32	s15, s15
   28380:	vldr	s13, [r3, #8]
   28384:	vcvt.f32.u32	s14, s14
   28388:	vmul.f32	s12, s13, s15
   2838c:	vcmpe.f32	s14, s12
   28390:	vmrs	APSR_nzcv, fpscr
   28394:	bgt	283f4 <__assert_fail@plt+0x15e00>
   28398:	ldr	r4, [sp, #4]
   2839c:	ldr	r3, [r4]
   283a0:	cmp	r3, #0
   283a4:	beq	28534 <__assert_fail@plt+0x15f40>
   283a8:	ldr	r0, [r6, #36]	; 0x24
   283ac:	cmp	r0, #0
   283b0:	beq	2851c <__assert_fail@plt+0x15f28>
   283b4:	ldr	r3, [r0, #4]
   283b8:	str	r3, [r6, #36]	; 0x24
   283bc:	ldr	r3, [r6, #16]
   283c0:	ldr	r2, [r4, #4]
   283c4:	add	r3, r3, #1
   283c8:	str	r5, [r0]
   283cc:	str	r2, [r0, #4]
   283d0:	str	r0, [r4, #4]
   283d4:	str	r3, [r6, #16]
   283d8:	mov	r1, r5
   283dc:	mov	r0, r1
   283e0:	add	sp, sp, #8
   283e4:	pop	{r4, r5, r6, r7, r8, pc}
   283e8:	ldr	r3, [r4, #4]
   283ec:	ldr	r1, [r3]
   283f0:	b	2832c <__assert_fail@plt+0x15d38>
   283f4:	ldr	r2, [pc, #388]	; 28580 <__assert_fail@plt+0x15f8c>
   283f8:	cmp	r3, r2
   283fc:	beq	28480 <__assert_fail@plt+0x15e8c>
   28400:	vldr	s12, [pc, #348]	; 28564 <__assert_fail@plt+0x15f70>
   28404:	vcmpe.f32	s13, s12
   28408:	vmrs	APSR_nzcv, fpscr
   2840c:	ble	28468 <__assert_fail@plt+0x15e74>
   28410:	vldr	s11, [pc, #336]	; 28568 <__assert_fail@plt+0x15f74>
   28414:	vcmpe.f32	s13, s11
   28418:	vmrs	APSR_nzcv, fpscr
   2841c:	bpl	28468 <__assert_fail@plt+0x15e74>
   28420:	vldr	s11, [r3, #12]
   28424:	vldr	s10, [pc, #320]	; 2856c <__assert_fail@plt+0x15f78>
   28428:	vcmpe.f32	s11, s10
   2842c:	vmrs	APSR_nzcv, fpscr
   28430:	ble	28468 <__assert_fail@plt+0x15e74>
   28434:	vldr	s10, [r3]
   28438:	vcmpe.f32	s10, #0.0
   2843c:	vmrs	APSR_nzcv, fpscr
   28440:	blt	28468 <__assert_fail@plt+0x15e74>
   28444:	vadd.f32	s12, s10, s12
   28448:	vldr	s10, [r3, #4]
   2844c:	vcmpe.f32	s12, s10
   28450:	vmrs	APSR_nzcv, fpscr
   28454:	bpl	28468 <__assert_fail@plt+0x15e74>
   28458:	vldr	s9, [pc, #272]	; 28570 <__assert_fail@plt+0x15f7c>
   2845c:	vcmpe.f32	s10, s9
   28460:	vmrs	APSR_nzcv, fpscr
   28464:	bls	28544 <__assert_fail@plt+0x15f50>
   28468:	vldr	s13, [pc, #260]	; 28574 <__assert_fail@plt+0x15f80>
   2846c:	str	r2, [r6, #20]
   28470:	vmul.f32	s12, s15, s13
   28474:	vcmpe.f32	s12, s14
   28478:	vmrs	APSR_nzcv, fpscr
   2847c:	bpl	28398 <__assert_fail@plt+0x15da4>
   28480:	vldr	s11, [pc, #240]	; 28578 <__assert_fail@plt+0x15f84>
   28484:	vmul.f32	s15, s15, s11
   28488:	vmul.f32	s15, s15, s13
   2848c:	vldr	s14, [pc, #232]	; 2857c <__assert_fail@plt+0x15f88>
   28490:	vcmpe.f32	s15, s14
   28494:	vmrs	APSR_nzcv, fpscr
   28498:	bge	2853c <__assert_fail@plt+0x15f48>
   2849c:	vcvt.u32.f32	s15, s15
   284a0:	mov	r0, r6
   284a4:	vmov	r1, s15
   284a8:	bl	27d24 <__assert_fail@plt+0x15730>
   284ac:	cmp	r0, #0
   284b0:	beq	2853c <__assert_fail@plt+0x15f48>
   284b4:	mov	r3, #0
   284b8:	add	r2, sp, #4
   284bc:	mov	r1, r5
   284c0:	mov	r0, r6
   284c4:	bl	2720c <__assert_fail@plt+0x14c18>
   284c8:	cmp	r0, #0
   284cc:	beq	28398 <__assert_fail@plt+0x15da4>
   284d0:	bl	125a0 <abort@plt>
   284d4:	vmov	s15, r3
   284d8:	ldr	r2, [r6, #12]
   284dc:	ldr	r3, [r6, #20]
   284e0:	vcvt.f32.u32	s15, s15
   284e4:	vldr	s13, [r3, #8]
   284e8:	vmov	s14, r2
   284ec:	vcvt.f32.u32	s14, s14
   284f0:	vmul.f32	s12, s15, s13
   284f4:	vcmpe.f32	s12, s14
   284f8:	vmrs	APSR_nzcv, fpscr
   284fc:	bmi	283f4 <__assert_fail@plt+0x15e00>
   28500:	ldr	r3, [r6, #16]
   28504:	add	r2, r2, #1
   28508:	add	r3, r3, #1
   2850c:	str	r5, [r4]
   28510:	str	r2, [r6, #12]
   28514:	str	r3, [r6, #16]
   28518:	b	283d8 <__assert_fail@plt+0x15de4>
   2851c:	mov	r0, #8
   28520:	bl	3a010 <__assert_fail@plt+0x27a1c>
   28524:	cmp	r0, #0
   28528:	beq	2853c <__assert_fail@plt+0x15f48>
   2852c:	ldr	r4, [sp, #4]
   28530:	b	283bc <__assert_fail@plt+0x15dc8>
   28534:	ldr	r2, [r6, #12]
   28538:	b	28500 <__assert_fail@plt+0x15f0c>
   2853c:	mov	r1, #0
   28540:	b	28334 <__assert_fail@plt+0x15d40>
   28544:	vcmpe.f32	s12, s13
   28548:	vmrs	APSR_nzcv, fpscr
   2854c:	bpl	28468 <__assert_fail@plt+0x15e74>
   28550:	ldrb	r3, [r3, #16]
   28554:	cmp	r3, #0
   28558:	vmulne.f32	s15, s11, s15
   2855c:	bne	2848c <__assert_fail@plt+0x15e98>
   28560:	b	28484 <__assert_fail@plt+0x15e90>
   28564:	stclcc	12, cr12, [ip, #820]	; 0x334
   28568:	svccc	0x00666666
   2856c:	svccc	0x008ccccd
   28570:	svccc	0x00800000
   28574:	svccc	0x004ccccd
   28578:	svccc	0x00b4fdf4
   2857c:	svcmi	0x00800000
   28580:	andeq	r2, r5, r8, asr #9
   28584:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28588:	mov	r7, r1
   2858c:	ldr	r3, [r0, #24]
   28590:	mov	r6, r0
   28594:	ldr	r1, [r0, #8]
   28598:	mov	r0, r7
   2859c:	blx	r3
   285a0:	ldr	r3, [r6, #8]
   285a4:	cmp	r0, r3
   285a8:	bcs	287d4 <__assert_fail@plt+0x161e0>
   285ac:	ldr	r9, [r6]
   285b0:	mov	r8, r0
   285b4:	add	r5, r9, r0, lsl #3
   285b8:	ldr	r4, [r9, r0, lsl #3]
   285bc:	cmp	r4, #0
   285c0:	beq	2866c <__assert_fail@plt+0x16078>
   285c4:	cmp	r7, r4
   285c8:	beq	285e8 <__assert_fail@plt+0x15ff4>
   285cc:	mov	r1, r4
   285d0:	ldr	r3, [r6, #28]
   285d4:	mov	r0, r7
   285d8:	blx	r3
   285dc:	cmp	r0, #0
   285e0:	beq	28660 <__assert_fail@plt+0x1606c>
   285e4:	ldr	r4, [r9, r8, lsl #3]
   285e8:	ldr	r3, [r5, #4]
   285ec:	cmp	r3, #0
   285f0:	movne	r2, #0
   285f4:	ldmne	r3, {r0, r1}
   285f8:	streq	r3, [r9, r8, lsl #3]
   285fc:	stmne	r5, {r0, r1}
   28600:	strne	r2, [r3]
   28604:	ldrne	r2, [r6, #36]	; 0x24
   28608:	strne	r2, [r3, #4]
   2860c:	strne	r3, [r6, #36]	; 0x24
   28610:	cmp	r4, #0
   28614:	beq	2866c <__assert_fail@plt+0x16078>
   28618:	ldr	r2, [r9, r8, lsl #3]
   2861c:	ldr	r3, [r6, #16]
   28620:	cmp	r2, #0
   28624:	sub	r3, r3, #1
   28628:	str	r3, [r6, #16]
   2862c:	beq	286a0 <__assert_fail@plt+0x160ac>
   28630:	mov	r0, r4
   28634:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28638:	ldr	r4, [r3]
   2863c:	cmp	r7, r4
   28640:	beq	28680 <__assert_fail@plt+0x1608c>
   28644:	mov	r1, r4
   28648:	ldr	r3, [r6, #28]
   2864c:	mov	r0, r7
   28650:	blx	r3
   28654:	cmp	r0, #0
   28658:	bne	28678 <__assert_fail@plt+0x16084>
   2865c:	ldr	r5, [r5, #4]
   28660:	ldr	r3, [r5, #4]
   28664:	cmp	r3, #0
   28668:	bne	28638 <__assert_fail@plt+0x16044>
   2866c:	mov	r4, #0
   28670:	mov	r0, r4
   28674:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28678:	ldr	r3, [r5, #4]
   2867c:	ldr	r4, [r3]
   28680:	ldr	r1, [r3, #4]
   28684:	mov	r2, #0
   28688:	str	r1, [r5, #4]
   2868c:	str	r2, [r3]
   28690:	ldr	r2, [r6, #36]	; 0x24
   28694:	str	r2, [r3, #4]
   28698:	str	r3, [r6, #36]	; 0x24
   2869c:	b	28610 <__assert_fail@plt+0x1601c>
   286a0:	vldr	s15, [r6, #8]
   286a4:	ldr	r3, [r6, #12]
   286a8:	ldr	r2, [r6, #20]
   286ac:	sub	r3, r3, #1
   286b0:	vcvt.f32.u32	s14, s15
   286b4:	vldr	s13, [r2]
   286b8:	vmov	s15, r3
   286bc:	str	r3, [r6, #12]
   286c0:	vcvt.f32.u32	s15, s15
   286c4:	vmul.f32	s12, s13, s14
   286c8:	vcmpe.f32	s15, s12
   286cc:	vmrs	APSR_nzcv, fpscr
   286d0:	bpl	28630 <__assert_fail@plt+0x1603c>
   286d4:	ldr	r3, [pc, #276]	; 287f0 <__assert_fail@plt+0x161fc>
   286d8:	cmp	r2, r3
   286dc:	beq	287bc <__assert_fail@plt+0x161c8>
   286e0:	vldr	s12, [r2, #8]
   286e4:	vldr	s11, [pc, #236]	; 287d8 <__assert_fail@plt+0x161e4>
   286e8:	vcmpe.f32	s12, s11
   286ec:	vmrs	APSR_nzcv, fpscr
   286f0:	ble	287a4 <__assert_fail@plt+0x161b0>
   286f4:	vldr	s10, [pc, #224]	; 287dc <__assert_fail@plt+0x161e8>
   286f8:	vcmpe.f32	s12, s10
   286fc:	vmrs	APSR_nzcv, fpscr
   28700:	bpl	287a4 <__assert_fail@plt+0x161b0>
   28704:	vldr	s10, [pc, #212]	; 287e0 <__assert_fail@plt+0x161ec>
   28708:	vldr	s9, [r2, #12]
   2870c:	vcmpe.f32	s9, s10
   28710:	vmrs	APSR_nzcv, fpscr
   28714:	ble	287a4 <__assert_fail@plt+0x161b0>
   28718:	vcmpe.f32	s13, #0.0
   2871c:	vmrs	APSR_nzcv, fpscr
   28720:	blt	287a4 <__assert_fail@plt+0x161b0>
   28724:	vadd.f32	s13, s13, s11
   28728:	vldr	s11, [r2, #4]
   2872c:	vcmpe.f32	s13, s11
   28730:	vmrs	APSR_nzcv, fpscr
   28734:	bpl	287a4 <__assert_fail@plt+0x161b0>
   28738:	vldr	s10, [pc, #164]	; 287e4 <__assert_fail@plt+0x161f0>
   2873c:	vcmpe.f32	s11, s10
   28740:	vmrs	APSR_nzcv, fpscr
   28744:	bhi	287a4 <__assert_fail@plt+0x161b0>
   28748:	vcmpe.f32	s12, s13
   2874c:	vmrs	APSR_nzcv, fpscr
   28750:	ble	287a4 <__assert_fail@plt+0x161b0>
   28754:	ldrb	r3, [r2, #16]
   28758:	cmp	r3, #0
   2875c:	beq	287c4 <__assert_fail@plt+0x161d0>
   28760:	vmul.f32	s15, s14, s11
   28764:	vcvt.u32.f32	s15, s15
   28768:	vmov	r1, s15
   2876c:	mov	r0, r6
   28770:	bl	27d24 <__assert_fail@plt+0x15730>
   28774:	cmp	r0, #0
   28778:	bne	28630 <__assert_fail@plt+0x1603c>
   2877c:	ldr	r0, [r6, #36]	; 0x24
   28780:	cmp	r0, #0
   28784:	beq	28798 <__assert_fail@plt+0x161a4>
   28788:	ldr	r5, [r0, #4]
   2878c:	bl	376d0 <__assert_fail@plt+0x250dc>
   28790:	subs	r0, r5, #0
   28794:	bne	28788 <__assert_fail@plt+0x16194>
   28798:	mov	r3, #0
   2879c:	str	r3, [r6, #36]	; 0x24
   287a0:	b	28630 <__assert_fail@plt+0x1603c>
   287a4:	vldr	s13, [pc, #60]	; 287e8 <__assert_fail@plt+0x161f4>
   287a8:	str	r3, [r6, #20]
   287ac:	vmul.f32	s13, s14, s13
   287b0:	vcmpe.f32	s15, s13
   287b4:	vmrs	APSR_nzcv, fpscr
   287b8:	bpl	28630 <__assert_fail@plt+0x1603c>
   287bc:	vldr	s12, [pc, #40]	; 287ec <__assert_fail@plt+0x161f8>
   287c0:	vldr	s11, [pc, #28]	; 287e4 <__assert_fail@plt+0x161f0>
   287c4:	vmul.f32	s15, s14, s11
   287c8:	vmul.f32	s15, s15, s12
   287cc:	vcvt.u32.f32	s15, s15
   287d0:	b	28768 <__assert_fail@plt+0x16174>
   287d4:	bl	125a0 <abort@plt>
   287d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   287dc:	svccc	0x00666666
   287e0:	svccc	0x008ccccd
   287e4:	svccc	0x00800000
   287e8:	andeq	r0, r0, r0
   287ec:	svccc	0x004ccccd
   287f0:	andeq	r2, r5, r8, asr #9
   287f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   287f8:	mov	r7, r1
   287fc:	ldr	r3, [r0, #24]
   28800:	mov	r6, r0
   28804:	ldr	r1, [r0, #8]
   28808:	mov	r0, r7
   2880c:	blx	r3
   28810:	ldr	r3, [r6, #8]
   28814:	cmp	r0, r3
   28818:	bcs	28a44 <__assert_fail@plt+0x16450>
   2881c:	ldr	r9, [r6]
   28820:	mov	r8, r0
   28824:	add	r5, r9, r0, lsl #3
   28828:	ldr	r4, [r9, r0, lsl #3]
   2882c:	cmp	r4, #0
   28830:	beq	288dc <__assert_fail@plt+0x162e8>
   28834:	cmp	r7, r4
   28838:	beq	28858 <__assert_fail@plt+0x16264>
   2883c:	mov	r1, r4
   28840:	ldr	r3, [r6, #28]
   28844:	mov	r0, r7
   28848:	blx	r3
   2884c:	cmp	r0, #0
   28850:	beq	288d0 <__assert_fail@plt+0x162dc>
   28854:	ldr	r4, [r9, r8, lsl #3]
   28858:	ldr	r3, [r5, #4]
   2885c:	cmp	r3, #0
   28860:	movne	r2, #0
   28864:	ldmne	r3, {r0, r1}
   28868:	streq	r3, [r9, r8, lsl #3]
   2886c:	stmne	r5, {r0, r1}
   28870:	strne	r2, [r3]
   28874:	ldrne	r2, [r6, #36]	; 0x24
   28878:	strne	r2, [r3, #4]
   2887c:	strne	r3, [r6, #36]	; 0x24
   28880:	cmp	r4, #0
   28884:	beq	288dc <__assert_fail@plt+0x162e8>
   28888:	ldr	r2, [r9, r8, lsl #3]
   2888c:	ldr	r3, [r6, #16]
   28890:	cmp	r2, #0
   28894:	sub	r3, r3, #1
   28898:	str	r3, [r6, #16]
   2889c:	beq	28910 <__assert_fail@plt+0x1631c>
   288a0:	mov	r0, r4
   288a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   288a8:	ldr	r4, [r3]
   288ac:	cmp	r7, r4
   288b0:	beq	288f0 <__assert_fail@plt+0x162fc>
   288b4:	mov	r1, r4
   288b8:	ldr	r3, [r6, #28]
   288bc:	mov	r0, r7
   288c0:	blx	r3
   288c4:	cmp	r0, #0
   288c8:	bne	288e8 <__assert_fail@plt+0x162f4>
   288cc:	ldr	r5, [r5, #4]
   288d0:	ldr	r3, [r5, #4]
   288d4:	cmp	r3, #0
   288d8:	bne	288a8 <__assert_fail@plt+0x162b4>
   288dc:	mov	r4, #0
   288e0:	mov	r0, r4
   288e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   288e8:	ldr	r3, [r5, #4]
   288ec:	ldr	r4, [r3]
   288f0:	ldr	r1, [r3, #4]
   288f4:	mov	r2, #0
   288f8:	str	r1, [r5, #4]
   288fc:	str	r2, [r3]
   28900:	ldr	r2, [r6, #36]	; 0x24
   28904:	str	r2, [r3, #4]
   28908:	str	r3, [r6, #36]	; 0x24
   2890c:	b	28880 <__assert_fail@plt+0x1628c>
   28910:	vldr	s15, [r6, #8]
   28914:	ldr	r3, [r6, #12]
   28918:	ldr	r2, [r6, #20]
   2891c:	sub	r3, r3, #1
   28920:	vcvt.f32.u32	s14, s15
   28924:	vldr	s13, [r2]
   28928:	vmov	s15, r3
   2892c:	str	r3, [r6, #12]
   28930:	vcvt.f32.u32	s15, s15
   28934:	vmul.f32	s12, s13, s14
   28938:	vcmpe.f32	s15, s12
   2893c:	vmrs	APSR_nzcv, fpscr
   28940:	bpl	288a0 <__assert_fail@plt+0x162ac>
   28944:	ldr	r3, [pc, #276]	; 28a60 <__assert_fail@plt+0x1646c>
   28948:	cmp	r2, r3
   2894c:	beq	28a2c <__assert_fail@plt+0x16438>
   28950:	vldr	s12, [r2, #8]
   28954:	vldr	s11, [pc, #236]	; 28a48 <__assert_fail@plt+0x16454>
   28958:	vcmpe.f32	s12, s11
   2895c:	vmrs	APSR_nzcv, fpscr
   28960:	ble	28a14 <__assert_fail@plt+0x16420>
   28964:	vldr	s10, [pc, #224]	; 28a4c <__assert_fail@plt+0x16458>
   28968:	vcmpe.f32	s12, s10
   2896c:	vmrs	APSR_nzcv, fpscr
   28970:	bpl	28a14 <__assert_fail@plt+0x16420>
   28974:	vldr	s10, [pc, #212]	; 28a50 <__assert_fail@plt+0x1645c>
   28978:	vldr	s9, [r2, #12]
   2897c:	vcmpe.f32	s9, s10
   28980:	vmrs	APSR_nzcv, fpscr
   28984:	ble	28a14 <__assert_fail@plt+0x16420>
   28988:	vcmpe.f32	s13, #0.0
   2898c:	vmrs	APSR_nzcv, fpscr
   28990:	blt	28a14 <__assert_fail@plt+0x16420>
   28994:	vadd.f32	s13, s13, s11
   28998:	vldr	s11, [r2, #4]
   2899c:	vcmpe.f32	s13, s11
   289a0:	vmrs	APSR_nzcv, fpscr
   289a4:	bpl	28a14 <__assert_fail@plt+0x16420>
   289a8:	vldr	s10, [pc, #164]	; 28a54 <__assert_fail@plt+0x16460>
   289ac:	vcmpe.f32	s11, s10
   289b0:	vmrs	APSR_nzcv, fpscr
   289b4:	bhi	28a14 <__assert_fail@plt+0x16420>
   289b8:	vcmpe.f32	s12, s13
   289bc:	vmrs	APSR_nzcv, fpscr
   289c0:	ble	28a14 <__assert_fail@plt+0x16420>
   289c4:	ldrb	r3, [r2, #16]
   289c8:	cmp	r3, #0
   289cc:	beq	28a34 <__assert_fail@plt+0x16440>
   289d0:	vmul.f32	s15, s14, s11
   289d4:	vcvt.u32.f32	s15, s15
   289d8:	vmov	r1, s15
   289dc:	mov	r0, r6
   289e0:	bl	27d24 <__assert_fail@plt+0x15730>
   289e4:	cmp	r0, #0
   289e8:	bne	288a0 <__assert_fail@plt+0x162ac>
   289ec:	ldr	r0, [r6, #36]	; 0x24
   289f0:	cmp	r0, #0
   289f4:	beq	28a08 <__assert_fail@plt+0x16414>
   289f8:	ldr	r5, [r0, #4]
   289fc:	bl	376d0 <__assert_fail@plt+0x250dc>
   28a00:	subs	r0, r5, #0
   28a04:	bne	289f8 <__assert_fail@plt+0x16404>
   28a08:	mov	r3, #0
   28a0c:	str	r3, [r6, #36]	; 0x24
   28a10:	b	288a0 <__assert_fail@plt+0x162ac>
   28a14:	vldr	s13, [pc, #60]	; 28a58 <__assert_fail@plt+0x16464>
   28a18:	str	r3, [r6, #20]
   28a1c:	vmul.f32	s13, s14, s13
   28a20:	vcmpe.f32	s15, s13
   28a24:	vmrs	APSR_nzcv, fpscr
   28a28:	bpl	288a0 <__assert_fail@plt+0x162ac>
   28a2c:	vldr	s12, [pc, #40]	; 28a5c <__assert_fail@plt+0x16468>
   28a30:	vldr	s11, [pc, #28]	; 28a54 <__assert_fail@plt+0x16460>
   28a34:	vmul.f32	s15, s14, s11
   28a38:	vmul.f32	s15, s15, s12
   28a3c:	vcvt.u32.f32	s15, s15
   28a40:	b	289d8 <__assert_fail@plt+0x163e4>
   28a44:	bl	125a0 <abort@plt>
   28a48:	stclcc	12, cr12, [ip, #820]	; 0x334
   28a4c:	svccc	0x00666666
   28a50:	svccc	0x008ccccd
   28a54:	svccc	0x00800000
   28a58:	andeq	r0, r0, r0
   28a5c:	svccc	0x004ccccd
   28a60:	andeq	r2, r5, r8, asr #9
   28a64:	andeq	r0, r0, r0
   28a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a6c:	vpush	{d8-d9}
   28a70:	mov	r4, r3
   28a74:	ands	r3, r3, #32
   28a78:	mov	r9, r1
   28a7c:	sub	sp, sp, #100	; 0x64
   28a80:	mov	r8, r0
   28a84:	str	r3, [sp, #28]
   28a88:	and	r3, r4, #3
   28a8c:	str	r3, [sp]
   28a90:	movne	r3, #1024	; 0x400
   28a94:	moveq	r3, #1000	; 0x3e8
   28a98:	str	r2, [sp, #4]
   28a9c:	strne	r3, [sp, #32]
   28aa0:	movne	r2, #1024	; 0x400
   28aa4:	moveq	r2, #1000	; 0x3e8
   28aa8:	strne	r3, [sp, #20]
   28aac:	streq	r3, [sp, #32]
   28ab0:	streq	r3, [sp, #20]
   28ab4:	mov	r3, #0
   28ab8:	ldrd	r6, [sp, #152]	; 0x98
   28abc:	strd	r2, [sp, #8]
   28ac0:	bl	124a4 <localeconv@plt>
   28ac4:	ldr	r3, [sp, #4]
   28ac8:	add	r3, r3, #644	; 0x284
   28acc:	str	r3, [sp, #16]
   28ad0:	ldr	fp, [r0]
   28ad4:	mov	r5, r0
   28ad8:	mov	r0, fp
   28adc:	bl	12300 <strlen@plt>
   28ae0:	ldr	sl, [r5, #4]
   28ae4:	ldr	r1, [pc, #676]	; 28d90 <__assert_fail@plt+0x1679c>
   28ae8:	mov	r2, r0
   28aec:	sub	r0, r0, #1
   28af0:	cmp	r0, #16
   28af4:	movcs	r2, #1
   28af8:	str	r2, [sp, #40]	; 0x28
   28afc:	mov	r0, sl
   28b00:	movcc	r2, fp
   28b04:	movcs	r2, r1
   28b08:	str	r2, [sp, #44]	; 0x2c
   28b0c:	bl	12300 <strlen@plt>
   28b10:	ldr	r3, [sp, #16]
   28b14:	ldr	r2, [pc, #632]	; 28d94 <__assert_fail@plt+0x167a0>
   28b18:	add	r3, r3, #3
   28b1c:	str	r3, [sp]
   28b20:	ldr	r5, [r5, #8]
   28b24:	cmp	r0, #16
   28b28:	movhi	sl, r2
   28b2c:	ldrd	r2, [sp, #160]	; 0xa0
   28b30:	str	sl, [sp, #24]
   28b34:	cmp	r3, r7
   28b38:	cmpeq	r2, r6
   28b3c:	bhi	28da0 <__assert_fail@plt+0x167ac>
   28b40:	mov	r0, r6
   28b44:	mov	r1, r7
   28b48:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28b4c:	orrs	r3, r2, r3
   28b50:	bne	28b94 <__assert_fail@plt+0x165a0>
   28b54:	ldrd	r2, [sp, #160]	; 0xa0
   28b58:	mov	r0, r6
   28b5c:	mov	r1, r7
   28b60:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28b64:	mov	r2, r0
   28b68:	mul	r0, r0, r9
   28b6c:	umull	sl, fp, r2, r8
   28b70:	mla	r0, r8, r1, r0
   28b74:	mov	r3, r1
   28b78:	add	fp, r0, fp
   28b7c:	mov	r1, fp
   28b80:	mov	r0, sl
   28b84:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28b88:	cmp	r9, r1
   28b8c:	cmpeq	r8, r0
   28b90:	beq	29444 <__assert_fail@plt+0x16e50>
   28b94:	mov	r0, r6
   28b98:	mov	r1, r7
   28b9c:	bl	4db14 <__assert_fail@plt+0x3b520>
   28ba0:	vmov	d9, r0, r1
   28ba4:	ldrd	r0, [sp, #160]	; 0xa0
   28ba8:	bl	4db14 <__assert_fail@plt+0x3b520>
   28bac:	vmov	d7, r0, r1
   28bb0:	mov	r0, r8
   28bb4:	mov	r1, r9
   28bb8:	vdiv.f64	d8, d9, d7
   28bbc:	bl	4db14 <__assert_fail@plt+0x3b520>
   28bc0:	ands	r8, r4, #16
   28bc4:	vmov	d7, r0, r1
   28bc8:	vmul.f64	d8, d8, d7
   28bcc:	beq	291d0 <__assert_fail@plt+0x16bdc>
   28bd0:	vldr	s15, [sp, #32]
   28bd4:	vcvt.f64.s32	d7, s15
   28bd8:	vmul.f64	d6, d7, d7
   28bdc:	vcmpe.f64	d8, d6
   28be0:	vmrs	APSR_nzcv, fpscr
   28be4:	blt	29720 <__assert_fail@plt+0x1712c>
   28be8:	vmul.f64	d5, d7, d6
   28bec:	vcmpe.f64	d8, d5
   28bf0:	vmrs	APSR_nzcv, fpscr
   28bf4:	blt	2972c <__assert_fail@plt+0x17138>
   28bf8:	vmul.f64	d6, d7, d5
   28bfc:	vcmpe.f64	d8, d6
   28c00:	vmrs	APSR_nzcv, fpscr
   28c04:	blt	29734 <__assert_fail@plt+0x17140>
   28c08:	vmul.f64	d5, d7, d6
   28c0c:	vcmpe.f64	d8, d5
   28c10:	vmrs	APSR_nzcv, fpscr
   28c14:	blt	29740 <__assert_fail@plt+0x1714c>
   28c18:	vmul.f64	d6, d7, d5
   28c1c:	vcmpe.f64	d8, d6
   28c20:	vmrs	APSR_nzcv, fpscr
   28c24:	blt	29748 <__assert_fail@plt+0x17154>
   28c28:	vmul.f64	d5, d7, d6
   28c2c:	vcmpe.f64	d8, d5
   28c30:	vmrs	APSR_nzcv, fpscr
   28c34:	blt	29754 <__assert_fail@plt+0x17160>
   28c38:	vmul.f64	d6, d7, d5
   28c3c:	vcmpe.f64	d8, d6
   28c40:	vmrs	APSR_nzcv, fpscr
   28c44:	blt	2975c <__assert_fail@plt+0x17168>
   28c48:	mov	r9, #8
   28c4c:	and	r8, r4, #3
   28c50:	cmp	r8, #1
   28c54:	vdiv.f64	d9, d8, d6
   28c58:	beq	292f4 <__assert_fail@plt+0x16d00>
   28c5c:	vldr	d7, [pc, #284]	; 28d80 <__assert_fail@plt+0x1678c>
   28c60:	vcmpe.f64	d9, d7
   28c64:	vmrs	APSR_nzcv, fpscr
   28c68:	vmovpl	r2, r3, d9
   28c6c:	bpl	28cc0 <__assert_fail@plt+0x166cc>
   28c70:	vmov	r0, r1, d9
   28c74:	bl	4dca8 <__assert_fail@plt+0x3b6b4>
   28c78:	cmp	r8, #0
   28c7c:	mov	r6, r0
   28c80:	mov	r7, r1
   28c84:	movne	r0, #0
   28c88:	bne	28ca4 <__assert_fail@plt+0x166b0>
   28c8c:	bl	4db14 <__assert_fail@plt+0x3b520>
   28c90:	vmov	d7, r0, r1
   28c94:	vcmp.f64	d7, d9
   28c98:	vmrs	APSR_nzcv, fpscr
   28c9c:	movne	r0, #1
   28ca0:	moveq	r0, #0
   28ca4:	adds	r2, r6, r0
   28ca8:	adc	r3, r7, #0
   28cac:	mov	r0, r2
   28cb0:	mov	r1, r3
   28cb4:	bl	4db14 <__assert_fail@plt+0x3b520>
   28cb8:	mov	r2, r0
   28cbc:	mov	r3, r1
   28cc0:	ldr	r6, [sp, #4]
   28cc4:	ldr	r1, [pc, #204]	; 28d98 <__assert_fail@plt+0x167a4>
   28cc8:	mov	r0, r6
   28ccc:	bl	124b0 <sprintf@plt>
   28cd0:	ldr	r3, [sp, #40]	; 0x28
   28cd4:	mov	r0, r6
   28cd8:	add	r6, r3, #1
   28cdc:	bl	12300 <strlen@plt>
   28ce0:	ands	r3, r4, #32
   28ce4:	cmp	r3, #0
   28ce8:	movne	r3, #1
   28cec:	moveq	r3, #2
   28cf0:	add	r3, r3, r6
   28cf4:	cmp	r0, r3
   28cf8:	mov	r7, r0
   28cfc:	bls	29338 <__assert_fail@plt+0x16d44>
   28d00:	vldr	d7, [pc, #128]	; 28d88 <__assert_fail@plt+0x16794>
   28d04:	vmul.f64	d9, d9, d7
   28d08:	vldr	d7, [pc, #112]	; 28d80 <__assert_fail@plt+0x1678c>
   28d0c:	vcmpe.f64	d9, d7
   28d10:	vmrs	APSR_nzcv, fpscr
   28d14:	bpl	28d50 <__assert_fail@plt+0x1675c>
   28d18:	vmov	r0, r1, d9
   28d1c:	bl	4dca8 <__assert_fail@plt+0x3b6b4>
   28d20:	and	r3, r4, #3
   28d24:	cmp	r3, #0
   28d28:	mov	r6, r0
   28d2c:	mov	r7, r1
   28d30:	movne	r0, #0
   28d34:	beq	2966c <__assert_fail@plt+0x17078>
   28d38:	adds	r2, r6, r0
   28d3c:	adc	r3, r7, #0
   28d40:	mov	r0, r2
   28d44:	mov	r1, r3
   28d48:	bl	4db14 <__assert_fail@plt+0x3b520>
   28d4c:	vmov	d9, r0, r1
   28d50:	vldr	d7, [pc, #48]	; 28d88 <__assert_fail@plt+0x16794>
   28d54:	ldr	r7, [sp, #4]
   28d58:	ldr	r1, [pc, #60]	; 28d9c <__assert_fail@plt+0x167a8>
   28d5c:	mov	r0, r7
   28d60:	vdiv.f64	d6, d9, d7
   28d64:	mov	r6, #0
   28d68:	vmov	r2, r3, d6
   28d6c:	bl	124b0 <sprintf@plt>
   28d70:	mov	r0, r7
   28d74:	bl	12300 <strlen@plt>
   28d78:	mov	r7, r0
   28d7c:	b	29214 <__assert_fail@plt+0x16c20>
   28d80:	andeq	r0, r0, r0
   28d84:	mvnsmi	r0, #0
   28d88:	andeq	r0, r0, r0
   28d8c:	eormi	r0, r4, r0
   28d90:	andeq	r1, r5, r4, asr #17
   28d94:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   28d98:	andeq	r2, r5, r0, ror r5
   28d9c:	andeq	r2, r5, r8, ror #10
   28da0:	orrs	r3, r6, r7
   28da4:	beq	28b94 <__assert_fail@plt+0x165a0>
   28da8:	mov	r2, r6
   28dac:	mov	r3, r7
   28db0:	ldrd	r0, [sp, #160]	; 0xa0
   28db4:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28db8:	orrs	r3, r2, r3
   28dbc:	bne	28b94 <__assert_fail@plt+0x165a0>
   28dc0:	mov	r2, r6
   28dc4:	mov	r3, r7
   28dc8:	ldrd	r0, [sp, #160]	; 0xa0
   28dcc:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28dd0:	mov	sl, r0
   28dd4:	mov	fp, r1
   28dd8:	mov	r2, r0
   28ddc:	mov	r3, r1
   28de0:	mov	r0, r8
   28de4:	mov	r1, r9
   28de8:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28dec:	mov	r1, #10
   28df0:	umull	r6, r7, r2, r1
   28df4:	mla	r7, r1, r3, r7
   28df8:	mov	r2, sl
   28dfc:	mov	r3, fp
   28e00:	mov	r0, r6
   28e04:	mov	r1, r7
   28e08:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28e0c:	mov	r0, r8
   28e10:	mov	r1, r9
   28e14:	strd	sl, [sp, #32]
   28e18:	lsls	r8, r2, #1
   28e1c:	adc	r9, r3, r3
   28e20:	mov	r2, sl
   28e24:	mov	r3, fp
   28e28:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28e2c:	ldrd	r2, [sp, #32]
   28e30:	mov	sl, r0
   28e34:	mov	fp, r1
   28e38:	mov	r0, r6
   28e3c:	mov	r1, r7
   28e40:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28e44:	ldrd	r2, [sp, #32]
   28e48:	cmp	r3, r9
   28e4c:	cmpeq	r2, r8
   28e50:	mov	r6, r0
   28e54:	bls	29650 <__assert_fail@plt+0x1705c>
   28e58:	orrs	r3, r8, r9
   28e5c:	movne	r8, #1
   28e60:	moveq	r8, #0
   28e64:	ands	r3, r4, #16
   28e68:	str	r3, [sp, #32]
   28e6c:	beq	2955c <__assert_fail@plt+0x16f68>
   28e70:	ldrd	r2, [sp, #8]
   28e74:	cmp	fp, r3
   28e78:	cmpeq	sl, r2
   28e7c:	bcc	2965c <__assert_fail@plt+0x17068>
   28e80:	mov	r0, sl
   28e84:	mov	r1, fp
   28e88:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28e8c:	ldr	r1, [sp, #20]
   28e90:	add	r2, r2, r2, lsl #2
   28e94:	add	r7, r6, r2, lsl #1
   28e98:	mov	r0, r7
   28e9c:	bl	4d570 <__assert_fail@plt+0x3af7c>
   28ea0:	asr	r6, r8, #1
   28ea4:	ldrd	r2, [sp, #8]
   28ea8:	mov	r0, sl
   28eac:	add	r9, r6, r1, lsl #1
   28eb0:	mov	r1, fp
   28eb4:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28eb8:	mov	sl, r0
   28ebc:	mov	fp, r1
   28ec0:	mov	r0, r7
   28ec4:	ldr	r1, [sp, #20]
   28ec8:	bl	4d384 <__assert_fail@plt+0x3ad90>
   28ecc:	ldr	r3, [sp, #20]
   28ed0:	cmp	r3, r9
   28ed4:	mov	r6, r0
   28ed8:	bls	29694 <__assert_fail@plt+0x170a0>
   28edc:	cmn	r8, r9
   28ee0:	movne	r8, #1
   28ee4:	moveq	r8, #0
   28ee8:	ldrd	r2, [sp, #8]
   28eec:	cmp	fp, r3
   28ef0:	cmpeq	sl, r2
   28ef4:	bcc	29808 <__assert_fail@plt+0x17214>
   28ef8:	mov	r0, sl
   28efc:	mov	r1, fp
   28f00:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28f04:	ldr	r1, [sp, #20]
   28f08:	add	r2, r2, r2, lsl #2
   28f0c:	add	r7, r6, r2, lsl #1
   28f10:	mov	r0, r7
   28f14:	bl	4d570 <__assert_fail@plt+0x3af7c>
   28f18:	asr	r6, r8, #1
   28f1c:	ldrd	r2, [sp, #8]
   28f20:	mov	r0, sl
   28f24:	add	r9, r6, r1, lsl #1
   28f28:	mov	r1, fp
   28f2c:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28f30:	mov	sl, r0
   28f34:	mov	fp, r1
   28f38:	mov	r0, r7
   28f3c:	ldr	r1, [sp, #20]
   28f40:	bl	4d384 <__assert_fail@plt+0x3ad90>
   28f44:	ldr	r3, [sp, #20]
   28f48:	cmp	r3, r9
   28f4c:	mov	r6, r0
   28f50:	mov	r7, r0
   28f54:	bls	296ac <__assert_fail@plt+0x170b8>
   28f58:	cmn	r8, r9
   28f5c:	movne	r8, #1
   28f60:	moveq	r8, #0
   28f64:	ldrd	r2, [sp, #8]
   28f68:	cmp	fp, r3
   28f6c:	cmpeq	sl, r2
   28f70:	bcc	29810 <__assert_fail@plt+0x1721c>
   28f74:	mov	r0, sl
   28f78:	mov	r1, fp
   28f7c:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28f80:	ldr	r9, [sp, #20]
   28f84:	mov	r1, r9
   28f88:	add	r2, r2, r2, lsl #2
   28f8c:	add	r6, r7, r2, lsl #1
   28f90:	mov	r0, r6
   28f94:	bl	4d570 <__assert_fail@plt+0x3af7c>
   28f98:	asr	r7, r8, #1
   28f9c:	ldrd	r2, [sp, #8]
   28fa0:	mov	r0, sl
   28fa4:	add	r7, r7, r1, lsl #1
   28fa8:	mov	r1, fp
   28fac:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28fb0:	mov	sl, r0
   28fb4:	mov	fp, r1
   28fb8:	mov	r0, r6
   28fbc:	mov	r1, r9
   28fc0:	bl	4d384 <__assert_fail@plt+0x3ad90>
   28fc4:	cmp	r9, r7
   28fc8:	mov	r6, r0
   28fcc:	mov	r9, r0
   28fd0:	bls	296c4 <__assert_fail@plt+0x170d0>
   28fd4:	cmn	r8, r7
   28fd8:	movne	r8, #1
   28fdc:	moveq	r8, #0
   28fe0:	ldrd	r2, [sp, #8]
   28fe4:	cmp	fp, r3
   28fe8:	cmpeq	sl, r2
   28fec:	bcc	29818 <__assert_fail@plt+0x17224>
   28ff0:	mov	r0, sl
   28ff4:	mov	r1, fp
   28ff8:	bl	4dc5c <__assert_fail@plt+0x3b668>
   28ffc:	ldr	r1, [sp, #20]
   29000:	asr	r7, r8, #1
   29004:	add	r2, r2, r2, lsl #2
   29008:	add	r6, r9, r2, lsl #1
   2900c:	mov	r0, r6
   29010:	bl	4d570 <__assert_fail@plt+0x3af7c>
   29014:	ldrd	r2, [sp, #8]
   29018:	mov	r0, sl
   2901c:	add	r7, r7, r1, lsl #1
   29020:	mov	r1, fp
   29024:	bl	4dc5c <__assert_fail@plt+0x3b668>
   29028:	ldr	r9, [sp, #20]
   2902c:	mov	sl, r0
   29030:	mov	fp, r1
   29034:	mov	r0, r6
   29038:	mov	r1, r9
   2903c:	bl	4d384 <__assert_fail@plt+0x3ad90>
   29040:	cmp	r9, r7
   29044:	mov	r6, r0
   29048:	mov	r9, r0
   2904c:	bls	296dc <__assert_fail@plt+0x170e8>
   29050:	cmn	r8, r7
   29054:	movne	r8, #1
   29058:	moveq	r8, #0
   2905c:	ldrd	r2, [sp, #8]
   29060:	cmp	fp, r3
   29064:	cmpeq	sl, r2
   29068:	bcc	29850 <__assert_fail@plt+0x1725c>
   2906c:	mov	r0, sl
   29070:	mov	r1, fp
   29074:	bl	4dc5c <__assert_fail@plt+0x3b668>
   29078:	ldr	r1, [sp, #20]
   2907c:	asr	r7, r8, #1
   29080:	add	r2, r2, r2, lsl #2
   29084:	add	r6, r9, r2, lsl #1
   29088:	mov	r0, r6
   2908c:	bl	4d570 <__assert_fail@plt+0x3af7c>
   29090:	ldrd	r2, [sp, #8]
   29094:	mov	r0, sl
   29098:	add	r7, r7, r1, lsl #1
   2909c:	mov	r1, fp
   290a0:	bl	4dc5c <__assert_fail@plt+0x3b668>
   290a4:	ldr	r9, [sp, #20]
   290a8:	mov	sl, r0
   290ac:	mov	fp, r1
   290b0:	mov	r0, r6
   290b4:	mov	r1, r9
   290b8:	bl	4d384 <__assert_fail@plt+0x3ad90>
   290bc:	cmp	r9, r7
   290c0:	mov	r6, r0
   290c4:	mov	r9, r0
   290c8:	bls	296f4 <__assert_fail@plt+0x17100>
   290cc:	cmn	r8, r7
   290d0:	movne	r8, #1
   290d4:	moveq	r8, #0
   290d8:	ldrd	r2, [sp, #8]
   290dc:	cmp	r3, fp
   290e0:	cmpeq	r2, sl
   290e4:	bhi	29858 <__assert_fail@plt+0x17264>
   290e8:	mov	r0, sl
   290ec:	mov	r1, fp
   290f0:	bl	4dc5c <__assert_fail@plt+0x3b668>
   290f4:	ldr	r1, [sp, #20]
   290f8:	asr	r7, r8, #1
   290fc:	add	r2, r2, r2, lsl #2
   29100:	add	r6, r9, r2, lsl #1
   29104:	mov	r0, r6
   29108:	bl	4d570 <__assert_fail@plt+0x3af7c>
   2910c:	ldrd	r2, [sp, #8]
   29110:	mov	r0, sl
   29114:	add	r7, r7, r1, lsl #1
   29118:	mov	r1, fp
   2911c:	bl	4dc5c <__assert_fail@plt+0x3b668>
   29120:	ldr	r9, [sp, #20]
   29124:	mov	sl, r0
   29128:	mov	fp, r1
   2912c:	mov	r0, r6
   29130:	mov	r1, r9
   29134:	bl	4d384 <__assert_fail@plt+0x3ad90>
   29138:	cmp	r9, r7
   2913c:	mov	r6, r0
   29140:	bls	2970c <__assert_fail@plt+0x17118>
   29144:	cmn	r8, r7
   29148:	movne	r8, #1
   2914c:	moveq	r8, #0
   29150:	mov	r9, #6
   29154:	cmp	fp, #0
   29158:	cmpeq	sl, #9
   2915c:	bhi	297fc <__assert_fail@plt+0x17208>
   29160:	and	r3, r4, #3
   29164:	cmp	r3, #1
   29168:	beq	29790 <__assert_fail@plt+0x1719c>
   2916c:	cmp	r8, #0
   29170:	and	r3, r4, #3
   29174:	clz	r3, r3
   29178:	lsr	r3, r3, #5
   2917c:	moveq	r3, #0
   29180:	cmp	r3, #0
   29184:	beq	29768 <__assert_fail@plt+0x17174>
   29188:	add	r6, r6, #1
   2918c:	cmp	r6, #10
   29190:	beq	297e0 <__assert_fail@plt+0x171ec>
   29194:	add	r7, r6, #48	; 0x30
   29198:	uxtb	r3, r7
   2919c:	ldr	r2, [sp, #16]
   291a0:	ldr	r0, [sp, #4]
   291a4:	add	r7, r2, #2
   291a8:	ldr	r2, [sp, #40]	; 0x28
   291ac:	strb	r3, [r0, #646]	; 0x286
   291b0:	sub	r1, r7, r2
   291b4:	str	r1, [sp, #16]
   291b8:	mov	r0, r1
   291bc:	mov	r8, #0
   291c0:	ldr	r1, [sp, #44]	; 0x2c
   291c4:	bl	12024 <memcpy@plt>
   291c8:	mov	r6, r8
   291cc:	b	29568 <__assert_fail@plt+0x16f74>
   291d0:	and	r9, r4, #3
   291d4:	cmp	r9, #1
   291d8:	beq	291ec <__assert_fail@plt+0x16bf8>
   291dc:	vldr	d7, [pc, #860]	; 29540 <__assert_fail@plt+0x16f4c>
   291e0:	vcmpe.f64	d8, d7
   291e4:	vmrs	APSR_nzcv, fpscr
   291e8:	bmi	29400 <__assert_fail@plt+0x16e0c>
   291ec:	ldr	r6, [sp, #4]
   291f0:	vmov	r2, r3, d8
   291f4:	ldr	r1, [pc, #852]	; 29550 <__assert_fail@plt+0x16f5c>
   291f8:	mov	r0, r6
   291fc:	bl	124b0 <sprintf@plt>
   29200:	mov	r0, r6
   29204:	bl	12300 <strlen@plt>
   29208:	mov	r6, #0
   2920c:	mvn	r9, #0
   29210:	mov	r7, r0
   29214:	ldr	r3, [sp]
   29218:	mov	r2, r7
   2921c:	sub	r8, r3, r7
   29220:	mov	r0, r8
   29224:	ldr	r1, [sp, #4]
   29228:	bl	11fb8 <memmove@plt>
   2922c:	sub	r7, r7, r6
   29230:	add	r7, r8, r7
   29234:	tst	r4, #4
   29238:	bne	2936c <__assert_fail@plt+0x16d78>
   2923c:	tst	r4, #128	; 0x80
   29240:	beq	292d8 <__assert_fail@plt+0x16ce4>
   29244:	cmn	r9, #1
   29248:	beq	29450 <__assert_fail@plt+0x16e5c>
   2924c:	and	r3, r4, #256	; 0x100
   29250:	orrs	r2, r9, r3
   29254:	beq	292d8 <__assert_fail@plt+0x16ce4>
   29258:	tst	r4, #64	; 0x40
   2925c:	ldrne	r1, [sp, #4]
   29260:	addne	r2, r1, #648	; 0x288
   29264:	strne	r2, [sp]
   29268:	movne	r2, #32
   2926c:	strbne	r2, [r1, #647]	; 0x287
   29270:	cmp	r9, #0
   29274:	beq	29860 <__assert_fail@plt+0x1726c>
   29278:	ldr	r2, [sp, #28]
   2927c:	ldr	r0, [sp]
   29280:	cmp	r2, #0
   29284:	cmpeq	r9, #1
   29288:	ldr	r2, [sp]
   2928c:	ldrne	r1, [pc, #704]	; 29554 <__assert_fail@plt+0x16f60>
   29290:	moveq	r1, #107	; 0x6b
   29294:	add	r2, r2, #1
   29298:	ldrbne	r1, [r1, r9]
   2929c:	cmp	r3, #0
   292a0:	streq	r2, [sp]
   292a4:	strb	r1, [r0]
   292a8:	beq	292d8 <__assert_fail@plt+0x16ce4>
   292ac:	ldr	r3, [sp, #28]
   292b0:	cmp	r9, #0
   292b4:	cmpne	r3, #0
   292b8:	movne	r2, r0
   292bc:	movne	r3, #105	; 0x69
   292c0:	strbne	r3, [r2, #1]
   292c4:	addne	r2, r2, #2
   292c8:	mov	r3, #66	; 0x42
   292cc:	strb	r3, [r2]
   292d0:	add	r3, r2, #1
   292d4:	str	r3, [sp]
   292d8:	ldr	r2, [sp]
   292dc:	mov	r3, #0
   292e0:	mov	r0, r8
   292e4:	strb	r3, [r2]
   292e8:	add	sp, sp, #100	; 0x64
   292ec:	vpop	{d8-d9}
   292f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292f4:	ldr	r6, [sp, #4]
   292f8:	vmov	r2, r3, d9
   292fc:	ldr	r1, [pc, #596]	; 29558 <__assert_fail@plt+0x16f64>
   29300:	mov	r0, r6
   29304:	bl	124b0 <sprintf@plt>
   29308:	ldr	r3, [sp, #40]	; 0x28
   2930c:	mov	r0, r6
   29310:	add	r6, r3, #1
   29314:	bl	12300 <strlen@plt>
   29318:	ands	r3, r4, #32
   2931c:	cmp	r3, #0
   29320:	movne	r3, #1
   29324:	moveq	r3, #2
   29328:	add	r3, r3, r6
   2932c:	cmp	r3, r0
   29330:	mov	r7, r0
   29334:	bcc	29688 <__assert_fail@plt+0x17094>
   29338:	tst	r4, #8
   2933c:	beq	29214 <__assert_fail@plt+0x16c20>
   29340:	ldr	r3, [sp, #4]
   29344:	add	r3, r3, r7
   29348:	ldrb	r3, [r3, #-1]
   2934c:	cmp	r3, #48	; 0x30
   29350:	bne	29214 <__assert_fail@plt+0x16c20>
   29354:	vldr	d7, [pc, #492]	; 29548 <__assert_fail@plt+0x16f54>
   29358:	and	r3, r4, #3
   2935c:	cmp	r3, #1
   29360:	vmul.f64	d9, d9, d7
   29364:	beq	28d50 <__assert_fail@plt+0x1675c>
   29368:	b	28d08 <__assert_fail@plt+0x16714>
   2936c:	ldr	r0, [sp, #24]
   29370:	bl	12300 <strlen@plt>
   29374:	sub	r6, r7, r8
   29378:	mov	r1, r8
   2937c:	mov	r2, r6
   29380:	mvn	sl, #0
   29384:	mov	fp, r0
   29388:	add	r0, sp, #52	; 0x34
   2938c:	bl	12024 <memcpy@plt>
   29390:	ldr	r8, [sp, #24]
   29394:	b	2939c <__assert_fail@plt+0x16da8>
   29398:	bl	12024 <memcpy@plt>
   2939c:	ldrb	r3, [r5]
   293a0:	cmp	r3, #0
   293a4:	beq	293b8 <__assert_fail@plt+0x16dc4>
   293a8:	cmp	r3, #255	; 0xff
   293ac:	movne	sl, r3
   293b0:	moveq	sl, r6
   293b4:	add	r5, r5, #1
   293b8:	cmp	sl, r6
   293bc:	movcs	sl, r6
   293c0:	sub	r3, r7, sl
   293c4:	sub	r6, r6, sl
   293c8:	add	r2, sp, #52	; 0x34
   293cc:	add	r1, r2, r6
   293d0:	mov	r0, r3
   293d4:	mov	r2, sl
   293d8:	sub	r7, r3, fp
   293dc:	bl	12024 <memcpy@plt>
   293e0:	cmp	r6, #0
   293e4:	mov	r2, fp
   293e8:	mov	r1, r8
   293ec:	mov	r3, r0
   293f0:	mov	r0, r7
   293f4:	bne	29398 <__assert_fail@plt+0x16da4>
   293f8:	mov	r8, r3
   293fc:	b	2923c <__assert_fail@plt+0x16c48>
   29400:	vmov	r0, r1, d8
   29404:	bl	4dca8 <__assert_fail@plt+0x3b6b4>
   29408:	cmp	r9, #0
   2940c:	mov	r6, r0
   29410:	mov	r7, r1
   29414:	bne	29430 <__assert_fail@plt+0x16e3c>
   29418:	bl	4db14 <__assert_fail@plt+0x3b520>
   2941c:	vmov	d7, r0, r1
   29420:	vcmp.f64	d7, d8
   29424:	vmrs	APSR_nzcv, fpscr
   29428:	movne	r8, #1
   2942c:	moveq	r8, #0
   29430:	adds	r0, r6, r8
   29434:	adc	r1, r7, #0
   29438:	bl	4db14 <__assert_fail@plt+0x3b520>
   2943c:	vmov	d8, r0, r1
   29440:	b	291ec <__assert_fail@plt+0x16bf8>
   29444:	mov	r8, #0
   29448:	mov	r6, r8
   2944c:	b	28e64 <__assert_fail@plt+0x16870>
   29450:	ldrd	r2, [sp, #160]	; 0xa0
   29454:	cmp	r3, #0
   29458:	cmpeq	r2, #1
   2945c:	bls	29780 <__assert_fail@plt+0x1718c>
   29460:	ldrd	r6, [sp, #8]
   29464:	mov	r1, r3
   29468:	mov	r0, r2
   2946c:	cmp	r1, r7
   29470:	cmpeq	r0, r6
   29474:	bls	29788 <__assert_fail@plt+0x17194>
   29478:	mul	r1, r6, r7
   2947c:	umull	r2, r3, r6, r6
   29480:	add	r3, r3, r1, lsl #1
   29484:	ldrd	r0, [sp, #160]	; 0xa0
   29488:	cmp	r1, r3
   2948c:	cmpeq	r0, r2
   29490:	bls	297a8 <__assert_fail@plt+0x171b4>
   29494:	mul	ip, r2, r7
   29498:	umull	r0, r1, r2, r6
   2949c:	mla	r3, r6, r3, ip
   294a0:	mov	lr, r6
   294a4:	add	r1, r3, r1
   294a8:	ldrd	r2, [sp, #160]	; 0xa0
   294ac:	cmp	r3, r1
   294b0:	cmpeq	r2, r0
   294b4:	bls	297b0 <__assert_fail@plt+0x171bc>
   294b8:	mul	ip, r0, r7
   294bc:	umull	r2, r3, r0, r6
   294c0:	mla	r1, r6, r1, ip
   294c4:	add	r3, r1, r3
   294c8:	ldrd	r0, [sp, #160]	; 0xa0
   294cc:	cmp	r1, r3
   294d0:	cmpeq	r0, r2
   294d4:	bls	297b8 <__assert_fail@plt+0x171c4>
   294d8:	mul	ip, r2, r7
   294dc:	umull	r0, r1, r2, r6
   294e0:	mla	r3, r6, r3, ip
   294e4:	add	r1, r3, r1
   294e8:	ldrd	r2, [sp, #160]	; 0xa0
   294ec:	cmp	r3, r1
   294f0:	cmpeq	r2, r0
   294f4:	bls	297c0 <__assert_fail@plt+0x171cc>
   294f8:	mul	ip, r0, r7
   294fc:	umull	r2, r3, r0, r6
   29500:	mla	r1, r6, r1, ip
   29504:	add	r3, r1, r3
   29508:	ldrd	r0, [sp, #160]	; 0xa0
   2950c:	cmp	r1, r3
   29510:	cmpeq	r0, r2
   29514:	bls	297c8 <__assert_fail@plt+0x171d4>
   29518:	mul	ip, r2, r7
   2951c:	umull	r0, r1, r2, r6
   29520:	mla	r3, r6, r3, ip
   29524:	add	r1, r3, r1
   29528:	ldrd	r2, [sp, #160]	; 0xa0
   2952c:	cmp	r3, r1
   29530:	cmpeq	r2, r0
   29534:	movhi	r9, #8
   29538:	movls	r9, #7
   2953c:	b	2924c <__assert_fail@plt+0x16c58>
   29540:	andeq	r0, r0, r0
   29544:	mvnsmi	r0, #0
   29548:	andeq	r0, r0, r0
   2954c:	eormi	r0, r4, r0
   29550:	andeq	r2, r5, r8, ror #10
   29554:	andeq	r2, r5, r8, asr #10
   29558:	andeq	r2, r5, r0, ror r5
   2955c:	ldr	r3, [sp]
   29560:	mvn	r9, #0
   29564:	str	r3, [sp, #16]
   29568:	and	r3, r4, #3
   2956c:	cmp	r3, #1
   29570:	beq	295d4 <__assert_fail@plt+0x16fe0>
   29574:	and	r3, r4, #3
   29578:	cmp	r3, #0
   2957c:	bne	295fc <__assert_fail@plt+0x17008>
   29580:	add	r7, r6, r8
   29584:	cmp	r7, #0
   29588:	ble	295fc <__assert_fail@plt+0x17008>
   2958c:	adds	sl, sl, #1
   29590:	adc	fp, fp, #0
   29594:	ands	r3, r4, #16
   29598:	cmp	r3, #0
   2959c:	beq	295fc <__assert_fail@plt+0x17008>
   295a0:	ldrd	r2, [sp, #8]
   295a4:	cmp	fp, r3
   295a8:	cmpeq	sl, r2
   295ac:	bne	295fc <__assert_fail@plt+0x17008>
   295b0:	tst	r4, #8
   295b4:	add	r9, r9, #1
   295b8:	beq	29820 <__assert_fail@plt+0x1722c>
   295bc:	ldr	r2, [sp, #16]
   295c0:	mov	r3, #49	; 0x31
   295c4:	sub	r8, r2, #1
   295c8:	strb	r3, [r2, #-1]
   295cc:	mov	r7, r2
   295d0:	b	29234 <__assert_fail@plt+0x16c40>
   295d4:	and	r2, sl, #1
   295d8:	adds	r2, r2, r8
   295dc:	mov	r3, #0
   295e0:	adc	r3, r3, r8, asr #31
   295e4:	orr	r7, r2, r3
   295e8:	cmp	r7, #0
   295ec:	moveq	r7, r6
   295f0:	addne	r7, r6, #1
   295f4:	cmp	r7, #5
   295f8:	bgt	2958c <__assert_fail@plt+0x16f98>
   295fc:	ldr	r8, [sp, #16]
   29600:	mov	r6, #10
   29604:	mov	r7, #0
   29608:	mov	r0, sl
   2960c:	mov	r1, fp
   29610:	mov	r2, r6
   29614:	mov	r3, r7
   29618:	bl	4dc5c <__assert_fail@plt+0x3b668>
   2961c:	mov	r0, sl
   29620:	mov	r1, fp
   29624:	mov	r3, r7
   29628:	add	r2, r2, #48	; 0x30
   2962c:	strb	r2, [r8, #-1]!
   29630:	mov	r2, r6
   29634:	bl	4dc5c <__assert_fail@plt+0x3b668>
   29638:	mov	sl, r0
   2963c:	mov	fp, r1
   29640:	orrs	r3, sl, fp
   29644:	bne	29608 <__assert_fail@plt+0x17014>
   29648:	ldr	r7, [sp, #16]
   2964c:	b	29234 <__assert_fail@plt+0x16c40>
   29650:	movcc	r8, #3
   29654:	movcs	r8, #2
   29658:	b	28e64 <__assert_fail@plt+0x16870>
   2965c:	ldr	r3, [sp]
   29660:	mov	r9, #0
   29664:	str	r3, [sp, #16]
   29668:	b	29568 <__assert_fail@plt+0x16f74>
   2966c:	bl	4db14 <__assert_fail@plt+0x3b520>
   29670:	vmov	d7, r0, r1
   29674:	vcmp.f64	d7, d9
   29678:	vmrs	APSR_nzcv, fpscr
   2967c:	movne	r0, #1
   29680:	moveq	r0, #0
   29684:	b	28d38 <__assert_fail@plt+0x16744>
   29688:	vldr	d7, [pc, #480]	; 29870 <__assert_fail@plt+0x1727c>
   2968c:	vmul.f64	d9, d9, d7
   29690:	b	28d50 <__assert_fail@plt+0x1675c>
   29694:	mov	r2, r3
   29698:	add	r3, r8, r9
   2969c:	cmp	r2, r3
   296a0:	movcs	r8, #2
   296a4:	movcc	r8, #3
   296a8:	b	28ee8 <__assert_fail@plt+0x168f4>
   296ac:	mov	r2, r3
   296b0:	add	r3, r8, r9
   296b4:	cmp	r2, r3
   296b8:	movcs	r8, #2
   296bc:	movcc	r8, #3
   296c0:	b	28f64 <__assert_fail@plt+0x16970>
   296c4:	ldr	r3, [sp, #20]
   296c8:	add	r7, r8, r7
   296cc:	cmp	r3, r7
   296d0:	movcs	r8, #2
   296d4:	movcc	r8, #3
   296d8:	b	28fe0 <__assert_fail@plt+0x169ec>
   296dc:	ldr	r3, [sp, #20]
   296e0:	add	r7, r8, r7
   296e4:	cmp	r3, r7
   296e8:	movcs	r8, #2
   296ec:	movcc	r8, #3
   296f0:	b	2905c <__assert_fail@plt+0x16a68>
   296f4:	ldr	r3, [sp, #20]
   296f8:	add	r7, r8, r7
   296fc:	cmp	r3, r7
   29700:	movcs	r8, #2
   29704:	movcc	r8, #3
   29708:	b	290d8 <__assert_fail@plt+0x16ae4>
   2970c:	add	r7, r8, r7
   29710:	cmp	r9, r7
   29714:	movcs	r8, #2
   29718:	movcc	r8, #3
   2971c:	b	29150 <__assert_fail@plt+0x16b5c>
   29720:	vmov.f64	d6, d7
   29724:	mov	r9, #1
   29728:	b	28c4c <__assert_fail@plt+0x16658>
   2972c:	mov	r9, #2
   29730:	b	28c4c <__assert_fail@plt+0x16658>
   29734:	vmov.f64	d6, d5
   29738:	mov	r9, #3
   2973c:	b	28c4c <__assert_fail@plt+0x16658>
   29740:	mov	r9, #4
   29744:	b	28c4c <__assert_fail@plt+0x16658>
   29748:	vmov.f64	d6, d5
   2974c:	mov	r9, #5
   29750:	b	28c4c <__assert_fail@plt+0x16658>
   29754:	mov	r9, #6
   29758:	b	28c4c <__assert_fail@plt+0x16658>
   2975c:	vmov.f64	d6, d5
   29760:	mov	r9, #7
   29764:	b	28c4c <__assert_fail@plt+0x16658>
   29768:	cmp	r6, #0
   2976c:	bne	29194 <__assert_fail@plt+0x16ba0>
   29770:	tst	r4, #8
   29774:	bne	297d0 <__assert_fail@plt+0x171dc>
   29778:	mov	r3, #48	; 0x30
   2977c:	b	2919c <__assert_fail@plt+0x16ba8>
   29780:	mov	r9, #0
   29784:	b	2924c <__assert_fail@plt+0x16c58>
   29788:	mov	r9, #1
   2978c:	b	2924c <__assert_fail@plt+0x16c58>
   29790:	and	r3, r6, #1
   29794:	add	r3, r3, r8
   29798:	cmp	r3, #2
   2979c:	movle	r3, #0
   297a0:	movgt	r3, #1
   297a4:	b	29180 <__assert_fail@plt+0x16b8c>
   297a8:	mov	r9, #2
   297ac:	b	2924c <__assert_fail@plt+0x16c58>
   297b0:	mov	r9, #3
   297b4:	b	2924c <__assert_fail@plt+0x16c58>
   297b8:	mov	r9, #4
   297bc:	b	2924c <__assert_fail@plt+0x16c58>
   297c0:	mov	r9, #5
   297c4:	b	2924c <__assert_fail@plt+0x16c58>
   297c8:	mov	r9, #6
   297cc:	b	2924c <__assert_fail@plt+0x16c58>
   297d0:	ldr	r3, [sp]
   297d4:	mov	r6, #0
   297d8:	str	r3, [sp, #16]
   297dc:	b	29568 <__assert_fail@plt+0x16f74>
   297e0:	adds	sl, sl, #1
   297e4:	adc	fp, fp, #0
   297e8:	cmp	fp, #0
   297ec:	cmpeq	sl, #10
   297f0:	mov	r8, #0
   297f4:	moveq	r6, r8
   297f8:	bne	29770 <__assert_fail@plt+0x1717c>
   297fc:	ldr	r3, [sp]
   29800:	str	r3, [sp, #16]
   29804:	b	29568 <__assert_fail@plt+0x16f74>
   29808:	mov	r9, #1
   2980c:	b	29154 <__assert_fail@plt+0x16b60>
   29810:	mov	r9, #2
   29814:	b	29154 <__assert_fail@plt+0x16b60>
   29818:	mov	r9, #3
   2981c:	b	29154 <__assert_fail@plt+0x16b60>
   29820:	ldr	ip, [sp, #40]	; 0x28
   29824:	ldr	r1, [sp, #16]
   29828:	mvn	r3, ip
   2982c:	add	r3, r1, r3
   29830:	mov	r2, #48	; 0x30
   29834:	strb	r2, [r1, #-1]
   29838:	mov	r0, r3
   2983c:	ldr	r1, [sp, #44]	; 0x2c
   29840:	mov	r2, ip
   29844:	str	r3, [sp, #16]
   29848:	bl	12024 <memcpy@plt>
   2984c:	b	295bc <__assert_fail@plt+0x16fc8>
   29850:	mov	r9, #4
   29854:	b	29154 <__assert_fail@plt+0x16b60>
   29858:	mov	r9, #5
   2985c:	b	29154 <__assert_fail@plt+0x16b60>
   29860:	cmp	r3, #0
   29864:	ldrne	r2, [sp]
   29868:	bne	292c8 <__assert_fail@plt+0x16cd4>
   2986c:	b	292d8 <__assert_fail@plt+0x16ce4>
   29870:	andeq	r0, r0, r0
   29874:	eormi	r0, r4, r0
   29878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2987c:	subs	r4, r0, #0
   29880:	sub	sp, sp, #20
   29884:	mov	r8, r1
   29888:	mov	r7, r2
   2988c:	beq	2999c <__assert_fail@plt+0x173a8>
   29890:	ldrb	r3, [r4]
   29894:	ldr	r5, [pc, #384]	; 29a1c <__assert_fail@plt+0x17428>
   29898:	cmp	r3, #39	; 0x27
   2989c:	addeq	r4, r4, #1
   298a0:	mov	r3, #4
   298a4:	add	r2, r5, #12
   298a8:	add	r1, r5, #20
   298ac:	mov	r0, r4
   298b0:	moveq	r9, #164	; 0xa4
   298b4:	moveq	fp, #420	; 0x1a4
   298b8:	moveq	sl, #388	; 0x184
   298bc:	moveq	r6, #4
   298c0:	movne	r9, #160	; 0xa0
   298c4:	movne	fp, #416	; 0x1a0
   298c8:	movne	sl, #384	; 0x180
   298cc:	movne	r6, #0
   298d0:	bl	4c570 <__assert_fail@plt+0x39f7c>
   298d4:	cmp	r0, #0
   298d8:	blt	29938 <__assert_fail@plt+0x17344>
   298dc:	add	r5, r5, r0, lsl #2
   298e0:	mov	r1, #0
   298e4:	ldr	ip, [r5, #12]
   298e8:	mov	r0, #1
   298ec:	mov	r2, r0
   298f0:	orr	r6, r6, ip
   298f4:	mov	r3, r1
   298f8:	str	r0, [r7]
   298fc:	str	r1, [r7, #4]
   29900:	mov	r0, #0
   29904:	str	r6, [r8]
   29908:	orrs	r3, r2, r3
   2990c:	bne	29930 <__assert_fail@plt+0x1733c>
   29910:	ldr	r0, [pc, #264]	; 29a20 <__assert_fail@plt+0x1742c>
   29914:	bl	12228 <getenv@plt>
   29918:	mov	r3, #0
   2991c:	cmp	r0, #0
   29920:	movne	r2, #512	; 0x200
   29924:	moveq	r2, #1024	; 0x400
   29928:	mov	r0, #4
   2992c:	strd	r2, [r7]
   29930:	add	sp, sp, #20
   29934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29938:	ldr	r2, [pc, #228]	; 29a24 <__assert_fail@plt+0x17430>
   2993c:	mov	r3, r7
   29940:	str	r2, [sp]
   29944:	add	r1, sp, #12
   29948:	mov	r2, #0
   2994c:	mov	r0, r4
   29950:	bl	36340 <__assert_fail@plt+0x23d4c>
   29954:	cmp	r0, #0
   29958:	bne	299e0 <__assert_fail@plt+0x173ec>
   2995c:	ldrb	r3, [r4]
   29960:	sub	r3, r3, #48	; 0x30
   29964:	cmp	r3, #9
   29968:	bls	29994 <__assert_fail@plt+0x173a0>
   2996c:	ldr	r2, [sp, #12]
   29970:	cmp	r4, r2
   29974:	bne	29984 <__assert_fail@plt+0x17390>
   29978:	b	299f0 <__assert_fail@plt+0x173fc>
   2997c:	cmp	r2, r4
   29980:	beq	299f0 <__assert_fail@plt+0x173fc>
   29984:	ldrb	r3, [r4, #1]!
   29988:	sub	r3, r3, #48	; 0x30
   2998c:	cmp	r3, #9
   29990:	bhi	2997c <__assert_fail@plt+0x17388>
   29994:	ldrd	r2, [r7]
   29998:	b	29900 <__assert_fail@plt+0x1730c>
   2999c:	ldr	r0, [pc, #132]	; 29a28 <__assert_fail@plt+0x17434>
   299a0:	bl	12228 <getenv@plt>
   299a4:	subs	r4, r0, #0
   299a8:	bne	29890 <__assert_fail@plt+0x1729c>
   299ac:	ldr	r0, [pc, #120]	; 29a2c <__assert_fail@plt+0x17438>
   299b0:	bl	12228 <getenv@plt>
   299b4:	subs	r4, r0, #0
   299b8:	bne	29890 <__assert_fail@plt+0x1729c>
   299bc:	ldr	r0, [pc, #92]	; 29a20 <__assert_fail@plt+0x1742c>
   299c0:	bl	12228 <getenv@plt>
   299c4:	mov	r3, #0
   299c8:	mov	r6, #0
   299cc:	cmp	r0, #0
   299d0:	movne	r2, #512	; 0x200
   299d4:	moveq	r2, #1024	; 0x400
   299d8:	strd	r2, [r7]
   299dc:	b	29900 <__assert_fail@plt+0x1730c>
   299e0:	mov	r3, #0
   299e4:	str	r3, [r8]
   299e8:	ldrd	r2, [r7]
   299ec:	b	29908 <__assert_fail@plt+0x17314>
   299f0:	ldrb	r3, [r2, #-1]
   299f4:	cmp	r3, #66	; 0x42
   299f8:	beq	29a04 <__assert_fail@plt+0x17410>
   299fc:	mov	r6, r9
   29a00:	b	29994 <__assert_fail@plt+0x173a0>
   29a04:	ldrb	r3, [r2, #-2]
   29a08:	cmp	r3, #105	; 0x69
   29a0c:	movne	r6, sl
   29a10:	bne	29994 <__assert_fail@plt+0x173a0>
   29a14:	mov	r9, fp
   29a18:	b	299fc <__assert_fail@plt+0x17408>
   29a1c:	andeq	r2, r5, r8, asr #10
   29a20:	andeq	pc, r4, r8, asr #29
   29a24:	muleq	r5, r0, r5
   29a28:	andeq	r2, r5, r8, ror r5
   29a2c:	andeq	r2, r5, r4, lsl #11
   29a30:	push	{r4, r5, r6, r7, r8, lr}
   29a34:	ldr	r6, [pc, #144]	; 29acc <__assert_fail@plt+0x174d8>
   29a38:	ldr	r4, [r6]
   29a3c:	cmp	r4, #0
   29a40:	beq	29a6c <__assert_fail@plt+0x17478>
   29a44:	ldr	r3, [r4]
   29a48:	cmp	r0, r3
   29a4c:	bne	29a60 <__assert_fail@plt+0x1746c>
   29a50:	b	29ab0 <__assert_fail@plt+0x174bc>
   29a54:	ldr	r3, [r4]
   29a58:	cmp	r3, r0
   29a5c:	beq	29ab0 <__assert_fail@plt+0x174bc>
   29a60:	ldr	r4, [r4, #4]
   29a64:	cmp	r4, #0
   29a68:	bne	29a54 <__assert_fail@plt+0x17460>
   29a6c:	mov	r5, r0
   29a70:	bl	11f58 <getpwuid@plt>
   29a74:	cmp	r0, #0
   29a78:	beq	29ac0 <__assert_fail@plt+0x174cc>
   29a7c:	ldr	r7, [r0]
   29a80:	mov	r0, r7
   29a84:	bl	12300 <strlen@plt>
   29a88:	add	r0, r0, #12
   29a8c:	bic	r0, r0, #3
   29a90:	bl	3563c <__assert_fail@plt+0x23048>
   29a94:	mov	r1, r7
   29a98:	mov	r4, r0
   29a9c:	str	r5, [r0], #8
   29aa0:	bl	121b0 <strcpy@plt>
   29aa4:	ldr	r3, [r6]
   29aa8:	str	r4, [r6]
   29aac:	str	r3, [r4, #4]
   29ab0:	ldrb	r0, [r4, #8]
   29ab4:	cmp	r0, #0
   29ab8:	addne	r0, r4, #8
   29abc:	pop	{r4, r5, r6, r7, r8, pc}
   29ac0:	mov	r0, #12
   29ac4:	ldr	r7, [pc, #4]	; 29ad0 <__assert_fail@plt+0x174dc>
   29ac8:	b	29a90 <__assert_fail@plt+0x1749c>
   29acc:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   29ad0:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   29ad4:	push	{r4, r5, r6, r7, r8, lr}
   29ad8:	mov	r6, r0
   29adc:	ldr	r5, [pc, #236]	; 29bd0 <__assert_fail@plt+0x175dc>
   29ae0:	ldr	r4, [r5]
   29ae4:	cmp	r4, #0
   29ae8:	beq	29b28 <__assert_fail@plt+0x17534>
   29aec:	ldrb	r7, [r0]
   29af0:	b	29b00 <__assert_fail@plt+0x1750c>
   29af4:	ldr	r4, [r4, #4]
   29af8:	cmp	r4, #0
   29afc:	beq	29b28 <__assert_fail@plt+0x17534>
   29b00:	ldrb	r3, [r4, #8]
   29b04:	cmp	r3, r7
   29b08:	bne	29af4 <__assert_fail@plt+0x17500>
   29b0c:	mov	r1, r6
   29b10:	add	r0, r4, #8
   29b14:	bl	11f40 <strcmp@plt>
   29b18:	cmp	r0, #0
   29b1c:	bne	29af4 <__assert_fail@plt+0x17500>
   29b20:	mov	r0, r4
   29b24:	pop	{r4, r5, r6, r7, r8, pc}
   29b28:	ldr	r4, [r5, #4]
   29b2c:	cmp	r4, #0
   29b30:	beq	29b74 <__assert_fail@plt+0x17580>
   29b34:	ldrb	r7, [r6]
   29b38:	b	29b48 <__assert_fail@plt+0x17554>
   29b3c:	ldr	r4, [r4, #4]
   29b40:	cmp	r4, #0
   29b44:	beq	29b74 <__assert_fail@plt+0x17580>
   29b48:	ldrb	r3, [r4, #8]
   29b4c:	cmp	r3, r7
   29b50:	bne	29b3c <__assert_fail@plt+0x17548>
   29b54:	mov	r1, r6
   29b58:	add	r0, r4, #8
   29b5c:	bl	11f40 <strcmp@plt>
   29b60:	cmp	r0, #0
   29b64:	popeq	{r4, r5, r6, r7, r8, pc}
   29b68:	ldr	r4, [r4, #4]
   29b6c:	cmp	r4, #0
   29b70:	bne	29b48 <__assert_fail@plt+0x17554>
   29b74:	mov	r0, r6
   29b78:	bl	11f1c <getpwnam@plt>
   29b7c:	mov	r4, r0
   29b80:	mov	r0, r6
   29b84:	bl	12300 <strlen@plt>
   29b88:	add	r0, r0, #12
   29b8c:	bic	r0, r0, #3
   29b90:	bl	3563c <__assert_fail@plt+0x23048>
   29b94:	mov	r1, r6
   29b98:	mov	r7, r0
   29b9c:	add	r0, r0, #8
   29ba0:	bl	121b0 <strcpy@plt>
   29ba4:	cmp	r4, #0
   29ba8:	movne	r0, r7
   29bac:	ldrne	r3, [r5]
   29bb0:	ldrne	r2, [r4, #8]
   29bb4:	ldreq	r3, [r5, #4]
   29bb8:	strne	r7, [r5]
   29bbc:	moveq	r0, r4
   29bc0:	streq	r7, [r5, #4]
   29bc4:	stmne	r7, {r2, r3}
   29bc8:	streq	r3, [r7, #4]
   29bcc:	pop	{r4, r5, r6, r7, r8, pc}
   29bd0:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   29bd4:	push	{r4, r5, r6, r7, r8, lr}
   29bd8:	ldr	r6, [pc, #144]	; 29c70 <__assert_fail@plt+0x1767c>
   29bdc:	ldr	r4, [r6, #8]
   29be0:	cmp	r4, #0
   29be4:	beq	29c10 <__assert_fail@plt+0x1761c>
   29be8:	ldr	r3, [r4]
   29bec:	cmp	r0, r3
   29bf0:	bne	29c04 <__assert_fail@plt+0x17610>
   29bf4:	b	29c54 <__assert_fail@plt+0x17660>
   29bf8:	ldr	r3, [r4]
   29bfc:	cmp	r3, r0
   29c00:	beq	29c54 <__assert_fail@plt+0x17660>
   29c04:	ldr	r4, [r4, #4]
   29c08:	cmp	r4, #0
   29c0c:	bne	29bf8 <__assert_fail@plt+0x17604>
   29c10:	mov	r5, r0
   29c14:	bl	125d0 <getgrgid@plt>
   29c18:	cmp	r0, #0
   29c1c:	beq	29c64 <__assert_fail@plt+0x17670>
   29c20:	ldr	r7, [r0]
   29c24:	mov	r0, r7
   29c28:	bl	12300 <strlen@plt>
   29c2c:	add	r0, r0, #12
   29c30:	bic	r0, r0, #3
   29c34:	bl	3563c <__assert_fail@plt+0x23048>
   29c38:	mov	r1, r7
   29c3c:	mov	r4, r0
   29c40:	str	r5, [r0], #8
   29c44:	bl	121b0 <strcpy@plt>
   29c48:	ldr	r3, [r6, #8]
   29c4c:	str	r4, [r6, #8]
   29c50:	str	r3, [r4, #4]
   29c54:	ldrb	r0, [r4, #8]
   29c58:	cmp	r0, #0
   29c5c:	addne	r0, r4, #8
   29c60:	pop	{r4, r5, r6, r7, r8, pc}
   29c64:	mov	r0, #12
   29c68:	ldr	r7, [pc, #4]	; 29c74 <__assert_fail@plt+0x17680>
   29c6c:	b	29c34 <__assert_fail@plt+0x17640>
   29c70:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   29c74:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   29c78:	push	{r4, r5, r6, r7, r8, lr}
   29c7c:	mov	r6, r0
   29c80:	ldr	r5, [pc, #236]	; 29d74 <__assert_fail@plt+0x17780>
   29c84:	ldr	r4, [r5, #8]
   29c88:	cmp	r4, #0
   29c8c:	beq	29ccc <__assert_fail@plt+0x176d8>
   29c90:	ldrb	r7, [r0]
   29c94:	b	29ca4 <__assert_fail@plt+0x176b0>
   29c98:	ldr	r4, [r4, #4]
   29c9c:	cmp	r4, #0
   29ca0:	beq	29ccc <__assert_fail@plt+0x176d8>
   29ca4:	ldrb	r3, [r4, #8]
   29ca8:	cmp	r3, r7
   29cac:	bne	29c98 <__assert_fail@plt+0x176a4>
   29cb0:	mov	r1, r6
   29cb4:	add	r0, r4, #8
   29cb8:	bl	11f40 <strcmp@plt>
   29cbc:	cmp	r0, #0
   29cc0:	bne	29c98 <__assert_fail@plt+0x176a4>
   29cc4:	mov	r0, r4
   29cc8:	pop	{r4, r5, r6, r7, r8, pc}
   29ccc:	ldr	r4, [r5, #12]
   29cd0:	cmp	r4, #0
   29cd4:	beq	29d18 <__assert_fail@plt+0x17724>
   29cd8:	ldrb	r7, [r6]
   29cdc:	b	29cec <__assert_fail@plt+0x176f8>
   29ce0:	ldr	r4, [r4, #4]
   29ce4:	cmp	r4, #0
   29ce8:	beq	29d18 <__assert_fail@plt+0x17724>
   29cec:	ldrb	r3, [r4, #8]
   29cf0:	cmp	r3, r7
   29cf4:	bne	29ce0 <__assert_fail@plt+0x176ec>
   29cf8:	mov	r1, r6
   29cfc:	add	r0, r4, #8
   29d00:	bl	11f40 <strcmp@plt>
   29d04:	cmp	r0, #0
   29d08:	popeq	{r4, r5, r6, r7, r8, pc}
   29d0c:	ldr	r4, [r4, #4]
   29d10:	cmp	r4, #0
   29d14:	bne	29cec <__assert_fail@plt+0x176f8>
   29d18:	mov	r0, r6
   29d1c:	bl	125dc <getgrnam@plt>
   29d20:	mov	r4, r0
   29d24:	mov	r0, r6
   29d28:	bl	12300 <strlen@plt>
   29d2c:	add	r0, r0, #12
   29d30:	bic	r0, r0, #3
   29d34:	bl	3563c <__assert_fail@plt+0x23048>
   29d38:	mov	r1, r6
   29d3c:	mov	r7, r0
   29d40:	add	r0, r0, #8
   29d44:	bl	121b0 <strcpy@plt>
   29d48:	cmp	r4, #0
   29d4c:	movne	r0, r7
   29d50:	ldrne	r3, [r5, #8]
   29d54:	ldrne	r2, [r4, #8]
   29d58:	ldreq	r3, [r5, #12]
   29d5c:	strne	r7, [r5, #8]
   29d60:	moveq	r0, r4
   29d64:	streq	r7, [r5, #12]
   29d68:	stmne	r7, {r2, r3}
   29d6c:	streq	r3, [r7, #4]
   29d70:	pop	{r4, r5, r6, r7, r8, pc}
   29d74:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   29d78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29d7c:	mov	r6, r2
   29d80:	lsrs	r2, r6, #30
   29d84:	movne	ip, #1
   29d88:	moveq	ip, #0
   29d8c:	lsls	r2, r6, #2
   29d90:	add	fp, sp, #28
   29d94:	bmi	29da0 <__assert_fail@plt+0x177ac>
   29d98:	cmp	ip, #0
   29d9c:	beq	29dac <__assert_fail@plt+0x177b8>
   29da0:	mov	r0, #0
   29da4:	sub	sp, fp, #28
   29da8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29dac:	cmp	r2, #4016	; 0xfb0
   29db0:	mov	r5, r0
   29db4:	mov	r4, r1
   29db8:	mov	r7, r3
   29dbc:	bls	29e90 <__assert_fail@plt+0x1789c>
   29dc0:	mov	r0, r2
   29dc4:	bl	4cfac <__assert_fail@plt+0x3a9b8>
   29dc8:	cmp	r0, #0
   29dcc:	beq	29da0 <__assert_fail@plt+0x177ac>
   29dd0:	cmp	r6, #2
   29dd4:	mov	r3, #1
   29dd8:	str	r3, [r0, #4]
   29ddc:	movhi	r8, r4
   29de0:	addhi	r2, r0, #8
   29de4:	movhi	ip, #0
   29de8:	movhi	r3, #2
   29dec:	bls	29e38 <__assert_fail@plt+0x17844>
   29df0:	ldrb	r1, [r8, #1]!
   29df4:	ldrb	lr, [r4, ip]
   29df8:	cmp	lr, r1
   29dfc:	bne	29e18 <__assert_fail@plt+0x17824>
   29e00:	b	29ea8 <__assert_fail@plt+0x178b4>
   29e04:	ldr	lr, [r0, ip, lsl #2]
   29e08:	sub	ip, ip, lr
   29e0c:	ldrb	lr, [r4, ip]
   29e10:	cmp	lr, r1
   29e14:	beq	29ea8 <__assert_fail@plt+0x178b4>
   29e18:	cmp	ip, #0
   29e1c:	bne	29e04 <__assert_fail@plt+0x17810>
   29e20:	mov	ip, #0
   29e24:	str	r3, [r2]
   29e28:	add	r3, r3, #1
   29e2c:	cmp	r6, r3
   29e30:	add	r2, r2, #4
   29e34:	bne	29df0 <__assert_fail@plt+0x177fc>
   29e38:	mov	r2, #0
   29e3c:	str	r2, [r7]
   29e40:	ldrb	r3, [r5]
   29e44:	mov	ip, r5
   29e48:	cmp	r3, #0
   29e4c:	beq	29e80 <__assert_fail@plt+0x1788c>
   29e50:	ldrb	r1, [r4, r2]
   29e54:	cmp	r1, r3
   29e58:	beq	29eb8 <__assert_fail@plt+0x178c4>
   29e5c:	cmp	r2, #0
   29e60:	addeq	r5, r5, #1
   29e64:	ldrbeq	r3, [ip, #1]
   29e68:	ldrne	r1, [r0, r2, lsl #2]
   29e6c:	addeq	ip, ip, #1
   29e70:	addne	r5, r5, r1
   29e74:	subne	r2, r2, r1
   29e78:	cmp	r3, #0
   29e7c:	bne	29e50 <__assert_fail@plt+0x1785c>
   29e80:	bl	4cffc <__assert_fail@plt+0x3aa08>
   29e84:	mov	r0, #1
   29e88:	sub	sp, fp, #28
   29e8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29e90:	add	r3, r2, #29
   29e94:	bic	r3, r3, #7
   29e98:	sub	sp, sp, r3
   29e9c:	add	r0, sp, #15
   29ea0:	bic	r0, r0, #15
   29ea4:	b	29dc8 <__assert_fail@plt+0x177d4>
   29ea8:	add	ip, ip, #1
   29eac:	sub	r1, r3, ip
   29eb0:	str	r1, [r2]
   29eb4:	b	29e28 <__assert_fail@plt+0x17834>
   29eb8:	add	r2, r2, #1
   29ebc:	cmp	r6, r2
   29ec0:	add	r1, ip, #1
   29ec4:	ldrbne	r3, [ip, #1]
   29ec8:	movne	ip, r1
   29ecc:	bne	29e48 <__assert_fail@plt+0x17854>
   29ed0:	str	r5, [r7]
   29ed4:	bl	4cffc <__assert_fail@plt+0x3aa08>
   29ed8:	mov	r0, #1
   29edc:	b	29e88 <__assert_fail@plt+0x17894>
   29ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ee4:	add	fp, sp, #32
   29ee8:	sub	sp, sp, #188	; 0xbc
   29eec:	str	r0, [fp, #-212]	; 0xffffff2c
   29ef0:	mov	r0, r1
   29ef4:	mov	r4, r1
   29ef8:	str	r2, [fp, #-220]	; 0xffffff24
   29efc:	bl	4d0c0 <__assert_fail@plt+0x3aacc>
   29f00:	mov	r3, #44	; 0x2c
   29f04:	str	r0, [fp, #-208]	; 0xffffff30
   29f08:	umull	r0, r1, r0, r3
   29f0c:	adds	r2, r1, #0
   29f10:	movne	r2, #1
   29f14:	cmp	r0, #0
   29f18:	blt	29f24 <__assert_fail@plt+0x17930>
   29f1c:	cmp	r2, #0
   29f20:	beq	29f30 <__assert_fail@plt+0x1793c>
   29f24:	mov	r0, #0
   29f28:	sub	sp, fp, #32
   29f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f30:	ldr	r2, [fp, #-208]	; 0xffffff30
   29f34:	mul	r0, r3, r2
   29f38:	cmp	r0, #4016	; 0xfb0
   29f3c:	bls	2a1e8 <__assert_fail@plt+0x17bf4>
   29f40:	bl	4cfac <__assert_fail@plt+0x3a9b8>
   29f44:	mov	r3, r0
   29f48:	str	r0, [fp, #-216]	; 0xffffff28
   29f4c:	cmp	r3, #0
   29f50:	beq	29f24 <__assert_fail@plt+0x17930>
   29f54:	ldr	r2, [fp, #-208]	; 0xffffff30
   29f58:	add	r6, r3, #16
   29f5c:	mov	r7, #1
   29f60:	add	sl, r2, r2, lsl #2
   29f64:	mov	r8, #0
   29f68:	add	sl, r3, sl, lsl #3
   29f6c:	str	r4, [fp, #-188]	; 0xffffff44
   29f70:	str	r8, [fp, #-196]	; 0xffffff3c
   29f74:	strb	r8, [fp, #-204]	; 0xffffff34
   29f78:	str	r8, [fp, #-200]	; 0xffffff38
   29f7c:	strb	r8, [fp, #-192]	; 0xffffff40
   29f80:	ldrb	r3, [fp, #-204]	; 0xffffff34
   29f84:	cmp	r3, #0
   29f88:	bne	2a3c4 <__assert_fail@plt+0x17dd0>
   29f8c:	ldrb	r3, [r4]
   29f90:	ldr	r1, [pc, #1936]	; 2a728 <__assert_fail@plt+0x18134>
   29f94:	and	r2, r3, #31
   29f98:	lsr	r3, r3, #5
   29f9c:	ldr	r3, [r1, r3, lsl #2]
   29fa0:	lsr	r3, r3, r2
   29fa4:	tst	r3, #1
   29fa8:	beq	2a3b0 <__assert_fail@plt+0x17dbc>
   29fac:	str	r7, [fp, #-184]	; 0xffffff48
   29fb0:	ldrb	r4, [r4]
   29fb4:	strb	r7, [fp, #-180]	; 0xffffff4c
   29fb8:	strb	r7, [fp, #-192]	; 0xffffff40
   29fbc:	cmp	r4, #0
   29fc0:	str	r4, [fp, #-176]	; 0xffffff50
   29fc4:	bne	2a430 <__assert_fail@plt+0x17e3c>
   29fc8:	ldr	r3, [fp, #-208]	; 0xffffff30
   29fcc:	str	r7, [sl, #4]
   29fd0:	cmp	r3, #2
   29fd4:	bls	2a0c8 <__assert_fail@plt+0x17ad4>
   29fd8:	ldr	r8, [fp, #-216]	; 0xffffff28
   29fdc:	add	r7, sl, #8
   29fe0:	mov	r5, r8
   29fe4:	mov	r6, #2
   29fe8:	ldrb	r3, [r5, #48]	; 0x30
   29fec:	cmp	r3, #0
   29ff0:	bne	2a06c <__assert_fail@plt+0x17a78>
   29ff4:	ldr	r9, [r5, #44]	; 0x2c
   29ff8:	b	2a00c <__assert_fail@plt+0x17a18>
   29ffc:	cmp	r4, #0
   2a000:	beq	2a040 <__assert_fail@plt+0x17a4c>
   2a004:	ldr	r3, [sl, r4, lsl #2]
   2a008:	sub	r4, r4, r3
   2a00c:	add	r3, r4, r4, lsl #2
   2a010:	add	r2, r8, r3, lsl #3
   2a014:	ldr	r2, [r2, #4]
   2a018:	cmp	r2, r9
   2a01c:	bne	29ffc <__assert_fail@plt+0x17a08>
   2a020:	ldr	r1, [r8, r3, lsl #3]
   2a024:	mov	r2, r9
   2a028:	ldr	r0, [r5, #40]	; 0x28
   2a02c:	bl	12084 <memcmp@plt>
   2a030:	cmp	r0, #0
   2a034:	beq	2a0a4 <__assert_fail@plt+0x17ab0>
   2a038:	cmp	r4, #0
   2a03c:	bne	2a004 <__assert_fail@plt+0x17a10>
   2a040:	str	r6, [r7]
   2a044:	mov	r4, #0
   2a048:	b	2a0b0 <__assert_fail@plt+0x17abc>
   2a04c:	ldr	r3, [r3, #12]
   2a050:	ldr	r2, [r5, #52]	; 0x34
   2a054:	cmp	r2, r3
   2a058:	beq	2a0a4 <__assert_fail@plt+0x17ab0>
   2a05c:	cmp	r4, #0
   2a060:	beq	2a040 <__assert_fail@plt+0x17a4c>
   2a064:	ldr	r3, [sl, r4, lsl #2]
   2a068:	sub	r4, r4, r3
   2a06c:	add	r3, r4, r4, lsl #2
   2a070:	add	r3, r8, r3, lsl #3
   2a074:	ldrb	r2, [r3, #8]
   2a078:	cmp	r2, #0
   2a07c:	bne	2a04c <__assert_fail@plt+0x17a58>
   2a080:	ldr	r2, [r5, #44]	; 0x2c
   2a084:	ldr	r1, [r3, #4]
   2a088:	cmp	r2, r1
   2a08c:	bne	2a05c <__assert_fail@plt+0x17a68>
   2a090:	ldr	r1, [r3]
   2a094:	ldr	r0, [r5, #40]	; 0x28
   2a098:	bl	12084 <memcmp@plt>
   2a09c:	cmp	r0, #0
   2a0a0:	bne	2a05c <__assert_fail@plt+0x17a68>
   2a0a4:	add	r4, r4, #1
   2a0a8:	sub	r3, r6, r4
   2a0ac:	str	r3, [r7]
   2a0b0:	ldr	r3, [fp, #-208]	; 0xffffff30
   2a0b4:	add	r6, r6, #1
   2a0b8:	cmp	r3, r6
   2a0bc:	add	r5, r5, #40	; 0x28
   2a0c0:	add	r7, r7, #4
   2a0c4:	bne	29fe8 <__assert_fail@plt+0x179f4>
   2a0c8:	ldr	r1, [fp, #-212]	; 0xffffff2c
   2a0cc:	mov	r2, #0
   2a0d0:	str	r1, [fp, #-132]	; 0xffffff7c
   2a0d4:	str	r1, [fp, #-76]	; 0xffffffb4
   2a0d8:	str	sl, [fp, #-212]	; 0xffffff2c
   2a0dc:	ldr	r1, [fp, #-220]	; 0xffffff24
   2a0e0:	ldr	r9, [pc, #1600]	; 2a728 <__assert_fail@plt+0x18134>
   2a0e4:	ldr	sl, [fp, #-216]	; 0xffffff28
   2a0e8:	mov	r3, r2
   2a0ec:	mov	r8, r2
   2a0f0:	mov	r7, r2
   2a0f4:	mov	r6, #1
   2a0f8:	str	r2, [r1]
   2a0fc:	strb	r2, [fp, #-148]	; 0xffffff6c
   2a100:	str	r2, [fp, #-144]	; 0xffffff70
   2a104:	strb	r2, [fp, #-136]	; 0xffffff78
   2a108:	strb	r2, [fp, #-92]	; 0xffffffa4
   2a10c:	str	r2, [fp, #-88]	; 0xffffffa8
   2a110:	strb	r2, [fp, #-80]	; 0xffffffb0
   2a114:	str	r2, [fp, #-140]	; 0xffffff74
   2a118:	str	r2, [fp, #-84]	; 0xffffffac
   2a11c:	cmp	r3, #0
   2a120:	bne	2a204 <__assert_fail@plt+0x17c10>
   2a124:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2a128:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   2a12c:	cmp	r3, #0
   2a130:	bne	2a164 <__assert_fail@plt+0x17b70>
   2a134:	ldrb	r3, [r5]
   2a138:	and	r2, r3, #31
   2a13c:	lsr	r3, r3, #5
   2a140:	ldr	r3, [r9, r3, lsl #2]
   2a144:	lsr	r3, r3, r2
   2a148:	tst	r3, #1
   2a14c:	bne	2a474 <__assert_fail@plt+0x17e80>
   2a150:	sub	r0, fp, #88	; 0x58
   2a154:	bl	12060 <mbsinit@plt>
   2a158:	cmp	r0, #0
   2a15c:	beq	2a700 <__assert_fail@plt+0x1810c>
   2a160:	strb	r6, [fp, #-92]	; 0xffffffa4
   2a164:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2a168:	mov	r1, r0
   2a16c:	mov	r0, r5
   2a170:	bl	34c74 <__assert_fail@plt+0x22680>
   2a174:	sub	r3, fp, #88	; 0x58
   2a178:	mov	r1, r5
   2a17c:	mov	r2, r0
   2a180:	sub	r0, fp, #64	; 0x40
   2a184:	bl	3a03c <__assert_fail@plt+0x27a48>
   2a188:	cmn	r0, #1
   2a18c:	str	r0, [fp, #-72]	; 0xffffffb8
   2a190:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   2a194:	streq	r6, [fp, #-72]	; 0xffffffb8
   2a198:	strbeq	r6, [fp, #-80]	; 0xffffffb0
   2a19c:	beq	2a214 <__assert_fail@plt+0x17c20>
   2a1a0:	cmn	r0, #2
   2a1a4:	beq	2a590 <__assert_fail@plt+0x17f9c>
   2a1a8:	cmp	r0, #0
   2a1ac:	beq	2a688 <__assert_fail@plt+0x18094>
   2a1b0:	ldr	r4, [fp, #-64]	; 0xffffffc0
   2a1b4:	sub	r0, fp, #88	; 0x58
   2a1b8:	strb	r6, [fp, #-68]	; 0xffffffbc
   2a1bc:	bl	12060 <mbsinit@plt>
   2a1c0:	strb	r6, [fp, #-80]	; 0xffffffb0
   2a1c4:	cmp	r0, #0
   2a1c8:	strbne	r7, [fp, #-92]	; 0xffffffa4
   2a1cc:	cmp	r4, #0
   2a1d0:	bne	2a494 <__assert_fail@plt+0x17ea0>
   2a1d4:	ldr	r0, [fp, #-216]	; 0xffffff28
   2a1d8:	bl	4cffc <__assert_fail@plt+0x3aa08>
   2a1dc:	mov	r0, #1
   2a1e0:	sub	sp, fp, #32
   2a1e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1e8:	add	r3, r0, #29
   2a1ec:	bic	r3, r3, #7
   2a1f0:	sub	sp, sp, r3
   2a1f4:	add	r3, sp, #15
   2a1f8:	bic	r3, r3, #15
   2a1fc:	str	r3, [fp, #-216]	; 0xffffff28
   2a200:	b	29f4c <__assert_fail@plt+0x17958>
   2a204:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   2a208:	cmp	r3, #0
   2a20c:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   2a210:	bne	2a1cc <__assert_fail@plt+0x17bd8>
   2a214:	add	r3, r8, r8, lsl #2
   2a218:	add	r3, sl, r3, lsl #3
   2a21c:	ldr	r2, [r3, #4]
   2a220:	ldr	r4, [fp, #-72]	; 0xffffffb8
   2a224:	cmp	r2, r4
   2a228:	beq	2a524 <__assert_fail@plt+0x17f30>
   2a22c:	cmp	r8, #0
   2a230:	beq	2a4dc <__assert_fail@plt+0x17ee8>
   2a234:	ldr	r3, [fp, #-212]	; 0xffffff2c
   2a238:	ldr	r5, [r3, r8, lsl #2]
   2a23c:	cmp	r5, #0
   2a240:	sub	r8, r8, r5
   2a244:	beq	2a204 <__assert_fail@plt+0x17c10>
   2a248:	ldrb	r3, [fp, #-136]	; 0xffffff78
   2a24c:	cmp	r3, #0
   2a250:	bne	2a2fc <__assert_fail@plt+0x17d08>
   2a254:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a258:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   2a25c:	cmp	r3, #0
   2a260:	bne	2a294 <__assert_fail@plt+0x17ca0>
   2a264:	ldrb	r3, [r4]
   2a268:	and	r2, r3, #31
   2a26c:	lsr	r3, r3, #5
   2a270:	ldr	r3, [r9, r3, lsl #2]
   2a274:	lsr	r3, r3, r2
   2a278:	tst	r3, #1
   2a27c:	bne	2a330 <__assert_fail@plt+0x17d3c>
   2a280:	sub	r0, fp, #144	; 0x90
   2a284:	bl	12060 <mbsinit@plt>
   2a288:	cmp	r0, #0
   2a28c:	beq	2a700 <__assert_fail@plt+0x1810c>
   2a290:	strb	r6, [fp, #-148]	; 0xffffff6c
   2a294:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2a298:	mov	r1, r0
   2a29c:	mov	r0, r4
   2a2a0:	bl	34c74 <__assert_fail@plt+0x22680>
   2a2a4:	sub	r3, fp, #144	; 0x90
   2a2a8:	mov	r1, r4
   2a2ac:	mov	r2, r0
   2a2b0:	sub	r0, fp, #120	; 0x78
   2a2b4:	bl	3a03c <__assert_fail@plt+0x27a48>
   2a2b8:	cmn	r0, #1
   2a2bc:	str	r0, [fp, #-128]	; 0xffffff80
   2a2c0:	beq	2a34c <__assert_fail@plt+0x17d58>
   2a2c4:	cmn	r0, #2
   2a2c8:	beq	2a360 <__assert_fail@plt+0x17d6c>
   2a2cc:	cmp	r0, #0
   2a2d0:	beq	2a37c <__assert_fail@plt+0x17d88>
   2a2d4:	ldr	r4, [fp, #-120]	; 0xffffff88
   2a2d8:	sub	r0, fp, #144	; 0x90
   2a2dc:	strb	r6, [fp, #-124]	; 0xffffff84
   2a2e0:	bl	12060 <mbsinit@plt>
   2a2e4:	strb	r6, [fp, #-136]	; 0xffffff78
   2a2e8:	cmp	r0, #0
   2a2ec:	strbne	r7, [fp, #-148]	; 0xffffff6c
   2a2f0:	cmp	r4, #0
   2a2f4:	bne	2a30c <__assert_fail@plt+0x17d18>
   2a2f8:	bl	125a0 <abort@plt>
   2a2fc:	ldrb	r3, [fp, #-124]	; 0xffffff84
   2a300:	cmp	r3, #0
   2a304:	ldrne	r4, [fp, #-120]	; 0xffffff88
   2a308:	bne	2a2f0 <__assert_fail@plt+0x17cfc>
   2a30c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a310:	ldr	r3, [fp, #-128]	; 0xffffff80
   2a314:	subs	r5, r5, #1
   2a318:	add	r4, r4, r3
   2a31c:	strb	r7, [fp, #-136]	; 0xffffff78
   2a320:	str	r4, [fp, #-132]	; 0xffffff7c
   2a324:	ldrbeq	r3, [fp, #-80]	; 0xffffffb0
   2a328:	bne	2a258 <__assert_fail@plt+0x17c64>
   2a32c:	b	2a11c <__assert_fail@plt+0x17b28>
   2a330:	str	r6, [fp, #-128]	; 0xffffff80
   2a334:	ldrb	r3, [r4]
   2a338:	strb	r6, [fp, #-124]	; 0xffffff84
   2a33c:	strb	r6, [fp, #-136]	; 0xffffff78
   2a340:	str	r3, [fp, #-120]	; 0xffffff88
   2a344:	mov	r4, r3
   2a348:	b	2a2f0 <__assert_fail@plt+0x17cfc>
   2a34c:	str	r6, [fp, #-128]	; 0xffffff80
   2a350:	strb	r7, [fp, #-124]	; 0xffffff84
   2a354:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a358:	mov	r3, r6
   2a35c:	b	2a314 <__assert_fail@plt+0x17d20>
   2a360:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a364:	mov	r0, r4
   2a368:	bl	12300 <strlen@plt>
   2a36c:	strb	r7, [fp, #-124]	; 0xffffff84
   2a370:	str	r0, [fp, #-128]	; 0xffffff80
   2a374:	mov	r3, r0
   2a378:	b	2a314 <__assert_fail@plt+0x17d20>
   2a37c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a380:	str	r6, [fp, #-128]	; 0xffffff80
   2a384:	ldrb	r3, [r4]
   2a388:	cmp	r3, #0
   2a38c:	bne	2a714 <__assert_fail@plt+0x18120>
   2a390:	ldr	r4, [fp, #-120]	; 0xffffff88
   2a394:	cmp	r4, #0
   2a398:	beq	2a2d8 <__assert_fail@plt+0x17ce4>
   2a39c:	ldr	r3, [pc, #904]	; 2a72c <__assert_fail@plt+0x18138>
   2a3a0:	mov	r2, #172	; 0xac
   2a3a4:	ldr	r1, [pc, #900]	; 2a730 <__assert_fail@plt+0x1813c>
   2a3a8:	ldr	r0, [pc, #900]	; 2a734 <__assert_fail@plt+0x18140>
   2a3ac:	bl	125f4 <__assert_fail@plt>
   2a3b0:	sub	r0, fp, #200	; 0xc8
   2a3b4:	bl	12060 <mbsinit@plt>
   2a3b8:	cmp	r0, #0
   2a3bc:	beq	2a700 <__assert_fail@plt+0x1810c>
   2a3c0:	strb	r7, [fp, #-204]	; 0xffffff34
   2a3c4:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2a3c8:	mov	r1, r0
   2a3cc:	mov	r0, r4
   2a3d0:	bl	34c74 <__assert_fail@plt+0x22680>
   2a3d4:	sub	r3, fp, #200	; 0xc8
   2a3d8:	mov	r1, r4
   2a3dc:	mov	r2, r0
   2a3e0:	sub	r0, fp, #176	; 0xb0
   2a3e4:	bl	3a03c <__assert_fail@plt+0x27a48>
   2a3e8:	cmn	r0, #1
   2a3ec:	str	r0, [fp, #-184]	; 0xffffff48
   2a3f0:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   2a3f4:	streq	r7, [fp, #-184]	; 0xffffff48
   2a3f8:	beq	2a4d0 <__assert_fail@plt+0x17edc>
   2a3fc:	cmn	r0, #2
   2a400:	beq	2a4c0 <__assert_fail@plt+0x17ecc>
   2a404:	cmp	r0, #0
   2a408:	beq	2a56c <__assert_fail@plt+0x17f78>
   2a40c:	ldr	r4, [fp, #-176]	; 0xffffff50
   2a410:	sub	r0, fp, #200	; 0xc8
   2a414:	strb	r7, [fp, #-180]	; 0xffffff4c
   2a418:	bl	12060 <mbsinit@plt>
   2a41c:	strb	r7, [fp, #-192]	; 0xffffff40
   2a420:	cmp	r0, #0
   2a424:	strbne	r8, [fp, #-204]	; 0xffffff34
   2a428:	cmp	r4, #0
   2a42c:	beq	29fc8 <__assert_fail@plt+0x179d4>
   2a430:	mov	r9, r7
   2a434:	ldr	r4, [fp, #-188]	; 0xffffff44
   2a438:	sub	r3, fp, #172	; 0xac
   2a43c:	cmp	r4, r3
   2a440:	strne	r4, [r6, #-16]
   2a444:	ldrne	r5, [fp, #-184]	; 0xffffff48
   2a448:	beq	2a650 <__assert_fail@plt+0x1805c>
   2a44c:	cmp	r9, #0
   2a450:	add	r4, r4, r5
   2a454:	ldrne	r3, [fp, #-176]	; 0xffffff50
   2a458:	str	r5, [r6, #-12]
   2a45c:	strb	r9, [r6, #-8]
   2a460:	strne	r3, [r6, #-4]
   2a464:	str	r4, [fp, #-188]	; 0xffffff44
   2a468:	add	r6, r6, #40	; 0x28
   2a46c:	strb	r8, [fp, #-192]	; 0xffffff40
   2a470:	b	29f80 <__assert_fail@plt+0x1798c>
   2a474:	str	r6, [fp, #-72]	; 0xffffffb8
   2a478:	ldrb	r3, [r5]
   2a47c:	strb	r6, [fp, #-68]	; 0xffffffbc
   2a480:	strb	r6, [fp, #-80]	; 0xffffffb0
   2a484:	mov	r4, r3
   2a488:	cmp	r4, #0
   2a48c:	str	r3, [fp, #-64]	; 0xffffffc0
   2a490:	beq	2a1d4 <__assert_fail@plt+0x17be0>
   2a494:	add	r3, r8, r8, lsl #2
   2a498:	add	r3, sl, r3, lsl #3
   2a49c:	ldrb	r2, [r3, #8]
   2a4a0:	cmp	r2, #0
   2a4a4:	beq	2a21c <__assert_fail@plt+0x17c28>
   2a4a8:	ldr	r3, [r3, #12]
   2a4ac:	cmp	r4, r3
   2a4b0:	bne	2a22c <__assert_fail@plt+0x17c38>
   2a4b4:	ldr	r4, [fp, #-72]	; 0xffffffb8
   2a4b8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2a4bc:	b	2a540 <__assert_fail@plt+0x17f4c>
   2a4c0:	ldr	r0, [fp, #-188]	; 0xffffff44
   2a4c4:	bl	12300 <strlen@plt>
   2a4c8:	strb	r8, [fp, #-180]	; 0xffffff4c
   2a4cc:	str	r0, [fp, #-184]	; 0xffffff48
   2a4d0:	strb	r7, [fp, #-192]	; 0xffffff40
   2a4d4:	mov	r9, r8
   2a4d8:	b	2a434 <__assert_fail@plt+0x17e40>
   2a4dc:	ldrb	r3, [fp, #-136]	; 0xffffff78
   2a4e0:	cmp	r3, #0
   2a4e4:	beq	2a5a8 <__assert_fail@plt+0x17fb4>
   2a4e8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   2a4ec:	cmp	r3, #0
   2a4f0:	ldrne	r4, [fp, #-120]	; 0xffffff88
   2a4f4:	bne	2a644 <__assert_fail@plt+0x18050>
   2a4f8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a4fc:	ldr	r3, [fp, #-128]	; 0xffffff80
   2a500:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2a504:	add	r4, r4, r3
   2a508:	ldr	r3, [fp, #-72]	; 0xffffffb8
   2a50c:	strb	r7, [fp, #-136]	; 0xffffff78
   2a510:	add	r5, r5, r3
   2a514:	strb	r7, [fp, #-80]	; 0xffffffb0
   2a518:	str	r4, [fp, #-132]	; 0xffffff7c
   2a51c:	str	r5, [fp, #-76]	; 0xffffffb4
   2a520:	b	2a128 <__assert_fail@plt+0x17b34>
   2a524:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2a528:	ldr	r0, [r3]
   2a52c:	mov	r1, r5
   2a530:	mov	r2, r4
   2a534:	bl	12084 <memcmp@plt>
   2a538:	cmp	r0, #0
   2a53c:	bne	2a22c <__assert_fail@plt+0x17c38>
   2a540:	ldr	r3, [fp, #-208]	; 0xffffff30
   2a544:	add	r8, r8, #1
   2a548:	add	r5, r5, r4
   2a54c:	cmp	r3, r8
   2a550:	str	r5, [fp, #-76]	; 0xffffffb4
   2a554:	strb	r7, [fp, #-80]	; 0xffffffb0
   2a558:	bne	2a128 <__assert_fail@plt+0x17b34>
   2a55c:	ldr	r2, [fp, #-220]	; 0xffffff24
   2a560:	ldr	r3, [fp, #-132]	; 0xffffff7c
   2a564:	str	r3, [r2]
   2a568:	b	2a1d4 <__assert_fail@plt+0x17be0>
   2a56c:	ldr	r3, [fp, #-188]	; 0xffffff44
   2a570:	str	r7, [fp, #-184]	; 0xffffff48
   2a574:	ldrb	r3, [r3]
   2a578:	cmp	r3, #0
   2a57c:	bne	2a714 <__assert_fail@plt+0x18120>
   2a580:	ldr	r4, [fp, #-176]	; 0xffffff50
   2a584:	cmp	r4, #0
   2a588:	beq	2a410 <__assert_fail@plt+0x17e1c>
   2a58c:	b	2a39c <__assert_fail@plt+0x17da8>
   2a590:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2a594:	bl	12300 <strlen@plt>
   2a598:	strb	r7, [fp, #-68]	; 0xffffffbc
   2a59c:	strb	r6, [fp, #-80]	; 0xffffffb0
   2a5a0:	str	r0, [fp, #-72]	; 0xffffffb8
   2a5a4:	b	2a214 <__assert_fail@plt+0x17c20>
   2a5a8:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   2a5ac:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a5b0:	cmp	r3, #0
   2a5b4:	bne	2a5e8 <__assert_fail@plt+0x17ff4>
   2a5b8:	ldrb	r3, [r4]
   2a5bc:	and	r2, r3, #31
   2a5c0:	lsr	r3, r3, #5
   2a5c4:	ldr	r3, [r9, r3, lsl #2]
   2a5c8:	lsr	r3, r3, r2
   2a5cc:	tst	r3, #1
   2a5d0:	bne	2a66c <__assert_fail@plt+0x18078>
   2a5d4:	sub	r0, fp, #144	; 0x90
   2a5d8:	bl	12060 <mbsinit@plt>
   2a5dc:	cmp	r0, #0
   2a5e0:	beq	2a700 <__assert_fail@plt+0x1810c>
   2a5e4:	strb	r6, [fp, #-148]	; 0xffffff6c
   2a5e8:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2a5ec:	mov	r1, r0
   2a5f0:	mov	r0, r4
   2a5f4:	bl	34c74 <__assert_fail@plt+0x22680>
   2a5f8:	sub	r3, fp, #144	; 0x90
   2a5fc:	mov	r1, r4
   2a600:	mov	r2, r0
   2a604:	sub	r0, fp, #120	; 0x78
   2a608:	bl	3a03c <__assert_fail@plt+0x27a48>
   2a60c:	cmn	r0, #1
   2a610:	str	r0, [fp, #-128]	; 0xffffff80
   2a614:	beq	2a6ac <__assert_fail@plt+0x180b8>
   2a618:	cmn	r0, #2
   2a61c:	beq	2a6c0 <__assert_fail@plt+0x180cc>
   2a620:	cmp	r0, #0
   2a624:	beq	2a6dc <__assert_fail@plt+0x180e8>
   2a628:	ldr	r4, [fp, #-120]	; 0xffffff88
   2a62c:	sub	r0, fp, #144	; 0x90
   2a630:	strb	r6, [fp, #-124]	; 0xffffff84
   2a634:	bl	12060 <mbsinit@plt>
   2a638:	strb	r6, [fp, #-136]	; 0xffffff78
   2a63c:	cmp	r0, #0
   2a640:	strbne	r7, [fp, #-148]	; 0xffffff6c
   2a644:	cmp	r4, #0
   2a648:	beq	2a2f8 <__assert_fail@plt+0x17d04>
   2a64c:	b	2a4f8 <__assert_fail@plt+0x17f04>
   2a650:	ldr	r5, [fp, #-184]	; 0xffffff48
   2a654:	sub	r1, fp, #172	; 0xac
   2a658:	mov	r2, r5
   2a65c:	mov	r0, r6
   2a660:	bl	12024 <memcpy@plt>
   2a664:	str	r6, [r6, #-16]
   2a668:	b	2a44c <__assert_fail@plt+0x17e58>
   2a66c:	str	r6, [fp, #-128]	; 0xffffff80
   2a670:	ldrb	r3, [r4]
   2a674:	strb	r6, [fp, #-124]	; 0xffffff84
   2a678:	strb	r6, [fp, #-136]	; 0xffffff78
   2a67c:	str	r3, [fp, #-120]	; 0xffffff88
   2a680:	mov	r4, r3
   2a684:	b	2a644 <__assert_fail@plt+0x18050>
   2a688:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2a68c:	str	r6, [fp, #-72]	; 0xffffffb8
   2a690:	ldrb	r3, [r5]
   2a694:	cmp	r3, #0
   2a698:	bne	2a714 <__assert_fail@plt+0x18120>
   2a69c:	ldr	r4, [fp, #-64]	; 0xffffffc0
   2a6a0:	cmp	r4, #0
   2a6a4:	beq	2a1b4 <__assert_fail@plt+0x17bc0>
   2a6a8:	b	2a39c <__assert_fail@plt+0x17da8>
   2a6ac:	str	r6, [fp, #-128]	; 0xffffff80
   2a6b0:	strb	r7, [fp, #-124]	; 0xffffff84
   2a6b4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a6b8:	mov	r3, r6
   2a6bc:	b	2a500 <__assert_fail@plt+0x17f0c>
   2a6c0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a6c4:	mov	r0, r4
   2a6c8:	bl	12300 <strlen@plt>
   2a6cc:	strb	r7, [fp, #-124]	; 0xffffff84
   2a6d0:	str	r0, [fp, #-128]	; 0xffffff80
   2a6d4:	mov	r3, r0
   2a6d8:	b	2a500 <__assert_fail@plt+0x17f0c>
   2a6dc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   2a6e0:	str	r6, [fp, #-128]	; 0xffffff80
   2a6e4:	ldrb	r3, [r4]
   2a6e8:	cmp	r3, #0
   2a6ec:	bne	2a714 <__assert_fail@plt+0x18120>
   2a6f0:	ldr	r4, [fp, #-120]	; 0xffffff88
   2a6f4:	cmp	r4, #0
   2a6f8:	beq	2a62c <__assert_fail@plt+0x18038>
   2a6fc:	b	2a39c <__assert_fail@plt+0x17da8>
   2a700:	ldr	r3, [pc, #36]	; 2a72c <__assert_fail@plt+0x18138>
   2a704:	mov	r2, #143	; 0x8f
   2a708:	ldr	r1, [pc, #32]	; 2a730 <__assert_fail@plt+0x1813c>
   2a70c:	ldr	r0, [pc, #36]	; 2a738 <__assert_fail@plt+0x18144>
   2a710:	bl	125f4 <__assert_fail@plt>
   2a714:	ldr	r3, [pc, #16]	; 2a72c <__assert_fail@plt+0x18138>
   2a718:	mov	r2, #171	; 0xab
   2a71c:	ldr	r1, [pc, #12]	; 2a730 <__assert_fail@plt+0x1813c>
   2a720:	ldr	r0, [pc, #20]	; 2a73c <__assert_fail@plt+0x18148>
   2a724:	bl	125f4 <__assert_fail@plt>
   2a728:	andeq	r3, r5, ip, asr #27
   2a72c:			; <UNDEFINED> instruction: 0x000525b8
   2a730:	andeq	r2, r5, ip, asr #11
   2a734:	andeq	r2, r5, r8, lsl #12
   2a738:	ldrdeq	r2, [r5], -r8
   2a73c:	strdeq	r2, [r5], -r0
   2a740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a744:	sub	sp, sp, #300	; 0x12c
   2a748:	mov	fp, r1
   2a74c:	str	r0, [sp, #4]
   2a750:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2a754:	cmp	r0, #1
   2a758:	bls	2a918 <__assert_fail@plt+0x18324>
   2a75c:	ldrb	r2, [fp]
   2a760:	ldr	r9, [pc, #3016]	; 2b330 <__assert_fail@plt+0x18d3c>
   2a764:	mov	r1, #0
   2a768:	and	r0, r2, #31
   2a76c:	lsr	r3, r2, #5
   2a770:	str	fp, [sp, #32]
   2a774:	ldr	r3, [r9, r3, lsl #2]
   2a778:	str	r1, [sp, #24]
   2a77c:	strb	r1, [sp, #16]
   2a780:	lsr	r3, r3, r0
   2a784:	ands	r4, r3, #1
   2a788:	str	r1, [sp, #20]
   2a78c:	strb	r1, [sp, #28]
   2a790:	beq	2a87c <__assert_fail@plt+0x18288>
   2a794:	mov	r3, #1
   2a798:	mov	r4, r2
   2a79c:	str	r3, [sp, #36]	; 0x24
   2a7a0:	strb	r3, [sp, #40]	; 0x28
   2a7a4:	cmp	r4, #0
   2a7a8:	mov	r3, #1
   2a7ac:	str	r2, [sp, #44]	; 0x2c
   2a7b0:	strb	r3, [sp, #28]
   2a7b4:	beq	2a90c <__assert_fail@plt+0x18318>
   2a7b8:	ldr	r1, [sp, #4]
   2a7bc:	mov	r3, #0
   2a7c0:	mov	sl, #1
   2a7c4:	str	fp, [sp, #88]	; 0x58
   2a7c8:	str	fp, [sp, #12]
   2a7cc:	mov	r8, r3
   2a7d0:	mov	r7, r3
   2a7d4:	mov	r5, sl
   2a7d8:	mov	r4, r1
   2a7dc:	mov	fp, r3
   2a7e0:	str	r1, [sp, #144]	; 0x90
   2a7e4:	strb	r3, [sp, #72]	; 0x48
   2a7e8:	str	r3, [sp, #76]	; 0x4c
   2a7ec:	strb	r3, [sp, #84]	; 0x54
   2a7f0:	strb	r3, [sp, #128]	; 0x80
   2a7f4:	str	r3, [sp, #132]	; 0x84
   2a7f8:	strb	r3, [sp, #140]	; 0x8c
   2a7fc:	str	r3, [sp, #8]
   2a800:	str	r3, [sp, #80]	; 0x50
   2a804:	str	r3, [sp, #136]	; 0x88
   2a808:	ldrb	r3, [sp, #128]	; 0x80
   2a80c:	cmp	r3, #0
   2a810:	bne	2aa64 <__assert_fail@plt+0x18470>
   2a814:	ldrb	r3, [r4]
   2a818:	and	r2, r3, #31
   2a81c:	lsr	r3, r3, #5
   2a820:	ldr	r3, [r9, r3, lsl #2]
   2a824:	lsr	r3, r3, r2
   2a828:	tst	r3, #1
   2a82c:	beq	2aa50 <__assert_fail@plt+0x1845c>
   2a830:	str	r5, [sp, #148]	; 0x94
   2a834:	ldrb	r4, [r4]
   2a838:	strb	r5, [sp, #152]	; 0x98
   2a83c:	str	r4, [sp, #156]	; 0x9c
   2a840:	cmp	r4, #0
   2a844:	strb	r5, [sp, #140]	; 0x8c
   2a848:	beq	2aa3c <__assert_fail@plt+0x18448>
   2a84c:	cmp	fp, #9
   2a850:	movls	r2, #0
   2a854:	andhi	r2, sl, #1
   2a858:	cmp	r2, #0
   2a85c:	beq	2b280 <__assert_fail@plt+0x18c8c>
   2a860:	add	r3, fp, fp, lsl #2
   2a864:	cmp	r8, r3
   2a868:	bcs	2ab28 <__assert_fail@plt+0x18534>
   2a86c:	add	r3, r8, #1
   2a870:	mov	sl, r2
   2a874:	ldr	r8, [sp, #8]
   2a878:	b	2ac38 <__assert_fail@plt+0x18644>
   2a87c:	add	r0, sp, #20
   2a880:	bl	12060 <mbsinit@plt>
   2a884:	cmp	r0, #0
   2a888:	beq	2b2e0 <__assert_fail@plt+0x18cec>
   2a88c:	mov	r5, #1
   2a890:	strb	r5, [sp, #16]
   2a894:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2a898:	mov	r1, r0
   2a89c:	mov	r0, fp
   2a8a0:	bl	34c74 <__assert_fail@plt+0x22680>
   2a8a4:	add	r3, sp, #20
   2a8a8:	mov	r1, fp
   2a8ac:	mov	r2, r0
   2a8b0:	add	r0, sp, #44	; 0x2c
   2a8b4:	bl	3a03c <__assert_fail@plt+0x27a48>
   2a8b8:	cmn	r0, #1
   2a8bc:	str	r0, [sp, #36]	; 0x24
   2a8c0:	strbeq	r4, [sp, #40]	; 0x28
   2a8c4:	streq	r5, [sp, #36]	; 0x24
   2a8c8:	beq	2ad00 <__assert_fail@plt+0x1870c>
   2a8cc:	cmn	r0, #2
   2a8d0:	beq	2acf0 <__assert_fail@plt+0x186fc>
   2a8d4:	cmp	r0, #0
   2a8d8:	beq	2b220 <__assert_fail@plt+0x18c2c>
   2a8dc:	ldr	r4, [sp, #44]	; 0x2c
   2a8e0:	mov	r3, #1
   2a8e4:	add	r0, sp, #20
   2a8e8:	strb	r3, [sp, #40]	; 0x28
   2a8ec:	bl	12060 <mbsinit@plt>
   2a8f0:	cmp	r0, #0
   2a8f4:	movne	r3, #0
   2a8f8:	strbne	r3, [sp, #16]
   2a8fc:	mov	r3, #1
   2a900:	cmp	r4, #0
   2a904:	strb	r3, [sp, #28]
   2a908:	bne	2a7b8 <__assert_fail@plt+0x181c4>
   2a90c:	ldr	r0, [sp, #4]
   2a910:	add	sp, sp, #300	; 0x12c
   2a914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a918:	ldrb	r7, [fp]
   2a91c:	cmp	r7, #0
   2a920:	beq	2a90c <__assert_fail@plt+0x18318>
   2a924:	ldr	r5, [sp, #4]
   2a928:	add	r8, fp, #1
   2a92c:	ldrb	r3, [r5]
   2a930:	cmp	r3, #0
   2a934:	beq	2aa3c <__assert_fail@plt+0x18448>
   2a938:	mov	r6, #0
   2a93c:	mov	r4, r6
   2a940:	mov	r9, r6
   2a944:	mov	sl, fp
   2a948:	mov	lr, #1
   2a94c:	ldrb	r3, [r5]
   2a950:	mov	r0, r5
   2a954:	add	r6, r6, #1
   2a958:	cmp	r3, r7
   2a95c:	add	r5, r5, #1
   2a960:	beq	2a9e8 <__assert_fail@plt+0x183f4>
   2a964:	ldrb	r3, [r5]
   2a968:	cmp	r3, #0
   2a96c:	beq	2aa3c <__assert_fail@plt+0x18448>
   2a970:	add	r4, r4, #1
   2a974:	cmp	r6, #9
   2a978:	movls	r3, #0
   2a97c:	andhi	r3, lr, #1
   2a980:	cmp	r3, #0
   2a984:	beq	2a94c <__assert_fail@plt+0x18358>
   2a988:	add	r2, r6, r6, lsl #2
   2a98c:	cmp	r4, r2
   2a990:	bcc	2aa48 <__assert_fail@plt+0x18454>
   2a994:	cmp	sl, #0
   2a998:	str	r3, [sp, #4]
   2a99c:	beq	2a9bc <__assert_fail@plt+0x183c8>
   2a9a0:	mov	r0, sl
   2a9a4:	sub	r1, r4, r9
   2a9a8:	bl	12408 <strnlen@plt>
   2a9ac:	ldrb	r2, [sl, r0]!
   2a9b0:	cmp	r2, #0
   2a9b4:	bne	2acd8 <__assert_fail@plt+0x186e4>
   2a9b8:	mov	r9, r4
   2a9bc:	mov	r0, fp
   2a9c0:	bl	12300 <strlen@plt>
   2a9c4:	add	r3, sp, #240	; 0xf0
   2a9c8:	mov	r1, fp
   2a9cc:	mov	r2, r0
   2a9d0:	mov	r0, r5
   2a9d4:	bl	29d78 <__assert_fail@plt+0x17784>
   2a9d8:	subs	lr, r0, #0
   2a9dc:	bne	2b278 <__assert_fail@plt+0x18c84>
   2a9e0:	mov	sl, lr
   2a9e4:	b	2a94c <__assert_fail@plt+0x18358>
   2a9e8:	ldrb	r3, [fp, #1]
   2a9ec:	cmp	r3, #0
   2a9f0:	beq	2a910 <__assert_fail@plt+0x1831c>
   2a9f4:	ldrb	r2, [r5]
   2a9f8:	cmp	r2, #0
   2a9fc:	beq	2aa3c <__assert_fail@plt+0x18448>
   2aa00:	cmp	r2, r3
   2aa04:	add	r4, r4, #2
   2aa08:	bne	2a974 <__assert_fail@plt+0x18380>
   2aa0c:	mov	ip, r5
   2aa10:	mov	r1, r8
   2aa14:	b	2aa24 <__assert_fail@plt+0x18430>
   2aa18:	cmp	r3, r2
   2aa1c:	add	r4, r4, #1
   2aa20:	bne	2a974 <__assert_fail@plt+0x18380>
   2aa24:	ldrb	r3, [r1, #1]!
   2aa28:	cmp	r3, #0
   2aa2c:	beq	2a910 <__assert_fail@plt+0x1831c>
   2aa30:	ldrb	r2, [ip, #1]!
   2aa34:	cmp	r2, #0
   2aa38:	bne	2aa18 <__assert_fail@plt+0x18424>
   2aa3c:	mov	r0, #0
   2aa40:	add	sp, sp, #300	; 0x12c
   2aa44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa48:	mov	lr, r3
   2aa4c:	b	2a94c <__assert_fail@plt+0x18358>
   2aa50:	add	r0, sp, #132	; 0x84
   2aa54:	bl	12060 <mbsinit@plt>
   2aa58:	cmp	r0, #0
   2aa5c:	beq	2b2e0 <__assert_fail@plt+0x18cec>
   2aa60:	strb	r5, [sp, #128]	; 0x80
   2aa64:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2aa68:	mov	r1, r0
   2aa6c:	mov	r0, r4
   2aa70:	bl	34c74 <__assert_fail@plt+0x22680>
   2aa74:	add	r3, sp, #132	; 0x84
   2aa78:	mov	r1, r4
   2aa7c:	mov	r2, r0
   2aa80:	add	r0, sp, #156	; 0x9c
   2aa84:	bl	3a03c <__assert_fail@plt+0x27a48>
   2aa88:	cmn	r0, #1
   2aa8c:	str	r0, [sp, #148]	; 0x94
   2aa90:	strbeq	r7, [sp, #152]	; 0x98
   2aa94:	streq	r5, [sp, #148]	; 0x94
   2aa98:	beq	2aad8 <__assert_fail@plt+0x184e4>
   2aa9c:	cmn	r0, #2
   2aaa0:	beq	2aac8 <__assert_fail@plt+0x184d4>
   2aaa4:	cmp	r0, #0
   2aaa8:	beq	2b174 <__assert_fail@plt+0x18b80>
   2aaac:	ldr	r4, [sp, #156]	; 0x9c
   2aab0:	add	r0, sp, #132	; 0x84
   2aab4:	strb	r5, [sp, #152]	; 0x98
   2aab8:	bl	12060 <mbsinit@plt>
   2aabc:	cmp	r0, #0
   2aac0:	strbne	r7, [sp, #128]	; 0x80
   2aac4:	b	2a840 <__assert_fail@plt+0x1824c>
   2aac8:	ldr	r0, [sp, #144]	; 0x90
   2aacc:	bl	12300 <strlen@plt>
   2aad0:	strb	r7, [sp, #152]	; 0x98
   2aad4:	str	r0, [sp, #148]	; 0x94
   2aad8:	cmp	fp, #9
   2aadc:	movls	r3, #0
   2aae0:	andhi	r3, sl, #1
   2aae4:	cmp	r3, #0
   2aae8:	strb	r5, [sp, #140]	; 0x8c
   2aaec:	addeq	r8, r8, #1
   2aaf0:	bne	2ab1c <__assert_fail@plt+0x18528>
   2aaf4:	ldr	r4, [sp, #148]	; 0x94
   2aaf8:	ldr	r3, [sp, #36]	; 0x24
   2aafc:	ldr	r6, [sp, #144]	; 0x90
   2ab00:	cmp	r4, r3
   2ab04:	beq	2ad18 <__assert_fail@plt+0x18724>
   2ab08:	add	r4, r6, r4
   2ab0c:	str	r4, [sp, #144]	; 0x90
   2ab10:	strb	r7, [sp, #140]	; 0x8c
   2ab14:	add	fp, fp, #1
   2ab18:	b	2a808 <__assert_fail@plt+0x18214>
   2ab1c:	add	r2, fp, fp, lsl #2
   2ab20:	cmp	r8, r2
   2ab24:	bcc	2b2f4 <__assert_fail@plt+0x18d00>
   2ab28:	ldr	r3, [sp, #8]
   2ab2c:	subs	r6, r8, r3
   2ab30:	ldrb	r3, [sp, #84]	; 0x54
   2ab34:	beq	2b314 <__assert_fail@plt+0x18d20>
   2ab38:	cmp	r3, #0
   2ab3c:	beq	2ace8 <__assert_fail@plt+0x186f4>
   2ab40:	ldrb	r3, [sp, #96]	; 0x60
   2ab44:	cmp	r3, #0
   2ab48:	ldrne	r4, [sp, #100]	; 0x64
   2ab4c:	bne	2ac08 <__assert_fail@plt+0x18614>
   2ab50:	ldr	r4, [sp, #88]	; 0x58
   2ab54:	ldr	r3, [sp, #92]	; 0x5c
   2ab58:	add	r4, r4, r3
   2ab5c:	subs	r6, r6, #1
   2ab60:	strb	r7, [sp, #84]	; 0x54
   2ab64:	str	r4, [sp, #88]	; 0x58
   2ab68:	mov	sl, r4
   2ab6c:	beq	2ae50 <__assert_fail@plt+0x1885c>
   2ab70:	ldrb	r3, [sp, #72]	; 0x48
   2ab74:	cmp	r3, #0
   2ab78:	bne	2abac <__assert_fail@plt+0x185b8>
   2ab7c:	ldrb	r3, [r4]
   2ab80:	and	r2, r3, #31
   2ab84:	lsr	r3, r3, #5
   2ab88:	ldr	r3, [r9, r3, lsl #2]
   2ab8c:	lsr	r3, r3, r2
   2ab90:	tst	r3, #1
   2ab94:	bne	2ac68 <__assert_fail@plt+0x18674>
   2ab98:	add	r0, sp, #76	; 0x4c
   2ab9c:	bl	12060 <mbsinit@plt>
   2aba0:	cmp	r0, #0
   2aba4:	beq	2b2e0 <__assert_fail@plt+0x18cec>
   2aba8:	strb	r5, [sp, #72]	; 0x48
   2abac:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2abb0:	mov	r1, r0
   2abb4:	mov	r0, r4
   2abb8:	bl	34c74 <__assert_fail@plt+0x22680>
   2abbc:	add	r3, sp, #76	; 0x4c
   2abc0:	mov	r1, r4
   2abc4:	mov	r2, r0
   2abc8:	add	r0, sp, #100	; 0x64
   2abcc:	bl	3a03c <__assert_fail@plt+0x27a48>
   2abd0:	cmn	r0, #1
   2abd4:	str	r0, [sp, #92]	; 0x5c
   2abd8:	beq	2ac84 <__assert_fail@plt+0x18690>
   2abdc:	cmn	r0, #2
   2abe0:	beq	2ac98 <__assert_fail@plt+0x186a4>
   2abe4:	cmp	r0, #0
   2abe8:	beq	2acb4 <__assert_fail@plt+0x186c0>
   2abec:	ldr	r4, [sp, #100]	; 0x64
   2abf0:	add	r0, sp, #76	; 0x4c
   2abf4:	strb	r5, [sp, #96]	; 0x60
   2abf8:	bl	12060 <mbsinit@plt>
   2abfc:	strb	r5, [sp, #84]	; 0x54
   2ac00:	cmp	r0, #0
   2ac04:	strbne	r7, [sp, #72]	; 0x48
   2ac08:	cmp	r4, #0
   2ac0c:	bne	2ab50 <__assert_fail@plt+0x1855c>
   2ac10:	add	r2, sp, #240	; 0xf0
   2ac14:	ldr	r1, [sp, #12]
   2ac18:	ldr	r0, [sp, #4]
   2ac1c:	bl	29ee0 <__assert_fail@plt+0x178ec>
   2ac20:	subs	sl, r0, #0
   2ac24:	bne	2b278 <__assert_fail@plt+0x18c84>
   2ac28:	ldrb	r3, [sp, #152]	; 0x98
   2ac2c:	cmp	r3, #0
   2ac30:	add	r3, r8, #1
   2ac34:	beq	2ad0c <__assert_fail@plt+0x18718>
   2ac38:	ldrb	r2, [sp, #40]	; 0x28
   2ac3c:	cmp	r2, #0
   2ac40:	beq	2ad0c <__assert_fail@plt+0x18718>
   2ac44:	ldr	r1, [sp, #156]	; 0x9c
   2ac48:	ldr	r2, [sp, #44]	; 0x2c
   2ac4c:	str	r8, [sp, #8]
   2ac50:	cmp	r1, r2
   2ac54:	beq	2b218 <__assert_fail@plt+0x18c24>
   2ac58:	ldr	r6, [sp, #144]	; 0x90
   2ac5c:	mov	r8, r3
   2ac60:	ldr	r4, [sp, #148]	; 0x94
   2ac64:	b	2ab08 <__assert_fail@plt+0x18514>
   2ac68:	str	r5, [sp, #92]	; 0x5c
   2ac6c:	ldrb	r3, [r4]
   2ac70:	strb	r5, [sp, #96]	; 0x60
   2ac74:	strb	r5, [sp, #84]	; 0x54
   2ac78:	str	r3, [sp, #100]	; 0x64
   2ac7c:	mov	r4, r3
   2ac80:	b	2ac08 <__assert_fail@plt+0x18614>
   2ac84:	str	r5, [sp, #92]	; 0x5c
   2ac88:	strb	r7, [sp, #96]	; 0x60
   2ac8c:	ldr	r4, [sp, #88]	; 0x58
   2ac90:	mov	r3, r5
   2ac94:	b	2ab58 <__assert_fail@plt+0x18564>
   2ac98:	ldr	r4, [sp, #88]	; 0x58
   2ac9c:	mov	r0, r4
   2aca0:	bl	12300 <strlen@plt>
   2aca4:	strb	r7, [sp, #96]	; 0x60
   2aca8:	str	r0, [sp, #92]	; 0x5c
   2acac:	mov	r3, r0
   2acb0:	b	2ab58 <__assert_fail@plt+0x18564>
   2acb4:	ldr	r4, [sp, #88]	; 0x58
   2acb8:	str	r5, [sp, #92]	; 0x5c
   2acbc:	ldrb	r3, [r4]
   2acc0:	cmp	r3, #0
   2acc4:	bne	2b300 <__assert_fail@plt+0x18d0c>
   2acc8:	ldr	r4, [sp, #100]	; 0x64
   2accc:	cmp	r4, #0
   2acd0:	beq	2abf0 <__assert_fail@plt+0x185fc>
   2acd4:	b	2ae38 <__assert_fail@plt+0x18844>
   2acd8:	ldr	r3, [sp, #4]
   2acdc:	mov	r9, r4
   2ace0:	mov	lr, r3
   2ace4:	b	2a94c <__assert_fail@plt+0x18358>
   2ace8:	ldr	r4, [sp, #88]	; 0x58
   2acec:	b	2ab70 <__assert_fail@plt+0x1857c>
   2acf0:	ldr	r0, [sp, #32]
   2acf4:	bl	12300 <strlen@plt>
   2acf8:	strb	r4, [sp, #40]	; 0x28
   2acfc:	str	r0, [sp, #36]	; 0x24
   2ad00:	mov	r3, #1
   2ad04:	strb	r3, [sp, #28]
   2ad08:	b	2a7b8 <__assert_fail@plt+0x181c4>
   2ad0c:	str	r8, [sp, #8]
   2ad10:	mov	r8, r3
   2ad14:	b	2aaf4 <__assert_fail@plt+0x18500>
   2ad18:	mov	r2, r4
   2ad1c:	mov	r0, r6
   2ad20:	ldr	r1, [sp, #32]
   2ad24:	bl	12084 <memcmp@plt>
   2ad28:	cmp	r0, #0
   2ad2c:	bne	2ab08 <__assert_fail@plt+0x18514>
   2ad30:	add	lr, sp, #128	; 0x80
   2ad34:	add	ip, sp, #184	; 0xb8
   2ad38:	ldm	lr!, {r0, r1, r2, r3}
   2ad3c:	stmia	ip!, {r0, r1, r2, r3}
   2ad40:	ldm	lr!, {r0, r1, r2, r3}
   2ad44:	strb	r7, [sp, #196]	; 0xc4
   2ad48:	stmia	ip!, {r0, r1, r2, r3}
   2ad4c:	ldm	lr!, {r0, r1, r2, r3}
   2ad50:	ldr	r4, [sp, #200]	; 0xc8
   2ad54:	stmia	ip!, {r0, r1, r2, r3}
   2ad58:	ldm	lr, {r0, r1}
   2ad5c:	ldr	r3, [sp, #204]	; 0xcc
   2ad60:	add	r4, r4, r3
   2ad64:	stm	ip, {r0, r1}
   2ad68:	str	r4, [sp, #200]	; 0xc8
   2ad6c:	ldr	r3, [sp, #12]
   2ad70:	strb	r7, [sp, #240]	; 0xf0
   2ad74:	str	r3, [sp, #256]	; 0x100
   2ad78:	ldrb	r3, [r3]
   2ad7c:	str	r7, [sp, #244]	; 0xf4
   2ad80:	str	r7, [sp, #248]	; 0xf8
   2ad84:	and	r2, r3, #31
   2ad88:	lsr	r1, r3, #5
   2ad8c:	strb	r7, [sp, #252]	; 0xfc
   2ad90:	ldr	r6, [r9, r1, lsl #2]
   2ad94:	lsr	r6, r6, r2
   2ad98:	ands	r6, r6, #1
   2ad9c:	beq	2adc0 <__assert_fail@plt+0x187cc>
   2ada0:	mov	r4, r3
   2ada4:	str	r5, [sp, #260]	; 0x104
   2ada8:	str	r3, [sp, #268]	; 0x10c
   2adac:	strb	r5, [sp, #264]	; 0x108
   2adb0:	cmp	r4, #0
   2adb4:	strb	r5, [sp, #252]	; 0xfc
   2adb8:	bne	2aea4 <__assert_fail@plt+0x188b0>
   2adbc:	bl	125a0 <abort@plt>
   2adc0:	add	r0, sp, #244	; 0xf4
   2adc4:	bl	12060 <mbsinit@plt>
   2adc8:	cmp	r0, #0
   2adcc:	beq	2b2e0 <__assert_fail@plt+0x18cec>
   2add0:	strb	r5, [sp, #240]	; 0xf0
   2add4:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2add8:	ldr	r4, [sp, #12]
   2addc:	mov	r1, r0
   2ade0:	mov	r0, r4
   2ade4:	bl	34c74 <__assert_fail@plt+0x22680>
   2ade8:	add	r3, sp, #244	; 0xf4
   2adec:	mov	r1, r4
   2adf0:	mov	r2, r0
   2adf4:	add	r0, sp, #268	; 0x10c
   2adf8:	bl	3a03c <__assert_fail@plt+0x27a48>
   2adfc:	cmn	r0, #1
   2ae00:	str	r0, [sp, #260]	; 0x104
   2ae04:	beq	2b28c <__assert_fail@plt+0x18c98>
   2ae08:	cmn	r0, #2
   2ae0c:	beq	2b2a0 <__assert_fail@plt+0x18cac>
   2ae10:	cmp	r0, #0
   2ae14:	bne	2b244 <__assert_fail@plt+0x18c50>
   2ae18:	ldr	r4, [sp, #256]	; 0x100
   2ae1c:	str	r5, [sp, #260]	; 0x104
   2ae20:	ldrb	r3, [r4]
   2ae24:	cmp	r3, #0
   2ae28:	bne	2b300 <__assert_fail@plt+0x18d0c>
   2ae2c:	ldr	r4, [sp, #268]	; 0x10c
   2ae30:	cmp	r4, #0
   2ae34:	beq	2b248 <__assert_fail@plt+0x18c54>
   2ae38:	ldr	r3, [pc, #1268]	; 2b334 <__assert_fail@plt+0x18d40>
   2ae3c:	mov	r2, #172	; 0xac
   2ae40:	ldr	r1, [pc, #1264]	; 2b338 <__assert_fail@plt+0x18d44>
   2ae44:	ldr	r0, [pc, #1264]	; 2b33c <__assert_fail@plt+0x18d48>
   2ae48:	bl	125f4 <__assert_fail@plt>
   2ae4c:	ldr	sl, [sp, #88]	; 0x58
   2ae50:	ldrb	r3, [sp, #72]	; 0x48
   2ae54:	cmp	r3, #0
   2ae58:	bne	2b1ac <__assert_fail@plt+0x18bb8>
   2ae5c:	ldrb	r3, [sl]
   2ae60:	and	r2, r3, #31
   2ae64:	lsr	r3, r3, #5
   2ae68:	ldr	r3, [r9, r3, lsl #2]
   2ae6c:	lsr	r3, r3, r2
   2ae70:	tst	r3, #1
   2ae74:	beq	2b198 <__assert_fail@plt+0x18ba4>
   2ae78:	str	r5, [sp, #92]	; 0x5c
   2ae7c:	ldrb	r3, [sl]
   2ae80:	strb	r5, [sp, #96]	; 0x60
   2ae84:	strb	r5, [sp, #84]	; 0x54
   2ae88:	mov	r4, r3
   2ae8c:	str	r3, [sp, #100]	; 0x64
   2ae90:	cmp	r4, #0
   2ae94:	beq	2ac10 <__assert_fail@plt+0x1861c>
   2ae98:	ldrb	r3, [sp, #152]	; 0x98
   2ae9c:	mov	sl, r5
   2aea0:	b	2ac2c <__assert_fail@plt+0x18638>
   2aea4:	ldr	r4, [sp, #256]	; 0x100
   2aea8:	ldr	r3, [sp, #260]	; 0x104
   2aeac:	add	r4, r4, r3
   2aeb0:	ldrb	r3, [sp, #240]	; 0xf0
   2aeb4:	strb	r7, [sp, #252]	; 0xfc
   2aeb8:	add	r8, r8, #1
   2aebc:	cmp	r3, #0
   2aec0:	str	r4, [sp, #256]	; 0x100
   2aec4:	bne	2b064 <__assert_fail@plt+0x18a70>
   2aec8:	ldrb	r3, [r4]
   2aecc:	and	r2, r3, #31
   2aed0:	lsr	r3, r3, #5
   2aed4:	ldr	r3, [r9, r3, lsl #2]
   2aed8:	lsr	r3, r3, r2
   2aedc:	tst	r3, #1
   2aee0:	beq	2b0fc <__assert_fail@plt+0x18b08>
   2aee4:	str	r5, [sp, #260]	; 0x104
   2aee8:	ldrb	r4, [r4]
   2aeec:	strb	r5, [sp, #264]	; 0x108
   2aef0:	str	r4, [sp, #268]	; 0x10c
   2aef4:	cmp	r4, #0
   2aef8:	strb	r5, [sp, #252]	; 0xfc
   2aefc:	bne	2af20 <__assert_fail@plt+0x1892c>
   2af00:	ldr	r0, [sp, #144]	; 0x90
   2af04:	add	sp, sp, #300	; 0x12c
   2af08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2af0c:	ldr	r0, [sp, #256]	; 0x100
   2af10:	bl	12300 <strlen@plt>
   2af14:	strb	r7, [sp, #264]	; 0x108
   2af18:	str	r0, [sp, #260]	; 0x104
   2af1c:	strb	r5, [sp, #252]	; 0xfc
   2af20:	ldrb	r3, [sp, #196]	; 0xc4
   2af24:	cmp	r3, #0
   2af28:	beq	2af58 <__assert_fail@plt+0x18964>
   2af2c:	ldrb	r3, [sp, #208]	; 0xd0
   2af30:	cmp	r3, #0
   2af34:	ldrne	r4, [sp, #212]	; 0xd4
   2af38:	bne	2b000 <__assert_fail@plt+0x18a0c>
   2af3c:	ldr	r2, [sp, #204]	; 0xcc
   2af40:	ldr	r3, [sp, #260]	; 0x104
   2af44:	cmp	r2, r3
   2af48:	beq	2b0e4 <__assert_fail@plt+0x18af0>
   2af4c:	ldr	r6, [sp, #144]	; 0x90
   2af50:	ldr	r4, [sp, #148]	; 0x94
   2af54:	b	2ab08 <__assert_fail@plt+0x18514>
   2af58:	ldrb	r3, [sp, #184]	; 0xb8
   2af5c:	ldr	r4, [sp, #200]	; 0xc8
   2af60:	cmp	r3, #0
   2af64:	bne	2af98 <__assert_fail@plt+0x189a4>
   2af68:	ldrb	r3, [r4]
   2af6c:	and	r2, r3, #31
   2af70:	lsr	r3, r3, #5
   2af74:	ldr	r3, [r9, r3, lsl #2]
   2af78:	lsr	r3, r3, r2
   2af7c:	tst	r3, #1
   2af80:	bne	2b0c8 <__assert_fail@plt+0x18ad4>
   2af84:	add	r0, sp, #188	; 0xbc
   2af88:	bl	12060 <mbsinit@plt>
   2af8c:	cmp	r0, #0
   2af90:	beq	2b2e0 <__assert_fail@plt+0x18cec>
   2af94:	strb	r5, [sp, #184]	; 0xb8
   2af98:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2af9c:	mov	r1, r0
   2afa0:	mov	r0, r4
   2afa4:	bl	34c74 <__assert_fail@plt+0x22680>
   2afa8:	add	r3, sp, #188	; 0xbc
   2afac:	mov	r1, r4
   2afb0:	mov	r2, r0
   2afb4:	add	r0, sp, #212	; 0xd4
   2afb8:	bl	3a03c <__assert_fail@plt+0x27a48>
   2afbc:	cmn	r0, #1
   2afc0:	str	r0, [sp, #204]	; 0xcc
   2afc4:	strbeq	r7, [sp, #208]	; 0xd0
   2afc8:	streq	r5, [sp, #204]	; 0xcc
   2afcc:	strbeq	r5, [sp, #196]	; 0xc4
   2afd0:	beq	2af3c <__assert_fail@plt+0x18948>
   2afd4:	cmn	r0, #2
   2afd8:	beq	2b114 <__assert_fail@plt+0x18b20>
   2afdc:	cmp	r0, #0
   2afe0:	beq	2b150 <__assert_fail@plt+0x18b5c>
   2afe4:	ldr	r4, [sp, #212]	; 0xd4
   2afe8:	add	r0, sp, #188	; 0xbc
   2afec:	strb	r5, [sp, #208]	; 0xd0
   2aff0:	bl	12060 <mbsinit@plt>
   2aff4:	strb	r5, [sp, #196]	; 0xc4
   2aff8:	cmp	r0, #0
   2affc:	strbne	r7, [sp, #184]	; 0xb8
   2b000:	cmp	r4, #0
   2b004:	beq	2aa3c <__assert_fail@plt+0x18448>
   2b008:	ldrb	r3, [sp, #264]	; 0x108
   2b00c:	cmp	r3, #0
   2b010:	beq	2af3c <__assert_fail@plt+0x18948>
   2b014:	ldr	r0, [sp, #268]	; 0x10c
   2b018:	subs	r0, r0, r4
   2b01c:	movne	r0, #1
   2b020:	cmp	r0, #0
   2b024:	add	r1, r8, #1
   2b028:	bne	2af4c <__assert_fail@plt+0x18958>
   2b02c:	ldr	r3, [sp, #200]	; 0xc8
   2b030:	ldr	r2, [sp, #204]	; 0xcc
   2b034:	ldr	r4, [sp, #256]	; 0x100
   2b038:	add	r3, r3, r2
   2b03c:	str	r3, [sp, #200]	; 0xc8
   2b040:	ldrb	r3, [sp, #240]	; 0xf0
   2b044:	ldr	r2, [sp, #260]	; 0x104
   2b048:	strb	r0, [sp, #196]	; 0xc4
   2b04c:	add	r4, r4, r2
   2b050:	cmp	r3, #0
   2b054:	strb	r0, [sp, #252]	; 0xfc
   2b058:	mov	r8, r1
   2b05c:	str	r4, [sp, #256]	; 0x100
   2b060:	beq	2aec8 <__assert_fail@plt+0x188d4>
   2b064:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2b068:	mov	r1, r0
   2b06c:	mov	r0, r4
   2b070:	bl	34c74 <__assert_fail@plt+0x22680>
   2b074:	add	r3, sp, #244	; 0xf4
   2b078:	mov	r1, r4
   2b07c:	mov	r2, r0
   2b080:	add	r0, sp, #268	; 0x10c
   2b084:	bl	3a03c <__assert_fail@plt+0x27a48>
   2b088:	cmn	r0, #1
   2b08c:	str	r0, [sp, #260]	; 0x104
   2b090:	strbeq	r7, [sp, #264]	; 0x108
   2b094:	streq	r5, [sp, #260]	; 0x104
   2b098:	beq	2af1c <__assert_fail@plt+0x18928>
   2b09c:	cmn	r0, #2
   2b0a0:	beq	2af0c <__assert_fail@plt+0x18918>
   2b0a4:	cmp	r0, #0
   2b0a8:	beq	2b12c <__assert_fail@plt+0x18b38>
   2b0ac:	ldr	r4, [sp, #268]	; 0x10c
   2b0b0:	add	r0, sp, #244	; 0xf4
   2b0b4:	strb	r5, [sp, #264]	; 0x108
   2b0b8:	bl	12060 <mbsinit@plt>
   2b0bc:	cmp	r0, #0
   2b0c0:	strbne	r7, [sp, #240]	; 0xf0
   2b0c4:	b	2aef4 <__assert_fail@plt+0x18900>
   2b0c8:	str	r5, [sp, #204]	; 0xcc
   2b0cc:	ldrb	r0, [r4]
   2b0d0:	strb	r5, [sp, #208]	; 0xd0
   2b0d4:	strb	r5, [sp, #196]	; 0xc4
   2b0d8:	str	r0, [sp, #212]	; 0xd4
   2b0dc:	mov	r4, r0
   2b0e0:	b	2b000 <__assert_fail@plt+0x18a0c>
   2b0e4:	ldr	r1, [sp, #256]	; 0x100
   2b0e8:	ldr	r0, [sp, #200]	; 0xc8
   2b0ec:	bl	12084 <memcmp@plt>
   2b0f0:	adds	r0, r0, #0
   2b0f4:	movne	r0, #1
   2b0f8:	b	2b020 <__assert_fail@plt+0x18a2c>
   2b0fc:	add	r0, sp, #244	; 0xf4
   2b100:	bl	12060 <mbsinit@plt>
   2b104:	cmp	r0, #0
   2b108:	beq	2b2e0 <__assert_fail@plt+0x18cec>
   2b10c:	strb	r5, [sp, #240]	; 0xf0
   2b110:	b	2b064 <__assert_fail@plt+0x18a70>
   2b114:	ldr	r0, [sp, #200]	; 0xc8
   2b118:	bl	12300 <strlen@plt>
   2b11c:	strb	r7, [sp, #208]	; 0xd0
   2b120:	strb	r5, [sp, #196]	; 0xc4
   2b124:	str	r0, [sp, #204]	; 0xcc
   2b128:	b	2af3c <__assert_fail@plt+0x18948>
   2b12c:	ldr	r3, [sp, #256]	; 0x100
   2b130:	str	r5, [sp, #260]	; 0x104
   2b134:	ldrb	r3, [r3]
   2b138:	cmp	r3, #0
   2b13c:	bne	2b300 <__assert_fail@plt+0x18d0c>
   2b140:	ldr	r4, [sp, #268]	; 0x10c
   2b144:	cmp	r4, #0
   2b148:	beq	2b0b0 <__assert_fail@plt+0x18abc>
   2b14c:	b	2ae38 <__assert_fail@plt+0x18844>
   2b150:	ldr	r3, [sp, #200]	; 0xc8
   2b154:	str	r5, [sp, #204]	; 0xcc
   2b158:	ldrb	r3, [r3]
   2b15c:	cmp	r3, #0
   2b160:	bne	2b300 <__assert_fail@plt+0x18d0c>
   2b164:	ldr	r4, [sp, #212]	; 0xd4
   2b168:	cmp	r4, #0
   2b16c:	beq	2afe8 <__assert_fail@plt+0x189f4>
   2b170:	b	2ae38 <__assert_fail@plt+0x18844>
   2b174:	ldr	r6, [sp, #144]	; 0x90
   2b178:	str	r5, [sp, #148]	; 0x94
   2b17c:	ldrb	r3, [r6]
   2b180:	cmp	r3, #0
   2b184:	bne	2b300 <__assert_fail@plt+0x18d0c>
   2b188:	ldr	r4, [sp, #156]	; 0x9c
   2b18c:	cmp	r4, #0
   2b190:	beq	2aab0 <__assert_fail@plt+0x184bc>
   2b194:	b	2ae38 <__assert_fail@plt+0x18844>
   2b198:	add	r0, sp, #76	; 0x4c
   2b19c:	bl	12060 <mbsinit@plt>
   2b1a0:	cmp	r0, #0
   2b1a4:	beq	2b2e0 <__assert_fail@plt+0x18cec>
   2b1a8:	strb	r5, [sp, #72]	; 0x48
   2b1ac:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2b1b0:	mov	r1, r0
   2b1b4:	mov	r0, sl
   2b1b8:	bl	34c74 <__assert_fail@plt+0x22680>
   2b1bc:	add	r3, sp, #76	; 0x4c
   2b1c0:	mov	r1, sl
   2b1c4:	mov	r2, r0
   2b1c8:	add	r0, sp, #100	; 0x64
   2b1cc:	bl	3a03c <__assert_fail@plt+0x27a48>
   2b1d0:	cmn	r0, #1
   2b1d4:	str	r0, [sp, #92]	; 0x5c
   2b1d8:	strbeq	r7, [sp, #96]	; 0x60
   2b1dc:	streq	r5, [sp, #92]	; 0x5c
   2b1e0:	strbeq	r5, [sp, #84]	; 0x54
   2b1e4:	beq	2ae98 <__assert_fail@plt+0x188a4>
   2b1e8:	cmn	r0, #2
   2b1ec:	beq	2b260 <__assert_fail@plt+0x18c6c>
   2b1f0:	cmp	r0, #0
   2b1f4:	beq	2b2bc <__assert_fail@plt+0x18cc8>
   2b1f8:	ldr	r4, [sp, #100]	; 0x64
   2b1fc:	add	r0, sp, #76	; 0x4c
   2b200:	strb	r5, [sp, #96]	; 0x60
   2b204:	bl	12060 <mbsinit@plt>
   2b208:	strb	r5, [sp, #84]	; 0x54
   2b20c:	cmp	r0, #0
   2b210:	strbne	r7, [sp, #72]	; 0x48
   2b214:	b	2ae90 <__assert_fail@plt+0x1889c>
   2b218:	mov	r8, r3
   2b21c:	b	2ad30 <__assert_fail@plt+0x1873c>
   2b220:	ldr	r3, [sp, #32]
   2b224:	str	r5, [sp, #36]	; 0x24
   2b228:	ldrb	r3, [r3]
   2b22c:	cmp	r3, #0
   2b230:	bne	2b300 <__assert_fail@plt+0x18d0c>
   2b234:	ldr	r4, [sp, #44]	; 0x2c
   2b238:	cmp	r4, #0
   2b23c:	beq	2a8e0 <__assert_fail@plt+0x182ec>
   2b240:	b	2ae38 <__assert_fail@plt+0x18844>
   2b244:	ldr	r4, [sp, #268]	; 0x10c
   2b248:	add	r0, sp, #244	; 0xf4
   2b24c:	strb	r5, [sp, #264]	; 0x108
   2b250:	bl	12060 <mbsinit@plt>
   2b254:	cmp	r0, #0
   2b258:	strbne	r7, [sp, #240]	; 0xf0
   2b25c:	b	2adb0 <__assert_fail@plt+0x187bc>
   2b260:	ldr	r0, [sp, #88]	; 0x58
   2b264:	bl	12300 <strlen@plt>
   2b268:	strb	r7, [sp, #96]	; 0x60
   2b26c:	strb	r5, [sp, #84]	; 0x54
   2b270:	str	r0, [sp, #92]	; 0x5c
   2b274:	b	2ae98 <__assert_fail@plt+0x188a4>
   2b278:	ldr	r0, [sp, #240]	; 0xf0
   2b27c:	b	2a910 <__assert_fail@plt+0x1831c>
   2b280:	add	r3, r8, #1
   2b284:	ldr	r8, [sp, #8]
   2b288:	b	2ac38 <__assert_fail@plt+0x18644>
   2b28c:	str	r5, [sp, #260]	; 0x104
   2b290:	strb	r6, [sp, #264]	; 0x108
   2b294:	ldr	r4, [sp, #256]	; 0x100
   2b298:	mov	r3, r5
   2b29c:	b	2aeac <__assert_fail@plt+0x188b8>
   2b2a0:	ldr	r4, [sp, #256]	; 0x100
   2b2a4:	mov	r0, r4
   2b2a8:	bl	12300 <strlen@plt>
   2b2ac:	strb	r6, [sp, #264]	; 0x108
   2b2b0:	str	r0, [sp, #260]	; 0x104
   2b2b4:	mov	r3, r0
   2b2b8:	b	2aeac <__assert_fail@plt+0x188b8>
   2b2bc:	ldr	r4, [sp, #88]	; 0x58
   2b2c0:	str	r5, [sp, #92]	; 0x5c
   2b2c4:	ldrb	r3, [r4]
   2b2c8:	cmp	r3, #0
   2b2cc:	bne	2b300 <__assert_fail@plt+0x18d0c>
   2b2d0:	ldr	r4, [sp, #100]	; 0x64
   2b2d4:	cmp	r4, #0
   2b2d8:	beq	2b1fc <__assert_fail@plt+0x18c08>
   2b2dc:	b	2ae38 <__assert_fail@plt+0x18844>
   2b2e0:	ldr	r3, [pc, #76]	; 2b334 <__assert_fail@plt+0x18d40>
   2b2e4:	mov	r2, #143	; 0x8f
   2b2e8:	ldr	r1, [pc, #72]	; 2b338 <__assert_fail@plt+0x18d44>
   2b2ec:	ldr	r0, [pc, #76]	; 2b340 <__assert_fail@plt+0x18d4c>
   2b2f0:	bl	125f4 <__assert_fail@plt>
   2b2f4:	add	r8, r8, #1
   2b2f8:	mov	sl, r3
   2b2fc:	b	2aaf4 <__assert_fail@plt+0x18500>
   2b300:	ldr	r3, [pc, #44]	; 2b334 <__assert_fail@plt+0x18d40>
   2b304:	mov	r2, #171	; 0xab
   2b308:	ldr	r1, [pc, #40]	; 2b338 <__assert_fail@plt+0x18d44>
   2b30c:	ldr	r0, [pc, #48]	; 2b344 <__assert_fail@plt+0x18d50>
   2b310:	bl	125f4 <__assert_fail@plt>
   2b314:	cmp	r3, #0
   2b318:	beq	2ae4c <__assert_fail@plt+0x18858>
   2b31c:	ldrb	r3, [sp, #96]	; 0x60
   2b320:	cmp	r3, #0
   2b324:	ldrne	r4, [sp, #100]	; 0x64
   2b328:	beq	2ae98 <__assert_fail@plt+0x188a4>
   2b32c:	b	2ae90 <__assert_fail@plt+0x1889c>
   2b330:	andeq	r3, r5, ip, asr #27
   2b334:			; <UNDEFINED> instruction: 0x000525b8
   2b338:	andeq	r2, r5, ip, asr #11
   2b33c:	andeq	r2, r5, r8, lsl #12
   2b340:	ldrdeq	r2, [r5], -r8
   2b344:	strdeq	r2, [r5], -r0
   2b348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b34c:	sub	sp, sp, #20
   2b350:	mov	r5, r0
   2b354:	add	r7, r0, r1
   2b358:	mov	sl, r2
   2b35c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2b360:	cmp	r0, #1
   2b364:	bls	2b508 <__assert_fail@plt+0x18f14>
   2b368:	cmp	r5, r7
   2b36c:	mov	r6, #0
   2b370:	bcs	2b46c <__assert_fail@plt+0x18e78>
   2b374:	and	fp, sl, #2
   2b378:	mov	r9, r6
   2b37c:	and	sl, sl, #1
   2b380:	mvn	r8, #-2147483648	; 0x80000000
   2b384:	b	2b3ac <__assert_fail@plt+0x18db8>
   2b388:	cmp	r3, #37	; 0x25
   2b38c:	bcs	2b39c <__assert_fail@plt+0x18da8>
   2b390:	sub	r3, r3, #32
   2b394:	cmp	r3, #3
   2b398:	bhi	2b3d4 <__assert_fail@plt+0x18de0>
   2b39c:	add	r5, r5, #1
   2b3a0:	add	r6, r6, #1
   2b3a4:	cmp	r7, r5
   2b3a8:	bls	2b46c <__assert_fail@plt+0x18e78>
   2b3ac:	ldrb	r3, [r5]
   2b3b0:	cmp	r3, #63	; 0x3f
   2b3b4:	bls	2b388 <__assert_fail@plt+0x18d94>
   2b3b8:	cmp	r3, #65	; 0x41
   2b3bc:	bcc	2b3d4 <__assert_fail@plt+0x18de0>
   2b3c0:	cmp	r3, #95	; 0x5f
   2b3c4:	bls	2b39c <__assert_fail@plt+0x18da8>
   2b3c8:	sub	r3, r3, #97	; 0x61
   2b3cc:	cmp	r3, #29
   2b3d0:	bls	2b39c <__assert_fail@plt+0x18da8>
   2b3d4:	cmp	fp, #0
   2b3d8:	str	r9, [sp, #8]
   2b3dc:	str	r9, [sp, #12]
   2b3e0:	beq	2b408 <__assert_fail@plt+0x18e14>
   2b3e4:	b	2b4b4 <__assert_fail@plt+0x18ec0>
   2b3e8:	cmp	r0, r3
   2b3ec:	bgt	2b468 <__assert_fail@plt+0x18e74>
   2b3f0:	add	r6, r6, r0
   2b3f4:	add	r0, sp, #8
   2b3f8:	bl	12060 <mbsinit@plt>
   2b3fc:	add	r5, r5, r4
   2b400:	cmp	r0, #0
   2b404:	bne	2b3a4 <__assert_fail@plt+0x18db0>
   2b408:	add	r3, sp, #8
   2b40c:	sub	r2, r7, r5
   2b410:	mov	r1, r5
   2b414:	add	r0, sp, #4
   2b418:	bl	3a03c <__assert_fail@plt+0x27a48>
   2b41c:	cmn	r0, #1
   2b420:	mov	r4, r0
   2b424:	beq	2b4f0 <__assert_fail@plt+0x18efc>
   2b428:	cmn	r0, #2
   2b42c:	beq	2b4dc <__assert_fail@plt+0x18ee8>
   2b430:	ldr	r0, [sp, #4]
   2b434:	bl	11fa0 <wcwidth@plt>
   2b438:	cmp	r4, #0
   2b43c:	moveq	r4, #1
   2b440:	sub	r3, r8, r6
   2b444:	cmp	r0, #0
   2b448:	bge	2b3e8 <__assert_fail@plt+0x18df4>
   2b44c:	ldr	r0, [sp, #4]
   2b450:	bl	12114 <iswcntrl@plt>
   2b454:	cmp	r0, #0
   2b458:	bne	2b3f4 <__assert_fail@plt+0x18e00>
   2b45c:	cmn	r6, #-2147483647	; 0x80000001
   2b460:	add	r6, r6, #1
   2b464:	bne	2b3f4 <__assert_fail@plt+0x18e00>
   2b468:	mvn	r6, #-2147483648	; 0x80000000
   2b46c:	mov	r0, r6
   2b470:	add	sp, sp, #20
   2b474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b478:	ldr	r0, [sp, #4]
   2b47c:	bl	11fa0 <wcwidth@plt>
   2b480:	cmp	r4, #0
   2b484:	moveq	r4, #1
   2b488:	sub	r2, r8, r6
   2b48c:	add	r5, r5, r4
   2b490:	subs	r3, r0, #0
   2b494:	add	r6, r6, r3
   2b498:	add	r0, sp, #8
   2b49c:	blt	2b4f8 <__assert_fail@plt+0x18f04>
   2b4a0:	cmp	r3, r2
   2b4a4:	bgt	2b468 <__assert_fail@plt+0x18e74>
   2b4a8:	bl	12060 <mbsinit@plt>
   2b4ac:	cmp	r0, #0
   2b4b0:	bne	2b3a4 <__assert_fail@plt+0x18db0>
   2b4b4:	add	r3, sp, #8
   2b4b8:	sub	r2, r7, r5
   2b4bc:	mov	r1, r5
   2b4c0:	add	r0, sp, #4
   2b4c4:	bl	3a03c <__assert_fail@plt+0x27a48>
   2b4c8:	cmn	r0, #1
   2b4cc:	mov	r4, r0
   2b4d0:	beq	2b4f0 <__assert_fail@plt+0x18efc>
   2b4d4:	cmn	r0, #2
   2b4d8:	bne	2b478 <__assert_fail@plt+0x18e84>
   2b4dc:	cmp	sl, #0
   2b4e0:	bne	2b4f8 <__assert_fail@plt+0x18f04>
   2b4e4:	add	r6, r6, #1
   2b4e8:	mov	r5, r7
   2b4ec:	b	2b3a4 <__assert_fail@plt+0x18db0>
   2b4f0:	cmp	sl, #0
   2b4f4:	beq	2b39c <__assert_fail@plt+0x18da8>
   2b4f8:	mvn	r6, #0
   2b4fc:	mov	r0, r6
   2b500:	add	sp, sp, #20
   2b504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b508:	cmp	r5, r7
   2b50c:	movcs	r6, #0
   2b510:	bcs	2b46c <__assert_fail@plt+0x18e78>
   2b514:	bl	122b8 <__ctype_b_loc@plt>
   2b518:	ands	r6, sl, #2
   2b51c:	ldr	r2, [r0]
   2b520:	bne	2b560 <__assert_fail@plt+0x18f6c>
   2b524:	ldrb	r3, [r5], #1
   2b528:	lsl	r3, r3, #1
   2b52c:	ldrh	r3, [r2, r3]
   2b530:	tst	r3, #16384	; 0x4000
   2b534:	bne	2b540 <__assert_fail@plt+0x18f4c>
   2b538:	tst	r3, #2
   2b53c:	bne	2b54c <__assert_fail@plt+0x18f58>
   2b540:	cmn	r6, #-2147483647	; 0x80000001
   2b544:	beq	2b46c <__assert_fail@plt+0x18e78>
   2b548:	add	r6, r6, #1
   2b54c:	cmp	r7, r5
   2b550:	bne	2b524 <__assert_fail@plt+0x18f30>
   2b554:	mov	r0, r6
   2b558:	add	sp, sp, #20
   2b55c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b560:	mov	r6, #0
   2b564:	b	2b57c <__assert_fail@plt+0x18f88>
   2b568:	cmn	r6, #-2147483647	; 0x80000001
   2b56c:	beq	2b46c <__assert_fail@plt+0x18e78>
   2b570:	cmp	r7, r5
   2b574:	add	r6, r6, #1
   2b578:	beq	2b46c <__assert_fail@plt+0x18e78>
   2b57c:	ldrb	r3, [r5], #1
   2b580:	lsl	r3, r3, #1
   2b584:	ldrh	r3, [r2, r3]
   2b588:	tst	r3, #16384	; 0x4000
   2b58c:	beq	2b4f8 <__assert_fail@plt+0x18f04>
   2b590:	b	2b568 <__assert_fail@plt+0x18f74>
   2b594:	push	{r4, r5, r6, lr}
   2b598:	mov	r5, r1
   2b59c:	mov	r4, r0
   2b5a0:	bl	12300 <strlen@plt>
   2b5a4:	mov	r2, r5
   2b5a8:	mov	r1, r0
   2b5ac:	mov	r0, r4
   2b5b0:	pop	{r4, r5, r6, lr}
   2b5b4:	b	2b348 <__assert_fail@plt+0x18d54>
   2b5b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b5bc:	mov	r4, r0
   2b5c0:	ldrb	r3, [r0]
   2b5c4:	sub	r2, r3, #48	; 0x30
   2b5c8:	cmp	r2, #7
   2b5cc:	bls	2b664 <__assert_fail@plt+0x19070>
   2b5d0:	cmp	r3, #0
   2b5d4:	moveq	r0, #1
   2b5d8:	beq	2b608 <__assert_fail@plt+0x19014>
   2b5dc:	mov	r1, r4
   2b5e0:	mov	r0, #1
   2b5e4:	and	r2, r3, #239	; 0xef
   2b5e8:	cmp	r3, #43	; 0x2b
   2b5ec:	cmpne	r2, #45	; 0x2d
   2b5f0:	ldrb	r3, [r1, #1]!
   2b5f4:	moveq	r2, #1
   2b5f8:	movne	r2, #0
   2b5fc:	cmp	r3, #0
   2b600:	add	r0, r0, r2
   2b604:	bne	2b5e4 <__assert_fail@plt+0x18ff0>
   2b608:	mov	r1, #16
   2b60c:	ldr	r6, [pc, #816]	; 2b944 <__assert_fail@plt+0x19350>
   2b610:	bl	35720 <__assert_fail@plt+0x2312c>
   2b614:	mov	r9, #3
   2b618:	mov	r2, #0
   2b61c:	mov	sl, #1
   2b620:	mov	fp, #2
   2b624:	mov	lr, #0
   2b628:	ldrb	ip, [r4]
   2b62c:	mov	r3, r4
   2b630:	add	r4, r4, #1
   2b634:	cmp	ip, #97	; 0x61
   2b638:	beq	2b8ac <__assert_fail@plt+0x192b8>
   2b63c:	bls	2b6ac <__assert_fail@plt+0x190b8>
   2b640:	cmp	ip, #111	; 0x6f
   2b644:	beq	2b8b4 <__assert_fail@plt+0x192c0>
   2b648:	cmp	ip, #117	; 0x75
   2b64c:	beq	2b6a4 <__assert_fail@plt+0x190b0>
   2b650:	cmp	ip, #103	; 0x67
   2b654:	beq	2b8c0 <__assert_fail@plt+0x192cc>
   2b658:	bl	376d0 <__assert_fail@plt+0x250dc>
   2b65c:	mov	r0, #0
   2b660:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b664:	ldr	r0, [pc, #728]	; 2b944 <__assert_fail@plt+0x19350>
   2b668:	mov	r3, r4
   2b66c:	mov	r5, #0
   2b670:	b	2b684 <__assert_fail@plt+0x19090>
   2b674:	ldrb	r2, [r3]
   2b678:	sub	r1, r2, #48	; 0x30
   2b67c:	cmp	r1, #7
   2b680:	bhi	2b8cc <__assert_fail@plt+0x192d8>
   2b684:	ldrb	r2, [r3], #1
   2b688:	lsl	r5, r5, #3
   2b68c:	sub	r5, r5, #48	; 0x30
   2b690:	add	r5, r2, r5
   2b694:	cmp	r5, r0
   2b698:	bls	2b674 <__assert_fail@plt+0x19080>
   2b69c:	mov	r0, #0
   2b6a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6a4:	orr	lr, lr, #2496	; 0x9c0
   2b6a8:	b	2b628 <__assert_fail@plt+0x19034>
   2b6ac:	cmp	ip, #45	; 0x2d
   2b6b0:	beq	2b6c4 <__assert_fail@plt+0x190d0>
   2b6b4:	cmp	ip, #61	; 0x3d
   2b6b8:	beq	2b6c4 <__assert_fail@plt+0x190d0>
   2b6bc:	cmp	ip, #43	; 0x2b
   2b6c0:	bne	2b658 <__assert_fail@plt+0x19064>
   2b6c4:	add	r7, r2, #1
   2b6c8:	add	r2, r0, r2, lsl #4
   2b6cc:	b	2b72c <__assert_fail@plt+0x19138>
   2b6d0:	cmp	r4, #111	; 0x6f
   2b6d4:	beq	2b898 <__assert_fail@plt+0x192a4>
   2b6d8:	cmp	r4, #117	; 0x75
   2b6dc:	bne	2b7c4 <__assert_fail@plt+0x191d0>
   2b6e0:	ldrb	r4, [r3, #2]
   2b6e4:	mov	r8, r9
   2b6e8:	add	r3, r3, #2
   2b6ec:	mov	r1, #448	; 0x1c0
   2b6f0:	cmp	lr, #0
   2b6f4:	strb	ip, [r2]
   2b6f8:	str	r1, [r2, #8]
   2b6fc:	mov	ip, r4
   2b700:	andne	r1, r1, lr
   2b704:	strb	r8, [r2, #1]
   2b708:	str	lr, [r2, #4]
   2b70c:	and	r4, ip, #239	; 0xef
   2b710:	cmp	ip, #43	; 0x2b
   2b714:	cmpne	r4, #45	; 0x2d
   2b718:	str	r1, [r2, #12]
   2b71c:	add	r1, r7, #1
   2b720:	add	r2, r2, #16
   2b724:	bne	2b920 <__assert_fail@plt+0x1932c>
   2b728:	mov	r7, r1
   2b72c:	ldrb	r4, [r3, #1]
   2b730:	add	r1, r3, #1
   2b734:	cmp	r4, #103	; 0x67
   2b738:	beq	2b7b0 <__assert_fail@plt+0x191bc>
   2b73c:	bhi	2b6d0 <__assert_fail@plt+0x190dc>
   2b740:	sub	r3, r4, #48	; 0x30
   2b744:	cmp	r3, #7
   2b748:	movls	r3, #0
   2b74c:	bhi	2b7c4 <__assert_fail@plt+0x191d0>
   2b750:	ldrb	r4, [r1], #1
   2b754:	lsl	r3, r3, #3
   2b758:	sub	r3, r3, #48	; 0x30
   2b75c:	add	r3, r4, r3
   2b760:	cmp	r3, r6
   2b764:	bhi	2b658 <__assert_fail@plt+0x19064>
   2b768:	ldrb	r4, [r1]
   2b76c:	sub	r5, r4, #48	; 0x30
   2b770:	cmp	r5, #7
   2b774:	bls	2b750 <__assert_fail@plt+0x1915c>
   2b778:	cmp	lr, #0
   2b77c:	bne	2b658 <__assert_fail@plt+0x19064>
   2b780:	cmp	r4, #0
   2b784:	cmpne	r4, #44	; 0x2c
   2b788:	bne	2b658 <__assert_fail@plt+0x19064>
   2b78c:	ldr	lr, [pc, #432]	; 2b944 <__assert_fail@plt+0x19350>
   2b790:	strb	ip, [r2]
   2b794:	str	r3, [r2, #8]
   2b798:	strb	sl, [r2, #1]
   2b79c:	mov	r3, r1
   2b7a0:	str	r6, [r2, #4]
   2b7a4:	mov	ip, r4
   2b7a8:	mov	r1, lr
   2b7ac:	b	2b70c <__assert_fail@plt+0x19118>
   2b7b0:	ldrb	r4, [r3, #2]
   2b7b4:	mov	r8, r9
   2b7b8:	add	r3, r3, #2
   2b7bc:	mov	r1, #56	; 0x38
   2b7c0:	b	2b6f0 <__assert_fail@plt+0x190fc>
   2b7c4:	mov	r3, r1
   2b7c8:	mov	r8, sl
   2b7cc:	mov	r1, #0
   2b7d0:	sub	r5, r4, #88	; 0x58
   2b7d4:	cmp	r5, #32
   2b7d8:	ldrls	pc, [pc, r5, lsl #2]
   2b7dc:	b	2b6f0 <__assert_fail@plt+0x190fc>
   2b7e0:	andeq	fp, r2, r4, ror #16
   2b7e4:	strdeq	fp, [r2], -r0
   2b7e8:	strdeq	fp, [r2], -r0
   2b7ec:	strdeq	fp, [r2], -r0
   2b7f0:	strdeq	fp, [r2], -r0
   2b7f4:	strdeq	fp, [r2], -r0
   2b7f8:	strdeq	fp, [r2], -r0
   2b7fc:	strdeq	fp, [r2], -r0
   2b800:	strdeq	fp, [r2], -r0
   2b804:	strdeq	fp, [r2], -r0
   2b808:	strdeq	fp, [r2], -r0
   2b80c:	strdeq	fp, [r2], -r0
   2b810:	strdeq	fp, [r2], -r0
   2b814:	strdeq	fp, [r2], -r0
   2b818:	strdeq	fp, [r2], -r0
   2b81c:	strdeq	fp, [r2], -r0
   2b820:	strdeq	fp, [r2], -r0
   2b824:	strdeq	fp, [r2], -r0
   2b828:	strdeq	fp, [r2], -r0
   2b82c:	strdeq	fp, [r2], -r0
   2b830:	strdeq	fp, [r2], -r0
   2b834:	strdeq	fp, [r2], -r0
   2b838:	strdeq	fp, [r2], -r0
   2b83c:	strdeq	fp, [r2], -r0
   2b840:	strdeq	fp, [r2], -r0
   2b844:	strdeq	fp, [r2], -r0
   2b848:	muleq	r2, r0, r8
   2b84c:	andeq	fp, r2, r8, lsl #17
   2b850:	andeq	fp, r2, r0, lsl #17
   2b854:	strdeq	fp, [r2], -r0
   2b858:	strdeq	fp, [r2], -r0
   2b85c:	andeq	fp, r2, r8, ror r8
   2b860:	andeq	fp, r2, r0, ror r8
   2b864:	mov	r8, fp
   2b868:	ldrb	r4, [r3, #1]!
   2b86c:	b	2b7d0 <__assert_fail@plt+0x191dc>
   2b870:	orr	r1, r1, #73	; 0x49
   2b874:	b	2b868 <__assert_fail@plt+0x19274>
   2b878:	orr	r1, r1, #146	; 0x92
   2b87c:	b	2b868 <__assert_fail@plt+0x19274>
   2b880:	orr	r1, r1, #512	; 0x200
   2b884:	b	2b868 <__assert_fail@plt+0x19274>
   2b888:	orr	r1, r1, #3072	; 0xc00
   2b88c:	b	2b868 <__assert_fail@plt+0x19274>
   2b890:	orr	r1, r1, #292	; 0x124
   2b894:	b	2b868 <__assert_fail@plt+0x19274>
   2b898:	ldrb	r4, [r3, #2]
   2b89c:	mov	r8, r9
   2b8a0:	add	r3, r3, #2
   2b8a4:	mov	r1, #7
   2b8a8:	b	2b6f0 <__assert_fail@plt+0x190fc>
   2b8ac:	ldr	lr, [pc, #144]	; 2b944 <__assert_fail@plt+0x19350>
   2b8b0:	b	2b628 <__assert_fail@plt+0x19034>
   2b8b4:	orr	lr, lr, #516	; 0x204
   2b8b8:	orr	lr, lr, #3
   2b8bc:	b	2b628 <__assert_fail@plt+0x19034>
   2b8c0:	orr	lr, lr, #1072	; 0x430
   2b8c4:	orr	lr, lr, #8
   2b8c8:	b	2b628 <__assert_fail@plt+0x19034>
   2b8cc:	cmp	r2, #0
   2b8d0:	bne	2b69c <__assert_fail@plt+0x190a8>
   2b8d4:	sub	r3, r3, r4
   2b8d8:	cmp	r3, #4
   2b8dc:	andle	r4, r5, #3072	; 0xc00
   2b8e0:	mov	r0, #32
   2b8e4:	mvnle	r4, r4, lsr #10
   2b8e8:	ldrgt	r4, [pc, #84]	; 2b944 <__assert_fail@plt+0x19350>
   2b8ec:	mvnle	r4, r4, lsl #10
   2b8f0:	bl	3563c <__assert_fail@plt+0x23048>
   2b8f4:	ldr	r2, [pc, #72]	; 2b944 <__assert_fail@plt+0x19350>
   2b8f8:	mov	ip, #61	; 0x3d
   2b8fc:	mov	r1, #1
   2b900:	mov	r3, #0
   2b904:	str	r5, [r0, #8]
   2b908:	str	r4, [r0, #12]
   2b90c:	strb	ip, [r0]
   2b910:	strb	r1, [r0, #1]
   2b914:	str	r2, [r0, #4]
   2b918:	strb	r3, [r0, #17]
   2b91c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b920:	cmp	ip, #44	; 0x2c
   2b924:	addeq	r4, r3, #1
   2b928:	moveq	r2, r7
   2b92c:	beq	2b624 <__assert_fail@plt+0x19030>
   2b930:	cmp	ip, #0
   2b934:	bne	2b658 <__assert_fail@plt+0x19064>
   2b938:	add	r7, r0, r7, lsl #4
   2b93c:	strb	ip, [r7, #1]
   2b940:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b944:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2b948:	push	{r4, r5, lr}
   2b94c:	sub	sp, sp, #108	; 0x6c
   2b950:	mov	r1, r0
   2b954:	mov	r2, sp
   2b958:	mov	r0, #3
   2b95c:	bl	12558 <__xstat64@plt>
   2b960:	subs	r4, r0, #0
   2b964:	movne	r0, #0
   2b968:	bne	2b99c <__assert_fail@plt+0x193a8>
   2b96c:	mov	r0, #32
   2b970:	ldr	r5, [sp, #16]
   2b974:	bl	3563c <__assert_fail@plt+0x23048>
   2b978:	ldr	r3, [pc, #36]	; 2b9a4 <__assert_fail@plt+0x193b0>
   2b97c:	mov	r1, #61	; 0x3d
   2b980:	mov	r2, #1
   2b984:	str	r5, [r0, #8]
   2b988:	strb	r4, [r0, #17]
   2b98c:	strb	r1, [r0]
   2b990:	strb	r2, [r0, #1]
   2b994:	str	r3, [r0, #4]
   2b998:	str	r3, [r0, #12]
   2b99c:	add	sp, sp, #108	; 0x6c
   2b9a0:	pop	{r4, r5, pc}
   2b9a4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2b9a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b9ac:	ldrb	r4, [r3, #1]
   2b9b0:	ldr	r7, [pc, #292]	; 2badc <__assert_fail@plt+0x194e8>
   2b9b4:	ldr	r9, [sp, #36]	; 0x24
   2b9b8:	cmp	r4, #0
   2b9bc:	and	r0, r0, r7
   2b9c0:	beq	2bad4 <__assert_fail@plt+0x194e0>
   2b9c4:	cmp	r1, #0
   2b9c8:	ldr	r8, [pc, #272]	; 2bae0 <__assert_fail@plt+0x194ec>
   2b9cc:	add	r3, r3, #16
   2b9d0:	mvn	r2, r2
   2b9d4:	movne	r6, #3072	; 0xc00
   2b9d8:	moveq	r6, #0
   2b9dc:	mov	r5, #0
   2b9e0:	b	2ba68 <__assert_fail@plt+0x19474>
   2b9e4:	cmp	r4, #3
   2b9e8:	bne	2ba24 <__assert_fail@plt+0x19430>
   2b9ec:	and	r4, ip, r0
   2b9f0:	and	ip, r4, #292	; 0x124
   2b9f4:	cmp	ip, #0
   2b9f8:	moveq	ip, #146	; 0x92
   2b9fc:	movne	ip, r8
   2ba00:	moveq	fp, #0
   2ba04:	movne	fp, #292	; 0x124
   2ba08:	tst	r4, #146	; 0x92
   2ba0c:	movne	fp, ip
   2ba10:	tst	r4, #73	; 0x49
   2ba14:	moveq	ip, #0
   2ba18:	movne	ip, #73	; 0x49
   2ba1c:	orr	ip, ip, fp
   2ba20:	orr	ip, ip, r4
   2ba24:	ldrb	r4, [r3, #-16]
   2ba28:	cmp	lr, #0
   2ba2c:	movne	fp, lr
   2ba30:	moveq	fp, r2
   2ba34:	bic	ip, ip, sl
   2ba38:	cmp	r4, #45	; 0x2d
   2ba3c:	and	ip, ip, fp
   2ba40:	beq	2bac8 <__assert_fail@plt+0x194d4>
   2ba44:	cmp	r4, #61	; 0x3d
   2ba48:	beq	2ba90 <__assert_fail@plt+0x1949c>
   2ba4c:	cmp	r4, #43	; 0x2b
   2ba50:	orreq	r5, r5, ip
   2ba54:	orreq	r0, r0, ip
   2ba58:	add	r3, r3, #16
   2ba5c:	ldrb	r4, [r3, #-15]
   2ba60:	cmp	r4, #0
   2ba64:	beq	2babc <__assert_fail@plt+0x194c8>
   2ba68:	ldr	lr, [r3, #-4]
   2ba6c:	cmp	r4, #2
   2ba70:	bic	sl, r6, lr
   2ba74:	ldr	ip, [r3, #-8]
   2ba78:	ldr	lr, [r3, #-12]
   2ba7c:	bne	2b9e4 <__assert_fail@plt+0x193f0>
   2ba80:	and	r4, r0, #73	; 0x49
   2ba84:	orrs	r4, r4, r1
   2ba88:	orrne	ip, ip, #73	; 0x49
   2ba8c:	b	2ba24 <__assert_fail@plt+0x19430>
   2ba90:	add	r3, r3, #16
   2ba94:	cmp	lr, #0
   2ba98:	ldrb	r4, [r3, #-15]
   2ba9c:	mvnne	lr, lr
   2baa0:	orr	lr, lr, sl
   2baa4:	and	r0, r0, lr
   2baa8:	cmp	r4, #0
   2baac:	bic	lr, r7, lr
   2bab0:	orr	r0, ip, r0
   2bab4:	orr	r5, r5, lr
   2bab8:	bne	2ba68 <__assert_fail@plt+0x19474>
   2babc:	cmp	r9, #0
   2bac0:	strne	r5, [r9]
   2bac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bac8:	orr	r5, r5, ip
   2bacc:	bic	r0, r0, ip
   2bad0:	b	2ba58 <__assert_fail@plt+0x19464>
   2bad4:	mov	r5, r4
   2bad8:	b	2babc <__assert_fail@plt+0x194c8>
   2badc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2bae0:			; <UNDEFINED> instruction: 0x000001b6
   2bae4:	ldr	r3, [pc, #44]	; 2bb18 <__assert_fail@plt+0x19524>
   2bae8:	push	{r4, lr}
   2baec:	mov	r5, r0
   2baf0:	mov	r2, #5
   2baf4:	ldr	r1, [pc, #32]	; 2bb1c <__assert_fail@plt+0x19528>
   2baf8:	mov	r0, #0
   2bafc:	ldr	r4, [r3]
   2bb00:	bl	120b4 <dcgettext@plt>
   2bb04:	mov	r1, r5
   2bb08:	mov	r2, r0
   2bb0c:	mov	r0, r4
   2bb10:	bl	121ec <error@plt>
   2bb14:	bl	125a0 <abort@plt>
   2bb18:	strdeq	r4, [r6], -r0
   2bb1c:	andeq	r2, r5, ip, lsl r6
   2bb20:	ldr	r3, [pc, #44]	; 2bb54 <__assert_fail@plt+0x19560>
   2bb24:	push	{r4, lr}
   2bb28:	mov	r5, r0
   2bb2c:	mov	r2, #5
   2bb30:	ldr	r1, [pc, #32]	; 2bb58 <__assert_fail@plt+0x19564>
   2bb34:	mov	r0, #0
   2bb38:	ldr	r4, [r3]
   2bb3c:	bl	120b4 <dcgettext@plt>
   2bb40:	mov	r1, r5
   2bb44:	mov	r2, r0
   2bb48:	mov	r0, r4
   2bb4c:	bl	121ec <error@plt>
   2bb50:	bl	125a0 <abort@plt>
   2bb54:	strdeq	r4, [r6], -r0
   2bb58:	andeq	r2, r5, r8, asr #12
   2bb5c:	push	{r2, r3}
   2bb60:	push	{lr}		; (str lr, [sp, #-4]!)
   2bb64:	sub	sp, sp, #12
   2bb68:	ldr	r2, [sp, #16]
   2bb6c:	ands	r3, r2, #64	; 0x40
   2bb70:	addne	r3, sp, #20
   2bb74:	strne	r3, [sp, #4]
   2bb78:	ldrne	r3, [sp, #20]
   2bb7c:	bl	12324 <openat64@plt>
   2bb80:	bl	34cac <__assert_fail@plt+0x226b8>
   2bb84:	add	sp, sp, #12
   2bb88:	pop	{lr}		; (ldr lr, [sp], #4)
   2bb8c:	add	sp, sp, #8
   2bb90:	bx	lr
   2bb94:	andeq	r0, r0, r0
   2bb98:	ldr	r3, [r1, #24]
   2bb9c:	cmp	r3, #0
   2bba0:	blt	2bc10 <__assert_fail@plt+0x1961c>
   2bba4:	push	{r4, r5, lr}
   2bba8:	ldr	r2, [r0]
   2bbac:	ldr	r5, [r1]
   2bbb0:	ldr	lr, [r1, #4]
   2bbb4:	ldr	r3, [r0, #4]
   2bbb8:	ldr	ip, [r0, #8]
   2bbbc:	ldr	r4, [r1, #8]
   2bbc0:	eor	r2, r2, r5
   2bbc4:	eor	r3, r3, lr
   2bbc8:	ldr	r5, [r1, #12]
   2bbcc:	ldr	lr, [r0, #12]
   2bbd0:	orr	r3, r2, r3
   2bbd4:	eor	r2, ip, r4
   2bbd8:	ldr	ip, [r0, #16]
   2bbdc:	ldr	r4, [r1, #16]
   2bbe0:	orr	r3, r3, r2
   2bbe4:	eor	lr, lr, r5
   2bbe8:	ldr	r2, [r0, #20]
   2bbec:	ldr	r0, [r1, #20]
   2bbf0:	orr	r3, r3, lr
   2bbf4:	eor	r1, ip, r4
   2bbf8:	eor	r2, r2, r0
   2bbfc:	orr	r3, r3, r1
   2bc00:	orrs	r3, r3, r2
   2bc04:	moveq	r0, #1
   2bc08:	movne	r0, #0
   2bc0c:	pop	{r4, r5, pc}
   2bc10:	mov	r0, #0
   2bc14:	bx	lr
   2bc18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc1c:	ldr	r1, [sp, #80]	; 0x50
   2bc20:	ldrd	sl, [sp, #60]	; 0x3c
   2bc24:	cmp	r1, #0
   2bc28:	ldrd	r8, [sp, #68]	; 0x44
   2bc2c:	ldr	ip, [sp, #76]	; 0x4c
   2bc30:	ldr	r1, [r0, #144]	; 0x90
   2bc34:	blt	2bf68 <__assert_fail@plt+0x19974>
   2bc38:	cmp	ip, #0
   2bc3c:	blt	2c0cc <__assert_fail@plt+0x19ad8>
   2bc40:	cmp	r1, #0
   2bc44:	blt	2bedc <__assert_fail@plt+0x198e8>
   2bc48:	mvn	lr, #-2147483648	; 0x80000000
   2bc4c:	sub	lr, lr, ip
   2bc50:	cmp	r1, lr
   2bc54:	movle	lr, #0
   2bc58:	movgt	lr, #1
   2bc5c:	cmp	lr, #0
   2bc60:	addne	ip, r1, ip
   2bc64:	movne	r1, #1
   2bc68:	beq	2bedc <__assert_fail@plt+0x198e8>
   2bc6c:	cmp	r8, #0
   2bc70:	sbcs	lr, r9, #0
   2bc74:	str	ip, [r0, #144]	; 0x90
   2bc78:	ldrd	r4, [r0, #136]	; 0x88
   2bc7c:	blt	2c1b8 <__assert_fail@plt+0x19bc4>
   2bc80:	cmp	r4, #0
   2bc84:	sbcs	ip, r5, #0
   2bc88:	blt	2bf5c <__assert_fail@plt+0x19968>
   2bc8c:	mvn	r6, #0
   2bc90:	subs	r6, r6, r8
   2bc94:	mvn	r7, #-2147483648	; 0x80000000
   2bc98:	sbc	r7, r7, r9
   2bc9c:	cmp	r6, r4
   2bca0:	sbcs	ip, r7, r5
   2bca4:	movlt	ip, #1
   2bca8:	movge	ip, #0
   2bcac:	cmp	ip, #0
   2bcb0:	beq	2bf5c <__assert_fail@plt+0x19968>
   2bcb4:	adds	r4, r4, r8
   2bcb8:	adc	r5, r5, r9
   2bcbc:	mov	r1, #1
   2bcc0:	cmp	sl, #0
   2bcc4:	sbcs	ip, fp, #0
   2bcc8:	strd	r4, [r0, #136]	; 0x88
   2bccc:	ldrd	r4, [r0, #128]	; 0x80
   2bcd0:	blt	2c194 <__assert_fail@plt+0x19ba0>
   2bcd4:	cmp	r4, #0
   2bcd8:	sbcs	ip, r5, #0
   2bcdc:	blt	2bf4c <__assert_fail@plt+0x19958>
   2bce0:	mvn	r6, #0
   2bce4:	subs	r6, r6, sl
   2bce8:	mvn	r7, #-2147483648	; 0x80000000
   2bcec:	sbc	r7, r7, fp
   2bcf0:	cmp	r6, r4
   2bcf4:	sbcs	ip, r7, r5
   2bcf8:	movlt	ip, #1
   2bcfc:	movge	ip, #0
   2bd00:	cmp	ip, #0
   2bd04:	beq	2bf4c <__assert_fail@plt+0x19958>
   2bd08:	adds	r4, r4, sl
   2bd0c:	adc	r5, r5, fp
   2bd10:	mov	ip, #1
   2bd14:	ldrd	r6, [sp, #52]	; 0x34
   2bd18:	strd	r4, [r0, #128]	; 0x80
   2bd1c:	orr	r1, ip, r1
   2bd20:	cmp	r6, #0
   2bd24:	sbcs	lr, r7, #0
   2bd28:	blt	2c164 <__assert_fail@plt+0x19b70>
   2bd2c:	ldrd	r4, [r0, #120]	; 0x78
   2bd30:	cmp	r4, #0
   2bd34:	sbcs	ip, r5, #0
   2bd38:	blt	2bf30 <__assert_fail@plt+0x1993c>
   2bd3c:	mov	r8, r6
   2bd40:	mvn	r6, #0
   2bd44:	mov	r9, r7
   2bd48:	subs	r8, r6, r8
   2bd4c:	mvn	r7, #-2147483648	; 0x80000000
   2bd50:	sbc	r9, r7, r9
   2bd54:	cmp	r8, r4
   2bd58:	sbcs	ip, r9, r5
   2bd5c:	movlt	ip, #1
   2bd60:	movge	ip, #0
   2bd64:	cmp	ip, #0
   2bd68:	beq	2bf30 <__assert_fail@plt+0x1993c>
   2bd6c:	ldrd	r6, [sp, #52]	; 0x34
   2bd70:	mov	ip, #1
   2bd74:	adds	r6, r6, r4
   2bd78:	adc	r7, r7, r5
   2bd7c:	mov	r4, r6
   2bd80:	mov	r5, r7
   2bd84:	ldrd	r6, [sp, #44]	; 0x2c
   2bd88:	strd	r4, [r0, #120]	; 0x78
   2bd8c:	orr	r1, r1, ip
   2bd90:	cmp	r6, #0
   2bd94:	sbcs	lr, r7, #0
   2bd98:	blt	2c134 <__assert_fail@plt+0x19b40>
   2bd9c:	ldrd	r4, [r0, #112]	; 0x70
   2bda0:	cmp	r4, #0
   2bda4:	sbcs	ip, r5, #0
   2bda8:	blt	2bf14 <__assert_fail@plt+0x19920>
   2bdac:	mov	r8, r6
   2bdb0:	mvn	r6, #0
   2bdb4:	mov	r9, r7
   2bdb8:	subs	r8, r6, r8
   2bdbc:	mvn	r7, #-2147483648	; 0x80000000
   2bdc0:	sbc	r9, r7, r9
   2bdc4:	cmp	r8, r4
   2bdc8:	sbcs	ip, r9, r5
   2bdcc:	movlt	ip, #1
   2bdd0:	movge	ip, #0
   2bdd4:	cmp	ip, #0
   2bdd8:	beq	2bf14 <__assert_fail@plt+0x19920>
   2bddc:	ldrd	r6, [sp, #44]	; 0x2c
   2bde0:	mov	ip, #1
   2bde4:	adds	r6, r6, r4
   2bde8:	adc	r7, r7, r5
   2bdec:	mov	r4, r6
   2bdf0:	mov	r5, r7
   2bdf4:	ldrd	r6, [sp, #36]	; 0x24
   2bdf8:	strd	r4, [r0, #112]	; 0x70
   2bdfc:	orr	r1, r1, ip
   2be00:	cmp	r6, #0
   2be04:	sbcs	lr, r7, #0
   2be08:	blt	2c104 <__assert_fail@plt+0x19b10>
   2be0c:	ldrd	r4, [r0, #104]	; 0x68
   2be10:	cmp	r4, #0
   2be14:	sbcs	ip, r5, #0
   2be18:	blt	2bef8 <__assert_fail@plt+0x19904>
   2be1c:	mov	r8, r6
   2be20:	mvn	r6, #0
   2be24:	mov	r9, r7
   2be28:	subs	r8, r6, r8
   2be2c:	mvn	r7, #-2147483648	; 0x80000000
   2be30:	sbc	r9, r7, r9
   2be34:	cmp	r8, r4
   2be38:	sbcs	ip, r9, r5
   2be3c:	movlt	ip, #1
   2be40:	movge	ip, #0
   2be44:	cmp	ip, #0
   2be48:	beq	2bef8 <__assert_fail@plt+0x19904>
   2be4c:	ldrd	r6, [sp, #36]	; 0x24
   2be50:	mov	ip, #1
   2be54:	adds	r6, r6, r4
   2be58:	adc	r7, r7, r5
   2be5c:	mov	r4, r6
   2be60:	mov	r5, r7
   2be64:	cmp	r2, #0
   2be68:	sbcs	lr, r3, #0
   2be6c:	strd	r4, [r0, #104]	; 0x68
   2be70:	orr	r1, r1, ip
   2be74:	ldrd	r4, [r0, #96]	; 0x60
   2be78:	blt	2c0e0 <__assert_fail@plt+0x19aec>
   2be7c:	cmp	r4, #0
   2be80:	sbcs	ip, r5, #0
   2be84:	blt	2bee8 <__assert_fail@plt+0x198f4>
   2be88:	mvn	r6, #0
   2be8c:	subs	r6, r6, r2
   2be90:	mvn	r7, #-2147483648	; 0x80000000
   2be94:	sbc	r7, r7, r3
   2be98:	cmp	r6, r4
   2be9c:	sbcs	ip, r7, r5
   2bea0:	movlt	ip, #1
   2bea4:	movge	ip, #0
   2bea8:	cmp	ip, #0
   2beac:	beq	2bee8 <__assert_fail@plt+0x198f4>
   2beb0:	adds	r2, r2, r4
   2beb4:	adc	r3, r3, r5
   2beb8:	mov	ip, #1
   2bebc:	orr	r1, r1, ip
   2bec0:	strd	r2, [r0, #96]	; 0x60
   2bec4:	cmp	r1, #0
   2bec8:	moveq	r3, #1
   2becc:	strbeq	r3, [r0, #153]	; 0x99
   2bed0:	moveq	r0, r3
   2bed4:	movne	r0, #0
   2bed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bedc:	add	ip, r1, ip
   2bee0:	mov	r1, #0
   2bee4:	b	2bc6c <__assert_fail@plt+0x19678>
   2bee8:	adds	r2, r2, r4
   2beec:	adc	r3, r3, r5
   2bef0:	mov	ip, #0
   2bef4:	b	2bebc <__assert_fail@plt+0x198c8>
   2bef8:	ldrd	r6, [sp, #36]	; 0x24
   2befc:	mov	ip, #0
   2bf00:	adds	r6, r6, r4
   2bf04:	adc	r7, r7, r5
   2bf08:	mov	r4, r6
   2bf0c:	mov	r5, r7
   2bf10:	b	2be64 <__assert_fail@plt+0x19870>
   2bf14:	ldrd	r6, [sp, #44]	; 0x2c
   2bf18:	mov	ip, #0
   2bf1c:	adds	r6, r6, r4
   2bf20:	adc	r7, r7, r5
   2bf24:	mov	r4, r6
   2bf28:	mov	r5, r7
   2bf2c:	b	2bdf4 <__assert_fail@plt+0x19800>
   2bf30:	ldrd	r6, [sp, #52]	; 0x34
   2bf34:	mov	ip, #0
   2bf38:	adds	r6, r6, r4
   2bf3c:	adc	r7, r7, r5
   2bf40:	mov	r4, r6
   2bf44:	mov	r5, r7
   2bf48:	b	2bd84 <__assert_fail@plt+0x19790>
   2bf4c:	adds	r4, r4, sl
   2bf50:	adc	r5, r5, fp
   2bf54:	mov	ip, #0
   2bf58:	b	2bd14 <__assert_fail@plt+0x19720>
   2bf5c:	adds	r4, r4, r8
   2bf60:	adc	r5, r5, r9
   2bf64:	b	2bcc0 <__assert_fail@plt+0x196cc>
   2bf68:	mvn	lr, r1
   2bf6c:	lsr	lr, lr, #31
   2bf70:	cmp	lr, ip, lsr #31
   2bf74:	beq	2c0a0 <__assert_fail@plt+0x19aac>
   2bf78:	sub	ip, r1, ip
   2bf7c:	mov	r1, #0
   2bf80:	ldrd	r4, [r0, #136]	; 0x88
   2bf84:	str	ip, [r0, #144]	; 0x90
   2bf88:	mvn	ip, r5
   2bf8c:	lsr	ip, ip, #31
   2bf90:	cmp	ip, r9, lsr #31
   2bf94:	beq	2c338 <__assert_fail@plt+0x19d44>
   2bf98:	subs	r4, r4, r8
   2bf9c:	sbc	r5, r5, r9
   2bfa0:	ldrd	r6, [r0, #128]	; 0x80
   2bfa4:	strd	r4, [r0, #136]	; 0x88
   2bfa8:	mvn	ip, r7
   2bfac:	lsr	ip, ip, #31
   2bfb0:	cmp	ip, fp, lsr #31
   2bfb4:	beq	2c2fc <__assert_fail@plt+0x19d08>
   2bfb8:	subs	r6, r6, sl
   2bfbc:	sbc	r7, r7, fp
   2bfc0:	mov	ip, #0
   2bfc4:	ldrd	r8, [r0, #120]	; 0x78
   2bfc8:	orr	r1, ip, r1
   2bfcc:	ldr	lr, [sp, #56]	; 0x38
   2bfd0:	mvn	ip, r9
   2bfd4:	strd	r6, [r0, #128]	; 0x80
   2bfd8:	lsr	ip, ip, #31
   2bfdc:	cmp	ip, lr, lsr #31
   2bfe0:	beq	2c2b0 <__assert_fail@plt+0x19cbc>
   2bfe4:	ldrd	r4, [sp, #52]	; 0x34
   2bfe8:	mov	ip, #0
   2bfec:	subs	r4, r8, r4
   2bff0:	sbc	r5, r9, r5
   2bff4:	mov	r8, r4
   2bff8:	mov	r9, r5
   2bffc:	ldrd	r6, [r0, #112]	; 0x70
   2c000:	orr	r1, r1, ip
   2c004:	ldr	lr, [sp, #48]	; 0x30
   2c008:	mvn	ip, r7
   2c00c:	strd	r8, [r0, #120]	; 0x78
   2c010:	lsr	ip, ip, #31
   2c014:	cmp	ip, lr, lsr #31
   2c018:	beq	2c264 <__assert_fail@plt+0x19c70>
   2c01c:	ldrd	r4, [sp, #44]	; 0x2c
   2c020:	mov	ip, #0
   2c024:	subs	r4, r6, r4
   2c028:	sbc	r5, r7, r5
   2c02c:	mov	r6, r4
   2c030:	mov	r7, r5
   2c034:	ldrd	r8, [r0, #104]	; 0x68
   2c038:	orr	r1, r1, ip
   2c03c:	ldr	lr, [sp, #40]	; 0x28
   2c040:	mvn	ip, r9
   2c044:	strd	r6, [r0, #112]	; 0x70
   2c048:	lsr	ip, ip, #31
   2c04c:	cmp	ip, lr, lsr #31
   2c050:	beq	2c218 <__assert_fail@plt+0x19c24>
   2c054:	ldrd	r4, [sp, #36]	; 0x24
   2c058:	mov	ip, #0
   2c05c:	subs	r4, r8, r4
   2c060:	sbc	r5, r9, r5
   2c064:	mov	r8, r4
   2c068:	mov	r9, r5
   2c06c:	ldrd	r6, [r0, #96]	; 0x60
   2c070:	orr	r1, r1, ip
   2c074:	strd	r8, [r0, #104]	; 0x68
   2c078:	mvn	ip, r7
   2c07c:	lsr	ip, ip, #31
   2c080:	cmp	ip, r3, lsr #31
   2c084:	beq	2c1dc <__assert_fail@plt+0x19be8>
   2c088:	subs	r2, r6, r2
   2c08c:	sbc	r3, r7, r3
   2c090:	mov	ip, #0
   2c094:	strd	r2, [r0, #96]	; 0x60
   2c098:	orr	r1, r1, ip
   2c09c:	b	2bec4 <__assert_fail@plt+0x198d0>
   2c0a0:	cmp	r1, #0
   2c0a4:	blt	2c374 <__assert_fail@plt+0x19d80>
   2c0a8:	sub	lr, ip, #-2147483647	; 0x80000001
   2c0ac:	cmp	r1, lr
   2c0b0:	movle	lr, #0
   2c0b4:	movgt	lr, #1
   2c0b8:	cmp	lr, #0
   2c0bc:	beq	2bf78 <__assert_fail@plt+0x19984>
   2c0c0:	sub	ip, r1, ip
   2c0c4:	mov	r1, #1
   2c0c8:	b	2bf80 <__assert_fail@plt+0x1998c>
   2c0cc:	rsb	lr, ip, #-2147483648	; 0x80000000
   2c0d0:	cmp	r1, lr
   2c0d4:	movge	lr, #0
   2c0d8:	movlt	lr, #1
   2c0dc:	b	2bc5c <__assert_fail@plt+0x19668>
   2c0e0:	mov	r6, #0
   2c0e4:	subs	r6, r6, r2
   2c0e8:	mov	r7, #-2147483648	; 0x80000000
   2c0ec:	sbc	r7, r7, r3
   2c0f0:	cmp	r4, r6
   2c0f4:	sbcs	ip, r5, r7
   2c0f8:	movlt	ip, #1
   2c0fc:	movge	ip, #0
   2c100:	b	2bea8 <__assert_fail@plt+0x198b4>
   2c104:	ldrd	r4, [r0, #104]	; 0x68
   2c108:	mov	r8, r6
   2c10c:	mov	r6, #0
   2c110:	mov	r9, r7
   2c114:	subs	r8, r6, r8
   2c118:	mov	r7, #-2147483648	; 0x80000000
   2c11c:	sbc	r9, r7, r9
   2c120:	cmp	r4, r8
   2c124:	sbcs	ip, r5, r9
   2c128:	movlt	ip, #1
   2c12c:	movge	ip, #0
   2c130:	b	2be44 <__assert_fail@plt+0x19850>
   2c134:	ldrd	r4, [r0, #112]	; 0x70
   2c138:	mov	r8, r6
   2c13c:	mov	r6, #0
   2c140:	mov	r9, r7
   2c144:	subs	r8, r6, r8
   2c148:	mov	r7, #-2147483648	; 0x80000000
   2c14c:	sbc	r9, r7, r9
   2c150:	cmp	r4, r8
   2c154:	sbcs	ip, r5, r9
   2c158:	movlt	ip, #1
   2c15c:	movge	ip, #0
   2c160:	b	2bdd4 <__assert_fail@plt+0x197e0>
   2c164:	ldrd	r4, [r0, #120]	; 0x78
   2c168:	mov	r8, r6
   2c16c:	mov	r6, #0
   2c170:	mov	r9, r7
   2c174:	subs	r8, r6, r8
   2c178:	mov	r7, #-2147483648	; 0x80000000
   2c17c:	sbc	r9, r7, r9
   2c180:	cmp	r4, r8
   2c184:	sbcs	ip, r5, r9
   2c188:	movlt	ip, #1
   2c18c:	movge	ip, #0
   2c190:	b	2bd64 <__assert_fail@plt+0x19770>
   2c194:	mov	r6, #0
   2c198:	subs	r6, r6, sl
   2c19c:	mov	r7, #-2147483648	; 0x80000000
   2c1a0:	sbc	r7, r7, fp
   2c1a4:	cmp	r4, r6
   2c1a8:	sbcs	ip, r5, r7
   2c1ac:	movlt	ip, #1
   2c1b0:	movge	ip, #0
   2c1b4:	b	2bd00 <__assert_fail@plt+0x1970c>
   2c1b8:	mov	r6, #0
   2c1bc:	subs	r6, r6, r8
   2c1c0:	mov	r7, #-2147483648	; 0x80000000
   2c1c4:	sbc	r7, r7, r9
   2c1c8:	cmp	r4, r6
   2c1cc:	sbcs	ip, r5, r7
   2c1d0:	movlt	ip, #1
   2c1d4:	movge	ip, #0
   2c1d8:	b	2bcac <__assert_fail@plt+0x196b8>
   2c1dc:	cmp	r6, #0
   2c1e0:	sbcs	ip, r7, #0
   2c1e4:	blt	2c420 <__assert_fail@plt+0x19e2c>
   2c1e8:	subs	r4, r2, #1
   2c1ec:	sbc	r5, r3, #-2147483648	; 0x80000000
   2c1f0:	cmp	r4, r6
   2c1f4:	sbcs	ip, r5, r7
   2c1f8:	movlt	ip, #1
   2c1fc:	movge	ip, #0
   2c200:	cmp	ip, #0
   2c204:	beq	2c088 <__assert_fail@plt+0x19a94>
   2c208:	subs	r2, r6, r2
   2c20c:	sbc	r3, r7, r3
   2c210:	mov	ip, #1
   2c214:	b	2c094 <__assert_fail@plt+0x19aa0>
   2c218:	cmp	r8, #0
   2c21c:	sbcs	ip, r9, #0
   2c220:	blt	2c400 <__assert_fail@plt+0x19e0c>
   2c224:	ldrd	r4, [sp, #36]	; 0x24
   2c228:	subs	r4, r4, #1
   2c22c:	sbc	r5, r5, #-2147483648	; 0x80000000
   2c230:	cmp	r4, r8
   2c234:	sbcs	ip, r5, r9
   2c238:	movlt	ip, #1
   2c23c:	movge	ip, #0
   2c240:	cmp	ip, #0
   2c244:	beq	2c054 <__assert_fail@plt+0x19a60>
   2c248:	ldrd	r4, [sp, #36]	; 0x24
   2c24c:	mov	ip, #1
   2c250:	subs	r4, r8, r4
   2c254:	sbc	r5, r9, r5
   2c258:	mov	r8, r4
   2c25c:	mov	r9, r5
   2c260:	b	2c06c <__assert_fail@plt+0x19a78>
   2c264:	cmp	r6, #0
   2c268:	sbcs	ip, r7, #0
   2c26c:	blt	2c3e0 <__assert_fail@plt+0x19dec>
   2c270:	ldrd	r4, [sp, #44]	; 0x2c
   2c274:	subs	r4, r4, #1
   2c278:	sbc	r5, r5, #-2147483648	; 0x80000000
   2c27c:	cmp	r4, r6
   2c280:	sbcs	ip, r5, r7
   2c284:	movlt	ip, #1
   2c288:	movge	ip, #0
   2c28c:	cmp	ip, #0
   2c290:	beq	2c01c <__assert_fail@plt+0x19a28>
   2c294:	ldrd	r4, [sp, #44]	; 0x2c
   2c298:	mov	ip, #1
   2c29c:	subs	r4, r6, r4
   2c2a0:	sbc	r5, r7, r5
   2c2a4:	mov	r6, r4
   2c2a8:	mov	r7, r5
   2c2ac:	b	2c034 <__assert_fail@plt+0x19a40>
   2c2b0:	cmp	r8, #0
   2c2b4:	sbcs	ip, r9, #0
   2c2b8:	blt	2c3c0 <__assert_fail@plt+0x19dcc>
   2c2bc:	ldrd	r4, [sp, #52]	; 0x34
   2c2c0:	subs	r4, r4, #1
   2c2c4:	sbc	r5, r5, #-2147483648	; 0x80000000
   2c2c8:	cmp	r4, r8
   2c2cc:	sbcs	ip, r5, r9
   2c2d0:	movlt	ip, #1
   2c2d4:	movge	ip, #0
   2c2d8:	cmp	ip, #0
   2c2dc:	beq	2bfe4 <__assert_fail@plt+0x199f0>
   2c2e0:	ldrd	r4, [sp, #52]	; 0x34
   2c2e4:	mov	ip, #1
   2c2e8:	subs	r4, r8, r4
   2c2ec:	sbc	r5, r9, r5
   2c2f0:	mov	r8, r4
   2c2f4:	mov	r9, r5
   2c2f8:	b	2bffc <__assert_fail@plt+0x19a08>
   2c2fc:	cmp	r6, #0
   2c300:	sbcs	ip, r7, #0
   2c304:	blt	2c3a4 <__assert_fail@plt+0x19db0>
   2c308:	subs	r4, sl, #1
   2c30c:	sbc	r5, fp, #-2147483648	; 0x80000000
   2c310:	cmp	r4, r6
   2c314:	sbcs	ip, r5, r7
   2c318:	movlt	ip, #1
   2c31c:	movge	ip, #0
   2c320:	cmp	ip, #0
   2c324:	beq	2bfb8 <__assert_fail@plt+0x199c4>
   2c328:	subs	r6, r6, sl
   2c32c:	sbc	r7, r7, fp
   2c330:	mov	ip, #1
   2c334:	b	2bfc4 <__assert_fail@plt+0x199d0>
   2c338:	cmp	r4, #0
   2c33c:	sbcs	ip, r5, #0
   2c340:	blt	2c388 <__assert_fail@plt+0x19d94>
   2c344:	subs	r6, r8, #1
   2c348:	sbc	r7, r9, #-2147483648	; 0x80000000
   2c34c:	cmp	r6, r4
   2c350:	sbcs	ip, r7, r5
   2c354:	movlt	ip, #1
   2c358:	movge	ip, #0
   2c35c:	cmp	ip, #0
   2c360:	beq	2bf98 <__assert_fail@plt+0x199a4>
   2c364:	subs	r4, r4, r8
   2c368:	sbc	r5, r5, r9
   2c36c:	mov	r1, #1
   2c370:	b	2bfa0 <__assert_fail@plt+0x199ac>
   2c374:	add	lr, r1, #-2147483648	; 0x80000000
   2c378:	cmp	lr, ip
   2c37c:	movge	lr, #0
   2c380:	movlt	lr, #1
   2c384:	b	2c0b8 <__assert_fail@plt+0x19ac4>
   2c388:	adds	r6, r4, #0
   2c38c:	adc	r7, r5, #-2147483648	; 0x80000000
   2c390:	cmp	r6, r8
   2c394:	sbcs	ip, r7, r9
   2c398:	movlt	ip, #1
   2c39c:	movge	ip, #0
   2c3a0:	b	2c35c <__assert_fail@plt+0x19d68>
   2c3a4:	adds	r4, r6, #0
   2c3a8:	adc	r5, r7, #-2147483648	; 0x80000000
   2c3ac:	cmp	r4, sl
   2c3b0:	sbcs	ip, r5, fp
   2c3b4:	movlt	ip, #1
   2c3b8:	movge	ip, #0
   2c3bc:	b	2c320 <__assert_fail@plt+0x19d2c>
   2c3c0:	ldrd	r6, [sp, #52]	; 0x34
   2c3c4:	adds	r4, r8, #0
   2c3c8:	adc	r5, r9, #-2147483648	; 0x80000000
   2c3cc:	cmp	r4, r6
   2c3d0:	sbcs	ip, r5, r7
   2c3d4:	movlt	ip, #1
   2c3d8:	movge	ip, #0
   2c3dc:	b	2c2d8 <__assert_fail@plt+0x19ce4>
   2c3e0:	ldrd	r8, [sp, #44]	; 0x2c
   2c3e4:	adds	r4, r6, #0
   2c3e8:	adc	r5, r7, #-2147483648	; 0x80000000
   2c3ec:	cmp	r4, r8
   2c3f0:	sbcs	ip, r5, r9
   2c3f4:	movlt	ip, #1
   2c3f8:	movge	ip, #0
   2c3fc:	b	2c28c <__assert_fail@plt+0x19c98>
   2c400:	ldrd	r6, [sp, #36]	; 0x24
   2c404:	adds	r4, r8, #0
   2c408:	adc	r5, r9, #-2147483648	; 0x80000000
   2c40c:	cmp	r4, r6
   2c410:	sbcs	ip, r5, r7
   2c414:	movlt	ip, #1
   2c418:	movge	ip, #0
   2c41c:	b	2c240 <__assert_fail@plt+0x19c4c>
   2c420:	adds	r4, r6, #0
   2c424:	adc	r5, r7, #-2147483648	; 0x80000000
   2c428:	cmp	r4, r2
   2c42c:	sbcs	ip, r5, r3
   2c430:	movlt	ip, #1
   2c434:	movge	ip, #0
   2c438:	b	2c200 <__assert_fail@plt+0x19c0c>
   2c43c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c440:	mov	r8, r0
   2c444:	ldr	ip, [sp, #32]
   2c448:	mov	r9, r1
   2c44c:	cmp	ip, #2
   2c450:	mov	r4, r2
   2c454:	mov	r5, r3
   2c458:	ldrd	r6, [sp, #40]	; 0x28
   2c45c:	bgt	2c4c8 <__assert_fail@plt+0x19ed4>
   2c460:	cmp	r6, #0
   2c464:	sbcs	r3, r7, #0
   2c468:	blt	2c5d4 <__assert_fail@plt+0x19fe0>
   2c46c:	cmp	r4, #0
   2c470:	sbcs	r3, r5, #0
   2c474:	blt	2c538 <__assert_fail@plt+0x19f44>
   2c478:	add	r3, pc, #360	; 0x168
   2c47c:	ldrd	r2, [r3]
   2c480:	cmp	r2, r4
   2c484:	sbcs	r3, r3, r5
   2c488:	bge	2c56c <__assert_fail@plt+0x19f78>
   2c48c:	mov	r1, #60	; 0x3c
   2c490:	cmp	r9, #0
   2c494:	umull	r2, r3, r4, r1
   2c498:	mov	ip, #1
   2c49c:	mla	r3, r1, r5, r3
   2c4a0:	beq	2c584 <__assert_fail@plt+0x19f90>
   2c4a4:	cmp	r2, #0
   2c4a8:	sbcs	r1, r3, #0
   2c4ac:	blt	2c5b8 <__assert_fail@plt+0x19fc4>
   2c4b0:	subs	r2, r2, r6
   2c4b4:	sbc	r3, r3, r7
   2c4b8:	cmp	ip, #0
   2c4bc:	beq	2c510 <__assert_fail@plt+0x19f1c>
   2c4c0:	mov	r0, #0
   2c4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c4c8:	cmp	r6, #0
   2c4cc:	sbcs	r3, r7, #0
   2c4d0:	bge	2c46c <__assert_fail@plt+0x19e78>
   2c4d4:	mov	r2, #100	; 0x64
   2c4d8:	mov	r3, #0
   2c4dc:	mov	r0, r4
   2c4e0:	mov	r1, r5
   2c4e4:	bl	4db88 <__assert_fail@plt+0x3b594>
   2c4e8:	mov	ip, #60	; 0x3c
   2c4ec:	mov	r2, #100	; 0x64
   2c4f0:	mov	r3, #0
   2c4f4:	umull	r6, r7, r0, ip
   2c4f8:	mov	r0, r4
   2c4fc:	mla	r7, ip, r1, r7
   2c500:	mov	r1, r5
   2c504:	bl	4db88 <__assert_fail@plt+0x3b594>
   2c508:	adds	r2, r2, r6
   2c50c:	adc	r3, r3, r7
   2c510:	adds	r0, r2, #1440	; 0x5a0
   2c514:	adc	r1, r3, #0
   2c518:	cmp	r1, #0
   2c51c:	cmpeq	r0, #2880	; 0xb40
   2c520:	bhi	2c4c0 <__assert_fail@plt+0x19ecc>
   2c524:	rsb	r2, r2, r2, lsl #4
   2c528:	mov	r0, #1
   2c52c:	lsl	r2, r2, #2
   2c530:	str	r2, [r8]
   2c534:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c538:	mvn	r3, #0
   2c53c:	mvn	r2, #0
   2c540:	cmp	r5, r3
   2c544:	cmpeq	r4, r2
   2c548:	beq	2c56c <__assert_fail@plt+0x19f78>
   2c54c:	mov	r3, r5
   2c550:	mov	r2, r4
   2c554:	mov	r0, #0
   2c558:	mov	r1, #-2147483648	; 0x80000000
   2c55c:	bl	4db88 <__assert_fail@plt+0x3b594>
   2c560:	cmp	r0, #60	; 0x3c
   2c564:	sbcs	r3, r1, #0
   2c568:	blt	2c48c <__assert_fail@plt+0x19e98>
   2c56c:	mov	r1, #60	; 0x3c
   2c570:	cmp	r9, #0
   2c574:	umull	r2, r3, r4, r1
   2c578:	mov	ip, #0
   2c57c:	mla	r3, r1, r5, r3
   2c580:	bne	2c4a4 <__assert_fail@plt+0x19eb0>
   2c584:	cmp	r2, #0
   2c588:	sbcs	r1, r3, #0
   2c58c:	blt	2c5ac <__assert_fail@plt+0x19fb8>
   2c590:	mvn	r0, #0
   2c594:	subs	r0, r0, r6
   2c598:	mvn	r1, #-2147483648	; 0x80000000
   2c59c:	sbc	r1, r1, r7
   2c5a0:	cmp	r0, r2
   2c5a4:	sbcs	r1, r1, r3
   2c5a8:	blt	2c4c0 <__assert_fail@plt+0x19ecc>
   2c5ac:	adds	r2, r2, r6
   2c5b0:	adc	r3, r3, r7
   2c5b4:	b	2c4b8 <__assert_fail@plt+0x19ec4>
   2c5b8:	adds	r0, r2, #0
   2c5bc:	adc	r1, r3, #-2147483648	; 0x80000000
   2c5c0:	cmp	r0, r6
   2c5c4:	sbcs	r1, r1, r7
   2c5c8:	bge	2c4b0 <__assert_fail@plt+0x19ebc>
   2c5cc:	mov	r0, #0
   2c5d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c5d4:	mov	r3, #100	; 0x64
   2c5d8:	mul	r2, r3, r5
   2c5dc:	umull	r4, r5, r4, r3
   2c5e0:	add	r5, r2, r5
   2c5e4:	b	2c4d4 <__assert_fail@plt+0x19ee0>
   2c5e8:	eorcs	r2, r2, #536870914	; 0x20000002
   2c5ec:	eoreq	r2, r2, #536870914	; 0x20000002
   2c5f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c5f4:	sub	sp, sp, #1472	; 0x5c0
   2c5f8:	sub	sp, sp, #4
   2c5fc:	ldr	sl, [pc, #3580]	; 2d400 <__assert_fail@plt+0x1ae0c>
   2c600:	mov	r3, #0
   2c604:	add	fp, sp, #200	; 0xc8
   2c608:	mov	r6, #38	; 0x26
   2c60c:	add	r9, sp, #352	; 0x160
   2c610:	mov	r8, r3
   2c614:	str	r3, [sp, #104]	; 0x68
   2c618:	strh	r3, [sp, #200]	; 0xc8
   2c61c:	mvn	r3, #1
   2c620:	str	r0, [sp, #64]	; 0x40
   2c624:	str	r3, [sp, #52]	; 0x34
   2c628:	cmn	r6, #93	; 0x5d
   2c62c:	beq	2c67c <__assert_fail@plt+0x1a088>
   2c630:	ldr	r3, [sp, #52]	; 0x34
   2c634:	cmn	r3, #2
   2c638:	beq	2ca4c <__assert_fail@plt+0x1a458>
   2c63c:	ldr	r2, [sp, #52]	; 0x34
   2c640:	cmp	r2, #0
   2c644:	ble	2c99c <__assert_fail@plt+0x1a3a8>
   2c648:	ldr	r3, [pc, #3508]	; 2d404 <__assert_fail@plt+0x1ae10>
   2c64c:	cmp	r2, r3
   2c650:	movle	r3, r2
   2c654:	ble	2c990 <__assert_fail@plt+0x1a39c>
   2c658:	mov	r0, #2
   2c65c:	add	r6, r0, r6
   2c660:	cmp	r6, #112	; 0x70
   2c664:	bhi	2c67c <__assert_fail@plt+0x1a088>
   2c668:	add	r6, sl, r6
   2c66c:	add	r3, r6, #1776	; 0x6f0
   2c670:	ldrsb	r3, [r3]
   2c674:	cmp	r0, r3
   2c678:	beq	2c9c4 <__assert_fail@plt+0x1a3d0>
   2c67c:	add	r3, sl, r8
   2c680:	ldrb	lr, [r3, #2008]	; 0x7d8
   2c684:	cmp	lr, #0
   2c688:	beq	2c890 <__assert_fail@plt+0x1a29c>
   2c68c:	add	r3, sl, lr
   2c690:	add	r6, sp, #304	; 0x130
   2c694:	ldrb	r3, [r3, #2124]	; 0x84c
   2c698:	sub	r5, r6, #8
   2c69c:	mov	r8, r5
   2c6a0:	rsb	ip, r3, #1
   2c6a4:	str	r3, [sp, #108]	; 0x6c
   2c6a8:	rsb	ip, ip, ip, lsl #3
   2c6ac:	sub	r3, lr, #4
   2c6b0:	add	ip, r9, ip, lsl #3
   2c6b4:	str	r3, [sp, #120]	; 0x78
   2c6b8:	mov	r7, ip
   2c6bc:	ldr	r3, [ip, #8]
   2c6c0:	str	r5, [sp, #80]	; 0x50
   2c6c4:	str	r3, [sp, #84]	; 0x54
   2c6c8:	ldm	r7!, {r0, r1, r2, r3}
   2c6cc:	ldrd	r4, [ip, #16]
   2c6d0:	stmia	r8!, {r0, r1, r2, r3}
   2c6d4:	str	r3, [sp, #88]	; 0x58
   2c6d8:	ldm	r7!, {r0, r1, r2, r3}
   2c6dc:	strd	r4, [sp, #56]	; 0x38
   2c6e0:	stmia	r8!, {r0, r1, r2, r3}
   2c6e4:	ldm	r7!, {r0, r1, r2, r3}
   2c6e8:	stmia	r8!, {r0, r1, r2, r3}
   2c6ec:	ldr	r3, [ip, #24]
   2c6f0:	ldm	r7, {r0, r1}
   2c6f4:	str	r3, [sp, #96]	; 0x60
   2c6f8:	ldr	r3, [ip, #28]
   2c6fc:	ldr	r4, [sp, #120]	; 0x78
   2c700:	str	r3, [sp, #100]	; 0x64
   2c704:	ldr	r3, [ip, #32]
   2c708:	stm	r8, {r0, r1}
   2c70c:	str	r3, [sp, #92]	; 0x5c
   2c710:	ldrd	r2, [ip, #40]	; 0x28
   2c714:	ldr	r7, [ip, #36]	; 0x24
   2c718:	strd	r2, [sp, #72]	; 0x48
   2c71c:	ldr	r3, [ip, #48]	; 0x30
   2c720:	str	r3, [sp, #68]	; 0x44
   2c724:	cmp	r4, #87	; 0x57
   2c728:	ldrls	pc, [pc, r4, lsl #2]
   2c72c:	b	2ef24 <__assert_fail@plt+0x1c930>
   2c730:	strdeq	sp, [r2], -ip
   2c734:	andeq	lr, r2, r4, lsr #30
   2c738:	andeq	lr, r2, r4, lsr #30
   2c73c:	andeq	sp, r2, r8, lsl r9
   2c740:	andeq	sp, r2, r8, ror #17
   2c744:			; <UNDEFINED> instruction: 0x0002d8b8
   2c748:	andeq	sp, r2, r8, lsl #17
   2c74c:	andeq	sp, r2, r8, asr r8
   2c750:	andeq	sp, r2, r8, lsr #16
   2c754:	andeq	sp, r2, r8, lsl #16
   2c758:	andeq	sp, r2, r8, ror #15
   2c75c:	andeq	sp, r2, r8, asr #15
   2c760:	andeq	lr, r2, r4, lsr #30
   2c764:	andeq	lr, r2, r4, lsr #30
   2c768:	andeq	sp, r2, ip, lsl #15
   2c76c:	andeq	sp, r2, r4, asr r7
   2c770:	andeq	sp, r2, r4, lsl r7
   2c774:	andeq	lr, r2, r4, lsr #30
   2c778:	ldrdeq	sp, [r2], -r8
   2c77c:	andeq	sp, r2, r8, asr r6
   2c780:	andeq	sp, r2, r8, lsl r6
   2c784:	andeq	lr, r2, r4, lsr #30
   2c788:	andeq	lr, r2, r4, lsr #30
   2c78c:	muleq	r2, r0, r6
   2c790:	andeq	sp, r2, ip, lsl #28
   2c794:	andeq	sp, r2, r4, ror #27
   2c798:	andeq	sp, r2, r8, asr #27
   2c79c:	andeq	sp, r2, ip, lsr #27
   2c7a0:	andeq	sp, r2, r4, lsr sp
   2c7a4:	andeq	lr, r2, r8, ror r3
   2c7a8:	andeq	lr, r2, r4, lsl #6
   2c7ac:	strdeq	lr, [r2], -r8
   2c7b0:	ldrdeq	lr, [r2], -r8
   2c7b4:			; <UNDEFINED> instruction: 0x0002e2b0
   2c7b8:	andeq	lr, r2, r8, lsl #5
   2c7bc:	andeq	lr, r2, ip, asr r2
   2c7c0:	andeq	lr, r2, r0, lsr r2
   2c7c4:	andeq	lr, r2, r8, lsr r5
   2c7c8:	andeq	lr, r2, ip, ror #9
   2c7cc:	andeq	lr, r2, ip, asr #8
   2c7d0:	andeq	lr, r2, ip, ror #7
   2c7d4:	andeq	lr, r2, r8, asr #9
   2c7d8:	muleq	r2, r8, r4
   2c7dc:	andeq	sp, r2, ip, ror r3
   2c7e0:	andeq	sp, r2, r4, lsr r3
   2c7e4:	andeq	lr, r2, r4, lsr #30
   2c7e8:	andeq	sp, r2, ip, asr #5
   2c7ec:	andeq	sp, r2, r0, ror r2
   2c7f0:	andeq	sp, r2, r4, lsl r2
   2c7f4:			; <UNDEFINED> instruction: 0x0002d1b8
   2c7f8:	andeq	sp, r2, r8, asr r1
   2c7fc:	strdeq	sp, [r2], -r8
   2c800:	muleq	r2, r4, r0
   2c804:	andeq	sp, r2, r4, lsr r0
   2c808:	ldrdeq	ip, [r2], -r4
   2c80c:	andeq	ip, r2, r4, ror pc
   2c810:			; <UNDEFINED> instruction: 0x0002ceb0
   2c814:	andeq	sp, r2, r4, asr r5
   2c818:	andeq	sp, r2, r0, lsl #10
   2c81c:	andeq	sp, r2, r0, lsr #9
   2c820:	andeq	sp, r2, r0, asr #8
   2c824:	andeq	sp, r2, r0, lsr #7
   2c828:	andeq	lr, r2, ip, ror #3
   2c82c:	andeq	lr, r2, r8, lsr #3
   2c830:	andeq	lr, r2, r0, asr r1
   2c834:	andeq	lr, r2, r0, lsl #2
   2c838:	strheq	lr, [r2], -r0
   2c83c:	andeq	lr, r2, r8, asr r0
   2c840:	andeq	lr, r2, r0
   2c844:	andeq	sp, r2, ip, lsr #31
   2c848:	andeq	lr, r2, r4, lsr #30
   2c84c:	andeq	sp, r2, ip, asr #30
   2c850:	andeq	sp, r2, ip, ror #29
   2c854:	andeq	sp, r2, r8, lsr #28
   2c858:	andeq	sp, r2, r8, ror #24
   2c85c:	andeq	sp, r2, r0, lsl ip
   2c860:	andeq	sp, r2, r0, asr #23
   2c864:	andeq	sp, r2, ip, ror #22
   2c868:	andeq	lr, r2, r4, lsr #30
   2c86c:	andeq	lr, r2, r4, lsr #30
   2c870:	andeq	lr, r2, r4, lsr #30
   2c874:	andeq	sp, r2, r0, lsr fp
   2c878:	andeq	lr, r2, r4, lsr #30
   2c87c:	strdeq	sp, [r2], -r4
   2c880:	andeq	sp, r2, r8, asr #20
   2c884:	andeq	sp, r2, r4, asr r9
   2c888:	andeq	sp, r2, r0, ror #25
   2c88c:	andeq	sp, r2, r8, asr #25
   2c890:	ldr	r3, [sp, #104]	; 0x68
   2c894:	cmp	r3, #3
   2c898:	beq	2c9a8 <__assert_fail@plt+0x1a3b4>
   2c89c:	add	r1, sp, #200	; 0xc8
   2c8a0:	b	2c8b4 <__assert_fail@plt+0x1a2c0>
   2c8a4:	cmp	fp, r1
   2c8a8:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2c8ac:	ldrsh	r8, [fp, #-2]!
   2c8b0:	sub	r9, r9, #56	; 0x38
   2c8b4:	ldrsb	r3, [sl, r8]
   2c8b8:	cmn	r3, #93	; 0x5d
   2c8bc:	add	r2, r3, #1
   2c8c0:	beq	2c8a4 <__assert_fail@plt+0x1a2b0>
   2c8c4:	cmp	r2, #112	; 0x70
   2c8c8:	add	r3, sl, r2
   2c8cc:	bhi	2c8a4 <__assert_fail@plt+0x1a2b0>
   2c8d0:	ldrb	r2, [r3, #1776]	; 0x6f0
   2c8d4:	cmp	r2, #1
   2c8d8:	bne	2c8a4 <__assert_fail@plt+0x1a2b0>
   2c8dc:	ldrb	r8, [r3, #1892]	; 0x764
   2c8e0:	cmp	r8, #0
   2c8e4:	beq	2c8a4 <__assert_fail@plt+0x1a2b0>
   2c8e8:	ldr	r3, [sp, #124]	; 0x7c
   2c8ec:	add	r4, sp, #240	; 0xf0
   2c8f0:	str	r3, [sp, #256]	; 0x100
   2c8f4:	ldrd	r2, [sp, #112]	; 0x70
   2c8f8:	add	r9, r9, #56	; 0x38
   2c8fc:	mov	ip, r9
   2c900:	strd	r2, [sp, #248]	; 0xf8
   2c904:	ldm	r4!, {r0, r1, r2, r3}
   2c908:	mov	r5, #3
   2c90c:	mov	lr, fp
   2c910:	str	r5, [sp, #104]	; 0x68
   2c914:	stmia	ip!, {r0, r1, r2, r3}
   2c918:	ldm	r4!, {r0, r1, r2, r3}
   2c91c:	b	2ca14 <__assert_fail@plt+0x1a420>
   2c920:	ldr	r1, [sp, #64]	; 0x40
   2c924:	mov	r2, r4
   2c928:	mov	r3, r5
   2c92c:	strd	r2, [r1, #56]	; 0x38
   2c930:	mov	r0, #1
   2c934:	add	sp, sp, #1472	; 0x5c0
   2c938:	add	sp, sp, #4
   2c93c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c940:	mov	r2, r4
   2c944:	mov	r3, #0
   2c948:	ldr	r7, [pc, #2744]	; 2d408 <__assert_fail@plt+0x1ae14>
   2c94c:	mov	r4, r3
   2c950:	mov	r3, r6
   2c954:	mov	r6, r2
   2c958:	cmp	r4, #0
   2c95c:	blt	2e5cc <__assert_fail@plt+0x1bfd8>
   2c960:	cmp	r4, r7
   2c964:	bgt	2c984 <__assert_fail@plt+0x1a390>
   2c968:	add	r4, r4, r4, lsl #2
   2c96c:	rsbs	r1, r5, #48	; 0x30
   2c970:	rsb	r0, r1, #-2147483648	; 0x80000000
   2c974:	lsl	r4, r4, #1
   2c978:	beq	2e594 <__assert_fail@plt+0x1bfa0>
   2c97c:	cmp	r4, r0
   2c980:	bge	2e594 <__assert_fail@plt+0x1bfa0>
   2c984:	mov	r6, r3
   2c988:	mov	r3, #63	; 0x3f
   2c98c:	str	r3, [sp, #52]	; 0x34
   2c990:	add	r3, sl, r3
   2c994:	ldrb	r0, [r3, #1496]	; 0x5d8
   2c998:	b	2c65c <__assert_fail@plt+0x1a068>
   2c99c:	mov	r0, #0
   2c9a0:	str	r0, [sp, #52]	; 0x34
   2c9a4:	b	2c65c <__assert_fail@plt+0x1a068>
   2c9a8:	ldr	r3, [sp, #52]	; 0x34
   2c9ac:	cmp	r3, #0
   2c9b0:	mvngt	r3, #1
   2c9b4:	strgt	r3, [sp, #52]	; 0x34
   2c9b8:	bgt	2c89c <__assert_fail@plt+0x1a2a8>
   2c9bc:	bne	2c89c <__assert_fail@plt+0x1a2a8>
   2c9c0:	b	2c930 <__assert_fail@plt+0x1a33c>
   2c9c4:	ldrb	r8, [r6, #1892]	; 0x764
   2c9c8:	cmp	r8, #0
   2c9cc:	beq	2cd68 <__assert_fail@plt+0x1a774>
   2c9d0:	ldr	r3, [sp, #104]	; 0x68
   2c9d4:	add	r4, sp, #240	; 0xf0
   2c9d8:	cmp	r3, #0
   2c9dc:	subne	r3, r3, #1
   2c9e0:	strne	r3, [sp, #104]	; 0x68
   2c9e4:	ldr	r3, [sp, #124]	; 0x7c
   2c9e8:	add	r9, r9, #56	; 0x38
   2c9ec:	str	r3, [sp, #256]	; 0x100
   2c9f0:	ldrd	r2, [sp, #112]	; 0x70
   2c9f4:	mov	ip, r9
   2c9f8:	mov	lr, fp
   2c9fc:	strd	r2, [sp, #248]	; 0xf8
   2ca00:	ldm	r4!, {r0, r1, r2, r3}
   2ca04:	mvn	r5, #1
   2ca08:	str	r5, [sp, #52]	; 0x34
   2ca0c:	stmia	ip!, {r0, r1, r2, r3}
   2ca10:	ldm	r4!, {r0, r1, r2, r3}
   2ca14:	stmia	ip!, {r0, r1, r2, r3}
   2ca18:	ldm	r4!, {r0, r1, r2, r3}
   2ca1c:	stmia	ip!, {r0, r1, r2, r3}
   2ca20:	ldm	r4, {r0, r1}
   2ca24:	stm	ip, {r0, r1}
   2ca28:	add	fp, lr, #2
   2ca2c:	add	r3, sp, #238	; 0xee
   2ca30:	cmp	fp, r3
   2ca34:	strh	r8, [lr, #2]
   2ca38:	bcs	2e604 <__assert_fail@plt+0x1c010>
   2ca3c:	cmp	r8, #12
   2ca40:	beq	2e5fc <__assert_fail@plt+0x1c008>
   2ca44:	ldrsb	r6, [sl, r8]
   2ca48:	b	2c628 <__assert_fail@plt+0x1a034>
   2ca4c:	ldr	ip, [sp, #64]	; 0x40
   2ca50:	ldr	r2, [pc, #2484]	; 2d40c <__assert_fail@plt+0x1ae18>
   2ca54:	mov	r3, #1
   2ca58:	ldr	r4, [ip]
   2ca5c:	mov	r1, #0
   2ca60:	ldrb	r5, [r4]
   2ca64:	sub	r0, r5, #9
   2ca68:	cmp	r0, #23
   2ca6c:	bhi	2ca78 <__assert_fail@plt+0x1a484>
   2ca70:	ands	r0, r2, r3, lsl r0
   2ca74:	bne	2cafc <__assert_fail@plt+0x1a508>
   2ca78:	sub	r7, r5, #48	; 0x30
   2ca7c:	cmp	r7, #9
   2ca80:	bls	2cb20 <__assert_fail@plt+0x1a52c>
   2ca84:	sub	r0, r5, #43	; 0x2b
   2ca88:	tst	r0, #253	; 0xfd
   2ca8c:	beq	2cd50 <__assert_fail@plt+0x1a75c>
   2ca90:	cmp	r5, #65	; 0x41
   2ca94:	bcc	2caac <__assert_fail@plt+0x1a4b8>
   2ca98:	cmp	r5, #90	; 0x5a
   2ca9c:	bls	2e6d8 <__assert_fail@plt+0x1c0e4>
   2caa0:	sub	r0, r5, #97	; 0x61
   2caa4:	cmp	r0, #25
   2caa8:	bls	2e6d8 <__assert_fail@plt+0x1c0e4>
   2caac:	cmp	r5, #40	; 0x28
   2cab0:	bne	2ec00 <__assert_fail@plt+0x1c60c>
   2cab4:	mov	r5, #0
   2cab8:	b	2cac0 <__assert_fail@plt+0x1a4cc>
   2cabc:	mov	r4, lr
   2cac0:	add	lr, r4, #1
   2cac4:	str	lr, [ip]
   2cac8:	ldrb	r0, [lr, #-1]
   2cacc:	cmp	r0, #0
   2cad0:	beq	2c9a0 <__assert_fail@plt+0x1a3ac>
   2cad4:	cmp	r0, #40	; 0x28
   2cad8:	addeq	r5, r5, #1
   2cadc:	beq	2cae8 <__assert_fail@plt+0x1a4f4>
   2cae0:	cmp	r0, #41	; 0x29
   2cae4:	subeq	r5, r5, #1
   2cae8:	cmp	r5, #0
   2caec:	bne	2cabc <__assert_fail@plt+0x1a4c8>
   2caf0:	ldrb	r5, [r4, #1]
   2caf4:	mov	r4, lr
   2caf8:	b	2ca64 <__assert_fail@plt+0x1a470>
   2cafc:	add	r4, r4, #1
   2cb00:	str	r4, [ip]
   2cb04:	ldrb	r5, [r4]
   2cb08:	sub	r0, r5, #9
   2cb0c:	cmp	r0, #23
   2cb10:	bls	2ca70 <__assert_fail@plt+0x1a47c>
   2cb14:	sub	r7, r5, #48	; 0x30
   2cb18:	cmp	r7, #9
   2cb1c:	bhi	2ca84 <__assert_fail@plt+0x1a490>
   2cb20:	sub	r5, r5, #43	; 0x2b
   2cb24:	tst	r5, #253	; 0xfd
   2cb28:	bne	2e798 <__assert_fail@plt+0x1c1a4>
   2cb2c:	mov	r0, r1
   2cb30:	mov	lr, r3
   2cb34:	add	r4, r4, #1
   2cb38:	str	r4, [ip]
   2cb3c:	ldrb	r5, [r4]
   2cb40:	sub	r7, r5, #9
   2cb44:	cmp	r7, #23
   2cb48:	bhi	2cb54 <__assert_fail@plt+0x1a560>
   2cb4c:	ands	r7, r2, r3, lsl r7
   2cb50:	bne	2cb34 <__assert_fail@plt+0x1a540>
   2cb54:	sub	r7, r5, #48	; 0x30
   2cb58:	cmp	r7, #9
   2cb5c:	bhi	2ca64 <__assert_fail@plt+0x1a470>
   2cb60:	cmn	lr, #1
   2cb64:	str	r0, [sp, #56]	; 0x38
   2cb68:	str	lr, [sp, #52]	; 0x34
   2cb6c:	beq	2c940 <__assert_fail@plt+0x1a34c>
   2cb70:	mov	r3, #0
   2cb74:	mov	r2, r4
   2cb78:	mov	r5, r3
   2cb7c:	cmp	r5, #0
   2cb80:	blt	2e564 <__assert_fail@plt+0x1bf70>
   2cb84:	ldr	r3, [pc, #2172]	; 2d408 <__assert_fail@plt+0x1ae14>
   2cb88:	cmp	r5, r3
   2cb8c:	bgt	2c988 <__assert_fail@plt+0x1a394>
   2cb90:	add	r5, r5, r5, lsl #2
   2cb94:	lsl	r3, r5, #1
   2cb98:	cmp	r3, #0
   2cb9c:	blt	2cbb0 <__assert_fail@plt+0x1a5bc>
   2cba0:	mvn	r1, #-2147483648	; 0x80000000
   2cba4:	sub	r1, r1, r7
   2cba8:	cmp	r1, r3
   2cbac:	blt	2c988 <__assert_fail@plt+0x1a394>
   2cbb0:	ldrb	r1, [r4, #1]
   2cbb4:	add	r5, r7, r3
   2cbb8:	add	r0, r4, #1
   2cbbc:	sub	r7, r1, #48	; 0x30
   2cbc0:	cmp	r7, #9
   2cbc4:	bls	2e55c <__assert_fail@plt+0x1bf68>
   2cbc8:	mov	ip, r4
   2cbcc:	mov	r3, r5
   2cbd0:	mov	r4, r2
   2cbd4:	mov	r5, r1
   2cbd8:	mov	r2, ip
   2cbdc:	and	r5, r5, #253	; 0xfd
   2cbe0:	cmp	r5, #44	; 0x2c
   2cbe4:	bne	2e7a8 <__assert_fail@plt+0x1c1b4>
   2cbe8:	ldrb	r1, [r0, #1]
   2cbec:	sub	r1, r1, #48	; 0x30
   2cbf0:	cmp	r1, #9
   2cbf4:	bhi	2e7a8 <__assert_fail@plt+0x1c1b4>
   2cbf8:	ldrb	r4, [r0, #2]
   2cbfc:	add	r1, r1, r1, lsl #2
   2cc00:	add	ip, r0, #2
   2cc04:	sub	lr, r4, #48	; 0x30
   2cc08:	cmp	lr, #9
   2cc0c:	lsl	r1, r1, #1
   2cc10:	ldrbls	r4, [r2, #4]
   2cc14:	addls	r1, r1, lr
   2cc18:	addls	ip, r0, #3
   2cc1c:	subls	lr, r4, #48	; 0x30
   2cc20:	add	r1, r1, r1, lsl #2
   2cc24:	cmp	lr, #9
   2cc28:	lsl	r2, r1, #1
   2cc2c:	ldrbls	r4, [ip, #1]
   2cc30:	addls	r2, r2, lr
   2cc34:	addls	ip, ip, #1
   2cc38:	subls	lr, r4, #48	; 0x30
   2cc3c:	add	r2, r2, r2, lsl #2
   2cc40:	cmp	lr, #9
   2cc44:	lsl	r2, r2, #1
   2cc48:	ldrbls	r4, [ip, #1]
   2cc4c:	addls	r2, r2, lr
   2cc50:	addls	ip, ip, #1
   2cc54:	subls	lr, r4, #48	; 0x30
   2cc58:	add	r2, r2, r2, lsl #2
   2cc5c:	cmp	lr, #9
   2cc60:	lsl	r2, r2, #1
   2cc64:	ldrbls	r4, [ip, #1]
   2cc68:	addls	r2, r2, lr
   2cc6c:	addls	ip, ip, #1
   2cc70:	subls	lr, r4, #48	; 0x30
   2cc74:	add	r2, r2, r2, lsl #2
   2cc78:	cmp	lr, #9
   2cc7c:	lsl	r2, r2, #1
   2cc80:	ldrbls	r4, [ip, #1]
   2cc84:	addls	r2, r2, lr
   2cc88:	addls	ip, ip, #1
   2cc8c:	subls	lr, r4, #48	; 0x30
   2cc90:	add	r2, r2, r2, lsl #2
   2cc94:	cmp	lr, #9
   2cc98:	lsl	r2, r2, #1
   2cc9c:	ldrbls	r4, [ip, #1]
   2cca0:	addls	r2, r2, lr
   2cca4:	addls	ip, ip, #1
   2cca8:	subls	lr, r4, #48	; 0x30
   2ccac:	add	r2, r2, r2, lsl #2
   2ccb0:	cmp	lr, #9
   2ccb4:	lsl	r2, r2, #1
   2ccb8:	ldrbls	r4, [ip, #1]
   2ccbc:	addls	r2, r2, lr
   2ccc0:	addls	ip, ip, #1
   2ccc4:	subls	lr, r4, #48	; 0x30
   2ccc8:	add	r2, r2, r2, lsl #2
   2cccc:	cmp	lr, #9
   2ccd0:	lsl	r2, r2, #1
   2ccd4:	ldrbls	r4, [ip, #1]
   2ccd8:	addls	r2, r2, lr
   2ccdc:	addls	ip, ip, #1
   2cce0:	ldr	r1, [sp, #52]	; 0x34
   2cce4:	cmn	r1, #1
   2cce8:	beq	2ef6c <__assert_fail@plt+0x1c978>
   2ccec:	mov	r1, ip
   2ccf0:	add	ip, ip, #1
   2ccf4:	ldrb	r0, [r1]
   2ccf8:	sub	r0, r0, #48	; 0x30
   2ccfc:	cmp	r0, #9
   2cd00:	bls	2ccec <__assert_fail@plt+0x1a6f8>
   2cd04:	ldr	r0, [sp, #56]	; 0x38
   2cd08:	cmp	r2, #0
   2cd0c:	moveq	r0, #0
   2cd10:	andne	r0, r0, #1
   2cd14:	cmp	r0, #0
   2cd18:	beq	2ef34 <__assert_fail@plt+0x1c940>
   2cd1c:	cmp	r3, #-2147483648	; 0x80000000
   2cd20:	beq	2ee8c <__assert_fail@plt+0x1c898>
   2cd24:	sub	r3, r3, #1
   2cd28:	str	r3, [sp, #240]	; 0xf0
   2cd2c:	ldr	r3, [sp, #64]	; 0x40
   2cd30:	ldr	r0, [pc, #1752]	; 2d410 <__assert_fail@plt+0x1ae1c>
   2cd34:	str	r1, [r3]
   2cd38:	sub	r0, r0, r2
   2cd3c:	mov	r3, #276	; 0x114
   2cd40:	str	r0, [sp, #244]	; 0xf4
   2cd44:	str	r3, [sp, #52]	; 0x34
   2cd48:	mov	r0, #21
   2cd4c:	b	2c65c <__assert_fail@plt+0x1a068>
   2cd50:	cmp	r5, #45	; 0x2d
   2cd54:	moveq	r0, #1
   2cd58:	movne	r0, #0
   2cd5c:	mvneq	lr, #0
   2cd60:	movne	lr, #1
   2cd64:	b	2cb34 <__assert_fail@plt+0x1a540>
   2cd68:	add	lr, r9, #56	; 0x38
   2cd6c:	add	r6, sp, #304	; 0x130
   2cd70:	ldm	lr!, {r0, r1, r2, r3}
   2cd74:	sub	ip, r6, #8
   2cd78:	ldr	r4, [r9, #64]	; 0x40
   2cd7c:	str	ip, [sp, #80]	; 0x50
   2cd80:	stmia	ip!, {r0, r1, r2, r3}
   2cd84:	ldm	lr!, {r0, r1, r2, r3}
   2cd88:	str	r4, [sp, #84]	; 0x54
   2cd8c:	ldr	r4, [r9, #68]	; 0x44
   2cd90:	stmia	ip!, {r0, r1, r2, r3}
   2cd94:	str	r4, [sp, #88]	; 0x58
   2cd98:	ldrd	r4, [r9, #72]	; 0x48
   2cd9c:	ldm	lr!, {r0, r1, r2, r3}
   2cda0:	strd	r4, [sp, #56]	; 0x38
   2cda4:	ldr	r4, [r9, #80]	; 0x50
   2cda8:	str	r8, [sp, #108]	; 0x6c
   2cdac:	str	r4, [sp, #96]	; 0x60
   2cdb0:	stmia	ip!, {r0, r1, r2, r3}
   2cdb4:	ldr	r3, [r9, #84]	; 0x54
   2cdb8:	ldm	lr, {r0, r1}
   2cdbc:	str	r3, [sp, #100]	; 0x64
   2cdc0:	ldr	r3, [r9, #88]	; 0x58
   2cdc4:	stm	ip, {r0, r1}
   2cdc8:	str	r3, [sp, #92]	; 0x5c
   2cdcc:	ldrd	r2, [r9, #96]	; 0x60
   2cdd0:	ldr	r7, [r9, #92]	; 0x5c
   2cdd4:	ldrd	r0, [sp, #56]	; 0x38
   2cdd8:	strd	r2, [sp, #72]	; 0x48
   2cddc:	ldr	r2, [sp, #84]	; 0x54
   2cde0:	ldr	r3, [r9, #104]	; 0x68
   2cde4:	str	r3, [sp, #68]	; 0x44
   2cde8:	str	r2, [r6]
   2cdec:	ldr	r2, [sp, #88]	; 0x58
   2cdf0:	ldrsh	lr, [sp, #108]	; 0x6c
   2cdf4:	str	r2, [r6, #4]
   2cdf8:	ldr	r2, [sp, #96]	; 0x60
   2cdfc:	strd	r0, [r6, #8]
   2ce00:	str	r2, [r6, #16]
   2ce04:	ldr	r2, [sp, #100]	; 0x64
   2ce08:	ldrd	r0, [sp, #72]	; 0x48
   2ce0c:	str	r2, [r6, #20]
   2ce10:	ldr	r2, [sp, #92]	; 0x5c
   2ce14:	ldr	ip, [sp, #80]	; 0x50
   2ce18:	str	r2, [r6, #24]
   2ce1c:	rsb	r3, lr, lr, lsl #3
   2ce20:	ldr	r2, [sp, #68]	; 0x44
   2ce24:	str	r7, [r6, #28]
   2ce28:	strd	r0, [r6, #32]
   2ce2c:	str	r2, [sp, #344]	; 0x158
   2ce30:	sub	r9, r9, r3, lsl #3
   2ce34:	ldm	ip!, {r0, r1, r2, r3}
   2ce38:	add	r9, r9, #56	; 0x38
   2ce3c:	mov	r4, r9
   2ce40:	add	r8, sl, r8
   2ce44:	stmia	r4!, {r0, r1, r2, r3}
   2ce48:	sub	lr, fp, lr, lsl #1
   2ce4c:	ldm	ip!, {r0, r1, r2, r3}
   2ce50:	stmia	r4!, {r0, r1, r2, r3}
   2ce54:	ldm	ip!, {r0, r1, r2, r3}
   2ce58:	ldrsh	r5, [lr]
   2ce5c:	stmia	r4!, {r0, r1, r2, r3}
   2ce60:	ldrb	r3, [r8, #2216]	; 0x8a8
   2ce64:	ldm	ip, {r0, r1}
   2ce68:	sub	r3, r3, #28
   2ce6c:	add	r2, sl, r3
   2ce70:	add	r2, r2, #2304	; 0x900
   2ce74:	stm	r4, {r0, r1}
   2ce78:	ldrsb	r2, [r2, #4]
   2ce7c:	add	r2, r2, r5
   2ce80:	cmp	r2, #112	; 0x70
   2ce84:	bhi	2cea0 <__assert_fail@plt+0x1a8ac>
   2ce88:	add	r2, sl, r2
   2ce8c:	add	r1, r2, #1776	; 0x6f0
   2ce90:	ldrsb	r1, [r1]
   2ce94:	cmp	r1, r5
   2ce98:	ldrbeq	r8, [r2, #1892]	; 0x764
   2ce9c:	beq	2ca28 <__assert_fail@plt+0x1a434>
   2cea0:	add	r3, sl, r3
   2cea4:	add	r3, r3, #2336	; 0x920
   2cea8:	ldrsb	r8, [r3]
   2ceac:	b	2ca28 <__assert_fail@plt+0x1a434>
   2ceb0:	mov	r2, #56	; 0x38
   2ceb4:	mov	r1, #0
   2ceb8:	ldr	r0, [sp, #80]	; 0x50
   2cebc:	bl	12378 <memset@plt>
   2cec0:	ldrd	r2, [r9]
   2cec4:	cmp	r2, #0
   2cec8:	strd	r2, [sp, #56]	; 0x38
   2cecc:	sbcs	r3, r3, #0
   2ced0:	blt	2ea0c <__assert_fail@plt+0x1c418>
   2ced4:	ldrd	r2, [sp, #56]	; 0x38
   2ced8:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   2cedc:	orrs	r3, r2, r3
   2cee0:	beq	2cf18 <__assert_fail@plt+0x1a924>
   2cee4:	cmp	r4, #0
   2cee8:	sbcs	r3, r5, #0
   2ceec:	blt	2eae8 <__assert_fail@plt+0x1c4f4>
   2cef0:	ldrd	r2, [sp, #56]	; 0x38
   2cef4:	mvn	r0, #0
   2cef8:	mvn	r1, #-2147483648	; 0x80000000
   2cefc:	bl	4db88 <__assert_fail@plt+0x3b594>
   2cf00:	cmp	r0, r4
   2cf04:	sbcs	r3, r1, r5
   2cf08:	movlt	r3, #1
   2cf0c:	movge	r3, #0
   2cf10:	cmp	r3, #0
   2cf14:	bne	2c930 <__assert_fail@plt+0x1a33c>
   2cf18:	ldrd	r0, [sp, #56]	; 0x38
   2cf1c:	mov	r8, #60	; 0x3c
   2cf20:	umull	r2, r3, r4, r0
   2cf24:	mul	ip, r4, r1
   2cf28:	strd	r2, [sp, #56]	; 0x38
   2cf2c:	mla	r3, r0, r5, ip
   2cf30:	ldr	r2, [sp, #60]	; 0x3c
   2cf34:	mov	r0, #0
   2cf38:	mov	r1, #0
   2cf3c:	add	r3, r3, r2
   2cf40:	str	r3, [sp, #60]	; 0x3c
   2cf44:	str	r0, [sp, #84]	; 0x54
   2cf48:	mov	r3, #0
   2cf4c:	strd	r0, [sp, #72]	; 0x48
   2cf50:	str	r0, [sp, #92]	; 0x5c
   2cf54:	mov	r7, r1
   2cf58:	str	r0, [sp, #96]	; 0x60
   2cf5c:	str	r1, [sp, #100]	; 0x64
   2cf60:	str	r1, [sp, #88]	; 0x58
   2cf64:	str	r3, [sp, #68]	; 0x44
   2cf68:	ldr	r2, [sp, #84]	; 0x54
   2cf6c:	ldrd	r0, [sp, #56]	; 0x38
   2cf70:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2cf74:	mov	r4, #0
   2cf78:	mov	r5, #0
   2cf7c:	mov	r2, #56	; 0x38
   2cf80:	mov	r1, #0
   2cf84:	ldr	r0, [sp, #80]	; 0x50
   2cf88:	strd	r4, [sp, #72]	; 0x48
   2cf8c:	bl	12378 <memset@plt>
   2cf90:	mov	r2, r4
   2cf94:	mov	r3, r5
   2cf98:	str	r4, [sp, #92]	; 0x5c
   2cf9c:	strd	r2, [sp, #56]	; 0x38
   2cfa0:	mov	r3, #0
   2cfa4:	str	r3, [sp, #68]	; 0x44
   2cfa8:	mov	r3, #1
   2cfac:	str	r3, [sp, #84]	; 0x54
   2cfb0:	mov	r3, #0
   2cfb4:	mov	r7, r5
   2cfb8:	str	r4, [sp, #96]	; 0x60
   2cfbc:	str	r5, [sp, #100]	; 0x64
   2cfc0:	mov	r8, #59	; 0x3b
   2cfc4:	str	r3, [sp, #88]	; 0x58
   2cfc8:	ldr	r2, [sp, #84]	; 0x54
   2cfcc:	ldrd	r0, [sp, #56]	; 0x38
   2cfd0:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2cfd4:	mov	r4, #0
   2cfd8:	mov	r5, #0
   2cfdc:	mov	r2, #56	; 0x38
   2cfe0:	mov	r1, #0
   2cfe4:	ldr	r0, [sp, #80]	; 0x50
   2cfe8:	strd	r4, [sp, #72]	; 0x48
   2cfec:	bl	12378 <memset@plt>
   2cff0:	mov	r2, r4
   2cff4:	mov	r3, r5
   2cff8:	str	r4, [sp, #92]	; 0x5c
   2cffc:	strd	r2, [sp, #56]	; 0x38
   2d000:	ldr	r3, [r9, #-48]	; 0xffffffd0
   2d004:	mov	r7, r5
   2d008:	str	r3, [sp, #84]	; 0x54
   2d00c:	ldr	r3, [r9, #-44]	; 0xffffffd4
   2d010:	str	r4, [sp, #96]	; 0x60
   2d014:	str	r3, [sp, #88]	; 0x58
   2d018:	mov	r3, #0
   2d01c:	str	r5, [sp, #100]	; 0x64
   2d020:	mov	r8, #58	; 0x3a
   2d024:	str	r3, [sp, #68]	; 0x44
   2d028:	ldr	r2, [sp, #84]	; 0x54
   2d02c:	ldrd	r0, [sp, #56]	; 0x38
   2d030:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d034:	mov	r4, #0
   2d038:	mov	r5, #0
   2d03c:	mov	r2, #56	; 0x38
   2d040:	mov	r1, #0
   2d044:	ldr	r0, [sp, #80]	; 0x50
   2d048:	strd	r4, [sp, #72]	; 0x48
   2d04c:	bl	12378 <memset@plt>
   2d050:	mov	r2, r4
   2d054:	mov	r3, r5
   2d058:	str	r4, [sp, #92]	; 0x5c
   2d05c:	strd	r2, [sp, #56]	; 0x38
   2d060:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2d064:	mov	r7, r5
   2d068:	str	r3, [sp, #84]	; 0x54
   2d06c:	ldr	r3, [r9, #-52]	; 0xffffffcc
   2d070:	str	r4, [sp, #96]	; 0x60
   2d074:	str	r3, [sp, #88]	; 0x58
   2d078:	mov	r3, #0
   2d07c:	str	r5, [sp, #100]	; 0x64
   2d080:	mov	r8, #57	; 0x39
   2d084:	str	r3, [sp, #68]	; 0x44
   2d088:	ldr	r2, [sp, #84]	; 0x54
   2d08c:	ldrd	r0, [sp, #56]	; 0x38
   2d090:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d094:	mov	r2, #56	; 0x38
   2d098:	mov	r1, #0
   2d09c:	ldr	r0, [sp, #80]	; 0x50
   2d0a0:	bl	12378 <memset@plt>
   2d0a4:	mov	r2, #1
   2d0a8:	mov	r3, #0
   2d0ac:	mov	r0, #0
   2d0b0:	mov	r1, #0
   2d0b4:	strd	r2, [r6, #-8]
   2d0b8:	mov	r3, r1
   2d0bc:	mov	r2, r0
   2d0c0:	str	r3, [sp, #100]	; 0x64
   2d0c4:	strd	r2, [sp, #56]	; 0x38
   2d0c8:	str	r3, [sp, #88]	; 0x58
   2d0cc:	mov	r3, #0
   2d0d0:	strd	r0, [sp, #72]	; 0x48
   2d0d4:	str	r0, [sp, #92]	; 0x5c
   2d0d8:	mov	r7, r1
   2d0dc:	str	r0, [sp, #96]	; 0x60
   2d0e0:	str	r0, [sp, #84]	; 0x54
   2d0e4:	mov	r2, r0
   2d0e8:	mov	r8, #56	; 0x38
   2d0ec:	str	r3, [sp, #68]	; 0x44
   2d0f0:	ldrd	r0, [sp, #56]	; 0x38
   2d0f4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d0f8:	mov	r2, #56	; 0x38
   2d0fc:	mov	r1, #0
   2d100:	ldr	r0, [sp, #80]	; 0x50
   2d104:	bl	12378 <memset@plt>
   2d108:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2d10c:	mov	r0, #0
   2d110:	mov	r1, #0
   2d114:	strd	r2, [r6, #-8]
   2d118:	mov	r2, r0
   2d11c:	mov	r3, r1
   2d120:	mov	r7, r1
   2d124:	strd	r2, [sp, #56]	; 0x38
   2d128:	mov	r3, #0
   2d12c:	strd	r0, [sp, #72]	; 0x48
   2d130:	str	r0, [sp, #92]	; 0x5c
   2d134:	str	r0, [sp, #96]	; 0x60
   2d138:	str	r0, [sp, #84]	; 0x54
   2d13c:	mov	r2, r0
   2d140:	str	r7, [sp, #100]	; 0x64
   2d144:	str	r7, [sp, #88]	; 0x58
   2d148:	mov	r8, #55	; 0x37
   2d14c:	str	r3, [sp, #68]	; 0x44
   2d150:	ldrd	r0, [sp, #56]	; 0x38
   2d154:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d158:	mov	r2, #56	; 0x38
   2d15c:	mov	r1, #0
   2d160:	ldr	r0, [sp, #80]	; 0x50
   2d164:	bl	12378 <memset@plt>
   2d168:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   2d16c:	mov	r0, #0
   2d170:	mov	r1, #0
   2d174:	strd	r2, [r6, #-8]
   2d178:	mov	r2, r0
   2d17c:	mov	r3, r1
   2d180:	mov	r7, r1
   2d184:	strd	r2, [sp, #56]	; 0x38
   2d188:	mov	r3, #0
   2d18c:	strd	r0, [sp, #72]	; 0x48
   2d190:	str	r0, [sp, #92]	; 0x5c
   2d194:	str	r0, [sp, #96]	; 0x60
   2d198:	str	r0, [sp, #84]	; 0x54
   2d19c:	mov	r2, r0
   2d1a0:	str	r7, [sp, #100]	; 0x64
   2d1a4:	str	r7, [sp, #88]	; 0x58
   2d1a8:	mov	r8, #54	; 0x36
   2d1ac:	str	r3, [sp, #68]	; 0x44
   2d1b0:	ldrd	r0, [sp, #56]	; 0x38
   2d1b4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d1b8:	mov	r1, #1
   2d1bc:	ldrd	r2, [r9]
   2d1c0:	str	r1, [sp, #44]	; 0x2c
   2d1c4:	ldr	r1, [r9, #48]	; 0x30
   2d1c8:	ldr	r0, [sp, #64]	; 0x40
   2d1cc:	str	r1, [sp, #40]	; 0x28
   2d1d0:	ldrd	r4, [r9, #40]	; 0x28
   2d1d4:	strd	r4, [sp, #32]
   2d1d8:	ldrd	r4, [r9, #32]
   2d1dc:	strd	r4, [sp, #24]
   2d1e0:	ldrd	r4, [r9, #24]
   2d1e4:	strd	r4, [sp, #16]
   2d1e8:	ldrd	r4, [r9, #16]
   2d1ec:	strd	r4, [sp, #8]
   2d1f0:	ldrd	r4, [r9, #8]
   2d1f4:	strd	r4, [sp]
   2d1f8:	bl	2bc18 <__assert_fail@plt+0x19624>
   2d1fc:	cmp	r0, #0
   2d200:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2d204:	mov	r8, #53	; 0x35
   2d208:	ldr	r2, [sp, #84]	; 0x54
   2d20c:	ldrd	r0, [sp, #56]	; 0x38
   2d210:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d214:	mov	r1, #1
   2d218:	ldrd	r2, [r9]
   2d21c:	str	r1, [sp, #44]	; 0x2c
   2d220:	ldr	r1, [r9, #48]	; 0x30
   2d224:	ldr	r0, [sp, #64]	; 0x40
   2d228:	str	r1, [sp, #40]	; 0x28
   2d22c:	ldrd	r4, [r9, #40]	; 0x28
   2d230:	strd	r4, [sp, #32]
   2d234:	ldrd	r4, [r9, #32]
   2d238:	strd	r4, [sp, #24]
   2d23c:	ldrd	r4, [r9, #24]
   2d240:	strd	r4, [sp, #16]
   2d244:	ldrd	r4, [r9, #16]
   2d248:	strd	r4, [sp, #8]
   2d24c:	ldrd	r4, [r9, #8]
   2d250:	strd	r4, [sp]
   2d254:	bl	2bc18 <__assert_fail@plt+0x19624>
   2d258:	cmp	r0, #0
   2d25c:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2d260:	mov	r8, #52	; 0x34
   2d264:	ldr	r2, [sp, #84]	; 0x54
   2d268:	ldrd	r0, [sp, #56]	; 0x38
   2d26c:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d270:	ldr	r1, [r9]
   2d274:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   2d278:	str	r1, [sp, #44]	; 0x2c
   2d27c:	ldr	r1, [r9, #-8]
   2d280:	ldr	r0, [sp, #64]	; 0x40
   2d284:	str	r1, [sp, #40]	; 0x28
   2d288:	ldrd	r4, [r9, #-16]
   2d28c:	strd	r4, [sp, #32]
   2d290:	ldrd	r4, [r9, #-24]	; 0xffffffe8
   2d294:	strd	r4, [sp, #24]
   2d298:	ldrd	r4, [r9, #-32]	; 0xffffffe0
   2d29c:	strd	r4, [sp, #16]
   2d2a0:	ldrd	r4, [r9, #-40]	; 0xffffffd8
   2d2a4:	strd	r4, [sp, #8]
   2d2a8:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   2d2ac:	strd	r4, [sp]
   2d2b0:	bl	2bc18 <__assert_fail@plt+0x19624>
   2d2b4:	cmp	r0, #0
   2d2b8:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2d2bc:	mov	r8, #51	; 0x33
   2d2c0:	ldr	r2, [sp, #84]	; 0x54
   2d2c4:	ldrd	r0, [sp, #56]	; 0x38
   2d2c8:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d2cc:	ldr	r3, [sp, #64]	; 0x40
   2d2d0:	sub	lr, r9, #112	; 0x70
   2d2d4:	add	ip, r3, #32
   2d2d8:	ldm	lr!, {r0, r1, r2, r3}
   2d2dc:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   2d2e0:	stmia	ip!, {r0, r1, r2, r3}
   2d2e4:	cmp	r5, #-2147483648	; 0x80000000
   2d2e8:	ldm	lr, {r0, r1}
   2d2ec:	cmpeq	r4, #0
   2d2f0:	stm	ip, {r0, r1}
   2d2f4:	beq	2c920 <__assert_fail@plt+0x1a32c>
   2d2f8:	ldrd	r2, [r9, #8]
   2d2fc:	rsbs	r0, r4, #0
   2d300:	ldr	ip, [sp, #64]	; 0x40
   2d304:	rsc	r1, r5, #0
   2d308:	cmp	r3, #-2147483648	; 0x80000000
   2d30c:	cmpeq	r2, #0
   2d310:	strd	r0, [ip, #56]	; 0x38
   2d314:	beq	2ea80 <__assert_fail@plt+0x1c48c>
   2d318:	rsbs	r2, r2, #0
   2d31c:	rsc	r3, r3, #0
   2d320:	mov	r8, #50	; 0x32
   2d324:	strd	r2, [ip, #64]	; 0x40
   2d328:	ldrd	r0, [sp, #56]	; 0x38
   2d32c:	ldr	r2, [sp, #84]	; 0x54
   2d330:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d334:	ldr	r4, [sp, #64]	; 0x40
   2d338:	mov	lr, r9
   2d33c:	add	ip, r4, #32
   2d340:	str	ip, [sp, #120]	; 0x78
   2d344:	mov	ip, r4
   2d348:	ldrd	r4, [r9, #-104]	; 0xffffff98
   2d34c:	ldm	lr!, {r0, r1, r2, r3}
   2d350:	mov	r8, #48	; 0x30
   2d354:	strd	r4, [ip, #64]	; 0x40
   2d358:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   2d35c:	strd	r4, [ip, #56]	; 0x38
   2d360:	ldr	ip, [sp, #120]	; 0x78
   2d364:	stmia	ip!, {r0, r1, r2, r3}
   2d368:	ldm	lr, {r0, r1}
   2d36c:	ldr	r2, [sp, #84]	; 0x54
   2d370:	stm	ip, {r0, r1}
   2d374:	ldrd	r0, [sp, #56]	; 0x38
   2d378:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d37c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2d380:	ldrd	r0, [r9]
   2d384:	ldr	ip, [sp, #64]	; 0x40
   2d388:	mov	r8, #47	; 0x2f
   2d38c:	strd	r2, [ip, #64]	; 0x40
   2d390:	strd	r0, [ip, #56]	; 0x38
   2d394:	ldr	r2, [sp, #84]	; 0x54
   2d398:	ldrd	r0, [sp, #56]	; 0x38
   2d39c:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d3a0:	mov	r4, #0
   2d3a4:	mov	r5, #0
   2d3a8:	mov	r2, #56	; 0x38
   2d3ac:	mov	r1, #0
   2d3b0:	ldr	r0, [sp, #80]	; 0x50
   2d3b4:	strd	r4, [sp, #72]	; 0x48
   2d3b8:	bl	12378 <memset@plt>
   2d3bc:	mov	r2, r4
   2d3c0:	mov	r3, r5
   2d3c4:	str	r4, [sp, #92]	; 0x5c
   2d3c8:	strd	r2, [sp, #56]	; 0x38
   2d3cc:	mov	r3, #0
   2d3d0:	str	r3, [sp, #68]	; 0x44
   2d3d4:	mov	r3, #1
   2d3d8:	str	r3, [sp, #96]	; 0x60
   2d3dc:	mov	r3, #0
   2d3e0:	mov	r7, r5
   2d3e4:	str	r4, [sp, #84]	; 0x54
   2d3e8:	str	r5, [sp, #88]	; 0x58
   2d3ec:	mov	r8, #65	; 0x41
   2d3f0:	str	r3, [sp, #100]	; 0x64
   2d3f4:	mov	r2, r4
   2d3f8:	ldrd	r0, [sp, #56]	; 0x38
   2d3fc:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d400:	andeq	r2, r5, r8, ror r6
   2d404:	andeq	r0, r0, r5, lsl r1
   2d408:	stcleq	12, cr12, [ip], {204}	; 0xcc
   2d40c:	addeq	r0, r0, pc, lsl r0
   2d410:	blcc	fe6dfc18 <stdout@@GLIBC_2.4+0xfe67b6c4>
   2d414:	andeq	r3, r5, ip, asr r1
   2d418:	andeq	r3, r5, r4, asr r1
   2d41c:	andeq	r3, r5, r4, asr #2
   2d420:	andeq	r3, r5, ip, lsr r1
   2d424:	andeq	r3, r5, r4, lsr r1
   2d428:	andeq	r3, r5, r8, lsr #2
   2d42c:	andeq	r3, r5, r0, lsr #2
   2d430:	andeq	r3, r5, ip, lsl r1
   2d434:	andeq	r3, r5, r8, lsl #2
   2d438:	andeq	r3, r5, r8, asr #2
   2d43c:			; <UNDEFINED> instruction: 0xffff9d90
   2d440:	mov	r4, #0
   2d444:	mov	r5, #0
   2d448:	mov	r2, #56	; 0x38
   2d44c:	mov	r1, #0
   2d450:	ldr	r0, [sp, #80]	; 0x50
   2d454:	strd	r4, [sp, #72]	; 0x48
   2d458:	bl	12378 <memset@plt>
   2d45c:	mov	r2, r4
   2d460:	mov	r3, r5
   2d464:	str	r4, [sp, #92]	; 0x5c
   2d468:	strd	r2, [sp, #56]	; 0x38
   2d46c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   2d470:	mov	r7, r5
   2d474:	str	r3, [sp, #96]	; 0x60
   2d478:	ldr	r3, [r9, #-44]	; 0xffffffd4
   2d47c:	str	r4, [sp, #84]	; 0x54
   2d480:	str	r3, [sp, #100]	; 0x64
   2d484:	mov	r3, #0
   2d488:	str	r5, [sp, #88]	; 0x58
   2d48c:	mov	r8, #64	; 0x40
   2d490:	str	r3, [sp, #68]	; 0x44
   2d494:	mov	r2, r4
   2d498:	ldrd	r0, [sp, #56]	; 0x38
   2d49c:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d4a0:	mov	r4, #0
   2d4a4:	mov	r5, #0
   2d4a8:	mov	r2, #56	; 0x38
   2d4ac:	mov	r1, #0
   2d4b0:	ldr	r0, [sp, #80]	; 0x50
   2d4b4:	strd	r4, [sp, #72]	; 0x48
   2d4b8:	bl	12378 <memset@plt>
   2d4bc:	mov	r2, r4
   2d4c0:	mov	r3, r5
   2d4c4:	str	r4, [sp, #92]	; 0x5c
   2d4c8:	strd	r2, [sp, #56]	; 0x38
   2d4cc:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2d4d0:	mov	r7, r5
   2d4d4:	str	r3, [sp, #96]	; 0x60
   2d4d8:	ldr	r3, [r9, #-52]	; 0xffffffcc
   2d4dc:	str	r4, [sp, #84]	; 0x54
   2d4e0:	str	r3, [sp, #100]	; 0x64
   2d4e4:	mov	r3, #0
   2d4e8:	str	r5, [sp, #88]	; 0x58
   2d4ec:	mov	r8, #63	; 0x3f
   2d4f0:	str	r3, [sp, #68]	; 0x44
   2d4f4:	mov	r2, r4
   2d4f8:	ldrd	r0, [sp, #56]	; 0x38
   2d4fc:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d500:	mov	r4, #0
   2d504:	mov	r5, #0
   2d508:	mov	r2, #56	; 0x38
   2d50c:	mov	r1, #0
   2d510:	ldr	r0, [sp, #80]	; 0x50
   2d514:	strd	r4, [sp, #72]	; 0x48
   2d518:	bl	12378 <memset@plt>
   2d51c:	ldrd	r2, [r9]
   2d520:	str	r4, [sp, #92]	; 0x5c
   2d524:	mov	r7, r5
   2d528:	strd	r2, [sp, #56]	; 0x38
   2d52c:	mov	r3, #0
   2d530:	str	r4, [sp, #96]	; 0x60
   2d534:	str	r5, [sp, #100]	; 0x64
   2d538:	str	r4, [sp, #84]	; 0x54
   2d53c:	str	r5, [sp, #88]	; 0x58
   2d540:	mov	r8, #62	; 0x3e
   2d544:	str	r3, [sp, #68]	; 0x44
   2d548:	mov	r2, r4
   2d54c:	ldrd	r0, [sp, #56]	; 0x38
   2d550:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d554:	mov	r2, #56	; 0x38
   2d558:	mov	r1, #0
   2d55c:	ldr	r0, [sp, #80]	; 0x50
   2d560:	bl	12378 <memset@plt>
   2d564:	ldrd	r2, [r9]
   2d568:	cmp	r2, #0
   2d56c:	strd	r2, [sp, #56]	; 0x38
   2d570:	sbcs	r3, r3, #0
   2d574:	blt	2e864 <__assert_fail@plt+0x1c270>
   2d578:	ldrd	r2, [sp, #56]	; 0x38
   2d57c:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   2d580:	orrs	r3, r2, r3
   2d584:	beq	2d5bc <__assert_fail@plt+0x1afc8>
   2d588:	cmp	r4, #0
   2d58c:	sbcs	r3, r5, #0
   2d590:	blt	2ec68 <__assert_fail@plt+0x1c674>
   2d594:	ldrd	r2, [sp, #56]	; 0x38
   2d598:	mvn	r0, #0
   2d59c:	mvn	r1, #-2147483648	; 0x80000000
   2d5a0:	bl	4db88 <__assert_fail@plt+0x3b594>
   2d5a4:	cmp	r0, r4
   2d5a8:	sbcs	r3, r1, r5
   2d5ac:	movlt	r3, #1
   2d5b0:	movge	r3, #0
   2d5b4:	cmp	r3, #0
   2d5b8:	bne	2c930 <__assert_fail@plt+0x1a33c>
   2d5bc:	ldrd	r0, [sp, #56]	; 0x38
   2d5c0:	mov	r8, #61	; 0x3d
   2d5c4:	umull	r2, r3, r4, r0
   2d5c8:	mul	ip, r4, r1
   2d5cc:	strd	r2, [sp, #56]	; 0x38
   2d5d0:	mla	r3, r0, r5, ip
   2d5d4:	ldr	r2, [sp, #60]	; 0x3c
   2d5d8:	mov	r0, #0
   2d5dc:	mov	r1, #0
   2d5e0:	add	r3, r3, r2
   2d5e4:	str	r3, [sp, #60]	; 0x3c
   2d5e8:	str	r0, [sp, #84]	; 0x54
   2d5ec:	mov	r3, #0
   2d5f0:	strd	r0, [sp, #72]	; 0x48
   2d5f4:	str	r0, [sp, #92]	; 0x5c
   2d5f8:	mov	r7, r1
   2d5fc:	str	r0, [sp, #96]	; 0x60
   2d600:	str	r1, [sp, #100]	; 0x64
   2d604:	str	r1, [sp, #88]	; 0x58
   2d608:	str	r3, [sp, #68]	; 0x44
   2d60c:	ldr	r2, [sp, #84]	; 0x54
   2d610:	ldrd	r0, [sp, #56]	; 0x38
   2d614:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d618:	ldr	lr, [sp, #64]	; 0x40
   2d61c:	ldrd	r2, [r9, #-160]	; 0xffffff60
   2d620:	sub	r1, r9, #272	; 0x110
   2d624:	ldr	ip, [r9, #-56]	; 0xffffffc8
   2d628:	ldrd	r0, [r1]
   2d62c:	strd	r2, [lr, #80]	; 0x50
   2d630:	ldr	r2, [r9, #-52]	; 0xffffffcc
   2d634:	mov	r3, #2
   2d638:	strd	r0, [lr, #72]	; 0x48
   2d63c:	str	r2, [lr, #92]	; 0x5c
   2d640:	str	ip, [lr, #88]	; 0x58
   2d644:	str	r3, [lr, #28]
   2d648:	mov	r8, #24
   2d64c:	ldr	r2, [sp, #84]	; 0x54
   2d650:	ldrd	r0, [sp, #56]	; 0x38
   2d654:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d658:	ldr	ip, [sp, #64]	; 0x40
   2d65c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2d660:	ldrd	r0, [r9, #-160]	; 0xffffff60
   2d664:	mov	r8, #23
   2d668:	strd	r2, [ip, #80]	; 0x50
   2d66c:	mov	r3, #0
   2d670:	mov	r2, #2
   2d674:	strd	r0, [ip, #72]	; 0x48
   2d678:	str	r2, [ip, #28]
   2d67c:	str	r3, [ip, #88]	; 0x58
   2d680:	str	r3, [ip, #92]	; 0x5c
   2d684:	ldr	r2, [sp, #84]	; 0x54
   2d688:	ldrd	r0, [sp, #56]	; 0x38
   2d68c:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d690:	ldr	lr, [sp, #64]	; 0x40
   2d694:	ldrd	r4, [r9]
   2d698:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2d69c:	ldr	r0, [lr, #176]	; 0xb0
   2d6a0:	ldrb	r1, [r9, #-56]	; 0xffffffc8
   2d6a4:	strd	r4, [sp, #8]
   2d6a8:	ldr	ip, [r9, #-40]	; 0xffffffd8
   2d6ac:	add	r0, r0, #1
   2d6b0:	str	ip, [sp]
   2d6b4:	str	r0, [lr, #176]	; 0xb0
   2d6b8:	add	r0, lr, #24
   2d6bc:	bl	2c43c <__assert_fail@plt+0x19e48>
   2d6c0:	cmp	r0, #0
   2d6c4:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2d6c8:	mov	r8, #27
   2d6cc:	ldr	r2, [sp, #84]	; 0x54
   2d6d0:	ldrd	r0, [sp, #56]	; 0x38
   2d6d4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d6d8:	ldr	ip, [sp, #64]	; 0x40
   2d6dc:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2d6e0:	mov	r0, #0
   2d6e4:	mov	r1, #0
   2d6e8:	strd	r2, [ip, #72]	; 0x48
   2d6ec:	mov	r3, #0
   2d6f0:	mov	r2, #2
   2d6f4:	strd	r0, [ip, #80]	; 0x50
   2d6f8:	str	r2, [ip, #28]
   2d6fc:	str	r3, [ip, #88]	; 0x58
   2d700:	str	r3, [ip, #92]	; 0x5c
   2d704:	mov	r8, #22
   2d708:	ldr	r2, [sp, #84]	; 0x54
   2d70c:	ldrd	r0, [sp, #56]	; 0x38
   2d710:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d714:	ldr	lr, [sp, #64]	; 0x40
   2d718:	ldrd	r2, [r9, #-160]	; 0xffffff60
   2d71c:	sub	r1, r9, #272	; 0x110
   2d720:	ldr	ip, [r9, #-56]	; 0xffffffc8
   2d724:	ldrd	r0, [r1]
   2d728:	strd	r2, [lr, #80]	; 0x50
   2d72c:	ldr	r2, [r9, #-52]	; 0xffffffcc
   2d730:	ldr	r3, [r9]
   2d734:	strd	r0, [lr, #72]	; 0x48
   2d738:	str	r2, [lr, #92]	; 0x5c
   2d73c:	str	ip, [lr, #88]	; 0x58
   2d740:	str	r3, [lr, #28]
   2d744:	mov	r8, #20
   2d748:	ldr	r2, [sp, #84]	; 0x54
   2d74c:	ldrd	r0, [sp, #56]	; 0x38
   2d750:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d754:	ldr	ip, [sp, #64]	; 0x40
   2d758:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2d75c:	ldrd	r0, [r9, #-160]	; 0xffffff60
   2d760:	mov	r8, #19
   2d764:	strd	r2, [ip, #80]	; 0x50
   2d768:	ldr	r2, [r9]
   2d76c:	mov	r3, #0
   2d770:	strd	r0, [ip, #72]	; 0x48
   2d774:	str	r2, [ip, #28]
   2d778:	str	r3, [ip, #88]	; 0x58
   2d77c:	str	r3, [ip, #92]	; 0x5c
   2d780:	ldr	r2, [sp, #84]	; 0x54
   2d784:	ldrd	r0, [sp, #56]	; 0x38
   2d788:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d78c:	ldr	ip, [sp, #64]	; 0x40
   2d790:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2d794:	mov	r0, #0
   2d798:	mov	r1, #0
   2d79c:	strd	r2, [ip, #72]	; 0x48
   2d7a0:	ldr	r2, [r9]
   2d7a4:	mov	r3, #0
   2d7a8:	strd	r0, [ip, #80]	; 0x50
   2d7ac:	str	r2, [ip, #28]
   2d7b0:	str	r3, [ip, #88]	; 0x58
   2d7b4:	str	r3, [ip, #92]	; 0x5c
   2d7b8:	mov	r8, #18
   2d7bc:	ldr	r2, [sp, #84]	; 0x54
   2d7c0:	ldrd	r0, [sp, #56]	; 0x38
   2d7c4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d7c8:	mov	r2, #5
   2d7cc:	ldr	r1, [pc, #-960]	; 2d414 <__assert_fail@plt+0x1ae20>
   2d7d0:	mov	r0, #0
   2d7d4:	bl	120b4 <dcgettext@plt>
   2d7d8:	mov	r8, #15
   2d7dc:	ldr	r2, [sp, #84]	; 0x54
   2d7e0:	ldrd	r0, [sp, #56]	; 0x38
   2d7e4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d7e8:	mov	r2, #5
   2d7ec:	ldr	r1, [pc, #-988]	; 2d418 <__assert_fail@plt+0x1ae24>
   2d7f0:	mov	r0, #0
   2d7f4:	bl	120b4 <dcgettext@plt>
   2d7f8:	mov	r8, #14
   2d7fc:	ldr	r2, [sp, #84]	; 0x54
   2d800:	ldrd	r0, [sp, #56]	; 0x38
   2d804:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d808:	mov	r2, #5
   2d80c:	ldr	r1, [pc, #-988]	; 2d438 <__assert_fail@plt+0x1ae44>
   2d810:	mov	r0, #0
   2d814:	bl	120b4 <dcgettext@plt>
   2d818:	mov	r8, #13
   2d81c:	ldr	r2, [sp, #84]	; 0x54
   2d820:	ldrd	r0, [sp, #56]	; 0x38
   2d824:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d828:	ldr	r1, [sp, #64]	; 0x40
   2d82c:	mov	r2, #5
   2d830:	mov	r0, #0
   2d834:	ldr	r3, [r1, #160]	; 0xa0
   2d838:	mov	r8, #12
   2d83c:	add	r3, r3, #1
   2d840:	str	r3, [r1, #160]	; 0xa0
   2d844:	ldr	r1, [pc, #-1072]	; 2d41c <__assert_fail@plt+0x1ae28>
   2d848:	bl	120b4 <dcgettext@plt>
   2d84c:	ldr	r2, [sp, #84]	; 0x54
   2d850:	ldrd	r0, [sp, #56]	; 0x38
   2d854:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d858:	ldr	r1, [sp, #64]	; 0x40
   2d85c:	mov	r2, #5
   2d860:	mov	r0, #0
   2d864:	ldr	r3, [r1, #156]	; 0x9c
   2d868:	mov	r8, #11
   2d86c:	add	r3, r3, #1
   2d870:	str	r3, [r1, #156]	; 0x9c
   2d874:	ldr	r1, [pc, #-1116]	; 2d420 <__assert_fail@plt+0x1ae2c>
   2d878:	bl	120b4 <dcgettext@plt>
   2d87c:	ldr	r2, [sp, #84]	; 0x54
   2d880:	ldrd	r0, [sp, #56]	; 0x38
   2d884:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d888:	ldr	r1, [sp, #64]	; 0x40
   2d88c:	mov	r2, #5
   2d890:	mov	r0, #0
   2d894:	ldr	r3, [r1, #176]	; 0xb0
   2d898:	mov	r8, #10
   2d89c:	add	r3, r3, #1
   2d8a0:	str	r3, [r1, #176]	; 0xb0
   2d8a4:	ldr	r1, [pc, #-1160]	; 2d424 <__assert_fail@plt+0x1ae30>
   2d8a8:	bl	120b4 <dcgettext@plt>
   2d8ac:	ldr	r2, [sp, #84]	; 0x54
   2d8b0:	ldrd	r0, [sp, #56]	; 0x38
   2d8b4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d8b8:	ldr	r1, [sp, #64]	; 0x40
   2d8bc:	mov	r2, #5
   2d8c0:	mov	r0, #0
   2d8c4:	ldr	r3, [r1, #164]	; 0xa4
   2d8c8:	mov	r8, #9
   2d8cc:	add	r3, r3, #1
   2d8d0:	str	r3, [r1, #164]	; 0xa4
   2d8d4:	ldr	r1, [pc, #-1204]	; 2d428 <__assert_fail@plt+0x1ae34>
   2d8d8:	bl	120b4 <dcgettext@plt>
   2d8dc:	ldr	r2, [sp, #84]	; 0x54
   2d8e0:	ldrd	r0, [sp, #56]	; 0x38
   2d8e4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d8e8:	ldr	r1, [sp, #64]	; 0x40
   2d8ec:	mov	r2, #5
   2d8f0:	mov	r0, #0
   2d8f4:	ldr	r3, [r1, #172]	; 0xac
   2d8f8:	mov	r8, #8
   2d8fc:	add	r3, r3, #1
   2d900:	str	r3, [r1, #172]	; 0xac
   2d904:	ldr	r1, [pc, #-1248]	; 2d42c <__assert_fail@plt+0x1ae38>
   2d908:	bl	120b4 <dcgettext@plt>
   2d90c:	ldr	r2, [sp, #84]	; 0x54
   2d910:	ldrd	r0, [sp, #56]	; 0x38
   2d914:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d918:	ldr	r1, [sp, #64]	; 0x40
   2d91c:	mov	r0, #0
   2d920:	mov	r8, #7
   2d924:	ldr	r2, [r1, #172]	; 0xac
   2d928:	ldr	r3, [r1, #156]	; 0x9c
   2d92c:	add	r2, r2, #1
   2d930:	add	r3, r3, #1
   2d934:	str	r2, [r1, #172]	; 0xac
   2d938:	str	r3, [r1, #156]	; 0x9c
   2d93c:	mov	r2, #5
   2d940:	ldr	r1, [pc, #-1304]	; 2d430 <__assert_fail@plt+0x1ae3c>
   2d944:	bl	120b4 <dcgettext@plt>
   2d948:	ldr	r2, [sp, #84]	; 0x54
   2d94c:	ldrd	r0, [sp, #56]	; 0x38
   2d950:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2d954:	sub	lr, r9, #56	; 0x38
   2d958:	add	ip, sp, #176	; 0xb0
   2d95c:	ldm	lr!, {r0, r1, r2, r3}
   2d960:	ldr	r4, [sp, #64]	; 0x40
   2d964:	ldr	r8, [r9, #-48]	; 0xffffffd0
   2d968:	stmia	ip!, {r0, r1, r2, r3}
   2d96c:	ldm	lr, {r0, r1}
   2d970:	ldr	r4, [r4, #156]	; 0x9c
   2d974:	stm	ip, {r0, r1}
   2d978:	ldr	r1, [r9, #-40]	; 0xffffffd8
   2d97c:	cmp	r4, #0
   2d980:	str	r4, [sp, #120]	; 0x78
   2d984:	mov	r5, r1
   2d988:	ldr	r4, [r9, #-44]	; 0xffffffd4
   2d98c:	beq	2e678 <__assert_fail@plt+0x1c084>
   2d990:	ldr	r2, [sp, #64]	; 0x40
   2d994:	ldr	r3, [r2, #48]	; 0x30
   2d998:	cmp	r3, #0
   2d99c:	bne	2e678 <__assert_fail@plt+0x1c084>
   2d9a0:	ldrb	r3, [r2, #153]	; 0x99
   2d9a4:	cmp	r3, #0
   2d9a8:	bne	2e678 <__assert_fail@plt+0x1c084>
   2d9ac:	ldr	r3, [r2, #172]	; 0xac
   2d9b0:	cmp	r1, #2
   2d9b4:	cmple	r3, #0
   2d9b8:	bne	2eb28 <__assert_fail@plt+0x1c534>
   2d9bc:	mov	r3, #1
   2d9c0:	ldr	r0, [sp, #64]	; 0x40
   2d9c4:	str	r3, [r2, #172]	; 0xac
   2d9c8:	mov	r2, #0
   2d9cc:	mov	r3, #0
   2d9d0:	mov	r1, #0
   2d9d4:	strd	r2, [r0, #80]	; 0x50
   2d9d8:	mov	r3, #2
   2d9dc:	str	r8, [r0, #72]	; 0x48
   2d9e0:	str	r4, [r0, #76]	; 0x4c
   2d9e4:	str	r1, [r0, #88]	; 0x58
   2d9e8:	str	r1, [r0, #92]	; 0x5c
   2d9ec:	str	r3, [r0, #28]
   2d9f0:	mov	r1, #1
   2d9f4:	ldrd	r2, [r9]
   2d9f8:	str	r1, [sp, #44]	; 0x2c
   2d9fc:	ldr	r1, [r9, #48]	; 0x30
   2da00:	str	r1, [sp, #40]	; 0x28
   2da04:	ldrd	r4, [r9, #40]	; 0x28
   2da08:	strd	r4, [sp, #32]
   2da0c:	ldrd	r4, [r9, #32]
   2da10:	strd	r4, [sp, #24]
   2da14:	ldrd	r4, [r9, #24]
   2da18:	strd	r4, [sp, #16]
   2da1c:	ldrd	r4, [r9, #16]
   2da20:	strd	r4, [sp, #8]
   2da24:	ldrd	r4, [r9, #8]
   2da28:	strd	r4, [sp]
   2da2c:	bl	2bc18 <__assert_fail@plt+0x19624>
   2da30:	cmp	r0, #0
   2da34:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2da38:	mov	r8, #89	; 0x59
   2da3c:	ldr	r2, [sp, #84]	; 0x54
   2da40:	ldrd	r0, [sp, #56]	; 0x38
   2da44:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2da48:	mov	lr, r9
   2da4c:	ldr	r4, [sp, #64]	; 0x40
   2da50:	ldm	lr!, {r0, r1, r2, r3}
   2da54:	add	ip, sp, #152	; 0x98
   2da58:	ldr	r8, [r4, #156]	; 0x9c
   2da5c:	ldr	r4, [r9, #12]
   2da60:	stmia	ip!, {r0, r1, r2, r3}
   2da64:	cmp	r8, #0
   2da68:	ldm	lr, {r0, r1}
   2da6c:	str	r2, [sp, #120]	; 0x78
   2da70:	stm	ip, {r0, r1}
   2da74:	mov	r5, r0
   2da78:	beq	2e614 <__assert_fail@plt+0x1c020>
   2da7c:	ldr	r2, [sp, #64]	; 0x40
   2da80:	ldr	r3, [r2, #48]	; 0x30
   2da84:	cmp	r3, #0
   2da88:	bne	2e614 <__assert_fail@plt+0x1c020>
   2da8c:	ldrb	r3, [r2, #153]	; 0x99
   2da90:	cmp	r3, #0
   2da94:	bne	2e614 <__assert_fail@plt+0x1c020>
   2da98:	ldr	r3, [r2, #172]	; 0xac
   2da9c:	cmp	r0, #2
   2daa0:	cmple	r3, #0
   2daa4:	bne	2ec24 <__assert_fail@plt+0x1c630>
   2daa8:	mov	r3, #1
   2daac:	ldr	r0, [sp, #64]	; 0x40
   2dab0:	str	r3, [r2, #172]	; 0xac
   2dab4:	mov	r2, #0
   2dab8:	mov	r3, #0
   2dabc:	strd	r2, [r0, #80]	; 0x50
   2dac0:	mov	r2, r0
   2dac4:	ldr	r0, [sp, #120]	; 0x78
   2dac8:	mov	r1, #0
   2dacc:	mov	r3, #2
   2dad0:	str	r0, [r2, #72]	; 0x48
   2dad4:	str	r1, [r2, #88]	; 0x58
   2dad8:	str	r1, [r2, #92]	; 0x5c
   2dadc:	str	r4, [r2, #76]	; 0x4c
   2dae0:	str	r3, [r2, #28]
   2dae4:	mov	r8, #88	; 0x58
   2dae8:	ldr	r2, [sp, #84]	; 0x54
   2daec:	ldrd	r0, [sp, #56]	; 0x38
   2daf0:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2daf4:	ldrd	r0, [r9, #8]
   2daf8:	mov	r3, #0
   2dafc:	mvn	r2, #0
   2db00:	adds	r4, r0, #-2147483648	; 0x80000000
   2db04:	adc	r5, r1, #0
   2db08:	cmp	r5, r3
   2db0c:	cmpeq	r4, r2
   2db10:	bhi	2c930 <__assert_fail@plt+0x1a33c>
   2db14:	mov	r3, #0
   2db18:	str	r0, [sp, #296]	; 0x128
   2db1c:	str	r3, [sp, #300]	; 0x12c
   2db20:	mov	r8, #87	; 0x57
   2db24:	ldr	r2, [sp, #84]	; 0x54
   2db28:	ldrd	r0, [sp, #56]	; 0x38
   2db2c:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2db30:	ldrd	r0, [r9, #8]
   2db34:	mov	r3, #0
   2db38:	mvn	r2, #0
   2db3c:	adds	r4, r0, #-2147483648	; 0x80000000
   2db40:	adc	r5, r1, #0
   2db44:	cmp	r5, r3
   2db48:	cmpeq	r4, r2
   2db4c:	bhi	2c930 <__assert_fail@plt+0x1a33c>
   2db50:	mov	r3, #0
   2db54:	str	r0, [sp, #296]	; 0x128
   2db58:	str	r3, [sp, #300]	; 0x12c
   2db5c:	mov	r8, #85	; 0x55
   2db60:	ldr	r2, [sp, #84]	; 0x54
   2db64:	ldrd	r0, [sp, #56]	; 0x38
   2db68:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2db6c:	mov	r4, #0
   2db70:	mov	r5, #0
   2db74:	mov	r2, #56	; 0x38
   2db78:	mov	r1, #0
   2db7c:	ldr	r0, [sp, #80]	; 0x50
   2db80:	strd	r4, [sp, #72]	; 0x48
   2db84:	bl	12378 <memset@plt>
   2db88:	ldrd	r2, [r9]
   2db8c:	str	r4, [sp, #92]	; 0x5c
   2db90:	mov	r7, r5
   2db94:	strd	r2, [sp, #56]	; 0x38
   2db98:	mov	r3, #0
   2db9c:	str	r4, [sp, #96]	; 0x60
   2dba0:	str	r5, [sp, #100]	; 0x64
   2dba4:	str	r4, [sp, #84]	; 0x54
   2dba8:	str	r5, [sp, #88]	; 0x58
   2dbac:	mov	r8, #81	; 0x51
   2dbb0:	str	r3, [sp, #68]	; 0x44
   2dbb4:	mov	r2, r4
   2dbb8:	ldrd	r0, [sp, #56]	; 0x38
   2dbbc:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dbc0:	mov	r2, #56	; 0x38
   2dbc4:	mov	r1, #0
   2dbc8:	ldr	r0, [sp, #80]	; 0x50
   2dbcc:	bl	12378 <memset@plt>
   2dbd0:	mov	r3, #0
   2dbd4:	mov	r7, r3
   2dbd8:	str	r3, [sp, #56]	; 0x38
   2dbdc:	str	r3, [sp, #60]	; 0x3c
   2dbe0:	str	r3, [sp, #84]	; 0x54
   2dbe4:	str	r3, [sp, #92]	; 0x5c
   2dbe8:	str	r3, [sp, #96]	; 0x60
   2dbec:	str	r3, [sp, #100]	; 0x64
   2dbf0:	str	r3, [sp, #88]	; 0x58
   2dbf4:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2dbf8:	mov	r8, #80	; 0x50
   2dbfc:	str	r7, [sp, #68]	; 0x44
   2dc00:	strd	r2, [sp, #72]	; 0x48
   2dc04:	ldrd	r0, [sp, #56]	; 0x38
   2dc08:	ldr	r2, [sp, #84]	; 0x54
   2dc0c:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dc10:	mov	r4, #0
   2dc14:	mov	r5, #0
   2dc18:	mov	r2, #56	; 0x38
   2dc1c:	mov	r1, #0
   2dc20:	ldr	r0, [sp, #80]	; 0x50
   2dc24:	strd	r4, [sp, #72]	; 0x48
   2dc28:	bl	12378 <memset@plt>
   2dc2c:	ldr	r7, [r9, #-44]	; 0xffffffd4
   2dc30:	ldr	r3, [r9, #-48]	; 0xffffffd0
   2dc34:	mov	r8, #79	; 0x4f
   2dc38:	str	r4, [sp, #96]	; 0x60
   2dc3c:	str	r5, [sp, #100]	; 0x64
   2dc40:	strd	r4, [sp, #56]	; 0x38
   2dc44:	str	r4, [sp, #84]	; 0x54
   2dc48:	str	r5, [sp, #88]	; 0x58
   2dc4c:	str	r3, [sp, #92]	; 0x5c
   2dc50:	mov	r3, #0
   2dc54:	str	r3, [sp, #68]	; 0x44
   2dc58:	ldr	r2, [sp, #84]	; 0x54
   2dc5c:	mov	r0, r4
   2dc60:	mov	r1, r5
   2dc64:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dc68:	mov	r4, #0
   2dc6c:	mov	r5, #0
   2dc70:	mov	r2, #56	; 0x38
   2dc74:	mov	r1, #0
   2dc78:	ldr	r0, [sp, #80]	; 0x50
   2dc7c:	strd	r4, [sp, #72]	; 0x48
   2dc80:	bl	12378 <memset@plt>
   2dc84:	mov	r2, r4
   2dc88:	mov	r3, r5
   2dc8c:	str	r4, [sp, #92]	; 0x5c
   2dc90:	strd	r2, [sp, #56]	; 0x38
   2dc94:	ldr	r3, [r9, #-48]	; 0xffffffd0
   2dc98:	mov	r7, r5
   2dc9c:	str	r3, [sp, #96]	; 0x60
   2dca0:	ldr	r3, [r9, #-44]	; 0xffffffd4
   2dca4:	str	r4, [sp, #84]	; 0x54
   2dca8:	str	r3, [sp, #100]	; 0x64
   2dcac:	mov	r3, #0
   2dcb0:	str	r5, [sp, #88]	; 0x58
   2dcb4:	mov	r8, #78	; 0x4e
   2dcb8:	str	r3, [sp, #68]	; 0x44
   2dcbc:	mov	r2, r4
   2dcc0:	ldrd	r0, [sp, #56]	; 0x38
   2dcc4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dcc8:	ldrd	r2, [r9, #8]
   2dccc:	mov	r8, #91	; 0x5b
   2dcd0:	ldrd	r0, [sp, #56]	; 0x38
   2dcd4:	strd	r2, [r6, #-8]
   2dcd8:	ldr	r2, [sp, #84]	; 0x54
   2dcdc:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dce0:	mvn	r2, #0
   2dce4:	mvn	r3, #0
   2dce8:	mov	r8, #90	; 0x5a
   2dcec:	strd	r2, [r6, #-8]
   2dcf0:	ldrd	r0, [sp, #56]	; 0x38
   2dcf4:	ldr	r2, [sp, #84]	; 0x54
   2dcf8:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dcfc:	ldr	lr, [sp, #64]	; 0x40
   2dd00:	ldm	r9, {r0, r1}
   2dd04:	add	r3, lr, #88	; 0x58
   2dd08:	mov	ip, #1
   2dd0c:	stm	r3, {r0, r1}
   2dd10:	mov	r2, #5
   2dd14:	ldr	r1, [pc, #-2280]	; 2d434 <__assert_fail@plt+0x1ae40>
   2dd18:	strb	ip, [lr, #152]	; 0x98
   2dd1c:	mov	r0, #0
   2dd20:	bl	120b4 <dcgettext@plt>
   2dd24:	mov	r8, #4
   2dd28:	ldr	r2, [sp, #84]	; 0x54
   2dd2c:	ldrd	r0, [sp, #56]	; 0x38
   2dd30:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dd34:	ldr	ip, [sp, #64]	; 0x40
   2dd38:	mov	r1, #1
   2dd3c:	ldr	r0, [r9, #-56]	; 0xffffffc8
   2dd40:	ldrd	r2, [r9]
   2dd44:	str	r1, [sp, #44]	; 0x2c
   2dd48:	ldr	r1, [r9, #48]	; 0x30
   2dd4c:	str	r0, [ip, #24]
   2dd50:	str	r1, [sp, #40]	; 0x28
   2dd54:	ldrd	r4, [r9, #40]	; 0x28
   2dd58:	mov	r0, ip
   2dd5c:	strd	r4, [sp, #32]
   2dd60:	ldrd	r4, [r9, #32]
   2dd64:	strd	r4, [sp, #24]
   2dd68:	ldrd	r4, [r9, #24]
   2dd6c:	strd	r4, [sp, #16]
   2dd70:	ldrd	r4, [r9, #16]
   2dd74:	strd	r4, [sp, #8]
   2dd78:	ldrd	r4, [r9, #8]
   2dd7c:	strd	r4, [sp]
   2dd80:	bl	2bc18 <__assert_fail@plt+0x19624>
   2dd84:	cmp	r0, #0
   2dd88:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2dd8c:	mov	r2, #5
   2dd90:	ldr	r1, [pc, #-2400]	; 2d438 <__assert_fail@plt+0x1ae44>
   2dd94:	mov	r0, #0
   2dd98:	bl	120b4 <dcgettext@plt>
   2dd9c:	mov	r8, #32
   2dda0:	ldr	r2, [sp, #84]	; 0x54
   2dda4:	ldrd	r0, [sp, #56]	; 0x38
   2dda8:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2ddac:	ldr	r2, [sp, #64]	; 0x40
   2ddb0:	ldr	r3, [pc, #-2428]	; 2d43c <__assert_fail@plt+0x1ae48>
   2ddb4:	mov	r8, #31
   2ddb8:	str	r3, [r2, #24]
   2ddbc:	ldrd	r0, [sp, #56]	; 0x38
   2ddc0:	ldr	r2, [sp, #84]	; 0x54
   2ddc4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2ddc8:	ldr	r2, [sp, #64]	; 0x40
   2ddcc:	ldr	r3, [r9]
   2ddd0:	mov	r8, #30
   2ddd4:	str	r3, [r2, #24]
   2ddd8:	ldrd	r0, [sp, #56]	; 0x38
   2dddc:	ldr	r2, [sp, #84]	; 0x54
   2dde0:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dde4:	ldr	r1, [sp, #64]	; 0x40
   2dde8:	mov	r2, #1
   2ddec:	mov	r8, #29
   2ddf0:	ldr	r3, [r1, #168]	; 0xa8
   2ddf4:	str	r2, [r1, #20]
   2ddf8:	add	r3, r3, r2
   2ddfc:	str	r3, [r1, #168]	; 0xa8
   2de00:	ldr	r2, [sp, #84]	; 0x54
   2de04:	ldrd	r0, [sp, #56]	; 0x38
   2de08:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2de0c:	ldr	r2, [sp, #64]	; 0x40
   2de10:	ldr	r3, [r9]
   2de14:	mov	r8, #28
   2de18:	str	r3, [r2, #20]
   2de1c:	ldrd	r0, [sp, #56]	; 0x38
   2de20:	ldr	r2, [sp, #84]	; 0x54
   2de24:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2de28:	mov	r2, #56	; 0x38
   2de2c:	mov	r1, #0
   2de30:	ldr	r0, [sp, #80]	; 0x50
   2de34:	bl	12378 <memset@plt>
   2de38:	ldrd	r2, [r9]
   2de3c:	cmp	r2, #0
   2de40:	strd	r2, [sp, #56]	; 0x38
   2de44:	sbcs	r3, r3, #0
   2de48:	blt	2e818 <__assert_fail@plt+0x1c224>
   2de4c:	ldrd	r2, [sp, #56]	; 0x38
   2de50:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   2de54:	orrs	r3, r2, r3
   2de58:	beq	2de90 <__assert_fail@plt+0x1b89c>
   2de5c:	cmp	r4, #0
   2de60:	sbcs	r3, r5, #0
   2de64:	blt	2ebc0 <__assert_fail@plt+0x1c5cc>
   2de68:	ldrd	r2, [sp, #56]	; 0x38
   2de6c:	mvn	r0, #0
   2de70:	mvn	r1, #-2147483648	; 0x80000000
   2de74:	bl	4db88 <__assert_fail@plt+0x3b594>
   2de78:	cmp	r0, r4
   2de7c:	sbcs	r3, r1, r5
   2de80:	movlt	r3, #1
   2de84:	movge	r3, #0
   2de88:	cmp	r3, #0
   2de8c:	bne	2c930 <__assert_fail@plt+0x1a33c>
   2de90:	ldrd	r0, [sp, #56]	; 0x38
   2de94:	mov	r8, #77	; 0x4d
   2de98:	umull	r2, r3, r4, r0
   2de9c:	mul	ip, r4, r1
   2dea0:	strd	r2, [sp, #56]	; 0x38
   2dea4:	mla	r3, r0, r5, ip
   2dea8:	ldr	r2, [sp, #60]	; 0x3c
   2deac:	mov	r0, #0
   2deb0:	mov	r1, #0
   2deb4:	add	r3, r3, r2
   2deb8:	str	r3, [sp, #60]	; 0x3c
   2debc:	str	r0, [sp, #84]	; 0x54
   2dec0:	mov	r3, #0
   2dec4:	strd	r0, [sp, #72]	; 0x48
   2dec8:	str	r0, [sp, #92]	; 0x5c
   2decc:	mov	r7, r1
   2ded0:	str	r0, [sp, #96]	; 0x60
   2ded4:	str	r1, [sp, #100]	; 0x64
   2ded8:	str	r1, [sp, #88]	; 0x58
   2dedc:	str	r3, [sp, #68]	; 0x44
   2dee0:	ldr	r2, [sp, #84]	; 0x54
   2dee4:	ldrd	r0, [sp, #56]	; 0x38
   2dee8:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2deec:	mov	r4, #0
   2def0:	mov	r5, #0
   2def4:	mov	r2, #56	; 0x38
   2def8:	mov	r1, #0
   2defc:	ldr	r0, [sp, #80]	; 0x50
   2df00:	strd	r4, [sp, #72]	; 0x48
   2df04:	bl	12378 <memset@plt>
   2df08:	mov	r2, r4
   2df0c:	mov	r3, r5
   2df10:	str	r4, [sp, #92]	; 0x5c
   2df14:	strd	r2, [sp, #56]	; 0x38
   2df18:	ldr	r3, [r9, #-48]	; 0xffffffd0
   2df1c:	mov	r7, r5
   2df20:	str	r3, [sp, #84]	; 0x54
   2df24:	ldr	r3, [r9, #-44]	; 0xffffffd4
   2df28:	str	r4, [sp, #96]	; 0x60
   2df2c:	str	r3, [sp, #88]	; 0x58
   2df30:	mov	r3, #0
   2df34:	str	r5, [sp, #100]	; 0x64
   2df38:	mov	r8, #76	; 0x4c
   2df3c:	str	r3, [sp, #68]	; 0x44
   2df40:	ldr	r2, [sp, #84]	; 0x54
   2df44:	ldrd	r0, [sp, #56]	; 0x38
   2df48:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2df4c:	mov	r2, #56	; 0x38
   2df50:	mov	r1, #0
   2df54:	ldr	r0, [sp, #80]	; 0x50
   2df58:	bl	12378 <memset@plt>
   2df5c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2df60:	mov	r0, #0
   2df64:	mov	r1, #0
   2df68:	strd	r2, [r6, #-8]
   2df6c:	mov	r2, r0
   2df70:	mov	r3, r1
   2df74:	mov	r7, r1
   2df78:	strd	r2, [sp, #56]	; 0x38
   2df7c:	mov	r3, #0
   2df80:	strd	r0, [sp, #72]	; 0x48
   2df84:	str	r0, [sp, #92]	; 0x5c
   2df88:	str	r0, [sp, #96]	; 0x60
   2df8c:	str	r0, [sp, #84]	; 0x54
   2df90:	mov	r2, r0
   2df94:	str	r7, [sp, #100]	; 0x64
   2df98:	str	r7, [sp, #88]	; 0x58
   2df9c:	mov	r8, #75	; 0x4b
   2dfa0:	str	r3, [sp, #68]	; 0x44
   2dfa4:	ldrd	r0, [sp, #56]	; 0x38
   2dfa8:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2dfac:	mov	r2, #56	; 0x38
   2dfb0:	mov	r1, #0
   2dfb4:	ldr	r0, [sp, #80]	; 0x50
   2dfb8:	bl	12378 <memset@plt>
   2dfbc:	mov	r3, #0
   2dfc0:	str	r3, [sp, #56]	; 0x38
   2dfc4:	str	r3, [sp, #60]	; 0x3c
   2dfc8:	str	r3, [sp, #84]	; 0x54
   2dfcc:	mov	r2, #1
   2dfd0:	str	r3, [sp, #92]	; 0x5c
   2dfd4:	mov	r7, r3
   2dfd8:	str	r3, [sp, #96]	; 0x60
   2dfdc:	str	r3, [sp, #100]	; 0x64
   2dfe0:	str	r3, [sp, #88]	; 0x58
   2dfe4:	str	r3, [sp, #68]	; 0x44
   2dfe8:	mov	r3, #0
   2dfec:	mov	r8, #73	; 0x49
   2dff0:	strd	r2, [sp, #72]	; 0x48
   2dff4:	ldrd	r0, [sp, #56]	; 0x38
   2dff8:	ldr	r2, [sp, #84]	; 0x54
   2dffc:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e000:	mov	r2, #56	; 0x38
   2e004:	mov	r1, #0
   2e008:	ldr	r0, [sp, #80]	; 0x50
   2e00c:	bl	12378 <memset@plt>
   2e010:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2e014:	mov	r2, #0
   2e018:	mov	r0, r3
   2e01c:	asr	r1, r3, #31
   2e020:	ldr	r3, [r9, #-52]	; 0xffffffcc
   2e024:	str	r2, [sp, #56]	; 0x38
   2e028:	str	r2, [sp, #60]	; 0x3c
   2e02c:	strd	r0, [sp, #72]	; 0x48
   2e030:	str	r2, [sp, #92]	; 0x5c
   2e034:	mov	r7, r2
   2e038:	str	r2, [sp, #96]	; 0x60
   2e03c:	str	r2, [sp, #100]	; 0x64
   2e040:	str	r2, [sp, #84]	; 0x54
   2e044:	str	r2, [sp, #88]	; 0x58
   2e048:	str	r3, [sp, #68]	; 0x44
   2e04c:	mov	r8, #72	; 0x48
   2e050:	ldrd	r0, [sp, #56]	; 0x38
   2e054:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e058:	mov	r2, #56	; 0x38
   2e05c:	mov	r1, #0
   2e060:	ldr	r0, [sp, #80]	; 0x50
   2e064:	bl	12378 <memset@plt>
   2e068:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2e06c:	mov	r2, #0
   2e070:	mov	r0, r3
   2e074:	asr	r1, r3, #31
   2e078:	ldr	r3, [r9, #-52]	; 0xffffffcc
   2e07c:	str	r2, [sp, #56]	; 0x38
   2e080:	str	r2, [sp, #60]	; 0x3c
   2e084:	strd	r0, [sp, #72]	; 0x48
   2e088:	str	r2, [sp, #92]	; 0x5c
   2e08c:	mov	r7, r2
   2e090:	str	r2, [sp, #96]	; 0x60
   2e094:	str	r2, [sp, #100]	; 0x64
   2e098:	str	r2, [sp, #84]	; 0x54
   2e09c:	str	r2, [sp, #88]	; 0x58
   2e0a0:	str	r3, [sp, #68]	; 0x44
   2e0a4:	mov	r8, #71	; 0x47
   2e0a8:	ldrd	r0, [sp, #56]	; 0x38
   2e0ac:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e0b0:	mov	r2, #56	; 0x38
   2e0b4:	mov	r1, #0
   2e0b8:	ldr	r0, [sp, #80]	; 0x50
   2e0bc:	bl	12378 <memset@plt>
   2e0c0:	mov	r3, #0
   2e0c4:	mov	r7, r3
   2e0c8:	str	r3, [sp, #56]	; 0x38
   2e0cc:	str	r3, [sp, #60]	; 0x3c
   2e0d0:	str	r3, [sp, #84]	; 0x54
   2e0d4:	str	r3, [sp, #92]	; 0x5c
   2e0d8:	str	r3, [sp, #96]	; 0x60
   2e0dc:	str	r3, [sp, #100]	; 0x64
   2e0e0:	str	r3, [sp, #88]	; 0x58
   2e0e4:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2e0e8:	mov	r8, #70	; 0x46
   2e0ec:	str	r7, [sp, #68]	; 0x44
   2e0f0:	strd	r2, [sp, #72]	; 0x48
   2e0f4:	ldrd	r0, [sp, #56]	; 0x38
   2e0f8:	ldr	r2, [sp, #84]	; 0x54
   2e0fc:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e100:	mov	r2, #56	; 0x38
   2e104:	mov	r1, #0
   2e108:	ldr	r0, [sp, #80]	; 0x50
   2e10c:	bl	12378 <memset@plt>
   2e110:	mov	r3, #0
   2e114:	mov	r7, r3
   2e118:	str	r3, [sp, #56]	; 0x38
   2e11c:	str	r3, [sp, #60]	; 0x3c
   2e120:	str	r3, [sp, #84]	; 0x54
   2e124:	str	r3, [sp, #92]	; 0x5c
   2e128:	str	r3, [sp, #96]	; 0x60
   2e12c:	str	r3, [sp, #100]	; 0x64
   2e130:	str	r3, [sp, #88]	; 0x58
   2e134:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   2e138:	mov	r8, #69	; 0x45
   2e13c:	str	r7, [sp, #68]	; 0x44
   2e140:	strd	r2, [sp, #72]	; 0x48
   2e144:	ldrd	r0, [sp, #56]	; 0x38
   2e148:	ldr	r2, [sp, #84]	; 0x54
   2e14c:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e150:	mov	r4, #0
   2e154:	mov	r5, #0
   2e158:	mov	r2, #56	; 0x38
   2e15c:	mov	r1, #0
   2e160:	ldr	r0, [sp, #80]	; 0x50
   2e164:	strd	r4, [sp, #72]	; 0x48
   2e168:	bl	12378 <memset@plt>
   2e16c:	mov	r3, #0
   2e170:	str	r4, [sp, #84]	; 0x54
   2e174:	str	r3, [sp, #68]	; 0x44
   2e178:	mov	r3, #1
   2e17c:	str	r4, [sp, #96]	; 0x60
   2e180:	str	r5, [sp, #100]	; 0x64
   2e184:	strd	r4, [sp, #56]	; 0x38
   2e188:	str	r5, [sp, #88]	; 0x58
   2e18c:	mov	r8, #68	; 0x44
   2e190:	str	r3, [sp, #92]	; 0x5c
   2e194:	mov	r7, #0
   2e198:	ldr	r2, [sp, #84]	; 0x54
   2e19c:	mov	r0, r4
   2e1a0:	mov	r1, r5
   2e1a4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e1a8:	mov	r4, #0
   2e1ac:	mov	r5, #0
   2e1b0:	mov	r2, #56	; 0x38
   2e1b4:	mov	r1, #0
   2e1b8:	ldr	r0, [sp, #80]	; 0x50
   2e1bc:	strd	r4, [sp, #72]	; 0x48
   2e1c0:	bl	12378 <memset@plt>
   2e1c4:	ldr	r3, [r9, #-48]	; 0xffffffd0
   2e1c8:	str	r4, [sp, #96]	; 0x60
   2e1cc:	str	r5, [sp, #100]	; 0x64
   2e1d0:	strd	r4, [sp, #56]	; 0x38
   2e1d4:	str	r4, [sp, #84]	; 0x54
   2e1d8:	str	r5, [sp, #88]	; 0x58
   2e1dc:	str	r3, [sp, #92]	; 0x5c
   2e1e0:	ldr	r7, [r9, #-44]	; 0xffffffd4
   2e1e4:	mov	r8, #67	; 0x43
   2e1e8:	b	2dc50 <__assert_fail@plt+0x1b65c>
   2e1ec:	mov	r4, #0
   2e1f0:	mov	r5, #0
   2e1f4:	mov	r2, #56	; 0x38
   2e1f8:	mov	r1, #0
   2e1fc:	ldr	r0, [sp, #80]	; 0x50
   2e200:	strd	r4, [sp, #72]	; 0x48
   2e204:	bl	12378 <memset@plt>
   2e208:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2e20c:	str	r4, [sp, #96]	; 0x60
   2e210:	str	r5, [sp, #100]	; 0x64
   2e214:	strd	r4, [sp, #56]	; 0x38
   2e218:	str	r4, [sp, #84]	; 0x54
   2e21c:	str	r5, [sp, #88]	; 0x58
   2e220:	str	r3, [sp, #92]	; 0x5c
   2e224:	ldr	r7, [r9, #-52]	; 0xffffffcc
   2e228:	mov	r8, #66	; 0x42
   2e22c:	b	2dc50 <__assert_fail@plt+0x1b65c>
   2e230:	ldr	ip, [sp, #64]	; 0x40
   2e234:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2e238:	ldr	r0, [r9]
   2e23c:	mov	r1, #1
   2e240:	strd	r2, [ip, #8]
   2e244:	str	r0, [ip, #16]
   2e248:	strb	r1, [ip, #187]	; 0xbb
   2e24c:	mov	r8, #40	; 0x28
   2e250:	ldr	r2, [sp, #84]	; 0x54
   2e254:	ldrd	r0, [sp, #56]	; 0x38
   2e258:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e25c:	ldr	ip, [sp, #64]	; 0x40
   2e260:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   2e264:	ldr	r0, [r9]
   2e268:	mov	r1, #1
   2e26c:	strd	r2, [ip, #8]
   2e270:	str	r0, [ip, #16]
   2e274:	strb	r1, [ip, #187]	; 0xbb
   2e278:	mov	r8, #39	; 0x27
   2e27c:	ldr	r2, [sp, #84]	; 0x54
   2e280:	ldrd	r0, [sp, #56]	; 0x38
   2e284:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e288:	ldr	r2, [sp, #64]	; 0x40
   2e28c:	mov	r0, #0
   2e290:	mov	r1, #0
   2e294:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2e298:	strd	r0, [r2, #8]
   2e29c:	str	r3, [r2, #16]
   2e2a0:	mov	r8, #38	; 0x26
   2e2a4:	ldr	r2, [sp, #84]	; 0x54
   2e2a8:	ldrd	r0, [sp, #56]	; 0x38
   2e2ac:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e2b0:	ldr	r2, [sp, #64]	; 0x40
   2e2b4:	mov	r0, #0
   2e2b8:	mov	r1, #0
   2e2bc:	ldr	r3, [r9]
   2e2c0:	strd	r0, [r2, #8]
   2e2c4:	str	r3, [r2, #16]
   2e2c8:	mov	r8, #37	; 0x25
   2e2cc:	ldr	r2, [sp, #84]	; 0x54
   2e2d0:	ldrd	r0, [sp, #56]	; 0x38
   2e2d4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e2d8:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2e2dc:	mov	r8, #36	; 0x24
   2e2e0:	ldr	r2, [sp, #64]	; 0x40
   2e2e4:	add	r3, r3, #3600	; 0xe10
   2e2e8:	ldrd	r0, [sp, #56]	; 0x38
   2e2ec:	str	r3, [r2, #24]
   2e2f0:	ldr	r2, [sp, #84]	; 0x54
   2e2f4:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e2f8:	ldr	r3, [r9]
   2e2fc:	mov	r8, #35	; 0x23
   2e300:	b	2e2e0 <__assert_fail@plt+0x1bcec>
   2e304:	ldrd	r4, [r9]
   2e308:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2e30c:	ldrb	r1, [r9, #-56]	; 0xffffffc8
   2e310:	strd	r4, [sp, #8]
   2e314:	ldr	r0, [r9, #-40]	; 0xffffffd8
   2e318:	str	r0, [sp]
   2e31c:	ldr	r0, [sp, #64]	; 0x40
   2e320:	add	r0, r0, #24
   2e324:	bl	2c43c <__assert_fail@plt+0x19e48>
   2e328:	cmp	r0, #0
   2e32c:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2e330:	ldrd	r0, [r9, #-112]	; 0xffffff90
   2e334:	cmp	r0, #0
   2e338:	sbcs	r3, r1, #0
   2e33c:	ldr	r3, [sp, #64]	; 0x40
   2e340:	ldr	ip, [r3, #24]
   2e344:	blt	2ea58 <__assert_fail@plt+0x1c464>
   2e348:	cmp	ip, #0
   2e34c:	blt	2ea98 <__assert_fail@plt+0x1c4a4>
   2e350:	mvn	r4, #-2147483648	; 0x80000000
   2e354:	mov	r5, #0
   2e358:	cmp	r4, r0
   2e35c:	sbcs	r3, r5, r1
   2e360:	bge	2e9b4 <__assert_fail@plt+0x1c3c0>
   2e364:	ldr	r3, [sp, #64]	; 0x40
   2e368:	add	ip, ip, r0
   2e36c:	mov	r0, #1
   2e370:	str	ip, [r3, #24]
   2e374:	b	2c934 <__assert_fail@plt+0x1a340>
   2e378:	mov	r1, #1
   2e37c:	ldrd	r2, [r9]
   2e380:	str	r1, [sp, #44]	; 0x2c
   2e384:	ldr	r1, [r9, #48]	; 0x30
   2e388:	ldr	ip, [pc, #3320]	; 2f088 <__assert_fail@plt+0x1ca94>
   2e38c:	str	r1, [sp, #40]	; 0x28
   2e390:	ldrd	r0, [r9, #40]	; 0x28
   2e394:	strd	r0, [sp, #32]
   2e398:	ldr	r0, [sp, #64]	; 0x40
   2e39c:	ldrd	r4, [r9, #32]
   2e3a0:	str	ip, [r0, #24]
   2e3a4:	strd	r4, [sp, #24]
   2e3a8:	ldrd	r4, [r9, #24]
   2e3ac:	strd	r4, [sp, #16]
   2e3b0:	ldrd	r4, [r9, #16]
   2e3b4:	strd	r4, [sp, #8]
   2e3b8:	ldrd	r4, [r9, #8]
   2e3bc:	strd	r4, [sp]
   2e3c0:	bl	2bc18 <__assert_fail@plt+0x19624>
   2e3c4:	cmp	r0, #0
   2e3c8:	beq	2c930 <__assert_fail@plt+0x1a33c>
   2e3cc:	mov	r2, #5
   2e3d0:	ldr	r1, [pc, #3252]	; 2f08c <__assert_fail@plt+0x1ca98>
   2e3d4:	mov	r0, #0
   2e3d8:	bl	120b4 <dcgettext@plt>
   2e3dc:	mov	r8, #33	; 0x21
   2e3e0:	ldr	r2, [sp, #84]	; 0x54
   2e3e4:	ldrd	r0, [sp, #56]	; 0x38
   2e3e8:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e3ec:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   2e3f0:	ldrd	r2, [r9, #-112]	; 0xffffff90
   2e3f4:	ldr	r1, [sp, #64]	; 0x40
   2e3f8:	cmp	r5, #-2147483648	; 0x80000000
   2e3fc:	cmpeq	r4, #0
   2e400:	strd	r2, [r1, #56]	; 0x38
   2e404:	beq	2ea80 <__assert_fail@plt+0x1c48c>
   2e408:	ldrd	r2, [r9, #8]
   2e40c:	rsbs	r0, r4, #0
   2e410:	mov	ip, r1
   2e414:	rsc	r1, r5, #0
   2e418:	cmp	r3, #-2147483648	; 0x80000000
   2e41c:	cmpeq	r2, #0
   2e420:	strd	r0, [ip, #64]	; 0x40
   2e424:	beq	2e9f4 <__assert_fail@plt+0x1c400>
   2e428:	rsbs	r2, r2, #0
   2e42c:	ldr	r1, [r9, #16]
   2e430:	rsc	r3, r3, #0
   2e434:	str	r1, [ip, #48]	; 0x30
   2e438:	strd	r2, [ip, #40]	; 0x28
   2e43c:	mov	r8, #44	; 0x2c
   2e440:	ldr	r2, [sp, #84]	; 0x54
   2e444:	ldrd	r0, [sp, #56]	; 0x38
   2e448:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e44c:	ldrd	r2, [r9, #-104]	; 0xffffff98
   2e450:	ldr	r1, [sp, #64]	; 0x40
   2e454:	ldrd	r4, [r9, #8]
   2e458:	strd	r2, [r1, #64]	; 0x40
   2e45c:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   2e460:	cmp	r5, #-2147483648	; 0x80000000
   2e464:	cmpeq	r4, #0
   2e468:	strd	r2, [r1, #56]	; 0x38
   2e46c:	beq	2e9f4 <__assert_fail@plt+0x1c400>
   2e470:	rsbs	r0, r4, #0
   2e474:	mov	r2, r1
   2e478:	ldr	r3, [r9, #16]
   2e47c:	rsc	r1, r5, #0
   2e480:	str	r3, [r2, #48]	; 0x30
   2e484:	strd	r0, [r2, #40]	; 0x28
   2e488:	mov	r8, #43	; 0x2b
   2e48c:	ldr	r2, [sp, #84]	; 0x54
   2e490:	ldrd	r0, [sp, #56]	; 0x38
   2e494:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e498:	ldr	r4, [sp, #64]	; 0x40
   2e49c:	mov	lr, r9
   2e4a0:	add	ip, r4, #32
   2e4a4:	ldm	lr!, {r0, r1, r2, r3}
   2e4a8:	mov	r8, #46	; 0x2e
   2e4ac:	str	ip, [sp, #120]	; 0x78
   2e4b0:	mov	ip, r4
   2e4b4:	ldrd	r4, [r9, #-168]	; 0xffffff58
   2e4b8:	strd	r4, [ip, #56]	; 0x38
   2e4bc:	ldrd	r4, [r9, #-104]	; 0xffffff98
   2e4c0:	strd	r4, [ip, #64]	; 0x40
   2e4c4:	b	2d360 <__assert_fail@plt+0x1ad6c>
   2e4c8:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   2e4cc:	ldrd	r0, [r9, #8]
   2e4d0:	ldr	ip, [sp, #64]	; 0x40
   2e4d4:	mov	r8, #45	; 0x2d
   2e4d8:	strd	r2, [ip, #56]	; 0x38
   2e4dc:	strd	r0, [ip, #64]	; 0x40
   2e4e0:	ldr	r2, [sp, #84]	; 0x54
   2e4e4:	ldrd	r0, [sp, #56]	; 0x38
   2e4e8:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e4ec:	ldr	r3, [r9, #-208]	; 0xffffff30
   2e4f0:	cmp	r3, #3
   2e4f4:	ble	2e7f0 <__assert_fail@plt+0x1c1fc>
   2e4f8:	sub	lr, r9, #224	; 0xe0
   2e4fc:	ldr	r4, [sp, #64]	; 0x40
   2e500:	ldm	lr!, {r0, r1, r2, r3}
   2e504:	add	ip, r4, #32
   2e508:	mov	r8, #42	; 0x2a
   2e50c:	stmia	ip!, {r0, r1, r2, r3}
   2e510:	ldm	lr, {r0, r1}
   2e514:	ldrd	r2, [r9, #8]
   2e518:	stm	ip, {r0, r1}
   2e51c:	mov	r1, r4
   2e520:	ldrd	r4, [r9, #-104]	; 0xffffff98
   2e524:	strd	r2, [r1, #64]	; 0x40
   2e528:	ldr	r2, [sp, #84]	; 0x54
   2e52c:	strd	r4, [r1, #56]	; 0x38
   2e530:	ldrd	r0, [sp, #56]	; 0x38
   2e534:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e538:	ldrd	r2, [r9, #-104]	; 0xffffff98
   2e53c:	ldrd	r0, [r9, #8]
   2e540:	ldr	ip, [sp, #64]	; 0x40
   2e544:	mov	r8, #41	; 0x29
   2e548:	strd	r2, [ip, #56]	; 0x38
   2e54c:	strd	r0, [ip, #64]	; 0x40
   2e550:	ldr	r2, [sp, #84]	; 0x54
   2e554:	ldrd	r0, [sp, #56]	; 0x38
   2e558:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e55c:	mov	r4, r0
   2e560:	b	2cb7c <__assert_fail@plt+0x1a588>
   2e564:	cmn	r5, #1
   2e568:	beq	2e60c <__assert_fail@plt+0x1c018>
   2e56c:	mov	r1, r5
   2e570:	mov	r0, #-2147483648	; 0x80000000
   2e574:	str	r2, [sp, #68]	; 0x44
   2e578:	bl	4d590 <__assert_fail@plt+0x3af9c>
   2e57c:	cmp	r0, #9
   2e580:	ble	2c988 <__assert_fail@plt+0x1a394>
   2e584:	add	r5, r5, r5, lsl #2
   2e588:	ldr	r2, [sp, #68]	; 0x44
   2e58c:	lsl	r3, r5, #1
   2e590:	b	2cb98 <__assert_fail@plt+0x1a5a4>
   2e594:	ldrb	r5, [r6, #1]
   2e598:	add	r4, r1, r4
   2e59c:	add	r0, r6, #1
   2e5a0:	sub	r1, r5, #48	; 0x30
   2e5a4:	cmp	r1, #9
   2e5a8:	bls	2e5c4 <__assert_fail@plt+0x1bfd0>
   2e5ac:	mov	r1, r6
   2e5b0:	mov	r6, r3
   2e5b4:	mov	r3, r4
   2e5b8:	mov	r4, r2
   2e5bc:	mov	r2, r1
   2e5c0:	b	2cbdc <__assert_fail@plt+0x1a5e8>
   2e5c4:	mov	r6, r0
   2e5c8:	b	2c958 <__assert_fail@plt+0x1a364>
   2e5cc:	cmn	r4, #1
   2e5d0:	mov	r1, r4
   2e5d4:	mov	r0, #-2147483648	; 0x80000000
   2e5d8:	beq	2c968 <__assert_fail@plt+0x1a374>
   2e5dc:	str	r3, [sp, #68]	; 0x44
   2e5e0:	str	r2, [sp, #72]	; 0x48
   2e5e4:	bl	4d590 <__assert_fail@plt+0x3af9c>
   2e5e8:	ldr	r3, [sp, #68]	; 0x44
   2e5ec:	cmp	r0, #9
   2e5f0:	ble	2c984 <__assert_fail@plt+0x1a390>
   2e5f4:	ldr	r2, [sp, #72]	; 0x48
   2e5f8:	b	2c968 <__assert_fail@plt+0x1a374>
   2e5fc:	mov	r0, #0
   2e600:	b	2c934 <__assert_fail@plt+0x1a340>
   2e604:	mov	r0, #2
   2e608:	b	2c934 <__assert_fail@plt+0x1a340>
   2e60c:	mvn	r3, #9
   2e610:	b	2cbb0 <__assert_fail@plt+0x1a5bc>
   2e614:	cmp	r5, #4
   2e618:	bgt	2e8b0 <__assert_fail@plt+0x1c2bc>
   2e61c:	ldr	r1, [sp, #64]	; 0x40
   2e620:	cmp	r5, #2
   2e624:	ldr	r3, [r1, #172]	; 0xac
   2e628:	add	r3, r3, #1
   2e62c:	str	r3, [r1, #172]	; 0xac
   2e630:	ble	2eccc <__assert_fail@plt+0x1c6d8>
   2e634:	ldr	r5, [sp, #120]	; 0x78
   2e638:	mov	r2, #100	; 0x64
   2e63c:	mov	r3, #0
   2e640:	mov	r1, r4
   2e644:	mov	r0, r5
   2e648:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e64c:	mov	r2, #100	; 0x64
   2e650:	mov	r3, #0
   2e654:	mov	lr, r0
   2e658:	mov	ip, r1
   2e65c:	mov	r0, r5
   2e660:	mov	r1, r4
   2e664:	str	lr, [sp, #120]	; 0x78
   2e668:	mov	r4, ip
   2e66c:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e670:	ldr	r0, [sp, #64]	; 0x40
   2e674:	b	2dabc <__assert_fail@plt+0x1b4c8>
   2e678:	cmp	r5, #4
   2e67c:	bgt	2e938 <__assert_fail@plt+0x1c344>
   2e680:	ldr	r1, [sp, #64]	; 0x40
   2e684:	cmp	r5, #2
   2e688:	ldr	r3, [r1, #172]	; 0xac
   2e68c:	add	r3, r3, #1
   2e690:	str	r3, [r1, #172]	; 0xac
   2e694:	ble	2ead8 <__assert_fail@plt+0x1c4e4>
   2e698:	mov	r2, #100	; 0x64
   2e69c:	mov	r3, #0
   2e6a0:	mov	r0, r8
   2e6a4:	mov	r1, r4
   2e6a8:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e6ac:	mov	r2, #100	; 0x64
   2e6b0:	mov	r3, #0
   2e6b4:	mov	lr, r0
   2e6b8:	mov	ip, r1
   2e6bc:	mov	r0, r8
   2e6c0:	mov	r1, r4
   2e6c4:	mov	r8, lr
   2e6c8:	mov	r4, ip
   2e6cc:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e6d0:	ldr	r0, [sp, #64]	; 0x40
   2e6d4:	b	2d9d0 <__assert_fail@plt+0x1b3dc>
   2e6d8:	add	r3, sp, #144	; 0x90
   2e6dc:	add	r7, sp, #132	; 0x84
   2e6e0:	add	r2, r3, #7
   2e6e4:	mov	r3, r7
   2e6e8:	ldr	r1, [sp, #64]	; 0x40
   2e6ec:	add	r4, r4, #1
   2e6f0:	cmp	r3, r2
   2e6f4:	strbcc	r5, [r3]
   2e6f8:	str	r4, [r1]
   2e6fc:	ldrb	r5, [r4]
   2e700:	addcc	r3, r3, #1
   2e704:	cmp	r5, #65	; 0x41
   2e708:	sub	r1, r5, #97	; 0x61
   2e70c:	bcc	2e720 <__assert_fail@plt+0x1c12c>
   2e710:	cmp	r5, #90	; 0x5a
   2e714:	bls	2e6e8 <__assert_fail@plt+0x1c0f4>
   2e718:	cmp	r1, #25
   2e71c:	bls	2e6e8 <__assert_fail@plt+0x1c0f4>
   2e720:	cmp	r5, #46	; 0x2e
   2e724:	beq	2e6e8 <__assert_fail@plt+0x1c0f4>
   2e728:	mov	r2, #0
   2e72c:	strb	r2, [r3]
   2e730:	ldrb	r3, [sp, #132]	; 0x84
   2e734:	cmp	r3, r2
   2e738:	movne	r2, r7
   2e73c:	beq	2e75c <__assert_fail@plt+0x1c168>
   2e740:	sub	r1, r3, #97	; 0x61
   2e744:	cmp	r1, #25
   2e748:	subls	r3, r3, #32
   2e74c:	strb	r3, [r2]
   2e750:	ldrb	r3, [r2, #1]!
   2e754:	cmp	r3, #0
   2e758:	bne	2e740 <__assert_fail@plt+0x1c14c>
   2e75c:	ldr	r4, [pc, #2348]	; 2f090 <__assert_fail@plt+0x1ca9c>
   2e760:	ldr	r1, [pc, #2348]	; 2f094 <__assert_fail@plt+0x1caa0>
   2e764:	b	2e774 <__assert_fail@plt+0x1c180>
   2e768:	ldr	r1, [r4, #12]!
   2e76c:	cmp	r1, #0
   2e770:	beq	2eb60 <__assert_fail@plt+0x1c56c>
   2e774:	mov	r0, r7
   2e778:	bl	11f40 <strcmp@plt>
   2e77c:	cmp	r0, #0
   2e780:	bne	2e768 <__assert_fail@plt+0x1c174>
   2e784:	ldr	r2, [r4, #8]
   2e788:	ldr	r3, [r4, #4]
   2e78c:	str	r3, [sp, #52]	; 0x34
   2e790:	asr	r3, r2, #31
   2e794:	b	2ebb8 <__assert_fail@plt+0x1c5c4>
   2e798:	mov	r3, #0
   2e79c:	str	r3, [sp, #56]	; 0x38
   2e7a0:	str	r3, [sp, #52]	; 0x34
   2e7a4:	b	2cb70 <__assert_fail@plt+0x1a57c>
   2e7a8:	ldrb	ip, [sp, #56]	; 0x38
   2e7ac:	ldr	r2, [sp, #52]	; 0x34
   2e7b0:	ldr	r1, [pc, #2272]	; 2f098 <__assert_fail@plt+0x1caa4>
   2e7b4:	strb	ip, [sp, #240]	; 0xf0
   2e7b8:	sub	ip, r0, r4
   2e7bc:	str	ip, [sp, #124]	; 0x7c
   2e7c0:	ldr	ip, [sp, #64]	; 0x40
   2e7c4:	cmp	r2, #0
   2e7c8:	mov	r4, r3
   2e7cc:	ldr	r2, [pc, #2248]	; 2f09c <__assert_fail@plt+0x1caa8>
   2e7d0:	asr	r5, r3, #31
   2e7d4:	movne	r2, r1
   2e7d8:	str	r0, [ip]
   2e7dc:	str	r2, [sp, #52]	; 0x34
   2e7e0:	movne	r0, #19
   2e7e4:	moveq	r0, #20
   2e7e8:	strd	r4, [sp, #112]	; 0x70
   2e7ec:	b	2c65c <__assert_fail@plt+0x1a068>
   2e7f0:	ldr	r4, [sp, #64]	; 0x40
   2e7f4:	mov	lr, r9
   2e7f8:	add	ip, r4, #32
   2e7fc:	str	ip, [sp, #120]	; 0x78
   2e800:	mov	ip, r4
   2e804:	ldrd	r4, [r9, #-216]	; 0xffffff28
   2e808:	ldm	lr!, {r0, r1, r2, r3}
   2e80c:	mov	r8, #42	; 0x2a
   2e810:	strd	r4, [ip, #56]	; 0x38
   2e814:	b	2e4bc <__assert_fail@plt+0x1bec8>
   2e818:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   2e81c:	cmp	r4, #0
   2e820:	sbcs	r3, r5, #0
   2e824:	blt	2eca8 <__assert_fail@plt+0x1c6b4>
   2e828:	ldrd	r0, [sp, #56]	; 0x38
   2e82c:	mvn	r3, #0
   2e830:	mvn	r2, #0
   2e834:	cmp	r1, r3
   2e838:	cmpeq	r0, r2
   2e83c:	beq	2de90 <__assert_fail@plt+0x1b89c>
   2e840:	mov	r3, r1
   2e844:	mov	r2, r0
   2e848:	mov	r1, #-2147483648	; 0x80000000
   2e84c:	mov	r0, #0
   2e850:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e854:	cmp	r0, r4
   2e858:	sbcs	r3, r1, r5
   2e85c:	blt	2c930 <__assert_fail@plt+0x1a33c>
   2e860:	b	2de90 <__assert_fail@plt+0x1b89c>
   2e864:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   2e868:	cmp	r4, #0
   2e86c:	sbcs	r3, r5, #0
   2e870:	blt	2ecdc <__assert_fail@plt+0x1c6e8>
   2e874:	ldrd	r0, [sp, #56]	; 0x38
   2e878:	mvn	r3, #0
   2e87c:	mvn	r2, #0
   2e880:	cmp	r1, r3
   2e884:	cmpeq	r0, r2
   2e888:	beq	2d5bc <__assert_fail@plt+0x1afc8>
   2e88c:	mov	r3, r1
   2e890:	mov	r2, r0
   2e894:	mov	r1, #-2147483648	; 0x80000000
   2e898:	mov	r0, #0
   2e89c:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e8a0:	cmp	r0, r4
   2e8a4:	sbcs	r3, r1, r5
   2e8a8:	blt	2c930 <__assert_fail@plt+0x1a33c>
   2e8ac:	b	2d5bc <__assert_fail@plt+0x1afc8>
   2e8b0:	ldr	r2, [sp, #64]	; 0x40
   2e8b4:	add	r8, r8, #1
   2e8b8:	mov	r1, r4
   2e8bc:	str	r8, [r2, #156]	; 0x9c
   2e8c0:	ldr	r8, [sp, #120]	; 0x78
   2e8c4:	mov	r2, #100	; 0x64
   2e8c8:	mov	r0, r8
   2e8cc:	mov	r3, #0
   2e8d0:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e8d4:	ldr	ip, [sp, #64]	; 0x40
   2e8d8:	mov	r0, r8
   2e8dc:	mov	r1, r4
   2e8e0:	str	r8, [sp, #120]	; 0x78
   2e8e4:	mov	r8, #88	; 0x58
   2e8e8:	strd	r2, [ip, #64]	; 0x40
   2e8ec:	mov	r2, #100	; 0x64
   2e8f0:	mov	r3, #0
   2e8f4:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e8f8:	mov	r2, #100	; 0x64
   2e8fc:	mov	r3, #0
   2e900:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e904:	mov	r1, r4
   2e908:	ldr	r4, [sp, #64]	; 0x40
   2e90c:	ldr	r0, [sp, #120]	; 0x78
   2e910:	strd	r2, [r4, #56]	; 0x38
   2e914:	ldr	r2, [pc, #1924]	; 2f0a0 <__assert_fail@plt+0x1caac>
   2e918:	mov	r3, #0
   2e91c:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e920:	sub	r3, r5, #4
   2e924:	str	r3, [r4, #48]	; 0x30
   2e928:	ldr	r2, [sp, #84]	; 0x54
   2e92c:	strd	r0, [r4, #40]	; 0x28
   2e930:	ldrd	r0, [sp, #56]	; 0x38
   2e934:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e938:	ldr	r2, [sp, #64]	; 0x40
   2e93c:	ldr	r3, [sp, #120]	; 0x78
   2e940:	mov	r0, r8
   2e944:	add	r3, r3, #1
   2e948:	str	r3, [r2, #156]	; 0x9c
   2e94c:	mov	r1, r4
   2e950:	mov	r2, #100	; 0x64
   2e954:	mov	r3, #0
   2e958:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e95c:	ldr	ip, [sp, #64]	; 0x40
   2e960:	mov	r0, r8
   2e964:	mov	r1, r4
   2e968:	strd	r2, [ip, #64]	; 0x40
   2e96c:	mov	r2, #100	; 0x64
   2e970:	mov	r3, #0
   2e974:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e978:	mov	r2, #100	; 0x64
   2e97c:	mov	r3, #0
   2e980:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e984:	mov	r1, r4
   2e988:	ldr	r4, [sp, #64]	; 0x40
   2e98c:	mov	r0, r8
   2e990:	sub	r8, r5, #4
   2e994:	strd	r2, [r4, #56]	; 0x38
   2e998:	ldr	r2, [pc, #1792]	; 2f0a0 <__assert_fail@plt+0x1caac>
   2e99c:	mov	r3, #0
   2e9a0:	bl	4db88 <__assert_fail@plt+0x3b594>
   2e9a4:	str	r8, [r4, #48]	; 0x30
   2e9a8:	strd	r0, [r4, #40]	; 0x28
   2e9ac:	mov	r0, r4
   2e9b0:	b	2d9f0 <__assert_fail@plt+0x1b3fc>
   2e9b4:	subs	r2, r4, r0
   2e9b8:	sbc	r3, r5, r1
   2e9bc:	asr	r5, ip, #31
   2e9c0:	cmp	r2, ip
   2e9c4:	sbcs	r3, r3, r5
   2e9c8:	movlt	r3, #1
   2e9cc:	movge	r3, #0
   2e9d0:	cmp	r3, #0
   2e9d4:	bne	2e364 <__assert_fail@plt+0x1bd70>
   2e9d8:	ldr	r3, [sp, #64]	; 0x40
   2e9dc:	add	r0, ip, r0
   2e9e0:	mov	r8, #34	; 0x22
   2e9e4:	str	r0, [r3, #24]
   2e9e8:	ldr	r2, [sp, #84]	; 0x54
   2e9ec:	ldrd	r0, [sp, #56]	; 0x38
   2e9f0:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2e9f4:	ldr	r1, [sp, #64]	; 0x40
   2e9f8:	mov	r2, #0
   2e9fc:	mov	r3, #-2147483648	; 0x80000000
   2ea00:	mov	r0, #1
   2ea04:	strd	r2, [r1, #40]	; 0x28
   2ea08:	b	2c934 <__assert_fail@plt+0x1a340>
   2ea0c:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   2ea10:	cmp	r4, #0
   2ea14:	sbcs	r3, r5, #0
   2ea18:	blt	2eab4 <__assert_fail@plt+0x1c4c0>
   2ea1c:	ldrd	r0, [sp, #56]	; 0x38
   2ea20:	mvn	r3, #0
   2ea24:	mvn	r2, #0
   2ea28:	cmp	r1, r3
   2ea2c:	cmpeq	r0, r2
   2ea30:	beq	2cf18 <__assert_fail@plt+0x1a924>
   2ea34:	mov	r3, r1
   2ea38:	mov	r2, r0
   2ea3c:	mov	r1, #-2147483648	; 0x80000000
   2ea40:	mov	r0, #0
   2ea44:	bl	4db88 <__assert_fail@plt+0x3b594>
   2ea48:	cmp	r0, r4
   2ea4c:	sbcs	r3, r1, r5
   2ea50:	blt	2c930 <__assert_fail@plt+0x1a33c>
   2ea54:	b	2cf18 <__assert_fail@plt+0x1a924>
   2ea58:	mov	r2, #-2147483648	; 0x80000000
   2ea5c:	subs	r2, r2, r0
   2ea60:	mvn	r3, #0
   2ea64:	sbc	r3, r3, r1
   2ea68:	asr	r5, ip, #31
   2ea6c:	cmp	ip, r2
   2ea70:	sbcs	r3, r5, r3
   2ea74:	movlt	r3, #1
   2ea78:	movge	r3, #0
   2ea7c:	b	2e9d0 <__assert_fail@plt+0x1c3dc>
   2ea80:	ldr	r1, [sp, #64]	; 0x40
   2ea84:	mov	r2, #0
   2ea88:	mov	r3, #-2147483648	; 0x80000000
   2ea8c:	mov	r0, #1
   2ea90:	strd	r2, [r1, #64]	; 0x40
   2ea94:	b	2c934 <__assert_fail@plt+0x1a340>
   2ea98:	adds	r2, r0, ip
   2ea9c:	adc	r3, r1, ip, asr #31
   2eaa0:	cmp	r2, #-2147483648	; 0x80000000
   2eaa4:	sbcs	r3, r3, #0
   2eaa8:	movge	r3, #1
   2eaac:	movlt	r3, #0
   2eab0:	b	2e9d0 <__assert_fail@plt+0x1c3dc>
   2eab4:	ldrd	r2, [sp, #56]	; 0x38
   2eab8:	mvn	r0, #0
   2eabc:	mvn	r1, #-2147483648	; 0x80000000
   2eac0:	bl	4db88 <__assert_fail@plt+0x3b594>
   2eac4:	cmp	r4, r0
   2eac8:	sbcs	r3, r5, r1
   2eacc:	movlt	r3, #1
   2ead0:	movge	r3, #0
   2ead4:	b	2cf10 <__assert_fail@plt+0x1a91c>
   2ead8:	mov	r2, #0
   2eadc:	mov	r3, #0
   2eae0:	mov	r0, r1
   2eae4:	b	2d9d0 <__assert_fail@plt+0x1b3dc>
   2eae8:	mvn	r3, #0
   2eaec:	mvn	r2, #0
   2eaf0:	cmp	r5, r3
   2eaf4:	cmpeq	r4, r2
   2eaf8:	beq	2cf18 <__assert_fail@plt+0x1a924>
   2eafc:	mov	r2, r4
   2eb00:	mov	r3, r5
   2eb04:	mov	r0, #0
   2eb08:	mov	r1, #-2147483648	; 0x80000000
   2eb0c:	bl	4db88 <__assert_fail@plt+0x3b594>
   2eb10:	ldrd	r2, [sp, #56]	; 0x38
   2eb14:	cmp	r0, r2
   2eb18:	sbcs	r3, r1, r3
   2eb1c:	movlt	r3, #1
   2eb20:	movge	r3, #0
   2eb24:	b	2cf10 <__assert_fail@plt+0x1a91c>
   2eb28:	add	lr, sp, #176	; 0xb0
   2eb2c:	str	r4, [sp, #188]	; 0xbc
   2eb30:	ldr	r5, [sp, #64]	; 0x40
   2eb34:	str	r1, [sp, #192]	; 0xc0
   2eb38:	str	r8, [sp, #184]	; 0xb8
   2eb3c:	ldm	lr!, {r0, r1, r2, r3}
   2eb40:	add	ip, r5, #32
   2eb44:	mov	r4, #1
   2eb48:	strb	r4, [r5, #180]	; 0xb4
   2eb4c:	stmia	ip!, {r0, r1, r2, r3}
   2eb50:	ldm	lr, {r0, r1}
   2eb54:	stm	ip, {r0, r1}
   2eb58:	mov	r0, r5
   2eb5c:	b	2d9f0 <__assert_fail@plt+0x1b3fc>
   2eb60:	mov	r0, r7
   2eb64:	bl	12300 <strlen@plt>
   2eb68:	cmp	r0, #3
   2eb6c:	str	r0, [sp, #52]	; 0x34
   2eb70:	beq	2ed0c <__assert_fail@plt+0x1c718>
   2eb74:	cmp	r0, #4
   2eb78:	beq	2ed00 <__assert_fail@plt+0x1c70c>
   2eb7c:	ldr	r4, [pc, #1312]	; 2f0a4 <__assert_fail@plt+0x1cab0>
   2eb80:	ldr	r1, [pc, #1312]	; 2f0a8 <__assert_fail@plt+0x1cab4>
   2eb84:	b	2eb94 <__assert_fail@plt+0x1c5a0>
   2eb88:	ldr	r1, [r4, #12]!
   2eb8c:	cmp	r1, #0
   2eb90:	beq	2ee9c <__assert_fail@plt+0x1c8a8>
   2eb94:	mov	r0, r7
   2eb98:	bl	11f40 <strcmp@plt>
   2eb9c:	mov	r3, r4
   2eba0:	cmp	r0, #0
   2eba4:	bne	2eb88 <__assert_fail@plt+0x1c594>
   2eba8:	ldr	r2, [r3, #8]
   2ebac:	ldr	r3, [r3, #4]
   2ebb0:	str	r3, [sp, #52]	; 0x34
   2ebb4:	asr	r3, r2, #31
   2ebb8:	strd	r2, [sp, #240]	; 0xf0
   2ebbc:	b	2c63c <__assert_fail@plt+0x1a048>
   2ebc0:	mvn	r3, #0
   2ebc4:	mvn	r2, #0
   2ebc8:	cmp	r5, r3
   2ebcc:	cmpeq	r4, r2
   2ebd0:	beq	2de90 <__assert_fail@plt+0x1b89c>
   2ebd4:	mov	r2, r4
   2ebd8:	mov	r3, r5
   2ebdc:	mov	r0, #0
   2ebe0:	mov	r1, #-2147483648	; 0x80000000
   2ebe4:	bl	4db88 <__assert_fail@plt+0x3b594>
   2ebe8:	ldrd	r2, [sp, #56]	; 0x38
   2ebec:	cmp	r0, r2
   2ebf0:	sbcs	r3, r1, r3
   2ebf4:	movlt	r3, #1
   2ebf8:	movge	r3, #0
   2ebfc:	b	2de88 <__assert_fail@plt+0x1b894>
   2ec00:	ldr	r2, [sp, #64]	; 0x40
   2ec04:	add	r3, r4, #1
   2ec08:	str	r3, [r2]
   2ec0c:	ldrb	r3, [r4]
   2ec10:	cmp	r3, #0
   2ec14:	str	r3, [sp, #52]	; 0x34
   2ec18:	bne	2c990 <__assert_fail@plt+0x1a39c>
   2ec1c:	mov	r0, r3
   2ec20:	b	2c65c <__assert_fail@plt+0x1a068>
   2ec24:	ldr	r3, [sp, #120]	; 0x78
   2ec28:	add	ip, sp, #152	; 0x98
   2ec2c:	str	r4, [sp, #164]	; 0xa4
   2ec30:	str	r0, [sp, #168]	; 0xa8
   2ec34:	ldr	r5, [sp, #64]	; 0x40
   2ec38:	str	r3, [sp, #160]	; 0xa0
   2ec3c:	ldm	ip!, {r0, r1, r2, r3}
   2ec40:	add	lr, r5, #32
   2ec44:	mov	r4, #1
   2ec48:	strb	r4, [r5, #180]	; 0xb4
   2ec4c:	stmia	lr!, {r0, r1, r2, r3}
   2ec50:	mov	r8, #88	; 0x58
   2ec54:	ldm	ip, {r0, r1}
   2ec58:	ldr	r2, [sp, #84]	; 0x54
   2ec5c:	stm	lr, {r0, r1}
   2ec60:	ldrd	r0, [sp, #56]	; 0x38
   2ec64:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2ec68:	mvn	r3, #0
   2ec6c:	mvn	r2, #0
   2ec70:	cmp	r5, r3
   2ec74:	cmpeq	r4, r2
   2ec78:	beq	2d5bc <__assert_fail@plt+0x1afc8>
   2ec7c:	mov	r2, r4
   2ec80:	mov	r3, r5
   2ec84:	mov	r0, #0
   2ec88:	mov	r1, #-2147483648	; 0x80000000
   2ec8c:	bl	4db88 <__assert_fail@plt+0x3b594>
   2ec90:	ldrd	r2, [sp, #56]	; 0x38
   2ec94:	cmp	r0, r2
   2ec98:	sbcs	r3, r1, r3
   2ec9c:	movlt	r3, #1
   2eca0:	movge	r3, #0
   2eca4:	b	2d5b4 <__assert_fail@plt+0x1afc0>
   2eca8:	ldrd	r2, [sp, #56]	; 0x38
   2ecac:	mvn	r0, #0
   2ecb0:	mvn	r1, #-2147483648	; 0x80000000
   2ecb4:	bl	4db88 <__assert_fail@plt+0x3b594>
   2ecb8:	cmp	r4, r0
   2ecbc:	sbcs	r3, r5, r1
   2ecc0:	movlt	r3, #1
   2ecc4:	movge	r3, #0
   2ecc8:	b	2de88 <__assert_fail@plt+0x1b894>
   2eccc:	mov	r2, #0
   2ecd0:	mov	r3, #0
   2ecd4:	mov	r0, r1
   2ecd8:	b	2dabc <__assert_fail@plt+0x1b4c8>
   2ecdc:	ldrd	r2, [sp, #56]	; 0x38
   2ece0:	mvn	r0, #0
   2ece4:	mvn	r1, #-2147483648	; 0x80000000
   2ece8:	bl	4db88 <__assert_fail@plt+0x3b594>
   2ecec:	cmp	r4, r0
   2ecf0:	sbcs	r3, r5, r1
   2ecf4:	movlt	r3, #1
   2ecf8:	movge	r3, #0
   2ecfc:	b	2d5b4 <__assert_fail@plt+0x1afc0>
   2ed00:	ldrb	r3, [sp, #135]	; 0x87
   2ed04:	cmp	r3, #46	; 0x2e
   2ed08:	bne	2eb7c <__assert_fail@plt+0x1c588>
   2ed0c:	ldr	r4, [pc, #912]	; 2f0a4 <__assert_fail@plt+0x1cab0>
   2ed10:	ldr	r1, [pc, #912]	; 2f0a8 <__assert_fail@plt+0x1cab4>
   2ed14:	mov	r5, #3
   2ed18:	b	2ed28 <__assert_fail@plt+0x1c734>
   2ed1c:	ldr	r1, [r4, #12]!
   2ed20:	cmp	r1, #0
   2ed24:	beq	2ee9c <__assert_fail@plt+0x1c8a8>
   2ed28:	mov	r2, r5
   2ed2c:	mov	r0, r7
   2ed30:	bl	12594 <strncmp@plt>
   2ed34:	mov	r3, r4
   2ed38:	cmp	r0, #0
   2ed3c:	bne	2ed1c <__assert_fail@plt+0x1c728>
   2ed40:	b	2eba8 <__assert_fail@plt+0x1c5b4>
   2ed44:	ldr	r1, [pc, #864]	; 2f0ac <__assert_fail@plt+0x1cab8>
   2ed48:	mov	r0, r7
   2ed4c:	bl	11f40 <strcmp@plt>
   2ed50:	cmp	r0, #0
   2ed54:	beq	2efbc <__assert_fail@plt+0x1c9c8>
   2ed58:	ldr	r5, [pc, #848]	; 2f0b0 <__assert_fail@plt+0x1cabc>
   2ed5c:	ldr	r2, [pc, #848]	; 2f0b4 <__assert_fail@plt+0x1cac0>
   2ed60:	str	r4, [sp, #80]	; 0x50
   2ed64:	mov	r1, r2
   2ed68:	mov	r4, r5
   2ed6c:	mov	r0, r7
   2ed70:	bl	11f40 <strcmp@plt>
   2ed74:	cmp	r0, #0
   2ed78:	beq	2efd8 <__assert_fail@plt+0x1c9e4>
   2ed7c:	ldr	r1, [r4, #12]!
   2ed80:	cmp	r1, #0
   2ed84:	bne	2ed6c <__assert_fail@plt+0x1c778>
   2ed88:	ldr	r3, [sp, #52]	; 0x34
   2ed8c:	mov	r2, r1
   2ed90:	sub	r3, r3, #1
   2ed94:	ldr	r4, [sp, #80]	; 0x50
   2ed98:	ldrb	r1, [r7, r3]
   2ed9c:	cmp	r1, #83	; 0x53
   2eda0:	beq	2efec <__assert_fail@plt+0x1c9f8>
   2eda4:	ldr	r5, [pc, #780]	; 2f0b8 <__assert_fail@plt+0x1cac4>
   2eda8:	ldr	r1, [pc, #780]	; 2f0bc <__assert_fail@plt+0x1cac8>
   2edac:	mov	r0, r7
   2edb0:	bl	11f40 <strcmp@plt>
   2edb4:	cmp	r0, #0
   2edb8:	beq	2ef10 <__assert_fail@plt+0x1c91c>
   2edbc:	ldr	r1, [r5, #12]!
   2edc0:	cmp	r1, #0
   2edc4:	bne	2edac <__assert_fail@plt+0x1c7b8>
   2edc8:	ldr	r3, [sp, #52]	; 0x34
   2edcc:	cmp	r3, #1
   2edd0:	ldrb	r3, [sp, #132]	; 0x84
   2edd4:	beq	2f024 <__assert_fail@plt+0x1ca30>
   2edd8:	cmp	r3, #0
   2eddc:	movne	r2, #0
   2ede0:	movne	r3, r7
   2ede4:	movne	r1, r7
   2ede8:	beq	2ee8c <__assert_fail@plt+0x1c898>
   2edec:	ldrb	ip, [r1]
   2edf0:	ldrb	r0, [r1, #1]!
   2edf4:	cmp	ip, #46	; 0x2e
   2edf8:	add	ip, r3, #1
   2edfc:	movne	r3, ip
   2ee00:	moveq	r2, #1
   2ee04:	cmp	r0, #0
   2ee08:	strb	r0, [r3]
   2ee0c:	bne	2edec <__assert_fail@plt+0x1c7f8>
   2ee10:	cmp	r2, #0
   2ee14:	beq	2ee8c <__assert_fail@plt+0x1c898>
   2ee18:	ldr	r1, [pc, #672]	; 2f0c0 <__assert_fail@plt+0x1cacc>
   2ee1c:	ldr	r5, [sp, #68]	; 0x44
   2ee20:	mov	r0, r7
   2ee24:	bl	11f40 <strcmp@plt>
   2ee28:	cmp	r0, #0
   2ee2c:	beq	2f080 <__assert_fail@plt+0x1ca8c>
   2ee30:	ldr	r1, [r5, #12]!
   2ee34:	cmp	r1, #0
   2ee38:	bne	2ee20 <__assert_fail@plt+0x1c82c>
   2ee3c:	cmp	r4, #0
   2ee40:	beq	2ee68 <__assert_fail@plt+0x1c874>
   2ee44:	ldr	r5, [sp, #72]	; 0x48
   2ee48:	mov	r1, r4
   2ee4c:	mov	r0, r7
   2ee50:	bl	11f40 <strcmp@plt>
   2ee54:	cmp	r0, #0
   2ee58:	beq	2ef10 <__assert_fail@plt+0x1c91c>
   2ee5c:	ldr	r1, [r5, #12]!
   2ee60:	cmp	r1, #0
   2ee64:	bne	2ee4c <__assert_fail@plt+0x1c858>
   2ee68:	ldr	r1, [pc, #596]	; 2f0c4 <__assert_fail@plt+0x1cad0>
   2ee6c:	ldr	r4, [sp, #56]	; 0x38
   2ee70:	mov	r0, r7
   2ee74:	bl	11f40 <strcmp@plt>
   2ee78:	cmp	r0, #0
   2ee7c:	beq	2efd8 <__assert_fail@plt+0x1c9e4>
   2ee80:	ldr	r1, [r4, #12]!
   2ee84:	cmp	r1, #0
   2ee88:	bne	2ee70 <__assert_fail@plt+0x1c87c>
   2ee8c:	mov	r3, #63	; 0x3f
   2ee90:	mov	r0, #2
   2ee94:	str	r3, [sp, #52]	; 0x34
   2ee98:	b	2c65c <__assert_fail@plt+0x1a068>
   2ee9c:	ldr	r3, [pc, #548]	; 2f0c8 <__assert_fail@plt+0x1cad4>
   2eea0:	ldr	r1, [pc, #536]	; 2f0c0 <__assert_fail@plt+0x1cacc>
   2eea4:	str	r3, [sp, #68]	; 0x44
   2eea8:	mov	r4, r3
   2eeac:	b	2eebc <__assert_fail@plt+0x1c8c8>
   2eeb0:	ldr	r1, [r4, #12]!
   2eeb4:	cmp	r1, #0
   2eeb8:	beq	2eed0 <__assert_fail@plt+0x1c8dc>
   2eebc:	mov	r0, r7
   2eec0:	bl	11f40 <strcmp@plt>
   2eec4:	cmp	r0, #0
   2eec8:	bne	2eeb0 <__assert_fail@plt+0x1c8bc>
   2eecc:	b	2e784 <__assert_fail@plt+0x1c190>
   2eed0:	ldr	r3, [sp, #64]	; 0x40
   2eed4:	add	r3, r3, #188	; 0xbc
   2eed8:	ldr	r4, [r3]
   2eedc:	str	r3, [sp, #72]	; 0x48
   2eee0:	cmp	r4, #0
   2eee4:	beq	2ef88 <__assert_fail@plt+0x1c994>
   2eee8:	mov	r5, r3
   2eeec:	mov	r1, r4
   2eef0:	b	2ef00 <__assert_fail@plt+0x1c90c>
   2eef4:	ldr	r1, [r5, #12]!
   2eef8:	cmp	r1, #0
   2eefc:	beq	2ef88 <__assert_fail@plt+0x1c994>
   2ef00:	mov	r0, r7
   2ef04:	bl	11f40 <strcmp@plt>
   2ef08:	cmp	r0, #0
   2ef0c:	bne	2eef4 <__assert_fail@plt+0x1c900>
   2ef10:	ldr	r2, [r5, #8]
   2ef14:	ldr	r3, [r5, #4]
   2ef18:	str	r3, [sp, #52]	; 0x34
   2ef1c:	asr	r3, r2, #31
   2ef20:	b	2ebb8 <__assert_fail@plt+0x1c5c4>
   2ef24:	mov	r8, lr
   2ef28:	ldr	r2, [sp, #84]	; 0x54
   2ef2c:	ldrd	r0, [sp, #56]	; 0x38
   2ef30:	b	2cde8 <__assert_fail@plt+0x1a7f4>
   2ef34:	ldr	r0, [sp, #52]	; 0x34
   2ef38:	str	r3, [sp, #240]	; 0xf0
   2ef3c:	ldr	r3, [sp, #64]	; 0x40
   2ef40:	ldr	ip, [pc, #388]	; 2f0cc <__assert_fail@plt+0x1cad8>
   2ef44:	cmp	r0, #0
   2ef48:	str	r1, [r3]
   2ef4c:	moveq	r3, ip
   2ef50:	movne	r3, #276	; 0x114
   2ef54:	str	r2, [sp, #244]	; 0xf4
   2ef58:	moveq	r0, #22
   2ef5c:	movne	r0, #21
   2ef60:	str	r3, [sp, #52]	; 0x34
   2ef64:	b	2c65c <__assert_fail@plt+0x1a068>
   2ef68:	ldrb	r4, [ip, #1]!
   2ef6c:	sub	r1, r4, #48	; 0x30
   2ef70:	cmp	r1, #9
   2ef74:	bhi	2ccec <__assert_fail@plt+0x1a6f8>
   2ef78:	cmp	r4, #48	; 0x30
   2ef7c:	beq	2ef68 <__assert_fail@plt+0x1c974>
   2ef80:	add	r2, r2, #1
   2ef84:	b	2ccec <__assert_fail@plt+0x1a6f8>
   2ef88:	ldr	r3, [pc, #320]	; 2f0d0 <__assert_fail@plt+0x1cadc>
   2ef8c:	ldr	r1, [pc, #304]	; 2f0c4 <__assert_fail@plt+0x1cad0>
   2ef90:	str	r3, [sp, #56]	; 0x38
   2ef94:	mov	r5, r3
   2ef98:	b	2efa8 <__assert_fail@plt+0x1c9b4>
   2ef9c:	ldr	r1, [r5, #12]!
   2efa0:	cmp	r1, #0
   2efa4:	beq	2ed44 <__assert_fail@plt+0x1c750>
   2efa8:	mov	r0, r7
   2efac:	bl	11f40 <strcmp@plt>
   2efb0:	cmp	r0, #0
   2efb4:	bne	2ef9c <__assert_fail@plt+0x1c9a8>
   2efb8:	b	2ef10 <__assert_fail@plt+0x1c91c>
   2efbc:	mov	r3, #0
   2efc0:	ldr	r1, [pc, #268]	; 2f0d4 <__assert_fail@plt+0x1cae0>
   2efc4:	mov	r2, #0
   2efc8:	str	r1, [sp, #52]	; 0x34
   2efcc:	strd	r2, [sp, #240]	; 0xf0
   2efd0:	mov	r3, r1
   2efd4:	b	2c990 <__assert_fail@plt+0x1a39c>
   2efd8:	ldr	r2, [r4, #8]
   2efdc:	ldr	r3, [r4, #4]
   2efe0:	str	r3, [sp, #52]	; 0x34
   2efe4:	asr	r3, r2, #31
   2efe8:	b	2ebb8 <__assert_fail@plt+0x1c5c4>
   2efec:	ldr	r1, [pc, #192]	; 2f0b4 <__assert_fail@plt+0x1cac0>
   2eff0:	strb	r2, [r7, r3]
   2eff4:	mov	r0, r7
   2eff8:	str	r3, [sp, #80]	; 0x50
   2effc:	bl	11f40 <strcmp@plt>
   2f000:	ldr	r3, [sp, #80]	; 0x50
   2f004:	cmp	r0, #0
   2f008:	beq	2ef10 <__assert_fail@plt+0x1c91c>
   2f00c:	ldr	r1, [r5, #12]!
   2f010:	cmp	r1, #0
   2f014:	bne	2eff4 <__assert_fail@plt+0x1ca00>
   2f018:	mov	r2, #83	; 0x53
   2f01c:	strb	r2, [r7, r3]
   2f020:	b	2eda4 <__assert_fail@plt+0x1c7b0>
   2f024:	cmp	r3, #65	; 0x41
   2f028:	beq	2f064 <__assert_fail@plt+0x1ca70>
   2f02c:	ldr	r2, [pc, #164]	; 2f0d8 <__assert_fail@plt+0x1cae4>
   2f030:	ldr	r0, [r2, #12]
   2f034:	mov	r1, r2
   2f038:	cmp	r0, #0
   2f03c:	beq	2edd8 <__assert_fail@plt+0x1c7e4>
   2f040:	ldrb	r0, [r0]
   2f044:	add	r2, r2, #12
   2f048:	cmp	r0, r3
   2f04c:	bne	2f030 <__assert_fail@plt+0x1ca3c>
   2f050:	ldr	r2, [r1, #20]
   2f054:	ldr	r3, [r1, #16]
   2f058:	str	r3, [sp, #52]	; 0x34
   2f05c:	asr	r3, r2, #31
   2f060:	b	2ebb8 <__assert_fail@plt+0x1c5c4>
   2f064:	mov	r3, #0
   2f068:	ldr	r1, [pc, #108]	; 2f0dc <__assert_fail@plt+0x1cae8>
   2f06c:	mov	r2, #3600	; 0xe10
   2f070:	str	r1, [sp, #52]	; 0x34
   2f074:	strd	r2, [sp, #240]	; 0xf0
   2f078:	mov	r3, r1
   2f07c:	b	2c990 <__assert_fail@plt+0x1a39c>
   2f080:	mov	r3, r5
   2f084:	b	2eba8 <__assert_fail@plt+0x1c5b4>
   2f088:			; <UNDEFINED> instruction: 0xffff9d90
   2f08c:	andeq	r3, r5, r8, asr #2
   2f090:	andeq	r2, r5, ip, ror #13
   2f094:	andeq	r3, r5, r0, ror #1
   2f098:	andeq	r0, r0, r2, lsl r1
   2f09c:	andeq	r0, r0, r3, lsl r1
   2f0a0:	andeq	r2, r0, r0, lsl r7
   2f0a4:			; <UNDEFINED> instruction: 0x00052fb4
   2f0a8:	andeq	r3, r5, r4, ror #1
   2f0ac:	andeq	r3, r5, r4, ror #2
   2f0b0:	muleq	r5, r8, r9
   2f0b4:	strdeq	r3, [r5], -r4
   2f0b8:	andeq	r2, r5, ip, lsl sl
   2f0bc:	strdeq	r3, [r5], -ip
   2f0c0:	andeq	r3, r5, ip, ror #1
   2f0c4:	strdeq	r3, [r5], -r0
   2f0c8:	andeq	r2, r5, r8, lsr #14
   2f0cc:	andeq	r0, r0, r5, lsl r1
   2f0d0:	andeq	r2, r5, r8, asr r7
   2f0d4:	andeq	r0, r0, r3, lsl #2
   2f0d8:	andeq	r2, r5, r8, lsl fp
   2f0dc:	andeq	r0, r0, r1, lsl r1
   2f0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f0e4:	sub	sp, sp, #620	; 0x26c
   2f0e8:	subs	r4, r2, #0
   2f0ec:	str	r0, [sp, #12]
   2f0f0:	mov	r6, r1
   2f0f4:	mov	fp, r3
   2f0f8:	beq	2f5e8 <__assert_fail@plt+0x1cff4>
   2f0fc:	ldrb	r3, [r6]
   2f100:	ldr	r9, [r4]
   2f104:	ldr	r5, [r4, #4]
   2f108:	sub	r3, r3, #9
   2f10c:	cmp	r3, #23
   2f110:	bhi	2f13c <__assert_fail@plt+0x1cb48>
   2f114:	mov	r1, #1
   2f118:	ldr	r2, [pc, #3200]	; 2fda0 <__assert_fail@plt+0x1d7ac>
   2f11c:	ands	r3, r2, r1, lsl r3
   2f120:	beq	2f13c <__assert_fail@plt+0x1cb48>
   2f124:	ldrb	r3, [r6, #1]!
   2f128:	sub	r3, r3, #9
   2f12c:	cmp	r3, #23
   2f130:	bhi	2f13c <__assert_fail@plt+0x1cb48>
   2f134:	ands	r3, r2, r1, lsl r3
   2f138:	bne	2f124 <__assert_fail@plt+0x1cb30>
   2f13c:	mov	r2, #56	; 0x38
   2f140:	mov	r1, #0
   2f144:	add	r0, sp, #232	; 0xe8
   2f148:	bl	12378 <memset@plt>
   2f14c:	mov	r2, #4
   2f150:	ldr	r1, [pc, #3148]	; 2fda4 <__assert_fail@plt+0x1d7b0>
   2f154:	mov	r0, r6
   2f158:	bl	12594 <strncmp@plt>
   2f15c:	cmp	r0, #0
   2f160:	bne	2f1c0 <__assert_fail@plt+0x1cbcc>
   2f164:	ldrb	ip, [r6, #4]
   2f168:	add	r7, r6, #4
   2f16c:	cmp	ip, #0
   2f170:	beq	2f1c0 <__assert_fail@plt+0x1cbcc>
   2f174:	mov	r1, r7
   2f178:	mov	r3, ip
   2f17c:	mov	r0, #1
   2f180:	b	2f1a0 <__assert_fail@plt+0x1cbac>
   2f184:	cmp	r3, #34	; 0x22
   2f188:	beq	2f3cc <__assert_fail@plt+0x1cdd8>
   2f18c:	ldrb	r3, [r2, #1]
   2f190:	add	r0, r0, #1
   2f194:	add	r1, r2, #1
   2f198:	cmp	r3, #0
   2f19c:	beq	2f1c0 <__assert_fail@plt+0x1cbcc>
   2f1a0:	cmp	r3, #92	; 0x5c
   2f1a4:	mov	r2, r1
   2f1a8:	bne	2f184 <__assert_fail@plt+0x1cb90>
   2f1ac:	ldrb	r3, [r1, #1]
   2f1b0:	add	r2, r1, #1
   2f1b4:	cmp	r3, #92	; 0x5c
   2f1b8:	cmpne	r3, #34	; 0x22
   2f1bc:	beq	2f18c <__assert_fail@plt+0x1cb98>
   2f1c0:	mov	r1, r4
   2f1c4:	add	r2, sp, #144	; 0x90
   2f1c8:	mov	r0, fp
   2f1cc:	bl	4c304 <__assert_fail@plt+0x39d10>
   2f1d0:	cmp	r0, #0
   2f1d4:	beq	2f5dc <__assert_fail@plt+0x1cfe8>
   2f1d8:	mov	sl, fp
   2f1dc:	mov	r3, #0
   2f1e0:	str	r3, [sp, #8]
   2f1e4:	ldr	r4, [sp, #160]	; 0xa0
   2f1e8:	ldrb	r7, [r6]
   2f1ec:	add	r4, r4, #1
   2f1f0:	str	r5, [sp, #484]	; 0x1e4
   2f1f4:	str	r7, [sp]
   2f1f8:	asr	r5, r4, #31
   2f1fc:	add	r7, sp, #448	; 0x1c0
   2f200:	mov	r8, #0
   2f204:	strd	r4, [r7]
   2f208:	ldr	r5, [sp]
   2f20c:	ldr	r4, [pc, #2964]	; 2fda8 <__assert_fail@plt+0x1d7b4>
   2f210:	cmp	r5, r8
   2f214:	moveq	r6, r4
   2f218:	str	r6, [sp, #392]	; 0x188
   2f21c:	ldr	r4, [pc, #2952]	; 2fdac <__assert_fail@plt+0x1d7b8>
   2f220:	ldr	r6, [sp, #164]	; 0xa4
   2f224:	ldr	r7, [sp, #156]	; 0x9c
   2f228:	adds	r4, r4, r6
   2f22c:	mov	r5, #0
   2f230:	adc	r5, r5, r6, asr #31
   2f234:	add	r6, sp, #432	; 0x1b0
   2f238:	add	ip, sp, #232	; 0xe8
   2f23c:	strd	r4, [r6]
   2f240:	mov	r4, r7
   2f244:	asr	r5, r7, #31
   2f248:	add	r6, sp, #456	; 0x1c8
   2f24c:	ldm	ip!, {r0, r1, r2, r3}
   2f250:	add	lr, sp, #488	; 0x1e8
   2f254:	strd	r4, [r6]
   2f258:	ldr	r6, [sp, #152]	; 0x98
   2f25c:	add	r4, sp, #464	; 0x1d0
   2f260:	stmia	lr!, {r0, r1, r2, r3}
   2f264:	asr	r7, r6, #31
   2f268:	ldm	ip!, {r0, r1, r2, r3}
   2f26c:	cmp	r9, r8
   2f270:	strd	r6, [r4]
   2f274:	ldr	r4, [sp, #148]	; 0x94
   2f278:	add	r6, sp, #472	; 0x1d8
   2f27c:	str	r8, [sp, #440]	; 0x1b8
   2f280:	asr	r5, r4, #31
   2f284:	strd	r4, [r6]
   2f288:	ldr	r4, [sp, #176]	; 0xb0
   2f28c:	ldr	r6, [sp, #144]	; 0x90
   2f290:	mov	r5, #2
   2f294:	str	r6, [sp, #480]	; 0x1e0
   2f298:	str	r4, [sp, #132]	; 0x84
   2f29c:	str	r5, [sp, #420]	; 0x1a4
   2f2a0:	stmia	lr!, {r0, r1, r2, r3}
   2f2a4:	ldm	ip!, {r0, r1, r2, r3}
   2f2a8:	ldr	r5, [sp, #184]	; 0xb8
   2f2ac:	strb	r8, [sp, #544]	; 0x220
   2f2b0:	stmia	lr!, {r0, r1, r2, r3}
   2f2b4:	ldm	ip, {r0, r1}
   2f2b8:	ldr	r3, [pc, #2800]	; 2fdb0 <__assert_fail@plt+0x1d7bc>
   2f2bc:	strb	r8, [sp, #545]	; 0x221
   2f2c0:	str	r8, [sp, #548]	; 0x224
   2f2c4:	str	r8, [sp, #552]	; 0x228
   2f2c8:	str	r8, [sp, #564]	; 0x234
   2f2cc:	str	r8, [sp, #556]	; 0x22c
   2f2d0:	str	r8, [sp, #560]	; 0x230
   2f2d4:	str	r8, [sp, #568]	; 0x238
   2f2d8:	strb	r8, [sp, #572]	; 0x23c
   2f2dc:	strb	r8, [sp, #573]	; 0x23d
   2f2e0:	strb	r8, [sp, #574]	; 0x23e
   2f2e4:	strb	r8, [sp, #576]	; 0x240
   2f2e8:	strb	r8, [sp, #575]	; 0x23f
   2f2ec:	strb	r8, [sp, #577]	; 0x241
   2f2f0:	strb	r8, [sp, #578]	; 0x242
   2f2f4:	strb	r8, [sp, #579]	; 0x243
   2f2f8:	stm	lr, {r0, r1}
   2f2fc:	str	r5, [sp, #580]	; 0x244
   2f300:	str	r3, [sp, #584]	; 0x248
   2f304:	str	r4, [sp, #588]	; 0x24c
   2f308:	str	r8, [sp, #592]	; 0x250
   2f30c:	blt	2f4a8 <__assert_fail@plt+0x1ceb4>
   2f310:	ldr	r4, [pc, #2716]	; 2fdb4 <__assert_fail@plt+0x1d7c0>
   2f314:	ldr	r6, [pc, #2716]	; 2fdb8 <__assert_fail@plt+0x1d7c4>
   2f318:	sub	r5, r9, #-2147483647	; 0x80000001
   2f31c:	cmp	r9, r4
   2f320:	sub	r3, r5, r4
   2f324:	add	r2, sp, #188	; 0xbc
   2f328:	add	r1, sp, #68	; 0x44
   2f32c:	mov	r0, sl
   2f330:	bgt	2f370 <__assert_fail@plt+0x1cd7c>
   2f334:	str	r3, [sp, #68]	; 0x44
   2f338:	bl	4c304 <__assert_fail@plt+0x39d10>
   2f33c:	sub	r4, r4, #7733248	; 0x760000
   2f340:	sub	r4, r4, #42752	; 0xa700
   2f344:	cmp	r0, #0
   2f348:	beq	2f368 <__assert_fail@plt+0x1cd74>
   2f34c:	ldr	r3, [sp, #228]	; 0xe4
   2f350:	cmp	r3, #0
   2f354:	beq	2f368 <__assert_fail@plt+0x1cd74>
   2f358:	ldr	r2, [sp, #220]	; 0xdc
   2f35c:	ldr	r1, [sp, #588]	; 0x24c
   2f360:	cmp	r2, r1
   2f364:	bne	2f5f8 <__assert_fail@plt+0x1d004>
   2f368:	cmp	r4, r6
   2f36c:	bne	2f31c <__assert_fail@plt+0x1cd28>
   2f370:	ldr	r0, [sp, #580]	; 0x244
   2f374:	cmp	r0, #0
   2f378:	beq	2f39c <__assert_fail@plt+0x1cda8>
   2f37c:	ldr	r1, [sp, #592]	; 0x250
   2f380:	cmp	r1, #0
   2f384:	beq	2f39c <__assert_fail@plt+0x1cda8>
   2f388:	bl	11f40 <strcmp@plt>
   2f38c:	cmp	r0, #0
   2f390:	mvneq	r3, #0
   2f394:	streq	r0, [sp, #592]	; 0x250
   2f398:	streq	r3, [sp, #588]	; 0x24c
   2f39c:	add	r0, sp, #392	; 0x188
   2f3a0:	bl	2c5f0 <__assert_fail@plt+0x19ffc>
   2f3a4:	subs	r9, r0, #0
   2f3a8:	bne	2f480 <__assert_fail@plt+0x1ce8c>
   2f3ac:	ldrb	r4, [sp, #544]	; 0x220
   2f3b0:	cmp	r4, #0
   2f3b4:	beq	2f50c <__assert_fail@plt+0x1cf18>
   2f3b8:	add	r3, sp, #480	; 0x1e0
   2f3bc:	ldm	r3, {r0, r1}
   2f3c0:	ldr	r3, [sp, #12]
   2f3c4:	stm	r3, {r0, r1}
   2f3c8:	b	2f484 <__assert_fail@plt+0x1ce90>
   2f3cc:	cmp	r0, #100	; 0x64
   2f3d0:	movle	r3, #0
   2f3d4:	addle	r0, sp, #292	; 0x124
   2f3d8:	strle	r3, [sp, #8]
   2f3dc:	bgt	2f5c4 <__assert_fail@plt+0x1cfd0>
   2f3e0:	cmp	ip, #34	; 0x22
   2f3e4:	mov	r2, r0
   2f3e8:	beq	2f414 <__assert_fail@plt+0x1ce20>
   2f3ec:	sub	ip, ip, #92	; 0x5c
   2f3f0:	clz	ip, ip
   2f3f4:	lsr	ip, ip, #5
   2f3f8:	add	r3, r7, ip
   2f3fc:	ldrb	r1, [r7, ip]
   2f400:	ldrb	ip, [r3, #1]
   2f404:	add	r7, r3, #1
   2f408:	strb	r1, [r2], #1
   2f40c:	cmp	ip, #34	; 0x22
   2f410:	bne	2f3ec <__assert_fail@plt+0x1cdf8>
   2f414:	mov	r3, #0
   2f418:	strb	r3, [r2]
   2f41c:	bl	4c250 <__assert_fail@plt+0x39c5c>
   2f420:	subs	sl, r0, #0
   2f424:	moveq	r4, sl
   2f428:	beq	2f494 <__assert_fail@plt+0x1cea0>
   2f42c:	ldrb	r3, [r7, #1]
   2f430:	add	r6, r7, #1
   2f434:	sub	r3, r3, #9
   2f438:	cmp	r3, #23
   2f43c:	bhi	2f468 <__assert_fail@plt+0x1ce74>
   2f440:	mov	r1, #1
   2f444:	ldr	r2, [pc, #2388]	; 2fda0 <__assert_fail@plt+0x1d7ac>
   2f448:	ands	r3, r2, r1, lsl r3
   2f44c:	beq	2f468 <__assert_fail@plt+0x1ce74>
   2f450:	ldrb	r3, [r6, #1]!
   2f454:	sub	r3, r3, #9
   2f458:	cmp	r3, #23
   2f45c:	bhi	2f468 <__assert_fail@plt+0x1ce74>
   2f460:	ands	r3, r2, r1, lsl r3
   2f464:	bne	2f450 <__assert_fail@plt+0x1ce5c>
   2f468:	mov	r1, r4
   2f46c:	add	r2, sp, #144	; 0x90
   2f470:	mov	r0, sl
   2f474:	bl	4c304 <__assert_fail@plt+0x39d10>
   2f478:	cmp	r0, #0
   2f47c:	bne	2f1e4 <__assert_fail@plt+0x1cbf0>
   2f480:	mov	r4, #0
   2f484:	cmp	sl, fp
   2f488:	beq	2f494 <__assert_fail@plt+0x1cea0>
   2f48c:	mov	r0, sl
   2f490:	bl	4c2d8 <__assert_fail@plt+0x39ce4>
   2f494:	ldr	r0, [sp, #8]
   2f498:	bl	376d0 <__assert_fail@plt+0x250dc>
   2f49c:	mov	r0, r4
   2f4a0:	add	sp, sp, #620	; 0x26c
   2f4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f4a8:	add	r4, r9, #7733248	; 0x760000
   2f4ac:	add	r9, r9, #30932992	; 0x1d80000
   2f4b0:	add	r4, r4, #42752	; 0xa700
   2f4b4:	add	r9, r9, #171008	; 0x29c00
   2f4b8:	add	r6, sp, #188	; 0xbc
   2f4bc:	add	r5, sp, #68	; 0x44
   2f4c0:	mov	r2, r6
   2f4c4:	mov	r1, r5
   2f4c8:	mov	r0, sl
   2f4cc:	str	r4, [sp, #68]	; 0x44
   2f4d0:	bl	4c304 <__assert_fail@plt+0x39d10>
   2f4d4:	add	r4, r4, #7733248	; 0x760000
   2f4d8:	add	r4, r4, #42752	; 0xa700
   2f4dc:	cmp	r0, #0
   2f4e0:	beq	2f500 <__assert_fail@plt+0x1cf0c>
   2f4e4:	ldr	r3, [sp, #228]	; 0xe4
   2f4e8:	cmp	r3, #0
   2f4ec:	beq	2f500 <__assert_fail@plt+0x1cf0c>
   2f4f0:	ldr	r2, [sp, #220]	; 0xdc
   2f4f4:	ldr	r1, [sp, #588]	; 0x24c
   2f4f8:	cmp	r2, r1
   2f4fc:	bne	2f5f8 <__assert_fail@plt+0x1d004>
   2f500:	cmp	r4, r9
   2f504:	bne	2f4c0 <__assert_fail@plt+0x1cecc>
   2f508:	b	2f370 <__assert_fail@plt+0x1cd7c>
   2f50c:	ldr	r7, [sp, #564]	; 0x234
   2f510:	ldr	r6, [sp, #548]	; 0x224
   2f514:	ldr	r5, [sp, #552]	; 0x228
   2f518:	orr	lr, r7, r6
   2f51c:	ldr	r3, [sp, #560]	; 0x230
   2f520:	ldr	ip, [sp, #556]	; 0x22c
   2f524:	ldr	r2, [sp, #568]	; 0x238
   2f528:	orr	lr, lr, r5
   2f52c:	orr	r3, lr, r3
   2f530:	add	r2, ip, r2
   2f534:	orr	r3, r3, r2
   2f538:	cmp	r3, #1
   2f53c:	bgt	2f484 <__assert_fail@plt+0x1ce90>
   2f540:	add	r3, sp, #432	; 0x1b0
   2f544:	ldrd	r0, [r3]
   2f548:	cmp	r0, #0
   2f54c:	sbcs	r3, r1, #0
   2f550:	blt	2f664 <__assert_fail@plt+0x1d070>
   2f554:	ldr	r3, [sp, #440]	; 0x1b8
   2f558:	cmp	r3, #2
   2f55c:	beq	2f690 <__assert_fail@plt+0x1d09c>
   2f560:	ldr	r2, [pc, #2132]	; 2fdbc <__assert_fail@plt+0x1d7c8>
   2f564:	mov	r3, #0
   2f568:	cmp	r2, r0
   2f56c:	sbcs	r3, r3, r1
   2f570:	sublt	r3, r0, #1888	; 0x760
   2f574:	sublt	r3, r3, #12
   2f578:	strlt	r3, [sp, #120]	; 0x78
   2f57c:	blt	2f484 <__assert_fail@plt+0x1ce90>
   2f580:	sub	r3, r0, #1888	; 0x760
   2f584:	sub	r3, r3, #12
   2f588:	str	r3, [sp, #120]	; 0x78
   2f58c:	add	r3, sp, #448	; 0x1c0
   2f590:	mvn	r2, #0
   2f594:	ldrd	r0, [r3]
   2f598:	mov	r3, #0
   2f59c:	strd	r0, [sp]
   2f5a0:	subs	r0, r0, #-2147483647	; 0x80000001
   2f5a4:	adc	r1, r1, #0
   2f5a8:	cmp	r1, r3
   2f5ac:	cmpeq	r0, r2
   2f5b0:	bls	2f614 <__assert_fail@plt+0x1d020>
   2f5b4:	ldr	r3, [sp]
   2f5b8:	sub	r8, r3, #1
   2f5bc:	str	r8, [sp, #116]	; 0x74
   2f5c0:	b	2f484 <__assert_fail@plt+0x1ce90>
   2f5c4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   2f5c8:	subs	r3, r0, #0
   2f5cc:	str	r3, [sp, #8]
   2f5d0:	movne	r0, r3
   2f5d4:	ldrbne	ip, [r6, #4]
   2f5d8:	bne	2f3e0 <__assert_fail@plt+0x1cdec>
   2f5dc:	mov	r4, #0
   2f5e0:	str	r4, [sp, #8]
   2f5e4:	b	2f494 <__assert_fail@plt+0x1cea0>
   2f5e8:	add	r0, sp, #60	; 0x3c
   2f5ec:	bl	4ce24 <__assert_fail@plt+0x3a830>
   2f5f0:	add	r4, sp, #60	; 0x3c
   2f5f4:	b	2f0fc <__assert_fail@plt+0x1cb08>
   2f5f8:	ldr	r0, [pc, #1968]	; 2fdb0 <__assert_fail@plt+0x1d7bc>
   2f5fc:	mov	r1, #0
   2f600:	str	r3, [sp, #592]	; 0x250
   2f604:	str	r2, [sp, #600]	; 0x258
   2f608:	str	r0, [sp, #596]	; 0x254
   2f60c:	str	r1, [sp, #604]	; 0x25c
   2f610:	b	2f370 <__assert_fail@plt+0x1cd7c>
   2f614:	add	r3, sp, #456	; 0x1c8
   2f618:	ldrd	r0, [r3]
   2f61c:	ldr	r3, [sp]
   2f620:	cmp	r0, #0
   2f624:	sub	r3, r3, #1
   2f628:	str	r3, [sp, #24]
   2f62c:	str	r3, [sp, #116]	; 0x74
   2f630:	sbcs	r3, r1, #0
   2f634:	strd	r0, [sp, #16]
   2f638:	blt	2fc80 <__assert_fail@plt+0x1d68c>
   2f63c:	mov	r3, r1
   2f640:	cmp	r0, #-2147483648	; 0x80000000
   2f644:	sbcs	r3, r3, #0
   2f648:	movge	r8, #1
   2f64c:	movlt	r8, #0
   2f650:	cmp	r8, #0
   2f654:	beq	2f6e4 <__assert_fail@plt+0x1d0f0>
   2f658:	ldr	r3, [sp, #16]
   2f65c:	str	r3, [sp, #112]	; 0x70
   2f660:	b	2f484 <__assert_fail@plt+0x1ce90>
   2f664:	ldr	r2, [pc, #1876]	; 2fdc0 <__assert_fail@plt+0x1d7cc>
   2f668:	mvn	r3, #0
   2f66c:	cmp	r0, r2
   2f670:	sbcs	r3, r1, r3
   2f674:	blt	2f6b0 <__assert_fail@plt+0x1d0bc>
   2f678:	rsb	r0, r0, #-16777216	; 0xff000000
   2f67c:	add	r0, r0, #16711680	; 0xff0000
   2f680:	add	r0, r0, #63488	; 0xf800
   2f684:	add	r0, r0, #148	; 0x94
   2f688:	str	r0, [sp, #120]	; 0x78
   2f68c:	b	2f58c <__assert_fail@plt+0x1cf98>
   2f690:	cmp	r0, #69	; 0x45
   2f694:	sbcs	r3, r1, #0
   2f698:	movlt	r2, #2000	; 0x7d0
   2f69c:	ldrge	r2, [pc, #1800]	; 2fdac <__assert_fail@plt+0x1d7b8>
   2f6a0:	mov	r3, #0
   2f6a4:	adds	r0, r0, r2
   2f6a8:	adc	r1, r1, r3
   2f6ac:	b	2f560 <__assert_fail@plt+0x1cf6c>
   2f6b0:	ldr	r2, [pc, #1804]	; 2fdc4 <__assert_fail@plt+0x1d7d0>
   2f6b4:	mvn	r3, #0
   2f6b8:	subs	r2, r2, r0
   2f6bc:	sbc	r3, r3, r1
   2f6c0:	cmp	r2, #-2147483648	; 0x80000000
   2f6c4:	sbcs	r3, r3, #0
   2f6c8:	blt	2f678 <__assert_fail@plt+0x1d084>
   2f6cc:	rsb	r0, r0, #-16777216	; 0xff000000
   2f6d0:	add	r0, r0, #16711680	; 0xff0000
   2f6d4:	add	r0, r0, #63488	; 0xf800
   2f6d8:	add	r0, r0, #148	; 0x94
   2f6dc:	str	r0, [sp, #120]	; 0x78
   2f6e0:	b	2f484 <__assert_fail@plt+0x1ce90>
   2f6e4:	ldr	r3, [sp, #16]
   2f6e8:	cmp	r7, #0
   2f6ec:	str	r3, [sp, #112]	; 0x70
   2f6f0:	bne	2f710 <__assert_fail@plt+0x1d11c>
   2f6f4:	ldrb	r3, [sp, #545]	; 0x221
   2f6f8:	cmp	r6, #0
   2f6fc:	cmpeq	r5, #0
   2f700:	moveq	r5, #1
   2f704:	movne	r5, #0
   2f708:	tst	r5, r3
   2f70c:	beq	2fca8 <__assert_fail@plt+0x1d6b4>
   2f710:	ldr	r1, [sp, #420]	; 0x1a4
   2f714:	add	r3, sp, #464	; 0x1d0
   2f718:	cmp	r1, #0
   2f71c:	str	r1, [sp]
   2f720:	ldrd	r2, [r3]
   2f724:	beq	2fcc4 <__assert_fail@plt+0x1d6d0>
   2f728:	cmp	r1, #1
   2f72c:	bne	2fc68 <__assert_fail@plt+0x1d674>
   2f730:	subs	r0, r2, #1
   2f734:	sbc	r1, r3, #0
   2f738:	cmp	r1, #0
   2f73c:	cmpeq	r0, #10
   2f740:	bhi	2fdfc <__assert_fail@plt+0x1d808>
   2f744:	add	r3, r2, #12
   2f748:	mov	r1, r3
   2f74c:	str	r3, [sp]
   2f750:	ldr	r3, [sp, #480]	; 0x1e0
   2f754:	ldr	r2, [sp, #472]	; 0x1d8
   2f758:	mov	r9, r3
   2f75c:	str	r2, [sp, #32]
   2f760:	str	r1, [sp, #108]	; 0x6c
   2f764:	str	r2, [sp, #104]	; 0x68
   2f768:	str	r3, [sp, #100]	; 0x64
   2f76c:	cmp	lr, #0
   2f770:	mvnne	r3, #0
   2f774:	strne	r3, [sp, #132]	; 0x84
   2f778:	cmp	ip, #0
   2f77c:	ldr	ip, [sp, #32]
   2f780:	ldrne	r3, [sp, #412]	; 0x19c
   2f784:	str	ip, [sp, #192]	; 0xc0
   2f788:	ldr	ip, [sp]
   2f78c:	ldreq	r3, [sp, #132]	; 0x84
   2f790:	str	ip, [sp, #196]	; 0xc4
   2f794:	ldr	ip, [sp, #16]
   2f798:	streq	r3, [sp, #36]	; 0x24
   2f79c:	str	ip, [sp, #200]	; 0xc8
   2f7a0:	ldr	ip, [sp, #24]
   2f7a4:	strne	r3, [sp, #36]	; 0x24
   2f7a8:	ldr	r2, [sp, #120]	; 0x78
   2f7ac:	str	ip, [sp, #204]	; 0xcc
   2f7b0:	ldr	ip, [sp, #36]	; 0x24
   2f7b4:	strne	r3, [sp, #132]	; 0x84
   2f7b8:	add	r1, sp, #100	; 0x64
   2f7bc:	mvn	r3, #0
   2f7c0:	mov	r0, sl
   2f7c4:	str	r2, [sp, #44]	; 0x2c
   2f7c8:	str	ip, [sp, #220]	; 0xdc
   2f7cc:	str	r2, [sp, #208]	; 0xd0
   2f7d0:	str	r3, [sp, #124]	; 0x7c
   2f7d4:	str	r9, [sp, #188]	; 0xbc
   2f7d8:	bl	4c3f8 <__assert_fail@plt+0x39e04>
   2f7dc:	add	r6, sp, #188	; 0xbc
   2f7e0:	add	r1, sp, #100	; 0x64
   2f7e4:	mov	r5, r0
   2f7e8:	mov	r0, r6
   2f7ec:	bl	2bb98 <__assert_fail@plt+0x195a4>
   2f7f0:	subs	r4, r0, #0
   2f7f4:	bne	2f9ac <__assert_fail@plt+0x1d3b8>
   2f7f8:	ldr	r3, [sp, #568]	; 0x238
   2f7fc:	cmp	r3, #0
   2f800:	beq	2f484 <__assert_fail@plt+0x1ce90>
   2f804:	ldr	r7, [sp, #416]	; 0x1a0
   2f808:	ldr	r2, [pc, #1464]	; 2fdc8 <__assert_fail@plt+0x1d7d4>
   2f80c:	add	r5, sp, #68	; 0x44
   2f810:	asr	r3, r7, #31
   2f814:	smull	r1, r2, r2, r7
   2f818:	ldr	r1, [pc, #1452]	; 2fdcc <__assert_fail@plt+0x1d7d8>
   2f81c:	add	r2, r2, r7
   2f820:	mov	ip, #88	; 0x58
   2f824:	rsb	r3, r3, r2, asr #11
   2f828:	cmp	r3, #0
   2f82c:	str	r3, [sp, #52]	; 0x34
   2f830:	rsblt	r3, r3, #0
   2f834:	cmp	r7, #0
   2f838:	movge	r2, #43	; 0x2b
   2f83c:	movlt	r2, #45	; 0x2d
   2f840:	add	r0, r5, #3
   2f844:	str	r0, [sp, #40]	; 0x28
   2f848:	strb	ip, [sp, #70]	; 0x46
   2f84c:	strb	ip, [sp, #69]	; 0x45
   2f850:	strb	ip, [sp, #68]	; 0x44
   2f854:	bl	124b0 <sprintf@plt>
   2f858:	ldr	r1, [sp, #52]	; 0x34
   2f85c:	mov	r3, #3600	; 0xe10
   2f860:	mul	r3, r3, r1
   2f864:	sub	r7, r7, r3
   2f868:	cmp	r7, #0
   2f86c:	mov	r2, r0
   2f870:	ldr	r0, [sp, #40]	; 0x28
   2f874:	str	r2, [sp, #48]	; 0x30
   2f878:	add	lr, r0, r2
   2f87c:	eor	r0, r7, r7, asr #31
   2f880:	sub	r0, r0, r7, asr #31
   2f884:	beq	2f934 <__assert_fail@plt+0x1d340>
   2f888:	ldr	r3, [pc, #1344]	; 2fdd0 <__assert_fail@plt+0x1d7dc>
   2f88c:	ldr	r1, [pc, #1344]	; 2fdd4 <__assert_fail@plt+0x1d7e0>
   2f890:	asr	r2, r0, #31
   2f894:	smull	ip, r3, r3, r0
   2f898:	smull	ip, r1, r1, r0
   2f89c:	ldr	r7, [pc, #1332]	; 2fdd8 <__assert_fail@plt+0x1d7e4>
   2f8a0:	add	r3, r3, r0
   2f8a4:	rsb	r1, r2, r1, asr #6
   2f8a8:	rsb	r3, r2, r3, asr #5
   2f8ac:	add	r1, r1, #48	; 0x30
   2f8b0:	rsb	ip, r3, r3, lsl #4
   2f8b4:	str	ip, [sp, #52]	; 0x34
   2f8b8:	smull	r2, ip, r7, r3
   2f8bc:	asr	r2, r3, #31
   2f8c0:	rsb	r2, r2, ip, asr #2
   2f8c4:	mov	ip, #58	; 0x3a
   2f8c8:	add	r2, r2, r2, lsl #2
   2f8cc:	sub	r2, r3, r2, lsl #1
   2f8d0:	ldr	r3, [sp, #52]	; 0x34
   2f8d4:	add	r2, r2, #48	; 0x30
   2f8d8:	str	r2, [sp, #52]	; 0x34
   2f8dc:	subs	r3, r0, r3, lsl #2
   2f8e0:	ldr	r2, [sp, #48]	; 0x30
   2f8e4:	ldr	r0, [sp, #40]	; 0x28
   2f8e8:	strb	ip, [r0, r2]
   2f8ec:	ldrb	r2, [sp, #52]	; 0x34
   2f8f0:	add	r0, lr, #3
   2f8f4:	strb	r1, [lr, #1]
   2f8f8:	strb	r2, [lr, #2]
   2f8fc:	beq	2f92c <__assert_fail@plt+0x1d338>
   2f900:	smull	r2, r7, r7, r3
   2f904:	strb	ip, [lr, #3]
   2f908:	asr	r2, r3, #31
   2f90c:	rsb	r2, r2, r7, asr #2
   2f910:	add	r0, lr, #6
   2f914:	add	r1, r2, r2, lsl #2
   2f918:	add	r2, r2, #48	; 0x30
   2f91c:	sub	r3, r3, r1, lsl #1
   2f920:	add	r3, r3, #48	; 0x30
   2f924:	strb	r3, [lr, #5]
   2f928:	strb	r2, [lr, #4]
   2f92c:	mov	r3, #0
   2f930:	strb	r3, [r0]
   2f934:	mov	r0, r5
   2f938:	bl	4c250 <__assert_fail@plt+0x39c5c>
   2f93c:	subs	r7, r0, #0
   2f940:	beq	2f484 <__assert_fail@plt+0x1ce90>
   2f944:	ldr	r2, [sp, #32]
   2f948:	mvn	r3, #0
   2f94c:	str	r2, [sp, #104]	; 0x68
   2f950:	ldr	r2, [sp]
   2f954:	add	r1, sp, #100	; 0x64
   2f958:	str	r2, [sp, #108]	; 0x6c
   2f95c:	ldr	r2, [sp, #16]
   2f960:	str	r3, [sp, #124]	; 0x7c
   2f964:	str	r2, [sp, #112]	; 0x70
   2f968:	ldr	r2, [sp, #24]
   2f96c:	str	r9, [sp, #100]	; 0x64
   2f970:	str	r2, [sp, #116]	; 0x74
   2f974:	ldr	r2, [sp, #44]	; 0x2c
   2f978:	str	r2, [sp, #120]	; 0x78
   2f97c:	ldr	r2, [sp, #36]	; 0x24
   2f980:	str	r2, [sp, #132]	; 0x84
   2f984:	bl	4c3f8 <__assert_fail@plt+0x39e04>
   2f988:	add	r1, sp, #100	; 0x64
   2f98c:	mov	r5, r0
   2f990:	mov	r0, r6
   2f994:	bl	2bb98 <__assert_fail@plt+0x195a4>
   2f998:	mov	r4, r0
   2f99c:	mov	r0, r7
   2f9a0:	bl	4c2d8 <__assert_fail@plt+0x39ce4>
   2f9a4:	cmp	r4, #0
   2f9a8:	beq	2f484 <__assert_fail@plt+0x1ce90>
   2f9ac:	ldr	r3, [sp, #552]	; 0x228
   2f9b0:	cmp	r3, #0
   2f9b4:	beq	2fb00 <__assert_fail@plt+0x1d50c>
   2f9b8:	ldr	r1, [sp, #548]	; 0x224
   2f9bc:	cmp	r1, #0
   2f9c0:	bne	2fb00 <__assert_fail@plt+0x1d50c>
   2f9c4:	add	r3, sp, #400	; 0x190
   2f9c8:	ldrd	r4, [r3]
   2f9cc:	cmp	r4, #1
   2f9d0:	sbcs	r3, r5, #0
   2f9d4:	blt	2fe7c <__assert_fail@plt+0x1d888>
   2f9d8:	ldr	ip, [sp, #124]	; 0x7c
   2f9dc:	ldr	r0, [sp, #408]	; 0x198
   2f9e0:	mov	r3, r1
   2f9e4:	subs	r2, ip, r0
   2f9e8:	movne	r2, #1
   2f9ec:	add	r1, pc, #932	; 0x3a4
   2f9f0:	ldrd	r0, [r1]
   2f9f4:	subs	r2, r4, r2
   2f9f8:	sbc	r3, r5, r3
   2f9fc:	cmp	r0, r2
   2fa00:	sbcs	r3, r1, r3
   2fa04:	blt	2fe74 <__assert_fail@plt+0x1d880>
   2fa08:	cmp	r4, #1
   2fa0c:	sbcs	r3, r5, #0
   2fa10:	blt	303f8 <__assert_fail@plt+0x1de04>
   2fa14:	ldr	r0, [sp, #124]	; 0x7c
   2fa18:	ldr	r1, [sp, #408]	; 0x198
   2fa1c:	cmp	r0, r1
   2fa20:	movne	r2, #1
   2fa24:	movne	r3, #0
   2fa28:	beq	30384 <__assert_fail@plt+0x1dd90>
   2fa2c:	subs	r4, r4, r2
   2fa30:	sbc	r5, r5, r3
   2fa34:	lsl	r2, r4, #3
   2fa38:	lsl	ip, r5, #3
   2fa3c:	orr	r3, ip, r4, lsr #29
   2fa40:	subs	r4, r2, r4
   2fa44:	sbc	r5, r3, r5
   2fa48:	cmp	r4, #0
   2fa4c:	sbcs	r3, r5, #0
   2fa50:	sub	r3, r1, r0
   2fa54:	ldr	r2, [pc, #896]	; 2fddc <__assert_fail@plt+0x1d7e8>
   2fa58:	add	r3, r3, #7
   2fa5c:	blt	303b8 <__assert_fail@plt+0x1ddc4>
   2fa60:	smull	r1, r2, r2, r3
   2fa64:	add	r2, r2, r3
   2fa68:	asr	r1, r3, #31
   2fa6c:	rsb	r2, r1, r2, asr #2
   2fa70:	rsb	r2, r2, r2, lsl #3
   2fa74:	subs	r2, r3, r2
   2fa78:	asrmi	r3, r2, #31
   2fa7c:	bmi	2faac <__assert_fail@plt+0x1d4b8>
   2fa80:	mvn	r0, #0
   2fa84:	subs	r0, r0, r4
   2fa88:	mvn	r1, #-2147483648	; 0x80000000
   2fa8c:	sbc	r1, r1, r5
   2fa90:	asr	r3, r2, #31
   2fa94:	cmp	r0, r2
   2fa98:	sbcs	r1, r1, r3
   2fa9c:	movlt	r1, #1
   2faa0:	movge	r1, #0
   2faa4:	cmp	r1, #0
   2faa8:	bne	2fe74 <__assert_fail@plt+0x1d880>
   2faac:	ldr	ip, [sp, #112]	; 0x70
   2fab0:	adds	r2, r2, r4
   2fab4:	adc	r3, r3, r5
   2fab8:	cmp	ip, #0
   2fabc:	blt	2fe18 <__assert_fail@plt+0x1d824>
   2fac0:	cmp	r2, #0
   2fac4:	sbcs	r1, r3, #0
   2fac8:	blt	2fe90 <__assert_fail@plt+0x1d89c>
   2facc:	mvn	r0, #-2147483648	; 0x80000000
   2fad0:	sub	r0, r0, ip
   2fad4:	cmp	r0, r2
   2fad8:	asr	r1, r0, #31
   2fadc:	sbcs	r1, r1, r3
   2fae0:	movlt	r1, #1
   2fae4:	movge	r1, #0
   2fae8:	cmp	r1, #0
   2faec:	beq	2fe4c <__assert_fail@plt+0x1d858>
   2faf0:	add	r2, ip, r2
   2faf4:	str	r2, [sp, #112]	; 0x70
   2faf8:	mov	r4, r8
   2fafc:	b	2f484 <__assert_fail@plt+0x1ce90>
   2fb00:	add	r3, sp, #488	; 0x1e8
   2fb04:	add	r1, sp, #504	; 0x1f8
   2fb08:	ldrd	r6, [r3]
   2fb0c:	add	r3, sp, #496	; 0x1f0
   2fb10:	ldrd	r0, [r1]
   2fb14:	ldrd	r2, [r3]
   2fb18:	strd	r0, [sp, #24]
   2fb1c:	strd	r2, [sp, #16]
   2fb20:	orr	r2, r2, r6
   2fb24:	orr	r3, r3, r7
   2fb28:	orr	r0, r0, r2
   2fb2c:	orr	r1, r1, r3
   2fb30:	mov	r2, r0
   2fb34:	mov	r3, r1
   2fb38:	orrs	r3, r2, r3
   2fb3c:	beq	2ff68 <__assert_fail@plt+0x1d974>
   2fb40:	cmp	r6, #0
   2fb44:	sbcs	r3, r7, #0
   2fb48:	ldr	ip, [sp, #120]	; 0x78
   2fb4c:	blt	2fef4 <__assert_fail@plt+0x1d900>
   2fb50:	cmp	ip, #0
   2fb54:	blt	2fde0 <__assert_fail@plt+0x1d7ec>
   2fb58:	mvn	r2, #-2147483648	; 0x80000000
   2fb5c:	mov	r3, #0
   2fb60:	cmp	r2, r6
   2fb64:	sbcs	r1, r3, r7
   2fb68:	blt	2fe74 <__assert_fail@plt+0x1d880>
   2fb6c:	subs	r2, r2, r6
   2fb70:	sbc	r3, r3, r7
   2fb74:	asr	r1, ip, #31
   2fb78:	cmp	r2, ip
   2fb7c:	sbcs	r3, r3, r1
   2fb80:	movlt	r4, #1
   2fb84:	movge	r4, #0
   2fb88:	cmp	r4, #0
   2fb8c:	bne	2fe74 <__assert_fail@plt+0x1d880>
   2fb90:	ldrd	r2, [sp, #16]
   2fb94:	cmp	r2, #0
   2fb98:	sbcs	r3, r3, #0
   2fb9c:	add	r3, ip, r6
   2fba0:	str	r3, [sp, #40]	; 0x28
   2fba4:	ldr	ip, [sp, #116]	; 0x74
   2fba8:	blt	2fd68 <__assert_fail@plt+0x1d774>
   2fbac:	cmp	ip, #0
   2fbb0:	blt	2fd48 <__assert_fail@plt+0x1d754>
   2fbb4:	ldrd	r0, [sp, #16]
   2fbb8:	mvn	r2, #-2147483648	; 0x80000000
   2fbbc:	mov	r3, #0
   2fbc0:	cmp	r2, r0
   2fbc4:	sbcs	lr, r3, r1
   2fbc8:	blt	2f484 <__assert_fail@plt+0x1ce90>
   2fbcc:	subs	r0, r2, r0
   2fbd0:	sbc	r1, r3, r1
   2fbd4:	mov	r2, r0
   2fbd8:	mov	r3, r1
   2fbdc:	cmp	r2, ip
   2fbe0:	asr	r1, ip, #31
   2fbe4:	sbcs	r3, r3, r1
   2fbe8:	movlt	lr, #1
   2fbec:	movge	lr, #0
   2fbf0:	cmp	lr, #0
   2fbf4:	bne	2f484 <__assert_fail@plt+0x1ce90>
   2fbf8:	ldrd	r2, [sp, #24]
   2fbfc:	cmp	r2, #0
   2fc00:	sbcs	r3, r3, #0
   2fc04:	ldr	r3, [sp, #16]
   2fc08:	add	r5, ip, r3
   2fc0c:	ldr	ip, [sp, #112]	; 0x70
   2fc10:	blt	2fd18 <__assert_fail@plt+0x1d724>
   2fc14:	cmp	ip, #0
   2fc18:	blt	2fcf8 <__assert_fail@plt+0x1d704>
   2fc1c:	ldrd	r0, [sp, #24]
   2fc20:	mvn	r2, #-2147483648	; 0x80000000
   2fc24:	mov	r3, #0
   2fc28:	cmp	r2, r0
   2fc2c:	sbcs	r4, r3, r1
   2fc30:	blt	2fc60 <__assert_fail@plt+0x1d66c>
   2fc34:	subs	r0, r2, r0
   2fc38:	sbc	r1, r3, r1
   2fc3c:	mov	r2, r0
   2fc40:	mov	r3, r1
   2fc44:	cmp	r2, ip
   2fc48:	asr	r1, ip, #31
   2fc4c:	sbcs	r3, r3, r1
   2fc50:	movlt	r4, #1
   2fc54:	movge	r4, #0
   2fc58:	cmp	r4, #0
   2fc5c:	beq	2ff1c <__assert_fail@plt+0x1d928>
   2fc60:	mov	r4, lr
   2fc64:	b	2f484 <__assert_fail@plt+0x1ce90>
   2fc68:	cmp	r3, #0
   2fc6c:	cmpeq	r2, #23
   2fc70:	bhi	2fce8 <__assert_fail@plt+0x1d6f4>
   2fc74:	str	r2, [sp]
   2fc78:	mov	r1, r2
   2fc7c:	b	2f750 <__assert_fail@plt+0x1d15c>
   2fc80:	mov	r2, #-2147483648	; 0x80000000
   2fc84:	mvn	r3, #0
   2fc88:	subs	r0, r2, r0
   2fc8c:	sbc	r1, r3, r1
   2fc90:	mov	r3, r1
   2fc94:	cmp	r0, #1
   2fc98:	sbcs	r3, r3, #0
   2fc9c:	movge	r8, #1
   2fca0:	movlt	r8, #0
   2fca4:	b	2f650 <__assert_fail@plt+0x1d05c>
   2fca8:	str	r9, [sp]
   2fcac:	str	r9, [sp, #32]
   2fcb0:	str	r8, [sp, #100]	; 0x64
   2fcb4:	str	r8, [sp, #104]	; 0x68
   2fcb8:	str	r8, [sp, #108]	; 0x6c
   2fcbc:	str	r8, [sp, #484]	; 0x1e4
   2fcc0:	b	2f76c <__assert_fail@plt+0x1d178>
   2fcc4:	subs	r0, r2, #1
   2fcc8:	sbc	r1, r3, #0
   2fccc:	cmp	r1, #0
   2fcd0:	cmpeq	r0, #10
   2fcd4:	bls	2fc74 <__assert_fail@plt+0x1d680>
   2fcd8:	cmp	r3, #0
   2fcdc:	cmpeq	r2, #12
   2fce0:	ldreq	r1, [sp]
   2fce4:	beq	2f750 <__assert_fail@plt+0x1d15c>
   2fce8:	mvn	r3, #0
   2fcec:	mov	r4, r8
   2fcf0:	str	r3, [sp, #108]	; 0x6c
   2fcf4:	b	2f484 <__assert_fail@plt+0x1ce90>
   2fcf8:	ldrd	r2, [sp, #24]
   2fcfc:	adds	r2, r2, ip
   2fd00:	adc	r3, r3, ip, asr #31
   2fd04:	cmp	r2, #-2147483648	; 0x80000000
   2fd08:	sbcs	r3, r3, #0
   2fd0c:	movge	r4, #1
   2fd10:	movlt	r4, #0
   2fd14:	b	2fc58 <__assert_fail@plt+0x1d664>
   2fd18:	ldrd	r6, [sp, #24]
   2fd1c:	mov	r2, #-2147483648	; 0x80000000
   2fd20:	mvn	r3, #0
   2fd24:	subs	r6, r2, r6
   2fd28:	sbc	r7, r3, r7
   2fd2c:	asr	r1, ip, #31
   2fd30:	mov	r3, r7
   2fd34:	cmp	ip, r6
   2fd38:	sbcs	r3, r1, r3
   2fd3c:	movlt	r4, #1
   2fd40:	movge	r4, #0
   2fd44:	b	2fc58 <__assert_fail@plt+0x1d664>
   2fd48:	ldrd	r2, [sp, #16]
   2fd4c:	adds	r2, r2, ip
   2fd50:	adc	r3, r3, ip, asr #31
   2fd54:	cmp	r2, #-2147483648	; 0x80000000
   2fd58:	sbcs	r3, r3, #0
   2fd5c:	movge	lr, #1
   2fd60:	movlt	lr, #0
   2fd64:	b	2fbf0 <__assert_fail@plt+0x1d5fc>
   2fd68:	ldrd	r6, [sp, #16]
   2fd6c:	mov	r2, #-2147483648	; 0x80000000
   2fd70:	mvn	r3, #0
   2fd74:	subs	r6, r2, r6
   2fd78:	sbc	r7, r3, r7
   2fd7c:	asr	r1, ip, #31
   2fd80:	mov	r3, r7
   2fd84:	cmp	ip, r6
   2fd88:	sbcs	r3, r1, r3
   2fd8c:	movlt	lr, #1
   2fd90:	movge	lr, #0
   2fd94:	b	2fbf0 <__assert_fail@plt+0x1d5fc>
   2fd98:	stmdbmi	r4!, {r0, r3, r6, r9, ip, pc}
   2fd9c:	subne	r2, r9, #-1845493760	; 0x92000000
   2fda0:	addeq	r0, r0, pc, lsl r0
   2fda4:	andeq	r3, r5, r0, ror r1
   2fda8:	andeq	r2, r5, r8, lsl r6
   2fdac:	andeq	r0, r0, ip, ror #14
   2fdb0:	andeq	r0, r0, sp, lsl #2
   2fdb4:	svcvc	0x008958ff
   2fdb8:	mcrvc	3, 1, r6, cr5, cr15, {7}
   2fdbc:	andhi	r0, r0, fp, ror #14
   2fdc0:			; <UNDEFINED> instruction: 0xfffff895
   2fdc4:			; <UNDEFINED> instruction: 0xfffff894
   2fdc8:			; <UNDEFINED> instruction: 0x91a2b3c5
   2fdcc:	andeq	r3, r5, r8, ror #2
   2fdd0:	stmhi	r8, {r0, r3, r7, fp, pc}
   2fdd4:	blne	13d04b0 <stdout@@GLIBC_2.4+0x136bf5c>
   2fdd8:	strbtvs	r6, [r6], -r7, ror #12
   2fddc:	subls	r2, r9, #-1828716544	; 0x93000000
   2fde0:	adds	r2, r6, ip
   2fde4:	adc	r3, r7, ip, asr #31
   2fde8:	cmp	r2, #-2147483648	; 0x80000000
   2fdec:	sbcs	r3, r3, #0
   2fdf0:	movge	r4, #1
   2fdf4:	movlt	r4, #0
   2fdf8:	b	2fb88 <__assert_fail@plt+0x1d594>
   2fdfc:	cmp	r3, #0
   2fe00:	cmpeq	r2, #12
   2fe04:	bne	2fce8 <__assert_fail@plt+0x1d6f4>
   2fe08:	mov	r3, #12
   2fe0c:	str	r3, [sp]
   2fe10:	mov	r1, r3
   2fe14:	b	2f750 <__assert_fail@plt+0x1d15c>
   2fe18:	rsb	r0, ip, #-2147483648	; 0x80000000
   2fe1c:	cmp	r2, r0
   2fe20:	asr	r1, r0, #31
   2fe24:	sbcs	r1, r3, r1
   2fe28:	blt	2faf0 <__assert_fail@plt+0x1d4fc>
   2fe2c:	cmp	r2, #0
   2fe30:	sbcs	r1, r3, #0
   2fe34:	blt	2fe4c <__assert_fail@plt+0x1d858>
   2fe38:	adds	r0, r2, ip
   2fe3c:	adc	r1, r3, ip, asr #31
   2fe40:	cmp	r0, #-2147483648	; 0x80000000
   2fe44:	sbcs	r1, r1, #0
   2fe48:	bge	2faf0 <__assert_fail@plt+0x1d4fc>
   2fe4c:	add	r2, ip, r2
   2fe50:	mvn	r3, #0
   2fe54:	add	r1, sp, #100	; 0x64
   2fe58:	mov	r0, sl
   2fe5c:	str	r2, [sp, #112]	; 0x70
   2fe60:	str	r3, [sp, #132]	; 0x84
   2fe64:	bl	4c3f8 <__assert_fail@plt+0x39e04>
   2fe68:	cmn	r0, #1
   2fe6c:	mov	r5, r0
   2fe70:	bne	2fb00 <__assert_fail@plt+0x1d50c>
   2fe74:	mov	r4, r8
   2fe78:	b	2f484 <__assert_fail@plt+0x1ce90>
   2fe7c:	orrs	r3, r4, r5
   2fe80:	bne	2febc <__assert_fail@plt+0x1d8c8>
   2fe84:	mov	r2, r4
   2fe88:	mov	r3, r5
   2fe8c:	b	2f9ec <__assert_fail@plt+0x1d3f8>
   2fe90:	mov	r0, #-2147483648	; 0x80000000
   2fe94:	subs	r0, r0, r2
   2fe98:	mvn	r1, #0
   2fe9c:	sbc	r1, r1, r3
   2fea0:	asr	r5, ip, #31
   2fea4:	cmp	ip, r0
   2fea8:	sbcs	r1, r5, r1
   2feac:	mov	r4, ip
   2feb0:	movlt	r1, #1
   2feb4:	movge	r1, #0
   2feb8:	b	2fae8 <__assert_fail@plt+0x1d4f4>
   2febc:	mvn	r3, #0
   2fec0:	mvn	r2, #0
   2fec4:	cmp	r5, r3
   2fec8:	cmpeq	r4, r2
   2fecc:	beq	2fa08 <__assert_fail@plt+0x1d414>
   2fed0:	mov	r3, r5
   2fed4:	mov	r2, r4
   2fed8:	mov	r0, #0
   2fedc:	mov	r1, #-2147483648	; 0x80000000
   2fee0:	bl	4db88 <__assert_fail@plt+0x3b594>
   2fee4:	cmp	r0, #7
   2fee8:	sbcs	r3, r1, #0
   2feec:	blt	2fe74 <__assert_fail@plt+0x1d880>
   2fef0:	b	2fa08 <__assert_fail@plt+0x1d414>
   2fef4:	mov	r2, #-2147483648	; 0x80000000
   2fef8:	subs	r2, r2, r6
   2fefc:	mvn	r3, #0
   2ff00:	sbc	r3, r3, r7
   2ff04:	asr	r1, ip, #31
   2ff08:	cmp	ip, r2
   2ff0c:	sbcs	r3, r1, r3
   2ff10:	movlt	r4, #1
   2ff14:	movge	r4, #0
   2ff18:	b	2fb88 <__assert_fail@plt+0x1d594>
   2ff1c:	ldr	r3, [sp, #24]
   2ff20:	add	r1, sp, #100	; 0x64
   2ff24:	add	ip, ip, r3
   2ff28:	ldr	r3, [sp, #40]	; 0x28
   2ff2c:	mov	r0, sl
   2ff30:	str	r3, [sp, #120]	; 0x78
   2ff34:	ldr	r3, [sp]
   2ff38:	str	r5, [sp, #116]	; 0x74
   2ff3c:	str	r3, [sp, #108]	; 0x6c
   2ff40:	ldr	r3, [sp, #32]
   2ff44:	str	ip, [sp, #112]	; 0x70
   2ff48:	str	r3, [sp, #104]	; 0x68
   2ff4c:	ldr	r3, [sp, #36]	; 0x24
   2ff50:	str	r9, [sp, #100]	; 0x64
   2ff54:	str	r3, [sp, #132]	; 0x84
   2ff58:	bl	4c3f8 <__assert_fail@plt+0x39e04>
   2ff5c:	cmn	r0, #1
   2ff60:	mov	r5, r0
   2ff64:	beq	2f484 <__assert_fail@plt+0x1ce90>
   2ff68:	ldr	r3, [sp, #568]	; 0x238
   2ff6c:	cmp	r3, #0
   2ff70:	beq	2ffcc <__assert_fail@plt+0x1d9d8>
   2ff74:	ldr	r2, [sp, #136]	; 0x88
   2ff78:	ldr	r1, [sp, #416]	; 0x1a0
   2ff7c:	asr	r3, r2, #31
   2ff80:	subs	r2, r1, r2
   2ff84:	rsc	r3, r3, r1, asr #31
   2ff88:	mvn	r1, r5
   2ff8c:	lsr	r1, r1, #31
   2ff90:	cmp	r1, r3, lsr #31
   2ff94:	beq	3035c <__assert_fail@plt+0x1dd68>
   2ff98:	asr	r1, r5, #31
   2ff9c:	cmp	r5, r2
   2ffa0:	sbcs	ip, r1, r3
   2ffa4:	bge	30340 <__assert_fail@plt+0x1dd4c>
   2ffa8:	subs	r0, r2, r5
   2ffac:	sbc	r1, r3, r1
   2ffb0:	cmp	r0, #-2147483647	; 0x80000001
   2ffb4:	sbcs	r1, r1, #0
   2ffb8:	movge	r1, #1
   2ffbc:	movlt	r1, #0
   2ffc0:	cmp	r1, #0
   2ffc4:	bne	2fe74 <__assert_fail@plt+0x1d880>
   2ffc8:	sub	r5, r5, r2
   2ffcc:	ldr	r3, [sp, #536]	; 0x218
   2ffd0:	ldr	r1, [sp, #484]	; 0x1e4
   2ffd4:	mov	r2, r3
   2ffd8:	adds	r6, r2, r1
   2ffdc:	asr	r3, r3, #31
   2ffe0:	adc	r7, r3, r1, asr #31
   2ffe4:	mov	r0, r6
   2ffe8:	mov	r1, r7
   2ffec:	add	r3, pc, #940	; 0x3ac
   2fff0:	ldrd	r2, [r3]
   2fff4:	strd	r6, [sp]
   2fff8:	bl	4db88 <__assert_fail@plt+0x3b594>
   2fffc:	add	r7, pc, #924	; 0x39c
   30000:	ldrd	r6, [r7]
   30004:	adds	r0, r2, r6
   30008:	adc	r1, r3, r7
   3000c:	mov	r2, r6
   30010:	mov	r3, r7
   30014:	bl	4db88 <__assert_fail@plt+0x3b594>
   30018:	mov	r0, r2
   3001c:	mov	r1, r3
   30020:	mov	r2, r6
   30024:	mov	r3, r7
   30028:	ldrd	r6, [sp]
   3002c:	strd	r0, [sp, #16]
   30030:	subs	r0, r6, r0
   30034:	sbc	r1, r7, r1
   30038:	bl	4db88 <__assert_fail@plt+0x3b594>
   3003c:	add	r3, sp, #512	; 0x200
   30040:	ldrd	r6, [r3]
   30044:	cmp	r6, #0
   30048:	sbcs	r3, r7, #0
   3004c:	mov	r9, r0
   30050:	blt	30308 <__assert_fail@plt+0x1dd14>
   30054:	add	r3, pc, #844	; 0x34c
   30058:	ldrd	r2, [r3]
   3005c:	cmp	r2, r6
   30060:	sbcs	r3, r3, r7
   30064:	blt	2fe74 <__assert_fail@plt+0x1d880>
   30068:	mov	r1, #3600	; 0xe10
   3006c:	umull	r2, r3, r6, r1
   30070:	mla	r3, r1, r7, r3
   30074:	cmp	r2, #0
   30078:	sbcs	r1, r3, #0
   3007c:	blt	302dc <__assert_fail@plt+0x1dce8>
   30080:	cmp	r5, #0
   30084:	movlt	r0, r5
   30088:	asrlt	r1, r0, #31
   3008c:	blt	300c0 <__assert_fail@plt+0x1dacc>
   30090:	mvn	r6, #0
   30094:	subs	r6, r6, r2
   30098:	mvn	r7, #-2147483648	; 0x80000000
   3009c:	sbc	r7, r7, r3
   300a0:	asr	r1, r5, #31
   300a4:	cmp	r6, r5
   300a8:	sbcs	ip, r7, r1
   300ac:	mov	r0, r5
   300b0:	movlt	ip, #1
   300b4:	movge	ip, #0
   300b8:	cmp	ip, #0
   300bc:	bne	2fe74 <__assert_fail@plt+0x1d880>
   300c0:	add	ip, sp, #520	; 0x208
   300c4:	adds	r4, r0, r2
   300c8:	ldrd	r6, [ip]
   300cc:	adc	r5, r1, r3
   300d0:	cmp	r6, #0
   300d4:	sbcs	r3, r7, #0
   300d8:	blt	302a4 <__assert_fail@plt+0x1dcb0>
   300dc:	add	r3, pc, #716	; 0x2cc
   300e0:	ldrd	r2, [r3]
   300e4:	cmp	r2, r6
   300e8:	sbcs	r3, r3, r7
   300ec:	blt	2fe74 <__assert_fail@plt+0x1d880>
   300f0:	mov	r3, #60	; 0x3c
   300f4:	umull	r0, r1, r6, r3
   300f8:	mla	r1, r3, r7, r1
   300fc:	cmp	r0, #0
   30100:	sbcs	r3, r1, #0
   30104:	blt	30280 <__assert_fail@plt+0x1dc8c>
   30108:	mov	r3, r5
   3010c:	cmp	r4, #0
   30110:	sbcs	r3, r3, #0
   30114:	blt	30140 <__assert_fail@plt+0x1db4c>
   30118:	mvn	r2, #0
   3011c:	subs	r2, r2, r0
   30120:	mvn	r3, #-2147483648	; 0x80000000
   30124:	sbc	r3, r3, r1
   30128:	cmp	r2, r4
   3012c:	sbcs	r3, r3, r5
   30130:	movlt	r3, #1
   30134:	movge	r3, #0
   30138:	cmp	r3, #0
   3013c:	bne	2fe74 <__assert_fail@plt+0x1d880>
   30140:	add	r3, sp, #528	; 0x210
   30144:	adds	r6, r4, r0
   30148:	ldrd	r2, [r3]
   3014c:	adc	r7, r5, r1
   30150:	mov	r0, r6
   30154:	cmp	r2, #0
   30158:	sbcs	ip, r3, #0
   3015c:	mov	r1, r7
   30160:	blt	301fc <__assert_fail@plt+0x1dc08>
   30164:	cmp	r6, #0
   30168:	sbcs	ip, r7, #0
   3016c:	blt	30198 <__assert_fail@plt+0x1dba4>
   30170:	mvn	r6, #0
   30174:	subs	r6, r6, r2
   30178:	mvn	r7, #-2147483648	; 0x80000000
   3017c:	sbc	r7, r7, r3
   30180:	cmp	r6, r0
   30184:	sbcs	ip, r7, r1
   30188:	movlt	ip, #1
   3018c:	movge	ip, #0
   30190:	cmp	ip, #0
   30194:	bne	2fe74 <__assert_fail@plt+0x1d880>
   30198:	adds	r2, r2, r0
   3019c:	adc	r3, r3, r1
   301a0:	cmp	r9, #0
   301a4:	blt	30248 <__assert_fail@plt+0x1dc54>
   301a8:	cmp	r2, #0
   301ac:	sbcs	r1, r3, #0
   301b0:	blt	30220 <__assert_fail@plt+0x1dc2c>
   301b4:	rsb	r0, r9, #2130706432	; 0x7f000000
   301b8:	add	r0, r0, #16711680	; 0xff0000
   301bc:	add	r0, r0, #65280	; 0xff00
   301c0:	add	r0, r0, #255	; 0xff
   301c4:	cmp	r0, r2
   301c8:	asr	r1, r0, #31
   301cc:	sbcs	r1, r1, r3
   301d0:	movlt	r1, #1
   301d4:	movge	r1, #0
   301d8:	cmp	r1, #0
   301dc:	bne	2fe74 <__assert_fail@plt+0x1d880>
   301e0:	ldr	r3, [sp, #12]
   301e4:	add	r2, r2, r9
   301e8:	mov	r4, #1
   301ec:	str	r2, [r3]
   301f0:	ldr	r2, [sp, #16]
   301f4:	str	r2, [r3, #4]
   301f8:	b	2f484 <__assert_fail@plt+0x1ce90>
   301fc:	mov	r6, #0
   30200:	subs	r6, r6, r2
   30204:	mov	r7, #-2147483648	; 0x80000000
   30208:	sbc	r7, r7, r3
   3020c:	cmp	r0, r6
   30210:	sbcs	ip, r1, r7
   30214:	movlt	ip, #1
   30218:	movge	ip, #0
   3021c:	b	30190 <__assert_fail@plt+0x1db9c>
   30220:	mov	r0, #-2147483648	; 0x80000000
   30224:	subs	r0, r0, r2
   30228:	mvn	r1, #0
   3022c:	sbc	r1, r1, r3
   30230:	asr	r7, r9, #31
   30234:	cmp	r9, r0
   30238:	sbcs	r1, r7, r1
   3023c:	movlt	r1, #1
   30240:	movge	r1, #0
   30244:	b	301d8 <__assert_fail@plt+0x1dbe4>
   30248:	rsb	r0, r9, #-2147483648	; 0x80000000
   3024c:	cmp	r2, r0
   30250:	asr	r1, r0, #31
   30254:	sbcs	r1, r3, r1
   30258:	blt	2fe74 <__assert_fail@plt+0x1d880>
   3025c:	cmp	r2, #0
   30260:	sbcs	r1, r3, #0
   30264:	blt	301e0 <__assert_fail@plt+0x1dbec>
   30268:	adds	r0, r2, r9
   3026c:	adc	r1, r3, r9, asr #31
   30270:	cmp	r0, #-2147483648	; 0x80000000
   30274:	sbcs	r1, r1, #0
   30278:	bge	2fe74 <__assert_fail@plt+0x1d880>
   3027c:	b	301e0 <__assert_fail@plt+0x1dbec>
   30280:	mov	r2, #0
   30284:	subs	r2, r2, r0
   30288:	mov	r3, #-2147483648	; 0x80000000
   3028c:	sbc	r3, r3, r1
   30290:	cmp	r4, r2
   30294:	sbcs	r3, r5, r3
   30298:	movlt	r3, #1
   3029c:	movge	r3, #0
   302a0:	b	30138 <__assert_fail@plt+0x1db44>
   302a4:	mvn	r3, #0
   302a8:	mvn	r2, #0
   302ac:	cmp	r7, r3
   302b0:	cmpeq	r6, r2
   302b4:	beq	300f0 <__assert_fail@plt+0x1dafc>
   302b8:	mov	r3, r7
   302bc:	mov	r2, r6
   302c0:	mov	r0, #0
   302c4:	mov	r1, #-2147483648	; 0x80000000
   302c8:	bl	4db88 <__assert_fail@plt+0x3b594>
   302cc:	cmp	r0, #60	; 0x3c
   302d0:	sbcs	r3, r1, #0
   302d4:	blt	2fe74 <__assert_fail@plt+0x1d880>
   302d8:	b	300f0 <__assert_fail@plt+0x1dafc>
   302dc:	mov	r6, #0
   302e0:	subs	r6, r6, r2
   302e4:	mov	r7, #-2147483648	; 0x80000000
   302e8:	sbc	r7, r7, r3
   302ec:	asr	r1, r5, #31
   302f0:	cmp	r5, r6
   302f4:	sbcs	ip, r1, r7
   302f8:	mov	r0, r5
   302fc:	movlt	ip, #1
   30300:	movge	ip, #0
   30304:	b	300b8 <__assert_fail@plt+0x1dac4>
   30308:	mvn	r3, #0
   3030c:	mvn	r2, #0
   30310:	cmp	r7, r3
   30314:	cmpeq	r6, r2
   30318:	beq	30068 <__assert_fail@plt+0x1da74>
   3031c:	mov	r3, r7
   30320:	mov	r2, r6
   30324:	mov	r0, #0
   30328:	mov	r1, #-2147483648	; 0x80000000
   3032c:	bl	4db88 <__assert_fail@plt+0x3b594>
   30330:	cmp	r0, #3600	; 0xe10
   30334:	sbcs	r3, r1, #0
   30338:	blt	2fe74 <__assert_fail@plt+0x1d880>
   3033c:	b	30068 <__assert_fail@plt+0x1da74>
   30340:	subs	r0, r5, r2
   30344:	sbc	r1, r1, r3
   30348:	cmp	r0, #-2147483648	; 0x80000000
   3034c:	sbcs	r1, r1, #0
   30350:	movge	r1, #1
   30354:	movlt	r1, #0
   30358:	b	2ffc0 <__assert_fail@plt+0x1d9cc>
   3035c:	cmp	r5, #0
   30360:	blt	30404 <__assert_fail@plt+0x1de10>
   30364:	subs	r6, r2, #-2147483647	; 0x80000001
   30368:	adc	r7, r3, #0
   3036c:	asr	r1, r5, #31
   30370:	cmp	r6, r5
   30374:	sbcs	r1, r7, r1
   30378:	movlt	r1, #1
   3037c:	movge	r1, #0
   30380:	b	2ffc0 <__assert_fail@plt+0x1d9cc>
   30384:	mov	ip, r1
   30388:	mov	r0, r1
   3038c:	mov	r2, #0
   30390:	mov	r3, #0
   30394:	mov	r1, ip
   30398:	b	2fa2c <__assert_fail@plt+0x1d438>
   3039c:	nop			; (mov r0, r0)
   303a0:	blcc	fe6e2ba8 <stdout@@GLIBC_2.4+0xfe67e654>
   303a4:	andeq	r0, r0, r0
   303a8:	mcrrcc	14, 6, r5, sp, cr15
   303ac:	andeq	r1, r9, fp, lsr #20
   303b0:	eorcs	r2, r2, #536870914	; 0x20000002
   303b4:	eoreq	r2, r2, #536870914	; 0x20000002
   303b8:	smull	r1, r2, r2, r3
   303bc:	add	r2, r2, r3
   303c0:	asr	r1, r3, #31
   303c4:	rsb	r2, r1, r2, asr #2
   303c8:	mov	r6, #0
   303cc:	rsb	r2, r2, r2, lsl #3
   303d0:	sub	r2, r3, r2
   303d4:	subs	r6, r6, r4
   303d8:	mov	r7, #-2147483648	; 0x80000000
   303dc:	sbc	r7, r7, r5
   303e0:	asr	r3, r2, #31
   303e4:	cmp	r2, r6
   303e8:	sbcs	r1, r3, r7
   303ec:	movlt	r1, #1
   303f0:	movge	r1, #0
   303f4:	b	2faa4 <__assert_fail@plt+0x1d4b0>
   303f8:	ldr	r1, [sp, #124]	; 0x7c
   303fc:	ldr	ip, [sp, #408]	; 0x198
   30400:	b	30388 <__assert_fail@plt+0x1dd94>
   30404:	add	r0, r5, #-2147483648	; 0x80000000
   30408:	cmp	r0, r2
   3040c:	asr	r1, r0, #31
   30410:	sbcs	r1, r1, r3
   30414:	movlt	r1, #1
   30418:	movge	r1, #0
   3041c:	b	2ffc0 <__assert_fail@plt+0x1d9cc>
   30420:	push	{r4, r5, r6, r7, r8, lr}
   30424:	mov	r5, r0
   30428:	ldr	r0, [pc, #64]	; 30470 <__assert_fail@plt+0x1de7c>
   3042c:	mov	r6, r1
   30430:	mov	r7, r2
   30434:	bl	12228 <getenv@plt>
   30438:	bl	4c250 <__assert_fail@plt+0x39c5c>
   3043c:	subs	r4, r0, #0
   30440:	moveq	r5, r4
   30444:	beq	30468 <__assert_fail@plt+0x1de74>
   30448:	mov	r0, r5
   3044c:	mov	r2, r7
   30450:	mov	r1, r6
   30454:	mov	r3, r4
   30458:	bl	2f0e0 <__assert_fail@plt+0x1caec>
   3045c:	mov	r5, r0
   30460:	mov	r0, r4
   30464:	bl	4c2d8 <__assert_fail@plt+0x39ce4>
   30468:	mov	r0, r5
   3046c:	pop	{r4, r5, r6, r7, r8, pc}
   30470:	andeq	r3, r5, r8, ror r1
   30474:	push	{r4, r5, r6, lr}
   30478:	subs	r4, r0, #0
   3047c:	beq	304f0 <__assert_fail@plt+0x1defc>
   30480:	mov	r1, #47	; 0x2f
   30484:	bl	12468 <strrchr@plt>
   30488:	subs	r5, r0, #0
   3048c:	beq	304dc <__assert_fail@plt+0x1dee8>
   30490:	add	r6, r5, #1
   30494:	sub	r3, r6, r4
   30498:	cmp	r3, #6
   3049c:	ble	304dc <__assert_fail@plt+0x1dee8>
   304a0:	mov	r2, #7
   304a4:	ldr	r1, [pc, #96]	; 3050c <__assert_fail@plt+0x1df18>
   304a8:	sub	r0, r5, #6
   304ac:	bl	12594 <strncmp@plt>
   304b0:	cmp	r0, #0
   304b4:	bne	304dc <__assert_fail@plt+0x1dee8>
   304b8:	mov	r2, #3
   304bc:	ldr	r1, [pc, #76]	; 30510 <__assert_fail@plt+0x1df1c>
   304c0:	mov	r0, r6
   304c4:	bl	12594 <strncmp@plt>
   304c8:	cmp	r0, #0
   304cc:	movne	r4, r6
   304d0:	ldreq	r3, [pc, #60]	; 30514 <__assert_fail@plt+0x1df20>
   304d4:	addeq	r4, r5, #4
   304d8:	streq	r4, [r3]
   304dc:	ldr	r2, [pc, #52]	; 30518 <__assert_fail@plt+0x1df24>
   304e0:	ldr	r3, [pc, #52]	; 3051c <__assert_fail@plt+0x1df28>
   304e4:	str	r4, [r2]
   304e8:	str	r4, [r3]
   304ec:	pop	{r4, r5, r6, pc}
   304f0:	ldr	r3, [pc, #40]	; 30520 <__assert_fail@plt+0x1df2c>
   304f4:	mov	r2, #55	; 0x37
   304f8:	mov	r1, #1
   304fc:	ldr	r3, [r3]
   30500:	ldr	r0, [pc, #28]	; 30524 <__assert_fail@plt+0x1df30>
   30504:	bl	12168 <fwrite@plt>
   30508:	bl	125a0 <abort@plt>
   3050c:	muleq	r5, r0, r4
   30510:	muleq	r5, r8, r4
   30514:	andeq	r4, r6, r8, lsr r5
   30518:	andeq	r4, r6, r4, lsl #26
   3051c:	andeq	r4, r6, r0, asr #10
   30520:	andeq	r4, r6, r8, asr #10
   30524:	andeq	r3, r5, r8, asr r4
   30528:	push	{r4, r5, r6, lr}
   3052c:	mov	r4, r0
   30530:	mov	r5, r1
   30534:	bl	4cf78 <__assert_fail@plt+0x3a984>
   30538:	ldrb	r3, [r0]
   3053c:	bic	r3, r3, #32
   30540:	cmp	r3, #85	; 0x55
   30544:	bne	305a4 <__assert_fail@plt+0x1dfb0>
   30548:	ldrb	r3, [r0, #1]
   3054c:	bic	r3, r3, #32
   30550:	cmp	r3, #84	; 0x54
   30554:	bne	305e0 <__assert_fail@plt+0x1dfec>
   30558:	ldrb	r3, [r0, #2]
   3055c:	bic	r3, r3, #32
   30560:	cmp	r3, #70	; 0x46
   30564:	bne	305e0 <__assert_fail@plt+0x1dfec>
   30568:	ldrb	r3, [r0, #3]
   3056c:	cmp	r3, #45	; 0x2d
   30570:	bne	305e0 <__assert_fail@plt+0x1dfec>
   30574:	ldrb	r3, [r0, #4]
   30578:	cmp	r3, #56	; 0x38
   3057c:	bne	305e0 <__assert_fail@plt+0x1dfec>
   30580:	ldrb	r3, [r0, #5]
   30584:	cmp	r3, #0
   30588:	bne	305e0 <__assert_fail@plt+0x1dfec>
   3058c:	ldrb	r2, [r4]
   30590:	ldr	r3, [pc, #152]	; 30630 <__assert_fail@plt+0x1e03c>
   30594:	ldr	r0, [pc, #152]	; 30634 <__assert_fail@plt+0x1e040>
   30598:	cmp	r2, #96	; 0x60
   3059c:	movne	r0, r3
   305a0:	pop	{r4, r5, r6, pc}
   305a4:	cmp	r3, #71	; 0x47
   305a8:	bne	305e0 <__assert_fail@plt+0x1dfec>
   305ac:	ldrb	r3, [r0, #1]
   305b0:	bic	r3, r3, #32
   305b4:	cmp	r3, #66	; 0x42
   305b8:	bne	305e0 <__assert_fail@plt+0x1dfec>
   305bc:	ldrb	r3, [r0, #2]
   305c0:	cmp	r3, #49	; 0x31
   305c4:	bne	305e0 <__assert_fail@plt+0x1dfec>
   305c8:	ldrb	r3, [r0, #3]
   305cc:	cmp	r3, #56	; 0x38
   305d0:	bne	305e0 <__assert_fail@plt+0x1dfec>
   305d4:	ldrb	r3, [r0, #4]
   305d8:	cmp	r3, #48	; 0x30
   305dc:	beq	305f4 <__assert_fail@plt+0x1e000>
   305e0:	ldr	r3, [pc, #80]	; 30638 <__assert_fail@plt+0x1e044>
   305e4:	cmp	r5, #9
   305e8:	ldr	r0, [pc, #76]	; 3063c <__assert_fail@plt+0x1e048>
   305ec:	movne	r0, r3
   305f0:	pop	{r4, r5, r6, pc}
   305f4:	ldrb	r3, [r0, #5]
   305f8:	cmp	r3, #51	; 0x33
   305fc:	bne	305e0 <__assert_fail@plt+0x1dfec>
   30600:	ldrb	r3, [r0, #6]
   30604:	cmp	r3, #48	; 0x30
   30608:	bne	305e0 <__assert_fail@plt+0x1dfec>
   3060c:	ldrb	r3, [r0, #7]
   30610:	cmp	r3, #0
   30614:	bne	305e0 <__assert_fail@plt+0x1dfec>
   30618:	ldrb	r2, [r4]
   3061c:	ldr	r3, [pc, #28]	; 30640 <__assert_fail@plt+0x1e04c>
   30620:	ldr	r0, [pc, #28]	; 30644 <__assert_fail@plt+0x1e050>
   30624:	cmp	r2, #96	; 0x60
   30628:	movne	r0, r3
   3062c:	pop	{r4, r5, r6, pc}
   30630:	strdeq	r3, [r5], -r4
   30634:	strdeq	r3, [r5], -r0
   30638:	andeq	lr, r4, r4, ror #21
   3063c:	andeq	r3, r5, r0, lsl #10
   30640:	strdeq	r3, [r5], -ip
   30644:	strdeq	r3, [r5], -r8
   30648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3064c:	sub	sp, sp, #140	; 0x8c
   30650:	mov	r9, r1
   30654:	str	r3, [sp, #24]
   30658:	mov	r3, #1
   3065c:	mov	sl, r0
   30660:	str	r2, [sp, #44]	; 0x2c
   30664:	str	r3, [sp, #28]
   30668:	bl	12198 <__ctype_get_mb_cur_max@plt>
   3066c:	ldr	r3, [sp, #180]	; 0xb4
   30670:	mov	fp, r9
   30674:	mov	r9, sl
   30678:	lsr	r3, r3, #1
   3067c:	and	r3, r3, #1
   30680:	str	r3, [sp, #40]	; 0x28
   30684:	ldr	r3, [sp, #180]	; 0xb4
   30688:	mov	r2, #0
   3068c:	and	r3, r3, #4
   30690:	str	r3, [sp, #100]	; 0x64
   30694:	ldr	r3, [sp, #180]	; 0xb4
   30698:	str	r2, [sp, #76]	; 0x4c
   3069c:	and	r3, r3, #1
   306a0:	str	r3, [sp, #96]	; 0x60
   306a4:	str	r2, [sp, #36]	; 0x24
   306a8:	str	r2, [sp, #56]	; 0x38
   306ac:	str	r2, [sp, #68]	; 0x44
   306b0:	str	r2, [sp, #72]	; 0x48
   306b4:	str	r2, [sp, #84]	; 0x54
   306b8:	str	r0, [sp, #80]	; 0x50
   306bc:	ldr	r3, [sp, #176]	; 0xb0
   306c0:	cmp	r3, #10
   306c4:	ldrls	pc, [pc, r3, lsl #2]
   306c8:	b	318a0 <__assert_fail@plt+0x1f2ac>
   306cc:	strdeq	r0, [r3], -r8
   306d0:	andeq	r0, r3, r8, lsl sl
   306d4:	andeq	r0, r3, r0, ror fp
   306d8:	andeq	r0, r3, ip, asr #20
   306dc:	andeq	r0, r3, r4, asr #23
   306e0:	andeq	r0, r3, r4, lsr #23
   306e4:	andeq	r0, r3, ip, ror #20
   306e8:	muleq	r3, r0, sl
   306ec:			; <UNDEFINED> instruction: 0x00030ab8
   306f0:			; <UNDEFINED> instruction: 0x00030ab8
   306f4:			; <UNDEFINED> instruction: 0x00030ab8
   306f8:	mov	r3, #0
   306fc:	ldr	r1, [sp, #56]	; 0x38
   30700:	ldr	r2, [sp, #176]	; 0xb0
   30704:	ldr	lr, [sp, #176]	; 0xb0
   30708:	mov	r8, r3
   3070c:	mov	ip, r3
   30710:	str	r3, [sp, #40]	; 0x28
   30714:	mov	r3, r1
   30718:	cmp	r2, #2
   3071c:	moveq	r3, #0
   30720:	andne	r3, r3, #1
   30724:	mov	r0, r3
   30728:	str	r3, [sp, #92]	; 0x5c
   3072c:	ldr	r3, [sp, #68]	; 0x44
   30730:	sub	lr, lr, #2
   30734:	adds	r2, r3, #0
   30738:	movne	r2, #1
   3073c:	and	r3, r1, ip
   30740:	and	r3, r2, r3
   30744:	clz	lr, lr
   30748:	str	r3, [sp, #88]	; 0x58
   3074c:	lsr	lr, lr, #5
   30750:	mov	r3, ip
   30754:	and	r3, r3, lr
   30758:	mov	sl, #0
   3075c:	and	r0, r2, r0
   30760:	str	r3, [sp, #64]	; 0x40
   30764:	eor	r3, r1, #1
   30768:	str	lr, [sp, #52]	; 0x34
   3076c:	str	r0, [sp, #48]	; 0x30
   30770:	str	r3, [sp, #60]	; 0x3c
   30774:	ldr	r3, [sp, #24]
   30778:	cmn	r3, #1
   3077c:	beq	30cac <__assert_fail@plt+0x1e6b8>
   30780:	subs	r7, r3, sl
   30784:	movne	r7, #1
   30788:	cmp	r7, #0
   3078c:	beq	30cc4 <__assert_fail@plt+0x1e6d0>
   30790:	ldr	r3, [sp, #48]	; 0x30
   30794:	cmp	r3, #0
   30798:	beq	31030 <__assert_fail@plt+0x1ea3c>
   3079c:	ldr	r2, [sp, #68]	; 0x44
   307a0:	ldr	r1, [sp, #24]
   307a4:	cmp	r2, #1
   307a8:	mov	r3, r2
   307ac:	movls	r3, #0
   307b0:	movhi	r3, #1
   307b4:	cmn	r1, #1
   307b8:	movne	r3, #0
   307bc:	cmp	r3, #0
   307c0:	add	r4, sl, r2
   307c4:	beq	307d4 <__assert_fail@plt+0x1e1e0>
   307c8:	ldr	r0, [sp, #44]	; 0x2c
   307cc:	bl	12300 <strlen@plt>
   307d0:	str	r0, [sp, #24]
   307d4:	ldr	r3, [sp, #24]
   307d8:	cmp	r3, r4
   307dc:	ldr	r3, [sp, #44]	; 0x2c
   307e0:	add	r5, r3, sl
   307e4:	bcc	31038 <__assert_fail@plt+0x1ea44>
   307e8:	mov	r0, r5
   307ec:	ldr	r2, [sp, #68]	; 0x44
   307f0:	ldr	r1, [sp, #72]	; 0x48
   307f4:	bl	12084 <memcmp@plt>
   307f8:	cmp	r0, #0
   307fc:	bne	31038 <__assert_fail@plt+0x1ea44>
   30800:	ldr	r3, [sp, #40]	; 0x28
   30804:	cmp	r3, #0
   30808:	bne	319f4 <__assert_fail@plt+0x1f400>
   3080c:	ldrb	r4, [r5]
   30810:	cmp	r4, #126	; 0x7e
   30814:	ldrls	pc, [pc, r4, lsl #2]
   30818:	b	31930 <__assert_fail@plt+0x1f33c>
   3081c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30820:	andeq	r1, r3, r0, lsr r9
   30824:	andeq	r1, r3, r0, lsr r9
   30828:	andeq	r1, r3, r0, lsr r9
   3082c:	andeq	r1, r3, r0, lsr r9
   30830:	andeq	r1, r3, r0, lsr r9
   30834:	andeq	r1, r3, r0, lsr r9
   30838:	ldrdeq	r0, [r3], -ip
   3083c:	andeq	r0, r3, r8, asr #29
   30840:	andeq	r0, r3, r4, lsr #29
   30844:	andeq	r0, r3, r4, lsl #29
   30848:			; <UNDEFINED> instruction: 0x00030eb4
   3084c:	andeq	r0, r3, ip, ror #27
   30850:	andeq	r1, r3, r0, lsr #32
   30854:	andeq	r1, r3, r0, lsr r9
   30858:	andeq	r1, r3, r0, lsr r9
   3085c:	andeq	r1, r3, r0, lsr r9
   30860:	andeq	r1, r3, r0, lsr r9
   30864:	andeq	r1, r3, r0, lsr r9
   30868:	andeq	r1, r3, r0, lsr r9
   3086c:	andeq	r1, r3, r0, lsr r9
   30870:	andeq	r1, r3, r0, lsr r9
   30874:	andeq	r1, r3, r0, lsr r9
   30878:	andeq	r1, r3, r0, lsr r9
   3087c:	andeq	r1, r3, r0, lsr r9
   30880:	andeq	r1, r3, r0, lsr r9
   30884:	andeq	r1, r3, r0, lsr r9
   30888:	andeq	r1, r3, r0, lsr r9
   3088c:	andeq	r1, r3, r0, lsr r9
   30890:	andeq	r1, r3, r0, lsr r9
   30894:	andeq	r1, r3, r0, lsr r9
   30898:	andeq	r1, r3, r0, lsr r9
   3089c:	andeq	r1, r3, r0, lsl r0
   308a0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308a4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308a8:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308ac:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308b0:	ldrdeq	r0, [r3], -ip
   308b4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308b8:			; <UNDEFINED> instruction: 0x00030db8
   308bc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308c0:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308c4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   308c8:	ldrdeq	r0, [r3], -ip
   308cc:	ldrdeq	r0, [r3], -ip
   308d0:	ldrdeq	r0, [r3], -ip
   308d4:	ldrdeq	r0, [r3], -ip
   308d8:	ldrdeq	r0, [r3], -ip
   308dc:	ldrdeq	r0, [r3], -ip
   308e0:	ldrdeq	r0, [r3], -ip
   308e4:	ldrdeq	r0, [r3], -ip
   308e8:	ldrdeq	r0, [r3], -ip
   308ec:	ldrdeq	r0, [r3], -ip
   308f0:	ldrdeq	r0, [r3], -ip
   308f4:	ldrdeq	r0, [r3], -ip
   308f8:	ldrdeq	r0, [r3], -ip
   308fc:	ldrdeq	r0, [r3], -ip
   30900:	ldrdeq	r0, [r3], -ip
   30904:	ldrdeq	r0, [r3], -ip
   30908:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3090c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30910:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30914:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30918:	andeq	r0, r3, r8, ror #26
   3091c:	andeq	r1, r3, r0, lsr r9
   30920:	ldrdeq	r0, [r3], -ip
   30924:	ldrdeq	r0, [r3], -ip
   30928:	ldrdeq	r0, [r3], -ip
   3092c:	ldrdeq	r0, [r3], -ip
   30930:	ldrdeq	r0, [r3], -ip
   30934:	ldrdeq	r0, [r3], -ip
   30938:	ldrdeq	r0, [r3], -ip
   3093c:	ldrdeq	r0, [r3], -ip
   30940:	ldrdeq	r0, [r3], -ip
   30944:	ldrdeq	r0, [r3], -ip
   30948:	ldrdeq	r0, [r3], -ip
   3094c:	ldrdeq	r0, [r3], -ip
   30950:	ldrdeq	r0, [r3], -ip
   30954:	ldrdeq	r0, [r3], -ip
   30958:	ldrdeq	r0, [r3], -ip
   3095c:	ldrdeq	r0, [r3], -ip
   30960:	ldrdeq	r0, [r3], -ip
   30964:	ldrdeq	r0, [r3], -ip
   30968:	ldrdeq	r0, [r3], -ip
   3096c:	ldrdeq	r0, [r3], -ip
   30970:	ldrdeq	r0, [r3], -ip
   30974:	ldrdeq	r0, [r3], -ip
   30978:	ldrdeq	r0, [r3], -ip
   3097c:	ldrdeq	r0, [r3], -ip
   30980:	ldrdeq	r0, [r3], -ip
   30984:	ldrdeq	r0, [r3], -ip
   30988:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   3098c:	andeq	r0, r3, r4, lsr sp
   30990:	ldrdeq	r0, [r3], -ip
   30994:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30998:	ldrdeq	r0, [r3], -ip
   3099c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   309a0:	ldrdeq	r0, [r3], -ip
   309a4:	ldrdeq	r0, [r3], -ip
   309a8:	ldrdeq	r0, [r3], -ip
   309ac:	ldrdeq	r0, [r3], -ip
   309b0:	ldrdeq	r0, [r3], -ip
   309b4:	ldrdeq	r0, [r3], -ip
   309b8:	ldrdeq	r0, [r3], -ip
   309bc:	ldrdeq	r0, [r3], -ip
   309c0:	ldrdeq	r0, [r3], -ip
   309c4:	ldrdeq	r0, [r3], -ip
   309c8:	ldrdeq	r0, [r3], -ip
   309cc:	ldrdeq	r0, [r3], -ip
   309d0:	ldrdeq	r0, [r3], -ip
   309d4:	ldrdeq	r0, [r3], -ip
   309d8:	ldrdeq	r0, [r3], -ip
   309dc:	ldrdeq	r0, [r3], -ip
   309e0:	ldrdeq	r0, [r3], -ip
   309e4:	ldrdeq	r0, [r3], -ip
   309e8:	ldrdeq	r0, [r3], -ip
   309ec:	ldrdeq	r0, [r3], -ip
   309f0:	ldrdeq	r0, [r3], -ip
   309f4:	ldrdeq	r0, [r3], -ip
   309f8:	ldrdeq	r0, [r3], -ip
   309fc:	ldrdeq	r0, [r3], -ip
   30a00:	ldrdeq	r0, [r3], -ip
   30a04:	ldrdeq	r0, [r3], -ip
   30a08:	andeq	r0, r3, ip, ror #23
   30a0c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30a10:	andeq	r0, r3, ip, ror #23
   30a14:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   30a18:	mov	r3, #1
   30a1c:	str	r3, [sp, #40]	; 0x28
   30a20:	str	r3, [sp, #68]	; 0x44
   30a24:	mov	r8, #0
   30a28:	ldr	r3, [pc, #4056]	; 31a08 <__assert_fail@plt+0x1f414>
   30a2c:	str	r3, [sp, #72]	; 0x48
   30a30:	mov	r3, #2
   30a34:	str	r3, [sp, #176]	; 0xb0
   30a38:	ldr	r1, [sp, #56]	; 0x38
   30a3c:	mov	r2, r3
   30a40:	ldr	ip, [sp, #40]	; 0x28
   30a44:	mov	lr, r3
   30a48:	b	30714 <__assert_fail@plt+0x1e120>
   30a4c:	mov	r3, #1
   30a50:	str	r3, [sp, #56]	; 0x38
   30a54:	str	r3, [sp, #68]	; 0x44
   30a58:	str	r3, [sp, #40]	; 0x28
   30a5c:	ldr	r3, [pc, #4004]	; 31a08 <__assert_fail@plt+0x1f414>
   30a60:	mov	r8, #0
   30a64:	str	r3, [sp, #72]	; 0x48
   30a68:	b	30a30 <__assert_fail@plt+0x1e43c>
   30a6c:	mov	r3, #1
   30a70:	str	r3, [sp, #56]	; 0x38
   30a74:	str	r3, [sp, #68]	; 0x44
   30a78:	str	r3, [sp, #40]	; 0x28
   30a7c:	ldr	r3, [pc, #3976]	; 31a0c <__assert_fail@plt+0x1f418>
   30a80:	mov	r8, #0
   30a84:	str	r3, [sp, #72]	; 0x48
   30a88:	mov	r3, #5
   30a8c:	b	30a34 <__assert_fail@plt+0x1e440>
   30a90:	mov	r3, #0
   30a94:	str	r3, [sp, #40]	; 0x28
   30a98:	mov	r3, #1
   30a9c:	str	r3, [sp, #56]	; 0x38
   30aa0:	mov	r8, #0
   30aa4:	mov	r1, r3
   30aa8:	ldr	r2, [sp, #176]	; 0xb0
   30aac:	ldr	ip, [sp, #40]	; 0x28
   30ab0:	ldr	lr, [sp, #176]	; 0xb0
   30ab4:	b	30714 <__assert_fail@plt+0x1e120>
   30ab8:	ldr	r3, [sp, #176]	; 0xb0
   30abc:	cmp	r3, #10
   30ac0:	beq	30b04 <__assert_fail@plt+0x1e510>
   30ac4:	mov	r2, #5
   30ac8:	ldr	r1, [pc, #3904]	; 31a10 <__assert_fail@plt+0x1f41c>
   30acc:	mov	r0, #0
   30ad0:	bl	120b4 <dcgettext@plt>
   30ad4:	ldr	r2, [pc, #3892]	; 31a10 <__assert_fail@plt+0x1f41c>
   30ad8:	cmp	r0, r2
   30adc:	str	r0, [sp, #188]	; 0xbc
   30ae0:	beq	31b9c <__assert_fail@plt+0x1f5a8>
   30ae4:	mov	r2, #5
   30ae8:	ldr	r1, [pc, #3864]	; 31a08 <__assert_fail@plt+0x1f414>
   30aec:	mov	r0, #0
   30af0:	bl	120b4 <dcgettext@plt>
   30af4:	ldr	r2, [pc, #3852]	; 31a08 <__assert_fail@plt+0x1f414>
   30af8:	cmp	r0, r2
   30afc:	str	r0, [sp, #192]	; 0xc0
   30b00:	beq	31b8c <__assert_fail@plt+0x1f598>
   30b04:	ldr	r8, [sp, #40]	; 0x28
   30b08:	cmp	r8, #0
   30b0c:	movne	r8, #0
   30b10:	bne	30b40 <__assert_fail@plt+0x1e54c>
   30b14:	ldr	r3, [sp, #188]	; 0xbc
   30b18:	ldrb	r3, [r3]
   30b1c:	cmp	r3, #0
   30b20:	beq	30b40 <__assert_fail@plt+0x1e54c>
   30b24:	ldr	r2, [sp, #188]	; 0xbc
   30b28:	cmp	fp, r8
   30b2c:	strbhi	r3, [r9, r8]
   30b30:	ldrb	r3, [r2, #1]!
   30b34:	add	r8, r8, #1
   30b38:	cmp	r3, #0
   30b3c:	bne	30b28 <__assert_fail@plt+0x1e534>
   30b40:	ldr	r0, [sp, #192]	; 0xc0
   30b44:	bl	12300 <strlen@plt>
   30b48:	ldr	r3, [sp, #192]	; 0xc0
   30b4c:	ldr	r2, [sp, #176]	; 0xb0
   30b50:	str	r3, [sp, #72]	; 0x48
   30b54:	mov	r3, #1
   30b58:	str	r3, [sp, #56]	; 0x38
   30b5c:	mov	r1, r3
   30b60:	ldr	ip, [sp, #40]	; 0x28
   30b64:	ldr	lr, [sp, #176]	; 0xb0
   30b68:	str	r0, [sp, #68]	; 0x44
   30b6c:	b	30714 <__assert_fail@plt+0x1e120>
   30b70:	ldr	r3, [sp, #40]	; 0x28
   30b74:	cmp	r3, #0
   30b78:	beq	31820 <__assert_fail@plt+0x1f22c>
   30b7c:	mov	r3, #1
   30b80:	str	r3, [sp, #68]	; 0x44
   30b84:	ldr	r3, [pc, #3708]	; 31a08 <__assert_fail@plt+0x1f414>
   30b88:	str	r3, [sp, #72]	; 0x48
   30b8c:	mov	r8, #0
   30b90:	ldr	r1, [sp, #56]	; 0x38
   30b94:	ldr	r2, [sp, #176]	; 0xb0
   30b98:	ldr	ip, [sp, #40]	; 0x28
   30b9c:	ldr	lr, [sp, #176]	; 0xb0
   30ba0:	b	30714 <__assert_fail@plt+0x1e120>
   30ba4:	ldr	r3, [sp, #40]	; 0x28
   30ba8:	cmp	r3, #0
   30bac:	beq	318a4 <__assert_fail@plt+0x1f2b0>
   30bb0:	str	r3, [sp, #56]	; 0x38
   30bb4:	mov	r3, #1
   30bb8:	str	r3, [sp, #68]	; 0x44
   30bbc:	ldr	r3, [pc, #3656]	; 31a0c <__assert_fail@plt+0x1f418>
   30bc0:	b	30b88 <__assert_fail@plt+0x1e594>
   30bc4:	ldr	r3, [sp, #40]	; 0x28
   30bc8:	cmp	r3, #0
   30bcc:	mov	r3, #1
   30bd0:	streq	r3, [sp, #56]	; 0x38
   30bd4:	beq	31820 <__assert_fail@plt+0x1f22c>
   30bd8:	str	r3, [sp, #68]	; 0x44
   30bdc:	ldr	r3, [pc, #3620]	; 31a08 <__assert_fail@plt+0x1f414>
   30be0:	mov	r8, #0
   30be4:	str	r3, [sp, #72]	; 0x48
   30be8:	b	30a30 <__assert_fail@plt+0x1e43c>
   30bec:	ldr	r3, [sp, #24]
   30bf0:	ldr	r6, [sp, #48]	; 0x30
   30bf4:	cmn	r3, #1
   30bf8:	beq	31254 <__assert_fail@plt+0x1ec60>
   30bfc:	subs	r3, r3, #1
   30c00:	movne	r3, #1
   30c04:	cmp	r3, #0
   30c08:	beq	30fd4 <__assert_fail@plt+0x1e9e0>
   30c0c:	ldr	r1, [sp, #52]	; 0x34
   30c10:	mov	r7, r3
   30c14:	mov	r3, #0
   30c18:	str	r3, [sp, #32]
   30c1c:	ldr	r3, [sp, #60]	; 0x3c
   30c20:	orr	r2, r1, r3
   30c24:	ldr	r3, [sp, #40]	; 0x28
   30c28:	eor	r2, r2, #1
   30c2c:	orr	r2, r3, r2
   30c30:	tst	r2, #255	; 0xff
   30c34:	bne	31558 <__assert_fail@plt+0x1ef64>
   30c38:	cmp	r6, #0
   30c3c:	bne	30e18 <__assert_fail@plt+0x1e824>
   30c40:	ldr	r3, [sp, #36]	; 0x24
   30c44:	add	sl, sl, #1
   30c48:	and	r3, r3, r7
   30c4c:	uxtb	r6, r3
   30c50:	cmp	r6, #0
   30c54:	beq	30c80 <__assert_fail@plt+0x1e68c>
   30c58:	cmp	fp, r8
   30c5c:	movhi	r3, #39	; 0x27
   30c60:	strbhi	r3, [r9, r8]
   30c64:	add	r3, r8, #1
   30c68:	cmp	fp, r3
   30c6c:	movhi	r2, #39	; 0x27
   30c70:	add	r8, r8, #2
   30c74:	strbhi	r2, [r9, r3]
   30c78:	mov	r3, #0
   30c7c:	str	r3, [sp, #36]	; 0x24
   30c80:	ldr	r2, [sp, #32]
   30c84:	cmp	r8, fp
   30c88:	ldr	r3, [sp, #28]
   30c8c:	strbcc	r4, [r9, r8]
   30c90:	cmp	r2, #0
   30c94:	moveq	r3, #0
   30c98:	str	r3, [sp, #28]
   30c9c:	ldr	r3, [sp, #24]
   30ca0:	add	r8, r8, #1
   30ca4:	cmn	r3, #1
   30ca8:	bne	30780 <__assert_fail@plt+0x1e18c>
   30cac:	ldr	r3, [sp, #44]	; 0x2c
   30cb0:	ldrb	r3, [r3, sl]
   30cb4:	adds	r7, r3, #0
   30cb8:	movne	r7, #1
   30cbc:	cmp	r7, #0
   30cc0:	bne	30790 <__assert_fail@plt+0x1e19c>
   30cc4:	ldr	r3, [sp, #64]	; 0x40
   30cc8:	cmp	r8, #0
   30ccc:	movne	r3, #0
   30cd0:	andeq	r3, r3, #1
   30cd4:	cmp	r3, #0
   30cd8:	str	r3, [sp, #64]	; 0x40
   30cdc:	bne	31780 <__assert_fail@plt+0x1f18c>
   30ce0:	ldr	r3, [sp, #40]	; 0x28
   30ce4:	ldr	r2, [sp, #52]	; 0x34
   30ce8:	eor	r3, r3, #1
   30cec:	ands	r2, r2, r3
   30cf0:	beq	31bac <__assert_fail@plt+0x1f5b8>
   30cf4:	ldr	r3, [sp, #76]	; 0x4c
   30cf8:	cmp	r3, #0
   30cfc:	beq	31b7c <__assert_fail@plt+0x1f588>
   30d00:	ldr	r3, [sp, #28]
   30d04:	cmp	r3, #0
   30d08:	bne	31b38 <__assert_fail@plt+0x1f544>
   30d0c:	ldr	r2, [sp, #84]	; 0x54
   30d10:	clz	r3, fp
   30d14:	cmp	r2, #0
   30d18:	lsr	r3, r3, #5
   30d1c:	moveq	r3, #0
   30d20:	cmp	r3, #0
   30d24:	beq	31ad8 <__assert_fail@plt+0x1f4e4>
   30d28:	mov	fp, r2
   30d2c:	str	r3, [sp, #76]	; 0x4c
   30d30:	b	306bc <__assert_fail@plt+0x1e0c8>
   30d34:	ldr	r3, [sp, #176]	; 0xb0
   30d38:	ldr	r6, [sp, #48]	; 0x30
   30d3c:	cmp	r3, #2
   30d40:	beq	31278 <__assert_fail@plt+0x1ec84>
   30d44:	ldr	r3, [sp, #88]	; 0x58
   30d48:	cmp	r3, #0
   30d4c:	beq	317fc <__assert_fail@plt+0x1f208>
   30d50:	mov	r3, #0
   30d54:	add	sl, sl, #1
   30d58:	ldr	r6, [sp, #36]	; 0x24
   30d5c:	str	r3, [sp, #32]
   30d60:	mov	r4, #92	; 0x5c
   30d64:	b	30c50 <__assert_fail@plt+0x1e65c>
   30d68:	ldr	r3, [sp, #176]	; 0xb0
   30d6c:	ldr	r6, [sp, #48]	; 0x30
   30d70:	cmp	r3, #2
   30d74:	beq	312a8 <__assert_fail@plt+0x1ecb4>
   30d78:	cmp	r3, #5
   30d7c:	bne	3180c <__assert_fail@plt+0x1f218>
   30d80:	ldr	r3, [sp, #100]	; 0x64
   30d84:	cmp	r3, #0
   30d88:	beq	31870 <__assert_fail@plt+0x1f27c>
   30d8c:	ldr	r2, [sp, #24]
   30d90:	add	r3, sl, #2
   30d94:	cmp	r2, r3
   30d98:	bls	30da8 <__assert_fail@plt+0x1e7b4>
   30d9c:	ldrb	r4, [r5, #1]
   30da0:	cmp	r4, #63	; 0x3f
   30da4:	beq	31a18 <__assert_fail@plt+0x1f424>
   30da8:	mov	r1, #0
   30dac:	str	r1, [sp, #32]
   30db0:	mov	r4, #63	; 0x3f
   30db4:	b	30c1c <__assert_fail@plt+0x1e628>
   30db8:	ldr	r3, [sp, #176]	; 0xb0
   30dbc:	ldr	r6, [sp, #48]	; 0x30
   30dc0:	cmp	r3, #2
   30dc4:	beq	312d4 <__assert_fail@plt+0x1ece0>
   30dc8:	str	r7, [sp, #32]
   30dcc:	str	r7, [sp, #76]	; 0x4c
   30dd0:	mov	r1, #0
   30dd4:	mov	r4, #39	; 0x27
   30dd8:	b	30c1c <__assert_fail@plt+0x1e628>
   30ddc:	ldr	r6, [sp, #48]	; 0x30
   30de0:	ldr	r1, [sp, #52]	; 0x34
   30de4:	str	r7, [sp, #32]
   30de8:	b	30c1c <__assert_fail@plt+0x1e628>
   30dec:	ldr	r6, [sp, #48]	; 0x30
   30df0:	ldr	r1, [sp, #52]	; 0x34
   30df4:	mov	r4, #12
   30df8:	mov	r3, #102	; 0x66
   30dfc:	ldr	r2, [sp, #56]	; 0x38
   30e00:	cmp	r2, #0
   30e04:	streq	r2, [sp, #32]
   30e08:	beq	30c1c <__assert_fail@plt+0x1e628>
   30e0c:	mov	r4, r3
   30e10:	mov	r3, #0
   30e14:	str	r3, [sp, #32]
   30e18:	ldr	r3, [sp, #40]	; 0x28
   30e1c:	cmp	r3, #0
   30e20:	bne	31590 <__assert_fail@plt+0x1ef9c>
   30e24:	ldr	r3, [sp, #36]	; 0x24
   30e28:	eor	r3, r3, #1
   30e2c:	and	r3, r3, r1
   30e30:	ands	r3, r3, #255	; 0xff
   30e34:	beq	30e6c <__assert_fail@plt+0x1e878>
   30e38:	cmp	fp, r8
   30e3c:	movhi	r2, #39	; 0x27
   30e40:	strbhi	r2, [r9, r8]
   30e44:	add	r2, r8, #1
   30e48:	cmp	fp, r2
   30e4c:	movhi	r1, #36	; 0x24
   30e50:	strbhi	r1, [r9, r2]
   30e54:	add	r2, r8, #2
   30e58:	cmp	fp, r2
   30e5c:	add	r8, r8, #3
   30e60:	movhi	r1, #39	; 0x27
   30e64:	strbhi	r1, [r9, r2]
   30e68:	str	r3, [sp, #36]	; 0x24
   30e6c:	cmp	fp, r8
   30e70:	movhi	r3, #92	; 0x5c
   30e74:	strbhi	r3, [r9, r8]
   30e78:	add	sl, sl, #1
   30e7c:	add	r8, r8, #1
   30e80:	b	30c80 <__assert_fail@plt+0x1e68c>
   30e84:	ldr	r6, [sp, #48]	; 0x30
   30e88:	mov	r4, #10
   30e8c:	mov	r3, #110	; 0x6e
   30e90:	ldr	r2, [sp, #64]	; 0x40
   30e94:	cmp	r2, #0
   30e98:	bne	31918 <__assert_fail@plt+0x1f324>
   30e9c:	ldr	r1, [sp, #52]	; 0x34
   30ea0:	b	30dfc <__assert_fail@plt+0x1e808>
   30ea4:	ldr	r6, [sp, #48]	; 0x30
   30ea8:	ldr	r1, [sp, #52]	; 0x34
   30eac:	mov	r3, #116	; 0x74
   30eb0:	b	30dfc <__assert_fail@plt+0x1e808>
   30eb4:	ldr	r6, [sp, #48]	; 0x30
   30eb8:	ldr	r1, [sp, #52]	; 0x34
   30ebc:	mov	r4, #11
   30ec0:	mov	r3, #118	; 0x76
   30ec4:	b	30dfc <__assert_fail@plt+0x1e808>
   30ec8:	ldr	r6, [sp, #48]	; 0x30
   30ecc:	ldr	r1, [sp, #52]	; 0x34
   30ed0:	mov	r4, #8
   30ed4:	mov	r3, #98	; 0x62
   30ed8:	b	30dfc <__assert_fail@plt+0x1e808>
   30edc:	ldr	r6, [sp, #48]	; 0x30
   30ee0:	ldr	r1, [sp, #52]	; 0x34
   30ee4:	mov	r4, #7
   30ee8:	mov	r3, #97	; 0x61
   30eec:	b	30dfc <__assert_fail@plt+0x1e808>
   30ef0:	ldr	r3, [sp, #56]	; 0x38
   30ef4:	ldr	r6, [sp, #48]	; 0x30
   30ef8:	cmp	r3, #0
   30efc:	beq	313c0 <__assert_fail@plt+0x1edcc>
   30f00:	ldr	r3, [sp, #40]	; 0x28
   30f04:	cmp	r3, #0
   30f08:	bne	319f4 <__assert_fail@plt+0x1f400>
   30f0c:	ldr	r3, [sp, #36]	; 0x24
   30f10:	ldr	r2, [sp, #52]	; 0x34
   30f14:	eor	r3, r3, #1
   30f18:	ands	r3, r2, r3
   30f1c:	moveq	r2, r8
   30f20:	beq	30f58 <__assert_fail@plt+0x1e964>
   30f24:	cmp	fp, r8
   30f28:	movhi	r2, #39	; 0x27
   30f2c:	strbhi	r2, [r9, r8]
   30f30:	add	r2, r8, #1
   30f34:	cmp	fp, r2
   30f38:	movhi	r1, #36	; 0x24
   30f3c:	strbhi	r1, [r9, r2]
   30f40:	add	r2, r8, #2
   30f44:	cmp	fp, r2
   30f48:	movhi	r1, #39	; 0x27
   30f4c:	strbhi	r1, [r9, r2]
   30f50:	add	r2, r8, #3
   30f54:	str	r3, [sp, #36]	; 0x24
   30f58:	cmp	fp, r2
   30f5c:	movhi	r3, #92	; 0x5c
   30f60:	strbhi	r3, [r9, r2]
   30f64:	ldr	r3, [sp, #92]	; 0x5c
   30f68:	add	r8, r2, #1
   30f6c:	cmp	r3, #0
   30f70:	beq	318f4 <__assert_fail@plt+0x1f300>
   30f74:	ldr	r1, [sp, #24]
   30f78:	add	r3, sl, #1
   30f7c:	cmp	r1, r3
   30f80:	bls	30fb8 <__assert_fail@plt+0x1e9c4>
   30f84:	ldr	r1, [sp, #44]	; 0x2c
   30f88:	ldrb	r3, [r1, r3]
   30f8c:	sub	r3, r3, #48	; 0x30
   30f90:	cmp	r3, #9
   30f94:	bhi	30fb8 <__assert_fail@plt+0x1e9c4>
   30f98:	cmp	fp, r8
   30f9c:	movhi	r3, #48	; 0x30
   30fa0:	strbhi	r3, [r9, r8]
   30fa4:	add	r3, r2, #2
   30fa8:	cmp	fp, r3
   30fac:	add	r8, r2, #3
   30fb0:	movhi	r1, #48	; 0x30
   30fb4:	strbhi	r1, [r9, r3]
   30fb8:	ldr	r3, [sp, #40]	; 0x28
   30fbc:	ldr	r1, [sp, #52]	; 0x34
   30fc0:	mov	r7, r3
   30fc4:	str	r3, [sp, #32]
   30fc8:	mov	r4, #48	; 0x30
   30fcc:	b	30c1c <__assert_fail@plt+0x1e628>
   30fd0:	ldr	r6, [sp, #48]	; 0x30
   30fd4:	cmp	sl, #0
   30fd8:	streq	r7, [sp, #32]
   30fdc:	beq	30ffc <__assert_fail@plt+0x1ea08>
   30fe0:	mov	r3, #0
   30fe4:	ldr	r1, [sp, #52]	; 0x34
   30fe8:	str	r3, [sp, #32]
   30fec:	b	30c1c <__assert_fail@plt+0x1e628>
   30ff0:	ldr	r6, [sp, #48]	; 0x30
   30ff4:	mov	r3, #0
   30ff8:	str	r3, [sp, #32]
   30ffc:	ldr	r3, [sp, #64]	; 0x40
   31000:	cmp	r3, #0
   31004:	bne	31780 <__assert_fail@plt+0x1f18c>
   31008:	ldr	r1, [sp, #52]	; 0x34
   3100c:	b	30c1c <__assert_fail@plt+0x1e628>
   31010:	ldr	r3, [sp, #48]	; 0x30
   31014:	mov	r6, r3
   31018:	str	r3, [sp, #32]
   3101c:	b	30ffc <__assert_fail@plt+0x1ea08>
   31020:	ldr	r6, [sp, #48]	; 0x30
   31024:	mov	r4, #13
   31028:	mov	r3, #114	; 0x72
   3102c:	b	30e90 <__assert_fail@plt+0x1e89c>
   31030:	ldr	r3, [sp, #44]	; 0x2c
   31034:	add	r5, r3, sl
   31038:	ldrb	r4, [r5]
   3103c:	cmp	r4, #126	; 0x7e
   31040:	ldrls	pc, [pc, r4, lsl #2]
   31044:	b	313e0 <__assert_fail@plt+0x1edec>
   31048:			; <UNDEFINED> instruction: 0x000313b0
   3104c:	andeq	r1, r3, r0, ror #7
   31050:	andeq	r1, r3, r0, ror #7
   31054:	andeq	r1, r3, r0, ror #7
   31058:	andeq	r1, r3, r0, ror #7
   3105c:	andeq	r1, r3, r0, ror #7
   31060:	andeq	r1, r3, r0, ror #7
   31064:	andeq	r1, r3, r8, lsr #7
   31068:	andeq	r1, r3, r0, lsr #7
   3106c:	muleq	r3, r4, r3
   31070:	andeq	r1, r3, ip, lsl #7
   31074:	andeq	r1, r3, r4, lsl #7
   31078:	andeq	r1, r3, ip, ror r3
   3107c:	andeq	r1, r3, r4, ror r3
   31080:	andeq	r1, r3, r0, ror #7
   31084:	andeq	r1, r3, r0, ror #7
   31088:	andeq	r1, r3, r0, ror #7
   3108c:	andeq	r1, r3, r0, ror #7
   31090:	andeq	r1, r3, r0, ror #7
   31094:	andeq	r1, r3, r0, ror #7
   31098:	andeq	r1, r3, r0, ror #7
   3109c:	andeq	r1, r3, r0, ror #7
   310a0:	andeq	r1, r3, r0, ror #7
   310a4:	andeq	r1, r3, r0, ror #7
   310a8:	andeq	r1, r3, r0, ror #7
   310ac:	andeq	r1, r3, r0, ror #7
   310b0:	andeq	r1, r3, r0, ror #7
   310b4:	andeq	r1, r3, r0, ror #7
   310b8:	andeq	r1, r3, r0, ror #7
   310bc:	andeq	r1, r3, r0, ror #7
   310c0:	andeq	r1, r3, r0, ror #7
   310c4:	andeq	r1, r3, r0, ror #7
   310c8:	andeq	r1, r3, r8, ror #6
   310cc:	andeq	r1, r3, r0, ror #6
   310d0:	andeq	r1, r3, r0, ror #6
   310d4:	andeq	r1, r3, r8, asr r3
   310d8:	andeq	r1, r3, r0, ror #6
   310dc:	andeq	r1, r3, r0, asr r3
   310e0:	andeq	r1, r3, r0, ror #6
   310e4:	andeq	r1, r3, r4, asr #5
   310e8:	andeq	r1, r3, r0, ror #6
   310ec:	andeq	r1, r3, r0, ror #6
   310f0:	andeq	r1, r3, r0, ror #6
   310f4:	andeq	r1, r3, r0, asr r3
   310f8:	andeq	r1, r3, r0, asr r3
   310fc:	andeq	r1, r3, r0, asr r3
   31100:	andeq	r1, r3, r0, asr r3
   31104:	andeq	r1, r3, r0, asr r3
   31108:	andeq	r1, r3, r0, asr r3
   3110c:	andeq	r1, r3, r0, asr r3
   31110:	andeq	r1, r3, r0, asr r3
   31114:	andeq	r1, r3, r0, asr r3
   31118:	andeq	r1, r3, r0, asr r3
   3111c:	andeq	r1, r3, r0, asr r3
   31120:	andeq	r1, r3, r0, asr r3
   31124:	andeq	r1, r3, r0, asr r3
   31128:	andeq	r1, r3, r0, asr r3
   3112c:	andeq	r1, r3, r0, asr r3
   31130:	andeq	r1, r3, r0, asr r3
   31134:	andeq	r1, r3, r0, ror #6
   31138:	andeq	r1, r3, r0, ror #6
   3113c:	andeq	r1, r3, r0, ror #6
   31140:	andeq	r1, r3, r0, ror #6
   31144:	muleq	r3, r8, r2
   31148:	andeq	r1, r3, r0, ror #7
   3114c:	andeq	r1, r3, r0, asr r3
   31150:	andeq	r1, r3, r0, asr r3
   31154:	andeq	r1, r3, r0, asr r3
   31158:	andeq	r1, r3, r0, asr r3
   3115c:	andeq	r1, r3, r0, asr r3
   31160:	andeq	r1, r3, r0, asr r3
   31164:	andeq	r1, r3, r0, asr r3
   31168:	andeq	r1, r3, r0, asr r3
   3116c:	andeq	r1, r3, r0, asr r3
   31170:	andeq	r1, r3, r0, asr r3
   31174:	andeq	r1, r3, r0, asr r3
   31178:	andeq	r1, r3, r0, asr r3
   3117c:	andeq	r1, r3, r0, asr r3
   31180:	andeq	r1, r3, r0, asr r3
   31184:	andeq	r1, r3, r0, asr r3
   31188:	andeq	r1, r3, r0, asr r3
   3118c:	andeq	r1, r3, r0, asr r3
   31190:	andeq	r1, r3, r0, asr r3
   31194:	andeq	r1, r3, r0, asr r3
   31198:	andeq	r1, r3, r0, asr r3
   3119c:	andeq	r1, r3, r0, asr r3
   311a0:	andeq	r1, r3, r0, asr r3
   311a4:	andeq	r1, r3, r0, asr r3
   311a8:	andeq	r1, r3, r0, asr r3
   311ac:	andeq	r1, r3, r0, asr r3
   311b0:	andeq	r1, r3, r0, asr r3
   311b4:	andeq	r1, r3, r0, ror #6
   311b8:	andeq	r1, r3, r8, ror #4
   311bc:	andeq	r1, r3, r0, asr r3
   311c0:	andeq	r1, r3, r0, ror #6
   311c4:	andeq	r1, r3, r0, asr r3
   311c8:	andeq	r1, r3, r0, ror #6
   311cc:	andeq	r1, r3, r0, asr r3
   311d0:	andeq	r1, r3, r0, asr r3
   311d4:	andeq	r1, r3, r0, asr r3
   311d8:	andeq	r1, r3, r0, asr r3
   311dc:	andeq	r1, r3, r0, asr r3
   311e0:	andeq	r1, r3, r0, asr r3
   311e4:	andeq	r1, r3, r0, asr r3
   311e8:	andeq	r1, r3, r0, asr r3
   311ec:	andeq	r1, r3, r0, asr r3
   311f0:	andeq	r1, r3, r0, asr r3
   311f4:	andeq	r1, r3, r0, asr r3
   311f8:	andeq	r1, r3, r0, asr r3
   311fc:	andeq	r1, r3, r0, asr r3
   31200:	andeq	r1, r3, r0, asr r3
   31204:	andeq	r1, r3, r0, asr r3
   31208:	andeq	r1, r3, r0, asr r3
   3120c:	andeq	r1, r3, r0, asr r3
   31210:	andeq	r1, r3, r0, asr r3
   31214:	andeq	r1, r3, r0, asr r3
   31218:	andeq	r1, r3, r0, asr r3
   3121c:	andeq	r1, r3, r0, asr r3
   31220:	andeq	r1, r3, r0, asr r3
   31224:	andeq	r1, r3, r0, asr r3
   31228:	andeq	r1, r3, r0, asr r3
   3122c:	andeq	r1, r3, r0, asr r3
   31230:	andeq	r1, r3, r0, asr r3
   31234:	andeq	r1, r3, r4, asr #4
   31238:	andeq	r1, r3, r0, ror #6
   3123c:	andeq	r1, r3, r4, asr #4
   31240:	andeq	r1, r3, r8, asr r3
   31244:	ldr	r3, [sp, #24]
   31248:	mov	r6, #0
   3124c:	cmn	r3, #1
   31250:	bne	30bfc <__assert_fail@plt+0x1e608>
   31254:	ldr	r3, [sp, #44]	; 0x2c
   31258:	ldrb	r3, [r3, #1]
   3125c:	adds	r3, r3, #0
   31260:	movne	r3, #1
   31264:	b	30c04 <__assert_fail@plt+0x1e610>
   31268:	ldr	r3, [sp, #176]	; 0xb0
   3126c:	mov	r6, #0
   31270:	cmp	r3, #2
   31274:	bne	30d44 <__assert_fail@plt+0x1e750>
   31278:	ldr	r3, [sp, #64]	; 0x40
   3127c:	cmp	r3, #0
   31280:	bne	31ab8 <__assert_fail@plt+0x1f4c4>
   31284:	add	sl, sl, #1
   31288:	ldr	r6, [sp, #36]	; 0x24
   3128c:	str	r3, [sp, #32]
   31290:	mov	r4, #92	; 0x5c
   31294:	b	30c50 <__assert_fail@plt+0x1e65c>
   31298:	ldr	r3, [sp, #176]	; 0xb0
   3129c:	mov	r6, #0
   312a0:	cmp	r3, #2
   312a4:	bne	30d78 <__assert_fail@plt+0x1e784>
   312a8:	ldr	r3, [sp, #40]	; 0x28
   312ac:	cmp	r3, #0
   312b0:	bne	31594 <__assert_fail@plt+0x1efa0>
   312b4:	mov	r1, r7
   312b8:	str	r3, [sp, #32]
   312bc:	mov	r4, #63	; 0x3f
   312c0:	b	30c1c <__assert_fail@plt+0x1e628>
   312c4:	ldr	r3, [sp, #176]	; 0xb0
   312c8:	mov	r6, #0
   312cc:	cmp	r3, #2
   312d0:	bne	30dc8 <__assert_fail@plt+0x1e7d4>
   312d4:	ldr	r3, [sp, #64]	; 0x40
   312d8:	cmp	r3, #0
   312dc:	bne	31ab8 <__assert_fail@plt+0x1f4c4>
   312e0:	ldr	r2, [sp, #84]	; 0x54
   312e4:	adds	r3, fp, #0
   312e8:	movne	r3, #1
   312ec:	cmp	r2, #0
   312f0:	movne	r3, #0
   312f4:	cmp	r3, #0
   312f8:	strne	fp, [sp, #84]	; 0x54
   312fc:	movne	fp, #0
   31300:	bne	31330 <__assert_fail@plt+0x1ed3c>
   31304:	cmp	fp, r8
   31308:	movhi	r3, #39	; 0x27
   3130c:	strbhi	r3, [r9, r8]
   31310:	add	r3, r8, #1
   31314:	cmp	fp, r3
   31318:	movhi	r2, #92	; 0x5c
   3131c:	strbhi	r2, [r9, r3]
   31320:	add	r3, r8, #2
   31324:	cmp	fp, r3
   31328:	movhi	r2, #39	; 0x27
   3132c:	strbhi	r2, [r9, r3]
   31330:	ldr	r3, [sp, #64]	; 0x40
   31334:	add	r8, r8, #3
   31338:	mov	r1, r7
   3133c:	str	r7, [sp, #32]
   31340:	str	r7, [sp, #76]	; 0x4c
   31344:	str	r3, [sp, #36]	; 0x24
   31348:	mov	r4, #39	; 0x27
   3134c:	b	30c1c <__assert_fail@plt+0x1e628>
   31350:	mov	r6, #0
   31354:	b	30de0 <__assert_fail@plt+0x1e7ec>
   31358:	mov	r6, #0
   3135c:	b	30fd4 <__assert_fail@plt+0x1e9e0>
   31360:	mov	r6, #0
   31364:	b	30ff4 <__assert_fail@plt+0x1ea00>
   31368:	str	r7, [sp, #32]
   3136c:	mov	r6, #0
   31370:	b	30ffc <__assert_fail@plt+0x1ea08>
   31374:	mov	r6, #0
   31378:	b	31024 <__assert_fail@plt+0x1ea30>
   3137c:	mov	r6, #0
   31380:	b	30df0 <__assert_fail@plt+0x1e7fc>
   31384:	mov	r6, #0
   31388:	b	30eb8 <__assert_fail@plt+0x1e8c4>
   3138c:	mov	r6, #0
   31390:	b	30e88 <__assert_fail@plt+0x1e894>
   31394:	mov	r6, #0
   31398:	mov	r3, #116	; 0x74
   3139c:	b	30e90 <__assert_fail@plt+0x1e89c>
   313a0:	mov	r6, #0
   313a4:	b	30ecc <__assert_fail@plt+0x1e8d8>
   313a8:	mov	r6, #0
   313ac:	b	30ee0 <__assert_fail@plt+0x1e8ec>
   313b0:	ldr	r3, [sp, #56]	; 0x38
   313b4:	mov	r6, #0
   313b8:	cmp	r3, #0
   313bc:	bne	30f00 <__assert_fail@plt+0x1e90c>
   313c0:	ldr	r3, [sp, #96]	; 0x60
   313c4:	cmp	r3, #0
   313c8:	addne	sl, sl, #1
   313cc:	bne	30774 <__assert_fail@plt+0x1e180>
   313d0:	ldr	r1, [sp, #52]	; 0x34
   313d4:	str	r3, [sp, #32]
   313d8:	mov	r4, r3
   313dc:	b	30c1c <__assert_fail@plt+0x1e628>
   313e0:	mov	r6, #0
   313e4:	ldr	r3, [sp, #80]	; 0x50
   313e8:	cmp	r3, #1
   313ec:	bne	315dc <__assert_fail@plt+0x1efe8>
   313f0:	bl	122b8 <__ctype_b_loc@plt>
   313f4:	ldr	r2, [sp, #80]	; 0x50
   313f8:	sxth	r3, r4
   313fc:	mov	r1, r2
   31400:	lsl	r3, r3, #1
   31404:	ldr	r2, [r0]
   31408:	ldrh	r3, [r2, r3]
   3140c:	and	r3, r3, #16384	; 0x4000
   31410:	cmp	r3, #0
   31414:	movne	r3, #1
   31418:	moveq	r3, #0
   3141c:	str	r3, [sp, #32]
   31420:	moveq	r3, #1
   31424:	movne	r3, #0
   31428:	ldr	r2, [sp, #56]	; 0x38
   3142c:	and	r3, r3, r2
   31430:	ands	r3, r3, #255	; 0xff
   31434:	beq	31008 <__assert_fail@plt+0x1ea14>
   31438:	add	r1, sl, r1
   3143c:	mov	r0, #0
   31440:	ldr	r7, [sp, #40]	; 0x28
   31444:	ldr	r2, [sp, #36]	; 0x24
   31448:	ldr	lr, [sp, #52]	; 0x34
   3144c:	b	314fc <__assert_fail@plt+0x1ef08>
   31450:	cmp	r7, #0
   31454:	bne	31850 <__assert_fail@plt+0x1f25c>
   31458:	eor	r0, r2, #1
   3145c:	ands	r0, lr, r0
   31460:	beq	31498 <__assert_fail@plt+0x1eea4>
   31464:	cmp	fp, r8
   31468:	movhi	r2, #39	; 0x27
   3146c:	strbhi	r2, [r9, r8]
   31470:	add	r2, r8, #1
   31474:	cmp	fp, r2
   31478:	movhi	ip, #36	; 0x24
   3147c:	strbhi	ip, [r9, r2]
   31480:	add	r2, r8, #2
   31484:	cmp	fp, r2
   31488:	movhi	ip, #39	; 0x27
   3148c:	strbhi	ip, [r9, r2]
   31490:	add	r8, r8, #3
   31494:	mov	r2, r0
   31498:	cmp	fp, r8
   3149c:	movhi	r0, #92	; 0x5c
   314a0:	strbhi	r0, [r9, r8]
   314a4:	add	r0, r8, #1
   314a8:	cmp	fp, r0
   314ac:	lsrhi	ip, r4, #6
   314b0:	addhi	ip, ip, #48	; 0x30
   314b4:	strbhi	ip, [r9, r0]
   314b8:	add	ip, r8, #2
   314bc:	cmp	fp, ip
   314c0:	lsrhi	r0, r4, #3
   314c4:	andhi	r0, r0, #7
   314c8:	addhi	r0, r0, #48	; 0x30
   314cc:	add	sl, sl, #1
   314d0:	strbhi	r0, [r9, ip]
   314d4:	and	r4, r4, #7
   314d8:	cmp	sl, r1
   314dc:	add	r4, r4, #48	; 0x30
   314e0:	add	r8, r8, #3
   314e4:	bcs	31868 <__assert_fail@plt+0x1f274>
   314e8:	mov	r0, r3
   314ec:	cmp	fp, r8
   314f0:	strbhi	r4, [r9, r8]
   314f4:	ldrb	r4, [r5, #1]!
   314f8:	add	r8, r8, #1
   314fc:	cmp	r3, #0
   31500:	bne	31450 <__assert_fail@plt+0x1ee5c>
   31504:	cmp	r6, #0
   31508:	bne	315ac <__assert_fail@plt+0x1efb8>
   3150c:	eor	r6, r0, #1
   31510:	and	r6, r6, r2
   31514:	add	sl, sl, #1
   31518:	cmp	r1, sl
   3151c:	uxtb	r6, r6
   31520:	bls	315d4 <__assert_fail@plt+0x1efe0>
   31524:	cmp	r6, #0
   31528:	beq	314ec <__assert_fail@plt+0x1eef8>
   3152c:	cmp	fp, r8
   31530:	movhi	r2, #39	; 0x27
   31534:	strbhi	r2, [r9, r8]
   31538:	add	r2, r8, #1
   3153c:	cmp	fp, r2
   31540:	movhi	ip, #39	; 0x27
   31544:	strbhi	ip, [r9, r2]
   31548:	add	r8, r8, #2
   3154c:	mov	r6, r3
   31550:	mov	r2, r3
   31554:	b	314ec <__assert_fail@plt+0x1eef8>
   31558:	ldr	r3, [sp, #184]	; 0xb8
   3155c:	cmp	r3, #0
   31560:	beq	30c38 <__assert_fail@plt+0x1e644>
   31564:	lsr	r2, r4, #5
   31568:	mov	r0, r3
   3156c:	uxtb	r2, r2
   31570:	and	r3, r4, #31
   31574:	ldr	r2, [r0, r2, lsl #2]
   31578:	lsr	r3, r2, r3
   3157c:	tst	r3, #1
   31580:	beq	30c38 <__assert_fail@plt+0x1e644>
   31584:	ldr	r3, [sp, #40]	; 0x28
   31588:	cmp	r3, #0
   3158c:	beq	30e24 <__assert_fail@plt+0x1e830>
   31590:	mov	r3, r1
   31594:	str	r3, [sp, #64]	; 0x40
   31598:	mov	sl, r9
   3159c:	ldr	r3, [sp, #56]	; 0x38
   315a0:	mov	r9, fp
   315a4:	ldr	r2, [sp, #64]	; 0x40
   315a8:	b	31798 <__assert_fail@plt+0x1f1a4>
   315ac:	cmp	fp, r8
   315b0:	eor	r6, r0, #1
   315b4:	movhi	ip, #92	; 0x5c
   315b8:	and	r6, r6, r2
   315bc:	add	sl, sl, #1
   315c0:	strbhi	ip, [r9, r8]
   315c4:	cmp	r1, sl
   315c8:	add	r8, r8, #1
   315cc:	uxtb	r6, r6
   315d0:	bhi	31524 <__assert_fail@plt+0x1ef30>
   315d4:	str	r2, [sp, #36]	; 0x24
   315d8:	b	30c50 <__assert_fail@plt+0x1e65c>
   315dc:	ldr	r3, [sp, #24]
   315e0:	cmn	r3, #1
   315e4:	mov	r3, #0
   315e8:	str	r3, [sp, #128]	; 0x80
   315ec:	str	r3, [sp, #132]	; 0x84
   315f0:	beq	318e4 <__assert_fail@plt+0x1f2f0>
   315f4:	mov	r2, r7
   315f8:	mov	r3, #0
   315fc:	str	r7, [sp, #104]	; 0x68
   31600:	str	r5, [sp, #116]	; 0x74
   31604:	mov	r7, r3
   31608:	mov	r5, r2
   3160c:	str	r4, [sp, #32]
   31610:	str	r6, [sp, #108]	; 0x6c
   31614:	str	r8, [sp, #112]	; 0x70
   31618:	ldr	r3, [sp, #44]	; 0x2c
   3161c:	add	r6, sl, r7
   31620:	add	r4, r3, r6
   31624:	ldr	r3, [sp, #24]
   31628:	mov	r1, r4
   3162c:	sub	r2, r3, r6
   31630:	add	r0, sp, #124	; 0x7c
   31634:	add	r3, sp, #128	; 0x80
   31638:	bl	3a03c <__assert_fail@plt+0x27a48>
   3163c:	subs	r8, r0, #0
   31640:	beq	319c8 <__assert_fail@plt+0x1f3d4>
   31644:	cmn	r8, #1
   31648:	beq	319a0 <__assert_fail@plt+0x1f3ac>
   3164c:	cmn	r8, #2
   31650:	beq	31938 <__assert_fail@plt+0x1f344>
   31654:	ldr	r3, [sp, #64]	; 0x40
   31658:	cmp	r3, #0
   3165c:	beq	3171c <__assert_fail@plt+0x1f128>
   31660:	cmp	r8, #1
   31664:	beq	3171c <__assert_fail@plt+0x1f128>
   31668:	sub	r3, r8, #1
   3166c:	add	r6, r3, r6
   31670:	ldr	r3, [sp, #44]	; 0x2c
   31674:	add	r6, r3, r6
   31678:	ldrb	r3, [r4, #1]!
   3167c:	sub	r3, r3, #91	; 0x5b
   31680:	cmp	r3, #33	; 0x21
   31684:	ldrls	pc, [pc, r3, lsl #2]
   31688:	b	31714 <__assert_fail@plt+0x1f120>
   3168c:	andeq	r1, r3, r0, lsl #15
   31690:	andeq	r1, r3, r0, lsl #15
   31694:	andeq	r1, r3, r4, lsl r7
   31698:	andeq	r1, r3, r0, lsl #15
   3169c:	andeq	r1, r3, r4, lsl r7
   316a0:	andeq	r1, r3, r0, lsl #15
   316a4:	andeq	r1, r3, r4, lsl r7
   316a8:	andeq	r1, r3, r4, lsl r7
   316ac:	andeq	r1, r3, r4, lsl r7
   316b0:	andeq	r1, r3, r4, lsl r7
   316b4:	andeq	r1, r3, r4, lsl r7
   316b8:	andeq	r1, r3, r4, lsl r7
   316bc:	andeq	r1, r3, r4, lsl r7
   316c0:	andeq	r1, r3, r4, lsl r7
   316c4:	andeq	r1, r3, r4, lsl r7
   316c8:	andeq	r1, r3, r4, lsl r7
   316cc:	andeq	r1, r3, r4, lsl r7
   316d0:	andeq	r1, r3, r4, lsl r7
   316d4:	andeq	r1, r3, r4, lsl r7
   316d8:	andeq	r1, r3, r4, lsl r7
   316dc:	andeq	r1, r3, r4, lsl r7
   316e0:	andeq	r1, r3, r4, lsl r7
   316e4:	andeq	r1, r3, r4, lsl r7
   316e8:	andeq	r1, r3, r4, lsl r7
   316ec:	andeq	r1, r3, r4, lsl r7
   316f0:	andeq	r1, r3, r4, lsl r7
   316f4:	andeq	r1, r3, r4, lsl r7
   316f8:	andeq	r1, r3, r4, lsl r7
   316fc:	andeq	r1, r3, r4, lsl r7
   31700:	andeq	r1, r3, r4, lsl r7
   31704:	andeq	r1, r3, r4, lsl r7
   31708:	andeq	r1, r3, r4, lsl r7
   3170c:	andeq	r1, r3, r4, lsl r7
   31710:	andeq	r1, r3, r0, lsl #15
   31714:	cmp	r6, r4
   31718:	bne	31678 <__assert_fail@plt+0x1f084>
   3171c:	ldr	r0, [sp, #124]	; 0x7c
   31720:	bl	12138 <iswprint@plt>
   31724:	add	r7, r7, r8
   31728:	cmp	r0, #0
   3172c:	add	r0, sp, #128	; 0x80
   31730:	moveq	r5, #0
   31734:	bl	12060 <mbsinit@plt>
   31738:	cmp	r0, #0
   3173c:	beq	31618 <__assert_fail@plt+0x1f024>
   31740:	ldr	r4, [sp, #32]
   31744:	str	r5, [sp, #32]
   31748:	ldr	r3, [sp, #32]
   3174c:	mov	r1, r7
   31750:	eor	r3, r3, #1
   31754:	ldr	r7, [sp, #104]	; 0x68
   31758:	ldr	r6, [sp, #108]	; 0x6c
   3175c:	ldr	r8, [sp, #112]	; 0x70
   31760:	ldr	r5, [sp, #116]	; 0x74
   31764:	uxtb	r3, r3
   31768:	cmp	r1, #1
   3176c:	bls	31428 <__assert_fail@plt+0x1ee34>
   31770:	ldr	r2, [sp, #56]	; 0x38
   31774:	and	r3, r3, r2
   31778:	uxtb	r3, r3
   3177c:	b	31438 <__assert_fail@plt+0x1ee44>
   31780:	mov	r3, #2
   31784:	str	r3, [sp, #176]	; 0xb0
   31788:	ldr	r2, [sp, #64]	; 0x40
   3178c:	ldr	r3, [sp, #56]	; 0x38
   31790:	mov	sl, r9
   31794:	mov	r9, fp
   31798:	and	r3, r3, r2
   3179c:	tst	r3, #255	; 0xff
   317a0:	ldr	r3, [sp, #176]	; 0xb0
   317a4:	movne	r3, #4
   317a8:	str	r3, [sp, #176]	; 0xb0
   317ac:	ldr	r3, [sp, #180]	; 0xb4
   317b0:	mov	ip, #0
   317b4:	bic	r3, r3, #2
   317b8:	str	r3, [sp, #4]
   317bc:	ldr	r3, [sp, #192]	; 0xc0
   317c0:	ldr	r2, [sp, #44]	; 0x2c
   317c4:	str	r3, [sp, #16]
   317c8:	ldr	r3, [sp, #188]	; 0xbc
   317cc:	mov	r1, r9
   317d0:	str	r3, [sp, #12]
   317d4:	ldr	r3, [sp, #176]	; 0xb0
   317d8:	mov	r0, sl
   317dc:	str	r3, [sp]
   317e0:	str	ip, [sp, #8]
   317e4:	ldr	r3, [sp, #24]
   317e8:	bl	30648 <__assert_fail@plt+0x1e054>
   317ec:	mov	fp, r0
   317f0:	mov	r0, fp
   317f4:	add	sp, sp, #140	; 0x8c
   317f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   317fc:	mov	r4, #92	; 0x5c
   31800:	mov	r1, #0
   31804:	mov	r3, r4
   31808:	b	30dfc <__assert_fail@plt+0x1e808>
   3180c:	mov	r3, #0
   31810:	ldr	r1, [sp, #52]	; 0x34
   31814:	str	r3, [sp, #32]
   31818:	mov	r4, #63	; 0x3f
   3181c:	b	30c1c <__assert_fail@plt+0x1e628>
   31820:	cmp	fp, #0
   31824:	beq	31880 <__assert_fail@plt+0x1f28c>
   31828:	mov	r3, #39	; 0x27
   3182c:	strb	r3, [r9]
   31830:	mov	r3, #0
   31834:	str	r3, [sp, #40]	; 0x28
   31838:	mov	r3, #1
   3183c:	str	r3, [sp, #68]	; 0x44
   31840:	ldr	r3, [pc, #448]	; 31a08 <__assert_fail@plt+0x1f414>
   31844:	mov	r8, #1
   31848:	str	r3, [sp, #72]	; 0x48
   3184c:	b	30a30 <__assert_fail@plt+0x1e43c>
   31850:	ldr	r3, [sp, #40]	; 0x28
   31854:	mov	sl, r9
   31858:	str	r3, [sp, #56]	; 0x38
   3185c:	mov	r9, fp
   31860:	ldr	r2, [sp, #64]	; 0x40
   31864:	b	31798 <__assert_fail@plt+0x1f1a4>
   31868:	str	r2, [sp, #36]	; 0x24
   3186c:	b	30c80 <__assert_fail@plt+0x1e68c>
   31870:	mov	r1, #0
   31874:	str	r3, [sp, #32]
   31878:	mov	r4, #63	; 0x3f
   3187c:	b	30c1c <__assert_fail@plt+0x1e628>
   31880:	ldr	r3, [pc, #384]	; 31a08 <__assert_fail@plt+0x1f414>
   31884:	str	r3, [sp, #72]	; 0x48
   31888:	mov	r3, #0
   3188c:	str	r3, [sp, #40]	; 0x28
   31890:	mov	r3, #1
   31894:	str	r3, [sp, #68]	; 0x44
   31898:	mov	r8, r3
   3189c:	b	30a30 <__assert_fail@plt+0x1e43c>
   318a0:	bl	125a0 <abort@plt>
   318a4:	cmp	fp, #0
   318a8:	beq	31908 <__assert_fail@plt+0x1f314>
   318ac:	mov	r2, #1
   318b0:	mov	r3, #34	; 0x22
   318b4:	strb	r3, [r9]
   318b8:	mov	r8, r2
   318bc:	mov	r3, r2
   318c0:	str	r2, [sp, #68]	; 0x44
   318c4:	str	r3, [sp, #56]	; 0x38
   318c8:	ldr	r3, [pc, #316]	; 31a0c <__assert_fail@plt+0x1f418>
   318cc:	ldr	r1, [sp, #56]	; 0x38
   318d0:	str	r3, [sp, #72]	; 0x48
   318d4:	ldr	r2, [sp, #176]	; 0xb0
   318d8:	ldr	ip, [sp, #40]	; 0x28
   318dc:	ldr	lr, [sp, #176]	; 0xb0
   318e0:	b	30714 <__assert_fail@plt+0x1e120>
   318e4:	ldr	r0, [sp, #44]	; 0x2c
   318e8:	bl	12300 <strlen@plt>
   318ec:	str	r0, [sp, #24]
   318f0:	b	315f4 <__assert_fail@plt+0x1f000>
   318f4:	mov	r7, #0
   318f8:	ldr	r1, [sp, #52]	; 0x34
   318fc:	str	r3, [sp, #32]
   31900:	mov	r4, #48	; 0x30
   31904:	b	30c1c <__assert_fail@plt+0x1e628>
   31908:	mov	r3, #1
   3190c:	str	r3, [sp, #68]	; 0x44
   31910:	mov	r8, r3
   31914:	b	318c4 <__assert_fail@plt+0x1f2d0>
   31918:	mov	r3, #2
   3191c:	mov	sl, r9
   31920:	str	r3, [sp, #176]	; 0xb0
   31924:	mov	r9, fp
   31928:	ldr	r3, [sp, #56]	; 0x38
   3192c:	b	31798 <__assert_fail@plt+0x1f1a4>
   31930:	ldr	r6, [sp, #48]	; 0x30
   31934:	b	313e4 <__assert_fail@plt+0x1edf0>
   31938:	ldr	r0, [sp, #24]
   3193c:	mov	ip, r6
   31940:	cmp	r0, ip
   31944:	mov	r1, r7
   31948:	mov	r2, r4
   3194c:	ldr	r7, [sp, #104]	; 0x68
   31950:	ldr	r4, [sp, #32]
   31954:	ldr	r6, [sp, #108]	; 0x6c
   31958:	ldr	r8, [sp, #112]	; 0x70
   3195c:	ldr	r5, [sp, #116]	; 0x74
   31960:	bls	31990 <__assert_fail@plt+0x1f39c>
   31964:	ldrb	r3, [r2]
   31968:	cmp	r3, #0
   3196c:	bne	31980 <__assert_fail@plt+0x1f38c>
   31970:	b	31aa0 <__assert_fail@plt+0x1f4ac>
   31974:	ldrb	r3, [r2, #1]!
   31978:	cmp	r3, #0
   3197c:	beq	31aa0 <__assert_fail@plt+0x1f4ac>
   31980:	add	r1, r1, #1
   31984:	add	r3, sl, r1
   31988:	cmp	r0, r3
   3198c:	bhi	31974 <__assert_fail@plt+0x1f380>
   31990:	mov	r2, #0
   31994:	mov	r3, r7
   31998:	str	r2, [sp, #32]
   3199c:	b	31768 <__assert_fail@plt+0x1f174>
   319a0:	mov	r1, r7
   319a4:	ldr	r7, [sp, #104]	; 0x68
   319a8:	mov	r2, #0
   319ac:	ldr	r4, [sp, #32]
   319b0:	ldr	r6, [sp, #108]	; 0x6c
   319b4:	ldr	r8, [sp, #112]	; 0x70
   319b8:	ldr	r5, [sp, #116]	; 0x74
   319bc:	mov	r3, r7
   319c0:	str	r2, [sp, #32]
   319c4:	b	31768 <__assert_fail@plt+0x1f174>
   319c8:	mov	r3, r5
   319cc:	eor	r3, r3, #1
   319d0:	ldr	r4, [sp, #32]
   319d4:	mov	r1, r7
   319d8:	str	r5, [sp, #32]
   319dc:	ldr	r7, [sp, #104]	; 0x68
   319e0:	ldr	r6, [sp, #108]	; 0x6c
   319e4:	ldr	r8, [sp, #112]	; 0x70
   319e8:	ldr	r5, [sp, #116]	; 0x74
   319ec:	uxtb	r3, r3
   319f0:	b	31768 <__assert_fail@plt+0x1f174>
   319f4:	mov	sl, r9
   319f8:	str	r3, [sp, #56]	; 0x38
   319fc:	mov	r9, fp
   31a00:	ldr	r2, [sp, #64]	; 0x40
   31a04:	b	31798 <__assert_fail@plt+0x1f1a4>
   31a08:	andeq	lr, r4, r4, ror #21
   31a0c:	andeq	r3, r5, r0, lsl #10
   31a10:	andeq	r3, r5, r4, lsl #10
   31a14:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   31a18:	ldr	r2, [sp, #44]	; 0x2c
   31a1c:	ldrb	r1, [r2, r3]
   31a20:	sub	r2, r1, #33	; 0x21
   31a24:	uxtb	r2, r2
   31a28:	cmp	r2, #29
   31a2c:	bhi	31aac <__assert_fail@plt+0x1f4b8>
   31a30:	ldr	r0, [pc, #-36]	; 31a14 <__assert_fail@plt+0x1f420>
   31a34:	mov	ip, #1
   31a38:	ands	r2, r0, ip, lsl r2
   31a3c:	beq	31acc <__assert_fail@plt+0x1f4d8>
   31a40:	ldr	r2, [sp, #40]	; 0x28
   31a44:	cmp	r2, #0
   31a48:	bne	31bc0 <__assert_fail@plt+0x1f5cc>
   31a4c:	add	r2, r8, #1
   31a50:	cmp	fp, r8
   31a54:	strbhi	r4, [r9, r8]
   31a58:	cmp	fp, r2
   31a5c:	movhi	r0, #34	; 0x22
   31a60:	strbhi	r0, [r9, r2]
   31a64:	add	r2, r8, #2
   31a68:	cmp	fp, r2
   31a6c:	movhi	r0, #34	; 0x22
   31a70:	strbhi	r0, [r9, r2]
   31a74:	add	r2, r8, #3
   31a78:	cmp	fp, r2
   31a7c:	mov	sl, r3
   31a80:	ldr	r3, [sp, #40]	; 0x28
   31a84:	movhi	r0, #63	; 0x3f
   31a88:	mov	r4, r1
   31a8c:	strbhi	r0, [r9, r2]
   31a90:	add	r8, r8, #4
   31a94:	mov	r1, r3
   31a98:	str	r3, [sp, #32]
   31a9c:	b	30c1c <__assert_fail@plt+0x1e628>
   31aa0:	str	r3, [sp, #32]
   31aa4:	mov	r3, r7
   31aa8:	b	31768 <__assert_fail@plt+0x1f174>
   31aac:	mov	r1, #0
   31ab0:	str	r1, [sp, #32]
   31ab4:	b	30c1c <__assert_fail@plt+0x1e628>
   31ab8:	mov	sl, r9
   31abc:	ldr	r3, [sp, #56]	; 0x38
   31ac0:	mov	r9, fp
   31ac4:	ldr	r2, [sp, #64]	; 0x40
   31ac8:	b	31798 <__assert_fail@plt+0x1f1a4>
   31acc:	str	r2, [sp, #32]
   31ad0:	mov	r1, #0
   31ad4:	b	30c1c <__assert_fail@plt+0x1e628>
   31ad8:	ldr	r2, [sp, #76]	; 0x4c
   31adc:	mov	sl, r9
   31ae0:	mov	r9, fp
   31ae4:	mov	fp, r8
   31ae8:	ldr	r1, [sp, #72]	; 0x48
   31aec:	cmp	r1, #0
   31af0:	moveq	r3, #0
   31af4:	andne	r3, r2, #1
   31af8:	cmp	r3, #0
   31afc:	beq	31b28 <__assert_fail@plt+0x1f534>
   31b00:	ldrb	r3, [r1]
   31b04:	cmp	r3, #0
   31b08:	beq	31b28 <__assert_fail@plt+0x1f534>
   31b0c:	mov	r2, r1
   31b10:	cmp	r9, fp
   31b14:	strbhi	r3, [sl, fp]
   31b18:	ldrb	r3, [r2, #1]!
   31b1c:	add	fp, fp, #1
   31b20:	cmp	r3, #0
   31b24:	bne	31b10 <__assert_fail@plt+0x1f51c>
   31b28:	cmp	r9, fp
   31b2c:	movhi	r3, #0
   31b30:	strbhi	r3, [sl, fp]
   31b34:	b	317f0 <__assert_fail@plt+0x1f1fc>
   31b38:	ldr	r3, [sp, #192]	; 0xc0
   31b3c:	mov	ip, #5
   31b40:	str	r3, [sp, #16]
   31b44:	ldr	r3, [sp, #188]	; 0xbc
   31b48:	ldr	r2, [sp, #44]	; 0x2c
   31b4c:	str	r3, [sp, #12]
   31b50:	ldr	r3, [sp, #184]	; 0xb8
   31b54:	ldr	r1, [sp, #84]	; 0x54
   31b58:	str	r3, [sp, #8]
   31b5c:	ldr	r3, [sp, #180]	; 0xb4
   31b60:	mov	r0, r9
   31b64:	str	r3, [sp, #4]
   31b68:	str	ip, [sp]
   31b6c:	ldr	r3, [sp, #24]
   31b70:	bl	30648 <__assert_fail@plt+0x1e054>
   31b74:	mov	fp, r0
   31b78:	b	317f0 <__assert_fail@plt+0x1f1fc>
   31b7c:	mov	sl, r9
   31b80:	mov	r9, fp
   31b84:	mov	fp, r8
   31b88:	b	31ae8 <__assert_fail@plt+0x1f4f4>
   31b8c:	ldr	r1, [sp, #176]	; 0xb0
   31b90:	bl	30528 <__assert_fail@plt+0x1df34>
   31b94:	str	r0, [sp, #192]	; 0xc0
   31b98:	b	30b04 <__assert_fail@plt+0x1e510>
   31b9c:	ldr	r1, [sp, #176]	; 0xb0
   31ba0:	bl	30528 <__assert_fail@plt+0x1df34>
   31ba4:	str	r0, [sp, #188]	; 0xbc
   31ba8:	b	30ae4 <__assert_fail@plt+0x1e4f0>
   31bac:	mov	sl, r9
   31bb0:	mov	r2, r3
   31bb4:	mov	r9, fp
   31bb8:	mov	fp, r8
   31bbc:	b	31ae8 <__assert_fail@plt+0x1f4f4>
   31bc0:	mov	sl, r9
   31bc4:	mov	r9, fp
   31bc8:	b	317ac <__assert_fail@plt+0x1f1b8>
   31bcc:	push	{r4, r5, r6, lr}
   31bd0:	mov	r5, r0
   31bd4:	bl	12348 <__errno_location@plt>
   31bd8:	cmp	r5, #0
   31bdc:	mov	r1, #48	; 0x30
   31be0:	mov	r4, r0
   31be4:	ldr	r0, [pc, #16]	; 31bfc <__assert_fail@plt+0x1f608>
   31be8:	ldr	r6, [r4]
   31bec:	movne	r0, r5
   31bf0:	bl	35ba8 <__assert_fail@plt+0x235b4>
   31bf4:	str	r6, [r4]
   31bf8:	pop	{r4, r5, r6, pc}
   31bfc:	andeq	r4, r6, r8, lsl #26
   31c00:	ldr	r3, [pc, #12]	; 31c14 <__assert_fail@plt+0x1f620>
   31c04:	cmp	r0, #0
   31c08:	moveq	r0, r3
   31c0c:	ldr	r0, [r0]
   31c10:	bx	lr
   31c14:	andeq	r4, r6, r8, lsl #26
   31c18:	ldr	r3, [pc, #12]	; 31c2c <__assert_fail@plt+0x1f638>
   31c1c:	cmp	r0, #0
   31c20:	moveq	r0, r3
   31c24:	str	r1, [r0]
   31c28:	bx	lr
   31c2c:	andeq	r4, r6, r8, lsl #26
   31c30:	ldr	r3, [pc, #52]	; 31c6c <__assert_fail@plt+0x1f678>
   31c34:	cmp	r0, #0
   31c38:	moveq	r0, r3
   31c3c:	add	r3, r0, #8
   31c40:	push	{lr}		; (str lr, [sp, #-4]!)
   31c44:	lsr	lr, r1, #5
   31c48:	and	r1, r1, #31
   31c4c:	ldr	ip, [r3, lr, lsl #2]
   31c50:	lsr	r0, ip, r1
   31c54:	eor	r2, r2, r0
   31c58:	and	r2, r2, #1
   31c5c:	and	r0, r0, #1
   31c60:	eor	r1, ip, r2, lsl r1
   31c64:	str	r1, [r3, lr, lsl #2]
   31c68:	pop	{pc}		; (ldr pc, [sp], #4)
   31c6c:	andeq	r4, r6, r8, lsl #26
   31c70:	ldr	r3, [pc, #16]	; 31c88 <__assert_fail@plt+0x1f694>
   31c74:	cmp	r0, #0
   31c78:	movne	r3, r0
   31c7c:	ldr	r0, [r3, #4]
   31c80:	str	r1, [r3, #4]
   31c84:	bx	lr
   31c88:	andeq	r4, r6, r8, lsl #26
   31c8c:	ldr	r3, [pc, #44]	; 31cc0 <__assert_fail@plt+0x1f6cc>
   31c90:	cmp	r0, #0
   31c94:	moveq	r0, r3
   31c98:	mov	ip, #10
   31c9c:	cmp	r2, #0
   31ca0:	cmpne	r1, #0
   31ca4:	str	ip, [r0]
   31ca8:	beq	31cb8 <__assert_fail@plt+0x1f6c4>
   31cac:	str	r1, [r0, #40]	; 0x28
   31cb0:	str	r2, [r0, #44]	; 0x2c
   31cb4:	bx	lr
   31cb8:	push	{r4, lr}
   31cbc:	bl	125a0 <abort@plt>
   31cc0:	andeq	r4, r6, r8, lsl #26
   31cc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31cc8:	sub	sp, sp, #24
   31ccc:	ldr	ip, [pc, #108]	; 31d40 <__assert_fail@plt+0x1f74c>
   31cd0:	ldr	r4, [sp, #56]	; 0x38
   31cd4:	mov	r9, r2
   31cd8:	cmp	r4, #0
   31cdc:	moveq	r4, ip
   31ce0:	mov	sl, r3
   31ce4:	mov	r7, r0
   31ce8:	mov	r8, r1
   31cec:	bl	12348 <__errno_location@plt>
   31cf0:	ldr	r3, [r4, #44]	; 0x2c
   31cf4:	mov	r1, r8
   31cf8:	ldr	r6, [r0]
   31cfc:	str	r3, [sp, #16]
   31d00:	ldr	r2, [r4, #40]	; 0x28
   31d04:	add	r3, r4, #8
   31d08:	str	r3, [sp, #8]
   31d0c:	str	r2, [sp, #12]
   31d10:	ldr	r2, [r4, #4]
   31d14:	mov	r5, r0
   31d18:	str	r2, [sp, #4]
   31d1c:	ldr	ip, [r4]
   31d20:	mov	r3, sl
   31d24:	mov	r2, r9
   31d28:	mov	r0, r7
   31d2c:	str	ip, [sp]
   31d30:	bl	30648 <__assert_fail@plt+0x1e054>
   31d34:	str	r6, [r5]
   31d38:	add	sp, sp, #24
   31d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31d40:	andeq	r4, r6, r8, lsl #26
   31d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d48:	cmp	r2, #0
   31d4c:	sub	sp, sp, #36	; 0x24
   31d50:	ldr	r4, [pc, #164]	; 31dfc <__assert_fail@plt+0x1f808>
   31d54:	mov	r8, r1
   31d58:	movne	r4, r2
   31d5c:	mov	r7, r0
   31d60:	bl	12348 <__errno_location@plt>
   31d64:	ldr	r3, [r4, #44]	; 0x2c
   31d68:	ldr	r5, [r4, #4]
   31d6c:	add	r9, r4, #8
   31d70:	orr	r5, r5, #1
   31d74:	mov	r1, #0
   31d78:	mov	r2, r7
   31d7c:	ldr	fp, [r0]
   31d80:	str	r3, [sp, #16]
   31d84:	ldr	r3, [r4, #40]	; 0x28
   31d88:	stmib	sp, {r5, r9}
   31d8c:	str	r3, [sp, #12]
   31d90:	ldr	r3, [r4]
   31d94:	mov	r6, r0
   31d98:	str	r3, [sp]
   31d9c:	mov	r0, r1
   31da0:	mov	r3, r8
   31da4:	bl	30648 <__assert_fail@plt+0x1e054>
   31da8:	add	r1, r0, #1
   31dac:	mov	r0, r1
   31db0:	str	r1, [sp, #28]
   31db4:	bl	35664 <__assert_fail@plt+0x23070>
   31db8:	ldr	r3, [r4, #44]	; 0x2c
   31dbc:	ldr	r1, [sp, #28]
   31dc0:	str	r3, [sp, #16]
   31dc4:	ldr	r3, [r4, #40]	; 0x28
   31dc8:	str	r5, [sp, #4]
   31dcc:	str	r3, [sp, #12]
   31dd0:	str	r9, [sp, #8]
   31dd4:	ldr	ip, [r4]
   31dd8:	mov	r3, r8
   31ddc:	mov	r2, r7
   31de0:	str	ip, [sp]
   31de4:	mov	sl, r0
   31de8:	bl	30648 <__assert_fail@plt+0x1e054>
   31dec:	mov	r0, sl
   31df0:	str	fp, [r6]
   31df4:	add	sp, sp, #36	; 0x24
   31df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31dfc:	andeq	r4, r6, r8, lsl #26
   31e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31e04:	cmp	r3, #0
   31e08:	sub	sp, sp, #44	; 0x2c
   31e0c:	ldr	r4, [pc, #192]	; 31ed4 <__assert_fail@plt+0x1f8e0>
   31e10:	mov	r6, r2
   31e14:	movne	r4, r3
   31e18:	mov	r9, r1
   31e1c:	mov	r8, r0
   31e20:	bl	12348 <__errno_location@plt>
   31e24:	ldr	r3, [r4, #44]	; 0x2c
   31e28:	ldr	r5, [r4, #4]
   31e2c:	add	sl, r4, #8
   31e30:	cmp	r6, #0
   31e34:	orreq	r5, r5, #1
   31e38:	mov	r1, #0
   31e3c:	ldr	r2, [r0]
   31e40:	str	r3, [sp, #16]
   31e44:	ldr	r3, [r4, #40]	; 0x28
   31e48:	stmib	sp, {r5, sl}
   31e4c:	str	r3, [sp, #12]
   31e50:	ldr	r3, [r4]
   31e54:	mov	r7, r0
   31e58:	str	r2, [sp, #28]
   31e5c:	str	r3, [sp]
   31e60:	mov	r2, r8
   31e64:	mov	r3, r9
   31e68:	mov	r0, r1
   31e6c:	bl	30648 <__assert_fail@plt+0x1e054>
   31e70:	add	r1, r0, #1
   31e74:	mov	fp, r0
   31e78:	mov	r0, r1
   31e7c:	str	r1, [sp, #36]	; 0x24
   31e80:	bl	35664 <__assert_fail@plt+0x23070>
   31e84:	ldr	r3, [r4, #44]	; 0x2c
   31e88:	mov	r2, r8
   31e8c:	str	r3, [sp, #16]
   31e90:	ldr	r3, [r4, #40]	; 0x28
   31e94:	str	r5, [sp, #4]
   31e98:	str	r3, [sp, #12]
   31e9c:	str	sl, [sp, #8]
   31ea0:	ldr	ip, [r4]
   31ea4:	ldr	r1, [sp, #36]	; 0x24
   31ea8:	mov	r3, r9
   31eac:	str	ip, [sp]
   31eb0:	str	r0, [sp, #32]
   31eb4:	bl	30648 <__assert_fail@plt+0x1e054>
   31eb8:	ldr	r2, [sp, #28]
   31ebc:	cmp	r6, #0
   31ec0:	str	r2, [r7]
   31ec4:	ldr	r0, [sp, #32]
   31ec8:	strne	fp, [r6]
   31ecc:	add	sp, sp, #44	; 0x2c
   31ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ed4:	andeq	r4, r6, r8, lsl #26
   31ed8:	push	{r4, r5, r6, r7, r8, lr}
   31edc:	ldr	r6, [pc, #116]	; 31f58 <__assert_fail@plt+0x1f964>
   31ee0:	ldr	r3, [r6, #4]
   31ee4:	ldr	r7, [r6]
   31ee8:	cmp	r3, #1
   31eec:	movgt	r5, r7
   31ef0:	movgt	r4, #1
   31ef4:	ble	31f14 <__assert_fail@plt+0x1f920>
   31ef8:	ldr	r0, [r5, #12]
   31efc:	bl	376d0 <__assert_fail@plt+0x250dc>
   31f00:	ldr	r3, [r6, #4]
   31f04:	add	r4, r4, #1
   31f08:	cmp	r3, r4
   31f0c:	add	r5, r5, #8
   31f10:	bgt	31ef8 <__assert_fail@plt+0x1f904>
   31f14:	ldr	r0, [r7, #4]
   31f18:	ldr	r4, [pc, #60]	; 31f5c <__assert_fail@plt+0x1f968>
   31f1c:	cmp	r0, r4
   31f20:	beq	31f34 <__assert_fail@plt+0x1f940>
   31f24:	bl	376d0 <__assert_fail@plt+0x250dc>
   31f28:	mov	r3, #256	; 0x100
   31f2c:	str	r4, [r6, #12]
   31f30:	str	r3, [r6, #8]
   31f34:	ldr	r4, [pc, #36]	; 31f60 <__assert_fail@plt+0x1f96c>
   31f38:	cmp	r7, r4
   31f3c:	beq	31f4c <__assert_fail@plt+0x1f958>
   31f40:	mov	r0, r7
   31f44:	bl	376d0 <__assert_fail@plt+0x250dc>
   31f48:	str	r4, [r6]
   31f4c:	mov	r3, #1
   31f50:	str	r3, [r6, #4]
   31f54:	pop	{r4, r5, r6, r7, r8, pc}
   31f58:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   31f5c:	andeq	r4, r6, r8, lsr sp
   31f60:	strdeq	r4, [r6], -ip
   31f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31f68:	sub	sp, sp, #44	; 0x2c
   31f6c:	mov	r5, r0
   31f70:	mov	sl, r1
   31f74:	bl	12348 <__errno_location@plt>
   31f78:	ldr	r4, [pc, #400]	; 32110 <__assert_fail@plt+0x1fb1c>
   31f7c:	cmn	r5, #-2147483647	; 0x80000001
   31f80:	ldr	r6, [r4]
   31f84:	mov	r8, r0
   31f88:	movne	r0, #0
   31f8c:	moveq	r0, #1
   31f90:	ldr	r3, [r8]
   31f94:	orrs	r0, r0, r5, lsr #31
   31f98:	str	r3, [sp, #24]
   31f9c:	bne	3210c <__assert_fail@plt+0x1fb18>
   31fa0:	ldr	r2, [r4, #4]
   31fa4:	cmp	r5, r2
   31fa8:	blt	32008 <__assert_fail@plt+0x1fa14>
   31fac:	add	r7, r4, #8
   31fb0:	cmp	r6, r7
   31fb4:	str	r2, [sp, #36]	; 0x24
   31fb8:	beq	320dc <__assert_fail@plt+0x1fae8>
   31fbc:	mov	r3, #8
   31fc0:	sub	r2, r5, r2
   31fc4:	mov	r0, r6
   31fc8:	str	r3, [sp]
   31fcc:	add	r2, r2, #1
   31fd0:	mvn	r3, #-2147483648	; 0x80000000
   31fd4:	add	r1, sp, #36	; 0x24
   31fd8:	bl	35880 <__assert_fail@plt+0x2328c>
   31fdc:	mov	r6, r0
   31fe0:	str	r0, [r4]
   31fe4:	ldr	r0, [r4, #4]
   31fe8:	ldr	r2, [sp, #36]	; 0x24
   31fec:	mov	r1, #0
   31ff0:	sub	r2, r2, r0
   31ff4:	add	r0, r6, r0, lsl #3
   31ff8:	lsl	r2, r2, #3
   31ffc:	bl	12378 <memset@plt>
   32000:	ldr	r3, [sp, #36]	; 0x24
   32004:	str	r3, [r4, #4]
   32008:	ldr	r4, [pc, #260]	; 32114 <__assert_fail@plt+0x1fb20>
   3200c:	add	fp, r6, r5, lsl #3
   32010:	ldr	r9, [r6, r5, lsl #3]
   32014:	ldr	r0, [r4, #4]
   32018:	ldr	r3, [r4]
   3201c:	ldr	r7, [fp, #4]
   32020:	ldr	r1, [r4, #44]	; 0x2c
   32024:	ldr	r2, [r4, #40]	; 0x28
   32028:	orr	r0, r0, #1
   3202c:	str	r3, [sp]
   32030:	add	r3, r4, #8
   32034:	str	r0, [sp, #28]
   32038:	str	r0, [sp, #4]
   3203c:	str	r1, [sp, #16]
   32040:	str	r2, [sp, #12]
   32044:	str	r3, [sp, #8]
   32048:	mov	r0, r7
   3204c:	mov	r1, r9
   32050:	mvn	r3, #0
   32054:	mov	r2, sl
   32058:	bl	30648 <__assert_fail@plt+0x1e054>
   3205c:	cmp	r9, r0
   32060:	bhi	320c8 <__assert_fail@plt+0x1fad4>
   32064:	add	r3, r4, #48	; 0x30
   32068:	add	r9, r0, #1
   3206c:	cmp	r7, r3
   32070:	str	r9, [r6, r5, lsl #3]
   32074:	beq	32080 <__assert_fail@plt+0x1fa8c>
   32078:	mov	r0, r7
   3207c:	bl	376d0 <__assert_fail@plt+0x250dc>
   32080:	mov	r0, r9
   32084:	bl	35664 <__assert_fail@plt+0x23070>
   32088:	ldr	ip, [r4, #44]	; 0x2c
   3208c:	ldr	r3, [r4]
   32090:	ldr	lr, [r4, #40]	; 0x28
   32094:	ldr	r4, [pc, #124]	; 32118 <__assert_fail@plt+0x1fb24>
   32098:	mov	r2, sl
   3209c:	mov	r1, r9
   320a0:	str	r0, [fp, #4]
   320a4:	str	r4, [sp, #8]
   320a8:	ldr	r4, [sp, #28]
   320ac:	str	r3, [sp]
   320b0:	str	r4, [sp, #4]
   320b4:	str	ip, [sp, #16]
   320b8:	str	lr, [sp, #12]
   320bc:	mvn	r3, #0
   320c0:	mov	r7, r0
   320c4:	bl	30648 <__assert_fail@plt+0x1e054>
   320c8:	ldr	r3, [sp, #24]
   320cc:	mov	r0, r7
   320d0:	str	r3, [r8]
   320d4:	add	sp, sp, #44	; 0x2c
   320d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   320dc:	mov	r3, #8
   320e0:	sub	r2, r5, r2
   320e4:	str	r3, [sp]
   320e8:	add	r1, sp, #36	; 0x24
   320ec:	add	r2, r2, #1
   320f0:	mvn	r3, #-2147483648	; 0x80000000
   320f4:	bl	35880 <__assert_fail@plt+0x2328c>
   320f8:	mov	r6, r0
   320fc:	ldm	r7, {r0, r1}
   32100:	str	r6, [r4]
   32104:	stm	r6, {r0, r1}
   32108:	b	31fe4 <__assert_fail@plt+0x1f9f0>
   3210c:	bl	125a0 <abort@plt>
   32110:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   32114:	andeq	r4, r6, r8, lsl #26
   32118:	andeq	r4, r6, r0, lsl sp
   3211c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32120:	sub	sp, sp, #52	; 0x34
   32124:	mov	r5, r0
   32128:	mov	sl, r1
   3212c:	mov	fp, r2
   32130:	bl	12348 <__errno_location@plt>
   32134:	ldr	r4, [pc, #408]	; 322d4 <__assert_fail@plt+0x1fce0>
   32138:	cmn	r5, #-2147483647	; 0x80000001
   3213c:	ldr	r6, [r4]
   32140:	mov	r8, r0
   32144:	movne	r0, #0
   32148:	moveq	r0, #1
   3214c:	ldr	r3, [r8]
   32150:	orrs	r0, r0, r5, lsr #31
   32154:	str	r3, [sp, #28]
   32158:	bne	322d0 <__assert_fail@plt+0x1fcdc>
   3215c:	ldr	r2, [r4, #4]
   32160:	cmp	r5, r2
   32164:	blt	321c4 <__assert_fail@plt+0x1fbd0>
   32168:	add	r7, r4, #8
   3216c:	cmp	r6, r7
   32170:	str	r2, [sp, #44]	; 0x2c
   32174:	beq	322a0 <__assert_fail@plt+0x1fcac>
   32178:	mov	r3, #8
   3217c:	sub	r2, r5, r2
   32180:	mov	r0, r6
   32184:	str	r3, [sp]
   32188:	add	r2, r2, #1
   3218c:	mvn	r3, #-2147483648	; 0x80000000
   32190:	add	r1, sp, #44	; 0x2c
   32194:	bl	35880 <__assert_fail@plt+0x2328c>
   32198:	mov	r6, r0
   3219c:	str	r0, [r4]
   321a0:	ldr	r0, [r4, #4]
   321a4:	ldr	r2, [sp, #44]	; 0x2c
   321a8:	mov	r1, #0
   321ac:	sub	r2, r2, r0
   321b0:	add	r0, r6, r0, lsl #3
   321b4:	lsl	r2, r2, #3
   321b8:	bl	12378 <memset@plt>
   321bc:	ldr	r3, [sp, #44]	; 0x2c
   321c0:	str	r3, [r4, #4]
   321c4:	ldr	r4, [pc, #268]	; 322d8 <__assert_fail@plt+0x1fce4>
   321c8:	add	r3, r6, r5, lsl #3
   321cc:	str	r3, [sp, #32]
   321d0:	ldr	r7, [r3, #4]
   321d4:	ldr	r0, [r4, #4]
   321d8:	ldr	r3, [r4]
   321dc:	ldr	r9, [r6, r5, lsl #3]
   321e0:	ldr	r1, [r4, #44]	; 0x2c
   321e4:	ldr	r2, [r4, #40]	; 0x28
   321e8:	orr	r0, r0, #1
   321ec:	str	r3, [sp]
   321f0:	add	r3, r4, #8
   321f4:	str	r0, [sp, #36]	; 0x24
   321f8:	str	r0, [sp, #4]
   321fc:	str	r1, [sp, #16]
   32200:	str	r2, [sp, #12]
   32204:	str	r3, [sp, #8]
   32208:	mov	r0, r7
   3220c:	mov	r1, r9
   32210:	mov	r3, fp
   32214:	mov	r2, sl
   32218:	bl	30648 <__assert_fail@plt+0x1e054>
   3221c:	cmp	r9, r0
   32220:	bhi	3228c <__assert_fail@plt+0x1fc98>
   32224:	add	r3, r4, #48	; 0x30
   32228:	add	r9, r0, #1
   3222c:	cmp	r7, r3
   32230:	str	r9, [r6, r5, lsl #3]
   32234:	beq	32240 <__assert_fail@plt+0x1fc4c>
   32238:	mov	r0, r7
   3223c:	bl	376d0 <__assert_fail@plt+0x250dc>
   32240:	mov	r0, r9
   32244:	bl	35664 <__assert_fail@plt+0x23070>
   32248:	ldr	ip, [sp, #32]
   3224c:	ldr	lr, [r4, #44]	; 0x2c
   32250:	ldr	r5, [r4, #40]	; 0x28
   32254:	mov	r3, fp
   32258:	mov	r2, sl
   3225c:	mov	r1, r9
   32260:	str	r0, [ip, #4]
   32264:	ldr	ip, [r4]
   32268:	ldr	r4, [pc, #108]	; 322dc <__assert_fail@plt+0x1fce8>
   3226c:	str	lr, [sp, #16]
   32270:	str	r4, [sp, #8]
   32274:	ldr	r4, [sp, #36]	; 0x24
   32278:	str	r5, [sp, #12]
   3227c:	str	r4, [sp, #4]
   32280:	str	ip, [sp]
   32284:	mov	r7, r0
   32288:	bl	30648 <__assert_fail@plt+0x1e054>
   3228c:	ldr	r3, [sp, #28]
   32290:	mov	r0, r7
   32294:	str	r3, [r8]
   32298:	add	sp, sp, #52	; 0x34
   3229c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   322a0:	mov	r3, #8
   322a4:	sub	r2, r5, r2
   322a8:	str	r3, [sp]
   322ac:	add	r1, sp, #44	; 0x2c
   322b0:	add	r2, r2, #1
   322b4:	mvn	r3, #-2147483648	; 0x80000000
   322b8:	bl	35880 <__assert_fail@plt+0x2328c>
   322bc:	mov	r6, r0
   322c0:	ldm	r7, {r0, r1}
   322c4:	str	r6, [r4]
   322c8:	stm	r6, {r0, r1}
   322cc:	b	321a0 <__assert_fail@plt+0x1fbac>
   322d0:	bl	125a0 <abort@plt>
   322d4:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   322d8:	andeq	r4, r6, r8, lsl #26
   322dc:	andeq	r4, r6, r0, lsl sp
   322e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   322e4:	sub	sp, sp, #44	; 0x2c
   322e8:	mov	sl, r0
   322ec:	bl	12348 <__errno_location@plt>
   322f0:	ldr	r4, [pc, #352]	; 32458 <__assert_fail@plt+0x1fe64>
   322f4:	ldr	r2, [r4, #4]
   322f8:	ldr	r5, [r4]
   322fc:	cmp	r2, #0
   32300:	ldr	r3, [r0]
   32304:	mov	r8, r0
   32308:	str	r3, [sp, #28]
   3230c:	bgt	32368 <__assert_fail@plt+0x1fd74>
   32310:	add	r6, r4, #8
   32314:	cmp	r5, r6
   32318:	str	r2, [sp, #36]	; 0x24
   3231c:	beq	32428 <__assert_fail@plt+0x1fe34>
   32320:	mov	r3, #8
   32324:	mov	r0, r5
   32328:	str	r3, [sp]
   3232c:	rsb	r2, r2, #1
   32330:	mvn	r3, #-2147483648	; 0x80000000
   32334:	add	r1, sp, #36	; 0x24
   32338:	bl	35880 <__assert_fail@plt+0x2328c>
   3233c:	mov	r5, r0
   32340:	str	r0, [r4]
   32344:	ldr	r0, [r4, #4]
   32348:	ldr	r2, [sp, #36]	; 0x24
   3234c:	mov	r1, #0
   32350:	sub	r2, r2, r0
   32354:	add	r0, r5, r0, lsl #3
   32358:	lsl	r2, r2, #3
   3235c:	bl	12378 <memset@plt>
   32360:	ldr	r3, [sp, #36]	; 0x24
   32364:	str	r3, [r4, #4]
   32368:	ldr	r4, [pc, #236]	; 3245c <__assert_fail@plt+0x1fe68>
   3236c:	ldr	r9, [r5]
   32370:	ldr	r6, [r5, #4]
   32374:	ldr	r7, [r4, #4]
   32378:	ldr	r1, [r4, #44]	; 0x2c
   3237c:	ldr	r2, [r4, #40]	; 0x28
   32380:	ldr	r3, [r4]
   32384:	orr	r7, r7, #1
   32388:	add	fp, r4, #8
   3238c:	str	r1, [sp, #16]
   32390:	str	r2, [sp, #12]
   32394:	str	r3, [sp]
   32398:	str	r7, [sp, #4]
   3239c:	str	fp, [sp, #8]
   323a0:	mov	r1, r9
   323a4:	mov	r0, r6
   323a8:	mvn	r3, #0
   323ac:	mov	r2, sl
   323b0:	bl	30648 <__assert_fail@plt+0x1e054>
   323b4:	cmp	r9, r0
   323b8:	bhi	32414 <__assert_fail@plt+0x1fe20>
   323bc:	add	r3, r4, #48	; 0x30
   323c0:	add	r9, r0, #1
   323c4:	cmp	r6, r3
   323c8:	str	r9, [r5]
   323cc:	beq	323d8 <__assert_fail@plt+0x1fde4>
   323d0:	mov	r0, r6
   323d4:	bl	376d0 <__assert_fail@plt+0x250dc>
   323d8:	mov	r0, r9
   323dc:	bl	35664 <__assert_fail@plt+0x23070>
   323e0:	ldr	ip, [r4, #44]	; 0x2c
   323e4:	ldr	r3, [r4]
   323e8:	ldr	lr, [r4, #40]	; 0x28
   323ec:	mov	r2, sl
   323f0:	mov	r1, r9
   323f4:	str	r0, [r5, #4]
   323f8:	str	r3, [sp]
   323fc:	stmib	sp, {r7, fp}
   32400:	str	ip, [sp, #16]
   32404:	str	lr, [sp, #12]
   32408:	mvn	r3, #0
   3240c:	mov	r6, r0
   32410:	bl	30648 <__assert_fail@plt+0x1e054>
   32414:	ldr	r3, [sp, #28]
   32418:	mov	r0, r6
   3241c:	str	r3, [r8]
   32420:	add	sp, sp, #44	; 0x2c
   32424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32428:	mov	r3, #8
   3242c:	str	r3, [sp]
   32430:	add	r1, sp, #36	; 0x24
   32434:	rsb	r2, r2, #1
   32438:	mvn	r3, #-2147483648	; 0x80000000
   3243c:	mov	r0, #0
   32440:	bl	35880 <__assert_fail@plt+0x2328c>
   32444:	mov	r5, r0
   32448:	ldm	r6, {r0, r1}
   3244c:	str	r5, [r4]
   32450:	stm	r5, {r0, r1}
   32454:	b	32344 <__assert_fail@plt+0x1fd50>
   32458:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   3245c:	andeq	r4, r6, r8, lsl #26
   32460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32464:	sub	sp, sp, #44	; 0x2c
   32468:	mov	r9, r0
   3246c:	mov	sl, r1
   32470:	bl	12348 <__errno_location@plt>
   32474:	ldr	r4, [pc, #364]	; 325e8 <__assert_fail@plt+0x1fff4>
   32478:	ldr	r2, [r4, #4]
   3247c:	ldr	r5, [r4]
   32480:	cmp	r2, #0
   32484:	ldr	r3, [r0]
   32488:	mov	r7, r0
   3248c:	str	r3, [sp, #24]
   32490:	bgt	324ec <__assert_fail@plt+0x1fef8>
   32494:	add	r6, r4, #8
   32498:	cmp	r5, r6
   3249c:	str	r2, [sp, #36]	; 0x24
   324a0:	beq	325b8 <__assert_fail@plt+0x1ffc4>
   324a4:	mov	r3, #8
   324a8:	mov	r0, r5
   324ac:	str	r3, [sp]
   324b0:	rsb	r2, r2, #1
   324b4:	mvn	r3, #-2147483648	; 0x80000000
   324b8:	add	r1, sp, #36	; 0x24
   324bc:	bl	35880 <__assert_fail@plt+0x2328c>
   324c0:	mov	r5, r0
   324c4:	str	r0, [r4]
   324c8:	ldr	r0, [r4, #4]
   324cc:	ldr	r2, [sp, #36]	; 0x24
   324d0:	mov	r1, #0
   324d4:	sub	r2, r2, r0
   324d8:	add	r0, r5, r0, lsl #3
   324dc:	lsl	r2, r2, #3
   324e0:	bl	12378 <memset@plt>
   324e4:	ldr	r3, [sp, #36]	; 0x24
   324e8:	str	r3, [r4, #4]
   324ec:	ldr	r4, [pc, #248]	; 325ec <__assert_fail@plt+0x1fff8>
   324f0:	ldr	r8, [r5]
   324f4:	ldr	r6, [r5, #4]
   324f8:	ldr	r0, [r4, #4]
   324fc:	ldr	r1, [r4, #44]	; 0x2c
   32500:	ldr	r2, [r4, #40]	; 0x28
   32504:	ldr	r3, [r4]
   32508:	orr	r0, r0, #1
   3250c:	add	fp, r4, #8
   32510:	str	r0, [sp, #28]
   32514:	str	r0, [sp, #4]
   32518:	str	r1, [sp, #16]
   3251c:	str	r2, [sp, #12]
   32520:	str	r3, [sp]
   32524:	str	fp, [sp, #8]
   32528:	mov	r1, r8
   3252c:	mov	r0, r6
   32530:	mov	r3, sl
   32534:	mov	r2, r9
   32538:	bl	30648 <__assert_fail@plt+0x1e054>
   3253c:	cmp	r8, r0
   32540:	bhi	325a4 <__assert_fail@plt+0x1ffb0>
   32544:	add	r3, r4, #48	; 0x30
   32548:	add	r8, r0, #1
   3254c:	cmp	r6, r3
   32550:	str	r8, [r5]
   32554:	beq	32560 <__assert_fail@plt+0x1ff6c>
   32558:	mov	r0, r6
   3255c:	bl	376d0 <__assert_fail@plt+0x250dc>
   32560:	mov	r0, r8
   32564:	bl	35664 <__assert_fail@plt+0x23070>
   32568:	ldr	lr, [r4, #44]	; 0x2c
   3256c:	ldr	ip, [r4]
   32570:	mov	r3, sl
   32574:	mov	r2, r9
   32578:	mov	r1, r8
   3257c:	str	r0, [r5, #4]
   32580:	ldr	r5, [r4, #40]	; 0x28
   32584:	ldr	r4, [sp, #28]
   32588:	str	fp, [sp, #8]
   3258c:	str	r4, [sp, #4]
   32590:	str	lr, [sp, #16]
   32594:	str	r5, [sp, #12]
   32598:	str	ip, [sp]
   3259c:	mov	r6, r0
   325a0:	bl	30648 <__assert_fail@plt+0x1e054>
   325a4:	ldr	r3, [sp, #24]
   325a8:	mov	r0, r6
   325ac:	str	r3, [r7]
   325b0:	add	sp, sp, #44	; 0x2c
   325b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   325b8:	mov	r3, #8
   325bc:	str	r3, [sp]
   325c0:	add	r1, sp, #36	; 0x24
   325c4:	rsb	r2, r2, #1
   325c8:	mvn	r3, #-2147483648	; 0x80000000
   325cc:	mov	r0, #0
   325d0:	bl	35880 <__assert_fail@plt+0x2328c>
   325d4:	mov	r5, r0
   325d8:	ldm	r6, {r0, r1}
   325dc:	str	r5, [r4]
   325e0:	stm	r5, {r0, r1}
   325e4:	b	324c8 <__assert_fail@plt+0x1fed4>
   325e8:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   325ec:	andeq	r4, r6, r8, lsl #26
   325f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   325f4:	sub	sp, sp, #132	; 0x84
   325f8:	mov	r5, r1
   325fc:	mov	r4, r0
   32600:	mov	r9, r2
   32604:	add	r0, sp, #80	; 0x50
   32608:	mov	r2, #48	; 0x30
   3260c:	mov	r1, #0
   32610:	bl	12378 <memset@plt>
   32614:	cmp	r5, #10
   32618:	beq	327d0 <__assert_fail@plt+0x201dc>
   3261c:	add	lr, sp, #80	; 0x50
   32620:	str	r5, [sp, #80]	; 0x50
   32624:	ldm	lr!, {r0, r1, r2, r3}
   32628:	add	ip, sp, #32
   3262c:	ldr	r6, [pc, #416]	; 327d4 <__assert_fail@plt+0x201e0>
   32630:	stmia	ip!, {r0, r1, r2, r3}
   32634:	ldm	lr!, {r0, r1, r2, r3}
   32638:	stmia	ip!, {r0, r1, r2, r3}
   3263c:	ldm	lr, {r0, r1, r2, r3}
   32640:	stm	ip, {r0, r1, r2, r3}
   32644:	bl	12348 <__errno_location@plt>
   32648:	cmn	r4, #-2147483647	; 0x80000001
   3264c:	ldr	r5, [r6]
   32650:	mov	r7, r0
   32654:	movne	r0, #0
   32658:	moveq	r0, #1
   3265c:	ldr	r3, [r7]
   32660:	orrs	r0, r0, r4, lsr #31
   32664:	str	r3, [sp, #24]
   32668:	bne	327d0 <__assert_fail@plt+0x201dc>
   3266c:	ldr	r2, [r6, #4]
   32670:	cmp	r4, r2
   32674:	blt	326d4 <__assert_fail@plt+0x200e0>
   32678:	add	r8, r6, #8
   3267c:	cmp	r5, r8
   32680:	str	r2, [sp, #80]	; 0x50
   32684:	beq	327a0 <__assert_fail@plt+0x201ac>
   32688:	mov	r3, #8
   3268c:	sub	r2, r4, r2
   32690:	mov	r0, r5
   32694:	str	r3, [sp]
   32698:	add	r2, r2, #1
   3269c:	add	r1, sp, #80	; 0x50
   326a0:	mvn	r3, #-2147483648	; 0x80000000
   326a4:	bl	35880 <__assert_fail@plt+0x2328c>
   326a8:	mov	r5, r0
   326ac:	str	r0, [r6]
   326b0:	ldr	r0, [r6, #4]
   326b4:	ldr	r2, [sp, #80]	; 0x50
   326b8:	mov	r1, #0
   326bc:	sub	r2, r2, r0
   326c0:	add	r0, r5, r0, lsl #3
   326c4:	lsl	r2, r2, #3
   326c8:	bl	12378 <memset@plt>
   326cc:	ldr	r3, [sp, #80]	; 0x50
   326d0:	str	r3, [r6, #4]
   326d4:	add	fp, r5, r4, lsl #3
   326d8:	ldr	r1, [sp, #36]	; 0x24
   326dc:	ldr	r8, [r5, r4, lsl #3]
   326e0:	ldr	r6, [fp, #4]
   326e4:	ldr	r2, [sp, #72]	; 0x48
   326e8:	ldr	r3, [sp, #32]
   326ec:	ldr	ip, [sp, #76]	; 0x4c
   326f0:	orr	r1, r1, #1
   326f4:	add	sl, sp, #40	; 0x28
   326f8:	str	r1, [sp, #28]
   326fc:	str	r1, [sp, #4]
   32700:	str	r2, [sp, #12]
   32704:	str	r3, [sp]
   32708:	mov	r0, r6
   3270c:	mov	r1, r8
   32710:	str	ip, [sp, #16]
   32714:	str	sl, [sp, #8]
   32718:	mvn	r3, #0
   3271c:	mov	r2, r9
   32720:	bl	30648 <__assert_fail@plt+0x1e054>
   32724:	cmp	r8, r0
   32728:	bhi	3278c <__assert_fail@plt+0x20198>
   3272c:	ldr	r3, [pc, #164]	; 327d8 <__assert_fail@plt+0x201e4>
   32730:	add	r8, r0, #1
   32734:	cmp	r6, r3
   32738:	str	r8, [r5, r4, lsl #3]
   3273c:	beq	32748 <__assert_fail@plt+0x20154>
   32740:	mov	r0, r6
   32744:	bl	376d0 <__assert_fail@plt+0x250dc>
   32748:	mov	r0, r8
   3274c:	bl	35664 <__assert_fail@plt+0x23070>
   32750:	ldr	lr, [sp, #76]	; 0x4c
   32754:	ldr	r3, [sp, #32]
   32758:	ldr	ip, [sp, #72]	; 0x48
   3275c:	ldr	r4, [sp, #28]
   32760:	mov	r2, r9
   32764:	mov	r1, r8
   32768:	str	r0, [fp, #4]
   3276c:	str	r3, [sp]
   32770:	str	sl, [sp, #8]
   32774:	str	r4, [sp, #4]
   32778:	str	lr, [sp, #16]
   3277c:	str	ip, [sp, #12]
   32780:	mvn	r3, #0
   32784:	mov	r6, r0
   32788:	bl	30648 <__assert_fail@plt+0x1e054>
   3278c:	ldr	r3, [sp, #24]
   32790:	mov	r0, r6
   32794:	str	r3, [r7]
   32798:	add	sp, sp, #132	; 0x84
   3279c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327a0:	mov	r3, #8
   327a4:	sub	r2, r4, r2
   327a8:	add	r1, sp, #80	; 0x50
   327ac:	str	r3, [sp]
   327b0:	add	r2, r2, #1
   327b4:	mvn	r3, #-2147483648	; 0x80000000
   327b8:	bl	35880 <__assert_fail@plt+0x2328c>
   327bc:	mov	r5, r0
   327c0:	ldm	r8, {r0, r1}
   327c4:	str	r5, [r6]
   327c8:	stm	r5, {r0, r1}
   327cc:	b	326b0 <__assert_fail@plt+0x200bc>
   327d0:	bl	125a0 <abort@plt>
   327d4:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   327d8:	andeq	r4, r6, r8, lsr sp
   327dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   327e0:	sub	sp, sp, #132	; 0x84
   327e4:	mov	r5, r1
   327e8:	mov	r4, r0
   327ec:	mov	r9, r2
   327f0:	add	r0, sp, #80	; 0x50
   327f4:	mov	r2, #48	; 0x30
   327f8:	mov	r1, #0
   327fc:	mov	sl, r3
   32800:	bl	12378 <memset@plt>
   32804:	cmp	r5, #10
   32808:	beq	329c4 <__assert_fail@plt+0x203d0>
   3280c:	add	lr, sp, #80	; 0x50
   32810:	str	r5, [sp, #80]	; 0x50
   32814:	ldm	lr!, {r0, r1, r2, r3}
   32818:	add	ip, sp, #32
   3281c:	ldr	r6, [pc, #420]	; 329c8 <__assert_fail@plt+0x203d4>
   32820:	stmia	ip!, {r0, r1, r2, r3}
   32824:	ldm	lr!, {r0, r1, r2, r3}
   32828:	stmia	ip!, {r0, r1, r2, r3}
   3282c:	ldm	lr, {r0, r1, r2, r3}
   32830:	stm	ip, {r0, r1, r2, r3}
   32834:	bl	12348 <__errno_location@plt>
   32838:	cmn	r4, #-2147483647	; 0x80000001
   3283c:	ldr	r5, [r6]
   32840:	mov	r7, r0
   32844:	movne	r0, #0
   32848:	moveq	r0, #1
   3284c:	ldr	r3, [r7]
   32850:	orrs	r0, r0, r4, lsr #31
   32854:	str	r3, [sp, #24]
   32858:	bne	329c4 <__assert_fail@plt+0x203d0>
   3285c:	ldr	r2, [r6, #4]
   32860:	cmp	r4, r2
   32864:	blt	328c4 <__assert_fail@plt+0x202d0>
   32868:	add	r8, r6, #8
   3286c:	cmp	r5, r8
   32870:	str	r2, [sp, #80]	; 0x50
   32874:	beq	32994 <__assert_fail@plt+0x203a0>
   32878:	mov	r3, #8
   3287c:	sub	r2, r4, r2
   32880:	mov	r0, r5
   32884:	str	r3, [sp]
   32888:	add	r2, r2, #1
   3288c:	add	r1, sp, #80	; 0x50
   32890:	mvn	r3, #-2147483648	; 0x80000000
   32894:	bl	35880 <__assert_fail@plt+0x2328c>
   32898:	mov	r5, r0
   3289c:	str	r0, [r6]
   328a0:	ldr	r0, [r6, #4]
   328a4:	ldr	r2, [sp, #80]	; 0x50
   328a8:	mov	r1, #0
   328ac:	sub	r2, r2, r0
   328b0:	add	r0, r5, r0, lsl #3
   328b4:	lsl	r2, r2, #3
   328b8:	bl	12378 <memset@plt>
   328bc:	ldr	r3, [sp, #80]	; 0x50
   328c0:	str	r3, [r6, #4]
   328c4:	add	fp, r5, r4, lsl #3
   328c8:	ldr	r3, [sp, #32]
   328cc:	ldr	r1, [sp, #36]	; 0x24
   328d0:	ldr	r8, [r5, r4, lsl #3]
   328d4:	ldr	r6, [fp, #4]
   328d8:	ldr	r2, [sp, #72]	; 0x48
   328dc:	ldr	ip, [sp, #76]	; 0x4c
   328e0:	orr	r1, r1, #1
   328e4:	str	r3, [sp]
   328e8:	add	r3, sp, #40	; 0x28
   328ec:	str	r1, [sp, #28]
   328f0:	str	r1, [sp, #4]
   328f4:	str	r2, [sp, #12]
   328f8:	str	r3, [sp, #8]
   328fc:	mov	r0, r6
   32900:	mov	r1, r8
   32904:	str	ip, [sp, #16]
   32908:	mov	r3, sl
   3290c:	mov	r2, r9
   32910:	bl	30648 <__assert_fail@plt+0x1e054>
   32914:	cmp	r8, r0
   32918:	bhi	32980 <__assert_fail@plt+0x2038c>
   3291c:	ldr	r3, [pc, #168]	; 329cc <__assert_fail@plt+0x203d8>
   32920:	add	r8, r0, #1
   32924:	cmp	r6, r3
   32928:	str	r8, [r5, r4, lsl #3]
   3292c:	beq	32938 <__assert_fail@plt+0x20344>
   32930:	mov	r0, r6
   32934:	bl	376d0 <__assert_fail@plt+0x250dc>
   32938:	mov	r0, r8
   3293c:	bl	35664 <__assert_fail@plt+0x23070>
   32940:	add	lr, sp, #40	; 0x28
   32944:	ldr	ip, [sp, #76]	; 0x4c
   32948:	ldr	r4, [sp, #72]	; 0x48
   3294c:	ldr	r5, [sp, #28]
   32950:	mov	r3, sl
   32954:	mov	r2, r9
   32958:	mov	r1, r8
   3295c:	str	r0, [fp, #4]
   32960:	str	lr, [sp, #8]
   32964:	ldr	lr, [sp, #32]
   32968:	str	r5, [sp, #4]
   3296c:	str	ip, [sp, #16]
   32970:	str	r4, [sp, #12]
   32974:	str	lr, [sp]
   32978:	mov	r6, r0
   3297c:	bl	30648 <__assert_fail@plt+0x1e054>
   32980:	ldr	r3, [sp, #24]
   32984:	mov	r0, r6
   32988:	str	r3, [r7]
   3298c:	add	sp, sp, #132	; 0x84
   32990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32994:	mov	r3, #8
   32998:	sub	r2, r4, r2
   3299c:	add	r1, sp, #80	; 0x50
   329a0:	str	r3, [sp]
   329a4:	add	r2, r2, #1
   329a8:	mvn	r3, #-2147483648	; 0x80000000
   329ac:	bl	35880 <__assert_fail@plt+0x2328c>
   329b0:	mov	r5, r0
   329b4:	ldm	r8, {r0, r1}
   329b8:	str	r5, [r6]
   329bc:	stm	r5, {r0, r1}
   329c0:	b	328a0 <__assert_fail@plt+0x202ac>
   329c4:	bl	125a0 <abort@plt>
   329c8:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   329cc:	andeq	r4, r6, r8, lsr sp
   329d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   329d4:	sub	sp, sp, #124	; 0x7c
   329d8:	mov	r4, r0
   329dc:	mov	r9, r1
   329e0:	add	r0, sp, #72	; 0x48
   329e4:	mov	r2, #48	; 0x30
   329e8:	mov	r1, #0
   329ec:	bl	12378 <memset@plt>
   329f0:	cmp	r4, #10
   329f4:	beq	32b80 <__assert_fail@plt+0x2058c>
   329f8:	add	lr, sp, #72	; 0x48
   329fc:	str	r4, [sp, #72]	; 0x48
   32a00:	ldm	lr!, {r0, r1, r2, r3}
   32a04:	add	ip, sp, #24
   32a08:	ldr	r5, [pc, #372]	; 32b84 <__assert_fail@plt+0x20590>
   32a0c:	stmia	ip!, {r0, r1, r2, r3}
   32a10:	ldm	lr!, {r0, r1, r2, r3}
   32a14:	stmia	ip!, {r0, r1, r2, r3}
   32a18:	ldm	lr, {r0, r1, r2, r3}
   32a1c:	stm	ip, {r0, r1, r2, r3}
   32a20:	bl	12348 <__errno_location@plt>
   32a24:	ldr	r2, [r5, #4]
   32a28:	ldr	r4, [r5]
   32a2c:	cmp	r2, #0
   32a30:	mov	r7, r0
   32a34:	ldr	fp, [r0]
   32a38:	bgt	32a94 <__assert_fail@plt+0x204a0>
   32a3c:	add	r6, r5, #8
   32a40:	cmp	r4, r6
   32a44:	str	r2, [sp, #72]	; 0x48
   32a48:	beq	32b50 <__assert_fail@plt+0x2055c>
   32a4c:	mov	r3, #8
   32a50:	mov	r0, r4
   32a54:	str	r3, [sp]
   32a58:	rsb	r2, r2, #1
   32a5c:	add	r1, sp, #72	; 0x48
   32a60:	mvn	r3, #-2147483648	; 0x80000000
   32a64:	bl	35880 <__assert_fail@plt+0x2328c>
   32a68:	mov	r4, r0
   32a6c:	str	r0, [r5]
   32a70:	ldr	r0, [r5, #4]
   32a74:	ldr	r2, [sp, #72]	; 0x48
   32a78:	mov	r1, #0
   32a7c:	sub	r2, r2, r0
   32a80:	add	r0, r4, r0, lsl #3
   32a84:	lsl	r2, r2, #3
   32a88:	bl	12378 <memset@plt>
   32a8c:	ldr	r3, [sp, #72]	; 0x48
   32a90:	str	r3, [r5, #4]
   32a94:	ldr	r6, [sp, #28]
   32a98:	ldr	r8, [r4]
   32a9c:	ldr	r5, [r4, #4]
   32aa0:	ldr	r2, [sp, #64]	; 0x40
   32aa4:	ldr	r3, [sp, #24]
   32aa8:	ldr	ip, [sp, #68]	; 0x44
   32aac:	orr	r6, r6, #1
   32ab0:	add	sl, sp, #32
   32ab4:	str	r2, [sp, #12]
   32ab8:	str	r3, [sp]
   32abc:	str	r6, [sp, #4]
   32ac0:	mov	r1, r8
   32ac4:	mov	r0, r5
   32ac8:	str	ip, [sp, #16]
   32acc:	str	sl, [sp, #8]
   32ad0:	mvn	r3, #0
   32ad4:	mov	r2, r9
   32ad8:	bl	30648 <__assert_fail@plt+0x1e054>
   32adc:	cmp	r8, r0
   32ae0:	bhi	32b40 <__assert_fail@plt+0x2054c>
   32ae4:	ldr	r3, [pc, #156]	; 32b88 <__assert_fail@plt+0x20594>
   32ae8:	add	r8, r0, #1
   32aec:	cmp	r5, r3
   32af0:	str	r8, [r4]
   32af4:	beq	32b00 <__assert_fail@plt+0x2050c>
   32af8:	mov	r0, r5
   32afc:	bl	376d0 <__assert_fail@plt+0x250dc>
   32b00:	mov	r0, r8
   32b04:	bl	35664 <__assert_fail@plt+0x23070>
   32b08:	ldr	lr, [sp, #68]	; 0x44
   32b0c:	ldr	r3, [sp, #24]
   32b10:	ldr	ip, [sp, #64]	; 0x40
   32b14:	mov	r2, r9
   32b18:	mov	r1, r8
   32b1c:	str	r0, [r4, #4]
   32b20:	str	r3, [sp]
   32b24:	str	sl, [sp, #8]
   32b28:	str	r6, [sp, #4]
   32b2c:	str	lr, [sp, #16]
   32b30:	str	ip, [sp, #12]
   32b34:	mvn	r3, #0
   32b38:	mov	r5, r0
   32b3c:	bl	30648 <__assert_fail@plt+0x1e054>
   32b40:	mov	r0, r5
   32b44:	str	fp, [r7]
   32b48:	add	sp, sp, #124	; 0x7c
   32b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32b50:	mov	r3, #8
   32b54:	add	r1, sp, #72	; 0x48
   32b58:	str	r3, [sp]
   32b5c:	rsb	r2, r2, #1
   32b60:	mvn	r3, #-2147483648	; 0x80000000
   32b64:	mov	r0, #0
   32b68:	bl	35880 <__assert_fail@plt+0x2328c>
   32b6c:	mov	r4, r0
   32b70:	ldm	r6, {r0, r1}
   32b74:	str	r4, [r5]
   32b78:	stm	r4, {r0, r1}
   32b7c:	b	32a70 <__assert_fail@plt+0x2047c>
   32b80:	bl	125a0 <abort@plt>
   32b84:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   32b88:	andeq	r4, r6, r8, lsr sp
   32b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32b90:	sub	sp, sp, #132	; 0x84
   32b94:	mov	r4, r0
   32b98:	mov	r9, r1
   32b9c:	mov	sl, r2
   32ba0:	add	r0, sp, #80	; 0x50
   32ba4:	mov	r2, #48	; 0x30
   32ba8:	mov	r1, #0
   32bac:	bl	12378 <memset@plt>
   32bb0:	cmp	r4, #10
   32bb4:	beq	32d48 <__assert_fail@plt+0x20754>
   32bb8:	add	lr, sp, #80	; 0x50
   32bbc:	str	r4, [sp, #80]	; 0x50
   32bc0:	ldm	lr!, {r0, r1, r2, r3}
   32bc4:	add	ip, sp, #32
   32bc8:	ldr	r5, [pc, #380]	; 32d4c <__assert_fail@plt+0x20758>
   32bcc:	stmia	ip!, {r0, r1, r2, r3}
   32bd0:	ldm	lr!, {r0, r1, r2, r3}
   32bd4:	stmia	ip!, {r0, r1, r2, r3}
   32bd8:	ldm	lr, {r0, r1, r2, r3}
   32bdc:	stm	ip, {r0, r1, r2, r3}
   32be0:	bl	12348 <__errno_location@plt>
   32be4:	ldr	r2, [r5, #4]
   32be8:	ldr	r4, [r5]
   32bec:	cmp	r2, #0
   32bf0:	ldr	r3, [r0]
   32bf4:	mov	r7, r0
   32bf8:	str	r3, [sp, #28]
   32bfc:	bgt	32c58 <__assert_fail@plt+0x20664>
   32c00:	add	r6, r5, #8
   32c04:	cmp	r4, r6
   32c08:	str	r2, [sp, #80]	; 0x50
   32c0c:	beq	32d18 <__assert_fail@plt+0x20724>
   32c10:	mov	r3, #8
   32c14:	mov	r0, r4
   32c18:	str	r3, [sp]
   32c1c:	rsb	r2, r2, #1
   32c20:	add	r1, sp, #80	; 0x50
   32c24:	mvn	r3, #-2147483648	; 0x80000000
   32c28:	bl	35880 <__assert_fail@plt+0x2328c>
   32c2c:	mov	r4, r0
   32c30:	str	r0, [r5]
   32c34:	ldr	r0, [r5, #4]
   32c38:	ldr	r2, [sp, #80]	; 0x50
   32c3c:	mov	r1, #0
   32c40:	sub	r2, r2, r0
   32c44:	add	r0, r4, r0, lsl #3
   32c48:	lsl	r2, r2, #3
   32c4c:	bl	12378 <memset@plt>
   32c50:	ldr	r3, [sp, #80]	; 0x50
   32c54:	str	r3, [r5, #4]
   32c58:	ldr	r6, [sp, #36]	; 0x24
   32c5c:	ldr	r8, [r4]
   32c60:	ldr	r5, [r4, #4]
   32c64:	ldr	r2, [sp, #72]	; 0x48
   32c68:	ldr	r3, [sp, #32]
   32c6c:	ldr	ip, [sp, #76]	; 0x4c
   32c70:	orr	r6, r6, #1
   32c74:	add	fp, sp, #40	; 0x28
   32c78:	str	r2, [sp, #12]
   32c7c:	str	r3, [sp]
   32c80:	str	r6, [sp, #4]
   32c84:	mov	r1, r8
   32c88:	mov	r0, r5
   32c8c:	str	ip, [sp, #16]
   32c90:	str	fp, [sp, #8]
   32c94:	mov	r3, sl
   32c98:	mov	r2, r9
   32c9c:	bl	30648 <__assert_fail@plt+0x1e054>
   32ca0:	cmp	r8, r0
   32ca4:	bhi	32d04 <__assert_fail@plt+0x20710>
   32ca8:	ldr	r3, [pc, #160]	; 32d50 <__assert_fail@plt+0x2075c>
   32cac:	add	r8, r0, #1
   32cb0:	cmp	r5, r3
   32cb4:	str	r8, [r4]
   32cb8:	beq	32cc4 <__assert_fail@plt+0x206d0>
   32cbc:	mov	r0, r5
   32cc0:	bl	376d0 <__assert_fail@plt+0x250dc>
   32cc4:	mov	r0, r8
   32cc8:	bl	35664 <__assert_fail@plt+0x23070>
   32ccc:	ldr	ip, [sp, #76]	; 0x4c
   32cd0:	ldr	lr, [sp, #32]
   32cd4:	mov	r3, sl
   32cd8:	mov	r2, r9
   32cdc:	mov	r1, r8
   32ce0:	str	r0, [r4, #4]
   32ce4:	ldr	r4, [sp, #72]	; 0x48
   32ce8:	str	fp, [sp, #8]
   32cec:	str	r6, [sp, #4]
   32cf0:	str	ip, [sp, #16]
   32cf4:	str	r4, [sp, #12]
   32cf8:	str	lr, [sp]
   32cfc:	mov	r5, r0
   32d00:	bl	30648 <__assert_fail@plt+0x1e054>
   32d04:	ldr	r3, [sp, #28]
   32d08:	mov	r0, r5
   32d0c:	str	r3, [r7]
   32d10:	add	sp, sp, #132	; 0x84
   32d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d18:	mov	r3, #8
   32d1c:	add	r1, sp, #80	; 0x50
   32d20:	str	r3, [sp]
   32d24:	rsb	r2, r2, #1
   32d28:	mvn	r3, #-2147483648	; 0x80000000
   32d2c:	mov	r0, #0
   32d30:	bl	35880 <__assert_fail@plt+0x2328c>
   32d34:	mov	r4, r0
   32d38:	ldm	r6, {r0, r1}
   32d3c:	str	r4, [r5]
   32d40:	stm	r4, {r0, r1}
   32d44:	b	32c34 <__assert_fail@plt+0x20640>
   32d48:	bl	125a0 <abort@plt>
   32d4c:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   32d50:	andeq	r4, r6, r8, lsr sp
   32d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32d58:	mov	r4, r2
   32d5c:	ldr	lr, [pc, #432]	; 32f14 <__assert_fail@plt+0x20920>
   32d60:	mov	sl, r0
   32d64:	mov	fp, r1
   32d68:	ldm	lr!, {r0, r1, r2, r3}
   32d6c:	sub	sp, sp, #92	; 0x5c
   32d70:	add	ip, sp, #40	; 0x28
   32d74:	lsr	r7, r4, #5
   32d78:	stmia	ip!, {r0, r1, r2, r3}
   32d7c:	add	r6, sp, #48	; 0x30
   32d80:	ldm	lr!, {r0, r1, r2, r3}
   32d84:	and	r4, r4, #31
   32d88:	ldr	r5, [pc, #392]	; 32f18 <__assert_fail@plt+0x20924>
   32d8c:	stmia	ip!, {r0, r1, r2, r3}
   32d90:	ldm	lr, {r0, r1, r2, r3}
   32d94:	stm	ip, {r0, r1, r2, r3}
   32d98:	ldr	r2, [r6, r7, lsl #2]
   32d9c:	lsr	r3, r2, r4
   32da0:	eor	r3, r3, #1
   32da4:	and	r3, r3, #1
   32da8:	eor	r4, r2, r3, lsl r4
   32dac:	str	r4, [r6, r7, lsl #2]
   32db0:	bl	12348 <__errno_location@plt>
   32db4:	ldr	r2, [r5, #4]
   32db8:	ldr	r4, [r5]
   32dbc:	cmp	r2, #0
   32dc0:	ldr	r3, [r0]
   32dc4:	mov	r8, r0
   32dc8:	str	r3, [sp, #28]
   32dcc:	bgt	32e28 <__assert_fail@plt+0x20834>
   32dd0:	add	r7, r5, #8
   32dd4:	cmp	r4, r7
   32dd8:	str	r2, [sp, #36]	; 0x24
   32ddc:	beq	32ee4 <__assert_fail@plt+0x208f0>
   32de0:	mov	r3, #8
   32de4:	mov	r0, r4
   32de8:	str	r3, [sp]
   32dec:	rsb	r2, r2, #1
   32df0:	mvn	r3, #-2147483648	; 0x80000000
   32df4:	add	r1, sp, #36	; 0x24
   32df8:	bl	35880 <__assert_fail@plt+0x2328c>
   32dfc:	mov	r4, r0
   32e00:	str	r0, [r5]
   32e04:	ldr	r0, [r5, #4]
   32e08:	ldr	r2, [sp, #36]	; 0x24
   32e0c:	mov	r1, #0
   32e10:	sub	r2, r2, r0
   32e14:	add	r0, r4, r0, lsl #3
   32e18:	lsl	r2, r2, #3
   32e1c:	bl	12378 <memset@plt>
   32e20:	ldr	r3, [sp, #36]	; 0x24
   32e24:	str	r3, [r5, #4]
   32e28:	ldr	r7, [sp, #44]	; 0x2c
   32e2c:	ldr	r9, [r4]
   32e30:	ldr	r5, [r4, #4]
   32e34:	ldr	r2, [sp, #80]	; 0x50
   32e38:	ldr	r3, [sp, #40]	; 0x28
   32e3c:	ldr	ip, [sp, #84]	; 0x54
   32e40:	orr	r7, r7, #1
   32e44:	str	r2, [sp, #12]
   32e48:	str	r3, [sp]
   32e4c:	str	r7, [sp, #4]
   32e50:	str	r6, [sp, #8]
   32e54:	mov	r1, r9
   32e58:	mov	r0, r5
   32e5c:	str	ip, [sp, #16]
   32e60:	mov	r3, fp
   32e64:	mov	r2, sl
   32e68:	bl	30648 <__assert_fail@plt+0x1e054>
   32e6c:	cmp	r9, r0
   32e70:	bhi	32ed0 <__assert_fail@plt+0x208dc>
   32e74:	ldr	r3, [pc, #160]	; 32f1c <__assert_fail@plt+0x20928>
   32e78:	add	r9, r0, #1
   32e7c:	cmp	r5, r3
   32e80:	str	r9, [r4]
   32e84:	beq	32e90 <__assert_fail@plt+0x2089c>
   32e88:	mov	r0, r5
   32e8c:	bl	376d0 <__assert_fail@plt+0x250dc>
   32e90:	mov	r0, r9
   32e94:	bl	35664 <__assert_fail@plt+0x23070>
   32e98:	ldr	ip, [sp, #84]	; 0x54
   32e9c:	ldr	lr, [sp, #40]	; 0x28
   32ea0:	mov	r3, fp
   32ea4:	mov	r2, sl
   32ea8:	mov	r1, r9
   32eac:	str	r0, [r4, #4]
   32eb0:	ldr	r4, [sp, #80]	; 0x50
   32eb4:	str	r6, [sp, #8]
   32eb8:	str	r7, [sp, #4]
   32ebc:	str	ip, [sp, #16]
   32ec0:	str	r4, [sp, #12]
   32ec4:	str	lr, [sp]
   32ec8:	mov	r5, r0
   32ecc:	bl	30648 <__assert_fail@plt+0x1e054>
   32ed0:	ldr	r3, [sp, #28]
   32ed4:	mov	r0, r5
   32ed8:	str	r3, [r8]
   32edc:	add	sp, sp, #92	; 0x5c
   32ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32ee4:	mov	r3, #8
   32ee8:	str	r3, [sp]
   32eec:	add	r1, sp, #36	; 0x24
   32ef0:	rsb	r2, r2, #1
   32ef4:	mvn	r3, #-2147483648	; 0x80000000
   32ef8:	mov	r0, #0
   32efc:	bl	35880 <__assert_fail@plt+0x2328c>
   32f00:	mov	r4, r0
   32f04:	ldm	r7, {r0, r1}
   32f08:	str	r4, [r5]
   32f0c:	stm	r4, {r0, r1}
   32f10:	b	32e04 <__assert_fail@plt+0x20810>
   32f14:	andeq	r4, r6, r8, lsl #26
   32f18:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   32f1c:	andeq	r4, r6, r8, lsr sp
   32f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32f24:	mov	r4, r1
   32f28:	ldr	lr, [pc, #420]	; 330d4 <__assert_fail@plt+0x20ae0>
   32f2c:	mov	r6, r0
   32f30:	sub	sp, sp, #84	; 0x54
   32f34:	ldm	lr!, {r0, r1, r2, r3}
   32f38:	add	ip, sp, #32
   32f3c:	lsr	r8, r4, #5
   32f40:	add	r5, sp, #40	; 0x28
   32f44:	stmia	ip!, {r0, r1, r2, r3}
   32f48:	and	r4, r4, #31
   32f4c:	ldm	lr!, {r0, r1, r2, r3}
   32f50:	ldr	r7, [pc, #384]	; 330d8 <__assert_fail@plt+0x20ae4>
   32f54:	stmia	ip!, {r0, r1, r2, r3}
   32f58:	ldm	lr, {r0, r1, r2, r3}
   32f5c:	stm	ip, {r0, r1, r2, r3}
   32f60:	ldr	r2, [r5, r8, lsl #2]
   32f64:	lsr	r3, r2, r4
   32f68:	eor	r3, r3, #1
   32f6c:	and	r3, r3, #1
   32f70:	eor	r4, r2, r3, lsl r4
   32f74:	str	r4, [r5, r8, lsl #2]
   32f78:	bl	12348 <__errno_location@plt>
   32f7c:	ldr	r2, [r7, #4]
   32f80:	ldr	r4, [r7]
   32f84:	cmp	r2, #0
   32f88:	mov	r9, r0
   32f8c:	ldr	sl, [r0]
   32f90:	bgt	32fec <__assert_fail@plt+0x209f8>
   32f94:	add	r8, r7, #8
   32f98:	cmp	r4, r8
   32f9c:	str	r2, [sp, #28]
   32fa0:	beq	330a4 <__assert_fail@plt+0x20ab0>
   32fa4:	mov	r3, #8
   32fa8:	mov	r0, r4
   32fac:	str	r3, [sp]
   32fb0:	rsb	r2, r2, #1
   32fb4:	mvn	r3, #-2147483648	; 0x80000000
   32fb8:	add	r1, sp, #28
   32fbc:	bl	35880 <__assert_fail@plt+0x2328c>
   32fc0:	mov	r4, r0
   32fc4:	str	r0, [r7]
   32fc8:	ldr	r0, [r7, #4]
   32fcc:	ldr	r2, [sp, #28]
   32fd0:	mov	r1, #0
   32fd4:	sub	r2, r2, r0
   32fd8:	add	r0, r4, r0, lsl #3
   32fdc:	lsl	r2, r2, #3
   32fe0:	bl	12378 <memset@plt>
   32fe4:	ldr	r3, [sp, #28]
   32fe8:	str	r3, [r7, #4]
   32fec:	ldr	r8, [sp, #36]	; 0x24
   32ff0:	ldr	fp, [r4]
   32ff4:	ldr	r7, [r4, #4]
   32ff8:	ldr	r2, [sp, #72]	; 0x48
   32ffc:	ldr	r3, [sp, #32]
   33000:	ldr	ip, [sp, #76]	; 0x4c
   33004:	orr	r8, r8, #1
   33008:	str	r2, [sp, #12]
   3300c:	str	r3, [sp]
   33010:	str	r8, [sp, #4]
   33014:	str	r5, [sp, #8]
   33018:	mov	r1, fp
   3301c:	mov	r0, r7
   33020:	str	ip, [sp, #16]
   33024:	mvn	r3, #0
   33028:	mov	r2, r6
   3302c:	bl	30648 <__assert_fail@plt+0x1e054>
   33030:	cmp	fp, r0
   33034:	bhi	33094 <__assert_fail@plt+0x20aa0>
   33038:	ldr	r3, [pc, #156]	; 330dc <__assert_fail@plt+0x20ae8>
   3303c:	add	fp, r0, #1
   33040:	cmp	r7, r3
   33044:	str	fp, [r4]
   33048:	beq	33054 <__assert_fail@plt+0x20a60>
   3304c:	mov	r0, r7
   33050:	bl	376d0 <__assert_fail@plt+0x250dc>
   33054:	mov	r0, fp
   33058:	bl	35664 <__assert_fail@plt+0x23070>
   3305c:	ldr	lr, [sp, #76]	; 0x4c
   33060:	ldr	r3, [sp, #32]
   33064:	ldr	ip, [sp, #72]	; 0x48
   33068:	mov	r2, r6
   3306c:	mov	r1, fp
   33070:	str	r0, [r4, #4]
   33074:	str	r3, [sp]
   33078:	str	r5, [sp, #8]
   3307c:	str	r8, [sp, #4]
   33080:	str	lr, [sp, #16]
   33084:	str	ip, [sp, #12]
   33088:	mvn	r3, #0
   3308c:	mov	r7, r0
   33090:	bl	30648 <__assert_fail@plt+0x1e054>
   33094:	mov	r0, r7
   33098:	str	sl, [r9]
   3309c:	add	sp, sp, #84	; 0x54
   330a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   330a4:	mov	r3, #8
   330a8:	str	r3, [sp]
   330ac:	add	r1, sp, #28
   330b0:	rsb	r2, r2, #1
   330b4:	mvn	r3, #-2147483648	; 0x80000000
   330b8:	mov	r0, #0
   330bc:	bl	35880 <__assert_fail@plt+0x2328c>
   330c0:	mov	r4, r0
   330c4:	ldm	r8, {r0, r1}
   330c8:	str	r4, [r7]
   330cc:	stm	r4, {r0, r1}
   330d0:	b	32fc8 <__assert_fail@plt+0x209d4>
   330d4:	andeq	r4, r6, r8, lsl #26
   330d8:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   330dc:	andeq	r4, r6, r8, lsr sp
   330e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   330e4:	mov	r6, r0
   330e8:	ldr	lr, [pc, #404]	; 33284 <__assert_fail@plt+0x20c90>
   330ec:	sub	sp, sp, #84	; 0x54
   330f0:	add	ip, sp, #32
   330f4:	ldm	lr!, {r0, r1, r2, r3}
   330f8:	ldr	r5, [pc, #392]	; 33288 <__assert_fail@plt+0x20c94>
   330fc:	stmia	ip!, {r0, r1, r2, r3}
   33100:	ldm	lr!, {r0, r1, r2, r3}
   33104:	ldr	r4, [sp, #44]	; 0x2c
   33108:	stmia	ip!, {r0, r1, r2, r3}
   3310c:	ldm	lr, {r0, r1, r2, r3}
   33110:	mvn	lr, r4
   33114:	and	lr, lr, #67108864	; 0x4000000
   33118:	eor	lr, lr, r4
   3311c:	stm	ip, {r0, r1, r2, r3}
   33120:	str	lr, [sp, #44]	; 0x2c
   33124:	bl	12348 <__errno_location@plt>
   33128:	ldr	r2, [r5, #4]
   3312c:	ldr	r4, [r5]
   33130:	cmp	r2, #0
   33134:	mov	r8, r0
   33138:	ldr	sl, [r0]
   3313c:	bgt	33198 <__assert_fail@plt+0x20ba4>
   33140:	add	r7, r5, #8
   33144:	cmp	r4, r7
   33148:	str	r2, [sp, #28]
   3314c:	beq	33254 <__assert_fail@plt+0x20c60>
   33150:	mov	r3, #8
   33154:	mov	r0, r4
   33158:	str	r3, [sp]
   3315c:	rsb	r2, r2, #1
   33160:	mvn	r3, #-2147483648	; 0x80000000
   33164:	add	r1, sp, #28
   33168:	bl	35880 <__assert_fail@plt+0x2328c>
   3316c:	mov	r4, r0
   33170:	str	r0, [r5]
   33174:	ldr	r0, [r5, #4]
   33178:	ldr	r2, [sp, #28]
   3317c:	mov	r1, #0
   33180:	sub	r2, r2, r0
   33184:	add	r0, r4, r0, lsl #3
   33188:	lsl	r2, r2, #3
   3318c:	bl	12378 <memset@plt>
   33190:	ldr	r3, [sp, #28]
   33194:	str	r3, [r5, #4]
   33198:	ldr	r7, [sp, #36]	; 0x24
   3319c:	ldr	r9, [r4]
   331a0:	ldr	r5, [r4, #4]
   331a4:	ldr	r2, [sp, #72]	; 0x48
   331a8:	ldr	r3, [sp, #32]
   331ac:	ldr	ip, [sp, #76]	; 0x4c
   331b0:	orr	r7, r7, #1
   331b4:	add	fp, sp, #40	; 0x28
   331b8:	str	r2, [sp, #12]
   331bc:	str	r3, [sp]
   331c0:	str	r7, [sp, #4]
   331c4:	mov	r1, r9
   331c8:	mov	r0, r5
   331cc:	str	ip, [sp, #16]
   331d0:	str	fp, [sp, #8]
   331d4:	mvn	r3, #0
   331d8:	mov	r2, r6
   331dc:	bl	30648 <__assert_fail@plt+0x1e054>
   331e0:	cmp	r9, r0
   331e4:	bhi	33244 <__assert_fail@plt+0x20c50>
   331e8:	ldr	r3, [pc, #156]	; 3328c <__assert_fail@plt+0x20c98>
   331ec:	add	r9, r0, #1
   331f0:	cmp	r5, r3
   331f4:	str	r9, [r4]
   331f8:	beq	33204 <__assert_fail@plt+0x20c10>
   331fc:	mov	r0, r5
   33200:	bl	376d0 <__assert_fail@plt+0x250dc>
   33204:	mov	r0, r9
   33208:	bl	35664 <__assert_fail@plt+0x23070>
   3320c:	ldr	lr, [sp, #76]	; 0x4c
   33210:	ldr	r3, [sp, #32]
   33214:	ldr	ip, [sp, #72]	; 0x48
   33218:	mov	r2, r6
   3321c:	mov	r1, r9
   33220:	str	r0, [r4, #4]
   33224:	str	r3, [sp]
   33228:	str	fp, [sp, #8]
   3322c:	str	r7, [sp, #4]
   33230:	str	lr, [sp, #16]
   33234:	str	ip, [sp, #12]
   33238:	mvn	r3, #0
   3323c:	mov	r5, r0
   33240:	bl	30648 <__assert_fail@plt+0x1e054>
   33244:	mov	r0, r5
   33248:	str	sl, [r8]
   3324c:	add	sp, sp, #84	; 0x54
   33250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33254:	mov	r3, #8
   33258:	str	r3, [sp]
   3325c:	add	r1, sp, #28
   33260:	rsb	r2, r2, #1
   33264:	mvn	r3, #-2147483648	; 0x80000000
   33268:	mov	r0, #0
   3326c:	bl	35880 <__assert_fail@plt+0x2328c>
   33270:	mov	r4, r0
   33274:	ldm	r7, {r0, r1}
   33278:	str	r4, [r5]
   3327c:	stm	r4, {r0, r1}
   33280:	b	33174 <__assert_fail@plt+0x20b80>
   33284:	andeq	r4, r6, r8, lsl #26
   33288:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   3328c:	andeq	r4, r6, r8, lsr sp
   33290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33294:	mov	r9, r0
   33298:	ldr	lr, [pc, #416]	; 33440 <__assert_fail@plt+0x20e4c>
   3329c:	mov	sl, r1
   332a0:	sub	sp, sp, #92	; 0x5c
   332a4:	ldm	lr!, {r0, r1, r2, r3}
   332a8:	add	ip, sp, #40	; 0x28
   332ac:	ldr	r5, [pc, #400]	; 33444 <__assert_fail@plt+0x20e50>
   332b0:	stmia	ip!, {r0, r1, r2, r3}
   332b4:	ldm	lr!, {r0, r1, r2, r3}
   332b8:	ldr	r4, [sp, #52]	; 0x34
   332bc:	stmia	ip!, {r0, r1, r2, r3}
   332c0:	ldm	lr, {r0, r1, r2, r3}
   332c4:	mvn	lr, r4
   332c8:	and	lr, lr, #67108864	; 0x4000000
   332cc:	eor	lr, lr, r4
   332d0:	stm	ip, {r0, r1, r2, r3}
   332d4:	str	lr, [sp, #52]	; 0x34
   332d8:	bl	12348 <__errno_location@plt>
   332dc:	ldr	r2, [r5, #4]
   332e0:	ldr	r4, [r5]
   332e4:	cmp	r2, #0
   332e8:	ldr	r3, [r0]
   332ec:	mov	r7, r0
   332f0:	str	r3, [sp, #28]
   332f4:	bgt	33350 <__assert_fail@plt+0x20d5c>
   332f8:	add	r6, r5, #8
   332fc:	cmp	r4, r6
   33300:	str	r2, [sp, #36]	; 0x24
   33304:	beq	33410 <__assert_fail@plt+0x20e1c>
   33308:	mov	r3, #8
   3330c:	mov	r0, r4
   33310:	str	r3, [sp]
   33314:	rsb	r2, r2, #1
   33318:	mvn	r3, #-2147483648	; 0x80000000
   3331c:	add	r1, sp, #36	; 0x24
   33320:	bl	35880 <__assert_fail@plt+0x2328c>
   33324:	mov	r4, r0
   33328:	str	r0, [r5]
   3332c:	ldr	r0, [r5, #4]
   33330:	ldr	r2, [sp, #36]	; 0x24
   33334:	mov	r1, #0
   33338:	sub	r2, r2, r0
   3333c:	add	r0, r4, r0, lsl #3
   33340:	lsl	r2, r2, #3
   33344:	bl	12378 <memset@plt>
   33348:	ldr	r3, [sp, #36]	; 0x24
   3334c:	str	r3, [r5, #4]
   33350:	ldr	r6, [sp, #44]	; 0x2c
   33354:	ldr	r8, [r4]
   33358:	ldr	r5, [r4, #4]
   3335c:	ldr	r2, [sp, #80]	; 0x50
   33360:	ldr	r3, [sp, #40]	; 0x28
   33364:	ldr	ip, [sp, #84]	; 0x54
   33368:	orr	r6, r6, #1
   3336c:	add	fp, sp, #48	; 0x30
   33370:	str	r2, [sp, #12]
   33374:	str	r3, [sp]
   33378:	str	r6, [sp, #4]
   3337c:	mov	r1, r8
   33380:	mov	r0, r5
   33384:	str	ip, [sp, #16]
   33388:	str	fp, [sp, #8]
   3338c:	mov	r3, sl
   33390:	mov	r2, r9
   33394:	bl	30648 <__assert_fail@plt+0x1e054>
   33398:	cmp	r8, r0
   3339c:	bhi	333fc <__assert_fail@plt+0x20e08>
   333a0:	ldr	r3, [pc, #160]	; 33448 <__assert_fail@plt+0x20e54>
   333a4:	add	r8, r0, #1
   333a8:	cmp	r5, r3
   333ac:	str	r8, [r4]
   333b0:	beq	333bc <__assert_fail@plt+0x20dc8>
   333b4:	mov	r0, r5
   333b8:	bl	376d0 <__assert_fail@plt+0x250dc>
   333bc:	mov	r0, r8
   333c0:	bl	35664 <__assert_fail@plt+0x23070>
   333c4:	ldr	ip, [sp, #84]	; 0x54
   333c8:	ldr	lr, [sp, #40]	; 0x28
   333cc:	mov	r3, sl
   333d0:	mov	r2, r9
   333d4:	mov	r1, r8
   333d8:	str	r0, [r4, #4]
   333dc:	ldr	r4, [sp, #80]	; 0x50
   333e0:	str	fp, [sp, #8]
   333e4:	str	r6, [sp, #4]
   333e8:	str	ip, [sp, #16]
   333ec:	str	r4, [sp, #12]
   333f0:	str	lr, [sp]
   333f4:	mov	r5, r0
   333f8:	bl	30648 <__assert_fail@plt+0x1e054>
   333fc:	ldr	r3, [sp, #28]
   33400:	mov	r0, r5
   33404:	str	r3, [r7]
   33408:	add	sp, sp, #92	; 0x5c
   3340c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33410:	mov	r3, #8
   33414:	str	r3, [sp]
   33418:	add	r1, sp, #36	; 0x24
   3341c:	rsb	r2, r2, #1
   33420:	mvn	r3, #-2147483648	; 0x80000000
   33424:	mov	r0, #0
   33428:	bl	35880 <__assert_fail@plt+0x2328c>
   3342c:	mov	r4, r0
   33430:	ldm	r6, {r0, r1}
   33434:	str	r4, [r5]
   33438:	stm	r4, {r0, r1}
   3343c:	b	3332c <__assert_fail@plt+0x20d38>
   33440:	andeq	r4, r6, r8, lsl #26
   33444:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   33448:	andeq	r4, r6, r8, lsr sp
   3344c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33450:	sub	sp, sp, #180	; 0xb4
   33454:	mov	r6, r1
   33458:	mov	r4, r0
   3345c:	mov	r9, r2
   33460:	add	r0, sp, #80	; 0x50
   33464:	mov	r2, #48	; 0x30
   33468:	mov	r1, #0
   3346c:	bl	12378 <memset@plt>
   33470:	cmp	r6, #10
   33474:	beq	33654 <__assert_fail@plt+0x21060>
   33478:	add	r5, sp, #80	; 0x50
   3347c:	str	r6, [sp, #80]	; 0x50
   33480:	ldm	r5!, {r0, r1, r2, r3}
   33484:	add	ip, sp, #128	; 0x80
   33488:	mov	r7, ip
   3348c:	add	lr, sp, #32
   33490:	stmia	ip!, {r0, r1, r2, r3}
   33494:	mov	r8, #67108864	; 0x4000000
   33498:	ldm	r5!, {r0, r1, r2, r3}
   3349c:	ldr	r6, [pc, #436]	; 33658 <__assert_fail@plt+0x21064>
   334a0:	stmia	ip!, {r0, r1, r2, r3}
   334a4:	ldm	r5, {r0, r1, r2, r3}
   334a8:	stm	ip, {r0, r1, r2, r3}
   334ac:	ldm	r7!, {r0, r1, r2, r3}
   334b0:	stmia	lr!, {r0, r1, r2, r3}
   334b4:	ldm	r7!, {r0, r1, r2, r3}
   334b8:	str	r8, [sp, #44]	; 0x2c
   334bc:	stmia	lr!, {r0, r1, r2, r3}
   334c0:	ldm	ip, {r0, r1, r2, r3}
   334c4:	stm	lr, {r0, r1, r2, r3}
   334c8:	bl	12348 <__errno_location@plt>
   334cc:	cmn	r4, #-2147483647	; 0x80000001
   334d0:	ldr	r5, [r6]
   334d4:	mov	r7, r0
   334d8:	movne	r0, #0
   334dc:	moveq	r0, #1
   334e0:	ldr	r3, [r7]
   334e4:	orrs	r0, r0, r4, lsr #31
   334e8:	str	r3, [sp, #24]
   334ec:	bne	33654 <__assert_fail@plt+0x21060>
   334f0:	ldr	r2, [r6, #4]
   334f4:	cmp	r4, r2
   334f8:	blt	33558 <__assert_fail@plt+0x20f64>
   334fc:	add	r8, r6, #8
   33500:	cmp	r5, r8
   33504:	str	r2, [sp, #80]	; 0x50
   33508:	beq	33624 <__assert_fail@plt+0x21030>
   3350c:	mov	r3, #8
   33510:	sub	r2, r4, r2
   33514:	mov	r0, r5
   33518:	str	r3, [sp]
   3351c:	add	r2, r2, #1
   33520:	add	r1, sp, #80	; 0x50
   33524:	mvn	r3, #-2147483648	; 0x80000000
   33528:	bl	35880 <__assert_fail@plt+0x2328c>
   3352c:	mov	r5, r0
   33530:	str	r0, [r6]
   33534:	ldr	r0, [r6, #4]
   33538:	ldr	r2, [sp, #80]	; 0x50
   3353c:	mov	r1, #0
   33540:	sub	r2, r2, r0
   33544:	add	r0, r5, r0, lsl #3
   33548:	lsl	r2, r2, #3
   3354c:	bl	12378 <memset@plt>
   33550:	ldr	r3, [sp, #80]	; 0x50
   33554:	str	r3, [r6, #4]
   33558:	add	fp, r5, r4, lsl #3
   3355c:	ldr	r1, [sp, #36]	; 0x24
   33560:	ldr	r8, [r5, r4, lsl #3]
   33564:	ldr	r6, [fp, #4]
   33568:	ldr	r2, [sp, #72]	; 0x48
   3356c:	ldr	r3, [sp, #32]
   33570:	ldr	ip, [sp, #76]	; 0x4c
   33574:	orr	r1, r1, #1
   33578:	add	sl, sp, #40	; 0x28
   3357c:	str	r1, [sp, #28]
   33580:	str	r1, [sp, #4]
   33584:	str	r2, [sp, #12]
   33588:	str	r3, [sp]
   3358c:	mov	r0, r6
   33590:	mov	r1, r8
   33594:	str	ip, [sp, #16]
   33598:	str	sl, [sp, #8]
   3359c:	mvn	r3, #0
   335a0:	mov	r2, r9
   335a4:	bl	30648 <__assert_fail@plt+0x1e054>
   335a8:	cmp	r8, r0
   335ac:	bhi	33610 <__assert_fail@plt+0x2101c>
   335b0:	ldr	r3, [pc, #164]	; 3365c <__assert_fail@plt+0x21068>
   335b4:	add	r8, r0, #1
   335b8:	cmp	r6, r3
   335bc:	str	r8, [r5, r4, lsl #3]
   335c0:	beq	335cc <__assert_fail@plt+0x20fd8>
   335c4:	mov	r0, r6
   335c8:	bl	376d0 <__assert_fail@plt+0x250dc>
   335cc:	mov	r0, r8
   335d0:	bl	35664 <__assert_fail@plt+0x23070>
   335d4:	ldr	lr, [sp, #76]	; 0x4c
   335d8:	ldr	r3, [sp, #32]
   335dc:	ldr	ip, [sp, #72]	; 0x48
   335e0:	ldr	r4, [sp, #28]
   335e4:	mov	r2, r9
   335e8:	mov	r1, r8
   335ec:	str	r0, [fp, #4]
   335f0:	str	r3, [sp]
   335f4:	str	sl, [sp, #8]
   335f8:	str	r4, [sp, #4]
   335fc:	str	lr, [sp, #16]
   33600:	str	ip, [sp, #12]
   33604:	mvn	r3, #0
   33608:	mov	r6, r0
   3360c:	bl	30648 <__assert_fail@plt+0x1e054>
   33610:	ldr	r3, [sp, #24]
   33614:	mov	r0, r6
   33618:	str	r3, [r7]
   3361c:	add	sp, sp, #180	; 0xb4
   33620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33624:	mov	r3, #8
   33628:	sub	r2, r4, r2
   3362c:	add	r1, sp, #80	; 0x50
   33630:	str	r3, [sp]
   33634:	add	r2, r2, #1
   33638:	mvn	r3, #-2147483648	; 0x80000000
   3363c:	bl	35880 <__assert_fail@plt+0x2328c>
   33640:	mov	r5, r0
   33644:	ldm	r8, {r0, r1}
   33648:	str	r5, [r6]
   3364c:	stm	r5, {r0, r1}
   33650:	b	33534 <__assert_fail@plt+0x20f40>
   33654:	bl	125a0 <abort@plt>
   33658:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   3365c:	andeq	r4, r6, r8, lsr sp
   33660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33664:	mov	r7, r1
   33668:	ldr	lr, [pc, #492]	; 3385c <__assert_fail@plt+0x21268>
   3366c:	mov	r8, r2
   33670:	mov	r4, r0
   33674:	mov	fp, r3
   33678:	ldm	lr!, {r0, r1, r2, r3}
   3367c:	sub	sp, sp, #100	; 0x64
   33680:	add	ip, sp, #48	; 0x30
   33684:	mov	sl, #10
   33688:	stmia	ip!, {r0, r1, r2, r3}
   3368c:	cmp	r8, #0
   33690:	cmpne	r7, #0
   33694:	ldm	lr!, {r0, r1, r2, r3}
   33698:	str	sl, [sp, #48]	; 0x30
   3369c:	stmia	ip!, {r0, r1, r2, r3}
   336a0:	ldm	lr, {r0, r1, r2, r3}
   336a4:	stm	ip, {r0, r1, r2, r3}
   336a8:	beq	33858 <__assert_fail@plt+0x21264>
   336ac:	str	r7, [sp, #88]	; 0x58
   336b0:	str	r8, [sp, #92]	; 0x5c
   336b4:	bl	12348 <__errno_location@plt>
   336b8:	ldr	r6, [pc, #416]	; 33860 <__assert_fail@plt+0x2126c>
   336bc:	cmn	r4, #-2147483647	; 0x80000001
   336c0:	ldr	r5, [r6]
   336c4:	mov	r9, r0
   336c8:	movne	r0, #0
   336cc:	moveq	r0, #1
   336d0:	ldr	r3, [r9]
   336d4:	orrs	r0, r0, r4, lsr #31
   336d8:	str	r3, [sp, #28]
   336dc:	bne	33858 <__assert_fail@plt+0x21264>
   336e0:	ldr	r2, [r6, #4]
   336e4:	cmp	r4, r2
   336e8:	movlt	r3, sl
   336ec:	blt	33758 <__assert_fail@plt+0x21164>
   336f0:	add	r7, r6, #8
   336f4:	cmp	r5, r7
   336f8:	str	r2, [sp, #44]	; 0x2c
   336fc:	beq	33828 <__assert_fail@plt+0x21234>
   33700:	mov	r3, #8
   33704:	sub	r2, r4, r2
   33708:	mov	r0, r5
   3370c:	str	r3, [sp]
   33710:	add	r2, r2, #1
   33714:	mvn	r3, #-2147483648	; 0x80000000
   33718:	add	r1, sp, #44	; 0x2c
   3371c:	bl	35880 <__assert_fail@plt+0x2328c>
   33720:	mov	r5, r0
   33724:	str	r0, [r6]
   33728:	ldr	r0, [r6, #4]
   3372c:	ldr	r2, [sp, #44]	; 0x2c
   33730:	mov	r1, #0
   33734:	sub	r2, r2, r0
   33738:	add	r0, r5, r0, lsl #3
   3373c:	lsl	r2, r2, #3
   33740:	bl	12378 <memset@plt>
   33744:	ldr	r3, [sp, #48]	; 0x30
   33748:	ldr	r7, [sp, #88]	; 0x58
   3374c:	ldr	r8, [sp, #92]	; 0x5c
   33750:	ldr	r2, [sp, #44]	; 0x2c
   33754:	str	r2, [r6, #4]
   33758:	add	r2, r5, r4, lsl #3
   3375c:	mov	r1, r2
   33760:	str	r2, [sp, #32]
   33764:	ldr	r2, [sp, #52]	; 0x34
   33768:	ldr	r6, [r1, #4]
   3376c:	ldr	sl, [r5, r4, lsl #3]
   33770:	orr	r2, r2, #1
   33774:	str	r3, [sp]
   33778:	add	r3, sp, #56	; 0x38
   3377c:	str	r2, [sp, #36]	; 0x24
   33780:	str	r2, [sp, #4]
   33784:	str	r3, [sp, #8]
   33788:	mov	r0, r6
   3378c:	str	r8, [sp, #16]
   33790:	str	r7, [sp, #12]
   33794:	mov	r1, sl
   33798:	mvn	r3, #0
   3379c:	mov	r2, fp
   337a0:	bl	30648 <__assert_fail@plt+0x1e054>
   337a4:	cmp	sl, r0
   337a8:	bhi	33814 <__assert_fail@plt+0x21220>
   337ac:	ldr	r3, [pc, #176]	; 33864 <__assert_fail@plt+0x21270>
   337b0:	add	r7, r0, #1
   337b4:	cmp	r6, r3
   337b8:	str	r7, [r5, r4, lsl #3]
   337bc:	beq	337c8 <__assert_fail@plt+0x211d4>
   337c0:	mov	r0, r6
   337c4:	bl	376d0 <__assert_fail@plt+0x250dc>
   337c8:	mov	r0, r7
   337cc:	bl	35664 <__assert_fail@plt+0x23070>
   337d0:	ldr	r3, [sp, #32]
   337d4:	ldr	lr, [sp, #92]	; 0x5c
   337d8:	ldr	ip, [sp, #88]	; 0x58
   337dc:	ldr	r4, [sp, #36]	; 0x24
   337e0:	mov	r2, fp
   337e4:	mov	r1, r7
   337e8:	str	r0, [r3, #4]
   337ec:	add	r3, sp, #56	; 0x38
   337f0:	str	r3, [sp, #8]
   337f4:	ldr	r3, [sp, #48]	; 0x30
   337f8:	str	r4, [sp, #4]
   337fc:	str	r3, [sp]
   33800:	str	lr, [sp, #16]
   33804:	str	ip, [sp, #12]
   33808:	mvn	r3, #0
   3380c:	mov	r6, r0
   33810:	bl	30648 <__assert_fail@plt+0x1e054>
   33814:	ldr	r3, [sp, #28]
   33818:	mov	r0, r6
   3381c:	str	r3, [r9]
   33820:	add	sp, sp, #100	; 0x64
   33824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33828:	mov	r3, #8
   3382c:	sub	r2, r4, r2
   33830:	str	r3, [sp]
   33834:	add	r1, sp, #44	; 0x2c
   33838:	add	r2, r2, #1
   3383c:	mvn	r3, #-2147483648	; 0x80000000
   33840:	bl	35880 <__assert_fail@plt+0x2328c>
   33844:	mov	r5, r0
   33848:	ldm	r7, {r0, r1}
   3384c:	str	r5, [r6]
   33850:	stm	r5, {r0, r1}
   33854:	b	33728 <__assert_fail@plt+0x21134>
   33858:	bl	125a0 <abort@plt>
   3385c:	andeq	r4, r6, r8, lsl #26
   33860:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   33864:	andeq	r4, r6, r8, lsr sp
   33868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3386c:	mov	r7, r1
   33870:	ldr	lr, [pc, #492]	; 33a64 <__assert_fail@plt+0x21470>
   33874:	mov	r8, r2
   33878:	mov	r4, r0
   3387c:	mov	fp, r3
   33880:	ldm	lr!, {r0, r1, r2, r3}
   33884:	sub	sp, sp, #100	; 0x64
   33888:	add	ip, sp, #48	; 0x30
   3388c:	mov	sl, #10
   33890:	stmia	ip!, {r0, r1, r2, r3}
   33894:	cmp	r8, #0
   33898:	cmpne	r7, #0
   3389c:	ldm	lr!, {r0, r1, r2, r3}
   338a0:	str	sl, [sp, #48]	; 0x30
   338a4:	stmia	ip!, {r0, r1, r2, r3}
   338a8:	ldm	lr, {r0, r1, r2, r3}
   338ac:	stm	ip, {r0, r1, r2, r3}
   338b0:	beq	33a60 <__assert_fail@plt+0x2146c>
   338b4:	str	r7, [sp, #88]	; 0x58
   338b8:	str	r8, [sp, #92]	; 0x5c
   338bc:	bl	12348 <__errno_location@plt>
   338c0:	ldr	r6, [pc, #416]	; 33a68 <__assert_fail@plt+0x21474>
   338c4:	cmn	r4, #-2147483647	; 0x80000001
   338c8:	ldr	r5, [r6]
   338cc:	mov	r9, r0
   338d0:	movne	r0, #0
   338d4:	moveq	r0, #1
   338d8:	ldr	r3, [r9]
   338dc:	orrs	r0, r0, r4, lsr #31
   338e0:	str	r3, [sp, #28]
   338e4:	bne	33a60 <__assert_fail@plt+0x2146c>
   338e8:	ldr	r2, [r6, #4]
   338ec:	cmp	r4, r2
   338f0:	movlt	r3, sl
   338f4:	blt	33960 <__assert_fail@plt+0x2136c>
   338f8:	add	r7, r6, #8
   338fc:	cmp	r5, r7
   33900:	str	r2, [sp, #44]	; 0x2c
   33904:	beq	33a30 <__assert_fail@plt+0x2143c>
   33908:	mov	r3, #8
   3390c:	sub	r2, r4, r2
   33910:	mov	r0, r5
   33914:	str	r3, [sp]
   33918:	add	r2, r2, #1
   3391c:	mvn	r3, #-2147483648	; 0x80000000
   33920:	add	r1, sp, #44	; 0x2c
   33924:	bl	35880 <__assert_fail@plt+0x2328c>
   33928:	mov	r5, r0
   3392c:	str	r0, [r6]
   33930:	ldr	r0, [r6, #4]
   33934:	ldr	r2, [sp, #44]	; 0x2c
   33938:	mov	r1, #0
   3393c:	sub	r2, r2, r0
   33940:	add	r0, r5, r0, lsl #3
   33944:	lsl	r2, r2, #3
   33948:	bl	12378 <memset@plt>
   3394c:	ldr	r3, [sp, #48]	; 0x30
   33950:	ldr	r7, [sp, #88]	; 0x58
   33954:	ldr	r8, [sp, #92]	; 0x5c
   33958:	ldr	r2, [sp, #44]	; 0x2c
   3395c:	str	r2, [r6, #4]
   33960:	add	r2, r5, r4, lsl #3
   33964:	mov	r1, r2
   33968:	str	r2, [sp, #32]
   3396c:	ldr	r2, [sp, #52]	; 0x34
   33970:	ldr	r6, [r1, #4]
   33974:	ldr	sl, [r5, r4, lsl #3]
   33978:	orr	r2, r2, #1
   3397c:	str	r3, [sp]
   33980:	add	r3, sp, #56	; 0x38
   33984:	str	r2, [sp, #36]	; 0x24
   33988:	str	r2, [sp, #4]
   3398c:	str	r3, [sp, #8]
   33990:	mov	r0, r6
   33994:	str	r8, [sp, #16]
   33998:	str	r7, [sp, #12]
   3399c:	mov	r1, sl
   339a0:	ldr	r3, [sp, #136]	; 0x88
   339a4:	mov	r2, fp
   339a8:	bl	30648 <__assert_fail@plt+0x1e054>
   339ac:	cmp	sl, r0
   339b0:	bhi	33a1c <__assert_fail@plt+0x21428>
   339b4:	ldr	r3, [pc, #176]	; 33a6c <__assert_fail@plt+0x21478>
   339b8:	add	r7, r0, #1
   339bc:	cmp	r6, r3
   339c0:	str	r7, [r5, r4, lsl #3]
   339c4:	beq	339d0 <__assert_fail@plt+0x213dc>
   339c8:	mov	r0, r6
   339cc:	bl	376d0 <__assert_fail@plt+0x250dc>
   339d0:	mov	r0, r7
   339d4:	bl	35664 <__assert_fail@plt+0x23070>
   339d8:	ldr	r3, [sp, #32]
   339dc:	ldr	lr, [sp, #92]	; 0x5c
   339e0:	ldr	ip, [sp, #88]	; 0x58
   339e4:	ldr	r4, [sp, #36]	; 0x24
   339e8:	mov	r2, fp
   339ec:	mov	r1, r7
   339f0:	str	r0, [r3, #4]
   339f4:	add	r3, sp, #56	; 0x38
   339f8:	str	r3, [sp, #8]
   339fc:	ldr	r3, [sp, #48]	; 0x30
   33a00:	str	r4, [sp, #4]
   33a04:	str	r3, [sp]
   33a08:	str	lr, [sp, #16]
   33a0c:	str	ip, [sp, #12]
   33a10:	ldr	r3, [sp, #136]	; 0x88
   33a14:	mov	r6, r0
   33a18:	bl	30648 <__assert_fail@plt+0x1e054>
   33a1c:	ldr	r3, [sp, #28]
   33a20:	mov	r0, r6
   33a24:	str	r3, [r9]
   33a28:	add	sp, sp, #100	; 0x64
   33a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33a30:	mov	r3, #8
   33a34:	sub	r2, r4, r2
   33a38:	str	r3, [sp]
   33a3c:	add	r1, sp, #44	; 0x2c
   33a40:	add	r2, r2, #1
   33a44:	mvn	r3, #-2147483648	; 0x80000000
   33a48:	bl	35880 <__assert_fail@plt+0x2328c>
   33a4c:	mov	r5, r0
   33a50:	ldm	r7, {r0, r1}
   33a54:	str	r5, [r6]
   33a58:	stm	r5, {r0, r1}
   33a5c:	b	33930 <__assert_fail@plt+0x2133c>
   33a60:	bl	125a0 <abort@plt>
   33a64:	andeq	r4, r6, r8, lsl #26
   33a68:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   33a6c:	andeq	r4, r6, r8, lsr sp
   33a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a74:	mov	r5, r0
   33a78:	ldr	lr, [pc, #452]	; 33c44 <__assert_fail@plt+0x21650>
   33a7c:	mov	r6, r1
   33a80:	mov	sl, r2
   33a84:	ldm	lr!, {r0, r1, r2, r3}
   33a88:	sub	sp, sp, #92	; 0x5c
   33a8c:	add	ip, sp, #40	; 0x28
   33a90:	cmp	r6, #0
   33a94:	cmpne	r5, #0
   33a98:	stmia	ip!, {r0, r1, r2, r3}
   33a9c:	mov	r9, #10
   33aa0:	ldm	lr!, {r0, r1, r2, r3}
   33aa4:	moveq	fp, #1
   33aa8:	movne	fp, #0
   33aac:	str	r9, [sp, #40]	; 0x28
   33ab0:	stmia	ip!, {r0, r1, r2, r3}
   33ab4:	ldm	lr, {r0, r1, r2, r3}
   33ab8:	stm	ip, {r0, r1, r2, r3}
   33abc:	beq	33c40 <__assert_fail@plt+0x2164c>
   33ac0:	str	r5, [sp, #80]	; 0x50
   33ac4:	str	r6, [sp, #84]	; 0x54
   33ac8:	bl	12348 <__errno_location@plt>
   33acc:	ldr	r7, [pc, #372]	; 33c48 <__assert_fail@plt+0x21654>
   33ad0:	ldr	r2, [r7, #4]
   33ad4:	ldr	r4, [r7]
   33ad8:	cmp	r2, #0
   33adc:	ldr	r3, [r0]
   33ae0:	mov	r8, r0
   33ae4:	str	r3, [sp, #24]
   33ae8:	movgt	r3, r9
   33aec:	bgt	33b54 <__assert_fail@plt+0x21560>
   33af0:	add	r5, r7, #8
   33af4:	cmp	r4, r5
   33af8:	str	r2, [sp, #36]	; 0x24
   33afc:	beq	33c10 <__assert_fail@plt+0x2161c>
   33b00:	mov	r3, #8
   33b04:	mov	r0, r4
   33b08:	str	r3, [sp]
   33b0c:	rsb	r2, r2, #1
   33b10:	mvn	r3, #-2147483648	; 0x80000000
   33b14:	add	r1, sp, #36	; 0x24
   33b18:	bl	35880 <__assert_fail@plt+0x2328c>
   33b1c:	mov	r4, r0
   33b20:	str	r0, [r7]
   33b24:	ldr	r0, [r7, #4]
   33b28:	ldr	r2, [sp, #36]	; 0x24
   33b2c:	mov	r1, #0
   33b30:	sub	r2, r2, r0
   33b34:	add	r0, r4, r0, lsl #3
   33b38:	lsl	r2, r2, #3
   33b3c:	bl	12378 <memset@plt>
   33b40:	ldr	r3, [sp, #40]	; 0x28
   33b44:	ldr	r5, [sp, #80]	; 0x50
   33b48:	ldr	r6, [sp, #84]	; 0x54
   33b4c:	ldr	r2, [sp, #36]	; 0x24
   33b50:	str	r2, [r7, #4]
   33b54:	ldr	r2, [sp, #44]	; 0x2c
   33b58:	ldr	r9, [r4]
   33b5c:	ldr	r7, [r4, #4]
   33b60:	orr	r2, r2, #1
   33b64:	add	fp, sp, #48	; 0x30
   33b68:	str	r2, [sp, #28]
   33b6c:	str	r2, [sp, #4]
   33b70:	str	r3, [sp]
   33b74:	str	r6, [sp, #16]
   33b78:	str	r5, [sp, #12]
   33b7c:	mov	r1, r9
   33b80:	mov	r0, r7
   33b84:	str	fp, [sp, #8]
   33b88:	mvn	r3, #0
   33b8c:	mov	r2, sl
   33b90:	bl	30648 <__assert_fail@plt+0x1e054>
   33b94:	cmp	r9, r0
   33b98:	bhi	33bfc <__assert_fail@plt+0x21608>
   33b9c:	ldr	r3, [pc, #168]	; 33c4c <__assert_fail@plt+0x21658>
   33ba0:	add	r5, r0, #1
   33ba4:	cmp	r7, r3
   33ba8:	str	r5, [r4]
   33bac:	beq	33bb8 <__assert_fail@plt+0x215c4>
   33bb0:	mov	r0, r7
   33bb4:	bl	376d0 <__assert_fail@plt+0x250dc>
   33bb8:	mov	r0, r5
   33bbc:	bl	35664 <__assert_fail@plt+0x23070>
   33bc0:	ldr	lr, [sp, #84]	; 0x54
   33bc4:	ldr	r3, [sp, #40]	; 0x28
   33bc8:	ldr	ip, [sp, #80]	; 0x50
   33bcc:	mov	r2, sl
   33bd0:	mov	r1, r5
   33bd4:	str	r0, [r4, #4]
   33bd8:	ldr	r4, [sp, #28]
   33bdc:	str	r3, [sp]
   33be0:	str	fp, [sp, #8]
   33be4:	str	r4, [sp, #4]
   33be8:	str	lr, [sp, #16]
   33bec:	str	ip, [sp, #12]
   33bf0:	mvn	r3, #0
   33bf4:	mov	r7, r0
   33bf8:	bl	30648 <__assert_fail@plt+0x1e054>
   33bfc:	ldr	r3, [sp, #24]
   33c00:	mov	r0, r7
   33c04:	str	r3, [r8]
   33c08:	add	sp, sp, #92	; 0x5c
   33c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c10:	mov	r3, #8
   33c14:	str	r3, [sp]
   33c18:	add	r1, sp, #36	; 0x24
   33c1c:	rsb	r2, r2, #1
   33c20:	mov	r0, fp
   33c24:	mvn	r3, #-2147483648	; 0x80000000
   33c28:	bl	35880 <__assert_fail@plt+0x2328c>
   33c2c:	mov	r4, r0
   33c30:	ldm	r5, {r0, r1}
   33c34:	str	r4, [r7]
   33c38:	stm	r4, {r0, r1}
   33c3c:	b	33b24 <__assert_fail@plt+0x21530>
   33c40:	bl	125a0 <abort@plt>
   33c44:	andeq	r4, r6, r8, lsl #26
   33c48:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   33c4c:	andeq	r4, r6, r8, lsr sp
   33c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c54:	mov	r5, r0
   33c58:	ldr	lr, [pc, #464]	; 33e30 <__assert_fail@plt+0x2183c>
   33c5c:	mov	r6, r1
   33c60:	mov	sl, r2
   33c64:	mov	fp, r3
   33c68:	ldm	lr!, {r0, r1, r2, r3}
   33c6c:	sub	sp, sp, #92	; 0x5c
   33c70:	add	ip, sp, #40	; 0x28
   33c74:	cmp	r6, #0
   33c78:	cmpne	r5, #0
   33c7c:	stmia	ip!, {r0, r1, r2, r3}
   33c80:	moveq	r4, #1
   33c84:	ldm	lr!, {r0, r1, r2, r3}
   33c88:	movne	r4, #0
   33c8c:	mov	r9, #10
   33c90:	str	r4, [sp, #28]
   33c94:	stmia	ip!, {r0, r1, r2, r3}
   33c98:	ldm	lr, {r0, r1, r2, r3}
   33c9c:	str	r9, [sp, #40]	; 0x28
   33ca0:	stm	ip, {r0, r1, r2, r3}
   33ca4:	beq	33e2c <__assert_fail@plt+0x21838>
   33ca8:	str	r5, [sp, #80]	; 0x50
   33cac:	str	r6, [sp, #84]	; 0x54
   33cb0:	bl	12348 <__errno_location@plt>
   33cb4:	ldr	r7, [pc, #376]	; 33e34 <__assert_fail@plt+0x21840>
   33cb8:	ldr	r2, [r7, #4]
   33cbc:	ldr	r4, [r7]
   33cc0:	cmp	r2, #0
   33cc4:	ldr	r3, [r0]
   33cc8:	mov	r8, r0
   33ccc:	str	r3, [sp, #24]
   33cd0:	movgt	r3, r9
   33cd4:	bgt	33d3c <__assert_fail@plt+0x21748>
   33cd8:	add	r5, r7, #8
   33cdc:	cmp	r4, r5
   33ce0:	str	r2, [sp, #36]	; 0x24
   33ce4:	beq	33dfc <__assert_fail@plt+0x21808>
   33ce8:	mov	r3, #8
   33cec:	mov	r0, r4
   33cf0:	str	r3, [sp]
   33cf4:	rsb	r2, r2, #1
   33cf8:	mvn	r3, #-2147483648	; 0x80000000
   33cfc:	add	r1, sp, #36	; 0x24
   33d00:	bl	35880 <__assert_fail@plt+0x2328c>
   33d04:	mov	r4, r0
   33d08:	str	r0, [r7]
   33d0c:	ldr	r0, [r7, #4]
   33d10:	ldr	r2, [sp, #36]	; 0x24
   33d14:	mov	r1, #0
   33d18:	sub	r2, r2, r0
   33d1c:	add	r0, r4, r0, lsl #3
   33d20:	lsl	r2, r2, #3
   33d24:	bl	12378 <memset@plt>
   33d28:	ldr	r3, [sp, #40]	; 0x28
   33d2c:	ldr	r5, [sp, #80]	; 0x50
   33d30:	ldr	r6, [sp, #84]	; 0x54
   33d34:	ldr	r2, [sp, #36]	; 0x24
   33d38:	str	r2, [r7, #4]
   33d3c:	ldr	r2, [sp, #44]	; 0x2c
   33d40:	ldr	r9, [r4]
   33d44:	ldr	r7, [r4, #4]
   33d48:	orr	r2, r2, #1
   33d4c:	str	r3, [sp]
   33d50:	add	r3, sp, #48	; 0x30
   33d54:	str	r2, [sp, #28]
   33d58:	str	r2, [sp, #4]
   33d5c:	str	r3, [sp, #8]
   33d60:	str	r6, [sp, #16]
   33d64:	str	r5, [sp, #12]
   33d68:	mov	r1, r9
   33d6c:	mov	r0, r7
   33d70:	mov	r3, fp
   33d74:	mov	r2, sl
   33d78:	bl	30648 <__assert_fail@plt+0x1e054>
   33d7c:	cmp	r9, r0
   33d80:	bhi	33de8 <__assert_fail@plt+0x217f4>
   33d84:	ldr	r3, [pc, #172]	; 33e38 <__assert_fail@plt+0x21844>
   33d88:	add	r5, r0, #1
   33d8c:	cmp	r7, r3
   33d90:	str	r5, [r4]
   33d94:	beq	33da0 <__assert_fail@plt+0x217ac>
   33d98:	mov	r0, r7
   33d9c:	bl	376d0 <__assert_fail@plt+0x250dc>
   33da0:	mov	r0, r5
   33da4:	bl	35664 <__assert_fail@plt+0x23070>
   33da8:	add	lr, sp, #48	; 0x30
   33dac:	ldr	ip, [sp, #84]	; 0x54
   33db0:	mov	r1, r5
   33db4:	ldr	r5, [sp, #28]
   33db8:	mov	r3, fp
   33dbc:	mov	r2, sl
   33dc0:	str	r0, [r4, #4]
   33dc4:	ldr	r4, [sp, #80]	; 0x50
   33dc8:	str	lr, [sp, #8]
   33dcc:	ldr	lr, [sp, #40]	; 0x28
   33dd0:	str	r5, [sp, #4]
   33dd4:	str	ip, [sp, #16]
   33dd8:	str	r4, [sp, #12]
   33ddc:	str	lr, [sp]
   33de0:	mov	r7, r0
   33de4:	bl	30648 <__assert_fail@plt+0x1e054>
   33de8:	ldr	r3, [sp, #24]
   33dec:	mov	r0, r7
   33df0:	str	r3, [r8]
   33df4:	add	sp, sp, #92	; 0x5c
   33df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33dfc:	mov	r3, #8
   33e00:	str	r3, [sp]
   33e04:	add	r1, sp, #36	; 0x24
   33e08:	rsb	r2, r2, #1
   33e0c:	ldr	r0, [sp, #28]
   33e10:	mvn	r3, #-2147483648	; 0x80000000
   33e14:	bl	35880 <__assert_fail@plt+0x2328c>
   33e18:	mov	r4, r0
   33e1c:	ldm	r5, {r0, r1}
   33e20:	str	r4, [r7]
   33e24:	stm	r4, {r0, r1}
   33e28:	b	33d0c <__assert_fail@plt+0x21718>
   33e2c:	bl	125a0 <abort@plt>
   33e30:	andeq	r4, r6, r8, lsl #26
   33e34:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   33e38:	andeq	r4, r6, r8, lsr sp
   33e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33e40:	sub	sp, sp, #52	; 0x34
   33e44:	mov	r5, r0
   33e48:	mov	sl, r1
   33e4c:	mov	fp, r2
   33e50:	bl	12348 <__errno_location@plt>
   33e54:	ldr	r4, [pc, #404]	; 33ff0 <__assert_fail@plt+0x219fc>
   33e58:	cmn	r5, #-2147483647	; 0x80000001
   33e5c:	ldr	r6, [r4]
   33e60:	mov	r8, r0
   33e64:	movne	r0, #0
   33e68:	moveq	r0, #1
   33e6c:	ldr	r3, [r8]
   33e70:	orrs	r0, r0, r5, lsr #31
   33e74:	str	r3, [sp, #28]
   33e78:	bne	33fec <__assert_fail@plt+0x219f8>
   33e7c:	ldr	r2, [r4, #4]
   33e80:	cmp	r5, r2
   33e84:	blt	33ee4 <__assert_fail@plt+0x218f0>
   33e88:	add	r7, r4, #8
   33e8c:	cmp	r6, r7
   33e90:	str	r2, [sp, #44]	; 0x2c
   33e94:	beq	33fbc <__assert_fail@plt+0x219c8>
   33e98:	mov	r3, #8
   33e9c:	sub	r2, r5, r2
   33ea0:	mov	r0, r6
   33ea4:	str	r3, [sp]
   33ea8:	add	r2, r2, #1
   33eac:	mvn	r3, #-2147483648	; 0x80000000
   33eb0:	add	r1, sp, #44	; 0x2c
   33eb4:	bl	35880 <__assert_fail@plt+0x2328c>
   33eb8:	mov	r6, r0
   33ebc:	str	r0, [r4]
   33ec0:	ldr	r0, [r4, #4]
   33ec4:	ldr	r2, [sp, #44]	; 0x2c
   33ec8:	mov	r1, #0
   33ecc:	sub	r2, r2, r0
   33ed0:	add	r0, r6, r0, lsl #3
   33ed4:	lsl	r2, r2, #3
   33ed8:	bl	12378 <memset@plt>
   33edc:	ldr	r3, [sp, #44]	; 0x2c
   33ee0:	str	r3, [r4, #4]
   33ee4:	ldr	r2, [r4, #56]	; 0x38
   33ee8:	add	r3, r6, r5, lsl #3
   33eec:	ldr	r1, [r4, #20]
   33ef0:	ldr	r7, [r3, #4]
   33ef4:	ldr	r9, [r6, r5, lsl #3]
   33ef8:	ldr	ip, [r4, #60]	; 0x3c
   33efc:	str	r3, [sp, #32]
   33f00:	ldr	r3, [r4, #16]
   33f04:	str	r2, [sp, #12]
   33f08:	ldr	r2, [pc, #228]	; 33ff4 <__assert_fail@plt+0x21a00>
   33f0c:	orr	r1, r1, #1
   33f10:	str	r1, [sp, #36]	; 0x24
   33f14:	str	r1, [sp, #4]
   33f18:	str	r2, [sp, #8]
   33f1c:	str	r3, [sp]
   33f20:	mov	r0, r7
   33f24:	mov	r1, r9
   33f28:	str	ip, [sp, #16]
   33f2c:	mov	r3, fp
   33f30:	mov	r2, sl
   33f34:	bl	30648 <__assert_fail@plt+0x1e054>
   33f38:	cmp	r9, r0
   33f3c:	bhi	33fa8 <__assert_fail@plt+0x219b4>
   33f40:	ldr	r3, [pc, #176]	; 33ff8 <__assert_fail@plt+0x21a04>
   33f44:	add	r9, r0, #1
   33f48:	cmp	r7, r3
   33f4c:	str	r9, [r6, r5, lsl #3]
   33f50:	beq	33f5c <__assert_fail@plt+0x21968>
   33f54:	mov	r0, r7
   33f58:	bl	376d0 <__assert_fail@plt+0x250dc>
   33f5c:	mov	r0, r9
   33f60:	bl	35664 <__assert_fail@plt+0x23070>
   33f64:	ldr	ip, [sp, #32]
   33f68:	ldr	lr, [r4, #60]	; 0x3c
   33f6c:	ldr	r5, [r4, #56]	; 0x38
   33f70:	mov	r3, fp
   33f74:	mov	r2, sl
   33f78:	mov	r1, r9
   33f7c:	str	r0, [ip, #4]
   33f80:	ldr	ip, [r4, #16]
   33f84:	ldr	r4, [pc, #104]	; 33ff4 <__assert_fail@plt+0x21a00>
   33f88:	str	lr, [sp, #16]
   33f8c:	str	r4, [sp, #8]
   33f90:	ldr	r4, [sp, #36]	; 0x24
   33f94:	str	r5, [sp, #12]
   33f98:	str	r4, [sp, #4]
   33f9c:	str	ip, [sp]
   33fa0:	mov	r7, r0
   33fa4:	bl	30648 <__assert_fail@plt+0x1e054>
   33fa8:	ldr	r3, [sp, #28]
   33fac:	mov	r0, r7
   33fb0:	str	r3, [r8]
   33fb4:	add	sp, sp, #52	; 0x34
   33fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33fbc:	mov	r3, #8
   33fc0:	sub	r2, r5, r2
   33fc4:	str	r3, [sp]
   33fc8:	add	r1, sp, #44	; 0x2c
   33fcc:	add	r2, r2, #1
   33fd0:	mvn	r3, #-2147483648	; 0x80000000
   33fd4:	bl	35880 <__assert_fail@plt+0x2328c>
   33fd8:	mov	r6, r0
   33fdc:	ldm	r7, {r0, r1}
   33fe0:	str	r6, [r4]
   33fe4:	stm	r6, {r0, r1}
   33fe8:	b	33ec0 <__assert_fail@plt+0x218cc>
   33fec:	bl	125a0 <abort@plt>
   33ff0:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   33ff4:	andeq	r4, r6, ip, lsl #10
   33ff8:	andeq	r4, r6, r8, lsr sp
   33ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34000:	sub	sp, sp, #44	; 0x2c
   34004:	mov	r9, r0
   34008:	mov	sl, r1
   3400c:	bl	12348 <__errno_location@plt>
   34010:	ldr	r4, [pc, #360]	; 34180 <__assert_fail@plt+0x21b8c>
   34014:	ldr	r2, [r4, #4]
   34018:	ldr	r5, [r4]
   3401c:	cmp	r2, #0
   34020:	ldr	r3, [r0]
   34024:	mov	r7, r0
   34028:	str	r3, [sp, #24]
   3402c:	bgt	34088 <__assert_fail@plt+0x21a94>
   34030:	add	r6, r4, #8
   34034:	cmp	r5, r6
   34038:	str	r2, [sp, #36]	; 0x24
   3403c:	beq	34150 <__assert_fail@plt+0x21b5c>
   34040:	mov	r3, #8
   34044:	mov	r0, r5
   34048:	str	r3, [sp]
   3404c:	rsb	r2, r2, #1
   34050:	mvn	r3, #-2147483648	; 0x80000000
   34054:	add	r1, sp, #36	; 0x24
   34058:	bl	35880 <__assert_fail@plt+0x2328c>
   3405c:	mov	r5, r0
   34060:	str	r0, [r4]
   34064:	ldr	r0, [r4, #4]
   34068:	ldr	r2, [sp, #36]	; 0x24
   3406c:	mov	r1, #0
   34070:	sub	r2, r2, r0
   34074:	add	r0, r5, r0, lsl #3
   34078:	lsl	r2, r2, #3
   3407c:	bl	12378 <memset@plt>
   34080:	ldr	r3, [sp, #36]	; 0x24
   34084:	str	r3, [r4, #4]
   34088:	ldr	r1, [r4, #20]
   3408c:	ldr	r8, [r5]
   34090:	ldr	r6, [r5, #4]
   34094:	ldr	r2, [r4, #56]	; 0x38
   34098:	ldr	r3, [r4, #16]
   3409c:	ldr	ip, [r4, #60]	; 0x3c
   340a0:	ldr	fp, [pc, #220]	; 34184 <__assert_fail@plt+0x21b90>
   340a4:	orr	r1, r1, #1
   340a8:	str	r1, [sp, #28]
   340ac:	str	r1, [sp, #4]
   340b0:	str	r2, [sp, #12]
   340b4:	str	r3, [sp]
   340b8:	mov	r1, r8
   340bc:	mov	r0, r6
   340c0:	str	ip, [sp, #16]
   340c4:	str	fp, [sp, #8]
   340c8:	mov	r3, sl
   340cc:	mov	r2, r9
   340d0:	bl	30648 <__assert_fail@plt+0x1e054>
   340d4:	cmp	r8, r0
   340d8:	bhi	3413c <__assert_fail@plt+0x21b48>
   340dc:	ldr	r3, [pc, #164]	; 34188 <__assert_fail@plt+0x21b94>
   340e0:	add	r8, r0, #1
   340e4:	cmp	r6, r3
   340e8:	str	r8, [r5]
   340ec:	beq	340f8 <__assert_fail@plt+0x21b04>
   340f0:	mov	r0, r6
   340f4:	bl	376d0 <__assert_fail@plt+0x250dc>
   340f8:	mov	r0, r8
   340fc:	bl	35664 <__assert_fail@plt+0x23070>
   34100:	ldr	lr, [r4, #60]	; 0x3c
   34104:	ldr	ip, [r4, #16]
   34108:	mov	r3, sl
   3410c:	mov	r2, r9
   34110:	mov	r1, r8
   34114:	str	r0, [r5, #4]
   34118:	ldr	r5, [r4, #56]	; 0x38
   3411c:	ldr	r4, [sp, #28]
   34120:	str	fp, [sp, #8]
   34124:	str	r4, [sp, #4]
   34128:	str	lr, [sp, #16]
   3412c:	str	r5, [sp, #12]
   34130:	str	ip, [sp]
   34134:	mov	r6, r0
   34138:	bl	30648 <__assert_fail@plt+0x1e054>
   3413c:	ldr	r3, [sp, #24]
   34140:	mov	r0, r6
   34144:	str	r3, [r7]
   34148:	add	sp, sp, #44	; 0x2c
   3414c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34150:	mov	r3, #8
   34154:	str	r3, [sp]
   34158:	add	r1, sp, #36	; 0x24
   3415c:	rsb	r2, r2, #1
   34160:	mvn	r3, #-2147483648	; 0x80000000
   34164:	mov	r0, #0
   34168:	bl	35880 <__assert_fail@plt+0x2328c>
   3416c:	mov	r5, r0
   34170:	ldm	r6, {r0, r1}
   34174:	str	r5, [r4]
   34178:	stm	r5, {r0, r1}
   3417c:	b	34064 <__assert_fail@plt+0x21a70>
   34180:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   34184:	andeq	r4, r6, ip, lsl #10
   34188:	andeq	r4, r6, r8, lsr sp
   3418c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34190:	sub	sp, sp, #44	; 0x2c
   34194:	mov	r5, r0
   34198:	mov	sl, r1
   3419c:	bl	12348 <__errno_location@plt>
   341a0:	ldr	r4, [pc, #396]	; 34334 <__assert_fail@plt+0x21d40>
   341a4:	cmn	r5, #-2147483647	; 0x80000001
   341a8:	ldr	r6, [r4]
   341ac:	mov	r8, r0
   341b0:	movne	r0, #0
   341b4:	moveq	r0, #1
   341b8:	ldr	r3, [r8]
   341bc:	orrs	r0, r0, r5, lsr #31
   341c0:	str	r3, [sp, #24]
   341c4:	bne	34330 <__assert_fail@plt+0x21d3c>
   341c8:	ldr	r2, [r4, #4]
   341cc:	cmp	r5, r2
   341d0:	blt	34230 <__assert_fail@plt+0x21c3c>
   341d4:	add	r7, r4, #8
   341d8:	cmp	r6, r7
   341dc:	str	r2, [sp, #36]	; 0x24
   341e0:	beq	34300 <__assert_fail@plt+0x21d0c>
   341e4:	mov	r3, #8
   341e8:	sub	r2, r5, r2
   341ec:	mov	r0, r6
   341f0:	str	r3, [sp]
   341f4:	add	r2, r2, #1
   341f8:	mvn	r3, #-2147483648	; 0x80000000
   341fc:	add	r1, sp, #36	; 0x24
   34200:	bl	35880 <__assert_fail@plt+0x2328c>
   34204:	mov	r6, r0
   34208:	str	r0, [r4]
   3420c:	ldr	r0, [r4, #4]
   34210:	ldr	r2, [sp, #36]	; 0x24
   34214:	mov	r1, #0
   34218:	sub	r2, r2, r0
   3421c:	add	r0, r6, r0, lsl #3
   34220:	lsl	r2, r2, #3
   34224:	bl	12378 <memset@plt>
   34228:	ldr	r3, [sp, #36]	; 0x24
   3422c:	str	r3, [r4, #4]
   34230:	ldr	r2, [r4, #56]	; 0x38
   34234:	add	fp, r6, r5, lsl #3
   34238:	ldr	r1, [r4, #20]
   3423c:	ldr	r9, [r6, r5, lsl #3]
   34240:	ldr	r7, [fp, #4]
   34244:	ldr	r3, [r4, #16]
   34248:	ldr	ip, [r4, #60]	; 0x3c
   3424c:	str	r2, [sp, #12]
   34250:	ldr	r2, [pc, #224]	; 34338 <__assert_fail@plt+0x21d44>
   34254:	orr	r1, r1, #1
   34258:	str	r1, [sp, #28]
   3425c:	str	r1, [sp, #4]
   34260:	str	r2, [sp, #8]
   34264:	str	r3, [sp]
   34268:	mov	r0, r7
   3426c:	mov	r1, r9
   34270:	str	ip, [sp, #16]
   34274:	mvn	r3, #0
   34278:	mov	r2, sl
   3427c:	bl	30648 <__assert_fail@plt+0x1e054>
   34280:	cmp	r9, r0
   34284:	bhi	342ec <__assert_fail@plt+0x21cf8>
   34288:	ldr	r3, [pc, #172]	; 3433c <__assert_fail@plt+0x21d48>
   3428c:	add	r9, r0, #1
   34290:	cmp	r7, r3
   34294:	str	r9, [r6, r5, lsl #3]
   34298:	beq	342a4 <__assert_fail@plt+0x21cb0>
   3429c:	mov	r0, r7
   342a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   342a4:	mov	r0, r9
   342a8:	bl	35664 <__assert_fail@plt+0x23070>
   342ac:	ldr	ip, [r4, #60]	; 0x3c
   342b0:	ldr	r3, [r4, #16]
   342b4:	ldr	lr, [r4, #56]	; 0x38
   342b8:	ldr	r4, [pc, #120]	; 34338 <__assert_fail@plt+0x21d44>
   342bc:	mov	r2, sl
   342c0:	mov	r1, r9
   342c4:	str	r0, [fp, #4]
   342c8:	str	r4, [sp, #8]
   342cc:	ldr	r4, [sp, #28]
   342d0:	str	r3, [sp]
   342d4:	str	r4, [sp, #4]
   342d8:	str	ip, [sp, #16]
   342dc:	str	lr, [sp, #12]
   342e0:	mvn	r3, #0
   342e4:	mov	r7, r0
   342e8:	bl	30648 <__assert_fail@plt+0x1e054>
   342ec:	ldr	r3, [sp, #24]
   342f0:	mov	r0, r7
   342f4:	str	r3, [r8]
   342f8:	add	sp, sp, #44	; 0x2c
   342fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34300:	mov	r3, #8
   34304:	sub	r2, r5, r2
   34308:	str	r3, [sp]
   3430c:	add	r1, sp, #36	; 0x24
   34310:	add	r2, r2, #1
   34314:	mvn	r3, #-2147483648	; 0x80000000
   34318:	bl	35880 <__assert_fail@plt+0x2328c>
   3431c:	mov	r6, r0
   34320:	ldm	r7, {r0, r1}
   34324:	str	r6, [r4]
   34328:	stm	r6, {r0, r1}
   3432c:	b	3420c <__assert_fail@plt+0x21c18>
   34330:	bl	125a0 <abort@plt>
   34334:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   34338:	andeq	r4, r6, ip, lsl #10
   3433c:	andeq	r4, r6, r8, lsr sp
   34340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34344:	sub	sp, sp, #44	; 0x2c
   34348:	mov	sl, r0
   3434c:	bl	12348 <__errno_location@plt>
   34350:	ldr	r4, [pc, #348]	; 344b4 <__assert_fail@plt+0x21ec0>
   34354:	ldr	r2, [r4, #4]
   34358:	ldr	r5, [r4]
   3435c:	cmp	r2, #0
   34360:	ldr	r3, [r0]
   34364:	mov	r8, r0
   34368:	str	r3, [sp, #28]
   3436c:	bgt	343c8 <__assert_fail@plt+0x21dd4>
   34370:	add	r6, r4, #8
   34374:	cmp	r5, r6
   34378:	str	r2, [sp, #36]	; 0x24
   3437c:	beq	34484 <__assert_fail@plt+0x21e90>
   34380:	mov	r3, #8
   34384:	mov	r0, r5
   34388:	str	r3, [sp]
   3438c:	rsb	r2, r2, #1
   34390:	mvn	r3, #-2147483648	; 0x80000000
   34394:	add	r1, sp, #36	; 0x24
   34398:	bl	35880 <__assert_fail@plt+0x2328c>
   3439c:	mov	r5, r0
   343a0:	str	r0, [r4]
   343a4:	ldr	r0, [r4, #4]
   343a8:	ldr	r2, [sp, #36]	; 0x24
   343ac:	mov	r1, #0
   343b0:	sub	r2, r2, r0
   343b4:	add	r0, r5, r0, lsl #3
   343b8:	lsl	r2, r2, #3
   343bc:	bl	12378 <memset@plt>
   343c0:	ldr	r3, [sp, #36]	; 0x24
   343c4:	str	r3, [r4, #4]
   343c8:	ldr	r7, [r4, #20]
   343cc:	ldr	r9, [r5]
   343d0:	ldr	r6, [r5, #4]
   343d4:	ldr	r2, [r4, #56]	; 0x38
   343d8:	ldr	r3, [r4, #16]
   343dc:	ldr	ip, [r4, #60]	; 0x3c
   343e0:	ldr	fp, [pc, #208]	; 344b8 <__assert_fail@plt+0x21ec4>
   343e4:	orr	r7, r7, #1
   343e8:	str	r2, [sp, #12]
   343ec:	str	r3, [sp]
   343f0:	str	r7, [sp, #4]
   343f4:	mov	r1, r9
   343f8:	mov	r0, r6
   343fc:	str	ip, [sp, #16]
   34400:	str	fp, [sp, #8]
   34404:	mvn	r3, #0
   34408:	mov	r2, sl
   3440c:	bl	30648 <__assert_fail@plt+0x1e054>
   34410:	cmp	r9, r0
   34414:	bhi	34470 <__assert_fail@plt+0x21e7c>
   34418:	ldr	r3, [pc, #156]	; 344bc <__assert_fail@plt+0x21ec8>
   3441c:	add	r9, r0, #1
   34420:	cmp	r6, r3
   34424:	str	r9, [r5]
   34428:	beq	34434 <__assert_fail@plt+0x21e40>
   3442c:	mov	r0, r6
   34430:	bl	376d0 <__assert_fail@plt+0x250dc>
   34434:	mov	r0, r9
   34438:	bl	35664 <__assert_fail@plt+0x23070>
   3443c:	ldr	ip, [r4, #60]	; 0x3c
   34440:	ldr	r3, [r4, #16]
   34444:	ldr	lr, [r4, #56]	; 0x38
   34448:	mov	r2, sl
   3444c:	mov	r1, r9
   34450:	str	r0, [r5, #4]
   34454:	str	r3, [sp]
   34458:	stmib	sp, {r7, fp}
   3445c:	str	ip, [sp, #16]
   34460:	str	lr, [sp, #12]
   34464:	mvn	r3, #0
   34468:	mov	r6, r0
   3446c:	bl	30648 <__assert_fail@plt+0x1e054>
   34470:	ldr	r3, [sp, #28]
   34474:	mov	r0, r6
   34478:	str	r3, [r8]
   3447c:	add	sp, sp, #44	; 0x2c
   34480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34484:	mov	r3, #8
   34488:	str	r3, [sp]
   3448c:	add	r1, sp, #36	; 0x24
   34490:	rsb	r2, r2, #1
   34494:	mvn	r3, #-2147483648	; 0x80000000
   34498:	mov	r0, #0
   3449c:	bl	35880 <__assert_fail@plt+0x2328c>
   344a0:	mov	r5, r0
   344a4:	ldm	r6, {r0, r1}
   344a8:	str	r5, [r4]
   344ac:	stm	r5, {r0, r1}
   344b0:	b	343a4 <__assert_fail@plt+0x21db0>
   344b4:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   344b8:	andeq	r4, r6, ip, lsl #10
   344bc:	andeq	r4, r6, r8, lsr sp
   344c0:	push	{r4, r5, r6, lr}
   344c4:	mov	r4, #0
   344c8:	mov	r5, r0
   344cc:	str	r4, [r0, #4]
   344d0:	mov	r1, #524288	; 0x80000
   344d4:	ldr	r0, [pc, #52]	; 34510 <__assert_fail@plt+0x21f1c>
   344d8:	bl	26e80 <__assert_fail@plt+0x1488c>
   344dc:	cmp	r0, r4
   344e0:	str	r0, [r5]
   344e4:	blt	344f0 <__assert_fail@plt+0x21efc>
   344e8:	mov	r0, r4
   344ec:	pop	{r4, r5, r6, pc}
   344f0:	mov	r1, r4
   344f4:	mov	r0, r4
   344f8:	bl	122c4 <getcwd@plt>
   344fc:	cmp	r0, r4
   34500:	str	r0, [r5, #4]
   34504:	movne	r0, #0
   34508:	mvneq	r0, #0
   3450c:	pop	{r4, r5, r6, pc}
   34510:	andeq	r1, r5, r4, asr #17
   34514:	ldr	r3, [r0]
   34518:	cmp	r3, #0
   3451c:	blt	34528 <__assert_fail@plt+0x21f34>
   34520:	mov	r0, r3
   34524:	b	124f8 <fchdir@plt>
   34528:	ldr	r0, [r0, #4]
   3452c:	b	37170 <__assert_fail@plt+0x24b7c>
   34530:	push	{r4, lr}
   34534:	mov	r4, r0
   34538:	ldr	r0, [r0]
   3453c:	cmp	r0, #0
   34540:	blt	34548 <__assert_fail@plt+0x21f54>
   34544:	bl	125ac <close@plt>
   34548:	ldr	r0, [r4, #4]
   3454c:	pop	{r4, lr}
   34550:	b	376d0 <__assert_fail@plt+0x250dc>
   34554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34558:	cmn	r0, #100	; 0x64
   3455c:	sub	sp, sp, #4032	; 0xfc0
   34560:	sub	sp, sp, #4
   34564:	mov	r5, r1
   34568:	mov	r8, r2
   3456c:	beq	34640 <__assert_fail@plt+0x2204c>
   34570:	ldrb	r3, [r1]
   34574:	cmp	r3, #47	; 0x2f
   34578:	beq	34640 <__assert_fail@plt+0x2204c>
   3457c:	mov	r4, r0
   34580:	mov	r2, r1
   34584:	mov	r0, sp
   34588:	mov	r1, r4
   3458c:	bl	4ca40 <__assert_fail@plt+0x3a44c>
   34590:	mov	r7, sp
   34594:	subs	r9, r0, #0
   34598:	beq	345ec <__assert_fail@plt+0x21ff8>
   3459c:	mov	r1, r8
   345a0:	bl	39eb4 <__assert_fail@plt+0x278c0>
   345a4:	mov	r6, r0
   345a8:	bl	12348 <__errno_location@plt>
   345ac:	cmp	r9, r7
   345b0:	mov	sl, r0
   345b4:	ldr	fp, [r0]
   345b8:	beq	345c4 <__assert_fail@plt+0x21fd0>
   345bc:	mov	r0, r9
   345c0:	bl	376d0 <__assert_fail@plt+0x250dc>
   345c4:	cmn	r6, #1
   345c8:	beq	34660 <__assert_fail@plt+0x2206c>
   345cc:	mov	r0, r6
   345d0:	add	sp, sp, #4032	; 0xfc0
   345d4:	add	sp, sp, #4
   345d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   345dc:	ldr	r2, [pc, #308]	; 34718 <__assert_fail@plt+0x22124>
   345e0:	mvn	r3, r2, lsr r3
   345e4:	tst	r3, #1
   345e8:	bne	3466c <__assert_fail@plt+0x22078>
   345ec:	mov	r0, r7
   345f0:	bl	344c0 <__assert_fail@plt+0x21ecc>
   345f4:	cmp	r0, #0
   345f8:	bne	3470c <__assert_fail@plt+0x22118>
   345fc:	cmp	r4, #0
   34600:	blt	34610 <__assert_fail@plt+0x2201c>
   34604:	ldr	r3, [sp]
   34608:	cmp	r4, r3
   3460c:	beq	346f0 <__assert_fail@plt+0x220fc>
   34610:	mov	r0, r4
   34614:	bl	124f8 <fchdir@plt>
   34618:	cmp	r0, #0
   3461c:	beq	34680 <__assert_fail@plt+0x2208c>
   34620:	bl	12348 <__errno_location@plt>
   34624:	mvn	r6, #0
   34628:	mov	r4, r0
   3462c:	mov	r0, r7
   34630:	ldr	r5, [r4]
   34634:	bl	34530 <__assert_fail@plt+0x21f3c>
   34638:	str	r5, [r4]
   3463c:	b	345cc <__assert_fail@plt+0x21fd8>
   34640:	mov	r1, r8
   34644:	mov	r0, r5
   34648:	bl	39eb4 <__assert_fail@plt+0x278c0>
   3464c:	mov	r6, r0
   34650:	mov	r0, r6
   34654:	add	sp, sp, #4032	; 0xfc0
   34658:	add	sp, sp, #4
   3465c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34660:	sub	r3, fp, #1
   34664:	cmp	r3, #19
   34668:	bls	345dc <__assert_fail@plt+0x21fe8>
   3466c:	cmp	fp, #38	; 0x26
   34670:	cmpne	fp, #95	; 0x5f
   34674:	strne	fp, [sl]
   34678:	bne	345cc <__assert_fail@plt+0x21fd8>
   3467c:	b	345ec <__assert_fail@plt+0x21ff8>
   34680:	mov	r1, r8
   34684:	mov	r0, r5
   34688:	bl	39eb4 <__assert_fail@plt+0x278c0>
   3468c:	cmn	r0, #1
   34690:	mov	r6, r0
   34694:	beq	346c0 <__assert_fail@plt+0x220cc>
   34698:	mov	r0, r7
   3469c:	bl	34514 <__assert_fail@plt+0x21f20>
   346a0:	cmp	r0, #0
   346a4:	bne	346b4 <__assert_fail@plt+0x220c0>
   346a8:	mov	r0, r7
   346ac:	bl	34530 <__assert_fail@plt+0x21f3c>
   346b0:	b	345cc <__assert_fail@plt+0x21fd8>
   346b4:	bl	12348 <__errno_location@plt>
   346b8:	ldr	r0, [r0]
   346bc:	bl	2bb20 <__assert_fail@plt+0x1952c>
   346c0:	bl	12348 <__errno_location@plt>
   346c4:	mov	r5, r0
   346c8:	mov	r0, r7
   346cc:	ldr	r4, [r5]
   346d0:	bl	34514 <__assert_fail@plt+0x21f20>
   346d4:	cmp	r0, #0
   346d8:	bne	346b4 <__assert_fail@plt+0x220c0>
   346dc:	mov	r0, r7
   346e0:	bl	34530 <__assert_fail@plt+0x21f3c>
   346e4:	cmp	r4, #0
   346e8:	strne	r4, [r5]
   346ec:	b	345cc <__assert_fail@plt+0x21fd8>
   346f0:	mov	r0, r7
   346f4:	bl	34530 <__assert_fail@plt+0x21f3c>
   346f8:	bl	12348 <__errno_location@plt>
   346fc:	mov	r3, #9
   34700:	mvn	r6, #0
   34704:	str	r3, [r0]
   34708:	b	345cc <__assert_fail@plt+0x21fd8>
   3470c:	bl	12348 <__errno_location@plt>
   34710:	ldr	r0, [r0]
   34714:	bl	2bae4 <__assert_fail@plt+0x194f0>
   34718:	andeq	r1, r8, r3
   3471c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34720:	cmn	r0, #100	; 0x64
   34724:	sub	sp, sp, #4032	; 0xfc0
   34728:	sub	sp, sp, #4
   3472c:	mov	r5, r1
   34730:	mov	r8, r2
   34734:	beq	34808 <__assert_fail@plt+0x22214>
   34738:	ldrb	r3, [r1]
   3473c:	cmp	r3, #47	; 0x2f
   34740:	beq	34808 <__assert_fail@plt+0x22214>
   34744:	mov	r4, r0
   34748:	mov	r2, r1
   3474c:	mov	r0, sp
   34750:	mov	r1, r4
   34754:	bl	4ca40 <__assert_fail@plt+0x3a44c>
   34758:	mov	r7, sp
   3475c:	subs	r9, r0, #0
   34760:	beq	347b4 <__assert_fail@plt+0x221c0>
   34764:	mov	r1, r8
   34768:	bl	39f28 <__assert_fail@plt+0x27934>
   3476c:	mov	r6, r0
   34770:	bl	12348 <__errno_location@plt>
   34774:	cmp	r9, r7
   34778:	mov	sl, r0
   3477c:	ldr	fp, [r0]
   34780:	beq	3478c <__assert_fail@plt+0x22198>
   34784:	mov	r0, r9
   34788:	bl	376d0 <__assert_fail@plt+0x250dc>
   3478c:	cmn	r6, #1
   34790:	beq	34828 <__assert_fail@plt+0x22234>
   34794:	mov	r0, r6
   34798:	add	sp, sp, #4032	; 0xfc0
   3479c:	add	sp, sp, #4
   347a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   347a4:	ldr	r2, [pc, #308]	; 348e0 <__assert_fail@plt+0x222ec>
   347a8:	mvn	r3, r2, lsr r3
   347ac:	tst	r3, #1
   347b0:	bne	34834 <__assert_fail@plt+0x22240>
   347b4:	mov	r0, r7
   347b8:	bl	344c0 <__assert_fail@plt+0x21ecc>
   347bc:	cmp	r0, #0
   347c0:	bne	348d4 <__assert_fail@plt+0x222e0>
   347c4:	cmp	r4, #0
   347c8:	blt	347d8 <__assert_fail@plt+0x221e4>
   347cc:	ldr	r3, [sp]
   347d0:	cmp	r4, r3
   347d4:	beq	348b8 <__assert_fail@plt+0x222c4>
   347d8:	mov	r0, r4
   347dc:	bl	124f8 <fchdir@plt>
   347e0:	cmp	r0, #0
   347e4:	beq	34848 <__assert_fail@plt+0x22254>
   347e8:	bl	12348 <__errno_location@plt>
   347ec:	mvn	r6, #0
   347f0:	mov	r4, r0
   347f4:	mov	r0, r7
   347f8:	ldr	r5, [r4]
   347fc:	bl	34530 <__assert_fail@plt+0x21f3c>
   34800:	str	r5, [r4]
   34804:	b	34794 <__assert_fail@plt+0x221a0>
   34808:	mov	r1, r8
   3480c:	mov	r0, r5
   34810:	bl	39f28 <__assert_fail@plt+0x27934>
   34814:	mov	r6, r0
   34818:	mov	r0, r6
   3481c:	add	sp, sp, #4032	; 0xfc0
   34820:	add	sp, sp, #4
   34824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34828:	sub	r3, fp, #1
   3482c:	cmp	r3, #19
   34830:	bls	347a4 <__assert_fail@plt+0x221b0>
   34834:	cmp	fp, #38	; 0x26
   34838:	cmpne	fp, #95	; 0x5f
   3483c:	strne	fp, [sl]
   34840:	bne	34794 <__assert_fail@plt+0x221a0>
   34844:	b	347b4 <__assert_fail@plt+0x221c0>
   34848:	mov	r1, r8
   3484c:	mov	r0, r5
   34850:	bl	39f28 <__assert_fail@plt+0x27934>
   34854:	cmn	r0, #1
   34858:	mov	r6, r0
   3485c:	beq	34888 <__assert_fail@plt+0x22294>
   34860:	mov	r0, r7
   34864:	bl	34514 <__assert_fail@plt+0x21f20>
   34868:	cmp	r0, #0
   3486c:	bne	3487c <__assert_fail@plt+0x22288>
   34870:	mov	r0, r7
   34874:	bl	34530 <__assert_fail@plt+0x21f3c>
   34878:	b	34794 <__assert_fail@plt+0x221a0>
   3487c:	bl	12348 <__errno_location@plt>
   34880:	ldr	r0, [r0]
   34884:	bl	2bb20 <__assert_fail@plt+0x1952c>
   34888:	bl	12348 <__errno_location@plt>
   3488c:	mov	r5, r0
   34890:	mov	r0, r7
   34894:	ldr	r4, [r5]
   34898:	bl	34514 <__assert_fail@plt+0x21f20>
   3489c:	cmp	r0, #0
   348a0:	bne	3487c <__assert_fail@plt+0x22288>
   348a4:	mov	r0, r7
   348a8:	bl	34530 <__assert_fail@plt+0x21f3c>
   348ac:	cmp	r4, #0
   348b0:	strne	r4, [r5]
   348b4:	b	34794 <__assert_fail@plt+0x221a0>
   348b8:	mov	r0, r7
   348bc:	bl	34530 <__assert_fail@plt+0x21f3c>
   348c0:	bl	12348 <__errno_location@plt>
   348c4:	mov	r3, #9
   348c8:	mvn	r6, #0
   348cc:	str	r3, [r0]
   348d0:	b	34794 <__assert_fail@plt+0x221a0>
   348d4:	bl	12348 <__errno_location@plt>
   348d8:	ldr	r0, [r0]
   348dc:	bl	2bae4 <__assert_fail@plt+0x194f0>
   348e0:	andeq	r1, r8, r3
   348e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   348e8:	cmn	r0, #100	; 0x64
   348ec:	sub	sp, sp, #4032	; 0xfc0
   348f0:	sub	sp, sp, #4
   348f4:	mov	r5, r1
   348f8:	mov	r8, r2
   348fc:	beq	349d0 <__assert_fail@plt+0x223dc>
   34900:	ldrb	r3, [r1]
   34904:	cmp	r3, #47	; 0x2f
   34908:	beq	349d0 <__assert_fail@plt+0x223dc>
   3490c:	mov	r4, r0
   34910:	mov	r2, r1
   34914:	mov	r0, sp
   34918:	mov	r1, r4
   3491c:	bl	4ca40 <__assert_fail@plt+0x3a44c>
   34920:	mov	r7, sp
   34924:	subs	r9, r0, #0
   34928:	beq	3497c <__assert_fail@plt+0x22388>
   3492c:	mov	r1, r8
   34930:	bl	123e4 <setfilecon@plt>
   34934:	mov	r6, r0
   34938:	bl	12348 <__errno_location@plt>
   3493c:	cmp	r9, r7
   34940:	mov	sl, r0
   34944:	ldr	fp, [r0]
   34948:	beq	34954 <__assert_fail@plt+0x22360>
   3494c:	mov	r0, r9
   34950:	bl	376d0 <__assert_fail@plt+0x250dc>
   34954:	cmn	r6, #1
   34958:	beq	349f0 <__assert_fail@plt+0x223fc>
   3495c:	mov	r0, r6
   34960:	add	sp, sp, #4032	; 0xfc0
   34964:	add	sp, sp, #4
   34968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3496c:	ldr	r2, [pc, #308]	; 34aa8 <__assert_fail@plt+0x224b4>
   34970:	mvn	r3, r2, lsr r3
   34974:	tst	r3, #1
   34978:	bne	349fc <__assert_fail@plt+0x22408>
   3497c:	mov	r0, r7
   34980:	bl	344c0 <__assert_fail@plt+0x21ecc>
   34984:	cmp	r0, #0
   34988:	bne	34a9c <__assert_fail@plt+0x224a8>
   3498c:	cmp	r4, #0
   34990:	blt	349a0 <__assert_fail@plt+0x223ac>
   34994:	ldr	r3, [sp]
   34998:	cmp	r4, r3
   3499c:	beq	34a80 <__assert_fail@plt+0x2248c>
   349a0:	mov	r0, r4
   349a4:	bl	124f8 <fchdir@plt>
   349a8:	cmp	r0, #0
   349ac:	beq	34a10 <__assert_fail@plt+0x2241c>
   349b0:	bl	12348 <__errno_location@plt>
   349b4:	mvn	r6, #0
   349b8:	mov	r4, r0
   349bc:	mov	r0, r7
   349c0:	ldr	r5, [r4]
   349c4:	bl	34530 <__assert_fail@plt+0x21f3c>
   349c8:	str	r5, [r4]
   349cc:	b	3495c <__assert_fail@plt+0x22368>
   349d0:	mov	r1, r8
   349d4:	mov	r0, r5
   349d8:	bl	123e4 <setfilecon@plt>
   349dc:	mov	r6, r0
   349e0:	mov	r0, r6
   349e4:	add	sp, sp, #4032	; 0xfc0
   349e8:	add	sp, sp, #4
   349ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   349f0:	sub	r3, fp, #1
   349f4:	cmp	r3, #19
   349f8:	bls	3496c <__assert_fail@plt+0x22378>
   349fc:	cmp	fp, #38	; 0x26
   34a00:	cmpne	fp, #95	; 0x5f
   34a04:	strne	fp, [sl]
   34a08:	bne	3495c <__assert_fail@plt+0x22368>
   34a0c:	b	3497c <__assert_fail@plt+0x22388>
   34a10:	mov	r1, r8
   34a14:	mov	r0, r5
   34a18:	bl	123e4 <setfilecon@plt>
   34a1c:	cmn	r0, #1
   34a20:	mov	r6, r0
   34a24:	beq	34a50 <__assert_fail@plt+0x2245c>
   34a28:	mov	r0, r7
   34a2c:	bl	34514 <__assert_fail@plt+0x21f20>
   34a30:	cmp	r0, #0
   34a34:	bne	34a44 <__assert_fail@plt+0x22450>
   34a38:	mov	r0, r7
   34a3c:	bl	34530 <__assert_fail@plt+0x21f3c>
   34a40:	b	3495c <__assert_fail@plt+0x22368>
   34a44:	bl	12348 <__errno_location@plt>
   34a48:	ldr	r0, [r0]
   34a4c:	bl	2bb20 <__assert_fail@plt+0x1952c>
   34a50:	bl	12348 <__errno_location@plt>
   34a54:	mov	r5, r0
   34a58:	mov	r0, r7
   34a5c:	ldr	r4, [r5]
   34a60:	bl	34514 <__assert_fail@plt+0x21f20>
   34a64:	cmp	r0, #0
   34a68:	bne	34a44 <__assert_fail@plt+0x22450>
   34a6c:	mov	r0, r7
   34a70:	bl	34530 <__assert_fail@plt+0x21f3c>
   34a74:	cmp	r4, #0
   34a78:	strne	r4, [r5]
   34a7c:	b	3495c <__assert_fail@plt+0x22368>
   34a80:	mov	r0, r7
   34a84:	bl	34530 <__assert_fail@plt+0x21f3c>
   34a88:	bl	12348 <__errno_location@plt>
   34a8c:	mov	r3, #9
   34a90:	mvn	r6, #0
   34a94:	str	r3, [r0]
   34a98:	b	3495c <__assert_fail@plt+0x22368>
   34a9c:	bl	12348 <__errno_location@plt>
   34aa0:	ldr	r0, [r0]
   34aa4:	bl	2bae4 <__assert_fail@plt+0x194f0>
   34aa8:	andeq	r1, r8, r3
   34aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34ab0:	cmn	r0, #100	; 0x64
   34ab4:	sub	sp, sp, #4032	; 0xfc0
   34ab8:	sub	sp, sp, #4
   34abc:	mov	r5, r1
   34ac0:	mov	r8, r2
   34ac4:	beq	34b98 <__assert_fail@plt+0x225a4>
   34ac8:	ldrb	r3, [r1]
   34acc:	cmp	r3, #47	; 0x2f
   34ad0:	beq	34b98 <__assert_fail@plt+0x225a4>
   34ad4:	mov	r4, r0
   34ad8:	mov	r2, r1
   34adc:	mov	r0, sp
   34ae0:	mov	r1, r4
   34ae4:	bl	4ca40 <__assert_fail@plt+0x3a44c>
   34ae8:	mov	r7, sp
   34aec:	subs	r9, r0, #0
   34af0:	beq	34b44 <__assert_fail@plt+0x22550>
   34af4:	mov	r1, r8
   34af8:	bl	11fac <lsetfilecon@plt>
   34afc:	mov	r6, r0
   34b00:	bl	12348 <__errno_location@plt>
   34b04:	cmp	r9, r7
   34b08:	mov	sl, r0
   34b0c:	ldr	fp, [r0]
   34b10:	beq	34b1c <__assert_fail@plt+0x22528>
   34b14:	mov	r0, r9
   34b18:	bl	376d0 <__assert_fail@plt+0x250dc>
   34b1c:	cmn	r6, #1
   34b20:	beq	34bb8 <__assert_fail@plt+0x225c4>
   34b24:	mov	r0, r6
   34b28:	add	sp, sp, #4032	; 0xfc0
   34b2c:	add	sp, sp, #4
   34b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34b34:	ldr	r2, [pc, #308]	; 34c70 <__assert_fail@plt+0x2267c>
   34b38:	mvn	r3, r2, lsr r3
   34b3c:	tst	r3, #1
   34b40:	bne	34bc4 <__assert_fail@plt+0x225d0>
   34b44:	mov	r0, r7
   34b48:	bl	344c0 <__assert_fail@plt+0x21ecc>
   34b4c:	cmp	r0, #0
   34b50:	bne	34c64 <__assert_fail@plt+0x22670>
   34b54:	cmp	r4, #0
   34b58:	blt	34b68 <__assert_fail@plt+0x22574>
   34b5c:	ldr	r3, [sp]
   34b60:	cmp	r4, r3
   34b64:	beq	34c48 <__assert_fail@plt+0x22654>
   34b68:	mov	r0, r4
   34b6c:	bl	124f8 <fchdir@plt>
   34b70:	cmp	r0, #0
   34b74:	beq	34bd8 <__assert_fail@plt+0x225e4>
   34b78:	bl	12348 <__errno_location@plt>
   34b7c:	mvn	r6, #0
   34b80:	mov	r4, r0
   34b84:	mov	r0, r7
   34b88:	ldr	r5, [r4]
   34b8c:	bl	34530 <__assert_fail@plt+0x21f3c>
   34b90:	str	r5, [r4]
   34b94:	b	34b24 <__assert_fail@plt+0x22530>
   34b98:	mov	r1, r8
   34b9c:	mov	r0, r5
   34ba0:	bl	11fac <lsetfilecon@plt>
   34ba4:	mov	r6, r0
   34ba8:	mov	r0, r6
   34bac:	add	sp, sp, #4032	; 0xfc0
   34bb0:	add	sp, sp, #4
   34bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34bb8:	sub	r3, fp, #1
   34bbc:	cmp	r3, #19
   34bc0:	bls	34b34 <__assert_fail@plt+0x22540>
   34bc4:	cmp	fp, #38	; 0x26
   34bc8:	cmpne	fp, #95	; 0x5f
   34bcc:	strne	fp, [sl]
   34bd0:	bne	34b24 <__assert_fail@plt+0x22530>
   34bd4:	b	34b44 <__assert_fail@plt+0x22550>
   34bd8:	mov	r1, r8
   34bdc:	mov	r0, r5
   34be0:	bl	11fac <lsetfilecon@plt>
   34be4:	cmn	r0, #1
   34be8:	mov	r6, r0
   34bec:	beq	34c18 <__assert_fail@plt+0x22624>
   34bf0:	mov	r0, r7
   34bf4:	bl	34514 <__assert_fail@plt+0x21f20>
   34bf8:	cmp	r0, #0
   34bfc:	bne	34c0c <__assert_fail@plt+0x22618>
   34c00:	mov	r0, r7
   34c04:	bl	34530 <__assert_fail@plt+0x21f3c>
   34c08:	b	34b24 <__assert_fail@plt+0x22530>
   34c0c:	bl	12348 <__errno_location@plt>
   34c10:	ldr	r0, [r0]
   34c14:	bl	2bb20 <__assert_fail@plt+0x1952c>
   34c18:	bl	12348 <__errno_location@plt>
   34c1c:	mov	r5, r0
   34c20:	mov	r0, r7
   34c24:	ldr	r4, [r5]
   34c28:	bl	34514 <__assert_fail@plt+0x21f20>
   34c2c:	cmp	r0, #0
   34c30:	bne	34c0c <__assert_fail@plt+0x22618>
   34c34:	mov	r0, r7
   34c38:	bl	34530 <__assert_fail@plt+0x21f3c>
   34c3c:	cmp	r4, #0
   34c40:	strne	r4, [r5]
   34c44:	b	34b24 <__assert_fail@plt+0x22530>
   34c48:	mov	r0, r7
   34c4c:	bl	34530 <__assert_fail@plt+0x21f3c>
   34c50:	bl	12348 <__errno_location@plt>
   34c54:	mov	r3, #9
   34c58:	mvn	r6, #0
   34c5c:	str	r3, [r0]
   34c60:	b	34b24 <__assert_fail@plt+0x22530>
   34c64:	bl	12348 <__errno_location@plt>
   34c68:	ldr	r0, [r0]
   34c6c:	bl	2bae4 <__assert_fail@plt+0x194f0>
   34c70:	andeq	r1, r8, r3
   34c74:	push	{r4, r5, r6, lr}
   34c78:	mov	r2, r1
   34c7c:	mov	r4, r1
   34c80:	mov	r1, #0
   34c84:	mov	r5, r0
   34c88:	bl	123d8 <memchr@plt>
   34c8c:	cmp	r0, #0
   34c90:	subne	r0, r0, r5
   34c94:	addne	r0, r0, #1
   34c98:	moveq	r0, r4
   34c9c:	pop	{r4, r5, r6, pc}
   34ca0:	mov	r2, #3
   34ca4:	mov	r1, #0
   34ca8:	b	3749c <__assert_fail@plt+0x24ea8>
   34cac:	cmp	r0, #2
   34cb0:	push	{r4, r5, r6, r7, r8, lr}
   34cb4:	mov	r4, r0
   34cb8:	bhi	34ce0 <__assert_fail@plt+0x226ec>
   34cbc:	bl	34ca0 <__assert_fail@plt+0x226ac>
   34cc0:	mov	r7, r0
   34cc4:	bl	12348 <__errno_location@plt>
   34cc8:	mov	r5, r0
   34ccc:	mov	r0, r4
   34cd0:	ldr	r6, [r5]
   34cd4:	mov	r4, r7
   34cd8:	bl	125ac <close@plt>
   34cdc:	str	r6, [r5]
   34ce0:	mov	r0, r4
   34ce4:	pop	{r4, r5, r6, r7, r8, pc}
   34ce8:	push	{r4, r5, r6, lr}
   34cec:	sub	sp, sp, #32
   34cf0:	cmp	r1, #0
   34cf4:	mov	r4, r0
   34cf8:	ldr	r5, [sp, #48]	; 0x30
   34cfc:	ldr	r6, [sp, #52]	; 0x34
   34d00:	beq	34fac <__assert_fail@plt+0x229b8>
   34d04:	str	r3, [sp]
   34d08:	mov	r3, r2
   34d0c:	mov	r2, r1
   34d10:	ldr	r1, [pc, #684]	; 34fc4 <__assert_fail@plt+0x229d0>
   34d14:	bl	1233c <fprintf@plt>
   34d18:	mov	r2, #5
   34d1c:	ldr	r1, [pc, #676]	; 34fc8 <__assert_fail@plt+0x229d4>
   34d20:	mov	r0, #0
   34d24:	bl	120b4 <dcgettext@plt>
   34d28:	ldr	r3, [pc, #668]	; 34fcc <__assert_fail@plt+0x229d8>
   34d2c:	ldr	r1, [pc, #668]	; 34fd0 <__assert_fail@plt+0x229dc>
   34d30:	mov	r2, r0
   34d34:	mov	r0, r4
   34d38:	bl	1233c <fprintf@plt>
   34d3c:	mov	r1, r4
   34d40:	mov	r0, #10
   34d44:	bl	1248c <fputc@plt>
   34d48:	mov	r2, #5
   34d4c:	ldr	r1, [pc, #640]	; 34fd4 <__assert_fail@plt+0x229e0>
   34d50:	mov	r0, #0
   34d54:	bl	120b4 <dcgettext@plt>
   34d58:	ldr	r2, [pc, #632]	; 34fd8 <__assert_fail@plt+0x229e4>
   34d5c:	mov	r1, r0
   34d60:	mov	r0, r4
   34d64:	bl	1233c <fprintf@plt>
   34d68:	mov	r1, r4
   34d6c:	mov	r0, #10
   34d70:	bl	1248c <fputc@plt>
   34d74:	cmp	r6, #9
   34d78:	ldrls	pc, [pc, r6, lsl #2]
   34d7c:	b	34fb8 <__assert_fail@plt+0x229c4>
   34d80:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   34d84:	strdeq	r4, [r3], -ip
   34d88:	andeq	r4, r3, r4, lsr #28
   34d8c:	andeq	r4, r3, ip, asr #28
   34d90:	andeq	r4, r3, ip, ror lr
   34d94:			; <UNDEFINED> instruction: 0x00034eb4
   34d98:	andeq	r4, r3, r4, ror #29
   34d9c:	andeq	r4, r3, ip, lsl pc
   34da0:	andeq	r4, r3, r0, ror #30
   34da4:	andeq	r4, r3, r8, lsr #27
   34da8:	ldr	r1, [pc, #556]	; 34fdc <__assert_fail@plt+0x229e8>
   34dac:	mov	r2, #5
   34db0:	mov	r0, #0
   34db4:	bl	120b4 <dcgettext@plt>
   34db8:	add	r1, r5, #24
   34dbc:	ldm	r5, {r2, r3}
   34dc0:	ldm	r1, {r1, ip, lr}
   34dc4:	str	lr, [sp, #24]
   34dc8:	ldr	r6, [r5, #20]
   34dcc:	str	ip, [sp, #20]
   34dd0:	ldr	lr, [r5, #16]
   34dd4:	str	r1, [sp, #16]
   34dd8:	ldr	r1, [r5, #8]
   34ddc:	ldr	ip, [r5, #12]
   34de0:	str	r6, [sp, #12]
   34de4:	stm	sp, {r1, ip, lr}
   34de8:	mov	r1, r0
   34dec:	mov	r0, r4
   34df0:	bl	1233c <fprintf@plt>
   34df4:	add	sp, sp, #32
   34df8:	pop	{r4, r5, r6, pc}
   34dfc:	mov	r2, #5
   34e00:	ldr	r1, [pc, #472]	; 34fe0 <__assert_fail@plt+0x229ec>
   34e04:	mov	r0, #0
   34e08:	bl	120b4 <dcgettext@plt>
   34e0c:	ldr	r2, [r5]
   34e10:	mov	r1, r0
   34e14:	mov	r0, r4
   34e18:	add	sp, sp, #32
   34e1c:	pop	{r4, r5, r6, lr}
   34e20:	b	1233c <fprintf@plt>
   34e24:	mov	r2, #5
   34e28:	ldr	r1, [pc, #436]	; 34fe4 <__assert_fail@plt+0x229f0>
   34e2c:	mov	r0, #0
   34e30:	bl	120b4 <dcgettext@plt>
   34e34:	ldm	r5, {r2, r3}
   34e38:	mov	r1, r0
   34e3c:	mov	r0, r4
   34e40:	add	sp, sp, #32
   34e44:	pop	{r4, r5, r6, lr}
   34e48:	b	1233c <fprintf@plt>
   34e4c:	mov	r2, #5
   34e50:	ldr	r1, [pc, #400]	; 34fe8 <__assert_fail@plt+0x229f4>
   34e54:	mov	r0, #0
   34e58:	bl	120b4 <dcgettext@plt>
   34e5c:	ldr	r1, [r5, #8]
   34e60:	ldm	r5, {r2, r3}
   34e64:	str	r1, [sp, #48]	; 0x30
   34e68:	mov	r1, r0
   34e6c:	mov	r0, r4
   34e70:	add	sp, sp, #32
   34e74:	pop	{r4, r5, r6, lr}
   34e78:	b	1233c <fprintf@plt>
   34e7c:	mov	r2, #5
   34e80:	ldr	r1, [pc, #356]	; 34fec <__assert_fail@plt+0x229f8>
   34e84:	mov	r0, #0
   34e88:	bl	120b4 <dcgettext@plt>
   34e8c:	ldr	r1, [r5, #8]
   34e90:	ldr	ip, [r5, #12]
   34e94:	ldm	r5, {r2, r3}
   34e98:	str	r1, [sp, #48]	; 0x30
   34e9c:	str	ip, [sp, #52]	; 0x34
   34ea0:	mov	r1, r0
   34ea4:	mov	r0, r4
   34ea8:	add	sp, sp, #32
   34eac:	pop	{r4, r5, r6, lr}
   34eb0:	b	1233c <fprintf@plt>
   34eb4:	mov	r2, #5
   34eb8:	ldr	r1, [pc, #304]	; 34ff0 <__assert_fail@plt+0x229fc>
   34ebc:	mov	r0, #0
   34ec0:	bl	120b4 <dcgettext@plt>
   34ec4:	add	r1, r5, #8
   34ec8:	ldm	r5, {r2, r3}
   34ecc:	ldm	r1, {r1, ip, lr}
   34ed0:	stm	sp, {r1, ip, lr}
   34ed4:	mov	r1, r0
   34ed8:	mov	r0, r4
   34edc:	bl	1233c <fprintf@plt>
   34ee0:	b	34df4 <__assert_fail@plt+0x22800>
   34ee4:	mov	r2, #5
   34ee8:	ldr	r1, [pc, #260]	; 34ff4 <__assert_fail@plt+0x22a00>
   34eec:	mov	r0, #0
   34ef0:	bl	120b4 <dcgettext@plt>
   34ef4:	add	r1, r5, #8
   34ef8:	ldr	r6, [r5, #20]
   34efc:	ldm	r1, {r1, ip, lr}
   34f00:	ldm	r5, {r2, r3}
   34f04:	str	r6, [sp, #12]
   34f08:	stm	sp, {r1, ip, lr}
   34f0c:	mov	r1, r0
   34f10:	mov	r0, r4
   34f14:	bl	1233c <fprintf@plt>
   34f18:	b	34df4 <__assert_fail@plt+0x22800>
   34f1c:	mov	r2, #5
   34f20:	ldr	r1, [pc, #208]	; 34ff8 <__assert_fail@plt+0x22a04>
   34f24:	mov	r0, #0
   34f28:	bl	120b4 <dcgettext@plt>
   34f2c:	ldr	r1, [r5, #24]
   34f30:	ldm	r5, {r2, r3}
   34f34:	ldr	r6, [r5, #20]
   34f38:	ldr	lr, [r5, #16]
   34f3c:	str	r1, [sp, #16]
   34f40:	ldr	r1, [r5, #8]
   34f44:	ldr	ip, [r5, #12]
   34f48:	str	r6, [sp, #12]
   34f4c:	stm	sp, {r1, ip, lr}
   34f50:	mov	r1, r0
   34f54:	mov	r0, r4
   34f58:	bl	1233c <fprintf@plt>
   34f5c:	b	34df4 <__assert_fail@plt+0x22800>
   34f60:	mov	r2, #5
   34f64:	ldr	r1, [pc, #144]	; 34ffc <__assert_fail@plt+0x22a08>
   34f68:	mov	r0, #0
   34f6c:	bl	120b4 <dcgettext@plt>
   34f70:	ldr	ip, [r5, #28]
   34f74:	ldr	r1, [r5, #24]
   34f78:	ldm	r5, {r2, r3}
   34f7c:	ldr	r6, [r5, #20]
   34f80:	str	ip, [sp, #20]
   34f84:	ldr	lr, [r5, #16]
   34f88:	str	r1, [sp, #16]
   34f8c:	ldr	r1, [r5, #8]
   34f90:	ldr	ip, [r5, #12]
   34f94:	str	r6, [sp, #12]
   34f98:	stm	sp, {r1, ip, lr}
   34f9c:	mov	r1, r0
   34fa0:	mov	r0, r4
   34fa4:	bl	1233c <fprintf@plt>
   34fa8:	b	34df4 <__assert_fail@plt+0x22800>
   34fac:	ldr	r1, [pc, #76]	; 35000 <__assert_fail@plt+0x22a0c>
   34fb0:	bl	1233c <fprintf@plt>
   34fb4:	b	34d18 <__assert_fail@plt+0x22724>
   34fb8:	mov	r2, #5
   34fbc:	ldr	r1, [pc, #64]	; 35004 <__assert_fail@plt+0x22a10>
   34fc0:	b	34db0 <__assert_fail@plt+0x227bc>
   34fc4:	andeq	r3, r5, ip, ror #10
   34fc8:	andeq	r3, r5, r0, lsl #11
   34fcc:	andeq	r0, r0, r6, ror #15
   34fd0:	andeq	r3, r5, r0, asr #16
   34fd4:	andeq	r3, r5, r4, lsl #11
   34fd8:	andeq	r3, r5, r0, lsr r6
   34fdc:	andeq	r3, r5, r0, ror #14
   34fe0:	andeq	r3, r5, r4, asr r6
   34fe4:	andeq	r3, r5, r4, ror #12
   34fe8:	andeq	r3, r5, ip, ror r6
   34fec:	muleq	r5, r8, r6
   34ff0:			; <UNDEFINED> instruction: 0x000536b8
   34ff4:	ldrdeq	r3, [r5], -ip
   34ff8:	andeq	r3, r5, r4, lsl #14
   34ffc:	andeq	r3, r5, r0, lsr r7
   35000:	andeq	r3, r5, r8, ror r5
   35004:	muleq	r5, r4, r7
   35008:	push	{r4, r5, lr}
   3500c:	sub	sp, sp, #12
   35010:	ldr	r5, [sp, #24]
   35014:	ldr	ip, [r5]
   35018:	cmp	ip, #0
   3501c:	beq	35038 <__assert_fail@plt+0x22a44>
   35020:	mov	lr, r5
   35024:	mov	ip, #0
   35028:	ldr	r4, [lr, #4]!
   3502c:	add	ip, ip, #1
   35030:	cmp	r4, #0
   35034:	bne	35028 <__assert_fail@plt+0x22a34>
   35038:	stm	sp, {r5, ip}
   3503c:	bl	34ce8 <__assert_fail@plt+0x226f4>
   35040:	add	sp, sp, #12
   35044:	pop	{r4, r5, pc}
   35048:	push	{r4, r5, lr}
   3504c:	sub	sp, sp, #76	; 0x4c
   35050:	mov	r5, r0
   35054:	ldr	ip, [sp, #88]	; 0x58
   35058:	ldr	r0, [ip]
   3505c:	cmp	r0, #0
   35060:	str	r0, [sp, #32]
   35064:	beq	353e0 <__assert_fail@plt+0x22dec>
   35068:	ldr	r0, [ip, #4]
   3506c:	cmp	r0, #0
   35070:	str	r0, [sp, #36]	; 0x24
   35074:	beq	353e8 <__assert_fail@plt+0x22df4>
   35078:	ldr	r0, [ip, #8]
   3507c:	cmp	r0, #0
   35080:	str	r0, [sp, #40]	; 0x28
   35084:	beq	353f0 <__assert_fail@plt+0x22dfc>
   35088:	ldr	r0, [ip, #12]
   3508c:	cmp	r0, #0
   35090:	str	r0, [sp, #44]	; 0x2c
   35094:	beq	353f8 <__assert_fail@plt+0x22e04>
   35098:	ldr	r0, [ip, #16]
   3509c:	cmp	r0, #0
   350a0:	str	r0, [sp, #48]	; 0x30
   350a4:	beq	35400 <__assert_fail@plt+0x22e0c>
   350a8:	ldr	r0, [ip, #20]
   350ac:	cmp	r0, #0
   350b0:	str	r0, [sp, #52]	; 0x34
   350b4:	beq	35408 <__assert_fail@plt+0x22e14>
   350b8:	ldr	r0, [ip, #24]
   350bc:	cmp	r0, #0
   350c0:	str	r0, [sp, #56]	; 0x38
   350c4:	beq	35410 <__assert_fail@plt+0x22e1c>
   350c8:	ldr	r0, [ip, #28]
   350cc:	cmp	r0, #0
   350d0:	str	r0, [sp, #60]	; 0x3c
   350d4:	beq	35418 <__assert_fail@plt+0x22e24>
   350d8:	ldr	r0, [ip, #32]
   350dc:	cmp	r0, #0
   350e0:	str	r0, [sp, #64]	; 0x40
   350e4:	beq	35420 <__assert_fail@plt+0x22e2c>
   350e8:	ldr	r0, [ip, #36]	; 0x24
   350ec:	cmp	r0, #0
   350f0:	movne	r4, #10
   350f4:	moveq	r4, #9
   350f8:	cmp	r1, #0
   350fc:	beq	353c4 <__assert_fail@plt+0x22dd0>
   35100:	str	r3, [sp]
   35104:	mov	r0, r5
   35108:	mov	r3, r2
   3510c:	mov	r2, r1
   35110:	ldr	r1, [pc, #784]	; 35428 <__assert_fail@plt+0x22e34>
   35114:	bl	1233c <fprintf@plt>
   35118:	mov	r2, #5
   3511c:	ldr	r1, [pc, #776]	; 3542c <__assert_fail@plt+0x22e38>
   35120:	mov	r0, #0
   35124:	bl	120b4 <dcgettext@plt>
   35128:	ldr	r3, [pc, #768]	; 35430 <__assert_fail@plt+0x22e3c>
   3512c:	ldr	r1, [pc, #768]	; 35434 <__assert_fail@plt+0x22e40>
   35130:	mov	r2, r0
   35134:	mov	r0, r5
   35138:	bl	1233c <fprintf@plt>
   3513c:	mov	r1, r5
   35140:	mov	r0, #10
   35144:	bl	1248c <fputc@plt>
   35148:	mov	r2, #5
   3514c:	ldr	r1, [pc, #740]	; 35438 <__assert_fail@plt+0x22e44>
   35150:	mov	r0, #0
   35154:	bl	120b4 <dcgettext@plt>
   35158:	ldr	r2, [pc, #732]	; 3543c <__assert_fail@plt+0x22e48>
   3515c:	mov	r1, r0
   35160:	mov	r0, r5
   35164:	bl	1233c <fprintf@plt>
   35168:	mov	r1, r5
   3516c:	mov	r0, #10
   35170:	bl	1248c <fputc@plt>
   35174:	cmp	r4, #9
   35178:	ldrls	pc, [pc, r4, lsl #2]
   3517c:	b	353d4 <__assert_fail@plt+0x22de0>
   35180:	strdeq	r5, [r3], -r8
   35184:	andeq	r5, r3, r0, lsl #4
   35188:	andeq	r5, r3, r8, lsr #4
   3518c:	andeq	r5, r3, r4, asr r2
   35190:	andeq	r5, r3, r8, lsl #5
   35194:			; <UNDEFINED> instruction: 0x000352bc
   35198:	strdeq	r5, [r3], -r0
   3519c:	andeq	r5, r3, ip, lsr #6
   351a0:	andeq	r5, r3, r4, ror r3
   351a4:	andeq	r5, r3, r8, lsr #3
   351a8:	ldr	r1, [pc, #656]	; 35440 <__assert_fail@plt+0x22e4c>
   351ac:	mov	r2, #5
   351b0:	mov	r0, #0
   351b4:	bl	120b4 <dcgettext@plt>
   351b8:	add	r1, sp, #56	; 0x38
   351bc:	ldr	r4, [sp, #52]	; 0x34
   351c0:	ldm	r1, {r1, ip, lr}
   351c4:	ldr	r3, [sp, #36]	; 0x24
   351c8:	ldr	r2, [sp, #32]
   351cc:	str	lr, [sp, #24]
   351d0:	str	ip, [sp, #20]
   351d4:	ldr	lr, [sp, #48]	; 0x30
   351d8:	ldr	ip, [sp, #44]	; 0x2c
   351dc:	str	r1, [sp, #16]
   351e0:	ldr	r1, [sp, #40]	; 0x28
   351e4:	str	r4, [sp, #12]
   351e8:	stm	sp, {r1, ip, lr}
   351ec:	mov	r1, r0
   351f0:	mov	r0, r5
   351f4:	bl	1233c <fprintf@plt>
   351f8:	add	sp, sp, #76	; 0x4c
   351fc:	pop	{r4, r5, pc}
   35200:	mov	r2, #5
   35204:	ldr	r1, [pc, #568]	; 35444 <__assert_fail@plt+0x22e50>
   35208:	mov	r0, #0
   3520c:	bl	120b4 <dcgettext@plt>
   35210:	ldr	r2, [sp, #32]
   35214:	mov	r1, r0
   35218:	mov	r0, r5
   3521c:	add	sp, sp, #76	; 0x4c
   35220:	pop	{r4, r5, lr}
   35224:	b	1233c <fprintf@plt>
   35228:	mov	r2, #5
   3522c:	ldr	r1, [pc, #532]	; 35448 <__assert_fail@plt+0x22e54>
   35230:	mov	r0, #0
   35234:	bl	120b4 <dcgettext@plt>
   35238:	ldr	r3, [sp, #36]	; 0x24
   3523c:	ldr	r2, [sp, #32]
   35240:	mov	r1, r0
   35244:	mov	r0, r5
   35248:	add	sp, sp, #76	; 0x4c
   3524c:	pop	{r4, r5, lr}
   35250:	b	1233c <fprintf@plt>
   35254:	mov	r2, #5
   35258:	ldr	r1, [pc, #492]	; 3544c <__assert_fail@plt+0x22e58>
   3525c:	mov	r0, #0
   35260:	bl	120b4 <dcgettext@plt>
   35264:	ldr	r1, [sp, #40]	; 0x28
   35268:	ldr	r3, [sp, #36]	; 0x24
   3526c:	str	r1, [sp, #88]	; 0x58
   35270:	ldr	r2, [sp, #32]
   35274:	mov	r1, r0
   35278:	mov	r0, r5
   3527c:	add	sp, sp, #76	; 0x4c
   35280:	pop	{r4, r5, lr}
   35284:	b	1233c <fprintf@plt>
   35288:	mov	r2, #5
   3528c:	ldr	r1, [pc, #444]	; 35450 <__assert_fail@plt+0x22e5c>
   35290:	mov	r0, #0
   35294:	bl	120b4 <dcgettext@plt>
   35298:	ldr	r1, [sp, #40]	; 0x28
   3529c:	ldr	ip, [sp, #44]	; 0x2c
   352a0:	ldr	r3, [sp, #36]	; 0x24
   352a4:	ldr	r2, [sp, #32]
   352a8:	stm	sp, {r1, ip}
   352ac:	mov	r1, r0
   352b0:	mov	r0, r5
   352b4:	bl	1233c <fprintf@plt>
   352b8:	b	351f8 <__assert_fail@plt+0x22c04>
   352bc:	mov	r2, #5
   352c0:	ldr	r1, [pc, #396]	; 35454 <__assert_fail@plt+0x22e60>
   352c4:	mov	r0, #0
   352c8:	bl	120b4 <dcgettext@plt>
   352cc:	add	r1, sp, #40	; 0x28
   352d0:	ldr	r3, [sp, #36]	; 0x24
   352d4:	ldm	r1, {r1, ip, lr}
   352d8:	ldr	r2, [sp, #32]
   352dc:	stm	sp, {r1, ip, lr}
   352e0:	mov	r1, r0
   352e4:	mov	r0, r5
   352e8:	bl	1233c <fprintf@plt>
   352ec:	b	351f8 <__assert_fail@plt+0x22c04>
   352f0:	mov	r2, #5
   352f4:	ldr	r1, [pc, #348]	; 35458 <__assert_fail@plt+0x22e64>
   352f8:	mov	r0, #0
   352fc:	bl	120b4 <dcgettext@plt>
   35300:	add	r1, sp, #40	; 0x28
   35304:	ldr	r4, [sp, #52]	; 0x34
   35308:	ldm	r1, {r1, ip, lr}
   3530c:	ldr	r3, [sp, #36]	; 0x24
   35310:	ldr	r2, [sp, #32]
   35314:	stm	sp, {r1, ip, lr}
   35318:	str	r4, [sp, #12]
   3531c:	mov	r1, r0
   35320:	mov	r0, r5
   35324:	bl	1233c <fprintf@plt>
   35328:	b	351f8 <__assert_fail@plt+0x22c04>
   3532c:	mov	r2, #5
   35330:	ldr	r1, [pc, #292]	; 3545c <__assert_fail@plt+0x22e68>
   35334:	mov	r0, #0
   35338:	bl	120b4 <dcgettext@plt>
   3533c:	ldr	r1, [sp, #56]	; 0x38
   35340:	ldr	lr, [sp, #48]	; 0x30
   35344:	ldr	ip, [sp, #44]	; 0x2c
   35348:	str	r1, [sp, #16]
   3534c:	ldr	r1, [sp, #40]	; 0x28
   35350:	ldr	r4, [sp, #52]	; 0x34
   35354:	ldr	r3, [sp, #36]	; 0x24
   35358:	stm	sp, {r1, ip, lr}
   3535c:	ldr	r2, [sp, #32]
   35360:	str	r4, [sp, #12]
   35364:	mov	r1, r0
   35368:	mov	r0, r5
   3536c:	bl	1233c <fprintf@plt>
   35370:	b	351f8 <__assert_fail@plt+0x22c04>
   35374:	mov	r2, #5
   35378:	ldr	r1, [pc, #224]	; 35460 <__assert_fail@plt+0x22e6c>
   3537c:	mov	r0, #0
   35380:	bl	120b4 <dcgettext@plt>
   35384:	ldr	ip, [sp, #60]	; 0x3c
   35388:	ldr	r1, [sp, #56]	; 0x38
   3538c:	ldr	lr, [sp, #48]	; 0x30
   35390:	str	ip, [sp, #20]
   35394:	str	r1, [sp, #16]
   35398:	ldr	ip, [sp, #44]	; 0x2c
   3539c:	ldr	r1, [sp, #40]	; 0x28
   353a0:	ldr	r4, [sp, #52]	; 0x34
   353a4:	ldr	r3, [sp, #36]	; 0x24
   353a8:	stm	sp, {r1, ip, lr}
   353ac:	ldr	r2, [sp, #32]
   353b0:	str	r4, [sp, #12]
   353b4:	mov	r1, r0
   353b8:	mov	r0, r5
   353bc:	bl	1233c <fprintf@plt>
   353c0:	b	351f8 <__assert_fail@plt+0x22c04>
   353c4:	ldr	r1, [pc, #152]	; 35464 <__assert_fail@plt+0x22e70>
   353c8:	mov	r0, r5
   353cc:	bl	1233c <fprintf@plt>
   353d0:	b	35118 <__assert_fail@plt+0x22b24>
   353d4:	mov	r2, #5
   353d8:	ldr	r1, [pc, #136]	; 35468 <__assert_fail@plt+0x22e74>
   353dc:	b	351b0 <__assert_fail@plt+0x22bbc>
   353e0:	mov	r4, r0
   353e4:	b	350f8 <__assert_fail@plt+0x22b04>
   353e8:	mov	r4, #1
   353ec:	b	350f8 <__assert_fail@plt+0x22b04>
   353f0:	mov	r4, #2
   353f4:	b	350f8 <__assert_fail@plt+0x22b04>
   353f8:	mov	r4, #3
   353fc:	b	350f8 <__assert_fail@plt+0x22b04>
   35400:	mov	r4, #4
   35404:	b	350f8 <__assert_fail@plt+0x22b04>
   35408:	mov	r4, #5
   3540c:	b	350f8 <__assert_fail@plt+0x22b04>
   35410:	mov	r4, #6
   35414:	b	350f8 <__assert_fail@plt+0x22b04>
   35418:	mov	r4, #7
   3541c:	b	350f8 <__assert_fail@plt+0x22b04>
   35420:	mov	r4, #8
   35424:	b	350f8 <__assert_fail@plt+0x22b04>
   35428:	andeq	r3, r5, ip, ror #10
   3542c:	andeq	r3, r5, r0, lsl #11
   35430:	andeq	r0, r0, r6, ror #15
   35434:	andeq	r3, r5, r0, asr #16
   35438:	andeq	r3, r5, r4, lsl #11
   3543c:	andeq	r3, r5, r0, lsr r6
   35440:	andeq	r3, r5, r0, ror #14
   35444:	andeq	r3, r5, r4, asr r6
   35448:	andeq	r3, r5, r4, ror #12
   3544c:	andeq	r3, r5, ip, ror r6
   35450:	muleq	r5, r8, r6
   35454:			; <UNDEFINED> instruction: 0x000536b8
   35458:	ldrdeq	r3, [r5], -ip
   3545c:	andeq	r3, r5, r4, lsl #14
   35460:	andeq	r3, r5, r0, lsr r7
   35464:	andeq	r3, r5, r8, ror r5
   35468:	muleq	r5, r4, r7
   3546c:	push	{r3}		; (str r3, [sp, #-4]!)
   35470:	push	{lr}		; (str lr, [sp, #-4]!)
   35474:	sub	sp, sp, #56	; 0x38
   35478:	add	r3, sp, #64	; 0x40
   3547c:	ldr	ip, [sp, #64]	; 0x40
   35480:	str	r3, [sp, #12]
   35484:	cmp	ip, #0
   35488:	str	ip, [sp, #16]
   3548c:	beq	35524 <__assert_fail@plt+0x22f30>
   35490:	ldr	ip, [sp, #68]	; 0x44
   35494:	cmp	ip, #0
   35498:	str	ip, [sp, #20]
   3549c:	beq	35544 <__assert_fail@plt+0x22f50>
   354a0:	ldr	ip, [sp, #72]	; 0x48
   354a4:	cmp	ip, #0
   354a8:	str	ip, [sp, #24]
   354ac:	beq	3554c <__assert_fail@plt+0x22f58>
   354b0:	ldr	ip, [sp, #76]	; 0x4c
   354b4:	cmp	ip, #0
   354b8:	str	ip, [sp, #28]
   354bc:	beq	35554 <__assert_fail@plt+0x22f60>
   354c0:	ldr	ip, [sp, #80]	; 0x50
   354c4:	cmp	ip, #0
   354c8:	str	ip, [sp, #32]
   354cc:	beq	3555c <__assert_fail@plt+0x22f68>
   354d0:	ldr	ip, [sp, #84]	; 0x54
   354d4:	cmp	ip, #0
   354d8:	str	ip, [sp, #36]	; 0x24
   354dc:	beq	35564 <__assert_fail@plt+0x22f70>
   354e0:	ldr	ip, [sp, #88]	; 0x58
   354e4:	cmp	ip, #0
   354e8:	str	ip, [sp, #40]	; 0x28
   354ec:	beq	3556c <__assert_fail@plt+0x22f78>
   354f0:	ldr	ip, [sp, #92]	; 0x5c
   354f4:	cmp	ip, #0
   354f8:	str	ip, [sp, #44]	; 0x2c
   354fc:	beq	35574 <__assert_fail@plt+0x22f80>
   35500:	ldr	ip, [sp, #96]	; 0x60
   35504:	cmp	ip, #0
   35508:	str	ip, [sp, #48]	; 0x30
   3550c:	beq	3557c <__assert_fail@plt+0x22f88>
   35510:	ldr	ip, [sp, #100]	; 0x64
   35514:	cmp	ip, #0
   35518:	str	ip, [sp, #52]	; 0x34
   3551c:	movne	ip, #10
   35520:	moveq	ip, #9
   35524:	add	r3, sp, #16
   35528:	stm	sp, {r3, ip}
   3552c:	ldr	r3, [sp, #60]	; 0x3c
   35530:	bl	34ce8 <__assert_fail@plt+0x226f4>
   35534:	add	sp, sp, #56	; 0x38
   35538:	pop	{lr}		; (ldr lr, [sp], #4)
   3553c:	add	sp, sp, #4
   35540:	bx	lr
   35544:	mov	ip, #1
   35548:	b	35524 <__assert_fail@plt+0x22f30>
   3554c:	mov	ip, #2
   35550:	b	35524 <__assert_fail@plt+0x22f30>
   35554:	mov	ip, #3
   35558:	b	35524 <__assert_fail@plt+0x22f30>
   3555c:	mov	ip, #4
   35560:	b	35524 <__assert_fail@plt+0x22f30>
   35564:	mov	ip, #5
   35568:	b	35524 <__assert_fail@plt+0x22f30>
   3556c:	mov	ip, #6
   35570:	b	35524 <__assert_fail@plt+0x22f30>
   35574:	mov	ip, #7
   35578:	b	35524 <__assert_fail@plt+0x22f30>
   3557c:	mov	ip, #8
   35580:	b	35524 <__assert_fail@plt+0x22f30>
   35584:	ldr	r3, [pc, #92]	; 355e8 <__assert_fail@plt+0x22ff4>
   35588:	push	{r4, lr}
   3558c:	mov	r0, #10
   35590:	ldr	r1, [r3]
   35594:	bl	1248c <fputc@plt>
   35598:	mov	r2, #5
   3559c:	ldr	r1, [pc, #72]	; 355ec <__assert_fail@plt+0x22ff8>
   355a0:	mov	r0, #0
   355a4:	bl	120b4 <dcgettext@plt>
   355a8:	ldr	r1, [pc, #64]	; 355f0 <__assert_fail@plt+0x22ffc>
   355ac:	bl	11f64 <printf@plt>
   355b0:	mov	r2, #5
   355b4:	ldr	r1, [pc, #56]	; 355f4 <__assert_fail@plt+0x23000>
   355b8:	mov	r0, #0
   355bc:	bl	120b4 <dcgettext@plt>
   355c0:	ldr	r2, [pc, #48]	; 355f8 <__assert_fail@plt+0x23004>
   355c4:	ldr	r1, [pc, #48]	; 355fc <__assert_fail@plt+0x23008>
   355c8:	bl	11f64 <printf@plt>
   355cc:	ldr	r1, [pc, #44]	; 35600 <__assert_fail@plt+0x2300c>
   355d0:	mov	r2, #5
   355d4:	mov	r0, #0
   355d8:	bl	120b4 <dcgettext@plt>
   355dc:	ldr	r1, [pc, #32]	; 35604 <__assert_fail@plt+0x23010>
   355e0:	pop	{r4, lr}
   355e4:	b	11f64 <printf@plt>
   355e8:	andeq	r4, r6, r4, asr r5
   355ec:	ldrdeq	r3, [r5], -r0
   355f0:	andeq	r2, r5, ip, ror #8
   355f4:	andeq	r3, r5, r4, ror #15
   355f8:	andeq	r2, r5, r4, asr #8
   355fc:	andeq	r2, r5, r4, lsr #2
   35600:	strdeq	r3, [r5], -r8
   35604:	andeq	r3, r5, r0, lsr #16
   35608:	push	{r4, r5, r6, lr}
   3560c:	mov	r6, r0
   35610:	mov	r5, r1
   35614:	mov	r4, r2
   35618:	bl	3ab28 <__assert_fail@plt+0x28534>
   3561c:	cmp	r0, #0
   35620:	popne	{r4, r5, r6, pc}
   35624:	cmp	r6, #0
   35628:	beq	35638 <__assert_fail@plt+0x23044>
   3562c:	cmp	r5, #0
   35630:	cmpne	r4, #0
   35634:	popeq	{r4, r5, r6, pc}
   35638:	bl	35c84 <__assert_fail@plt+0x23690>
   3563c:	push	{r4, lr}
   35640:	bl	3a010 <__assert_fail@plt+0x27a1c>
   35644:	cmp	r0, #0
   35648:	popne	{r4, pc}
   3564c:	bl	35c84 <__assert_fail@plt+0x23690>
   35650:	push	{r4, lr}
   35654:	bl	3a010 <__assert_fail@plt+0x27a1c>
   35658:	cmp	r0, #0
   3565c:	popne	{r4, pc}
   35660:	bl	35c84 <__assert_fail@plt+0x23690>
   35664:	push	{r4, lr}
   35668:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3566c:	cmp	r0, #0
   35670:	popne	{r4, pc}
   35674:	bl	35c84 <__assert_fail@plt+0x23690>
   35678:	push	{r4, r5, r6, lr}
   3567c:	mov	r5, r0
   35680:	mov	r4, r1
   35684:	bl	3aacc <__assert_fail@plt+0x284d8>
   35688:	cmp	r0, #0
   3568c:	popne	{r4, r5, r6, pc}
   35690:	adds	r4, r4, #0
   35694:	movne	r4, #1
   35698:	cmp	r5, #0
   3569c:	orreq	r4, r4, #1
   356a0:	cmp	r4, #0
   356a4:	popeq	{r4, r5, r6, pc}
   356a8:	bl	35c84 <__assert_fail@plt+0x23690>
   356ac:	push	{r4, lr}
   356b0:	cmp	r1, #0
   356b4:	orreq	r1, r1, #1
   356b8:	bl	3aacc <__assert_fail@plt+0x284d8>
   356bc:	cmp	r0, #0
   356c0:	popne	{r4, pc}
   356c4:	bl	35c84 <__assert_fail@plt+0x23690>
   356c8:	push	{r4, r5, r6, lr}
   356cc:	mov	r6, r0
   356d0:	mov	r5, r1
   356d4:	mov	r4, r2
   356d8:	bl	3ab28 <__assert_fail@plt+0x28534>
   356dc:	cmp	r0, #0
   356e0:	popne	{r4, r5, r6, pc}
   356e4:	cmp	r6, #0
   356e8:	beq	356f8 <__assert_fail@plt+0x23104>
   356ec:	cmp	r5, #0
   356f0:	cmpne	r4, #0
   356f4:	popeq	{r4, r5, r6, pc}
   356f8:	bl	35c84 <__assert_fail@plt+0x23690>
   356fc:	cmp	r2, #0
   35700:	cmpne	r1, #0
   35704:	moveq	r2, #1
   35708:	moveq	r1, r2
   3570c:	push	{r4, lr}
   35710:	bl	3ab28 <__assert_fail@plt+0x28534>
   35714:	cmp	r0, #0
   35718:	popne	{r4, pc}
   3571c:	bl	35c84 <__assert_fail@plt+0x23690>
   35720:	push	{r4, lr}
   35724:	mov	r2, r1
   35728:	mov	r1, r0
   3572c:	mov	r0, #0
   35730:	bl	3ab28 <__assert_fail@plt+0x28534>
   35734:	cmp	r0, #0
   35738:	popne	{r4, pc}
   3573c:	bl	35c84 <__assert_fail@plt+0x23690>
   35740:	cmp	r1, #0
   35744:	cmpne	r0, #0
   35748:	moveq	r2, #1
   3574c:	movne	r2, r1
   35750:	moveq	r1, r2
   35754:	movne	r1, r0
   35758:	push	{r4, lr}
   3575c:	mov	r0, #0
   35760:	bl	3ab28 <__assert_fail@plt+0x28534>
   35764:	cmp	r0, #0
   35768:	popne	{r4, pc}
   3576c:	bl	35c84 <__assert_fail@plt+0x23690>
   35770:	cmp	r0, #0
   35774:	push	{r4, r5, r6, lr}
   35778:	mov	r5, r1
   3577c:	ldr	r4, [r1]
   35780:	beq	357bc <__assert_fail@plt+0x231c8>
   35784:	lsr	r2, r4, #1
   35788:	add	r3, r2, #1
   3578c:	mvn	r3, r3
   35790:	cmp	r4, r3
   35794:	bhi	357d8 <__assert_fail@plt+0x231e4>
   35798:	add	r4, r4, #1
   3579c:	add	r4, r4, r2
   357a0:	mov	r1, r4
   357a4:	mov	r2, #1
   357a8:	bl	3ab28 <__assert_fail@plt+0x28534>
   357ac:	cmp	r0, #0
   357b0:	beq	357dc <__assert_fail@plt+0x231e8>
   357b4:	str	r4, [r5]
   357b8:	pop	{r4, r5, r6, pc}
   357bc:	cmp	r4, #0
   357c0:	moveq	r4, #64	; 0x40
   357c4:	mov	r1, r4
   357c8:	mov	r2, #1
   357cc:	bl	3ab28 <__assert_fail@plt+0x28534>
   357d0:	cmp	r0, #0
   357d4:	bne	357b4 <__assert_fail@plt+0x231c0>
   357d8:	bl	35c84 <__assert_fail@plt+0x23690>
   357dc:	cmp	r4, #0
   357e0:	bne	357d8 <__assert_fail@plt+0x231e4>
   357e4:	str	r4, [r5]
   357e8:	pop	{r4, r5, r6, pc}
   357ec:	cmp	r0, #0
   357f0:	push	{r4, r5, r6, lr}
   357f4:	mov	r5, r1
   357f8:	ldr	r4, [r1]
   357fc:	mov	r6, r2
   35800:	beq	35844 <__assert_fail@plt+0x23250>
   35804:	lsr	r1, r4, #1
   35808:	add	r3, r1, #1
   3580c:	mvn	r3, r3
   35810:	cmp	r4, r3
   35814:	bhi	3587c <__assert_fail@plt+0x23288>
   35818:	add	r4, r4, #1
   3581c:	add	r4, r4, r1
   35820:	mov	r1, r4
   35824:	bl	3ab28 <__assert_fail@plt+0x28534>
   35828:	cmp	r0, #0
   3582c:	bne	3583c <__assert_fail@plt+0x23248>
   35830:	cmp	r4, #0
   35834:	cmpne	r6, #0
   35838:	bne	3587c <__assert_fail@plt+0x23288>
   3583c:	str	r4, [r5]
   35840:	pop	{r4, r5, r6, pc}
   35844:	cmp	r4, #0
   35848:	bne	35864 <__assert_fail@plt+0x23270>
   3584c:	mov	r1, r2
   35850:	mov	r0, #64	; 0x40
   35854:	bl	4d384 <__assert_fail@plt+0x3ad90>
   35858:	cmp	r0, #0
   3585c:	movne	r4, r0
   35860:	addeq	r4, r0, #1
   35864:	mov	r2, r6
   35868:	mov	r1, r4
   3586c:	mov	r0, #0
   35870:	bl	3ab28 <__assert_fail@plt+0x28534>
   35874:	cmp	r0, #0
   35878:	bne	3583c <__assert_fail@plt+0x23248>
   3587c:	bl	35c84 <__assert_fail@plt+0x23690>
   35880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35884:	sub	sp, sp, #12
   35888:	ldr	r6, [r1]
   3588c:	mov	r8, r1
   35890:	mov	r9, r0
   35894:	asrs	r4, r6, #1
   35898:	mov	sl, r2
   3589c:	mov	fp, r3
   358a0:	ldr	r7, [sp, #48]	; 0x30
   358a4:	bmi	35a20 <__assert_fail@plt+0x2342c>
   358a8:	mvn	r1, #-2147483648	; 0x80000000
   358ac:	sub	r1, r1, r4
   358b0:	cmp	r6, r1
   358b4:	movle	r1, #0
   358b8:	movgt	r1, #1
   358bc:	mvn	r3, fp
   358c0:	cmp	r1, #0
   358c4:	addeq	r4, r4, r6
   358c8:	mvnne	r4, #-2147483648	; 0x80000000
   358cc:	lsr	r3, r3, #31
   358d0:	cmp	fp, r4
   358d4:	movge	r2, #0
   358d8:	andlt	r2, r3, #1
   358dc:	cmp	r2, #0
   358e0:	beq	359d0 <__assert_fail@plt+0x233dc>
   358e4:	cmp	r7, #0
   358e8:	blt	35ab8 <__assert_fail@plt+0x234c4>
   358ec:	bne	35ab0 <__assert_fail@plt+0x234bc>
   358f0:	mov	r5, #64	; 0x40
   358f4:	mov	r1, r7
   358f8:	mov	r0, r5
   358fc:	str	r3, [sp, #4]
   35900:	bl	4d590 <__assert_fail@plt+0x3af9c>
   35904:	mov	r1, r7
   35908:	mov	r4, r0
   3590c:	mov	r0, r5
   35910:	bl	4d7b0 <__assert_fail@plt+0x3b1bc>
   35914:	ldr	r3, [sp, #4]
   35918:	sub	r5, r5, r1
   3591c:	cmp	r9, #0
   35920:	sub	r2, r4, r6
   35924:	streq	r9, [r8]
   35928:	cmp	r2, sl
   3592c:	bge	359b0 <__assert_fail@plt+0x233bc>
   35930:	cmp	sl, #0
   35934:	blt	35a50 <__assert_fail@plt+0x2345c>
   35938:	cmp	r6, #0
   3593c:	blt	3595c <__assert_fail@plt+0x23368>
   35940:	mvn	r2, #-2147483648	; 0x80000000
   35944:	sub	r2, r2, sl
   35948:	cmp	r6, r2
   3594c:	movle	r2, #0
   35950:	movgt	r2, #1
   35954:	cmp	r2, #0
   35958:	bne	35a4c <__assert_fail@plt+0x23458>
   3595c:	add	r6, r6, sl
   35960:	cmp	fp, r6
   35964:	movge	r3, #0
   35968:	andlt	r3, r3, #1
   3596c:	cmp	r3, #0
   35970:	mov	r4, r6
   35974:	bne	35a4c <__assert_fail@plt+0x23458>
   35978:	cmp	r7, #0
   3597c:	blt	35a64 <__assert_fail@plt+0x23470>
   35980:	beq	359ac <__assert_fail@plt+0x233b8>
   35984:	cmp	r6, #0
   35988:	blt	35b08 <__assert_fail@plt+0x23514>
   3598c:	mov	r1, r7
   35990:	mvn	r0, #-2147483648	; 0x80000000
   35994:	bl	4d590 <__assert_fail@plt+0x3af9c>
   35998:	cmp	r6, r0
   3599c:	movle	r0, #0
   359a0:	movgt	r0, #1
   359a4:	cmp	r0, #0
   359a8:	bne	35a4c <__assert_fail@plt+0x23458>
   359ac:	mul	r5, r6, r7
   359b0:	mov	r1, r5
   359b4:	mov	r0, r9
   359b8:	bl	3aacc <__assert_fail@plt+0x284d8>
   359bc:	cmp	r0, #0
   359c0:	beq	35a34 <__assert_fail@plt+0x23440>
   359c4:	str	r4, [r8]
   359c8:	add	sp, sp, #12
   359cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   359d0:	cmp	r7, #0
   359d4:	blt	35a90 <__assert_fail@plt+0x2349c>
   359d8:	beq	358f0 <__assert_fail@plt+0x232fc>
   359dc:	cmp	r4, #0
   359e0:	blt	35ac0 <__assert_fail@plt+0x234cc>
   359e4:	mov	r1, r7
   359e8:	mvn	r0, #-2147483648	; 0x80000000
   359ec:	str	r3, [sp, #4]
   359f0:	bl	4d590 <__assert_fail@plt+0x3af9c>
   359f4:	ldr	r3, [sp, #4]
   359f8:	cmp	r0, r4
   359fc:	movge	r0, #0
   35a00:	movlt	r0, #1
   35a04:	cmp	r0, #0
   35a08:	mvnne	r5, #-2147483648	; 0x80000000
   35a0c:	bne	358f4 <__assert_fail@plt+0x23300>
   35a10:	mul	r5, r7, r4
   35a14:	cmp	r5, #63	; 0x3f
   35a18:	bgt	3591c <__assert_fail@plt+0x23328>
   35a1c:	b	358f0 <__assert_fail@plt+0x232fc>
   35a20:	rsb	r1, r4, #-2147483648	; 0x80000000
   35a24:	cmp	r6, r1
   35a28:	movge	r1, #0
   35a2c:	movlt	r1, #1
   35a30:	b	358bc <__assert_fail@plt+0x232c8>
   35a34:	adds	r5, r5, #0
   35a38:	movne	r5, #1
   35a3c:	cmp	r9, #0
   35a40:	orreq	r5, r5, #1
   35a44:	cmp	r5, #0
   35a48:	beq	359c4 <__assert_fail@plt+0x233d0>
   35a4c:	bl	35c84 <__assert_fail@plt+0x23690>
   35a50:	rsb	r2, sl, #-2147483648	; 0x80000000
   35a54:	cmp	r6, r2
   35a58:	movge	r2, #0
   35a5c:	movlt	r2, #1
   35a60:	b	35954 <__assert_fail@plt+0x23360>
   35a64:	cmp	r6, #0
   35a68:	blt	35aec <__assert_fail@plt+0x234f8>
   35a6c:	cmn	r7, #1
   35a70:	beq	359ac <__assert_fail@plt+0x233b8>
   35a74:	mov	r1, r7
   35a78:	mov	r0, #-2147483648	; 0x80000000
   35a7c:	bl	4d590 <__assert_fail@plt+0x3af9c>
   35a80:	cmp	r6, r0
   35a84:	movle	r0, #0
   35a88:	movgt	r0, #1
   35a8c:	b	359a4 <__assert_fail@plt+0x233b0>
   35a90:	cmp	r4, #0
   35a94:	blt	35b2c <__assert_fail@plt+0x23538>
   35a98:	cmn	r7, #1
   35a9c:	beq	35a10 <__assert_fail@plt+0x2341c>
   35aa0:	str	r3, [sp, #4]
   35aa4:	mov	r1, r7
   35aa8:	mov	r0, #-2147483648	; 0x80000000
   35aac:	b	359f0 <__assert_fail@plt+0x233fc>
   35ab0:	mov	r4, fp
   35ab4:	b	359e4 <__assert_fail@plt+0x233f0>
   35ab8:	mov	r4, fp
   35abc:	b	35a98 <__assert_fail@plt+0x234a4>
   35ac0:	cmn	r4, #1
   35ac4:	beq	35a10 <__assert_fail@plt+0x2341c>
   35ac8:	mov	r1, r4
   35acc:	mov	r0, #-2147483648	; 0x80000000
   35ad0:	str	r3, [sp, #4]
   35ad4:	bl	4d590 <__assert_fail@plt+0x3af9c>
   35ad8:	ldr	r3, [sp, #4]
   35adc:	cmp	r7, r0
   35ae0:	movle	r0, #0
   35ae4:	movgt	r0, #1
   35ae8:	b	35a04 <__assert_fail@plt+0x23410>
   35aec:	mov	r1, r7
   35af0:	mvn	r0, #-2147483648	; 0x80000000
   35af4:	bl	4d590 <__assert_fail@plt+0x3af9c>
   35af8:	cmp	r6, r0
   35afc:	movge	r0, #0
   35b00:	movlt	r0, #1
   35b04:	b	359a4 <__assert_fail@plt+0x233b0>
   35b08:	cmn	r6, #1
   35b0c:	beq	359ac <__assert_fail@plt+0x233b8>
   35b10:	mov	r1, r6
   35b14:	mov	r0, #-2147483648	; 0x80000000
   35b18:	bl	4d590 <__assert_fail@plt+0x3af9c>
   35b1c:	cmp	r7, r0
   35b20:	movle	r0, #0
   35b24:	movgt	r0, #1
   35b28:	b	359a4 <__assert_fail@plt+0x233b0>
   35b2c:	mov	r1, r7
   35b30:	mvn	r0, #-2147483648	; 0x80000000
   35b34:	str	r3, [sp, #4]
   35b38:	bl	4d590 <__assert_fail@plt+0x3af9c>
   35b3c:	ldr	r3, [sp, #4]
   35b40:	cmp	r0, r4
   35b44:	movle	r0, #0
   35b48:	movgt	r0, #1
   35b4c:	b	35a04 <__assert_fail@plt+0x23410>
   35b50:	push	{r4, lr}
   35b54:	mov	r1, #1
   35b58:	bl	37128 <__assert_fail@plt+0x24b34>
   35b5c:	cmp	r0, #0
   35b60:	popne	{r4, pc}
   35b64:	bl	35c84 <__assert_fail@plt+0x23690>
   35b68:	push	{r4, lr}
   35b6c:	mov	r1, #1
   35b70:	bl	37128 <__assert_fail@plt+0x24b34>
   35b74:	cmp	r0, #0
   35b78:	popne	{r4, pc}
   35b7c:	bl	35c84 <__assert_fail@plt+0x23690>
   35b80:	push	{r4, lr}
   35b84:	bl	37128 <__assert_fail@plt+0x24b34>
   35b88:	cmp	r0, #0
   35b8c:	popne	{r4, pc}
   35b90:	bl	35c84 <__assert_fail@plt+0x23690>
   35b94:	push	{r4, lr}
   35b98:	bl	37128 <__assert_fail@plt+0x24b34>
   35b9c:	cmp	r0, #0
   35ba0:	popne	{r4, pc}
   35ba4:	bl	35c84 <__assert_fail@plt+0x23690>
   35ba8:	push	{r4, r5, r6, lr}
   35bac:	mov	r6, r0
   35bb0:	mov	r0, r1
   35bb4:	mov	r4, r1
   35bb8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   35bbc:	subs	r5, r0, #0
   35bc0:	beq	35bd8 <__assert_fail@plt+0x235e4>
   35bc4:	mov	r2, r4
   35bc8:	mov	r1, r6
   35bcc:	bl	12024 <memcpy@plt>
   35bd0:	mov	r0, r5
   35bd4:	pop	{r4, r5, r6, pc}
   35bd8:	bl	35c84 <__assert_fail@plt+0x23690>
   35bdc:	push	{r4, r5, r6, lr}
   35be0:	mov	r6, r0
   35be4:	mov	r0, r1
   35be8:	mov	r4, r1
   35bec:	bl	3a010 <__assert_fail@plt+0x27a1c>
   35bf0:	subs	r5, r0, #0
   35bf4:	beq	35c0c <__assert_fail@plt+0x23618>
   35bf8:	mov	r2, r4
   35bfc:	mov	r1, r6
   35c00:	bl	12024 <memcpy@plt>
   35c04:	mov	r0, r5
   35c08:	pop	{r4, r5, r6, pc}
   35c0c:	bl	35c84 <__assert_fail@plt+0x23690>
   35c10:	push	{r4, r5, r6, lr}
   35c14:	mov	r6, r0
   35c18:	add	r0, r1, #1
   35c1c:	mov	r4, r1
   35c20:	bl	3a010 <__assert_fail@plt+0x27a1c>
   35c24:	subs	r5, r0, #0
   35c28:	beq	35c48 <__assert_fail@plt+0x23654>
   35c2c:	mov	r3, #0
   35c30:	mov	r1, r6
   35c34:	strb	r3, [r5, r4]
   35c38:	mov	r2, r4
   35c3c:	bl	12024 <memcpy@plt>
   35c40:	mov	r0, r5
   35c44:	pop	{r4, r5, r6, pc}
   35c48:	bl	35c84 <__assert_fail@plt+0x23690>
   35c4c:	push	{r4, r5, r6, lr}
   35c50:	mov	r6, r0
   35c54:	bl	12300 <strlen@plt>
   35c58:	add	r4, r0, #1
   35c5c:	mov	r0, r4
   35c60:	bl	3a010 <__assert_fail@plt+0x27a1c>
   35c64:	subs	r5, r0, #0
   35c68:	beq	35c80 <__assert_fail@plt+0x2368c>
   35c6c:	mov	r2, r4
   35c70:	mov	r1, r6
   35c74:	bl	12024 <memcpy@plt>
   35c78:	mov	r0, r5
   35c7c:	pop	{r4, r5, r6, pc}
   35c80:	bl	35c84 <__assert_fail@plt+0x23690>
   35c84:	ldr	r3, [pc, #44]	; 35cb8 <__assert_fail@plt+0x236c4>
   35c88:	push	{r4, lr}
   35c8c:	mov	r2, #5
   35c90:	ldr	r1, [pc, #36]	; 35cbc <__assert_fail@plt+0x236c8>
   35c94:	mov	r0, #0
   35c98:	ldr	r4, [r3]
   35c9c:	bl	120b4 <dcgettext@plt>
   35ca0:	ldr	r2, [pc, #24]	; 35cc0 <__assert_fail@plt+0x236cc>
   35ca4:	mov	r1, #0
   35ca8:	mov	r3, r0
   35cac:	mov	r0, r4
   35cb0:	bl	121ec <error@plt>
   35cb4:	bl	125a0 <abort@plt>
   35cb8:	strdeq	r4, [r6], -r0
   35cbc:	andeq	r3, r5, r0, ror r8
   35cc0:	andeq	r2, r5, r4, asr #9
   35cc4:	push	{r4, r5, r6, r7, r8, r9, lr}
   35cc8:	sub	sp, sp, #12
   35ccc:	mov	r6, r0
   35cd0:	mov	r9, r3
   35cd4:	mov	r5, r1
   35cd8:	mov	r8, r2
   35cdc:	bl	12348 <__errno_location@plt>
   35ce0:	mov	r4, #0
   35ce4:	add	r1, sp, #4
   35ce8:	str	r4, [r0]
   35cec:	mov	r7, r0
   35cf0:	mov	r0, r6
   35cf4:	blx	r9
   35cf8:	ldr	r3, [sp, #4]
   35cfc:	cmp	r6, r3
   35d00:	beq	35d40 <__assert_fail@plt+0x2374c>
   35d04:	cmp	r5, r4
   35d08:	beq	35d48 <__assert_fail@plt+0x23754>
   35d0c:	vcmp.f64	d0, #0.0
   35d10:	vmrs	APSR_nzcv, fpscr
   35d14:	moveq	r0, #1
   35d18:	beq	35d30 <__assert_fail@plt+0x2373c>
   35d1c:	ldr	r0, [r7]
   35d20:	subs	r0, r0, #34	; 0x22
   35d24:	movne	r0, #1
   35d28:	cmp	r5, #0
   35d2c:	beq	35d34 <__assert_fail@plt+0x23740>
   35d30:	str	r3, [r5]
   35d34:	vstr	d0, [r8]
   35d38:	add	sp, sp, #12
   35d3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   35d40:	mov	r0, r4
   35d44:	b	35d28 <__assert_fail@plt+0x23734>
   35d48:	ldrb	r2, [r3]
   35d4c:	cmp	r2, r4
   35d50:	movne	r0, r5
   35d54:	bne	35d34 <__assert_fail@plt+0x23740>
   35d58:	vcmp.f64	d0, #0.0
   35d5c:	vmrs	APSR_nzcv, fpscr
   35d60:	bne	35d1c <__assert_fail@plt+0x23728>
   35d64:	mov	r0, #1
   35d68:	b	35d34 <__assert_fail@plt+0x23740>
   35d6c:	cmp	r2, #36	; 0x24
   35d70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35d74:	sub	sp, sp, #8
   35d78:	bhi	36318 <__assert_fail@plt+0x23d24>
   35d7c:	cmp	r1, #0
   35d80:	mov	r6, r1
   35d84:	mov	r9, r2
   35d88:	mov	r5, r0
   35d8c:	mov	r8, r3
   35d90:	addeq	r6, sp, #4
   35d94:	bl	12348 <__errno_location@plt>
   35d98:	mov	r3, #0
   35d9c:	str	r3, [r0]
   35da0:	mov	r7, r0
   35da4:	bl	122b8 <__ctype_b_loc@plt>
   35da8:	ldrb	r1, [r5]
   35dac:	mov	r2, r5
   35db0:	ldr	r0, [r0]
   35db4:	b	35dbc <__assert_fail@plt+0x237c8>
   35db8:	ldrb	r1, [r2, #1]!
   35dbc:	lsl	r3, r1, #1
   35dc0:	ldrh	r3, [r0, r3]
   35dc4:	ands	r4, r3, #8192	; 0x2000
   35dc8:	bne	35db8 <__assert_fail@plt+0x237c4>
   35dcc:	cmp	r1, #45	; 0x2d
   35dd0:	bne	35de4 <__assert_fail@plt+0x237f0>
   35dd4:	mov	r4, #4
   35dd8:	mov	r0, r4
   35ddc:	add	sp, sp, #8
   35de0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35de4:	mov	r2, r9
   35de8:	mov	r1, r6
   35dec:	mov	r0, r5
   35df0:	bl	122f4 <strtoul@plt>
   35df4:	ldr	sl, [r6]
   35df8:	cmp	r5, sl
   35dfc:	mov	r9, r0
   35e00:	beq	35e48 <__assert_fail@plt+0x23854>
   35e04:	ldr	r4, [r7]
   35e08:	cmp	r4, #0
   35e0c:	bne	35e38 <__assert_fail@plt+0x23844>
   35e10:	ldr	r3, [sp, #40]	; 0x28
   35e14:	cmp	r3, #0
   35e18:	beq	35e28 <__assert_fail@plt+0x23834>
   35e1c:	ldrb	r5, [sl]
   35e20:	cmp	r5, #0
   35e24:	bne	35e78 <__assert_fail@plt+0x23884>
   35e28:	mov	r0, r4
   35e2c:	str	r9, [r8]
   35e30:	add	sp, sp, #8
   35e34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35e38:	cmp	r4, #34	; 0x22
   35e3c:	bne	35dd4 <__assert_fail@plt+0x237e0>
   35e40:	mov	r4, #1
   35e44:	b	35e10 <__assert_fail@plt+0x2381c>
   35e48:	ldr	r3, [sp, #40]	; 0x28
   35e4c:	cmp	r3, #0
   35e50:	beq	35dd4 <__assert_fail@plt+0x237e0>
   35e54:	ldrb	r5, [sl]
   35e58:	cmp	r5, #0
   35e5c:	beq	35dd4 <__assert_fail@plt+0x237e0>
   35e60:	mov	r1, r5
   35e64:	mov	r0, r3
   35e68:	bl	1230c <strchr@plt>
   35e6c:	cmp	r0, #0
   35e70:	movne	r9, #1
   35e74:	beq	35dd4 <__assert_fail@plt+0x237e0>
   35e78:	mov	r1, r5
   35e7c:	ldr	r0, [sp, #40]	; 0x28
   35e80:	bl	1230c <strchr@plt>
   35e84:	cmp	r0, #0
   35e88:	beq	362e4 <__assert_fail@plt+0x23cf0>
   35e8c:	sub	r3, r5, #69	; 0x45
   35e90:	cmp	r3, #47	; 0x2f
   35e94:	ldrls	pc, [pc, r3, lsl #2]
   35e98:	b	35f5c <__assert_fail@plt+0x23968>
   35e9c:	andeq	r6, r3, r0, asr r0
   35ea0:	andeq	r5, r3, ip, asr pc
   35ea4:	andeq	r6, r3, r0, asr r0
   35ea8:	andeq	r5, r3, ip, asr pc
   35eac:	andeq	r5, r3, ip, asr pc
   35eb0:	andeq	r5, r3, ip, asr pc
   35eb4:	andeq	r6, r3, r0, asr r0
   35eb8:	andeq	r5, r3, ip, asr pc
   35ebc:	andeq	r6, r3, r0, asr r0
   35ec0:	andeq	r5, r3, ip, asr pc
   35ec4:	andeq	r5, r3, ip, asr pc
   35ec8:	andeq	r6, r3, r0, asr r0
   35ecc:	andeq	r5, r3, ip, asr pc
   35ed0:	andeq	r5, r3, ip, asr pc
   35ed4:	andeq	r5, r3, ip, asr pc
   35ed8:	andeq	r6, r3, r0, asr r0
   35edc:	andeq	r5, r3, ip, asr pc
   35ee0:	andeq	r5, r3, ip, asr pc
   35ee4:	andeq	r5, r3, ip, asr pc
   35ee8:	andeq	r5, r3, ip, asr pc
   35eec:	andeq	r6, r3, r0, asr r0
   35ef0:	andeq	r6, r3, r0, asr r0
   35ef4:	andeq	r5, r3, ip, asr pc
   35ef8:	andeq	r5, r3, ip, asr pc
   35efc:	andeq	r5, r3, ip, asr pc
   35f00:	andeq	r5, r3, ip, asr pc
   35f04:	andeq	r5, r3, ip, asr pc
   35f08:	andeq	r5, r3, ip, asr pc
   35f0c:	andeq	r5, r3, ip, asr pc
   35f10:	andeq	r5, r3, ip, asr pc
   35f14:	andeq	r5, r3, ip, asr pc
   35f18:	andeq	r5, r3, ip, asr pc
   35f1c:	andeq	r5, r3, ip, asr pc
   35f20:	andeq	r5, r3, ip, asr pc
   35f24:	andeq	r6, r3, r0, asr r0
   35f28:	andeq	r5, r3, ip, asr pc
   35f2c:	andeq	r5, r3, ip, asr pc
   35f30:	andeq	r5, r3, ip, asr pc
   35f34:	andeq	r6, r3, r0, asr r0
   35f38:	andeq	r5, r3, ip, asr pc
   35f3c:	andeq	r6, r3, r0, asr r0
   35f40:	andeq	r5, r3, ip, asr pc
   35f44:	andeq	r5, r3, ip, asr pc
   35f48:	andeq	r5, r3, ip, asr pc
   35f4c:	andeq	r5, r3, ip, asr pc
   35f50:	andeq	r5, r3, ip, asr pc
   35f54:	andeq	r5, r3, ip, asr pc
   35f58:	andeq	r6, r3, r0, asr r0
   35f5c:	ldr	r0, [pc, #968]	; 3632c <__assert_fail@plt+0x23d38>
   35f60:	mov	r2, #1024	; 0x400
   35f64:	mov	r1, #1
   35f68:	sub	r5, r5, #66	; 0x42
   35f6c:	cmp	r5, #53	; 0x35
   35f70:	ldrls	pc, [pc, r5, lsl #2]
   35f74:	b	362e4 <__assert_fail@plt+0x23cf0>
   35f78:	andeq	r6, r3, r4, lsr #5
   35f7c:	andeq	r6, r3, r4, ror #5
   35f80:	andeq	r6, r3, r4, ror #5
   35f84:	andeq	r6, r3, r8, ror #4
   35f88:	andeq	r6, r3, r4, ror #5
   35f8c:			; <UNDEFINED> instruction: 0x000362b8
   35f90:	andeq	r6, r3, r4, ror #5
   35f94:	andeq	r6, r3, r4, ror #5
   35f98:	andeq	r6, r3, r4, ror #5
   35f9c:	andeq	r6, r3, ip, asr r2
   35fa0:	andeq	r6, r3, r4, ror #5
   35fa4:	andeq	r6, r3, ip, lsr r2
   35fa8:	andeq	r6, r3, r4, ror #5
   35fac:	andeq	r6, r3, r4, ror #5
   35fb0:	ldrdeq	r6, [r3], -ip
   35fb4:	andeq	r6, r3, r4, ror #5
   35fb8:	andeq	r6, r3, r4, ror #5
   35fbc:	andeq	r6, r3, r4, ror #5
   35fc0:	andeq	r6, r3, r8, lsr #3
   35fc4:	andeq	r6, r3, r4, ror #5
   35fc8:	andeq	r6, r3, r4, ror #5
   35fcc:	andeq	r6, r3, r4, ror #5
   35fd0:	andeq	r6, r3, r4, ror #5
   35fd4:	andeq	r6, r3, r4, ror #2
   35fd8:	andeq	r6, r3, r0, ror #1
   35fdc:	andeq	r6, r3, r4, ror #5
   35fe0:	andeq	r6, r3, r4, ror #5
   35fe4:	andeq	r6, r3, r4, ror #5
   35fe8:	andeq	r6, r3, r4, ror #5
   35fec:	andeq	r6, r3, r4, ror #5
   35ff0:	andeq	r6, r3, r4, ror #5
   35ff4:	andeq	r6, r3, r4, ror #5
   35ff8:	andeq	r6, r3, r4, asr #1
   35ffc:	strheq	r6, [r3], -ip
   36000:	andeq	r6, r3, r4, ror #5
   36004:	andeq	r6, r3, r4, ror #5
   36008:	andeq	r6, r3, r4, ror #5
   3600c:			; <UNDEFINED> instruction: 0x000362b8
   36010:	andeq	r6, r3, r4, ror #5
   36014:	andeq	r6, r3, r4, ror #5
   36018:	andeq	r6, r3, r4, ror #5
   3601c:	andeq	r6, r3, ip, asr r2
   36020:	andeq	r6, r3, r4, ror #5
   36024:	andeq	r6, r3, ip, lsr r2
   36028:	andeq	r6, r3, r4, ror #5
   3602c:	andeq	r6, r3, r4, ror #5
   36030:	andeq	r6, r3, r4, ror #5
   36034:	andeq	r6, r3, r4, ror #5
   36038:	andeq	r6, r3, r4, ror #5
   3603c:	andeq	r6, r3, r4, ror #5
   36040:	andeq	r6, r3, r8, lsr #3
   36044:	andeq	r6, r3, r4, ror #5
   36048:	andeq	r6, r3, r4, ror #5
   3604c:	muleq	r3, r0, r0
   36050:	mov	r1, #48	; 0x30
   36054:	ldr	r0, [sp, #40]	; 0x28
   36058:	bl	1230c <strchr@plt>
   3605c:	cmp	r0, #0
   36060:	beq	35f5c <__assert_fail@plt+0x23968>
   36064:	ldrb	r3, [sl, #1]
   36068:	cmp	r3, #68	; 0x44
   3606c:	beq	36080 <__assert_fail@plt+0x23a8c>
   36070:	cmp	r3, #105	; 0x69
   36074:	beq	362f0 <__assert_fail@plt+0x23cfc>
   36078:	cmp	r3, #66	; 0x42
   3607c:	bne	35f5c <__assert_fail@plt+0x23968>
   36080:	ldr	r0, [pc, #680]	; 36330 <__assert_fail@plt+0x23d3c>
   36084:	mov	r2, #1000	; 0x3e8
   36088:	mov	r1, #2
   3608c:	b	35f68 <__assert_fail@plt+0x23974>
   36090:	cmp	r9, #0
   36094:	blt	360d4 <__assert_fail@plt+0x23ae0>
   36098:	lsl	r9, r9, #1
   3609c:	mov	r3, #0
   360a0:	add	r2, sl, r1
   360a4:	str	r2, [r6]
   360a8:	ldrb	r2, [sl, r1]
   360ac:	orr	r4, r4, r3
   360b0:	cmp	r2, #0
   360b4:	orrne	r4, r4, #2
   360b8:	b	35e28 <__assert_fail@plt+0x23834>
   360bc:	mov	r3, #0
   360c0:	b	360a0 <__assert_fail@plt+0x23aac>
   360c4:	cmp	r9, #8388608	; 0x800000
   360c8:	lslcc	r9, r9, #9
   360cc:	movcc	r3, #0
   360d0:	bcc	360a0 <__assert_fail@plt+0x23aac>
   360d4:	mvn	r9, #0
   360d8:	mov	r3, #1
   360dc:	b	360a0 <__assert_fail@plt+0x23aac>
   360e0:	mul	r3, r9, r2
   360e4:	cmp	r9, r0
   360e8:	mvnhi	r3, #0
   360ec:	cmp	r0, r3
   360f0:	mul	ip, r3, r2
   360f4:	mvncc	ip, #0
   360f8:	cmp	r0, r3
   360fc:	mul	lr, ip, r2
   36100:	movcs	r3, #0
   36104:	movcc	r3, #1
   36108:	cmp	r9, r0
   3610c:	orrhi	r3, r3, #1
   36110:	cmp	r0, ip
   36114:	mvncc	lr, #0
   36118:	orrcc	r3, r3, #1
   3611c:	mul	ip, lr, r2
   36120:	cmp	r0, lr
   36124:	mvncc	ip, #0
   36128:	orrcc	r3, r3, #1
   3612c:	mul	lr, ip, r2
   36130:	cmp	r0, ip
   36134:	mvncc	lr, #0
   36138:	orrcc	r3, r3, #1
   3613c:	mul	ip, lr, r2
   36140:	cmp	r0, lr
   36144:	mvncc	ip, #0
   36148:	orrcc	r3, r3, #1
   3614c:	mul	r2, ip, r2
   36150:	cmp	r0, ip
   36154:	movcs	r9, r2
   36158:	mvncc	r9, #0
   3615c:	orrcc	r3, r3, #1
   36160:	b	360a0 <__assert_fail@plt+0x23aac>
   36164:	mul	r3, r9, r2
   36168:	cmp	r9, r0
   3616c:	mvnhi	r3, #0
   36170:	cmp	r0, r3
   36174:	mul	lr, r3, r2
   36178:	mvncc	lr, #0
   3617c:	cmp	r0, r3
   36180:	movcs	r3, #0
   36184:	movcc	r3, #1
   36188:	mul	ip, lr, r2
   3618c:	cmp	r9, r0
   36190:	orrhi	r3, r3, #1
   36194:	cmp	r0, lr
   36198:	mvncc	ip, #0
   3619c:	orrcc	r3, r3, #1
   361a0:	mul	lr, ip, r2
   361a4:	b	36110 <__assert_fail@plt+0x23b1c>
   361a8:	mul	r3, r9, r2
   361ac:	cmp	r9, r0
   361b0:	mvnhi	r3, #0
   361b4:	cmp	r0, r3
   361b8:	mul	lr, r3, r2
   361bc:	mvncc	lr, #0
   361c0:	cmp	r0, r3
   361c4:	movcs	r3, #0
   361c8:	movcc	r3, #1
   361cc:	mul	ip, lr, r2
   361d0:	cmp	r9, r0
   361d4:	orrhi	r3, r3, #1
   361d8:	b	36140 <__assert_fail@plt+0x23b4c>
   361dc:	mul	r3, r9, r2
   361e0:	cmp	r9, r0
   361e4:	mvnhi	r3, #0
   361e8:	cmp	r0, r3
   361ec:	mul	ip, r3, r2
   361f0:	movcc	r3, #1
   361f4:	movcs	r3, #0
   361f8:	mvncc	ip, #0
   361fc:	cmp	r9, r0
   36200:	orrhi	r3, r3, #1
   36204:	mul	lr, ip, r2
   36208:	cmp	ip, r0
   3620c:	mvnhi	lr, #0
   36210:	orrhi	r3, r3, #1
   36214:	mul	ip, lr, r2
   36218:	cmp	lr, r0
   3621c:	mvnhi	ip, #0
   36220:	orrhi	r3, r3, #1
   36224:	mul	r2, ip, r2
   36228:	cmp	ip, r0
   3622c:	movls	r9, r2
   36230:	mvnhi	r9, #0
   36234:	orrhi	r3, r3, #1
   36238:	b	360a0 <__assert_fail@plt+0x23aac>
   3623c:	cmp	r9, r0
   36240:	bhi	3630c <__assert_fail@plt+0x23d18>
   36244:	mul	r9, r9, r2
   36248:	cmp	r0, r9
   3624c:	bcc	3630c <__assert_fail@plt+0x23d18>
   36250:	mul	r9, r2, r9
   36254:	mov	r3, #0
   36258:	b	360a0 <__assert_fail@plt+0x23aac>
   3625c:	cmp	r9, r0
   36260:	bhi	360d4 <__assert_fail@plt+0x23ae0>
   36264:	b	36250 <__assert_fail@plt+0x23c5c>
   36268:	mul	r3, r9, r2
   3626c:	cmp	r9, r0
   36270:	mvnhi	r3, #0
   36274:	cmp	r3, r0
   36278:	mul	lr, r3, r2
   3627c:	mvnhi	lr, #0
   36280:	cmp	r3, r0
   36284:	cmpls	r9, r0
   36288:	movhi	r3, #1
   3628c:	movls	r3, #0
   36290:	cmp	r0, lr
   36294:	mul	ip, lr, r2
   36298:	orrcc	r3, r3, #1
   3629c:	mvncc	ip, #0
   362a0:	b	36204 <__assert_fail@plt+0x23c10>
   362a4:	cmp	r9, #4194304	; 0x400000
   362a8:	lslcc	r9, r9, #10
   362ac:	movcc	r3, #0
   362b0:	bcc	360a0 <__assert_fail@plt+0x23aac>
   362b4:	b	360d4 <__assert_fail@plt+0x23ae0>
   362b8:	mul	r3, r9, r2
   362bc:	cmp	r9, r0
   362c0:	mvnhi	r3, #0
   362c4:	cmp	r3, r0
   362c8:	mul	ip, r3, r2
   362cc:	mvnhi	ip, #0
   362d0:	cmp	r3, r0
   362d4:	cmpls	r9, r0
   362d8:	movhi	r3, #1
   362dc:	movls	r3, #0
   362e0:	b	3614c <__assert_fail@plt+0x23b58>
   362e4:	str	r9, [r8]
   362e8:	orr	r4, r4, #2
   362ec:	b	35dd8 <__assert_fail@plt+0x237e4>
   362f0:	ldrb	r1, [sl, #2]
   362f4:	ldr	r0, [pc, #48]	; 3632c <__assert_fail@plt+0x23d38>
   362f8:	mov	r2, #1024	; 0x400
   362fc:	cmp	r1, #66	; 0x42
   36300:	movne	r1, #1
   36304:	moveq	r1, #3
   36308:	b	35f68 <__assert_fail@plt+0x23974>
   3630c:	mov	r3, #1
   36310:	mvn	r9, #0
   36314:	b	360a0 <__assert_fail@plt+0x23aac>
   36318:	ldr	r3, [pc, #20]	; 36334 <__assert_fail@plt+0x23d40>
   3631c:	mov	r2, #84	; 0x54
   36320:	ldr	r1, [pc, #16]	; 36338 <__assert_fail@plt+0x23d44>
   36324:	ldr	r0, [pc, #16]	; 3633c <__assert_fail@plt+0x23d48>
   36328:	bl	125f4 <__assert_fail@plt>
   3632c:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   36330:	subeq	r8, r1, r7, lsr r9
   36334:	andeq	r3, r5, r4, lsl #17
   36338:	muleq	r5, r0, r8
   3633c:	muleq	r5, ip, r8
   36340:	cmp	r2, #36	; 0x24
   36344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36348:	sub	sp, sp, #52	; 0x34
   3634c:	bhi	37084 <__assert_fail@plt+0x24a90>
   36350:	cmp	r1, #0
   36354:	mov	r6, r2
   36358:	mov	sl, r0
   3635c:	mov	r5, r1
   36360:	mov	r8, r3
   36364:	addeq	r5, sp, #44	; 0x2c
   36368:	bl	12348 <__errno_location@plt>
   3636c:	mov	r3, #0
   36370:	str	r3, [r0]
   36374:	mov	fp, r0
   36378:	bl	122b8 <__ctype_b_loc@plt>
   3637c:	ldrb	r3, [sl]
   36380:	mov	r2, sl
   36384:	ldr	r0, [r0]
   36388:	b	36390 <__assert_fail@plt+0x23d9c>
   3638c:	ldrb	r3, [r2, #1]!
   36390:	lsl	r1, r3, #1
   36394:	ldrh	r4, [r0, r1]
   36398:	ands	r4, r4, #8192	; 0x2000
   3639c:	bne	3638c <__assert_fail@plt+0x23d98>
   363a0:	cmp	r3, #45	; 0x2d
   363a4:	bne	363b8 <__assert_fail@plt+0x23dc4>
   363a8:	mov	r4, #4
   363ac:	mov	r0, r4
   363b0:	add	sp, sp, #52	; 0x34
   363b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   363b8:	mov	r2, r6
   363bc:	mov	r3, r4
   363c0:	mov	r1, r5
   363c4:	mov	r0, sl
   363c8:	bl	12048 <__strtoull_internal@plt>
   363cc:	ldr	r9, [r5]
   363d0:	cmp	sl, r9
   363d4:	mov	r6, r0
   363d8:	mov	r7, r1
   363dc:	beq	36424 <__assert_fail@plt+0x23e30>
   363e0:	ldr	r4, [fp]
   363e4:	cmp	r4, #0
   363e8:	bne	36414 <__assert_fail@plt+0x23e20>
   363ec:	ldr	r3, [sp, #88]	; 0x58
   363f0:	cmp	r3, #0
   363f4:	beq	36404 <__assert_fail@plt+0x23e10>
   363f8:	ldrb	sl, [r9]
   363fc:	cmp	sl, #0
   36400:	bne	36458 <__assert_fail@plt+0x23e64>
   36404:	mov	r0, r4
   36408:	strd	r6, [r8]
   3640c:	add	sp, sp, #52	; 0x34
   36410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36414:	cmp	r4, #34	; 0x22
   36418:	bne	363a8 <__assert_fail@plt+0x23db4>
   3641c:	mov	r4, #1
   36420:	b	363ec <__assert_fail@plt+0x23df8>
   36424:	ldr	r3, [sp, #88]	; 0x58
   36428:	cmp	r3, #0
   3642c:	beq	363a8 <__assert_fail@plt+0x23db4>
   36430:	ldrb	sl, [r9]
   36434:	cmp	sl, #0
   36438:	beq	363a8 <__assert_fail@plt+0x23db4>
   3643c:	mov	r1, sl
   36440:	mov	r0, r3
   36444:	bl	1230c <strchr@plt>
   36448:	cmp	r0, #0
   3644c:	movne	r6, #1
   36450:	movne	r7, #0
   36454:	beq	363a8 <__assert_fail@plt+0x23db4>
   36458:	mov	r1, sl
   3645c:	ldr	r0, [sp, #88]	; 0x58
   36460:	bl	1230c <strchr@plt>
   36464:	cmp	r0, #0
   36468:	beq	36f78 <__assert_fail@plt+0x24984>
   3646c:	sub	r3, sl, #69	; 0x45
   36470:	cmp	r3, #47	; 0x2f
   36474:	ldrls	pc, [pc, r3, lsl #2]
   36478:	b	3656c <__assert_fail@plt+0x23f78>
   3647c:	andeq	r6, r3, ip, lsr r5
   36480:	andeq	r6, r3, ip, ror #10
   36484:	andeq	r6, r3, ip, lsr r5
   36488:	andeq	r6, r3, ip, ror #10
   3648c:	andeq	r6, r3, ip, ror #10
   36490:	andeq	r6, r3, ip, ror #10
   36494:	andeq	r6, r3, ip, lsr r5
   36498:	andeq	r6, r3, ip, ror #10
   3649c:	andeq	r6, r3, ip, lsr r5
   364a0:	andeq	r6, r3, ip, ror #10
   364a4:	andeq	r6, r3, ip, ror #10
   364a8:	andeq	r6, r3, ip, lsr r5
   364ac:	andeq	r6, r3, ip, ror #10
   364b0:	andeq	r6, r3, ip, ror #10
   364b4:	andeq	r6, r3, ip, ror #10
   364b8:	andeq	r6, r3, ip, lsr r5
   364bc:	andeq	r6, r3, ip, ror #10
   364c0:	andeq	r6, r3, ip, ror #10
   364c4:	andeq	r6, r3, ip, ror #10
   364c8:	andeq	r6, r3, ip, ror #10
   364cc:	andeq	r6, r3, ip, lsr r5
   364d0:	andeq	r6, r3, ip, lsr r5
   364d4:	andeq	r6, r3, ip, ror #10
   364d8:	andeq	r6, r3, ip, ror #10
   364dc:	andeq	r6, r3, ip, ror #10
   364e0:	andeq	r6, r3, ip, ror #10
   364e4:	andeq	r6, r3, ip, ror #10
   364e8:	andeq	r6, r3, ip, ror #10
   364ec:	andeq	r6, r3, ip, ror #10
   364f0:	andeq	r6, r3, ip, ror #10
   364f4:	andeq	r6, r3, ip, ror #10
   364f8:	andeq	r6, r3, ip, ror #10
   364fc:	andeq	r6, r3, ip, ror #10
   36500:	andeq	r6, r3, ip, ror #10
   36504:	andeq	r6, r3, ip, lsr r5
   36508:	andeq	r6, r3, ip, ror #10
   3650c:	andeq	r6, r3, ip, ror #10
   36510:	andeq	r6, r3, ip, ror #10
   36514:	andeq	r6, r3, ip, lsr r5
   36518:	andeq	r6, r3, ip, ror #10
   3651c:	andeq	r6, r3, ip, lsr r5
   36520:	andeq	r6, r3, ip, ror #10
   36524:	andeq	r6, r3, ip, ror #10
   36528:	andeq	r6, r3, ip, ror #10
   3652c:	andeq	r6, r3, ip, ror #10
   36530:	andeq	r6, r3, ip, ror #10
   36534:	andeq	r6, r3, ip, ror #10
   36538:	andeq	r6, r3, ip, lsr r5
   3653c:	mov	r1, #48	; 0x30
   36540:	ldr	r0, [sp, #88]	; 0x58
   36544:	bl	1230c <strchr@plt>
   36548:	cmp	r0, #0
   3654c:	beq	36fe4 <__assert_fail@plt+0x249f0>
   36550:	ldrb	r3, [r9, #1]
   36554:	cmp	r3, #68	; 0x44
   36558:	beq	36f94 <__assert_fail@plt+0x249a0>
   3655c:	cmp	r3, #105	; 0x69
   36560:	beq	36fb4 <__assert_fail@plt+0x249c0>
   36564:	cmp	r3, #66	; 0x42
   36568:	beq	36f94 <__assert_fail@plt+0x249a0>
   3656c:	ldr	r3, [pc, #2860]	; 370a0 <__assert_fail@plt+0x24aac>
   36570:	mvn	r2, #0
   36574:	mov	r1, #1024	; 0x400
   36578:	mov	ip, #0
   3657c:	strd	r2, [sp]
   36580:	mov	r3, #1
   36584:	str	r3, [sp, #32]
   36588:	sub	sl, sl, #66	; 0x42
   3658c:	cmp	sl, #53	; 0x35
   36590:	ldrls	pc, [pc, sl, lsl #2]
   36594:	b	36f78 <__assert_fail@plt+0x24984>
   36598:	andeq	r6, r3, ip, lsr r9
   3659c:	andeq	r6, r3, r8, ror pc
   365a0:	andeq	r6, r3, r8, ror pc
   365a4:	andeq	r6, r3, r0, lsr #15
   365a8:	andeq	r6, r3, r8, ror pc
   365ac:	ldrdeq	r6, [r3], -r8
   365b0:	andeq	r6, r3, r8, ror pc
   365b4:	andeq	r6, r3, r8, ror pc
   365b8:	andeq	r6, r3, r8, ror pc
   365bc:			; <UNDEFINED> instruction: 0x000366b0
   365c0:	andeq	r6, r3, r8, ror pc
   365c4:	andeq	r6, r3, r4, ror #26
   365c8:	andeq	r6, r3, r8, ror pc
   365cc:	andeq	r6, r3, r8, ror pc
   365d0:	andeq	r6, r3, r4, ror #24
   365d4:	andeq	r6, r3, r8, ror pc
   365d8:	andeq	r6, r3, r8, ror pc
   365dc:	andeq	r6, r3, r8, ror pc
   365e0:	muleq	r3, r0, fp
   365e4:	andeq	r6, r3, r8, ror pc
   365e8:	andeq	r6, r3, r8, ror pc
   365ec:	andeq	r6, r3, r8, ror pc
   365f0:	andeq	r6, r3, r8, ror pc
   365f4:	andeq	r6, r3, ip, ror #18
   365f8:	ldrdeq	r6, [r3], -r8
   365fc:	andeq	r6, r3, r8, ror pc
   36600:	andeq	r6, r3, r8, ror pc
   36604:	andeq	r6, r3, r8, ror pc
   36608:	andeq	r6, r3, r8, ror pc
   3660c:	andeq	r6, r3, r8, ror pc
   36610:	andeq	r6, r3, r8, ror pc
   36614:	andeq	r6, r3, r8, ror pc
   36618:	andeq	r6, r3, r8, lsr #27
   3661c:	andeq	r6, r3, r8, lsr #13
   36620:	andeq	r6, r3, r8, ror pc
   36624:	andeq	r6, r3, r8, ror pc
   36628:	andeq	r6, r3, r8, ror pc
   3662c:	ldrdeq	r6, [r3], -r8
   36630:	andeq	r6, r3, r8, ror pc
   36634:	andeq	r6, r3, r8, ror pc
   36638:	andeq	r6, r3, r8, ror pc
   3663c:			; <UNDEFINED> instruction: 0x000366b0
   36640:	andeq	r6, r3, r8, ror pc
   36644:	andeq	r6, r3, r4, ror #26
   36648:	andeq	r6, r3, r8, ror pc
   3664c:	andeq	r6, r3, r8, ror pc
   36650:	andeq	r6, r3, r8, ror pc
   36654:	andeq	r6, r3, r8, ror pc
   36658:	andeq	r6, r3, r8, ror pc
   3665c:	andeq	r6, r3, r8, ror pc
   36660:	muleq	r3, r0, fp
   36664:	andeq	r6, r3, r8, ror pc
   36668:	andeq	r6, r3, r8, ror pc
   3666c:	andeq	r6, r3, r0, ror r6
   36670:	cmp	r6, #0
   36674:	sbcs	r3, r7, #0
   36678:	blt	36f84 <__assert_fail@plt+0x24990>
   3667c:	adds	r6, r6, r6
   36680:	adc	r7, r7, r7
   36684:	mov	lr, #0
   36688:	ldr	r2, [sp, #32]
   3668c:	orr	r4, r4, lr
   36690:	add	r3, r9, r2
   36694:	str	r3, [r5]
   36698:	ldrb	r3, [r9, r2]
   3669c:	cmp	r3, #0
   366a0:	orrne	r4, r4, #2
   366a4:	b	36404 <__assert_fail@plt+0x23e10>
   366a8:	mov	lr, #0
   366ac:	b	36688 <__assert_fail@plt+0x24094>
   366b0:	ldrd	r2, [sp]
   366b4:	cmp	r7, r3
   366b8:	cmpeq	r6, r2
   366bc:	bhi	36f84 <__assert_fail@plt+0x24990>
   366c0:	mul	r3, r6, ip
   366c4:	mov	lr, #0
   366c8:	mla	r3, r1, r7, r3
   366cc:	umull	r6, r7, r6, r1
   366d0:	add	r7, r3, r7
   366d4:	b	36688 <__assert_fail@plt+0x24094>
   366d8:	mul	r0, r1, r7
   366dc:	ldrd	sl, [sp]
   366e0:	umull	r2, r3, r1, r6
   366e4:	mla	r0, ip, r6, r0
   366e8:	cmp	r7, fp
   366ec:	cmpeq	r6, sl
   366f0:	add	r3, r0, r3
   366f4:	mvnhi	r2, #0
   366f8:	mvnhi	r3, #0
   366fc:	mov	sl, r2
   36700:	mov	fp, r3
   36704:	mul	r0, r1, r3
   36708:	strd	r2, [sp, #16]
   3670c:	umull	r2, r3, r1, r2
   36710:	mla	r0, ip, sl, r0
   36714:	strd	r2, [sp, #8]
   36718:	ldrd	r2, [sp]
   3671c:	cmp	fp, r3
   36720:	ldr	r3, [sp, #12]
   36724:	cmpeq	sl, r2
   36728:	add	r3, r0, r3
   3672c:	str	r3, [sp, #12]
   36730:	mvnhi	sl, #0
   36734:	mvnhi	fp, #0
   36738:	ldrdls	sl, [sp, #8]
   3673c:	ldrd	r2, [sp]
   36740:	mul	r0, r1, fp
   36744:	cmp	r7, r3
   36748:	mla	lr, ip, sl, r0
   3674c:	cmpeq	r6, r2
   36750:	ldrd	r6, [sp]
   36754:	umull	r2, r3, r1, sl
   36758:	ldrd	r0, [sp, #16]
   3675c:	movhi	ip, #1
   36760:	movls	ip, #0
   36764:	cmp	r1, r7
   36768:	cmpeq	r0, r6
   3676c:	orrhi	ip, ip, #1
   36770:	cmp	r7, fp
   36774:	cmpeq	r6, sl
   36778:	mvncc	r2, #0
   3677c:	add	r3, lr, r3
   36780:	movcc	r3, r2
   36784:	cmp	r7, fp
   36788:	cmpeq	r6, sl
   3678c:	mov	r7, r3
   36790:	mov	r6, r2
   36794:	movcs	lr, ip
   36798:	orrcc	lr, ip, #1
   3679c:	b	36688 <__assert_fail@plt+0x24094>
   367a0:	ldrd	sl, [sp]
   367a4:	umull	r2, r3, r1, r6
   367a8:	mul	r0, r1, r7
   367ac:	cmp	r7, fp
   367b0:	cmpeq	r6, sl
   367b4:	mvnhi	r2, #0
   367b8:	mla	r0, ip, r6, r0
   367bc:	umull	sl, fp, r1, r2
   367c0:	add	r3, r0, r3
   367c4:	mvnhi	r3, #0
   367c8:	strd	sl, [sp, #8]
   367cc:	mul	r0, r1, r3
   367d0:	ldrd	sl, [sp]
   367d4:	mla	r0, ip, r2, r0
   367d8:	ldr	lr, [sp, #12]
   367dc:	cmp	r3, fp
   367e0:	add	r0, r0, lr
   367e4:	cmpeq	r2, sl
   367e8:	str	r0, [sp, #12]
   367ec:	bls	36804 <__assert_fail@plt+0x24210>
   367f0:	mvn	sl, #0
   367f4:	mvn	fp, #0
   367f8:	strd	sl, [sp, #8]
   367fc:	ldr	r0, [sp, #12]
   36800:	ldrd	sl, [sp]
   36804:	cmp	r7, fp
   36808:	cmpeq	r6, sl
   3680c:	mul	r0, r1, r0
   36810:	ldrd	r6, [sp, #8]
   36814:	mla	lr, ip, r6, r0
   36818:	mov	r0, r6
   3681c:	movhi	r0, #1
   36820:	movls	r0, #0
   36824:	cmp	r3, fp
   36828:	cmpeq	r2, sl
   3682c:	ldrd	r2, [sp, #8]
   36830:	umull	r6, r7, r1, r6
   36834:	orrhi	r0, r0, #1
   36838:	cmp	fp, r3
   3683c:	cmpeq	sl, r2
   36840:	add	r7, lr, r7
   36844:	bcc	3706c <__assert_fail@plt+0x24a78>
   36848:	mov	sl, r6
   3684c:	mov	fp, r7
   36850:	strd	r6, [sp, #16]
   36854:	mul	r3, r1, fp
   36858:	umull	r6, r7, r1, sl
   3685c:	mla	r3, ip, sl, r3
   36860:	str	r3, [sp, #36]	; 0x24
   36864:	ldrd	r2, [sp]
   36868:	mov	sl, r2
   3686c:	mov	fp, r3
   36870:	strd	r2, [sp, #24]
   36874:	ldrd	r2, [sp, #8]
   36878:	cmp	fp, r3
   3687c:	cmpeq	sl, r2
   36880:	ldrd	r2, [sp, #24]
   36884:	ldrd	sl, [sp, #16]
   36888:	movcs	lr, r0
   3688c:	orrcc	lr, r0, #1
   36890:	cmp	fp, r3
   36894:	cmpeq	sl, r2
   36898:	mvnhi	r6, #0
   3689c:	ldr	r3, [sp, #36]	; 0x24
   368a0:	umull	sl, fp, r1, r6
   368a4:	add	r7, r3, r7
   368a8:	mvnhi	r7, #0
   368ac:	strd	sl, [sp, #8]
   368b0:	mul	r3, r1, r7
   368b4:	ldrd	sl, [sp, #16]
   368b8:	mla	r0, ip, r6, r3
   368bc:	ldrd	r2, [sp]
   368c0:	cmp	fp, r3
   368c4:	cmpeq	sl, r2
   368c8:	orrhi	lr, lr, #1
   368cc:	cmp	r7, r3
   368d0:	ldr	r3, [sp, #12]
   368d4:	cmpeq	r6, r2
   368d8:	add	r3, r0, r3
   368dc:	str	r3, [sp, #12]
   368e0:	mvnhi	r2, #0
   368e4:	mvnhi	r3, #0
   368e8:	ldrdls	r2, [sp, #8]
   368ec:	mul	r0, r1, r3
   368f0:	ldrd	sl, [sp]
   368f4:	str	r0, [sp, #8]
   368f8:	cmp	r7, fp
   368fc:	cmpeq	r6, sl
   36900:	ldr	r6, [sp, #8]
   36904:	umull	r0, r1, r1, r2
   36908:	mla	ip, ip, r2, r6
   3690c:	orrhi	lr, lr, #1
   36910:	cmp	r3, fp
   36914:	cmpeq	r2, sl
   36918:	mvnhi	r0, #0
   3691c:	add	r1, ip, r1
   36920:	movhi	r1, r0
   36924:	cmp	r3, fp
   36928:	cmpeq	r2, sl
   3692c:	mov	r6, r0
   36930:	mov	r7, r1
   36934:	orrhi	lr, lr, #1
   36938:	b	36688 <__assert_fail@plt+0x24094>
   3693c:	ldr	r3, [pc, #1884]	; 370a0 <__assert_fail@plt+0x24aac>
   36940:	mvn	r2, #0
   36944:	cmp	r7, r3
   36948:	cmpeq	r6, r2
   3694c:	bhi	36f84 <__assert_fail@plt+0x24990>
   36950:	lsl	r3, r7, #10
   36954:	orr	r3, r3, r6, lsr #22
   36958:	lsl	r2, r6, #10
   3695c:	mov	r6, r2
   36960:	mov	r7, r3
   36964:	mov	lr, #0
   36968:	b	36688 <__assert_fail@plt+0x24094>
   3696c:	ldrd	sl, [sp]
   36970:	umull	r2, r3, r1, r6
   36974:	mul	r0, r1, r7
   36978:	cmp	r7, fp
   3697c:	cmpeq	r6, sl
   36980:	mvnhi	r2, #0
   36984:	mla	r0, ip, r6, r0
   36988:	umull	sl, fp, r1, r2
   3698c:	add	r3, r0, r3
   36990:	mvnhi	r3, #0
   36994:	strd	sl, [sp, #8]
   36998:	mul	r0, r1, r3
   3699c:	ldrd	sl, [sp]
   369a0:	mla	r0, ip, r2, r0
   369a4:	ldr	lr, [sp, #12]
   369a8:	cmp	fp, r3
   369ac:	add	r0, r0, lr
   369b0:	cmpeq	sl, r2
   369b4:	str	r0, [sp, #12]
   369b8:	bcs	369d0 <__assert_fail@plt+0x243dc>
   369bc:	mvn	sl, #0
   369c0:	mvn	fp, #0
   369c4:	strd	sl, [sp, #8]
   369c8:	ldr	r0, [sp, #12]
   369cc:	ldrd	sl, [sp]
   369d0:	cmp	r7, fp
   369d4:	cmpeq	r6, sl
   369d8:	mul	r0, r1, r0
   369dc:	ldrd	r6, [sp, #8]
   369e0:	mla	lr, ip, r6, r0
   369e4:	mov	r0, r6
   369e8:	movhi	r0, #1
   369ec:	movls	r0, #0
   369f0:	cmp	fp, r3
   369f4:	cmpeq	sl, r2
   369f8:	ldrd	r2, [sp, #8]
   369fc:	umull	r6, r7, r1, r6
   36a00:	orrcc	r0, r0, #1
   36a04:	cmp	fp, r3
   36a08:	cmpeq	sl, r2
   36a0c:	add	r7, lr, r7
   36a10:	bcc	37040 <__assert_fail@plt+0x24a4c>
   36a14:	strd	r6, [sp, #16]
   36a18:	mov	r6, r2
   36a1c:	mov	r7, r3
   36a20:	ldr	r3, [sp, #20]
   36a24:	ldr	r2, [sp, #16]
   36a28:	mul	r3, r1, r3
   36a2c:	umull	sl, fp, r1, r2
   36a30:	mla	lr, ip, r2, r3
   36a34:	ldrd	r2, [sp]
   36a38:	cmp	r3, r7
   36a3c:	cmpeq	r2, r6
   36a40:	ldrd	r6, [sp, #16]
   36a44:	orrcc	r0, r0, #1
   36a48:	cmp	r3, r7
   36a4c:	cmpeq	r2, r6
   36a50:	add	r3, lr, fp
   36a54:	mov	fp, r3
   36a58:	bcc	37028 <__assert_fail@plt+0x24a34>
   36a5c:	strd	sl, [sp, #24]
   36a60:	umull	r2, r3, r1, sl
   36a64:	mul	lr, r1, fp
   36a68:	strd	r2, [sp, #8]
   36a6c:	mov	r6, sl
   36a70:	ldrd	r2, [sp, #16]
   36a74:	mov	r7, fp
   36a78:	mla	lr, ip, sl, lr
   36a7c:	ldrd	sl, [sp]
   36a80:	cmp	fp, r3
   36a84:	cmpeq	sl, r2
   36a88:	ldr	r2, [sp, #12]
   36a8c:	orrcc	r0, r0, #1
   36a90:	cmp	fp, r7
   36a94:	add	r3, lr, r2
   36a98:	cmpeq	sl, r6
   36a9c:	str	r3, [sp, #12]
   36aa0:	bcc	37054 <__assert_fail@plt+0x24a60>
   36aa4:	ldrd	r2, [sp, #8]
   36aa8:	mov	sl, r2
   36aac:	mov	fp, r3
   36ab0:	mul	r3, r1, fp
   36ab4:	umull	r6, r7, r1, sl
   36ab8:	mla	r3, ip, sl, r3
   36abc:	ldrd	sl, [sp]
   36ac0:	str	r3, [sp, #16]
   36ac4:	ldrd	r2, [sp, #24]
   36ac8:	cmp	fp, r3
   36acc:	cmpeq	sl, r2
   36ad0:	mov	r3, fp
   36ad4:	mov	r2, sl
   36ad8:	ldrd	sl, [sp, #8]
   36adc:	movcs	lr, r0
   36ae0:	orrcc	lr, r0, #1
   36ae4:	cmp	r3, fp
   36ae8:	cmpeq	r2, sl
   36aec:	mvncc	r6, #0
   36af0:	ldr	r3, [sp, #16]
   36af4:	umull	sl, fp, r1, r6
   36af8:	add	r7, r3, r7
   36afc:	mvncc	r7, #0
   36b00:	strd	sl, [sp, #16]
   36b04:	mul	r3, r1, r7
   36b08:	ldrd	sl, [sp, #8]
   36b0c:	mla	r0, ip, r6, r3
   36b10:	ldrd	r2, [sp]
   36b14:	cmp	r3, fp
   36b18:	cmpeq	r2, sl
   36b1c:	orrcc	lr, lr, #1
   36b20:	cmp	r3, r7
   36b24:	ldr	r3, [sp, #20]
   36b28:	cmpeq	r2, r6
   36b2c:	add	r3, r0, r3
   36b30:	str	r3, [sp, #20]
   36b34:	mvncc	r2, #0
   36b38:	mvncc	r3, #0
   36b3c:	ldrdcs	r2, [sp, #16]
   36b40:	mul	r0, r1, r3
   36b44:	ldrd	sl, [sp]
   36b48:	str	r0, [sp, #8]
   36b4c:	umull	r0, r1, r1, r2
   36b50:	cmp	fp, r7
   36b54:	cmpeq	sl, r6
   36b58:	ldr	r6, [sp, #8]
   36b5c:	mla	ip, ip, r2, r6
   36b60:	orrcc	lr, lr, #1
   36b64:	cmp	fp, r3
   36b68:	cmpeq	sl, r2
   36b6c:	mvncc	r0, #0
   36b70:	add	r1, ip, r1
   36b74:	movcc	r1, r0
   36b78:	cmp	fp, r3
   36b7c:	cmpeq	sl, r2
   36b80:	mov	r6, r0
   36b84:	mov	r7, r1
   36b88:	orrcc	lr, lr, #1
   36b8c:	b	36688 <__assert_fail@plt+0x24094>
   36b90:	ldrd	sl, [sp]
   36b94:	umull	r2, r3, r1, r6
   36b98:	mul	r0, r1, r7
   36b9c:	cmp	r7, fp
   36ba0:	cmpeq	r6, sl
   36ba4:	mvnhi	r2, #0
   36ba8:	mla	r0, ip, r6, r0
   36bac:	umull	sl, fp, r1, r2
   36bb0:	add	r3, r0, r3
   36bb4:	mvnhi	r3, #0
   36bb8:	strd	sl, [sp, #8]
   36bbc:	mul	r0, r1, r3
   36bc0:	ldrd	sl, [sp]
   36bc4:	mla	r0, ip, r2, r0
   36bc8:	ldr	lr, [sp, #12]
   36bcc:	cmp	fp, r3
   36bd0:	add	r0, r0, lr
   36bd4:	cmpeq	sl, r2
   36bd8:	str	r0, [sp, #12]
   36bdc:	bcs	36bf4 <__assert_fail@plt+0x24600>
   36be0:	mvn	sl, #0
   36be4:	mvn	fp, #0
   36be8:	strd	sl, [sp, #8]
   36bec:	ldr	r0, [sp, #12]
   36bf0:	ldrd	sl, [sp]
   36bf4:	cmp	r7, fp
   36bf8:	cmpeq	r6, sl
   36bfc:	ldrd	r6, [sp, #8]
   36c00:	mul	r0, r1, r0
   36c04:	mov	lr, r6
   36c08:	movhi	lr, #1
   36c0c:	movls	lr, #0
   36c10:	cmp	fp, r3
   36c14:	mla	r0, ip, r6, r0
   36c18:	cmpeq	sl, r2
   36c1c:	umull	r6, r7, r1, r6
   36c20:	ldrd	r2, [sp, #8]
   36c24:	orrcc	lr, lr, #1
   36c28:	add	r7, r0, r7
   36c2c:	cmp	fp, r3
   36c30:	cmpeq	sl, r2
   36c34:	movcs	r3, r7
   36c38:	mvncc	r3, #0
   36c3c:	movcs	r2, r6
   36c40:	mul	r0, r1, r3
   36c44:	mvncc	r2, #0
   36c48:	str	r0, [sp, #16]
   36c4c:	ldrd	r6, [sp, #8]
   36c50:	umull	r0, r1, r1, r2
   36c54:	cmp	fp, r7
   36c58:	cmpeq	sl, r6
   36c5c:	ldr	r6, [sp, #16]
   36c60:	b	36b5c <__assert_fail@plt+0x24568>
   36c64:	ldrd	sl, [sp]
   36c68:	umull	r2, r3, r1, r6
   36c6c:	mul	r0, r1, r7
   36c70:	cmp	r7, fp
   36c74:	cmpeq	r6, sl
   36c78:	mvnhi	r2, #0
   36c7c:	mla	r0, ip, r6, r0
   36c80:	umull	sl, fp, r1, r2
   36c84:	add	r3, r0, r3
   36c88:	mvnhi	r3, #0
   36c8c:	strd	sl, [sp, #8]
   36c90:	mul	r0, r1, r3
   36c94:	ldrd	sl, [sp]
   36c98:	mla	r0, ip, r2, r0
   36c9c:	ldr	lr, [sp, #12]
   36ca0:	cmp	fp, r3
   36ca4:	add	r0, r0, lr
   36ca8:	cmpeq	sl, r2
   36cac:	str	r0, [sp, #12]
   36cb0:	bcs	36cc8 <__assert_fail@plt+0x246d4>
   36cb4:	mvn	sl, #0
   36cb8:	mvn	fp, #0
   36cbc:	strd	sl, [sp, #8]
   36cc0:	ldr	r0, [sp, #12]
   36cc4:	ldrd	sl, [sp]
   36cc8:	cmp	fp, r3
   36ccc:	cmpeq	sl, r2
   36cd0:	mul	r0, r1, r0
   36cd4:	ldr	r2, [sp, #8]
   36cd8:	movcc	lr, #1
   36cdc:	movcs	lr, #0
   36ce0:	cmp	r7, fp
   36ce4:	cmpeq	r6, sl
   36ce8:	ldrd	r6, [sp, #8]
   36cec:	mla	r0, ip, r2, r0
   36cf0:	umull	r2, r3, r1, r2
   36cf4:	orrhi	lr, lr, #1
   36cf8:	cmp	r7, fp
   36cfc:	cmpeq	r6, sl
   36d00:	add	r3, r0, r3
   36d04:	mvnhi	r2, #0
   36d08:	mvnhi	r3, #0
   36d0c:	strd	r2, [sp, #16]
   36d10:	ldr	r3, [sp, #20]
   36d14:	ldr	r2, [sp, #16]
   36d18:	mul	r3, r1, r3
   36d1c:	umull	sl, fp, r1, r2
   36d20:	mla	r0, ip, r2, r3
   36d24:	ldrd	r2, [sp]
   36d28:	cmp	r7, r3
   36d2c:	cmpeq	r6, r2
   36d30:	ldrd	r6, [sp, #16]
   36d34:	orrhi	lr, lr, #1
   36d38:	cmp	r7, r3
   36d3c:	cmpeq	r6, r2
   36d40:	add	r3, r0, fp
   36d44:	mvnhi	r3, #0
   36d48:	movls	r2, sl
   36d4c:	mul	r6, r1, r3
   36d50:	mvnhi	r2, #0
   36d54:	str	r6, [sp, #8]
   36d58:	ldrd	sl, [sp]
   36d5c:	ldrd	r6, [sp, #16]
   36d60:	b	368f8 <__assert_fail@plt+0x24304>
   36d64:	ldrd	sl, [sp]
   36d68:	cmp	r7, fp
   36d6c:	cmpeq	r6, sl
   36d70:	bhi	37018 <__assert_fail@plt+0x24a24>
   36d74:	mul	r0, r1, r7
   36d78:	umull	r2, r3, r1, r6
   36d7c:	mla	r6, ip, r6, r0
   36d80:	add	r3, r6, r3
   36d84:	cmp	fp, r3
   36d88:	cmpeq	sl, r2
   36d8c:	bcc	37018 <__assert_fail@plt+0x24a24>
   36d90:	mul	r3, r1, r3
   36d94:	umull	r6, r7, r1, r2
   36d98:	mla	r2, ip, r2, r3
   36d9c:	mov	lr, #0
   36da0:	add	r7, r2, r7
   36da4:	b	36688 <__assert_fail@plt+0x24094>
   36da8:	ldr	r3, [pc, #756]	; 370a4 <__assert_fail@plt+0x24ab0>
   36dac:	mvn	r2, #0
   36db0:	cmp	r7, r3
   36db4:	cmpeq	r6, r2
   36db8:	bhi	36f84 <__assert_fail@plt+0x24990>
   36dbc:	lsl	r3, r7, #9
   36dc0:	orr	r3, r3, r6, lsr #23
   36dc4:	lsl	r2, r6, #9
   36dc8:	mov	r6, r2
   36dcc:	mov	r7, r3
   36dd0:	mov	lr, #0
   36dd4:	b	36688 <__assert_fail@plt+0x24094>
   36dd8:	ldrd	sl, [sp]
   36ddc:	umull	r2, r3, r1, r6
   36de0:	mul	r0, r1, r7
   36de4:	cmp	r7, fp
   36de8:	cmpeq	r6, sl
   36dec:	mvnhi	r2, #0
   36df0:	mla	r0, ip, r6, r0
   36df4:	umull	sl, fp, r1, r2
   36df8:	add	r3, r0, r3
   36dfc:	mvnhi	r3, #0
   36e00:	strd	sl, [sp, #8]
   36e04:	mul	r0, r1, r3
   36e08:	ldrd	sl, [sp]
   36e0c:	mla	r0, ip, r2, r0
   36e10:	ldr	lr, [sp, #12]
   36e14:	cmp	fp, r3
   36e18:	add	r0, r0, lr
   36e1c:	cmpeq	sl, r2
   36e20:	str	r0, [sp, #12]
   36e24:	bcs	36e3c <__assert_fail@plt+0x24848>
   36e28:	mvn	sl, #0
   36e2c:	mvn	fp, #0
   36e30:	strd	sl, [sp, #8]
   36e34:	ldr	r0, [sp, #12]
   36e38:	ldrd	sl, [sp]
   36e3c:	cmp	r7, fp
   36e40:	cmpeq	r6, sl
   36e44:	mul	r0, r1, r0
   36e48:	ldrd	r6, [sp, #8]
   36e4c:	mla	lr, ip, r6, r0
   36e50:	mov	r0, r6
   36e54:	movhi	r0, #1
   36e58:	movls	r0, #0
   36e5c:	cmp	fp, r3
   36e60:	cmpeq	sl, r2
   36e64:	ldrd	r2, [sp, #8]
   36e68:	umull	r6, r7, r1, r6
   36e6c:	orrcc	r0, r0, #1
   36e70:	cmp	fp, r3
   36e74:	cmpeq	sl, r2
   36e78:	add	r7, lr, r7
   36e7c:	bcc	37004 <__assert_fail@plt+0x24a10>
   36e80:	strd	r6, [sp, #16]
   36e84:	mov	r6, r2
   36e88:	mov	r7, r3
   36e8c:	ldr	r3, [sp, #20]
   36e90:	ldr	r2, [sp, #16]
   36e94:	mul	r3, r1, r3
   36e98:	umull	sl, fp, r1, r2
   36e9c:	mla	lr, ip, r2, r3
   36ea0:	ldrd	r2, [sp]
   36ea4:	cmp	r3, r7
   36ea8:	cmpeq	r2, r6
   36eac:	ldrd	r6, [sp, #16]
   36eb0:	orrcc	r0, r0, #1
   36eb4:	cmp	r3, r7
   36eb8:	cmpeq	r2, r6
   36ebc:	mvncc	r2, #0
   36ec0:	movcs	r6, sl
   36ec4:	movcc	r6, r2
   36ec8:	add	r3, lr, fp
   36ecc:	mvncc	r3, #0
   36ed0:	movcs	r7, r3
   36ed4:	movcc	r7, r3
   36ed8:	umull	r2, r3, r1, r6
   36edc:	mul	lr, r1, r7
   36ee0:	strd	r2, [sp, #8]
   36ee4:	mla	r3, ip, r6, lr
   36ee8:	ldrd	sl, [sp]
   36eec:	str	r3, [sp, #24]
   36ef0:	ldrd	r2, [sp, #16]
   36ef4:	cmp	fp, r3
   36ef8:	cmpeq	sl, r2
   36efc:	ldr	r3, [sp, #24]
   36f00:	ldr	r2, [sp, #12]
   36f04:	movcs	lr, r0
   36f08:	orrcc	lr, r0, #1
   36f0c:	cmp	fp, r7
   36f10:	add	r3, r3, r2
   36f14:	cmpeq	sl, r6
   36f18:	str	r3, [sp, #12]
   36f1c:	mvncc	r3, #0
   36f20:	mvncc	r2, #0
   36f24:	strdcc	r2, [sp, #8]
   36f28:	ldrcc	r3, [sp, #12]
   36f2c:	ldr	r2, [sp, #8]
   36f30:	mul	r3, r1, r3
   36f34:	umull	sl, fp, r1, r2
   36f38:	mla	r0, ip, r2, r3
   36f3c:	ldrd	r2, [sp]
   36f40:	cmp	r3, r7
   36f44:	cmpeq	r2, r6
   36f48:	ldrd	r6, [sp, #8]
   36f4c:	orrcc	lr, lr, #1
   36f50:	cmp	r3, r7
   36f54:	cmpeq	r2, r6
   36f58:	add	r3, r0, fp
   36f5c:	mvncc	r3, #0
   36f60:	movcs	r2, sl
   36f64:	mul	r6, r1, r3
   36f68:	mvncc	r2, #0
   36f6c:	str	r6, [sp, #16]
   36f70:	ldrd	sl, [sp]
   36f74:	b	36c4c <__assert_fail@plt+0x24658>
   36f78:	strd	r6, [r8]
   36f7c:	orr	r4, r4, #2
   36f80:	b	363ac <__assert_fail@plt+0x23db8>
   36f84:	mvn	r6, #0
   36f88:	mvn	r7, #0
   36f8c:	mov	lr, #1
   36f90:	b	36688 <__assert_fail@plt+0x24094>
   36f94:	add	r3, pc, #252	; 0xfc
   36f98:	ldrd	r2, [r3]
   36f9c:	mov	r1, #1000	; 0x3e8
   36fa0:	mov	ip, #0
   36fa4:	strd	r2, [sp]
   36fa8:	mov	r3, #2
   36fac:	str	r3, [sp, #32]
   36fb0:	b	36588 <__assert_fail@plt+0x23f94>
   36fb4:	ldrb	r3, [r9, #2]
   36fb8:	mvn	r2, #0
   36fbc:	mov	r1, #1024	; 0x400
   36fc0:	cmp	r3, #66	; 0x42
   36fc4:	ldr	r3, [pc, #212]	; 370a0 <__assert_fail@plt+0x24aac>
   36fc8:	mov	ip, #0
   36fcc:	strd	r2, [sp]
   36fd0:	moveq	r3, #3
   36fd4:	streq	r3, [sp, #32]
   36fd8:	movne	r3, #1
   36fdc:	strne	r3, [sp, #32]
   36fe0:	b	36588 <__assert_fail@plt+0x23f94>
   36fe4:	ldr	r3, [pc, #180]	; 370a0 <__assert_fail@plt+0x24aac>
   36fe8:	mvn	r2, #0
   36fec:	mov	ip, r0
   36ff0:	strd	r2, [sp]
   36ff4:	mov	r3, #1
   36ff8:	mov	r1, #1024	; 0x400
   36ffc:	str	r3, [sp, #32]
   37000:	b	36588 <__assert_fail@plt+0x23f94>
   37004:	mvn	r2, #0
   37008:	mvn	r3, #0
   3700c:	ldrd	r6, [sp, #8]
   37010:	strd	r2, [sp, #16]
   37014:	b	36e8c <__assert_fail@plt+0x24898>
   37018:	mov	lr, #1
   3701c:	mvn	r6, #0
   37020:	mvn	r7, #0
   37024:	b	36688 <__assert_fail@plt+0x24094>
   37028:	mvn	r2, #0
   3702c:	mvn	r3, #0
   37030:	mov	sl, r2
   37034:	strd	r2, [sp, #24]
   37038:	mov	fp, r3
   3703c:	b	36a60 <__assert_fail@plt+0x2446c>
   37040:	mvn	r2, #0
   37044:	mvn	r3, #0
   37048:	ldrd	r6, [sp, #8]
   3704c:	strd	r2, [sp, #16]
   37050:	b	36a20 <__assert_fail@plt+0x2442c>
   37054:	mvn	r2, #0
   37058:	mvn	r3, #0
   3705c:	mov	sl, r2
   37060:	strd	r2, [sp, #8]
   37064:	mov	fp, r3
   37068:	b	36ab0 <__assert_fail@plt+0x244bc>
   3706c:	mvn	r2, #0
   37070:	mvn	r3, #0
   37074:	mov	sl, r2
   37078:	strd	r2, [sp, #16]
   3707c:	mov	fp, r3
   37080:	b	36854 <__assert_fail@plt+0x24260>
   37084:	ldr	r3, [pc, #28]	; 370a8 <__assert_fail@plt+0x24ab4>
   37088:	mov	r2, #84	; 0x54
   3708c:	ldr	r1, [pc, #24]	; 370ac <__assert_fail@plt+0x24ab8>
   37090:	ldr	r0, [pc, #24]	; 370b0 <__assert_fail@plt+0x24abc>
   37094:	bl	125f4 <__assert_fail@plt>
   37098:	blmi	ff1e105c <stdout@@GLIBC_2.4+0xff17cb08>
   3709c:	subeq	r8, r1, r7, lsr r9
   370a0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   370a4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   370a8:	andeq	r3, r5, r4, asr #17
   370ac:	muleq	r5, r0, r8
   370b0:	muleq	r5, ip, r8
   370b4:	push	{r4, lr}
   370b8:	sub	sp, sp, #8
   370bc:	ldr	r3, [pc, #96]	; 37124 <__assert_fail@plt+0x24b30>
   370c0:	add	r1, sp, #8
   370c4:	mov	r4, #0
   370c8:	ldr	r3, [r3]
   370cc:	str	r4, [r1, #-4]!
   370d0:	mov	r2, #10
   370d4:	mov	r0, sp
   370d8:	str	r4, [sp]
   370dc:	bl	11f10 <__getdelim@plt>
   370e0:	subs	r3, r0, #0
   370e4:	ble	37110 <__assert_fail@plt+0x24b1c>
   370e8:	ldr	r0, [sp]
   370ec:	sub	r3, r3, #1
   370f0:	ldrb	r2, [r0, r3]
   370f4:	cmp	r2, #10
   370f8:	strbeq	r4, [r0, r3]
   370fc:	ldreq	r0, [sp]
   37100:	bl	12438 <rpmatch@plt>
   37104:	cmp	r0, #0
   37108:	movle	r4, #0
   3710c:	movgt	r4, #1
   37110:	ldr	r0, [sp]
   37114:	bl	376d0 <__assert_fail@plt+0x250dc>
   37118:	mov	r0, r4
   3711c:	add	sp, sp, #8
   37120:	pop	{r4, pc}
   37124:	andeq	r4, r6, r0, asr r5
   37128:	cmp	r1, #0
   3712c:	cmpne	r0, #0
   37130:	moveq	r1, #1
   37134:	moveq	r0, r1
   37138:	umull	r2, r3, r0, r1
   3713c:	adds	r3, r3, #0
   37140:	movne	r3, #1
   37144:	cmp	r2, #0
   37148:	blt	37158 <__assert_fail@plt+0x24b64>
   3714c:	cmp	r3, #0
   37150:	bne	37158 <__assert_fail@plt+0x24b64>
   37154:	b	11ec8 <calloc@plt>
   37158:	push	{r4, lr}
   3715c:	bl	12348 <__errno_location@plt>
   37160:	mov	r3, #12
   37164:	str	r3, [r0]
   37168:	mov	r0, #0
   3716c:	pop	{r4, pc}
   37170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37174:	sub	sp, sp, #12
   37178:	mov	r9, r0
   3717c:	bl	12120 <chdir@plt>
   37180:	subs	r4, r0, #0
   37184:	beq	3719c <__assert_fail@plt+0x24ba8>
   37188:	bl	12348 <__errno_location@plt>
   3718c:	ldr	r3, [r0]
   37190:	str	r0, [sp, #4]
   37194:	cmp	r3, #36	; 0x24
   37198:	beq	371a8 <__assert_fail@plt+0x24bb4>
   3719c:	mov	r0, r4
   371a0:	add	sp, sp, #12
   371a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   371a8:	mov	r0, r9
   371ac:	bl	12300 <strlen@plt>
   371b0:	subs	r6, r0, #0
   371b4:	beq	37450 <__assert_fail@plt+0x24e5c>
   371b8:	cmp	r6, #4096	; 0x1000
   371bc:	bcc	37464 <__assert_fail@plt+0x24e70>
   371c0:	ldr	r1, [pc, #688]	; 37478 <__assert_fail@plt+0x24e84>
   371c4:	mov	r0, r9
   371c8:	bl	125e8 <strspn@plt>
   371cc:	cmp	r0, #2
   371d0:	mov	r4, r0
   371d4:	beq	372e0 <__assert_fail@plt+0x24cec>
   371d8:	cmp	r0, #0
   371dc:	moveq	r4, r9
   371e0:	mvneq	r5, #99	; 0x63
   371e4:	bne	373bc <__assert_fail@plt+0x24dc8>
   371e8:	ldrb	r3, [r4]
   371ec:	cmp	r3, #47	; 0x2f
   371f0:	beq	3743c <__assert_fail@plt+0x24e48>
   371f4:	add	r9, r9, r6
   371f8:	cmp	r4, r9
   371fc:	bhi	37428 <__assert_fail@plt+0x24e34>
   37200:	ldr	r6, [pc, #628]	; 3747c <__assert_fail@plt+0x24e88>
   37204:	sub	r3, r9, r4
   37208:	cmp	r3, r6
   3720c:	movle	r8, r5
   37210:	ble	37334 <__assert_fail@plt+0x24d40>
   37214:	mov	sl, #4096	; 0x1000
   37218:	mov	r7, #47	; 0x2f
   3721c:	b	3725c <__assert_fail@plt+0x24c68>
   37220:	cmp	r5, #0
   37224:	blt	37238 <__assert_fail@plt+0x24c44>
   37228:	mov	r0, r5
   3722c:	bl	125ac <close@plt>
   37230:	cmp	r0, #0
   37234:	bne	37424 <__assert_fail@plt+0x24e30>
   37238:	strb	r7, [fp], #1
   3723c:	ldr	r1, [pc, #564]	; 37478 <__assert_fail@plt+0x24e84>
   37240:	mov	r0, fp
   37244:	bl	125e8 <strspn@plt>
   37248:	mov	r5, r8
   3724c:	add	r4, fp, r0
   37250:	sub	r3, r9, r4
   37254:	cmp	r3, r6
   37258:	ble	37334 <__assert_fail@plt+0x24d40>
   3725c:	mov	r2, sl
   37260:	mov	r1, r7
   37264:	mov	r0, r4
   37268:	bl	12330 <memrchr@plt>
   3726c:	subs	fp, r0, #0
   37270:	beq	37388 <__assert_fail@plt+0x24d94>
   37274:	sub	r3, fp, r4
   37278:	cmp	r3, r6
   3727c:	mov	r3, #0
   37280:	strb	r3, [fp]
   37284:	bgt	37410 <__assert_fail@plt+0x24e1c>
   37288:	mov	r1, r4
   3728c:	mov	r2, #18688	; 0x4900
   37290:	mov	r0, r5
   37294:	bl	12324 <openat64@plt>
   37298:	subs	r8, r0, #0
   3729c:	bge	37220 <__assert_fail@plt+0x24c2c>
   372a0:	mov	r2, #47	; 0x2f
   372a4:	strb	r2, [fp]
   372a8:	ldr	r3, [sp, #4]
   372ac:	cmp	r5, #0
   372b0:	ldr	r4, [r3]
   372b4:	blt	372c8 <__assert_fail@plt+0x24cd4>
   372b8:	mov	r0, r5
   372bc:	bl	125ac <close@plt>
   372c0:	cmp	r0, #0
   372c4:	bne	37424 <__assert_fail@plt+0x24e30>
   372c8:	ldr	r3, [sp, #4]
   372cc:	str	r4, [r3]
   372d0:	mvn	r4, #0
   372d4:	mov	r0, r4
   372d8:	add	sp, sp, #12
   372dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   372e0:	sub	r2, r6, #3
   372e4:	mov	r1, #47	; 0x2f
   372e8:	add	r0, r9, #3
   372ec:	bl	123d8 <memchr@plt>
   372f0:	subs	r4, r0, #0
   372f4:	beq	373b4 <__assert_fail@plt+0x24dc0>
   372f8:	mov	r3, #0
   372fc:	strb	r3, [r4]
   37300:	mov	r2, #18688	; 0x4900
   37304:	mov	r1, r9
   37308:	mvn	r0, #99	; 0x63
   3730c:	bl	12324 <openat64@plt>
   37310:	mov	r3, #47	; 0x2f
   37314:	subs	r5, r0, #0
   37318:	blt	37400 <__assert_fail@plt+0x24e0c>
   3731c:	strb	r3, [r4], #1
   37320:	ldr	r1, [pc, #336]	; 37478 <__assert_fail@plt+0x24e84>
   37324:	mov	r0, r4
   37328:	bl	125e8 <strspn@plt>
   3732c:	add	r4, r4, r0
   37330:	b	371e8 <__assert_fail@plt+0x24bf4>
   37334:	cmp	r9, r4
   37338:	bls	3739c <__assert_fail@plt+0x24da8>
   3733c:	mov	r1, r4
   37340:	mov	r2, #18688	; 0x4900
   37344:	mov	r0, r8
   37348:	bl	12324 <openat64@plt>
   3734c:	subs	r5, r0, #0
   37350:	blt	373ac <__assert_fail@plt+0x24db8>
   37354:	cmp	r8, #0
   37358:	blt	3736c <__assert_fail@plt+0x24d78>
   3735c:	mov	r0, r8
   37360:	bl	125ac <close@plt>
   37364:	cmp	r0, #0
   37368:	bne	37424 <__assert_fail@plt+0x24e30>
   3736c:	mov	r0, r5
   37370:	bl	124f8 <fchdir@plt>
   37374:	cmp	r0, #0
   37378:	beq	373e8 <__assert_fail@plt+0x24df4>
   3737c:	ldr	r3, [sp, #4]
   37380:	ldr	r4, [r3]
   37384:	b	372b8 <__assert_fail@plt+0x24cc4>
   37388:	ldr	r2, [sp, #4]
   3738c:	mov	r3, #36	; 0x24
   37390:	mvn	r4, #0
   37394:	str	r3, [r2]
   37398:	b	3719c <__assert_fail@plt+0x24ba8>
   3739c:	mov	r0, r8
   373a0:	bl	124f8 <fchdir@plt>
   373a4:	cmp	r0, #0
   373a8:	beq	373dc <__assert_fail@plt+0x24de8>
   373ac:	mov	r5, r8
   373b0:	b	372a8 <__assert_fail@plt+0x24cb4>
   373b4:	mvn	r4, #0
   373b8:	b	3719c <__assert_fail@plt+0x24ba8>
   373bc:	mov	r2, #18688	; 0x4900
   373c0:	ldr	r1, [pc, #176]	; 37478 <__assert_fail@plt+0x24e84>
   373c4:	mvn	r0, #99	; 0x63
   373c8:	bl	12324 <openat64@plt>
   373cc:	subs	r5, r0, #0
   373d0:	blt	37404 <__assert_fail@plt+0x24e10>
   373d4:	add	r4, r9, r4
   373d8:	b	371e8 <__assert_fail@plt+0x24bf4>
   373dc:	cmp	r8, #0
   373e0:	blt	373f8 <__assert_fail@plt+0x24e04>
   373e4:	mov	r5, r8
   373e8:	mov	r0, r5
   373ec:	bl	125ac <close@plt>
   373f0:	cmp	r0, #0
   373f4:	bne	37424 <__assert_fail@plt+0x24e30>
   373f8:	mov	r4, #0
   373fc:	b	3719c <__assert_fail@plt+0x24ba8>
   37400:	strb	r3, [r4]
   37404:	ldr	r3, [sp, #4]
   37408:	ldr	r4, [r3]
   3740c:	b	372c8 <__assert_fail@plt+0x24cd4>
   37410:	ldr	r3, [pc, #104]	; 37480 <__assert_fail@plt+0x24e8c>
   37414:	mov	r2, #179	; 0xb3
   37418:	ldr	r1, [pc, #100]	; 37484 <__assert_fail@plt+0x24e90>
   3741c:	ldr	r0, [pc, #100]	; 37488 <__assert_fail@plt+0x24e94>
   37420:	bl	125f4 <__assert_fail@plt>
   37424:	bl	1271c <__assert_fail@plt+0x128>
   37428:	ldr	r3, [pc, #80]	; 37480 <__assert_fail@plt+0x24e8c>
   3742c:	mov	r2, #163	; 0xa3
   37430:	ldr	r1, [pc, #76]	; 37484 <__assert_fail@plt+0x24e90>
   37434:	ldr	r0, [pc, #80]	; 3748c <__assert_fail@plt+0x24e98>
   37438:	bl	125f4 <__assert_fail@plt>
   3743c:	ldr	r3, [pc, #60]	; 37480 <__assert_fail@plt+0x24e8c>
   37440:	mov	r2, #162	; 0xa2
   37444:	ldr	r1, [pc, #56]	; 37484 <__assert_fail@plt+0x24e90>
   37448:	ldr	r0, [pc, #64]	; 37490 <__assert_fail@plt+0x24e9c>
   3744c:	bl	125f4 <__assert_fail@plt>
   37450:	ldr	r3, [pc, #40]	; 37480 <__assert_fail@plt+0x24e8c>
   37454:	mov	r2, #126	; 0x7e
   37458:	ldr	r1, [pc, #36]	; 37484 <__assert_fail@plt+0x24e90>
   3745c:	ldr	r0, [pc, #48]	; 37494 <__assert_fail@plt+0x24ea0>
   37460:	bl	125f4 <__assert_fail@plt>
   37464:	ldr	r3, [pc, #20]	; 37480 <__assert_fail@plt+0x24e8c>
   37468:	mov	r2, #127	; 0x7f
   3746c:	ldr	r1, [pc, #16]	; 37484 <__assert_fail@plt+0x24e90>
   37470:	ldr	r0, [pc, #32]	; 37498 <__assert_fail@plt+0x24ea4>
   37474:	bl	125f4 <__assert_fail@plt>
   37478:	andeq	r3, r5, r4, lsl #27
   3747c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   37480:	ldrdeq	r3, [r5], -ip
   37484:	andeq	r3, r5, r8, ror #17
   37488:	andeq	r3, r5, r8, lsr r9
   3748c:	andeq	r3, r5, r8, lsr #18
   37490:	andeq	r3, r5, ip, lsl r9
   37494:	andeq	r3, r5, r8, lsl #18
   37498:	andeq	r3, r5, r0, lsl r9
   3749c:	push	{r1, r2, r3}
   374a0:	push	{r4, r5, r6, r7, lr}
   374a4:	sub	sp, sp, #8
   374a8:	add	r3, sp, #32
   374ac:	ldr	r1, [sp, #28]
   374b0:	str	r3, [sp, #4]
   374b4:	cmp	r1, #0
   374b8:	beq	37550 <__assert_fail@plt+0x24f5c>
   374bc:	ldr	r2, [pc, #412]	; 37660 <__assert_fail@plt+0x2506c>
   374c0:	mov	r5, r0
   374c4:	cmp	r1, r2
   374c8:	bne	37514 <__assert_fail@plt+0x24f20>
   374cc:	ldr	r6, [pc, #400]	; 37664 <__assert_fail@plt+0x25070>
   374d0:	ldr	r7, [r3]
   374d4:	add	r2, sp, #36	; 0x24
   374d8:	ldr	r3, [r6]
   374dc:	str	r2, [sp, #4]
   374e0:	cmp	r3, #0
   374e4:	mov	r2, r7
   374e8:	blt	37614 <__assert_fail@plt+0x25020>
   374ec:	bl	1242c <fcntl64@plt>
   374f0:	subs	r4, r0, #0
   374f4:	blt	37598 <__assert_fail@plt+0x24fa4>
   374f8:	mov	r3, #1
   374fc:	str	r3, [r6]
   37500:	mov	r0, r4
   37504:	add	sp, sp, #8
   37508:	pop	{r4, r5, r6, r7, lr}
   3750c:	add	sp, sp, #12
   37510:	bx	lr
   37514:	cmp	r1, #11
   37518:	beq	37540 <__assert_fail@plt+0x24f4c>
   3751c:	bgt	37560 <__assert_fail@plt+0x24f6c>
   37520:	cmp	r1, #3
   37524:	beq	37540 <__assert_fail@plt+0x24f4c>
   37528:	ble	37654 <__assert_fail@plt+0x25060>
   3752c:	cmp	r1, #8
   37530:	beq	37580 <__assert_fail@plt+0x24f8c>
   37534:	ble	37580 <__assert_fail@plt+0x24f8c>
   37538:	cmp	r1, #9
   3753c:	bne	37580 <__assert_fail@plt+0x24f8c>
   37540:	mov	r0, r5
   37544:	bl	1242c <fcntl64@plt>
   37548:	mov	r4, r0
   3754c:	b	37500 <__assert_fail@plt+0x24f0c>
   37550:	ldr	r2, [sp, #32]
   37554:	bl	1242c <fcntl64@plt>
   37558:	mov	r4, r0
   3755c:	b	37500 <__assert_fail@plt+0x24f0c>
   37560:	ldr	r3, [pc, #256]	; 37668 <__assert_fail@plt+0x25074>
   37564:	cmp	r1, r3
   37568:	bgt	37634 <__assert_fail@plt+0x25040>
   3756c:	cmp	r1, r2
   37570:	bge	37580 <__assert_fail@plt+0x24f8c>
   37574:	sub	r3, r3, #6
   37578:	cmp	r1, r3
   3757c:	beq	37540 <__assert_fail@plt+0x24f4c>
   37580:	ldr	r3, [sp, #4]
   37584:	mov	r0, r5
   37588:	ldr	r2, [r3]
   3758c:	bl	1242c <fcntl64@plt>
   37590:	mov	r4, r0
   37594:	b	37500 <__assert_fail@plt+0x24f0c>
   37598:	bl	12348 <__errno_location@plt>
   3759c:	ldr	r3, [r0]
   375a0:	cmp	r3, #22
   375a4:	bne	374f8 <__assert_fail@plt+0x24f04>
   375a8:	mov	r2, r7
   375ac:	mov	r0, r5
   375b0:	mov	r1, #0
   375b4:	bl	1242c <fcntl64@plt>
   375b8:	subs	r4, r0, #0
   375bc:	blt	37500 <__assert_fail@plt+0x24f0c>
   375c0:	mvn	r3, #0
   375c4:	str	r3, [r6]
   375c8:	mov	r1, #1
   375cc:	mov	r0, r4
   375d0:	bl	1242c <fcntl64@plt>
   375d4:	subs	r2, r0, #0
   375d8:	blt	375f4 <__assert_fail@plt+0x25000>
   375dc:	orr	r2, r2, #1
   375e0:	mov	r1, #2
   375e4:	mov	r0, r4
   375e8:	bl	1242c <fcntl64@plt>
   375ec:	cmn	r0, #1
   375f0:	bne	37500 <__assert_fail@plt+0x24f0c>
   375f4:	bl	12348 <__errno_location@plt>
   375f8:	mov	r5, r0
   375fc:	mov	r0, r4
   37600:	ldr	r6, [r5]
   37604:	mvn	r4, #0
   37608:	bl	125ac <close@plt>
   3760c:	str	r6, [r5]
   37610:	b	37500 <__assert_fail@plt+0x24f0c>
   37614:	mov	r1, #0
   37618:	bl	1242c <fcntl64@plt>
   3761c:	subs	r4, r0, #0
   37620:	blt	37500 <__assert_fail@plt+0x24f0c>
   37624:	ldr	r3, [r6]
   37628:	cmn	r3, #1
   3762c:	beq	375c8 <__assert_fail@plt+0x24fd4>
   37630:	b	37500 <__assert_fail@plt+0x24f0c>
   37634:	ldr	r3, [pc, #48]	; 3766c <__assert_fail@plt+0x25078>
   37638:	cmp	r1, r3
   3763c:	beq	37580 <__assert_fail@plt+0x24f8c>
   37640:	blt	37540 <__assert_fail@plt+0x24f4c>
   37644:	add	r3, r3, #1
   37648:	cmp	r1, r3
   3764c:	bne	37580 <__assert_fail@plt+0x24f8c>
   37650:	b	37540 <__assert_fail@plt+0x24f4c>
   37654:	cmp	r1, #1
   37658:	bne	37580 <__assert_fail@plt+0x24f8c>
   3765c:	b	37540 <__assert_fail@plt+0x24f4c>
   37660:	andeq	r0, r0, r6, lsl #8
   37664:	andeq	r4, r6, r8, lsr lr
   37668:	andeq	r0, r0, r7, lsl #8
   3766c:	andeq	r0, r0, r9, lsl #8
   37670:	push	{r4, lr}
   37674:	subs	r4, r0, #0
   37678:	sub	sp, sp, #8
   3767c:	beq	37698 <__assert_fail@plt+0x250a4>
   37680:	bl	12270 <__freading@plt>
   37684:	cmp	r0, #0
   37688:	beq	37698 <__assert_fail@plt+0x250a4>
   3768c:	ldr	r3, [r4]
   37690:	tst	r3, #256	; 0x100
   37694:	bne	376a8 <__assert_fail@plt+0x250b4>
   37698:	mov	r0, r4
   3769c:	add	sp, sp, #8
   376a0:	pop	{r4, lr}
   376a4:	b	11f88 <fflush@plt>
   376a8:	mov	r3, #1
   376ac:	str	r3, [sp]
   376b0:	mov	r2, #0
   376b4:	mov	r3, #0
   376b8:	mov	r0, r4
   376bc:	bl	37728 <__assert_fail@plt+0x25134>
   376c0:	mov	r0, r4
   376c4:	add	sp, sp, #8
   376c8:	pop	{r4, lr}
   376cc:	b	11f88 <fflush@plt>
   376d0:	push	{r4, r5, lr}
   376d4:	sub	sp, sp, #12
   376d8:	mov	r5, r0
   376dc:	bl	12348 <__errno_location@plt>
   376e0:	mov	r2, #0
   376e4:	mov	r4, r0
   376e8:	ldr	r3, [r0]
   376ec:	str	r2, [r4]
   376f0:	mov	r0, r5
   376f4:	str	r3, [sp]
   376f8:	str	r3, [sp, #4]
   376fc:	bl	11fc4 <free@plt>
   37700:	ldr	r3, [r4]
   37704:	add	r2, sp, #8
   37708:	cmp	r3, #0
   3770c:	moveq	r3, #4
   37710:	movne	r3, #0
   37714:	add	r3, r2, r3
   37718:	ldr	r3, [r3, #-8]
   3771c:	str	r3, [r4]
   37720:	add	sp, sp, #12
   37724:	pop	{r4, r5, pc}
   37728:	push	{r4, r5, r6, r7, r8, lr}
   3772c:	sub	sp, sp, #8
   37730:	ldmib	r0, {ip, lr}
   37734:	mov	r4, r0
   37738:	ldr	r5, [sp, #32]
   3773c:	cmp	lr, ip
   37740:	beq	37758 <__assert_fail@plt+0x25164>
   37744:	str	r5, [sp, #32]
   37748:	mov	r0, r4
   3774c:	add	sp, sp, #8
   37750:	pop	{r4, r5, r6, r7, r8, lr}
   37754:	b	12414 <fseeko64@plt>
   37758:	ldr	lr, [r0, #20]
   3775c:	ldr	ip, [r0, #16]
   37760:	cmp	lr, ip
   37764:	bne	37744 <__assert_fail@plt+0x25150>
   37768:	ldr	r8, [r0, #36]	; 0x24
   3776c:	cmp	r8, #0
   37770:	bne	37744 <__assert_fail@plt+0x25150>
   37774:	mov	r6, r2
   37778:	mov	r7, r3
   3777c:	bl	123c0 <fileno@plt>
   37780:	mov	r2, r6
   37784:	mov	r3, r7
   37788:	str	r5, [sp]
   3778c:	bl	12180 <lseek64@plt>
   37790:	mvn	r3, #0
   37794:	mvn	r2, #0
   37798:	cmp	r1, r3
   3779c:	cmpeq	r0, r2
   377a0:	beq	377c0 <__assert_fail@plt+0x251cc>
   377a4:	ldr	r3, [r4]
   377a8:	strd	r0, [r4, #80]	; 0x50
   377ac:	mov	r0, r8
   377b0:	bic	r3, r3, #16
   377b4:	str	r3, [r4]
   377b8:	add	sp, sp, #8
   377bc:	pop	{r4, r5, r6, r7, r8, pc}
   377c0:	mvn	r0, #0
   377c4:	b	377b8 <__assert_fail@plt+0x251c4>
   377c8:	ldrd	r2, [r1, #8]
   377cc:	push	{r4, r5}
   377d0:	ldrd	r4, [r0, #8]
   377d4:	cmp	r5, r3
   377d8:	cmpeq	r4, r2
   377dc:	movne	r0, #0
   377e0:	beq	377ec <__assert_fail@plt+0x251f8>
   377e4:	pop	{r4, r5}
   377e8:	bx	lr
   377ec:	ldrd	r4, [r0]
   377f0:	ldrd	r2, [r1]
   377f4:	cmp	r5, r3
   377f8:	cmpeq	r4, r2
   377fc:	moveq	r0, #1
   37800:	movne	r0, #0
   37804:	pop	{r4, r5}
   37808:	bx	lr
   3780c:	push	{r4, lr}
   37810:	mov	r2, r1
   37814:	mov	r3, #0
   37818:	ldrd	r0, [r0, #8]
   3781c:	bl	4dc5c <__assert_fail@plt+0x3b668>
   37820:	mov	r0, r2
   37824:	pop	{r4, pc}
   37828:	push	{r4, lr}
   3782c:	mov	r2, r1
   37830:	mov	r3, #0
   37834:	ldrd	r0, [r0]
   37838:	bl	4dc5c <__assert_fail@plt+0x3b668>
   3783c:	mov	r0, r2
   37840:	pop	{r4, pc}
   37844:	push	{r4, r5}
   37848:	ldrd	r2, [r1]
   3784c:	ldrd	r4, [r0]
   37850:	cmp	r5, r3
   37854:	cmpeq	r4, r2
   37858:	moveq	r0, #1
   3785c:	movne	r0, #0
   37860:	pop	{r4, r5}
   37864:	bx	lr
   37868:	ldr	r2, [r0]
   3786c:	ldr	r3, [r1]
   37870:	ldrd	r0, [r2, #160]	; 0xa0
   37874:	ldrd	r2, [r3, #160]	; 0xa0
   37878:	cmp	r1, r3
   3787c:	cmpeq	r0, r2
   37880:	movhi	r0, #1
   37884:	movls	r0, #0
   37888:	movcc	r3, #1
   3788c:	movcs	r3, #0
   37890:	sub	r0, r0, r3
   37894:	bx	lr
   37898:	push	{r4, r5, r6, r7, lr}
   3789c:	sub	sp, sp, #100	; 0x64
   378a0:	ldr	r4, [r0, #44]	; 0x2c
   378a4:	ldr	r3, [r4, #48]	; 0x30
   378a8:	tst	r3, #512	; 0x200
   378ac:	beq	37920 <__assert_fail@plt+0x2532c>
   378b0:	ldr	r6, [r4, #52]	; 0x34
   378b4:	mov	r7, r1
   378b8:	cmp	r6, #0
   378bc:	mov	r5, r0
   378c0:	beq	378ec <__assert_fail@plt+0x252f8>
   378c4:	ldrd	r2, [r5, #64]	; 0x40
   378c8:	add	r1, sp, #96	; 0x60
   378cc:	mov	r0, r6
   378d0:	strd	r2, [r1, #-88]!	; 0xffffffa8
   378d4:	bl	27678 <__assert_fail@plt+0x15084>
   378d8:	cmp	r0, #0
   378dc:	beq	37918 <__assert_fail@plt+0x25324>
   378e0:	ldr	r0, [r0, #8]
   378e4:	add	sp, sp, #100	; 0x64
   378e8:	pop	{r4, r5, r6, r7, pc}
   378ec:	ldr	r3, [pc, #168]	; 3799c <__assert_fail@plt+0x253a8>
   378f0:	mov	r1, r6
   378f4:	str	r3, [sp]
   378f8:	ldr	r2, [pc, #160]	; 379a0 <__assert_fail@plt+0x253ac>
   378fc:	ldr	r3, [pc, #160]	; 379a4 <__assert_fail@plt+0x253b0>
   37900:	mov	r0, #13
   37904:	bl	27958 <__assert_fail@plt+0x15364>
   37908:	cmp	r0, #0
   3790c:	mov	r6, r0
   37910:	str	r0, [r4, #52]	; 0x34
   37914:	bne	378c4 <__assert_fail@plt+0x252d0>
   37918:	cmp	r7, #0
   3791c:	bge	3792c <__assert_fail@plt+0x25338>
   37920:	mov	r0, #0
   37924:	add	sp, sp, #100	; 0x64
   37928:	pop	{r4, r5, r6, r7, pc}
   3792c:	mov	r0, r7
   37930:	add	r1, sp, #8
   37934:	bl	11ebc <fstatfs64@plt>
   37938:	cmp	r0, #0
   3793c:	bne	37920 <__assert_fail@plt+0x2532c>
   37940:	cmp	r6, #0
   37944:	beq	37990 <__assert_fail@plt+0x2539c>
   37948:	mov	r0, #16
   3794c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   37950:	subs	r4, r0, #0
   37954:	beq	37990 <__assert_fail@plt+0x2539c>
   37958:	ldrd	r2, [r5, #64]	; 0x40
   3795c:	ldr	r1, [sp, #8]
   37960:	mov	r0, r6
   37964:	str	r1, [r4, #8]
   37968:	strd	r2, [r4]
   3796c:	mov	r1, r4
   37970:	bl	282c0 <__assert_fail@plt+0x15ccc>
   37974:	cmp	r0, #0
   37978:	beq	37988 <__assert_fail@plt+0x25394>
   3797c:	cmp	r4, r0
   37980:	beq	37990 <__assert_fail@plt+0x2539c>
   37984:	bl	125a0 <abort@plt>
   37988:	mov	r0, r4
   3798c:	bl	376d0 <__assert_fail@plt+0x250dc>
   37990:	ldr	r0, [sp, #8]
   37994:	add	sp, sp, #100	; 0x64
   37998:	pop	{r4, r5, r6, r7, pc}
   3799c:	ldrdeq	r7, [r3], -r0
   379a0:	andeq	r7, r3, r8, lsr #16
   379a4:	andeq	r7, r3, r4, asr #16
   379a8:	push	{r4, r5, r6, lr}
   379ac:	mov	r4, r2
   379b0:	ldr	r2, [r2, #48]	; 0x30
   379b4:	sub	sp, sp, #8
   379b8:	cmp	r2, #0
   379bc:	add	r5, r4, #64	; 0x40
   379c0:	bne	37a18 <__assert_fail@plt+0x25424>
   379c4:	tst	r1, #1
   379c8:	beq	37a18 <__assert_fail@plt+0x25424>
   379cc:	mov	r2, r5
   379d0:	ldr	r1, [r4, #24]
   379d4:	mov	r0, #3
   379d8:	bl	12558 <__xstat64@plt>
   379dc:	cmp	r0, #0
   379e0:	beq	37a54 <__assert_fail@plt+0x25460>
   379e4:	bl	12348 <__errno_location@plt>
   379e8:	ldr	r3, [r0]
   379ec:	mov	r6, r0
   379f0:	cmp	r3, #2
   379f4:	beq	37acc <__assert_fail@plt+0x254d8>
   379f8:	str	r3, [r4, #32]
   379fc:	mov	r0, r5
   37a00:	mov	r2, #104	; 0x68
   37a04:	mov	r1, #0
   37a08:	bl	12378 <memset@plt>
   37a0c:	mov	r0, #10
   37a10:	add	sp, sp, #8
   37a14:	pop	{r4, r5, r6, pc}
   37a18:	lsl	r1, r1, #30
   37a1c:	orrs	r3, r3, r1, lsr #31
   37a20:	bne	379cc <__assert_fail@plt+0x253d8>
   37a24:	mov	r3, #256	; 0x100
   37a28:	ldr	r2, [r4, #24]
   37a2c:	mov	r1, r0
   37a30:	str	r3, [sp]
   37a34:	mov	r0, #3
   37a38:	mov	r3, r5
   37a3c:	bl	1212c <__fxstatat64@plt>
   37a40:	cmp	r0, #0
   37a44:	beq	37a54 <__assert_fail@plt+0x25460>
   37a48:	bl	12348 <__errno_location@plt>
   37a4c:	ldr	r3, [r0]
   37a50:	b	379f8 <__assert_fail@plt+0x25404>
   37a54:	ldr	r0, [r4, #80]	; 0x50
   37a58:	and	r0, r0, #61440	; 0xf000
   37a5c:	cmp	r0, #16384	; 0x4000
   37a60:	beq	37a84 <__assert_fail@plt+0x25490>
   37a64:	cmp	r0, #40960	; 0xa000
   37a68:	moveq	r0, #12
   37a6c:	beq	37a10 <__assert_fail@plt+0x2541c>
   37a70:	cmp	r0, #32768	; 0x8000
   37a74:	movne	r0, #3
   37a78:	moveq	r0, #8
   37a7c:	add	sp, sp, #8
   37a80:	pop	{r4, r5, r6, pc}
   37a84:	ldrb	r3, [r4, #168]	; 0xa8
   37a88:	cmp	r3, #46	; 0x2e
   37a8c:	beq	37a98 <__assert_fail@plt+0x254a4>
   37a90:	mov	r0, #1
   37a94:	b	37a10 <__assert_fail@plt+0x2541c>
   37a98:	ldrb	r3, [r4, #169]	; 0xa9
   37a9c:	cmp	r3, #0
   37aa0:	beq	37ab8 <__assert_fail@plt+0x254c4>
   37aa4:	ldr	r3, [r4, #168]	; 0xa8
   37aa8:	bic	r3, r3, #-16777216	; 0xff000000
   37aac:	bic	r3, r3, #255	; 0xff
   37ab0:	cmp	r3, #11776	; 0x2e00
   37ab4:	bne	37a90 <__assert_fail@plt+0x2549c>
   37ab8:	ldr	r0, [r4, #48]	; 0x30
   37abc:	cmp	r0, #0
   37ac0:	movne	r0, #5
   37ac4:	moveq	r0, #1
   37ac8:	b	37a10 <__assert_fail@plt+0x2541c>
   37acc:	mov	r2, r5
   37ad0:	ldr	r1, [r4, #24]
   37ad4:	mov	r0, #3
   37ad8:	bl	125b8 <__lxstat64@plt>
   37adc:	cmp	r0, #0
   37ae0:	streq	r0, [r6]
   37ae4:	moveq	r0, #13
   37ae8:	beq	37a10 <__assert_fail@plt+0x2541c>
   37aec:	ldr	r3, [r6]
   37af0:	b	379f8 <__assert_fail@plt+0x25404>
   37af4:	ldr	r3, [pc, #172]	; 37ba8 <__assert_fail@plt+0x255b4>
   37af8:	push	{r4, r5, lr}
   37afc:	and	r3, r3, r0
   37b00:	cmp	r3, #0
   37b04:	sub	sp, sp, #28
   37b08:	bne	37b50 <__assert_fail@plt+0x2555c>
   37b0c:	ldr	r3, [r2, #4]
   37b10:	cmp	r3, #0
   37b14:	beq	37b48 <__assert_fail@plt+0x25554>
   37b18:	ldr	r0, [r3, #48]	; 0x30
   37b1c:	cmp	r0, #0
   37b20:	blt	37b48 <__assert_fail@plt+0x25554>
   37b24:	ldr	ip, [r1]
   37b28:	ldrd	r0, [ip, #16]
   37b2c:	orrs	r1, r0, r1
   37b30:	beq	37ba4 <__assert_fail@plt+0x255b0>
   37b34:	ldrd	r4, [ip]
   37b38:	ldrd	r0, [r2, #160]	; 0xa0
   37b3c:	cmp	r5, r1
   37b40:	cmpeq	r4, r0
   37b44:	beq	37b80 <__assert_fail@plt+0x2558c>
   37b48:	add	sp, sp, #28
   37b4c:	pop	{r4, r5, pc}
   37b50:	ldrd	r4, [r2, #64]	; 0x40
   37b54:	ldrd	r2, [r2, #160]	; 0xa0
   37b58:	ldr	r0, [r1]
   37b5c:	mov	r1, sp
   37b60:	strd	r4, [sp]
   37b64:	strd	r2, [sp, #8]
   37b68:	bl	28584 <__assert_fail@plt+0x15f90>
   37b6c:	cmp	r0, #0
   37b70:	beq	37ba4 <__assert_fail@plt+0x255b0>
   37b74:	bl	376d0 <__assert_fail@plt+0x250dc>
   37b78:	add	sp, sp, #28
   37b7c:	pop	{r4, r5, pc}
   37b80:	ldrd	r0, [ip, #8]
   37b84:	ldrd	r4, [r2, #64]	; 0x40
   37b88:	cmp	r1, r5
   37b8c:	cmpeq	r0, r4
   37b90:	ldrdeq	r0, [r3, #64]	; 0x40
   37b94:	ldrdeq	r2, [r3, #160]	; 0xa0
   37b98:	strdeq	r0, [ip, #8]
   37b9c:	strdeq	r2, [ip]
   37ba0:	b	37b48 <__assert_fail@plt+0x25554>
   37ba4:	bl	125a0 <abort@plt>
   37ba8:	andeq	r0, r0, r2, lsl #2
   37bac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37bb0:	subs	sl, r3, #0
   37bb4:	sub	sp, sp, #104	; 0x68
   37bb8:	mov	r5, r0
   37bbc:	mov	r6, r1
   37bc0:	mov	r4, r2
   37bc4:	ldr	r9, [r0, #48]	; 0x30
   37bc8:	beq	37c44 <__assert_fail@plt+0x25650>
   37bcc:	ldr	r1, [pc, #612]	; 37e38 <__assert_fail@plt+0x25844>
   37bd0:	mov	r0, sl
   37bd4:	bl	11f40 <strcmp@plt>
   37bd8:	cmp	r0, #0
   37bdc:	bne	37c44 <__assert_fail@plt+0x25650>
   37be0:	tst	r9, #4
   37be4:	bne	37c4c <__assert_fail@plt+0x25658>
   37be8:	cmp	r4, #0
   37bec:	bge	37e24 <__assert_fail@plt+0x25830>
   37bf0:	tst	r9, #512	; 0x200
   37bf4:	beq	37d38 <__assert_fail@plt+0x25744>
   37bf8:	add	r7, r5, #60	; 0x3c
   37bfc:	mov	r0, r7
   37c00:	bl	4cee4 <__assert_fail@plt+0x3a8f0>
   37c04:	cmp	r0, #0
   37c08:	beq	37db4 <__assert_fail@plt+0x257c0>
   37c0c:	ldr	r2, [pc, #552]	; 37e3c <__assert_fail@plt+0x25848>
   37c10:	tst	r9, #16
   37c14:	ldr	r1, [pc, #548]	; 37e40 <__assert_fail@plt+0x2584c>
   37c18:	mov	r8, #1
   37c1c:	movne	r1, r2
   37c20:	mov	r2, r1
   37c24:	ldr	r0, [r5, #32]
   37c28:	mov	r1, sl
   37c2c:	bl	2bb5c <__assert_fail@plt+0x19568>
   37c30:	mov	r7, r0
   37c34:	cmp	r7, #0
   37c38:	blt	37df8 <__assert_fail@plt+0x25804>
   37c3c:	ldr	r9, [r5, #48]	; 0x30
   37c40:	b	37c80 <__assert_fail@plt+0x2568c>
   37c44:	ands	r8, r9, #4
   37c48:	beq	37c74 <__assert_fail@plt+0x25680>
   37c4c:	mvn	r3, r4
   37c50:	lsr	r3, r3, #31
   37c54:	ands	r9, r3, r9, lsr #9
   37c58:	beq	37c68 <__assert_fail@plt+0x25674>
   37c5c:	mov	r0, r4
   37c60:	bl	125ac <close@plt>
   37c64:	mov	r9, #0
   37c68:	mov	r0, r9
   37c6c:	add	sp, sp, #104	; 0x68
   37c70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37c74:	cmp	r4, #0
   37c78:	movge	r7, r4
   37c7c:	blt	37e04 <__assert_fail@plt+0x25810>
   37c80:	tst	r9, #2
   37c84:	bne	37ca4 <__assert_fail@plt+0x256b0>
   37c88:	cmp	sl, #0
   37c8c:	beq	37cfc <__assert_fail@plt+0x25708>
   37c90:	mov	r0, sl
   37c94:	ldr	r1, [pc, #412]	; 37e38 <__assert_fail@plt+0x25844>
   37c98:	bl	11f40 <strcmp@plt>
   37c9c:	cmp	r0, #0
   37ca0:	bne	37cfc <__assert_fail@plt+0x25708>
   37ca4:	mov	r2, sp
   37ca8:	mov	r1, r7
   37cac:	mov	r0, #3
   37cb0:	bl	1215c <__fxstat64@plt>
   37cb4:	cmp	r0, #0
   37cb8:	beq	37d14 <__assert_fail@plt+0x25720>
   37cbc:	mvn	r9, #0
   37cc0:	cmp	r4, #0
   37cc4:	bge	37c68 <__assert_fail@plt+0x25674>
   37cc8:	bl	12348 <__errno_location@plt>
   37ccc:	mov	r4, r0
   37cd0:	mov	r0, r7
   37cd4:	ldr	r5, [r4]
   37cd8:	bl	125ac <close@plt>
   37cdc:	str	r5, [r4]
   37ce0:	b	37c68 <__assert_fail@plt+0x25674>
   37ce4:	ldrd	r0, [r6, #160]	; 0xa0
   37ce8:	ldrd	r2, [sp, #96]	; 0x60
   37cec:	cmp	r1, r3
   37cf0:	cmpeq	r0, r2
   37cf4:	bne	37d28 <__assert_fail@plt+0x25734>
   37cf8:	ldr	r9, [r5, #48]	; 0x30
   37cfc:	tst	r9, #512	; 0x200
   37d00:	bne	37d5c <__assert_fail@plt+0x25768>
   37d04:	mov	r0, r7
   37d08:	bl	124f8 <fchdir@plt>
   37d0c:	mov	r9, r0
   37d10:	b	37cc0 <__assert_fail@plt+0x256cc>
   37d14:	ldrd	r0, [r6, #64]	; 0x40
   37d18:	ldrd	r2, [sp]
   37d1c:	cmp	r1, r3
   37d20:	cmpeq	r0, r2
   37d24:	beq	37ce4 <__assert_fail@plt+0x256f0>
   37d28:	bl	12348 <__errno_location@plt>
   37d2c:	mov	r3, #2
   37d30:	str	r3, [r0]
   37d34:	b	37cbc <__assert_fail@plt+0x256c8>
   37d38:	ldr	r2, [pc, #252]	; 37e3c <__assert_fail@plt+0x25848>
   37d3c:	tst	r9, #16
   37d40:	ldr	r1, [pc, #248]	; 37e40 <__assert_fail@plt+0x2584c>
   37d44:	mov	r8, #1
   37d48:	movne	r1, r2
   37d4c:	mov	r0, sl
   37d50:	bl	26e80 <__assert_fail@plt+0x1488c>
   37d54:	mov	r7, r0
   37d58:	b	37c34 <__assert_fail@plt+0x25640>
   37d5c:	ldr	r1, [r5, #32]
   37d60:	cmn	r1, #100	; 0x64
   37d64:	sub	r3, r7, r1
   37d68:	clz	r3, r3
   37d6c:	lsr	r3, r3, #5
   37d70:	moveq	r3, #0
   37d74:	cmp	r3, #0
   37d78:	bne	37e00 <__assert_fail@plt+0x2580c>
   37d7c:	cmp	r8, #0
   37d80:	beq	37de4 <__assert_fail@plt+0x257f0>
   37d84:	lsr	r3, r9, #2
   37d88:	eor	r3, r3, #1
   37d8c:	cmp	r1, #0
   37d90:	movlt	r3, #0
   37d94:	andge	r3, r3, #1
   37d98:	cmp	r3, #0
   37d9c:	beq	37da8 <__assert_fail@plt+0x257b4>
   37da0:	mov	r0, r1
   37da4:	bl	125ac <close@plt>
   37da8:	str	r7, [r5, #32]
   37dac:	mov	r9, #0
   37db0:	b	37c68 <__assert_fail@plt+0x25674>
   37db4:	mov	r0, r7
   37db8:	bl	4cf30 <__assert_fail@plt+0x3a93c>
   37dbc:	ldr	r9, [r5, #48]	; 0x30
   37dc0:	subs	r7, r0, #0
   37dc4:	movlt	r8, #1
   37dc8:	andlt	r3, r9, #512	; 0x200
   37dcc:	blt	37e08 <__assert_fail@plt+0x25814>
   37dd0:	tst	r9, #2
   37dd4:	mov	r4, r7
   37dd8:	mov	r8, #1
   37ddc:	beq	37cfc <__assert_fail@plt+0x25708>
   37de0:	b	37ca4 <__assert_fail@plt+0x256b0>
   37de4:	add	r0, r5, #60	; 0x3c
   37de8:	bl	4ceec <__assert_fail@plt+0x3a8f8>
   37dec:	cmp	r0, #0
   37df0:	bge	37da4 <__assert_fail@plt+0x257b0>
   37df4:	b	37da8 <__assert_fail@plt+0x257b4>
   37df8:	mvn	r9, #0
   37dfc:	b	37c68 <__assert_fail@plt+0x25674>
   37e00:	bl	125a0 <abort@plt>
   37e04:	and	r3, r9, #512	; 0x200
   37e08:	ldr	r2, [pc, #48]	; 37e40 <__assert_fail@plt+0x2584c>
   37e0c:	tst	r9, #16
   37e10:	ldr	r1, [pc, #36]	; 37e3c <__assert_fail@plt+0x25848>
   37e14:	moveq	r1, r2
   37e18:	cmp	r3, #0
   37e1c:	bne	37c20 <__assert_fail@plt+0x2562c>
   37e20:	b	37d4c <__assert_fail@plt+0x25758>
   37e24:	tst	r9, #2
   37e28:	mov	r7, r4
   37e2c:	mov	r8, #1
   37e30:	beq	37c90 <__assert_fail@plt+0x2569c>
   37e34:	b	37ca4 <__assert_fail@plt+0x256b0>
   37e38:	andeq	r3, r5, ip, ror r9
   37e3c:	andeq	ip, r8, r0, lsl #18
   37e40:	andeq	r4, r8, r0, lsl #18
   37e44:	ldr	r3, [r0]
   37e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37e4c:	sub	sp, sp, #68	; 0x44
   37e50:	mov	r6, r0
   37e54:	str	r3, [sp, #8]
   37e58:	ldr	r3, [r3, #12]
   37e5c:	str	r1, [sp, #40]	; 0x28
   37e60:	cmp	r3, #0
   37e64:	str	r3, [sp, #44]	; 0x2c
   37e68:	beq	38450 <__assert_fail@plt+0x25e5c>
   37e6c:	mov	r0, r3
   37e70:	bl	124ec <dirfd@plt>
   37e74:	cmp	r0, #0
   37e78:	str	r0, [sp, #60]	; 0x3c
   37e7c:	blt	3888c <__assert_fail@plt+0x26298>
   37e80:	ldr	r3, [r6, #44]	; 0x2c
   37e84:	cmp	r3, #0
   37e88:	beq	38b10 <__assert_fail@plt+0x2651c>
   37e8c:	mvn	r3, #0
   37e90:	str	r3, [sp, #24]
   37e94:	ldr	r0, [r6, #48]	; 0x30
   37e98:	ldr	r2, [sp, #8]
   37e9c:	mov	r3, #1
   37ea0:	str	r3, [sp, #52]	; 0x34
   37ea4:	ldr	r3, [r2, #40]	; 0x28
   37ea8:	ldr	r1, [r2, #28]
   37eac:	sub	r2, r3, #1
   37eb0:	ldrb	r1, [r1, r2]
   37eb4:	cmp	r1, #47	; 0x2f
   37eb8:	moveq	r3, r2
   37ebc:	ands	r0, r0, #4
   37ec0:	movne	r0, #47	; 0x2f
   37ec4:	ldrne	r2, [r6, #24]
   37ec8:	streq	r0, [sp, #32]
   37ecc:	addne	r1, r2, r3
   37ed0:	strbne	r0, [r2, r3]
   37ed4:	addne	r2, r1, #1
   37ed8:	strne	r2, [sp, #32]
   37edc:	ldr	r2, [sp, #8]
   37ee0:	add	r3, r3, #1
   37ee4:	ldr	r1, [r6, #36]	; 0x24
   37ee8:	ldr	r2, [r2, #48]	; 0x30
   37eec:	mov	r0, r3
   37ef0:	str	r3, [sp, #12]
   37ef4:	sub	r1, r1, r0
   37ef8:	mov	r3, #0
   37efc:	add	r2, r2, #1
   37f00:	mov	r7, r3
   37f04:	str	r3, [sp, #48]	; 0x30
   37f08:	str	r1, [sp, #20]
   37f0c:	str	r2, [sp, #28]
   37f10:	str	r3, [sp, #36]	; 0x24
   37f14:	str	r3, [sp]
   37f18:	mov	sl, r3
   37f1c:	str	r3, [sp, #16]
   37f20:	b	37fa4 <__assert_fail@plt+0x259b0>
   37f24:	tst	r3, #251	; 0xfb
   37f28:	beq	380b8 <__assert_fail@plt+0x25ac4>
   37f2c:	lsr	r2, r1, #4
   37f30:	cmp	r3, #10
   37f34:	orrne	r2, r2, #1
   37f38:	tst	r2, #1
   37f3c:	beq	3857c <__assert_fail@plt+0x25f88>
   37f40:	sub	r3, r3, #1
   37f44:	mov	r2, #11
   37f48:	cmp	r3, #11
   37f4c:	strh	r2, [r4, #56]	; 0x38
   37f50:	bhi	38b2c <__assert_fail@plt+0x26538>
   37f54:	ldr	r2, [pc, #3040]	; 38b3c <__assert_fail@plt+0x26548>
   37f58:	ldr	r1, [r2, r3, lsl #2]
   37f5c:	mov	r2, #1
   37f60:	mov	r3, #0
   37f64:	str	r1, [r4, #80]	; 0x50
   37f68:	strd	r2, [r4, #112]	; 0x70
   37f6c:	ldr	r3, [sp, #16]
   37f70:	str	r7, [r4, #8]
   37f74:	cmp	r3, #0
   37f78:	streq	r4, [sp, #16]
   37f7c:	ldrne	r3, [sp]
   37f80:	strne	r4, [r3, #8]
   37f84:	ldr	r3, [pc, #2996]	; 38b40 <__assert_fail@plt+0x2654c>
   37f88:	cmp	sl, r3
   37f8c:	beq	38208 <__assert_fail@plt+0x25c14>
   37f90:	ldr	r3, [sp, #24]
   37f94:	add	sl, sl, #1
   37f98:	cmp	r3, sl
   37f9c:	bls	38320 <__assert_fail@plt+0x25d2c>
   37fa0:	str	r4, [sp]
   37fa4:	ldr	r3, [sp, #8]
   37fa8:	ldr	r4, [r3, #12]
   37fac:	cmp	r4, #0
   37fb0:	beq	38320 <__assert_fail@plt+0x25d2c>
   37fb4:	bl	12348 <__errno_location@plt>
   37fb8:	mov	fp, r0
   37fbc:	mov	r0, r4
   37fc0:	str	r7, [fp]
   37fc4:	bl	124bc <readdir64@plt>
   37fc8:	subs	r8, r0, #0
   37fcc:	beq	3871c <__assert_fail@plt+0x26128>
   37fd0:	ldr	r3, [r6, #48]	; 0x30
   37fd4:	tst	r3, #32
   37fd8:	bne	37fe8 <__assert_fail@plt+0x259f4>
   37fdc:	ldrb	r3, [r8, #19]
   37fe0:	cmp	r3, #46	; 0x2e
   37fe4:	beq	3826c <__assert_fail@plt+0x25c78>
   37fe8:	add	r1, r8, #19
   37fec:	mov	r0, r1
   37ff0:	str	r1, [sp, #4]
   37ff4:	bl	12300 <strlen@plt>
   37ff8:	mov	r5, r0
   37ffc:	add	r0, r0, #176	; 0xb0
   38000:	bic	r0, r0, #7
   38004:	bl	3a010 <__assert_fail@plt+0x27a1c>
   38008:	subs	r4, r0, #0
   3800c:	beq	38314 <__assert_fail@plt+0x25d20>
   38010:	add	r9, r4, #168	; 0xa8
   38014:	ldr	r1, [sp, #4]
   38018:	mov	r2, r5
   3801c:	mov	r0, r9
   38020:	bl	12024 <memcpy@plt>
   38024:	ldr	r3, [sp, #20]
   38028:	add	r1, r4, r5
   3802c:	ldr	r2, [r6, #24]
   38030:	mov	r0, #196608	; 0x30000
   38034:	cmp	r3, r5
   38038:	strb	r7, [r1, #168]	; 0xa8
   3803c:	str	r5, [r4, #52]	; 0x34
   38040:	str	r6, [r4, #44]	; 0x2c
   38044:	str	r7, [r4, #32]
   38048:	str	r7, [r4, #12]
   3804c:	str	r7, [r4, #16]
   38050:	str	r7, [r4, #20]
   38054:	str	r2, [r4, #28]
   38058:	str	r0, [r4, #58]	; 0x3a
   3805c:	bls	380f0 <__assert_fail@plt+0x25afc>
   38060:	ldr	r3, [sp, #12]
   38064:	adds	r5, r3, r5
   38068:	bcs	38170 <__assert_fail@plt+0x25b7c>
   3806c:	ldrd	r2, [r8]
   38070:	ldr	r1, [r6, #48]	; 0x30
   38074:	ldr	r0, [sp, #28]
   38078:	strd	r2, [r4, #160]	; 0xa0
   3807c:	ldr	r3, [r6]
   38080:	tst	r1, #4
   38084:	str	r0, [r4, #48]	; 0x30
   38088:	str	r5, [r4, #40]	; 0x28
   3808c:	str	r3, [r4, #4]
   38090:	streq	r9, [r4, #24]
   38094:	bne	381e4 <__assert_fail@plt+0x25bf0>
   38098:	ldr	r3, [r6, #44]	; 0x2c
   3809c:	cmp	r3, #0
   380a0:	beq	380ac <__assert_fail@plt+0x25ab8>
   380a4:	tst	r1, #1024	; 0x400
   380a8:	beq	38254 <__assert_fail@plt+0x25c60>
   380ac:	tst	r1, #8
   380b0:	ldrb	r3, [r8, #18]
   380b4:	bne	37f24 <__assert_fail@plt+0x25930>
   380b8:	sub	r3, r3, #1
   380bc:	cmp	r3, #11
   380c0:	mov	r2, #11
   380c4:	strh	r2, [r4, #56]	; 0x38
   380c8:	strhi	r7, [r4, #80]	; 0x50
   380cc:	movhi	r2, #2
   380d0:	movhi	r3, #0
   380d4:	bhi	37f68 <__assert_fail@plt+0x25974>
   380d8:	ldr	r2, [pc, #2652]	; 38b3c <__assert_fail@plt+0x26548>
   380dc:	ldr	r1, [r2, r3, lsl #2]
   380e0:	mov	r2, #2
   380e4:	mov	r3, #0
   380e8:	str	r1, [r4, #80]	; 0x50
   380ec:	b	37f68 <__assert_fail@plt+0x25974>
   380f0:	ldr	r0, [r6, #36]	; 0x24
   380f4:	ldr	r3, [sp, #12]
   380f8:	add	r1, r0, #256	; 0x100
   380fc:	add	r1, r1, #1
   38100:	add	r1, r1, r3
   38104:	add	r1, r1, r5
   38108:	cmp	r0, r1
   3810c:	bhi	3828c <__assert_fail@plt+0x25c98>
   38110:	mov	r0, r2
   38114:	str	r1, [r6, #36]	; 0x24
   38118:	str	r2, [sp, #4]
   3811c:	bl	3aacc <__assert_fail@plt+0x284d8>
   38120:	ldr	r2, [sp, #4]
   38124:	cmp	r0, #0
   38128:	beq	38908 <__assert_fail@plt+0x26314>
   3812c:	cmp	r2, r0
   38130:	str	r0, [r6, #24]
   38134:	beq	38154 <__assert_fail@plt+0x25b60>
   38138:	ldr	r2, [r6, #48]	; 0x30
   3813c:	tst	r2, #4
   38140:	ldrne	r3, [sp, #12]
   38144:	addne	r3, r0, r3
   38148:	strne	r3, [sp, #32]
   3814c:	mov	r3, #1
   38150:	str	r3, [sp, #36]	; 0x24
   38154:	ldr	r2, [r6, #36]	; 0x24
   38158:	ldr	r3, [sp, #12]
   3815c:	sub	r3, r2, r3
   38160:	str	r3, [sp, #20]
   38164:	ldr	r3, [sp, #12]
   38168:	adds	r5, r3, r5
   3816c:	bcc	3806c <__assert_fail@plt+0x25a78>
   38170:	ldr	r8, [sp, #16]
   38174:	mov	r0, r4
   38178:	bl	376d0 <__assert_fail@plt+0x250dc>
   3817c:	cmp	r8, #0
   38180:	beq	381a8 <__assert_fail@plt+0x25bb4>
   38184:	ldr	r3, [r8, #12]
   38188:	ldr	r4, [r8, #8]
   3818c:	subs	r0, r3, #0
   38190:	beq	38198 <__assert_fail@plt+0x25ba4>
   38194:	bl	125c4 <closedir@plt>
   38198:	mov	r0, r8
   3819c:	bl	376d0 <__assert_fail@plt+0x250dc>
   381a0:	subs	r8, r4, #0
   381a4:	bne	38184 <__assert_fail@plt+0x25b90>
   381a8:	ldr	r4, [sp, #8]
   381ac:	mov	r8, #0
   381b0:	ldr	r0, [r4, #12]
   381b4:	bl	125c4 <closedir@plt>
   381b8:	ldr	r3, [r6, #48]	; 0x30
   381bc:	mov	r1, #7
   381c0:	orr	r3, r3, #8192	; 0x2000
   381c4:	mov	r2, #36	; 0x24
   381c8:	str	r8, [r4, #12]
   381cc:	strh	r1, [r4, #56]	; 0x38
   381d0:	str	r3, [r6, #48]	; 0x30
   381d4:	str	r2, [fp]
   381d8:	mov	r0, r8
   381dc:	add	sp, sp, #68	; 0x44
   381e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   381e4:	ldr	r0, [r4, #28]
   381e8:	ldr	r2, [r4, #52]	; 0x34
   381ec:	mov	r1, r9
   381f0:	str	r0, [r4, #24]
   381f4:	add	r2, r2, #1
   381f8:	ldr	r0, [sp, #32]
   381fc:	bl	11fb8 <memmove@plt>
   38200:	ldr	r1, [r6, #48]	; 0x30
   38204:	b	38098 <__assert_fail@plt+0x25aa4>
   38208:	ldr	r3, [r6, #44]	; 0x2c
   3820c:	cmp	r3, #0
   38210:	bne	37f90 <__assert_fail@plt+0x2599c>
   38214:	ldr	r1, [sp, #60]	; 0x3c
   38218:	ldr	r0, [sp, #8]
   3821c:	bl	37898 <__assert_fail@plt+0x252a4>
   38220:	ldr	r3, [pc, #2332]	; 38b44 <__assert_fail@plt+0x26550>
   38224:	cmp	r0, r3
   38228:	beq	3824c <__assert_fail@plt+0x25c58>
   3822c:	ldr	r3, [pc, #2324]	; 38b48 <__assert_fail@plt+0x26554>
   38230:	cmp	r0, r3
   38234:	beq	3824c <__assert_fail@plt+0x25c58>
   38238:	ldr	r3, [pc, #2316]	; 38b4c <__assert_fail@plt+0x26558>
   3823c:	cmp	r0, r3
   38240:	movne	r3, #1
   38244:	strne	r3, [sp, #48]	; 0x30
   38248:	bne	37f90 <__assert_fail@plt+0x2599c>
   3824c:	str	r7, [sp, #48]	; 0x30
   38250:	b	37f90 <__assert_fail@plt+0x2599c>
   38254:	mov	r3, r7
   38258:	mov	r2, r4
   3825c:	ldr	r0, [r6, #32]
   38260:	bl	379a8 <__assert_fail@plt+0x253b4>
   38264:	strh	r0, [r4, #56]	; 0x38
   38268:	b	37f6c <__assert_fail@plt+0x25978>
   3826c:	ldrb	r3, [r8, #20]
   38270:	cmp	r3, #0
   38274:	beq	38284 <__assert_fail@plt+0x25c90>
   38278:	ldrh	r3, [r8, #20]
   3827c:	cmp	r3, #46	; 0x2e
   38280:	bne	37fe8 <__assert_fail@plt+0x259f4>
   38284:	ldr	r4, [sp]
   38288:	b	37fa0 <__assert_fail@plt+0x259ac>
   3828c:	mov	r0, r2
   38290:	ldr	r8, [sp, #16]
   38294:	bl	376d0 <__assert_fail@plt+0x250dc>
   38298:	mov	r3, #36	; 0x24
   3829c:	mov	r5, r3
   382a0:	str	r7, [r6, #24]
   382a4:	str	r3, [fp]
   382a8:	mov	r0, r4
   382ac:	bl	376d0 <__assert_fail@plt+0x250dc>
   382b0:	cmp	r8, #0
   382b4:	beq	382dc <__assert_fail@plt+0x25ce8>
   382b8:	ldr	r3, [r8, #12]
   382bc:	ldr	r4, [r8, #8]
   382c0:	subs	r0, r3, #0
   382c4:	beq	382cc <__assert_fail@plt+0x25cd8>
   382c8:	bl	125c4 <closedir@plt>
   382cc:	mov	r0, r8
   382d0:	bl	376d0 <__assert_fail@plt+0x250dc>
   382d4:	subs	r8, r4, #0
   382d8:	bne	382b8 <__assert_fail@plt+0x25cc4>
   382dc:	ldr	r4, [sp, #8]
   382e0:	mov	r8, #0
   382e4:	ldr	r0, [r4, #12]
   382e8:	bl	125c4 <closedir@plt>
   382ec:	ldr	r3, [r6, #48]	; 0x30
   382f0:	mov	r2, #7
   382f4:	orr	r3, r3, #8192	; 0x2000
   382f8:	str	r8, [r4, #12]
   382fc:	strh	r2, [r4, #56]	; 0x38
   38300:	mov	r0, r8
   38304:	str	r3, [r6, #48]	; 0x30
   38308:	str	r5, [fp]
   3830c:	add	sp, sp, #68	; 0x44
   38310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38314:	ldr	r8, [sp, #16]
   38318:	ldr	r5, [fp]
   3831c:	b	382a8 <__assert_fail@plt+0x25cb4>
   38320:	ldr	r8, [sp, #16]
   38324:	ldr	r3, [sp, #36]	; 0x24
   38328:	cmp	r3, #0
   3832c:	bne	38774 <__assert_fail@plt+0x26180>
   38330:	ldr	r3, [r6, #48]	; 0x30
   38334:	tst	r3, #4
   38338:	beq	38364 <__assert_fail@plt+0x25d70>
   3833c:	ldr	r3, [r6, #36]	; 0x24
   38340:	ldr	r2, [sp, #12]
   38344:	cmp	sl, #0
   38348:	cmpne	r3, r2
   3834c:	ldreq	r3, [sp, #32]
   38350:	subeq	r3, r3, #1
   38354:	streq	r3, [sp, #32]
   38358:	ldr	r2, [sp, #32]
   3835c:	mov	r3, #0
   38360:	strb	r3, [r2]
   38364:	ldr	r3, [sp, #52]	; 0x34
   38368:	ldr	r2, [sp, #44]	; 0x2c
   3836c:	cmp	r2, #0
   38370:	movne	r3, #0
   38374:	andeq	r3, r3, #1
   38378:	cmp	r3, #0
   3837c:	beq	3840c <__assert_fail@plt+0x25e18>
   38380:	ldr	r3, [sp, #40]	; 0x28
   38384:	cmp	sl, #0
   38388:	cmpne	r3, #1
   3838c:	beq	38618 <__assert_fail@plt+0x26024>
   38390:	ldr	r3, [sp, #48]	; 0x30
   38394:	cmp	r3, #0
   38398:	bne	387f8 <__assert_fail@plt+0x26204>
   3839c:	ldr	r4, [r6, #44]	; 0x2c
   383a0:	cmp	r4, #0
   383a4:	cmpne	sl, #1
   383a8:	bls	381d8 <__assert_fail@plt+0x25be4>
   383ac:	ldr	r3, [r6, #40]	; 0x28
   383b0:	cmp	sl, r3
   383b4:	bls	385ac <__assert_fail@plt+0x25fb8>
   383b8:	add	r1, sl, #40	; 0x28
   383bc:	cmn	r1, #-1073741823	; 0xc0000001
   383c0:	str	r1, [r6, #40]	; 0x28
   383c4:	bhi	388f0 <__assert_fail@plt+0x262fc>
   383c8:	lsl	r1, r1, #2
   383cc:	ldr	r0, [r6, #8]
   383d0:	bl	3aacc <__assert_fail@plt+0x284d8>
   383d4:	cmp	r0, #0
   383d8:	beq	388f0 <__assert_fail@plt+0x262fc>
   383dc:	str	r0, [r6, #8]
   383e0:	b	385b0 <__assert_fail@plt+0x25fbc>
   383e4:	ldr	r1, [sp, #8]
   383e8:	ldr	r3, [pc, #1888]	; 38b50 <__assert_fail@plt+0x2655c>
   383ec:	mvn	r2, #0
   383f0:	ldr	r1, [r1, #4]
   383f4:	mov	r0, r6
   383f8:	bl	37bac <__assert_fail@plt+0x255b8>
   383fc:	adds	r5, r0, #0
   38400:	movne	r5, #1
   38404:	cmp	r5, #0
   38408:	bne	389b4 <__assert_fail@plt+0x263c0>
   3840c:	cmp	sl, #0
   38410:	bne	38390 <__assert_fail@plt+0x25d9c>
   38414:	ldr	r3, [sp, #40]	; 0x28
   38418:	cmp	r3, #3
   3841c:	beq	3897c <__assert_fail@plt+0x26388>
   38420:	cmp	r8, #0
   38424:	beq	388ac <__assert_fail@plt+0x262b8>
   38428:	ldr	r3, [r8, #12]
   3842c:	ldr	r4, [r8, #8]
   38430:	subs	r0, r3, #0
   38434:	beq	3843c <__assert_fail@plt+0x25e48>
   38438:	bl	125c4 <closedir@plt>
   3843c:	mov	r0, r8
   38440:	bl	376d0 <__assert_fail@plt+0x250dc>
   38444:	subs	r8, r4, #0
   38448:	bne	38428 <__assert_fail@plt+0x25e34>
   3844c:	b	388ac <__assert_fail@plt+0x262b8>
   38450:	ldr	r3, [r0, #48]	; 0x30
   38454:	ldr	ip, [sp, #8]
   38458:	and	r2, r3, #516	; 0x204
   3845c:	cmp	r2, #512	; 0x200
   38460:	mvnne	r0, #99	; 0x63
   38464:	ldreq	r0, [r0, #32]
   38468:	ands	r2, r3, #16
   3846c:	ldr	r1, [ip, #24]
   38470:	bne	3858c <__assert_fail@plt+0x25f98>
   38474:	add	r3, sp, #60	; 0x3c
   38478:	bl	4d298 <__assert_fail@plt+0x3aca4>
   3847c:	ldr	r3, [sp, #8]
   38480:	cmp	r0, #0
   38484:	mov	r8, r0
   38488:	str	r0, [r3, #12]
   3848c:	beq	389fc <__assert_fail@plt+0x26408>
   38490:	ldrh	r3, [r3, #56]	; 0x38
   38494:	cmp	r3, #11
   38498:	beq	38a24 <__assert_fail@plt+0x26430>
   3849c:	ldr	r0, [r6, #48]	; 0x30
   384a0:	tst	r0, #256	; 0x100
   384a4:	bne	38680 <__assert_fail@plt+0x2608c>
   384a8:	ldr	r2, [r6, #44]	; 0x2c
   384ac:	ldr	r3, [pc, #1696]	; 38b54 <__assert_fail@plt+0x26560>
   384b0:	cmp	r2, #0
   384b4:	mvnne	r3, #0
   384b8:	str	r3, [sp, #24]
   384bc:	ldr	r3, [sp, #40]	; 0x28
   384c0:	cmp	r3, #2
   384c4:	beq	38928 <__assert_fail@plt+0x26334>
   384c8:	ldr	r3, [r6, #48]	; 0x30
   384cc:	and	r3, r3, #56	; 0x38
   384d0:	cmp	r3, #24
   384d4:	beq	38a44 <__assert_fail@plt+0x26450>
   384d8:	ldr	r3, [sp, #40]	; 0x28
   384dc:	mov	r4, #1
   384e0:	sub	r5, r3, #3
   384e4:	clz	r5, r5
   384e8:	lsr	r5, r5, #5
   384ec:	ldr	r3, [r6, #48]	; 0x30
   384f0:	tst	r3, #512	; 0x200
   384f4:	bne	38998 <__assert_fail@plt+0x263a4>
   384f8:	ldr	r2, [sp, #60]	; 0x3c
   384fc:	cmp	r2, #0
   38500:	blt	3851c <__assert_fail@plt+0x25f28>
   38504:	mov	r3, #0
   38508:	ldr	r1, [sp, #8]
   3850c:	mov	r0, r6
   38510:	bl	37bac <__assert_fail@plt+0x255b8>
   38514:	cmp	r0, #0
   38518:	beq	37e94 <__assert_fail@plt+0x258a0>
   3851c:	tst	r4, r5
   38520:	bne	38a9c <__assert_fail@plt+0x264a8>
   38524:	ldr	r4, [sp, #8]
   38528:	ldrh	r3, [r4, #58]	; 0x3a
   3852c:	ldr	r0, [r4, #12]
   38530:	orr	r3, r3, #1
   38534:	strh	r3, [r4, #58]	; 0x3a
   38538:	bl	125c4 <closedir@plt>
   3853c:	ldr	r0, [r6, #48]	; 0x30
   38540:	mov	r3, #0
   38544:	tst	r0, #512	; 0x200
   38548:	str	r3, [r4, #12]
   3854c:	beq	38568 <__assert_fail@plt+0x25f74>
   38550:	ldr	r3, [sp, #60]	; 0x3c
   38554:	cmp	r3, #0
   38558:	blt	38568 <__assert_fail@plt+0x25f74>
   3855c:	mov	r0, r3
   38560:	bl	125ac <close@plt>
   38564:	ldr	r0, [r6, #48]	; 0x30
   38568:	ldr	r2, [sp, #8]
   3856c:	mov	r3, #0
   38570:	str	r3, [sp, #52]	; 0x34
   38574:	str	r3, [r2, #12]
   38578:	b	37ea4 <__assert_fail@plt+0x258b0>
   3857c:	mov	r3, #11
   38580:	strh	r3, [r4, #56]	; 0x38
   38584:	mov	r3, #9
   38588:	b	380d8 <__assert_fail@plt+0x25ae4>
   3858c:	tst	r3, #1
   38590:	moveq	r2, #32768	; 0x8000
   38594:	beq	38474 <__assert_fail@plt+0x25e80>
   38598:	ldr	r2, [ip, #48]	; 0x30
   3859c:	cmp	r2, #0
   385a0:	movne	r2, #32768	; 0x8000
   385a4:	moveq	r2, #0
   385a8:	b	38474 <__assert_fail@plt+0x25e80>
   385ac:	ldr	r0, [r6, #8]
   385b0:	cmp	r8, #0
   385b4:	movne	r2, r0
   385b8:	beq	385cc <__assert_fail@plt+0x25fd8>
   385bc:	str	r8, [r2], #4
   385c0:	ldr	r8, [r8, #8]
   385c4:	cmp	r8, #0
   385c8:	bne	385bc <__assert_fail@plt+0x25fc8>
   385cc:	mov	r3, r4
   385d0:	mov	r2, #4
   385d4:	mov	r1, sl
   385d8:	bl	12510 <qsort@plt>
   385dc:	ldr	ip, [r6, #8]
   385e0:	sub	r3, sl, #1
   385e4:	mov	r2, ip
   385e8:	ldr	r8, [ip]
   385ec:	ldr	r1, [r2]
   385f0:	ldr	r0, [r2, #4]!
   385f4:	subs	r3, r3, #1
   385f8:	str	r0, [r1, #8]
   385fc:	bne	385ec <__assert_fail@plt+0x25ff8>
   38600:	add	sl, ip, sl, lsl #2
   38604:	mov	r0, r8
   38608:	ldr	r2, [sl, #-4]
   3860c:	str	r3, [r2, #8]
   38610:	add	sp, sp, #68	; 0x44
   38614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38618:	ldr	r3, [sp, #8]
   3861c:	ldr	r3, [r3, #48]	; 0x30
   38620:	cmp	r3, #0
   38624:	bne	383e4 <__assert_fail@plt+0x25df0>
   38628:	ldr	r2, [r6, #48]	; 0x30
   3862c:	tst	r2, #4
   38630:	movne	r5, r3
   38634:	addne	r4, r6, #60	; 0x3c
   38638:	bne	38668 <__assert_fail@plt+0x26074>
   3863c:	tst	r2, #512	; 0x200
   38640:	bne	38ab4 <__assert_fail@plt+0x264c0>
   38644:	ldr	r0, [r6, #28]
   38648:	bl	124f8 <fchdir@plt>
   3864c:	add	r4, r6, #60	; 0x3c
   38650:	adds	r5, r0, #0
   38654:	movne	r5, #1
   38658:	b	38668 <__assert_fail@plt+0x26074>
   3865c:	bl	4cf30 <__assert_fail@plt+0x3a93c>
   38660:	cmp	r0, #0
   38664:	bge	388e8 <__assert_fail@plt+0x262f4>
   38668:	mov	r0, r4
   3866c:	bl	4cee4 <__assert_fail@plt+0x3a8f0>
   38670:	cmp	r0, #0
   38674:	mov	r0, r4
   38678:	beq	3865c <__assert_fail@plt+0x26068>
   3867c:	b	38404 <__assert_fail@plt+0x25e10>
   38680:	ldr	r5, [sp, #8]
   38684:	add	r1, r6, #56	; 0x38
   38688:	mov	r2, r5
   3868c:	bl	37af4 <__assert_fail@plt+0x25500>
   38690:	mov	r3, #0
   38694:	mov	r2, r5
   38698:	ldr	r1, [r6, #48]	; 0x30
   3869c:	ldr	r0, [r6, #32]
   386a0:	bl	379a8 <__assert_fail@plt+0x253b4>
   386a4:	ldr	r2, [r6, #48]	; 0x30
   386a8:	ldr	r3, [pc, #1192]	; 38b58 <__assert_fail@plt+0x26564>
   386ac:	mov	r7, r5
   386b0:	and	r3, r3, r2
   386b4:	cmp	r3, #0
   386b8:	beq	3893c <__assert_fail@plt+0x26348>
   386bc:	mov	r0, #24
   386c0:	bl	3a010 <__assert_fail@plt+0x27a1c>
   386c4:	subs	r4, r0, #0
   386c8:	beq	38ae0 <__assert_fail@plt+0x264ec>
   386cc:	ldrd	r0, [r5, #160]	; 0xa0
   386d0:	ldrd	r2, [r5, #64]	; 0x40
   386d4:	str	r5, [r4, #16]
   386d8:	strd	r0, [r4, #8]
   386dc:	strd	r2, [r4]
   386e0:	mov	r1, r4
   386e4:	ldr	r0, [r6, #56]	; 0x38
   386e8:	bl	282c0 <__assert_fail@plt+0x15ccc>
   386ec:	cmp	r4, r0
   386f0:	mov	r5, r0
   386f4:	beq	384a8 <__assert_fail@plt+0x25eb4>
   386f8:	mov	r0, r4
   386fc:	bl	376d0 <__assert_fail@plt+0x250dc>
   38700:	cmp	r5, #0
   38704:	beq	38ae0 <__assert_fail@plt+0x264ec>
   38708:	ldr	r2, [r5, #16]
   3870c:	mov	r3, #2
   38710:	str	r2, [r7]
   38714:	strh	r3, [r7, #56]	; 0x38
   38718:	b	384a8 <__assert_fail@plt+0x25eb4>
   3871c:	ldr	r3, [fp]
   38720:	ldr	r8, [sp, #16]
   38724:	cmp	r3, #0
   38728:	beq	3874c <__assert_fail@plt+0x26158>
   3872c:	ldr	r2, [sp, #44]	; 0x2c
   38730:	ldr	r1, [sp, #8]
   38734:	cmp	sl, #0
   38738:	cmpeq	r2, #0
   3873c:	moveq	r2, #4
   38740:	movne	r2, #7
   38744:	str	r3, [r1, #32]
   38748:	strh	r2, [r1, #56]	; 0x38
   3874c:	ldr	r4, [sp, #8]
   38750:	ldr	r0, [r4, #12]
   38754:	cmp	r0, #0
   38758:	beq	38324 <__assert_fail@plt+0x25d30>
   3875c:	bl	125c4 <closedir@plt>
   38760:	mov	r3, #0
   38764:	str	r3, [r4, #12]
   38768:	ldr	r3, [sp, #36]	; 0x24
   3876c:	cmp	r3, #0
   38770:	beq	38330 <__assert_fail@plt+0x25d3c>
   38774:	ldr	r1, [r6, #4]
   38778:	ldr	r0, [r6, #24]
   3877c:	cmp	r1, #0
   38780:	beq	387b0 <__assert_fail@plt+0x261bc>
   38784:	ldr	r3, [r1, #24]
   38788:	add	r2, r1, #168	; 0xa8
   3878c:	cmp	r3, r2
   38790:	ldrne	r2, [r1, #28]
   38794:	str	r0, [r1, #28]
   38798:	subne	r3, r3, r2
   3879c:	addne	r3, r0, r3
   387a0:	strne	r3, [r1, #24]
   387a4:	ldr	r1, [r1, #8]
   387a8:	cmp	r1, #0
   387ac:	bne	38784 <__assert_fail@plt+0x26190>
   387b0:	mov	r3, r8
   387b4:	b	387e4 <__assert_fail@plt+0x261f0>
   387b8:	ldr	r2, [r3, #24]
   387bc:	cmp	r2, r1
   387c0:	ldrne	r1, [r3, #28]
   387c4:	str	r0, [r3, #28]
   387c8:	subne	r2, r2, r1
   387cc:	addne	r2, r0, r2
   387d0:	strne	r2, [r3, #24]
   387d4:	ldr	r2, [r3, #8]
   387d8:	cmp	r2, #0
   387dc:	ldreq	r2, [r3, #4]
   387e0:	mov	r3, r2
   387e4:	ldr	r2, [r3, #48]	; 0x30
   387e8:	add	r1, r3, #168	; 0xa8
   387ec:	cmp	r2, #0
   387f0:	bge	387b8 <__assert_fail@plt+0x261c4>
   387f4:	b	38330 <__assert_fail@plt+0x25d3c>
   387f8:	ldr	r2, [r6, #40]	; 0x28
   387fc:	ldr	r3, [pc, #856]	; 38b5c <__assert_fail@plt+0x26568>
   38800:	cmp	sl, r2
   38804:	str	r3, [r6, #44]	; 0x2c
   38808:	bhi	388bc <__assert_fail@plt+0x262c8>
   3880c:	ldr	r0, [r6, #8]
   38810:	cmp	r8, #0
   38814:	movne	r3, r0
   38818:	beq	3882c <__assert_fail@plt+0x26238>
   3881c:	str	r8, [r3], #4
   38820:	ldr	r8, [r8, #8]
   38824:	cmp	r8, #0
   38828:	bne	3881c <__assert_fail@plt+0x26228>
   3882c:	ldr	r3, [pc, #808]	; 38b5c <__assert_fail@plt+0x26568>
   38830:	mov	r2, #4
   38834:	mov	r1, sl
   38838:	bl	12510 <qsort@plt>
   3883c:	ldr	ip, [r6, #8]
   38840:	subs	r3, sl, #1
   38844:	ldr	r8, [ip]
   38848:	moveq	r3, r8
   3884c:	beq	38870 <__assert_fail@plt+0x2627c>
   38850:	mov	r2, ip
   38854:	ldr	r1, [r2]
   38858:	ldr	r0, [r2, #4]!
   3885c:	subs	r3, r3, #1
   38860:	str	r0, [r1, #8]
   38864:	bne	38854 <__assert_fail@plt+0x26260>
   38868:	add	ip, ip, sl, lsl #2
   3886c:	ldr	r3, [ip, #-4]
   38870:	mov	r2, #0
   38874:	str	r2, [r3, #8]
   38878:	mov	r3, #0
   3887c:	mov	r0, r8
   38880:	str	r3, [r6, #44]	; 0x2c
   38884:	add	sp, sp, #68	; 0x44
   38888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3888c:	ldr	r4, [sp, #8]
   38890:	mov	r8, #0
   38894:	ldr	r0, [r4, #12]
   38898:	bl	125c4 <closedir@plt>
   3889c:	ldr	r3, [sp, #40]	; 0x28
   388a0:	str	r8, [r4, #12]
   388a4:	cmp	r3, #3
   388a8:	beq	38a08 <__assert_fail@plt+0x26414>
   388ac:	mov	r8, #0
   388b0:	mov	r0, r8
   388b4:	add	sp, sp, #68	; 0x44
   388b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   388bc:	add	r1, sl, #40	; 0x28
   388c0:	cmn	r1, #-1073741823	; 0xc0000001
   388c4:	str	r1, [r6, #40]	; 0x28
   388c8:	bhi	38964 <__assert_fail@plt+0x26370>
   388cc:	lsl	r1, r1, #2
   388d0:	ldr	r0, [r6, #8]
   388d4:	bl	3aacc <__assert_fail@plt+0x284d8>
   388d8:	cmp	r0, #0
   388dc:	beq	38964 <__assert_fail@plt+0x26370>
   388e0:	str	r0, [r6, #8]
   388e4:	b	38810 <__assert_fail@plt+0x2621c>
   388e8:	bl	125ac <close@plt>
   388ec:	b	38668 <__assert_fail@plt+0x26074>
   388f0:	ldr	r0, [r6, #8]
   388f4:	bl	376d0 <__assert_fail@plt+0x250dc>
   388f8:	mov	r3, #0
   388fc:	str	r3, [r6, #8]
   38900:	str	r3, [r6, #40]	; 0x28
   38904:	b	381d8 <__assert_fail@plt+0x25be4>
   38908:	str	r0, [sp]
   3890c:	ldr	r0, [r6, #24]
   38910:	ldr	r8, [sp, #16]
   38914:	bl	376d0 <__assert_fail@plt+0x250dc>
   38918:	ldr	r1, [sp]
   3891c:	ldr	r5, [fp]
   38920:	str	r1, [r6, #24]
   38924:	b	382a8 <__assert_fail@plt+0x25cb4>
   38928:	mov	r3, #0
   3892c:	str	r3, [sp, #52]	; 0x34
   38930:	ldr	r0, [r6, #48]	; 0x30
   38934:	ldr	r2, [sp, #8]
   38938:	b	37ea4 <__assert_fail@plt+0x258b0>
   3893c:	ldr	r4, [sp, #8]
   38940:	ldr	r0, [r6, #56]	; 0x38
   38944:	add	r1, r4, #64	; 0x40
   38948:	bl	4cc90 <__assert_fail@plt+0x3a69c>
   3894c:	cmp	r0, #0
   38950:	movne	r2, r4
   38954:	movne	r3, #2
   38958:	strne	r4, [r2]
   3895c:	strhne	r3, [r4, #56]	; 0x38
   38960:	b	384a8 <__assert_fail@plt+0x25eb4>
   38964:	ldr	r0, [r6, #8]
   38968:	bl	376d0 <__assert_fail@plt+0x250dc>
   3896c:	mov	r3, #0
   38970:	str	r3, [r6, #8]
   38974:	str	r3, [r6, #40]	; 0x28
   38978:	b	38878 <__assert_fail@plt+0x26284>
   3897c:	ldr	r2, [sp, #8]
   38980:	ldrh	r3, [r2, #56]	; 0x38
   38984:	cmp	r3, #7
   38988:	cmpne	r3, #4
   3898c:	movne	r3, #6
   38990:	strhne	r3, [r2, #56]	; 0x38
   38994:	b	38420 <__assert_fail@plt+0x25e2c>
   38998:	mov	r2, #3
   3899c:	ldr	r1, [pc, #444]	; 38b60 <__assert_fail@plt+0x2656c>
   389a0:	ldr	r0, [sp, #60]	; 0x3c
   389a4:	bl	3749c <__assert_fail@plt+0x24ea8>
   389a8:	mov	r2, r0
   389ac:	str	r0, [sp, #60]	; 0x3c
   389b0:	b	384fc <__assert_fail@plt+0x25f08>
   389b4:	ldr	r3, [r6, #48]	; 0x30
   389b8:	ldr	r1, [sp, #8]
   389bc:	orr	r3, r3, #8192	; 0x2000
   389c0:	mov	r2, #7
   389c4:	cmp	r8, #0
   389c8:	strh	r2, [r1, #56]	; 0x38
   389cc:	str	r3, [r6, #48]	; 0x30
   389d0:	beq	388ac <__assert_fail@plt+0x262b8>
   389d4:	ldr	r3, [r8, #12]
   389d8:	ldr	r4, [r8, #8]
   389dc:	subs	r0, r3, #0
   389e0:	beq	389e8 <__assert_fail@plt+0x263f4>
   389e4:	bl	125c4 <closedir@plt>
   389e8:	mov	r0, r8
   389ec:	bl	376d0 <__assert_fail@plt+0x250dc>
   389f0:	subs	r8, r4, #0
   389f4:	bne	389d4 <__assert_fail@plt+0x263e0>
   389f8:	b	388ac <__assert_fail@plt+0x262b8>
   389fc:	ldr	r3, [sp, #40]	; 0x28
   38a00:	cmp	r3, #3
   38a04:	bne	388ac <__assert_fail@plt+0x262b8>
   38a08:	ldr	r4, [sp, #8]
   38a0c:	mov	r3, #4
   38a10:	strh	r3, [r4, #56]	; 0x38
   38a14:	bl	12348 <__errno_location@plt>
   38a18:	ldr	r3, [r0]
   38a1c:	str	r3, [r4, #32]
   38a20:	b	381d8 <__assert_fail@plt+0x25be4>
   38a24:	ldr	r4, [sp, #8]
   38a28:	mov	r3, #0
   38a2c:	mov	r2, r4
   38a30:	ldr	r1, [r6, #48]	; 0x30
   38a34:	ldr	r0, [r6, #32]
   38a38:	bl	379a8 <__assert_fail@plt+0x253b4>
   38a3c:	strh	r0, [r4, #56]	; 0x38
   38a40:	b	384a8 <__assert_fail@plt+0x25eb4>
   38a44:	ldr	r3, [sp, #8]
   38a48:	ldr	r3, [r3, #84]	; 0x54
   38a4c:	cmp	r3, #2
   38a50:	bne	384d8 <__assert_fail@plt+0x25ee4>
   38a54:	ldr	r1, [sp, #60]	; 0x3c
   38a58:	ldr	r0, [sp, #8]
   38a5c:	bl	37898 <__assert_fail@plt+0x252a4>
   38a60:	ldr	r3, [pc, #220]	; 38b44 <__assert_fail@plt+0x26550>
   38a64:	cmp	r0, r3
   38a68:	beq	384d8 <__assert_fail@plt+0x25ee4>
   38a6c:	bgt	38af4 <__assert_fail@plt+0x26500>
   38a70:	ldr	r3, [pc, #212]	; 38b4c <__assert_fail@plt+0x26558>
   38a74:	cmp	r0, r3
   38a78:	beq	384d8 <__assert_fail@plt+0x25ee4>
   38a7c:	cmp	r0, #0
   38a80:	beq	384d8 <__assert_fail@plt+0x25ee4>
   38a84:	ldr	r3, [sp, #40]	; 0x28
   38a88:	cmp	r3, #3
   38a8c:	bne	38928 <__assert_fail@plt+0x26334>
   38a90:	mov	r5, #1
   38a94:	mov	r4, #0
   38a98:	b	384ec <__assert_fail@plt+0x25ef8>
   38a9c:	bl	12348 <__errno_location@plt>
   38aa0:	ldr	r2, [sp, #8]
   38aa4:	mov	r4, r2
   38aa8:	ldr	r3, [r0]
   38aac:	str	r3, [r2, #32]
   38ab0:	b	38528 <__assert_fail@plt+0x25f34>
   38ab4:	add	r4, r6, #60	; 0x3c
   38ab8:	mov	r0, r4
   38abc:	ldr	r1, [r6, #32]
   38ac0:	bl	4ceec <__assert_fail@plt+0x3a8f8>
   38ac4:	cmp	r0, #0
   38ac8:	blt	38ad0 <__assert_fail@plt+0x264dc>
   38acc:	bl	125ac <close@plt>
   38ad0:	mvn	r3, #99	; 0x63
   38ad4:	str	r3, [r6, #32]
   38ad8:	mov	r5, #0
   38adc:	b	38668 <__assert_fail@plt+0x26074>
   38ae0:	bl	12348 <__errno_location@plt>
   38ae4:	mov	r3, #12
   38ae8:	mov	r8, #0
   38aec:	str	r3, [r0]
   38af0:	b	381d8 <__assert_fail@plt+0x25be4>
   38af4:	ldr	r3, [pc, #104]	; 38b64 <__assert_fail@plt+0x26570>
   38af8:	cmp	r0, r3
   38afc:	beq	384d8 <__assert_fail@plt+0x25ee4>
   38b00:	ldr	r3, [pc, #96]	; 38b68 <__assert_fail@plt+0x26574>
   38b04:	cmp	r0, r3
   38b08:	bne	38a84 <__assert_fail@plt+0x26490>
   38b0c:	b	384d8 <__assert_fail@plt+0x25ee4>
   38b10:	ldr	r3, [pc, #60]	; 38b54 <__assert_fail@plt+0x26560>
   38b14:	ldr	r0, [r6, #48]	; 0x30
   38b18:	str	r3, [sp, #24]
   38b1c:	mov	r3, #1
   38b20:	str	r3, [sp, #52]	; 0x34
   38b24:	ldr	r2, [sp, #8]
   38b28:	b	37ea4 <__assert_fail@plt+0x258b0>
   38b2c:	str	r7, [r4, #80]	; 0x50
   38b30:	mov	r2, #1
   38b34:	mov	r3, #0
   38b38:	b	37f68 <__assert_fail@plt+0x25974>
   38b3c:	andeq	r3, r5, ip, asr #18
   38b40:	andeq	r2, r0, r0, lsl r7
   38b44:	andeq	r6, r0, r9, ror #18
   38b48:			; <UNDEFINED> instruction: 0x01021994
   38b4c:			; <UNDEFINED> instruction: 0xff534d42
   38b50:	andeq	r3, r5, ip, ror r9
   38b54:	andeq	r8, r1, r0, lsr #13
   38b58:	andeq	r0, r0, r2, lsl #2
   38b5c:	andeq	r7, r3, r8, ror #16
   38b60:	andeq	r0, r0, r6, lsl #8
   38b64:	andeq	r9, r0, r0, lsr #31
   38b68:	movtpl	r4, #24911	; 0x614f
   38b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38b70:	bic	r8, r1, #4080	; 0xff0
   38b74:	sub	sp, sp, #36	; 0x24
   38b78:	bic	r8, r8, #15
   38b7c:	cmp	r8, #0
   38b80:	str	r2, [sp, #12]
   38b84:	bne	3902c <__assert_fail@plt+0x26a38>
   38b88:	and	r3, r1, #516	; 0x204
   38b8c:	cmp	r3, #516	; 0x204
   38b90:	mov	r5, r1
   38b94:	beq	38f90 <__assert_fail@plt+0x2699c>
   38b98:	ands	r8, r1, #18
   38b9c:	beq	38f90 <__assert_fail@plt+0x2699c>
   38ba0:	mov	r9, r0
   38ba4:	mov	r1, #96	; 0x60
   38ba8:	mov	r0, #1
   38bac:	bl	37128 <__assert_fail@plt+0x24b34>
   38bb0:	subs	r8, r0, #0
   38bb4:	beq	38ee8 <__assert_fail@plt+0x268f4>
   38bb8:	ldr	r3, [sp, #12]
   38bbc:	tst	r5, #2
   38bc0:	str	r3, [r8, #44]	; 0x2c
   38bc4:	bicne	r3, r5, #512	; 0x200
   38bc8:	orrne	r3, r3, #4
   38bcc:	strne	r3, [r8, #48]	; 0x30
   38bd0:	ldr	r3, [r9]
   38bd4:	streq	r5, [r8, #48]	; 0x30
   38bd8:	mvn	r2, #99	; 0x63
   38bdc:	cmp	r3, #0
   38be0:	str	r2, [r8, #32]
   38be4:	beq	39090 <__assert_fail@plt+0x26a9c>
   38be8:	mov	r6, r9
   38bec:	mov	r4, #0
   38bf0:	mov	r0, r3
   38bf4:	bl	12300 <strlen@plt>
   38bf8:	ldr	r3, [r6, #4]!
   38bfc:	cmp	r4, r0
   38c00:	movcc	r4, r0
   38c04:	cmp	r3, #0
   38c08:	bne	38bf0 <__assert_fail@plt+0x265fc>
   38c0c:	add	r4, r4, #1
   38c10:	cmp	r4, #4096	; 0x1000
   38c14:	movcc	r4, #4096	; 0x1000
   38c18:	ldr	r3, [r8, #36]	; 0x24
   38c1c:	add	r1, r3, #256	; 0x100
   38c20:	add	r1, r1, r4
   38c24:	cmp	r3, r1
   38c28:	bhi	38f5c <__assert_fail@plt+0x26968>
   38c2c:	str	r1, [r8, #36]	; 0x24
   38c30:	ldr	r0, [r8, #24]
   38c34:	bl	3aacc <__assert_fail@plt+0x284d8>
   38c38:	subs	r4, r0, #0
   38c3c:	beq	3912c <__assert_fail@plt+0x26b38>
   38c40:	ldr	fp, [r9]
   38c44:	str	r4, [r8, #24]
   38c48:	cmp	fp, #0
   38c4c:	beq	39010 <__assert_fail@plt+0x26a1c>
   38c50:	mov	r0, #176	; 0xb0
   38c54:	bl	3a010 <__assert_fail@plt+0x27a1c>
   38c58:	subs	r3, r0, #0
   38c5c:	mov	r0, r3
   38c60:	str	r3, [sp, #16]
   38c64:	beq	38f50 <__assert_fail@plt+0x2695c>
   38c68:	ldr	r2, [r8, #24]
   38c6c:	ldr	r3, [sp, #12]
   38c70:	mov	r1, #196608	; 0x30000
   38c74:	cmp	r3, #0
   38c78:	str	r2, [r0, #28]
   38c7c:	mov	r3, #0
   38c80:	mvn	r2, #0
   38c84:	str	r8, [r0, #44]	; 0x2c
   38c88:	strb	r3, [r0, #168]	; 0xa8
   38c8c:	str	r3, [r0, #52]	; 0x34
   38c90:	str	r3, [r0, #32]
   38c94:	str	r3, [r0, #12]
   38c98:	str	r3, [r0, #16]
   38c9c:	str	r3, [r0, #20]
   38ca0:	str	r1, [r0, #58]	; 0x3a
   38ca4:	str	r2, [r0, #48]	; 0x30
   38ca8:	ldr	fp, [r9]
   38cac:	beq	39084 <__assert_fail@plt+0x26a90>
   38cb0:	ldr	r3, [r8, #48]	; 0x30
   38cb4:	lsr	r3, r3, #10
   38cb8:	and	r3, r3, #1
   38cbc:	str	r3, [sp, #24]
   38cc0:	cmp	fp, #0
   38cc4:	beq	39144 <__assert_fail@plt+0x26b50>
   38cc8:	lsr	r5, r5, #11
   38ccc:	mov	r3, #0
   38cd0:	eor	r5, r5, #1
   38cd4:	mov	r6, r3
   38cd8:	str	r3, [sp, #28]
   38cdc:	and	r3, r5, #1
   38ce0:	str	r3, [sp, #20]
   38ce4:	mov	sl, r6
   38ce8:	mov	r7, r6
   38cec:	b	38d2c <__assert_fail@plt+0x26738>
   38cf0:	mov	r3, #11
   38cf4:	strh	r3, [r4, #56]	; 0x38
   38cf8:	mov	r2, #2
   38cfc:	mov	r3, #0
   38d00:	strd	r2, [r4, #112]	; 0x70
   38d04:	ldr	r3, [sp, #12]
   38d08:	cmp	r3, #0
   38d0c:	beq	38e0c <__assert_fail@plt+0x26818>
   38d10:	ldr	fp, [r9, #4]!
   38d14:	str	r7, [r4, #8]
   38d18:	cmp	fp, #0
   38d1c:	mov	r7, r4
   38d20:	add	r4, sl, #1
   38d24:	beq	38e38 <__assert_fail@plt+0x26844>
   38d28:	mov	sl, r4
   38d2c:	mov	r0, fp
   38d30:	bl	12300 <strlen@plt>
   38d34:	ldr	r3, [sp, #20]
   38d38:	cmp	r0, #2
   38d3c:	movls	r3, #0
   38d40:	andhi	r3, r3, #1
   38d44:	cmp	r3, #0
   38d48:	mov	r5, r0
   38d4c:	beq	38d64 <__assert_fail@plt+0x26770>
   38d50:	sub	r2, r0, #1
   38d54:	add	r3, fp, r2
   38d58:	ldrb	r2, [fp, r2]
   38d5c:	cmp	r2, #47	; 0x2f
   38d60:	beq	38ef4 <__assert_fail@plt+0x26900>
   38d64:	add	r0, r5, #176	; 0xb0
   38d68:	bic	r0, r0, #7
   38d6c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   38d70:	subs	r4, r0, #0
   38d74:	beq	38f1c <__assert_fail@plt+0x26928>
   38d78:	add	r3, r4, #168	; 0xa8
   38d7c:	mov	r1, fp
   38d80:	mov	r0, r3
   38d84:	mov	r2, r5
   38d88:	bl	12024 <memcpy@plt>
   38d8c:	add	r1, r4, r5
   38d90:	ldr	r2, [r8, #24]
   38d94:	strb	r6, [r1, #168]	; 0xa8
   38d98:	str	r5, [r4, #52]	; 0x34
   38d9c:	str	r8, [r4, #44]	; 0x2c
   38da0:	str	r6, [r4, #32]
   38da4:	str	r6, [r4, #12]
   38da8:	str	r6, [r4, #16]
   38dac:	str	r6, [r4, #20]
   38db0:	str	r6, [r4, #48]	; 0x30
   38db4:	str	r2, [r4, #28]
   38db8:	mov	r3, r0
   38dbc:	ldr	r0, [sp, #24]
   38dc0:	str	r3, [r4, #24]
   38dc4:	mov	r3, #196608	; 0x30000
   38dc8:	cmp	r7, #0
   38dcc:	moveq	r0, #0
   38dd0:	andne	r0, r0, #1
   38dd4:	str	r3, [r4, #58]	; 0x3a
   38dd8:	ldr	r3, [sp, #16]
   38ddc:	cmp	r0, #0
   38de0:	str	r3, [r4, #4]
   38de4:	bne	38cf0 <__assert_fail@plt+0x266fc>
   38de8:	mov	r3, r6
   38dec:	mov	r2, r4
   38df0:	ldr	r1, [r8, #48]	; 0x30
   38df4:	ldr	r0, [r8, #32]
   38df8:	bl	379a8 <__assert_fail@plt+0x253b4>
   38dfc:	ldr	r3, [sp, #12]
   38e00:	cmp	r3, #0
   38e04:	strh	r0, [r4, #56]	; 0x38
   38e08:	bne	38d10 <__assert_fail@plt+0x2671c>
   38e0c:	cmp	r7, #0
   38e10:	str	r3, [r4, #8]
   38e14:	ldrne	r3, [sp, #28]
   38e18:	ldr	fp, [r9, #4]!
   38e1c:	strne	r4, [sp, #28]
   38e20:	strne	r4, [r3, #8]
   38e24:	streq	r4, [sp, #28]
   38e28:	moveq	r7, r4
   38e2c:	cmp	fp, #0
   38e30:	add	r4, sl, #1
   38e34:	bne	38d28 <__assert_fail@plt+0x26734>
   38e38:	ldr	r3, [sp, #12]
   38e3c:	cmp	r3, #0
   38e40:	cmpne	r4, #1
   38e44:	bhi	39048 <__assert_fail@plt+0x26a54>
   38e48:	mov	r0, #176	; 0xb0
   38e4c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   38e50:	cmp	r0, #0
   38e54:	beq	3913c <__assert_fail@plt+0x26b48>
   38e58:	ldr	r2, [r8, #48]	; 0x30
   38e5c:	ldr	r3, [pc, #744]	; 3914c <__assert_fail@plt+0x26b58>
   38e60:	ldr	lr, [r8, #24]
   38e64:	and	r3, r3, r2
   38e68:	mov	r1, #0
   38e6c:	cmp	r3, #0
   38e70:	mov	ip, #3
   38e74:	mov	r2, #9
   38e78:	mov	r3, #1
   38e7c:	str	r8, [r0, #44]	; 0x2c
   38e80:	str	r0, [r8]
   38e84:	str	r7, [r0, #8]
   38e88:	str	lr, [r0, #28]
   38e8c:	strb	r1, [r0, #168]	; 0xa8
   38e90:	str	r1, [r0, #52]	; 0x34
   38e94:	str	r1, [r0, #32]
   38e98:	str	r1, [r0, #12]
   38e9c:	strh	r1, [r0, #58]	; 0x3a
   38ea0:	str	r1, [r0, #16]
   38ea4:	str	r1, [r0, #20]
   38ea8:	strh	ip, [r0, #60]	; 0x3c
   38eac:	strh	r2, [r0, #56]	; 0x38
   38eb0:	str	r3, [r0, #48]	; 0x30
   38eb4:	bne	38fa8 <__assert_fail@plt+0x269b4>
   38eb8:	mov	r0, #32
   38ebc:	bl	3a010 <__assert_fail@plt+0x27a1c>
   38ec0:	cmp	r0, #0
   38ec4:	str	r0, [r8, #56]	; 0x38
   38ec8:	beq	38f1c <__assert_fail@plt+0x26928>
   38ecc:	bl	4cc6c <__assert_fail@plt+0x3a678>
   38ed0:	ldr	r3, [r8, #48]	; 0x30
   38ed4:	tst	r3, #516	; 0x204
   38ed8:	beq	38fd8 <__assert_fail@plt+0x269e4>
   38edc:	mvn	r1, #0
   38ee0:	add	r0, r8, #60	; 0x3c
   38ee4:	bl	4ceb8 <__assert_fail@plt+0x3a8c4>
   38ee8:	mov	r0, r8
   38eec:	add	sp, sp, #36	; 0x24
   38ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38ef4:	ldrb	r2, [r3, #-1]!
   38ef8:	cmp	r2, #47	; 0x2f
   38efc:	bne	38d64 <__assert_fail@plt+0x26770>
   38f00:	sub	r5, r5, #1
   38f04:	cmp	r5, #1
   38f08:	bne	38ef4 <__assert_fail@plt+0x26900>
   38f0c:	mov	r0, #176	; 0xb0
   38f10:	bl	3a010 <__assert_fail@plt+0x27a1c>
   38f14:	subs	r4, r0, #0
   38f18:	bne	38d78 <__assert_fail@plt+0x26784>
   38f1c:	cmp	r7, #0
   38f20:	beq	38f48 <__assert_fail@plt+0x26954>
   38f24:	ldr	r3, [r7, #12]
   38f28:	ldr	r4, [r7, #8]
   38f2c:	subs	r0, r3, #0
   38f30:	beq	38f38 <__assert_fail@plt+0x26944>
   38f34:	bl	125c4 <closedir@plt>
   38f38:	mov	r0, r7
   38f3c:	bl	376d0 <__assert_fail@plt+0x250dc>
   38f40:	subs	r7, r4, #0
   38f44:	bne	38f24 <__assert_fail@plt+0x26930>
   38f48:	ldr	r0, [sp, #16]
   38f4c:	bl	376d0 <__assert_fail@plt+0x250dc>
   38f50:	ldr	r0, [r8, #24]
   38f54:	bl	376d0 <__assert_fail@plt+0x250dc>
   38f58:	b	38f78 <__assert_fail@plt+0x26984>
   38f5c:	ldr	r0, [r8, #24]
   38f60:	bl	376d0 <__assert_fail@plt+0x250dc>
   38f64:	mov	r3, #0
   38f68:	str	r3, [r8, #24]
   38f6c:	bl	12348 <__errno_location@plt>
   38f70:	mov	r3, #36	; 0x24
   38f74:	str	r3, [r0]
   38f78:	mov	r0, r8
   38f7c:	bl	376d0 <__assert_fail@plt+0x250dc>
   38f80:	mov	r8, #0
   38f84:	mov	r0, r8
   38f88:	add	sp, sp, #36	; 0x24
   38f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38f90:	bl	12348 <__errno_location@plt>
   38f94:	mov	r3, #22
   38f98:	str	r3, [r0]
   38f9c:	mov	r0, r8
   38fa0:	add	sp, sp, #36	; 0x24
   38fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38fa8:	ldr	r3, [pc, #416]	; 39150 <__assert_fail@plt+0x26b5c>
   38fac:	ldr	r2, [pc, #416]	; 39154 <__assert_fail@plt+0x26b60>
   38fb0:	str	r3, [sp]
   38fb4:	mov	r0, #31
   38fb8:	ldr	r3, [pc, #408]	; 39158 <__assert_fail@plt+0x26b64>
   38fbc:	bl	27958 <__assert_fail@plt+0x15364>
   38fc0:	cmp	r0, #0
   38fc4:	str	r0, [r8, #56]	; 0x38
   38fc8:	beq	38f1c <__assert_fail@plt+0x26928>
   38fcc:	ldr	r3, [r8, #48]	; 0x30
   38fd0:	tst	r3, #516	; 0x204
   38fd4:	bne	38edc <__assert_fail@plt+0x268e8>
   38fd8:	ldr	r2, [pc, #380]	; 3915c <__assert_fail@plt+0x26b68>
   38fdc:	tst	r3, #16
   38fe0:	ldr	r1, [pc, #376]	; 39160 <__assert_fail@plt+0x26b6c>
   38fe4:	moveq	r1, r2
   38fe8:	tst	r3, #512	; 0x200
   38fec:	bne	39100 <__assert_fail@plt+0x26b0c>
   38ff0:	ldr	r0, [pc, #364]	; 39164 <__assert_fail@plt+0x26b70>
   38ff4:	bl	26e80 <__assert_fail@plt+0x1488c>
   38ff8:	cmp	r0, #0
   38ffc:	str	r0, [r8, #28]
   39000:	ldrlt	r3, [r8, #48]	; 0x30
   39004:	orrlt	r3, r3, #4
   39008:	strlt	r3, [r8, #48]	; 0x30
   3900c:	b	38edc <__assert_fail@plt+0x268e8>
   39010:	ldr	r3, [sp, #12]
   39014:	cmp	r3, #0
   39018:	strne	fp, [sp, #16]
   3901c:	bne	38cb0 <__assert_fail@plt+0x266bc>
   39020:	str	r3, [sp, #16]
   39024:	mov	r7, r3
   39028:	b	38e48 <__assert_fail@plt+0x26854>
   3902c:	bl	12348 <__errno_location@plt>
   39030:	mov	r8, #0
   39034:	mov	r3, #22
   39038:	str	r3, [r0]
   3903c:	mov	r0, r8
   39040:	add	sp, sp, #36	; 0x24
   39044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39048:	ldr	r2, [r8, #40]	; 0x28
   3904c:	ldr	r5, [r8, #44]	; 0x2c
   39050:	cmp	r4, r2
   39054:	bls	39098 <__assert_fail@plt+0x26aa4>
   39058:	add	r1, sl, #41	; 0x29
   3905c:	cmn	r1, #-1073741823	; 0xc0000001
   39060:	str	r1, [r8, #40]	; 0x28
   39064:	bhi	39114 <__assert_fail@plt+0x26b20>
   39068:	lsl	r1, r1, #2
   3906c:	ldr	r0, [r8, #8]
   39070:	bl	3aacc <__assert_fail@plt+0x284d8>
   39074:	cmp	r0, #0
   39078:	beq	39114 <__assert_fail@plt+0x26b20>
   3907c:	str	r0, [r8, #8]
   39080:	b	3909c <__assert_fail@plt+0x26aa8>
   39084:	mov	r3, #1
   39088:	str	r3, [sp, #24]
   3908c:	b	38cc0 <__assert_fail@plt+0x266cc>
   39090:	mov	r4, #4096	; 0x1000
   39094:	b	38c18 <__assert_fail@plt+0x26624>
   39098:	ldr	r0, [r8, #8]
   3909c:	mov	r2, r0
   390a0:	str	r7, [r2], #4
   390a4:	ldr	r7, [r7, #8]
   390a8:	cmp	r7, #0
   390ac:	bne	390a0 <__assert_fail@plt+0x26aac>
   390b0:	mov	r3, r5
   390b4:	mov	r1, r4
   390b8:	mov	r2, #4
   390bc:	bl	12510 <qsort@plt>
   390c0:	ldr	ip, [r8, #8]
   390c4:	cmp	sl, #0
   390c8:	ldr	r7, [ip]
   390cc:	moveq	r3, r7
   390d0:	beq	390f4 <__assert_fail@plt+0x26b00>
   390d4:	mov	r2, sl
   390d8:	mov	r3, ip
   390dc:	ldr	r1, [r3]
   390e0:	ldr	r0, [r3, #4]!
   390e4:	subs	r2, r2, #1
   390e8:	str	r0, [r1, #8]
   390ec:	bne	390dc <__assert_fail@plt+0x26ae8>
   390f0:	ldr	r3, [ip, sl, lsl #2]
   390f4:	mov	r2, #0
   390f8:	str	r2, [r3, #8]
   390fc:	b	38e48 <__assert_fail@plt+0x26854>
   39100:	mov	r2, r1
   39104:	ldr	r0, [r8, #32]
   39108:	ldr	r1, [pc, #84]	; 39164 <__assert_fail@plt+0x26b70>
   3910c:	bl	2bb5c <__assert_fail@plt+0x19568>
   39110:	b	38ff8 <__assert_fail@plt+0x26a04>
   39114:	ldr	r0, [r8, #8]
   39118:	bl	376d0 <__assert_fail@plt+0x250dc>
   3911c:	mov	r3, #0
   39120:	str	r3, [r8, #8]
   39124:	str	r3, [r8, #40]	; 0x28
   39128:	b	38e48 <__assert_fail@plt+0x26854>
   3912c:	ldr	r0, [r8, #24]
   39130:	bl	376d0 <__assert_fail@plt+0x250dc>
   39134:	str	r4, [r8, #24]
   39138:	b	38f78 <__assert_fail@plt+0x26984>
   3913c:	str	r0, [r8]
   39140:	b	38f1c <__assert_fail@plt+0x26928>
   39144:	mov	r7, fp
   39148:	b	38e48 <__assert_fail@plt+0x26854>
   3914c:	andeq	r0, r0, r2, lsl #2
   39150:	ldrdeq	r7, [r3], -r0
   39154:	andeq	r7, r3, ip, lsl #16
   39158:	andeq	r7, r3, r8, asr #15
   3915c:	andeq	r4, r8, r0, lsl #18
   39160:	andeq	ip, r8, r0, lsl #18
   39164:	andeq	r1, r5, r4, asr #17
   39168:	ldr	r3, [r0]
   3916c:	push	{r4, r5, r6, lr}
   39170:	cmp	r3, #0
   39174:	mov	r6, r0
   39178:	beq	391b4 <__assert_fail@plt+0x26bc0>
   3917c:	ldr	r2, [r3, #48]	; 0x30
   39180:	cmp	r2, #0
   39184:	blt	392f4 <__assert_fail@plt+0x26d00>
   39188:	ldr	r4, [r3, #8]
   3918c:	mov	r0, r3
   39190:	cmp	r4, #0
   39194:	ldreq	r4, [r3, #4]
   39198:	bl	376d0 <__assert_fail@plt+0x250dc>
   3919c:	mov	r3, r4
   391a0:	ldr	r2, [r4, #48]	; 0x30
   391a4:	cmp	r2, #0
   391a8:	bge	39188 <__assert_fail@plt+0x26b94>
   391ac:	mov	r0, r4
   391b0:	bl	376d0 <__assert_fail@plt+0x250dc>
   391b4:	ldr	r4, [r6, #4]
   391b8:	cmp	r4, #0
   391bc:	beq	391e4 <__assert_fail@plt+0x26bf0>
   391c0:	ldr	r3, [r4, #12]
   391c4:	ldr	r5, [r4, #8]
   391c8:	subs	r0, r3, #0
   391cc:	beq	391d4 <__assert_fail@plt+0x26be0>
   391d0:	bl	125c4 <closedir@plt>
   391d4:	mov	r0, r4
   391d8:	bl	376d0 <__assert_fail@plt+0x250dc>
   391dc:	subs	r4, r5, #0
   391e0:	bne	391c0 <__assert_fail@plt+0x26bcc>
   391e4:	ldr	r0, [r6, #8]
   391e8:	bl	376d0 <__assert_fail@plt+0x250dc>
   391ec:	ldr	r0, [r6, #24]
   391f0:	bl	376d0 <__assert_fail@plt+0x250dc>
   391f4:	ldr	r3, [r6, #48]	; 0x30
   391f8:	tst	r3, #512	; 0x200
   391fc:	beq	39298 <__assert_fail@plt+0x26ca4>
   39200:	ldr	r0, [r6, #32]
   39204:	cmp	r0, #0
   39208:	blt	39218 <__assert_fail@plt+0x26c24>
   3920c:	bl	125ac <close@plt>
   39210:	cmp	r0, #0
   39214:	bne	392e8 <__assert_fail@plt+0x26cf4>
   39218:	mov	r5, #0
   3921c:	add	r4, r6, #60	; 0x3c
   39220:	b	39230 <__assert_fail@plt+0x26c3c>
   39224:	bl	4cf30 <__assert_fail@plt+0x3a93c>
   39228:	cmp	r0, #0
   3922c:	bge	39290 <__assert_fail@plt+0x26c9c>
   39230:	mov	r0, r4
   39234:	bl	4cee4 <__assert_fail@plt+0x3a8f0>
   39238:	cmp	r0, #0
   3923c:	mov	r0, r4
   39240:	beq	39224 <__assert_fail@plt+0x26c30>
   39244:	ldr	r0, [r6, #52]	; 0x34
   39248:	cmp	r0, #0
   3924c:	beq	39254 <__assert_fail@plt+0x26c60>
   39250:	bl	27c48 <__assert_fail@plt+0x15654>
   39254:	ldr	r2, [r6, #48]	; 0x30
   39258:	ldr	r3, [pc, #204]	; 3932c <__assert_fail@plt+0x26d38>
   3925c:	ldr	r0, [r6, #56]	; 0x38
   39260:	and	r3, r3, r2
   39264:	cmp	r3, #0
   39268:	beq	392e0 <__assert_fail@plt+0x26cec>
   3926c:	cmp	r0, #0
   39270:	beq	39278 <__assert_fail@plt+0x26c84>
   39274:	bl	27c48 <__assert_fail@plt+0x15654>
   39278:	mov	r0, r6
   3927c:	bl	376d0 <__assert_fail@plt+0x250dc>
   39280:	cmp	r5, #0
   39284:	bne	3931c <__assert_fail@plt+0x26d28>
   39288:	mov	r0, r5
   3928c:	pop	{r4, r5, r6, pc}
   39290:	bl	125ac <close@plt>
   39294:	b	39230 <__assert_fail@plt+0x26c3c>
   39298:	tst	r3, #4
   3929c:	bne	39218 <__assert_fail@plt+0x26c24>
   392a0:	ldr	r0, [r6, #28]
   392a4:	bl	124f8 <fchdir@plt>
   392a8:	cmp	r0, #0
   392ac:	beq	392fc <__assert_fail@plt+0x26d08>
   392b0:	bl	12348 <__errno_location@plt>
   392b4:	mov	r4, r0
   392b8:	ldr	r0, [r6, #28]
   392bc:	ldr	r5, [r4]
   392c0:	bl	125ac <close@plt>
   392c4:	adds	r0, r0, #0
   392c8:	movne	r0, #1
   392cc:	cmp	r5, #0
   392d0:	movne	r0, #0
   392d4:	cmp	r0, #0
   392d8:	beq	3921c <__assert_fail@plt+0x26c28>
   392dc:	b	39314 <__assert_fail@plt+0x26d20>
   392e0:	bl	376d0 <__assert_fail@plt+0x250dc>
   392e4:	b	39278 <__assert_fail@plt+0x26c84>
   392e8:	bl	12348 <__errno_location@plt>
   392ec:	ldr	r5, [r0]
   392f0:	b	3921c <__assert_fail@plt+0x26c28>
   392f4:	mov	r4, r3
   392f8:	b	391ac <__assert_fail@plt+0x26bb8>
   392fc:	ldr	r0, [r6, #28]
   39300:	bl	125ac <close@plt>
   39304:	cmp	r0, #0
   39308:	beq	39218 <__assert_fail@plt+0x26c24>
   3930c:	bl	12348 <__errno_location@plt>
   39310:	mov	r4, r0
   39314:	ldr	r5, [r4]
   39318:	b	3921c <__assert_fail@plt+0x26c28>
   3931c:	bl	12348 <__errno_location@plt>
   39320:	str	r5, [r0]
   39324:	mvn	r5, #0
   39328:	b	39288 <__assert_fail@plt+0x26c94>
   3932c:	andeq	r0, r0, r2, lsl #2
   39330:	push	{r4, r5, r6, r7, r8, r9, lr}
   39334:	sub	sp, sp, #12
   39338:	ldr	r4, [r0]
   3933c:	cmp	r4, #0
   39340:	beq	39474 <__assert_fail@plt+0x26e80>
   39344:	ldr	r1, [r0, #48]	; 0x30
   39348:	ands	r5, r1, #8192	; 0x2000
   3934c:	bne	39474 <__assert_fail@plt+0x26e80>
   39350:	ldrh	r3, [r4, #60]	; 0x3c
   39354:	mov	r2, #3
   39358:	mov	r7, r0
   3935c:	cmp	r3, #1
   39360:	strh	r2, [r4, #60]	; 0x3c
   39364:	beq	397ec <__assert_fail@plt+0x271f8>
   39368:	cmp	r3, #2
   3936c:	beq	39484 <__assert_fail@plt+0x26e90>
   39370:	ldrh	r2, [r4, #56]	; 0x38
   39374:	cmp	r2, #1
   39378:	bne	393b0 <__assert_fail@plt+0x26dbc>
   3937c:	cmp	r3, #4
   39380:	bne	3949c <__assert_fail@plt+0x26ea8>
   39384:	b	394b8 <__assert_fail@plt+0x26ec4>
   39388:	str	r6, [r7]
   3938c:	mov	r0, r4
   39390:	bl	376d0 <__assert_fail@plt+0x250dc>
   39394:	ldr	r3, [r6, #48]	; 0x30
   39398:	cmp	r3, #0
   3939c:	beq	39524 <__assert_fail@plt+0x26f30>
   393a0:	ldrh	r3, [r6, #60]	; 0x3c
   393a4:	mov	r4, r6
   393a8:	cmp	r3, #4
   393ac:	bne	396d8 <__assert_fail@plt+0x270e4>
   393b0:	ldr	r6, [r4, #8]
   393b4:	cmp	r6, #0
   393b8:	bne	39388 <__assert_fail@plt+0x26d94>
   393bc:	ldr	r6, [r4, #4]
   393c0:	ldr	r3, [r6, #12]
   393c4:	cmp	r3, #0
   393c8:	bne	39a7c <__assert_fail@plt+0x27488>
   393cc:	str	r6, [r7]
   393d0:	mov	r0, r4
   393d4:	bl	376d0 <__assert_fail@plt+0x250dc>
   393d8:	ldr	r3, [r6, #48]	; 0x30
   393dc:	cmn	r3, #1
   393e0:	beq	3996c <__assert_fail@plt+0x27378>
   393e4:	ldrh	r3, [r6, #56]	; 0x38
   393e8:	cmp	r3, #11
   393ec:	beq	3974c <__assert_fail@plt+0x27158>
   393f0:	ldr	r3, [r6, #40]	; 0x28
   393f4:	ldr	r2, [r7, #24]
   393f8:	mov	r1, #0
   393fc:	strb	r1, [r2, r3]
   39400:	ldr	r3, [r6, #48]	; 0x30
   39404:	cmp	r3, r1
   39408:	beq	39868 <__assert_fail@plt+0x27274>
   3940c:	ldrh	r3, [r6, #58]	; 0x3a
   39410:	tst	r3, #2
   39414:	beq	39828 <__assert_fail@plt+0x27234>
   39418:	ldr	r3, [r7, #48]	; 0x30
   3941c:	tst	r3, #4
   39420:	beq	398dc <__assert_fail@plt+0x272e8>
   39424:	ldr	r0, [r6, #36]	; 0x24
   39428:	bl	125ac <close@plt>
   3942c:	ldr	r3, [r7, #48]	; 0x30
   39430:	ldrh	r2, [r6, #56]	; 0x38
   39434:	cmp	r2, #2
   39438:	beq	3946c <__assert_fail@plt+0x26e78>
   3943c:	ldr	r2, [r6, #32]
   39440:	cmp	r2, #0
   39444:	movne	r2, #7
   39448:	strhne	r2, [r6, #56]	; 0x38
   3944c:	bne	3946c <__assert_fail@plt+0x26e78>
   39450:	mov	r2, #6
   39454:	mov	r0, r3
   39458:	strh	r2, [r6, #56]	; 0x38
   3945c:	add	r1, r7, #56	; 0x38
   39460:	mov	r2, r6
   39464:	bl	37af4 <__assert_fail@plt+0x25500>
   39468:	ldr	r3, [r7, #48]	; 0x30
   3946c:	tst	r3, #8192	; 0x2000
   39470:	beq	39518 <__assert_fail@plt+0x26f24>
   39474:	mov	r6, #0
   39478:	mov	r0, r6
   3947c:	add	sp, sp, #12
   39480:	pop	{r4, r5, r6, r7, r8, r9, pc}
   39484:	ldrh	r3, [r4, #56]	; 0x38
   39488:	sub	r2, r3, #12
   3948c:	cmp	r2, #1
   39490:	bls	39924 <__assert_fail@plt+0x27330>
   39494:	cmp	r3, #1
   39498:	bne	393b0 <__assert_fail@plt+0x26dbc>
   3949c:	tst	r1, #64	; 0x40
   394a0:	beq	39758 <__assert_fail@plt+0x27164>
   394a4:	ldrd	r8, [r4, #64]	; 0x40
   394a8:	ldrd	r2, [r7, #16]
   394ac:	cmp	r9, r3
   394b0:	cmpeq	r8, r2
   394b4:	beq	39758 <__assert_fail@plt+0x27164>
   394b8:	ldrh	r3, [r4, #58]	; 0x3a
   394bc:	tst	r3, #2
   394c0:	bne	39a70 <__assert_fail@plt+0x2747c>
   394c4:	ldr	r5, [r7, #4]
   394c8:	cmp	r5, #0
   394cc:	beq	394fc <__assert_fail@plt+0x26f08>
   394d0:	ldr	r0, [r5, #12]
   394d4:	ldr	r6, [r5, #8]
   394d8:	cmp	r0, #0
   394dc:	beq	394e4 <__assert_fail@plt+0x26ef0>
   394e0:	bl	125c4 <closedir@plt>
   394e4:	mov	r0, r5
   394e8:	bl	376d0 <__assert_fail@plt+0x250dc>
   394ec:	cmp	r6, #0
   394f0:	mov	r5, r6
   394f4:	bne	394d0 <__assert_fail@plt+0x26edc>
   394f8:	str	r6, [r7, #4]
   394fc:	mov	r3, #6
   39500:	strh	r3, [r4, #56]	; 0x38
   39504:	mov	r2, r4
   39508:	add	r1, r7, #56	; 0x38
   3950c:	ldr	r0, [r7, #48]	; 0x30
   39510:	mov	r6, r4
   39514:	bl	37af4 <__assert_fail@plt+0x25500>
   39518:	mov	r0, r6
   3951c:	add	sp, sp, #12
   39520:	pop	{r4, r5, r6, r7, r8, r9, pc}
   39524:	ldr	r3, [r7, #48]	; 0x30
   39528:	ands	r8, r3, #4
   3952c:	addne	r4, r7, #60	; 0x3c
   39530:	bne	39564 <__assert_fail@plt+0x26f70>
   39534:	tst	r3, #512	; 0x200
   39538:	bne	3998c <__assert_fail@plt+0x27398>
   3953c:	ldr	r0, [r7, #28]
   39540:	bl	124f8 <fchdir@plt>
   39544:	add	r4, r7, #60	; 0x3c
   39548:	adds	r5, r0, #0
   3954c:	movne	r5, #1
   39550:	b	39564 <__assert_fail@plt+0x26f70>
   39554:	mov	r0, r4
   39558:	bl	4cf30 <__assert_fail@plt+0x3a93c>
   3955c:	cmp	r0, #0
   39560:	bge	39750 <__assert_fail@plt+0x2715c>
   39564:	mov	r0, r4
   39568:	bl	4cee4 <__assert_fail@plt+0x3a8f0>
   3956c:	cmp	r0, #0
   39570:	beq	39554 <__assert_fail@plt+0x26f60>
   39574:	cmp	r5, #0
   39578:	bne	39a4c <__assert_fail@plt+0x27458>
   3957c:	ldr	r2, [r7, #48]	; 0x30
   39580:	ldr	r3, [pc, #1760]	; 39c68 <__assert_fail@plt+0x27674>
   39584:	ldr	r0, [r7, #56]	; 0x38
   39588:	and	r3, r3, r2
   3958c:	cmp	r3, #0
   39590:	beq	39a44 <__assert_fail@plt+0x27450>
   39594:	cmp	r0, #0
   39598:	beq	395a0 <__assert_fail@plt+0x26fac>
   3959c:	bl	27c48 <__assert_fail@plt+0x15654>
   395a0:	ldr	r2, [r6, #52]	; 0x34
   395a4:	add	r5, r6, #168	; 0xa8
   395a8:	str	r2, [r6, #40]	; 0x28
   395ac:	mov	r1, r5
   395b0:	add	r2, r2, #1
   395b4:	ldr	r0, [r7, #24]
   395b8:	bl	11fb8 <memmove@plt>
   395bc:	mov	r0, r5
   395c0:	mov	r1, #47	; 0x2f
   395c4:	bl	12468 <strrchr@plt>
   395c8:	cmp	r0, #0
   395cc:	beq	395fc <__assert_fail@plt+0x27008>
   395d0:	cmp	r5, r0
   395d4:	beq	39a60 <__assert_fail@plt+0x2746c>
   395d8:	add	r4, r0, #1
   395dc:	mov	r0, r4
   395e0:	bl	12300 <strlen@plt>
   395e4:	mov	r1, r4
   395e8:	mov	r8, r0
   395ec:	add	r2, r8, #1
   395f0:	mov	r0, r5
   395f4:	bl	11fb8 <memmove@plt>
   395f8:	str	r8, [r6, #52]	; 0x34
   395fc:	ldr	r1, [r7, #48]	; 0x30
   39600:	ldr	r3, [pc, #1632]	; 39c68 <__assert_fail@plt+0x27674>
   39604:	ldr	r2, [r7, #24]
   39608:	and	r3, r3, r1
   3960c:	cmp	r3, #0
   39610:	str	r2, [r6, #28]
   39614:	str	r2, [r6, #24]
   39618:	beq	39808 <__assert_fail@plt+0x27214>
   3961c:	ldr	r2, [pc, #1608]	; 39c6c <__assert_fail@plt+0x27678>
   39620:	ldr	r3, [pc, #1608]	; 39c70 <__assert_fail@plt+0x2767c>
   39624:	str	r2, [sp]
   39628:	mov	r1, #0
   3962c:	ldr	r2, [pc, #1600]	; 39c74 <__assert_fail@plt+0x27680>
   39630:	mov	r0, #31
   39634:	bl	27958 <__assert_fail@plt+0x15364>
   39638:	ldrh	r3, [r6, #56]	; 0x38
   3963c:	str	r0, [r7, #56]	; 0x38
   39640:	cmp	r3, #11
   39644:	str	r6, [r7]
   39648:	beq	39730 <__assert_fail@plt+0x2713c>
   3964c:	cmp	r3, #1
   39650:	bne	39518 <__assert_fail@plt+0x26f24>
   39654:	ldr	r3, [r6, #48]	; 0x30
   39658:	cmp	r3, #0
   3965c:	ldrdeq	r2, [r6, #64]	; 0x40
   39660:	strdeq	r2, [r7, #16]
   39664:	ldr	r2, [r7, #48]	; 0x30
   39668:	ldr	r3, [pc, #1528]	; 39c68 <__assert_fail@plt+0x27674>
   3966c:	and	r3, r3, r2
   39670:	cmp	r3, #0
   39674:	beq	397cc <__assert_fail@plt+0x271d8>
   39678:	mov	r0, #24
   3967c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   39680:	subs	r8, r0, #0
   39684:	beq	39958 <__assert_fail@plt+0x27364>
   39688:	ldrd	r4, [r6, #64]	; 0x40
   3968c:	ldrd	r2, [r6, #160]	; 0xa0
   39690:	ldr	r0, [r7, #56]	; 0x38
   39694:	strd	r4, [r8]
   39698:	strd	r2, [r8, #8]
   3969c:	str	r6, [r8, #16]
   396a0:	mov	r1, r8
   396a4:	bl	282c0 <__assert_fail@plt+0x15ccc>
   396a8:	cmp	r8, r0
   396ac:	mov	r4, r0
   396b0:	beq	39518 <__assert_fail@plt+0x26f24>
   396b4:	mov	r0, r8
   396b8:	bl	376d0 <__assert_fail@plt+0x250dc>
   396bc:	cmp	r4, #0
   396c0:	beq	39958 <__assert_fail@plt+0x27364>
   396c4:	ldr	r2, [r4, #16]
   396c8:	mov	r3, #2
   396cc:	str	r2, [r6]
   396d0:	strh	r3, [r6, #56]	; 0x38
   396d4:	b	39518 <__assert_fail@plt+0x26f24>
   396d8:	cmp	r3, #2
   396dc:	beq	39ab0 <__assert_fail@plt+0x274bc>
   396e0:	ldr	r3, [r6, #4]
   396e4:	mov	ip, #47	; 0x2f
   396e8:	ldr	r2, [r7, #24]
   396ec:	ldr	r0, [r3, #40]	; 0x28
   396f0:	ldr	lr, [r3, #28]
   396f4:	sub	r3, r0, #1
   396f8:	add	r1, r6, #168	; 0xa8
   396fc:	ldrb	lr, [lr, r3]
   39700:	cmp	lr, ip
   39704:	movne	r3, r0
   39708:	add	r0, r2, r3
   3970c:	strb	ip, [r2, r3]
   39710:	ldr	r2, [r6, #52]	; 0x34
   39714:	add	r0, r0, #1
   39718:	add	r2, r2, #1
   3971c:	bl	11fb8 <memmove@plt>
   39720:	ldrh	r3, [r6, #56]	; 0x38
   39724:	str	r6, [r7]
   39728:	cmp	r3, #11
   3972c:	bne	3964c <__assert_fail@plt+0x27058>
   39730:	ldrd	r2, [r6, #112]	; 0x70
   39734:	cmp	r3, #0
   39738:	cmpeq	r2, #2
   3973c:	beq	39adc <__assert_fail@plt+0x274e8>
   39740:	cmp	r3, #0
   39744:	cmpeq	r2, #1
   39748:	beq	39518 <__assert_fail@plt+0x26f24>
   3974c:	bl	125a0 <abort@plt>
   39750:	bl	125ac <close@plt>
   39754:	b	39564 <__assert_fail@plt+0x26f70>
   39758:	ldr	r5, [r7, #4]
   3975c:	cmp	r5, #0
   39760:	beq	399ec <__assert_fail@plt+0x273f8>
   39764:	tst	r1, #4096	; 0x1000
   39768:	bne	399b8 <__assert_fail@plt+0x273c4>
   3976c:	ldr	r3, [r4, #24]
   39770:	mvn	r2, #0
   39774:	mov	r1, r4
   39778:	mov	r0, r7
   3977c:	bl	37bac <__assert_fail@plt+0x255b8>
   39780:	cmp	r0, #0
   39784:	beq	398cc <__assert_fail@plt+0x272d8>
   39788:	bl	12348 <__errno_location@plt>
   3978c:	ldrh	r3, [r4, #58]	; 0x3a
   39790:	ldr	r6, [r7, #4]
   39794:	orr	r3, r3, #1
   39798:	cmp	r6, #0
   3979c:	ldr	r2, [r0]
   397a0:	strh	r3, [r4, #58]	; 0x3a
   397a4:	str	r2, [r4, #32]
   397a8:	beq	398d0 <__assert_fail@plt+0x272dc>
   397ac:	mov	r3, r6
   397b0:	ldr	r2, [r3, #4]
   397b4:	ldr	r2, [r2, #24]
   397b8:	str	r2, [r3, #24]
   397bc:	ldr	r3, [r3, #8]
   397c0:	cmp	r3, #0
   397c4:	bne	397b0 <__assert_fail@plt+0x271bc>
   397c8:	b	398d0 <__assert_fail@plt+0x272dc>
   397cc:	ldr	r0, [r7, #56]	; 0x38
   397d0:	add	r1, r6, #64	; 0x40
   397d4:	bl	4cc90 <__assert_fail@plt+0x3a69c>
   397d8:	cmp	r0, #0
   397dc:	movne	r3, #2
   397e0:	strne	r6, [r6]
   397e4:	strhne	r3, [r6, #56]	; 0x38
   397e8:	b	39518 <__assert_fail@plt+0x26f24>
   397ec:	mov	r3, r5
   397f0:	ldr	r0, [r0, #32]
   397f4:	mov	r2, r4
   397f8:	bl	379a8 <__assert_fail@plt+0x253b4>
   397fc:	mov	r6, r4
   39800:	strh	r0, [r4, #56]	; 0x38
   39804:	b	39518 <__assert_fail@plt+0x26f24>
   39808:	mov	r0, #32
   3980c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   39810:	cmp	r0, #0
   39814:	str	r0, [r7, #56]	; 0x38
   39818:	beq	39720 <__assert_fail@plt+0x2712c>
   3981c:	bl	4cc6c <__assert_fail@plt+0x3a678>
   39820:	ldrh	r3, [r6, #56]	; 0x38
   39824:	b	39640 <__assert_fail@plt+0x2704c>
   39828:	tst	r3, #1
   3982c:	bne	3942c <__assert_fail@plt+0x26e38>
   39830:	ldr	r3, [pc, #1088]	; 39c78 <__assert_fail@plt+0x27684>
   39834:	mvn	r2, #0
   39838:	ldr	r1, [r6, #4]
   3983c:	mov	r0, r7
   39840:	bl	37bac <__assert_fail@plt+0x255b8>
   39844:	cmp	r0, #0
   39848:	beq	3942c <__assert_fail@plt+0x26e38>
   3984c:	bl	12348 <__errno_location@plt>
   39850:	ldr	r3, [r7, #48]	; 0x30
   39854:	orr	r3, r3, #8192	; 0x2000
   39858:	ldr	r2, [r0]
   3985c:	str	r2, [r6, #32]
   39860:	str	r3, [r7, #48]	; 0x30
   39864:	b	39430 <__assert_fail@plt+0x26e3c>
   39868:	ldr	r3, [r7, #48]	; 0x30
   3986c:	ands	r8, r3, #4
   39870:	addne	r4, r7, #60	; 0x3c
   39874:	bne	398a8 <__assert_fail@plt+0x272b4>
   39878:	tst	r3, #512	; 0x200
   3987c:	bne	39b28 <__assert_fail@plt+0x27534>
   39880:	ldr	r0, [r7, #28]
   39884:	bl	124f8 <fchdir@plt>
   39888:	add	r4, r7, #60	; 0x3c
   3988c:	adds	r5, r0, #0
   39890:	movne	r5, #1
   39894:	b	398a8 <__assert_fail@plt+0x272b4>
   39898:	mov	r0, r4
   3989c:	bl	4cf30 <__assert_fail@plt+0x3a93c>
   398a0:	cmp	r0, #0
   398a4:	bge	398c4 <__assert_fail@plt+0x272d0>
   398a8:	mov	r0, r4
   398ac:	bl	4cee4 <__assert_fail@plt+0x3a8f0>
   398b0:	cmp	r0, #0
   398b4:	beq	39898 <__assert_fail@plt+0x272a4>
   398b8:	cmp	r5, #0
   398bc:	bne	3984c <__assert_fail@plt+0x27258>
   398c0:	b	3942c <__assert_fail@plt+0x26e38>
   398c4:	bl	125ac <close@plt>
   398c8:	b	398a8 <__assert_fail@plt+0x272b4>
   398cc:	ldr	r6, [r7, #4]
   398d0:	mov	r3, #0
   398d4:	str	r3, [r7, #4]
   398d8:	b	396e0 <__assert_fail@plt+0x270ec>
   398dc:	tst	r3, #512	; 0x200
   398e0:	beq	39afc <__assert_fail@plt+0x27508>
   398e4:	ldr	r1, [r7, #32]
   398e8:	ldr	r4, [r6, #36]	; 0x24
   398ec:	cmn	r1, #100	; 0x64
   398f0:	sub	r3, r4, r1
   398f4:	clz	r3, r3
   398f8:	lsr	r3, r3, #5
   398fc:	moveq	r3, #0
   39900:	cmp	r3, #0
   39904:	bne	3974c <__assert_fail@plt+0x27158>
   39908:	add	r0, r7, #60	; 0x3c
   3990c:	bl	4ceec <__assert_fail@plt+0x3a8f8>
   39910:	cmp	r0, #0
   39914:	blt	3991c <__assert_fail@plt+0x27328>
   39918:	bl	125ac <close@plt>
   3991c:	str	r4, [r7, #32]
   39920:	b	39424 <__assert_fail@plt+0x26e30>
   39924:	mov	r3, #1
   39928:	mov	r2, r4
   3992c:	ldr	r0, [r0, #32]
   39930:	bl	379a8 <__assert_fail@plt+0x253b4>
   39934:	cmp	r0, #1
   39938:	strh	r0, [r4, #56]	; 0x38
   3993c:	mov	r3, r0
   39940:	beq	39b68 <__assert_fail@plt+0x27574>
   39944:	cmp	r0, #11
   39948:	mov	r6, r4
   3994c:	str	r4, [r7]
   39950:	bne	39518 <__assert_fail@plt+0x26f24>
   39954:	b	39730 <__assert_fail@plt+0x2713c>
   39958:	bl	12348 <__errno_location@plt>
   3995c:	mov	r3, #12
   39960:	mov	r6, #0
   39964:	str	r3, [r0]
   39968:	b	39518 <__assert_fail@plt+0x26f24>
   3996c:	mov	r0, r6
   39970:	bl	376d0 <__assert_fail@plt+0x250dc>
   39974:	bl	12348 <__errno_location@plt>
   39978:	mov	r3, #0
   3997c:	mov	r6, r3
   39980:	str	r3, [r0]
   39984:	str	r3, [r7]
   39988:	b	39518 <__assert_fail@plt+0x26f24>
   3998c:	add	r4, r7, #60	; 0x3c
   39990:	mov	r0, r4
   39994:	ldr	r1, [r7, #32]
   39998:	bl	4ceec <__assert_fail@plt+0x3a8f8>
   3999c:	cmp	r0, #0
   399a0:	blt	399a8 <__assert_fail@plt+0x273b4>
   399a4:	bl	125ac <close@plt>
   399a8:	mvn	r3, #99	; 0x63
   399ac:	mov	r5, r8
   399b0:	str	r3, [r7, #32]
   399b4:	b	39564 <__assert_fail@plt+0x26f70>
   399b8:	bic	ip, r1, #4096	; 0x1000
   399bc:	str	ip, [r7, #48]	; 0x30
   399c0:	ldr	r0, [r5, #12]
   399c4:	ldr	r6, [r5, #8]
   399c8:	cmp	r0, #0
   399cc:	beq	399d4 <__assert_fail@plt+0x273e0>
   399d0:	bl	125c4 <closedir@plt>
   399d4:	mov	r0, r5
   399d8:	bl	376d0 <__assert_fail@plt+0x250dc>
   399dc:	cmp	r6, #0
   399e0:	mov	r5, r6
   399e4:	bne	399c0 <__assert_fail@plt+0x273cc>
   399e8:	str	r6, [r7, #4]
   399ec:	mov	r1, #3
   399f0:	mov	r0, r7
   399f4:	bl	37e44 <__assert_fail@plt+0x25850>
   399f8:	cmp	r0, #0
   399fc:	mov	r6, r0
   39a00:	str	r0, [r7, #4]
   39a04:	bne	398d0 <__assert_fail@plt+0x272dc>
   39a08:	ldr	r0, [r7, #48]	; 0x30
   39a0c:	tst	r0, #8192	; 0x2000
   39a10:	bne	39474 <__assert_fail@plt+0x26e80>
   39a14:	ldr	r3, [r4, #32]
   39a18:	cmp	r3, #0
   39a1c:	beq	39a30 <__assert_fail@plt+0x2743c>
   39a20:	ldrh	r3, [r4, #56]	; 0x38
   39a24:	cmp	r3, #4
   39a28:	movne	r3, #7
   39a2c:	strhne	r3, [r4, #56]	; 0x38
   39a30:	add	r1, r7, #56	; 0x38
   39a34:	mov	r2, r4
   39a38:	bl	37af4 <__assert_fail@plt+0x25500>
   39a3c:	mov	r6, r4
   39a40:	b	39518 <__assert_fail@plt+0x26f24>
   39a44:	bl	376d0 <__assert_fail@plt+0x250dc>
   39a48:	b	395a0 <__assert_fail@plt+0x26fac>
   39a4c:	ldr	r3, [r7, #48]	; 0x30
   39a50:	mov	r6, #0
   39a54:	orr	r3, r3, #8192	; 0x2000
   39a58:	str	r3, [r7, #48]	; 0x30
   39a5c:	b	39518 <__assert_fail@plt+0x26f24>
   39a60:	ldrb	r3, [r6, #169]	; 0xa9
   39a64:	cmp	r3, #0
   39a68:	bne	395d8 <__assert_fail@plt+0x26fe4>
   39a6c:	b	395fc <__assert_fail@plt+0x27008>
   39a70:	ldr	r0, [r4, #36]	; 0x24
   39a74:	bl	125ac <close@plt>
   39a78:	b	394c4 <__assert_fail@plt+0x26ed0>
   39a7c:	ldr	r3, [r6, #40]	; 0x28
   39a80:	ldr	r2, [r7, #24]
   39a84:	mov	r0, #0
   39a88:	str	r6, [r7]
   39a8c:	mov	r1, #3
   39a90:	strb	r0, [r2, r3]
   39a94:	mov	r0, r7
   39a98:	bl	37e44 <__assert_fail@plt+0x25850>
   39a9c:	subs	r6, r0, #0
   39aa0:	beq	39b54 <__assert_fail@plt+0x27560>
   39aa4:	mov	r0, r4
   39aa8:	bl	376d0 <__assert_fail@plt+0x250dc>
   39aac:	b	396e0 <__assert_fail@plt+0x270ec>
   39ab0:	mov	r3, #1
   39ab4:	mov	r2, r6
   39ab8:	ldr	r1, [r7, #48]	; 0x30
   39abc:	ldr	r0, [r7, #32]
   39ac0:	bl	379a8 <__assert_fail@plt+0x253b4>
   39ac4:	cmp	r0, #1
   39ac8:	strh	r0, [r6, #56]	; 0x38
   39acc:	beq	39b80 <__assert_fail@plt+0x2758c>
   39ad0:	mov	r3, #3
   39ad4:	strh	r3, [r6, #60]	; 0x3c
   39ad8:	b	396e0 <__assert_fail@plt+0x270ec>
   39adc:	mov	r3, #0
   39ae0:	mov	r2, r6
   39ae4:	ldr	r1, [r7, #48]	; 0x30
   39ae8:	ldr	r0, [r7, #32]
   39aec:	bl	379a8 <__assert_fail@plt+0x253b4>
   39af0:	mov	r3, r0
   39af4:	strh	r0, [r6, #56]	; 0x38
   39af8:	b	3964c <__assert_fail@plt+0x27058>
   39afc:	ldr	r0, [r6, #36]	; 0x24
   39b00:	bl	124f8 <fchdir@plt>
   39b04:	cmp	r0, #0
   39b08:	beq	39424 <__assert_fail@plt+0x26e30>
   39b0c:	bl	12348 <__errno_location@plt>
   39b10:	ldr	r3, [r7, #48]	; 0x30
   39b14:	orr	r3, r3, #8192	; 0x2000
   39b18:	ldr	r2, [r0]
   39b1c:	str	r2, [r6, #32]
   39b20:	str	r3, [r7, #48]	; 0x30
   39b24:	b	39424 <__assert_fail@plt+0x26e30>
   39b28:	add	r4, r7, #60	; 0x3c
   39b2c:	mov	r0, r4
   39b30:	ldr	r1, [r7, #32]
   39b34:	bl	4ceec <__assert_fail@plt+0x3a8f8>
   39b38:	cmp	r0, #0
   39b3c:	blt	39b44 <__assert_fail@plt+0x27550>
   39b40:	bl	125ac <close@plt>
   39b44:	mvn	r3, #99	; 0x63
   39b48:	mov	r5, r8
   39b4c:	str	r3, [r7, #32]
   39b50:	b	398a8 <__assert_fail@plt+0x272b4>
   39b54:	ldr	r3, [r7, #48]	; 0x30
   39b58:	tst	r3, #8192	; 0x2000
   39b5c:	bne	39474 <__assert_fail@plt+0x26e80>
   39b60:	ldr	r6, [r4, #4]
   39b64:	b	393cc <__assert_fail@plt+0x26dd8>
   39b68:	ldr	r1, [r7, #48]	; 0x30
   39b6c:	tst	r1, #4
   39b70:	beq	39bcc <__assert_fail@plt+0x275d8>
   39b74:	str	r4, [r7]
   39b78:	mov	r6, r4
   39b7c:	b	3964c <__assert_fail@plt+0x27058>
   39b80:	ldr	r3, [r7, #48]	; 0x30
   39b84:	tst	r3, #4
   39b88:	bne	39ad0 <__assert_fail@plt+0x274dc>
   39b8c:	ldr	r1, [pc, #232]	; 39c7c <__assert_fail@plt+0x27688>
   39b90:	tst	r3, #16
   39b94:	ldr	r2, [pc, #228]	; 39c80 <__assert_fail@plt+0x2768c>
   39b98:	movne	r2, r1
   39b9c:	tst	r3, #512	; 0x200
   39ba0:	bne	39c2c <__assert_fail@plt+0x27638>
   39ba4:	mov	r1, r2
   39ba8:	ldr	r0, [pc, #212]	; 39c84 <__assert_fail@plt+0x27690>
   39bac:	bl	26e80 <__assert_fail@plt+0x1488c>
   39bb0:	cmp	r0, #0
   39bb4:	str	r0, [r6, #36]	; 0x24
   39bb8:	blt	39c14 <__assert_fail@plt+0x27620>
   39bbc:	ldrh	r3, [r6, #58]	; 0x3a
   39bc0:	orr	r3, r3, #2
   39bc4:	strh	r3, [r6, #58]	; 0x3a
   39bc8:	b	39ad0 <__assert_fail@plt+0x274dc>
   39bcc:	ldr	r3, [pc, #168]	; 39c7c <__assert_fail@plt+0x27688>
   39bd0:	tst	r1, #16
   39bd4:	ldr	r2, [pc, #164]	; 39c80 <__assert_fail@plt+0x2768c>
   39bd8:	movne	r2, r3
   39bdc:	tst	r1, #512	; 0x200
   39be0:	bne	39c58 <__assert_fail@plt+0x27664>
   39be4:	mov	r1, r2
   39be8:	ldr	r0, [pc, #148]	; 39c84 <__assert_fail@plt+0x27690>
   39bec:	bl	26e80 <__assert_fail@plt+0x1488c>
   39bf0:	cmp	r0, #0
   39bf4:	str	r0, [r4, #36]	; 0x24
   39bf8:	blt	39c3c <__assert_fail@plt+0x27648>
   39bfc:	ldrh	r2, [r4, #58]	; 0x3a
   39c00:	ldrh	r3, [r4, #56]	; 0x38
   39c04:	mov	r6, r4
   39c08:	orr	r2, r2, #2
   39c0c:	strh	r2, [r4, #58]	; 0x3a
   39c10:	b	39640 <__assert_fail@plt+0x2704c>
   39c14:	bl	12348 <__errno_location@plt>
   39c18:	mov	r2, #7
   39c1c:	ldr	r3, [r0]
   39c20:	strh	r2, [r6, #56]	; 0x38
   39c24:	str	r3, [r6, #32]
   39c28:	b	39ad0 <__assert_fail@plt+0x274dc>
   39c2c:	ldr	r1, [pc, #80]	; 39c84 <__assert_fail@plt+0x27690>
   39c30:	ldr	r0, [r7, #32]
   39c34:	bl	2bb5c <__assert_fail@plt+0x19568>
   39c38:	b	39bb0 <__assert_fail@plt+0x275bc>
   39c3c:	bl	12348 <__errno_location@plt>
   39c40:	mov	r2, #7
   39c44:	mov	r3, r2
   39c48:	ldr	r1, [r0]
   39c4c:	strh	r2, [r4, #56]	; 0x38
   39c50:	str	r1, [r4, #32]
   39c54:	b	39b74 <__assert_fail@plt+0x27580>
   39c58:	ldr	r1, [pc, #36]	; 39c84 <__assert_fail@plt+0x27690>
   39c5c:	ldr	r0, [r7, #32]
   39c60:	bl	2bb5c <__assert_fail@plt+0x19568>
   39c64:	b	39bf0 <__assert_fail@plt+0x275fc>
   39c68:	andeq	r0, r0, r2, lsl #2
   39c6c:	ldrdeq	r7, [r3], -r0
   39c70:	andeq	r7, r3, r8, asr #15
   39c74:	andeq	r7, r3, ip, lsl #16
   39c78:	andeq	r3, r5, ip, ror r9
   39c7c:	andeq	ip, r8, r0, lsl #18
   39c80:	andeq	r4, r8, r0, lsl #18
   39c84:	andeq	r1, r5, r4, asr #17
   39c88:	cmp	r2, #4
   39c8c:	bhi	39ca0 <__assert_fail@plt+0x276ac>
   39c90:	mov	r3, #0
   39c94:	strh	r2, [r1, #60]	; 0x3c
   39c98:	mov	r0, r3
   39c9c:	bx	lr
   39ca0:	push	{r4, lr}
   39ca4:	bl	12348 <__errno_location@plt>
   39ca8:	mov	r2, #22
   39cac:	mov	r3, #1
   39cb0:	str	r2, [r0]
   39cb4:	mov	r0, r3
   39cb8:	pop	{r4, pc}
   39cbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39cc0:	bics	r4, r1, #4096	; 0x1000
   39cc4:	bne	39e38 <__assert_fail@plt+0x27844>
   39cc8:	mov	r6, r0
   39ccc:	mov	r7, r1
   39cd0:	bl	12348 <__errno_location@plt>
   39cd4:	ldr	r8, [r6]
   39cd8:	str	r4, [r0]
   39cdc:	ldr	r3, [r6, #48]	; 0x30
   39ce0:	mov	r9, r0
   39ce4:	ands	r3, r3, #8192	; 0x2000
   39ce8:	bne	39e50 <__assert_fail@plt+0x2785c>
   39cec:	ldrh	r2, [r8, #56]	; 0x38
   39cf0:	cmp	r2, #9
   39cf4:	ldreq	r3, [r8, #8]
   39cf8:	beq	39d7c <__assert_fail@plt+0x27788>
   39cfc:	cmp	r2, #1
   39d00:	bne	39d7c <__assert_fail@plt+0x27788>
   39d04:	ldr	r4, [r6, #4]
   39d08:	cmp	r4, #0
   39d0c:	beq	39d34 <__assert_fail@plt+0x27740>
   39d10:	ldr	r0, [r4, #12]
   39d14:	ldr	r5, [r4, #8]
   39d18:	cmp	r0, #0
   39d1c:	beq	39d24 <__assert_fail@plt+0x27730>
   39d20:	bl	125c4 <closedir@plt>
   39d24:	mov	r0, r4
   39d28:	bl	376d0 <__assert_fail@plt+0x250dc>
   39d2c:	subs	r4, r5, #0
   39d30:	bne	39d10 <__assert_fail@plt+0x2771c>
   39d34:	cmp	r7, #4096	; 0x1000
   39d38:	movne	r4, #1
   39d3c:	beq	39d84 <__assert_fail@plt+0x27790>
   39d40:	ldr	r3, [r8, #48]	; 0x30
   39d44:	cmp	r3, #0
   39d48:	bne	39d68 <__assert_fail@plt+0x27774>
   39d4c:	ldr	r3, [r8, #24]
   39d50:	ldrb	r3, [r3]
   39d54:	cmp	r3, #47	; 0x2f
   39d58:	beq	39d68 <__assert_fail@plt+0x27774>
   39d5c:	ldr	r3, [r6, #48]	; 0x30
   39d60:	tst	r3, #4
   39d64:	beq	39da4 <__assert_fail@plt+0x277b0>
   39d68:	mov	r1, r4
   39d6c:	mov	r0, r6
   39d70:	bl	37e44 <__assert_fail@plt+0x25850>
   39d74:	mov	r3, r0
   39d78:	str	r0, [r6, #4]
   39d7c:	mov	r0, r3
   39d80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39d84:	ldr	r3, [r6, #48]	; 0x30
   39d88:	mov	r4, #2
   39d8c:	orr	r3, r3, #4096	; 0x1000
   39d90:	str	r3, [r6, #48]	; 0x30
   39d94:	ldr	r3, [r8, #48]	; 0x30
   39d98:	cmp	r3, #0
   39d9c:	beq	39d4c <__assert_fail@plt+0x27758>
   39da0:	b	39d68 <__assert_fail@plt+0x27774>
   39da4:	ldr	r2, [pc, #252]	; 39ea8 <__assert_fail@plt+0x278b4>
   39da8:	tst	r3, #16
   39dac:	ldr	r1, [pc, #248]	; 39eac <__assert_fail@plt+0x278b8>
   39db0:	moveq	r1, r2
   39db4:	tst	r3, #512	; 0x200
   39db8:	bne	39e74 <__assert_fail@plt+0x27880>
   39dbc:	ldr	r0, [pc, #236]	; 39eb0 <__assert_fail@plt+0x278bc>
   39dc0:	bl	26e80 <__assert_fail@plt+0x1488c>
   39dc4:	mov	r5, r0
   39dc8:	cmp	r5, #0
   39dcc:	movlt	r3, #0
   39dd0:	strlt	r3, [r6, #4]
   39dd4:	blt	39d7c <__assert_fail@plt+0x27788>
   39dd8:	mov	r1, r4
   39ddc:	mov	r0, r6
   39de0:	bl	37e44 <__assert_fail@plt+0x25850>
   39de4:	ldr	r3, [r6, #48]	; 0x30
   39de8:	ands	r4, r3, #512	; 0x200
   39dec:	str	r0, [r6, #4]
   39df0:	beq	39e58 <__assert_fail@plt+0x27864>
   39df4:	ldr	r1, [r6, #32]
   39df8:	cmn	r1, #100	; 0x64
   39dfc:	sub	r3, r5, r1
   39e00:	clz	r3, r3
   39e04:	lsr	r3, r3, #5
   39e08:	moveq	r3, #0
   39e0c:	cmp	r3, #0
   39e10:	bne	39ea4 <__assert_fail@plt+0x278b0>
   39e14:	add	r0, r6, #60	; 0x3c
   39e18:	bl	4ceec <__assert_fail@plt+0x3a8f8>
   39e1c:	cmp	r0, #0
   39e20:	blt	39e28 <__assert_fail@plt+0x27834>
   39e24:	bl	125ac <close@plt>
   39e28:	str	r5, [r6, #32]
   39e2c:	ldr	r3, [r6, #4]
   39e30:	mov	r0, r3
   39e34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39e38:	bl	12348 <__errno_location@plt>
   39e3c:	mov	r2, #22
   39e40:	mov	r3, #0
   39e44:	str	r2, [r0]
   39e48:	mov	r0, r3
   39e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39e50:	mov	r3, r4
   39e54:	b	39d7c <__assert_fail@plt+0x27788>
   39e58:	mov	r0, r5
   39e5c:	bl	124f8 <fchdir@plt>
   39e60:	cmp	r0, #0
   39e64:	bne	39e8c <__assert_fail@plt+0x27898>
   39e68:	mov	r0, r5
   39e6c:	bl	125ac <close@plt>
   39e70:	b	39e2c <__assert_fail@plt+0x27838>
   39e74:	mov	r2, r1
   39e78:	ldr	r0, [r6, #32]
   39e7c:	ldr	r1, [pc, #44]	; 39eb0 <__assert_fail@plt+0x278bc>
   39e80:	bl	2bb5c <__assert_fail@plt+0x19568>
   39e84:	mov	r5, r0
   39e88:	b	39dc8 <__assert_fail@plt+0x277d4>
   39e8c:	ldr	r6, [r9]
   39e90:	mov	r0, r5
   39e94:	bl	125ac <close@plt>
   39e98:	str	r6, [r9]
   39e9c:	mov	r3, r4
   39ea0:	b	39d7c <__assert_fail@plt+0x27788>
   39ea4:	bl	125a0 <abort@plt>
   39ea8:	andeq	r4, r8, r0, lsl #18
   39eac:	andeq	ip, r8, r0, lsl #18
   39eb0:	andeq	r1, r5, r4, asr #17
   39eb4:	push	{r4, r5, r6, r7, r8, lr}
   39eb8:	mov	r5, r1
   39ebc:	bl	122e8 <getfilecon@plt>
   39ec0:	subs	r4, r0, #0
   39ec4:	beq	39f10 <__assert_fail@plt+0x2791c>
   39ec8:	cmp	r4, #10
   39ecc:	beq	39ed8 <__assert_fail@plt+0x278e4>
   39ed0:	mov	r0, r4
   39ed4:	pop	{r4, r5, r6, r7, r8, pc}
   39ed8:	ldr	r6, [r5]
   39edc:	ldr	r1, [pc, #64]	; 39f24 <__assert_fail@plt+0x27930>
   39ee0:	mov	r0, r6
   39ee4:	bl	11f40 <strcmp@plt>
   39ee8:	subs	r7, r0, #0
   39eec:	bne	39ed0 <__assert_fail@plt+0x278dc>
   39ef0:	mov	r0, r6
   39ef4:	bl	1251c <freecon@plt>
   39ef8:	str	r7, [r5]
   39efc:	bl	12348 <__errno_location@plt>
   39f00:	mov	r3, #61	; 0x3d
   39f04:	mvn	r4, #0
   39f08:	str	r3, [r0]
   39f0c:	b	39ed0 <__assert_fail@plt+0x278dc>
   39f10:	bl	12348 <__errno_location@plt>
   39f14:	mov	r3, #95	; 0x5f
   39f18:	mvn	r4, #0
   39f1c:	str	r3, [r0]
   39f20:	b	39ed0 <__assert_fail@plt+0x278dc>
   39f24:	andeq	r3, r5, r0, lsl #19
   39f28:	push	{r4, r5, r6, r7, r8, lr}
   39f2c:	mov	r5, r1
   39f30:	bl	12234 <lgetfilecon@plt>
   39f34:	subs	r4, r0, #0
   39f38:	beq	39f84 <__assert_fail@plt+0x27990>
   39f3c:	cmp	r4, #10
   39f40:	beq	39f4c <__assert_fail@plt+0x27958>
   39f44:	mov	r0, r4
   39f48:	pop	{r4, r5, r6, r7, r8, pc}
   39f4c:	ldr	r6, [r5]
   39f50:	ldr	r1, [pc, #64]	; 39f98 <__assert_fail@plt+0x279a4>
   39f54:	mov	r0, r6
   39f58:	bl	11f40 <strcmp@plt>
   39f5c:	subs	r7, r0, #0
   39f60:	bne	39f44 <__assert_fail@plt+0x27950>
   39f64:	mov	r0, r6
   39f68:	bl	1251c <freecon@plt>
   39f6c:	str	r7, [r5]
   39f70:	bl	12348 <__errno_location@plt>
   39f74:	mov	r3, #61	; 0x3d
   39f78:	mvn	r4, #0
   39f7c:	str	r3, [r0]
   39f80:	b	39f44 <__assert_fail@plt+0x27950>
   39f84:	bl	12348 <__errno_location@plt>
   39f88:	mov	r3, #95	; 0x5f
   39f8c:	mvn	r4, #0
   39f90:	str	r3, [r0]
   39f94:	b	39f44 <__assert_fail@plt+0x27950>
   39f98:	andeq	r3, r5, r0, lsl #19
   39f9c:	push	{r4, r5, r6, r7, r8, lr}
   39fa0:	mov	r5, r1
   39fa4:	bl	120f0 <fgetfilecon@plt>
   39fa8:	subs	r4, r0, #0
   39fac:	beq	39ff8 <__assert_fail@plt+0x27a04>
   39fb0:	cmp	r4, #10
   39fb4:	beq	39fc0 <__assert_fail@plt+0x279cc>
   39fb8:	mov	r0, r4
   39fbc:	pop	{r4, r5, r6, r7, r8, pc}
   39fc0:	ldr	r6, [r5]
   39fc4:	ldr	r1, [pc, #64]	; 3a00c <__assert_fail@plt+0x27a18>
   39fc8:	mov	r0, r6
   39fcc:	bl	11f40 <strcmp@plt>
   39fd0:	subs	r7, r0, #0
   39fd4:	bne	39fb8 <__assert_fail@plt+0x279c4>
   39fd8:	mov	r0, r6
   39fdc:	bl	1251c <freecon@plt>
   39fe0:	str	r7, [r5]
   39fe4:	bl	12348 <__errno_location@plt>
   39fe8:	mov	r3, #61	; 0x3d
   39fec:	mvn	r4, #0
   39ff0:	str	r3, [r0]
   39ff4:	b	39fb8 <__assert_fail@plt+0x279c4>
   39ff8:	bl	12348 <__errno_location@plt>
   39ffc:	mov	r3, #95	; 0x5f
   3a000:	mvn	r4, #0
   3a004:	str	r3, [r0]
   3a008:	b	39fb8 <__assert_fail@plt+0x279c4>
   3a00c:	andeq	r3, r5, r0, lsl #19
   3a010:	cmp	r0, #0
   3a014:	moveq	r0, #1
   3a018:	cmp	r0, #0
   3a01c:	blt	3a024 <__assert_fail@plt+0x27a30>
   3a020:	b	12240 <malloc@plt>
   3a024:	push	{r4, lr}
   3a028:	bl	12348 <__errno_location@plt>
   3a02c:	mov	r3, #12
   3a030:	str	r3, [r0]
   3a034:	mov	r0, #0
   3a038:	pop	{r4, pc}
   3a03c:	push	{r4, r5, r6, r7, lr}
   3a040:	subs	r6, r0, #0
   3a044:	sub	sp, sp, #12
   3a048:	addeq	r6, sp, #4
   3a04c:	mov	r0, r6
   3a050:	mov	r5, r2
   3a054:	mov	r7, r1
   3a058:	bl	121d4 <mbrtowc@plt>
   3a05c:	cmp	r5, #0
   3a060:	cmnne	r0, #3
   3a064:	mov	r4, r0
   3a068:	bls	3a084 <__assert_fail@plt+0x27a90>
   3a06c:	mov	r0, #0
   3a070:	bl	4ce5c <__assert_fail@plt+0x3a868>
   3a074:	cmp	r0, #0
   3a078:	moveq	r4, #1
   3a07c:	ldrbeq	r3, [r7]
   3a080:	streq	r3, [r6]
   3a084:	mov	r0, r4
   3a088:	add	sp, sp, #12
   3a08c:	pop	{r4, r5, r6, r7, pc}
   3a090:	push	{r4, r5, r6, r7, r8, lr}
   3a094:	mov	r4, r0
   3a098:	bl	12300 <strlen@plt>
   3a09c:	adds	r0, r0, #1
   3a0a0:	popeq	{r4, r5, r6, r7, r8, pc}
   3a0a4:	mov	r2, r4
   3a0a8:	mov	r3, #0
   3a0ac:	b	3a0c4 <__assert_fail@plt+0x27ad0>
   3a0b0:	mov	r3, ip
   3a0b4:	strb	r1, [r2]
   3a0b8:	cmp	r0, r3
   3a0bc:	add	r2, r2, #1
   3a0c0:	bls	3a134 <__assert_fail@plt+0x27b40>
   3a0c4:	ldrb	r1, [r4, r3]
   3a0c8:	add	ip, r3, #1
   3a0cc:	cmp	r1, #92	; 0x5c
   3a0d0:	bne	3a0b0 <__assert_fail@plt+0x27abc>
   3a0d4:	add	lr, r3, #4
   3a0d8:	cmp	r0, lr
   3a0dc:	bls	3a0b0 <__assert_fail@plt+0x27abc>
   3a0e0:	ldrb	r5, [r4, ip]
   3a0e4:	add	r3, r4, r3
   3a0e8:	sub	r5, r5, #48	; 0x30
   3a0ec:	uxtb	r6, r5
   3a0f0:	cmp	r6, #3
   3a0f4:	bhi	3a0b0 <__assert_fail@plt+0x27abc>
   3a0f8:	ldrb	r6, [r3, #2]
   3a0fc:	sub	r6, r6, #48	; 0x30
   3a100:	uxtb	r7, r6
   3a104:	cmp	r7, #7
   3a108:	bhi	3a0b0 <__assert_fail@plt+0x27abc>
   3a10c:	ldrb	r7, [r3, #3]
   3a110:	mov	r3, lr
   3a114:	add	r5, r6, r5, lsl #3
   3a118:	sub	lr, r7, #48	; 0x30
   3a11c:	uxtb	lr, lr
   3a120:	cmp	lr, #7
   3a124:	add	r5, lr, r5, lsl #3
   3a128:	strbls	r5, [r2]
   3a12c:	bls	3a0b8 <__assert_fail@plt+0x27ac4>
   3a130:	b	3a0b0 <__assert_fail@plt+0x27abc>
   3a134:	pop	{r4, r5, r6, r7, r8, pc}
   3a138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a13c:	sub	sp, sp, #68	; 0x44
   3a140:	ldr	r1, [pc, #1312]	; 3a668 <__assert_fail@plt+0x28074>
   3a144:	ldr	r0, [pc, #1312]	; 3a66c <__assert_fail@plt+0x28078>
   3a148:	bl	12504 <fopen64@plt>
   3a14c:	subs	r7, r0, #0
   3a150:	beq	3a6f8 <__assert_fail@plt+0x28104>
   3a154:	add	sl, sp, #40	; 0x28
   3a158:	ldr	r9, [pc, #1296]	; 3a670 <__assert_fail@plt+0x2807c>
   3a15c:	mov	r5, sl
   3a160:	mov	r3, #0
   3a164:	str	r3, [sp, #44]	; 0x2c
   3a168:	str	r3, [sp, #48]	; 0x30
   3a16c:	mov	r3, r7
   3a170:	mov	r2, #10
   3a174:	add	r1, sp, #48	; 0x30
   3a178:	add	r0, sp, #44	; 0x2c
   3a17c:	bl	11f10 <__getdelim@plt>
   3a180:	cmn	r0, #1
   3a184:	beq	3a3d4 <__assert_fail@plt+0x27de0>
   3a188:	add	r3, sp, #60	; 0x3c
   3a18c:	str	r3, [sp]
   3a190:	ldr	r0, [sp, #44]	; 0x2c
   3a194:	add	r3, sp, #56	; 0x38
   3a198:	add	r2, sp, #52	; 0x34
   3a19c:	mov	r1, r9
   3a1a0:	bl	12498 <sscanf@plt>
   3a1a4:	sub	r0, r0, #2
   3a1a8:	cmp	r0, #1
   3a1ac:	bhi	3a16c <__assert_fail@plt+0x27b78>
   3a1b0:	ldr	r3, [sp, #60]	; 0x3c
   3a1b4:	ldr	sl, [sp, #44]	; 0x2c
   3a1b8:	mov	r1, #32
   3a1bc:	add	sl, sl, r3
   3a1c0:	mov	r0, sl
   3a1c4:	bl	1230c <strchr@plt>
   3a1c8:	subs	r6, r0, #0
   3a1cc:	beq	3a16c <__assert_fail@plt+0x27b78>
   3a1d0:	mov	r8, #0
   3a1d4:	strb	r8, [r6], #1
   3a1d8:	mov	r1, #32
   3a1dc:	mov	r0, r6
   3a1e0:	bl	1230c <strchr@plt>
   3a1e4:	cmp	r0, #0
   3a1e8:	beq	3a16c <__assert_fail@plt+0x27b78>
   3a1ec:	ldr	r1, [pc, #1152]	; 3a674 <__assert_fail@plt+0x28080>
   3a1f0:	strb	r8, [r0], #1
   3a1f4:	bl	4bb10 <__assert_fail@plt+0x3951c>
   3a1f8:	cmp	r0, #0
   3a1fc:	beq	3a16c <__assert_fail@plt+0x27b78>
   3a200:	add	fp, r0, #3
   3a204:	mov	r0, fp
   3a208:	mov	r1, #32
   3a20c:	bl	1230c <strchr@plt>
   3a210:	subs	r3, r0, #0
   3a214:	beq	3a16c <__assert_fail@plt+0x27b78>
   3a218:	strb	r8, [r3], #1
   3a21c:	mov	r1, #32
   3a220:	mov	r0, r3
   3a224:	str	r3, [sp, #32]
   3a228:	bl	1230c <strchr@plt>
   3a22c:	cmp	r0, #0
   3a230:	beq	3a16c <__assert_fail@plt+0x27b78>
   3a234:	ldr	r3, [sp, #32]
   3a238:	strb	r8, [r0]
   3a23c:	mov	r0, r3
   3a240:	bl	3a090 <__assert_fail@plt+0x27a9c>
   3a244:	mov	r0, r6
   3a248:	bl	3a090 <__assert_fail@plt+0x27a9c>
   3a24c:	mov	r0, sl
   3a250:	bl	3a090 <__assert_fail@plt+0x27a9c>
   3a254:	mov	r0, fp
   3a258:	bl	3a090 <__assert_fail@plt+0x27a9c>
   3a25c:	mov	r0, #32
   3a260:	bl	3563c <__assert_fail@plt+0x23048>
   3a264:	ldr	r3, [sp, #32]
   3a268:	mov	r4, r0
   3a26c:	mov	r0, r3
   3a270:	bl	35c4c <__assert_fail@plt+0x23658>
   3a274:	str	r8, [sp, #12]
   3a278:	str	r8, [sp, #20]
   3a27c:	str	r0, [r4]
   3a280:	mov	r0, r6
   3a284:	bl	35c4c <__assert_fail@plt+0x23658>
   3a288:	str	r0, [r4, #4]
   3a28c:	mov	r0, sl
   3a290:	bl	35c4c <__assert_fail@plt+0x23658>
   3a294:	ldr	sl, [pc, #988]	; 3a678 <__assert_fail@plt+0x28084>
   3a298:	str	r0, [r4, #8]
   3a29c:	mov	r0, fp
   3a2a0:	bl	35c4c <__assert_fail@plt+0x23658>
   3a2a4:	ldr	r3, [sp, #52]	; 0x34
   3a2a8:	mov	fp, #0
   3a2ac:	str	r3, [sp, #28]
   3a2b0:	lsr	r2, r3, #24
   3a2b4:	lsl	r3, r3, #8
   3a2b8:	str	r2, [sp, #12]
   3a2bc:	str	r3, [sp, #8]
   3a2c0:	ldrd	r2, [sp, #8]
   3a2c4:	str	r8, [sp, #24]
   3a2c8:	ldr	r1, [sp, #56]	; 0x38
   3a2cc:	and	r2, r2, sl
   3a2d0:	and	r3, r3, fp
   3a2d4:	ldr	fp, [pc, #928]	; 3a67c <__assert_fail@plt+0x28088>
   3a2d8:	strd	r2, [sp, #32]
   3a2dc:	ldrd	r2, [sp, #24]
   3a2e0:	mov	sl, #0
   3a2e4:	lsr	ip, r1, #20
   3a2e8:	and	sl, sl, r2
   3a2ec:	and	fp, fp, r3
   3a2f0:	mov	r2, sl
   3a2f4:	mov	r3, fp
   3a2f8:	ldrd	sl, [sp, #32]
   3a2fc:	str	ip, [sp, #20]
   3a300:	ldrb	ip, [r4, #24]
   3a304:	orr	sl, sl, r2
   3a308:	orr	fp, fp, r3
   3a30c:	lsl	r3, r1, #12
   3a310:	uxtb	r1, r1
   3a314:	orr	sl, sl, r1
   3a318:	str	r3, [sp, #16]
   3a31c:	strd	sl, [sp, #32]
   3a320:	add	r3, pc, #824	; 0x338
   3a324:	ldrd	r2, [r3]
   3a328:	ldrd	sl, [sp, #16]
   3a32c:	orr	ip, ip, #4
   3a330:	strb	ip, [r4, #24]
   3a334:	and	sl, sl, r2
   3a338:	and	fp, fp, r3
   3a33c:	mov	r2, sl
   3a340:	mov	r3, fp
   3a344:	ldrd	sl, [sp, #32]
   3a348:	ldr	r1, [pc, #828]	; 3a68c <__assert_fail@plt+0x28098>
   3a34c:	str	r0, [r4, #12]
   3a350:	orr	sl, sl, r2
   3a354:	orr	fp, fp, r3
   3a358:	mov	r2, sl
   3a35c:	mov	r3, fp
   3a360:	mov	r6, r0
   3a364:	strd	r2, [r4, #16]
   3a368:	bl	11f40 <strcmp@plt>
   3a36c:	cmp	r0, r8
   3a370:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a374:	ldr	r1, [pc, #788]	; 3a690 <__assert_fail@plt+0x2809c>
   3a378:	mov	r0, r6
   3a37c:	bl	11f40 <strcmp@plt>
   3a380:	cmp	r0, r8
   3a384:	bne	3a410 <__assert_fail@plt+0x27e1c>
   3a388:	mov	r0, #1
   3a38c:	ldrb	r3, [r4, #24]
   3a390:	ldr	r8, [r4]
   3a394:	mov	r1, #58	; 0x3a
   3a398:	bic	r3, r3, #1
   3a39c:	orr	r3, r0, r3
   3a3a0:	strb	r3, [r4, #24]
   3a3a4:	mov	r0, r8
   3a3a8:	bl	1230c <strchr@plt>
   3a3ac:	cmp	r0, #0
   3a3b0:	beq	3a504 <__assert_fail@plt+0x27f10>
   3a3b4:	mov	r3, #1
   3a3b8:	ldrb	r0, [r4, #24]
   3a3bc:	bic	r0, r0, #2
   3a3c0:	orr	r0, r0, r3, lsl #1
   3a3c4:	strb	r0, [r4, #24]
   3a3c8:	str	r4, [r5]
   3a3cc:	add	r5, r4, #28
   3a3d0:	b	3a16c <__assert_fail@plt+0x27b78>
   3a3d4:	ldr	r0, [sp, #44]	; 0x2c
   3a3d8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3a3dc:	ldr	r3, [r7]
   3a3e0:	mov	sl, r5
   3a3e4:	tst	r3, #32
   3a3e8:	bne	3a5dc <__assert_fail@plt+0x27fe8>
   3a3ec:	mov	r0, r7
   3a3f0:	bl	123fc <fclose@plt>
   3a3f4:	cmn	r0, #1
   3a3f8:	beq	3a9dc <__assert_fail@plt+0x283e8>
   3a3fc:	mov	r3, #0
   3a400:	str	r3, [sl]
   3a404:	ldr	r0, [sp, #40]	; 0x28
   3a408:	add	sp, sp, #68	; 0x44
   3a40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a410:	ldr	r1, [pc, #636]	; 3a694 <__assert_fail@plt+0x280a0>
   3a414:	mov	r0, r6
   3a418:	bl	11f40 <strcmp@plt>
   3a41c:	cmp	r0, r8
   3a420:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a424:	ldr	r1, [pc, #620]	; 3a698 <__assert_fail@plt+0x280a4>
   3a428:	mov	r0, r6
   3a42c:	bl	11f40 <strcmp@plt>
   3a430:	cmp	r0, r8
   3a434:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a438:	ldr	r1, [pc, #604]	; 3a69c <__assert_fail@plt+0x280a8>
   3a43c:	mov	r0, r6
   3a440:	bl	11f40 <strcmp@plt>
   3a444:	cmp	r0, r8
   3a448:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a44c:	ldr	r1, [pc, #588]	; 3a6a0 <__assert_fail@plt+0x280ac>
   3a450:	mov	r0, r6
   3a454:	bl	11f40 <strcmp@plt>
   3a458:	cmp	r0, r8
   3a45c:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a460:	ldr	r1, [pc, #572]	; 3a6a4 <__assert_fail@plt+0x280b0>
   3a464:	mov	r0, r6
   3a468:	bl	11f40 <strcmp@plt>
   3a46c:	cmp	r0, r8
   3a470:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a474:	ldr	r1, [pc, #556]	; 3a6a8 <__assert_fail@plt+0x280b4>
   3a478:	mov	r0, r6
   3a47c:	bl	11f40 <strcmp@plt>
   3a480:	cmp	r0, r8
   3a484:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a488:	ldr	r1, [pc, #540]	; 3a6ac <__assert_fail@plt+0x280b8>
   3a48c:	mov	r0, r6
   3a490:	bl	11f40 <strcmp@plt>
   3a494:	cmp	r0, r8
   3a498:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a49c:	ldr	r1, [pc, #524]	; 3a6b0 <__assert_fail@plt+0x280bc>
   3a4a0:	mov	r0, r6
   3a4a4:	bl	11f40 <strcmp@plt>
   3a4a8:	cmp	r0, r8
   3a4ac:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a4b0:	ldr	r1, [pc, #508]	; 3a6b4 <__assert_fail@plt+0x280c0>
   3a4b4:	mov	r0, r6
   3a4b8:	bl	11f40 <strcmp@plt>
   3a4bc:	cmp	r0, r8
   3a4c0:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a4c4:	ldr	r1, [pc, #492]	; 3a6b8 <__assert_fail@plt+0x280c4>
   3a4c8:	mov	r0, r6
   3a4cc:	bl	11f40 <strcmp@plt>
   3a4d0:	cmp	r0, r8
   3a4d4:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a4d8:	ldr	r1, [pc, #476]	; 3a6bc <__assert_fail@plt+0x280c8>
   3a4dc:	mov	r0, r6
   3a4e0:	bl	11f40 <strcmp@plt>
   3a4e4:	cmp	r0, r8
   3a4e8:	beq	3a388 <__assert_fail@plt+0x27d94>
   3a4ec:	ldr	r1, [pc, #460]	; 3a6c0 <__assert_fail@plt+0x280cc>
   3a4f0:	mov	r0, r6
   3a4f4:	bl	11f40 <strcmp@plt>
   3a4f8:	clz	r0, r0
   3a4fc:	lsr	r0, r0, #5
   3a500:	b	3a38c <__assert_fail@plt+0x27d98>
   3a504:	ldrb	r3, [r8]
   3a508:	cmp	r3, #47	; 0x2f
   3a50c:	beq	3a9ec <__assert_fail@plt+0x283f8>
   3a510:	ldr	r1, [pc, #428]	; 3a6c4 <__assert_fail@plt+0x280d0>
   3a514:	mov	r0, r6
   3a518:	bl	11f40 <strcmp@plt>
   3a51c:	cmp	r0, #0
   3a520:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a524:	ldr	r1, [pc, #412]	; 3a6c8 <__assert_fail@plt+0x280d4>
   3a528:	mov	r0, r6
   3a52c:	bl	11f40 <strcmp@plt>
   3a530:	cmp	r0, #0
   3a534:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a538:	ldr	r1, [pc, #396]	; 3a6cc <__assert_fail@plt+0x280d8>
   3a53c:	mov	r0, r6
   3a540:	bl	11f40 <strcmp@plt>
   3a544:	cmp	r0, #0
   3a548:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a54c:	ldr	r1, [pc, #380]	; 3a6d0 <__assert_fail@plt+0x280dc>
   3a550:	mov	r0, r6
   3a554:	bl	11f40 <strcmp@plt>
   3a558:	cmp	r0, #0
   3a55c:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a560:	ldr	r1, [pc, #364]	; 3a6d4 <__assert_fail@plt+0x280e0>
   3a564:	mov	r0, r6
   3a568:	bl	11f40 <strcmp@plt>
   3a56c:	cmp	r0, #0
   3a570:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a574:	ldr	r1, [pc, #348]	; 3a6d8 <__assert_fail@plt+0x280e4>
   3a578:	mov	r0, r6
   3a57c:	bl	11f40 <strcmp@plt>
   3a580:	cmp	r0, #0
   3a584:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a588:	ldr	r1, [pc, #332]	; 3a6dc <__assert_fail@plt+0x280e8>
   3a58c:	mov	r0, r6
   3a590:	bl	11f40 <strcmp@plt>
   3a594:	cmp	r0, #0
   3a598:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a59c:	ldr	r1, [pc, #316]	; 3a6e0 <__assert_fail@plt+0x280ec>
   3a5a0:	mov	r0, r6
   3a5a4:	bl	11f40 <strcmp@plt>
   3a5a8:	cmp	r0, #0
   3a5ac:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a5b0:	mov	r0, r6
   3a5b4:	ldr	r1, [pc, #296]	; 3a6e4 <__assert_fail@plt+0x280f0>
   3a5b8:	bl	11f40 <strcmp@plt>
   3a5bc:	cmp	r0, #0
   3a5c0:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3a5c4:	mov	r1, r8
   3a5c8:	ldr	r0, [pc, #280]	; 3a6e8 <__assert_fail@plt+0x280f4>
   3a5cc:	bl	11f40 <strcmp@plt>
   3a5d0:	clz	r3, r0
   3a5d4:	lsr	r3, r3, #5
   3a5d8:	b	3a3b8 <__assert_fail@plt+0x27dc4>
   3a5dc:	bl	12348 <__errno_location@plt>
   3a5e0:	mov	r6, r0
   3a5e4:	mov	r0, r7
   3a5e8:	ldr	r7, [r6]
   3a5ec:	bl	123fc <fclose@plt>
   3a5f0:	str	r7, [r6]
   3a5f4:	mov	r3, #0
   3a5f8:	str	r3, [sl]
   3a5fc:	ldr	r4, [sp, #40]	; 0x28
   3a600:	cmp	r4, r3
   3a604:	beq	3a64c <__assert_fail@plt+0x28058>
   3a608:	ldr	r0, [r4]
   3a60c:	ldr	r5, [r4, #28]
   3a610:	bl	376d0 <__assert_fail@plt+0x250dc>
   3a614:	ldr	r0, [r4, #4]
   3a618:	bl	376d0 <__assert_fail@plt+0x250dc>
   3a61c:	ldr	r0, [r4, #8]
   3a620:	bl	376d0 <__assert_fail@plt+0x250dc>
   3a624:	ldrb	r3, [r4, #24]
   3a628:	tst	r3, #4
   3a62c:	beq	3a638 <__assert_fail@plt+0x28044>
   3a630:	ldr	r0, [r4, #12]
   3a634:	bl	376d0 <__assert_fail@plt+0x250dc>
   3a638:	mov	r0, r4
   3a63c:	bl	376d0 <__assert_fail@plt+0x250dc>
   3a640:	subs	r4, r5, #0
   3a644:	str	r5, [sp, #40]	; 0x28
   3a648:	bne	3a608 <__assert_fail@plt+0x28014>
   3a64c:	mov	r0, #0
   3a650:	str	r7, [r6]
   3a654:	add	sp, sp, #68	; 0x44
   3a658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a65c:	nop			; (mov r0, r0)
   3a660:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   3a664:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   3a668:	andeq	r0, r5, r8, lsr r6
   3a66c:	andeq	r3, r5, ip, lsl #19
   3a670:	andeq	r3, r5, r4, lsr #19
   3a674:			; <UNDEFINED> instruction: 0x000539b8
   3a678:	andeq	pc, pc, r0, lsl #30
   3a67c:			; <UNDEFINED> instruction: 0xfffff000
   3a680:	muleq	r5, r4, ip
   3a684:	muleq	r5, r0, sl
   3a688:	muleq	r5, ip, sl
   3a68c:			; <UNDEFINED> instruction: 0x000539bc
   3a690:	andeq	r3, r5, r4, asr #19
   3a694:	andeq	r3, r5, ip, asr #19
   3a698:	ldrdeq	r3, [r5], -r4
   3a69c:	ldrdeq	r3, [r5], -ip
   3a6a0:	andeq	r3, r5, r4, ror #19
   3a6a4:	andeq	r3, r5, ip, ror #19
   3a6a8:	strdeq	r3, [r5], -r8
   3a6ac:	andeq	r3, r5, r0, lsl #20
   3a6b0:	andeq	r3, r5, ip, lsl #20
   3a6b4:	andeq	r3, r5, r4, lsl sl
   3a6b8:	andeq	r3, r5, ip, lsl sl
   3a6bc:	andeq	r0, r5, r4, lsr r6
   3a6c0:	andeq	r3, r5, r4, lsr #20
   3a6c4:	andeq	r3, r5, r4, asr #20
   3a6c8:	andeq	r0, r5, ip, lsr r6
   3a6cc:	andeq	r3, r5, ip, asr #20
   3a6d0:	andeq	r3, r5, r4, asr sl
   3a6d4:	andeq	r3, r5, r0, ror #20
   3a6d8:	andeq	r3, r5, r8, ror #20
   3a6dc:	andeq	r3, r5, r0, ror sl
   3a6e0:	andeq	r3, r5, r8, ror sl
   3a6e4:	andeq	r3, r5, r0, lsl #21
   3a6e8:	andeq	r3, r5, r8, lsl #21
   3a6ec:	andeq	r3, r5, ip, lsr #20
   3a6f0:	andeq	r3, r5, r4, lsr sl
   3a6f4:	andeq	r3, r5, ip, lsr sl
   3a6f8:	ldr	r1, [pc, #-128]	; 3a680 <__assert_fail@plt+0x2808c>
   3a6fc:	ldr	r0, [pc, #-128]	; 3a684 <__assert_fail@plt+0x28090>
   3a700:	bl	12534 <setmntent@plt>
   3a704:	subs	r5, r0, #0
   3a708:	beq	3aa84 <__assert_fail@plt+0x28490>
   3a70c:	ldr	r8, [pc, #-140]	; 3a688 <__assert_fail@plt+0x28094>
   3a710:	ldr	r7, [pc, #-140]	; 3a68c <__assert_fail@plt+0x28098>
   3a714:	ldr	r9, [pc, #-140]	; 3a690 <__assert_fail@plt+0x2809c>
   3a718:	add	sl, sp, #40	; 0x28
   3a71c:	mov	r0, r5
   3a720:	bl	121f8 <getmntent@plt>
   3a724:	subs	r6, r0, #0
   3a728:	beq	3a9cc <__assert_fail@plt+0x283d8>
   3a72c:	mov	r1, r8
   3a730:	bl	121a4 <hasmntopt@plt>
   3a734:	mov	fp, r0
   3a738:	mov	r0, #32
   3a73c:	bl	3563c <__assert_fail@plt+0x23048>
   3a740:	mov	r4, r0
   3a744:	ldr	r0, [r6]
   3a748:	bl	35c4c <__assert_fail@plt+0x23658>
   3a74c:	str	r0, [r4]
   3a750:	ldr	r0, [r6, #4]
   3a754:	bl	35c4c <__assert_fail@plt+0x23658>
   3a758:	mov	r3, #0
   3a75c:	stmib	r4, {r0, r3}
   3a760:	ldr	r0, [r6, #8]
   3a764:	bl	35c4c <__assert_fail@plt+0x23658>
   3a768:	ldrb	r3, [r4, #24]
   3a76c:	mov	r1, r7
   3a770:	orr	r3, r3, #4
   3a774:	strb	r3, [r4, #24]
   3a778:	str	r0, [r4, #12]
   3a77c:	mov	r6, r0
   3a780:	bl	11f40 <strcmp@plt>
   3a784:	cmp	r0, #0
   3a788:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a78c:	mov	r1, r9
   3a790:	mov	r0, r6
   3a794:	bl	11f40 <strcmp@plt>
   3a798:	cmp	r0, #0
   3a79c:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a7a0:	ldr	r1, [pc, #-276]	; 3a694 <__assert_fail@plt+0x280a0>
   3a7a4:	mov	r0, r6
   3a7a8:	bl	11f40 <strcmp@plt>
   3a7ac:	cmp	r0, #0
   3a7b0:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a7b4:	ldr	r1, [pc, #-292]	; 3a698 <__assert_fail@plt+0x280a4>
   3a7b8:	mov	r0, r6
   3a7bc:	bl	11f40 <strcmp@plt>
   3a7c0:	cmp	r0, #0
   3a7c4:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a7c8:	ldr	r1, [pc, #-308]	; 3a69c <__assert_fail@plt+0x280a8>
   3a7cc:	mov	r0, r6
   3a7d0:	bl	11f40 <strcmp@plt>
   3a7d4:	cmp	r0, #0
   3a7d8:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a7dc:	ldr	r1, [pc, #-324]	; 3a6a0 <__assert_fail@plt+0x280ac>
   3a7e0:	mov	r0, r6
   3a7e4:	bl	11f40 <strcmp@plt>
   3a7e8:	cmp	r0, #0
   3a7ec:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a7f0:	ldr	r1, [pc, #-340]	; 3a6a4 <__assert_fail@plt+0x280b0>
   3a7f4:	mov	r0, r6
   3a7f8:	bl	11f40 <strcmp@plt>
   3a7fc:	cmp	r0, #0
   3a800:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a804:	ldr	r1, [pc, #-356]	; 3a6a8 <__assert_fail@plt+0x280b4>
   3a808:	mov	r0, r6
   3a80c:	bl	11f40 <strcmp@plt>
   3a810:	cmp	r0, #0
   3a814:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a818:	ldr	r1, [pc, #-372]	; 3a6ac <__assert_fail@plt+0x280b8>
   3a81c:	mov	r0, r6
   3a820:	bl	11f40 <strcmp@plt>
   3a824:	cmp	r0, #0
   3a828:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a82c:	ldr	r1, [pc, #-388]	; 3a6b0 <__assert_fail@plt+0x280bc>
   3a830:	mov	r0, r6
   3a834:	bl	11f40 <strcmp@plt>
   3a838:	cmp	r0, #0
   3a83c:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a840:	ldr	r1, [pc, #-404]	; 3a6b4 <__assert_fail@plt+0x280c0>
   3a844:	mov	r0, r6
   3a848:	bl	11f40 <strcmp@plt>
   3a84c:	cmp	r0, #0
   3a850:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a854:	ldr	r1, [pc, #-420]	; 3a6b8 <__assert_fail@plt+0x280c4>
   3a858:	mov	r0, r6
   3a85c:	bl	11f40 <strcmp@plt>
   3a860:	cmp	r0, #0
   3a864:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a868:	ldr	r1, [pc, #-436]	; 3a6bc <__assert_fail@plt+0x280c8>
   3a86c:	mov	r0, r6
   3a870:	bl	11f40 <strcmp@plt>
   3a874:	cmp	r0, #0
   3a878:	beq	3a89c <__assert_fail@plt+0x282a8>
   3a87c:	ldr	r1, [pc, #-452]	; 3a6c0 <__assert_fail@plt+0x280cc>
   3a880:	mov	r0, r6
   3a884:	bl	11f40 <strcmp@plt>
   3a888:	cmp	r0, #0
   3a88c:	cmpeq	fp, #0
   3a890:	moveq	r0, #1
   3a894:	movne	r0, #0
   3a898:	b	3a8a0 <__assert_fail@plt+0x282ac>
   3a89c:	mov	r0, #1
   3a8a0:	ldrb	r3, [r4, #24]
   3a8a4:	ldr	fp, [r4]
   3a8a8:	mov	r1, #58	; 0x3a
   3a8ac:	bic	r3, r3, #1
   3a8b0:	orr	r3, r0, r3
   3a8b4:	strb	r3, [r4, #24]
   3a8b8:	mov	r0, fp
   3a8bc:	bl	1230c <strchr@plt>
   3a8c0:	cmp	r0, #0
   3a8c4:	beq	3a8f4 <__assert_fail@plt+0x28300>
   3a8c8:	mov	r1, #1
   3a8cc:	ldrb	r0, [r4, #24]
   3a8d0:	mvn	r2, #0
   3a8d4:	mvn	r3, #0
   3a8d8:	bic	r0, r0, #2
   3a8dc:	orr	r0, r0, r1, lsl #1
   3a8e0:	strb	r0, [r4, #24]
   3a8e4:	strd	r2, [r4, #16]
   3a8e8:	str	r4, [sl]
   3a8ec:	add	sl, r4, #28
   3a8f0:	b	3a71c <__assert_fail@plt+0x28128>
   3a8f4:	ldrb	r3, [fp]
   3a8f8:	cmp	r3, #47	; 0x2f
   3a8fc:	beq	3aa38 <__assert_fail@plt+0x28444>
   3a900:	ldr	r1, [pc, #-580]	; 3a6c4 <__assert_fail@plt+0x280d0>
   3a904:	mov	r0, r6
   3a908:	bl	11f40 <strcmp@plt>
   3a90c:	cmp	r0, #0
   3a910:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a914:	ldr	r1, [pc, #-596]	; 3a6c8 <__assert_fail@plt+0x280d4>
   3a918:	mov	r0, r6
   3a91c:	bl	11f40 <strcmp@plt>
   3a920:	cmp	r0, #0
   3a924:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a928:	ldr	r1, [pc, #-612]	; 3a6cc <__assert_fail@plt+0x280d8>
   3a92c:	mov	r0, r6
   3a930:	bl	11f40 <strcmp@plt>
   3a934:	cmp	r0, #0
   3a938:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a93c:	ldr	r1, [pc, #-628]	; 3a6d0 <__assert_fail@plt+0x280dc>
   3a940:	mov	r0, r6
   3a944:	bl	11f40 <strcmp@plt>
   3a948:	cmp	r0, #0
   3a94c:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a950:	ldr	r1, [pc, #-644]	; 3a6d4 <__assert_fail@plt+0x280e0>
   3a954:	mov	r0, r6
   3a958:	bl	11f40 <strcmp@plt>
   3a95c:	cmp	r0, #0
   3a960:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a964:	ldr	r1, [pc, #-660]	; 3a6d8 <__assert_fail@plt+0x280e4>
   3a968:	mov	r0, r6
   3a96c:	bl	11f40 <strcmp@plt>
   3a970:	cmp	r0, #0
   3a974:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a978:	ldr	r1, [pc, #-676]	; 3a6dc <__assert_fail@plt+0x280e8>
   3a97c:	mov	r0, r6
   3a980:	bl	11f40 <strcmp@plt>
   3a984:	cmp	r0, #0
   3a988:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a98c:	ldr	r1, [pc, #-692]	; 3a6e0 <__assert_fail@plt+0x280ec>
   3a990:	mov	r0, r6
   3a994:	bl	11f40 <strcmp@plt>
   3a998:	cmp	r0, #0
   3a99c:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a9a0:	mov	r0, r6
   3a9a4:	ldr	r1, [pc, #-712]	; 3a6e4 <__assert_fail@plt+0x280f0>
   3a9a8:	bl	11f40 <strcmp@plt>
   3a9ac:	cmp	r0, #0
   3a9b0:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3a9b4:	mov	r1, fp
   3a9b8:	ldr	r0, [pc, #-728]	; 3a6e8 <__assert_fail@plt+0x280f4>
   3a9bc:	bl	11f40 <strcmp@plt>
   3a9c0:	clz	r1, r0
   3a9c4:	lsr	r1, r1, #5
   3a9c8:	b	3a8cc <__assert_fail@plt+0x282d8>
   3a9cc:	mov	r0, r5
   3a9d0:	bl	12420 <endmntent@plt>
   3a9d4:	cmp	r0, #0
   3a9d8:	bne	3a3fc <__assert_fail@plt+0x27e08>
   3a9dc:	bl	12348 <__errno_location@plt>
   3a9e0:	mov	r6, r0
   3a9e4:	ldr	r7, [r0]
   3a9e8:	b	3a5f4 <__assert_fail@plt+0x28000>
   3a9ec:	ldrb	r3, [r8, #1]
   3a9f0:	cmp	r3, #47	; 0x2f
   3a9f4:	bne	3a510 <__assert_fail@plt+0x27f1c>
   3a9f8:	ldr	r1, [pc, #-788]	; 3a6ec <__assert_fail@plt+0x280f8>
   3a9fc:	mov	r0, r6
   3aa00:	bl	11f40 <strcmp@plt>
   3aa04:	cmp	r0, #0
   3aa08:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3aa0c:	ldr	r1, [pc, #-804]	; 3a6f0 <__assert_fail@plt+0x280fc>
   3aa10:	mov	r0, r6
   3aa14:	bl	11f40 <strcmp@plt>
   3aa18:	cmp	r0, #0
   3aa1c:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3aa20:	ldr	r1, [pc, #-820]	; 3a6f4 <__assert_fail@plt+0x28100>
   3aa24:	mov	r0, r6
   3aa28:	bl	11f40 <strcmp@plt>
   3aa2c:	cmp	r0, #0
   3aa30:	beq	3a3b4 <__assert_fail@plt+0x27dc0>
   3aa34:	b	3a510 <__assert_fail@plt+0x27f1c>
   3aa38:	ldrb	r3, [fp, #1]
   3aa3c:	cmp	r3, #47	; 0x2f
   3aa40:	bne	3a900 <__assert_fail@plt+0x2830c>
   3aa44:	ldr	r1, [pc, #-864]	; 3a6ec <__assert_fail@plt+0x280f8>
   3aa48:	mov	r0, r6
   3aa4c:	bl	11f40 <strcmp@plt>
   3aa50:	cmp	r0, #0
   3aa54:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3aa58:	ldr	r1, [pc, #-880]	; 3a6f0 <__assert_fail@plt+0x280fc>
   3aa5c:	mov	r0, r6
   3aa60:	bl	11f40 <strcmp@plt>
   3aa64:	cmp	r0, #0
   3aa68:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3aa6c:	ldr	r1, [pc, #-896]	; 3a6f4 <__assert_fail@plt+0x28100>
   3aa70:	mov	r0, r6
   3aa74:	bl	11f40 <strcmp@plt>
   3aa78:	cmp	r0, #0
   3aa7c:	beq	3a8c8 <__assert_fail@plt+0x282d4>
   3aa80:	b	3a900 <__assert_fail@plt+0x2830c>
   3aa84:	mov	r0, r5
   3aa88:	b	3a408 <__assert_fail@plt+0x27e14>
   3aa8c:	push	{r4, lr}
   3aa90:	mov	r4, r0
   3aa94:	ldr	r0, [r0]
   3aa98:	bl	376d0 <__assert_fail@plt+0x250dc>
   3aa9c:	ldr	r0, [r4, #4]
   3aaa0:	bl	376d0 <__assert_fail@plt+0x250dc>
   3aaa4:	ldr	r0, [r4, #8]
   3aaa8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3aaac:	ldrb	r3, [r4, #24]
   3aab0:	tst	r3, #4
   3aab4:	beq	3aac0 <__assert_fail@plt+0x284cc>
   3aab8:	ldr	r0, [r4, #12]
   3aabc:	bl	376d0 <__assert_fail@plt+0x250dc>
   3aac0:	mov	r0, r4
   3aac4:	pop	{r4, lr}
   3aac8:	b	376d0 <__assert_fail@plt+0x250dc>
   3aacc:	cmp	r0, #0
   3aad0:	beq	3aaf4 <__assert_fail@plt+0x28500>
   3aad4:	cmp	r1, #0
   3aad8:	push	{lr}		; (str lr, [sp, #-4]!)
   3aadc:	sub	sp, sp, #12
   3aae0:	beq	3aafc <__assert_fail@plt+0x28508>
   3aae4:	blt	3ab14 <__assert_fail@plt+0x28520>
   3aae8:	add	sp, sp, #12
   3aaec:	pop	{lr}		; (ldr lr, [sp], #4)
   3aaf0:	b	120e4 <realloc@plt>
   3aaf4:	mov	r0, r1
   3aaf8:	b	3a010 <__assert_fail@plt+0x27a1c>
   3aafc:	str	r1, [sp, #4]
   3ab00:	bl	376d0 <__assert_fail@plt+0x250dc>
   3ab04:	ldr	r3, [sp, #4]
   3ab08:	mov	r0, r3
   3ab0c:	add	sp, sp, #12
   3ab10:	pop	{pc}		; (ldr pc, [sp], #4)
   3ab14:	bl	12348 <__errno_location@plt>
   3ab18:	mov	r2, #12
   3ab1c:	mov	r3, #0
   3ab20:	str	r2, [r0]
   3ab24:	b	3ab08 <__assert_fail@plt+0x28514>
   3ab28:	push	{r4, r5, r6, lr}
   3ab2c:	subs	r4, r2, #0
   3ab30:	mov	r6, r0
   3ab34:	mov	r5, r1
   3ab38:	beq	3ab64 <__assert_fail@plt+0x28570>
   3ab3c:	mov	r1, r4
   3ab40:	mvn	r0, #0
   3ab44:	bl	4d384 <__assert_fail@plt+0x3ad90>
   3ab48:	cmp	r0, r5
   3ab4c:	bcs	3ab64 <__assert_fail@plt+0x28570>
   3ab50:	bl	12348 <__errno_location@plt>
   3ab54:	mov	r3, #12
   3ab58:	str	r3, [r0]
   3ab5c:	mov	r0, #0
   3ab60:	pop	{r4, r5, r6, pc}
   3ab64:	mul	r1, r5, r4
   3ab68:	mov	r0, r6
   3ab6c:	pop	{r4, r5, r6, lr}
   3ab70:	b	3aacc <__assert_fail@plt+0x284d8>
   3ab74:	mov	ip, r0
   3ab78:	ldr	r3, [r1, #40]	; 0x28
   3ab7c:	ldr	r0, [r1, #56]	; 0x38
   3ab80:	cmp	r0, r3
   3ab84:	ble	3abf8 <__assert_fail@plt+0x28604>
   3ab88:	push	{r4, lr}
   3ab8c:	ldr	lr, [r1, #4]
   3ab90:	ldrb	r0, [lr, r3]
   3ab94:	strb	r0, [ip]
   3ab98:	ldr	r4, [r1, #80]	; 0x50
   3ab9c:	cmp	r4, #1
   3aba0:	ble	3abc0 <__assert_fail@plt+0x285cc>
   3aba4:	ldr	r4, [r1, #28]
   3aba8:	cmp	r3, r4
   3abac:	beq	3abc0 <__assert_fail@plt+0x285cc>
   3abb0:	ldr	r4, [r1, #8]
   3abb4:	ldr	r4, [r4, r3, lsl #2]
   3abb8:	cmn	r4, #1
   3abbc:	beq	3ac40 <__assert_fail@plt+0x2864c>
   3abc0:	cmp	r0, #92	; 0x5c
   3abc4:	beq	3ac08 <__assert_fail@plt+0x28614>
   3abc8:	cmp	r0, #91	; 0x5b
   3abcc:	beq	3ac4c <__assert_fail@plt+0x28658>
   3abd0:	cmp	r0, #93	; 0x5d
   3abd4:	beq	3ac30 <__assert_fail@plt+0x2863c>
   3abd8:	cmp	r0, #94	; 0x5e
   3abdc:	beq	3ac70 <__assert_fail@plt+0x2867c>
   3abe0:	cmp	r0, #45	; 0x2d
   3abe4:	bne	3ac20 <__assert_fail@plt+0x2862c>
   3abe8:	mov	r3, #22
   3abec:	strb	r3, [ip, #4]
   3abf0:	mov	r0, #1
   3abf4:	pop	{r4, pc}
   3abf8:	mov	r3, #2
   3abfc:	strb	r3, [ip, #4]
   3ac00:	mov	r0, #0
   3ac04:	bx	lr
   3ac08:	tst	r2, #1
   3ac0c:	beq	3ac20 <__assert_fail@plt+0x2862c>
   3ac10:	ldr	r2, [r1, #48]	; 0x30
   3ac14:	add	r3, r3, #1
   3ac18:	cmp	r3, r2
   3ac1c:	blt	3acb4 <__assert_fail@plt+0x286c0>
   3ac20:	mov	r3, #1
   3ac24:	mov	r0, r3
   3ac28:	strb	r3, [ip, #4]
   3ac2c:	pop	{r4, pc}
   3ac30:	mov	r3, #21
   3ac34:	strb	r3, [ip, #4]
   3ac38:	mov	r0, #1
   3ac3c:	pop	{r4, pc}
   3ac40:	mov	r0, #1
   3ac44:	strb	r0, [ip, #4]
   3ac48:	pop	{r4, pc}
   3ac4c:	ldr	r1, [r1, #48]	; 0x30
   3ac50:	add	r0, r3, #1
   3ac54:	cmp	r0, r1
   3ac58:	blt	3ac80 <__assert_fail@plt+0x2868c>
   3ac5c:	mov	r0, #1
   3ac60:	mov	r3, #91	; 0x5b
   3ac64:	strb	r0, [ip, #4]
   3ac68:	strb	r3, [ip]
   3ac6c:	pop	{r4, pc}
   3ac70:	mov	r3, #25
   3ac74:	strb	r3, [ip, #4]
   3ac78:	mov	r0, #1
   3ac7c:	pop	{r4, pc}
   3ac80:	add	r3, lr, r3
   3ac84:	ldrb	r3, [r3, #1]
   3ac88:	cmp	r3, #58	; 0x3a
   3ac8c:	strb	r3, [ip]
   3ac90:	beq	3accc <__assert_fail@plt+0x286d8>
   3ac94:	cmp	r3, #61	; 0x3d
   3ac98:	beq	3ace4 <__assert_fail@plt+0x286f0>
   3ac9c:	cmp	r3, #46	; 0x2e
   3aca0:	bne	3ac5c <__assert_fail@plt+0x28668>
   3aca4:	mov	r3, #26
   3aca8:	strb	r3, [ip, #4]
   3acac:	mov	r0, #2
   3acb0:	pop	{r4, pc}
   3acb4:	str	r3, [r1, #40]	; 0x28
   3acb8:	ldrb	r3, [lr, r3]
   3acbc:	mov	r0, #1
   3acc0:	strb	r0, [ip, #4]
   3acc4:	strb	r3, [ip]
   3acc8:	pop	{r4, pc}
   3accc:	tst	r2, #4
   3acd0:	beq	3ac5c <__assert_fail@plt+0x28668>
   3acd4:	mov	r3, #30
   3acd8:	strb	r3, [ip, #4]
   3acdc:	mov	r0, #2
   3ace0:	pop	{r4, pc}
   3ace4:	mov	r3, #28
   3ace8:	strb	r3, [ip, #4]
   3acec:	mov	r0, #2
   3acf0:	pop	{r4, pc}
   3acf4:	ldr	r3, [r1, #8]
   3acf8:	push	{r4, r5, r6, r7, r8, lr}
   3acfc:	mov	r4, #0
   3ad00:	str	r2, [r1]
   3ad04:	mov	r8, r0
   3ad08:	str	r3, [r1, #16]
   3ad0c:	lsl	r0, r3, #2
   3ad10:	str	r4, [r1, #20]
   3ad14:	mov	r5, r1
   3ad18:	mov	r7, r2
   3ad1c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3ad20:	cmp	r0, r4
   3ad24:	str	r0, [r5, #24]
   3ad28:	beq	3adfc <__assert_fail@plt+0x28808>
   3ad2c:	ldr	r1, [r5, #8]
   3ad30:	cmp	r1, #0
   3ad34:	bgt	3ad48 <__assert_fail@plt+0x28754>
   3ad38:	b	3ad94 <__assert_fail@plt+0x287a0>
   3ad3c:	add	r4, r4, #1
   3ad40:	cmp	r4, r1
   3ad44:	bge	3ad94 <__assert_fail@plt+0x287a0>
   3ad48:	ldr	r2, [r5, #12]
   3ad4c:	ldr	r3, [r8]
   3ad50:	ldr	r6, [r2, r4, lsl #2]
   3ad54:	add	r3, r3, r6, lsl #3
   3ad58:	ldrb	r3, [r3, #4]
   3ad5c:	tst	r3, #8
   3ad60:	bne	3ad3c <__assert_fail@plt+0x28748>
   3ad64:	ldr	r1, [r5, #20]
   3ad68:	ldr	r3, [r5, #16]
   3ad6c:	cmp	r3, r1
   3ad70:	beq	3add4 <__assert_fail@plt+0x287e0>
   3ad74:	ldr	r0, [r5, #24]
   3ad78:	add	r3, r1, #1
   3ad7c:	str	r3, [r5, #20]
   3ad80:	str	r6, [r0, r1, lsl #2]
   3ad84:	ldr	r1, [r5, #8]
   3ad88:	add	r4, r4, #1
   3ad8c:	cmp	r4, r1
   3ad90:	blt	3ad48 <__assert_fail@plt+0x28754>
   3ad94:	ldr	r4, [r8, #68]	; 0x44
   3ad98:	ldr	r6, [r8, #32]
   3ad9c:	and	r7, r7, r4
   3ada0:	add	r7, r7, r7, lsl #1
   3ada4:	lsl	r4, r7, #2
   3ada8:	add	r7, r6, r4
   3adac:	ldr	r3, [r6, r4]
   3adb0:	ldr	r2, [r7, #4]
   3adb4:	cmp	r2, r3
   3adb8:	ldrgt	r2, [r7, #8]
   3adbc:	ble	3ae04 <__assert_fail@plt+0x28810>
   3adc0:	add	r1, r3, #1
   3adc4:	str	r1, [r6, r4]
   3adc8:	mov	r0, #0
   3adcc:	str	r5, [r2, r3, lsl #2]
   3add0:	pop	{r4, r5, r6, r7, r8, pc}
   3add4:	add	r1, r1, #1
   3add8:	ldr	r0, [r5, #24]
   3addc:	lsl	r3, r1, #1
   3ade0:	str	r3, [r5, #16]
   3ade4:	lsl	r1, r1, #3
   3ade8:	bl	3aacc <__assert_fail@plt+0x284d8>
   3adec:	cmp	r0, #0
   3adf0:	ldrne	r1, [r5, #20]
   3adf4:	strne	r0, [r5, #24]
   3adf8:	bne	3ad78 <__assert_fail@plt+0x28784>
   3adfc:	mov	r0, #12
   3ae00:	pop	{r4, r5, r6, r7, r8, pc}
   3ae04:	add	r3, r3, #1
   3ae08:	ldr	r0, [r7, #8]
   3ae0c:	lsl	r1, r3, #3
   3ae10:	lsl	r8, r3, #1
   3ae14:	bl	3aacc <__assert_fail@plt+0x284d8>
   3ae18:	subs	r2, r0, #0
   3ae1c:	beq	3adfc <__assert_fail@plt+0x28808>
   3ae20:	ldr	r3, [r6, r4]
   3ae24:	str	r2, [r7, #8]
   3ae28:	str	r8, [r7, #4]
   3ae2c:	b	3adc0 <__assert_fail@plt+0x287cc>
   3ae30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ae34:	mov	r5, r0
   3ae38:	ldr	r8, [r0, #36]	; 0x24
   3ae3c:	ldr	r3, [r0, #48]	; 0x30
   3ae40:	ldr	r4, [r0, #28]
   3ae44:	cmp	r8, r3
   3ae48:	movge	r8, r3
   3ae4c:	cmp	r8, r4
   3ae50:	sub	sp, sp, #92	; 0x5c
   3ae54:	ble	3afb8 <__assert_fail@plt+0x289c4>
   3ae58:	add	r6, r0, #16
   3ae5c:	add	r7, sp, #16
   3ae60:	mov	fp, #1
   3ae64:	mvn	sl, #-1073741824	; 0xc0000000
   3ae68:	mov	r9, #255	; 0xff
   3ae6c:	b	3aeec <__assert_fail@plt+0x288f8>
   3ae70:	ldr	r3, [r5, #24]
   3ae74:	ldr	r1, [r5]
   3ae78:	add	r3, r4, r3
   3ae7c:	add	r1, r1, r3
   3ae80:	mov	r3, r6
   3ae84:	add	r0, sp, #12
   3ae88:	bl	3a03c <__assert_fail@plt+0x27a48>
   3ae8c:	sub	r2, r0, #1
   3ae90:	cmn	r2, #3
   3ae94:	mov	r3, r0
   3ae98:	bhi	3af6c <__assert_fail@plt+0x28978>
   3ae9c:	cmn	r0, #2
   3aea0:	ldrne	r2, [sp, #12]
   3aea4:	beq	3afa0 <__assert_fail@plt+0x289ac>
   3aea8:	ldr	r0, [r5, #8]
   3aeac:	add	r3, r4, r3
   3aeb0:	add	ip, r4, #1
   3aeb4:	cmp	ip, r3
   3aeb8:	str	r2, [r0, r4, lsl #2]
   3aebc:	lsl	r1, r4, #2
   3aec0:	bge	3afc8 <__assert_fail@plt+0x289d4>
   3aec4:	sub	r2, sl, r4
   3aec8:	add	r2, r2, r3
   3aecc:	add	r1, r1, #4
   3aed0:	add	r0, r0, r1
   3aed4:	lsl	r2, r2, #2
   3aed8:	mov	r1, r9
   3aedc:	mov	r4, r3
   3aee0:	bl	12378 <memset@plt>
   3aee4:	cmp	r8, r4
   3aee8:	ble	3afb8 <__assert_fail@plt+0x289c4>
   3aeec:	ldm	r6, {r0, r1}
   3aef0:	ldr	ip, [r5, #64]	; 0x40
   3aef4:	sub	r2, r8, r4
   3aef8:	cmp	ip, #0
   3aefc:	stm	r7, {r0, r1}
   3af00:	beq	3ae70 <__assert_fail@plt+0x2887c>
   3af04:	ldr	r3, [r5, #80]	; 0x50
   3af08:	cmp	r3, #0
   3af0c:	ble	3af64 <__assert_fail@plt+0x28970>
   3af10:	add	r0, sp, #23
   3af14:	mov	r3, #0
   3af18:	str	r6, [sp, #4]
   3af1c:	b	3af24 <__assert_fail@plt+0x28930>
   3af20:	ldr	ip, [r5, #64]	; 0x40
   3af24:	ldr	r1, [r5]
   3af28:	ldr	r6, [r5, #24]
   3af2c:	add	r1, r1, r4
   3af30:	add	r1, r1, r3
   3af34:	ldr	lr, [r5, #4]
   3af38:	ldrb	r1, [r1, r6]
   3af3c:	add	lr, lr, r4
   3af40:	ldrb	r1, [ip, r1]
   3af44:	strb	r1, [lr, r3]
   3af48:	ldr	ip, [r5, #80]	; 0x50
   3af4c:	add	r3, r3, #1
   3af50:	cmp	ip, r3
   3af54:	cmpgt	r2, r3
   3af58:	strb	r1, [r0, #1]!
   3af5c:	bgt	3af20 <__assert_fail@plt+0x2892c>
   3af60:	ldr	r6, [sp, #4]
   3af64:	add	r1, sp, #24
   3af68:	b	3ae80 <__assert_fail@plt+0x2888c>
   3af6c:	ldr	r3, [r5]
   3af70:	ldr	r2, [r5, #24]
   3af74:	add	r3, r3, r4
   3af78:	ldr	r1, [r5, #64]	; 0x40
   3af7c:	ldrb	r2, [r3, r2]
   3af80:	cmp	r1, #0
   3af84:	mov	r3, fp
   3af88:	str	r2, [sp, #12]
   3af8c:	ldrbne	r2, [r1, r2]
   3af90:	ldm	r7, {r0, r1}
   3af94:	strne	r2, [sp, #12]
   3af98:	stm	r6, {r0, r1}
   3af9c:	b	3aea8 <__assert_fail@plt+0x288b4>
   3afa0:	ldr	r2, [r5, #36]	; 0x24
   3afa4:	ldr	r3, [r5, #48]	; 0x30
   3afa8:	cmp	r2, r3
   3afac:	bge	3af6c <__assert_fail@plt+0x28978>
   3afb0:	ldm	r7, {r0, r1}
   3afb4:	stm	r6, {r0, r1}
   3afb8:	str	r4, [r5, #28]
   3afbc:	str	r4, [r5, #32]
   3afc0:	add	sp, sp, #92	; 0x5c
   3afc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afc8:	mov	r4, ip
   3afcc:	b	3aee4 <__assert_fail@plt+0x288f0>
   3afd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3afd4:	mov	r4, r0
   3afd8:	ldr	r6, [r0, #36]	; 0x24
   3afdc:	ldr	r3, [r0, #48]	; 0x30
   3afe0:	ldrb	r2, [r0, #74]	; 0x4a
   3afe4:	cmp	r6, r3
   3afe8:	movge	r6, r3
   3afec:	cmp	r2, #0
   3aff0:	sub	sp, sp, #100	; 0x64
   3aff4:	ldr	r5, [r0, #28]
   3aff8:	bne	3b008 <__assert_fail@plt+0x28a14>
   3affc:	ldr	r3, [r0, #64]	; 0x40
   3b000:	cmp	r3, #0
   3b004:	beq	3b138 <__assert_fail@plt+0x28b44>
   3b008:	ldr	r7, [r4, #32]
   3b00c:	cmp	r5, r6
   3b010:	bge	3b124 <__assert_fail@plt+0x28b30>
   3b014:	add	r3, sp, #24
   3b018:	add	r9, r4, #16
   3b01c:	sub	sl, r6, r5
   3b020:	str	r3, [sp, #4]
   3b024:	add	r3, sp, #20
   3b028:	str	r3, [sp, #8]
   3b02c:	ldm	r9, {r0, r1}
   3b030:	ldr	r2, [r4, #64]	; 0x40
   3b034:	ldr	r3, [sp, #4]
   3b038:	cmp	r2, #0
   3b03c:	stm	r3, {r0, r1}
   3b040:	bne	3b288 <__assert_fail@plt+0x28c94>
   3b044:	ldr	r3, [r4, #24]
   3b048:	ldr	r2, [r4]
   3b04c:	add	r3, r7, r3
   3b050:	add	r3, r2, r3
   3b054:	mov	r1, r3
   3b058:	str	r3, [sp, #12]
   3b05c:	mov	r3, r9
   3b060:	mov	r2, sl
   3b064:	ldr	r0, [sp, #8]
   3b068:	bl	3a03c <__assert_fail@plt+0x27a48>
   3b06c:	sub	r3, r0, #1
   3b070:	cmn	r3, #4
   3b074:	mov	r8, r0
   3b078:	str	r3, [sp, #8]
   3b07c:	bhi	3b398 <__assert_fail@plt+0x28da4>
   3b080:	ldr	fp, [sp, #20]
   3b084:	mov	r0, fp
   3b088:	bl	1257c <towupper@plt>
   3b08c:	cmp	fp, r0
   3b090:	mov	sl, r0
   3b094:	beq	3b380 <__assert_fail@plt+0x28d8c>
   3b098:	add	r0, sp, #32
   3b09c:	ldr	r2, [sp, #4]
   3b0a0:	mov	r1, sl
   3b0a4:	bl	11ef8 <wcrtomb@plt>
   3b0a8:	cmp	r8, r0
   3b0ac:	mov	fp, r0
   3b0b0:	bne	3b42c <__assert_fail@plt+0x28e38>
   3b0b4:	ldr	r0, [r4, #4]
   3b0b8:	add	r1, sp, #32
   3b0bc:	add	r0, r0, r5
   3b0c0:	mov	r2, r8
   3b0c4:	bl	12024 <memcpy@plt>
   3b0c8:	ldrb	r3, [r4, #76]	; 0x4c
   3b0cc:	cmp	r3, #0
   3b0d0:	bne	3b40c <__assert_fail@plt+0x28e18>
   3b0d4:	add	r3, r8, r7
   3b0d8:	ldr	r0, [r4, #8]
   3b0dc:	add	r8, r5, r8
   3b0e0:	add	r2, r5, #1
   3b0e4:	cmp	r2, r8
   3b0e8:	mov	r7, r3
   3b0ec:	str	sl, [r0, r5, lsl #2]
   3b0f0:	bge	3b528 <__assert_fail@plt+0x28f34>
   3b0f4:	mvn	r3, #-1073741824	; 0xc0000000
   3b0f8:	sub	r3, r3, r5
   3b0fc:	add	r3, r3, r8
   3b100:	add	r0, r0, r2, lsl #2
   3b104:	mov	r1, #255	; 0xff
   3b108:	lsl	r2, r3, #2
   3b10c:	mov	r5, r8
   3b110:	bl	12378 <memset@plt>
   3b114:	b	3b00c <__assert_fail@plt+0x28a18>
   3b118:	ldr	r3, [sp, #4]
   3b11c:	ldm	r3, {r0, r1}
   3b120:	stm	r9, {r0, r1}
   3b124:	mov	r0, #0
   3b128:	str	r5, [r4, #28]
   3b12c:	str	r7, [r4, #32]
   3b130:	add	sp, sp, #100	; 0x64
   3b134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b138:	ldrb	r3, [r0, #76]	; 0x4c
   3b13c:	cmp	r3, #0
   3b140:	bne	3b008 <__assert_fail@plt+0x28a14>
   3b144:	cmp	r5, r6
   3b148:	bge	3b370 <__assert_fail@plt+0x28d7c>
   3b14c:	add	r9, r0, #16
   3b150:	b	3b180 <__assert_fail@plt+0x28b8c>
   3b154:	mov	r0, fp
   3b158:	bl	1257c <towupper@plt>
   3b15c:	bics	r3, r0, #127	; 0x7f
   3b160:	bne	3b1a8 <__assert_fail@plt+0x28bb4>
   3b164:	ldr	r3, [r4, #4]
   3b168:	strb	r0, [r3, r5]
   3b16c:	ldr	r3, [r4, #8]
   3b170:	str	r0, [r3, r5, lsl #2]
   3b174:	add	r5, r5, #1
   3b178:	cmp	r6, r5
   3b17c:	ble	3b370 <__assert_fail@plt+0x28d7c>
   3b180:	ldr	r8, [r4]
   3b184:	ldr	r7, [r4, #24]
   3b188:	add	r3, r8, r7
   3b18c:	ldrb	fp, [r3, r5]
   3b190:	tst	fp, #128	; 0x80
   3b194:	bne	3b1a8 <__assert_fail@plt+0x28bb4>
   3b198:	mov	r0, r9
   3b19c:	bl	12060 <mbsinit@plt>
   3b1a0:	cmp	r0, #0
   3b1a4:	bne	3b154 <__assert_fail@plt+0x28b60>
   3b1a8:	ldm	r9, {r0, r1}
   3b1ac:	add	r3, sp, #24
   3b1b0:	add	r7, r7, r5
   3b1b4:	sub	sl, r6, r5
   3b1b8:	stm	r3, {r0, r1}
   3b1bc:	mov	r2, sl
   3b1c0:	add	r1, r8, r7
   3b1c4:	mov	r3, r9
   3b1c8:	add	r0, sp, #20
   3b1cc:	bl	3a03c <__assert_fail@plt+0x27a48>
   3b1d0:	add	r2, sp, #24
   3b1d4:	str	r2, [sp, #4]
   3b1d8:	add	r2, sp, #20
   3b1dc:	mov	r7, r5
   3b1e0:	str	r2, [sp, #8]
   3b1e4:	sub	r3, r0, #1
   3b1e8:	cmn	r3, #4
   3b1ec:	mov	r8, r0
   3b1f0:	bhi	3b304 <__assert_fail@plt+0x28d10>
   3b1f4:	ldr	r3, [sp, #20]
   3b1f8:	mov	r0, r3
   3b1fc:	str	r3, [sp, #12]
   3b200:	bl	1257c <towupper@plt>
   3b204:	ldr	r3, [sp, #12]
   3b208:	cmp	r3, r0
   3b20c:	mov	fp, r0
   3b210:	beq	3b2e0 <__assert_fail@plt+0x28cec>
   3b214:	mov	r1, r0
   3b218:	add	r2, sp, #24
   3b21c:	add	r0, sp, #32
   3b220:	bl	11ef8 <wcrtomb@plt>
   3b224:	cmp	r8, r0
   3b228:	bne	3b334 <__assert_fail@plt+0x28d40>
   3b22c:	ldr	r0, [r4, #4]
   3b230:	mov	r2, r8
   3b234:	add	r0, r0, r5
   3b238:	add	r1, sp, #32
   3b23c:	bl	12024 <memcpy@plt>
   3b240:	add	r5, r5, #1
   3b244:	sub	r3, r5, #1
   3b248:	ldr	r0, [r4, #8]
   3b24c:	add	r8, r3, r8
   3b250:	cmp	r5, r8
   3b254:	str	fp, [r0, r7, lsl #2]
   3b258:	lsl	r3, r7, #2
   3b25c:	bge	3b178 <__assert_fail@plt+0x28b84>
   3b260:	mvn	r2, #-1073741824	; 0xc0000000
   3b264:	sub	r2, r2, r7
   3b268:	add	r2, r2, r8
   3b26c:	add	r3, r3, #4
   3b270:	lsl	r2, r2, #2
   3b274:	add	r0, r0, r3
   3b278:	mov	r1, #255	; 0xff
   3b27c:	mov	r5, r8
   3b280:	bl	12378 <memset@plt>
   3b284:	b	3b178 <__assert_fail@plt+0x28b84>
   3b288:	ldr	lr, [r4, #80]	; 0x50
   3b28c:	cmp	lr, #0
   3b290:	ble	3b2d0 <__assert_fail@plt+0x28cdc>
   3b294:	ldr	r3, [r4, #24]
   3b298:	ldr	r1, [r4]
   3b29c:	add	r3, r7, r3
   3b2a0:	sub	r3, r3, #1
   3b2a4:	cmp	lr, sl
   3b2a8:	add	r1, r1, r3
   3b2ac:	movge	lr, sl
   3b2b0:	add	r0, sp, #31
   3b2b4:	mov	r3, #0
   3b2b8:	ldrb	ip, [r1, #1]!
   3b2bc:	add	r3, r3, #1
   3b2c0:	cmp	r3, lr
   3b2c4:	ldrb	ip, [r2, ip]
   3b2c8:	strb	ip, [r0, #1]!
   3b2cc:	blt	3b2b8 <__assert_fail@plt+0x28cc4>
   3b2d0:	add	r3, sp, #32
   3b2d4:	str	r3, [sp, #12]
   3b2d8:	mov	r1, r3
   3b2dc:	b	3b05c <__assert_fail@plt+0x28a68>
   3b2e0:	ldr	r3, [r4, #24]
   3b2e4:	ldr	r1, [r4]
   3b2e8:	ldr	r0, [r4, #4]
   3b2ec:	add	r3, r5, r3
   3b2f0:	add	r1, r1, r3
   3b2f4:	add	r0, r0, r5
   3b2f8:	mov	r2, r8
   3b2fc:	bl	12024 <memcpy@plt>
   3b300:	b	3b240 <__assert_fail@plt+0x28c4c>
   3b304:	cmn	r3, #3
   3b308:	bne	3b33c <__assert_fail@plt+0x28d48>
   3b30c:	ldr	r2, [r4, #36]	; 0x24
   3b310:	ldr	r3, [r4, #48]	; 0x30
   3b314:	cmp	r2, r3
   3b318:	blt	3b364 <__assert_fail@plt+0x28d70>
   3b31c:	ldr	r3, [r4, #4]
   3b320:	strb	fp, [r3, r5]
   3b324:	ldr	r3, [r4, #8]
   3b328:	add	r5, r5, #1
   3b32c:	str	fp, [r3, r7, lsl #2]
   3b330:	b	3b178 <__assert_fail@plt+0x28b84>
   3b334:	mov	r7, r5
   3b338:	b	3b02c <__assert_fail@plt+0x28a38>
   3b33c:	ldr	r3, [r4, #4]
   3b340:	cmn	r0, #1
   3b344:	strb	fp, [r3, r5]
   3b348:	ldr	r3, [r4, #8]
   3b34c:	add	r5, r5, #1
   3b350:	str	fp, [r3, r7, lsl #2]
   3b354:	addeq	r3, sp, #24
   3b358:	ldmeq	r3, {r0, r1}
   3b35c:	stmeq	r9, {r0, r1}
   3b360:	b	3b178 <__assert_fail@plt+0x28b84>
   3b364:	add	r3, sp, #24
   3b368:	ldm	r3, {r0, r1}
   3b36c:	stm	r9, {r0, r1}
   3b370:	str	r5, [r4, #28]
   3b374:	str	r5, [r4, #32]
   3b378:	mov	r0, #0
   3b37c:	b	3b130 <__assert_fail@plt+0x28b3c>
   3b380:	ldr	r0, [r4, #4]
   3b384:	ldr	r1, [sp, #12]
   3b388:	add	r0, r0, r5
   3b38c:	mov	r2, r8
   3b390:	bl	12024 <memcpy@plt>
   3b394:	b	3b0c8 <__assert_fail@plt+0x28ad4>
   3b398:	cmn	r3, #3
   3b39c:	bne	3b3b0 <__assert_fail@plt+0x28dbc>
   3b3a0:	ldr	r2, [r4, #36]	; 0x24
   3b3a4:	ldr	r3, [r4, #48]	; 0x30
   3b3a8:	cmp	r2, r3
   3b3ac:	blt	3b118 <__assert_fail@plt+0x28b24>
   3b3b0:	ldr	r3, [r4]
   3b3b4:	ldr	r1, [r4, #24]
   3b3b8:	add	r3, r3, r7
   3b3bc:	ldr	r2, [r4, #64]	; 0x40
   3b3c0:	ldrb	r3, [r3, r1]
   3b3c4:	cmp	r2, #0
   3b3c8:	mov	r1, r5
   3b3cc:	ldrbne	r3, [r2, r3]
   3b3d0:	ldr	r2, [r4, #4]
   3b3d4:	strb	r3, [r2, r5]
   3b3d8:	ldrb	r2, [r4, #76]	; 0x4c
   3b3dc:	cmp	r2, #0
   3b3e0:	ldrne	r2, [r4, #12]
   3b3e4:	strne	r7, [r2, r5, lsl #2]
   3b3e8:	ldr	r2, [r4, #8]
   3b3ec:	cmn	r8, #1
   3b3f0:	add	r7, r7, #1
   3b3f4:	add	r5, r5, #1
   3b3f8:	str	r3, [r2, r1, lsl #2]
   3b3fc:	ldreq	r3, [sp, #4]
   3b400:	ldmeq	r3, {r0, r1}
   3b404:	stmeq	r9, {r0, r1}
   3b408:	b	3b00c <__assert_fail@plt+0x28a18>
   3b40c:	ldr	r2, [r4, #12]
   3b410:	add	r3, r8, r7
   3b414:	add	r2, r2, r5, lsl #2
   3b418:	str	r7, [r2], #4
   3b41c:	add	r7, r7, #1
   3b420:	cmp	r3, r7
   3b424:	bne	3b418 <__assert_fail@plt+0x28e24>
   3b428:	b	3b0d8 <__assert_fail@plt+0x28ae4>
   3b42c:	cmn	r0, #1
   3b430:	beq	3b380 <__assert_fail@plt+0x28d8c>
   3b434:	ldr	r0, [r4, #36]	; 0x24
   3b438:	add	r6, fp, r5
   3b43c:	cmp	r6, r0
   3b440:	bhi	3b118 <__assert_fail@plt+0x28b24>
   3b444:	ldr	r3, [r4, #12]
   3b448:	cmp	r3, #0
   3b44c:	beq	3b530 <__assert_fail@plt+0x28f3c>
   3b450:	ldrb	r3, [r4, #76]	; 0x4c
   3b454:	cmp	r3, #0
   3b458:	bne	3b484 <__assert_fail@plt+0x28e90>
   3b45c:	cmp	r5, #0
   3b460:	ldrne	r2, [r4, #12]
   3b464:	subne	r2, r2, #4
   3b468:	beq	3b47c <__assert_fail@plt+0x28e88>
   3b46c:	str	r3, [r2, #4]!
   3b470:	add	r3, r3, #1
   3b474:	cmp	r5, r3
   3b478:	bne	3b46c <__assert_fail@plt+0x28e78>
   3b47c:	mov	r3, #1
   3b480:	strb	r3, [r4, #76]	; 0x4c
   3b484:	ldr	r0, [r4, #4]
   3b488:	add	r1, sp, #32
   3b48c:	mov	r2, fp
   3b490:	add	r0, r0, r5
   3b494:	bl	12024 <memcpy@plt>
   3b498:	ldr	r3, [r4, #8]
   3b49c:	ldr	r1, [r4, #12]
   3b4a0:	lsl	r2, r5, #2
   3b4a4:	cmp	fp, #1
   3b4a8:	str	sl, [r3, r5, lsl #2]
   3b4ac:	add	r3, r3, r2
   3b4b0:	str	r7, [r1, r5, lsl #2]
   3b4b4:	add	r2, r1, r2
   3b4b8:	bls	3b4e8 <__assert_fail@plt+0x28ef4>
   3b4bc:	mov	r1, #1
   3b4c0:	mvn	ip, #0
   3b4c4:	cmp	r1, r8
   3b4c8:	ldr	r0, [sp, #8]
   3b4cc:	movcc	r0, r1
   3b4d0:	add	r1, r1, #1
   3b4d4:	add	r0, r0, r7
   3b4d8:	cmp	fp, r1
   3b4dc:	str	r0, [r2, #4]!
   3b4e0:	str	ip, [r3, #4]!
   3b4e4:	bne	3b4c4 <__assert_fail@plt+0x28ed0>
   3b4e8:	ldr	r2, [r4, #52]	; 0x34
   3b4ec:	ldr	r3, [r4, #48]	; 0x30
   3b4f0:	cmp	r7, r2
   3b4f4:	sub	fp, fp, r8
   3b4f8:	ldrlt	r2, [r4, #56]	; 0x38
   3b4fc:	add	r3, fp, r3
   3b500:	addlt	fp, r2, fp
   3b504:	ldr	r2, [r4, #36]	; 0x24
   3b508:	strlt	fp, [r4, #56]	; 0x38
   3b50c:	cmp	r3, r2
   3b510:	mov	r5, r6
   3b514:	str	r3, [r4, #48]	; 0x30
   3b518:	add	r7, r8, r7
   3b51c:	movlt	r6, r3
   3b520:	movge	r6, r2
   3b524:	b	3b00c <__assert_fail@plt+0x28a18>
   3b528:	mov	r5, r2
   3b52c:	b	3b00c <__assert_fail@plt+0x28a18>
   3b530:	lsl	r0, r0, #2
   3b534:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3b538:	cmp	r0, #0
   3b53c:	str	r0, [r4, #12]
   3b540:	moveq	r0, #12
   3b544:	bne	3b450 <__assert_fail@plt+0x28e5c>
   3b548:	b	3b130 <__assert_fail@plt+0x28b3c>
   3b54c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b550:	sub	sp, sp, #12
   3b554:	ldmib	r0, {r5, ip}
   3b558:	stm	sp, {r1, r2}
   3b55c:	mov	r4, r0
   3b560:	cmp	ip, r5
   3b564:	mov	r8, sp
   3b568:	ldrb	r6, [sp, #4]
   3b56c:	bcs	3b62c <__assert_fail@plt+0x29038>
   3b570:	ldr	r7, [r0, #12]
   3b574:	ldr	r5, [r0, #20]
   3b578:	ldm	r8, {r0, r1}
   3b57c:	ldr	r3, [r4]
   3b580:	cmp	r6, #5
   3b584:	add	r3, r3, ip, lsl #3
   3b588:	bic	r2, r1, #261120	; 0x3fc00
   3b58c:	bic	r2, r2, #768	; 0x300
   3b590:	stm	r3, {r0, r1}
   3b594:	str	r2, [r3, #4]
   3b598:	beq	3b618 <__assert_fail@plt+0x29024>
   3b59c:	sub	r6, r6, #6
   3b5a0:	clz	r6, r6
   3b5a4:	lsr	r6, r6, #5
   3b5a8:	ldrb	r2, [r3, #6]
   3b5ac:	mvn	r1, #0
   3b5b0:	bic	r2, r2, #16
   3b5b4:	orr	r2, r2, r6, lsl #4
   3b5b8:	strb	r2, [r3, #6]
   3b5bc:	str	r1, [r7, ip, lsl #2]
   3b5c0:	ldr	r3, [r4, #8]
   3b5c4:	mov	r2, #0
   3b5c8:	add	r3, r3, r3, lsl #1
   3b5cc:	lsl	r3, r3, #2
   3b5d0:	add	r1, r5, r3
   3b5d4:	str	r2, [r5, r3]
   3b5d8:	str	r2, [r1, #4]
   3b5dc:	str	r2, [r1, #8]
   3b5e0:	ldr	r3, [r4, #8]
   3b5e4:	ldr	r0, [r4, #24]
   3b5e8:	add	r3, r3, r3, lsl #1
   3b5ec:	lsl	r3, r3, #2
   3b5f0:	add	r1, r0, r3
   3b5f4:	str	r2, [r0, r3]
   3b5f8:	str	r2, [r1, #4]
   3b5fc:	str	r2, [r1, #8]
   3b600:	ldr	r3, [r4, #8]
   3b604:	mov	r0, r3
   3b608:	add	r3, r3, #1
   3b60c:	str	r3, [r4, #8]
   3b610:	add	sp, sp, #12
   3b614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b618:	ldr	r6, [r4, #92]	; 0x5c
   3b61c:	cmp	r6, #1
   3b620:	movle	r6, #0
   3b624:	movgt	r6, #1
   3b628:	b	3b5a8 <__assert_fail@plt+0x28fb4>
   3b62c:	ldr	r3, [pc, #200]	; 3b6fc <__assert_fail@plt+0x29108>
   3b630:	lsl	r9, r5, #1
   3b634:	cmp	r9, r3
   3b638:	bhi	3b6f4 <__assert_fail@plt+0x29100>
   3b63c:	lsl	r1, r5, #4
   3b640:	ldr	r0, [r0]
   3b644:	bl	3aacc <__assert_fail@plt+0x284d8>
   3b648:	cmp	r0, #0
   3b64c:	beq	3b6f4 <__assert_fail@plt+0x29100>
   3b650:	lsl	sl, r5, #3
   3b654:	mov	r1, sl
   3b658:	str	r0, [r4]
   3b65c:	ldr	r0, [r4, #12]
   3b660:	bl	3aacc <__assert_fail@plt+0x284d8>
   3b664:	mov	r1, sl
   3b668:	add	r5, r9, r5, lsl #2
   3b66c:	lsl	sl, r5, #2
   3b670:	mov	r7, r0
   3b674:	ldr	r0, [r4, #16]
   3b678:	bl	3aacc <__assert_fail@plt+0x284d8>
   3b67c:	mov	r1, sl
   3b680:	mov	fp, r0
   3b684:	ldr	r0, [r4, #20]
   3b688:	bl	3aacc <__assert_fail@plt+0x284d8>
   3b68c:	mov	r1, sl
   3b690:	mov	r5, r0
   3b694:	ldr	r0, [r4, #24]
   3b698:	bl	3aacc <__assert_fail@plt+0x284d8>
   3b69c:	cmp	fp, #0
   3b6a0:	cmpne	r7, #0
   3b6a4:	mov	sl, r0
   3b6a8:	beq	3b6d4 <__assert_fail@plt+0x290e0>
   3b6ac:	cmp	r0, #0
   3b6b0:	cmpne	r5, #0
   3b6b4:	beq	3b6d4 <__assert_fail@plt+0x290e0>
   3b6b8:	ldr	ip, [r4, #8]
   3b6bc:	str	r7, [r4, #12]
   3b6c0:	str	fp, [r4, #16]
   3b6c4:	str	r5, [r4, #20]
   3b6c8:	str	r0, [r4, #24]
   3b6cc:	str	r9, [r4, #4]
   3b6d0:	b	3b578 <__assert_fail@plt+0x28f84>
   3b6d4:	mov	r0, r7
   3b6d8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3b6dc:	mov	r0, fp
   3b6e0:	bl	376d0 <__assert_fail@plt+0x250dc>
   3b6e4:	mov	r0, r5
   3b6e8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3b6ec:	mov	r0, sl
   3b6f0:	bl	376d0 <__assert_fail@plt+0x250dc>
   3b6f4:	mvn	r0, #0
   3b6f8:	b	3b610 <__assert_fail@plt+0x2901c>
   3b6fc:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   3b700:	ldr	r3, [r0]
   3b704:	push	{r4, r5, r6, lr}
   3b708:	cmp	r3, #0
   3b70c:	mov	r4, r0
   3b710:	mov	r6, r1
   3b714:	beq	3b740 <__assert_fail@plt+0x2914c>
   3b718:	ldr	r2, [r0, #4]
   3b71c:	cmp	r2, #0
   3b720:	bne	3b770 <__assert_fail@plt+0x2917c>
   3b724:	ldr	r3, [r0, #8]
   3b728:	mov	r0, #1
   3b72c:	str	r1, [r3]
   3b730:	ldr	r3, [r4, #4]
   3b734:	add	r3, r3, r0
   3b738:	str	r3, [r4, #4]
   3b73c:	pop	{r4, r5, r6, pc}
   3b740:	mov	r5, #1
   3b744:	str	r5, [r0]
   3b748:	str	r5, [r0, #4]
   3b74c:	mov	r0, #4
   3b750:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3b754:	cmp	r0, #0
   3b758:	str	r0, [r4, #8]
   3b75c:	strne	r6, [r0]
   3b760:	streq	r0, [r4, #4]
   3b764:	streq	r0, [r4]
   3b768:	movne	r0, r5
   3b76c:	pop	{r4, r5, r6, pc}
   3b770:	cmp	r3, r2
   3b774:	beq	3b7f0 <__assert_fail@plt+0x291fc>
   3b778:	ldr	r5, [r0, #8]
   3b77c:	ldr	r3, [r5]
   3b780:	cmp	r6, r3
   3b784:	bge	3b7bc <__assert_fail@plt+0x291c8>
   3b788:	cmp	r2, #0
   3b78c:	ble	3b7a4 <__assert_fail@plt+0x291b0>
   3b790:	lsl	r2, r2, #2
   3b794:	mov	r1, r5
   3b798:	add	r0, r5, #4
   3b79c:	bl	11fb8 <memmove@plt>
   3b7a0:	mov	r2, #0
   3b7a4:	str	r6, [r5, r2, lsl #2]
   3b7a8:	ldr	r3, [r4, #4]
   3b7ac:	mov	r0, #1
   3b7b0:	add	r3, r3, r0
   3b7b4:	str	r3, [r4, #4]
   3b7b8:	pop	{r4, r5, r6, pc}
   3b7bc:	sub	r3, r2, #-1073741823	; 0xc0000001
   3b7c0:	ldr	r1, [r5, r3, lsl #2]
   3b7c4:	lsl	r3, r3, #2
   3b7c8:	cmp	r6, r1
   3b7cc:	bge	3b7a4 <__assert_fail@plt+0x291b0>
   3b7d0:	add	r3, r3, #4
   3b7d4:	add	r3, r5, r3
   3b7d8:	str	r1, [r3], #-4
   3b7dc:	ldr	r1, [r3, #-4]
   3b7e0:	sub	r2, r2, #1
   3b7e4:	cmp	r6, r1
   3b7e8:	blt	3b7d8 <__assert_fail@plt+0x291e4>
   3b7ec:	b	3b7a4 <__assert_fail@plt+0x291b0>
   3b7f0:	lsl	r3, r2, #1
   3b7f4:	str	r3, [r0]
   3b7f8:	lsl	r1, r2, #3
   3b7fc:	ldr	r0, [r0, #8]
   3b800:	bl	3aacc <__assert_fail@plt+0x284d8>
   3b804:	subs	r5, r0, #0
   3b808:	ldrne	r2, [r4, #4]
   3b80c:	strne	r5, [r4, #8]
   3b810:	bne	3b77c <__assert_fail@plt+0x29188>
   3b814:	mov	r0, r5
   3b818:	pop	{r4, r5, r6, pc}
   3b81c:	cmp	r0, #0
   3b820:	ble	3b8a4 <__assert_fail@plt+0x292b0>
   3b824:	push	{lr}		; (str lr, [sp, #-4]!)
   3b828:	sub	ip, r0, #1
   3b82c:	ldr	lr, [r1]
   3b830:	mov	r0, #0
   3b834:	cmp	r0, ip
   3b838:	bcs	3b874 <__assert_fail@plt+0x29280>
   3b83c:	add	r1, r0, ip
   3b840:	lsr	r1, r1, #1
   3b844:	ldr	r3, [lr, r1, lsl #2]
   3b848:	cmp	r2, r3
   3b84c:	ble	3b864 <__assert_fail@plt+0x29270>
   3b850:	b	3b888 <__assert_fail@plt+0x29294>
   3b854:	ldr	ip, [lr, r3, lsl #2]
   3b858:	cmp	ip, r2
   3b85c:	blt	3b890 <__assert_fail@plt+0x2929c>
   3b860:	mov	r1, r3
   3b864:	add	r3, r0, r1
   3b868:	cmp	r0, r1
   3b86c:	lsr	r3, r3, #1
   3b870:	bcc	3b854 <__assert_fail@plt+0x29260>
   3b874:	ldr	r3, [lr, r0, lsl #2]
   3b878:	cmp	r2, r3
   3b87c:	beq	3b89c <__assert_fail@plt+0x292a8>
   3b880:	mov	r0, #0
   3b884:	pop	{pc}		; (ldr pc, [sp], #4)
   3b888:	mov	r3, r1
   3b88c:	mov	r1, ip
   3b890:	add	r0, r3, #1
   3b894:	mov	ip, r1
   3b898:	b	3b834 <__assert_fail@plt+0x29240>
   3b89c:	add	r0, r0, #1
   3b8a0:	pop	{pc}		; (ldr pc, [sp], #4)
   3b8a4:	mov	r0, #0
   3b8a8:	bx	lr
   3b8ac:	push	{r4, r5, r6, lr}
   3b8b0:	mov	r5, r0
   3b8b4:	ldr	r0, [r1]
   3b8b8:	sub	sp, sp, #16
   3b8bc:	cmp	r0, #31
   3b8c0:	beq	3b934 <__assert_fail@plt+0x29340>
   3b8c4:	lsl	ip, r0, #5
   3b8c8:	ldr	r4, [r5]
   3b8cc:	add	r0, r0, #1
   3b8d0:	add	r6, ip, #4
   3b8d4:	str	r0, [r1]
   3b8d8:	ldr	r1, [sp, #32]
   3b8dc:	add	ip, r4, ip
   3b8e0:	mov	r5, #0
   3b8e4:	str	r2, [ip, #8]
   3b8e8:	str	r3, [ip, #12]
   3b8ec:	str	r5, [ip, #4]
   3b8f0:	ldm	r1, {r0, r1}
   3b8f4:	add	lr, ip, #24
   3b8f8:	cmp	r2, r5
   3b8fc:	stm	lr, {r0, r1}
   3b900:	ldrb	r1, [ip, #30]
   3b904:	mvn	lr, #0
   3b908:	add	r0, r4, r6
   3b90c:	and	r1, r1, #243	; 0xf3
   3b910:	str	r5, [ip, #16]
   3b914:	str	r5, [ip, #20]
   3b918:	strb	r1, [ip, #30]
   3b91c:	str	lr, [ip, #32]
   3b920:	strne	r0, [r2]
   3b924:	cmp	r3, #0
   3b928:	strne	r0, [r3]
   3b92c:	add	sp, sp, #16
   3b930:	pop	{r4, r5, r6, pc}
   3b934:	mov	r0, #996	; 0x3e4
   3b938:	stmib	sp, {r1, r2, r3}
   3b93c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3b940:	subs	r4, r0, #0
   3b944:	beq	3b968 <__assert_fail@plt+0x29374>
   3b948:	ldr	ip, [r5]
   3b94c:	mov	r6, #4
   3b950:	str	ip, [r4]
   3b954:	mov	r0, #1
   3b958:	mov	ip, #0
   3b95c:	str	r4, [r5]
   3b960:	ldmib	sp, {r1, r2, r3}
   3b964:	b	3b8d4 <__assert_fail@plt+0x292e0>
   3b968:	mov	r0, r4
   3b96c:	b	3b92c <__assert_fail@plt+0x29338>
   3b970:	push	{r4, r5, r6, lr}
   3b974:	mov	r4, r0
   3b978:	ldr	r0, [r1, #4]
   3b97c:	str	r0, [r4, #4]
   3b980:	ldr	r2, [r1, #4]
   3b984:	cmp	r2, #0
   3b988:	ble	3b9c0 <__assert_fail@plt+0x293cc>
   3b98c:	str	r0, [r4]
   3b990:	lsl	r0, r0, #2
   3b994:	mov	r5, r1
   3b998:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3b99c:	cmp	r0, #0
   3b9a0:	str	r0, [r4, #8]
   3b9a4:	beq	3b9d8 <__assert_fail@plt+0x293e4>
   3b9a8:	ldr	r2, [r5, #4]
   3b9ac:	ldr	r1, [r5, #8]
   3b9b0:	lsl	r2, r2, #2
   3b9b4:	bl	12024 <memcpy@plt>
   3b9b8:	mov	r0, #0
   3b9bc:	pop	{r4, r5, r6, pc}
   3b9c0:	mov	r2, #0
   3b9c4:	mov	r0, r2
   3b9c8:	str	r2, [r4]
   3b9cc:	str	r2, [r4, #4]
   3b9d0:	str	r2, [r4, #8]
   3b9d4:	pop	{r4, r5, r6, pc}
   3b9d8:	str	r0, [r4, #4]
   3b9dc:	str	r0, [r4]
   3b9e0:	mov	r0, #12
   3b9e4:	pop	{r4, r5, r6, pc}
   3b9e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b9ec:	mov	sl, r0
   3b9f0:	ldr	r7, [r2, #4]
   3b9f4:	ldr	r0, [r1, #4]
   3b9f8:	ldr	r3, [sl, #4]
   3b9fc:	ldr	r9, [r1, #8]
   3ba00:	ldr	r8, [r2, #8]
   3ba04:	sub	r5, r0, #1
   3ba08:	sub	r6, r7, #1
   3ba0c:	add	r0, r3, r0
   3ba10:	add	r7, r0, r7
   3ba14:	ldr	ip, [r9, r5, lsl #2]
   3ba18:	ldr	r4, [r8, r6, lsl #2]
   3ba1c:	ldr	r0, [sl, #8]
   3ba20:	sub	r3, r3, #1
   3ba24:	cmp	ip, r4
   3ba28:	beq	3ba44 <__assert_fail@plt+0x29450>
   3ba2c:	bge	3ba94 <__assert_fail@plt+0x294a0>
   3ba30:	subs	r6, r6, #1
   3ba34:	bmi	3bab4 <__assert_fail@plt+0x294c0>
   3ba38:	ldr	r4, [r8, r6, lsl #2]
   3ba3c:	cmp	ip, r4
   3ba40:	bne	3ba2c <__assert_fail@plt+0x29438>
   3ba44:	cmp	r3, #0
   3ba48:	blt	3ba74 <__assert_fail@plt+0x29480>
   3ba4c:	ldr	lr, [r0, r3, lsl #2]
   3ba50:	add	ip, r0, r3, lsl #2
   3ba54:	cmp	lr, r4
   3ba58:	bgt	3ba6c <__assert_fail@plt+0x29478>
   3ba5c:	b	3baa4 <__assert_fail@plt+0x294b0>
   3ba60:	ldr	lr, [ip, #-4]!
   3ba64:	cmp	lr, r4
   3ba68:	ble	3baa4 <__assert_fail@plt+0x294b0>
   3ba6c:	subs	r3, r3, #1
   3ba70:	bcs	3ba60 <__assert_fail@plt+0x2946c>
   3ba74:	sub	r7, r7, #1
   3ba78:	subs	r5, r5, #1
   3ba7c:	str	r4, [r0, r7, lsl #2]
   3ba80:	bmi	3bab4 <__assert_fail@plt+0x294c0>
   3ba84:	subs	r6, r6, #1
   3ba88:	bmi	3bab4 <__assert_fail@plt+0x294c0>
   3ba8c:	ldr	ip, [r9, r5, lsl #2]
   3ba90:	b	3ba38 <__assert_fail@plt+0x29444>
   3ba94:	subs	r5, r5, #1
   3ba98:	bmi	3bab4 <__assert_fail@plt+0x294c0>
   3ba9c:	ldr	ip, [r9, r5, lsl #2]
   3baa0:	b	3ba24 <__assert_fail@plt+0x29430>
   3baa4:	cmp	lr, r4
   3baa8:	bne	3ba74 <__assert_fail@plt+0x29480>
   3baac:	subs	r5, r5, #1
   3bab0:	bpl	3ba84 <__assert_fail@plt+0x29490>
   3bab4:	ldr	ip, [sl, #4]
   3bab8:	ldr	r1, [r1, #4]
   3babc:	ldr	r3, [r2, #4]
   3bac0:	add	r1, ip, r1
   3bac4:	add	r1, r1, r3
   3bac8:	sub	r2, r1, r7
   3bacc:	sub	r3, ip, #1
   3bad0:	cmp	r3, #0
   3bad4:	cmpge	r2, #0
   3bad8:	add	ip, ip, r2
   3badc:	sub	r1, r1, #1
   3bae0:	str	ip, [sl, #4]
   3bae4:	bgt	3bb0c <__assert_fail@plt+0x29518>
   3bae8:	lsl	r2, r2, #2
   3baec:	add	r1, r0, r7, lsl #2
   3baf0:	bl	12024 <memcpy@plt>
   3baf4:	mov	r0, #0
   3baf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bafc:	sub	r3, r3, #1
   3bb00:	cmn	r3, #1
   3bb04:	str	ip, [r0, r5, lsl #2]
   3bb08:	beq	3bae8 <__assert_fail@plt+0x294f4>
   3bb0c:	ldr	lr, [r0, r1, lsl #2]
   3bb10:	ldr	ip, [r0, r3, lsl #2]
   3bb14:	add	r5, r3, r2
   3bb18:	cmp	lr, ip
   3bb1c:	mov	r4, r5
   3bb20:	ble	3bafc <__assert_fail@plt+0x29508>
   3bb24:	subs	r2, r2, #1
   3bb28:	sub	r1, r1, #1
   3bb2c:	str	lr, [r0, r5, lsl #2]
   3bb30:	bne	3bb0c <__assert_fail@plt+0x29518>
   3bb34:	b	3baec <__assert_fail@plt+0x294f8>
   3bb38:	push	{r4, r5, r6, r7, r8, lr}
   3bb3c:	mov	r5, r0
   3bb40:	ldr	r4, [r0, #4]
   3bb44:	mov	r6, r1
   3bb48:	cmp	r4, #0
   3bb4c:	beq	3bc58 <__assert_fail@plt+0x29664>
   3bb50:	ldr	r1, [r1, #4]
   3bb54:	sub	r3, r4, #1
   3bb58:	sub	r2, r1, #1
   3bb5c:	add	r4, r4, r1, lsl #1
   3bb60:	mvn	r7, r2
   3bb64:	mvn	lr, r3
   3bb68:	tst	r7, lr
   3bb6c:	bpl	3bba8 <__assert_fail@plt+0x295b4>
   3bb70:	ldr	r1, [r5, #8]
   3bb74:	ldr	r0, [r6, #8]
   3bb78:	ldr	ip, [r1, r3, lsl #2]
   3bb7c:	ldr	r0, [r0, r2, lsl #2]
   3bb80:	cmp	ip, r0
   3bb84:	beq	3bc44 <__assert_fail@plt+0x29650>
   3bb88:	sublt	r4, r4, #1
   3bb8c:	sublt	r2, r2, #1
   3bb90:	subge	r3, r3, #1
   3bb94:	mvnlt	r7, r2
   3bb98:	mvnge	lr, r3
   3bb9c:	strlt	r0, [r1, r4, lsl #2]
   3bba0:	tst	r7, lr
   3bba4:	bmi	3bb70 <__assert_fail@plt+0x2957c>
   3bba8:	cmp	r2, #0
   3bbac:	blt	3bbcc <__assert_fail@plt+0x295d8>
   3bbb0:	add	r2, r2, #1
   3bbb4:	sub	r4, r4, r2
   3bbb8:	ldr	r0, [r5, #8]
   3bbbc:	lsl	r2, r2, #2
   3bbc0:	add	r0, r0, r4, lsl #2
   3bbc4:	ldr	r1, [r6, #8]
   3bbc8:	bl	12024 <memcpy@plt>
   3bbcc:	ldr	r1, [r6, #4]
   3bbd0:	ldr	ip, [r5, #4]
   3bbd4:	add	r1, ip, r1, lsl #1
   3bbd8:	subs	r2, r1, r4
   3bbdc:	sub	r1, r1, #1
   3bbe0:	beq	3bc1c <__assert_fail@plt+0x29628>
   3bbe4:	ldr	r0, [r5, #8]
   3bbe8:	sub	r3, ip, #1
   3bbec:	add	ip, ip, r2
   3bbf0:	str	ip, [r5, #4]
   3bbf4:	ldr	lr, [r0, r1, lsl #2]
   3bbf8:	ldr	ip, [r0, r3, lsl #2]
   3bbfc:	add	r6, r3, r2
   3bc00:	cmp	lr, ip
   3bc04:	mov	r5, r6
   3bc08:	ble	3bc24 <__assert_fail@plt+0x29630>
   3bc0c:	subs	r2, r2, #1
   3bc10:	sub	r1, r1, #1
   3bc14:	str	lr, [r0, r6, lsl #2]
   3bc18:	bne	3bbf4 <__assert_fail@plt+0x29600>
   3bc1c:	mov	r0, #0
   3bc20:	pop	{r4, r5, r6, r7, r8, pc}
   3bc24:	subs	r3, r3, #1
   3bc28:	str	ip, [r0, r6, lsl #2]
   3bc2c:	bpl	3bbf4 <__assert_fail@plt+0x29600>
   3bc30:	lsl	r2, r2, #2
   3bc34:	add	r1, r0, r4, lsl #2
   3bc38:	bl	12024 <memcpy@plt>
   3bc3c:	mov	r0, #0
   3bc40:	pop	{r4, r5, r6, r7, r8, pc}
   3bc44:	sub	r2, r2, #1
   3bc48:	sub	r3, r3, #1
   3bc4c:	mvn	r7, r2
   3bc50:	mvn	lr, r3
   3bc54:	b	3bb68 <__assert_fail@plt+0x29574>
   3bc58:	ldr	r3, [r1, #4]
   3bc5c:	ldr	r0, [r0, #8]
   3bc60:	str	r3, [r5, #4]
   3bc64:	ldr	r2, [r1, #4]
   3bc68:	ldr	r1, [r1, #8]
   3bc6c:	lsl	r2, r2, #2
   3bc70:	bl	12024 <memcpy@plt>
   3bc74:	mov	r0, #0
   3bc78:	pop	{r4, r5, r6, r7, r8, pc}
   3bc7c:	cmp	r1, #0
   3bc80:	push	{r4, r5, r6, lr}
   3bc84:	mov	r5, r0
   3bc88:	blt	3bce4 <__assert_fail@plt+0x296f0>
   3bc8c:	ldr	r3, [r0, #48]	; 0x30
   3bc90:	cmp	r1, r3
   3bc94:	beq	3bd58 <__assert_fail@plt+0x29764>
   3bc98:	ldr	r3, [r0, #80]	; 0x50
   3bc9c:	cmp	r3, #1
   3bca0:	ble	3bcec <__assert_fail@plt+0x296f8>
   3bca4:	ldr	r3, [r0, #8]
   3bca8:	add	r3, r3, r1, lsl #2
   3bcac:	b	3bcb8 <__assert_fail@plt+0x296c4>
   3bcb0:	cmn	r1, #1
   3bcb4:	beq	3bce4 <__assert_fail@plt+0x296f0>
   3bcb8:	ldr	r4, [r3], #-4
   3bcbc:	sub	r1, r1, #1
   3bcc0:	cmn	r4, #1
   3bcc4:	beq	3bcb0 <__assert_fail@plt+0x296bc>
   3bcc8:	ldrb	r3, [r5, #78]	; 0x4e
   3bccc:	cmp	r3, #0
   3bcd0:	bne	3bd2c <__assert_fail@plt+0x29738>
   3bcd4:	cmp	r4, #10
   3bcd8:	beq	3bd18 <__assert_fail@plt+0x29724>
   3bcdc:	mov	r0, #0
   3bce0:	pop	{r4, r5, r6, pc}
   3bce4:	ldr	r0, [r5, #60]	; 0x3c
   3bce8:	pop	{r4, r5, r6, pc}
   3bcec:	ldr	r3, [r0, #4]
   3bcf0:	ldr	r0, [r0, #68]	; 0x44
   3bcf4:	ldrb	r3, [r3, r1]
   3bcf8:	and	r2, r3, #31
   3bcfc:	asr	r1, r3, #5
   3bd00:	ldr	r0, [r0, r1, lsl #2]
   3bd04:	lsr	r0, r0, r2
   3bd08:	ands	r0, r0, #1
   3bd0c:	bne	3bd50 <__assert_fail@plt+0x2975c>
   3bd10:	cmp	r3, #10
   3bd14:	popne	{r4, r5, r6, pc}
   3bd18:	ldrb	r0, [r5, #77]	; 0x4d
   3bd1c:	cmp	r0, #0
   3bd20:	movne	r0, #2
   3bd24:	moveq	r0, #0
   3bd28:	pop	{r4, r5, r6, pc}
   3bd2c:	mov	r0, r4
   3bd30:	bl	12354 <iswalnum@plt>
   3bd34:	sub	r3, r4, #95	; 0x5f
   3bd38:	clz	r3, r3
   3bd3c:	lsr	r3, r3, #5
   3bd40:	cmp	r0, #0
   3bd44:	orrne	r3, r3, #1
   3bd48:	cmp	r3, #0
   3bd4c:	beq	3bcd4 <__assert_fail@plt+0x296e0>
   3bd50:	mov	r0, #1
   3bd54:	pop	{r4, r5, r6, pc}
   3bd58:	tst	r2, #2
   3bd5c:	moveq	r0, #10
   3bd60:	movne	r0, #8
   3bd64:	pop	{r4, r5, r6, pc}
   3bd68:	push	{r4, r5, r6, lr}
   3bd6c:	mov	r4, r1
   3bd70:	mov	r1, r2
   3bd74:	ldr	r2, [r0, #88]	; 0x58
   3bd78:	mov	r5, r0
   3bd7c:	bl	3bc7c <__assert_fail@plt+0x29688>
   3bd80:	ldr	r2, [r4, #8]
   3bd84:	cmp	r2, #0
   3bd88:	ble	3be48 <__assert_fail@plt+0x29854>
   3bd8c:	ldr	r1, [r5, #84]	; 0x54
   3bd90:	ands	r3, r0, #1
   3bd94:	ldr	lr, [r4, #12]
   3bd98:	ldr	ip, [r1]
   3bd9c:	and	r1, r0, #2
   3bda0:	and	r0, r0, #8
   3bda4:	bne	3bef8 <__assert_fail@plt+0x29904>
   3bda8:	cmp	r1, #0
   3bdac:	ldr	r5, [pc, #700]	; 3c070 <__assert_fail@plt+0x29a7c>
   3bdb0:	sub	lr, lr, #4
   3bdb4:	beq	3be50 <__assert_fail@plt+0x2985c>
   3bdb8:	cmp	r0, #0
   3bdbc:	bne	3be24 <__assert_fail@plt+0x29830>
   3bdc0:	mov	r3, r0
   3bdc4:	b	3bdd0 <__assert_fail@plt+0x297dc>
   3bdc8:	cmp	r2, r3
   3bdcc:	beq	3be48 <__assert_fail@plt+0x29854>
   3bdd0:	ldr	r0, [lr, #4]!
   3bdd4:	add	r3, r3, #1
   3bdd8:	add	r1, ip, r0, lsl #3
   3bddc:	ldrb	r4, [r1, #4]
   3bde0:	ldr	r1, [r1, #4]
   3bde4:	cmp	r4, #2
   3bde8:	and	r1, r5, r1, lsr #8
   3bdec:	bne	3bdc8 <__assert_fail@plt+0x297d4>
   3bdf0:	cmp	r1, #0
   3bdf4:	popeq	{r4, r5, r6, pc}
   3bdf8:	tst	r1, #4
   3bdfc:	bne	3bdc8 <__assert_fail@plt+0x297d4>
   3be00:	tst	r1, #128	; 0x80
   3be04:	popeq	{r4, r5, r6, pc}
   3be08:	b	3bdc8 <__assert_fail@plt+0x297d4>
   3be0c:	cmp	r1, #0
   3be10:	popeq	{r4, r5, r6, pc}
   3be14:	tst	r1, #4
   3be18:	popeq	{r4, r5, r6, pc}
   3be1c:	cmp	r2, r3
   3be20:	beq	3be48 <__assert_fail@plt+0x29854>
   3be24:	ldr	r0, [lr, #4]!
   3be28:	add	r3, r3, #1
   3be2c:	add	r1, ip, r0, lsl #3
   3be30:	ldrb	r4, [r1, #4]
   3be34:	ldr	r1, [r1, #4]
   3be38:	cmp	r4, #2
   3be3c:	and	r1, r5, r1, lsr #8
   3be40:	bne	3be1c <__assert_fail@plt+0x29828>
   3be44:	b	3be0c <__assert_fail@plt+0x29818>
   3be48:	mov	r0, #0
   3be4c:	pop	{r4, r5, r6, pc}
   3be50:	cmp	r0, #0
   3be54:	beq	3bea4 <__assert_fail@plt+0x298b0>
   3be58:	mov	r3, r1
   3be5c:	b	3be68 <__assert_fail@plt+0x29874>
   3be60:	cmp	r2, r3
   3be64:	beq	3be48 <__assert_fail@plt+0x29854>
   3be68:	ldr	r0, [lr, #4]!
   3be6c:	add	r3, r3, #1
   3be70:	add	r1, ip, r0, lsl #3
   3be74:	ldrb	r4, [r1, #4]
   3be78:	ldr	r1, [r1, #4]
   3be7c:	cmp	r4, #2
   3be80:	and	r1, r5, r1, lsr #8
   3be84:	bne	3be60 <__assert_fail@plt+0x2986c>
   3be88:	cmp	r1, #0
   3be8c:	popeq	{r4, r5, r6, pc}
   3be90:	tst	r1, #4
   3be94:	bne	3be60 <__assert_fail@plt+0x2986c>
   3be98:	tst	r1, #32
   3be9c:	popeq	{r4, r5, r6, pc}
   3bea0:	b	3be60 <__assert_fail@plt+0x2986c>
   3bea4:	mov	r3, r0
   3bea8:	b	3beb8 <__assert_fail@plt+0x298c4>
   3beac:	add	r3, r3, #1
   3beb0:	cmp	r3, r2
   3beb4:	beq	3be48 <__assert_fail@plt+0x29854>
   3beb8:	ldr	r0, [lr, #4]!
   3bebc:	add	r1, ip, r0, lsl #3
   3bec0:	ldrb	r4, [r1, #4]
   3bec4:	ldr	r1, [r1, #4]
   3bec8:	cmp	r4, #2
   3becc:	and	r1, r5, r1, lsr #8
   3bed0:	bne	3beac <__assert_fail@plt+0x298b8>
   3bed4:	cmp	r1, #0
   3bed8:	popeq	{r4, r5, r6, pc}
   3bedc:	tst	r1, #4
   3bee0:	bne	3beac <__assert_fail@plt+0x298b8>
   3bee4:	tst	r1, #32
   3bee8:	bne	3beac <__assert_fail@plt+0x298b8>
   3beec:	tst	r1, #128	; 0x80
   3bef0:	bne	3beac <__assert_fail@plt+0x298b8>
   3bef4:	pop	{r4, r5, r6, pc}
   3bef8:	cmp	r1, #0
   3befc:	beq	3bf5c <__assert_fail@plt+0x29968>
   3bf00:	cmp	r0, #0
   3bf04:	ldr	r5, [pc, #356]	; 3c070 <__assert_fail@plt+0x29a7c>
   3bf08:	sub	lr, lr, #4
   3bf0c:	beq	3c020 <__assert_fail@plt+0x29a2c>
   3bf10:	mov	r1, #0
   3bf14:	b	3bf20 <__assert_fail@plt+0x2992c>
   3bf18:	cmp	r2, r1
   3bf1c:	beq	3be48 <__assert_fail@plt+0x29854>
   3bf20:	ldr	r0, [lr, #4]!
   3bf24:	add	r1, r1, #1
   3bf28:	add	r3, ip, r0, lsl #3
   3bf2c:	ldrb	r4, [r3, #4]
   3bf30:	ldr	r3, [r3, #4]
   3bf34:	cmp	r4, #2
   3bf38:	and	r3, r5, r3, lsr #8
   3bf3c:	bne	3bf18 <__assert_fail@plt+0x29924>
   3bf40:	cmp	r3, #0
   3bf44:	popeq	{r4, r5, r6, pc}
   3bf48:	tst	r3, #4
   3bf4c:	beq	3bfb8 <__assert_fail@plt+0x299c4>
   3bf50:	tst	r3, #8
   3bf54:	popeq	{r4, r5, r6, pc}
   3bf58:	b	3bf18 <__assert_fail@plt+0x29924>
   3bf5c:	cmp	r0, #0
   3bf60:	beq	3bfc4 <__assert_fail@plt+0x299d0>
   3bf64:	ldr	r5, [pc, #260]	; 3c070 <__assert_fail@plt+0x29a7c>
   3bf68:	sub	lr, lr, #4
   3bf6c:	mov	r3, r1
   3bf70:	b	3bf80 <__assert_fail@plt+0x2998c>
   3bf74:	add	r3, r3, #1
   3bf78:	cmp	r2, r3
   3bf7c:	beq	3be48 <__assert_fail@plt+0x29854>
   3bf80:	ldr	r0, [lr, #4]!
   3bf84:	add	r1, ip, r0, lsl #3
   3bf88:	ldrb	r4, [r1, #4]
   3bf8c:	ldr	r1, [r1, #4]
   3bf90:	cmp	r4, #2
   3bf94:	and	r1, r5, r1, lsr #8
   3bf98:	bne	3bf74 <__assert_fail@plt+0x29980>
   3bf9c:	cmp	r1, #0
   3bfa0:	popeq	{r4, r5, r6, pc}
   3bfa4:	tst	r1, #8
   3bfa8:	bne	3bf74 <__assert_fail@plt+0x29980>
   3bfac:	tst	r1, #32
   3bfb0:	popeq	{r4, r5, r6, pc}
   3bfb4:	b	3bf74 <__assert_fail@plt+0x29980>
   3bfb8:	tst	r3, #8
   3bfbc:	bne	3bf18 <__assert_fail@plt+0x29924>
   3bfc0:	pop	{r4, r5, r6, pc}
   3bfc4:	ldr	r4, [pc, #164]	; 3c070 <__assert_fail@plt+0x29a7c>
   3bfc8:	sub	lr, lr, #4
   3bfcc:	mov	r3, r0
   3bfd0:	b	3bfe0 <__assert_fail@plt+0x299ec>
   3bfd4:	add	r3, r3, #1
   3bfd8:	cmp	r2, r3
   3bfdc:	beq	3be48 <__assert_fail@plt+0x29854>
   3bfe0:	ldr	r0, [lr, #4]!
   3bfe4:	add	r1, ip, r0, lsl #3
   3bfe8:	ldrb	r5, [r1, #4]
   3bfec:	ldr	r1, [r1, #4]
   3bff0:	cmp	r5, #2
   3bff4:	and	r1, r4, r1, lsr #8
   3bff8:	bne	3bfd4 <__assert_fail@plt+0x299e0>
   3bffc:	cmp	r1, #0
   3c000:	beq	3c06c <__assert_fail@plt+0x29a78>
   3c004:	tst	r1, #8
   3c008:	bne	3bfd4 <__assert_fail@plt+0x299e0>
   3c00c:	tst	r1, #32
   3c010:	bne	3bfd4 <__assert_fail@plt+0x299e0>
   3c014:	tst	r1, #128	; 0x80
   3c018:	bne	3bfd4 <__assert_fail@plt+0x299e0>
   3c01c:	pop	{r4, r5, r6, pc}
   3c020:	mov	r3, r0
   3c024:	b	3c034 <__assert_fail@plt+0x29a40>
   3c028:	add	r3, r3, #1
   3c02c:	cmp	r2, r3
   3c030:	beq	3be48 <__assert_fail@plt+0x29854>
   3c034:	ldr	r0, [lr, #4]!
   3c038:	add	r1, ip, r0, lsl #3
   3c03c:	ldrb	r4, [r1, #4]
   3c040:	ldr	r1, [r1, #4]
   3c044:	cmp	r4, #2
   3c048:	and	r1, r5, r1, lsr #8
   3c04c:	bne	3c028 <__assert_fail@plt+0x29a34>
   3c050:	cmp	r1, #0
   3c054:	popeq	{r4, r5, r6, pc}
   3c058:	tst	r1, #8
   3c05c:	bne	3c028 <__assert_fail@plt+0x29a34>
   3c060:	tst	r1, #128	; 0x80
   3c064:	popeq	{r4, r5, r6, pc}
   3c068:	b	3c028 <__assert_fail@plt+0x29a34>
   3c06c:	pop	{r4, r5, r6, pc}
   3c070:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   3c074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c078:	mov	r4, r0
   3c07c:	ldr	r6, [r0, #24]
   3c080:	sub	sp, sp, #36	; 0x24
   3c084:	cmp	r6, r1
   3c088:	mov	r7, r1
   3c08c:	mov	r8, r2
   3c090:	suble	r5, r1, r6
   3c094:	ble	3c0f8 <__assert_fail@plt+0x29b04>
   3c098:	ldr	r3, [r0, #80]	; 0x50
   3c09c:	ldr	r1, [r0, #44]	; 0x2c
   3c0a0:	cmp	r3, #1
   3c0a4:	ldrb	r3, [r0, #75]	; 0x4b
   3c0a8:	movgt	r2, #0
   3c0ac:	strgt	r2, [r0, #16]
   3c0b0:	strgt	r2, [r0, #20]
   3c0b4:	tst	r8, #1
   3c0b8:	ldr	r2, [r0, #52]	; 0x34
   3c0bc:	moveq	r0, #6
   3c0c0:	movne	r0, #4
   3c0c4:	cmp	r3, #0
   3c0c8:	mov	r6, #0
   3c0cc:	str	r2, [r4, #56]	; 0x38
   3c0d0:	str	r6, [r4, #28]
   3c0d4:	str	r6, [r4, #24]
   3c0d8:	str	r6, [r4, #32]
   3c0dc:	strb	r6, [r4, #76]	; 0x4c
   3c0e0:	ldreq	r2, [r4]
   3c0e4:	moveq	r6, r3
   3c0e8:	mov	r5, r7
   3c0ec:	str	r0, [r4, #60]	; 0x3c
   3c0f0:	str	r1, [r4, #48]	; 0x30
   3c0f4:	streq	r2, [r4, #4]
   3c0f8:	cmp	r5, #0
   3c0fc:	ldreq	r3, [r4, #80]	; 0x50
   3c100:	beq	3c190 <__assert_fail@plt+0x29b9c>
   3c104:	ldr	r2, [r4, #32]
   3c108:	ldrb	r3, [r4, #76]	; 0x4c
   3c10c:	cmp	r5, r2
   3c110:	bge	3c260 <__assert_fail@plt+0x29c6c>
   3c114:	cmp	r3, #0
   3c118:	bne	3c37c <__assert_fail@plt+0x29d88>
   3c11c:	mov	r2, r8
   3c120:	sub	r1, r5, #1
   3c124:	mov	r0, r4
   3c128:	bl	3bc7c <__assert_fail@plt+0x29688>
   3c12c:	ldr	r3, [r4, #80]	; 0x50
   3c130:	cmp	r3, #1
   3c134:	str	r0, [r4, #60]	; 0x3c
   3c138:	ble	3c154 <__assert_fail@plt+0x29b60>
   3c13c:	ldr	r2, [r4, #28]
   3c140:	ldr	r0, [r4, #8]
   3c144:	sub	r2, r2, r5
   3c148:	add	r1, r0, r5, lsl #2
   3c14c:	lsl	r2, r2, #2
   3c150:	bl	11fb8 <memmove@plt>
   3c154:	ldrb	r3, [r4, #75]	; 0x4b
   3c158:	cmp	r3, #0
   3c15c:	bne	3c4bc <__assert_fail@plt+0x29ec8>
   3c160:	ldr	r0, [r4, #28]
   3c164:	ldr	r1, [r4, #32]
   3c168:	mov	r2, r3
   3c16c:	ldr	r3, [r4, #80]	; 0x50
   3c170:	sub	r0, r0, r5
   3c174:	sub	r1, r1, r5
   3c178:	str	r0, [r4, #28]
   3c17c:	str	r1, [r4, #32]
   3c180:	cmp	r2, #0
   3c184:	ldreq	r2, [r4, #4]
   3c188:	addeq	r2, r2, r5
   3c18c:	streq	r2, [r4, #4]
   3c190:	ldr	r2, [r4, #48]	; 0x30
   3c194:	ldr	r1, [r4, #56]	; 0x38
   3c198:	cmp	r3, #1
   3c19c:	sub	r3, r2, r5
   3c1a0:	sub	r5, r1, r5
   3c1a4:	str	r7, [r4, #24]
   3c1a8:	str	r3, [r4, #48]	; 0x30
   3c1ac:	str	r5, [r4, #56]	; 0x38
   3c1b0:	ble	3c1e8 <__assert_fail@plt+0x29bf4>
   3c1b4:	ldrb	r3, [r4, #72]	; 0x48
   3c1b8:	mov	r0, r4
   3c1bc:	cmp	r3, #0
   3c1c0:	bne	3c1d8 <__assert_fail@plt+0x29be4>
   3c1c4:	bl	3ae30 <__assert_fail@plt+0x2883c>
   3c1c8:	mov	r0, #0
   3c1cc:	str	r0, [r4, #40]	; 0x28
   3c1d0:	add	sp, sp, #36	; 0x24
   3c1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c1d8:	bl	3afd0 <__assert_fail@plt+0x289dc>
   3c1dc:	cmp	r0, #0
   3c1e0:	beq	3c1c8 <__assert_fail@plt+0x29bd4>
   3c1e4:	b	3c1d0 <__assert_fail@plt+0x29bdc>
   3c1e8:	ldrb	r2, [r4, #75]	; 0x4b
   3c1ec:	cmp	r2, #0
   3c1f0:	streq	r3, [r4, #28]
   3c1f4:	beq	3c1c8 <__assert_fail@plt+0x29bd4>
   3c1f8:	ldrb	r2, [r4, #72]	; 0x48
   3c1fc:	cmp	r2, #0
   3c200:	bne	3c730 <__assert_fail@plt+0x2a13c>
   3c204:	ldr	r0, [r4, #64]	; 0x40
   3c208:	cmp	r0, #0
   3c20c:	beq	3c1c8 <__assert_fail@plt+0x29bd4>
   3c210:	ldr	r1, [r4, #36]	; 0x24
   3c214:	ldr	r2, [r4, #28]
   3c218:	cmp	r3, r1
   3c21c:	movge	r3, r1
   3c220:	cmp	r3, r2
   3c224:	bgt	3c234 <__assert_fail@plt+0x29c40>
   3c228:	b	3c254 <__assert_fail@plt+0x29c60>
   3c22c:	ldr	r7, [r4, #24]
   3c230:	ldr	r0, [r4, #64]	; 0x40
   3c234:	ldm	r4, {r1, ip}
   3c238:	add	r1, r1, r2
   3c23c:	ldrb	r1, [r1, r7]
   3c240:	ldrb	r1, [r0, r1]
   3c244:	strb	r1, [ip, r2]
   3c248:	add	r2, r2, #1
   3c24c:	cmp	r3, r2
   3c250:	bne	3c22c <__assert_fail@plt+0x29c38>
   3c254:	str	r2, [r4, #28]
   3c258:	str	r2, [r4, #32]
   3c25c:	b	3c1c8 <__assert_fail@plt+0x29bd4>
   3c260:	ldr	r1, [r4, #28]
   3c264:	cmp	r3, #0
   3c268:	str	r1, [sp, #4]
   3c26c:	bne	3c674 <__assert_fail@plt+0x2a080>
   3c270:	ldr	r3, [r4, #80]	; 0x50
   3c274:	mov	r1, #0
   3c278:	cmp	r3, #1
   3c27c:	str	r1, [r4, #28]
   3c280:	ble	3c530 <__assert_fail@plt+0x29f3c>
   3c284:	ldrb	r1, [r4, #73]	; 0x49
   3c288:	cmp	r1, #0
   3c28c:	beq	3c2f4 <__assert_fail@plt+0x29d00>
   3c290:	ldr	ip, [r4]
   3c294:	sub	r3, r5, r3
   3c298:	add	r9, ip, r6
   3c29c:	add	r3, r9, r3
   3c2a0:	cmp	ip, r3
   3c2a4:	sub	r0, r5, #1
   3c2a8:	movcc	ip, r3
   3c2ac:	add	r1, r9, r0
   3c2b0:	cmp	r1, ip
   3c2b4:	bcc	3c2f4 <__assert_fail@plt+0x29d00>
   3c2b8:	ldrb	r3, [r9, r0]
   3c2bc:	and	r3, r3, #192	; 0xc0
   3c2c0:	cmp	r3, #128	; 0x80
   3c2c4:	subeq	r3, r1, #1
   3c2c8:	subeq	ip, ip, #1
   3c2cc:	beq	3c2e8 <__assert_fail@plt+0x29cf4>
   3c2d0:	b	3c584 <__assert_fail@plt+0x29f90>
   3c2d4:	ldrb	r0, [r1]
   3c2d8:	sub	r3, r3, #1
   3c2dc:	and	r0, r0, #192	; 0xc0
   3c2e0:	cmp	r0, #128	; 0x80
   3c2e4:	bne	3c584 <__assert_fail@plt+0x29f90>
   3c2e8:	cmp	ip, r3
   3c2ec:	mov	r1, r3
   3c2f0:	bne	3c2d4 <__assert_fail@plt+0x29ce0>
   3c2f4:	add	r6, r6, r2
   3c2f8:	cmp	r7, r6
   3c2fc:	ble	3c900 <__assert_fail@plt+0x2a30c>
   3c300:	add	sl, r4, #16
   3c304:	add	fp, sp, #24
   3c308:	b	3c318 <__assert_fail@plt+0x29d24>
   3c30c:	add	r6, r6, r3
   3c310:	cmp	r7, r6
   3c314:	ble	3c6a0 <__assert_fail@plt+0x2a0ac>
   3c318:	ldm	sl, {r0, r1}
   3c31c:	ldr	r9, [r4, #44]	; 0x2c
   3c320:	ldr	ip, [r4]
   3c324:	sub	r9, r9, r6
   3c328:	mov	r2, r9
   3c32c:	stm	fp, {r0, r1}
   3c330:	mov	r3, sl
   3c334:	add	r1, ip, r6
   3c338:	add	r0, sp, #16
   3c33c:	bl	3a03c <__assert_fail@plt+0x27a48>
   3c340:	sub	r2, r0, #1
   3c344:	cmn	r2, #4
   3c348:	mov	r3, r0
   3c34c:	ldrls	r9, [sp, #16]
   3c350:	bls	3c30c <__assert_fail@plt+0x29d18>
   3c354:	mov	r2, #0
   3c358:	cmp	r9, r2
   3c35c:	cmpne	r0, r2
   3c360:	ldm	fp, {r0, r1}
   3c364:	ldrne	r3, [r4]
   3c368:	ldrbne	r2, [r3, r6]
   3c36c:	mov	r3, #1
   3c370:	stm	sl, {r0, r1}
   3c374:	mov	r9, r2
   3c378:	b	3c30c <__assert_fail@plt+0x29d18>
   3c37c:	ldr	sl, [r4, #28]
   3c380:	ldr	r9, [r4, #12]
   3c384:	mov	r3, sl
   3c388:	mov	r2, #0
   3c38c:	b	3c3a0 <__assert_fail@plt+0x29dac>
   3c390:	ble	3c3c8 <__assert_fail@plt+0x29dd4>
   3c394:	add	r2, r6, #1
   3c398:	cmp	r2, r3
   3c39c:	bge	3c3c0 <__assert_fail@plt+0x29dcc>
   3c3a0:	add	r1, r2, r3
   3c3a4:	add	r1, r1, r1, lsr #31
   3c3a8:	asr	r6, r1, #1
   3c3ac:	ldr	r1, [r9, r6, lsl #2]
   3c3b0:	cmp	r5, r1
   3c3b4:	bge	3c390 <__assert_fail@plt+0x29d9c>
   3c3b8:	mov	r3, r6
   3c3bc:	b	3c398 <__assert_fail@plt+0x29da4>
   3c3c0:	cmp	r5, r1
   3c3c4:	addgt	r6, r6, #1
   3c3c8:	sub	fp, r6, #1
   3c3cc:	mov	r2, r8
   3c3d0:	mov	r1, fp
   3c3d4:	mov	r0, r4
   3c3d8:	bl	3bc7c <__assert_fail@plt+0x29688>
   3c3dc:	cmp	r5, sl
   3c3e0:	movge	r3, #0
   3c3e4:	movlt	r3, #1
   3c3e8:	cmp	r5, r6
   3c3ec:	movne	r3, #0
   3c3f0:	cmp	r3, #0
   3c3f4:	str	r0, [r4, #60]	; 0x3c
   3c3f8:	bne	3c5ec <__assert_fail@plt+0x29ff8>
   3c3fc:	ldr	r2, [r4, #44]	; 0x2c
   3c400:	ldr	r3, [r4, #52]	; 0x34
   3c404:	sub	r2, r2, r7
   3c408:	add	r2, r2, r5
   3c40c:	sub	r3, r3, r7
   3c410:	add	r3, r3, r5
   3c414:	str	r2, [r4, #48]	; 0x30
   3c418:	cmp	r6, #0
   3c41c:	mov	r2, #0
   3c420:	str	r3, [r4, #56]	; 0x38
   3c424:	strb	r2, [r4, #76]	; 0x4c
   3c428:	ble	3c460 <__assert_fail@plt+0x29e6c>
   3c42c:	sub	r3, r6, #-1073741823	; 0xc0000001
   3c430:	ldr	r2, [r9, r3, lsl #2]
   3c434:	add	r3, r9, r3, lsl #2
   3c438:	cmp	r5, r2
   3c43c:	beq	3c454 <__assert_fail@plt+0x29e60>
   3c440:	b	3c460 <__assert_fail@plt+0x29e6c>
   3c444:	ldr	r2, [r3, #-4]!
   3c448:	sub	fp, fp, #1
   3c44c:	cmp	r5, r2
   3c450:	bne	3c460 <__assert_fail@plt+0x29e6c>
   3c454:	cmp	fp, #0
   3c458:	mov	r6, fp
   3c45c:	bne	3c444 <__assert_fail@plt+0x29e50>
   3c460:	cmp	sl, r6
   3c464:	ble	3c4d8 <__assert_fail@plt+0x29ee4>
   3c468:	ldr	r1, [r4, #8]
   3c46c:	lsl	r0, r6, #2
   3c470:	add	r3, r1, r0
   3c474:	ldr	r2, [r1, r6, lsl #2]
   3c478:	cmn	r2, #1
   3c47c:	rsbeq	r1, r1, #4
   3c480:	beq	3c494 <__assert_fail@plt+0x29ea0>
   3c484:	b	3c4e0 <__assert_fail@plt+0x29eec>
   3c488:	ldr	r2, [r3, #4]!
   3c48c:	cmn	r2, #1
   3c490:	bne	3c4e0 <__assert_fail@plt+0x29eec>
   3c494:	add	r6, r6, #1
   3c498:	cmp	sl, r6
   3c49c:	add	r0, r1, r3
   3c4a0:	bne	3c488 <__assert_fail@plt+0x29e94>
   3c4a4:	mov	r2, #0
   3c4a8:	str	r2, [r4, #28]
   3c4ac:	str	r2, [r4, #32]
   3c4b0:	ldrb	r2, [r4, #75]	; 0x4b
   3c4b4:	ldr	r3, [r4, #80]	; 0x50
   3c4b8:	b	3c180 <__assert_fail@plt+0x29b8c>
   3c4bc:	ldr	r0, [r4, #4]
   3c4c0:	ldr	r2, [r4, #28]
   3c4c4:	add	r1, r0, r5
   3c4c8:	sub	r2, r2, r5
   3c4cc:	bl	11fb8 <memmove@plt>
   3c4d0:	ldrb	r3, [r4, #75]	; 0x4b
   3c4d4:	b	3c160 <__assert_fail@plt+0x29b6c>
   3c4d8:	beq	3c4a4 <__assert_fail@plt+0x29eb0>
   3c4dc:	lsl	r0, r6, #2
   3c4e0:	ldr	r2, [r9, r0]
   3c4e4:	sub	r2, r2, r5
   3c4e8:	cmp	r2, #0
   3c4ec:	str	r2, [r4, #28]
   3c4f0:	beq	3c4ac <__assert_fail@plt+0x29eb8>
   3c4f4:	ble	3c51c <__assert_fail@plt+0x29f28>
   3c4f8:	ldr	r1, [r4, #8]
   3c4fc:	mov	r3, #0
   3c500:	sub	r1, r1, #4
   3c504:	mvn	r0, #0
   3c508:	str	r0, [r1, #4]!
   3c50c:	ldr	r2, [r4, #28]
   3c510:	add	r3, r3, #1
   3c514:	cmp	r2, r3
   3c518:	bgt	3c508 <__assert_fail@plt+0x29f14>
   3c51c:	mov	r1, #255	; 0xff
   3c520:	ldr	r0, [r4, #4]
   3c524:	bl	12378 <memset@plt>
   3c528:	ldr	r2, [r4, #28]
   3c52c:	b	3c4ac <__assert_fail@plt+0x29eb8>
   3c530:	ldr	r2, [r4]
   3c534:	ldr	ip, [r4, #64]	; 0x40
   3c538:	add	r2, r2, r5
   3c53c:	add	r6, r2, r6
   3c540:	cmp	ip, #0
   3c544:	ldrb	r0, [r6, #-1]
   3c548:	str	r1, [r4, #32]
   3c54c:	ldrbne	r0, [ip, r0]
   3c550:	ldr	ip, [r4, #68]	; 0x44
   3c554:	and	r2, r0, #31
   3c558:	asr	r1, r0, #5
   3c55c:	ldr	r1, [ip, r1, lsl #2]
   3c560:	lsr	r2, r1, r2
   3c564:	ands	r1, r2, #1
   3c568:	movne	r1, #1
   3c56c:	bne	3c578 <__assert_fail@plt+0x29f84>
   3c570:	cmp	r0, #10
   3c574:	beq	3c82c <__assert_fail@plt+0x2a238>
   3c578:	ldrb	r2, [r4, #75]	; 0x4b
   3c57c:	str	r1, [r4, #60]	; 0x3c
   3c580:	b	3c180 <__assert_fail@plt+0x29b8c>
   3c584:	ldr	r2, [r4, #48]	; 0x30
   3c588:	ldr	r3, [r4, #64]	; 0x40
   3c58c:	add	r2, r9, r2
   3c590:	cmp	r3, #0
   3c594:	mov	r6, r1
   3c598:	sub	r2, r2, r1
   3c59c:	bne	3c840 <__assert_fail@plt+0x2a24c>
   3c5a0:	add	fp, sp, #24
   3c5a4:	mov	r3, fp
   3c5a8:	mov	sl, #0
   3c5ac:	add	r0, sp, #12
   3c5b0:	str	sl, [sp, #24]
   3c5b4:	str	sl, [sp, #28]
   3c5b8:	bl	3a03c <__assert_fail@plt+0x27a48>
   3c5bc:	add	r9, r9, r5
   3c5c0:	sub	r6, r9, r6
   3c5c4:	cmp	r0, r6
   3c5c8:	movcc	r3, #0
   3c5cc:	movcs	r3, #1
   3c5d0:	cmn	r0, #3
   3c5d4:	movhi	r3, #0
   3c5d8:	cmp	r3, sl
   3c5dc:	bne	3c6e0 <__assert_fail@plt+0x2a0ec>
   3c5e0:	ldr	r6, [r4, #24]
   3c5e4:	ldr	r2, [r4, #32]
   3c5e8:	b	3c2f4 <__assert_fail@plt+0x29d00>
   3c5ec:	ldr	r3, [r9, r6, lsl #2]
   3c5f0:	cmp	r5, r3
   3c5f4:	bne	3c3fc <__assert_fail@plt+0x29e08>
   3c5f8:	ldr	r0, [r4, #8]
   3c5fc:	sub	r2, sl, r5
   3c600:	lsl	r6, r5, #2
   3c604:	lsl	r2, r2, #2
   3c608:	add	r1, r0, r6
   3c60c:	bl	11fb8 <memmove@plt>
   3c610:	ldr	r0, [r4, #4]
   3c614:	ldr	r2, [r4, #28]
   3c618:	add	r1, r0, r5
   3c61c:	sub	r2, r2, r5
   3c620:	bl	11fb8 <memmove@plt>
   3c624:	ldr	r3, [r4, #28]
   3c628:	ldr	r2, [r4, #32]
   3c62c:	sub	r3, r3, r5
   3c630:	sub	r2, r2, r5
   3c634:	cmp	r3, #0
   3c638:	str	r3, [r4, #28]
   3c63c:	str	r2, [r4, #32]
   3c640:	ble	3c4b0 <__assert_fail@plt+0x29ebc>
   3c644:	ldr	r1, [r4, #12]
   3c648:	mov	r2, #0
   3c64c:	add	r0, r1, r6
   3c650:	sub	r1, r1, #4
   3c654:	ldr	r3, [r0], #4
   3c658:	add	r2, r2, #1
   3c65c:	sub	r3, r3, r5
   3c660:	str	r3, [r1, #4]!
   3c664:	ldr	r3, [r4, #28]
   3c668:	cmp	r3, r2
   3c66c:	bgt	3c654 <__assert_fail@plt+0x2a060>
   3c670:	b	3c4b0 <__assert_fail@plt+0x29ebc>
   3c674:	ldr	r1, [r4, #44]	; 0x2c
   3c678:	ldr	r3, [r4, #52]	; 0x34
   3c67c:	sub	r1, r1, r7
   3c680:	add	r1, r1, r5
   3c684:	sub	r3, r3, r7
   3c688:	add	r3, r3, r5
   3c68c:	str	r1, [r4, #48]	; 0x30
   3c690:	mov	r1, #0
   3c694:	str	r3, [r4, #56]	; 0x38
   3c698:	strb	r1, [r4, #76]	; 0x4c
   3c69c:	b	3c270 <__assert_fail@plt+0x29c7c>
   3c6a0:	sub	r6, r6, r7
   3c6a4:	cmn	r9, #1
   3c6a8:	str	r6, [r4, #28]
   3c6ac:	bne	3c6fc <__assert_fail@plt+0x2a108>
   3c6b0:	ldr	r3, [sp, #4]
   3c6b4:	mov	r2, r8
   3c6b8:	sub	r1, r3, #1
   3c6bc:	mov	r0, r4
   3c6c0:	bl	3bc7c <__assert_fail@plt+0x29688>
   3c6c4:	str	r0, [r4, #60]	; 0x3c
   3c6c8:	cmp	r6, #0
   3c6cc:	bne	3c7b4 <__assert_fail@plt+0x2a1c0>
   3c6d0:	ldrb	r2, [r4, #75]	; 0x4b
   3c6d4:	str	r6, [r4, #32]
   3c6d8:	ldr	r3, [r4, #80]	; 0x50
   3c6dc:	b	3c180 <__assert_fail@plt+0x29b8c>
   3c6e0:	ldr	r9, [sp, #12]
   3c6e4:	sub	r6, r0, r6
   3c6e8:	cmn	r9, #1
   3c6ec:	str	sl, [r4, #16]
   3c6f0:	str	sl, [r4, #20]
   3c6f4:	str	r6, [r4, #28]
   3c6f8:	beq	3c5e0 <__assert_fail@plt+0x29fec>
   3c6fc:	ldrb	r3, [r4, #78]	; 0x4e
   3c700:	cmp	r3, #0
   3c704:	bne	3c804 <__assert_fail@plt+0x2a210>
   3c708:	cmp	r9, #10
   3c70c:	movne	r3, #0
   3c710:	beq	3c71c <__assert_fail@plt+0x2a128>
   3c714:	str	r3, [r4, #60]	; 0x3c
   3c718:	b	3c6c8 <__assert_fail@plt+0x2a0d4>
   3c71c:	ldrb	r3, [r4, #77]	; 0x4d
   3c720:	cmp	r3, #0
   3c724:	movne	r3, #2
   3c728:	moveq	r3, #0
   3c72c:	b	3c714 <__assert_fail@plt+0x2a120>
   3c730:	ldr	r5, [r4, #36]	; 0x24
   3c734:	ldr	r6, [r4, #28]
   3c738:	cmp	r3, r5
   3c73c:	movlt	r5, r3
   3c740:	cmp	r5, r6
   3c744:	ble	3c90c <__assert_fail@plt+0x2a318>
   3c748:	bl	122a0 <__ctype_toupper_loc@plt>
   3c74c:	b	3c770 <__assert_fail@plt+0x2a17c>
   3c750:	ldr	r1, [r0]
   3c754:	ldr	r2, [r4, #4]
   3c758:	ldr	r3, [r1, r3, lsl #2]
   3c75c:	strb	r3, [r2, r6]
   3c760:	add	r6, r6, #1
   3c764:	cmp	r6, r5
   3c768:	beq	3c7a8 <__assert_fail@plt+0x2a1b4>
   3c76c:	ldr	r7, [r4, #24]
   3c770:	ldr	r3, [r4]
   3c774:	ldr	r2, [r4, #64]	; 0x40
   3c778:	add	r3, r3, r6
   3c77c:	cmp	r2, #0
   3c780:	ldrb	r3, [r3, r7]
   3c784:	beq	3c750 <__assert_fail@plt+0x2a15c>
   3c788:	ldrb	r3, [r2, r3]
   3c78c:	ldr	ip, [r0]
   3c790:	ldr	r1, [r4, #4]
   3c794:	ldr	r3, [ip, r3, lsl #2]
   3c798:	strb	r3, [r1, r6]
   3c79c:	add	r6, r6, #1
   3c7a0:	cmp	r5, r6
   3c7a4:	bne	3c76c <__assert_fail@plt+0x2a178>
   3c7a8:	str	r5, [r4, #28]
   3c7ac:	str	r5, [r4, #32]
   3c7b0:	b	3c1c8 <__assert_fail@plt+0x29bd4>
   3c7b4:	ble	3c7dc <__assert_fail@plt+0x2a1e8>
   3c7b8:	ldr	r2, [r4, #8]
   3c7bc:	mov	r3, #0
   3c7c0:	sub	r2, r2, #4
   3c7c4:	mvn	r1, #0
   3c7c8:	str	r1, [r2, #4]!
   3c7cc:	ldr	r6, [r4, #28]
   3c7d0:	add	r3, r3, #1
   3c7d4:	cmp	r6, r3
   3c7d8:	bgt	3c7c8 <__assert_fail@plt+0x2a1d4>
   3c7dc:	ldrb	r2, [r4, #75]	; 0x4b
   3c7e0:	cmp	r2, #0
   3c7e4:	beq	3c6d4 <__assert_fail@plt+0x2a0e0>
   3c7e8:	mov	r2, r6
   3c7ec:	mov	r1, #255	; 0xff
   3c7f0:	ldr	r0, [r4, #4]
   3c7f4:	bl	12378 <memset@plt>
   3c7f8:	ldrb	r2, [r4, #75]	; 0x4b
   3c7fc:	ldr	r6, [r4, #28]
   3c800:	b	3c6d4 <__assert_fail@plt+0x2a0e0>
   3c804:	mov	r0, r9
   3c808:	bl	12354 <iswalnum@plt>
   3c80c:	cmp	r9, #95	; 0x5f
   3c810:	clz	r0, r0
   3c814:	lsr	r0, r0, #5
   3c818:	moveq	r0, #0
   3c81c:	cmp	r0, #0
   3c820:	moveq	r3, #1
   3c824:	bne	3c708 <__assert_fail@plt+0x2a114>
   3c828:	b	3c714 <__assert_fail@plt+0x2a120>
   3c82c:	ldrb	r1, [r4, #77]	; 0x4d
   3c830:	cmp	r1, #0
   3c834:	movne	r1, #2
   3c838:	moveq	r1, #0
   3c83c:	b	3c578 <__assert_fail@plt+0x29f84>
   3c840:	cmp	r2, #6
   3c844:	movlt	r1, r2
   3c848:	movge	r1, #6
   3c84c:	subs	r0, r1, #1
   3c850:	bmi	3c8f8 <__assert_fail@plt+0x2a304>
   3c854:	ldrb	lr, [r6, r0]
   3c858:	add	ip, sp, #32
   3c85c:	add	ip, ip, r0
   3c860:	sub	r0, r1, #2
   3c864:	ldrb	lr, [r3, lr]
   3c868:	cmn	r0, #1
   3c86c:	strb	lr, [ip, #-16]
   3c870:	beq	3c8f8 <__assert_fail@plt+0x2a304>
   3c874:	ldrb	lr, [r6, r0]
   3c878:	add	ip, sp, #32
   3c87c:	add	ip, ip, r0
   3c880:	sub	r0, r1, #3
   3c884:	ldrb	lr, [r3, lr]
   3c888:	cmn	r0, #1
   3c88c:	strb	lr, [ip, #-16]
   3c890:	beq	3c8f8 <__assert_fail@plt+0x2a304>
   3c894:	ldrb	lr, [r6, r0]
   3c898:	add	ip, sp, #32
   3c89c:	add	ip, ip, r0
   3c8a0:	sub	r0, r1, #4
   3c8a4:	ldrb	lr, [r3, lr]
   3c8a8:	cmn	r0, #1
   3c8ac:	strb	lr, [ip, #-16]
   3c8b0:	beq	3c8f8 <__assert_fail@plt+0x2a304>
   3c8b4:	ldrb	lr, [r6, r0]
   3c8b8:	add	ip, sp, #32
   3c8bc:	add	ip, ip, r0
   3c8c0:	sub	r0, r1, #5
   3c8c4:	ldrb	lr, [r3, lr]
   3c8c8:	cmn	r0, #1
   3c8cc:	strb	lr, [ip, #-16]
   3c8d0:	beq	3c8f8 <__assert_fail@plt+0x2a304>
   3c8d4:	ldrb	ip, [r6, r0]
   3c8d8:	add	lr, sp, #32
   3c8dc:	cmp	r1, #6
   3c8e0:	add	r0, lr, r0
   3c8e4:	ldrb	r1, [r3, ip]
   3c8e8:	strb	r1, [r0, #-16]
   3c8ec:	ldrbeq	r1, [r6]
   3c8f0:	ldrbeq	r3, [r3, r1]
   3c8f4:	strbeq	r3, [sp, #16]
   3c8f8:	add	r1, sp, #16
   3c8fc:	b	3c5a0 <__assert_fail@plt+0x29fac>
   3c900:	sub	r6, r6, r7
   3c904:	str	r6, [r4, #28]
   3c908:	b	3c6b0 <__assert_fail@plt+0x2a0bc>
   3c90c:	mov	r5, r6
   3c910:	b	3c7a8 <__assert_fail@plt+0x2a1b4>
   3c914:	ldr	ip, [r1]
   3c918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c91c:	cmp	ip, #0
   3c920:	sub	sp, sp, #20
   3c924:	ldr	r6, [r0, #84]	; 0x54
   3c928:	ble	3c9f4 <__assert_fail@plt+0x2a400>
   3c92c:	mov	r7, r2
   3c930:	str	r3, [sp, #8]
   3c934:	mov	r8, r0
   3c938:	str	r1, [sp, #4]
   3c93c:	mov	r4, #0
   3c940:	mov	r2, #24
   3c944:	mov	r9, #1
   3c948:	b	3c954 <__assert_fail@plt+0x2a360>
   3c94c:	cmp	r4, ip
   3c950:	bge	3c9f4 <__assert_fail@plt+0x2a400>
   3c954:	ldr	r1, [r7]
   3c958:	ldr	r3, [r6]
   3c95c:	ldr	r5, [r1, r4, lsl #2]
   3c960:	add	r4, r4, #1
   3c964:	add	r1, r3, r5, lsl #3
   3c968:	ldrb	r1, [r1, #4]
   3c96c:	cmp	r1, #8
   3c970:	bne	3c94c <__assert_fail@plt+0x2a358>
   3c974:	ldr	r3, [r3, r5, lsl #3]
   3c978:	cmp	r3, #31
   3c97c:	bgt	3c94c <__assert_fail@plt+0x2a358>
   3c980:	ldr	r1, [r6, #80]	; 0x50
   3c984:	lsr	r3, r1, r3
   3c988:	tst	r3, #1
   3c98c:	beq	3c94c <__assert_fail@plt+0x2a358>
   3c990:	ldr	sl, [r8, #124]	; 0x7c
   3c994:	ldr	r3, [r8, #128]	; 0x80
   3c998:	ldr	fp, [r8, #132]	; 0x84
   3c99c:	cmp	r3, sl
   3c9a0:	beq	3ca08 <__assert_fail@plt+0x2a414>
   3c9a4:	mov	r1, r2
   3c9a8:	mov	r0, r9
   3c9ac:	str	r2, [sp, #12]
   3c9b0:	bl	37128 <__assert_fail@plt+0x24b34>
   3c9b4:	ldr	r3, [r8, #124]	; 0x7c
   3c9b8:	ldr	r1, [r8, #132]	; 0x84
   3c9bc:	add	ip, r3, #1
   3c9c0:	str	r0, [fp, sl, lsl #2]
   3c9c4:	ldr	r3, [r1, r3, lsl #2]
   3c9c8:	cmp	r3, #0
   3c9cc:	beq	3ca00 <__assert_fail@plt+0x2a40c>
   3c9d0:	ldr	r2, [sp, #8]
   3c9d4:	str	r5, [r3, #4]
   3c9d8:	str	ip, [r8, #124]	; 0x7c
   3c9dc:	str	r2, [r3]
   3c9e0:	ldr	r3, [sp, #4]
   3c9e4:	ldr	r2, [sp, #12]
   3c9e8:	ldr	ip, [r3]
   3c9ec:	cmp	r4, ip
   3c9f0:	blt	3c954 <__assert_fail@plt+0x2a360>
   3c9f4:	mov	r0, #0
   3c9f8:	add	sp, sp, #20
   3c9fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ca00:	mov	r0, #12
   3ca04:	b	3c9f8 <__assert_fail@plt+0x2a404>
   3ca08:	mov	r0, fp
   3ca0c:	lsl	r1, sl, #3
   3ca10:	str	r2, [sp, #12]
   3ca14:	bl	3aacc <__assert_fail@plt+0x284d8>
   3ca18:	lsl	r3, sl, #1
   3ca1c:	ldr	r2, [sp, #12]
   3ca20:	subs	fp, r0, #0
   3ca24:	beq	3ca00 <__assert_fail@plt+0x2a40c>
   3ca28:	ldr	sl, [r8, #124]	; 0x7c
   3ca2c:	str	fp, [r8, #132]	; 0x84
   3ca30:	str	r3, [r8, #128]	; 0x80
   3ca34:	b	3c9a4 <__assert_fail@plt+0x2a3b0>
   3ca38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ca3c:	mov	r6, r0
   3ca40:	ldr	ip, [sp, #40]	; 0x28
   3ca44:	mov	r5, r1
   3ca48:	tst	ip, #4194304	; 0x400000
   3ca4c:	mov	sl, r2
   3ca50:	mov	r7, r3
   3ca54:	ldr	r9, [sp, #32]
   3ca58:	beq	3ca78 <__assert_fail@plt+0x2a484>
   3ca5c:	ldr	r1, [pc, #2196]	; 3d2f8 <__assert_fail@plt+0x2ad04>
   3ca60:	ldr	r0, [sp, #36]	; 0x24
   3ca64:	bl	11f40 <strcmp@plt>
   3ca68:	cmp	r0, #0
   3ca6c:	bne	3cb58 <__assert_fail@plt+0x2a564>
   3ca70:	ldr	r3, [pc, #2180]	; 3d2fc <__assert_fail@plt+0x2ad08>
   3ca74:	str	r3, [sp, #36]	; 0x24
   3ca78:	ldr	r4, [r7]
   3ca7c:	ldr	r3, [r9]
   3ca80:	cmp	r3, r4
   3ca84:	beq	3cb88 <__assert_fail@plt+0x2a594>
   3ca88:	ldr	r8, [sl]
   3ca8c:	add	r3, r4, #1
   3ca90:	str	r3, [r7]
   3ca94:	ldr	r0, [sp, #36]	; 0x24
   3ca98:	bl	11ee0 <wctype@plt>
   3ca9c:	ldr	r1, [pc, #2140]	; 3d300 <__assert_fail@plt+0x2ad0c>
   3caa0:	str	r0, [r8, r4, lsl #2]
   3caa4:	ldr	r0, [sp, #36]	; 0x24
   3caa8:	bl	11f40 <strcmp@plt>
   3caac:	subs	r4, r0, #0
   3cab0:	beq	3cb10 <__assert_fail@plt+0x2a51c>
   3cab4:	ldr	r1, [pc, #2120]	; 3d304 <__assert_fail@plt+0x2ad10>
   3cab8:	ldr	r0, [sp, #36]	; 0x24
   3cabc:	bl	11f40 <strcmp@plt>
   3cac0:	subs	r4, r0, #0
   3cac4:	bne	3cbb4 <__assert_fail@plt+0x2a5c0>
   3cac8:	cmp	r6, #0
   3cacc:	bne	3cd68 <__assert_fail@plt+0x2a774>
   3cad0:	bl	122b8 <__ctype_b_loc@plt>
   3cad4:	mov	ip, #1
   3cad8:	ldr	r3, [r0]
   3cadc:	sub	r3, r3, #2
   3cae0:	ldrh	r2, [r3, #2]!
   3cae4:	asr	r1, r4, #5
   3cae8:	and	r0, r4, #31
   3caec:	tst	r2, #2
   3caf0:	add	r4, r4, #1
   3caf4:	ldrne	r2, [r5, r1, lsl #2]
   3caf8:	orrne	r2, r2, ip, lsl r0
   3cafc:	strne	r2, [r5, r1, lsl #2]
   3cb00:	cmp	r4, #256	; 0x100
   3cb04:	bne	3cae0 <__assert_fail@plt+0x2a4ec>
   3cb08:	mov	r0, #0
   3cb0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3cb10:	cmp	r6, #0
   3cb14:	bne	3ccd4 <__assert_fail@plt+0x2a6e0>
   3cb18:	bl	122b8 <__ctype_b_loc@plt>
   3cb1c:	mov	lr, #1
   3cb20:	ldr	r3, [r0]
   3cb24:	sub	r3, r3, #2
   3cb28:	ldrh	r0, [r3, #2]!
   3cb2c:	asr	r2, r4, #5
   3cb30:	and	ip, r4, #31
   3cb34:	tst	r0, #8
   3cb38:	add	r4, r4, #1
   3cb3c:	ldrne	r1, [r5, r2, lsl #2]
   3cb40:	orrne	r1, r1, lr, lsl ip
   3cb44:	strne	r1, [r5, r2, lsl #2]
   3cb48:	cmp	r4, #256	; 0x100
   3cb4c:	bne	3cb28 <__assert_fail@plt+0x2a534>
   3cb50:	mov	r0, #0
   3cb54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3cb58:	ldr	r0, [sp, #36]	; 0x24
   3cb5c:	ldr	r1, [pc, #1956]	; 3d308 <__assert_fail@plt+0x2ad14>
   3cb60:	bl	11f40 <strcmp@plt>
   3cb64:	ldr	r3, [pc, #1936]	; 3d2fc <__assert_fail@plt+0x2ad08>
   3cb68:	ldr	r2, [sp, #36]	; 0x24
   3cb6c:	ldr	r4, [r7]
   3cb70:	cmp	r0, #0
   3cb74:	moveq	r2, r3
   3cb78:	ldr	r3, [r9]
   3cb7c:	str	r2, [sp, #36]	; 0x24
   3cb80:	cmp	r3, r4
   3cb84:	bne	3ca88 <__assert_fail@plt+0x2a494>
   3cb88:	lsl	r4, r4, #1
   3cb8c:	add	r4, r4, #1
   3cb90:	ldr	r0, [sl]
   3cb94:	lsl	r1, r4, #2
   3cb98:	bl	3aacc <__assert_fail@plt+0x284d8>
   3cb9c:	subs	r8, r0, #0
   3cba0:	beq	3ce60 <__assert_fail@plt+0x2a86c>
   3cba4:	str	r8, [sl]
   3cba8:	str	r4, [r9]
   3cbac:	ldr	r4, [r7]
   3cbb0:	b	3ca8c <__assert_fail@plt+0x2a498>
   3cbb4:	ldr	r1, [pc, #1868]	; 3d308 <__assert_fail@plt+0x2ad14>
   3cbb8:	ldr	r0, [sp, #36]	; 0x24
   3cbbc:	bl	11f40 <strcmp@plt>
   3cbc0:	subs	r4, r0, #0
   3cbc4:	beq	3cc20 <__assert_fail@plt+0x2a62c>
   3cbc8:	ldr	r1, [pc, #1852]	; 3d30c <__assert_fail@plt+0x2ad18>
   3cbcc:	ldr	r0, [sp, #36]	; 0x24
   3cbd0:	bl	11f40 <strcmp@plt>
   3cbd4:	subs	r4, r0, #0
   3cbd8:	bne	3cc68 <__assert_fail@plt+0x2a674>
   3cbdc:	cmp	r6, #0
   3cbe0:	bne	3cec0 <__assert_fail@plt+0x2a8cc>
   3cbe4:	bl	122b8 <__ctype_b_loc@plt>
   3cbe8:	mov	ip, #1
   3cbec:	ldr	r3, [r0]
   3cbf0:	sub	r3, r3, #2
   3cbf4:	ldrh	r2, [r3, #2]!
   3cbf8:	asr	r1, r4, #5
   3cbfc:	and	r0, r4, #31
   3cc00:	tst	r2, #8192	; 0x2000
   3cc04:	add	r4, r4, #1
   3cc08:	ldrne	r2, [r5, r1, lsl #2]
   3cc0c:	orrne	r2, r2, ip, lsl r0
   3cc10:	strne	r2, [r5, r1, lsl #2]
   3cc14:	cmp	r4, #256	; 0x100
   3cc18:	bne	3cbf4 <__assert_fail@plt+0x2a600>
   3cc1c:	b	3cb08 <__assert_fail@plt+0x2a514>
   3cc20:	cmp	r6, #0
   3cc24:	bne	3ce10 <__assert_fail@plt+0x2a81c>
   3cc28:	bl	122b8 <__ctype_b_loc@plt>
   3cc2c:	mov	ip, #1
   3cc30:	ldr	r3, [r0]
   3cc34:	sub	r3, r3, #2
   3cc38:	ldrh	r2, [r3, #2]!
   3cc3c:	asr	r1, r4, #5
   3cc40:	and	r0, r4, #31
   3cc44:	tst	r2, #512	; 0x200
   3cc48:	add	r4, r4, #1
   3cc4c:	ldrne	r2, [r5, r1, lsl #2]
   3cc50:	orrne	r2, r2, ip, lsl r0
   3cc54:	strne	r2, [r5, r1, lsl #2]
   3cc58:	cmp	r4, #256	; 0x100
   3cc5c:	bne	3cc38 <__assert_fail@plt+0x2a644>
   3cc60:	mov	r0, #0
   3cc64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3cc68:	ldr	r1, [pc, #1676]	; 3d2fc <__assert_fail@plt+0x2ad08>
   3cc6c:	ldr	r0, [sp, #36]	; 0x24
   3cc70:	bl	11f40 <strcmp@plt>
   3cc74:	subs	r4, r0, #0
   3cc78:	beq	3cd24 <__assert_fail@plt+0x2a730>
   3cc7c:	ldr	r1, [pc, #1676]	; 3d310 <__assert_fail@plt+0x2ad1c>
   3cc80:	ldr	r0, [sp, #36]	; 0x24
   3cc84:	bl	11f40 <strcmp@plt>
   3cc88:	subs	r4, r0, #0
   3cc8c:	bne	3cdb8 <__assert_fail@plt+0x2a7c4>
   3cc90:	cmp	r6, #0
   3cc94:	bne	3d0b0 <__assert_fail@plt+0x2aabc>
   3cc98:	bl	122b8 <__ctype_b_loc@plt>
   3cc9c:	mov	ip, #1
   3cca0:	ldr	r3, [r0]
   3cca4:	sub	r3, r3, #2
   3cca8:	ldrh	r1, [r3, #2]!
   3ccac:	asr	r2, r4, #5
   3ccb0:	and	r0, r4, #31
   3ccb4:	tst	r1, #2048	; 0x800
   3ccb8:	add	r4, r4, #1
   3ccbc:	ldrne	r1, [r5, r2, lsl #2]
   3ccc0:	orrne	r1, r1, ip, lsl r0
   3ccc4:	strne	r1, [r5, r2, lsl #2]
   3ccc8:	cmp	r4, #256	; 0x100
   3cccc:	bne	3cca8 <__assert_fail@plt+0x2a6b4>
   3ccd0:	b	3cb08 <__assert_fail@plt+0x2a514>
   3ccd4:	bl	122b8 <__ctype_b_loc@plt>
   3ccd8:	mov	r4, #1
   3ccdc:	mov	r1, r6
   3cce0:	ldr	r3, [r0]
   3cce4:	add	ip, r3, #508	; 0x1fc
   3cce8:	add	ip, ip, #2
   3ccec:	sub	r3, r3, #2
   3ccf0:	ldrh	r2, [r3, #2]!
   3ccf4:	tst	r2, #8
   3ccf8:	beq	3cd14 <__assert_fail@plt+0x2a720>
   3ccfc:	ldrb	r2, [r1]
   3cd00:	and	lr, r2, #31
   3cd04:	asr	r2, r2, #5
   3cd08:	ldr	r0, [r5, r2, lsl #2]
   3cd0c:	orr	r0, r0, r4, lsl lr
   3cd10:	str	r0, [r5, r2, lsl #2]
   3cd14:	cmp	ip, r3
   3cd18:	add	r1, r1, #1
   3cd1c:	bne	3ccf0 <__assert_fail@plt+0x2a6fc>
   3cd20:	b	3cb08 <__assert_fail@plt+0x2a514>
   3cd24:	cmp	r6, #0
   3cd28:	bne	3cf10 <__assert_fail@plt+0x2a91c>
   3cd2c:	bl	122b8 <__ctype_b_loc@plt>
   3cd30:	mov	ip, #1
   3cd34:	ldr	r3, [r0]
   3cd38:	sub	r3, r3, #2
   3cd3c:	ldrh	r2, [r3, #2]!
   3cd40:	asr	r1, r4, #5
   3cd44:	and	r0, r4, #31
   3cd48:	tst	r2, #1024	; 0x400
   3cd4c:	add	r4, r4, #1
   3cd50:	ldrne	r2, [r5, r1, lsl #2]
   3cd54:	orrne	r2, r2, ip, lsl r0
   3cd58:	strne	r2, [r5, r1, lsl #2]
   3cd5c:	cmp	r4, #256	; 0x100
   3cd60:	bne	3cd3c <__assert_fail@plt+0x2a748>
   3cd64:	b	3cb08 <__assert_fail@plt+0x2a514>
   3cd68:	bl	122b8 <__ctype_b_loc@plt>
   3cd6c:	mov	r4, #1
   3cd70:	mov	r1, r6
   3cd74:	ldr	r3, [r0]
   3cd78:	add	ip, r3, #508	; 0x1fc
   3cd7c:	add	ip, ip, #2
   3cd80:	sub	r3, r3, #2
   3cd84:	ldrh	r2, [r3, #2]!
   3cd88:	tst	r2, #2
   3cd8c:	beq	3cda8 <__assert_fail@plt+0x2a7b4>
   3cd90:	ldrb	r2, [r1]
   3cd94:	and	lr, r2, #31
   3cd98:	asr	r2, r2, #5
   3cd9c:	ldr	r0, [r5, r2, lsl #2]
   3cda0:	orr	r0, r0, r4, lsl lr
   3cda4:	str	r0, [r5, r2, lsl #2]
   3cda8:	cmp	ip, r3
   3cdac:	add	r1, r1, #1
   3cdb0:	bne	3cd84 <__assert_fail@plt+0x2a790>
   3cdb4:	b	3cb08 <__assert_fail@plt+0x2a514>
   3cdb8:	ldr	r1, [pc, #1364]	; 3d314 <__assert_fail@plt+0x2ad20>
   3cdbc:	ldr	r0, [sp, #36]	; 0x24
   3cdc0:	bl	11f40 <strcmp@plt>
   3cdc4:	subs	r4, r0, #0
   3cdc8:	bne	3ce68 <__assert_fail@plt+0x2a874>
   3cdcc:	cmp	r6, #0
   3cdd0:	bne	3d100 <__assert_fail@plt+0x2ab0c>
   3cdd4:	bl	122b8 <__ctype_b_loc@plt>
   3cdd8:	mov	ip, #1
   3cddc:	ldr	r3, [r0]
   3cde0:	sub	r3, r3, #2
   3cde4:	ldrh	r2, [r3, #2]!
   3cde8:	asr	r1, r4, #5
   3cdec:	and	r0, r4, #31
   3cdf0:	tst	r2, #16384	; 0x4000
   3cdf4:	add	r4, r4, #1
   3cdf8:	ldrne	r2, [r5, r1, lsl #2]
   3cdfc:	orrne	r2, r2, ip, lsl r0
   3ce00:	strne	r2, [r5, r1, lsl #2]
   3ce04:	cmp	r4, #256	; 0x100
   3ce08:	bne	3cde4 <__assert_fail@plt+0x2a7f0>
   3ce0c:	b	3cb08 <__assert_fail@plt+0x2a514>
   3ce10:	bl	122b8 <__ctype_b_loc@plt>
   3ce14:	mov	r4, #1
   3ce18:	mov	r1, r6
   3ce1c:	ldr	r3, [r0]
   3ce20:	add	ip, r3, #508	; 0x1fc
   3ce24:	add	ip, ip, #2
   3ce28:	sub	r3, r3, #2
   3ce2c:	ldrh	r2, [r3, #2]!
   3ce30:	tst	r2, #512	; 0x200
   3ce34:	beq	3ce50 <__assert_fail@plt+0x2a85c>
   3ce38:	ldrb	r2, [r1]
   3ce3c:	and	lr, r2, #31
   3ce40:	asr	r2, r2, #5
   3ce44:	ldr	r0, [r5, r2, lsl #2]
   3ce48:	orr	r0, r0, r4, lsl lr
   3ce4c:	str	r0, [r5, r2, lsl #2]
   3ce50:	cmp	ip, r3
   3ce54:	add	r1, r1, #1
   3ce58:	bne	3ce2c <__assert_fail@plt+0x2a838>
   3ce5c:	b	3cb08 <__assert_fail@plt+0x2a514>
   3ce60:	mov	r0, #12
   3ce64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ce68:	ldr	r1, [pc, #1160]	; 3d2f8 <__assert_fail@plt+0x2ad04>
   3ce6c:	ldr	r0, [sp, #36]	; 0x24
   3ce70:	bl	11f40 <strcmp@plt>
   3ce74:	subs	r4, r0, #0
   3ce78:	bne	3cf60 <__assert_fail@plt+0x2a96c>
   3ce7c:	cmp	r6, #0
   3ce80:	bne	3cfb8 <__assert_fail@plt+0x2a9c4>
   3ce84:	bl	122b8 <__ctype_b_loc@plt>
   3ce88:	mov	ip, #1
   3ce8c:	ldr	r3, [r0]
   3ce90:	sub	r3, r3, #2
   3ce94:	ldrh	r2, [r3, #2]!
   3ce98:	asr	r1, r4, #5
   3ce9c:	and	r0, r4, #31
   3cea0:	tst	r2, #256	; 0x100
   3cea4:	add	r4, r4, #1
   3cea8:	ldrne	r2, [r5, r1, lsl #2]
   3ceac:	orrne	r2, r2, ip, lsl r0
   3ceb0:	strne	r2, [r5, r1, lsl #2]
   3ceb4:	cmp	r4, #256	; 0x100
   3ceb8:	bne	3ce94 <__assert_fail@plt+0x2a8a0>
   3cebc:	b	3cb08 <__assert_fail@plt+0x2a514>
   3cec0:	bl	122b8 <__ctype_b_loc@plt>
   3cec4:	mov	r4, #1
   3cec8:	mov	r1, r6
   3cecc:	ldr	r3, [r0]
   3ced0:	add	ip, r3, #508	; 0x1fc
   3ced4:	add	ip, ip, #2
   3ced8:	sub	r3, r3, #2
   3cedc:	ldrh	r2, [r3, #2]!
   3cee0:	tst	r2, #8192	; 0x2000
   3cee4:	beq	3cf00 <__assert_fail@plt+0x2a90c>
   3cee8:	ldrb	r2, [r1]
   3ceec:	and	lr, r2, #31
   3cef0:	asr	r2, r2, #5
   3cef4:	ldr	r0, [r5, r2, lsl #2]
   3cef8:	orr	r0, r0, r4, lsl lr
   3cefc:	str	r0, [r5, r2, lsl #2]
   3cf00:	cmp	ip, r3
   3cf04:	add	r1, r1, #1
   3cf08:	bne	3cedc <__assert_fail@plt+0x2a8e8>
   3cf0c:	b	3cb08 <__assert_fail@plt+0x2a514>
   3cf10:	bl	122b8 <__ctype_b_loc@plt>
   3cf14:	mov	r4, #1
   3cf18:	mov	r1, r6
   3cf1c:	ldr	r3, [r0]
   3cf20:	add	ip, r3, #508	; 0x1fc
   3cf24:	add	ip, ip, #2
   3cf28:	sub	r3, r3, #2
   3cf2c:	ldrh	r2, [r3, #2]!
   3cf30:	tst	r2, #1024	; 0x400
   3cf34:	beq	3cf50 <__assert_fail@plt+0x2a95c>
   3cf38:	ldrb	r2, [r1]
   3cf3c:	and	lr, r2, #31
   3cf40:	asr	r2, r2, #5
   3cf44:	ldr	r0, [r5, r2, lsl #2]
   3cf48:	orr	r0, r0, r4, lsl lr
   3cf4c:	str	r0, [r5, r2, lsl #2]
   3cf50:	cmp	ip, r3
   3cf54:	add	r1, r1, #1
   3cf58:	bne	3cf2c <__assert_fail@plt+0x2a938>
   3cf5c:	b	3cb08 <__assert_fail@plt+0x2a514>
   3cf60:	ldr	r1, [pc, #944]	; 3d318 <__assert_fail@plt+0x2ad24>
   3cf64:	ldr	r0, [sp, #36]	; 0x24
   3cf68:	bl	11f40 <strcmp@plt>
   3cf6c:	subs	r4, r0, #0
   3cf70:	bne	3d058 <__assert_fail@plt+0x2aa64>
   3cf74:	cmp	r6, #0
   3cf78:	bne	3d008 <__assert_fail@plt+0x2aa14>
   3cf7c:	bl	122b8 <__ctype_b_loc@plt>
   3cf80:	mov	ip, #1
   3cf84:	ldr	r3, [r0]
   3cf88:	sub	r3, r3, #2
   3cf8c:	ldrh	r2, [r3, #2]!
   3cf90:	asr	r1, r4, #5
   3cf94:	and	r0, r4, #31
   3cf98:	tst	r2, #1
   3cf9c:	add	r4, r4, #1
   3cfa0:	ldrne	r2, [r5, r1, lsl #2]
   3cfa4:	orrne	r2, r2, ip, lsl r0
   3cfa8:	strne	r2, [r5, r1, lsl #2]
   3cfac:	cmp	r4, #256	; 0x100
   3cfb0:	bne	3cf8c <__assert_fail@plt+0x2a998>
   3cfb4:	b	3cb08 <__assert_fail@plt+0x2a514>
   3cfb8:	bl	122b8 <__ctype_b_loc@plt>
   3cfbc:	mov	r1, r6
   3cfc0:	mov	lr, #1
   3cfc4:	ldr	r3, [r0]
   3cfc8:	add	r0, r3, #508	; 0x1fc
   3cfcc:	add	r0, r0, #2
   3cfd0:	sub	r3, r3, #2
   3cfd4:	ldrh	r2, [r3, #2]!
   3cfd8:	tst	r2, #256	; 0x100
   3cfdc:	beq	3cff8 <__assert_fail@plt+0x2aa04>
   3cfe0:	ldrb	r2, [r1]
   3cfe4:	and	r4, r2, #31
   3cfe8:	asr	r2, r2, #5
   3cfec:	ldr	ip, [r5, r2, lsl #2]
   3cff0:	orr	ip, ip, lr, lsl r4
   3cff4:	str	ip, [r5, r2, lsl #2]
   3cff8:	cmp	r0, r3
   3cffc:	add	r1, r1, #1
   3d000:	bne	3cfd4 <__assert_fail@plt+0x2a9e0>
   3d004:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d008:	bl	122b8 <__ctype_b_loc@plt>
   3d00c:	mov	r1, r6
   3d010:	mov	lr, #1
   3d014:	ldr	r3, [r0]
   3d018:	add	r0, r3, #508	; 0x1fc
   3d01c:	add	r0, r0, #2
   3d020:	sub	r3, r3, #2
   3d024:	ldrh	r2, [r3, #2]!
   3d028:	tst	r2, #1
   3d02c:	beq	3d048 <__assert_fail@plt+0x2aa54>
   3d030:	ldrb	r2, [r1]
   3d034:	and	r4, r2, #31
   3d038:	asr	r2, r2, #5
   3d03c:	ldr	ip, [r5, r2, lsl #2]
   3d040:	orr	ip, ip, lr, lsl r4
   3d044:	str	ip, [r5, r2, lsl #2]
   3d048:	cmp	r0, r3
   3d04c:	add	r1, r1, #1
   3d050:	bne	3d024 <__assert_fail@plt+0x2aa30>
   3d054:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d058:	ldr	r1, [pc, #700]	; 3d31c <__assert_fail@plt+0x2ad28>
   3d05c:	ldr	r0, [sp, #36]	; 0x24
   3d060:	bl	11f40 <strcmp@plt>
   3d064:	subs	r4, r0, #0
   3d068:	bne	3d1a0 <__assert_fail@plt+0x2abac>
   3d06c:	cmp	r6, #0
   3d070:	bne	3d150 <__assert_fail@plt+0x2ab5c>
   3d074:	bl	122b8 <__ctype_b_loc@plt>
   3d078:	mov	ip, #1
   3d07c:	ldr	r3, [r0]
   3d080:	sub	r3, r3, #2
   3d084:	ldrsh	r2, [r3, #2]!
   3d088:	cmp	r2, #0
   3d08c:	asrlt	r0, r4, #5
   3d090:	andlt	r1, r4, #31
   3d094:	ldrlt	r2, [r5, r0, lsl #2]
   3d098:	add	r4, r4, #1
   3d09c:	orrlt	r2, r2, ip, lsl r1
   3d0a0:	strlt	r2, [r5, r0, lsl #2]
   3d0a4:	cmp	r4, #256	; 0x100
   3d0a8:	bne	3d084 <__assert_fail@plt+0x2aa90>
   3d0ac:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d0b0:	bl	122b8 <__ctype_b_loc@plt>
   3d0b4:	mov	r1, r6
   3d0b8:	mov	lr, #1
   3d0bc:	ldr	r3, [r0]
   3d0c0:	add	r2, r3, #508	; 0x1fc
   3d0c4:	add	r2, r2, #2
   3d0c8:	sub	r3, r3, #2
   3d0cc:	ldrh	r0, [r3, #2]!
   3d0d0:	tst	r0, #2048	; 0x800
   3d0d4:	beq	3d0f0 <__assert_fail@plt+0x2aafc>
   3d0d8:	ldrb	r0, [r1]
   3d0dc:	and	r4, r0, #31
   3d0e0:	asr	r0, r0, #5
   3d0e4:	ldr	ip, [r5, r0, lsl #2]
   3d0e8:	orr	ip, ip, lr, lsl r4
   3d0ec:	str	ip, [r5, r0, lsl #2]
   3d0f0:	cmp	r2, r3
   3d0f4:	add	r1, r1, #1
   3d0f8:	bne	3d0cc <__assert_fail@plt+0x2aad8>
   3d0fc:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d100:	bl	122b8 <__ctype_b_loc@plt>
   3d104:	mov	r1, r6
   3d108:	mov	lr, #1
   3d10c:	ldr	r3, [r0]
   3d110:	add	r0, r3, #508	; 0x1fc
   3d114:	add	r0, r0, #2
   3d118:	sub	r3, r3, #2
   3d11c:	ldrh	r2, [r3, #2]!
   3d120:	tst	r2, #16384	; 0x4000
   3d124:	beq	3d140 <__assert_fail@plt+0x2ab4c>
   3d128:	ldrb	r2, [r1]
   3d12c:	and	r4, r2, #31
   3d130:	asr	r2, r2, #5
   3d134:	ldr	ip, [r5, r2, lsl #2]
   3d138:	orr	ip, ip, lr, lsl r4
   3d13c:	str	ip, [r5, r2, lsl #2]
   3d140:	cmp	r3, r0
   3d144:	add	r1, r1, #1
   3d148:	bne	3d11c <__assert_fail@plt+0x2ab28>
   3d14c:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d150:	bl	122b8 <__ctype_b_loc@plt>
   3d154:	mov	r1, r6
   3d158:	mov	lr, #1
   3d15c:	ldr	r3, [r0]
   3d160:	add	r0, r3, #508	; 0x1fc
   3d164:	add	r0, r0, #2
   3d168:	sub	r3, r3, #2
   3d16c:	ldrsh	r2, [r3, #2]!
   3d170:	cmp	r2, #0
   3d174:	bge	3d190 <__assert_fail@plt+0x2ab9c>
   3d178:	ldrb	r2, [r1]
   3d17c:	and	r4, r2, #31
   3d180:	asr	r2, r2, #5
   3d184:	ldr	ip, [r5, r2, lsl #2]
   3d188:	orr	ip, ip, lr, lsl r4
   3d18c:	str	ip, [r5, r2, lsl #2]
   3d190:	cmp	r0, r3
   3d194:	add	r1, r1, #1
   3d198:	bne	3d16c <__assert_fail@plt+0x2ab78>
   3d19c:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d1a0:	ldr	r1, [pc, #376]	; 3d320 <__assert_fail@plt+0x2ad2c>
   3d1a4:	ldr	r0, [sp, #36]	; 0x24
   3d1a8:	bl	11f40 <strcmp@plt>
   3d1ac:	subs	r4, r0, #0
   3d1b0:	bne	3d1f8 <__assert_fail@plt+0x2ac04>
   3d1b4:	cmp	r6, #0
   3d1b8:	bne	3d214 <__assert_fail@plt+0x2ac20>
   3d1bc:	bl	122b8 <__ctype_b_loc@plt>
   3d1c0:	mov	ip, #1
   3d1c4:	ldr	r3, [r0]
   3d1c8:	sub	r3, r3, #2
   3d1cc:	ldrh	r2, [r3, #2]!
   3d1d0:	asr	r1, r4, #5
   3d1d4:	and	r0, r4, #31
   3d1d8:	tst	r2, #4
   3d1dc:	add	r4, r4, #1
   3d1e0:	ldrne	r2, [r5, r1, lsl #2]
   3d1e4:	orrne	r2, r2, ip, lsl r0
   3d1e8:	strne	r2, [r5, r1, lsl #2]
   3d1ec:	cmp	r4, #256	; 0x100
   3d1f0:	bne	3d1cc <__assert_fail@plt+0x2abd8>
   3d1f4:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d1f8:	ldr	r1, [pc, #292]	; 3d324 <__assert_fail@plt+0x2ad30>
   3d1fc:	ldr	r0, [sp, #36]	; 0x24
   3d200:	bl	11f40 <strcmp@plt>
   3d204:	subs	r4, r0, #0
   3d208:	beq	3d264 <__assert_fail@plt+0x2ac70>
   3d20c:	mov	r0, #4
   3d210:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d214:	bl	122b8 <__ctype_b_loc@plt>
   3d218:	mov	r1, r6
   3d21c:	mov	lr, #1
   3d220:	ldr	r3, [r0]
   3d224:	add	r0, r3, #508	; 0x1fc
   3d228:	add	r0, r0, #2
   3d22c:	sub	r3, r3, #2
   3d230:	ldrh	r2, [r3, #2]!
   3d234:	tst	r2, #4
   3d238:	beq	3d254 <__assert_fail@plt+0x2ac60>
   3d23c:	ldrb	r2, [r1]
   3d240:	and	r4, r2, #31
   3d244:	asr	r2, r2, #5
   3d248:	ldr	ip, [r5, r2, lsl #2]
   3d24c:	orr	ip, ip, lr, lsl r4
   3d250:	str	ip, [r5, r2, lsl #2]
   3d254:	cmp	r0, r3
   3d258:	add	r1, r1, #1
   3d25c:	bne	3d230 <__assert_fail@plt+0x2ac3c>
   3d260:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d264:	cmp	r6, #0
   3d268:	bne	3d2a8 <__assert_fail@plt+0x2acb4>
   3d26c:	bl	122b8 <__ctype_b_loc@plt>
   3d270:	mov	ip, #1
   3d274:	ldr	r3, [r0]
   3d278:	sub	r3, r3, #2
   3d27c:	ldrh	r2, [r3, #2]!
   3d280:	asr	r1, r4, #5
   3d284:	and	r0, r4, #31
   3d288:	tst	r2, #4096	; 0x1000
   3d28c:	add	r4, r4, #1
   3d290:	ldrne	r2, [r5, r1, lsl #2]
   3d294:	orrne	r2, r2, ip, lsl r0
   3d298:	strne	r2, [r5, r1, lsl #2]
   3d29c:	cmp	r4, #256	; 0x100
   3d2a0:	bne	3d27c <__assert_fail@plt+0x2ac88>
   3d2a4:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d2a8:	bl	122b8 <__ctype_b_loc@plt>
   3d2ac:	mov	r1, r6
   3d2b0:	mov	lr, #1
   3d2b4:	ldr	r3, [r0]
   3d2b8:	add	r0, r3, #508	; 0x1fc
   3d2bc:	add	r0, r0, #2
   3d2c0:	sub	r3, r3, #2
   3d2c4:	ldrh	r2, [r3, #2]!
   3d2c8:	tst	r2, #4096	; 0x1000
   3d2cc:	beq	3d2e8 <__assert_fail@plt+0x2acf4>
   3d2d0:	ldrb	r2, [r1]
   3d2d4:	and	r4, r2, #31
   3d2d8:	asr	r2, r2, #5
   3d2dc:	ldr	ip, [r5, r2, lsl #2]
   3d2e0:	orr	ip, ip, lr, lsl r4
   3d2e4:	str	ip, [r5, r2, lsl #2]
   3d2e8:	cmp	r3, r0
   3d2ec:	add	r1, r1, #1
   3d2f0:	bne	3d2c4 <__assert_fail@plt+0x2acd0>
   3d2f4:	b	3cb08 <__assert_fail@plt+0x2a514>
   3d2f8:	muleq	r5, r0, ip
   3d2fc:	andeq	r3, r5, r8, lsl #25
   3d300:	andeq	r3, r5, r0, lsr #25
   3d304:	andeq	r3, r5, r8, lsr #25
   3d308:	muleq	r5, r8, ip
   3d30c:			; <UNDEFINED> instruction: 0x00053cb0
   3d310:			; <UNDEFINED> instruction: 0x00053cb8
   3d314:	muleq	r4, r0, r1
   3d318:	andeq	r3, r5, r0, asr #25
   3d31c:	andeq	r3, r5, r8, asr #25
   3d320:	ldrdeq	r3, [r5], -r0
   3d324:	ldrdeq	r3, [r5], -r8
   3d328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d32c:	sub	sp, sp, #308	; 0x134
   3d330:	ldr	r9, [r0]
   3d334:	ldr	ip, [r9, #92]	; 0x5c
   3d338:	cmp	ip, #1
   3d33c:	movne	ip, #0
   3d340:	ldreq	ip, [r0, #12]
   3d344:	lsreq	ip, ip, #22
   3d348:	andeq	ip, ip, #1
   3d34c:	str	ip, [sp, #20]
   3d350:	ldr	ip, [r1]
   3d354:	cmp	ip, #0
   3d358:	ble	3d6fc <__assert_fail@plt+0x2b108>
   3d35c:	mov	r6, r3
   3d360:	mov	r3, #0
   3d364:	str	r2, [sp, #16]
   3d368:	str	r1, [sp, #24]
   3d36c:	str	r0, [sp, #28]
   3d370:	str	r3, [sp, #4]
   3d374:	mov	r5, #1
   3d378:	b	3d3b4 <__assert_fail@plt+0x2adc0>
   3d37c:	cmp	r4, #3
   3d380:	beq	3d4f4 <__assert_fail@plt+0x2af00>
   3d384:	cmp	r4, #6
   3d388:	beq	3d5a8 <__assert_fail@plt+0x2afb4>
   3d38c:	and	r3, r4, #253	; 0xfd
   3d390:	cmp	r3, #5
   3d394:	beq	3d734 <__assert_fail@plt+0x2b140>
   3d398:	cmp	r4, #2
   3d39c:	beq	3d6dc <__assert_fail@plt+0x2b0e8>
   3d3a0:	ldr	r3, [sp, #4]
   3d3a4:	add	r3, r3, #1
   3d3a8:	cmp	r3, ip
   3d3ac:	str	r3, [sp, #4]
   3d3b0:	bge	3d6fc <__assert_fail@plt+0x2b108>
   3d3b4:	ldr	r3, [sp, #16]
   3d3b8:	ldr	r1, [sp, #4]
   3d3bc:	ldr	r2, [r3]
   3d3c0:	ldr	r3, [r9]
   3d3c4:	ldr	r7, [r2, r1, lsl #2]
   3d3c8:	lsl	r2, r7, #3
   3d3cc:	str	r2, [sp, #8]
   3d3d0:	add	r2, r3, r2
   3d3d4:	ldrb	r4, [r2, #4]
   3d3d8:	cmp	r4, #1
   3d3dc:	bne	3d37c <__assert_fail@plt+0x2ad88>
   3d3e0:	ldrb	r3, [r3, r7, lsl #3]
   3d3e4:	ldr	r2, [sp, #20]
   3d3e8:	cmp	r2, #0
   3d3ec:	strb	r4, [r6, r3]
   3d3f0:	str	r3, [sp, #12]
   3d3f4:	beq	3d40c <__assert_fail@plt+0x2ae18>
   3d3f8:	bl	12288 <__ctype_tolower_loc@plt>
   3d3fc:	ldr	r3, [sp, #12]
   3d400:	ldr	r2, [r0]
   3d404:	ldr	r3, [r2, r3, lsl #2]
   3d408:	strb	r4, [r6, r3]
   3d40c:	ldr	r3, [sp, #28]
   3d410:	ldr	r3, [r3, #12]
   3d414:	tst	r3, #4194304	; 0x400000
   3d418:	beq	3d4e8 <__assert_fail@plt+0x2aef4>
   3d41c:	ldr	r3, [r9, #92]	; 0x5c
   3d420:	cmp	r3, #1
   3d424:	ble	3d4e8 <__assert_fail@plt+0x2aef4>
   3d428:	ldr	r3, [r9]
   3d42c:	add	r1, r7, #1
   3d430:	ldrb	r2, [r3, r7, lsl #3]
   3d434:	strb	r2, [sp, #48]	; 0x30
   3d438:	ldr	r2, [r9, #8]
   3d43c:	cmp	r2, r1
   3d440:	bls	3d72c <__assert_fail@plt+0x2b138>
   3d444:	ldr	r0, [sp, #8]
   3d448:	ldr	ip, [pc, #772]	; 3d754 <__assert_fail@plt+0x2b160>
   3d44c:	add	r2, r0, #8
   3d450:	add	r3, r3, r2
   3d454:	ldr	r2, [r3, #4]
   3d458:	bic	r2, r2, #-16777216	; 0xff000000
   3d45c:	bic	r2, r2, #14614528	; 0xdf0000
   3d460:	bic	r2, r2, #65280	; 0xff00
   3d464:	cmp	r2, ip
   3d468:	bne	3d72c <__assert_fail@plt+0x2b138>
   3d46c:	add	r8, r0, #16
   3d470:	add	r4, sp, #49	; 0x31
   3d474:	b	3d4a0 <__assert_fail@plt+0x2aeac>
   3d478:	ldr	r3, [r9]
   3d47c:	ldr	r0, [pc, #720]	; 3d754 <__assert_fail@plt+0x2b160>
   3d480:	add	r3, r3, r8
   3d484:	add	r8, r8, #8
   3d488:	ldr	r2, [r3, #4]
   3d48c:	bic	r2, r2, #-16777216	; 0xff000000
   3d490:	bic	r2, r2, #14614528	; 0xdf0000
   3d494:	bic	r2, r2, #65280	; 0xff00
   3d498:	cmp	r2, r0
   3d49c:	bne	3d4b8 <__assert_fail@plt+0x2aec4>
   3d4a0:	ldrb	r3, [r3]
   3d4a4:	add	r1, r1, #1
   3d4a8:	strb	r3, [r4], #1
   3d4ac:	ldr	r3, [r9, #8]
   3d4b0:	cmp	r1, r3
   3d4b4:	bcc	3d478 <__assert_fail@plt+0x2ae84>
   3d4b8:	add	r3, sp, #48	; 0x30
   3d4bc:	sub	r4, r4, r3
   3d4c0:	mov	ip, #0
   3d4c4:	mov	r2, r4
   3d4c8:	add	r3, sp, #40	; 0x28
   3d4cc:	add	r1, sp, #48	; 0x30
   3d4d0:	add	r0, sp, #36	; 0x24
   3d4d4:	str	ip, [sp, #40]	; 0x28
   3d4d8:	str	ip, [sp, #44]	; 0x2c
   3d4dc:	bl	3a03c <__assert_fail@plt+0x27a48>
   3d4e0:	cmp	r4, r0
   3d4e4:	beq	3d704 <__assert_fail@plt+0x2b110>
   3d4e8:	ldr	r3, [sp, #24]
   3d4ec:	ldr	ip, [r3]
   3d4f0:	b	3d3a0 <__assert_fail@plt+0x2adac>
   3d4f4:	ldr	r8, [sp, #20]
   3d4f8:	mov	r7, #0
   3d4fc:	str	r9, [sp, #12]
   3d500:	ldr	r2, [sp, #8]
   3d504:	cmp	r8, #0
   3d508:	ldr	r3, [r3, r2]
   3d50c:	ldr	r9, [r3, r7]
   3d510:	bne	3d54c <__assert_fail@plt+0x2af58>
   3d514:	add	r0, r6, r7, lsl #3
   3d518:	mov	r3, r8
   3d51c:	lsr	r2, r9, r3
   3d520:	tst	r2, #1
   3d524:	strbne	r5, [r0, r3]
   3d528:	add	r3, r3, #1
   3d52c:	cmp	r3, #32
   3d530:	bne	3d51c <__assert_fail@plt+0x2af28>
   3d534:	add	r7, r7, #4
   3d538:	cmp	r7, #32
   3d53c:	beq	3d598 <__assert_fail@plt+0x2afa4>
   3d540:	ldr	r3, [sp, #12]
   3d544:	ldr	r3, [r3]
   3d548:	b	3d500 <__assert_fail@plt+0x2af0c>
   3d54c:	add	sl, r6, r7, lsl #3
   3d550:	lsl	fp, r7, #5
   3d554:	mov	r4, #0
   3d558:	lsr	r3, r9, r4
   3d55c:	tst	r3, #1
   3d560:	add	r4, r4, #1
   3d564:	beq	3d57c <__assert_fail@plt+0x2af88>
   3d568:	strb	r5, [sl]
   3d56c:	bl	12288 <__ctype_tolower_loc@plt>
   3d570:	ldr	r3, [r0]
   3d574:	ldr	r3, [r3, fp]
   3d578:	strb	r5, [r6, r3]
   3d57c:	cmp	r4, #32
   3d580:	add	sl, sl, #1
   3d584:	add	fp, fp, #4
   3d588:	bne	3d558 <__assert_fail@plt+0x2af64>
   3d58c:	add	r7, r7, #4
   3d590:	cmp	r7, #32
   3d594:	bne	3d540 <__assert_fail@plt+0x2af4c>
   3d598:	ldr	r3, [sp, #24]
   3d59c:	ldr	r9, [sp, #12]
   3d5a0:	ldr	ip, [r3]
   3d5a4:	b	3d3a0 <__assert_fail@plt+0x2adac>
   3d5a8:	ldr	r3, [r9, #92]	; 0x5c
   3d5ac:	ldr	r7, [r2]
   3d5b0:	cmp	r3, #1
   3d5b4:	ble	3d5dc <__assert_fail@plt+0x2afe8>
   3d5b8:	ldr	r3, [r7, #36]	; 0x24
   3d5bc:	cmp	r3, #0
   3d5c0:	bne	3d694 <__assert_fail@plt+0x2b0a0>
   3d5c4:	ldrb	r3, [r7, #16]
   3d5c8:	tst	r3, #1
   3d5cc:	bne	3d694 <__assert_fail@plt+0x2b0a0>
   3d5d0:	ldr	r3, [r7, #32]
   3d5d4:	cmp	r3, #0
   3d5d8:	bne	3d694 <__assert_fail@plt+0x2b0a0>
   3d5dc:	ldr	r3, [r7, #20]
   3d5e0:	cmp	r3, #0
   3d5e4:	movgt	r4, #0
   3d5e8:	ldrgt	r8, [sp, #28]
   3d5ec:	ble	3d3a0 <__assert_fail@plt+0x2adac>
   3d5f0:	mov	r3, #0
   3d5f4:	str	r3, [sp, #40]	; 0x28
   3d5f8:	str	r3, [sp, #44]	; 0x2c
   3d5fc:	ldr	r3, [r7]
   3d600:	add	r2, sp, #40	; 0x28
   3d604:	add	r0, sp, #48	; 0x30
   3d608:	ldr	r1, [r3, r4, lsl #2]
   3d60c:	bl	11ef8 <wcrtomb@plt>
   3d610:	lsl	sl, r4, #2
   3d614:	add	r4, r4, #1
   3d618:	cmn	r0, #1
   3d61c:	beq	3d644 <__assert_fail@plt+0x2b050>
   3d620:	ldrb	fp, [sp, #48]	; 0x30
   3d624:	ldr	r3, [sp, #20]
   3d628:	cmp	r3, #0
   3d62c:	strb	r5, [r6, fp]
   3d630:	beq	3d644 <__assert_fail@plt+0x2b050>
   3d634:	bl	12288 <__ctype_tolower_loc@plt>
   3d638:	ldr	r3, [r0]
   3d63c:	ldr	r3, [r3, fp, lsl #2]
   3d640:	strb	r5, [r6, r3]
   3d644:	ldr	r3, [r8, #12]
   3d648:	tst	r3, #4194304	; 0x400000
   3d64c:	beq	3d684 <__assert_fail@plt+0x2b090>
   3d650:	ldr	r3, [r9, #92]	; 0x5c
   3d654:	cmp	r3, #1
   3d658:	ble	3d684 <__assert_fail@plt+0x2b090>
   3d65c:	ldr	r3, [r7]
   3d660:	ldr	r0, [r3, sl]
   3d664:	bl	12054 <towlower@plt>
   3d668:	add	r2, sp, #40	; 0x28
   3d66c:	mov	r1, r0
   3d670:	add	r0, sp, #48	; 0x30
   3d674:	bl	11ef8 <wcrtomb@plt>
   3d678:	cmn	r0, #1
   3d67c:	ldrbne	r3, [sp, #48]	; 0x30
   3d680:	strbne	r5, [r6, r3]
   3d684:	ldr	r3, [r7, #20]
   3d688:	cmp	r4, r3
   3d68c:	blt	3d5f0 <__assert_fail@plt+0x2affc>
   3d690:	b	3d4e8 <__assert_fail@plt+0x2aef4>
   3d694:	mov	r3, #0
   3d698:	strb	r3, [sp, #40]	; 0x28
   3d69c:	mov	r0, #0
   3d6a0:	add	r3, sp, #48	; 0x30
   3d6a4:	mov	r2, r5
   3d6a8:	add	r1, sp, #40	; 0x28
   3d6ac:	str	r0, [sp, #48]	; 0x30
   3d6b0:	str	r0, [sp, #52]	; 0x34
   3d6b4:	bl	3a03c <__assert_fail@plt+0x27a48>
   3d6b8:	ldrb	r3, [sp, #40]	; 0x28
   3d6bc:	cmn	r0, #2
   3d6c0:	strbeq	r5, [r6, r3]
   3d6c4:	add	r3, r3, #1
   3d6c8:	uxtb	r3, r3
   3d6cc:	cmp	r3, #0
   3d6d0:	strb	r3, [sp, #40]	; 0x28
   3d6d4:	bne	3d69c <__assert_fail@plt+0x2b0a8>
   3d6d8:	b	3d4e8 <__assert_fail@plt+0x2aef4>
   3d6dc:	mov	r0, r6
   3d6e0:	mov	r2, #256	; 0x100
   3d6e4:	mov	r1, #1
   3d6e8:	bl	12378 <memset@plt>
   3d6ec:	ldr	r2, [sp, #28]
   3d6f0:	ldrb	r3, [r2, #28]
   3d6f4:	orr	r3, r3, #1
   3d6f8:	strb	r3, [r2, #28]
   3d6fc:	add	sp, sp, #308	; 0x134
   3d700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d704:	ldr	r0, [sp, #36]	; 0x24
   3d708:	bl	12054 <towlower@plt>
   3d70c:	add	r2, sp, #40	; 0x28
   3d710:	mov	r1, r0
   3d714:	add	r0, sp, #48	; 0x30
   3d718:	bl	11ef8 <wcrtomb@plt>
   3d71c:	cmn	r0, #1
   3d720:	ldrbne	r3, [sp, #48]	; 0x30
   3d724:	strbne	r5, [r6, r3]
   3d728:	b	3d4e8 <__assert_fail@plt+0x2aef4>
   3d72c:	add	r4, sp, #49	; 0x31
   3d730:	b	3d4b8 <__assert_fail@plt+0x2aec4>
   3d734:	mov	r0, r6
   3d738:	mov	r2, #256	; 0x100
   3d73c:	mov	r1, #1
   3d740:	bl	12378 <memset@plt>
   3d744:	cmp	r4, #2
   3d748:	beq	3d6ec <__assert_fail@plt+0x2b0f8>
   3d74c:	add	sp, sp, #308	; 0x134
   3d750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d754:	eoreq	r0, r0, r1
   3d758:	add	ip, r0, r2, lsl #3
   3d75c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d760:	ldrb	r6, [ip, #4]
   3d764:	ldr	r7, [sp, #32]
   3d768:	cmp	r6, #7
   3d76c:	beq	3d84c <__assert_fail@plt+0x2b258>
   3d770:	ldr	ip, [r3, #80]	; 0x50
   3d774:	cmp	ip, #1
   3d778:	beq	3d85c <__assert_fail@plt+0x2b268>
   3d77c:	ldr	r5, [r3, #28]
   3d780:	add	lr, r7, #1
   3d784:	cmp	r5, lr
   3d788:	ble	3d85c <__assert_fail@plt+0x2b268>
   3d78c:	ldr	r8, [r3, #8]
   3d790:	add	ip, r8, lr, lsl #2
   3d794:	ldr	lr, [r8, lr, lsl #2]
   3d798:	cmn	lr, #1
   3d79c:	subeq	r5, r5, r7
   3d7a0:	moveq	r4, #1
   3d7a4:	beq	3d7b8 <__assert_fail@plt+0x2b1c4>
   3d7a8:	b	3d85c <__assert_fail@plt+0x2b268>
   3d7ac:	ldr	lr, [ip, #4]!
   3d7b0:	cmn	lr, #1
   3d7b4:	bne	3d7c4 <__assert_fail@plt+0x2b1d0>
   3d7b8:	add	r4, r4, #1
   3d7bc:	cmp	r4, r5
   3d7c0:	bne	3d7ac <__assert_fail@plt+0x2b1b8>
   3d7c4:	cmp	r6, #5
   3d7c8:	beq	3d868 <__assert_fail@plt+0x2b274>
   3d7cc:	cmp	r4, #1
   3d7d0:	sub	r6, r6, #6
   3d7d4:	clz	r6, r6
   3d7d8:	lsr	r6, r6, #5
   3d7dc:	moveq	r6, #0
   3d7e0:	cmp	r6, #0
   3d7e4:	beq	3d85c <__assert_fail@plt+0x2b268>
   3d7e8:	ldr	r9, [r0, r2, lsl #3]
   3d7ec:	ldr	ip, [r9, #32]
   3d7f0:	cmp	ip, #0
   3d7f4:	beq	3d8a4 <__assert_fail@plt+0x2b2b0>
   3d7f8:	ldr	r0, [r9, #20]
   3d7fc:	cmp	r0, #0
   3d800:	ldr	r5, [r8, r7, lsl #2]
   3d804:	ble	3d838 <__assert_fail@plt+0x2b244>
   3d808:	ldr	r2, [r9]
   3d80c:	ldr	r3, [r2]
   3d810:	cmp	r5, r3
   3d814:	movne	r3, #0
   3d818:	bne	3d82c <__assert_fail@plt+0x2b238>
   3d81c:	b	3d8f4 <__assert_fail@plt+0x2b300>
   3d820:	ldr	r1, [r2, #4]!
   3d824:	cmp	r5, r1
   3d828:	beq	3d8f4 <__assert_fail@plt+0x2b300>
   3d82c:	add	r3, r3, #1
   3d830:	cmp	r3, r0
   3d834:	bne	3d820 <__assert_fail@plt+0x2b22c>
   3d838:	ldr	r3, [r9, #36]	; 0x24
   3d83c:	cmp	r3, #0
   3d840:	ble	3d93c <__assert_fail@plt+0x2b348>
   3d844:	mov	r6, #0
   3d848:	b	3d8d8 <__assert_fail@plt+0x2b2e4>
   3d84c:	ldr	r1, [r3, #4]
   3d850:	ldrb	r2, [r1, r7]
   3d854:	cmp	r2, #193	; 0xc1
   3d858:	bhi	3d904 <__assert_fail@plt+0x2b310>
   3d85c:	mov	r4, #0
   3d860:	mov	r0, r4
   3d864:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d868:	ldr	r2, [r1]
   3d86c:	tst	r2, #64	; 0x40
   3d870:	beq	3d890 <__assert_fail@plt+0x2b29c>
   3d874:	tst	r2, #128	; 0x80
   3d878:	beq	3d860 <__assert_fail@plt+0x2b26c>
   3d87c:	ldr	r3, [r3, #4]
   3d880:	ldrb	r3, [r3, r7]
   3d884:	cmp	r3, #0
   3d888:	beq	3d85c <__assert_fail@plt+0x2b268>
   3d88c:	b	3d860 <__assert_fail@plt+0x2b26c>
   3d890:	ldr	r1, [r3, #4]
   3d894:	ldrb	r1, [r1, r7]
   3d898:	cmp	r1, #10
   3d89c:	bne	3d874 <__assert_fail@plt+0x2b280>
   3d8a0:	b	3d85c <__assert_fail@plt+0x2b268>
   3d8a4:	ldr	r3, [r9, #36]	; 0x24
   3d8a8:	ldr	r0, [r9, #20]
   3d8ac:	cmp	r3, #0
   3d8b0:	bne	3d7fc <__assert_fail@plt+0x2b208>
   3d8b4:	cmp	r0, #0
   3d8b8:	bne	3d7fc <__assert_fail@plt+0x2b208>
   3d8bc:	ldrb	r3, [r9, #16]
   3d8c0:	tst	r3, #1
   3d8c4:	bne	3d860 <__assert_fail@plt+0x2b26c>
   3d8c8:	b	3d85c <__assert_fail@plt+0x2b268>
   3d8cc:	ldr	r3, [r9, #36]	; 0x24
   3d8d0:	cmp	r6, r3
   3d8d4:	bge	3d938 <__assert_fail@plt+0x2b344>
   3d8d8:	ldr	r3, [r9, #12]
   3d8dc:	mov	r0, r5
   3d8e0:	ldr	r1, [r3, r6, lsl #2]
   3d8e4:	bl	11f34 <iswctype@plt>
   3d8e8:	add	r6, r6, #1
   3d8ec:	cmp	r0, #0
   3d8f0:	beq	3d8cc <__assert_fail@plt+0x2b2d8>
   3d8f4:	ldrb	r3, [r9, #16]
   3d8f8:	tst	r3, #1
   3d8fc:	beq	3d860 <__assert_fail@plt+0x2b26c>
   3d900:	b	3d85c <__assert_fail@plt+0x2b268>
   3d904:	ldr	lr, [r3, #48]	; 0x30
   3d908:	add	ip, r7, #1
   3d90c:	cmp	ip, lr
   3d910:	bge	3d85c <__assert_fail@plt+0x2b268>
   3d914:	add	r0, r1, r7
   3d918:	cmp	r2, #223	; 0xdf
   3d91c:	ldrb	r3, [r0, #1]
   3d920:	bhi	3d980 <__assert_fail@plt+0x2b38c>
   3d924:	eor	r3, r3, #128	; 0x80
   3d928:	cmp	r3, #63	; 0x3f
   3d92c:	movls	r4, #2
   3d930:	bls	3d860 <__assert_fail@plt+0x2b26c>
   3d934:	b	3d85c <__assert_fail@plt+0x2b268>
   3d938:	ldr	ip, [r9, #32]
   3d93c:	cmp	ip, #0
   3d940:	ble	3d8bc <__assert_fail@plt+0x2b2c8>
   3d944:	ldr	r2, [r9, #4]
   3d948:	mov	r3, #0
   3d94c:	sub	r2, r2, #4
   3d950:	b	3d960 <__assert_fail@plt+0x2b36c>
   3d954:	add	r3, r3, #1
   3d958:	cmp	r3, ip
   3d95c:	beq	3d8bc <__assert_fail@plt+0x2b2c8>
   3d960:	ldr	r1, [r2, #4]!
   3d964:	cmp	r5, r1
   3d968:	bcc	3d954 <__assert_fail@plt+0x2b360>
   3d96c:	ldr	r1, [r9, #8]
   3d970:	ldr	r1, [r1, r3, lsl #2]
   3d974:	cmp	r5, r1
   3d978:	bhi	3d954 <__assert_fail@plt+0x2b360>
   3d97c:	b	3d8f4 <__assert_fail@plt+0x2b300>
   3d980:	cmp	r2, #239	; 0xef
   3d984:	bhi	3da10 <__assert_fail@plt+0x2b41c>
   3d988:	cmp	r3, #159	; 0x9f
   3d98c:	cmpls	r2, #224	; 0xe0
   3d990:	movne	r4, #3
   3d994:	beq	3d85c <__assert_fail@plt+0x2b268>
   3d998:	add	r7, r7, r4
   3d99c:	cmp	lr, r7
   3d9a0:	blt	3d85c <__assert_fail@plt+0x2b268>
   3d9a4:	ldrb	r3, [r1, ip]
   3d9a8:	eor	r3, r3, #128	; 0x80
   3d9ac:	cmp	r3, #63	; 0x3f
   3d9b0:	bhi	3d85c <__assert_fail@plt+0x2b268>
   3d9b4:	ldrb	r3, [r0, #2]
   3d9b8:	eor	r3, r3, #128	; 0x80
   3d9bc:	cmp	r3, #63	; 0x3f
   3d9c0:	bhi	3d85c <__assert_fail@plt+0x2b268>
   3d9c4:	cmp	r4, #3
   3d9c8:	beq	3d860 <__assert_fail@plt+0x2b26c>
   3d9cc:	ldrb	r3, [r0, #3]
   3d9d0:	eor	r3, r3, #128	; 0x80
   3d9d4:	cmp	r3, #63	; 0x3f
   3d9d8:	bhi	3d85c <__assert_fail@plt+0x2b268>
   3d9dc:	cmp	r4, #4
   3d9e0:	beq	3d860 <__assert_fail@plt+0x2b26c>
   3d9e4:	ldrb	r3, [r0, #4]
   3d9e8:	eor	r3, r3, #128	; 0x80
   3d9ec:	cmp	r3, #63	; 0x3f
   3d9f0:	bhi	3d85c <__assert_fail@plt+0x2b268>
   3d9f4:	cmp	r4, #6
   3d9f8:	bne	3da64 <__assert_fail@plt+0x2b470>
   3d9fc:	ldrb	r3, [r0, #5]
   3da00:	eor	r3, r3, #128	; 0x80
   3da04:	cmp	r3, #63	; 0x3f
   3da08:	bls	3d860 <__assert_fail@plt+0x2b26c>
   3da0c:	b	3d85c <__assert_fail@plt+0x2b268>
   3da10:	cmp	r2, #247	; 0xf7
   3da14:	bhi	3da2c <__assert_fail@plt+0x2b438>
   3da18:	cmp	r3, #143	; 0x8f
   3da1c:	cmpls	r2, #240	; 0xf0
   3da20:	movne	r4, #4
   3da24:	bne	3d998 <__assert_fail@plt+0x2b3a4>
   3da28:	b	3d85c <__assert_fail@plt+0x2b268>
   3da2c:	cmp	r2, #251	; 0xfb
   3da30:	bhi	3da48 <__assert_fail@plt+0x2b454>
   3da34:	cmp	r3, #135	; 0x87
   3da38:	cmpls	r2, #248	; 0xf8
   3da3c:	movne	r4, #5
   3da40:	bne	3d998 <__assert_fail@plt+0x2b3a4>
   3da44:	b	3d85c <__assert_fail@plt+0x2b268>
   3da48:	cmp	r2, #253	; 0xfd
   3da4c:	bhi	3d85c <__assert_fail@plt+0x2b268>
   3da50:	cmp	r3, #131	; 0x83
   3da54:	cmpls	r2, #252	; 0xfc
   3da58:	beq	3d85c <__assert_fail@plt+0x2b268>
   3da5c:	mov	r4, #6
   3da60:	b	3d998 <__assert_fail@plt+0x2b3a4>
   3da64:	mov	r4, #5
   3da68:	b	3d860 <__assert_fail@plt+0x2b26c>
   3da6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3da70:	sub	sp, sp, #8
   3da74:	ldr	r6, [r1, #40]	; 0x28
   3da78:	ldr	r3, [r1, #56]	; 0x38
   3da7c:	cmp	r3, r6
   3da80:	ble	3dcf4 <__assert_fail@plt+0x2b700>
   3da84:	ldr	sl, [r1, #4]
   3da88:	ldrb	r3, [r0, #6]
   3da8c:	mov	r8, r2
   3da90:	ldrb	r7, [sl, r6]
   3da94:	and	r3, r3, #159	; 0x9f
   3da98:	strb	r3, [r0, #6]
   3da9c:	strb	r7, [r0]
   3daa0:	ldr	r3, [r1, #80]	; 0x50
   3daa4:	mov	r5, r0
   3daa8:	cmp	r3, #1
   3daac:	mov	r4, r1
   3dab0:	ble	3dd08 <__assert_fail@plt+0x2b714>
   3dab4:	ldr	r2, [r1, #28]
   3dab8:	cmp	r6, r2
   3dabc:	beq	3dad0 <__assert_fail@plt+0x2b4dc>
   3dac0:	ldr	r2, [r1, #8]
   3dac4:	ldr	r2, [r2, r6, lsl #2]
   3dac8:	cmn	r2, #1
   3dacc:	beq	3df68 <__assert_fail@plt+0x2b974>
   3dad0:	cmp	r7, #92	; 0x5c
   3dad4:	beq	3dd70 <__assert_fail@plt+0x2b77c>
   3dad8:	ldr	r3, [r4, #8]
   3dadc:	mov	r2, #1
   3dae0:	strb	r2, [r5, #4]
   3dae4:	ldr	r9, [r3, r6, lsl #2]
   3dae8:	mov	r0, r9
   3daec:	bl	12354 <iswalnum@plt>
   3daf0:	ldrb	r3, [r5, #6]
   3daf4:	sub	r9, r9, #95	; 0x5f
   3daf8:	clz	r9, r9
   3dafc:	lsr	r9, r9, #5
   3db00:	bic	r3, r3, #64	; 0x40
   3db04:	cmp	r0, #0
   3db08:	orrne	r9, r9, #1
   3db0c:	orr	r9, r3, r9, lsl #6
   3db10:	strb	r9, [r5, #6]
   3db14:	sub	r7, r7, #10
   3db18:	cmp	r7, #115	; 0x73
   3db1c:	ldrls	pc, [pc, r7, lsl #2]
   3db20:	b	3dd64 <__assert_fail@plt+0x2b770>
   3db24:	andeq	sp, r3, ip, lsr #31
   3db28:	andeq	sp, r3, r4, ror #26
   3db2c:	andeq	sp, r3, r4, ror #26
   3db30:	andeq	sp, r3, r4, ror #26
   3db34:	andeq	sp, r3, r4, ror #26
   3db38:	andeq	sp, r3, r4, ror #26
   3db3c:	andeq	sp, r3, r4, ror #26
   3db40:	andeq	sp, r3, r4, ror #26
   3db44:	andeq	sp, r3, r4, ror #26
   3db48:	andeq	sp, r3, r4, ror #26
   3db4c:	andeq	sp, r3, r4, ror #26
   3db50:	andeq	sp, r3, r4, ror #26
   3db54:	andeq	sp, r3, r4, ror #26
   3db58:	andeq	sp, r3, r4, ror #26
   3db5c:	andeq	sp, r3, r4, ror #26
   3db60:	andeq	sp, r3, r4, ror #26
   3db64:	andeq	sp, r3, r4, ror #26
   3db68:	andeq	sp, r3, r4, ror #26
   3db6c:	andeq	sp, r3, r4, ror #26
   3db70:	andeq	sp, r3, r4, ror #26
   3db74:	andeq	sp, r3, r4, ror #26
   3db78:	andeq	sp, r3, r4, ror #26
   3db7c:	andeq	sp, r3, r4, ror #26
   3db80:	andeq	sp, r3, r4, ror #26
   3db84:	andeq	sp, r3, r4, ror #26
   3db88:	andeq	sp, r3, r4, ror #26
   3db8c:	andeq	sp, r3, r4, asr #31
   3db90:	andeq	sp, r3, r4, ror #26
   3db94:	andeq	sp, r3, r4, ror #26
   3db98:	andeq	sp, r3, r4, ror #26
   3db9c:	andeq	lr, r3, r4, lsr #32
   3dba0:	andeq	lr, r3, ip, lsr r0
   3dba4:	andeq	lr, r3, r4, asr r0
   3dba8:	andeq	lr, r3, r4, rrx
   3dbac:	andeq	sp, r3, r4, ror #26
   3dbb0:	andeq	sp, r3, r4, ror #26
   3dbb4:	andeq	lr, r3, r4, lsl #1
   3dbb8:	andeq	sp, r3, r4, ror #26
   3dbbc:	andeq	sp, r3, r4, ror #26
   3dbc0:	andeq	sp, r3, r4, ror #26
   3dbc4:	andeq	sp, r3, r4, ror #26
   3dbc8:	andeq	sp, r3, r4, ror #26
   3dbcc:	andeq	sp, r3, r4, ror #26
   3dbd0:	andeq	sp, r3, r4, ror #26
   3dbd4:	andeq	sp, r3, r4, ror #26
   3dbd8:	andeq	sp, r3, r4, ror #26
   3dbdc:	andeq	sp, r3, r4, ror #26
   3dbe0:	andeq	sp, r3, r4, ror #26
   3dbe4:	andeq	sp, r3, r4, ror #26
   3dbe8:	andeq	sp, r3, r4, ror #26
   3dbec:	andeq	sp, r3, r4, ror #26
   3dbf0:	andeq	sp, r3, r4, ror #26
   3dbf4:	andeq	sp, r3, r4, ror #26
   3dbf8:	muleq	r3, r4, r0
   3dbfc:	andeq	sp, r3, r4, ror #26
   3dc00:	andeq	sp, r3, r4, ror #26
   3dc04:	andeq	sp, r3, r4, ror #26
   3dc08:	andeq	sp, r3, r4, ror #26
   3dc0c:	andeq	sp, r3, r4, ror #26
   3dc10:	andeq	sp, r3, r4, ror #26
   3dc14:	andeq	sp, r3, r4, ror #26
   3dc18:	andeq	sp, r3, r4, ror #26
   3dc1c:	andeq	sp, r3, r4, ror #26
   3dc20:	andeq	sp, r3, r4, ror #26
   3dc24:	andeq	sp, r3, r4, ror #26
   3dc28:	andeq	sp, r3, r4, ror #26
   3dc2c:	andeq	sp, r3, r4, ror #26
   3dc30:	andeq	sp, r3, r4, ror #26
   3dc34:	andeq	sp, r3, r4, ror #26
   3dc38:	andeq	sp, r3, r4, ror #26
   3dc3c:	andeq	sp, r3, r4, ror #26
   3dc40:	andeq	sp, r3, r4, ror #26
   3dc44:	andeq	sp, r3, r4, ror #26
   3dc48:	andeq	sp, r3, r4, ror #26
   3dc4c:	andeq	sp, r3, r4, ror #26
   3dc50:	andeq	sp, r3, r4, ror #26
   3dc54:	andeq	sp, r3, r4, ror #26
   3dc58:	andeq	sp, r3, r4, ror #26
   3dc5c:	andeq	sp, r3, r4, ror #26
   3dc60:	andeq	sp, r3, r4, ror #26
   3dc64:	andeq	sp, r3, r4, ror #26
   3dc68:	strheq	lr, [r3], -r4
   3dc6c:	andeq	sp, r3, r4, ror #26
   3dc70:	andeq	sp, r3, r4, ror #26
   3dc74:	andeq	lr, r3, r4, asr #1
   3dc78:	andeq	sp, r3, r4, ror #26
   3dc7c:	andeq	sp, r3, r4, ror #26
   3dc80:	andeq	sp, r3, r4, ror #26
   3dc84:	andeq	sp, r3, r4, ror #26
   3dc88:	andeq	sp, r3, r4, ror #26
   3dc8c:	andeq	sp, r3, r4, ror #26
   3dc90:	andeq	sp, r3, r4, ror #26
   3dc94:	andeq	sp, r3, r4, ror #26
   3dc98:	andeq	sp, r3, r4, ror #26
   3dc9c:	andeq	sp, r3, r4, ror #26
   3dca0:	andeq	sp, r3, r4, ror #26
   3dca4:	andeq	sp, r3, r4, ror #26
   3dca8:	andeq	sp, r3, r4, ror #26
   3dcac:	andeq	sp, r3, r4, ror #26
   3dcb0:	andeq	sp, r3, r4, ror #26
   3dcb4:	andeq	sp, r3, r4, ror #26
   3dcb8:	andeq	sp, r3, r4, ror #26
   3dcbc:	andeq	sp, r3, r4, ror #26
   3dcc0:	andeq	sp, r3, r4, ror #26
   3dcc4:	andeq	sp, r3, r4, ror #26
   3dcc8:	andeq	sp, r3, r4, ror #26
   3dccc:	andeq	sp, r3, r4, ror #26
   3dcd0:	andeq	sp, r3, r4, ror #26
   3dcd4:	andeq	sp, r3, r4, ror #26
   3dcd8:	andeq	sp, r3, r4, ror #26
   3dcdc:	andeq	sp, r3, r4, ror #26
   3dce0:	andeq	sp, r3, r4, ror #26
   3dce4:	andeq	sp, r3, r4, ror #26
   3dce8:	andeq	sp, r3, ip, asr #26
   3dcec:	andeq	lr, r3, ip, lsl r1
   3dcf0:	muleq	r3, r0, pc	; <UNPREDICTABLE>
   3dcf4:	mov	r3, #2
   3dcf8:	strb	r3, [r0, #4]
   3dcfc:	mov	r0, #0
   3dd00:	add	sp, sp, #8
   3dd04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dd08:	cmp	r7, #92	; 0x5c
   3dd0c:	beq	3dd70 <__assert_fail@plt+0x2b77c>
   3dd10:	mov	r3, #1
   3dd14:	strb	r3, [r5, #4]
   3dd18:	bl	122b8 <__ctype_b_loc@plt>
   3dd1c:	lsl	r1, r7, #1
   3dd20:	ldrb	r2, [r5, #6]
   3dd24:	bic	r2, r2, #64	; 0x40
   3dd28:	ldr	r3, [r0]
   3dd2c:	ldrh	r3, [r3, r1]
   3dd30:	lsr	r3, r3, #3
   3dd34:	and	r3, r3, #1
   3dd38:	cmp	r7, #95	; 0x5f
   3dd3c:	orreq	r3, r3, #1
   3dd40:	orr	r3, r2, r3, lsl #6
   3dd44:	strb	r3, [r5, #6]
   3dd48:	b	3db14 <__assert_fail@plt+0x2b520>
   3dd4c:	and	r8, r8, #4608	; 0x1200
   3dd50:	cmp	r8, #4608	; 0x1200
   3dd54:	moveq	r3, #23
   3dd58:	strbeq	r3, [r5, #4]
   3dd5c:	moveq	r0, #1
   3dd60:	beq	3dd00 <__assert_fail@plt+0x2b70c>
   3dd64:	mov	r0, #1
   3dd68:	add	sp, sp, #8
   3dd6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dd70:	ldr	r1, [r4, #48]	; 0x30
   3dd74:	add	r2, r6, #1
   3dd78:	cmp	r2, r1
   3dd7c:	bge	3df80 <__assert_fail@plt+0x2b98c>
   3dd80:	ldrb	r1, [r4, #75]	; 0x4b
   3dd84:	cmp	r1, #0
   3dd88:	bne	3e33c <__assert_fail@plt+0x2bd48>
   3dd8c:	ldrb	r6, [sl, r2]
   3dd90:	cmp	r3, #1
   3dd94:	mov	r3, #1
   3dd98:	strb	r6, [r5]
   3dd9c:	strb	r3, [r5, #4]
   3dda0:	ble	3e308 <__assert_fail@plt+0x2bd14>
   3dda4:	ldr	r1, [r4, #8]
   3dda8:	add	r1, r1, r2, lsl #2
   3ddac:	ldr	r4, [r1]
   3ddb0:	mov	r0, r4
   3ddb4:	bl	12354 <iswalnum@plt>
   3ddb8:	ldrb	r3, [r5, #6]
   3ddbc:	sub	r4, r4, #95	; 0x5f
   3ddc0:	clz	r4, r4
   3ddc4:	lsr	r4, r4, #5
   3ddc8:	bic	r3, r3, #64	; 0x40
   3ddcc:	cmp	r0, #0
   3ddd0:	orrne	r4, r4, #1
   3ddd4:	orr	r4, r3, r4, lsl #6
   3ddd8:	strb	r4, [r5, #6]
   3dddc:	sub	r3, r6, #39	; 0x27
   3dde0:	cmp	r3, #86	; 0x56
   3dde4:	ldrls	pc, [pc, r3, lsl #2]
   3dde8:	b	3df60 <__assert_fail@plt+0x2b96c>
   3ddec:	andeq	lr, r3, r4, asr #2
   3ddf0:	andeq	lr, r3, ip, lsr #2
   3ddf4:	strdeq	lr, [r3], -r0
   3ddf8:	andeq	sp, r3, r0, ror #30
   3ddfc:	ldrdeq	lr, [r3], -r4
   3de00:	andeq	sp, r3, r0, ror #30
   3de04:	andeq	sp, r3, r0, ror #30
   3de08:	andeq	sp, r3, r0, ror #30
   3de0c:	andeq	sp, r3, r0, ror #30
   3de10:	andeq	sp, r3, r0, ror #30
   3de14:			; <UNDEFINED> instruction: 0x0003e2b4
   3de18:			; <UNDEFINED> instruction: 0x0003e2b4
   3de1c:			; <UNDEFINED> instruction: 0x0003e2b4
   3de20:			; <UNDEFINED> instruction: 0x0003e2b4
   3de24:			; <UNDEFINED> instruction: 0x0003e2b4
   3de28:			; <UNDEFINED> instruction: 0x0003e2b4
   3de2c:			; <UNDEFINED> instruction: 0x0003e2b4
   3de30:			; <UNDEFINED> instruction: 0x0003e2b4
   3de34:			; <UNDEFINED> instruction: 0x0003e2b4
   3de38:	andeq	sp, r3, r0, ror #30
   3de3c:	andeq	sp, r3, r0, ror #30
   3de40:	muleq	r3, r4, r2
   3de44:	andeq	sp, r3, r0, ror #30
   3de48:	andeq	lr, r3, r4, ror r2
   3de4c:	andeq	lr, r3, r8, asr r2
   3de50:	andeq	sp, r3, r0, ror #30
   3de54:	andeq	sp, r3, r0, ror #30
   3de58:	andeq	lr, r3, r8, lsr r2
   3de5c:	andeq	sp, r3, r0, ror #30
   3de60:	andeq	sp, r3, r0, ror #30
   3de64:	andeq	sp, r3, r0, ror #30
   3de68:	andeq	sp, r3, r0, ror #30
   3de6c:	andeq	sp, r3, r0, ror #30
   3de70:	andeq	sp, r3, r0, ror #30
   3de74:	andeq	sp, r3, r0, ror #30
   3de78:	andeq	sp, r3, r0, ror #30
   3de7c:	andeq	sp, r3, r0, ror #30
   3de80:	andeq	sp, r3, r0, ror #30
   3de84:	andeq	sp, r3, r0, ror #30
   3de88:	andeq	sp, r3, r0, ror #30
   3de8c:	andeq	sp, r3, r0, ror #30
   3de90:	andeq	sp, r3, r0, ror #30
   3de94:	andeq	sp, r3, r0, ror #30
   3de98:	andeq	sp, r3, r0, ror #30
   3de9c:	andeq	lr, r3, r0, lsr #4
   3dea0:	andeq	sp, r3, r0, ror #30
   3dea4:	andeq	sp, r3, r0, ror #30
   3dea8:	andeq	sp, r3, r0, ror #30
   3deac:	andeq	lr, r3, r8, lsl #4
   3deb0:	andeq	sp, r3, r0, ror #30
   3deb4:	andeq	sp, r3, r0, ror #30
   3deb8:	andeq	sp, r3, r0, ror #30
   3debc:	andeq	sp, r3, r0, ror #30
   3dec0:	andeq	sp, r3, r0, ror #30
   3dec4:	andeq	sp, r3, r0, ror #30
   3dec8:	andeq	sp, r3, r0, ror #30
   3decc:	andeq	sp, r3, r0, ror #30
   3ded0:	andeq	lr, r3, r8, ror #3
   3ded4:	andeq	sp, r3, r0, ror #30
   3ded8:	andeq	lr, r3, r8, asr #3
   3dedc:	andeq	sp, r3, r0, ror #30
   3dee0:	andeq	sp, r3, r0, ror #30
   3dee4:	andeq	sp, r3, r0, ror #30
   3dee8:	andeq	sp, r3, r0, ror #30
   3deec:	andeq	sp, r3, r0, ror #30
   3def0:	andeq	sp, r3, r0, ror #30
   3def4:	andeq	sp, r3, r0, ror #30
   3def8:	andeq	sp, r3, r0, ror #30
   3defc:	andeq	sp, r3, r0, ror #30
   3df00:	andeq	sp, r3, r0, ror #30
   3df04:	andeq	sp, r3, r0, ror #30
   3df08:	andeq	sp, r3, r0, ror #30
   3df0c:	andeq	sp, r3, r0, ror #30
   3df10:	andeq	sp, r3, r0, ror #30
   3df14:	andeq	sp, r3, r0, ror #30
   3df18:	andeq	sp, r3, r0, ror #30
   3df1c:			; <UNDEFINED> instruction: 0x0003e1b0
   3df20:	andeq	sp, r3, r0, ror #30
   3df24:	andeq	sp, r3, r0, ror #30
   3df28:	andeq	sp, r3, r0, ror #30
   3df2c:	muleq	r3, r8, r1
   3df30:	andeq	sp, r3, r0, ror #30
   3df34:	andeq	sp, r3, r0, ror #30
   3df38:	andeq	sp, r3, r0, ror #30
   3df3c:	andeq	sp, r3, r8, asr #30
   3df40:	andeq	lr, r3, r0, lsl #3
   3df44:	andeq	lr, r3, r4, ror #2
   3df48:	and	r8, r8, #4608	; 0x1200
   3df4c:	cmp	r8, #512	; 0x200
   3df50:	moveq	r3, #23
   3df54:	strbeq	r3, [r5, #4]
   3df58:	moveq	r0, #2
   3df5c:	beq	3dd00 <__assert_fail@plt+0x2b70c>
   3df60:	mov	r0, #2
   3df64:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3df68:	ldrb	r3, [r0, #6]
   3df6c:	mov	r0, #1
   3df70:	strb	r0, [r5, #4]
   3df74:	orr	r3, r3, #32
   3df78:	strb	r3, [r5, #6]
   3df7c:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3df80:	mov	r3, #36	; 0x24
   3df84:	strb	r3, [r5, #4]
   3df88:	mov	r0, #1
   3df8c:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3df90:	and	r8, r8, #4608	; 0x1200
   3df94:	cmp	r8, #4608	; 0x1200
   3df98:	moveq	r3, #24
   3df9c:	strbeq	r3, [r5, #4]
   3dfa0:	moveq	r0, #1
   3dfa4:	bne	3dd64 <__assert_fail@plt+0x2b770>
   3dfa8:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3dfac:	tst	r8, #2048	; 0x800
   3dfb0:	beq	3dd64 <__assert_fail@plt+0x2b770>
   3dfb4:	mov	r3, #10
   3dfb8:	strb	r3, [r5, #4]
   3dfbc:	mov	r0, #1
   3dfc0:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3dfc4:	tst	r8, #8
   3dfc8:	bne	3e00c <__assert_fail@plt+0x2ba18>
   3dfcc:	ldr	r3, [r4, #48]	; 0x30
   3dfd0:	add	r6, r6, #1
   3dfd4:	cmp	r6, r3
   3dfd8:	beq	3e00c <__assert_fail@plt+0x2ba18>
   3dfdc:	mov	r2, r8
   3dfe0:	str	r6, [r4, #40]	; 0x28
   3dfe4:	mov	r1, r4
   3dfe8:	mov	r0, sp
   3dfec:	bl	3da6c <__assert_fail@plt+0x2b478>
   3dff0:	ldrb	r2, [sp, #4]
   3dff4:	ldr	r3, [r4, #40]	; 0x28
   3dff8:	sub	r2, r2, #9
   3dffc:	sub	r3, r3, #1
   3e000:	cmp	r2, #1
   3e004:	str	r3, [r4, #40]	; 0x28
   3e008:	bhi	3dd64 <__assert_fail@plt+0x2b770>
   3e00c:	mov	r2, #12
   3e010:	mov	r3, #32
   3e014:	strb	r2, [r5, #4]
   3e018:	str	r3, [r5]
   3e01c:	mov	r0, #1
   3e020:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e024:	tst	r8, #8192	; 0x2000
   3e028:	beq	3dd64 <__assert_fail@plt+0x2b770>
   3e02c:	mov	r3, #8
   3e030:	strb	r3, [r5, #4]
   3e034:	mov	r0, #1
   3e038:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e03c:	tst	r8, #8192	; 0x2000
   3e040:	beq	3dd64 <__assert_fail@plt+0x2b770>
   3e044:	mov	r3, #9
   3e048:	strb	r3, [r5, #4]
   3e04c:	mov	r0, #1
   3e050:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e054:	mov	r3, #11
   3e058:	strb	r3, [r5, #4]
   3e05c:	mov	r0, #1
   3e060:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e064:	ldr	r3, [pc, #864]	; 3e3cc <__assert_fail@plt+0x2bdd8>
   3e068:	and	r3, r3, r8
   3e06c:	cmp	r3, #0
   3e070:	bne	3dd64 <__assert_fail@plt+0x2b770>
   3e074:	mov	r3, #18
   3e078:	strb	r3, [r5, #4]
   3e07c:	mov	r0, #1
   3e080:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e084:	mov	r3, #5
   3e088:	strb	r3, [r5, #4]
   3e08c:	mov	r0, #1
   3e090:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e094:	ldr	r3, [pc, #816]	; 3e3cc <__assert_fail@plt+0x2bdd8>
   3e098:	and	r3, r3, r8
   3e09c:	cmp	r3, #0
   3e0a0:	bne	3dd64 <__assert_fail@plt+0x2b770>
   3e0a4:	mov	r3, #19
   3e0a8:	strb	r3, [r5, #4]
   3e0ac:	mov	r0, #1
   3e0b0:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e0b4:	mov	r3, #20
   3e0b8:	strb	r3, [r5, #4]
   3e0bc:	mov	r0, #1
   3e0c0:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e0c4:	ldr	r3, [pc, #772]	; 3e3d0 <__assert_fail@plt+0x2bddc>
   3e0c8:	cmp	r6, #0
   3e0cc:	and	r3, r3, r8
   3e0d0:	clz	r3, r3
   3e0d4:	lsr	r3, r3, #5
   3e0d8:	moveq	r3, #0
   3e0dc:	cmp	r3, #0
   3e0e0:	beq	3e104 <__assert_fail@plt+0x2bb10>
   3e0e4:	add	r6, sl, r6
   3e0e8:	lsr	r3, r8, #11
   3e0ec:	ldrb	r2, [r6, #-1]
   3e0f0:	eor	r3, r3, #1
   3e0f4:	cmp	r2, #10
   3e0f8:	orrne	r3, r3, #1
   3e0fc:	tst	r3, #1
   3e100:	bne	3dd64 <__assert_fail@plt+0x2b770>
   3e104:	mov	r2, #12
   3e108:	mov	r3, #16
   3e10c:	strb	r2, [r5, #4]
   3e110:	str	r3, [r5]
   3e114:	mov	r0, #1
   3e118:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e11c:	and	r8, r8, #33792	; 0x8400
   3e120:	cmp	r8, #32768	; 0x8000
   3e124:	bne	3dd64 <__assert_fail@plt+0x2b770>
   3e128:	b	3dfb4 <__assert_fail@plt+0x2b9c0>
   3e12c:	tst	r8, #8192	; 0x2000
   3e130:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e134:	mov	r3, #8
   3e138:	strb	r3, [r5, #4]
   3e13c:	mov	r0, #2
   3e140:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e144:	tst	r8, #524288	; 0x80000
   3e148:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e14c:	mov	r2, #12
   3e150:	mov	r3, #128	; 0x80
   3e154:	strb	r2, [r5, #4]
   3e158:	str	r3, [r5]
   3e15c:	mov	r0, #2
   3e160:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e164:	and	r8, r8, #4608	; 0x1200
   3e168:	cmp	r8, #512	; 0x200
   3e16c:	moveq	r3, #24
   3e170:	strbeq	r3, [r5, #4]
   3e174:	moveq	r0, #2
   3e178:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e17c:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e180:	tst	r8, #33792	; 0x8400
   3e184:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e188:	mov	r3, #10
   3e18c:	strb	r3, [r5, #4]
   3e190:	mov	r0, #2
   3e194:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e198:	tst	r8, #524288	; 0x80000
   3e19c:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e1a0:	mov	r3, #32
   3e1a4:	strb	r3, [r5, #4]
   3e1a8:	mov	r0, #2
   3e1ac:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e1b0:	tst	r8, #524288	; 0x80000
   3e1b4:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e1b8:	mov	r3, #34	; 0x22
   3e1bc:	strb	r3, [r5, #4]
   3e1c0:	mov	r0, #2
   3e1c4:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e1c8:	tst	r8, #524288	; 0x80000
   3e1cc:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e1d0:	mov	r2, #12
   3e1d4:	mov	r3, #256	; 0x100
   3e1d8:	strb	r2, [r5, #4]
   3e1dc:	str	r3, [r5]
   3e1e0:	mov	r0, #2
   3e1e4:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e1e8:	tst	r8, #524288	; 0x80000
   3e1ec:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e1f0:	mov	r2, #12
   3e1f4:	mov	r3, #64	; 0x40
   3e1f8:	strb	r2, [r5, #4]
   3e1fc:	str	r3, [r5]
   3e200:	mov	r0, #2
   3e204:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e208:	tst	r8, #524288	; 0x80000
   3e20c:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e210:	mov	r3, #33	; 0x21
   3e214:	strb	r3, [r5, #4]
   3e218:	mov	r0, #2
   3e21c:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e220:	tst	r8, #524288	; 0x80000
   3e224:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e228:	mov	r3, #35	; 0x23
   3e22c:	strb	r3, [r5, #4]
   3e230:	mov	r0, #2
   3e234:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e238:	tst	r8, #524288	; 0x80000
   3e23c:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e240:	mov	r2, #12
   3e244:	mov	r3, #512	; 0x200
   3e248:	strb	r2, [r5, #4]
   3e24c:	str	r3, [r5]
   3e250:	mov	r0, #2
   3e254:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e258:	ldr	r0, [pc, #364]	; 3e3cc <__assert_fail@plt+0x2bdd8>
   3e25c:	and	r0, r0, r8
   3e260:	cmp	r0, #2
   3e264:	moveq	r3, #19
   3e268:	strbeq	r3, [r5, #4]
   3e26c:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e270:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e274:	tst	r8, #524288	; 0x80000
   3e278:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e27c:	mov	r2, #12
   3e280:	mov	r3, #9
   3e284:	strb	r2, [r5, #4]
   3e288:	str	r3, [r5]
   3e28c:	mov	r0, #2
   3e290:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e294:	tst	r8, #524288	; 0x80000
   3e298:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e29c:	mov	r2, #12
   3e2a0:	mov	r3, #6
   3e2a4:	strb	r2, [r5, #4]
   3e2a8:	str	r3, [r5]
   3e2ac:	mov	r0, #2
   3e2b0:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e2b4:	tst	r8, #16384	; 0x4000
   3e2b8:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e2bc:	sub	r6, r6, #49	; 0x31
   3e2c0:	mov	r3, #4
   3e2c4:	str	r6, [r5]
   3e2c8:	strb	r3, [r5, #4]
   3e2cc:	mov	r0, #2
   3e2d0:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e2d4:	ldr	r0, [pc, #240]	; 3e3cc <__assert_fail@plt+0x2bdd8>
   3e2d8:	and	r0, r0, r8
   3e2dc:	cmp	r0, #2
   3e2e0:	moveq	r3, #18
   3e2e4:	strbeq	r3, [r5, #4]
   3e2e8:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e2ec:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e2f0:	tst	r8, #8192	; 0x2000
   3e2f4:	bne	3df60 <__assert_fail@plt+0x2b96c>
   3e2f8:	mov	r3, #9
   3e2fc:	strb	r3, [r5, #4]
   3e300:	mov	r0, #2
   3e304:	b	3dd00 <__assert_fail@plt+0x2b70c>
   3e308:	bl	122b8 <__ctype_b_loc@plt>
   3e30c:	lsl	r3, r6, #1
   3e310:	ldrb	r2, [r5, #6]
   3e314:	bic	r2, r2, #64	; 0x40
   3e318:	ldr	r1, [r0]
   3e31c:	ldrh	r3, [r1, r3]
   3e320:	lsr	r3, r3, #3
   3e324:	and	r3, r3, #1
   3e328:	cmp	r6, #95	; 0x5f
   3e32c:	orreq	r3, r3, #1
   3e330:	orr	r3, r2, r3, lsl #6
   3e334:	strb	r3, [r5, #6]
   3e338:	b	3dddc <__assert_fail@plt+0x2b7e8>
   3e33c:	cmp	r3, #1
   3e340:	ble	3e374 <__assert_fail@plt+0x2bd80>
   3e344:	ldr	r0, [r4, #8]
   3e348:	add	r1, r0, r2, lsl #2
   3e34c:	ldr	r0, [r0, r2, lsl #2]
   3e350:	cmn	r0, #1
   3e354:	beq	3e3b8 <__assert_fail@plt+0x2bdc4>
   3e358:	ldr	r0, [r4, #28]
   3e35c:	add	r6, r6, #2
   3e360:	cmp	r0, r6
   3e364:	beq	3e374 <__assert_fail@plt+0x2bd80>
   3e368:	ldr	r0, [r1, #4]
   3e36c:	cmn	r0, #1
   3e370:	beq	3e3b8 <__assert_fail@plt+0x2bdc4>
   3e374:	ldrb	r1, [r4, #76]	; 0x4c
   3e378:	cmp	r1, #0
   3e37c:	bne	3e394 <__assert_fail@plt+0x2bda0>
   3e380:	ldr	r1, [r4]
   3e384:	ldr	r0, [r4, #24]
   3e388:	add	r1, r1, r2
   3e38c:	ldrb	r6, [r1, r0]
   3e390:	b	3dd90 <__assert_fail@plt+0x2b79c>
   3e394:	ldr	ip, [r4, #12]
   3e398:	ldr	r1, [r4]
   3e39c:	ldr	r0, [r4, #24]
   3e3a0:	ldr	ip, [ip, r2, lsl #2]
   3e3a4:	add	r1, r1, ip
   3e3a8:	ldrb	r6, [r1, r0]
   3e3ac:	tst	r6, #128	; 0x80
   3e3b0:	bne	3dd8c <__assert_fail@plt+0x2b798>
   3e3b4:	b	3dd90 <__assert_fail@plt+0x2b79c>
   3e3b8:	ldrb	r6, [sl, r2]
   3e3bc:	mov	r3, #1
   3e3c0:	strb	r3, [r5, #4]
   3e3c4:	strb	r6, [r5]
   3e3c8:	b	3ddac <__assert_fail@plt+0x2b7b8>
   3e3cc:	andeq	r0, r0, r2, lsl #8
   3e3d0:	addeq	r0, r0, r8
   3e3d4:	ldr	ip, [r1]
   3e3d8:	push	{r4, r5, r6, lr}
   3e3dc:	cmp	ip, #31
   3e3e0:	sub	sp, sp, #8
   3e3e4:	mov	r5, r0
   3e3e8:	beq	3e44c <__assert_fail@plt+0x2be58>
   3e3ec:	lsl	r3, ip, #5
   3e3f0:	ldr	r4, [r0]
   3e3f4:	add	lr, ip, #1
   3e3f8:	add	r6, r3, #4
   3e3fc:	add	r3, r4, r3
   3e400:	mov	ip, #0
   3e404:	str	lr, [r1]
   3e408:	str	ip, [r3, #4]
   3e40c:	str	ip, [r3, #8]
   3e410:	str	ip, [r3, #12]
   3e414:	ldm	r2, {r0, r1}
   3e418:	add	r2, r3, #24
   3e41c:	add	r4, r4, r6
   3e420:	stm	r2, {r0, r1}
   3e424:	ldrb	r2, [r3, #30]
   3e428:	mvn	r1, #0
   3e42c:	str	ip, [r3, #16]
   3e430:	and	r2, r2, #243	; 0xf3
   3e434:	str	ip, [r3, #20]
   3e438:	strb	r2, [r3, #30]
   3e43c:	str	r1, [r3, #32]
   3e440:	mov	r0, r4
   3e444:	add	sp, sp, #8
   3e448:	pop	{r4, r5, r6, pc}
   3e44c:	mov	r0, #996	; 0x3e4
   3e450:	stm	sp, {r1, r2}
   3e454:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3e458:	subs	r4, r0, #0
   3e45c:	beq	3e440 <__assert_fail@plt+0x2be4c>
   3e460:	ldr	r0, [r5]
   3e464:	mov	r6, #4
   3e468:	mov	lr, #1
   3e46c:	mov	r3, #0
   3e470:	str	r0, [r4]
   3e474:	str	r4, [r5]
   3e478:	ldm	sp, {r1, r2}
   3e47c:	b	3e3fc <__assert_fail@plt+0x2be08>
   3e480:	push	{r4, r5, r6, lr}
   3e484:	mov	r4, r0
   3e488:	ldr	r5, [pc, #168]	; 3e538 <__assert_fail@plt+0x2bf44>
   3e48c:	b	3e494 <__assert_fail@plt+0x2bea0>
   3e490:	mov	r4, r3
   3e494:	ldr	r3, [r4, #4]
   3e498:	cmp	r3, #0
   3e49c:	bne	3e490 <__assert_fail@plt+0x2be9c>
   3e4a0:	ldr	r3, [r4, #8]
   3e4a4:	cmp	r3, #0
   3e4a8:	bne	3e490 <__assert_fail@plt+0x2be9c>
   3e4ac:	ldr	r3, [r4, #24]
   3e4b0:	and	r3, r3, r5
   3e4b4:	cmp	r3, #6
   3e4b8:	bne	3e524 <__assert_fail@plt+0x2bf30>
   3e4bc:	ldr	r6, [r4, #20]
   3e4c0:	ldr	r0, [r6]
   3e4c4:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e4c8:	ldr	r0, [r6, #4]
   3e4cc:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e4d0:	ldr	r0, [r6, #8]
   3e4d4:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e4d8:	ldr	r0, [r6, #12]
   3e4dc:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e4e0:	mov	r0, r6
   3e4e4:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e4e8:	ldr	r0, [r4]
   3e4ec:	cmp	r0, #0
   3e4f0:	popeq	{r4, r5, r6, pc}
   3e4f4:	ldr	r3, [r0, #8]
   3e4f8:	cmp	r4, r3
   3e4fc:	cmpne	r3, #0
   3e500:	moveq	r4, #1
   3e504:	movne	r4, #0
   3e508:	cmp	r4, #0
   3e50c:	mov	r4, r0
   3e510:	beq	3e490 <__assert_fail@plt+0x2be9c>
   3e514:	ldr	r3, [r4, #24]
   3e518:	and	r3, r3, r5
   3e51c:	cmp	r3, #6
   3e520:	beq	3e4bc <__assert_fail@plt+0x2bec8>
   3e524:	cmp	r3, #3
   3e528:	bne	3e4e8 <__assert_fail@plt+0x2bef4>
   3e52c:	ldr	r0, [r4, #20]
   3e530:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e534:	b	3e4e8 <__assert_fail@plt+0x2bef4>
   3e538:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   3e53c:	ldr	r2, [r0]
   3e540:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e544:	cmp	r2, #0
   3e548:	mov	r7, r0
   3e54c:	beq	3e5ac <__assert_fail@plt+0x2bfb8>
   3e550:	ldr	r0, [r0, #8]
   3e554:	cmp	r0, #0
   3e558:	beq	3e5ac <__assert_fail@plt+0x2bfb8>
   3e55c:	ldr	r5, [pc, #500]	; 3e758 <__assert_fail@plt+0x2c164>
   3e560:	mov	r4, #0
   3e564:	b	3e578 <__assert_fail@plt+0x2bf84>
   3e568:	add	r4, r4, #1
   3e56c:	cmp	r4, r0
   3e570:	bcs	3e5ac <__assert_fail@plt+0x2bfb8>
   3e574:	ldr	r2, [r7]
   3e578:	add	r1, r2, r4, lsl #3
   3e57c:	ldr	r3, [r1, #4]
   3e580:	and	r3, r3, r5
   3e584:	cmp	r3, #6
   3e588:	beq	3e724 <__assert_fail@plt+0x2c130>
   3e58c:	cmp	r3, #3
   3e590:	bne	3e568 <__assert_fail@plt+0x2bf74>
   3e594:	ldr	r0, [r1]
   3e598:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e59c:	ldr	r0, [r7, #8]
   3e5a0:	add	r4, r4, #1
   3e5a4:	cmp	r4, r0
   3e5a8:	bcc	3e574 <__assert_fail@plt+0x2bf80>
   3e5ac:	ldr	r0, [r7, #12]
   3e5b0:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e5b4:	ldr	r3, [r7, #8]
   3e5b8:	cmp	r3, #0
   3e5bc:	movne	r4, #0
   3e5c0:	movne	r5, r4
   3e5c4:	beq	3e624 <__assert_fail@plt+0x2c030>
   3e5c8:	ldr	r3, [r7, #24]
   3e5cc:	add	r5, r5, #1
   3e5d0:	cmp	r3, #0
   3e5d4:	add	r2, r3, r4
   3e5d8:	beq	3e5e4 <__assert_fail@plt+0x2bff0>
   3e5dc:	ldr	r0, [r2, #8]
   3e5e0:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e5e4:	ldr	r3, [r7, #28]
   3e5e8:	cmp	r3, #0
   3e5ec:	add	r2, r3, r4
   3e5f0:	beq	3e5fc <__assert_fail@plt+0x2c008>
   3e5f4:	ldr	r0, [r2, #8]
   3e5f8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e5fc:	ldr	r3, [r7, #20]
   3e600:	cmp	r3, #0
   3e604:	add	r2, r3, r4
   3e608:	beq	3e614 <__assert_fail@plt+0x2c020>
   3e60c:	ldr	r0, [r2, #8]
   3e610:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e614:	ldr	r3, [r7, #8]
   3e618:	add	r4, r4, #12
   3e61c:	cmp	r3, r5
   3e620:	bhi	3e5c8 <__assert_fail@plt+0x2bfd4>
   3e624:	ldr	r0, [r7, #20]
   3e628:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e62c:	ldr	r0, [r7, #24]
   3e630:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e634:	ldr	r0, [r7, #28]
   3e638:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e63c:	ldr	r0, [r7]
   3e640:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e644:	ldr	r0, [r7, #32]
   3e648:	cmp	r0, #0
   3e64c:	beq	3e6f8 <__assert_fail@plt+0x2c104>
   3e650:	mov	r8, #0
   3e654:	mov	r9, r8
   3e658:	ldr	r3, [r0, r8]
   3e65c:	add	r6, r0, r8
   3e660:	cmp	r3, #0
   3e664:	movgt	r5, #0
   3e668:	ble	3e6d4 <__assert_fail@plt+0x2c0e0>
   3e66c:	ldr	r3, [r6, #8]
   3e670:	ldr	r4, [r3, r5, lsl #2]
   3e674:	add	r5, r5, #1
   3e678:	ldr	r0, [r4, #24]
   3e67c:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e680:	ldr	r0, [r4, #36]	; 0x24
   3e684:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e688:	ldr	r3, [r4, #40]	; 0x28
   3e68c:	add	r2, r4, #4
   3e690:	cmp	r3, r2
   3e694:	beq	3e6a8 <__assert_fail@plt+0x2c0b4>
   3e698:	ldr	r0, [r3, #8]
   3e69c:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e6a0:	ldr	r0, [r4, #40]	; 0x28
   3e6a4:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e6a8:	ldr	r0, [r4, #12]
   3e6ac:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e6b0:	ldr	r0, [r4, #48]	; 0x30
   3e6b4:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e6b8:	ldr	r0, [r4, #44]	; 0x2c
   3e6bc:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e6c0:	mov	r0, r4
   3e6c4:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e6c8:	ldr	r3, [r6]
   3e6cc:	cmp	r3, r5
   3e6d0:	bgt	3e66c <__assert_fail@plt+0x2c078>
   3e6d4:	ldr	r0, [r6, #8]
   3e6d8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e6dc:	ldr	r3, [r7, #68]	; 0x44
   3e6e0:	add	r9, r9, #1
   3e6e4:	cmp	r3, r9
   3e6e8:	add	r8, r8, #12
   3e6ec:	ldrcs	r0, [r7, #32]
   3e6f0:	bcs	3e658 <__assert_fail@plt+0x2c064>
   3e6f4:	ldr	r0, [r7, #32]
   3e6f8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e6fc:	ldr	r0, [r7, #60]	; 0x3c
   3e700:	ldr	r3, [pc, #84]	; 3e75c <__assert_fail@plt+0x2c168>
   3e704:	cmp	r0, r3
   3e708:	beq	3e710 <__assert_fail@plt+0x2c11c>
   3e70c:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e710:	ldr	r0, [r7, #132]	; 0x84
   3e714:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e718:	mov	r0, r7
   3e71c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e720:	b	376d0 <__assert_fail@plt+0x250dc>
   3e724:	ldr	r6, [r2, r4, lsl #3]
   3e728:	ldr	r0, [r6]
   3e72c:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e730:	ldr	r0, [r6, #4]
   3e734:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e738:	ldr	r0, [r6, #8]
   3e73c:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e740:	ldr	r0, [r6, #12]
   3e744:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e748:	mov	r0, r6
   3e74c:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e750:	ldr	r0, [r7, #8]
   3e754:	b	3e568 <__assert_fail@plt+0x2bf74>
   3e758:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   3e75c:	andeq	r3, r5, r4, lsr #21
   3e760:	ldr	r3, [pc, #96]	; 3e7c8 <__assert_fail@plt+0x2c1d4>
   3e764:	ldr	r2, [r1, #24]
   3e768:	push	{r4, lr}
   3e76c:	and	r3, r3, r2
   3e770:	cmp	r3, #6
   3e774:	beq	3e798 <__assert_fail@plt+0x2c1a4>
   3e778:	cmp	r3, #3
   3e77c:	beq	3e788 <__assert_fail@plt+0x2c194>
   3e780:	mov	r0, #0
   3e784:	pop	{r4, pc}
   3e788:	ldr	r0, [r1, #20]
   3e78c:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e790:	mov	r0, #0
   3e794:	pop	{r4, pc}
   3e798:	ldr	r4, [r1, #20]
   3e79c:	ldr	r0, [r4]
   3e7a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e7a4:	ldr	r0, [r4, #4]
   3e7a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e7ac:	ldr	r0, [r4, #8]
   3e7b0:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e7b4:	ldr	r0, [r4, #12]
   3e7b8:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e7bc:	mov	r0, r4
   3e7c0:	bl	376d0 <__assert_fail@plt+0x250dc>
   3e7c4:	b	3e780 <__assert_fail@plt+0x2c18c>
   3e7c8:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   3e7cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   3e7d0:	sub	sp, sp, #12
   3e7d4:	mov	r5, r0
   3e7d8:	ldr	r6, [sp, #40]	; 0x28
   3e7dc:	mov	r4, r1
   3e7e0:	mov	r9, r2
   3e7e4:	mov	r8, r3
   3e7e8:	mov	r7, #0
   3e7ec:	ldr	r0, [r4, #4]
   3e7f0:	cmp	r0, #0
   3e7f4:	ble	3e850 <__assert_fail@plt+0x2c25c>
   3e7f8:	ldr	ip, [r4, #8]
   3e7fc:	sub	r0, r0, #1
   3e800:	mov	r1, r7
   3e804:	cmp	r1, r0
   3e808:	bcs	3e844 <__assert_fail@plt+0x2c250>
   3e80c:	add	r2, r1, r0
   3e810:	lsr	r2, r2, #1
   3e814:	ldr	r3, [ip, r2, lsl #2]
   3e818:	cmp	r9, r3
   3e81c:	ble	3e834 <__assert_fail@plt+0x2c240>
   3e820:	b	3e8b4 <__assert_fail@plt+0x2c2c0>
   3e824:	ldr	r0, [ip, r3, lsl #2]
   3e828:	cmp	r9, r0
   3e82c:	bgt	3e8bc <__assert_fail@plt+0x2c2c8>
   3e830:	mov	r2, r3
   3e834:	add	r3, r2, r1
   3e838:	cmp	r2, r1
   3e83c:	lsr	r3, r3, #1
   3e840:	bhi	3e824 <__assert_fail@plt+0x2c230>
   3e844:	ldr	r3, [ip, r1, lsl #2]
   3e848:	cmp	r9, r3
   3e84c:	beq	3e8e4 <__assert_fail@plt+0x2c2f0>
   3e850:	ldr	r3, [r5]
   3e854:	add	r2, r3, r9, lsl #3
   3e858:	ldrb	r2, [r2, #4]
   3e85c:	cmp	r2, r6
   3e860:	bne	3e870 <__assert_fail@plt+0x2c27c>
   3e864:	ldr	r3, [r3, r9, lsl #3]
   3e868:	cmp	r8, r3
   3e86c:	beq	3e8c8 <__assert_fail@plt+0x2c2d4>
   3e870:	mov	r1, r9
   3e874:	mov	r0, r4
   3e878:	bl	3b700 <__assert_fail@plt+0x2910c>
   3e87c:	cmp	r0, #0
   3e880:	beq	3e920 <__assert_fail@plt+0x2c32c>
   3e884:	add	r9, r9, r9, lsl #1
   3e888:	ldr	r3, [r5, #20]
   3e88c:	lsl	r9, r9, #2
   3e890:	add	r3, r3, r9
   3e894:	ldr	r2, [r3, #4]
   3e898:	cmp	r2, #0
   3e89c:	beq	3e8e4 <__assert_fail@plt+0x2c2f0>
   3e8a0:	cmp	r2, #2
   3e8a4:	beq	3e8f0 <__assert_fail@plt+0x2c2fc>
   3e8a8:	ldr	r3, [r3, #8]
   3e8ac:	ldr	r9, [r3]
   3e8b0:	b	3e7ec <__assert_fail@plt+0x2c1f8>
   3e8b4:	mov	r3, r2
   3e8b8:	mov	r2, r0
   3e8bc:	add	r1, r3, #1
   3e8c0:	mov	r0, r2
   3e8c4:	b	3e804 <__assert_fail@plt+0x2c210>
   3e8c8:	cmp	r6, #9
   3e8cc:	bne	3e8e4 <__assert_fail@plt+0x2c2f0>
   3e8d0:	mov	r1, r9
   3e8d4:	mov	r0, r4
   3e8d8:	bl	3b700 <__assert_fail@plt+0x2910c>
   3e8dc:	cmp	r0, #0
   3e8e0:	beq	3e920 <__assert_fail@plt+0x2c32c>
   3e8e4:	mov	r0, #0
   3e8e8:	add	sp, sp, #12
   3e8ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3e8f0:	ldr	r2, [r3, #8]
   3e8f4:	mov	r1, r4
   3e8f8:	mov	r3, r8
   3e8fc:	ldr	r2, [r2, #4]
   3e900:	mov	r0, r5
   3e904:	str	r6, [sp]
   3e908:	bl	3e7cc <__assert_fail@plt+0x2c1d8>
   3e90c:	cmp	r0, #0
   3e910:	bne	3e8e8 <__assert_fail@plt+0x2c2f4>
   3e914:	ldr	r3, [r5, #20]
   3e918:	add	r3, r3, r9
   3e91c:	b	3e8a8 <__assert_fail@plt+0x2c2b4>
   3e920:	mov	r0, #12
   3e924:	add	sp, sp, #12
   3e928:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3e92c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e930:	sub	sp, sp, #20
   3e934:	ldr	r8, [pc, #940]	; 3ece8 <__assert_fail@plt+0x2c6f4>
   3e938:	ldr	fp, [sp, #56]	; 0x38
   3e93c:	mov	r7, r1
   3e940:	mov	r5, r0
   3e944:	mov	r4, r2
   3e948:	lsl	r6, r1, #3
   3e94c:	str	r3, [sp, #8]
   3e950:	ldr	lr, [r5]
   3e954:	add	r6, lr, r6
   3e958:	ldrb	r3, [r6, #4]
   3e95c:	cmp	r3, #4
   3e960:	beq	3ebf4 <__assert_fail@plt+0x2c600>
   3e964:	add	sl, r7, r7, lsl #1
   3e968:	ldr	r0, [r5, #20]
   3e96c:	lsl	sl, sl, #2
   3e970:	add	ip, r0, sl
   3e974:	ldr	r3, [ip, #4]
   3e978:	cmp	r3, #0
   3e97c:	beq	3ecbc <__assert_fail@plt+0x2c6c8>
   3e980:	cmp	r3, #1
   3e984:	beq	3eb88 <__assert_fail@plt+0x2c594>
   3e988:	ldr	r2, [r5, #8]
   3e98c:	add	r4, r4, r4, lsl #1
   3e990:	sub	r1, r2, #1
   3e994:	cmp	r1, #0
   3e998:	add	r3, lr, r1, lsl #3
   3e99c:	lsl	r9, r4, #2
   3e9a0:	ldrb	r6, [r3, #6]
   3e9a4:	ldr	r4, [ip, #8]
   3e9a8:	add	r0, r0, r9
   3e9ac:	movle	ip, #0
   3e9b0:	movgt	ip, #1
   3e9b4:	ands	ip, ip, r6, lsr #2
   3e9b8:	mov	ip, #0
   3e9bc:	ldr	r4, [r4]
   3e9c0:	str	ip, [r0, #4]
   3e9c4:	beq	3ead4 <__assert_fail@plt+0x2c4e0>
   3e9c8:	ldr	ip, [r5, #16]
   3e9cc:	rsb	r7, r3, r2, lsl #3
   3e9d0:	sub	r7, r7, #16
   3e9d4:	add	r2, ip, r2, lsl #2
   3e9d8:	b	3e9fc <__assert_fail@plt+0x2c408>
   3e9dc:	add	r3, lr, r6
   3e9e0:	sub	r1, r1, #1
   3e9e4:	ldrb	r6, [r3, #6]
   3e9e8:	cmp	r1, #0
   3e9ec:	movle	ip, #0
   3e9f0:	movgt	ip, #1
   3e9f4:	ands	ip, ip, r6, lsr #2
   3e9f8:	beq	3ead4 <__assert_fail@plt+0x2c4e0>
   3e9fc:	ldr	ip, [r2, #-4]!
   3ea00:	add	r6, r3, r7
   3ea04:	cmp	r4, ip
   3ea08:	bne	3e9dc <__assert_fail@plt+0x2c3e8>
   3ea0c:	ldr	r3, [r3, #4]
   3ea10:	and	r3, r8, r3, lsr #8
   3ea14:	cmp	fp, r3
   3ea18:	bne	3e9dc <__assert_fail@plt+0x2c3e8>
   3ea1c:	bl	3b700 <__assert_fail@plt+0x2910c>
   3ea20:	cmp	r0, #0
   3ea24:	beq	3eac8 <__assert_fail@plt+0x2c4d4>
   3ea28:	ldr	r2, [r5, #20]
   3ea2c:	ldr	r3, [r5]
   3ea30:	add	sl, r2, sl
   3ea34:	mov	r0, r5
   3ea38:	ldr	r2, [sl, #8]
   3ea3c:	ldr	r7, [r2, #4]
   3ea40:	lsl	r6, r7, #3
   3ea44:	add	r3, r3, r6
   3ea48:	ldm	r3, {r1, r2}
   3ea4c:	bl	3b54c <__assert_fail@plt+0x28f58>
   3ea50:	cmn	r0, #1
   3ea54:	mov	r4, r0
   3ea58:	beq	3eac8 <__assert_fail@plt+0x2c4d4>
   3ea5c:	ldr	r1, [r5]
   3ea60:	ldr	lr, [pc, #644]	; 3ecec <__assert_fail@plt+0x2c6f8>
   3ea64:	add	r2, r1, r4, lsl #3
   3ea68:	and	r0, fp, r8
   3ea6c:	ldr	r3, [r2, #4]
   3ea70:	add	ip, r1, r6
   3ea74:	bic	r3, r3, lr
   3ea78:	orr	r3, r3, r0, lsl #8
   3ea7c:	str	r3, [r2, #4]
   3ea80:	ldr	ip, [ip, #4]
   3ea84:	bic	r3, r3, lr
   3ea88:	mov	r1, r4
   3ea8c:	and	ip, r8, ip, lsr #8
   3ea90:	orr	r0, r0, ip
   3ea94:	orr	r3, r3, r0, lsl #8
   3ea98:	str	r3, [r2, #4]
   3ea9c:	lsr	r3, r3, #16
   3eaa0:	uxtb	r3, r3
   3eaa4:	orr	r3, r3, #4
   3eaa8:	strb	r3, [r2, #6]
   3eaac:	ldr	r3, [r5, #16]
   3eab0:	ldr	r0, [r5, #20]
   3eab4:	str	r7, [r3, r4, lsl #2]
   3eab8:	add	r0, r0, r9
   3eabc:	bl	3b700 <__assert_fail@plt+0x2910c>
   3eac0:	cmp	r0, #0
   3eac4:	bne	3e950 <__assert_fail@plt+0x2c35c>
   3eac8:	mov	r0, #12
   3eacc:	add	sp, sp, #20
   3ead0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ead4:	lsl	r6, r4, #3
   3ead8:	add	lr, lr, r6
   3eadc:	mov	r0, r5
   3eae0:	ldm	lr, {r1, r2}
   3eae4:	bl	3b54c <__assert_fail@plt+0x28f58>
   3eae8:	cmn	r0, #1
   3eaec:	mov	r7, r0
   3eaf0:	beq	3eac8 <__assert_fail@plt+0x2c4d4>
   3eaf4:	ldr	r3, [r5]
   3eaf8:	ldr	ip, [pc, #492]	; 3ecec <__assert_fail@plt+0x2c6f8>
   3eafc:	add	r2, r3, r7, lsl #3
   3eb00:	add	r6, r3, r6
   3eb04:	ldr	r3, [r2, #4]
   3eb08:	and	r0, fp, r8
   3eb0c:	bic	r3, r3, ip
   3eb10:	orr	r3, r3, r0, lsl #8
   3eb14:	str	r3, [r2, #4]
   3eb18:	ldr	ip, [r6, #4]
   3eb1c:	ldr	lr, [pc, #456]	; 3ecec <__assert_fail@plt+0x2c6f8>
   3eb20:	mov	r1, r7
   3eb24:	and	ip, r8, ip, lsr #8
   3eb28:	orr	r0, r0, ip
   3eb2c:	bic	r3, r3, lr
   3eb30:	orr	r3, r3, r0, lsl #8
   3eb34:	str	r3, [r2, #4]
   3eb38:	lsr	r3, r3, #16
   3eb3c:	uxtb	r3, r3
   3eb40:	orr	r3, r3, #4
   3eb44:	strb	r3, [r2, #6]
   3eb48:	ldr	r3, [r5, #16]
   3eb4c:	ldr	r0, [r5, #20]
   3eb50:	str	r4, [r3, r7, lsl #2]
   3eb54:	add	r0, r0, r9
   3eb58:	bl	3b700 <__assert_fail@plt+0x2910c>
   3eb5c:	cmp	r0, #0
   3eb60:	beq	3eac8 <__assert_fail@plt+0x2c4d4>
   3eb64:	str	fp, [sp]
   3eb68:	mov	r2, r7
   3eb6c:	mov	r1, r4
   3eb70:	ldr	r3, [sp, #8]
   3eb74:	mov	r0, r5
   3eb78:	bl	3e92c <__assert_fail@plt+0x2c338>
   3eb7c:	cmp	r0, #0
   3eb80:	beq	3ea28 <__assert_fail@plt+0x2c434>
   3eb84:	b	3eacc <__assert_fail@plt+0x2c4d8>
   3eb88:	add	r9, r4, r4, lsl #1
   3eb8c:	ldr	r3, [ip, #8]
   3eb90:	ldr	r2, [sp, #8]
   3eb94:	cmp	r7, r4
   3eb98:	lsl	r9, r9, #2
   3eb9c:	sub	r2, r7, r2
   3eba0:	add	r0, r0, r9
   3eba4:	clz	r2, r2
   3eba8:	lsr	r2, r2, #5
   3ebac:	moveq	r2, #0
   3ebb0:	ldr	r7, [r3]
   3ebb4:	cmp	r2, #0
   3ebb8:	mov	r3, #0
   3ebbc:	str	r3, [r0, #4]
   3ebc0:	bne	3ecd0 <__assert_fail@plt+0x2c6dc>
   3ebc4:	ldr	r3, [r6, #4]
   3ebc8:	lsl	r6, r7, #3
   3ebcc:	add	lr, lr, r6
   3ebd0:	and	r3, r8, r3, lsr #8
   3ebd4:	ldm	lr, {r1, r2}
   3ebd8:	mov	r0, r5
   3ebdc:	orr	fp, fp, r3
   3ebe0:	bl	3b54c <__assert_fail@plt+0x28f58>
   3ebe4:	cmn	r0, #1
   3ebe8:	mov	r4, r0
   3ebec:	bne	3ea5c <__assert_fail@plt+0x2c468>
   3ebf0:	b	3eac8 <__assert_fail@plt+0x2c4d4>
   3ebf4:	ldr	r3, [r5, #12]
   3ebf8:	lsl	sl, r7, #2
   3ebfc:	add	r9, r4, r4, lsl #1
   3ec00:	ldr	r7, [r3, r7, lsl #2]
   3ec04:	ldr	r3, [r5, #20]
   3ec08:	lsl	r9, r9, #2
   3ec0c:	lsl	r6, r7, #3
   3ec10:	add	lr, lr, r6
   3ec14:	add	r3, r3, r9
   3ec18:	mov	r0, #0
   3ec1c:	ldm	lr, {r1, r2}
   3ec20:	str	r0, [r3, #4]
   3ec24:	mov	r0, r5
   3ec28:	str	r4, [sp, #12]
   3ec2c:	bl	3b54c <__assert_fail@plt+0x28f58>
   3ec30:	cmn	r0, #1
   3ec34:	mov	r4, r0
   3ec38:	beq	3eac8 <__assert_fail@plt+0x2c4d4>
   3ec3c:	ldr	ip, [r5]
   3ec40:	ldr	lr, [pc, #164]	; 3ecec <__assert_fail@plt+0x2c6f8>
   3ec44:	add	r0, ip, r0, lsl #3
   3ec48:	and	r2, fp, r8
   3ec4c:	ldr	r3, [r0, #4]
   3ec50:	add	ip, ip, r6
   3ec54:	bic	r3, r3, lr
   3ec58:	orr	r3, r3, r2, lsl #8
   3ec5c:	str	r3, [r0, #4]
   3ec60:	ldr	ip, [ip, #4]
   3ec64:	bic	r3, r3, lr
   3ec68:	mov	r1, r4
   3ec6c:	and	ip, r8, ip, lsr #8
   3ec70:	orr	r2, r2, ip
   3ec74:	orr	r3, r3, r2, lsl #8
   3ec78:	str	r3, [r0, #4]
   3ec7c:	lsr	r3, r3, #16
   3ec80:	uxtb	r3, r3
   3ec84:	orr	r3, r3, #4
   3ec88:	strb	r3, [r0, #6]
   3ec8c:	ldr	r2, [r5, #16]
   3ec90:	ldr	r3, [r5, #12]
   3ec94:	ldr	ip, [sp, #12]
   3ec98:	ldr	r0, [r5, #20]
   3ec9c:	str	r7, [r2, r4, lsl #2]
   3eca0:	ldr	r2, [r3, sl]
   3eca4:	add	r0, r0, r9
   3eca8:	str	r2, [r3, ip, lsl #2]
   3ecac:	bl	3b700 <__assert_fail@plt+0x2910c>
   3ecb0:	cmp	r0, #0
   3ecb4:	bne	3e950 <__assert_fail@plt+0x2c35c>
   3ecb8:	b	3eac8 <__assert_fail@plt+0x2c4d4>
   3ecbc:	ldr	r2, [r5, #12]
   3ecc0:	mov	r0, r3
   3ecc4:	ldr	r3, [r2, r7, lsl #2]
   3ecc8:	str	r3, [r2, r4, lsl #2]
   3eccc:	b	3eacc <__assert_fail@plt+0x2c4d8>
   3ecd0:	mov	r1, r7
   3ecd4:	bl	3b700 <__assert_fail@plt+0x2910c>
   3ecd8:	cmp	r0, #0
   3ecdc:	movne	r0, #0
   3ece0:	bne	3eacc <__assert_fail@plt+0x2c4d8>
   3ece4:	b	3eac8 <__assert_fail@plt+0x2c4d4>
   3ece8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   3ecec:	andeq	pc, r3, r0, lsl #30
   3ecf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ecf4:	add	r8, r2, r2, lsl #1
   3ecf8:	mov	r4, r2
   3ecfc:	ldr	r2, [r1, #20]
   3ed00:	lsl	r8, r8, #2
   3ed04:	add	r2, r2, r8
   3ed08:	mov	r7, r1
   3ed0c:	ldr	r1, [r2, #4]
   3ed10:	sub	sp, sp, #44	; 0x2c
   3ed14:	add	r1, r1, #1
   3ed18:	str	r0, [sp, #8]
   3ed1c:	mov	r2, #0
   3ed20:	lsl	r0, r1, #2
   3ed24:	str	r3, [sp, #12]
   3ed28:	str	r1, [sp, #16]
   3ed2c:	str	r2, [sp, #20]
   3ed30:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3ed34:	cmp	r0, #0
   3ed38:	str	r0, [sp, #24]
   3ed3c:	beq	3ef5c <__assert_fail@plt+0x2c968>
   3ed40:	ldr	r6, [r7]
   3ed44:	ldr	r3, [sp, #20]
   3ed48:	lsl	r5, r4, #3
   3ed4c:	add	lr, r6, r5
   3ed50:	str	r4, [r0, r3, lsl #2]
   3ed54:	ldr	r1, [r7, #24]
   3ed58:	ldr	r0, [lr, #4]
   3ed5c:	ldr	r2, [pc, #520]	; 3ef6c <__assert_fail@plt+0x2c978>
   3ed60:	add	ip, r1, r8
   3ed64:	and	r2, r2, r0
   3ed68:	add	r3, r3, #1
   3ed6c:	cmp	r2, #0
   3ed70:	mvn	r2, #0
   3ed74:	str	r3, [sp, #20]
   3ed78:	str	r2, [ip, #4]
   3ed7c:	beq	3edac <__assert_fail@plt+0x2c7b8>
   3ed80:	ldr	r3, [r7, #20]
   3ed84:	add	r3, r3, r8
   3ed88:	ldr	r2, [r3, #4]
   3ed8c:	cmp	r2, #0
   3ed90:	beq	3eec0 <__assert_fail@plt+0x2c8cc>
   3ed94:	ldr	r3, [r3, #8]
   3ed98:	ldr	r3, [r3]
   3ed9c:	add	r6, r6, r3, lsl #3
   3eda0:	ldrb	r3, [r6, #6]
   3eda4:	tst	r3, #4
   3eda8:	beq	3ef24 <__assert_fail@plt+0x2c930>
   3edac:	ldrb	r3, [lr, #4]
   3edb0:	tst	r3, #8
   3edb4:	beq	3eebc <__assert_fail@plt+0x2c8c8>
   3edb8:	ldr	ip, [r7, #20]
   3edbc:	add	r3, ip, r8
   3edc0:	ldr	r2, [r3, #4]
   3edc4:	cmp	r2, #0
   3edc8:	ble	3eebc <__assert_fail@plt+0x2c8c8>
   3edcc:	mov	sl, #0
   3edd0:	mov	r5, sl
   3edd4:	mov	fp, #1
   3edd8:	add	r9, sp, #28
   3eddc:	b	3ee48 <__assert_fail@plt+0x2c854>
   3ede0:	ldm	r3, {r0, r1, r2}
   3ede4:	stm	r9, {r0, r1, r2}
   3ede8:	ldr	r3, [sp, #32]
   3edec:	cmp	r3, #0
   3edf0:	beq	3ee1c <__assert_fail@plt+0x2c828>
   3edf4:	ldr	r2, [sp, #20]
   3edf8:	ldr	r1, [sp, #16]
   3edfc:	add	r2, r2, r3, lsl #1
   3ee00:	cmp	r1, r2
   3ee04:	blt	3eefc <__assert_fail@plt+0x2c908>
   3ee08:	mov	r1, r9
   3ee0c:	add	r0, sp, #16
   3ee10:	bl	3bb38 <__assert_fail@plt+0x29544>
   3ee14:	cmp	r0, #0
   3ee18:	bne	3ee8c <__assert_fail@plt+0x2c898>
   3ee1c:	ldr	r1, [r7, #24]
   3ee20:	add	r4, r1, r4
   3ee24:	ldr	r3, [r4, #4]
   3ee28:	cmp	r3, #0
   3ee2c:	beq	3eee8 <__assert_fail@plt+0x2c8f4>
   3ee30:	ldr	ip, [r7, #20]
   3ee34:	add	r3, ip, r8
   3ee38:	add	r5, r5, #1
   3ee3c:	ldr	r2, [r3, #4]
   3ee40:	cmp	r2, r5
   3ee44:	ble	3ee9c <__assert_fail@plt+0x2c8a8>
   3ee48:	ldr	r3, [r3, #8]
   3ee4c:	ldr	r2, [r3, r5, lsl #2]
   3ee50:	add	r4, r2, r2, lsl #1
   3ee54:	lsl	r4, r4, #2
   3ee58:	add	r3, r1, r4
   3ee5c:	ldr	r0, [r3, #4]
   3ee60:	cmn	r0, #1
   3ee64:	moveq	sl, fp
   3ee68:	beq	3ee34 <__assert_fail@plt+0x2c840>
   3ee6c:	cmp	r0, #0
   3ee70:	bne	3ede0 <__assert_fail@plt+0x2c7ec>
   3ee74:	mov	r3, #0
   3ee78:	mov	r1, r7
   3ee7c:	mov	r0, r9
   3ee80:	bl	3ecf0 <__assert_fail@plt+0x2c6fc>
   3ee84:	cmp	r0, #0
   3ee88:	beq	3ede8 <__assert_fail@plt+0x2c7f4>
   3ee8c:	mov	r3, r0
   3ee90:	mov	r0, r3
   3ee94:	add	sp, sp, #44	; 0x2c
   3ee98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ee9c:	ldr	r3, [sp, #12]
   3eea0:	eor	r3, r3, #1
   3eea4:	tst	sl, r3
   3eea8:	addne	r8, r1, r8
   3eeac:	movne	r3, #0
   3eeb0:	strne	r3, [r8, #4]
   3eeb4:	addne	lr, sp, #16
   3eeb8:	bne	3eecc <__assert_fail@plt+0x2c8d8>
   3eebc:	add	ip, r1, r8
   3eec0:	add	lr, sp, #16
   3eec4:	ldm	lr, {r0, r1, r2}
   3eec8:	stm	ip, {r0, r1, r2}
   3eecc:	mov	r3, #0
   3eed0:	ldm	lr, {r0, r1, r2}
   3eed4:	ldr	ip, [sp, #8]
   3eed8:	stm	ip, {r0, r1, r2}
   3eedc:	mov	r0, r3
   3eee0:	add	sp, sp, #44	; 0x2c
   3eee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eee8:	ldr	r0, [sp, #36]	; 0x24
   3eeec:	bl	376d0 <__assert_fail@plt+0x250dc>
   3eef0:	mov	sl, fp
   3eef4:	ldr	r1, [r7, #24]
   3eef8:	b	3ee30 <__assert_fail@plt+0x2c83c>
   3eefc:	add	r3, r1, r3
   3ef00:	ldr	r0, [sp, #24]
   3ef04:	lsl	r1, r3, #3
   3ef08:	lsl	r6, r3, #1
   3ef0c:	bl	3aacc <__assert_fail@plt+0x284d8>
   3ef10:	cmp	r0, #0
   3ef14:	beq	3ef5c <__assert_fail@plt+0x2c968>
   3ef18:	str	r0, [sp, #24]
   3ef1c:	str	r6, [sp, #16]
   3ef20:	b	3ee08 <__assert_fail@plt+0x2c814>
   3ef24:	ldr	r2, [pc, #68]	; 3ef70 <__assert_fail@plt+0x2c97c>
   3ef28:	mov	r3, r4
   3ef2c:	and	r0, r2, r0, lsr #8
   3ef30:	str	r0, [sp]
   3ef34:	mov	r2, r4
   3ef38:	mov	r1, r4
   3ef3c:	mov	r0, r7
   3ef40:	bl	3e92c <__assert_fail@plt+0x2c338>
   3ef44:	subs	r3, r0, #0
   3ef48:	bne	3eedc <__assert_fail@plt+0x2c8e8>
   3ef4c:	ldr	lr, [r7]
   3ef50:	ldr	r1, [r7, #24]
   3ef54:	add	lr, lr, r5
   3ef58:	b	3edac <__assert_fail@plt+0x2c7b8>
   3ef5c:	mov	r3, #12
   3ef60:	mov	r0, r3
   3ef64:	add	sp, sp, #44	; 0x2c
   3ef68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ef6c:	andeq	pc, r3, r0, lsl #30
   3ef70:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   3ef74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ef78:	mov	r8, r1
   3ef7c:	ldr	r1, [r1, #4]
   3ef80:	sub	sp, sp, #24
   3ef84:	mov	r6, #0
   3ef88:	mov	r7, r0
   3ef8c:	lsl	r0, r1, #2
   3ef90:	mov	r5, r2
   3ef94:	mov	r4, r3
   3ef98:	str	r1, [sp, #12]
   3ef9c:	str	r6, [sp, #16]
   3efa0:	bl	3a010 <__assert_fail@plt+0x27a1c>
   3efa4:	cmp	r0, r6
   3efa8:	str	r0, [sp, #20]
   3efac:	beq	3f0dc <__assert_fail@plt+0x2cae8>
   3efb0:	ldr	r1, [r8, #4]
   3efb4:	ldr	r0, [r8, #8]
   3efb8:	cmp	r1, r6
   3efbc:	ble	3f054 <__assert_fail@plt+0x2ca60>
   3efc0:	ldr	r2, [r0, r6, lsl #2]
   3efc4:	ldr	r9, [r7, #24]
   3efc8:	add	r3, r2, r2, lsl #1
   3efcc:	add	r9, r9, r3, lsl #2
   3efd0:	ldr	sl, [r9, #4]
   3efd4:	cmp	sl, #0
   3efd8:	ble	3f074 <__assert_fail@plt+0x2ca80>
   3efdc:	ldr	r0, [r9, #8]
   3efe0:	ldr	lr, [r7]
   3efe4:	sub	r0, r0, #4
   3efe8:	mov	r3, #0
   3efec:	b	3eff8 <__assert_fail@plt+0x2ca04>
   3eff0:	cmp	sl, r3
   3eff4:	beq	3f078 <__assert_fail@plt+0x2ca84>
   3eff8:	ldr	r1, [r0, #4]!
   3effc:	add	r3, r3, #1
   3f000:	add	ip, lr, r1, lsl #3
   3f004:	ldrb	ip, [ip, #4]
   3f008:	cmp	r4, ip
   3f00c:	bne	3eff0 <__assert_fail@plt+0x2c9fc>
   3f010:	ldr	ip, [lr, r1, lsl #3]
   3f014:	cmp	r5, ip
   3f018:	bne	3eff0 <__assert_fail@plt+0x2c9fc>
   3f01c:	cmn	r1, #1
   3f020:	beq	3f078 <__assert_fail@plt+0x2ca84>
   3f024:	str	r4, [sp]
   3f028:	mov	r3, r5
   3f02c:	add	r1, sp, #12
   3f030:	mov	r0, r7
   3f034:	bl	3e7cc <__assert_fail@plt+0x2c1d8>
   3f038:	subs	r9, r0, #0
   3f03c:	bne	3f0a0 <__assert_fail@plt+0x2caac>
   3f040:	ldr	r0, [r8, #8]
   3f044:	ldr	r1, [r8, #4]
   3f048:	add	r6, r6, #1
   3f04c:	cmp	r6, r1
   3f050:	blt	3efc0 <__assert_fail@plt+0x2c9cc>
   3f054:	bl	376d0 <__assert_fail@plt+0x250dc>
   3f058:	add	r3, sp, #24
   3f05c:	mov	r9, #0
   3f060:	ldmdb	r3, {r0, r1, r2}
   3f064:	stm	r8, {r0, r1, r2}
   3f068:	mov	r0, r9
   3f06c:	add	sp, sp, #24
   3f070:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f074:	beq	3f048 <__assert_fail@plt+0x2ca54>
   3f078:	ldr	r3, [sp, #16]
   3f07c:	ldr	r2, [sp, #12]
   3f080:	add	r3, r3, sl, lsl #1
   3f084:	cmp	r2, r3
   3f088:	blt	3f0b4 <__assert_fail@plt+0x2cac0>
   3f08c:	mov	r1, r9
   3f090:	add	r0, sp, #12
   3f094:	bl	3bb38 <__assert_fail@plt+0x29544>
   3f098:	subs	r9, r0, #0
   3f09c:	beq	3f040 <__assert_fail@plt+0x2ca4c>
   3f0a0:	ldr	r0, [sp, #20]
   3f0a4:	bl	376d0 <__assert_fail@plt+0x250dc>
   3f0a8:	mov	r0, r9
   3f0ac:	add	sp, sp, #24
   3f0b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f0b4:	add	r2, sl, r2
   3f0b8:	ldr	r0, [sp, #20]
   3f0bc:	lsl	r1, r2, #3
   3f0c0:	lsl	sl, r2, #1
   3f0c4:	bl	3aacc <__assert_fail@plt+0x284d8>
   3f0c8:	cmp	r0, #0
   3f0cc:	beq	3f0ec <__assert_fail@plt+0x2caf8>
   3f0d0:	str	r0, [sp, #20]
   3f0d4:	str	sl, [sp, #12]
   3f0d8:	b	3f08c <__assert_fail@plt+0x2ca98>
   3f0dc:	mov	r9, #12
   3f0e0:	mov	r0, r9
   3f0e4:	add	sp, sp, #24
   3f0e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f0ec:	mov	r9, #12
   3f0f0:	b	3f0a0 <__assert_fail@plt+0x2caac>
   3f0f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f0f8:	sub	sp, sp, #172	; 0xac
   3f0fc:	mov	ip, r3
   3f100:	str	r0, [sp, #64]	; 0x40
   3f104:	ldr	r0, [r0, #84]	; 0x54
   3f108:	str	r3, [sp, #152]	; 0x98
   3f10c:	mov	r3, r0
   3f110:	str	r0, [sp, #120]	; 0x78
   3f114:	ldr	r3, [r3, #24]
   3f118:	add	r0, ip, ip, lsl #1
   3f11c:	str	r1, [sp, #20]
   3f120:	add	r3, r3, r0, lsl #2
   3f124:	str	r3, [sp, #124]	; 0x7c
   3f128:	ldr	r3, [r3, #4]
   3f12c:	cmp	r3, #0
   3f130:	ble	3f1d0 <__assert_fail@plt+0x2cbdc>
   3f134:	mov	fp, r2
   3f138:	ldr	r2, [sp, #208]	; 0xd0
   3f13c:	mov	r1, #1
   3f140:	add	r2, r2, r2, lsl r1
   3f144:	lsl	r1, r1, fp
   3f148:	lsl	r2, r2, #3
   3f14c:	str	r2, [sp, #44]	; 0x2c
   3f150:	add	r2, r2, #24
   3f154:	str	r2, [sp, #96]	; 0x60
   3f158:	ldr	r2, [sp, #20]
   3f15c:	str	r1, [sp, #24]
   3f160:	mvn	r1, r1
   3f164:	str	r1, [sp, #36]	; 0x24
   3f168:	and	r1, r2, #2
   3f16c:	and	r2, r2, #1
   3f170:	str	r2, [sp, #32]
   3f174:	mov	r2, #0
   3f178:	str	r1, [sp, #16]
   3f17c:	str	r2, [sp, #108]	; 0x6c
   3f180:	ldr	r2, [sp, #124]	; 0x7c
   3f184:	ldr	r0, [sp, #108]	; 0x6c
   3f188:	ldr	r1, [r2, #8]
   3f18c:	ldr	r2, [sp, #120]	; 0x78
   3f190:	ldr	r1, [r1, r0, lsl #2]
   3f194:	ldr	r2, [r2]
   3f198:	str	r1, [sp, #100]	; 0x64
   3f19c:	add	r1, r2, r1, lsl #3
   3f1a0:	ldrb	r1, [r1, #4]
   3f1a4:	cmp	r1, #8
   3f1a8:	beq	3f270 <__assert_fail@plt+0x2cc7c>
   3f1ac:	cmp	r1, #9
   3f1b0:	beq	3f24c <__assert_fail@plt+0x2cc58>
   3f1b4:	cmp	r1, #4
   3f1b8:	beq	3f1e4 <__assert_fail@plt+0x2cbf0>
   3f1bc:	ldr	r2, [sp, #108]	; 0x6c
   3f1c0:	add	r2, r2, #1
   3f1c4:	cmp	r2, r3
   3f1c8:	str	r2, [sp, #108]	; 0x6c
   3f1cc:	blt	3f180 <__assert_fail@plt+0x2cb8c>
   3f1d0:	ldr	r3, [sp, #20]
   3f1d4:	lsr	r0, r3, #1
   3f1d8:	and	r0, r0, #1
   3f1dc:	add	sp, sp, #172	; 0xac
   3f1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f1e4:	ldr	r2, [sp, #208]	; 0xd0
   3f1e8:	cmn	r2, #1
   3f1ec:	beq	3f1bc <__assert_fail@plt+0x2cbc8>
   3f1f0:	ldr	r3, [sp, #100]	; 0x64
   3f1f4:	ldr	r2, [sp, #64]	; 0x40
   3f1f8:	add	r3, r3, r3, lsl #1
   3f1fc:	ldr	r2, [r2, #116]	; 0x74
   3f200:	lsl	r3, r3, #2
   3f204:	str	r3, [sp, #156]	; 0x9c
   3f208:	ldr	r3, [sp, #96]	; 0x60
   3f20c:	add	r3, r2, r3
   3f210:	str	r3, [sp, #88]	; 0x58
   3f214:	ldr	r3, [sp, #88]	; 0x58
   3f218:	ldr	r2, [sp, #100]	; 0x64
   3f21c:	ldr	r3, [r3, #-24]	; 0xffffffe8
   3f220:	cmp	r2, r3
   3f224:	beq	3f294 <__assert_fail@plt+0x2cca0>
   3f228:	ldr	r3, [sp, #88]	; 0x58
   3f22c:	add	r3, r3, #24
   3f230:	str	r3, [sp, #88]	; 0x58
   3f234:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   3f238:	cmp	r3, #0
   3f23c:	bne	3f214 <__assert_fail@plt+0x2cc20>
   3f240:	ldr	r3, [sp, #124]	; 0x7c
   3f244:	ldr	r3, [r3, #4]
   3f248:	b	3f1bc <__assert_fail@plt+0x2cbc8>
   3f24c:	ldr	r1, [sp, #16]
   3f250:	cmp	r1, #0
   3f254:	beq	3f1bc <__assert_fail@plt+0x2cbc8>
   3f258:	ldr	r1, [sp, #100]	; 0x64
   3f25c:	ldr	r2, [r2, r1, lsl #3]
   3f260:	cmp	fp, r2
   3f264:	bne	3f1bc <__assert_fail@plt+0x2cbc8>
   3f268:	mov	r0, #0
   3f26c:	b	3f1dc <__assert_fail@plt+0x2cbe8>
   3f270:	ldr	r1, [sp, #32]
   3f274:	cmp	r1, #0
   3f278:	beq	3f1bc <__assert_fail@plt+0x2cbc8>
   3f27c:	ldr	r1, [sp, #100]	; 0x64
   3f280:	ldr	r2, [r2, r1, lsl #3]
   3f284:	cmp	r2, fp
   3f288:	bne	3f1bc <__assert_fail@plt+0x2cbc8>
   3f28c:	mvn	r0, #0
   3f290:	b	3f1dc <__assert_fail@plt+0x2cbe8>
   3f294:	cmp	fp, #31
   3f298:	bgt	3f2b0 <__assert_fail@plt+0x2ccbc>
   3f29c:	ldr	r3, [sp, #88]	; 0x58
   3f2a0:	ldr	r2, [sp, #24]
   3f2a4:	ldr	r3, [r3, #-8]
   3f2a8:	tst	r2, r3
   3f2ac:	beq	3f228 <__assert_fail@plt+0x2cc34>
   3f2b0:	ldr	r3, [sp, #120]	; 0x78
   3f2b4:	ldr	r2, [sp, #156]	; 0x9c
   3f2b8:	ldr	r3, [r3, #20]
   3f2bc:	add	r3, r3, r2
   3f2c0:	ldr	r2, [sp, #152]	; 0x98
   3f2c4:	ldr	r3, [r3, #8]
   3f2c8:	ldr	r3, [r3]
   3f2cc:	cmp	r2, r3
   3f2d0:	str	r3, [sp, #128]	; 0x80
   3f2d4:	beq	3f388 <__assert_fail@plt+0x2cd94>
   3f2d8:	ldr	r3, [sp, #64]	; 0x40
   3f2dc:	ldr	r3, [r3, #84]	; 0x54
   3f2e0:	mov	r2, r3
   3f2e4:	str	r3, [sp, #132]	; 0x84
   3f2e8:	ldr	r3, [sp, #128]	; 0x80
   3f2ec:	ldr	r2, [r2, #24]
   3f2f0:	add	r3, r3, r3, lsl #1
   3f2f4:	add	r3, r2, r3, lsl #2
   3f2f8:	str	r3, [sp, #136]	; 0x88
   3f2fc:	ldr	r3, [r3, #4]
   3f300:	cmp	r3, #0
   3f304:	ble	3fab8 <__assert_fail@plt+0x2d4c4>
   3f308:	mov	r2, #0
   3f30c:	str	r2, [sp, #112]	; 0x70
   3f310:	b	3f338 <__assert_fail@plt+0x2cd44>
   3f314:	cmp	r1, #9
   3f318:	beq	3fad8 <__assert_fail@plt+0x2d4e4>
   3f31c:	cmp	r1, #4
   3f320:	beq	3f394 <__assert_fail@plt+0x2cda0>
   3f324:	ldr	r2, [sp, #112]	; 0x70
   3f328:	add	r2, r2, #1
   3f32c:	cmp	r2, r3
   3f330:	str	r2, [sp, #112]	; 0x70
   3f334:	bge	3fab8 <__assert_fail@plt+0x2d4c4>
   3f338:	ldr	r2, [sp, #136]	; 0x88
   3f33c:	ldr	r0, [sp, #112]	; 0x70
   3f340:	ldr	r1, [r2, #8]
   3f344:	ldr	r2, [sp, #132]	; 0x84
   3f348:	ldr	r1, [r1, r0, lsl #2]
   3f34c:	ldr	r2, [r2]
   3f350:	str	r1, [sp, #104]	; 0x68
   3f354:	add	r1, r2, r1, lsl #3
   3f358:	ldrb	r1, [r1, #4]
   3f35c:	cmp	r1, #8
   3f360:	bne	3f314 <__assert_fail@plt+0x2cd20>
   3f364:	ldr	r1, [sp, #32]
   3f368:	cmp	r1, #0
   3f36c:	beq	3f324 <__assert_fail@plt+0x2cd30>
   3f370:	ldr	r1, [sp, #104]	; 0x68
   3f374:	ldr	r2, [r2, r1, lsl #3]
   3f378:	cmp	fp, r2
   3f37c:	bne	3f324 <__assert_fail@plt+0x2cd30>
   3f380:	mvn	r0, #0
   3f384:	b	3f1dc <__assert_fail@plt+0x2cbe8>
   3f388:	ldr	r3, [sp, #32]
   3f38c:	rsb	r0, r3, #0
   3f390:	b	3f1dc <__assert_fail@plt+0x2cbe8>
   3f394:	ldr	r3, [sp, #104]	; 0x68
   3f398:	ldr	r2, [sp, #64]	; 0x40
   3f39c:	add	r3, r3, r3, lsl #1
   3f3a0:	ldr	r2, [r2, #116]	; 0x74
   3f3a4:	lsl	r3, r3, #2
   3f3a8:	str	r3, [sp, #160]	; 0xa0
   3f3ac:	ldr	r3, [sp, #96]	; 0x60
   3f3b0:	add	r3, r2, r3
   3f3b4:	str	r3, [sp, #92]	; 0x5c
   3f3b8:	b	3f3d4 <__assert_fail@plt+0x2cde0>
   3f3bc:	ldr	r3, [sp, #92]	; 0x5c
   3f3c0:	add	r3, r3, #24
   3f3c4:	str	r3, [sp, #92]	; 0x5c
   3f3c8:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   3f3cc:	cmp	r3, #0
   3f3d0:	beq	3faf8 <__assert_fail@plt+0x2d504>
   3f3d4:	ldr	r3, [sp, #92]	; 0x5c
   3f3d8:	ldr	r2, [sp, #104]	; 0x68
   3f3dc:	ldr	r3, [r3, #-24]	; 0xffffffe8
   3f3e0:	cmp	r2, r3
   3f3e4:	bne	3f3bc <__assert_fail@plt+0x2cdc8>
   3f3e8:	cmp	fp, #31
   3f3ec:	bgt	3f404 <__assert_fail@plt+0x2ce10>
   3f3f0:	ldr	r3, [sp, #92]	; 0x5c
   3f3f4:	ldr	r2, [sp, #24]
   3f3f8:	ldr	r3, [r3, #-8]
   3f3fc:	tst	r2, r3
   3f400:	beq	3f3bc <__assert_fail@plt+0x2cdc8>
   3f404:	ldr	r3, [sp, #132]	; 0x84
   3f408:	ldr	r2, [sp, #160]	; 0xa0
   3f40c:	ldr	r3, [r3, #20]
   3f410:	add	r3, r3, r2
   3f414:	ldr	r2, [sp, #128]	; 0x80
   3f418:	ldr	r3, [r3, #8]
   3f41c:	ldr	r3, [r3]
   3f420:	cmp	r2, r3
   3f424:	str	r3, [sp, #140]	; 0x8c
   3f428:	beq	3faa0 <__assert_fail@plt+0x2d4ac>
   3f42c:	ldr	r3, [sp, #64]	; 0x40
   3f430:	ldr	r3, [r3, #84]	; 0x54
   3f434:	mov	r2, r3
   3f438:	str	r3, [sp, #144]	; 0x90
   3f43c:	ldr	r3, [sp, #140]	; 0x8c
   3f440:	ldr	r2, [r2, #24]
   3f444:	add	r3, r3, r3, lsl #1
   3f448:	add	r3, r2, r3, lsl #2
   3f44c:	str	r3, [sp, #148]	; 0x94
   3f450:	ldr	r3, [r3, #4]
   3f454:	cmp	r3, #0
   3f458:	ble	3fa74 <__assert_fail@plt+0x2d480>
   3f45c:	mov	r2, #0
   3f460:	str	r2, [sp, #116]	; 0x74
   3f464:	b	3f48c <__assert_fail@plt+0x2ce98>
   3f468:	cmp	r1, #9
   3f46c:	beq	3f4d8 <__assert_fail@plt+0x2cee4>
   3f470:	cmp	r1, #4
   3f474:	beq	3f4f8 <__assert_fail@plt+0x2cf04>
   3f478:	ldr	r2, [sp, #116]	; 0x74
   3f47c:	add	r2, r2, #1
   3f480:	cmp	r2, r3
   3f484:	str	r2, [sp, #116]	; 0x74
   3f488:	bge	3fa74 <__assert_fail@plt+0x2d480>
   3f48c:	ldr	r2, [sp, #148]	; 0x94
   3f490:	ldr	r0, [sp, #116]	; 0x74
   3f494:	ldr	r1, [r2, #8]
   3f498:	ldr	r2, [sp, #144]	; 0x90
   3f49c:	ldr	r1, [r1, r0, lsl #2]
   3f4a0:	ldr	r2, [r2]
   3f4a4:	str	r1, [sp, #84]	; 0x54
   3f4a8:	add	r1, r2, r1, lsl #3
   3f4ac:	ldrb	r1, [r1, #4]
   3f4b0:	cmp	r1, #8
   3f4b4:	bne	3f468 <__assert_fail@plt+0x2ce74>
   3f4b8:	ldr	r1, [sp, #32]
   3f4bc:	cmp	r1, #0
   3f4c0:	beq	3f478 <__assert_fail@plt+0x2ce84>
   3f4c4:	ldr	r1, [sp, #84]	; 0x54
   3f4c8:	ldr	r2, [r2, r1, lsl #3]
   3f4cc:	cmp	fp, r2
   3f4d0:	bne	3f478 <__assert_fail@plt+0x2ce84>
   3f4d4:	b	3f28c <__assert_fail@plt+0x2cc98>
   3f4d8:	ldr	r1, [sp, #16]
   3f4dc:	cmp	r1, #0
   3f4e0:	beq	3f478 <__assert_fail@plt+0x2ce84>
   3f4e4:	ldr	r1, [sp, #84]	; 0x54
   3f4e8:	ldr	r2, [r2, r1, lsl #3]
   3f4ec:	cmp	fp, r2
   3f4f0:	bne	3f478 <__assert_fail@plt+0x2ce84>
   3f4f4:	b	3f268 <__assert_fail@plt+0x2cc74>
   3f4f8:	ldr	r3, [sp, #84]	; 0x54
   3f4fc:	ldr	r2, [sp, #64]	; 0x40
   3f500:	add	r3, r3, r3, lsl #1
   3f504:	ldr	r2, [r2, #116]	; 0x74
   3f508:	lsl	r3, r3, #2
   3f50c:	str	r3, [sp, #164]	; 0xa4
   3f510:	ldr	r3, [sp, #96]	; 0x60
   3f514:	add	r3, r2, r3
   3f518:	str	r3, [sp, #68]	; 0x44
   3f51c:	b	3f538 <__assert_fail@plt+0x2cf44>
   3f520:	ldr	r3, [sp, #68]	; 0x44
   3f524:	add	r3, r3, #24
   3f528:	str	r3, [sp, #68]	; 0x44
   3f52c:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   3f530:	cmp	r3, #0
   3f534:	beq	3fa94 <__assert_fail@plt+0x2d4a0>
   3f538:	ldr	r3, [sp, #68]	; 0x44
   3f53c:	ldr	r2, [sp, #84]	; 0x54
   3f540:	ldr	r3, [r3, #-24]	; 0xffffffe8
   3f544:	cmp	r2, r3
   3f548:	bne	3f520 <__assert_fail@plt+0x2cf2c>
   3f54c:	cmp	fp, #31
   3f550:	bgt	3f568 <__assert_fail@plt+0x2cf74>
   3f554:	ldr	r3, [sp, #68]	; 0x44
   3f558:	ldr	r2, [sp, #24]
   3f55c:	ldr	r3, [r3, #-8]
   3f560:	tst	r2, r3
   3f564:	beq	3f520 <__assert_fail@plt+0x2cf2c>
   3f568:	ldr	r3, [sp, #144]	; 0x90
   3f56c:	ldr	r2, [sp, #164]	; 0xa4
   3f570:	ldr	r3, [r3, #20]
   3f574:	add	r3, r3, r2
   3f578:	ldr	r2, [sp, #140]	; 0x8c
   3f57c:	ldr	r3, [r3, #8]
   3f580:	ldr	r3, [r3]
   3f584:	cmp	r2, r3
   3f588:	str	r3, [sp, #72]	; 0x48
   3f58c:	beq	3fa5c <__assert_fail@plt+0x2d468>
   3f590:	ldr	r3, [sp, #64]	; 0x40
   3f594:	ldr	r3, [r3, #84]	; 0x54
   3f598:	mov	r2, r3
   3f59c:	str	r3, [sp, #48]	; 0x30
   3f5a0:	ldr	r3, [sp, #72]	; 0x48
   3f5a4:	ldr	r2, [r2, #24]
   3f5a8:	add	r3, r3, r3, lsl #1
   3f5ac:	add	r3, r2, r3, lsl #2
   3f5b0:	str	r3, [sp, #80]	; 0x50
   3f5b4:	ldr	r1, [r3, #4]
   3f5b8:	cmp	r1, #0
   3f5bc:	ble	3fa3c <__assert_fail@plt+0x2d448>
   3f5c0:	mov	r3, #0
   3f5c4:	str	r3, [sp, #40]	; 0x28
   3f5c8:	b	3f5f0 <__assert_fail@plt+0x2cffc>
   3f5cc:	cmp	r3, #9
   3f5d0:	beq	3f63c <__assert_fail@plt+0x2d048>
   3f5d4:	cmp	r3, #4
   3f5d8:	beq	3f65c <__assert_fail@plt+0x2d068>
   3f5dc:	ldr	r3, [sp, #40]	; 0x28
   3f5e0:	add	r3, r3, #1
   3f5e4:	cmp	r3, r1
   3f5e8:	str	r3, [sp, #40]	; 0x28
   3f5ec:	bge	3fa3c <__assert_fail@plt+0x2d448>
   3f5f0:	ldr	r3, [sp, #80]	; 0x50
   3f5f4:	ldr	r0, [sp, #40]	; 0x28
   3f5f8:	ldr	r2, [sp, #48]	; 0x30
   3f5fc:	ldr	r3, [r3, #8]
   3f600:	ldr	r2, [r2]
   3f604:	ldr	r3, [r3, r0, lsl #2]
   3f608:	str	r3, [sp, #12]
   3f60c:	add	r3, r2, r3, lsl #3
   3f610:	ldrb	r3, [r3, #4]
   3f614:	cmp	r3, #8
   3f618:	bne	3f5cc <__assert_fail@plt+0x2cfd8>
   3f61c:	ldr	r3, [sp, #32]
   3f620:	cmp	r3, #0
   3f624:	beq	3f5dc <__assert_fail@plt+0x2cfe8>
   3f628:	ldr	r3, [sp, #12]
   3f62c:	ldr	r3, [r2, r3, lsl #3]
   3f630:	cmp	fp, r3
   3f634:	bne	3f5dc <__assert_fail@plt+0x2cfe8>
   3f638:	b	3f28c <__assert_fail@plt+0x2cc98>
   3f63c:	ldr	r3, [sp, #16]
   3f640:	cmp	r3, #0
   3f644:	beq	3f5dc <__assert_fail@plt+0x2cfe8>
   3f648:	ldr	r3, [sp, #12]
   3f64c:	ldr	r3, [r2, r3, lsl #3]
   3f650:	cmp	fp, r3
   3f654:	bne	3f5dc <__assert_fail@plt+0x2cfe8>
   3f658:	b	3f268 <__assert_fail@plt+0x2cc74>
   3f65c:	ldr	r3, [sp, #12]
   3f660:	ldr	r2, [sp, #64]	; 0x40
   3f664:	add	r3, r3, r3, lsl #1
   3f668:	ldr	r9, [r2, #116]	; 0x74
   3f66c:	lsl	r3, r3, #2
   3f670:	str	r3, [sp, #76]	; 0x4c
   3f674:	ldr	r3, [sp, #96]	; 0x60
   3f678:	add	r9, r9, r3
   3f67c:	b	3f690 <__assert_fail@plt+0x2d09c>
   3f680:	add	r9, r9, #24
   3f684:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   3f688:	cmp	r3, #0
   3f68c:	beq	3f8e4 <__assert_fail@plt+0x2d2f0>
   3f690:	ldr	r3, [r9, #-24]	; 0xffffffe8
   3f694:	ldr	r2, [sp, #12]
   3f698:	cmp	r2, r3
   3f69c:	bne	3f680 <__assert_fail@plt+0x2d08c>
   3f6a0:	cmp	fp, #31
   3f6a4:	bgt	3f6b8 <__assert_fail@plt+0x2d0c4>
   3f6a8:	ldr	r3, [r9, #-8]
   3f6ac:	ldr	r2, [sp, #24]
   3f6b0:	tst	r2, r3
   3f6b4:	beq	3f680 <__assert_fail@plt+0x2d08c>
   3f6b8:	ldr	r3, [sp, #48]	; 0x30
   3f6bc:	ldr	r2, [sp, #76]	; 0x4c
   3f6c0:	ldr	r3, [r3, #20]
   3f6c4:	add	r3, r3, r2
   3f6c8:	ldr	r2, [sp, #72]	; 0x48
   3f6cc:	ldr	r3, [r3, #8]
   3f6d0:	ldr	r3, [r3]
   3f6d4:	cmp	r2, r3
   3f6d8:	str	r3, [sp, #28]
   3f6dc:	beq	3fa24 <__assert_fail@plt+0x2d430>
   3f6e0:	ldr	r2, [sp, #64]	; 0x40
   3f6e4:	ldr	r3, [sp, #28]
   3f6e8:	ldr	r7, [r2, #84]	; 0x54
   3f6ec:	add	sl, r3, r3, lsl #1
   3f6f0:	ldr	r3, [r7, #24]
   3f6f4:	add	sl, r3, sl, lsl #2
   3f6f8:	ldr	r1, [sl, #4]
   3f6fc:	cmp	r1, #0
   3f700:	ble	3f8bc <__assert_fail@plt+0x2d2c8>
   3f704:	str	r9, [sp, #52]	; 0x34
   3f708:	mov	r6, #0
   3f70c:	mov	r9, r2
   3f710:	b	3f730 <__assert_fail@plt+0x2d13c>
   3f714:	cmp	r3, #9
   3f718:	beq	3f778 <__assert_fail@plt+0x2d184>
   3f71c:	cmp	r3, #4
   3f720:	beq	3f794 <__assert_fail@plt+0x2d1a0>
   3f724:	add	r6, r6, #1
   3f728:	cmp	r6, r1
   3f72c:	bge	3f770 <__assert_fail@plt+0x2d17c>
   3f730:	ldr	r3, [sl, #8]
   3f734:	ldr	r2, [r7]
   3f738:	ldr	r5, [r3, r6, lsl #2]
   3f73c:	add	r3, r2, r5, lsl #3
   3f740:	ldrb	r3, [r3, #4]
   3f744:	cmp	r3, #8
   3f748:	bne	3f714 <__assert_fail@plt+0x2d120>
   3f74c:	ldr	r3, [sp, #32]
   3f750:	cmp	r3, #0
   3f754:	beq	3f724 <__assert_fail@plt+0x2d130>
   3f758:	ldr	r3, [r2, r5, lsl #3]
   3f75c:	cmp	fp, r3
   3f760:	beq	3f28c <__assert_fail@plt+0x2cc98>
   3f764:	add	r6, r6, #1
   3f768:	cmp	r6, r1
   3f76c:	blt	3f730 <__assert_fail@plt+0x2d13c>
   3f770:	ldr	r9, [sp, #52]	; 0x34
   3f774:	b	3f8bc <__assert_fail@plt+0x2d2c8>
   3f778:	ldr	r3, [sp, #16]
   3f77c:	cmp	r3, #0
   3f780:	beq	3f724 <__assert_fail@plt+0x2d130>
   3f784:	ldr	r3, [r2, r5, lsl #3]
   3f788:	cmp	fp, r3
   3f78c:	bne	3f724 <__assert_fail@plt+0x2d130>
   3f790:	b	3f268 <__assert_fail@plt+0x2cc74>
   3f794:	ldr	r3, [sp, #44]	; 0x2c
   3f798:	ldr	r4, [r9, #116]	; 0x74
   3f79c:	add	r8, r5, r5, lsl #1
   3f7a0:	add	r4, r4, r3
   3f7a4:	cmp	fp, #31
   3f7a8:	lsl	r8, r8, #2
   3f7ac:	ldr	r3, [sp, #16]
   3f7b0:	add	r4, r4, #24
   3f7b4:	ble	3f8f0 <__assert_fail@plt+0x2d2fc>
   3f7b8:	cmp	r3, #0
   3f7bc:	bne	3f854 <__assert_fail@plt+0x2d260>
   3f7c0:	str	sl, [sp, #56]	; 0x38
   3f7c4:	str	r6, [sp, #60]	; 0x3c
   3f7c8:	ldr	sl, [sp, #20]
   3f7cc:	ldr	r6, [sp, #28]
   3f7d0:	b	3f7e0 <__assert_fail@plt+0x2d1ec>
   3f7d4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   3f7d8:	cmp	r3, #0
   3f7dc:	beq	3f838 <__assert_fail@plt+0x2d244>
   3f7e0:	ldr	r3, [r4, #-24]	; 0xffffffe8
   3f7e4:	add	r4, r4, #24
   3f7e8:	cmp	r5, r3
   3f7ec:	bne	3f7d4 <__assert_fail@plt+0x2d1e0>
   3f7f0:	ldr	r3, [r7, #20]
   3f7f4:	mov	r2, fp
   3f7f8:	add	r3, r3, r8
   3f7fc:	mov	r1, sl
   3f800:	ldr	r3, [r3, #8]
   3f804:	mov	r0, r9
   3f808:	ldr	ip, [r3]
   3f80c:	cmp	ip, r6
   3f810:	mov	r3, ip
   3f814:	beq	3fa0c <__assert_fail@plt+0x2d418>
   3f818:	ldr	ip, [sp, #208]	; 0xd0
   3f81c:	str	ip, [sp]
   3f820:	bl	3f0f4 <__assert_fail@plt+0x2cb00>
   3f824:	cmn	r0, #1
   3f828:	beq	3f28c <__assert_fail@plt+0x2cc98>
   3f82c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   3f830:	cmp	r3, #0
   3f834:	bne	3f7e0 <__assert_fail@plt+0x2d1ec>
   3f838:	ldr	sl, [sp, #56]	; 0x38
   3f83c:	ldr	r6, [sp, #60]	; 0x3c
   3f840:	ldr	r1, [sl, #4]
   3f844:	b	3f724 <__assert_fail@plt+0x2d130>
   3f848:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   3f84c:	cmp	r3, #0
   3f850:	beq	3f840 <__assert_fail@plt+0x2d24c>
   3f854:	ldr	r3, [r4, #-24]	; 0xffffffe8
   3f858:	add	r4, r4, #24
   3f85c:	cmp	r5, r3
   3f860:	bne	3f848 <__assert_fail@plt+0x2d254>
   3f864:	ldr	r3, [r7, #20]
   3f868:	ldr	lr, [sp, #28]
   3f86c:	add	r3, r3, r8
   3f870:	mov	r2, fp
   3f874:	ldr	r3, [r3, #8]
   3f878:	ldr	r1, [sp, #20]
   3f87c:	mov	r0, r9
   3f880:	ldr	ip, [r3]
   3f884:	cmp	ip, lr
   3f888:	mov	r3, ip
   3f88c:	beq	3fa0c <__assert_fail@plt+0x2d418>
   3f890:	ldr	ip, [sp, #208]	; 0xd0
   3f894:	str	ip, [sp]
   3f898:	bl	3f0f4 <__assert_fail@plt+0x2cb00>
   3f89c:	cmn	r0, #1
   3f8a0:	beq	3f28c <__assert_fail@plt+0x2cc98>
   3f8a4:	cmp	r0, #0
   3f8a8:	bne	3f848 <__assert_fail@plt+0x2d254>
   3f8ac:	ldr	r9, [sp, #52]	; 0x34
   3f8b0:	ldr	r3, [sp, #16]
   3f8b4:	cmp	r3, #0
   3f8b8:	bne	3f268 <__assert_fail@plt+0x2cc74>
   3f8bc:	cmp	fp, #31
   3f8c0:	bgt	3f680 <__assert_fail@plt+0x2d08c>
   3f8c4:	ldr	r3, [r9, #-8]
   3f8c8:	ldr	r2, [sp, #36]	; 0x24
   3f8cc:	add	r9, r9, #24
   3f8d0:	and	r3, r3, r2
   3f8d4:	str	r3, [r9, #-32]	; 0xffffffe0
   3f8d8:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   3f8dc:	cmp	r3, #0
   3f8e0:	bne	3f690 <__assert_fail@plt+0x2d09c>
   3f8e4:	ldr	r3, [sp, #80]	; 0x50
   3f8e8:	ldr	r1, [r3, #4]
   3f8ec:	b	3f5dc <__assert_fail@plt+0x2cfe8>
   3f8f0:	cmp	r3, #0
   3f8f4:	bne	3f9fc <__assert_fail@plt+0x2d408>
   3f8f8:	str	sl, [sp, #56]	; 0x38
   3f8fc:	str	r6, [sp, #60]	; 0x3c
   3f900:	ldr	sl, [sp, #208]	; 0xd0
   3f904:	ldr	r6, [sp, #28]
   3f908:	b	3f91c <__assert_fail@plt+0x2d328>
   3f90c:	add	r4, r4, #24
   3f910:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   3f914:	cmp	r3, #0
   3f918:	beq	3f838 <__assert_fail@plt+0x2d244>
   3f91c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   3f920:	cmp	r5, r3
   3f924:	bne	3f90c <__assert_fail@plt+0x2d318>
   3f928:	ldr	r3, [r4, #-8]
   3f92c:	ldr	ip, [sp, #24]
   3f930:	mov	r2, fp
   3f934:	tst	ip, r3
   3f938:	ldr	r1, [sp, #20]
   3f93c:	mov	r0, r9
   3f940:	beq	3f90c <__assert_fail@plt+0x2d318>
   3f944:	ldr	r3, [r7, #20]
   3f948:	add	r3, r3, r8
   3f94c:	ldr	r3, [r3, #8]
   3f950:	ldr	ip, [r3]
   3f954:	cmp	r6, ip
   3f958:	mov	r3, ip
   3f95c:	beq	3fa0c <__assert_fail@plt+0x2d418>
   3f960:	str	sl, [sp]
   3f964:	bl	3f0f4 <__assert_fail@plt+0x2cb00>
   3f968:	cmn	r0, #1
   3f96c:	beq	3f28c <__assert_fail@plt+0x2cc98>
   3f970:	ldr	r3, [r4, #-8]
   3f974:	ldr	r2, [sp, #36]	; 0x24
   3f978:	and	r3, r3, r2
   3f97c:	str	r3, [r4, #-8]
   3f980:	b	3f90c <__assert_fail@plt+0x2d318>
   3f984:	ldr	r3, [r4, #-8]
   3f988:	ldr	ip, [sp, #24]
   3f98c:	mov	r2, fp
   3f990:	tst	ip, r3
   3f994:	ldr	r1, [sp, #20]
   3f998:	mov	r0, r9
   3f99c:	beq	3f9ec <__assert_fail@plt+0x2d3f8>
   3f9a0:	ldr	r3, [r7, #20]
   3f9a4:	ldr	lr, [sp, #28]
   3f9a8:	add	r3, r3, r8
   3f9ac:	ldr	r3, [r3, #8]
   3f9b0:	ldr	ip, [r3]
   3f9b4:	cmp	lr, ip
   3f9b8:	mov	r3, ip
   3f9bc:	beq	3fa0c <__assert_fail@plt+0x2d418>
   3f9c0:	ldr	ip, [sp, #208]	; 0xd0
   3f9c4:	str	ip, [sp]
   3f9c8:	bl	3f0f4 <__assert_fail@plt+0x2cb00>
   3f9cc:	cmn	r0, #1
   3f9d0:	beq	3f28c <__assert_fail@plt+0x2cc98>
   3f9d4:	cmp	r0, #0
   3f9d8:	beq	3f8ac <__assert_fail@plt+0x2d2b8>
   3f9dc:	ldr	r3, [r4, #-8]
   3f9e0:	ldr	r2, [sp, #36]	; 0x24
   3f9e4:	and	r3, r3, r2
   3f9e8:	str	r3, [r4, #-8]
   3f9ec:	add	r4, r4, #24
   3f9f0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   3f9f4:	cmp	r3, #0
   3f9f8:	beq	3f840 <__assert_fail@plt+0x2d24c>
   3f9fc:	ldr	r3, [r4, #-24]	; 0xffffffe8
   3fa00:	cmp	r5, r3
   3fa04:	bne	3f9ec <__assert_fail@plt+0x2d3f8>
   3fa08:	b	3f984 <__assert_fail@plt+0x2d390>
   3fa0c:	ldr	r3, [sp, #32]
   3fa10:	ldr	r9, [sp, #52]	; 0x34
   3fa14:	cmp	r3, #0
   3fa18:	beq	3f8b0 <__assert_fail@plt+0x2d2bc>
   3fa1c:	mvn	r0, #0
   3fa20:	b	3f1dc <__assert_fail@plt+0x2cbe8>
   3fa24:	ldr	r3, [sp, #32]
   3fa28:	cmp	r3, #0
   3fa2c:	bne	3f28c <__assert_fail@plt+0x2cc98>
   3fa30:	ldr	r3, [sp, #16]
   3fa34:	cmp	r3, #0
   3fa38:	bne	3f268 <__assert_fail@plt+0x2cc74>
   3fa3c:	cmp	fp, #31
   3fa40:	bgt	3f520 <__assert_fail@plt+0x2cf2c>
   3fa44:	ldr	r2, [sp, #68]	; 0x44
   3fa48:	ldr	r1, [sp, #36]	; 0x24
   3fa4c:	ldr	r3, [r2, #-8]
   3fa50:	and	r3, r3, r1
   3fa54:	str	r3, [r2, #-8]
   3fa58:	b	3f520 <__assert_fail@plt+0x2cf2c>
   3fa5c:	ldr	r3, [sp, #32]
   3fa60:	cmp	r3, #0
   3fa64:	bne	3f28c <__assert_fail@plt+0x2cc98>
   3fa68:	ldr	r3, [sp, #16]
   3fa6c:	cmp	r3, #0
   3fa70:	bne	3f268 <__assert_fail@plt+0x2cc74>
   3fa74:	cmp	fp, #31
   3fa78:	bgt	3f3bc <__assert_fail@plt+0x2cdc8>
   3fa7c:	ldr	r2, [sp, #92]	; 0x5c
   3fa80:	ldr	r1, [sp, #36]	; 0x24
   3fa84:	ldr	r3, [r2, #-8]
   3fa88:	and	r3, r3, r1
   3fa8c:	str	r3, [r2, #-8]
   3fa90:	b	3f3bc <__assert_fail@plt+0x2cdc8>
   3fa94:	ldr	r3, [sp, #148]	; 0x94
   3fa98:	ldr	r3, [r3, #4]
   3fa9c:	b	3f478 <__assert_fail@plt+0x2ce84>
   3faa0:	ldr	r3, [sp, #32]
   3faa4:	cmp	r3, #0
   3faa8:	bne	3f28c <__assert_fail@plt+0x2cc98>
   3faac:	ldr	r3, [sp, #16]
   3fab0:	cmp	r3, #0
   3fab4:	bne	3f268 <__assert_fail@plt+0x2cc74>
   3fab8:	cmp	fp, #31
   3fabc:	bgt	3f228 <__assert_fail@plt+0x2cc34>
   3fac0:	ldr	r2, [sp, #88]	; 0x58
   3fac4:	ldr	r1, [sp, #36]	; 0x24
   3fac8:	ldr	r3, [r2, #-8]
   3facc:	and	r3, r3, r1
   3fad0:	str	r3, [r2, #-8]
   3fad4:	b	3f228 <__assert_fail@plt+0x2cc34>
   3fad8:	ldr	r1, [sp, #16]
   3fadc:	cmp	r1, #0
   3fae0:	beq	3f324 <__assert_fail@plt+0x2cd30>
   3fae4:	ldr	r1, [sp, #104]	; 0x68
   3fae8:	ldr	r2, [r2, r1, lsl #3]
   3faec:	cmp	fp, r2
   3faf0:	bne	3f324 <__assert_fail@plt+0x2cd30>
   3faf4:	b	3f268 <__assert_fail@plt+0x2cc74>
   3faf8:	ldr	r3, [sp, #136]	; 0x88
   3fafc:	ldr	r3, [r3, #4]
   3fb00:	b	3f324 <__assert_fail@plt+0x2cd30>
   3fb04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fb08:	sub	sp, sp, #36	; 0x24
   3fb0c:	ldr	fp, [r0, #108]	; 0x6c
   3fb10:	ldr	r6, [sp, #72]	; 0x48
   3fb14:	ldr	r7, [sp, #80]	; 0x50
   3fb18:	ldr	lr, [r0, #84]	; 0x54
   3fb1c:	mov	ip, fp
   3fb20:	mov	r4, #0
   3fb24:	str	lr, [sp, #12]
   3fb28:	cmp	r4, ip
   3fb2c:	bge	3fb88 <__assert_fail@plt+0x2d594>
   3fb30:	add	lr, r4, ip
   3fb34:	ldr	r5, [r0, #116]	; 0x74
   3fb38:	add	lr, lr, lr, lsr #31
   3fb3c:	asr	lr, lr, #1
   3fb40:	add	r8, lr, lr, lsl #1
   3fb44:	add	r8, r5, r8, lsl #3
   3fb48:	ldr	r8, [r8, #4]
   3fb4c:	cmp	r6, r8
   3fb50:	ble	3fb78 <__assert_fail@plt+0x2d584>
   3fb54:	b	3fd24 <__assert_fail@plt+0x2d730>
   3fb58:	asr	ip, ip, #1
   3fb5c:	mov	r9, ip
   3fb60:	add	r8, ip, ip, lsl #1
   3fb64:	add	r8, r5, r8, lsl #3
   3fb68:	ldr	r8, [r8, #4]
   3fb6c:	cmp	r8, r6
   3fb70:	blt	3fd2c <__assert_fail@plt+0x2d738>
   3fb74:	mov	lr, ip
   3fb78:	add	ip, r4, lr
   3fb7c:	cmp	r4, lr
   3fb80:	add	ip, ip, ip, lsr #31
   3fb84:	blt	3fb58 <__assert_fail@plt+0x2d564>
   3fb88:	cmp	fp, r4
   3fb8c:	mvnle	r4, #0
   3fb90:	ble	3fbac <__assert_fail@plt+0x2d5b8>
   3fb94:	add	lr, r4, r4, lsl #1
   3fb98:	ldr	ip, [r0, #116]	; 0x74
   3fb9c:	add	ip, ip, lr, lsl #3
   3fba0:	ldr	ip, [ip, #4]
   3fba4:	cmp	r6, ip
   3fba8:	mvnne	r4, #0
   3fbac:	mov	ip, fp
   3fbb0:	mov	r5, #0
   3fbb4:	cmp	r5, ip
   3fbb8:	bge	3fc14 <__assert_fail@plt+0x2d620>
   3fbbc:	add	lr, r5, ip
   3fbc0:	ldr	r8, [r0, #116]	; 0x74
   3fbc4:	add	lr, lr, lr, lsr #31
   3fbc8:	asr	lr, lr, #1
   3fbcc:	add	r9, lr, lr, lsl #1
   3fbd0:	add	r9, r8, r9, lsl #3
   3fbd4:	ldr	r9, [r9, #4]
   3fbd8:	cmp	r7, r9
   3fbdc:	ble	3fc04 <__assert_fail@plt+0x2d610>
   3fbe0:	b	3fd38 <__assert_fail@plt+0x2d744>
   3fbe4:	asr	ip, ip, #1
   3fbe8:	mov	sl, ip
   3fbec:	add	r9, ip, ip, lsl #1
   3fbf0:	add	r9, r8, r9, lsl #3
   3fbf4:	ldr	r9, [r9, #4]
   3fbf8:	cmp	r9, r7
   3fbfc:	blt	3fd40 <__assert_fail@plt+0x2d74c>
   3fc00:	mov	lr, ip
   3fc04:	add	ip, r5, lr
   3fc08:	cmp	r5, lr
   3fc0c:	add	ip, ip, ip, lsr #31
   3fc10:	blt	3fbe4 <__assert_fail@plt+0x2d5f0>
   3fc14:	cmp	fp, r5
   3fc18:	mvnle	r5, #0
   3fc1c:	ble	3fc38 <__assert_fail@plt+0x2d644>
   3fc20:	add	lr, r5, r5, lsl #1
   3fc24:	ldr	ip, [r0, #116]	; 0x74
   3fc28:	add	ip, ip, lr, lsl #3
   3fc2c:	ldr	ip, [ip, #4]
   3fc30:	cmp	r7, ip
   3fc34:	mvnne	r5, #0
   3fc38:	ldr	ip, [r1]
   3fc3c:	cmp	ip, #0
   3fc40:	ble	3fd60 <__assert_fail@plt+0x2d76c>
   3fc44:	ldr	r8, [sp, #12]
   3fc48:	mov	sl, r2
   3fc4c:	mov	fp, r0
   3fc50:	mov	r9, #0
   3fc54:	str	r3, [sp, #20]
   3fc58:	str	r1, [sp, #16]
   3fc5c:	str	r4, [sp, #24]
   3fc60:	str	r5, [sp, #28]
   3fc64:	ldr	r3, [sl]
   3fc68:	ldr	r2, [fp, #116]	; 0x74
   3fc6c:	lsl	r1, r9, #2
   3fc70:	ldr	r3, [r3, r9, lsl #2]
   3fc74:	ldr	r0, [r8]
   3fc78:	str	r1, [sp, #12]
   3fc7c:	add	r3, r3, r3, lsl #1
   3fc80:	add	lr, r2, r3, lsl #3
   3fc84:	ldr	r3, [r2, r3, lsl #3]
   3fc88:	ldr	r1, [lr, #8]
   3fc8c:	cmp	r6, r1
   3fc90:	ldr	r5, [r0, r3, lsl #3]
   3fc94:	blt	3fdc0 <__assert_fail@plt+0x2d7cc>
   3fc98:	ldr	r3, [lr, #12]
   3fc9c:	cmp	r6, r3
   3fca0:	bgt	3fd68 <__assert_fail@plt+0x2d774>
   3fca4:	cmp	r6, r3
   3fca8:	moveq	r4, #2
   3fcac:	movne	r4, #0
   3fcb0:	cmp	r6, r1
   3fcb4:	orreq	r4, r4, #1
   3fcb8:	cmp	r4, #0
   3fcbc:	bne	3fd70 <__assert_fail@plt+0x2d77c>
   3fcc0:	cmp	r7, r1
   3fcc4:	blt	3fd18 <__assert_fail@plt+0x2d724>
   3fcc8:	cmp	r7, r3
   3fccc:	movgt	r1, #1
   3fcd0:	bgt	3fd10 <__assert_fail@plt+0x2d71c>
   3fcd4:	cmp	r7, r3
   3fcd8:	moveq	r3, #2
   3fcdc:	movne	r3, #0
   3fce0:	cmp	r7, r1
   3fce4:	movne	r1, r3
   3fce8:	orreq	r1, r3, #1
   3fcec:	cmp	r1, #0
   3fcf0:	beq	3fd10 <__assert_fail@plt+0x2d71c>
   3fcf4:	ldr	r3, [sp, #28]
   3fcf8:	mov	r2, r5
   3fcfc:	str	r3, [sp]
   3fd00:	mov	r0, fp
   3fd04:	ldr	r3, [sp, #76]	; 0x4c
   3fd08:	bl	3f0f4 <__assert_fail@plt+0x2cb00>
   3fd0c:	mov	r1, r0
   3fd10:	cmp	r1, r4
   3fd14:	beq	3fd4c <__assert_fail@plt+0x2d758>
   3fd18:	mov	r0, #1
   3fd1c:	add	sp, sp, #36	; 0x24
   3fd20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fd24:	mov	r9, lr
   3fd28:	mov	lr, ip
   3fd2c:	add	r4, r9, #1
   3fd30:	mov	ip, lr
   3fd34:	b	3fb28 <__assert_fail@plt+0x2d534>
   3fd38:	mov	sl, lr
   3fd3c:	mov	lr, ip
   3fd40:	add	r5, sl, #1
   3fd44:	mov	ip, lr
   3fd48:	b	3fbb4 <__assert_fail@plt+0x2d5c0>
   3fd4c:	ldr	r3, [sp, #16]
   3fd50:	ldr	ip, [r3]
   3fd54:	add	r9, r9, #1
   3fd58:	cmp	r9, ip
   3fd5c:	blt	3fc64 <__assert_fail@plt+0x2d670>
   3fd60:	mov	r0, #0
   3fd64:	b	3fd1c <__assert_fail@plt+0x2d728>
   3fd68:	mov	r4, #1
   3fd6c:	b	3fcc0 <__assert_fail@plt+0x2d6cc>
   3fd70:	ldr	r3, [sp, #24]
   3fd74:	mov	r1, r4
   3fd78:	str	r3, [sp]
   3fd7c:	mov	r2, r5
   3fd80:	ldr	r3, [sp, #20]
   3fd84:	mov	r0, fp
   3fd88:	bl	3f0f4 <__assert_fail@plt+0x2cb00>
   3fd8c:	ldr	r2, [sl]
   3fd90:	lsl	r1, r9, #2
   3fd94:	ldr	r3, [fp, #116]	; 0x74
   3fd98:	ldr	r2, [r2, r1]
   3fd9c:	add	r2, r2, r2, lsl #1
   3fda0:	add	r3, r3, r2, lsl #3
   3fda4:	ldr	r1, [r3, #8]
   3fda8:	cmp	r7, r1
   3fdac:	mvnlt	r1, #0
   3fdb0:	mov	r4, r0
   3fdb4:	blt	3fd10 <__assert_fail@plt+0x2d71c>
   3fdb8:	ldr	r3, [r3, #12]
   3fdbc:	b	3fcc8 <__assert_fail@plt+0x2d6d4>
   3fdc0:	cmp	r7, r1
   3fdc4:	blt	3fd54 <__assert_fail@plt+0x2d760>
   3fdc8:	ldr	r3, [lr, #12]
   3fdcc:	cmp	r7, r3
   3fdd0:	bgt	3fd18 <__assert_fail@plt+0x2d724>
   3fdd4:	mvn	r4, #0
   3fdd8:	b	3fcd4 <__assert_fail@plt+0x2d6e0>
   3fddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fde0:	mov	r8, r1
   3fde4:	mov	r6, r0
   3fde8:	ldr	r1, [r0, #28]
   3fdec:	add	r0, r8, r8, lsl #1
   3fdf0:	sub	sp, sp, #36	; 0x24
   3fdf4:	add	r1, r1, r0, lsl #2
   3fdf8:	mov	r4, #0
   3fdfc:	str	r4, [sp, #24]
   3fe00:	str	r4, [sp, #20]
   3fe04:	str	r4, [sp, #28]
   3fe08:	ldr	lr, [r1, #4]
   3fe0c:	str	r1, [sp, #12]
   3fe10:	cmp	lr, r4
   3fe14:	str	r3, [sp, #8]
   3fe18:	ble	402c0 <__assert_fail@plt+0x2dccc>
   3fe1c:	mov	r5, r1
   3fe20:	str	r2, [sp]
   3fe24:	ldr	r2, [r5, #8]
   3fe28:	ldr	r3, [r2, r4, lsl #2]
   3fe2c:	cmp	r8, r3
   3fe30:	beq	4000c <__assert_fail@plt+0x2da18>
   3fe34:	ldr	r1, [r6]
   3fe38:	add	r1, r1, r3, lsl #3
   3fe3c:	ldrb	r1, [r1, #4]
   3fe40:	tst	r1, #8
   3fe44:	beq	4000c <__assert_fail@plt+0x2da18>
   3fe48:	add	r3, r3, r3, lsl #1
   3fe4c:	ldr	r1, [r6, #20]
   3fe50:	lsl	r3, r3, #2
   3fe54:	str	r3, [sp, #4]
   3fe58:	add	r3, r1, r3
   3fe5c:	ldr	r0, [r3, #8]
   3fe60:	ldr	r3, [r3, #4]
   3fe64:	cmp	r3, #1
   3fe68:	ldr	r1, [r0]
   3fe6c:	ble	40244 <__assert_fail@plt+0x2dc50>
   3fe70:	cmp	lr, #0
   3fe74:	ldr	r7, [r0, #4]
   3fe78:	ble	3fed4 <__assert_fail@plt+0x2d8e0>
   3fe7c:	sub	sl, lr, #1
   3fe80:	mov	r9, sl
   3fe84:	mov	ip, #0
   3fe88:	cmp	ip, r9
   3fe8c:	bcs	3fec8 <__assert_fail@plt+0x2d8d4>
   3fe90:	add	r0, ip, r9
   3fe94:	lsr	r0, r0, #1
   3fe98:	ldr	r3, [r2, r0, lsl #2]
   3fe9c:	cmp	r1, r3
   3fea0:	ble	3feb8 <__assert_fail@plt+0x2d8c4>
   3fea4:	b	40144 <__assert_fail@plt+0x2db50>
   3fea8:	ldr	r9, [r2, r3, lsl #2]
   3feac:	cmp	r1, r9
   3feb0:	bgt	4014c <__assert_fail@plt+0x2db58>
   3feb4:	mov	r0, r3
   3feb8:	add	r3, ip, r0
   3febc:	cmp	ip, r0
   3fec0:	lsr	r3, r3, #1
   3fec4:	bcc	3fea8 <__assert_fail@plt+0x2d8b4>
   3fec8:	ldr	r3, [r2, ip, lsl #2]
   3fecc:	cmp	r1, r3
   3fed0:	beq	40238 <__assert_fail@plt+0x2dc44>
   3fed4:	ldr	r3, [sp]
   3fed8:	ldr	fp, [r3, #4]
   3fedc:	cmp	fp, #0
   3fee0:	ble	3ff3c <__assert_fail@plt+0x2d948>
   3fee4:	ldr	sl, [r3, #8]
   3fee8:	sub	r9, fp, #1
   3feec:	mov	ip, #0
   3fef0:	cmp	ip, r9
   3fef4:	bcs	3ff30 <__assert_fail@plt+0x2d93c>
   3fef8:	add	r0, ip, r9
   3fefc:	lsr	r0, r0, #1
   3ff00:	ldr	r3, [sl, r0, lsl #2]
   3ff04:	cmp	r1, r3
   3ff08:	ble	3ff20 <__assert_fail@plt+0x2d92c>
   3ff0c:	b	40224 <__assert_fail@plt+0x2dc30>
   3ff10:	ldr	r9, [sl, r3, lsl #2]
   3ff14:	cmp	r1, r9
   3ff18:	bgt	4022c <__assert_fail@plt+0x2dc38>
   3ff1c:	mov	r0, r3
   3ff20:	add	r3, ip, r0
   3ff24:	cmp	ip, r0
   3ff28:	lsr	r3, r3, #1
   3ff2c:	bcc	3ff10 <__assert_fail@plt+0x2d91c>
   3ff30:	ldr	r3, [sl, ip, lsl #2]
   3ff34:	cmp	r1, r3
   3ff38:	beq	401c8 <__assert_fail@plt+0x2dbd4>
   3ff3c:	cmp	r7, #0
   3ff40:	ble	4000c <__assert_fail@plt+0x2da18>
   3ff44:	cmp	lr, #0
   3ff48:	ble	3ffa8 <__assert_fail@plt+0x2d9b4>
   3ff4c:	sub	sl, lr, #1
   3ff50:	mov	r0, #0
   3ff54:	cmp	r0, sl
   3ff58:	bcs	3ff94 <__assert_fail@plt+0x2d9a0>
   3ff5c:	add	r1, r0, sl
   3ff60:	lsr	r1, r1, #1
   3ff64:	ldr	r3, [r2, r1, lsl #2]
   3ff68:	cmp	r3, r7
   3ff6c:	bge	3ff84 <__assert_fail@plt+0x2d990>
   3ff70:	b	401b4 <__assert_fail@plt+0x2dbc0>
   3ff74:	ldr	ip, [r2, r3, lsl #2]
   3ff78:	cmp	ip, r7
   3ff7c:	blt	401bc <__assert_fail@plt+0x2dbc8>
   3ff80:	mov	r1, r3
   3ff84:	add	r3, r0, r1
   3ff88:	cmp	r0, r1
   3ff8c:	lsr	r3, r3, #1
   3ff90:	bcc	3ff74 <__assert_fail@plt+0x2d980>
   3ff94:	ldr	r3, [r2, r0, lsl #2]
   3ff98:	cmp	r3, r7
   3ff9c:	beq	4000c <__assert_fail@plt+0x2da18>
   3ffa0:	ldr	r3, [sp]
   3ffa4:	ldr	fp, [r3, #4]
   3ffa8:	cmp	fp, #0
   3ffac:	ble	4000c <__assert_fail@plt+0x2da18>
   3ffb0:	ldr	r3, [sp]
   3ffb4:	sub	fp, fp, #1
   3ffb8:	mov	r1, #0
   3ffbc:	ldr	r0, [r3, #8]
   3ffc0:	cmp	r1, fp
   3ffc4:	bcs	40000 <__assert_fail@plt+0x2da0c>
   3ffc8:	add	r2, r1, fp
   3ffcc:	lsr	r2, r2, #1
   3ffd0:	ldr	r3, [r0, r2, lsl #2]
   3ffd4:	cmp	r7, r3
   3ffd8:	ble	3fff0 <__assert_fail@plt+0x2d9fc>
   3ffdc:	b	40268 <__assert_fail@plt+0x2dc74>
   3ffe0:	ldr	ip, [r0, r3, lsl #2]
   3ffe4:	cmp	ip, r7
   3ffe8:	blt	40270 <__assert_fail@plt+0x2dc7c>
   3ffec:	mov	r2, r3
   3fff0:	add	r3, r1, r2
   3fff4:	cmp	r1, r2
   3fff8:	lsr	r3, r3, #1
   3fffc:	bcc	3ffe0 <__assert_fail@plt+0x2d9ec>
   40000:	ldr	r3, [r0, r1, lsl #2]
   40004:	cmp	r3, r7
   40008:	beq	401c8 <__assert_fail@plt+0x2dbd4>
   4000c:	add	r4, r4, #1
   40010:	cmp	r4, lr
   40014:	blt	3fe24 <__assert_fail@plt+0x2d830>
   40018:	cmp	lr, #0
   4001c:	ldr	r5, [sp]
   40020:	ldrle	r0, [sp, #28]
   40024:	ble	4011c <__assert_fail@plt+0x2db28>
   40028:	ldr	r3, [sp, #12]
   4002c:	mov	r7, #0
   40030:	ldr	r0, [sp, #28]
   40034:	ldr	r9, [r3, #8]
   40038:	mov	sl, r7
   4003c:	sub	r9, r9, #4
   40040:	ldr	r4, [sp, #24]
   40044:	ldr	r2, [r9, #4]!
   40048:	cmp	r4, #0
   4004c:	ble	400a4 <__assert_fail@plt+0x2dab0>
   40050:	sub	r4, r4, #1
   40054:	mov	ip, sl
   40058:	cmp	ip, r4
   4005c:	bcs	40098 <__assert_fail@plt+0x2daa4>
   40060:	add	r1, ip, r4
   40064:	lsr	r1, r1, #1
   40068:	ldr	r3, [r0, r1, lsl #2]
   4006c:	cmp	r2, r3
   40070:	ble	40088 <__assert_fail@plt+0x2da94>
   40074:	b	40130 <__assert_fail@plt+0x2db3c>
   40078:	ldr	r4, [r0, r3, lsl #2]
   4007c:	cmp	r2, r4
   40080:	bgt	40138 <__assert_fail@plt+0x2db44>
   40084:	mov	r1, r3
   40088:	add	r3, r1, ip
   4008c:	cmp	r1, ip
   40090:	lsr	r3, r3, #1
   40094:	bhi	40078 <__assert_fail@plt+0x2da84>
   40098:	ldr	r3, [r0, ip, lsl #2]
   4009c:	cmp	r2, r3
   400a0:	beq	40110 <__assert_fail@plt+0x2db1c>
   400a4:	ldr	r8, [r5, #4]
   400a8:	cmp	r8, #0
   400ac:	ble	40110 <__assert_fail@plt+0x2db1c>
   400b0:	sub	fp, r8, #1
   400b4:	ldr	r6, [r5, #8]
   400b8:	mov	r4, fp
   400bc:	mov	ip, sl
   400c0:	cmp	ip, r4
   400c4:	bcs	40100 <__assert_fail@plt+0x2db0c>
   400c8:	add	r1, ip, r4
   400cc:	lsr	r1, r1, #1
   400d0:	ldr	r3, [r6, r1, lsl #2]
   400d4:	cmp	r3, r2
   400d8:	bge	400f0 <__assert_fail@plt+0x2dafc>
   400dc:	b	40158 <__assert_fail@plt+0x2db64>
   400e0:	ldr	r4, [r6, r3, lsl #2]
   400e4:	cmp	r2, r4
   400e8:	bgt	40160 <__assert_fail@plt+0x2db6c>
   400ec:	mov	r1, r3
   400f0:	add	r3, ip, r1
   400f4:	cmp	ip, r1
   400f8:	lsr	r3, r3, #1
   400fc:	bcc	400e0 <__assert_fail@plt+0x2daec>
   40100:	ldr	r3, [r6, ip, lsl #2]
   40104:	add	r6, r6, ip, lsl #2
   40108:	cmp	r2, r3
   4010c:	beq	4016c <__assert_fail@plt+0x2db78>
   40110:	add	r7, r7, #1
   40114:	cmp	r7, lr
   40118:	blt	40040 <__assert_fail@plt+0x2da4c>
   4011c:	bl	376d0 <__assert_fail@plt+0x250dc>
   40120:	mov	r7, #0
   40124:	mov	r0, r7
   40128:	add	sp, sp, #36	; 0x24
   4012c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40130:	mov	r3, r1
   40134:	mov	r1, r4
   40138:	add	ip, r3, #1
   4013c:	mov	r4, r1
   40140:	b	40058 <__assert_fail@plt+0x2da64>
   40144:	mov	r3, r0
   40148:	mov	r0, r9
   4014c:	add	ip, r3, #1
   40150:	mov	r9, r0
   40154:	b	3fe88 <__assert_fail@plt+0x2d894>
   40158:	mov	r3, r1
   4015c:	mov	r1, r4
   40160:	add	ip, r3, #1
   40164:	mov	r4, r1
   40168:	b	400c0 <__assert_fail@plt+0x2dacc>
   4016c:	cmp	ip, r8
   40170:	movlt	r8, #0
   40174:	movge	r8, #1
   40178:	orrs	r3, r8, ip, lsr #31
   4017c:	mov	r3, ip
   40180:	bne	40110 <__assert_fail@plt+0x2db1c>
   40184:	cmp	ip, fp
   40188:	str	fp, [r5, #4]
   4018c:	bge	401a8 <__assert_fail@plt+0x2dbb4>
   40190:	ldr	r2, [r6, #4]
   40194:	add	r3, r3, #1
   40198:	str	r2, [r6], #4
   4019c:	ldr	r2, [r5, #4]
   401a0:	cmp	r3, r2
   401a4:	blt	40190 <__assert_fail@plt+0x2db9c>
   401a8:	ldr	r3, [sp, #12]
   401ac:	ldr	lr, [r3, #4]
   401b0:	b	40110 <__assert_fail@plt+0x2db1c>
   401b4:	mov	r3, r1
   401b8:	mov	r1, sl
   401bc:	add	r0, r3, #1
   401c0:	mov	sl, r1
   401c4:	b	3ff54 <__assert_fail@plt+0x2d960>
   401c8:	ldr	r3, [sp, #8]
   401cc:	ldr	r3, [r3, #4]
   401d0:	cmp	r3, #0
   401d4:	beq	4000c <__assert_fail@plt+0x2da18>
   401d8:	ldr	r2, [r6, #28]
   401dc:	ldr	r1, [sp, #4]
   401e0:	add	r2, r2, r1
   401e4:	ldr	r0, [r2, #4]
   401e8:	cmp	r0, #0
   401ec:	beq	4000c <__assert_fail@plt+0x2da18>
   401f0:	ldr	r1, [sp, #24]
   401f4:	add	r3, r3, r0
   401f8:	ldr	r7, [sp, #20]
   401fc:	add	r1, r3, r1
   40200:	cmp	r1, r7
   40204:	bgt	4027c <__assert_fail@plt+0x2dc88>
   40208:	ldr	r1, [sp, #8]
   4020c:	add	r0, sp, #20
   40210:	bl	3b9e8 <__assert_fail@plt+0x293f4>
   40214:	cmp	r0, #0
   40218:	bne	402a8 <__assert_fail@plt+0x2dcb4>
   4021c:	ldr	lr, [r5, #4]
   40220:	b	4000c <__assert_fail@plt+0x2da18>
   40224:	mov	r3, r0
   40228:	mov	r0, r9
   4022c:	add	ip, r3, #1
   40230:	mov	r9, r0
   40234:	b	3fef0 <__assert_fail@plt+0x2d8fc>
   40238:	cmp	r7, #0
   4023c:	bgt	3ff50 <__assert_fail@plt+0x2d95c>
   40240:	b	4000c <__assert_fail@plt+0x2da18>
   40244:	cmp	lr, #0
   40248:	mvngt	r7, #0
   4024c:	bgt	3fe7c <__assert_fail@plt+0x2d888>
   40250:	ldr	r3, [sp]
   40254:	ldr	fp, [r3, #4]
   40258:	cmp	fp, #0
   4025c:	ble	40018 <__assert_fail@plt+0x2da24>
   40260:	mvn	r7, #0
   40264:	b	3fee4 <__assert_fail@plt+0x2d8f0>
   40268:	mov	r3, r2
   4026c:	mov	r2, fp
   40270:	add	r1, r3, #1
   40274:	mov	fp, r2
   40278:	b	3ffc0 <__assert_fail@plt+0x2d9cc>
   4027c:	add	r7, r3, r7
   40280:	ldr	r0, [sp, #28]
   40284:	lsl	r1, r7, #2
   40288:	str	r2, [sp, #4]
   4028c:	bl	3aacc <__assert_fail@plt+0x284d8>
   40290:	cmp	r0, #0
   40294:	beq	402c8 <__assert_fail@plt+0x2dcd4>
   40298:	str	r0, [sp, #28]
   4029c:	str	r7, [sp, #20]
   402a0:	ldr	r2, [sp, #4]
   402a4:	b	40208 <__assert_fail@plt+0x2dc14>
   402a8:	mov	r7, r0
   402ac:	ldr	r0, [sp, #28]
   402b0:	bl	376d0 <__assert_fail@plt+0x250dc>
   402b4:	mov	r0, r7
   402b8:	add	sp, sp, #36	; 0x24
   402bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   402c0:	mov	r0, r4
   402c4:	b	4011c <__assert_fail@plt+0x2db28>
   402c8:	mov	r7, #12
   402cc:	b	402ac <__assert_fail@plt+0x2dcb8>
   402d0:	ldr	r3, [r0, #36]	; 0x24
   402d4:	cmn	r3, #-536870910	; 0xe0000002
   402d8:	bhi	404d4 <__assert_fail@plt+0x2dee0>
   402dc:	ldr	r2, [r0, #48]	; 0x30
   402e0:	push	{r4, r5, r6, lr}
   402e4:	lsl	r5, r3, #1
   402e8:	cmp	r5, r2
   402ec:	movge	r5, r2
   402f0:	ldr	r3, [r0, #80]	; 0x50
   402f4:	cmp	r5, r1
   402f8:	movlt	r5, r1
   402fc:	cmp	r3, #1
   40300:	mov	r4, r0
   40304:	ble	4034c <__assert_fail@plt+0x2dd58>
   40308:	cmn	r5, #-1073741823	; 0xc0000001
   4030c:	bhi	40428 <__assert_fail@plt+0x2de34>
   40310:	lsl	r6, r5, #2
   40314:	mov	r1, r6
   40318:	ldr	r0, [r0, #8]
   4031c:	bl	3aacc <__assert_fail@plt+0x284d8>
   40320:	subs	r3, r0, #0
   40324:	beq	40428 <__assert_fail@plt+0x2de34>
   40328:	ldr	r0, [r4, #12]
   4032c:	str	r3, [r4, #8]
   40330:	cmp	r0, #0
   40334:	beq	4034c <__assert_fail@plt+0x2dd58>
   40338:	mov	r1, r6
   4033c:	bl	3aacc <__assert_fail@plt+0x284d8>
   40340:	cmp	r0, #0
   40344:	beq	40428 <__assert_fail@plt+0x2de34>
   40348:	str	r0, [r4, #12]
   4034c:	ldrb	r3, [r4, #75]	; 0x4b
   40350:	cmp	r3, #0
   40354:	bne	40414 <__assert_fail@plt+0x2de20>
   40358:	ldr	r0, [r4, #100]	; 0x64
   4035c:	str	r5, [r4, #36]	; 0x24
   40360:	cmp	r0, #0
   40364:	beq	40380 <__assert_fail@plt+0x2dd8c>
   40368:	add	r1, r5, #1
   4036c:	lsl	r1, r1, #2
   40370:	bl	3aacc <__assert_fail@plt+0x284d8>
   40374:	cmp	r0, #0
   40378:	beq	40428 <__assert_fail@plt+0x2de34>
   4037c:	str	r0, [r4, #100]	; 0x64
   40380:	ldrb	r5, [r4, #72]	; 0x48
   40384:	ldr	r3, [r4, #80]	; 0x50
   40388:	cmp	r5, #0
   4038c:	beq	403a4 <__assert_fail@plt+0x2ddb0>
   40390:	cmp	r3, #1
   40394:	ble	40448 <__assert_fail@plt+0x2de54>
   40398:	mov	r0, r4
   4039c:	pop	{r4, r5, r6, lr}
   403a0:	b	3afd0 <__assert_fail@plt+0x289dc>
   403a4:	cmp	r3, #1
   403a8:	bgt	40438 <__assert_fail@plt+0x2de44>
   403ac:	ldr	r0, [r4, #64]	; 0x40
   403b0:	cmp	r0, #0
   403b4:	popeq	{r4, r5, r6, pc}
   403b8:	ldr	lr, [r4, #36]	; 0x24
   403bc:	ldr	r2, [r4, #48]	; 0x30
   403c0:	ldr	r3, [r4, #28]
   403c4:	cmp	lr, r2
   403c8:	movge	lr, r2
   403cc:	cmp	lr, r3
   403d0:	bgt	403dc <__assert_fail@plt+0x2dde8>
   403d4:	b	40404 <__assert_fail@plt+0x2de10>
   403d8:	ldr	r0, [r4, #64]	; 0x40
   403dc:	ldr	r2, [r4]
   403e0:	ldr	ip, [r4, #24]
   403e4:	add	r2, r2, r3
   403e8:	ldr	r1, [r4, #4]
   403ec:	ldrb	r2, [r2, ip]
   403f0:	ldrb	r2, [r0, r2]
   403f4:	strb	r2, [r1, r3]
   403f8:	add	r3, r3, #1
   403fc:	cmp	lr, r3
   40400:	bne	403d8 <__assert_fail@plt+0x2dde4>
   40404:	str	r3, [r4, #28]
   40408:	str	r3, [r4, #32]
   4040c:	mov	r0, #0
   40410:	pop	{r4, r5, r6, pc}
   40414:	mov	r1, r5
   40418:	ldr	r0, [r4, #4]
   4041c:	bl	3aacc <__assert_fail@plt+0x284d8>
   40420:	cmp	r0, #0
   40424:	bne	40430 <__assert_fail@plt+0x2de3c>
   40428:	mov	r0, #12
   4042c:	pop	{r4, r5, r6, pc}
   40430:	str	r0, [r4, #4]
   40434:	b	40358 <__assert_fail@plt+0x2dd64>
   40438:	mov	r0, r4
   4043c:	bl	3ae30 <__assert_fail@plt+0x2883c>
   40440:	mov	r0, r5
   40444:	pop	{r4, r5, r6, pc}
   40448:	ldr	r6, [r4, #36]	; 0x24
   4044c:	ldr	r3, [r4, #48]	; 0x30
   40450:	ldr	r5, [r4, #28]
   40454:	cmp	r6, r3
   40458:	movge	r6, r3
   4045c:	cmp	r6, r5
   40460:	ble	404dc <__assert_fail@plt+0x2dee8>
   40464:	bl	122a0 <__ctype_toupper_loc@plt>
   40468:	b	40488 <__assert_fail@plt+0x2de94>
   4046c:	ldr	r1, [r0]
   40470:	ldr	r2, [r4, #4]
   40474:	ldr	r3, [r1, r3, lsl #2]
   40478:	strb	r3, [r2, r5]
   4047c:	add	r5, r5, #1
   40480:	cmp	r6, r5
   40484:	beq	404c4 <__assert_fail@plt+0x2ded0>
   40488:	ldr	r3, [r4]
   4048c:	ldr	r1, [r4, #24]
   40490:	ldr	r2, [r4, #64]	; 0x40
   40494:	add	r3, r3, r5
   40498:	cmp	r2, #0
   4049c:	ldrb	r3, [r3, r1]
   404a0:	beq	4046c <__assert_fail@plt+0x2de78>
   404a4:	ldrb	r3, [r2, r3]
   404a8:	ldr	ip, [r0]
   404ac:	ldr	r1, [r4, #4]
   404b0:	ldr	r3, [ip, r3, lsl #2]
   404b4:	strb	r3, [r1, r5]
   404b8:	add	r5, r5, #1
   404bc:	cmp	r6, r5
   404c0:	bne	40488 <__assert_fail@plt+0x2de94>
   404c4:	str	r6, [r4, #28]
   404c8:	str	r6, [r4, #32]
   404cc:	mov	r0, #0
   404d0:	pop	{r4, r5, r6, pc}
   404d4:	mov	r0, #12
   404d8:	bx	lr
   404dc:	mov	r6, r5
   404e0:	b	404c4 <__assert_fail@plt+0x2ded0>
   404e4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   404e8:	ldr	r7, [r2, #4]
   404ec:	cmp	r7, #0
   404f0:	streq	r7, [r0]
   404f4:	moveq	r4, r7
   404f8:	beq	406d8 <__assert_fail@plt+0x2e0e4>
   404fc:	ble	40794 <__assert_fail@plt+0x2e1a0>
   40500:	ldr	r3, [r2, #8]
   40504:	mov	r5, r7
   40508:	add	lr, r3, r7, lsl #2
   4050c:	ldr	ip, [r3], #4
   40510:	cmp	lr, r3
   40514:	add	r5, r5, ip
   40518:	bne	4050c <__assert_fail@plt+0x2df18>
   4051c:	ldr	r3, [r1, #68]	; 0x44
   40520:	ldr	ip, [r1, #32]
   40524:	and	r3, r3, r5
   40528:	add	r3, r3, r3, lsl #1
   4052c:	lsl	r3, r3, #2
   40530:	add	lr, ip, r3
   40534:	ldr	r6, [ip, r3]
   40538:	cmp	r6, #0
   4053c:	ble	40594 <__assert_fail@plt+0x2dfa0>
   40540:	ldr	lr, [lr, #8]
   40544:	sub	sl, r7, #1
   40548:	sub	lr, lr, #4
   4054c:	lsl	sl, sl, #2
   40550:	mov	r3, #0
   40554:	b	40564 <__assert_fail@plt+0x2df70>
   40558:	add	r3, r3, #1
   4055c:	cmp	r3, r6
   40560:	beq	40594 <__assert_fail@plt+0x2dfa0>
   40564:	ldr	r4, [lr, #4]!
   40568:	ldr	ip, [r4]
   4056c:	cmp	r5, ip
   40570:	bne	40558 <__assert_fail@plt+0x2df64>
   40574:	ldr	ip, [r4, #8]
   40578:	cmp	r7, ip
   4057c:	moveq	ip, sl
   40580:	moveq	r8, r7
   40584:	beq	406fc <__assert_fail@plt+0x2e108>
   40588:	add	r3, r3, #1
   4058c:	cmp	r3, r6
   40590:	bne	40564 <__assert_fail@plt+0x2df70>
   40594:	mov	r6, r1
   40598:	mov	r7, r0
   4059c:	mov	r1, #1
   405a0:	mov	r0, #56	; 0x38
   405a4:	mov	r9, r2
   405a8:	bl	37128 <__assert_fail@plt+0x24b34>
   405ac:	subs	r4, r0, #0
   405b0:	beq	40780 <__assert_fail@plt+0x2e18c>
   405b4:	ldr	r0, [r9, #4]
   405b8:	add	r8, r4, #4
   405bc:	cmp	r0, #0
   405c0:	str	r0, [r4, #8]
   405c4:	ble	4071c <__assert_fail@plt+0x2e128>
   405c8:	str	r0, [r4, #4]
   405cc:	lsl	r0, r0, #2
   405d0:	bl	3a010 <__assert_fail@plt+0x27a1c>
   405d4:	cmp	r0, #0
   405d8:	str	r0, [r4, #12]
   405dc:	beq	4079c <__assert_fail@plt+0x2e1a8>
   405e0:	ldr	fp, [r9, #4]
   405e4:	ldr	r1, [r9, #8]
   405e8:	lsl	sl, fp, #2
   405ec:	mov	r2, sl
   405f0:	bl	12024 <memcpy@plt>
   405f4:	cmp	fp, #0
   405f8:	str	r8, [r4, #40]	; 0x28
   405fc:	ble	406c0 <__assert_fail@plt+0x2e0cc>
   40600:	ldr	ip, [r9, #8]
   40604:	ldr	r9, [r6]
   40608:	add	lr, ip, sl
   4060c:	ldr	sl, [pc, #412]	; 407b0 <__assert_fail@plt+0x2e1bc>
   40610:	b	4066c <__assert_fail@plt+0x2e078>
   40614:	ldrb	r3, [r2, #6]
   40618:	ldrb	r1, [r4, #52]	; 0x34
   4061c:	cmp	r0, #2
   40620:	lsr	r3, r3, #4
   40624:	orr	r3, r3, r1, lsr #5
   40628:	and	r3, r3, #1
   4062c:	bic	r1, r1, #32
   40630:	orr	r3, r1, r3, lsl #5
   40634:	strb	r3, [r4, #52]	; 0x34
   40638:	uxtbeq	r3, r3
   4063c:	orreq	r3, r3, #16
   40640:	strbeq	r3, [r4, #52]	; 0x34
   40644:	beq	40664 <__assert_fail@plt+0x2e070>
   40648:	cmp	r0, #4
   4064c:	beq	4070c <__assert_fail@plt+0x2e118>
   40650:	cmp	r0, #12
   40654:	beq	406ac <__assert_fail@plt+0x2e0b8>
   40658:	ldr	r3, [r2, #4]
   4065c:	tst	r3, sl
   40660:	bne	406ac <__assert_fail@plt+0x2e0b8>
   40664:	cmp	lr, ip
   40668:	beq	406c0 <__assert_fail@plt+0x2e0cc>
   4066c:	ldr	r2, [ip], #4
   40670:	add	r2, r9, r2, lsl #3
   40674:	ldrb	r0, [r2, #4]
   40678:	cmp	r0, #1
   4067c:	bne	40614 <__assert_fail@plt+0x2e020>
   40680:	ldr	r3, [r2, #4]
   40684:	tst	r3, sl
   40688:	beq	40664 <__assert_fail@plt+0x2e070>
   4068c:	ldrb	r3, [r2, #6]
   40690:	ldrb	r2, [r4, #52]	; 0x34
   40694:	lsr	r3, r3, #4
   40698:	orr	r3, r3, r2, lsr #5
   4069c:	and	r3, r3, #1
   406a0:	bic	r2, r2, #32
   406a4:	orr	r3, r2, r3, lsl #5
   406a8:	strb	r3, [r4, #52]	; 0x34
   406ac:	ldrb	r3, [r4, #52]	; 0x34
   406b0:	cmp	lr, ip
   406b4:	orr	r3, r3, #128	; 0x80
   406b8:	strb	r3, [r4, #52]	; 0x34
   406bc:	bne	4066c <__assert_fail@plt+0x2e078>
   406c0:	mov	r2, r5
   406c4:	mov	r0, r6
   406c8:	mov	r1, r4
   406cc:	bl	3acf4 <__assert_fail@plt+0x28700>
   406d0:	cmp	r0, #0
   406d4:	bne	40734 <__assert_fail@plt+0x2e140>
   406d8:	mov	r0, r4
   406dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   406e0:	ldr	fp, [r4, #12]
   406e4:	ldr	r9, [r2, #8]
   406e8:	ldr	fp, [fp, ip]
   406ec:	ldr	r9, [r9, ip]
   406f0:	sub	ip, ip, #4
   406f4:	cmp	fp, r9
   406f8:	bne	40558 <__assert_fail@plt+0x2df64>
   406fc:	subs	r8, r8, #1
   40700:	bpl	406e0 <__assert_fail@plt+0x2e0ec>
   40704:	mov	r0, r4
   40708:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4070c:	ldrb	r3, [r4, #52]	; 0x34
   40710:	orr	r3, r3, #64	; 0x40
   40714:	strb	r3, [r4, #52]	; 0x34
   40718:	b	40664 <__assert_fail@plt+0x2e070>
   4071c:	mov	r3, #0
   40720:	str	r3, [r4, #4]
   40724:	str	r3, [r8, #4]
   40728:	str	r3, [r8, #8]
   4072c:	str	r8, [r4, #40]	; 0x28
   40730:	b	406c0 <__assert_fail@plt+0x2e0cc>
   40734:	ldr	r0, [r4, #24]
   40738:	bl	376d0 <__assert_fail@plt+0x250dc>
   4073c:	ldr	r0, [r4, #36]	; 0x24
   40740:	bl	376d0 <__assert_fail@plt+0x250dc>
   40744:	ldr	r3, [r4, #40]	; 0x28
   40748:	cmp	r8, r3
   4074c:	beq	40760 <__assert_fail@plt+0x2e16c>
   40750:	ldr	r0, [r3, #8]
   40754:	bl	376d0 <__assert_fail@plt+0x250dc>
   40758:	ldr	r0, [r4, #40]	; 0x28
   4075c:	bl	376d0 <__assert_fail@plt+0x250dc>
   40760:	ldr	r0, [r4, #12]
   40764:	bl	376d0 <__assert_fail@plt+0x250dc>
   40768:	ldr	r0, [r4, #48]	; 0x30
   4076c:	bl	376d0 <__assert_fail@plt+0x250dc>
   40770:	ldr	r0, [r4, #44]	; 0x2c
   40774:	bl	376d0 <__assert_fail@plt+0x250dc>
   40778:	mov	r0, r4
   4077c:	bl	376d0 <__assert_fail@plt+0x250dc>
   40780:	mov	r4, #0
   40784:	mov	r3, #12
   40788:	str	r3, [r7]
   4078c:	mov	r0, r4
   40790:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40794:	mov	r5, r7
   40798:	b	4051c <__assert_fail@plt+0x2df28>
   4079c:	str	r0, [r4, #8]
   407a0:	str	r0, [r4, #4]
   407a4:	mov	r0, r4
   407a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   407ac:	b	40780 <__assert_fail@plt+0x2e18c>
   407b0:	andeq	pc, r3, r0, lsl #30
   407b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   407b8:	mov	r6, #0
   407bc:	ldr	r5, [r0, #108]	; 0x6c
   407c0:	sub	sp, sp, #36	; 0x24
   407c4:	mov	r4, r5
   407c8:	cmp	r6, r4
   407cc:	bge	40828 <__assert_fail@plt+0x2e234>
   407d0:	add	lr, r6, r4
   407d4:	ldr	r7, [r0, #116]	; 0x74
   407d8:	add	lr, lr, lr, lsr #31
   407dc:	asr	lr, lr, #1
   407e0:	add	ip, lr, lr, lsl #1
   407e4:	add	ip, r7, ip, lsl #3
   407e8:	ldr	ip, [ip, #4]
   407ec:	cmp	r2, ip
   407f0:	ble	40818 <__assert_fail@plt+0x2e224>
   407f4:	b	40b88 <__assert_fail@plt+0x2e594>
   407f8:	asr	ip, ip, #1
   407fc:	mov	r8, ip
   40800:	add	r4, ip, ip, lsl #1
   40804:	add	r4, r7, r4, lsl #3
   40808:	ldr	r4, [r4, #4]
   4080c:	cmp	r2, r4
   40810:	bgt	40b90 <__assert_fail@plt+0x2e59c>
   40814:	mov	lr, ip
   40818:	add	ip, lr, r6
   4081c:	cmp	lr, r6
   40820:	add	ip, ip, ip, lsr #31
   40824:	bgt	407f8 <__assert_fail@plt+0x2e204>
   40828:	cmp	r5, r6
   4082c:	ble	408fc <__assert_fail@plt+0x2e308>
   40830:	add	ip, r6, r6, lsl #1
   40834:	ldr	r5, [r0, #116]	; 0x74
   40838:	lsl	ip, ip, #3
   4083c:	add	lr, r5, ip
   40840:	cmn	r6, #1
   40844:	ldr	lr, [lr, #4]
   40848:	movne	r6, #0
   4084c:	moveq	r6, #1
   40850:	cmp	lr, r2
   40854:	orrne	r6, r6, #1
   40858:	cmp	r6, #0
   4085c:	bne	408fc <__assert_fail@plt+0x2e308>
   40860:	ldr	r9, [r0, #84]	; 0x54
   40864:	mov	r7, r1
   40868:	mov	r8, r0
   4086c:	str	r3, [sp, #12]
   40870:	add	r3, ip, #24
   40874:	str	r2, [sp, #4]
   40878:	str	r3, [sp, #8]
   4087c:	add	r5, r5, r3
   40880:	ldr	ip, [r7, #4]
   40884:	cmp	ip, #0
   40888:	ble	408ec <__assert_fail@plt+0x2e2f8>
   4088c:	sub	ip, ip, #1
   40890:	ldr	r0, [r5, #-24]	; 0xffffffe8
   40894:	ldr	r1, [r7, #8]
   40898:	mov	r4, ip
   4089c:	mov	lr, r6
   408a0:	cmp	lr, r4
   408a4:	bcs	408e0 <__assert_fail@plt+0x2e2ec>
   408a8:	add	r2, lr, r4
   408ac:	lsr	r2, r2, #1
   408b0:	ldr	r3, [r1, r2, lsl #2]
   408b4:	cmp	r0, r3
   408b8:	ble	408d0 <__assert_fail@plt+0x2e2dc>
   408bc:	b	4090c <__assert_fail@plt+0x2e318>
   408c0:	ldr	r4, [r1, r3, lsl #2]
   408c4:	cmp	r0, r4
   408c8:	bgt	40914 <__assert_fail@plt+0x2e320>
   408cc:	mov	r2, r3
   408d0:	add	r3, lr, r2
   408d4:	cmp	lr, r2
   408d8:	lsr	r3, r3, #1
   408dc:	bcc	408c0 <__assert_fail@plt+0x2e2cc>
   408e0:	ldr	r3, [r1, lr, lsl #2]
   408e4:	cmp	r0, r3
   408e8:	beq	40920 <__assert_fail@plt+0x2e32c>
   408ec:	add	r5, r5, #24
   408f0:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   408f4:	cmp	r3, #0
   408f8:	bne	40880 <__assert_fail@plt+0x2e28c>
   408fc:	mov	sl, #0
   40900:	mov	r0, sl
   40904:	add	sp, sp, #36	; 0x24
   40908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4090c:	mov	r3, r2
   40910:	mov	r2, r4
   40914:	add	lr, r3, #1
   40918:	mov	r4, r2
   4091c:	b	408a0 <__assert_fail@plt+0x2e2ac>
   40920:	ldr	r2, [sp, #4]
   40924:	ldr	sl, [r5, #-12]
   40928:	ldr	r3, [r5, #-16]
   4092c:	add	sl, r2, sl
   40930:	sub	sl, sl, r3
   40934:	cmp	r2, sl
   40938:	beq	40a68 <__assert_fail@plt+0x2e474>
   4093c:	ldr	r2, [r8, #100]	; 0x64
   40940:	ldr	r3, [r9, #12]
   40944:	ldr	fp, [r2, sl, lsl #2]
   40948:	ldr	r4, [r3, r0, lsl #2]
   4094c:	cmp	fp, #0
   40950:	beq	40b9c <__assert_fail@plt+0x2e5a8>
   40954:	ldr	ip, [fp, #8]
   40958:	cmp	ip, #0
   4095c:	ble	40b74 <__assert_fail@plt+0x2e580>
   40960:	ldr	lr, [fp, #12]
   40964:	sub	r0, ip, #1
   40968:	mov	r1, r6
   4096c:	cmp	r1, r0
   40970:	bcs	409ac <__assert_fail@plt+0x2e3b8>
   40974:	add	r2, r1, r0
   40978:	lsr	r2, r2, #1
   4097c:	ldr	r3, [lr, r2, lsl #2]
   40980:	cmp	r4, r3
   40984:	ble	4099c <__assert_fail@plt+0x2e3a8>
   40988:	b	40a54 <__assert_fail@plt+0x2e460>
   4098c:	ldr	r0, [lr, r3, lsl #2]
   40990:	cmp	r4, r0
   40994:	bgt	40a5c <__assert_fail@plt+0x2e468>
   40998:	mov	r2, r3
   4099c:	add	r3, r2, r1
   409a0:	cmp	r2, r1
   409a4:	lsr	r3, r3, #1
   409a8:	bhi	4098c <__assert_fail@plt+0x2e398>
   409ac:	ldr	r3, [lr, r1, lsl #2]
   409b0:	cmp	r4, r3
   409b4:	beq	408ec <__assert_fail@plt+0x2e2f8>
   409b8:	lsl	r0, ip, #2
   409bc:	str	ip, [sp, #24]
   409c0:	str	ip, [sp, #20]
   409c4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   409c8:	cmp	r0, #0
   409cc:	mov	r3, r0
   409d0:	str	r0, [sp, #28]
   409d4:	beq	40c14 <__assert_fail@plt+0x2e620>
   409d8:	ldr	r2, [fp, #8]
   409dc:	ldr	r1, [fp, #12]
   409e0:	lsl	r2, r2, #2
   409e4:	bl	12024 <memcpy@plt>
   409e8:	mov	r3, r6
   409ec:	mov	r1, r4
   409f0:	add	r0, sp, #20
   409f4:	str	r3, [sp, #16]
   409f8:	bl	3b700 <__assert_fail@plt+0x2910c>
   409fc:	ldr	r2, [sp, #16]
   40a00:	eor	r3, r0, #1
   40a04:	cmp	r2, #0
   40a08:	orrne	r3, r3, #1
   40a0c:	tst	r3, #255	; 0xff
   40a10:	bne	40bc8 <__assert_fail@plt+0x2e5d4>
   40a14:	add	r2, sp, #20
   40a18:	mov	r1, r9
   40a1c:	add	r0, sp, #16
   40a20:	ldr	r4, [r8, #100]	; 0x64
   40a24:	bl	404e4 <__assert_fail@plt+0x2def0>
   40a28:	str	r0, [r4, sl, lsl #2]
   40a2c:	ldr	r0, [sp, #28]
   40a30:	bl	376d0 <__assert_fail@plt+0x250dc>
   40a34:	ldr	r3, [r8, #100]	; 0x64
   40a38:	ldr	r3, [r3, sl, lsl #2]
   40a3c:	cmp	r3, #0
   40a40:	bne	408ec <__assert_fail@plt+0x2e2f8>
   40a44:	ldr	sl, [sp, #16]
   40a48:	cmp	sl, #0
   40a4c:	beq	408ec <__assert_fail@plt+0x2e2f8>
   40a50:	b	40900 <__assert_fail@plt+0x2e30c>
   40a54:	mov	r3, r2
   40a58:	mov	r2, r0
   40a5c:	add	r1, r3, #1
   40a60:	mov	r0, r2
   40a64:	b	4096c <__assert_fail@plt+0x2e378>
   40a68:	add	r0, r0, r0, lsl #1
   40a6c:	ldr	r3, [r9, #20]
   40a70:	mov	lr, r6
   40a74:	add	r3, r3, r0, lsl #2
   40a78:	ldr	r3, [r3, #8]
   40a7c:	ldr	r4, [r3]
   40a80:	cmp	lr, ip
   40a84:	bcs	40ac0 <__assert_fail@plt+0x2e4cc>
   40a88:	add	r2, lr, ip
   40a8c:	lsr	r2, r2, #1
   40a90:	ldr	r3, [r1, r2, lsl #2]
   40a94:	cmp	r4, r3
   40a98:	ble	40ab0 <__assert_fail@plt+0x2e4bc>
   40a9c:	b	40b60 <__assert_fail@plt+0x2e56c>
   40aa0:	ldr	r0, [r1, r3, lsl #2]
   40aa4:	cmp	r4, r0
   40aa8:	bgt	40b68 <__assert_fail@plt+0x2e574>
   40aac:	mov	r2, r3
   40ab0:	add	r3, lr, r2
   40ab4:	cmp	lr, r2
   40ab8:	lsr	r3, r3, #1
   40abc:	bcc	40aa0 <__assert_fail@plt+0x2e4ac>
   40ac0:	ldr	r3, [r1, lr, lsl #2]
   40ac4:	cmp	r4, r3
   40ac8:	beq	408ec <__assert_fail@plt+0x2e2f8>
   40acc:	mov	r3, #1
   40ad0:	mov	r0, #4
   40ad4:	str	r3, [sp, #20]
   40ad8:	str	r3, [sp, #24]
   40adc:	bl	3a010 <__assert_fail@plt+0x27a1c>
   40ae0:	cmp	r0, #0
   40ae4:	str	r0, [sp, #28]
   40ae8:	movne	ip, r6
   40aec:	strne	r4, [r0]
   40af0:	beq	40c24 <__assert_fail@plt+0x2e630>
   40af4:	ldr	r3, [sp, #72]	; 0x48
   40af8:	ldr	r2, [sp, #12]
   40afc:	add	r1, sp, #20
   40b00:	mov	r0, r9
   40b04:	str	ip, [sp, #16]
   40b08:	bl	3ef74 <__assert_fail@plt+0x2c980>
   40b0c:	ldr	sl, [sp, #24]
   40b10:	cmp	sl, #0
   40b14:	mov	r4, r0
   40b18:	beq	40b3c <__assert_fail@plt+0x2e548>
   40b1c:	ldm	r7, {r2, r3}
   40b20:	add	r3, r3, sl, lsl #1
   40b24:	cmp	r2, r3
   40b28:	blt	40bec <__assert_fail@plt+0x2e5f8>
   40b2c:	add	r1, sp, #20
   40b30:	mov	r0, r7
   40b34:	bl	3bb38 <__assert_fail@plt+0x29544>
   40b38:	mov	sl, r0
   40b3c:	ldr	r0, [sp, #28]
   40b40:	bl	376d0 <__assert_fail@plt+0x250dc>
   40b44:	ldr	r3, [sp, #16]
   40b48:	orr	r2, r4, r3
   40b4c:	orrs	r2, r2, sl
   40b50:	bne	40c34 <__assert_fail@plt+0x2e640>
   40b54:	ldr	r5, [r8, #116]	; 0x74
   40b58:	ldr	r3, [sp, #8]
   40b5c:	b	4087c <__assert_fail@plt+0x2e288>
   40b60:	mov	r3, r2
   40b64:	mov	r2, ip
   40b68:	add	lr, r3, #1
   40b6c:	mov	ip, r2
   40b70:	b	40a80 <__assert_fail@plt+0x2e48c>
   40b74:	str	r6, [sp, #20]
   40b78:	str	r6, [sp, #24]
   40b7c:	str	r6, [sp, #28]
   40b80:	mov	r3, #0
   40b84:	b	409ec <__assert_fail@plt+0x2e3f8>
   40b88:	mov	r8, lr
   40b8c:	mov	lr, r4
   40b90:	add	r6, r8, #1
   40b94:	mov	r4, lr
   40b98:	b	407c8 <__assert_fail@plt+0x2e1d4>
   40b9c:	mov	r3, #1
   40ba0:	mov	r0, #4
   40ba4:	str	r3, [sp, #20]
   40ba8:	str	r3, [sp, #24]
   40bac:	bl	3a010 <__assert_fail@plt+0x27a1c>
   40bb0:	cmp	r0, #0
   40bb4:	str	r0, [sp, #28]
   40bb8:	beq	40bdc <__assert_fail@plt+0x2e5e8>
   40bbc:	str	r4, [r0]
   40bc0:	str	fp, [sp, #16]
   40bc4:	b	40a14 <__assert_fail@plt+0x2e420>
   40bc8:	ldr	r0, [sp, #28]
   40bcc:	bl	376d0 <__assert_fail@plt+0x250dc>
   40bd0:	ldr	sl, [sp, #16]
   40bd4:	cmp	sl, #0
   40bd8:	bne	40900 <__assert_fail@plt+0x2e30c>
   40bdc:	mov	sl, #12
   40be0:	mov	r0, sl
   40be4:	add	sp, sp, #36	; 0x24
   40be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40bec:	add	sl, sl, r2
   40bf0:	ldr	r0, [r7, #8]
   40bf4:	lsl	r1, sl, #3
   40bf8:	bl	3aacc <__assert_fail@plt+0x284d8>
   40bfc:	lsl	sl, sl, #1
   40c00:	cmp	r0, #0
   40c04:	beq	40c4c <__assert_fail@plt+0x2e658>
   40c08:	str	r0, [r7, #8]
   40c0c:	str	sl, [r7]
   40c10:	b	40b2c <__assert_fail@plt+0x2e538>
   40c14:	str	r3, [sp, #24]
   40c18:	str	r3, [sp, #20]
   40c1c:	mov	r3, #12
   40c20:	b	409ec <__assert_fail@plt+0x2e3f8>
   40c24:	str	r0, [sp, #24]
   40c28:	str	r0, [sp, #20]
   40c2c:	mov	ip, #12
   40c30:	b	40af4 <__assert_fail@plt+0x2e500>
   40c34:	cmp	r3, #0
   40c38:	movne	sl, r3
   40c3c:	bne	40900 <__assert_fail@plt+0x2e30c>
   40c40:	cmp	r4, #0
   40c44:	movne	sl, r4
   40c48:	b	40900 <__assert_fail@plt+0x2e30c>
   40c4c:	mov	sl, #12
   40c50:	b	40b3c <__assert_fail@plt+0x2e548>
   40c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40c58:	sub	sp, sp, #20
   40c5c:	ldrb	ip, [r1, #28]
   40c60:	ldr	sl, [r2, #4]
   40c64:	ldr	r4, [r1]
   40c68:	adds	r3, sl, #0
   40c6c:	movne	r3, #1
   40c70:	ands	r3, r3, ip, lsr #4
   40c74:	beq	40c94 <__assert_fail@plt+0x2e6a0>
   40c78:	ldr	r3, [r2, #20]
   40c7c:	cmp	r3, #31
   40c80:	bgt	40e94 <__assert_fail@plt+0x2e8a0>
   40c84:	ldr	r1, [r4, #80]	; 0x50
   40c88:	lsr	r3, r1, r3
   40c8c:	tst	r3, #1
   40c90:	beq	40e94 <__assert_fail@plt+0x2e8a0>
   40c94:	add	r5, sp, #8
   40c98:	mov	r9, #0
   40c9c:	mov	r7, r2
   40ca0:	str	r9, [r5, #4]
   40ca4:	str	r9, [sp, #8]
   40ca8:	ldr	r2, [r4, #64]	; 0x40
   40cac:	mov	r8, r0
   40cb0:	cmp	r2, #31
   40cb4:	beq	40eb8 <__assert_fail@plt+0x2e8c4>
   40cb8:	lsl	r3, r2, #5
   40cbc:	ldr	r6, [r4, #56]	; 0x38
   40cc0:	add	r1, r2, #1
   40cc4:	add	lr, r3, #4
   40cc8:	add	r3, r6, r3
   40ccc:	mov	r2, #0
   40cd0:	mov	r0, #8
   40cd4:	str	r1, [r4, #64]	; 0x40
   40cd8:	str	r2, [r3, #4]
   40cdc:	str	r2, [r3, #8]
   40ce0:	str	r2, [r3, #12]
   40ce4:	strb	r0, [sp, #12]
   40ce8:	ldm	r5, {r0, r1}
   40cec:	add	ip, r3, #24
   40cf0:	add	r6, r6, lr
   40cf4:	stm	ip, {r0, r1}
   40cf8:	ldrb	r1, [r3, #30]
   40cfc:	mvn	r0, #0
   40d00:	str	r2, [r3, #16]
   40d04:	and	r1, r1, #243	; 0xf3
   40d08:	str	r2, [r3, #20]
   40d0c:	strb	r1, [r3, #30]
   40d10:	str	r0, [r3, #32]
   40d14:	mov	fp, #0
   40d18:	str	fp, [sp, #8]
   40d1c:	str	fp, [r5, #4]
   40d20:	ldr	r3, [r4, #64]	; 0x40
   40d24:	cmp	r3, #31
   40d28:	beq	40ee4 <__assert_fail@plt+0x2e8f0>
   40d2c:	lsl	ip, r3, #5
   40d30:	ldr	r9, [r4, #56]	; 0x38
   40d34:	add	r2, r3, #1
   40d38:	add	lr, ip, #4
   40d3c:	add	ip, r9, ip
   40d40:	mov	r3, #0
   40d44:	mov	r1, #9
   40d48:	str	r2, [r4, #64]	; 0x40
   40d4c:	str	r3, [ip, #4]
   40d50:	str	r3, [ip, #8]
   40d54:	str	r3, [ip, #12]
   40d58:	strb	r1, [sp, #12]
   40d5c:	ldm	r5, {r0, r1}
   40d60:	add	r2, ip, #24
   40d64:	add	r9, r9, lr
   40d68:	stm	r2, {r0, r1}
   40d6c:	ldrb	r2, [ip, #30]
   40d70:	mvn	r1, #0
   40d74:	str	r3, [ip, #16]
   40d78:	and	r2, r2, #243	; 0xf3
   40d7c:	str	r3, [ip, #20]
   40d80:	strb	r2, [ip, #30]
   40d84:	str	r1, [ip, #32]
   40d88:	cmp	sl, #0
   40d8c:	moveq	fp, r9
   40d90:	beq	40dc4 <__assert_fail@plt+0x2e7d0>
   40d94:	mov	r0, #0
   40d98:	str	r5, [sp]
   40d9c:	mov	ip, #16
   40da0:	str	r0, [r5, #4]
   40da4:	str	r0, [sp, #8]
   40da8:	mov	r2, sl
   40dac:	mov	r3, r9
   40db0:	add	r1, r4, #64	; 0x40
   40db4:	add	r0, r4, #56	; 0x38
   40db8:	strb	ip, [sp, #12]
   40dbc:	bl	3b8ac <__assert_fail@plt+0x292b8>
   40dc0:	mov	fp, r0
   40dc4:	mov	sl, #0
   40dc8:	str	sl, [sp, #8]
   40dcc:	str	sl, [r5, #4]
   40dd0:	ldr	r2, [r4, #64]	; 0x40
   40dd4:	cmp	r2, #31
   40dd8:	beq	40f10 <__assert_fail@plt+0x2e91c>
   40ddc:	lsl	r3, r2, #5
   40de0:	ldr	lr, [r4, #56]	; 0x38
   40de4:	add	r2, r2, #1
   40de8:	add	sl, r3, #4
   40dec:	add	r3, lr, r3
   40df0:	str	r2, [r4, #64]	; 0x40
   40df4:	mov	ip, #0
   40df8:	mov	r2, #16
   40dfc:	str	r6, [r3, #8]
   40e00:	str	fp, [r3, #12]
   40e04:	str	ip, [r3, #4]
   40e08:	strb	r2, [sp, #12]
   40e0c:	ldm	r5, {r0, r1}
   40e10:	add	r2, r3, #24
   40e14:	cmp	r6, ip
   40e18:	stm	r2, {r0, r1}
   40e1c:	ldrb	r2, [r3, #30]
   40e20:	mvn	r1, #0
   40e24:	add	sl, lr, sl
   40e28:	and	r2, r2, #243	; 0xf3
   40e2c:	str	ip, [r3, #16]
   40e30:	str	ip, [r3, #20]
   40e34:	strb	r2, [r3, #30]
   40e38:	str	r1, [r3, #32]
   40e3c:	strne	sl, [r6]
   40e40:	cmp	fp, #0
   40e44:	beq	40ea0 <__assert_fail@plt+0x2e8ac>
   40e48:	cmp	sl, #0
   40e4c:	str	sl, [fp]
   40e50:	beq	40ea0 <__assert_fail@plt+0x2e8ac>
   40e54:	cmp	r9, #0
   40e58:	cmpne	r6, #0
   40e5c:	beq	40ea0 <__assert_fail@plt+0x2e8ac>
   40e60:	ldr	r3, [r7, #20]
   40e64:	str	r3, [r9, #20]
   40e68:	str	r3, [r6, #20]
   40e6c:	ldrb	r3, [r7, #26]
   40e70:	ldrb	r2, [r9, #26]
   40e74:	and	r3, r3, #8
   40e78:	bic	r2, r2, #8
   40e7c:	orr	r2, r3, r2
   40e80:	strb	r2, [r9, #26]
   40e84:	ldrb	r2, [r6, #26]
   40e88:	bic	r2, r2, #8
   40e8c:	orr	r3, r3, r2
   40e90:	strb	r3, [r6, #26]
   40e94:	mov	r0, sl
   40e98:	add	sp, sp, #20
   40e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40ea0:	mov	r3, #12
   40ea4:	mov	sl, #0
   40ea8:	mov	r0, sl
   40eac:	str	r3, [r8]
   40eb0:	add	sp, sp, #20
   40eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40eb8:	mov	r0, #996	; 0x3e4
   40ebc:	bl	3a010 <__assert_fail@plt+0x27a1c>
   40ec0:	subs	r6, r0, #0
   40ec4:	beq	40d14 <__assert_fail@plt+0x2e720>
   40ec8:	ldr	r2, [r4, #56]	; 0x38
   40ecc:	mov	r3, r9
   40ed0:	str	r2, [r6]
   40ed4:	mov	lr, #4
   40ed8:	mov	r1, #1
   40edc:	str	r6, [r4, #56]	; 0x38
   40ee0:	b	40cc8 <__assert_fail@plt+0x2e6d4>
   40ee4:	mov	r0, #996	; 0x3e4
   40ee8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   40eec:	subs	r9, r0, #0
   40ef0:	beq	40d88 <__assert_fail@plt+0x2e794>
   40ef4:	ldr	r3, [r4, #56]	; 0x38
   40ef8:	mov	ip, fp
   40efc:	str	r3, [r9]
   40f00:	mov	lr, #4
   40f04:	mov	r2, #1
   40f08:	str	r9, [r4, #56]	; 0x38
   40f0c:	b	40d3c <__assert_fail@plt+0x2e748>
   40f10:	mov	r0, #996	; 0x3e4
   40f14:	bl	3a010 <__assert_fail@plt+0x27a1c>
   40f18:	subs	lr, r0, #0
   40f1c:	beq	40ea0 <__assert_fail@plt+0x2e8ac>
   40f20:	ldr	r1, [r4, #56]	; 0x38
   40f24:	mov	r3, sl
   40f28:	str	r1, [lr]
   40f2c:	mov	sl, #4
   40f30:	mov	r2, #1
   40f34:	str	lr, [r4, #56]	; 0x38
   40f38:	b	40dec <__assert_fail@plt+0x2e7f8>
   40f3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   40f40:	subs	r7, r1, #0
   40f44:	mov	r8, r0
   40f48:	mov	r5, r2
   40f4c:	beq	41048 <__assert_fail@plt+0x2ea54>
   40f50:	ldr	r0, [r7, #4]
   40f54:	cmp	r2, #0
   40f58:	cmpne	r0, #0
   40f5c:	ble	41000 <__assert_fail@plt+0x2ea0c>
   40f60:	ldr	r3, [r2, #4]
   40f64:	cmp	r3, #0
   40f68:	ble	41008 <__assert_fail@plt+0x2ea14>
   40f6c:	add	r0, r0, r3
   40f70:	str	r0, [r8]
   40f74:	lsl	r0, r0, #2
   40f78:	bl	3a010 <__assert_fail@plt+0x27a1c>
   40f7c:	cmp	r0, #0
   40f80:	str	r0, [r8, #8]
   40f84:	beq	41104 <__assert_fail@plt+0x2eb10>
   40f88:	mov	r3, #0
   40f8c:	mov	ip, r3
   40f90:	ldr	r9, [r7, #4]
   40f94:	ldr	sl, [r5, #4]
   40f98:	mov	r4, r0
   40f9c:	mov	lr, #1
   40fa0:	b	40fe0 <__assert_fail@plt+0x2e9ec>
   40fa4:	cmp	r3, sl
   40fa8:	bge	410b0 <__assert_fail@plt+0x2eabc>
   40fac:	ldr	r2, [r7, #8]
   40fb0:	ldr	r1, [r5, #8]
   40fb4:	ldr	r2, [r2, ip, lsl #2]
   40fb8:	ldr	r6, [r1, r3, lsl #2]
   40fbc:	cmp	r2, r6
   40fc0:	addgt	r3, r3, #1
   40fc4:	strgt	r6, [r4]
   40fc8:	bgt	40fd8 <__assert_fail@plt+0x2e9e4>
   40fcc:	add	ip, ip, #1
   40fd0:	addeq	r3, r3, #1
   40fd4:	str	r2, [r4]
   40fd8:	add	lr, lr, #1
   40fdc:	add	r4, r4, #4
   40fe0:	cmp	ip, r9
   40fe4:	sub	r6, lr, #1
   40fe8:	blt	40fa4 <__assert_fail@plt+0x2e9b0>
   40fec:	cmp	r3, sl
   40ff0:	blt	410d0 <__assert_fail@plt+0x2eadc>
   40ff4:	str	r6, [r8, #4]
   40ff8:	mov	r0, #0
   40ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41000:	cmp	r0, #0
   41004:	ble	41048 <__assert_fail@plt+0x2ea54>
   41008:	str	r0, [r8, #4]
   4100c:	ldr	r3, [r7, #4]
   41010:	cmp	r3, #0
   41014:	ble	4106c <__assert_fail@plt+0x2ea78>
   41018:	str	r0, [r8]
   4101c:	lsl	r0, r0, #2
   41020:	bl	3a010 <__assert_fail@plt+0x27a1c>
   41024:	cmp	r0, #0
   41028:	str	r0, [r8, #8]
   4102c:	beq	410f0 <__assert_fail@plt+0x2eafc>
   41030:	ldr	r2, [r7, #4]
   41034:	ldr	r1, [r7, #8]
   41038:	lsl	r2, r2, #2
   4103c:	bl	12024 <memcpy@plt>
   41040:	mov	r0, #0
   41044:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41048:	cmp	r5, #0
   4104c:	beq	4106c <__assert_fail@plt+0x2ea78>
   41050:	ldr	r0, [r5, #4]
   41054:	cmp	r0, #0
   41058:	ble	4106c <__assert_fail@plt+0x2ea78>
   4105c:	str	r0, [r8, #4]
   41060:	ldr	r3, [r5, #4]
   41064:	cmp	r3, #0
   41068:	bgt	41080 <__assert_fail@plt+0x2ea8c>
   4106c:	mov	r0, #0
   41070:	str	r0, [r8]
   41074:	str	r0, [r8, #4]
   41078:	str	r0, [r8, #8]
   4107c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41080:	str	r0, [r8]
   41084:	lsl	r0, r0, #2
   41088:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4108c:	cmp	r0, #0
   41090:	str	r0, [r8, #8]
   41094:	beq	410f0 <__assert_fail@plt+0x2eafc>
   41098:	ldr	r2, [r5, #4]
   4109c:	ldr	r1, [r5, #8]
   410a0:	lsl	r2, r2, #2
   410a4:	bl	12024 <memcpy@plt>
   410a8:	mov	r0, #0
   410ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   410b0:	sub	r9, r9, ip
   410b4:	ldr	r1, [r7, #8]
   410b8:	add	r0, r0, r6, lsl #2
   410bc:	add	r1, r1, ip, lsl #2
   410c0:	lsl	r2, r9, #2
   410c4:	add	r6, r6, r9
   410c8:	bl	12024 <memcpy@plt>
   410cc:	b	40ff4 <__assert_fail@plt+0x2ea00>
   410d0:	sub	sl, sl, r3
   410d4:	ldr	r1, [r5, #8]
   410d8:	add	r0, r0, r6, lsl #2
   410dc:	add	r1, r1, r3, lsl #2
   410e0:	lsl	r2, sl, #2
   410e4:	bl	12024 <memcpy@plt>
   410e8:	add	r6, r6, sl
   410ec:	b	40ff4 <__assert_fail@plt+0x2ea00>
   410f0:	mov	r3, #0
   410f4:	str	r3, [r8, #4]
   410f8:	str	r3, [r8]
   410fc:	mov	r0, #12
   41100:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   41104:	mov	r0, #12
   41108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4110c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41110:	mov	sl, r2
   41114:	ldr	r2, [r0, #100]	; 0x64
   41118:	sub	sp, sp, #116	; 0x74
   4111c:	mov	ip, #0
   41120:	ldr	r8, [r2, sl, lsl #2]
   41124:	mov	r5, r3
   41128:	cmp	r8, ip
   4112c:	lsl	r3, sl, #2
   41130:	str	r3, [sp, #36]	; 0x24
   41134:	str	r0, [sp, #32]
   41138:	mov	fp, r1
   4113c:	ldr	r6, [r0, #84]	; 0x54
   41140:	str	ip, [sp, #64]	; 0x40
   41144:	ldr	r3, [r5, #4]
   41148:	beq	41924 <__assert_fail@plt+0x2f330>
   4114c:	add	r2, r8, #4
   41150:	cmp	r3, ip
   41154:	str	r2, [sp, #20]
   41158:	bne	41198 <__assert_fail@plt+0x2eba4>
   4115c:	ldr	r3, [fp]
   41160:	mov	r2, #0
   41164:	str	r2, [r3, sl, lsl #2]
   41168:	ldr	r3, [sp, #20]
   4116c:	cmp	r3, #0
   41170:	beq	4118c <__assert_fail@plt+0x2eb98>
   41174:	ldr	r3, [sp, #32]
   41178:	ldr	r3, [r3, #100]	; 0x64
   4117c:	ldr	r3, [r3, sl, lsl #2]
   41180:	ldrb	r3, [r3, #52]	; 0x34
   41184:	ands	r3, r3, #64	; 0x40
   41188:	bne	41284 <__assert_fail@plt+0x2ec90>
   4118c:	mov	r0, r3
   41190:	add	sp, sp, #116	; 0x74
   41194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41198:	add	r0, sp, #112	; 0x70
   4119c:	mov	r2, r5
   411a0:	str	ip, [r0, #-28]!	; 0xffffffe4
   411a4:	mov	r1, r6
   411a8:	bl	404e4 <__assert_fail@plt+0x2def0>
   411ac:	ldr	r3, [sp, #84]	; 0x54
   411b0:	cmp	r3, #0
   411b4:	mov	r9, r0
   411b8:	bne	4118c <__assert_fail@plt+0x2eb98>
   411bc:	ldr	r7, [r0, #28]
   411c0:	cmp	r7, #0
   411c4:	addne	r3, r0, #28
   411c8:	strne	r3, [sp, #16]
   411cc:	bne	4161c <__assert_fail@plt+0x2f028>
   411d0:	ldr	r0, [r5, #4]
   411d4:	str	r7, [r9, #32]
   411d8:	str	r0, [r9, #28]
   411dc:	lsl	r0, r0, #2
   411e0:	bl	3a010 <__assert_fail@plt+0x27a1c>
   411e4:	add	r3, r9, #28
   411e8:	str	r3, [sp, #16]
   411ec:	cmp	r0, #0
   411f0:	str	r0, [r9, #36]	; 0x24
   411f4:	beq	41798 <__assert_fail@plt+0x2f1a4>
   411f8:	ldr	r2, [r5, #4]
   411fc:	str	r7, [sp, #84]	; 0x54
   41200:	cmp	r2, #0
   41204:	movgt	r4, r3
   41208:	strgt	r8, [sp, #24]
   4120c:	strgt	sl, [sp, #28]
   41210:	bgt	41254 <__assert_fail@plt+0x2ec60>
   41214:	b	4161c <__assert_fail@plt+0x2f028>
   41218:	ldr	r2, [r9, #32]
   4121c:	ldr	r0, [r9, #28]
   41220:	add	r2, r2, r1, lsl #1
   41224:	cmp	r0, r2
   41228:	blt	418fc <__assert_fail@plt+0x2f308>
   4122c:	mov	r1, r8
   41230:	mov	r0, r4
   41234:	bl	3bb38 <__assert_fail@plt+0x29544>
   41238:	cmp	r0, #0
   4123c:	str	r0, [sp, #84]	; 0x54
   41240:	bne	41798 <__assert_fail@plt+0x2f1a4>
   41244:	ldr	r2, [r5, #4]
   41248:	add	r7, r7, #1
   4124c:	cmp	r7, r2
   41250:	bge	41614 <__assert_fail@plt+0x2f020>
   41254:	ldr	r3, [r5, #8]
   41258:	ldr	r1, [r6, #28]
   4125c:	ldr	r3, [r3, r7, lsl #2]
   41260:	add	r3, r3, r3, lsl #1
   41264:	adds	r8, r1, r3, lsl #2
   41268:	beq	41278 <__assert_fail@plt+0x2ec84>
   4126c:	ldr	r1, [r8, #4]
   41270:	cmp	r1, #0
   41274:	bne	41218 <__assert_fail@plt+0x2ec24>
   41278:	mov	r3, #0
   4127c:	str	r3, [sp, #84]	; 0x54
   41280:	b	41248 <__assert_fail@plt+0x2ec54>
   41284:	ldr	r4, [sp, #32]
   41288:	mov	r3, #0
   4128c:	mov	r0, r3
   41290:	ldr	ip, [r4, #108]	; 0x6c
   41294:	mov	r3, ip
   41298:	cmp	r0, r3
   4129c:	bge	412f8 <__assert_fail@plt+0x2ed04>
   412a0:	add	r2, r0, r3
   412a4:	ldr	lr, [r4, #116]	; 0x74
   412a8:	add	r2, r2, r2, lsr #31
   412ac:	asr	r2, r2, #1
   412b0:	add	r1, r2, r2, lsl #1
   412b4:	add	r1, lr, r1, lsl #3
   412b8:	ldr	r1, [r1, #4]
   412bc:	cmp	sl, r1
   412c0:	ble	412e8 <__assert_fail@plt+0x2ecf4>
   412c4:	b	41600 <__assert_fail@plt+0x2f00c>
   412c8:	asr	r3, r3, #1
   412cc:	mov	r5, r3
   412d0:	add	r1, r3, r3, lsl #1
   412d4:	add	r1, lr, r1, lsl #3
   412d8:	ldr	r1, [r1, #4]
   412dc:	cmp	sl, r1
   412e0:	bgt	41608 <__assert_fail@plt+0x2f014>
   412e4:	mov	r2, r3
   412e8:	add	r3, r2, r0
   412ec:	cmp	r2, r0
   412f0:	add	r3, r3, r3, lsr #31
   412f4:	bgt	412c8 <__assert_fail@plt+0x2ecd4>
   412f8:	cmp	ip, r0
   412fc:	str	r0, [sp, #40]	; 0x28
   41300:	ble	415f0 <__assert_fail@plt+0x2effc>
   41304:	ldr	r3, [sp, #32]
   41308:	add	r2, r0, r0, lsl #1
   4130c:	ldr	r3, [r3, #116]	; 0x74
   41310:	lsl	r2, r2, #3
   41314:	add	r3, r3, r2
   41318:	str	r2, [sp, #56]	; 0x38
   4131c:	ldr	r3, [r3, #4]
   41320:	cmp	sl, r3
   41324:	bne	415f0 <__assert_fail@plt+0x2effc>
   41328:	ldr	r3, [sp, #40]	; 0x28
   4132c:	cmn	r3, #1
   41330:	beq	415f0 <__assert_fail@plt+0x2effc>
   41334:	ldr	r3, [sp, #20]
   41338:	ldr	r2, [sp, #32]
   4133c:	ldr	r0, [r3, #4]
   41340:	mov	r3, #0
   41344:	cmp	r0, r3
   41348:	str	r3, [sp, #84]	; 0x54
   4134c:	ldr	r8, [r2, #84]	; 0x54
   41350:	ble	415f0 <__assert_fail@plt+0x2effc>
   41354:	str	r3, [sp, #16]
   41358:	add	r3, fp, #24
   4135c:	str	r3, [sp, #44]	; 0x2c
   41360:	add	r3, fp, #20
   41364:	str	r3, [sp, #48]	; 0x30
   41368:	b	41388 <__assert_fail@plt+0x2ed94>
   4136c:	cmp	r3, #4
   41370:	beq	413c4 <__assert_fail@plt+0x2edd0>
   41374:	ldr	r3, [sp, #16]
   41378:	add	r3, r3, #1
   4137c:	cmp	r3, r0
   41380:	str	r3, [sp, #16]
   41384:	bge	415e0 <__assert_fail@plt+0x2efec>
   41388:	ldr	r3, [sp, #20]
   4138c:	ldr	ip, [sp, #16]
   41390:	ldr	r2, [fp, #8]
   41394:	ldr	r1, [r3, #8]
   41398:	ldr	r3, [r8]
   4139c:	ldr	r6, [r1, ip, lsl #2]
   413a0:	cmp	r6, r2
   413a4:	add	r3, r3, r6, lsl #3
   413a8:	ldrb	r3, [r3, #4]
   413ac:	bne	4136c <__assert_fail@plt+0x2ed78>
   413b0:	ldr	r2, [fp, #12]
   413b4:	cmp	sl, r2
   413b8:	beq	41374 <__assert_fail@plt+0x2ed80>
   413bc:	cmp	r3, #4
   413c0:	bne	41374 <__assert_fail@plt+0x2ed80>
   413c4:	ldr	r3, [sp, #32]
   413c8:	ldr	r2, [sp, #56]	; 0x38
   413cc:	ldr	r4, [sp, #40]	; 0x28
   413d0:	ldr	r7, [r3, #116]	; 0x74
   413d4:	add	r3, r6, r6, lsl #1
   413d8:	add	r7, r7, r2
   413dc:	lsl	r3, r3, #2
   413e0:	str	r3, [sp, #28]
   413e4:	lsl	r3, r6, #2
   413e8:	str	r3, [sp, #24]
   413ec:	mov	r5, r2
   413f0:	b	4140c <__assert_fail@plt+0x2ee18>
   413f4:	ldrb	r3, [r7, #20]
   413f8:	add	r4, r4, #1
   413fc:	add	r5, r5, #24
   41400:	cmp	r3, #0
   41404:	add	r7, r7, #24
   41408:	beq	417bc <__assert_fail@plt+0x2f1c8>
   4140c:	ldr	r3, [r7]
   41410:	cmp	r6, r3
   41414:	bne	413f4 <__assert_fail@plt+0x2ee00>
   41418:	ldr	r3, [r7, #8]
   4141c:	ldr	r9, [r7, #12]
   41420:	sub	r9, r9, r3
   41424:	cmp	r9, #0
   41428:	add	r9, sl, r9
   4142c:	ldreq	r3, [r8, #20]
   41430:	ldreq	r2, [sp, #28]
   41434:	ldrne	r3, [r8, #12]
   41438:	addeq	r3, r3, r2
   4143c:	ldrne	r2, [sp, #24]
   41440:	ldreq	r3, [r3, #8]
   41444:	ldrne	ip, [r3, r2]
   41448:	ldreq	ip, [r3]
   4144c:	ldr	r3, [fp, #12]
   41450:	cmp	r9, r3
   41454:	bgt	413f4 <__assert_fail@plt+0x2ee00>
   41458:	ldr	r3, [fp]
   4145c:	ldr	r3, [r3, r9, lsl #2]
   41460:	cmp	r3, #0
   41464:	beq	413f4 <__assert_fail@plt+0x2ee00>
   41468:	ldr	r0, [r3, #8]
   4146c:	cmp	r0, #0
   41470:	ble	413f4 <__assert_fail@plt+0x2ee00>
   41474:	ldr	lr, [r3, #12]
   41478:	sub	r0, r0, #1
   4147c:	mov	r1, #0
   41480:	cmp	r1, r0
   41484:	bcs	414c0 <__assert_fail@plt+0x2eecc>
   41488:	add	r2, r1, r0
   4148c:	lsr	r2, r2, #1
   41490:	ldr	r3, [lr, r2, lsl #2]
   41494:	cmp	r3, ip
   41498:	bge	414b0 <__assert_fail@plt+0x2eebc>
   4149c:	b	417a8 <__assert_fail@plt+0x2f1b4>
   414a0:	ldr	r0, [lr, r3, lsl #2]
   414a4:	cmp	ip, r0
   414a8:	bgt	417b0 <__assert_fail@plt+0x2f1bc>
   414ac:	mov	r2, r3
   414b0:	add	r3, r1, r2
   414b4:	cmp	r1, r2
   414b8:	lsr	r3, r3, #1
   414bc:	bcc	414a0 <__assert_fail@plt+0x2eeac>
   414c0:	ldr	r3, [lr, r1, lsl #2]
   414c4:	cmp	ip, r3
   414c8:	bne	413f4 <__assert_fail@plt+0x2ee00>
   414cc:	str	r9, [sp, #8]
   414d0:	stm	sp, {sl, ip}
   414d4:	mov	r3, r6
   414d8:	ldr	r2, [sp, #44]	; 0x2c
   414dc:	ldr	r1, [sp, #48]	; 0x30
   414e0:	ldr	r0, [sp, #32]
   414e4:	bl	3fb04 <__assert_fail@plt+0x2d510>
   414e8:	cmp	r0, #0
   414ec:	bne	413f4 <__assert_fail@plt+0x2ee00>
   414f0:	ldr	r3, [sp, #84]	; 0x54
   414f4:	cmp	r3, #0
   414f8:	beq	418a4 <__assert_fail@plt+0x2f2b0>
   414fc:	mov	r1, r4
   41500:	add	r0, sp, #100	; 0x64
   41504:	str	r6, [sp, #92]	; 0x5c
   41508:	str	sl, [sp, #96]	; 0x60
   4150c:	bl	3b700 <__assert_fail@plt+0x2910c>
   41510:	cmp	r0, #0
   41514:	beq	41b64 <__assert_fail@plt+0x2f570>
   41518:	ldr	r3, [sp, #84]	; 0x54
   4151c:	ldr	r2, [sp, #36]	; 0x24
   41520:	add	r1, sp, #84	; 0x54
   41524:	ldr	r0, [sp, #32]
   41528:	ldr	r3, [r3, r2]
   4152c:	str	r3, [sp, #52]	; 0x34
   41530:	bl	41bac <__assert_fail@plt+0x2f5b8>
   41534:	subs	ip, r0, #0
   41538:	bne	418d0 <__assert_fail@plt+0x2f2dc>
   4153c:	ldr	r7, [fp, #4]
   41540:	cmp	r7, #0
   41544:	beq	417c8 <__assert_fail@plt+0x2f1d4>
   41548:	cmp	sl, #0
   4154c:	ldr	r9, [sp, #84]	; 0x54
   41550:	blt	417cc <__assert_fail@plt+0x2f1d8>
   41554:	str	r4, [sp, #60]	; 0x3c
   41558:	mov	r4, ip
   4155c:	b	415c0 <__assert_fail@plt+0x2efcc>
   41560:	ldr	ip, [r9]
   41564:	cmp	ip, #0
   41568:	add	r2, ip, #4
   4156c:	beq	415ac <__assert_fail@plt+0x2efb8>
   41570:	bl	40f3c <__assert_fail@plt+0x2e948>
   41574:	add	r2, sp, #72	; 0x48
   41578:	mov	r1, r8
   4157c:	mov	ip, r0
   41580:	cmp	ip, #0
   41584:	add	r0, sp, #68	; 0x44
   41588:	str	ip, [sp, #68]	; 0x44
   4158c:	bne	418d0 <__assert_fail@plt+0x2f2dc>
   41590:	bl	404e4 <__assert_fail@plt+0x2def0>
   41594:	str	r0, [r7]
   41598:	ldr	r0, [sp, #80]	; 0x50
   4159c:	bl	376d0 <__assert_fail@plt+0x250dc>
   415a0:	ldr	ip, [sp, #68]	; 0x44
   415a4:	cmp	ip, #0
   415a8:	bne	418d0 <__assert_fail@plt+0x2f2dc>
   415ac:	add	r4, r4, #1
   415b0:	cmp	sl, r4
   415b4:	add	r7, r7, #4
   415b8:	add	r9, r9, #4
   415bc:	blt	41b6c <__assert_fail@plt+0x2f578>
   415c0:	ldr	r2, [r7]
   415c4:	add	r0, sp, #72	; 0x48
   415c8:	cmp	r2, #0
   415cc:	add	r1, r2, #4
   415d0:	bne	41560 <__assert_fail@plt+0x2ef6c>
   415d4:	ldr	r2, [r9]
   415d8:	str	r2, [r7]
   415dc:	b	415ac <__assert_fail@plt+0x2efb8>
   415e0:	ldr	r3, [sp, #84]	; 0x54
   415e4:	cmp	r3, #0
   415e8:	movne	r3, #0
   415ec:	bne	418e0 <__assert_fail@plt+0x2f2ec>
   415f0:	mov	r3, #0
   415f4:	mov	r0, r3
   415f8:	add	sp, sp, #116	; 0x74
   415fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41600:	mov	r5, r2
   41604:	mov	r2, r3
   41608:	add	r0, r5, #1
   4160c:	mov	r3, r2
   41610:	b	41298 <__assert_fail@plt+0x2eca4>
   41614:	ldr	r8, [sp, #24]
   41618:	ldr	sl, [sp, #28]
   4161c:	ldr	r3, [r8, #8]
   41620:	cmp	r3, #0
   41624:	beq	416a0 <__assert_fail@plt+0x2f0ac>
   41628:	ldr	r4, [r9, #32]
   4162c:	cmp	r4, #0
   41630:	beq	416a0 <__assert_fail@plt+0x2f0ac>
   41634:	ldr	r2, [r5, #4]
   41638:	add	r3, r3, r4
   4163c:	ldr	r4, [r5]
   41640:	add	r2, r3, r2
   41644:	cmp	r2, r4
   41648:	bgt	41b88 <__assert_fail@plt+0x2f594>
   4164c:	ldr	r2, [sp, #16]
   41650:	ldr	r1, [sp, #20]
   41654:	mov	r0, r5
   41658:	bl	3b9e8 <__assert_fail@plt+0x293f4>
   4165c:	cmp	r0, #0
   41660:	mov	r3, r0
   41664:	str	r0, [sp, #64]	; 0x40
   41668:	bne	4118c <__assert_fail@plt+0x2eb98>
   4166c:	ldr	r1, [fp, #20]
   41670:	cmp	r1, #0
   41674:	bne	416b4 <__assert_fail@plt+0x2f0c0>
   41678:	mov	r2, r5
   4167c:	mov	r1, r6
   41680:	add	r0, sp, #64	; 0x40
   41684:	ldr	r4, [fp]
   41688:	bl	404e4 <__assert_fail@plt+0x2def0>
   4168c:	ldr	r3, [sp, #64]	; 0x40
   41690:	cmp	r3, #0
   41694:	str	r0, [r4, sl, lsl #2]
   41698:	beq	41168 <__assert_fail@plt+0x2eb74>
   4169c:	b	4118c <__assert_fail@plt+0x2eb98>
   416a0:	ldr	r1, [fp, #20]
   416a4:	mov	r3, #0
   416a8:	cmp	r1, #0
   416ac:	str	r3, [sp, #64]	; 0x40
   416b0:	beq	41678 <__assert_fail@plt+0x2f084>
   416b4:	ldr	r3, [sp, #32]
   416b8:	ldr	r3, [r3, #116]	; 0x74
   416bc:	str	r3, [sp, #16]
   416c0:	ble	4178c <__assert_fail@plt+0x2f198>
   416c4:	mov	r9, #0
   416c8:	ldr	r3, [fp, #24]
   416cc:	ldr	ip, [sp, #16]
   416d0:	ldr	r3, [r3, r9, lsl #2]
   416d4:	add	r3, r3, r3, lsl #1
   416d8:	add	r2, ip, r3, lsl #3
   416dc:	ldr	r0, [r2, #8]
   416e0:	cmp	sl, r0
   416e4:	ble	41780 <__assert_fail@plt+0x2f18c>
   416e8:	ldr	r0, [r2, #4]
   416ec:	cmp	sl, r0
   416f0:	bgt	41780 <__assert_fail@plt+0x2f18c>
   416f4:	ldr	r0, [ip, r3, lsl #3]
   416f8:	ldr	r2, [r2, #12]
   416fc:	ldr	r3, [r6]
   41700:	cmp	sl, r2
   41704:	ldr	r7, [r3, r0, lsl #3]
   41708:	beq	41938 <__assert_fail@plt+0x2f344>
   4170c:	ldr	r0, [r5, #4]
   41710:	cmp	r0, #0
   41714:	ble	41780 <__assert_fail@plt+0x2f18c>
   41718:	mov	r4, #0
   4171c:	b	4172c <__assert_fail@plt+0x2f138>
   41720:	cmp	r4, r0
   41724:	bge	4177c <__assert_fail@plt+0x2f188>
   41728:	ldr	r3, [r6]
   4172c:	ldr	r2, [r5, #8]
   41730:	ldr	r1, [r2, r4, lsl #2]
   41734:	add	r4, r4, #1
   41738:	add	r2, r3, r1, lsl #3
   4173c:	ldrb	r2, [r2, #4]
   41740:	sub	r2, r2, #8
   41744:	cmp	r2, #1
   41748:	bhi	41720 <__assert_fail@plt+0x2f12c>
   4174c:	ldr	r3, [r3, r1, lsl #3]
   41750:	cmp	r7, r3
   41754:	bne	41720 <__assert_fail@plt+0x2f12c>
   41758:	ldr	r3, [sp, #20]
   4175c:	mov	r2, r5
   41760:	mov	r0, r6
   41764:	bl	3fddc <__assert_fail@plt+0x2d7e8>
   41768:	cmp	r0, #0
   4176c:	bne	41b44 <__assert_fail@plt+0x2f550>
   41770:	ldr	r0, [r5, #4]
   41774:	cmp	r4, r0
   41778:	blt	41728 <__assert_fail@plt+0x2f134>
   4177c:	ldr	r1, [fp, #20]
   41780:	add	r9, r9, #1
   41784:	cmp	r9, r1
   41788:	blt	416c8 <__assert_fail@plt+0x2f0d4>
   4178c:	mov	r3, #0
   41790:	str	r3, [sp, #64]	; 0x40
   41794:	b	41678 <__assert_fail@plt+0x2f084>
   41798:	mov	r3, #12
   4179c:	mov	r0, r3
   417a0:	add	sp, sp, #116	; 0x74
   417a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   417a8:	mov	r3, r2
   417ac:	mov	r2, r0
   417b0:	add	r1, r3, #1
   417b4:	mov	r0, r2
   417b8:	b	41480 <__assert_fail@plt+0x2ee8c>
   417bc:	ldr	r3, [sp, #20]
   417c0:	ldr	r0, [r3, #4]
   417c4:	b	41374 <__assert_fail@plt+0x2ed80>
   417c8:	ldr	r9, [sp, #84]	; 0x54
   417cc:	ldr	lr, [sp, #104]	; 0x68
   417d0:	ldr	r3, [sp, #36]	; 0x24
   417d4:	ldr	r2, [sp, #52]	; 0x34
   417d8:	cmp	lr, #0
   417dc:	str	r2, [r9, r3]
   417e0:	ble	41844 <__assert_fail@plt+0x2f250>
   417e4:	sub	r7, lr, #1
   417e8:	ldr	ip, [sp, #108]	; 0x6c
   417ec:	mov	r0, r7
   417f0:	mov	r1, #0
   417f4:	cmp	r1, r0
   417f8:	bcs	41834 <__assert_fail@plt+0x2f240>
   417fc:	add	r2, r1, r0
   41800:	lsr	r2, r2, #1
   41804:	ldr	r3, [ip, r2, lsl #2]
   41808:	cmp	r4, r3
   4180c:	ble	41824 <__assert_fail@plt+0x2f230>
   41810:	b	41854 <__assert_fail@plt+0x2f260>
   41814:	ldr	r0, [ip, r3, lsl #2]
   41818:	cmp	r4, r0
   4181c:	bgt	4185c <__assert_fail@plt+0x2f268>
   41820:	mov	r2, r3
   41824:	add	r3, r2, r1
   41828:	cmp	r2, r1
   4182c:	lsr	r3, r3, #1
   41830:	bhi	41814 <__assert_fail@plt+0x2f220>
   41834:	ldr	r2, [ip, r1, lsl #2]
   41838:	add	r3, ip, r1, lsl #2
   4183c:	cmp	r4, r2
   41840:	beq	41868 <__assert_fail@plt+0x2f274>
   41844:	ldr	r3, [sp, #32]
   41848:	ldr	r7, [r3, #116]	; 0x74
   4184c:	add	r7, r7, r5
   41850:	b	413f4 <__assert_fail@plt+0x2ee00>
   41854:	mov	r3, r2
   41858:	mov	r2, r0
   4185c:	add	r1, r3, #1
   41860:	mov	r0, r2
   41864:	b	417f4 <__assert_fail@plt+0x2f200>
   41868:	cmp	lr, r1
   4186c:	movgt	lr, #0
   41870:	movle	lr, #1
   41874:	orrs	r2, lr, r1, lsr #31
   41878:	bne	41844 <__assert_fail@plt+0x2f250>
   4187c:	cmp	r1, r7
   41880:	str	r7, [sp, #104]	; 0x68
   41884:	bge	41844 <__assert_fail@plt+0x2f250>
   41888:	ldr	r2, [r3, #4]
   4188c:	add	r1, r1, #1
   41890:	str	r2, [r3], #4
   41894:	ldr	r2, [sp, #104]	; 0x68
   41898:	cmp	r1, r2
   4189c:	blt	41888 <__assert_fail@plt+0x2f294>
   418a0:	b	41844 <__assert_fail@plt+0x2f250>
   418a4:	mov	ip, fp
   418a8:	add	lr, sp, #84	; 0x54
   418ac:	ldm	ip!, {r0, r1, r2, r3}
   418b0:	stmia	lr!, {r0, r1, r2, r3}
   418b4:	ldm	ip, {r0, r1, r2}
   418b8:	stm	lr, {r0, r1, r2}
   418bc:	mov	r1, ip
   418c0:	add	r0, sp, #100	; 0x64
   418c4:	bl	3b970 <__assert_fail@plt+0x2937c>
   418c8:	subs	ip, r0, #0
   418cc:	beq	414fc <__assert_fail@plt+0x2ef08>
   418d0:	mov	r3, ip
   418d4:	ldr	r2, [sp, #84]	; 0x54
   418d8:	cmp	r2, #0
   418dc:	beq	4118c <__assert_fail@plt+0x2eb98>
   418e0:	ldr	r0, [sp, #108]	; 0x6c
   418e4:	str	r3, [sp, #16]
   418e8:	bl	376d0 <__assert_fail@plt+0x250dc>
   418ec:	ldr	r3, [sp, #16]
   418f0:	mov	r0, r3
   418f4:	add	sp, sp, #116	; 0x74
   418f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   418fc:	add	r2, r1, r0
   41900:	ldr	r0, [r9, #36]	; 0x24
   41904:	lsl	r1, r2, #3
   41908:	lsl	sl, r2, #1
   4190c:	bl	3aacc <__assert_fail@plt+0x284d8>
   41910:	cmp	r0, #0
   41914:	beq	41798 <__assert_fail@plt+0x2f1a4>
   41918:	str	r0, [r9, #36]	; 0x24
   4191c:	str	sl, [r9, #28]
   41920:	b	4122c <__assert_fail@plt+0x2ec38>
   41924:	cmp	r3, #0
   41928:	strne	r8, [sp, #20]
   4192c:	bne	41678 <__assert_fail@plt+0x2f084>
   41930:	str	r3, [sp, #20]
   41934:	b	4115c <__assert_fail@plt+0x2eb68>
   41938:	ldr	r2, [r5, #4]
   4193c:	cmp	r2, #0
   41940:	mov	r1, r2
   41944:	str	r2, [sp, #24]
   41948:	ble	4177c <__assert_fail@plt+0x2f188>
   4194c:	ldr	lr, [r5, #8]
   41950:	mvn	r4, #0
   41954:	mov	r2, lr
   41958:	add	r1, lr, r1, lsl #2
   4195c:	mov	r8, r4
   41960:	str	r6, [sp, #28]
   41964:	b	41984 <__assert_fail@plt+0x2f390>
   41968:	cmp	ip, #9
   4196c:	bne	4197c <__assert_fail@plt+0x2f388>
   41970:	ldr	ip, [r6]
   41974:	cmp	r7, ip
   41978:	moveq	r4, r0
   4197c:	cmp	r1, r2
   41980:	beq	419ac <__assert_fail@plt+0x2f3b8>
   41984:	ldr	r0, [r2], #4
   41988:	add	r6, r3, r0, lsl #3
   4198c:	ldrb	ip, [r6, #4]
   41990:	cmp	ip, #8
   41994:	bne	41968 <__assert_fail@plt+0x2f374>
   41998:	ldr	ip, [r3, r0, lsl #3]
   4199c:	cmp	r7, ip
   419a0:	moveq	r8, r0
   419a4:	cmp	r1, r2
   419a8:	bne	41984 <__assert_fail@plt+0x2f390>
   419ac:	cmp	r8, #0
   419b0:	ldr	r6, [sp, #28]
   419b4:	mov	r3, r8
   419b8:	blt	41b78 <__assert_fail@plt+0x2f584>
   419bc:	mov	r1, r8
   419c0:	ldr	r3, [sp, #20]
   419c4:	mov	r2, r5
   419c8:	mov	r0, r6
   419cc:	bl	3fddc <__assert_fail@plt+0x2d7e8>
   419d0:	cmp	r0, #0
   419d4:	bne	41b44 <__assert_fail@plt+0x2f550>
   419d8:	cmp	r4, #0
   419dc:	blt	4177c <__assert_fail@plt+0x2f188>
   419e0:	ldr	r3, [r5, #4]
   419e4:	cmp	r3, #0
   419e8:	ble	4177c <__assert_fail@plt+0x2f188>
   419ec:	ldr	lr, [r5, #8]
   419f0:	str	sl, [sp, #28]
   419f4:	ldr	sl, [sp, #20]
   419f8:	str	r9, [sp, #24]
   419fc:	mov	r7, #0
   41a00:	mov	r9, r3
   41a04:	ldr	r1, [lr, r7, lsl #2]
   41a08:	ldr	r3, [r6, #28]
   41a0c:	add	r8, r1, r1, lsl #1
   41a10:	lsl	r8, r8, #2
   41a14:	add	r3, r3, r8
   41a18:	ldr	ip, [r3, #4]
   41a1c:	cmp	ip, #0
   41a20:	ble	41a7c <__assert_fail@plt+0x2f488>
   41a24:	ldr	lr, [r3, #8]
   41a28:	sub	ip, ip, #1
   41a2c:	mov	r0, #0
   41a30:	cmp	r0, ip
   41a34:	bcs	41a70 <__assert_fail@plt+0x2f47c>
   41a38:	add	r2, r0, ip
   41a3c:	lsr	r2, r2, #1
   41a40:	ldr	r3, [lr, r2, lsl #2]
   41a44:	cmp	r4, r3
   41a48:	ble	41a60 <__assert_fail@plt+0x2f46c>
   41a4c:	b	41b1c <__assert_fail@plt+0x2f528>
   41a50:	ldr	ip, [lr, r3, lsl #2]
   41a54:	cmp	r4, ip
   41a58:	bgt	41b24 <__assert_fail@plt+0x2f530>
   41a5c:	mov	r2, r3
   41a60:	add	r3, r2, r0
   41a64:	cmp	r2, r0
   41a68:	lsr	r3, r3, #1
   41a6c:	bhi	41a50 <__assert_fail@plt+0x2f45c>
   41a70:	ldr	r3, [lr, r0, lsl #2]
   41a74:	cmp	r4, r3
   41a78:	beq	41b08 <__assert_fail@plt+0x2f514>
   41a7c:	ldr	r3, [r6, #24]
   41a80:	add	r8, r3, r8
   41a84:	ldr	ip, [r8, #4]
   41a88:	cmp	ip, #0
   41a8c:	ble	41ae8 <__assert_fail@plt+0x2f4f4>
   41a90:	ldr	lr, [r8, #8]
   41a94:	sub	ip, ip, #1
   41a98:	mov	r0, #0
   41a9c:	cmp	r0, ip
   41aa0:	bcs	41adc <__assert_fail@plt+0x2f4e8>
   41aa4:	add	r2, r0, ip
   41aa8:	lsr	r2, r2, #1
   41aac:	ldr	r3, [lr, r2, lsl #2]
   41ab0:	cmp	r3, r4
   41ab4:	bge	41acc <__assert_fail@plt+0x2f4d8>
   41ab8:	b	41b30 <__assert_fail@plt+0x2f53c>
   41abc:	ldr	ip, [lr, r3, lsl #2]
   41ac0:	cmp	r4, ip
   41ac4:	bgt	41b38 <__assert_fail@plt+0x2f544>
   41ac8:	mov	r2, r3
   41acc:	add	r3, r0, r2
   41ad0:	cmp	r0, r2
   41ad4:	lsr	r3, r3, #1
   41ad8:	bcc	41abc <__assert_fail@plt+0x2f4c8>
   41adc:	ldr	r3, [lr, r0, lsl #2]
   41ae0:	cmp	r4, r3
   41ae4:	beq	41b08 <__assert_fail@plt+0x2f514>
   41ae8:	mov	r3, sl
   41aec:	mov	r2, r5
   41af0:	mov	r0, r6
   41af4:	bl	3fddc <__assert_fail@plt+0x2d7e8>
   41af8:	cmp	r0, #0
   41afc:	bne	41b44 <__assert_fail@plt+0x2f550>
   41b00:	ldr	r9, [r5, #4]
   41b04:	sub	r7, r7, #1
   41b08:	add	r7, r7, #1
   41b0c:	cmp	r7, r9
   41b10:	bge	41b54 <__assert_fail@plt+0x2f560>
   41b14:	ldr	lr, [r5, #8]
   41b18:	b	41a04 <__assert_fail@plt+0x2f410>
   41b1c:	mov	r3, r2
   41b20:	mov	r2, ip
   41b24:	add	r0, r3, #1
   41b28:	mov	ip, r2
   41b2c:	b	41a30 <__assert_fail@plt+0x2f43c>
   41b30:	mov	r3, r2
   41b34:	mov	r2, ip
   41b38:	add	r0, r3, #1
   41b3c:	mov	ip, r2
   41b40:	b	41a9c <__assert_fail@plt+0x2f4a8>
   41b44:	mov	r3, r0
   41b48:	mov	r0, r3
   41b4c:	add	sp, sp, #116	; 0x74
   41b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41b54:	ldr	r9, [sp, #24]
   41b58:	ldr	sl, [sp, #28]
   41b5c:	ldr	r1, [fp, #20]
   41b60:	b	41780 <__assert_fail@plt+0x2f18c>
   41b64:	mov	r3, #12
   41b68:	b	418d4 <__assert_fail@plt+0x2f2e0>
   41b6c:	ldr	r4, [sp, #60]	; 0x3c
   41b70:	ldr	r9, [sp, #84]	; 0x54
   41b74:	b	417cc <__assert_fail@plt+0x2f1d8>
   41b78:	cmp	r4, #0
   41b7c:	ldrge	r3, [sp, #24]
   41b80:	bge	419f0 <__assert_fail@plt+0x2f3fc>
   41b84:	b	4177c <__assert_fail@plt+0x2f188>
   41b88:	add	r4, r3, r4
   41b8c:	ldr	r0, [r5, #8]
   41b90:	lsl	r1, r4, #2
   41b94:	bl	3aacc <__assert_fail@plt+0x284d8>
   41b98:	cmp	r0, #0
   41b9c:	beq	41798 <__assert_fail@plt+0x2f1a4>
   41ba0:	str	r0, [r5, #8]
   41ba4:	str	r4, [r5]
   41ba8:	b	4164c <__assert_fail@plt+0x2f058>
   41bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41bb0:	sub	sp, sp, #68	; 0x44
   41bb4:	mov	r4, #1
   41bb8:	mov	r7, r0
   41bbc:	mov	r0, #4
   41bc0:	ldr	fp, [r1, #12]
   41bc4:	mov	r9, r1
   41bc8:	ldr	r5, [r1, #8]
   41bcc:	str	r4, [sp, #52]	; 0x34
   41bd0:	str	r4, [sp, #56]	; 0x38
   41bd4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   41bd8:	lsl	r3, fp, #2
   41bdc:	str	r3, [sp, #20]
   41be0:	cmp	r0, #0
   41be4:	str	r0, [sp, #60]	; 0x3c
   41be8:	beq	42044 <__assert_fail@plt+0x2fa50>
   41bec:	add	r3, sp, #52	; 0x34
   41bf0:	str	r5, [r0]
   41bf4:	mov	r2, fp
   41bf8:	mov	r1, r9
   41bfc:	mov	r0, r7
   41c00:	bl	4110c <__assert_fail@plt+0x2eb18>
   41c04:	subs	r3, r0, #0
   41c08:	str	r3, [sp, #40]	; 0x28
   41c0c:	bne	42054 <__assert_fail@plt+0x2fa60>
   41c10:	cmp	fp, #0
   41c14:	ble	41ecc <__assert_fail@plt+0x2f8d8>
   41c18:	str	r3, [sp, #36]	; 0x24
   41c1c:	add	r3, r9, #24
   41c20:	str	r3, [sp, #28]
   41c24:	add	r3, r9, #20
   41c28:	str	r3, [sp, #32]
   41c2c:	ldr	r3, [sp, #20]
   41c30:	mov	sl, r9
   41c34:	str	r4, [sp, #44]	; 0x2c
   41c38:	ldr	r0, [sl]
   41c3c:	ldr	r3, [r0, r3]
   41c40:	cmp	r3, #0
   41c44:	movne	r3, #0
   41c48:	ldreq	r3, [sp, #36]	; 0x24
   41c4c:	addeq	r3, r3, #1
   41c50:	mov	r2, r3
   41c54:	str	r3, [sp, #36]	; 0x24
   41c58:	ldr	r3, [r7, #120]	; 0x78
   41c5c:	cmp	r2, r3
   41c60:	bgt	4205c <__assert_fail@plt+0x2fa68>
   41c64:	mov	r2, #0
   41c68:	ldr	r3, [r7, #100]	; 0x64
   41c6c:	str	r2, [sp, #56]	; 0x38
   41c70:	ldr	r2, [sp, #20]
   41c74:	sub	fp, fp, #1
   41c78:	add	r3, r3, r2
   41c7c:	ldr	r6, [r3, #-4]
   41c80:	cmp	r6, #0
   41c84:	beq	41e9c <__assert_fail@plt+0x2f8a8>
   41c88:	ldr	r3, [r6, #20]
   41c8c:	ldr	r2, [r7, #84]	; 0x54
   41c90:	cmp	r3, #0
   41c94:	mov	r1, r2
   41c98:	str	r2, [sp, #16]
   41c9c:	ble	41e9c <__assert_fail@plt+0x2f8a8>
   41ca0:	ldr	r2, [r6, #24]
   41ca4:	ldr	r3, [r1]
   41ca8:	mov	r4, #0
   41cac:	ldr	r5, [r2]
   41cb0:	lsl	r8, r5, #3
   41cb4:	add	r3, r3, r8
   41cb8:	ldrb	r1, [r3, #6]
   41cbc:	ldrb	r2, [r3, #4]
   41cc0:	tst	r1, #16
   41cc4:	bne	41f18 <__assert_fail@plt+0x2f924>
   41cc8:	ldr	r1, [r7, #4]
   41ccc:	sub	r2, r2, #1
   41cd0:	ldrb	r1, [r1, fp]
   41cd4:	cmp	r2, #6
   41cd8:	ldrls	pc, [pc, r2, lsl #2]
   41cdc:	b	41ee0 <__assert_fail@plt+0x2f8ec>
   41ce0:	ldrdeq	r1, [r4], -r4
   41ce4:	andeq	r1, r4, r0, ror #29
   41ce8:	andeq	r1, r4, r0, ror lr
   41cec:	andeq	r1, r4, r0, ror #29
   41cf0:	andeq	r1, r4, r4, lsl #26
   41cf4:	andeq	r1, r4, r0, ror #29
   41cf8:	strdeq	r1, [r4], -ip
   41cfc:	tst	r1, #128	; 0x80
   41d00:	bne	41ee0 <__assert_fail@plt+0x2f8ec>
   41d04:	cmp	r1, #10
   41d08:	beq	42028 <__assert_fail@plt+0x2fa34>
   41d0c:	cmp	r1, #0
   41d10:	bne	41d24 <__assert_fail@plt+0x2f730>
   41d14:	ldr	r2, [r7, #84]	; 0x54
   41d18:	ldr	r2, [r2, #128]	; 0x80
   41d1c:	tst	r2, #128	; 0x80
   41d20:	bne	41ee0 <__assert_fail@plt+0x2f8ec>
   41d24:	ldr	r8, [r3, #4]
   41d28:	ldr	r3, [pc, #848]	; 42080 <__assert_fail@plt+0x2fa8c>
   41d2c:	tst	r8, r3
   41d30:	beq	41d84 <__assert_fail@plt+0x2f790>
   41d34:	ldr	r2, [r7, #88]	; 0x58
   41d38:	mov	r1, fp
   41d3c:	mov	r0, r7
   41d40:	bl	3bc7c <__assert_fail@plt+0x29688>
   41d44:	ldr	r3, [pc, #824]	; 42084 <__assert_fail@plt+0x2fa90>
   41d48:	and	r8, r3, r8, lsr #8
   41d4c:	tst	r8, #4
   41d50:	beq	42014 <__assert_fail@plt+0x2fa20>
   41d54:	tst	r0, #1
   41d58:	beq	41ee0 <__assert_fail@plt+0x2f8ec>
   41d5c:	tst	r8, #8
   41d60:	bne	41ee0 <__assert_fail@plt+0x2f8ec>
   41d64:	tst	r8, #32
   41d68:	beq	41d74 <__assert_fail@plt+0x2f780>
   41d6c:	tst	r0, #2
   41d70:	beq	41ee0 <__assert_fail@plt+0x2f8ec>
   41d74:	tst	r8, #128	; 0x80
   41d78:	beq	41d84 <__assert_fail@plt+0x2f790>
   41d7c:	tst	r0, #8
   41d80:	beq	41ee0 <__assert_fail@plt+0x2f8ec>
   41d84:	ldr	r3, [sl]
   41d88:	ldr	r2, [sp, #20]
   41d8c:	ldr	r3, [r3, r2]
   41d90:	cmp	r3, #0
   41d94:	beq	41ee0 <__assert_fail@plt+0x2f8ec>
   41d98:	ldr	lr, [r3, #8]
   41d9c:	ldr	r2, [sp, #16]
   41da0:	cmp	lr, #0
   41da4:	ldr	r2, [r2, #12]
   41da8:	ble	41ee0 <__assert_fail@plt+0x2f8ec>
   41dac:	ldr	r0, [r2, r5, lsl #2]
   41db0:	ldr	ip, [r3, #12]
   41db4:	sub	lr, lr, #1
   41db8:	mov	r1, #0
   41dbc:	cmp	r1, lr
   41dc0:	bcs	41dfc <__assert_fail@plt+0x2f808>
   41dc4:	add	r2, r1, lr
   41dc8:	lsr	r2, r2, #1
   41dcc:	ldr	r3, [ip, r2, lsl #2]
   41dd0:	cmp	r3, r0
   41dd4:	bge	41dec <__assert_fail@plt+0x2f7f8>
   41dd8:	b	41fe4 <__assert_fail@plt+0x2f9f0>
   41ddc:	ldr	lr, [ip, r3, lsl #2]
   41de0:	cmp	r0, lr
   41de4:	bgt	41fec <__assert_fail@plt+0x2f9f8>
   41de8:	mov	r2, r3
   41dec:	add	r3, r2, r1
   41df0:	cmp	r2, r1
   41df4:	lsr	r3, r3, #1
   41df8:	bhi	41ddc <__assert_fail@plt+0x2f7e8>
   41dfc:	ldr	r3, [ip, r1, lsl #2]
   41e00:	cmp	r0, r3
   41e04:	bne	41ee0 <__assert_fail@plt+0x2f8ec>
   41e08:	ldr	r0, [sp, #44]	; 0x2c
   41e0c:	ldr	r3, [sl, #20]
   41e10:	cmp	r3, #0
   41e14:	beq	41e44 <__assert_fail@plt+0x2f850>
   41e18:	ldr	r3, [sp, #16]
   41e1c:	add	r0, fp, r0
   41e20:	ldr	r2, [sp, #28]
   41e24:	ldr	r3, [r3, #12]
   41e28:	ldr	r1, [sp, #32]
   41e2c:	ldr	r3, [r3, r5, lsl #2]
   41e30:	stm	sp, {r0, r5, fp}
   41e34:	mov	r0, r7
   41e38:	bl	3fb04 <__assert_fail@plt+0x2d510>
   41e3c:	cmp	r0, #0
   41e40:	bne	41ee0 <__assert_fail@plt+0x2f8ec>
   41e44:	mov	r1, r5
   41e48:	add	r0, sp, #52	; 0x34
   41e4c:	bl	3b700 <__assert_fail@plt+0x2910c>
   41e50:	cmp	r0, #0
   41e54:	bne	41ee0 <__assert_fail@plt+0x2f8ec>
   41e58:	mov	r4, #12
   41e5c:	ldr	r0, [sp, #60]	; 0x3c
   41e60:	bl	376d0 <__assert_fail@plt+0x250dc>
   41e64:	mov	r0, r4
   41e68:	add	sp, sp, #68	; 0x44
   41e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41e70:	ldr	r2, [r3]
   41e74:	asr	r0, r1, #5
   41e78:	and	r1, r1, #31
   41e7c:	ldr	r2, [r2, r0, lsl #2]
   41e80:	lsr	r1, r2, r1
   41e84:	tst	r1, #1
   41e88:	bne	41d24 <__assert_fail@plt+0x2f730>
   41e8c:	ldr	r3, [r6, #20]
   41e90:	add	r4, r4, #1
   41e94:	cmp	r4, r3
   41e98:	blt	41ef0 <__assert_fail@plt+0x2f8fc>
   41e9c:	add	r3, sp, #52	; 0x34
   41ea0:	mov	r2, fp
   41ea4:	mov	r1, sl
   41ea8:	mov	r0, r7
   41eac:	bl	4110c <__assert_fail@plt+0x2eb18>
   41eb0:	cmp	r0, #0
   41eb4:	bne	4203c <__assert_fail@plt+0x2fa48>
   41eb8:	ldr	r3, [sp, #20]
   41ebc:	cmp	fp, #0
   41ec0:	sub	r3, r3, #4
   41ec4:	str	r3, [sp, #20]
   41ec8:	bne	41c38 <__assert_fail@plt+0x2f644>
   41ecc:	ldr	r4, [sp, #40]	; 0x28
   41ed0:	b	41e5c <__assert_fail@plt+0x2f868>
   41ed4:	ldrb	r2, [r3]
   41ed8:	cmp	r2, r1
   41edc:	beq	41d24 <__assert_fail@plt+0x2f730>
   41ee0:	ldr	r3, [r6, #20]
   41ee4:	add	r4, r4, #1
   41ee8:	cmp	r4, r3
   41eec:	bge	41e9c <__assert_fail@plt+0x2f8a8>
   41ef0:	ldr	r2, [r6, #24]
   41ef4:	ldr	r3, [sp, #16]
   41ef8:	ldr	r5, [r2, r4, lsl #2]
   41efc:	ldr	r3, [r3]
   41f00:	lsl	r8, r5, #3
   41f04:	add	r3, r3, r8
   41f08:	ldrb	r1, [r3, #6]
   41f0c:	ldrb	r2, [r3, #4]
   41f10:	tst	r1, #16
   41f14:	beq	41cc8 <__assert_fail@plt+0x2f6d4>
   41f18:	ldr	r9, [r7, #84]	; 0x54
   41f1c:	mov	r3, r7
   41f20:	add	r1, r9, #128	; 0x80
   41f24:	ldr	r0, [r9]
   41f28:	str	fp, [sp]
   41f2c:	ldr	ip, [sl, #12]
   41f30:	mov	r2, r5
   41f34:	str	ip, [sp, #24]
   41f38:	bl	3d758 <__assert_fail@plt+0x2b164>
   41f3c:	cmp	r0, #0
   41f40:	ble	4200c <__assert_fail@plt+0x2fa18>
   41f44:	ldr	ip, [sp, #24]
   41f48:	add	r3, fp, r0
   41f4c:	cmp	ip, r3
   41f50:	blt	41e0c <__assert_fail@plt+0x2f818>
   41f54:	ldr	r2, [sl]
   41f58:	ldr	r3, [r2, r3, lsl #2]
   41f5c:	cmp	r3, #0
   41f60:	beq	41fd0 <__assert_fail@plt+0x2f9dc>
   41f64:	ldr	ip, [r3, #8]
   41f68:	ldr	r2, [r9, #12]
   41f6c:	cmp	ip, #0
   41f70:	ble	41fd0 <__assert_fail@plt+0x2f9dc>
   41f74:	ldr	lr, [r2, r5, lsl #2]
   41f78:	ldr	r9, [r3, #12]
   41f7c:	sub	ip, ip, #1
   41f80:	mov	r1, #0
   41f84:	cmp	r1, ip
   41f88:	bcs	41fc4 <__assert_fail@plt+0x2f9d0>
   41f8c:	add	r2, r1, ip
   41f90:	lsr	r2, r2, #1
   41f94:	ldr	r3, [r9, r2, lsl #2]
   41f98:	cmp	r3, lr
   41f9c:	bge	41fb4 <__assert_fail@plt+0x2f9c0>
   41fa0:	b	41ff8 <__assert_fail@plt+0x2fa04>
   41fa4:	ldr	ip, [r9, r3, lsl #2]
   41fa8:	cmp	lr, ip
   41fac:	bgt	42000 <__assert_fail@plt+0x2fa0c>
   41fb0:	mov	r2, r3
   41fb4:	add	r3, r2, r1
   41fb8:	cmp	r2, r1
   41fbc:	lsr	r3, r3, #1
   41fc0:	bhi	41fa4 <__assert_fail@plt+0x2f9b0>
   41fc4:	ldr	r3, [r9, r1, lsl #2]
   41fc8:	cmp	lr, r3
   41fcc:	beq	41e0c <__assert_fail@plt+0x2f818>
   41fd0:	ldr	r3, [sp, #16]
   41fd4:	ldr	r3, [r3]
   41fd8:	add	r3, r3, r8
   41fdc:	ldrb	r2, [r3, #4]
   41fe0:	b	41cc8 <__assert_fail@plt+0x2f6d4>
   41fe4:	mov	r3, r2
   41fe8:	mov	r2, lr
   41fec:	add	r1, r3, #1
   41ff0:	mov	lr, r2
   41ff4:	b	41dbc <__assert_fail@plt+0x2f7c8>
   41ff8:	mov	r3, r2
   41ffc:	mov	r2, ip
   42000:	add	r1, r3, #1
   42004:	mov	ip, r2
   42008:	b	41f84 <__assert_fail@plt+0x2f990>
   4200c:	beq	41fd0 <__assert_fail@plt+0x2f9dc>
   42010:	b	41e0c <__assert_fail@plt+0x2f818>
   42014:	tst	r8, #8
   42018:	beq	41d64 <__assert_fail@plt+0x2f770>
   4201c:	tst	r0, #1
   42020:	beq	41d64 <__assert_fail@plt+0x2f770>
   42024:	b	41ee0 <__assert_fail@plt+0x2f8ec>
   42028:	ldr	r2, [r7, #84]	; 0x54
   4202c:	ldr	r2, [r2, #128]	; 0x80
   42030:	tst	r2, #64	; 0x40
   42034:	bne	41d24 <__assert_fail@plt+0x2f730>
   42038:	b	41ee0 <__assert_fail@plt+0x2f8ec>
   4203c:	mov	r4, r0
   42040:	b	41e5c <__assert_fail@plt+0x2f868>
   42044:	mov	r4, #12
   42048:	mov	r0, r4
   4204c:	add	sp, sp, #68	; 0x44
   42050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42054:	mov	r4, r3
   42058:	b	41e5c <__assert_fail@plt+0x2f868>
   4205c:	ldr	r2, [sp, #20]
   42060:	mov	r1, #0
   42064:	bl	12378 <memset@plt>
   42068:	ldr	r0, [sp, #60]	; 0x3c
   4206c:	ldr	r4, [sp, #40]	; 0x28
   42070:	bl	376d0 <__assert_fail@plt+0x250dc>
   42074:	mov	r0, r4
   42078:	add	sp, sp, #68	; 0x44
   4207c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42080:	andeq	pc, r3, r0, lsl #30
   42084:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   42088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4208c:	sub	sp, sp, #44	; 0x2c
   42090:	mov	r6, r0
   42094:	mov	fp, r1
   42098:	mov	r9, #0
   4209c:	mov	r1, #1
   420a0:	mov	r0, #32
   420a4:	mov	sl, r2
   420a8:	mov	r5, r3
   420ac:	str	r9, [sp, #20]
   420b0:	ldrb	r8, [sp, #80]	; 0x50
   420b4:	bl	37128 <__assert_fail@plt+0x24b34>
   420b8:	subs	r4, r0, #0
   420bc:	beq	42414 <__assert_fail@plt+0x2fe20>
   420c0:	mov	r1, #1
   420c4:	mov	r0, #40	; 0x28
   420c8:	bl	37128 <__assert_fail@plt+0x24b34>
   420cc:	subs	r7, r0, #0
   420d0:	beq	42430 <__assert_fail@plt+0x2fe3c>
   420d4:	ldrb	r2, [r7, #16]
   420d8:	and	r3, r8, #1
   420dc:	mov	r0, fp
   420e0:	bic	r2, r2, #1
   420e4:	orr	r3, r3, r2
   420e8:	add	r2, sp, #20
   420ec:	strb	r3, [r7, #16]
   420f0:	mov	r1, r4
   420f4:	stm	sp, {r2, sl}
   420f8:	add	r3, r7, #36	; 0x24
   420fc:	str	r9, [sp, #8]
   42100:	add	r2, r7, #12
   42104:	bl	3ca38 <__assert_fail@plt+0x2a444>
   42108:	subs	sl, r0, #0
   4210c:	bne	4244c <__assert_fail@plt+0x2fe58>
   42110:	ldrb	r3, [r5]
   42114:	cmp	r3, #0
   42118:	movne	ip, #1
   4211c:	beq	42140 <__assert_fail@plt+0x2fb4c>
   42120:	asr	r1, r3, #5
   42124:	and	r0, r3, #31
   42128:	ldr	r2, [r4, r1, lsl #2]
   4212c:	ldrb	r3, [r5, #1]!
   42130:	orr	r2, r2, ip, lsl r0
   42134:	cmp	r3, #0
   42138:	str	r2, [r4, r1, lsl #2]
   4213c:	bne	42120 <__assert_fail@plt+0x2fb2c>
   42140:	cmp	r8, #0
   42144:	bne	4230c <__assert_fail@plt+0x2fd18>
   42148:	ldr	r3, [r6, #92]	; 0x5c
   4214c:	cmp	r3, #1
   42150:	ble	421d4 <__assert_fail@plt+0x2fbe0>
   42154:	ldr	r3, [r6, #60]	; 0x3c
   42158:	ldm	r4, {r1, r2}
   4215c:	ldr	r0, [r4, #8]
   42160:	ldr	ip, [r3]
   42164:	and	r1, r1, ip
   42168:	str	r1, [r4]
   4216c:	ldr	ip, [r3, #4]
   42170:	ldr	r1, [r4, #12]
   42174:	and	r2, r2, ip
   42178:	str	r2, [r4, #4]
   4217c:	ldr	ip, [r3, #8]
   42180:	ldr	r2, [r4, #16]
   42184:	and	r0, r0, ip
   42188:	str	r0, [r4, #8]
   4218c:	ldr	ip, [r3, #12]
   42190:	ldr	r0, [r4, #20]
   42194:	and	r1, r1, ip
   42198:	str	r1, [r4, #12]
   4219c:	ldr	ip, [r3, #16]
   421a0:	ldr	r1, [r4, #24]
   421a4:	and	r2, r2, ip
   421a8:	str	r2, [r4, #16]
   421ac:	ldr	ip, [r3, #20]
   421b0:	ldr	r2, [r4, #28]
   421b4:	and	r0, r0, ip
   421b8:	str	r0, [r4, #20]
   421bc:	ldr	r0, [r3, #24]
   421c0:	and	r1, r1, r0
   421c4:	str	r1, [r4, #24]
   421c8:	ldr	r3, [r3, #28]
   421cc:	and	r3, r3, r2
   421d0:	str	r3, [r4, #28]
   421d4:	ldr	r3, [r6, #64]	; 0x40
   421d8:	add	r8, sp, #24
   421dc:	mov	r5, #0
   421e0:	cmp	r3, #31
   421e4:	str	r5, [r8, #4]
   421e8:	beq	42488 <__assert_fail@plt+0x2fe94>
   421ec:	lsl	ip, r3, #5
   421f0:	add	lr, r3, #1
   421f4:	ldr	r3, [r6, #56]	; 0x38
   421f8:	add	r9, ip, #4
   421fc:	mov	r2, #3
   42200:	add	ip, r3, ip
   42204:	str	r4, [sp, #24]
   42208:	strb	r2, [sp, #28]
   4220c:	ldm	r8, {r0, r1}
   42210:	add	sl, ip, #24
   42214:	mov	r5, #0
   42218:	str	lr, [r6, #64]	; 0x40
   4221c:	str	r5, [ip, #4]
   42220:	str	r5, [ip, #8]
   42224:	str	r5, [ip, #12]
   42228:	stm	sl, {r0, r1}
   4222c:	ldrb	r2, [ip, #30]
   42230:	mvn	r1, #0
   42234:	adds	r9, r3, r9
   42238:	and	r2, r2, #243	; 0xf3
   4223c:	str	r5, [ip, #16]
   42240:	str	r5, [ip, #20]
   42244:	strb	r2, [ip, #30]
   42248:	str	r1, [ip, #32]
   4224c:	beq	42394 <__assert_fail@plt+0x2fda0>
   42250:	ldr	r2, [r6, #92]	; 0x5c
   42254:	cmp	r2, #1
   42258:	ble	423e0 <__assert_fail@plt+0x2fdec>
   4225c:	ldrb	r2, [r6, #88]	; 0x58
   42260:	ldr	r1, [r6, #64]	; 0x40
   42264:	orr	r2, r2, #2
   42268:	cmp	r1, #31
   4226c:	strb	r2, [r6, #88]	; 0x58
   42270:	beq	42368 <__assert_fail@plt+0x2fd74>
   42274:	lsl	ip, r1, #5
   42278:	add	r2, r1, #1
   4227c:	add	r5, ip, #4
   42280:	mov	r1, #6
   42284:	add	ip, r3, ip
   42288:	str	r7, [sp, #24]
   4228c:	strb	r1, [sp, #28]
   42290:	ldm	r8, {r0, r1}
   42294:	add	r8, ip, #24
   42298:	mov	lr, #0
   4229c:	str	r2, [r6, #64]	; 0x40
   422a0:	str	lr, [ip, #4]
   422a4:	str	lr, [ip, #8]
   422a8:	str	lr, [ip, #12]
   422ac:	stm	r8, {r0, r1}
   422b0:	ldrb	r2, [ip, #30]
   422b4:	mvn	r1, #0
   422b8:	adds	r3, r3, r5
   422bc:	and	r2, r2, #243	; 0xf3
   422c0:	str	lr, [ip, #16]
   422c4:	str	lr, [ip, #20]
   422c8:	strb	r2, [ip, #30]
   422cc:	str	r1, [ip, #32]
   422d0:	beq	42394 <__assert_fail@plt+0x2fda0>
   422d4:	add	ip, sp, #32
   422d8:	mov	r2, r9
   422dc:	str	ip, [sp]
   422e0:	mov	r4, #10
   422e4:	add	r1, r6, #64	; 0x40
   422e8:	add	r0, r6, #56	; 0x38
   422ec:	str	lr, [sp, #36]	; 0x24
   422f0:	str	lr, [sp, #32]
   422f4:	strb	r4, [sp, #36]	; 0x24
   422f8:	bl	3b8ac <__assert_fail@plt+0x292b8>
   422fc:	mov	r9, r0
   42300:	mov	r0, r9
   42304:	add	sp, sp, #44	; 0x2c
   42308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4230c:	ldm	r4, {r2, r3, lr}
   42310:	ldr	ip, [r4, #12]
   42314:	ldr	r0, [r4, #16]
   42318:	mvn	r2, r2
   4231c:	mvn	r3, r3
   42320:	ldr	r1, [r4, #20]
   42324:	str	r2, [r4]
   42328:	str	r3, [r4, #4]
   4232c:	ldr	r2, [r4, #24]
   42330:	ldr	r3, [r4, #28]
   42334:	mvn	lr, lr
   42338:	mvn	ip, ip
   4233c:	mvn	r0, r0
   42340:	mvn	r1, r1
   42344:	mvn	r2, r2
   42348:	mvn	r3, r3
   4234c:	str	lr, [r4, #8]
   42350:	str	ip, [r4, #12]
   42354:	str	r0, [r4, #16]
   42358:	str	r1, [r4, #20]
   4235c:	str	r2, [r4, #24]
   42360:	str	r3, [r4, #28]
   42364:	b	42148 <__assert_fail@plt+0x2fb54>
   42368:	mov	r0, #996	; 0x3e4
   4236c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   42370:	subs	r3, r0, #0
   42374:	beq	42394 <__assert_fail@plt+0x2fda0>
   42378:	ldr	r1, [r6, #56]	; 0x38
   4237c:	mov	ip, r5
   42380:	mov	r2, #1
   42384:	mov	r5, #4
   42388:	str	r1, [r3]
   4238c:	str	r3, [r6, #56]	; 0x38
   42390:	b	42280 <__assert_fail@plt+0x2fc8c>
   42394:	mov	r0, r4
   42398:	bl	376d0 <__assert_fail@plt+0x250dc>
   4239c:	ldr	r0, [r7]
   423a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   423a4:	ldr	r0, [r7, #4]
   423a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   423ac:	ldr	r0, [r7, #8]
   423b0:	bl	376d0 <__assert_fail@plt+0x250dc>
   423b4:	ldr	r0, [r7, #12]
   423b8:	bl	376d0 <__assert_fail@plt+0x250dc>
   423bc:	mov	r0, r7
   423c0:	bl	376d0 <__assert_fail@plt+0x250dc>
   423c4:	ldr	r2, [sp, #84]	; 0x54
   423c8:	mov	r9, #0
   423cc:	mov	r3, #12
   423d0:	mov	r0, r9
   423d4:	str	r3, [r2]
   423d8:	add	sp, sp, #44	; 0x2c
   423dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   423e0:	ldr	r0, [r7]
   423e4:	bl	376d0 <__assert_fail@plt+0x250dc>
   423e8:	ldr	r0, [r7, #4]
   423ec:	bl	376d0 <__assert_fail@plt+0x250dc>
   423f0:	ldr	r0, [r7, #8]
   423f4:	bl	376d0 <__assert_fail@plt+0x250dc>
   423f8:	ldr	r0, [r7, #12]
   423fc:	bl	376d0 <__assert_fail@plt+0x250dc>
   42400:	mov	r0, r7
   42404:	bl	376d0 <__assert_fail@plt+0x250dc>
   42408:	mov	r0, r9
   4240c:	add	sp, sp, #44	; 0x2c
   42410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42414:	ldr	r2, [sp, #84]	; 0x54
   42418:	mov	r3, #12
   4241c:	mov	r9, r4
   42420:	mov	r0, r9
   42424:	str	r3, [r2]
   42428:	add	sp, sp, #44	; 0x2c
   4242c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42430:	mov	r0, r4
   42434:	bl	376d0 <__assert_fail@plt+0x250dc>
   42438:	ldr	r2, [sp, #84]	; 0x54
   4243c:	mov	r3, #12
   42440:	mov	r9, r7
   42444:	str	r3, [r2]
   42448:	b	42300 <__assert_fail@plt+0x2fd0c>
   4244c:	mov	r0, r4
   42450:	bl	376d0 <__assert_fail@plt+0x250dc>
   42454:	ldr	r0, [r7]
   42458:	bl	376d0 <__assert_fail@plt+0x250dc>
   4245c:	ldr	r0, [r7, #4]
   42460:	bl	376d0 <__assert_fail@plt+0x250dc>
   42464:	ldr	r0, [r7, #8]
   42468:	bl	376d0 <__assert_fail@plt+0x250dc>
   4246c:	ldr	r0, [r7, #12]
   42470:	bl	376d0 <__assert_fail@plt+0x250dc>
   42474:	mov	r0, r7
   42478:	bl	376d0 <__assert_fail@plt+0x250dc>
   4247c:	ldr	r3, [sp, #84]	; 0x54
   42480:	str	sl, [r3]
   42484:	b	42300 <__assert_fail@plt+0x2fd0c>
   42488:	mov	r0, #996	; 0x3e4
   4248c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   42490:	subs	r3, r0, #0
   42494:	beq	42394 <__assert_fail@plt+0x2fda0>
   42498:	ldr	r2, [r6, #56]	; 0x38
   4249c:	mov	ip, r5
   424a0:	mov	lr, #1
   424a4:	mov	r9, #4
   424a8:	str	r2, [r3]
   424ac:	str	r3, [r6, #56]	; 0x38
   424b0:	b	421fc <__assert_fail@plt+0x2fc08>
   424b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   424b8:	sub	sp, sp, #172	; 0xac
   424bc:	mov	r4, r1
   424c0:	str	r2, [sp, #32]
   424c4:	ldrb	r2, [r2, #4]
   424c8:	str	r3, [sp, #40]	; 0x28
   424cc:	str	r0, [sp, #44]	; 0x2c
   424d0:	sub	r3, r2, #1
   424d4:	ldr	sl, [r1]
   424d8:	ldr	r6, [sp, #208]	; 0xd0
   424dc:	cmp	r3, #35	; 0x23
   424e0:	ldrls	pc, [pc, r3, lsl #2]
   424e4:	b	43850 <__assert_fail@plt+0x3125c>
   424e8:			; <UNDEFINED> instruction: 0x000433bc
   424ec:	andeq	r2, r4, r0, ror r6
   424f0:	andeq	r3, r4, r0, asr r8
   424f4:	andeq	r3, r4, r4, lsr #5
   424f8:	andeq	r3, r4, ip, asr r3
   424fc:	andeq	r3, r4, r0, asr r8
   42500:	andeq	r3, r4, r0, asr r8
   42504:	andeq	r3, r4, ip, lsl #15
   42508:	andeq	r3, r4, r0, lsr r8
   4250c:	andeq	r2, r4, r0, ror r6
   42510:	andeq	r2, r4, r4, lsl #11
   42514:	andeq	r3, r4, r8, lsr #9
   42518:	andeq	r3, r4, r0, asr r8
   4251c:	andeq	r3, r4, r0, asr r8
   42520:	andeq	r3, r4, r0, asr r8
   42524:	andeq	r3, r4, r0, asr r8
   42528:	andeq	r3, r4, r0, asr r8
   4252c:	andeq	r2, r4, r4, lsl #11
   42530:	andeq	r2, r4, r4, lsl #11
   42534:	andeq	r3, r4, r8, asr #11
   42538:	andeq	r3, r4, r0, asr r8
   4253c:	andeq	r3, r4, r0, asr r8
   42540:	andeq	r2, r4, r8, ror r5
   42544:	andeq	r2, r4, r0, lsr #11
   42548:	andeq	r3, r4, r0, asr r8
   4254c:	andeq	r3, r4, r0, asr r8
   42550:	andeq	r3, r4, r0, asr r8
   42554:	andeq	r3, r4, r0, asr r8
   42558:	andeq	r3, r4, r0, asr r8
   4255c:	andeq	r3, r4, r0, asr r8
   42560:	andeq	r3, r4, r0, asr r8
   42564:	andeq	r3, r4, r4, lsl #6
   42568:	andeq	r3, r4, r4, lsl #6
   4256c:	muleq	r4, r0, r3
   42570:	muleq	r4, r0, r3
   42574:	andeq	r3, r4, ip, ror #14
   42578:	ldr	r3, [sp, #40]	; 0x28
   4257c:	tst	r3, #16777216	; 0x1000000
   42580:	bne	42b94 <__assert_fail@plt+0x305a0>
   42584:	ldr	r3, [sp, #40]	; 0x28
   42588:	tst	r3, #32
   4258c:	bne	42b94 <__assert_fail@plt+0x305a0>
   42590:	tst	r3, #16
   42594:	bne	44240 <__assert_fail@plt+0x31c4c>
   42598:	cmp	r2, #9
   4259c:	beq	43830 <__assert_fail@plt+0x3123c>
   425a0:	ldr	r2, [sp, #32]
   425a4:	mov	r3, #1
   425a8:	add	r1, sl, #64	; 0x40
   425ac:	strb	r3, [r2, #4]
   425b0:	add	r0, sl, #56	; 0x38
   425b4:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   425b8:	subs	r3, r0, #0
   425bc:	str	r3, [sp, #36]	; 0x24
   425c0:	beq	43490 <__assert_fail@plt+0x30e9c>
   425c4:	ldr	r5, [sp, #40]	; 0x28
   425c8:	ldr	r4, [sp, #44]	; 0x2c
   425cc:	ldr	r6, [sp, #32]
   425d0:	mov	r2, r5
   425d4:	mov	r1, r4
   425d8:	mov	r0, r6
   425dc:	bl	3da6c <__assert_fail@plt+0x2b478>
   425e0:	ldr	r3, [r4, #40]	; 0x28
   425e4:	mov	fp, #0
   425e8:	and	lr, r5, #2097152	; 0x200000
   425ec:	and	ip, r5, #16777216	; 0x1000000
   425f0:	ldrb	r2, [r6, #4]
   425f4:	str	lr, [sp, #60]	; 0x3c
   425f8:	str	ip, [sp, #52]	; 0x34
   425fc:	add	r3, r3, r0
   42600:	str	r3, [r4, #40]	; 0x28
   42604:	cmp	r2, #23
   42608:	bls	42684 <__assert_fail@plt+0x30090>
   4260c:	ldr	r0, [sp, #36]	; 0x24
   42610:	add	sp, sp, #172	; 0xac
   42614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42618:	ldr	r3, [sp, #212]	; 0xd4
   4261c:	mov	r2, r8
   42620:	str	r3, [sp, #4]
   42624:	str	r6, [sp]
   42628:	mov	r3, r9
   4262c:	mov	r1, r4
   42630:	bl	448bc <__assert_fail@plt+0x322c8>
   42634:	ldr	r3, [sp, #212]	; 0xd4
   42638:	ldr	r3, [r3]
   4263c:	cmp	r3, #0
   42640:	mov	r2, r0
   42644:	bne	42670 <__assert_fail@plt+0x3007c>
   42648:	ldr	r3, [sp, #32]
   4264c:	ldrb	r3, [r3, #4]
   42650:	cmp	r3, #9
   42654:	beq	437dc <__assert_fail@plt+0x311e8>
   42658:	cmp	r0, #0
   4265c:	beq	42664 <__assert_fail@plt+0x30070>
   42660:	bl	3e480 <__assert_fail@plt+0x2be8c>
   42664:	ldr	r2, [sp, #212]	; 0xd4
   42668:	mov	r3, #8
   4266c:	str	r3, [r2]
   42670:	mov	r3, #0
   42674:	str	r3, [sp, #36]	; 0x24
   42678:	ldr	r0, [sp, #36]	; 0x24
   4267c:	add	sp, sp, #172	; 0xac
   42680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42684:	ldr	r3, [pc, #3864]	; 435a4 <__assert_fail@plt+0x30fb0>
   42688:	sub	r9, r2, #18
   4268c:	clz	r9, r9
   42690:	mvn	r4, r3, lsr r2
   42694:	ands	r4, r4, #1
   42698:	lsr	r9, r9, #5
   4269c:	bne	4260c <__assert_fail@plt+0x30018>
   426a0:	ldr	r3, [sp, #32]
   426a4:	cmp	r2, #23
   426a8:	ldm	r3, {r0, r1}
   426ac:	ldr	r3, [sp, #44]	; 0x2c
   426b0:	ldr	r5, [r3, #40]	; 0x28
   426b4:	add	r3, sp, #104	; 0x68
   426b8:	stm	r3, {r0, r1}
   426bc:	beq	42a90 <__assert_fail@plt+0x3049c>
   426c0:	ldr	r4, [sp, #44]	; 0x2c
   426c4:	cmp	r2, #19
   426c8:	moveq	r3, #1
   426cc:	mvnne	r3, #0
   426d0:	mov	r1, r4
   426d4:	ldr	r2, [sp, #40]	; 0x28
   426d8:	ldr	r0, [sp, #32]
   426dc:	str	r3, [sp, #24]
   426e0:	bl	3da6c <__assert_fail@plt+0x2b478>
   426e4:	ldr	r3, [r4, #40]	; 0x28
   426e8:	ldr	r1, [sp, #36]	; 0x24
   426ec:	cmp	r1, #0
   426f0:	add	r0, r3, r0
   426f4:	str	r0, [r4, #40]	; 0x28
   426f8:	beq	42b4c <__assert_fail@plt+0x30558>
   426fc:	cmp	r9, #0
   42700:	bgt	42cc4 <__assert_fail@plt+0x306d0>
   42704:	ldr	r5, [sp, #36]	; 0x24
   42708:	mov	r8, #0
   4270c:	add	r3, sp, #136	; 0x88
   42710:	str	r3, [sp, #48]	; 0x30
   42714:	ldrb	r3, [r5, #24]
   42718:	cmp	r3, #17
   4271c:	beq	42bb4 <__assert_fail@plt+0x305c0>
   42720:	ldr	r3, [sp, #48]	; 0x30
   42724:	str	fp, [r3]
   42728:	str	fp, [r3, #4]
   4272c:	ldr	r3, [sp, #24]
   42730:	ldr	r1, [sl, #64]	; 0x40
   42734:	cmn	r3, #1
   42738:	movne	r4, #10
   4273c:	moveq	r4, #11
   42740:	cmp	r1, #31
   42744:	beq	42fd8 <__assert_fail@plt+0x309e4>
   42748:	lsl	r2, r1, #5
   4274c:	ldr	r3, [sl, #56]	; 0x38
   42750:	add	r1, r1, #1
   42754:	add	lr, r2, #4
   42758:	add	r2, r3, r2
   4275c:	str	r1, [sl, #64]	; 0x40
   42760:	str	fp, [r2, #4]
   42764:	str	r5, [r2, #8]
   42768:	str	fp, [r2, #12]
   4276c:	strb	r4, [sp, #140]	; 0x8c
   42770:	ldr	r4, [sp, #48]	; 0x30
   42774:	add	ip, r2, #24
   42778:	add	r3, r3, lr
   4277c:	ldm	r4, {r0, r1}
   42780:	cmp	r3, #0
   42784:	stm	ip, {r0, r1}
   42788:	ldrb	r1, [r2, #30]
   4278c:	mvn	r0, #0
   42790:	str	fp, [r2, #16]
   42794:	and	r1, r1, #243	; 0xf3
   42798:	str	fp, [r2, #20]
   4279c:	strb	r1, [r2, #30]
   427a0:	str	r0, [r2, #32]
   427a4:	str	r3, [r5]
   427a8:	beq	42a04 <__assert_fail@plt+0x30410>
   427ac:	ldr	r1, [sp, #24]
   427b0:	add	r2, r9, #2
   427b4:	cmp	r2, r1
   427b8:	str	r2, [sp, #20]
   427bc:	bgt	42c6c <__assert_fail@plt+0x30678>
   427c0:	str	r8, [sp, #56]	; 0x38
   427c4:	mov	r9, r0
   427c8:	mov	r6, r3
   427cc:	mov	r8, r4
   427d0:	mov	r4, r5
   427d4:	mov	r7, r8
   427d8:	b	427e4 <__assert_fail@plt+0x301f0>
   427dc:	mov	r4, r2
   427e0:	add	r7, r6, #4
   427e4:	ldr	r1, [sl, #64]	; 0x40
   427e8:	cmp	r1, #31
   427ec:	beq	428b0 <__assert_fail@plt+0x302bc>
   427f0:	lsl	r2, r1, #5
   427f4:	ldr	ip, [sl, #56]	; 0x38
   427f8:	add	r0, r1, #1
   427fc:	add	lr, r2, #4
   42800:	add	r2, ip, r2
   42804:	add	r1, r4, #20
   42808:	str	r0, [sl, #64]	; 0x40
   4280c:	str	fp, [r2, #4]
   42810:	str	fp, [r2, #8]
   42814:	str	fp, [r2, #12]
   42818:	ldm	r1, {r0, r1}
   4281c:	add	r5, r2, #24
   42820:	add	ip, ip, lr
   42824:	stm	r5, {r0, r1}
   42828:	ldrb	r1, [r2, #30]
   4282c:	cmp	ip, #0
   42830:	str	fp, [r2, #16]
   42834:	and	r1, r1, #243	; 0xf3
   42838:	str	fp, [r2, #20]
   4283c:	str	r9, [r2, #32]
   42840:	strb	r1, [r2, #30]
   42844:	str	ip, [r7]
   42848:	beq	429f8 <__assert_fail@plt+0x30404>
   4284c:	str	r6, [r2, #4]
   42850:	ldr	r6, [r7]
   42854:	ldrb	r2, [r6, #26]
   42858:	orr	r2, r2, #4
   4285c:	strb	r2, [r6, #26]
   42860:	ldr	r2, [r4, #4]
   42864:	cmp	r2, #0
   42868:	bne	427dc <__assert_fail@plt+0x301e8>
   4286c:	mov	r1, fp
   42870:	b	4288c <__assert_fail@plt+0x30298>
   42874:	ldr	r2, [r4]
   42878:	ldr	r6, [r6]
   4287c:	cmp	r2, #0
   42880:	mov	r1, r4
   42884:	beq	428e4 <__assert_fail@plt+0x302f0>
   42888:	mov	r4, r2
   4288c:	ldr	r2, [r4, #8]
   42890:	cmp	r2, r1
   42894:	cmpne	r2, #0
   42898:	beq	42874 <__assert_fail@plt+0x30280>
   4289c:	ldr	r1, [sl, #64]	; 0x40
   428a0:	mov	r4, r2
   428a4:	cmp	r1, #31
   428a8:	add	r7, r6, #8
   428ac:	bne	427f0 <__assert_fail@plt+0x301fc>
   428b0:	mov	r0, #996	; 0x3e4
   428b4:	str	r3, [sp, #28]
   428b8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   428bc:	ldr	r3, [sp, #28]
   428c0:	subs	ip, r0, #0
   428c4:	beq	43038 <__assert_fail@plt+0x30a44>
   428c8:	ldr	r1, [sl, #56]	; 0x38
   428cc:	mov	lr, #4
   428d0:	str	r1, [ip]
   428d4:	mov	r0, #1
   428d8:	mov	r2, fp
   428dc:	str	ip, [sl, #56]	; 0x38
   428e0:	b	42800 <__assert_fail@plt+0x3020c>
   428e4:	ldr	r5, [sp, #136]	; 0x88
   428e8:	str	fp, [r8]
   428ec:	str	fp, [r8, #4]
   428f0:	ldr	r2, [sl, #64]	; 0x40
   428f4:	cmp	r2, #31
   428f8:	beq	42a30 <__assert_fail@plt+0x3043c>
   428fc:	lsl	r4, r2, #5
   42900:	ldr	ip, [sl, #56]	; 0x38
   42904:	add	r2, r2, #1
   42908:	add	r6, r4, #4
   4290c:	add	r4, ip, r4
   42910:	str	r2, [sl, #64]	; 0x40
   42914:	mov	r2, #16
   42918:	str	fp, [r4, #4]
   4291c:	str	r3, [r4, #8]
   42920:	str	r5, [r4, #12]
   42924:	strb	r2, [sp, #140]	; 0x8c
   42928:	ldm	r8, {r0, r1}
   4292c:	add	r2, r4, #24
   42930:	add	r6, ip, r6
   42934:	stm	r2, {r0, r1}
   42938:	ldrb	r2, [r4, #30]
   4293c:	cmp	r5, #0
   42940:	str	fp, [r4, #16]
   42944:	and	r2, r2, #243	; 0xf3
   42948:	str	fp, [r4, #20]
   4294c:	str	r9, [r4, #32]
   42950:	strb	r2, [r4, #30]
   42954:	str	r6, [r3]
   42958:	beq	42a04 <__assert_fail@plt+0x30410>
   4295c:	cmp	r6, #0
   42960:	str	r6, [r5]
   42964:	beq	42a04 <__assert_fail@plt+0x30410>
   42968:	str	fp, [r8]
   4296c:	str	fp, [r8, #4]
   42970:	ldr	r1, [sl, #64]	; 0x40
   42974:	cmp	r1, #31
   42978:	beq	42a64 <__assert_fail@plt+0x30470>
   4297c:	lsl	r2, r1, #5
   42980:	add	r3, r2, #4
   42984:	add	r1, r1, #1
   42988:	add	r2, ip, r2
   4298c:	mov	r0, #10
   42990:	str	r1, [sl, #64]	; 0x40
   42994:	str	fp, [r2, #4]
   42998:	str	r6, [r2, #8]
   4299c:	str	fp, [r2, #12]
   429a0:	strb	r0, [sp, #140]	; 0x8c
   429a4:	ldm	r8, {r0, r1}
   429a8:	add	lr, r2, #24
   429ac:	add	r3, ip, r3
   429b0:	stm	lr, {r0, r1}
   429b4:	ldrb	r1, [r2, #30]
   429b8:	cmp	r3, #0
   429bc:	str	fp, [r2, #16]
   429c0:	and	r1, r1, #243	; 0xf3
   429c4:	str	fp, [r2, #20]
   429c8:	str	r9, [r2, #32]
   429cc:	strb	r1, [r2, #30]
   429d0:	str	r3, [r4, #4]
   429d4:	beq	42a04 <__assert_fail@plt+0x30410>
   429d8:	ldr	r2, [sp, #20]
   429dc:	ldr	r1, [sp, #24]
   429e0:	add	r2, r2, #1
   429e4:	cmp	r2, r1
   429e8:	str	r2, [sp, #20]
   429ec:	bgt	42c68 <__assert_fail@plt+0x30674>
   429f0:	ldr	r6, [r5]
   429f4:	b	427d0 <__assert_fail@plt+0x301dc>
   429f8:	mov	r5, ip
   429fc:	b	428e8 <__assert_fail@plt+0x302f4>
   42a00:	str	lr, [r6]
   42a04:	ldr	r2, [sp, #212]	; 0xd4
   42a08:	mov	r3, #12
   42a0c:	str	r3, [r2]
   42a10:	ldr	r3, [sp, #36]	; 0x24
   42a14:	cmp	r3, #0
   42a18:	beq	42670 <__assert_fail@plt+0x3007c>
   42a1c:	mov	r0, r3
   42a20:	bl	3e480 <__assert_fail@plt+0x2be8c>
   42a24:	mov	r3, #0
   42a28:	str	r3, [sp, #36]	; 0x24
   42a2c:	b	42678 <__assert_fail@plt+0x30084>
   42a30:	mov	r0, #996	; 0x3e4
   42a34:	str	r3, [sp, #28]
   42a38:	bl	3a010 <__assert_fail@plt+0x27a1c>
   42a3c:	subs	ip, r0, #0
   42a40:	beq	42a04 <__assert_fail@plt+0x30410>
   42a44:	ldr	r1, [sl, #56]	; 0x38
   42a48:	mov	r6, #4
   42a4c:	str	r1, [ip]
   42a50:	mov	r2, #1
   42a54:	mov	r4, fp
   42a58:	str	ip, [sl, #56]	; 0x38
   42a5c:	ldr	r3, [sp, #28]
   42a60:	b	4290c <__assert_fail@plt+0x30318>
   42a64:	mov	r0, #996	; 0x3e4
   42a68:	bl	3a010 <__assert_fail@plt+0x27a1c>
   42a6c:	subs	ip, r0, #0
   42a70:	beq	42a04 <__assert_fail@plt+0x30410>
   42a74:	ldr	r0, [sl, #56]	; 0x38
   42a78:	mov	r1, #1
   42a7c:	str	r0, [ip]
   42a80:	mov	r3, #4
   42a84:	mov	r2, fp
   42a88:	str	ip, [sl, #56]	; 0x38
   42a8c:	b	42988 <__assert_fail@plt+0x30394>
   42a90:	str	r4, [sp, #20]
   42a94:	ldr	r8, [sp, #44]	; 0x2c
   42a98:	ldr	r4, [sp, #32]
   42a9c:	mvn	r9, #0
   42aa0:	mov	r7, #32768	; 0x8000
   42aa4:	mvn	r6, #1
   42aa8:	mov	r1, r8
   42aac:	ldr	r2, [sp, #40]	; 0x28
   42ab0:	mov	r0, r4
   42ab4:	bl	3da6c <__assert_fail@plt+0x2b478>
   42ab8:	ldrb	ip, [r4, #4]
   42abc:	ldr	r2, [r8, #40]	; 0x28
   42ac0:	cmn	r9, #2
   42ac4:	movne	r1, #0
   42ac8:	moveq	r1, #1
   42acc:	cmp	ip, #2
   42ad0:	add	r0, r2, r0
   42ad4:	str	r0, [r8, #40]	; 0x28
   42ad8:	ldrb	r2, [r4]
   42adc:	beq	42c30 <__assert_fail@plt+0x3063c>
   42ae0:	cmp	ip, #24
   42ae4:	beq	43050 <__assert_fail@plt+0x30a5c>
   42ae8:	cmp	r2, #44	; 0x2c
   42aec:	beq	43170 <__assert_fail@plt+0x30b7c>
   42af0:	cmp	ip, #1
   42af4:	beq	42b00 <__assert_fail@plt+0x3050c>
   42af8:	mov	r9, r6
   42afc:	b	42aa8 <__assert_fail@plt+0x304b4>
   42b00:	sub	r0, r2, #48	; 0x30
   42b04:	uxtb	r1, r0
   42b08:	cmp	r1, #9
   42b0c:	movhi	r1, #0
   42b10:	movls	r1, #1
   42b14:	cmn	r9, #2
   42b18:	moveq	r1, #0
   42b1c:	cmp	r1, #0
   42b20:	beq	42af8 <__assert_fail@plt+0x30504>
   42b24:	cmn	r9, #1
   42b28:	moveq	r9, r0
   42b2c:	beq	42aa8 <__assert_fail@plt+0x304b4>
   42b30:	add	r3, r9, r9, lsl #2
   42b34:	add	r3, r2, r3, lsl #1
   42b38:	ldr	r2, [pc, #2664]	; 435a8 <__assert_fail@plt+0x30fb4>
   42b3c:	cmp	r3, r2
   42b40:	suble	r9, r3, #48	; 0x30
   42b44:	movgt	r9, r7
   42b48:	b	42aa8 <__assert_fail@plt+0x304b4>
   42b4c:	ldr	r3, [sp, #212]	; 0xd4
   42b50:	ldr	r3, [r3]
   42b54:	cmp	r3, #0
   42b58:	bne	42a10 <__assert_fail@plt+0x3041c>
   42b5c:	str	fp, [sp, #36]	; 0x24
   42b60:	ldr	r3, [sp, #52]	; 0x34
   42b64:	cmp	r3, #0
   42b68:	ldr	r3, [sp, #32]
   42b6c:	ldrb	r2, [r3, #4]
   42b70:	beq	42604 <__assert_fail@plt+0x30010>
   42b74:	cmp	r2, #23
   42b78:	cmpne	r2, #11
   42b7c:	bne	42604 <__assert_fail@plt+0x30010>
   42b80:	ldr	r3, [sp, #36]	; 0x24
   42b84:	cmp	r3, #0
   42b88:	beq	42b94 <__assert_fail@plt+0x305a0>
   42b8c:	mov	r0, r3
   42b90:	bl	3e480 <__assert_fail@plt+0x2be8c>
   42b94:	ldr	r2, [sp, #212]	; 0xd4
   42b98:	mov	r3, #13
   42b9c:	str	r3, [r2]
   42ba0:	mov	r3, #0
   42ba4:	str	r3, [sp, #36]	; 0x24
   42ba8:	ldr	r0, [sp, #36]	; 0x24
   42bac:	add	sp, sp, #172	; 0xac
   42bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42bb4:	ldr	r1, [r5, #20]
   42bb8:	mov	r3, r5
   42bbc:	b	42bc4 <__assert_fail@plt+0x305d0>
   42bc0:	mov	r3, r2
   42bc4:	ldr	r2, [r3, #4]
   42bc8:	cmp	r2, #0
   42bcc:	bne	42bc0 <__assert_fail@plt+0x305cc>
   42bd0:	ldr	r2, [r3, #8]
   42bd4:	cmp	r2, #0
   42bd8:	bne	42bc0 <__assert_fail@plt+0x305cc>
   42bdc:	b	42c00 <__assert_fail@plt+0x3060c>
   42be0:	ldr	r2, [r0, #8]
   42be4:	cmp	r3, r2
   42be8:	cmpne	r2, #0
   42bec:	moveq	r3, #1
   42bf0:	movne	r3, #0
   42bf4:	cmp	r3, #0
   42bf8:	mov	r3, r0
   42bfc:	beq	42bc0 <__assert_fail@plt+0x305cc>
   42c00:	ldrb	r2, [r3, #24]
   42c04:	cmp	r2, #17
   42c08:	bne	42c20 <__assert_fail@plt+0x3062c>
   42c0c:	ldr	r2, [r3, #20]
   42c10:	cmp	r1, r2
   42c14:	ldrbeq	r2, [r3, #26]
   42c18:	orreq	r2, r2, #8
   42c1c:	strbeq	r2, [r3, #26]
   42c20:	ldr	r0, [r3]
   42c24:	cmp	r0, #0
   42c28:	bne	42be0 <__assert_fail@plt+0x305ec>
   42c2c:	b	42720 <__assert_fail@plt+0x3012c>
   42c30:	mov	r3, ip
   42c34:	ldr	r2, [sp, #60]	; 0x3c
   42c38:	cmp	r2, #0
   42c3c:	beq	43908 <__assert_fail@plt+0x31314>
   42c40:	add	r3, sp, #104	; 0x68
   42c44:	ldr	r2, [sp, #32]
   42c48:	ldm	r3, {r0, r1}
   42c4c:	ldr	r3, [sp, #44]	; 0x2c
   42c50:	str	r5, [r3, #40]	; 0x28
   42c54:	mov	r3, #1
   42c58:	stm	r2, {r0, r1}
   42c5c:	ldr	r0, [sp, #36]	; 0x24
   42c60:	strb	r3, [r2, #4]
   42c64:	b	42c9c <__assert_fail@plt+0x306a8>
   42c68:	ldr	r8, [sp, #56]	; 0x38
   42c6c:	cmp	r8, #0
   42c70:	beq	43048 <__assert_fail@plt+0x30a54>
   42c74:	ldr	r0, [sp, #48]	; 0x30
   42c78:	mov	ip, #16
   42c7c:	str	r0, [sp]
   42c80:	mov	r2, r8
   42c84:	str	fp, [r0, #4]
   42c88:	str	fp, [r0]
   42c8c:	add	r1, sl, #64	; 0x40
   42c90:	add	r0, sl, #56	; 0x38
   42c94:	strb	ip, [sp, #140]	; 0x8c
   42c98:	bl	3b8ac <__assert_fail@plt+0x292b8>
   42c9c:	ldr	r3, [sp, #212]	; 0xd4
   42ca0:	ldr	r3, [r3]
   42ca4:	adds	r3, r3, #0
   42ca8:	movne	r3, #1
   42cac:	cmp	r0, #0
   42cb0:	movne	r3, #0
   42cb4:	cmp	r3, #0
   42cb8:	bne	42a10 <__assert_fail@plt+0x3041c>
   42cbc:	str	r0, [sp, #36]	; 0x24
   42cc0:	b	42b60 <__assert_fail@plt+0x3056c>
   42cc4:	cmp	r9, #1
   42cc8:	beq	4385c <__assert_fail@plt+0x31268>
   42ccc:	ldr	r3, [sp, #36]	; 0x24
   42cd0:	str	r9, [sp, #48]	; 0x30
   42cd4:	mov	r2, r3
   42cd8:	ldr	r8, [r3]
   42cdc:	mov	r5, r3
   42ce0:	mov	r3, #2
   42ce4:	str	r3, [sp, #20]
   42ce8:	add	r3, sp, #136	; 0x88
   42cec:	mvn	r7, #0
   42cf0:	mov	r9, r3
   42cf4:	mov	r4, r5
   42cf8:	mov	r6, r9
   42cfc:	b	42d08 <__assert_fail@plt+0x30714>
   42d00:	mov	r4, r3
   42d04:	add	r6, r8, #4
   42d08:	ldr	r1, [sl, #64]	; 0x40
   42d0c:	cmp	r1, #31
   42d10:	beq	42dd4 <__assert_fail@plt+0x307e0>
   42d14:	lsl	r3, r1, #5
   42d18:	ldr	ip, [sl, #56]	; 0x38
   42d1c:	add	r0, r1, #1
   42d20:	add	lr, r3, #4
   42d24:	add	r3, ip, r3
   42d28:	add	r1, r4, #20
   42d2c:	str	r0, [sl, #64]	; 0x40
   42d30:	str	fp, [r3, #4]
   42d34:	str	fp, [r3, #8]
   42d38:	str	fp, [r3, #12]
   42d3c:	ldm	r1, {r0, r1}
   42d40:	add	r5, r3, #24
   42d44:	add	ip, ip, lr
   42d48:	stm	r5, {r0, r1}
   42d4c:	ldrb	r1, [r3, #30]
   42d50:	cmp	ip, #0
   42d54:	str	fp, [r3, #16]
   42d58:	and	r1, r1, #243	; 0xf3
   42d5c:	str	fp, [r3, #20]
   42d60:	str	r7, [r3, #32]
   42d64:	strb	r1, [r3, #30]
   42d68:	str	ip, [r6]
   42d6c:	beq	42fd0 <__assert_fail@plt+0x309dc>
   42d70:	str	r8, [r3, #4]
   42d74:	ldr	r8, [r6]
   42d78:	ldrb	r3, [r8, #26]
   42d7c:	orr	r3, r3, #4
   42d80:	strb	r3, [r8, #26]
   42d84:	ldr	r3, [r4, #4]
   42d88:	cmp	r3, #0
   42d8c:	bne	42d00 <__assert_fail@plt+0x3070c>
   42d90:	mov	r1, fp
   42d94:	b	42db0 <__assert_fail@plt+0x307bc>
   42d98:	ldr	r3, [r4]
   42d9c:	ldr	r8, [r8]
   42da0:	cmp	r3, #0
   42da4:	mov	r1, r4
   42da8:	beq	42e08 <__assert_fail@plt+0x30814>
   42dac:	mov	r4, r3
   42db0:	ldr	r3, [r4, #8]
   42db4:	cmp	r3, #0
   42db8:	cmpne	r3, r1
   42dbc:	beq	42d98 <__assert_fail@plt+0x307a4>
   42dc0:	ldr	r1, [sl, #64]	; 0x40
   42dc4:	mov	r4, r3
   42dc8:	cmp	r1, #31
   42dcc:	add	r6, r8, #8
   42dd0:	bne	42d14 <__assert_fail@plt+0x30720>
   42dd4:	mov	r0, #996	; 0x3e4
   42dd8:	str	r2, [sp, #28]
   42ddc:	bl	3a010 <__assert_fail@plt+0x27a1c>
   42de0:	ldr	r2, [sp, #28]
   42de4:	subs	ip, r0, #0
   42de8:	beq	43850 <__assert_fail@plt+0x3125c>
   42dec:	ldr	r1, [sl, #56]	; 0x38
   42df0:	mov	lr, #4
   42df4:	str	r1, [ip]
   42df8:	mov	r0, #1
   42dfc:	mov	r3, fp
   42e00:	str	ip, [sl, #56]	; 0x38
   42e04:	b	42d24 <__assert_fail@plt+0x30730>
   42e08:	ldr	r5, [sp, #136]	; 0x88
   42e0c:	str	fp, [r9]
   42e10:	str	fp, [r9, #4]
   42e14:	ldr	r1, [sl, #64]	; 0x40
   42e18:	cmp	r1, #31
   42e1c:	beq	43004 <__assert_fail@plt+0x30a10>
   42e20:	lsl	r3, r1, #5
   42e24:	ldr	r8, [sl, #56]	; 0x38
   42e28:	add	r1, r1, #1
   42e2c:	add	lr, r3, #4
   42e30:	add	r3, r8, r3
   42e34:	str	r1, [sl, #64]	; 0x40
   42e38:	mov	r1, #16
   42e3c:	str	fp, [r3, #4]
   42e40:	str	r2, [r3, #8]
   42e44:	str	r5, [r3, #12]
   42e48:	strb	r1, [sp, #140]	; 0x8c
   42e4c:	ldm	r9, {r0, r1}
   42e50:	add	ip, r3, #24
   42e54:	add	r8, r8, lr
   42e58:	stm	ip, {r0, r1}
   42e5c:	ldrb	r1, [r3, #30]
   42e60:	cmp	r5, #0
   42e64:	str	fp, [r3, #16]
   42e68:	and	r1, r1, #243	; 0xf3
   42e6c:	str	fp, [r3, #20]
   42e70:	str	r7, [r3, #32]
   42e74:	strb	r1, [r3, #30]
   42e78:	str	r8, [r2]
   42e7c:	beq	42a04 <__assert_fail@plt+0x30410>
   42e80:	cmp	r8, #0
   42e84:	str	r8, [r5]
   42e88:	beq	42a04 <__assert_fail@plt+0x30410>
   42e8c:	ldr	r3, [sp, #20]
   42e90:	ldr	r2, [sp, #48]	; 0x30
   42e94:	add	r3, r3, #1
   42e98:	cmp	r3, r2
   42e9c:	str	r3, [sp, #20]
   42ea0:	mov	r2, r8
   42ea4:	ble	42cf4 <__assert_fail@plt+0x30700>
   42ea8:	ldr	r9, [sp, #48]	; 0x30
   42eac:	ldr	r3, [sp, #24]
   42eb0:	cmp	r9, r3
   42eb4:	beq	43044 <__assert_fail@plt+0x30a50>
   42eb8:	add	r3, sp, #136	; 0x88
   42ebc:	str	r3, [sp, #48]	; 0x30
   42ec0:	ldr	r4, [r5]
   42ec4:	mov	r6, r3
   42ec8:	mvn	r7, #0
   42ecc:	b	42ed8 <__assert_fail@plt+0x308e4>
   42ed0:	mov	r5, r3
   42ed4:	add	r6, r4, #4
   42ed8:	ldr	r2, [sl, #64]	; 0x40
   42edc:	cmp	r2, #31
   42ee0:	beq	42fa4 <__assert_fail@plt+0x309b0>
   42ee4:	lsl	r3, r2, #5
   42ee8:	ldr	lr, [sl, #56]	; 0x38
   42eec:	add	r1, r2, #1
   42ef0:	add	ip, r3, #4
   42ef4:	add	r3, lr, r3
   42ef8:	add	r2, r5, #20
   42efc:	str	r1, [sl, #64]	; 0x40
   42f00:	str	fp, [r3, #4]
   42f04:	str	fp, [r3, #8]
   42f08:	str	fp, [r3, #12]
   42f0c:	ldm	r2, {r0, r1}
   42f10:	add	r2, r3, #24
   42f14:	add	ip, lr, ip
   42f18:	stm	r2, {r0, r1}
   42f1c:	ldrb	r2, [r3, #30]
   42f20:	cmp	ip, #0
   42f24:	str	fp, [r3, #16]
   42f28:	and	r2, r2, #243	; 0xf3
   42f2c:	str	fp, [r3, #20]
   42f30:	str	r7, [r3, #32]
   42f34:	strb	r2, [r3, #30]
   42f38:	str	ip, [r6]
   42f3c:	beq	42a04 <__assert_fail@plt+0x30410>
   42f40:	str	r4, [r3, #4]
   42f44:	ldr	r4, [r6]
   42f48:	ldrb	r3, [r4, #26]
   42f4c:	orr	r3, r3, #4
   42f50:	strb	r3, [r4, #26]
   42f54:	ldr	r3, [r5, #4]
   42f58:	cmp	r3, #0
   42f5c:	bne	42ed0 <__assert_fail@plt+0x308dc>
   42f60:	mov	r2, fp
   42f64:	b	42f80 <__assert_fail@plt+0x3098c>
   42f68:	ldr	r3, [r5]
   42f6c:	ldr	r4, [r4]
   42f70:	cmp	r3, #0
   42f74:	mov	r2, r5
   42f78:	beq	43294 <__assert_fail@plt+0x30ca0>
   42f7c:	mov	r5, r3
   42f80:	ldr	r3, [r5, #8]
   42f84:	cmp	r3, r2
   42f88:	cmpne	r3, #0
   42f8c:	beq	42f68 <__assert_fail@plt+0x30974>
   42f90:	ldr	r2, [sl, #64]	; 0x40
   42f94:	mov	r5, r3
   42f98:	cmp	r2, #31
   42f9c:	add	r6, r4, #8
   42fa0:	bne	42ee4 <__assert_fail@plt+0x308f0>
   42fa4:	mov	r0, #996	; 0x3e4
   42fa8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   42fac:	subs	lr, r0, #0
   42fb0:	beq	42a00 <__assert_fail@plt+0x3040c>
   42fb4:	ldr	r2, [sl, #56]	; 0x38
   42fb8:	mov	r1, #1
   42fbc:	str	r2, [lr]
   42fc0:	mov	ip, #4
   42fc4:	mov	r3, fp
   42fc8:	str	lr, [sl, #56]	; 0x38
   42fcc:	b	42ef4 <__assert_fail@plt+0x30900>
   42fd0:	mov	r5, ip
   42fd4:	b	42e0c <__assert_fail@plt+0x30818>
   42fd8:	mov	r0, #996	; 0x3e4
   42fdc:	bl	3a010 <__assert_fail@plt+0x27a1c>
   42fe0:	subs	r3, r0, #0
   42fe4:	beq	42a04 <__assert_fail@plt+0x30410>
   42fe8:	ldr	r0, [sl, #56]	; 0x38
   42fec:	mov	lr, #4
   42ff0:	str	r0, [r3]
   42ff4:	mov	r1, #1
   42ff8:	mov	r2, fp
   42ffc:	str	r3, [sl, #56]	; 0x38
   43000:	b	42758 <__assert_fail@plt+0x30164>
   43004:	mov	r0, #996	; 0x3e4
   43008:	str	r2, [sp, #28]
   4300c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   43010:	subs	r8, r0, #0
   43014:	beq	42a04 <__assert_fail@plt+0x30410>
   43018:	ldr	r0, [sl, #56]	; 0x38
   4301c:	mov	lr, #4
   43020:	str	r0, [r8]
   43024:	mov	r1, #1
   43028:	mov	r3, fp
   4302c:	str	r8, [sl, #56]	; 0x38
   43030:	ldr	r2, [sp, #28]
   43034:	b	42e30 <__assert_fail@plt+0x3083c>
   43038:	str	ip, [r7]
   4303c:	mov	r5, fp
   43040:	b	428e8 <__assert_fail@plt+0x302f4>
   43044:	mov	r3, r8
   43048:	str	r3, [sp, #36]	; 0x24
   4304c:	b	42b60 <__assert_fail@plt+0x3056c>
   43050:	cmn	r9, #1
   43054:	beq	4319c <__assert_fail@plt+0x30ba8>
   43058:	cmn	r9, #2
   4305c:	strne	r9, [sp, #24]
   43060:	beq	43190 <__assert_fail@plt+0x30b9c>
   43064:	ldr	r3, [sp, #24]
   43068:	cmn	r3, #1
   4306c:	beq	431ac <__assert_fail@plt+0x30bb8>
   43070:	ldr	r2, [pc, #1332]	; 435ac <__assert_fail@plt+0x30fb8>
   43074:	cmp	r3, r2
   43078:	movle	r3, #0
   4307c:	movgt	r3, #1
   43080:	cmp	r3, #0
   43084:	bne	431c4 <__assert_fail@plt+0x30bd0>
   43088:	ldr	r4, [sp, #44]	; 0x2c
   4308c:	ldr	r2, [sp, #40]	; 0x28
   43090:	mov	r1, r4
   43094:	ldr	r0, [sp, #32]
   43098:	bl	3da6c <__assert_fail@plt+0x2b478>
   4309c:	ldr	r3, [r4, #40]	; 0x28
   430a0:	mov	r2, r4
   430a4:	ldr	r4, [sp, #36]	; 0x24
   430a8:	cmp	r4, #0
   430ac:	add	r3, r3, r0
   430b0:	str	r3, [r2, #40]	; 0x28
   430b4:	beq	42b4c <__assert_fail@plt+0x30558>
   430b8:	ldr	r3, [sp, #24]
   430bc:	orrs	r3, r9, r3
   430c0:	beq	430cc <__assert_fail@plt+0x30ad8>
   430c4:	b	426fc <__assert_fail@plt+0x30108>
   430c8:	mov	r4, r3
   430cc:	ldr	r3, [r4, #4]
   430d0:	cmp	r3, #0
   430d4:	bne	430c8 <__assert_fail@plt+0x30ad4>
   430d8:	ldr	r3, [r4, #8]
   430dc:	cmp	r3, #0
   430e0:	bne	430c8 <__assert_fail@plt+0x30ad4>
   430e4:	b	4311c <__assert_fail@plt+0x30b28>
   430e8:	ldr	r0, [r4, #20]
   430ec:	bl	376d0 <__assert_fail@plt+0x250dc>
   430f0:	ldr	r2, [r4]
   430f4:	cmp	r2, #0
   430f8:	beq	42b4c <__assert_fail@plt+0x30558>
   430fc:	ldr	r3, [r2, #8]
   43100:	cmp	r3, #0
   43104:	cmpne	r4, r3
   43108:	moveq	r4, #1
   4310c:	movne	r4, #0
   43110:	cmp	r4, #0
   43114:	mov	r4, r2
   43118:	beq	430c8 <__assert_fail@plt+0x30ad4>
   4311c:	ldr	r3, [r4, #24]
   43120:	bic	r3, r3, #-16777216	; 0xff000000
   43124:	bic	r3, r3, #16449536	; 0xfb0000
   43128:	bic	r3, r3, #65280	; 0xff00
   4312c:	cmp	r3, #6
   43130:	beq	43140 <__assert_fail@plt+0x30b4c>
   43134:	cmp	r3, #3
   43138:	bne	430f0 <__assert_fail@plt+0x30afc>
   4313c:	b	430e8 <__assert_fail@plt+0x30af4>
   43140:	ldr	r5, [r4, #20]
   43144:	ldr	r0, [r5]
   43148:	bl	376d0 <__assert_fail@plt+0x250dc>
   4314c:	ldr	r0, [r5, #4]
   43150:	bl	376d0 <__assert_fail@plt+0x250dc>
   43154:	ldr	r0, [r5, #8]
   43158:	bl	376d0 <__assert_fail@plt+0x250dc>
   4315c:	ldr	r0, [r5, #12]
   43160:	bl	376d0 <__assert_fail@plt+0x250dc>
   43164:	mov	r0, r5
   43168:	bl	376d0 <__assert_fail@plt+0x250dc>
   4316c:	b	430f0 <__assert_fail@plt+0x30afc>
   43170:	cmn	r9, #1
   43174:	ldr	r4, [sp, #20]
   43178:	beq	431d4 <__assert_fail@plt+0x30be0>
   4317c:	cmn	r9, #2
   43180:	beq	43190 <__assert_fail@plt+0x30b9c>
   43184:	cmp	ip, #1
   43188:	moveq	r4, r1
   4318c:	beq	431e0 <__assert_fail@plt+0x30bec>
   43190:	ldr	r3, [sp, #60]	; 0x3c
   43194:	cmp	r3, #0
   43198:	bne	42c40 <__assert_fail@plt+0x3064c>
   4319c:	ldr	r2, [sp, #212]	; 0xd4
   431a0:	mov	r3, #10
   431a4:	str	r3, [r2]
   431a8:	b	42a10 <__assert_fail@plt+0x3041c>
   431ac:	add	r3, r3, #32768	; 0x8000
   431b0:	cmp	r9, r3
   431b4:	movle	r3, #0
   431b8:	movgt	r3, #1
   431bc:	cmp	r3, #0
   431c0:	beq	43088 <__assert_fail@plt+0x30a94>
   431c4:	ldr	r2, [sp, #212]	; 0xd4
   431c8:	mov	r3, #15
   431cc:	str	r3, [r2]
   431d0:	b	42a10 <__assert_fail@plt+0x3041c>
   431d4:	cmp	ip, #1
   431d8:	bne	4319c <__assert_fail@plt+0x30ba8>
   431dc:	mov	r9, fp
   431e0:	mvn	r3, #0
   431e4:	str	r5, [sp, #20]
   431e8:	ldr	r0, [sp, #32]
   431ec:	mov	r5, r4
   431f0:	ldr	r4, [sp, #44]	; 0x2c
   431f4:	mov	r7, #32768	; 0x8000
   431f8:	mvn	r6, #1
   431fc:	mov	r8, r3
   43200:	ldr	r2, [sp, #40]	; 0x28
   43204:	mov	r1, r4
   43208:	bl	3da6c <__assert_fail@plt+0x2b478>
   4320c:	ldr	r1, [sp, #32]
   43210:	ldr	r2, [r4, #40]	; 0x28
   43214:	ldrb	r3, [r1, #4]
   43218:	cmp	r3, #2
   4321c:	add	r2, r2, r0
   43220:	str	r2, [r4, #40]	; 0x28
   43224:	beq	43868 <__assert_fail@plt+0x31274>
   43228:	ldrb	r2, [r1]
   4322c:	cmp	r2, #44	; 0x2c
   43230:	cmpne	r3, #24
   43234:	beq	438bc <__assert_fail@plt+0x312c8>
   43238:	cmp	r3, #1
   4323c:	movne	r8, r6
   43240:	movne	r0, r1
   43244:	bne	43200 <__assert_fail@plt+0x30c0c>
   43248:	sub	r1, r2, #48	; 0x30
   4324c:	uxtb	r3, r1
   43250:	cmp	r3, #9
   43254:	movhi	r3, #0
   43258:	movls	r3, #1
   4325c:	cmn	r8, #2
   43260:	moveq	r3, #0
   43264:	cmp	r3, #0
   43268:	beq	442b0 <__assert_fail@plt+0x31cbc>
   4326c:	cmn	r8, #1
   43270:	beq	442a4 <__assert_fail@plt+0x31cb0>
   43274:	add	r8, r8, r8, lsl #2
   43278:	ldr	r3, [pc, #808]	; 435a8 <__assert_fail@plt+0x30fb4>
   4327c:	add	r2, r2, r8, lsl #1
   43280:	cmp	r2, r3
   43284:	bgt	43920 <__assert_fail@plt+0x3132c>
   43288:	sub	r8, r2, #48	; 0x30
   4328c:	ldr	r0, [sp, #32]
   43290:	b	43200 <__assert_fail@plt+0x30c0c>
   43294:	ldr	r5, [sp, #136]	; 0x88
   43298:	cmp	r5, #0
   4329c:	bne	42714 <__assert_fail@plt+0x30120>
   432a0:	b	42a04 <__assert_fail@plt+0x30410>
   432a4:	ldr	r3, [sp, #32]
   432a8:	ldr	r2, [sl, #84]	; 0x54
   432ac:	ldr	r1, [r3]
   432b0:	mov	r3, #1
   432b4:	lsl	r3, r3, r1
   432b8:	ands	r2, r3, r2
   432bc:	beq	44290 <__assert_fail@plt+0x31c9c>
   432c0:	ldr	r1, [sl, #80]	; 0x50
   432c4:	ldr	r2, [sp, #32]
   432c8:	orr	r3, r1, r3
   432cc:	str	r3, [sl, #80]	; 0x50
   432d0:	add	r1, sl, #64	; 0x40
   432d4:	add	r0, sl, #56	; 0x38
   432d8:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   432dc:	subs	r3, r0, #0
   432e0:	str	r3, [sp, #36]	; 0x24
   432e4:	beq	43490 <__assert_fail@plt+0x30e9c>
   432e8:	ldrb	r2, [sl, #88]	; 0x58
   432ec:	ldr	r3, [sl, #76]	; 0x4c
   432f0:	orr	r2, r2, #2
   432f4:	add	r3, r3, #1
   432f8:	strb	r2, [sl, #88]	; 0x58
   432fc:	str	r3, [sl, #76]	; 0x4c
   43300:	b	425c4 <__assert_fail@plt+0x2ffd0>
   43304:	ldr	r3, [sp, #44]	; 0x2c
   43308:	sub	r2, r2, #33	; 0x21
   4330c:	clz	r2, r2
   43310:	ldr	r1, [r3, #64]	; 0x40
   43314:	ldr	r3, [sp, #212]	; 0xd4
   43318:	lsr	r2, r2, #5
   4331c:	str	r2, [sp]
   43320:	str	r3, [sp, #4]
   43324:	ldr	r2, [pc, #644]	; 435b0 <__assert_fail@plt+0x30fbc>
   43328:	ldr	r3, [pc, #644]	; 435b4 <__assert_fail@plt+0x30fc0>
   4332c:	mov	r0, sl
   43330:	bl	42088 <__assert_fail@plt+0x2fa94>
   43334:	ldr	r3, [sp, #212]	; 0xd4
   43338:	ldr	r3, [r3]
   4333c:	adds	r3, r3, #0
   43340:	movne	r3, #1
   43344:	cmp	r0, #0
   43348:	movne	r3, #0
   4334c:	cmp	r3, #0
   43350:	str	r0, [sp, #36]	; 0x24
   43354:	beq	425c4 <__assert_fail@plt+0x2ffd0>
   43358:	b	42670 <__assert_fail@plt+0x3007c>
   4335c:	ldr	r2, [sp, #32]
   43360:	add	r1, sl, #64	; 0x40
   43364:	add	r0, sl, #56	; 0x38
   43368:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   4336c:	subs	r3, r0, #0
   43370:	str	r3, [sp, #36]	; 0x24
   43374:	beq	43490 <__assert_fail@plt+0x30e9c>
   43378:	ldr	r3, [sl, #92]	; 0x5c
   4337c:	cmp	r3, #1
   43380:	ldrbgt	r3, [sl, #88]	; 0x58
   43384:	orrgt	r3, r3, #2
   43388:	strbgt	r3, [sl, #88]	; 0x58
   4338c:	b	425c4 <__assert_fail@plt+0x2ffd0>
   43390:	ldr	r3, [sp, #44]	; 0x2c
   43394:	sub	r2, r2, #35	; 0x23
   43398:	clz	r2, r2
   4339c:	ldr	r1, [r3, #64]	; 0x40
   433a0:	ldr	r3, [sp, #212]	; 0xd4
   433a4:	lsr	r2, r2, #5
   433a8:	str	r2, [sp]
   433ac:	str	r3, [sp, #4]
   433b0:	ldr	r2, [pc, #512]	; 435b8 <__assert_fail@plt+0x30fc4>
   433b4:	ldr	r3, [pc, #512]	; 435bc <__assert_fail@plt+0x30fc8>
   433b8:	b	4332c <__assert_fail@plt+0x30d38>
   433bc:	add	r5, sl, #56	; 0x38
   433c0:	add	r6, sl, #64	; 0x40
   433c4:	mov	r0, r5
   433c8:	mov	r1, r6
   433cc:	ldr	r2, [sp, #32]
   433d0:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   433d4:	subs	r3, r0, #0
   433d8:	str	r3, [sp, #36]	; 0x24
   433dc:	beq	43490 <__assert_fail@plt+0x30e9c>
   433e0:	ldr	r3, [sl, #92]	; 0x5c
   433e4:	cmp	r3, #1
   433e8:	ble	425c4 <__assert_fail@plt+0x2ffd0>
   433ec:	ldr	r8, [sp, #44]	; 0x2c
   433f0:	add	r4, sp, #136	; 0x88
   433f4:	mov	r7, #0
   433f8:	mov	r9, #16
   433fc:	ldr	r3, [r8, #40]	; 0x28
   43400:	ldr	r2, [r8, #56]	; 0x38
   43404:	cmp	r2, r3
   43408:	ble	425c4 <__assert_fail@plt+0x2ffd0>
   4340c:	ldr	r2, [r8, #28]
   43410:	cmp	r3, r2
   43414:	beq	425c4 <__assert_fail@plt+0x2ffd0>
   43418:	ldr	r2, [r8, #8]
   4341c:	ldr	r3, [r2, r3, lsl #2]
   43420:	cmn	r3, #1
   43424:	bne	425c4 <__assert_fail@plt+0x2ffd0>
   43428:	ldr	fp, [sp, #32]
   4342c:	ldr	r2, [sp, #40]	; 0x28
   43430:	mov	r1, r8
   43434:	mov	r0, fp
   43438:	bl	3da6c <__assert_fail@plt+0x2b478>
   4343c:	ldr	r3, [r8, #40]	; 0x28
   43440:	mov	r2, fp
   43444:	mov	r1, r6
   43448:	add	r3, r3, r0
   4344c:	str	r3, [r8, #40]	; 0x28
   43450:	mov	r0, r5
   43454:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   43458:	str	r4, [sp]
   4345c:	ldr	r2, [sp, #36]	; 0x24
   43460:	str	r7, [r4, #4]
   43464:	mov	r1, r6
   43468:	str	r7, [r4]
   4346c:	strb	r9, [sp, #140]	; 0x8c
   43470:	mov	fp, r0
   43474:	mov	r3, r0
   43478:	mov	r0, r5
   4347c:	bl	3b8ac <__assert_fail@plt+0x292b8>
   43480:	cmp	r0, #0
   43484:	cmpne	fp, #0
   43488:	str	r0, [sp, #36]	; 0x24
   4348c:	bne	433fc <__assert_fail@plt+0x30e08>
   43490:	ldr	r2, [sp, #212]	; 0xd4
   43494:	mov	r3, #12
   43498:	str	r3, [r2]
   4349c:	mov	r3, #0
   434a0:	str	r3, [sp, #36]	; 0x24
   434a4:	b	4260c <__assert_fail@plt+0x30018>
   434a8:	ldr	r3, [sp, #32]
   434ac:	ldr	r2, [r3]
   434b0:	ldr	r3, [pc, #264]	; 435c0 <__assert_fail@plt+0x30fcc>
   434b4:	and	r3, r3, r2
   434b8:	cmp	r3, #0
   434bc:	beq	434cc <__assert_fail@plt+0x30ed8>
   434c0:	ldrb	r3, [sl, #88]	; 0x58
   434c4:	ands	r4, r3, #16
   434c8:	beq	439f4 <__assert_fail@plt+0x31400>
   434cc:	sub	r3, r2, #256	; 0x100
   434d0:	bics	r3, r3, #256	; 0x100
   434d4:	bne	44434 <__assert_fail@plt+0x31e40>
   434d8:	cmp	r2, #256	; 0x100
   434dc:	beq	44400 <__assert_fail@plt+0x31e0c>
   434e0:	ldr	r6, [sp, #32]
   434e4:	mov	r3, #5
   434e8:	add	r5, sl, #56	; 0x38
   434ec:	add	sl, sl, #64	; 0x40
   434f0:	str	r3, [r6]
   434f4:	mov	r2, r6
   434f8:	mov	r1, sl
   434fc:	mov	r0, r5
   43500:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   43504:	mov	r3, #10
   43508:	str	r3, [r6]
   4350c:	mov	r4, r0
   43510:	ldr	r2, [sp, #32]
   43514:	mov	r1, sl
   43518:	mov	r0, r5
   4351c:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   43520:	mov	r2, #0
   43524:	add	ip, sp, #136	; 0x88
   43528:	str	r2, [sp, #140]	; 0x8c
   4352c:	str	ip, [sp]
   43530:	str	r2, [sp, #136]	; 0x88
   43534:	mov	ip, #10
   43538:	mov	r1, sl
   4353c:	mov	r2, r4
   43540:	strb	ip, [sp, #140]	; 0x8c
   43544:	mov	r7, r0
   43548:	mov	r3, r7
   4354c:	mov	r0, r5
   43550:	bl	3b8ac <__assert_fail@plt+0x292b8>
   43554:	cmp	r7, #0
   43558:	cmpne	r4, #0
   4355c:	moveq	r3, #1
   43560:	movne	r3, #0
   43564:	cmp	r0, #0
   43568:	orreq	r3, r3, #1
   4356c:	cmp	r3, #0
   43570:	str	r0, [sp, #36]	; 0x24
   43574:	bne	43490 <__assert_fail@plt+0x30e9c>
   43578:	ldr	r4, [sp, #44]	; 0x2c
   4357c:	ldr	r2, [sp, #40]	; 0x28
   43580:	ldr	r0, [sp, #32]
   43584:	mov	r1, r4
   43588:	bl	3da6c <__assert_fail@plt+0x2b478>
   4358c:	ldr	r3, [r4, #40]	; 0x28
   43590:	add	r3, r3, r0
   43594:	str	r3, [r4, #40]	; 0x28
   43598:	ldr	r0, [sp, #36]	; 0x24
   4359c:	add	sp, sp, #172	; 0xac
   435a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   435a4:	addeq	r0, ip, r0, lsl #16
   435a8:	andeq	r8, r0, r0, lsr r0
   435ac:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   435b0:	andeq	r3, r5, r0, lsr #25
   435b4:	andeq	r3, r5, r0, ror #25
   435b8:			; <UNDEFINED> instruction: 0x00053cb0
   435bc:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   435c0:	andeq	r0, r0, pc, lsl #6
   435c4:	mvnseq	r0, #0
   435c8:	mov	r3, #0
   435cc:	mov	r1, #1
   435d0:	mov	r0, #32
   435d4:	str	r3, [sp, #76]	; 0x4c
   435d8:	bl	37128 <__assert_fail@plt+0x24b34>
   435dc:	mov	r1, #1
   435e0:	mov	fp, r0
   435e4:	mov	r0, #40	; 0x28
   435e8:	bl	37128 <__assert_fail@plt+0x24b34>
   435ec:	cmp	r0, #0
   435f0:	cmpne	fp, #0
   435f4:	moveq	r3, #1
   435f8:	movne	r3, #0
   435fc:	mov	r9, r0
   43600:	str	r3, [sp, #24]
   43604:	beq	439d4 <__assert_fail@plt+0x313e0>
   43608:	ldr	r4, [sp, #32]
   4360c:	ldr	r2, [sp, #40]	; 0x28
   43610:	ldr	r1, [sp, #44]	; 0x2c
   43614:	mov	r0, r4
   43618:	bl	3ab74 <__assert_fail@plt+0x28580>
   4361c:	ldrb	r3, [r4, #4]
   43620:	cmp	r3, #2
   43624:	mov	r8, r0
   43628:	beq	43980 <__assert_fail@plt+0x3138c>
   4362c:	cmp	r3, #25
   43630:	beq	4392c <__assert_fail@plt+0x31338>
   43634:	ldr	r2, [sp, #24]
   43638:	str	r2, [sp, #48]	; 0x30
   4363c:	cmp	r3, #21
   43640:	moveq	r3, #1
   43644:	ldreq	r2, [sp, #32]
   43648:	ldr	r6, [sp, #44]	; 0x2c
   4364c:	ldr	r4, [sp, #32]
   43650:	strbeq	r3, [r2, #4]
   43654:	mov	r3, #0
   43658:	mov	r2, r3
   4365c:	str	r3, [sp, #36]	; 0x24
   43660:	ldr	r3, [sp, #40]	; 0x28
   43664:	mov	lr, #1
   43668:	str	r2, [sp, #28]
   4366c:	lsr	r3, r3, #16
   43670:	and	r3, r3, lr
   43674:	str	r3, [sp, #68]	; 0x44
   43678:	ldr	r3, [r6, #80]	; 0x50
   4367c:	add	r2, sp, #104	; 0x68
   43680:	cmp	r3, #1
   43684:	str	r3, [sp, #52]	; 0x34
   43688:	str	r2, [sp, #84]	; 0x54
   4368c:	ldr	r3, [r6, #40]	; 0x28
   43690:	beq	4387c <__assert_fail@plt+0x31288>
   43694:	ldr	r2, [r6, #28]
   43698:	add	r1, r3, #1
   4369c:	cmp	r1, r2
   436a0:	bge	4387c <__assert_fail@plt+0x31288>
   436a4:	ldr	ip, [r6, #8]
   436a8:	add	r0, ip, r1, lsl #2
   436ac:	ldr	r1, [ip, r1, lsl #2]
   436b0:	cmn	r1, #1
   436b4:	subeq	r2, r2, r3
   436b8:	moveq	ip, r0
   436bc:	moveq	r1, #1
   436c0:	beq	436d4 <__assert_fail@plt+0x310e0>
   436c4:	b	4387c <__assert_fail@plt+0x31288>
   436c8:	ldr	r5, [ip, #4]!
   436cc:	cmn	r5, #1
   436d0:	bne	436e4 <__assert_fail@plt+0x310f0>
   436d4:	add	r1, r1, #1
   436d8:	cmp	r1, r2
   436dc:	add	lr, r1, r3
   436e0:	bne	436c8 <__assert_fail@plt+0x310d4>
   436e4:	ldr	r3, [r0, #-4]
   436e8:	mov	r5, #1
   436ec:	str	lr, [r6, #40]	; 0x28
   436f0:	str	r3, [sp, #84]	; 0x54
   436f4:	ldr	r2, [sp, #40]	; 0x28
   436f8:	mov	r1, r6
   436fc:	mov	r0, r4
   43700:	bl	3ab74 <__assert_fail@plt+0x28580>
   43704:	mov	r8, r0
   43708:	ldrb	r3, [r4, #4]
   4370c:	cmp	r3, #2
   43710:	beq	43fe8 <__assert_fail@plt+0x319f4>
   43714:	cmp	r3, #22
   43718:	beq	43db4 <__assert_fail@plt+0x317c0>
   4371c:	cmp	r5, #2
   43720:	beq	43f3c <__assert_fail@plt+0x31948>
   43724:	cmp	r5, #3
   43728:	beq	43f3c <__assert_fail@plt+0x31948>
   4372c:	cmp	r5, #1
   43730:	beq	43d8c <__assert_fail@plt+0x31798>
   43734:	ldrb	r3, [sp, #84]	; 0x54
   43738:	mov	r0, #1
   4373c:	and	r1, r3, #31
   43740:	asr	r3, r3, #5
   43744:	ldr	r2, [fp, r3, lsl #2]
   43748:	orr	r2, r2, r0, lsl r1
   4374c:	str	r2, [fp, r3, lsl #2]
   43750:	ldrb	r3, [r4, #4]
   43754:	cmp	r3, #2
   43758:	beq	43fe8 <__assert_fail@plt+0x319f4>
   4375c:	cmp	r3, #21
   43760:	beq	43a48 <__assert_fail@plt+0x31454>
   43764:	ldr	lr, [sp, #24]
   43768:	b	43678 <__assert_fail@plt+0x31084>
   4376c:	ldr	r2, [sp, #212]	; 0xd4
   43770:	mov	r3, #5
   43774:	str	r3, [r2]
   43778:	mov	r3, #0
   4377c:	str	r3, [sp, #36]	; 0x24
   43780:	ldr	r0, [sp, #36]	; 0x24
   43784:	add	sp, sp, #172	; 0xac
   43788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4378c:	ldr	r5, [r1, #24]
   43790:	ldr	r7, [sp, #44]	; 0x2c
   43794:	ldr	r8, [sp, #32]
   43798:	ldr	r9, [sp, #40]	; 0x28
   4379c:	add	r3, r5, #1
   437a0:	str	r3, [r1, #24]
   437a4:	orr	r2, r9, #8388608	; 0x800000
   437a8:	mov	r1, r7
   437ac:	mov	r0, r8
   437b0:	bl	3da6c <__assert_fail@plt+0x2b478>
   437b4:	ldrb	r2, [r8, #4]
   437b8:	ldr	r3, [r7, #40]	; 0x28
   437bc:	mov	r1, r7
   437c0:	cmp	r2, #9
   437c4:	add	r6, r6, #1
   437c8:	add	r3, r3, r0
   437cc:	str	r3, [r7, #40]	; 0x28
   437d0:	mov	r0, r7
   437d4:	bne	42618 <__assert_fail@plt+0x30024>
   437d8:	mov	r2, #0
   437dc:	cmp	r5, #8
   437e0:	movls	r1, #1
   437e4:	ldrls	r3, [sl, #84]	; 0x54
   437e8:	mov	r0, #0
   437ec:	orrls	r3, r3, r1, lsl r5
   437f0:	add	ip, sp, #136	; 0x88
   437f4:	strls	r3, [sl, #84]	; 0x54
   437f8:	mov	lr, #17
   437fc:	mov	r3, r0
   43800:	str	r0, [sp, #140]	; 0x8c
   43804:	str	r0, [sp, #136]	; 0x88
   43808:	str	ip, [sp]
   4380c:	add	r1, sl, #64	; 0x40
   43810:	add	r0, sl, #56	; 0x38
   43814:	strb	lr, [sp, #140]	; 0x8c
   43818:	bl	3b8ac <__assert_fail@plt+0x292b8>
   4381c:	subs	r3, r0, #0
   43820:	str	r3, [sp, #36]	; 0x24
   43824:	beq	43490 <__assert_fail@plt+0x30e9c>
   43828:	str	r5, [r3, #20]
   4382c:	b	425c4 <__assert_fail@plt+0x2ffd0>
   43830:	ldr	r3, [sp, #40]	; 0x28
   43834:	ands	r2, r3, #131072	; 0x20000
   43838:	bne	425a0 <__assert_fail@plt+0x2ffac>
   4383c:	str	r2, [sp, #36]	; 0x24
   43840:	ldr	r2, [sp, #212]	; 0xd4
   43844:	mov	r3, #16
   43848:	str	r3, [r2]
   4384c:	b	4260c <__assert_fail@plt+0x30018>
   43850:	str	ip, [r6]
   43854:	mov	r5, fp
   43858:	b	42e0c <__assert_fail@plt+0x30818>
   4385c:	ldr	r5, [sp, #36]	; 0x24
   43860:	mov	r8, r5
   43864:	b	42eac <__assert_fail@plt+0x308b8>
   43868:	ldr	r3, [sp, #60]	; 0x3c
   4386c:	ldr	r5, [sp, #20]
   43870:	cmp	r3, #0
   43874:	bne	42c40 <__assert_fail@plt+0x3064c>
   43878:	b	43910 <__assert_fail@plt+0x3131c>
   4387c:	ldrb	r2, [r4, #4]
   43880:	add	r8, r8, r3
   43884:	str	r8, [r6, #40]	; 0x28
   43888:	and	r3, r2, #251	; 0xfb
   4388c:	cmp	r2, #28
   43890:	cmpne	r3, #26
   43894:	beq	442dc <__assert_fail@plt+0x31ce8>
   43898:	cmp	r2, #22
   4389c:	moveq	r2, lr
   438a0:	orrne	r2, lr, #1
   438a4:	cmp	r2, #0
   438a8:	beq	442bc <__assert_fail@plt+0x31cc8>
   438ac:	ldrb	r3, [r4]
   438b0:	mov	r5, #0
   438b4:	strb	r3, [sp, #84]	; 0x54
   438b8:	b	436f4 <__assert_fail@plt+0x31100>
   438bc:	cmn	r8, #2
   438c0:	mov	r2, r8
   438c4:	mov	r4, r5
   438c8:	movne	r2, #0
   438cc:	moveq	r2, #1
   438d0:	orrs	r2, r4, r2
   438d4:	ldr	r5, [sp, #20]
   438d8:	str	r8, [sp, #24]
   438dc:	bne	42c34 <__assert_fail@plt+0x30640>
   438e0:	ldr	r2, [sp, #24]
   438e4:	cmn	r2, #1
   438e8:	cmpne	r9, r2
   438ec:	bgt	4319c <__assert_fail@plt+0x30ba8>
   438f0:	cmp	r3, #24
   438f4:	beq	43064 <__assert_fail@plt+0x30a70>
   438f8:	ldr	r2, [sp, #212]	; 0xd4
   438fc:	mov	r3, #10
   43900:	str	r3, [r2]
   43904:	b	42a10 <__assert_fail@plt+0x3041c>
   43908:	cmp	r3, #2
   4390c:	bne	4319c <__assert_fail@plt+0x30ba8>
   43910:	ldr	r2, [sp, #212]	; 0xd4
   43914:	mov	r3, #9
   43918:	str	r3, [r2]
   4391c:	b	42a10 <__assert_fail@plt+0x3041c>
   43920:	mov	r8, r7
   43924:	ldr	r0, [sp, #32]
   43928:	b	43200 <__assert_fail@plt+0x30c0c>
   4392c:	ldrb	r3, [r9, #16]
   43930:	ldr	r2, [sp, #40]	; 0x28
   43934:	ldr	r1, [sp, #44]	; 0x2c
   43938:	tst	r2, #256	; 0x100
   4393c:	orr	r3, r3, #1
   43940:	strb	r3, [r9, #16]
   43944:	ldrne	r3, [fp]
   43948:	ldr	r4, [sp, #32]
   4394c:	orrne	r3, r3, #1024	; 0x400
   43950:	strne	r3, [fp]
   43954:	ldr	r3, [r1, #40]	; 0x28
   43958:	add	r3, r3, r0
   4395c:	str	r3, [r1, #40]	; 0x28
   43960:	mov	r0, r4
   43964:	bl	3ab74 <__assert_fail@plt+0x28580>
   43968:	ldrb	r3, [r4, #4]
   4396c:	cmp	r3, #2
   43970:	mov	r8, r0
   43974:	movne	r2, #1
   43978:	strne	r2, [sp, #48]	; 0x30
   4397c:	bne	4363c <__assert_fail@plt+0x31048>
   43980:	ldr	r2, [sp, #212]	; 0xd4
   43984:	mov	r3, #2
   43988:	str	r3, [r2]
   4398c:	mov	r0, fp
   43990:	bl	376d0 <__assert_fail@plt+0x250dc>
   43994:	ldr	r0, [r9]
   43998:	bl	376d0 <__assert_fail@plt+0x250dc>
   4399c:	ldr	r0, [r9, #4]
   439a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   439a4:	ldr	r0, [r9, #8]
   439a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   439ac:	ldr	r0, [r9, #12]
   439b0:	bl	376d0 <__assert_fail@plt+0x250dc>
   439b4:	mov	r0, r9
   439b8:	bl	376d0 <__assert_fail@plt+0x250dc>
   439bc:	ldr	r3, [sp, #212]	; 0xd4
   439c0:	ldr	r3, [r3]
   439c4:	cmp	r3, #0
   439c8:	bne	42670 <__assert_fail@plt+0x3007c>
   439cc:	str	r3, [sp, #36]	; 0x24
   439d0:	b	425c4 <__assert_fail@plt+0x2ffd0>
   439d4:	mov	r0, fp
   439d8:	bl	376d0 <__assert_fail@plt+0x250dc>
   439dc:	mov	r0, r9
   439e0:	bl	376d0 <__assert_fail@plt+0x250dc>
   439e4:	ldr	r2, [sp, #212]	; 0xd4
   439e8:	mov	r3, #12
   439ec:	str	r3, [r2]
   439f0:	b	42670 <__assert_fail@plt+0x3007c>
   439f4:	orr	r3, r3, #16
   439f8:	ands	r2, r3, #8
   439fc:	mov	r1, r3
   43a00:	strb	r3, [sl, #88]	; 0x58
   43a04:	bne	43d84 <__assert_fail@plt+0x31790>
   43a08:	ldr	r3, [pc, #-1100]	; 435c4 <__assert_fail@plt+0x30fd0>
   43a0c:	tst	r1, #4
   43a10:	str	r3, [sl, #100]	; 0x64
   43a14:	mvn	r1, #2013265921	; 0x78000001
   43a18:	mvn	r3, #-134217727	; 0xf8000001
   43a1c:	str	r2, [sl, #96]	; 0x60
   43a20:	str	r1, [sl, #104]	; 0x68
   43a24:	str	r3, [sl, #108]	; 0x6c
   43a28:	beq	43d04 <__assert_fail@plt+0x31710>
   43a2c:	ldr	r3, [sp, #32]
   43a30:	str	r2, [sl, #112]	; 0x70
   43a34:	str	r2, [sl, #116]	; 0x74
   43a38:	str	r2, [sl, #120]	; 0x78
   43a3c:	str	r2, [sl, #124]	; 0x7c
   43a40:	ldr	r2, [r3]
   43a44:	b	434cc <__assert_fail@plt+0x30ed8>
   43a48:	ldr	r2, [sp, #44]	; 0x2c
   43a4c:	ldr	r1, [sp, #48]	; 0x30
   43a50:	ldr	r3, [r2, #40]	; 0x28
   43a54:	cmp	r1, #0
   43a58:	add	r3, r3, r8
   43a5c:	str	r3, [r2, #40]	; 0x28
   43a60:	beq	43ac0 <__assert_fail@plt+0x314cc>
   43a64:	ldm	fp, {r2, r3}
   43a68:	ldr	r1, [fp, #8]
   43a6c:	mvn	r2, r2
   43a70:	mvn	r3, r3
   43a74:	str	r2, [fp]
   43a78:	str	r3, [fp, #4]
   43a7c:	ldr	r2, [fp, #12]
   43a80:	ldr	r3, [fp, #16]
   43a84:	mvn	r1, r1
   43a88:	mvn	r2, r2
   43a8c:	mvn	r3, r3
   43a90:	str	r1, [fp, #8]
   43a94:	str	r2, [fp, #12]
   43a98:	ldr	r1, [fp, #20]
   43a9c:	ldr	r2, [fp, #24]
   43aa0:	str	r3, [fp, #16]
   43aa4:	ldr	r3, [fp, #28]
   43aa8:	mvn	r1, r1
   43aac:	mvn	r2, r2
   43ab0:	mvn	r3, r3
   43ab4:	str	r1, [fp, #20]
   43ab8:	str	r2, [fp, #24]
   43abc:	str	r3, [fp, #28]
   43ac0:	ldr	r0, [sl, #92]	; 0x5c
   43ac4:	cmp	r0, #1
   43ac8:	ble	43b4c <__assert_fail@plt+0x31558>
   43acc:	ldr	r3, [sl, #60]	; 0x3c
   43ad0:	ldm	fp, {r1, r2}
   43ad4:	ldr	ip, [r3]
   43ad8:	and	r1, r1, ip
   43adc:	str	r1, [fp]
   43ae0:	ldr	ip, [r3, #4]
   43ae4:	ldr	r1, [fp, #8]
   43ae8:	and	r2, r2, ip
   43aec:	str	r2, [fp, #4]
   43af0:	ldr	ip, [r3, #8]
   43af4:	ldr	r2, [fp, #12]
   43af8:	and	r1, r1, ip
   43afc:	str	r1, [fp, #8]
   43b00:	ldr	ip, [r3, #12]
   43b04:	ldr	r1, [fp, #16]
   43b08:	and	r2, r2, ip
   43b0c:	str	r2, [fp, #12]
   43b10:	ldr	ip, [r3, #16]
   43b14:	ldr	r2, [fp, #20]
   43b18:	and	r1, r1, ip
   43b1c:	str	r1, [fp, #16]
   43b20:	ldr	ip, [r3, #20]
   43b24:	ldr	r1, [fp, #24]
   43b28:	and	r2, r2, ip
   43b2c:	str	r2, [fp, #20]
   43b30:	ldr	ip, [r3, #24]
   43b34:	ldr	r2, [fp, #28]
   43b38:	and	r1, r1, ip
   43b3c:	str	r1, [fp, #24]
   43b40:	ldr	r3, [r3, #28]
   43b44:	and	r3, r3, r2
   43b48:	str	r3, [fp, #28]
   43b4c:	ldr	r3, [r9, #20]
   43b50:	cmp	r3, #0
   43b54:	bne	43b9c <__assert_fail@plt+0x315a8>
   43b58:	ldr	r3, [r9, #24]
   43b5c:	cmp	r3, #0
   43b60:	bne	43b9c <__assert_fail@plt+0x315a8>
   43b64:	ldr	r3, [r9, #28]
   43b68:	cmp	r3, #0
   43b6c:	bne	43b9c <__assert_fail@plt+0x315a8>
   43b70:	ldr	r3, [r9, #32]
   43b74:	cmp	r3, #0
   43b78:	bne	43b9c <__assert_fail@plt+0x315a8>
   43b7c:	cmp	r0, #1
   43b80:	ble	43c44 <__assert_fail@plt+0x31650>
   43b84:	ldr	r3, [r9, #36]	; 0x24
   43b88:	cmp	r3, #0
   43b8c:	bne	43b9c <__assert_fail@plt+0x315a8>
   43b90:	ldrb	r3, [r9, #16]
   43b94:	tst	r3, #1
   43b98:	beq	43c44 <__assert_fail@plt+0x31650>
   43b9c:	ldrb	r3, [sl, #88]	; 0x58
   43ba0:	add	r4, sl, #56	; 0x38
   43ba4:	add	r5, sl, #64	; 0x40
   43ba8:	orr	r3, r3, #2
   43bac:	strb	r3, [sl, #88]	; 0x58
   43bb0:	mov	r0, r4
   43bb4:	mov	r3, #6
   43bb8:	mov	r1, r5
   43bbc:	add	r2, sp, #104	; 0x68
   43bc0:	strb	r3, [sp, #108]	; 0x6c
   43bc4:	str	r9, [sp, #104]	; 0x68
   43bc8:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   43bcc:	subs	r3, r0, #0
   43bd0:	str	r3, [sp, #36]	; 0x24
   43bd4:	beq	43c94 <__assert_fail@plt+0x316a0>
   43bd8:	ldr	r3, [fp]
   43bdc:	cmp	r3, #0
   43be0:	bne	43ca4 <__assert_fail@plt+0x316b0>
   43be4:	ldr	r3, [fp, #4]
   43be8:	cmp	r3, #0
   43bec:	bne	43ca4 <__assert_fail@plt+0x316b0>
   43bf0:	ldr	r3, [fp, #8]
   43bf4:	cmp	r3, #0
   43bf8:	bne	43ca4 <__assert_fail@plt+0x316b0>
   43bfc:	ldr	r3, [fp, #12]
   43c00:	cmp	r3, #0
   43c04:	bne	43ca4 <__assert_fail@plt+0x316b0>
   43c08:	ldr	r3, [fp, #16]
   43c0c:	cmp	r3, #0
   43c10:	bne	43ca4 <__assert_fail@plt+0x316b0>
   43c14:	ldr	r3, [fp, #20]
   43c18:	cmp	r3, #0
   43c1c:	bne	43ca4 <__assert_fail@plt+0x316b0>
   43c20:	ldr	r3, [fp, #24]
   43c24:	cmp	r3, #0
   43c28:	bne	43ca4 <__assert_fail@plt+0x316b0>
   43c2c:	ldr	r3, [fp, #28]
   43c30:	cmp	r3, #0
   43c34:	bne	43ca4 <__assert_fail@plt+0x316b0>
   43c38:	mov	r0, fp
   43c3c:	bl	376d0 <__assert_fail@plt+0x250dc>
   43c40:	b	425c4 <__assert_fail@plt+0x2ffd0>
   43c44:	ldr	r0, [r9]
   43c48:	bl	376d0 <__assert_fail@plt+0x250dc>
   43c4c:	ldr	r0, [r9, #4]
   43c50:	bl	376d0 <__assert_fail@plt+0x250dc>
   43c54:	ldr	r0, [r9, #8]
   43c58:	bl	376d0 <__assert_fail@plt+0x250dc>
   43c5c:	ldr	r0, [r9, #12]
   43c60:	bl	376d0 <__assert_fail@plt+0x250dc>
   43c64:	mov	r0, r9
   43c68:	bl	376d0 <__assert_fail@plt+0x250dc>
   43c6c:	mov	r3, #3
   43c70:	add	r2, sp, #104	; 0x68
   43c74:	add	r1, sl, #64	; 0x40
   43c78:	add	r0, sl, #56	; 0x38
   43c7c:	strb	r3, [sp, #108]	; 0x6c
   43c80:	str	fp, [sp, #104]	; 0x68
   43c84:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   43c88:	subs	r3, r0, #0
   43c8c:	str	r3, [sp, #36]	; 0x24
   43c90:	bne	425c4 <__assert_fail@plt+0x2ffd0>
   43c94:	mov	r3, #12
   43c98:	ldr	r2, [sp, #212]	; 0xd4
   43c9c:	str	r3, [r2]
   43ca0:	b	4398c <__assert_fail@plt+0x31398>
   43ca4:	add	r2, sp, #104	; 0x68
   43ca8:	mov	r3, #3
   43cac:	mov	r1, r5
   43cb0:	mov	r0, r4
   43cb4:	str	fp, [sp, #104]	; 0x68
   43cb8:	strb	r3, [sp, #108]	; 0x6c
   43cbc:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   43cc0:	subs	r2, r0, #0
   43cc4:	beq	43c94 <__assert_fail@plt+0x316a0>
   43cc8:	add	ip, sp, #136	; 0x88
   43ccc:	mov	lr, #0
   43cd0:	ldr	r3, [sp, #36]	; 0x24
   43cd4:	mov	r0, r4
   43cd8:	mov	r1, r5
   43cdc:	str	ip, [sp]
   43ce0:	mov	r4, #10
   43ce4:	str	lr, [sp, #140]	; 0x8c
   43ce8:	str	lr, [sp, #136]	; 0x88
   43cec:	strb	r4, [sp, #140]	; 0x8c
   43cf0:	bl	3b8ac <__assert_fail@plt+0x292b8>
   43cf4:	subs	r3, r0, #0
   43cf8:	str	r3, [sp, #36]	; 0x24
   43cfc:	bne	425c4 <__assert_fail@plt+0x2ffd0>
   43d00:	b	43c94 <__assert_fail@plt+0x316a0>
   43d04:	mov	r4, #128	; 0x80
   43d08:	mov	r5, #4
   43d0c:	bl	122b8 <__ctype_b_loc@plt>
   43d10:	sub	r3, r4, #-2147483647	; 0x80000001
   43d14:	mov	ip, #1
   43d18:	add	r2, r5, #24
   43d1c:	add	r2, sl, r2, lsl #2
   43d20:	ldr	r1, [r0]
   43d24:	add	r1, r1, r3, lsl ip
   43d28:	mov	r6, r1
   43d2c:	mov	r3, #0
   43d30:	ldrh	r0, [r6, #2]!
   43d34:	add	lr, r3, r4
   43d38:	lsr	r0, r0, #3
   43d3c:	cmp	lr, #95	; 0x5f
   43d40:	orreq	r0, r0, #1
   43d44:	tst	r0, #1
   43d48:	ldrne	r0, [r2]
   43d4c:	orrne	r0, r0, ip, lsl r3
   43d50:	add	r3, r3, #1
   43d54:	strne	r0, [r2]
   43d58:	cmp	r3, #32
   43d5c:	bne	43d30 <__assert_fail@plt+0x3173c>
   43d60:	add	r5, r5, #1
   43d64:	cmp	r5, #8
   43d68:	add	r4, r4, #32
   43d6c:	add	r1, r1, #64	; 0x40
   43d70:	add	r2, r2, #4
   43d74:	bne	43d28 <__assert_fail@plt+0x31734>
   43d78:	ldr	r3, [sp, #32]
   43d7c:	ldr	r2, [r3]
   43d80:	b	434cc <__assert_fail@plt+0x30ed8>
   43d84:	mov	r5, r4
   43d88:	b	43d0c <__assert_fail@plt+0x31718>
   43d8c:	ldr	r3, [r9, #20]
   43d90:	ldr	r2, [sp, #28]
   43d94:	cmp	r3, r2
   43d98:	beq	43ff0 <__assert_fail@plt+0x319fc>
   43d9c:	ldr	r0, [r9]
   43da0:	ldr	r2, [sp, #84]	; 0x54
   43da4:	add	r1, r3, #1
   43da8:	str	r1, [r9, #20]
   43dac:	str	r2, [r0, r3, lsl #2]
   43db0:	b	43750 <__assert_fail@plt+0x3115c>
   43db4:	ldr	r3, [r6, #40]	; 0x28
   43db8:	mov	r1, r6
   43dbc:	add	r3, r3, r8
   43dc0:	ldr	r2, [sp, #40]	; 0x28
   43dc4:	str	r3, [r6, #40]	; 0x28
   43dc8:	add	r0, sp, #96	; 0x60
   43dcc:	bl	3ab74 <__assert_fail@plt+0x28580>
   43dd0:	ldrb	r1, [sp, #100]	; 0x64
   43dd4:	cmp	r1, #2
   43dd8:	mov	r7, r0
   43ddc:	beq	43fe8 <__assert_fail@plt+0x319f4>
   43de0:	cmp	r1, #21
   43de4:	beq	44228 <__assert_fail@plt+0x31c34>
   43de8:	ldr	r3, [r6, #80]	; 0x50
   43dec:	add	r2, sp, #136	; 0x88
   43df0:	cmp	r3, #1
   43df4:	str	r3, [sp, #56]	; 0x38
   43df8:	str	r2, [sp, #92]	; 0x5c
   43dfc:	ldr	r3, [r6, #40]	; 0x28
   43e00:	beq	441ec <__assert_fail@plt+0x31bf8>
   43e04:	ldr	r2, [r6, #28]
   43e08:	add	r0, r3, #1
   43e0c:	cmp	r2, r0
   43e10:	ble	441ec <__assert_fail@plt+0x31bf8>
   43e14:	ldr	lr, [r6, #8]
   43e18:	add	ip, lr, r0, lsl #2
   43e1c:	ldr	r0, [lr, r0, lsl #2]
   43e20:	cmn	r0, #1
   43e24:	subeq	r2, r2, r3
   43e28:	moveq	r0, ip
   43e2c:	moveq	r1, #1
   43e30:	bne	441ec <__assert_fail@plt+0x31bf8>
   43e34:	add	r1, r1, #1
   43e38:	cmp	r1, r2
   43e3c:	add	lr, r1, r3
   43e40:	beq	43e50 <__assert_fail@plt+0x3185c>
   43e44:	ldr	r7, [r0, #4]!
   43e48:	cmn	r7, #1
   43e4c:	beq	43e34 <__assert_fail@plt+0x31840>
   43e50:	ldr	r3, [ip, #-4]
   43e54:	mov	r7, #1
   43e58:	str	r3, [sp, #92]	; 0x5c
   43e5c:	ldr	r3, [sp, #24]
   43e60:	str	lr, [r6, #40]	; 0x28
   43e64:	str	r3, [sp, #20]
   43e68:	ldr	r2, [sp, #40]	; 0x28
   43e6c:	mov	r1, r6
   43e70:	mov	r0, r4
   43e74:	bl	3ab74 <__assert_fail@plt+0x28580>
   43e78:	sub	r3, r5, #2
   43e7c:	bics	r3, r3, #2
   43e80:	mov	r8, r0
   43e84:	beq	441e4 <__assert_fail@plt+0x31bf0>
   43e88:	cmp	r5, #3
   43e8c:	moveq	r3, #1
   43e90:	movne	r3, #0
   43e94:	str	r3, [sp, #52]	; 0x34
   43e98:	beq	441cc <__assert_fail@plt+0x31bd8>
   43e9c:	cmp	r7, #3
   43ea0:	beq	441b0 <__assert_fail@plt+0x31bbc>
   43ea4:	cmp	r5, #0
   43ea8:	bne	4419c <__assert_fail@plt+0x31ba8>
   43eac:	ldrb	r3, [sp, #84]	; 0x54
   43eb0:	cmp	r7, #0
   43eb4:	bne	44188 <__assert_fail@plt+0x31b94>
   43eb8:	ldrb	r7, [sp, #92]	; 0x5c
   43ebc:	ldr	r2, [sp, #52]	; 0x34
   43ec0:	cmp	r5, #0
   43ec4:	orreq	r2, r2, #1
   43ec8:	cmp	r2, #0
   43ecc:	beq	44180 <__assert_fail@plt+0x31b8c>
   43ed0:	ldr	r2, [sl, #92]	; 0x5c
   43ed4:	cmp	r2, #1
   43ed8:	ble	44034 <__assert_fail@plt+0x31a40>
   43edc:	mov	r0, r3
   43ee0:	bl	123a8 <btowc@plt>
   43ee4:	mov	r3, r0
   43ee8:	ldr	r2, [sp, #20]
   43eec:	cmp	r2, #0
   43ef0:	beq	4402c <__assert_fail@plt+0x31a38>
   43ef4:	ldr	r2, [sl, #92]	; 0x5c
   43ef8:	cmp	r2, #1
   43efc:	ble	43f14 <__assert_fail@plt+0x31920>
   43f00:	mov	r0, r7
   43f04:	str	r3, [sp, #20]
   43f08:	bl	123a8 <btowc@plt>
   43f0c:	ldr	r3, [sp, #20]
   43f10:	mov	r7, r0
   43f14:	cmn	r3, #1
   43f18:	cmnne	r7, #1
   43f1c:	bne	44040 <__assert_fail@plt+0x31a4c>
   43f20:	mov	r3, #3
   43f24:	b	43c98 <__assert_fail@plt+0x316a4>
   43f28:	ldr	r2, [sp, #40]	; 0x28
   43f2c:	mov	r1, r6
   43f30:	mov	r0, r4
   43f34:	bl	3ab74 <__assert_fail@plt+0x28580>
   43f38:	mov	r8, r0
   43f3c:	ldr	r5, [sp, #84]	; 0x54
   43f40:	mov	r0, r5
   43f44:	bl	12300 <strlen@plt>
   43f48:	cmp	r0, #1
   43f4c:	bne	4401c <__assert_fail@plt+0x31a28>
   43f50:	ldrb	r3, [r5]
   43f54:	ldr	r2, [sp, #212]	; 0xd4
   43f58:	mov	r1, #0
   43f5c:	str	r1, [r2]
   43f60:	and	r1, r3, #31
   43f64:	asr	r3, r3, #5
   43f68:	ldr	r2, [fp, r3, lsl #2]
   43f6c:	orr	r2, r2, r0, lsl r1
   43f70:	str	r2, [fp, r3, lsl #2]
   43f74:	b	43750 <__assert_fail@plt+0x3115c>
   43f78:	ldr	r2, [r6, #56]	; 0x38
   43f7c:	ldrb	r0, [sp, #96]	; 0x60
   43f80:	cmp	r3, r2
   43f84:	str	r2, [sp, #64]	; 0x40
   43f88:	str	r0, [sp, #60]	; 0x3c
   43f8c:	bge	43fe8 <__assert_fail@plt+0x319f4>
   43f90:	mov	lr, #0
   43f94:	add	r2, sp, #136	; 0x88
   43f98:	str	r2, [sp, #52]	; 0x34
   43f9c:	cmp	r1, #30
   43fa0:	beq	44494 <__assert_fail@plt+0x31ea0>
   43fa4:	ldr	r2, [r6, #4]
   43fa8:	add	r0, r3, #1
   43fac:	str	r0, [r6, #40]	; 0x28
   43fb0:	ldrb	r2, [r2, r3]
   43fb4:	mov	r3, r0
   43fb8:	ldr	r0, [sp, #64]	; 0x40
   43fbc:	cmp	r3, r0
   43fc0:	bge	43fe8 <__assert_fail@plt+0x319f4>
   43fc4:	ldr	r0, [sp, #60]	; 0x3c
   43fc8:	cmp	r0, r2
   43fcc:	beq	44454 <__assert_fail@plt+0x31e60>
   43fd0:	ldr	r0, [sp, #52]	; 0x34
   43fd4:	add	lr, lr, #1
   43fd8:	cmp	lr, #32
   43fdc:	strb	r2, [r0], #1
   43fe0:	str	r0, [sp, #52]	; 0x34
   43fe4:	bne	43f9c <__assert_fail@plt+0x319a8>
   43fe8:	mov	r3, #7
   43fec:	b	43c98 <__assert_fail@plt+0x316a4>
   43ff0:	lsl	r3, r2, #1
   43ff4:	add	r3, r3, #1
   43ff8:	ldr	r0, [r9]
   43ffc:	lsl	r1, r3, #2
   44000:	str	r3, [sp, #28]
   44004:	bl	3aacc <__assert_fail@plt+0x284d8>
   44008:	cmp	r0, #0
   4400c:	beq	43c94 <__assert_fail@plt+0x316a0>
   44010:	ldr	r3, [r9, #20]
   44014:	str	r0, [r9]
   44018:	b	43da0 <__assert_fail@plt+0x317ac>
   4401c:	ldr	r2, [sp, #212]	; 0xd4
   44020:	mov	r3, #3
   44024:	str	r3, [r2]
   44028:	b	4398c <__assert_fail@plt+0x31398>
   4402c:	ldr	r7, [sp, #92]	; 0x5c
   44030:	b	43f14 <__assert_fail@plt+0x31920>
   44034:	ldr	r2, [sp, #20]
   44038:	cmp	r2, #0
   4403c:	beq	4402c <__assert_fail@plt+0x31a38>
   44040:	ldr	r2, [sp, #68]	; 0x44
   44044:	cmp	r7, r3
   44048:	movcs	r2, #0
   4404c:	andcc	r2, r2, #1
   44050:	cmp	r2, #0
   44054:	bne	44100 <__assert_fail@plt+0x31b0c>
   44058:	ldr	r2, [sl, #92]	; 0x5c
   4405c:	cmp	r2, #1
   44060:	ble	44090 <__assert_fail@plt+0x31a9c>
   44064:	ldr	r2, [r9, #32]
   44068:	ldr	r1, [sp, #36]	; 0x24
   4406c:	cmp	r2, r1
   44070:	beq	44108 <__assert_fail@plt+0x31b14>
   44074:	ldr	r5, [r9, #4]
   44078:	ldr	r0, [r9, #8]
   4407c:	str	r3, [r5, r2, lsl #2]
   44080:	ldr	r2, [r9, #32]
   44084:	add	r1, r2, #1
   44088:	str	r1, [r9, #32]
   4408c:	str	r7, [r0, r2, lsl #2]
   44090:	mov	r2, #0
   44094:	cmp	r2, r3
   44098:	movcc	r1, #0
   4409c:	movcs	r1, #1
   440a0:	cmp	r2, r7
   440a4:	movhi	r1, #0
   440a8:	cmp	r1, #0
   440ac:	beq	440c8 <__assert_fail@plt+0x31ad4>
   440b0:	asr	ip, r2, #5
   440b4:	and	r0, r2, #31
   440b8:	ldr	r1, [fp, ip, lsl #2]
   440bc:	mov	lr, #1
   440c0:	orr	r1, r1, lr, lsl r0
   440c4:	str	r1, [fp, ip, lsl #2]
   440c8:	add	r2, r2, #1
   440cc:	cmp	r2, #256	; 0x100
   440d0:	bne	44094 <__assert_fail@plt+0x31aa0>
   440d4:	ldr	r3, [sp, #212]	; 0xd4
   440d8:	mov	r2, #0
   440dc:	str	r2, [r3]
   440e0:	b	43750 <__assert_fail@plt+0x3115c>
   440e4:	ldr	r2, [sp, #40]	; 0x28
   440e8:	ldr	r1, [sp, #44]	; 0x2c
   440ec:	ldr	r0, [sp, #32]
   440f0:	bl	3ab74 <__assert_fail@plt+0x28580>
   440f4:	sub	r3, r5, #2
   440f8:	bics	r3, r3, #2
   440fc:	beq	441e4 <__assert_fail@plt+0x31bf0>
   44100:	mov	r3, #11
   44104:	b	43c98 <__assert_fail@plt+0x316a4>
   44108:	str	r3, [sp, #52]	; 0x34
   4410c:	ldr	r3, [sp, #36]	; 0x24
   44110:	ldr	r0, [r9, #4]
   44114:	lsl	r2, r3, #1
   44118:	add	r3, r2, #1
   4411c:	str	r3, [sp, #36]	; 0x24
   44120:	lsl	r2, r3, #2
   44124:	mov	r1, r2
   44128:	str	r2, [sp, #20]
   4412c:	bl	3aacc <__assert_fail@plt+0x284d8>
   44130:	ldr	r2, [sp, #20]
   44134:	mov	r1, r2
   44138:	mov	r5, r0
   4413c:	ldr	r0, [r9, #8]
   44140:	bl	3aacc <__assert_fail@plt+0x284d8>
   44144:	ldr	r3, [sp, #52]	; 0x34
   44148:	cmp	r0, #0
   4414c:	cmpne	r5, #0
   44150:	ldrne	r2, [r9, #32]
   44154:	strne	r5, [r9, #4]
   44158:	strne	r0, [r9, #8]
   4415c:	bne	4407c <__assert_fail@plt+0x31a88>
   44160:	mov	r4, r5
   44164:	mov	r5, r0
   44168:	mov	r0, r4
   4416c:	bl	376d0 <__assert_fail@plt+0x250dc>
   44170:	mov	r0, r5
   44174:	bl	376d0 <__assert_fail@plt+0x250dc>
   44178:	mov	r3, #12
   4417c:	b	43c98 <__assert_fail@plt+0x316a4>
   44180:	ldr	r3, [sp, #84]	; 0x54
   44184:	b	43ee8 <__assert_fail@plt+0x318f4>
   44188:	cmp	r7, #3
   4418c:	movne	r7, #0
   44190:	ldreq	r2, [sp, #92]	; 0x5c
   44194:	ldrbeq	r7, [r2]
   44198:	b	43ebc <__assert_fail@plt+0x318c8>
   4419c:	cmp	r5, #3
   441a0:	movne	r3, #0
   441a4:	ldreq	r3, [sp, #84]	; 0x54
   441a8:	ldrbeq	r3, [r3]
   441ac:	b	43eb0 <__assert_fail@plt+0x318bc>
   441b0:	ldr	r0, [sp, #92]	; 0x5c
   441b4:	bl	12300 <strlen@plt>
   441b8:	cmp	r0, #1
   441bc:	bls	43ea4 <__assert_fail@plt+0x318b0>
   441c0:	ldr	r3, [sp, #212]	; 0xd4
   441c4:	str	r7, [r3]
   441c8:	b	4398c <__assert_fail@plt+0x31398>
   441cc:	ldr	r0, [sp, #84]	; 0x54
   441d0:	bl	12300 <strlen@plt>
   441d4:	cmp	r0, #1
   441d8:	bls	43e9c <__assert_fail@plt+0x318a8>
   441dc:	mov	r7, r5
   441e0:	b	441c0 <__assert_fail@plt+0x31bcc>
   441e4:	mov	r7, #11
   441e8:	b	441c0 <__assert_fail@plt+0x31bcc>
   441ec:	and	r2, r1, #251	; 0xfb
   441f0:	cmp	r1, #28
   441f4:	cmpne	r2, #26
   441f8:	add	r3, r7, r3
   441fc:	moveq	r2, #1
   44200:	movne	r2, #0
   44204:	str	r2, [sp, #20]
   44208:	str	r3, [r6, #40]	; 0x28
   4420c:	beq	43f78 <__assert_fail@plt+0x31984>
   44210:	ldrb	r3, [sp, #96]	; 0x60
   44214:	mov	r2, #1
   44218:	str	r2, [sp, #20]
   4421c:	mov	r7, #0
   44220:	strb	r3, [sp, #92]	; 0x5c
   44224:	b	43e68 <__assert_fail@plt+0x31874>
   44228:	ldr	r3, [r6, #40]	; 0x28
   4422c:	sub	r3, r3, r8
   44230:	str	r3, [r6, #40]	; 0x28
   44234:	mov	r3, #1
   44238:	strb	r3, [r4, #4]
   4423c:	b	4371c <__assert_fail@plt+0x31128>
   44240:	ldr	r5, [sp, #44]	; 0x2c
   44244:	ldr	r7, [sp, #32]
   44248:	mov	r2, r3
   4424c:	mov	r1, r5
   44250:	mov	r0, r7
   44254:	mov	r8, r3
   44258:	bl	3da6c <__assert_fail@plt+0x2b478>
   4425c:	ldr	ip, [r5, #40]	; 0x28
   44260:	ldr	r3, [sp, #212]	; 0xd4
   44264:	str	r6, [sp]
   44268:	str	r3, [sp, #4]
   4426c:	mov	r2, r7
   44270:	mov	r3, r8
   44274:	mov	r1, r4
   44278:	add	r0, ip, r0
   4427c:	str	r0, [r5, #40]	; 0x28
   44280:	mov	r0, r5
   44284:	bl	424b4 <__assert_fail@plt+0x2fec0>
   44288:	str	r0, [sp, #36]	; 0x24
   4428c:	b	4260c <__assert_fail@plt+0x30018>
   44290:	str	r2, [sp, #36]	; 0x24
   44294:	ldr	r2, [sp, #212]	; 0xd4
   44298:	mov	r3, #6
   4429c:	str	r3, [r2]
   442a0:	b	4260c <__assert_fail@plt+0x30018>
   442a4:	mov	r8, r1
   442a8:	ldr	r0, [sp, #32]
   442ac:	b	43200 <__assert_fail@plt+0x30c0c>
   442b0:	mov	r8, r6
   442b4:	ldr	r0, [sp, #32]
   442b8:	b	43200 <__assert_fail@plt+0x30c0c>
   442bc:	ldr	r2, [sp, #40]	; 0x28
   442c0:	mov	r1, r6
   442c4:	add	r0, sp, #136	; 0x88
   442c8:	bl	3ab74 <__assert_fail@plt+0x28580>
   442cc:	ldrb	r3, [sp, #140]	; 0x8c
   442d0:	cmp	r3, #21
   442d4:	bne	44100 <__assert_fail@plt+0x31b0c>
   442d8:	b	438ac <__assert_fail@plt+0x312b8>
   442dc:	ldr	r7, [r6, #56]	; 0x38
   442e0:	ldrb	r3, [r4]
   442e4:	cmp	r8, r7
   442e8:	str	r3, [sp, #56]	; 0x38
   442ec:	bge	43fe8 <__assert_fail@plt+0x319f4>
   442f0:	add	r3, sp, #104	; 0x68
   442f4:	str	r3, [sp, #20]
   442f8:	mov	ip, #0
   442fc:	b	44340 <__assert_fail@plt+0x31d4c>
   44300:	ldr	r3, [r6, #4]
   44304:	add	r1, r8, #1
   44308:	str	r1, [r6, #40]	; 0x28
   4430c:	ldrb	r3, [r3, r8]
   44310:	mov	r8, r1
   44314:	cmp	r7, r8
   44318:	ble	43fe8 <__assert_fail@plt+0x319f4>
   4431c:	ldr	r1, [sp, #56]	; 0x38
   44320:	cmp	r1, r3
   44324:	beq	445b4 <__assert_fail@plt+0x31fc0>
   44328:	ldr	r1, [sp, #20]
   4432c:	add	ip, ip, #1
   44330:	cmp	ip, #32
   44334:	strb	r3, [r1], #1
   44338:	str	r1, [sp, #20]
   4433c:	beq	43fe8 <__assert_fail@plt+0x319f4>
   44340:	cmp	r2, #30
   44344:	bne	44300 <__assert_fail@plt+0x31d0c>
   44348:	ldrb	r3, [r6, #75]	; 0x4b
   4434c:	cmp	r3, #0
   44350:	beq	44300 <__assert_fail@plt+0x31d0c>
   44354:	ldrb	r3, [r6, #76]	; 0x4c
   44358:	cmp	r3, #0
   4435c:	beq	446a0 <__assert_fail@plt+0x320ac>
   44360:	ldr	lr, [r6, #28]
   44364:	cmp	r8, lr
   44368:	beq	44694 <__assert_fail@plt+0x320a0>
   4436c:	ldr	r1, [r6, #8]
   44370:	mov	r3, r8
   44374:	lsl	r0, r8, #2
   44378:	ldr	r1, [r1, r8, lsl #2]
   4437c:	cmn	r1, #1
   44380:	movne	r1, r8
   44384:	beq	44680 <__assert_fail@plt+0x3208c>
   44388:	ldr	r5, [r6, #12]
   4438c:	ldr	r3, [r6]
   44390:	ldr	r5, [r5, r0]
   44394:	ldr	r0, [r6, #24]
   44398:	add	r3, r3, r5
   4439c:	ldrb	r3, [r3, r0]
   443a0:	tst	r3, #128	; 0x80
   443a4:	bne	4466c <__assert_fail@plt+0x32078>
   443a8:	ldr	r1, [sp, #52]	; 0x34
   443ac:	cmp	r1, #1
   443b0:	add	r1, r8, #1
   443b4:	beq	443f4 <__assert_fail@plt+0x31e00>
   443b8:	cmp	lr, r1
   443bc:	ble	443f4 <__assert_fail@plt+0x31e00>
   443c0:	ldr	r5, [r6, #8]
   443c4:	add	r0, r5, r1, lsl #2
   443c8:	ldr	r5, [r5, r1, lsl #2]
   443cc:	cmn	r5, #1
   443d0:	addeq	r8, r8, #2
   443d4:	bne	443f4 <__assert_fail@plt+0x31e00>
   443d8:	cmp	lr, r8
   443dc:	mov	r1, r8
   443e0:	beq	443f4 <__assert_fail@plt+0x31e00>
   443e4:	ldr	r5, [r0, #4]!
   443e8:	add	r8, r8, #1
   443ec:	cmn	r5, #1
   443f0:	beq	443d8 <__assert_fail@plt+0x31de4>
   443f4:	str	r1, [r6, #40]	; 0x28
   443f8:	mov	r8, r1
   443fc:	b	44314 <__assert_fail@plt+0x31d20>
   44400:	ldr	r6, [sp, #32]
   44404:	mov	r3, #6
   44408:	add	r5, sl, #56	; 0x38
   4440c:	add	sl, sl, #64	; 0x40
   44410:	str	r3, [r6]
   44414:	mov	r2, r6
   44418:	mov	r1, sl
   4441c:	mov	r0, r5
   44420:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   44424:	mov	r3, #9
   44428:	str	r3, [r6]
   4442c:	mov	r4, r0
   44430:	b	43510 <__assert_fail@plt+0x30f1c>
   44434:	ldr	r2, [sp, #32]
   44438:	add	r1, sl, #64	; 0x40
   4443c:	add	r0, sl, #56	; 0x38
   44440:	bl	3e3d4 <__assert_fail@plt+0x2bde0>
   44444:	subs	r3, r0, #0
   44448:	str	r3, [sp, #36]	; 0x24
   4444c:	bne	43578 <__assert_fail@plt+0x30f84>
   44450:	b	43490 <__assert_fail@plt+0x30e9c>
   44454:	ldr	r0, [r6, #4]
   44458:	ldrb	r0, [r0, r3]
   4445c:	cmp	r0, #93	; 0x5d
   44460:	bne	43fd0 <__assert_fail@plt+0x319dc>
   44464:	add	r2, sp, #168	; 0xa8
   44468:	add	lr, r2, lr
   4446c:	add	r3, r3, #1
   44470:	mov	r2, #0
   44474:	cmp	r1, #28
   44478:	strb	r2, [lr, #-32]	; 0xffffffe0
   4447c:	str	r3, [r6, #40]	; 0x28
   44480:	beq	4454c <__assert_fail@plt+0x31f58>
   44484:	cmp	r1, #30
   44488:	beq	440e4 <__assert_fail@plt+0x31af0>
   4448c:	mov	r7, #3
   44490:	b	43e68 <__assert_fail@plt+0x31874>
   44494:	ldrb	r2, [r6, #75]	; 0x4b
   44498:	cmp	r2, #0
   4449c:	beq	43fa4 <__assert_fail@plt+0x319b0>
   444a0:	ldrb	r2, [r6, #76]	; 0x4c
   444a4:	cmp	r2, #0
   444a8:	beq	44598 <__assert_fail@plt+0x31fa4>
   444ac:	ldr	r7, [r6, #28]
   444b0:	cmp	r3, r7
   444b4:	beq	4458c <__assert_fail@plt+0x31f98>
   444b8:	ldr	r0, [r6, #8]
   444bc:	mov	r2, r3
   444c0:	lsl	ip, r3, #2
   444c4:	ldr	r0, [r0, r3, lsl #2]
   444c8:	cmn	r0, #1
   444cc:	movne	r0, r3
   444d0:	beq	44578 <__assert_fail@plt+0x31f84>
   444d4:	ldr	r8, [r6, #12]
   444d8:	ldr	r2, [r6]
   444dc:	ldr	r8, [r8, ip]
   444e0:	ldr	ip, [r6, #24]
   444e4:	add	r2, r2, r8
   444e8:	ldrb	r2, [r2, ip]
   444ec:	tst	r2, #128	; 0x80
   444f0:	bne	44564 <__assert_fail@plt+0x31f70>
   444f4:	ldr	r0, [sp, #56]	; 0x38
   444f8:	cmp	r0, #1
   444fc:	add	r0, r3, #1
   44500:	beq	44540 <__assert_fail@plt+0x31f4c>
   44504:	cmp	r7, r0
   44508:	ble	44540 <__assert_fail@plt+0x31f4c>
   4450c:	ldr	r8, [r6, #8]
   44510:	add	ip, r8, r0, lsl #2
   44514:	ldr	r8, [r8, r0, lsl #2]
   44518:	cmn	r8, #1
   4451c:	addeq	r3, r3, #2
   44520:	bne	44540 <__assert_fail@plt+0x31f4c>
   44524:	cmp	r7, r3
   44528:	mov	r0, r3
   4452c:	beq	44540 <__assert_fail@plt+0x31f4c>
   44530:	ldr	r8, [ip, #4]!
   44534:	add	r3, r3, #1
   44538:	cmn	r8, #1
   4453c:	beq	44524 <__assert_fail@plt+0x31f30>
   44540:	str	r0, [r6, #40]	; 0x28
   44544:	mov	r3, r0
   44548:	b	43fb8 <__assert_fail@plt+0x319c4>
   4454c:	ldr	r2, [sp, #40]	; 0x28
   44550:	ldr	r1, [sp, #44]	; 0x2c
   44554:	ldr	r0, [sp, #32]
   44558:	bl	3ab74 <__assert_fail@plt+0x28580>
   4455c:	mov	r7, #11
   44560:	b	441c0 <__assert_fail@plt+0x31bcc>
   44564:	ldr	r2, [r6, #4]
   44568:	add	r3, r3, #1
   4456c:	str	r3, [r6, #40]	; 0x28
   44570:	ldrb	r2, [r2, r0]
   44574:	b	43fb8 <__assert_fail@plt+0x319c4>
   44578:	ldr	r0, [r6, #4]
   4457c:	add	r3, r3, #1
   44580:	str	r3, [r6, #40]	; 0x28
   44584:	ldrb	r2, [r0, r2]
   44588:	b	43fb8 <__assert_fail@plt+0x319c4>
   4458c:	mov	r0, r3
   44590:	lsl	ip, r3, #2
   44594:	b	444d4 <__assert_fail@plt+0x31ee0>
   44598:	ldr	r2, [r6]
   4459c:	ldr	r0, [r6, #24]
   445a0:	add	r2, r2, r3
   445a4:	add	r3, r3, #1
   445a8:	str	r3, [r6, #40]	; 0x28
   445ac:	ldrb	r2, [r2, r0]
   445b0:	b	43fb8 <__assert_fail@plt+0x319c4>
   445b4:	ldr	r1, [r6, #4]
   445b8:	ldrb	r1, [r1, r8]
   445bc:	cmp	r1, #93	; 0x5d
   445c0:	bne	44328 <__assert_fail@plt+0x31d34>
   445c4:	add	r3, sp, #168	; 0xa8
   445c8:	add	ip, r3, ip
   445cc:	add	r8, r8, #1
   445d0:	mov	r3, #0
   445d4:	cmp	r2, #28
   445d8:	strb	r3, [ip, #-64]	; 0xffffffc0
   445dc:	str	r8, [r6, #40]	; 0x28
   445e0:	beq	43f28 <__assert_fail@plt+0x31934>
   445e4:	cmp	r2, #30
   445e8:	beq	44618 <__assert_fail@plt+0x32024>
   445ec:	cmp	r2, #26
   445f0:	beq	44610 <__assert_fail@plt+0x3201c>
   445f4:	ldr	r2, [sp, #40]	; 0x28
   445f8:	mov	r1, r6
   445fc:	mov	r0, r4
   44600:	bl	3ab74 <__assert_fail@plt+0x28580>
   44604:	mov	r5, #3
   44608:	mov	r8, r0
   4460c:	b	43708 <__assert_fail@plt+0x31114>
   44610:	mov	r5, #3
   44614:	b	436f4 <__assert_fail@plt+0x31100>
   44618:	ldr	r5, [sp, #40]	; 0x28
   4461c:	mov	r1, r6
   44620:	mov	r2, r5
   44624:	mov	r0, r4
   44628:	bl	3ab74 <__assert_fail@plt+0x28580>
   4462c:	ldr	r2, [sp, #84]	; 0x54
   44630:	add	r3, sp, #76	; 0x4c
   44634:	mov	r1, fp
   44638:	mov	r8, r0
   4463c:	ldr	r0, [r6, #64]	; 0x40
   44640:	str	r2, [sp, #4]
   44644:	str	r3, [sp]
   44648:	str	r5, [sp, #8]
   4464c:	add	r3, r9, #36	; 0x24
   44650:	add	r2, r9, #12
   44654:	bl	3ca38 <__assert_fail@plt+0x2a444>
   44658:	ldr	r3, [sp, #212]	; 0xd4
   4465c:	cmp	r0, #0
   44660:	str	r0, [r3]
   44664:	beq	43750 <__assert_fail@plt+0x3115c>
   44668:	b	4398c <__assert_fail@plt+0x31398>
   4466c:	ldr	r3, [r6, #4]
   44670:	add	r8, r8, #1
   44674:	str	r8, [r6, #40]	; 0x28
   44678:	ldrb	r3, [r3, r1]
   4467c:	b	44314 <__assert_fail@plt+0x31d20>
   44680:	ldr	r1, [r6, #4]
   44684:	add	r8, r8, #1
   44688:	str	r8, [r6, #40]	; 0x28
   4468c:	ldrb	r3, [r1, r3]
   44690:	b	44314 <__assert_fail@plt+0x31d20>
   44694:	mov	r1, r8
   44698:	lsl	r0, r8, #2
   4469c:	b	44388 <__assert_fail@plt+0x31d94>
   446a0:	ldr	r3, [r6]
   446a4:	ldr	r1, [r6, #24]
   446a8:	add	r3, r3, r8
   446ac:	add	r8, r8, #1
   446b0:	str	r8, [r6, #40]	; 0x28
   446b4:	ldrb	r3, [r3, r1]
   446b8:	b	44314 <__assert_fail@plt+0x31d20>
   446bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   446c0:	sub	sp, sp, #36	; 0x24
   446c4:	mov	sl, r3
   446c8:	ldr	r5, [sp, #76]	; 0x4c
   446cc:	ldr	r7, [sp, #72]	; 0x48
   446d0:	str	r5, [sp, #4]
   446d4:	str	r7, [sp]
   446d8:	ldr	ip, [r1]
   446dc:	mov	r8, r1
   446e0:	str	ip, [sp, #16]
   446e4:	mov	r9, r0
   446e8:	mov	r6, r2
   446ec:	bl	424b4 <__assert_fail@plt+0x2fec0>
   446f0:	ldr	r3, [r5]
   446f4:	adds	r3, r3, #0
   446f8:	movne	r3, #1
   446fc:	cmp	r0, #0
   44700:	movne	r3, #0
   44704:	cmp	r3, #0
   44708:	bne	4488c <__assert_fail@plt+0x32298>
   4470c:	mov	r4, r0
   44710:	str	r3, [sp, #20]
   44714:	str	r8, [sp, #12]
   44718:	ldrb	r3, [r6, #4]
   4471c:	and	r2, r3, #247	; 0xf7
   44720:	cmp	r2, #2
   44724:	beq	447a0 <__assert_fail@plt+0x321ac>
   44728:	subs	r3, r3, #9
   4472c:	movne	r3, #1
   44730:	cmp	r7, #0
   44734:	orreq	r3, r3, #1
   44738:	cmp	r3, #0
   4473c:	beq	447a0 <__assert_fail@plt+0x321ac>
   44740:	mov	r3, sl
   44744:	str	r5, [sp, #4]
   44748:	str	r7, [sp]
   4474c:	mov	r2, r6
   44750:	ldr	r1, [sp, #12]
   44754:	mov	r0, r9
   44758:	bl	424b4 <__assert_fail@plt+0x2fec0>
   4475c:	ldr	r3, [r5]
   44760:	adds	r3, r3, #0
   44764:	movne	r3, #1
   44768:	cmp	r0, #0
   4476c:	movne	r3, #0
   44770:	cmp	r3, #0
   44774:	mov	fp, r0
   44778:	bne	4489c <__assert_fail@plt+0x322a8>
   4477c:	cmp	r4, #0
   44780:	cmpne	r0, #0
   44784:	bne	447ac <__assert_fail@plt+0x321b8>
   44788:	ldrb	r3, [r6, #4]
   4478c:	cmp	r4, #0
   44790:	moveq	r4, r0
   44794:	and	r2, r3, #247	; 0xf7
   44798:	cmp	r2, #2
   4479c:	bne	44728 <__assert_fail@plt+0x32134>
   447a0:	mov	r0, r4
   447a4:	add	sp, sp, #36	; 0x24
   447a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   447ac:	ldr	r1, [sp, #16]
   447b0:	str	r3, [sp, #24]
   447b4:	str	r3, [sp, #28]
   447b8:	ldr	r2, [r1, #64]	; 0x40
   447bc:	cmp	r2, #31
   447c0:	beq	44840 <__assert_fail@plt+0x3224c>
   447c4:	lsl	r3, r2, #5
   447c8:	add	lr, r2, #1
   447cc:	ldr	r2, [r1, #56]	; 0x38
   447d0:	add	ip, r3, #4
   447d4:	mov	r8, r1
   447d8:	mov	r1, #16
   447dc:	strb	r1, [sp, #28]
   447e0:	add	r1, sp, #24
   447e4:	add	r3, r2, r3
   447e8:	ldm	r1, {r0, r1}
   447ec:	str	lr, [r8, #64]	; 0x40
   447f0:	ldr	r8, [sp, #20]
   447f4:	add	lr, r3, #24
   447f8:	str	r8, [r3, #4]
   447fc:	str	r4, [r3, #8]
   44800:	str	fp, [r3, #12]
   44804:	stm	lr, {r0, r1}
   44808:	ldrb	r1, [r3, #30]
   4480c:	add	r2, r2, ip
   44810:	mvn	r0, #0
   44814:	and	r1, r1, #243	; 0xf3
   44818:	cmp	r2, #0
   4481c:	str	r8, [r3, #16]
   44820:	str	r8, [r3, #20]
   44824:	str	r0, [r3, #32]
   44828:	strb	r1, [r3, #30]
   4482c:	str	r2, [r4]
   44830:	str	r2, [fp]
   44834:	beq	44874 <__assert_fail@plt+0x32280>
   44838:	mov	r4, r2
   4483c:	b	44718 <__assert_fail@plt+0x32124>
   44840:	mov	r0, #996	; 0x3e4
   44844:	bl	3a010 <__assert_fail@plt+0x27a1c>
   44848:	subs	r2, r0, #0
   4484c:	beq	44874 <__assert_fail@plt+0x32280>
   44850:	ldr	r0, [sp, #16]
   44854:	mov	lr, #1
   44858:	mov	ip, #4
   4485c:	ldr	r1, [r0, #56]	; 0x38
   44860:	ldr	r3, [sp, #20]
   44864:	str	r1, [r2]
   44868:	mov	r8, r0
   4486c:	str	r2, [r0, #56]	; 0x38
   44870:	b	447d8 <__assert_fail@plt+0x321e4>
   44874:	mov	r0, fp
   44878:	bl	3e480 <__assert_fail@plt+0x2be8c>
   4487c:	mov	r0, r4
   44880:	bl	3e480 <__assert_fail@plt+0x2be8c>
   44884:	mov	r3, #12
   44888:	str	r3, [r5]
   4488c:	mov	r4, #0
   44890:	mov	r0, r4
   44894:	add	sp, sp, #36	; 0x24
   44898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4489c:	cmp	r4, #0
   448a0:	beq	4488c <__assert_fail@plt+0x32298>
   448a4:	mov	r0, r4
   448a8:	bl	3e480 <__assert_fail@plt+0x2be8c>
   448ac:	mov	r4, #0
   448b0:	mov	r0, r4
   448b4:	add	sp, sp, #36	; 0x24
   448b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   448bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   448c0:	sub	sp, sp, #44	; 0x2c
   448c4:	ldr	r5, [r1]
   448c8:	ldr	sl, [sp, #84]	; 0x54
   448cc:	str	r1, [sp, #24]
   448d0:	ldr	ip, [r5, #84]	; 0x54
   448d4:	str	sl, [sp, #4]
   448d8:	str	ip, [sp, #20]
   448dc:	ldr	ip, [sp, #80]	; 0x50
   448e0:	mov	r9, r0
   448e4:	str	ip, [sp]
   448e8:	mov	r8, r2
   448ec:	str	r3, [sp, #16]
   448f0:	bl	446bc <__assert_fail@plt+0x320c8>
   448f4:	ldr	r4, [sl]
   448f8:	adds	r4, r4, #0
   448fc:	movne	r4, #1
   44900:	cmp	r0, #0
   44904:	movne	r4, #0
   44908:	cmp	r4, #0
   4490c:	bne	44a6c <__assert_fail@plt+0x32478>
   44910:	ldr	r3, [sp, #16]
   44914:	mov	r6, r0
   44918:	orr	r3, r3, #8388608	; 0x800000
   4491c:	str	r3, [sp, #12]
   44920:	add	r7, sp, #32
   44924:	b	44a1c <__assert_fail@plt+0x32428>
   44928:	ldr	r3, [sp, #80]	; 0x50
   4492c:	clz	r3, r3
   44930:	lsr	r3, r3, #5
   44934:	cmp	r2, #9
   44938:	orrne	r3, r3, #1
   4493c:	cmp	r3, #0
   44940:	beq	44a54 <__assert_fail@plt+0x32460>
   44944:	ldr	r2, [sp, #20]
   44948:	ldr	r1, [sp, #80]	; 0x50
   4494c:	ldr	fp, [r5, #84]	; 0x54
   44950:	ldr	r3, [sp, #16]
   44954:	str	r2, [r5, #84]	; 0x54
   44958:	mov	r0, r9
   4495c:	mov	r2, r8
   44960:	str	r1, [sp]
   44964:	str	sl, [sp, #4]
   44968:	ldr	r1, [sp, #24]
   4496c:	bl	446bc <__assert_fail@plt+0x320c8>
   44970:	ldr	r3, [sl]
   44974:	adds	r3, r3, #0
   44978:	movne	r3, #1
   4497c:	cmp	r0, #0
   44980:	movne	r3, #0
   44984:	cmp	r3, #0
   44988:	mov	r2, r0
   4498c:	bne	44a5c <__assert_fail@plt+0x32468>
   44990:	ldr	r3, [r5, #84]	; 0x54
   44994:	orr	fp, r3, fp
   44998:	str	fp, [r5, #84]	; 0x54
   4499c:	ldr	lr, [r5, #64]	; 0x40
   449a0:	str	r4, [r7]
   449a4:	cmp	lr, #31
   449a8:	str	r4, [r7, #4]
   449ac:	beq	44a94 <__assert_fail@plt+0x324a0>
   449b0:	lsl	r3, lr, #5
   449b4:	ldr	ip, [r5, #56]	; 0x38
   449b8:	add	lr, lr, #1
   449bc:	add	fp, r3, #4
   449c0:	mov	r1, #10
   449c4:	add	r3, ip, r3
   449c8:	strb	r1, [sp, #36]	; 0x24
   449cc:	ldm	r7, {r0, r1}
   449d0:	str	lr, [r5, #64]	; 0x40
   449d4:	add	lr, r3, #24
   449d8:	stmib	r3, {r4, r6}
   449dc:	str	r2, [r3, #12]
   449e0:	stm	lr, {r0, r1}
   449e4:	ldrb	r1, [r3, #30]
   449e8:	cmp	r6, #0
   449ec:	add	ip, ip, fp
   449f0:	mvn	r0, #0
   449f4:	and	r1, r1, #243	; 0xf3
   449f8:	str	r4, [r3, #16]
   449fc:	str	r4, [r3, #20]
   44a00:	strb	r1, [r3, #30]
   44a04:	str	r0, [r3, #32]
   44a08:	strne	ip, [r6]
   44a0c:	cmp	r2, #0
   44a10:	strne	ip, [r2]
   44a14:	subs	r6, ip, #0
   44a18:	beq	44a7c <__assert_fail@plt+0x32488>
   44a1c:	ldrb	r3, [r8, #4]
   44a20:	cmp	r3, #10
   44a24:	bne	44a70 <__assert_fail@plt+0x3247c>
   44a28:	ldr	r2, [sp, #12]
   44a2c:	mov	r1, r9
   44a30:	mov	r0, r8
   44a34:	bl	3da6c <__assert_fail@plt+0x2b478>
   44a38:	ldrb	r2, [r8, #4]
   44a3c:	ldr	r3, [r9, #40]	; 0x28
   44a40:	and	r1, r2, #247	; 0xf7
   44a44:	cmp	r1, #2
   44a48:	add	r0, r3, r0
   44a4c:	str	r0, [r9, #40]	; 0x28
   44a50:	bne	44928 <__assert_fail@plt+0x32334>
   44a54:	mov	r2, r4
   44a58:	b	4499c <__assert_fail@plt+0x323a8>
   44a5c:	cmp	r6, #0
   44a60:	beq	44a6c <__assert_fail@plt+0x32478>
   44a64:	mov	r0, r6
   44a68:	bl	3e480 <__assert_fail@plt+0x2be8c>
   44a6c:	mov	r6, #0
   44a70:	mov	r0, r6
   44a74:	add	sp, sp, #44	; 0x2c
   44a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44a7c:	mov	r3, #12
   44a80:	mov	r6, #0
   44a84:	mov	r0, r6
   44a88:	str	r3, [sl]
   44a8c:	add	sp, sp, #44	; 0x2c
   44a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44a94:	mov	r0, #996	; 0x3e4
   44a98:	str	r2, [sp, #28]
   44a9c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   44aa0:	subs	ip, r0, #0
   44aa4:	beq	44a7c <__assert_fail@plt+0x32488>
   44aa8:	ldr	r1, [r5, #56]	; 0x38
   44aac:	mov	lr, #1
   44ab0:	str	r1, [ip]
   44ab4:	mov	fp, #4
   44ab8:	mov	r3, r4
   44abc:	str	ip, [r5, #56]	; 0x38
   44ac0:	ldr	r2, [sp, #28]
   44ac4:	b	449c0 <__assert_fail@plt+0x323cc>
   44ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44acc:	sub	sp, sp, #28
   44ad0:	ldr	r9, [r2, #4]
   44ad4:	str	r0, [sp]
   44ad8:	cmp	r9, #0
   44adc:	moveq	r3, r0
   44ae0:	moveq	r4, r9
   44ae4:	streq	r9, [r3]
   44ae8:	beq	44bc0 <__assert_fail@plt+0x325cc>
   44aec:	add	fp, r3, r9
   44af0:	ble	44b0c <__assert_fail@plt+0x32518>
   44af4:	ldr	ip, [r2, #8]
   44af8:	add	r4, ip, r9, lsl #2
   44afc:	ldr	r0, [ip], #4
   44b00:	cmp	r4, ip
   44b04:	add	fp, fp, r0
   44b08:	bne	44afc <__assert_fail@plt+0x32508>
   44b0c:	ldr	ip, [r1, #68]	; 0x44
   44b10:	ldr	lr, [r1, #32]
   44b14:	and	ip, ip, fp
   44b18:	add	ip, ip, ip, lsl #1
   44b1c:	lsl	ip, ip, #2
   44b20:	add	r4, lr, ip
   44b24:	ldr	r5, [lr, ip]
   44b28:	cmp	r5, #0
   44b2c:	ble	44bcc <__assert_fail@plt+0x325d8>
   44b30:	sub	ip, r9, #1
   44b34:	ldr	lr, [r4, #8]
   44b38:	lsl	r0, ip, #2
   44b3c:	sub	lr, lr, #4
   44b40:	str	r0, [sp, #4]
   44b44:	mov	ip, #0
   44b48:	b	44b58 <__assert_fail@plt+0x32564>
   44b4c:	add	ip, ip, #1
   44b50:	cmp	ip, r5
   44b54:	beq	44bcc <__assert_fail@plt+0x325d8>
   44b58:	ldr	r4, [lr, #4]!
   44b5c:	ldr	r0, [r4]
   44b60:	cmp	r0, fp
   44b64:	bne	44b4c <__assert_fail@plt+0x32558>
   44b68:	ldrb	r0, [r4, #52]	; 0x34
   44b6c:	and	r0, r0, #15
   44b70:	cmp	r3, r0
   44b74:	bne	44b4c <__assert_fail@plt+0x32558>
   44b78:	ldr	r7, [r4, #40]	; 0x28
   44b7c:	cmp	r7, #0
   44b80:	beq	44b4c <__assert_fail@plt+0x32558>
   44b84:	ldr	r0, [r7, #4]
   44b88:	cmp	r9, r0
   44b8c:	bne	44b4c <__assert_fail@plt+0x32558>
   44b90:	ldr	r0, [sp, #4]
   44b94:	mov	r6, r9
   44b98:	b	44bb8 <__assert_fail@plt+0x325c4>
   44b9c:	ldr	sl, [r7, #8]
   44ba0:	ldr	r8, [r2, #8]
   44ba4:	ldr	sl, [sl, r0]
   44ba8:	ldr	r8, [r8, r0]
   44bac:	sub	r0, r0, #4
   44bb0:	cmp	sl, r8
   44bb4:	bne	44b4c <__assert_fail@plt+0x32558>
   44bb8:	subs	r6, r6, #1
   44bbc:	bpl	44b9c <__assert_fail@plt+0x325a8>
   44bc0:	mov	r0, r4
   44bc4:	add	sp, sp, #28
   44bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44bcc:	mov	r7, r3
   44bd0:	ldr	r3, [sp]
   44bd4:	mov	r9, r1
   44bd8:	mov	r0, #56	; 0x38
   44bdc:	mov	r1, #1
   44be0:	str	r3, [sp, #12]
   44be4:	mov	r8, r2
   44be8:	bl	37128 <__assert_fail@plt+0x24b34>
   44bec:	subs	r4, r0, #0
   44bf0:	beq	44e34 <__assert_fail@plt+0x32840>
   44bf4:	ldr	r0, [r8, #4]
   44bf8:	add	r3, r4, #4
   44bfc:	cmp	r0, #0
   44c00:	str	r3, [sp, #16]
   44c04:	str	r0, [r4, #8]
   44c08:	ble	44eb8 <__assert_fail@plt+0x328c4>
   44c0c:	str	r0, [r4, #4]
   44c10:	lsl	r0, r0, #2
   44c14:	bl	3a010 <__assert_fail@plt+0x27a1c>
   44c18:	cmp	r0, #0
   44c1c:	str	r0, [r4, #12]
   44c20:	beq	44ee8 <__assert_fail@plt+0x328f4>
   44c24:	ldr	sl, [r8, #4]
   44c28:	ldr	r1, [r8, #8]
   44c2c:	lsl	r2, sl, #2
   44c30:	bl	12024 <memcpy@plt>
   44c34:	ldrb	r2, [r4, #52]	; 0x34
   44c38:	and	r3, r7, #15
   44c3c:	cmp	sl, #0
   44c40:	bic	r2, r2, #15
   44c44:	orr	r3, r3, r2
   44c48:	add	r2, r4, #4
   44c4c:	str	r2, [r4, #40]	; 0x28
   44c50:	strb	r3, [r4, #52]	; 0x34
   44c54:	ble	44dcc <__assert_fail@plt+0x327d8>
   44c58:	and	r2, r7, #2
   44c5c:	str	r2, [sp]
   44c60:	and	r2, r7, #4
   44c64:	mov	r0, #0
   44c68:	and	r3, r7, #1
   44c6c:	stmib	sp, {r2, fp}
   44c70:	mov	ip, sl
   44c74:	ldr	r6, [pc, #676]	; 44f20 <__assert_fail@plt+0x3292c>
   44c78:	mov	r5, r0
   44c7c:	mov	fp, r3
   44c80:	add	sl, r4, #4
   44c84:	b	44ce8 <__assert_fail@plt+0x326f4>
   44c88:	cmp	fp, #0
   44c8c:	beq	44cc0 <__assert_fail@plt+0x326cc>
   44c90:	tst	r7, #2
   44c94:	bne	44cc0 <__assert_fail@plt+0x326cc>
   44c98:	tst	r7, #16
   44c9c:	beq	44cac <__assert_fail@plt+0x326b8>
   44ca0:	ldr	r3, [sp]
   44ca4:	cmp	r3, #0
   44ca8:	beq	44cc0 <__assert_fail@plt+0x326cc>
   44cac:	tst	r7, #64	; 0x40
   44cb0:	beq	44cd8 <__assert_fail@plt+0x326e4>
   44cb4:	ldr	r3, [sp, #4]
   44cb8:	cmp	r3, #0
   44cbc:	bne	44cd8 <__assert_fail@plt+0x326e4>
   44cc0:	subs	r2, r5, r0
   44cc4:	bmi	44cd4 <__assert_fail@plt+0x326e0>
   44cc8:	ldr	r1, [r4, #8]
   44ccc:	cmp	r2, r1
   44cd0:	blt	44d94 <__assert_fail@plt+0x327a0>
   44cd4:	add	r0, r0, #1
   44cd8:	ldr	ip, [r8, #4]
   44cdc:	add	r5, r5, #1
   44ce0:	cmp	r5, ip
   44ce4:	bge	44dc8 <__assert_fail@plt+0x327d4>
   44ce8:	ldr	r1, [r8, #8]
   44cec:	ldr	r2, [r9]
   44cf0:	ldr	r1, [r1, r5, lsl #2]
   44cf4:	add	r2, r2, r1, lsl #3
   44cf8:	ldr	r7, [r2, #4]
   44cfc:	ldrb	r1, [r2, #4]
   44d00:	ands	r7, r6, r7, lsr #8
   44d04:	moveq	lr, #1
   44d08:	movne	lr, #0
   44d0c:	cmp	r1, #1
   44d10:	movne	lr, #0
   44d14:	andeq	lr, lr, #1
   44d18:	cmp	lr, #0
   44d1c:	bne	44cdc <__assert_fail@plt+0x326e8>
   44d20:	ldrb	r2, [r2, #6]
   44d24:	ldrb	lr, [r4, #52]	; 0x34
   44d28:	cmp	r1, #2
   44d2c:	lsr	r2, r2, #4
   44d30:	orr	r2, r2, lr, lsr #5
   44d34:	and	r2, r2, #1
   44d38:	bic	lr, lr, #32
   44d3c:	orr	r2, lr, r2, lsl #5
   44d40:	strb	r2, [r4, #52]	; 0x34
   44d44:	uxtbeq	r2, r2
   44d48:	orreq	r2, r2, #16
   44d4c:	strbeq	r2, [r4, #52]	; 0x34
   44d50:	beq	44d64 <__assert_fail@plt+0x32770>
   44d54:	cmp	r1, #4
   44d58:	ldrbeq	r2, [r4, #52]	; 0x34
   44d5c:	orreq	r2, r2, #64	; 0x40
   44d60:	strbeq	r2, [r4, #52]	; 0x34
   44d64:	cmp	r7, #0
   44d68:	beq	44cdc <__assert_fail@plt+0x326e8>
   44d6c:	ldr	r2, [r4, #40]	; 0x28
   44d70:	cmp	sl, r2
   44d74:	beq	44e50 <__assert_fail@plt+0x3285c>
   44d78:	tst	r7, #1
   44d7c:	bne	44c88 <__assert_fail@plt+0x32694>
   44d80:	tst	r7, #2
   44d84:	beq	44c98 <__assert_fail@plt+0x326a4>
   44d88:	cmp	fp, #0
   44d8c:	beq	44c98 <__assert_fail@plt+0x326a4>
   44d90:	b	44cc0 <__assert_fail@plt+0x326cc>
   44d94:	sub	r1, r1, #1
   44d98:	cmp	r2, r1
   44d9c:	str	r1, [r4, #8]
   44da0:	bge	44cd4 <__assert_fail@plt+0x326e0>
   44da4:	ldr	r1, [r4, #12]
   44da8:	add	r1, r1, r2, lsl #2
   44dac:	ldr	r3, [r1, #4]
   44db0:	add	r2, r2, #1
   44db4:	str	r3, [r1], #4
   44db8:	ldr	r3, [r4, #8]
   44dbc:	cmp	r2, r3
   44dc0:	blt	44dac <__assert_fail@plt+0x327b8>
   44dc4:	b	44cd4 <__assert_fail@plt+0x326e0>
   44dc8:	ldr	fp, [sp, #8]
   44dcc:	mov	r2, fp
   44dd0:	mov	r0, r9
   44dd4:	mov	r1, r4
   44dd8:	bl	3acf4 <__assert_fail@plt+0x28700>
   44ddc:	cmp	r0, #0
   44de0:	beq	44bc0 <__assert_fail@plt+0x325cc>
   44de4:	ldr	r0, [r4, #24]
   44de8:	bl	376d0 <__assert_fail@plt+0x250dc>
   44dec:	ldr	r0, [r4, #36]	; 0x24
   44df0:	bl	376d0 <__assert_fail@plt+0x250dc>
   44df4:	ldr	r3, [r4, #40]	; 0x28
   44df8:	ldr	r2, [sp, #16]
   44dfc:	cmp	r2, r3
   44e00:	beq	44e14 <__assert_fail@plt+0x32820>
   44e04:	ldr	r0, [r3, #8]
   44e08:	bl	376d0 <__assert_fail@plt+0x250dc>
   44e0c:	ldr	r0, [r4, #40]	; 0x28
   44e10:	bl	376d0 <__assert_fail@plt+0x250dc>
   44e14:	ldr	r0, [r4, #12]
   44e18:	bl	376d0 <__assert_fail@plt+0x250dc>
   44e1c:	ldr	r0, [r4, #48]	; 0x30
   44e20:	bl	376d0 <__assert_fail@plt+0x250dc>
   44e24:	ldr	r0, [r4, #44]	; 0x2c
   44e28:	bl	376d0 <__assert_fail@plt+0x250dc>
   44e2c:	mov	r0, r4
   44e30:	bl	376d0 <__assert_fail@plt+0x250dc>
   44e34:	ldr	r2, [sp, #12]
   44e38:	mov	r3, #12
   44e3c:	mov	r4, #0
   44e40:	mov	r0, r4
   44e44:	str	r3, [r2]
   44e48:	add	sp, sp, #28
   44e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44e50:	mov	r0, #12
   44e54:	bl	3a010 <__assert_fail@plt+0x27a1c>
   44e58:	subs	r1, r0, #0
   44e5c:	beq	44de4 <__assert_fail@plt+0x327f0>
   44e60:	ldr	r0, [r8, #4]
   44e64:	str	r1, [r4, #40]	; 0x28
   44e68:	cmp	r0, #0
   44e6c:	str	r0, [r1, #4]
   44e70:	ble	44efc <__assert_fail@plt+0x32908>
   44e74:	str	r0, [r1]
   44e78:	lsl	r0, r0, #2
   44e7c:	str	r1, [sp, #20]
   44e80:	bl	3a010 <__assert_fail@plt+0x27a1c>
   44e84:	ldr	r1, [sp, #20]
   44e88:	cmp	r0, #0
   44e8c:	str	r0, [r1, #8]
   44e90:	beq	44f10 <__assert_fail@plt+0x3291c>
   44e94:	ldr	r2, [r8, #4]
   44e98:	ldr	r1, [r8, #8]
   44e9c:	lsl	r2, r2, #2
   44ea0:	bl	12024 <memcpy@plt>
   44ea4:	ldrb	r2, [r4, #52]	; 0x34
   44ea8:	mov	r0, #0
   44eac:	orr	r2, r2, #128	; 0x80
   44eb0:	strb	r2, [r4, #52]	; 0x34
   44eb4:	b	44d78 <__assert_fail@plt+0x32784>
   44eb8:	add	r1, r4, #4
   44ebc:	mov	r3, #0
   44ec0:	str	r3, [r4, #4]
   44ec4:	str	r3, [r1, #4]
   44ec8:	str	r3, [r1, #8]
   44ecc:	ldrb	r2, [r4, #52]	; 0x34
   44ed0:	and	r3, r7, #15
   44ed4:	str	r1, [r4, #40]	; 0x28
   44ed8:	bic	r2, r2, #15
   44edc:	orr	r3, r3, r2
   44ee0:	strb	r3, [r4, #52]	; 0x34
   44ee4:	b	44dcc <__assert_fail@plt+0x327d8>
   44ee8:	str	r0, [r4, #8]
   44eec:	str	r0, [r4, #4]
   44ef0:	mov	r0, r4
   44ef4:	bl	376d0 <__assert_fail@plt+0x250dc>
   44ef8:	b	44e34 <__assert_fail@plt+0x32840>
   44efc:	mov	r3, #0
   44f00:	str	r3, [r1]
   44f04:	str	r3, [r1, #4]
   44f08:	str	r3, [r1, #8]
   44f0c:	b	44ea4 <__assert_fail@plt+0x328b0>
   44f10:	mov	sl, r1
   44f14:	str	r0, [sl, #4]
   44f18:	str	r0, [sl]
   44f1c:	b	44de4 <__assert_fail@plt+0x327f0>
   44f20:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   44f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44f28:	mov	r8, r0
   44f2c:	ldrb	r0, [r0, #28]
   44f30:	ldr	ip, [r8, #4]
   44f34:	sub	sp, sp, #148	; 0x94
   44f38:	mov	r7, r3
   44f3c:	and	r0, r0, #144	; 0x90
   44f40:	mov	r3, #0
   44f44:	cmp	ip, #159	; 0x9f
   44f48:	str	r7, [r8, #12]
   44f4c:	str	r1, [sp, #12]
   44f50:	mov	r5, r2
   44f54:	strb	r0, [r8, #28]
   44f58:	str	r3, [r8, #8]
   44f5c:	str	r3, [sp, #36]	; 0x24
   44f60:	str	r3, [r8, #24]
   44f64:	ldr	r4, [r8]
   44f68:	bls	45a08 <__assert_fail@plt+0x33414>
   44f6c:	mov	r2, #160	; 0xa0
   44f70:	str	r2, [r8, #8]
   44f74:	mov	r1, #0
   44f78:	mov	r0, r4
   44f7c:	bl	12378 <memset@plt>
   44f80:	ldr	r2, [pc, #4084]	; 45f7c <__assert_fail@plt+0x33988>
   44f84:	mov	r3, #31
   44f88:	cmp	r5, r2
   44f8c:	str	r3, [r4, #64]	; 0x40
   44f90:	bhi	4532c <__assert_fail@plt+0x32d38>
   44f94:	add	r3, r5, #1
   44f98:	str	r3, [r4, #4]
   44f9c:	lsl	r0, r3, #3
   44fa0:	str	r3, [sp, #16]
   44fa4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   44fa8:	cmp	r5, #0
   44fac:	str	r0, [r4]
   44fb0:	beq	45a84 <__assert_fail@plt+0x33490>
   44fb4:	mov	r1, #1
   44fb8:	lsl	r1, r1, #1
   44fbc:	cmp	r5, r1
   44fc0:	bcs	44fb8 <__assert_fail@plt+0x329c4>
   44fc4:	sub	sl, r1, #1
   44fc8:	mov	r0, #12
   44fcc:	bl	37128 <__assert_fail@plt+0x24b34>
   44fd0:	str	sl, [r4, #68]	; 0x44
   44fd4:	str	r0, [r4, #32]
   44fd8:	bl	12198 <__ctype_get_mb_cur_max@plt>
   44fdc:	str	r0, [r4, #92]	; 0x5c
   44fe0:	mov	r0, #14
   44fe4:	bl	12480 <nl_langinfo@plt>
   44fe8:	ldrb	r3, [r0]
   44fec:	and	r3, r3, #223	; 0xdf
   44ff0:	cmp	r3, #85	; 0x55
   44ff4:	bne	45018 <__assert_fail@plt+0x32a24>
   44ff8:	ldrb	r3, [r0, #1]
   44ffc:	and	r3, r3, #223	; 0xdf
   45000:	cmp	r3, #84	; 0x54
   45004:	bne	45018 <__assert_fail@plt+0x32a24>
   45008:	ldrb	r3, [r0, #2]
   4500c:	and	r3, r3, #223	; 0xdf
   45010:	cmp	r3, #70	; 0x46
   45014:	beq	45798 <__assert_fail@plt+0x331a4>
   45018:	ldrb	r3, [r4, #88]	; 0x58
   4501c:	ldr	r2, [r4, #92]	; 0x5c
   45020:	bic	r3, r3, #8
   45024:	cmp	r2, #1
   45028:	strb	r3, [r4, #88]	; 0x58
   4502c:	ble	45044 <__assert_fail@plt+0x32a50>
   45030:	uxtb	r3, r3
   45034:	ands	r6, r3, #4
   45038:	beq	45720 <__assert_fail@plt+0x3312c>
   4503c:	ldr	r3, [pc, #3900]	; 45f80 <__assert_fail@plt+0x3398c>
   45040:	str	r3, [r4, #60]	; 0x3c
   45044:	ldr	r3, [r4]
   45048:	cmp	r3, #0
   4504c:	beq	4532c <__assert_fail@plt+0x32d38>
   45050:	ldr	r3, [r4, #32]
   45054:	cmp	r3, #0
   45058:	beq	4532c <__assert_fail@plt+0x32d38>
   4505c:	ldr	r2, [pc, #3872]	; 45f84 <__assert_fail@plt+0x33990>
   45060:	mov	r3, #0
   45064:	ldr	r1, [pc, #3868]	; 45f88 <__assert_fail@plt+0x33994>
   45068:	cmp	r2, r3
   4506c:	str	r3, [sp, #36]	; 0x24
   45070:	mov	r3, #1
   45074:	moveq	r3, r2
   45078:	cmp	r1, #0
   4507c:	mov	r2, #1
   45080:	moveq	r2, r1
   45084:	orr	r3, r3, r2
   45088:	ands	r3, r3, #255	; 0xff
   4508c:	str	r3, [sp, #24]
   45090:	beq	450b4 <__assert_fail@plt+0x32ac0>
   45094:	mov	r1, #0
   45098:	add	r0, r4, #136	; 0x88
   4509c:	bl	1203c <pthread_mutex_init@plt>
   450a0:	cmp	r0, #0
   450a4:	bne	4532c <__assert_fail@plt+0x32d38>
   450a8:	ldr	r3, [sp, #36]	; 0x24
   450ac:	cmp	r3, #0
   450b0:	bne	45238 <__assert_fail@plt+0x32c44>
   450b4:	ands	r3, r7, #4194304	; 0x400000
   450b8:	mov	r1, #0
   450bc:	mov	r2, #84	; 0x54
   450c0:	add	r0, sp, #60	; 0x3c
   450c4:	moveq	fp, r1
   450c8:	movne	fp, #1
   450cc:	ldr	sl, [r8, #20]
   450d0:	str	r3, [sp, #20]
   450d4:	bl	12378 <memset@plt>
   450d8:	ldrb	r2, [r4, #88]	; 0x58
   450dc:	ldr	ip, [sp, #12]
   450e0:	ldr	r1, [r4, #92]	; 0x5c
   450e4:	cmp	sl, #0
   450e8:	moveq	r3, fp
   450ec:	orrne	r3, fp, #1
   450f0:	lsr	r0, r2, #2
   450f4:	lsr	r2, r2, #3
   450f8:	and	r0, r0, #1
   450fc:	and	r2, r2, #1
   45100:	cmp	r5, #0
   45104:	str	ip, [sp, #60]	; 0x3c
   45108:	strb	fp, [sp, #132]	; 0x84
   4510c:	strb	r3, [sp, #135]	; 0x87
   45110:	str	sl, [sp, #124]	; 0x7c
   45114:	str	r5, [sp, #108]	; 0x6c
   45118:	str	r5, [sp, #104]	; 0x68
   4511c:	str	r5, [sp, #116]	; 0x74
   45120:	str	r5, [sp, #112]	; 0x70
   45124:	mov	ip, r3
   45128:	strb	r0, [sp, #133]	; 0x85
   4512c:	strb	r2, [sp, #134]	; 0x86
   45130:	str	r1, [sp, #140]	; 0x8c
   45134:	beq	45258 <__assert_fail@plt+0x32c64>
   45138:	ldr	r2, [sp, #16]
   4513c:	cmp	r1, #1
   45140:	mov	sl, r2
   45144:	ble	4519c <__assert_fail@plt+0x32ba8>
   45148:	lsl	fp, r2, #2
   4514c:	mov	r1, fp
   45150:	mov	r0, #0
   45154:	str	r3, [sp, #28]
   45158:	bl	3aacc <__assert_fail@plt+0x284d8>
   4515c:	subs	r2, r0, #0
   45160:	beq	451b8 <__assert_fail@plt+0x32bc4>
   45164:	ldr	r0, [sp, #72]	; 0x48
   45168:	str	r2, [sp, #68]	; 0x44
   4516c:	cmp	r0, #0
   45170:	ldr	r3, [sp, #28]
   45174:	ldrbeq	ip, [sp, #135]	; 0x87
   45178:	beq	4519c <__assert_fail@plt+0x32ba8>
   4517c:	mov	r1, fp
   45180:	str	r3, [sp, #28]
   45184:	bl	3aacc <__assert_fail@plt+0x284d8>
   45188:	cmp	r0, #0
   4518c:	beq	451b8 <__assert_fail@plt+0x32bc4>
   45190:	ldrb	ip, [sp, #135]	; 0x87
   45194:	ldr	r3, [sp, #28]
   45198:	str	r0, [sp, #72]	; 0x48
   4519c:	cmp	ip, #0
   451a0:	bne	459e0 <__assert_fail@plt+0x333ec>
   451a4:	ldr	r2, [sp, #16]
   451a8:	ldr	r1, [r4, #92]	; 0x5c
   451ac:	str	r2, [sp, #96]	; 0x60
   451b0:	b	4525c <__assert_fail@plt+0x32c68>
   451b4:	ldr	r4, [sp, #16]
   451b8:	mov	r0, #12
   451bc:	str	r0, [sp, #36]	; 0x24
   451c0:	ldr	r6, [r8]
   451c4:	ldr	r0, [r6, #56]	; 0x38
   451c8:	cmp	r0, #0
   451cc:	beq	451e0 <__assert_fail@plt+0x32bec>
   451d0:	ldr	r5, [r0]
   451d4:	bl	376d0 <__assert_fail@plt+0x250dc>
   451d8:	subs	r0, r5, #0
   451dc:	bne	451d0 <__assert_fail@plt+0x32bdc>
   451e0:	mov	r3, #31
   451e4:	mov	r5, #0
   451e8:	str	r3, [r6, #64]	; 0x40
   451ec:	ldr	r0, [r6, #16]
   451f0:	str	r5, [r6, #56]	; 0x38
   451f4:	str	r5, [r6, #52]	; 0x34
   451f8:	bl	376d0 <__assert_fail@plt+0x250dc>
   451fc:	ldr	r0, [sp, #68]	; 0x44
   45200:	str	r5, [r6, #16]
   45204:	bl	376d0 <__assert_fail@plt+0x250dc>
   45208:	ldr	r0, [sp, #72]	; 0x48
   4520c:	bl	376d0 <__assert_fail@plt+0x250dc>
   45210:	ldrb	r3, [sp, #135]	; 0x87
   45214:	cmp	r3, r5
   45218:	beq	45224 <__assert_fail@plt+0x32c30>
   4521c:	ldr	r0, [sp, #64]	; 0x40
   45220:	bl	376d0 <__assert_fail@plt+0x250dc>
   45224:	ldr	r3, [sp, #24]
   45228:	cmp	r3, #0
   4522c:	beq	45238 <__assert_fail@plt+0x32c44>
   45230:	add	r0, r4, #136	; 0x88
   45234:	bl	11f70 <pthread_mutex_destroy@plt>
   45238:	mov	r0, r4
   4523c:	bl	3e53c <__assert_fail@plt+0x2bf48>
   45240:	ldr	r0, [sp, #36]	; 0x24
   45244:	mov	r3, #0
   45248:	str	r3, [r8]
   4524c:	str	r3, [r8, #4]
   45250:	add	sp, sp, #148	; 0x94
   45254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45258:	mov	sl, r5
   4525c:	cmp	ip, #0
   45260:	ldrne	r6, [sp, #64]	; 0x40
   45264:	ldreq	r6, [sp, #12]
   45268:	ands	r2, r7, #4194304	; 0x400000
   4526c:	cmp	r2, #0
   45270:	str	r6, [sp, #64]	; 0x40
   45274:	beq	45698 <__assert_fail@plt+0x330a4>
   45278:	cmp	r1, #1
   4527c:	ble	461e4 <__assert_fail@plt+0x33bf0>
   45280:	add	r0, sp, #60	; 0x3c
   45284:	bl	3afd0 <__assert_fail@plt+0x289dc>
   45288:	cmp	r0, #0
   4528c:	bne	451bc <__assert_fail@plt+0x32bc8>
   45290:	ldr	r3, [sp, #92]	; 0x5c
   45294:	cmp	r5, r3
   45298:	ble	45340 <__assert_fail@plt+0x32d4c>
   4529c:	ldr	r2, [sp, #88]	; 0x58
   452a0:	ldr	r1, [r4, #92]	; 0x5c
   452a4:	ldr	r3, [sp, #96]	; 0x60
   452a8:	add	r2, r2, r1
   452ac:	cmp	r3, r2
   452b0:	bgt	45340 <__assert_fail@plt+0x32d4c>
   452b4:	ldr	r2, [sp, #140]	; 0x8c
   452b8:	lsl	r9, r3, #1
   452bc:	cmp	r2, #1
   452c0:	ble	45308 <__assert_fail@plt+0x32d14>
   452c4:	cmn	r9, #-1073741823	; 0xc0000001
   452c8:	bhi	451b8 <__assert_fail@plt+0x32bc4>
   452cc:	lsl	r6, r3, #3
   452d0:	mov	r1, r6
   452d4:	ldr	r0, [sp, #68]	; 0x44
   452d8:	bl	3aacc <__assert_fail@plt+0x284d8>
   452dc:	subs	r3, r0, #0
   452e0:	beq	451b8 <__assert_fail@plt+0x32bc4>
   452e4:	ldr	r0, [sp, #72]	; 0x48
   452e8:	str	r3, [sp, #68]	; 0x44
   452ec:	cmp	r0, #0
   452f0:	beq	45308 <__assert_fail@plt+0x32d14>
   452f4:	mov	r1, r6
   452f8:	bl	3aacc <__assert_fail@plt+0x284d8>
   452fc:	cmp	r0, #0
   45300:	beq	451b8 <__assert_fail@plt+0x32bc4>
   45304:	str	r0, [sp, #72]	; 0x48
   45308:	ldrb	r3, [sp, #135]	; 0x87
   4530c:	cmp	r3, #0
   45310:	bne	45704 <__assert_fail@plt+0x33110>
   45314:	add	r0, sp, #60	; 0x3c
   45318:	str	r9, [sp, #96]	; 0x60
   4531c:	bl	3afd0 <__assert_fail@plt+0x289dc>
   45320:	cmp	r0, #0
   45324:	beq	45290 <__assert_fail@plt+0x32c9c>
   45328:	b	451bc <__assert_fail@plt+0x32bc8>
   4532c:	mov	r3, #12
   45330:	str	r3, [sp, #36]	; 0x24
   45334:	b	45238 <__assert_fail@plt+0x32c44>
   45338:	add	r0, sp, #60	; 0x3c
   4533c:	bl	3ae30 <__assert_fail@plt+0x2883c>
   45340:	ldr	r5, [r8]
   45344:	mov	r6, #0
   45348:	str	r6, [r8, #24]
   4534c:	orr	r2, r7, #8388608	; 0x800000
   45350:	add	r1, sp, #60	; 0x3c
   45354:	add	r0, sp, #40	; 0x28
   45358:	str	r7, [r5, #128]	; 0x80
   4535c:	str	r6, [sp, #36]	; 0x24
   45360:	bl	3da6c <__assert_fail@plt+0x2b478>
   45364:	ldr	ip, [sp, #100]	; 0x64
   45368:	add	r1, sp, #36	; 0x24
   4536c:	str	r6, [sp]
   45370:	add	r2, sp, #40	; 0x28
   45374:	str	r1, [sp, #4]
   45378:	mov	r3, r7
   4537c:	mov	r1, r8
   45380:	add	ip, ip, r0
   45384:	add	r0, sp, #60	; 0x3c
   45388:	str	ip, [sp, #100]	; 0x64
   4538c:	bl	448bc <__assert_fail@plt+0x322c8>
   45390:	ldr	r6, [sp, #36]	; 0x24
   45394:	adds	r6, r6, #0
   45398:	movne	r6, #1
   4539c:	cmp	r0, #0
   453a0:	movne	r6, #0
   453a4:	cmp	r6, #0
   453a8:	mov	r2, r0
   453ac:	bne	45a44 <__assert_fail@plt+0x33450>
   453b0:	add	fp, sp, #48	; 0x30
   453b4:	str	r6, [sp, #48]	; 0x30
   453b8:	str	r6, [fp, #4]
   453bc:	ldr	r3, [r5, #64]	; 0x40
   453c0:	cmp	r3, #31
   453c4:	beq	45a50 <__assert_fail@plt+0x3345c>
   453c8:	lsl	ip, r3, #5
   453cc:	ldr	lr, [r5, #56]	; 0x38
   453d0:	add	r1, r3, #1
   453d4:	add	r3, ip, #4
   453d8:	add	ip, lr, ip
   453dc:	mov	r6, #0
   453e0:	mov	r0, #2
   453e4:	str	r1, [r5, #64]	; 0x40
   453e8:	str	r6, [ip, #4]
   453ec:	str	r6, [ip, #8]
   453f0:	str	r6, [ip, #12]
   453f4:	strb	r0, [sp, #52]	; 0x34
   453f8:	ldm	fp, {r0, r1}
   453fc:	add	r7, ip, #24
   45400:	cmp	r2, r6
   45404:	stm	r7, {r0, r1}
   45408:	ldrb	r1, [ip, #30]
   4540c:	mvn	r0, #0
   45410:	add	r3, lr, r3
   45414:	and	r1, r1, #243	; 0xf3
   45418:	str	r6, [ip, #16]
   4541c:	str	r6, [ip, #20]
   45420:	clz	r6, r3
   45424:	lsr	r6, r6, #5
   45428:	strb	r1, [ip, #30]
   4542c:	str	r0, [ip, #32]
   45430:	moveq	r2, r6
   45434:	beq	45468 <__assert_fail@plt+0x32e74>
   45438:	mov	r1, #0
   4543c:	str	fp, [sp]
   45440:	mov	ip, #16
   45444:	str	r1, [fp, #4]
   45448:	str	r1, [sp, #48]	; 0x30
   4544c:	add	r0, r5, #56	; 0x38
   45450:	add	r1, r5, #64	; 0x40
   45454:	strb	ip, [sp, #52]	; 0x34
   45458:	bl	3b8ac <__assert_fail@plt+0x292b8>
   4545c:	clz	r2, r0
   45460:	mov	r3, r0
   45464:	lsr	r2, r2, #5
   45468:	orrs	r2, r6, r2
   4546c:	str	r2, [sp, #12]
   45470:	bne	45a3c <__assert_fail@plt+0x33448>
   45474:	ldr	r6, [r8]
   45478:	str	r3, [r4, #52]	; 0x34
   4547c:	ldr	r0, [r6, #4]
   45480:	lsl	r0, r0, #2
   45484:	bl	3a010 <__assert_fail@plt+0x27a1c>
   45488:	ldr	r3, [r6, #4]
   4548c:	str	r0, [r6, #12]
   45490:	lsl	r0, r3, #2
   45494:	bl	3a010 <__assert_fail@plt+0x27a1c>
   45498:	ldr	r3, [r6, #4]
   4549c:	add	r3, r3, r3, lsl #1
   454a0:	str	r0, [r6, #16]
   454a4:	lsl	r0, r3, #2
   454a8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   454ac:	ldr	r3, [r6, #4]
   454b0:	add	r3, r3, r3, lsl #1
   454b4:	str	r0, [r6, #20]
   454b8:	lsl	r0, r3, #2
   454bc:	bl	3a010 <__assert_fail@plt+0x27a1c>
   454c0:	ldr	r3, [r6, #12]
   454c4:	cmp	r3, #0
   454c8:	str	r0, [r6, #24]
   454cc:	beq	451b8 <__assert_fail@plt+0x32bc4>
   454d0:	ldr	r3, [r6, #16]
   454d4:	cmp	r3, #0
   454d8:	beq	451b8 <__assert_fail@plt+0x32bc4>
   454dc:	ldr	r3, [r6, #20]
   454e0:	cmp	r3, #0
   454e4:	beq	45918 <__assert_fail@plt+0x33324>
   454e8:	cmp	r0, #0
   454ec:	beq	451b8 <__assert_fail@plt+0x32bc4>
   454f0:	ldr	r0, [r8, #24]
   454f4:	lsl	r0, r0, #2
   454f8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   454fc:	cmp	r0, #0
   45500:	str	r0, [r6, #132]	; 0x84
   45504:	ldreq	r5, [r6, #52]	; 0x34
   45508:	beq	455f4 <__assert_fail@plt+0x33000>
   4550c:	ldr	r2, [r8, #24]
   45510:	cmp	r2, #0
   45514:	subne	r1, r0, #4
   45518:	ldrne	r3, [sp, #12]
   4551c:	beq	45530 <__assert_fail@plt+0x32f3c>
   45520:	str	r3, [r1, #4]!
   45524:	add	r3, r3, #1
   45528:	cmp	r3, r2
   4552c:	bne	45520 <__assert_fail@plt+0x32f2c>
   45530:	ldr	r5, [r6, #52]	; 0x34
   45534:	mov	r9, #0
   45538:	mov	r3, r5
   4553c:	ldrb	ip, [r5, #24]
   45540:	mov	lr, #1
   45544:	cmp	ip, #4
   45548:	beq	45570 <__assert_fail@plt+0x32f7c>
   4554c:	cmp	ip, #17
   45550:	beq	457c8 <__assert_fail@plt+0x331d4>
   45554:	ldr	r1, [r3, #4]
   45558:	cmp	r1, #0
   4555c:	beq	45594 <__assert_fail@plt+0x32fa0>
   45560:	ldrb	ip, [r1, #24]
   45564:	mov	r3, r1
   45568:	cmp	ip, #4
   4556c:	bne	4554c <__assert_fail@plt+0x32f58>
   45570:	ldr	ip, [r3, #20]
   45574:	ldr	r1, [r3, #4]
   45578:	ldr	r7, [r0, ip, lsl #2]
   4557c:	cmp	r1, #0
   45580:	str	r7, [r3, #20]
   45584:	ldr	ip, [r6, #80]	; 0x50
   45588:	orr	ip, ip, lr, lsl r7
   4558c:	str	ip, [r6, #80]	; 0x50
   45590:	bne	45560 <__assert_fail@plt+0x32f6c>
   45594:	mov	ip, r9
   45598:	b	455a0 <__assert_fail@plt+0x32fac>
   4559c:	mov	r3, r1
   455a0:	ldr	r1, [r3, #8]
   455a4:	cmp	r1, #0
   455a8:	cmpne	r1, ip
   455ac:	bne	45560 <__assert_fail@plt+0x32f6c>
   455b0:	ldr	r1, [r3]
   455b4:	mov	ip, r3
   455b8:	cmp	r1, #0
   455bc:	bne	4559c <__assert_fail@plt+0x32fa8>
   455c0:	cmp	r2, #0
   455c4:	beq	461bc <__assert_fail@plt+0x33bc8>
   455c8:	ldr	r3, [r0]
   455cc:	cmp	r3, #0
   455d0:	beq	455e4 <__assert_fail@plt+0x32ff0>
   455d4:	b	455f4 <__assert_fail@plt+0x33000>
   455d8:	ldr	r1, [r0, r3, lsl #2]
   455dc:	cmp	r1, r3
   455e0:	bne	455f4 <__assert_fail@plt+0x33000>
   455e4:	add	r3, r3, #1
   455e8:	cmp	r3, r2
   455ec:	bcc	455d8 <__assert_fail@plt+0x32fe4>
   455f0:	beq	461bc <__assert_fail@plt+0x33bc8>
   455f4:	mov	r7, #0
   455f8:	b	45600 <__assert_fail@plt+0x3300c>
   455fc:	mov	r5, r3
   45600:	ldr	r3, [r5, #4]
   45604:	cmp	r3, #0
   45608:	bne	455fc <__assert_fail@plt+0x33008>
   4560c:	ldr	r3, [r5, #8]
   45610:	cmp	r3, #0
   45614:	bne	455fc <__assert_fail@plt+0x33008>
   45618:	mov	r2, r7
   4561c:	b	45650 <__assert_fail@plt+0x3305c>
   45620:	ldr	r0, [sp, #48]	; 0x30
   45624:	cmp	r0, #0
   45628:	bne	451bc <__assert_fail@plt+0x32bc8>
   4562c:	ldr	r1, [r5]
   45630:	cmp	r1, #0
   45634:	beq	45844 <__assert_fail@plt+0x33250>
   45638:	ldr	r2, [r1, #8]
   4563c:	cmp	r5, r2
   45640:	cmpne	r2, #0
   45644:	bne	461d0 <__assert_fail@plt+0x33bdc>
   45648:	ldr	r3, [r1, #4]
   4564c:	mov	r5, r1
   45650:	cmp	r3, #0
   45654:	str	r7, [sp, #48]	; 0x30
   45658:	beq	45668 <__assert_fail@plt+0x33074>
   4565c:	ldrb	r1, [r3, #24]
   45660:	cmp	r1, #17
   45664:	beq	45818 <__assert_fail@plt+0x33224>
   45668:	cmp	r2, #0
   4566c:	beq	4562c <__assert_fail@plt+0x33038>
   45670:	ldrb	r3, [r2, #24]
   45674:	cmp	r3, #17
   45678:	bne	45620 <__assert_fail@plt+0x3302c>
   4567c:	mov	r1, r8
   45680:	mov	r0, fp
   45684:	bl	40c54 <__assert_fail@plt+0x2e660>
   45688:	cmp	r0, #0
   4568c:	str	r0, [r5, #8]
   45690:	strne	r5, [r0]
   45694:	b	45620 <__assert_fail@plt+0x3302c>
   45698:	cmp	r1, #1
   4569c:	bgt	45338 <__assert_fail@plt+0x32d44>
   456a0:	cmp	r3, #0
   456a4:	beq	461d8 <__assert_fail@plt+0x33be4>
   456a8:	ldr	r2, [sp, #108]	; 0x6c
   456ac:	ldr	r3, [sp, #88]	; 0x58
   456b0:	cmp	sl, r2
   456b4:	movge	sl, r2
   456b8:	cmp	sl, r3
   456bc:	bgt	456d0 <__assert_fail@plt+0x330dc>
   456c0:	str	r3, [sp, #88]	; 0x58
   456c4:	str	r3, [sp, #92]	; 0x5c
   456c8:	b	45340 <__assert_fail@plt+0x32d4c>
   456cc:	ldr	r6, [sp, #64]	; 0x40
   456d0:	ldr	r2, [sp, #60]	; 0x3c
   456d4:	ldr	r0, [sp, #84]	; 0x54
   456d8:	add	r2, r2, r3
   456dc:	ldr	r1, [sp, #124]	; 0x7c
   456e0:	ldrb	r2, [r2, r0]
   456e4:	ldrb	r2, [r1, r2]
   456e8:	strb	r2, [r6, r3]
   456ec:	add	r3, r3, #1
   456f0:	cmp	sl, r3
   456f4:	bne	456cc <__assert_fail@plt+0x330d8>
   456f8:	str	r3, [sp, #88]	; 0x58
   456fc:	str	r3, [sp, #92]	; 0x5c
   45700:	b	45340 <__assert_fail@plt+0x32d4c>
   45704:	mov	r1, r9
   45708:	ldr	r0, [sp, #64]	; 0x40
   4570c:	bl	3aacc <__assert_fail@plt+0x284d8>
   45710:	cmp	r0, #0
   45714:	beq	451b8 <__assert_fail@plt+0x32bc4>
   45718:	str	r0, [sp, #64]	; 0x40
   4571c:	b	45314 <__assert_fail@plt+0x32d20>
   45720:	mov	r1, #1
   45724:	mov	r0, #32
   45728:	bl	37128 <__assert_fail@plt+0x24b34>
   4572c:	cmp	r0, #0
   45730:	str	r0, [r4, #60]	; 0x3c
   45734:	beq	4532c <__assert_fail@plt+0x32d38>
   45738:	mov	fp, #1
   4573c:	lsl	r9, r6, #3
   45740:	mov	sl, #0
   45744:	mov	r0, r9
   45748:	bl	123a8 <btowc@plt>
   4574c:	cmn	r0, #1
   45750:	ldrne	r2, [r4, #60]	; 0x3c
   45754:	ldrne	r3, [r2, r6]
   45758:	orrne	r3, r3, fp, lsl sl
   4575c:	strne	r3, [r2, r6]
   45760:	bics	r3, r9, #127	; 0x7f
   45764:	bne	45778 <__assert_fail@plt+0x33184>
   45768:	cmp	r0, r9
   4576c:	ldrbne	r3, [r4, #88]	; 0x58
   45770:	orrne	r3, r3, #8
   45774:	strbne	r3, [r4, #88]	; 0x58
   45778:	add	sl, sl, #1
   4577c:	cmp	sl, #32
   45780:	add	r9, r9, #1
   45784:	bne	45744 <__assert_fail@plt+0x33150>
   45788:	add	r6, r6, #4
   4578c:	cmp	r6, #32
   45790:	bne	4573c <__assert_fail@plt+0x33148>
   45794:	b	45044 <__assert_fail@plt+0x32a50>
   45798:	ldrb	r3, [r0, #3]
   4579c:	ldr	r1, [pc, #2024]	; 45f8c <__assert_fail@plt+0x33998>
   457a0:	cmp	r3, #45	; 0x2d
   457a4:	moveq	r3, #4
   457a8:	movne	r3, #3
   457ac:	add	r0, r0, r3
   457b0:	bl	11f40 <strcmp@plt>
   457b4:	cmp	r0, #0
   457b8:	ldrbeq	r3, [r4, #88]	; 0x58
   457bc:	orreq	r3, r3, #4
   457c0:	strbeq	r3, [r4, #88]	; 0x58
   457c4:	b	45018 <__assert_fail@plt+0x32a24>
   457c8:	ldr	r7, [r3, #4]
   457cc:	cmp	r7, #0
   457d0:	beq	45594 <__assert_fail@plt+0x32fa0>
   457d4:	ldrb	ip, [r7, #24]
   457d8:	cmp	ip, #17
   457dc:	movne	r3, r7
   457e0:	bne	45544 <__assert_fail@plt+0x32f50>
   457e4:	ldr	r1, [r7, #4]
   457e8:	ldr	ip, [r7, #20]
   457ec:	cmp	r1, #0
   457f0:	str	r1, [r3, #4]
   457f4:	strne	r3, [r1]
   457f8:	ldr	r7, [r3, #20]
   457fc:	cmp	ip, #31
   45800:	ldr	r7, [r0, r7, lsl #2]
   45804:	str	r7, [r0, ip, lsl #2]
   45808:	ldrle	r7, [r6, #80]	; 0x50
   4580c:	bicle	ip, r7, lr, lsl ip
   45810:	strle	ip, [r6, #80]	; 0x50
   45814:	b	45558 <__assert_fail@plt+0x32f64>
   45818:	mov	r2, r3
   4581c:	mov	r1, r8
   45820:	mov	r0, fp
   45824:	bl	40c54 <__assert_fail@plt+0x2e660>
   45828:	ldr	r2, [r5, #8]
   4582c:	cmp	r0, #0
   45830:	str	r0, [r5, #4]
   45834:	strne	r5, [r0]
   45838:	cmp	r2, #0
   4583c:	bne	45670 <__assert_fail@plt+0x3307c>
   45840:	b	45620 <__assert_fail@plt+0x3302c>
   45844:	ldr	r9, [r6, #52]	; 0x34
   45848:	ldr	r7, [pc, #1856]	; 45f90 <__assert_fail@plt+0x3399c>
   4584c:	ldr	r5, [pc, #1856]	; 45f94 <__assert_fail@plt+0x339a0>
   45850:	b	45858 <__assert_fail@plt+0x33264>
   45854:	mov	r9, r3
   45858:	ldr	r3, [r9, #4]
   4585c:	cmp	r3, #0
   45860:	bne	45854 <__assert_fail@plt+0x33260>
   45864:	ldr	r3, [r9, #8]
   45868:	cmp	r3, #0
   4586c:	bne	45854 <__assert_fail@plt+0x33260>
   45870:	b	458ec <__assert_fail@plt+0x332f8>
   45874:	add	r3, r9, #20
   45878:	str	r9, [r9, #12]
   4587c:	ldm	r3, {r1, r2}
   45880:	mov	r0, r6
   45884:	bl	3b54c <__assert_fail@plt+0x28f58>
   45888:	cmn	r0, #1
   4588c:	str	r0, [r9, #28]
   45890:	beq	451b8 <__assert_fail@plt+0x32bc4>
   45894:	ldrb	r3, [r9, #24]
   45898:	cmp	r3, #12
   4589c:	bne	458c0 <__assert_fail@plt+0x332cc>
   458a0:	ldr	r3, [r6]
   458a4:	ldr	r2, [r9, #20]
   458a8:	add	r0, r3, r0, lsl #3
   458ac:	and	r2, r2, r7
   458b0:	ldr	r3, [r0, #4]
   458b4:	bic	r3, r3, r5
   458b8:	orr	r3, r3, r2, lsl #8
   458bc:	str	r3, [r0, #4]
   458c0:	ldr	r2, [r9]
   458c4:	cmp	r2, #0
   458c8:	beq	45924 <__assert_fail@plt+0x33330>
   458cc:	ldr	r3, [r2, #8]
   458d0:	cmp	r3, #0
   458d4:	cmpne	r9, r3
   458d8:	moveq	r9, #1
   458dc:	movne	r9, #0
   458e0:	cmp	r9, #0
   458e4:	mov	r9, r2
   458e8:	beq	45854 <__assert_fail@plt+0x33260>
   458ec:	ldrb	r3, [r9, #24]
   458f0:	cmp	r3, #16
   458f4:	bne	45874 <__assert_fail@plt+0x33280>
   458f8:	ldr	r3, [r9, #4]
   458fc:	ldr	r2, [r3, #12]
   45900:	ldr	r3, [r3, #28]
   45904:	str	r2, [r9, #12]
   45908:	str	r3, [r9, #28]
   4590c:	b	458c0 <__assert_fail@plt+0x332cc>
   45910:	ldr	r4, [sp, #12]
   45914:	ldr	r8, [sp, #16]
   45918:	mov	r3, #12
   4591c:	str	r3, [sp, #36]	; 0x24
   45920:	b	451c0 <__assert_fail@plt+0x32bcc>
   45924:	ldr	r7, [r6, #52]	; 0x34
   45928:	mov	r3, r7
   4592c:	ldrb	r1, [r3, #24]
   45930:	cmp	r1, #11
   45934:	beq	45964 <__assert_fail@plt+0x33370>
   45938:	cmp	r1, #16
   4593c:	bne	45974 <__assert_fail@plt+0x33380>
   45940:	ldmib	r3, {r0, r1}
   45944:	ldr	ip, [r1, #12]
   45948:	str	ip, [r0, #16]
   4594c:	ldr	ip, [r3, #16]
   45950:	mov	r3, r0
   45954:	str	ip, [r1, #16]
   45958:	ldrb	r1, [r3, #24]
   4595c:	cmp	r1, #11
   45960:	bne	45938 <__assert_fail@plt+0x33344>
   45964:	ldr	r1, [r3, #4]
   45968:	str	r3, [r1, #16]
   4596c:	mov	r3, r1
   45970:	b	4592c <__assert_fail@plt+0x33338>
   45974:	ldmib	r3, {r0, ip}
   45978:	cmp	r0, #0
   4597c:	beq	4619c <__assert_fail@plt+0x33ba8>
   45980:	ldr	r1, [r3, #16]
   45984:	cmp	ip, #0
   45988:	str	r1, [r0, #16]
   4598c:	beq	459a0 <__assert_fail@plt+0x333ac>
   45990:	ldr	r1, [r3, #16]
   45994:	cmp	r0, #0
   45998:	str	r1, [ip, #16]
   4599c:	beq	459a8 <__assert_fail@plt+0x333b4>
   459a0:	mov	r3, r0
   459a4:	b	4592c <__assert_fail@plt+0x33338>
   459a8:	mov	r1, ip
   459ac:	mov	r0, r2
   459b0:	b	459cc <__assert_fail@plt+0x333d8>
   459b4:	ldr	r9, [r3]
   459b8:	cmp	r9, #0
   459bc:	beq	45a90 <__assert_fail@plt+0x3349c>
   459c0:	ldr	r1, [r9, #8]
   459c4:	mov	r0, r3
   459c8:	mov	r3, r9
   459cc:	cmp	r1, r0
   459d0:	cmpne	r1, #0
   459d4:	beq	459b4 <__assert_fail@plt+0x333c0>
   459d8:	mov	r3, r1
   459dc:	b	4592c <__assert_fail@plt+0x33338>
   459e0:	ldr	r1, [sp, #16]
   459e4:	ldr	r0, [sp, #64]	; 0x40
   459e8:	str	r3, [sp, #28]
   459ec:	bl	3aacc <__assert_fail@plt+0x284d8>
   459f0:	cmp	r0, #0
   459f4:	beq	451b8 <__assert_fail@plt+0x32bc4>
   459f8:	ldrb	ip, [sp, #135]	; 0x87
   459fc:	str	r0, [sp, #64]	; 0x40
   45a00:	ldr	r3, [sp, #28]
   45a04:	b	451a4 <__assert_fail@plt+0x32bb0>
   45a08:	mov	r0, r4
   45a0c:	mov	r1, #160	; 0xa0
   45a10:	bl	3aacc <__assert_fail@plt+0x284d8>
   45a14:	subs	r4, r0, #0
   45a18:	beq	46248 <__assert_fail@plt+0x33c54>
   45a1c:	mov	r3, #160	; 0xa0
   45a20:	str	r4, [r8]
   45a24:	str	r3, [r8, #4]
   45a28:	b	44f6c <__assert_fail@plt+0x32978>
   45a2c:	cmp	r2, #0
   45a30:	movne	r3, lr
   45a34:	movne	r6, #1
   45a38:	bne	45438 <__assert_fail@plt+0x32e44>
   45a3c:	mov	r3, #12
   45a40:	str	r3, [sp, #36]	; 0x24
   45a44:	mov	r3, #0
   45a48:	str	r3, [r4, #52]	; 0x34
   45a4c:	b	451c0 <__assert_fail@plt+0x32bcc>
   45a50:	mov	r0, #996	; 0x3e4
   45a54:	str	r2, [sp, #12]
   45a58:	bl	3a010 <__assert_fail@plt+0x27a1c>
   45a5c:	ldr	r2, [sp, #12]
   45a60:	subs	lr, r0, #0
   45a64:	beq	45a2c <__assert_fail@plt+0x33438>
   45a68:	ldr	r0, [r5, #56]	; 0x38
   45a6c:	mov	ip, r6
   45a70:	str	r0, [lr]
   45a74:	mov	r1, #1
   45a78:	mov	r3, #4
   45a7c:	str	lr, [r5, #56]	; 0x38
   45a80:	b	453d8 <__assert_fail@plt+0x32de4>
   45a84:	mov	sl, r5
   45a88:	mov	r1, #1
   45a8c:	b	44fc8 <__assert_fail@plt+0x329d4>
   45a90:	str	r4, [sp, #16]
   45a94:	ldrb	r3, [r7, #24]
   45a98:	ldr	r2, [r7, #28]
   45a9c:	sub	r3, r3, #2
   45aa0:	cmp	r3, #14
   45aa4:	ldrls	pc, [pc, r3, lsl #2]
   45aa8:	b	45c64 <__assert_fail@plt+0x33670>
   45aac:	andeq	r5, r4, ip, ror #22
   45ab0:	andeq	r5, r4, r4, ror #24
   45ab4:	andeq	r5, r4, r4, lsr ip
   45ab8:	andeq	r5, r4, r4, ror #24
   45abc:	andeq	r5, r4, r4, ror #24
   45ac0:	andeq	r5, r4, r4, ror #24
   45ac4:	strdeq	r5, [r4], -r8
   45ac8:	strdeq	r5, [r4], -r8
   45acc:	andeq	r5, r4, r8, ror #21
   45ad0:	andeq	r5, r4, r8, ror #21
   45ad4:	strdeq	r5, [r4], -r8
   45ad8:	andeq	r5, r4, r4, ror #24
   45adc:	andeq	r5, r4, r4, ror #24
   45ae0:	andeq	r5, r4, r4, ror #24
   45ae4:	andeq	r5, r4, ip, ror #22
   45ae8:	ldrb	r3, [r6, #88]	; 0x58
   45aec:	ldr	r5, [r6, #20]
   45af0:	add	r2, r2, r2, lsl #1
   45af4:	orr	r3, r3, #1
   45af8:	strb	r3, [r6, #88]	; 0x58
   45afc:	ldr	r3, [r7, #4]
   45b00:	mov	r0, #8
   45b04:	cmp	r3, #0
   45b08:	ldrne	r3, [r3, #12]
   45b0c:	ldreq	r3, [r7, #16]
   45b10:	ldr	sl, [r3, #28]
   45b14:	ldr	r3, [r7, #8]
   45b18:	cmp	r3, #0
   45b1c:	ldrne	r3, [r3, #12]
   45b20:	ldreq	r3, [r7, #16]
   45b24:	ldr	r4, [r3, #28]
   45b28:	mov	r3, #2
   45b2c:	str	r3, [r5, r2, lsl #2]
   45b30:	add	r5, r5, r2, lsl r3
   45b34:	bl	3a010 <__assert_fail@plt+0x27a1c>
   45b38:	cmp	r0, #0
   45b3c:	str	r0, [r5, #8]
   45b40:	beq	451b4 <__assert_fail@plt+0x32bc0>
   45b44:	cmp	sl, r4
   45b48:	moveq	r3, #1
   45b4c:	streq	r3, [r5, #4]
   45b50:	streq	sl, [r0]
   45b54:	beq	45b6c <__assert_fail@plt+0x33578>
   45b58:	mov	r3, #2
   45b5c:	str	r3, [r5, #4]
   45b60:	strlt	sl, [r0]
   45b64:	strlt	r4, [r0, #4]
   45b68:	stmge	r0, {r4, sl}
   45b6c:	ldr	r3, [r7, #4]
   45b70:	cmp	r3, #0
   45b74:	moveq	r2, r9
   45b78:	beq	45b88 <__assert_fail@plt+0x33594>
   45b7c:	mov	r7, r3
   45b80:	b	45a94 <__assert_fail@plt+0x334a0>
   45b84:	mov	r7, r5
   45b88:	ldr	r3, [r7, #8]
   45b8c:	cmp	r3, #0
   45b90:	cmpne	r3, r2
   45b94:	moveq	sl, #1
   45b98:	movne	sl, #0
   45b9c:	bne	45b7c <__assert_fail@plt+0x33588>
   45ba0:	ldr	r5, [r7]
   45ba4:	mov	r2, r7
   45ba8:	cmp	r5, #0
   45bac:	bne	45b84 <__assert_fail@plt+0x33590>
   45bb0:	ldr	r4, [sp, #16]
   45bb4:	ldr	r2, [r6, #24]
   45bb8:	ldr	r9, [sp, #12]
   45bbc:	add	r7, r5, r5, lsl #1
   45bc0:	lsl	r7, r7, #2
   45bc4:	add	r3, r2, r7
   45bc8:	ldr	r3, [r3, #4]
   45bcc:	cmp	r3, #0
   45bd0:	beq	45c78 <__assert_fail@plt+0x33684>
   45bd4:	ldr	r0, [r6, #8]
   45bd8:	add	r5, r5, #1
   45bdc:	cmp	r0, r5
   45be0:	bne	45bbc <__assert_fail@plt+0x335c8>
   45be4:	cmp	r9, #0
   45be8:	beq	45cd8 <__assert_fail@plt+0x336e4>
   45bec:	ldr	r9, [sp, #12]
   45bf0:	mov	r5, #0
   45bf4:	b	45bbc <__assert_fail@plt+0x335c8>
   45bf8:	ldr	r1, [r7, #16]
   45bfc:	add	r2, r2, r2, lsl #1
   45c00:	ldr	r3, [r6, #20]
   45c04:	ldr	sl, [r1, #28]
   45c08:	add	r5, r3, r2, lsl #2
   45c0c:	mov	r0, #4
   45c10:	mov	r1, #1
   45c14:	str	r1, [r3, r2, lsl #2]
   45c18:	str	r1, [r5, #4]
   45c1c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   45c20:	cmp	r0, #0
   45c24:	str	r0, [r5, #8]
   45c28:	beq	46250 <__assert_fail@plt+0x33c5c>
   45c2c:	str	sl, [r0]
   45c30:	b	45b6c <__assert_fail@plt+0x33578>
   45c34:	ldr	r1, [r7, #16]
   45c38:	ldr	r3, [r6, #12]
   45c3c:	ldr	sl, [r1, #28]
   45c40:	str	sl, [r3, r2, lsl #2]
   45c44:	ldrb	r3, [r7, #24]
   45c48:	cmp	r3, #4
   45c4c:	bne	45b6c <__assert_fail@plt+0x33578>
   45c50:	add	r2, r2, r2, lsl #1
   45c54:	ldr	r3, [r6, #20]
   45c58:	mov	r0, #4
   45c5c:	add	r5, r3, r2, lsl #2
   45c60:	b	45c10 <__assert_fail@plt+0x3361c>
   45c64:	ldr	r1, [r7, #16]
   45c68:	ldr	r3, [r6, #12]
   45c6c:	ldr	r1, [r1, #28]
   45c70:	str	r1, [r3, r2, lsl #2]
   45c74:	b	45b6c <__assert_fail@plt+0x33578>
   45c78:	mov	r3, #1
   45c7c:	mov	r2, r5
   45c80:	mov	r1, r6
   45c84:	mov	r0, fp
   45c88:	bl	3ecf0 <__assert_fail@plt+0x2c6fc>
   45c8c:	cmp	r0, #0
   45c90:	bne	451bc <__assert_fail@plt+0x32bc8>
   45c94:	ldr	r2, [r6, #24]
   45c98:	add	r7, r2, r7
   45c9c:	ldr	r7, [r7, #4]
   45ca0:	cmp	r7, #0
   45ca4:	bne	45bd4 <__assert_fail@plt+0x335e0>
   45ca8:	ldr	r0, [sp, #56]	; 0x38
   45cac:	bl	376d0 <__assert_fail@plt+0x250dc>
   45cb0:	ldr	r3, [r6, #8]
   45cb4:	add	r5, r5, #1
   45cb8:	cmp	r3, r5
   45cbc:	movne	r9, sl
   45cc0:	beq	45ccc <__assert_fail@plt+0x336d8>
   45cc4:	ldr	r2, [r6, #24]
   45cc8:	b	45bbc <__assert_fail@plt+0x335c8>
   45ccc:	mov	r5, r7
   45cd0:	ldr	r9, [sp, #12]
   45cd4:	b	45cc4 <__assert_fail@plt+0x336d0>
   45cd8:	ldrb	r3, [r8, #28]
   45cdc:	tst	r3, #16
   45ce0:	bne	45cf0 <__assert_fail@plt+0x336fc>
   45ce4:	ldr	r3, [r8, #24]
   45ce8:	cmp	r3, #0
   45cec:	bne	461ac <__assert_fail@plt+0x33bb8>
   45cf0:	ldr	r3, [r6, #76]	; 0x4c
   45cf4:	cmp	r3, #0
   45cf8:	beq	45e28 <__assert_fail@plt+0x33834>
   45cfc:	add	r0, r0, r0, lsl #1
   45d00:	lsl	r0, r0, #2
   45d04:	bl	3a010 <__assert_fail@plt+0x27a1c>
   45d08:	cmp	r0, #0
   45d0c:	str	r0, [r6, #28]
   45d10:	beq	451b8 <__assert_fail@plt+0x32bc4>
   45d14:	ldr	r3, [r6, #8]
   45d18:	cmp	r3, #0
   45d1c:	beq	45e28 <__assert_fail@plt+0x33834>
   45d20:	mov	r3, #0
   45d24:	mov	r2, r0
   45d28:	mov	r1, r3
   45d2c:	mov	r0, r3
   45d30:	b	45d38 <__assert_fail@plt+0x33744>
   45d34:	ldr	r2, [r6, #28]
   45d38:	add	ip, r2, r3
   45d3c:	str	r1, [r2, r3]
   45d40:	str	r1, [ip, #4]
   45d44:	str	r1, [ip, #8]
   45d48:	ldr	r2, [r6, #8]
   45d4c:	add	r0, r0, #1
   45d50:	cmp	r0, r2
   45d54:	add	r3, r3, #12
   45d58:	bcc	45d34 <__assert_fail@plt+0x33740>
   45d5c:	cmp	r2, #0
   45d60:	beq	45e28 <__assert_fail@plt+0x33834>
   45d64:	mov	r3, #0
   45d68:	ldr	lr, [r6, #24]
   45d6c:	str	r8, [sp, #16]
   45d70:	mov	sl, r3
   45d74:	mov	r8, r3
   45d78:	str	r4, [sp, #12]
   45d7c:	add	r0, lr, r8
   45d80:	ldmib	r0, {r3, r7}
   45d84:	cmp	r3, #0
   45d88:	ble	45e10 <__assert_fail@plt+0x3381c>
   45d8c:	sub	r7, r7, #4
   45d90:	mov	r5, #0
   45d94:	b	45db8 <__assert_fail@plt+0x337c4>
   45d98:	ldr	r3, [r4, #8]
   45d9c:	add	r1, r2, #1
   45da0:	str	r1, [r4, #4]
   45da4:	str	sl, [r3, r2, lsl #2]
   45da8:	ldr	r3, [r0, #4]
   45dac:	add	r5, r5, #1
   45db0:	cmp	r5, r3
   45db4:	bge	45e0c <__assert_fail@plt+0x33818>
   45db8:	ldr	r3, [r7, #4]!
   45dbc:	ldr	ip, [r6, #28]
   45dc0:	add	r3, r3, r3, lsl #1
   45dc4:	add	r4, ip, r3, lsl #2
   45dc8:	ldr	r1, [ip, r3, lsl #2]
   45dcc:	ldr	r2, [r4, #4]
   45dd0:	cmp	r1, r2
   45dd4:	bne	45d98 <__assert_fail@plt+0x337a4>
   45dd8:	add	r2, r2, #1
   45ddc:	ldr	r0, [r4, #8]
   45de0:	lsl	r1, r2, #1
   45de4:	str	r1, [ip, r3, lsl #2]
   45de8:	lsl	r1, r2, #3
   45dec:	bl	3aacc <__assert_fail@plt+0x284d8>
   45df0:	subs	r3, r0, #0
   45df4:	beq	45910 <__assert_fail@plt+0x3331c>
   45df8:	ldr	lr, [r6, #24]
   45dfc:	ldr	r2, [r4, #4]
   45e00:	add	r0, lr, r8
   45e04:	str	r3, [r4, #8]
   45e08:	b	45d9c <__assert_fail@plt+0x337a8>
   45e0c:	ldr	r2, [r6, #8]
   45e10:	add	sl, sl, #1
   45e14:	cmp	sl, r2
   45e18:	add	r8, r8, #12
   45e1c:	bcc	45d7c <__assert_fail@plt+0x33788>
   45e20:	ldr	r4, [sp, #12]
   45e24:	ldr	r8, [sp, #16]
   45e28:	ldrb	r2, [r4, #88]	; 0x58
   45e2c:	ldr	r3, [sp, #20]
   45e30:	clz	r3, r3
   45e34:	lsr	r3, r3, #5
   45e38:	mov	r1, #0
   45e3c:	ands	r3, r3, r2, lsr #2
   45e40:	str	r1, [sp, #36]	; 0x24
   45e44:	beq	45e54 <__assert_fail@plt+0x33860>
   45e48:	ldr	r2, [r8, #20]
   45e4c:	cmp	r2, #0
   45e50:	beq	46264 <__assert_fail@plt+0x33c70>
   45e54:	ldr	r3, [r4, #52]	; 0x34
   45e58:	ldr	r5, [r4, #24]
   45e5c:	ldr	r3, [r3, #12]
   45e60:	ldr	r3, [r3, #28]
   45e64:	str	r3, [r4, #72]	; 0x48
   45e68:	add	r3, r3, r3, lsl #1
   45e6c:	add	r5, r5, r3, lsl #2
   45e70:	ldr	r3, [r5, #4]
   45e74:	str	r3, [sp, #52]	; 0x34
   45e78:	ldr	r2, [r5, #4]
   45e7c:	cmp	r2, #0
   45e80:	ble	460f0 <__assert_fail@plt+0x33afc>
   45e84:	lsl	r0, r3, #2
   45e88:	str	r3, [sp, #48]	; 0x30
   45e8c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   45e90:	cmp	r0, #0
   45e94:	mov	r6, r0
   45e98:	str	r0, [sp, #56]	; 0x38
   45e9c:	beq	46194 <__assert_fail@plt+0x33ba0>
   45ea0:	ldr	r2, [r5, #4]
   45ea4:	ldr	r1, [r5, #8]
   45ea8:	lsl	r2, r2, #2
   45eac:	bl	12024 <memcpy@plt>
   45eb0:	mov	r0, r6
   45eb4:	ldr	r3, [r4, #76]	; 0x4c
   45eb8:	mov	r7, #0
   45ebc:	cmp	r3, r7
   45ec0:	str	r7, [sp, #40]	; 0x28
   45ec4:	ble	46014 <__assert_fail@plt+0x33a20>
   45ec8:	ldr	r6, [sp, #52]	; 0x34
   45ecc:	cmp	r6, r7
   45ed0:	ble	46014 <__assert_fail@plt+0x33a20>
   45ed4:	mov	r5, r7
   45ed8:	b	45eec <__assert_fail@plt+0x338f8>
   45edc:	add	r7, r7, #1
   45ee0:	cmp	r6, r7
   45ee4:	ble	46014 <__assert_fail@plt+0x33a20>
   45ee8:	ldr	r0, [sp, #56]	; 0x38
   45eec:	ldr	sl, [r0, r7, lsl #2]
   45ef0:	ldr	lr, [r4]
   45ef4:	add	r9, lr, sl, lsl #3
   45ef8:	ldrb	r3, [r9, #4]
   45efc:	cmp	r3, #4
   45f00:	bne	45edc <__assert_fail@plt+0x338e8>
   45f04:	sub	r1, r0, #4
   45f08:	mov	r3, #0
   45f0c:	b	45f1c <__assert_fail@plt+0x33928>
   45f10:	add	r3, r3, #1
   45f14:	cmp	r6, r3
   45f18:	beq	45edc <__assert_fail@plt+0x338e8>
   45f1c:	ldr	r2, [r1, #4]!
   45f20:	add	ip, lr, r2, lsl #3
   45f24:	ldrb	ip, [ip, #4]
   45f28:	cmp	ip, #9
   45f2c:	bne	45f10 <__assert_fail@plt+0x3391c>
   45f30:	ldr	ip, [lr, r2, lsl #3]
   45f34:	ldr	r2, [r9]
   45f38:	cmp	ip, r2
   45f3c:	bne	45f10 <__assert_fail@plt+0x3391c>
   45f40:	ldr	r3, [r4, #20]
   45f44:	add	sl, sl, sl, lsl #1
   45f48:	sub	ip, r6, #1
   45f4c:	add	sl, r3, sl, lsl #2
   45f50:	mov	r1, r5
   45f54:	ldr	r3, [sl, #8]
   45f58:	ldr	lr, [r3]
   45f5c:	cmp	r1, ip
   45f60:	bcs	45fb8 <__assert_fail@plt+0x339c4>
   45f64:	add	r2, r1, ip
   45f68:	lsr	r2, r2, #1
   45f6c:	ldr	r3, [r0, r2, lsl #2]
   45f70:	cmp	lr, r3
   45f74:	ble	45fb0 <__assert_fail@plt+0x339bc>
   45f78:	b	460d4 <__assert_fail@plt+0x33ae0>
   45f7c:	beq	feaf0a28 <stdout@@GLIBC_2.4+0xfea8c4d4>
   45f80:	andeq	r3, r5, r4, lsr #21
   45f84:	muleq	r1, ip, r3
   45f88:	strdeq	r1, [r1], -r4
   45f8c:	andeq	r3, r5, r4, ror #25
   45f90:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   45f94:	andeq	pc, r3, r0, lsl #30
   45f98:	add	r3, r2, r1
   45f9c:	lsr	r3, r3, #1
   45fa0:	ldr	ip, [r0, r3, lsl #2]
   45fa4:	cmp	lr, ip
   45fa8:	bgt	460dc <__assert_fail@plt+0x33ae8>
   45fac:	mov	r2, r3
   45fb0:	cmp	r2, r1
   45fb4:	bhi	45f98 <__assert_fail@plt+0x339a4>
   45fb8:	ldr	r3, [r0, r1, lsl #2]
   45fbc:	cmp	lr, r3
   45fc0:	beq	45edc <__assert_fail@plt+0x338e8>
   45fc4:	add	lr, lr, lr, lsl #1
   45fc8:	ldr	r3, [r4, #24]
   45fcc:	adds	r7, r3, lr, lsl #2
   45fd0:	beq	460e8 <__assert_fail@plt+0x33af4>
   45fd4:	ldr	r3, [r7, #4]
   45fd8:	cmp	r3, #0
   45fdc:	beq	460e8 <__assert_fail@plt+0x33af4>
   45fe0:	ldr	r2, [sp, #48]	; 0x30
   45fe4:	add	r6, r6, r3, lsl #1
   45fe8:	cmp	r2, r6
   45fec:	blt	46104 <__assert_fail@plt+0x33b10>
   45ff0:	mov	r1, r7
   45ff4:	mov	r0, fp
   45ff8:	bl	3bb38 <__assert_fail@plt+0x29544>
   45ffc:	cmp	r0, #0
   46000:	bne	46058 <__assert_fail@plt+0x33a64>
   46004:	ldr	r6, [sp, #52]	; 0x34
   46008:	mov	r7, #1
   4600c:	cmp	r6, r7
   46010:	bgt	45ee8 <__assert_fail@plt+0x338f4>
   46014:	mov	r3, #0
   46018:	mov	r2, fp
   4601c:	mov	r1, r4
   46020:	add	r0, sp, #40	; 0x28
   46024:	bl	44ac8 <__assert_fail@plt+0x324d4>
   46028:	cmp	r0, #0
   4602c:	str	r0, [r4, #36]	; 0x24
   46030:	beq	4618c <__assert_fail@plt+0x33b98>
   46034:	ldrsb	r3, [r0, #52]	; 0x34
   46038:	cmp	r3, #0
   4603c:	strge	r0, [r4, #48]	; 0x30
   46040:	strge	r0, [r4, #44]	; 0x2c
   46044:	strge	r0, [r4, #40]	; 0x28
   46048:	blt	46128 <__assert_fail@plt+0x33b34>
   4604c:	ldr	r0, [sp, #56]	; 0x38
   46050:	bl	376d0 <__assert_fail@plt+0x250dc>
   46054:	mov	r0, #0
   46058:	ldr	r6, [r8]
   4605c:	str	r0, [sp, #36]	; 0x24
   46060:	ldr	r0, [r6, #56]	; 0x38
   46064:	cmp	r0, #0
   46068:	beq	4607c <__assert_fail@plt+0x33a88>
   4606c:	ldr	r5, [r0]
   46070:	bl	376d0 <__assert_fail@plt+0x250dc>
   46074:	subs	r0, r5, #0
   46078:	bne	4606c <__assert_fail@plt+0x33a78>
   4607c:	mov	r3, #31
   46080:	mov	r5, #0
   46084:	str	r3, [r6, #64]	; 0x40
   46088:	ldr	r0, [r6, #16]
   4608c:	str	r5, [r6, #56]	; 0x38
   46090:	str	r5, [r6, #52]	; 0x34
   46094:	bl	376d0 <__assert_fail@plt+0x250dc>
   46098:	ldr	r0, [sp, #68]	; 0x44
   4609c:	str	r5, [r6, #16]
   460a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   460a4:	ldr	r0, [sp, #72]	; 0x48
   460a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   460ac:	ldrb	r3, [sp, #135]	; 0x87
   460b0:	cmp	r3, r5
   460b4:	beq	460c0 <__assert_fail@plt+0x33acc>
   460b8:	ldr	r0, [sp, #64]	; 0x40
   460bc:	bl	376d0 <__assert_fail@plt+0x250dc>
   460c0:	ldr	r0, [sp, #36]	; 0x24
   460c4:	cmp	r0, #0
   460c8:	bne	45224 <__assert_fail@plt+0x32c30>
   460cc:	add	sp, sp, #148	; 0x94
   460d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   460d4:	mov	r3, r2
   460d8:	mov	r2, ip
   460dc:	add	r1, r3, #1
   460e0:	mov	ip, r2
   460e4:	b	45f5c <__assert_fail@plt+0x33968>
   460e8:	mov	r7, #1
   460ec:	b	45ee0 <__assert_fail@plt+0x338ec>
   460f0:	mov	r0, #0
   460f4:	str	r0, [sp, #48]	; 0x30
   460f8:	str	r0, [fp, #4]
   460fc:	str	r0, [fp, #8]
   46100:	b	45eb4 <__assert_fail@plt+0x338c0>
   46104:	add	r3, r3, r2
   46108:	lsl	r1, r3, #3
   4610c:	lsl	r6, r3, #1
   46110:	bl	3aacc <__assert_fail@plt+0x284d8>
   46114:	cmp	r0, #0
   46118:	beq	46194 <__assert_fail@plt+0x33ba0>
   4611c:	str	r0, [sp, #56]	; 0x38
   46120:	str	r6, [sp, #48]	; 0x30
   46124:	b	45ff0 <__assert_fail@plt+0x339fc>
   46128:	mov	r3, #1
   4612c:	mov	r2, fp
   46130:	mov	r1, r4
   46134:	add	r0, sp, #40	; 0x28
   46138:	bl	44ac8 <__assert_fail@plt+0x324d4>
   4613c:	mov	r3, #2
   46140:	mov	r2, fp
   46144:	mov	r1, r4
   46148:	str	r0, [r4, #40]	; 0x28
   4614c:	add	r0, sp, #40	; 0x28
   46150:	bl	44ac8 <__assert_fail@plt+0x324d4>
   46154:	mov	r3, #6
   46158:	mov	r2, fp
   4615c:	mov	r1, r4
   46160:	str	r0, [r4, #44]	; 0x2c
   46164:	add	r0, sp, #40	; 0x28
   46168:	bl	44ac8 <__assert_fail@plt+0x324d4>
   4616c:	ldr	r3, [r4, #40]	; 0x28
   46170:	cmp	r3, #0
   46174:	str	r0, [r4, #48]	; 0x30
   46178:	beq	4618c <__assert_fail@plt+0x33b98>
   4617c:	ldr	r3, [r4, #44]	; 0x2c
   46180:	cmp	r0, #0
   46184:	cmpne	r3, #0
   46188:	bne	4604c <__assert_fail@plt+0x33a58>
   4618c:	ldr	r0, [sp, #40]	; 0x28
   46190:	b	46058 <__assert_fail@plt+0x33a64>
   46194:	mov	r0, #12
   46198:	b	46058 <__assert_fail@plt+0x33a64>
   4619c:	cmp	ip, #0
   461a0:	mov	r1, ip
   461a4:	beq	459ac <__assert_fail@plt+0x333b8>
   461a8:	b	45990 <__assert_fail@plt+0x3339c>
   461ac:	ldrb	r3, [r6, #88]	; 0x58
   461b0:	tst	r3, #1
   461b4:	bne	45cfc <__assert_fail@plt+0x33708>
   461b8:	b	45cf0 <__assert_fail@plt+0x336fc>
   461bc:	bl	376d0 <__assert_fail@plt+0x250dc>
   461c0:	mov	r3, #0
   461c4:	ldr	r5, [r6, #52]	; 0x34
   461c8:	str	r3, [r6, #132]	; 0x84
   461cc:	b	455f4 <__assert_fail@plt+0x33000>
   461d0:	mov	r3, r2
   461d4:	b	455fc <__assert_fail@plt+0x33008>
   461d8:	str	sl, [sp, #88]	; 0x58
   461dc:	str	sl, [sp, #92]	; 0x5c
   461e0:	b	45340 <__assert_fail@plt+0x32d4c>
   461e4:	ldr	r3, [sp, #108]	; 0x6c
   461e8:	ldr	r5, [sp, #88]	; 0x58
   461ec:	cmp	sl, r3
   461f0:	movge	sl, r3
   461f4:	cmp	sl, r5
   461f8:	ble	4623c <__assert_fail@plt+0x33c48>
   461fc:	bl	122a0 <__ctype_toupper_loc@plt>
   46200:	b	46208 <__assert_fail@plt+0x33c14>
   46204:	ldr	r6, [sp, #64]	; 0x40
   46208:	ldr	r3, [sp, #60]	; 0x3c
   4620c:	ldr	r1, [sp, #84]	; 0x54
   46210:	add	r3, r3, r5
   46214:	ldr	r2, [sp, #124]	; 0x7c
   46218:	ldrb	r3, [r3, r1]
   4621c:	cmp	r2, #0
   46220:	ldrbne	r3, [r2, r3]
   46224:	ldr	r2, [r0]
   46228:	ldr	r3, [r2, r3, lsl #2]
   4622c:	strb	r3, [r6, r5]
   46230:	add	r5, r5, #1
   46234:	cmp	sl, r5
   46238:	bne	46204 <__assert_fail@plt+0x33c10>
   4623c:	str	r5, [sp, #88]	; 0x58
   46240:	str	r5, [sp, #92]	; 0x5c
   46244:	b	45340 <__assert_fail@plt+0x32d4c>
   46248:	mov	r0, #12
   4624c:	b	45250 <__assert_fail@plt+0x32c5c>
   46250:	ldr	r4, [sp, #16]
   46254:	str	r0, [r5, #4]
   46258:	str	r0, [r5]
   4625c:	mov	r0, #12
   46260:	b	451bc <__assert_fail@plt+0x32bc8>
   46264:	ldr	r5, [r4, #8]
   46268:	cmp	r5, #0
   4626c:	beq	4639c <__assert_fail@plt+0x33da8>
   46270:	ldr	r0, [r4]
   46274:	mov	r1, r2
   46278:	mov	ip, r0
   4627c:	mov	r6, r0
   46280:	mov	r2, r9
   46284:	ldrb	lr, [r6, #4]
   46288:	sub	lr, lr, #1
   4628c:	cmp	lr, #11
   46290:	ldrls	pc, [pc, lr, lsl #2]
   46294:	b	4633c <__assert_fail@plt+0x33d48>
   46298:	andeq	r6, r4, ip, lsr #6
   4629c:	andeq	r6, r4, ip, asr #5
   462a0:	andeq	r6, r4, r0, asr #6
   462a4:	andeq	r6, r4, ip, asr #5
   462a8:	andeq	r6, r4, r8, asr #5
   462ac:	andeq	r5, r4, r4, asr lr
   462b0:	andeq	r6, r4, ip, lsr r3
   462b4:	andeq	r6, r4, ip, asr #5
   462b8:	andeq	r6, r4, ip, asr #5
   462bc:	andeq	r6, r4, ip, asr #5
   462c0:	andeq	r6, r4, ip, asr #5
   462c4:	andeq	r6, r4, r8, ror r3
   462c8:	mov	r9, r3
   462cc:	add	r1, r1, #1
   462d0:	cmp	r1, r5
   462d4:	add	r6, r6, #8
   462d8:	bne	46284 <__assert_fail@plt+0x33c90>
   462dc:	orr	r3, r2, r9
   462e0:	ands	r3, r3, #255	; 0xff
   462e4:	beq	463a0 <__assert_fail@plt+0x33dac>
   462e8:	add	r1, r0, r1, lsl #3
   462ec:	mov	r2, #7
   462f0:	b	46308 <__assert_fail@plt+0x33d14>
   462f4:	cmp	r3, #5
   462f8:	strbeq	r2, [ip, #4]
   462fc:	add	ip, ip, #8
   46300:	cmp	ip, r1
   46304:	beq	4639c <__assert_fail@plt+0x33da8>
   46308:	ldrb	r3, [ip, #4]
   4630c:	cmp	r3, #1
   46310:	bne	462f4 <__assert_fail@plt+0x33d00>
   46314:	ldrsb	r3, [ip]
   46318:	cmp	r3, #0
   4631c:	ldrblt	r3, [ip, #6]
   46320:	biclt	r3, r3, #32
   46324:	strblt	r3, [ip, #6]
   46328:	b	462fc <__assert_fail@plt+0x33d08>
   4632c:	ldrb	lr, [r0, r1, lsl #3]
   46330:	lsrs	lr, lr, #7
   46334:	movne	r2, r3
   46338:	b	462cc <__assert_fail@plt+0x33cd8>
   4633c:	bl	125a0 <abort@plt>
   46340:	ldr	lr, [r0, r1, lsl #3]
   46344:	ldr	r7, [lr, #16]
   46348:	cmp	r7, #0
   4634c:	bne	45e54 <__assert_fail@plt+0x33860>
   46350:	ldr	r7, [lr, #20]
   46354:	cmp	r7, #0
   46358:	bne	45e54 <__assert_fail@plt+0x33860>
   4635c:	ldr	r7, [lr, #24]
   46360:	cmp	r7, #0
   46364:	bne	45e54 <__assert_fail@plt+0x33860>
   46368:	ldr	lr, [lr, #28]
   4636c:	cmp	lr, #0
   46370:	beq	462cc <__assert_fail@plt+0x33cd8>
   46374:	b	45e54 <__assert_fail@plt+0x33860>
   46378:	ldr	lr, [r0, r1, lsl #3]
   4637c:	cmp	lr, #32
   46380:	beq	462cc <__assert_fail@plt+0x33cd8>
   46384:	bls	463cc <__assert_fail@plt+0x33dd8>
   46388:	cmp	lr, #64	; 0x40
   4638c:	beq	462cc <__assert_fail@plt+0x33cd8>
   46390:	cmp	lr, #128	; 0x80
   46394:	beq	462cc <__assert_fail@plt+0x33cd8>
   46398:	b	45e54 <__assert_fail@plt+0x33860>
   4639c:	mov	r3, r9
   463a0:	ldr	r1, [r4, #76]	; 0x4c
   463a4:	ldrb	r2, [r4, #88]	; 0x58
   463a8:	cmp	r1, #0
   463ac:	orrgt	r3, r3, #1
   463b0:	and	r3, r3, #1
   463b4:	and	r2, r2, #249	; 0xf9
   463b8:	orr	r3, r2, r3, lsl #1
   463bc:	mov	r2, #1
   463c0:	strb	r3, [r4, #88]	; 0x58
   463c4:	str	r2, [r4, #92]	; 0x5c
   463c8:	b	45e54 <__assert_fail@plt+0x33860>
   463cc:	cmp	lr, #16
   463d0:	beq	462cc <__assert_fail@plt+0x33cd8>
   463d4:	b	45e54 <__assert_fail@plt+0x33860>
   463d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   463dc:	sub	sp, sp, #14464	; 0x3880
   463e0:	sub	sp, sp, #36	; 0x24
   463e4:	mov	r4, #0
   463e8:	mov	r5, r1
   463ec:	add	r9, sp, #2208	; 0x8a0
   463f0:	str	r1, [sp, #72]	; 0x48
   463f4:	str	r0, [sp, #104]	; 0x68
   463f8:	str	r4, [r1, #44]	; 0x2c
   463fc:	str	r4, [r1, #48]	; 0x30
   46400:	mov	r0, r9
   46404:	mov	r1, r4
   46408:	mov	r2, #32
   4640c:	bl	12378 <memset@plt>
   46410:	ldr	r1, [r5, #8]
   46414:	cmp	r1, r4
   46418:	ble	472f4 <__assert_fail@plt+0x34d00>
   4641c:	str	r4, [sp, #20]
   46420:	str	r4, [sp, #96]	; 0x60
   46424:	ldr	r3, [sp, #72]	; 0x48
   46428:	ldr	r0, [sp, #96]	; 0x60
   4642c:	ldr	r2, [r3, #12]
   46430:	ldr	r3, [sp, #104]	; 0x68
   46434:	lsl	ip, r0, #2
   46438:	ldr	r2, [r2, r0, lsl #2]
   4643c:	ldr	r3, [r3]
   46440:	str	ip, [sp, #92]	; 0x5c
   46444:	add	r0, r3, r2, lsl #3
   46448:	str	r0, [sp, #100]	; 0x64
   4644c:	ldrb	ip, [r0, #4]
   46450:	ldr	r4, [r0, #4]
   46454:	ldr	r0, [pc, #3984]	; 473ec <__assert_fail@plt+0x34df8>
   46458:	cmp	ip, #1
   4645c:	str	ip, [sp, #28]
   46460:	and	r4, r0, r4, lsr #8
   46464:	beq	465e8 <__assert_fail@plt+0x33ff4>
   46468:	cmp	ip, #3
   4646c:	beq	46c10 <__assert_fail@plt+0x3461c>
   46470:	cmp	ip, #5
   46474:	beq	46d68 <__assert_fail@plt+0x34774>
   46478:	cmp	ip, #7
   4647c:	beq	4715c <__assert_fail@plt+0x34b68>
   46480:	ldr	r3, [sp, #96]	; 0x60
   46484:	add	r3, r3, #1
   46488:	cmp	r3, r1
   4648c:	str	r3, [sp, #96]	; 0x60
   46490:	blt	46424 <__assert_fail@plt+0x33e30>
   46494:	ldr	r3, [sp, #20]
   46498:	cmp	r3, #0
   4649c:	ble	472f0 <__assert_fail@plt+0x34cfc>
   464a0:	add	r3, r3, #1
   464a4:	mov	r4, #0
   464a8:	lsl	r0, r3, #2
   464ac:	str	r3, [r9, #-2092]	; 0xfffff7d4
   464b0:	str	r4, [r9, #-2088]	; 0xfffff7d8
   464b4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   464b8:	cmp	r0, r4
   464bc:	str	r0, [r9, #-2084]	; 0xfffff7dc
   464c0:	beq	471b4 <__assert_fail@plt+0x34bc0>
   464c4:	add	r3, sp, #3232	; 0xca0
   464c8:	str	r3, [sp, #12]
   464cc:	mov	r6, r3
   464d0:	add	r3, sp, #6272	; 0x1880
   464d4:	add	r3, r3, #32
   464d8:	mov	r7, r3
   464dc:	str	r3, [sp, #28]
   464e0:	add	r0, sp, #128	; 0x80
   464e4:	add	r3, sp, #156	; 0x9c
   464e8:	mov	r2, #32
   464ec:	mov	r1, r4
   464f0:	str	r3, [sp, #4]
   464f4:	str	r4, [sp, #24]
   464f8:	str	r4, [r9, #-2096]	; 0xfffff7d0
   464fc:	bl	12378 <memset@plt>
   46500:	add	r3, sp, #160	; 0xa0
   46504:	ldr	fp, [sp, #104]	; 0x68
   46508:	sub	r3, r3, #48	; 0x30
   4650c:	mov	sl, r4
   46510:	add	r8, sp, #116	; 0x74
   46514:	mov	r5, r7
   46518:	str	r3, [sp, #16]
   4651c:	add	r3, sp, #1184	; 0x4a0
   46520:	str	r3, [sp]
   46524:	str	r7, [sp, #32]
   46528:	ldr	r0, [r6, #4]
   4652c:	mov	r3, #0
   46530:	cmp	r0, r3
   46534:	str	r3, [r9, #-2088]	; 0xfffff7d8
   46538:	movgt	r5, #0
   4653c:	strgt	r7, [sp, #8]
   46540:	bgt	46570 <__assert_fail@plt+0x33f7c>
   46544:	b	46ef8 <__assert_fail@plt+0x34904>
   46548:	mov	r1, r7
   4654c:	mov	r0, r8
   46550:	bl	3bb38 <__assert_fail@plt+0x29544>
   46554:	cmp	r0, #0
   46558:	str	r0, [r9, #-2096]	; 0xfffff7d0
   4655c:	bne	4712c <__assert_fail@plt+0x34b38>
   46560:	ldr	r0, [r6, #4]
   46564:	add	r5, r5, #1
   46568:	cmp	r5, r0
   4656c:	bge	46ef4 <__assert_fail@plt+0x34900>
   46570:	ldr	r2, [r6, #8]
   46574:	ldr	r3, [fp, #12]
   46578:	ldr	r2, [r2, r5, lsl #2]
   4657c:	ldr	r3, [r3, r2, lsl #2]
   46580:	cmn	r3, #1
   46584:	beq	46564 <__assert_fail@plt+0x33f70>
   46588:	add	r3, r3, r3, lsl #1
   4658c:	ldr	r2, [fp, #24]
   46590:	adds	r7, r2, r3, lsl #2
   46594:	streq	r7, [r9, #-2096]	; 0xfffff7d0
   46598:	beq	46564 <__assert_fail@plt+0x33f70>
   4659c:	ldr	r2, [r7, #4]
   465a0:	cmp	r2, #0
   465a4:	streq	r2, [r9, #-2096]	; 0xfffff7d0
   465a8:	beq	46564 <__assert_fail@plt+0x33f70>
   465ac:	ldr	r1, [r9, #-2088]	; 0xfffff7d8
   465b0:	ldr	r4, [r9, #-2092]	; 0xfffff7d4
   465b4:	add	r1, r1, r2, lsl #1
   465b8:	cmp	r4, r1
   465bc:	bge	46548 <__assert_fail@plt+0x33f54>
   465c0:	add	r2, r2, r4
   465c4:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   465c8:	lsl	r1, r2, #3
   465cc:	lsl	r4, r2, #1
   465d0:	bl	3aacc <__assert_fail@plt+0x284d8>
   465d4:	cmp	r0, #0
   465d8:	beq	47190 <__assert_fail@plt+0x34b9c>
   465dc:	str	r0, [r9, #-2084]	; 0xfffff7dc
   465e0:	str	r4, [r9, #-2092]	; 0xfffff7d4
   465e4:	b	46548 <__assert_fail@plt+0x33f54>
   465e8:	ldrb	r3, [r3, r2, lsl #3]
   465ec:	and	r1, r3, #31
   465f0:	asr	r3, r3, #5
   465f4:	ldr	r2, [r9, r3, lsl #2]
   465f8:	orr	r2, r2, ip, lsl r1
   465fc:	str	r2, [r9, r3, lsl #2]
   46600:	cmp	r4, #0
   46604:	beq	46858 <__assert_fail@plt+0x34264>
   46608:	tst	r4, #32
   4660c:	bne	46e28 <__assert_fail@plt+0x34834>
   46610:	tst	r4, #128	; 0x80
   46614:	bne	46ca8 <__assert_fail@plt+0x346b4>
   46618:	tst	r4, #4
   4661c:	beq	46748 <__assert_fail@plt+0x34154>
   46620:	ldr	r3, [sp, #28]
   46624:	cmp	r3, #1
   46628:	beq	471a0 <__assert_fail@plt+0x34bac>
   4662c:	ldr	r3, [sp, #104]	; 0x68
   46630:	ldr	r3, [r3, #92]	; 0x5c
   46634:	cmp	r3, #1
   46638:	ble	47238 <__assert_fail@plt+0x34c44>
   4663c:	ldr	r6, [sp, #104]	; 0x68
   46640:	ldr	r3, [r6, #60]	; 0x3c
   46644:	ldr	r0, [r6, #96]	; 0x60
   46648:	ldr	r2, [r6, #100]	; 0x64
   4664c:	ldr	lr, [r3]
   46650:	ldr	r1, [r3, #4]
   46654:	mvn	lr, lr
   46658:	orr	lr, lr, r0
   4665c:	ldr	r0, [r9]
   46660:	mvn	r1, r1
   46664:	and	lr, lr, r0
   46668:	ldr	r0, [r9, #4]
   4666c:	orr	r1, r1, r2
   46670:	ldr	r2, [r3, #8]
   46674:	and	r1, r1, r0
   46678:	ldr	ip, [r3, #12]
   4667c:	ldr	r0, [r6, #104]	; 0x68
   46680:	mvn	r2, r2
   46684:	orr	r2, r2, r0
   46688:	mvn	r0, ip
   4668c:	ldr	ip, [r9, #8]
   46690:	str	lr, [r9]
   46694:	and	r2, r2, ip
   46698:	ldr	ip, [r6, #108]	; 0x6c
   4669c:	orr	lr, lr, r1
   466a0:	str	r1, [r9, #4]
   466a4:	ldr	r1, [r9, #12]
   466a8:	orr	r0, r0, ip
   466ac:	ldr	ip, [r3, #16]
   466b0:	and	r1, r1, r0
   466b4:	orr	lr, lr, r2
   466b8:	ldr	r0, [r3, #20]
   466bc:	str	r2, [r9, #8]
   466c0:	ldr	r2, [r6, #112]	; 0x70
   466c4:	mvn	ip, ip
   466c8:	orr	ip, ip, r2
   466cc:	mvn	r2, r0
   466d0:	ldr	r0, [r9, #16]
   466d4:	orr	lr, lr, r1
   466d8:	and	ip, ip, r0
   466dc:	ldr	r0, [r6, #116]	; 0x74
   466e0:	str	r1, [r9, #12]
   466e4:	orr	r2, r2, r0
   466e8:	ldr	r0, [r3, #24]
   466ec:	ldr	r3, [r3, #28]
   466f0:	mvn	r0, r0
   466f4:	mvn	r5, r3
   466f8:	ldr	r3, [r9, #20]
   466fc:	ldr	r1, [r9, #28]
   46700:	and	r2, r2, r3
   46704:	ldr	r3, [r6, #120]	; 0x78
   46708:	orr	lr, lr, ip
   4670c:	orr	r0, r0, r3
   46710:	ldr	r3, [r9, #24]
   46714:	orr	lr, lr, r2
   46718:	and	r0, r0, r3
   4671c:	ldr	r3, [r6, #124]	; 0x7c
   46720:	orr	lr, lr, r0
   46724:	orr	r3, r5, r3
   46728:	and	r3, r3, r1
   4672c:	str	r2, [r9, #20]
   46730:	orr	r2, lr, r3
   46734:	str	ip, [r9, #16]
   46738:	str	r0, [r9, #24]
   4673c:	str	r3, [r9, #28]
   46740:	cmp	r2, #0
   46744:	beq	46cb8 <__assert_fail@plt+0x346c4>
   46748:	tst	r4, #8
   4674c:	beq	46858 <__assert_fail@plt+0x34264>
   46750:	ldr	r3, [sp, #28]
   46754:	cmp	r3, #1
   46758:	beq	46c98 <__assert_fail@plt+0x346a4>
   4675c:	ldr	r3, [sp, #104]	; 0x68
   46760:	ldr	r4, [sp, #104]	; 0x68
   46764:	ldr	r3, [r3, #92]	; 0x5c
   46768:	cmp	r3, #1
   4676c:	ble	46e54 <__assert_fail@plt+0x34860>
   46770:	ldr	r1, [r4, #60]	; 0x3c
   46774:	ldr	r0, [r4, #96]	; 0x60
   46778:	ldr	ip, [r4, #100]	; 0x64
   4677c:	ldr	r3, [r1]
   46780:	ldr	r2, [r1, #4]
   46784:	and	r3, r3, r0
   46788:	and	r2, r2, ip
   4678c:	ldr	r0, [r9]
   46790:	ldr	ip, [r9, #4]
   46794:	bic	r3, r0, r3
   46798:	bic	r2, ip, r2
   4679c:	ldr	r0, [r1, #8]
   467a0:	ldr	ip, [r4, #104]	; 0x68
   467a4:	ldr	lr, [r1, #12]
   467a8:	and	r0, r0, ip
   467ac:	ldr	ip, [r9, #8]
   467b0:	str	r3, [r9]
   467b4:	bic	r0, ip, r0
   467b8:	ldr	ip, [r4, #108]	; 0x6c
   467bc:	orr	r3, r3, r2
   467c0:	and	ip, ip, lr
   467c4:	ldr	lr, [r9, #12]
   467c8:	str	r2, [r9, #4]
   467cc:	bic	ip, lr, ip
   467d0:	ldr	r2, [r4, #112]	; 0x70
   467d4:	ldr	lr, [r1, #16]
   467d8:	orr	r3, r3, r0
   467dc:	and	r2, r2, lr
   467e0:	ldr	lr, [r9, #16]
   467e4:	str	r0, [r9, #8]
   467e8:	bic	r2, lr, r2
   467ec:	ldr	r0, [r4, #116]	; 0x74
   467f0:	ldr	lr, [r1, #20]
   467f4:	orr	r3, r3, ip
   467f8:	and	r0, r0, lr
   467fc:	ldr	lr, [r9, #20]
   46800:	str	ip, [r9, #12]
   46804:	bic	r0, lr, r0
   46808:	ldr	ip, [r1, #28]
   4680c:	ldr	lr, [r1, #24]
   46810:	ldr	r1, [r4, #120]	; 0x78
   46814:	orr	r3, r3, r2
   46818:	str	r2, [r9, #16]
   4681c:	ldr	r2, [r4, #124]	; 0x7c
   46820:	and	r1, r1, lr
   46824:	ldr	lr, [r9, #24]
   46828:	and	ip, ip, r2
   4682c:	ldr	r2, [r9, #28]
   46830:	bic	r1, lr, r1
   46834:	orr	r3, r3, r0
   46838:	bic	r2, r2, ip
   4683c:	orr	r3, r3, r1
   46840:	orr	r3, r3, r2
   46844:	str	r0, [r9, #20]
   46848:	str	r1, [r9, #24]
   4684c:	str	r2, [r9, #28]
   46850:	cmp	r3, #0
   46854:	beq	46cb8 <__assert_fail@plt+0x346c4>
   46858:	ldr	r3, [sp, #20]
   4685c:	cmp	r3, #0
   46860:	movle	r3, #0
   46864:	strle	r3, [sp, #4]
   46868:	ble	46cc4 <__assert_fail@plt+0x346d0>
   4686c:	add	r3, sp, #6272	; 0x1880
   46870:	add	r3, r3, #32
   46874:	str	r3, [sp, #108]	; 0x6c
   46878:	mov	r4, r3
   4687c:	add	r3, sp, #3232	; 0xca0
   46880:	str	r3, [sp]
   46884:	mov	r3, #0
   46888:	str	r3, [sp, #4]
   4688c:	b	46b68 <__assert_fail@plt+0x34574>
   46890:	ldr	sl, [r9]
   46894:	ldr	fp, [r4]
   46898:	ldr	r7, [r9, #4]
   4689c:	ldr	r8, [r4, #4]
   468a0:	ldr	r1, [r9, #12]
   468a4:	ldr	r5, [r9, #8]
   468a8:	ldr	r6, [r4, #8]
   468ac:	and	r2, r7, r8
   468b0:	and	r3, sl, fp
   468b4:	mov	r0, r1
   468b8:	ldr	lr, [r4, #12]
   468bc:	and	r1, r5, r6
   468c0:	str	r3, [sp, #44]	; 0x2c
   468c4:	orr	r3, r3, r2
   468c8:	ldr	ip, [r4, #16]
   468cc:	str	r1, [sp, #52]	; 0x34
   468d0:	orr	r3, r3, r1
   468d4:	ldr	r1, [r9, #20]
   468d8:	str	r0, [sp, #32]
   468dc:	and	r0, r0, lr
   468e0:	str	ip, [sp, #8]
   468e4:	mov	ip, r0
   468e8:	mov	r0, r1
   468ec:	ldr	r1, [r4, #20]
   468f0:	str	r0, [sp, #40]	; 0x28
   468f4:	and	r0, r0, r1
   468f8:	str	r0, [sp, #24]
   468fc:	ldr	r0, [r9, #28]
   46900:	str	r2, [sp, #48]	; 0x30
   46904:	str	ip, [sp, #56]	; 0x38
   46908:	ldr	r2, [r9, #16]
   4690c:	orr	r3, r3, ip
   46910:	ldr	ip, [sp, #8]
   46914:	str	r0, [sp, #16]
   46918:	ldr	r0, [r4, #28]
   4691c:	and	ip, r2, ip
   46920:	str	r2, [sp, #36]	; 0x24
   46924:	ldr	r2, [r9, #24]
   46928:	str	ip, [sp, #60]	; 0x3c
   4692c:	orr	r3, r3, ip
   46930:	mov	ip, r0
   46934:	ldr	r0, [sp, #24]
   46938:	str	r2, [sp, #12]
   4693c:	orr	r3, r3, r0
   46940:	ldr	r2, [r4, #24]
   46944:	ldr	r0, [sp, #12]
   46948:	and	r0, r0, r2
   4694c:	orr	r3, r3, r0
   46950:	str	r0, [sp, #64]	; 0x40
   46954:	ldr	r0, [sp, #16]
   46958:	and	r0, r0, ip
   4695c:	orrs	r3, r3, r0
   46960:	str	r0, [sp, #68]	; 0x44
   46964:	beq	46b40 <__assert_fail@plt+0x3454c>
   46968:	bic	r0, r8, r7
   4696c:	bic	r3, fp, sl
   46970:	bic	r7, r7, r8
   46974:	str	r3, [sp, #76]	; 0x4c
   46978:	bic	r8, r6, r5
   4697c:	orr	r3, r3, r0
   46980:	bic	sl, sl, fp
   46984:	orr	r3, r3, r8
   46988:	str	r8, [sp, #84]	; 0x54
   4698c:	ldr	r8, [sp, #32]
   46990:	bic	r6, r5, r6
   46994:	orr	r5, sl, r7
   46998:	bic	fp, lr, r8
   4699c:	orr	r5, r5, r6
   469a0:	bic	lr, r8, lr
   469a4:	str	lr, [sp, #32]
   469a8:	orr	r5, r5, lr
   469ac:	str	r0, [sp, #80]	; 0x50
   469b0:	ldr	lr, [sp, #36]	; 0x24
   469b4:	ldr	r0, [sp, #8]
   469b8:	orr	r3, r3, fp
   469bc:	bic	r8, r0, lr
   469c0:	bic	r0, lr, r0
   469c4:	ldr	lr, [sp, #40]	; 0x28
   469c8:	orr	r3, r3, r8
   469cc:	str	r8, [sp, #8]
   469d0:	ldr	r8, [sp, #12]
   469d4:	str	fp, [sp, #88]	; 0x58
   469d8:	str	sl, [r9]
   469dc:	bic	fp, r1, lr
   469e0:	ldr	sl, [sp, #16]
   469e4:	bic	r1, lr, r1
   469e8:	orr	r3, r3, fp
   469ec:	bic	lr, r2, r8
   469f0:	orr	r3, r3, lr
   469f4:	bic	r2, r8, r2
   469f8:	orr	r5, r5, r0
   469fc:	bic	r8, ip, sl
   46a00:	orr	r5, r5, r1
   46a04:	orrs	r3, r3, r8
   46a08:	bic	r3, sl, ip
   46a0c:	ldr	ip, [sp, #32]
   46a10:	orr	r5, r5, r2
   46a14:	str	r7, [r9, #4]
   46a18:	str	r6, [r9, #8]
   46a1c:	str	ip, [r9, #12]
   46a20:	str	r0, [r9, #16]
   46a24:	str	r1, [r9, #20]
   46a28:	str	r2, [r9, #24]
   46a2c:	orr	r5, r5, r3
   46a30:	str	r3, [r9, #28]
   46a34:	beq	46b18 <__assert_fail@plt+0x34524>
   46a38:	ldr	sl, [sp, #20]
   46a3c:	ldr	r3, [sp, #108]	; 0x6c
   46a40:	ldr	r6, [sp, #76]	; 0x4c
   46a44:	ldr	r1, [sp]
   46a48:	str	r6, [r3, sl, lsl #5]
   46a4c:	add	r3, r3, sl, lsl #5
   46a50:	ldr	r6, [sp, #80]	; 0x50
   46a54:	add	ip, sl, sl, lsl #1
   46a58:	str	r6, [r3, #4]
   46a5c:	ldr	r6, [sp, #84]	; 0x54
   46a60:	add	r7, sp, #3232	; 0xca0
   46a64:	str	r6, [r3, #8]
   46a68:	ldr	r6, [sp, #88]	; 0x58
   46a6c:	str	fp, [r3, #20]
   46a70:	str	r6, [r3, #12]
   46a74:	ldr	r6, [sp, #8]
   46a78:	str	lr, [r3, #24]
   46a7c:	str	r6, [r3, #16]
   46a80:	str	r8, [r3, #28]
   46a84:	ldr	r2, [r1, #4]
   46a88:	ldr	r3, [sp, #44]	; 0x2c
   46a8c:	ldr	r0, [sp, #56]	; 0x38
   46a90:	add	r7, r7, ip, lsl #2
   46a94:	str	r3, [r4]
   46a98:	str	r2, [r7, #4]
   46a9c:	ldr	r3, [sp, #48]	; 0x30
   46aa0:	ldr	r1, [r1, #4]
   46aa4:	str	r0, [r4, #12]
   46aa8:	ldr	r0, [sp, #24]
   46aac:	str	r3, [r4, #4]
   46ab0:	str	r0, [r4, #20]
   46ab4:	ldr	r3, [sp, #60]	; 0x3c
   46ab8:	ldr	r0, [sp, #64]	; 0x40
   46abc:	cmp	r1, #0
   46ac0:	ldr	r1, [sp, #52]	; 0x34
   46ac4:	str	r3, [r4, #16]
   46ac8:	str	r1, [r4, #8]
   46acc:	str	r0, [r4, #24]
   46ad0:	ldr	r0, [sp, #68]	; 0x44
   46ad4:	str	r0, [r4, #28]
   46ad8:	ble	46bb4 <__assert_fail@plt+0x345c0>
   46adc:	add	r3, sp, #3232	; 0xca0
   46ae0:	lsl	r0, r2, #2
   46ae4:	str	r2, [r3, ip, lsl #2]
   46ae8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   46aec:	cmp	r0, #0
   46af0:	str	r0, [r7, #8]
   46af4:	beq	46bd0 <__assert_fail@plt+0x345dc>
   46af8:	ldr	r3, [sp]
   46afc:	ldr	r2, [r3, #4]
   46b00:	ldr	r1, [r3, #8]
   46b04:	lsl	r2, r2, #2
   46b08:	bl	12024 <memcpy@plt>
   46b0c:	ldr	r3, [sp, #20]
   46b10:	add	r3, r3, #1
   46b14:	str	r3, [sp, #20]
   46b18:	ldr	r3, [sp, #72]	; 0x48
   46b1c:	ldr	r2, [sp, #92]	; 0x5c
   46b20:	ldr	r0, [sp]
   46b24:	ldr	r3, [r3, #12]
   46b28:	ldr	r1, [r3, r2]
   46b2c:	bl	3b700 <__assert_fail@plt+0x2910c>
   46b30:	cmp	r0, #0
   46b34:	beq	46bdc <__assert_fail@plt+0x345e8>
   46b38:	cmp	r5, #0
   46b3c:	beq	46cc4 <__assert_fail@plt+0x346d0>
   46b40:	ldr	r3, [sp, #4]
   46b44:	ldr	r2, [sp, #20]
   46b48:	add	r3, r3, #1
   46b4c:	str	r3, [sp, #4]
   46b50:	cmp	r3, r2
   46b54:	ldr	r3, [sp]
   46b58:	add	r4, r4, #32
   46b5c:	add	r3, r3, #12
   46b60:	str	r3, [sp]
   46b64:	bge	46cc4 <__assert_fail@plt+0x346d0>
   46b68:	ldr	r3, [sp, #28]
   46b6c:	cmp	r3, #1
   46b70:	bne	46890 <__assert_fail@plt+0x3429c>
   46b74:	ldr	r3, [sp, #100]	; 0x64
   46b78:	ldrb	r1, [r3]
   46b7c:	ldr	r3, [sp, #4]
   46b80:	and	r2, r1, #31
   46b84:	asr	r1, r1, #5
   46b88:	lsl	r3, r3, #5
   46b8c:	add	r3, r3, r1, lsl #2
   46b90:	add	r1, sp, #14464	; 0x3880
   46b94:	add	r1, r1, #32
   46b98:	add	r3, r1, r3
   46b9c:	sub	r3, r3, #8192	; 0x2000
   46ba0:	ldr	r3, [r3]
   46ba4:	lsr	r2, r3, r2
   46ba8:	tst	r2, #1
   46bac:	beq	46b40 <__assert_fail@plt+0x3454c>
   46bb0:	b	46890 <__assert_fail@plt+0x3429c>
   46bb4:	add	r3, sp, #3232	; 0xca0
   46bb8:	mov	r2, #0
   46bbc:	str	r2, [r3, ip, lsl #2]
   46bc0:	str	r2, [r7, #4]
   46bc4:	str	r2, [r7, #8]
   46bc8:	mov	r3, sl
   46bcc:	b	46b10 <__assert_fail@plt+0x3451c>
   46bd0:	mov	r2, r7
   46bd4:	str	r0, [r2, #4]
   46bd8:	str	r0, [r2]
   46bdc:	ldr	r6, [sp, #20]
   46be0:	add	r4, sp, #3232	; 0xca0
   46be4:	mov	r5, #0
   46be8:	ldr	r0, [r4, #8]
   46bec:	add	r5, r5, #1
   46bf0:	bl	376d0 <__assert_fail@plt+0x250dc>
   46bf4:	cmp	r5, r6
   46bf8:	add	r4, r4, #12
   46bfc:	bne	46be8 <__assert_fail@plt+0x345f4>
   46c00:	mov	r0, #0
   46c04:	add	sp, sp, #14464	; 0x3880
   46c08:	add	sp, sp, #36	; 0x24
   46c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46c10:	ldr	r3, [r3, r2, lsl #3]
   46c14:	ldr	ip, [r9]
   46c18:	ldr	r0, [r9, #4]
   46c1c:	ldr	r1, [r3, #4]
   46c20:	ldr	r2, [r3]
   46c24:	orr	r0, r0, r1
   46c28:	orr	r2, ip, r2
   46c2c:	ldr	r1, [r3, #8]
   46c30:	ldr	ip, [r9, #8]
   46c34:	str	r2, [r9]
   46c38:	orr	r1, ip, r1
   46c3c:	ldr	r2, [r3, #12]
   46c40:	ldr	ip, [r9, #12]
   46c44:	str	r0, [r9, #4]
   46c48:	orr	r2, ip, r2
   46c4c:	ldr	r0, [r3, #16]
   46c50:	ldr	ip, [r9, #16]
   46c54:	str	r1, [r9, #8]
   46c58:	orr	r0, ip, r0
   46c5c:	ldr	r1, [r3, #20]
   46c60:	ldr	ip, [r9, #20]
   46c64:	str	r2, [r9, #12]
   46c68:	orr	r1, ip, r1
   46c6c:	ldr	r2, [r3, #24]
   46c70:	ldr	ip, [r3, #28]
   46c74:	ldr	r3, [r9, #24]
   46c78:	str	r0, [r9, #16]
   46c7c:	orr	r2, r3, r2
   46c80:	ldr	r3, [r9, #28]
   46c84:	str	r1, [r9, #20]
   46c88:	orr	r3, r3, ip
   46c8c:	str	r2, [r9, #24]
   46c90:	str	r3, [r9, #28]
   46c94:	b	46600 <__assert_fail@plt+0x3400c>
   46c98:	ldr	r3, [sp, #100]	; 0x64
   46c9c:	ldrb	r3, [r3, #6]
   46ca0:	tst	r3, #64	; 0x40
   46ca4:	beq	4675c <__assert_fail@plt+0x34168>
   46ca8:	mov	r2, #32
   46cac:	mov	r1, #0
   46cb0:	mov	r0, r9
   46cb4:	bl	12378 <memset@plt>
   46cb8:	ldr	r3, [sp, #72]	; 0x48
   46cbc:	ldr	r1, [r3, #8]
   46cc0:	b	46480 <__assert_fail@plt+0x33e8c>
   46cc4:	ldr	r3, [sp, #20]
   46cc8:	ldr	r2, [sp, #4]
   46ccc:	cmp	r3, r2
   46cd0:	bne	46cb8 <__assert_fail@plt+0x346c4>
   46cd4:	mov	lr, r9
   46cd8:	mov	r4, r3
   46cdc:	add	r5, sp, #14464	; 0x3880
   46ce0:	ldm	lr!, {r0, r1, r2, r3}
   46ce4:	add	r5, r5, #32
   46ce8:	add	ip, r5, r4, lsl #5
   46cec:	sub	ip, ip, #8192	; 0x2000
   46cf0:	add	r5, r4, r4, lsl #1
   46cf4:	stmia	ip!, {r0, r1, r2, r3}
   46cf8:	add	r3, sp, #3232	; 0xca0
   46cfc:	add	r4, r3, r5, lsl #2
   46d00:	ldm	lr, {r0, r1, r2, r3}
   46d04:	ldr	lr, [sp, #72]	; 0x48
   46d08:	stm	ip, {r0, r1, r2, r3}
   46d0c:	mov	r2, #1
   46d10:	ldr	r3, [sp, #92]	; 0x5c
   46d14:	ldr	lr, [lr, #12]
   46d18:	mov	r0, #4
   46d1c:	ldr	r6, [lr, r3]
   46d20:	add	r3, sp, #3232	; 0xca0
   46d24:	str	r2, [r3, r5, lsl #2]
   46d28:	str	r2, [r4, #4]
   46d2c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   46d30:	cmp	r0, #0
   46d34:	str	r0, [r4, #8]
   46d38:	beq	47314 <__assert_fail@plt+0x34d20>
   46d3c:	mov	r1, #0
   46d40:	str	r6, [r0]
   46d44:	mov	r2, #32
   46d48:	mov	r0, r9
   46d4c:	bl	12378 <memset@plt>
   46d50:	ldr	r3, [sp, #72]	; 0x48
   46d54:	ldr	r1, [r3, #8]
   46d58:	ldr	r3, [sp, #20]
   46d5c:	add	r3, r3, #1
   46d60:	str	r3, [sp, #20]
   46d64:	b	46480 <__assert_fail@plt+0x33e8c>
   46d68:	ldr	r2, [sp, #104]	; 0x68
   46d6c:	ldr	r3, [r2, #92]	; 0x5c
   46d70:	cmp	r3, #1
   46d74:	ble	472dc <__assert_fail@plt+0x34ce8>
   46d78:	ldr	r2, [r2, #60]	; 0x3c
   46d7c:	ldr	ip, [r9]
   46d80:	ldr	r1, [r9, #4]
   46d84:	ldm	r2, {r0, r3}
   46d88:	orr	r0, ip, r0
   46d8c:	orr	r3, r1, r3
   46d90:	ldr	ip, [r9, #8]
   46d94:	ldr	r1, [r2, #8]
   46d98:	str	r0, [r9]
   46d9c:	orr	r1, ip, r1
   46da0:	ldr	r0, [r2, #12]
   46da4:	ldr	ip, [r9, #12]
   46da8:	str	r3, [r9, #4]
   46dac:	orr	r0, ip, r0
   46db0:	ldr	r3, [r2, #16]
   46db4:	ldr	ip, [r9, #16]
   46db8:	str	r1, [r9, #8]
   46dbc:	orr	r3, ip, r3
   46dc0:	ldr	r1, [r2, #20]
   46dc4:	ldr	ip, [r9, #20]
   46dc8:	str	r0, [r9, #12]
   46dcc:	orr	r1, ip, r1
   46dd0:	ldr	r0, [r2, #28]
   46dd4:	ldr	ip, [r2, #24]
   46dd8:	str	r3, [r9, #16]
   46ddc:	ldr	r2, [r9, #24]
   46de0:	ldr	r3, [r9, #28]
   46de4:	orr	r2, r2, ip
   46de8:	orr	r3, r3, r0
   46dec:	str	r1, [r9, #20]
   46df0:	str	r2, [r9, #24]
   46df4:	str	r3, [r9, #28]
   46df8:	ldr	r3, [sp, #104]	; 0x68
   46dfc:	ldr	r3, [r3, #128]	; 0x80
   46e00:	tst	r3, #64	; 0x40
   46e04:	ldreq	r2, [r9]
   46e08:	biceq	r2, r2, #1024	; 0x400
   46e0c:	streq	r2, [r9]
   46e10:	tst	r3, #128	; 0x80
   46e14:	beq	46600 <__assert_fail@plt+0x3400c>
   46e18:	ldr	r3, [r9]
   46e1c:	bic	r3, r3, #1
   46e20:	str	r3, [r9]
   46e24:	b	46600 <__assert_fail@plt+0x3400c>
   46e28:	ldr	r5, [r9]
   46e2c:	mov	r2, #32
   46e30:	and	r5, r5, #1024	; 0x400
   46e34:	mov	r1, #0
   46e38:	mov	r0, r9
   46e3c:	bl	12378 <memset@plt>
   46e40:	cmp	r5, #0
   46e44:	beq	46cb8 <__assert_fail@plt+0x346c4>
   46e48:	mov	r3, #1024	; 0x400
   46e4c:	str	r3, [r9]
   46e50:	b	46610 <__assert_fail@plt+0x3401c>
   46e54:	ldr	r2, [r4, #96]	; 0x60
   46e58:	ldr	r3, [r9]
   46e5c:	ldr	r1, [r4, #100]	; 0x64
   46e60:	ldr	r0, [r9, #4]
   46e64:	bic	r3, r3, r2
   46e68:	bic	r0, r0, r1
   46e6c:	ldr	r2, [r4, #104]	; 0x68
   46e70:	ldr	r1, [r9, #8]
   46e74:	ldr	ip, [r9, #12]
   46e78:	bic	r1, r1, r2
   46e7c:	ldr	r2, [r4, #108]	; 0x6c
   46e80:	ldr	lr, [r9, #16]
   46e84:	bic	ip, ip, r2
   46e88:	ldr	r2, [r4, #112]	; 0x70
   46e8c:	str	r3, [r9]
   46e90:	bic	r2, lr, r2
   46e94:	orr	r3, r3, r0
   46e98:	ldr	lr, [r9, #20]
   46e9c:	str	r0, [r9, #4]
   46ea0:	ldr	r0, [r4, #116]	; 0x74
   46ea4:	orr	r3, r3, r1
   46ea8:	bic	r0, lr, r0
   46eac:	orr	r3, r3, ip
   46eb0:	ldr	lr, [r9, #24]
   46eb4:	str	r1, [r9, #8]
   46eb8:	ldr	r1, [r4, #120]	; 0x78
   46ebc:	orr	r3, r3, r2
   46ec0:	str	ip, [r9, #12]
   46ec4:	str	r2, [r9, #16]
   46ec8:	ldr	ip, [r4, #124]	; 0x7c
   46ecc:	ldr	r2, [r9, #28]
   46ed0:	bic	r1, lr, r1
   46ed4:	orr	r3, r3, r0
   46ed8:	bic	r2, r2, ip
   46edc:	orr	r3, r3, r1
   46ee0:	str	r0, [r9, #20]
   46ee4:	str	r1, [r9, #24]
   46ee8:	orr	r3, r3, r2
   46eec:	str	r2, [r9, #28]
   46ef0:	b	46850 <__assert_fail@plt+0x3425c>
   46ef4:	ldr	r7, [sp, #8]
   46ef8:	mov	r3, #0
   46efc:	mov	r2, r8
   46f00:	mov	r1, fp
   46f04:	ldr	r0, [sp, #16]
   46f08:	bl	44ac8 <__assert_fail@plt+0x324d4>
   46f0c:	ldr	r3, [sp, #4]
   46f10:	cmp	r0, #0
   46f14:	str	r0, [r3, #4]!
   46f18:	mov	r4, r0
   46f1c:	str	r3, [sp, #4]
   46f20:	beq	47120 <__assert_fail@plt+0x34b2c>
   46f24:	ldrsb	r3, [r4, #52]	; 0x34
   46f28:	cmp	r3, #0
   46f2c:	blt	471c8 <__assert_fail@plt+0x34bd4>
   46f30:	ldr	r3, [sp]
   46f34:	str	r4, [r9, sl, lsl #2]
   46f38:	str	r4, [r3]
   46f3c:	ldr	r3, [r7, #4]
   46f40:	ldr	r0, [r9, #-2076]	; 0xfffff7e4
   46f44:	ldr	r1, [sp, #20]
   46f48:	add	sl, sl, #1
   46f4c:	ldr	r2, [r7]
   46f50:	orr	r0, r0, r3
   46f54:	ldr	r4, [r9, #-2080]	; 0xfffff7e0
   46f58:	ldr	r3, [r7, #8]
   46f5c:	cmp	sl, r1
   46f60:	ldr	r1, [r9, #-2072]	; 0xfffff7e8
   46f64:	orr	r4, r4, r2
   46f68:	orr	r1, r1, r3
   46f6c:	ldr	r2, [r9, #-2068]	; 0xfffff7ec
   46f70:	ldr	r3, [r7, #12]
   46f74:	str	r0, [r9, #-2076]	; 0xfffff7e4
   46f78:	orr	r2, r2, r3
   46f7c:	ldr	r3, [sp]
   46f80:	ldr	r0, [r9, #-2060]	; 0xfffff7f4
   46f84:	add	r3, r3, #4
   46f88:	str	r1, [r9, #-2072]	; 0xfffff7e8
   46f8c:	ldr	r1, [r7, #20]
   46f90:	ldr	ip, [r9, #-2064]	; 0xfffff7f0
   46f94:	str	r3, [sp]
   46f98:	ldr	r3, [r7, #16]
   46f9c:	orr	r1, r0, r1
   46fa0:	str	r2, [r9, #-2068]	; 0xfffff7ec
   46fa4:	ldr	r0, [r7, #24]
   46fa8:	ldr	r2, [r9, #-2056]	; 0xfffff7f8
   46fac:	orr	r3, ip, r3
   46fb0:	orr	r2, r2, r0
   46fb4:	str	r3, [r9, #-2064]	; 0xfffff7f0
   46fb8:	ldr	r0, [r7, #28]
   46fbc:	ldr	r3, [r9, #-2052]	; 0xfffff7fc
   46fc0:	add	r6, r6, #12
   46fc4:	orr	r3, r3, r0
   46fc8:	str	r4, [r9, #-2080]	; 0xfffff7e0
   46fcc:	str	r1, [r9, #-2060]	; 0xfffff7f4
   46fd0:	str	r2, [r9, #-2056]	; 0xfffff7f8
   46fd4:	str	r3, [r9, #-2052]	; 0xfffff7fc
   46fd8:	add	r7, r7, #32
   46fdc:	bne	46528 <__assert_fail@plt+0x33f34>
   46fe0:	ldr	r3, [sp, #24]
   46fe4:	ldr	r5, [sp, #32]
   46fe8:	cmp	r3, #0
   46fec:	bne	47344 <__assert_fail@plt+0x34d50>
   46ff0:	mov	r1, #256	; 0x100
   46ff4:	mov	r0, #4
   46ff8:	bl	37128 <__assert_fail@plt+0x24b34>
   46ffc:	ldr	r3, [sp, #72]	; 0x48
   47000:	cmp	r0, #0
   47004:	str	r0, [r3, #44]	; 0x2c
   47008:	beq	4712c <__assert_fail@plt+0x34b38>
   4700c:	ldr	r3, [sp, #104]	; 0x68
   47010:	add	r8, sp, #128	; 0x80
   47014:	add	r6, r3, #96	; 0x60
   47018:	mov	r7, r0
   4701c:	add	fp, r0, #1024	; 0x400
   47020:	ldr	r1, [r8], #4
   47024:	cmp	r1, #0
   47028:	movne	ip, r7
   4702c:	movne	r2, #1
   47030:	bne	47048 <__assert_fail@plt+0x34a54>
   47034:	b	47094 <__assert_fail@plt+0x34aa0>
   47038:	lsrs	r1, r1, #1
   4703c:	lsl	r2, r2, #1
   47040:	add	ip, ip, #4
   47044:	beq	47094 <__assert_fail@plt+0x34aa0>
   47048:	tst	r1, #1
   4704c:	beq	47038 <__assert_fail@plt+0x34a44>
   47050:	ldr	r3, [r5]
   47054:	ands	r3, r2, r3
   47058:	bne	4733c <__assert_fail@plt+0x34d48>
   4705c:	add	r3, r3, #1
   47060:	ldr	lr, [r5, r3, lsl #5]
   47064:	tst	r2, lr
   47068:	beq	4705c <__assert_fail@plt+0x34a68>
   4706c:	ldr	lr, [r6]
   47070:	add	r3, r9, r3, lsl #2
   47074:	tst	r2, lr
   47078:	add	ip, ip, #4
   4707c:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   47080:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   47084:	lsrs	r1, r1, #1
   47088:	str	r3, [ip, #-4]
   4708c:	lsl	r2, r2, #1
   47090:	bne	47048 <__assert_fail@plt+0x34a54>
   47094:	add	r7, r7, #128	; 0x80
   47098:	cmp	fp, r7
   4709c:	add	r6, r6, #4
   470a0:	add	r5, r5, #4
   470a4:	bne	47020 <__assert_fail@plt+0x34a2c>
   470a8:	tst	r4, #1024	; 0x400
   470ac:	beq	470e8 <__assert_fail@plt+0x34af4>
   470b0:	mov	r3, #0
   470b4:	ldr	r1, [sp, #28]
   470b8:	b	470c8 <__assert_fail@plt+0x34ad4>
   470bc:	add	r3, r3, #1
   470c0:	cmp	sl, r3
   470c4:	beq	470e8 <__assert_fail@plt+0x34af4>
   470c8:	ldr	r2, [r1, r3, lsl #5]
   470cc:	tst	r2, #1024	; 0x400
   470d0:	beq	470bc <__assert_fail@plt+0x34ac8>
   470d4:	ldr	r2, [sp, #24]
   470d8:	ldr	r3, [r9, r3, lsl #2]
   470dc:	cmp	r2, #0
   470e0:	str	r3, [r0, #40]	; 0x28
   470e4:	strne	r3, [r0, #1064]	; 0x428
   470e8:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   470ec:	add	r9, sl, sl, lsl #1
   470f0:	bl	376d0 <__assert_fail@plt+0x250dc>
   470f4:	ldr	r5, [sp, #12]
   470f8:	mov	r4, #0
   470fc:	lsl	r9, r9, #2
   47100:	add	r3, r5, r4
   47104:	add	r4, r4, #12
   47108:	ldr	r0, [r3, #8]
   4710c:	bl	376d0 <__assert_fail@plt+0x250dc>
   47110:	cmp	r4, r9
   47114:	bne	47100 <__assert_fail@plt+0x34b0c>
   47118:	mov	r0, #1
   4711c:	b	46c04 <__assert_fail@plt+0x34610>
   47120:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   47124:	cmp	r3, #0
   47128:	beq	46f24 <__assert_fail@plt+0x34930>
   4712c:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   47130:	bl	376d0 <__assert_fail@plt+0x250dc>
   47134:	ldr	r5, [sp, #12]
   47138:	ldr	r6, [sp, #20]
   4713c:	mov	r4, #0
   47140:	ldr	r0, [r5, #8]
   47144:	add	r4, r4, #1
   47148:	bl	376d0 <__assert_fail@plt+0x250dc>
   4714c:	cmp	r4, r6
   47150:	add	r5, r5, #12
   47154:	bne	47140 <__assert_fail@plt+0x34b4c>
   47158:	b	46c00 <__assert_fail@plt+0x3460c>
   4715c:	ldr	r3, [sp, #104]	; 0x68
   47160:	ldr	r2, [r3, #128]	; 0x80
   47164:	mvn	r3, #0
   47168:	tst	r2, #64	; 0x40
   4716c:	str	r3, [r9]
   47170:	str	r3, [r9, #4]
   47174:	str	r3, [r9, #8]
   47178:	str	r3, [r9, #12]
   4717c:	mvneq	r3, #1024	; 0x400
   47180:	streq	r3, [r9]
   47184:	tst	r2, #128	; 0x80
   47188:	beq	46600 <__assert_fail@plt+0x3400c>
   4718c:	b	46e18 <__assert_fail@plt+0x34824>
   47190:	mov	r3, #12
   47194:	str	r3, [r9, #-2096]	; 0xfffff7d0
   47198:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   4719c:	b	47130 <__assert_fail@plt+0x34b3c>
   471a0:	ldr	r3, [sp, #100]	; 0x64
   471a4:	ldrb	r3, [r3, #6]
   471a8:	tst	r3, #64	; 0x40
   471ac:	bne	4662c <__assert_fail@plt+0x34038>
   471b0:	b	46ca8 <__assert_fail@plt+0x346b4>
   471b4:	mov	r3, #12
   471b8:	str	r3, [r9, #-2096]	; 0xfffff7d0
   471bc:	add	r3, sp, #3232	; 0xca0
   471c0:	str	r3, [sp, #12]
   471c4:	b	47130 <__assert_fail@plt+0x34b3c>
   471c8:	mov	r3, #1
   471cc:	mov	r2, r8
   471d0:	mov	r1, fp
   471d4:	ldr	r0, [sp, #16]
   471d8:	bl	44ac8 <__assert_fail@plt+0x324d4>
   471dc:	ldr	r3, [sp]
   471e0:	cmp	r0, #0
   471e4:	str	r0, [r3]
   471e8:	beq	4732c <__assert_fail@plt+0x34d38>
   471ec:	cmp	r4, r0
   471f0:	beq	47208 <__assert_fail@plt+0x34c14>
   471f4:	ldr	r3, [fp, #92]	; 0x5c
   471f8:	ldr	r2, [sp, #24]
   471fc:	cmp	r3, #1
   47200:	movgt	r2, #1
   47204:	str	r2, [sp, #24]
   47208:	mov	r3, #2
   4720c:	mov	r2, r8
   47210:	mov	r1, fp
   47214:	ldr	r0, [sp, #16]
   47218:	bl	44ac8 <__assert_fail@plt+0x324d4>
   4721c:	cmp	r0, #0
   47220:	str	r0, [r9, sl, lsl #2]
   47224:	bne	46f3c <__assert_fail@plt+0x34948>
   47228:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   4722c:	cmp	r3, #0
   47230:	beq	46f3c <__assert_fail@plt+0x34948>
   47234:	b	4712c <__assert_fail@plt+0x34b38>
   47238:	ldr	r5, [sp, #104]	; 0x68
   4723c:	ldr	ip, [r9, #4]
   47240:	ldr	r1, [r9]
   47244:	ldr	r2, [r5, #100]	; 0x64
   47248:	ldr	r0, [r9, #8]
   4724c:	and	ip, ip, r2
   47250:	ldr	r3, [r5, #96]	; 0x60
   47254:	ldr	r2, [r5, #104]	; 0x68
   47258:	and	r3, r3, r1
   4725c:	and	r0, r0, r2
   47260:	ldr	r1, [r9, #12]
   47264:	ldr	r2, [r5, #108]	; 0x6c
   47268:	ldr	lr, [r9, #16]
   4726c:	and	r1, r1, r2
   47270:	ldr	r2, [r5, #112]	; 0x70
   47274:	str	r3, [r9]
   47278:	and	r2, r2, lr
   4727c:	orr	r3, r3, ip
   47280:	ldr	lr, [r9, #20]
   47284:	str	ip, [r9, #4]
   47288:	ldr	ip, [r5, #116]	; 0x74
   4728c:	orr	r3, r3, r0
   47290:	and	ip, ip, lr
   47294:	orr	r3, r3, r1
   47298:	ldr	lr, [r9, #24]
   4729c:	str	r0, [r9, #8]
   472a0:	ldr	r0, [r5, #120]	; 0x78
   472a4:	orr	r3, r3, r2
   472a8:	str	r1, [r9, #12]
   472ac:	str	r2, [r9, #16]
   472b0:	ldr	r1, [r9, #28]
   472b4:	ldr	r2, [r5, #124]	; 0x7c
   472b8:	and	r0, r0, lr
   472bc:	orr	r3, r3, ip
   472c0:	and	r1, r1, r2
   472c4:	orr	r3, r3, r0
   472c8:	str	ip, [r9, #20]
   472cc:	str	r0, [r9, #24]
   472d0:	orr	r2, r3, r1
   472d4:	str	r1, [r9, #28]
   472d8:	b	46740 <__assert_fail@plt+0x3414c>
   472dc:	mov	r2, #32
   472e0:	mvn	r1, #0
   472e4:	mov	r0, r9
   472e8:	bl	12378 <memset@plt>
   472ec:	b	46df8 <__assert_fail@plt+0x34804>
   472f0:	bne	46c00 <__assert_fail@plt+0x3460c>
   472f4:	mov	r1, #256	; 0x100
   472f8:	mov	r0, #4
   472fc:	bl	37128 <__assert_fail@plt+0x24b34>
   47300:	ldr	r3, [sp, #72]	; 0x48
   47304:	str	r0, [r3, #44]	; 0x2c
   47308:	adds	r0, r0, #0
   4730c:	movne	r0, #1
   47310:	b	46c04 <__assert_fail@plt+0x34610>
   47314:	ldr	r3, [sp, #20]
   47318:	str	r0, [r4, #4]
   4731c:	cmp	r3, #0
   47320:	str	r0, [r4]
   47324:	beq	46c00 <__assert_fail@plt+0x3460c>
   47328:	b	46bdc <__assert_fail@plt+0x345e8>
   4732c:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   47330:	cmp	r3, #0
   47334:	beq	471f4 <__assert_fail@plt+0x34c00>
   47338:	b	4712c <__assert_fail@plt+0x34b38>
   4733c:	mov	r3, #0
   47340:	b	4706c <__assert_fail@plt+0x34a78>
   47344:	mov	r1, #512	; 0x200
   47348:	mov	r0, #4
   4734c:	bl	37128 <__assert_fail@plt+0x24b34>
   47350:	ldr	r3, [sp, #72]	; 0x48
   47354:	cmp	r0, #0
   47358:	str	r0, [r3, #48]	; 0x30
   4735c:	beq	4712c <__assert_fail@plt+0x34b38>
   47360:	add	r7, sp, #128	; 0x80
   47364:	mov	lr, r0
   47368:	add	r8, r0, #1024	; 0x400
   4736c:	ldr	r1, [r7], #4
   47370:	cmp	r1, #0
   47374:	movne	ip, lr
   47378:	movne	r2, #1
   4737c:	bne	47394 <__assert_fail@plt+0x34da0>
   47380:	b	473d0 <__assert_fail@plt+0x34ddc>
   47384:	lsrs	r1, r1, #1
   47388:	lsl	r2, r2, #1
   4738c:	add	ip, ip, #4
   47390:	beq	473d0 <__assert_fail@plt+0x34ddc>
   47394:	tst	r1, #1
   47398:	beq	47384 <__assert_fail@plt+0x34d90>
   4739c:	ldr	r3, [r5]
   473a0:	ands	r3, r2, r3
   473a4:	bne	473e4 <__assert_fail@plt+0x34df0>
   473a8:	add	r3, r3, #1
   473ac:	ldr	r6, [r5, r3, lsl #5]
   473b0:	tst	r2, r6
   473b4:	beq	473a8 <__assert_fail@plt+0x34db4>
   473b8:	add	r3, r9, r3, lsl #2
   473bc:	ldr	r6, [r3, #-2048]	; 0xfffff800
   473c0:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   473c4:	str	r6, [ip]
   473c8:	str	r3, [ip, #1024]	; 0x400
   473cc:	b	47384 <__assert_fail@plt+0x34d90>
   473d0:	add	lr, lr, #128	; 0x80
   473d4:	cmp	r8, lr
   473d8:	add	r5, r5, #4
   473dc:	bne	4736c <__assert_fail@plt+0x34d78>
   473e0:	b	470a8 <__assert_fail@plt+0x34ab4>
   473e4:	mov	r3, #0
   473e8:	b	473b8 <__assert_fail@plt+0x34dc4>
   473ec:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   473f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   473f4:	mov	r5, r0
   473f8:	ldr	r0, [r0, #84]	; 0x54
   473fc:	sub	sp, sp, #92	; 0x5c
   47400:	mov	ip, r1
   47404:	str	r0, [sp, #28]
   47408:	ldr	r0, [r0]
   4740c:	mov	r7, r2
   47410:	str	r1, [sp, #40]	; 0x28
   47414:	ldr	r2, [sp, #132]	; 0x84
   47418:	ldr	r1, [r5, #120]	; 0x78
   4741c:	ldr	r6, [ip, #4]
   47420:	mov	r8, #0
   47424:	add	r2, r2, r1
   47428:	mov	r4, r3
   4742c:	str	r8, [sp, #56]	; 0x38
   47430:	ldr	r3, [r0, r7, lsl #3]
   47434:	cmp	r2, r6
   47438:	str	r3, [sp, #32]
   4743c:	bge	47bec <__assert_fail@plt+0x355f8>
   47440:	ldr	r3, [sp, #40]	; 0x28
   47444:	ldr	r6, [r3]
   47448:	cmp	r6, #0
   4744c:	beq	47624 <__assert_fail@plt+0x35030>
   47450:	ldr	r9, [r3, #8]
   47454:	ldr	r3, [r5, #100]	; 0x64
   47458:	ldr	r2, [r5, #88]	; 0x58
   4745c:	str	r3, [sp, #44]	; 0x2c
   47460:	ldr	r3, [r5, #40]	; 0x28
   47464:	str	r9, [r5, #100]	; 0x64
   47468:	str	r6, [r5, #40]	; 0x28
   4746c:	sub	r1, r6, #1
   47470:	mov	r0, r5
   47474:	str	r3, [sp, #48]	; 0x30
   47478:	bl	3bc7c <__assert_fail@plt+0x29688>
   4747c:	cmp	r6, r4
   47480:	mov	r8, r0
   47484:	beq	47654 <__assert_fail@plt+0x35060>
   47488:	ldr	r7, [r9, r6, lsl #2]
   4748c:	cmp	r7, #0
   47490:	beq	47c40 <__assert_fail@plt+0x3564c>
   47494:	ldrb	r3, [r7, #52]	; 0x34
   47498:	ands	r2, r3, #64	; 0x40
   4749c:	bne	47b9c <__assert_fail@plt+0x355a8>
   474a0:	add	r1, sp, #64	; 0x40
   474a4:	str	r1, [sp, #16]
   474a8:	str	r2, [sp, #64]	; 0x40
   474ac:	str	r2, [sp, #68]	; 0x44
   474b0:	str	r2, [sp, #72]	; 0x48
   474b4:	tst	r3, #64	; 0x40
   474b8:	beq	47514 <__assert_fail@plt+0x34f20>
   474bc:	ldr	r3, [sp, #68]	; 0x44
   474c0:	cmp	r3, #0
   474c4:	beq	474f0 <__assert_fail@plt+0x34efc>
   474c8:	ldr	r3, [sp, #136]	; 0x88
   474cc:	mov	r2, r6
   474d0:	str	r3, [sp]
   474d4:	ldr	r1, [sp, #16]
   474d8:	ldr	r3, [sp, #32]
   474dc:	mov	r0, r5
   474e0:	bl	407b4 <__assert_fail@plt+0x2e1c0>
   474e4:	cmp	r0, #0
   474e8:	str	r0, [sp, #56]	; 0x38
   474ec:	bne	47a44 <__assert_fail@plt+0x35450>
   474f0:	mov	r3, r8
   474f4:	ldr	r2, [sp, #16]
   474f8:	ldr	r1, [sp, #28]
   474fc:	add	r0, sp, #56	; 0x38
   47500:	bl	44ac8 <__assert_fail@plt+0x324d4>
   47504:	subs	r7, r0, #0
   47508:	beq	47c58 <__assert_fail@plt+0x35664>
   4750c:	ldr	r3, [r5, #100]	; 0x64
   47510:	str	r7, [r3, r6, lsl #2]
   47514:	ldr	r3, [sp, #132]	; 0x84
   47518:	cmp	r3, r6
   4751c:	ble	4794c <__assert_fail@plt+0x35358>
   47520:	ldr	r3, [r5, #120]	; 0x78
   47524:	cmp	r3, #0
   47528:	blt	4794c <__assert_fail@plt+0x35358>
   4752c:	mov	r3, #0
   47530:	add	r2, r6, #1
   47534:	str	r3, [sp, #24]
   47538:	ldr	r3, [r5, #100]	; 0x64
   4753c:	mov	fp, r6
   47540:	lsl	r2, r2, #2
   47544:	str	r2, [sp, #12]
   47548:	ldr	r2, [sp, #12]
   4754c:	ldr	r6, [r3, r2]
   47550:	mov	r3, #0
   47554:	cmp	r6, r3
   47558:	str	r3, [sp, #68]	; 0x44
   4755c:	beq	47a18 <__assert_fail@plt+0x35424>
   47560:	ldr	r4, [r6, #8]
   47564:	cmp	r4, r3
   47568:	streq	r4, [sp, #56]	; 0x38
   4756c:	beq	47a18 <__assert_fail@plt+0x35424>
   47570:	ldr	r3, [sp, #64]	; 0x40
   47574:	cmp	r3, r4, lsl #1
   47578:	blt	47b4c <__assert_fail@plt+0x35558>
   4757c:	add	r1, r6, #4
   47580:	ldr	r0, [sp, #16]
   47584:	bl	3bb38 <__assert_fail@plt+0x29544>
   47588:	cmp	r0, #0
   4758c:	str	r0, [sp, #56]	; 0x38
   47590:	bne	47a44 <__assert_fail@plt+0x35450>
   47594:	cmp	r7, #0
   47598:	beq	47884 <__assert_fail@plt+0x35290>
   4759c:	ldr	r3, [r7, #20]
   475a0:	mov	r2, #0
   475a4:	cmp	r3, r2
   475a8:	str	r2, [sp, #60]	; 0x3c
   475ac:	str	r2, [sp, #76]	; 0x4c
   475b0:	str	r2, [sp, #80]	; 0x50
   475b4:	str	r2, [sp, #84]	; 0x54
   475b8:	ldr	r8, [r5, #84]	; 0x54
   475bc:	ble	47c7c <__assert_fail@plt+0x35688>
   475c0:	ldr	r3, [r7, #24]
   475c4:	mov	r4, #0
   475c8:	ldr	r6, [r3]
   475cc:	mov	r3, r8
   475d0:	ldr	r0, [r3], #128	; 0x80
   475d4:	lsl	sl, r6, #3
   475d8:	str	r3, [sp, #20]
   475dc:	add	r3, r0, sl
   475e0:	ldrb	r1, [r3, #6]
   475e4:	ldrb	r2, [r3, #4]
   475e8:	tst	r1, #16
   475ec:	bne	477a4 <__assert_fail@plt+0x351b0>
   475f0:	ldr	r1, [r5, #4]
   475f4:	sub	r2, r2, #1
   475f8:	ldrb	r1, [r1, fp]
   475fc:	cmp	r2, #6
   47600:	ldrls	pc, [pc, r2, lsl #2]
   47604:	b	47770 <__assert_fail@plt+0x3517c>
   47608:	andeq	r7, r4, r0, ror #19
   4760c:	andeq	r7, r4, r0, ror r7
   47610:	andeq	r7, r4, r0, lsr #19
   47614:	andeq	r7, r4, r0, ror r7
   47618:			; <UNDEFINED> instruction: 0x000476b8
   4761c:	andeq	r7, r4, r0, ror r7
   47620:			; <UNDEFINED> instruction: 0x000476b0
   47624:	ldr	r2, [r5, #100]	; 0x64
   47628:	ldr	r3, [r3, #8]
   4762c:	str	r2, [sp, #44]	; 0x2c
   47630:	ldr	r2, [r5, #40]	; 0x28
   47634:	str	r3, [r5, #100]	; 0x64
   47638:	str	r2, [sp, #48]	; 0x30
   4763c:	str	r4, [r5, #40]	; 0x28
   47640:	ldr	r2, [r5, #88]	; 0x58
   47644:	sub	r1, r4, #1
   47648:	mov	r0, r5
   4764c:	bl	3bc7c <__assert_fail@plt+0x29688>
   47650:	mov	r8, r0
   47654:	mov	r3, #1
   47658:	mov	r0, #4
   4765c:	str	r3, [sp, #64]	; 0x40
   47660:	str	r3, [sp, #68]	; 0x44
   47664:	bl	3a010 <__assert_fail@plt+0x27a1c>
   47668:	cmp	r0, #0
   4766c:	str	r0, [sp, #72]	; 0x48
   47670:	beq	47c74 <__assert_fail@plt+0x35680>
   47674:	add	r3, sp, #64	; 0x40
   47678:	str	r3, [sp, #16]
   4767c:	mov	r1, r3
   47680:	mov	ip, #0
   47684:	str	r7, [r0]
   47688:	ldr	r3, [sp, #136]	; 0x88
   4768c:	ldr	r2, [sp, #32]
   47690:	ldr	r0, [sp, #28]
   47694:	str	ip, [sp, #56]	; 0x38
   47698:	bl	3ef74 <__assert_fail@plt+0x2c980>
   4769c:	cmp	r0, #0
   476a0:	str	r0, [sp, #56]	; 0x38
   476a4:	moveq	r6, r4
   476a8:	beq	474bc <__assert_fail@plt+0x34ec8>
   476ac:	b	47a44 <__assert_fail@plt+0x35450>
   476b0:	tst	r1, #128	; 0x80
   476b4:	bne	47770 <__assert_fail@plt+0x3517c>
   476b8:	cmp	r1, #10
   476bc:	beq	47a84 <__assert_fail@plt+0x35490>
   476c0:	cmp	r1, #0
   476c4:	bne	476d8 <__assert_fail@plt+0x350e4>
   476c8:	ldr	r2, [r5, #84]	; 0x54
   476cc:	ldr	r2, [r2, #128]	; 0x80
   476d0:	tst	r2, #128	; 0x80
   476d4:	bne	47770 <__assert_fail@plt+0x3517c>
   476d8:	ldr	r9, [r3, #4]
   476dc:	ldr	r3, [pc, #1472]	; 47ca4 <__assert_fail@plt+0x356b0>
   476e0:	tst	r9, r3
   476e4:	beq	47738 <__assert_fail@plt+0x35144>
   476e8:	ldr	r2, [r5, #88]	; 0x58
   476ec:	mov	r1, fp
   476f0:	mov	r0, r5
   476f4:	bl	3bc7c <__assert_fail@plt+0x29688>
   476f8:	ldr	r3, [pc, #1448]	; 47ca8 <__assert_fail@plt+0x356b4>
   476fc:	and	r9, r3, r9, lsr #8
   47700:	tst	r9, #4
   47704:	beq	47a70 <__assert_fail@plt+0x3547c>
   47708:	tst	r0, #1
   4770c:	beq	47770 <__assert_fail@plt+0x3517c>
   47710:	tst	r9, #8
   47714:	bne	47770 <__assert_fail@plt+0x3517c>
   47718:	tst	r9, #32
   4771c:	beq	47728 <__assert_fail@plt+0x35134>
   47720:	tst	r0, #2
   47724:	beq	47770 <__assert_fail@plt+0x3517c>
   47728:	tst	r9, #128	; 0x80
   4772c:	beq	47738 <__assert_fail@plt+0x35144>
   47730:	tst	r0, #8
   47734:	beq	47770 <__assert_fail@plt+0x3517c>
   47738:	lsl	sl, r6, #2
   4773c:	ldr	r2, [r8, #12]
   47740:	ldr	r3, [sp, #64]	; 0x40
   47744:	cmp	r3, #0
   47748:	ldr	r6, [r2, sl]
   4774c:	beq	479f0 <__assert_fail@plt+0x353fc>
   47750:	ldr	r2, [sp, #68]	; 0x44
   47754:	cmp	r2, #0
   47758:	bne	47a98 <__assert_fail@plt+0x354a4>
   4775c:	ldr	r3, [sp, #72]	; 0x48
   47760:	str	r6, [r3]
   47764:	ldr	r3, [sp, #68]	; 0x44
   47768:	add	r3, r3, #1
   4776c:	str	r3, [sp, #68]	; 0x44
   47770:	ldr	r3, [r7, #20]
   47774:	add	r4, r4, #1
   47778:	cmp	r4, r3
   4777c:	bge	479cc <__assert_fail@plt+0x353d8>
   47780:	ldr	r3, [r7, #24]
   47784:	ldr	r0, [r8]
   47788:	ldr	r6, [r3, r4, lsl #2]
   4778c:	lsl	sl, r6, #3
   47790:	add	r3, r0, sl
   47794:	ldrb	r1, [r3, #6]
   47798:	ldrb	r2, [r3, #4]
   4779c:	tst	r1, #16
   477a0:	beq	475f0 <__assert_fail@plt+0x34ffc>
   477a4:	str	fp, [sp]
   477a8:	mov	r3, r5
   477ac:	mov	r2, r6
   477b0:	ldr	r1, [sp, #20]
   477b4:	bl	3d758 <__assert_fail@plt+0x2b164>
   477b8:	cmp	r0, #1
   477bc:	ble	47a58 <__assert_fail@plt+0x35464>
   477c0:	ldr	r3, [r5, #100]	; 0x64
   477c4:	add	r9, r0, fp
   477c8:	ldr	r2, [r8, #12]
   477cc:	ldr	r3, [r3, r9, lsl #2]
   477d0:	mov	r1, #0
   477d4:	cmp	r3, #0
   477d8:	ldr	r2, [r2, r6, lsl #2]
   477dc:	lsl	sl, r6, #2
   477e0:	str	r1, [sp, #80]	; 0x50
   477e4:	beq	47824 <__assert_fail@plt+0x35230>
   477e8:	ldr	r6, [r3, #8]
   477ec:	cmp	r6, r1
   477f0:	streq	r6, [sp, #60]	; 0x3c
   477f4:	beq	47824 <__assert_fail@plt+0x35230>
   477f8:	ldr	r1, [sp, #76]	; 0x4c
   477fc:	cmp	r1, r6, lsl #1
   47800:	blt	47ae0 <__assert_fail@plt+0x354ec>
   47804:	add	r1, r3, #4
   47808:	add	r0, sp, #76	; 0x4c
   4780c:	str	r2, [sp, #36]	; 0x24
   47810:	bl	3bb38 <__assert_fail@plt+0x29544>
   47814:	ldr	r2, [sp, #36]	; 0x24
   47818:	cmp	r0, #0
   4781c:	str	r0, [sp, #60]	; 0x3c
   47820:	bne	4786c <__assert_fail@plt+0x35278>
   47824:	mov	r1, r2
   47828:	add	r0, sp, #76	; 0x4c
   4782c:	bl	3b700 <__assert_fail@plt+0x2910c>
   47830:	cmp	r0, #0
   47834:	beq	47a34 <__assert_fail@plt+0x35440>
   47838:	add	r2, sp, #76	; 0x4c
   4783c:	mov	r1, r8
   47840:	add	r0, sp, #60	; 0x3c
   47844:	ldr	r6, [r5, #100]	; 0x64
   47848:	bl	404e4 <__assert_fail@plt+0x2def0>
   4784c:	ldr	r3, [r5, #100]	; 0x64
   47850:	str	r0, [r6, r9, lsl #2]
   47854:	ldr	r3, [r3, r9, lsl #2]
   47858:	cmp	r3, #0
   4785c:	bne	4773c <__assert_fail@plt+0x35148>
   47860:	ldr	r3, [sp, #60]	; 0x3c
   47864:	cmp	r3, #0
   47868:	beq	4773c <__assert_fail@plt+0x35148>
   4786c:	ldr	r0, [sp, #84]	; 0x54
   47870:	bl	376d0 <__assert_fail@plt+0x250dc>
   47874:	ldr	r3, [sp, #60]	; 0x3c
   47878:	cmp	r3, #0
   4787c:	str	r3, [sp, #56]	; 0x38
   47880:	bne	47a44 <__assert_fail@plt+0x35450>
   47884:	ldr	r3, [sp, #68]	; 0x44
   47888:	add	r4, fp, #1
   4788c:	cmp	r3, #0
   47890:	mov	r6, r4
   47894:	beq	478e0 <__assert_fail@plt+0x352ec>
   47898:	ldr	r3, [sp, #136]	; 0x88
   4789c:	ldr	r2, [sp, #32]
   478a0:	ldr	r1, [sp, #16]
   478a4:	ldr	r0, [sp, #28]
   478a8:	bl	3ef74 <__assert_fail@plt+0x2c980>
   478ac:	cmp	r0, #0
   478b0:	str	r0, [sp, #56]	; 0x38
   478b4:	bne	47a44 <__assert_fail@plt+0x35450>
   478b8:	ldr	r3, [sp, #136]	; 0x88
   478bc:	mov	r2, r4
   478c0:	str	r3, [sp]
   478c4:	ldr	r1, [sp, #16]
   478c8:	ldr	r3, [sp, #32]
   478cc:	mov	r0, r5
   478d0:	bl	407b4 <__assert_fail@plt+0x2e1c0>
   478d4:	cmp	r0, #0
   478d8:	str	r0, [sp, #56]	; 0x38
   478dc:	bne	47a44 <__assert_fail@plt+0x35450>
   478e0:	ldr	r2, [r5, #88]	; 0x58
   478e4:	mov	r1, fp
   478e8:	mov	r0, r5
   478ec:	bl	3bc7c <__assert_fail@plt+0x29688>
   478f0:	ldr	r2, [sp, #16]
   478f4:	ldr	r1, [sp, #28]
   478f8:	mov	r3, r0
   478fc:	add	r0, sp, #56	; 0x38
   47900:	bl	44ac8 <__assert_fail@plt+0x324d4>
   47904:	subs	r7, r0, #0
   47908:	beq	47b74 <__assert_fail@plt+0x35580>
   4790c:	mov	r2, #0
   47910:	str	r2, [sp, #24]
   47914:	ldr	r3, [r5, #100]	; 0x64
   47918:	ldr	r2, [sp, #12]
   4791c:	str	r7, [r3, r2]
   47920:	ldr	r2, [sp, #132]	; 0x84
   47924:	cmp	r2, r4
   47928:	ble	4794c <__assert_fail@plt+0x35358>
   4792c:	ldr	r1, [sp, #12]
   47930:	ldr	r2, [r5, #120]	; 0x78
   47934:	add	r1, r1, #4
   47938:	str	r1, [sp, #12]
   4793c:	ldr	r1, [sp, #24]
   47940:	mov	fp, r4
   47944:	cmp	r1, r2
   47948:	ble	47548 <__assert_fail@plt+0x34f54>
   4794c:	ldr	r0, [sp, #72]	; 0x48
   47950:	bl	376d0 <__assert_fail@plt+0x250dc>
   47954:	ldr	r3, [r5, #100]	; 0x64
   47958:	ldr	r2, [sp, #132]	; 0x84
   4795c:	ldr	r3, [r3, r2, lsl #2]
   47960:	cmp	r3, #0
   47964:	beq	47c84 <__assert_fail@plt+0x35690>
   47968:	ldr	r2, [sp, #40]	; 0x28
   4796c:	add	r1, r3, #12
   47970:	str	r6, [r2]
   47974:	ldr	r2, [sp, #48]	; 0x30
   47978:	str	r2, [r5, #40]	; 0x28
   4797c:	ldr	r2, [sp, #44]	; 0x2c
   47980:	ldr	r0, [r3, #8]
   47984:	str	r2, [r5, #100]	; 0x64
   47988:	ldr	r2, [sp, #128]	; 0x80
   4798c:	bl	3b81c <__assert_fail@plt+0x29228>
   47990:	clz	r0, r0
   47994:	lsr	r0, r0, #5
   47998:	add	sp, sp, #92	; 0x5c
   4799c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   479a0:	ldr	r2, [r3]
   479a4:	asr	r0, r1, #5
   479a8:	and	r1, r1, #31
   479ac:	ldr	r2, [r2, r0, lsl #2]
   479b0:	lsr	r1, r2, r1
   479b4:	tst	r1, #1
   479b8:	bne	476d8 <__assert_fail@plt+0x350e4>
   479bc:	ldr	r3, [r7, #20]
   479c0:	add	r4, r4, #1
   479c4:	cmp	r4, r3
   479c8:	blt	47780 <__assert_fail@plt+0x3518c>
   479cc:	ldr	r0, [sp, #84]	; 0x54
   479d0:	bl	376d0 <__assert_fail@plt+0x250dc>
   479d4:	mov	r3, #0
   479d8:	str	r3, [sp, #56]	; 0x38
   479dc:	b	47884 <__assert_fail@plt+0x35290>
   479e0:	ldrb	r2, [r3]
   479e4:	cmp	r2, r1
   479e8:	bne	47770 <__assert_fail@plt+0x3517c>
   479ec:	b	476d8 <__assert_fail@plt+0x350e4>
   479f0:	mov	r3, #1
   479f4:	mov	r0, #4
   479f8:	str	r3, [sp, #64]	; 0x40
   479fc:	str	r3, [sp, #68]	; 0x44
   47a00:	bl	3a010 <__assert_fail@plt+0x27a1c>
   47a04:	cmp	r0, #0
   47a08:	str	r0, [sp, #72]	; 0x48
   47a0c:	beq	47a2c <__assert_fail@plt+0x35438>
   47a10:	str	r6, [r0]
   47a14:	b	47770 <__assert_fail@plt+0x3517c>
   47a18:	cmp	r7, #0
   47a1c:	bne	4759c <__assert_fail@plt+0x34fa8>
   47a20:	add	r4, fp, #1
   47a24:	mov	r6, r4
   47a28:	b	478e0 <__assert_fail@plt+0x352ec>
   47a2c:	str	r0, [sp, #68]	; 0x44
   47a30:	str	r0, [sp, #64]	; 0x40
   47a34:	ldr	r0, [sp, #84]	; 0x54
   47a38:	bl	376d0 <__assert_fail@plt+0x250dc>
   47a3c:	mov	r3, #12
   47a40:	str	r3, [sp, #56]	; 0x38
   47a44:	ldr	r0, [sp, #72]	; 0x48
   47a48:	bl	376d0 <__assert_fail@plt+0x250dc>
   47a4c:	ldr	r0, [sp, #56]	; 0x38
   47a50:	add	sp, sp, #92	; 0x5c
   47a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47a58:	cmp	r0, #0
   47a5c:	bne	47738 <__assert_fail@plt+0x35144>
   47a60:	ldr	r3, [r8]
   47a64:	add	r3, r3, sl
   47a68:	ldrb	r2, [r3, #4]
   47a6c:	b	475f0 <__assert_fail@plt+0x34ffc>
   47a70:	tst	r9, #8
   47a74:	beq	47718 <__assert_fail@plt+0x35124>
   47a78:	tst	r0, #1
   47a7c:	beq	47718 <__assert_fail@plt+0x35124>
   47a80:	b	47770 <__assert_fail@plt+0x3517c>
   47a84:	ldr	r2, [r5, #84]	; 0x54
   47a88:	ldr	r2, [r2, #128]	; 0x80
   47a8c:	tst	r2, #64	; 0x40
   47a90:	bne	476d8 <__assert_fail@plt+0x350e4>
   47a94:	b	47770 <__assert_fail@plt+0x3517c>
   47a98:	cmp	r3, r2
   47a9c:	beq	47bc4 <__assert_fail@plt+0x355d0>
   47aa0:	ldr	r9, [sp, #72]	; 0x48
   47aa4:	ldr	r3, [r9]
   47aa8:	cmp	r6, r3
   47aac:	bge	47b18 <__assert_fail@plt+0x35524>
   47ab0:	cmp	r2, #0
   47ab4:	ble	47acc <__assert_fail@plt+0x354d8>
   47ab8:	lsl	r2, r2, #2
   47abc:	mov	r1, r9
   47ac0:	add	r0, r9, #4
   47ac4:	bl	11fb8 <memmove@plt>
   47ac8:	mov	r2, #0
   47acc:	str	r6, [r9, r2, lsl #2]
   47ad0:	ldr	r3, [sp, #68]	; 0x44
   47ad4:	add	r3, r3, #1
   47ad8:	str	r3, [sp, #68]	; 0x44
   47adc:	b	47770 <__assert_fail@plt+0x3517c>
   47ae0:	add	r6, r6, r1
   47ae4:	ldr	r0, [sp, #84]	; 0x54
   47ae8:	lsl	r1, r6, #3
   47aec:	str	r3, [sp, #52]	; 0x34
   47af0:	str	r2, [sp, #36]	; 0x24
   47af4:	bl	3aacc <__assert_fail@plt+0x284d8>
   47af8:	lsl	r6, r6, #1
   47afc:	ldr	r2, [sp, #36]	; 0x24
   47b00:	ldr	r3, [sp, #52]	; 0x34
   47b04:	cmp	r0, #0
   47b08:	beq	47c68 <__assert_fail@plt+0x35674>
   47b0c:	str	r0, [sp, #84]	; 0x54
   47b10:	str	r6, [sp, #76]	; 0x4c
   47b14:	b	47804 <__assert_fail@plt+0x35210>
   47b18:	sub	r3, r2, #-1073741823	; 0xc0000001
   47b1c:	ldr	r1, [r9, r3, lsl #2]
   47b20:	lsl	r3, r3, #2
   47b24:	cmp	r6, r1
   47b28:	bge	47acc <__assert_fail@plt+0x354d8>
   47b2c:	add	r3, r3, #4
   47b30:	add	r3, r9, r3
   47b34:	str	r1, [r3], #-4
   47b38:	ldr	r1, [r3, #-4]
   47b3c:	sub	r2, r2, #1
   47b40:	cmp	r6, r1
   47b44:	blt	47b34 <__assert_fail@plt+0x35540>
   47b48:	b	47acc <__assert_fail@plt+0x354d8>
   47b4c:	add	r4, r4, r3
   47b50:	ldr	r0, [sp, #72]	; 0x48
   47b54:	lsl	r1, r4, #3
   47b58:	bl	3aacc <__assert_fail@plt+0x284d8>
   47b5c:	lsl	r4, r4, #1
   47b60:	cmp	r0, #0
   47b64:	beq	47a3c <__assert_fail@plt+0x35448>
   47b68:	str	r0, [sp, #72]	; 0x48
   47b6c:	str	r4, [sp, #64]	; 0x40
   47b70:	b	4757c <__assert_fail@plt+0x34f88>
   47b74:	ldr	r3, [sp, #56]	; 0x38
   47b78:	cmp	r3, #0
   47b7c:	bne	47a44 <__assert_fail@plt+0x35450>
   47b80:	ldr	r2, [sp, #24]
   47b84:	ldr	r3, [r5, #100]	; 0x64
   47b88:	add	r2, r2, #1
   47b8c:	str	r2, [sp, #24]
   47b90:	ldr	r2, [sp, #12]
   47b94:	str	r7, [r3, r2]
   47b98:	b	47920 <__assert_fail@plt+0x3532c>
   47b9c:	add	r3, sp, #64	; 0x40
   47ba0:	mov	r0, r3
   47ba4:	add	r1, r7, #4
   47ba8:	str	r3, [sp, #16]
   47bac:	bl	3b970 <__assert_fail@plt+0x2937c>
   47bb0:	cmp	r0, #0
   47bb4:	str	r0, [sp, #56]	; 0x38
   47bb8:	bne	47a50 <__assert_fail@plt+0x3545c>
   47bbc:	ldrb	r3, [r7, #52]	; 0x34
   47bc0:	b	474b4 <__assert_fail@plt+0x34ec0>
   47bc4:	lsl	r3, r2, #1
   47bc8:	lsl	r1, r2, #3
   47bcc:	ldr	r0, [sp, #72]	; 0x48
   47bd0:	str	r3, [sp, #64]	; 0x40
   47bd4:	bl	3aacc <__assert_fail@plt+0x284d8>
   47bd8:	subs	r9, r0, #0
   47bdc:	beq	47a34 <__assert_fail@plt+0x35440>
   47be0:	ldr	r2, [sp, #68]	; 0x44
   47be4:	str	r9, [sp, #72]	; 0x48
   47be8:	b	47aa4 <__assert_fail@plt+0x354b0>
   47bec:	mvn	r3, #-2147483648	; 0x80000000
   47bf0:	add	r9, r2, #1
   47bf4:	sub	r3, r3, r6
   47bf8:	cmp	r9, r3
   47bfc:	bgt	47c74 <__assert_fail@plt+0x35680>
   47c00:	add	sl, r6, r9
   47c04:	cmn	sl, #-1073741823	; 0xc0000001
   47c08:	bhi	47c74 <__assert_fail@plt+0x35680>
   47c0c:	lsl	r1, sl, #2
   47c10:	ldr	r0, [ip, #8]
   47c14:	mov	fp, ip
   47c18:	bl	3aacc <__assert_fail@plt+0x284d8>
   47c1c:	cmp	r0, #0
   47c20:	beq	47c74 <__assert_fail@plt+0x35680>
   47c24:	str	r0, [fp, #8]
   47c28:	str	sl, [fp, #4]
   47c2c:	lsl	r2, r9, #2
   47c30:	mov	r1, r8
   47c34:	add	r0, r0, r6, lsl #2
   47c38:	bl	12378 <memset@plt>
   47c3c:	b	47440 <__assert_fail@plt+0x34e4c>
   47c40:	add	r3, sp, #64	; 0x40
   47c44:	str	r3, [sp, #16]
   47c48:	str	r7, [sp, #64]	; 0x40
   47c4c:	str	r7, [sp, #68]	; 0x44
   47c50:	str	r7, [sp, #72]	; 0x48
   47c54:	b	47514 <__assert_fail@plt+0x34f20>
   47c58:	ldr	r3, [sp, #56]	; 0x38
   47c5c:	cmp	r3, #0
   47c60:	beq	4750c <__assert_fail@plt+0x34f18>
   47c64:	b	47a44 <__assert_fail@plt+0x35450>
   47c68:	mov	r3, #12
   47c6c:	str	r3, [sp, #60]	; 0x3c
   47c70:	b	4786c <__assert_fail@plt+0x35278>
   47c74:	mov	r0, #12
   47c78:	b	47a50 <__assert_fail@plt+0x3545c>
   47c7c:	mov	r0, #0
   47c80:	b	479d0 <__assert_fail@plt+0x353dc>
   47c84:	ldr	r3, [sp, #40]	; 0x28
   47c88:	mov	r0, #1
   47c8c:	str	r6, [r3]
   47c90:	ldr	r3, [sp, #44]	; 0x2c
   47c94:	str	r3, [r5, #100]	; 0x64
   47c98:	ldr	r3, [sp, #48]	; 0x30
   47c9c:	str	r3, [r5, #40]	; 0x28
   47ca0:	b	47a50 <__assert_fail@plt+0x3545c>
   47ca4:	andeq	pc, r3, r0, lsl #30
   47ca8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   47cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47cb0:	sub	sp, sp, #20
   47cb4:	mov	ip, r2
   47cb8:	ldr	r5, [sp, #56]	; 0x38
   47cbc:	ldr	r4, [r2, #4]
   47cc0:	mov	lr, #8
   47cc4:	mov	r6, r2
   47cc8:	ldr	r2, [ip], #8
   47ccc:	mov	r7, r3
   47cd0:	str	r3, [sp]
   47cd4:	mov	r9, r1
   47cd8:	mov	r3, r4
   47cdc:	mov	r1, ip
   47ce0:	stmib	sp, {r5, lr}
   47ce4:	mov	r4, r0
   47ce8:	bl	473f0 <__assert_fail@plt+0x34dfc>
   47cec:	subs	r8, r0, #0
   47cf0:	beq	47d00 <__assert_fail@plt+0x3570c>
   47cf4:	mov	r0, r8
   47cf8:	add	sp, sp, #20
   47cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47d00:	ldr	r3, [r4, #108]	; 0x6c
   47d04:	ldr	r1, [r4, #112]	; 0x70
   47d08:	ldr	sl, [r6, #4]
   47d0c:	cmp	r3, r1
   47d10:	ldr	fp, [r9]
   47d14:	movlt	ip, sl
   47d18:	bge	47e14 <__assert_fail@plt+0x35820>
   47d1c:	add	r2, r3, r3, lsl #1
   47d20:	cmp	r3, #0
   47d24:	ldr	r0, [r4, #116]	; 0x74
   47d28:	lsl	r2, r2, #3
   47d2c:	ble	47d48 <__assert_fail@plt+0x35754>
   47d30:	sub	r1, r2, #24
   47d34:	add	r1, r0, r1
   47d38:	ldr	lr, [r1, #4]
   47d3c:	cmp	r5, lr
   47d40:	moveq	lr, #1
   47d44:	strbeq	lr, [r1, #20]
   47d48:	add	r1, r0, r2
   47d4c:	cmp	fp, sl
   47d50:	str	r7, [r0, r2]
   47d54:	add	r3, r3, #1
   47d58:	movne	r0, #0
   47d5c:	mvneq	r0, #0
   47d60:	mov	r2, #0
   47d64:	stmib	r1, {r5, fp}
   47d68:	str	sl, [r1, #12]
   47d6c:	str	r0, [r1, #16]
   47d70:	str	r3, [r4, #108]	; 0x6c
   47d74:	strb	r2, [r1, #20]
   47d78:	ldr	r3, [r4, #120]	; 0x78
   47d7c:	sub	sl, sl, fp
   47d80:	cmp	r3, sl
   47d84:	strlt	sl, [r4, #120]	; 0x78
   47d88:	ldr	r2, [r9]
   47d8c:	add	r5, r5, ip
   47d90:	ldr	r3, [r4, #36]	; 0x24
   47d94:	sub	r5, r5, r2
   47d98:	cmp	r5, r3
   47d9c:	ldr	r6, [r4, #104]	; 0x68
   47da0:	blt	47df8 <__assert_fail@plt+0x35804>
   47da4:	ldr	r2, [r4, #48]	; 0x30
   47da8:	cmp	r3, r2
   47dac:	bge	47df8 <__assert_fail@plt+0x35804>
   47db0:	add	r1, r5, #1
   47db4:	mov	r0, r4
   47db8:	bl	402d0 <__assert_fail@plt+0x2dcdc>
   47dbc:	cmp	r0, #0
   47dc0:	bne	47e68 <__assert_fail@plt+0x35874>
   47dc4:	cmp	r5, r6
   47dc8:	ble	47cf4 <__assert_fail@plt+0x35700>
   47dcc:	sub	r2, r5, r6
   47dd0:	ldr	r0, [r4, #100]	; 0x64
   47dd4:	add	r6, r6, #1
   47dd8:	lsl	r2, r2, #2
   47ddc:	add	r0, r0, r6, lsl #2
   47de0:	mov	r1, #0
   47de4:	bl	12378 <memset@plt>
   47de8:	mov	r0, r8
   47dec:	str	r5, [r4, #104]	; 0x68
   47df0:	add	sp, sp, #20
   47df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47df8:	ldr	r3, [r4, #28]
   47dfc:	cmp	r5, r3
   47e00:	blt	47dc4 <__assert_fail@plt+0x357d0>
   47e04:	ldr	r2, [r4, #48]	; 0x30
   47e08:	cmp	r3, r2
   47e0c:	bge	47dc4 <__assert_fail@plt+0x357d0>
   47e10:	b	47db0 <__assert_fail@plt+0x357bc>
   47e14:	add	r1, r1, r1, lsl #1
   47e18:	ldr	r0, [r4, #116]	; 0x74
   47e1c:	lsl	r1, r1, #4
   47e20:	bl	3aacc <__assert_fail@plt+0x284d8>
   47e24:	cmp	r0, #0
   47e28:	beq	47e70 <__assert_fail@plt+0x3587c>
   47e2c:	ldr	r2, [r4, #112]	; 0x70
   47e30:	ldr	r3, [r4, #108]	; 0x6c
   47e34:	str	r0, [r4, #116]	; 0x74
   47e38:	add	r2, r2, r2, lsl #1
   47e3c:	add	r3, r3, r3, lsl #1
   47e40:	lsl	r2, r2, #3
   47e44:	add	r0, r0, r3, lsl #3
   47e48:	mov	r1, r8
   47e4c:	bl	12378 <memset@plt>
   47e50:	ldr	r2, [r4, #112]	; 0x70
   47e54:	ldr	ip, [r6, #4]
   47e58:	ldr	r3, [r4, #108]	; 0x6c
   47e5c:	lsl	r2, r2, #1
   47e60:	str	r2, [r4, #112]	; 0x70
   47e64:	b	47d1c <__assert_fail@plt+0x35728>
   47e68:	mov	r8, r0
   47e6c:	b	47cf4 <__assert_fail@plt+0x35700>
   47e70:	ldr	r0, [r4, #116]	; 0x74
   47e74:	bl	376d0 <__assert_fail@plt+0x250dc>
   47e78:	mov	r8, #12
   47e7c:	b	47cf4 <__assert_fail@plt+0x35700>
   47e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47e84:	sub	sp, sp, #92	; 0x5c
   47e88:	ldr	r6, [r1]
   47e8c:	ldr	r3, [r0, #84]	; 0x54
   47e90:	cmp	r6, #0
   47e94:	str	r3, [sp, #36]	; 0x24
   47e98:	ldr	fp, [r0, #40]	; 0x28
   47e9c:	ble	48428 <__assert_fail@plt+0x35e34>
   47ea0:	mov	r3, #0
   47ea4:	str	r3, [sp, #20]
   47ea8:	lsl	r3, fp, #2
   47eac:	str	r2, [sp, #40]	; 0x28
   47eb0:	mov	sl, r0
   47eb4:	str	r1, [sp, #64]	; 0x40
   47eb8:	str	r3, [sp, #52]	; 0x34
   47ebc:	mov	r9, fp
   47ec0:	b	47ed8 <__assert_fail@plt+0x358e4>
   47ec4:	ldr	r3, [sp, #20]
   47ec8:	add	r3, r3, #1
   47ecc:	cmp	r3, r6
   47ed0:	str	r3, [sp, #20]
   47ed4:	bge	48428 <__assert_fail@plt+0x35e34>
   47ed8:	ldr	r3, [sp, #40]	; 0x28
   47edc:	ldr	r1, [sp, #20]
   47ee0:	ldr	r2, [r3]
   47ee4:	ldr	r3, [sp, #36]	; 0x24
   47ee8:	ldr	fp, [r2, r1, lsl #2]
   47eec:	ldr	r3, [r3]
   47ef0:	add	r3, r3, fp, lsl #3
   47ef4:	ldrb	r2, [r3, #4]
   47ef8:	cmp	r2, #4
   47efc:	bne	47ec4 <__assert_fail@plt+0x358d0>
   47f00:	ldr	r4, [r3, #4]
   47f04:	ldr	r3, [pc, #1924]	; 48690 <__assert_fail@plt+0x3609c>
   47f08:	tst	r4, r3
   47f0c:	beq	47f60 <__assert_fail@plt+0x3596c>
   47f10:	ldr	r2, [sl, #88]	; 0x58
   47f14:	mov	r1, r9
   47f18:	mov	r0, sl
   47f1c:	bl	3bc7c <__assert_fail@plt+0x29688>
   47f20:	ldr	r3, [pc, #1900]	; 48694 <__assert_fail@plt+0x360a0>
   47f24:	and	r4, r3, r4, lsr #8
   47f28:	tst	r4, #4
   47f2c:	beq	481c0 <__assert_fail@plt+0x35bcc>
   47f30:	tst	r0, #1
   47f34:	beq	47ec4 <__assert_fail@plt+0x358d0>
   47f38:	tst	r4, #8
   47f3c:	bne	47ec4 <__assert_fail@plt+0x358d0>
   47f40:	tst	r4, #32
   47f44:	beq	47f50 <__assert_fail@plt+0x3595c>
   47f48:	tst	r0, #2
   47f4c:	beq	47ec4 <__assert_fail@plt+0x358d0>
   47f50:	tst	r4, #128	; 0x80
   47f54:	beq	47f60 <__assert_fail@plt+0x3596c>
   47f58:	tst	r0, #8
   47f5c:	beq	47ec4 <__assert_fail@plt+0x358d0>
   47f60:	ldr	ip, [sl, #108]	; 0x6c
   47f64:	mov	r0, #0
   47f68:	mov	r8, ip
   47f6c:	mov	r3, ip
   47f70:	cmp	r0, r3
   47f74:	bge	47fd0 <__assert_fail@plt+0x359dc>
   47f78:	add	r2, r0, r3
   47f7c:	ldr	lr, [sl, #116]	; 0x74
   47f80:	add	r2, r2, r2, lsr #31
   47f84:	asr	r2, r2, #1
   47f88:	add	r1, r2, r2, lsl #1
   47f8c:	add	r1, lr, r1, lsl #3
   47f90:	ldr	r1, [r1, #4]
   47f94:	cmp	r9, r1
   47f98:	ble	47fc0 <__assert_fail@plt+0x359cc>
   47f9c:	b	481ac <__assert_fail@plt+0x35bb8>
   47fa0:	asr	r3, r3, #1
   47fa4:	mov	r4, r3
   47fa8:	add	r1, r3, r3, lsl #1
   47fac:	add	r1, lr, r1, lsl #3
   47fb0:	ldr	r1, [r1, #4]
   47fb4:	cmp	r9, r1
   47fb8:	bgt	481b4 <__assert_fail@plt+0x35bc0>
   47fbc:	mov	r2, r3
   47fc0:	add	r3, r0, r2
   47fc4:	cmp	r0, r2
   47fc8:	add	r3, r3, r3, lsr #31
   47fcc:	blt	47fa0 <__assert_fail@plt+0x359ac>
   47fd0:	cmp	ip, r0
   47fd4:	ble	481d4 <__assert_fail@plt+0x35be0>
   47fd8:	add	r2, r0, r0, lsl #1
   47fdc:	ldr	r3, [sl, #116]	; 0x74
   47fe0:	cmn	r0, #1
   47fe4:	add	r3, r3, r2, lsl #3
   47fe8:	ldr	r2, [r3, #4]
   47fec:	sub	r2, r2, r9
   47ff0:	clz	r2, r2
   47ff4:	lsr	r2, r2, #5
   47ff8:	moveq	r2, #0
   47ffc:	cmp	r2, #0
   48000:	beq	481d4 <__assert_fail@plt+0x35be0>
   48004:	add	r3, r3, #24
   48008:	b	48018 <__assert_fail@plt+0x35a24>
   4800c:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   48010:	cmp	r2, #0
   48014:	beq	481d4 <__assert_fail@plt+0x35be0>
   48018:	ldr	r2, [r3, #-24]	; 0xffffffe8
   4801c:	add	r3, r3, #24
   48020:	cmp	fp, r2
   48024:	bne	4800c <__assert_fail@plt+0x35a18>
   48028:	mov	r3, #0
   4802c:	str	r3, [sp, #72]	; 0x48
   48030:	cmp	r8, ip
   48034:	lsl	r3, fp, #2
   48038:	str	r3, [sp, #48]	; 0x30
   4803c:	bge	481a0 <__assert_fail@plt+0x35bac>
   48040:	add	r3, fp, fp, lsl #1
   48044:	add	r4, r8, r8, lsl #1
   48048:	lsl	r3, r3, #2
   4804c:	str	r3, [sp, #56]	; 0x38
   48050:	lsl	r4, r4, #3
   48054:	ldr	r6, [sp, #36]	; 0x24
   48058:	b	4806c <__assert_fail@plt+0x35a78>
   4805c:	add	r8, r8, #1
   48060:	cmp	r8, ip
   48064:	add	r4, r4, #24
   48068:	bge	481a0 <__assert_fail@plt+0x35bac>
   4806c:	ldr	r3, [sl, #116]	; 0x74
   48070:	add	r2, r3, r4
   48074:	ldr	r3, [r3, r4]
   48078:	cmp	fp, r3
   4807c:	bne	4805c <__assert_fail@plt+0x35a68>
   48080:	ldr	r3, [r2, #4]
   48084:	cmp	r9, r3
   48088:	bne	4805c <__assert_fail@plt+0x35a68>
   4808c:	ldr	r3, [r2, #12]
   48090:	ldr	r5, [r2, #8]
   48094:	subs	r2, r3, r5
   48098:	str	r2, [sp, #28]
   4809c:	ldreq	r0, [sp, #56]	; 0x38
   480a0:	ldreq	r2, [r6, #20]
   480a4:	ldrne	r2, [r6, #12]
   480a8:	addeq	r2, r2, r0
   480ac:	ldrne	r0, [sp, #48]	; 0x30
   480b0:	ldreq	r2, [r2, #8]
   480b4:	ldreq	r1, [r6, #24]
   480b8:	ldrne	r2, [r2, r0]
   480bc:	ldreq	r2, [r2]
   480c0:	ldrne	r1, [r6, #24]
   480c4:	add	r3, r9, r3
   480c8:	add	r2, r2, r2, lsl #1
   480cc:	sub	r5, r3, r5
   480d0:	add	r2, r1, r2, lsl #2
   480d4:	str	r2, [sp, #24]
   480d8:	sub	r1, r5, #1
   480dc:	ldr	r2, [sl, #88]	; 0x58
   480e0:	mov	r0, sl
   480e4:	bl	3bc7c <__assert_fail@plt+0x29688>
   480e8:	ldr	r7, [sl, #100]	; 0x64
   480ec:	ldr	r2, [sp, #52]	; 0x34
   480f0:	ldr	r1, [r7, r2]
   480f4:	ldr	r2, [r7, r5, lsl #2]
   480f8:	cmp	r1, #0
   480fc:	moveq	r1, #0
   48100:	ldrne	r1, [r1, #8]
   48104:	cmp	r2, #0
   48108:	str	r1, [sp, #44]	; 0x2c
   4810c:	mov	r3, r0
   48110:	beq	48374 <__assert_fail@plt+0x35d80>
   48114:	str	r0, [sp, #32]
   48118:	ldr	r1, [r2, #40]	; 0x28
   4811c:	add	r0, sp, #76	; 0x4c
   48120:	ldr	r2, [sp, #24]
   48124:	bl	40f3c <__assert_fail@plt+0x2e948>
   48128:	ldr	r3, [sp, #32]
   4812c:	cmp	r0, #0
   48130:	str	r0, [sp, #72]	; 0x48
   48134:	bne	48414 <__assert_fail@plt+0x35e20>
   48138:	add	r2, sp, #76	; 0x4c
   4813c:	mov	r1, r6
   48140:	add	r0, sp, #72	; 0x48
   48144:	ldr	r7, [sl, #100]	; 0x64
   48148:	bl	44ac8 <__assert_fail@plt+0x324d4>
   4814c:	str	r0, [r7, r5, lsl #2]
   48150:	ldr	r0, [sp, #84]	; 0x54
   48154:	bl	376d0 <__assert_fail@plt+0x250dc>
   48158:	ldr	r3, [sl, #100]	; 0x64
   4815c:	ldr	r2, [r3, r5, lsl #2]
   48160:	cmp	r2, #0
   48164:	beq	48398 <__assert_fail@plt+0x35da4>
   48168:	ldr	r2, [sp, #28]
   4816c:	cmp	r2, #0
   48170:	bne	4818c <__assert_fail@plt+0x35b98>
   48174:	ldr	r2, [sp, #52]	; 0x34
   48178:	ldr	r3, [r3, r2]
   4817c:	ldr	r2, [sp, #44]	; 0x2c
   48180:	ldr	r3, [r3, #8]
   48184:	cmp	r3, r2
   48188:	bgt	483a8 <__assert_fail@plt+0x35db4>
   4818c:	ldr	ip, [sl, #108]	; 0x6c
   48190:	add	r8, r8, #1
   48194:	cmp	r8, ip
   48198:	add	r4, r4, #24
   4819c:	blt	4806c <__assert_fail@plt+0x35a78>
   481a0:	ldr	r3, [sp, #64]	; 0x40
   481a4:	ldr	r6, [r3]
   481a8:	b	47ec4 <__assert_fail@plt+0x358d0>
   481ac:	mov	r4, r2
   481b0:	mov	r2, r3
   481b4:	add	r0, r4, #1
   481b8:	mov	r3, r2
   481bc:	b	47f70 <__assert_fail@plt+0x3597c>
   481c0:	tst	r4, #8
   481c4:	beq	47f40 <__assert_fail@plt+0x3594c>
   481c8:	tst	r0, #1
   481cc:	beq	47f40 <__assert_fail@plt+0x3594c>
   481d0:	b	47ec4 <__assert_fail@plt+0x358d0>
   481d4:	ldr	r3, [sl, #84]	; 0x54
   481d8:	ldr	r1, [sl, #124]	; 0x7c
   481dc:	str	r3, [sp, #60]	; 0x3c
   481e0:	ldr	r3, [r3]
   481e4:	cmp	r1, #0
   481e8:	ldr	r2, [r3, fp, lsl #3]
   481ec:	str	r2, [sp, #56]	; 0x38
   481f0:	ble	48028 <__assert_fail@plt+0x35a34>
   481f4:	ldr	r2, [sl, #4]
   481f8:	str	r9, [sp, #32]
   481fc:	mov	ip, r2
   48200:	mov	r2, #0
   48204:	mov	r0, r2
   48208:	str	r2, [sp, #44]	; 0x2c
   4820c:	str	fp, [sp, #48]	; 0x30
   48210:	str	r8, [sp, #68]	; 0x44
   48214:	ldr	r2, [sl, #132]	; 0x84
   48218:	ldr	r4, [r2, r0, lsl #2]
   4821c:	ldr	r2, [r4, #4]
   48220:	ldr	r3, [r3, r2, lsl #3]
   48224:	ldr	r2, [sp, #56]	; 0x38
   48228:	cmp	r2, r3
   4822c:	beq	48254 <__assert_fail@plt+0x35c60>
   48230:	ldr	r3, [sp, #44]	; 0x2c
   48234:	add	r3, r3, #1
   48238:	cmp	r3, r1
   4823c:	str	r3, [sp, #44]	; 0x2c
   48240:	bge	48634 <__assert_fail@plt+0x36040>
   48244:	ldr	r3, [sp, #60]	; 0x3c
   48248:	ldr	r0, [sp, #44]	; 0x2c
   4824c:	ldr	r3, [r3]
   48250:	b	48214 <__assert_fail@plt+0x35c20>
   48254:	ldr	r2, [r4, #16]
   48258:	ldr	r7, [r4]
   4825c:	cmp	r2, #0
   48260:	ble	48678 <__assert_fail@plt+0x36084>
   48264:	ldr	r3, [sp, #32]
   48268:	mov	r6, #0
   4826c:	str	r7, [sp, #24]
   48270:	mov	fp, ip
   48274:	b	48290 <__assert_fail@plt+0x35c9c>
   48278:	ldr	r2, [r4, #16]
   4827c:	add	r6, r6, #1
   48280:	cmp	r6, r2
   48284:	str	r7, [sp, #24]
   48288:	mov	r3, r8
   4828c:	bge	48434 <__assert_fail@plt+0x35e40>
   48290:	ldr	r1, [r4, #20]
   48294:	ldr	r9, [r1, r6, lsl #2]
   48298:	ldr	r1, [sp, #24]
   4829c:	ldr	r7, [r9, #4]
   482a0:	sub	r5, r7, r1
   482a4:	cmp	r5, #0
   482a8:	addle	r8, r5, r3
   482ac:	ble	482e4 <__assert_fail@plt+0x35cf0>
   482b0:	ldr	r1, [sl, #28]
   482b4:	add	r8, r5, r3
   482b8:	cmp	r8, r1
   482bc:	bgt	48314 <__assert_fail@plt+0x35d20>
   482c0:	ldr	r1, [sp, #24]
   482c4:	add	r0, fp, r3
   482c8:	mov	r2, r5
   482cc:	add	r1, fp, r1
   482d0:	str	r3, [sp, #28]
   482d4:	bl	12084 <memcmp@plt>
   482d8:	ldr	r3, [sp, #28]
   482dc:	cmp	r0, #0
   482e0:	bne	485b4 <__assert_fail@plt+0x35fc0>
   482e4:	ldr	r3, [sp, #32]
   482e8:	mov	r2, r9
   482ec:	str	r3, [sp]
   482f0:	mov	r1, r4
   482f4:	ldr	r3, [sp, #48]	; 0x30
   482f8:	mov	r0, sl
   482fc:	bl	47cac <__assert_fail@plt+0x356b8>
   48300:	ldr	fp, [sl, #4]
   48304:	cmp	r0, #1
   48308:	bls	48278 <__assert_fail@plt+0x35c84>
   4830c:	add	sp, sp, #92	; 0x5c
   48310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48314:	ldr	r0, [sl, #48]	; 0x30
   48318:	cmp	r8, r0
   4831c:	bgt	48684 <__assert_fail@plt+0x36090>
   48320:	ldr	r2, [sl, #36]	; 0x24
   48324:	ldr	fp, [sl, #104]	; 0x68
   48328:	cmp	r8, r2
   4832c:	cmpge	r0, r2
   48330:	bgt	483f4 <__assert_fail@plt+0x35e00>
   48334:	cmp	r1, r0
   48338:	blt	483f4 <__assert_fail@plt+0x35e00>
   4833c:	cmp	r8, fp
   48340:	ble	4836c <__assert_fail@plt+0x35d78>
   48344:	sub	r2, r8, fp
   48348:	ldr	r0, [sl, #100]	; 0x64
   4834c:	add	fp, fp, #1
   48350:	lsl	r2, r2, #2
   48354:	add	r0, r0, fp, lsl #2
   48358:	mov	r1, #0
   4835c:	str	r3, [sp, #28]
   48360:	bl	12378 <memset@plt>
   48364:	ldr	r3, [sp, #28]
   48368:	str	r8, [sl, #104]	; 0x68
   4836c:	ldr	fp, [sl, #4]
   48370:	b	482c0 <__assert_fail@plt+0x35ccc>
   48374:	ldr	r2, [sp, #24]
   48378:	mov	r1, r6
   4837c:	add	r0, sp, #72	; 0x48
   48380:	bl	44ac8 <__assert_fail@plt+0x324d4>
   48384:	ldr	r3, [sl, #100]	; 0x64
   48388:	str	r0, [r7, r5, lsl #2]
   4838c:	ldr	r2, [r3, r5, lsl #2]
   48390:	cmp	r2, #0
   48394:	bne	48168 <__assert_fail@plt+0x35b74>
   48398:	ldr	r0, [sp, #72]	; 0x48
   4839c:	cmp	r0, #0
   483a0:	beq	48168 <__assert_fail@plt+0x35b74>
   483a4:	b	4830c <__assert_fail@plt+0x35d18>
   483a8:	ldr	r3, [sp, #24]
   483ac:	mov	r0, sl
   483b0:	add	r5, r3, #4
   483b4:	add	r7, r3, #8
   483b8:	mov	r2, r7
   483bc:	mov	r1, r5
   483c0:	mov	r3, r9
   483c4:	bl	3c914 <__assert_fail@plt+0x2a320>
   483c8:	cmp	r0, #0
   483cc:	str	r0, [sp, #72]	; 0x48
   483d0:	bne	4830c <__assert_fail@plt+0x35d18>
   483d4:	mov	r2, r7
   483d8:	mov	r1, r5
   483dc:	mov	r0, sl
   483e0:	bl	47e80 <__assert_fail@plt+0x3588c>
   483e4:	cmp	r0, #0
   483e8:	str	r0, [sp, #72]	; 0x48
   483ec:	beq	4818c <__assert_fail@plt+0x35b98>
   483f0:	b	4830c <__assert_fail@plt+0x35d18>
   483f4:	add	r1, r8, #1
   483f8:	mov	r0, sl
   483fc:	str	r3, [sp, #28]
   48400:	bl	402d0 <__assert_fail@plt+0x2dcdc>
   48404:	ldr	r3, [sp, #28]
   48408:	cmp	r0, #0
   4840c:	beq	4833c <__assert_fail@plt+0x35d48>
   48410:	b	4830c <__assert_fail@plt+0x35d18>
   48414:	ldr	r0, [sp, #84]	; 0x54
   48418:	bl	376d0 <__assert_fail@plt+0x250dc>
   4841c:	ldr	r0, [sp, #72]	; 0x48
   48420:	add	sp, sp, #92	; 0x5c
   48424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48428:	mov	r0, #0
   4842c:	add	sp, sp, #92	; 0x5c
   48430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48434:	mov	ip, fp
   48438:	mov	fp, r7
   4843c:	ldr	r3, [sp, #32]
   48440:	add	r7, fp, #1
   48444:	cmp	r3, r7
   48448:	blt	485ac <__assert_fail@plt+0x35fb8>
   4844c:	ldr	r9, [sp, #56]	; 0x38
   48450:	lsl	r6, r7, #2
   48454:	mov	fp, ip
   48458:	ldr	r3, [r4]
   4845c:	sub	r3, r7, r3
   48460:	cmp	r3, #0
   48464:	ble	48490 <__assert_fail@plt+0x35e9c>
   48468:	ldr	r3, [sl, #28]
   4846c:	cmp	r3, r8
   48470:	ble	48608 <__assert_fail@plt+0x36014>
   48474:	add	r5, r8, #1
   48478:	add	r3, fp, r7
   4847c:	ldrb	r2, [fp, r8]
   48480:	ldrb	r3, [r3, #-1]
   48484:	cmp	r2, r3
   48488:	bne	485a8 <__assert_fail@plt+0x35fb4>
   4848c:	mov	r8, r5
   48490:	ldr	r3, [sl, #100]	; 0x64
   48494:	ldr	r3, [r3, r6]
   48498:	cmp	r3, #0
   4849c:	beq	48594 <__assert_fail@plt+0x35fa0>
   484a0:	ldr	ip, [r3, #8]
   484a4:	cmp	ip, #0
   484a8:	ble	48594 <__assert_fail@plt+0x35fa0>
   484ac:	ldr	r2, [r3, #12]
   484b0:	ldr	r3, [sp, #60]	; 0x3c
   484b4:	sub	r2, r2, #4
   484b8:	ldr	r0, [r3]
   484bc:	mov	r3, #0
   484c0:	b	484cc <__assert_fail@plt+0x35ed8>
   484c4:	cmp	ip, r3
   484c8:	beq	48594 <__assert_fail@plt+0x35fa0>
   484cc:	ldr	r5, [r2, #4]!
   484d0:	add	r3, r3, #1
   484d4:	add	r1, r0, r5, lsl #3
   484d8:	ldrb	r1, [r1, #4]
   484dc:	cmp	r1, #9
   484e0:	bne	484c4 <__assert_fail@plt+0x35ed0>
   484e4:	ldr	r1, [r0, r5, lsl #3]
   484e8:	cmp	r9, r1
   484ec:	bne	484c4 <__assert_fail@plt+0x35ed0>
   484f0:	cmn	r5, #1
   484f4:	beq	48594 <__assert_fail@plt+0x35fa0>
   484f8:	ldr	r1, [r4, #8]
   484fc:	cmp	r1, #0
   48500:	beq	485e0 <__assert_fail@plt+0x35fec>
   48504:	mov	r0, #9
   48508:	ldr	r3, [r4]
   4850c:	ldr	r2, [r4, #4]
   48510:	str	r0, [sp, #8]
   48514:	stm	sp, {r5, r7}
   48518:	mov	r0, sl
   4851c:	bl	473f0 <__assert_fail@plt+0x34dfc>
   48520:	cmp	r0, #1
   48524:	beq	48594 <__assert_fail@plt+0x35fa0>
   48528:	cmp	r0, #0
   4852c:	bne	4830c <__assert_fail@plt+0x35d18>
   48530:	ldr	r3, [r4, #16]
   48534:	ldr	r2, [r4, #12]
   48538:	cmp	r3, r2
   4853c:	beq	48650 <__assert_fail@plt+0x3605c>
   48540:	mov	r1, #20
   48544:	mov	r0, #1
   48548:	bl	37128 <__assert_fail@plt+0x24b34>
   4854c:	cmp	r0, #0
   48550:	beq	48648 <__assert_fail@plt+0x36054>
   48554:	ldr	r3, [r4, #16]
   48558:	ldr	r2, [r4, #20]
   4855c:	add	r1, r3, #1
   48560:	str	r0, [r2, r3, lsl #2]
   48564:	stm	r0, {r5, r7}
   48568:	mov	r2, r0
   4856c:	ldr	r0, [sp, #32]
   48570:	str	r1, [r4, #16]
   48574:	ldr	r3, [sp, #48]	; 0x30
   48578:	str	r0, [sp]
   4857c:	mov	r1, r4
   48580:	mov	r0, sl
   48584:	bl	47cac <__assert_fail@plt+0x356b8>
   48588:	ldr	fp, [sl, #4]
   4858c:	cmp	r0, #1
   48590:	bhi	4830c <__assert_fail@plt+0x35d18>
   48594:	ldr	r3, [sp, #32]
   48598:	add	r7, r7, #1
   4859c:	cmp	r3, r7
   485a0:	add	r6, r6, #4
   485a4:	bge	48458 <__assert_fail@plt+0x35e64>
   485a8:	mov	ip, fp
   485ac:	ldr	r1, [sl, #124]	; 0x7c
   485b0:	b	48230 <__assert_fail@plt+0x35c3c>
   485b4:	ldr	r7, [sp, #24]
   485b8:	ldr	r2, [r4, #16]
   485bc:	mov	ip, fp
   485c0:	cmp	r6, r2
   485c4:	blt	485ac <__assert_fail@plt+0x35fb8>
   485c8:	cmp	r6, #0
   485cc:	mov	r8, r3
   485d0:	ldrle	r3, [sp, #32]
   485d4:	ble	48444 <__assert_fail@plt+0x35e50>
   485d8:	mov	fp, r7
   485dc:	b	4843c <__assert_fail@plt+0x35e48>
   485e0:	ldr	r1, [r4]
   485e4:	mov	r0, #12
   485e8:	sub	r1, r7, r1
   485ec:	add	r1, r1, #1
   485f0:	bl	37128 <__assert_fail@plt+0x24b34>
   485f4:	cmp	r0, #0
   485f8:	str	r0, [r4, #8]
   485fc:	beq	48648 <__assert_fail@plt+0x36054>
   48600:	mov	r1, r0
   48604:	b	48504 <__assert_fail@plt+0x35f10>
   48608:	ldr	r3, [sl, #48]	; 0x30
   4860c:	cmp	r3, r8
   48610:	ble	485a8 <__assert_fail@plt+0x35fb4>
   48614:	add	r5, r8, #1
   48618:	mov	r1, r5
   4861c:	mov	r0, sl
   48620:	bl	402d0 <__assert_fail@plt+0x2dcdc>
   48624:	cmp	r0, #0
   48628:	bne	4830c <__assert_fail@plt+0x35d18>
   4862c:	ldr	fp, [sl, #4]
   48630:	b	48478 <__assert_fail@plt+0x35e84>
   48634:	ldr	r9, [sp, #32]
   48638:	ldr	fp, [sp, #48]	; 0x30
   4863c:	ldr	r8, [sp, #68]	; 0x44
   48640:	ldr	ip, [sl, #108]	; 0x6c
   48644:	b	48028 <__assert_fail@plt+0x35a34>
   48648:	mov	r0, #12
   4864c:	b	4830c <__assert_fail@plt+0x35d18>
   48650:	lsl	r3, r3, #1
   48654:	add	fp, r3, #1
   48658:	ldr	r0, [r4, #20]
   4865c:	lsl	r1, fp, #2
   48660:	bl	3aacc <__assert_fail@plt+0x284d8>
   48664:	cmp	r0, #0
   48668:	beq	48648 <__assert_fail@plt+0x36054>
   4866c:	str	r0, [r4, #20]
   48670:	str	fp, [r4, #12]
   48674:	b	48540 <__assert_fail@plt+0x35f4c>
   48678:	ldr	r8, [sp, #32]
   4867c:	mov	r3, r8
   48680:	b	48444 <__assert_fail@plt+0x35e50>
   48684:	ldr	r7, [sp, #24]
   48688:	mov	ip, fp
   4868c:	b	485c0 <__assert_fail@plt+0x35fcc>
   48690:	andeq	pc, r3, r0, lsl #30
   48694:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   48698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4869c:	mov	r4, r1
   486a0:	ldr	r3, [r1, #104]	; 0x68
   486a4:	ldr	r5, [r1, #40]	; 0x28
   486a8:	sub	sp, sp, #20
   486ac:	cmp	r5, r3
   486b0:	mov	r8, r0
   486b4:	ldr	r7, [r1, #84]	; 0x54
   486b8:	ldr	r3, [r1, #100]	; 0x64
   486bc:	ble	486e8 <__assert_fail@plt+0x360f4>
   486c0:	mov	r6, r2
   486c4:	lsl	r9, r5, #2
   486c8:	str	r2, [r3, r5, lsl #2]
   486cc:	str	r5, [r1, #104]	; 0x68
   486d0:	ldr	r3, [r7, #76]	; 0x4c
   486d4:	cmp	r3, #0
   486d8:	bne	487b4 <__assert_fail@plt+0x361c0>
   486dc:	mov	r0, r6
   486e0:	add	sp, sp, #20
   486e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   486e8:	ldr	r1, [r3, r5, lsl #2]
   486ec:	lsl	r9, r5, #2
   486f0:	cmp	r1, #0
   486f4:	add	sl, r3, r9
   486f8:	streq	r2, [r3, r5, lsl #2]
   486fc:	moveq	r6, r2
   48700:	beq	486d0 <__assert_fail@plt+0x360dc>
   48704:	cmp	r2, #0
   48708:	ldr	r3, [r1, #40]	; 0x28
   4870c:	beq	48778 <__assert_fail@plt+0x36184>
   48710:	ldr	sl, [r2, #40]	; 0x28
   48714:	add	r0, sp, #4
   48718:	mov	r2, r3
   4871c:	mov	r1, sl
   48720:	bl	40f3c <__assert_fail@plt+0x2e948>
   48724:	cmp	r0, #0
   48728:	str	r0, [r8]
   4872c:	bne	48814 <__assert_fail@plt+0x36220>
   48730:	ldr	r1, [r4, #40]	; 0x28
   48734:	ldr	r2, [r4, #88]	; 0x58
   48738:	sub	r1, r1, #1
   4873c:	mov	r0, r4
   48740:	bl	3bc7c <__assert_fail@plt+0x29688>
   48744:	add	r2, sp, #4
   48748:	mov	r1, r7
   4874c:	ldr	fp, [r4, #100]	; 0x64
   48750:	mov	r3, r0
   48754:	mov	r0, r8
   48758:	bl	44ac8 <__assert_fail@plt+0x324d4>
   4875c:	cmp	sl, #0
   48760:	mov	r6, r0
   48764:	str	r0, [fp, r5, lsl #2]
   48768:	beq	486d0 <__assert_fail@plt+0x360dc>
   4876c:	ldr	r0, [sp, #12]
   48770:	bl	376d0 <__assert_fail@plt+0x250dc>
   48774:	b	486d0 <__assert_fail@plt+0x360dc>
   48778:	ldm	r3, {r0, r1, r2}
   4877c:	add	r6, sp, #4
   48780:	stm	r6, {r0, r1, r2}
   48784:	sub	r1, r5, #1
   48788:	ldr	r2, [r4, #88]	; 0x58
   4878c:	mov	r0, r4
   48790:	bl	3bc7c <__assert_fail@plt+0x29688>
   48794:	mov	r2, r6
   48798:	mov	r1, r7
   4879c:	mov	r3, r0
   487a0:	mov	r0, r8
   487a4:	bl	44ac8 <__assert_fail@plt+0x324d4>
   487a8:	mov	r6, r0
   487ac:	str	r0, [sl]
   487b0:	b	486d0 <__assert_fail@plt+0x360dc>
   487b4:	cmp	r6, #0
   487b8:	beq	48814 <__assert_fail@plt+0x36220>
   487bc:	add	r7, r6, #8
   487c0:	add	sl, r6, #12
   487c4:	mov	r3, r5
   487c8:	mov	r1, r7
   487cc:	mov	r2, sl
   487d0:	mov	r0, r4
   487d4:	bl	3c914 <__assert_fail@plt+0x2a320>
   487d8:	cmp	r0, #0
   487dc:	str	r0, [r8]
   487e0:	bne	48814 <__assert_fail@plt+0x36220>
   487e4:	ldrb	r3, [r6, #52]	; 0x34
   487e8:	tst	r3, #64	; 0x40
   487ec:	beq	486dc <__assert_fail@plt+0x360e8>
   487f0:	mov	r2, sl
   487f4:	mov	r1, r7
   487f8:	mov	r0, r4
   487fc:	bl	47e80 <__assert_fail@plt+0x3588c>
   48800:	cmp	r0, #0
   48804:	str	r0, [r8]
   48808:	ldreq	r3, [r4, #100]	; 0x64
   4880c:	ldreq	r6, [r3, r9]
   48810:	beq	486dc <__assert_fail@plt+0x360e8>
   48814:	mov	r6, #0
   48818:	b	486dc <__assert_fail@plt+0x360e8>
   4881c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48820:	mov	r7, r0
   48824:	sub	sp, sp, #420	; 0x1a4
   48828:	mov	r5, r3
   4882c:	ldr	r3, [r7]
   48830:	str	r0, [sp, #44]	; 0x2c
   48834:	str	r1, [sp, #60]	; 0x3c
   48838:	str	r2, [sp, #72]	; 0x48
   4883c:	mov	r1, #0
   48840:	add	r0, sp, #140	; 0x8c
   48844:	mov	r2, #136	; 0x88
   48848:	mov	r8, r3
   4884c:	str	r3, [sp, #28]
   48850:	ldr	r4, [sp, #456]	; 0x1c8
   48854:	ldr	r6, [sp, #464]	; 0x1d0
   48858:	bl	12378 <memset@plt>
   4885c:	ldr	r1, [r7, #16]
   48860:	str	r8, [sp, #224]	; 0xe0
   48864:	cmp	r1, #0
   48868:	streq	r1, [sp, #64]	; 0x40
   4886c:	beq	48898 <__assert_fail@plt+0x362a4>
   48870:	ldrb	r2, [r7, #28]
   48874:	subs	r3, r5, r4
   48878:	movne	r3, #1
   4887c:	ands	r3, r3, r2, lsr #3
   48880:	streq	r3, [sp, #64]	; 0x40
   48884:	beq	48898 <__assert_fail@plt+0x362a4>
   48888:	tst	r2, #1
   4888c:	moveq	r3, r1
   48890:	movne	r3, #0
   48894:	str	r3, [sp, #64]	; 0x40
   48898:	ldr	r3, [sp, #44]	; 0x2c
   4889c:	ldr	r3, [r3, #24]
   488a0:	cmp	r3, r6
   488a4:	subcc	r2, r6, #1
   488a8:	subcc	r3, r2, r3
   488ac:	ldr	r2, [sp, #44]	; 0x2c
   488b0:	movcs	r3, #0
   488b4:	str	r3, [sp, #96]	; 0x60
   488b8:	ldr	r2, [r2, #8]
   488bc:	cmp	r2, #0
   488c0:	beq	48fb0 <__assert_fail@plt+0x369bc>
   488c4:	ldr	r2, [sp, #28]
   488c8:	ldr	r2, [r2, #36]	; 0x24
   488cc:	cmp	r2, #0
   488d0:	beq	48fb0 <__assert_fail@plt+0x369bc>
   488d4:	ldr	r1, [sp, #28]
   488d8:	ldr	r1, [r1, #40]	; 0x28
   488dc:	cmp	r1, #0
   488e0:	beq	48fb0 <__assert_fail@plt+0x369bc>
   488e4:	ldr	r0, [sp, #28]
   488e8:	ldr	ip, [r0, #44]	; 0x2c
   488ec:	cmp	ip, #0
   488f0:	beq	48fb0 <__assert_fail@plt+0x369bc>
   488f4:	ldr	r0, [r0, #48]	; 0x30
   488f8:	cmp	r0, #0
   488fc:	beq	48fb0 <__assert_fail@plt+0x369bc>
   48900:	ldr	r2, [r2, #8]
   48904:	cmp	r2, #0
   48908:	bne	4894c <__assert_fail@plt+0x36358>
   4890c:	ldr	r2, [r1, #8]
   48910:	cmp	r2, #0
   48914:	bne	4894c <__assert_fail@plt+0x36358>
   48918:	ldr	r2, [ip, #8]
   4891c:	cmp	r2, #0
   48920:	beq	48934 <__assert_fail@plt+0x36340>
   48924:	ldr	r2, [sp, #44]	; 0x2c
   48928:	ldrsb	r2, [r2, #28]
   4892c:	cmp	r2, #0
   48930:	blt	4894c <__assert_fail@plt+0x36358>
   48934:	cmp	r5, #0
   48938:	cmpne	r4, #0
   4893c:	movne	r4, #1
   48940:	moveq	r4, #0
   48944:	bne	48fb0 <__assert_fail@plt+0x369bc>
   48948:	mov	r5, r4
   4894c:	subs	r3, r6, r3
   48950:	str	r3, [sp, #56]	; 0x38
   48954:	movne	r3, #1
   48958:	strne	r3, [sp, #36]	; 0x24
   4895c:	beq	48c58 <__assert_fail@plt+0x36664>
   48960:	ldr	r2, [sp, #28]
   48964:	ldr	lr, [sp, #44]	; 0x2c
   48968:	ldr	ip, [sp, #72]	; 0x48
   4896c:	ldr	r3, [r2, #8]
   48970:	ldr	r0, [r2, #92]	; 0x5c
   48974:	add	r3, r3, #1
   48978:	cmp	r3, r0
   4897c:	ldr	r1, [lr, #12]
   48980:	ldrb	r2, [r2, #88]	; 0x58
   48984:	movlt	r3, r0
   48988:	add	r6, ip, #1
   4898c:	ldr	lr, [lr, #20]
   48990:	cmp	r3, r6
   48994:	movlt	r6, r3
   48998:	lsr	r1, r1, #22
   4899c:	adds	r8, lr, #0
   489a0:	and	r1, r1, #1
   489a4:	movne	r8, #1
   489a8:	lsr	r3, r2, #2
   489ac:	ldr	r7, [sp, #60]	; 0x3c
   489b0:	lsr	r2, r2, #3
   489b4:	and	r3, r3, #1
   489b8:	and	r2, r2, #1
   489bc:	str	ip, [sp, #188]	; 0xbc
   489c0:	str	ip, [sp, #184]	; 0xb8
   489c4:	str	ip, [sp, #196]	; 0xc4
   489c8:	str	ip, [sp, #192]	; 0xc0
   489cc:	cmp	r0, #1
   489d0:	orr	ip, r1, r8
   489d4:	str	lr, [sp, #80]	; 0x50
   489d8:	str	r7, [sp, #140]	; 0x8c
   489dc:	str	r0, [sp, #220]	; 0xdc
   489e0:	str	lr, [sp, #204]	; 0xcc
   489e4:	strb	r1, [sp, #212]	; 0xd4
   489e8:	strb	ip, [sp, #215]	; 0xd7
   489ec:	strb	r3, [sp, #213]	; 0xd5
   489f0:	strb	r2, [sp, #214]	; 0xd6
   489f4:	ble	48a44 <__assert_fail@plt+0x36450>
   489f8:	cmn	r6, #-1073741823	; 0xc0000001
   489fc:	bhi	49d60 <__assert_fail@plt+0x3776c>
   48a00:	lsl	r7, r6, #2
   48a04:	mov	r1, r7
   48a08:	mov	r0, #0
   48a0c:	bl	3aacc <__assert_fail@plt+0x284d8>
   48a10:	subs	r3, r0, #0
   48a14:	beq	48fe8 <__assert_fail@plt+0x369f4>
   48a18:	ldr	r0, [sp, #152]	; 0x98
   48a1c:	str	r3, [sp, #148]	; 0x94
   48a20:	cmp	r0, #0
   48a24:	ldrbeq	ip, [sp, #215]	; 0xd7
   48a28:	beq	48a44 <__assert_fail@plt+0x36450>
   48a2c:	mov	r1, r7
   48a30:	bl	3aacc <__assert_fail@plt+0x284d8>
   48a34:	cmp	r0, #0
   48a38:	beq	48fe8 <__assert_fail@plt+0x369f4>
   48a3c:	ldrb	ip, [sp, #215]	; 0xd7
   48a40:	str	r0, [sp, #152]	; 0x98
   48a44:	cmp	ip, #0
   48a48:	bne	49b50 <__assert_fail@plt+0x3755c>
   48a4c:	ldr	r2, [sp, #28]
   48a50:	str	r6, [sp, #176]	; 0xb0
   48a54:	add	r2, r2, #96	; 0x60
   48a58:	ldrb	r3, [r2, #-8]
   48a5c:	str	r2, [sp, #208]	; 0xd0
   48a60:	lsr	r3, r3, #4
   48a64:	and	r3, r3, #1
   48a68:	strb	r3, [sp, #218]	; 0xda
   48a6c:	ldr	r3, [sp, #28]
   48a70:	ldr	r2, [sp, #60]	; 0x3c
   48a74:	ldr	r3, [r3, #92]	; 0x5c
   48a78:	str	r2, [sp, #144]	; 0x90
   48a7c:	cmp	r3, #1
   48a80:	ble	499ac <__assert_fail@plt+0x373b8>
   48a84:	mov	r1, #0
   48a88:	ldr	r3, [sp, #44]	; 0x2c
   48a8c:	mvn	r2, #0
   48a90:	str	r1, [sp, #168]	; 0xa8
   48a94:	ldrb	r3, [r3, #28]
   48a98:	str	r1, [sp, #172]	; 0xac
   48a9c:	lsr	r3, r3, #7
   48aa0:	strb	r3, [sp, #217]	; 0xd9
   48aa4:	ldr	r3, [sp, #28]
   48aa8:	ldr	r7, [r3, #76]	; 0x4c
   48aac:	ldr	r3, [sp, #460]	; 0x1cc
   48ab0:	str	r2, [sp, #232]	; 0xe8
   48ab4:	str	r3, [sp, #196]	; 0xc4
   48ab8:	str	r3, [sp, #192]	; 0xc0
   48abc:	lsl	r6, r7, #1
   48ac0:	ldr	r3, [sp, #472]	; 0x1d8
   48ac4:	cmp	r6, #0
   48ac8:	str	r3, [sp, #228]	; 0xe4
   48acc:	ble	48b08 <__assert_fail@plt+0x36514>
   48ad0:	ldr	r3, [pc, #4032]	; 49a98 <__assert_fail@plt+0x374a4>
   48ad4:	cmp	r6, r3
   48ad8:	bgt	48fe8 <__assert_fail@plt+0x369f4>
   48adc:	add	r0, r6, r7, lsl #2
   48ae0:	lsl	r0, r0, #3
   48ae4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   48ae8:	str	r0, [sp, #256]	; 0x100
   48aec:	lsl	r0, r7, #3
   48af0:	bl	3a010 <__assert_fail@plt+0x27a1c>
   48af4:	ldr	r3, [sp, #256]	; 0x100
   48af8:	cmp	r0, #0
   48afc:	cmpne	r3, #0
   48b00:	str	r0, [sp, #272]	; 0x110
   48b04:	beq	48fe8 <__assert_fail@plt+0x369f4>
   48b08:	ldr	r3, [sp, #56]	; 0x38
   48b0c:	str	r6, [sp, #252]	; 0xfc
   48b10:	cmp	r3, #1
   48b14:	mov	r3, #1
   48b18:	str	r6, [sp, #268]	; 0x10c
   48b1c:	str	r3, [sp, #260]	; 0x104
   48b20:	bls	49b98 <__assert_fail@plt+0x375a4>
   48b24:	ldr	r3, [sp, #176]	; 0xb0
   48b28:	cmn	r3, #-1073741822	; 0xc0000002
   48b2c:	bhi	48fe8 <__assert_fail@plt+0x369f4>
   48b30:	add	r3, r3, #1
   48b34:	lsl	r0, r3, #2
   48b38:	bl	3a010 <__assert_fail@plt+0x27a1c>
   48b3c:	cmp	r0, #0
   48b40:	str	r0, [sp, #240]	; 0xf0
   48b44:	beq	495b0 <__assert_fail@plt+0x36fbc>
   48b48:	ldr	r3, [sp, #472]	; 0x1d8
   48b4c:	str	r5, [sp, #112]	; 0x70
   48b50:	tst	r3, #1
   48b54:	moveq	r3, #6
   48b58:	movne	r3, #4
   48b5c:	cmp	r5, r4
   48b60:	movle	r2, #1
   48b64:	mvngt	r2, #0
   48b68:	str	r2, [sp, #92]	; 0x5c
   48b6c:	str	r3, [sp, #200]	; 0xc8
   48b70:	movlt	r2, r5
   48b74:	movge	r2, r4
   48b78:	ldr	r3, [sp, #28]
   48b7c:	str	r2, [sp, #68]	; 0x44
   48b80:	movge	r2, r5
   48b84:	movlt	r2, r4
   48b88:	str	r2, [sp, #52]	; 0x34
   48b8c:	ldr	r2, [sp, #64]	; 0x40
   48b90:	ldr	r3, [r3, #92]	; 0x5c
   48b94:	cmp	r2, #0
   48b98:	str	r3, [sp, #84]	; 0x54
   48b9c:	beq	49ce0 <__assert_fail@plt+0x376ec>
   48ba0:	cmp	r3, #1
   48ba4:	moveq	r3, #4
   48ba8:	beq	48bd0 <__assert_fail@plt+0x365dc>
   48bac:	ldr	r3, [sp, #44]	; 0x2c
   48bb0:	ldr	r2, [sp, #80]	; 0x50
   48bb4:	ldr	r3, [r3, #12]
   48bb8:	lsr	r3, r3, #22
   48bbc:	eor	r3, r3, #1
   48bc0:	cmp	r2, #0
   48bc4:	movne	r3, #0
   48bc8:	andeq	r3, r3, #1
   48bcc:	lsl	r3, r3, #2
   48bd0:	cmp	r5, r4
   48bd4:	orr	r3, r8, r3
   48bd8:	movle	r2, #2
   48bdc:	movgt	r2, #0
   48be0:	orr	r3, r3, r2
   48be4:	ldr	r2, [sp, #68]	; 0x44
   48be8:	ldr	r1, [sp, #52]	; 0x34
   48bec:	cmp	r5, r2
   48bf0:	movge	r2, #0
   48bf4:	movlt	r2, #1
   48bf8:	cmp	r5, r1
   48bfc:	orrgt	r2, r2, #1
   48c00:	cmp	r2, #0
   48c04:	str	r2, [sp, #108]	; 0x6c
   48c08:	bne	48fa0 <__assert_fail@plt+0x369ac>
   48c0c:	sub	r3, r3, #4
   48c10:	cmp	r5, r4
   48c14:	str	r3, [sp, #88]	; 0x58
   48c18:	add	r3, sp, #416	; 0x1a0
   48c1c:	suble	r3, r3, #304	; 0x130
   48c20:	movgt	r3, #0
   48c24:	str	r3, [sp, #100]	; 0x64
   48c28:	movle	r3, #1
   48c2c:	movgt	r3, #0
   48c30:	str	r3, [sp, #104]	; 0x68
   48c34:	ldr	r3, [sp, #88]	; 0x58
   48c38:	cmp	r3, #4
   48c3c:	ldrls	pc, [pc, r3, lsl #2]
   48c40:	b	499dc <__assert_fail@plt+0x373e8>
   48c44:	andeq	r9, r4, r4, lsr #18
   48c48:	andeq	r9, r4, r4, lsr #18
   48c4c:	andeq	r8, r4, r0, ror ip
   48c50:			; <UNDEFINED> instruction: 0x000498b8
   48c54:	andeq	r8, r4, r4, lsl sp
   48c58:	ldr	r3, [sp, #28]
   48c5c:	ldr	r3, [r3, #76]	; 0x4c
   48c60:	adds	r3, r3, #0
   48c64:	movne	r3, #1
   48c68:	str	r3, [sp, #36]	; 0x24
   48c6c:	b	48960 <__assert_fail@plt+0x3636c>
   48c70:	ldr	r3, [sp, #52]	; 0x34
   48c74:	cmp	r3, r5
   48c78:	ble	48cd0 <__assert_fail@plt+0x366dc>
   48c7c:	ldr	r3, [sp, #60]	; 0x3c
   48c80:	ldr	r1, [sp, #64]	; 0x40
   48c84:	ldrb	r2, [r3, r5]
   48c88:	add	r3, r3, r5
   48c8c:	ldrb	r2, [r1, r2]
   48c90:	cmp	r2, #0
   48c94:	bne	48d14 <__assert_fail@plt+0x36720>
   48c98:	mov	ip, r1
   48c9c:	add	r2, r5, #1
   48ca0:	ldr	r0, [sp, #52]	; 0x34
   48ca4:	b	48cbc <__assert_fail@plt+0x366c8>
   48ca8:	ldrb	r1, [r3, #1]!
   48cac:	add	r2, r2, #1
   48cb0:	ldrb	r1, [ip, r1]
   48cb4:	cmp	r1, #0
   48cb8:	bne	49bac <__assert_fail@plt+0x375b8>
   48cbc:	cmp	r0, r2
   48cc0:	mov	r5, r2
   48cc4:	bne	48ca8 <__assert_fail@plt+0x366b4>
   48cc8:	ldr	r3, [sp, #52]	; 0x34
   48ccc:	str	r3, [sp, #112]	; 0x70
   48cd0:	cmp	r3, r5
   48cd4:	bne	48d14 <__assert_fail@plt+0x36720>
   48cd8:	ldr	r2, [sp, #72]	; 0x48
   48cdc:	ldr	r1, [sp, #80]	; 0x50
   48ce0:	cmp	r2, r3
   48ce4:	movle	r3, #0
   48ce8:	ldrgt	r2, [sp, #60]	; 0x3c
   48cec:	ldrbgt	r3, [r2, r3]
   48cf0:	cmp	r1, #0
   48cf4:	mov	r2, r3
   48cf8:	movne	r2, r1
   48cfc:	ldrbne	r2, [r2, r3]
   48d00:	ldr	r3, [sp, #64]	; 0x40
   48d04:	ldrb	r3, [r3, r2]
   48d08:	cmp	r3, #0
   48d0c:	beq	48fa0 <__assert_fail@plt+0x369ac>
   48d10:	ldr	r5, [sp, #52]	; 0x34
   48d14:	ldr	r2, [sp, #472]	; 0x1d8
   48d18:	mov	r1, r5
   48d1c:	add	r0, sp, #140	; 0x8c
   48d20:	bl	3c074 <__assert_fail@plt+0x29a80>
   48d24:	subs	r3, r0, #0
   48d28:	str	r3, [sp, #48]	; 0x30
   48d2c:	bne	49c3c <__assert_fail@plt+0x37648>
   48d30:	ldr	r3, [sp, #84]	; 0x54
   48d34:	cmp	r3, #1
   48d38:	beq	48d58 <__assert_fail@plt+0x36764>
   48d3c:	ldr	r3, [sp, #168]	; 0xa8
   48d40:	cmp	r3, #0
   48d44:	beq	48d58 <__assert_fail@plt+0x36764>
   48d48:	ldr	r3, [sp, #148]	; 0x94
   48d4c:	ldr	r3, [r3]
   48d50:	cmn	r3, #1
   48d54:	beq	48f70 <__assert_fail@plt+0x3697c>
   48d58:	ldr	r4, [sp, #224]	; 0xe0
   48d5c:	mov	r3, #0
   48d60:	str	r3, [sp, #260]	; 0x104
   48d64:	ldr	fp, [r4, #36]	; 0x24
   48d68:	str	r3, [sp, #248]	; 0xf8
   48d6c:	str	r3, [sp, #244]	; 0xf4
   48d70:	str	r3, [sp, #116]	; 0x74
   48d74:	ldrsb	r3, [fp, #52]	; 0x34
   48d78:	ldr	r2, [sp, #180]	; 0xb4
   48d7c:	cmp	r3, #0
   48d80:	str	r2, [sp, #12]
   48d84:	blt	49a6c <__assert_fail@plt+0x37478>
   48d88:	ldr	r3, [sp, #240]	; 0xf0
   48d8c:	cmp	r3, #0
   48d90:	beq	49be0 <__assert_fail@plt+0x375ec>
   48d94:	ldr	r2, [r4, #76]	; 0x4c
   48d98:	ldr	r1, [sp, #12]
   48d9c:	cmp	r2, #0
   48da0:	str	fp, [r3, r1, lsl #2]
   48da4:	bne	49c80 <__assert_fail@plt+0x3768c>
   48da8:	ldrb	r3, [fp, #52]	; 0x34
   48dac:	ldr	r2, [sp, #104]	; 0x68
   48db0:	str	r2, [sp, #16]
   48db4:	tst	r3, #16
   48db8:	bne	49c4c <__assert_fail@plt+0x37658>
   48dbc:	mvn	r3, #0
   48dc0:	str	r3, [sp, #20]
   48dc4:	mov	r3, #0
   48dc8:	str	r3, [sp, #40]	; 0x28
   48dcc:	ldr	r3, [sp, #100]	; 0x64
   48dd0:	ldr	r5, [sp, #180]	; 0xb4
   48dd4:	str	r3, [sp, #32]
   48dd8:	b	48de4 <__assert_fail@plt+0x367f0>
   48ddc:	ldr	r5, [sp, #180]	; 0xb4
   48de0:	mov	fp, r4
   48de4:	ldr	r3, [sp, #196]	; 0xc4
   48de8:	cmp	r3, r5
   48dec:	ble	490a8 <__assert_fail@plt+0x36ab4>
   48df0:	ldr	r3, [sp, #176]	; 0xb0
   48df4:	add	r9, r5, #1
   48df8:	cmp	r9, r3
   48dfc:	bge	494c0 <__assert_fail@plt+0x36ecc>
   48e00:	ldr	r3, [sp, #168]	; 0xa8
   48e04:	cmp	r9, r3
   48e08:	bge	4951c <__assert_fail@plt+0x36f28>
   48e0c:	ldrb	r3, [fp, #52]	; 0x34
   48e10:	tst	r3, #32
   48e14:	bne	49294 <__assert_fail@plt+0x36ca0>
   48e18:	ldr	r3, [sp, #144]	; 0x90
   48e1c:	add	r2, r5, #1
   48e20:	str	r2, [sp, #180]	; 0xb4
   48e24:	ldrb	r4, [r3, r5]
   48e28:	ldr	r3, [fp, #44]	; 0x2c
   48e2c:	cmp	r3, #0
   48e30:	beq	494ec <__assert_fail@plt+0x36ef8>
   48e34:	ldr	r4, [r3, r4, lsl #2]
   48e38:	ldr	r3, [sp, #240]	; 0xf0
   48e3c:	cmp	r3, #0
   48e40:	beq	48e58 <__assert_fail@plt+0x36864>
   48e44:	mov	r2, r4
   48e48:	add	r1, sp, #140	; 0x8c
   48e4c:	add	r0, sp, #116	; 0x74
   48e50:	bl	48698 <__assert_fail@plt+0x360a4>
   48e54:	mov	r4, r0
   48e58:	cmp	r4, #0
   48e5c:	beq	4903c <__assert_fail@plt+0x36a48>
   48e60:	ldr	r2, [sp, #16]
   48e64:	ldrb	r3, [r4, #52]	; 0x34
   48e68:	cmp	fp, r4
   48e6c:	movne	r2, #0
   48e70:	andeq	r2, r2, #1
   48e74:	ldr	r1, [sp, #12]
   48e78:	cmp	r2, #0
   48e7c:	movne	r1, r9
   48e80:	tst	r3, #16
   48e84:	str	r2, [sp, #16]
   48e88:	str	r1, [sp, #12]
   48e8c:	beq	48ddc <__assert_fail@plt+0x367e8>
   48e90:	tst	r3, #128	; 0x80
   48e94:	bne	49240 <__assert_fail@plt+0x36c4c>
   48e98:	ldr	r3, [sp, #180]	; 0xb4
   48e9c:	str	r3, [sp, #20]
   48ea0:	ldr	r3, [sp, #36]	; 0x24
   48ea4:	cmp	r3, #0
   48ea8:	beq	490c8 <__assert_fail@plt+0x36ad4>
   48eac:	mov	r3, #1
   48eb0:	str	r3, [sp, #40]	; 0x28
   48eb4:	mov	r3, #0
   48eb8:	ldr	r5, [sp, #20]
   48ebc:	str	r3, [sp, #32]
   48ec0:	b	48de0 <__assert_fail@plt+0x367ec>
   48ec4:	ldr	r0, [sp, #12]
   48ec8:	bl	376d0 <__assert_fail@plt+0x250dc>
   48ecc:	mov	r0, #0
   48ed0:	bl	376d0 <__assert_fail@plt+0x250dc>
   48ed4:	ldr	r3, [sp, #264]	; 0x108
   48ed8:	cmp	r3, #0
   48edc:	movgt	r4, #0
   48ee0:	ble	48f60 <__assert_fail@plt+0x3696c>
   48ee4:	ldr	r3, [sp, #272]	; 0x110
   48ee8:	ldr	r7, [r3, r4, lsl #2]
   48eec:	ldr	r3, [r7, #16]
   48ef0:	cmp	r3, #0
   48ef4:	movgt	r5, #0
   48ef8:	ble	48f24 <__assert_fail@plt+0x36930>
   48efc:	ldr	r3, [r7, #20]
   48f00:	ldr	r6, [r3, r5, lsl #2]
   48f04:	add	r5, r5, #1
   48f08:	ldr	r0, [r6, #16]
   48f0c:	bl	376d0 <__assert_fail@plt+0x250dc>
   48f10:	mov	r0, r6
   48f14:	bl	376d0 <__assert_fail@plt+0x250dc>
   48f18:	ldr	r3, [r7, #16]
   48f1c:	cmp	r5, r3
   48f20:	blt	48efc <__assert_fail@plt+0x36908>
   48f24:	ldr	r0, [r7, #20]
   48f28:	bl	376d0 <__assert_fail@plt+0x250dc>
   48f2c:	ldr	r3, [r7, #8]
   48f30:	cmp	r3, #0
   48f34:	beq	48f48 <__assert_fail@plt+0x36954>
   48f38:	ldr	r0, [r3, #8]
   48f3c:	bl	376d0 <__assert_fail@plt+0x250dc>
   48f40:	ldr	r0, [r7, #8]
   48f44:	bl	376d0 <__assert_fail@plt+0x250dc>
   48f48:	mov	r0, r7
   48f4c:	bl	376d0 <__assert_fail@plt+0x250dc>
   48f50:	ldr	r3, [sp, #264]	; 0x108
   48f54:	add	r4, r4, #1
   48f58:	cmp	r4, r3
   48f5c:	blt	48ee4 <__assert_fail@plt+0x368f0>
   48f60:	ldr	r5, [sp, #112]	; 0x70
   48f64:	mov	r3, #0
   48f68:	str	r3, [sp, #264]	; 0x108
   48f6c:	str	r3, [sp, #248]	; 0xf8
   48f70:	ldr	r3, [sp, #92]	; 0x5c
   48f74:	ldr	r2, [sp, #68]	; 0x44
   48f78:	add	r5, r5, r3
   48f7c:	ldr	r3, [sp, #52]	; 0x34
   48f80:	str	r5, [sp, #112]	; 0x70
   48f84:	cmp	r3, r5
   48f88:	movge	r3, #0
   48f8c:	movlt	r3, #1
   48f90:	cmp	r2, r5
   48f94:	orrgt	r3, r3, #1
   48f98:	cmp	r3, #0
   48f9c:	beq	48c34 <__assert_fail@plt+0x36640>
   48fa0:	mov	r3, #1
   48fa4:	ldr	r7, [sp, #240]	; 0xf0
   48fa8:	str	r3, [sp, #48]	; 0x30
   48fac:	b	48ff4 <__assert_fail@plt+0x36a00>
   48fb0:	mov	r3, #1
   48fb4:	str	r3, [sp, #48]	; 0x30
   48fb8:	ldr	r0, [sp, #48]	; 0x30
   48fbc:	add	sp, sp, #420	; 0x1a4
   48fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48fc4:	tst	r0, #4
   48fc8:	beq	48d88 <__assert_fail@plt+0x36794>
   48fcc:	mov	r3, r0
   48fd0:	ldr	r2, [fp, #40]	; 0x28
   48fd4:	mov	r1, r4
   48fd8:	add	r0, sp, #116	; 0x74
   48fdc:	bl	44ac8 <__assert_fail@plt+0x324d4>
   48fe0:	subs	fp, r0, #0
   48fe4:	bne	48d88 <__assert_fail@plt+0x36794>
   48fe8:	ldr	r7, [sp, #240]	; 0xf0
   48fec:	mov	r3, #12
   48ff0:	str	r3, [sp, #48]	; 0x30
   48ff4:	mov	r0, r7
   48ff8:	bl	376d0 <__assert_fail@plt+0x250dc>
   48ffc:	ldr	r3, [sp, #28]
   49000:	ldr	r3, [r3, #76]	; 0x4c
   49004:	cmp	r3, #0
   49008:	bne	49aa4 <__assert_fail@plt+0x374b0>
   4900c:	ldr	r0, [sp, #148]	; 0x94
   49010:	bl	376d0 <__assert_fail@plt+0x250dc>
   49014:	ldr	r0, [sp, #152]	; 0x98
   49018:	bl	376d0 <__assert_fail@plt+0x250dc>
   4901c:	ldrb	r3, [sp, #215]	; 0xd7
   49020:	cmp	r3, #0
   49024:	beq	48fb8 <__assert_fail@plt+0x369c4>
   49028:	ldr	r0, [sp, #144]	; 0x90
   4902c:	bl	376d0 <__assert_fail@plt+0x250dc>
   49030:	ldr	r0, [sp, #48]	; 0x30
   49034:	add	sp, sp, #420	; 0x1a4
   49038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4903c:	ldr	r3, [sp, #116]	; 0x74
   49040:	cmp	r3, #0
   49044:	bne	49c78 <__assert_fail@plt+0x37684>
   49048:	ldr	r2, [sp, #240]	; 0xf0
   4904c:	cmp	r2, #0
   49050:	beq	490a8 <__assert_fail@plt+0x36ab4>
   49054:	ldr	r3, [sp, #36]	; 0x24
   49058:	eor	r5, r3, #1
   4905c:	ldr	r3, [sp, #40]	; 0x28
   49060:	ands	r5, r5, r3
   49064:	bne	490a8 <__assert_fail@plt+0x36ab4>
   49068:	ldr	r3, [sp, #180]	; 0xb4
   4906c:	ldr	lr, [sp, #244]	; 0xf4
   49070:	mov	r0, r3
   49074:	add	r2, r2, r3, lsl #2
   49078:	mov	ip, r5
   4907c:	b	49094 <__assert_fail@plt+0x36aa0>
   49080:	ldr	r1, [r2, #4]!
   49084:	mov	r0, r3
   49088:	cmp	r1, #0
   4908c:	mov	ip, #1
   49090:	bne	49264 <__assert_fail@plt+0x36c70>
   49094:	add	r3, r3, #1
   49098:	cmp	lr, r3
   4909c:	bge	49080 <__assert_fail@plt+0x36a8c>
   490a0:	cmp	ip, #0
   490a4:	strne	r0, [sp, #180]	; 0xb4
   490a8:	ldr	r3, [sp, #32]
   490ac:	cmp	r3, #0
   490b0:	beq	490c8 <__assert_fail@plt+0x36ad4>
   490b4:	mov	r2, r3
   490b8:	ldr	r1, [sp, #12]
   490bc:	ldr	r3, [r3]
   490c0:	add	r3, r3, r1
   490c4:	str	r3, [r2]
   490c8:	ldr	r3, [sp, #20]
   490cc:	cmn	r3, #1
   490d0:	beq	48ed4 <__assert_fail@plt+0x368e0>
   490d4:	cmn	r3, #2
   490d8:	beq	48fe8 <__assert_fail@plt+0x369f4>
   490dc:	mov	r2, r3
   490e0:	ldr	r3, [sp, #44]	; 0x2c
   490e4:	str	r2, [sp, #232]	; 0xe8
   490e8:	ldr	r2, [sp, #56]	; 0x38
   490ec:	ldrb	r3, [r3, #28]
   490f0:	lsr	r3, r3, #4
   490f4:	eor	r3, r3, #1
   490f8:	cmp	r2, #1
   490fc:	movls	r3, #0
   49100:	andhi	r3, r3, #1
   49104:	cmp	r3, #0
   49108:	beq	49564 <__assert_fail@plt+0x36f70>
   4910c:	ldr	r3, [sp, #20]
   49110:	ldr	r7, [sp, #240]	; 0xf0
   49114:	mov	r2, r3
   49118:	add	r0, sp, #140	; 0x8c
   4911c:	ldr	r1, [r7, r3, lsl #2]
   49120:	bl	3bd68 <__assert_fail@plt+0x29774>
   49124:	ldr	r3, [sp, #28]
   49128:	ldrb	r3, [r3, #88]	; 0x58
   4912c:	tst	r3, #1
   49130:	str	r0, [sp, #236]	; 0xec
   49134:	beq	49998 <__assert_fail@plt+0x373a4>
   49138:	ldr	r3, [sp, #20]
   4913c:	ldr	r8, [sp, #224]	; 0xe0
   49140:	cmn	r3, #-1073741822	; 0xc0000002
   49144:	ldr	r9, [sp, #236]	; 0xec
   49148:	bhi	495b4 <__assert_fail@plt+0x36fc0>
   4914c:	add	r4, r3, #1
   49150:	lsl	r5, r4, #2
   49154:	mov	r0, r5
   49158:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4915c:	subs	r3, r0, #0
   49160:	str	r3, [sp, #12]
   49164:	beq	49cc0 <__assert_fail@plt+0x376cc>
   49168:	ldr	r3, [r8, #76]	; 0x4c
   4916c:	cmp	r3, #0
   49170:	beq	495c0 <__assert_fail@plt+0x36fcc>
   49174:	mov	r0, r5
   49178:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4917c:	subs	sl, r0, #0
   49180:	beq	49ce8 <__assert_fail@plt+0x376f4>
   49184:	ldr	r6, [sp, #20]
   49188:	ldr	fp, [sp, #12]
   4918c:	add	r5, sp, #292	; 0x124
   49190:	lsl	r4, r4, #2
   49194:	mov	r2, r4
   49198:	mov	r1, #0
   4919c:	mov	r0, sl
   491a0:	bl	12378 <memset@plt>
   491a4:	mov	r3, #0
   491a8:	str	fp, [sp, #276]	; 0x114
   491ac:	str	sl, [sp, #280]	; 0x118
   491b0:	str	r9, [sp, #284]	; 0x11c
   491b4:	str	r6, [sp, #288]	; 0x120
   491b8:	add	r1, sp, #276	; 0x114
   491bc:	str	r3, [r5]
   491c0:	str	r3, [r5, #4]
   491c4:	str	r3, [r5, #8]
   491c8:	add	r0, sp, #140	; 0x8c
   491cc:	bl	41bac <__assert_fail@plt+0x2f5b8>
   491d0:	mov	r7, r0
   491d4:	ldr	r0, [sp, #300]	; 0x12c
   491d8:	bl	376d0 <__assert_fail@plt+0x250dc>
   491dc:	cmp	r7, #0
   491e0:	bne	499b8 <__assert_fail@plt+0x373c4>
   491e4:	ldr	r3, [fp]
   491e8:	cmp	r3, #0
   491ec:	bne	49dcc <__assert_fail@plt+0x377d8>
   491f0:	ldr	r3, [sl]
   491f4:	cmp	r3, #0
   491f8:	bne	49dcc <__assert_fail@plt+0x377d8>
   491fc:	ldr	r3, [sp, #240]	; 0xf0
   49200:	sub	r4, r4, #4
   49204:	add	r3, r3, r4
   49208:	subs	r6, r6, #1
   4920c:	bcc	49a90 <__assert_fail@plt+0x3749c>
   49210:	ldr	r1, [r3, #-4]!
   49214:	cmp	r1, #0
   49218:	beq	49208 <__assert_fail@plt+0x36c14>
   4921c:	ldrb	r2, [r1, #52]	; 0x34
   49220:	tst	r2, #16
   49224:	beq	49208 <__assert_fail@plt+0x36c14>
   49228:	mov	r2, r6
   4922c:	add	r0, sp, #140	; 0x8c
   49230:	bl	3bd68 <__assert_fail@plt+0x29774>
   49234:	add	r4, r6, #1
   49238:	mov	r9, r0
   4923c:	b	49190 <__assert_fail@plt+0x36b9c>
   49240:	ldr	r5, [sp, #180]	; 0xb4
   49244:	mov	r1, r4
   49248:	mov	r2, r5
   4924c:	add	r0, sp, #140	; 0x8c
   49250:	bl	3bd68 <__assert_fail@plt+0x29774>
   49254:	cmp	r0, #0
   49258:	beq	48de0 <__assert_fail@plt+0x367ec>
   4925c:	str	r5, [sp, #20]
   49260:	b	48ea0 <__assert_fail@plt+0x368ac>
   49264:	mov	r2, #0
   49268:	add	r1, sp, #140	; 0x8c
   4926c:	add	r0, sp, #116	; 0x74
   49270:	str	r3, [sp, #180]	; 0xb4
   49274:	bl	48698 <__assert_fail@plt+0x360a4>
   49278:	ldr	r3, [sp, #116]	; 0x74
   4927c:	cmp	r3, #0
   49280:	bne	49d50 <__assert_fail@plt+0x3775c>
   49284:	cmp	r0, #0
   49288:	bne	49db8 <__assert_fail@plt+0x377c4>
   4928c:	ldr	r2, [sp, #240]	; 0xf0
   49290:	b	49068 <__assert_fail@plt+0x36a74>
   49294:	ldr	r3, [fp, #8]
   49298:	ldr	sl, [sp, #224]	; 0xe0
   4929c:	cmp	r3, #0
   492a0:	ble	4938c <__assert_fail@plt+0x36d98>
   492a4:	add	r2, sl, #128	; 0x80
   492a8:	str	r9, [sp, #76]	; 0x4c
   492ac:	mov	r4, #0
   492b0:	str	r2, [sp, #24]
   492b4:	mov	r9, r3
   492b8:	b	49320 <__assert_fail@plt+0x36d2c>
   492bc:	tst	r0, #1
   492c0:	beq	49314 <__assert_fail@plt+0x36d20>
   492c4:	tst	r6, #8
   492c8:	bne	49314 <__assert_fail@plt+0x36d20>
   492cc:	tst	r6, #32
   492d0:	beq	492dc <__assert_fail@plt+0x36ce8>
   492d4:	tst	r0, #2
   492d8:	beq	49314 <__assert_fail@plt+0x36d20>
   492dc:	tst	r6, #128	; 0x80
   492e0:	beq	492ec <__assert_fail@plt+0x36cf8>
   492e4:	tst	r0, #8
   492e8:	beq	49314 <__assert_fail@plt+0x36d20>
   492ec:	str	r5, [sp]
   492f0:	mov	r0, r8
   492f4:	add	r3, sp, #140	; 0x8c
   492f8:	mov	r2, r7
   492fc:	ldr	r1, [sp, #24]
   49300:	bl	3d758 <__assert_fail@plt+0x2b164>
   49304:	cmp	r0, #0
   49308:	bne	49398 <__assert_fail@plt+0x36da4>
   4930c:	ldr	r5, [sp, #180]	; 0xb4
   49310:	ldr	r9, [fp, #8]
   49314:	add	r4, r4, #1
   49318:	cmp	r4, r9
   4931c:	bge	49388 <__assert_fail@plt+0x36d94>
   49320:	ldr	r2, [fp, #12]
   49324:	ldr	r8, [sl]
   49328:	ldr	r7, [r2, r4, lsl #2]
   4932c:	add	r2, r8, r7, lsl #3
   49330:	ldrb	r1, [r2, #6]
   49334:	tst	r1, #16
   49338:	beq	49314 <__assert_fail@plt+0x36d20>
   4933c:	ldr	r6, [r2, #4]
   49340:	ldr	r3, [pc, #1876]	; 49a9c <__assert_fail@plt+0x374a8>
   49344:	tst	r6, r3
   49348:	beq	492ec <__assert_fail@plt+0x36cf8>
   4934c:	ldr	r2, [sp, #228]	; 0xe4
   49350:	mov	r1, r5
   49354:	add	r0, sp, #140	; 0x8c
   49358:	bl	3bc7c <__assert_fail@plt+0x29688>
   4935c:	ldr	r3, [pc, #1852]	; 49aa0 <__assert_fail@plt+0x374ac>
   49360:	and	r6, r3, r6, lsr #8
   49364:	tst	r6, #4
   49368:	bne	492bc <__assert_fail@plt+0x36cc8>
   4936c:	tst	r6, #8
   49370:	beq	492cc <__assert_fail@plt+0x36cd8>
   49374:	tst	r0, #1
   49378:	beq	492cc <__assert_fail@plt+0x36cd8>
   4937c:	add	r4, r4, #1
   49380:	cmp	r4, r9
   49384:	blt	49320 <__assert_fail@plt+0x36d2c>
   49388:	ldr	r9, [sp, #76]	; 0x4c
   4938c:	mov	r3, #0
   49390:	str	r3, [sp, #116]	; 0x74
   49394:	b	48e18 <__assert_fail@plt+0x36824>
   49398:	ldr	r3, [sp, #260]	; 0x104
   4939c:	ldr	r6, [sp, #180]	; 0xb4
   493a0:	ldr	r2, [sp, #176]	; 0xb0
   493a4:	cmp	r3, r0
   493a8:	add	r6, r0, r6
   493ac:	movge	r0, r3
   493b0:	cmp	r6, r2
   493b4:	str	r0, [sp, #260]	; 0x104
   493b8:	ldr	r8, [sp, #244]	; 0xf4
   493bc:	blt	494a4 <__assert_fail@plt+0x36eb0>
   493c0:	ldr	r3, [sp, #188]	; 0xbc
   493c4:	cmp	r2, r3
   493c8:	bge	494a4 <__assert_fail@plt+0x36eb0>
   493cc:	add	r1, r6, #1
   493d0:	add	r0, sp, #140	; 0x8c
   493d4:	bl	402d0 <__assert_fail@plt+0x2dcdc>
   493d8:	cmp	r0, #0
   493dc:	bne	49594 <__assert_fail@plt+0x36fa0>
   493e0:	cmp	r6, r8
   493e4:	ble	49408 <__assert_fail@plt+0x36e14>
   493e8:	sub	r2, r6, r8
   493ec:	ldr	r0, [sp, #240]	; 0xf0
   493f0:	add	r8, r8, #1
   493f4:	lsl	r2, r2, #2
   493f8:	add	r0, r0, r8, lsl #2
   493fc:	mov	r1, #0
   49400:	bl	12378 <memset@plt>
   49404:	str	r6, [sp, #244]	; 0xf4
   49408:	ldr	r3, [sl, #12]
   4940c:	ldr	r8, [sp, #240]	; 0xf0
   49410:	mov	r2, #0
   49414:	ldr	r3, [r3, r7, lsl #2]
   49418:	ldr	r1, [r8, r6, lsl #2]
   4941c:	str	r2, [sp, #128]	; 0x80
   49420:	add	r3, r3, r3, lsl #1
   49424:	ldr	r2, [sl, #24]
   49428:	cmp	r1, #0
   4942c:	add	r2, r2, r3, lsl #2
   49430:	beq	4952c <__assert_fail@plt+0x36f38>
   49434:	ldr	r1, [r1, #40]	; 0x28
   49438:	add	r0, sp, #276	; 0x114
   4943c:	bl	40f3c <__assert_fail@plt+0x2e948>
   49440:	cmp	r0, #0
   49444:	str	r0, [sp, #128]	; 0x80
   49448:	bne	49594 <__assert_fail@plt+0x36fa0>
   4944c:	ldr	r2, [sp, #228]	; 0xe4
   49450:	sub	r1, r6, #1
   49454:	add	r0, sp, #140	; 0x8c
   49458:	bl	3bc7c <__assert_fail@plt+0x29688>
   4945c:	add	r2, sp, #276	; 0x114
   49460:	mov	r1, sl
   49464:	ldr	r7, [sp, #240]	; 0xf0
   49468:	mov	r3, r0
   4946c:	add	r0, sp, #128	; 0x80
   49470:	bl	44ac8 <__assert_fail@plt+0x324d4>
   49474:	str	r0, [r7, r6, lsl #2]
   49478:	ldr	r0, [sp, #284]	; 0x11c
   4947c:	bl	376d0 <__assert_fail@plt+0x250dc>
   49480:	ldr	r7, [sp, #240]	; 0xf0
   49484:	ldr	r3, [r7, r6, lsl #2]
   49488:	cmp	r3, #0
   4948c:	bne	4930c <__assert_fail@plt+0x36d18>
   49490:	ldr	r0, [sp, #128]	; 0x80
   49494:	cmp	r0, #0
   49498:	beq	4930c <__assert_fail@plt+0x36d18>
   4949c:	ldr	r9, [sp, #76]	; 0x4c
   494a0:	b	4959c <__assert_fail@plt+0x36fa8>
   494a4:	ldr	r3, [sp, #168]	; 0xa8
   494a8:	cmp	r6, r3
   494ac:	blt	493e0 <__assert_fail@plt+0x36dec>
   494b0:	ldr	r2, [sp, #188]	; 0xbc
   494b4:	cmp	r3, r2
   494b8:	bge	493e0 <__assert_fail@plt+0x36dec>
   494bc:	b	493cc <__assert_fail@plt+0x36dd8>
   494c0:	ldr	r2, [sp, #188]	; 0xbc
   494c4:	cmp	r3, r2
   494c8:	bge	48e00 <__assert_fail@plt+0x3680c>
   494cc:	add	r1, r5, #2
   494d0:	add	r0, sp, #140	; 0x8c
   494d4:	bl	402d0 <__assert_fail@plt+0x2dcdc>
   494d8:	cmp	r0, #0
   494dc:	str	r0, [sp, #116]	; 0x74
   494e0:	bne	48fe8 <__assert_fail@plt+0x369f4>
   494e4:	ldr	r5, [sp, #180]	; 0xb4
   494e8:	b	48e0c <__assert_fail@plt+0x36818>
   494ec:	ldr	r5, [fp, #48]	; 0x30
   494f0:	cmp	r5, #0
   494f4:	beq	49bb4 <__assert_fail@plt+0x375c0>
   494f8:	ldr	r1, [sp, #180]	; 0xb4
   494fc:	ldr	r2, [sp, #228]	; 0xe4
   49500:	sub	r1, r1, #1
   49504:	add	r0, sp, #140	; 0x8c
   49508:	bl	3bc7c <__assert_fail@plt+0x29688>
   4950c:	tst	r0, #1
   49510:	addne	r4, r4, #256	; 0x100
   49514:	ldr	r4, [r5, r4, lsl #2]
   49518:	b	48e38 <__assert_fail@plt+0x36844>
   4951c:	ldr	r2, [sp, #188]	; 0xbc
   49520:	cmp	r3, r2
   49524:	bge	48e0c <__assert_fail@plt+0x36818>
   49528:	b	494cc <__assert_fail@plt+0x36ed8>
   4952c:	ldm	r2, {r0, r1, r2}
   49530:	add	r3, sp, #276	; 0x114
   49534:	stm	r3, {r0, r1, r2}
   49538:	sub	r1, r6, #1
   4953c:	ldr	r2, [sp, #228]	; 0xe4
   49540:	add	r0, sp, #140	; 0x8c
   49544:	bl	3bc7c <__assert_fail@plt+0x29688>
   49548:	add	r2, sp, #276	; 0x114
   4954c:	mov	r1, sl
   49550:	mov	r3, r0
   49554:	add	r0, sp, #128	; 0x80
   49558:	bl	44ac8 <__assert_fail@plt+0x324d4>
   4955c:	str	r0, [r8, r6, lsl #2]
   49560:	b	49480 <__assert_fail@plt+0x36e8c>
   49564:	ldr	r3, [sp, #28]
   49568:	ldr	r7, [sp, #240]	; 0xf0
   4956c:	ldr	r4, [r3, #76]	; 0x4c
   49570:	cmp	r4, #0
   49574:	beq	49640 <__assert_fail@plt+0x3704c>
   49578:	ldr	r3, [sp, #20]
   4957c:	add	r0, sp, #140	; 0x8c
   49580:	mov	r2, r3
   49584:	ldr	r1, [r7, r3, lsl #2]
   49588:	bl	3bd68 <__assert_fail@plt+0x29774>
   4958c:	str	r0, [sp, #236]	; 0xec
   49590:	b	499a0 <__assert_fail@plt+0x373ac>
   49594:	ldr	r9, [sp, #76]	; 0x4c
   49598:	ldr	r7, [sp, #240]	; 0xf0
   4959c:	cmp	r7, #0
   495a0:	str	r0, [sp, #116]	; 0x74
   495a4:	beq	495b4 <__assert_fail@plt+0x36fc0>
   495a8:	mov	r4, #0
   495ac:	b	48e44 <__assert_fail@plt+0x36850>
   495b0:	mov	r7, r0
   495b4:	mov	r3, #12
   495b8:	str	r3, [sp, #48]	; 0x30
   495bc:	b	48ff4 <__assert_fail@plt+0x36a00>
   495c0:	ldr	r2, [sp, #20]
   495c4:	ldr	r4, [sp, #12]
   495c8:	add	r1, sp, #276	; 0x114
   495cc:	add	r0, sp, #140	; 0x8c
   495d0:	str	r3, [sp, #280]	; 0x118
   495d4:	str	r2, [sp, #288]	; 0x120
   495d8:	str	r3, [sp, #292]	; 0x124
   495dc:	str	r3, [sp, #296]	; 0x128
   495e0:	str	r3, [sp, #300]	; 0x12c
   495e4:	str	r4, [sp, #276]	; 0x114
   495e8:	str	r9, [sp, #284]	; 0x11c
   495ec:	bl	41bac <__assert_fail@plt+0x2f5b8>
   495f0:	mov	r7, r0
   495f4:	ldr	r0, [sp, #300]	; 0x12c
   495f8:	bl	376d0 <__assert_fail@plt+0x250dc>
   495fc:	cmp	r7, #0
   49600:	bne	499b4 <__assert_fail@plt+0x373c0>
   49604:	ldr	r3, [r4]
   49608:	cmp	r3, #0
   4960c:	beq	48ec4 <__assert_fail@plt+0x368d0>
   49610:	ldr	fp, [sp, #12]
   49614:	ldr	r0, [sp, #240]	; 0xf0
   49618:	bl	376d0 <__assert_fail@plt+0x250dc>
   4961c:	ldr	r3, [sp, #20]
   49620:	mov	r0, #0
   49624:	str	r3, [sp, #232]	; 0xe8
   49628:	str	fp, [sp, #240]	; 0xf0
   4962c:	str	r9, [sp, #236]	; 0xec
   49630:	bl	376d0 <__assert_fail@plt+0x250dc>
   49634:	mov	r0, #0
   49638:	bl	376d0 <__assert_fail@plt+0x250dc>
   4963c:	ldr	r7, [sp, #240]	; 0xf0
   49640:	ldr	r3, [sp, #56]	; 0x38
   49644:	cmp	r3, #0
   49648:	beq	48ff4 <__assert_fail@plt+0x36a00>
   4964c:	cmp	r3, #1
   49650:	bls	49674 <__assert_fail@plt+0x37080>
   49654:	sub	r3, r3, #-536870911	; 0xe0000001
   49658:	ldr	r2, [sp, #468]	; 0x1d4
   4965c:	mvn	r1, #0
   49660:	add	r3, r2, r3, lsl #3
   49664:	str	r1, [r2, #12]
   49668:	str	r1, [r2, #8]!
   4966c:	cmp	r3, r2
   49670:	bne	49664 <__assert_fail@plt+0x37070>
   49674:	ldr	r3, [sp, #44]	; 0x2c
   49678:	ldr	r1, [sp, #468]	; 0x1d4
   4967c:	ldr	r2, [sp, #232]	; 0xe8
   49680:	ldrb	r3, [r3, #28]
   49684:	str	r2, [r1, #4]
   49688:	ldr	r2, [sp, #56]	; 0x38
   4968c:	mov	r4, #0
   49690:	lsr	r3, r3, #4
   49694:	eor	r3, r3, #1
   49698:	cmp	r2, #1
   4969c:	moveq	r3, #0
   496a0:	andne	r3, r3, #1
   496a4:	cmp	r3, #0
   496a8:	mov	r3, r1
   496ac:	moveq	r3, r2
   496b0:	str	r4, [r1]
   496b4:	lsleq	r9, r3, #3
   496b8:	beq	4a200 <__assert_fail@plt+0x37c0c>
   496bc:	ldr	r2, [sp, #28]
   496c0:	ldrb	r3, [r2, #88]	; 0x58
   496c4:	tst	r3, #1
   496c8:	beq	4a8e8 <__assert_fail@plt+0x382f4>
   496cc:	ldr	r3, [r2, #76]	; 0x4c
   496d0:	cmp	r3, #0
   496d4:	ble	4a8e8 <__assert_fail@plt+0x382f4>
   496d8:	ldr	r1, [sp, #44]	; 0x2c
   496dc:	mov	r2, #2
   496e0:	mov	r3, #16
   496e4:	ldr	r1, [r1]
   496e8:	add	r8, sp, #288	; 0x120
   496ec:	mov	r0, #48	; 0x30
   496f0:	str	r1, [sp, #20]
   496f4:	str	r4, [sp, #128]	; 0x80
   496f8:	str	r4, [sp, #276]	; 0x114
   496fc:	str	r2, [sp, #132]	; 0x84
   49700:	str	r3, [sp, #280]	; 0x118
   49704:	str	r8, [sp, #284]	; 0x11c
   49708:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4970c:	cmp	r0, #0
   49710:	str	r0, [sp, #136]	; 0x88
   49714:	beq	4a8dc <__assert_fail@plt+0x382e8>
   49718:	ldr	r3, [sp, #276]	; 0x114
   4971c:	ldr	r1, [sp, #56]	; 0x38
   49720:	add	r2, sp, #116	; 0x74
   49724:	cmp	r1, r3
   49728:	ldr	r3, [sp, #20]
   4972c:	str	r2, [sp, #16]
   49730:	addls	sl, sp, #128	; 0x80
   49734:	ldr	fp, [r3, #72]	; 0x48
   49738:	movls	r3, r1
   4973c:	str	r4, [sp, #116]	; 0x74
   49740:	str	r4, [sp, #120]	; 0x78
   49744:	str	r4, [sp, #124]	; 0x7c
   49748:	strls	r3, [sp, #276]	; 0x114
   4974c:	bhi	4aad4 <__assert_fail@plt+0x384e0>
   49750:	ldr	r5, [sp, #56]	; 0x38
   49754:	ldr	r3, [sp, #284]	; 0x11c
   49758:	ldr	r1, [sp, #468]	; 0x1d4
   4975c:	lsl	r9, r5, #3
   49760:	mov	r0, r3
   49764:	mov	r2, r9
   49768:	mov	r4, r3
   4976c:	bl	12024 <memcpy@plt>
   49770:	lsl	r3, r5, #4
   49774:	str	r3, [sp, #32]
   49778:	ldr	r3, [sp, #468]	; 0x1d4
   4977c:	str	r8, [sp, #12]
   49780:	mov	r5, r3
   49784:	ldr	r7, [r3]
   49788:	mov	r8, r4
   4978c:	ldr	r2, [r5, #4]
   49790:	cmp	r2, r7
   49794:	blt	4aa64 <__assert_fail@plt+0x38470>
   49798:	ldr	r3, [sp, #20]
   4979c:	lsl	r6, fp, #3
   497a0:	str	fp, [sp, #24]
   497a4:	ldr	r0, [r3]
   497a8:	add	r1, r0, r6
   497ac:	ldrb	r3, [r1, #4]
   497b0:	cmp	r3, #8
   497b4:	beq	4aadc <__assert_fail@plt+0x384e8>
   497b8:	cmp	r3, #9
   497bc:	beq	4a828 <__assert_fail@plt+0x38234>
   497c0:	cmp	r7, r2
   497c4:	beq	4a174 <__assert_fail@plt+0x37b80>
   497c8:	cmp	sl, #0
   497cc:	beq	49834 <__assert_fail@plt+0x37240>
   497d0:	ldr	r3, [sp, #120]	; 0x78
   497d4:	cmp	r3, #0
   497d8:	ble	49834 <__assert_fail@plt+0x37240>
   497dc:	ldr	r0, [sp, #124]	; 0x7c
   497e0:	sub	ip, r3, #1
   497e4:	mov	r1, #0
   497e8:	cmp	r1, ip
   497ec:	bcs	49828 <__assert_fail@plt+0x37234>
   497f0:	add	r3, r1, ip
   497f4:	lsr	r3, r3, #1
   497f8:	ldr	r2, [r0, r3, lsl #2]
   497fc:	cmp	fp, r2
   49800:	ble	49818 <__assert_fail@plt+0x37224>
   49804:	b	49fa0 <__assert_fail@plt+0x379ac>
   49808:	ldr	ip, [r0, r2, lsl #2]
   4980c:	cmp	fp, ip
   49810:	bgt	49fa8 <__assert_fail@plt+0x379b4>
   49814:	mov	r3, r2
   49818:	add	r2, r1, r3
   4981c:	cmp	r1, r3
   49820:	lsr	r2, r2, #1
   49824:	bcc	49808 <__assert_fail@plt+0x37214>
   49828:	ldr	r3, [r0, r1, lsl #2]
   4982c:	cmp	fp, r3
   49830:	beq	4a358 <__assert_fail@plt+0x37d64>
   49834:	ldr	r4, [sp, #224]	; 0xe0
   49838:	ldr	r0, [r4]
   4983c:	add	r3, r0, r6
   49840:	ldrb	r2, [r3, #4]
   49844:	tst	r2, #8
   49848:	beq	4a408 <__assert_fail@plt+0x37e14>
   4984c:	ldr	r1, [sp, #240]	; 0xf0
   49850:	add	r3, fp, fp, lsl #1
   49854:	ldr	r4, [r4, #20]
   49858:	ldr	r2, [sp, #120]	; 0x78
   4985c:	add	r4, r4, r3, lsl #2
   49860:	ldr	r3, [r1, r7, lsl #2]
   49864:	cmp	r2, #0
   49868:	str	r3, [sp, #24]
   4986c:	ble	4a008 <__assert_fail@plt+0x37a14>
   49870:	ldr	r0, [sp, #124]	; 0x7c
   49874:	sub	r2, r2, #1
   49878:	mov	r1, #0
   4987c:	cmp	r1, r2
   49880:	bcs	49ffc <__assert_fail@plt+0x37a08>
   49884:	add	r3, r1, r2
   49888:	lsr	r3, r3, #1
   4988c:	b	498a4 <__assert_fail@plt+0x372b0>
   49890:	add	ip, r1, r3
   49894:	cmp	r1, r3
   49898:	mov	r2, r3
   4989c:	lsr	r3, ip, #1
   498a0:	bcs	49ffc <__assert_fail@plt+0x37a08>
   498a4:	ldr	ip, [r0, r3, lsl #2]
   498a8:	cmp	fp, ip
   498ac:	ble	49890 <__assert_fail@plt+0x3729c>
   498b0:	add	r1, r3, #1
   498b4:	b	4987c <__assert_fail@plt+0x37288>
   498b8:	ldr	r3, [sp, #52]	; 0x34
   498bc:	cmp	r3, r5
   498c0:	ble	48cd0 <__assert_fail@plt+0x366dc>
   498c4:	ldr	r3, [sp, #60]	; 0x3c
   498c8:	ldr	r1, [sp, #80]	; 0x50
   498cc:	ldrb	r2, [r3, r5]
   498d0:	add	r3, r3, r5
   498d4:	ldrb	r2, [r1, r2]
   498d8:	ldr	r1, [sp, #64]	; 0x40
   498dc:	ldrb	r2, [r1, r2]
   498e0:	cmp	r2, #0
   498e4:	bne	48d14 <__assert_fail@plt+0x36720>
   498e8:	mov	ip, r1
   498ec:	add	r2, r5, #1
   498f0:	ldr	lr, [sp, #80]	; 0x50
   498f4:	ldr	r0, [sp, #52]	; 0x34
   498f8:	b	49914 <__assert_fail@plt+0x37320>
   498fc:	ldrb	r1, [r3, #1]!
   49900:	add	r2, r2, #1
   49904:	ldrb	r1, [lr, r1]
   49908:	ldrb	r1, [ip, r1]
   4990c:	cmp	r1, #0
   49910:	bne	49bac <__assert_fail@plt+0x375b8>
   49914:	cmp	r0, r2
   49918:	mov	r5, r2
   4991c:	bne	498fc <__assert_fail@plt+0x37308>
   49920:	b	48cc8 <__assert_fail@plt+0x366d4>
   49924:	ldr	r3, [sp, #68]	; 0x44
   49928:	cmp	r3, r5
   4992c:	bgt	48fa0 <__assert_fail@plt+0x369ac>
   49930:	ldr	r3, [sp, #80]	; 0x50
   49934:	ldr	r2, [sp, #112]	; 0x70
   49938:	cmp	r3, #0
   4993c:	beq	49d70 <__assert_fail@plt+0x3777c>
   49940:	mov	ip, r3
   49944:	ldr	r1, [sp, #108]	; 0x6c
   49948:	ldr	r0, [sp, #64]	; 0x40
   4994c:	ldr	r4, [sp, #68]	; 0x44
   49950:	ldr	r6, [sp, #60]	; 0x3c
   49954:	ldr	lr, [sp, #72]	; 0x48
   49958:	b	49970 <__assert_fail@plt+0x3737c>
   4995c:	sub	r5, r5, #1
   49960:	cmp	r4, r5
   49964:	mov	r2, r5
   49968:	mov	r1, #1
   4996c:	bgt	49c44 <__assert_fail@plt+0x37650>
   49970:	cmp	lr, r5
   49974:	mov	r3, #0
   49978:	ldrbgt	r3, [r6, r5]
   4997c:	ldrb	r3, [ip, r3]
   49980:	ldrb	r3, [r0, r3]
   49984:	cmp	r3, #0
   49988:	beq	4995c <__assert_fail@plt+0x37368>
   4998c:	cmp	r1, #0
   49990:	strne	r2, [sp, #112]	; 0x70
   49994:	b	48d14 <__assert_fail@plt+0x36720>
   49998:	ldr	r3, [sp, #28]
   4999c:	ldr	r4, [r3, #76]	; 0x4c
   499a0:	cmp	r4, #0
   499a4:	bne	49138 <__assert_fail@plt+0x36b44>
   499a8:	b	49640 <__assert_fail@plt+0x3704c>
   499ac:	ldr	r1, [sp, #72]	; 0x48
   499b0:	b	48a88 <__assert_fail@plt+0x36494>
   499b4:	mov	sl, #0
   499b8:	ldr	r0, [sp, #12]
   499bc:	bl	376d0 <__assert_fail@plt+0x250dc>
   499c0:	mov	r0, sl
   499c4:	bl	376d0 <__assert_fail@plt+0x250dc>
   499c8:	cmp	r7, #1
   499cc:	beq	48ed4 <__assert_fail@plt+0x368e0>
   499d0:	str	r7, [sp, #48]	; 0x30
   499d4:	ldr	r7, [sp, #240]	; 0xf0
   499d8:	b	48ff4 <__assert_fail@plt+0x36a00>
   499dc:	ldr	r1, [sp, #164]	; 0xa4
   499e0:	ldr	r4, [sp, #64]	; 0x40
   499e4:	ldr	r6, [sp, #92]	; 0x5c
   499e8:	ldr	r7, [sp, #68]	; 0x44
   499ec:	ldr	r8, [sp, #52]	; 0x34
   499f0:	b	49a38 <__assert_fail@plt+0x37444>
   499f4:	ldr	r0, [sp, #168]	; 0xa8
   499f8:	mov	r2, #0
   499fc:	cmp	r3, r0
   49a00:	ldrcc	r2, [sp, #144]	; 0x90
   49a04:	ldrbcc	r2, [r2, r3]
   49a08:	ldrb	r3, [r4, r2]
   49a0c:	cmp	r3, #0
   49a10:	bne	48d14 <__assert_fail@plt+0x36720>
   49a14:	add	r5, r5, r6
   49a18:	cmp	r8, r5
   49a1c:	movge	r3, #0
   49a20:	movlt	r3, #1
   49a24:	cmp	r7, r5
   49a28:	orrgt	r3, r3, #1
   49a2c:	cmp	r3, #0
   49a30:	str	r5, [sp, #112]	; 0x70
   49a34:	bne	48fa0 <__assert_fail@plt+0x369ac>
   49a38:	ldr	r2, [sp, #172]	; 0xac
   49a3c:	sub	r3, r5, r1
   49a40:	cmp	r3, r2
   49a44:	bcc	499f4 <__assert_fail@plt+0x37400>
   49a48:	ldr	r2, [sp, #472]	; 0x1d8
   49a4c:	mov	r1, r5
   49a50:	add	r0, sp, #140	; 0x8c
   49a54:	bl	3c074 <__assert_fail@plt+0x29a80>
   49a58:	cmp	r0, #0
   49a5c:	bne	49dc0 <__assert_fail@plt+0x377cc>
   49a60:	ldr	r1, [sp, #164]	; 0xa4
   49a64:	sub	r3, r5, r1
   49a68:	b	499f4 <__assert_fail@plt+0x37400>
   49a6c:	mov	r3, r2
   49a70:	sub	r1, r3, #1
   49a74:	ldr	r2, [sp, #228]	; 0xe4
   49a78:	add	r0, sp, #140	; 0x8c
   49a7c:	bl	3bc7c <__assert_fail@plt+0x29688>
   49a80:	tst	r0, #1
   49a84:	beq	49bf0 <__assert_fail@plt+0x375fc>
   49a88:	ldr	fp, [r4, #40]	; 0x28
   49a8c:	b	48d88 <__assert_fail@plt+0x36794>
   49a90:	mov	r7, #1
   49a94:	b	499b8 <__assert_fail@plt+0x373c4>
   49a98:	beq	feaf4548 <stdout@@GLIBC_2.4+0xfea8fff4>
   49a9c:	andeq	pc, r3, r0, lsl #30
   49aa0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   49aa4:	ldr	r3, [sp, #264]	; 0x108
   49aa8:	cmp	r3, #0
   49aac:	movgt	r7, #0
   49ab0:	ble	49b30 <__assert_fail@plt+0x3753c>
   49ab4:	ldr	r3, [sp, #272]	; 0x110
   49ab8:	ldr	r6, [r3, r7, lsl #2]
   49abc:	ldr	r3, [r6, #16]
   49ac0:	cmp	r3, #0
   49ac4:	movgt	r4, #0
   49ac8:	ble	49af4 <__assert_fail@plt+0x37500>
   49acc:	ldr	r3, [r6, #20]
   49ad0:	ldr	r5, [r3, r4, lsl #2]
   49ad4:	add	r4, r4, #1
   49ad8:	ldr	r0, [r5, #16]
   49adc:	bl	376d0 <__assert_fail@plt+0x250dc>
   49ae0:	mov	r0, r5
   49ae4:	bl	376d0 <__assert_fail@plt+0x250dc>
   49ae8:	ldr	r3, [r6, #16]
   49aec:	cmp	r4, r3
   49af0:	blt	49acc <__assert_fail@plt+0x374d8>
   49af4:	ldr	r0, [r6, #20]
   49af8:	bl	376d0 <__assert_fail@plt+0x250dc>
   49afc:	ldr	r3, [r6, #8]
   49b00:	cmp	r3, #0
   49b04:	beq	49b18 <__assert_fail@plt+0x37524>
   49b08:	ldr	r0, [r3, #8]
   49b0c:	bl	376d0 <__assert_fail@plt+0x250dc>
   49b10:	ldr	r0, [r6, #8]
   49b14:	bl	376d0 <__assert_fail@plt+0x250dc>
   49b18:	mov	r0, r6
   49b1c:	bl	376d0 <__assert_fail@plt+0x250dc>
   49b20:	ldr	r3, [sp, #264]	; 0x108
   49b24:	add	r7, r7, #1
   49b28:	cmp	r7, r3
   49b2c:	blt	49ab4 <__assert_fail@plt+0x374c0>
   49b30:	mov	r3, #0
   49b34:	ldr	r0, [sp, #272]	; 0x110
   49b38:	str	r3, [sp, #264]	; 0x108
   49b3c:	str	r3, [sp, #248]	; 0xf8
   49b40:	bl	376d0 <__assert_fail@plt+0x250dc>
   49b44:	ldr	r0, [sp, #256]	; 0x100
   49b48:	bl	376d0 <__assert_fail@plt+0x250dc>
   49b4c:	b	4900c <__assert_fail@plt+0x36a18>
   49b50:	mov	r1, r6
   49b54:	ldr	r0, [sp, #144]	; 0x90
   49b58:	bl	3aacc <__assert_fail@plt+0x284d8>
   49b5c:	cmp	r0, #0
   49b60:	beq	48fe8 <__assert_fail@plt+0x369f4>
   49b64:	ldr	r1, [sp, #28]
   49b68:	ldrb	r2, [sp, #215]	; 0xd7
   49b6c:	str	r0, [sp, #144]	; 0x90
   49b70:	ldrb	r3, [r1, #88]	; 0x58
   49b74:	cmp	r2, #0
   49b78:	add	r2, r1, #96	; 0x60
   49b7c:	str	r6, [sp, #176]	; 0xb0
   49b80:	lsr	r3, r3, #4
   49b84:	and	r3, r3, #1
   49b88:	strb	r3, [sp, #218]	; 0xda
   49b8c:	str	r2, [sp, #208]	; 0xd0
   49b90:	bne	48a84 <__assert_fail@plt+0x36490>
   49b94:	b	48a6c <__assert_fail@plt+0x36478>
   49b98:	ldr	r3, [sp, #28]
   49b9c:	ldrb	r3, [r3, #88]	; 0x58
   49ba0:	tst	r3, #2
   49ba4:	bne	48b24 <__assert_fail@plt+0x36530>
   49ba8:	b	48b48 <__assert_fail@plt+0x36554>
   49bac:	str	r5, [sp, #112]	; 0x70
   49bb0:	b	48d14 <__assert_fail@plt+0x36720>
   49bb4:	mov	r1, fp
   49bb8:	ldr	r0, [sp, #224]	; 0xe0
   49bbc:	bl	463d8 <__assert_fail@plt+0x33de4>
   49bc0:	cmp	r0, #0
   49bc4:	bne	48e28 <__assert_fail@plt+0x36834>
   49bc8:	ldr	r7, [sp, #240]	; 0xf0
   49bcc:	mov	r3, #12
   49bd0:	cmp	r7, #0
   49bd4:	str	r3, [sp, #116]	; 0x74
   49bd8:	bne	495a8 <__assert_fail@plt+0x36fb4>
   49bdc:	b	495b4 <__assert_fail@plt+0x36fc0>
   49be0:	ldr	r3, [sp, #104]	; 0x68
   49be4:	str	r3, [sp, #16]
   49be8:	ldrb	r3, [fp, #52]	; 0x34
   49bec:	b	48db4 <__assert_fail@plt+0x367c0>
   49bf0:	cmp	r0, #0
   49bf4:	beq	48d88 <__assert_fail@plt+0x36794>
   49bf8:	and	r3, r0, #6
   49bfc:	cmp	r3, #6
   49c00:	ldreq	fp, [r4, #48]	; 0x30
   49c04:	beq	48d88 <__assert_fail@plt+0x36794>
   49c08:	tst	r0, #2
   49c0c:	beq	48fc4 <__assert_fail@plt+0x369d0>
   49c10:	ldr	fp, [r4, #44]	; 0x2c
   49c14:	b	48d88 <__assert_fail@plt+0x36794>
   49c18:	ldr	r0, [sp, #124]	; 0x7c
   49c1c:	ldr	r8, [sp, #12]
   49c20:	bl	376d0 <__assert_fail@plt+0x250dc>
   49c24:	ldr	r0, [sp, #284]	; 0x11c
   49c28:	cmp	r0, r8
   49c2c:	beq	49c34 <__assert_fail@plt+0x37640>
   49c30:	bl	376d0 <__assert_fail@plt+0x250dc>
   49c34:	mov	r3, #1
   49c38:	str	r3, [sp, #48]	; 0x30
   49c3c:	ldr	r7, [sp, #240]	; 0xf0
   49c40:	b	48ff4 <__assert_fail@plt+0x36a00>
   49c44:	str	r5, [sp, #112]	; 0x70
   49c48:	b	48fa0 <__assert_fail@plt+0x369ac>
   49c4c:	ldrsb	r3, [fp, #52]	; 0x34
   49c50:	cmp	r3, #0
   49c54:	blt	49d0c <__assert_fail@plt+0x37718>
   49c58:	ldr	r3, [sp, #36]	; 0x24
   49c5c:	cmp	r3, #0
   49c60:	ldr	r3, [sp, #12]
   49c64:	str	r3, [sp, #20]
   49c68:	movne	r3, #1
   49c6c:	strne	r3, [sp, #40]	; 0x28
   49c70:	bne	48dcc <__assert_fail@plt+0x367d8>
   49c74:	b	490c8 <__assert_fail@plt+0x36ad4>
   49c78:	ldr	r7, [sp, #240]	; 0xf0
   49c7c:	b	495b4 <__assert_fail@plt+0x36fc0>
   49c80:	add	r4, fp, #8
   49c84:	add	r5, fp, #12
   49c88:	mov	r1, r4
   49c8c:	mov	r2, r5
   49c90:	mov	r3, #0
   49c94:	add	r0, sp, #140	; 0x8c
   49c98:	bl	3c914 <__assert_fail@plt+0x2a320>
   49c9c:	cmp	r0, #0
   49ca0:	str	r0, [sp, #116]	; 0x74
   49ca4:	bne	49d48 <__assert_fail@plt+0x37754>
   49ca8:	ldrb	r3, [fp, #52]	; 0x34
   49cac:	tst	r3, #64	; 0x40
   49cb0:	bne	49d28 <__assert_fail@plt+0x37734>
   49cb4:	ldr	r2, [sp, #108]	; 0x6c
   49cb8:	str	r2, [sp, #16]
   49cbc:	b	48db4 <__assert_fail@plt+0x367c0>
   49cc0:	mov	fp, r3
   49cc4:	bl	376d0 <__assert_fail@plt+0x250dc>
   49cc8:	mov	r0, fp
   49ccc:	bl	376d0 <__assert_fail@plt+0x250dc>
   49cd0:	mov	r3, #12
   49cd4:	str	r3, [sp, #48]	; 0x30
   49cd8:	ldr	r7, [sp, #240]	; 0xf0
   49cdc:	b	48ff4 <__assert_fail@plt+0x36a00>
   49ce0:	mov	r3, #8
   49ce4:	b	48be4 <__assert_fail@plt+0x365f0>
   49ce8:	ldr	fp, [sp, #12]
   49cec:	mov	r0, fp
   49cf0:	bl	376d0 <__assert_fail@plt+0x250dc>
   49cf4:	mov	r0, sl
   49cf8:	bl	376d0 <__assert_fail@plt+0x250dc>
   49cfc:	mov	r3, #12
   49d00:	str	r3, [sp, #48]	; 0x30
   49d04:	ldr	r7, [sp, #240]	; 0xf0
   49d08:	b	48ff4 <__assert_fail@plt+0x36a00>
   49d0c:	ldr	r2, [sp, #12]
   49d10:	mov	r1, fp
   49d14:	add	r0, sp, #140	; 0x8c
   49d18:	bl	3bd68 <__assert_fail@plt+0x29774>
   49d1c:	cmp	r0, #0
   49d20:	beq	48dbc <__assert_fail@plt+0x367c8>
   49d24:	b	49c58 <__assert_fail@plt+0x37664>
   49d28:	mov	r2, r5
   49d2c:	mov	r1, r4
   49d30:	add	r0, sp, #140	; 0x8c
   49d34:	bl	47e80 <__assert_fail@plt+0x3588c>
   49d38:	cmp	r0, #0
   49d3c:	str	r0, [sp, #116]	; 0x74
   49d40:	ldrbeq	r3, [fp, #52]	; 0x34
   49d44:	beq	49cb4 <__assert_fail@plt+0x376c0>
   49d48:	str	r0, [sp, #20]
   49d4c:	b	490c8 <__assert_fail@plt+0x36ad4>
   49d50:	cmp	r0, #0
   49d54:	mov	r4, r0
   49d58:	bne	48e60 <__assert_fail@plt+0x3686c>
   49d5c:	b	490a8 <__assert_fail@plt+0x36ab4>
   49d60:	mov	r3, #12
   49d64:	mov	r7, #0
   49d68:	str	r3, [sp, #48]	; 0x30
   49d6c:	b	48ff4 <__assert_fail@plt+0x36a00>
   49d70:	ldr	r1, [sp, #108]	; 0x6c
   49d74:	ldr	r0, [sp, #64]	; 0x40
   49d78:	ldr	lr, [sp, #68]	; 0x44
   49d7c:	ldr	r4, [sp, #60]	; 0x3c
   49d80:	ldr	ip, [sp, #72]	; 0x48
   49d84:	b	49d9c <__assert_fail@plt+0x377a8>
   49d88:	sub	r5, r5, #1
   49d8c:	cmp	lr, r5
   49d90:	mov	r2, r5
   49d94:	mov	r1, #1
   49d98:	bgt	49c44 <__assert_fail@plt+0x37650>
   49d9c:	cmp	ip, r5
   49da0:	mov	r3, #0
   49da4:	ldrbgt	r3, [r4, r5]
   49da8:	ldrb	r3, [r0, r3]
   49dac:	cmp	r3, #0
   49db0:	beq	49d88 <__assert_fail@plt+0x37794>
   49db4:	b	4998c <__assert_fail@plt+0x37398>
   49db8:	mov	r4, r0
   49dbc:	b	48e60 <__assert_fail@plt+0x3686c>
   49dc0:	str	r0, [sp, #48]	; 0x30
   49dc4:	ldr	r7, [sp, #240]	; 0xf0
   49dc8:	b	48ff4 <__assert_fail@plt+0x36a00>
   49dcc:	ldr	r3, [sp, #12]
   49dd0:	str	r9, [sp, #32]
   49dd4:	mov	fp, r3
   49dd8:	mov	r9, sl
   49ddc:	add	r2, r3, r4
   49de0:	str	r6, [sp, #20]
   49de4:	str	r2, [sp, #24]
   49de8:	str	sl, [sp, #16]
   49dec:	ldr	r6, [fp]
   49df0:	cmp	r6, #0
   49df4:	beq	49f94 <__assert_fail@plt+0x379a0>
   49df8:	ldr	r5, [r9]
   49dfc:	cmp	r5, #0
   49e00:	beq	49edc <__assert_fail@plt+0x378e8>
   49e04:	ldr	r3, [r6, #8]
   49e08:	cmp	r3, #0
   49e0c:	ble	49f08 <__assert_fail@plt+0x37914>
   49e10:	ldr	r2, [r5, #8]
   49e14:	cmp	r2, #0
   49e18:	ble	49f48 <__assert_fail@plt+0x37954>
   49e1c:	add	r3, r3, r2
   49e20:	str	r3, [sp, #128]	; 0x80
   49e24:	lsl	r0, r3, #2
   49e28:	bl	3a010 <__assert_fail@plt+0x27a1c>
   49e2c:	cmp	r0, #0
   49e30:	str	r0, [sp, #136]	; 0x88
   49e34:	beq	4a88c <__assert_fail@plt+0x38298>
   49e38:	mov	r4, #0
   49e3c:	mov	r7, r4
   49e40:	mov	ip, r0
   49e44:	mov	r1, #1
   49e48:	b	49e8c <__assert_fail@plt+0x37898>
   49e4c:	ldr	r3, [r5, #8]
   49e50:	cmp	r4, r3
   49e54:	bge	49fb4 <__assert_fail@plt+0x379c0>
   49e58:	ldr	r3, [r6, #12]
   49e5c:	ldr	r2, [r5, #12]
   49e60:	ldr	r3, [r3, r7, lsl #2]
   49e64:	ldr	r2, [r2, r4, lsl #2]
   49e68:	cmp	r3, r2
   49e6c:	addgt	r4, r4, #1
   49e70:	strgt	r2, [ip]
   49e74:	bgt	49e84 <__assert_fail@plt+0x37890>
   49e78:	add	r7, r7, #1
   49e7c:	addeq	r4, r4, #1
   49e80:	str	r3, [ip]
   49e84:	add	r1, r1, #1
   49e88:	add	ip, ip, #4
   49e8c:	ldr	r2, [r6, #8]
   49e90:	sub	sl, r1, #1
   49e94:	cmp	r7, r2
   49e98:	blt	49e4c <__assert_fail@plt+0x37858>
   49e9c:	ldr	r2, [r5, #8]
   49ea0:	cmp	r4, r2
   49ea4:	blt	4a8b4 <__assert_fail@plt+0x382c0>
   49ea8:	add	r2, sp, #128	; 0x80
   49eac:	str	sl, [sp, #132]	; 0x84
   49eb0:	mov	r3, #0
   49eb4:	mov	r1, r8
   49eb8:	add	r0, sp, #116	; 0x74
   49ebc:	str	r3, [sp, #116]	; 0x74
   49ec0:	bl	404e4 <__assert_fail@plt+0x2def0>
   49ec4:	str	r0, [fp]
   49ec8:	ldr	r0, [sp, #136]	; 0x88
   49ecc:	bl	376d0 <__assert_fail@plt+0x250dc>
   49ed0:	ldr	r7, [sp, #116]	; 0x74
   49ed4:	cmp	r7, #0
   49ed8:	bne	49fdc <__assert_fail@plt+0x379e8>
   49edc:	ldr	r3, [sp, #24]
   49ee0:	add	fp, fp, #4
   49ee4:	cmp	r3, fp
   49ee8:	add	r9, r9, #4
   49eec:	bne	49dec <__assert_fail@plt+0x377f8>
   49ef0:	ldr	sl, [sp, #16]
   49ef4:	ldr	r9, [sp, #32]
   49ef8:	mov	r0, sl
   49efc:	ldr	fp, [sp, #12]
   49f00:	bl	376d0 <__assert_fail@plt+0x250dc>
   49f04:	b	49614 <__assert_fail@plt+0x37020>
   49f08:	ldr	r3, [r5, #8]
   49f0c:	cmp	r3, #0
   49f10:	ble	49f7c <__assert_fail@plt+0x37988>
   49f14:	lsl	r0, r3, #2
   49f18:	str	r3, [sp, #132]	; 0x84
   49f1c:	str	r3, [sp, #128]	; 0x80
   49f20:	bl	3a010 <__assert_fail@plt+0x27a1c>
   49f24:	cmp	r0, #0
   49f28:	str	r0, [sp, #136]	; 0x88
   49f2c:	beq	4a88c <__assert_fail@plt+0x38298>
   49f30:	ldr	r2, [r5, #8]
   49f34:	ldr	r1, [r5, #12]
   49f38:	lsl	r2, r2, #2
   49f3c:	bl	12024 <memcpy@plt>
   49f40:	add	r2, sp, #128	; 0x80
   49f44:	b	49eb0 <__assert_fail@plt+0x378bc>
   49f48:	lsl	r0, r3, #2
   49f4c:	str	r3, [sp, #132]	; 0x84
   49f50:	str	r3, [sp, #128]	; 0x80
   49f54:	bl	3a010 <__assert_fail@plt+0x27a1c>
   49f58:	cmp	r0, #0
   49f5c:	str	r0, [sp, #136]	; 0x88
   49f60:	beq	4a88c <__assert_fail@plt+0x38298>
   49f64:	ldr	r2, [r6, #8]
   49f68:	ldr	r1, [r6, #12]
   49f6c:	lsl	r2, r2, #2
   49f70:	bl	12024 <memcpy@plt>
   49f74:	add	r2, sp, #128	; 0x80
   49f78:	b	49eb0 <__assert_fail@plt+0x378bc>
   49f7c:	add	r2, sp, #128	; 0x80
   49f80:	mov	r3, #0
   49f84:	str	r3, [sp, #128]	; 0x80
   49f88:	str	r3, [r2, #4]
   49f8c:	str	r3, [r2, #8]
   49f90:	b	49eb0 <__assert_fail@plt+0x378bc>
   49f94:	ldr	r3, [r9]
   49f98:	str	r3, [fp]
   49f9c:	b	49edc <__assert_fail@plt+0x378e8>
   49fa0:	mov	r2, r3
   49fa4:	mov	r3, ip
   49fa8:	add	r1, r2, #1
   49fac:	mov	ip, r3
   49fb0:	b	497e8 <__assert_fail@plt+0x371f4>
   49fb4:	sub	r2, r2, r7
   49fb8:	ldr	r1, [r6, #12]
   49fbc:	lsl	r2, r2, #2
   49fc0:	add	r0, r0, sl, lsl #2
   49fc4:	add	r1, r1, r7, lsl #2
   49fc8:	bl	12024 <memcpy@plt>
   49fcc:	ldr	r2, [r6, #8]
   49fd0:	sub	r7, r2, r7
   49fd4:	add	sl, sl, r7
   49fd8:	b	49ea8 <__assert_fail@plt+0x378b4>
   49fdc:	ldr	sl, [sp, #16]
   49fe0:	mov	r0, sl
   49fe4:	bl	376d0 <__assert_fail@plt+0x250dc>
   49fe8:	ldr	r0, [sp, #12]
   49fec:	bl	376d0 <__assert_fail@plt+0x250dc>
   49ff0:	mov	r0, #0
   49ff4:	bl	376d0 <__assert_fail@plt+0x250dc>
   49ff8:	b	499c8 <__assert_fail@plt+0x373d4>
   49ffc:	ldr	r3, [r0, r1, lsl #2]
   4a000:	cmp	fp, r3
   4a004:	beq	4a01c <__assert_fail@plt+0x37a28>
   4a008:	mov	r1, fp
   4a00c:	ldr	r0, [sp, #16]
   4a010:	bl	3b700 <__assert_fail@plt+0x2910c>
   4a014:	cmp	r0, #0
   4a018:	beq	4a778 <__assert_fail@plt+0x38184>
   4a01c:	ldr	r6, [r4, #4]
   4a020:	cmp	r6, #0
   4a024:	ble	4a0d8 <__assert_fail@plt+0x37ae4>
   4a028:	ldr	r3, [sp, #24]
   4a02c:	ldr	r2, [r4, #8]
   4a030:	mvn	fp, #0
   4a034:	ldr	r3, [r3, #8]
   4a038:	mov	lr, #0
   4a03c:	str	r3, [sp, #40]	; 0x28
   4a040:	sub	r3, r3, #1
   4a044:	str	r2, [sp, #36]	; 0x24
   4a048:	str	r3, [sp, #44]	; 0x2c
   4a04c:	ldr	r3, [sp, #40]	; 0x28
   4a050:	cmp	r3, #0
   4a054:	ble	4a0bc <__assert_fail@plt+0x37ac8>
   4a058:	ldr	r3, [sp, #36]	; 0x24
   4a05c:	ldr	ip, [sp, #44]	; 0x2c
   4a060:	mov	r1, #0
   4a064:	ldr	r4, [r3, lr, lsl #2]
   4a068:	ldr	r3, [sp, #24]
   4a06c:	ldr	r0, [r3, #12]
   4a070:	cmp	r1, ip
   4a074:	bcs	4a0b0 <__assert_fail@plt+0x37abc>
   4a078:	add	r2, r1, ip
   4a07c:	lsr	r2, r2, #1
   4a080:	ldr	r3, [r0, r2, lsl #2]
   4a084:	cmp	r4, r3
   4a088:	ble	4a0a0 <__assert_fail@plt+0x37aac>
   4a08c:	b	4a150 <__assert_fail@plt+0x37b5c>
   4a090:	ldr	ip, [r0, r3, lsl #2]
   4a094:	cmp	r4, ip
   4a098:	bgt	4a158 <__assert_fail@plt+0x37b64>
   4a09c:	mov	r2, r3
   4a0a0:	add	r3, r1, r2
   4a0a4:	cmp	r1, r2
   4a0a8:	lsr	r3, r3, #1
   4a0ac:	bcc	4a090 <__assert_fail@plt+0x37a9c>
   4a0b0:	ldr	r3, [r0, r1, lsl #2]
   4a0b4:	cmp	r4, r3
   4a0b8:	beq	4a164 <__assert_fail@plt+0x37b70>
   4a0bc:	add	lr, lr, #1
   4a0c0:	cmp	r6, lr
   4a0c4:	bne	4a04c <__assert_fail@plt+0x37a58>
   4a0c8:	cmp	fp, #0
   4a0cc:	bge	4978c <__assert_fail@plt+0x37198>
   4a0d0:	cmn	fp, #2
   4a0d4:	beq	4a778 <__assert_fail@plt+0x38184>
   4a0d8:	cmp	sl, #0
   4a0dc:	beq	49c18 <__assert_fail@plt+0x37624>
   4a0e0:	ldr	r4, [sl]
   4a0e4:	cmp	r4, #0
   4a0e8:	beq	4a9c8 <__assert_fail@plt+0x383d4>
   4a0ec:	sub	r3, r4, #1
   4a0f0:	ldr	ip, [sl, #8]
   4a0f4:	add	lr, r3, r3, lsl #1
   4a0f8:	str	r3, [sl]
   4a0fc:	add	r4, ip, lr, lsl #3
   4a100:	mov	r2, r9
   4a104:	ldr	r1, [r4, #8]
   4a108:	mov	r0, r5
   4a10c:	ldr	r7, [ip, lr, lsl #3]
   4a110:	bl	12024 <memcpy@plt>
   4a114:	ldr	r1, [r4, #8]
   4a118:	mov	r2, r9
   4a11c:	add	r1, r1, r9
   4a120:	mov	r0, r8
   4a124:	bl	12024 <memcpy@plt>
   4a128:	ldr	r0, [sp, #124]	; 0x7c
   4a12c:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a130:	ldr	r0, [r4, #8]
   4a134:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a138:	add	r3, r4, #12
   4a13c:	ldr	fp, [r4, #4]
   4a140:	ldm	r3, {r0, r1, r2}
   4a144:	ldr	r3, [sp, #16]
   4a148:	stm	r3, {r0, r1, r2}
   4a14c:	b	4978c <__assert_fail@plt+0x37198>
   4a150:	mov	r3, r2
   4a154:	mov	r2, ip
   4a158:	add	r1, r3, #1
   4a15c:	mov	ip, r2
   4a160:	b	4a070 <__assert_fail@plt+0x37a7c>
   4a164:	cmn	fp, #1
   4a168:	bne	4a6e4 <__assert_fail@plt+0x380f0>
   4a16c:	mov	fp, r4
   4a170:	b	4a0bc <__assert_fail@plt+0x37ac8>
   4a174:	ldr	r3, [sp, #236]	; 0xec
   4a178:	cmp	fp, r3
   4a17c:	bne	497c8 <__assert_fail@plt+0x371d4>
   4a180:	cmp	sl, #0
   4a184:	bne	4a358 <__assert_fail@plt+0x37d64>
   4a188:	ldr	r0, [sp, #124]	; 0x7c
   4a18c:	ldr	r8, [sp, #12]
   4a190:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a194:	ldr	r0, [sp, #284]	; 0x11c
   4a198:	cmp	r0, r8
   4a19c:	beq	4a1fc <__assert_fail@plt+0x37c08>
   4a1a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a1a4:	mov	r4, #0
   4a1a8:	mov	r3, #16
   4a1ac:	cmp	sl, #0
   4a1b0:	str	r8, [sp, #284]	; 0x11c
   4a1b4:	str	r4, [sp, #276]	; 0x114
   4a1b8:	str	r3, [sp, #280]	; 0x118
   4a1bc:	beq	4a1fc <__assert_fail@plt+0x37c08>
   4a1c0:	ldr	r6, [sl]
   4a1c4:	ldr	r7, [sl, #8]
   4a1c8:	cmp	r6, r4
   4a1cc:	ble	4a1f4 <__assert_fail@plt+0x37c00>
   4a1d0:	mov	r5, r7
   4a1d4:	ldr	r0, [r5, #20]
   4a1d8:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a1dc:	add	r4, r4, #1
   4a1e0:	ldr	r0, [r5, #8]
   4a1e4:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a1e8:	cmp	r6, r4
   4a1ec:	add	r5, r5, #24
   4a1f0:	bne	4a1d4 <__assert_fail@plt+0x37be0>
   4a1f4:	mov	r0, r7
   4a1f8:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a1fc:	ldr	r7, [sp, #240]	; 0xf0
   4a200:	ldrb	r3, [sp, #216]	; 0xd8
   4a204:	ldr	r2, [sp, #468]	; 0x1d4
   4a208:	ldr	r5, [sp, #168]	; 0xa8
   4a20c:	cmp	r3, #0
   4a210:	movne	r1, r2
   4a214:	mov	r3, r2
   4a218:	ldr	r4, [sp, #152]	; 0x98
   4a21c:	ldr	lr, [sp, #172]	; 0xac
   4a220:	ldr	r0, [sp, #112]	; 0x70
   4a224:	addne	r3, r2, #4
   4a228:	addne	r6, r1, r9
   4a22c:	bne	4a308 <__assert_fail@plt+0x37d14>
   4a230:	add	r1, r3, #4
   4a234:	add	ip, r3, r9
   4a238:	ldr	r3, [r1, #-4]
   4a23c:	add	r2, r2, #8
   4a240:	cmn	r3, #1
   4a244:	add	r3, r0, r3
   4a248:	ldrne	lr, [r2, #-4]
   4a24c:	strne	r3, [r1, #-4]
   4a250:	addne	r3, r0, lr
   4a254:	strne	r3, [r2, #-4]
   4a258:	cmp	ip, r2
   4a25c:	add	r1, r1, #8
   4a260:	bne	4a238 <__assert_fail@plt+0x37c44>
   4a264:	ldr	r3, [sp, #96]	; 0x60
   4a268:	cmp	r3, #0
   4a26c:	ble	4a2a0 <__assert_fail@plt+0x37cac>
   4a270:	ldr	r2, [sp, #56]	; 0x38
   4a274:	ldr	r1, [sp, #468]	; 0x1d4
   4a278:	add	r2, r3, r2
   4a27c:	ldr	r3, [sp, #468]	; 0x1d4
   4a280:	add	r2, r1, r2, lsl #3
   4a284:	add	r3, r3, r9
   4a288:	mvn	r1, #0
   4a28c:	str	r1, [r3]
   4a290:	str	r1, [r3, #4]
   4a294:	add	r3, r3, #8
   4a298:	cmp	r3, r2
   4a29c:	bne	4a28c <__assert_fail@plt+0x37c98>
   4a2a0:	ldr	r3, [sp, #28]
   4a2a4:	ldr	r3, [r3, #132]	; 0x84
   4a2a8:	cmp	r3, #0
   4a2ac:	beq	48ff4 <__assert_fail@plt+0x36a00>
   4a2b0:	ldr	r0, [sp, #468]	; 0x1d4
   4a2b4:	mov	ip, #0
   4a2b8:	mov	lr, r0
   4a2bc:	b	4a2f4 <__assert_fail@plt+0x37d00>
   4a2c0:	ldr	r1, [r3]
   4a2c4:	cmp	ip, r1
   4a2c8:	add	r4, r1, #1
   4a2cc:	mov	ip, r2
   4a2d0:	beq	4a2ec <__assert_fail@plt+0x37cf8>
   4a2d4:	ldr	r2, [lr, r4, lsl #3]
   4a2d8:	str	r2, [r0, #8]
   4a2dc:	ldr	r2, [r3]
   4a2e0:	add	r2, lr, r2, lsl #3
   4a2e4:	ldr	r2, [r2, #12]
   4a2e8:	str	r2, [r0, #12]
   4a2ec:	add	r3, r3, #4
   4a2f0:	add	r0, r0, #8
   4a2f4:	ldr	r1, [sp, #56]	; 0x38
   4a2f8:	add	r2, ip, #1
   4a2fc:	cmp	r2, r1
   4a300:	bne	4a2c0 <__assert_fail@plt+0x37ccc>
   4a304:	b	48ff4 <__assert_fail@plt+0x36a00>
   4a308:	ldr	r1, [r3, #-4]
   4a30c:	cmn	r1, #1
   4a310:	beq	4a344 <__assert_fail@plt+0x37d50>
   4a314:	cmp	r1, r5
   4a318:	moveq	r1, lr
   4a31c:	ldrne	r1, [r4, r1, lsl #2]
   4a320:	str	r1, [r3, #-4]
   4a324:	ldr	ip, [r2, #4]
   4a328:	add	r1, r1, r0
   4a32c:	cmp	r5, ip
   4a330:	moveq	ip, lr
   4a334:	ldrne	ip, [r4, ip, lsl #2]
   4a338:	str	r1, [r3, #-4]
   4a33c:	add	ip, ip, r0
   4a340:	str	ip, [r2, #4]
   4a344:	add	r2, r2, #8
   4a348:	cmp	r2, r6
   4a34c:	add	r3, r3, #8
   4a350:	bne	4a308 <__assert_fail@plt+0x37d14>
   4a354:	b	4a264 <__assert_fail@plt+0x37c70>
   4a358:	mov	r2, r5
   4a35c:	mov	r3, #0
   4a360:	b	4a374 <__assert_fail@plt+0x37d80>
   4a364:	ldr	r1, [sp, #56]	; 0x38
   4a368:	add	r2, r2, #8
   4a36c:	cmp	r1, r3
   4a370:	beq	4aa48 <__assert_fail@plt+0x38454>
   4a374:	ldr	r1, [r5, r3, lsl #3]
   4a378:	add	r3, r3, #1
   4a37c:	cmp	r1, #0
   4a380:	blt	4a364 <__assert_fail@plt+0x37d70>
   4a384:	ldr	r1, [r2, #4]
   4a388:	cmn	r1, #1
   4a38c:	bne	4a364 <__assert_fail@plt+0x37d70>
   4a390:	ldr	r3, [sl]
   4a394:	cmp	r3, #0
   4a398:	beq	4aa48 <__assert_fail@plt+0x38454>
   4a39c:	sub	r3, r3, #1
   4a3a0:	ldr	ip, [sl, #8]
   4a3a4:	add	lr, r3, r3, lsl #1
   4a3a8:	str	r3, [sl]
   4a3ac:	add	r4, ip, lr, lsl #3
   4a3b0:	mov	r2, r9
   4a3b4:	ldr	r1, [r4, #8]
   4a3b8:	mov	r0, r5
   4a3bc:	ldr	r7, [ip, lr, lsl #3]
   4a3c0:	bl	12024 <memcpy@plt>
   4a3c4:	ldr	r1, [r4, #8]
   4a3c8:	mov	r2, r9
   4a3cc:	add	r1, r1, r9
   4a3d0:	mov	r0, r8
   4a3d4:	bl	12024 <memcpy@plt>
   4a3d8:	ldr	r0, [sp, #124]	; 0x7c
   4a3dc:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a3e0:	ldr	r0, [r4, #8]
   4a3e4:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a3e8:	add	r3, r4, #12
   4a3ec:	ldr	fp, [r4, #4]
   4a3f0:	ldm	r3, {r0, r1, r2}
   4a3f4:	ldr	r3, [sp, #16]
   4a3f8:	str	fp, [sp, #24]
   4a3fc:	lsl	r6, fp, #3
   4a400:	stm	r3, {r0, r1, r2}
   4a404:	b	49834 <__assert_fail@plt+0x37240>
   4a408:	ldrb	r1, [r3, #6]
   4a40c:	tst	r1, #16
   4a410:	bne	4a630 <__assert_fail@plt+0x3803c>
   4a414:	cmp	r2, #4
   4a418:	beq	4a5a8 <__assert_fail@plt+0x37fb4>
   4a41c:	ldr	r0, [sp, #144]	; 0x90
   4a420:	sub	r1, r2, #1
   4a424:	ldrb	r2, [r0, r7]
   4a428:	cmp	r1, #6
   4a42c:	ldrls	pc, [pc, r1, lsl #2]
   4a430:	b	4a0d8 <__assert_fail@plt+0x37ae4>
   4a434:	muleq	r4, r8, r5
   4a438:	ldrdeq	sl, [r4], -r8
   4a43c:	andeq	sl, r4, r8, ror r5
   4a440:	ldrdeq	sl, [r4], -r8
   4a444:	andeq	sl, r4, r8, asr r4
   4a448:	ldrdeq	sl, [r4], -r8
   4a44c:	andeq	sl, r4, r0, asr r4
   4a450:	tst	r2, #128	; 0x80
   4a454:	bne	4a0d8 <__assert_fail@plt+0x37ae4>
   4a458:	cmp	r2, #10
   4a45c:	beq	4a6d0 <__assert_fail@plt+0x380dc>
   4a460:	cmp	r2, #0
   4a464:	bne	4a478 <__assert_fail@plt+0x37e84>
   4a468:	ldr	r2, [sp, #224]	; 0xe0
   4a46c:	ldr	r2, [r2, #128]	; 0x80
   4a470:	tst	r2, #128	; 0x80
   4a474:	bne	4a0d8 <__assert_fail@plt+0x37ae4>
   4a478:	ldr	r6, [r3, #4]
   4a47c:	ldr	r3, [pc, #-2536]	; 49a9c <__assert_fail@plt+0x374a8>
   4a480:	tst	r6, r3
   4a484:	beq	4a4d8 <__assert_fail@plt+0x37ee4>
   4a488:	ldr	r2, [sp, #228]	; 0xe4
   4a48c:	mov	r1, r7
   4a490:	add	r0, sp, #140	; 0x8c
   4a494:	bl	3bc7c <__assert_fail@plt+0x29688>
   4a498:	ldr	r3, [pc, #-2560]	; 49aa0 <__assert_fail@plt+0x374ac>
   4a49c:	and	r3, r3, r6, lsr #8
   4a4a0:	tst	r3, #4
   4a4a4:	beq	4a6bc <__assert_fail@plt+0x380c8>
   4a4a8:	tst	r0, #1
   4a4ac:	beq	4a0d8 <__assert_fail@plt+0x37ae4>
   4a4b0:	tst	r3, #8
   4a4b4:	bne	4a0d8 <__assert_fail@plt+0x37ae4>
   4a4b8:	tst	r3, #32
   4a4bc:	beq	4a4c8 <__assert_fail@plt+0x37ed4>
   4a4c0:	tst	r0, #2
   4a4c4:	beq	4a0d8 <__assert_fail@plt+0x37ae4>
   4a4c8:	tst	r3, #128	; 0x80
   4a4cc:	beq	4a4d8 <__assert_fail@plt+0x37ee4>
   4a4d0:	tst	r0, #8
   4a4d4:	beq	4a0d8 <__assert_fail@plt+0x37ae4>
   4a4d8:	ldr	r3, [r4, #12]
   4a4dc:	ldr	r2, [sp, #24]
   4a4e0:	add	r7, r7, #1
   4a4e4:	ldr	fp, [r3, r2, lsl #2]
   4a4e8:	cmp	sl, #0
   4a4ec:	beq	4a56c <__assert_fail@plt+0x37f78>
   4a4f0:	ldr	r3, [sp, #232]	; 0xe8
   4a4f4:	cmp	r7, r3
   4a4f8:	bgt	4a0e0 <__assert_fail@plt+0x37aec>
   4a4fc:	ldr	r3, [sp, #240]	; 0xf0
   4a500:	ldr	r3, [r3, r7, lsl #2]
   4a504:	cmp	r3, #0
   4a508:	beq	4a0e0 <__assert_fail@plt+0x37aec>
   4a50c:	ldr	r2, [r3, #8]
   4a510:	cmp	r2, #0
   4a514:	ble	4a0e0 <__assert_fail@plt+0x37aec>
   4a518:	ldr	ip, [r3, #12]
   4a51c:	sub	r2, r2, #1
   4a520:	mov	r0, #0
   4a524:	cmp	r0, r2
   4a528:	bcs	4a560 <__assert_fail@plt+0x37f6c>
   4a52c:	add	r3, r0, r2
   4a530:	lsr	r3, r3, #1
   4a534:	b	4a54c <__assert_fail@plt+0x37f58>
   4a538:	add	r1, r3, r0
   4a53c:	cmp	r3, r0
   4a540:	mov	r2, r3
   4a544:	lsr	r3, r1, #1
   4a548:	bls	4a560 <__assert_fail@plt+0x37f6c>
   4a54c:	ldr	r1, [ip, r3, lsl #2]
   4a550:	cmp	r1, fp
   4a554:	bge	4a538 <__assert_fail@plt+0x37f44>
   4a558:	add	r0, r3, #1
   4a55c:	b	4a524 <__assert_fail@plt+0x37f30>
   4a560:	ldr	r3, [ip, r0, lsl #2]
   4a564:	cmp	r3, fp
   4a568:	bne	4a0e0 <__assert_fail@plt+0x37aec>
   4a56c:	mov	r3, #0
   4a570:	str	r3, [sp, #120]	; 0x78
   4a574:	b	4a0c8 <__assert_fail@plt+0x37ad4>
   4a578:	ldr	r1, [r3]
   4a57c:	asr	r0, r2, #5
   4a580:	and	r2, r2, #31
   4a584:	ldr	r1, [r1, r0, lsl #2]
   4a588:	lsr	r2, r1, r2
   4a58c:	tst	r2, #1
   4a590:	bne	4a478 <__assert_fail@plt+0x37e84>
   4a594:	b	4a0d8 <__assert_fail@plt+0x37ae4>
   4a598:	ldrb	r1, [r3]
   4a59c:	cmp	r1, r2
   4a5a0:	bne	4a0d8 <__assert_fail@plt+0x37ae4>
   4a5a4:	b	4a478 <__assert_fail@plt+0x37e84>
   4a5a8:	ldr	r3, [r3]
   4a5ac:	ldr	r2, [sp, #56]	; 0x38
   4a5b0:	add	r3, r3, #1
   4a5b4:	cmp	r2, r3
   4a5b8:	ble	4a6b0 <__assert_fail@plt+0x380bc>
   4a5bc:	add	r2, r5, r3, lsl #3
   4a5c0:	ldr	r0, [r5, r3, lsl #3]
   4a5c4:	ldr	r2, [r2, #4]
   4a5c8:	cmp	sl, #0
   4a5cc:	sub	r3, r2, r0
   4a5d0:	beq	4a65c <__assert_fail@plt+0x38068>
   4a5d4:	cmn	r0, #1
   4a5d8:	beq	4a0e0 <__assert_fail@plt+0x37aec>
   4a5dc:	cmn	r2, #1
   4a5e0:	beq	4a0e0 <__assert_fail@plt+0x37aec>
   4a5e4:	cmp	r3, #0
   4a5e8:	beq	4a664 <__assert_fail@plt+0x38070>
   4a5ec:	ldr	r2, [sp, #168]	; 0xa8
   4a5f0:	ldr	r1, [sp, #144]	; 0x90
   4a5f4:	sub	r2, r2, r7
   4a5f8:	cmp	r3, r2
   4a5fc:	bgt	4a0e0 <__assert_fail@plt+0x37aec>
   4a600:	add	r0, r1, r0
   4a604:	mov	r2, r3
   4a608:	add	r1, r1, r7
   4a60c:	str	r3, [sp, #24]
   4a610:	bl	12084 <memcmp@plt>
   4a614:	ldr	r3, [sp, #24]
   4a618:	cmp	r0, #0
   4a61c:	bne	4a0e0 <__assert_fail@plt+0x37aec>
   4a620:	ldr	r2, [r4, #12]
   4a624:	add	r7, r7, r3
   4a628:	ldr	fp, [r2, fp, lsl #2]
   4a62c:	b	4a4e8 <__assert_fail@plt+0x37ef4>
   4a630:	add	r3, sp, #140	; 0x8c
   4a634:	str	r7, [sp]
   4a638:	mov	r2, fp
   4a63c:	add	r1, r4, #128	; 0x80
   4a640:	bl	3d758 <__assert_fail@plt+0x2b164>
   4a644:	subs	r3, r0, #0
   4a648:	bne	4a620 <__assert_fail@plt+0x3802c>
   4a64c:	ldr	r3, [r4]
   4a650:	add	r3, r3, r6
   4a654:	ldrb	r2, [r3, #4]
   4a658:	b	4a41c <__assert_fail@plt+0x37e28>
   4a65c:	cmp	r3, #0
   4a660:	bne	4a620 <__assert_fail@plt+0x3802c>
   4a664:	mov	r1, fp
   4a668:	ldr	r0, [sp, #16]
   4a66c:	bl	3b700 <__assert_fail@plt+0x2910c>
   4a670:	cmp	r0, #0
   4a674:	beq	4a778 <__assert_fail@plt+0x38184>
   4a678:	add	fp, fp, fp, lsl #1
   4a67c:	ldr	r3, [r4, #20]
   4a680:	ldr	r1, [sp, #240]	; 0xf0
   4a684:	add	r3, r3, fp, lsl #2
   4a688:	ldr	r2, [r3, #8]
   4a68c:	ldr	r3, [r1, r7, lsl #2]
   4a690:	ldr	fp, [r2]
   4a694:	add	r1, r3, #12
   4a698:	mov	r2, fp
   4a69c:	ldr	r0, [r3, #8]
   4a6a0:	bl	3b81c <__assert_fail@plt+0x29228>
   4a6a4:	cmp	r0, #0
   4a6a8:	beq	4a64c <__assert_fail@plt+0x38058>
   4a6ac:	b	4a0c8 <__assert_fail@plt+0x37ad4>
   4a6b0:	cmp	sl, #0
   4a6b4:	bne	4a0e0 <__assert_fail@plt+0x37aec>
   4a6b8:	b	4a664 <__assert_fail@plt+0x38070>
   4a6bc:	tst	r3, #8
   4a6c0:	beq	4a4b8 <__assert_fail@plt+0x37ec4>
   4a6c4:	tst	r0, #1
   4a6c8:	beq	4a4b8 <__assert_fail@plt+0x37ec4>
   4a6cc:	b	4a0d8 <__assert_fail@plt+0x37ae4>
   4a6d0:	ldr	r2, [sp, #224]	; 0xe0
   4a6d4:	ldr	r2, [r2, #128]	; 0x80
   4a6d8:	tst	r2, #64	; 0x40
   4a6dc:	bne	4a478 <__assert_fail@plt+0x37e84>
   4a6e0:	b	4a0d8 <__assert_fail@plt+0x37ae4>
   4a6e4:	mov	r2, fp
   4a6e8:	add	r1, sp, #124	; 0x7c
   4a6ec:	ldr	r0, [sp, #120]	; 0x78
   4a6f0:	bl	3b81c <__assert_fail@plt+0x29228>
   4a6f4:	cmp	r0, #0
   4a6f8:	bne	4a9c0 <__assert_fail@plt+0x383cc>
   4a6fc:	cmp	sl, #0
   4a700:	beq	4a0c8 <__assert_fail@plt+0x37ad4>
   4a704:	ldr	r6, [sl]
   4a708:	ldr	r3, [sl, #4]
   4a70c:	add	r2, r6, #1
   4a710:	cmp	r2, r3
   4a714:	str	r2, [sl]
   4a718:	ldrne	r2, [sl, #8]
   4a71c:	beq	4a7f8 <__assert_fail@plt+0x38204>
   4a720:	add	r3, r6, r6, lsl #1
   4a724:	ldr	r0, [sp, #32]
   4a728:	add	r6, r2, r3, lsl #3
   4a72c:	str	r7, [r2, r3, lsl #3]
   4a730:	str	r4, [r6, #4]
   4a734:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4a738:	cmp	r0, #0
   4a73c:	str	r0, [r6, #8]
   4a740:	beq	4a778 <__assert_fail@plt+0x38184>
   4a744:	mov	r2, r9
   4a748:	mov	r1, r5
   4a74c:	bl	12024 <memcpy@plt>
   4a750:	ldr	r0, [r6, #8]
   4a754:	mov	r2, r9
   4a758:	mov	r1, r8
   4a75c:	add	r0, r0, r9
   4a760:	bl	12024 <memcpy@plt>
   4a764:	ldr	r1, [sp, #16]
   4a768:	add	r0, r6, #12
   4a76c:	bl	3b970 <__assert_fail@plt+0x2937c>
   4a770:	cmp	r0, #0
   4a774:	beq	4a0c8 <__assert_fail@plt+0x37ad4>
   4a778:	ldr	r0, [sp, #124]	; 0x7c
   4a77c:	ldr	r8, [sp, #12]
   4a780:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a784:	ldr	r0, [sp, #284]	; 0x11c
   4a788:	cmp	r0, r8
   4a78c:	beq	4a794 <__assert_fail@plt+0x381a0>
   4a790:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a794:	mov	r4, #0
   4a798:	mov	r3, #16
   4a79c:	cmp	sl, #0
   4a7a0:	str	r8, [sp, #284]	; 0x11c
   4a7a4:	str	r4, [sp, #276]	; 0x114
   4a7a8:	str	r3, [sp, #280]	; 0x118
   4a7ac:	beq	4a8dc <__assert_fail@plt+0x382e8>
   4a7b0:	ldr	r7, [sl]
   4a7b4:	ldr	r6, [sl, #8]
   4a7b8:	cmp	r7, r4
   4a7bc:	ble	4a7e4 <__assert_fail@plt+0x381f0>
   4a7c0:	mov	r5, r6
   4a7c4:	ldr	r0, [r5, #20]
   4a7c8:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a7cc:	add	r4, r4, #1
   4a7d0:	ldr	r0, [r5, #8]
   4a7d4:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a7d8:	cmp	r7, r4
   4a7dc:	add	r5, r5, #24
   4a7e0:	bne	4a7c4 <__assert_fail@plt+0x381d0>
   4a7e4:	mov	r0, r6
   4a7e8:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a7ec:	mov	r3, #12
   4a7f0:	str	r3, [sp, #48]	; 0x30
   4a7f4:	b	49c3c <__assert_fail@plt+0x37648>
   4a7f8:	lsl	r3, r2, #1
   4a7fc:	add	r2, r3, r2
   4a800:	ldr	r0, [sl, #8]
   4a804:	lsl	r1, r2, #4
   4a808:	str	r3, [sp, #24]
   4a80c:	bl	3aacc <__assert_fail@plt+0x284d8>
   4a810:	subs	r2, r0, #0
   4a814:	beq	4a778 <__assert_fail@plt+0x38184>
   4a818:	ldr	r3, [sp, #24]
   4a81c:	str	r2, [sl, #8]
   4a820:	str	r3, [sl, #4]
   4a824:	b	4a720 <__assert_fail@plt+0x3812c>
   4a828:	ldr	r3, [r1]
   4a82c:	ldr	r0, [sp, #56]	; 0x38
   4a830:	add	r3, r3, #1
   4a834:	cmp	r0, r3
   4a838:	ble	497c0 <__assert_fail@plt+0x371cc>
   4a83c:	ldr	r0, [r5, r3, lsl #3]
   4a840:	add	r2, r5, r3, lsl #3
   4a844:	cmp	r0, r7
   4a848:	blt	4a870 <__assert_fail@plt+0x3827c>
   4a84c:	ldrb	r1, [r1, #6]
   4a850:	tst	r1, #8
   4a854:	beq	4a864 <__assert_fail@plt+0x38270>
   4a858:	ldr	r3, [r8, r3, lsl #3]
   4a85c:	cmn	r3, #1
   4a860:	bne	4ab08 <__assert_fail@plt+0x38514>
   4a864:	str	r7, [r2, #4]
   4a868:	ldr	r2, [r5, #4]
   4a86c:	b	497c0 <__assert_fail@plt+0x371cc>
   4a870:	str	r7, [r2, #4]
   4a874:	mov	r1, r5
   4a878:	mov	r2, r9
   4a87c:	mov	r0, r8
   4a880:	bl	12024 <memcpy@plt>
   4a884:	ldr	r2, [r5, #4]
   4a888:	b	497c0 <__assert_fail@plt+0x371cc>
   4a88c:	ldr	sl, [sp, #16]
   4a890:	ldr	fp, [sp, #12]
   4a894:	mov	r0, sl
   4a898:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a89c:	mov	r0, fp
   4a8a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a8a4:	mov	r0, #0
   4a8a8:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a8ac:	mov	r7, #12
   4a8b0:	b	499d0 <__assert_fail@plt+0x373dc>
   4a8b4:	sub	r2, r2, r4
   4a8b8:	ldr	r1, [r5, #12]
   4a8bc:	lsl	r2, r2, #2
   4a8c0:	add	r0, r0, sl, lsl #2
   4a8c4:	add	r1, r1, r4, lsl #2
   4a8c8:	bl	12024 <memcpy@plt>
   4a8cc:	ldr	r2, [r5, #8]
   4a8d0:	sub	r4, r2, r4
   4a8d4:	add	sl, sl, r4
   4a8d8:	b	49ea8 <__assert_fail@plt+0x378b4>
   4a8dc:	mov	r3, #12
   4a8e0:	str	r3, [sp, #48]	; 0x30
   4a8e4:	b	49c3c <__assert_fail@plt+0x37648>
   4a8e8:	ldr	r3, [sp, #44]	; 0x2c
   4a8ec:	mov	r1, #16
   4a8f0:	str	r1, [sp, #280]	; 0x118
   4a8f4:	ldr	r3, [r3]
   4a8f8:	ldr	r1, [sp, #56]	; 0x38
   4a8fc:	mov	ip, r3
   4a900:	str	r3, [sp, #20]
   4a904:	add	r3, sp, #116	; 0x74
   4a908:	mov	r0, r3
   4a90c:	str	r3, [sp, #16]
   4a910:	mov	r3, #0
   4a914:	mov	sl, r3
   4a918:	add	r8, sp, #288	; 0x120
   4a91c:	mov	r2, #2
   4a920:	str	r3, [sp, #276]	; 0x114
   4a924:	str	r8, [sp, #284]	; 0x11c
   4a928:	str	r3, [sp, #128]	; 0x80
   4a92c:	ldr	fp, [ip, #72]	; 0x48
   4a930:	str	r3, [sp, #136]	; 0x88
   4a934:	str	r3, [sp, #116]	; 0x74
   4a938:	str	r2, [sp, #132]	; 0x84
   4a93c:	str	r3, [r0, #4]
   4a940:	str	r3, [r0, #8]
   4a944:	mov	r3, #8
   4a948:	mov	r2, r8
   4a94c:	add	r0, sp, #276	; 0x114
   4a950:	bl	4cd5c <__assert_fail@plt+0x3a768>
   4a954:	cmp	r0, #0
   4a958:	bne	49750 <__assert_fail@plt+0x3715c>
   4a95c:	ldr	r0, [sp, #284]	; 0x11c
   4a960:	cmp	r0, r8
   4a964:	beq	4a96c <__assert_fail@plt+0x38378>
   4a968:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a96c:	mov	r4, #0
   4a970:	mov	r3, #16
   4a974:	cmp	sl, #0
   4a978:	str	r8, [sp, #284]	; 0x11c
   4a97c:	str	r4, [sp, #276]	; 0x114
   4a980:	str	r3, [sp, #280]	; 0x118
   4a984:	beq	4a8dc <__assert_fail@plt+0x382e8>
   4a988:	ldr	r7, [sl]
   4a98c:	ldr	r6, [sl, #8]
   4a990:	cmp	r7, #0
   4a994:	ble	4a7e4 <__assert_fail@plt+0x381f0>
   4a998:	mov	r5, r6
   4a99c:	ldr	r0, [r5, #20]
   4a9a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a9a4:	add	r4, r4, #1
   4a9a8:	ldr	r0, [r5, #8]
   4a9ac:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a9b0:	cmp	r7, r4
   4a9b4:	add	r5, r5, #24
   4a9b8:	bne	4a99c <__assert_fail@plt+0x383a8>
   4a9bc:	b	4a7e4 <__assert_fail@plt+0x381f0>
   4a9c0:	mov	fp, r4
   4a9c4:	b	4a0c8 <__assert_fail@plt+0x37ad4>
   4a9c8:	ldr	r0, [sp, #124]	; 0x7c
   4a9cc:	ldr	r8, [sp, #12]
   4a9d0:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a9d4:	ldr	r0, [sp, #284]	; 0x11c
   4a9d8:	cmp	r0, r8
   4a9dc:	beq	4aa30 <__assert_fail@plt+0x3843c>
   4a9e0:	bl	376d0 <__assert_fail@plt+0x250dc>
   4a9e4:	ldr	r7, [sl]
   4a9e8:	mov	r3, #16
   4a9ec:	cmp	r7, #0
   4a9f0:	str	r4, [sp, #276]	; 0x114
   4a9f4:	ldrgt	r6, [sl, #8]
   4a9f8:	str	r8, [sp, #284]	; 0x11c
   4a9fc:	str	r3, [sp, #280]	; 0x118
   4aa00:	movgt	r5, r6
   4aa04:	ble	4aa40 <__assert_fail@plt+0x3844c>
   4aa08:	ldr	r0, [r5, #20]
   4aa0c:	bl	376d0 <__assert_fail@plt+0x250dc>
   4aa10:	add	r4, r4, #1
   4aa14:	ldr	r0, [r5, #8]
   4aa18:	bl	376d0 <__assert_fail@plt+0x250dc>
   4aa1c:	cmp	r4, r7
   4aa20:	add	r5, r5, #24
   4aa24:	bne	4aa08 <__assert_fail@plt+0x38414>
   4aa28:	mov	r0, r6
   4aa2c:	b	49c30 <__assert_fail@plt+0x3763c>
   4aa30:	mov	r3, #16
   4aa34:	str	r4, [sp, #276]	; 0x114
   4aa38:	str	r8, [sp, #284]	; 0x11c
   4aa3c:	str	r3, [sp, #280]	; 0x118
   4aa40:	ldr	r6, [sl, #8]
   4aa44:	b	4aa28 <__assert_fail@plt+0x38434>
   4aa48:	ldr	r0, [sp, #124]	; 0x7c
   4aa4c:	ldr	r8, [sp, #12]
   4aa50:	bl	376d0 <__assert_fail@plt+0x250dc>
   4aa54:	ldr	r0, [sp, #284]	; 0x11c
   4aa58:	cmp	r0, r8
   4aa5c:	bne	4a1a0 <__assert_fail@plt+0x37bac>
   4aa60:	b	4a1a4 <__assert_fail@plt+0x37bb0>
   4aa64:	ldr	r0, [sp, #124]	; 0x7c
   4aa68:	ldr	r8, [sp, #12]
   4aa6c:	bl	376d0 <__assert_fail@plt+0x250dc>
   4aa70:	ldr	r0, [sp, #284]	; 0x11c
   4aa74:	cmp	r0, r8
   4aa78:	beq	4aa80 <__assert_fail@plt+0x3848c>
   4aa7c:	bl	376d0 <__assert_fail@plt+0x250dc>
   4aa80:	mov	r4, #0
   4aa84:	mov	r3, #16
   4aa88:	cmp	sl, #0
   4aa8c:	str	r8, [sp, #284]	; 0x11c
   4aa90:	str	r4, [sp, #276]	; 0x114
   4aa94:	str	r3, [sp, #280]	; 0x118
   4aa98:	beq	4a1fc <__assert_fail@plt+0x37c08>
   4aa9c:	ldr	r6, [sl]
   4aaa0:	ldr	r7, [sl, #8]
   4aaa4:	cmp	r6, r4
   4aaa8:	ble	4a1f4 <__assert_fail@plt+0x37c00>
   4aaac:	mov	r5, r7
   4aab0:	ldr	r0, [r5, #20]
   4aab4:	bl	376d0 <__assert_fail@plt+0x250dc>
   4aab8:	add	r4, r4, #1
   4aabc:	ldr	r0, [r5, #8]
   4aac0:	bl	376d0 <__assert_fail@plt+0x250dc>
   4aac4:	cmp	r4, r6
   4aac8:	add	r5, r5, #24
   4aacc:	bne	4aab0 <__assert_fail@plt+0x384bc>
   4aad0:	b	4a1f4 <__assert_fail@plt+0x37c00>
   4aad4:	add	sl, sp, #128	; 0x80
   4aad8:	b	4a944 <__assert_fail@plt+0x38350>
   4aadc:	ldr	r3, [r0, fp, lsl #3]
   4aae0:	ldr	r1, [sp, #56]	; 0x38
   4aae4:	add	r3, r3, #1
   4aae8:	cmp	r1, r3
   4aaec:	ble	497c0 <__assert_fail@plt+0x371cc>
   4aaf0:	add	r2, r5, r3, lsl #3
   4aaf4:	str	r7, [r5, r3, lsl #3]
   4aaf8:	mvn	r3, #0
   4aafc:	str	r3, [r2, #4]
   4ab00:	ldr	r2, [r5, #4]
   4ab04:	b	497c0 <__assert_fail@plt+0x371cc>
   4ab08:	mov	r2, r9
   4ab0c:	mov	r1, r8
   4ab10:	mov	r0, r5
   4ab14:	bl	12024 <memcpy@plt>
   4ab18:	ldr	r2, [r5, #4]
   4ab1c:	b	497c0 <__assert_fail@plt+0x371cc>
   4ab20:	ldr	r3, [pc, #96]	; 4ab88 <__assert_fail@plt+0x38594>
   4ab24:	push	{r4, lr}
   4ab28:	mov	lr, r2
   4ab2c:	ldr	r3, [r3]
   4ab30:	ldrb	ip, [lr, #28]
   4ab34:	mov	r2, r1
   4ab38:	mov	r1, r0
   4ab3c:	lsr	r0, r3, #21
   4ab40:	and	r4, r0, #16
   4ab44:	and	r0, ip, #239	; 0xef
   4ab48:	orr	r0, r0, r4
   4ab4c:	orr	r0, r0, #128	; 0x80
   4ab50:	strb	r0, [lr, #28]
   4ab54:	mov	r0, lr
   4ab58:	bl	44f24 <__assert_fail@plt+0x32930>
   4ab5c:	subs	r3, r0, #0
   4ab60:	popeq	{r4, pc}
   4ab64:	ldr	r1, [pc, #32]	; 4ab8c <__assert_fail@plt+0x38598>
   4ab68:	mov	r2, #5
   4ab6c:	add	r3, r1, r3, lsl #2
   4ab70:	add	r1, r1, #32
   4ab74:	ldr	r3, [r3, #416]	; 0x1a0
   4ab78:	mov	r0, #0
   4ab7c:	add	r1, r1, r3
   4ab80:	pop	{r4, lr}
   4ab84:	b	120b4 <dcgettext@plt>
   4ab88:	andeq	r4, r6, r0, asr #29
   4ab8c:	andeq	r3, r5, r4, lsr #21
   4ab90:	ldr	r3, [pc, #12]	; 4aba4 <__assert_fail@plt+0x385b0>
   4ab94:	ldr	r2, [r3]
   4ab98:	str	r0, [r3]
   4ab9c:	mov	r0, r2
   4aba0:	bx	lr
   4aba4:	andeq	r4, r6, r0, asr #29
   4aba8:	push	{r4, r5, r6, lr}
   4abac:	mov	r2, #256	; 0x100
   4abb0:	ldr	r5, [r0]
   4abb4:	ldr	r6, [r0, #16]
   4abb8:	mov	r4, r0
   4abbc:	mov	r1, #0
   4abc0:	mov	r0, r6
   4abc4:	bl	12378 <memset@plt>
   4abc8:	ldr	r1, [r5, #36]	; 0x24
   4abcc:	mov	r3, r6
   4abd0:	add	r2, r1, #12
   4abd4:	mov	r0, r4
   4abd8:	add	r1, r1, #8
   4abdc:	bl	3d328 <__assert_fail@plt+0x2ad34>
   4abe0:	ldr	r0, [r5, #40]	; 0x28
   4abe4:	ldr	r3, [r5, #36]	; 0x24
   4abe8:	cmp	r3, r0
   4abec:	beq	4ac08 <__assert_fail@plt+0x38614>
   4abf0:	add	r2, r0, #12
   4abf4:	add	r1, r0, #8
   4abf8:	mov	r3, r6
   4abfc:	mov	r0, r4
   4ac00:	bl	3d328 <__assert_fail@plt+0x2ad34>
   4ac04:	ldr	r0, [r5, #36]	; 0x24
   4ac08:	ldr	r1, [r5, #44]	; 0x2c
   4ac0c:	cmp	r1, r0
   4ac10:	beq	4ac2c <__assert_fail@plt+0x38638>
   4ac14:	add	r2, r1, #12
   4ac18:	mov	r0, r4
   4ac1c:	mov	r3, r6
   4ac20:	add	r1, r1, #8
   4ac24:	bl	3d328 <__assert_fail@plt+0x2ad34>
   4ac28:	ldr	r0, [r5, #36]	; 0x24
   4ac2c:	ldr	r1, [r5, #48]	; 0x30
   4ac30:	cmp	r1, r0
   4ac34:	beq	4ac4c <__assert_fail@plt+0x38658>
   4ac38:	add	r2, r1, #12
   4ac3c:	mov	r3, r6
   4ac40:	add	r1, r1, #8
   4ac44:	mov	r0, r4
   4ac48:	bl	3d328 <__assert_fail@plt+0x2ad34>
   4ac4c:	ldrb	r3, [r4, #28]
   4ac50:	mov	r0, #0
   4ac54:	orr	r3, r3, #8
   4ac58:	strb	r3, [r4, #28]
   4ac5c:	pop	{r4, r5, r6, pc}
   4ac60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ac64:	cmp	r3, r2
   4ac68:	mov	r5, r3
   4ac6c:	sub	sp, sp, #52	; 0x34
   4ac70:	movle	r3, #0
   4ac74:	movgt	r3, #1
   4ac78:	orrs	r3, r3, r5, lsr #31
   4ac7c:	ldrb	r3, [sp, #100]	; 0x64
   4ac80:	ldr	ip, [sp, #88]	; 0x58
   4ac84:	ldr	sl, [r0]
   4ac88:	add	r8, r5, ip
   4ac8c:	ldr	r7, [sp, #96]	; 0x60
   4ac90:	str	r3, [sp, #32]
   4ac94:	bne	4af40 <__assert_fail@plt+0x3894c>
   4ac98:	cmp	r8, r2
   4ac9c:	bgt	4af38 <__assert_fail@plt+0x38944>
   4aca0:	cmp	ip, #0
   4aca4:	cmpge	r5, r8
   4aca8:	movgt	lr, #1
   4acac:	movle	lr, #0
   4acb0:	bgt	4af38 <__assert_fail@plt+0x38944>
   4acb4:	cmp	r8, #0
   4acb8:	blt	4afd4 <__assert_fail@plt+0x389e0>
   4acbc:	cmp	r5, r8
   4acc0:	movgt	lr, #0
   4acc4:	movle	lr, #1
   4acc8:	ands	r3, lr, ip, lsr #31
   4accc:	movne	r8, #0
   4acd0:	ldr	lr, [pc, #812]	; 4b004 <__assert_fail@plt+0x38a10>
   4acd4:	ldr	r4, [pc, #812]	; 4b008 <__assert_fail@plt+0x38a14>
   4acd8:	cmp	lr, #0
   4acdc:	mov	ip, #1
   4ace0:	moveq	ip, lr
   4ace4:	cmp	r4, #0
   4ace8:	mov	lr, #1
   4acec:	moveq	lr, r4
   4acf0:	str	r2, [sp, #40]	; 0x28
   4acf4:	orr	r2, ip, lr
   4acf8:	ands	r3, r2, #255	; 0xff
   4acfc:	str	r1, [sp, #44]	; 0x2c
   4ad00:	mov	r6, r0
   4ad04:	str	r3, [sp, #28]
   4ad08:	beq	4ad14 <__assert_fail@plt+0x38720>
   4ad0c:	add	r0, sl, #136	; 0x88
   4ad10:	bl	11fd0 <pthread_mutex_lock@plt>
   4ad14:	ldrb	r2, [r6, #28]
   4ad18:	cmp	r8, r5
   4ad1c:	lsr	fp, r2, #5
   4ad20:	and	r3, fp, #3
   4ad24:	str	r3, [sp, #36]	; 0x24
   4ad28:	bgt	4addc <__assert_fail@plt+0x387e8>
   4ad2c:	lsr	r1, r2, #4
   4ad30:	and	r1, r1, #1
   4ad34:	cmp	r7, #0
   4ad38:	orreq	r1, r1, #1
   4ad3c:	cmp	r1, #0
   4ad40:	bne	4afdc <__assert_fail@plt+0x389e8>
   4ad44:	and	r2, r2, #6
   4ad48:	cmp	r2, #4
   4ad4c:	ldrne	r0, [r6, #24]
   4ad50:	beq	4afa4 <__assert_fail@plt+0x389b0>
   4ad54:	add	fp, r0, #1
   4ad58:	mov	r4, fp
   4ad5c:	lsl	r0, fp, #3
   4ad60:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4ad64:	subs	r9, r0, #0
   4ad68:	beq	4af50 <__assert_fail@plt+0x3895c>
   4ad6c:	ldr	r3, [sp, #36]	; 0x24
   4ad70:	str	r9, [sp, #12]
   4ad74:	str	r3, [sp, #16]
   4ad78:	ldr	r3, [sp, #92]	; 0x5c
   4ad7c:	str	fp, [sp, #8]
   4ad80:	str	r3, [sp, #4]
   4ad84:	str	r8, [sp]
   4ad88:	ldr	r2, [sp, #40]	; 0x28
   4ad8c:	ldr	r1, [sp, #44]	; 0x2c
   4ad90:	mov	r3, r5
   4ad94:	mov	r0, r6
   4ad98:	bl	4881c <__assert_fail@plt+0x36228>
   4ad9c:	cmp	r0, #0
   4ada0:	beq	4ae00 <__assert_fail@plt+0x3880c>
   4ada4:	cmp	r0, #1
   4ada8:	mvneq	r5, #0
   4adac:	beq	4adb4 <__assert_fail@plt+0x387c0>
   4adb0:	mvn	r5, #1
   4adb4:	mov	r0, r9
   4adb8:	bl	376d0 <__assert_fail@plt+0x250dc>
   4adbc:	ldr	r3, [sp, #28]
   4adc0:	cmp	r3, #0
   4adc4:	beq	4add0 <__assert_fail@plt+0x387dc>
   4adc8:	add	r0, sl, #136	; 0x88
   4adcc:	bl	11ea4 <pthread_mutex_unlock@plt>
   4add0:	mov	r0, r5
   4add4:	add	sp, sp, #52	; 0x34
   4add8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4addc:	ldr	r1, [r6, #16]
   4ade0:	cmp	r1, #0
   4ade4:	beq	4ad2c <__assert_fail@plt+0x38738>
   4ade8:	tst	r2, #8
   4adec:	bne	4ad2c <__assert_fail@plt+0x38738>
   4adf0:	mov	r0, r6
   4adf4:	bl	4aba8 <__assert_fail@plt+0x385b4>
   4adf8:	ldrb	r2, [r6, #28]
   4adfc:	b	4ad2c <__assert_fail@plt+0x38738>
   4ae00:	cmp	r7, #0
   4ae04:	beq	4aeb0 <__assert_fail@plt+0x388bc>
   4ae08:	ldrb	r8, [r6, #28]
   4ae0c:	add	fp, r4, #1
   4ae10:	lsr	r8, r8, #1
   4ae14:	ands	r8, r8, #3
   4ae18:	beq	4af58 <__assert_fail@plt+0x38964>
   4ae1c:	cmp	r8, #1
   4ae20:	ldr	r2, [r7]
   4ae24:	movne	r8, #2
   4ae28:	beq	4aecc <__assert_fail@plt+0x388d8>
   4ae2c:	cmp	r4, #0
   4ae30:	ble	4aff0 <__assert_fail@plt+0x389fc>
   4ae34:	ldmib	r7, {r1, r2}
   4ae38:	mov	r3, r9
   4ae3c:	add	ip, r9, r4, lsl #3
   4ae40:	sub	r1, r1, #4
   4ae44:	sub	r2, r2, #4
   4ae48:	ldr	r0, [r3]
   4ae4c:	add	r3, r3, #8
   4ae50:	str	r0, [r1, #4]!
   4ae54:	ldr	r0, [r3, #-4]
   4ae58:	cmp	ip, r3
   4ae5c:	str	r0, [r2, #4]!
   4ae60:	bne	4ae48 <__assert_fail@plt+0x38854>
   4ae64:	ldr	r2, [r7]
   4ae68:	mov	r3, r4
   4ae6c:	cmp	r3, r2
   4ae70:	bcs	4ae98 <__assert_fail@plt+0x388a4>
   4ae74:	ldmib	r7, {r0, r1}
   4ae78:	mvn	r2, #0
   4ae7c:	str	r2, [r1, r3, lsl #2]
   4ae80:	str	r2, [r0, r3, lsl #2]
   4ae84:	ldr	r3, [r7]
   4ae88:	add	r4, r4, #1
   4ae8c:	cmp	r4, r3
   4ae90:	mov	r3, r4
   4ae94:	bcc	4ae7c <__assert_fail@plt+0x38888>
   4ae98:	ldrb	r3, [r6, #28]
   4ae9c:	bic	r3, r3, #6
   4aea0:	orr	r8, r3, r8, lsl #1
   4aea4:	tst	r8, #6
   4aea8:	strb	r8, [r6, #28]
   4aeac:	beq	4adb0 <__assert_fail@plt+0x387bc>
   4aeb0:	ldr	r3, [sp, #32]
   4aeb4:	cmp	r3, #0
   4aeb8:	ldrne	r3, [r9, #4]
   4aebc:	subne	r5, r3, r5
   4aec0:	bne	4adb4 <__assert_fail@plt+0x387c0>
   4aec4:	ldr	r5, [r9]
   4aec8:	b	4adb4 <__assert_fail@plt+0x387c0>
   4aecc:	cmp	r2, fp
   4aed0:	bcs	4ae2c <__assert_fail@plt+0x38838>
   4aed4:	lsl	r2, fp, #2
   4aed8:	mov	r1, r2
   4aedc:	ldr	r0, [r7, #4]
   4aee0:	str	r2, [sp, #40]	; 0x28
   4aee4:	bl	3aacc <__assert_fail@plt+0x284d8>
   4aee8:	subs	r3, r0, #0
   4aeec:	str	r3, [sp, #36]	; 0x24
   4aef0:	beq	4affc <__assert_fail@plt+0x38a08>
   4aef4:	ldr	r2, [sp, #40]	; 0x28
   4aef8:	ldr	r0, [r7, #8]
   4aefc:	mov	r1, r2
   4af00:	bl	3aacc <__assert_fail@plt+0x284d8>
   4af04:	ldr	r3, [sp, #36]	; 0x24
   4af08:	subs	r2, r0, #0
   4af0c:	strne	r2, [r7, #8]
   4af10:	strne	r3, [r7, #4]
   4af14:	strne	fp, [r7]
   4af18:	movne	r2, fp
   4af1c:	bne	4ae2c <__assert_fail@plt+0x38838>
   4af20:	mov	r0, r3
   4af24:	str	r2, [sp, #36]	; 0x24
   4af28:	bl	376d0 <__assert_fail@plt+0x250dc>
   4af2c:	ldr	r2, [sp, #36]	; 0x24
   4af30:	mov	r8, r2
   4af34:	b	4ae98 <__assert_fail@plt+0x388a4>
   4af38:	mov	r8, r2
   4af3c:	b	4acd0 <__assert_fail@plt+0x386dc>
   4af40:	mvn	r5, #0
   4af44:	mov	r0, r5
   4af48:	add	sp, sp, #52	; 0x34
   4af4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4af50:	mvn	r5, #1
   4af54:	b	4adbc <__assert_fail@plt+0x387c8>
   4af58:	lsl	r8, fp, #2
   4af5c:	mov	r0, r8
   4af60:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4af64:	cmp	r0, #0
   4af68:	str	r0, [r7, #4]
   4af6c:	beq	4affc <__assert_fail@plt+0x38a08>
   4af70:	mov	r0, r8
   4af74:	str	fp, [sp, #36]	; 0x24
   4af78:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4af7c:	ldr	r2, [sp, #36]	; 0x24
   4af80:	cmp	r0, #0
   4af84:	mov	r8, r0
   4af88:	str	r0, [r7, #8]
   4af8c:	strne	r2, [r7]
   4af90:	movne	r8, #1
   4af94:	bne	4ae2c <__assert_fail@plt+0x38838>
   4af98:	ldr	r0, [r7, #4]
   4af9c:	bl	376d0 <__assert_fail@plt+0x250dc>
   4afa0:	b	4ae98 <__assert_fail@plt+0x388a4>
   4afa4:	ldr	fp, [r7]
   4afa8:	ldr	r0, [r6, #24]
   4afac:	cmp	fp, r0
   4afb0:	bhi	4ad54 <__assert_fail@plt+0x38760>
   4afb4:	cmp	fp, #0
   4afb8:	mov	r4, fp
   4afbc:	bgt	4ad5c <__assert_fail@plt+0x38768>
   4afc0:	mov	fp, #1
   4afc4:	mov	r7, r1
   4afc8:	mov	r4, fp
   4afcc:	mov	r0, #8
   4afd0:	b	4ad60 <__assert_fail@plt+0x3876c>
   4afd4:	mov	r8, lr
   4afd8:	b	4acd0 <__assert_fail@plt+0x386dc>
   4afdc:	mov	fp, #1
   4afe0:	mov	r4, fp
   4afe4:	mov	r0, #8
   4afe8:	mov	r7, #0
   4afec:	b	4ad60 <__assert_fail@plt+0x3876c>
   4aff0:	mov	r4, #0
   4aff4:	mov	r3, r4
   4aff8:	b	4ae6c <__assert_fail@plt+0x38878>
   4affc:	mov	r8, #0
   4b000:	b	4ae98 <__assert_fail@plt+0x388a4>
   4b004:	strdeq	r1, [r1], -r4
   4b008:	muleq	r1, ip, r3
   4b00c:	push	{r4, r5, r6, r7, r8, lr}
   4b010:	mov	r5, r2
   4b014:	and	r2, r2, #1
   4b018:	cmp	r2, #0
   4b01c:	ldr	ip, [pc, #404]	; 4b1b8 <__assert_fail@plt+0x38bc4>
   4b020:	mov	r2, #0
   4b024:	ldr	r3, [pc, #400]	; 4b1bc <__assert_fail@plt+0x38bc8>
   4b028:	mov	r4, r0
   4b02c:	str	r2, [r0]
   4b030:	str	r2, [r0, #4]
   4b034:	str	r2, [r0, #8]
   4b038:	sub	sp, sp, #8
   4b03c:	mov	r0, #256	; 0x100
   4b040:	ldr	r8, [pc, #376]	; 4b1c0 <__assert_fail@plt+0x38bcc>
   4b044:	ldr	r6, [pc, #376]	; 4b1c4 <__assert_fail@plt+0x38bd0>
   4b048:	moveq	r8, ip
   4b04c:	movne	r6, r3
   4b050:	mov	r7, r1
   4b054:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4b058:	cmp	r0, #0
   4b05c:	str	r0, [r4, #16]
   4b060:	beq	4b1ac <__assert_fail@plt+0x38bb8>
   4b064:	tst	r5, #2
   4b068:	movne	r6, r8
   4b06c:	ands	r2, r5, #4
   4b070:	moveq	r3, r2
   4b074:	ldrb	r2, [r4, #28]
   4b078:	movne	r3, #1
   4b07c:	lsl	r5, r5, #1
   4b080:	bic	r2, r2, #128	; 0x80
   4b084:	orr	r2, r2, r3, lsl #7
   4b088:	bic	r2, r2, #16
   4b08c:	and	r5, r5, #16
   4b090:	orr	r5, r5, r2
   4b094:	mov	r3, #0
   4b098:	bicne	r6, r6, #64	; 0x40
   4b09c:	str	r3, [r4, #20]
   4b0a0:	strb	r5, [r4, #28]
   4b0a4:	mov	r0, r7
   4b0a8:	orrne	r6, r6, #256	; 0x100
   4b0ac:	bl	12300 <strlen@plt>
   4b0b0:	mov	r1, r7
   4b0b4:	mov	r3, r6
   4b0b8:	mov	r2, r0
   4b0bc:	mov	r0, r4
   4b0c0:	bl	44f24 <__assert_fail@plt+0x32930>
   4b0c4:	cmp	r0, #16
   4b0c8:	mov	r1, r0
   4b0cc:	beq	4b188 <__assert_fail@plt+0x38b94>
   4b0d0:	cmp	r0, #0
   4b0d4:	bne	4b18c <__assert_fail@plt+0x38b98>
   4b0d8:	ldr	r5, [r4]
   4b0dc:	ldr	r6, [r4, #16]
   4b0e0:	mov	r2, #256	; 0x100
   4b0e4:	mov	r0, r6
   4b0e8:	bl	12378 <memset@plt>
   4b0ec:	ldr	r1, [r5, #36]	; 0x24
   4b0f0:	mov	r3, r6
   4b0f4:	add	r2, r1, #12
   4b0f8:	mov	r0, r4
   4b0fc:	add	r1, r1, #8
   4b100:	bl	3d328 <__assert_fail@plt+0x2ad34>
   4b104:	ldr	r1, [r5, #40]	; 0x28
   4b108:	ldr	r3, [r5, #36]	; 0x24
   4b10c:	cmp	r3, r1
   4b110:	beq	4b12c <__assert_fail@plt+0x38b38>
   4b114:	add	r2, r1, #12
   4b118:	mov	r3, r6
   4b11c:	add	r1, r1, #8
   4b120:	mov	r0, r4
   4b124:	bl	3d328 <__assert_fail@plt+0x2ad34>
   4b128:	ldr	r1, [r5, #36]	; 0x24
   4b12c:	ldr	r0, [r5, #44]	; 0x2c
   4b130:	cmp	r1, r0
   4b134:	beq	4b150 <__assert_fail@plt+0x38b5c>
   4b138:	add	r2, r0, #12
   4b13c:	add	r1, r0, #8
   4b140:	mov	r3, r6
   4b144:	mov	r0, r4
   4b148:	bl	3d328 <__assert_fail@plt+0x2ad34>
   4b14c:	ldr	r0, [r5, #36]	; 0x24
   4b150:	ldr	r1, [r5, #48]	; 0x30
   4b154:	cmp	r1, r0
   4b158:	beq	4b170 <__assert_fail@plt+0x38b7c>
   4b15c:	add	r2, r1, #12
   4b160:	mov	r3, r6
   4b164:	add	r1, r1, #8
   4b168:	mov	r0, r4
   4b16c:	bl	3d328 <__assert_fail@plt+0x2ad34>
   4b170:	ldrb	r3, [r4, #28]
   4b174:	mov	r0, #0
   4b178:	orr	r3, r3, #8
   4b17c:	strb	r3, [r4, #28]
   4b180:	add	sp, sp, #8
   4b184:	pop	{r4, r5, r6, r7, r8, pc}
   4b188:	mov	r1, #8
   4b18c:	ldr	r0, [r4, #16]
   4b190:	str	r1, [sp, #4]
   4b194:	bl	376d0 <__assert_fail@plt+0x250dc>
   4b198:	ldr	r1, [sp, #4]
   4b19c:	mov	r3, #0
   4b1a0:	mov	r0, r1
   4b1a4:	str	r3, [r4, #16]
   4b1a8:	b	4b180 <__assert_fail@plt+0x38b8c>
   4b1ac:	mov	r0, #12
   4b1b0:	add	sp, sp, #8
   4b1b4:	pop	{r4, r5, r6, r7, r8, pc}
   4b1b8:	smlalbteq	r0, r1, r6, r2
   4b1bc:	strdeq	fp, [r3], -ip
   4b1c0:	strdeq	fp, [r3], #-44	; 0xffffffd4
   4b1c4:	smlabteq	r1, r6, r2, r0
   4b1c8:	cmp	r0, #16
   4b1cc:	push	{r4, r5, r6, r7, r8, lr}
   4b1d0:	bhi	4b238 <__assert_fail@plt+0x38c44>
   4b1d4:	ldr	r1, [pc, #96]	; 4b23c <__assert_fail@plt+0x38c48>
   4b1d8:	mov	r4, r3
   4b1dc:	add	r0, r1, r0, lsl #2
   4b1e0:	add	r1, r1, #32
   4b1e4:	ldr	r3, [r0, #416]	; 0x1a0
   4b1e8:	mov	r6, r2
   4b1ec:	add	r1, r1, r3
   4b1f0:	mov	r2, #5
   4b1f4:	mov	r0, #0
   4b1f8:	bl	120b4 <dcgettext@plt>
   4b1fc:	mov	r7, r0
   4b200:	bl	12300 <strlen@plt>
   4b204:	cmp	r4, #0
   4b208:	add	r5, r0, #1
   4b20c:	beq	4b230 <__assert_fail@plt+0x38c3c>
   4b210:	cmp	r5, r4
   4b214:	subhi	r2, r4, #1
   4b218:	movhi	r3, #0
   4b21c:	strbhi	r3, [r6, r2]
   4b220:	movls	r2, r5
   4b224:	mov	r1, r7
   4b228:	mov	r0, r6
   4b22c:	bl	12024 <memcpy@plt>
   4b230:	mov	r0, r5
   4b234:	pop	{r4, r5, r6, r7, r8, pc}
   4b238:	bl	125a0 <abort@plt>
   4b23c:	andeq	r3, r5, r4, lsr #21
   4b240:	push	{r4, r5, r6, lr}
   4b244:	mov	r4, r0
   4b248:	ldr	r5, [r0]
   4b24c:	cmp	r5, #0
   4b250:	beq	4b290 <__assert_fail@plt+0x38c9c>
   4b254:	ldr	r2, [pc, #92]	; 4b2b8 <__assert_fail@plt+0x38cc4>
   4b258:	ldr	r1, [pc, #92]	; 4b2bc <__assert_fail@plt+0x38cc8>
   4b25c:	cmp	r2, #0
   4b260:	mov	r3, #1
   4b264:	moveq	r3, r2
   4b268:	cmp	r1, #0
   4b26c:	mov	r2, #1
   4b270:	moveq	r2, r1
   4b274:	orr	r3, r3, r2
   4b278:	tst	r3, #1
   4b27c:	beq	4b288 <__assert_fail@plt+0x38c94>
   4b280:	add	r0, r5, #136	; 0x88
   4b284:	bl	11f70 <pthread_mutex_destroy@plt>
   4b288:	mov	r0, r5
   4b28c:	bl	3e53c <__assert_fail@plt+0x2bf48>
   4b290:	mov	r5, #0
   4b294:	ldr	r0, [r4, #16]
   4b298:	str	r5, [r4]
   4b29c:	str	r5, [r4, #4]
   4b2a0:	bl	376d0 <__assert_fail@plt+0x250dc>
   4b2a4:	str	r5, [r4, #16]
   4b2a8:	ldr	r0, [r4, #20]
   4b2ac:	bl	376d0 <__assert_fail@plt+0x250dc>
   4b2b0:	str	r5, [r4, #20]
   4b2b4:	pop	{r4, r5, r6, pc}
   4b2b8:	strdeq	r1, [r1], -r4
   4b2bc:	muleq	r1, ip, r3
   4b2c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b2c4:	sub	sp, sp, #36	; 0x24
   4b2c8:	ldr	r4, [sp, #72]	; 0x48
   4b2cc:	bics	ip, r4, #7
   4b2d0:	movne	r0, #2
   4b2d4:	beq	4b2e0 <__assert_fail@plt+0x38cec>
   4b2d8:	add	sp, sp, #36	; 0x24
   4b2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b2e0:	ands	fp, r4, #4
   4b2e4:	mov	r8, r3
   4b2e8:	str	r2, [sp, #28]
   4b2ec:	mov	r7, r1
   4b2f0:	mov	r5, r0
   4b2f4:	bne	4b398 <__assert_fail@plt+0x38da4>
   4b2f8:	mov	r0, r1
   4b2fc:	bl	12300 <strlen@plt>
   4b300:	mov	r9, r0
   4b304:	ldr	r3, [pc, #204]	; 4b3d8 <__assert_fail@plt+0x38de4>
   4b308:	ldr	r1, [pc, #204]	; 4b3dc <__assert_fail@plt+0x38de8>
   4b30c:	cmp	r3, #0
   4b310:	mov	r6, #1
   4b314:	moveq	r6, r3
   4b318:	cmp	r1, #0
   4b31c:	mov	r3, #1
   4b320:	moveq	r3, r1
   4b324:	orr	r6, r6, r3
   4b328:	ands	r6, r6, #255	; 0xff
   4b32c:	ldr	sl, [r5]
   4b330:	beq	4b33c <__assert_fail@plt+0x38d48>
   4b334:	add	r0, sl, #136	; 0x88
   4b338:	bl	11fd0 <pthread_mutex_lock@plt>
   4b33c:	ldrb	r3, [r5, #28]
   4b340:	tst	r3, #16
   4b344:	beq	4b3a4 <__assert_fail@plt+0x38db0>
   4b348:	mov	ip, #0
   4b34c:	str	r4, [sp, #16]
   4b350:	str	r9, [sp, #4]
   4b354:	str	r9, [sp]
   4b358:	mov	r3, fp
   4b35c:	mov	r2, r9
   4b360:	mov	r1, r7
   4b364:	mov	r0, r5
   4b368:	str	ip, [sp, #12]
   4b36c:	str	ip, [sp, #8]
   4b370:	bl	4881c <__assert_fail@plt+0x36228>
   4b374:	mov	r4, r0
   4b378:	cmp	r6, #0
   4b37c:	beq	4b388 <__assert_fail@plt+0x38d94>
   4b380:	add	r0, sl, #136	; 0x88
   4b384:	bl	11ea4 <pthread_mutex_unlock@plt>
   4b388:	adds	r0, r4, #0
   4b38c:	movne	r0, #1
   4b390:	add	sp, sp, #36	; 0x24
   4b394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b398:	ldr	fp, [r3]
   4b39c:	ldr	r9, [r3, #4]
   4b3a0:	b	4b304 <__assert_fail@plt+0x38d10>
   4b3a4:	ldr	r3, [sp, #28]
   4b3a8:	str	r4, [sp, #16]
   4b3ac:	str	r3, [sp, #8]
   4b3b0:	str	r8, [sp, #12]
   4b3b4:	str	r9, [sp, #4]
   4b3b8:	str	r9, [sp]
   4b3bc:	mov	r3, fp
   4b3c0:	mov	r2, r9
   4b3c4:	mov	r1, r7
   4b3c8:	mov	r0, r5
   4b3cc:	bl	4881c <__assert_fail@plt+0x36228>
   4b3d0:	mov	r4, r0
   4b3d4:	b	4b378 <__assert_fail@plt+0x38d84>
   4b3d8:	muleq	r1, ip, r3
   4b3dc:	strdeq	r1, [r1], -r4
   4b3e0:	push	{r4, lr}
   4b3e4:	sub	sp, sp, #16
   4b3e8:	mov	lr, #1
   4b3ec:	ldr	r4, [sp, #24]
   4b3f0:	mov	ip, #0
   4b3f4:	str	ip, [sp]
   4b3f8:	stmib	sp, {r2, r4, lr}
   4b3fc:	bl	4ac60 <__assert_fail@plt+0x3866c>
   4b400:	add	sp, sp, #16
   4b404:	pop	{r4, pc}
   4b408:	push	{r4, lr}
   4b40c:	sub	sp, sp, #16
   4b410:	mov	ip, #0
   4b414:	ldr	r4, [sp, #24]
   4b418:	ldr	lr, [sp, #28]
   4b41c:	str	r2, [sp, #4]
   4b420:	str	r4, [sp]
   4b424:	str	lr, [sp, #8]
   4b428:	str	ip, [sp, #12]
   4b42c:	bl	4ac60 <__assert_fail@plt+0x3866c>
   4b430:	add	sp, sp, #16
   4b434:	pop	{r4, pc}
   4b438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b43c:	sub	sp, sp, #20
   4b440:	mov	r5, r2
   4b444:	ldr	r6, [sp, #68]	; 0x44
   4b448:	ldr	r4, [sp, #56]	; 0x38
   4b44c:	orr	r2, r2, r6
   4b450:	orrs	r2, r2, r4
   4b454:	bmi	4b47c <__assert_fail@plt+0x38e88>
   4b458:	cmp	r4, #0
   4b45c:	mov	sl, r0
   4b460:	mov	fp, r1
   4b464:	mov	r7, r3
   4b468:	blt	4b48c <__assert_fail@plt+0x38e98>
   4b46c:	mvn	r3, #-2147483648	; 0x80000000
   4b470:	sub	r3, r3, r4
   4b474:	cmp	r5, r3
   4b478:	ble	4b48c <__assert_fail@plt+0x38e98>
   4b47c:	mvn	r4, #1
   4b480:	mov	r0, r4
   4b484:	add	sp, sp, #20
   4b488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b48c:	cmp	r4, #0
   4b490:	add	r9, r5, r4
   4b494:	ble	4b520 <__assert_fail@plt+0x38f2c>
   4b498:	cmp	r5, #0
   4b49c:	beq	4b518 <__assert_fail@plt+0x38f24>
   4b4a0:	mov	r0, r9
   4b4a4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4b4a8:	subs	r8, r0, #0
   4b4ac:	beq	4b47c <__assert_fail@plt+0x38e88>
   4b4b0:	mov	r1, fp
   4b4b4:	mov	r2, r5
   4b4b8:	bl	12024 <memcpy@plt>
   4b4bc:	mov	r1, r7
   4b4c0:	mov	r2, r4
   4b4c4:	add	r0, r8, r5
   4b4c8:	bl	12024 <memcpy@plt>
   4b4cc:	mov	r7, r8
   4b4d0:	ldr	r2, [sp, #64]	; 0x40
   4b4d4:	mov	ip, #1
   4b4d8:	mov	r3, #0
   4b4dc:	str	r2, [sp, #8]
   4b4e0:	mov	r1, r7
   4b4e4:	mov	r2, r9
   4b4e8:	str	ip, [sp, #12]
   4b4ec:	str	r3, [sp]
   4b4f0:	str	r6, [sp, #4]
   4b4f4:	ldr	r3, [sp, #60]	; 0x3c
   4b4f8:	mov	r0, sl
   4b4fc:	bl	4ac60 <__assert_fail@plt+0x3866c>
   4b500:	mov	r4, r0
   4b504:	mov	r0, r8
   4b508:	bl	376d0 <__assert_fail@plt+0x250dc>
   4b50c:	mov	r0, r4
   4b510:	add	sp, sp, #20
   4b514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b518:	mov	r8, r5
   4b51c:	b	4b4d0 <__assert_fail@plt+0x38edc>
   4b520:	mov	r7, fp
   4b524:	mov	r8, #0
   4b528:	b	4b4d0 <__assert_fail@plt+0x38edc>
   4b52c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b530:	sub	sp, sp, #20
   4b534:	mov	r5, r2
   4b538:	ldr	r6, [sp, #72]	; 0x48
   4b53c:	ldr	r4, [sp, #56]	; 0x38
   4b540:	orr	r2, r2, r6
   4b544:	orrs	r2, r2, r4
   4b548:	bmi	4b570 <__assert_fail@plt+0x38f7c>
   4b54c:	cmp	r4, #0
   4b550:	mov	sl, r0
   4b554:	mov	fp, r1
   4b558:	mov	r7, r3
   4b55c:	blt	4b580 <__assert_fail@plt+0x38f8c>
   4b560:	mvn	r3, #-2147483648	; 0x80000000
   4b564:	sub	r3, r3, r4
   4b568:	cmp	r5, r3
   4b56c:	ble	4b580 <__assert_fail@plt+0x38f8c>
   4b570:	mvn	r4, #1
   4b574:	mov	r0, r4
   4b578:	add	sp, sp, #20
   4b57c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b580:	cmp	r4, #0
   4b584:	add	r9, r5, r4
   4b588:	ble	4b614 <__assert_fail@plt+0x39020>
   4b58c:	cmp	r5, #0
   4b590:	beq	4b60c <__assert_fail@plt+0x39018>
   4b594:	mov	r0, r9
   4b598:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4b59c:	subs	r8, r0, #0
   4b5a0:	beq	4b570 <__assert_fail@plt+0x38f7c>
   4b5a4:	mov	r1, fp
   4b5a8:	mov	r2, r5
   4b5ac:	bl	12024 <memcpy@plt>
   4b5b0:	mov	r1, r7
   4b5b4:	mov	r2, r4
   4b5b8:	add	r0, r8, r5
   4b5bc:	bl	12024 <memcpy@plt>
   4b5c0:	mov	r7, r8
   4b5c4:	ldr	r2, [sp, #68]	; 0x44
   4b5c8:	mov	r3, #0
   4b5cc:	str	r2, [sp, #8]
   4b5d0:	ldr	r2, [sp, #64]	; 0x40
   4b5d4:	mov	r1, r7
   4b5d8:	str	r2, [sp]
   4b5dc:	str	r3, [sp, #12]
   4b5e0:	mov	r2, r9
   4b5e4:	ldr	r3, [sp, #60]	; 0x3c
   4b5e8:	str	r6, [sp, #4]
   4b5ec:	mov	r0, sl
   4b5f0:	bl	4ac60 <__assert_fail@plt+0x3866c>
   4b5f4:	mov	r4, r0
   4b5f8:	mov	r0, r8
   4b5fc:	bl	376d0 <__assert_fail@plt+0x250dc>
   4b600:	mov	r0, r4
   4b604:	add	sp, sp, #20
   4b608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b60c:	mov	r8, r5
   4b610:	b	4b5c4 <__assert_fail@plt+0x38fd0>
   4b614:	mov	r7, fp
   4b618:	mov	r8, #0
   4b61c:	b	4b5c4 <__assert_fail@plt+0x38fd0>
   4b620:	cmp	r2, #0
   4b624:	bne	4b644 <__assert_fail@plt+0x39050>
   4b628:	ldrb	r3, [r0, #28]
   4b62c:	bic	r3, r3, #6
   4b630:	strb	r3, [r0, #28]
   4b634:	str	r2, [r1]
   4b638:	str	r2, [r1, #8]
   4b63c:	str	r2, [r1, #4]
   4b640:	bx	lr
   4b644:	ldrb	ip, [r0, #28]
   4b648:	bic	ip, ip, #4
   4b64c:	orr	ip, ip, #2
   4b650:	strb	ip, [r0, #28]
   4b654:	stm	r1, {r2, r3}
   4b658:	ldr	r3, [sp]
   4b65c:	str	r3, [r1, #8]
   4b660:	bx	lr
   4b664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b668:	cmp	r3, #2
   4b66c:	sub	sp, sp, #1040	; 0x410
   4b670:	sub	sp, sp, #12
   4b674:	mov	r4, r3
   4b678:	mov	r5, r0
   4b67c:	mov	fp, r1
   4b680:	mov	r6, r2
   4b684:	bhi	4b9e0 <__assert_fail@plt+0x393ec>
   4b688:	sub	r3, r3, #1
   4b68c:	mov	r7, r3
   4b690:	mov	r3, #1
   4b694:	str	r3, [sp]
   4b698:	add	r2, sp, #1040	; 0x410
   4b69c:	add	r3, sp, #20
   4b6a0:	add	r2, r2, #4
   4b6a4:	str	r4, [r3, #4]!
   4b6a8:	cmp	r2, r3
   4b6ac:	bne	4b6a4 <__assert_fail@plt+0x390b0>
   4b6b0:	cmp	r4, #0
   4b6b4:	subne	r3, r4, #1
   4b6b8:	subne	r1, r6, #1
   4b6bc:	beq	4b6dc <__assert_fail@plt+0x390e8>
   4b6c0:	ldrb	r2, [r1, #1]!
   4b6c4:	add	r0, sp, #1040	; 0x410
   4b6c8:	add	r0, r0, #8
   4b6cc:	add	r2, r0, r2, lsl #2
   4b6d0:	str	r3, [r2, #-1024]	; 0xfffffc00
   4b6d4:	subs	r3, r3, #1
   4b6d8:	bcs	4b6c0 <__assert_fail@plt+0x390cc>
   4b6dc:	ldr	r8, [sp]
   4b6e0:	mov	r2, r7
   4b6e4:	add	r1, r6, r8
   4b6e8:	mov	r0, r6
   4b6ec:	bl	12084 <memcmp@plt>
   4b6f0:	subs	sl, r0, #0
   4b6f4:	bne	4b874 <__assert_fail@plt+0x39280>
   4b6f8:	sub	r2, r7, #1
   4b6fc:	str	r2, [sp, #4]
   4b700:	add	r2, r6, r2
   4b704:	mov	r3, r7
   4b708:	str	r2, [sp, #16]
   4b70c:	sub	r2, r4, r8
   4b710:	str	r2, [sp, #12]
   4b714:	rsb	r2, r3, #1
   4b718:	str	r6, [sp, #8]
   4b71c:	mov	r9, sl
   4b720:	sub	r7, r4, #1
   4b724:	str	r2, [sp, #20]
   4b728:	mov	r0, fp
   4b72c:	mov	r6, r3
   4b730:	b	4b750 <__assert_fail@plt+0x3915c>
   4b734:	ldr	r3, [sp]
   4b738:	cmp	sl, #0
   4b73c:	cmpne	ip, r3
   4b740:	mov	sl, #0
   4b744:	ldrcc	ip, [sp, #12]
   4b748:	add	r9, r9, ip
   4b74c:	mov	r0, r8
   4b750:	add	r8, r9, r4
   4b754:	sub	r2, r8, r0
   4b758:	mov	r1, #0
   4b75c:	add	r0, r5, r0
   4b760:	bl	123d8 <memchr@plt>
   4b764:	cmp	r8, #0
   4b768:	clz	r0, r0
   4b76c:	lsr	r0, r0, #5
   4b770:	moveq	r0, #0
   4b774:	cmp	r0, #0
   4b778:	beq	4b9b4 <__assert_fail@plt+0x393c0>
   4b77c:	add	r3, r5, r8
   4b780:	add	r2, sp, #1040	; 0x410
   4b784:	ldrb	r3, [r3, #-1]
   4b788:	add	r2, r2, #8
   4b78c:	add	r3, r2, r3, lsl #2
   4b790:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   4b794:	cmp	ip, #0
   4b798:	bne	4b734 <__assert_fail@plt+0x39140>
   4b79c:	cmp	sl, r6
   4b7a0:	movcs	r3, sl
   4b7a4:	movcc	r3, r6
   4b7a8:	cmp	r7, r3
   4b7ac:	bls	4b7f0 <__assert_fail@plt+0x391fc>
   4b7b0:	ldr	r1, [sp, #8]
   4b7b4:	add	r2, r9, r3
   4b7b8:	ldrb	lr, [r1, r3]
   4b7bc:	ldrb	r0, [r5, r2]
   4b7c0:	add	r1, r1, r3
   4b7c4:	add	r2, r5, r2
   4b7c8:	cmp	lr, r0
   4b7cc:	beq	4b7e4 <__assert_fail@plt+0x391f0>
   4b7d0:	b	4b860 <__assert_fail@plt+0x3926c>
   4b7d4:	ldrb	lr, [r1, #1]!
   4b7d8:	ldrb	r0, [r2, #1]!
   4b7dc:	cmp	lr, r0
   4b7e0:	bne	4b860 <__assert_fail@plt+0x3926c>
   4b7e4:	add	r3, r3, #1
   4b7e8:	cmp	r7, r3
   4b7ec:	bhi	4b7d4 <__assert_fail@plt+0x391e0>
   4b7f0:	cmp	sl, r6
   4b7f4:	ldr	r1, [sp, #4]
   4b7f8:	bcs	4bb08 <__assert_fail@plt+0x39514>
   4b7fc:	ldr	ip, [sp, #16]
   4b800:	add	r2, r9, r1
   4b804:	ldrb	r3, [ip]
   4b808:	ldrb	r0, [r5, r2]
   4b80c:	add	r2, r5, r2
   4b810:	cmp	r0, r3
   4b814:	bne	4bb08 <__assert_fail@plt+0x39514>
   4b818:	mov	r0, ip
   4b81c:	sub	fp, sl, #1
   4b820:	b	4b838 <__assert_fail@plt+0x39244>
   4b824:	ldrb	lr, [r0, #-1]!
   4b828:	ldrb	ip, [r2, #-1]!
   4b82c:	cmp	lr, ip
   4b830:	bne	4b844 <__assert_fail@plt+0x39250>
   4b834:	mov	r1, r3
   4b838:	sub	r3, r1, #1
   4b83c:	cmp	r3, fp
   4b840:	bne	4b824 <__assert_fail@plt+0x39230>
   4b844:	add	sl, sl, #1
   4b848:	cmp	sl, r1
   4b84c:	bhi	4b9b0 <__assert_fail@plt+0x393bc>
   4b850:	ldr	r3, [sp]
   4b854:	ldr	sl, [sp, #12]
   4b858:	add	r9, r9, r3
   4b85c:	b	4b74c <__assert_fail@plt+0x39158>
   4b860:	ldr	r2, [sp, #20]
   4b864:	mov	sl, ip
   4b868:	add	r9, r2, r9
   4b86c:	add	r9, r3, r9
   4b870:	b	4b74c <__assert_fail@plt+0x39158>
   4b874:	sub	r3, r4, r7
   4b878:	cmp	r3, r7
   4b87c:	movcc	r3, r7
   4b880:	sub	r1, r7, #1
   4b884:	add	r3, r3, #1
   4b888:	mov	r2, r7
   4b88c:	mov	r9, #0
   4b890:	str	r3, [sp, #8]
   4b894:	add	r3, r6, r1
   4b898:	str	r3, [sp, #12]
   4b89c:	sub	r7, r4, #1
   4b8a0:	add	r3, r6, r2
   4b8a4:	mov	r0, fp
   4b8a8:	mov	sl, r9
   4b8ac:	mov	fp, r6
   4b8b0:	mov	r6, r4
   4b8b4:	mov	r4, r2
   4b8b8:	str	r3, [sp]
   4b8bc:	rsb	r3, r2, #1
   4b8c0:	str	r1, [sp, #4]
   4b8c4:	str	r3, [sp, #16]
   4b8c8:	add	r8, r9, r6
   4b8cc:	sub	r2, r8, r0
   4b8d0:	mov	r1, sl
   4b8d4:	add	r0, r5, r0
   4b8d8:	bl	123d8 <memchr@plt>
   4b8dc:	adds	r3, r8, #0
   4b8e0:	movne	r3, #1
   4b8e4:	cmp	r0, #0
   4b8e8:	movne	r3, #0
   4b8ec:	cmp	r3, #0
   4b8f0:	mov	r0, r3
   4b8f4:	beq	4b9b4 <__assert_fail@plt+0x393c0>
   4b8f8:	add	r2, r5, r8
   4b8fc:	add	r3, sp, #1040	; 0x410
   4b900:	ldrb	r2, [r2, #-1]
   4b904:	add	r3, r3, #8
   4b908:	add	r2, r3, r2, lsl #2
   4b90c:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   4b910:	cmp	r2, #0
   4b914:	bne	4b9c8 <__assert_fail@plt+0x393d4>
   4b918:	cmp	r4, r7
   4b91c:	bcs	4b968 <__assert_fail@plt+0x39374>
   4b920:	ldr	r3, [sp]
   4b924:	add	r1, r9, r4
   4b928:	ldrb	r0, [r3]
   4b92c:	ldrb	r2, [r5, r1]
   4b930:	add	r1, r5, r1
   4b934:	cmp	r0, r2
   4b938:	movne	r2, r4
   4b93c:	bne	4b9c0 <__assert_fail@plt+0x393cc>
   4b940:	mov	r0, r3
   4b944:	mov	r2, r4
   4b948:	b	4b95c <__assert_fail@plt+0x39368>
   4b94c:	ldrb	ip, [r0, #1]!
   4b950:	ldrb	r3, [r1, #1]!
   4b954:	cmp	ip, r3
   4b958:	bne	4b9c0 <__assert_fail@plt+0x393cc>
   4b95c:	add	r2, r2, #1
   4b960:	cmp	r2, r7
   4b964:	bcc	4b94c <__assert_fail@plt+0x39358>
   4b968:	ldr	r3, [sp, #4]
   4b96c:	cmn	r3, #1
   4b970:	beq	4b9b0 <__assert_fail@plt+0x393bc>
   4b974:	add	r1, r9, r3
   4b978:	ldr	r3, [sp, #12]
   4b97c:	ldrb	r2, [r5, r1]
   4b980:	add	r1, r5, r1
   4b984:	ldrb	r0, [r3]
   4b988:	cmp	r0, r2
   4b98c:	bne	4b9d4 <__assert_fail@plt+0x393e0>
   4b990:	mov	r2, r3
   4b994:	b	4b9a8 <__assert_fail@plt+0x393b4>
   4b998:	ldrb	r0, [r2, #-1]!
   4b99c:	ldrb	r3, [r1, #-1]!
   4b9a0:	cmp	r0, r3
   4b9a4:	bne	4b9d4 <__assert_fail@plt+0x393e0>
   4b9a8:	cmp	fp, r2
   4b9ac:	bne	4b998 <__assert_fail@plt+0x393a4>
   4b9b0:	add	r0, r5, r9
   4b9b4:	add	sp, sp, #1040	; 0x410
   4b9b8:	add	sp, sp, #12
   4b9bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b9c0:	ldr	r3, [sp, #16]
   4b9c4:	add	r9, r3, r9
   4b9c8:	add	r9, r2, r9
   4b9cc:	mov	r0, r8
   4b9d0:	b	4b8c8 <__assert_fail@plt+0x392d4>
   4b9d4:	ldr	r3, [sp, #8]
   4b9d8:	add	r9, r9, r3
   4b9dc:	b	4b9cc <__assert_fail@plt+0x393d8>
   4b9e0:	mov	ip, #1
   4b9e4:	mov	r2, ip
   4b9e8:	mov	r8, ip
   4b9ec:	mov	r1, #0
   4b9f0:	mvn	r0, #0
   4b9f4:	add	r3, r2, r1
   4b9f8:	cmp	r4, r3
   4b9fc:	add	lr, r6, r0
   4ba00:	bls	4ba30 <__assert_fail@plt+0x3943c>
   4ba04:	ldrb	lr, [lr, r2]
   4ba08:	ldrb	r7, [r6, r3]
   4ba0c:	cmp	r7, lr
   4ba10:	bcs	4bac4 <__assert_fail@plt+0x394d0>
   4ba14:	mov	r1, r3
   4ba18:	mov	r2, #1
   4ba1c:	sub	ip, r3, r0
   4ba20:	add	r3, r2, r1
   4ba24:	cmp	r4, r3
   4ba28:	add	lr, r6, r0
   4ba2c:	bhi	4ba04 <__assert_fail@plt+0x39410>
   4ba30:	mov	r3, #1
   4ba34:	mov	r8, r3
   4ba38:	mov	r2, r3
   4ba3c:	mov	r1, #0
   4ba40:	mvn	r7, #0
   4ba44:	str	r3, [sp]
   4ba48:	add	r3, r2, r1
   4ba4c:	cmp	r4, r3
   4ba50:	add	lr, r6, r7
   4ba54:	bls	4ba88 <__assert_fail@plt+0x39494>
   4ba58:	ldrb	lr, [lr, r2]
   4ba5c:	ldrb	r9, [r6, r3]
   4ba60:	cmp	r9, lr
   4ba64:	bls	4baac <__assert_fail@plt+0x394b8>
   4ba68:	sub	r2, r3, r7
   4ba6c:	str	r2, [sp]
   4ba70:	mov	r1, r3
   4ba74:	mov	r2, #1
   4ba78:	add	r3, r2, r1
   4ba7c:	cmp	r4, r3
   4ba80:	add	lr, r6, r7
   4ba84:	bhi	4ba58 <__assert_fail@plt+0x39464>
   4ba88:	add	r3, r7, #1
   4ba8c:	add	r0, r0, #1
   4ba90:	cmp	r3, r0
   4ba94:	ldr	r2, [sp]
   4ba98:	movcc	r3, r0
   4ba9c:	movcc	r2, ip
   4baa0:	str	r2, [sp]
   4baa4:	mov	r7, r3
   4baa8:	b	4b698 <__assert_fail@plt+0x390a4>
   4baac:	beq	4badc <__assert_fail@plt+0x394e8>
   4bab0:	mov	r7, r1
   4bab4:	str	r8, [sp]
   4bab8:	add	r1, r1, #1
   4babc:	mov	r2, #1
   4bac0:	b	4ba48 <__assert_fail@plt+0x39454>
   4bac4:	beq	4baf4 <__assert_fail@plt+0x39500>
   4bac8:	mov	r0, r1
   4bacc:	mov	ip, r8
   4bad0:	add	r1, r1, #1
   4bad4:	mov	r2, #1
   4bad8:	b	4b9f4 <__assert_fail@plt+0x39400>
   4badc:	ldr	lr, [sp]
   4bae0:	cmp	r2, lr
   4bae4:	addne	r2, r2, #1
   4bae8:	moveq	r1, r3
   4baec:	moveq	r2, #1
   4baf0:	b	4ba48 <__assert_fail@plt+0x39454>
   4baf4:	cmp	r2, ip
   4baf8:	addne	r2, r2, #1
   4bafc:	moveq	r1, r3
   4bb00:	moveq	r2, #1
   4bb04:	b	4b9f4 <__assert_fail@plt+0x39400>
   4bb08:	mov	r1, r6
   4bb0c:	b	4b844 <__assert_fail@plt+0x39250>
   4bb10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4bb14:	sub	sp, sp, #28
   4bb18:	ldrb	r2, [r0]
   4bb1c:	cmp	r2, #0
   4bb20:	beq	4bfa8 <__assert_fail@plt+0x399b4>
   4bb24:	ldrb	ip, [r1]
   4bb28:	cmp	ip, #0
   4bb2c:	beq	4bbe0 <__assert_fail@plt+0x395ec>
   4bb30:	mov	r8, r0
   4bb34:	add	lr, r1, #1
   4bb38:	mov	sl, #1
   4bb3c:	b	4bb4c <__assert_fail@plt+0x39558>
   4bb40:	ldrb	ip, [lr], #1
   4bb44:	cmp	ip, #0
   4bb48:	beq	4bb74 <__assert_fail@plt+0x39580>
   4bb4c:	cmp	ip, r2
   4bb50:	movne	sl, #0
   4bb54:	andeq	sl, sl, #1
   4bb58:	ldrb	r2, [r8, #1]!
   4bb5c:	mov	r6, lr
   4bb60:	cmp	r2, #0
   4bb64:	bne	4bb40 <__assert_fail@plt+0x3954c>
   4bb68:	ldrb	r3, [r6]
   4bb6c:	cmp	r3, #0
   4bb70:	bne	4bbdc <__assert_fail@plt+0x395e8>
   4bb74:	cmp	sl, #0
   4bb78:	bne	4bbe0 <__assert_fail@plt+0x395ec>
   4bb7c:	mov	r4, r1
   4bb80:	mov	r5, r0
   4bb84:	ldrb	r1, [r1]
   4bb88:	add	r0, r0, #1
   4bb8c:	bl	1230c <strchr@plt>
   4bb90:	sub	r4, r6, r4
   4bb94:	subs	r7, r0, #0
   4bb98:	beq	4bbdc <__assert_fail@plt+0x395e8>
   4bb9c:	cmp	r4, #1
   4bba0:	beq	4bfa0 <__assert_fail@plt+0x399ac>
   4bba4:	add	r0, r5, r4
   4bba8:	cmp	r7, r0
   4bbac:	subls	r1, r0, r7
   4bbb0:	movhi	r1, #1
   4bbb4:	cmp	r4, #31
   4bbb8:	sub	r6, r6, r4
   4bbbc:	mov	r9, r1
   4bbc0:	bls	4bbe8 <__assert_fail@plt+0x395f4>
   4bbc4:	mov	r3, r4
   4bbc8:	mov	r2, r6
   4bbcc:	mov	r0, r7
   4bbd0:	add	sp, sp, #28
   4bbd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4bbd8:	b	4b664 <__assert_fail@plt+0x39070>
   4bbdc:	mov	r0, #0
   4bbe0:	add	sp, sp, #28
   4bbe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4bbe8:	cmp	r4, #2
   4bbec:	bhi	4be70 <__assert_fail@plt+0x3987c>
   4bbf0:	mov	r3, #1
   4bbf4:	sub	r8, r4, #1
   4bbf8:	mov	r5, r3
   4bbfc:	str	r3, [sp, #4]
   4bc00:	mov	r2, r8
   4bc04:	add	r1, r6, r5
   4bc08:	mov	r0, r6
   4bc0c:	bl	12084 <memcmp@plt>
   4bc10:	subs	fp, r0, #0
   4bc14:	bne	4bd4c <__assert_fail@plt+0x39758>
   4bc18:	sub	r3, r8, #1
   4bc1c:	str	r3, [sp, #8]
   4bc20:	add	r3, r6, r3
   4bc24:	str	r3, [sp, #20]
   4bc28:	mov	sl, fp
   4bc2c:	sub	r3, r4, r5
   4bc30:	mov	r0, r9
   4bc34:	str	r3, [sp, #16]
   4bc38:	rsb	r3, r8, #1
   4bc3c:	str	r3, [sp, #12]
   4bc40:	add	r5, r4, sl
   4bc44:	sub	r2, r5, r0
   4bc48:	mov	r1, #0
   4bc4c:	add	r0, r7, r0
   4bc50:	bl	123d8 <memchr@plt>
   4bc54:	adds	r3, r5, #0
   4bc58:	movne	r3, #1
   4bc5c:	cmp	r0, #0
   4bc60:	movne	r3, #0
   4bc64:	cmp	r3, #0
   4bc68:	mov	r0, r3
   4bc6c:	beq	4bbe0 <__assert_fail@plt+0x395ec>
   4bc70:	cmp	r8, fp
   4bc74:	movcs	r3, r8
   4bc78:	movcc	r3, fp
   4bc7c:	cmp	r4, r3
   4bc80:	bls	4bcc0 <__assert_fail@plt+0x396cc>
   4bc84:	add	r2, r3, sl
   4bc88:	ldrb	r1, [r6, r3]
   4bc8c:	ldrb	r0, [r7, r2]
   4bc90:	add	ip, r6, r3
   4bc94:	add	r2, r7, r2
   4bc98:	cmp	r1, r0
   4bc9c:	beq	4bcb4 <__assert_fail@plt+0x396c0>
   4bca0:	b	4bd38 <__assert_fail@plt+0x39744>
   4bca4:	ldrb	r0, [ip, #1]!
   4bca8:	ldrb	r1, [r2, #1]!
   4bcac:	cmp	r0, r1
   4bcb0:	bne	4bd38 <__assert_fail@plt+0x39744>
   4bcb4:	add	r3, r3, #1
   4bcb8:	cmp	r4, r3
   4bcbc:	bne	4bca4 <__assert_fail@plt+0x396b0>
   4bcc0:	ldr	r3, [sp, #8]
   4bcc4:	cmp	r8, fp
   4bcc8:	mov	r1, r3
   4bccc:	bls	4bf98 <__assert_fail@plt+0x399a4>
   4bcd0:	ldr	ip, [sp, #20]
   4bcd4:	add	r2, sl, r3
   4bcd8:	ldrb	r3, [ip]
   4bcdc:	ldrb	r0, [r7, r2]
   4bce0:	add	r2, r7, r2
   4bce4:	cmp	r0, r3
   4bce8:	bne	4bf98 <__assert_fail@plt+0x399a4>
   4bcec:	mov	r0, ip
   4bcf0:	sub	r9, fp, #1
   4bcf4:	b	4bd0c <__assert_fail@plt+0x39718>
   4bcf8:	ldrb	lr, [r0, #-1]!
   4bcfc:	ldrb	ip, [r2, #-1]!
   4bd00:	cmp	lr, ip
   4bd04:	bne	4bd18 <__assert_fail@plt+0x39724>
   4bd08:	mov	r1, r3
   4bd0c:	sub	r3, r1, #1
   4bd10:	cmp	r3, r9
   4bd14:	bne	4bcf8 <__assert_fail@plt+0x39704>
   4bd18:	add	fp, fp, #1
   4bd1c:	cmp	fp, r1
   4bd20:	bhi	4bfb4 <__assert_fail@plt+0x399c0>
   4bd24:	ldr	r3, [sp, #4]
   4bd28:	ldr	fp, [sp, #16]
   4bd2c:	add	sl, sl, r3
   4bd30:	mov	r0, r5
   4bd34:	b	4bc40 <__assert_fail@plt+0x3964c>
   4bd38:	ldr	r2, [sp, #12]
   4bd3c:	mov	fp, #0
   4bd40:	add	sl, r2, sl
   4bd44:	add	sl, sl, r3
   4bd48:	b	4bd30 <__assert_fail@plt+0x3973c>
   4bd4c:	sub	r3, r4, r8
   4bd50:	cmp	r3, r8
   4bd54:	movcc	r3, r8
   4bd58:	sub	r2, r8, #1
   4bd5c:	add	r3, r3, #1
   4bd60:	str	r3, [sp, #8]
   4bd64:	add	r3, r6, r2
   4bd68:	str	r3, [sp, #12]
   4bd6c:	add	sl, r6, r8
   4bd70:	rsb	r3, r8, #1
   4bd74:	mov	r0, r9
   4bd78:	mov	r5, #0
   4bd7c:	mov	r9, r8
   4bd80:	mov	r8, r2
   4bd84:	str	r3, [sp, #4]
   4bd88:	add	fp, r4, r5
   4bd8c:	sub	r2, fp, r0
   4bd90:	mov	r1, #0
   4bd94:	add	r0, r7, r0
   4bd98:	bl	123d8 <memchr@plt>
   4bd9c:	cmp	fp, #0
   4bda0:	clz	r0, r0
   4bda4:	lsr	r0, r0, #5
   4bda8:	moveq	r0, #0
   4bdac:	cmp	r0, #0
   4bdb0:	beq	4bbe0 <__assert_fail@plt+0x395ec>
   4bdb4:	cmp	r4, r9
   4bdb8:	bls	4be00 <__assert_fail@plt+0x3980c>
   4bdbc:	add	r1, r9, r5
   4bdc0:	ldrb	r0, [sl]
   4bdc4:	ldrb	r2, [r7, r1]
   4bdc8:	add	r1, r7, r1
   4bdcc:	cmp	r0, r2
   4bdd0:	movne	r2, r9
   4bdd4:	bne	4be50 <__assert_fail@plt+0x3985c>
   4bdd8:	mov	r0, sl
   4bddc:	mov	r2, r9
   4bde0:	b	4bdf4 <__assert_fail@plt+0x39800>
   4bde4:	ldrb	ip, [r0, #1]!
   4bde8:	ldrb	r3, [r1, #1]!
   4bdec:	cmp	ip, r3
   4bdf0:	bne	4be50 <__assert_fail@plt+0x3985c>
   4bdf4:	add	r2, r2, #1
   4bdf8:	cmp	r4, r2
   4bdfc:	bhi	4bde4 <__assert_fail@plt+0x397f0>
   4be00:	cmn	r8, #1
   4be04:	beq	4be44 <__assert_fail@plt+0x39850>
   4be08:	ldr	r3, [sp, #12]
   4be0c:	add	r1, r5, r8
   4be10:	ldrb	r2, [r3]
   4be14:	ldrb	r0, [r7, r1]
   4be18:	add	r1, r7, r1
   4be1c:	cmp	r0, r2
   4be20:	bne	4be64 <__assert_fail@plt+0x39870>
   4be24:	mov	r2, r3
   4be28:	b	4be3c <__assert_fail@plt+0x39848>
   4be2c:	ldrb	r0, [r2, #-1]!
   4be30:	ldrb	r3, [r1, #-1]!
   4be34:	cmp	r0, r3
   4be38:	bne	4be64 <__assert_fail@plt+0x39870>
   4be3c:	cmp	r6, r2
   4be40:	bne	4be2c <__assert_fail@plt+0x39838>
   4be44:	add	r0, r7, r5
   4be48:	add	sp, sp, #28
   4be4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4be50:	ldr	r3, [sp, #4]
   4be54:	add	r5, r3, r5
   4be58:	add	r5, r5, r2
   4be5c:	mov	r0, fp
   4be60:	b	4bd88 <__assert_fail@plt+0x39794>
   4be64:	ldr	r3, [sp, #8]
   4be68:	add	r5, r5, r3
   4be6c:	b	4be5c <__assert_fail@plt+0x39868>
   4be70:	mov	ip, #1
   4be74:	mov	r2, ip
   4be78:	mov	r8, ip
   4be7c:	mov	r1, #0
   4be80:	mvn	r0, #0
   4be84:	add	r3, r2, r1
   4be88:	cmp	r4, r3
   4be8c:	add	lr, r6, r2
   4be90:	bls	4bec0 <__assert_fail@plt+0x398cc>
   4be94:	ldrb	lr, [lr, r0]
   4be98:	ldrb	r5, [r6, r3]
   4be9c:	cmp	r5, lr
   4bea0:	bcs	4bf54 <__assert_fail@plt+0x39960>
   4bea4:	mov	r2, #1
   4bea8:	mov	r1, r3
   4beac:	sub	ip, r3, r0
   4beb0:	add	r3, r2, r1
   4beb4:	cmp	r4, r3
   4beb8:	add	lr, r6, r2
   4bebc:	bhi	4be94 <__assert_fail@plt+0x398a0>
   4bec0:	mov	r3, #1
   4bec4:	mov	r5, r3
   4bec8:	mov	r2, r3
   4becc:	mov	r1, #0
   4bed0:	mvn	r8, #0
   4bed4:	str	r3, [sp, #4]
   4bed8:	add	r3, r2, r1
   4bedc:	cmp	r4, r3
   4bee0:	add	lr, r6, r8
   4bee4:	bls	4bf18 <__assert_fail@plt+0x39924>
   4bee8:	ldrb	lr, [lr, r2]
   4beec:	ldrb	sl, [r6, r3]
   4bef0:	cmp	sl, lr
   4bef4:	bls	4bf3c <__assert_fail@plt+0x39948>
   4bef8:	sub	r2, r3, r8
   4befc:	str	r2, [sp, #4]
   4bf00:	mov	r1, r3
   4bf04:	mov	r2, #1
   4bf08:	add	r3, r2, r1
   4bf0c:	cmp	r4, r3
   4bf10:	add	lr, r6, r8
   4bf14:	bhi	4bee8 <__assert_fail@plt+0x398f4>
   4bf18:	add	r8, r8, #1
   4bf1c:	add	r0, r0, #1
   4bf20:	ldr	r3, [sp, #4]
   4bf24:	cmp	r8, r0
   4bf28:	movcc	r3, ip
   4bf2c:	str	r3, [sp, #4]
   4bf30:	movcc	r8, r0
   4bf34:	mov	r5, r3
   4bf38:	b	4bc00 <__assert_fail@plt+0x3960c>
   4bf3c:	beq	4bf6c <__assert_fail@plt+0x39978>
   4bf40:	mov	r8, r1
   4bf44:	str	r5, [sp, #4]
   4bf48:	add	r1, r1, #1
   4bf4c:	mov	r2, #1
   4bf50:	b	4bed8 <__assert_fail@plt+0x398e4>
   4bf54:	beq	4bf84 <__assert_fail@plt+0x39990>
   4bf58:	mov	r0, r1
   4bf5c:	mov	ip, r8
   4bf60:	add	r1, r1, #1
   4bf64:	mov	r2, #1
   4bf68:	b	4be84 <__assert_fail@plt+0x39890>
   4bf6c:	ldr	lr, [sp, #4]
   4bf70:	cmp	r2, lr
   4bf74:	addne	r2, r2, #1
   4bf78:	moveq	r1, r3
   4bf7c:	moveq	r2, #1
   4bf80:	b	4bed8 <__assert_fail@plt+0x398e4>
   4bf84:	cmp	r2, ip
   4bf88:	addne	r2, r2, #1
   4bf8c:	moveq	r1, r3
   4bf90:	moveq	r2, #1
   4bf94:	b	4be84 <__assert_fail@plt+0x39890>
   4bf98:	mov	r1, r8
   4bf9c:	b	4bd18 <__assert_fail@plt+0x39724>
   4bfa0:	mov	r0, r7
   4bfa4:	b	4bbe0 <__assert_fail@plt+0x395ec>
   4bfa8:	mov	r6, r1
   4bfac:	mov	sl, #1
   4bfb0:	b	4bb68 <__assert_fail@plt+0x39574>
   4bfb4:	add	r0, r7, sl
   4bfb8:	b	4bbe0 <__assert_fail@plt+0x395ec>
   4bfbc:	push	{r4, r5, r6, r7, r8, lr}
   4bfc0:	mov	r5, r0
   4bfc4:	ldr	r0, [pc, #296]	; 4c0f4 <__assert_fail@plt+0x39b00>
   4bfc8:	bl	12228 <getenv@plt>
   4bfcc:	ldrb	r3, [r5, #4]
   4bfd0:	subs	r6, r0, #0
   4bfd4:	beq	4c0c8 <__assert_fail@plt+0x39ad4>
   4bfd8:	cmp	r3, #0
   4bfdc:	beq	4c000 <__assert_fail@plt+0x39a0c>
   4bfe0:	mov	r1, r6
   4bfe4:	add	r0, r5, #5
   4bfe8:	bl	11f40 <strcmp@plt>
   4bfec:	cmp	r0, #0
   4bff0:	bne	4c000 <__assert_fail@plt+0x39a0c>
   4bff4:	mov	r4, #1
   4bff8:	mov	r0, r4
   4bffc:	pop	{r4, r5, r6, r7, r8, pc}
   4c000:	mov	r0, r6
   4c004:	bl	12300 <strlen@plt>
   4c008:	add	r7, r0, #1
   4c00c:	cmp	r7, #58	; 0x3a
   4c010:	movls	r0, #64	; 0x40
   4c014:	addhi	r0, r0, #10
   4c018:	bichi	r0, r0, #3
   4c01c:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4c020:	subs	r4, r0, #0
   4c024:	beq	4c0ec <__assert_fail@plt+0x39af8>
   4c028:	mov	r3, r4
   4c02c:	mov	r8, #0
   4c030:	mov	r2, #1
   4c034:	strb	r2, [r4, #4]
   4c038:	str	r8, [r4]
   4c03c:	mov	r1, r6
   4c040:	strb	r8, [r3, #5]!
   4c044:	mov	r2, r7
   4c048:	mov	r0, r3
   4c04c:	bl	12024 <memcpy@plt>
   4c050:	strb	r8, [r0, r7]
   4c054:	ldrb	r3, [r5, #4]
   4c058:	cmp	r3, #0
   4c05c:	beq	4c0ac <__assert_fail@plt+0x39ab8>
   4c060:	add	r1, r5, #5
   4c064:	mov	r2, #1
   4c068:	ldr	r0, [pc, #132]	; 4c0f4 <__assert_fail@plt+0x39b00>
   4c06c:	bl	12318 <setenv@plt>
   4c070:	cmp	r0, #0
   4c074:	beq	4c0bc <__assert_fail@plt+0x39ac8>
   4c078:	bl	12348 <__errno_location@plt>
   4c07c:	cmp	r4, #1
   4c080:	mov	r6, r0
   4c084:	ldr	r7, [r0]
   4c088:	beq	4c0a0 <__assert_fail@plt+0x39aac>
   4c08c:	ldr	r5, [r4]
   4c090:	mov	r0, r4
   4c094:	bl	376d0 <__assert_fail@plt+0x250dc>
   4c098:	subs	r4, r5, #0
   4c09c:	bne	4c08c <__assert_fail@plt+0x39a98>
   4c0a0:	str	r7, [r6]
   4c0a4:	mov	r4, #0
   4c0a8:	b	4bff8 <__assert_fail@plt+0x39a04>
   4c0ac:	ldr	r0, [pc, #64]	; 4c0f4 <__assert_fail@plt+0x39b00>
   4c0b0:	bl	12570 <unsetenv@plt>
   4c0b4:	cmp	r0, #0
   4c0b8:	bne	4c078 <__assert_fail@plt+0x39a84>
   4c0bc:	bl	12144 <tzset@plt>
   4c0c0:	mov	r0, r4
   4c0c4:	pop	{r4, r5, r6, r7, r8, pc}
   4c0c8:	cmp	r3, #0
   4c0cc:	beq	4bff4 <__assert_fail@plt+0x39a00>
   4c0d0:	mov	r0, #64	; 0x40
   4c0d4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4c0d8:	subs	r4, r0, #0
   4c0dc:	strne	r6, [r4]
   4c0e0:	strbne	r6, [r4, #4]
   4c0e4:	strbne	r6, [r4, #5]
   4c0e8:	bne	4c054 <__assert_fail@plt+0x39a60>
   4c0ec:	mov	r4, #0
   4c0f0:	b	4bff8 <__assert_fail@plt+0x39a04>
   4c0f4:	andeq	r3, r5, r8, ror r1
   4c0f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4c0fc:	ldr	r6, [r1, #40]	; 0x28
   4c100:	cmp	r6, #0
   4c104:	beq	4c200 <__assert_fail@plt+0x39c0c>
   4c108:	cmp	r1, r6
   4c10c:	mov	r7, r1
   4c110:	mov	r5, r0
   4c114:	bhi	4c124 <__assert_fail@plt+0x39b30>
   4c118:	add	r3, r1, #44	; 0x2c
   4c11c:	cmp	r6, r3
   4c120:	bcc	4c200 <__assert_fail@plt+0x39c0c>
   4c124:	ldrb	r3, [r6]
   4c128:	cmp	r3, #0
   4c12c:	addne	r4, r5, #5
   4c130:	beq	4c1f8 <__assert_fail@plt+0x39c04>
   4c134:	mov	r1, r6
   4c138:	mov	r0, r4
   4c13c:	bl	11f40 <strcmp@plt>
   4c140:	add	r2, r5, #5
   4c144:	cmp	r0, #0
   4c148:	mov	r0, r4
   4c14c:	beq	4c1ec <__assert_fail@plt+0x39bf8>
   4c150:	ldrb	r3, [r4]
   4c154:	cmp	r3, #0
   4c158:	bne	4c170 <__assert_fail@plt+0x39b7c>
   4c15c:	cmp	r4, r2
   4c160:	bne	4c208 <__assert_fail@plt+0x39c14>
   4c164:	ldrb	r3, [r5, #4]
   4c168:	cmp	r3, #0
   4c16c:	beq	4c208 <__assert_fail@plt+0x39c14>
   4c170:	bl	12300 <strlen@plt>
   4c174:	add	r0, r0, #1
   4c178:	ldrb	r3, [r4, r0]!
   4c17c:	cmp	r3, #0
   4c180:	bne	4c134 <__assert_fail@plt+0x39b40>
   4c184:	ldr	r3, [r5]
   4c188:	cmp	r3, #0
   4c18c:	addne	r4, r3, #5
   4c190:	movne	r5, r3
   4c194:	b	4c134 <__assert_fail@plt+0x39b40>
   4c198:	cmp	r8, #58	; 0x3a
   4c19c:	addhi	r0, r0, #10
   4c1a0:	bichi	r0, r0, #3
   4c1a4:	movls	r0, #64	; 0x40
   4c1a8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4c1ac:	subs	r9, r0, #0
   4c1b0:	beq	4c240 <__assert_fail@plt+0x39c4c>
   4c1b4:	mov	r3, r9
   4c1b8:	mov	sl, #0
   4c1bc:	mov	r2, #1
   4c1c0:	strb	r2, [r9, #4]
   4c1c4:	str	sl, [r9]
   4c1c8:	mov	r1, r6
   4c1cc:	strb	sl, [r3, #5]!
   4c1d0:	mov	r2, r8
   4c1d4:	mov	r0, r3
   4c1d8:	bl	12024 <memcpy@plt>
   4c1dc:	mov	r4, r0
   4c1e0:	strb	sl, [r0, r8]
   4c1e4:	str	r9, [r5]
   4c1e8:	strb	sl, [r9, #4]
   4c1ec:	str	r4, [r7, #40]	; 0x28
   4c1f0:	mov	r0, #1
   4c1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4c1f8:	ldr	r4, [pc, #76]	; 4c24c <__assert_fail@plt+0x39c58>
   4c1fc:	b	4c1ec <__assert_fail@plt+0x39bf8>
   4c200:	mov	r0, #1
   4c204:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4c208:	mov	r0, r6
   4c20c:	bl	12300 <strlen@plt>
   4c210:	add	r3, r5, #64	; 0x40
   4c214:	sub	r3, r3, r4
   4c218:	add	r8, r0, #1
   4c21c:	cmp	r8, r3
   4c220:	bge	4c198 <__assert_fail@plt+0x39ba4>
   4c224:	mov	r1, r6
   4c228:	mov	r2, r8
   4c22c:	mov	r0, r4
   4c230:	bl	12024 <memcpy@plt>
   4c234:	mov	r3, #0
   4c238:	strb	r3, [r4, r8]
   4c23c:	b	4c1ec <__assert_fail@plt+0x39bf8>
   4c240:	mov	r0, r9
   4c244:	str	r9, [r5]
   4c248:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4c24c:	andeq	pc, r4, ip, ror fp	; <UNPREDICTABLE>
   4c250:	push	{r4, r5, r6, r7, r8, lr}
   4c254:	subs	r7, r0, #0
   4c258:	beq	4c2b4 <__assert_fail@plt+0x39cc0>
   4c25c:	bl	12300 <strlen@plt>
   4c260:	add	r5, r0, #1
   4c264:	cmp	r5, #58	; 0x3a
   4c268:	addhi	r0, r0, #10
   4c26c:	bichi	r0, r0, #3
   4c270:	movls	r0, #64	; 0x40
   4c274:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4c278:	subs	r4, r0, #0
   4c27c:	beq	4c2ac <__assert_fail@plt+0x39cb8>
   4c280:	mov	r3, r4
   4c284:	mov	r6, #0
   4c288:	mov	r2, #1
   4c28c:	strb	r2, [r4, #4]
   4c290:	str	r6, [r4]
   4c294:	mov	r1, r7
   4c298:	strb	r6, [r3, #5]!
   4c29c:	mov	r2, r5
   4c2a0:	mov	r0, r3
   4c2a4:	bl	12024 <memcpy@plt>
   4c2a8:	strb	r6, [r0, r5]
   4c2ac:	mov	r0, r4
   4c2b0:	pop	{r4, r5, r6, r7, r8, pc}
   4c2b4:	mov	r0, #64	; 0x40
   4c2b8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4c2bc:	subs	r4, r0, #0
   4c2c0:	beq	4c2ac <__assert_fail@plt+0x39cb8>
   4c2c4:	str	r7, [r4]
   4c2c8:	strb	r7, [r4, #4]
   4c2cc:	strb	r7, [r4, #5]
   4c2d0:	mov	r0, r4
   4c2d4:	pop	{r4, r5, r6, r7, r8, pc}
   4c2d8:	cmp	r0, #1
   4c2dc:	bxeq	lr
   4c2e0:	cmp	r0, #0
   4c2e4:	beq	4c300 <__assert_fail@plt+0x39d0c>
   4c2e8:	push	{r4, lr}
   4c2ec:	ldr	r4, [r0]
   4c2f0:	bl	376d0 <__assert_fail@plt+0x250dc>
   4c2f4:	subs	r0, r4, #0
   4c2f8:	bne	4c2ec <__assert_fail@plt+0x39cf8>
   4c2fc:	pop	{r4, pc}
   4c300:	bx	lr
   4c304:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4c308:	subs	r8, r0, #0
   4c30c:	mov	r5, r1
   4c310:	mov	r6, r2
   4c314:	beq	4c3e4 <__assert_fail@plt+0x39df0>
   4c318:	bl	4bfbc <__assert_fail@plt+0x399c8>
   4c31c:	subs	r4, r0, #0
   4c320:	beq	4c3cc <__assert_fail@plt+0x39dd8>
   4c324:	mov	r0, r5
   4c328:	mov	r1, r6
   4c32c:	bl	120fc <localtime_r@plt>
   4c330:	subs	r7, r0, #0
   4c334:	beq	4c3c4 <__assert_fail@plt+0x39dd0>
   4c338:	mov	r0, r8
   4c33c:	mov	r1, r6
   4c340:	bl	4c0f8 <__assert_fail@plt+0x39b04>
   4c344:	cmp	r4, #1
   4c348:	mov	r7, r0
   4c34c:	beq	4c3a8 <__assert_fail@plt+0x39db4>
   4c350:	bl	12348 <__errno_location@plt>
   4c354:	ldrb	r3, [r4, #4]
   4c358:	cmp	r3, #0
   4c35c:	mov	r8, r0
   4c360:	ldr	r9, [r0]
   4c364:	beq	4c3d8 <__assert_fail@plt+0x39de4>
   4c368:	mov	r2, #1
   4c36c:	add	r1, r4, #5
   4c370:	ldr	r0, [pc, #124]	; 4c3f4 <__assert_fail@plt+0x39e00>
   4c374:	bl	12318 <setenv@plt>
   4c378:	cmp	r0, #0
   4c37c:	beq	4c3b8 <__assert_fail@plt+0x39dc4>
   4c380:	ldr	r9, [r8]
   4c384:	mov	sl, #0
   4c388:	ldr	r5, [r4]
   4c38c:	mov	r0, r4
   4c390:	bl	376d0 <__assert_fail@plt+0x250dc>
   4c394:	subs	r4, r5, #0
   4c398:	bne	4c388 <__assert_fail@plt+0x39d94>
   4c39c:	cmp	sl, #0
   4c3a0:	str	r9, [r8]
   4c3a4:	beq	4c3cc <__assert_fail@plt+0x39dd8>
   4c3a8:	cmp	r7, #0
   4c3ac:	beq	4c3cc <__assert_fail@plt+0x39dd8>
   4c3b0:	mov	r0, r6
   4c3b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4c3b8:	bl	12144 <tzset@plt>
   4c3bc:	mov	sl, #1
   4c3c0:	b	4c388 <__assert_fail@plt+0x39d94>
   4c3c4:	cmp	r4, #1
   4c3c8:	bne	4c350 <__assert_fail@plt+0x39d5c>
   4c3cc:	mov	r6, #0
   4c3d0:	mov	r0, r6
   4c3d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4c3d8:	ldr	r0, [pc, #20]	; 4c3f4 <__assert_fail@plt+0x39e00>
   4c3dc:	bl	12570 <unsetenv@plt>
   4c3e0:	b	4c378 <__assert_fail@plt+0x39d84>
   4c3e4:	mov	r0, r5
   4c3e8:	mov	r1, r2
   4c3ec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   4c3f0:	b	11f04 <gmtime_r@plt>
   4c3f4:	andeq	r3, r5, r8, ror r1
   4c3f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c3fc:	subs	r5, r0, #0
   4c400:	sub	sp, sp, #52	; 0x34
   4c404:	mov	r6, r1
   4c408:	beq	4c538 <__assert_fail@plt+0x39f44>
   4c40c:	bl	4bfbc <__assert_fail@plt+0x399c8>
   4c410:	subs	r4, r0, #0
   4c414:	beq	4c550 <__assert_fail@plt+0x39f5c>
   4c418:	ldm	r6, {r1, r2, ip}
   4c41c:	ldr	r0, [r6, #12]
   4c420:	ldr	r3, [r6, #16]
   4c424:	str	r1, [sp, #4]
   4c428:	str	r2, [sp, #8]
   4c42c:	ldr	r1, [r6, #20]
   4c430:	ldr	r2, [r6, #32]
   4c434:	str	r0, [sp, #16]
   4c438:	str	r3, [sp, #20]
   4c43c:	add	r0, sp, #4
   4c440:	mvn	r3, #0
   4c444:	str	r3, [sp, #32]
   4c448:	str	ip, [sp, #12]
   4c44c:	str	r1, [sp, #24]
   4c450:	str	r2, [sp, #36]	; 0x24
   4c454:	bl	11f7c <mktime@plt>
   4c458:	ldr	r3, [sp, #32]
   4c45c:	cmp	r3, #0
   4c460:	mov	r8, r0
   4c464:	blt	4c504 <__assert_fail@plt+0x39f10>
   4c468:	mov	r0, r5
   4c46c:	add	r1, sp, #4
   4c470:	bl	4c0f8 <__assert_fail@plt+0x39b04>
   4c474:	cmp	r4, #1
   4c478:	mov	sl, r0
   4c47c:	beq	4c4d0 <__assert_fail@plt+0x39edc>
   4c480:	bl	12348 <__errno_location@plt>
   4c484:	ldrb	r3, [r4, #4]
   4c488:	cmp	r3, #0
   4c48c:	mov	r7, r0
   4c490:	ldr	r9, [r0]
   4c494:	bne	4c514 <__assert_fail@plt+0x39f20>
   4c498:	ldr	r0, [pc, #184]	; 4c558 <__assert_fail@plt+0x39f64>
   4c49c:	bl	12570 <unsetenv@plt>
   4c4a0:	cmp	r0, #0
   4c4a4:	beq	4c52c <__assert_fail@plt+0x39f38>
   4c4a8:	ldr	r9, [r7]
   4c4ac:	mov	fp, #0
   4c4b0:	ldr	r5, [r4]
   4c4b4:	mov	r0, r4
   4c4b8:	bl	376d0 <__assert_fail@plt+0x250dc>
   4c4bc:	subs	r4, r5, #0
   4c4c0:	bne	4c4b0 <__assert_fail@plt+0x39ebc>
   4c4c4:	cmp	fp, #0
   4c4c8:	str	r9, [r7]
   4c4cc:	beq	4c550 <__assert_fail@plt+0x39f5c>
   4c4d0:	cmp	sl, #0
   4c4d4:	beq	4c550 <__assert_fail@plt+0x39f5c>
   4c4d8:	add	lr, sp, #4
   4c4dc:	mov	ip, r6
   4c4e0:	ldm	lr!, {r0, r1, r2, r3}
   4c4e4:	stmia	ip!, {r0, r1, r2, r3}
   4c4e8:	ldm	lr!, {r0, r1, r2, r3}
   4c4ec:	stmia	ip!, {r0, r1, r2, r3}
   4c4f0:	ldm	lr, {r0, r1, r2}
   4c4f4:	stm	ip, {r0, r1, r2}
   4c4f8:	mov	r0, r8
   4c4fc:	add	sp, sp, #52	; 0x34
   4c500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4c504:	cmp	r4, #1
   4c508:	beq	4c550 <__assert_fail@plt+0x39f5c>
   4c50c:	mov	sl, #0
   4c510:	b	4c480 <__assert_fail@plt+0x39e8c>
   4c514:	mov	r2, #1
   4c518:	add	r1, r4, #5
   4c51c:	ldr	r0, [pc, #52]	; 4c558 <__assert_fail@plt+0x39f64>
   4c520:	bl	12318 <setenv@plt>
   4c524:	cmp	r0, #0
   4c528:	bne	4c4a8 <__assert_fail@plt+0x39eb4>
   4c52c:	bl	12144 <tzset@plt>
   4c530:	mov	fp, #1
   4c534:	b	4c4b0 <__assert_fail@plt+0x39ebc>
   4c538:	mov	r0, r1
   4c53c:	bl	124d4 <timegm@plt>
   4c540:	mov	r8, r0
   4c544:	mov	r0, r8
   4c548:	add	sp, sp, #52	; 0x34
   4c54c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4c550:	mvn	r8, #0
   4c554:	b	4c4f8 <__assert_fail@plt+0x39f04>
   4c558:	andeq	r3, r5, r8, ror r1
   4c55c:	ldr	r3, [pc, #8]	; 4c56c <__assert_fail@plt+0x39f78>
   4c560:	push	{r4, lr}
   4c564:	ldr	r0, [r3]
   4c568:	bl	122d0 <exit@plt>
   4c56c:	strdeq	r4, [r6], -r0
   4c570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c574:	mov	r4, r1
   4c578:	sub	sp, sp, #12
   4c57c:	mov	r5, r2
   4c580:	str	r2, [sp, #4]
   4c584:	mov	r7, r3
   4c588:	mov	sl, r0
   4c58c:	bl	12300 <strlen@plt>
   4c590:	ldr	fp, [r4]
   4c594:	cmp	fp, #0
   4c598:	beq	4c6ac <__assert_fail@plt+0x3a0b8>
   4c59c:	cmp	r5, #0
   4c5a0:	mov	r8, r0
   4c5a4:	mov	r3, r5
   4c5a8:	beq	4c654 <__assert_fail@plt+0x3a060>
   4c5ac:	mov	r2, #0
   4c5b0:	mov	r5, r2
   4c5b4:	mov	r6, r3
   4c5b8:	mvn	r9, #0
   4c5bc:	str	r2, [sp]
   4c5c0:	mov	r2, r8
   4c5c4:	mov	r1, sl
   4c5c8:	mov	r0, fp
   4c5cc:	bl	12594 <strncmp@plt>
   4c5d0:	cmp	r0, #0
   4c5d4:	mov	r0, fp
   4c5d8:	bne	4c618 <__assert_fail@plt+0x3a024>
   4c5dc:	bl	12300 <strlen@plt>
   4c5e0:	ldr	r3, [sp, #4]
   4c5e4:	mov	r2, r7
   4c5e8:	mov	r1, r6
   4c5ec:	cmp	r8, r0
   4c5f0:	mla	r0, r7, r9, r3
   4c5f4:	beq	4c644 <__assert_fail@plt+0x3a050>
   4c5f8:	cmn	r9, #1
   4c5fc:	moveq	r9, r5
   4c600:	beq	4c618 <__assert_fail@plt+0x3a024>
   4c604:	bl	12084 <memcmp@plt>
   4c608:	ldr	r3, [sp]
   4c60c:	cmp	r0, #0
   4c610:	movne	r3, #1
   4c614:	str	r3, [sp]
   4c618:	ldr	fp, [r4, #4]!
   4c61c:	add	r5, r5, #1
   4c620:	cmp	fp, #0
   4c624:	add	r6, r6, r7
   4c628:	bne	4c5c0 <__assert_fail@plt+0x39fcc>
   4c62c:	ldr	r3, [sp]
   4c630:	cmp	r3, #0
   4c634:	mvnne	r9, #1
   4c638:	mov	r0, r9
   4c63c:	add	sp, sp, #12
   4c640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4c644:	mov	r9, r5
   4c648:	mov	r0, r9
   4c64c:	add	sp, sp, #12
   4c650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4c654:	mov	r6, r5
   4c658:	mvn	r9, #0
   4c65c:	mov	r2, r8
   4c660:	mov	r1, sl
   4c664:	mov	r0, fp
   4c668:	bl	12594 <strncmp@plt>
   4c66c:	cmp	r0, #0
   4c670:	mov	r0, fp
   4c674:	bne	4c690 <__assert_fail@plt+0x3a09c>
   4c678:	bl	12300 <strlen@plt>
   4c67c:	cmp	r8, r0
   4c680:	beq	4c644 <__assert_fail@plt+0x3a050>
   4c684:	cmn	r9, #1
   4c688:	moveq	r9, r5
   4c68c:	movne	r6, #1
   4c690:	ldr	fp, [r4, #4]!
   4c694:	add	r5, r5, #1
   4c698:	cmp	fp, #0
   4c69c:	bne	4c65c <__assert_fail@plt+0x3a068>
   4c6a0:	str	r6, [sp]
   4c6a4:	mov	r3, r6
   4c6a8:	b	4c630 <__assert_fail@plt+0x3a03c>
   4c6ac:	mvn	r9, #0
   4c6b0:	b	4c638 <__assert_fail@plt+0x3a044>
   4c6b4:	cmn	r2, #1
   4c6b8:	push	{r4, r5, r6, lr}
   4c6bc:	mov	r2, #5
   4c6c0:	sub	sp, sp, #8
   4c6c4:	mov	r4, r1
   4c6c8:	mov	r5, r0
   4c6cc:	ldreq	r1, [pc, #76]	; 4c720 <__assert_fail@plt+0x3a12c>
   4c6d0:	ldrne	r1, [pc, #76]	; 4c724 <__assert_fail@plt+0x3a130>
   4c6d4:	mov	r0, #0
   4c6d8:	bl	120b4 <dcgettext@plt>
   4c6dc:	mov	r2, r4
   4c6e0:	mov	r1, #8
   4c6e4:	mov	r6, r0
   4c6e8:	mov	r0, #0
   4c6ec:	bl	325f0 <__assert_fail@plt+0x1fffc>
   4c6f0:	mov	r1, r5
   4c6f4:	mov	r4, r0
   4c6f8:	mov	r0, #1
   4c6fc:	bl	3418c <__assert_fail@plt+0x21b98>
   4c700:	mov	r1, #0
   4c704:	mov	r3, r4
   4c708:	mov	r2, r6
   4c70c:	str	r0, [sp]
   4c710:	mov	r0, r1
   4c714:	bl	121ec <error@plt>
   4c718:	add	sp, sp, #8
   4c71c:	pop	{r4, r5, r6, pc}
   4c720:	strdeq	r3, [r5], -r8
   4c724:	andeq	r3, r5, r4, lsl sp
   4c728:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c72c:	mov	r7, r0
   4c730:	ldr	r9, [pc, #188]	; 4c7f4 <__assert_fail@plt+0x3a200>
   4c734:	mov	r4, r1
   4c738:	mov	r8, r2
   4c73c:	ldr	r1, [pc, #180]	; 4c7f8 <__assert_fail@plt+0x3a204>
   4c740:	mov	r2, #5
   4c744:	mov	r0, #0
   4c748:	bl	120b4 <dcgettext@plt>
   4c74c:	ldr	r1, [r9]
   4c750:	bl	12588 <fputs@plt>
   4c754:	ldr	r5, [r7]
   4c758:	cmp	r5, #0
   4c75c:	beq	4c7e4 <__assert_fail@plt+0x3a1f0>
   4c760:	mov	fp, #0
   4c764:	ldr	sl, [pc, #144]	; 4c7fc <__assert_fail@plt+0x3a208>
   4c768:	mov	r6, fp
   4c76c:	b	4c7a4 <__assert_fail@plt+0x3a1b0>
   4c770:	mov	r0, r5
   4c774:	ldr	r5, [r9]
   4c778:	bl	34340 <__assert_fail@plt+0x21d4c>
   4c77c:	mov	r1, sl
   4c780:	mov	fp, r4
   4c784:	mov	r2, r0
   4c788:	mov	r0, r5
   4c78c:	bl	1233c <fprintf@plt>
   4c790:	ldr	r5, [r7, #4]!
   4c794:	add	r6, r6, #1
   4c798:	cmp	r5, #0
   4c79c:	add	r4, r4, r8
   4c7a0:	beq	4c7e4 <__assert_fail@plt+0x3a1f0>
   4c7a4:	cmp	r6, #0
   4c7a8:	mov	r1, r4
   4c7ac:	mov	r2, r8
   4c7b0:	mov	r0, fp
   4c7b4:	beq	4c770 <__assert_fail@plt+0x3a17c>
   4c7b8:	bl	12084 <memcmp@plt>
   4c7bc:	cmp	r0, #0
   4c7c0:	bne	4c770 <__assert_fail@plt+0x3a17c>
   4c7c4:	mov	r0, r5
   4c7c8:	ldr	r5, [r9]
   4c7cc:	bl	34340 <__assert_fail@plt+0x21d4c>
   4c7d0:	ldr	r1, [pc, #40]	; 4c800 <__assert_fail@plt+0x3a20c>
   4c7d4:	mov	r2, r0
   4c7d8:	mov	r0, r5
   4c7dc:	bl	1233c <fprintf@plt>
   4c7e0:	b	4c790 <__assert_fail@plt+0x3a19c>
   4c7e4:	ldr	r1, [r9]
   4c7e8:	mov	r0, #10
   4c7ec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c7f0:	b	124e0 <putc@plt>
   4c7f4:	andeq	r4, r6, r8, asr #10
   4c7f8:	andeq	r3, r5, r4, lsr sp
   4c7fc:	andeq	r3, r5, ip, asr #26
   4c800:	andeq	r3, r5, r4, asr sp
   4c804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4c808:	sub	sp, sp, #28
   4c80c:	mov	r4, r2
   4c810:	str	r0, [sp, #20]
   4c814:	mov	r0, r1
   4c818:	mov	sl, r1
   4c81c:	str	r2, [sp, #16]
   4c820:	mov	r5, r3
   4c824:	str	r3, [sp, #12]
   4c828:	bl	12300 <strlen@plt>
   4c82c:	ldr	fp, [r4]
   4c830:	ldr	r6, [sp, #64]	; 0x40
   4c834:	cmp	fp, #0
   4c838:	beq	4c9cc <__assert_fail@plt+0x3a3d8>
   4c83c:	cmp	r5, #0
   4c840:	mov	r8, r0
   4c844:	beq	4c8fc <__assert_fail@plt+0x3a308>
   4c848:	mov	r2, r4
   4c84c:	mov	r1, #0
   4c850:	mov	r4, r1
   4c854:	mov	r7, r2
   4c858:	mvn	r9, #0
   4c85c:	str	r1, [sp, #8]
   4c860:	mov	r2, r8
   4c864:	mov	r1, sl
   4c868:	mov	r0, fp
   4c86c:	bl	12594 <strncmp@plt>
   4c870:	cmp	r0, #0
   4c874:	mov	r0, fp
   4c878:	bne	4c8b8 <__assert_fail@plt+0x3a2c4>
   4c87c:	bl	12300 <strlen@plt>
   4c880:	ldr	r3, [sp, #12]
   4c884:	mov	r2, r6
   4c888:	mov	r1, r5
   4c88c:	cmp	r8, r0
   4c890:	mla	r0, r6, r9, r3
   4c894:	beq	4c8ec <__assert_fail@plt+0x3a2f8>
   4c898:	cmn	r9, #1
   4c89c:	moveq	r9, r4
   4c8a0:	beq	4c8b8 <__assert_fail@plt+0x3a2c4>
   4c8a4:	bl	12084 <memcmp@plt>
   4c8a8:	ldr	r3, [sp, #8]
   4c8ac:	cmp	r0, #0
   4c8b0:	movne	r3, #1
   4c8b4:	str	r3, [sp, #8]
   4c8b8:	ldr	fp, [r7, #4]!
   4c8bc:	add	r4, r4, #1
   4c8c0:	cmp	fp, #0
   4c8c4:	add	r5, r5, r6
   4c8c8:	bne	4c860 <__assert_fail@plt+0x3a26c>
   4c8cc:	ldr	r3, [sp, #8]
   4c8d0:	cmp	r3, #0
   4c8d4:	bne	4c960 <__assert_fail@plt+0x3a36c>
   4c8d8:	cmn	r9, #1
   4c8dc:	beq	4c9cc <__assert_fail@plt+0x3a3d8>
   4c8e0:	mov	r0, r9
   4c8e4:	add	sp, sp, #28
   4c8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4c8ec:	mov	r9, r4
   4c8f0:	mov	r0, r9
   4c8f4:	add	sp, sp, #28
   4c8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4c8fc:	ldr	r3, [sp, #12]
   4c900:	mov	r5, r4
   4c904:	mov	r7, r3
   4c908:	mvn	r9, #0
   4c90c:	mov	r4, r3
   4c910:	mov	r2, r8
   4c914:	mov	r1, sl
   4c918:	mov	r0, fp
   4c91c:	bl	12594 <strncmp@plt>
   4c920:	cmp	r0, #0
   4c924:	mov	r0, fp
   4c928:	bne	4c944 <__assert_fail@plt+0x3a350>
   4c92c:	bl	12300 <strlen@plt>
   4c930:	cmp	r8, r0
   4c934:	beq	4c8ec <__assert_fail@plt+0x3a2f8>
   4c938:	cmn	r9, #1
   4c93c:	moveq	r9, r4
   4c940:	movne	r7, #1
   4c944:	ldr	fp, [r5, #4]!
   4c948:	add	r4, r4, #1
   4c94c:	cmp	fp, #0
   4c950:	bne	4c910 <__assert_fail@plt+0x3a31c>
   4c954:	str	r7, [sp, #8]
   4c958:	mov	r3, r7
   4c95c:	b	4c8d0 <__assert_fail@plt+0x3a2dc>
   4c960:	mov	r2, #5
   4c964:	ldr	r1, [pc, #120]	; 4c9e4 <__assert_fail@plt+0x3a3f0>
   4c968:	mov	r0, #0
   4c96c:	bl	120b4 <dcgettext@plt>
   4c970:	mov	r4, r0
   4c974:	mov	r2, sl
   4c978:	mov	r1, #8
   4c97c:	mov	r0, #0
   4c980:	bl	325f0 <__assert_fail@plt+0x1fffc>
   4c984:	ldr	r1, [sp, #20]
   4c988:	mvn	r9, #0
   4c98c:	mov	r5, r0
   4c990:	mov	r0, #1
   4c994:	bl	3418c <__assert_fail@plt+0x21b98>
   4c998:	mov	r1, #0
   4c99c:	mov	r3, r5
   4c9a0:	mov	r2, r4
   4c9a4:	str	r0, [sp]
   4c9a8:	mov	r0, r1
   4c9ac:	bl	121ec <error@plt>
   4c9b0:	mov	r2, r6
   4c9b4:	ldr	r1, [sp, #12]
   4c9b8:	ldr	r0, [sp, #16]
   4c9bc:	bl	4c728 <__assert_fail@plt+0x3a134>
   4c9c0:	ldr	r3, [sp, #68]	; 0x44
   4c9c4:	blx	r3
   4c9c8:	b	4c8e0 <__assert_fail@plt+0x3a2ec>
   4c9cc:	mov	r2, #5
   4c9d0:	ldr	r1, [pc, #16]	; 4c9e8 <__assert_fail@plt+0x3a3f4>
   4c9d4:	mov	r0, #0
   4c9d8:	bl	120b4 <dcgettext@plt>
   4c9dc:	mov	r4, r0
   4c9e0:	b	4c974 <__assert_fail@plt+0x3a380>
   4c9e4:	andeq	r3, r5, r4, lsl sp
   4c9e8:	strdeq	r3, [r5], -r8
   4c9ec:	push	{r4, r5, r6, r7, r8, lr}
   4c9f0:	ldr	r7, [r1]
   4c9f4:	cmp	r7, #0
   4c9f8:	beq	4ca38 <__assert_fail@plt+0x3a444>
   4c9fc:	mov	r6, r3
   4ca00:	mov	r8, r0
   4ca04:	mov	r4, r2
   4ca08:	mov	r5, r1
   4ca0c:	b	4ca1c <__assert_fail@plt+0x3a428>
   4ca10:	ldr	r7, [r5, #4]!
   4ca14:	cmp	r7, #0
   4ca18:	beq	4ca38 <__assert_fail@plt+0x3a444>
   4ca1c:	mov	r1, r4
   4ca20:	mov	r2, r6
   4ca24:	mov	r0, r8
   4ca28:	bl	12084 <memcmp@plt>
   4ca2c:	add	r4, r4, r6
   4ca30:	cmp	r0, #0
   4ca34:	bne	4ca10 <__assert_fail@plt+0x3a41c>
   4ca38:	mov	r0, r7
   4ca3c:	pop	{r4, r5, r6, r7, r8, pc}
   4ca40:	push	{r4, r5, r6, r7, r8, r9, lr}
   4ca44:	mov	r4, r0
   4ca48:	ldrb	r3, [r2]
   4ca4c:	sub	sp, sp, #36	; 0x24
   4ca50:	cmp	r3, #0
   4ca54:	strbeq	r3, [r0]
   4ca58:	beq	4cab0 <__assert_fail@plt+0x3a4bc>
   4ca5c:	ldr	r8, [pc, #200]	; 4cb2c <__assert_fail@plt+0x3a538>
   4ca60:	mov	r5, r2
   4ca64:	mov	r7, r1
   4ca68:	ldr	r6, [r8]
   4ca6c:	cmp	r6, #0
   4ca70:	beq	4cacc <__assert_fail@plt+0x3a4d8>
   4ca74:	cmp	r6, #0
   4ca78:	blt	4cac4 <__assert_fail@plt+0x3a4d0>
   4ca7c:	mov	r0, r5
   4ca80:	bl	12300 <strlen@plt>
   4ca84:	add	r0, r0, #27
   4ca88:	cmp	r0, #4032	; 0xfc0
   4ca8c:	bhi	4cab8 <__assert_fail@plt+0x3a4c4>
   4ca90:	mov	r2, r7
   4ca94:	ldr	r1, [pc, #148]	; 4cb30 <__assert_fail@plt+0x3a53c>
   4ca98:	mov	r0, r4
   4ca9c:	bl	124b0 <sprintf@plt>
   4caa0:	mov	r1, r5
   4caa4:	add	r0, r4, r0
   4caa8:	bl	121b0 <strcpy@plt>
   4caac:	mov	r0, r4
   4cab0:	add	sp, sp, #36	; 0x24
   4cab4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   4cab8:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4cabc:	subs	r4, r0, #0
   4cac0:	bne	4ca90 <__assert_fail@plt+0x3a49c>
   4cac4:	mov	r0, #0
   4cac8:	b	4cab0 <__assert_fail@plt+0x3a4bc>
   4cacc:	ldr	r1, [pc, #96]	; 4cb34 <__assert_fail@plt+0x3a540>
   4cad0:	ldr	r0, [pc, #96]	; 4cb38 <__assert_fail@plt+0x3a544>
   4cad4:	bl	1221c <open64@plt>
   4cad8:	subs	r9, r0, #0
   4cadc:	blt	4cb1c <__assert_fail@plt+0x3a528>
   4cae0:	mov	r2, r9
   4cae4:	ldr	r1, [pc, #80]	; 4cb3c <__assert_fail@plt+0x3a548>
   4cae8:	mov	r0, sp
   4caec:	bl	124b0 <sprintf@plt>
   4caf0:	mov	r1, r6
   4caf4:	mov	r0, sp
   4caf8:	bl	123f0 <access@plt>
   4cafc:	cmp	r0, #0
   4cb00:	moveq	r3, #1
   4cb04:	mvnne	r3, #0
   4cb08:	mov	r0, r9
   4cb0c:	str	r3, [r8]
   4cb10:	bl	125ac <close@plt>
   4cb14:	ldr	r6, [r8]
   4cb18:	b	4ca74 <__assert_fail@plt+0x3a480>
   4cb1c:	mvn	r3, #0
   4cb20:	mov	r0, r6
   4cb24:	str	r3, [r8]
   4cb28:	b	4cab0 <__assert_fail@plt+0x3a4bc>
   4cb2c:	andeq	r4, r6, ip, lsr lr
   4cb30:	andeq	r3, r5, r4, ror sp
   4cb34:	andeq	r4, r8, r0, lsl #18
   4cb38:	andeq	r2, r5, r8, lsl r0
   4cb3c:	andeq	r3, r5, ip, asr sp
   4cb40:	ldrb	r3, [r0]
   4cb44:	cmp	r3, #47	; 0x2f
   4cb48:	bne	4cb58 <__assert_fail@plt+0x3a564>
   4cb4c:	ldrb	r3, [r0, #1]!
   4cb50:	cmp	r3, #47	; 0x2f
   4cb54:	beq	4cb4c <__assert_fail@plt+0x3a558>
   4cb58:	cmp	r3, #0
   4cb5c:	bxeq	lr
   4cb60:	mov	r2, #0
   4cb64:	push	{lr}		; (str lr, [sp, #-4]!)
   4cb68:	mov	ip, r2
   4cb6c:	mov	r1, r0
   4cb70:	mov	lr, #1
   4cb74:	cmp	r3, #47	; 0x2f
   4cb78:	moveq	r2, lr
   4cb7c:	beq	4cb8c <__assert_fail@plt+0x3a598>
   4cb80:	cmp	r2, #0
   4cb84:	movne	r0, r1
   4cb88:	movne	r2, ip
   4cb8c:	ldrb	r3, [r1, #1]!
   4cb90:	cmp	r3, #0
   4cb94:	bne	4cb74 <__assert_fail@plt+0x3a580>
   4cb98:	pop	{pc}		; (ldr pc, [sp], #4)
   4cb9c:	push	{r4, lr}
   4cba0:	mov	r4, r0
   4cba4:	bl	12300 <strlen@plt>
   4cba8:	cmp	r0, #1
   4cbac:	popls	{r4, pc}
   4cbb0:	sub	r3, r0, #1
   4cbb4:	add	r2, r4, r3
   4cbb8:	ldrb	r1, [r4, r3]
   4cbbc:	cmp	r1, #47	; 0x2f
   4cbc0:	popne	{r4, pc}
   4cbc4:	cmp	r3, #1
   4cbc8:	beq	4cbdc <__assert_fail@plt+0x3a5e8>
   4cbcc:	ldrb	r1, [r2, #-1]!
   4cbd0:	sub	r0, r3, #1
   4cbd4:	cmp	r1, #47	; 0x2f
   4cbd8:	beq	4cbe4 <__assert_fail@plt+0x3a5f0>
   4cbdc:	mov	r0, r3
   4cbe0:	pop	{r4, pc}
   4cbe4:	mov	r3, r0
   4cbe8:	b	4cbc4 <__assert_fail@plt+0x3a5d0>
   4cbec:	push	{r4, r5, r6, lr}
   4cbf0:	mov	r4, r0
   4cbf4:	bl	121c8 <__fpending@plt>
   4cbf8:	mov	r6, r0
   4cbfc:	mov	r0, r4
   4cc00:	bl	11fe8 <ferror@plt>
   4cc04:	mov	r5, r0
   4cc08:	mov	r0, r4
   4cc0c:	bl	123fc <fclose@plt>
   4cc10:	cmp	r5, #0
   4cc14:	mov	r4, r0
   4cc18:	bne	4cc38 <__assert_fail@plt+0x3a644>
   4cc1c:	cmp	r0, #0
   4cc20:	beq	4cc30 <__assert_fail@plt+0x3a63c>
   4cc24:	cmp	r6, #0
   4cc28:	beq	4cc54 <__assert_fail@plt+0x3a660>
   4cc2c:	mvn	r4, #0
   4cc30:	mov	r0, r4
   4cc34:	pop	{r4, r5, r6, pc}
   4cc38:	cmp	r0, #0
   4cc3c:	bne	4cc2c <__assert_fail@plt+0x3a638>
   4cc40:	bl	12348 <__errno_location@plt>
   4cc44:	str	r4, [r0]
   4cc48:	mvn	r4, #0
   4cc4c:	mov	r0, r4
   4cc50:	pop	{r4, r5, r6, pc}
   4cc54:	bl	12348 <__errno_location@plt>
   4cc58:	ldr	r4, [r0]
   4cc5c:	subs	r4, r4, #9
   4cc60:	mvnne	r4, #0
   4cc64:	mov	r0, r4
   4cc68:	pop	{r4, r5, r6, pc}
   4cc6c:	push	{r4, r5}
   4cc70:	mov	r4, #0
   4cc74:	mov	r5, #0
   4cc78:	ldr	r3, [pc, #12]	; 4cc8c <__assert_fail@plt+0x3a698>
   4cc7c:	strd	r4, [r0, #16]
   4cc80:	str	r3, [r0, #24]
   4cc84:	pop	{r4, r5}
   4cc88:	bx	lr
   4cc8c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   4cc90:	ldr	r3, [pc, #180]	; 4cd4c <__assert_fail@plt+0x3a758>
   4cc94:	ldr	r2, [r0, #24]
   4cc98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4cc9c:	cmp	r2, r3
   4cca0:	bne	4cd38 <__assert_fail@plt+0x3a744>
   4cca4:	ldrd	r6, [r0, #16]
   4cca8:	orrs	r3, r6, r7
   4ccac:	bne	4ccd8 <__assert_fail@plt+0x3a6e4>
   4ccb0:	mov	r2, #1
   4ccb4:	mov	r3, #0
   4ccb8:	ldrd	r8, [r1, #96]	; 0x60
   4ccbc:	strd	r2, [r0, #16]
   4ccc0:	ldrd	r2, [r1]
   4ccc4:	mov	r1, #0
   4ccc8:	strd	r8, [r0]
   4cccc:	strd	r2, [r0, #8]
   4ccd0:	mov	r0, r1
   4ccd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4ccd8:	ldrd	r8, [r1, #96]	; 0x60
   4ccdc:	ldrd	r2, [r0]
   4cce0:	cmp	r9, r3
   4cce4:	cmpeq	r8, r2
   4cce8:	beq	4cd20 <__assert_fail@plt+0x3a72c>
   4ccec:	adds	r2, r6, #1
   4ccf0:	adc	r3, r7, #0
   4ccf4:	and	r6, r6, r2
   4ccf8:	and	r7, r7, r3
   4ccfc:	orrs	ip, r6, r7
   4cd00:	strd	r2, [r0, #16]
   4cd04:	movne	r1, #0
   4cd08:	bne	4ccd0 <__assert_fail@plt+0x3a6dc>
   4cd0c:	orrs	r3, r2, r3
   4cd10:	bne	4ccc0 <__assert_fail@plt+0x3a6cc>
   4cd14:	mov	r1, #1
   4cd18:	mov	r0, r1
   4cd1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4cd20:	ldrd	r4, [r1]
   4cd24:	ldrd	r2, [r0, #8]
   4cd28:	cmp	r5, r3
   4cd2c:	cmpeq	r4, r2
   4cd30:	bne	4ccec <__assert_fail@plt+0x3a6f8>
   4cd34:	b	4cd14 <__assert_fail@plt+0x3a720>
   4cd38:	ldr	r3, [pc, #16]	; 4cd50 <__assert_fail@plt+0x3a75c>
   4cd3c:	mov	r2, #60	; 0x3c
   4cd40:	ldr	r1, [pc, #12]	; 4cd54 <__assert_fail@plt+0x3a760>
   4cd44:	ldr	r0, [pc, #12]	; 4cd58 <__assert_fail@plt+0x3a764>
   4cd48:	bl	125f4 <__assert_fail@plt>
   4cd4c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   4cd50:	andeq	r3, r5, r8, lsl #27
   4cd54:	muleq	r5, r4, sp
   4cd58:	andeq	r3, r5, r4, lsr #27
   4cd5c:	ldr	ip, [r0, #4]
   4cd60:	cmp	ip, r1
   4cd64:	bcs	4cde0 <__assert_fail@plt+0x3a7ec>
   4cd68:	cmp	r3, #0
   4cd6c:	push	{r4, r5, r6, r7, r8, lr}
   4cd70:	mov	r6, r3
   4cd74:	mov	r7, r2
   4cd78:	mov	r5, r1
   4cd7c:	mov	r4, r0
   4cd80:	bne	4cdb4 <__assert_fail@plt+0x3a7c0>
   4cd84:	ldr	r0, [r4, #8]
   4cd88:	mul	r1, r6, r5
   4cd8c:	cmp	r0, r7
   4cd90:	beq	4cdf0 <__assert_fail@plt+0x3a7fc>
   4cd94:	bl	3aacc <__assert_fail@plt+0x284d8>
   4cd98:	subs	r7, r0, #0
   4cd9c:	beq	4ce1c <__assert_fail@plt+0x3a828>
   4cda0:	mov	r3, #1
   4cda4:	stmib	r4, {r5, r7}
   4cda8:	str	r5, [r4]
   4cdac:	mov	r0, r3
   4cdb0:	pop	{r4, r5, r6, r7, r8, pc}
   4cdb4:	mov	r1, r3
   4cdb8:	mvn	r0, #0
   4cdbc:	bl	4d384 <__assert_fail@plt+0x3ad90>
   4cdc0:	cmp	r5, r0
   4cdc4:	bls	4cd84 <__assert_fail@plt+0x3a790>
   4cdc8:	bl	12348 <__errno_location@plt>
   4cdcc:	mov	r3, #0
   4cdd0:	mov	r2, #12
   4cdd4:	str	r2, [r0]
   4cdd8:	mov	r0, r3
   4cddc:	pop	{r4, r5, r6, r7, r8, pc}
   4cde0:	mov	r3, #1
   4cde4:	str	r1, [r0]
   4cde8:	mov	r0, r3
   4cdec:	bx	lr
   4cdf0:	mov	r0, r1
   4cdf4:	bl	3a010 <__assert_fail@plt+0x27a1c>
   4cdf8:	subs	r7, r0, #0
   4cdfc:	beq	4ce1c <__assert_fail@plt+0x3a828>
   4ce00:	ldr	r1, [r4, #8]
   4ce04:	cmp	r1, #0
   4ce08:	beq	4cda0 <__assert_fail@plt+0x3a7ac>
   4ce0c:	ldr	r2, [r4]
   4ce10:	mul	r2, r2, r6
   4ce14:	bl	12024 <memcpy@plt>
   4ce18:	b	4cda0 <__assert_fail@plt+0x3a7ac>
   4ce1c:	mov	r3, #0
   4ce20:	b	4cdac <__assert_fail@plt+0x3a7b8>
   4ce24:	mov	r1, r0
   4ce28:	mov	r0, #0
   4ce2c:	b	1200c <clock_gettime@plt>
   4ce30:	push	{r4, r5, lr}
   4ce34:	sub	sp, sp, #12
   4ce38:	mov	r4, r0
   4ce3c:	mov	r1, sp
   4ce40:	mov	r0, #0
   4ce44:	bl	1200c <clock_gettime@plt>
   4ce48:	ldm	sp, {r0, r1}
   4ce4c:	stm	r4, {r0, r1}
   4ce50:	mov	r0, r4
   4ce54:	add	sp, sp, #12
   4ce58:	pop	{r4, r5, pc}
   4ce5c:	push	{lr}		; (str lr, [sp, #-4]!)
   4ce60:	sub	sp, sp, #268	; 0x10c
   4ce64:	add	r1, sp, #4
   4ce68:	ldr	r2, [pc, #60]	; 4ceac <__assert_fail@plt+0x3a8b8>
   4ce6c:	bl	4d2ec <__assert_fail@plt+0x3acf8>
   4ce70:	cmp	r0, #0
   4ce74:	movne	r0, #0
   4ce78:	bne	4cea4 <__assert_fail@plt+0x3a8b0>
   4ce7c:	ldr	r1, [pc, #44]	; 4ceb0 <__assert_fail@plt+0x3a8bc>
   4ce80:	add	r0, sp, #4
   4ce84:	bl	11f40 <strcmp@plt>
   4ce88:	cmp	r0, #0
   4ce8c:	beq	4cea4 <__assert_fail@plt+0x3a8b0>
   4ce90:	add	r0, sp, #4
   4ce94:	ldr	r1, [pc, #24]	; 4ceb4 <__assert_fail@plt+0x3a8c0>
   4ce98:	bl	11f40 <strcmp@plt>
   4ce9c:	adds	r0, r0, #0
   4cea0:	movne	r0, #1
   4cea4:	add	sp, sp, #268	; 0x10c
   4cea8:	pop	{pc}		; (ldr pc, [sp], #4)
   4ceac:	andeq	r0, r0, r1, lsl #2
   4ceb0:	andeq	r3, r5, r4, lsl #3
   4ceb4:			; <UNDEFINED> instruction: 0x00053dbc
   4ceb8:	mov	r3, #0
   4cebc:	mov	r2, #1
   4cec0:	str	r1, [r0]
   4cec4:	str	r1, [r0, #4]
   4cec8:	str	r1, [r0, #8]
   4cecc:	str	r1, [r0, #12]
   4ced0:	str	r1, [r0, #16]
   4ced4:	strb	r2, [r0, #28]
   4ced8:	str	r3, [r0, #20]
   4cedc:	str	r3, [r0, #24]
   4cee0:	bx	lr
   4cee4:	ldrb	r0, [r0, #28]
   4cee8:	bx	lr
   4ceec:	ldrb	ip, [r0, #28]
   4cef0:	ldr	r3, [r0, #20]
   4cef4:	mov	r2, r0
   4cef8:	eor	ip, ip, #1
   4cefc:	add	r3, ip, r3
   4cf00:	and	r3, r3, #3
   4cf04:	ldr	r0, [r0, r3, lsl #2]
   4cf08:	str	r1, [r2, r3, lsl #2]
   4cf0c:	ldr	r1, [r2, #24]
   4cf10:	str	r3, [r2, #20]
   4cf14:	cmp	r3, r1
   4cf18:	addeq	r3, ip, r3
   4cf1c:	andeq	r3, r3, #3
   4cf20:	streq	r3, [r2, #24]
   4cf24:	mov	r3, #0
   4cf28:	strb	r3, [r2, #28]
   4cf2c:	bx	lr
   4cf30:	ldrb	r3, [r0, #28]
   4cf34:	cmp	r3, #0
   4cf38:	bne	4cf70 <__assert_fail@plt+0x3a97c>
   4cf3c:	ldr	r3, [r0, #20]
   4cf40:	ldr	r1, [r0, #16]
   4cf44:	ldr	r2, [r0, r3, lsl #2]
   4cf48:	str	r1, [r0, r3, lsl #2]
   4cf4c:	ldr	r1, [r0, #24]
   4cf50:	cmp	r3, r1
   4cf54:	addne	r3, r3, #3
   4cf58:	moveq	r3, #1
   4cf5c:	andne	r3, r3, #3
   4cf60:	strbeq	r3, [r0, #28]
   4cf64:	strne	r3, [r0, #20]
   4cf68:	mov	r0, r2
   4cf6c:	bx	lr
   4cf70:	push	{r4, lr}
   4cf74:	bl	125a0 <abort@plt>
   4cf78:	push	{r4, lr}
   4cf7c:	mov	r0, #14
   4cf80:	bl	12480 <nl_langinfo@plt>
   4cf84:	cmp	r0, #0
   4cf88:	beq	4cfa0 <__assert_fail@plt+0x3a9ac>
   4cf8c:	ldrb	r2, [r0]
   4cf90:	ldr	r3, [pc, #16]	; 4cfa8 <__assert_fail@plt+0x3a9b4>
   4cf94:	cmp	r2, #0
   4cf98:	moveq	r0, r3
   4cf9c:	pop	{r4, pc}
   4cfa0:	ldr	r0, [pc]	; 4cfa8 <__assert_fail@plt+0x3a9b4>
   4cfa4:	pop	{r4, pc}
   4cfa8:	andeq	r3, r5, r4, asr #27
   4cfac:	cmn	r0, #-2147483631	; 0x80000011
   4cfb0:	bls	4cfbc <__assert_fail@plt+0x3a9c8>
   4cfb4:	mov	r0, #0
   4cfb8:	bx	lr
   4cfbc:	push	{r4, lr}
   4cfc0:	add	r0, r0, #16
   4cfc4:	bl	12240 <malloc@plt>
   4cfc8:	cmp	r0, #0
   4cfcc:	beq	4cff4 <__assert_fail@plt+0x3aa00>
   4cfd0:	cmn	r0, #9
   4cfd4:	addls	r3, r0, #8
   4cfd8:	bicls	r2, r3, #15
   4cfdc:	movhi	r2, #0
   4cfe0:	rsb	r3, r0, #8
   4cfe4:	add	r3, r3, r2
   4cfe8:	add	r0, r0, r3
   4cfec:	strb	r3, [r0, #-1]
   4cff0:	pop	{r4, pc}
   4cff4:	mov	r0, #0
   4cff8:	pop	{r4, pc}
   4cffc:	tst	r0, #7
   4d000:	bne	4d018 <__assert_fail@plt+0x3aa24>
   4d004:	tst	r0, #8
   4d008:	bxeq	lr
   4d00c:	ldrb	r3, [r0, #-1]
   4d010:	sub	r0, r0, r3
   4d014:	b	376d0 <__assert_fail@plt+0x250dc>
   4d018:	push	{r4, lr}
   4d01c:	bl	125a0 <abort@plt>
   4d020:	push	{r4, lr}
   4d024:	mov	r4, r0
   4d028:	bl	11fa0 <wcwidth@plt>
   4d02c:	cmp	r0, #0
   4d030:	popge	{r4, pc}
   4d034:	mov	r0, r4
   4d038:	bl	12114 <iswcntrl@plt>
   4d03c:	clz	r0, r0
   4d040:	lsr	r0, r0, #5
   4d044:	pop	{r4, pc}
   4d048:	mov	r3, r1
   4d04c:	push	{r4, r5, r6, lr}
   4d050:	mov	r4, r1
   4d054:	ldr	r1, [r3], #16
   4d058:	mov	r5, r0
   4d05c:	cmp	r1, r3
   4d060:	strne	r1, [r0]
   4d064:	beq	4d088 <__assert_fail@plt+0x3aa94>
   4d068:	ldrb	r3, [r4, #8]
   4d06c:	ldr	r2, [r4, #4]
   4d070:	cmp	r3, #0
   4d074:	strb	r3, [r5, #8]
   4d078:	ldrne	r3, [r4, #12]
   4d07c:	str	r2, [r5, #4]
   4d080:	strne	r3, [r5, #12]
   4d084:	pop	{r4, r5, r6, pc}
   4d088:	add	r3, r0, #16
   4d08c:	mov	r0, r3
   4d090:	ldr	r2, [r4, #4]
   4d094:	bl	12024 <memcpy@plt>
   4d098:	str	r0, [r5]
   4d09c:	b	4d068 <__assert_fail@plt+0x3aa74>
   4d0a0:	ldr	r3, [pc, #20]	; 4d0bc <__assert_fail@plt+0x3aac8>
   4d0a4:	lsr	r2, r0, #5
   4d0a8:	and	r0, r0, #31
   4d0ac:	ldr	r3, [r3, r2, lsl #2]
   4d0b0:	lsr	r0, r3, r0
   4d0b4:	and	r0, r0, #1
   4d0b8:	bx	lr
   4d0bc:	andeq	r3, r5, ip, asr #27
   4d0c0:	push	{r4, r5, r6, r7, r8, lr}
   4d0c4:	sub	sp, sp, #56	; 0x38
   4d0c8:	mov	r4, r0
   4d0cc:	bl	12198 <__ctype_get_mb_cur_max@plt>
   4d0d0:	cmp	r0, #1
   4d0d4:	bls	4d240 <__assert_fail@plt+0x3ac4c>
   4d0d8:	mov	r3, #0
   4d0dc:	ldr	r8, [pc, #412]	; 4d280 <__assert_fail@plt+0x3ac8c>
   4d0e0:	mov	r5, r3
   4d0e4:	mov	r6, r3
   4d0e8:	mov	r7, #1
   4d0ec:	str	r4, [sp, #16]
   4d0f0:	strb	r3, [sp]
   4d0f4:	str	r3, [sp, #4]
   4d0f8:	strb	r3, [sp, #12]
   4d0fc:	str	r3, [sp, #8]
   4d100:	ldrb	r3, [sp]
   4d104:	cmp	r3, #0
   4d108:	bne	4d160 <__assert_fail@plt+0x3ab6c>
   4d10c:	ldrb	r3, [r4]
   4d110:	and	r2, r3, #31
   4d114:	lsr	r3, r3, #5
   4d118:	ldr	r3, [r8, r3, lsl #2]
   4d11c:	lsr	r3, r3, r2
   4d120:	tst	r3, #1
   4d124:	beq	4d14c <__assert_fail@plt+0x3ab58>
   4d128:	str	r7, [sp, #20]
   4d12c:	ldrb	r4, [r4]
   4d130:	strb	r7, [sp, #24]
   4d134:	cmp	r4, #0
   4d138:	str	r4, [sp, #28]
   4d13c:	bne	4d1c0 <__assert_fail@plt+0x3abcc>
   4d140:	mov	r0, r5
   4d144:	add	sp, sp, #56	; 0x38
   4d148:	pop	{r4, r5, r6, r7, r8, pc}
   4d14c:	add	r0, sp, #4
   4d150:	bl	12060 <mbsinit@plt>
   4d154:	cmp	r0, #0
   4d158:	beq	4d258 <__assert_fail@plt+0x3ac64>
   4d15c:	strb	r7, [sp]
   4d160:	bl	12198 <__ctype_get_mb_cur_max@plt>
   4d164:	mov	r1, r0
   4d168:	mov	r0, r4
   4d16c:	bl	34c74 <__assert_fail@plt+0x22680>
   4d170:	add	r3, sp, #4
   4d174:	mov	r1, r4
   4d178:	mov	r2, r0
   4d17c:	add	r0, sp, #28
   4d180:	bl	3a03c <__assert_fail@plt+0x27a48>
   4d184:	cmn	r0, #1
   4d188:	str	r0, [sp, #20]
   4d18c:	beq	4d1dc <__assert_fail@plt+0x3abe8>
   4d190:	cmn	r0, #2
   4d194:	beq	4d224 <__assert_fail@plt+0x3ac30>
   4d198:	cmp	r0, #0
   4d19c:	beq	4d1f0 <__assert_fail@plt+0x3abfc>
   4d1a0:	ldr	r4, [sp, #28]
   4d1a4:	add	r0, sp, #4
   4d1a8:	strb	r7, [sp, #24]
   4d1ac:	bl	12060 <mbsinit@plt>
   4d1b0:	cmp	r0, #0
   4d1b4:	strbne	r6, [sp]
   4d1b8:	cmp	r4, #0
   4d1bc:	beq	4d140 <__assert_fail@plt+0x3ab4c>
   4d1c0:	ldr	r4, [sp, #16]
   4d1c4:	ldr	r3, [sp, #20]
   4d1c8:	add	r4, r4, r3
   4d1cc:	add	r5, r5, #1
   4d1d0:	strb	r6, [sp, #12]
   4d1d4:	str	r4, [sp, #16]
   4d1d8:	b	4d100 <__assert_fail@plt+0x3ab0c>
   4d1dc:	str	r7, [sp, #20]
   4d1e0:	strb	r6, [sp, #24]
   4d1e4:	ldr	r4, [sp, #16]
   4d1e8:	mov	r3, r7
   4d1ec:	b	4d1c8 <__assert_fail@plt+0x3abd4>
   4d1f0:	ldr	r4, [sp, #16]
   4d1f4:	str	r7, [sp, #20]
   4d1f8:	ldrb	r3, [r4]
   4d1fc:	cmp	r3, #0
   4d200:	bne	4d26c <__assert_fail@plt+0x3ac78>
   4d204:	ldr	r4, [sp, #28]
   4d208:	cmp	r4, #0
   4d20c:	beq	4d1a4 <__assert_fail@plt+0x3abb0>
   4d210:	ldr	r3, [pc, #108]	; 4d284 <__assert_fail@plt+0x3ac90>
   4d214:	mov	r2, #172	; 0xac
   4d218:	ldr	r1, [pc, #104]	; 4d288 <__assert_fail@plt+0x3ac94>
   4d21c:	ldr	r0, [pc, #104]	; 4d28c <__assert_fail@plt+0x3ac98>
   4d220:	bl	125f4 <__assert_fail@plt>
   4d224:	ldr	r4, [sp, #16]
   4d228:	mov	r0, r4
   4d22c:	bl	12300 <strlen@plt>
   4d230:	strb	r6, [sp, #24]
   4d234:	str	r0, [sp, #20]
   4d238:	mov	r3, r0
   4d23c:	b	4d1c8 <__assert_fail@plt+0x3abd4>
   4d240:	mov	r0, r4
   4d244:	bl	12300 <strlen@plt>
   4d248:	mov	r5, r0
   4d24c:	mov	r0, r5
   4d250:	add	sp, sp, #56	; 0x38
   4d254:	pop	{r4, r5, r6, r7, r8, pc}
   4d258:	ldr	r3, [pc, #36]	; 4d284 <__assert_fail@plt+0x3ac90>
   4d25c:	mov	r2, #143	; 0x8f
   4d260:	ldr	r1, [pc, #32]	; 4d288 <__assert_fail@plt+0x3ac94>
   4d264:	ldr	r0, [pc, #36]	; 4d290 <__assert_fail@plt+0x3ac9c>
   4d268:	bl	125f4 <__assert_fail@plt>
   4d26c:	ldr	r3, [pc, #16]	; 4d284 <__assert_fail@plt+0x3ac90>
   4d270:	mov	r2, #171	; 0xab
   4d274:	ldr	r1, [pc, #12]	; 4d288 <__assert_fail@plt+0x3ac94>
   4d278:	ldr	r0, [pc, #20]	; 4d294 <__assert_fail@plt+0x3aca0>
   4d27c:	bl	125f4 <__assert_fail@plt>
   4d280:	andeq	r3, r5, ip, asr #27
   4d284:	andeq	r3, r5, ip, ror #27
   4d288:	andeq	r2, r5, ip, asr #11
   4d28c:	andeq	r2, r5, r8, lsl #12
   4d290:	ldrdeq	r2, [r5], -r8
   4d294:	strdeq	r2, [r5], -r0
   4d298:	orr	r2, r2, #540672	; 0x84000
   4d29c:	push	{r4, r5, r6, lr}
   4d2a0:	orr	r2, r2, #2304	; 0x900
   4d2a4:	mov	r6, r3
   4d2a8:	bl	2bb5c <__assert_fail@plt+0x19568>
   4d2ac:	subs	r5, r0, #0
   4d2b0:	blt	4d2e4 <__assert_fail@plt+0x3acf0>
   4d2b4:	bl	124c8 <fdopendir@plt>
   4d2b8:	subs	r4, r0, #0
   4d2bc:	beq	4d2cc <__assert_fail@plt+0x3acd8>
   4d2c0:	str	r5, [r6]
   4d2c4:	mov	r0, r4
   4d2c8:	pop	{r4, r5, r6, pc}
   4d2cc:	bl	12348 <__errno_location@plt>
   4d2d0:	mov	r6, r0
   4d2d4:	mov	r0, r5
   4d2d8:	ldr	r5, [r6]
   4d2dc:	bl	125ac <close@plt>
   4d2e0:	b	4d2c0 <__assert_fail@plt+0x3accc>
   4d2e4:	mov	r4, #0
   4d2e8:	b	4d2c4 <__assert_fail@plt+0x3acd0>
   4d2ec:	push	{r4, r5, r6, lr}
   4d2f0:	mov	r5, r1
   4d2f4:	mov	r1, #0
   4d2f8:	mov	r4, r2
   4d2fc:	bl	12444 <setlocale@plt>
   4d300:	subs	r6, r0, #0
   4d304:	beq	4d360 <__assert_fail@plt+0x3ad6c>
   4d308:	bl	12300 <strlen@plt>
   4d30c:	cmp	r4, r0
   4d310:	bhi	4d348 <__assert_fail@plt+0x3ad54>
   4d314:	cmp	r4, #0
   4d318:	bne	4d324 <__assert_fail@plt+0x3ad30>
   4d31c:	mov	r0, #34	; 0x22
   4d320:	pop	{r4, r5, r6, pc}
   4d324:	sub	r4, r4, #1
   4d328:	mov	r1, r6
   4d32c:	mov	r2, r4
   4d330:	mov	r0, r5
   4d334:	bl	12024 <memcpy@plt>
   4d338:	mov	r3, #0
   4d33c:	strb	r3, [r5, r4]
   4d340:	mov	r0, #34	; 0x22
   4d344:	pop	{r4, r5, r6, pc}
   4d348:	add	r2, r0, #1
   4d34c:	mov	r1, r6
   4d350:	mov	r0, r5
   4d354:	bl	12024 <memcpy@plt>
   4d358:	mov	r0, #0
   4d35c:	pop	{r4, r5, r6, pc}
   4d360:	cmp	r4, #0
   4d364:	beq	4d374 <__assert_fail@plt+0x3ad80>
   4d368:	strb	r6, [r5]
   4d36c:	mov	r0, #22
   4d370:	pop	{r4, r5, r6, pc}
   4d374:	mov	r0, #22
   4d378:	pop	{r4, r5, r6, pc}
   4d37c:	mov	r1, #0
   4d380:	b	12444 <setlocale@plt>
   4d384:	subs	r2, r1, #1
   4d388:	bxeq	lr
   4d38c:	bcc	4d564 <__assert_fail@plt+0x3af70>
   4d390:	cmp	r0, r1
   4d394:	bls	4d548 <__assert_fail@plt+0x3af54>
   4d398:	tst	r1, r2
   4d39c:	beq	4d554 <__assert_fail@plt+0x3af60>
   4d3a0:	clz	r3, r0
   4d3a4:	clz	r2, r1
   4d3a8:	sub	r3, r2, r3
   4d3ac:	rsbs	r3, r3, #31
   4d3b0:	addne	r3, r3, r3, lsl #1
   4d3b4:	mov	r2, #0
   4d3b8:	addne	pc, pc, r3, lsl #2
   4d3bc:	nop			; (mov r0, r0)
   4d3c0:	cmp	r0, r1, lsl #31
   4d3c4:	adc	r2, r2, r2
   4d3c8:	subcs	r0, r0, r1, lsl #31
   4d3cc:	cmp	r0, r1, lsl #30
   4d3d0:	adc	r2, r2, r2
   4d3d4:	subcs	r0, r0, r1, lsl #30
   4d3d8:	cmp	r0, r1, lsl #29
   4d3dc:	adc	r2, r2, r2
   4d3e0:	subcs	r0, r0, r1, lsl #29
   4d3e4:	cmp	r0, r1, lsl #28
   4d3e8:	adc	r2, r2, r2
   4d3ec:	subcs	r0, r0, r1, lsl #28
   4d3f0:	cmp	r0, r1, lsl #27
   4d3f4:	adc	r2, r2, r2
   4d3f8:	subcs	r0, r0, r1, lsl #27
   4d3fc:	cmp	r0, r1, lsl #26
   4d400:	adc	r2, r2, r2
   4d404:	subcs	r0, r0, r1, lsl #26
   4d408:	cmp	r0, r1, lsl #25
   4d40c:	adc	r2, r2, r2
   4d410:	subcs	r0, r0, r1, lsl #25
   4d414:	cmp	r0, r1, lsl #24
   4d418:	adc	r2, r2, r2
   4d41c:	subcs	r0, r0, r1, lsl #24
   4d420:	cmp	r0, r1, lsl #23
   4d424:	adc	r2, r2, r2
   4d428:	subcs	r0, r0, r1, lsl #23
   4d42c:	cmp	r0, r1, lsl #22
   4d430:	adc	r2, r2, r2
   4d434:	subcs	r0, r0, r1, lsl #22
   4d438:	cmp	r0, r1, lsl #21
   4d43c:	adc	r2, r2, r2
   4d440:	subcs	r0, r0, r1, lsl #21
   4d444:	cmp	r0, r1, lsl #20
   4d448:	adc	r2, r2, r2
   4d44c:	subcs	r0, r0, r1, lsl #20
   4d450:	cmp	r0, r1, lsl #19
   4d454:	adc	r2, r2, r2
   4d458:	subcs	r0, r0, r1, lsl #19
   4d45c:	cmp	r0, r1, lsl #18
   4d460:	adc	r2, r2, r2
   4d464:	subcs	r0, r0, r1, lsl #18
   4d468:	cmp	r0, r1, lsl #17
   4d46c:	adc	r2, r2, r2
   4d470:	subcs	r0, r0, r1, lsl #17
   4d474:	cmp	r0, r1, lsl #16
   4d478:	adc	r2, r2, r2
   4d47c:	subcs	r0, r0, r1, lsl #16
   4d480:	cmp	r0, r1, lsl #15
   4d484:	adc	r2, r2, r2
   4d488:	subcs	r0, r0, r1, lsl #15
   4d48c:	cmp	r0, r1, lsl #14
   4d490:	adc	r2, r2, r2
   4d494:	subcs	r0, r0, r1, lsl #14
   4d498:	cmp	r0, r1, lsl #13
   4d49c:	adc	r2, r2, r2
   4d4a0:	subcs	r0, r0, r1, lsl #13
   4d4a4:	cmp	r0, r1, lsl #12
   4d4a8:	adc	r2, r2, r2
   4d4ac:	subcs	r0, r0, r1, lsl #12
   4d4b0:	cmp	r0, r1, lsl #11
   4d4b4:	adc	r2, r2, r2
   4d4b8:	subcs	r0, r0, r1, lsl #11
   4d4bc:	cmp	r0, r1, lsl #10
   4d4c0:	adc	r2, r2, r2
   4d4c4:	subcs	r0, r0, r1, lsl #10
   4d4c8:	cmp	r0, r1, lsl #9
   4d4cc:	adc	r2, r2, r2
   4d4d0:	subcs	r0, r0, r1, lsl #9
   4d4d4:	cmp	r0, r1, lsl #8
   4d4d8:	adc	r2, r2, r2
   4d4dc:	subcs	r0, r0, r1, lsl #8
   4d4e0:	cmp	r0, r1, lsl #7
   4d4e4:	adc	r2, r2, r2
   4d4e8:	subcs	r0, r0, r1, lsl #7
   4d4ec:	cmp	r0, r1, lsl #6
   4d4f0:	adc	r2, r2, r2
   4d4f4:	subcs	r0, r0, r1, lsl #6
   4d4f8:	cmp	r0, r1, lsl #5
   4d4fc:	adc	r2, r2, r2
   4d500:	subcs	r0, r0, r1, lsl #5
   4d504:	cmp	r0, r1, lsl #4
   4d508:	adc	r2, r2, r2
   4d50c:	subcs	r0, r0, r1, lsl #4
   4d510:	cmp	r0, r1, lsl #3
   4d514:	adc	r2, r2, r2
   4d518:	subcs	r0, r0, r1, lsl #3
   4d51c:	cmp	r0, r1, lsl #2
   4d520:	adc	r2, r2, r2
   4d524:	subcs	r0, r0, r1, lsl #2
   4d528:	cmp	r0, r1, lsl #1
   4d52c:	adc	r2, r2, r2
   4d530:	subcs	r0, r0, r1, lsl #1
   4d534:	cmp	r0, r1
   4d538:	adc	r2, r2, r2
   4d53c:	subcs	r0, r0, r1
   4d540:	mov	r0, r2
   4d544:	bx	lr
   4d548:	moveq	r0, #1
   4d54c:	movne	r0, #0
   4d550:	bx	lr
   4d554:	clz	r2, r1
   4d558:	rsb	r2, r2, #31
   4d55c:	lsr	r0, r0, r2
   4d560:	bx	lr
   4d564:	cmp	r0, #0
   4d568:	mvnne	r0, #0
   4d56c:	b	4dc98 <__assert_fail@plt+0x3b6a4>
   4d570:	cmp	r1, #0
   4d574:	beq	4d564 <__assert_fail@plt+0x3af70>
   4d578:	push	{r0, r1, lr}
   4d57c:	bl	4d384 <__assert_fail@plt+0x3ad90>
   4d580:	pop	{r1, r2, lr}
   4d584:	mul	r3, r2, r0
   4d588:	sub	r1, r1, r3
   4d58c:	bx	lr
   4d590:	cmp	r1, #0
   4d594:	beq	4d7a0 <__assert_fail@plt+0x3b1ac>
   4d598:	eor	ip, r0, r1
   4d59c:	rsbmi	r1, r1, #0
   4d5a0:	subs	r2, r1, #1
   4d5a4:	beq	4d76c <__assert_fail@plt+0x3b178>
   4d5a8:	movs	r3, r0
   4d5ac:	rsbmi	r3, r0, #0
   4d5b0:	cmp	r3, r1
   4d5b4:	bls	4d778 <__assert_fail@plt+0x3b184>
   4d5b8:	tst	r1, r2
   4d5bc:	beq	4d788 <__assert_fail@plt+0x3b194>
   4d5c0:	clz	r2, r3
   4d5c4:	clz	r0, r1
   4d5c8:	sub	r2, r0, r2
   4d5cc:	rsbs	r2, r2, #31
   4d5d0:	addne	r2, r2, r2, lsl #1
   4d5d4:	mov	r0, #0
   4d5d8:	addne	pc, pc, r2, lsl #2
   4d5dc:	nop			; (mov r0, r0)
   4d5e0:	cmp	r3, r1, lsl #31
   4d5e4:	adc	r0, r0, r0
   4d5e8:	subcs	r3, r3, r1, lsl #31
   4d5ec:	cmp	r3, r1, lsl #30
   4d5f0:	adc	r0, r0, r0
   4d5f4:	subcs	r3, r3, r1, lsl #30
   4d5f8:	cmp	r3, r1, lsl #29
   4d5fc:	adc	r0, r0, r0
   4d600:	subcs	r3, r3, r1, lsl #29
   4d604:	cmp	r3, r1, lsl #28
   4d608:	adc	r0, r0, r0
   4d60c:	subcs	r3, r3, r1, lsl #28
   4d610:	cmp	r3, r1, lsl #27
   4d614:	adc	r0, r0, r0
   4d618:	subcs	r3, r3, r1, lsl #27
   4d61c:	cmp	r3, r1, lsl #26
   4d620:	adc	r0, r0, r0
   4d624:	subcs	r3, r3, r1, lsl #26
   4d628:	cmp	r3, r1, lsl #25
   4d62c:	adc	r0, r0, r0
   4d630:	subcs	r3, r3, r1, lsl #25
   4d634:	cmp	r3, r1, lsl #24
   4d638:	adc	r0, r0, r0
   4d63c:	subcs	r3, r3, r1, lsl #24
   4d640:	cmp	r3, r1, lsl #23
   4d644:	adc	r0, r0, r0
   4d648:	subcs	r3, r3, r1, lsl #23
   4d64c:	cmp	r3, r1, lsl #22
   4d650:	adc	r0, r0, r0
   4d654:	subcs	r3, r3, r1, lsl #22
   4d658:	cmp	r3, r1, lsl #21
   4d65c:	adc	r0, r0, r0
   4d660:	subcs	r3, r3, r1, lsl #21
   4d664:	cmp	r3, r1, lsl #20
   4d668:	adc	r0, r0, r0
   4d66c:	subcs	r3, r3, r1, lsl #20
   4d670:	cmp	r3, r1, lsl #19
   4d674:	adc	r0, r0, r0
   4d678:	subcs	r3, r3, r1, lsl #19
   4d67c:	cmp	r3, r1, lsl #18
   4d680:	adc	r0, r0, r0
   4d684:	subcs	r3, r3, r1, lsl #18
   4d688:	cmp	r3, r1, lsl #17
   4d68c:	adc	r0, r0, r0
   4d690:	subcs	r3, r3, r1, lsl #17
   4d694:	cmp	r3, r1, lsl #16
   4d698:	adc	r0, r0, r0
   4d69c:	subcs	r3, r3, r1, lsl #16
   4d6a0:	cmp	r3, r1, lsl #15
   4d6a4:	adc	r0, r0, r0
   4d6a8:	subcs	r3, r3, r1, lsl #15
   4d6ac:	cmp	r3, r1, lsl #14
   4d6b0:	adc	r0, r0, r0
   4d6b4:	subcs	r3, r3, r1, lsl #14
   4d6b8:	cmp	r3, r1, lsl #13
   4d6bc:	adc	r0, r0, r0
   4d6c0:	subcs	r3, r3, r1, lsl #13
   4d6c4:	cmp	r3, r1, lsl #12
   4d6c8:	adc	r0, r0, r0
   4d6cc:	subcs	r3, r3, r1, lsl #12
   4d6d0:	cmp	r3, r1, lsl #11
   4d6d4:	adc	r0, r0, r0
   4d6d8:	subcs	r3, r3, r1, lsl #11
   4d6dc:	cmp	r3, r1, lsl #10
   4d6e0:	adc	r0, r0, r0
   4d6e4:	subcs	r3, r3, r1, lsl #10
   4d6e8:	cmp	r3, r1, lsl #9
   4d6ec:	adc	r0, r0, r0
   4d6f0:	subcs	r3, r3, r1, lsl #9
   4d6f4:	cmp	r3, r1, lsl #8
   4d6f8:	adc	r0, r0, r0
   4d6fc:	subcs	r3, r3, r1, lsl #8
   4d700:	cmp	r3, r1, lsl #7
   4d704:	adc	r0, r0, r0
   4d708:	subcs	r3, r3, r1, lsl #7
   4d70c:	cmp	r3, r1, lsl #6
   4d710:	adc	r0, r0, r0
   4d714:	subcs	r3, r3, r1, lsl #6
   4d718:	cmp	r3, r1, lsl #5
   4d71c:	adc	r0, r0, r0
   4d720:	subcs	r3, r3, r1, lsl #5
   4d724:	cmp	r3, r1, lsl #4
   4d728:	adc	r0, r0, r0
   4d72c:	subcs	r3, r3, r1, lsl #4
   4d730:	cmp	r3, r1, lsl #3
   4d734:	adc	r0, r0, r0
   4d738:	subcs	r3, r3, r1, lsl #3
   4d73c:	cmp	r3, r1, lsl #2
   4d740:	adc	r0, r0, r0
   4d744:	subcs	r3, r3, r1, lsl #2
   4d748:	cmp	r3, r1, lsl #1
   4d74c:	adc	r0, r0, r0
   4d750:	subcs	r3, r3, r1, lsl #1
   4d754:	cmp	r3, r1
   4d758:	adc	r0, r0, r0
   4d75c:	subcs	r3, r3, r1
   4d760:	cmp	ip, #0
   4d764:	rsbmi	r0, r0, #0
   4d768:	bx	lr
   4d76c:	teq	ip, r0
   4d770:	rsbmi	r0, r0, #0
   4d774:	bx	lr
   4d778:	movcc	r0, #0
   4d77c:	asreq	r0, ip, #31
   4d780:	orreq	r0, r0, #1
   4d784:	bx	lr
   4d788:	clz	r2, r1
   4d78c:	rsb	r2, r2, #31
   4d790:	cmp	ip, #0
   4d794:	lsr	r0, r3, r2
   4d798:	rsbmi	r0, r0, #0
   4d79c:	bx	lr
   4d7a0:	cmp	r0, #0
   4d7a4:	mvngt	r0, #-2147483648	; 0x80000000
   4d7a8:	movlt	r0, #-2147483648	; 0x80000000
   4d7ac:	b	4dc98 <__assert_fail@plt+0x3b6a4>
   4d7b0:	cmp	r1, #0
   4d7b4:	beq	4d7a0 <__assert_fail@plt+0x3b1ac>
   4d7b8:	push	{r0, r1, lr}
   4d7bc:	bl	4d598 <__assert_fail@plt+0x3afa4>
   4d7c0:	pop	{r1, r2, lr}
   4d7c4:	mul	r3, r2, r0
   4d7c8:	sub	r1, r1, r3
   4d7cc:	bx	lr
   4d7d0:	eor	r1, r1, #-2147483648	; 0x80000000
   4d7d4:	b	4d7dc <__assert_fail@plt+0x3b1e8>
   4d7d8:	eor	r3, r3, #-2147483648	; 0x80000000
   4d7dc:	push	{r4, r5, lr}
   4d7e0:	lsl	r4, r1, #1
   4d7e4:	lsl	r5, r3, #1
   4d7e8:	teq	r4, r5
   4d7ec:	teqeq	r0, r2
   4d7f0:	orrsne	ip, r4, r0
   4d7f4:	orrsne	ip, r5, r2
   4d7f8:	mvnsne	ip, r4, asr #21
   4d7fc:	mvnsne	ip, r5, asr #21
   4d800:	beq	4d9ec <__assert_fail@plt+0x3b3f8>
   4d804:	lsr	r4, r4, #21
   4d808:	rsbs	r5, r4, r5, lsr #21
   4d80c:	rsblt	r5, r5, #0
   4d810:	ble	4d830 <__assert_fail@plt+0x3b23c>
   4d814:	add	r4, r4, r5
   4d818:	eor	r2, r0, r2
   4d81c:	eor	r3, r1, r3
   4d820:	eor	r0, r2, r0
   4d824:	eor	r1, r3, r1
   4d828:	eor	r2, r0, r2
   4d82c:	eor	r3, r1, r3
   4d830:	cmp	r5, #54	; 0x36
   4d834:	pophi	{r4, r5, pc}
   4d838:	tst	r1, #-2147483648	; 0x80000000
   4d83c:	lsl	r1, r1, #12
   4d840:	mov	ip, #1048576	; 0x100000
   4d844:	orr	r1, ip, r1, lsr #12
   4d848:	beq	4d854 <__assert_fail@plt+0x3b260>
   4d84c:	rsbs	r0, r0, #0
   4d850:	rsc	r1, r1, #0
   4d854:	tst	r3, #-2147483648	; 0x80000000
   4d858:	lsl	r3, r3, #12
   4d85c:	orr	r3, ip, r3, lsr #12
   4d860:	beq	4d86c <__assert_fail@plt+0x3b278>
   4d864:	rsbs	r2, r2, #0
   4d868:	rsc	r3, r3, #0
   4d86c:	teq	r4, r5
   4d870:	beq	4d9d4 <__assert_fail@plt+0x3b3e0>
   4d874:	sub	r4, r4, #1
   4d878:	rsbs	lr, r5, #32
   4d87c:	blt	4d898 <__assert_fail@plt+0x3b2a4>
   4d880:	lsl	ip, r2, lr
   4d884:	adds	r0, r0, r2, lsr r5
   4d888:	adc	r1, r1, #0
   4d88c:	adds	r0, r0, r3, lsl lr
   4d890:	adcs	r1, r1, r3, asr r5
   4d894:	b	4d8b4 <__assert_fail@plt+0x3b2c0>
   4d898:	sub	r5, r5, #32
   4d89c:	add	lr, lr, #32
   4d8a0:	cmp	r2, #1
   4d8a4:	lsl	ip, r3, lr
   4d8a8:	orrcs	ip, ip, #2
   4d8ac:	adds	r0, r0, r3, asr r5
   4d8b0:	adcs	r1, r1, r3, asr #31
   4d8b4:	and	r5, r1, #-2147483648	; 0x80000000
   4d8b8:	bpl	4d8c8 <__assert_fail@plt+0x3b2d4>
   4d8bc:	rsbs	ip, ip, #0
   4d8c0:	rscs	r0, r0, #0
   4d8c4:	rsc	r1, r1, #0
   4d8c8:	cmp	r1, #1048576	; 0x100000
   4d8cc:	bcc	4d90c <__assert_fail@plt+0x3b318>
   4d8d0:	cmp	r1, #2097152	; 0x200000
   4d8d4:	bcc	4d8f4 <__assert_fail@plt+0x3b300>
   4d8d8:	lsrs	r1, r1, #1
   4d8dc:	rrxs	r0, r0
   4d8e0:	rrx	ip, ip
   4d8e4:	add	r4, r4, #1
   4d8e8:	lsl	r2, r4, #21
   4d8ec:	cmn	r2, #4194304	; 0x400000
   4d8f0:	bcs	4da4c <__assert_fail@plt+0x3b458>
   4d8f4:	cmp	ip, #-2147483648	; 0x80000000
   4d8f8:	lsrseq	ip, r0, #1
   4d8fc:	adcs	r0, r0, #0
   4d900:	adc	r1, r1, r4, lsl #20
   4d904:	orr	r1, r1, r5
   4d908:	pop	{r4, r5, pc}
   4d90c:	lsls	ip, ip, #1
   4d910:	adcs	r0, r0, r0
   4d914:	adc	r1, r1, r1
   4d918:	tst	r1, #1048576	; 0x100000
   4d91c:	sub	r4, r4, #1
   4d920:	bne	4d8f4 <__assert_fail@plt+0x3b300>
   4d924:	teq	r1, #0
   4d928:	moveq	r1, r0
   4d92c:	moveq	r0, #0
   4d930:	clz	r3, r1
   4d934:	addeq	r3, r3, #32
   4d938:	sub	r3, r3, #11
   4d93c:	subs	r2, r3, #32
   4d940:	bge	4d964 <__assert_fail@plt+0x3b370>
   4d944:	adds	r2, r2, #12
   4d948:	ble	4d960 <__assert_fail@plt+0x3b36c>
   4d94c:	add	ip, r2, #20
   4d950:	rsb	r2, r2, #12
   4d954:	lsl	r0, r1, ip
   4d958:	lsr	r1, r1, r2
   4d95c:	b	4d974 <__assert_fail@plt+0x3b380>
   4d960:	add	r2, r2, #20
   4d964:	rsble	ip, r2, #32
   4d968:	lsl	r1, r1, r2
   4d96c:	orrle	r1, r1, r0, lsr ip
   4d970:	lslle	r0, r0, r2
   4d974:	subs	r4, r4, r3
   4d978:	addge	r1, r1, r4, lsl #20
   4d97c:	orrge	r1, r1, r5
   4d980:	popge	{r4, r5, pc}
   4d984:	mvn	r4, r4
   4d988:	subs	r4, r4, #31
   4d98c:	bge	4d9c8 <__assert_fail@plt+0x3b3d4>
   4d990:	adds	r4, r4, #12
   4d994:	bgt	4d9b0 <__assert_fail@plt+0x3b3bc>
   4d998:	add	r4, r4, #20
   4d99c:	rsb	r2, r4, #32
   4d9a0:	lsr	r0, r0, r4
   4d9a4:	orr	r0, r0, r1, lsl r2
   4d9a8:	orr	r1, r5, r1, lsr r4
   4d9ac:	pop	{r4, r5, pc}
   4d9b0:	rsb	r4, r4, #12
   4d9b4:	rsb	r2, r4, #32
   4d9b8:	lsr	r0, r0, r2
   4d9bc:	orr	r0, r0, r1, lsl r4
   4d9c0:	mov	r1, r5
   4d9c4:	pop	{r4, r5, pc}
   4d9c8:	lsr	r0, r1, r4
   4d9cc:	mov	r1, r5
   4d9d0:	pop	{r4, r5, pc}
   4d9d4:	teq	r4, #0
   4d9d8:	eor	r3, r3, #1048576	; 0x100000
   4d9dc:	eoreq	r1, r1, #1048576	; 0x100000
   4d9e0:	addeq	r4, r4, #1
   4d9e4:	subne	r5, r5, #1
   4d9e8:	b	4d874 <__assert_fail@plt+0x3b280>
   4d9ec:	mvns	ip, r4, asr #21
   4d9f0:	mvnsne	ip, r5, asr #21
   4d9f4:	beq	4da5c <__assert_fail@plt+0x3b468>
   4d9f8:	teq	r4, r5
   4d9fc:	teqeq	r0, r2
   4da00:	beq	4da14 <__assert_fail@plt+0x3b420>
   4da04:	orrs	ip, r4, r0
   4da08:	moveq	r1, r3
   4da0c:	moveq	r0, r2
   4da10:	pop	{r4, r5, pc}
   4da14:	teq	r1, r3
   4da18:	movne	r1, #0
   4da1c:	movne	r0, #0
   4da20:	popne	{r4, r5, pc}
   4da24:	lsrs	ip, r4, #21
   4da28:	bne	4da3c <__assert_fail@plt+0x3b448>
   4da2c:	lsls	r0, r0, #1
   4da30:	adcs	r1, r1, r1
   4da34:	orrcs	r1, r1, #-2147483648	; 0x80000000
   4da38:	pop	{r4, r5, pc}
   4da3c:	adds	r4, r4, #4194304	; 0x400000
   4da40:	addcc	r1, r1, #1048576	; 0x100000
   4da44:	popcc	{r4, r5, pc}
   4da48:	and	r5, r1, #-2147483648	; 0x80000000
   4da4c:	orr	r1, r5, #2130706432	; 0x7f000000
   4da50:	orr	r1, r1, #15728640	; 0xf00000
   4da54:	mov	r0, #0
   4da58:	pop	{r4, r5, pc}
   4da5c:	mvns	ip, r4, asr #21
   4da60:	movne	r1, r3
   4da64:	movne	r0, r2
   4da68:	mvnseq	ip, r5, asr #21
   4da6c:	movne	r3, r1
   4da70:	movne	r2, r0
   4da74:	orrs	r4, r0, r1, lsl #12
   4da78:	orrseq	r5, r2, r3, lsl #12
   4da7c:	teqeq	r1, r3
   4da80:	orrne	r1, r1, #524288	; 0x80000
   4da84:	pop	{r4, r5, pc}
   4da88:	teq	r0, #0
   4da8c:	moveq	r1, #0
   4da90:	bxeq	lr
   4da94:	push	{r4, r5, lr}
   4da98:	mov	r4, #1024	; 0x400
   4da9c:	add	r4, r4, #50	; 0x32
   4daa0:	mov	r5, #0
   4daa4:	mov	r1, #0
   4daa8:	b	4d924 <__assert_fail@plt+0x3b330>
   4daac:	teq	r0, #0
   4dab0:	moveq	r1, #0
   4dab4:	bxeq	lr
   4dab8:	push	{r4, r5, lr}
   4dabc:	mov	r4, #1024	; 0x400
   4dac0:	add	r4, r4, #50	; 0x32
   4dac4:	ands	r5, r0, #-2147483648	; 0x80000000
   4dac8:	rsbmi	r0, r0, #0
   4dacc:	mov	r1, #0
   4dad0:	b	4d924 <__assert_fail@plt+0x3b330>
   4dad4:	lsls	r2, r0, #1
   4dad8:	asr	r1, r2, #3
   4dadc:	rrx	r1, r1
   4dae0:	lsl	r0, r2, #28
   4dae4:	andsne	r3, r2, #-16777216	; 0xff000000
   4dae8:	teqne	r3, #-16777216	; 0xff000000
   4daec:	eorne	r1, r1, #939524096	; 0x38000000
   4daf0:	bxne	lr
   4daf4:	teq	r2, #0
   4daf8:	teqne	r3, #-16777216	; 0xff000000
   4dafc:	bxeq	lr
   4db00:	push	{r4, r5, lr}
   4db04:	mov	r4, #896	; 0x380
   4db08:	and	r5, r1, #-2147483648	; 0x80000000
   4db0c:	bic	r1, r1, #-2147483648	; 0x80000000
   4db10:	b	4d924 <__assert_fail@plt+0x3b330>
   4db14:	orrs	r2, r0, r1
   4db18:	bxeq	lr
   4db1c:	push	{r4, r5, lr}
   4db20:	mov	r5, #0
   4db24:	b	4db44 <__assert_fail@plt+0x3b550>
   4db28:	orrs	r2, r0, r1
   4db2c:	bxeq	lr
   4db30:	push	{r4, r5, lr}
   4db34:	ands	r5, r1, #-2147483648	; 0x80000000
   4db38:	bpl	4db44 <__assert_fail@plt+0x3b550>
   4db3c:	rsbs	r0, r0, #0
   4db40:	rsc	r1, r1, #0
   4db44:	mov	r4, #1024	; 0x400
   4db48:	add	r4, r4, #50	; 0x32
   4db4c:	lsrs	ip, r1, #22
   4db50:	beq	4d8c8 <__assert_fail@plt+0x3b2d4>
   4db54:	mov	r2, #3
   4db58:	lsrs	ip, ip, #3
   4db5c:	addne	r2, r2, #3
   4db60:	lsrs	ip, ip, #3
   4db64:	addne	r2, r2, #3
   4db68:	add	r2, r2, ip, lsr #3
   4db6c:	rsb	r3, r2, #32
   4db70:	lsl	ip, r0, r3
   4db74:	lsr	r0, r0, r2
   4db78:	orr	r0, r0, r1, lsl r3
   4db7c:	lsr	r1, r1, r2
   4db80:	add	r4, r4, r2
   4db84:	b	4d8c8 <__assert_fail@plt+0x3b2d4>
   4db88:	cmp	r3, #0
   4db8c:	cmpeq	r2, #0
   4db90:	bne	4dbb4 <__assert_fail@plt+0x3b5c0>
   4db94:	cmp	r1, #0
   4db98:	movlt	r1, #-2147483648	; 0x80000000
   4db9c:	movlt	r0, #0
   4dba0:	blt	4dbb0 <__assert_fail@plt+0x3b5bc>
   4dba4:	cmpeq	r0, #0
   4dba8:	mvnne	r1, #-2147483648	; 0x80000000
   4dbac:	mvnne	r0, #0
   4dbb0:	b	4dc98 <__assert_fail@plt+0x3b6a4>
   4dbb4:	sub	sp, sp, #8
   4dbb8:	push	{sp, lr}
   4dbbc:	cmp	r1, #0
   4dbc0:	blt	4dbe0 <__assert_fail@plt+0x3b5ec>
   4dbc4:	cmp	r3, #0
   4dbc8:	blt	4dc14 <__assert_fail@plt+0x3b620>
   4dbcc:	bl	4dcf0 <__assert_fail@plt+0x3b6fc>
   4dbd0:	ldr	lr, [sp, #4]
   4dbd4:	add	sp, sp, #8
   4dbd8:	pop	{r2, r3}
   4dbdc:	bx	lr
   4dbe0:	rsbs	r0, r0, #0
   4dbe4:	sbc	r1, r1, r1, lsl #1
   4dbe8:	cmp	r3, #0
   4dbec:	blt	4dc38 <__assert_fail@plt+0x3b644>
   4dbf0:	bl	4dcf0 <__assert_fail@plt+0x3b6fc>
   4dbf4:	ldr	lr, [sp, #4]
   4dbf8:	add	sp, sp, #8
   4dbfc:	pop	{r2, r3}
   4dc00:	rsbs	r0, r0, #0
   4dc04:	sbc	r1, r1, r1, lsl #1
   4dc08:	rsbs	r2, r2, #0
   4dc0c:	sbc	r3, r3, r3, lsl #1
   4dc10:	bx	lr
   4dc14:	rsbs	r2, r2, #0
   4dc18:	sbc	r3, r3, r3, lsl #1
   4dc1c:	bl	4dcf0 <__assert_fail@plt+0x3b6fc>
   4dc20:	ldr	lr, [sp, #4]
   4dc24:	add	sp, sp, #8
   4dc28:	pop	{r2, r3}
   4dc2c:	rsbs	r0, r0, #0
   4dc30:	sbc	r1, r1, r1, lsl #1
   4dc34:	bx	lr
   4dc38:	rsbs	r2, r2, #0
   4dc3c:	sbc	r3, r3, r3, lsl #1
   4dc40:	bl	4dcf0 <__assert_fail@plt+0x3b6fc>
   4dc44:	ldr	lr, [sp, #4]
   4dc48:	add	sp, sp, #8
   4dc4c:	pop	{r2, r3}
   4dc50:	rsbs	r2, r2, #0
   4dc54:	sbc	r3, r3, r3, lsl #1
   4dc58:	bx	lr
   4dc5c:	cmp	r3, #0
   4dc60:	cmpeq	r2, #0
   4dc64:	bne	4dc7c <__assert_fail@plt+0x3b688>
   4dc68:	cmp	r1, #0
   4dc6c:	cmpeq	r0, #0
   4dc70:	mvnne	r1, #0
   4dc74:	mvnne	r0, #0
   4dc78:	b	4dc98 <__assert_fail@plt+0x3b6a4>
   4dc7c:	sub	sp, sp, #8
   4dc80:	push	{sp, lr}
   4dc84:	bl	4dcf0 <__assert_fail@plt+0x3b6fc>
   4dc88:	ldr	lr, [sp, #4]
   4dc8c:	add	sp, sp, #8
   4dc90:	pop	{r2, r3}
   4dc94:	bx	lr
   4dc98:	push	{r1, lr}
   4dc9c:	mov	r0, #8
   4dca0:	bl	11eec <raise@plt>
   4dca4:	pop	{r1, pc}
   4dca8:	vmov	d7, r0, r1
   4dcac:	vldr	d6, [pc, #44]	; 4dce0 <__assert_fail@plt+0x3b6ec>
   4dcb0:	vldr	d5, [pc, #48]	; 4dce8 <__assert_fail@plt+0x3b6f4>
   4dcb4:	mov	r0, #0
   4dcb8:	vmul.f64	d6, d7, d6
   4dcbc:	vcvt.u32.f64	s12, d6
   4dcc0:	vcvt.f64.u32	d4, s12
   4dcc4:	vmov	r1, s12
   4dcc8:	vmls.f64	d7, d4, d5
   4dccc:	vcvt.u32.f64	s14, d7
   4dcd0:	vmov	r3, s14
   4dcd4:	orr	r0, r0, r3
   4dcd8:	bx	lr
   4dcdc:	nop			; (mov r0, r0)
   4dce0:	andeq	r0, r0, r0
   4dce4:	ldclcc	0, cr0, [r0]
   4dce8:	andeq	r0, r0, r0
   4dcec:	mvnsmi	r0, r0
   4dcf0:	cmp	r1, r3
   4dcf4:	push	{r4, r5, r6, r7, r8, r9, lr}
   4dcf8:	cmpeq	r0, r2
   4dcfc:	mov	r4, r0
   4dd00:	mov	r5, r1
   4dd04:	ldr	r9, [sp, #28]
   4dd08:	movcc	r0, #0
   4dd0c:	movcc	r1, #0
   4dd10:	bcc	4de08 <__assert_fail@plt+0x3b814>
   4dd14:	cmp	r3, #0
   4dd18:	clzeq	ip, r2
   4dd1c:	clzne	ip, r3
   4dd20:	addeq	ip, ip, #32
   4dd24:	cmp	r5, #0
   4dd28:	clzeq	r1, r4
   4dd2c:	addeq	r1, r1, #32
   4dd30:	clzne	r1, r5
   4dd34:	sub	ip, ip, r1
   4dd38:	sub	lr, ip, #32
   4dd3c:	lsl	r7, r3, ip
   4dd40:	rsb	r8, ip, #32
   4dd44:	orr	r7, r7, r2, lsl lr
   4dd48:	orr	r7, r7, r2, lsr r8
   4dd4c:	lsl	r6, r2, ip
   4dd50:	cmp	r5, r7
   4dd54:	cmpeq	r4, r6
   4dd58:	movcc	r0, #0
   4dd5c:	movcc	r1, #0
   4dd60:	bcc	4dd7c <__assert_fail@plt+0x3b788>
   4dd64:	mov	r3, #1
   4dd68:	subs	r4, r4, r6
   4dd6c:	lsl	r1, r3, lr
   4dd70:	lsl	r0, r3, ip
   4dd74:	orr	r1, r1, r3, lsr r8
   4dd78:	sbc	r5, r5, r7
   4dd7c:	cmp	ip, #0
   4dd80:	beq	4de08 <__assert_fail@plt+0x3b814>
   4dd84:	lsrs	r3, r7, #1
   4dd88:	rrx	r2, r6
   4dd8c:	mov	r6, ip
   4dd90:	b	4ddb4 <__assert_fail@plt+0x3b7c0>
   4dd94:	subs	r4, r4, r2
   4dd98:	sbc	r5, r5, r3
   4dd9c:	adds	r4, r4, r4
   4dda0:	adc	r5, r5, r5
   4dda4:	adds	r4, r4, #1
   4dda8:	adc	r5, r5, #0
   4ddac:	subs	r6, r6, #1
   4ddb0:	beq	4ddd0 <__assert_fail@plt+0x3b7dc>
   4ddb4:	cmp	r5, r3
   4ddb8:	cmpeq	r4, r2
   4ddbc:	bcs	4dd94 <__assert_fail@plt+0x3b7a0>
   4ddc0:	adds	r4, r4, r4
   4ddc4:	adc	r5, r5, r5
   4ddc8:	subs	r6, r6, #1
   4ddcc:	bne	4ddb4 <__assert_fail@plt+0x3b7c0>
   4ddd0:	lsr	r6, r4, ip
   4ddd4:	lsr	r7, r5, ip
   4ddd8:	orr	r6, r6, r5, lsl r8
   4dddc:	adds	r2, r0, r4
   4dde0:	orr	r6, r6, r5, lsr lr
   4dde4:	adc	r3, r1, r5
   4dde8:	lsl	r1, r7, ip
   4ddec:	orr	r1, r1, r6, lsl lr
   4ddf0:	lsl	r0, r6, ip
   4ddf4:	orr	r1, r1, r6, lsr r8
   4ddf8:	subs	r0, r2, r0
   4ddfc:	mov	r4, r6
   4de00:	mov	r5, r7
   4de04:	sbc	r1, r3, r1
   4de08:	cmp	r9, #0
   4de0c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   4de10:	strd	r4, [r9]
   4de14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   4de18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4de1c:	mov	r7, r0
   4de20:	ldr	r6, [pc, #72]	; 4de70 <__assert_fail@plt+0x3b87c>
   4de24:	ldr	r5, [pc, #72]	; 4de74 <__assert_fail@plt+0x3b880>
   4de28:	add	r6, pc, r6
   4de2c:	add	r5, pc, r5
   4de30:	sub	r6, r6, r5
   4de34:	mov	r8, r1
   4de38:	mov	r9, r2
   4de3c:	bl	11e84 <pthread_mutex_unlock@plt-0x20>
   4de40:	asrs	r6, r6, #2
   4de44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   4de48:	mov	r4, #0
   4de4c:	add	r4, r4, #1
   4de50:	ldr	r3, [r5], #4
   4de54:	mov	r2, r9
   4de58:	mov	r1, r8
   4de5c:	mov	r0, r7
   4de60:	blx	r3
   4de64:	cmp	r6, r4
   4de68:	bne	4de4c <__assert_fail@plt+0x3b858>
   4de6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4de70:	ldrdeq	r6, [r1], -r0
   4de74:	andeq	r6, r1, r8, asr #1
   4de78:	bx	lr
   4de7c:	ldr	r3, [pc, #12]	; 4de90 <__assert_fail@plt+0x3b89c>
   4de80:	mov	r1, #0
   4de84:	add	r3, pc, r3
   4de88:	ldr	r2, [r3]
   4de8c:	b	1236c <__cxa_atexit@plt>
   4de90:	strdeq	r6, [r1], -ip

Disassembly of section .fini:

0004de94 <.fini>:
   4de94:	push	{r3, lr}
   4de98:	pop	{r3, pc}
