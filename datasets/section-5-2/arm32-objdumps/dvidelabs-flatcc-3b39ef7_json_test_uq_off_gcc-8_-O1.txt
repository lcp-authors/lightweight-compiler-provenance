
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

000144d4 <.init>:
   144d4:	push	{r3, lr}
   144d8:	bl	1463c <_start@@Base+0x3c>
   144dc:	pop	{r3, pc}

Disassembly of section .plt:

000144e0 <raise@plt-0x14>:
   144e0:	push	{lr}		; (str lr, [sp, #-4]!)
   144e4:	ldr	lr, [pc, #4]	; 144f0 <raise@plt-0x4>
   144e8:	add	lr, pc, lr
   144ec:	ldr	pc, [lr, #8]!
   144f0:	andeq	pc, r3, r0, lsl fp	; <UNPREDICTABLE>

000144f4 <raise@plt>:
   144f4:	add	ip, pc, #0, 12
   144f8:	add	ip, ip, #258048	; 0x3f000
   144fc:	ldr	pc, [ip, #2832]!	; 0xb10

00014500 <strcmp@plt>:
   14500:	add	ip, pc, #0, 12
   14504:	add	ip, ip, #258048	; 0x3f000
   14508:	ldr	pc, [ip, #2824]!	; 0xb08

0001450c <memmove@plt>:
   1450c:	add	ip, pc, #0, 12
   14510:	add	ip, ip, #258048	; 0x3f000
   14514:	ldr	pc, [ip, #2816]!	; 0xb00

00014518 <free@plt>:
   14518:	add	ip, pc, #0, 12
   1451c:	add	ip, ip, #258048	; 0x3f000
   14520:	ldr	pc, [ip, #2808]!	; 0xaf8

00014524 <memcpy@plt>:
   14524:	add	ip, pc, #0, 12
   14528:	add	ip, ip, #258048	; 0x3f000
   1452c:	ldr	pc, [ip, #2800]!	; 0xaf0

00014530 <memcmp@plt>:
   14530:	add	ip, pc, #0, 12
   14534:	add	ip, ip, #258048	; 0x3f000
   14538:	ldr	pc, [ip, #2792]!	; 0xae8

0001453c <realloc@plt>:
   1453c:	add	ip, pc, #0, 12
   14540:	add	ip, ip, #258048	; 0x3f000
   14544:	ldr	pc, [ip, #2784]!	; 0xae0

00014548 <fwrite@plt>:
   14548:	add	ip, pc, #0, 12
   1454c:	add	ip, ip, #258048	; 0x3f000
   14550:	ldr	pc, [ip, #2776]!	; 0xad8

00014554 <malloc@plt>:
   14554:	add	ip, pc, #0, 12
   14558:	add	ip, ip, #258048	; 0x3f000
   1455c:	ldr	pc, [ip, #2768]!	; 0xad0

00014560 <__libc_start_main@plt>:
   14560:	add	ip, pc, #0, 12
   14564:	add	ip, ip, #258048	; 0x3f000
   14568:	ldr	pc, [ip, #2760]!	; 0xac8

0001456c <__gmon_start__@plt>:
   1456c:	add	ip, pc, #0, 12
   14570:	add	ip, ip, #258048	; 0x3f000
   14574:	ldr	pc, [ip, #2752]!	; 0xac0

00014578 <strlen@plt>:
   14578:	add	ip, pc, #0, 12
   1457c:	add	ip, ip, #258048	; 0x3f000
   14580:	ldr	pc, [ip, #2744]!	; 0xab8

00014584 <fprintf@plt>:
   14584:	add	ip, pc, #0, 12
   14588:	add	ip, ip, #258048	; 0x3f000
   1458c:	ldr	pc, [ip, #2736]!	; 0xab0

00014590 <posix_memalign@plt>:
   14590:	add	ip, pc, #0, 12
   14594:	add	ip, ip, #258048	; 0x3f000
   14598:	ldr	pc, [ip, #2728]!	; 0xaa8

0001459c <memset@plt>:
   1459c:	add	ip, pc, #0, 12
   145a0:	add	ip, ip, #258048	; 0x3f000
   145a4:	ldr	pc, [ip, #2720]!	; 0xaa0

000145a8 <strncpy@plt>:
   145a8:	add	ip, pc, #0, 12
   145ac:	add	ip, ip, #258048	; 0x3f000
   145b0:	ldr	pc, [ip, #2712]!	; 0xa98

000145b4 <strtod@plt>:
   145b4:	add	ip, pc, #0, 12
   145b8:	add	ip, ip, #258048	; 0x3f000
   145bc:	ldr	pc, [ip, #2704]!	; 0xa90

000145c0 <memchr@plt>:
   145c0:	add	ip, pc, #0, 12
   145c4:	add	ip, ip, #258048	; 0x3f000
   145c8:	ldr	pc, [ip, #2696]!	; 0xa88

000145cc <fputc@plt>:
   145cc:	add	ip, pc, #0, 12
   145d0:	add	ip, ip, #258048	; 0x3f000
   145d4:	ldr	pc, [ip, #2688]!	; 0xa80

000145d8 <sprintf@plt>:
   145d8:	add	ip, pc, #0, 12
   145dc:	add	ip, ip, #258048	; 0x3f000
   145e0:	ldr	pc, [ip, #2680]!	; 0xa78

000145e4 <abort@plt>:
   145e4:	add	ip, pc, #0, 12
   145e8:	add	ip, ip, #258048	; 0x3f000
   145ec:	ldr	pc, [ip, #2672]!	; 0xa70

000145f0 <__assert_fail@plt>:
   145f0:	add	ip, pc, #0, 12
   145f4:	add	ip, ip, #258048	; 0x3f000
   145f8:	ldr	pc, [ip, #2664]!	; 0xa68

Disassembly of section .text:

00014600 <_start@@Base>:
   14600:	mov	fp, #0
   14604:	mov	lr, #0
   14608:	pop	{r1}		; (ldr r1, [sp], #4)
   1460c:	mov	r2, sp
   14610:	push	{r2}		; (str r2, [sp, #-4]!)
   14614:	push	{r0}		; (str r0, [sp, #-4]!)
   14618:	ldr	ip, [pc, #16]	; 14630 <_start@@Base+0x30>
   1461c:	push	{ip}		; (str ip, [sp, #-4]!)
   14620:	ldr	r0, [pc, #12]	; 14634 <_start@@Base+0x34>
   14624:	ldr	r3, [pc, #12]	; 14638 <_start@@Base+0x38>
   14628:	bl	14560 <__libc_start_main@plt>
   1462c:	bl	145e4 <abort@plt>
   14630:	andeq	sp, r3, ip, lsr #29
   14634:	andeq	r4, r2, r0, asr r8
   14638:	andeq	sp, r3, ip, asr #28
   1463c:	ldr	r3, [pc, #20]	; 14658 <_start@@Base+0x58>
   14640:	ldr	r2, [pc, #20]	; 1465c <_start@@Base+0x5c>
   14644:	add	r3, pc, r3
   14648:	ldr	r2, [r3, r2]
   1464c:	cmp	r2, #0
   14650:	bxeq	lr
   14654:	b	1456c <__gmon_start__@plt>
   14658:			; <UNDEFINED> instruction: 0x0003f9b4
   1465c:	andeq	r0, r0, r4, rrx
   14660:	ldr	r0, [pc, #24]	; 14680 <_start@@Base+0x80>
   14664:	ldr	r3, [pc, #24]	; 14684 <_start@@Base+0x84>
   14668:	cmp	r3, r0
   1466c:	bxeq	lr
   14670:	ldr	r3, [pc, #16]	; 14688 <_start@@Base+0x88>
   14674:	cmp	r3, #0
   14678:	bxeq	lr
   1467c:	bx	r3
   14680:	andeq	r4, r5, ip, lsr r3
   14684:	andeq	r4, r5, ip, lsr r3
   14688:	andeq	r0, r0, r0
   1468c:	ldr	r0, [pc, #36]	; 146b8 <_start@@Base+0xb8>
   14690:	ldr	r1, [pc, #36]	; 146bc <_start@@Base+0xbc>
   14694:	sub	r1, r1, r0
   14698:	asr	r1, r1, #2
   1469c:	add	r1, r1, r1, lsr #31
   146a0:	asrs	r1, r1, #1
   146a4:	bxeq	lr
   146a8:	ldr	r3, [pc, #16]	; 146c0 <_start@@Base+0xc0>
   146ac:	cmp	r3, #0
   146b0:	bxeq	lr
   146b4:	bx	r3
   146b8:	andeq	r4, r5, ip, lsr r3
   146bc:	andeq	r4, r5, ip, lsr r3
   146c0:	andeq	r0, r0, r0
   146c4:	push	{r4, lr}
   146c8:	ldr	r4, [pc, #24]	; 146e8 <_start@@Base+0xe8>
   146cc:	ldrb	r3, [r4]
   146d0:	cmp	r3, #0
   146d4:	popne	{r4, pc}
   146d8:	bl	14660 <_start@@Base+0x60>
   146dc:	mov	r3, #1
   146e0:	strb	r3, [r4]
   146e4:	pop	{r4, pc}
   146e8:	andeq	r4, r5, r8, asr #6
   146ec:	b	1468c <_start@@Base+0x8c>
   146f0:	strd	r4, [sp, #-8]!
   146f4:	sub	r1, r1, r0
   146f8:	cmp	r1, #8
   146fc:	bhi	14730 <_start@@Base+0x130>
   14700:	sub	r1, r1, #1
   14704:	cmp	r1, #7
   14708:	ldrls	pc, [pc, r1, lsl #2]
   1470c:	b	147d8 <_start@@Base+0x1d8>
   14710:	andeq	r4, r1, ip, asr #15
   14714:	andeq	r4, r1, r0, asr #15
   14718:			; <UNDEFINED> instruction: 0x000147b4
   1471c:	andeq	r4, r1, r8, lsr #15
   14720:	muleq	r1, ip, r7
   14724:	muleq	r1, r0, r7
   14728:	andeq	r4, r1, r4, lsl #15
   1472c:	andeq	r4, r1, r0, lsr r7
   14730:	ldrb	r4, [r0, #7]
   14734:	mov	r5, #0
   14738:	ldrb	r2, [r0, #6]
   1473c:	orr	r2, r4, r2, lsl #8
   14740:	mov	r1, r5
   14744:	ldrb	r4, [r0, #5]
   14748:	orr	r2, r2, r4, lsl #16
   1474c:	ldrb	r4, [r0, #4]
   14750:	orr	r2, r2, r4, lsl #24
   14754:	ldrb	r4, [r0, #3]
   14758:	orr	r1, r1, r4
   1475c:	ldrb	r4, [r0, #2]
   14760:	orr	r1, r1, r4, lsl #8
   14764:	ldrb	r4, [r0, #1]
   14768:	orr	r1, r1, r4, lsl #16
   1476c:	ldrb	r4, [r0]
   14770:	mov	r0, r2
   14774:	orr	r1, r1, r4, lsl #24
   14778:	ldrd	r4, [sp]
   1477c:	add	sp, sp, #8
   14780:	bx	lr
   14784:	mov	r4, #0
   14788:	mov	r5, #0
   1478c:	b	14738 <_start@@Base+0x138>
   14790:	mov	r2, #0
   14794:	mov	r1, r2
   14798:	b	14744 <_start@@Base+0x144>
   1479c:	mov	r2, #0
   147a0:	mov	r1, r2
   147a4:	b	1474c <_start@@Base+0x14c>
   147a8:	mov	r2, #0
   147ac:	mov	r1, r2
   147b0:	b	14754 <_start@@Base+0x154>
   147b4:	mov	r2, #0
   147b8:	mov	r1, r2
   147bc:	b	1475c <_start@@Base+0x15c>
   147c0:	mov	r2, #0
   147c4:	mov	r1, r2
   147c8:	b	14764 <_start@@Base+0x164>
   147cc:	mov	r2, #0
   147d0:	mov	r1, r2
   147d4:	b	1476c <_start@@Base+0x16c>
   147d8:	mov	r0, #0
   147dc:	mov	r1, r0
   147e0:	b	14778 <_start@@Base+0x178>
   147e4:	cmp	r0, #4
   147e8:	movhi	r0, #0
   147ec:	movls	r0, #1
   147f0:	bx	lr
   147f4:	cmp	r0, #11
   147f8:	bhi	1481c <_start@@Base+0x21c>
   147fc:	cmp	r0, #8
   14800:	bcs	1482c <_start@@Base+0x22c>
   14804:	cmp	r0, #0
   14808:	beq	14834 <_start@@Base+0x234>
   1480c:	cmp	r0, #2
   14810:	movne	r0, #0
   14814:	moveq	r0, #1
   14818:	bx	lr
   1481c:	cmp	r0, #255	; 0xff
   14820:	movne	r0, #0
   14824:	moveq	r0, #1
   14828:	bx	lr
   1482c:	mov	r0, #1
   14830:	bx	lr
   14834:	mov	r0, #1
   14838:	bx	lr
   1483c:	bx	lr
   14840:	bx	lr
   14844:	mov	r0, #0
   14848:	bx	lr
   1484c:	mov	r0, #0
   14850:	bx	lr
   14854:	str	r4, [sp, #-8]!
   14858:	str	lr, [sp, #4]
   1485c:	mov	r3, #4
   14860:	mov	r2, r3
   14864:	mov	r1, #0
   14868:	bl	29ed8 <flatcc_verify_field@@Base>
   1486c:	ldr	r4, [sp]
   14870:	add	sp, sp, #4
   14874:	pop	{pc}		; (ldr pc, [sp], #4)
   14878:	str	r4, [sp, #-8]!
   1487c:	str	lr, [sp, #4]
   14880:	mov	r4, r0
   14884:	mov	r3, #8
   14888:	mov	r2, r3
   1488c:	mov	r1, #0
   14890:	bl	29ed8 <flatcc_verify_field@@Base>
   14894:	cmp	r0, #0
   14898:	beq	148a8 <_start@@Base+0x2a8>
   1489c:	ldr	r4, [sp]
   148a0:	add	sp, sp, #4
   148a4:	pop	{pc}		; (ldr pc, [sp], #4)
   148a8:	mov	r3, #4
   148ac:	mov	r2, r3
   148b0:	mov	r1, #1
   148b4:	mov	r0, r4
   148b8:	bl	29ed8 <flatcc_verify_field@@Base>
   148bc:	b	1489c <_start@@Base+0x29c>
   148c0:	str	r4, [sp, #-8]!
   148c4:	str	lr, [sp, #4]
   148c8:	mov	r4, r0
   148cc:	mov	r3, #8
   148d0:	mov	r2, r3
   148d4:	mov	r1, #0
   148d8:	bl	29ed8 <flatcc_verify_field@@Base>
   148dc:	cmp	r0, #0
   148e0:	beq	148f0 <_start@@Base+0x2f0>
   148e4:	ldr	r4, [sp]
   148e8:	add	sp, sp, #4
   148ec:	pop	{pc}		; (ldr pc, [sp], #4)
   148f0:	mov	r3, #4
   148f4:	mov	r2, r3
   148f8:	mov	r1, #1
   148fc:	mov	r0, r4
   14900:	bl	29ed8 <flatcc_verify_field@@Base>
   14904:	b	148e4 <_start@@Base+0x2e4>
   14908:	str	r4, [sp, #-8]!
   1490c:	str	lr, [sp, #4]
   14910:	mov	r4, r0
   14914:	mov	r3, #1
   14918:	mov	r2, r3
   1491c:	mov	r1, #0
   14920:	bl	29ed8 <flatcc_verify_field@@Base>
   14924:	cmp	r0, #0
   14928:	beq	14938 <_start@@Base+0x338>
   1492c:	ldr	r4, [sp]
   14930:	add	sp, sp, #4
   14934:	pop	{pc}		; (ldr pc, [sp], #4)
   14938:	mov	r3, #1
   1493c:	mov	r2, r3
   14940:	mov	r1, r3
   14944:	mov	r0, r4
   14948:	bl	29ed8 <flatcc_verify_field@@Base>
   1494c:	cmp	r0, #0
   14950:	bne	1492c <_start@@Base+0x32c>
   14954:	mov	r3, #1
   14958:	mov	r2, r3
   1495c:	mov	r1, #2
   14960:	mov	r0, r4
   14964:	bl	29ed8 <flatcc_verify_field@@Base>
   14968:	cmp	r0, #0
   1496c:	bne	1492c <_start@@Base+0x32c>
   14970:	mov	r3, #1
   14974:	mov	r2, r3
   14978:	mov	r1, #3
   1497c:	mov	r0, r4
   14980:	bl	29ed8 <flatcc_verify_field@@Base>
   14984:	b	1492c <_start@@Base+0x32c>
   14988:	str	r4, [sp, #-8]!
   1498c:	str	lr, [sp, #4]
   14990:	mov	r4, r0
   14994:	mov	r2, #0
   14998:	mov	r1, r2
   1499c:	bl	29f50 <flatcc_verify_string_field@@Base>
   149a0:	cmp	r0, #0
   149a4:	beq	149b4 <_start@@Base+0x3b4>
   149a8:	ldr	r4, [sp]
   149ac:	add	sp, sp, #4
   149b0:	pop	{pc}		; (ldr pc, [sp], #4)
   149b4:	mov	r3, #8
   149b8:	mov	r2, r3
   149bc:	mov	r1, #1
   149c0:	mov	r0, r4
   149c4:	bl	29ed8 <flatcc_verify_field@@Base>
   149c8:	cmp	r0, #0
   149cc:	bne	149a8 <_start@@Base+0x3a8>
   149d0:	mov	r3, #2
   149d4:	mov	r2, r3
   149d8:	mov	r1, r3
   149dc:	mov	r0, r4
   149e0:	bl	29ed8 <flatcc_verify_field@@Base>
   149e4:	b	149a8 <_start@@Base+0x3a8>
   149e8:	str	r4, [sp, #-8]!
   149ec:	str	lr, [sp, #4]
   149f0:	mov	r4, r0
   149f4:	mov	r2, #0
   149f8:	mov	r1, r2
   149fc:	bl	29f50 <flatcc_verify_string_field@@Base>
   14a00:	cmp	r0, #0
   14a04:	beq	14a14 <_start@@Base+0x414>
   14a08:	ldr	r4, [sp]
   14a0c:	add	sp, sp, #4
   14a10:	pop	{pc}		; (ldr pc, [sp], #4)
   14a14:	mov	r3, #4
   14a18:	mov	r2, r3
   14a1c:	mov	r1, #1
   14a20:	mov	r0, r4
   14a24:	bl	29ed8 <flatcc_verify_field@@Base>
   14a28:	cmp	r0, #0
   14a2c:	bne	14a08 <_start@@Base+0x408>
   14a30:	mov	r2, #0
   14a34:	mov	r1, #2
   14a38:	mov	r0, r4
   14a3c:	bl	29f50 <flatcc_verify_string_field@@Base>
   14a40:	cmp	r0, #0
   14a44:	bne	14a08 <_start@@Base+0x408>
   14a48:	mov	r3, #8
   14a4c:	mov	r2, r3
   14a50:	mov	r1, #3
   14a54:	mov	r0, r4
   14a58:	bl	29ed8 <flatcc_verify_field@@Base>
   14a5c:	cmp	r0, #0
   14a60:	bne	14a08 <_start@@Base+0x408>
   14a64:	mov	r2, #0
   14a68:	mov	r1, #4
   14a6c:	mov	r0, r4
   14a70:	bl	29f50 <flatcc_verify_string_field@@Base>
   14a74:	cmp	r0, #0
   14a78:	bne	14a08 <_start@@Base+0x408>
   14a7c:	mov	r3, #8
   14a80:	mov	r2, r3
   14a84:	mov	r1, #5
   14a88:	mov	r0, r4
   14a8c:	bl	29ed8 <flatcc_verify_field@@Base>
   14a90:	cmp	r0, #0
   14a94:	bne	14a08 <_start@@Base+0x408>
   14a98:	mov	r3, #4
   14a9c:	mov	r2, r3
   14aa0:	mov	r1, #6
   14aa4:	mov	r0, r4
   14aa8:	bl	29ed8 <flatcc_verify_field@@Base>
   14aac:	cmp	r0, #0
   14ab0:	bne	14a08 <_start@@Base+0x408>
   14ab4:	mov	r3, #8
   14ab8:	mov	r2, r3
   14abc:	mov	r1, #7
   14ac0:	mov	r0, r4
   14ac4:	bl	29ed8 <flatcc_verify_field@@Base>
   14ac8:	cmp	r0, #0
   14acc:	bne	14a08 <_start@@Base+0x408>
   14ad0:	mov	r3, #4
   14ad4:	mov	r2, r3
   14ad8:	mov	r1, #8
   14adc:	mov	r0, r4
   14ae0:	bl	29ed8 <flatcc_verify_field@@Base>
   14ae4:	b	14a08 <_start@@Base+0x408>
   14ae8:	str	r4, [sp, #-8]!
   14aec:	str	lr, [sp, #4]
   14af0:	mov	r4, r0
   14af4:	movw	r3, #18920	; 0x49e8
   14af8:	movt	r3, #1
   14afc:	mov	r2, #0
   14b00:	mov	r1, r2
   14b04:	bl	2a274 <flatcc_verify_table_field@@Base>
   14b08:	cmp	r0, #0
   14b0c:	beq	14b1c <_start@@Base+0x51c>
   14b10:	ldr	r4, [sp]
   14b14:	add	sp, sp, #4
   14b18:	pop	{pc}		; (ldr pc, [sp], #4)
   14b1c:	movw	r3, #18624	; 0x48c0
   14b20:	movt	r3, #1
   14b24:	mov	r2, #0
   14b28:	mov	r1, #1
   14b2c:	mov	r0, r4
   14b30:	bl	2a274 <flatcc_verify_table_field@@Base>
   14b34:	cmp	r0, #0
   14b38:	bne	14b10 <_start@@Base+0x510>
   14b3c:	movw	r3, #18552	; 0x4878
   14b40:	movt	r3, #1
   14b44:	mov	r2, #0
   14b48:	mov	r1, #2
   14b4c:	mov	r0, r4
   14b50:	bl	2a274 <flatcc_verify_table_field@@Base>
   14b54:	b	14b10 <_start@@Base+0x510>
   14b58:	str	r4, [sp, #-8]!
   14b5c:	str	lr, [sp, #4]
   14b60:	sub	sp, sp, #8
   14b64:	mov	r4, r0
   14b68:	mov	r3, #16
   14b6c:	mov	r2, #32
   14b70:	mov	r1, #0
   14b74:	bl	29ed8 <flatcc_verify_field@@Base>
   14b78:	cmp	r0, #0
   14b7c:	beq	14b90 <_start@@Base+0x590>
   14b80:	add	sp, sp, #8
   14b84:	ldr	r4, [sp]
   14b88:	add	sp, sp, #4
   14b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b90:	mov	r3, #2
   14b94:	mov	r2, r3
   14b98:	mov	r1, r3
   14b9c:	mov	r0, r4
   14ba0:	bl	29ed8 <flatcc_verify_field@@Base>
   14ba4:	cmp	r0, #0
   14ba8:	bne	14b80 <_start@@Base+0x580>
   14bac:	mov	r3, #2
   14bb0:	mov	r2, r3
   14bb4:	mov	r1, #1
   14bb8:	mov	r0, r4
   14bbc:	bl	29ed8 <flatcc_verify_field@@Base>
   14bc0:	cmp	r0, #0
   14bc4:	bne	14b80 <_start@@Base+0x580>
   14bc8:	mov	r2, #1
   14bcc:	mov	r1, #3
   14bd0:	mov	r0, r4
   14bd4:	bl	29f50 <flatcc_verify_string_field@@Base>
   14bd8:	cmp	r0, #0
   14bdc:	bne	14b80 <_start@@Base+0x580>
   14be0:	mov	r3, #1
   14be4:	mov	r2, r3
   14be8:	mov	r1, #6
   14bec:	mov	r0, r4
   14bf0:	bl	29ed8 <flatcc_verify_field@@Base>
   14bf4:	cmp	r0, #0
   14bf8:	bne	14b80 <_start@@Base+0x580>
   14bfc:	mvn	r3, #0
   14c00:	str	r3, [sp, #4]
   14c04:	mov	r3, #1
   14c08:	str	r3, [sp]
   14c0c:	mov	r2, #0
   14c10:	mov	r1, #5
   14c14:	mov	r0, r4
   14c18:	bl	29fec <flatcc_verify_vector_field@@Base>
   14c1c:	cmp	r0, #0
   14c20:	bne	14b80 <_start@@Base+0x580>
   14c24:	movw	r3, #19288	; 0x4b58
   14c28:	movt	r3, #1
   14c2c:	mov	r2, #0
   14c30:	mov	r1, #11
   14c34:	mov	r0, r4
   14c38:	bl	2a398 <flatcc_verify_table_vector_field@@Base>
   14c3c:	cmp	r0, #0
   14c40:	bne	14b80 <_start@@Base+0x580>
   14c44:	mov	r2, #0
   14c48:	mov	r1, #10
   14c4c:	mov	r0, r4
   14c50:	bl	2a0a4 <flatcc_verify_string_vector_field@@Base>
   14c54:	cmp	r0, #0
   14c58:	bne	14b80 <_start@@Base+0x580>
   14c5c:	mov	r2, #0
   14c60:	mov	r1, #28
   14c64:	mov	r0, r4
   14c68:	bl	2a0a4 <flatcc_verify_string_vector_field@@Base>
   14c6c:	cmp	r0, #0
   14c70:	bne	14b80 <_start@@Base+0x580>
   14c74:	mvn	r3, #0
   14c78:	str	r3, [sp, #4]
   14c7c:	mov	r3, #1
   14c80:	str	r3, [sp]
   14c84:	mov	r2, #0
   14c88:	mov	r1, #24
   14c8c:	mov	r0, r4
   14c90:	bl	29fec <flatcc_verify_vector_field@@Base>
   14c94:	cmp	r0, #0
   14c98:	bne	14b80 <_start@@Base+0x580>
   14c9c:	mvn	r3, #-536870912	; 0xe0000000
   14ca0:	str	r3, [sp, #4]
   14ca4:	mov	r3, #4
   14ca8:	str	r3, [sp]
   14cac:	mov	r3, #8
   14cb0:	mov	r2, #0
   14cb4:	mov	r1, #29
   14cb8:	mov	r0, r4
   14cbc:	bl	29fec <flatcc_verify_vector_field@@Base>
   14cc0:	cmp	r0, #0
   14cc4:	bne	14b80 <_start@@Base+0x580>
   14cc8:	movw	r3, #19288	; 0x4b58
   14ccc:	movt	r3, #1
   14cd0:	mov	r2, #0
   14cd4:	mov	r1, #12
   14cd8:	mov	r0, r4
   14cdc:	bl	2a274 <flatcc_verify_table_field@@Base>
   14ce0:	cmp	r0, #0
   14ce4:	bne	14b80 <_start@@Base+0x580>
   14ce8:	movw	r3, #20556	; 0x504c
   14cec:	movt	r3, #1
   14cf0:	mov	r2, #0
   14cf4:	mov	r1, #8
   14cf8:	mov	r0, r4
   14cfc:	bl	2af00 <flatcc_verify_union_field@@Base>
   14d00:	cmp	r0, #0
   14d04:	bne	14b80 <_start@@Base+0x580>
   14d08:	mvn	r3, #-1073741824	; 0xc0000000
   14d0c:	str	r3, [sp, #4]
   14d10:	mov	r3, #2
   14d14:	str	r3, [sp]
   14d18:	mov	r3, #4
   14d1c:	mov	r2, #0
   14d20:	mov	r1, #9
   14d24:	mov	r0, r4
   14d28:	bl	29fec <flatcc_verify_vector_field@@Base>
   14d2c:	cmp	r0, #0
   14d30:	bne	14b80 <_start@@Base+0x580>
   14d34:	mvn	r3, #-1073741824	; 0xc0000000
   14d38:	str	r3, [sp, #4]
   14d3c:	mov	r3, #2
   14d40:	str	r3, [sp]
   14d44:	mov	r3, #4
   14d48:	mov	r2, #0
   14d4c:	mov	r1, #31
   14d50:	mov	r0, r4
   14d54:	bl	29fec <flatcc_verify_vector_field@@Base>
   14d58:	cmp	r0, #0
   14d5c:	bne	14b80 <_start@@Base+0x580>
   14d60:	movw	r3, #19288	; 0x4b58
   14d64:	movt	r3, #1
   14d68:	str	r3, [sp, #4]
   14d6c:	mov	r3, #1
   14d70:	str	r3, [sp]
   14d74:	mov	r3, #0
   14d78:	mov	r2, r3
   14d7c:	mov	r1, #13
   14d80:	mov	r0, r4
   14d84:	bl	2ad28 <flatcc_verify_table_as_nested_root@@Base>
   14d88:	cmp	r0, #0
   14d8c:	bne	14b80 <_start@@Base+0x580>
   14d90:	movw	r3, #18824	; 0x4988
   14d94:	movt	r3, #1
   14d98:	mov	r2, #0
   14d9c:	mov	r1, #14
   14da0:	mov	r0, r4
   14da4:	bl	2a274 <flatcc_verify_table_field@@Base>
   14da8:	cmp	r0, #0
   14dac:	bne	14b80 <_start@@Base+0x580>
   14db0:	mov	r3, #1
   14db4:	mov	r2, r3
   14db8:	mov	r1, #15
   14dbc:	mov	r0, r4
   14dc0:	bl	29ed8 <flatcc_verify_field@@Base>
   14dc4:	cmp	r0, #0
   14dc8:	bne	14b80 <_start@@Base+0x580>
   14dcc:	mov	r3, #4
   14dd0:	mov	r2, r3
   14dd4:	mov	r1, #16
   14dd8:	mov	r0, r4
   14ddc:	bl	29ed8 <flatcc_verify_field@@Base>
   14de0:	cmp	r0, #0
   14de4:	bne	14b80 <_start@@Base+0x580>
   14de8:	mov	r3, #4
   14dec:	mov	r2, r3
   14df0:	mov	r1, #17
   14df4:	mov	r0, r4
   14df8:	bl	29ed8 <flatcc_verify_field@@Base>
   14dfc:	cmp	r0, #0
   14e00:	bne	14b80 <_start@@Base+0x580>
   14e04:	mov	r3, #8
   14e08:	mov	r2, r3
   14e0c:	mov	r1, #18
   14e10:	mov	r0, r4
   14e14:	bl	29ed8 <flatcc_verify_field@@Base>
   14e18:	cmp	r0, #0
   14e1c:	bne	14b80 <_start@@Base+0x580>
   14e20:	mov	r3, #8
   14e24:	mov	r2, r3
   14e28:	mov	r1, #19
   14e2c:	mov	r0, r4
   14e30:	bl	29ed8 <flatcc_verify_field@@Base>
   14e34:	cmp	r0, #0
   14e38:	bne	14b80 <_start@@Base+0x580>
   14e3c:	mov	r3, #4
   14e40:	mov	r2, r3
   14e44:	mov	r1, #20
   14e48:	mov	r0, r4
   14e4c:	bl	29ed8 <flatcc_verify_field@@Base>
   14e50:	cmp	r0, #0
   14e54:	bne	14b80 <_start@@Base+0x580>
   14e58:	mov	r3, #4
   14e5c:	mov	r2, r3
   14e60:	mov	r1, #21
   14e64:	mov	r0, r4
   14e68:	bl	29ed8 <flatcc_verify_field@@Base>
   14e6c:	cmp	r0, #0
   14e70:	bne	14b80 <_start@@Base+0x580>
   14e74:	mov	r3, #8
   14e78:	mov	r2, r3
   14e7c:	mov	r1, #22
   14e80:	mov	r0, r4
   14e84:	bl	29ed8 <flatcc_verify_field@@Base>
   14e88:	cmp	r0, #0
   14e8c:	bne	14b80 <_start@@Base+0x580>
   14e90:	mov	r3, #8
   14e94:	mov	r2, r3
   14e98:	mov	r1, #23
   14e9c:	mov	r0, r4
   14ea0:	bl	29ed8 <flatcc_verify_field@@Base>
   14ea4:	cmp	r0, #0
   14ea8:	bne	14b80 <_start@@Base+0x580>
   14eac:	mov	r3, #4
   14eb0:	mov	r2, r3
   14eb4:	mov	r1, #25
   14eb8:	mov	r0, r4
   14ebc:	bl	29ed8 <flatcc_verify_field@@Base>
   14ec0:	cmp	r0, #0
   14ec4:	bne	14b80 <_start@@Base+0x580>
   14ec8:	mov	r3, #4
   14ecc:	mov	r2, r3
   14ed0:	mov	r1, #26
   14ed4:	mov	r0, r4
   14ed8:	bl	29ed8 <flatcc_verify_field@@Base>
   14edc:	cmp	r0, #0
   14ee0:	bne	14b80 <_start@@Base+0x580>
   14ee4:	mov	r3, #4
   14ee8:	mov	r2, r3
   14eec:	mov	r1, #27
   14ef0:	mov	r0, r4
   14ef4:	bl	29ed8 <flatcc_verify_field@@Base>
   14ef8:	cmp	r0, #0
   14efc:	bne	14b80 <_start@@Base+0x580>
   14f00:	mvn	r3, #0
   14f04:	str	r3, [sp, #4]
   14f08:	mov	r3, #1
   14f0c:	str	r3, [sp]
   14f10:	mov	r2, #0
   14f14:	mov	r1, #30
   14f18:	mov	r0, r4
   14f1c:	bl	29fec <flatcc_verify_vector_field@@Base>
   14f20:	cmp	r0, #0
   14f24:	bne	14b80 <_start@@Base+0x580>
   14f28:	mvn	r3, #-536870912	; 0xe0000000
   14f2c:	str	r3, [sp, #4]
   14f30:	mov	r3, #8
   14f34:	str	r3, [sp]
   14f38:	mov	r2, #0
   14f3c:	mov	r1, #32
   14f40:	mov	r0, r4
   14f44:	bl	29fec <flatcc_verify_vector_field@@Base>
   14f48:	cmp	r0, #0
   14f4c:	bne	14b80 <_start@@Base+0x580>
   14f50:	mvn	r3, #-536870912	; 0xe0000000
   14f54:	str	r3, [sp, #4]
   14f58:	mov	r3, #8
   14f5c:	str	r3, [sp]
   14f60:	mov	r2, #0
   14f64:	mov	r1, #33	; 0x21
   14f68:	mov	r0, r4
   14f6c:	bl	29fec <flatcc_verify_vector_field@@Base>
   14f70:	cmp	r0, #0
   14f74:	bne	14b80 <_start@@Base+0x580>
   14f78:	movw	r3, #18500	; 0x4844
   14f7c:	movt	r3, #1
   14f80:	mov	r2, #0
   14f84:	mov	r1, #34	; 0x22
   14f88:	mov	r0, r4
   14f8c:	bl	2a274 <flatcc_verify_table_field@@Base>
   14f90:	cmp	r0, #0
   14f94:	bne	14b80 <_start@@Base+0x580>
   14f98:	movw	r3, #20404	; 0x4fb4
   14f9c:	movt	r3, #1
   14fa0:	mov	r2, #0
   14fa4:	mov	r1, #35	; 0x23
   14fa8:	mov	r0, r4
   14fac:	bl	2a274 <flatcc_verify_table_field@@Base>
   14fb0:	b	14b80 <_start@@Base+0x580>
   14fb4:	str	r4, [sp, #-8]!
   14fb8:	str	lr, [sp, #4]
   14fbc:	sub	sp, sp, #8
   14fc0:	mov	r4, r0
   14fc4:	mvn	r3, #0
   14fc8:	str	r3, [sp, #4]
   14fcc:	mov	r3, #1
   14fd0:	str	r3, [sp]
   14fd4:	mov	r2, #0
   14fd8:	mov	r1, r2
   14fdc:	bl	29fec <flatcc_verify_vector_field@@Base>
   14fe0:	cmp	r0, #0
   14fe4:	beq	14ff8 <_start@@Base+0x9f8>
   14fe8:	add	sp, sp, #8
   14fec:	ldr	r4, [sp]
   14ff0:	add	sp, sp, #4
   14ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff8:	mvn	r3, #0
   14ffc:	str	r3, [sp, #4]
   15000:	mov	r1, #1
   15004:	str	r1, [sp]
   15008:	mov	r3, r1
   1500c:	mov	r2, #0
   15010:	mov	r0, r4
   15014:	bl	29fec <flatcc_verify_vector_field@@Base>
   15018:	cmp	r0, #0
   1501c:	bne	14fe8 <_start@@Base+0x9e8>
   15020:	movw	r3, #19288	; 0x4b58
   15024:	movt	r3, #1
   15028:	str	r3, [sp, #4]
   1502c:	mov	r3, #1
   15030:	str	r3, [sp]
   15034:	mov	r3, #0
   15038:	mov	r2, r3
   1503c:	mov	r1, #2
   15040:	mov	r0, r4
   15044:	bl	2ad28 <flatcc_verify_table_as_nested_root@@Base>
   15048:	b	14fe8 <_start@@Base+0x9e8>
   1504c:	str	r4, [sp, #-8]!
   15050:	str	lr, [sp, #4]
   15054:	ldrb	r3, [r0, #12]
   15058:	sub	r3, r3, #1
   1505c:	cmp	r3, #3
   15060:	ldrls	pc, [pc, r3, lsl #2]
   15064:	b	150c0 <_start@@Base+0xac0>
   15068:	andeq	r5, r1, r8, ror r0
   1506c:	muleq	r1, r0, r0
   15070:	andeq	r5, r1, r0, lsr #1
   15074:	strheq	r5, [r1], -r0
   15078:	movw	r1, #19288	; 0x4b58
   1507c:	movt	r1, #1
   15080:	bl	2a63c <flatcc_verify_union_table@@Base>
   15084:	ldr	r4, [sp]
   15088:	add	sp, sp, #4
   1508c:	pop	{pc}		; (ldr pc, [sp], #4)
   15090:	movw	r1, #18696	; 0x4908
   15094:	movt	r1, #1
   15098:	bl	2a63c <flatcc_verify_union_table@@Base>
   1509c:	b	15084 <_start@@Base+0xa84>
   150a0:	movw	r1, #18508	; 0x484c
   150a4:	movt	r1, #1
   150a8:	bl	2a63c <flatcc_verify_union_table@@Base>
   150ac:	b	15084 <_start@@Base+0xa84>
   150b0:	movw	r1, #20680	; 0x50c8
   150b4:	movt	r1, #1
   150b8:	bl	2a63c <flatcc_verify_union_table@@Base>
   150bc:	b	15084 <_start@@Base+0xa84>
   150c0:	mov	r0, #0
   150c4:	b	15084 <_start@@Base+0xa84>
   150c8:	str	r4, [sp, #-8]!
   150cc:	str	lr, [sp, #4]
   150d0:	mov	r4, r0
   150d4:	movw	r3, #19176	; 0x4ae8
   150d8:	movt	r3, #1
   150dc:	mov	r2, #0
   150e0:	mov	r1, r2
   150e4:	bl	2a274 <flatcc_verify_table_field@@Base>
   150e8:	cmp	r0, #0
   150ec:	beq	150fc <_start@@Base+0xafc>
   150f0:	ldr	r4, [sp]
   150f4:	add	sp, sp, #4
   150f8:	pop	{pc}		; (ldr pc, [sp], #4)
   150fc:	movw	r3, #20792	; 0x5138
   15100:	movt	r3, #1
   15104:	mov	r2, #0
   15108:	mov	r1, #1
   1510c:	mov	r0, r4
   15110:	bl	2a274 <flatcc_verify_table_field@@Base>
   15114:	cmp	r0, #0
   15118:	bne	150f0 <_start@@Base+0xaf0>
   1511c:	movw	r3, #20556	; 0x504c
   15120:	movt	r3, #1
   15124:	mov	r2, #0
   15128:	mov	r1, #3
   1512c:	mov	r0, r4
   15130:	bl	2b054 <flatcc_verify_union_vector_field@@Base>
   15134:	b	150f0 <_start@@Base+0xaf0>
   15138:	str	r4, [sp, #-8]!
   1513c:	str	lr, [sp, #4]
   15140:	mov	r4, r0
   15144:	movw	r3, #20968	; 0x51e8
   15148:	movt	r3, #1
   1514c:	mov	r2, #0
   15150:	mov	r1, #1
   15154:	bl	2af00 <flatcc_verify_union_field@@Base>
   15158:	cmp	r0, #0
   1515c:	beq	1516c <_start@@Base+0xb6c>
   15160:	ldr	r4, [sp]
   15164:	add	sp, sp, #4
   15168:	pop	{pc}		; (ldr pc, [sp], #4)
   1516c:	movw	r3, #20968	; 0x51e8
   15170:	movt	r3, #1
   15174:	mov	r2, #0
   15178:	mov	r1, #3
   1517c:	mov	r0, r4
   15180:	bl	2af00 <flatcc_verify_union_field@@Base>
   15184:	cmp	r0, #0
   15188:	bne	15160 <_start@@Base+0xb60>
   1518c:	movw	r3, #20968	; 0x51e8
   15190:	movt	r3, #1
   15194:	mov	r2, #0
   15198:	mov	r1, #5
   1519c:	mov	r0, r4
   151a0:	bl	2af00 <flatcc_verify_union_field@@Base>
   151a4:	cmp	r0, #0
   151a8:	bne	15160 <_start@@Base+0xb60>
   151ac:	movw	r3, #20968	; 0x51e8
   151b0:	movt	r3, #1
   151b4:	mov	r2, #0
   151b8:	mov	r1, #7
   151bc:	mov	r0, r4
   151c0:	bl	2af00 <flatcc_verify_union_field@@Base>
   151c4:	cmp	r0, #0
   151c8:	bne	15160 <_start@@Base+0xb60>
   151cc:	movw	r3, #20968	; 0x51e8
   151d0:	movt	r3, #1
   151d4:	mov	r2, #0
   151d8:	mov	r1, #9
   151dc:	mov	r0, r4
   151e0:	bl	2b054 <flatcc_verify_union_vector_field@@Base>
   151e4:	b	15160 <_start@@Base+0xb60>
   151e8:	str	r4, [sp, #-8]!
   151ec:	str	lr, [sp, #4]
   151f0:	ldrb	r3, [r0, #12]
   151f4:	cmp	r3, #9
   151f8:	beq	1525c <_start@@Base+0xc5c>
   151fc:	bls	15220 <_start@@Base+0xc20>
   15200:	cmp	r3, #11
   15204:	beq	1527c <_start@@Base+0xc7c>
   15208:	bcc	1526c <_start@@Base+0xc6c>
   1520c:	cmp	r3, #255	; 0xff
   15210:	movne	r0, #0
   15214:	bne	15250 <_start@@Base+0xc50>
   15218:	bl	2a7a4 <flatcc_verify_union_string@@Base>
   1521c:	b	15250 <_start@@Base+0xc50>
   15220:	cmp	r3, #2
   15224:	beq	15244 <_start@@Base+0xc44>
   15228:	cmp	r3, #8
   1522c:	movne	r0, #0
   15230:	bne	15250 <_start@@Base+0xc50>
   15234:	mov	r2, #2
   15238:	mov	r1, r2
   1523c:	bl	2a73c <flatcc_verify_union_struct@@Base>
   15240:	b	15250 <_start@@Base+0xc50>
   15244:	movw	r1, #18516	; 0x4854
   15248:	movt	r1, #1
   1524c:	bl	2a63c <flatcc_verify_union_table@@Base>
   15250:	ldr	r4, [sp]
   15254:	add	sp, sp, #4
   15258:	pop	{pc}		; (ldr pc, [sp], #4)
   1525c:	mov	r2, #4
   15260:	mov	r1, r2
   15264:	bl	2a73c <flatcc_verify_union_struct@@Base>
   15268:	b	15250 <_start@@Base+0xc50>
   1526c:	mov	r2, #4
   15270:	mov	r1, r2
   15274:	bl	2a73c <flatcc_verify_union_struct@@Base>
   15278:	b	15250 <_start@@Base+0xc50>
   1527c:	bl	2a7a4 <flatcc_verify_union_string@@Base>
   15280:	b	15250 <_start@@Base+0xc50>
   15284:	strd	r4, [sp, #-16]!
   15288:	str	r6, [sp, #8]
   1528c:	str	lr, [sp, #12]
   15290:	sub	sp, sp, #8
   15294:	mov	r4, r0
   15298:	mov	r5, r1
   1529c:	movw	r3, #21548	; 0x542c
   152a0:	movt	r3, #1
   152a4:	str	r3, [sp, #4]
   152a8:	mov	r3, #21
   152ac:	str	r3, [sp]
   152b0:	movw	r3, #57068	; 0xdeec
   152b4:	movt	r3, #3
   152b8:	mov	r2, #0
   152bc:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   152c0:	movw	r3, #21440	; 0x53c0
   152c4:	movt	r3, #1
   152c8:	str	r3, [sp, #4]
   152cc:	mov	r6, #22
   152d0:	str	r6, [sp]
   152d4:	movw	r3, #57092	; 0xdf04
   152d8:	movt	r3, #3
   152dc:	mov	r2, #1
   152e0:	mov	r1, r5
   152e4:	mov	r0, r4
   152e8:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   152ec:	movw	r3, #21332	; 0x5354
   152f0:	movt	r3, #1
   152f4:	str	r3, [sp, #4]
   152f8:	str	r6, [sp]
   152fc:	movw	r3, #57116	; 0xdf1c
   15300:	movt	r3, #3
   15304:	mov	r2, #2
   15308:	mov	r1, r5
   1530c:	mov	r0, r4
   15310:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   15314:	add	sp, sp, #8
   15318:	ldrd	r4, [sp]
   1531c:	ldr	r6, [sp, #8]
   15320:	add	sp, sp, #12
   15324:	pop	{pc}		; (ldr pc, [sp], #4)
   15328:	push	{lr}		; (str lr, [sp, #-4]!)
   1532c:	sub	sp, sp, #12
   15330:	mov	r2, #0
   15334:	str	r2, [sp, #4]
   15338:	mov	r3, #19
   1533c:	str	r3, [sp]
   15340:	movw	r3, #57140	; 0xdf34
   15344:	movt	r3, #3
   15348:	bl	33944 <flatcc_json_printer_int32_field@@Base>
   1534c:	add	sp, sp, #12
   15350:	pop	{pc}		; (ldr pc, [sp], #4)
   15354:	strd	r4, [sp, #-12]!
   15358:	str	lr, [sp, #8]
   1535c:	sub	sp, sp, #20
   15360:	mov	r4, r0
   15364:	mov	r5, r1
   15368:	mov	r2, #0
   1536c:	mov	r3, #0
   15370:	strd	r2, [sp, #8]
   15374:	mov	r3, #15
   15378:	str	r3, [sp]
   1537c:	movw	r3, #57160	; 0xdf48
   15380:	movt	r3, #3
   15384:	bl	33b44 <flatcc_json_printer_int64_field@@Base>
   15388:	mov	r3, #0
   1538c:	str	r3, [sp, #4]
   15390:	mov	r3, #21
   15394:	str	r3, [sp]
   15398:	movw	r3, #57176	; 0xdf58
   1539c:	movt	r3, #3
   153a0:	mov	r2, #1
   153a4:	mov	r1, r5
   153a8:	mov	r0, r4
   153ac:	bl	33134 <flatcc_json_printer_uint32_field@@Base>
   153b0:	add	sp, sp, #20
   153b4:	ldrd	r4, [sp]
   153b8:	add	sp, sp, #8
   153bc:	pop	{pc}		; (ldr pc, [sp], #4)
   153c0:	strd	r4, [sp, #-12]!
   153c4:	str	lr, [sp, #8]
   153c8:	sub	sp, sp, #20
   153cc:	mov	r4, r0
   153d0:	mov	r5, r1
   153d4:	mov	r2, #0
   153d8:	mov	r3, #0
   153dc:	strd	r2, [sp, #8]
   153e0:	mov	r3, #15
   153e4:	str	r3, [sp]
   153e8:	movw	r3, #57160	; 0xdf48
   153ec:	movt	r3, #3
   153f0:	bl	33b44 <flatcc_json_printer_int64_field@@Base>
   153f4:	mov	r3, #0
   153f8:	str	r3, [sp, #4]
   153fc:	mov	r3, #16
   15400:	str	r3, [sp]
   15404:	movw	r3, #57200	; 0xdf70
   15408:	movt	r3, #3
   1540c:	mov	r2, #1
   15410:	mov	r1, r5
   15414:	mov	r0, r4
   15418:	bl	33134 <flatcc_json_printer_uint32_field@@Base>
   1541c:	add	sp, sp, #20
   15420:	ldrd	r4, [sp]
   15424:	add	sp, sp, #8
   15428:	pop	{pc}		; (ldr pc, [sp], #4)
   1542c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15430:	strd	r6, [sp, #8]
   15434:	strd	r8, [sp, #16]
   15438:	strd	sl, [sp, #24]
   1543c:	str	lr, [sp, #32]
   15440:	sub	sp, sp, #20
   15444:	mov	r4, r0
   15448:	mov	r5, r1
   1544c:	mov	r7, #4
   15450:	str	r7, [sp]
   15454:	movw	r3, #57220	; 0xdf84
   15458:	movt	r3, #3
   1545c:	mov	r2, #0
   15460:	bl	32820 <flatcc_json_printer_string_field@@Base>
   15464:	mov	fp, #0
   15468:	str	fp, [sp, #4]
   1546c:	mov	sl, #9
   15470:	str	sl, [sp]
   15474:	movw	r3, #57228	; 0xdf8c
   15478:	movt	r3, #3
   1547c:	mov	r2, #1
   15480:	mov	r1, r5
   15484:	mov	r0, r4
   15488:	bl	33134 <flatcc_json_printer_uint32_field@@Base>
   1548c:	str	r7, [sp]
   15490:	movw	r3, #57240	; 0xdf98
   15494:	movt	r3, #3
   15498:	mov	r2, #2
   1549c:	mov	r1, r5
   154a0:	mov	r0, r4
   154a4:	bl	32820 <flatcc_json_printer_string_field@@Base>
   154a8:	mov	r8, #0
   154ac:	mov	r9, #0
   154b0:	strd	r8, [sp, #8]
   154b4:	mov	r6, #8
   154b8:	str	r6, [sp]
   154bc:	movw	r3, #57248	; 0xdfa0
   154c0:	movt	r3, #3
   154c4:	mov	r2, #3
   154c8:	mov	r1, r5
   154cc:	mov	r0, r4
   154d0:	bl	33b44 <flatcc_json_printer_int64_field@@Base>
   154d4:	str	r7, [sp]
   154d8:	movw	r3, #57260	; 0xdfac
   154dc:	movt	r3, #3
   154e0:	mov	r2, r7
   154e4:	mov	r1, r5
   154e8:	mov	r0, r4
   154ec:	bl	32820 <flatcc_json_printer_string_field@@Base>
   154f0:	strd	r8, [sp, #8]
   154f4:	str	r6, [sp]
   154f8:	movw	r3, #57268	; 0xdfb4
   154fc:	movt	r3, #3
   15500:	mov	r2, #5
   15504:	mov	r1, r5
   15508:	mov	r0, r4
   1550c:	bl	33b44 <flatcc_json_printer_int64_field@@Base>
   15510:	str	fp, [sp, #4]
   15514:	str	sl, [sp]
   15518:	movw	r3, #57280	; 0xdfc0
   1551c:	movt	r3, #3
   15520:	mov	r2, #6
   15524:	mov	r1, r5
   15528:	mov	r0, r4
   1552c:	bl	33134 <flatcc_json_printer_uint32_field@@Base>
   15530:	strd	r8, [sp, #8]
   15534:	str	r6, [sp]
   15538:	movw	r3, #57292	; 0xdfcc
   1553c:	movt	r3, #3
   15540:	mov	r2, #7
   15544:	mov	r1, r5
   15548:	mov	r0, r4
   1554c:	bl	33b44 <flatcc_json_printer_int64_field@@Base>
   15550:	str	fp, [sp, #4]
   15554:	str	sl, [sp]
   15558:	movw	r3, #57304	; 0xdfd8
   1555c:	movt	r3, #3
   15560:	mov	r2, r6
   15564:	mov	r1, r5
   15568:	mov	r0, r4
   1556c:	bl	33134 <flatcc_json_printer_uint32_field@@Base>
   15570:	add	sp, sp, #20
   15574:	ldrd	r4, [sp]
   15578:	ldrd	r6, [sp, #8]
   1557c:	ldrd	r8, [sp, #16]
   15580:	ldrd	sl, [sp, #24]
   15584:	add	sp, sp, #32
   15588:	pop	{pc}		; (ldr pc, [sp], #4)
   1558c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15590:	strd	r6, [sp, #8]
   15594:	strd	r8, [sp, #16]
   15598:	strd	sl, [sp, #24]
   1559c:	str	lr, [sp, #32]
   155a0:	sub	sp, sp, #28
   155a4:	mov	sl, r0
   155a8:	mov	r5, r1
   155ac:	movw	r3, #25344	; 0x6300
   155b0:	movt	r3, #1
   155b4:	str	r3, [sp, #4]
   155b8:	mov	r6, #3
   155bc:	str	r6, [sp]
   155c0:	movw	r3, #57316	; 0xdfe4
   155c4:	movt	r3, #3
   155c8:	mov	r2, #0
   155cc:	bl	3ca6c <flatcc_json_printer_struct_field@@Base>
   155d0:	mov	r3, #150	; 0x96
   155d4:	str	r3, [sp, #4]
   155d8:	mov	r7, #4
   155dc:	str	r7, [sp]
   155e0:	movw	r3, #57320	; 0xdfe8
   155e4:	movt	r3, #3
   155e8:	mov	r2, #1
   155ec:	mov	r1, r5
   155f0:	mov	r0, sl
   155f4:	bl	33744 <flatcc_json_printer_int16_field@@Base>
   155f8:	mov	r3, #100	; 0x64
   155fc:	str	r3, [sp, #4]
   15600:	mov	r2, #2
   15604:	str	r2, [sp]
   15608:	movw	r3, #57328	; 0xdff0
   1560c:	movt	r3, #3
   15610:	mov	r1, r5
   15614:	mov	r0, sl
   15618:	bl	33744 <flatcc_json_printer_int16_field@@Base>
   1561c:	str	r7, [sp]
   15620:	movw	r3, #57332	; 0xdff4
   15624:	movt	r3, #3
   15628:	mov	r2, r6
   1562c:	mov	r1, r5
   15630:	mov	r0, sl
   15634:	bl	32820 <flatcc_json_printer_string_field@@Base>
   15638:	mov	r8, #9
   1563c:	str	r8, [sp]
   15640:	movw	r3, #57340	; 0xdffc
   15644:	movt	r3, #3
   15648:	mov	r2, #5
   1564c:	mov	r1, r5
   15650:	mov	r0, sl
   15654:	bl	37a5c <flatcc_json_printer_uint8_vector_field@@Base>
   15658:	movw	r3, #25112	; 0x6218
   1565c:	movt	r3, #1
   15660:	str	r3, [sp, #8]
   15664:	mov	r4, #8
   15668:	str	r4, [sp, #4]
   1566c:	mov	r9, #5
   15670:	str	r9, [sp]
   15674:	movw	r3, #57352	; 0xe008
   15678:	movt	r3, #3
   1567c:	mov	r2, #6
   15680:	mov	r1, r5
   15684:	mov	r0, sl
   15688:	bl	34bf8 <flatcc_json_printer_int8_enum_field@@Base>
   1568c:	movw	r3, #23772	; 0x5cdc
   15690:	movt	r3, #1
   15694:	str	r3, [sp, #8]
   15698:	movw	r3, #24772	; 0x60c4
   1569c:	movt	r3, #1
   156a0:	str	r3, [sp, #4]
   156a4:	str	r7, [sp]
   156a8:	movw	r3, #57360	; 0xe010
   156ac:	movt	r3, #3
   156b0:	mov	r2, r4
   156b4:	mov	r1, r5
   156b8:	mov	r0, sl
   156bc:	bl	3c324 <flatcc_json_printer_union_field@@Base>
   156c0:	movw	fp, #23656	; 0x5c68
   156c4:	movt	fp, #1
   156c8:	str	fp, [sp, #8]
   156cc:	str	r7, [sp, #4]
   156d0:	str	r9, [sp]
   156d4:	movw	r3, #57368	; 0xe018
   156d8:	movt	r3, #3
   156dc:	mov	r2, r8
   156e0:	mov	r1, r5
   156e4:	mov	r0, sl
   156e8:	bl	3b1a4 <flatcc_json_printer_struct_vector_field@@Base>
   156ec:	mov	r6, #17
   156f0:	str	r6, [sp]
   156f4:	movw	r3, #57376	; 0xe020
   156f8:	movt	r3, #3
   156fc:	mov	r2, #10
   15700:	mov	r1, r5
   15704:	str	sl, [sp, #20]
   15708:	mov	r0, sl
   1570c:	bl	3b53c <flatcc_json_printer_string_vector_field@@Base>
   15710:	movw	sl, #21900	; 0x558c
   15714:	movt	sl, #1
   15718:	str	sl, [sp, #4]
   1571c:	str	r6, [sp]
   15720:	movw	r3, #57396	; 0xe034
   15724:	movt	r3, #3
   15728:	mov	r2, #11
   1572c:	mov	r1, r5
   15730:	ldr	r0, [sp, #20]
   15734:	bl	3b820 <flatcc_json_printer_table_vector_field@@Base>
   15738:	str	sl, [sp, #4]
   1573c:	str	r9, [sp]
   15740:	movw	r3, #57416	; 0xe048
   15744:	movt	r3, #3
   15748:	mov	r2, #12
   1574c:	mov	r1, r5
   15750:	ldr	r0, [sp, #20]
   15754:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   15758:	str	sl, [sp, #8]
   1575c:	mov	sl, #0
   15760:	str	sl, [sp, #4]
   15764:	mov	r3, #20
   15768:	str	r3, [sp]
   1576c:	movw	r3, #57424	; 0xe050
   15770:	movt	r3, #3
   15774:	mov	r2, #13
   15778:	mov	r1, r5
   1577c:	ldr	r0, [sp, #20]
   15780:	bl	3d138 <flatcc_json_printer_table_as_nested_root@@Base>
   15784:	movw	r3, #23504	; 0x5bd0
   15788:	movt	r3, #1
   1578c:	str	r3, [sp, #4]
   15790:	str	r8, [sp]
   15794:	movw	r3, #57448	; 0xe068
   15798:	movt	r3, #3
   1579c:	mov	r2, #14
   157a0:	mov	r1, r5
   157a4:	ldr	r8, [sp, #20]
   157a8:	mov	r0, r8
   157ac:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   157b0:	mov	r3, #1
   157b4:	str	r3, [sp, #4]
   157b8:	str	r4, [sp]
   157bc:	movw	r3, #57460	; 0xe074
   157c0:	movt	r3, #3
   157c4:	mov	r2, #15
   157c8:	mov	r1, r5
   157cc:	str	r8, [sp, #20]
   157d0:	mov	r0, r8
   157d4:	bl	33d54 <flatcc_json_printer_bool_field@@Base>
   157d8:	str	sl, [sp, #4]
   157dc:	mov	r8, #16
   157e0:	str	r8, [sp]
   157e4:	movw	r3, #57472	; 0xe080
   157e8:	movt	r3, #3
   157ec:	mov	r2, r8
   157f0:	mov	r1, r5
   157f4:	ldr	r0, [sp, #20]
   157f8:	bl	33944 <flatcc_json_printer_int32_field@@Base>
   157fc:	str	sl, [sp, #4]
   15800:	str	r8, [sp]
   15804:	movw	r3, #57492	; 0xe094
   15808:	movt	r3, #3
   1580c:	mov	r2, r6
   15810:	mov	r1, r5
   15814:	ldr	r0, [sp, #20]
   15818:	bl	33134 <flatcc_json_printer_uint32_field@@Base>
   1581c:	mov	r2, #0
   15820:	mov	r3, #0
   15824:	strd	r2, [sp, #8]
   15828:	str	r8, [sp]
   1582c:	movw	r3, #57512	; 0xe0a8
   15830:	movt	r3, #3
   15834:	mov	r2, #18
   15838:	mov	r1, r5
   1583c:	ldr	r0, [sp, #20]
   15840:	bl	33b44 <flatcc_json_printer_int64_field@@Base>
   15844:	mov	r2, #0
   15848:	mov	r3, #0
   1584c:	strd	r2, [sp, #8]
   15850:	str	r8, [sp]
   15854:	movw	r3, #57532	; 0xe0bc
   15858:	movt	r3, #3
   1585c:	mov	r2, #19
   15860:	mov	r1, r5
   15864:	ldr	r0, [sp, #20]
   15868:	bl	33334 <flatcc_json_printer_uint64_field@@Base>
   1586c:	str	sl, [sp, #4]
   15870:	str	r6, [sp]
   15874:	movw	r3, #57552	; 0xe0d0
   15878:	movt	r3, #3
   1587c:	mov	r2, #20
   15880:	mov	r1, r5
   15884:	ldr	r0, [sp, #20]
   15888:	bl	33944 <flatcc_json_printer_int32_field@@Base>
   1588c:	str	sl, [sp, #4]
   15890:	str	r6, [sp]
   15894:	movw	r3, #57572	; 0xe0e4
   15898:	movt	r3, #3
   1589c:	mov	r2, #21
   158a0:	mov	r1, r5
   158a4:	ldr	sl, [sp, #20]
   158a8:	mov	r0, sl
   158ac:	bl	33134 <flatcc_json_printer_uint32_field@@Base>
   158b0:	mov	r2, #0
   158b4:	mov	r3, #0
   158b8:	strd	r2, [sp, #8]
   158bc:	str	r6, [sp]
   158c0:	movw	r3, #57592	; 0xe0f8
   158c4:	movt	r3, #3
   158c8:	mov	r2, #22
   158cc:	mov	r1, r5
   158d0:	mov	r0, sl
   158d4:	bl	33b44 <flatcc_json_printer_int64_field@@Base>
   158d8:	mov	r2, #0
   158dc:	mov	r3, #0
   158e0:	strd	r2, [sp, #8]
   158e4:	str	r6, [sp]
   158e8:	movw	r3, #57612	; 0xe10c
   158ec:	movt	r3, #3
   158f0:	mov	r2, #23
   158f4:	mov	r1, r5
   158f8:	mov	r0, sl
   158fc:	bl	33334 <flatcc_json_printer_uint64_field@@Base>
   15900:	str	r8, [sp]
   15904:	movw	r3, #57632	; 0xe120
   15908:	movt	r3, #3
   1590c:	mov	r2, #24
   15910:	mov	r1, r5
   15914:	mov	r0, sl
   15918:	bl	38f1c <flatcc_json_printer_bool_vector_field@@Base>
   1591c:	str	r9, [sp]
   15920:	vldr	s0, [pc, #408]	; 15ac0 <_start@@Base+0x14c0>
   15924:	movw	r3, #57652	; 0xe134
   15928:	movt	r3, #3
   1592c:	mov	r2, #25
   15930:	mov	r1, r5
   15934:	mov	r0, sl
   15938:	bl	33f54 <flatcc_json_printer_float_field@@Base>
   1593c:	mov	r8, #6
   15940:	str	r8, [sp]
   15944:	vldr	s0, [pc, #376]	; 15ac4 <_start@@Base+0x14c4>
   15948:	movw	r3, #57660	; 0xe13c
   1594c:	movt	r3, #3
   15950:	mov	r2, #26
   15954:	mov	r1, r5
   15958:	mov	r0, sl
   1595c:	bl	33f54 <flatcc_json_printer_float_field@@Base>
   15960:	str	r8, [sp]
   15964:	vldr	s0, [pc, #348]	; 15ac8 <_start@@Base+0x14c8>
   15968:	movw	r3, #57668	; 0xe144
   1596c:	movt	r3, #3
   15970:	mov	r2, #27
   15974:	mov	r1, r5
   15978:	mov	r0, sl
   1597c:	bl	33f54 <flatcc_json_printer_float_field@@Base>
   15980:	mov	r3, #18
   15984:	str	r3, [sp]
   15988:	movw	r3, #57676	; 0xe14c
   1598c:	movt	r3, #3
   15990:	mov	r2, #28
   15994:	mov	r1, r5
   15998:	mov	r0, sl
   1599c:	bl	3b53c <flatcc_json_printer_string_vector_field@@Base>
   159a0:	movw	r3, #23392	; 0x5b60
   159a4:	movt	r3, #1
   159a8:	str	r3, [sp, #8]
   159ac:	str	r4, [sp, #4]
   159b0:	mov	r3, #23
   159b4:	str	r3, [sp]
   159b8:	movw	r3, #57696	; 0xe160
   159bc:	movt	r3, #3
   159c0:	mov	r2, #29
   159c4:	mov	r1, r5
   159c8:	mov	r0, sl
   159cc:	bl	3b1a4 <flatcc_json_printer_struct_vector_field@@Base>
   159d0:	str	r7, [sp]
   159d4:	movw	r3, #57720	; 0xe178
   159d8:	movt	r3, #3
   159dc:	mov	r2, #30
   159e0:	mov	r1, r5
   159e4:	mov	r0, sl
   159e8:	bl	37a5c <flatcc_json_printer_uint8_vector_field@@Base>
   159ec:	str	fp, [sp, #8]
   159f0:	str	r7, [sp, #4]
   159f4:	str	r9, [sp]
   159f8:	movw	r3, #57728	; 0xe180
   159fc:	movt	r3, #3
   15a00:	mov	r2, #31
   15a04:	mov	r1, r5
   15a08:	mov	r0, sl
   15a0c:	bl	3b1a4 <flatcc_json_printer_struct_vector_field@@Base>
   15a10:	mov	r3, #15
   15a14:	str	r3, [sp]
   15a18:	movw	r3, #57736	; 0xe188
   15a1c:	movt	r3, #3
   15a20:	mov	r2, #32
   15a24:	mov	r1, r5
   15a28:	mov	r0, sl
   15a2c:	bl	38c8c <flatcc_json_printer_int64_vector_field@@Base>
   15a30:	str	r6, [sp]
   15a34:	movw	r3, #57752	; 0xe198
   15a38:	movt	r3, #3
   15a3c:	mov	r2, #33	; 0x21
   15a40:	mov	r1, r5
   15a44:	mov	r0, sl
   15a48:	bl	39484 <flatcc_json_printer_double_vector_field@@Base>
   15a4c:	movw	r3, #18492	; 0x483c
   15a50:	movt	r3, #1
   15a54:	str	r3, [sp, #4]
   15a58:	mov	r3, #21
   15a5c:	str	r3, [sp]
   15a60:	movw	r3, #57772	; 0xe1ac
   15a64:	movt	r3, #3
   15a68:	mov	r2, #34	; 0x22
   15a6c:	mov	r1, r5
   15a70:	mov	r0, sl
   15a74:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   15a78:	movw	r3, #23244	; 0x5acc
   15a7c:	movt	r3, #1
   15a80:	str	r3, [sp, #4]
   15a84:	mov	r3, #10
   15a88:	str	r3, [sp]
   15a8c:	movw	r3, #57796	; 0xe1c4
   15a90:	movt	r3, #3
   15a94:	mov	r2, #35	; 0x23
   15a98:	mov	r1, r5
   15a9c:	mov	r0, sl
   15aa0:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   15aa4:	add	sp, sp, #28
   15aa8:	ldrd	r4, [sp]
   15aac:	ldrd	r6, [sp, #8]
   15ab0:	ldrd	r8, [sp, #16]
   15ab4:	ldrd	sl, [sp, #24]
   15ab8:	add	sp, sp, #32
   15abc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15ac4:	submi	r0, r0, r0
   15ac8:	andeq	r0, r0, r0
   15acc:	strd	r4, [sp, #-16]!
   15ad0:	str	r6, [sp, #8]
   15ad4:	str	lr, [sp, #12]
   15ad8:	sub	sp, sp, #8
   15adc:	mov	r5, r0
   15ae0:	mov	r6, r1
   15ae4:	mov	r4, #0
   15ae8:	str	r4, [sp, #4]
   15aec:	mov	r3, #4
   15af0:	str	r3, [sp]
   15af4:	movw	r3, #57808	; 0xe1d0
   15af8:	movt	r3, #3
   15afc:	mov	r2, r4
   15b00:	bl	32a00 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b04:	mov	r2, #1
   15b08:	str	r2, [sp, #4]
   15b0c:	mov	r3, #7
   15b10:	str	r3, [sp]
   15b14:	movw	r3, #57816	; 0xe1d8
   15b18:	movt	r3, #3
   15b1c:	mov	r1, r6
   15b20:	mov	r0, r5
   15b24:	bl	32a00 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b28:	str	r4, [sp, #4]
   15b2c:	mov	r3, #6
   15b30:	str	r3, [sp]
   15b34:	movw	r3, #57824	; 0xe1e0
   15b38:	movt	r3, #3
   15b3c:	mov	r2, #2
   15b40:	mov	r1, r6
   15b44:	mov	r0, r5
   15b48:	bl	32a00 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b4c:	add	sp, sp, #8
   15b50:	ldrd	r4, [sp]
   15b54:	ldr	r6, [sp, #8]
   15b58:	add	sp, sp, #12
   15b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b60:	strd	r4, [sp, #-12]!
   15b64:	str	lr, [sp, #8]
   15b68:	sub	sp, sp, #12
   15b6c:	mov	r5, r0
   15b70:	mov	r4, r1
   15b74:	mov	r3, #2
   15b78:	str	r3, [sp, #4]
   15b7c:	movw	r3, #57832	; 0xe1e8
   15b80:	movt	r3, #3
   15b84:	str	r3, [sp]
   15b88:	mov	r3, #0
   15b8c:	mov	r2, r1
   15b90:	mov	r1, r3
   15b94:	bl	359dc <flatcc_json_printer_uint32_struct_field@@Base>
   15b98:	mov	r3, #8
   15b9c:	str	r3, [sp, #4]
   15ba0:	movw	r3, #57836	; 0xe1ec
   15ba4:	movt	r3, #3
   15ba8:	str	r3, [sp]
   15bac:	mov	r3, #4
   15bb0:	mov	r2, r4
   15bb4:	mov	r1, #1
   15bb8:	mov	r0, r5
   15bbc:	bl	359dc <flatcc_json_printer_uint32_struct_field@@Base>
   15bc0:	add	sp, sp, #12
   15bc4:	ldrd	r4, [sp]
   15bc8:	add	sp, sp, #8
   15bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd0:	strd	r4, [sp, #-16]!
   15bd4:	str	r6, [sp, #8]
   15bd8:	str	lr, [sp, #12]
   15bdc:	sub	sp, sp, #16
   15be0:	mov	r4, r0
   15be4:	mov	r5, r1
   15be8:	mov	r6, #2
   15bec:	str	r6, [sp]
   15bf0:	movw	r3, #57832	; 0xe1e8
   15bf4:	movt	r3, #3
   15bf8:	mov	r2, #0
   15bfc:	bl	32820 <flatcc_json_printer_string_field@@Base>
   15c00:	mov	r2, #0
   15c04:	mov	r3, #0
   15c08:	strd	r2, [sp, #8]
   15c0c:	mov	r3, #3
   15c10:	str	r3, [sp]
   15c14:	movw	r3, #57848	; 0xe1f8
   15c18:	movt	r3, #3
   15c1c:	mov	r2, #1
   15c20:	mov	r1, r5
   15c24:	mov	r0, r4
   15c28:	bl	33b44 <flatcc_json_printer_int64_field@@Base>
   15c2c:	mov	r3, #0
   15c30:	str	r3, [sp, #4]
   15c34:	mov	r3, #5
   15c38:	str	r3, [sp]
   15c3c:	movw	r3, #57852	; 0xe1fc
   15c40:	movt	r3, #3
   15c44:	mov	r2, r6
   15c48:	mov	r1, r5
   15c4c:	mov	r0, r4
   15c50:	bl	32f34 <flatcc_json_printer_uint16_field@@Base>
   15c54:	add	sp, sp, #16
   15c58:	ldrd	r4, [sp]
   15c5c:	ldr	r6, [sp, #8]
   15c60:	add	sp, sp, #12
   15c64:	pop	{pc}		; (ldr pc, [sp], #4)
   15c68:	strd	r4, [sp, #-16]!
   15c6c:	str	r6, [sp, #8]
   15c70:	str	lr, [sp, #12]
   15c74:	sub	sp, sp, #8
   15c78:	mov	r6, r0
   15c7c:	mov	r5, r1
   15c80:	mov	r4, #1
   15c84:	str	r4, [sp, #4]
   15c88:	movw	r3, #57568	; 0xe0e0
   15c8c:	movt	r3, #3
   15c90:	str	r3, [sp]
   15c94:	mov	r3, #0
   15c98:	mov	r2, r1
   15c9c:	mov	r1, r3
   15ca0:	bl	35ea8 <flatcc_json_printer_int16_struct_field@@Base>
   15ca4:	str	r4, [sp, #4]
   15ca8:	movw	r3, #57860	; 0xe204
   15cac:	movt	r3, #3
   15cb0:	str	r3, [sp]
   15cb4:	mov	r3, #2
   15cb8:	mov	r2, r5
   15cbc:	mov	r1, r4
   15cc0:	mov	r0, r6
   15cc4:	bl	35d10 <flatcc_json_printer_int8_struct_field@@Base>
   15cc8:	add	sp, sp, #8
   15ccc:	ldrd	r4, [sp]
   15cd0:	ldr	r6, [sp, #8]
   15cd4:	add	sp, sp, #12
   15cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cdc:	str	r4, [sp, #-8]!
   15ce0:	str	lr, [sp, #4]
   15ce4:	ldrb	r3, [r1, #8]
   15ce8:	sub	r3, r3, #1
   15cec:	cmp	r3, #3
   15cf0:	ldrls	pc, [pc, r3, lsl #2]
   15cf4:	b	15d14 <_start@@Base+0x1714>
   15cf8:	andeq	r5, r1, r8, lsl #26
   15cfc:	andeq	r5, r1, r0, lsr #26
   15d00:	andeq	r5, r1, r0, lsr sp
   15d04:	andeq	r5, r1, r0, asr #26
   15d08:	movw	r2, #21900	; 0x558c
   15d0c:	movt	r2, #1
   15d10:	bl	3c608 <flatcc_json_printer_union_table@@Base>
   15d14:	ldr	r4, [sp]
   15d18:	add	sp, sp, #4
   15d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d20:	movw	r2, #24920	; 0x6158
   15d24:	movt	r2, #1
   15d28:	bl	3c608 <flatcc_json_printer_union_table@@Base>
   15d2c:	b	15d14 <_start@@Base+0x1714>
   15d30:	movw	r2, #18496	; 0x4840
   15d34:	movt	r2, #1
   15d38:	bl	3c608 <flatcc_json_printer_union_table@@Base>
   15d3c:	b	15d14 <_start@@Base+0x1714>
   15d40:	movw	r2, #23888	; 0x5d50
   15d44:	movt	r2, #1
   15d48:	bl	3c608 <flatcc_json_printer_union_table@@Base>
   15d4c:	b	15d14 <_start@@Base+0x1714>
   15d50:	strd	r4, [sp, #-12]!
   15d54:	str	lr, [sp, #8]
   15d58:	sub	sp, sp, #20
   15d5c:	mov	r4, r0
   15d60:	mov	r5, r1
   15d64:	movw	r3, #21124	; 0x5284
   15d68:	movt	r3, #1
   15d6c:	str	r3, [sp, #4]
   15d70:	mov	r3, #6
   15d74:	str	r3, [sp]
   15d78:	movw	r3, #57864	; 0xe208
   15d7c:	movt	r3, #3
   15d80:	mov	r2, #0
   15d84:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   15d88:	movw	r3, #24060	; 0x5dfc
   15d8c:	movt	r3, #1
   15d90:	str	r3, [sp, #4]
   15d94:	mov	r3, #5
   15d98:	str	r3, [sp]
   15d9c:	movw	r3, #57872	; 0xe210
   15da0:	movt	r3, #3
   15da4:	mov	r2, #1
   15da8:	mov	r1, r5
   15dac:	mov	r0, r4
   15db0:	bl	3c04c <flatcc_json_printer_table_field@@Base>
   15db4:	movw	r3, #23772	; 0x5cdc
   15db8:	movt	r3, #1
   15dbc:	str	r3, [sp, #8]
   15dc0:	movw	r3, #24772	; 0x60c4
   15dc4:	movt	r3, #1
   15dc8:	str	r3, [sp, #4]
   15dcc:	mov	r3, #7
   15dd0:	str	r3, [sp]
   15dd4:	movw	r3, #57880	; 0xe218
   15dd8:	movt	r3, #3
   15ddc:	mov	r2, #3
   15de0:	mov	r1, r5
   15de4:	mov	r0, r4
   15de8:	bl	3bce0 <flatcc_json_printer_union_vector_field@@Base>
   15dec:	add	sp, sp, #20
   15df0:	ldrd	r4, [sp]
   15df4:	add	sp, sp, #8
   15df8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dfc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15e00:	strd	r6, [sp, #8]
   15e04:	strd	r8, [sp, #16]
   15e08:	str	lr, [sp, #24]
   15e0c:	sub	sp, sp, #20
   15e10:	mov	r6, r0
   15e14:	mov	r7, r1
   15e18:	movw	r5, #24316	; 0x5efc
   15e1c:	movt	r5, #1
   15e20:	str	r5, [sp, #8]
   15e24:	movw	r4, #24568	; 0x5ff8
   15e28:	movt	r4, #1
   15e2c:	str	r4, [sp, #4]
   15e30:	mov	r3, #14
   15e34:	str	r3, [sp]
   15e38:	movw	r3, #57888	; 0xe220
   15e3c:	movt	r3, #3
   15e40:	mov	r2, #1
   15e44:	bl	3c324 <flatcc_json_printer_union_field@@Base>
   15e48:	str	r5, [sp, #8]
   15e4c:	str	r4, [sp, #4]
   15e50:	mov	r9, #10
   15e54:	str	r9, [sp]
   15e58:	movw	r3, #57904	; 0xe230
   15e5c:	movt	r3, #3
   15e60:	mov	r2, #3
   15e64:	mov	r1, r7
   15e68:	mov	r0, r6
   15e6c:	bl	3c324 <flatcc_json_printer_union_field@@Base>
   15e70:	str	r5, [sp, #8]
   15e74:	str	r4, [sp, #4]
   15e78:	mov	r8, #9
   15e7c:	str	r8, [sp]
   15e80:	movw	r3, #57916	; 0xe23c
   15e84:	movt	r3, #3
   15e88:	mov	r2, #5
   15e8c:	mov	r1, r7
   15e90:	mov	r0, r6
   15e94:	bl	3c324 <flatcc_json_printer_union_field@@Base>
   15e98:	str	r5, [sp, #8]
   15e9c:	str	r4, [sp, #4]
   15ea0:	mov	r3, #5
   15ea4:	str	r3, [sp]
   15ea8:	movw	r3, #57928	; 0xe248
   15eac:	movt	r3, #3
   15eb0:	mov	r2, #7
   15eb4:	mov	r1, r7
   15eb8:	mov	r0, r6
   15ebc:	bl	3c324 <flatcc_json_printer_union_field@@Base>
   15ec0:	str	r5, [sp, #8]
   15ec4:	str	r4, [sp, #4]
   15ec8:	str	r9, [sp]
   15ecc:	movw	r3, #57936	; 0xe250
   15ed0:	movt	r3, #3
   15ed4:	mov	r2, r8
   15ed8:	mov	r1, r7
   15edc:	mov	r0, r6
   15ee0:	bl	3bce0 <flatcc_json_printer_union_vector_field@@Base>
   15ee4:	add	sp, sp, #20
   15ee8:	ldrd	r4, [sp]
   15eec:	ldrd	r6, [sp, #8]
   15ef0:	ldrd	r8, [sp, #16]
   15ef4:	add	sp, sp, #24
   15ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   15efc:	str	r4, [sp, #-8]!
   15f00:	str	lr, [sp, #4]
   15f04:	ldrb	r3, [r1, #8]
   15f08:	cmp	r3, #9
   15f0c:	beq	15f68 <_start@@Base+0x1968>
   15f10:	bls	15f30 <_start@@Base+0x1930>
   15f14:	cmp	r3, #11
   15f18:	beq	15f88 <_start@@Base+0x1988>
   15f1c:	bcc	15f78 <_start@@Base+0x1978>
   15f20:	cmp	r3, #255	; 0xff
   15f24:	bne	15f5c <_start@@Base+0x195c>
   15f28:	bl	3c804 <flatcc_json_printer_union_string@@Base>
   15f2c:	b	15f5c <_start@@Base+0x195c>
   15f30:	cmp	r3, #2
   15f34:	beq	15f50 <_start@@Base+0x1950>
   15f38:	cmp	r3, #8
   15f3c:	bne	15f5c <_start@@Base+0x195c>
   15f40:	movw	r2, #24516	; 0x5fc4
   15f44:	movt	r2, #1
   15f48:	bl	3c72c <flatcc_json_printer_union_struct@@Base>
   15f4c:	b	15f5c <_start@@Base+0x195c>
   15f50:	movw	r2, #21288	; 0x5328
   15f54:	movt	r2, #1
   15f58:	bl	3c608 <flatcc_json_printer_union_table@@Base>
   15f5c:	ldr	r4, [sp]
   15f60:	add	sp, sp, #4
   15f64:	pop	{pc}		; (ldr pc, [sp], #4)
   15f68:	movw	r2, #24464	; 0x5f90
   15f6c:	movt	r2, #1
   15f70:	bl	3c72c <flatcc_json_printer_union_struct@@Base>
   15f74:	b	15f5c <_start@@Base+0x195c>
   15f78:	movw	r2, #24464	; 0x5f90
   15f7c:	movt	r2, #1
   15f80:	bl	3c72c <flatcc_json_printer_union_struct@@Base>
   15f84:	b	15f5c <_start@@Base+0x195c>
   15f88:	bl	3c804 <flatcc_json_printer_union_string@@Base>
   15f8c:	b	15f5c <_start@@Base+0x195c>
   15f90:	push	{lr}		; (str lr, [sp, #-4]!)
   15f94:	sub	sp, sp, #12
   15f98:	mov	r3, #10
   15f9c:	str	r3, [sp, #4]
   15fa0:	movw	r3, #57948	; 0xe25c
   15fa4:	movt	r3, #3
   15fa8:	str	r3, [sp]
   15fac:	mov	r3, #0
   15fb0:	mov	r2, r1
   15fb4:	mov	r1, r3
   15fb8:	bl	36040 <flatcc_json_printer_int32_struct_field@@Base>
   15fbc:	add	sp, sp, #12
   15fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc4:	push	{lr}		; (str lr, [sp, #-4]!)
   15fc8:	sub	sp, sp, #12
   15fcc:	mov	r3, #11
   15fd0:	str	r3, [sp, #4]
   15fd4:	movw	r3, #57960	; 0xe268
   15fd8:	movt	r3, #3
   15fdc:	str	r3, [sp]
   15fe0:	mov	r3, #0
   15fe4:	mov	r2, r1
   15fe8:	mov	r1, r3
   15fec:	bl	35844 <flatcc_json_printer_uint16_struct_field@@Base>
   15ff0:	add	sp, sp, #12
   15ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ff8:	str	r4, [sp, #-8]!
   15ffc:	str	lr, [sp, #4]
   16000:	cmp	r1, #9
   16004:	beq	16074 <_start@@Base+0x1a74>
   16008:	bls	16034 <_start@@Base+0x1a34>
   1600c:	cmp	r1, #11
   16010:	beq	1609c <_start@@Base+0x1a9c>
   16014:	bcc	16088 <_start@@Base+0x1a88>
   16018:	cmp	r1, #255	; 0xff
   1601c:	bne	160b0 <_start@@Base+0x1ab0>
   16020:	mov	r2, #6
   16024:	movw	r1, #58016	; 0xe2a0
   16028:	movt	r1, #3
   1602c:	bl	326d4 <flatcc_json_printer_enum@@Base>
   16030:	b	16068 <_start@@Base+0x1a68>
   16034:	cmp	r1, #2
   16038:	beq	16058 <_start@@Base+0x1a58>
   1603c:	cmp	r1, #8
   16040:	bne	160b0 <_start@@Base+0x1ab0>
   16044:	mov	r2, #8
   16048:	movw	r1, #57980	; 0xe27c
   1604c:	movt	r1, #3
   16050:	bl	326d4 <flatcc_json_printer_enum@@Base>
   16054:	b	16068 <_start@@Base+0x1a68>
   16058:	mov	r2, #5
   1605c:	movw	r1, #57972	; 0xe274
   16060:	movt	r1, #3
   16064:	bl	326d4 <flatcc_json_printer_enum@@Base>
   16068:	ldr	r4, [sp]
   1606c:	add	sp, sp, #4
   16070:	pop	{pc}		; (ldr pc, [sp], #4)
   16074:	mov	r2, #5
   16078:	movw	r1, #57992	; 0xe288
   1607c:	movt	r1, #3
   16080:	bl	326d4 <flatcc_json_printer_enum@@Base>
   16084:	b	16068 <_start@@Base+0x1a68>
   16088:	mov	r2, #7
   1608c:	movw	r1, #58000	; 0xe290
   16090:	movt	r1, #3
   16094:	bl	326d4 <flatcc_json_printer_enum@@Base>
   16098:	b	16068 <_start@@Base+0x1a68>
   1609c:	mov	r2, #5
   160a0:	movw	r1, #58008	; 0xe298
   160a4:	movt	r1, #3
   160a8:	bl	326d4 <flatcc_json_printer_enum@@Base>
   160ac:	b	16068 <_start@@Base+0x1a68>
   160b0:	mov	r2, #4
   160b4:	movw	r1, #7628	; 0x1dcc
   160b8:	movt	r1, #4
   160bc:	bl	326d4 <flatcc_json_printer_enum@@Base>
   160c0:	b	16068 <_start@@Base+0x1a68>
   160c4:	str	r4, [sp, #-8]!
   160c8:	str	lr, [sp, #4]
   160cc:	sub	r1, r1, #1
   160d0:	cmp	r1, #3
   160d4:	ldrls	pc, [pc, r1, lsl #2]
   160d8:	b	16144 <_start@@Base+0x1b44>
   160dc:	andeq	r6, r1, ip, ror #1
   160e0:	andeq	r6, r1, r8, lsl #2
   160e4:	andeq	r6, r1, ip, lsl r1
   160e8:	andeq	r6, r1, r0, lsr r1
   160ec:	mov	r2, #7
   160f0:	movw	r1, #58024	; 0xe2a8
   160f4:	movt	r1, #3
   160f8:	bl	326d4 <flatcc_json_printer_enum@@Base>
   160fc:	ldr	r4, [sp]
   16100:	add	sp, sp, #4
   16104:	pop	{pc}		; (ldr pc, [sp], #4)
   16108:	mov	r2, #23
   1610c:	movw	r1, #58032	; 0xe2b0
   16110:	movt	r1, #3
   16114:	bl	326d4 <flatcc_json_printer_enum@@Base>
   16118:	b	160fc <_start@@Base+0x1afc>
   1611c:	mov	r2, #8
   16120:	movw	r1, #58056	; 0xe2c8
   16124:	movt	r1, #3
   16128:	bl	326d4 <flatcc_json_printer_enum@@Base>
   1612c:	b	160fc <_start@@Base+0x1afc>
   16130:	mov	r2, #3
   16134:	movw	r1, #58068	; 0xe2d4
   16138:	movt	r1, #3
   1613c:	bl	326d4 <flatcc_json_printer_enum@@Base>
   16140:	b	160fc <_start@@Base+0x1afc>
   16144:	mov	r2, #4
   16148:	movw	r1, #7628	; 0x1dcc
   1614c:	movt	r1, #4
   16150:	bl	326d4 <flatcc_json_printer_enum@@Base>
   16154:	b	160fc <_start@@Base+0x1afc>
   16158:	strd	r4, [sp, #-20]!	; 0xffffffec
   1615c:	strd	r6, [sp, #8]
   16160:	str	lr, [sp, #16]
   16164:	sub	sp, sp, #20
   16168:	mov	r6, r0
   1616c:	mov	r7, r1
   16170:	movw	r5, #25112	; 0x6218
   16174:	movt	r5, #1
   16178:	str	r5, [sp, #8]
   1617c:	mov	r4, #2
   16180:	str	r4, [sp, #4]
   16184:	mov	r3, #5
   16188:	str	r3, [sp]
   1618c:	movw	r3, #57352	; 0xe008
   16190:	movt	r3, #3
   16194:	mov	r2, #0
   16198:	bl	34bf8 <flatcc_json_printer_int8_enum_field@@Base>
   1619c:	str	r5, [sp, #8]
   161a0:	str	r4, [sp, #4]
   161a4:	mov	r3, #6
   161a8:	str	r3, [sp]
   161ac:	movw	r3, #58072	; 0xe2d8
   161b0:	movt	r3, #3
   161b4:	mov	r2, #1
   161b8:	mov	r1, r7
   161bc:	mov	r0, r6
   161c0:	bl	34bf8 <flatcc_json_printer_int8_enum_field@@Base>
   161c4:	str	r4, [sp, #4]
   161c8:	str	r4, [sp]
   161cc:	movw	r3, #58080	; 0xe2e0
   161d0:	movt	r3, #3
   161d4:	mov	r2, r4
   161d8:	mov	r1, r7
   161dc:	mov	r0, r6
   161e0:	bl	32d34 <flatcc_json_printer_uint8_field@@Base>
   161e4:	str	r4, [sp, #4]
   161e8:	mov	r2, #3
   161ec:	str	r2, [sp]
   161f0:	movw	r3, #58084	; 0xe2e4
   161f4:	movt	r3, #3
   161f8:	mov	r1, r7
   161fc:	mov	r0, r6
   16200:	bl	32d34 <flatcc_json_printer_uint8_field@@Base>
   16204:	add	sp, sp, #20
   16208:	ldrd	r4, [sp]
   1620c:	ldrd	r6, [sp, #8]
   16210:	add	sp, sp, #16
   16214:	pop	{pc}		; (ldr pc, [sp], #4)
   16218:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1621c:	strd	r6, [sp, #8]
   16220:	str	r8, [sp, #16]
   16224:	str	lr, [sp, #20]
   16228:	mov	r5, r0
   1622c:	uxtb	r4, r1
   16230:	tst	r4, #244	; 0xf4
   16234:	movne	r3, #1
   16238:	moveq	r3, #0
   1623c:	cmp	r4, #0
   16240:	moveq	r3, #1
   16244:	cmp	r3, #0
   16248:	beq	16264 <_start@@Base+0x1c64>
   1624c:	bl	325b4 <flatcc_json_printer_int8@@Base>
   16250:	ldrd	r4, [sp]
   16254:	ldrd	r6, [sp, #8]
   16258:	ldr	r8, [sp, #16]
   1625c:	add	sp, sp, #20
   16260:	pop	{pc}		; (ldr pc, [sp], #4)
   16264:	sub	r3, r4, #1
   16268:	tst	r3, r4
   1626c:	movne	r6, #1
   16270:	moveq	r6, #0
   16274:	mov	r1, r6
   16278:	bl	3276c <flatcc_json_printer_delimit_enum_flags@@Base>
   1627c:	tst	r4, #1
   16280:	moveq	r1, #0
   16284:	bne	162a8 <_start@@Base+0x1ca8>
   16288:	tst	r4, #2
   1628c:	bne	162c8 <_start@@Base+0x1cc8>
   16290:	tst	r4, #8
   16294:	bne	162e8 <_start@@Base+0x1ce8>
   16298:	mov	r1, r6
   1629c:	mov	r0, r5
   162a0:	bl	3276c <flatcc_json_printer_delimit_enum_flags@@Base>
   162a4:	b	16250 <_start@@Base+0x1c50>
   162a8:	mov	r3, #3
   162ac:	movw	r2, #58088	; 0xe2e8
   162b0:	movt	r2, #3
   162b4:	mov	r1, #0
   162b8:	mov	r0, r5
   162bc:	bl	327a0 <flatcc_json_printer_enum_flag@@Base>
   162c0:	mov	r1, #1
   162c4:	b	16288 <_start@@Base+0x1c88>
   162c8:	add	r7, r1, #1
   162cc:	mov	r3, #5
   162d0:	movw	r2, #58092	; 0xe2ec
   162d4:	movt	r2, #3
   162d8:	mov	r0, r5
   162dc:	bl	327a0 <flatcc_json_printer_enum_flag@@Base>
   162e0:	mov	r1, r7
   162e4:	b	16290 <_start@@Base+0x1c90>
   162e8:	mov	r3, #4
   162ec:	movw	r2, #58100	; 0xe2f4
   162f0:	movt	r2, #3
   162f4:	mov	r0, r5
   162f8:	bl	327a0 <flatcc_json_printer_enum_flag@@Base>
   162fc:	b	16298 <_start@@Base+0x1c98>
   16300:	strd	r4, [sp, #-16]!
   16304:	str	r6, [sp, #8]
   16308:	str	lr, [sp, #12]
   1630c:	sub	sp, sp, #16
   16310:	mov	r5, r0
   16314:	mov	r4, r1
   16318:	mov	r6, #1
   1631c:	str	r6, [sp, #4]
   16320:	movw	r3, #58564	; 0xe4c4
   16324:	movt	r3, #3
   16328:	str	r3, [sp]
   1632c:	mov	r3, #0
   16330:	mov	r2, r1
   16334:	mov	r1, r3
   16338:	bl	3650c <flatcc_json_printer_float_struct_field@@Base>
   1633c:	str	r6, [sp, #4]
   16340:	movw	r3, #57420	; 0xe04c
   16344:	movt	r3, #3
   16348:	str	r3, [sp]
   1634c:	mov	r3, #4
   16350:	mov	r2, r4
   16354:	mov	r1, r6
   16358:	mov	r0, r5
   1635c:	bl	3650c <flatcc_json_printer_float_struct_field@@Base>
   16360:	str	r6, [sp, #4]
   16364:	movw	r3, #58108	; 0xe2fc
   16368:	movt	r3, #3
   1636c:	str	r3, [sp]
   16370:	mov	r3, #8
   16374:	mov	r2, r4
   16378:	mov	r1, #2
   1637c:	mov	r0, r5
   16380:	bl	3650c <flatcc_json_printer_float_struct_field@@Base>
   16384:	mov	r6, #5
   16388:	str	r6, [sp, #4]
   1638c:	movw	r3, #58112	; 0xe300
   16390:	movt	r3, #3
   16394:	str	r3, [sp]
   16398:	mov	r3, #16
   1639c:	mov	r2, r4
   163a0:	mov	r1, #3
   163a4:	mov	r0, r5
   163a8:	bl	366a8 <flatcc_json_printer_double_struct_field@@Base>
   163ac:	movw	r3, #25112	; 0x6218
   163b0:	movt	r3, #1
   163b4:	str	r3, [sp, #8]
   163b8:	str	r6, [sp, #4]
   163bc:	movw	r3, #58120	; 0xe308
   163c0:	movt	r3, #3
   163c4:	str	r3, [sp]
   163c8:	mov	r3, #24
   163cc:	mov	r2, r4
   163d0:	mov	r1, #4
   163d4:	mov	r0, r5
   163d8:	bl	36f2c <flatcc_json_printer_int8_enum_struct_field@@Base>
   163dc:	movw	r3, #23656	; 0x5c68
   163e0:	movt	r3, #1
   163e4:	str	r3, [sp, #8]
   163e8:	str	r6, [sp, #4]
   163ec:	movw	r3, #58128	; 0xe310
   163f0:	movt	r3, #3
   163f4:	str	r3, [sp]
   163f8:	mov	r3, #26
   163fc:	mov	r2, r4
   16400:	mov	r1, r6
   16404:	mov	r0, r5
   16408:	bl	3c830 <flatcc_json_printer_embedded_struct_field@@Base>
   1640c:	add	sp, sp, #16
   16410:	ldrd	r4, [sp]
   16414:	ldr	r6, [sp, #8]
   16418:	add	sp, sp, #12
   1641c:	pop	{pc}		; (ldr pc, [sp], #4)
   16420:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16424:	strd	r6, [sp, #8]
   16428:	strd	r8, [sp, #16]
   1642c:	str	lr, [sp, #24]
   16430:	sub	sp, sp, #12
   16434:	mov	r8, r0
   16438:	mov	r4, r1
   1643c:	mov	r9, r2
   16440:	mov	r5, r3
   16444:	mov	r1, r2
   16448:	mov	r0, r4
   1644c:	bl	146f0 <_start@@Base+0xf0>
   16450:	add	r3, pc, #792	; 0x318
   16454:	ldrd	r2, [r3]
   16458:	cmp	r1, r3
   1645c:	cmpeq	r0, r2
   16460:	bhi	165bc <_start@@Base+0x1fbc>
   16464:	add	r3, pc, #780	; 0x30c
   16468:	ldrd	r2, [r3]
   1646c:	cmp	r1, r3
   16470:	cmpeq	r0, r2
   16474:	bhi	164f8 <_start@@Base+0x1ef8>
   16478:	and	r2, r0, #-16777216	; 0xff000000
   1647c:	mov	r3, r1
   16480:	add	r1, pc, #760	; 0x2f8
   16484:	ldrd	r0, [r1]
   16488:	cmp	r3, r1
   1648c:	cmpeq	r2, r0
   16490:	beq	164b0 <_start@@Base+0x1eb0>
   16494:	mov	r0, r4
   16498:	add	sp, sp, #12
   1649c:	ldrd	r4, [sp]
   164a0:	ldrd	r6, [sp, #8]
   164a4:	ldrd	r8, [sp, #16]
   164a8:	add	sp, sp, #24
   164ac:	pop	{pc}		; (ldr pc, [sp], #4)
   164b0:	ldr	r3, [sp, #44]	; 0x2c
   164b4:	str	r3, [sp]
   164b8:	mov	r3, #5
   164bc:	mov	r2, r9
   164c0:	mov	r1, r4
   164c4:	mov	r0, r8
   164c8:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   164cc:	cmp	r4, r0
   164d0:	moveq	r4, r0
   164d4:	beq	16494 <_start@@Base+0x1e94>
   164d8:	mov	r2, #9
   164dc:	mov	r3, #0
   164e0:	ldr	r1, [sp, #40]	; 0x28
   164e4:	strd	r2, [r1]
   164e8:	mov	r3, #0
   164ec:	str	r3, [r5]
   164f0:	mov	r4, r0
   164f4:	b	16494 <_start@@Base+0x1e94>
   164f8:	and	r2, r0, #-16777216	; 0xff000000
   164fc:	add	r7, pc, #644	; 0x284
   16500:	ldrd	r6, [r7]
   16504:	cmp	r1, r7
   16508:	cmpeq	r2, r6
   1650c:	beq	16574 <_start@@Base+0x1f74>
   16510:	bic	r2, r0, #255	; 0xff
   16514:	mov	r3, r1
   16518:	add	r1, pc, #624	; 0x270
   1651c:	ldrd	r0, [r1]
   16520:	cmp	r3, r1
   16524:	cmpeq	r2, r0
   16528:	bne	16494 <_start@@Base+0x1e94>
   1652c:	ldr	r3, [sp, #44]	; 0x2c
   16530:	str	r3, [sp]
   16534:	mov	r3, #7
   16538:	mov	r2, r9
   1653c:	mov	r1, r4
   16540:	mov	r0, r8
   16544:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16548:	cmp	r4, r0
   1654c:	moveq	r4, r0
   16550:	beq	16494 <_start@@Base+0x1e94>
   16554:	mov	r2, #10
   16558:	mov	r3, #0
   1655c:	ldr	r1, [sp, #40]	; 0x28
   16560:	strd	r2, [r1]
   16564:	mov	r3, #0
   16568:	str	r3, [r5]
   1656c:	mov	r4, r0
   16570:	b	16494 <_start@@Base+0x1e94>
   16574:	ldr	r3, [sp, #44]	; 0x2c
   16578:	str	r3, [sp]
   1657c:	mov	r3, #5
   16580:	mov	r2, r9
   16584:	mov	r1, r4
   16588:	mov	r0, r8
   1658c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16590:	cmp	r4, r0
   16594:	moveq	r4, r0
   16598:	beq	16494 <_start@@Base+0x1e94>
   1659c:	mov	r2, #2
   165a0:	mov	r3, #0
   165a4:	ldr	r1, [sp, #40]	; 0x28
   165a8:	strd	r2, [r1]
   165ac:	mov	r3, #0
   165b0:	str	r3, [r5]
   165b4:	mov	r4, r0
   165b8:	b	16494 <_start@@Base+0x1e94>
   165bc:	add	r3, pc, #468	; 0x1d4
   165c0:	ldrd	r2, [r3]
   165c4:	cmp	r1, r3
   165c8:	cmpeq	r0, r2
   165cc:	bhi	16634 <_start@@Base+0x2034>
   165d0:	mov	r2, #0
   165d4:	mov	r3, r1
   165d8:	add	r1, pc, #448	; 0x1c0
   165dc:	ldrd	r0, [r1]
   165e0:	cmp	r3, r1
   165e4:	cmpeq	r2, r0
   165e8:	bne	16494 <_start@@Base+0x1e94>
   165ec:	ldr	r3, [sp, #44]	; 0x2c
   165f0:	str	r3, [sp]
   165f4:	mov	r3, #4
   165f8:	mov	r2, r9
   165fc:	mov	r1, r4
   16600:	mov	r0, r8
   16604:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16608:	cmp	r4, r0
   1660c:	moveq	r4, r0
   16610:	beq	16494 <_start@@Base+0x1e94>
   16614:	mov	r2, #0
   16618:	mov	r3, #0
   1661c:	ldr	r1, [sp, #40]	; 0x28
   16620:	strd	r2, [r1]
   16624:	mov	r3, #0
   16628:	str	r3, [r5]
   1662c:	mov	r4, r0
   16630:	b	16494 <_start@@Base+0x1e94>
   16634:	add	r3, pc, #364	; 0x16c
   16638:	ldrd	r2, [r3]
   1663c:	cmp	r1, r3
   16640:	cmpeq	r0, r2
   16644:	bhi	166ac <_start@@Base+0x20ac>
   16648:	and	r2, r0, #-16777216	; 0xff000000
   1664c:	mov	r3, r1
   16650:	add	r1, pc, #344	; 0x158
   16654:	ldrd	r0, [r1]
   16658:	cmp	r3, r1
   1665c:	cmpeq	r2, r0
   16660:	bne	16494 <_start@@Base+0x1e94>
   16664:	ldr	r3, [sp, #44]	; 0x2c
   16668:	str	r3, [sp]
   1666c:	mov	r3, #5
   16670:	mov	r2, r9
   16674:	mov	r1, r4
   16678:	mov	r0, r8
   1667c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16680:	cmp	r4, r0
   16684:	moveq	r4, r0
   16688:	beq	16494 <_start@@Base+0x1e94>
   1668c:	mov	r2, #11
   16690:	mov	r3, #0
   16694:	ldr	r1, [sp, #40]	; 0x28
   16698:	strd	r2, [r1]
   1669c:	mov	r3, #0
   166a0:	str	r3, [r5]
   166a4:	mov	r4, r0
   166a8:	b	16494 <_start@@Base+0x1e94>
   166ac:	lsr	r2, r0, #16
   166b0:	lsl	r2, r2, #16
   166b4:	add	r7, pc, #252	; 0xfc
   166b8:	ldrd	r6, [r7]
   166bc:	cmp	r1, r7
   166c0:	cmpeq	r2, r6
   166c4:	beq	16724 <_start@@Base+0x2124>
   166c8:	add	r3, pc, #240	; 0xf0
   166cc:	ldrd	r2, [r3]
   166d0:	cmp	r1, r3
   166d4:	cmpeq	r0, r2
   166d8:	bne	16494 <_start@@Base+0x1e94>
   166dc:	ldr	r3, [sp, #44]	; 0x2c
   166e0:	str	r3, [sp]
   166e4:	mov	r3, #8
   166e8:	mov	r2, r9
   166ec:	mov	r1, r4
   166f0:	mov	r0, r8
   166f4:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   166f8:	cmp	r4, r0
   166fc:	moveq	r4, r0
   16700:	beq	16494 <_start@@Base+0x1e94>
   16704:	mov	r2, #8
   16708:	mov	r3, #0
   1670c:	ldr	r1, [sp, #40]	; 0x28
   16710:	strd	r2, [r1]
   16714:	mov	r3, #0
   16718:	str	r3, [r5]
   1671c:	mov	r4, r0
   16720:	b	16494 <_start@@Base+0x1e94>
   16724:	ldr	r3, [sp, #44]	; 0x2c
   16728:	str	r3, [sp]
   1672c:	mov	r3, #6
   16730:	mov	r2, r9
   16734:	mov	r1, r4
   16738:	mov	r0, r8
   1673c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16740:	cmp	r4, r0
   16744:	moveq	r4, r0
   16748:	beq	16494 <_start@@Base+0x1e94>
   1674c:	mov	r2, #255	; 0xff
   16750:	mov	r3, #0
   16754:	ldr	r1, [sp, #40]	; 0x28
   16758:	strd	r2, [r1]
   1675c:	mov	r3, #0
   16760:	str	r3, [r5]
   16764:	mov	r4, r0
   16768:	b	16494 <_start@@Base+0x1e94>
   1676c:	nop	{0}
   16770:			; <UNDEFINED> instruction: 0xffffffff
   16774:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16778:			; <UNDEFINED> instruction: 0x46616dff
   1677c:	rsbmi	r6, pc, #428	; 0x1ac
   16780:	strvs	r0, [r0, #-0]
   16784:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16788:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1678c:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16790:	strbtmi	r6, [r1], -r0, lsl #28
   16794:	rsbmi	r6, pc, #428	; 0x1ac
   16798:	ldrshvc	pc, [pc, #255]	; 1689f <_start@@Base+0x229f>	; <UNPREDICTABLE>
   1679c:	svcmi	0x00746865
   167a0:	andeq	r0, r0, r0
   167a4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   167a8:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   167ac:	rsbpl	r7, r1, #117	; 0x75
   167b0:	andvc	r0, r0, #0
   167b4:	svcmi	0x00746865
   167b8:	strbvs	r0, [r4, #-0]!
   167bc:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   167c0:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   167c4:	rsbpl	r7, r1, #117	; 0x75
   167c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   167cc:	strd	r6, [sp, #8]
   167d0:	str	r8, [sp, #16]
   167d4:	str	lr, [sp, #20]
   167d8:	sub	sp, sp, #8
   167dc:	mov	r6, r0
   167e0:	mov	r4, r1
   167e4:	mov	r5, r2
   167e8:	mov	r7, r3
   167ec:	mov	r1, r2
   167f0:	mov	r0, r4
   167f4:	bl	146f0 <_start@@Base+0xf0>
   167f8:	add	r3, pc, #152	; 0x98
   167fc:	ldrd	r2, [r3]
   16800:	cmp	r1, r3
   16804:	cmpeq	r0, r2
   16808:	bne	16878 <_start@@Base+0x2278>
   1680c:	add	r8, r4, #8
   16810:	mov	r1, r5
   16814:	mov	r0, r8
   16818:	bl	146f0 <_start@@Base+0xf0>
   1681c:	mov	r2, #0
   16820:	and	r3, r1, #-16777216	; 0xff000000
   16824:	cmp	r3, #1912602624	; 0x72000000
   16828:	cmpeq	r2, #0
   1682c:	bne	16878 <_start@@Base+0x2278>
   16830:	sub	r3, r5, r8
   16834:	cmp	r3, #1
   16838:	ble	16878 <_start@@Base+0x2278>
   1683c:	ldrb	r3, [r4, #9]
   16840:	cmp	r3, #46	; 0x2e
   16844:	bne	16878 <_start@@Base+0x2278>
   16848:	add	r1, r4, #10
   1684c:	cmp	r8, r1
   16850:	beq	16878 <_start@@Base+0x2278>
   16854:	ldr	r3, [sp, #36]	; 0x24
   16858:	str	r3, [sp, #4]
   1685c:	ldr	r3, [sp, #32]
   16860:	str	r3, [sp]
   16864:	mov	r3, r7
   16868:	mov	r2, r5
   1686c:	mov	r0, r6
   16870:	bl	16420 <_start@@Base+0x1e20>
   16874:	mov	r4, r0
   16878:	mov	r0, r4
   1687c:	add	sp, sp, #8
   16880:	ldrd	r4, [sp]
   16884:	ldrd	r6, [sp, #8]
   16888:	ldr	r8, [sp, #16]
   1688c:	add	sp, sp, #20
   16890:	pop	{pc}		; (ldr pc, [sp], #4)
   16894:	nop	{0}
   16898:	cmnvs	r3, r5, ror #8
   1689c:	cmnmi	r8, #-2147483620	; 0x8000001c
   168a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   168a4:	strd	r6, [sp, #8]
   168a8:	strd	r8, [sp, #16]
   168ac:	str	lr, [sp, #24]
   168b0:	sub	sp, sp, #12
   168b4:	mov	r8, r0
   168b8:	mov	r4, r1
   168bc:	mov	r9, r2
   168c0:	mov	r5, r3
   168c4:	mov	r1, r2
   168c8:	mov	r0, r4
   168cc:	bl	146f0 <_start@@Base+0xf0>
   168d0:	add	r3, pc, #584	; 0x248
   168d4:	ldrd	r2, [r3]
   168d8:	cmp	r1, r3
   168dc:	cmpeq	r0, r2
   168e0:	bhi	16964 <_start@@Base+0x2364>
   168e4:	mov	r2, #0
   168e8:	bic	r3, r1, #255	; 0xff
   168ec:	add	r1, pc, #564	; 0x234
   168f0:	ldrd	r0, [r1]
   168f4:	cmp	r3, r1
   168f8:	cmpeq	r2, r0
   168fc:	beq	1691c <_start@@Base+0x231c>
   16900:	mov	r0, r4
   16904:	add	sp, sp, #12
   16908:	ldrd	r4, [sp]
   1690c:	ldrd	r6, [sp, #8]
   16910:	ldrd	r8, [sp, #16]
   16914:	add	sp, sp, #24
   16918:	pop	{pc}		; (ldr pc, [sp], #4)
   1691c:	ldr	r3, [sp, #44]	; 0x2c
   16920:	str	r3, [sp]
   16924:	mov	r3, #3
   16928:	mov	r2, r9
   1692c:	mov	r1, r4
   16930:	mov	r0, r8
   16934:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16938:	cmp	r4, r0
   1693c:	moveq	r4, r0
   16940:	beq	16900 <_start@@Base+0x2300>
   16944:	mov	r2, #4
   16948:	mov	r3, #0
   1694c:	ldr	r1, [sp, #40]	; 0x28
   16950:	strd	r2, [r1]
   16954:	mov	r3, #0
   16958:	str	r3, [r5]
   1695c:	mov	r4, r0
   16960:	b	16900 <_start@@Base+0x2300>
   16964:	add	r3, pc, #452	; 0x1c4
   16968:	ldrd	r2, [r3]
   1696c:	cmp	r1, r3
   16970:	cmpeq	r0, r2
   16974:	beq	16a4c <_start@@Base+0x244c>
   16978:	bic	r2, r0, #255	; 0xff
   1697c:	add	r7, pc, #436	; 0x1b4
   16980:	ldrd	r6, [r7]
   16984:	cmp	r1, r7
   16988:	cmpeq	r2, r6
   1698c:	beq	16a90 <_start@@Base+0x2490>
   16990:	mov	r2, #0
   16994:	add	r7, pc, #420	; 0x1a4
   16998:	ldrd	r6, [r7]
   1699c:	cmp	r1, r7
   169a0:	cmpeq	r2, r6
   169a4:	beq	16ad4 <_start@@Base+0x24d4>
   169a8:	add	r3, pc, #408	; 0x198
   169ac:	ldrd	r2, [r3]
   169b0:	cmp	r1, r3
   169b4:	cmpeq	r0, r2
   169b8:	bne	16900 <_start@@Base+0x2300>
   169bc:	mov	r1, r9
   169c0:	add	r0, r4, #8
   169c4:	bl	146f0 <_start@@Base+0xf0>
   169c8:	add	r3, pc, #384	; 0x180
   169cc:	ldrd	r2, [r3]
   169d0:	cmp	r1, r3
   169d4:	cmpeq	r0, r2
   169d8:	bne	16900 <_start@@Base+0x2300>
   169dc:	add	r6, r4, #16
   169e0:	mov	r1, r9
   169e4:	mov	r0, r6
   169e8:	bl	146f0 <_start@@Base+0xf0>
   169ec:	bic	r2, r0, #255	; 0xff
   169f0:	mov	r3, r1
   169f4:	add	r1, pc, #348	; 0x15c
   169f8:	ldrd	r0, [r1]
   169fc:	cmp	r3, r1
   16a00:	cmpeq	r2, r0
   16a04:	bne	16900 <_start@@Base+0x2300>
   16a08:	ldr	r3, [sp, #44]	; 0x2c
   16a0c:	str	r3, [sp]
   16a10:	mov	r3, #7
   16a14:	mov	r2, r9
   16a18:	mov	r1, r6
   16a1c:	mov	r0, r8
   16a20:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16a24:	cmp	r6, r0
   16a28:	beq	16900 <_start@@Base+0x2300>
   16a2c:	mov	r2, #2
   16a30:	mov	r3, #0
   16a34:	ldr	r1, [sp, #40]	; 0x28
   16a38:	strd	r2, [r1]
   16a3c:	mov	r3, #0
   16a40:	str	r3, [r5]
   16a44:	mov	r4, r0
   16a48:	b	16900 <_start@@Base+0x2300>
   16a4c:	ldr	r3, [sp, #44]	; 0x2c
   16a50:	str	r3, [sp]
   16a54:	mov	r3, #8
   16a58:	mov	r2, r9
   16a5c:	mov	r1, r4
   16a60:	mov	r0, r8
   16a64:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16a68:	cmp	r4, r0
   16a6c:	beq	16900 <_start@@Base+0x2300>
   16a70:	mov	r2, #3
   16a74:	mov	r3, #0
   16a78:	ldr	r1, [sp, #40]	; 0x28
   16a7c:	strd	r2, [r1]
   16a80:	mov	r3, #0
   16a84:	str	r3, [r5]
   16a88:	mov	r4, r0
   16a8c:	b	16900 <_start@@Base+0x2300>
   16a90:	ldr	r3, [sp, #44]	; 0x2c
   16a94:	str	r3, [sp]
   16a98:	mov	r3, #7
   16a9c:	mov	r2, r9
   16aa0:	mov	r1, r4
   16aa4:	mov	r0, r8
   16aa8:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16aac:	cmp	r4, r0
   16ab0:	beq	16900 <_start@@Base+0x2300>
   16ab4:	mov	r2, #1
   16ab8:	mov	r3, #0
   16abc:	ldr	r1, [sp, #40]	; 0x28
   16ac0:	strd	r2, [r1]
   16ac4:	mov	r3, #0
   16ac8:	str	r3, [r5]
   16acc:	mov	r4, r0
   16ad0:	b	16900 <_start@@Base+0x2300>
   16ad4:	ldr	r3, [sp, #44]	; 0x2c
   16ad8:	str	r3, [sp]
   16adc:	mov	r3, #4
   16ae0:	mov	r2, r9
   16ae4:	mov	r1, r4
   16ae8:	mov	r0, r8
   16aec:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16af0:	cmp	r4, r0
   16af4:	moveq	r4, r0
   16af8:	beq	16900 <_start@@Base+0x2300>
   16afc:	mov	r2, #0
   16b00:	mov	r3, #0
   16b04:	ldr	r1, [sp, #40]	; 0x28
   16b08:	strd	r2, [r1]
   16b0c:	mov	r3, #0
   16b10:	str	r3, [r5]
   16b14:	mov	r4, r0
   16b18:	b	16900 <_start@@Base+0x2300>
   16b1c:	nop	{0}
   16b20:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16b24:	stclmi	14, cr6, [pc, #-460]!	; 16960 <_start@@Base+0x2360>
   16b28:	andeq	r0, r0, r0
   16b2c:	cmnmi	ip, r0, lsl #8
   16b30:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16b34:	stclmi	14, cr6, [pc, #-460]!	; 16970 <_start@@Base+0x2370>
   16b38:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16b3c:	stclmi	14, cr6, [pc, #-460]!	; 16978 <_start@@Base+0x2378>
   16b40:	andeq	r0, r0, r0
   16b44:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16b48:	cmnpl	r9, #112, 26	; 0x1c00
   16b4c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16b50:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16b54:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16b58:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16b5c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16b60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16b64:	strd	r6, [sp, #8]
   16b68:	str	r8, [sp, #16]
   16b6c:	str	lr, [sp, #20]
   16b70:	sub	sp, sp, #8
   16b74:	mov	r6, r0
   16b78:	mov	r4, r1
   16b7c:	mov	r5, r2
   16b80:	mov	r7, r3
   16b84:	mov	r1, r2
   16b88:	mov	r0, r4
   16b8c:	bl	146f0 <_start@@Base+0xf0>
   16b90:	add	r3, pc, #280	; 0x118
   16b94:	ldrd	r2, [r3]
   16b98:	cmp	r1, r3
   16b9c:	cmpeq	r0, r2
   16ba0:	beq	16bdc <_start@@Base+0x25dc>
   16ba4:	mov	r2, #0
   16ba8:	mov	r3, r1
   16bac:	add	r1, pc, #260	; 0x104
   16bb0:	ldrd	r0, [r1]
   16bb4:	cmp	r3, r1
   16bb8:	cmpeq	r2, r0
   16bbc:	beq	16c64 <_start@@Base+0x2664>
   16bc0:	mov	r0, r4
   16bc4:	add	sp, sp, #8
   16bc8:	ldrd	r4, [sp]
   16bcc:	ldrd	r6, [sp, #8]
   16bd0:	ldr	r8, [sp, #16]
   16bd4:	add	sp, sp, #20
   16bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bdc:	mov	r1, r5
   16be0:	add	r0, r4, #8
   16be4:	bl	146f0 <_start@@Base+0xf0>
   16be8:	add	r3, pc, #208	; 0xd0
   16bec:	ldrd	r2, [r3]
   16bf0:	cmp	r1, r3
   16bf4:	cmpeq	r0, r2
   16bf8:	bne	16bc0 <_start@@Base+0x25c0>
   16bfc:	add	r8, r4, #16
   16c00:	mov	r1, r5
   16c04:	mov	r0, r8
   16c08:	bl	146f0 <_start@@Base+0xf0>
   16c0c:	mov	r2, #0
   16c10:	and	r3, r1, #-16777216	; 0xff000000
   16c14:	cmp	r3, #1694498816	; 0x65000000
   16c18:	cmpeq	r2, #0
   16c1c:	bne	16bc0 <_start@@Base+0x25c0>
   16c20:	ldr	r3, [sp, #36]	; 0x24
   16c24:	str	r3, [sp]
   16c28:	mov	r3, #1
   16c2c:	mov	r2, r5
   16c30:	mov	r1, r8
   16c34:	mov	r0, r6
   16c38:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16c3c:	cmp	r8, r0
   16c40:	beq	16bc0 <_start@@Base+0x25c0>
   16c44:	mov	r2, #1
   16c48:	mov	r3, #0
   16c4c:	ldr	r1, [sp, #32]
   16c50:	strd	r2, [r1]
   16c54:	mov	r3, #0
   16c58:	str	r3, [r7]
   16c5c:	mov	r4, r0
   16c60:	b	16bc0 <_start@@Base+0x25c0>
   16c64:	ldr	r3, [sp, #36]	; 0x24
   16c68:	str	r3, [sp]
   16c6c:	mov	r3, #4
   16c70:	mov	r2, r5
   16c74:	mov	r1, r4
   16c78:	mov	r0, r6
   16c7c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16c80:	cmp	r4, r0
   16c84:	moveq	r4, r0
   16c88:	beq	16bc0 <_start@@Base+0x25c0>
   16c8c:	mov	r2, #0
   16c90:	mov	r3, #0
   16c94:	ldr	r1, [sp, #32]
   16c98:	strd	r2, [r1]
   16c9c:	mov	r3, #0
   16ca0:	str	r3, [r7]
   16ca4:	mov	r4, r0
   16ca8:	b	16bc0 <_start@@Base+0x25c0>
   16cac:	nop	{0}
   16cb0:	rsbvc	r6, r5, #116, 28	; 0x740
   16cb4:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   16cb8:	andeq	r0, r0, r0
   16cbc:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16cc0:	cmnvc	r0, #-1073741800	; 0xc0000018
   16cc4:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   16cc8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16ccc:	strd	r6, [sp, #8]
   16cd0:	strd	r8, [sp, #16]
   16cd4:	str	lr, [sp, #24]
   16cd8:	sub	sp, sp, #12
   16cdc:	mov	r8, r0
   16ce0:	mov	r4, r1
   16ce4:	mov	r9, r2
   16ce8:	mov	r5, r3
   16cec:	mov	r1, r2
   16cf0:	mov	r0, r4
   16cf4:	bl	146f0 <_start@@Base+0xf0>
   16cf8:	add	r3, pc, #344	; 0x158
   16cfc:	ldrd	r2, [r3]
   16d00:	cmp	r1, r3
   16d04:	cmpeq	r0, r2
   16d08:	bhi	16d8c <_start@@Base+0x278c>
   16d0c:	mov	r2, #0
   16d10:	mov	r3, r1
   16d14:	add	r1, pc, #324	; 0x144
   16d18:	ldrd	r0, [r1]
   16d1c:	cmp	r3, r1
   16d20:	cmpeq	r2, r0
   16d24:	beq	16d44 <_start@@Base+0x2744>
   16d28:	mov	r0, r4
   16d2c:	add	sp, sp, #12
   16d30:	ldrd	r4, [sp]
   16d34:	ldrd	r6, [sp, #8]
   16d38:	ldrd	r8, [sp, #16]
   16d3c:	add	sp, sp, #24
   16d40:	pop	{pc}		; (ldr pc, [sp], #4)
   16d44:	ldr	r3, [sp, #44]	; 0x2c
   16d48:	str	r3, [sp]
   16d4c:	mov	r3, #4
   16d50:	mov	r2, r9
   16d54:	mov	r1, r4
   16d58:	mov	r0, r8
   16d5c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16d60:	cmp	r4, r0
   16d64:	moveq	r4, r0
   16d68:	beq	16d28 <_start@@Base+0x2728>
   16d6c:	mov	r2, #3
   16d70:	mov	r3, #0
   16d74:	ldr	r1, [sp, #40]	; 0x28
   16d78:	strd	r2, [r1]
   16d7c:	mov	r3, #0
   16d80:	str	r3, [r5]
   16d84:	mov	r4, r0
   16d88:	b	16d28 <_start@@Base+0x2728>
   16d8c:	lsr	r2, r0, #16
   16d90:	lsl	r2, r2, #16
   16d94:	add	r7, pc, #204	; 0xcc
   16d98:	ldrd	r6, [r7]
   16d9c:	cmp	r1, r7
   16da0:	cmpeq	r2, r6
   16da4:	beq	16e0c <_start@@Base+0x280c>
   16da8:	mov	r2, #0
   16dac:	mov	r3, r1
   16db0:	add	r1, pc, #184	; 0xb8
   16db4:	ldrd	r0, [r1]
   16db8:	cmp	r3, r1
   16dbc:	cmpeq	r2, r0
   16dc0:	bne	16d28 <_start@@Base+0x2728>
   16dc4:	ldr	r3, [sp, #44]	; 0x2c
   16dc8:	str	r3, [sp]
   16dcc:	mov	r3, #4
   16dd0:	mov	r2, r9
   16dd4:	mov	r1, r4
   16dd8:	mov	r0, r8
   16ddc:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16de0:	cmp	r4, r0
   16de4:	moveq	r4, r0
   16de8:	beq	16d28 <_start@@Base+0x2728>
   16dec:	add	r3, pc, #132	; 0x84
   16df0:	ldrd	r2, [r3]
   16df4:	ldr	r1, [sp, #40]	; 0x28
   16df8:	strd	r2, [r1]
   16dfc:	mov	r3, #0
   16e00:	str	r3, [r5]
   16e04:	mov	r4, r0
   16e08:	b	16d28 <_start@@Base+0x2728>
   16e0c:	ldr	r3, [sp, #44]	; 0x2c
   16e10:	str	r3, [sp]
   16e14:	mov	r3, #6
   16e18:	mov	r2, r9
   16e1c:	mov	r1, r4
   16e20:	mov	r0, r8
   16e24:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16e28:	cmp	r4, r0
   16e2c:	moveq	r4, r0
   16e30:	beq	16d28 <_start@@Base+0x2728>
   16e34:	mvn	r2, #1
   16e38:	mvn	r3, #0
   16e3c:	ldr	r1, [sp, #40]	; 0x28
   16e40:	strd	r2, [r1]
   16e44:	mov	r3, #1
   16e48:	str	r3, [r5]
   16e4c:	mov	r4, r0
   16e50:	b	16d28 <_start@@Base+0x2728>
   16e54:	nop	{0}
   16e58:			; <UNDEFINED> instruction: 0xffffffff
   16e5c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16e60:	andeq	r0, r0, r0
   16e64:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16e68:	strbvs	r0, [r7, #-0]!
   16e6c:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16e70:	andeq	r0, r0, r0
   16e74:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16e78:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16e7c:	andeq	r0, r0, r0
   16e80:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16e84:	strd	r6, [sp, #8]
   16e88:	strd	r8, [sp, #16]
   16e8c:	str	lr, [sp, #24]
   16e90:	sub	sp, sp, #12
   16e94:	mov	r8, r0
   16e98:	mov	r4, r1
   16e9c:	mov	r9, r2
   16ea0:	mov	r5, r3
   16ea4:	mov	r1, r2
   16ea8:	mov	r0, r4
   16eac:	bl	146f0 <_start@@Base+0xf0>
   16eb0:	add	r3, pc, #464	; 0x1d0
   16eb4:	ldrd	r2, [r3]
   16eb8:	cmp	r1, r3
   16ebc:	cmpeq	r0, r2
   16ec0:	bhi	16f44 <_start@@Base+0x2944>
   16ec4:	mov	r2, #0
   16ec8:	mov	r3, r1
   16ecc:	add	r1, pc, #444	; 0x1bc
   16ed0:	ldrd	r0, [r1]
   16ed4:	cmp	r3, r1
   16ed8:	cmpeq	r2, r0
   16edc:	beq	16efc <_start@@Base+0x28fc>
   16ee0:	mov	r0, r4
   16ee4:	add	sp, sp, #12
   16ee8:	ldrd	r4, [sp]
   16eec:	ldrd	r6, [sp, #8]
   16ef0:	ldrd	r8, [sp, #16]
   16ef4:	add	sp, sp, #24
   16ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   16efc:	ldr	r3, [sp, #44]	; 0x2c
   16f00:	str	r3, [sp]
   16f04:	mov	r3, #4
   16f08:	mov	r2, r9
   16f0c:	mov	r1, r4
   16f10:	mov	r0, r8
   16f14:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16f18:	cmp	r4, r0
   16f1c:	moveq	r4, r0
   16f20:	beq	16ee0 <_start@@Base+0x28e0>
   16f24:	mov	r2, #2
   16f28:	mov	r3, #0
   16f2c:	ldr	r1, [sp, #40]	; 0x28
   16f30:	strd	r2, [r1]
   16f34:	mov	r3, #0
   16f38:	str	r3, [r5]
   16f3c:	mov	r4, r0
   16f40:	b	16ee0 <_start@@Base+0x28e0>
   16f44:	add	r3, pc, #332	; 0x14c
   16f48:	ldrd	r2, [r3]
   16f4c:	cmp	r1, r3
   16f50:	cmpeq	r0, r2
   16f54:	bhi	16fbc <_start@@Base+0x29bc>
   16f58:	mov	r2, #0
   16f5c:	mov	r3, r1
   16f60:	add	r1, pc, #312	; 0x138
   16f64:	ldrd	r0, [r1]
   16f68:	cmp	r3, r1
   16f6c:	cmpeq	r2, r0
   16f70:	bne	16ee0 <_start@@Base+0x28e0>
   16f74:	ldr	r3, [sp, #44]	; 0x2c
   16f78:	str	r3, [sp]
   16f7c:	mov	r3, #4
   16f80:	mov	r2, r9
   16f84:	mov	r1, r4
   16f88:	mov	r0, r8
   16f8c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   16f90:	cmp	r4, r0
   16f94:	moveq	r4, r0
   16f98:	beq	16ee0 <_start@@Base+0x28e0>
   16f9c:	mov	r2, #42	; 0x2a
   16fa0:	mov	r3, #0
   16fa4:	ldr	r1, [sp, #40]	; 0x28
   16fa8:	strd	r2, [r1]
   16fac:	mov	r3, #0
   16fb0:	str	r3, [r5]
   16fb4:	mov	r4, r0
   16fb8:	b	16ee0 <_start@@Base+0x28e0>
   16fbc:	bic	r2, r0, #255	; 0xff
   16fc0:	add	r7, pc, #224	; 0xe0
   16fc4:	ldrd	r6, [r7]
   16fc8:	cmp	r1, r7
   16fcc:	cmpeq	r2, r6
   16fd0:	beq	1703c <_start@@Base+0x2a3c>
   16fd4:	lsr	r2, r0, #16
   16fd8:	lsl	r2, r2, #16
   16fdc:	mov	r3, r1
   16fe0:	add	r1, pc, #200	; 0xc8
   16fe4:	ldrd	r0, [r1]
   16fe8:	cmp	r3, r1
   16fec:	cmpeq	r2, r0
   16ff0:	bne	16ee0 <_start@@Base+0x28e0>
   16ff4:	ldr	r3, [sp, #44]	; 0x2c
   16ff8:	str	r3, [sp]
   16ffc:	mov	r3, #6
   17000:	mov	r2, r9
   17004:	mov	r1, r4
   17008:	mov	r0, r8
   1700c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   17010:	cmp	r4, r0
   17014:	moveq	r4, r0
   17018:	beq	16ee0 <_start@@Base+0x28e0>
   1701c:	mvn	r2, #1
   17020:	mvn	r3, #0
   17024:	ldr	r1, [sp, #40]	; 0x28
   17028:	strd	r2, [r1]
   1702c:	mov	r3, #1
   17030:	str	r3, [r5]
   17034:	mov	r4, r0
   17038:	b	16ee0 <_start@@Base+0x28e0>
   1703c:	ldr	r3, [sp, #44]	; 0x2c
   17040:	str	r3, [sp]
   17044:	mov	r3, #7
   17048:	mov	r2, r9
   1704c:	mov	r1, r4
   17050:	mov	r0, r8
   17054:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   17058:	cmp	r4, r0
   1705c:	moveq	r4, r0
   17060:	beq	16ee0 <_start@@Base+0x28e0>
   17064:	mvn	r2, #0
   17068:	mvn	r3, #0
   1706c:	ldr	r1, [sp, #40]	; 0x28
   17070:	strd	r2, [r1]
   17074:	mov	r3, #1
   17078:	str	r3, [r5]
   1707c:	mov	r4, r0
   17080:	b	16ee0 <_start@@Base+0x28e0>
   17084:	nop	{0}
   17088:			; <UNDEFINED> instruction: 0xffffffff
   1708c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17090:	andeq	r0, r0, r0
   17094:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   17098:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1709c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   170a0:	andeq	r0, r0, r0
   170a4:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   170a8:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   170ac:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   170b0:	strbvs	r0, [r7, #-0]!
   170b4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   170b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   170bc:	strd	r6, [sp, #8]
   170c0:	str	lr, [sp, #16]
   170c4:	sub	sp, sp, #12
   170c8:	mov	r6, r0
   170cc:	mov	r4, r1
   170d0:	mov	r5, r2
   170d4:	mov	r7, r3
   170d8:	mov	r1, r2
   170dc:	mov	r0, r4
   170e0:	bl	146f0 <_start@@Base+0xf0>
   170e4:	add	r3, pc, #332	; 0x14c
   170e8:	ldrd	r2, [r3]
   170ec:	cmp	r1, r3
   170f0:	cmpeq	r0, r2
   170f4:	bhi	17174 <_start@@Base+0x2b74>
   170f8:	mov	r2, #0
   170fc:	mov	r3, r1
   17100:	add	r1, pc, #312	; 0x138
   17104:	ldrd	r0, [r1]
   17108:	cmp	r3, r1
   1710c:	cmpeq	r2, r0
   17110:	beq	1712c <_start@@Base+0x2b2c>
   17114:	mov	r0, r4
   17118:	add	sp, sp, #12
   1711c:	ldrd	r4, [sp]
   17120:	ldrd	r6, [sp, #8]
   17124:	add	sp, sp, #16
   17128:	pop	{pc}		; (ldr pc, [sp], #4)
   1712c:	ldr	r3, [sp, #36]	; 0x24
   17130:	str	r3, [sp]
   17134:	mov	r3, #4
   17138:	mov	r2, r5
   1713c:	mov	r1, r4
   17140:	mov	r0, r6
   17144:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   17148:	cmp	r4, r0
   1714c:	moveq	r4, r0
   17150:	beq	17114 <_start@@Base+0x2b14>
   17154:	mvn	r2, #11
   17158:	mvn	r3, #0
   1715c:	ldr	r1, [sp, #32]
   17160:	strd	r2, [r1]
   17164:	mov	r3, #1
   17168:	str	r3, [r7]
   1716c:	mov	r4, r0
   17170:	b	17114 <_start@@Base+0x2b14>
   17174:	mov	r2, #0
   17178:	mov	r3, r1
   1717c:	add	r1, pc, #196	; 0xc4
   17180:	ldrd	r0, [r1]
   17184:	cmp	r3, r1
   17188:	cmpeq	r2, r0
   1718c:	beq	171ec <_start@@Base+0x2bec>
   17190:	add	r1, pc, #184	; 0xb8
   17194:	ldrd	r0, [r1]
   17198:	cmp	r3, r1
   1719c:	cmpeq	r2, r0
   171a0:	bne	17114 <_start@@Base+0x2b14>
   171a4:	ldr	r3, [sp, #36]	; 0x24
   171a8:	str	r3, [sp]
   171ac:	mov	r3, #4
   171b0:	mov	r2, r5
   171b4:	mov	r1, r4
   171b8:	mov	r0, r6
   171bc:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   171c0:	cmp	r4, r0
   171c4:	moveq	r4, r0
   171c8:	beq	17114 <_start@@Base+0x2b14>
   171cc:	mvn	r2, #10
   171d0:	mvn	r3, #0
   171d4:	ldr	r1, [sp, #32]
   171d8:	strd	r2, [r1]
   171dc:	mov	r3, #1
   171e0:	str	r3, [r7]
   171e4:	mov	r4, r0
   171e8:	b	17114 <_start@@Base+0x2b14>
   171ec:	ldr	r3, [sp, #36]	; 0x24
   171f0:	str	r3, [sp]
   171f4:	mov	r3, #4
   171f8:	mov	r2, r5
   171fc:	mov	r1, r4
   17200:	mov	r0, r6
   17204:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   17208:	cmp	r4, r0
   1720c:	moveq	r4, r0
   17210:	beq	17114 <_start@@Base+0x2b14>
   17214:	mvn	r2, #9
   17218:	mvn	r3, #0
   1721c:	ldr	r1, [sp, #32]
   17220:	strd	r2, [r1]
   17224:	mov	r3, #1
   17228:	str	r3, [r7]
   1722c:	mov	r4, r0
   17230:	b	17114 <_start@@Base+0x2b14>
   17234:	nop	{0}
   17238:			; <UNDEFINED> instruction: 0xffffffff
   1723c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   17240:	andeq	r0, r0, r0
   17244:	mcrvs	7, 3, r6, cr5, cr1, {1}
   17248:	andeq	r0, r0, r0
   1724c:	mcrvs	7, 3, r6, cr5, cr3, {1}
   17250:	andeq	r0, r0, r0
   17254:	mcrvs	7, 3, r6, cr5, cr2, {1}
   17258:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1725c:	strd	r6, [sp, #8]
   17260:	strd	r8, [sp, #16]
   17264:	str	lr, [sp, #24]
   17268:	sub	sp, sp, #12
   1726c:	mov	r8, r0
   17270:	mov	r4, r1
   17274:	mov	r9, r2
   17278:	mov	r5, r3
   1727c:	mov	r1, r2
   17280:	mov	r0, r4
   17284:	bl	146f0 <_start@@Base+0xf0>
   17288:	add	r3, pc, #344	; 0x158
   1728c:	ldrd	r2, [r3]
   17290:	cmp	r1, r3
   17294:	cmpeq	r0, r2
   17298:	bhi	1731c <_start@@Base+0x2d1c>
   1729c:	mov	r2, #0
   172a0:	mov	r3, r1
   172a4:	add	r1, pc, #324	; 0x144
   172a8:	ldrd	r0, [r1]
   172ac:	cmp	r3, r1
   172b0:	cmpeq	r2, r0
   172b4:	beq	172d4 <_start@@Base+0x2cd4>
   172b8:	mov	r0, r4
   172bc:	add	sp, sp, #12
   172c0:	ldrd	r4, [sp]
   172c4:	ldrd	r6, [sp, #8]
   172c8:	ldrd	r8, [sp, #16]
   172cc:	add	sp, sp, #24
   172d0:	pop	{pc}		; (ldr pc, [sp], #4)
   172d4:	ldr	r3, [sp, #44]	; 0x2c
   172d8:	str	r3, [sp]
   172dc:	mov	r3, #4
   172e0:	mov	r2, r9
   172e4:	mov	r1, r4
   172e8:	mov	r0, r8
   172ec:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   172f0:	cmp	r4, r0
   172f4:	moveq	r4, r0
   172f8:	beq	172b8 <_start@@Base+0x2cb8>
   172fc:	mov	r2, #8
   17300:	mov	r3, #0
   17304:	ldr	r1, [sp, #40]	; 0x28
   17308:	strd	r2, [r1]
   1730c:	mov	r3, #0
   17310:	str	r3, [r5]
   17314:	mov	r4, r0
   17318:	b	172b8 <_start@@Base+0x2cb8>
   1731c:	mov	r2, #0
   17320:	bic	r3, r1, #255	; 0xff
   17324:	add	r7, pc, #204	; 0xcc
   17328:	ldrd	r6, [r7]
   1732c:	cmp	r3, r7
   17330:	cmpeq	r2, r6
   17334:	beq	1739c <_start@@Base+0x2d9c>
   17338:	and	r2, r0, #-16777216	; 0xff000000
   1733c:	mov	r3, r1
   17340:	add	r1, pc, #184	; 0xb8
   17344:	ldrd	r0, [r1]
   17348:	cmp	r3, r1
   1734c:	cmpeq	r2, r0
   17350:	bne	172b8 <_start@@Base+0x2cb8>
   17354:	ldr	r3, [sp, #44]	; 0x2c
   17358:	str	r3, [sp]
   1735c:	mov	r3, #5
   17360:	mov	r2, r9
   17364:	mov	r1, r4
   17368:	mov	r0, r8
   1736c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   17370:	cmp	r4, r0
   17374:	moveq	r4, r0
   17378:	beq	172b8 <_start@@Base+0x2cb8>
   1737c:	mov	r2, #2
   17380:	mov	r3, #0
   17384:	ldr	r1, [sp, #40]	; 0x28
   17388:	strd	r2, [r1]
   1738c:	mov	r3, #0
   17390:	str	r3, [r5]
   17394:	mov	r4, r0
   17398:	b	172b8 <_start@@Base+0x2cb8>
   1739c:	ldr	r3, [sp, #44]	; 0x2c
   173a0:	str	r3, [sp]
   173a4:	mov	r3, #3
   173a8:	mov	r2, r9
   173ac:	mov	r1, r4
   173b0:	mov	r0, r8
   173b4:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   173b8:	cmp	r4, r0
   173bc:	moveq	r4, r0
   173c0:	beq	172b8 <_start@@Base+0x2cb8>
   173c4:	mov	r2, #1
   173c8:	mov	r3, #0
   173cc:	ldr	r1, [sp, #40]	; 0x28
   173d0:	strd	r2, [r1]
   173d4:	mov	r3, #0
   173d8:	str	r3, [r5]
   173dc:	mov	r4, r0
   173e0:	b	172b8 <_start@@Base+0x2cb8>
   173e4:	nop	{0}
   173e8:	ldclvs	15, cr15, [pc, #1020]!	; 177ec <_start@@Base+0x31ec>
   173ec:	ldrbmi	r6, [r2, -r5, ror #10]!
   173f0:	andeq	r0, r0, r0
   173f4:	rsbmi	r7, ip, #423624704	; 0x19400000
   173f8:	andeq	r0, r0, r0
   173fc:	rsbpl	r6, r5, #0, 8
   17400:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   17404:	ldrbmi	r6, [r2, -r5, ror #10]!
   17408:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1740c:	strd	r6, [sp, #8]
   17410:	strd	r8, [sp, #16]
   17414:	str	sl, [sp, #24]
   17418:	str	lr, [sp, #28]
   1741c:	sub	sp, sp, #8
   17420:	mov	r9, r0
   17424:	mov	r4, r1
   17428:	mov	sl, r2
   1742c:	mov	r8, r3
   17430:	mov	r1, r2
   17434:	mov	r0, r4
   17438:	bl	146f0 <_start@@Base+0xf0>
   1743c:	add	r3, pc, #940	; 0x3ac
   17440:	ldrd	r2, [r3]
   17444:	cmp	r1, r3
   17448:	cmpeq	r0, r2
   1744c:	bhi	17508 <_start@@Base+0x2f08>
   17450:	add	r3, pc, #928	; 0x3a0
   17454:	ldrd	r2, [r3]
   17458:	cmp	r1, r3
   1745c:	cmpeq	r0, r2
   17460:	bne	174e8 <_start@@Base+0x2ee8>
   17464:	mov	r1, sl
   17468:	add	r0, r4, #8
   1746c:	bl	146f0 <_start@@Base+0xf0>
   17470:	add	r3, pc, #904	; 0x388
   17474:	ldrd	r2, [r3]
   17478:	cmp	r1, r3
   1747c:	cmpeq	r0, r2
   17480:	bne	174e8 <_start@@Base+0x2ee8>
   17484:	add	r5, r4, #16
   17488:	mov	r1, sl
   1748c:	mov	r0, r5
   17490:	bl	146f0 <_start@@Base+0xf0>
   17494:	mov	r2, #0
   17498:	and	r3, r1, #-16777216	; 0xff000000
   1749c:	cmp	r3, #1912602624	; 0x72000000
   174a0:	cmpeq	r2, #0
   174a4:	bne	174e8 <_start@@Base+0x2ee8>
   174a8:	sub	r5, sl, r5
   174ac:	cmp	r5, #1
   174b0:	ble	174e8 <_start@@Base+0x2ee8>
   174b4:	ldrb	r3, [r4, #17]
   174b8:	cmp	r3, #46	; 0x2e
   174bc:	bne	174e8 <_start@@Base+0x2ee8>
   174c0:	ldr	r3, [sp, #44]	; 0x2c
   174c4:	str	r3, [sp, #4]
   174c8:	ldr	r3, [sp, #40]	; 0x28
   174cc:	str	r3, [sp]
   174d0:	mov	r3, r8
   174d4:	mov	r2, sl
   174d8:	add	r1, r4, #18
   174dc:	mov	r0, r9
   174e0:	bl	16420 <_start@@Base+0x1e20>
   174e4:	mov	r4, r0
   174e8:	mov	r0, r4
   174ec:	add	sp, sp, #8
   174f0:	ldrd	r4, [sp]
   174f4:	ldrd	r6, [sp, #8]
   174f8:	ldrd	r8, [sp, #16]
   174fc:	ldr	sl, [sp, #24]
   17500:	add	sp, sp, #28
   17504:	pop	{pc}		; (ldr pc, [sp], #4)
   17508:	add	r3, pc, #760	; 0x2f8
   1750c:	ldrd	r2, [r3]
   17510:	cmp	r1, r3
   17514:	cmpeq	r0, r2
   17518:	beq	17690 <_start@@Base+0x3090>
   1751c:	add	r3, pc, #748	; 0x2ec
   17520:	ldrd	r2, [r3]
   17524:	cmp	r1, r3
   17528:	cmpeq	r0, r2
   1752c:	bne	174e8 <_start@@Base+0x2ee8>
   17530:	mov	r1, sl
   17534:	add	r0, r4, #8
   17538:	bl	146f0 <_start@@Base+0xf0>
   1753c:	add	r3, pc, #724	; 0x2d4
   17540:	ldrd	r2, [r3]
   17544:	cmp	r1, r3
   17548:	cmpeq	r0, r2
   1754c:	bne	174e8 <_start@@Base+0x2ee8>
   17550:	mov	r1, sl
   17554:	add	r0, r4, #16
   17558:	bl	146f0 <_start@@Base+0xf0>
   1755c:	add	r3, pc, #700	; 0x2bc
   17560:	ldrd	r2, [r3]
   17564:	cmp	r1, r3
   17568:	cmpeq	r0, r2
   1756c:	bne	174e8 <_start@@Base+0x2ee8>
   17570:	mov	r1, sl
   17574:	add	r0, r4, #24
   17578:	bl	146f0 <_start@@Base+0xf0>
   1757c:	add	r3, pc, #676	; 0x2a4
   17580:	ldrd	r2, [r3]
   17584:	cmp	r1, r3
   17588:	cmpeq	r0, r2
   1758c:	bne	174e8 <_start@@Base+0x2ee8>
   17590:	add	r5, r4, #32
   17594:	mov	r1, sl
   17598:	mov	r0, r5
   1759c:	bl	146f0 <_start@@Base+0xf0>
   175a0:	mov	r2, #0
   175a4:	and	r3, r1, #-16777216	; 0xff000000
   175a8:	cmp	r3, #1694498816	; 0x65000000
   175ac:	cmpeq	r2, #0
   175b0:	bne	174e8 <_start@@Base+0x2ee8>
   175b4:	sub	r5, sl, r5
   175b8:	cmp	r5, #1
   175bc:	ble	174e8 <_start@@Base+0x2ee8>
   175c0:	ldrb	r3, [r4, #33]	; 0x21
   175c4:	cmp	r3, #46	; 0x2e
   175c8:	bne	174e8 <_start@@Base+0x2ee8>
   175cc:	add	r5, r4, #34	; 0x22
   175d0:	mov	r1, sl
   175d4:	mov	r0, r5
   175d8:	bl	146f0 <_start@@Base+0xf0>
   175dc:	mov	r2, #0
   175e0:	bic	r3, r1, #255	; 0xff
   175e4:	add	r7, pc, #580	; 0x244
   175e8:	ldrd	r6, [r7]
   175ec:	cmp	r3, r7
   175f0:	cmpeq	r2, r6
   175f4:	beq	17b88 <_start@@Base+0x3588>
   175f8:	add	r3, pc, #568	; 0x238
   175fc:	ldrd	r2, [r3]
   17600:	cmp	r1, r3
   17604:	cmpeq	r0, r2
   17608:	movne	r4, r5
   1760c:	bne	174e8 <_start@@Base+0x2ee8>
   17610:	add	r6, r4, #42	; 0x2a
   17614:	mov	r1, sl
   17618:	mov	r0, r6
   1761c:	bl	146f0 <_start@@Base+0xf0>
   17620:	mov	r2, #0
   17624:	lsr	r3, r1, #16
   17628:	lsl	r3, r3, #16
   1762c:	mov	r0, #0
   17630:	mov	r1, #0
   17634:	movt	r1, #24940	; 0x616c
   17638:	cmp	r3, r1
   1763c:	cmpeq	r2, r0
   17640:	movne	r4, r5
   17644:	bne	174e8 <_start@@Base+0x2ee8>
   17648:	ldr	r3, [sp, #44]	; 0x2c
   1764c:	str	r3, [sp]
   17650:	mov	r3, #2
   17654:	mov	r2, sl
   17658:	mov	r1, r6
   1765c:	mov	r0, r9
   17660:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   17664:	mov	r4, r0
   17668:	cmp	r6, r0
   1766c:	moveq	r4, r5
   17670:	beq	174e8 <_start@@Base+0x2ee8>
   17674:	mov	r2, #0
   17678:	mov	r3, #0
   1767c:	ldr	r1, [sp, #40]	; 0x28
   17680:	strd	r2, [r1]
   17684:	mov	r3, #0
   17688:	str	r3, [r8]
   1768c:	b	174e8 <_start@@Base+0x2ee8>
   17690:	mov	r1, sl
   17694:	add	r0, r4, #8
   17698:	bl	146f0 <_start@@Base+0xf0>
   1769c:	add	r3, pc, #412	; 0x19c
   176a0:	ldrd	r2, [r3]
   176a4:	cmp	r1, r3
   176a8:	cmpeq	r0, r2
   176ac:	bhi	17928 <_start@@Base+0x3328>
   176b0:	add	r3, pc, #400	; 0x190
   176b4:	ldrd	r2, [r3]
   176b8:	cmp	r1, r3
   176bc:	cmpeq	r0, r2
   176c0:	bhi	17750 <_start@@Base+0x3150>
   176c4:	add	r3, pc, #388	; 0x184
   176c8:	ldrd	r2, [r3]
   176cc:	cmp	r1, r3
   176d0:	cmpeq	r0, r2
   176d4:	bne	174e8 <_start@@Base+0x2ee8>
   176d8:	add	r5, r4, #16
   176dc:	mov	r1, sl
   176e0:	mov	r0, r5
   176e4:	bl	146f0 <_start@@Base+0xf0>
   176e8:	mov	r2, #0
   176ec:	lsr	r3, r1, #16
   176f0:	lsl	r3, r3, #16
   176f4:	mov	r0, #0
   176f8:	mov	r1, #0
   176fc:	movt	r1, #28281	; 0x6e79
   17700:	cmp	r3, r1
   17704:	cmpeq	r2, r0
   17708:	bne	174e8 <_start@@Base+0x2ee8>
   1770c:	sub	r5, sl, r5
   17710:	cmp	r5, #2
   17714:	ble	174e8 <_start@@Base+0x2ee8>
   17718:	ldrb	r3, [r4, #18]
   1771c:	cmp	r3, #46	; 0x2e
   17720:	bne	174e8 <_start@@Base+0x2ee8>
   17724:	ldr	r3, [sp, #44]	; 0x2c
   17728:	str	r3, [sp, #4]
   1772c:	ldr	r3, [sp, #40]	; 0x28
   17730:	str	r3, [sp]
   17734:	mov	r3, r8
   17738:	mov	r2, sl
   1773c:	add	r1, r4, #19
   17740:	mov	r0, r9
   17744:	bl	168a0 <_start@@Base+0x22a0>
   17748:	mov	r4, r0
   1774c:	b	174e8 <_start@@Base+0x2ee8>
   17750:	add	r3, pc, #256	; 0x100
   17754:	ldrd	r2, [r3]
   17758:	cmp	r1, r3
   1775c:	cmpeq	r0, r2
   17760:	beq	178b8 <_start@@Base+0x32b8>
   17764:	add	r3, pc, #244	; 0xf4
   17768:	ldrd	r2, [r3]
   1776c:	cmp	r1, r3
   17770:	cmpeq	r0, r2
   17774:	bne	174e8 <_start@@Base+0x2ee8>
   17778:	add	r5, r4, #16
   1777c:	mov	r1, sl
   17780:	mov	r0, r5
   17784:	bl	146f0 <_start@@Base+0xf0>
   17788:	mov	r2, #0
   1778c:	lsr	r3, r1, #16
   17790:	lsl	r3, r3, #16
   17794:	mov	r0, #0
   17798:	mov	r1, #0
   1779c:	movt	r1, #28527	; 0x6f6f
   177a0:	cmp	r3, r1
   177a4:	cmpeq	r2, r0
   177a8:	bne	174e8 <_start@@Base+0x2ee8>
   177ac:	sub	r5, sl, r5
   177b0:	cmp	r5, #2
   177b4:	ble	174e8 <_start@@Base+0x2ee8>
   177b8:	ldrb	r3, [r4, #18]
   177bc:	cmp	r3, #46	; 0x2e
   177c0:	bne	174e8 <_start@@Base+0x2ee8>
   177c4:	ldr	r3, [sp, #44]	; 0x2c
   177c8:	str	r3, [sp, #4]
   177cc:	ldr	r3, [sp, #40]	; 0x28
   177d0:	str	r3, [sp]
   177d4:	mov	r3, r8
   177d8:	mov	r2, sl
   177dc:	add	r1, r4, #19
   177e0:	mov	r0, r9
   177e4:	bl	16b60 <_start@@Base+0x2560>
   177e8:	mov	r4, r0
   177ec:	b	174e8 <_start@@Base+0x2ee8>
   177f0:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   177f4:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   177f8:	cmnvs	r3, lr, lsr #18
   177fc:			; <UNDEFINED> instruction: 0x46616e74
   17800:	cmnvs	r3, r5, ror #8
   17804:	cmnmi	r8, #-2147483620	; 0x8000001c
   17808:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   1780c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17810:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   17814:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17818:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1781c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   17820:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   17824:	cmnpl	r0, #-1073741800	; 0xc0000018
   17828:	cmnvs	ip, #100, 10	; 0x19000000
   1782c:	svcvs	0x006d496e
   17830:	andeq	r0, r0, r0
   17834:	strbtmi	r6, [pc], -r0, lsl #30
   17838:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   1783c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   17840:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   17844:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17848:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   1784c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17850:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   17854:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17858:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   1785c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17860:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   17864:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17868:	andeq	r0, r0, r0
   1786c:	svcvs	0x006c6f72
   17870:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   17874:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17878:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1787c:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   17880:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   17884:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17888:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   1788c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17890:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17894:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   17898:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   1789c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   178a0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   178a4:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   178a8:	rsbsvc	r7, r4, r5, ror #18
   178ac:	svcvs	0x0074656d
   178b0:	andeq	r0, r0, r0
   178b4:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   178b8:	add	r5, r4, #16
   178bc:	mov	r1, sl
   178c0:	mov	r0, r5
   178c4:	bl	146f0 <_start@@Base+0xf0>
   178c8:	mov	r2, #0
   178cc:	mov	r3, r1
   178d0:	sub	r1, pc, #112	; 0x70
   178d4:	ldrd	r0, [r1]
   178d8:	cmp	r3, r1
   178dc:	cmpeq	r2, r0
   178e0:	bne	174e8 <_start@@Base+0x2ee8>
   178e4:	sub	r5, sl, r5
   178e8:	cmp	r5, #4
   178ec:	ble	174e8 <_start@@Base+0x2ee8>
   178f0:	ldrb	r3, [r4, #20]
   178f4:	cmp	r3, #46	; 0x2e
   178f8:	bne	174e8 <_start@@Base+0x2ee8>
   178fc:	ldr	r3, [sp, #44]	; 0x2c
   17900:	str	r3, [sp, #4]
   17904:	ldr	r3, [sp, #40]	; 0x28
   17908:	str	r3, [sp]
   1790c:	mov	r3, r8
   17910:	mov	r2, sl
   17914:	add	r1, r4, #21
   17918:	mov	r0, r9
   1791c:	bl	17258 <_start@@Base+0x2c58>
   17920:	mov	r4, r0
   17924:	b	174e8 <_start@@Base+0x2ee8>
   17928:	sub	r3, pc, #192	; 0xc0
   1792c:	ldrd	r2, [r3]
   17930:	cmp	r1, r3
   17934:	cmpeq	r0, r2
   17938:	bhi	179ac <_start@@Base+0x33ac>
   1793c:	add	r5, r4, #16
   17940:	mov	r1, sl
   17944:	mov	r0, r5
   17948:	bl	146f0 <_start@@Base+0xf0>
   1794c:	bic	r2, r0, #255	; 0xff
   17950:	mov	r3, r1
   17954:	sub	r1, pc, #228	; 0xe4
   17958:	ldrd	r0, [r1]
   1795c:	cmp	r3, r1
   17960:	cmpeq	r2, r0
   17964:	bne	174e8 <_start@@Base+0x2ee8>
   17968:	sub	r5, sl, r5
   1796c:	cmp	r5, #7
   17970:	ble	174e8 <_start@@Base+0x2ee8>
   17974:	ldrb	r3, [r4, #23]
   17978:	cmp	r3, #46	; 0x2e
   1797c:	bne	174e8 <_start@@Base+0x2ee8>
   17980:	ldr	r3, [sp, #44]	; 0x2c
   17984:	str	r3, [sp, #4]
   17988:	ldr	r3, [sp, #40]	; 0x28
   1798c:	str	r3, [sp]
   17990:	mov	r3, r8
   17994:	mov	r2, sl
   17998:	add	r1, r4, #24
   1799c:	mov	r0, r9
   179a0:	bl	16cc8 <_start@@Base+0x26c8>
   179a4:	mov	r4, r0
   179a8:	b	174e8 <_start@@Base+0x2ee8>
   179ac:	sub	r3, pc, #308	; 0x134
   179b0:	ldrd	r2, [r3]
   179b4:	cmp	r1, r3
   179b8:	cmpeq	r0, r2
   179bc:	bhi	17a44 <_start@@Base+0x3444>
   179c0:	sub	r3, pc, #320	; 0x140
   179c4:	ldrd	r2, [r3]
   179c8:	cmp	r1, r3
   179cc:	cmpeq	r0, r2
   179d0:	bne	174e8 <_start@@Base+0x2ee8>
   179d4:	add	r5, r4, #16
   179d8:	mov	r1, sl
   179dc:	mov	r0, r5
   179e0:	bl	146f0 <_start@@Base+0xf0>
   179e4:	bic	r2, r0, #255	; 0xff
   179e8:	mov	r3, r1
   179ec:	sub	r1, pc, #356	; 0x164
   179f0:	ldrd	r0, [r1]
   179f4:	cmp	r3, r1
   179f8:	cmpeq	r2, r0
   179fc:	bne	174e8 <_start@@Base+0x2ee8>
   17a00:	sub	r5, sl, r5
   17a04:	cmp	r5, #7
   17a08:	ble	174e8 <_start@@Base+0x2ee8>
   17a0c:	ldrb	r3, [r4, #23]
   17a10:	cmp	r3, #46	; 0x2e
   17a14:	bne	174e8 <_start@@Base+0x2ee8>
   17a18:	ldr	r3, [sp, #44]	; 0x2c
   17a1c:	str	r3, [sp, #4]
   17a20:	ldr	r3, [sp, #40]	; 0x28
   17a24:	str	r3, [sp]
   17a28:	mov	r3, r8
   17a2c:	mov	r2, sl
   17a30:	add	r1, r4, #24
   17a34:	mov	r0, r9
   17a38:	bl	16e80 <_start@@Base+0x2880>
   17a3c:	mov	r4, r0
   17a40:	b	174e8 <_start@@Base+0x2ee8>
   17a44:	sub	r3, pc, #436	; 0x1b4
   17a48:	ldrd	r2, [r3]
   17a4c:	cmp	r1, r3
   17a50:	cmpeq	r0, r2
   17a54:	bne	174e8 <_start@@Base+0x2ee8>
   17a58:	add	r5, r4, #16
   17a5c:	mov	r1, sl
   17a60:	mov	r0, r5
   17a64:	bl	146f0 <_start@@Base+0xf0>
   17a68:	bic	r2, r0, #255	; 0xff
   17a6c:	sub	r7, pc, #468	; 0x1d4
   17a70:	ldrd	r6, [r7]
   17a74:	cmp	r1, r7
   17a78:	cmpeq	r2, r6
   17a7c:	bne	17ac4 <_start@@Base+0x34c4>
   17a80:	sub	r5, sl, r5
   17a84:	cmp	r5, #7
   17a88:	ble	174e8 <_start@@Base+0x2ee8>
   17a8c:	ldrb	r3, [r4, #23]
   17a90:	cmp	r3, #46	; 0x2e
   17a94:	bne	174e8 <_start@@Base+0x2ee8>
   17a98:	ldr	r3, [sp, #44]	; 0x2c
   17a9c:	str	r3, [sp, #4]
   17aa0:	ldr	r3, [sp, #40]	; 0x28
   17aa4:	str	r3, [sp]
   17aa8:	mov	r3, r8
   17aac:	mov	r2, sl
   17ab0:	add	r1, r4, #24
   17ab4:	mov	r0, r9
   17ab8:	bl	170b8 <_start@@Base+0x2ab8>
   17abc:	mov	r4, r0
   17ac0:	b	174e8 <_start@@Base+0x2ee8>
   17ac4:	sub	r3, pc, #548	; 0x224
   17ac8:	ldrd	r2, [r3]
   17acc:	cmp	r1, r3
   17ad0:	cmpeq	r0, r2
   17ad4:	bne	174e8 <_start@@Base+0x2ee8>
   17ad8:	add	r5, r4, #24
   17adc:	mov	r1, sl
   17ae0:	mov	r0, r5
   17ae4:	bl	146f0 <_start@@Base+0xf0>
   17ae8:	mov	r2, #0
   17aec:	bic	r3, r1, #255	; 0xff
   17af0:	sub	r1, pc, #584	; 0x248
   17af4:	ldrd	r0, [r1]
   17af8:	cmp	r3, r1
   17afc:	cmpeq	r2, r0
   17b00:	bne	174e8 <_start@@Base+0x2ee8>
   17b04:	sub	r5, sl, r5
   17b08:	cmp	r5, #3
   17b0c:	ble	174e8 <_start@@Base+0x2ee8>
   17b10:	ldrb	r3, [r4, #27]
   17b14:	cmp	r3, #46	; 0x2e
   17b18:	bne	174e8 <_start@@Base+0x2ee8>
   17b1c:	add	r5, r4, #28
   17b20:	mov	r1, sl
   17b24:	mov	r0, r5
   17b28:	bl	146f0 <_start@@Base+0xf0>
   17b2c:	mov	r2, #0
   17b30:	and	r3, r1, #-16777216	; 0xff000000
   17b34:	cmp	r3, #2013265920	; 0x78000000
   17b38:	cmpeq	r2, #0
   17b3c:	movne	r4, r5
   17b40:	bne	174e8 <_start@@Base+0x2ee8>
   17b44:	ldr	r3, [sp, #44]	; 0x2c
   17b48:	str	r3, [sp]
   17b4c:	mov	r3, #1
   17b50:	mov	r2, sl
   17b54:	mov	r1, r5
   17b58:	mov	r0, r9
   17b5c:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   17b60:	mov	r4, r0
   17b64:	cmp	r5, r0
   17b68:	beq	174e8 <_start@@Base+0x2ee8>
   17b6c:	mov	r2, #0
   17b70:	mov	r3, #0
   17b74:	ldr	r1, [sp, #40]	; 0x28
   17b78:	strd	r2, [r1]
   17b7c:	mov	r3, #0
   17b80:	str	r3, [r8]
   17b84:	b	174e8 <_start@@Base+0x2ee8>
   17b88:	ldr	r3, [sp, #44]	; 0x2c
   17b8c:	str	r3, [sp]
   17b90:	mov	r3, #3
   17b94:	mov	r2, sl
   17b98:	mov	r1, r5
   17b9c:	mov	r0, r9
   17ba0:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   17ba4:	mov	r4, r0
   17ba8:	cmp	r5, r0
   17bac:	beq	174e8 <_start@@Base+0x2ee8>
   17bb0:	mov	r2, #17
   17bb4:	mov	r3, #0
   17bb8:	ldr	r1, [sp, #40]	; 0x28
   17bbc:	strd	r2, [r1]
   17bc0:	mov	r3, #0
   17bc4:	str	r3, [r8]
   17bc8:	b	174e8 <_start@@Base+0x2ee8>
   17bcc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17bd0:	strd	r6, [sp, #8]
   17bd4:	strd	r8, [sp, #16]
   17bd8:	str	lr, [sp, #24]
   17bdc:	sub	sp, sp, #28
   17be0:	mov	r4, #0
   17be4:	mov	r5, #0
   17be8:	strd	r4, [sp, #16]
   17bec:	mov	ip, #0
   17bf0:	str	ip, [sp, #12]
   17bf4:	strh	ip, [r3]
   17bf8:	cmp	r1, r2
   17bfc:	moveq	r0, r2
   17c00:	beq	17c2c <_start@@Base+0x362c>
   17c04:	mov	r6, r3
   17c08:	mov	r5, r2
   17c0c:	mov	r4, r1
   17c10:	mov	r7, r0
   17c14:	add	r3, sp, #16
   17c18:	str	r3, [sp]
   17c1c:	add	r3, sp, #12
   17c20:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   17c24:	cmp	r4, r0
   17c28:	bne	17c44 <_start@@Base+0x3644>
   17c2c:	add	sp, sp, #28
   17c30:	ldrd	r4, [sp]
   17c34:	ldrd	r6, [sp, #8]
   17c38:	ldrd	r8, [sp, #16]
   17c3c:	add	sp, sp, #24
   17c40:	pop	{pc}		; (ldr pc, [sp], #4)
   17c44:	ldrd	r2, [sp, #16]
   17c48:	ldr	r1, [sp, #12]
   17c4c:	cmp	r1, #0
   17c50:	beq	17c80 <_start@@Base+0x3680>
   17c54:	cmp	r3, #0
   17c58:	cmpeq	r2, #32768	; 0x8000
   17c5c:	rsbls	r2, r2, #0
   17c60:	strhls	r2, [r6]
   17c64:	bls	17c2c <_start@@Base+0x362c>
   17c68:	mov	r3, #8
   17c6c:	mov	r2, r5
   17c70:	mov	r1, r0
   17c74:	mov	r0, r7
   17c78:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17c7c:	b	17c2c <_start@@Base+0x362c>
   17c80:	movw	r8, #32767	; 0x7fff
   17c84:	mov	r9, #0
   17c88:	cmp	r3, r9
   17c8c:	cmpeq	r2, r8
   17c90:	strhls	r2, [r6]
   17c94:	bls	17c2c <_start@@Base+0x362c>
   17c98:	mov	r3, #7
   17c9c:	mov	r2, r5
   17ca0:	mov	r1, r0
   17ca4:	mov	r0, r7
   17ca8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17cac:	b	17c2c <_start@@Base+0x362c>
   17cb0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17cb4:	strd	r6, [sp, #8]
   17cb8:	strd	r8, [sp, #16]
   17cbc:	str	lr, [sp, #24]
   17cc0:	sub	sp, sp, #28
   17cc4:	mov	r4, #0
   17cc8:	mov	r5, #0
   17ccc:	strd	r4, [sp, #16]
   17cd0:	mov	ip, #0
   17cd4:	str	ip, [sp, #12]
   17cd8:	str	ip, [r3]
   17cdc:	cmp	r1, r2
   17ce0:	moveq	r0, r2
   17ce4:	beq	17d10 <_start@@Base+0x3710>
   17ce8:	mov	r6, r3
   17cec:	mov	r5, r2
   17cf0:	mov	r4, r1
   17cf4:	mov	r7, r0
   17cf8:	add	r3, sp, #16
   17cfc:	str	r3, [sp]
   17d00:	add	r3, sp, #12
   17d04:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   17d08:	cmp	r4, r0
   17d0c:	bne	17d28 <_start@@Base+0x3728>
   17d10:	add	sp, sp, #28
   17d14:	ldrd	r4, [sp]
   17d18:	ldrd	r6, [sp, #8]
   17d1c:	ldrd	r8, [sp, #16]
   17d20:	add	sp, sp, #24
   17d24:	pop	{pc}		; (ldr pc, [sp], #4)
   17d28:	ldrd	r2, [sp, #16]
   17d2c:	ldr	r1, [sp, #12]
   17d30:	cmp	r1, #0
   17d34:	beq	17d64 <_start@@Base+0x3764>
   17d38:	cmp	r3, #0
   17d3c:	cmpeq	r2, #-2147483648	; 0x80000000
   17d40:	rsbls	r2, r2, #0
   17d44:	strls	r2, [r6]
   17d48:	bls	17d10 <_start@@Base+0x3710>
   17d4c:	mov	r3, #8
   17d50:	mov	r2, r5
   17d54:	mov	r1, r0
   17d58:	mov	r0, r7
   17d5c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17d60:	b	17d10 <_start@@Base+0x3710>
   17d64:	mvn	r8, #-2147483648	; 0x80000000
   17d68:	mov	r9, #0
   17d6c:	cmp	r3, r9
   17d70:	cmpeq	r2, r8
   17d74:	strls	r2, [r6]
   17d78:	bls	17d10 <_start@@Base+0x3710>
   17d7c:	mov	r3, #7
   17d80:	mov	r2, r5
   17d84:	mov	r1, r0
   17d88:	mov	r0, r7
   17d8c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17d90:	b	17d10 <_start@@Base+0x3710>
   17d94:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17d98:	strd	r6, [sp, #8]
   17d9c:	strd	r8, [sp, #16]
   17da0:	str	lr, [sp, #24]
   17da4:	sub	sp, sp, #28
   17da8:	mov	r4, #0
   17dac:	mov	r5, #0
   17db0:	strd	r4, [sp, #16]
   17db4:	mov	ip, #0
   17db8:	str	ip, [sp, #12]
   17dbc:	str	ip, [r3]
   17dc0:	cmp	r1, r2
   17dc4:	moveq	r0, r2
   17dc8:	beq	17df4 <_start@@Base+0x37f4>
   17dcc:	mov	r6, r3
   17dd0:	mov	r5, r2
   17dd4:	mov	r4, r1
   17dd8:	mov	r7, r0
   17ddc:	add	r3, sp, #16
   17de0:	str	r3, [sp]
   17de4:	add	r3, sp, #12
   17de8:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   17dec:	cmp	r4, r0
   17df0:	bne	17e0c <_start@@Base+0x380c>
   17df4:	add	sp, sp, #28
   17df8:	ldrd	r4, [sp]
   17dfc:	ldrd	r6, [sp, #8]
   17e00:	ldrd	r8, [sp, #16]
   17e04:	add	sp, sp, #24
   17e08:	pop	{pc}		; (ldr pc, [sp], #4)
   17e0c:	ldr	r3, [sp, #12]
   17e10:	cmp	r3, #0
   17e14:	bne	17e4c <_start@@Base+0x384c>
   17e18:	ldrd	r2, [sp, #16]
   17e1c:	mvn	r8, #0
   17e20:	mov	r9, #0
   17e24:	cmp	r3, r9
   17e28:	cmpeq	r2, r8
   17e2c:	strls	r2, [r6]
   17e30:	bls	17df4 <_start@@Base+0x37f4>
   17e34:	mov	r3, #7
   17e38:	mov	r2, r5
   17e3c:	mov	r1, r0
   17e40:	mov	r0, r7
   17e44:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17e48:	b	17df4 <_start@@Base+0x37f4>
   17e4c:	mov	r3, #8
   17e50:	mov	r2, r5
   17e54:	mov	r1, r0
   17e58:	mov	r0, r7
   17e5c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17e60:	b	17df4 <_start@@Base+0x37f4>
   17e64:	strd	r4, [sp, #-20]!	; 0xffffffec
   17e68:	strd	r6, [sp, #8]
   17e6c:	str	lr, [sp, #16]
   17e70:	sub	sp, sp, #28
   17e74:	mov	r4, #0
   17e78:	mov	r5, #0
   17e7c:	strd	r4, [sp, #16]
   17e80:	mov	ip, #0
   17e84:	str	ip, [sp, #12]
   17e88:	strd	r4, [r3]
   17e8c:	cmp	r1, r2
   17e90:	moveq	r0, r2
   17e94:	beq	17ed4 <_start@@Base+0x38d4>
   17e98:	mov	r7, r3
   17e9c:	mov	r5, r2
   17ea0:	mov	r4, r1
   17ea4:	mov	r6, r0
   17ea8:	add	r3, sp, #16
   17eac:	str	r3, [sp]
   17eb0:	add	r3, sp, #12
   17eb4:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   17eb8:	cmp	r4, r0
   17ebc:	beq	17ed4 <_start@@Base+0x38d4>
   17ec0:	ldr	r3, [sp, #12]
   17ec4:	cmp	r3, #0
   17ec8:	bne	17ee8 <_start@@Base+0x38e8>
   17ecc:	ldrd	r2, [sp, #16]
   17ed0:	strd	r2, [r7]
   17ed4:	add	sp, sp, #28
   17ed8:	ldrd	r4, [sp]
   17edc:	ldrd	r6, [sp, #8]
   17ee0:	add	sp, sp, #16
   17ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee8:	mov	r3, #8
   17eec:	mov	r2, r5
   17ef0:	mov	r1, r0
   17ef4:	mov	r0, r6
   17ef8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17efc:	b	17ed4 <_start@@Base+0x38d4>
   17f00:	strd	r4, [sp, #-20]!	; 0xffffffec
   17f04:	strd	r6, [sp, #8]
   17f08:	str	lr, [sp, #16]
   17f0c:	sub	sp, sp, #28
   17f10:	mov	r4, #0
   17f14:	mov	r5, #0
   17f18:	strd	r4, [sp, #16]
   17f1c:	mov	ip, #0
   17f20:	str	ip, [sp, #12]
   17f24:	strb	ip, [r3]
   17f28:	cmp	r1, r2
   17f2c:	moveq	r0, r2
   17f30:	beq	17f5c <_start@@Base+0x395c>
   17f34:	mov	r6, r3
   17f38:	mov	r5, r2
   17f3c:	mov	r4, r1
   17f40:	mov	r7, r0
   17f44:	add	r3, sp, #16
   17f48:	str	r3, [sp]
   17f4c:	add	r3, sp, #12
   17f50:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   17f54:	cmp	r4, r0
   17f58:	bne	17f70 <_start@@Base+0x3970>
   17f5c:	add	sp, sp, #28
   17f60:	ldrd	r4, [sp]
   17f64:	ldrd	r6, [sp, #8]
   17f68:	add	sp, sp, #16
   17f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f70:	ldr	r3, [sp, #12]
   17f74:	cmp	r3, #0
   17f78:	bne	17fa8 <_start@@Base+0x39a8>
   17f7c:	ldrd	r2, [sp, #16]
   17f80:	cmp	r3, #0
   17f84:	cmpeq	r2, #255	; 0xff
   17f88:	strbls	r2, [r6]
   17f8c:	bls	17f5c <_start@@Base+0x395c>
   17f90:	mov	r3, #7
   17f94:	mov	r2, r5
   17f98:	mov	r1, r0
   17f9c:	mov	r0, r7
   17fa0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17fa4:	b	17f5c <_start@@Base+0x395c>
   17fa8:	mov	r3, #8
   17fac:	mov	r2, r5
   17fb0:	mov	r1, r0
   17fb4:	mov	r0, r7
   17fb8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   17fbc:	b	17f5c <_start@@Base+0x395c>
   17fc0:	strd	r4, [sp, #-20]!	; 0xffffffec
   17fc4:	strd	r6, [sp, #8]
   17fc8:	str	lr, [sp, #16]
   17fcc:	sub	sp, sp, #28
   17fd0:	mov	r4, #0
   17fd4:	mov	r5, #0
   17fd8:	strd	r4, [sp, #16]
   17fdc:	mov	ip, #0
   17fe0:	str	ip, [sp, #12]
   17fe4:	strd	r4, [r3]
   17fe8:	cmp	r1, r2
   17fec:	moveq	r0, r2
   17ff0:	beq	1801c <_start@@Base+0x3a1c>
   17ff4:	mov	r6, r3
   17ff8:	mov	r5, r2
   17ffc:	mov	r4, r1
   18000:	mov	r7, r0
   18004:	add	r3, sp, #16
   18008:	str	r3, [sp]
   1800c:	add	r3, sp, #12
   18010:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   18014:	cmp	r4, r0
   18018:	bne	18030 <_start@@Base+0x3a30>
   1801c:	add	sp, sp, #28
   18020:	ldrd	r4, [sp]
   18024:	ldrd	r6, [sp, #8]
   18028:	add	sp, sp, #16
   1802c:	pop	{pc}		; (ldr pc, [sp], #4)
   18030:	ldrd	r2, [sp, #16]
   18034:	ldr	r1, [sp, #12]
   18038:	cmp	r1, #0
   1803c:	beq	18074 <_start@@Base+0x3a74>
   18040:	cmp	r3, #-2147483648	; 0x80000000
   18044:	cmpeq	r2, #0
   18048:	bhi	1805c <_start@@Base+0x3a5c>
   1804c:	rsbs	r2, r2, #0
   18050:	rsc	r3, r3, #0
   18054:	strd	r2, [r6]
   18058:	b	1801c <_start@@Base+0x3a1c>
   1805c:	mov	r3, #8
   18060:	mov	r2, r5
   18064:	mov	r1, r0
   18068:	mov	r0, r7
   1806c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18070:	b	1801c <_start@@Base+0x3a1c>
   18074:	cmp	r2, #0
   18078:	sbcs	r1, r3, #0
   1807c:	strdge	r2, [r6]
   18080:	bge	1801c <_start@@Base+0x3a1c>
   18084:	mov	r3, #7
   18088:	mov	r2, r5
   1808c:	mov	r1, r0
   18090:	mov	r0, r7
   18094:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18098:	b	1801c <_start@@Base+0x3a1c>
   1809c:	sub	r3, r2, r1
   180a0:	cmp	r3, #1
   180a4:	ble	180b8 <_start@@Base+0x3ab8>
   180a8:	ldrb	r3, [r1]
   180ac:	cmp	r3, #32
   180b0:	bhi	180e4 <_start@@Base+0x3ae4>
   180b4:	beq	180d0 <_start@@Base+0x3ad0>
   180b8:	str	r4, [sp, #-8]!
   180bc:	str	lr, [sp, #4]
   180c0:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   180c4:	ldr	r4, [sp]
   180c8:	add	sp, sp, #4
   180cc:	pop	{pc}		; (ldr pc, [sp], #4)
   180d0:	ldrb	r3, [r1, #1]
   180d4:	cmp	r3, #32
   180d8:	bls	180b8 <_start@@Base+0x3ab8>
   180dc:	add	r0, r1, #1
   180e0:	bx	lr
   180e4:	mov	r0, r1
   180e8:	bx	lr
   180ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   180f0:	strd	r6, [sp, #8]
   180f4:	strd	r8, [sp, #16]
   180f8:	strd	sl, [sp, #24]
   180fc:	str	lr, [sp, #32]
   18100:	sub	sp, sp, #44	; 0x2c
   18104:	mov	r8, r0
   18108:	mov	r7, r2
   1810c:	str	r3, [sp, #20]
   18110:	ldr	fp, [sp, #80]	; 0x50
   18114:	mov	r2, #0
   18118:	mov	r3, #0
   1811c:	strd	r2, [fp]
   18120:	cmp	r1, r7
   18124:	beq	181ac <_start@@Base+0x3bac>
   18128:	ldrb	r3, [r1]
   1812c:	cmp	r3, #34	; 0x22
   18130:	addeq	r4, r1, #1
   18134:	bne	18184 <_start@@Base+0x3b84>
   18138:	sub	r3, r7, r4
   1813c:	cmp	r3, #1
   18140:	ble	18154 <_start@@Base+0x3b54>
   18144:	ldrb	r3, [r4]
   18148:	cmp	r3, #32
   1814c:	bhi	18168 <_start@@Base+0x3b68>
   18150:	beq	18198 <_start@@Base+0x3b98>
   18154:	mov	r2, r7
   18158:	mov	r1, r4
   1815c:	mov	r0, r8
   18160:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   18164:	mov	r4, r0
   18168:	cmp	r7, r4
   1816c:	beq	182d0 <_start@@Base+0x3cd0>
   18170:	mov	r3, #0
   18174:	str	r3, [sp, #12]
   18178:	str	r3, [sp, #16]
   1817c:	add	sl, sp, #24
   18180:	b	1824c <_start@@Base+0x3c4c>
   18184:	mov	r3, #5
   18188:	mov	r2, r7
   1818c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18190:	mov	r4, r0
   18194:	b	18138 <_start@@Base+0x3b38>
   18198:	ldrb	r3, [r4, #1]
   1819c:	cmp	r3, #32
   181a0:	addhi	r4, r4, #1
   181a4:	bls	18154 <_start@@Base+0x3b54>
   181a8:	b	18168 <_start@@Base+0x3b68>
   181ac:	mov	r4, r7
   181b0:	b	18154 <_start@@Base+0x3b54>
   181b4:	mov	r4, r0
   181b8:	ldrd	r2, [sp, #32]
   181bc:	ldr	r1, [sp, #28]
   181c0:	cmp	r1, #0
   181c4:	beq	18204 <_start@@Base+0x3c04>
   181c8:	cmp	r3, #-2147483648	; 0x80000000
   181cc:	cmpeq	r2, #0
   181d0:	bhi	181e0 <_start@@Base+0x3be0>
   181d4:	rsbs	r0, r2, #0
   181d8:	rsc	r1, r3, #0
   181dc:	b	18218 <_start@@Base+0x3c18>
   181e0:	mov	r3, #8
   181e4:	mov	r2, r7
   181e8:	mov	r1, r0
   181ec:	mov	r0, r8
   181f0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   181f4:	cmp	r7, r0
   181f8:	bne	18220 <_start@@Base+0x3c20>
   181fc:	mov	r4, r0
   18200:	b	182d0 <_start@@Base+0x3cd0>
   18204:	mov	r0, r2
   18208:	mov	r1, r3
   1820c:	cmp	r2, #0
   18210:	sbcs	r3, r3, #0
   18214:	blt	182b4 <_start@@Base+0x3cb4>
   18218:	str	r0, [sp, #12]
   1821c:	str	r1, [sp, #16]
   18220:	ldr	r3, [fp]
   18224:	ldr	r2, [fp, #4]
   18228:	ldr	r1, [sp, #12]
   1822c:	adds	r3, r3, r1
   18230:	ldr	r1, [sp, #16]
   18234:	adc	r2, r2, r1
   18238:	str	r3, [fp]
   1823c:	str	r2, [fp, #4]
   18240:	ldr	r3, [sp, #24]
   18244:	cmp	r3, #0
   18248:	beq	182d0 <_start@@Base+0x3cd0>
   1824c:	ldr	r6, [sp, #20]
   18250:	mov	r5, r4
   18254:	add	r9, sp, #32
   18258:	str	sl, [sp, #4]
   1825c:	str	r9, [sp]
   18260:	ldr	r4, [r6]
   18264:	add	r3, sp, #28
   18268:	mov	r2, r7
   1826c:	mov	r1, r5
   18270:	mov	r0, r8
   18274:	blx	r4
   18278:	cmp	r7, r0
   1827c:	beq	182cc <_start@@Base+0x3ccc>
   18280:	cmp	r5, r0
   18284:	bne	181b4 <_start@@Base+0x3bb4>
   18288:	mov	r5, r0
   1828c:	ldr	r3, [r6, #4]!
   18290:	cmp	r3, #0
   18294:	bne	18258 <_start@@Base+0x3c58>
   18298:	mov	r3, #23
   1829c:	mov	r2, r7
   182a0:	mov	r1, r0
   182a4:	mov	r0, r8
   182a8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   182ac:	mov	r4, r0
   182b0:	b	182d0 <_start@@Base+0x3cd0>
   182b4:	mov	r3, #7
   182b8:	mov	r2, r7
   182bc:	mov	r1, r4
   182c0:	mov	r0, r8
   182c4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   182c8:	b	181f4 <_start@@Base+0x3bf4>
   182cc:	mov	r4, r0
   182d0:	mov	r0, r4
   182d4:	add	sp, sp, #44	; 0x2c
   182d8:	ldrd	r4, [sp]
   182dc:	ldrd	r6, [sp, #8]
   182e0:	ldrd	r8, [sp, #16]
   182e4:	ldrd	sl, [sp, #24]
   182e8:	add	sp, sp, #32
   182ec:	pop	{pc}		; (ldr pc, [sp], #4)
   182f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   182f4:	strd	r6, [sp, #8]
   182f8:	strd	r8, [sp, #16]
   182fc:	strd	sl, [sp, #24]
   18300:	str	lr, [sp, #32]
   18304:	sub	sp, sp, #36	; 0x24
   18308:	mov	r8, r0
   1830c:	mov	r7, r2
   18310:	str	r3, [sp, #12]
   18314:	ldr	fp, [sp, #72]	; 0x48
   18318:	mov	r3, #0
   1831c:	str	r3, [fp]
   18320:	cmp	r1, r2
   18324:	beq	183a0 <_start@@Base+0x3da0>
   18328:	ldrb	r3, [r1]
   1832c:	cmp	r3, #34	; 0x22
   18330:	addeq	r4, r1, #1
   18334:	bne	1837c <_start@@Base+0x3d7c>
   18338:	sub	r3, r7, r4
   1833c:	cmp	r3, #1
   18340:	ble	18354 <_start@@Base+0x3d54>
   18344:	ldrb	r3, [r4]
   18348:	cmp	r3, #32
   1834c:	bhi	18368 <_start@@Base+0x3d68>
   18350:	beq	1838c <_start@@Base+0x3d8c>
   18354:	mov	r2, r7
   18358:	mov	r1, r4
   1835c:	mov	r0, r8
   18360:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   18364:	mov	r4, r0
   18368:	cmp	r7, r4
   1836c:	beq	18454 <_start@@Base+0x3e54>
   18370:	add	sl, sp, #16
   18374:	add	r9, sp, #24
   18378:	b	183e0 <_start@@Base+0x3de0>
   1837c:	mov	r3, #5
   18380:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18384:	mov	r4, r0
   18388:	b	18338 <_start@@Base+0x3d38>
   1838c:	ldrb	r3, [r4, #1]
   18390:	cmp	r3, #32
   18394:	addhi	r4, r4, #1
   18398:	bls	18354 <_start@@Base+0x3d54>
   1839c:	b	18368 <_start@@Base+0x3d68>
   183a0:	mov	r4, r2
   183a4:	b	18354 <_start@@Base+0x3d54>
   183a8:	mov	r4, r0
   183ac:	ldrd	r0, [sp, #24]
   183b0:	ldr	r3, [sp, #20]
   183b4:	cmp	r3, #0
   183b8:	beq	18444 <_start@@Base+0x3e44>
   183bc:	bl	3dc4c <flatcc_json_printer_clear@@Base+0x5c8>
   183c0:	vmov	s15, r0
   183c4:	vneg.f32	s14, s15
   183c8:	vldr	s15, [fp]
   183cc:	vadd.f32	s15, s15, s14
   183d0:	vstr	s15, [fp]
   183d4:	ldr	r3, [sp, #16]
   183d8:	cmp	r3, #0
   183dc:	beq	18454 <_start@@Base+0x3e54>
   183e0:	ldr	r6, [sp, #12]
   183e4:	mov	r5, r4
   183e8:	str	sl, [sp, #4]
   183ec:	str	r9, [sp]
   183f0:	ldr	r4, [r6]
   183f4:	add	r3, sp, #20
   183f8:	mov	r2, r7
   183fc:	mov	r1, r5
   18400:	mov	r0, r8
   18404:	blx	r4
   18408:	cmp	r7, r0
   1840c:	beq	18450 <_start@@Base+0x3e50>
   18410:	cmp	r5, r0
   18414:	bne	183a8 <_start@@Base+0x3da8>
   18418:	mov	r5, r0
   1841c:	ldr	r3, [r6, #4]!
   18420:	cmp	r3, #0
   18424:	bne	183e8 <_start@@Base+0x3de8>
   18428:	mov	r3, #23
   1842c:	mov	r2, r7
   18430:	mov	r1, r0
   18434:	mov	r0, r8
   18438:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1843c:	mov	r4, r0
   18440:	b	18454 <_start@@Base+0x3e54>
   18444:	bl	3dc4c <flatcc_json_printer_clear@@Base+0x5c8>
   18448:	vmov	s14, r0
   1844c:	b	183c8 <_start@@Base+0x3dc8>
   18450:	mov	r4, r0
   18454:	mov	r0, r4
   18458:	add	sp, sp, #36	; 0x24
   1845c:	ldrd	r4, [sp]
   18460:	ldrd	r6, [sp, #8]
   18464:	ldrd	r8, [sp, #16]
   18468:	ldrd	sl, [sp, #24]
   1846c:	add	sp, sp, #32
   18470:	pop	{pc}		; (ldr pc, [sp], #4)
   18474:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18478:	strd	r6, [sp, #8]
   1847c:	strd	r8, [sp, #16]
   18480:	strd	sl, [sp, #24]
   18484:	str	lr, [sp, #32]
   18488:	sub	sp, sp, #36	; 0x24
   1848c:	mov	r8, r0
   18490:	mov	r7, r2
   18494:	str	r3, [sp, #12]
   18498:	ldr	fp, [sp, #72]	; 0x48
   1849c:	mov	r2, #0
   184a0:	mov	r3, #0
   184a4:	strd	r2, [fp]
   184a8:	cmp	r1, r7
   184ac:	beq	1852c <_start@@Base+0x3f2c>
   184b0:	ldrb	r3, [r1]
   184b4:	cmp	r3, #34	; 0x22
   184b8:	addeq	r4, r1, #1
   184bc:	bne	18504 <_start@@Base+0x3f04>
   184c0:	sub	r3, r7, r4
   184c4:	cmp	r3, #1
   184c8:	ble	184dc <_start@@Base+0x3edc>
   184cc:	ldrb	r3, [r4]
   184d0:	cmp	r3, #32
   184d4:	bhi	184f0 <_start@@Base+0x3ef0>
   184d8:	beq	18518 <_start@@Base+0x3f18>
   184dc:	mov	r2, r7
   184e0:	mov	r1, r4
   184e4:	mov	r0, r8
   184e8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   184ec:	mov	r4, r0
   184f0:	cmp	r7, r4
   184f4:	beq	185e0 <_start@@Base+0x3fe0>
   184f8:	add	sl, sp, #16
   184fc:	add	r9, sp, #24
   18500:	b	1856c <_start@@Base+0x3f6c>
   18504:	mov	r3, #5
   18508:	mov	r2, r7
   1850c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18510:	mov	r4, r0
   18514:	b	184c0 <_start@@Base+0x3ec0>
   18518:	ldrb	r3, [r4, #1]
   1851c:	cmp	r3, #32
   18520:	addhi	r4, r4, #1
   18524:	bls	184dc <_start@@Base+0x3edc>
   18528:	b	184f0 <_start@@Base+0x3ef0>
   1852c:	mov	r4, r7
   18530:	b	184dc <_start@@Base+0x3edc>
   18534:	mov	r4, r0
   18538:	ldrd	r0, [sp, #24]
   1853c:	ldr	r3, [sp, #20]
   18540:	cmp	r3, #0
   18544:	beq	185d0 <_start@@Base+0x3fd0>
   18548:	bl	3da14 <flatcc_json_printer_clear@@Base+0x390>
   1854c:	vmov	d7, r0, r1
   18550:	vneg.f64	d6, d7
   18554:	vldr	d7, [fp]
   18558:	vadd.f64	d7, d7, d6
   1855c:	vstr	d7, [fp]
   18560:	ldr	r3, [sp, #16]
   18564:	cmp	r3, #0
   18568:	beq	185e0 <_start@@Base+0x3fe0>
   1856c:	ldr	r6, [sp, #12]
   18570:	mov	r5, r4
   18574:	str	sl, [sp, #4]
   18578:	str	r9, [sp]
   1857c:	ldr	r4, [r6]
   18580:	add	r3, sp, #20
   18584:	mov	r2, r7
   18588:	mov	r1, r5
   1858c:	mov	r0, r8
   18590:	blx	r4
   18594:	cmp	r7, r0
   18598:	beq	185dc <_start@@Base+0x3fdc>
   1859c:	cmp	r5, r0
   185a0:	bne	18534 <_start@@Base+0x3f34>
   185a4:	mov	r5, r0
   185a8:	ldr	r3, [r6, #4]!
   185ac:	cmp	r3, #0
   185b0:	bne	18574 <_start@@Base+0x3f74>
   185b4:	mov	r3, #23
   185b8:	mov	r2, r7
   185bc:	mov	r1, r0
   185c0:	mov	r0, r8
   185c4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   185c8:	mov	r4, r0
   185cc:	b	185e0 <_start@@Base+0x3fe0>
   185d0:	bl	3da14 <flatcc_json_printer_clear@@Base+0x390>
   185d4:	vmov	d6, r0, r1
   185d8:	b	18554 <_start@@Base+0x3f54>
   185dc:	mov	r4, r0
   185e0:	mov	r0, r4
   185e4:	add	sp, sp, #36	; 0x24
   185e8:	ldrd	r4, [sp]
   185ec:	ldrd	r6, [sp, #8]
   185f0:	ldrd	r8, [sp, #16]
   185f4:	ldrd	sl, [sp, #24]
   185f8:	add	sp, sp, #32
   185fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18604:	strd	r6, [sp, #8]
   18608:	strd	r8, [sp, #16]
   1860c:	strd	sl, [sp, #24]
   18610:	str	lr, [sp, #32]
   18614:	sub	sp, sp, #36	; 0x24
   18618:	str	r0, [sp, #8]
   1861c:	mov	r7, r2
   18620:	str	r3, [sp, #12]
   18624:	ldr	r8, [sp, #72]	; 0x48
   18628:	mov	r3, #0
   1862c:	strb	r3, [r8]
   18630:	cmp	r1, r2
   18634:	beq	186b8 <_start@@Base+0x40b8>
   18638:	ldrb	r3, [r1]
   1863c:	cmp	r3, #34	; 0x22
   18640:	addeq	r4, r1, #1
   18644:	bne	18690 <_start@@Base+0x4090>
   18648:	sub	r3, r7, r4
   1864c:	cmp	r3, #1
   18650:	ble	18664 <_start@@Base+0x4064>
   18654:	ldrb	r3, [r4]
   18658:	cmp	r3, #32
   1865c:	bhi	18678 <_start@@Base+0x4078>
   18660:	beq	186a4 <_start@@Base+0x40a4>
   18664:	mov	r2, r7
   18668:	mov	r1, r4
   1866c:	ldr	r0, [sp, #8]
   18670:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   18674:	mov	r4, r0
   18678:	cmp	r7, r4
   1867c:	beq	18788 <_start@@Base+0x4188>
   18680:	mov	fp, #0
   18684:	add	sl, sp, #16
   18688:	add	r9, sp, #24
   1868c:	b	186fc <_start@@Base+0x40fc>
   18690:	mov	r3, #5
   18694:	ldr	r0, [sp, #8]
   18698:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1869c:	mov	r4, r0
   186a0:	b	18648 <_start@@Base+0x4048>
   186a4:	ldrb	r3, [r4, #1]
   186a8:	cmp	r3, #32
   186ac:	addhi	r4, r4, #1
   186b0:	bls	18664 <_start@@Base+0x4064>
   186b4:	b	18678 <_start@@Base+0x4078>
   186b8:	mov	r4, r2
   186bc:	b	18664 <_start@@Base+0x4064>
   186c0:	mov	r4, r0
   186c4:	ldr	r3, [sp, #20]
   186c8:	cmp	r3, #0
   186cc:	bne	18760 <_start@@Base+0x4160>
   186d0:	ldr	r2, [sp, #24]
   186d4:	ldr	r3, [sp, #28]
   186d8:	orrs	r3, r2, r3
   186dc:	movne	fp, #1
   186e0:	moveq	fp, #0
   186e4:	ldrb	r3, [r8]
   186e8:	add	r3, fp, r3
   186ec:	strb	r3, [r8]
   186f0:	ldr	r3, [sp, #16]
   186f4:	cmp	r3, #0
   186f8:	beq	18788 <_start@@Base+0x4188>
   186fc:	ldr	r6, [sp, #12]
   18700:	mov	r5, r4
   18704:	str	sl, [sp, #4]
   18708:	str	r9, [sp]
   1870c:	ldr	r4, [r6]
   18710:	add	r3, sp, #20
   18714:	mov	r2, r7
   18718:	mov	r1, r5
   1871c:	ldr	r0, [sp, #8]
   18720:	blx	r4
   18724:	cmp	r7, r0
   18728:	beq	18784 <_start@@Base+0x4184>
   1872c:	cmp	r5, r0
   18730:	bne	186c0 <_start@@Base+0x40c0>
   18734:	mov	r5, r0
   18738:	ldr	r3, [r6, #4]!
   1873c:	cmp	r3, #0
   18740:	bne	18704 <_start@@Base+0x4104>
   18744:	mov	r3, #23
   18748:	mov	r2, r7
   1874c:	mov	r1, r0
   18750:	ldr	r0, [sp, #8]
   18754:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18758:	mov	r4, r0
   1875c:	b	18788 <_start@@Base+0x4188>
   18760:	mov	r3, #8
   18764:	mov	r2, r7
   18768:	mov	r1, r0
   1876c:	ldr	r0, [sp, #8]
   18770:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18774:	cmp	r7, r0
   18778:	bne	186e4 <_start@@Base+0x40e4>
   1877c:	mov	r4, r0
   18780:	b	18788 <_start@@Base+0x4188>
   18784:	mov	r4, r0
   18788:	mov	r0, r4
   1878c:	add	sp, sp, #36	; 0x24
   18790:	ldrd	r4, [sp]
   18794:	ldrd	r6, [sp, #8]
   18798:	ldrd	r8, [sp, #16]
   1879c:	ldrd	sl, [sp, #24]
   187a0:	add	sp, sp, #32
   187a4:	pop	{pc}		; (ldr pc, [sp], #4)
   187a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   187ac:	strd	r6, [sp, #8]
   187b0:	str	r8, [sp, #16]
   187b4:	str	lr, [sp, #20]
   187b8:	sub	sp, sp, #24
   187bc:	mov	r8, r0
   187c0:	mov	r4, r1
   187c4:	mov	r5, r2
   187c8:	mov	r7, r3
   187cc:	sub	r6, r2, r1
   187d0:	cmp	r6, #3
   187d4:	ble	18800 <_start@@Base+0x4200>
   187d8:	mov	r2, #4
   187dc:	movw	r1, #58136	; 0xe318
   187e0:	movt	r1, #3
   187e4:	mov	r0, r4
   187e8:	bl	14530 <memcmp@plt>
   187ec:	cmp	r0, #0
   187f0:	moveq	r3, #1
   187f4:	strbeq	r3, [r7]
   187f8:	addeq	r0, r4, #4
   187fc:	beq	18880 <_start@@Base+0x4280>
   18800:	cmp	r6, #4
   18804:	ble	18830 <_start@@Base+0x4230>
   18808:	mov	r2, #5
   1880c:	movw	r1, #58144	; 0xe320
   18810:	movt	r1, #3
   18814:	mov	r0, r4
   18818:	bl	14530 <memcmp@plt>
   1881c:	cmp	r0, #0
   18820:	moveq	r3, #0
   18824:	strbeq	r3, [r7]
   18828:	addeq	r0, r4, #5
   1882c:	beq	18880 <_start@@Base+0x4280>
   18830:	mov	r2, #0
   18834:	mov	r3, #0
   18838:	strd	r2, [sp, #16]
   1883c:	mov	r3, #0
   18840:	str	r3, [sp, #12]
   18844:	cmp	r4, r5
   18848:	beq	188f0 <_start@@Base+0x42f0>
   1884c:	add	r3, sp, #16
   18850:	str	r3, [sp]
   18854:	add	r3, sp, #12
   18858:	mov	r2, r5
   1885c:	mov	r1, r4
   18860:	mov	r0, r8
   18864:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   18868:	cmp	r4, r0
   1886c:	moveq	r2, #0
   18870:	bne	18898 <_start@@Base+0x4298>
   18874:	adds	r2, r2, #0
   18878:	movne	r2, #1
   1887c:	strb	r2, [r7]
   18880:	add	sp, sp, #24
   18884:	ldrd	r4, [sp]
   18888:	ldrd	r6, [sp, #8]
   1888c:	ldr	r8, [sp, #16]
   18890:	add	sp, sp, #20
   18894:	pop	{pc}		; (ldr pc, [sp], #4)
   18898:	ldr	r3, [sp, #12]
   1889c:	cmp	r3, #0
   188a0:	bne	188d4 <_start@@Base+0x42d4>
   188a4:	ldrd	r2, [sp, #16]
   188a8:	cmp	r3, #0
   188ac:	cmpeq	r2, #255	; 0xff
   188b0:	uxtbls	r2, r2
   188b4:	bls	18874 <_start@@Base+0x4274>
   188b8:	mov	r3, #7
   188bc:	mov	r2, r5
   188c0:	mov	r1, r0
   188c4:	mov	r0, r8
   188c8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   188cc:	mov	r2, #0
   188d0:	b	18874 <_start@@Base+0x4274>
   188d4:	mov	r3, #8
   188d8:	mov	r2, r5
   188dc:	mov	r1, r0
   188e0:	mov	r0, r8
   188e4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   188e8:	mov	r2, #0
   188ec:	b	18874 <_start@@Base+0x4274>
   188f0:	mov	r0, r5
   188f4:	mov	r2, #0
   188f8:	b	18874 <_start@@Base+0x4274>
   188fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18900:	strd	r6, [sp, #8]
   18904:	strd	r8, [sp, #16]
   18908:	strd	sl, [sp, #24]
   1890c:	str	lr, [sp, #32]
   18910:	sub	sp, sp, #36	; 0x24
   18914:	str	r0, [sp, #8]
   18918:	mov	r7, r2
   1891c:	str	r3, [sp, #12]
   18920:	ldr	r8, [sp, #72]	; 0x48
   18924:	mov	r3, #0
   18928:	strh	r3, [r8]
   1892c:	cmp	r1, r2
   18930:	beq	189b0 <_start@@Base+0x43b0>
   18934:	ldrb	r3, [r1]
   18938:	cmp	r3, #34	; 0x22
   1893c:	addeq	r4, r1, #1
   18940:	bne	18988 <_start@@Base+0x4388>
   18944:	sub	r3, r7, r4
   18948:	cmp	r3, #1
   1894c:	ble	18960 <_start@@Base+0x4360>
   18950:	ldrb	r3, [r4]
   18954:	cmp	r3, #32
   18958:	bhi	18974 <_start@@Base+0x4374>
   1895c:	beq	1899c <_start@@Base+0x439c>
   18960:	mov	r2, r7
   18964:	mov	r1, r4
   18968:	ldr	r0, [sp, #8]
   1896c:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   18970:	mov	r4, r0
   18974:	cmp	r7, r4
   18978:	beq	18ab8 <_start@@Base+0x44b8>
   1897c:	mov	fp, #0
   18980:	add	sl, sp, #16
   18984:	b	189f8 <_start@@Base+0x43f8>
   18988:	mov	r3, #5
   1898c:	ldr	r0, [sp, #8]
   18990:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18994:	mov	r4, r0
   18998:	b	18944 <_start@@Base+0x4344>
   1899c:	ldrb	r3, [r4, #1]
   189a0:	cmp	r3, #32
   189a4:	addhi	r4, r4, #1
   189a8:	bls	18960 <_start@@Base+0x4360>
   189ac:	b	18974 <_start@@Base+0x4374>
   189b0:	mov	r4, r2
   189b4:	b	18960 <_start@@Base+0x4360>
   189b8:	mov	r4, r0
   189bc:	ldrd	r2, [sp, #24]
   189c0:	ldr	r1, [sp, #20]
   189c4:	cmp	r1, #0
   189c8:	beq	18a84 <_start@@Base+0x4484>
   189cc:	cmp	r3, #0
   189d0:	cmpeq	r2, #32768	; 0x8000
   189d4:	rsbls	fp, r2, #0
   189d8:	sxthls	fp, fp
   189dc:	bhi	18a60 <_start@@Base+0x4460>
   189e0:	ldrh	r3, [r8]
   189e4:	add	r3, r3, fp
   189e8:	strh	r3, [r8]
   189ec:	ldr	r3, [sp, #16]
   189f0:	cmp	r3, #0
   189f4:	beq	18ab8 <_start@@Base+0x44b8>
   189f8:	ldr	r6, [sp, #12]
   189fc:	mov	r5, r4
   18a00:	add	r9, sp, #24
   18a04:	str	sl, [sp, #4]
   18a08:	str	r9, [sp]
   18a0c:	ldr	r4, [r6]
   18a10:	add	r3, sp, #20
   18a14:	mov	r2, r7
   18a18:	mov	r1, r5
   18a1c:	ldr	r0, [sp, #8]
   18a20:	blx	r4
   18a24:	cmp	r7, r0
   18a28:	beq	18ab4 <_start@@Base+0x44b4>
   18a2c:	cmp	r5, r0
   18a30:	bne	189b8 <_start@@Base+0x43b8>
   18a34:	mov	r5, r0
   18a38:	ldr	r3, [r6, #4]!
   18a3c:	cmp	r3, #0
   18a40:	bne	18a04 <_start@@Base+0x4404>
   18a44:	mov	r3, #23
   18a48:	mov	r2, r7
   18a4c:	mov	r1, r0
   18a50:	ldr	r0, [sp, #8]
   18a54:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18a58:	mov	r4, r0
   18a5c:	b	18ab8 <_start@@Base+0x44b8>
   18a60:	mov	r3, #8
   18a64:	mov	r2, r7
   18a68:	mov	r1, r0
   18a6c:	ldr	r0, [sp, #8]
   18a70:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18a74:	cmp	r7, r0
   18a78:	bne	189e0 <_start@@Base+0x43e0>
   18a7c:	mov	r4, r0
   18a80:	b	18ab8 <_start@@Base+0x44b8>
   18a84:	movw	r0, #32767	; 0x7fff
   18a88:	mov	r1, #0
   18a8c:	cmp	r3, r1
   18a90:	cmpeq	r2, r0
   18a94:	sxthls	fp, r2
   18a98:	bls	189e0 <_start@@Base+0x43e0>
   18a9c:	mov	r3, #7
   18aa0:	mov	r2, r7
   18aa4:	mov	r1, r4
   18aa8:	ldr	r0, [sp, #8]
   18aac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18ab0:	b	18a74 <_start@@Base+0x4474>
   18ab4:	mov	r4, r0
   18ab8:	mov	r0, r4
   18abc:	add	sp, sp, #36	; 0x24
   18ac0:	ldrd	r4, [sp]
   18ac4:	ldrd	r6, [sp, #8]
   18ac8:	ldrd	r8, [sp, #16]
   18acc:	ldrd	sl, [sp, #24]
   18ad0:	add	sp, sp, #32
   18ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ad8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18adc:	strd	r6, [sp, #8]
   18ae0:	strd	r8, [sp, #16]
   18ae4:	strd	sl, [sp, #24]
   18ae8:	str	lr, [sp, #32]
   18aec:	sub	sp, sp, #36	; 0x24
   18af0:	str	r0, [sp, #8]
   18af4:	mov	r7, r2
   18af8:	str	r3, [sp, #12]
   18afc:	ldr	fp, [sp, #72]	; 0x48
   18b00:	mov	r3, #0
   18b04:	str	r3, [fp]
   18b08:	cmp	r1, r2
   18b0c:	beq	18b88 <_start@@Base+0x4588>
   18b10:	ldrb	r3, [r1]
   18b14:	cmp	r3, #34	; 0x22
   18b18:	addeq	r4, r1, #1
   18b1c:	bne	18b60 <_start@@Base+0x4560>
   18b20:	sub	r3, r7, r4
   18b24:	cmp	r3, #1
   18b28:	ble	18b3c <_start@@Base+0x453c>
   18b2c:	ldrb	r3, [r4]
   18b30:	cmp	r3, #32
   18b34:	bhi	18b50 <_start@@Base+0x4550>
   18b38:	beq	18b74 <_start@@Base+0x4574>
   18b3c:	mov	r2, r7
   18b40:	mov	r1, r4
   18b44:	ldr	r0, [sp, #8]
   18b48:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   18b4c:	mov	r4, r0
   18b50:	cmp	r7, r4
   18b54:	beq	18c90 <_start@@Base+0x4690>
   18b58:	mov	r8, #0
   18b5c:	b	18bcc <_start@@Base+0x45cc>
   18b60:	mov	r3, #5
   18b64:	ldr	r0, [sp, #8]
   18b68:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18b6c:	mov	r4, r0
   18b70:	b	18b20 <_start@@Base+0x4520>
   18b74:	ldrb	r3, [r4, #1]
   18b78:	cmp	r3, #32
   18b7c:	addhi	r4, r4, #1
   18b80:	bls	18b3c <_start@@Base+0x453c>
   18b84:	b	18b50 <_start@@Base+0x4550>
   18b88:	mov	r4, r2
   18b8c:	b	18b3c <_start@@Base+0x453c>
   18b90:	mov	r4, r0
   18b94:	ldrd	r2, [sp, #24]
   18b98:	ldr	r1, [sp, #20]
   18b9c:	cmp	r1, #0
   18ba0:	beq	18c5c <_start@@Base+0x465c>
   18ba4:	cmp	r3, #0
   18ba8:	cmpeq	r2, #-2147483648	; 0x80000000
   18bac:	rsbls	r8, r2, #0
   18bb0:	bhi	18c38 <_start@@Base+0x4638>
   18bb4:	ldr	r3, [fp]
   18bb8:	add	r3, r3, r8
   18bbc:	str	r3, [fp]
   18bc0:	ldr	r3, [sp, #16]
   18bc4:	cmp	r3, #0
   18bc8:	beq	18c90 <_start@@Base+0x4690>
   18bcc:	ldr	r6, [sp, #12]
   18bd0:	mov	r5, r4
   18bd4:	add	sl, sp, #16
   18bd8:	add	r9, sp, #24
   18bdc:	str	sl, [sp, #4]
   18be0:	str	r9, [sp]
   18be4:	ldr	r4, [r6]
   18be8:	add	r3, sp, #20
   18bec:	mov	r2, r7
   18bf0:	mov	r1, r5
   18bf4:	ldr	r0, [sp, #8]
   18bf8:	blx	r4
   18bfc:	cmp	r7, r0
   18c00:	beq	18c8c <_start@@Base+0x468c>
   18c04:	cmp	r5, r0
   18c08:	bne	18b90 <_start@@Base+0x4590>
   18c0c:	mov	r5, r0
   18c10:	ldr	r3, [r6, #4]!
   18c14:	cmp	r3, #0
   18c18:	bne	18bdc <_start@@Base+0x45dc>
   18c1c:	mov	r3, #23
   18c20:	mov	r2, r7
   18c24:	mov	r1, r0
   18c28:	ldr	r0, [sp, #8]
   18c2c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18c30:	mov	r4, r0
   18c34:	b	18c90 <_start@@Base+0x4690>
   18c38:	mov	r3, #8
   18c3c:	mov	r2, r7
   18c40:	mov	r1, r0
   18c44:	ldr	r0, [sp, #8]
   18c48:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18c4c:	cmp	r7, r0
   18c50:	bne	18bb4 <_start@@Base+0x45b4>
   18c54:	mov	r4, r0
   18c58:	b	18c90 <_start@@Base+0x4690>
   18c5c:	mvn	r0, #-2147483648	; 0x80000000
   18c60:	mov	r1, #0
   18c64:	cmp	r3, r1
   18c68:	cmpeq	r2, r0
   18c6c:	movls	r8, r2
   18c70:	bls	18bb4 <_start@@Base+0x45b4>
   18c74:	mov	r3, #7
   18c78:	mov	r2, r7
   18c7c:	mov	r1, r4
   18c80:	ldr	r0, [sp, #8]
   18c84:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18c88:	b	18c4c <_start@@Base+0x464c>
   18c8c:	mov	r4, r0
   18c90:	mov	r0, r4
   18c94:	add	sp, sp, #36	; 0x24
   18c98:	ldrd	r4, [sp]
   18c9c:	ldrd	r6, [sp, #8]
   18ca0:	ldrd	r8, [sp, #16]
   18ca4:	ldrd	sl, [sp, #24]
   18ca8:	add	sp, sp, #32
   18cac:	pop	{pc}		; (ldr pc, [sp], #4)
   18cb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18cb4:	strd	r6, [sp, #8]
   18cb8:	strd	r8, [sp, #16]
   18cbc:	strd	sl, [sp, #24]
   18cc0:	str	lr, [sp, #32]
   18cc4:	sub	sp, sp, #36	; 0x24
   18cc8:	mov	r8, r0
   18ccc:	mov	r7, r2
   18cd0:	str	r3, [sp, #8]
   18cd4:	ldr	fp, [sp, #72]	; 0x48
   18cd8:	mov	r3, #0
   18cdc:	str	r3, [fp]
   18ce0:	cmp	r1, r2
   18ce4:	beq	18d64 <_start@@Base+0x4764>
   18ce8:	ldrb	r3, [r1]
   18cec:	cmp	r3, #34	; 0x22
   18cf0:	addeq	r4, r1, #1
   18cf4:	bne	18d40 <_start@@Base+0x4740>
   18cf8:	sub	r3, r7, r4
   18cfc:	cmp	r3, #1
   18d00:	ble	18d14 <_start@@Base+0x4714>
   18d04:	ldrb	r3, [r4]
   18d08:	cmp	r3, #32
   18d0c:	bhi	18d28 <_start@@Base+0x4728>
   18d10:	beq	18d50 <_start@@Base+0x4750>
   18d14:	mov	r2, r7
   18d18:	mov	r1, r4
   18d1c:	mov	r0, r8
   18d20:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   18d24:	mov	r4, r0
   18d28:	cmp	r7, r4
   18d2c:	beq	18e5c <_start@@Base+0x485c>
   18d30:	mov	r3, #0
   18d34:	str	r3, [sp, #12]
   18d38:	add	sl, sp, #16
   18d3c:	b	18db4 <_start@@Base+0x47b4>
   18d40:	mov	r3, #5
   18d44:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18d48:	mov	r4, r0
   18d4c:	b	18cf8 <_start@@Base+0x46f8>
   18d50:	ldrb	r3, [r4, #1]
   18d54:	cmp	r3, #32
   18d58:	addhi	r4, r4, #1
   18d5c:	bls	18d14 <_start@@Base+0x4714>
   18d60:	b	18d28 <_start@@Base+0x4728>
   18d64:	mov	r4, r2
   18d68:	b	18d14 <_start@@Base+0x4714>
   18d6c:	mov	r4, r0
   18d70:	ldr	r3, [sp, #20]
   18d74:	cmp	r3, #0
   18d78:	bne	18e1c <_start@@Base+0x481c>
   18d7c:	ldrd	r2, [sp, #24]
   18d80:	mvn	r0, #0
   18d84:	mov	r1, #0
   18d88:	cmp	r3, r1
   18d8c:	cmpeq	r2, r0
   18d90:	strls	r2, [sp, #12]
   18d94:	bhi	18e40 <_start@@Base+0x4840>
   18d98:	ldr	r3, [fp]
   18d9c:	ldr	r2, [sp, #12]
   18da0:	add	r3, r3, r2
   18da4:	str	r3, [fp]
   18da8:	ldr	r3, [sp, #16]
   18dac:	cmp	r3, #0
   18db0:	beq	18e5c <_start@@Base+0x485c>
   18db4:	ldr	r6, [sp, #8]
   18db8:	mov	r5, r4
   18dbc:	add	r9, sp, #24
   18dc0:	str	sl, [sp, #4]
   18dc4:	str	r9, [sp]
   18dc8:	ldr	r4, [r6]
   18dcc:	add	r3, sp, #20
   18dd0:	mov	r2, r7
   18dd4:	mov	r1, r5
   18dd8:	mov	r0, r8
   18ddc:	blx	r4
   18de0:	cmp	r7, r0
   18de4:	beq	18e58 <_start@@Base+0x4858>
   18de8:	cmp	r5, r0
   18dec:	bne	18d6c <_start@@Base+0x476c>
   18df0:	mov	r5, r0
   18df4:	ldr	r3, [r6, #4]!
   18df8:	cmp	r3, #0
   18dfc:	bne	18dc0 <_start@@Base+0x47c0>
   18e00:	mov	r3, #23
   18e04:	mov	r2, r7
   18e08:	mov	r1, r0
   18e0c:	mov	r0, r8
   18e10:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18e14:	mov	r4, r0
   18e18:	b	18e5c <_start@@Base+0x485c>
   18e1c:	mov	r3, #8
   18e20:	mov	r2, r7
   18e24:	mov	r1, r0
   18e28:	mov	r0, r8
   18e2c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18e30:	cmp	r7, r0
   18e34:	bne	18d98 <_start@@Base+0x4798>
   18e38:	mov	r4, r0
   18e3c:	b	18e5c <_start@@Base+0x485c>
   18e40:	mov	r3, #7
   18e44:	mov	r2, r7
   18e48:	mov	r1, r4
   18e4c:	mov	r0, r8
   18e50:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18e54:	b	18e30 <_start@@Base+0x4830>
   18e58:	mov	r4, r0
   18e5c:	mov	r0, r4
   18e60:	add	sp, sp, #36	; 0x24
   18e64:	ldrd	r4, [sp]
   18e68:	ldrd	r6, [sp, #8]
   18e6c:	ldrd	r8, [sp, #16]
   18e70:	ldrd	sl, [sp, #24]
   18e74:	add	sp, sp, #32
   18e78:	pop	{pc}		; (ldr pc, [sp], #4)
   18e7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e80:	strd	r6, [sp, #8]
   18e84:	strd	r8, [sp, #16]
   18e88:	strd	sl, [sp, #24]
   18e8c:	str	lr, [sp, #32]
   18e90:	sub	sp, sp, #36	; 0x24
   18e94:	str	r0, [sp, #8]
   18e98:	mov	r7, r2
   18e9c:	str	r3, [sp, #12]
   18ea0:	ldr	fp, [sp, #72]	; 0x48
   18ea4:	mov	r3, #0
   18ea8:	strb	r3, [fp]
   18eac:	cmp	r1, r2
   18eb0:	beq	18f34 <_start@@Base+0x4934>
   18eb4:	ldrb	r3, [r1]
   18eb8:	cmp	r3, #34	; 0x22
   18ebc:	addeq	r4, r1, #1
   18ec0:	bne	18f0c <_start@@Base+0x490c>
   18ec4:	sub	r3, r7, r4
   18ec8:	cmp	r3, #1
   18ecc:	ble	18ee0 <_start@@Base+0x48e0>
   18ed0:	ldrb	r3, [r4]
   18ed4:	cmp	r3, #32
   18ed8:	bhi	18ef4 <_start@@Base+0x48f4>
   18edc:	beq	18f20 <_start@@Base+0x4920>
   18ee0:	mov	r2, r7
   18ee4:	mov	r1, r4
   18ee8:	ldr	r0, [sp, #8]
   18eec:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   18ef0:	mov	r4, r0
   18ef4:	cmp	r7, r4
   18ef8:	beq	1901c <_start@@Base+0x4a1c>
   18efc:	mov	r8, #0
   18f00:	add	sl, sp, #16
   18f04:	add	r9, sp, #24
   18f08:	b	18f78 <_start@@Base+0x4978>
   18f0c:	mov	r3, #5
   18f10:	ldr	r0, [sp, #8]
   18f14:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18f18:	mov	r4, r0
   18f1c:	b	18ec4 <_start@@Base+0x48c4>
   18f20:	ldrb	r3, [r4, #1]
   18f24:	cmp	r3, #32
   18f28:	addhi	r4, r4, #1
   18f2c:	bls	18ee0 <_start@@Base+0x48e0>
   18f30:	b	18ef4 <_start@@Base+0x48f4>
   18f34:	mov	r4, r2
   18f38:	b	18ee0 <_start@@Base+0x48e0>
   18f3c:	mov	r4, r0
   18f40:	ldr	r3, [sp, #20]
   18f44:	cmp	r3, #0
   18f48:	bne	18fdc <_start@@Base+0x49dc>
   18f4c:	ldrd	r2, [sp, #24]
   18f50:	cmp	r3, #0
   18f54:	cmpeq	r2, #255	; 0xff
   18f58:	uxtbls	r8, r2
   18f5c:	bhi	19000 <_start@@Base+0x4a00>
   18f60:	ldrb	r3, [fp]
   18f64:	add	r3, r8, r3
   18f68:	strb	r3, [fp]
   18f6c:	ldr	r3, [sp, #16]
   18f70:	cmp	r3, #0
   18f74:	beq	1901c <_start@@Base+0x4a1c>
   18f78:	ldr	r6, [sp, #12]
   18f7c:	mov	r5, r4
   18f80:	str	sl, [sp, #4]
   18f84:	str	r9, [sp]
   18f88:	ldr	r4, [r6]
   18f8c:	add	r3, sp, #20
   18f90:	mov	r2, r7
   18f94:	mov	r1, r5
   18f98:	ldr	r0, [sp, #8]
   18f9c:	blx	r4
   18fa0:	cmp	r7, r0
   18fa4:	beq	19018 <_start@@Base+0x4a18>
   18fa8:	cmp	r5, r0
   18fac:	bne	18f3c <_start@@Base+0x493c>
   18fb0:	mov	r5, r0
   18fb4:	ldr	r3, [r6, #4]!
   18fb8:	cmp	r3, #0
   18fbc:	bne	18f80 <_start@@Base+0x4980>
   18fc0:	mov	r3, #23
   18fc4:	mov	r2, r7
   18fc8:	mov	r1, r0
   18fcc:	ldr	r0, [sp, #8]
   18fd0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18fd4:	mov	r4, r0
   18fd8:	b	1901c <_start@@Base+0x4a1c>
   18fdc:	mov	r3, #8
   18fe0:	mov	r2, r7
   18fe4:	mov	r1, r0
   18fe8:	ldr	r0, [sp, #8]
   18fec:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   18ff0:	cmp	r7, r0
   18ff4:	bne	18f60 <_start@@Base+0x4960>
   18ff8:	mov	r4, r0
   18ffc:	b	1901c <_start@@Base+0x4a1c>
   19000:	mov	r3, #7
   19004:	mov	r2, r7
   19008:	mov	r1, r0
   1900c:	ldr	r0, [sp, #8]
   19010:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19014:	b	18ff0 <_start@@Base+0x49f0>
   19018:	mov	r4, r0
   1901c:	mov	r0, r4
   19020:	add	sp, sp, #36	; 0x24
   19024:	ldrd	r4, [sp]
   19028:	ldrd	r6, [sp, #8]
   1902c:	ldrd	r8, [sp, #16]
   19030:	ldrd	sl, [sp, #24]
   19034:	add	sp, sp, #32
   19038:	pop	{pc}		; (ldr pc, [sp], #4)
   1903c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19040:	strd	r6, [sp, #8]
   19044:	strd	r8, [sp, #16]
   19048:	strd	sl, [sp, #24]
   1904c:	str	lr, [sp, #32]
   19050:	sub	sp, sp, #36	; 0x24
   19054:	str	r0, [sp, #8]
   19058:	mov	r7, r2
   1905c:	str	r3, [sp, #12]
   19060:	ldr	r8, [sp, #72]	; 0x48
   19064:	mov	r3, #0
   19068:	strb	r3, [r8]
   1906c:	cmp	r1, r2
   19070:	beq	190f4 <_start@@Base+0x4af4>
   19074:	ldrb	r3, [r1]
   19078:	cmp	r3, #34	; 0x22
   1907c:	addeq	r4, r1, #1
   19080:	bne	190cc <_start@@Base+0x4acc>
   19084:	sub	r3, r7, r4
   19088:	cmp	r3, #1
   1908c:	ble	190a0 <_start@@Base+0x4aa0>
   19090:	ldrb	r3, [r4]
   19094:	cmp	r3, #32
   19098:	bhi	190b4 <_start@@Base+0x4ab4>
   1909c:	beq	190e0 <_start@@Base+0x4ae0>
   190a0:	mov	r2, r7
   190a4:	mov	r1, r4
   190a8:	ldr	r0, [sp, #8]
   190ac:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   190b0:	mov	r4, r0
   190b4:	cmp	r7, r4
   190b8:	beq	191f0 <_start@@Base+0x4bf0>
   190bc:	mov	fp, #0
   190c0:	add	sl, sp, #16
   190c4:	add	r9, sp, #24
   190c8:	b	1913c <_start@@Base+0x4b3c>
   190cc:	mov	r3, #5
   190d0:	ldr	r0, [sp, #8]
   190d4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   190d8:	mov	r4, r0
   190dc:	b	19084 <_start@@Base+0x4a84>
   190e0:	ldrb	r3, [r4, #1]
   190e4:	cmp	r3, #32
   190e8:	addhi	r4, r4, #1
   190ec:	bls	190a0 <_start@@Base+0x4aa0>
   190f0:	b	190b4 <_start@@Base+0x4ab4>
   190f4:	mov	r4, r2
   190f8:	b	190a0 <_start@@Base+0x4aa0>
   190fc:	mov	r4, r0
   19100:	ldrd	r2, [sp, #24]
   19104:	ldr	r1, [sp, #20]
   19108:	cmp	r1, #0
   1910c:	beq	191c4 <_start@@Base+0x4bc4>
   19110:	cmp	r3, #0
   19114:	cmpeq	r2, #128	; 0x80
   19118:	rsbls	fp, r2, #0
   1911c:	sxtbls	fp, fp
   19120:	bhi	191a0 <_start@@Base+0x4ba0>
   19124:	ldrb	r3, [r8]
   19128:	add	r3, r3, fp
   1912c:	strb	r3, [r8]
   19130:	ldr	r3, [sp, #16]
   19134:	cmp	r3, #0
   19138:	beq	191f0 <_start@@Base+0x4bf0>
   1913c:	ldr	r6, [sp, #12]
   19140:	mov	r5, r4
   19144:	str	sl, [sp, #4]
   19148:	str	r9, [sp]
   1914c:	ldr	r4, [r6]
   19150:	add	r3, sp, #20
   19154:	mov	r2, r7
   19158:	mov	r1, r5
   1915c:	ldr	r0, [sp, #8]
   19160:	blx	r4
   19164:	cmp	r7, r0
   19168:	beq	191ec <_start@@Base+0x4bec>
   1916c:	cmp	r5, r0
   19170:	bne	190fc <_start@@Base+0x4afc>
   19174:	mov	r5, r0
   19178:	ldr	r3, [r6, #4]!
   1917c:	cmp	r3, #0
   19180:	bne	19144 <_start@@Base+0x4b44>
   19184:	mov	r3, #23
   19188:	mov	r2, r7
   1918c:	mov	r1, r0
   19190:	ldr	r0, [sp, #8]
   19194:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19198:	mov	r4, r0
   1919c:	b	191f0 <_start@@Base+0x4bf0>
   191a0:	mov	r3, #8
   191a4:	mov	r2, r7
   191a8:	mov	r1, r0
   191ac:	ldr	r0, [sp, #8]
   191b0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   191b4:	cmp	r7, r0
   191b8:	bne	19124 <_start@@Base+0x4b24>
   191bc:	mov	r4, r0
   191c0:	b	191f0 <_start@@Base+0x4bf0>
   191c4:	cmp	r3, #0
   191c8:	cmpeq	r2, #127	; 0x7f
   191cc:	sxtbls	fp, r2
   191d0:	bls	19124 <_start@@Base+0x4b24>
   191d4:	mov	r3, #7
   191d8:	mov	r2, r7
   191dc:	mov	r1, r0
   191e0:	ldr	r0, [sp, #8]
   191e4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   191e8:	b	191b4 <_start@@Base+0x4bb4>
   191ec:	mov	r4, r0
   191f0:	mov	r0, r4
   191f4:	add	sp, sp, #36	; 0x24
   191f8:	ldrd	r4, [sp]
   191fc:	ldrd	r6, [sp, #8]
   19200:	ldrd	r8, [sp, #16]
   19204:	ldrd	sl, [sp, #24]
   19208:	add	sp, sp, #32
   1920c:	pop	{pc}		; (ldr pc, [sp], #4)
   19210:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19214:	strd	r6, [sp, #8]
   19218:	strd	r8, [sp, #16]
   1921c:	strd	sl, [sp, #24]
   19220:	str	lr, [sp, #32]
   19224:	sub	sp, sp, #36	; 0x24
   19228:	str	r0, [sp, #8]
   1922c:	mov	r7, r2
   19230:	str	r3, [sp, #12]
   19234:	ldr	fp, [sp, #72]	; 0x48
   19238:	mov	r3, #0
   1923c:	strh	r3, [fp]
   19240:	cmp	r1, r2
   19244:	beq	192c4 <_start@@Base+0x4cc4>
   19248:	ldrb	r3, [r1]
   1924c:	cmp	r3, #34	; 0x22
   19250:	addeq	r4, r1, #1
   19254:	bne	1929c <_start@@Base+0x4c9c>
   19258:	sub	r3, r7, r4
   1925c:	cmp	r3, #1
   19260:	ble	19274 <_start@@Base+0x4c74>
   19264:	ldrb	r3, [r4]
   19268:	cmp	r3, #32
   1926c:	bhi	19288 <_start@@Base+0x4c88>
   19270:	beq	192b0 <_start@@Base+0x4cb0>
   19274:	mov	r2, r7
   19278:	mov	r1, r4
   1927c:	ldr	r0, [sp, #8]
   19280:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   19284:	mov	r4, r0
   19288:	cmp	r7, r4
   1928c:	beq	193b8 <_start@@Base+0x4db8>
   19290:	mov	r8, #0
   19294:	add	sl, sp, #16
   19298:	b	19310 <_start@@Base+0x4d10>
   1929c:	mov	r3, #5
   192a0:	ldr	r0, [sp, #8]
   192a4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   192a8:	mov	r4, r0
   192ac:	b	19258 <_start@@Base+0x4c58>
   192b0:	ldrb	r3, [r4, #1]
   192b4:	cmp	r3, #32
   192b8:	addhi	r4, r4, #1
   192bc:	bls	19274 <_start@@Base+0x4c74>
   192c0:	b	19288 <_start@@Base+0x4c88>
   192c4:	mov	r4, r2
   192c8:	b	19274 <_start@@Base+0x4c74>
   192cc:	mov	r4, r0
   192d0:	ldr	r3, [sp, #20]
   192d4:	cmp	r3, #0
   192d8:	bne	19378 <_start@@Base+0x4d78>
   192dc:	ldrd	r2, [sp, #24]
   192e0:	movw	r0, #65535	; 0xffff
   192e4:	mov	r1, #0
   192e8:	cmp	r3, r1
   192ec:	cmpeq	r2, r0
   192f0:	uxthls	r8, r2
   192f4:	bhi	1939c <_start@@Base+0x4d9c>
   192f8:	ldrh	r3, [fp]
   192fc:	add	r3, r8, r3
   19300:	strh	r3, [fp]
   19304:	ldr	r3, [sp, #16]
   19308:	cmp	r3, #0
   1930c:	beq	193b8 <_start@@Base+0x4db8>
   19310:	ldr	r6, [sp, #12]
   19314:	mov	r5, r4
   19318:	add	r9, sp, #24
   1931c:	str	sl, [sp, #4]
   19320:	str	r9, [sp]
   19324:	ldr	r4, [r6]
   19328:	add	r3, sp, #20
   1932c:	mov	r2, r7
   19330:	mov	r1, r5
   19334:	ldr	r0, [sp, #8]
   19338:	blx	r4
   1933c:	cmp	r7, r0
   19340:	beq	193b4 <_start@@Base+0x4db4>
   19344:	cmp	r5, r0
   19348:	bne	192cc <_start@@Base+0x4ccc>
   1934c:	mov	r5, r0
   19350:	ldr	r3, [r6, #4]!
   19354:	cmp	r3, #0
   19358:	bne	1931c <_start@@Base+0x4d1c>
   1935c:	mov	r3, #23
   19360:	mov	r2, r7
   19364:	mov	r1, r0
   19368:	ldr	r0, [sp, #8]
   1936c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19370:	mov	r4, r0
   19374:	b	193b8 <_start@@Base+0x4db8>
   19378:	mov	r3, #8
   1937c:	mov	r2, r7
   19380:	mov	r1, r0
   19384:	ldr	r0, [sp, #8]
   19388:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1938c:	cmp	r7, r0
   19390:	bne	192f8 <_start@@Base+0x4cf8>
   19394:	mov	r4, r0
   19398:	b	193b8 <_start@@Base+0x4db8>
   1939c:	mov	r3, #7
   193a0:	mov	r2, r7
   193a4:	mov	r1, r4
   193a8:	ldr	r0, [sp, #8]
   193ac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   193b0:	b	1938c <_start@@Base+0x4d8c>
   193b4:	mov	r4, r0
   193b8:	mov	r0, r4
   193bc:	add	sp, sp, #36	; 0x24
   193c0:	ldrd	r4, [sp]
   193c4:	ldrd	r6, [sp, #8]
   193c8:	ldrd	r8, [sp, #16]
   193cc:	ldrd	sl, [sp, #24]
   193d0:	add	sp, sp, #32
   193d4:	pop	{pc}		; (ldr pc, [sp], #4)
   193d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   193dc:	strd	r6, [sp, #8]
   193e0:	strd	r8, [sp, #16]
   193e4:	strd	sl, [sp, #24]
   193e8:	str	lr, [sp, #32]
   193ec:	sub	sp, sp, #44	; 0x2c
   193f0:	str	r0, [sp, #12]
   193f4:	mov	r7, r2
   193f8:	str	r3, [sp, #20]
   193fc:	ldr	fp, [sp, #80]	; 0x50
   19400:	mov	r2, #0
   19404:	mov	r3, #0
   19408:	strd	r2, [fp]
   1940c:	cmp	r1, r7
   19410:	beq	194a0 <_start@@Base+0x4ea0>
   19414:	ldrb	r3, [r1]
   19418:	cmp	r3, #34	; 0x22
   1941c:	addeq	r4, r1, #1
   19420:	bne	19474 <_start@@Base+0x4e74>
   19424:	sub	r3, r7, r4
   19428:	cmp	r3, #1
   1942c:	ble	19440 <_start@@Base+0x4e40>
   19430:	ldrb	r3, [r4]
   19434:	cmp	r3, #32
   19438:	bhi	19454 <_start@@Base+0x4e54>
   1943c:	beq	1948c <_start@@Base+0x4e8c>
   19440:	mov	r2, r7
   19444:	mov	r1, r4
   19448:	ldr	r0, [sp, #12]
   1944c:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   19450:	mov	r4, r0
   19454:	cmp	r7, r4
   19458:	beq	19578 <_start@@Base+0x4f78>
   1945c:	mov	r3, #0
   19460:	str	r3, [sp, #16]
   19464:	mov	r8, r3
   19468:	add	sl, sp, #24
   1946c:	add	r9, sp, #32
   19470:	b	194ec <_start@@Base+0x4eec>
   19474:	mov	r3, #5
   19478:	mov	r2, r7
   1947c:	ldr	r0, [sp, #12]
   19480:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19484:	mov	r4, r0
   19488:	b	19424 <_start@@Base+0x4e24>
   1948c:	ldrb	r3, [r4, #1]
   19490:	cmp	r3, #32
   19494:	addhi	r4, r4, #1
   19498:	bls	19440 <_start@@Base+0x4e40>
   1949c:	b	19454 <_start@@Base+0x4e54>
   194a0:	mov	r4, r7
   194a4:	b	19440 <_start@@Base+0x4e40>
   194a8:	mov	r4, r0
   194ac:	ldr	r3, [sp, #28]
   194b0:	cmp	r3, #0
   194b4:	bne	19550 <_start@@Base+0x4f50>
   194b8:	ldr	r3, [sp, #32]
   194bc:	str	r3, [sp, #16]
   194c0:	ldr	r8, [sp, #36]	; 0x24
   194c4:	ldr	r3, [fp]
   194c8:	ldr	r2, [fp, #4]
   194cc:	ldr	r1, [sp, #16]
   194d0:	adds	r3, r3, r1
   194d4:	adc	r2, r2, r8
   194d8:	str	r3, [fp]
   194dc:	str	r2, [fp, #4]
   194e0:	ldr	r3, [sp, #24]
   194e4:	cmp	r3, #0
   194e8:	beq	19578 <_start@@Base+0x4f78>
   194ec:	ldr	r6, [sp, #20]
   194f0:	mov	r5, r4
   194f4:	str	sl, [sp, #4]
   194f8:	str	r9, [sp]
   194fc:	ldr	r4, [r6]
   19500:	add	r3, sp, #28
   19504:	mov	r2, r7
   19508:	mov	r1, r5
   1950c:	ldr	r0, [sp, #12]
   19510:	blx	r4
   19514:	cmp	r7, r0
   19518:	beq	19574 <_start@@Base+0x4f74>
   1951c:	cmp	r5, r0
   19520:	bne	194a8 <_start@@Base+0x4ea8>
   19524:	mov	r5, r0
   19528:	ldr	r3, [r6, #4]!
   1952c:	cmp	r3, #0
   19530:	bne	194f4 <_start@@Base+0x4ef4>
   19534:	mov	r3, #23
   19538:	mov	r2, r7
   1953c:	mov	r1, r0
   19540:	ldr	r0, [sp, #12]
   19544:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19548:	mov	r4, r0
   1954c:	b	19578 <_start@@Base+0x4f78>
   19550:	mov	r3, #8
   19554:	mov	r2, r7
   19558:	mov	r1, r0
   1955c:	ldr	r0, [sp, #12]
   19560:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19564:	cmp	r7, r0
   19568:	bne	194c4 <_start@@Base+0x4ec4>
   1956c:	mov	r4, r0
   19570:	b	19578 <_start@@Base+0x4f78>
   19574:	mov	r4, r0
   19578:	mov	r0, r4
   1957c:	add	sp, sp, #44	; 0x2c
   19580:	ldrd	r4, [sp]
   19584:	ldrd	r6, [sp, #8]
   19588:	ldrd	r8, [sp, #16]
   1958c:	ldrd	sl, [sp, #24]
   19590:	add	sp, sp, #32
   19594:	pop	{pc}		; (ldr pc, [sp], #4)
   19598:	strd	r4, [sp, #-16]!
   1959c:	str	r6, [sp, #8]
   195a0:	str	lr, [sp, #12]
   195a4:	mov	r6, r0
   195a8:	mov	r4, r2
   195ac:	mov	r5, r3
   195b0:	cmp	r1, r2
   195b4:	beq	195c4 <_start@@Base+0x4fc4>
   195b8:	ldrb	r3, [r1]
   195bc:	cmp	r3, #91	; 0x5b
   195c0:	beq	195ec <_start@@Base+0x4fec>
   195c4:	mov	r3, #0
   195c8:	str	r3, [r5]
   195cc:	mov	r3, #22
   195d0:	mov	r2, r4
   195d4:	mov	r0, r6
   195d8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   195dc:	ldrd	r4, [sp]
   195e0:	ldr	r6, [sp, #8]
   195e4:	add	sp, sp, #12
   195e8:	pop	{pc}		; (ldr pc, [sp], #4)
   195ec:	add	r0, r1, #1
   195f0:	sub	r3, r2, r0
   195f4:	cmp	r3, #1
   195f8:	ble	1960c <_start@@Base+0x500c>
   195fc:	ldrb	r3, [r1, #1]
   19600:	cmp	r3, #32
   19604:	bhi	1961c <_start@@Base+0x501c>
   19608:	beq	1963c <_start@@Base+0x503c>
   1960c:	mov	r2, r4
   19610:	mov	r1, r0
   19614:	mov	r0, r6
   19618:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1961c:	cmp	r4, r0
   19620:	beq	19630 <_start@@Base+0x5030>
   19624:	ldrb	r3, [r0]
   19628:	cmp	r3, #93	; 0x5d
   1962c:	beq	19650 <_start@@Base+0x5050>
   19630:	mov	r3, #1
   19634:	str	r3, [r5]
   19638:	b	195dc <_start@@Base+0x4fdc>
   1963c:	ldrb	r3, [r1, #2]
   19640:	cmp	r3, #32
   19644:	addhi	r0, r1, #2
   19648:	bls	1960c <_start@@Base+0x500c>
   1964c:	b	1961c <_start@@Base+0x501c>
   19650:	mov	r3, #0
   19654:	str	r3, [r5]
   19658:	mov	r2, r4
   1965c:	add	r1, r0, #1
   19660:	mov	r0, r6
   19664:	bl	1809c <_start@@Base+0x3a9c>
   19668:	b	195dc <_start@@Base+0x4fdc>
   1966c:	strd	r4, [sp, #-16]!
   19670:	str	r6, [sp, #8]
   19674:	str	lr, [sp, #12]
   19678:	mov	r6, r0
   1967c:	mov	r4, r2
   19680:	mov	r5, r3
   19684:	cmp	r1, r2
   19688:	beq	19698 <_start@@Base+0x5098>
   1968c:	ldrb	r3, [r1]
   19690:	cmp	r3, #123	; 0x7b
   19694:	beq	196c0 <_start@@Base+0x50c0>
   19698:	mov	r3, #0
   1969c:	str	r3, [r5]
   196a0:	mov	r3, #21
   196a4:	mov	r2, r4
   196a8:	mov	r0, r6
   196ac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   196b0:	ldrd	r4, [sp]
   196b4:	ldr	r6, [sp, #8]
   196b8:	add	sp, sp, #12
   196bc:	pop	{pc}		; (ldr pc, [sp], #4)
   196c0:	add	r0, r1, #1
   196c4:	sub	r3, r2, r0
   196c8:	cmp	r3, #1
   196cc:	ble	196e0 <_start@@Base+0x50e0>
   196d0:	ldrb	r3, [r1, #1]
   196d4:	cmp	r3, #32
   196d8:	bhi	196f0 <_start@@Base+0x50f0>
   196dc:	beq	19710 <_start@@Base+0x5110>
   196e0:	mov	r2, r4
   196e4:	mov	r1, r0
   196e8:	mov	r0, r6
   196ec:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   196f0:	cmp	r4, r0
   196f4:	beq	19704 <_start@@Base+0x5104>
   196f8:	ldrb	r3, [r0]
   196fc:	cmp	r3, #125	; 0x7d
   19700:	beq	19724 <_start@@Base+0x5124>
   19704:	mov	r3, #1
   19708:	str	r3, [r5]
   1970c:	b	196b0 <_start@@Base+0x50b0>
   19710:	ldrb	r3, [r1, #2]
   19714:	cmp	r3, #32
   19718:	addhi	r0, r1, #2
   1971c:	bls	196e0 <_start@@Base+0x50e0>
   19720:	b	196f0 <_start@@Base+0x50f0>
   19724:	mov	r3, #0
   19728:	str	r3, [r5]
   1972c:	mov	r2, r4
   19730:	add	r1, r0, #1
   19734:	mov	r0, r6
   19738:	bl	1809c <_start@@Base+0x3a9c>
   1973c:	b	196b0 <_start@@Base+0x50b0>
   19740:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19744:	strd	r6, [sp, #8]
   19748:	strd	r8, [sp, #16]
   1974c:	strd	sl, [sp, #24]
   19750:	str	lr, [sp, #32]
   19754:	sub	sp, sp, #44	; 0x2c
   19758:	mov	r5, r0
   1975c:	mov	r4, r2
   19760:	mov	r9, r3
   19764:	add	r3, sp, #36	; 0x24
   19768:	bl	1966c <_start@@Base+0x506c>
   1976c:	movw	fp, #16496	; 0x4070
   19770:	movt	fp, #5
   19774:	add	r3, fp, #12
   19778:	str	r3, [sp, #8]
   1977c:	str	fp, [sp, #12]
   19780:	b	19bf8 <_start@@Base+0x55f8>
   19784:	mov	r3, #5
   19788:	mov	r2, r4
   1978c:	mov	r1, r0
   19790:	mov	r0, r5
   19794:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19798:	mov	sl, r0
   1979c:	b	19c1c <_start@@Base+0x561c>
   197a0:	sub	r3, r2, #1
   197a4:	cmp	r3, #7
   197a8:	ldrls	pc, [pc, r3, lsl #2]
   197ac:	b	19808 <_start@@Base+0x5208>
   197b0:	andeq	r9, r1, r0, lsl #16
   197b4:	strdeq	r9, [r1], -r8
   197b8:	strdeq	r9, [r1], -r0
   197bc:	andeq	r9, r1, r8, ror #15
   197c0:	andeq	r9, r1, r0, ror #15
   197c4:	ldrdeq	r9, [r1], -r8
   197c8:	ldrdeq	r9, [r1], -r0
   197cc:	andeq	r9, r1, r8, lsr #24
   197d0:	mov	r1, #0
   197d4:	b	19c2c <_start@@Base+0x562c>
   197d8:	mov	r3, #0
   197dc:	b	19c30 <_start@@Base+0x5630>
   197e0:	mov	r3, #0
   197e4:	b	19c30 <_start@@Base+0x5630>
   197e8:	mov	r3, #0
   197ec:	b	19c30 <_start@@Base+0x5630>
   197f0:	mov	r3, #0
   197f4:	b	19c38 <_start@@Base+0x5638>
   197f8:	mov	r3, #0
   197fc:	b	19c40 <_start@@Base+0x5640>
   19800:	mov	r3, #0
   19804:	b	19c48 <_start@@Base+0x5648>
   19808:	mov	r3, #0
   1980c:	b	19c50 <_start@@Base+0x5650>
   19810:	cmp	r2, #1
   19814:	ble	19824 <_start@@Base+0x5224>
   19818:	ldrb	r3, [sl, #1]
   1981c:	cmp	r3, #34	; 0x22
   19820:	beq	19838 <_start@@Base+0x5238>
   19824:	mov	r2, r4
   19828:	mov	r1, sl
   1982c:	mov	r0, r5
   19830:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   19834:	b	19c80 <_start@@Base+0x5680>
   19838:	add	r1, sl, #2
   1983c:	sub	r3, r4, r1
   19840:	cmp	r3, #1
   19844:	ble	19858 <_start@@Base+0x5258>
   19848:	ldrb	r3, [sl, #2]
   1984c:	cmp	r3, #32
   19850:	bhi	19868 <_start@@Base+0x5268>
   19854:	beq	1990c <_start@@Base+0x530c>
   19858:	mov	r2, r4
   1985c:	mov	r0, r5
   19860:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   19864:	mov	r1, r0
   19868:	cmp	r4, r1
   1986c:	beq	1987c <_start@@Base+0x527c>
   19870:	ldrb	r3, [r1]
   19874:	cmp	r3, #58	; 0x3a
   19878:	beq	19920 <_start@@Base+0x5320>
   1987c:	mov	r3, #4
   19880:	mov	r2, r4
   19884:	mov	r0, r5
   19888:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1988c:	mov	r8, r0
   19890:	cmp	sl, r8
   19894:	beq	199b4 <_start@@Base+0x53b4>
   19898:	mov	r3, #0
   1989c:	strb	r3, [sp, #18]
   198a0:	mov	r0, #0
   198a4:	mov	r1, #0
   198a8:	strd	r0, [sp, #24]
   198ac:	str	r3, [sp, #20]
   198b0:	cmp	r4, r8
   198b4:	beq	19d94 <_start@@Base+0x5794>
   198b8:	add	r3, sp, #24
   198bc:	str	r3, [sp]
   198c0:	add	r3, sp, #20
   198c4:	mov	r2, r4
   198c8:	mov	r1, r8
   198cc:	mov	r0, r5
   198d0:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   198d4:	cmp	r8, r0
   198d8:	bne	19938 <_start@@Base+0x5338>
   198dc:	mov	r8, r0
   198e0:	add	r3, sp, #18
   198e4:	str	r3, [sp]
   198e8:	ldr	r3, [sp, #12]
   198ec:	mov	r2, r4
   198f0:	mov	r1, r8
   198f4:	mov	r0, r5
   198f8:	bl	1903c <_start@@Base+0x4a3c>
   198fc:	cmp	r4, r0
   19900:	cmpne	r0, r8
   19904:	bne	19978 <_start@@Base+0x5378>
   19908:	b	19ab4 <_start@@Base+0x54b4>
   1990c:	ldrb	r3, [sl, #3]
   19910:	cmp	r3, #32
   19914:	addhi	r1, sl, #3
   19918:	bls	19858 <_start@@Base+0x5258>
   1991c:	b	19868 <_start@@Base+0x5268>
   19920:	mov	r2, r4
   19924:	add	r1, r1, #1
   19928:	mov	r0, r5
   1992c:	bl	1809c <_start@@Base+0x3a9c>
   19930:	mov	r8, r0
   19934:	b	19890 <_start@@Base+0x5290>
   19938:	ldrd	r2, [sp, #24]
   1993c:	ldr	r1, [sp, #20]
   19940:	cmp	r1, #0
   19944:	beq	19984 <_start@@Base+0x5384>
   19948:	cmp	r3, #0
   1994c:	cmpeq	r2, #128	; 0x80
   19950:	rsbls	r2, r2, #0
   19954:	strbls	r2, [sp, #18]
   19958:	bls	19978 <_start@@Base+0x5378>
   1995c:	mov	r3, #8
   19960:	mov	r2, r4
   19964:	mov	r1, r0
   19968:	mov	r0, r5
   1996c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19970:	cmp	r8, r0
   19974:	beq	199ac <_start@@Base+0x53ac>
   19978:	ldrb	r3, [sp, #18]
   1997c:	strb	r3, [r9, #2]
   19980:	b	19c80 <_start@@Base+0x5680>
   19984:	cmp	r3, #0
   19988:	cmpeq	r2, #127	; 0x7f
   1998c:	strbls	r2, [sp, #18]
   19990:	bls	19978 <_start@@Base+0x5378>
   19994:	mov	r3, #7
   19998:	mov	r2, r4
   1999c:	mov	r1, r0
   199a0:	mov	r0, r5
   199a4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   199a8:	b	19970 <_start@@Base+0x5370>
   199ac:	mov	r8, r0
   199b0:	b	198e0 <_start@@Base+0x52e0>
   199b4:	mov	sl, r8
   199b8:	b	19824 <_start@@Base+0x5224>
   199bc:	cmp	r2, #1
   199c0:	ble	199d0 <_start@@Base+0x53d0>
   199c4:	ldrb	r3, [sl, #1]
   199c8:	cmp	r3, #34	; 0x22
   199cc:	beq	199e4 <_start@@Base+0x53e4>
   199d0:	mov	r2, r4
   199d4:	mov	r1, sl
   199d8:	mov	r0, r5
   199dc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   199e0:	b	19c80 <_start@@Base+0x5680>
   199e4:	add	r1, sl, #2
   199e8:	sub	r3, r4, r1
   199ec:	cmp	r3, #1
   199f0:	ble	19a04 <_start@@Base+0x5404>
   199f4:	ldrb	r3, [sl, #2]
   199f8:	cmp	r3, #32
   199fc:	bhi	19a14 <_start@@Base+0x5414>
   19a00:	beq	19ae4 <_start@@Base+0x54e4>
   19a04:	mov	r2, r4
   19a08:	mov	r0, r5
   19a0c:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   19a10:	mov	r1, r0
   19a14:	cmp	r4, r1
   19a18:	beq	19a28 <_start@@Base+0x5428>
   19a1c:	ldrb	r3, [r1]
   19a20:	cmp	r3, #58	; 0x3a
   19a24:	beq	19af8 <_start@@Base+0x54f8>
   19a28:	mov	r3, #4
   19a2c:	mov	r2, r4
   19a30:	mov	r0, r5
   19a34:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19a38:	mov	r8, r0
   19a3c:	cmp	sl, r8
   19a40:	beq	19b94 <_start@@Base+0x5594>
   19a44:	mov	r3, #0
   19a48:	strh	r3, [sp, #18]
   19a4c:	mov	r0, #0
   19a50:	mov	r1, #0
   19a54:	strd	r0, [sp, #24]
   19a58:	str	r3, [sp, #20]
   19a5c:	cmp	r4, r8
   19a60:	beq	19d9c <_start@@Base+0x579c>
   19a64:	add	r3, sp, #24
   19a68:	str	r3, [sp]
   19a6c:	add	r3, sp, #20
   19a70:	mov	r2, r4
   19a74:	mov	r1, r8
   19a78:	mov	r0, r5
   19a7c:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   19a80:	cmp	r8, r0
   19a84:	bne	19b10 <_start@@Base+0x5510>
   19a88:	mov	r8, r0
   19a8c:	add	r3, sp, #18
   19a90:	str	r3, [sp]
   19a94:	ldr	r3, [sp, #8]
   19a98:	mov	r2, r4
   19a9c:	mov	r1, r8
   19aa0:	mov	r0, r5
   19aa4:	bl	188fc <_start@@Base+0x42fc>
   19aa8:	cmp	r4, r0
   19aac:	cmpne	r0, r8
   19ab0:	bne	19b50 <_start@@Base+0x5550>
   19ab4:	mov	r3, #33	; 0x21
   19ab8:	mov	r2, r4
   19abc:	mov	r1, r0
   19ac0:	mov	r0, r5
   19ac4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19ac8:	add	sp, sp, #44	; 0x2c
   19acc:	ldrd	r4, [sp]
   19ad0:	ldrd	r6, [sp, #8]
   19ad4:	ldrd	r8, [sp, #16]
   19ad8:	ldrd	sl, [sp, #24]
   19adc:	add	sp, sp, #32
   19ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ae4:	ldrb	r3, [sl, #3]
   19ae8:	cmp	r3, #32
   19aec:	addhi	r1, sl, #3
   19af0:	bls	19a04 <_start@@Base+0x5404>
   19af4:	b	19a14 <_start@@Base+0x5414>
   19af8:	mov	r2, r4
   19afc:	add	r1, r1, #1
   19b00:	mov	r0, r5
   19b04:	bl	1809c <_start@@Base+0x3a9c>
   19b08:	mov	r8, r0
   19b0c:	b	19a3c <_start@@Base+0x543c>
   19b10:	ldrd	r2, [sp, #24]
   19b14:	ldr	r1, [sp, #20]
   19b18:	cmp	r1, #0
   19b1c:	beq	19b5c <_start@@Base+0x555c>
   19b20:	cmp	r3, #0
   19b24:	cmpeq	r2, #32768	; 0x8000
   19b28:	rsbls	r2, r2, #0
   19b2c:	strhls	r2, [sp, #18]
   19b30:	bls	19b50 <_start@@Base+0x5550>
   19b34:	mov	r3, #8
   19b38:	mov	r2, r4
   19b3c:	mov	r1, r0
   19b40:	mov	r0, r5
   19b44:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19b48:	cmp	r8, r0
   19b4c:	beq	19b8c <_start@@Base+0x558c>
   19b50:	ldrh	r3, [sp, #18]
   19b54:	strh	r3, [r9]
   19b58:	b	19c80 <_start@@Base+0x5680>
   19b5c:	movw	sl, #32767	; 0x7fff
   19b60:	mov	fp, #0
   19b64:	cmp	r3, fp
   19b68:	cmpeq	r2, sl
   19b6c:	strhls	r2, [sp, #18]
   19b70:	bls	19b50 <_start@@Base+0x5550>
   19b74:	mov	r3, #7
   19b78:	mov	r2, r4
   19b7c:	mov	r1, r0
   19b80:	mov	r0, r5
   19b84:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19b88:	b	19b48 <_start@@Base+0x5548>
   19b8c:	mov	r8, r0
   19b90:	b	19a8c <_start@@Base+0x548c>
   19b94:	mov	sl, r8
   19b98:	b	199d0 <_start@@Base+0x53d0>
   19b9c:	mov	sl, r4
   19ba0:	b	19c70 <_start@@Base+0x5670>
   19ba4:	mov	r2, r4
   19ba8:	mov	r1, r0
   19bac:	mov	r0, r5
   19bb0:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   19bb4:	cmp	r4, r0
   19bb8:	moveq	r3, #0
   19bbc:	streq	r3, [sp, #36]	; 0x24
   19bc0:	beq	19bf8 <_start@@Base+0x55f8>
   19bc4:	ldrb	r3, [r0]
   19bc8:	cmp	r3, #44	; 0x2c
   19bcc:	beq	19cf8 <_start@@Base+0x56f8>
   19bd0:	mov	r3, #0
   19bd4:	str	r3, [sp, #36]	; 0x24
   19bd8:	ldrb	r3, [r0]
   19bdc:	cmp	r3, #125	; 0x7d
   19be0:	beq	19cb0 <_start@@Base+0x56b0>
   19be4:	mov	r3, #10
   19be8:	mov	r2, r4
   19bec:	mov	r1, r0
   19bf0:	mov	r0, r5
   19bf4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19bf8:	ldr	r3, [sp, #36]	; 0x24
   19bfc:	cmp	r3, #0
   19c00:	beq	19ac8 <_start@@Base+0x54c8>
   19c04:	cmp	r0, r4
   19c08:	beq	19b9c <_start@@Base+0x559c>
   19c0c:	ldrb	r3, [r0]
   19c10:	cmp	r3, #34	; 0x22
   19c14:	addeq	sl, r0, #1
   19c18:	bne	19784 <_start@@Base+0x5184>
   19c1c:	sub	r2, r4, sl
   19c20:	cmp	r2, #8
   19c24:	bls	197a0 <_start@@Base+0x51a0>
   19c28:	mov	r1, #0
   19c2c:	mov	r3, r1
   19c30:	ldrb	r0, [sl, #3]
   19c34:	orr	r3, r3, r0
   19c38:	ldrb	r0, [sl, #2]
   19c3c:	orr	r3, r3, r0, lsl #8
   19c40:	ldrb	r0, [sl, #1]
   19c44:	orr	r3, r3, r0, lsl #16
   19c48:	ldrb	r0, [sl]
   19c4c:	orr	r3, r3, r0, lsl #24
   19c50:	mov	r6, #0
   19c54:	and	r7, r3, #-16777216	; 0xff000000
   19c58:	cmp	r7, #1644167168	; 0x62000000
   19c5c:	cmpeq	r6, #0
   19c60:	beq	19810 <_start@@Base+0x5210>
   19c64:	cmp	r7, #1627389952	; 0x61000000
   19c68:	cmpeq	r6, #0
   19c6c:	beq	199bc <_start@@Base+0x53bc>
   19c70:	mov	r2, r4
   19c74:	mov	r1, sl
   19c78:	mov	r0, r5
   19c7c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   19c80:	sub	r3, r4, r0
   19c84:	cmp	r3, #1
   19c88:	ble	19ba4 <_start@@Base+0x55a4>
   19c8c:	ldrb	r3, [r0]
   19c90:	cmp	r3, #32
   19c94:	bhi	19bb4 <_start@@Base+0x55b4>
   19c98:	bne	19ba4 <_start@@Base+0x55a4>
   19c9c:	ldrb	r3, [r0, #1]
   19ca0:	cmp	r3, #32
   19ca4:	addhi	r0, r0, #1
   19ca8:	bls	19ba4 <_start@@Base+0x55a4>
   19cac:	b	19bb4 <_start@@Base+0x55b4>
   19cb0:	add	r1, r0, #1
   19cb4:	sub	r3, r4, r1
   19cb8:	cmp	r3, #1
   19cbc:	ble	19cd4 <_start@@Base+0x56d4>
   19cc0:	ldrb	r3, [r0, #1]
   19cc4:	cmp	r3, #32
   19cc8:	movhi	r0, r1
   19ccc:	bhi	19bf8 <_start@@Base+0x55f8>
   19cd0:	beq	19ce4 <_start@@Base+0x56e4>
   19cd4:	mov	r2, r4
   19cd8:	mov	r0, r5
   19cdc:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   19ce0:	b	19bf8 <_start@@Base+0x55f8>
   19ce4:	ldrb	r3, [r0, #2]
   19ce8:	cmp	r3, #32
   19cec:	addhi	r0, r0, #2
   19cf0:	bls	19cd4 <_start@@Base+0x56d4>
   19cf4:	b	19bf8 <_start@@Base+0x55f8>
   19cf8:	add	r1, r0, #1
   19cfc:	sub	r3, r4, r1
   19d00:	cmp	r3, #1
   19d04:	ble	19d1c <_start@@Base+0x571c>
   19d08:	ldrb	r3, [r0, #1]
   19d0c:	cmp	r3, #32
   19d10:	movhi	r0, r1
   19d14:	bhi	19d28 <_start@@Base+0x5728>
   19d18:	beq	19d60 <_start@@Base+0x5760>
   19d1c:	mov	r2, r4
   19d20:	mov	r0, r5
   19d24:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   19d28:	cmp	r4, r0
   19d2c:	beq	19d74 <_start@@Base+0x5774>
   19d30:	ldrb	r3, [r0]
   19d34:	cmp	r3, #125	; 0x7d
   19d38:	movne	r3, #1
   19d3c:	strne	r3, [sp, #36]	; 0x24
   19d40:	bne	19bf8 <_start@@Base+0x55f8>
   19d44:	mov	r3, #0
   19d48:	str	r3, [sp, #36]	; 0x24
   19d4c:	mov	r2, r4
   19d50:	add	r1, r0, #1
   19d54:	mov	r0, r5
   19d58:	bl	1809c <_start@@Base+0x3a9c>
   19d5c:	b	19bf8 <_start@@Base+0x55f8>
   19d60:	ldrb	r3, [r0, #2]
   19d64:	cmp	r3, #32
   19d68:	addhi	r0, r0, #2
   19d6c:	bls	19d1c <_start@@Base+0x571c>
   19d70:	b	19d28 <_start@@Base+0x5728>
   19d74:	mov	r3, #0
   19d78:	str	r3, [sp, #36]	; 0x24
   19d7c:	mov	r3, #10
   19d80:	mov	r2, r4
   19d84:	mov	r1, r0
   19d88:	mov	r0, r5
   19d8c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19d90:	b	19bf8 <_start@@Base+0x55f8>
   19d94:	mov	r0, r8
   19d98:	b	198dc <_start@@Base+0x52dc>
   19d9c:	mov	r0, r8
   19da0:	b	19a88 <_start@@Base+0x5488>
   19da4:	strd	r4, [sp, #-16]!
   19da8:	str	r6, [sp, #8]
   19dac:	str	lr, [sp, #12]
   19db0:	mov	r5, r0
   19db4:	mov	r0, r1
   19db8:	mov	r4, r2
   19dbc:	sub	r2, r2, r1
   19dc0:	cmp	r2, r3
   19dc4:	ble	19dd4 <_start@@Base+0x57d4>
   19dc8:	ldrb	r2, [r1, r3]
   19dcc:	cmp	r2, #34	; 0x22
   19dd0:	beq	19de4 <_start@@Base+0x57e4>
   19dd4:	ldrd	r4, [sp]
   19dd8:	ldr	r6, [sp, #8]
   19ddc:	add	sp, sp, #12
   19de0:	pop	{pc}		; (ldr pc, [sp], #4)
   19de4:	add	r3, r3, #1
   19de8:	add	r1, r1, r3
   19dec:	sub	r2, r4, r1
   19df0:	cmp	r2, #1
   19df4:	ble	19e08 <_start@@Base+0x5808>
   19df8:	ldrb	r3, [r0, r3]
   19dfc:	cmp	r3, #32
   19e00:	bhi	19e18 <_start@@Base+0x5818>
   19e04:	beq	19e40 <_start@@Base+0x5840>
   19e08:	mov	r2, r4
   19e0c:	mov	r0, r5
   19e10:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   19e14:	mov	r1, r0
   19e18:	cmp	r4, r1
   19e1c:	beq	19e2c <_start@@Base+0x582c>
   19e20:	ldrb	r3, [r1]
   19e24:	cmp	r3, #58	; 0x3a
   19e28:	beq	19e54 <_start@@Base+0x5854>
   19e2c:	mov	r3, #4
   19e30:	mov	r2, r4
   19e34:	mov	r0, r5
   19e38:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19e3c:	b	19dd4 <_start@@Base+0x57d4>
   19e40:	ldrb	r3, [r1, #1]
   19e44:	cmp	r3, #32
   19e48:	addhi	r1, r1, #1
   19e4c:	bls	19e08 <_start@@Base+0x5808>
   19e50:	b	19e18 <_start@@Base+0x5818>
   19e54:	mov	r2, r4
   19e58:	add	r1, r1, #1
   19e5c:	mov	r0, r5
   19e60:	bl	1809c <_start@@Base+0x3a9c>
   19e64:	b	19dd4 <_start@@Base+0x57d4>
   19e68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19e6c:	strd	r6, [sp, #8]
   19e70:	strd	r8, [sp, #16]
   19e74:	strd	sl, [sp, #24]
   19e78:	str	lr, [sp, #32]
   19e7c:	sub	sp, sp, #60	; 0x3c
   19e80:	mov	r6, r0
   19e84:	mov	r4, r1
   19e88:	mov	r5, r2
   19e8c:	mov	r9, r3
   19e90:	mov	r3, #0
   19e94:	str	r3, [r9]
   19e98:	mov	r2, #4
   19e9c:	mov	r1, r2
   19ea0:	ldr	r0, [r0]
   19ea4:	bl	2630c <flatcc_builder_start_struct@@Base>
   19ea8:	subs	fp, r0, #0
   19eac:	beq	1a178 <_start@@Base+0x5b78>
   19eb0:	add	r3, sp, #36	; 0x24
   19eb4:	mov	r2, r5
   19eb8:	mov	r1, r4
   19ebc:	mov	r0, r6
   19ec0:	bl	1966c <_start@@Base+0x506c>
   19ec4:	mov	r4, r0
   19ec8:	mov	r8, #0
   19ecc:	mov	sl, r8
   19ed0:	movt	sl, #65535	; 0xffff
   19ed4:	str	fp, [sp, #24]
   19ed8:	str	sl, [sp, #28]
   19edc:	b	1a2d4 <_start@@Base+0x5cd4>
   19ee0:	mov	r3, #5
   19ee4:	mov	r2, r5
   19ee8:	mov	r1, r4
   19eec:	mov	r0, r6
   19ef0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   19ef4:	mov	r4, r0
   19ef8:	b	1a2f8 <_start@@Base+0x5cf8>
   19efc:	ldrb	r0, [r4, #7]
   19f00:	mov	r1, #0
   19f04:	ldrb	r2, [r4, #6]
   19f08:	orr	r2, r0, r2, lsl #8
   19f0c:	mov	r3, r1
   19f10:	ldrb	r0, [r4, #5]
   19f14:	orr	r1, r2, r0, lsl #16
   19f18:	mov	r0, r3
   19f1c:	ldrb	r2, [r4, #4]
   19f20:	orr	r2, r1, r2, lsl #24
   19f24:	mov	r3, r0
   19f28:	ldrb	r0, [r4, #3]
   19f2c:	orr	r3, r3, r0
   19f30:	ldrb	r0, [r4, #2]
   19f34:	orr	r3, r3, r0, lsl #8
   19f38:	ldrb	r0, [r4, #1]
   19f3c:	orr	r3, r3, r0, lsl #16
   19f40:	ldrb	r0, [r4]
   19f44:	str	r2, [sp, #8]
   19f48:	orr	r3, r3, r0, lsl #24
   19f4c:	str	r3, [sp, #12]
   19f50:	ldrd	r2, [sp, #8]
   19f54:	add	r1, pc, #1004	; 0x3ec
   19f58:	ldrd	r0, [r1]
   19f5c:	cmp	r3, r1
   19f60:	cmpeq	r2, r0
   19f64:	bne	1a24c <_start@@Base+0x5c4c>
   19f68:	add	r7, r4, #8
   19f6c:	sub	r3, r5, r7
   19f70:	cmp	r3, #8
   19f74:	bhi	1a00c <_start@@Base+0x5a0c>
   19f78:	sub	r3, r3, #1
   19f7c:	cmp	r3, #7
   19f80:	ldrls	pc, [pc, r3, lsl #2]
   19f84:	b	1a0b0 <_start@@Base+0x5ab0>
   19f88:	andeq	sl, r1, r8, lsr #1
   19f8c:	andeq	sl, r1, r0, lsr #1
   19f90:	muleq	r1, r8, r0
   19f94:	muleq	r1, r0, r0
   19f98:	andeq	sl, r1, r8, lsl #1
   19f9c:	andeq	sl, r1, r0, lsl #1
   19fa0:	andeq	sl, r1, r8, ror r0
   19fa4:	andeq	sl, r1, ip
   19fa8:	mov	r0, r8
   19fac:	mov	r1, #0
   19fb0:	b	19f04 <_start@@Base+0x5904>
   19fb4:	mov	r2, #0
   19fb8:	mov	r3, r2
   19fbc:	b	19f10 <_start@@Base+0x5910>
   19fc0:	mov	r1, #0
   19fc4:	mov	r0, r1
   19fc8:	b	19f1c <_start@@Base+0x591c>
   19fcc:	mov	r2, #0
   19fd0:	mov	r3, r2
   19fd4:	b	19f28 <_start@@Base+0x5928>
   19fd8:	mov	r2, #0
   19fdc:	mov	r3, r2
   19fe0:	b	19f30 <_start@@Base+0x5930>
   19fe4:	mov	r2, #0
   19fe8:	mov	r3, r2
   19fec:	b	19f38 <_start@@Base+0x5938>
   19ff0:	mov	r2, #0
   19ff4:	mov	r3, r2
   19ff8:	b	19f40 <_start@@Base+0x5940>
   19ffc:	mov	r2, #0
   1a000:	mov	r3, #0
   1a004:	strd	r2, [sp, #8]
   1a008:	b	19f50 <_start@@Base+0x5950>
   1a00c:	mov	r3, #0
   1a010:	mov	r1, r3
   1a014:	ldrb	r2, [r4, #11]
   1a018:	orr	r1, r1, r2
   1a01c:	ldrb	r2, [r4, #10]
   1a020:	orr	r1, r1, r2, lsl #8
   1a024:	ldrb	r2, [r4, #9]
   1a028:	orr	r3, r1, r2, lsl #16
   1a02c:	ldrb	r0, [r4, #8]
   1a030:	orr	r3, r3, r0, lsl #24
   1a034:	mov	r2, #0
   1a038:	str	r2, [sp, #16]
   1a03c:	ldr	r2, [sp, #28]
   1a040:	and	r3, r3, r2
   1a044:	str	r3, [sp, #20]
   1a048:	ldrd	r2, [sp, #16]
   1a04c:	mov	r0, #0
   1a050:	mov	r1, #0
   1a054:	movt	r1, #24932	; 0x6164
   1a058:	cmp	r3, r1
   1a05c:	cmpeq	r2, r0
   1a060:	beq	1a0b8 <_start@@Base+0x5ab8>
   1a064:	mov	r2, r5
   1a068:	mov	r1, r7
   1a06c:	mov	r0, r6
   1a070:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a074:	b	1a25c <_start@@Base+0x5c5c>
   1a078:	mov	r3, #0
   1a07c:	b	1a010 <_start@@Base+0x5a10>
   1a080:	mov	r1, #0
   1a084:	b	1a014 <_start@@Base+0x5a14>
   1a088:	mov	r1, #0
   1a08c:	b	1a014 <_start@@Base+0x5a14>
   1a090:	mov	r1, #0
   1a094:	b	1a014 <_start@@Base+0x5a14>
   1a098:	mov	r1, #0
   1a09c:	b	1a01c <_start@@Base+0x5a1c>
   1a0a0:	mov	r1, #0
   1a0a4:	b	1a024 <_start@@Base+0x5a24>
   1a0a8:	mov	r3, #0
   1a0ac:	b	1a02c <_start@@Base+0x5a2c>
   1a0b0:	mov	r3, #0
   1a0b4:	b	1a034 <_start@@Base+0x5a34>
   1a0b8:	mov	r3, #2
   1a0bc:	mov	r2, r5
   1a0c0:	mov	r1, r7
   1a0c4:	mov	r0, r6
   1a0c8:	bl	19da4 <_start@@Base+0x57a4>
   1a0cc:	mov	r4, r0
   1a0d0:	cmp	r7, r0
   1a0d4:	beq	1a238 <_start@@Base+0x5c38>
   1a0d8:	mov	r3, #0
   1a0dc:	str	r3, [sp, #40]	; 0x28
   1a0e0:	str	r8, [sp, #48]	; 0x30
   1a0e4:	str	r3, [sp, #52]	; 0x34
   1a0e8:	str	r3, [sp, #44]	; 0x2c
   1a0ec:	cmp	r5, r0
   1a0f0:	beq	1a118 <_start@@Base+0x5b18>
   1a0f4:	add	r3, sp, #48	; 0x30
   1a0f8:	str	r3, [sp]
   1a0fc:	add	r3, sp, #44	; 0x2c
   1a100:	mov	r2, r5
   1a104:	mov	r1, r0
   1a108:	mov	r0, r6
   1a10c:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   1a110:	cmp	r4, r0
   1a114:	bne	1a1b0 <_start@@Base+0x5bb0>
   1a118:	mov	r4, r0
   1a11c:	add	r3, sp, #40	; 0x28
   1a120:	str	r3, [sp]
   1a124:	ldr	r3, [pc, #548]	; 1a350 <_start@@Base+0x5d50>
   1a128:	mov	r2, r5
   1a12c:	mov	r1, r4
   1a130:	mov	r0, r6
   1a134:	bl	18ad8 <_start@@Base+0x44d8>
   1a138:	cmp	r5, r0
   1a13c:	cmpne	r0, r4
   1a140:	bne	1a1f0 <_start@@Base+0x5bf0>
   1a144:	mov	r3, #33	; 0x21
   1a148:	mov	r2, r5
   1a14c:	mov	r1, r0
   1a150:	mov	r0, r6
   1a154:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a158:	mov	r4, r0
   1a15c:	cmp	r5, r4
   1a160:	beq	1a178 <_start@@Base+0x5b78>
   1a164:	ldr	r0, [r6]
   1a168:	bl	263c4 <flatcc_builder_end_struct@@Base>
   1a16c:	str	r0, [r9]
   1a170:	cmp	r0, #0
   1a174:	bne	1a190 <_start@@Base+0x5b90>
   1a178:	mov	r3, #33	; 0x21
   1a17c:	mov	r2, r5
   1a180:	mov	r1, r4
   1a184:	mov	r0, r6
   1a188:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a18c:	mov	r4, r0
   1a190:	mov	r0, r4
   1a194:	add	sp, sp, #60	; 0x3c
   1a198:	ldrd	r4, [sp]
   1a19c:	ldrd	r6, [sp, #8]
   1a1a0:	ldrd	r8, [sp, #16]
   1a1a4:	ldrd	sl, [sp, #24]
   1a1a8:	add	sp, sp, #32
   1a1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1b0:	ldrd	r2, [sp, #48]	; 0x30
   1a1b4:	ldr	r1, [sp, #44]	; 0x2c
   1a1b8:	cmp	r1, #0
   1a1bc:	beq	1a200 <_start@@Base+0x5c00>
   1a1c0:	cmp	r3, #0
   1a1c4:	cmpeq	r2, #-2147483648	; 0x80000000
   1a1c8:	rsbls	r3, r2, #0
   1a1cc:	strls	r3, [sp, #40]	; 0x28
   1a1d0:	bls	1a1f0 <_start@@Base+0x5bf0>
   1a1d4:	mov	r3, #8
   1a1d8:	mov	r2, r5
   1a1dc:	mov	r1, r0
   1a1e0:	mov	r0, r6
   1a1e4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a1e8:	cmp	r4, r0
   1a1ec:	beq	1a230 <_start@@Base+0x5c30>
   1a1f0:	ldr	r3, [sp, #40]	; 0x28
   1a1f4:	ldr	r2, [sp, #24]
   1a1f8:	str	r3, [r2]
   1a1fc:	b	1a25c <_start@@Base+0x5c5c>
   1a200:	mvn	sl, #-2147483648	; 0x80000000
   1a204:	mov	fp, #0
   1a208:	cmp	r3, fp
   1a20c:	cmpeq	r2, sl
   1a210:	strls	r2, [sp, #40]	; 0x28
   1a214:	bls	1a1f0 <_start@@Base+0x5bf0>
   1a218:	mov	r3, #7
   1a21c:	mov	r2, r5
   1a220:	mov	r1, r0
   1a224:	mov	r0, r6
   1a228:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a22c:	b	1a1e8 <_start@@Base+0x5be8>
   1a230:	mov	r4, r0
   1a234:	b	1a11c <_start@@Base+0x5b1c>
   1a238:	mov	r2, r5
   1a23c:	mov	r1, r0
   1a240:	mov	r0, r6
   1a244:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a248:	b	1a25c <_start@@Base+0x5c5c>
   1a24c:	mov	r2, r5
   1a250:	mov	r1, r4
   1a254:	mov	r0, r6
   1a258:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a25c:	sub	r3, r5, r0
   1a260:	cmp	r3, #1
   1a264:	ble	1a278 <_start@@Base+0x5c78>
   1a268:	ldrb	r3, [r0]
   1a26c:	cmp	r3, #32
   1a270:	bhi	1a288 <_start@@Base+0x5c88>
   1a274:	beq	1a334 <_start@@Base+0x5d34>
   1a278:	mov	r2, r5
   1a27c:	mov	r1, r0
   1a280:	mov	r0, r6
   1a284:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1a288:	cmp	r5, r0
   1a28c:	moveq	r3, #0
   1a290:	streq	r3, [sp, #36]	; 0x24
   1a294:	moveq	r4, r0
   1a298:	beq	1a2d4 <_start@@Base+0x5cd4>
   1a29c:	ldrb	r3, [r0]
   1a2a0:	cmp	r3, #44	; 0x2c
   1a2a4:	beq	1a3a0 <_start@@Base+0x5da0>
   1a2a8:	mov	r3, #0
   1a2ac:	str	r3, [sp, #36]	; 0x24
   1a2b0:	ldrb	r3, [r0]
   1a2b4:	cmp	r3, #125	; 0x7d
   1a2b8:	beq	1a354 <_start@@Base+0x5d54>
   1a2bc:	mov	r3, #10
   1a2c0:	mov	r2, r5
   1a2c4:	mov	r1, r0
   1a2c8:	mov	r0, r6
   1a2cc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a2d0:	mov	r4, r0
   1a2d4:	ldr	r3, [sp, #36]	; 0x24
   1a2d8:	cmp	r3, #0
   1a2dc:	beq	1a15c <_start@@Base+0x5b5c>
   1a2e0:	cmp	r5, r4
   1a2e4:	beq	1a2f8 <_start@@Base+0x5cf8>
   1a2e8:	ldrb	r3, [r4]
   1a2ec:	cmp	r3, #34	; 0x22
   1a2f0:	addeq	r4, r4, #1
   1a2f4:	bne	19ee0 <_start@@Base+0x58e0>
   1a2f8:	sub	r3, r5, r4
   1a2fc:	cmp	r3, #8
   1a300:	bhi	19efc <_start@@Base+0x58fc>
   1a304:	sub	r3, r3, #1
   1a308:	cmp	r3, #7
   1a30c:	ldrls	pc, [pc, r3, lsl #2]
   1a310:	b	19ffc <_start@@Base+0x59fc>
   1a314:	strdeq	r9, [r1], -r0
   1a318:	andeq	r9, r1, r4, ror #31
   1a31c:	ldrdeq	r9, [r1], -r8
   1a320:	andeq	r9, r1, ip, asr #31
   1a324:	andeq	r9, r1, r0, asr #31
   1a328:			; <UNDEFINED> instruction: 0x00019fb4
   1a32c:	andeq	r9, r1, r8, lsr #31
   1a330:	strdeq	r9, [r1], -ip
   1a334:	ldrb	r3, [r0, #1]
   1a338:	cmp	r3, #32
   1a33c:	addhi	r0, r0, #1
   1a340:	bls	1a278 <_start@@Base+0x5c78>
   1a344:	b	1a288 <_start@@Base+0x5c88>
   1a348:	cmpvc	pc, #1342177286	; 0x50000006
   1a34c:	rsbvs	r6, pc, #428	; 0x1ac
   1a350:	andeq	r4, r5, r8, lsl #1
   1a354:	add	r4, r0, #1
   1a358:	sub	r3, r5, r4
   1a35c:	cmp	r3, #1
   1a360:	ble	1a374 <_start@@Base+0x5d74>
   1a364:	ldrb	r3, [r0, #1]
   1a368:	cmp	r3, #32
   1a36c:	bhi	1a2d4 <_start@@Base+0x5cd4>
   1a370:	beq	1a38c <_start@@Base+0x5d8c>
   1a374:	mov	r2, r5
   1a378:	mov	r1, r4
   1a37c:	mov	r0, r6
   1a380:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1a384:	mov	r4, r0
   1a388:	b	1a2d4 <_start@@Base+0x5cd4>
   1a38c:	ldrb	r3, [r0, #2]
   1a390:	cmp	r3, #32
   1a394:	addhi	r4, r0, #2
   1a398:	bls	1a374 <_start@@Base+0x5d74>
   1a39c:	b	1a2d4 <_start@@Base+0x5cd4>
   1a3a0:	add	r4, r0, #1
   1a3a4:	sub	r3, r5, r4
   1a3a8:	cmp	r3, #1
   1a3ac:	ble	1a3c0 <_start@@Base+0x5dc0>
   1a3b0:	ldrb	r3, [r0, #1]
   1a3b4:	cmp	r3, #32
   1a3b8:	bhi	1a3d4 <_start@@Base+0x5dd4>
   1a3bc:	beq	1a410 <_start@@Base+0x5e10>
   1a3c0:	mov	r2, r5
   1a3c4:	mov	r1, r4
   1a3c8:	mov	r0, r6
   1a3cc:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1a3d0:	mov	r4, r0
   1a3d4:	cmp	r5, r4
   1a3d8:	beq	1a424 <_start@@Base+0x5e24>
   1a3dc:	ldrb	r3, [r4]
   1a3e0:	cmp	r3, #125	; 0x7d
   1a3e4:	movne	r3, #1
   1a3e8:	strne	r3, [sp, #36]	; 0x24
   1a3ec:	bne	1a2d4 <_start@@Base+0x5cd4>
   1a3f0:	mov	r3, #0
   1a3f4:	str	r3, [sp, #36]	; 0x24
   1a3f8:	mov	r2, r5
   1a3fc:	add	r1, r4, #1
   1a400:	mov	r0, r6
   1a404:	bl	1809c <_start@@Base+0x3a9c>
   1a408:	mov	r4, r0
   1a40c:	b	1a2d4 <_start@@Base+0x5cd4>
   1a410:	ldrb	r3, [r0, #2]
   1a414:	cmp	r3, #32
   1a418:	addhi	r4, r0, #2
   1a41c:	bls	1a3c0 <_start@@Base+0x5dc0>
   1a420:	b	1a3d4 <_start@@Base+0x5dd4>
   1a424:	mov	r3, #0
   1a428:	str	r3, [sp, #36]	; 0x24
   1a42c:	mov	r3, #10
   1a430:	mov	r2, r5
   1a434:	mov	r1, r4
   1a438:	mov	r0, r6
   1a43c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a440:	mov	r4, r0
   1a444:	b	1a2d4 <_start@@Base+0x5cd4>
   1a448:	strd	r4, [sp, #-16]!
   1a44c:	str	r6, [sp, #8]
   1a450:	str	lr, [sp, #12]
   1a454:	mov	r5, r0
   1a458:	mov	r4, r2
   1a45c:	mov	r6, r3
   1a460:	sub	r3, r2, r1
   1a464:	cmp	r3, #1
   1a468:	ble	1a47c <_start@@Base+0x5e7c>
   1a46c:	ldrb	r3, [r1]
   1a470:	cmp	r3, #32
   1a474:	bhi	1a48c <_start@@Base+0x5e8c>
   1a478:	beq	1a4e0 <_start@@Base+0x5ee0>
   1a47c:	mov	r2, r4
   1a480:	mov	r0, r5
   1a484:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1a488:	mov	r1, r0
   1a48c:	cmp	r4, r1
   1a490:	moveq	r3, #0
   1a494:	streq	r3, [r6]
   1a498:	moveq	r0, r1
   1a49c:	beq	1a4d0 <_start@@Base+0x5ed0>
   1a4a0:	ldrb	r3, [r1]
   1a4a4:	cmp	r3, #44	; 0x2c
   1a4a8:	beq	1a53c <_start@@Base+0x5f3c>
   1a4ac:	mov	r3, #0
   1a4b0:	str	r3, [r6]
   1a4b4:	ldrb	r3, [r1]
   1a4b8:	cmp	r3, #125	; 0x7d
   1a4bc:	beq	1a4f4 <_start@@Base+0x5ef4>
   1a4c0:	mov	r3, #10
   1a4c4:	mov	r2, r4
   1a4c8:	mov	r0, r5
   1a4cc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a4d0:	ldrd	r4, [sp]
   1a4d4:	ldr	r6, [sp, #8]
   1a4d8:	add	sp, sp, #12
   1a4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4e0:	ldrb	r3, [r1, #1]
   1a4e4:	cmp	r3, #32
   1a4e8:	addhi	r1, r1, #1
   1a4ec:	bls	1a47c <_start@@Base+0x5e7c>
   1a4f0:	b	1a48c <_start@@Base+0x5e8c>
   1a4f4:	add	r0, r1, #1
   1a4f8:	sub	r3, r4, r0
   1a4fc:	cmp	r3, #1
   1a500:	ble	1a514 <_start@@Base+0x5f14>
   1a504:	ldrb	r3, [r1, #1]
   1a508:	cmp	r3, #32
   1a50c:	bhi	1a4d0 <_start@@Base+0x5ed0>
   1a510:	beq	1a528 <_start@@Base+0x5f28>
   1a514:	mov	r2, r4
   1a518:	mov	r1, r0
   1a51c:	mov	r0, r5
   1a520:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1a524:	b	1a4d0 <_start@@Base+0x5ed0>
   1a528:	ldrb	r3, [r1, #2]
   1a52c:	cmp	r3, #32
   1a530:	addhi	r0, r1, #2
   1a534:	bls	1a514 <_start@@Base+0x5f14>
   1a538:	b	1a4d0 <_start@@Base+0x5ed0>
   1a53c:	mov	r2, r4
   1a540:	add	r1, r1, #1
   1a544:	mov	r0, r5
   1a548:	bl	1809c <_start@@Base+0x3a9c>
   1a54c:	cmp	r4, r0
   1a550:	beq	1a584 <_start@@Base+0x5f84>
   1a554:	ldrb	r3, [r0]
   1a558:	cmp	r3, #125	; 0x7d
   1a55c:	movne	r3, #1
   1a560:	strne	r3, [r6]
   1a564:	bne	1a4d0 <_start@@Base+0x5ed0>
   1a568:	mov	r3, #0
   1a56c:	str	r3, [r6]
   1a570:	mov	r2, r4
   1a574:	add	r1, r0, #1
   1a578:	mov	r0, r5
   1a57c:	bl	1809c <_start@@Base+0x3a9c>
   1a580:	b	1a4d0 <_start@@Base+0x5ed0>
   1a584:	mov	r3, #0
   1a588:	str	r3, [r6]
   1a58c:	mov	r3, #10
   1a590:	mov	r2, r0
   1a594:	mov	r1, r0
   1a598:	mov	r0, r5
   1a59c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a5a0:	b	1a4d0 <_start@@Base+0x5ed0>
   1a5a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a5a8:	strd	r6, [sp, #8]
   1a5ac:	strd	r8, [sp, #16]
   1a5b0:	strd	sl, [sp, #24]
   1a5b4:	str	lr, [sp, #32]
   1a5b8:	sub	sp, sp, #116	; 0x74
   1a5bc:	mov	r8, r0
   1a5c0:	mov	r4, r1
   1a5c4:	mov	r5, r2
   1a5c8:	mov	r9, r3
   1a5cc:	mov	r3, #0
   1a5d0:	str	r3, [r9]
   1a5d4:	mov	r1, #10
   1a5d8:	ldr	r0, [r0]
   1a5dc:	bl	270b4 <flatcc_builder_start_table@@Base>
   1a5e0:	cmp	r0, #0
   1a5e4:	beq	1a620 <_start@@Base+0x6020>
   1a5e8:	mov	r3, #33	; 0x21
   1a5ec:	mov	r2, r5
   1a5f0:	mov	r1, r4
   1a5f4:	mov	r0, r8
   1a5f8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a5fc:	mov	r4, r0
   1a600:	mov	r0, r4
   1a604:	add	sp, sp, #116	; 0x74
   1a608:	ldrd	r4, [sp]
   1a60c:	ldrd	r6, [sp, #8]
   1a610:	ldrd	r8, [sp, #16]
   1a614:	ldrd	sl, [sp, #24]
   1a618:	add	sp, sp, #32
   1a61c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a620:	add	r3, sp, #104	; 0x68
   1a624:	str	r3, [sp]
   1a628:	mov	r3, #5
   1a62c:	mov	r2, r5
   1a630:	mov	r1, r4
   1a634:	mov	r0, r8
   1a638:	bl	2ee74 <flatcc_json_parser_prepare_unions@@Base>
   1a63c:	cmp	r5, r0
   1a640:	beq	1a5e8 <_start@@Base+0x5fe8>
   1a644:	add	r3, sp, #108	; 0x6c
   1a648:	mov	r2, r5
   1a64c:	mov	r1, r4
   1a650:	mov	r0, r8
   1a654:	bl	1966c <_start@@Base+0x506c>
   1a658:	mov	r4, r0
   1a65c:	ldr	r3, [sp, #108]	; 0x6c
   1a660:	cmp	r3, #0
   1a664:	beq	1af18 <_start@@Base+0x6918>
   1a668:	add	r7, pc, #864	; 0x360
   1a66c:	ldrd	r6, [r7]
   1a670:	strd	sl, [sp, #24]
   1a674:	b	1a900 <_start@@Base+0x6300>
   1a678:	mov	r3, #5
   1a67c:	mov	r2, r5
   1a680:	mov	r1, r4
   1a684:	mov	r0, r8
   1a688:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1a68c:	mov	r4, r0
   1a690:	b	1a918 <_start@@Base+0x6318>
   1a694:	add	r4, r4, #8
   1a698:	mov	r1, r5
   1a69c:	mov	r0, r4
   1a6a0:	bl	146f0 <_start@@Base+0xf0>
   1a6a4:	bic	r3, r0, #255	; 0xff
   1a6a8:	str	r3, [sp, #48]	; 0x30
   1a6ac:	str	r1, [sp, #52]	; 0x34
   1a6b0:	add	r3, pc, #800	; 0x320
   1a6b4:	ldrd	r2, [r3]
   1a6b8:	ldrd	sl, [sp, #48]	; 0x30
   1a6bc:	cmp	fp, r3
   1a6c0:	cmpeq	sl, r2
   1a6c4:	beq	1a710 <_start@@Base+0x6110>
   1a6c8:	mov	r3, #0
   1a6cc:	str	r3, [sp, #24]
   1a6d0:	lsr	r3, r1, #16
   1a6d4:	lsl	r3, r3, #16
   1a6d8:	str	r3, [sp, #28]
   1a6dc:	mov	r2, #0
   1a6e0:	mov	r3, #0
   1a6e4:	movt	r3, #29556	; 0x7374
   1a6e8:	ldrd	r0, [sp, #24]
   1a6ec:	cmp	r1, r3
   1a6f0:	cmpeq	r0, r2
   1a6f4:	beq	1a780 <_start@@Base+0x6180>
   1a6f8:	mov	r2, r5
   1a6fc:	mov	r1, r4
   1a700:	mov	r0, r8
   1a704:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a708:	mov	r1, r0
   1a70c:	b	1a8e0 <_start@@Base+0x62e0>
   1a710:	mov	r3, #7
   1a714:	mov	r2, r5
   1a718:	mov	r1, r4
   1a71c:	mov	r0, r8
   1a720:	bl	19da4 <_start@@Base+0x57a4>
   1a724:	mov	r1, r0
   1a728:	cmp	r4, r0
   1a72c:	beq	1a76c <_start@@Base+0x616c>
   1a730:	movw	r3, #53864	; 0xd268
   1a734:	movt	r3, #1
   1a738:	str	r3, [sp, #12]
   1a73c:	ldr	r3, [pc, #692]	; 1a9f8 <_start@@Base+0x63f8>
   1a740:	str	r3, [sp, #8]
   1a744:	ldr	r3, [sp, #104]	; 0x68
   1a748:	str	r3, [sp, #4]
   1a74c:	mov	r3, #3
   1a750:	str	r3, [sp]
   1a754:	mov	r3, #1
   1a758:	mov	r2, r5
   1a75c:	mov	r0, r8
   1a760:	bl	2f0d8 <flatcc_json_parser_union_type@@Base>
   1a764:	mov	r1, r0
   1a768:	b	1a8e0 <_start@@Base+0x62e0>
   1a76c:	mov	r2, r5
   1a770:	mov	r0, r8
   1a774:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a778:	mov	r1, r0
   1a77c:	b	1a8e0 <_start@@Base+0x62e0>
   1a780:	mov	r3, #2
   1a784:	mov	r2, r5
   1a788:	mov	r1, r4
   1a78c:	mov	r0, r8
   1a790:	bl	19da4 <_start@@Base+0x57a4>
   1a794:	cmp	r4, r0
   1a798:	beq	1a7d4 <_start@@Base+0x61d4>
   1a79c:	movw	r3, #53864	; 0xd268
   1a7a0:	movt	r3, #1
   1a7a4:	str	r3, [sp, #8]
   1a7a8:	ldr	r3, [sp, #104]	; 0x68
   1a7ac:	str	r3, [sp, #4]
   1a7b0:	mov	r3, #3
   1a7b4:	str	r3, [sp]
   1a7b8:	mov	r3, #1
   1a7bc:	mov	r2, r5
   1a7c0:	mov	r1, r0
   1a7c4:	mov	r0, r8
   1a7c8:	bl	2ef70 <flatcc_json_parser_union@@Base>
   1a7cc:	mov	r1, r0
   1a7d0:	b	1a8e0 <_start@@Base+0x62e0>
   1a7d4:	mov	r2, r5
   1a7d8:	mov	r1, r0
   1a7dc:	mov	r0, r8
   1a7e0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a7e4:	mov	r1, r0
   1a7e8:	b	1a8e0 <_start@@Base+0x62e0>
   1a7ec:	add	r4, r4, #8
   1a7f0:	mov	r1, r5
   1a7f4:	mov	r0, r4
   1a7f8:	bl	146f0 <_start@@Base+0xf0>
   1a7fc:	mov	r3, #0
   1a800:	str	r3, [sp, #40]	; 0x28
   1a804:	lsr	r3, r1, #16
   1a808:	lsl	r3, r3, #16
   1a80c:	str	r3, [sp, #44]	; 0x2c
   1a810:	mov	r2, #0
   1a814:	mov	r3, #0
   1a818:	movt	r3, #28773	; 0x7065
   1a81c:	ldrd	r0, [sp, #40]	; 0x28
   1a820:	cmp	r1, r3
   1a824:	cmpeq	r0, r2
   1a828:	beq	1a844 <_start@@Base+0x6244>
   1a82c:	mov	r2, r5
   1a830:	mov	r1, r4
   1a834:	mov	r0, r8
   1a838:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a83c:	mov	r1, r0
   1a840:	b	1a8e0 <_start@@Base+0x62e0>
   1a844:	mov	r3, #2
   1a848:	mov	r2, r5
   1a84c:	mov	r1, r4
   1a850:	mov	r0, r8
   1a854:	bl	19da4 <_start@@Base+0x57a4>
   1a858:	cmp	r4, r0
   1a85c:	beq	1a8a0 <_start@@Base+0x62a0>
   1a860:	movw	r3, #53864	; 0xd268
   1a864:	movt	r3, #1
   1a868:	str	r3, [sp, #12]
   1a86c:	ldr	r3, [pc, #392]	; 1a9fc <_start@@Base+0x63fc>
   1a870:	str	r3, [sp, #8]
   1a874:	ldr	r3, [sp, #104]	; 0x68
   1a878:	str	r3, [sp, #4]
   1a87c:	mov	r3, #7
   1a880:	str	r3, [sp]
   1a884:	mov	r3, #3
   1a888:	mov	r2, r5
   1a88c:	mov	r1, r0
   1a890:	mov	r0, r8
   1a894:	bl	2f0d8 <flatcc_json_parser_union_type@@Base>
   1a898:	mov	r1, r0
   1a89c:	b	1a8e0 <_start@@Base+0x62e0>
   1a8a0:	mov	r2, r5
   1a8a4:	mov	r1, r0
   1a8a8:	mov	r0, r8
   1a8ac:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a8b0:	mov	r1, r0
   1a8b4:	b	1a8e0 <_start@@Base+0x62e0>
   1a8b8:	mov	r2, r5
   1a8bc:	mov	r0, r8
   1a8c0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a8c4:	mov	r1, r0
   1a8c8:	b	1a8e0 <_start@@Base+0x62e0>
   1a8cc:	mov	r2, r5
   1a8d0:	mov	r1, r4
   1a8d4:	mov	r0, r8
   1a8d8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1a8dc:	mov	r1, r0
   1a8e0:	add	r3, sp, #108	; 0x6c
   1a8e4:	mov	r2, r5
   1a8e8:	mov	r0, r8
   1a8ec:	bl	1a448 <_start@@Base+0x5e48>
   1a8f0:	mov	r4, r0
   1a8f4:	ldr	r3, [sp, #108]	; 0x6c
   1a8f8:	cmp	r3, #0
   1a8fc:	beq	1af18 <_start@@Base+0x6918>
   1a900:	cmp	r5, r4
   1a904:	beq	1a918 <_start@@Base+0x6318>
   1a908:	ldrb	r3, [r4]
   1a90c:	cmp	r3, #34	; 0x22
   1a910:	addeq	r4, r4, #1
   1a914:	bne	1a678 <_start@@Base+0x6078>
   1a918:	mov	r1, r5
   1a91c:	mov	r0, r4
   1a920:	bl	146f0 <_start@@Base+0xf0>
   1a924:	cmp	r1, r7
   1a928:	cmpeq	r0, r6
   1a92c:	bhi	1aa00 <_start@@Base+0x6400>
   1a930:	add	r3, pc, #168	; 0xa8
   1a934:	ldrd	r2, [r3]
   1a938:	cmp	r1, r3
   1a93c:	cmpeq	r0, r2
   1a940:	beq	1a694 <_start@@Base+0x6094>
   1a944:	add	r3, pc, #156	; 0x9c
   1a948:	ldrd	r2, [r3]
   1a94c:	cmp	r1, r3
   1a950:	cmpeq	r0, r2
   1a954:	beq	1a7ec <_start@@Base+0x61ec>
   1a958:	and	r3, r0, #-16777216	; 0xff000000
   1a95c:	str	r3, [sp, #32]
   1a960:	str	r1, [sp, #36]	; 0x24
   1a964:	add	r3, pc, #132	; 0x84
   1a968:	ldrd	r2, [r3]
   1a96c:	ldrd	r0, [sp, #32]
   1a970:	cmp	r1, r3
   1a974:	cmpeq	r0, r2
   1a978:	bne	1a8cc <_start@@Base+0x62cc>
   1a97c:	mov	r3, #5
   1a980:	mov	r2, r5
   1a984:	mov	r1, r4
   1a988:	mov	r0, r8
   1a98c:	bl	19da4 <_start@@Base+0x57a4>
   1a990:	mov	r1, r0
   1a994:	cmp	r4, r0
   1a998:	beq	1a8b8 <_start@@Base+0x62b8>
   1a99c:	movw	r3, #53864	; 0xd268
   1a9a0:	movt	r3, #1
   1a9a4:	str	r3, [sp, #8]
   1a9a8:	ldr	r3, [sp, #104]	; 0x68
   1a9ac:	str	r3, [sp, #4]
   1a9b0:	mov	r3, #7
   1a9b4:	str	r3, [sp]
   1a9b8:	mov	r3, #3
   1a9bc:	mov	r2, r5
   1a9c0:	mov	r0, r8
   1a9c4:	bl	2ef70 <flatcc_json_parser_union@@Base>
   1a9c8:	mov	r1, r0
   1a9cc:	b	1a8e0 <_start@@Base+0x62e0>
   1a9d0:	cmnvs	r3, r4, ror #8
   1a9d4:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a9d8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a9dc:	cmnvc	r4, #116, 30	; 0x1d0
   1a9e0:	strbvs	r6, [pc, -r9, ror #28]!
   1a9e4:	cmnvs	lr, r1, ror #8
   1a9e8:	svcvs	0x005f7479
   1a9ec:	cmnvs	r1, #6464	; 0x1940
   1a9f0:	svcvs	0x00000000
   1a9f4:	cmnvs	r1, #6464	; 0x1940
   1a9f8:	muleq	r5, r4, r0
   1a9fc:	andeq	r4, r5, r4, lsr #1
   1aa00:	add	r3, pc, #968	; 0x3c8
   1aa04:	ldrd	r2, [r3]
   1aa08:	cmp	r1, r3
   1aa0c:	cmpeq	r0, r2
   1aa10:	bhi	1aba4 <_start@@Base+0x65a4>
   1aa14:	add	r3, pc, #956	; 0x3bc
   1aa18:	ldrd	r2, [r3]
   1aa1c:	cmp	r1, r3
   1aa20:	cmpeq	r0, r2
   1aa24:	bne	1ab8c <_start@@Base+0x658c>
   1aa28:	add	r4, r4, #8
   1aa2c:	mov	r1, r5
   1aa30:	mov	r0, r4
   1aa34:	bl	146f0 <_start@@Base+0xf0>
   1aa38:	bic	r3, r0, #255	; 0xff
   1aa3c:	str	r3, [sp, #72]	; 0x48
   1aa40:	str	r1, [sp, #76]	; 0x4c
   1aa44:	add	r3, pc, #916	; 0x394
   1aa48:	ldrd	r2, [r3]
   1aa4c:	ldrd	sl, [sp, #72]	; 0x48
   1aa50:	cmp	fp, r3
   1aa54:	cmpeq	sl, r2
   1aa58:	beq	1aaa4 <_start@@Base+0x64a4>
   1aa5c:	mov	r3, #0
   1aa60:	str	r3, [sp, #56]	; 0x38
   1aa64:	lsr	r3, r1, #16
   1aa68:	lsl	r3, r3, #16
   1aa6c:	str	r3, [sp, #60]	; 0x3c
   1aa70:	mov	r2, #0
   1aa74:	mov	r3, #0
   1aa78:	movt	r3, #29299	; 0x7273
   1aa7c:	ldrd	r0, [sp, #56]	; 0x38
   1aa80:	cmp	r1, r3
   1aa84:	cmpeq	r0, r2
   1aa88:	beq	1ab24 <_start@@Base+0x6524>
   1aa8c:	mov	r2, r5
   1aa90:	mov	r1, r4
   1aa94:	mov	r0, r8
   1aa98:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1aa9c:	mov	r1, r0
   1aaa0:	b	1a8e0 <_start@@Base+0x62e0>
   1aaa4:	mov	r3, #7
   1aaa8:	mov	r2, r5
   1aaac:	mov	r1, r4
   1aab0:	mov	r0, r8
   1aab4:	bl	19da4 <_start@@Base+0x57a4>
   1aab8:	cmp	r4, r0
   1aabc:	beq	1ab0c <_start@@Base+0x650c>
   1aac0:	movw	r3, #18420	; 0x47f4
   1aac4:	movt	r3, #1
   1aac8:	str	r3, [sp, #16]
   1aacc:	movw	r3, #53864	; 0xd268
   1aad0:	movt	r3, #1
   1aad4:	str	r3, [sp, #12]
   1aad8:	ldr	r3, [pc, #824]	; 1ae18 <_start@@Base+0x6818>
   1aadc:	str	r3, [sp, #8]
   1aae0:	ldr	r3, [sp, #104]	; 0x68
   1aae4:	str	r3, [sp, #4]
   1aae8:	mov	r3, #9
   1aaec:	str	r3, [sp]
   1aaf0:	mov	r3, #4
   1aaf4:	mov	r2, r5
   1aaf8:	mov	r1, r0
   1aafc:	mov	r0, r8
   1ab00:	bl	2f408 <flatcc_json_parser_union_type_vector@@Base>
   1ab04:	mov	r1, r0
   1ab08:	b	1a8e0 <_start@@Base+0x62e0>
   1ab0c:	mov	r2, r5
   1ab10:	mov	r1, r0
   1ab14:	mov	r0, r8
   1ab18:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ab1c:	mov	r1, r0
   1ab20:	b	1a8e0 <_start@@Base+0x62e0>
   1ab24:	mov	r3, #2
   1ab28:	mov	r2, r5
   1ab2c:	mov	r1, r4
   1ab30:	mov	r0, r8
   1ab34:	bl	19da4 <_start@@Base+0x57a4>
   1ab38:	mov	r1, r0
   1ab3c:	cmp	r4, r0
   1ab40:	beq	1ab78 <_start@@Base+0x6578>
   1ab44:	movw	r3, #53864	; 0xd268
   1ab48:	movt	r3, #1
   1ab4c:	str	r3, [sp, #8]
   1ab50:	ldr	r3, [sp, #104]	; 0x68
   1ab54:	str	r3, [sp, #4]
   1ab58:	mov	r3, #9
   1ab5c:	str	r3, [sp]
   1ab60:	mov	r3, #4
   1ab64:	mov	r2, r5
   1ab68:	mov	r0, r8
   1ab6c:	bl	2f31c <flatcc_json_parser_union_vector@@Base>
   1ab70:	mov	r1, r0
   1ab74:	b	1a8e0 <_start@@Base+0x62e0>
   1ab78:	mov	r2, r5
   1ab7c:	mov	r0, r8
   1ab80:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ab84:	mov	r1, r0
   1ab88:	b	1a8e0 <_start@@Base+0x62e0>
   1ab8c:	mov	r2, r5
   1ab90:	mov	r1, r4
   1ab94:	mov	r0, r8
   1ab98:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ab9c:	mov	r1, r0
   1aba0:	b	1a8e0 <_start@@Base+0x62e0>
   1aba4:	add	r3, pc, #572	; 0x23c
   1aba8:	ldrd	r2, [r3]
   1abac:	cmp	r1, r3
   1abb0:	cmpeq	r0, r2
   1abb4:	beq	1ac3c <_start@@Base+0x663c>
   1abb8:	add	r3, pc, #560	; 0x230
   1abbc:	ldrd	r2, [r3]
   1abc0:	cmp	r1, r3
   1abc4:	cmpeq	r0, r2
   1abc8:	bne	1af00 <_start@@Base+0x6900>
   1abcc:	add	r4, r4, #8
   1abd0:	mov	r1, r5
   1abd4:	mov	r0, r4
   1abd8:	bl	146f0 <_start@@Base+0xf0>
   1abdc:	lsr	r3, r0, #16
   1abe0:	lsl	r3, r3, #16
   1abe4:	str	r3, [sp, #64]	; 0x40
   1abe8:	str	r1, [sp, #68]	; 0x44
   1abec:	add	r3, pc, #516	; 0x204
   1abf0:	ldrd	r2, [r3]
   1abf4:	ldrd	sl, [sp, #64]	; 0x40
   1abf8:	cmp	fp, r3
   1abfc:	cmpeq	sl, r2
   1ac00:	beq	1ae24 <_start@@Base+0x6824>
   1ac04:	mov	r3, #0
   1ac08:	str	r3, [sp, #88]	; 0x58
   1ac0c:	and	r3, r1, #-16777216	; 0xff000000
   1ac10:	str	r3, [sp, #92]	; 0x5c
   1ac14:	ldrd	r2, [sp, #88]	; 0x58
   1ac18:	cmp	r3, #1795162112	; 0x6b000000
   1ac1c:	cmpeq	r2, #0
   1ac20:	beq	1ae98 <_start@@Base+0x6898>
   1ac24:	mov	r2, r5
   1ac28:	mov	r1, r4
   1ac2c:	mov	r0, r8
   1ac30:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ac34:	mov	r1, r0
   1ac38:	b	1a8e0 <_start@@Base+0x62e0>
   1ac3c:	add	r3, r4, #8
   1ac40:	mov	sl, r3
   1ac44:	mov	r1, r5
   1ac48:	mov	r0, r3
   1ac4c:	bl	146f0 <_start@@Base+0xf0>
   1ac50:	add	r3, pc, #424	; 0x1a8
   1ac54:	ldrd	r2, [r3]
   1ac58:	cmp	r1, r3
   1ac5c:	cmpeq	r0, r2
   1ac60:	beq	1aca4 <_start@@Base+0x66a4>
   1ac64:	lsr	r3, r0, #16
   1ac68:	lsl	r3, r3, #16
   1ac6c:	str	r3, [sp, #80]	; 0x50
   1ac70:	str	r1, [sp, #84]	; 0x54
   1ac74:	add	r3, pc, #396	; 0x18c
   1ac78:	ldrd	r2, [r3]
   1ac7c:	ldrd	r0, [sp, #80]	; 0x50
   1ac80:	cmp	r1, r3
   1ac84:	cmpeq	r0, r2
   1ac88:	beq	1ad64 <_start@@Base+0x6764>
   1ac8c:	mov	r2, r5
   1ac90:	mov	r1, sl
   1ac94:	mov	r0, r8
   1ac98:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ac9c:	mov	r1, r0
   1aca0:	b	1a8e0 <_start@@Base+0x62e0>
   1aca4:	add	r4, r4, #16
   1aca8:	mov	r1, r5
   1acac:	mov	r0, r4
   1acb0:	bl	146f0 <_start@@Base+0xf0>
   1acb4:	mov	r3, #0
   1acb8:	str	r3, [sp, #96]	; 0x60
   1acbc:	bic	r3, r1, #255	; 0xff
   1acc0:	str	r3, [sp, #100]	; 0x64
   1acc4:	add	r3, pc, #324	; 0x144
   1acc8:	ldrd	r2, [r3]
   1accc:	ldrd	r0, [sp, #96]	; 0x60
   1acd0:	cmp	r1, r3
   1acd4:	cmpeq	r0, r2
   1acd8:	beq	1acf4 <_start@@Base+0x66f4>
   1acdc:	mov	r2, r5
   1ace0:	mov	r1, r4
   1ace4:	mov	r0, r8
   1ace8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1acec:	mov	r1, r0
   1acf0:	b	1a8e0 <_start@@Base+0x62e0>
   1acf4:	mov	r3, #3
   1acf8:	mov	r2, r5
   1acfc:	mov	r1, r4
   1ad00:	mov	r0, r8
   1ad04:	bl	19da4 <_start@@Base+0x57a4>
   1ad08:	mov	r1, r0
   1ad0c:	cmp	r4, r0
   1ad10:	beq	1ad50 <_start@@Base+0x6750>
   1ad14:	movw	r3, #53864	; 0xd268
   1ad18:	movt	r3, #1
   1ad1c:	str	r3, [sp, #12]
   1ad20:	ldr	r3, [pc, #244]	; 1ae1c <_start@@Base+0x681c>
   1ad24:	str	r3, [sp, #8]
   1ad28:	ldr	r3, [sp, #104]	; 0x68
   1ad2c:	str	r3, [sp, #4]
   1ad30:	mov	r3, #1
   1ad34:	str	r3, [sp]
   1ad38:	mov	r3, #0
   1ad3c:	mov	r2, r5
   1ad40:	mov	r0, r8
   1ad44:	bl	2f0d8 <flatcc_json_parser_union_type@@Base>
   1ad48:	mov	r1, r0
   1ad4c:	b	1a8e0 <_start@@Base+0x62e0>
   1ad50:	mov	r2, r5
   1ad54:	mov	r0, r8
   1ad58:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ad5c:	mov	r1, r0
   1ad60:	b	1a8e0 <_start@@Base+0x62e0>
   1ad64:	mov	r3, #6
   1ad68:	mov	r2, r5
   1ad6c:	mov	r1, sl
   1ad70:	mov	r0, r8
   1ad74:	bl	19da4 <_start@@Base+0x57a4>
   1ad78:	cmp	sl, r0
   1ad7c:	beq	1adb8 <_start@@Base+0x67b8>
   1ad80:	movw	r3, #53864	; 0xd268
   1ad84:	movt	r3, #1
   1ad88:	str	r3, [sp, #8]
   1ad8c:	ldr	r3, [sp, #104]	; 0x68
   1ad90:	str	r3, [sp, #4]
   1ad94:	mov	r3, #1
   1ad98:	str	r3, [sp]
   1ad9c:	mov	r3, #0
   1ada0:	mov	r2, r5
   1ada4:	mov	r1, r0
   1ada8:	mov	r0, r8
   1adac:	bl	2ef70 <flatcc_json_parser_union@@Base>
   1adb0:	mov	r1, r0
   1adb4:	b	1a8e0 <_start@@Base+0x62e0>
   1adb8:	mov	r2, r5
   1adbc:	mov	r1, r0
   1adc0:	mov	r0, r8
   1adc4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1adc8:	mov	r1, r0
   1adcc:	b	1a8e0 <_start@@Base+0x62e0>
   1add0:	svcpl	0x00636860
   1add4:			; <UNDEFINED> instruction: 0x6d61696e
   1add8:	cmnvs	r3, r5, ror #8
   1addc:	cmnvs	r8, #-2147483620	; 0x8000001c
   1ade0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1ade4:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1ade8:	svcpl	0x00636861
   1adec:			; <UNDEFINED> instruction: 0x6d61696e
   1adf0:	svcpl	0x006b6963
   1adf4:	cmnvc	r9, #1694498816	; 0x65000000
   1adf8:	rsbvc	r0, r5, r0
   1adfc:	blvs	17f7fe8 <__bss_end__@@Base+0x17a3c9c>
   1ae00:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1ae04:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1ae08:	ldrbvs	r0, [r2, #-0]!
   1ae0c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1ae10:	andeq	r0, r0, r0
   1ae14:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1ae18:	strheq	r4, [r5], -r4	; <UNPREDICTABLE>
   1ae1c:	andeq	r4, r5, r4, asr #1
   1ae20:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   1ae24:	mov	r3, #6
   1ae28:	mov	r2, r5
   1ae2c:	mov	r1, r4
   1ae30:	mov	r0, r8
   1ae34:	bl	19da4 <_start@@Base+0x57a4>
   1ae38:	cmp	r4, r0
   1ae3c:	beq	1ae80 <_start@@Base+0x6880>
   1ae40:	movw	r3, #53864	; 0xd268
   1ae44:	movt	r3, #1
   1ae48:	str	r3, [sp, #12]
   1ae4c:	ldr	r3, [pc, #-52]	; 1ae20 <_start@@Base+0x6820>
   1ae50:	str	r3, [sp, #8]
   1ae54:	ldr	r3, [sp, #104]	; 0x68
   1ae58:	str	r3, [sp, #4]
   1ae5c:	mov	r3, #5
   1ae60:	str	r3, [sp]
   1ae64:	mov	r3, #2
   1ae68:	mov	r2, r5
   1ae6c:	mov	r1, r0
   1ae70:	mov	r0, r8
   1ae74:	bl	2f0d8 <flatcc_json_parser_union_type@@Base>
   1ae78:	mov	r1, r0
   1ae7c:	b	1a8e0 <_start@@Base+0x62e0>
   1ae80:	mov	r2, r5
   1ae84:	mov	r1, r0
   1ae88:	mov	r0, r8
   1ae8c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ae90:	mov	r1, r0
   1ae94:	b	1a8e0 <_start@@Base+0x62e0>
   1ae98:	mov	r3, #1
   1ae9c:	mov	r2, r5
   1aea0:	mov	r1, r4
   1aea4:	mov	r0, r8
   1aea8:	bl	19da4 <_start@@Base+0x57a4>
   1aeac:	mov	r1, r0
   1aeb0:	cmp	r4, r0
   1aeb4:	beq	1aeec <_start@@Base+0x68ec>
   1aeb8:	movw	r3, #53864	; 0xd268
   1aebc:	movt	r3, #1
   1aec0:	str	r3, [sp, #8]
   1aec4:	ldr	r3, [sp, #104]	; 0x68
   1aec8:	str	r3, [sp, #4]
   1aecc:	mov	r3, #5
   1aed0:	str	r3, [sp]
   1aed4:	mov	r3, #2
   1aed8:	mov	r2, r5
   1aedc:	mov	r0, r8
   1aee0:	bl	2ef70 <flatcc_json_parser_union@@Base>
   1aee4:	mov	r1, r0
   1aee8:	b	1a8e0 <_start@@Base+0x62e0>
   1aeec:	mov	r2, r5
   1aef0:	mov	r0, r8
   1aef4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1aef8:	mov	r1, r0
   1aefc:	b	1a8e0 <_start@@Base+0x62e0>
   1af00:	mov	r2, r5
   1af04:	mov	r1, r4
   1af08:	mov	r0, r8
   1af0c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1af10:	mov	r1, r0
   1af14:	b	1a8e0 <_start@@Base+0x62e0>
   1af18:	ldr	r3, [r8, #20]
   1af1c:	cmp	r3, #0
   1af20:	bne	1a5e8 <_start@@Base+0x5fe8>
   1af24:	ldr	r3, [sp, #104]	; 0x68
   1af28:	mov	r2, r5
   1af2c:	mov	r1, r4
   1af30:	mov	r0, r8
   1af34:	bl	2eef8 <flatcc_json_parser_finalize_unions@@Base>
   1af38:	mov	r4, r0
   1af3c:	ldr	r0, [r8]
   1af40:	bl	27b8c <flatcc_builder_end_table@@Base>
   1af44:	str	r0, [r9]
   1af48:	cmp	r0, #0
   1af4c:	bne	1a600 <_start@@Base+0x6000>
   1af50:	b	1a5e8 <_start@@Base+0x5fe8>
   1af54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1af58:	strd	r6, [sp, #8]
   1af5c:	strd	r8, [sp, #16]
   1af60:	strd	sl, [sp, #24]
   1af64:	str	lr, [sp, #32]
   1af68:	sub	sp, sp, #252	; 0xfc
   1af6c:	mov	r8, r0
   1af70:	mov	r4, r1
   1af74:	mov	r9, r2
   1af78:	mov	r2, r3
   1af7c:	str	r3, [sp, #172]	; 0xac
   1af80:	mov	r3, #0
   1af84:	str	r3, [r2]
   1af88:	mov	r1, #4
   1af8c:	ldr	r0, [r0]
   1af90:	bl	270b4 <flatcc_builder_start_table@@Base>
   1af94:	cmp	r0, #0
   1af98:	beq	1afd4 <_start@@Base+0x69d4>
   1af9c:	mov	r3, #33	; 0x21
   1afa0:	mov	r2, r9
   1afa4:	mov	r1, r4
   1afa8:	mov	r0, r8
   1afac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1afb0:	mov	r4, r0
   1afb4:	mov	r0, r4
   1afb8:	add	sp, sp, #252	; 0xfc
   1afbc:	ldrd	r4, [sp]
   1afc0:	ldrd	r6, [sp, #8]
   1afc4:	ldrd	r8, [sp, #16]
   1afc8:	ldrd	sl, [sp, #24]
   1afcc:	add	sp, sp, #32
   1afd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1afd4:	add	r3, sp, #236	; 0xec
   1afd8:	str	r3, [sp]
   1afdc:	mov	r3, #1
   1afe0:	mov	r2, r9
   1afe4:	mov	r1, r4
   1afe8:	mov	r0, r8
   1afec:	bl	2ee74 <flatcc_json_parser_prepare_unions@@Base>
   1aff0:	cmp	r9, r0
   1aff4:	beq	1af9c <_start@@Base+0x699c>
   1aff8:	add	r3, sp, #244	; 0xf4
   1affc:	mov	r2, r9
   1b000:	mov	r1, r4
   1b004:	mov	r0, r8
   1b008:	bl	1966c <_start@@Base+0x506c>
   1b00c:	mov	r4, r0
   1b010:	ldr	r3, [sp, #244]	; 0xf4
   1b014:	cmp	r3, #0
   1b018:	beq	1d194 <_start@@Base+0x8b94>
   1b01c:	mov	r5, r8
   1b020:	mov	r8, r9
   1b024:	b	1d03c <_start@@Base+0x8a3c>
   1b028:	mov	r3, #5
   1b02c:	mov	r2, r8
   1b030:	mov	r1, r4
   1b034:	mov	r0, r5
   1b038:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1b03c:	mov	r4, r0
   1b040:	b	1d054 <_start@@Base+0x8a54>
   1b044:	sub	r3, r3, #1
   1b048:	cmp	r3, #7
   1b04c:	ldrls	pc, [pc, r3, lsl #2]
   1b050:	b	1b0c8 <_start@@Base+0x6ac8>
   1b054:	strheq	fp, [r1], -ip
   1b058:	strheq	fp, [r1], -r0
   1b05c:	andeq	fp, r1, r4, lsr #1
   1b060:	muleq	r1, r8, r0
   1b064:	andeq	fp, r1, ip, lsl #1
   1b068:	andeq	fp, r1, r0, lsl #1
   1b06c:	andeq	fp, r1, r4, ror r0
   1b070:	andeq	sp, r1, r0, rrx
   1b074:	mov	r0, #0
   1b078:	mov	r1, #0
   1b07c:	b	1d068 <_start@@Base+0x8a68>
   1b080:	mov	r2, #0
   1b084:	mov	r3, r2
   1b088:	b	1d074 <_start@@Base+0x8a74>
   1b08c:	mov	r2, #0
   1b090:	mov	r3, r2
   1b094:	b	1d07c <_start@@Base+0x8a7c>
   1b098:	mov	r2, #0
   1b09c:	mov	r3, r2
   1b0a0:	b	1d084 <_start@@Base+0x8a84>
   1b0a4:	mov	r2, #0
   1b0a8:	mov	r3, r2
   1b0ac:	b	1d08c <_start@@Base+0x8a8c>
   1b0b0:	mov	r2, #0
   1b0b4:	mov	r3, r2
   1b0b8:	b	1d094 <_start@@Base+0x8a94>
   1b0bc:	mov	r2, #0
   1b0c0:	mov	r3, r2
   1b0c4:	b	1d09c <_start@@Base+0x8a9c>
   1b0c8:	mov	sl, #0
   1b0cc:	mov	fp, #0
   1b0d0:	b	1d0a8 <_start@@Base+0x8aa8>
   1b0d4:	add	r4, r4, #8
   1b0d8:	mov	r1, r8
   1b0dc:	mov	r0, r4
   1b0e0:	bl	146f0 <_start@@Base+0xf0>
   1b0e4:	mov	r3, #0
   1b0e8:	str	r3, [sp, #104]	; 0x68
   1b0ec:	str	r1, [sp, #108]	; 0x6c
   1b0f0:	add	r3, pc, #992	; 0x3e0
   1b0f4:	ldrd	r2, [r3]
   1b0f8:	ldrd	r0, [sp, #104]	; 0x68
   1b0fc:	cmp	r1, r3
   1b100:	cmpeq	r0, r2
   1b104:	beq	1b120 <_start@@Base+0x6b20>
   1b108:	mov	r2, r8
   1b10c:	mov	r1, r4
   1b110:	mov	r0, r5
   1b114:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1b118:	mov	r9, r0
   1b11c:	b	1d018 <_start@@Base+0x8a18>
   1b120:	mov	r3, #4
   1b124:	mov	r2, r8
   1b128:	mov	r1, r4
   1b12c:	mov	r0, r5
   1b130:	bl	19da4 <_start@@Base+0x57a4>
   1b134:	mov	r1, r0
   1b138:	cmp	r4, r0
   1b13c:	beq	1b188 <_start@@Base+0x6b88>
   1b140:	movw	r3, #18404	; 0x47e4
   1b144:	movt	r3, #1
   1b148:	str	r3, [sp, #16]
   1b14c:	movw	r3, #11468	; 0x2ccc
   1b150:	movt	r3, #2
   1b154:	str	r3, [sp, #12]
   1b158:	ldr	r3, [pc, #936]	; 1b508 <_start@@Base+0x6f08>
   1b15c:	str	r3, [sp, #8]
   1b160:	ldr	r3, [sp, #236]	; 0xec
   1b164:	str	r3, [sp, #4]
   1b168:	mov	r3, #3
   1b16c:	str	r3, [sp]
   1b170:	mov	r3, #0
   1b174:	mov	r2, r8
   1b178:	mov	r0, r5
   1b17c:	bl	2f408 <flatcc_json_parser_union_type_vector@@Base>
   1b180:	mov	r9, r0
   1b184:	b	1d018 <_start@@Base+0x8a18>
   1b188:	mov	r2, r8
   1b18c:	mov	r0, r5
   1b190:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1b194:	mov	r9, r0
   1b198:	b	1d018 <_start@@Base+0x8a18>
   1b19c:	mov	sl, #0
   1b1a0:	mov	fp, #0
   1b1a4:	b	1d0bc <_start@@Base+0x8abc>
   1b1a8:	mov	r3, #7
   1b1ac:	mov	r2, r8
   1b1b0:	mov	r1, r4
   1b1b4:	mov	r0, r5
   1b1b8:	bl	19da4 <_start@@Base+0x57a4>
   1b1bc:	cmp	r0, r4
   1b1c0:	beq	1d004 <_start@@Base+0x8a04>
   1b1c4:	movw	r3, #11468	; 0x2ccc
   1b1c8:	movt	r3, #2
   1b1cc:	str	r3, [sp, #8]
   1b1d0:	ldr	r3, [sp, #236]	; 0xec
   1b1d4:	str	r3, [sp, #4]
   1b1d8:	mov	r3, #3
   1b1dc:	str	r3, [sp]
   1b1e0:	mov	r3, #0
   1b1e4:	mov	r2, r8
   1b1e8:	mov	r1, r0
   1b1ec:	mov	r0, r5
   1b1f0:	bl	2f31c <flatcc_json_parser_union_vector@@Base>
   1b1f4:	mov	r9, r0
   1b1f8:	b	1d018 <_start@@Base+0x8a18>
   1b1fc:	mov	r3, #6
   1b200:	mov	r2, r8
   1b204:	mov	r1, r4
   1b208:	mov	r0, r5
   1b20c:	bl	19da4 <_start@@Base+0x57a4>
   1b210:	mov	r9, r0
   1b214:	cmp	r0, r4
   1b218:	beq	1cfd4 <_start@@Base+0x89d4>
   1b21c:	mov	r3, #0
   1b220:	str	r3, [sp, #240]	; 0xf0
   1b224:	mov	r1, #3
   1b228:	ldr	r0, [r5]
   1b22c:	bl	270b4 <flatcc_builder_start_table@@Base>
   1b230:	cmp	r0, #0
   1b234:	bne	1bc3c <_start@@Base+0x763c>
   1b238:	add	r3, sp, #212	; 0xd4
   1b23c:	mov	r2, r8
   1b240:	mov	r1, r9
   1b244:	mov	r0, r5
   1b248:	bl	1966c <_start@@Base+0x506c>
   1b24c:	mov	r9, r0
   1b250:	strd	sl, [sp, #144]	; 0x90
   1b254:	mov	r6, r5
   1b258:	b	1ce44 <_start@@Base+0x8844>
   1b25c:	mov	r3, #5
   1b260:	mov	r2, r8
   1b264:	mov	r1, r9
   1b268:	mov	r0, r6
   1b26c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1b270:	mov	r9, r0
   1b274:	b	1ce68 <_start@@Base+0x8868>
   1b278:	ldrb	r0, [r9, #7]
   1b27c:	mov	r1, #0
   1b280:	ldrb	r2, [r9, #6]
   1b284:	orr	r2, r0, r2, lsl #8
   1b288:	mov	r3, r1
   1b28c:	ldrb	r0, [r9, #5]
   1b290:	orr	r2, r2, r0, lsl #16
   1b294:	ldrb	r0, [r9, #4]
   1b298:	orr	r2, r2, r0, lsl #24
   1b29c:	ldrb	r0, [r9, #3]
   1b2a0:	orr	r3, r3, r0
   1b2a4:	ldrb	r0, [r9, #2]
   1b2a8:	orr	r3, r3, r0, lsl #8
   1b2ac:	ldrb	r0, [r9, #1]
   1b2b0:	orr	r3, r3, r0, lsl #16
   1b2b4:	ldrb	r0, [r9]
   1b2b8:	str	r2, [sp, #24]
   1b2bc:	orr	r3, r3, r0, lsl #24
   1b2c0:	str	r3, [sp, #28]
   1b2c4:	ldrd	r2, [sp, #24]
   1b2c8:	add	r1, pc, #528	; 0x210
   1b2cc:	ldrd	r0, [r1]
   1b2d0:	cmp	r3, r1
   1b2d4:	cmpeq	r2, r0
   1b2d8:	bne	1cdb8 <_start@@Base+0x87b8>
   1b2dc:	add	ip, r9, #8
   1b2e0:	sub	r3, r8, ip
   1b2e4:	cmp	r3, #8
   1b2e8:	bhi	1b380 <_start@@Base+0x6d80>
   1b2ec:	sub	r3, r3, #1
   1b2f0:	cmp	r3, #7
   1b2f4:	ldrls	pc, [pc, r3, lsl #2]
   1b2f8:	b	1b4c4 <_start@@Base+0x6ec4>
   1b2fc:			; <UNDEFINED> instruction: 0x0001b4b8
   1b300:	andeq	fp, r1, ip, lsr #9
   1b304:	andeq	fp, r1, r0, lsr #9
   1b308:	muleq	r1, r4, r4
   1b30c:	andeq	fp, r1, r8, lsl #9
   1b310:	andeq	fp, r1, ip, ror r4
   1b314:	andeq	fp, r1, r0, ror r4
   1b318:	andeq	fp, r1, r0, lsl #7
   1b31c:	mov	r0, #0
   1b320:	mov	r1, #0
   1b324:	b	1b280 <_start@@Base+0x6c80>
   1b328:	mov	r2, #0
   1b32c:	mov	r3, r2
   1b330:	b	1b28c <_start@@Base+0x6c8c>
   1b334:	mov	r2, #0
   1b338:	mov	r3, r2
   1b33c:	b	1b294 <_start@@Base+0x6c94>
   1b340:	mov	r2, #0
   1b344:	mov	r3, r2
   1b348:	b	1b29c <_start@@Base+0x6c9c>
   1b34c:	mov	r2, #0
   1b350:	mov	r3, r2
   1b354:	b	1b2a4 <_start@@Base+0x6ca4>
   1b358:	mov	r2, #0
   1b35c:	mov	r3, r2
   1b360:	b	1b2ac <_start@@Base+0x6cac>
   1b364:	mov	r2, #0
   1b368:	mov	r3, r2
   1b36c:	b	1b2b4 <_start@@Base+0x6cb4>
   1b370:	mov	r2, #0
   1b374:	mov	r3, #0
   1b378:	strd	r2, [sp, #24]
   1b37c:	b	1b2c4 <_start@@Base+0x6cc4>
   1b380:	ldrb	r0, [r9, #15]
   1b384:	mov	r1, #0
   1b388:	ldrb	r2, [r9, #14]
   1b38c:	orr	r2, r0, r2, lsl #8
   1b390:	mov	r3, r1
   1b394:	ldrb	r0, [r9, #13]
   1b398:	orr	r2, r2, r0, lsl #16
   1b39c:	ldrb	r0, [r9, #12]
   1b3a0:	orr	r2, r2, r0, lsl #24
   1b3a4:	ldrb	r0, [r9, #11]
   1b3a8:	orr	r3, r3, r0
   1b3ac:	ldrb	r0, [r9, #10]
   1b3b0:	orr	r3, r3, r0, lsl #8
   1b3b4:	ldrb	r0, [r9, #9]
   1b3b8:	orr	r3, r3, r0, lsl #16
   1b3bc:	ldrb	r0, [r9, #8]
   1b3c0:	str	r2, [sp, #48]	; 0x30
   1b3c4:	orr	r3, r3, r0, lsl #24
   1b3c8:	str	r3, [sp, #52]	; 0x34
   1b3cc:	ldrd	r2, [sp, #48]	; 0x30
   1b3d0:	add	r1, pc, #272	; 0x110
   1b3d4:	ldrd	r0, [r1]
   1b3d8:	cmp	r3, r1
   1b3dc:	cmpeq	r2, r0
   1b3e0:	bne	1cda0 <_start@@Base+0x87a0>
   1b3e4:	add	r4, r9, #16
   1b3e8:	mov	r1, r8
   1b3ec:	mov	r0, r4
   1b3f0:	bl	146f0 <_start@@Base+0xf0>
   1b3f4:	lsr	r3, r0, #16
   1b3f8:	lsl	r3, r3, #16
   1b3fc:	str	r3, [sp, #56]	; 0x38
   1b400:	str	r1, [sp, #60]	; 0x3c
   1b404:	add	r3, pc, #228	; 0xe4
   1b408:	ldrd	r2, [r3]
   1b40c:	ldrd	sl, [sp, #56]	; 0x38
   1b410:	cmp	fp, r3
   1b414:	cmpeq	sl, r2
   1b418:	beq	1b50c <_start@@Base+0x6f0c>
   1b41c:	and	r3, r0, #-16777216	; 0xff000000
   1b420:	str	r3, [sp, #120]	; 0x78
   1b424:	str	r1, [sp, #124]	; 0x7c
   1b428:	add	r3, pc, #200	; 0xc8
   1b42c:	ldrd	r2, [r3]
   1b430:	ldrd	r0, [sp, #120]	; 0x78
   1b434:	cmp	r1, r3
   1b438:	cmpeq	r0, r2
   1b43c:	beq	1bbec <_start@@Base+0x75ec>
   1b440:	add	r3, pc, #184	; 0xb8
   1b444:	ldrd	r2, [r3]
   1b448:	ldrd	r0, [sp, #56]	; 0x38
   1b44c:	cmp	r1, r3
   1b450:	cmpeq	r0, r2
   1b454:	beq	1c64c <_start@@Base+0x804c>
   1b458:	mov	r2, r8
   1b45c:	mov	r1, r4
   1b460:	mov	r0, r6
   1b464:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1b468:	mov	r9, r0
   1b46c:	b	1cdcc <_start@@Base+0x87cc>
   1b470:	mov	r0, #0
   1b474:	mov	r1, #0
   1b478:	b	1b388 <_start@@Base+0x6d88>
   1b47c:	mov	r2, #0
   1b480:	mov	r3, r2
   1b484:	b	1b394 <_start@@Base+0x6d94>
   1b488:	mov	r2, #0
   1b48c:	mov	r3, r2
   1b490:	b	1b39c <_start@@Base+0x6d9c>
   1b494:	mov	r2, #0
   1b498:	mov	r3, r2
   1b49c:	b	1b3a4 <_start@@Base+0x6da4>
   1b4a0:	mov	r2, #0
   1b4a4:	mov	r3, r2
   1b4a8:	b	1b3ac <_start@@Base+0x6dac>
   1b4ac:	mov	r2, #0
   1b4b0:	mov	r3, r2
   1b4b4:	b	1b3b4 <_start@@Base+0x6db4>
   1b4b8:	mov	r2, #0
   1b4bc:	mov	r3, r2
   1b4c0:	b	1b3bc <_start@@Base+0x6dbc>
   1b4c4:	mov	r2, #0
   1b4c8:	mov	r3, #0
   1b4cc:	strd	r2, [sp, #48]	; 0x30
   1b4d0:	b	1b3cc <_start@@Base+0x6dcc>
   1b4d4:	nop	{0}
   1b4d8:	andeq	r0, r0, r0
   1b4dc:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1b4e0:	bvs	1cf72a0 <__bss_end__@@Base+0x1ca2f54>
   1b4e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b4e8:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1b4ec:	rsbsvc	r6, r2, r6, ror #10
   1b4f0:	ldrvs	r0, [r2, -r0]!
   1b4f4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b4f8:	strvs	r0, [r0, -r0]
   1b4fc:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b500:	ldrvs	r0, [r3, -r0]!
   1b504:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b508:	andeq	r4, r5, r4, ror #1
   1b50c:	mov	r3, #6
   1b510:	mov	r2, r8
   1b514:	mov	r1, r4
   1b518:	mov	r0, r6
   1b51c:	bl	19da4 <_start@@Base+0x57a4>
   1b520:	mov	r9, r0
   1b524:	cmp	r4, r0
   1b528:	beq	1cd98 <_start@@Base+0x8798>
   1b52c:	mov	r1, #2
   1b530:	ldr	r0, [r6]
   1b534:	bl	270b4 <flatcc_builder_start_table@@Base>
   1b538:	cmp	r0, #0
   1b53c:	beq	1b560 <_start@@Base+0x6f60>
   1b540:	mov	r5, r6
   1b544:	mov	r3, #33	; 0x21
   1b548:	mov	r2, r8
   1b54c:	mov	r1, r9
   1b550:	mov	r0, r5
   1b554:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1b558:	mov	r9, r0
   1b55c:	b	1bc3c <_start@@Base+0x763c>
   1b560:	add	r3, sp, #220	; 0xdc
   1b564:	mov	r2, r8
   1b568:	mov	r1, r9
   1b56c:	mov	r0, r6
   1b570:	bl	1966c <_start@@Base+0x506c>
   1b574:	mov	r9, r0
   1b578:	add	r5, pc, #992	; 0x3e0
   1b57c:	ldrd	r4, [r5]
   1b580:	movw	r3, #16496	; 0x4070
   1b584:	movt	r3, #5
   1b588:	str	r3, [sp, #204]	; 0xcc
   1b58c:	add	r3, r3, #144	; 0x90
   1b590:	str	r3, [sp, #200]	; 0xc8
   1b594:	ldrd	sl, [sp, #192]	; 0xc0
   1b598:	b	1ba20 <_start@@Base+0x7420>
   1b59c:	mov	r3, #5
   1b5a0:	mov	r2, r8
   1b5a4:	mov	r1, r9
   1b5a8:	mov	r0, r6
   1b5ac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1b5b0:	mov	r9, r0
   1b5b4:	b	1ba44 <_start@@Base+0x7444>
   1b5b8:	ldrb	r0, [r9, #7]
   1b5bc:	mov	r1, #0
   1b5c0:	ldrb	r2, [r9, #6]
   1b5c4:	orr	r2, r0, r2, lsl #8
   1b5c8:	mov	r3, r1
   1b5cc:	ldrb	r0, [r9, #5]
   1b5d0:	orr	r2, r2, r0, lsl #16
   1b5d4:	ldrb	r0, [r9, #4]
   1b5d8:	orr	r2, r2, r0, lsl #24
   1b5dc:	ldrb	r0, [r9, #3]
   1b5e0:	orr	r3, r3, r0
   1b5e4:	ldrb	r0, [r9, #2]
   1b5e8:	orr	r3, r3, r0, lsl #8
   1b5ec:	ldrb	r0, [r9, #1]
   1b5f0:	orr	r3, r3, r0, lsl #16
   1b5f4:	ldrb	r0, [r9]
   1b5f8:	mov	sl, r2
   1b5fc:	orr	fp, r3, r0, lsl #24
   1b600:	cmp	fp, r5
   1b604:	cmpeq	sl, r4
   1b608:	bne	1b994 <_start@@Base+0x7394>
   1b60c:	add	r7, r9, #8
   1b610:	sub	r3, r8, r7
   1b614:	cmp	r3, #8
   1b618:	bhi	1b6ac <_start@@Base+0x70ac>
   1b61c:	sub	r3, r3, #1
   1b620:	cmp	r3, #7
   1b624:	ldrls	pc, [pc, r3, lsl #2]
   1b628:	b	1b7a4 <_start@@Base+0x71a4>
   1b62c:	muleq	r1, r8, r7
   1b630:	andeq	fp, r1, ip, lsl #15
   1b634:	andeq	fp, r1, r0, lsl #15
   1b638:	andeq	fp, r1, r4, ror r7
   1b63c:	andeq	fp, r1, r8, ror #14
   1b640:	andeq	fp, r1, ip, asr r7
   1b644:	andeq	fp, r1, r0, asr r7
   1b648:	andeq	fp, r1, ip, lsr #13
   1b64c:	mov	r0, #0
   1b650:	mov	r1, r0
   1b654:	b	1b5c0 <_start@@Base+0x6fc0>
   1b658:	mov	r2, #0
   1b65c:	mov	r3, r2
   1b660:	b	1b5cc <_start@@Base+0x6fcc>
   1b664:	mov	r2, #0
   1b668:	mov	r3, r2
   1b66c:	b	1b5d4 <_start@@Base+0x6fd4>
   1b670:	mov	r2, #0
   1b674:	mov	r3, r2
   1b678:	b	1b5dc <_start@@Base+0x6fdc>
   1b67c:	mov	r2, #0
   1b680:	mov	r3, r2
   1b684:	b	1b5e4 <_start@@Base+0x6fe4>
   1b688:	mov	r2, #0
   1b68c:	mov	r3, r2
   1b690:	b	1b5ec <_start@@Base+0x6fec>
   1b694:	mov	r2, #0
   1b698:	mov	r3, r2
   1b69c:	b	1b5f4 <_start@@Base+0x6ff4>
   1b6a0:	mov	sl, #0
   1b6a4:	mov	fp, #0
   1b6a8:	b	1b600 <_start@@Base+0x7000>
   1b6ac:	ldrb	r0, [r9, #15]
   1b6b0:	mov	r1, #0
   1b6b4:	ldrb	r2, [r9, #14]
   1b6b8:	orr	r3, r0, r2, lsl #8
   1b6bc:	mov	r2, r1
   1b6c0:	ldrb	r0, [r9, #13]
   1b6c4:	orr	r3, r3, r0, lsl #16
   1b6c8:	ldrb	r0, [r9, #12]
   1b6cc:	orr	r3, r3, r0, lsl #24
   1b6d0:	ldrb	r0, [r9, #11]
   1b6d4:	orr	r2, r2, r0
   1b6d8:	ldrb	r0, [r9, #10]
   1b6dc:	orr	r2, r2, r0, lsl #8
   1b6e0:	ldrb	r0, [r9, #9]
   1b6e4:	orr	r2, r2, r0, lsl #16
   1b6e8:	ldrb	r0, [r9, #8]
   1b6ec:	str	r3, [sp, #72]	; 0x48
   1b6f0:	orr	r3, r2, r0, lsl #24
   1b6f4:	str	r3, [sp, #76]	; 0x4c
   1b6f8:	ldrd	r2, [sp, #72]	; 0x48
   1b6fc:	bic	r1, r2, #255	; 0xff
   1b700:	str	r1, [sp, #80]	; 0x50
   1b704:	str	r3, [sp, #84]	; 0x54
   1b708:	ldrd	r2, [sp, #80]	; 0x50
   1b70c:	add	r1, pc, #596	; 0x254
   1b710:	ldrd	r0, [r1]
   1b714:	cmp	r3, r1
   1b718:	cmpeq	r2, r0
   1b71c:	beq	1b7b4 <_start@@Base+0x71b4>
   1b720:	ldrd	r2, [sp, #72]	; 0x48
   1b724:	add	r1, pc, #580	; 0x244
   1b728:	ldrd	r0, [r1]
   1b72c:	cmp	r3, r1
   1b730:	cmpeq	r2, r0
   1b734:	beq	1b898 <_start@@Base+0x7298>
   1b738:	mov	r2, r8
   1b73c:	mov	r1, r7
   1b740:	mov	r0, r6
   1b744:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1b748:	mov	r9, r0
   1b74c:	b	1b9a8 <_start@@Base+0x73a8>
   1b750:	mov	r0, #0
   1b754:	mov	r1, r0
   1b758:	b	1b6b4 <_start@@Base+0x70b4>
   1b75c:	mov	r3, #0
   1b760:	mov	r2, r3
   1b764:	b	1b6c0 <_start@@Base+0x70c0>
   1b768:	mov	r3, #0
   1b76c:	mov	r2, r3
   1b770:	b	1b6c8 <_start@@Base+0x70c8>
   1b774:	mov	r3, #0
   1b778:	mov	r2, r3
   1b77c:	b	1b6d0 <_start@@Base+0x70d0>
   1b780:	mov	r3, #0
   1b784:	mov	r2, r3
   1b788:	b	1b6d8 <_start@@Base+0x70d8>
   1b78c:	mov	r3, #0
   1b790:	mov	r2, r3
   1b794:	b	1b6e0 <_start@@Base+0x70e0>
   1b798:	mov	r3, #0
   1b79c:	mov	r2, r3
   1b7a0:	b	1b6e8 <_start@@Base+0x70e8>
   1b7a4:	mov	r2, #0
   1b7a8:	mov	r3, #0
   1b7ac:	strd	r2, [sp, #72]	; 0x48
   1b7b0:	b	1b6f8 <_start@@Base+0x70f8>
   1b7b4:	mov	r3, #7
   1b7b8:	mov	r2, r8
   1b7bc:	mov	r1, r7
   1b7c0:	mov	r0, r6
   1b7c4:	bl	19da4 <_start@@Base+0x57a4>
   1b7c8:	mov	r1, r0
   1b7cc:	cmp	r7, r0
   1b7d0:	beq	1b884 <_start@@Base+0x7284>
   1b7d4:	mov	r3, #0
   1b7d8:	str	r3, [sp, #224]	; 0xe0
   1b7dc:	str	r3, [sp, #228]	; 0xe4
   1b7e0:	add	r3, sp, #224	; 0xe0
   1b7e4:	mov	r2, r8
   1b7e8:	mov	r7, r0
   1b7ec:	mov	r0, r6
   1b7f0:	bl	17fc0 <_start@@Base+0x39c0>
   1b7f4:	mov	r9, r0
   1b7f8:	cmp	r7, r0
   1b7fc:	beq	1b840 <_start@@Base+0x7240>
   1b800:	ldrd	r2, [sp, #224]	; 0xe0
   1b804:	orrs	r3, r2, r3
   1b808:	bne	1b818 <_start@@Base+0x7218>
   1b80c:	ldr	r3, [r6, #8]
   1b810:	tst	r3, #2
   1b814:	beq	1b9a8 <_start@@Base+0x73a8>
   1b818:	mov	r3, #8
   1b81c:	mov	r2, r3
   1b820:	mov	r1, #0
   1b824:	ldr	r0, [r6]
   1b828:	bl	28c78 <flatcc_builder_table_add@@Base>
   1b82c:	cmp	r0, #0
   1b830:	beq	1bbd4 <_start@@Base+0x75d4>
   1b834:	ldrd	r2, [sp, #224]	; 0xe0
   1b838:	strd	r2, [r0]
   1b83c:	b	1b9a8 <_start@@Base+0x73a8>
   1b840:	add	r3, sp, #224	; 0xe0
   1b844:	str	r3, [sp]
   1b848:	ldr	r3, [sp, #204]	; 0xcc
   1b84c:	add	r3, r3, #132	; 0x84
   1b850:	mov	r2, r8
   1b854:	mov	r1, r0
   1b858:	mov	r0, r6
   1b85c:	bl	180ec <_start@@Base+0x3aec>
   1b860:	cmp	r8, r0
   1b864:	cmpne	r9, r0
   1b868:	beq	1b874 <_start@@Base+0x7274>
   1b86c:	mov	r9, r0
   1b870:	b	1b800 <_start@@Base+0x7200>
   1b874:	strd	sl, [sp, #192]	; 0xc0
   1b878:	mov	r5, r6
   1b87c:	mov	r9, r0
   1b880:	b	1b544 <_start@@Base+0x6f44>
   1b884:	mov	r2, r8
   1b888:	mov	r0, r6
   1b88c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1b890:	mov	r9, r0
   1b894:	b	1b9a8 <_start@@Base+0x73a8>
   1b898:	mov	r3, #8
   1b89c:	mov	r2, r8
   1b8a0:	mov	r1, r7
   1b8a4:	mov	r0, r6
   1b8a8:	bl	19da4 <_start@@Base+0x57a4>
   1b8ac:	mov	r1, r0
   1b8b0:	cmp	r7, r0
   1b8b4:	beq	1b980 <_start@@Base+0x7380>
   1b8b8:	mov	r3, #0
   1b8bc:	str	r3, [sp, #224]	; 0xe0
   1b8c0:	add	r3, sp, #224	; 0xe0
   1b8c4:	mov	r2, r8
   1b8c8:	mov	r7, r0
   1b8cc:	mov	r0, r6
   1b8d0:	bl	17d94 <_start@@Base+0x3794>
   1b8d4:	mov	r9, r0
   1b8d8:	cmp	r7, r0
   1b8dc:	beq	1b920 <_start@@Base+0x7320>
   1b8e0:	ldr	r3, [sp, #224]	; 0xe0
   1b8e4:	cmp	r3, #0
   1b8e8:	bne	1b8f8 <_start@@Base+0x72f8>
   1b8ec:	ldr	r3, [r6, #8]
   1b8f0:	tst	r3, #2
   1b8f4:	beq	1b9a8 <_start@@Base+0x73a8>
   1b8f8:	mov	r3, #4
   1b8fc:	mov	r2, r3
   1b900:	mov	r1, #1
   1b904:	ldr	r0, [r6]
   1b908:	bl	28c78 <flatcc_builder_table_add@@Base>
   1b90c:	cmp	r0, #0
   1b910:	beq	1bbe0 <_start@@Base+0x75e0>
   1b914:	ldr	r3, [sp, #224]	; 0xe0
   1b918:	str	r3, [r0]
   1b91c:	b	1b9a8 <_start@@Base+0x73a8>
   1b920:	add	r3, sp, #224	; 0xe0
   1b924:	str	r3, [sp]
   1b928:	ldr	r3, [sp, #200]	; 0xc8
   1b92c:	mov	r2, r8
   1b930:	mov	r1, r0
   1b934:	mov	r0, r6
   1b938:	bl	18cb0 <_start@@Base+0x46b0>
   1b93c:	cmp	r8, r0
   1b940:	cmpne	r9, r0
   1b944:	beq	1b950 <_start@@Base+0x7350>
   1b948:	mov	r9, r0
   1b94c:	b	1b8e0 <_start@@Base+0x72e0>
   1b950:	strd	sl, [sp, #192]	; 0xc0
   1b954:	mov	r5, r6
   1b958:	mov	r9, r0
   1b95c:	b	1b544 <_start@@Base+0x6f44>
   1b960:	svcpl	0x00626262
   1b964:	cmnvs	r1, r1, ror #2
   1b968:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1b96c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b970:	cmnvs	r2, pc, asr r4
   1b974:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b978:	andeq	r4, r5, ip, lsl #2
   1b97c:	andeq	r4, r5, r8, lsl r1
   1b980:	mov	r2, r8
   1b984:	mov	r0, r6
   1b988:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1b98c:	mov	r9, r0
   1b990:	b	1b9a8 <_start@@Base+0x73a8>
   1b994:	mov	r2, r8
   1b998:	mov	r1, r9
   1b99c:	mov	r0, r6
   1b9a0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1b9a4:	mov	r9, r0
   1b9a8:	sub	r3, r8, r9
   1b9ac:	cmp	r3, #1
   1b9b0:	ble	1b9c4 <_start@@Base+0x73c4>
   1b9b4:	ldrb	r3, [r9]
   1b9b8:	cmp	r3, #32
   1b9bc:	bhi	1b9d8 <_start@@Base+0x73d8>
   1b9c0:	beq	1ba80 <_start@@Base+0x7480>
   1b9c4:	mov	r2, r8
   1b9c8:	mov	r1, r9
   1b9cc:	mov	r0, r6
   1b9d0:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1b9d4:	mov	r9, r0
   1b9d8:	cmp	r8, r9
   1b9dc:	moveq	r3, #0
   1b9e0:	streq	r3, [sp, #220]	; 0xdc
   1b9e4:	beq	1ba20 <_start@@Base+0x7420>
   1b9e8:	ldrb	r3, [r9]
   1b9ec:	cmp	r3, #44	; 0x2c
   1b9f0:	beq	1bae0 <_start@@Base+0x74e0>
   1b9f4:	mov	r3, #0
   1b9f8:	str	r3, [sp, #220]	; 0xdc
   1b9fc:	ldrb	r3, [r9]
   1ba00:	cmp	r3, #125	; 0x7d
   1ba04:	beq	1ba94 <_start@@Base+0x7494>
   1ba08:	mov	r3, #10
   1ba0c:	mov	r2, r8
   1ba10:	mov	r1, r9
   1ba14:	mov	r0, r6
   1ba18:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1ba1c:	mov	r9, r0
   1ba20:	ldr	r3, [sp, #220]	; 0xdc
   1ba24:	cmp	r3, #0
   1ba28:	beq	1bb88 <_start@@Base+0x7588>
   1ba2c:	cmp	r8, r9
   1ba30:	beq	1ba44 <_start@@Base+0x7444>
   1ba34:	ldrb	r3, [r9]
   1ba38:	cmp	r3, #34	; 0x22
   1ba3c:	addeq	r9, r9, #1
   1ba40:	bne	1b59c <_start@@Base+0x6f9c>
   1ba44:	sub	r3, r8, r9
   1ba48:	cmp	r3, #8
   1ba4c:	bhi	1b5b8 <_start@@Base+0x6fb8>
   1ba50:	sub	r3, r3, #1
   1ba54:	cmp	r3, #7
   1ba58:	ldrls	pc, [pc, r3, lsl #2]
   1ba5c:	b	1b6a0 <_start@@Base+0x70a0>
   1ba60:	muleq	r1, r4, r6
   1ba64:	andeq	fp, r1, r8, lsl #13
   1ba68:	andeq	fp, r1, ip, ror r6
   1ba6c:	andeq	fp, r1, r0, ror r6
   1ba70:	andeq	fp, r1, r4, ror #12
   1ba74:	andeq	fp, r1, r8, asr r6
   1ba78:	andeq	fp, r1, ip, asr #12
   1ba7c:			; <UNDEFINED> instruction: 0x0001b5b8
   1ba80:	ldrb	r3, [r9, #1]
   1ba84:	cmp	r3, #32
   1ba88:	addhi	r9, r9, #1
   1ba8c:	bls	1b9c4 <_start@@Base+0x73c4>
   1ba90:	b	1b9d8 <_start@@Base+0x73d8>
   1ba94:	add	r1, r9, #1
   1ba98:	sub	r3, r8, r1
   1ba9c:	cmp	r3, #1
   1baa0:	ble	1bab8 <_start@@Base+0x74b8>
   1baa4:	ldrb	r3, [r9, #1]
   1baa8:	cmp	r3, #32
   1baac:	movhi	r9, r1
   1bab0:	bhi	1ba20 <_start@@Base+0x7420>
   1bab4:	beq	1bacc <_start@@Base+0x74cc>
   1bab8:	mov	r2, r8
   1babc:	mov	r0, r6
   1bac0:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1bac4:	mov	r9, r0
   1bac8:	b	1ba20 <_start@@Base+0x7420>
   1bacc:	ldrb	r3, [r9, #2]
   1bad0:	cmp	r3, #32
   1bad4:	addhi	r9, r9, #2
   1bad8:	bls	1bab8 <_start@@Base+0x74b8>
   1badc:	b	1ba20 <_start@@Base+0x7420>
   1bae0:	add	r1, r9, #1
   1bae4:	sub	r3, r8, r1
   1bae8:	cmp	r3, #1
   1baec:	ble	1bb04 <_start@@Base+0x7504>
   1baf0:	ldrb	r3, [r9, #1]
   1baf4:	cmp	r3, #32
   1baf8:	movhi	r9, r1
   1bafc:	bhi	1bb14 <_start@@Base+0x7514>
   1bb00:	beq	1bb50 <_start@@Base+0x7550>
   1bb04:	mov	r2, r8
   1bb08:	mov	r0, r6
   1bb0c:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1bb10:	mov	r9, r0
   1bb14:	cmp	r8, r9
   1bb18:	beq	1bb64 <_start@@Base+0x7564>
   1bb1c:	ldrb	r3, [r9]
   1bb20:	cmp	r3, #125	; 0x7d
   1bb24:	movne	r3, #1
   1bb28:	strne	r3, [sp, #220]	; 0xdc
   1bb2c:	bne	1ba20 <_start@@Base+0x7420>
   1bb30:	mov	r3, #0
   1bb34:	str	r3, [sp, #220]	; 0xdc
   1bb38:	mov	r2, r8
   1bb3c:	add	r1, r9, #1
   1bb40:	mov	r0, r6
   1bb44:	bl	1809c <_start@@Base+0x3a9c>
   1bb48:	mov	r9, r0
   1bb4c:	b	1ba20 <_start@@Base+0x7420>
   1bb50:	ldrb	r3, [r9, #2]
   1bb54:	cmp	r3, #32
   1bb58:	addhi	r9, r9, #2
   1bb5c:	bls	1bb04 <_start@@Base+0x7504>
   1bb60:	b	1bb14 <_start@@Base+0x7514>
   1bb64:	mov	r3, #0
   1bb68:	str	r3, [sp, #220]	; 0xdc
   1bb6c:	mov	r3, #10
   1bb70:	mov	r2, r8
   1bb74:	mov	r1, r9
   1bb78:	mov	r0, r6
   1bb7c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1bb80:	mov	r9, r0
   1bb84:	b	1ba20 <_start@@Base+0x7420>
   1bb88:	strd	sl, [sp, #192]	; 0xc0
   1bb8c:	ldr	r3, [r6, #20]
   1bb90:	cmp	r3, #0
   1bb94:	beq	1bba0 <_start@@Base+0x75a0>
   1bb98:	mov	r5, r6
   1bb9c:	b	1b544 <_start@@Base+0x6f44>
   1bba0:	ldr	r0, [r6]
   1bba4:	bl	27b8c <flatcc_builder_end_table@@Base>
   1bba8:	subs	r4, r0, #0
   1bbac:	beq	1bbcc <_start@@Base+0x75cc>
   1bbb0:	mov	r1, #1
   1bbb4:	ldr	r0, [r6]
   1bbb8:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1bbbc:	cmp	r0, #0
   1bbc0:	beq	1d230 <_start@@Base+0x8c30>
   1bbc4:	str	r4, [r0]
   1bbc8:	b	1cdcc <_start@@Base+0x87cc>
   1bbcc:	mov	r5, r6
   1bbd0:	b	1b544 <_start@@Base+0x6f44>
   1bbd4:	strd	sl, [sp, #192]	; 0xc0
   1bbd8:	mov	r5, r6
   1bbdc:	b	1b544 <_start@@Base+0x6f44>
   1bbe0:	strd	sl, [sp, #192]	; 0xc0
   1bbe4:	mov	r5, r6
   1bbe8:	b	1b544 <_start@@Base+0x6f44>
   1bbec:	mov	r3, #5
   1bbf0:	mov	r2, r8
   1bbf4:	mov	r1, r4
   1bbf8:	mov	r0, r6
   1bbfc:	bl	19da4 <_start@@Base+0x57a4>
   1bc00:	mov	r9, r0
   1bc04:	cmp	r4, r0
   1bc08:	beq	1c644 <_start@@Base+0x8044>
   1bc0c:	mov	r1, #9
   1bc10:	ldr	r0, [r6]
   1bc14:	bl	270b4 <flatcc_builder_start_table@@Base>
   1bc18:	cmp	r0, #0
   1bc1c:	beq	1bc80 <_start@@Base+0x7680>
   1bc20:	mov	r5, r6
   1bc24:	mov	r3, #33	; 0x21
   1bc28:	mov	r2, r8
   1bc2c:	mov	r1, r9
   1bc30:	mov	r0, r5
   1bc34:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1bc38:	mov	r9, r0
   1bc3c:	mov	r3, #33	; 0x21
   1bc40:	mov	r2, r8
   1bc44:	mov	r1, r9
   1bc48:	mov	r0, r5
   1bc4c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1bc50:	mov	r9, r0
   1bc54:	ldr	r3, [sp, #240]	; 0xf0
   1bc58:	cmp	r3, #0
   1bc5c:	beq	1d1d4 <_start@@Base+0x8bd4>
   1bc60:	mov	r1, #0
   1bc64:	ldr	r0, [r5]
   1bc68:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1bc6c:	cmp	r0, #0
   1bc70:	beq	1d1ec <_start@@Base+0x8bec>
   1bc74:	ldr	r3, [sp, #240]	; 0xf0
   1bc78:	str	r3, [r0]
   1bc7c:	b	1d018 <_start@@Base+0x8a18>
   1bc80:	add	r3, sp, #216	; 0xd8
   1bc84:	mov	r2, r8
   1bc88:	mov	r1, r9
   1bc8c:	mov	r0, r6
   1bc90:	bl	1966c <_start@@Base+0x506c>
   1bc94:	mov	r9, r0
   1bc98:	ldr	r3, [sp, #216]	; 0xd8
   1bc9c:	cmp	r3, #0
   1bca0:	beq	1c56c <_start@@Base+0x7f6c>
   1bca4:	ldrd	sl, [sp, #176]	; 0xb0
   1bca8:	b	1c038 <_start@@Base+0x7a38>
   1bcac:	mov	r3, #5
   1bcb0:	mov	r2, r8
   1bcb4:	mov	r1, r9
   1bcb8:	mov	r0, r6
   1bcbc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1bcc0:	mov	r9, r0
   1bcc4:	b	1c050 <_start@@Base+0x7a50>
   1bcc8:	add	r9, r9, #8
   1bccc:	mov	r1, r8
   1bcd0:	mov	r0, r9
   1bcd4:	bl	146f0 <_start@@Base+0xf0>
   1bcd8:	mov	r3, #0
   1bcdc:	str	r3, [sp, #136]	; 0x88
   1bce0:	and	r3, r1, #-16777216	; 0xff000000
   1bce4:	str	r3, [sp, #140]	; 0x8c
   1bce8:	ldrd	r2, [sp, #136]	; 0x88
   1bcec:	cmp	r3, #889192448	; 0x35000000
   1bcf0:	cmpeq	r2, #0
   1bcf4:	beq	1bd10 <_start@@Base+0x7710>
   1bcf8:	mov	r2, r8
   1bcfc:	mov	r1, r9
   1bd00:	mov	r0, r6
   1bd04:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1bd08:	mov	r9, r0
   1bd0c:	b	1c014 <_start@@Base+0x7a14>
   1bd10:	mov	r3, #1
   1bd14:	mov	r2, r8
   1bd18:	mov	r1, r9
   1bd1c:	mov	r0, r6
   1bd20:	bl	19da4 <_start@@Base+0x57a4>
   1bd24:	mov	r7, r0
   1bd28:	cmp	r9, r0
   1bd2c:	beq	1bdd8 <_start@@Base+0x77d8>
   1bd30:	mov	r3, #0
   1bd34:	str	r3, [sp, #224]	; 0xe0
   1bd38:	add	r3, sp, #224	; 0xe0
   1bd3c:	mov	r2, r8
   1bd40:	mov	r1, r0
   1bd44:	mov	r0, r6
   1bd48:	bl	17d94 <_start@@Base+0x3794>
   1bd4c:	mov	r9, r0
   1bd50:	cmp	r7, r0
   1bd54:	beq	1bd98 <_start@@Base+0x7798>
   1bd58:	ldr	r3, [sp, #224]	; 0xe0
   1bd5c:	cmp	r3, #0
   1bd60:	bne	1bd70 <_start@@Base+0x7770>
   1bd64:	ldr	r3, [r6, #8]
   1bd68:	tst	r3, #2
   1bd6c:	beq	1c014 <_start@@Base+0x7a14>
   1bd70:	mov	r3, #4
   1bd74:	mov	r2, r3
   1bd78:	mov	r1, #1
   1bd7c:	ldr	r0, [r6]
   1bd80:	bl	28c78 <flatcc_builder_table_add@@Base>
   1bd84:	cmp	r0, #0
   1bd88:	beq	1c5b4 <_start@@Base+0x7fb4>
   1bd8c:	ldr	r3, [sp, #224]	; 0xe0
   1bd90:	str	r3, [r0]
   1bd94:	b	1c014 <_start@@Base+0x7a14>
   1bd98:	add	r3, sp, #224	; 0xe0
   1bd9c:	str	r3, [sp]
   1bda0:	ldr	r3, [pc, #-1072]	; 1b978 <_start@@Base+0x7378>
   1bda4:	mov	r2, r8
   1bda8:	mov	r1, r0
   1bdac:	mov	r0, r6
   1bdb0:	bl	18cb0 <_start@@Base+0x46b0>
   1bdb4:	cmp	r8, r0
   1bdb8:	cmpne	r9, r0
   1bdbc:	beq	1bdc8 <_start@@Base+0x77c8>
   1bdc0:	mov	r9, r0
   1bdc4:	b	1bd58 <_start@@Base+0x7758>
   1bdc8:	strd	sl, [sp, #176]	; 0xb0
   1bdcc:	mov	r5, r6
   1bdd0:	mov	r9, r0
   1bdd4:	b	1bc24 <_start@@Base+0x7624>
   1bdd8:	mov	r2, r8
   1bddc:	mov	r1, r0
   1bde0:	mov	r0, r6
   1bde4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1bde8:	mov	r9, r0
   1bdec:	b	1c014 <_start@@Base+0x7a14>
   1bdf0:	mov	r3, #4
   1bdf4:	mov	r2, r8
   1bdf8:	mov	r1, r9
   1bdfc:	mov	r0, r6
   1be00:	bl	19da4 <_start@@Base+0x57a4>
   1be04:	cmp	r9, r0
   1be08:	beq	1bfa8 <_start@@Base+0x79a8>
   1be0c:	add	r3, sp, #220	; 0xdc
   1be10:	mov	r2, r8
   1be14:	mov	r1, r0
   1be18:	mov	r0, r6
   1be1c:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   1be20:	mov	r9, r0
   1be24:	ldr	r3, [sp, #220]	; 0xdc
   1be28:	cmp	r3, sl
   1be2c:	beq	1c5c0 <_start@@Base+0x7fc0>
   1be30:	mov	r1, sl
   1be34:	ldr	r0, [r6]
   1be38:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1be3c:	cmp	r0, #0
   1be40:	beq	1c5cc <_start@@Base+0x7fcc>
   1be44:	ldr	r3, [sp, #220]	; 0xdc
   1be48:	str	r3, [r0]
   1be4c:	b	1c014 <_start@@Base+0x7a14>
   1be50:	mov	r3, #8
   1be54:	mov	r2, r8
   1be58:	mov	r1, r9
   1be5c:	mov	r0, r6
   1be60:	bl	19da4 <_start@@Base+0x57a4>
   1be64:	mov	r7, r0
   1be68:	cmp	r9, r0
   1be6c:	beq	1bf1c <_start@@Base+0x791c>
   1be70:	mov	r2, #0
   1be74:	mov	r3, #0
   1be78:	strd	r2, [sp, #224]	; 0xe0
   1be7c:	add	r3, sp, #224	; 0xe0
   1be80:	mov	r2, r8
   1be84:	mov	r1, r0
   1be88:	mov	r0, r6
   1be8c:	bl	17fc0 <_start@@Base+0x39c0>
   1be90:	mov	r9, r0
   1be94:	cmp	r7, r0
   1be98:	beq	1bedc <_start@@Base+0x78dc>
   1be9c:	ldrd	r2, [sp, #224]	; 0xe0
   1bea0:	orrs	r3, r2, r3
   1bea4:	bne	1beb4 <_start@@Base+0x78b4>
   1bea8:	ldr	r3, [r6, #8]
   1beac:	tst	r3, #2
   1beb0:	beq	1c014 <_start@@Base+0x7a14>
   1beb4:	mov	r3, #8
   1beb8:	mov	r2, r3
   1bebc:	mov	r1, #3
   1bec0:	ldr	r0, [r6]
   1bec4:	bl	28c78 <flatcc_builder_table_add@@Base>
   1bec8:	cmp	r0, #0
   1becc:	beq	1c5d8 <_start@@Base+0x7fd8>
   1bed0:	ldrd	r2, [sp, #224]	; 0xe0
   1bed4:	strd	r2, [r0]
   1bed8:	b	1c014 <_start@@Base+0x7a14>
   1bedc:	add	r3, sp, #224	; 0xe0
   1bee0:	str	r3, [sp]
   1bee4:	ldr	r3, [pc, #-1392]	; 1b97c <_start@@Base+0x737c>
   1bee8:	mov	r2, r8
   1beec:	mov	r1, r0
   1bef0:	mov	r0, r6
   1bef4:	bl	180ec <_start@@Base+0x3aec>
   1bef8:	cmp	r8, r0
   1befc:	cmpne	r9, r0
   1bf00:	beq	1bf0c <_start@@Base+0x790c>
   1bf04:	mov	r9, r0
   1bf08:	b	1be9c <_start@@Base+0x789c>
   1bf0c:	strd	sl, [sp, #176]	; 0xb0
   1bf10:	mov	r5, r6
   1bf14:	mov	r9, r0
   1bf18:	b	1bc24 <_start@@Base+0x7624>
   1bf1c:	mov	r2, r8
   1bf20:	mov	r1, r0
   1bf24:	mov	r0, r6
   1bf28:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1bf2c:	mov	r9, r0
   1bf30:	b	1c014 <_start@@Base+0x7a14>
   1bf34:	mov	r3, #4
   1bf38:	mov	r2, r8
   1bf3c:	mov	r1, r9
   1bf40:	mov	r0, r6
   1bf44:	bl	19da4 <_start@@Base+0x57a4>
   1bf48:	mov	r1, r0
   1bf4c:	cmp	r9, r0
   1bf50:	beq	1bf94 <_start@@Base+0x7994>
   1bf54:	add	r3, sp, #220	; 0xdc
   1bf58:	mov	r2, r8
   1bf5c:	mov	r0, r6
   1bf60:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   1bf64:	mov	r9, r0
   1bf68:	ldr	r3, [sp, #220]	; 0xdc
   1bf6c:	cmp	r3, #0
   1bf70:	beq	1c5e4 <_start@@Base+0x7fe4>
   1bf74:	mov	r1, #2
   1bf78:	ldr	r0, [r6]
   1bf7c:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1bf80:	cmp	r0, #0
   1bf84:	beq	1c5f0 <_start@@Base+0x7ff0>
   1bf88:	ldr	r3, [sp, #220]	; 0xdc
   1bf8c:	str	r3, [r0]
   1bf90:	b	1c014 <_start@@Base+0x7a14>
   1bf94:	mov	r2, r8
   1bf98:	mov	r0, r6
   1bf9c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1bfa0:	mov	r9, r0
   1bfa4:	b	1c014 <_start@@Base+0x7a14>
   1bfa8:	mov	r9, r0
   1bfac:	b	1c0d0 <_start@@Base+0x7ad0>
   1bfb0:	add	r3, pc, #896	; 0x380
   1bfb4:	ldrd	r2, [r3]
   1bfb8:	cmp	r1, r3
   1bfbc:	cmpeq	r0, r2
   1bfc0:	beq	1c0e8 <_start@@Base+0x7ae8>
   1bfc4:	mov	r3, #0
   1bfc8:	str	r3, [sp, #88]	; 0x58
   1bfcc:	str	r1, [sp, #92]	; 0x5c
   1bfd0:	ldrd	r2, [sp, #88]	; 0x58
   1bfd4:	mov	r4, #0
   1bfd8:	movw	r5, #25443	; 0x6363
   1bfdc:	movt	r5, #25443	; 0x6363
   1bfe0:	cmp	r3, r5
   1bfe4:	cmpeq	r2, r4
   1bfe8:	beq	1c2d8 <_start@@Base+0x7cd8>
   1bfec:	add	r3, pc, #844	; 0x34c
   1bff0:	ldrd	r2, [r3]
   1bff4:	cmp	r1, r3
   1bff8:	cmpeq	r0, r2
   1bffc:	beq	1c370 <_start@@Base+0x7d70>
   1c000:	mov	r2, r8
   1c004:	mov	r1, r9
   1c008:	mov	r0, r6
   1c00c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1c010:	mov	r9, r0
   1c014:	add	r3, sp, #216	; 0xd8
   1c018:	mov	r2, r8
   1c01c:	mov	r1, r9
   1c020:	mov	r0, r6
   1c024:	bl	1a448 <_start@@Base+0x5e48>
   1c028:	mov	r9, r0
   1c02c:	ldr	r3, [sp, #216]	; 0xd8
   1c030:	cmp	r3, #0
   1c034:	beq	1c568 <_start@@Base+0x7f68>
   1c038:	cmp	r8, r9
   1c03c:	beq	1c050 <_start@@Base+0x7a50>
   1c040:	ldrb	r3, [r9]
   1c044:	cmp	r3, #34	; 0x22
   1c048:	addeq	r9, r9, #1
   1c04c:	bne	1bcac <_start@@Base+0x76ac>
   1c050:	mov	r1, r8
   1c054:	mov	r0, r9
   1c058:	bl	146f0 <_start@@Base+0xf0>
   1c05c:	add	r3, pc, #740	; 0x2e4
   1c060:	ldrd	r2, [r3]
   1c064:	cmp	r1, r3
   1c068:	cmpeq	r0, r2
   1c06c:	bhi	1bfb0 <_start@@Base+0x79b0>
   1c070:	add	r3, pc, #728	; 0x2d8
   1c074:	ldrd	r2, [r3]
   1c078:	cmp	r1, r3
   1c07c:	cmpeq	r0, r2
   1c080:	beq	1bcc8 <_start@@Base+0x76c8>
   1c084:	mov	sl, #0
   1c088:	mov	fp, r1
   1c08c:	mov	r2, #0
   1c090:	movw	r3, #24929	; 0x6161
   1c094:	movt	r3, #24929	; 0x6161
   1c098:	cmp	r1, r3
   1c09c:	cmpeq	sl, r2
   1c0a0:	beq	1bdf0 <_start@@Base+0x77f0>
   1c0a4:	add	r3, pc, #684	; 0x2ac
   1c0a8:	ldrd	r2, [r3]
   1c0ac:	cmp	r1, r3
   1c0b0:	cmpeq	r0, r2
   1c0b4:	beq	1be50 <_start@@Base+0x7850>
   1c0b8:	mov	r2, #0
   1c0bc:	movw	r3, #25186	; 0x6262
   1c0c0:	movt	r3, #25186	; 0x6262
   1c0c4:	cmp	r1, r3
   1c0c8:	cmpeq	sl, r2
   1c0cc:	beq	1bf34 <_start@@Base+0x7934>
   1c0d0:	mov	r2, r8
   1c0d4:	mov	r1, r9
   1c0d8:	mov	r0, r6
   1c0dc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1c0e0:	mov	r9, r0
   1c0e4:	b	1c014 <_start@@Base+0x7a14>
   1c0e8:	mov	r3, #8
   1c0ec:	mov	r2, r8
   1c0f0:	mov	r1, r9
   1c0f4:	mov	r0, r6
   1c0f8:	bl	19da4 <_start@@Base+0x57a4>
   1c0fc:	mov	r7, r0
   1c100:	cmp	r9, r0
   1c104:	beq	1c1b4 <_start@@Base+0x7bb4>
   1c108:	mov	r2, #0
   1c10c:	mov	r3, #0
   1c110:	strd	r2, [sp, #224]	; 0xe0
   1c114:	add	r3, sp, #224	; 0xe0
   1c118:	mov	r2, r8
   1c11c:	mov	r1, r0
   1c120:	mov	r0, r6
   1c124:	bl	17fc0 <_start@@Base+0x39c0>
   1c128:	mov	r9, r0
   1c12c:	cmp	r7, r0
   1c130:	beq	1c174 <_start@@Base+0x7b74>
   1c134:	ldrd	r2, [sp, #224]	; 0xe0
   1c138:	orrs	r3, r2, r3
   1c13c:	bne	1c14c <_start@@Base+0x7b4c>
   1c140:	ldr	r3, [r6, #8]
   1c144:	tst	r3, #2
   1c148:	beq	1c014 <_start@@Base+0x7a14>
   1c14c:	mov	r3, #8
   1c150:	mov	r2, r3
   1c154:	mov	r1, #5
   1c158:	ldr	r0, [r6]
   1c15c:	bl	28c78 <flatcc_builder_table_add@@Base>
   1c160:	cmp	r0, #0
   1c164:	beq	1c5fc <_start@@Base+0x7ffc>
   1c168:	ldrd	r2, [sp, #224]	; 0xe0
   1c16c:	strd	r2, [r0]
   1c170:	b	1c014 <_start@@Base+0x7a14>
   1c174:	add	r3, sp, #224	; 0xe0
   1c178:	str	r3, [sp]
   1c17c:	ldr	r3, [pc, #476]	; 1c360 <_start@@Base+0x7d60>
   1c180:	mov	r2, r8
   1c184:	mov	r1, r0
   1c188:	mov	r0, r6
   1c18c:	bl	180ec <_start@@Base+0x3aec>
   1c190:	cmp	r8, r0
   1c194:	cmpne	r9, r0
   1c198:	beq	1c1a4 <_start@@Base+0x7ba4>
   1c19c:	mov	r9, r0
   1c1a0:	b	1c134 <_start@@Base+0x7b34>
   1c1a4:	strd	sl, [sp, #176]	; 0xb0
   1c1a8:	mov	r5, r6
   1c1ac:	mov	r9, r0
   1c1b0:	b	1bc24 <_start@@Base+0x7624>
   1c1b4:	add	r7, r0, #8
   1c1b8:	mov	r1, r8
   1c1bc:	mov	r0, r7
   1c1c0:	bl	146f0 <_start@@Base+0xf0>
   1c1c4:	mov	r3, #0
   1c1c8:	str	r3, [sp, #160]	; 0xa0
   1c1cc:	and	r3, r1, #-16777216	; 0xff000000
   1c1d0:	str	r3, [sp, #164]	; 0xa4
   1c1d4:	ldrd	r2, [sp, #160]	; 0xa0
   1c1d8:	cmp	r3, #889192448	; 0x35000000
   1c1dc:	cmpeq	r2, #0
   1c1e0:	beq	1c1fc <_start@@Base+0x7bfc>
   1c1e4:	mov	r2, r8
   1c1e8:	mov	r1, r7
   1c1ec:	mov	r0, r6
   1c1f0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1c1f4:	mov	r9, r0
   1c1f8:	b	1c014 <_start@@Base+0x7a14>
   1c1fc:	mov	r3, #1
   1c200:	mov	r2, r8
   1c204:	mov	r1, r7
   1c208:	mov	r0, r6
   1c20c:	bl	19da4 <_start@@Base+0x57a4>
   1c210:	mov	r1, r0
   1c214:	mov	r4, r0
   1c218:	cmp	r7, r0
   1c21c:	beq	1c2c4 <_start@@Base+0x7cc4>
   1c220:	mov	r3, #0
   1c224:	str	r3, [sp, #224]	; 0xe0
   1c228:	add	r3, sp, #224	; 0xe0
   1c22c:	mov	r2, r8
   1c230:	mov	r0, r6
   1c234:	bl	17d94 <_start@@Base+0x3794>
   1c238:	mov	r9, r0
   1c23c:	cmp	r4, r0
   1c240:	beq	1c284 <_start@@Base+0x7c84>
   1c244:	ldr	r3, [sp, #224]	; 0xe0
   1c248:	cmp	r3, #0
   1c24c:	bne	1c25c <_start@@Base+0x7c5c>
   1c250:	ldr	r3, [r6, #8]
   1c254:	tst	r3, #2
   1c258:	beq	1c014 <_start@@Base+0x7a14>
   1c25c:	mov	r3, #4
   1c260:	mov	r2, r3
   1c264:	mov	r1, #6
   1c268:	ldr	r0, [r6]
   1c26c:	bl	28c78 <flatcc_builder_table_add@@Base>
   1c270:	cmp	r0, #0
   1c274:	beq	1c608 <_start@@Base+0x8008>
   1c278:	ldr	r3, [sp, #224]	; 0xe0
   1c27c:	str	r3, [r0]
   1c280:	b	1c014 <_start@@Base+0x7a14>
   1c284:	add	r3, sp, #224	; 0xe0
   1c288:	str	r3, [sp]
   1c28c:	ldr	r3, [pc, #208]	; 1c364 <_start@@Base+0x7d64>
   1c290:	mov	r2, r8
   1c294:	mov	r1, r0
   1c298:	mov	r0, r6
   1c29c:	bl	18cb0 <_start@@Base+0x46b0>
   1c2a0:	cmp	r8, r0
   1c2a4:	cmpne	r9, r0
   1c2a8:	beq	1c2b4 <_start@@Base+0x7cb4>
   1c2ac:	mov	r9, r0
   1c2b0:	b	1c244 <_start@@Base+0x7c44>
   1c2b4:	strd	sl, [sp, #176]	; 0xb0
   1c2b8:	mov	r5, r6
   1c2bc:	mov	r9, r0
   1c2c0:	b	1bc24 <_start@@Base+0x7624>
   1c2c4:	mov	r2, r8
   1c2c8:	mov	r0, r6
   1c2cc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1c2d0:	mov	r9, r0
   1c2d4:	b	1c014 <_start@@Base+0x7a14>
   1c2d8:	mov	r3, #4
   1c2dc:	mov	r2, r8
   1c2e0:	mov	r1, r9
   1c2e4:	mov	r0, r6
   1c2e8:	bl	19da4 <_start@@Base+0x57a4>
   1c2ec:	cmp	r9, r0
   1c2f0:	beq	1c560 <_start@@Base+0x7f60>
   1c2f4:	add	r3, sp, #220	; 0xdc
   1c2f8:	mov	r2, r8
   1c2fc:	mov	r1, r0
   1c300:	mov	r0, r6
   1c304:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   1c308:	mov	r9, r0
   1c30c:	ldr	r3, [sp, #220]	; 0xdc
   1c310:	cmp	r3, #0
   1c314:	beq	1c614 <_start@@Base+0x8014>
   1c318:	mov	r1, #4
   1c31c:	ldr	r0, [r6]
   1c320:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1c324:	cmp	r0, #0
   1c328:	beq	1c620 <_start@@Base+0x8020>
   1c32c:	ldr	r3, [sp, #220]	; 0xdc
   1c330:	str	r3, [r0]
   1c334:	b	1c014 <_start@@Base+0x7a14>
   1c338:	teqcc	r2, r4, lsr r3
   1c33c:	cmnvs	r3, #-1946157055	; 0x8c000001
   1c340:	teqcc	r2, r4, lsr r3
   1c344:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1c348:			; <UNDEFINED> instruction: 0xffffffff
   1c34c:	cmnvs	r3, #-2013265919	; 0x88000001
   1c350:	teqcc	r2, r4, lsr r3
   1c354:	cmnvs	r1, r1, ror #2
   1c358:	teqcc	r2, r4, lsr r3
   1c35c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1c360:	andeq	r4, r5, r4, lsr #2
   1c364:	andeq	r4, r5, r0, lsr r1
   1c368:	andeq	r4, r5, ip, lsr r1
   1c36c:	andeq	r4, r5, r8, asr #2
   1c370:	mov	r3, #8
   1c374:	mov	r2, r8
   1c378:	mov	r1, r9
   1c37c:	mov	r0, r6
   1c380:	bl	19da4 <_start@@Base+0x57a4>
   1c384:	mov	r7, r0
   1c388:	cmp	r9, r0
   1c38c:	beq	1c43c <_start@@Base+0x7e3c>
   1c390:	mov	r2, #0
   1c394:	mov	r3, #0
   1c398:	strd	r2, [sp, #224]	; 0xe0
   1c39c:	add	r3, sp, #224	; 0xe0
   1c3a0:	mov	r2, r8
   1c3a4:	mov	r1, r0
   1c3a8:	mov	r0, r6
   1c3ac:	bl	17fc0 <_start@@Base+0x39c0>
   1c3b0:	mov	r9, r0
   1c3b4:	cmp	r7, r0
   1c3b8:	beq	1c3fc <_start@@Base+0x7dfc>
   1c3bc:	ldrd	r2, [sp, #224]	; 0xe0
   1c3c0:	orrs	r3, r2, r3
   1c3c4:	bne	1c3d4 <_start@@Base+0x7dd4>
   1c3c8:	ldr	r3, [r6, #8]
   1c3cc:	tst	r3, #2
   1c3d0:	beq	1c014 <_start@@Base+0x7a14>
   1c3d4:	mov	r3, #8
   1c3d8:	mov	r2, r3
   1c3dc:	mov	r1, #7
   1c3e0:	ldr	r0, [r6]
   1c3e4:	bl	28c78 <flatcc_builder_table_add@@Base>
   1c3e8:	cmp	r0, #0
   1c3ec:	beq	1c62c <_start@@Base+0x802c>
   1c3f0:	ldrd	r2, [sp, #224]	; 0xe0
   1c3f4:	strd	r2, [r0]
   1c3f8:	b	1c014 <_start@@Base+0x7a14>
   1c3fc:	add	r3, sp, #224	; 0xe0
   1c400:	str	r3, [sp]
   1c404:	ldr	r3, [pc, #-164]	; 1c368 <_start@@Base+0x7d68>
   1c408:	mov	r2, r8
   1c40c:	mov	r1, r0
   1c410:	mov	r0, r6
   1c414:	bl	180ec <_start@@Base+0x3aec>
   1c418:	cmp	r8, r0
   1c41c:	cmpne	r9, r0
   1c420:	beq	1c42c <_start@@Base+0x7e2c>
   1c424:	mov	r9, r0
   1c428:	b	1c3bc <_start@@Base+0x7dbc>
   1c42c:	strd	sl, [sp, #176]	; 0xb0
   1c430:	mov	r5, r6
   1c434:	mov	r9, r0
   1c438:	b	1bc24 <_start@@Base+0x7624>
   1c43c:	add	r7, r0, #8
   1c440:	mov	r1, r8
   1c444:	mov	r0, r7
   1c448:	bl	146f0 <_start@@Base+0xf0>
   1c44c:	mov	r3, #0
   1c450:	str	r3, [sp, #152]	; 0x98
   1c454:	and	r3, r1, #-16777216	; 0xff000000
   1c458:	str	r3, [sp, #156]	; 0x9c
   1c45c:	ldrd	r2, [sp, #152]	; 0x98
   1c460:	cmp	r3, #889192448	; 0x35000000
   1c464:	cmpeq	r2, #0
   1c468:	beq	1c484 <_start@@Base+0x7e84>
   1c46c:	mov	r2, r8
   1c470:	mov	r1, r7
   1c474:	mov	r0, r6
   1c478:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1c47c:	mov	r9, r0
   1c480:	b	1c014 <_start@@Base+0x7a14>
   1c484:	mov	r3, #1
   1c488:	mov	r2, r8
   1c48c:	mov	r1, r7
   1c490:	mov	r0, r6
   1c494:	bl	19da4 <_start@@Base+0x57a4>
   1c498:	mov	r1, r0
   1c49c:	mov	r4, r0
   1c4a0:	cmp	r7, r0
   1c4a4:	beq	1c54c <_start@@Base+0x7f4c>
   1c4a8:	mov	r3, #0
   1c4ac:	str	r3, [sp, #224]	; 0xe0
   1c4b0:	add	r3, sp, #224	; 0xe0
   1c4b4:	mov	r2, r8
   1c4b8:	mov	r0, r6
   1c4bc:	bl	17d94 <_start@@Base+0x3794>
   1c4c0:	mov	r9, r0
   1c4c4:	cmp	r4, r0
   1c4c8:	beq	1c50c <_start@@Base+0x7f0c>
   1c4cc:	ldr	r3, [sp, #224]	; 0xe0
   1c4d0:	cmp	r3, #0
   1c4d4:	bne	1c4e4 <_start@@Base+0x7ee4>
   1c4d8:	ldr	r3, [r6, #8]
   1c4dc:	tst	r3, #2
   1c4e0:	beq	1c014 <_start@@Base+0x7a14>
   1c4e4:	mov	r3, #4
   1c4e8:	mov	r2, r3
   1c4ec:	mov	r1, #8
   1c4f0:	ldr	r0, [r6]
   1c4f4:	bl	28c78 <flatcc_builder_table_add@@Base>
   1c4f8:	cmp	r0, #0
   1c4fc:	beq	1c638 <_start@@Base+0x8038>
   1c500:	ldr	r3, [sp, #224]	; 0xe0
   1c504:	str	r3, [r0]
   1c508:	b	1c014 <_start@@Base+0x7a14>
   1c50c:	add	r3, sp, #224	; 0xe0
   1c510:	str	r3, [sp]
   1c514:	ldr	r3, [pc, #-432]	; 1c36c <_start@@Base+0x7d6c>
   1c518:	mov	r2, r8
   1c51c:	mov	r1, r0
   1c520:	mov	r0, r6
   1c524:	bl	18cb0 <_start@@Base+0x46b0>
   1c528:	cmp	r8, r0
   1c52c:	cmpne	r9, r0
   1c530:	beq	1c53c <_start@@Base+0x7f3c>
   1c534:	mov	r9, r0
   1c538:	b	1c4cc <_start@@Base+0x7ecc>
   1c53c:	strd	sl, [sp, #176]	; 0xb0
   1c540:	mov	r5, r6
   1c544:	mov	r9, r0
   1c548:	b	1bc24 <_start@@Base+0x7624>
   1c54c:	mov	r2, r8
   1c550:	mov	r0, r6
   1c554:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1c558:	mov	r9, r0
   1c55c:	b	1c014 <_start@@Base+0x7a14>
   1c560:	mov	r9, r0
   1c564:	b	1c000 <_start@@Base+0x7a00>
   1c568:	strd	sl, [sp, #176]	; 0xb0
   1c56c:	ldr	r3, [r6, #20]
   1c570:	cmp	r3, #0
   1c574:	beq	1c580 <_start@@Base+0x7f80>
   1c578:	mov	r5, r6
   1c57c:	b	1bc24 <_start@@Base+0x7624>
   1c580:	ldr	r0, [r6]
   1c584:	bl	27b8c <flatcc_builder_end_table@@Base>
   1c588:	subs	r4, r0, #0
   1c58c:	beq	1c5ac <_start@@Base+0x7fac>
   1c590:	mov	r1, #0
   1c594:	ldr	r0, [r6]
   1c598:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1c59c:	cmp	r0, #0
   1c5a0:	beq	1d240 <_start@@Base+0x8c40>
   1c5a4:	str	r4, [r0]
   1c5a8:	b	1cdcc <_start@@Base+0x87cc>
   1c5ac:	mov	r5, r6
   1c5b0:	b	1bc24 <_start@@Base+0x7624>
   1c5b4:	strd	sl, [sp, #176]	; 0xb0
   1c5b8:	mov	r5, r6
   1c5bc:	b	1bc24 <_start@@Base+0x7624>
   1c5c0:	strd	sl, [sp, #176]	; 0xb0
   1c5c4:	mov	r5, r6
   1c5c8:	b	1bc24 <_start@@Base+0x7624>
   1c5cc:	strd	sl, [sp, #176]	; 0xb0
   1c5d0:	mov	r5, r6
   1c5d4:	b	1bc24 <_start@@Base+0x7624>
   1c5d8:	strd	sl, [sp, #176]	; 0xb0
   1c5dc:	mov	r5, r6
   1c5e0:	b	1bc24 <_start@@Base+0x7624>
   1c5e4:	strd	sl, [sp, #176]	; 0xb0
   1c5e8:	mov	r5, r6
   1c5ec:	b	1bc24 <_start@@Base+0x7624>
   1c5f0:	strd	sl, [sp, #176]	; 0xb0
   1c5f4:	mov	r5, r6
   1c5f8:	b	1bc24 <_start@@Base+0x7624>
   1c5fc:	strd	sl, [sp, #176]	; 0xb0
   1c600:	mov	r5, r6
   1c604:	b	1bc24 <_start@@Base+0x7624>
   1c608:	strd	sl, [sp, #176]	; 0xb0
   1c60c:	mov	r5, r6
   1c610:	b	1bc24 <_start@@Base+0x7624>
   1c614:	strd	sl, [sp, #176]	; 0xb0
   1c618:	mov	r5, r6
   1c61c:	b	1bc24 <_start@@Base+0x7624>
   1c620:	strd	sl, [sp, #176]	; 0xb0
   1c624:	mov	r5, r6
   1c628:	b	1bc24 <_start@@Base+0x7624>
   1c62c:	strd	sl, [sp, #176]	; 0xb0
   1c630:	mov	r5, r6
   1c634:	b	1bc24 <_start@@Base+0x7624>
   1c638:	strd	sl, [sp, #176]	; 0xb0
   1c63c:	mov	r5, r6
   1c640:	b	1bc24 <_start@@Base+0x7624>
   1c644:	mov	r4, r0
   1c648:	b	1b440 <_start@@Base+0x6e40>
   1c64c:	mov	r3, #6
   1c650:	mov	r2, r8
   1c654:	mov	r1, r4
   1c658:	mov	r0, r6
   1c65c:	bl	19da4 <_start@@Base+0x57a4>
   1c660:	mov	r9, r0
   1c664:	cmp	r4, r0
   1c668:	beq	1cd80 <_start@@Base+0x8780>
   1c66c:	mov	r1, #2
   1c670:	ldr	r0, [r6]
   1c674:	bl	270b4 <flatcc_builder_start_table@@Base>
   1c678:	cmp	r0, #0
   1c67c:	beq	1c6a0 <_start@@Base+0x80a0>
   1c680:	mov	r5, r6
   1c684:	mov	r3, #33	; 0x21
   1c688:	mov	r2, r8
   1c68c:	mov	r1, r9
   1c690:	mov	r0, r5
   1c694:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1c698:	mov	r9, r0
   1c69c:	b	1bc3c <_start@@Base+0x763c>
   1c6a0:	add	r3, sp, #220	; 0xdc
   1c6a4:	mov	r2, r8
   1c6a8:	mov	r1, r9
   1c6ac:	mov	r0, r6
   1c6b0:	bl	1966c <_start@@Base+0x506c>
   1c6b4:	mov	r9, r0
   1c6b8:	add	r5, pc, #872	; 0x368
   1c6bc:	ldrd	r4, [r5]
   1c6c0:	movw	r3, #16496	; 0x4070
   1c6c4:	movt	r3, #5
   1c6c8:	str	r3, [sp, #204]	; 0xcc
   1c6cc:	add	r3, r3, #240	; 0xf0
   1c6d0:	str	r3, [sp, #200]	; 0xc8
   1c6d4:	ldrd	sl, [sp, #184]	; 0xb8
   1c6d8:	b	1cbb4 <_start@@Base+0x85b4>
   1c6dc:	mov	r3, #5
   1c6e0:	mov	r2, r8
   1c6e4:	mov	r1, r9
   1c6e8:	mov	r0, r6
   1c6ec:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1c6f0:	mov	r9, r0
   1c6f4:	b	1cbd8 <_start@@Base+0x85d8>
   1c6f8:	ldrb	r0, [r9, #7]
   1c6fc:	mov	r1, #0
   1c700:	ldrb	r2, [r9, #6]
   1c704:	orr	r2, r0, r2, lsl #8
   1c708:	mov	r3, r1
   1c70c:	ldrb	r0, [r9, #5]
   1c710:	orr	r2, r2, r0, lsl #16
   1c714:	ldrb	r0, [r9, #4]
   1c718:	orr	r2, r2, r0, lsl #24
   1c71c:	ldrb	r0, [r9, #3]
   1c720:	orr	r3, r3, r0
   1c724:	ldrb	r0, [r9, #2]
   1c728:	orr	r3, r3, r0, lsl #8
   1c72c:	ldrb	r0, [r9, #1]
   1c730:	orr	r3, r3, r0, lsl #16
   1c734:	ldrb	r0, [r9]
   1c738:	mov	sl, r2
   1c73c:	orr	fp, r3, r0, lsl #24
   1c740:	cmp	fp, r5
   1c744:	cmpeq	sl, r4
   1c748:	bne	1cb28 <_start@@Base+0x8528>
   1c74c:	add	r7, r9, #8
   1c750:	sub	r3, r8, r7
   1c754:	cmp	r3, #8
   1c758:	bhi	1c7ec <_start@@Base+0x81ec>
   1c75c:	sub	r3, r3, #1
   1c760:	cmp	r3, #7
   1c764:	ldrls	pc, [pc, r3, lsl #2]
   1c768:	b	1c8e4 <_start@@Base+0x82e4>
   1c76c:	ldrdeq	ip, [r1], -r8
   1c770:	andeq	ip, r1, ip, asr #17
   1c774:	andeq	ip, r1, r0, asr #17
   1c778:			; <UNDEFINED> instruction: 0x0001c8b4
   1c77c:	andeq	ip, r1, r8, lsr #17
   1c780:	muleq	r1, ip, r8
   1c784:	muleq	r1, r0, r8
   1c788:	andeq	ip, r1, ip, ror #15
   1c78c:	mov	r0, #0
   1c790:	mov	r1, #0
   1c794:	b	1c700 <_start@@Base+0x8100>
   1c798:	mov	r2, #0
   1c79c:	mov	r3, r2
   1c7a0:	b	1c70c <_start@@Base+0x810c>
   1c7a4:	mov	r2, #0
   1c7a8:	mov	r3, r2
   1c7ac:	b	1c714 <_start@@Base+0x8114>
   1c7b0:	mov	r2, #0
   1c7b4:	mov	r3, r2
   1c7b8:	b	1c71c <_start@@Base+0x811c>
   1c7bc:	mov	r2, #0
   1c7c0:	mov	r3, r2
   1c7c4:	b	1c724 <_start@@Base+0x8124>
   1c7c8:	mov	r2, #0
   1c7cc:	mov	r3, r2
   1c7d0:	b	1c72c <_start@@Base+0x812c>
   1c7d4:	mov	r2, #0
   1c7d8:	mov	r3, r2
   1c7dc:	b	1c734 <_start@@Base+0x8134>
   1c7e0:	mov	sl, #0
   1c7e4:	mov	fp, #0
   1c7e8:	b	1c740 <_start@@Base+0x8140>
   1c7ec:	ldrb	r0, [r9, #15]
   1c7f0:	mov	r1, #0
   1c7f4:	ldrb	r2, [r9, #14]
   1c7f8:	orr	r2, r0, r2, lsl #8
   1c7fc:	mov	r3, r1
   1c800:	ldrb	r0, [r9, #13]
   1c804:	orr	r2, r2, r0, lsl #16
   1c808:	ldrb	r0, [r9, #12]
   1c80c:	orr	r2, r2, r0, lsl #24
   1c810:	ldrb	r0, [r9, #11]
   1c814:	orr	r3, r3, r0
   1c818:	ldrb	r0, [r9, #10]
   1c81c:	orr	r3, r3, r0, lsl #8
   1c820:	ldrb	r0, [r9, #9]
   1c824:	orr	r3, r3, r0, lsl #16
   1c828:	ldrb	r0, [r9, #8]
   1c82c:	str	r2, [sp, #32]
   1c830:	orr	r3, r3, r0, lsl #24
   1c834:	str	r3, [sp, #36]	; 0x24
   1c838:	ldrd	r2, [sp, #32]
   1c83c:	add	r1, pc, #492	; 0x1ec
   1c840:	ldrd	r0, [r1]
   1c844:	cmp	r3, r1
   1c848:	cmpeq	r2, r0
   1c84c:	beq	1c8f4 <_start@@Base+0x82f4>
   1c850:	ldrd	r2, [sp, #32]
   1c854:	bic	r1, r2, #255	; 0xff
   1c858:	str	r1, [sp, #96]	; 0x60
   1c85c:	str	r3, [sp, #100]	; 0x64
   1c860:	ldrd	r2, [sp, #96]	; 0x60
   1c864:	add	r1, pc, #460	; 0x1cc
   1c868:	ldrd	r0, [r1]
   1c86c:	cmp	r3, r1
   1c870:	cmpeq	r2, r0
   1c874:	beq	1ca48 <_start@@Base+0x8448>
   1c878:	mov	r2, r8
   1c87c:	mov	r1, r7
   1c880:	mov	r0, r6
   1c884:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1c888:	mov	r9, r0
   1c88c:	b	1cb3c <_start@@Base+0x853c>
   1c890:	mov	r0, #0
   1c894:	mov	r1, #0
   1c898:	b	1c7f4 <_start@@Base+0x81f4>
   1c89c:	mov	r2, #0
   1c8a0:	mov	r3, r2
   1c8a4:	b	1c800 <_start@@Base+0x8200>
   1c8a8:	mov	r2, #0
   1c8ac:	mov	r3, r2
   1c8b0:	b	1c808 <_start@@Base+0x8208>
   1c8b4:	mov	r2, #0
   1c8b8:	mov	r3, r2
   1c8bc:	b	1c810 <_start@@Base+0x8210>
   1c8c0:	mov	r2, #0
   1c8c4:	mov	r3, r2
   1c8c8:	b	1c818 <_start@@Base+0x8218>
   1c8cc:	mov	r2, #0
   1c8d0:	mov	r3, r2
   1c8d4:	b	1c820 <_start@@Base+0x8220>
   1c8d8:	mov	r2, #0
   1c8dc:	mov	r3, r2
   1c8e0:	b	1c828 <_start@@Base+0x8228>
   1c8e4:	mov	r2, #0
   1c8e8:	mov	r3, #0
   1c8ec:	strd	r2, [sp, #32]
   1c8f0:	b	1c838 <_start@@Base+0x8238>
   1c8f4:	add	r9, r9, #16
   1c8f8:	mov	r1, r8
   1c8fc:	mov	r0, r9
   1c900:	bl	146f0 <_start@@Base+0xf0>
   1c904:	and	r3, r0, #-16777216	; 0xff000000
   1c908:	str	r3, [sp, #128]	; 0x80
   1c90c:	str	r1, [sp, #132]	; 0x84
   1c910:	ldrd	r2, [sp, #128]	; 0x80
   1c914:	add	r1, pc, #292	; 0x124
   1c918:	ldrd	r0, [r1]
   1c91c:	cmp	r3, r1
   1c920:	cmpeq	r2, r0
   1c924:	beq	1c940 <_start@@Base+0x8340>
   1c928:	mov	r2, r8
   1c92c:	mov	r1, r9
   1c930:	mov	r0, r6
   1c934:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1c938:	mov	r9, r0
   1c93c:	b	1cb3c <_start@@Base+0x853c>
   1c940:	mov	r3, #5
   1c944:	mov	r2, r8
   1c948:	mov	r1, r9
   1c94c:	mov	r0, r6
   1c950:	bl	19da4 <_start@@Base+0x57a4>
   1c954:	mov	r7, r0
   1c958:	cmp	r9, r0
   1c95c:	beq	1ca0c <_start@@Base+0x840c>
   1c960:	mov	r3, #0
   1c964:	str	r3, [sp, #224]	; 0xe0
   1c968:	add	r3, sp, #224	; 0xe0
   1c96c:	mov	r2, r8
   1c970:	mov	r1, r0
   1c974:	mov	r0, r6
   1c978:	bl	17d94 <_start@@Base+0x3794>
   1c97c:	mov	r9, r0
   1c980:	cmp	r7, r0
   1c984:	beq	1c9c8 <_start@@Base+0x83c8>
   1c988:	ldr	r3, [sp, #224]	; 0xe0
   1c98c:	cmp	r3, #0
   1c990:	bne	1c9a0 <_start@@Base+0x83a0>
   1c994:	ldr	r3, [r6, #8]
   1c998:	tst	r3, #2
   1c99c:	beq	1cb3c <_start@@Base+0x853c>
   1c9a0:	mov	r3, #4
   1c9a4:	mov	r2, r3
   1c9a8:	mov	r1, #1
   1c9ac:	ldr	r0, [r6]
   1c9b0:	bl	28c78 <flatcc_builder_table_add@@Base>
   1c9b4:	cmp	r0, #0
   1c9b8:	beq	1cd68 <_start@@Base+0x8768>
   1c9bc:	ldr	r3, [sp, #224]	; 0xe0
   1c9c0:	str	r3, [r0]
   1c9c4:	b	1cb3c <_start@@Base+0x853c>
   1c9c8:	add	r3, sp, #224	; 0xe0
   1c9cc:	str	r3, [sp]
   1c9d0:	ldr	r3, [sp, #204]	; 0xcc
   1c9d4:	add	r3, r3, #228	; 0xe4
   1c9d8:	mov	r2, r8
   1c9dc:	mov	r1, r0
   1c9e0:	mov	r0, r6
   1c9e4:	bl	18cb0 <_start@@Base+0x46b0>
   1c9e8:	cmp	r8, r0
   1c9ec:	cmpne	r9, r0
   1c9f0:	beq	1c9fc <_start@@Base+0x83fc>
   1c9f4:	mov	r9, r0
   1c9f8:	b	1c988 <_start@@Base+0x8388>
   1c9fc:	strd	sl, [sp, #184]	; 0xb8
   1ca00:	mov	r5, r6
   1ca04:	mov	r9, r0
   1ca08:	b	1c684 <_start@@Base+0x8084>
   1ca0c:	mov	r2, r8
   1ca10:	mov	r1, r0
   1ca14:	mov	r0, r6
   1ca18:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ca1c:	mov	r9, r0
   1ca20:	b	1cb3c <_start@@Base+0x853c>
   1ca24:	nop	{0}
   1ca28:	svcpl	0x00626262
   1ca2c:	cmnvs	r1, r1, ror #2
   1ca30:	cmnvs	r2, pc, asr r4
   1ca34:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1ca38:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1ca3c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1ca40:	movwvc	r0, #0
   1ca44:	cmnvc	r4, #112, 10	; 0x1c000000
   1ca48:	mov	r3, #7
   1ca4c:	mov	r2, r8
   1ca50:	mov	r1, r7
   1ca54:	mov	r0, r6
   1ca58:	bl	19da4 <_start@@Base+0x57a4>
   1ca5c:	mov	r1, r0
   1ca60:	cmp	r7, r0
   1ca64:	beq	1cb14 <_start@@Base+0x8514>
   1ca68:	mov	r2, #0
   1ca6c:	mov	r3, #0
   1ca70:	strd	r2, [sp, #224]	; 0xe0
   1ca74:	add	r3, sp, #224	; 0xe0
   1ca78:	mov	r2, r8
   1ca7c:	mov	r7, r0
   1ca80:	mov	r0, r6
   1ca84:	bl	17fc0 <_start@@Base+0x39c0>
   1ca88:	mov	r9, r0
   1ca8c:	cmp	r7, r0
   1ca90:	beq	1cad4 <_start@@Base+0x84d4>
   1ca94:	ldrd	r2, [sp, #224]	; 0xe0
   1ca98:	orrs	r3, r2, r3
   1ca9c:	bne	1caac <_start@@Base+0x84ac>
   1caa0:	ldr	r3, [r6, #8]
   1caa4:	tst	r3, #2
   1caa8:	beq	1cb3c <_start@@Base+0x853c>
   1caac:	mov	r3, #8
   1cab0:	mov	r2, r3
   1cab4:	mov	r1, #0
   1cab8:	ldr	r0, [r6]
   1cabc:	bl	28c78 <flatcc_builder_table_add@@Base>
   1cac0:	cmp	r0, #0
   1cac4:	beq	1cd74 <_start@@Base+0x8774>
   1cac8:	ldrd	r2, [sp, #224]	; 0xe0
   1cacc:	strd	r2, [r0]
   1cad0:	b	1cb3c <_start@@Base+0x853c>
   1cad4:	add	r3, sp, #224	; 0xe0
   1cad8:	str	r3, [sp]
   1cadc:	ldr	r3, [sp, #200]	; 0xc8
   1cae0:	mov	r2, r8
   1cae4:	mov	r1, r0
   1cae8:	mov	r0, r6
   1caec:	bl	180ec <_start@@Base+0x3aec>
   1caf0:	cmp	r8, r0
   1caf4:	cmpne	r9, r0
   1caf8:	beq	1cb04 <_start@@Base+0x8504>
   1cafc:	mov	r9, r0
   1cb00:	b	1ca94 <_start@@Base+0x8494>
   1cb04:	strd	sl, [sp, #184]	; 0xb8
   1cb08:	mov	r5, r6
   1cb0c:	mov	r9, r0
   1cb10:	b	1c684 <_start@@Base+0x8084>
   1cb14:	mov	r2, r8
   1cb18:	mov	r0, r6
   1cb1c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1cb20:	mov	r9, r0
   1cb24:	b	1cb3c <_start@@Base+0x853c>
   1cb28:	mov	r2, r8
   1cb2c:	mov	r1, r9
   1cb30:	mov	r0, r6
   1cb34:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1cb38:	mov	r9, r0
   1cb3c:	sub	r3, r8, r9
   1cb40:	cmp	r3, #1
   1cb44:	ble	1cb58 <_start@@Base+0x8558>
   1cb48:	ldrb	r3, [r9]
   1cb4c:	cmp	r3, #32
   1cb50:	bhi	1cb6c <_start@@Base+0x856c>
   1cb54:	beq	1cc14 <_start@@Base+0x8614>
   1cb58:	mov	r2, r8
   1cb5c:	mov	r1, r9
   1cb60:	mov	r0, r6
   1cb64:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1cb68:	mov	r9, r0
   1cb6c:	cmp	r8, r9
   1cb70:	moveq	r3, #0
   1cb74:	streq	r3, [sp, #220]	; 0xdc
   1cb78:	beq	1cbb4 <_start@@Base+0x85b4>
   1cb7c:	ldrb	r3, [r9]
   1cb80:	cmp	r3, #44	; 0x2c
   1cb84:	beq	1cc74 <_start@@Base+0x8674>
   1cb88:	mov	r3, #0
   1cb8c:	str	r3, [sp, #220]	; 0xdc
   1cb90:	ldrb	r3, [r9]
   1cb94:	cmp	r3, #125	; 0x7d
   1cb98:	beq	1cc28 <_start@@Base+0x8628>
   1cb9c:	mov	r3, #10
   1cba0:	mov	r2, r8
   1cba4:	mov	r1, r9
   1cba8:	mov	r0, r6
   1cbac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1cbb0:	mov	r9, r0
   1cbb4:	ldr	r3, [sp, #220]	; 0xdc
   1cbb8:	cmp	r3, #0
   1cbbc:	beq	1cd1c <_start@@Base+0x871c>
   1cbc0:	cmp	r8, r9
   1cbc4:	beq	1cbd8 <_start@@Base+0x85d8>
   1cbc8:	ldrb	r3, [r9]
   1cbcc:	cmp	r3, #34	; 0x22
   1cbd0:	addeq	r9, r9, #1
   1cbd4:	bne	1c6dc <_start@@Base+0x80dc>
   1cbd8:	sub	r3, r8, r9
   1cbdc:	cmp	r3, #8
   1cbe0:	bhi	1c6f8 <_start@@Base+0x80f8>
   1cbe4:	sub	r3, r3, #1
   1cbe8:	cmp	r3, #7
   1cbec:	ldrls	pc, [pc, r3, lsl #2]
   1cbf0:	b	1c7e0 <_start@@Base+0x81e0>
   1cbf4:	ldrdeq	ip, [r1], -r4
   1cbf8:	andeq	ip, r1, r8, asr #15
   1cbfc:			; <UNDEFINED> instruction: 0x0001c7bc
   1cc00:			; <UNDEFINED> instruction: 0x0001c7b0
   1cc04:	andeq	ip, r1, r4, lsr #15
   1cc08:	muleq	r1, r8, r7
   1cc0c:	andeq	ip, r1, ip, lsl #15
   1cc10:	strdeq	ip, [r1], -r8
   1cc14:	ldrb	r3, [r9, #1]
   1cc18:	cmp	r3, #32
   1cc1c:	addhi	r9, r9, #1
   1cc20:	bls	1cb58 <_start@@Base+0x8558>
   1cc24:	b	1cb6c <_start@@Base+0x856c>
   1cc28:	add	r1, r9, #1
   1cc2c:	sub	r3, r8, r1
   1cc30:	cmp	r3, #1
   1cc34:	ble	1cc4c <_start@@Base+0x864c>
   1cc38:	ldrb	r3, [r9, #1]
   1cc3c:	cmp	r3, #32
   1cc40:	movhi	r9, r1
   1cc44:	bhi	1cbb4 <_start@@Base+0x85b4>
   1cc48:	beq	1cc60 <_start@@Base+0x8660>
   1cc4c:	mov	r2, r8
   1cc50:	mov	r0, r6
   1cc54:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1cc58:	mov	r9, r0
   1cc5c:	b	1cbb4 <_start@@Base+0x85b4>
   1cc60:	ldrb	r3, [r9, #2]
   1cc64:	cmp	r3, #32
   1cc68:	addhi	r9, r9, #2
   1cc6c:	bls	1cc4c <_start@@Base+0x864c>
   1cc70:	b	1cbb4 <_start@@Base+0x85b4>
   1cc74:	add	r1, r9, #1
   1cc78:	sub	r3, r8, r1
   1cc7c:	cmp	r3, #1
   1cc80:	ble	1cc98 <_start@@Base+0x8698>
   1cc84:	ldrb	r3, [r9, #1]
   1cc88:	cmp	r3, #32
   1cc8c:	movhi	r9, r1
   1cc90:	bhi	1cca8 <_start@@Base+0x86a8>
   1cc94:	beq	1cce4 <_start@@Base+0x86e4>
   1cc98:	mov	r2, r8
   1cc9c:	mov	r0, r6
   1cca0:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1cca4:	mov	r9, r0
   1cca8:	cmp	r8, r9
   1ccac:	beq	1ccf8 <_start@@Base+0x86f8>
   1ccb0:	ldrb	r3, [r9]
   1ccb4:	cmp	r3, #125	; 0x7d
   1ccb8:	movne	r3, #1
   1ccbc:	strne	r3, [sp, #220]	; 0xdc
   1ccc0:	bne	1cbb4 <_start@@Base+0x85b4>
   1ccc4:	mov	r3, #0
   1ccc8:	str	r3, [sp, #220]	; 0xdc
   1cccc:	mov	r2, r8
   1ccd0:	add	r1, r9, #1
   1ccd4:	mov	r0, r6
   1ccd8:	bl	1809c <_start@@Base+0x3a9c>
   1ccdc:	mov	r9, r0
   1cce0:	b	1cbb4 <_start@@Base+0x85b4>
   1cce4:	ldrb	r3, [r9, #2]
   1cce8:	cmp	r3, #32
   1ccec:	addhi	r9, r9, #2
   1ccf0:	bls	1cc98 <_start@@Base+0x8698>
   1ccf4:	b	1cca8 <_start@@Base+0x86a8>
   1ccf8:	mov	r3, #0
   1ccfc:	str	r3, [sp, #220]	; 0xdc
   1cd00:	mov	r3, #10
   1cd04:	mov	r2, r8
   1cd08:	mov	r1, r9
   1cd0c:	mov	r0, r6
   1cd10:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1cd14:	mov	r9, r0
   1cd18:	b	1cbb4 <_start@@Base+0x85b4>
   1cd1c:	strd	sl, [sp, #184]	; 0xb8
   1cd20:	ldr	r3, [r6, #20]
   1cd24:	cmp	r3, #0
   1cd28:	beq	1cd34 <_start@@Base+0x8734>
   1cd2c:	mov	r5, r6
   1cd30:	b	1c684 <_start@@Base+0x8084>
   1cd34:	ldr	r0, [r6]
   1cd38:	bl	27b8c <flatcc_builder_end_table@@Base>
   1cd3c:	subs	r4, r0, #0
   1cd40:	beq	1cd60 <_start@@Base+0x8760>
   1cd44:	mov	r1, #2
   1cd48:	ldr	r0, [r6]
   1cd4c:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1cd50:	cmp	r0, #0
   1cd54:	beq	1d238 <_start@@Base+0x8c38>
   1cd58:	str	r4, [r0]
   1cd5c:	b	1cdcc <_start@@Base+0x87cc>
   1cd60:	mov	r5, r6
   1cd64:	b	1c684 <_start@@Base+0x8084>
   1cd68:	strd	sl, [sp, #184]	; 0xb8
   1cd6c:	mov	r5, r6
   1cd70:	b	1c684 <_start@@Base+0x8084>
   1cd74:	strd	sl, [sp, #184]	; 0xb8
   1cd78:	mov	r5, r6
   1cd7c:	b	1c684 <_start@@Base+0x8084>
   1cd80:	mov	r2, r8
   1cd84:	mov	r1, r0
   1cd88:	mov	r0, r6
   1cd8c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1cd90:	mov	r9, r0
   1cd94:	b	1cdcc <_start@@Base+0x87cc>
   1cd98:	mov	r4, r0
   1cd9c:	b	1b458 <_start@@Base+0x6e58>
   1cda0:	mov	r2, r8
   1cda4:	mov	r1, ip
   1cda8:	mov	r0, r6
   1cdac:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1cdb0:	mov	r9, r0
   1cdb4:	b	1cdcc <_start@@Base+0x87cc>
   1cdb8:	mov	r2, r8
   1cdbc:	mov	r1, r9
   1cdc0:	mov	r0, r6
   1cdc4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1cdc8:	mov	r9, r0
   1cdcc:	sub	r3, r8, r9
   1cdd0:	cmp	r3, #1
   1cdd4:	ble	1cde8 <_start@@Base+0x87e8>
   1cdd8:	ldrb	r3, [r9]
   1cddc:	cmp	r3, #32
   1cde0:	bhi	1cdfc <_start@@Base+0x87fc>
   1cde4:	beq	1cea4 <_start@@Base+0x88a4>
   1cde8:	mov	r2, r8
   1cdec:	mov	r1, r9
   1cdf0:	mov	r0, r6
   1cdf4:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1cdf8:	mov	r9, r0
   1cdfc:	cmp	r8, r9
   1ce00:	moveq	r3, #0
   1ce04:	streq	r3, [sp, #212]	; 0xd4
   1ce08:	beq	1ce44 <_start@@Base+0x8844>
   1ce0c:	ldrb	r3, [r9]
   1ce10:	cmp	r3, #44	; 0x2c
   1ce14:	beq	1cf04 <_start@@Base+0x8904>
   1ce18:	mov	r3, #0
   1ce1c:	str	r3, [sp, #212]	; 0xd4
   1ce20:	ldrb	r3, [r9]
   1ce24:	cmp	r3, #125	; 0x7d
   1ce28:	beq	1ceb8 <_start@@Base+0x88b8>
   1ce2c:	mov	r3, #10
   1ce30:	mov	r2, r8
   1ce34:	mov	r1, r9
   1ce38:	mov	r0, r6
   1ce3c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1ce40:	mov	r9, r0
   1ce44:	ldr	r3, [sp, #212]	; 0xd4
   1ce48:	cmp	r3, #0
   1ce4c:	beq	1cfac <_start@@Base+0x89ac>
   1ce50:	cmp	r8, r9
   1ce54:	beq	1ce68 <_start@@Base+0x8868>
   1ce58:	ldrb	r3, [r9]
   1ce5c:	cmp	r3, #34	; 0x22
   1ce60:	addeq	r9, r9, #1
   1ce64:	bne	1b25c <_start@@Base+0x6c5c>
   1ce68:	sub	r3, r8, r9
   1ce6c:	cmp	r3, #8
   1ce70:	bhi	1b278 <_start@@Base+0x6c78>
   1ce74:	sub	r3, r3, #1
   1ce78:	cmp	r3, #7
   1ce7c:	ldrls	pc, [pc, r3, lsl #2]
   1ce80:	b	1b370 <_start@@Base+0x6d70>
   1ce84:	andeq	fp, r1, r4, ror #6
   1ce88:	andeq	fp, r1, r8, asr r3
   1ce8c:	andeq	fp, r1, ip, asr #6
   1ce90:	andeq	fp, r1, r0, asr #6
   1ce94:	andeq	fp, r1, r4, lsr r3
   1ce98:	andeq	fp, r1, r8, lsr #6
   1ce9c:	andeq	fp, r1, ip, lsl r3
   1cea0:	andeq	fp, r1, r8, ror r2
   1cea4:	ldrb	r3, [r9, #1]
   1cea8:	cmp	r3, #32
   1ceac:	addhi	r9, r9, #1
   1ceb0:	bls	1cde8 <_start@@Base+0x87e8>
   1ceb4:	b	1cdfc <_start@@Base+0x87fc>
   1ceb8:	add	r1, r9, #1
   1cebc:	sub	r3, r8, r1
   1cec0:	cmp	r3, #1
   1cec4:	ble	1cedc <_start@@Base+0x88dc>
   1cec8:	ldrb	r3, [r9, #1]
   1cecc:	cmp	r3, #32
   1ced0:	movhi	r9, r1
   1ced4:	bhi	1ce44 <_start@@Base+0x8844>
   1ced8:	beq	1cef0 <_start@@Base+0x88f0>
   1cedc:	mov	r2, r8
   1cee0:	mov	r0, r6
   1cee4:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1cee8:	mov	r9, r0
   1ceec:	b	1ce44 <_start@@Base+0x8844>
   1cef0:	ldrb	r3, [r9, #2]
   1cef4:	cmp	r3, #32
   1cef8:	addhi	r9, r9, #2
   1cefc:	bls	1cedc <_start@@Base+0x88dc>
   1cf00:	b	1ce44 <_start@@Base+0x8844>
   1cf04:	add	r1, r9, #1
   1cf08:	sub	r3, r8, r1
   1cf0c:	cmp	r3, #1
   1cf10:	ble	1cf28 <_start@@Base+0x8928>
   1cf14:	ldrb	r3, [r9, #1]
   1cf18:	cmp	r3, #32
   1cf1c:	movhi	r9, r1
   1cf20:	bhi	1cf38 <_start@@Base+0x8938>
   1cf24:	beq	1cf74 <_start@@Base+0x8974>
   1cf28:	mov	r2, r8
   1cf2c:	mov	r0, r6
   1cf30:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1cf34:	mov	r9, r0
   1cf38:	cmp	r8, r9
   1cf3c:	beq	1cf88 <_start@@Base+0x8988>
   1cf40:	ldrb	r3, [r9]
   1cf44:	cmp	r3, #125	; 0x7d
   1cf48:	movne	r3, #1
   1cf4c:	strne	r3, [sp, #212]	; 0xd4
   1cf50:	bne	1ce44 <_start@@Base+0x8844>
   1cf54:	mov	r3, #0
   1cf58:	str	r3, [sp, #212]	; 0xd4
   1cf5c:	mov	r2, r8
   1cf60:	add	r1, r9, #1
   1cf64:	mov	r0, r6
   1cf68:	bl	1809c <_start@@Base+0x3a9c>
   1cf6c:	mov	r9, r0
   1cf70:	b	1ce44 <_start@@Base+0x8844>
   1cf74:	ldrb	r3, [r9, #2]
   1cf78:	cmp	r3, #32
   1cf7c:	addhi	r9, r9, #2
   1cf80:	bls	1cf28 <_start@@Base+0x8928>
   1cf84:	b	1cf38 <_start@@Base+0x8938>
   1cf88:	mov	r3, #0
   1cf8c:	str	r3, [sp, #212]	; 0xd4
   1cf90:	mov	r3, #10
   1cf94:	mov	r2, r8
   1cf98:	mov	r1, r9
   1cf9c:	mov	r0, r6
   1cfa0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1cfa4:	mov	r9, r0
   1cfa8:	b	1ce44 <_start@@Base+0x8844>
   1cfac:	mov	r5, r6
   1cfb0:	ldr	r3, [r6, #20]
   1cfb4:	cmp	r3, #0
   1cfb8:	bne	1bc3c <_start@@Base+0x763c>
   1cfbc:	ldr	r0, [r6]
   1cfc0:	bl	27b8c <flatcc_builder_end_table@@Base>
   1cfc4:	str	r0, [sp, #240]	; 0xf0
   1cfc8:	cmp	r0, #0
   1cfcc:	bne	1bc54 <_start@@Base+0x7654>
   1cfd0:	b	1bc3c <_start@@Base+0x763c>
   1cfd4:	mov	r2, r8
   1cfd8:	mov	r1, r4
   1cfdc:	mov	r0, r5
   1cfe0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1cfe4:	mov	r9, r0
   1cfe8:	b	1d018 <_start@@Base+0x8a18>
   1cfec:	mov	r2, r8
   1cff0:	mov	r1, r4
   1cff4:	mov	r0, r5
   1cff8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1cffc:	mov	r9, r0
   1d000:	b	1d018 <_start@@Base+0x8a18>
   1d004:	mov	r2, r8
   1d008:	mov	r1, r4
   1d00c:	mov	r0, r5
   1d010:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1d014:	mov	r9, r0
   1d018:	add	r3, sp, #244	; 0xf4
   1d01c:	mov	r2, r8
   1d020:	mov	r1, r9
   1d024:	mov	r0, r5
   1d028:	bl	1a448 <_start@@Base+0x5e48>
   1d02c:	mov	r4, r0
   1d030:	ldr	r3, [sp, #244]	; 0xf4
   1d034:	cmp	r3, #0
   1d038:	beq	1d18c <_start@@Base+0x8b8c>
   1d03c:	cmp	r8, r4
   1d040:	beq	1b19c <_start@@Base+0x6b9c>
   1d044:	ldrb	r3, [r4]
   1d048:	cmp	r3, #34	; 0x22
   1d04c:	addeq	r4, r4, #1
   1d050:	bne	1b028 <_start@@Base+0x6a28>
   1d054:	sub	r3, r8, r4
   1d058:	cmp	r3, #8
   1d05c:	bls	1b044 <_start@@Base+0x6a44>
   1d060:	ldrb	r0, [r4, #7]
   1d064:	mov	r1, #0
   1d068:	ldrb	r2, [r4, #6]
   1d06c:	orr	r2, r0, r2, lsl #8
   1d070:	mov	r3, r1
   1d074:	ldrb	r0, [r4, #5]
   1d078:	orr	r2, r2, r0, lsl #16
   1d07c:	ldrb	r0, [r4, #4]
   1d080:	orr	r2, r2, r0, lsl #24
   1d084:	ldrb	r0, [r4, #3]
   1d088:	orr	r3, r3, r0
   1d08c:	ldrb	r0, [r4, #2]
   1d090:	orr	r3, r3, r0, lsl #8
   1d094:	ldrb	r0, [r4, #1]
   1d098:	orr	r3, r3, r0, lsl #16
   1d09c:	ldrb	r0, [r4]
   1d0a0:	mov	sl, r2
   1d0a4:	orr	fp, r3, r0, lsl #24
   1d0a8:	add	r3, pc, #408	; 0x198
   1d0ac:	ldrd	r2, [r3]
   1d0b0:	cmp	fp, r3
   1d0b4:	cmpeq	sl, r2
   1d0b8:	beq	1b0d4 <_start@@Base+0x6ad4>
   1d0bc:	bic	r3, sl, #255	; 0xff
   1d0c0:	str	r3, [sp, #64]	; 0x40
   1d0c4:	str	fp, [sp, #68]	; 0x44
   1d0c8:	add	r3, pc, #384	; 0x180
   1d0cc:	ldrd	r2, [r3]
   1d0d0:	ldrd	r0, [sp, #64]	; 0x40
   1d0d4:	cmp	r1, r3
   1d0d8:	cmpeq	r0, r2
   1d0dc:	beq	1b1a8 <_start@@Base+0x6ba8>
   1d0e0:	lsr	r3, sl, #16
   1d0e4:	lsl	r3, r3, #16
   1d0e8:	str	r3, [sp, #40]	; 0x28
   1d0ec:	str	fp, [sp, #44]	; 0x2c
   1d0f0:	add	r3, pc, #352	; 0x160
   1d0f4:	ldrd	r2, [r3]
   1d0f8:	ldrd	r0, [sp, #40]	; 0x28
   1d0fc:	cmp	r1, r3
   1d100:	cmpeq	r0, r2
   1d104:	beq	1b1fc <_start@@Base+0x6bfc>
   1d108:	and	r3, sl, #-16777216	; 0xff000000
   1d10c:	str	r3, [sp, #112]	; 0x70
   1d110:	str	fp, [sp, #116]	; 0x74
   1d114:	add	r3, pc, #324	; 0x144
   1d118:	ldrd	r2, [r3]
   1d11c:	ldrd	r0, [sp, #112]	; 0x70
   1d120:	cmp	r1, r3
   1d124:	cmpeq	r0, r2
   1d128:	bne	1d004 <_start@@Base+0x8a04>
   1d12c:	mov	r3, #5
   1d130:	mov	r2, r8
   1d134:	mov	r1, r4
   1d138:	mov	r0, r5
   1d13c:	bl	19da4 <_start@@Base+0x57a4>
   1d140:	cmp	r0, r4
   1d144:	beq	1cfec <_start@@Base+0x89ec>
   1d148:	add	r3, sp, #240	; 0xf0
   1d14c:	mov	r2, r8
   1d150:	mov	r1, r0
   1d154:	mov	r0, r5
   1d158:	bl	1a5a4 <_start@@Base+0x5fa4>
   1d15c:	mov	r9, r0
   1d160:	ldr	r3, [sp, #240]	; 0xf0
   1d164:	cmp	r3, #0
   1d168:	beq	1d204 <_start@@Base+0x8c04>
   1d16c:	mov	r1, #1
   1d170:	ldr	r0, [r5]
   1d174:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1d178:	cmp	r0, #0
   1d17c:	beq	1d218 <_start@@Base+0x8c18>
   1d180:	ldr	r3, [sp, #240]	; 0xf0
   1d184:	str	r3, [r0]
   1d188:	b	1d018 <_start@@Base+0x8a18>
   1d18c:	mov	r9, r8
   1d190:	mov	r8, r5
   1d194:	ldr	r3, [r8, #20]
   1d198:	cmp	r3, #0
   1d19c:	bne	1af9c <_start@@Base+0x699c>
   1d1a0:	ldr	r3, [sp, #236]	; 0xec
   1d1a4:	mov	r2, r9
   1d1a8:	mov	r1, r4
   1d1ac:	mov	r0, r8
   1d1b0:	bl	2eef8 <flatcc_json_parser_finalize_unions@@Base>
   1d1b4:	mov	r4, r0
   1d1b8:	ldr	r0, [r8]
   1d1bc:	bl	27b8c <flatcc_builder_end_table@@Base>
   1d1c0:	ldr	r3, [sp, #172]	; 0xac
   1d1c4:	str	r0, [r3]
   1d1c8:	cmp	r0, #0
   1d1cc:	bne	1afb4 <_start@@Base+0x69b4>
   1d1d0:	b	1af9c <_start@@Base+0x699c>
   1d1d4:	mov	r3, r8
   1d1d8:	mov	r8, r5
   1d1dc:	mov	r5, r9
   1d1e0:	mov	r9, r3
   1d1e4:	mov	r4, r5
   1d1e8:	b	1af9c <_start@@Base+0x699c>
   1d1ec:	mov	r3, r8
   1d1f0:	mov	r8, r5
   1d1f4:	mov	r5, r9
   1d1f8:	mov	r9, r3
   1d1fc:	mov	r4, r5
   1d200:	b	1af9c <_start@@Base+0x699c>
   1d204:	mov	r3, r8
   1d208:	mov	r8, r5
   1d20c:	mov	r9, r3
   1d210:	mov	r4, r0
   1d214:	b	1af9c <_start@@Base+0x699c>
   1d218:	mov	r3, r8
   1d21c:	mov	r8, r5
   1d220:	mov	r5, r9
   1d224:	mov	r9, r3
   1d228:	mov	r4, r5
   1d22c:	b	1af9c <_start@@Base+0x699c>
   1d230:	mov	r5, r6
   1d234:	b	1bc3c <_start@@Base+0x763c>
   1d238:	mov	r5, r6
   1d23c:	b	1bc3c <_start@@Base+0x763c>
   1d240:	mov	r5, r6
   1d244:	b	1bc3c <_start@@Base+0x763c>
   1d248:	cmnvs	lr, pc, asr r9
   1d24c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1d250:	cmnvs	lr, r0, lsl #18
   1d254:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1d258:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1d25c:	rsbsvc	r6, r2, r6, ror #10
   1d260:	strvs	r0, [r0, #-0]
   1d264:	stclvs	6, cr7, [pc, #-420]!	; 1d0c8 <_start@@Base+0x8ac8>
   1d268:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d26c:	strd	r6, [sp, #8]
   1d270:	strd	r8, [sp, #16]
   1d274:	strd	sl, [sp, #24]
   1d278:	str	lr, [sp, #32]
   1d27c:	sub	sp, sp, #52	; 0x34
   1d280:	mov	sl, r0
   1d284:	mov	r4, r1
   1d288:	mov	r5, r2
   1d28c:	mov	r2, #0
   1d290:	ldr	r1, [sp, #88]	; 0x58
   1d294:	str	r2, [r1]
   1d298:	cmp	r3, #9
   1d29c:	beq	1dcc8 <_start@@Base+0x96c8>
   1d2a0:	bhi	1d2e4 <_start@@Base+0x8ce4>
   1d2a4:	cmp	r3, #2
   1d2a8:	beq	1d358 <_start@@Base+0x8d58>
   1d2ac:	cmp	r3, #8
   1d2b0:	beq	1d754 <_start@@Base+0x9154>
   1d2b4:	cmp	r3, r2
   1d2b8:	beq	1d310 <_start@@Base+0x8d10>
   1d2bc:	ldr	r3, [sl, #8]
   1d2c0:	tst	r3, #1
   1d2c4:	bne	1dd48 <_start@@Base+0x9748>
   1d2c8:	mov	r3, #15
   1d2cc:	mov	r2, r5
   1d2d0:	mov	r1, r4
   1d2d4:	mov	r0, sl
   1d2d8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1d2dc:	mov	r4, r0
   1d2e0:	b	1dcf8 <_start@@Base+0x96f8>
   1d2e4:	cmp	r3, #11
   1d2e8:	beq	1dd30 <_start@@Base+0x9730>
   1d2ec:	bcc	1dd18 <_start@@Base+0x9718>
   1d2f0:	cmp	r3, #255	; 0xff
   1d2f4:	bne	1d2bc <_start@@Base+0x8cbc>
   1d2f8:	ldr	r3, [sp, #88]	; 0x58
   1d2fc:	mov	r2, r5
   1d300:	mov	r1, r4
   1d304:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   1d308:	mov	r4, r0
   1d30c:	b	1dcdc <_start@@Base+0x96dc>
   1d310:	sub	r3, r5, r4
   1d314:	cmp	r3, #3
   1d318:	ble	1d33c <_start@@Base+0x8d3c>
   1d31c:	mov	r2, #4
   1d320:	movw	r1, #58152	; 0xe328
   1d324:	movt	r1, #3
   1d328:	mov	r0, r4
   1d32c:	bl	14530 <memcmp@plt>
   1d330:	cmp	r0, #0
   1d334:	addeq	r4, r4, #4
   1d338:	beq	1dcf8 <_start@@Base+0x96f8>
   1d33c:	mov	r3, #26
   1d340:	mov	r2, r5
   1d344:	mov	r1, r4
   1d348:	mov	r0, sl
   1d34c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1d350:	mov	r4, r0
   1d354:	b	1dcf8 <_start@@Base+0x96f8>
   1d358:	mov	r1, #1
   1d35c:	ldr	r0, [r0]
   1d360:	bl	270b4 <flatcc_builder_start_table@@Base>
   1d364:	cmp	r0, #0
   1d368:	beq	1d388 <_start@@Base+0x8d88>
   1d36c:	mov	r3, #33	; 0x21
   1d370:	mov	r2, r5
   1d374:	mov	r1, r4
   1d378:	mov	r0, sl
   1d37c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1d380:	mov	r4, r0
   1d384:	b	1dcdc <_start@@Base+0x96dc>
   1d388:	add	r3, sp, #28
   1d38c:	mov	r2, r5
   1d390:	mov	r1, r4
   1d394:	mov	r0, sl
   1d398:	bl	1966c <_start@@Base+0x506c>
   1d39c:	mov	r4, r0
   1d3a0:	ldr	r3, [sp, #28]
   1d3a4:	cmp	r3, #0
   1d3a8:	beq	1d724 <_start@@Base+0x9124>
   1d3ac:	add	r7, pc, #1004	; 0x3ec
   1d3b0:	ldrd	r6, [r7]
   1d3b4:	str	sl, [sp, #8]
   1d3b8:	b	1d6cc <_start@@Base+0x90cc>
   1d3bc:	mov	r3, #5
   1d3c0:	mov	r2, r5
   1d3c4:	mov	r1, r4
   1d3c8:	ldr	r0, [sp, #8]
   1d3cc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1d3d0:	mov	r4, r0
   1d3d4:	b	1d6e4 <_start@@Base+0x90e4>
   1d3d8:	ldrb	r0, [r4, #7]
   1d3dc:	mov	r1, #0
   1d3e0:	ldrb	r2, [r4, #6]
   1d3e4:	orr	r2, r0, r2, lsl #8
   1d3e8:	mov	r3, r1
   1d3ec:	ldrb	r0, [r4, #5]
   1d3f0:	orr	r2, r2, r0, lsl #16
   1d3f4:	ldrb	r0, [r4, #4]
   1d3f8:	orr	r2, r2, r0, lsl #24
   1d3fc:	ldrb	r0, [r4, #3]
   1d400:	orr	r3, r3, r0
   1d404:	ldrb	r0, [r4, #2]
   1d408:	orr	r3, r3, r0, lsl #8
   1d40c:	ldrb	r0, [r4, #1]
   1d410:	orr	r3, r3, r0, lsl #16
   1d414:	ldrb	r0, [r4]
   1d418:	mov	r8, r2
   1d41c:	orr	r9, r3, r0, lsl #24
   1d420:	cmp	r9, r7
   1d424:	cmpeq	r8, r6
   1d428:	bne	1d694 <_start@@Base+0x9094>
   1d42c:	add	r3, r4, #8
   1d430:	str	r3, [sp, #16]
   1d434:	mov	r1, r5
   1d438:	mov	r0, r3
   1d43c:	bl	146f0 <_start@@Base+0xf0>
   1d440:	add	r3, pc, #864	; 0x360
   1d444:	ldrd	r2, [r3]
   1d448:	cmp	r1, r3
   1d44c:	cmpeq	r0, r2
   1d450:	bne	1d67c <_start@@Base+0x907c>
   1d454:	add	r4, r4, #16
   1d458:	mov	r1, r5
   1d45c:	mov	r0, r4
   1d460:	bl	146f0 <_start@@Base+0xf0>
   1d464:	mov	sl, #0
   1d468:	bic	fp, r1, #255	; 0xff
   1d46c:	add	r3, pc, #828	; 0x33c
   1d470:	ldrd	r2, [r3]
   1d474:	cmp	fp, r3
   1d478:	cmpeq	sl, r2
   1d47c:	beq	1d4f8 <_start@@Base+0x8ef8>
   1d480:	mov	r2, r5
   1d484:	mov	r1, r4
   1d488:	ldr	r0, [sp, #8]
   1d48c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1d490:	mov	r4, r0
   1d494:	b	1d6a8 <_start@@Base+0x90a8>
   1d498:	mov	r0, #0
   1d49c:	mov	r1, r0
   1d4a0:	b	1d3e0 <_start@@Base+0x8de0>
   1d4a4:	mov	r2, #0
   1d4a8:	mov	r3, r2
   1d4ac:	b	1d3ec <_start@@Base+0x8dec>
   1d4b0:	mov	r2, #0
   1d4b4:	mov	r3, r2
   1d4b8:	b	1d3f4 <_start@@Base+0x8df4>
   1d4bc:	mov	r2, #0
   1d4c0:	mov	r3, r2
   1d4c4:	b	1d3fc <_start@@Base+0x8dfc>
   1d4c8:	mov	r2, #0
   1d4cc:	mov	r3, r2
   1d4d0:	b	1d404 <_start@@Base+0x8e04>
   1d4d4:	mov	r2, #0
   1d4d8:	mov	r3, r2
   1d4dc:	b	1d40c <_start@@Base+0x8e0c>
   1d4e0:	mov	r2, #0
   1d4e4:	mov	r3, r2
   1d4e8:	b	1d414 <_start@@Base+0x8e14>
   1d4ec:	mov	r8, #0
   1d4f0:	mov	r9, #0
   1d4f4:	b	1d420 <_start@@Base+0x8e20>
   1d4f8:	mov	r3, #3
   1d4fc:	mov	r2, r5
   1d500:	mov	r1, r4
   1d504:	ldr	r0, [sp, #8]
   1d508:	bl	19da4 <_start@@Base+0x57a4>
   1d50c:	str	r0, [sp, #16]
   1d510:	cmp	r4, r0
   1d514:	beq	1d664 <_start@@Base+0x9064>
   1d518:	str	sl, [sp, #32]
   1d51c:	str	sl, [sp, #40]	; 0x28
   1d520:	str	sl, [sp, #44]	; 0x2c
   1d524:	str	sl, [sp, #36]	; 0x24
   1d528:	mov	r1, r0
   1d52c:	cmp	r5, r0
   1d530:	beq	1dd7c <_start@@Base+0x977c>
   1d534:	add	r3, sp, #40	; 0x28
   1d538:	str	r3, [sp]
   1d53c:	add	r3, sp, #36	; 0x24
   1d540:	mov	r2, r5
   1d544:	ldr	r0, [sp, #8]
   1d548:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   1d54c:	mov	r4, r0
   1d550:	ldr	r1, [sp, #16]
   1d554:	cmp	r1, r0
   1d558:	bne	1d598 <_start@@Base+0x8f98>
   1d55c:	str	r4, [sp, #16]
   1d560:	add	r3, sp, #32
   1d564:	str	r3, [sp]
   1d568:	ldr	r3, [pc, #584]	; 1d7b8 <_start@@Base+0x91b8>
   1d56c:	mov	r2, r5
   1d570:	ldr	r1, [sp, #16]
   1d574:	ldr	r0, [sp, #8]
   1d578:	bl	18ad8 <_start@@Base+0x44d8>
   1d57c:	mov	r4, r0
   1d580:	ldr	r3, [sp, #16]
   1d584:	cmp	r5, r0
   1d588:	cmpne	r0, r3
   1d58c:	bne	1d5e0 <_start@@Base+0x8fe0>
   1d590:	ldr	sl, [sp, #8]
   1d594:	b	1d36c <_start@@Base+0x8d6c>
   1d598:	ldrd	r2, [sp, #40]	; 0x28
   1d59c:	ldr	r1, [sp, #36]	; 0x24
   1d5a0:	cmp	r1, sl
   1d5a4:	beq	1d628 <_start@@Base+0x9028>
   1d5a8:	cmp	r3, #0
   1d5ac:	cmpeq	r2, #-2147483648	; 0x80000000
   1d5b0:	rsbls	r2, r2, #0
   1d5b4:	strls	r2, [sp, #32]
   1d5b8:	bls	1d5e0 <_start@@Base+0x8fe0>
   1d5bc:	mov	r3, #8
   1d5c0:	mov	r2, r5
   1d5c4:	mov	r1, r0
   1d5c8:	ldr	r0, [sp, #8]
   1d5cc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1d5d0:	mov	r4, r0
   1d5d4:	ldr	r3, [sp, #16]
   1d5d8:	cmp	r3, r4
   1d5dc:	beq	1d65c <_start@@Base+0x905c>
   1d5e0:	ldr	r3, [sp, #32]
   1d5e4:	cmp	r3, #0
   1d5e8:	bne	1d5fc <_start@@Base+0x8ffc>
   1d5ec:	ldr	r3, [sp, #8]
   1d5f0:	ldr	r3, [r3, #8]
   1d5f4:	tst	r3, #2
   1d5f8:	beq	1d6a8 <_start@@Base+0x90a8>
   1d5fc:	mov	r3, #4
   1d600:	mov	r2, r3
   1d604:	mov	r1, #0
   1d608:	ldr	r0, [sp, #8]
   1d60c:	ldr	r0, [r0]
   1d610:	bl	28c78 <flatcc_builder_table_add@@Base>
   1d614:	cmp	r0, #0
   1d618:	beq	1d74c <_start@@Base+0x914c>
   1d61c:	ldr	r3, [sp, #32]
   1d620:	str	r3, [r0]
   1d624:	b	1d6a8 <_start@@Base+0x90a8>
   1d628:	mvn	r0, #-2147483648	; 0x80000000
   1d62c:	mov	r1, #0
   1d630:	cmp	r3, r1
   1d634:	cmpeq	r2, r0
   1d638:	strls	r2, [sp, #32]
   1d63c:	bls	1d5e0 <_start@@Base+0x8fe0>
   1d640:	mov	r3, #7
   1d644:	mov	r2, r5
   1d648:	mov	r1, r4
   1d64c:	ldr	r0, [sp, #8]
   1d650:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1d654:	mov	r4, r0
   1d658:	b	1d5d4 <_start@@Base+0x8fd4>
   1d65c:	str	r4, [sp, #16]
   1d660:	b	1d560 <_start@@Base+0x8f60>
   1d664:	mov	r2, r5
   1d668:	ldr	r1, [sp, #16]
   1d66c:	ldr	r0, [sp, #8]
   1d670:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1d674:	mov	r4, r0
   1d678:	b	1d6a8 <_start@@Base+0x90a8>
   1d67c:	mov	r2, r5
   1d680:	ldr	r1, [sp, #16]
   1d684:	ldr	r0, [sp, #8]
   1d688:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1d68c:	mov	r4, r0
   1d690:	b	1d6a8 <_start@@Base+0x90a8>
   1d694:	mov	r2, r5
   1d698:	mov	r1, r4
   1d69c:	ldr	r0, [sp, #8]
   1d6a0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1d6a4:	mov	r4, r0
   1d6a8:	add	r3, sp, #28
   1d6ac:	mov	r2, r5
   1d6b0:	mov	r1, r4
   1d6b4:	ldr	r0, [sp, #8]
   1d6b8:	bl	1a448 <_start@@Base+0x5e48>
   1d6bc:	mov	r4, r0
   1d6c0:	ldr	r3, [sp, #28]
   1d6c4:	cmp	r3, #0
   1d6c8:	beq	1d720 <_start@@Base+0x9120>
   1d6cc:	cmp	r5, r4
   1d6d0:	beq	1d6e4 <_start@@Base+0x90e4>
   1d6d4:	ldrb	r3, [r4]
   1d6d8:	cmp	r3, #34	; 0x22
   1d6dc:	addeq	r4, r4, #1
   1d6e0:	bne	1d3bc <_start@@Base+0x8dbc>
   1d6e4:	sub	r3, r5, r4
   1d6e8:	cmp	r3, #8
   1d6ec:	bhi	1d3d8 <_start@@Base+0x8dd8>
   1d6f0:	sub	r3, r3, #1
   1d6f4:	cmp	r3, #7
   1d6f8:	ldrls	pc, [pc, r3, lsl #2]
   1d6fc:	b	1d4ec <_start@@Base+0x8eec>
   1d700:	andeq	sp, r1, r0, ror #9
   1d704:	ldrdeq	sp, [r1], -r4
   1d708:	andeq	sp, r1, r8, asr #9
   1d70c:			; <UNDEFINED> instruction: 0x0001d4bc
   1d710:			; <UNDEFINED> instruction: 0x0001d4b0
   1d714:	andeq	sp, r1, r4, lsr #9
   1d718:	muleq	r1, r8, r4
   1d71c:	ldrdeq	sp, [r1], -r8
   1d720:	ldr	sl, [sp, #8]
   1d724:	ldr	r3, [sl, #20]
   1d728:	cmp	r3, #0
   1d72c:	bne	1d36c <_start@@Base+0x8d6c>
   1d730:	ldr	r0, [sl]
   1d734:	bl	27b8c <flatcc_builder_end_table@@Base>
   1d738:	ldr	r3, [sp, #88]	; 0x58
   1d73c:	str	r0, [r3]
   1d740:	cmp	r0, #0
   1d744:	bne	1dcdc <_start@@Base+0x96dc>
   1d748:	b	1d36c <_start@@Base+0x8d6c>
   1d74c:	ldr	sl, [sp, #8]
   1d750:	b	1d36c <_start@@Base+0x8d6c>
   1d754:	mov	r2, #2
   1d758:	mov	r1, r2
   1d75c:	ldr	r0, [r0]
   1d760:	bl	2630c <flatcc_builder_start_struct@@Base>
   1d764:	subs	fp, r0, #0
   1d768:	beq	1dcac <_start@@Base+0x96ac>
   1d76c:	add	r3, sp, #32
   1d770:	mov	r2, r5
   1d774:	mov	r1, r4
   1d778:	mov	r0, sl
   1d77c:	bl	1966c <_start@@Base+0x506c>
   1d780:	b	1db18 <_start@@Base+0x9518>
   1d784:	mov	r3, #5
   1d788:	mov	r2, r5
   1d78c:	mov	r1, r0
   1d790:	mov	r0, sl
   1d794:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1d798:	b	1db3c <_start@@Base+0x953c>
   1d79c:	nop	{0}
   1d7a0:	ldrbvs	r6, [pc], #-372	; 1d7a8 <_start@@Base+0x91a8>
   1d7a4:	cmnvc	r7, #456	; 0x1c8
   1d7a8:	svcpl	0x0064616d
   1d7ac:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1d7b0:	andeq	r0, r0, r0
   1d7b4:	cmnvs	r7, r0, lsl #10
   1d7b8:	andeq	r4, r5, ip, ror #2
   1d7bc:	ldrb	r8, [r0, #7]
   1d7c0:	mov	r9, #0
   1d7c4:	ldrb	r2, [r0, #6]
   1d7c8:	orr	r2, r8, r2, lsl #8
   1d7cc:	mov	r3, r9
   1d7d0:	ldrb	r8, [r0, #5]
   1d7d4:	orr	r1, r2, r8, lsl #16
   1d7d8:	mov	r8, r3
   1d7dc:	ldrb	r2, [r0, #4]
   1d7e0:	orr	r2, r1, r2, lsl #24
   1d7e4:	mov	r3, r8
   1d7e8:	ldrb	r8, [r0, #3]
   1d7ec:	orr	r3, r3, r8
   1d7f0:	ldrb	r8, [r0, #2]
   1d7f4:	orr	r3, r3, r8, lsl #8
   1d7f8:	ldrb	r8, [r0, #1]
   1d7fc:	orr	r3, r3, r8, lsl #16
   1d800:	ldrb	r8, [r0]
   1d804:	mov	r6, r2
   1d808:	orr	r7, r3, r8, lsl #24
   1d80c:	add	r3, pc, #964	; 0x3c4
   1d810:	ldrd	r2, [r3]
   1d814:	cmp	r7, r3
   1d818:	cmpeq	r6, r2
   1d81c:	bne	1da98 <_start@@Base+0x9498>
   1d820:	add	r4, r0, #8
   1d824:	sub	r3, r5, r4
   1d828:	cmp	r3, #8
   1d82c:	bhi	1d8c0 <_start@@Base+0x92c0>
   1d830:	sub	r3, r3, #1
   1d834:	cmp	r3, #7
   1d838:	ldrls	pc, [pc, r3, lsl #2]
   1d83c:	b	1d960 <_start@@Base+0x9360>
   1d840:	andeq	sp, r1, r8, asr r9
   1d844:	andeq	sp, r1, r0, asr r9
   1d848:	andeq	sp, r1, r8, asr #18
   1d84c:	andeq	sp, r1, r0, asr #18
   1d850:	andeq	sp, r1, r8, lsr r9
   1d854:	andeq	sp, r1, r0, lsr r9
   1d858:	andeq	sp, r1, r4, lsr #18
   1d85c:	andeq	sp, r1, r0, asr #17
   1d860:	mov	r8, #0
   1d864:	mov	r9, r8
   1d868:	b	1d7c4 <_start@@Base+0x91c4>
   1d86c:	mov	r2, #0
   1d870:	mov	r3, r2
   1d874:	b	1d7d0 <_start@@Base+0x91d0>
   1d878:	mov	r1, #0
   1d87c:	mov	r8, r1
   1d880:	b	1d7dc <_start@@Base+0x91dc>
   1d884:	mov	r2, #0
   1d888:	mov	r3, r2
   1d88c:	b	1d7e8 <_start@@Base+0x91e8>
   1d890:	mov	r2, #0
   1d894:	mov	r3, r2
   1d898:	b	1d7f0 <_start@@Base+0x91f0>
   1d89c:	mov	r2, #0
   1d8a0:	mov	r3, r2
   1d8a4:	b	1d7f8 <_start@@Base+0x91f8>
   1d8a8:	mov	r2, #0
   1d8ac:	mov	r3, r2
   1d8b0:	b	1d800 <_start@@Base+0x9200>
   1d8b4:	mov	r6, #0
   1d8b8:	mov	r7, #0
   1d8bc:	b	1d80c <_start@@Base+0x920c>
   1d8c0:	mov	r3, #0
   1d8c4:	mov	r1, r3
   1d8c8:	ldrb	r2, [r0, #11]
   1d8cc:	orr	r1, r1, r2
   1d8d0:	ldrb	r2, [r0, #10]
   1d8d4:	orr	r1, r1, r2, lsl #8
   1d8d8:	ldrb	r2, [r0, #9]
   1d8dc:	orr	r1, r1, r2, lsl #16
   1d8e0:	ldrb	r2, [r0, #8]
   1d8e4:	orr	r3, r1, r2, lsl #24
   1d8e8:	mov	r2, #0
   1d8ec:	str	r2, [sp, #8]
   1d8f0:	bic	r3, r3, #255	; 0xff
   1d8f4:	str	r3, [sp, #12]
   1d8f8:	ldrd	r2, [sp, #8]
   1d8fc:	add	r1, pc, #732	; 0x2dc
   1d900:	ldrd	r0, [r1]
   1d904:	cmp	r3, r1
   1d908:	cmpeq	r2, r0
   1d90c:	beq	1d968 <_start@@Base+0x9368>
   1d910:	mov	r2, r5
   1d914:	mov	r1, r4
   1d918:	mov	r0, sl
   1d91c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1d920:	b	1daa8 <_start@@Base+0x94a8>
   1d924:	mov	r2, #0
   1d928:	mov	r3, r2
   1d92c:	b	1d8c4 <_start@@Base+0x92c4>
   1d930:	mov	r1, #0
   1d934:	b	1d8c8 <_start@@Base+0x92c8>
   1d938:	mov	r1, #0
   1d93c:	b	1d8c8 <_start@@Base+0x92c8>
   1d940:	mov	r1, #0
   1d944:	b	1d8c8 <_start@@Base+0x92c8>
   1d948:	mov	r1, #0
   1d94c:	b	1d8d0 <_start@@Base+0x92d0>
   1d950:	mov	r1, #0
   1d954:	b	1d8d8 <_start@@Base+0x92d8>
   1d958:	mov	r1, #0
   1d95c:	b	1d8e0 <_start@@Base+0x92e0>
   1d960:	mov	r3, #0
   1d964:	b	1d8e8 <_start@@Base+0x92e8>
   1d968:	mov	r3, #3
   1d96c:	mov	r2, r5
   1d970:	mov	r1, r4
   1d974:	mov	r0, sl
   1d978:	bl	19da4 <_start@@Base+0x57a4>
   1d97c:	mov	r8, r0
   1d980:	cmp	r4, r0
   1d984:	beq	1da84 <_start@@Base+0x9484>
   1d988:	mov	r3, #0
   1d98c:	strh	r3, [sp, #28]
   1d990:	str	r3, [sp, #40]	; 0x28
   1d994:	str	r3, [sp, #44]	; 0x2c
   1d998:	str	r3, [sp, #36]	; 0x24
   1d99c:	cmp	r5, r0
   1d9a0:	beq	1dd84 <_start@@Base+0x9784>
   1d9a4:	add	r3, sp, #40	; 0x28
   1d9a8:	str	r3, [sp]
   1d9ac:	add	r3, sp, #36	; 0x24
   1d9b0:	mov	r2, r5
   1d9b4:	mov	r1, r0
   1d9b8:	mov	r0, sl
   1d9bc:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   1d9c0:	mov	r4, r0
   1d9c4:	cmp	r8, r0
   1d9c8:	bne	1da10 <_start@@Base+0x9410>
   1d9cc:	add	r3, sp, #28
   1d9d0:	str	r3, [sp]
   1d9d4:	ldr	r3, [pc, #524]	; 1dbe8 <_start@@Base+0x95e8>
   1d9d8:	mov	r2, r5
   1d9dc:	mov	r1, r4
   1d9e0:	mov	r0, sl
   1d9e4:	bl	19210 <_start@@Base+0x4c10>
   1d9e8:	cmp	r5, r0
   1d9ec:	cmpne	r0, r4
   1d9f0:	bne	1da70 <_start@@Base+0x9470>
   1d9f4:	mov	r3, #33	; 0x21
   1d9f8:	mov	r2, r5
   1d9fc:	mov	r1, r0
   1da00:	mov	r0, sl
   1da04:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1da08:	mov	r4, r0
   1da0c:	b	1dc8c <_start@@Base+0x968c>
   1da10:	ldr	r3, [sp, #36]	; 0x24
   1da14:	cmp	r3, #0
   1da18:	bne	1da54 <_start@@Base+0x9454>
   1da1c:	ldrd	r2, [sp, #40]	; 0x28
   1da20:	movw	r0, #65535	; 0xffff
   1da24:	mov	r1, #0
   1da28:	cmp	r3, r1
   1da2c:	cmpeq	r2, r0
   1da30:	strhls	r2, [sp, #28]
   1da34:	movls	r0, r4
   1da38:	bls	1da70 <_start@@Base+0x9470>
   1da3c:	mov	r3, #7
   1da40:	mov	r2, r5
   1da44:	mov	r1, r4
   1da48:	mov	r0, sl
   1da4c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1da50:	b	1da68 <_start@@Base+0x9468>
   1da54:	mov	r3, #8
   1da58:	mov	r2, r5
   1da5c:	mov	r1, r0
   1da60:	mov	r0, sl
   1da64:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1da68:	cmp	r8, r0
   1da6c:	beq	1da7c <_start@@Base+0x947c>
   1da70:	ldrh	r3, [sp, #28]
   1da74:	strh	r3, [fp]
   1da78:	b	1daa8 <_start@@Base+0x94a8>
   1da7c:	mov	r4, r0
   1da80:	b	1d9cc <_start@@Base+0x93cc>
   1da84:	mov	r2, r5
   1da88:	mov	r1, r0
   1da8c:	mov	r0, sl
   1da90:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1da94:	b	1daa8 <_start@@Base+0x94a8>
   1da98:	mov	r2, r5
   1da9c:	mov	r1, r0
   1daa0:	mov	r0, sl
   1daa4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1daa8:	sub	r3, r5, r0
   1daac:	cmp	r3, #1
   1dab0:	ble	1dac4 <_start@@Base+0x94c4>
   1dab4:	ldrb	r3, [r0]
   1dab8:	cmp	r3, #32
   1dabc:	bhi	1dad4 <_start@@Base+0x94d4>
   1dac0:	beq	1db78 <_start@@Base+0x9578>
   1dac4:	mov	r2, r5
   1dac8:	mov	r1, r0
   1dacc:	mov	r0, sl
   1dad0:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1dad4:	cmp	r5, r0
   1dad8:	moveq	r3, #0
   1dadc:	streq	r3, [sp, #32]
   1dae0:	beq	1db18 <_start@@Base+0x9518>
   1dae4:	ldrb	r3, [r0]
   1dae8:	cmp	r3, #44	; 0x2c
   1daec:	beq	1dbec <_start@@Base+0x95ec>
   1daf0:	mov	r3, #0
   1daf4:	str	r3, [sp, #32]
   1daf8:	ldrb	r3, [r0]
   1dafc:	cmp	r3, #125	; 0x7d
   1db00:	beq	1db8c <_start@@Base+0x958c>
   1db04:	mov	r3, #10
   1db08:	mov	r2, r5
   1db0c:	mov	r1, r0
   1db10:	mov	r0, sl
   1db14:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1db18:	ldr	r3, [sp, #32]
   1db1c:	cmp	r3, #0
   1db20:	beq	1dc88 <_start@@Base+0x9688>
   1db24:	cmp	r5, r0
   1db28:	beq	1db3c <_start@@Base+0x953c>
   1db2c:	ldrb	r3, [r0]
   1db30:	cmp	r3, #34	; 0x22
   1db34:	addeq	r0, r0, #1
   1db38:	bne	1d784 <_start@@Base+0x9184>
   1db3c:	sub	r3, r5, r0
   1db40:	cmp	r3, #8
   1db44:	bhi	1d7bc <_start@@Base+0x91bc>
   1db48:	sub	r3, r3, #1
   1db4c:	cmp	r3, #7
   1db50:	ldrls	pc, [pc, r3, lsl #2]
   1db54:	b	1d8b4 <_start@@Base+0x92b4>
   1db58:	andeq	sp, r1, r8, lsr #17
   1db5c:	muleq	r1, ip, r8
   1db60:	muleq	r1, r0, r8
   1db64:	andeq	sp, r1, r4, lsl #17
   1db68:	andeq	sp, r1, r8, ror r8
   1db6c:	andeq	sp, r1, ip, ror #16
   1db70:	andeq	sp, r1, r0, ror #16
   1db74:			; <UNDEFINED> instruction: 0x0001d7bc
   1db78:	ldrb	r3, [r0, #1]
   1db7c:	cmp	r3, #32
   1db80:	addhi	r0, r0, #1
   1db84:	bls	1dac4 <_start@@Base+0x94c4>
   1db88:	b	1dad4 <_start@@Base+0x94d4>
   1db8c:	add	r1, r0, #1
   1db90:	sub	r3, r5, r1
   1db94:	cmp	r3, #1
   1db98:	ble	1dbb0 <_start@@Base+0x95b0>
   1db9c:	ldrb	r3, [r0, #1]
   1dba0:	cmp	r3, #32
   1dba4:	movhi	r0, r1
   1dba8:	bhi	1db18 <_start@@Base+0x9518>
   1dbac:	beq	1dbc0 <_start@@Base+0x95c0>
   1dbb0:	mov	r2, r5
   1dbb4:	mov	r0, sl
   1dbb8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1dbbc:	b	1db18 <_start@@Base+0x9518>
   1dbc0:	ldrb	r3, [r0, #2]
   1dbc4:	cmp	r3, #32
   1dbc8:	addhi	r0, r0, #2
   1dbcc:	bls	1dbb0 <_start@@Base+0x95b0>
   1dbd0:	b	1db18 <_start@@Base+0x9518>
   1dbd4:	nop	{0}
   1dbd8:	svcpl	0x006c656e
   1dbdc:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1dbe0:	andeq	r0, r0, r0
   1dbe4:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1dbe8:	andeq	r4, r5, r8, ror r1
   1dbec:	add	r1, r0, #1
   1dbf0:	sub	r3, r5, r1
   1dbf4:	cmp	r3, #1
   1dbf8:	ble	1dc10 <_start@@Base+0x9610>
   1dbfc:	ldrb	r3, [r0, #1]
   1dc00:	cmp	r3, #32
   1dc04:	movhi	r0, r1
   1dc08:	bhi	1dc1c <_start@@Base+0x961c>
   1dc0c:	beq	1dc54 <_start@@Base+0x9654>
   1dc10:	mov	r2, r5
   1dc14:	mov	r0, sl
   1dc18:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1dc1c:	cmp	r5, r0
   1dc20:	beq	1dc68 <_start@@Base+0x9668>
   1dc24:	ldrb	r3, [r0]
   1dc28:	cmp	r3, #125	; 0x7d
   1dc2c:	movne	r3, #1
   1dc30:	strne	r3, [sp, #32]
   1dc34:	bne	1db18 <_start@@Base+0x9518>
   1dc38:	mov	r3, #0
   1dc3c:	str	r3, [sp, #32]
   1dc40:	mov	r2, r5
   1dc44:	add	r1, r0, #1
   1dc48:	mov	r0, sl
   1dc4c:	bl	1809c <_start@@Base+0x3a9c>
   1dc50:	b	1db18 <_start@@Base+0x9518>
   1dc54:	ldrb	r3, [r0, #2]
   1dc58:	cmp	r3, #32
   1dc5c:	addhi	r0, r0, #2
   1dc60:	bls	1dc10 <_start@@Base+0x9610>
   1dc64:	b	1dc1c <_start@@Base+0x961c>
   1dc68:	mov	r3, #0
   1dc6c:	str	r3, [sp, #32]
   1dc70:	mov	r3, #10
   1dc74:	mov	r2, r5
   1dc78:	mov	r1, r0
   1dc7c:	mov	r0, sl
   1dc80:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1dc84:	b	1db18 <_start@@Base+0x9518>
   1dc88:	mov	r4, r0
   1dc8c:	cmp	r5, r4
   1dc90:	beq	1dcac <_start@@Base+0x96ac>
   1dc94:	ldr	r0, [sl]
   1dc98:	bl	263c4 <flatcc_builder_end_struct@@Base>
   1dc9c:	ldr	r3, [sp, #88]	; 0x58
   1dca0:	str	r0, [r3]
   1dca4:	cmp	r0, #0
   1dca8:	bne	1dcf8 <_start@@Base+0x96f8>
   1dcac:	mov	r3, #33	; 0x21
   1dcb0:	mov	r2, r5
   1dcb4:	mov	r1, r4
   1dcb8:	mov	r0, sl
   1dcbc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1dcc0:	mov	r4, r0
   1dcc4:	b	1dcdc <_start@@Base+0x96dc>
   1dcc8:	ldr	r3, [sp, #88]	; 0x58
   1dccc:	mov	r2, r5
   1dcd0:	mov	r1, r4
   1dcd4:	bl	19e68 <_start@@Base+0x5868>
   1dcd8:	mov	r4, r0
   1dcdc:	ldr	r3, [sl, #20]
   1dce0:	cmp	r3, #0
   1dce4:	bne	1dcf8 <_start@@Base+0x96f8>
   1dce8:	ldr	r3, [sp, #88]	; 0x58
   1dcec:	ldr	r3, [r3]
   1dcf0:	cmp	r3, #0
   1dcf4:	beq	1dd60 <_start@@Base+0x9760>
   1dcf8:	mov	r0, r4
   1dcfc:	add	sp, sp, #52	; 0x34
   1dd00:	ldrd	r4, [sp]
   1dd04:	ldrd	r6, [sp, #8]
   1dd08:	ldrd	r8, [sp, #16]
   1dd0c:	ldrd	sl, [sp, #24]
   1dd10:	add	sp, sp, #32
   1dd14:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd18:	ldr	r3, [sp, #88]	; 0x58
   1dd1c:	mov	r2, r5
   1dd20:	mov	r1, r4
   1dd24:	bl	19e68 <_start@@Base+0x5868>
   1dd28:	mov	r4, r0
   1dd2c:	b	1dcdc <_start@@Base+0x96dc>
   1dd30:	ldr	r3, [sp, #88]	; 0x58
   1dd34:	mov	r2, r5
   1dd38:	mov	r1, r4
   1dd3c:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   1dd40:	mov	r4, r0
   1dd44:	b	1dcdc <_start@@Base+0x96dc>
   1dd48:	mov	r2, r5
   1dd4c:	mov	r1, r4
   1dd50:	mov	r0, sl
   1dd54:	bl	2d934 <flatcc_json_parser_generic_json@@Base>
   1dd58:	mov	r4, r0
   1dd5c:	b	1dcf8 <_start@@Base+0x96f8>
   1dd60:	mov	r3, #33	; 0x21
   1dd64:	mov	r2, r5
   1dd68:	mov	r1, r4
   1dd6c:	mov	r0, sl
   1dd70:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1dd74:	mov	r4, r0
   1dd78:	b	1dcf8 <_start@@Base+0x96f8>
   1dd7c:	ldr	r4, [sp, #16]
   1dd80:	b	1d55c <_start@@Base+0x8f5c>
   1dd84:	mov	r4, r0
   1dd88:	b	1d9cc <_start@@Base+0x93cc>
   1dd8c:	strd	r4, [sp, #-16]!
   1dd90:	str	r6, [sp, #8]
   1dd94:	str	lr, [sp, #12]
   1dd98:	mov	r5, r0
   1dd9c:	mov	r4, r2
   1dda0:	mov	r6, r3
   1dda4:	sub	r3, r2, r1
   1dda8:	cmp	r3, #1
   1ddac:	ble	1ddc0 <_start@@Base+0x97c0>
   1ddb0:	ldrb	r3, [r1]
   1ddb4:	cmp	r3, #32
   1ddb8:	bhi	1ddd0 <_start@@Base+0x97d0>
   1ddbc:	beq	1de24 <_start@@Base+0x9824>
   1ddc0:	mov	r2, r4
   1ddc4:	mov	r0, r5
   1ddc8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1ddcc:	mov	r1, r0
   1ddd0:	cmp	r4, r1
   1ddd4:	moveq	r3, #0
   1ddd8:	streq	r3, [r6]
   1dddc:	moveq	r0, r1
   1dde0:	beq	1de14 <_start@@Base+0x9814>
   1dde4:	ldrb	r3, [r1]
   1dde8:	cmp	r3, #44	; 0x2c
   1ddec:	beq	1de80 <_start@@Base+0x9880>
   1ddf0:	mov	r3, #0
   1ddf4:	str	r3, [r6]
   1ddf8:	ldrb	r3, [r1]
   1ddfc:	cmp	r3, #93	; 0x5d
   1de00:	beq	1de38 <_start@@Base+0x9838>
   1de04:	mov	r3, #9
   1de08:	mov	r2, r4
   1de0c:	mov	r0, r5
   1de10:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1de14:	ldrd	r4, [sp]
   1de18:	ldr	r6, [sp, #8]
   1de1c:	add	sp, sp, #12
   1de20:	pop	{pc}		; (ldr pc, [sp], #4)
   1de24:	ldrb	r3, [r1, #1]
   1de28:	cmp	r3, #32
   1de2c:	addhi	r1, r1, #1
   1de30:	bls	1ddc0 <_start@@Base+0x97c0>
   1de34:	b	1ddd0 <_start@@Base+0x97d0>
   1de38:	add	r0, r1, #1
   1de3c:	sub	r3, r4, r0
   1de40:	cmp	r3, #1
   1de44:	ble	1de58 <_start@@Base+0x9858>
   1de48:	ldrb	r3, [r1, #1]
   1de4c:	cmp	r3, #32
   1de50:	bhi	1de14 <_start@@Base+0x9814>
   1de54:	beq	1de6c <_start@@Base+0x986c>
   1de58:	mov	r2, r4
   1de5c:	mov	r1, r0
   1de60:	mov	r0, r5
   1de64:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1de68:	b	1de14 <_start@@Base+0x9814>
   1de6c:	ldrb	r3, [r1, #2]
   1de70:	cmp	r3, #32
   1de74:	addhi	r0, r1, #2
   1de78:	bls	1de58 <_start@@Base+0x9858>
   1de7c:	b	1de14 <_start@@Base+0x9814>
   1de80:	mov	r2, r4
   1de84:	add	r1, r1, #1
   1de88:	mov	r0, r5
   1de8c:	bl	1809c <_start@@Base+0x3a9c>
   1de90:	cmp	r4, r0
   1de94:	beq	1dec8 <_start@@Base+0x98c8>
   1de98:	ldrb	r3, [r0]
   1de9c:	cmp	r3, #93	; 0x5d
   1dea0:	movne	r3, #1
   1dea4:	strne	r3, [r6]
   1dea8:	bne	1de14 <_start@@Base+0x9814>
   1deac:	mov	r3, #0
   1deb0:	str	r3, [r6]
   1deb4:	mov	r2, r4
   1deb8:	add	r1, r0, #1
   1debc:	mov	r0, r5
   1dec0:	bl	1809c <_start@@Base+0x3a9c>
   1dec4:	b	1de14 <_start@@Base+0x9814>
   1dec8:	mov	r3, #0
   1decc:	str	r3, [r6]
   1ded0:	mov	r3, #9
   1ded4:	mov	r2, r0
   1ded8:	mov	r1, r0
   1dedc:	mov	r0, r5
   1dee0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1dee4:	b	1de14 <_start@@Base+0x9814>
   1dee8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1deec:	strd	r6, [sp, #8]
   1def0:	strd	r8, [sp, #16]
   1def4:	strd	sl, [sp, #24]
   1def8:	str	lr, [sp, #32]
   1defc:	vpush	{d8-d9}
   1df00:	sub	sp, sp, #396	; 0x18c
   1df04:	mov	fp, r0
   1df08:	mov	r8, r1
   1df0c:	mov	r9, r2
   1df10:	mov	r2, r3
   1df14:	str	r3, [sp, #124]	; 0x7c
   1df18:	mov	r3, #0
   1df1c:	str	r3, [r2]
   1df20:	mov	r1, #36	; 0x24
   1df24:	ldr	r0, [r0]
   1df28:	bl	270b4 <flatcc_builder_start_table@@Base>
   1df2c:	cmp	r0, #0
   1df30:	beq	1df70 <_start@@Base+0x9970>
   1df34:	mov	r3, #33	; 0x21
   1df38:	mov	r2, r9
   1df3c:	mov	r1, r8
   1df40:	mov	r0, fp
   1df44:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1df48:	mov	r4, r0
   1df4c:	mov	r0, r4
   1df50:	add	sp, sp, #396	; 0x18c
   1df54:	vpop	{d8-d9}
   1df58:	ldrd	r4, [sp]
   1df5c:	ldrd	r6, [sp, #8]
   1df60:	ldrd	r8, [sp, #16]
   1df64:	ldrd	sl, [sp, #24]
   1df68:	add	sp, sp, #32
   1df6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1df70:	add	r3, sp, #380	; 0x17c
   1df74:	str	r3, [sp]
   1df78:	mov	r3, #1
   1df7c:	mov	r2, r9
   1df80:	mov	r1, r8
   1df84:	mov	r0, fp
   1df88:	bl	2ee74 <flatcc_json_parser_prepare_unions@@Base>
   1df8c:	cmp	r9, r0
   1df90:	beq	1df34 <_start@@Base+0x9934>
   1df94:	add	r3, sp, #388	; 0x184
   1df98:	mov	r2, r9
   1df9c:	mov	r1, r8
   1dfa0:	mov	r0, fp
   1dfa4:	bl	1966c <_start@@Base+0x506c>
   1dfa8:	mov	r8, r0
   1dfac:	ldr	r3, [sp, #388]	; 0x184
   1dfb0:	cmp	r3, #0
   1dfb4:	beq	229d4 <_start@@Base+0xe3d4>
   1dfb8:	mov	sl, fp
   1dfbc:	b	21828 <_start@@Base+0xd228>
   1dfc0:	mov	r3, #5
   1dfc4:	mov	r2, r9
   1dfc8:	mov	r1, r8
   1dfcc:	mov	r0, sl
   1dfd0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1dfd4:	mov	r8, r0
   1dfd8:	b	21840 <_start@@Base+0xd240>
   1dfdc:	mov	r3, #5
   1dfe0:	mov	r2, r9
   1dfe4:	mov	r1, r8
   1dfe8:	mov	r0, sl
   1dfec:	bl	19da4 <_start@@Base+0x57a4>
   1dff0:	cmp	r0, r8
   1dff4:	beq	1e03c <_start@@Base+0x9a3c>
   1dff8:	add	r3, sp, #384	; 0x180
   1dffc:	mov	r2, r9
   1e000:	mov	r1, r0
   1e004:	mov	r0, sl
   1e008:	bl	1dee8 <_start@@Base+0x98e8>
   1e00c:	mov	r8, r0
   1e010:	ldr	r3, [sp, #384]	; 0x180
   1e014:	cmp	r3, #0
   1e018:	beq	22aa4 <_start@@Base+0xe4a4>
   1e01c:	mov	r1, #12
   1e020:	ldr	r0, [sl]
   1e024:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1e028:	cmp	r0, #0
   1e02c:	beq	22aac <_start@@Base+0xe4ac>
   1e030:	ldr	r3, [sp, #384]	; 0x180
   1e034:	str	r3, [r0]
   1e038:	b	21804 <_start@@Base+0xd204>
   1e03c:	mov	r2, r9
   1e040:	mov	r1, r8
   1e044:	mov	r0, sl
   1e048:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e04c:	mov	r8, r0
   1e050:	b	21804 <_start@@Base+0xd204>
   1e054:	mov	r3, #5
   1e058:	mov	r2, r9
   1e05c:	mov	r1, r8
   1e060:	mov	r0, sl
   1e064:	bl	19da4 <_start@@Base+0x57a4>
   1e068:	mov	r4, r0
   1e06c:	cmp	r0, r8
   1e070:	beq	1e1b8 <_start@@Base+0x9bb8>
   1e074:	mov	r3, #0
   1e078:	strb	r3, [sp, #360]	; 0x168
   1e07c:	mov	r0, #0
   1e080:	mov	r1, #0
   1e084:	add	r2, sp, #368	; 0x170
   1e088:	strd	r0, [r2]
   1e08c:	str	r3, [sp, #364]	; 0x16c
   1e090:	cmp	r9, r4
   1e094:	beq	22ca4 <_start@@Base+0xe6a4>
   1e098:	str	r2, [sp]
   1e09c:	add	r3, sp, #364	; 0x16c
   1e0a0:	mov	r2, r9
   1e0a4:	mov	r1, r4
   1e0a8:	mov	r0, sl
   1e0ac:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   1e0b0:	mov	r8, r0
   1e0b4:	cmp	r4, r0
   1e0b8:	bne	1e0f4 <_start@@Base+0x9af4>
   1e0bc:	mov	r4, r8
   1e0c0:	add	r3, sp, #360	; 0x168
   1e0c4:	str	r3, [sp]
   1e0c8:	ldr	r3, [pc, #1328]	; 1e600 <_start@@Base+0xa000>
   1e0cc:	mov	r2, r9
   1e0d0:	mov	r1, r4
   1e0d4:	mov	r0, sl
   1e0d8:	bl	1903c <_start@@Base+0x4a3c>
   1e0dc:	mov	r8, r0
   1e0e0:	cmp	r9, r0
   1e0e4:	cmpne	r0, r4
   1e0e8:	bne	1e13c <_start@@Base+0x9b3c>
   1e0ec:	mov	fp, sl
   1e0f0:	b	1df34 <_start@@Base+0x9934>
   1e0f4:	add	r3, sp, #368	; 0x170
   1e0f8:	ldrd	r2, [r3]
   1e0fc:	ldr	r1, [sp, #364]	; 0x16c
   1e100:	cmp	r1, #0
   1e104:	beq	1e184 <_start@@Base+0x9b84>
   1e108:	cmp	r3, #0
   1e10c:	cmpeq	r2, #128	; 0x80
   1e110:	rsbls	r2, r2, #0
   1e114:	strbls	r2, [sp, #360]	; 0x168
   1e118:	bls	1e13c <_start@@Base+0x9b3c>
   1e11c:	mov	r3, #8
   1e120:	mov	r2, r9
   1e124:	mov	r1, r0
   1e128:	mov	r0, sl
   1e12c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1e130:	mov	r8, r0
   1e134:	cmp	r4, r8
   1e138:	beq	1e1b0 <_start@@Base+0x9bb0>
   1e13c:	add	r3, sp, #360	; 0x168
   1e140:	ldrsb	r3, [r3]
   1e144:	cmp	r3, #8
   1e148:	bne	1e158 <_start@@Base+0x9b58>
   1e14c:	ldr	r3, [sl, #8]
   1e150:	tst	r3, #2
   1e154:	beq	21804 <_start@@Base+0xd204>
   1e158:	mov	r3, #1
   1e15c:	mov	r2, r3
   1e160:	mov	r1, #6
   1e164:	ldr	r0, [sl]
   1e168:	bl	28c78 <flatcc_builder_table_add@@Base>
   1e16c:	cmp	r0, #0
   1e170:	beq	22ab4 <_start@@Base+0xe4b4>
   1e174:	add	r3, sp, #360	; 0x168
   1e178:	ldrsb	r3, [r3]
   1e17c:	strb	r3, [r0]
   1e180:	b	21804 <_start@@Base+0xd204>
   1e184:	cmp	r3, #0
   1e188:	cmpeq	r2, #127	; 0x7f
   1e18c:	strbls	r2, [sp, #360]	; 0x168
   1e190:	bls	1e13c <_start@@Base+0x9b3c>
   1e194:	mov	r3, #7
   1e198:	mov	r2, r9
   1e19c:	mov	r1, r0
   1e1a0:	mov	r0, sl
   1e1a4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1e1a8:	mov	r8, r0
   1e1ac:	b	1e134 <_start@@Base+0x9b34>
   1e1b0:	mov	r4, r8
   1e1b4:	b	1e0c0 <_start@@Base+0x9ac0>
   1e1b8:	mov	r2, r9
   1e1bc:	mov	r1, r8
   1e1c0:	mov	r0, sl
   1e1c4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e1c8:	mov	r8, r0
   1e1cc:	b	21804 <_start@@Base+0xd204>
   1e1d0:	mvn	r2, #0
   1e1d4:	movw	r3, #65535	; 0xffff
   1e1d8:	movt	r3, #26735	; 0x686f
   1e1dc:	cmp	r1, r3
   1e1e0:	cmpeq	r0, r2
   1e1e4:	bhi	1e370 <_start@@Base+0x9d70>
   1e1e8:	mov	r3, #0
   1e1ec:	str	r3, [sp, #96]	; 0x60
   1e1f0:	str	r1, [sp, #100]	; 0x64
   1e1f4:	add	r3, pc, #996	; 0x3e4
   1e1f8:	ldrd	r2, [r3]
   1e1fc:	ldrd	r0, [sp, #96]	; 0x60
   1e200:	cmp	r1, r3
   1e204:	cmpeq	r0, r2
   1e208:	beq	1e224 <_start@@Base+0x9c24>
   1e20c:	mov	r2, r9
   1e210:	mov	r1, r8
   1e214:	mov	r0, sl
   1e218:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e21c:	mov	r8, r0
   1e220:	b	21804 <_start@@Base+0xd204>
   1e224:	mov	r3, #4
   1e228:	mov	r2, r9
   1e22c:	mov	r1, r8
   1e230:	mov	r0, sl
   1e234:	bl	19da4 <_start@@Base+0x57a4>
   1e238:	mov	r4, r0
   1e23c:	cmp	r0, r8
   1e240:	bne	1e25c <_start@@Base+0x9c5c>
   1e244:	mov	r2, r9
   1e248:	mov	r1, r8
   1e24c:	mov	r0, sl
   1e250:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e254:	mov	r8, r0
   1e258:	b	21804 <_start@@Base+0xd204>
   1e25c:	mvn	r3, #0
   1e260:	mov	r2, #1
   1e264:	mov	r1, r2
   1e268:	ldr	r0, [sl]
   1e26c:	bl	26dbc <flatcc_builder_start_vector@@Base>
   1e270:	cmp	r0, #0
   1e274:	bne	22a74 <_start@@Base+0xe474>
   1e278:	add	r3, sp, #388	; 0x184
   1e27c:	mov	r2, r9
   1e280:	mov	r1, r4
   1e284:	mov	r0, sl
   1e288:	bl	19598 <_start@@Base+0x4f98>
   1e28c:	mov	r8, r0
   1e290:	ldr	r3, [sp, #388]	; 0x184
   1e294:	cmp	r3, #0
   1e298:	beq	1e33c <_start@@Base+0x9d3c>
   1e29c:	mov	fp, #0
   1e2a0:	b	1e2d0 <_start@@Base+0x9cd0>
   1e2a4:	ldrb	r3, [sp, #368]	; 0x170
   1e2a8:	strb	r3, [r5]
   1e2ac:	add	r3, sp, #388	; 0x184
   1e2b0:	mov	r2, r9
   1e2b4:	mov	r1, r4
   1e2b8:	mov	r0, sl
   1e2bc:	bl	1dd8c <_start@@Base+0x978c>
   1e2c0:	mov	r8, r0
   1e2c4:	ldr	r3, [sp, #388]	; 0x184
   1e2c8:	cmp	r3, #0
   1e2cc:	beq	1e33c <_start@@Base+0x9d3c>
   1e2d0:	strb	fp, [sp, #368]	; 0x170
   1e2d4:	mov	r1, #1
   1e2d8:	ldr	r0, [sl]
   1e2dc:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   1e2e0:	subs	r5, r0, #0
   1e2e4:	beq	22abc <_start@@Base+0xe4bc>
   1e2e8:	add	r3, sp, #368	; 0x170
   1e2ec:	mov	r2, r9
   1e2f0:	mov	r1, r8
   1e2f4:	mov	r0, sl
   1e2f8:	bl	17f00 <_start@@Base+0x3900>
   1e2fc:	mov	r4, r0
   1e300:	cmp	r8, r0
   1e304:	bne	1e2a4 <_start@@Base+0x9ca4>
   1e308:	add	r3, sp, #368	; 0x170
   1e30c:	str	r3, [sp]
   1e310:	ldr	r3, [pc, #748]	; 1e604 <_start@@Base+0xa004>
   1e314:	mov	r2, r9
   1e318:	mov	r1, r0
   1e31c:	mov	r0, sl
   1e320:	bl	18e7c <_start@@Base+0x487c>
   1e324:	mov	r8, r0
   1e328:	cmp	r9, r0
   1e32c:	cmpne	r4, r0
   1e330:	beq	22ac4 <_start@@Base+0xe4c4>
   1e334:	mov	r4, r0
   1e338:	b	1e2a4 <_start@@Base+0x9ca4>
   1e33c:	ldr	r0, [sl]
   1e340:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   1e344:	str	r0, [sp, #384]	; 0x180
   1e348:	cmp	r0, #0
   1e34c:	beq	22acc <_start@@Base+0xe4cc>
   1e350:	mov	r1, #30
   1e354:	ldr	r0, [sl]
   1e358:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1e35c:	cmp	r0, #0
   1e360:	beq	22ad4 <_start@@Base+0xe4d4>
   1e364:	ldr	r3, [sp, #384]	; 0x180
   1e368:	str	r3, [r0]
   1e36c:	b	21804 <_start@@Base+0xd204>
   1e370:	add	r3, pc, #624	; 0x270
   1e374:	ldrd	r2, [r3]
   1e378:	cmp	r1, r3
   1e37c:	cmpeq	r0, r2
   1e380:	bhi	1e4c0 <_start@@Base+0x9ec0>
   1e384:	mov	r3, #0
   1e388:	str	r3, [sp, #128]	; 0x80
   1e38c:	lsr	r3, r1, #16
   1e390:	lsl	r3, r3, #16
   1e394:	str	r3, [sp, #132]	; 0x84
   1e398:	mov	r2, #0
   1e39c:	mov	r3, #0
   1e3a0:	movt	r3, #26736	; 0x6870
   1e3a4:	ldrd	r0, [sp, #128]	; 0x80
   1e3a8:	cmp	r1, r3
   1e3ac:	cmpeq	r0, r2
   1e3b0:	beq	1e3cc <_start@@Base+0x9dcc>
   1e3b4:	mov	r2, r9
   1e3b8:	mov	r1, r8
   1e3bc:	mov	r0, sl
   1e3c0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e3c4:	mov	r8, r0
   1e3c8:	b	21804 <_start@@Base+0xd204>
   1e3cc:	mov	r3, #2
   1e3d0:	mov	r2, r9
   1e3d4:	mov	r1, r8
   1e3d8:	mov	r0, sl
   1e3dc:	bl	19da4 <_start@@Base+0x57a4>
   1e3e0:	mov	r4, r0
   1e3e4:	cmp	r0, r8
   1e3e8:	beq	1e4a8 <_start@@Base+0x9ea8>
   1e3ec:	mov	r3, #0
   1e3f0:	add	r2, sp, #368	; 0x170
   1e3f4:	strh	r3, [r2]
   1e3f8:	mov	r3, r2
   1e3fc:	mov	r2, r9
   1e400:	mov	r1, r0
   1e404:	mov	r0, sl
   1e408:	bl	17bcc <_start@@Base+0x35cc>
   1e40c:	mov	r8, r0
   1e410:	cmp	r4, r0
   1e414:	beq	1e460 <_start@@Base+0x9e60>
   1e418:	add	r3, sp, #368	; 0x170
   1e41c:	ldrsh	r3, [r3]
   1e420:	cmp	r3, #100	; 0x64
   1e424:	bne	1e434 <_start@@Base+0x9e34>
   1e428:	ldr	r3, [sl, #8]
   1e42c:	tst	r3, #2
   1e430:	beq	21804 <_start@@Base+0xd204>
   1e434:	mov	r3, #2
   1e438:	mov	r2, r3
   1e43c:	mov	r1, r3
   1e440:	ldr	r0, [sl]
   1e444:	bl	28c78 <flatcc_builder_table_add@@Base>
   1e448:	cmp	r0, #0
   1e44c:	beq	1e490 <_start@@Base+0x9e90>
   1e450:	add	r3, sp, #368	; 0x170
   1e454:	ldrsh	r3, [r3]
   1e458:	strh	r3, [r0]
   1e45c:	b	21804 <_start@@Base+0xd204>
   1e460:	add	r3, sp, #368	; 0x170
   1e464:	str	r3, [sp]
   1e468:	ldr	r3, [pc, #408]	; 1e608 <_start@@Base+0xa008>
   1e46c:	mov	r2, r9
   1e470:	mov	r1, r0
   1e474:	mov	r0, sl
   1e478:	bl	188fc <_start@@Base+0x42fc>
   1e47c:	cmp	r9, r0
   1e480:	cmpne	r8, r0
   1e484:	beq	1e4a0 <_start@@Base+0x9ea0>
   1e488:	mov	r8, r0
   1e48c:	b	1e418 <_start@@Base+0x9e18>
   1e490:	mov	fp, sl
   1e494:	mov	r0, r8
   1e498:	mov	r8, r0
   1e49c:	b	1df34 <_start@@Base+0x9934>
   1e4a0:	mov	fp, sl
   1e4a4:	b	1e498 <_start@@Base+0x9e98>
   1e4a8:	mov	r2, r9
   1e4ac:	mov	r1, r8
   1e4b0:	mov	r0, sl
   1e4b4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e4b8:	mov	r8, r0
   1e4bc:	b	21804 <_start@@Base+0xd204>
   1e4c0:	add	r3, pc, #296	; 0x128
   1e4c4:	ldrd	r2, [r3]
   1e4c8:	cmp	r1, r3
   1e4cc:	cmpeq	r0, r2
   1e4d0:	beq	1e510 <_start@@Base+0x9f10>
   1e4d4:	mov	r3, #0
   1e4d8:	str	r3, [sp, #208]	; 0xd0
   1e4dc:	str	r1, [sp, #212]	; 0xd4
   1e4e0:	add	r3, pc, #272	; 0x110
   1e4e4:	ldrd	r2, [r3]
   1e4e8:	ldrd	r0, [sp, #208]	; 0xd0
   1e4ec:	cmp	r1, r3
   1e4f0:	cmpeq	r0, r2
   1e4f4:	beq	1e6dc <_start@@Base+0xa0dc>
   1e4f8:	mov	r2, r9
   1e4fc:	mov	r1, r8
   1e500:	mov	r0, sl
   1e504:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e508:	mov	r8, r0
   1e50c:	b	21804 <_start@@Base+0xd204>
   1e510:	add	r4, r8, #8
   1e514:	mov	r1, r9
   1e518:	mov	r0, r4
   1e51c:	bl	146f0 <_start@@Base+0xf0>
   1e520:	mov	r3, #0
   1e524:	str	r3, [sp, #272]	; 0x110
   1e528:	and	r3, r1, #-16777216	; 0xff000000
   1e52c:	str	r3, [sp, #276]	; 0x114
   1e530:	add	r3, sp, #272	; 0x110
   1e534:	ldrd	r2, [r3]
   1e538:	cmp	r3, #2030043136	; 0x79000000
   1e53c:	cmpeq	r2, #0
   1e540:	beq	1e55c <_start@@Base+0x9f5c>
   1e544:	mov	r2, r9
   1e548:	mov	r1, r4
   1e54c:	mov	r0, sl
   1e550:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e554:	mov	r8, r0
   1e558:	b	21804 <_start@@Base+0xd204>
   1e55c:	mov	r3, #1
   1e560:	mov	r2, r9
   1e564:	mov	r1, r4
   1e568:	mov	r0, sl
   1e56c:	bl	19da4 <_start@@Base+0x57a4>
   1e570:	mov	r8, r0
   1e574:	cmp	r4, r0
   1e578:	bne	1e594 <_start@@Base+0x9f94>
   1e57c:	mov	r2, r9
   1e580:	mov	r1, r0
   1e584:	mov	r0, sl
   1e588:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e58c:	mov	r8, r0
   1e590:	b	21804 <_start@@Base+0xd204>
   1e594:	mvn	r3, #0
   1e598:	mov	r2, #1
   1e59c:	mov	r1, r2
   1e5a0:	ldr	r0, [sl]
   1e5a4:	bl	26dbc <flatcc_builder_start_vector@@Base>
   1e5a8:	cmp	r0, #0
   1e5ac:	bne	22adc <_start@@Base+0xe4dc>
   1e5b0:	add	r3, sp, #388	; 0x184
   1e5b4:	mov	r2, r9
   1e5b8:	mov	r1, r8
   1e5bc:	mov	r0, sl
   1e5c0:	bl	19598 <_start@@Base+0x4f98>
   1e5c4:	mov	r8, r0
   1e5c8:	ldr	r3, [sp, #388]	; 0x184
   1e5cc:	cmp	r3, #0
   1e5d0:	beq	1e6a8 <_start@@Base+0xa0a8>
   1e5d4:	mov	r5, #0
   1e5d8:	ldr	fp, [pc, #44]	; 1e60c <_start@@Base+0xa00c>
   1e5dc:	b	1e640 <_start@@Base+0xa040>
   1e5e0:	andeq	r0, r0, r0
   1e5e4:			; <UNDEFINED> instruction: 0x666c6578
   1e5e8:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1e5ec:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1e5f0:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1e5f4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1e5f8:	andeq	r0, r0, r0
   1e5fc:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1e600:	andeq	r4, r5, r4, lsl #3
   1e604:	muleq	r5, r4, r1
   1e608:	andeq	r4, r5, r0, lsr #3
   1e60c:	andeq	r4, r5, ip, lsr #3
   1e610:			; <UNDEFINED> instruction: 0x000541b8
   1e614:	ldrb	r3, [sp, #368]	; 0x170
   1e618:	strb	r3, [r4]
   1e61c:	add	r3, sp, #388	; 0x184
   1e620:	mov	r2, r9
   1e624:	mov	r1, r0
   1e628:	mov	r0, sl
   1e62c:	bl	1dd8c <_start@@Base+0x978c>
   1e630:	mov	r8, r0
   1e634:	ldr	r3, [sp, #388]	; 0x184
   1e638:	cmp	r3, #0
   1e63c:	beq	1e6a8 <_start@@Base+0xa0a8>
   1e640:	strb	r5, [sp, #368]	; 0x170
   1e644:	mov	r1, #1
   1e648:	ldr	r0, [sl]
   1e64c:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   1e650:	subs	r4, r0, #0
   1e654:	beq	22ae4 <_start@@Base+0xe4e4>
   1e658:	add	r3, sp, #368	; 0x170
   1e65c:	mov	r2, r9
   1e660:	mov	r1, r8
   1e664:	mov	r0, sl
   1e668:	bl	17f00 <_start@@Base+0x3900>
   1e66c:	cmp	r0, r8
   1e670:	bne	1e614 <_start@@Base+0xa014>
   1e674:	add	r3, sp, #368	; 0x170
   1e678:	str	r3, [sp]
   1e67c:	mov	r3, fp
   1e680:	mov	r2, r9
   1e684:	mov	r1, r8
   1e688:	mov	r0, sl
   1e68c:	bl	18e7c <_start@@Base+0x487c>
   1e690:	cmp	r9, r0
   1e694:	cmpne	r0, r8
   1e698:	bne	1e614 <_start@@Base+0xa014>
   1e69c:	mov	fp, sl
   1e6a0:	mov	r8, r0
   1e6a4:	b	1df34 <_start@@Base+0x9934>
   1e6a8:	ldr	r0, [sl]
   1e6ac:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   1e6b0:	str	r0, [sp, #384]	; 0x180
   1e6b4:	cmp	r0, #0
   1e6b8:	beq	22aec <_start@@Base+0xe4ec>
   1e6bc:	mov	r1, #5
   1e6c0:	ldr	r0, [sl]
   1e6c4:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1e6c8:	cmp	r0, #0
   1e6cc:	beq	22af4 <_start@@Base+0xe4f4>
   1e6d0:	ldr	r3, [sp, #384]	; 0x180
   1e6d4:	str	r3, [r0]
   1e6d8:	b	21804 <_start@@Base+0xd204>
   1e6dc:	mov	r3, #4
   1e6e0:	mov	r2, r9
   1e6e4:	mov	r1, r8
   1e6e8:	mov	r0, sl
   1e6ec:	bl	19da4 <_start@@Base+0x57a4>
   1e6f0:	mov	r4, r0
   1e6f4:	cmp	r0, r8
   1e6f8:	beq	1e7b8 <_start@@Base+0xa1b8>
   1e6fc:	mov	r3, #0
   1e700:	add	r2, sp, #368	; 0x170
   1e704:	strh	r3, [r2]
   1e708:	mov	r3, r2
   1e70c:	mov	r2, r9
   1e710:	mov	r1, r0
   1e714:	mov	r0, sl
   1e718:	bl	17bcc <_start@@Base+0x35cc>
   1e71c:	mov	r8, r0
   1e720:	cmp	r4, r0
   1e724:	beq	1e770 <_start@@Base+0xa170>
   1e728:	add	r3, sp, #368	; 0x170
   1e72c:	ldrsh	r3, [r3]
   1e730:	cmp	r3, #150	; 0x96
   1e734:	bne	1e744 <_start@@Base+0xa144>
   1e738:	ldr	r3, [sl, #8]
   1e73c:	tst	r3, #2
   1e740:	beq	21804 <_start@@Base+0xd204>
   1e744:	mov	r3, #2
   1e748:	mov	r2, r3
   1e74c:	mov	r1, #1
   1e750:	ldr	r0, [sl]
   1e754:	bl	28c78 <flatcc_builder_table_add@@Base>
   1e758:	cmp	r0, #0
   1e75c:	beq	1e7a0 <_start@@Base+0xa1a0>
   1e760:	add	r3, sp, #368	; 0x170
   1e764:	ldrsh	r3, [r3]
   1e768:	strh	r3, [r0]
   1e76c:	b	21804 <_start@@Base+0xd204>
   1e770:	add	r3, sp, #368	; 0x170
   1e774:	str	r3, [sp]
   1e778:	ldr	r3, [pc, #-368]	; 1e610 <_start@@Base+0xa010>
   1e77c:	mov	r2, r9
   1e780:	mov	r1, r0
   1e784:	mov	r0, sl
   1e788:	bl	188fc <_start@@Base+0x42fc>
   1e78c:	cmp	r9, r0
   1e790:	cmpne	r8, r0
   1e794:	beq	1e7b0 <_start@@Base+0xa1b0>
   1e798:	mov	r8, r0
   1e79c:	b	1e728 <_start@@Base+0xa128>
   1e7a0:	mov	fp, sl
   1e7a4:	mov	r0, r8
   1e7a8:	mov	r8, r0
   1e7ac:	b	1df34 <_start@@Base+0x9934>
   1e7b0:	mov	fp, sl
   1e7b4:	b	1e7a8 <_start@@Base+0xa1a8>
   1e7b8:	mov	r2, r9
   1e7bc:	mov	r1, r8
   1e7c0:	mov	r0, sl
   1e7c4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e7c8:	mov	r8, r0
   1e7cc:	b	21804 <_start@@Base+0xd204>
   1e7d0:	add	r3, pc, #904	; 0x388
   1e7d4:	ldrd	r2, [r3]
   1e7d8:	cmp	r1, r3
   1e7dc:	cmpeq	r0, r2
   1e7e0:	bhi	1f3c8 <_start@@Base+0xadc8>
   1e7e4:	add	r3, pc, #892	; 0x37c
   1e7e8:	ldrd	r2, [r3]
   1e7ec:	cmp	r1, r3
   1e7f0:	cmpeq	r0, r2
   1e7f4:	bhi	1e8ac <_start@@Base+0xa2ac>
   1e7f8:	mov	r3, #0
   1e7fc:	str	r3, [sp, #104]	; 0x68
   1e800:	str	r1, [sp, #108]	; 0x6c
   1e804:	add	r3, pc, #868	; 0x364
   1e808:	ldrd	r2, [r3]
   1e80c:	ldrd	r0, [sp, #104]	; 0x68
   1e810:	cmp	r1, r3
   1e814:	cmpeq	r0, r2
   1e818:	beq	1e834 <_start@@Base+0xa234>
   1e81c:	mov	r2, r9
   1e820:	mov	r1, r8
   1e824:	mov	r0, sl
   1e828:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e82c:	mov	r8, r0
   1e830:	b	21804 <_start@@Base+0xd204>
   1e834:	mov	r3, #4
   1e838:	mov	r2, r9
   1e83c:	mov	r1, r8
   1e840:	mov	r0, sl
   1e844:	bl	19da4 <_start@@Base+0x57a4>
   1e848:	cmp	r0, r8
   1e84c:	beq	1e894 <_start@@Base+0xa294>
   1e850:	add	r3, sp, #384	; 0x180
   1e854:	mov	r2, r9
   1e858:	mov	r1, r0
   1e85c:	mov	r0, sl
   1e860:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   1e864:	mov	r8, r0
   1e868:	ldr	r3, [sp, #384]	; 0x180
   1e86c:	cmp	r3, #0
   1e870:	beq	22afc <_start@@Base+0xe4fc>
   1e874:	mov	r1, #3
   1e878:	ldr	r0, [sl]
   1e87c:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1e880:	cmp	r0, #0
   1e884:	beq	22b04 <_start@@Base+0xe504>
   1e888:	ldr	r3, [sp, #384]	; 0x180
   1e88c:	str	r3, [r0]
   1e890:	b	21804 <_start@@Base+0xd204>
   1e894:	mov	r2, r9
   1e898:	mov	r1, r8
   1e89c:	mov	r0, sl
   1e8a0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e8a4:	mov	r8, r0
   1e8a8:	b	21804 <_start@@Base+0xd204>
   1e8ac:	add	r3, pc, #708	; 0x2c4
   1e8b0:	ldrd	r2, [r3]
   1e8b4:	cmp	r1, r3
   1e8b8:	cmpeq	r0, r2
   1e8bc:	beq	1e900 <_start@@Base+0xa300>
   1e8c0:	mov	r3, #0
   1e8c4:	str	r3, [sp, #176]	; 0xb0
   1e8c8:	bic	r3, r1, #255	; 0xff
   1e8cc:	str	r3, [sp, #180]	; 0xb4
   1e8d0:	add	r3, pc, #680	; 0x2a8
   1e8d4:	ldrd	r2, [r3]
   1e8d8:	ldrd	r0, [sp, #176]	; 0xb0
   1e8dc:	cmp	r1, r3
   1e8e0:	cmpeq	r0, r2
   1e8e4:	beq	1ead8 <_start@@Base+0xa4d8>
   1e8e8:	mov	r2, r9
   1e8ec:	mov	r1, r8
   1e8f0:	mov	r0, sl
   1e8f4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e8f8:	mov	r8, r0
   1e8fc:	b	21804 <_start@@Base+0xd204>
   1e900:	add	r4, r8, #8
   1e904:	mov	r1, r9
   1e908:	mov	r0, r4
   1e90c:	bl	146f0 <_start@@Base+0xf0>
   1e910:	add	r3, pc, #624	; 0x270
   1e914:	ldrd	r2, [r3]
   1e918:	cmp	r1, r3
   1e91c:	cmpeq	r0, r2
   1e920:	bne	1eac0 <_start@@Base+0xa4c0>
   1e924:	add	r4, r8, #16
   1e928:	mov	r1, r9
   1e92c:	mov	r0, r4
   1e930:	bl	146f0 <_start@@Base+0xf0>
   1e934:	and	r3, r0, #-16777216	; 0xff000000
   1e938:	str	r3, [sp, #280]	; 0x118
   1e93c:	str	r1, [sp, #284]	; 0x11c
   1e940:	add	r3, pc, #584	; 0x248
   1e944:	ldrd	r2, [r3]
   1e948:	add	r1, sp, #280	; 0x118
   1e94c:	ldrd	r0, [r1]
   1e950:	cmp	r1, r3
   1e954:	cmpeq	r0, r2
   1e958:	beq	1e974 <_start@@Base+0xa374>
   1e95c:	mov	r2, r9
   1e960:	mov	r1, r4
   1e964:	mov	r0, sl
   1e968:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1e96c:	mov	r8, r0
   1e970:	b	21804 <_start@@Base+0xd204>
   1e974:	mov	r3, #5
   1e978:	mov	r2, r9
   1e97c:	mov	r1, r4
   1e980:	mov	r0, sl
   1e984:	bl	19da4 <_start@@Base+0x57a4>
   1e988:	mov	r8, r0
   1e98c:	cmp	r4, r0
   1e990:	beq	1eaa8 <_start@@Base+0xa4a8>
   1e994:	mov	r1, #0
   1e998:	str	r1, [sp, #384]	; 0x180
   1e99c:	ldr	r0, [sl]
   1e9a0:	bl	270b4 <flatcc_builder_start_table@@Base>
   1e9a4:	cmp	r0, #0
   1e9a8:	beq	1e9f0 <_start@@Base+0xa3f0>
   1e9ac:	mov	r3, #33	; 0x21
   1e9b0:	mov	r2, r9
   1e9b4:	mov	r1, r8
   1e9b8:	mov	r0, sl
   1e9bc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1e9c0:	mov	r8, r0
   1e9c4:	ldr	r3, [sp, #384]	; 0x180
   1e9c8:	cmp	r3, #0
   1e9cc:	beq	22b0c <_start@@Base+0xe50c>
   1e9d0:	mov	r1, #34	; 0x22
   1e9d4:	ldr	r0, [sl]
   1e9d8:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1e9dc:	cmp	r0, #0
   1e9e0:	beq	22b14 <_start@@Base+0xe514>
   1e9e4:	ldr	r3, [sp, #384]	; 0x180
   1e9e8:	str	r3, [r0]
   1e9ec:	b	21804 <_start@@Base+0xd204>
   1e9f0:	add	r3, sp, #368	; 0x170
   1e9f4:	mov	r2, r9
   1e9f8:	mov	r1, r8
   1e9fc:	mov	r0, sl
   1ea00:	bl	1966c <_start@@Base+0x506c>
   1ea04:	mov	r8, r0
   1ea08:	ldr	r3, [sp, #368]	; 0x170
   1ea0c:	cmp	r3, #0
   1ea10:	beq	1ea84 <_start@@Base+0xa484>
   1ea14:	mov	r4, #5
   1ea18:	mov	r1, r0
   1ea1c:	b	1ea50 <_start@@Base+0xa450>
   1ea20:	mov	r2, r9
   1ea24:	mov	r0, sl
   1ea28:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ea2c:	add	r3, sp, #368	; 0x170
   1ea30:	mov	r2, r9
   1ea34:	mov	r1, r0
   1ea38:	mov	r0, sl
   1ea3c:	bl	1a448 <_start@@Base+0x5e48>
   1ea40:	mov	r1, r0
   1ea44:	ldr	r3, [sp, #368]	; 0x170
   1ea48:	cmp	r3, #0
   1ea4c:	beq	1ea80 <_start@@Base+0xa480>
   1ea50:	cmp	r9, r1
   1ea54:	beq	1ea20 <_start@@Base+0xa420>
   1ea58:	ldrb	r3, [r1]
   1ea5c:	cmp	r3, #34	; 0x22
   1ea60:	addeq	r1, r1, #1
   1ea64:	beq	1ea20 <_start@@Base+0xa420>
   1ea68:	mov	r3, r4
   1ea6c:	mov	r2, r9
   1ea70:	mov	r0, sl
   1ea74:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1ea78:	mov	r1, r0
   1ea7c:	b	1ea20 <_start@@Base+0xa420>
   1ea80:	mov	r8, r0
   1ea84:	ldr	r3, [sl, #20]
   1ea88:	cmp	r3, #0
   1ea8c:	bne	1e9ac <_start@@Base+0xa3ac>
   1ea90:	ldr	r0, [sl]
   1ea94:	bl	27b8c <flatcc_builder_end_table@@Base>
   1ea98:	str	r0, [sp, #384]	; 0x180
   1ea9c:	cmp	r0, #0
   1eaa0:	bne	1e9c4 <_start@@Base+0xa3c4>
   1eaa4:	b	1e9ac <_start@@Base+0xa3ac>
   1eaa8:	mov	r2, r9
   1eaac:	mov	r1, r0
   1eab0:	mov	r0, sl
   1eab4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1eab8:	mov	r8, r0
   1eabc:	b	21804 <_start@@Base+0xd204>
   1eac0:	mov	r2, r9
   1eac4:	mov	r1, r4
   1eac8:	mov	r0, sl
   1eacc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ead0:	mov	r8, r0
   1ead4:	b	21804 <_start@@Base+0xd204>
   1ead8:	mov	r3, #3
   1eadc:	mov	r2, r9
   1eae0:	mov	r1, r8
   1eae4:	mov	r0, sl
   1eae8:	bl	19da4 <_start@@Base+0x57a4>
   1eaec:	mov	r4, r0
   1eaf0:	cmp	r0, r8
   1eaf4:	beq	1f3b0 <_start@@Base+0xadb0>
   1eaf8:	mov	r3, #16
   1eafc:	mov	r2, #32
   1eb00:	mov	r1, #0
   1eb04:	ldr	r0, [sl]
   1eb08:	bl	28c78 <flatcc_builder_table_add@@Base>
   1eb0c:	subs	fp, r0, #0
   1eb10:	beq	22a80 <_start@@Base+0xe480>
   1eb14:	add	r3, sp, #360	; 0x168
   1eb18:	mov	r2, r9
   1eb1c:	mov	r1, r4
   1eb20:	mov	r0, sl
   1eb24:	bl	1966c <_start@@Base+0x506c>
   1eb28:	mov	r8, r0
   1eb2c:	add	r5, pc, #100	; 0x64
   1eb30:	ldrd	r4, [r5]
   1eb34:	vldr	s18, [pc, #108]	; 1eba8 <_start@@Base+0xa5a8>
   1eb38:	vldr	d8, [pc, #96]	; 1eba0 <_start@@Base+0xa5a0>
   1eb3c:	b	1ecc8 <_start@@Base+0xa6c8>
   1eb40:	mov	r3, #5
   1eb44:	mov	r2, r9
   1eb48:	mov	r1, r8
   1eb4c:	mov	r0, sl
   1eb50:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1eb54:	mov	r8, r0
   1eb58:	b	1ecec <_start@@Base+0xa6ec>
   1eb5c:	nop	{0}
   1eb60:			; <UNDEFINED> instruction: 0xffffffff
   1eb64:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1eb68:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1eb6c:	rsbvc	r7, r1, r5, ror #4
   1eb70:	andeq	r0, r0, r0
   1eb74:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1eb78:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1eb7c:	rsbvc	r7, r1, r5, ror #4
   1eb80:	andeq	r0, r0, r0
   1eb84:	rsbvc	r7, pc, r0, lsl #6
   1eb88:	rsbvc	r6, r1, r5, ror #6
   1eb8c:	smcvs	54867	; 0xd653
   1eb90:	strvc	r0, [r0], #-0
   1eb94:	svcpl	0x00746573
   1eb98:	rscscc	pc, pc, #1020	; 0x3fc
   1eb9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
	...
   1ebac:	ldrb	r0, [r8, #7]
   1ebb0:	mov	r1, #0
   1ebb4:	ldrb	r2, [r8, #6]
   1ebb8:	orr	r3, r0, r2, lsl #8
   1ebbc:	mov	r2, r1
   1ebc0:	ldrb	r0, [r8, #5]
   1ebc4:	orr	r3, r3, r0, lsl #16
   1ebc8:	ldrb	r0, [r8, #4]
   1ebcc:	orr	r3, r3, r0, lsl #24
   1ebd0:	ldrb	r0, [r8, #3]
   1ebd4:	orr	r2, r2, r0
   1ebd8:	ldrb	r0, [r8, #2]
   1ebdc:	orr	r2, r2, r0, lsl #8
   1ebe0:	ldrb	r0, [r8, #1]
   1ebe4:	orr	r2, r2, r0, lsl #16
   1ebe8:	ldrb	r0, [r8]
   1ebec:	mov	r6, r3
   1ebf0:	orr	r7, r2, r0, lsl #24
   1ebf4:	cmp	r7, r5
   1ebf8:	cmpeq	r6, r4
   1ebfc:	bhi	1ef98 <_start@@Base+0xa998>
   1ec00:	and	r3, r6, #-16777216	; 0xff000000
   1ec04:	str	r3, [sp, #32]
   1ec08:	str	r7, [sp, #36]	; 0x24
   1ec0c:	ldrd	r2, [sp, #32]
   1ec10:	add	r1, pc, #976	; 0x3d0
   1ec14:	ldrd	r0, [r1]
   1ec18:	cmp	r3, r1
   1ec1c:	cmpeq	r2, r0
   1ec20:	beq	1ed88 <_start@@Base+0xa788>
   1ec24:	ldrd	r2, [sp, #32]
   1ec28:	add	r1, pc, #960	; 0x3c0
   1ec2c:	ldrd	r0, [r1]
   1ec30:	cmp	r3, r1
   1ec34:	cmpeq	r2, r0
   1ec38:	beq	1eed8 <_start@@Base+0xa8d8>
   1ec3c:	mov	r2, r9
   1ec40:	mov	r1, r8
   1ec44:	mov	r0, sl
   1ec48:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ec4c:	mov	r8, r0
   1ec50:	sub	r3, r9, r8
   1ec54:	cmp	r3, #1
   1ec58:	ble	1ec6c <_start@@Base+0xa66c>
   1ec5c:	ldrb	r3, [r8]
   1ec60:	cmp	r3, #32
   1ec64:	bhi	1ec80 <_start@@Base+0xa680>
   1ec68:	beq	1f2a8 <_start@@Base+0xaca8>
   1ec6c:	mov	r2, r9
   1ec70:	mov	r1, r8
   1ec74:	mov	r0, sl
   1ec78:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1ec7c:	mov	r8, r0
   1ec80:	cmp	r9, r8
   1ec84:	moveq	r3, #0
   1ec88:	streq	r3, [sp, #360]	; 0x168
   1ec8c:	beq	1ecc8 <_start@@Base+0xa6c8>
   1ec90:	ldrb	r3, [r8]
   1ec94:	cmp	r3, #44	; 0x2c
   1ec98:	beq	1f308 <_start@@Base+0xad08>
   1ec9c:	mov	r3, #0
   1eca0:	str	r3, [sp, #360]	; 0x168
   1eca4:	ldrb	r3, [r8]
   1eca8:	cmp	r3, #125	; 0x7d
   1ecac:	beq	1f2bc <_start@@Base+0xacbc>
   1ecb0:	mov	r3, #10
   1ecb4:	mov	r2, r9
   1ecb8:	mov	r1, r8
   1ecbc:	mov	r0, sl
   1ecc0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1ecc4:	mov	r8, r0
   1ecc8:	ldr	r3, [sp, #360]	; 0x168
   1eccc:	cmp	r3, #0
   1ecd0:	beq	21804 <_start@@Base+0xd204>
   1ecd4:	cmp	r9, r8
   1ecd8:	beq	1ecec <_start@@Base+0xa6ec>
   1ecdc:	ldrb	r3, [r8]
   1ece0:	cmp	r3, #34	; 0x22
   1ece4:	addeq	r8, r8, #1
   1ece8:	bne	1eb40 <_start@@Base+0xa540>
   1ecec:	sub	r3, r9, r8
   1ecf0:	cmp	r3, #8
   1ecf4:	bhi	1ebac <_start@@Base+0xa5ac>
   1ecf8:	sub	r3, r3, #1
   1ecfc:	cmp	r3, #7
   1ed00:	ldrls	pc, [pc, r3, lsl #2]
   1ed04:	b	1ed7c <_start@@Base+0xa77c>
   1ed08:	andeq	lr, r1, r0, ror sp
   1ed0c:	andeq	lr, r1, r4, ror #26
   1ed10:	andeq	lr, r1, r8, asr sp
   1ed14:	andeq	lr, r1, ip, asr #26
   1ed18:	andeq	lr, r1, r0, asr #26
   1ed1c:	andeq	lr, r1, r4, lsr sp
   1ed20:	andeq	lr, r1, r8, lsr #26
   1ed24:	andeq	lr, r1, ip, lsr #23
   1ed28:	mov	r0, #0
   1ed2c:	mov	r1, #0
   1ed30:	b	1ebb4 <_start@@Base+0xa5b4>
   1ed34:	mov	r3, #0
   1ed38:	mov	r2, r3
   1ed3c:	b	1ebc0 <_start@@Base+0xa5c0>
   1ed40:	mov	r3, #0
   1ed44:	mov	r2, r3
   1ed48:	b	1ebc8 <_start@@Base+0xa5c8>
   1ed4c:	mov	r3, #0
   1ed50:	mov	r2, r3
   1ed54:	b	1ebd0 <_start@@Base+0xa5d0>
   1ed58:	mov	r3, #0
   1ed5c:	mov	r2, r3
   1ed60:	b	1ebd8 <_start@@Base+0xa5d8>
   1ed64:	mov	r3, #0
   1ed68:	mov	r2, r3
   1ed6c:	b	1ebe0 <_start@@Base+0xa5e0>
   1ed70:	mov	r3, #0
   1ed74:	mov	r2, r3
   1ed78:	b	1ebe8 <_start@@Base+0xa5e8>
   1ed7c:	mov	r6, #0
   1ed80:	mov	r7, #0
   1ed84:	b	1ebf4 <_start@@Base+0xa5f4>
   1ed88:	mov	r3, #5
   1ed8c:	mov	r2, r9
   1ed90:	mov	r1, r8
   1ed94:	mov	r0, sl
   1ed98:	bl	19da4 <_start@@Base+0x57a4>
   1ed9c:	mov	r2, r0
   1eda0:	str	r0, [sp, #24]
   1eda4:	cmp	r8, r0
   1eda8:	beq	1eec0 <_start@@Base+0xa8c0>
   1edac:	mov	r3, #0
   1edb0:	strb	r3, [sp, #356]	; 0x164
   1edb4:	mov	r0, #0
   1edb8:	mov	r1, #0
   1edbc:	add	ip, sp, #368	; 0x170
   1edc0:	strd	r0, [ip]
   1edc4:	str	r3, [sp, #364]	; 0x16c
   1edc8:	mov	r1, r2
   1edcc:	cmp	r9, r2
   1edd0:	beq	22cac <_start@@Base+0xe6ac>
   1edd4:	str	ip, [sp]
   1edd8:	add	r3, sp, #364	; 0x16c
   1eddc:	mov	r2, r9
   1ede0:	mov	r0, sl
   1ede4:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   1ede8:	mov	r8, r0
   1edec:	ldr	r1, [sp, #24]
   1edf0:	cmp	r1, r0
   1edf4:	bne	1ee30 <_start@@Base+0xa830>
   1edf8:	str	r8, [sp, #24]
   1edfc:	add	r3, sp, #356	; 0x164
   1ee00:	str	r3, [sp]
   1ee04:	ldr	r3, [pc, #500]	; 1f000 <_start@@Base+0xaa00>
   1ee08:	mov	r2, r9
   1ee0c:	ldr	r1, [sp, #24]
   1ee10:	mov	r0, sl
   1ee14:	bl	1903c <_start@@Base+0x4a3c>
   1ee18:	mov	r8, r0
   1ee1c:	ldr	r3, [sp, #24]
   1ee20:	cmp	r9, r0
   1ee24:	cmpne	r0, r3
   1ee28:	bne	1ee7c <_start@@Base+0xa87c>
   1ee2c:	b	1ef64 <_start@@Base+0xa964>
   1ee30:	add	r3, sp, #368	; 0x170
   1ee34:	ldrd	r2, [r3]
   1ee38:	ldr	r1, [sp, #364]	; 0x16c
   1ee3c:	cmp	r1, #0
   1ee40:	beq	1ee8c <_start@@Base+0xa88c>
   1ee44:	cmp	r3, #0
   1ee48:	cmpeq	r2, #128	; 0x80
   1ee4c:	rsbls	r2, r2, #0
   1ee50:	strbls	r2, [sp, #356]	; 0x164
   1ee54:	bls	1ee7c <_start@@Base+0xa87c>
   1ee58:	mov	r3, #8
   1ee5c:	mov	r2, r9
   1ee60:	mov	r1, r0
   1ee64:	mov	r0, sl
   1ee68:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1ee6c:	mov	r8, r0
   1ee70:	ldr	r3, [sp, #24]
   1ee74:	cmp	r3, r8
   1ee78:	beq	1eeb8 <_start@@Base+0xa8b8>
   1ee7c:	add	r3, sp, #356	; 0x164
   1ee80:	ldrsb	r3, [r3]
   1ee84:	strb	r3, [fp, #24]
   1ee88:	b	1ec50 <_start@@Base+0xa650>
   1ee8c:	cmp	r3, #0
   1ee90:	cmpeq	r2, #127	; 0x7f
   1ee94:	strbls	r2, [sp, #356]	; 0x164
   1ee98:	bls	1ee7c <_start@@Base+0xa87c>
   1ee9c:	mov	r3, #7
   1eea0:	mov	r2, r9
   1eea4:	mov	r1, r0
   1eea8:	mov	r0, sl
   1eeac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1eeb0:	mov	r8, r0
   1eeb4:	b	1ee70 <_start@@Base+0xa870>
   1eeb8:	str	r8, [sp, #24]
   1eebc:	b	1edfc <_start@@Base+0xa7fc>
   1eec0:	mov	r2, r9
   1eec4:	ldr	r1, [sp, #24]
   1eec8:	mov	r0, sl
   1eecc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1eed0:	mov	r8, r0
   1eed4:	b	1ec50 <_start@@Base+0xa650>
   1eed8:	mov	r3, #5
   1eedc:	mov	r2, r9
   1eee0:	mov	r1, r8
   1eee4:	mov	r0, sl
   1eee8:	bl	19da4 <_start@@Base+0x57a4>
   1eeec:	mov	r1, r0
   1eef0:	str	r0, [sp, #24]
   1eef4:	cmp	r8, r0
   1eef8:	beq	1ef80 <_start@@Base+0xa980>
   1eefc:	vstr	d8, [sp, #368]	; 0x170
   1ef00:	add	r3, sp, #368	; 0x170
   1ef04:	mov	r2, r9
   1ef08:	mov	r0, sl
   1ef0c:	bl	2d578 <flatcc_json_parser_double@@Base>
   1ef10:	mov	r8, r0
   1ef14:	ldr	r3, [sp, #24]
   1ef18:	cmp	r3, r0
   1ef1c:	beq	1ef30 <_start@@Base+0xa930>
   1ef20:	add	r3, sp, #368	; 0x170
   1ef24:	ldrd	r2, [r3]
   1ef28:	strd	r2, [fp, #16]
   1ef2c:	b	1ec50 <_start@@Base+0xa650>
   1ef30:	add	r3, sp, #368	; 0x170
   1ef34:	str	r3, [sp]
   1ef38:	ldr	r3, [pc, #196]	; 1f004 <_start@@Base+0xaa04>
   1ef3c:	mov	r2, r9
   1ef40:	mov	r1, r0
   1ef44:	mov	r0, sl
   1ef48:	bl	18474 <_start@@Base+0x3e74>
   1ef4c:	cmp	r9, r0
   1ef50:	cmpne	r8, r0
   1ef54:	beq	1ef60 <_start@@Base+0xa960>
   1ef58:	mov	r8, r0
   1ef5c:	b	1ef20 <_start@@Base+0xa920>
   1ef60:	mov	r8, r0
   1ef64:	mov	r3, #33	; 0x21
   1ef68:	mov	r2, r9
   1ef6c:	mov	r1, r8
   1ef70:	mov	r0, sl
   1ef74:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1ef78:	mov	r8, r0
   1ef7c:	b	21804 <_start@@Base+0xd204>
   1ef80:	mov	r2, r9
   1ef84:	ldr	r1, [sp, #24]
   1ef88:	mov	r0, sl
   1ef8c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1ef90:	mov	r8, r0
   1ef94:	b	1ec50 <_start@@Base+0xa650>
   1ef98:	mvn	r2, #0
   1ef9c:	mvn	r3, #-2013265920	; 0x88000000
   1efa0:	cmp	r7, r3
   1efa4:	cmpeq	r6, r2
   1efa8:	bhi	1f060 <_start@@Base+0xaa60>
   1efac:	and	r3, r6, #-16777216	; 0xff000000
   1efb0:	str	r3, [sp, #72]	; 0x48
   1efb4:	str	r7, [sp, #76]	; 0x4c
   1efb8:	ldrd	r2, [sp, #72]	; 0x48
   1efbc:	add	r1, pc, #52	; 0x34
   1efc0:	ldrd	r0, [r1]
   1efc4:	cmp	r3, r1
   1efc8:	cmpeq	r2, r0
   1efcc:	beq	1f014 <_start@@Base+0xaa14>
   1efd0:	mov	r2, r9
   1efd4:	mov	r1, r8
   1efd8:	mov	r0, sl
   1efdc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1efe0:	mov	r8, r0
   1efe4:	b	1ec50 <_start@@Base+0xa650>
   1efe8:	andcc	r0, r0, #0
   1efec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1eff0:	mrscc	r0, (UNDEF: 0)
   1eff4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1eff8:	movwcc	r0, #0
   1effc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f000:	andeq	r4, r5, r4, asr #3
   1f004:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   1f008:	andeq	r4, r5, r0, ror #3
   1f00c:	andeq	r4, r5, ip, ror #3
   1f010:	strdeq	r4, [r5], -r8
   1f014:	mov	r3, #5
   1f018:	mov	r2, r9
   1f01c:	mov	r1, r8
   1f020:	mov	r0, sl
   1f024:	bl	19da4 <_start@@Base+0x57a4>
   1f028:	mov	r1, r0
   1f02c:	cmp	r8, r0
   1f030:	beq	1f04c <_start@@Base+0xaa4c>
   1f034:	add	r3, fp, #26
   1f038:	mov	r2, r9
   1f03c:	mov	r0, sl
   1f040:	bl	19740 <_start@@Base+0x5140>
   1f044:	mov	r8, r0
   1f048:	b	1ec50 <_start@@Base+0xa650>
   1f04c:	mov	r2, r9
   1f050:	mov	r0, sl
   1f054:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f058:	mov	r8, r0
   1f05c:	b	1ec50 <_start@@Base+0xa650>
   1f060:	mvn	r2, #0
   1f064:	mvn	r3, #-2030043136	; 0x87000000
   1f068:	cmp	r7, r3
   1f06c:	cmpeq	r6, r2
   1f070:	bhi	1f118 <_start@@Base+0xab18>
   1f074:	mov	r3, #1
   1f078:	mov	r2, r9
   1f07c:	mov	r1, r8
   1f080:	mov	r0, sl
   1f084:	bl	19da4 <_start@@Base+0x57a4>
   1f088:	mov	r1, r0
   1f08c:	str	r0, [sp, #24]
   1f090:	cmp	r8, r0
   1f094:	beq	1f100 <_start@@Base+0xab00>
   1f098:	vstr	s18, [sp, #368]	; 0x170
   1f09c:	add	r3, sp, #368	; 0x170
   1f0a0:	mov	r2, r9
   1f0a4:	mov	r0, sl
   1f0a8:	bl	2d678 <flatcc_json_parser_float@@Base>
   1f0ac:	mov	r8, r0
   1f0b0:	ldr	r3, [sp, #24]
   1f0b4:	cmp	r3, r0
   1f0b8:	beq	1f0c8 <_start@@Base+0xaac8>
   1f0bc:	ldr	r3, [sp, #368]	; 0x170
   1f0c0:	str	r3, [fp]
   1f0c4:	b	1ec50 <_start@@Base+0xa650>
   1f0c8:	add	r3, sp, #368	; 0x170
   1f0cc:	str	r3, [sp]
   1f0d0:	ldr	r3, [pc, #-208]	; 1f008 <_start@@Base+0xaa08>
   1f0d4:	mov	r2, r9
   1f0d8:	mov	r1, r0
   1f0dc:	mov	r0, sl
   1f0e0:	bl	182f0 <_start@@Base+0x3cf0>
   1f0e4:	cmp	r9, r0
   1f0e8:	cmpne	r8, r0
   1f0ec:	beq	1f0f8 <_start@@Base+0xaaf8>
   1f0f0:	mov	r8, r0
   1f0f4:	b	1f0bc <_start@@Base+0xaabc>
   1f0f8:	mov	r8, r0
   1f0fc:	b	1ef64 <_start@@Base+0xa964>
   1f100:	mov	r2, r9
   1f104:	ldr	r1, [sp, #24]
   1f108:	mov	r0, sl
   1f10c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f110:	mov	r8, r0
   1f114:	b	1ec50 <_start@@Base+0xa650>
   1f118:	mov	r3, #0
   1f11c:	str	r3, [sp, #80]	; 0x50
   1f120:	and	r3, r7, #-16777216	; 0xff000000
   1f124:	str	r3, [sp, #84]	; 0x54
   1f128:	ldrd	r2, [sp, #80]	; 0x50
   1f12c:	cmp	r3, #2046820352	; 0x7a000000
   1f130:	cmpeq	r2, #0
   1f134:	beq	1f160 <_start@@Base+0xab60>
   1f138:	ldrd	r2, [sp, #80]	; 0x50
   1f13c:	cmp	r3, #2030043136	; 0x79000000
   1f140:	cmpeq	r2, #0
   1f144:	beq	1f204 <_start@@Base+0xac04>
   1f148:	mov	r2, r9
   1f14c:	mov	r1, r8
   1f150:	mov	r0, sl
   1f154:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f158:	mov	r8, r0
   1f15c:	b	1ec50 <_start@@Base+0xa650>
   1f160:	mov	r3, #1
   1f164:	mov	r2, r9
   1f168:	mov	r1, r8
   1f16c:	mov	r0, sl
   1f170:	bl	19da4 <_start@@Base+0x57a4>
   1f174:	mov	r1, r0
   1f178:	str	r0, [sp, #24]
   1f17c:	cmp	r8, r0
   1f180:	beq	1f1ec <_start@@Base+0xabec>
   1f184:	vstr	s18, [sp, #368]	; 0x170
   1f188:	add	r3, sp, #368	; 0x170
   1f18c:	mov	r2, r9
   1f190:	mov	r0, sl
   1f194:	bl	2d678 <flatcc_json_parser_float@@Base>
   1f198:	mov	r8, r0
   1f19c:	ldr	r3, [sp, #24]
   1f1a0:	cmp	r3, r0
   1f1a4:	beq	1f1b4 <_start@@Base+0xabb4>
   1f1a8:	ldr	r3, [sp, #368]	; 0x170
   1f1ac:	str	r3, [fp, #8]
   1f1b0:	b	1ec50 <_start@@Base+0xa650>
   1f1b4:	add	r3, sp, #368	; 0x170
   1f1b8:	str	r3, [sp]
   1f1bc:	ldr	r3, [pc, #-440]	; 1f00c <_start@@Base+0xaa0c>
   1f1c0:	mov	r2, r9
   1f1c4:	mov	r1, r0
   1f1c8:	mov	r0, sl
   1f1cc:	bl	182f0 <_start@@Base+0x3cf0>
   1f1d0:	cmp	r9, r0
   1f1d4:	cmpne	r8, r0
   1f1d8:	beq	1f1e4 <_start@@Base+0xabe4>
   1f1dc:	mov	r8, r0
   1f1e0:	b	1f1a8 <_start@@Base+0xaba8>
   1f1e4:	mov	r8, r0
   1f1e8:	b	1ef64 <_start@@Base+0xa964>
   1f1ec:	mov	r2, r9
   1f1f0:	ldr	r1, [sp, #24]
   1f1f4:	mov	r0, sl
   1f1f8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f1fc:	mov	r8, r0
   1f200:	b	1ec50 <_start@@Base+0xa650>
   1f204:	mov	r3, #1
   1f208:	mov	r2, r9
   1f20c:	mov	r1, r8
   1f210:	mov	r0, sl
   1f214:	bl	19da4 <_start@@Base+0x57a4>
   1f218:	mov	r1, r0
   1f21c:	str	r0, [sp, #24]
   1f220:	cmp	r8, r0
   1f224:	beq	1f290 <_start@@Base+0xac90>
   1f228:	vstr	s18, [sp, #368]	; 0x170
   1f22c:	add	r3, sp, #368	; 0x170
   1f230:	mov	r2, r9
   1f234:	mov	r0, sl
   1f238:	bl	2d678 <flatcc_json_parser_float@@Base>
   1f23c:	mov	r8, r0
   1f240:	ldr	r3, [sp, #24]
   1f244:	cmp	r3, r0
   1f248:	beq	1f258 <_start@@Base+0xac58>
   1f24c:	ldr	r3, [sp, #368]	; 0x170
   1f250:	str	r3, [fp, #4]
   1f254:	b	1ec50 <_start@@Base+0xa650>
   1f258:	add	r3, sp, #368	; 0x170
   1f25c:	str	r3, [sp]
   1f260:	ldr	r3, [pc, #-600]	; 1f010 <_start@@Base+0xaa10>
   1f264:	mov	r2, r9
   1f268:	mov	r1, r0
   1f26c:	mov	r0, sl
   1f270:	bl	182f0 <_start@@Base+0x3cf0>
   1f274:	cmp	r9, r0
   1f278:	cmpne	r8, r0
   1f27c:	beq	1f288 <_start@@Base+0xac88>
   1f280:	mov	r8, r0
   1f284:	b	1f24c <_start@@Base+0xac4c>
   1f288:	mov	r8, r0
   1f28c:	b	1ef64 <_start@@Base+0xa964>
   1f290:	mov	r2, r9
   1f294:	ldr	r1, [sp, #24]
   1f298:	mov	r0, sl
   1f29c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f2a0:	mov	r8, r0
   1f2a4:	b	1ec50 <_start@@Base+0xa650>
   1f2a8:	ldrb	r3, [r8, #1]
   1f2ac:	cmp	r3, #32
   1f2b0:	addhi	r8, r8, #1
   1f2b4:	bls	1ec6c <_start@@Base+0xa66c>
   1f2b8:	b	1ec80 <_start@@Base+0xa680>
   1f2bc:	add	r1, r8, #1
   1f2c0:	sub	r3, r9, r1
   1f2c4:	cmp	r3, #1
   1f2c8:	ble	1f2e0 <_start@@Base+0xace0>
   1f2cc:	ldrb	r3, [r8, #1]
   1f2d0:	cmp	r3, #32
   1f2d4:	movhi	r8, r1
   1f2d8:	bhi	1ecc8 <_start@@Base+0xa6c8>
   1f2dc:	beq	1f2f4 <_start@@Base+0xacf4>
   1f2e0:	mov	r2, r9
   1f2e4:	mov	r0, sl
   1f2e8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1f2ec:	mov	r8, r0
   1f2f0:	b	1ecc8 <_start@@Base+0xa6c8>
   1f2f4:	ldrb	r3, [r8, #2]
   1f2f8:	cmp	r3, #32
   1f2fc:	addhi	r8, r8, #2
   1f300:	bls	1f2e0 <_start@@Base+0xace0>
   1f304:	b	1ecc8 <_start@@Base+0xa6c8>
   1f308:	add	r1, r8, #1
   1f30c:	sub	r3, r9, r1
   1f310:	cmp	r3, #1
   1f314:	ble	1f32c <_start@@Base+0xad2c>
   1f318:	ldrb	r3, [r8, #1]
   1f31c:	cmp	r3, #32
   1f320:	movhi	r8, r1
   1f324:	bhi	1f33c <_start@@Base+0xad3c>
   1f328:	beq	1f378 <_start@@Base+0xad78>
   1f32c:	mov	r2, r9
   1f330:	mov	r0, sl
   1f334:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1f338:	mov	r8, r0
   1f33c:	cmp	r9, r8
   1f340:	beq	1f38c <_start@@Base+0xad8c>
   1f344:	ldrb	r3, [r8]
   1f348:	cmp	r3, #125	; 0x7d
   1f34c:	movne	r3, #1
   1f350:	strne	r3, [sp, #360]	; 0x168
   1f354:	bne	1ecc8 <_start@@Base+0xa6c8>
   1f358:	mov	r3, #0
   1f35c:	str	r3, [sp, #360]	; 0x168
   1f360:	mov	r2, r9
   1f364:	add	r1, r8, #1
   1f368:	mov	r0, sl
   1f36c:	bl	1809c <_start@@Base+0x3a9c>
   1f370:	mov	r8, r0
   1f374:	b	1ecc8 <_start@@Base+0xa6c8>
   1f378:	ldrb	r3, [r8, #2]
   1f37c:	cmp	r3, #32
   1f380:	addhi	r8, r8, #2
   1f384:	bls	1f32c <_start@@Base+0xad2c>
   1f388:	b	1f33c <_start@@Base+0xad3c>
   1f38c:	mov	r3, #0
   1f390:	str	r3, [sp, #360]	; 0x168
   1f394:	mov	r3, #10
   1f398:	mov	r2, r9
   1f39c:	mov	r1, r8
   1f3a0:	mov	r0, sl
   1f3a4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1f3a8:	mov	r8, r0
   1f3ac:	b	1ecc8 <_start@@Base+0xa6c8>
   1f3b0:	mov	r2, r9
   1f3b4:	mov	r1, r8
   1f3b8:	mov	r0, sl
   1f3bc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f3c0:	mov	r8, r0
   1f3c4:	b	21804 <_start@@Base+0xd204>
   1f3c8:	and	r3, r0, #-16777216	; 0xff000000
   1f3cc:	str	r3, [sp, #56]	; 0x38
   1f3d0:	str	r1, [sp, #60]	; 0x3c
   1f3d4:	add	r3, pc, #924	; 0x39c
   1f3d8:	ldrd	r2, [r3]
   1f3dc:	ldrd	r0, [sp, #56]	; 0x38
   1f3e0:	cmp	r1, r3
   1f3e4:	cmpeq	r0, r2
   1f3e8:	beq	1f440 <_start@@Base+0xae40>
   1f3ec:	mov	r3, #4
   1f3f0:	mov	r2, r9
   1f3f4:	mov	r1, r8
   1f3f8:	mov	r0, sl
   1f3fc:	bl	19da4 <_start@@Base+0x57a4>
   1f400:	cmp	r0, r8
   1f404:	beq	1f520 <_start@@Base+0xaf20>
   1f408:	movw	r3, #11468	; 0x2ccc
   1f40c:	movt	r3, #2
   1f410:	str	r3, [sp, #8]
   1f414:	ldr	r3, [sp, #380]	; 0x17c
   1f418:	str	r3, [sp, #4]
   1f41c:	mov	r3, #8
   1f420:	str	r3, [sp]
   1f424:	mov	r3, #0
   1f428:	mov	r2, r9
   1f42c:	mov	r1, r0
   1f430:	mov	r0, sl
   1f434:	bl	2ef70 <flatcc_json_parser_union@@Base>
   1f438:	mov	r8, r0
   1f43c:	b	21804 <_start@@Base+0xd204>
   1f440:	mov	r3, #5
   1f444:	mov	r2, r9
   1f448:	mov	r1, r8
   1f44c:	mov	r0, sl
   1f450:	bl	19da4 <_start@@Base+0x57a4>
   1f454:	mov	r4, r0
   1f458:	cmp	r0, r8
   1f45c:	beq	1f5b4 <_start@@Base+0xafb4>
   1f460:	mvn	r3, #-1073741824	; 0xc0000000
   1f464:	mov	r2, #2
   1f468:	mov	r1, #4
   1f46c:	ldr	r0, [sl]
   1f470:	bl	26dbc <flatcc_builder_start_vector@@Base>
   1f474:	cmp	r0, #0
   1f478:	bne	22a8c <_start@@Base+0xe48c>
   1f47c:	add	r3, sp, #388	; 0x184
   1f480:	mov	r2, r9
   1f484:	mov	r1, r4
   1f488:	mov	r0, sl
   1f48c:	bl	19598 <_start@@Base+0x4f98>
   1f490:	mov	r8, r0
   1f494:	ldr	r3, [sp, #388]	; 0x184
   1f498:	cmp	r3, #0
   1f49c:	beq	1f4ec <_start@@Base+0xaeec>
   1f4a0:	mov	r4, #1
   1f4a4:	mov	r1, r4
   1f4a8:	ldr	r0, [sl]
   1f4ac:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   1f4b0:	subs	r3, r0, #0
   1f4b4:	beq	22b1c <_start@@Base+0xe51c>
   1f4b8:	mov	r2, r9
   1f4bc:	mov	r1, r8
   1f4c0:	mov	r0, sl
   1f4c4:	bl	19740 <_start@@Base+0x5140>
   1f4c8:	add	r3, sp, #388	; 0x184
   1f4cc:	mov	r2, r9
   1f4d0:	mov	r1, r0
   1f4d4:	mov	r0, sl
   1f4d8:	bl	1dd8c <_start@@Base+0x978c>
   1f4dc:	mov	r8, r0
   1f4e0:	ldr	r3, [sp, #388]	; 0x184
   1f4e4:	cmp	r3, #0
   1f4e8:	bne	1f4a4 <_start@@Base+0xaea4>
   1f4ec:	ldr	r0, [sl]
   1f4f0:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   1f4f4:	str	r0, [sp, #384]	; 0x180
   1f4f8:	cmp	r0, #0
   1f4fc:	beq	22b24 <_start@@Base+0xe524>
   1f500:	mov	r1, #9
   1f504:	ldr	r0, [sl]
   1f508:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1f50c:	cmp	r0, #0
   1f510:	beq	22b2c <_start@@Base+0xe52c>
   1f514:	ldr	r3, [sp, #384]	; 0x180
   1f518:	str	r3, [r0]
   1f51c:	b	21804 <_start@@Base+0xd204>
   1f520:	add	r3, pc, #600	; 0x258
   1f524:	ldrd	r2, [r3]
   1f528:	ldrd	r0, [sp, #56]	; 0x38
   1f52c:	cmp	r1, r3
   1f530:	cmpeq	r0, r2
   1f534:	beq	1f594 <_start@@Base+0xaf94>
   1f538:	add	r3, pc, #584	; 0x248
   1f53c:	ldrd	r2, [r3]
   1f540:	cmp	r5, r3
   1f544:	cmpeq	r4, r2
   1f548:	bne	1f5b4 <_start@@Base+0xafb4>
   1f54c:	add	r8, r8, #8
   1f550:	mov	r1, r9
   1f554:	mov	r0, r8
   1f558:	bl	146f0 <_start@@Base+0xf0>
   1f55c:	mov	r3, #0
   1f560:	str	r3, [sp, #184]	; 0xb8
   1f564:	and	r3, r1, #-16777216	; 0xff000000
   1f568:	str	r3, [sp, #188]	; 0xbc
   1f56c:	ldrd	r2, [sp, #184]	; 0xb8
   1f570:	cmp	r3, #1694498816	; 0x65000000
   1f574:	cmpeq	r2, #0
   1f578:	beq	1f68c <_start@@Base+0xb08c>
   1f57c:	mov	r2, r9
   1f580:	mov	r1, r8
   1f584:	mov	r0, sl
   1f588:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f58c:	mov	r8, r0
   1f590:	b	21804 <_start@@Base+0xd204>
   1f594:	mov	r3, #5
   1f598:	mov	r2, r9
   1f59c:	mov	r1, r8
   1f5a0:	mov	r0, sl
   1f5a4:	bl	19da4 <_start@@Base+0x57a4>
   1f5a8:	mov	r4, r0
   1f5ac:	cmp	r0, r8
   1f5b0:	bne	1f5cc <_start@@Base+0xafcc>
   1f5b4:	mov	r2, r9
   1f5b8:	mov	r1, r8
   1f5bc:	mov	r0, sl
   1f5c0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f5c4:	mov	r8, r0
   1f5c8:	b	21804 <_start@@Base+0xd204>
   1f5cc:	mvn	r3, #-1073741824	; 0xc0000000
   1f5d0:	mov	r2, #2
   1f5d4:	mov	r1, #4
   1f5d8:	ldr	r0, [sl]
   1f5dc:	bl	26dbc <flatcc_builder_start_vector@@Base>
   1f5e0:	cmp	r0, #0
   1f5e4:	bne	22a98 <_start@@Base+0xe498>
   1f5e8:	add	r3, sp, #388	; 0x184
   1f5ec:	mov	r2, r9
   1f5f0:	mov	r1, r4
   1f5f4:	mov	r0, sl
   1f5f8:	bl	19598 <_start@@Base+0x4f98>
   1f5fc:	mov	r8, r0
   1f600:	ldr	r3, [sp, #388]	; 0x184
   1f604:	cmp	r3, #0
   1f608:	beq	1f658 <_start@@Base+0xb058>
   1f60c:	mov	r4, #1
   1f610:	mov	r1, r4
   1f614:	ldr	r0, [sl]
   1f618:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   1f61c:	subs	r3, r0, #0
   1f620:	beq	22b34 <_start@@Base+0xe534>
   1f624:	mov	r2, r9
   1f628:	mov	r1, r8
   1f62c:	mov	r0, sl
   1f630:	bl	19740 <_start@@Base+0x5140>
   1f634:	add	r3, sp, #388	; 0x184
   1f638:	mov	r2, r9
   1f63c:	mov	r1, r0
   1f640:	mov	r0, sl
   1f644:	bl	1dd8c <_start@@Base+0x978c>
   1f648:	mov	r8, r0
   1f64c:	ldr	r3, [sp, #388]	; 0x184
   1f650:	cmp	r3, #0
   1f654:	bne	1f610 <_start@@Base+0xb010>
   1f658:	ldr	r0, [sl]
   1f65c:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   1f660:	str	r0, [sp, #384]	; 0x180
   1f664:	cmp	r0, #0
   1f668:	beq	22b3c <_start@@Base+0xe53c>
   1f66c:	mov	r1, #31
   1f670:	ldr	r0, [sl]
   1f674:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1f678:	cmp	r0, #0
   1f67c:	beq	22b44 <_start@@Base+0xe544>
   1f680:	ldr	r3, [sp, #384]	; 0x180
   1f684:	str	r3, [r0]
   1f688:	b	21804 <_start@@Base+0xd204>
   1f68c:	mov	r3, #1
   1f690:	mov	r2, r9
   1f694:	mov	r1, r8
   1f698:	mov	r0, sl
   1f69c:	bl	19da4 <_start@@Base+0x57a4>
   1f6a0:	mov	r1, r0
   1f6a4:	cmp	r8, r0
   1f6a8:	beq	1f6e8 <_start@@Base+0xb0e8>
   1f6ac:	movw	r3, #11468	; 0x2ccc
   1f6b0:	movt	r3, #2
   1f6b4:	str	r3, [sp, #12]
   1f6b8:	ldr	r3, [pc, #248]	; 1f7b8 <_start@@Base+0xb1b8>
   1f6bc:	str	r3, [sp, #8]
   1f6c0:	ldr	r3, [sp, #380]	; 0x17c
   1f6c4:	str	r3, [sp, #4]
   1f6c8:	mov	r3, #8
   1f6cc:	str	r3, [sp]
   1f6d0:	mov	r3, #0
   1f6d4:	mov	r2, r9
   1f6d8:	mov	r0, sl
   1f6dc:	bl	2f0d8 <flatcc_json_parser_union_type@@Base>
   1f6e0:	mov	r8, r0
   1f6e4:	b	21804 <_start@@Base+0xd204>
   1f6e8:	mov	r2, r9
   1f6ec:	mov	r0, sl
   1f6f0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f6f4:	mov	r8, r0
   1f6f8:	b	21804 <_start@@Base+0xd204>
   1f6fc:	add	r3, pc, #140	; 0x8c
   1f700:	ldrd	r2, [r3]
   1f704:	cmp	r1, r3
   1f708:	cmpeq	r0, r2
   1f70c:	bhi	217b4 <_start@@Base+0xd1b4>
   1f710:	add	r3, pc, #128	; 0x80
   1f714:	ldrd	r2, [r3]
   1f718:	cmp	r1, r3
   1f71c:	cmpeq	r0, r2
   1f720:	beq	1f7bc <_start@@Base+0xb1bc>
   1f724:	add	r3, pc, #116	; 0x74
   1f728:	ldrd	r2, [r3]
   1f72c:	cmp	r1, r3
   1f730:	cmpeq	r0, r2
   1f734:	bhi	20d7c <_start@@Base+0xc77c>
   1f738:	add	r3, pc, #104	; 0x68
   1f73c:	ldrd	r2, [r3]
   1f740:	cmp	r1, r3
   1f744:	cmpeq	r0, r2
   1f748:	beq	205d8 <_start@@Base+0xbfd8>
   1f74c:	add	r3, pc, #92	; 0x5c
   1f750:	ldrd	r2, [r3]
   1f754:	cmp	r1, r3
   1f758:	cmpeq	r0, r2
   1f75c:	beq	20ca0 <_start@@Base+0xc6a0>
   1f760:	mov	r2, r9
   1f764:	mov	r1, r8
   1f768:	mov	r0, sl
   1f76c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f770:	mov	r8, r0
   1f774:	b	21804 <_start@@Base+0xd204>
   1f778:	strcc	r0, [r0], #-0
   1f77c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f780:	strcc	r0, [r0, #-0]
   1f784:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f788:	svcpl	0x00747970
   1f78c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f790:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1f794:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f798:	cmnvs	r2, r1, ror #4
   1f79c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f7a0:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1f7a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f7a8:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1f7ac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f7b0:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1f7b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f7b8:	andeq	r4, r5, r4, lsl #4
   1f7bc:	add	r4, r8, #8
   1f7c0:	mov	r1, r9
   1f7c4:	mov	r0, r4
   1f7c8:	bl	146f0 <_start@@Base+0xf0>
   1f7cc:	add	r3, pc, #652	; 0x28c
   1f7d0:	ldrd	r2, [r3]
   1f7d4:	cmp	r1, r3
   1f7d8:	cmpeq	r0, r2
   1f7dc:	bhi	201b8 <_start@@Base+0xbbb8>
   1f7e0:	add	r3, pc, #640	; 0x280
   1f7e4:	ldrd	r2, [r3]
   1f7e8:	cmp	r1, r3
   1f7ec:	cmpeq	r0, r2
   1f7f0:	beq	1f854 <_start@@Base+0xb254>
   1f7f4:	add	r3, pc, #628	; 0x274
   1f7f8:	ldrd	r2, [r3]
   1f7fc:	cmp	r1, r3
   1f800:	cmpeq	r0, r2
   1f804:	bne	1f878 <_start@@Base+0xb278>
   1f808:	add	r4, r8, #16
   1f80c:	mov	r1, r9
   1f810:	mov	r0, r4
   1f814:	bl	146f0 <_start@@Base+0xf0>
   1f818:	bic	r3, r0, #255	; 0xff
   1f81c:	str	r3, [sp, #224]	; 0xe0
   1f820:	str	r1, [sp, #228]	; 0xe4
   1f824:	add	r3, pc, #588	; 0x24c
   1f828:	ldrd	r2, [r3]
   1f82c:	ldrd	r0, [sp, #224]	; 0xe0
   1f830:	cmp	r1, r3
   1f834:	cmpeq	r0, r2
   1f838:	beq	1f9a4 <_start@@Base+0xb3a4>
   1f83c:	mov	r2, r9
   1f840:	mov	r1, r4
   1f844:	mov	r0, sl
   1f848:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f84c:	mov	r8, r0
   1f850:	b	21804 <_start@@Base+0xd204>
   1f854:	mov	r3, #8
   1f858:	mov	r2, r9
   1f85c:	mov	r1, r4
   1f860:	mov	r0, sl
   1f864:	bl	19da4 <_start@@Base+0x57a4>
   1f868:	mov	r8, r0
   1f86c:	cmp	r4, r0
   1f870:	moveq	r4, r0
   1f874:	bne	1f890 <_start@@Base+0xb290>
   1f878:	mov	r2, r9
   1f87c:	mov	r1, r4
   1f880:	mov	r0, sl
   1f884:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f888:	mov	r8, r0
   1f88c:	b	21804 <_start@@Base+0xd204>
   1f890:	mvn	r3, #0
   1f894:	mov	r2, #1
   1f898:	mov	r1, r2
   1f89c:	ldr	r0, [sl]
   1f8a0:	bl	26dbc <flatcc_builder_start_vector@@Base>
   1f8a4:	cmp	r0, #0
   1f8a8:	bne	22b4c <_start@@Base+0xe54c>
   1f8ac:	add	r3, sp, #388	; 0x184
   1f8b0:	mov	r2, r9
   1f8b4:	mov	r1, r8
   1f8b8:	mov	r0, sl
   1f8bc:	bl	19598 <_start@@Base+0x4f98>
   1f8c0:	mov	r8, r0
   1f8c4:	ldr	r3, [sp, #388]	; 0x184
   1f8c8:	cmp	r3, #0
   1f8cc:	beq	1f970 <_start@@Base+0xb370>
   1f8d0:	mov	r5, #0
   1f8d4:	ldr	fp, [pc, #420]	; 1fa80 <_start@@Base+0xb480>
   1f8d8:	b	1f908 <_start@@Base+0xb308>
   1f8dc:	ldrb	r3, [sp, #368]	; 0x170
   1f8e0:	strb	r3, [r4]
   1f8e4:	add	r3, sp, #388	; 0x184
   1f8e8:	mov	r2, r9
   1f8ec:	mov	r1, r0
   1f8f0:	mov	r0, sl
   1f8f4:	bl	1dd8c <_start@@Base+0x978c>
   1f8f8:	mov	r8, r0
   1f8fc:	ldr	r3, [sp, #388]	; 0x184
   1f900:	cmp	r3, #0
   1f904:	beq	1f970 <_start@@Base+0xb370>
   1f908:	strb	r5, [sp, #368]	; 0x170
   1f90c:	mov	r1, #1
   1f910:	ldr	r0, [sl]
   1f914:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   1f918:	subs	r4, r0, #0
   1f91c:	beq	22b54 <_start@@Base+0xe554>
   1f920:	add	r3, sp, #368	; 0x170
   1f924:	mov	r2, r9
   1f928:	mov	r1, r8
   1f92c:	mov	r0, sl
   1f930:	bl	187a8 <_start@@Base+0x41a8>
   1f934:	cmp	r0, r8
   1f938:	bne	1f8dc <_start@@Base+0xb2dc>
   1f93c:	add	r3, sp, #368	; 0x170
   1f940:	str	r3, [sp]
   1f944:	mov	r3, fp
   1f948:	mov	r2, r9
   1f94c:	mov	r1, r8
   1f950:	mov	r0, sl
   1f954:	bl	18600 <_start@@Base+0x4000>
   1f958:	cmp	r9, r0
   1f95c:	cmpne	r0, r8
   1f960:	bne	1f8dc <_start@@Base+0xb2dc>
   1f964:	mov	fp, sl
   1f968:	mov	r8, r0
   1f96c:	b	1df34 <_start@@Base+0x9934>
   1f970:	ldr	r0, [sl]
   1f974:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   1f978:	str	r0, [sp, #384]	; 0x180
   1f97c:	cmp	r0, #0
   1f980:	beq	22b5c <_start@@Base+0xe55c>
   1f984:	mov	r1, #24
   1f988:	ldr	r0, [sl]
   1f98c:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   1f990:	cmp	r0, #0
   1f994:	beq	22b64 <_start@@Base+0xe564>
   1f998:	ldr	r3, [sp, #384]	; 0x180
   1f99c:	str	r3, [r0]
   1f9a0:	b	21804 <_start@@Base+0xd204>
   1f9a4:	mov	r3, #7
   1f9a8:	mov	r2, r9
   1f9ac:	mov	r1, r4
   1f9b0:	mov	r0, sl
   1f9b4:	bl	19da4 <_start@@Base+0x57a4>
   1f9b8:	mov	r8, r0
   1f9bc:	cmp	r4, r0
   1f9c0:	bne	1f9dc <_start@@Base+0xb3dc>
   1f9c4:	mov	r2, r9
   1f9c8:	mov	r1, r0
   1f9cc:	mov	r0, sl
   1f9d0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1f9d4:	mov	r8, r0
   1f9d8:	b	21804 <_start@@Base+0xd204>
   1f9dc:	mvn	r3, #-536870912	; 0xe0000000
   1f9e0:	mov	r2, #4
   1f9e4:	mov	r1, #8
   1f9e8:	ldr	r0, [sl]
   1f9ec:	bl	26dbc <flatcc_builder_start_vector@@Base>
   1f9f0:	cmp	r0, #0
   1f9f4:	bne	22b6c <_start@@Base+0xe56c>
   1f9f8:	add	r3, sp, #388	; 0x184
   1f9fc:	mov	r2, r9
   1fa00:	mov	r1, r8
   1fa04:	mov	r0, sl
   1fa08:	bl	19598 <_start@@Base+0x4f98>
   1fa0c:	mov	r8, r0
   1fa10:	ldr	r3, [sp, #388]	; 0x184
   1fa14:	cmp	r3, #0
   1fa18:	beq	20184 <_start@@Base+0xbb84>
   1fa1c:	mov	fp, #0
   1fa20:	movt	fp, #65535	; 0xffff
   1fa24:	add	r3, sp, #344	; 0x158
   1fa28:	strd	r6, [r3]
   1fa2c:	str	sl, [sp, #24]
   1fa30:	mov	r5, fp
   1fa34:	add	r3, sp, #256	; 0x100
   1fa38:	ldrd	sl, [r3]
   1fa3c:	b	1ff6c <_start@@Base+0xb96c>
   1fa40:	mov	r3, #5
   1fa44:	mov	r2, r9
   1fa48:	mov	r1, r4
   1fa4c:	ldr	r0, [sp, #24]
   1fa50:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1fa54:	mov	r4, r0
   1fa58:	b	1fbc8 <_start@@Base+0xb5c8>
   1fa5c:	nop	{0}
   1fa60:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1fa64:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1fa68:	svcvs	0x006f6c73
   1fa6c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1fa70:	svcvs	0x00727465
   1fa74:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1fa78:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1fa7c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1fa80:	andeq	r4, r5, r4, lsl r2
   1fa84:	ldrb	r0, [r4, #7]
   1fa88:	mov	r1, #0
   1fa8c:	ldrb	r2, [r4, #6]
   1fa90:	orr	r2, r0, r2, lsl #8
   1fa94:	mov	r3, r1
   1fa98:	ldrb	r0, [r4, #5]
   1fa9c:	orr	r1, r2, r0, lsl #16
   1faa0:	mov	r0, r3
   1faa4:	ldrb	r2, [r4, #4]
   1faa8:	orr	r2, r1, r2, lsl #24
   1faac:	mov	r3, r0
   1fab0:	ldrb	r0, [r4, #3]
   1fab4:	orr	r3, r3, r0
   1fab8:	ldrb	r0, [r4, #2]
   1fabc:	orr	r3, r3, r0, lsl #8
   1fac0:	ldrb	r0, [r4, #1]
   1fac4:	mov	lr, r2
   1fac8:	orr	r0, r3, r0, lsl #16
   1facc:	ldrb	r2, [r4]
   1fad0:	mov	sl, lr
   1fad4:	orr	fp, r0, r2, lsl #24
   1fad8:	mov	r3, #0
   1fadc:	str	r3, [sp, #16]
   1fae0:	and	r3, fp, r5
   1fae4:	str	r3, [sp, #20]
   1fae8:	ldrd	r2, [sp, #16]
   1faec:	mov	r0, #0
   1faf0:	mov	r1, #0
   1faf4:	movt	r1, #26980	; 0x6964
   1faf8:	cmp	r3, r1
   1fafc:	cmpeq	r2, r0
   1fb00:	beq	1fc64 <_start@@Base+0xb664>
   1fb04:	add	r3, pc, #828	; 0x33c
   1fb08:	ldrd	r2, [r3]
   1fb0c:	cmp	fp, r3
   1fb10:	cmpeq	sl, r2
   1fb14:	beq	1fe1c <_start@@Base+0xb81c>
   1fb18:	mov	r2, r9
   1fb1c:	mov	r1, r4
   1fb20:	ldr	r0, [sp, #24]
   1fb24:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1fb28:	mov	r4, r0
   1fb2c:	sub	r3, r9, r4
   1fb30:	cmp	r3, #1
   1fb34:	ble	1fb48 <_start@@Base+0xb548>
   1fb38:	ldrb	r3, [r4]
   1fb3c:	cmp	r3, #32
   1fb40:	bhi	1fb5c <_start@@Base+0xb55c>
   1fb44:	beq	20068 <_start@@Base+0xba68>
   1fb48:	mov	r2, r9
   1fb4c:	mov	r1, r4
   1fb50:	ldr	r0, [sp, #24]
   1fb54:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1fb58:	mov	r4, r0
   1fb5c:	cmp	r9, r4
   1fb60:	moveq	r3, #0
   1fb64:	streq	r3, [sp, #356]	; 0x164
   1fb68:	beq	1fba4 <_start@@Base+0xb5a4>
   1fb6c:	ldrb	r3, [r4]
   1fb70:	cmp	r3, #44	; 0x2c
   1fb74:	beq	200c8 <_start@@Base+0xbac8>
   1fb78:	mov	r3, #0
   1fb7c:	str	r3, [sp, #356]	; 0x164
   1fb80:	ldrb	r3, [r4]
   1fb84:	cmp	r3, #125	; 0x7d
   1fb88:	beq	2007c <_start@@Base+0xba7c>
   1fb8c:	mov	r3, #10
   1fb90:	mov	r2, r9
   1fb94:	mov	r1, r4
   1fb98:	ldr	r0, [sp, #24]
   1fb9c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1fba0:	mov	r4, r0
   1fba4:	ldr	r3, [sp, #356]	; 0x164
   1fba8:	cmp	r3, #0
   1fbac:	beq	1ff48 <_start@@Base+0xb948>
   1fbb0:	cmp	r9, r4
   1fbb4:	beq	1fbc8 <_start@@Base+0xb5c8>
   1fbb8:	ldrb	r3, [r4]
   1fbbc:	cmp	r3, #34	; 0x22
   1fbc0:	addeq	r4, r4, #1
   1fbc4:	bne	1fa40 <_start@@Base+0xb440>
   1fbc8:	sub	ip, r9, r4
   1fbcc:	cmp	ip, #8
   1fbd0:	bhi	1fa84 <_start@@Base+0xb484>
   1fbd4:	sub	r3, ip, #1
   1fbd8:	cmp	r3, #7
   1fbdc:	ldrls	pc, [pc, r3, lsl #2]
   1fbe0:	b	1fc58 <_start@@Base+0xb658>
   1fbe4:	andeq	pc, r1, ip, asr #24
   1fbe8:	andeq	pc, r1, r0, asr #24
   1fbec:	andeq	pc, r1, r4, lsr ip	; <UNPREDICTABLE>
   1fbf0:	andeq	pc, r1, r8, lsr #24
   1fbf4:	andeq	pc, r1, ip, lsl ip	; <UNPREDICTABLE>
   1fbf8:	andeq	pc, r1, r0, lsl ip	; <UNPREDICTABLE>
   1fbfc:	andeq	pc, r1, r4, lsl #24
   1fc00:	andeq	pc, r1, r4, lsl #21
   1fc04:	mov	r0, #0
   1fc08:	mov	r1, r0
   1fc0c:	b	1fa8c <_start@@Base+0xb48c>
   1fc10:	mov	r2, #0
   1fc14:	mov	r3, r2
   1fc18:	b	1fa98 <_start@@Base+0xb498>
   1fc1c:	mov	r1, #0
   1fc20:	mov	r0, r1
   1fc24:	b	1faa4 <_start@@Base+0xb4a4>
   1fc28:	mov	r2, #0
   1fc2c:	mov	r3, r2
   1fc30:	b	1fab0 <_start@@Base+0xb4b0>
   1fc34:	mov	r2, #0
   1fc38:	mov	r3, r2
   1fc3c:	b	1fab8 <_start@@Base+0xb4b8>
   1fc40:	mov	r2, #0
   1fc44:	mov	r3, r2
   1fc48:	b	1fac0 <_start@@Base+0xb4c0>
   1fc4c:	mov	lr, #0
   1fc50:	mov	r0, lr
   1fc54:	b	1facc <_start@@Base+0xb4cc>
   1fc58:	mov	sl, #0
   1fc5c:	mov	fp, #0
   1fc60:	b	1fad8 <_start@@Base+0xb4d8>
   1fc64:	cmp	ip, #2
   1fc68:	ble	1fc78 <_start@@Base+0xb678>
   1fc6c:	ldrb	r3, [r4, #2]
   1fc70:	cmp	r3, #34	; 0x22
   1fc74:	beq	1fc90 <_start@@Base+0xb690>
   1fc78:	mov	r2, r9
   1fc7c:	mov	r1, r4
   1fc80:	ldr	r0, [sp, #24]
   1fc84:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1fc88:	mov	r4, r0
   1fc8c:	b	1fb2c <_start@@Base+0xb52c>
   1fc90:	add	r1, r4, #3
   1fc94:	sub	r3, r9, r1
   1fc98:	cmp	r3, #1
   1fc9c:	ble	1fcb0 <_start@@Base+0xb6b0>
   1fca0:	ldrb	r3, [r4, #3]
   1fca4:	cmp	r3, #32
   1fca8:	bhi	1fcc0 <_start@@Base+0xb6c0>
   1fcac:	beq	1fd68 <_start@@Base+0xb768>
   1fcb0:	mov	r2, r9
   1fcb4:	ldr	r0, [sp, #24]
   1fcb8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1fcbc:	mov	r1, r0
   1fcc0:	cmp	r9, r1
   1fcc4:	beq	1fcd4 <_start@@Base+0xb6d4>
   1fcc8:	ldrb	r3, [r1]
   1fccc:	cmp	r3, #58	; 0x3a
   1fcd0:	beq	1fd7c <_start@@Base+0xb77c>
   1fcd4:	mov	r3, #4
   1fcd8:	mov	r2, r9
   1fcdc:	ldr	r0, [sp, #24]
   1fce0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1fce4:	mov	r6, r0
   1fce8:	cmp	r4, r6
   1fcec:	beq	1fe14 <_start@@Base+0xb814>
   1fcf0:	mov	r3, #0
   1fcf4:	str	r3, [sp, #360]	; 0x168
   1fcf8:	str	r3, [sp, #368]	; 0x170
   1fcfc:	str	r3, [sp, #372]	; 0x174
   1fd00:	str	r3, [sp, #364]	; 0x16c
   1fd04:	cmp	r9, r6
   1fd08:	beq	22cb4 <_start@@Base+0xe6b4>
   1fd0c:	add	r3, sp, #368	; 0x170
   1fd10:	str	r3, [sp]
   1fd14:	add	r3, sp, #364	; 0x16c
   1fd18:	mov	r2, r9
   1fd1c:	mov	r1, r6
   1fd20:	ldr	r0, [sp, #24]
   1fd24:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   1fd28:	mov	r8, r0
   1fd2c:	cmp	r6, r0
   1fd30:	bne	1fd94 <_start@@Base+0xb794>
   1fd34:	add	r3, sp, #360	; 0x168
   1fd38:	str	r3, [sp]
   1fd3c:	ldr	r3, [sp, #256]	; 0x100
   1fd40:	add	r3, r3, #432	; 0x1b0
   1fd44:	mov	r2, r9
   1fd48:	mov	r1, r8
   1fd4c:	ldr	r0, [sp, #24]
   1fd50:	bl	18cb0 <_start@@Base+0x46b0>
   1fd54:	mov	r4, r0
   1fd58:	cmp	r9, r0
   1fd5c:	cmpne	r8, r0
   1fd60:	bne	1fe00 <_start@@Base+0xb800>
   1fd64:	b	1ff30 <_start@@Base+0xb930>
   1fd68:	ldrb	r3, [r4, #4]
   1fd6c:	cmp	r3, #32
   1fd70:	addhi	r1, r4, #4
   1fd74:	bls	1fcb0 <_start@@Base+0xb6b0>
   1fd78:	b	1fcc0 <_start@@Base+0xb6c0>
   1fd7c:	mov	r2, r9
   1fd80:	add	r1, r1, #1
   1fd84:	ldr	r0, [sp, #24]
   1fd88:	bl	1809c <_start@@Base+0x3a9c>
   1fd8c:	mov	r6, r0
   1fd90:	b	1fce8 <_start@@Base+0xb6e8>
   1fd94:	ldr	r3, [sp, #364]	; 0x16c
   1fd98:	cmp	r3, #0
   1fd9c:	bne	1fde0 <_start@@Base+0xb7e0>
   1fda0:	add	r3, sp, #368	; 0x170
   1fda4:	ldrd	r2, [r3]
   1fda8:	mvn	r0, #0
   1fdac:	mov	r1, #0
   1fdb0:	cmp	r3, r1
   1fdb4:	cmpeq	r2, r0
   1fdb8:	strls	r2, [sp, #360]	; 0x168
   1fdbc:	movls	r4, r8
   1fdc0:	bls	1fe00 <_start@@Base+0xb800>
   1fdc4:	mov	r3, #7
   1fdc8:	mov	r2, r9
   1fdcc:	mov	r1, r8
   1fdd0:	ldr	r0, [sp, #24]
   1fdd4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1fdd8:	mov	r4, r0
   1fddc:	b	1fdf8 <_start@@Base+0xb7f8>
   1fde0:	mov	r3, #8
   1fde4:	mov	r2, r9
   1fde8:	mov	r1, r0
   1fdec:	ldr	r0, [sp, #24]
   1fdf0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1fdf4:	mov	r4, r0
   1fdf8:	cmp	r6, r4
   1fdfc:	beq	1fe0c <_start@@Base+0xb80c>
   1fe00:	ldr	r3, [sp, #360]	; 0x168
   1fe04:	str	r3, [r7]
   1fe08:	b	1fb2c <_start@@Base+0xb52c>
   1fe0c:	mov	r8, r4
   1fe10:	b	1fd34 <_start@@Base+0xb734>
   1fe14:	mov	r4, r6
   1fe18:	b	1fc78 <_start@@Base+0xb678>
   1fe1c:	cmp	ip, #8
   1fe20:	ble	1fe30 <_start@@Base+0xb830>
   1fe24:	ldrb	r3, [r4, #8]
   1fe28:	cmp	r3, #34	; 0x22
   1fe2c:	beq	1fe60 <_start@@Base+0xb860>
   1fe30:	mov	r2, r9
   1fe34:	mov	r1, r4
   1fe38:	ldr	r0, [sp, #24]
   1fe3c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   1fe40:	mov	r4, r0
   1fe44:	b	1fb2c <_start@@Base+0xb52c>
   1fe48:	cmnvs	lr, r5, ror #6
   1fe4c:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1fe50:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1fe54:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1fe58:	cmnvs	r2, r5, ror #24
   1fe5c:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1fe60:	add	r1, r4, #9
   1fe64:	sub	r3, r9, r1
   1fe68:	cmp	r3, #1
   1fe6c:	ble	1fe80 <_start@@Base+0xb880>
   1fe70:	ldrb	r3, [r4, #9]
   1fe74:	cmp	r3, #32
   1fe78:	bhi	1fe90 <_start@@Base+0xb890>
   1fe7c:	beq	1ffb4 <_start@@Base+0xb9b4>
   1fe80:	mov	r2, r9
   1fe84:	ldr	r0, [sp, #24]
   1fe88:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   1fe8c:	mov	r1, r0
   1fe90:	cmp	r9, r1
   1fe94:	beq	1fea4 <_start@@Base+0xb8a4>
   1fe98:	ldrb	r3, [r1]
   1fe9c:	cmp	r3, #58	; 0x3a
   1fea0:	beq	1ffc8 <_start@@Base+0xb9c8>
   1fea4:	mov	r3, #4
   1fea8:	mov	r2, r9
   1feac:	ldr	r0, [sp, #24]
   1feb0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1feb4:	mov	r6, r0
   1feb8:	cmp	r4, r6
   1febc:	beq	20060 <_start@@Base+0xba60>
   1fec0:	mov	r3, #0
   1fec4:	str	r3, [sp, #360]	; 0x168
   1fec8:	str	r3, [sp, #368]	; 0x170
   1fecc:	str	r3, [sp, #372]	; 0x174
   1fed0:	str	r3, [sp, #364]	; 0x16c
   1fed4:	cmp	r9, r6
   1fed8:	beq	22cbc <_start@@Base+0xe6bc>
   1fedc:	add	r3, sp, #368	; 0x170
   1fee0:	str	r3, [sp]
   1fee4:	add	r3, sp, #364	; 0x16c
   1fee8:	mov	r2, r9
   1feec:	mov	r1, r6
   1fef0:	ldr	r0, [sp, #24]
   1fef4:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   1fef8:	mov	r8, r0
   1fefc:	cmp	r6, r0
   1ff00:	bne	1ffe0 <_start@@Base+0xb9e0>
   1ff04:	add	r3, sp, #360	; 0x168
   1ff08:	str	r3, [sp]
   1ff0c:	ldr	r3, [sp, #240]	; 0xf0
   1ff10:	mov	r2, r9
   1ff14:	mov	r1, r8
   1ff18:	ldr	r0, [sp, #24]
   1ff1c:	bl	18cb0 <_start@@Base+0x46b0>
   1ff20:	mov	r4, r0
   1ff24:	cmp	r9, r0
   1ff28:	cmpne	r0, r8
   1ff2c:	bne	2004c <_start@@Base+0xba4c>
   1ff30:	mov	r3, #33	; 0x21
   1ff34:	mov	r2, r9
   1ff38:	mov	r1, r4
   1ff3c:	ldr	r0, [sp, #24]
   1ff40:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   1ff44:	mov	r4, r0
   1ff48:	add	r3, sp, #388	; 0x184
   1ff4c:	mov	r2, r9
   1ff50:	mov	r1, r4
   1ff54:	ldr	r0, [sp, #24]
   1ff58:	bl	1dd8c <_start@@Base+0x978c>
   1ff5c:	mov	r8, r0
   1ff60:	ldr	r3, [sp, #388]	; 0x184
   1ff64:	cmp	r3, #0
   1ff68:	beq	20170 <_start@@Base+0xbb70>
   1ff6c:	mov	r1, #1
   1ff70:	ldr	r4, [sp, #24]
   1ff74:	ldr	r0, [r4]
   1ff78:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   1ff7c:	subs	r7, r0, #0
   1ff80:	beq	22b74 <_start@@Base+0xe574>
   1ff84:	add	r3, sp, #356	; 0x164
   1ff88:	mov	r2, r9
   1ff8c:	mov	r1, r8
   1ff90:	mov	r0, r4
   1ff94:	bl	1966c <_start@@Base+0x506c>
   1ff98:	mov	r4, r0
   1ff9c:	movw	r3, #16496	; 0x4070
   1ffa0:	movt	r3, #5
   1ffa4:	str	r3, [sp, #256]	; 0x100
   1ffa8:	add	r3, r3, #444	; 0x1bc
   1ffac:	str	r3, [sp, #240]	; 0xf0
   1ffb0:	b	1fba4 <_start@@Base+0xb5a4>
   1ffb4:	ldrb	r3, [r4, #10]
   1ffb8:	cmp	r3, #32
   1ffbc:	addhi	r1, r4, #10
   1ffc0:	bls	1fe80 <_start@@Base+0xb880>
   1ffc4:	b	1fe90 <_start@@Base+0xb890>
   1ffc8:	mov	r2, r9
   1ffcc:	add	r1, r1, #1
   1ffd0:	ldr	r0, [sp, #24]
   1ffd4:	bl	1809c <_start@@Base+0x3a9c>
   1ffd8:	mov	r6, r0
   1ffdc:	b	1feb8 <_start@@Base+0xb8b8>
   1ffe0:	ldr	r3, [sp, #364]	; 0x16c
   1ffe4:	cmp	r3, #0
   1ffe8:	bne	2002c <_start@@Base+0xba2c>
   1ffec:	add	r3, sp, #368	; 0x170
   1fff0:	ldrd	r2, [r3]
   1fff4:	mvn	r0, #0
   1fff8:	mov	r1, #0
   1fffc:	cmp	r3, r1
   20000:	cmpeq	r2, r0
   20004:	strls	r2, [sp, #360]	; 0x168
   20008:	movls	r4, r8
   2000c:	bls	2004c <_start@@Base+0xba4c>
   20010:	mov	r3, #7
   20014:	mov	r2, r9
   20018:	mov	r1, r8
   2001c:	ldr	r0, [sp, #24]
   20020:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20024:	mov	r4, r0
   20028:	b	20044 <_start@@Base+0xba44>
   2002c:	mov	r3, #8
   20030:	mov	r2, r9
   20034:	mov	r1, r0
   20038:	ldr	r0, [sp, #24]
   2003c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20040:	mov	r4, r0
   20044:	cmp	r6, r4
   20048:	beq	20058 <_start@@Base+0xba58>
   2004c:	ldr	r3, [sp, #360]	; 0x168
   20050:	str	r3, [r7, #4]
   20054:	b	1fb2c <_start@@Base+0xb52c>
   20058:	mov	r8, r4
   2005c:	b	1ff04 <_start@@Base+0xb904>
   20060:	mov	r4, r6
   20064:	b	1fe30 <_start@@Base+0xb830>
   20068:	ldrb	r3, [r4, #1]
   2006c:	cmp	r3, #32
   20070:	addhi	r4, r4, #1
   20074:	bls	1fb48 <_start@@Base+0xb548>
   20078:	b	1fb5c <_start@@Base+0xb55c>
   2007c:	add	r1, r4, #1
   20080:	sub	r3, r9, r1
   20084:	cmp	r3, #1
   20088:	ble	200a0 <_start@@Base+0xbaa0>
   2008c:	ldrb	r3, [r4, #1]
   20090:	cmp	r3, #32
   20094:	movhi	r4, r1
   20098:	bhi	1fba4 <_start@@Base+0xb5a4>
   2009c:	beq	200b4 <_start@@Base+0xbab4>
   200a0:	mov	r2, r9
   200a4:	ldr	r0, [sp, #24]
   200a8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   200ac:	mov	r4, r0
   200b0:	b	1fba4 <_start@@Base+0xb5a4>
   200b4:	ldrb	r3, [r4, #2]
   200b8:	cmp	r3, #32
   200bc:	addhi	r4, r4, #2
   200c0:	bls	200a0 <_start@@Base+0xbaa0>
   200c4:	b	1fba4 <_start@@Base+0xb5a4>
   200c8:	add	r1, r4, #1
   200cc:	sub	r3, r9, r1
   200d0:	cmp	r3, #1
   200d4:	ble	200ec <_start@@Base+0xbaec>
   200d8:	ldrb	r3, [r4, #1]
   200dc:	cmp	r3, #32
   200e0:	movhi	r4, r1
   200e4:	bhi	200fc <_start@@Base+0xbafc>
   200e8:	beq	20138 <_start@@Base+0xbb38>
   200ec:	mov	r2, r9
   200f0:	ldr	r0, [sp, #24]
   200f4:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   200f8:	mov	r4, r0
   200fc:	cmp	r9, r4
   20100:	beq	2014c <_start@@Base+0xbb4c>
   20104:	ldrb	r3, [r4]
   20108:	cmp	r3, #125	; 0x7d
   2010c:	movne	r3, #1
   20110:	strne	r3, [sp, #356]	; 0x164
   20114:	bne	1fba4 <_start@@Base+0xb5a4>
   20118:	mov	r3, #0
   2011c:	str	r3, [sp, #356]	; 0x164
   20120:	mov	r2, r9
   20124:	add	r1, r4, #1
   20128:	ldr	r0, [sp, #24]
   2012c:	bl	1809c <_start@@Base+0x3a9c>
   20130:	mov	r4, r0
   20134:	b	1fba4 <_start@@Base+0xb5a4>
   20138:	ldrb	r3, [r4, #2]
   2013c:	cmp	r3, #32
   20140:	addhi	r4, r4, #2
   20144:	bls	200ec <_start@@Base+0xbaec>
   20148:	b	200fc <_start@@Base+0xbafc>
   2014c:	mov	r3, #0
   20150:	str	r3, [sp, #356]	; 0x164
   20154:	mov	r3, #10
   20158:	mov	r2, r9
   2015c:	mov	r1, r4
   20160:	ldr	r0, [sp, #24]
   20164:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20168:	mov	r4, r0
   2016c:	b	1fba4 <_start@@Base+0xb5a4>
   20170:	add	r3, sp, #344	; 0x158
   20174:	ldrd	r6, [r3]
   20178:	add	r3, sp, #256	; 0x100
   2017c:	strd	sl, [r3]
   20180:	ldr	sl, [sp, #24]
   20184:	ldr	r0, [sl]
   20188:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   2018c:	str	r0, [sp, #384]	; 0x180
   20190:	cmp	r0, #0
   20194:	beq	22b7c <_start@@Base+0xe57c>
   20198:	mov	r1, #29
   2019c:	ldr	r0, [sl]
   201a0:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   201a4:	cmp	r0, #0
   201a8:	beq	22b84 <_start@@Base+0xe584>
   201ac:	ldr	r3, [sp, #384]	; 0x180
   201b0:	str	r3, [r0]
   201b4:	b	21804 <_start@@Base+0xd204>
   201b8:	sub	r3, pc, #880	; 0x370
   201bc:	ldrd	r2, [r3]
   201c0:	cmp	r1, r3
   201c4:	cmpeq	r0, r2
   201c8:	beq	20228 <_start@@Base+0xbc28>
   201cc:	sub	r3, pc, #892	; 0x37c
   201d0:	ldrd	r2, [r3]
   201d4:	cmp	r1, r3
   201d8:	cmpeq	r0, r2
   201dc:	bne	205c0 <_start@@Base+0xbfc0>
   201e0:	add	r4, r8, #16
   201e4:	mov	r1, r9
   201e8:	mov	r0, r4
   201ec:	bl	146f0 <_start@@Base+0xf0>
   201f0:	mov	r3, #0
   201f4:	str	r3, [sp, #232]	; 0xe8
   201f8:	and	r3, r1, #-16777216	; 0xff000000
   201fc:	str	r3, [sp, #236]	; 0xec
   20200:	ldrd	r2, [sp, #232]	; 0xe8
   20204:	cmp	r3, #1929379840	; 0x73000000
   20208:	cmpeq	r2, #0
   2020c:	beq	204b8 <_start@@Base+0xbeb8>
   20210:	mov	r2, r9
   20214:	mov	r1, r4
   20218:	mov	r0, sl
   2021c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   20220:	mov	r8, r0
   20224:	b	21804 <_start@@Base+0xd204>
   20228:	add	r4, r8, #16
   2022c:	mov	r1, r9
   20230:	mov	r0, r4
   20234:	bl	146f0 <_start@@Base+0xf0>
   20238:	mov	ip, r1
   2023c:	mov	r3, #0
   20240:	str	r3, [sp, #200]	; 0xc8
   20244:	lsr	r3, r1, #16
   20248:	lsl	r3, r3, #16
   2024c:	str	r3, [sp, #204]	; 0xcc
   20250:	mov	r2, #0
   20254:	mov	r3, #0
   20258:	movt	r3, #26418	; 0x6732
   2025c:	ldrd	r0, [sp, #200]	; 0xc8
   20260:	cmp	r1, r3
   20264:	cmpeq	r0, r2
   20268:	beq	202a8 <_start@@Base+0xbca8>
   2026c:	mov	r3, #0
   20270:	str	r3, [sp, #264]	; 0x108
   20274:	and	r3, ip, #-16777216	; 0xff000000
   20278:	str	r3, [sp, #268]	; 0x10c
   2027c:	add	r3, sp, #264	; 0x108
   20280:	ldrd	r2, [r3]
   20284:	cmp	r3, #1728053248	; 0x67000000
   20288:	cmpeq	r2, #0
   2028c:	beq	203b0 <_start@@Base+0xbdb0>
   20290:	mov	r2, r9
   20294:	mov	r1, r4
   20298:	mov	r0, sl
   2029c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   202a0:	mov	r8, r0
   202a4:	b	21804 <_start@@Base+0xd204>
   202a8:	mov	r3, #2
   202ac:	mov	r2, r9
   202b0:	mov	r1, r4
   202b4:	mov	r0, sl
   202b8:	bl	19da4 <_start@@Base+0x57a4>
   202bc:	mov	r8, r0
   202c0:	cmp	r4, r0
   202c4:	bne	202e0 <_start@@Base+0xbce0>
   202c8:	mov	r2, r9
   202cc:	mov	r1, r0
   202d0:	mov	r0, sl
   202d4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   202d8:	mov	r8, r0
   202dc:	b	21804 <_start@@Base+0xd204>
   202e0:	ldr	r0, [sl]
   202e4:	bl	26e5c <flatcc_builder_start_offset_vector@@Base>
   202e8:	cmp	r0, #0
   202ec:	bne	22b8c <_start@@Base+0xe58c>
   202f0:	add	r3, sp, #388	; 0x184
   202f4:	mov	r2, r9
   202f8:	mov	r1, r8
   202fc:	mov	r0, sl
   20300:	bl	19598 <_start@@Base+0x4f98>
   20304:	mov	r8, r0
   20308:	ldr	r3, [sp, #388]	; 0x184
   2030c:	cmp	r3, #0
   20310:	beq	2037c <_start@@Base+0xbd7c>
   20314:	mov	r4, #1
   20318:	add	r3, sp, #384	; 0x180
   2031c:	mov	r2, r9
   20320:	mov	r1, r8
   20324:	mov	r0, sl
   20328:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   2032c:	mov	r8, r0
   20330:	ldr	r3, [sp, #384]	; 0x180
   20334:	cmp	r3, #0
   20338:	beq	22b94 <_start@@Base+0xe594>
   2033c:	mov	r1, r4
   20340:	ldr	r0, [sl]
   20344:	bl	26760 <flatcc_builder_extend_offset_vector@@Base>
   20348:	cmp	r0, #0
   2034c:	beq	22b9c <_start@@Base+0xe59c>
   20350:	ldr	r3, [sp, #384]	; 0x180
   20354:	str	r3, [r0]
   20358:	add	r3, sp, #388	; 0x184
   2035c:	mov	r2, r9
   20360:	mov	r1, r8
   20364:	mov	r0, sl
   20368:	bl	1dd8c <_start@@Base+0x978c>
   2036c:	mov	r8, r0
   20370:	ldr	r3, [sp, #388]	; 0x184
   20374:	cmp	r3, #0
   20378:	bne	20318 <_start@@Base+0xbd18>
   2037c:	ldr	r0, [sl]
   20380:	bl	27fec <flatcc_builder_end_offset_vector@@Base>
   20384:	str	r0, [sp, #384]	; 0x180
   20388:	cmp	r0, #0
   2038c:	beq	22ba4 <_start@@Base+0xe5a4>
   20390:	mov	r1, #28
   20394:	ldr	r0, [sl]
   20398:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   2039c:	cmp	r0, #0
   203a0:	beq	22bac <_start@@Base+0xe5ac>
   203a4:	ldr	r3, [sp, #384]	; 0x180
   203a8:	str	r3, [r0]
   203ac:	b	21804 <_start@@Base+0xd204>
   203b0:	mov	r3, #1
   203b4:	mov	r2, r9
   203b8:	mov	r1, r4
   203bc:	mov	r0, sl
   203c0:	bl	19da4 <_start@@Base+0x57a4>
   203c4:	mov	r8, r0
   203c8:	cmp	r4, r0
   203cc:	bne	203e8 <_start@@Base+0xbde8>
   203d0:	mov	r2, r9
   203d4:	mov	r1, r0
   203d8:	mov	r0, sl
   203dc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   203e0:	mov	r8, r0
   203e4:	b	21804 <_start@@Base+0xd204>
   203e8:	ldr	r0, [sl]
   203ec:	bl	26e5c <flatcc_builder_start_offset_vector@@Base>
   203f0:	cmp	r0, #0
   203f4:	bne	22bb4 <_start@@Base+0xe5b4>
   203f8:	add	r3, sp, #388	; 0x184
   203fc:	mov	r2, r9
   20400:	mov	r1, r8
   20404:	mov	r0, sl
   20408:	bl	19598 <_start@@Base+0x4f98>
   2040c:	mov	r8, r0
   20410:	ldr	r3, [sp, #388]	; 0x184
   20414:	cmp	r3, #0
   20418:	beq	20484 <_start@@Base+0xbe84>
   2041c:	mov	r4, #1
   20420:	add	r3, sp, #384	; 0x180
   20424:	mov	r2, r9
   20428:	mov	r1, r8
   2042c:	mov	r0, sl
   20430:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   20434:	mov	r8, r0
   20438:	ldr	r3, [sp, #384]	; 0x180
   2043c:	cmp	r3, #0
   20440:	beq	22bbc <_start@@Base+0xe5bc>
   20444:	mov	r1, r4
   20448:	ldr	r0, [sl]
   2044c:	bl	26760 <flatcc_builder_extend_offset_vector@@Base>
   20450:	cmp	r0, #0
   20454:	beq	22bc4 <_start@@Base+0xe5c4>
   20458:	ldr	r3, [sp, #384]	; 0x180
   2045c:	str	r3, [r0]
   20460:	add	r3, sp, #388	; 0x184
   20464:	mov	r2, r9
   20468:	mov	r1, r8
   2046c:	mov	r0, sl
   20470:	bl	1dd8c <_start@@Base+0x978c>
   20474:	mov	r8, r0
   20478:	ldr	r3, [sp, #388]	; 0x184
   2047c:	cmp	r3, #0
   20480:	bne	20420 <_start@@Base+0xbe20>
   20484:	ldr	r0, [sl]
   20488:	bl	27fec <flatcc_builder_end_offset_vector@@Base>
   2048c:	str	r0, [sp, #384]	; 0x180
   20490:	cmp	r0, #0
   20494:	beq	22bcc <_start@@Base+0xe5cc>
   20498:	mov	r1, #10
   2049c:	ldr	r0, [sl]
   204a0:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   204a4:	cmp	r0, #0
   204a8:	beq	22bd4 <_start@@Base+0xe5d4>
   204ac:	ldr	r3, [sp, #384]	; 0x180
   204b0:	str	r3, [r0]
   204b4:	b	21804 <_start@@Base+0xd204>
   204b8:	mov	r3, #1
   204bc:	mov	r2, r9
   204c0:	mov	r1, r4
   204c4:	mov	r0, sl
   204c8:	bl	19da4 <_start@@Base+0x57a4>
   204cc:	mov	r8, r0
   204d0:	cmp	r4, r0
   204d4:	bne	204f0 <_start@@Base+0xbef0>
   204d8:	mov	r2, r9
   204dc:	mov	r1, r0
   204e0:	mov	r0, sl
   204e4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   204e8:	mov	r8, r0
   204ec:	b	21804 <_start@@Base+0xd204>
   204f0:	ldr	r0, [sl]
   204f4:	bl	26e5c <flatcc_builder_start_offset_vector@@Base>
   204f8:	cmp	r0, #0
   204fc:	bne	22bdc <_start@@Base+0xe5dc>
   20500:	add	r3, sp, #388	; 0x184
   20504:	mov	r2, r9
   20508:	mov	r1, r8
   2050c:	mov	r0, sl
   20510:	bl	19598 <_start@@Base+0x4f98>
   20514:	mov	r8, r0
   20518:	ldr	r3, [sp, #388]	; 0x184
   2051c:	cmp	r3, #0
   20520:	beq	2058c <_start@@Base+0xbf8c>
   20524:	mov	r4, #1
   20528:	add	r3, sp, #384	; 0x180
   2052c:	mov	r2, r9
   20530:	mov	r1, r8
   20534:	mov	r0, sl
   20538:	bl	1dee8 <_start@@Base+0x98e8>
   2053c:	mov	r8, r0
   20540:	ldr	r3, [sp, #384]	; 0x180
   20544:	cmp	r3, #0
   20548:	beq	22be4 <_start@@Base+0xe5e4>
   2054c:	mov	r1, r4
   20550:	ldr	r0, [sl]
   20554:	bl	26760 <flatcc_builder_extend_offset_vector@@Base>
   20558:	cmp	r0, #0
   2055c:	beq	22bec <_start@@Base+0xe5ec>
   20560:	ldr	r3, [sp, #384]	; 0x180
   20564:	str	r3, [r0]
   20568:	add	r3, sp, #388	; 0x184
   2056c:	mov	r2, r9
   20570:	mov	r1, r8
   20574:	mov	r0, sl
   20578:	bl	1dd8c <_start@@Base+0x978c>
   2057c:	mov	r8, r0
   20580:	ldr	r3, [sp, #388]	; 0x184
   20584:	cmp	r3, #0
   20588:	bne	20528 <_start@@Base+0xbf28>
   2058c:	ldr	r0, [sl]
   20590:	bl	27fec <flatcc_builder_end_offset_vector@@Base>
   20594:	str	r0, [sp, #384]	; 0x180
   20598:	cmp	r0, #0
   2059c:	beq	22bf4 <_start@@Base+0xe5f4>
   205a0:	mov	r1, #11
   205a4:	ldr	r0, [sl]
   205a8:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   205ac:	cmp	r0, #0
   205b0:	beq	22bfc <_start@@Base+0xe5fc>
   205b4:	ldr	r3, [sp, #384]	; 0x180
   205b8:	str	r3, [r0]
   205bc:	b	21804 <_start@@Base+0xd204>
   205c0:	mov	r2, r9
   205c4:	mov	r1, r4
   205c8:	mov	r0, sl
   205cc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   205d0:	mov	r8, r0
   205d4:	b	21804 <_start@@Base+0xd204>
   205d8:	add	r4, r8, #8
   205dc:	mov	r1, r9
   205e0:	mov	r0, r4
   205e4:	bl	146f0 <_start@@Base+0xf0>
   205e8:	mov	r3, #0
   205ec:	str	r3, [sp, #152]	; 0x98
   205f0:	lsr	r3, r1, #16
   205f4:	lsl	r3, r3, #16
   205f8:	str	r3, [sp, #156]	; 0x9c
   205fc:	mov	r2, #0
   20600:	mov	r3, #0
   20604:	movt	r3, #13876	; 0x3634
   20608:	ldrd	r0, [sp, #152]	; 0x98
   2060c:	cmp	r1, r3
   20610:	cmpeq	r0, r2
   20614:	beq	20630 <_start@@Base+0xc030>
   20618:	mov	r2, r9
   2061c:	mov	r1, r4
   20620:	mov	r0, sl
   20624:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   20628:	mov	r8, r0
   2062c:	b	21804 <_start@@Base+0xd204>
   20630:	mov	r3, #2
   20634:	mov	r2, r9
   20638:	mov	r1, r4
   2063c:	mov	r0, sl
   20640:	bl	19da4 <_start@@Base+0x57a4>
   20644:	mov	r8, r0
   20648:	cmp	r4, r0
   2064c:	beq	20c88 <_start@@Base+0xc688>
   20650:	mov	r3, #0
   20654:	str	r3, [sp, #384]	; 0x180
   20658:	mov	r1, #3
   2065c:	ldr	r0, [sl]
   20660:	bl	270b4 <flatcc_builder_start_table@@Base>
   20664:	cmp	r0, #0
   20668:	beq	206b0 <_start@@Base+0xc0b0>
   2066c:	mov	r3, #33	; 0x21
   20670:	mov	r2, r9
   20674:	mov	r1, r8
   20678:	mov	r0, sl
   2067c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20680:	mov	r8, r0
   20684:	ldr	r3, [sp, #384]	; 0x180
   20688:	cmp	r3, #0
   2068c:	beq	22c04 <_start@@Base+0xe604>
   20690:	mov	r1, #35	; 0x23
   20694:	ldr	r0, [sl]
   20698:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   2069c:	cmp	r0, #0
   206a0:	beq	22c0c <_start@@Base+0xe60c>
   206a4:	ldr	r3, [sp, #384]	; 0x180
   206a8:	str	r3, [r0]
   206ac:	b	21804 <_start@@Base+0xd204>
   206b0:	add	r3, sp, #364	; 0x16c
   206b4:	mov	r2, r9
   206b8:	mov	r1, r8
   206bc:	mov	r0, sl
   206c0:	bl	1966c <_start@@Base+0x506c>
   206c4:	mov	r8, r0
   206c8:	add	r5, pc, #992	; 0x3e0
   206cc:	ldrd	r4, [r5]
   206d0:	mov	fp, #0
   206d4:	movt	fp, #65535	; 0xffff
   206d8:	strd	r6, [sp, #240]	; 0xf0
   206dc:	mov	r7, sl
   206e0:	strd	r4, [sp, #24]
   206e4:	mov	r5, fp
   206e8:	add	r3, sp, #304	; 0x130
   206ec:	ldrd	sl, [r3]
   206f0:	b	20818 <_start@@Base+0xc218>
   206f4:	mov	r3, #5
   206f8:	mov	r2, r9
   206fc:	mov	r1, r8
   20700:	mov	r0, r7
   20704:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20708:	mov	r8, r0
   2070c:	b	2083c <_start@@Base+0xc23c>
   20710:	ldrb	r0, [r8, #7]
   20714:	mov	r1, #0
   20718:	ldrb	r2, [r8, #6]
   2071c:	orr	r3, r0, r2, lsl #8
   20720:	mov	r2, r1
   20724:	ldrb	r0, [r8, #5]
   20728:	orr	r3, r3, r0, lsl #16
   2072c:	ldrb	r0, [r8, #4]
   20730:	orr	r3, r3, r0, lsl #24
   20734:	ldrb	r0, [r8, #3]
   20738:	orr	r2, r2, r0
   2073c:	ldrb	r0, [r8, #2]
   20740:	orr	r2, r2, r0, lsl #8
   20744:	ldrb	r0, [r8, #1]
   20748:	orr	r2, r2, r0, lsl #16
   2074c:	ldrb	r0, [r8]
   20750:	mov	sl, r3
   20754:	orr	fp, r2, r0, lsl #24
   20758:	ldrd	r2, [sp, #24]
   2075c:	cmp	fp, r3
   20760:	cmpeq	sl, r2
   20764:	bhi	20954 <_start@@Base+0xc354>
   20768:	mov	r3, #0
   2076c:	str	r3, [sp, #136]	; 0x88
   20770:	str	fp, [sp, #140]	; 0x8c
   20774:	ldrd	r2, [sp, #136]	; 0x88
   20778:	add	r1, pc, #824	; 0x338
   2077c:	ldrd	r0, [r1]
   20780:	cmp	r3, r1
   20784:	cmpeq	r2, r0
   20788:	beq	208d8 <_start@@Base+0xc2d8>
   2078c:	mov	r2, r9
   20790:	mov	r1, r8
   20794:	mov	r0, r7
   20798:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   2079c:	mov	r8, r0
   207a0:	sub	r3, r9, r8
   207a4:	cmp	r3, #1
   207a8:	ble	207bc <_start@@Base+0xc1bc>
   207ac:	ldrb	r3, [r8]
   207b0:	cmp	r3, #32
   207b4:	bhi	207d0 <_start@@Base+0xc1d0>
   207b8:	beq	20ad4 <_start@@Base+0xc4d4>
   207bc:	mov	r2, r9
   207c0:	mov	r1, r8
   207c4:	mov	r0, r7
   207c8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   207cc:	mov	r8, r0
   207d0:	cmp	r9, r8
   207d4:	moveq	r3, #0
   207d8:	streq	r3, [sp, #364]	; 0x16c
   207dc:	beq	20818 <_start@@Base+0xc218>
   207e0:	ldrb	r3, [r8]
   207e4:	cmp	r3, #44	; 0x2c
   207e8:	beq	20b34 <_start@@Base+0xc534>
   207ec:	mov	r3, #0
   207f0:	str	r3, [sp, #364]	; 0x16c
   207f4:	ldrb	r3, [r8]
   207f8:	cmp	r3, #125	; 0x7d
   207fc:	beq	20ae8 <_start@@Base+0xc4e8>
   20800:	mov	r3, #10
   20804:	mov	r2, r9
   20808:	mov	r1, r8
   2080c:	mov	r0, r7
   20810:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20814:	mov	r8, r0
   20818:	ldr	r3, [sp, #364]	; 0x16c
   2081c:	cmp	r3, #0
   20820:	beq	20bdc <_start@@Base+0xc5dc>
   20824:	cmp	r9, r8
   20828:	beq	2083c <_start@@Base+0xc23c>
   2082c:	ldrb	r3, [r8]
   20830:	cmp	r3, #34	; 0x22
   20834:	addeq	r8, r8, #1
   20838:	bne	206f4 <_start@@Base+0xc0f4>
   2083c:	sub	r3, r9, r8
   20840:	cmp	r3, #8
   20844:	bhi	20710 <_start@@Base+0xc110>
   20848:	sub	r3, r3, #1
   2084c:	cmp	r3, #7
   20850:	ldrls	pc, [pc, r3, lsl #2]
   20854:	b	208cc <_start@@Base+0xc2cc>
   20858:	andeq	r0, r2, r0, asr #17
   2085c:			; <UNDEFINED> instruction: 0x000208b4
   20860:	andeq	r0, r2, r8, lsr #17
   20864:	muleq	r2, ip, r8
   20868:	muleq	r2, r0, r8
   2086c:	andeq	r0, r2, r4, lsl #17
   20870:	andeq	r0, r2, r8, ror r8
   20874:	andeq	r0, r2, r0, lsl r7
   20878:	mov	r0, #0
   2087c:	mov	r1, r0
   20880:	b	20718 <_start@@Base+0xc118>
   20884:	mov	r3, #0
   20888:	mov	r2, r3
   2088c:	b	20724 <_start@@Base+0xc124>
   20890:	mov	r3, #0
   20894:	mov	r2, r3
   20898:	b	2072c <_start@@Base+0xc12c>
   2089c:	mov	r3, #0
   208a0:	mov	r2, r3
   208a4:	b	20734 <_start@@Base+0xc134>
   208a8:	mov	r3, #0
   208ac:	mov	r2, r3
   208b0:	b	2073c <_start@@Base+0xc13c>
   208b4:	mov	r3, #0
   208b8:	mov	r2, r3
   208bc:	b	20744 <_start@@Base+0xc144>
   208c0:	mov	r3, #0
   208c4:	mov	r2, r3
   208c8:	b	2074c <_start@@Base+0xc14c>
   208cc:	mov	sl, #0
   208d0:	mov	fp, #0
   208d4:	b	20758 <_start@@Base+0xc158>
   208d8:	mov	r3, #4
   208dc:	mov	r2, r9
   208e0:	mov	r1, r8
   208e4:	mov	r0, r7
   208e8:	bl	19da4 <_start@@Base+0x57a4>
   208ec:	mov	r1, r0
   208f0:	cmp	r8, r0
   208f4:	beq	20940 <_start@@Base+0xc340>
   208f8:	mov	r3, #0
   208fc:	str	r3, [sp]
   20900:	add	r3, sp, #368	; 0x170
   20904:	mov	r2, r9
   20908:	mov	r0, r7
   2090c:	bl	2e8a4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   20910:	mov	r8, r0
   20914:	ldr	r3, [sp, #368]	; 0x170
   20918:	cmp	r3, #0
   2091c:	beq	20c10 <_start@@Base+0xc610>
   20920:	mov	r1, #0
   20924:	ldr	r0, [r7]
   20928:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   2092c:	cmp	r0, #0
   20930:	beq	20c24 <_start@@Base+0xc624>
   20934:	ldr	r3, [sp, #368]	; 0x170
   20938:	str	r3, [r0]
   2093c:	b	207a0 <_start@@Base+0xc1a0>
   20940:	mov	r2, r9
   20944:	mov	r0, r7
   20948:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   2094c:	mov	r8, r0
   20950:	b	207a0 <_start@@Base+0xc1a0>
   20954:	bic	r3, sl, #255	; 0xff
   20958:	str	r3, [sp, #144]	; 0x90
   2095c:	str	fp, [sp, #148]	; 0x94
   20960:	ldrd	r2, [sp, #144]	; 0x90
   20964:	add	r1, pc, #340	; 0x154
   20968:	ldrd	r0, [r1]
   2096c:	cmp	r3, r1
   20970:	cmpeq	r2, r0
   20974:	beq	209b4 <_start@@Base+0xc3b4>
   20978:	and	r3, sl, r5
   2097c:	str	r3, [sp, #192]	; 0xc0
   20980:	str	fp, [sp, #196]	; 0xc4
   20984:	ldrd	r2, [sp, #192]	; 0xc0
   20988:	add	r1, pc, #312	; 0x138
   2098c:	ldrd	r0, [r1]
   20990:	cmp	r3, r1
   20994:	cmpeq	r2, r0
   20998:	beq	20a30 <_start@@Base+0xc430>
   2099c:	mov	r2, r9
   209a0:	mov	r1, r8
   209a4:	mov	r0, r7
   209a8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   209ac:	mov	r8, r0
   209b0:	b	207a0 <_start@@Base+0xc1a0>
   209b4:	mov	r3, #7
   209b8:	mov	r2, r9
   209bc:	mov	r1, r8
   209c0:	mov	r0, r7
   209c4:	bl	19da4 <_start@@Base+0x57a4>
   209c8:	mov	r1, r0
   209cc:	cmp	r8, r0
   209d0:	beq	20a1c <_start@@Base+0xc41c>
   209d4:	mov	r3, #1
   209d8:	str	r3, [sp]
   209dc:	add	r3, sp, #368	; 0x170
   209e0:	mov	r2, r9
   209e4:	mov	r0, r7
   209e8:	bl	2e8a4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   209ec:	mov	r8, r0
   209f0:	ldr	r3, [sp, #368]	; 0x170
   209f4:	cmp	r3, #0
   209f8:	beq	20c38 <_start@@Base+0xc638>
   209fc:	mov	r1, #1
   20a00:	ldr	r0, [r7]
   20a04:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   20a08:	cmp	r0, #0
   20a0c:	beq	20c4c <_start@@Base+0xc64c>
   20a10:	ldr	r3, [sp, #368]	; 0x170
   20a14:	str	r3, [r0]
   20a18:	b	207a0 <_start@@Base+0xc1a0>
   20a1c:	mov	r2, r9
   20a20:	mov	r0, r7
   20a24:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   20a28:	mov	r8, r0
   20a2c:	b	207a0 <_start@@Base+0xc1a0>
   20a30:	mov	r3, #6
   20a34:	mov	r2, r9
   20a38:	mov	r1, r8
   20a3c:	mov	r0, r7
   20a40:	bl	19da4 <_start@@Base+0x57a4>
   20a44:	mov	r1, r0
   20a48:	cmp	r8, r0
   20a4c:	beq	20a98 <_start@@Base+0xc498>
   20a50:	mov	r3, #0
   20a54:	str	r3, [sp]
   20a58:	add	r3, sp, #368	; 0x170
   20a5c:	mov	r2, r9
   20a60:	mov	r0, r7
   20a64:	bl	2e8a4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   20a68:	mov	r8, r0
   20a6c:	ldr	r3, [sp, #368]	; 0x170
   20a70:	cmp	r3, #0
   20a74:	beq	20c60 <_start@@Base+0xc660>
   20a78:	mov	r1, #2
   20a7c:	ldr	r0, [r7]
   20a80:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   20a84:	cmp	r0, #0
   20a88:	beq	20c74 <_start@@Base+0xc674>
   20a8c:	ldr	r3, [sp, #368]	; 0x170
   20a90:	str	r3, [r0]
   20a94:	b	207a0 <_start@@Base+0xc1a0>
   20a98:	mov	r2, r9
   20a9c:	mov	r0, r7
   20aa0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   20aa4:	mov	r8, r0
   20aa8:	b	207a0 <_start@@Base+0xc1a0>
   20aac:	nop	{0}
   20ab0:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   20ab4:	mcrvs	3, 3, r7, cr5, cr4, {3}
   20ab8:	andeq	r0, r0, r0
   20abc:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   20ac0:	cmnvs	r4, r0, lsl #2
   20ac4:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   20ac8:	strbvs	r0, [r4, #-0]!
   20acc:	mcrvs	3, 3, r7, cr5, cr4, {3}
   20ad0:	andeq	r4, r5, r8, lsr r2
   20ad4:	ldrb	r3, [r8, #1]
   20ad8:	cmp	r3, #32
   20adc:	addhi	r8, r8, #1
   20ae0:	bls	207bc <_start@@Base+0xc1bc>
   20ae4:	b	207d0 <_start@@Base+0xc1d0>
   20ae8:	add	r1, r8, #1
   20aec:	sub	r3, r9, r1
   20af0:	cmp	r3, #1
   20af4:	ble	20b0c <_start@@Base+0xc50c>
   20af8:	ldrb	r3, [r8, #1]
   20afc:	cmp	r3, #32
   20b00:	movhi	r8, r1
   20b04:	bhi	20818 <_start@@Base+0xc218>
   20b08:	beq	20b20 <_start@@Base+0xc520>
   20b0c:	mov	r2, r9
   20b10:	mov	r0, r7
   20b14:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   20b18:	mov	r8, r0
   20b1c:	b	20818 <_start@@Base+0xc218>
   20b20:	ldrb	r3, [r8, #2]
   20b24:	cmp	r3, #32
   20b28:	addhi	r8, r8, #2
   20b2c:	bls	20b0c <_start@@Base+0xc50c>
   20b30:	b	20818 <_start@@Base+0xc218>
   20b34:	add	r1, r8, #1
   20b38:	sub	r3, r9, r1
   20b3c:	cmp	r3, #1
   20b40:	ble	20b58 <_start@@Base+0xc558>
   20b44:	ldrb	r3, [r8, #1]
   20b48:	cmp	r3, #32
   20b4c:	movhi	r8, r1
   20b50:	bhi	20b68 <_start@@Base+0xc568>
   20b54:	beq	20ba4 <_start@@Base+0xc5a4>
   20b58:	mov	r2, r9
   20b5c:	mov	r0, r7
   20b60:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   20b64:	mov	r8, r0
   20b68:	cmp	r9, r8
   20b6c:	beq	20bb8 <_start@@Base+0xc5b8>
   20b70:	ldrb	r3, [r8]
   20b74:	cmp	r3, #125	; 0x7d
   20b78:	movne	r3, #1
   20b7c:	strne	r3, [sp, #364]	; 0x16c
   20b80:	bne	20818 <_start@@Base+0xc218>
   20b84:	mov	r3, #0
   20b88:	str	r3, [sp, #364]	; 0x16c
   20b8c:	mov	r2, r9
   20b90:	add	r1, r8, #1
   20b94:	mov	r0, r7
   20b98:	bl	1809c <_start@@Base+0x3a9c>
   20b9c:	mov	r8, r0
   20ba0:	b	20818 <_start@@Base+0xc218>
   20ba4:	ldrb	r3, [r8, #2]
   20ba8:	cmp	r3, #32
   20bac:	addhi	r8, r8, #2
   20bb0:	bls	20b58 <_start@@Base+0xc558>
   20bb4:	b	20b68 <_start@@Base+0xc568>
   20bb8:	mov	r3, #0
   20bbc:	str	r3, [sp, #364]	; 0x16c
   20bc0:	mov	r3, #10
   20bc4:	mov	r2, r9
   20bc8:	mov	r1, r8
   20bcc:	mov	r0, r7
   20bd0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20bd4:	mov	r8, r0
   20bd8:	b	20818 <_start@@Base+0xc218>
   20bdc:	add	r3, sp, #304	; 0x130
   20be0:	strd	sl, [r3]
   20be4:	mov	sl, r7
   20be8:	ldrd	r6, [sp, #240]	; 0xf0
   20bec:	ldr	r3, [sl, #20]
   20bf0:	cmp	r3, #0
   20bf4:	bne	2066c <_start@@Base+0xc06c>
   20bf8:	ldr	r0, [sl]
   20bfc:	bl	27b8c <flatcc_builder_end_table@@Base>
   20c00:	str	r0, [sp, #384]	; 0x180
   20c04:	cmp	r0, #0
   20c08:	bne	20684 <_start@@Base+0xc084>
   20c0c:	b	2066c <_start@@Base+0xc06c>
   20c10:	add	r3, sp, #304	; 0x130
   20c14:	strd	sl, [r3]
   20c18:	mov	sl, r7
   20c1c:	ldrd	r6, [sp, #240]	; 0xf0
   20c20:	b	2066c <_start@@Base+0xc06c>
   20c24:	add	r3, sp, #304	; 0x130
   20c28:	strd	sl, [r3]
   20c2c:	mov	sl, r7
   20c30:	ldrd	r6, [sp, #240]	; 0xf0
   20c34:	b	2066c <_start@@Base+0xc06c>
   20c38:	add	r3, sp, #304	; 0x130
   20c3c:	strd	sl, [r3]
   20c40:	mov	sl, r7
   20c44:	ldrd	r6, [sp, #240]	; 0xf0
   20c48:	b	2066c <_start@@Base+0xc06c>
   20c4c:	add	r3, sp, #304	; 0x130
   20c50:	strd	sl, [r3]
   20c54:	mov	sl, r7
   20c58:	ldrd	r6, [sp, #240]	; 0xf0
   20c5c:	b	2066c <_start@@Base+0xc06c>
   20c60:	add	r3, sp, #304	; 0x130
   20c64:	strd	sl, [r3]
   20c68:	mov	sl, r7
   20c6c:	ldrd	r6, [sp, #240]	; 0xf0
   20c70:	b	2066c <_start@@Base+0xc06c>
   20c74:	add	r3, sp, #304	; 0x130
   20c78:	strd	sl, [r3]
   20c7c:	mov	sl, r7
   20c80:	ldrd	r6, [sp, #240]	; 0xf0
   20c84:	b	2066c <_start@@Base+0xc06c>
   20c88:	mov	r2, r9
   20c8c:	mov	r1, r0
   20c90:	mov	r0, sl
   20c94:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   20c98:	mov	r8, r0
   20c9c:	b	21804 <_start@@Base+0xd204>
   20ca0:	mov	r3, #8
   20ca4:	mov	r2, r9
   20ca8:	mov	r1, r8
   20cac:	mov	r0, sl
   20cb0:	bl	19da4 <_start@@Base+0x57a4>
   20cb4:	mov	r4, r0
   20cb8:	cmp	r0, r8
   20cbc:	beq	20d64 <_start@@Base+0xc764>
   20cc0:	mov	r3, #0
   20cc4:	strb	r3, [sp, #368]	; 0x170
   20cc8:	add	r3, sp, #368	; 0x170
   20ccc:	mov	r2, r9
   20cd0:	mov	r1, r0
   20cd4:	mov	r0, sl
   20cd8:	bl	187a8 <_start@@Base+0x41a8>
   20cdc:	mov	r8, r0
   20ce0:	cmp	r4, r0
   20ce4:	beq	20d28 <_start@@Base+0xc728>
   20ce8:	ldrb	r3, [sp, #368]	; 0x170
   20cec:	cmp	r3, #1
   20cf0:	bne	20d00 <_start@@Base+0xc700>
   20cf4:	ldr	r3, [sl, #8]
   20cf8:	tst	r3, #2
   20cfc:	beq	21804 <_start@@Base+0xd204>
   20d00:	mov	r3, #1
   20d04:	mov	r2, r3
   20d08:	mov	r1, #15
   20d0c:	ldr	r0, [sl]
   20d10:	bl	28c78 <flatcc_builder_table_add@@Base>
   20d14:	cmp	r0, #0
   20d18:	beq	22c14 <_start@@Base+0xe614>
   20d1c:	ldrb	r3, [sp, #368]	; 0x170
   20d20:	strb	r3, [r0]
   20d24:	b	21804 <_start@@Base+0xd204>
   20d28:	add	r3, sp, #368	; 0x170
   20d2c:	str	r3, [sp]
   20d30:	ldr	r3, [pc, #-616]	; 20ad0 <_start@@Base+0xc4d0>
   20d34:	mov	r2, r9
   20d38:	mov	r1, r0
   20d3c:	mov	r0, sl
   20d40:	bl	18600 <_start@@Base+0x4000>
   20d44:	cmp	r9, r0
   20d48:	cmpne	r8, r0
   20d4c:	beq	20d58 <_start@@Base+0xc758>
   20d50:	mov	r8, r0
   20d54:	b	20ce8 <_start@@Base+0xc6e8>
   20d58:	mov	fp, sl
   20d5c:	mov	r8, r0
   20d60:	b	1df34 <_start@@Base+0x9934>
   20d64:	mov	r2, r9
   20d68:	mov	r1, r8
   20d6c:	mov	r0, sl
   20d70:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   20d74:	mov	r8, r0
   20d78:	b	21804 <_start@@Base+0xd204>
   20d7c:	add	r3, pc, #964	; 0x3c4
   20d80:	ldrd	r2, [r3]
   20d84:	cmp	r1, r3
   20d88:	cmpeq	r0, r2
   20d8c:	bhi	215ac <_start@@Base+0xcfac>
   20d90:	add	r3, pc, #952	; 0x3b8
   20d94:	ldrd	r2, [r3]
   20d98:	cmp	r1, r3
   20d9c:	cmpeq	r0, r2
   20da0:	bne	21594 <_start@@Base+0xcf94>
   20da4:	add	r4, r8, #8
   20da8:	mov	r1, r9
   20dac:	mov	r0, r4
   20db0:	bl	146f0 <_start@@Base+0xf0>
   20db4:	mov	r3, #0
   20db8:	str	r3, [sp, #216]	; 0xd8
   20dbc:	and	r3, r1, #-16777216	; 0xff000000
   20dc0:	str	r3, [sp, #220]	; 0xdc
   20dc4:	ldrd	r2, [sp, #216]	; 0xd8
   20dc8:	cmp	r3, #2030043136	; 0x79000000
   20dcc:	cmpeq	r2, #0
   20dd0:	beq	20dec <_start@@Base+0xc7ec>
   20dd4:	mov	r2, r9
   20dd8:	mov	r1, r4
   20ddc:	mov	r0, sl
   20de0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   20de4:	mov	r8, r0
   20de8:	b	21804 <_start@@Base+0xd204>
   20dec:	mov	r3, #1
   20df0:	mov	r2, r9
   20df4:	mov	r1, r4
   20df8:	mov	r0, sl
   20dfc:	bl	19da4 <_start@@Base+0x57a4>
   20e00:	mov	r8, r0
   20e04:	cmp	r4, r0
   20e08:	beq	2157c <_start@@Base+0xcf7c>
   20e0c:	mov	r3, #0
   20e10:	str	r3, [sp, #384]	; 0x180
   20e14:	mov	r1, #3
   20e18:	ldr	r0, [sl]
   20e1c:	bl	270b4 <flatcc_builder_start_table@@Base>
   20e20:	cmp	r0, #0
   20e24:	beq	20e6c <_start@@Base+0xc86c>
   20e28:	mov	r3, #33	; 0x21
   20e2c:	mov	r2, r9
   20e30:	mov	r1, r8
   20e34:	mov	r0, sl
   20e38:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20e3c:	mov	r8, r0
   20e40:	ldr	r3, [sp, #384]	; 0x180
   20e44:	cmp	r3, #0
   20e48:	beq	22c1c <_start@@Base+0xe61c>
   20e4c:	mov	r1, #14
   20e50:	ldr	r0, [sl]
   20e54:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   20e58:	cmp	r0, #0
   20e5c:	beq	22c24 <_start@@Base+0xe624>
   20e60:	ldr	r3, [sp, #384]	; 0x180
   20e64:	str	r3, [r0]
   20e68:	b	21804 <_start@@Base+0xd204>
   20e6c:	add	r3, sp, #356	; 0x164
   20e70:	mov	r2, r9
   20e74:	mov	r1, r8
   20e78:	mov	r0, sl
   20e7c:	bl	1966c <_start@@Base+0x506c>
   20e80:	mov	r8, r0
   20e84:	mvn	r4, #0
   20e88:	movw	r5, #65535	; 0xffff
   20e8c:	movt	r5, #26979	; 0x6963
   20e90:	movw	r3, #16496	; 0x4070
   20e94:	movt	r3, #5
   20e98:	str	r3, [sp, #240]	; 0xf0
   20e9c:	add	r3, r3, #480	; 0x1e0
   20ea0:	str	r3, [sp, #344]	; 0x158
   20ea4:	strd	r6, [sp, #24]
   20ea8:	b	20fd4 <_start@@Base+0xc9d4>
   20eac:	mov	r3, #5
   20eb0:	mov	r2, r9
   20eb4:	mov	r1, r8
   20eb8:	mov	r0, sl
   20ebc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20ec0:	mov	r8, r0
   20ec4:	b	20ff8 <_start@@Base+0xc9f8>
   20ec8:	ldrb	r0, [r8, #7]
   20ecc:	mov	r1, #0
   20ed0:	ldrb	r2, [r8, #6]
   20ed4:	orr	r3, r0, r2, lsl #8
   20ed8:	mov	r2, r1
   20edc:	ldrb	r0, [r8, #5]
   20ee0:	orr	r3, r3, r0, lsl #16
   20ee4:	ldrb	r0, [r8, #4]
   20ee8:	orr	r3, r3, r0, lsl #24
   20eec:	ldrb	r0, [r8, #3]
   20ef0:	orr	r2, r2, r0
   20ef4:	ldrb	r0, [r8, #2]
   20ef8:	orr	r2, r2, r0, lsl #8
   20efc:	ldrb	r0, [r8, #1]
   20f00:	orr	r2, r2, r0, lsl #16
   20f04:	ldrb	r0, [r8]
   20f08:	str	r3, [sp, #64]	; 0x40
   20f0c:	orr	r3, r2, r0, lsl #24
   20f10:	str	r3, [sp, #68]	; 0x44
   20f14:	ldrd	r2, [sp, #64]	; 0x40
   20f18:	cmp	r3, r5
   20f1c:	cmpeq	r2, r4
   20f20:	bhi	21250 <_start@@Base+0xcc50>
   20f24:	and	r1, r2, #-16777216	; 0xff000000
   20f28:	str	r1, [sp, #160]	; 0xa0
   20f2c:	str	r3, [sp, #164]	; 0xa4
   20f30:	ldrd	r2, [sp, #160]	; 0xa0
   20f34:	add	r1, pc, #540	; 0x21c
   20f38:	ldrd	r0, [r1]
   20f3c:	cmp	r3, r1
   20f40:	cmpeq	r2, r0
   20f44:	beq	21098 <_start@@Base+0xca98>
   20f48:	mov	r2, r9
   20f4c:	mov	r1, r8
   20f50:	mov	r0, sl
   20f54:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   20f58:	mov	r8, r0
   20f5c:	sub	r3, r9, r8
   20f60:	cmp	r3, #1
   20f64:	ble	20f78 <_start@@Base+0xc978>
   20f68:	ldrb	r3, [r8]
   20f6c:	cmp	r3, #32
   20f70:	bhi	20f8c <_start@@Base+0xc98c>
   20f74:	beq	21434 <_start@@Base+0xce34>
   20f78:	mov	r2, r9
   20f7c:	mov	r1, r8
   20f80:	mov	r0, sl
   20f84:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   20f88:	mov	r8, r0
   20f8c:	cmp	r9, r8
   20f90:	moveq	r3, #0
   20f94:	streq	r3, [sp, #356]	; 0x164
   20f98:	beq	20fd4 <_start@@Base+0xc9d4>
   20f9c:	ldrb	r3, [r8]
   20fa0:	cmp	r3, #44	; 0x2c
   20fa4:	beq	21494 <_start@@Base+0xce94>
   20fa8:	mov	r3, #0
   20fac:	str	r3, [sp, #356]	; 0x164
   20fb0:	ldrb	r3, [r8]
   20fb4:	cmp	r3, #125	; 0x7d
   20fb8:	beq	21448 <_start@@Base+0xce48>
   20fbc:	mov	r3, #10
   20fc0:	mov	r2, r9
   20fc4:	mov	r1, r8
   20fc8:	mov	r0, sl
   20fcc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   20fd0:	mov	r8, r0
   20fd4:	ldr	r3, [sp, #356]	; 0x164
   20fd8:	cmp	r3, #0
   20fdc:	beq	2153c <_start@@Base+0xcf3c>
   20fe0:	cmp	r9, r8
   20fe4:	beq	20ff8 <_start@@Base+0xc9f8>
   20fe8:	ldrb	r3, [r8]
   20fec:	cmp	r3, #34	; 0x22
   20ff0:	addeq	r8, r8, #1
   20ff4:	bne	20eac <_start@@Base+0xc8ac>
   20ff8:	sub	r3, r9, r8
   20ffc:	cmp	r3, #8
   21000:	bhi	20ec8 <_start@@Base+0xc8c8>
   21004:	sub	r3, r3, #1
   21008:	cmp	r3, #7
   2100c:	ldrls	pc, [pc, r3, lsl #2]
   21010:	b	21088 <_start@@Base+0xca88>
   21014:	andeq	r1, r2, ip, ror r0
   21018:	andeq	r1, r2, r0, ror r0
   2101c:	andeq	r1, r2, r4, rrx
   21020:	andeq	r1, r2, r8, asr r0
   21024:	andeq	r1, r2, ip, asr #32
   21028:	andeq	r1, r2, r0, asr #32
   2102c:	andeq	r1, r2, r4, lsr r0
   21030:	andeq	r0, r2, r8, asr #29
   21034:	mov	r0, #0
   21038:	mov	r1, #0
   2103c:	b	20ed0 <_start@@Base+0xc8d0>
   21040:	mov	r3, #0
   21044:	mov	r2, r3
   21048:	b	20edc <_start@@Base+0xc8dc>
   2104c:	mov	r3, #0
   21050:	mov	r2, r3
   21054:	b	20ee4 <_start@@Base+0xc8e4>
   21058:	mov	r3, #0
   2105c:	mov	r2, r3
   21060:	b	20eec <_start@@Base+0xc8ec>
   21064:	mov	r3, #0
   21068:	mov	r2, r3
   2106c:	b	20ef4 <_start@@Base+0xc8f4>
   21070:	mov	r3, #0
   21074:	mov	r2, r3
   21078:	b	20efc <_start@@Base+0xc8fc>
   2107c:	mov	r3, #0
   21080:	mov	r2, r3
   21084:	b	20f04 <_start@@Base+0xc904>
   21088:	mov	r2, #0
   2108c:	mov	r3, #0
   21090:	strd	r2, [sp, #64]	; 0x40
   21094:	b	20f14 <_start@@Base+0xc914>
   21098:	mov	r3, #5
   2109c:	mov	r2, r9
   210a0:	mov	r1, r8
   210a4:	mov	r0, sl
   210a8:	bl	19da4 <_start@@Base+0x57a4>
   210ac:	mov	fp, r0
   210b0:	cmp	r8, r0
   210b4:	beq	21238 <_start@@Base+0xcc38>
   210b8:	mov	r3, #0
   210bc:	add	r2, sp, #352	; 0x160
   210c0:	add	r2, r2, #2
   210c4:	strh	r3, [r2]
   210c8:	mov	r0, #0
   210cc:	mov	r1, #0
   210d0:	add	r2, sp, #368	; 0x170
   210d4:	strd	r0, [r2]
   210d8:	str	r3, [sp, #364]	; 0x16c
   210dc:	cmp	r9, fp
   210e0:	beq	22cc4 <_start@@Base+0xe6c4>
   210e4:	str	r2, [sp]
   210e8:	add	r3, sp, #364	; 0x16c
   210ec:	mov	r2, r9
   210f0:	mov	r1, fp
   210f4:	mov	r0, sl
   210f8:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   210fc:	mov	r7, r0
   21100:	cmp	fp, r0
   21104:	bne	21168 <_start@@Base+0xcb68>
   21108:	add	r3, sp, #352	; 0x160
   2110c:	add	r3, r3, #2
   21110:	str	r3, [sp]
   21114:	ldr	r3, [sp, #240]	; 0xf0
   21118:	add	r3, r3, #468	; 0x1d4
   2111c:	mov	r2, r9
   21120:	mov	r1, r7
   21124:	mov	r0, sl
   21128:	bl	19210 <_start@@Base+0x4c10>
   2112c:	mov	r8, r0
   21130:	cmp	r9, r0
   21134:	cmpne	r0, r7
   21138:	bne	211c4 <_start@@Base+0xcbc4>
   2113c:	ldrd	r6, [sp, #24]
   21140:	b	20e28 <_start@@Base+0xc828>
   21144:	nop	{0}
   21148:	ldrbvs	pc, [pc, #4095]!	; 2214f <_start@@Base+0xdb4f>	; <UNPREDICTABLE>
   2114c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21150:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   21154:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21158:	strvc	r0, [r0], #-0
   2115c:	cmnvs	pc, #461373440	; 0x1b800000
   21160:	andeq	r0, r0, r0
   21164:	strbtvc	r6, [r1], -r0, lsl #24
   21168:	ldr	r3, [sp, #364]	; 0x16c
   2116c:	cmp	r3, #0
   21170:	bne	211a4 <_start@@Base+0xcba4>
   21174:	add	r3, sp, #368	; 0x170
   21178:	ldrd	r2, [r3]
   2117c:	movw	r0, #65535	; 0xffff
   21180:	mov	r1, #0
   21184:	cmp	r3, r1
   21188:	cmpeq	r2, r0
   2118c:	bhi	21214 <_start@@Base+0xcc14>
   21190:	add	r1, sp, #352	; 0x160
   21194:	add	r1, r1, #2
   21198:	strh	r2, [r1]
   2119c:	mov	r8, r7
   211a0:	b	211c4 <_start@@Base+0xcbc4>
   211a4:	mov	r3, #8
   211a8:	mov	r2, r9
   211ac:	mov	r1, r0
   211b0:	mov	r0, sl
   211b4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   211b8:	mov	r8, r0
   211bc:	cmp	fp, r8
   211c0:	beq	21230 <_start@@Base+0xcc30>
   211c4:	add	r3, sp, #352	; 0x160
   211c8:	add	r3, r3, #2
   211cc:	ldrh	r3, [r3]
   211d0:	cmp	r3, #0
   211d4:	bne	211e4 <_start@@Base+0xcbe4>
   211d8:	ldr	r3, [sl, #8]
   211dc:	tst	r3, #2
   211e0:	beq	20f5c <_start@@Base+0xc95c>
   211e4:	mov	r3, #2
   211e8:	mov	r2, r3
   211ec:	mov	r1, r3
   211f0:	ldr	r0, [sl]
   211f4:	bl	28c78 <flatcc_builder_table_add@@Base>
   211f8:	cmp	r0, #0
   211fc:	beq	21564 <_start@@Base+0xcf64>
   21200:	add	r3, sp, #352	; 0x160
   21204:	add	r3, r3, #2
   21208:	ldrh	r3, [r3]
   2120c:	strh	r3, [r0]
   21210:	b	20f5c <_start@@Base+0xc95c>
   21214:	mov	r3, #7
   21218:	mov	r2, r9
   2121c:	mov	r1, r7
   21220:	mov	r0, sl
   21224:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   21228:	mov	r8, r0
   2122c:	b	211bc <_start@@Base+0xcbbc>
   21230:	mov	r7, r8
   21234:	b	21108 <_start@@Base+0xcb08>
   21238:	mov	r2, r9
   2123c:	mov	r1, r0
   21240:	mov	r0, sl
   21244:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21248:	mov	r8, r0
   2124c:	b	20f5c <_start@@Base+0xc95c>
   21250:	mov	r3, #0
   21254:	str	r3, [sp, #168]	; 0xa8
   21258:	ldr	r3, [sp, #68]	; 0x44
   2125c:	bic	r3, r3, #255	; 0xff
   21260:	str	r3, [sp, #172]	; 0xac
   21264:	ldrd	r2, [sp, #168]	; 0xa8
   21268:	sub	r1, pc, #272	; 0x110
   2126c:	ldrd	r0, [r1]
   21270:	cmp	r3, r1
   21274:	cmpeq	r2, r0
   21278:	beq	212c8 <_start@@Base+0xccc8>
   2127c:	mov	r3, #0
   21280:	str	r3, [sp, #112]	; 0x70
   21284:	ldr	r3, [sp, #68]	; 0x44
   21288:	lsr	r3, r3, #16
   2128c:	lsl	r3, r3, #16
   21290:	str	r3, [sp, #116]	; 0x74
   21294:	ldrd	r2, [sp, #112]	; 0x70
   21298:	mov	r0, #0
   2129c:	mov	r1, #0
   212a0:	movt	r1, #26980	; 0x6964
   212a4:	cmp	r3, r1
   212a8:	cmpeq	r2, r0
   212ac:	beq	213c0 <_start@@Base+0xcdc0>
   212b0:	mov	r2, r9
   212b4:	mov	r1, r8
   212b8:	mov	r0, sl
   212bc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   212c0:	mov	r8, r0
   212c4:	b	20f5c <_start@@Base+0xc95c>
   212c8:	mov	r3, #3
   212cc:	mov	r2, r9
   212d0:	mov	r1, r8
   212d4:	mov	r0, sl
   212d8:	bl	19da4 <_start@@Base+0x57a4>
   212dc:	mov	fp, r0
   212e0:	cmp	r8, r0
   212e4:	beq	213a8 <_start@@Base+0xcda8>
   212e8:	mov	r2, #0
   212ec:	mov	r3, #0
   212f0:	add	r1, sp, #368	; 0x170
   212f4:	strd	r2, [r1]
   212f8:	mov	r3, r1
   212fc:	mov	r2, r9
   21300:	mov	r1, r0
   21304:	mov	r0, sl
   21308:	bl	17fc0 <_start@@Base+0x39c0>
   2130c:	mov	r8, r0
   21310:	cmp	fp, r0
   21314:	beq	21360 <_start@@Base+0xcd60>
   21318:	add	r3, sp, #368	; 0x170
   2131c:	ldrd	r2, [r3]
   21320:	orrs	r3, r2, r3
   21324:	bne	21334 <_start@@Base+0xcd34>
   21328:	ldr	r3, [sl, #8]
   2132c:	tst	r3, #2
   21330:	beq	20f5c <_start@@Base+0xc95c>
   21334:	mov	r3, #8
   21338:	mov	r2, r3
   2133c:	mov	r1, #1
   21340:	ldr	r0, [sl]
   21344:	bl	28c78 <flatcc_builder_table_add@@Base>
   21348:	cmp	r0, #0
   2134c:	beq	21390 <_start@@Base+0xcd90>
   21350:	add	r3, sp, #368	; 0x170
   21354:	ldrd	r2, [r3]
   21358:	strd	r2, [r0]
   2135c:	b	20f5c <_start@@Base+0xc95c>
   21360:	add	r3, sp, #368	; 0x170
   21364:	str	r3, [sp]
   21368:	ldr	r3, [sp, #344]	; 0x158
   2136c:	mov	r2, r9
   21370:	mov	r1, r0
   21374:	mov	r0, sl
   21378:	bl	180ec <_start@@Base+0x3aec>
   2137c:	cmp	r9, r0
   21380:	cmpne	r8, r0
   21384:	beq	213a0 <_start@@Base+0xcda0>
   21388:	mov	r8, r0
   2138c:	b	21318 <_start@@Base+0xcd18>
   21390:	ldrd	r6, [sp, #24]
   21394:	mov	r0, r8
   21398:	mov	r8, r0
   2139c:	b	20e28 <_start@@Base+0xc828>
   213a0:	ldrd	r6, [sp, #24]
   213a4:	b	21398 <_start@@Base+0xcd98>
   213a8:	mov	r2, r9
   213ac:	mov	r1, r0
   213b0:	mov	r0, sl
   213b4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   213b8:	mov	r8, r0
   213bc:	b	20f5c <_start@@Base+0xc95c>
   213c0:	mov	r3, #2
   213c4:	mov	r2, r9
   213c8:	mov	r1, r8
   213cc:	mov	r0, sl
   213d0:	bl	19da4 <_start@@Base+0x57a4>
   213d4:	mov	r1, r0
   213d8:	cmp	r8, r0
   213dc:	beq	21420 <_start@@Base+0xce20>
   213e0:	add	r3, sp, #360	; 0x168
   213e4:	mov	r2, r9
   213e8:	mov	r0, sl
   213ec:	bl	2ecc4 <flatcc_json_parser_build_string@@Base>
   213f0:	mov	r8, r0
   213f4:	ldr	r3, [sp, #360]	; 0x168
   213f8:	cmp	r3, #0
   213fc:	beq	2156c <_start@@Base+0xcf6c>
   21400:	mov	r1, #0
   21404:	ldr	r0, [sl]
   21408:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   2140c:	cmp	r0, #0
   21410:	beq	21574 <_start@@Base+0xcf74>
   21414:	ldr	r3, [sp, #360]	; 0x168
   21418:	str	r3, [r0]
   2141c:	b	20f5c <_start@@Base+0xc95c>
   21420:	mov	r2, r9
   21424:	mov	r0, sl
   21428:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   2142c:	mov	r8, r0
   21430:	b	20f5c <_start@@Base+0xc95c>
   21434:	ldrb	r3, [r8, #1]
   21438:	cmp	r3, #32
   2143c:	addhi	r8, r8, #1
   21440:	bls	20f78 <_start@@Base+0xc978>
   21444:	b	20f8c <_start@@Base+0xc98c>
   21448:	add	r1, r8, #1
   2144c:	sub	r3, r9, r1
   21450:	cmp	r3, #1
   21454:	ble	2146c <_start@@Base+0xce6c>
   21458:	ldrb	r3, [r8, #1]
   2145c:	cmp	r3, #32
   21460:	movhi	r8, r1
   21464:	bhi	20fd4 <_start@@Base+0xc9d4>
   21468:	beq	21480 <_start@@Base+0xce80>
   2146c:	mov	r2, r9
   21470:	mov	r0, sl
   21474:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   21478:	mov	r8, r0
   2147c:	b	20fd4 <_start@@Base+0xc9d4>
   21480:	ldrb	r3, [r8, #2]
   21484:	cmp	r3, #32
   21488:	addhi	r8, r8, #2
   2148c:	bls	2146c <_start@@Base+0xce6c>
   21490:	b	20fd4 <_start@@Base+0xc9d4>
   21494:	add	r1, r8, #1
   21498:	sub	r3, r9, r1
   2149c:	cmp	r3, #1
   214a0:	ble	214b8 <_start@@Base+0xceb8>
   214a4:	ldrb	r3, [r8, #1]
   214a8:	cmp	r3, #32
   214ac:	movhi	r8, r1
   214b0:	bhi	214c8 <_start@@Base+0xcec8>
   214b4:	beq	21504 <_start@@Base+0xcf04>
   214b8:	mov	r2, r9
   214bc:	mov	r0, sl
   214c0:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   214c4:	mov	r8, r0
   214c8:	cmp	r9, r8
   214cc:	beq	21518 <_start@@Base+0xcf18>
   214d0:	ldrb	r3, [r8]
   214d4:	cmp	r3, #125	; 0x7d
   214d8:	movne	r3, #1
   214dc:	strne	r3, [sp, #356]	; 0x164
   214e0:	bne	20fd4 <_start@@Base+0xc9d4>
   214e4:	mov	r3, #0
   214e8:	str	r3, [sp, #356]	; 0x164
   214ec:	mov	r2, r9
   214f0:	add	r1, r8, #1
   214f4:	mov	r0, sl
   214f8:	bl	1809c <_start@@Base+0x3a9c>
   214fc:	mov	r8, r0
   21500:	b	20fd4 <_start@@Base+0xc9d4>
   21504:	ldrb	r3, [r8, #2]
   21508:	cmp	r3, #32
   2150c:	addhi	r8, r8, #2
   21510:	bls	214b8 <_start@@Base+0xceb8>
   21514:	b	214c8 <_start@@Base+0xcec8>
   21518:	mov	r3, #0
   2151c:	str	r3, [sp, #356]	; 0x164
   21520:	mov	r3, #10
   21524:	mov	r2, r9
   21528:	mov	r1, r8
   2152c:	mov	r0, sl
   21530:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   21534:	mov	r8, r0
   21538:	b	20fd4 <_start@@Base+0xc9d4>
   2153c:	ldrd	r6, [sp, #24]
   21540:	ldr	r3, [sl, #20]
   21544:	cmp	r3, #0
   21548:	bne	20e28 <_start@@Base+0xc828>
   2154c:	ldr	r0, [sl]
   21550:	bl	27b8c <flatcc_builder_end_table@@Base>
   21554:	str	r0, [sp, #384]	; 0x180
   21558:	cmp	r0, #0
   2155c:	bne	20e40 <_start@@Base+0xc840>
   21560:	b	20e28 <_start@@Base+0xc828>
   21564:	ldrd	r6, [sp, #24]
   21568:	b	20e28 <_start@@Base+0xc828>
   2156c:	ldrd	r6, [sp, #24]
   21570:	b	20e28 <_start@@Base+0xc828>
   21574:	ldrd	r6, [sp, #24]
   21578:	b	20e28 <_start@@Base+0xc828>
   2157c:	mov	r2, r9
   21580:	mov	r1, r0
   21584:	mov	r0, sl
   21588:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   2158c:	mov	r8, r0
   21590:	b	21804 <_start@@Base+0xd204>
   21594:	mov	r2, r9
   21598:	mov	r1, r8
   2159c:	mov	r0, sl
   215a0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   215a4:	mov	r8, r0
   215a8:	b	21804 <_start@@Base+0xd204>
   215ac:	lsr	r3, r0, #16
   215b0:	lsl	r3, r3, #16
   215b4:	str	r3, [sp, #88]	; 0x58
   215b8:	str	r1, [sp, #92]	; 0x5c
   215bc:	add	r3, pc, #1004	; 0x3ec
   215c0:	ldrd	r2, [r3]
   215c4:	ldrd	r0, [sp, #88]	; 0x58
   215c8:	cmp	r1, r3
   215cc:	cmpeq	r0, r2
   215d0:	beq	21664 <_start@@Base+0xd064>
   215d4:	mov	r3, #5
   215d8:	mov	r2, r9
   215dc:	mov	r1, r8
   215e0:	mov	r0, sl
   215e4:	bl	19da4 <_start@@Base+0x57a4>
   215e8:	mov	r4, r0
   215ec:	cmp	r0, r8
   215f0:	beq	2179c <_start@@Base+0xd19c>
   215f4:	mov	r3, #0
   215f8:	str	r3, [sp, #368]	; 0x170
   215fc:	add	r3, sp, #368	; 0x170
   21600:	mov	r2, r9
   21604:	mov	r1, r0
   21608:	mov	r0, sl
   2160c:	bl	2d678 <flatcc_json_parser_float@@Base>
   21610:	mov	r8, r0
   21614:	cmp	r4, r0
   21618:	beq	21754 <_start@@Base+0xd154>
   2161c:	vldr	s15, [pc, #972]	; 219f0 <_start@@Base+0xd3f0>
   21620:	vldr	s14, [sp, #368]	; 0x170
   21624:	vcmp.f32	s14, s15
   21628:	vmrs	APSR_nzcv, fpscr
   2162c:	bne	2163c <_start@@Base+0xd03c>
   21630:	ldr	r3, [sl, #8]
   21634:	tst	r3, #2
   21638:	beq	21804 <_start@@Base+0xd204>
   2163c:	mov	r3, #4
   21640:	mov	r2, r3
   21644:	mov	r1, #25
   21648:	ldr	r0, [sl]
   2164c:	bl	28c78 <flatcc_builder_table_add@@Base>
   21650:	cmp	r0, #0
   21654:	beq	21784 <_start@@Base+0xd184>
   21658:	ldr	r3, [sp, #368]	; 0x170
   2165c:	str	r3, [r0]
   21660:	b	21804 <_start@@Base+0xd204>
   21664:	mov	r3, #6
   21668:	mov	r2, r9
   2166c:	mov	r1, r8
   21670:	mov	r0, sl
   21674:	bl	19da4 <_start@@Base+0x57a4>
   21678:	mov	r4, r0
   2167c:	cmp	r0, r8
   21680:	beq	2173c <_start@@Base+0xd13c>
   21684:	mov	r3, #0
   21688:	str	r3, [sp, #368]	; 0x170
   2168c:	add	r3, sp, #368	; 0x170
   21690:	mov	r2, r9
   21694:	mov	r1, r0
   21698:	mov	r0, sl
   2169c:	bl	2d678 <flatcc_json_parser_float@@Base>
   216a0:	mov	r8, r0
   216a4:	cmp	r4, r0
   216a8:	beq	216f4 <_start@@Base+0xd0f4>
   216ac:	vldr	s15, [pc, #832]	; 219f4 <_start@@Base+0xd3f4>
   216b0:	vldr	s14, [sp, #368]	; 0x170
   216b4:	vcmp.f32	s14, s15
   216b8:	vmrs	APSR_nzcv, fpscr
   216bc:	bne	216cc <_start@@Base+0xd0cc>
   216c0:	ldr	r3, [sl, #8]
   216c4:	tst	r3, #2
   216c8:	beq	21804 <_start@@Base+0xd204>
   216cc:	mov	r3, #4
   216d0:	mov	r2, r3
   216d4:	mov	r1, #26
   216d8:	ldr	r0, [sl]
   216dc:	bl	28c78 <flatcc_builder_table_add@@Base>
   216e0:	cmp	r0, #0
   216e4:	beq	21724 <_start@@Base+0xd124>
   216e8:	ldr	r3, [sp, #368]	; 0x170
   216ec:	str	r3, [r0]
   216f0:	b	21804 <_start@@Base+0xd204>
   216f4:	add	r3, sp, #368	; 0x170
   216f8:	str	r3, [sp]
   216fc:	ldr	r3, [pc, #756]	; 219f8 <_start@@Base+0xd3f8>
   21700:	mov	r2, r9
   21704:	mov	r1, r0
   21708:	mov	r0, sl
   2170c:	bl	182f0 <_start@@Base+0x3cf0>
   21710:	cmp	r9, r0
   21714:	cmpne	r8, r0
   21718:	beq	21734 <_start@@Base+0xd134>
   2171c:	mov	r8, r0
   21720:	b	216ac <_start@@Base+0xd0ac>
   21724:	mov	fp, sl
   21728:	mov	r0, r8
   2172c:	mov	r8, r0
   21730:	b	1df34 <_start@@Base+0x9934>
   21734:	mov	fp, sl
   21738:	b	2172c <_start@@Base+0xd12c>
   2173c:	mov	r2, r9
   21740:	mov	r1, r8
   21744:	mov	r0, sl
   21748:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   2174c:	mov	r8, r0
   21750:	b	21804 <_start@@Base+0xd204>
   21754:	add	r3, sp, #368	; 0x170
   21758:	str	r3, [sp]
   2175c:	ldr	r3, [pc, #664]	; 219fc <_start@@Base+0xd3fc>
   21760:	mov	r2, r9
   21764:	mov	r1, r0
   21768:	mov	r0, sl
   2176c:	bl	182f0 <_start@@Base+0x3cf0>
   21770:	cmp	r9, r0
   21774:	cmpne	r8, r0
   21778:	beq	21794 <_start@@Base+0xd194>
   2177c:	mov	r8, r0
   21780:	b	2161c <_start@@Base+0xd01c>
   21784:	mov	fp, sl
   21788:	mov	r0, r8
   2178c:	mov	r8, r0
   21790:	b	1df34 <_start@@Base+0x9934>
   21794:	mov	fp, sl
   21798:	b	2178c <_start@@Base+0xd18c>
   2179c:	mov	r2, r9
   217a0:	mov	r1, r8
   217a4:	mov	r0, sl
   217a8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   217ac:	mov	r8, r0
   217b0:	b	21804 <_start@@Base+0xd204>
   217b4:	add	r3, pc, #508	; 0x1fc
   217b8:	ldrd	r2, [r3]
   217bc:	cmp	r1, r3
   217c0:	cmpeq	r0, r2
   217c4:	bhi	21a1c <_start@@Base+0xd41c>
   217c8:	lsr	r3, r0, #16
   217cc:	lsl	r3, r3, #16
   217d0:	str	r3, [sp, #40]	; 0x28
   217d4:	str	r1, [sp, #44]	; 0x2c
   217d8:	add	r3, pc, #480	; 0x1e0
   217dc:	ldrd	r2, [r3]
   217e0:	ldrd	r0, [sp, #40]	; 0x28
   217e4:	cmp	r1, r3
   217e8:	cmpeq	r0, r2
   217ec:	beq	218e4 <_start@@Base+0xd2e4>
   217f0:	mov	r2, r9
   217f4:	mov	r1, r8
   217f8:	mov	r0, sl
   217fc:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21800:	mov	r8, r0
   21804:	add	r3, sp, #388	; 0x184
   21808:	mov	r2, r9
   2180c:	mov	r1, r8
   21810:	mov	r0, sl
   21814:	bl	1a448 <_start@@Base+0x5e48>
   21818:	mov	r8, r0
   2181c:	ldr	r3, [sp, #388]	; 0x184
   21820:	cmp	r3, #0
   21824:	beq	229d0 <_start@@Base+0xe3d0>
   21828:	cmp	r9, r8
   2182c:	beq	21840 <_start@@Base+0xd240>
   21830:	ldrb	r3, [r8]
   21834:	cmp	r3, #34	; 0x22
   21838:	addeq	r8, r8, #1
   2183c:	bne	1dfc0 <_start@@Base+0x99c0>
   21840:	mov	r1, r9
   21844:	mov	r0, r8
   21848:	bl	146f0 <_start@@Base+0xf0>
   2184c:	mov	r4, r0
   21850:	mov	r5, r1
   21854:	add	r3, pc, #364	; 0x16c
   21858:	ldrd	r2, [r3]
   2185c:	cmp	r1, r3
   21860:	cmpeq	r0, r2
   21864:	bhi	1f6fc <_start@@Base+0xb0fc>
   21868:	add	r3, pc, #352	; 0x160
   2186c:	ldrd	r2, [r3]
   21870:	cmp	r1, r3
   21874:	cmpeq	r0, r2
   21878:	bhi	1e7d0 <_start@@Base+0xa1d0>
   2187c:	add	r3, pc, #340	; 0x154
   21880:	ldrd	r2, [r3]
   21884:	cmp	r1, r3
   21888:	cmpeq	r0, r2
   2188c:	bhi	1e1d0 <_start@@Base+0x9bd0>
   21890:	and	r3, r0, #-16777216	; 0xff000000
   21894:	str	r3, [sp, #48]	; 0x30
   21898:	str	r1, [sp, #52]	; 0x34
   2189c:	add	r3, pc, #316	; 0x13c
   218a0:	ldrd	r2, [r3]
   218a4:	ldrd	r0, [sp, #48]	; 0x30
   218a8:	cmp	r1, r3
   218ac:	cmpeq	r0, r2
   218b0:	beq	1dfdc <_start@@Base+0x99dc>
   218b4:	add	r3, pc, #300	; 0x12c
   218b8:	ldrd	r2, [r3]
   218bc:	ldrd	r0, [sp, #48]	; 0x30
   218c0:	cmp	r1, r3
   218c4:	cmpeq	r0, r2
   218c8:	beq	1e054 <_start@@Base+0x9a54>
   218cc:	mov	r2, r9
   218d0:	mov	r1, r8
   218d4:	mov	r0, sl
   218d8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   218dc:	mov	r8, r0
   218e0:	b	21804 <_start@@Base+0xd204>
   218e4:	mov	r3, #6
   218e8:	mov	r2, r9
   218ec:	mov	r1, r8
   218f0:	mov	r0, sl
   218f4:	bl	19da4 <_start@@Base+0x57a4>
   218f8:	mov	r4, r0
   218fc:	cmp	r0, r8
   21900:	beq	21a04 <_start@@Base+0xd404>
   21904:	mov	r3, #0
   21908:	str	r3, [sp, #368]	; 0x170
   2190c:	add	r3, sp, #368	; 0x170
   21910:	mov	r2, r9
   21914:	mov	r1, r0
   21918:	mov	r0, sl
   2191c:	bl	2d678 <flatcc_json_parser_float@@Base>
   21920:	mov	r8, r0
   21924:	cmp	r4, r0
   21928:	beq	21970 <_start@@Base+0xd370>
   2192c:	vldr	s15, [sp, #368]	; 0x170
   21930:	vcmp.f32	s15, #0.0
   21934:	vmrs	APSR_nzcv, fpscr
   21938:	bne	21948 <_start@@Base+0xd348>
   2193c:	ldr	r3, [sl, #8]
   21940:	tst	r3, #2
   21944:	beq	21804 <_start@@Base+0xd204>
   21948:	mov	r3, #4
   2194c:	mov	r2, r3
   21950:	mov	r1, #27
   21954:	ldr	r0, [sl]
   21958:	bl	28c78 <flatcc_builder_table_add@@Base>
   2195c:	cmp	r0, #0
   21960:	beq	22c2c <_start@@Base+0xe62c>
   21964:	ldr	r3, [sp, #368]	; 0x170
   21968:	str	r3, [r0]
   2196c:	b	21804 <_start@@Base+0xd204>
   21970:	add	r3, sp, #368	; 0x170
   21974:	str	r3, [sp]
   21978:	ldr	r3, [pc, #128]	; 21a00 <_start@@Base+0xd400>
   2197c:	mov	r2, r9
   21980:	mov	r1, r0
   21984:	mov	r0, sl
   21988:	bl	182f0 <_start@@Base+0x3cf0>
   2198c:	cmp	r9, r0
   21990:	cmpne	r8, r0
   21994:	beq	219a0 <_start@@Base+0xd3a0>
   21998:	mov	r8, r0
   2199c:	b	2192c <_start@@Base+0xd32c>
   219a0:	mov	fp, sl
   219a4:	mov	r8, r0
   219a8:	b	1df34 <_start@@Base+0x9934>
   219ac:	nop	{0}
   219b0:	ldrtvs	r0, [r2], -r0
   219b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   219b8:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   219bc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   219c0:	ldrtvs	r0, [r3], -r0
   219c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   219c8:	cmnvs	r2, r0, ror #4
   219cc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   219d0:			; <UNDEFINED> instruction: 0xffffffff
   219d4:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   219d8:			; <UNDEFINED> instruction: 0xffffffff
   219dc:			; <UNDEFINED> instruction: 0x666c6577
   219e0:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   219e4:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   219e8:	andvc	r0, r0, #0
   219ec:	cmnvs	pc, #28416	; 0x6f00
   219f0:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   219f4:	submi	r0, r0, r0
   219f8:	andeq	r4, r5, ip, asr r2
   219fc:	andeq	r4, r5, r8, ror #4
   21a00:	andeq	r4, r5, r4, ror r2
   21a04:	mov	r2, r9
   21a08:	mov	r1, r8
   21a0c:	mov	r0, sl
   21a10:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21a14:	mov	r8, r0
   21a18:	b	21804 <_start@@Base+0xd204>
   21a1c:	add	r3, pc, #980	; 0x3d4
   21a20:	ldrd	r2, [r3]
   21a24:	cmp	r1, r3
   21a28:	cmpeq	r0, r2
   21a2c:	beq	21acc <_start@@Base+0xd4cc>
   21a30:	add	r3, pc, #968	; 0x3c8
   21a34:	ldrd	r2, [r3]
   21a38:	cmp	r1, r3
   21a3c:	cmpeq	r0, r2
   21a40:	bhi	22650 <_start@@Base+0xe050>
   21a44:	add	r3, pc, #956	; 0x3bc
   21a48:	ldrd	r2, [r3]
   21a4c:	cmp	r1, r3
   21a50:	cmpeq	r0, r2
   21a54:	bne	22638 <_start@@Base+0xe038>
   21a58:	add	r4, r8, #8
   21a5c:	mov	r1, r9
   21a60:	mov	r0, r4
   21a64:	bl	146f0 <_start@@Base+0xf0>
   21a68:	add	r3, pc, #928	; 0x3a0
   21a6c:	ldrd	r2, [r3]
   21a70:	cmp	r1, r3
   21a74:	cmpeq	r0, r2
   21a78:	bne	22620 <_start@@Base+0xe020>
   21a7c:	add	r4, r8, #16
   21a80:	mov	r1, r9
   21a84:	mov	r0, r4
   21a88:	bl	146f0 <_start@@Base+0xf0>
   21a8c:	mov	r3, #0
   21a90:	str	r3, [sp, #288]	; 0x120
   21a94:	str	r1, [sp, #292]	; 0x124
   21a98:	add	r3, pc, #888	; 0x378
   21a9c:	ldrd	r2, [r3]
   21aa0:	add	r1, sp, #288	; 0x120
   21aa4:	ldrd	r0, [r1]
   21aa8:	cmp	r1, r3
   21aac:	cmpeq	r0, r2
   21ab0:	beq	2246c <_start@@Base+0xde6c>
   21ab4:	mov	r2, r9
   21ab8:	mov	r1, r4
   21abc:	mov	r0, sl
   21ac0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21ac4:	mov	r8, r0
   21ac8:	b	21804 <_start@@Base+0xd204>
   21acc:	add	r8, r8, #8
   21ad0:	mov	r1, r9
   21ad4:	mov	r0, r8
   21ad8:	bl	146f0 <_start@@Base+0xf0>
   21adc:	add	r3, pc, #828	; 0x33c
   21ae0:	ldrd	r2, [r3]
   21ae4:	cmp	r1, r3
   21ae8:	cmpeq	r0, r2
   21aec:	bhi	21d20 <_start@@Base+0xd720>
   21af0:	add	r3, pc, #816	; 0x330
   21af4:	ldrd	r2, [r3]
   21af8:	cmp	r1, r3
   21afc:	cmpeq	r0, r2
   21b00:	beq	21b1c <_start@@Base+0xd51c>
   21b04:	mov	r2, r9
   21b08:	mov	r1, r8
   21b0c:	mov	r0, sl
   21b10:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21b14:	mov	r8, r0
   21b18:	b	21804 <_start@@Base+0xd204>
   21b1c:	mov	r3, #8
   21b20:	mov	r2, r9
   21b24:	mov	r1, r8
   21b28:	mov	r0, sl
   21b2c:	bl	19da4 <_start@@Base+0x57a4>
   21b30:	mov	r4, r0
   21b34:	cmp	r8, r0
   21b38:	beq	21bec <_start@@Base+0xd5ec>
   21b3c:	mov	r3, #0
   21b40:	str	r3, [sp, #368]	; 0x170
   21b44:	add	r3, sp, #368	; 0x170
   21b48:	mov	r2, r9
   21b4c:	mov	r1, r0
   21b50:	mov	r0, sl
   21b54:	bl	17cb0 <_start@@Base+0x36b0>
   21b58:	mov	r8, r0
   21b5c:	cmp	r4, r0
   21b60:	beq	21ba4 <_start@@Base+0xd5a4>
   21b64:	ldr	r3, [sp, #368]	; 0x170
   21b68:	cmp	r3, #0
   21b6c:	bne	21b7c <_start@@Base+0xd57c>
   21b70:	ldr	r3, [sl, #8]
   21b74:	tst	r3, #2
   21b78:	beq	21804 <_start@@Base+0xd204>
   21b7c:	mov	r3, #4
   21b80:	mov	r2, r3
   21b84:	mov	r1, #16
   21b88:	ldr	r0, [sl]
   21b8c:	bl	28c78 <flatcc_builder_table_add@@Base>
   21b90:	cmp	r0, #0
   21b94:	beq	21bd4 <_start@@Base+0xd5d4>
   21b98:	ldr	r3, [sp, #368]	; 0x170
   21b9c:	str	r3, [r0]
   21ba0:	b	21804 <_start@@Base+0xd204>
   21ba4:	add	r3, sp, #368	; 0x170
   21ba8:	str	r3, [sp]
   21bac:	ldr	r3, [pc, #652]	; 21e40 <_start@@Base+0xd840>
   21bb0:	mov	r2, r9
   21bb4:	mov	r1, r0
   21bb8:	mov	r0, sl
   21bbc:	bl	18ad8 <_start@@Base+0x44d8>
   21bc0:	cmp	r9, r0
   21bc4:	cmpne	r8, r0
   21bc8:	beq	21be4 <_start@@Base+0xd5e4>
   21bcc:	mov	r8, r0
   21bd0:	b	21b64 <_start@@Base+0xd564>
   21bd4:	mov	fp, sl
   21bd8:	mov	r0, r8
   21bdc:	mov	r8, r0
   21be0:	b	1df34 <_start@@Base+0x9934>
   21be4:	mov	fp, sl
   21be8:	b	21bdc <_start@@Base+0xd5dc>
   21bec:	add	r4, r0, #8
   21bf0:	mov	r1, r9
   21bf4:	mov	r0, r4
   21bf8:	bl	146f0 <_start@@Base+0xf0>
   21bfc:	mov	r3, #0
   21c00:	str	r3, [sp, #312]	; 0x138
   21c04:	and	r3, r1, #-16777216	; 0xff000000
   21c08:	str	r3, [sp, #316]	; 0x13c
   21c0c:	add	r3, sp, #312	; 0x138
   21c10:	ldrd	r2, [r3]
   21c14:	cmp	r3, #1627389952	; 0x61000000
   21c18:	cmpeq	r2, #0
   21c1c:	beq	21c38 <_start@@Base+0xd638>
   21c20:	mov	r2, r9
   21c24:	mov	r1, r4
   21c28:	mov	r0, sl
   21c2c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21c30:	mov	r8, r0
   21c34:	b	21804 <_start@@Base+0xd204>
   21c38:	mov	r3, #1
   21c3c:	mov	r2, r9
   21c40:	mov	r1, r4
   21c44:	mov	r0, sl
   21c48:	bl	19da4 <_start@@Base+0x57a4>
   21c4c:	mov	r5, r0
   21c50:	cmp	r4, r0
   21c54:	beq	21d08 <_start@@Base+0xd708>
   21c58:	mov	r3, #0
   21c5c:	str	r3, [sp, #368]	; 0x170
   21c60:	add	r3, sp, #368	; 0x170
   21c64:	mov	r2, r9
   21c68:	mov	r1, r0
   21c6c:	mov	r0, sl
   21c70:	bl	17cb0 <_start@@Base+0x36b0>
   21c74:	mov	r8, r0
   21c78:	cmp	r5, r0
   21c7c:	beq	21cc0 <_start@@Base+0xd6c0>
   21c80:	ldr	r3, [sp, #368]	; 0x170
   21c84:	cmp	r3, #0
   21c88:	bne	21c98 <_start@@Base+0xd698>
   21c8c:	ldr	r3, [sl, #8]
   21c90:	tst	r3, #2
   21c94:	beq	21804 <_start@@Base+0xd204>
   21c98:	mov	r3, #4
   21c9c:	mov	r2, r3
   21ca0:	mov	r1, #20
   21ca4:	ldr	r0, [sl]
   21ca8:	bl	28c78 <flatcc_builder_table_add@@Base>
   21cac:	cmp	r0, #0
   21cb0:	beq	21cf0 <_start@@Base+0xd6f0>
   21cb4:	ldr	r3, [sp, #368]	; 0x170
   21cb8:	str	r3, [r0]
   21cbc:	b	21804 <_start@@Base+0xd204>
   21cc0:	add	r3, sp, #368	; 0x170
   21cc4:	str	r3, [sp]
   21cc8:	ldr	r3, [pc, #372]	; 21e44 <_start@@Base+0xd844>
   21ccc:	mov	r2, r9
   21cd0:	mov	r1, r0
   21cd4:	mov	r0, sl
   21cd8:	bl	18ad8 <_start@@Base+0x44d8>
   21cdc:	cmp	r9, r0
   21ce0:	cmpne	r8, r0
   21ce4:	beq	21d00 <_start@@Base+0xd700>
   21ce8:	mov	r8, r0
   21cec:	b	21c80 <_start@@Base+0xd680>
   21cf0:	mov	fp, sl
   21cf4:	mov	r0, r8
   21cf8:	mov	r8, r0
   21cfc:	b	1df34 <_start@@Base+0x9934>
   21d00:	mov	fp, sl
   21d04:	b	21cf8 <_start@@Base+0xd6f8>
   21d08:	mov	r2, r9
   21d0c:	mov	r1, r0
   21d10:	mov	r0, sl
   21d14:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21d18:	mov	r8, r0
   21d1c:	b	21804 <_start@@Base+0xd204>
   21d20:	add	r3, pc, #264	; 0x108
   21d24:	ldrd	r2, [r3]
   21d28:	cmp	r1, r3
   21d2c:	cmpeq	r0, r2
   21d30:	bhi	21fdc <_start@@Base+0xd9dc>
   21d34:	add	r3, pc, #252	; 0xfc
   21d38:	ldrd	r2, [r3]
   21d3c:	cmp	r1, r3
   21d40:	cmpeq	r0, r2
   21d44:	beq	21d60 <_start@@Base+0xd760>
   21d48:	mov	r2, r9
   21d4c:	mov	r1, r8
   21d50:	mov	r0, sl
   21d54:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21d58:	mov	r8, r0
   21d5c:	b	21804 <_start@@Base+0xd204>
   21d60:	mov	r3, #8
   21d64:	mov	r2, r9
   21d68:	mov	r1, r8
   21d6c:	mov	r0, sl
   21d70:	bl	19da4 <_start@@Base+0x57a4>
   21d74:	mov	r4, r0
   21d78:	cmp	r8, r0
   21d7c:	beq	21e98 <_start@@Base+0xd898>
   21d80:	mov	r2, #0
   21d84:	mov	r3, #0
   21d88:	add	r1, sp, #368	; 0x170
   21d8c:	strd	r2, [r1]
   21d90:	mov	r3, r1
   21d94:	mov	r2, r9
   21d98:	mov	r1, r0
   21d9c:	mov	r0, sl
   21da0:	bl	17fc0 <_start@@Base+0x39c0>
   21da4:	mov	r8, r0
   21da8:	cmp	r4, r0
   21dac:	beq	21e50 <_start@@Base+0xd850>
   21db0:	add	r3, sp, #368	; 0x170
   21db4:	ldrd	r2, [r3]
   21db8:	orrs	r3, r2, r3
   21dbc:	bne	21dcc <_start@@Base+0xd7cc>
   21dc0:	ldr	r3, [sl, #8]
   21dc4:	tst	r3, #2
   21dc8:	beq	21804 <_start@@Base+0xd204>
   21dcc:	mov	r3, #8
   21dd0:	mov	r2, r3
   21dd4:	mov	r1, #18
   21dd8:	ldr	r0, [sl]
   21ddc:	bl	28c78 <flatcc_builder_table_add@@Base>
   21de0:	cmp	r0, #0
   21de4:	beq	21e80 <_start@@Base+0xd880>
   21de8:	add	r3, sp, #368	; 0x170
   21dec:	ldrd	r2, [r3]
   21df0:	strd	r2, [r0]
   21df4:	b	21804 <_start@@Base+0xd204>
   21df8:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   21dfc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21e00:	svcvs	0x00725f6e
   21e04:			; <UNDEFINED> instruction: 0x76656374
   21e08:	mcrvs	3, 3, r7, cr5, cr4, {3}
   21e0c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21e10:	cmnvs	r4, r5, ror r2
   21e14:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   21e18:	andeq	r0, r0, r0
   21e1c:			; <UNDEFINED> instruction: 0x66666572
   21e20:			; <UNDEFINED> instruction: 0x666e7630
   21e24:	teqvc	r6, #1593835520	; 0x5f000000
   21e28:			; <UNDEFINED> instruction: 0x666e7631
   21e2c:	teqvc	r3, #-268435451	; 0xf0000005
   21e30:			; <UNDEFINED> instruction: 0x666e7630
   21e34:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   21e38:			; <UNDEFINED> instruction: 0x666e7631
   21e3c:	teqvc	r6, #1593835520	; 0x5f000000
   21e40:	andeq	r4, r5, r0, lsl #5
   21e44:	andeq	r4, r5, ip, lsl #5
   21e48:	muleq	r5, r8, r2
   21e4c:	andeq	r4, r5, r4, lsr #5
   21e50:	add	r3, sp, #368	; 0x170
   21e54:	str	r3, [sp]
   21e58:	ldr	r3, [pc, #-24]	; 21e48 <_start@@Base+0xd848>
   21e5c:	mov	r2, r9
   21e60:	mov	r1, r0
   21e64:	mov	r0, sl
   21e68:	bl	180ec <_start@@Base+0x3aec>
   21e6c:	cmp	r9, r0
   21e70:	cmpne	r8, r0
   21e74:	beq	21e90 <_start@@Base+0xd890>
   21e78:	mov	r8, r0
   21e7c:	b	21db0 <_start@@Base+0xd7b0>
   21e80:	mov	fp, sl
   21e84:	mov	r0, r8
   21e88:	mov	r8, r0
   21e8c:	b	1df34 <_start@@Base+0x9934>
   21e90:	mov	fp, sl
   21e94:	b	21e88 <_start@@Base+0xd888>
   21e98:	add	r4, r0, #8
   21e9c:	mov	r1, r9
   21ea0:	mov	r0, r4
   21ea4:	bl	146f0 <_start@@Base+0xf0>
   21ea8:	mov	r3, #0
   21eac:	str	r3, [sp, #320]	; 0x140
   21eb0:	and	r3, r1, #-16777216	; 0xff000000
   21eb4:	str	r3, [sp, #324]	; 0x144
   21eb8:	add	r3, sp, #320	; 0x140
   21ebc:	ldrd	r2, [r3]
   21ec0:	cmp	r3, #1627389952	; 0x61000000
   21ec4:	cmpeq	r2, #0
   21ec8:	beq	21ee4 <_start@@Base+0xd8e4>
   21ecc:	mov	r2, r9
   21ed0:	mov	r1, r4
   21ed4:	mov	r0, sl
   21ed8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21edc:	mov	r8, r0
   21ee0:	b	21804 <_start@@Base+0xd204>
   21ee4:	mov	r3, #1
   21ee8:	mov	r2, r9
   21eec:	mov	r1, r4
   21ef0:	mov	r0, sl
   21ef4:	bl	19da4 <_start@@Base+0x57a4>
   21ef8:	mov	r5, r0
   21efc:	cmp	r4, r0
   21f00:	beq	21fc4 <_start@@Base+0xd9c4>
   21f04:	mov	r2, #0
   21f08:	mov	r3, #0
   21f0c:	add	r1, sp, #368	; 0x170
   21f10:	strd	r2, [r1]
   21f14:	mov	r3, r1
   21f18:	mov	r2, r9
   21f1c:	mov	r1, r0
   21f20:	mov	r0, sl
   21f24:	bl	17fc0 <_start@@Base+0x39c0>
   21f28:	mov	r8, r0
   21f2c:	cmp	r5, r0
   21f30:	beq	21f7c <_start@@Base+0xd97c>
   21f34:	add	r3, sp, #368	; 0x170
   21f38:	ldrd	r2, [r3]
   21f3c:	orrs	r3, r2, r3
   21f40:	bne	21f50 <_start@@Base+0xd950>
   21f44:	ldr	r3, [sl, #8]
   21f48:	tst	r3, #2
   21f4c:	beq	21804 <_start@@Base+0xd204>
   21f50:	mov	r3, #8
   21f54:	mov	r2, r3
   21f58:	mov	r1, #22
   21f5c:	ldr	r0, [sl]
   21f60:	bl	28c78 <flatcc_builder_table_add@@Base>
   21f64:	cmp	r0, #0
   21f68:	beq	21fac <_start@@Base+0xd9ac>
   21f6c:	add	r3, sp, #368	; 0x170
   21f70:	ldrd	r2, [r3]
   21f74:	strd	r2, [r0]
   21f78:	b	21804 <_start@@Base+0xd204>
   21f7c:	add	r3, sp, #368	; 0x170
   21f80:	str	r3, [sp]
   21f84:	ldr	r3, [pc, #-320]	; 21e4c <_start@@Base+0xd84c>
   21f88:	mov	r2, r9
   21f8c:	mov	r1, r0
   21f90:	mov	r0, sl
   21f94:	bl	180ec <_start@@Base+0x3aec>
   21f98:	cmp	r9, r0
   21f9c:	cmpne	r8, r0
   21fa0:	beq	21fbc <_start@@Base+0xd9bc>
   21fa4:	mov	r8, r0
   21fa8:	b	21f34 <_start@@Base+0xd934>
   21fac:	mov	fp, sl
   21fb0:	mov	r0, r8
   21fb4:	mov	r8, r0
   21fb8:	b	1df34 <_start@@Base+0x9934>
   21fbc:	mov	fp, sl
   21fc0:	b	21fb4 <_start@@Base+0xd9b4>
   21fc4:	mov	r2, r9
   21fc8:	mov	r1, r0
   21fcc:	mov	r0, sl
   21fd0:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   21fd4:	mov	r8, r0
   21fd8:	b	21804 <_start@@Base+0xd204>
   21fdc:	add	r3, pc, #876	; 0x36c
   21fe0:	ldrd	r2, [r3]
   21fe4:	cmp	r1, r3
   21fe8:	cmpeq	r0, r2
   21fec:	beq	2201c <_start@@Base+0xda1c>
   21ff0:	add	r3, pc, #864	; 0x360
   21ff4:	ldrd	r2, [r3]
   21ff8:	cmp	r1, r3
   21ffc:	cmpeq	r0, r2
   22000:	beq	22220 <_start@@Base+0xdc20>
   22004:	mov	r2, r9
   22008:	mov	r1, r8
   2200c:	mov	r0, sl
   22010:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22014:	mov	r8, r0
   22018:	b	21804 <_start@@Base+0xd204>
   2201c:	mov	r3, #8
   22020:	mov	r2, r9
   22024:	mov	r1, r8
   22028:	mov	r0, sl
   2202c:	bl	19da4 <_start@@Base+0x57a4>
   22030:	mov	r4, r0
   22034:	cmp	r8, r0
   22038:	beq	220ec <_start@@Base+0xdaec>
   2203c:	mov	r3, #0
   22040:	str	r3, [sp, #368]	; 0x170
   22044:	add	r3, sp, #368	; 0x170
   22048:	mov	r2, r9
   2204c:	mov	r1, r0
   22050:	mov	r0, sl
   22054:	bl	17d94 <_start@@Base+0x3794>
   22058:	mov	r8, r0
   2205c:	cmp	r4, r0
   22060:	beq	220a4 <_start@@Base+0xdaa4>
   22064:	ldr	r3, [sp, #368]	; 0x170
   22068:	cmp	r3, #0
   2206c:	bne	2207c <_start@@Base+0xda7c>
   22070:	ldr	r3, [sl, #8]
   22074:	tst	r3, #2
   22078:	beq	21804 <_start@@Base+0xd204>
   2207c:	mov	r3, #4
   22080:	mov	r2, r3
   22084:	mov	r1, #17
   22088:	ldr	r0, [sl]
   2208c:	bl	28c78 <flatcc_builder_table_add@@Base>
   22090:	cmp	r0, #0
   22094:	beq	220d4 <_start@@Base+0xdad4>
   22098:	ldr	r3, [sp, #368]	; 0x170
   2209c:	str	r3, [r0]
   220a0:	b	21804 <_start@@Base+0xd204>
   220a4:	add	r3, sp, #368	; 0x170
   220a8:	str	r3, [sp]
   220ac:	ldr	r3, [pc, #684]	; 22360 <_start@@Base+0xdd60>
   220b0:	mov	r2, r9
   220b4:	mov	r1, r0
   220b8:	mov	r0, sl
   220bc:	bl	18cb0 <_start@@Base+0x46b0>
   220c0:	cmp	r9, r0
   220c4:	cmpne	r8, r0
   220c8:	beq	220e4 <_start@@Base+0xdae4>
   220cc:	mov	r8, r0
   220d0:	b	22064 <_start@@Base+0xda64>
   220d4:	mov	fp, sl
   220d8:	mov	r0, r8
   220dc:	mov	r8, r0
   220e0:	b	1df34 <_start@@Base+0x9934>
   220e4:	mov	fp, sl
   220e8:	b	220dc <_start@@Base+0xdadc>
   220ec:	add	r4, r0, #8
   220f0:	mov	r1, r9
   220f4:	mov	r0, r4
   220f8:	bl	146f0 <_start@@Base+0xf0>
   220fc:	mov	r3, #0
   22100:	str	r3, [sp, #328]	; 0x148
   22104:	and	r3, r1, #-16777216	; 0xff000000
   22108:	str	r3, [sp, #332]	; 0x14c
   2210c:	add	r3, sp, #328	; 0x148
   22110:	ldrd	r2, [r3]
   22114:	cmp	r3, #1627389952	; 0x61000000
   22118:	cmpeq	r2, #0
   2211c:	beq	22138 <_start@@Base+0xdb38>
   22120:	mov	r2, r9
   22124:	mov	r1, r4
   22128:	mov	r0, sl
   2212c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22130:	mov	r8, r0
   22134:	b	21804 <_start@@Base+0xd204>
   22138:	mov	r3, #1
   2213c:	mov	r2, r9
   22140:	mov	r1, r4
   22144:	mov	r0, sl
   22148:	bl	19da4 <_start@@Base+0x57a4>
   2214c:	mov	r5, r0
   22150:	cmp	r4, r0
   22154:	beq	22208 <_start@@Base+0xdc08>
   22158:	mov	r3, #0
   2215c:	str	r3, [sp, #368]	; 0x170
   22160:	add	r3, sp, #368	; 0x170
   22164:	mov	r2, r9
   22168:	mov	r1, r0
   2216c:	mov	r0, sl
   22170:	bl	17d94 <_start@@Base+0x3794>
   22174:	mov	r8, r0
   22178:	cmp	r5, r0
   2217c:	beq	221c0 <_start@@Base+0xdbc0>
   22180:	ldr	r3, [sp, #368]	; 0x170
   22184:	cmp	r3, #0
   22188:	bne	22198 <_start@@Base+0xdb98>
   2218c:	ldr	r3, [sl, #8]
   22190:	tst	r3, #2
   22194:	beq	21804 <_start@@Base+0xd204>
   22198:	mov	r3, #4
   2219c:	mov	r2, r3
   221a0:	mov	r1, #21
   221a4:	ldr	r0, [sl]
   221a8:	bl	28c78 <flatcc_builder_table_add@@Base>
   221ac:	cmp	r0, #0
   221b0:	beq	221f0 <_start@@Base+0xdbf0>
   221b4:	ldr	r3, [sp, #368]	; 0x170
   221b8:	str	r3, [r0]
   221bc:	b	21804 <_start@@Base+0xd204>
   221c0:	add	r3, sp, #368	; 0x170
   221c4:	str	r3, [sp]
   221c8:	ldr	r3, [pc, #404]	; 22364 <_start@@Base+0xdd64>
   221cc:	mov	r2, r9
   221d0:	mov	r1, r0
   221d4:	mov	r0, sl
   221d8:	bl	18cb0 <_start@@Base+0x46b0>
   221dc:	cmp	r9, r0
   221e0:	cmpne	r8, r0
   221e4:	beq	22200 <_start@@Base+0xdc00>
   221e8:	mov	r8, r0
   221ec:	b	22180 <_start@@Base+0xdb80>
   221f0:	mov	fp, sl
   221f4:	mov	r0, r8
   221f8:	mov	r8, r0
   221fc:	b	1df34 <_start@@Base+0x9934>
   22200:	mov	fp, sl
   22204:	b	221f8 <_start@@Base+0xdbf8>
   22208:	mov	r2, r9
   2220c:	mov	r1, r0
   22210:	mov	r0, sl
   22214:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22218:	mov	r8, r0
   2221c:	b	21804 <_start@@Base+0xd204>
   22220:	mov	r3, #8
   22224:	mov	r2, r9
   22228:	mov	r1, r8
   2222c:	mov	r0, sl
   22230:	bl	19da4 <_start@@Base+0x57a4>
   22234:	mov	r4, r0
   22238:	cmp	r8, r0
   2223c:	beq	22300 <_start@@Base+0xdd00>
   22240:	mov	r2, #0
   22244:	mov	r3, #0
   22248:	add	r1, sp, #368	; 0x170
   2224c:	strd	r2, [r1]
   22250:	mov	r3, r1
   22254:	mov	r2, r9
   22258:	mov	r1, r0
   2225c:	mov	r0, sl
   22260:	bl	17e64 <_start@@Base+0x3864>
   22264:	mov	r8, r0
   22268:	cmp	r4, r0
   2226c:	beq	222b8 <_start@@Base+0xdcb8>
   22270:	add	r3, sp, #368	; 0x170
   22274:	ldrd	r2, [r3]
   22278:	orrs	r3, r2, r3
   2227c:	bne	2228c <_start@@Base+0xdc8c>
   22280:	ldr	r3, [sl, #8]
   22284:	tst	r3, #2
   22288:	beq	21804 <_start@@Base+0xd204>
   2228c:	mov	r3, #8
   22290:	mov	r2, r3
   22294:	mov	r1, #19
   22298:	ldr	r0, [sl]
   2229c:	bl	28c78 <flatcc_builder_table_add@@Base>
   222a0:	cmp	r0, #0
   222a4:	beq	222e8 <_start@@Base+0xdce8>
   222a8:	add	r3, sp, #368	; 0x170
   222ac:	ldrd	r2, [r3]
   222b0:	strd	r2, [r0]
   222b4:	b	21804 <_start@@Base+0xd204>
   222b8:	add	r3, sp, #368	; 0x170
   222bc:	str	r3, [sp]
   222c0:	ldr	r3, [pc, #160]	; 22368 <_start@@Base+0xdd68>
   222c4:	mov	r2, r9
   222c8:	mov	r1, r0
   222cc:	mov	r0, sl
   222d0:	bl	193d8 <_start@@Base+0x4dd8>
   222d4:	cmp	r9, r0
   222d8:	cmpne	r8, r0
   222dc:	beq	222f8 <_start@@Base+0xdcf8>
   222e0:	mov	r8, r0
   222e4:	b	22270 <_start@@Base+0xdc70>
   222e8:	mov	fp, sl
   222ec:	mov	r0, r8
   222f0:	mov	r8, r0
   222f4:	b	1df34 <_start@@Base+0x9934>
   222f8:	mov	fp, sl
   222fc:	b	222f0 <_start@@Base+0xdcf0>
   22300:	add	r4, r0, #8
   22304:	mov	r1, r9
   22308:	mov	r0, r4
   2230c:	bl	146f0 <_start@@Base+0xf0>
   22310:	mov	r3, #0
   22314:	str	r3, [sp, #336]	; 0x150
   22318:	and	r3, r1, #-16777216	; 0xff000000
   2231c:	str	r3, [sp, #340]	; 0x154
   22320:	add	r3, sp, #336	; 0x150
   22324:	ldrd	r2, [r3]
   22328:	cmp	r3, #1627389952	; 0x61000000
   2232c:	cmpeq	r2, #0
   22330:	beq	22374 <_start@@Base+0xdd74>
   22334:	mov	r2, r9
   22338:	mov	r1, r4
   2233c:	mov	r0, sl
   22340:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22344:	mov	r8, r0
   22348:	b	21804 <_start@@Base+0xd204>
   2234c:	nop	{0}
   22350:			; <UNDEFINED> instruction: 0x666e7631
   22354:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   22358:			; <UNDEFINED> instruction: 0x666e7631
   2235c:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   22360:			; <UNDEFINED> instruction: 0x000542b0
   22364:			; <UNDEFINED> instruction: 0x000542bc
   22368:	andeq	r4, r5, r8, asr #5
   2236c:	ldrdeq	r4, [r5], -r4	; <UNPREDICTABLE>
   22370:	andeq	r4, r5, r0, ror #5
   22374:	mov	r3, #1
   22378:	mov	r2, r9
   2237c:	mov	r1, r4
   22380:	mov	r0, sl
   22384:	bl	19da4 <_start@@Base+0x57a4>
   22388:	mov	r5, r0
   2238c:	cmp	r4, r0
   22390:	beq	22454 <_start@@Base+0xde54>
   22394:	mov	r2, #0
   22398:	mov	r3, #0
   2239c:	add	r1, sp, #368	; 0x170
   223a0:	strd	r2, [r1]
   223a4:	mov	r3, r1
   223a8:	mov	r2, r9
   223ac:	mov	r1, r0
   223b0:	mov	r0, sl
   223b4:	bl	17e64 <_start@@Base+0x3864>
   223b8:	mov	r8, r0
   223bc:	cmp	r5, r0
   223c0:	beq	2240c <_start@@Base+0xde0c>
   223c4:	add	r3, sp, #368	; 0x170
   223c8:	ldrd	r2, [r3]
   223cc:	orrs	r3, r2, r3
   223d0:	bne	223e0 <_start@@Base+0xdde0>
   223d4:	ldr	r3, [sl, #8]
   223d8:	tst	r3, #2
   223dc:	beq	21804 <_start@@Base+0xd204>
   223e0:	mov	r3, #8
   223e4:	mov	r2, r3
   223e8:	mov	r1, #23
   223ec:	ldr	r0, [sl]
   223f0:	bl	28c78 <flatcc_builder_table_add@@Base>
   223f4:	cmp	r0, #0
   223f8:	beq	2243c <_start@@Base+0xde3c>
   223fc:	add	r3, sp, #368	; 0x170
   22400:	ldrd	r2, [r3]
   22404:	strd	r2, [r0]
   22408:	b	21804 <_start@@Base+0xd204>
   2240c:	add	r3, sp, #368	; 0x170
   22410:	str	r3, [sp]
   22414:	ldr	r3, [pc, #-176]	; 2236c <_start@@Base+0xdd6c>
   22418:	mov	r2, r9
   2241c:	mov	r1, r0
   22420:	mov	r0, sl
   22424:	bl	193d8 <_start@@Base+0x4dd8>
   22428:	cmp	r9, r0
   2242c:	cmpne	r8, r0
   22430:	beq	2244c <_start@@Base+0xde4c>
   22434:	mov	r8, r0
   22438:	b	223c4 <_start@@Base+0xddc4>
   2243c:	mov	fp, sl
   22440:	mov	r0, r8
   22444:	mov	r8, r0
   22448:	b	1df34 <_start@@Base+0x9934>
   2244c:	mov	fp, sl
   22450:	b	22444 <_start@@Base+0xde44>
   22454:	mov	r2, r9
   22458:	mov	r1, r0
   2245c:	mov	r0, sl
   22460:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22464:	mov	r8, r0
   22468:	b	21804 <_start@@Base+0xd204>
   2246c:	mov	r3, #4
   22470:	mov	r2, r9
   22474:	mov	r1, r4
   22478:	mov	r0, sl
   2247c:	bl	19da4 <_start@@Base+0x57a4>
   22480:	mov	r8, r0
   22484:	cmp	r4, r0
   22488:	beq	22608 <_start@@Base+0xe008>
   2248c:	cmp	r9, r0
   22490:	beq	224a0 <_start@@Base+0xdea0>
   22494:	ldrb	r3, [r0]
   22498:	cmp	r3, #91	; 0x5b
   2249c:	beq	22518 <_start@@Base+0xdf18>
   224a0:	mov	r3, #0
   224a4:	mov	r2, r3
   224a8:	mov	r1, r3
   224ac:	ldr	r0, [sl]
   224b0:	bl	260f4 <flatcc_builder_start_buffer@@Base>
   224b4:	cmp	r0, #0
   224b8:	bne	22c44 <_start@@Base+0xe644>
   224bc:	add	r3, sp, #384	; 0x180
   224c0:	mov	r2, r9
   224c4:	mov	r1, r8
   224c8:	mov	r0, sl
   224cc:	bl	1dee8 <_start@@Base+0x98e8>
   224d0:	mov	r8, r0
   224d4:	ldr	r1, [sp, #384]	; 0x180
   224d8:	cmp	r1, #0
   224dc:	beq	22c4c <_start@@Base+0xe64c>
   224e0:	ldr	r0, [sl]
   224e4:	bl	261c8 <flatcc_builder_end_buffer@@Base>
   224e8:	str	r0, [sp, #384]	; 0x180
   224ec:	ldr	r3, [sp, #384]	; 0x180
   224f0:	cmp	r3, #0
   224f4:	beq	22c54 <_start@@Base+0xe654>
   224f8:	mov	r1, #13
   224fc:	ldr	r0, [sl]
   22500:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   22504:	cmp	r0, #0
   22508:	beq	22c5c <_start@@Base+0xe65c>
   2250c:	ldr	r3, [sp, #384]	; 0x180
   22510:	str	r3, [r0]
   22514:	b	21804 <_start@@Base+0xd204>
   22518:	mvn	r3, #0
   2251c:	mov	r2, #1
   22520:	mov	r1, r2
   22524:	ldr	r0, [sl]
   22528:	bl	26dbc <flatcc_builder_start_vector@@Base>
   2252c:	cmp	r0, #0
   22530:	bne	22c34 <_start@@Base+0xe634>
   22534:	add	r3, sp, #388	; 0x184
   22538:	mov	r2, r9
   2253c:	mov	r1, r8
   22540:	mov	r0, sl
   22544:	bl	19598 <_start@@Base+0x4f98>
   22548:	mov	r8, r0
   2254c:	ldr	r3, [sp, #388]	; 0x184
   22550:	cmp	r3, #0
   22554:	beq	225f8 <_start@@Base+0xdff8>
   22558:	mov	r5, #0
   2255c:	ldr	fp, [pc, #-500]	; 22370 <_start@@Base+0xdd70>
   22560:	b	22590 <_start@@Base+0xdf90>
   22564:	ldrb	r3, [sp, #368]	; 0x170
   22568:	strb	r3, [r4]
   2256c:	add	r3, sp, #388	; 0x184
   22570:	mov	r2, r9
   22574:	mov	r1, r0
   22578:	mov	r0, sl
   2257c:	bl	1dd8c <_start@@Base+0x978c>
   22580:	mov	r8, r0
   22584:	ldr	r3, [sp, #388]	; 0x184
   22588:	cmp	r3, #0
   2258c:	beq	225f8 <_start@@Base+0xdff8>
   22590:	strb	r5, [sp, #368]	; 0x170
   22594:	mov	r1, #1
   22598:	ldr	r0, [sl]
   2259c:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   225a0:	subs	r4, r0, #0
   225a4:	beq	22c3c <_start@@Base+0xe63c>
   225a8:	add	r3, sp, #368	; 0x170
   225ac:	mov	r2, r9
   225b0:	mov	r1, r8
   225b4:	mov	r0, sl
   225b8:	bl	17f00 <_start@@Base+0x3900>
   225bc:	cmp	r0, r8
   225c0:	bne	22564 <_start@@Base+0xdf64>
   225c4:	add	r3, sp, #368	; 0x170
   225c8:	str	r3, [sp]
   225cc:	mov	r3, fp
   225d0:	mov	r2, r9
   225d4:	mov	r1, r8
   225d8:	mov	r0, sl
   225dc:	bl	18e7c <_start@@Base+0x487c>
   225e0:	cmp	r9, r0
   225e4:	cmpne	r0, r8
   225e8:	bne	22564 <_start@@Base+0xdf64>
   225ec:	mov	fp, sl
   225f0:	mov	r8, r0
   225f4:	b	1df34 <_start@@Base+0x9934>
   225f8:	ldr	r0, [sl]
   225fc:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   22600:	str	r0, [sp, #384]	; 0x180
   22604:	b	224ec <_start@@Base+0xdeec>
   22608:	mov	r2, r9
   2260c:	mov	r1, r0
   22610:	mov	r0, sl
   22614:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22618:	mov	r8, r0
   2261c:	b	21804 <_start@@Base+0xd204>
   22620:	mov	r2, r9
   22624:	mov	r1, r4
   22628:	mov	r0, sl
   2262c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22630:	mov	r8, r0
   22634:	b	21804 <_start@@Base+0xd204>
   22638:	mov	r2, r9
   2263c:	mov	r1, r8
   22640:	mov	r0, sl
   22644:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22648:	mov	r8, r0
   2264c:	b	21804 <_start@@Base+0xd204>
   22650:	add	r3, pc, #984	; 0x3d8
   22654:	ldrd	r2, [r3]
   22658:	cmp	r1, r3
   2265c:	cmpeq	r0, r2
   22660:	bne	229b8 <_start@@Base+0xe3b8>
   22664:	add	r4, r8, #8
   22668:	mov	r1, r9
   2266c:	mov	r0, r4
   22670:	bl	146f0 <_start@@Base+0xf0>
   22674:	add	r3, pc, #956	; 0x3bc
   22678:	ldrd	r2, [r3]
   2267c:	cmp	r1, r3
   22680:	cmpeq	r0, r2
   22684:	beq	226c4 <_start@@Base+0xe0c4>
   22688:	bic	r3, r0, #255	; 0xff
   2268c:	str	r3, [sp, #248]	; 0xf8
   22690:	str	r1, [sp, #252]	; 0xfc
   22694:	add	r3, pc, #932	; 0x3a4
   22698:	ldrd	r2, [r3]
   2269c:	ldrd	r0, [sp, #248]	; 0xf8
   226a0:	cmp	r1, r3
   226a4:	cmpeq	r0, r2
   226a8:	beq	22860 <_start@@Base+0xe260>
   226ac:	mov	r2, r9
   226b0:	mov	r1, r4
   226b4:	mov	r0, sl
   226b8:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   226bc:	mov	r8, r0
   226c0:	b	21804 <_start@@Base+0xd204>
   226c4:	add	r4, r8, #16
   226c8:	mov	r1, r9
   226cc:	mov	r0, r4
   226d0:	bl	146f0 <_start@@Base+0xf0>
   226d4:	mov	r3, #0
   226d8:	str	r3, [sp, #296]	; 0x128
   226dc:	and	r3, r1, #-16777216	; 0xff000000
   226e0:	str	r3, [sp, #300]	; 0x12c
   226e4:	add	r3, sp, #296	; 0x128
   226e8:	ldrd	r2, [r3]
   226ec:	cmp	r3, #1929379840	; 0x73000000
   226f0:	cmpeq	r2, #0
   226f4:	beq	22710 <_start@@Base+0xe110>
   226f8:	mov	r2, r9
   226fc:	mov	r1, r4
   22700:	mov	r0, sl
   22704:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22708:	mov	r8, r0
   2270c:	b	21804 <_start@@Base+0xd204>
   22710:	mov	r3, #1
   22714:	mov	r2, r9
   22718:	mov	r1, r4
   2271c:	mov	r0, sl
   22720:	bl	19da4 <_start@@Base+0x57a4>
   22724:	mov	r8, r0
   22728:	cmp	r4, r0
   2272c:	bne	22748 <_start@@Base+0xe148>
   22730:	mov	r2, r9
   22734:	mov	r1, r0
   22738:	mov	r0, sl
   2273c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22740:	mov	r8, r0
   22744:	b	21804 <_start@@Base+0xd204>
   22748:	mvn	r3, #-536870912	; 0xe0000000
   2274c:	mov	r2, #8
   22750:	mov	r1, r2
   22754:	ldr	r0, [sl]
   22758:	bl	26dbc <flatcc_builder_start_vector@@Base>
   2275c:	cmp	r0, #0
   22760:	bne	22c64 <_start@@Base+0xe664>
   22764:	add	r3, sp, #388	; 0x184
   22768:	mov	r2, r9
   2276c:	mov	r1, r8
   22770:	mov	r0, sl
   22774:	bl	19598 <_start@@Base+0x4f98>
   22778:	mov	r8, r0
   2277c:	ldr	r3, [sp, #388]	; 0x184
   22780:	cmp	r3, #0
   22784:	beq	2282c <_start@@Base+0xe22c>
   22788:	vldr	d8, [pc, #696]	; 22a48 <_start@@Base+0xe448>
   2278c:	ldr	r5, [pc, #700]	; 22a50 <_start@@Base+0xe450>
   22790:	b	227c4 <_start@@Base+0xe1c4>
   22794:	add	r3, sp, #368	; 0x170
   22798:	ldrd	r2, [r3]
   2279c:	strd	r2, [r4]
   227a0:	add	r3, sp, #388	; 0x184
   227a4:	mov	r2, r9
   227a8:	mov	r1, r0
   227ac:	mov	r0, sl
   227b0:	bl	1dd8c <_start@@Base+0x978c>
   227b4:	mov	r8, r0
   227b8:	ldr	r3, [sp, #388]	; 0x184
   227bc:	cmp	r3, #0
   227c0:	beq	2282c <_start@@Base+0xe22c>
   227c4:	vstr	d8, [sp, #368]	; 0x170
   227c8:	mov	r1, #1
   227cc:	ldr	r0, [sl]
   227d0:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   227d4:	subs	r4, r0, #0
   227d8:	beq	22c6c <_start@@Base+0xe66c>
   227dc:	add	r3, sp, #368	; 0x170
   227e0:	mov	r2, r9
   227e4:	mov	r1, r8
   227e8:	mov	r0, sl
   227ec:	bl	2d578 <flatcc_json_parser_double@@Base>
   227f0:	cmp	r0, r8
   227f4:	bne	22794 <_start@@Base+0xe194>
   227f8:	add	r3, sp, #368	; 0x170
   227fc:	str	r3, [sp]
   22800:	mov	r3, r5
   22804:	mov	r2, r9
   22808:	mov	r1, r8
   2280c:	mov	r0, sl
   22810:	bl	18474 <_start@@Base+0x3e74>
   22814:	cmp	r9, r0
   22818:	cmpne	r0, r8
   2281c:	bne	22794 <_start@@Base+0xe194>
   22820:	mov	fp, sl
   22824:	mov	r8, r0
   22828:	b	1df34 <_start@@Base+0x9934>
   2282c:	ldr	r0, [sl]
   22830:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   22834:	str	r0, [sp, #384]	; 0x180
   22838:	cmp	r0, #0
   2283c:	beq	22c74 <_start@@Base+0xe674>
   22840:	mov	r1, #33	; 0x21
   22844:	ldr	r0, [sl]
   22848:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   2284c:	cmp	r0, #0
   22850:	beq	22c7c <_start@@Base+0xe67c>
   22854:	ldr	r3, [sp, #384]	; 0x180
   22858:	str	r3, [r0]
   2285c:	b	21804 <_start@@Base+0xd204>
   22860:	mov	r3, #7
   22864:	mov	r2, r9
   22868:	mov	r1, r4
   2286c:	mov	r0, sl
   22870:	bl	19da4 <_start@@Base+0x57a4>
   22874:	mov	r8, r0
   22878:	cmp	r4, r0
   2287c:	bne	22898 <_start@@Base+0xe298>
   22880:	mov	r2, r9
   22884:	mov	r1, r0
   22888:	mov	r0, sl
   2288c:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22890:	mov	r8, r0
   22894:	b	21804 <_start@@Base+0xd204>
   22898:	mvn	r3, #-536870912	; 0xe0000000
   2289c:	mov	r2, #8
   228a0:	mov	r1, r2
   228a4:	ldr	r0, [sl]
   228a8:	bl	26dbc <flatcc_builder_start_vector@@Base>
   228ac:	cmp	r0, #0
   228b0:	bne	22c84 <_start@@Base+0xe684>
   228b4:	add	r3, sp, #388	; 0x184
   228b8:	mov	r2, r9
   228bc:	mov	r1, r8
   228c0:	mov	r0, sl
   228c4:	bl	19598 <_start@@Base+0x4f98>
   228c8:	mov	r8, r0
   228cc:	ldr	r3, [sp, #388]	; 0x184
   228d0:	cmp	r3, #0
   228d4:	beq	22984 <_start@@Base+0xe384>
   228d8:	ldr	r5, [pc, #372]	; 22a54 <_start@@Base+0xe454>
   228dc:	b	22910 <_start@@Base+0xe310>
   228e0:	add	r3, sp, #368	; 0x170
   228e4:	ldrd	r2, [r3]
   228e8:	strd	r2, [r4]
   228ec:	add	r3, sp, #388	; 0x184
   228f0:	mov	r2, r9
   228f4:	mov	r1, r0
   228f8:	mov	r0, sl
   228fc:	bl	1dd8c <_start@@Base+0x978c>
   22900:	mov	r8, r0
   22904:	ldr	r3, [sp, #388]	; 0x184
   22908:	cmp	r3, #0
   2290c:	beq	22984 <_start@@Base+0xe384>
   22910:	mov	r2, #0
   22914:	mov	r3, #0
   22918:	add	r1, sp, #368	; 0x170
   2291c:	strd	r2, [r1]
   22920:	mov	r1, #1
   22924:	ldr	r0, [sl]
   22928:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   2292c:	subs	r4, r0, #0
   22930:	beq	22c8c <_start@@Base+0xe68c>
   22934:	add	r3, sp, #368	; 0x170
   22938:	mov	r2, r9
   2293c:	mov	r1, r8
   22940:	mov	r0, sl
   22944:	bl	17fc0 <_start@@Base+0x39c0>
   22948:	cmp	r0, r8
   2294c:	bne	228e0 <_start@@Base+0xe2e0>
   22950:	add	r3, sp, #368	; 0x170
   22954:	str	r3, [sp]
   22958:	mov	r3, r5
   2295c:	mov	r2, r9
   22960:	mov	r1, r8
   22964:	mov	r0, sl
   22968:	bl	180ec <_start@@Base+0x3aec>
   2296c:	cmp	r9, r0
   22970:	cmpne	r0, r8
   22974:	bne	228e0 <_start@@Base+0xe2e0>
   22978:	mov	fp, sl
   2297c:	mov	r8, r0
   22980:	b	1df34 <_start@@Base+0x9934>
   22984:	ldr	r0, [sl]
   22988:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   2298c:	str	r0, [sp, #384]	; 0x180
   22990:	cmp	r0, #0
   22994:	beq	22c94 <_start@@Base+0xe694>
   22998:	mov	r1, #32
   2299c:	ldr	r0, [sl]
   229a0:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   229a4:	cmp	r0, #0
   229a8:	beq	22c9c <_start@@Base+0xe69c>
   229ac:	ldr	r3, [sp, #384]	; 0x180
   229b0:	str	r3, [r0]
   229b4:	b	21804 <_start@@Base+0xd204>
   229b8:	mov	r2, r9
   229bc:	mov	r1, r8
   229c0:	mov	r0, sl
   229c4:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   229c8:	mov	r8, r0
   229cc:	b	21804 <_start@@Base+0xd204>
   229d0:	mov	fp, sl
   229d4:	ldr	r3, [fp, #20]
   229d8:	cmp	r3, #0
   229dc:	bne	1df34 <_start@@Base+0x9934>
   229e0:	mov	r1, #3
   229e4:	ldr	r0, [fp]
   229e8:	bl	279b8 <flatcc_builder_check_required_field@@Base>
   229ec:	cmp	r0, #0
   229f0:	beq	22a58 <_start@@Base+0xe458>
   229f4:	ldr	r3, [sp, #380]	; 0x17c
   229f8:	mov	r2, r9
   229fc:	mov	r1, r8
   22a00:	mov	r0, fp
   22a04:	bl	2eef8 <flatcc_json_parser_finalize_unions@@Base>
   22a08:	mov	r4, r0
   22a0c:	ldr	r0, [fp]
   22a10:	bl	27b8c <flatcc_builder_end_table@@Base>
   22a14:	ldr	r3, [sp, #124]	; 0x7c
   22a18:	str	r0, [r3]
   22a1c:	cmp	r0, #0
   22a20:	moveq	r8, r4
   22a24:	bne	1df4c <_start@@Base+0x994c>
   22a28:	b	1df34 <_start@@Base+0x9934>
   22a2c:	nop	{0}
   22a30:	svcvs	0x00725f6f
   22a34:			; <UNDEFINED> instruction: 0x76656374
   22a38:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   22a3c:	ldrbvs	r6, [pc], -pc, ror #8
   22a40:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   22a44:	ldrbvs	r6, [pc], -pc, ror #24
	...
   22a50:	andeq	r4, r5, ip, ror #5
   22a54:	strdeq	r4, [r5], -r8
   22a58:	mov	r3, #29
   22a5c:	mov	r2, r9
   22a60:	mov	r1, r8
   22a64:	mov	r0, fp
   22a68:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   22a6c:	mov	r8, r0
   22a70:	b	1df34 <_start@@Base+0x9934>
   22a74:	mov	fp, sl
   22a78:	mov	r8, r4
   22a7c:	b	1df34 <_start@@Base+0x9934>
   22a80:	mov	fp, sl
   22a84:	mov	r8, r4
   22a88:	b	1df34 <_start@@Base+0x9934>
   22a8c:	mov	fp, sl
   22a90:	mov	r8, r4
   22a94:	b	1df34 <_start@@Base+0x9934>
   22a98:	mov	fp, sl
   22a9c:	mov	r8, r4
   22aa0:	b	1df34 <_start@@Base+0x9934>
   22aa4:	mov	fp, sl
   22aa8:	b	1df34 <_start@@Base+0x9934>
   22aac:	mov	fp, sl
   22ab0:	b	1df34 <_start@@Base+0x9934>
   22ab4:	mov	fp, sl
   22ab8:	b	1df34 <_start@@Base+0x9934>
   22abc:	mov	fp, sl
   22ac0:	b	1df34 <_start@@Base+0x9934>
   22ac4:	mov	fp, sl
   22ac8:	b	1df34 <_start@@Base+0x9934>
   22acc:	mov	fp, sl
   22ad0:	b	1df34 <_start@@Base+0x9934>
   22ad4:	mov	fp, sl
   22ad8:	b	1df34 <_start@@Base+0x9934>
   22adc:	mov	fp, sl
   22ae0:	b	1df34 <_start@@Base+0x9934>
   22ae4:	mov	fp, sl
   22ae8:	b	1df34 <_start@@Base+0x9934>
   22aec:	mov	fp, sl
   22af0:	b	1df34 <_start@@Base+0x9934>
   22af4:	mov	fp, sl
   22af8:	b	1df34 <_start@@Base+0x9934>
   22afc:	mov	fp, sl
   22b00:	b	1df34 <_start@@Base+0x9934>
   22b04:	mov	fp, sl
   22b08:	b	1df34 <_start@@Base+0x9934>
   22b0c:	mov	fp, sl
   22b10:	b	1df34 <_start@@Base+0x9934>
   22b14:	mov	fp, sl
   22b18:	b	1df34 <_start@@Base+0x9934>
   22b1c:	mov	fp, sl
   22b20:	b	1df34 <_start@@Base+0x9934>
   22b24:	mov	fp, sl
   22b28:	b	1df34 <_start@@Base+0x9934>
   22b2c:	mov	fp, sl
   22b30:	b	1df34 <_start@@Base+0x9934>
   22b34:	mov	fp, sl
   22b38:	b	1df34 <_start@@Base+0x9934>
   22b3c:	mov	fp, sl
   22b40:	b	1df34 <_start@@Base+0x9934>
   22b44:	mov	fp, sl
   22b48:	b	1df34 <_start@@Base+0x9934>
   22b4c:	mov	fp, sl
   22b50:	b	1df34 <_start@@Base+0x9934>
   22b54:	mov	fp, sl
   22b58:	b	1df34 <_start@@Base+0x9934>
   22b5c:	mov	fp, sl
   22b60:	b	1df34 <_start@@Base+0x9934>
   22b64:	mov	fp, sl
   22b68:	b	1df34 <_start@@Base+0x9934>
   22b6c:	mov	fp, sl
   22b70:	b	1df34 <_start@@Base+0x9934>
   22b74:	ldr	fp, [sp, #24]
   22b78:	b	1df34 <_start@@Base+0x9934>
   22b7c:	mov	fp, sl
   22b80:	b	1df34 <_start@@Base+0x9934>
   22b84:	mov	fp, sl
   22b88:	b	1df34 <_start@@Base+0x9934>
   22b8c:	mov	fp, sl
   22b90:	b	1df34 <_start@@Base+0x9934>
   22b94:	mov	fp, sl
   22b98:	b	1df34 <_start@@Base+0x9934>
   22b9c:	mov	fp, sl
   22ba0:	b	1df34 <_start@@Base+0x9934>
   22ba4:	mov	fp, sl
   22ba8:	b	1df34 <_start@@Base+0x9934>
   22bac:	mov	fp, sl
   22bb0:	b	1df34 <_start@@Base+0x9934>
   22bb4:	mov	fp, sl
   22bb8:	b	1df34 <_start@@Base+0x9934>
   22bbc:	mov	fp, sl
   22bc0:	b	1df34 <_start@@Base+0x9934>
   22bc4:	mov	fp, sl
   22bc8:	b	1df34 <_start@@Base+0x9934>
   22bcc:	mov	fp, sl
   22bd0:	b	1df34 <_start@@Base+0x9934>
   22bd4:	mov	fp, sl
   22bd8:	b	1df34 <_start@@Base+0x9934>
   22bdc:	mov	fp, sl
   22be0:	b	1df34 <_start@@Base+0x9934>
   22be4:	mov	fp, sl
   22be8:	b	1df34 <_start@@Base+0x9934>
   22bec:	mov	fp, sl
   22bf0:	b	1df34 <_start@@Base+0x9934>
   22bf4:	mov	fp, sl
   22bf8:	b	1df34 <_start@@Base+0x9934>
   22bfc:	mov	fp, sl
   22c00:	b	1df34 <_start@@Base+0x9934>
   22c04:	mov	fp, sl
   22c08:	b	1df34 <_start@@Base+0x9934>
   22c0c:	mov	fp, sl
   22c10:	b	1df34 <_start@@Base+0x9934>
   22c14:	mov	fp, sl
   22c18:	b	1df34 <_start@@Base+0x9934>
   22c1c:	mov	fp, sl
   22c20:	b	1df34 <_start@@Base+0x9934>
   22c24:	mov	fp, sl
   22c28:	b	1df34 <_start@@Base+0x9934>
   22c2c:	mov	fp, sl
   22c30:	b	1df34 <_start@@Base+0x9934>
   22c34:	mov	fp, sl
   22c38:	b	1df34 <_start@@Base+0x9934>
   22c3c:	mov	fp, sl
   22c40:	b	1df34 <_start@@Base+0x9934>
   22c44:	mov	fp, sl
   22c48:	b	1df34 <_start@@Base+0x9934>
   22c4c:	mov	fp, sl
   22c50:	b	1df34 <_start@@Base+0x9934>
   22c54:	mov	fp, sl
   22c58:	b	1df34 <_start@@Base+0x9934>
   22c5c:	mov	fp, sl
   22c60:	b	1df34 <_start@@Base+0x9934>
   22c64:	mov	fp, sl
   22c68:	b	1df34 <_start@@Base+0x9934>
   22c6c:	mov	fp, sl
   22c70:	b	1df34 <_start@@Base+0x9934>
   22c74:	mov	fp, sl
   22c78:	b	1df34 <_start@@Base+0x9934>
   22c7c:	mov	fp, sl
   22c80:	b	1df34 <_start@@Base+0x9934>
   22c84:	mov	fp, sl
   22c88:	b	1df34 <_start@@Base+0x9934>
   22c8c:	mov	fp, sl
   22c90:	b	1df34 <_start@@Base+0x9934>
   22c94:	mov	fp, sl
   22c98:	b	1df34 <_start@@Base+0x9934>
   22c9c:	mov	fp, sl
   22ca0:	b	1df34 <_start@@Base+0x9934>
   22ca4:	mov	r8, r4
   22ca8:	b	1e0bc <_start@@Base+0x9abc>
   22cac:	ldr	r8, [sp, #24]
   22cb0:	b	1edf8 <_start@@Base+0xa7f8>
   22cb4:	mov	r8, r6
   22cb8:	b	1fd34 <_start@@Base+0xb734>
   22cbc:	mov	r8, r6
   22cc0:	b	1ff04 <_start@@Base+0xb904>
   22cc4:	mov	r7, fp
   22cc8:	b	21108 <_start@@Base+0xcb08>
   22ccc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22cd0:	strd	r6, [sp, #8]
   22cd4:	strd	r8, [sp, #16]
   22cd8:	strd	sl, [sp, #24]
   22cdc:	str	lr, [sp, #32]
   22ce0:	sub	sp, sp, #68	; 0x44
   22ce4:	mov	r6, r0
   22ce8:	mov	r4, r1
   22cec:	mov	r5, r2
   22cf0:	mov	r2, #0
   22cf4:	ldr	r1, [sp, #104]	; 0x68
   22cf8:	str	r2, [r1]
   22cfc:	cmp	r3, #4
   22d00:	ldrls	pc, [pc, r3, lsl #2]
   22d04:	b	23690 <_start@@Base+0xf090>
   22d08:	andeq	r2, r2, ip, lsl sp
   22d0c:	andeq	r2, r2, r0, ror #26
   22d10:	andeq	r2, r2, r8, lsr #27
   22d14:	muleq	r2, r0, r5
   22d18:	andeq	r3, r2, ip, ror r6
   22d1c:	sub	r3, r5, r4
   22d20:	cmp	r3, #3
   22d24:	ble	22d48 <_start@@Base+0xe748>
   22d28:	mov	r2, #4
   22d2c:	movw	r1, #58152	; 0xe328
   22d30:	movt	r1, #3
   22d34:	mov	r0, r4
   22d38:	bl	14530 <memcmp@plt>
   22d3c:	cmp	r0, #0
   22d40:	addeq	r0, r4, #4
   22d44:	beq	22d8c <_start@@Base+0xe78c>
   22d48:	mov	r3, #26
   22d4c:	mov	r2, r5
   22d50:	mov	r1, r4
   22d54:	mov	r0, r6
   22d58:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   22d5c:	b	22d8c <_start@@Base+0xe78c>
   22d60:	ldr	r3, [sp, #104]	; 0x68
   22d64:	mov	r2, r5
   22d68:	mov	r1, r4
   22d6c:	bl	1dee8 <_start@@Base+0x98e8>
   22d70:	ldr	r3, [r6, #20]
   22d74:	cmp	r3, #0
   22d78:	bne	22d8c <_start@@Base+0xe78c>
   22d7c:	ldr	r3, [sp, #104]	; 0x68
   22d80:	ldr	r3, [r3]
   22d84:	cmp	r3, #0
   22d88:	beq	236c0 <_start@@Base+0xf0c0>
   22d8c:	add	sp, sp, #68	; 0x44
   22d90:	ldrd	r4, [sp]
   22d94:	ldrd	r6, [sp, #8]
   22d98:	ldrd	r8, [sp, #16]
   22d9c:	ldrd	sl, [sp, #24]
   22da0:	add	sp, sp, #32
   22da4:	pop	{pc}		; (ldr pc, [sp], #4)
   22da8:	mov	r1, #4
   22dac:	ldr	r0, [r0]
   22db0:	bl	270b4 <flatcc_builder_start_table@@Base>
   22db4:	cmp	r0, #0
   22db8:	beq	22dd4 <_start@@Base+0xe7d4>
   22dbc:	mov	r3, #33	; 0x21
   22dc0:	mov	r2, r5
   22dc4:	mov	r1, r4
   22dc8:	mov	r0, r6
   22dcc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   22dd0:	b	22d70 <_start@@Base+0xe770>
   22dd4:	add	r3, sp, #48	; 0x30
   22dd8:	mov	r2, r5
   22ddc:	mov	r1, r4
   22de0:	mov	r0, r6
   22de4:	bl	1966c <_start@@Base+0x506c>
   22de8:	mov	r4, r0
   22dec:	ldr	r3, [sp, #48]	; 0x30
   22df0:	cmp	r3, #0
   22df4:	beq	23564 <_start@@Base+0xef64>
   22df8:	movw	r3, #16496	; 0x4070
   22dfc:	movt	r3, #5
   22e00:	str	r3, [sp, #32]
   22e04:	add	r3, r3, #704	; 0x2c0
   22e08:	str	r3, [sp, #36]	; 0x24
   22e0c:	strd	r8, [sp, #8]
   22e10:	b	22f44 <_start@@Base+0xe944>
   22e14:	mov	r3, #5
   22e18:	mov	r2, r5
   22e1c:	mov	r1, r4
   22e20:	mov	r0, r6
   22e24:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   22e28:	mov	r4, r0
   22e2c:	b	22f5c <_start@@Base+0xe95c>
   22e30:	ldrb	r0, [r4, #7]
   22e34:	mov	r1, #0
   22e38:	ldrb	r2, [r4, #6]
   22e3c:	orr	r3, r0, r2, lsl #8
   22e40:	mov	r2, r1
   22e44:	ldrb	r0, [r4, #5]
   22e48:	orr	r3, r3, r0, lsl #16
   22e4c:	ldrb	r0, [r4, #4]
   22e50:	orr	r3, r3, r0, lsl #24
   22e54:	ldrb	r0, [r4, #3]
   22e58:	orr	r2, r2, r0
   22e5c:	ldrb	r0, [r4, #2]
   22e60:	orr	r2, r2, r0, lsl #8
   22e64:	ldrb	r0, [r4, #1]
   22e68:	orr	r2, r2, r0, lsl #16
   22e6c:	ldrb	r0, [r4]
   22e70:	orr	r2, r2, r0, lsl #24
   22e74:	lsr	sl, r3, #16
   22e78:	lsl	sl, sl, #16
   22e7c:	add	r1, pc, #876	; 0x36c
   22e80:	ldrd	r0, [r1]
   22e84:	cmp	r2, r1
   22e88:	cmpeq	sl, r0
   22e8c:	beq	22ff8 <_start@@Base+0xe9f8>
   22e90:	and	r3, r3, #-16777216	; 0xff000000
   22e94:	str	r3, [sp, #16]
   22e98:	str	r2, [sp, #20]
   22e9c:	ldrd	r0, [sp, #16]
   22ea0:	add	r9, pc, #848	; 0x350
   22ea4:	ldrd	r8, [r9]
   22ea8:	cmp	r1, r9
   22eac:	cmpeq	r0, r8
   22eb0:	beq	23150 <_start@@Base+0xeb50>
   22eb4:	mov	r3, #0
   22eb8:	str	r3, [sp, #24]
   22ebc:	bic	r3, r2, #255	; 0xff
   22ec0:	str	r3, [sp, #28]
   22ec4:	ldrd	r0, [sp, #24]
   22ec8:	add	r9, pc, #816	; 0x330
   22ecc:	ldrd	r8, [r9]
   22ed0:	cmp	r1, r9
   22ed4:	cmpeq	r0, r8
   22ed8:	beq	232c0 <_start@@Base+0xecc0>
   22edc:	mov	r3, #0
   22ee0:	str	r3, [sp, #8]
   22ee4:	lsr	r3, r2, #16
   22ee8:	lsl	r3, r3, #16
   22eec:	str	r3, [sp, #12]
   22ef0:	mov	r2, #0
   22ef4:	mov	r3, #0
   22ef8:	movt	r3, #30051	; 0x7563
   22efc:	ldrd	r0, [sp, #8]
   22f00:	cmp	r1, r3
   22f04:	cmpeq	r0, r2
   22f08:	beq	23414 <_start@@Base+0xee14>
   22f0c:	mov	r2, r5
   22f10:	mov	r1, r4
   22f14:	mov	r0, r6
   22f18:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   22f1c:	mov	r4, r0
   22f20:	add	r3, sp, #48	; 0x30
   22f24:	mov	r2, r5
   22f28:	mov	r1, r4
   22f2c:	mov	r0, r6
   22f30:	bl	1a448 <_start@@Base+0x5e48>
   22f34:	mov	r4, r0
   22f38:	ldr	r3, [sp, #48]	; 0x30
   22f3c:	cmp	r3, #0
   22f40:	beq	23564 <_start@@Base+0xef64>
   22f44:	cmp	r5, r4
   22f48:	beq	22f5c <_start@@Base+0xe95c>
   22f4c:	ldrb	r3, [r4]
   22f50:	cmp	r3, #34	; 0x22
   22f54:	addeq	r4, r4, #1
   22f58:	bne	22e14 <_start@@Base+0xe814>
   22f5c:	sub	r3, r5, r4
   22f60:	cmp	r3, #8
   22f64:	bhi	22e30 <_start@@Base+0xe830>
   22f68:	sub	r3, r3, #1
   22f6c:	cmp	r3, #7
   22f70:	ldrls	pc, [pc, r3, lsl #2]
   22f74:	b	22fec <_start@@Base+0xe9ec>
   22f78:	andeq	r2, r2, r0, ror #31
   22f7c:	ldrdeq	r2, [r2], -r4
   22f80:	andeq	r2, r2, r8, asr #31
   22f84:			; <UNDEFINED> instruction: 0x00022fbc
   22f88:			; <UNDEFINED> instruction: 0x00022fb0
   22f8c:	andeq	r2, r2, r4, lsr #31
   22f90:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   22f94:	andeq	r2, r2, r0, lsr lr
   22f98:	mov	r0, #0
   22f9c:	mov	r1, #0
   22fa0:	b	22e38 <_start@@Base+0xe838>
   22fa4:	mov	r3, #0
   22fa8:	mov	r2, r3
   22fac:	b	22e44 <_start@@Base+0xe844>
   22fb0:	mov	r3, #0
   22fb4:	mov	r2, r3
   22fb8:	b	22e4c <_start@@Base+0xe84c>
   22fbc:	mov	r3, #0
   22fc0:	mov	r2, r3
   22fc4:	b	22e54 <_start@@Base+0xe854>
   22fc8:	mov	r3, #0
   22fcc:	mov	r2, r3
   22fd0:	b	22e5c <_start@@Base+0xe85c>
   22fd4:	mov	r3, #0
   22fd8:	mov	r2, r3
   22fdc:	b	22e64 <_start@@Base+0xe864>
   22fe0:	mov	r3, #0
   22fe4:	mov	r2, r3
   22fe8:	b	22e6c <_start@@Base+0xe86c>
   22fec:	mov	r3, #0
   22ff0:	mov	r2, r3
   22ff4:	b	22e74 <_start@@Base+0xe874>
   22ff8:	mov	r3, #6
   22ffc:	mov	r2, r5
   23000:	mov	r1, r4
   23004:	mov	r0, r6
   23008:	bl	19da4 <_start@@Base+0x57a4>
   2300c:	mov	r7, r0
   23010:	cmp	r4, r0
   23014:	beq	236f8 <_start@@Base+0xf0f8>
   23018:	mov	r3, #0
   2301c:	strb	r3, [sp, #47]	; 0x2f
   23020:	mov	r0, #0
   23024:	mov	r1, #0
   23028:	strd	r0, [sp, #56]	; 0x38
   2302c:	str	r3, [sp, #52]	; 0x34
   23030:	cmp	r5, r7
   23034:	beq	236d8 <_start@@Base+0xf0d8>
   23038:	add	r3, sp, #56	; 0x38
   2303c:	str	r3, [sp]
   23040:	add	r3, sp, #52	; 0x34
   23044:	mov	r2, r5
   23048:	mov	r1, r7
   2304c:	mov	r0, r6
   23050:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   23054:	mov	r4, r0
   23058:	cmp	r7, r0
   2305c:	bne	23098 <_start@@Base+0xea98>
   23060:	mov	r7, r4
   23064:	add	r3, sp, #47	; 0x2f
   23068:	str	r3, [sp]
   2306c:	ldr	r3, [sp, #32]
   23070:	add	r3, r3, #660	; 0x294
   23074:	mov	r2, r5
   23078:	mov	r1, r7
   2307c:	mov	r0, r6
   23080:	bl	1903c <_start@@Base+0x4a3c>
   23084:	mov	r4, r0
   23088:	cmp	r5, r0
   2308c:	cmpne	r7, r0
   23090:	bne	230dc <_start@@Base+0xeadc>
   23094:	b	22dbc <_start@@Base+0xe7bc>
   23098:	ldrd	r2, [sp, #56]	; 0x38
   2309c:	ldr	r1, [sp, #52]	; 0x34
   230a0:	cmp	r1, #0
   230a4:	beq	2311c <_start@@Base+0xeb1c>
   230a8:	cmp	r3, #0
   230ac:	cmpeq	r2, #128	; 0x80
   230b0:	rsbls	r2, r2, #0
   230b4:	strbls	r2, [sp, #47]	; 0x2f
   230b8:	bls	230dc <_start@@Base+0xeadc>
   230bc:	mov	r3, #8
   230c0:	mov	r2, r5
   230c4:	mov	r1, r0
   230c8:	mov	r0, r6
   230cc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   230d0:	mov	r4, r0
   230d4:	cmp	r7, r4
   230d8:	beq	23148 <_start@@Base+0xeb48>
   230dc:	ldrsb	r3, [sp, #47]	; 0x2f
   230e0:	cmp	r3, #2
   230e4:	bne	230f4 <_start@@Base+0xeaf4>
   230e8:	ldr	r3, [r6, #8]
   230ec:	tst	r3, #2
   230f0:	beq	22f20 <_start@@Base+0xe920>
   230f4:	mov	r3, #1
   230f8:	mov	r2, r3
   230fc:	mov	r1, r3
   23100:	ldr	r0, [r6]
   23104:	bl	28c78 <flatcc_builder_table_add@@Base>
   23108:	cmp	r0, #0
   2310c:	beq	22dbc <_start@@Base+0xe7bc>
   23110:	ldrsb	r3, [sp, #47]	; 0x2f
   23114:	strb	r3, [r0]
   23118:	b	22f20 <_start@@Base+0xe920>
   2311c:	cmp	r3, #0
   23120:	cmpeq	r2, #127	; 0x7f
   23124:	strbls	r2, [sp, #47]	; 0x2f
   23128:	bls	230dc <_start@@Base+0xeadc>
   2312c:	mov	r3, #7
   23130:	mov	r2, r5
   23134:	mov	r1, r0
   23138:	mov	r0, r6
   2313c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   23140:	mov	r4, r0
   23144:	b	230d4 <_start@@Base+0xead4>
   23148:	mov	r7, r4
   2314c:	b	23064 <_start@@Base+0xea64>
   23150:	mov	r3, #5
   23154:	mov	r2, r5
   23158:	mov	r1, r4
   2315c:	mov	r0, r6
   23160:	bl	19da4 <_start@@Base+0x57a4>
   23164:	mov	r7, r0
   23168:	cmp	r4, r0
   2316c:	beq	236f8 <_start@@Base+0xf0f8>
   23170:	mov	r3, #0
   23174:	strb	r3, [sp, #47]	; 0x2f
   23178:	mov	r0, #0
   2317c:	mov	r1, #0
   23180:	strd	r0, [sp, #56]	; 0x38
   23184:	str	r3, [sp, #52]	; 0x34
   23188:	cmp	r5, r7
   2318c:	beq	236f0 <_start@@Base+0xf0f0>
   23190:	add	r3, sp, #56	; 0x38
   23194:	str	r3, [sp]
   23198:	add	r3, sp, #52	; 0x34
   2319c:	mov	r2, r5
   231a0:	mov	r1, r7
   231a4:	mov	r0, r6
   231a8:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   231ac:	mov	r4, r0
   231b0:	cmp	r7, r0
   231b4:	bne	23208 <_start@@Base+0xec08>
   231b8:	mov	r7, r4
   231bc:	add	r3, sp, #47	; 0x2f
   231c0:	str	r3, [sp]
   231c4:	ldr	r3, [sp, #32]
   231c8:	add	r3, r3, #676	; 0x2a4
   231cc:	mov	r2, r5
   231d0:	mov	r1, r7
   231d4:	mov	r0, r6
   231d8:	bl	1903c <_start@@Base+0x4a3c>
   231dc:	mov	r4, r0
   231e0:	cmp	r5, r0
   231e4:	cmpne	r7, r0
   231e8:	bne	2324c <_start@@Base+0xec4c>
   231ec:	b	22dbc <_start@@Base+0xe7bc>
   231f0:	eorsvc	r0, r2, #0
   231f4:	cmnvs	pc, #28416	; 0x6f00
   231f8:	andvc	r0, r0, #0
   231fc:	cmnvs	pc, #28416	; 0x6f00
   23200:	andeq	r0, r0, r0
   23204:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   23208:	ldrd	r2, [sp, #56]	; 0x38
   2320c:	ldr	r1, [sp, #52]	; 0x34
   23210:	cmp	r1, #0
   23214:	beq	2328c <_start@@Base+0xec8c>
   23218:	cmp	r3, #0
   2321c:	cmpeq	r2, #128	; 0x80
   23220:	rsbls	r2, r2, #0
   23224:	strbls	r2, [sp, #47]	; 0x2f
   23228:	bls	2324c <_start@@Base+0xec4c>
   2322c:	mov	r3, #8
   23230:	mov	r2, r5
   23234:	mov	r1, r0
   23238:	mov	r0, r6
   2323c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   23240:	mov	r4, r0
   23244:	cmp	r7, r4
   23248:	beq	232b8 <_start@@Base+0xecb8>
   2324c:	ldrsb	r3, [sp, #47]	; 0x2f
   23250:	cmp	r3, #2
   23254:	bne	23264 <_start@@Base+0xec64>
   23258:	ldr	r3, [r6, #8]
   2325c:	tst	r3, #2
   23260:	beq	22f20 <_start@@Base+0xe920>
   23264:	mov	r3, #1
   23268:	mov	r2, r3
   2326c:	mov	r1, #0
   23270:	ldr	r0, [r6]
   23274:	bl	28c78 <flatcc_builder_table_add@@Base>
   23278:	cmp	r0, #0
   2327c:	beq	22dbc <_start@@Base+0xe7bc>
   23280:	ldrsb	r3, [sp, #47]	; 0x2f
   23284:	strb	r3, [r0]
   23288:	b	22f20 <_start@@Base+0xe920>
   2328c:	cmp	r3, #0
   23290:	cmpeq	r2, #127	; 0x7f
   23294:	strbls	r2, [sp, #47]	; 0x2f
   23298:	bls	2324c <_start@@Base+0xec4c>
   2329c:	mov	r3, #7
   232a0:	mov	r2, r5
   232a4:	mov	r1, r0
   232a8:	mov	r0, r6
   232ac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   232b0:	mov	r4, r0
   232b4:	b	23244 <_start@@Base+0xec44>
   232b8:	mov	r7, r4
   232bc:	b	231bc <_start@@Base+0xebbc>
   232c0:	mov	r3, #3
   232c4:	mov	r2, r5
   232c8:	mov	r1, r4
   232cc:	mov	r0, r6
   232d0:	bl	19da4 <_start@@Base+0x57a4>
   232d4:	mov	r7, r0
   232d8:	cmp	r4, r0
   232dc:	beq	233fc <_start@@Base+0xedfc>
   232e0:	mov	r3, #0
   232e4:	strb	r3, [sp, #47]	; 0x2f
   232e8:	mov	r0, #0
   232ec:	mov	r1, #0
   232f0:	strd	r0, [sp, #56]	; 0x38
   232f4:	str	r3, [sp, #52]	; 0x34
   232f8:	cmp	r5, r7
   232fc:	beq	236e0 <_start@@Base+0xf0e0>
   23300:	add	r3, sp, #56	; 0x38
   23304:	str	r3, [sp]
   23308:	add	r3, sp, #52	; 0x34
   2330c:	mov	r2, r5
   23310:	mov	r1, r7
   23314:	mov	r0, r6
   23318:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   2331c:	mov	r1, r0
   23320:	cmp	r7, r0
   23324:	bne	2335c <_start@@Base+0xed5c>
   23328:	add	r3, sp, #47	; 0x2f
   2332c:	str	r3, [sp]
   23330:	ldr	r3, [sp, #32]
   23334:	add	r3, r3, #692	; 0x2b4
   23338:	mov	r2, r5
   2333c:	mov	r7, r1
   23340:	mov	r0, r6
   23344:	bl	18e7c <_start@@Base+0x487c>
   23348:	mov	r4, r0
   2334c:	cmp	r5, r0
   23350:	cmpne	r7, r0
   23354:	bne	233b4 <_start@@Base+0xedb4>
   23358:	b	22dbc <_start@@Base+0xe7bc>
   2335c:	ldr	r3, [sp, #52]	; 0x34
   23360:	cmp	r3, #0
   23364:	bne	23398 <_start@@Base+0xed98>
   23368:	ldrd	r2, [sp, #56]	; 0x38
   2336c:	cmp	r3, #0
   23370:	cmpeq	r2, #255	; 0xff
   23374:	strbls	r2, [sp, #47]	; 0x2f
   23378:	movls	r4, r0
   2337c:	bls	233b4 <_start@@Base+0xedb4>
   23380:	mov	r3, #7
   23384:	mov	r2, r5
   23388:	mov	r0, r6
   2338c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   23390:	mov	r4, r0
   23394:	b	233ac <_start@@Base+0xedac>
   23398:	mov	r3, #8
   2339c:	mov	r2, r5
   233a0:	mov	r0, r6
   233a4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   233a8:	mov	r4, r0
   233ac:	cmp	r7, r4
   233b0:	beq	233f4 <_start@@Base+0xedf4>
   233b4:	ldrb	r3, [sp, #47]	; 0x2f
   233b8:	cmp	r3, #2
   233bc:	bne	233cc <_start@@Base+0xedcc>
   233c0:	ldr	r3, [r6, #8]
   233c4:	tst	r3, #2
   233c8:	beq	22f20 <_start@@Base+0xe920>
   233cc:	mov	r3, #1
   233d0:	mov	r2, r3
   233d4:	mov	r1, #3
   233d8:	ldr	r0, [r6]
   233dc:	bl	28c78 <flatcc_builder_table_add@@Base>
   233e0:	cmp	r0, #0
   233e4:	beq	22dbc <_start@@Base+0xe7bc>
   233e8:	ldrb	r3, [sp, #47]	; 0x2f
   233ec:	strb	r3, [r0]
   233f0:	b	22f20 <_start@@Base+0xe920>
   233f4:	mov	r1, r4
   233f8:	b	23328 <_start@@Base+0xed28>
   233fc:	mov	r2, r5
   23400:	mov	r1, r0
   23404:	mov	r0, r6
   23408:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   2340c:	mov	r4, r0
   23410:	b	22f20 <_start@@Base+0xe920>
   23414:	mov	r3, #2
   23418:	mov	r2, r5
   2341c:	mov	r1, r4
   23420:	mov	r0, r6
   23424:	bl	19da4 <_start@@Base+0x57a4>
   23428:	mov	r7, r0
   2342c:	cmp	r4, r0
   23430:	beq	2354c <_start@@Base+0xef4c>
   23434:	mov	r3, #0
   23438:	strb	r3, [sp, #47]	; 0x2f
   2343c:	mov	r0, #0
   23440:	mov	r1, #0
   23444:	strd	r0, [sp, #56]	; 0x38
   23448:	str	r3, [sp, #52]	; 0x34
   2344c:	cmp	r5, r7
   23450:	beq	236e8 <_start@@Base+0xf0e8>
   23454:	add	r3, sp, #56	; 0x38
   23458:	str	r3, [sp]
   2345c:	add	r3, sp, #52	; 0x34
   23460:	mov	r2, r5
   23464:	mov	r1, r7
   23468:	mov	r0, r6
   2346c:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   23470:	mov	r1, r0
   23474:	cmp	r7, r0
   23478:	bne	234ac <_start@@Base+0xeeac>
   2347c:	add	r3, sp, #47	; 0x2f
   23480:	str	r3, [sp]
   23484:	ldr	r3, [sp, #36]	; 0x24
   23488:	mov	r2, r5
   2348c:	mov	r7, r1
   23490:	mov	r0, r6
   23494:	bl	18e7c <_start@@Base+0x487c>
   23498:	mov	r4, r0
   2349c:	cmp	r5, r0
   234a0:	cmpne	r0, r7
   234a4:	bne	23504 <_start@@Base+0xef04>
   234a8:	b	22dbc <_start@@Base+0xe7bc>
   234ac:	ldr	r3, [sp, #52]	; 0x34
   234b0:	cmp	r3, #0
   234b4:	bne	234e8 <_start@@Base+0xeee8>
   234b8:	ldrd	r2, [sp, #56]	; 0x38
   234bc:	cmp	r3, #0
   234c0:	cmpeq	r2, #255	; 0xff
   234c4:	strbls	r2, [sp, #47]	; 0x2f
   234c8:	movls	r4, r0
   234cc:	bls	23504 <_start@@Base+0xef04>
   234d0:	mov	r3, #7
   234d4:	mov	r2, r5
   234d8:	mov	r0, r6
   234dc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   234e0:	mov	r4, r0
   234e4:	b	234fc <_start@@Base+0xeefc>
   234e8:	mov	r3, #8
   234ec:	mov	r2, r5
   234f0:	mov	r0, r6
   234f4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   234f8:	mov	r4, r0
   234fc:	cmp	r7, r4
   23500:	beq	23544 <_start@@Base+0xef44>
   23504:	ldrb	r3, [sp, #47]	; 0x2f
   23508:	cmp	r3, #2
   2350c:	bne	2351c <_start@@Base+0xef1c>
   23510:	ldr	r3, [r6, #8]
   23514:	tst	r3, #2
   23518:	beq	22f20 <_start@@Base+0xe920>
   2351c:	mov	r3, #1
   23520:	mov	r2, r3
   23524:	mov	r1, #2
   23528:	ldr	r0, [r6]
   2352c:	bl	28c78 <flatcc_builder_table_add@@Base>
   23530:	cmp	r0, #0
   23534:	beq	22dbc <_start@@Base+0xe7bc>
   23538:	ldrb	r3, [sp, #47]	; 0x2f
   2353c:	strb	r3, [r0]
   23540:	b	22f20 <_start@@Base+0xe920>
   23544:	mov	r1, r4
   23548:	b	2347c <_start@@Base+0xee7c>
   2354c:	mov	r2, r5
   23550:	mov	r1, r0
   23554:	mov	r0, r6
   23558:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   2355c:	mov	r4, r0
   23560:	b	22f20 <_start@@Base+0xe920>
   23564:	ldr	r3, [r6, #20]
   23568:	cmp	r3, #0
   2356c:	bne	22dbc <_start@@Base+0xe7bc>
   23570:	ldr	r0, [r6]
   23574:	bl	27b8c <flatcc_builder_end_table@@Base>
   23578:	ldr	r3, [sp, #104]	; 0x68
   2357c:	str	r0, [r3]
   23580:	cmp	r0, #0
   23584:	movne	r0, r4
   23588:	bne	22d70 <_start@@Base+0xe770>
   2358c:	b	22dbc <_start@@Base+0xe7bc>
   23590:	mov	r1, #0
   23594:	ldr	r0, [r0]
   23598:	bl	270b4 <flatcc_builder_start_table@@Base>
   2359c:	cmp	r0, #0
   235a0:	beq	235bc <_start@@Base+0xefbc>
   235a4:	mov	r3, #33	; 0x21
   235a8:	mov	r2, r5
   235ac:	mov	r1, r4
   235b0:	mov	r0, r6
   235b4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   235b8:	b	22d70 <_start@@Base+0xe770>
   235bc:	add	r3, sp, #56	; 0x38
   235c0:	mov	r2, r5
   235c4:	mov	r1, r4
   235c8:	mov	r0, r6
   235cc:	bl	1966c <_start@@Base+0x506c>
   235d0:	mov	r4, r0
   235d4:	ldr	r3, [sp, #56]	; 0x38
   235d8:	cmp	r3, #0
   235dc:	beq	23650 <_start@@Base+0xf050>
   235e0:	mov	r7, #5
   235e4:	mov	r1, r0
   235e8:	b	23630 <_start@@Base+0xf030>
   235ec:	mov	r3, r7
   235f0:	mov	r2, r5
   235f4:	mov	r0, r6
   235f8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   235fc:	mov	r1, r0
   23600:	mov	r2, r5
   23604:	mov	r0, r6
   23608:	bl	2e72c <flatcc_json_parser_unmatched_symbol@@Base>
   2360c:	add	r3, sp, #56	; 0x38
   23610:	mov	r2, r5
   23614:	mov	r1, r0
   23618:	mov	r0, r6
   2361c:	bl	1a448 <_start@@Base+0x5e48>
   23620:	mov	r1, r0
   23624:	ldr	r3, [sp, #56]	; 0x38
   23628:	cmp	r3, #0
   2362c:	beq	2364c <_start@@Base+0xf04c>
   23630:	cmp	r5, r1
   23634:	beq	23600 <_start@@Base+0xf000>
   23638:	ldrb	r3, [r1]
   2363c:	cmp	r3, #34	; 0x22
   23640:	addeq	r1, r1, #1
   23644:	beq	23600 <_start@@Base+0xf000>
   23648:	b	235ec <_start@@Base+0xefec>
   2364c:	mov	r4, r0
   23650:	ldr	r3, [r6, #20]
   23654:	cmp	r3, #0
   23658:	bne	235a4 <_start@@Base+0xefa4>
   2365c:	ldr	r0, [r6]
   23660:	bl	27b8c <flatcc_builder_end_table@@Base>
   23664:	ldr	r3, [sp, #104]	; 0x68
   23668:	str	r0, [r3]
   2366c:	cmp	r0, #0
   23670:	movne	r0, r4
   23674:	bne	22d70 <_start@@Base+0xe770>
   23678:	b	235a4 <_start@@Base+0xefa4>
   2367c:	ldr	r3, [sp, #104]	; 0x68
   23680:	mov	r2, r5
   23684:	mov	r1, r4
   23688:	bl	1af54 <_start@@Base+0x6954>
   2368c:	b	22d70 <_start@@Base+0xe770>
   23690:	ldr	r3, [r0, #8]
   23694:	tst	r3, #1
   23698:	bne	236b0 <_start@@Base+0xf0b0>
   2369c:	mov	r3, #15
   236a0:	mov	r2, r5
   236a4:	mov	r1, r4
   236a8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   236ac:	b	22d8c <_start@@Base+0xe78c>
   236b0:	mov	r2, r5
   236b4:	mov	r1, r4
   236b8:	bl	2d934 <flatcc_json_parser_generic_json@@Base>
   236bc:	b	22d8c <_start@@Base+0xe78c>
   236c0:	mov	r3, #33	; 0x21
   236c4:	mov	r2, r5
   236c8:	mov	r1, r0
   236cc:	mov	r0, r6
   236d0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   236d4:	b	22d8c <_start@@Base+0xe78c>
   236d8:	mov	r4, r7
   236dc:	b	23060 <_start@@Base+0xea60>
   236e0:	mov	r1, r7
   236e4:	b	23328 <_start@@Base+0xed28>
   236e8:	mov	r1, r7
   236ec:	b	2347c <_start@@Base+0xee7c>
   236f0:	mov	r4, r7
   236f4:	b	231b8 <_start@@Base+0xebb8>
   236f8:	mov	r4, r7
   236fc:	b	22f0c <_start@@Base+0xe90c>
   23700:	strd	r4, [sp, #-28]!	; 0xffffffe4
   23704:	strd	r6, [sp, #8]
   23708:	strd	r8, [sp, #16]
   2370c:	str	lr, [sp, #24]
   23710:	sub	sp, sp, #12
   23714:	mov	r9, r0
   23718:	mov	r4, r1
   2371c:	mov	r5, r2
   23720:	mov	r8, r3
   23724:	mov	r1, r2
   23728:	mov	r0, r4
   2372c:	bl	146f0 <_start@@Base+0xf0>
   23730:	add	r3, pc, #856	; 0x358
   23734:	ldrd	r2, [r3]
   23738:	cmp	r1, r3
   2373c:	cmpeq	r0, r2
   23740:	bhi	23890 <_start@@Base+0xf290>
   23744:	add	r3, pc, #844	; 0x34c
   23748:	ldrd	r2, [r3]
   2374c:	cmp	r1, r3
   23750:	cmpeq	r0, r2
   23754:	bhi	237d0 <_start@@Base+0xf1d0>
   23758:	mov	r2, #0
   2375c:	bic	r3, r1, #255	; 0xff
   23760:	add	r1, pc, #824	; 0x338
   23764:	ldrd	r0, [r1]
   23768:	cmp	r3, r1
   2376c:	cmpeq	r2, r0
   23770:	bne	237b4 <_start@@Base+0xf1b4>
   23774:	sub	r3, r5, r4
   23778:	cmp	r3, #3
   2377c:	ble	237b4 <_start@@Base+0xf1b4>
   23780:	ldrb	r3, [r4, #3]
   23784:	cmp	r3, #46	; 0x2e
   23788:	bne	237b4 <_start@@Base+0xf1b4>
   2378c:	ldr	r3, [sp, #44]	; 0x2c
   23790:	str	r3, [sp, #4]
   23794:	ldr	r3, [sp, #40]	; 0x28
   23798:	str	r3, [sp]
   2379c:	mov	r3, r8
   237a0:	mov	r2, r5
   237a4:	add	r1, r4, #4
   237a8:	mov	r0, r9
   237ac:	bl	168a0 <_start@@Base+0x22a0>
   237b0:	mov	r4, r0
   237b4:	mov	r0, r4
   237b8:	add	sp, sp, #12
   237bc:	ldrd	r4, [sp]
   237c0:	ldrd	r6, [sp, #8]
   237c4:	ldrd	r8, [sp, #16]
   237c8:	add	sp, sp, #24
   237cc:	pop	{pc}		; (ldr pc, [sp], #4)
   237d0:	mov	r2, #0
   237d4:	bic	r3, r1, #255	; 0xff
   237d8:	add	r7, pc, #712	; 0x2c8
   237dc:	ldrd	r6, [r7]
   237e0:	cmp	r3, r7
   237e4:	cmpeq	r2, r6
   237e8:	beq	2384c <_start@@Base+0xf24c>
   237ec:	and	r2, r0, #-16777216	; 0xff000000
   237f0:	mov	r3, r1
   237f4:	add	r1, pc, #692	; 0x2b4
   237f8:	ldrd	r0, [r1]
   237fc:	cmp	r3, r1
   23800:	cmpeq	r2, r0
   23804:	bne	237b4 <_start@@Base+0xf1b4>
   23808:	sub	r3, r5, r4
   2380c:	cmp	r3, #5
   23810:	ble	237b4 <_start@@Base+0xf1b4>
   23814:	ldrb	r3, [r4, #5]
   23818:	cmp	r3, #46	; 0x2e
   2381c:	bne	237b4 <_start@@Base+0xf1b4>
   23820:	ldr	r3, [sp, #44]	; 0x2c
   23824:	str	r3, [sp, #4]
   23828:	ldr	r3, [sp, #40]	; 0x28
   2382c:	str	r3, [sp]
   23830:	mov	r3, r8
   23834:	mov	r2, r5
   23838:	add	r1, r4, #6
   2383c:	mov	r0, r9
   23840:	bl	17258 <_start@@Base+0x2c58>
   23844:	mov	r4, r0
   23848:	b	237b4 <_start@@Base+0xf1b4>
   2384c:	sub	r3, r5, r4
   23850:	cmp	r3, #3
   23854:	ble	237b4 <_start@@Base+0xf1b4>
   23858:	ldrb	r3, [r4, #3]
   2385c:	cmp	r3, #46	; 0x2e
   23860:	bne	237b4 <_start@@Base+0xf1b4>
   23864:	ldr	r3, [sp, #44]	; 0x2c
   23868:	str	r3, [sp, #4]
   2386c:	ldr	r3, [sp, #40]	; 0x28
   23870:	str	r3, [sp]
   23874:	mov	r3, r8
   23878:	mov	r2, r5
   2387c:	add	r1, r4, #4
   23880:	mov	r0, r9
   23884:	bl	16b60 <_start@@Base+0x2560>
   23888:	mov	r4, r0
   2388c:	b	237b4 <_start@@Base+0xf1b4>
   23890:	add	r3, pc, #544	; 0x220
   23894:	ldrd	r2, [r3]
   23898:	cmp	r1, r3
   2389c:	cmpeq	r0, r2
   238a0:	bhi	238fc <_start@@Base+0xf2fc>
   238a4:	add	r3, pc, #532	; 0x214
   238a8:	ldrd	r2, [r3]
   238ac:	cmp	r1, r3
   238b0:	cmpeq	r0, r2
   238b4:	bne	237b4 <_start@@Base+0xf1b4>
   238b8:	sub	r3, r5, r4
   238bc:	cmp	r3, #8
   238c0:	ble	237b4 <_start@@Base+0xf1b4>
   238c4:	ldrb	r3, [r4, #8]
   238c8:	cmp	r3, #46	; 0x2e
   238cc:	bne	237b4 <_start@@Base+0xf1b4>
   238d0:	ldr	r3, [sp, #44]	; 0x2c
   238d4:	str	r3, [sp, #4]
   238d8:	ldr	r3, [sp, #40]	; 0x28
   238dc:	str	r3, [sp]
   238e0:	mov	r3, r8
   238e4:	mov	r2, r5
   238e8:	add	r1, r4, #9
   238ec:	mov	r0, r9
   238f0:	bl	16cc8 <_start@@Base+0x26c8>
   238f4:	mov	r4, r0
   238f8:	b	237b4 <_start@@Base+0xf1b4>
   238fc:	add	r3, pc, #452	; 0x1c4
   23900:	ldrd	r2, [r3]
   23904:	cmp	r1, r3
   23908:	cmpeq	r0, r2
   2390c:	bhi	23968 <_start@@Base+0xf368>
   23910:	add	r3, pc, #440	; 0x1b8
   23914:	ldrd	r2, [r3]
   23918:	cmp	r1, r3
   2391c:	cmpeq	r0, r2
   23920:	bne	237b4 <_start@@Base+0xf1b4>
   23924:	sub	r3, r5, r4
   23928:	cmp	r3, #8
   2392c:	ble	237b4 <_start@@Base+0xf1b4>
   23930:	ldrb	r3, [r4, #8]
   23934:	cmp	r3, #46	; 0x2e
   23938:	bne	237b4 <_start@@Base+0xf1b4>
   2393c:	ldr	r3, [sp, #44]	; 0x2c
   23940:	str	r3, [sp, #4]
   23944:	ldr	r3, [sp, #40]	; 0x28
   23948:	str	r3, [sp]
   2394c:	mov	r3, r8
   23950:	mov	r2, r5
   23954:	add	r1, r4, #9
   23958:	mov	r0, r9
   2395c:	bl	16e80 <_start@@Base+0x2880>
   23960:	mov	r4, r0
   23964:	b	237b4 <_start@@Base+0xf1b4>
   23968:	add	r3, pc, #360	; 0x168
   2396c:	ldrd	r2, [r3]
   23970:	cmp	r1, r3
   23974:	cmpeq	r0, r2
   23978:	bne	239c0 <_start@@Base+0xf3c0>
   2397c:	sub	r3, r5, r4
   23980:	cmp	r3, #8
   23984:	ble	237b4 <_start@@Base+0xf1b4>
   23988:	ldrb	r3, [r4, #8]
   2398c:	cmp	r3, #46	; 0x2e
   23990:	bne	237b4 <_start@@Base+0xf1b4>
   23994:	ldr	r3, [sp, #44]	; 0x2c
   23998:	str	r3, [sp, #4]
   2399c:	ldr	r3, [sp, #40]	; 0x28
   239a0:	str	r3, [sp]
   239a4:	mov	r3, r8
   239a8:	mov	r2, r5
   239ac:	add	r1, r4, #9
   239b0:	mov	r0, r9
   239b4:	bl	170b8 <_start@@Base+0x2ab8>
   239b8:	mov	r4, r0
   239bc:	b	237b4 <_start@@Base+0xf1b4>
   239c0:	add	r3, pc, #280	; 0x118
   239c4:	ldrd	r2, [r3]
   239c8:	cmp	r1, r3
   239cc:	cmpeq	r0, r2
   239d0:	bne	237b4 <_start@@Base+0xf1b4>
   239d4:	add	r6, r4, #8
   239d8:	mov	r1, r5
   239dc:	mov	r0, r6
   239e0:	bl	146f0 <_start@@Base+0xf0>
   239e4:	mov	r2, #0
   239e8:	mov	r3, r1
   239ec:	add	r1, pc, #244	; 0xf4
   239f0:	ldrd	r0, [r1]
   239f4:	cmp	r3, r1
   239f8:	cmpeq	r2, r0
   239fc:	bne	237b4 <_start@@Base+0xf1b4>
   23a00:	sub	r3, r5, r6
   23a04:	cmp	r3, #4
   23a08:	ble	237b4 <_start@@Base+0xf1b4>
   23a0c:	ldrb	r3, [r4, #12]
   23a10:	cmp	r3, #46	; 0x2e
   23a14:	bne	237b4 <_start@@Base+0xf1b4>
   23a18:	add	r7, r4, #13
   23a1c:	cmp	r6, r7
   23a20:	beq	237b4 <_start@@Base+0xf1b4>
   23a24:	mov	r1, r5
   23a28:	mov	r0, r7
   23a2c:	bl	146f0 <_start@@Base+0xf0>
   23a30:	mov	r2, #0
   23a34:	and	r3, r1, #-16777216	; 0xff000000
   23a38:	cmp	r3, #2013265920	; 0x78000000
   23a3c:	cmpeq	r2, #0
   23a40:	movne	r4, r7
   23a44:	bne	237b4 <_start@@Base+0xf1b4>
   23a48:	ldr	r3, [sp, #44]	; 0x2c
   23a4c:	str	r3, [sp]
   23a50:	mov	r3, #1
   23a54:	mov	r2, r5
   23a58:	mov	r1, r7
   23a5c:	mov	r0, r9
   23a60:	bl	2d430 <flatcc_json_parser_match_constant@@Base>
   23a64:	mov	r4, r0
   23a68:	cmp	r7, r0
   23a6c:	beq	237b4 <_start@@Base+0xf1b4>
   23a70:	mov	r2, #0
   23a74:	mov	r3, #0
   23a78:	ldr	r1, [sp, #40]	; 0x28
   23a7c:	strd	r2, [r1]
   23a80:	mov	r3, #0
   23a84:	str	r3, [r8]
   23a88:	b	237b4 <_start@@Base+0xf1b4>
   23a8c:	nop	{0}
   23a90:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   23a94:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   23a98:	ldrshvc	pc, [pc, #255]	; 23b9f <test_json@@Base+0xaf>	; <UNPREDICTABLE>
   23a9c:	cmnmi	pc, #28416	; 0x6f00
   23aa0:	andeq	r0, r0, r0
   23aa4:	cmnmi	lr, r0, lsl #18
   23aa8:	andeq	r0, r0, r0
   23aac:	strbtmi	r6, [pc], -r0, lsl #30
   23ab0:	andvc	r0, r0, #0
   23ab4:	cmnmi	pc, #28416	; 0x6f00
   23ab8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   23abc:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   23ac0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   23ac4:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   23ac8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   23acc:	mcrvs	7, 3, r6, cr5, cr15, {2}
   23ad0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   23ad4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   23ad8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   23adc:	mcrvs	7, 3, r6, cr5, cr15, {2}
   23ae0:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   23ae4:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   23ae8:	andeq	r0, r0, r0
   23aec:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

00023af0 <test_json@@Base>:
   23af0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23af4:	strd	r6, [sp, #8]
   23af8:	strd	r8, [sp, #16]
   23afc:	strd	sl, [sp, #24]
   23b00:	str	lr, [sp, #32]
   23b04:	sub	sp, sp, #380	; 0x17c
   23b08:	mov	r5, r0
   23b0c:	mov	r6, r1
   23b10:	mov	r8, r2
   23b14:	mov	r7, r3
   23b18:	ldr	r4, [sp, #420]	; 0x1a4
   23b1c:	add	r0, sp, #136	; 0x88
   23b20:	bl	25700 <flatcc_builder_init@@Base>
   23b24:	mov	r1, #0
   23b28:	add	r0, sp, #48	; 0x30
   23b2c:	bl	3d558 <flatcc_json_printer_init_dynamic_buffer@@Base>
   23b30:	and	r3, r4, #1
   23b34:	strb	r3, [sp, #74]	; 0x4a
   23b38:	ubfx	r3, r4, #1, #1
   23b3c:	strb	r3, [sp, #75]	; 0x4b
   23b40:	ubfx	r3, r4, #2, #1
   23b44:	strb	r3, [sp, #76]	; 0x4c
   23b48:	ubfx	r3, r4, #3, #1
   23b4c:	strb	r3, [sp, #77]	; 0x4d
   23b50:	tst	r4, #16
   23b54:	movne	r3, #2
   23b58:	strbne	r3, [sp, #73]	; 0x49
   23b5c:	tst	r4, #32
   23b60:	beq	23b7c <test_json@@Base+0x8c>
   23b64:	mov	r3, #2
   23b68:	strb	r3, [sp, #73]	; 0x49
   23b6c:	mov	r3, #1
   23b70:	strb	r3, [sp, #74]	; 0x4a
   23b74:	mov	r3, #0
   23b78:	strb	r3, [sp, #75]	; 0x4b
   23b7c:	mov	r0, r6
   23b80:	bl	14578 <strlen@plt>
   23b84:	ldr	r3, [r5, #4]
   23b88:	str	r3, [sp, #8]
   23b8c:	ldr	r3, [r5]
   23b90:	str	r3, [sp, #4]
   23b94:	ldr	r3, [sp, #416]	; 0x1a0
   23b98:	str	r3, [sp]
   23b9c:	mov	r3, r0
   23ba0:	mov	r2, r6
   23ba4:	add	r1, sp, #96	; 0x60
   23ba8:	add	r0, sp, #136	; 0x88
   23bac:	bl	2f9a8 <flatcc_json_parser_table_as_root@@Base>
   23bb0:	cmp	r0, r7
   23bb4:	bne	23c00 <test_json@@Base+0x110>
   23bb8:	cmp	r7, #0
   23bbc:	movne	r4, #0
   23bc0:	movne	r5, r4
   23bc4:	beq	23d58 <test_json@@Base+0x268>
   23bc8:	mov	r0, r4
   23bcc:	bl	29568 <flatcc_builder_aligned_free@@Base>
   23bd0:	add	r0, sp, #136	; 0x88
   23bd4:	bl	258e4 <flatcc_builder_clear@@Base>
   23bd8:	add	r0, sp, #48	; 0x30
   23bdc:	bl	3d684 <flatcc_json_printer_clear@@Base>
   23be0:	mov	r0, r5
   23be4:	add	sp, sp, #380	; 0x17c
   23be8:	ldrd	r4, [sp]
   23bec:	ldrd	r6, [sp, #8]
   23bf0:	ldrd	r8, [sp, #16]
   23bf4:	ldrd	sl, [sp, #24]
   23bf8:	add	sp, sp, #32
   23bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   23c00:	cmp	r7, #0
   23c04:	beq	23d18 <test_json@@Base+0x228>
   23c08:	cmp	r0, #0
   23c0c:	beq	23cd4 <test_json@@Base+0x1e4>
   23c10:	movw	r4, #17216	; 0x4340
   23c14:	movt	r4, #5
   23c18:	ldr	r5, [r4]
   23c1c:	bl	2c400 <flatcc_json_parser_error_string@@Base>
   23c20:	mov	r3, r0
   23c24:	ldr	r2, [sp, #424]	; 0x1a8
   23c28:	movw	r1, #58160	; 0xe330
   23c2c:	movt	r1, #3
   23c30:	mov	r0, r5
   23c34:	bl	14584 <fprintf@plt>
   23c38:	ldr	r5, [r4]
   23c3c:	mov	r0, r7
   23c40:	bl	2c400 <flatcc_json_parser_error_string@@Base>
   23c44:	mov	r2, r0
   23c48:	movw	r1, #58200	; 0xe358
   23c4c:	movt	r1, #3
   23c50:	mov	r0, r5
   23c54:	bl	14584 <fprintf@plt>
   23c58:	mov	r2, r6
   23c5c:	movw	r1, #58292	; 0xe3b4
   23c60:	movt	r1, #3
   23c64:	ldr	r0, [r4]
   23c68:	bl	14584 <fprintf@plt>
   23c6c:	ldr	r3, [sp, #112]	; 0x70
   23c70:	cmp	r3, #1
   23c74:	ble	23ca8 <test_json@@Base+0x1b8>
   23c78:	mov	r4, #0
   23c7c:	movw	r5, #17216	; 0x4340
   23c80:	movt	r5, #5
   23c84:	mov	r6, #32
   23c88:	ldr	r1, [r5]
   23c8c:	mov	r0, r6
   23c90:	bl	145cc <fputc@plt>
   23c94:	add	r4, r4, #1
   23c98:	ldr	r3, [sp, #112]	; 0x70
   23c9c:	sub	r3, r3, #1
   23ca0:	cmp	r3, r4
   23ca4:	bgt	23c88 <test_json@@Base+0x198>
   23ca8:	movw	r3, #17216	; 0x4340
   23cac:	movt	r3, #5
   23cb0:	ldr	r3, [r3]
   23cb4:	mov	r2, #2
   23cb8:	mov	r1, #1
   23cbc:	movw	r0, #58332	; 0xe3dc
   23cc0:	movt	r0, #3
   23cc4:	bl	14548 <fwrite@plt>
   23cc8:	mov	r4, #0
   23ccc:	mvn	r5, #0
   23cd0:	b	23bc8 <test_json@@Base+0xd8>
   23cd4:	movw	r4, #17216	; 0x4340
   23cd8:	movt	r4, #5
   23cdc:	ldr	r5, [r4]
   23ce0:	mov	r0, r7
   23ce4:	bl	2c400 <flatcc_json_parser_error_string@@Base>
   23ce8:	mov	r3, r0
   23cec:	ldr	r2, [sp, #424]	; 0x1a8
   23cf0:	movw	r1, #58232	; 0xe378
   23cf4:	movt	r1, #3
   23cf8:	mov	r0, r5
   23cfc:	bl	14584 <fprintf@plt>
   23d00:	mov	r2, r6
   23d04:	movw	r1, #58292	; 0xe3b4
   23d08:	movt	r1, #3
   23d0c:	ldr	r0, [r4]
   23d10:	bl	14584 <fprintf@plt>
   23d14:	b	23c6c <test_json@@Base+0x17c>
   23d18:	movw	r4, #17216	; 0x4340
   23d1c:	movt	r4, #5
   23d20:	ldr	r5, [r4]
   23d24:	bl	2c400 <flatcc_json_parser_error_string@@Base>
   23d28:	mov	r3, r0
   23d2c:	ldr	r2, [sp, #424]	; 0x1a8
   23d30:	movw	r1, #58296	; 0xe3b8
   23d34:	movt	r1, #3
   23d38:	mov	r0, r5
   23d3c:	bl	14584 <fprintf@plt>
   23d40:	mov	r2, r6
   23d44:	movw	r1, #58292	; 0xe3b4
   23d48:	movt	r1, #3
   23d4c:	ldr	r0, [r4]
   23d50:	bl	14584 <fprintf@plt>
   23d54:	b	23c6c <test_json@@Base+0x17c>
   23d58:	add	r1, sp, #372	; 0x174
   23d5c:	add	r0, sp, #136	; 0x88
   23d60:	bl	29448 <flatcc_builder_finalize_aligned_buffer@@Base>
   23d64:	mov	r4, r0
   23d68:	ldr	r3, [r5, #12]
   23d6c:	ldr	r2, [r5]
   23d70:	ldr	r1, [sp, #372]	; 0x174
   23d74:	bl	2aa28 <flatcc_verify_table_as_root@@Base>
   23d78:	cmp	r0, #0
   23d7c:	bne	23e84 <test_json@@Base+0x394>
   23d80:	ldr	r3, [r5, #8]
   23d84:	str	r3, [sp]
   23d88:	ldr	r3, [r5]
   23d8c:	ldr	r2, [sp, #372]	; 0x174
   23d90:	mov	r1, r4
   23d94:	add	r0, sp, #48	; 0x30
   23d98:	bl	3ce38 <flatcc_json_printer_table_as_root@@Base>
   23d9c:	add	r1, sp, #368	; 0x170
   23da0:	add	r0, sp, #48	; 0x30
   23da4:	bl	3d5fc <flatcc_json_printer_get_buffer@@Base>
   23da8:	subs	r6, r0, #0
   23dac:	beq	23dc4 <test_json@@Base+0x2d4>
   23db0:	mov	r1, r6
   23db4:	mov	r0, r8
   23db8:	bl	14500 <strcmp@plt>
   23dbc:	subs	r5, r0, #0
   23dc0:	beq	23bc8 <test_json@@Base+0xd8>
   23dc4:	movw	r5, #17216	; 0x4340
   23dc8:	movt	r5, #5
   23dcc:	ldr	r2, [sp, #424]	; 0x1a8
   23dd0:	movw	r1, #58452	; 0xe454
   23dd4:	movt	r1, #3
   23dd8:	ldr	r0, [r5]
   23ddc:	bl	14584 <fprintf@plt>
   23de0:	movw	r7, #58292	; 0xe3b4
   23de4:	movt	r7, #3
   23de8:	mov	r2, r6
   23dec:	mov	r1, r7
   23df0:	ldr	r0, [r5]
   23df4:	bl	14584 <fprintf@plt>
   23df8:	ldr	r3, [r5]
   23dfc:	mov	r2, #10
   23e00:	mov	r1, #1
   23e04:	movw	r0, #58508	; 0xe48c
   23e08:	movt	r0, #3
   23e0c:	bl	14548 <fwrite@plt>
   23e10:	mov	r2, r8
   23e14:	mov	r1, r7
   23e18:	ldr	r0, [r5]
   23e1c:	bl	14584 <fprintf@plt>
   23e20:	cmp	r4, #0
   23e24:	mvneq	r5, #0
   23e28:	beq	23bc8 <test_json@@Base+0xd8>
   23e2c:	ldr	r7, [sp, #372]	; 0x174
   23e30:	movw	r3, #17216	; 0x4340
   23e34:	movt	r3, #5
   23e38:	ldr	r8, [r3]
   23e3c:	movw	r2, #58520	; 0xe498
   23e40:	movt	r2, #3
   23e44:	movw	r1, #58536	; 0xe4a8
   23e48:	movt	r1, #3
   23e4c:	mov	r0, r8
   23e50:	bl	14584 <fprintf@plt>
   23e54:	cmp	r7, #0
   23e58:	beq	23f80 <test_json@@Base+0x490>
   23e5c:	sub	r9, r4, #1
   23e60:	mov	r5, #0
   23e64:	movw	fp, #58552	; 0xe4b8
   23e68:	movt	fp, #3
   23e6c:	movw	r3, #58544	; 0xe4b0
   23e70:	movt	r3, #3
   23e74:	str	r3, [sp, #20]
   23e78:	movw	sl, #58560	; 0xe4c0
   23e7c:	movt	sl, #3
   23e80:	b	23f0c <test_json@@Base+0x41c>
   23e84:	movw	r3, #17216	; 0x4340
   23e88:	movt	r3, #5
   23e8c:	ldr	r5, [r3]
   23e90:	bl	29c70 <flatcc_verify_error_string@@Base>
   23e94:	str	r0, [sp]
   23e98:	ldr	r3, [sp, #424]	; 0x1a8
   23e9c:	movw	r2, #58336	; 0xe3e0
   23ea0:	movt	r2, #3
   23ea4:	movw	r1, #58412	; 0xe42c
   23ea8:	movt	r1, #3
   23eac:	mov	r0, r5
   23eb0:	bl	14584 <fprintf@plt>
   23eb4:	b	23e20 <test_json@@Base+0x330>
   23eb8:	mov	r2, r5
   23ebc:	mov	r1, fp
   23ec0:	mov	r0, r8
   23ec4:	bl	14584 <fprintf@plt>
   23ec8:	ldrb	r2, [r9, #1]!
   23ecc:	mov	r1, sl
   23ed0:	mov	r0, r8
   23ed4:	bl	14584 <fprintf@plt>
   23ed8:	ldrb	r3, [r9]
   23edc:	sub	r2, r3, #32
   23ee0:	uxtb	r2, r2
   23ee4:	cmp	r2, #95	; 0x5f
   23ee8:	movcs	r3, #46	; 0x2e
   23eec:	add	r2, sp, #376	; 0x178
   23ef0:	add	r6, r2, r6
   23ef4:	strb	r3, [r6, #-348]	; 0xfffffea4
   23ef8:	mov	r3, #0
   23efc:	strb	r3, [r6, #-347]	; 0xfffffea5
   23f00:	add	r5, r5, #1
   23f04:	cmp	r7, r5
   23f08:	beq	23f48 <test_json@@Base+0x458>
   23f0c:	ands	r6, r5, #15
   23f10:	bne	23f30 <test_json@@Base+0x440>
   23f14:	cmp	r5, #0
   23f18:	beq	23eb8 <test_json@@Base+0x3c8>
   23f1c:	add	r2, sp, #28
   23f20:	ldr	r1, [sp, #20]
   23f24:	mov	r0, r8
   23f28:	bl	14584 <fprintf@plt>
   23f2c:	b	23eb8 <test_json@@Base+0x3c8>
   23f30:	tst	r5, #7
   23f34:	bne	23ec8 <test_json@@Base+0x3d8>
   23f38:	mov	r1, r8
   23f3c:	mov	r0, #32
   23f40:	bl	145cc <fputc@plt>
   23f44:	b	23ec8 <test_json@@Base+0x3d8>
   23f48:	tst	r7, #15
   23f4c:	beq	23f80 <test_json@@Base+0x490>
   23f50:	movw	r5, #58568	; 0xe4c8
   23f54:	movt	r5, #3
   23f58:	mov	r9, #3
   23f5c:	mov	r6, #1
   23f60:	mov	r3, r8
   23f64:	mov	r2, r9
   23f68:	mov	r1, r6
   23f6c:	mov	r0, r5
   23f70:	bl	14548 <fwrite@plt>
   23f74:	add	r7, r7, #1
   23f78:	tst	r7, #15
   23f7c:	bne	23f60 <test_json@@Base+0x470>
   23f80:	add	r2, sp, #28
   23f84:	movw	r1, #58544	; 0xe4b0
   23f88:	movt	r1, #3
   23f8c:	mov	r0, r8
   23f90:	bl	14584 <fprintf@plt>
   23f94:	mvn	r5, #0
   23f98:	b	23bc8 <test_json@@Base+0xd8>

00023f9c <edge_case_tests@@Base>:
   23f9c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   23fa0:	strd	r6, [sp, #8]
   23fa4:	strd	r8, [sp, #16]
   23fa8:	str	lr, [sp, #24]
   23fac:	sub	sp, sp, #20
   23fb0:	movw	r6, #57020	; 0xdebc
   23fb4:	movt	r6, #3
   23fb8:	mov	r3, #158	; 0x9e
   23fbc:	str	r3, [sp, #8]
   23fc0:	mov	r4, #0
   23fc4:	str	r4, [sp, #4]
   23fc8:	str	r4, [sp]
   23fcc:	mov	r3, r4
   23fd0:	movw	r2, #58572	; 0xe4cc
   23fd4:	movt	r2, #3
   23fd8:	movw	r1, #58604	; 0xe4ec
   23fdc:	movt	r1, #3
   23fe0:	mov	r0, r6
   23fe4:	bl	23af0 <test_json@@Base>
   23fe8:	mov	r5, r0
   23fec:	movw	r7, #58660	; 0xe524
   23ff0:	movt	r7, #3
   23ff4:	movw	r9, #58696	; 0xe548
   23ff8:	movt	r9, #3
   23ffc:	mov	r3, #168	; 0xa8
   24000:	str	r3, [sp, #8]
   24004:	str	r4, [sp, #4]
   24008:	mov	r8, #2
   2400c:	str	r8, [sp]
   24010:	mov	r3, r4
   24014:	mov	r2, r7
   24018:	mov	r1, r9
   2401c:	mov	r0, r6
   24020:	bl	23af0 <test_json@@Base>
   24024:	orr	r5, r5, r0
   24028:	mov	r3, #172	; 0xac
   2402c:	str	r3, [sp, #8]
   24030:	str	r8, [sp, #4]
   24034:	str	r4, [sp]
   24038:	mov	r3, r4
   2403c:	movw	r2, #58732	; 0xe56c
   24040:	movt	r2, #3
   24044:	movw	r1, #58764	; 0xe58c
   24048:	movt	r1, #3
   2404c:	mov	r0, r6
   24050:	bl	23af0 <test_json@@Base>
   24054:	orr	r5, r5, r0
   24058:	mov	r3, #176	; 0xb0
   2405c:	str	r3, [sp, #8]
   24060:	mov	r3, #4
   24064:	str	r3, [sp, #4]
   24068:	str	r8, [sp]
   2406c:	mov	r3, r4
   24070:	movw	r2, #58804	; 0xe5b4
   24074:	movt	r2, #3
   24078:	mov	r1, r9
   2407c:	mov	r0, r6
   24080:	bl	23af0 <test_json@@Base>
   24084:	orr	r5, r5, r0
   24088:	mov	r3, #180	; 0xb4
   2408c:	str	r3, [sp, #8]
   24090:	mov	r3, #8
   24094:	str	r3, [sp, #4]
   24098:	str	r4, [sp]
   2409c:	mov	r3, r4
   240a0:	movw	r2, #58824	; 0xe5c8
   240a4:	movt	r2, #3
   240a8:	movw	r1, #59100	; 0xe6dc
   240ac:	movt	r1, #3
   240b0:	mov	r0, r6
   240b4:	bl	23af0 <test_json@@Base>
   240b8:	orr	r5, r5, r0
   240bc:	mov	r3, #195	; 0xc3
   240c0:	str	r3, [sp, #8]
   240c4:	str	r4, [sp, #4]
   240c8:	str	r8, [sp]
   240cc:	mov	r3, r4
   240d0:	mov	r2, r7
   240d4:	movw	r1, #59136	; 0xe700
   240d8:	movt	r1, #3
   240dc:	mov	r0, r6
   240e0:	bl	23af0 <test_json@@Base>
   240e4:	orr	r5, r5, r0
   240e8:	movw	r7, #59176	; 0xe728
   240ec:	movt	r7, #3
   240f0:	movw	r9, #59204	; 0xe744
   240f4:	movt	r9, #3
   240f8:	mov	r3, #199	; 0xc7
   240fc:	str	r3, [sp, #8]
   24100:	str	r4, [sp, #4]
   24104:	mov	r8, #1
   24108:	str	r8, [sp]
   2410c:	mov	r3, r4
   24110:	mov	r2, r7
   24114:	mov	r1, r9
   24118:	mov	r0, r6
   2411c:	bl	23af0 <test_json@@Base>
   24120:	orr	r5, r5, r0
   24124:	mov	r3, #203	; 0xcb
   24128:	str	r3, [sp, #8]
   2412c:	str	r8, [sp, #4]
   24130:	str	r8, [sp]
   24134:	mov	r3, r4
   24138:	movw	r2, #59256	; 0xe778
   2413c:	movt	r2, #3
   24140:	mov	r1, r9
   24144:	mov	r0, r6
   24148:	bl	23af0 <test_json@@Base>
   2414c:	orr	r5, r5, r0
   24150:	mov	r3, #209	; 0xd1
   24154:	str	r3, [sp, #8]
   24158:	str	r4, [sp, #4]
   2415c:	str	r8, [sp]
   24160:	mov	r3, r4
   24164:	mov	r2, r7
   24168:	movw	r1, #59280	; 0xe790
   2416c:	movt	r1, #3
   24170:	mov	r0, r6
   24174:	bl	23af0 <test_json@@Base>
   24178:	orr	r0, r5, r0
   2417c:	add	sp, sp, #20
   24180:	ldrd	r4, [sp]
   24184:	ldrd	r6, [sp, #8]
   24188:	ldrd	r8, [sp, #16]
   2418c:	add	sp, sp, #24
   24190:	pop	{pc}		; (ldr pc, [sp], #4)

00024194 <error_case_tests@@Base>:
   24194:	strd	r4, [sp, #-16]!
   24198:	str	r6, [sp, #8]
   2419c:	str	lr, [sp, #12]
   241a0:	sub	sp, sp, #16
   241a4:	movw	r6, #57020	; 0xdebc
   241a8:	movt	r6, #3
   241ac:	movw	r3, #285	; 0x11d
   241b0:	str	r3, [sp, #8]
   241b4:	mov	r4, #0
   241b8:	str	r4, [sp, #4]
   241bc:	str	r4, [sp]
   241c0:	mov	r3, #13
   241c4:	mov	r2, r4
   241c8:	movw	r1, #59396	; 0xe804
   241cc:	movt	r1, #3
   241d0:	mov	r0, r6
   241d4:	bl	23af0 <test_json@@Base>
   241d8:	mov	r5, r0
   241dc:	movw	r3, #287	; 0x11f
   241e0:	str	r3, [sp, #8]
   241e4:	str	r4, [sp, #4]
   241e8:	str	r4, [sp]
   241ec:	mov	r3, #13
   241f0:	mov	r2, r4
   241f4:	movw	r1, #59424	; 0xe820
   241f8:	movt	r1, #3
   241fc:	mov	r0, r6
   24200:	bl	23af0 <test_json@@Base>
   24204:	orr	r5, r5, r0
   24208:	movw	r3, #289	; 0x121
   2420c:	str	r3, [sp, #8]
   24210:	str	r4, [sp, #4]
   24214:	str	r4, [sp]
   24218:	mov	r3, #13
   2421c:	mov	r2, r4
   24220:	movw	r1, #59524	; 0xe884
   24224:	movt	r1, #3
   24228:	mov	r0, r6
   2422c:	bl	23af0 <test_json@@Base>
   24230:	orr	r5, r5, r0
   24234:	movw	r3, #291	; 0x123
   24238:	str	r3, [sp, #8]
   2423c:	str	r4, [sp, #4]
   24240:	str	r4, [sp]
   24244:	mov	r3, #13
   24248:	mov	r2, r4
   2424c:	movw	r1, #59620	; 0xe8e4
   24250:	movt	r1, #3
   24254:	mov	r0, r6
   24258:	bl	23af0 <test_json@@Base>
   2425c:	orr	r5, r5, r0
   24260:	movw	r3, #293	; 0x125
   24264:	str	r3, [sp, #8]
   24268:	str	r4, [sp, #4]
   2426c:	str	r4, [sp]
   24270:	mov	r3, #13
   24274:	mov	r2, r4
   24278:	movw	r1, #59708	; 0xe93c
   2427c:	movt	r1, #3
   24280:	mov	r0, r6
   24284:	bl	23af0 <test_json@@Base>
   24288:	orr	r5, r5, r0
   2428c:	mov	r3, #296	; 0x128
   24290:	str	r3, [sp, #8]
   24294:	str	r4, [sp, #4]
   24298:	str	r4, [sp]
   2429c:	mov	r3, #13
   242a0:	mov	r2, r4
   242a4:	movw	r1, #59796	; 0xe994
   242a8:	movt	r1, #3
   242ac:	mov	r0, r6
   242b0:	bl	23af0 <test_json@@Base>
   242b4:	orr	r5, r5, r0
   242b8:	movw	r3, #299	; 0x12b
   242bc:	str	r3, [sp, #8]
   242c0:	str	r4, [sp, #4]
   242c4:	str	r4, [sp]
   242c8:	mov	r3, #13
   242cc:	mov	r2, r4
   242d0:	movw	r1, #59956	; 0xea34
   242d4:	movt	r1, #3
   242d8:	mov	r0, r6
   242dc:	bl	23af0 <test_json@@Base>
   242e0:	orr	r5, r5, r0
   242e4:	movw	r3, #303	; 0x12f
   242e8:	str	r3, [sp, #8]
   242ec:	str	r4, [sp, #4]
   242f0:	str	r4, [sp]
   242f4:	mov	r3, #13
   242f8:	mov	r2, r4
   242fc:	movw	r1, #60112	; 0xead0
   24300:	movt	r1, #3
   24304:	mov	r0, r6
   24308:	bl	23af0 <test_json@@Base>
   2430c:	orr	r5, r5, r0
   24310:	movw	r3, #307	; 0x133
   24314:	str	r3, [sp, #8]
   24318:	str	r4, [sp, #4]
   2431c:	str	r4, [sp]
   24320:	mov	r3, #13
   24324:	mov	r2, r4
   24328:	movw	r1, #60312	; 0xeb98
   2432c:	movt	r1, #3
   24330:	mov	r0, r6
   24334:	bl	23af0 <test_json@@Base>
   24338:	orr	r5, r5, r0
   2433c:	movw	r3, #311	; 0x137
   24340:	str	r3, [sp, #8]
   24344:	str	r4, [sp, #4]
   24348:	str	r4, [sp]
   2434c:	mov	r3, #5
   24350:	mov	r2, r4
   24354:	movw	r1, #60512	; 0xec60
   24358:	movt	r1, #3
   2435c:	mov	r0, r6
   24360:	bl	23af0 <test_json@@Base>
   24364:	orr	r5, r5, r0
   24368:	movw	r3, #314	; 0x13a
   2436c:	str	r3, [sp, #8]
   24370:	str	r4, [sp, #4]
   24374:	str	r4, [sp]
   24378:	mov	r3, #5
   2437c:	mov	r2, r4
   24380:	movw	r1, #60536	; 0xec78
   24384:	movt	r1, #3
   24388:	mov	r0, r6
   2438c:	bl	23af0 <test_json@@Base>
   24390:	orr	r5, r5, r0
   24394:	movw	r3, #317	; 0x13d
   24398:	str	r3, [sp, #8]
   2439c:	str	r4, [sp, #4]
   243a0:	str	r4, [sp]
   243a4:	mov	r3, #5
   243a8:	mov	r2, r4
   243ac:	movw	r1, #60576	; 0xeca0
   243b0:	movt	r1, #3
   243b4:	mov	r0, r6
   243b8:	bl	23af0 <test_json@@Base>
   243bc:	orr	r0, r5, r0
   243c0:	add	sp, sp, #16
   243c4:	ldrd	r4, [sp]
   243c8:	ldr	r6, [sp, #8]
   243cc:	add	sp, sp, #12
   243d0:	pop	{pc}		; (ldr pc, [sp], #4)

000243d4 <base64_tests@@Base>:
   243d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   243d8:	strd	r6, [sp, #8]
   243dc:	str	r8, [sp, #16]
   243e0:	str	lr, [sp, #20]
   243e4:	sub	sp, sp, #16
   243e8:	movw	r6, #57020	; 0xdebc
   243ec:	movt	r6, #3
   243f0:	movw	r3, #369	; 0x171
   243f4:	str	r3, [sp, #8]
   243f8:	mov	r4, #0
   243fc:	str	r4, [sp, #4]
   24400:	str	r4, [sp]
   24404:	mov	r3, r4
   24408:	movw	r2, #58804	; 0xe5b4
   2440c:	movt	r2, #3
   24410:	movw	r1, #60632	; 0xecd8
   24414:	movt	r1, #3
   24418:	mov	r0, r6
   2441c:	bl	23af0 <test_json@@Base>
   24420:	mov	r5, r0
   24424:	mov	r3, #372	; 0x174
   24428:	str	r3, [sp, #8]
   2442c:	str	r4, [sp, #4]
   24430:	str	r4, [sp]
   24434:	mov	r3, r4
   24438:	movw	r2, #60656	; 0xecf0
   2443c:	movt	r2, #3
   24440:	movw	r1, #60692	; 0xed14
   24444:	movt	r1, #3
   24448:	mov	r0, r6
   2444c:	bl	23af0 <test_json@@Base>
   24450:	orr	r5, r5, r0
   24454:	movw	r8, #60732	; 0xed3c
   24458:	movt	r8, #3
   2445c:	mov	r3, #376	; 0x178
   24460:	str	r3, [sp, #8]
   24464:	str	r4, [sp, #4]
   24468:	str	r4, [sp]
   2446c:	mov	r3, r4
   24470:	mov	r2, r8
   24474:	movw	r1, #60912	; 0xedf0
   24478:	movt	r1, #3
   2447c:	mov	r0, r6
   24480:	bl	23af0 <test_json@@Base>
   24484:	orr	r5, r5, r0
   24488:	movw	r7, #61100	; 0xeeac
   2448c:	movt	r7, #3
   24490:	movw	r3, #379	; 0x17b
   24494:	str	r3, [sp, #8]
   24498:	str	r4, [sp, #4]
   2449c:	str	r4, [sp]
   244a0:	mov	r3, r4
   244a4:	mov	r2, r7
   244a8:	movw	r1, #61284	; 0xef64
   244ac:	movt	r1, #3
   244b0:	mov	r0, r6
   244b4:	bl	23af0 <test_json@@Base>
   244b8:	orr	r5, r5, r0
   244bc:	movw	r3, #382	; 0x17e
   244c0:	str	r3, [sp, #8]
   244c4:	str	r4, [sp, #4]
   244c8:	str	r4, [sp]
   244cc:	mov	r3, r4
   244d0:	mov	r2, r8
   244d4:	movw	r1, #61472	; 0xf020
   244d8:	movt	r1, #3
   244dc:	mov	r0, r6
   244e0:	bl	23af0 <test_json@@Base>
   244e4:	orr	r5, r5, r0
   244e8:	movw	r3, #385	; 0x181
   244ec:	str	r3, [sp, #8]
   244f0:	str	r4, [sp, #4]
   244f4:	str	r4, [sp]
   244f8:	mov	r3, r4
   244fc:	mov	r2, r7
   24500:	movw	r1, #61656	; 0xf0d8
   24504:	movt	r1, #3
   24508:	mov	r0, r6
   2450c:	bl	23af0 <test_json@@Base>
   24510:	orr	r5, r5, r0
   24514:	mov	r3, #388	; 0x184
   24518:	str	r3, [sp, #8]
   2451c:	str	r4, [sp, #4]
   24520:	str	r4, [sp]
   24524:	mov	r3, #31
   24528:	mov	r2, r4
   2452c:	movw	r1, #61844	; 0xf194
   24530:	movt	r1, #3
   24534:	mov	r0, r6
   24538:	bl	23af0 <test_json@@Base>
   2453c:	orr	r5, r5, r0
   24540:	movw	r3, #391	; 0x187
   24544:	str	r3, [sp, #8]
   24548:	str	r4, [sp, #4]
   2454c:	str	r4, [sp]
   24550:	mov	r3, #32
   24554:	mov	r2, r4
   24558:	movw	r1, #62032	; 0xf250
   2455c:	movt	r1, #3
   24560:	mov	r0, r6
   24564:	bl	23af0 <test_json@@Base>
   24568:	orr	r0, r5, r0
   2456c:	add	sp, sp, #16
   24570:	ldrd	r4, [sp]
   24574:	ldrd	r6, [sp, #8]
   24578:	ldr	r8, [sp, #16]
   2457c:	add	sp, sp, #20
   24580:	pop	{pc}		; (ldr pc, [sp], #4)

00024584 <mixed_type_union_tests@@Base>:
   24584:	strd	r4, [sp, #-20]!	; 0xffffffec
   24588:	strd	r6, [sp, #8]
   2458c:	str	lr, [sp, #16]
   24590:	sub	sp, sp, #20
   24594:	ldr	r6, [pc, #352]	; 246fc <mixed_type_union_tests@@Base+0x178>
   24598:	mov	r3, #432	; 0x1b0
   2459c:	str	r3, [sp, #8]
   245a0:	mov	r4, #0
   245a4:	str	r4, [sp, #4]
   245a8:	str	r4, [sp]
   245ac:	mov	r3, r4
   245b0:	movw	r2, #62220	; 0xf30c
   245b4:	movt	r2, #3
   245b8:	movw	r1, #62292	; 0xf354
   245bc:	movt	r1, #3
   245c0:	mov	r0, r6
   245c4:	bl	23af0 <test_json@@Base>
   245c8:	mov	r5, r0
   245cc:	movw	r7, #62372	; 0xf3a4
   245d0:	movt	r7, #3
   245d4:	movw	r3, #437	; 0x1b5
   245d8:	str	r3, [sp, #8]
   245dc:	str	r4, [sp, #4]
   245e0:	str	r4, [sp]
   245e4:	mov	r3, r4
   245e8:	mov	r2, r7
   245ec:	movw	r1, #62492	; 0xf41c
   245f0:	movt	r1, #3
   245f4:	mov	r0, r6
   245f8:	bl	23af0 <test_json@@Base>
   245fc:	orr	r5, r5, r0
   24600:	movw	r3, #442	; 0x1ba
   24604:	str	r3, [sp, #8]
   24608:	str	r4, [sp, #4]
   2460c:	str	r4, [sp]
   24610:	mov	r3, r4
   24614:	mov	r2, r7
   24618:	movw	r1, #62624	; 0xf4a0
   2461c:	movt	r1, #3
   24620:	mov	r0, r6
   24624:	bl	23af0 <test_json@@Base>
   24628:	orr	r5, r5, r0
   2462c:	movw	r3, #449	; 0x1c1
   24630:	str	r3, [sp, #8]
   24634:	str	r4, [sp, #4]
   24638:	str	r4, [sp]
   2463c:	mov	r3, r4
   24640:	movw	r2, #62776	; 0xf538
   24644:	movt	r2, #3
   24648:	movw	r1, #62964	; 0xf5f4
   2464c:	movt	r1, #3
   24650:	mov	r0, r6
   24654:	bl	23af0 <test_json@@Base>
   24658:	orr	r5, r5, r0
   2465c:	movw	r3, #458	; 0x1ca
   24660:	str	r3, [sp, #8]
   24664:	str	r4, [sp, #4]
   24668:	str	r4, [sp]
   2466c:	mov	r3, r4
   24670:	movw	r2, #63188	; 0xf6d4
   24674:	movt	r2, #3
   24678:	movw	r1, #63412	; 0xf7b4
   2467c:	movt	r1, #3
   24680:	mov	r0, r6
   24684:	bl	23af0 <test_json@@Base>
   24688:	orr	r5, r5, r0
   2468c:	movw	r3, #469	; 0x1d5
   24690:	str	r3, [sp, #8]
   24694:	str	r4, [sp, #4]
   24698:	str	r4, [sp]
   2469c:	mov	r3, r4
   246a0:	movw	r2, #63676	; 0xf8bc
   246a4:	movt	r2, #3
   246a8:	movw	r1, #64004	; 0xfa04
   246ac:	movt	r1, #3
   246b0:	mov	r0, r6
   246b4:	bl	23af0 <test_json@@Base>
   246b8:	orr	r5, r5, r0
   246bc:	movw	r3, #474	; 0x1da
   246c0:	str	r3, [sp, #8]
   246c4:	str	r4, [sp, #4]
   246c8:	str	r4, [sp]
   246cc:	mov	r3, r4
   246d0:	mov	r2, r7
   246d4:	movw	r1, #64392	; 0xfb88
   246d8:	movt	r1, #3
   246dc:	mov	r0, r6
   246e0:	bl	23af0 <test_json@@Base>
   246e4:	orr	r0, r5, r0
   246e8:	add	sp, sp, #20
   246ec:	ldrd	r4, [sp]
   246f0:	ldrd	r6, [sp, #8]
   246f4:	add	sp, sp, #16
   246f8:	pop	{pc}		; (ldr pc, [sp], #4)
   246fc:	andeq	sp, r3, ip, asr #29

00024700 <union_vector_tests@@Base>:
   24700:	strd	r4, [sp, #-20]!	; 0xffffffec
   24704:	strd	r6, [sp, #8]
   24708:	str	lr, [sp, #16]
   2470c:	sub	sp, sp, #20
   24710:	movw	r7, #64536	; 0xfc18
   24714:	movt	r7, #3
   24718:	ldr	r6, [pc, #300]	; 2484c <union_vector_tests@@Base+0x14c>
   2471c:	movw	r3, #485	; 0x1e5
   24720:	str	r3, [sp, #8]
   24724:	mov	r4, #0
   24728:	str	r4, [sp, #4]
   2472c:	str	r4, [sp]
   24730:	mov	r3, r4
   24734:	mov	r2, r7
   24738:	movw	r1, #64592	; 0xfc50
   2473c:	movt	r1, #3
   24740:	mov	r0, r6
   24744:	bl	23af0 <test_json@@Base>
   24748:	mov	r5, r0
   2474c:	mov	r3, #488	; 0x1e8
   24750:	str	r3, [sp, #8]
   24754:	str	r4, [sp, #4]
   24758:	str	r4, [sp]
   2475c:	mov	r3, r4
   24760:	movw	r2, #64656	; 0xfc90
   24764:	movt	r2, #3
   24768:	movw	r1, #64700	; 0xfcbc
   2476c:	movt	r1, #3
   24770:	mov	r0, r6
   24774:	bl	23af0 <test_json@@Base>
   24778:	orr	r5, r5, r0
   2477c:	movw	r3, #491	; 0x1eb
   24780:	str	r3, [sp, #8]
   24784:	str	r4, [sp, #4]
   24788:	str	r4, [sp]
   2478c:	mov	r3, r4
   24790:	movw	r2, #64752	; 0xfcf0
   24794:	movt	r2, #3
   24798:	movw	r1, #64820	; 0xfd34
   2479c:	movt	r1, #3
   247a0:	mov	r0, r6
   247a4:	bl	23af0 <test_json@@Base>
   247a8:	orr	r5, r5, r0
   247ac:	movw	r3, #494	; 0x1ee
   247b0:	str	r3, [sp, #8]
   247b4:	str	r4, [sp, #4]
   247b8:	str	r4, [sp]
   247bc:	mov	r3, r4
   247c0:	movw	r2, #64900	; 0xfd84
   247c4:	movt	r2, #3
   247c8:	movw	r1, #65008	; 0xfdf0
   247cc:	movt	r1, #3
   247d0:	mov	r0, r6
   247d4:	bl	23af0 <test_json@@Base>
   247d8:	orr	r5, r5, r0
   247dc:	movw	r3, #497	; 0x1f1
   247e0:	str	r3, [sp, #8]
   247e4:	str	r4, [sp, #4]
   247e8:	str	r4, [sp]
   247ec:	mov	r3, r4
   247f0:	mov	r2, r7
   247f4:	movw	r1, #65136	; 0xfe70
   247f8:	movt	r1, #3
   247fc:	mov	r0, r6
   24800:	bl	23af0 <test_json@@Base>
   24804:	orr	r5, r5, r0
   24808:	mov	r3, #500	; 0x1f4
   2480c:	str	r3, [sp, #8]
   24810:	str	r4, [sp, #4]
   24814:	str	r4, [sp]
   24818:	mov	r3, r4
   2481c:	movw	r2, #65200	; 0xfeb0
   24820:	movt	r2, #3
   24824:	movw	r1, #65292	; 0xff0c
   24828:	movt	r1, #3
   2482c:	mov	r0, r6
   24830:	bl	23af0 <test_json@@Base>
   24834:	orr	r0, r5, r0
   24838:	add	sp, sp, #20
   2483c:	ldrd	r4, [sp]
   24840:	ldrd	r6, [sp, #8]
   24844:	add	sp, sp, #16
   24848:	pop	{pc}		; (ldr pc, [sp], #4)
   2484c:	ldrdeq	sp, [r3], -ip

00024850 <main@@Base>:
   24850:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24854:	strd	r6, [sp, #8]
   24858:	strd	r8, [sp, #16]
   2485c:	str	sl, [sp, #24]
   24860:	str	lr, [sp, #28]
   24864:	sub	sp, sp, #16
   24868:	bl	23f9c <edge_case_tests@@Base>
   2486c:	mov	r5, r0
   24870:	bl	24194 <error_case_tests@@Base>
   24874:	orr	r5, r5, r0
   24878:	bl	24700 <union_vector_tests@@Base>
   2487c:	orr	r5, r5, r0
   24880:	bl	243d4 <base64_tests@@Base>
   24884:	orr	r5, r5, r0
   24888:	bl	24584 <mixed_type_union_tests@@Base>
   2488c:	orr	r5, r5, r0
   24890:	movw	r7, #58804	; 0xe5b4
   24894:	movt	r7, #3
   24898:	movw	r6, #57020	; 0xdebc
   2489c:	movt	r6, #3
   248a0:	movw	r3, #525	; 0x20d
   248a4:	str	r3, [sp, #8]
   248a8:	mov	r4, #0
   248ac:	str	r4, [sp, #4]
   248b0:	str	r4, [sp]
   248b4:	mov	r3, r4
   248b8:	mov	r2, r7
   248bc:	movw	r1, #65396	; 0xff74
   248c0:	movt	r1, #3
   248c4:	mov	r0, r6
   248c8:	bl	23af0 <test_json@@Base>
   248cc:	orr	r5, r5, r0
   248d0:	movw	r8, #65420	; 0xff8c
   248d4:	movt	r8, #3
   248d8:	mov	r3, #528	; 0x210
   248dc:	str	r3, [sp, #8]
   248e0:	str	r4, [sp, #4]
   248e4:	str	r4, [sp]
   248e8:	mov	r3, r4
   248ec:	mov	r2, r8
   248f0:	movw	r1, #65456	; 0xffb0
   248f4:	movt	r1, #3
   248f8:	mov	r0, r6
   248fc:	bl	23af0 <test_json@@Base>
   24900:	orr	r5, r5, r0
   24904:	movw	sl, #65496	; 0xffd8
   24908:	movt	sl, #3
   2490c:	movw	r3, #531	; 0x213
   24910:	str	r3, [sp, #8]
   24914:	str	r4, [sp, #4]
   24918:	str	r4, [sp]
   2491c:	mov	r3, r4
   24920:	mov	r2, sl
   24924:	movw	r1, #65532	; 0xfffc
   24928:	movt	r1, #3
   2492c:	mov	r0, r6
   24930:	bl	23af0 <test_json@@Base>
   24934:	orr	r5, r5, r0
   24938:	movw	r9, #36	; 0x24
   2493c:	movt	r9, #4
   24940:	movw	r3, #534	; 0x216
   24944:	str	r3, [sp, #8]
   24948:	str	r4, [sp, #4]
   2494c:	str	r4, [sp]
   24950:	mov	r3, r4
   24954:	mov	r2, r9
   24958:	movw	r1, #80	; 0x50
   2495c:	movt	r1, #4
   24960:	mov	r0, r6
   24964:	bl	23af0 <test_json@@Base>
   24968:	orr	r5, r5, r0
   2496c:	movw	r3, #537	; 0x219
   24970:	str	r3, [sp, #8]
   24974:	str	r4, [sp, #4]
   24978:	str	r4, [sp]
   2497c:	mov	r3, r4
   24980:	mov	r2, r9
   24984:	movw	r1, #132	; 0x84
   24988:	movt	r1, #4
   2498c:	mov	r0, r6
   24990:	bl	23af0 <test_json@@Base>
   24994:	orr	r5, r5, r0
   24998:	mov	r3, #540	; 0x21c
   2499c:	str	r3, [sp, #8]
   249a0:	str	r4, [sp, #4]
   249a4:	str	r4, [sp]
   249a8:	mov	r3, r4
   249ac:	mov	r2, r8
   249b0:	movw	r1, #192	; 0xc0
   249b4:	movt	r1, #4
   249b8:	mov	r0, r6
   249bc:	bl	23af0 <test_json@@Base>
   249c0:	orr	r5, r5, r0
   249c4:	movw	r3, #543	; 0x21f
   249c8:	str	r3, [sp, #8]
   249cc:	str	r4, [sp, #4]
   249d0:	str	r4, [sp]
   249d4:	mov	r3, r4
   249d8:	mov	r2, sl
   249dc:	movw	r1, #232	; 0xe8
   249e0:	movt	r1, #4
   249e4:	mov	r0, r6
   249e8:	bl	23af0 <test_json@@Base>
   249ec:	orr	r5, r5, r0
   249f0:	movw	r3, #547	; 0x223
   249f4:	str	r3, [sp, #8]
   249f8:	str	r4, [sp, #4]
   249fc:	str	r4, [sp]
   24a00:	mov	r3, r4
   24a04:	mov	r2, r7
   24a08:	movw	r1, #276	; 0x114
   24a0c:	movt	r1, #4
   24a10:	mov	r0, r6
   24a14:	bl	23af0 <test_json@@Base>
   24a18:	orr	r5, r5, r0
   24a1c:	movw	r3, #551	; 0x227
   24a20:	str	r3, [sp, #8]
   24a24:	str	r4, [sp, #4]
   24a28:	str	r4, [sp]
   24a2c:	mov	r3, r4
   24a30:	mov	r2, r7
   24a34:	movw	r1, #58696	; 0xe548
   24a38:	movt	r1, #3
   24a3c:	mov	r0, r6
   24a40:	bl	23af0 <test_json@@Base>
   24a44:	orr	r5, r5, r0
   24a48:	movw	r3, #601	; 0x259
   24a4c:	str	r3, [sp, #8]
   24a50:	str	r4, [sp, #4]
   24a54:	str	r4, [sp]
   24a58:	mov	r3, r4
   24a5c:	mov	r2, r8
   24a60:	movw	r1, #316	; 0x13c
   24a64:	movt	r1, #4
   24a68:	mov	r0, r6
   24a6c:	bl	23af0 <test_json@@Base>
   24a70:	orr	r5, r5, r0
   24a74:	mov	r3, #604	; 0x25c
   24a78:	str	r3, [sp, #8]
   24a7c:	str	r4, [sp, #4]
   24a80:	str	r4, [sp]
   24a84:	mov	r3, r4
   24a88:	mov	r2, sl
   24a8c:	movw	r1, #352	; 0x160
   24a90:	movt	r1, #4
   24a94:	mov	r0, r6
   24a98:	bl	23af0 <test_json@@Base>
   24a9c:	orr	r5, r5, r0
   24aa0:	movw	r3, #607	; 0x25f
   24aa4:	str	r3, [sp, #8]
   24aa8:	str	r4, [sp, #4]
   24aac:	str	r4, [sp]
   24ab0:	mov	r3, r4
   24ab4:	movw	r2, #388	; 0x184
   24ab8:	movt	r2, #4
   24abc:	movw	r1, #428	; 0x1ac
   24ac0:	movt	r1, #4
   24ac4:	mov	r0, r6
   24ac8:	bl	23af0 <test_json@@Base>
   24acc:	orr	r5, r5, r0
   24ad0:	movw	r3, #610	; 0x262
   24ad4:	str	r3, [sp, #8]
   24ad8:	str	r4, [sp, #4]
   24adc:	str	r4, [sp]
   24ae0:	mov	r3, r4
   24ae4:	mov	r2, r9
   24ae8:	movw	r1, #464	; 0x1d0
   24aec:	movt	r1, #4
   24af0:	mov	r0, r6
   24af4:	bl	23af0 <test_json@@Base>
   24af8:	orr	r5, r5, r0
   24afc:	movw	r3, #613	; 0x265
   24b00:	str	r3, [sp, #8]
   24b04:	str	r4, [sp, #4]
   24b08:	str	r4, [sp]
   24b0c:	mov	r3, r4
   24b10:	movw	r2, #500	; 0x1f4
   24b14:	movt	r2, #4
   24b18:	movw	r1, #532	; 0x214
   24b1c:	movt	r1, #4
   24b20:	mov	r0, r6
   24b24:	bl	23af0 <test_json@@Base>
   24b28:	orr	r5, r5, r0
   24b2c:	mov	r3, #616	; 0x268
   24b30:	str	r3, [sp, #8]
   24b34:	str	r4, [sp, #4]
   24b38:	str	r4, [sp]
   24b3c:	mov	r3, r4
   24b40:	movw	r2, #568	; 0x238
   24b44:	movt	r2, #4
   24b48:	movw	r1, #600	; 0x258
   24b4c:	movt	r1, #4
   24b50:	mov	r0, r6
   24b54:	bl	23af0 <test_json@@Base>
   24b58:	orr	r5, r5, r0
   24b5c:	movw	r3, #619	; 0x26b
   24b60:	str	r3, [sp, #8]
   24b64:	str	r4, [sp, #4]
   24b68:	str	r4, [sp]
   24b6c:	mov	r3, r4
   24b70:	movw	r2, #636	; 0x27c
   24b74:	movt	r2, #4
   24b78:	movw	r1, #668	; 0x29c
   24b7c:	movt	r1, #4
   24b80:	mov	r0, r6
   24b84:	bl	23af0 <test_json@@Base>
   24b88:	orr	r5, r5, r0
   24b8c:	movw	r3, #622	; 0x26e
   24b90:	str	r3, [sp, #8]
   24b94:	str	r4, [sp, #4]
   24b98:	str	r4, [sp]
   24b9c:	mov	r3, r4
   24ba0:	mov	r2, r8
   24ba4:	movw	r1, #704	; 0x2c0
   24ba8:	movt	r1, #4
   24bac:	mov	r0, r6
   24bb0:	bl	23af0 <test_json@@Base>
   24bb4:	orr	r5, r5, r0
   24bb8:	movw	r3, #625	; 0x271
   24bbc:	str	r3, [sp, #8]
   24bc0:	str	r4, [sp, #4]
   24bc4:	str	r4, [sp]
   24bc8:	mov	r3, r4
   24bcc:	mov	r2, r8
   24bd0:	movw	r1, #748	; 0x2ec
   24bd4:	movt	r1, #4
   24bd8:	mov	r0, r6
   24bdc:	bl	23af0 <test_json@@Base>
   24be0:	orr	r5, r5, r0
   24be4:	movw	r9, #808	; 0x328
   24be8:	movt	r9, #4
   24bec:	movw	r8, #836	; 0x344
   24bf0:	movt	r8, #4
   24bf4:	mov	r3, #628	; 0x274
   24bf8:	str	r3, [sp, #8]
   24bfc:	str	r4, [sp, #4]
   24c00:	str	r4, [sp]
   24c04:	mov	r3, r4
   24c08:	mov	r2, r9
   24c0c:	mov	r1, r8
   24c10:	mov	r0, r6
   24c14:	bl	23af0 <test_json@@Base>
   24c18:	orr	r5, r5, r0
   24c1c:	movw	r3, #631	; 0x277
   24c20:	str	r3, [sp, #8]
   24c24:	str	r4, [sp, #4]
   24c28:	str	r4, [sp]
   24c2c:	mov	r3, r4
   24c30:	mov	r2, r9
   24c34:	mov	r1, r8
   24c38:	mov	r0, r6
   24c3c:	bl	23af0 <test_json@@Base>
   24c40:	orr	r5, r5, r0
   24c44:	movw	r3, #634	; 0x27a
   24c48:	str	r3, [sp, #8]
   24c4c:	str	r4, [sp, #4]
   24c50:	str	r4, [sp]
   24c54:	mov	r3, r4
   24c58:	movw	r2, #880	; 0x370
   24c5c:	movt	r2, #4
   24c60:	movw	r1, #952	; 0x3b8
   24c64:	movt	r1, #4
   24c68:	mov	r0, r6
   24c6c:	bl	23af0 <test_json@@Base>
   24c70:	orr	r5, r5, r0
   24c74:	movw	r3, #638	; 0x27e
   24c78:	str	r3, [sp, #8]
   24c7c:	str	r4, [sp, #4]
   24c80:	str	r4, [sp]
   24c84:	mov	r3, r4
   24c88:	movw	r2, #1036	; 0x40c
   24c8c:	movt	r2, #4
   24c90:	movw	r1, #1112	; 0x458
   24c94:	movt	r1, #4
   24c98:	mov	r0, r6
   24c9c:	bl	23af0 <test_json@@Base>
   24ca0:	orr	r5, r5, r0
   24ca4:	movw	r3, #642	; 0x282
   24ca8:	str	r3, [sp, #8]
   24cac:	str	r4, [sp, #4]
   24cb0:	str	r4, [sp]
   24cb4:	mov	r3, r4
   24cb8:	movw	r2, #1200	; 0x4b0
   24cbc:	movt	r2, #4
   24cc0:	movw	r1, #1300	; 0x514
   24cc4:	movt	r1, #4
   24cc8:	mov	r0, r6
   24ccc:	bl	23af0 <test_json@@Base>
   24cd0:	orr	r5, r5, r0
   24cd4:	movw	r3, #646	; 0x286
   24cd8:	str	r3, [sp, #8]
   24cdc:	str	r4, [sp, #4]
   24ce0:	str	r4, [sp]
   24ce4:	mov	r3, r4
   24ce8:	mov	r2, r7
   24cec:	movw	r1, #1412	; 0x584
   24cf0:	movt	r1, #4
   24cf4:	mov	r0, r6
   24cf8:	bl	23af0 <test_json@@Base>
   24cfc:	orr	r5, r5, r0
   24d00:	movw	r3, #649	; 0x289
   24d04:	str	r3, [sp, #8]
   24d08:	str	r4, [sp, #4]
   24d0c:	str	r4, [sp]
   24d10:	mov	r3, r4
   24d14:	mov	r2, r7
   24d18:	movw	r1, #1456	; 0x5b0
   24d1c:	movt	r1, #4
   24d20:	mov	r0, r6
   24d24:	bl	23af0 <test_json@@Base>
   24d28:	orr	r5, r5, r0
   24d2c:	mov	r3, #716	; 0x2cc
   24d30:	str	r3, [sp, #8]
   24d34:	str	r4, [sp, #4]
   24d38:	str	r4, [sp]
   24d3c:	mov	r3, r4
   24d40:	movw	r2, #1496	; 0x5d8
   24d44:	movt	r2, #4
   24d48:	movw	r1, #1592	; 0x638
   24d4c:	movt	r1, #4
   24d50:	mov	r0, r6
   24d54:	bl	23af0 <test_json@@Base>
   24d58:	orr	r5, r5, r0
   24d5c:	movw	r3, #731	; 0x2db
   24d60:	str	r3, [sp, #8]
   24d64:	str	r4, [sp, #4]
   24d68:	str	r4, [sp]
   24d6c:	mov	r3, r4
   24d70:	movw	r2, #1704	; 0x6a8
   24d74:	movt	r2, #4
   24d78:	movw	r1, #1752	; 0x6d8
   24d7c:	movt	r1, #4
   24d80:	mov	r0, r6
   24d84:	bl	23af0 <test_json@@Base>
   24d88:	orr	r5, r5, r0
   24d8c:	movw	r3, #734	; 0x2de
   24d90:	str	r3, [sp, #8]
   24d94:	str	r4, [sp, #4]
   24d98:	str	r4, [sp]
   24d9c:	mov	r3, r4
   24da0:	movw	r2, #1816	; 0x718
   24da4:	movt	r2, #4
   24da8:	movw	r1, #1836	; 0x72c
   24dac:	movt	r1, #4
   24db0:	mov	r0, r6
   24db4:	bl	23af0 <test_json@@Base>
   24db8:	orr	r5, r5, r0
   24dbc:	movw	r8, #1864	; 0x748
   24dc0:	movt	r8, #4
   24dc4:	movw	r3, #738	; 0x2e2
   24dc8:	str	r3, [sp, #8]
   24dcc:	str	r4, [sp, #4]
   24dd0:	str	r4, [sp]
   24dd4:	mov	r3, r4
   24dd8:	mov	r2, r8
   24ddc:	movw	r1, #1932	; 0x78c
   24de0:	movt	r1, #4
   24de4:	mov	r0, r6
   24de8:	bl	23af0 <test_json@@Base>
   24dec:	orr	r5, r5, r0
   24df0:	movw	r3, #750	; 0x2ee
   24df4:	str	r3, [sp, #8]
   24df8:	str	r4, [sp, #4]
   24dfc:	str	r4, [sp]
   24e00:	mov	r3, r4
   24e04:	mov	r2, r8
   24e08:	movw	r1, #2004	; 0x7d4
   24e0c:	movt	r1, #4
   24e10:	mov	r0, r6
   24e14:	bl	23af0 <test_json@@Base>
   24e18:	orr	r5, r5, r0
   24e1c:	movw	r3, #766	; 0x2fe
   24e20:	str	r3, [sp, #8]
   24e24:	str	r4, [sp, #4]
   24e28:	str	r4, [sp]
   24e2c:	mov	r3, r4
   24e30:	movw	r2, #2164	; 0x874
   24e34:	movt	r2, #4
   24e38:	movw	r1, #2200	; 0x898
   24e3c:	movt	r1, #4
   24e40:	mov	r0, r6
   24e44:	bl	23af0 <test_json@@Base>
   24e48:	orr	r5, r5, r0
   24e4c:	movw	r3, #770	; 0x302
   24e50:	str	r3, [sp, #8]
   24e54:	str	r4, [sp, #4]
   24e58:	str	r4, [sp]
   24e5c:	mov	r3, r4
   24e60:	movw	r2, #2240	; 0x8c0
   24e64:	movt	r2, #4
   24e68:	movw	r1, #2284	; 0x8ec
   24e6c:	movt	r1, #4
   24e70:	mov	r0, r6
   24e74:	bl	23af0 <test_json@@Base>
   24e78:	orr	r5, r5, r0
   24e7c:	mov	r3, #776	; 0x308
   24e80:	str	r3, [sp, #8]
   24e84:	str	r4, [sp, #4]
   24e88:	str	r4, [sp]
   24e8c:	mov	r3, r4
   24e90:	movw	r2, #2332	; 0x91c
   24e94:	movt	r2, #4
   24e98:	movw	r1, #2444	; 0x98c
   24e9c:	movt	r1, #4
   24ea0:	mov	r0, r6
   24ea4:	bl	23af0 <test_json@@Base>
   24ea8:	orr	r5, r5, r0
   24eac:	movw	r3, #781	; 0x30d
   24eb0:	str	r3, [sp, #8]
   24eb4:	str	r4, [sp, #4]
   24eb8:	str	r4, [sp]
   24ebc:	mov	r3, r4
   24ec0:	mov	r2, r7
   24ec4:	movw	r1, #2568	; 0xa08
   24ec8:	movt	r1, #4
   24ecc:	mov	r0, r6
   24ed0:	bl	23af0 <test_json@@Base>
   24ed4:	orr	r5, r5, r0
   24ed8:	movw	r3, #786	; 0x312
   24edc:	str	r3, [sp, #8]
   24ee0:	str	r4, [sp, #4]
   24ee4:	str	r4, [sp]
   24ee8:	mov	r3, r4
   24eec:	movw	r2, #2688	; 0xa80
   24ef0:	movt	r2, #4
   24ef4:	movw	r1, #2800	; 0xaf0
   24ef8:	movt	r1, #4
   24efc:	mov	r0, r6
   24f00:	bl	23af0 <test_json@@Base>
   24f04:	orr	r5, r5, r0
   24f08:	movw	r3, #791	; 0x317
   24f0c:	str	r3, [sp, #8]
   24f10:	str	r4, [sp, #4]
   24f14:	str	r4, [sp]
   24f18:	mov	r3, r4
   24f1c:	movw	r2, #2924	; 0xb6c
   24f20:	movt	r2, #4
   24f24:	movw	r1, #3052	; 0xbec
   24f28:	movt	r1, #4
   24f2c:	mov	r0, r6
   24f30:	bl	23af0 <test_json@@Base>
   24f34:	orr	r5, r5, r0
   24f38:	mov	r3, #796	; 0x31c
   24f3c:	str	r3, [sp, #8]
   24f40:	str	r4, [sp, #4]
   24f44:	str	r4, [sp]
   24f48:	mov	r3, r4
   24f4c:	movw	r2, #3192	; 0xc78
   24f50:	movt	r2, #4
   24f54:	movw	r1, #3304	; 0xce8
   24f58:	movt	r1, #4
   24f5c:	mov	r0, r6
   24f60:	bl	23af0 <test_json@@Base>
   24f64:	orr	r5, r5, r0
   24f68:	movw	r3, #801	; 0x321
   24f6c:	str	r3, [sp, #8]
   24f70:	str	r4, [sp, #4]
   24f74:	str	r4, [sp]
   24f78:	mov	r3, r4
   24f7c:	movw	r2, #3428	; 0xd64
   24f80:	movt	r2, #4
   24f84:	movw	r1, #3556	; 0xde4
   24f88:	movt	r1, #4
   24f8c:	mov	r0, r6
   24f90:	bl	23af0 <test_json@@Base>
   24f94:	orr	r5, r5, r0
   24f98:	movw	r3, #806	; 0x326
   24f9c:	str	r3, [sp, #8]
   24fa0:	str	r4, [sp, #4]
   24fa4:	str	r4, [sp]
   24fa8:	mov	r3, r4
   24fac:	movw	r2, #3696	; 0xe70
   24fb0:	movt	r2, #4
   24fb4:	movw	r1, #3828	; 0xef4
   24fb8:	movt	r1, #4
   24fbc:	mov	r0, r6
   24fc0:	bl	23af0 <test_json@@Base>
   24fc4:	orrs	r3, r5, r0
   24fc8:	mvnne	r0, #0
   24fcc:	moveq	r0, r4
   24fd0:	add	sp, sp, #16
   24fd4:	ldrd	r4, [sp]
   24fd8:	ldrd	r6, [sp, #8]
   24fdc:	ldrd	r8, [sp, #16]
   24fe0:	ldr	sl, [sp, #24]
   24fe4:	add	sp, sp, #28
   24fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   24fec:	strd	r4, [sp, #-16]!
   24ff0:	str	r6, [sp, #8]
   24ff4:	str	lr, [sp, #12]
   24ff8:	sub	sp, sp, #8
   24ffc:	mov	r4, r0
   25000:	mov	r5, r2
   25004:	ldr	r2, [r0, #28]
   25008:	mov	r3, #1
   2500c:	str	r3, [sp]
   25010:	ldr	r6, [r0, #48]	; 0x30
   25014:	add	r2, r1, r2
   25018:	add	r1, r0, #60	; 0x3c
   2501c:	ldr	r0, [r0, #40]	; 0x28
   25020:	blx	r6
   25024:	cmp	r0, #0
   25028:	bne	2506c <main@@Base+0x81c>
   2502c:	ldr	r1, [r4, #28]
   25030:	ldr	r2, [r4, #60]	; 0x3c
   25034:	add	r2, r2, r1
   25038:	str	r2, [r4, #16]
   2503c:	ldr	r3, [r4, #64]	; 0x40
   25040:	sub	r3, r3, r1
   25044:	cmp	r3, r5
   25048:	movcs	r3, r5
   2504c:	str	r3, [r4, #24]
   25050:	ldr	r3, [r4, #32]
   25054:	str	r5, [r3, #4]
   25058:	add	sp, sp, #8
   2505c:	ldrd	r4, [sp]
   25060:	ldr	r6, [sp, #8]
   25064:	add	sp, sp, #12
   25068:	pop	{pc}		; (ldr pc, [sp], #4)
   2506c:	mvn	r0, #0
   25070:	b	25058 <main@@Base+0x808>

00025074 <flatcc_builder_default_alloc@@Base>:
   25074:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25078:	strd	r6, [sp, #8]
   2507c:	str	r8, [sp, #16]
   25080:	str	lr, [sp, #20]
   25084:	mov	r5, r1
   25088:	cmp	r2, #0
   2508c:	beq	250c4 <flatcc_builder_default_alloc@@Base+0x50>
   25090:	mov	r6, r3
   25094:	ldr	r3, [sp, #24]
   25098:	sub	r3, r3, #1
   2509c:	cmp	r3, #6
   250a0:	ldrls	pc, [pc, r3, lsl #2]
   250a4:	b	25170 <flatcc_builder_default_alloc@@Base+0xfc>
   250a8:	strdeq	r5, [r2], -r0
   250ac:	andeq	r5, r2, r0, ror r1
   250b0:	andeq	r5, r2, r0, ror r1
   250b4:	andeq	r5, r2, r8, ror #1
   250b8:	andeq	r5, r2, r8, ror r1
   250bc:	andeq	r5, r2, r0, ror r1
   250c0:	andeq	r5, r2, r8, ror #2
   250c4:	ldr	r0, [r1]
   250c8:	cmp	r0, #0
   250cc:	moveq	r0, #0
   250d0:	beq	25154 <flatcc_builder_default_alloc@@Base+0xe0>
   250d4:	bl	14518 <free@plt>
   250d8:	mov	r0, #0
   250dc:	str	r0, [r5]
   250e0:	str	r0, [r5, #4]
   250e4:	b	25154 <flatcc_builder_default_alloc@@Base+0xe0>
   250e8:	mov	r4, #288	; 0x120
   250ec:	b	250f4 <flatcc_builder_default_alloc@@Base+0x80>
   250f0:	mov	r4, #256	; 0x100
   250f4:	cmp	r4, r2
   250f8:	bcs	25108 <flatcc_builder_default_alloc@@Base+0x94>
   250fc:	lsl	r4, r4, #1
   25100:	cmp	r2, r4
   25104:	bhi	250fc <flatcc_builder_default_alloc@@Base+0x88>
   25108:	ldr	r3, [r5, #4]
   2510c:	cmp	r3, r2
   25110:	bcc	25120 <flatcc_builder_default_alloc@@Base+0xac>
   25114:	cmp	r4, r3, lsr #1
   25118:	movls	r0, #0
   2511c:	bls	25154 <flatcc_builder_default_alloc@@Base+0xe0>
   25120:	mov	r1, r4
   25124:	ldr	r0, [r5]
   25128:	bl	1453c <realloc@plt>
   2512c:	subs	r7, r0, #0
   25130:	beq	25194 <flatcc_builder_default_alloc@@Base+0x120>
   25134:	cmp	r6, #0
   25138:	beq	25148 <flatcc_builder_default_alloc@@Base+0xd4>
   2513c:	ldr	r0, [r5, #4]
   25140:	cmp	r0, r4
   25144:	bcc	25180 <flatcc_builder_default_alloc@@Base+0x10c>
   25148:	str	r7, [r5]
   2514c:	str	r4, [r5, #4]
   25150:	mov	r0, #0
   25154:	ldrd	r4, [sp]
   25158:	ldrd	r6, [sp, #8]
   2515c:	ldr	r8, [sp, #16]
   25160:	add	sp, sp, #20
   25164:	pop	{pc}		; (ldr pc, [sp], #4)
   25168:	mov	r4, #64	; 0x40
   2516c:	b	250f4 <flatcc_builder_default_alloc@@Base+0x80>
   25170:	mov	r4, #32
   25174:	b	250f4 <flatcc_builder_default_alloc@@Base+0x80>
   25178:	mov	r4, r2
   2517c:	b	25108 <flatcc_builder_default_alloc@@Base+0x94>
   25180:	sub	r2, r4, r0
   25184:	mov	r1, #0
   25188:	add	r0, r7, r0
   2518c:	bl	1459c <memset@plt>
   25190:	b	25148 <flatcc_builder_default_alloc@@Base+0xd4>
   25194:	mvn	r0, #0
   25198:	b	25154 <flatcc_builder_default_alloc@@Base+0xe0>
   2519c:	cmp	r2, #0
   251a0:	bne	251b0 <flatcc_builder_default_alloc@@Base+0x13c>
   251a4:	ldrh	r2, [r0, #132]	; 0x84
   251a8:	cmp	r2, #0
   251ac:	moveq	r2, #1
   251b0:	ldrh	ip, [r1]
   251b4:	cmp	ip, #3
   251b8:	movls	ip, #4
   251bc:	strhls	ip, [r1]
   251c0:	ldrh	ip, [r1]
   251c4:	cmp	ip, r2
   251c8:	strhcc	r2, [r1]
   251cc:	cmp	r3, #0
   251d0:	bne	252b0 <flatcc_builder_default_alloc@@Base+0x23c>
   251d4:	strd	r4, [sp, #-12]!
   251d8:	str	lr, [sp, #8]
   251dc:	sub	sp, sp, #84	; 0x54
   251e0:	ldr	r4, [r0, #140]	; 0x8c
   251e4:	sub	r2, r2, #1
   251e8:	ands	r2, r2, r4
   251ec:	bne	25204 <flatcc_builder_default_alloc@@Base+0x190>
   251f0:	mov	r0, #0
   251f4:	add	sp, sp, #84	; 0x54
   251f8:	ldrd	r4, [sp]
   251fc:	add	sp, sp, #8
   25200:	pop	{pc}		; (ldr pc, [sp], #4)
   25204:	str	r2, [sp, #8]
   25208:	movw	r3, #3996	; 0xf9c
   2520c:	movt	r3, #4
   25210:	str	r3, [sp, #16]
   25214:	str	r2, [sp, #20]
   25218:	mov	r3, #1
   2521c:	str	r3, [sp, #12]
   25220:	add	r3, r4, r2
   25224:	str	r3, [r0, #140]	; 0x8c
   25228:	cmp	r4, r3
   2522c:	bgt	25278 <flatcc_builder_default_alloc@@Base+0x204>
   25230:	str	r2, [sp]
   25234:	ldr	r5, [r0, #44]	; 0x2c
   25238:	mov	r3, r4
   2523c:	mov	r2, #1
   25240:	add	r1, sp, #16
   25244:	ldr	r0, [r0, #36]	; 0x24
   25248:	blx	r5
   2524c:	cmp	r0, #0
   25250:	bne	25294 <flatcc_builder_default_alloc@@Base+0x220>
   25254:	cmn	r4, #1
   25258:	bne	251f0 <flatcc_builder_default_alloc@@Base+0x17c>
   2525c:	ldr	r3, [pc, #84]	; 252b8 <flatcc_builder_default_alloc@@Base+0x244>
   25260:	movw	r2, #702	; 0x2be
   25264:	movw	r1, #5868	; 0x16ec
   25268:	movt	r1, #4
   2526c:	movw	r0, #5952	; 0x1740
   25270:	movt	r0, #4
   25274:	bl	145f0 <__assert_fail@plt>
   25278:	ldr	r3, [pc, #60]	; 252bc <flatcc_builder_default_alloc@@Base+0x248>
   2527c:	movw	r2, #673	; 0x2a1
   25280:	movw	r1, #5868	; 0x16ec
   25284:	movt	r1, #4
   25288:	movw	r0, #5952	; 0x1740
   2528c:	movt	r0, #4
   25290:	bl	145f0 <__assert_fail@plt>
   25294:	ldr	r3, [pc, #32]	; 252bc <flatcc_builder_default_alloc@@Base+0x248>
   25298:	movw	r2, #677	; 0x2a5
   2529c:	movw	r1, #5868	; 0x16ec
   252a0:	movt	r1, #4
   252a4:	movw	r0, #5952	; 0x1740
   252a8:	movt	r0, #4
   252ac:	bl	145f0 <__assert_fail@plt>
   252b0:	mov	r0, #0
   252b4:	bx	lr
   252b8:	andeq	r1, r4, r8, lsr #3
   252bc:	muleq	r4, ip, r1
   252c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   252c4:	strd	r6, [sp, #8]
   252c8:	str	lr, [sp, #16]
   252cc:	sub	sp, sp, #12
   252d0:	mov	r4, r0
   252d4:	mov	r6, r1
   252d8:	ldr	r3, [r0, #156]	; 0x9c
   252dc:	add	r2, r3, #1
   252e0:	str	r2, [r0, #156]	; 0x9c
   252e4:	ldr	r1, [r0, #160]	; 0xa0
   252e8:	cmp	r2, r1
   252ec:	ble	253a4 <flatcc_builder_default_alloc@@Base+0x330>
   252f0:	ldr	r1, [r0, #176]	; 0xb0
   252f4:	cmp	r2, r1
   252f8:	cmpgt	r1, #0
   252fc:	bgt	25418 <flatcc_builder_default_alloc@@Base+0x3a4>
   25300:	add	r3, r3, r3, lsl #3
   25304:	lsl	r5, r3, #2
   25308:	add	r2, r5, #36	; 0x24
   2530c:	ldr	r3, [r0, #88]	; 0x58
   25310:	cmp	r2, r3
   25314:	bls	2533c <flatcc_builder_default_alloc@@Base+0x2c8>
   25318:	mov	r3, #4
   2531c:	str	r3, [sp]
   25320:	ldr	r7, [r0, #48]	; 0x30
   25324:	mov	r3, #0
   25328:	add	r1, r0, #84	; 0x54
   2532c:	ldr	r0, [r0, #40]	; 0x28
   25330:	blx	r7
   25334:	cmp	r0, #0
   25338:	bne	25388 <flatcc_builder_default_alloc@@Base+0x314>
   2533c:	ldr	r3, [r4, #84]	; 0x54
   25340:	add	r5, r3, r5
   25344:	str	r5, [r4, #32]
   25348:	cmp	r5, #0
   2534c:	beq	25420 <flatcc_builder_default_alloc@@Base+0x3ac>
   25350:	ldr	r3, [r4, #88]	; 0x58
   25354:	movw	r2, #36409	; 0x8e39
   25358:	movt	r2, #14563	; 0x38e3
   2535c:	umull	r2, r3, r2, r3
   25360:	lsr	r3, r3, #3
   25364:	ldr	r2, [r4, #176]	; 0xb0
   25368:	cmp	r2, #0
   2536c:	cmpgt	r3, r2
   25370:	movgt	r1, #1
   25374:	movle	r1, #0
   25378:	cmp	r1, #0
   2537c:	movne	r3, r2
   25380:	str	r3, [r4, #160]	; 0xa0
   25384:	b	253b0 <flatcc_builder_default_alloc@@Base+0x33c>
   25388:	ldr	r3, [pc, #152]	; 25428 <flatcc_builder_default_alloc@@Base+0x3b4>
   2538c:	mov	r2, #308	; 0x134
   25390:	movw	r1, #5868	; 0x16ec
   25394:	movt	r1, #4
   25398:	movw	r0, #5952	; 0x1740
   2539c:	movt	r0, #4
   253a0:	bl	145f0 <__assert_fail@plt>
   253a4:	ldr	r3, [r0, #32]
   253a8:	add	r3, r3, #36	; 0x24
   253ac:	str	r3, [r0, #32]
   253b0:	ldr	r3, [r4, #32]
   253b4:	ldr	r2, [r4, #20]
   253b8:	str	r2, [r3, #8]
   253bc:	ldr	r3, [r4, #32]
   253c0:	ldrh	r2, [r4, #130]	; 0x82
   253c4:	strh	r2, [r3, #12]
   253c8:	strh	r6, [r4, #130]	; 0x82
   253cc:	ldr	r3, [r4, #32]
   253d0:	ldr	r2, [r4, #28]
   253d4:	str	r2, [r3]
   253d8:	ldr	r3, [r4, #32]
   253dc:	mvn	r2, #3
   253e0:	str	r2, [r3, #4]
   253e4:	ldr	r3, [r4, #28]
   253e8:	ldr	r2, [r4, #20]
   253ec:	add	r3, r3, r2
   253f0:	add	r3, r3, #7
   253f4:	bic	r3, r3, #7
   253f8:	str	r3, [r4, #28]
   253fc:	mov	r0, #0
   25400:	str	r0, [r4, #20]
   25404:	add	sp, sp, #12
   25408:	ldrd	r4, [sp]
   2540c:	ldrd	r6, [sp, #8]
   25410:	add	sp, sp, #16
   25414:	pop	{pc}		; (ldr pc, [sp], #4)
   25418:	mvn	r0, #0
   2541c:	b	25404 <flatcc_builder_default_alloc@@Base+0x390>
   25420:	mvn	r0, #0
   25424:	b	25404 <flatcc_builder_default_alloc@@Base+0x390>
   25428:			; <UNDEFINED> instruction: 0x000411b8
   2542c:	strd	r4, [sp, #-16]!
   25430:	str	r6, [sp, #8]
   25434:	str	lr, [sp, #12]
   25438:	sub	sp, sp, #88	; 0x58
   2543c:	cmn	r2, #-1073741823	; 0xc0000001
   25440:	bhi	25624 <flatcc_builder_default_alloc@@Base+0x5b0>
   25444:	ldrh	ip, [r0, #128]	; 0x80
   25448:	cmp	ip, #3
   2544c:	movls	ip, #4
   25450:	strhls	ip, [r0, #128]	; 0x80
   25454:	str	r2, [sp, #84]	; 0x54
   25458:	ldr	lr, [r0, #136]	; 0x88
   2545c:	and	ip, lr, #3
   25460:	mov	r4, #4
   25464:	str	r4, [sp, #12]
   25468:	add	r5, sp, #84	; 0x54
   2546c:	str	r5, [sp, #20]
   25470:	str	r4, [sp, #24]
   25474:	mov	r4, #1
   25478:	str	r4, [sp, #16]
   2547c:	lsls	r4, r2, #2
   25480:	beq	2549c <flatcc_builder_default_alloc@@Base+0x428>
   25484:	add	r5, r4, #4
   25488:	str	r5, [sp, #12]
   2548c:	str	r1, [sp, #28]
   25490:	str	r4, [sp, #32]
   25494:	mov	r4, #2
   25498:	str	r4, [sp, #16]
   2549c:	cmp	ip, #0
   254a0:	beq	254d4 <flatcc_builder_default_alloc@@Base+0x460>
   254a4:	ldr	r4, [sp, #12]
   254a8:	add	r4, r4, ip
   254ac:	str	r4, [sp, #12]
   254b0:	ldr	r4, [sp, #16]
   254b4:	add	r4, r4, #1
   254b8:	add	r5, sp, #88	; 0x58
   254bc:	add	r6, r5, r4, lsl #3
   254c0:	movw	r5, #3996	; 0xf9c
   254c4:	movt	r5, #4
   254c8:	str	r5, [r6, #-76]	; 0xffffffb4
   254cc:	str	ip, [r6, #-72]	; 0xffffffb8
   254d0:	str	r4, [sp, #16]
   254d4:	mov	r5, r0
   254d8:	ldr	r6, [sp, #12]
   254dc:	cmp	r2, #0
   254e0:	beq	2559c <flatcc_builder_default_alloc@@Base+0x528>
   254e4:	mov	ip, r3
   254e8:	add	r4, r2, r3
   254ec:	mov	r2, r1
   254f0:	add	r1, r1, r6
   254f4:	sub	r0, r1, lr
   254f8:	b	2551c <flatcc_builder_default_alloc@@Base+0x4a8>
   254fc:	cmp	r3, #0
   25500:	beq	25580 <flatcc_builder_default_alloc@@Base+0x50c>
   25504:	ldrb	r1, [ip]
   25508:	cmp	r1, #0
   2550c:	bne	25564 <flatcc_builder_default_alloc@@Base+0x4f0>
   25510:	add	ip, ip, #1
   25514:	cmp	ip, r4
   25518:	beq	2559c <flatcc_builder_default_alloc@@Base+0x528>
   2551c:	ldr	r1, [r2], #4
   25520:	cmp	r1, #0
   25524:	beq	254fc <flatcc_builder_default_alloc@@Base+0x488>
   25528:	sub	lr, r0, r2
   2552c:	add	r1, lr, r1
   25530:	str	r1, [r2, #-4]
   25534:	cmp	r3, #0
   25538:	beq	25510 <flatcc_builder_default_alloc@@Base+0x49c>
   2553c:	ldrb	r1, [ip]
   25540:	cmp	r1, #0
   25544:	bne	25510 <flatcc_builder_default_alloc@@Base+0x49c>
   25548:	ldr	r3, [pc, #220]	; 2562c <flatcc_builder_default_alloc@@Base+0x5b8>
   2554c:	movw	r2, #1457	; 0x5b1
   25550:	movw	r1, #5868	; 0x16ec
   25554:	movt	r1, #4
   25558:	movw	r0, #5940	; 0x1734
   2555c:	movt	r0, #4
   25560:	bl	145f0 <__assert_fail@plt>
   25564:	ldr	r3, [pc, #192]	; 2562c <flatcc_builder_default_alloc@@Base+0x5b8>
   25568:	movw	r2, #1461	; 0x5b5
   2556c:	movw	r1, #5868	; 0x16ec
   25570:	movt	r1, #4
   25574:	movw	r0, #5956	; 0x1744
   25578:	movt	r0, #4
   2557c:	bl	145f0 <__assert_fail@plt>
   25580:	ldr	r3, [pc, #164]	; 2562c <flatcc_builder_default_alloc@@Base+0x5b8>
   25584:	movw	r2, #1463	; 0x5b7
   25588:	movw	r1, #5868	; 0x16ec
   2558c:	movt	r1, #4
   25590:	movw	r0, #5952	; 0x1740
   25594:	movt	r0, #4
   25598:	bl	145f0 <__assert_fail@plt>
   2559c:	ldr	r3, [r5, #136]	; 0x88
   255a0:	sub	r4, r3, r6
   255a4:	cmp	r3, r4
   255a8:	ble	255ec <flatcc_builder_default_alloc@@Base+0x578>
   255ac:	str	r6, [sp]
   255b0:	ldr	r6, [r5, #44]	; 0x2c
   255b4:	mov	r3, r4
   255b8:	ldr	r2, [sp, #16]
   255bc:	add	r1, sp, #20
   255c0:	ldr	r0, [r5, #36]	; 0x24
   255c4:	blx	r6
   255c8:	cmp	r0, #0
   255cc:	streq	r4, [r5, #136]	; 0x88
   255d0:	bne	25608 <flatcc_builder_default_alloc@@Base+0x594>
   255d4:	mov	r0, r4
   255d8:	add	sp, sp, #88	; 0x58
   255dc:	ldrd	r4, [sp]
   255e0:	ldr	r6, [sp, #8]
   255e4:	add	sp, sp, #12
   255e8:	pop	{pc}		; (ldr pc, [sp], #4)
   255ec:	ldr	r3, [pc, #60]	; 25630 <flatcc_builder_default_alloc@@Base+0x5bc>
   255f0:	movw	r2, #647	; 0x287
   255f4:	movw	r1, #5868	; 0x16ec
   255f8:	movt	r1, #4
   255fc:	movw	r0, #5952	; 0x1740
   25600:	movt	r0, #4
   25604:	bl	145f0 <__assert_fail@plt>
   25608:	ldr	r3, [pc, #32]	; 25630 <flatcc_builder_default_alloc@@Base+0x5bc>
   2560c:	movw	r2, #651	; 0x28b
   25610:	movw	r1, #5868	; 0x16ec
   25614:	movt	r1, #4
   25618:	movw	r0, #5952	; 0x1740
   2561c:	movt	r0, #4
   25620:	bl	145f0 <__assert_fail@plt>
   25624:	mov	r4, #0
   25628:	b	255d4 <flatcc_builder_default_alloc@@Base+0x560>
   2562c:	andeq	r1, r4, r8, asr #3
   25630:	andeq	r1, r4, r8, ror #3

00025634 <flatcc_builder_flush_vtable_cache@@Base>:
   25634:	ldr	r3, [r0, #116]	; 0x74
   25638:	cmp	r3, #0
   2563c:	bxeq	lr
   25640:	str	r4, [sp, #-8]!
   25644:	str	lr, [sp, #4]
   25648:	mov	r4, r0
   2564c:	ldr	r2, [r0, #96]	; 0x60
   25650:	mov	r1, #0
   25654:	ldr	r0, [r0, #92]	; 0x5c
   25658:	bl	1459c <memset@plt>
   2565c:	mov	r3, #16
   25660:	str	r3, [r4, #124]	; 0x7c
   25664:	mov	r3, #0
   25668:	str	r3, [r4, #120]	; 0x78
   2566c:	ldr	r4, [sp]
   25670:	add	sp, sp, #4
   25674:	pop	{pc}		; (ldr pc, [sp], #4)

00025678 <flatcc_builder_custom_init@@Base>:
   25678:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2567c:	strd	r6, [sp, #8]
   25680:	str	r8, [sp, #16]
   25684:	str	lr, [sp, #20]
   25688:	mov	r4, r0
   2568c:	mov	r6, r1
   25690:	mov	r7, r2
   25694:	mov	r5, r3
   25698:	mov	r2, #232	; 0xe8
   2569c:	mov	r1, #0
   256a0:	bl	1459c <memset@plt>
   256a4:	cmp	r6, #0
   256a8:	beq	256e8 <flatcc_builder_custom_init@@Base+0x70>
   256ac:	movw	r3, #20596	; 0x5074
   256b0:	movt	r3, #2
   256b4:	cmp	r5, #0
   256b8:	moveq	r5, r3
   256bc:	ldr	r3, [sp, #24]
   256c0:	str	r3, [r4, #40]	; 0x28
   256c4:	str	r5, [r4, #48]	; 0x30
   256c8:	str	r7, [r4, #36]	; 0x24
   256cc:	str	r6, [r4, #44]	; 0x2c
   256d0:	mov	r0, #0
   256d4:	ldrd	r4, [sp]
   256d8:	ldrd	r6, [sp, #8]
   256dc:	ldr	r8, [sp, #16]
   256e0:	add	sp, sp, #20
   256e4:	pop	{pc}		; (ldr pc, [sp], #4)
   256e8:	mov	r3, #1
   256ec:	str	r3, [r4, #184]	; 0xb8
   256f0:	add	r7, r4, #188	; 0xbc
   256f4:	movw	r6, #38724	; 0x9744
   256f8:	movt	r6, #2
   256fc:	b	256ac <flatcc_builder_custom_init@@Base+0x34>

00025700 <flatcc_builder_init@@Base>:
   25700:	str	r4, [sp, #-8]!
   25704:	str	lr, [sp, #4]
   25708:	mov	r4, r0
   2570c:	mov	r2, #232	; 0xe8
   25710:	mov	r1, #0
   25714:	bl	1459c <memset@plt>
   25718:	mov	r3, #1
   2571c:	str	r3, [r4, #184]	; 0xb8
   25720:	movw	r3, #20596	; 0x5074
   25724:	movt	r3, #2
   25728:	str	r3, [r4, #48]	; 0x30
   2572c:	add	r3, r4, #188	; 0xbc
   25730:	str	r3, [r4, #36]	; 0x24
   25734:	movw	r3, #38724	; 0x9744
   25738:	movt	r3, #2
   2573c:	str	r3, [r4, #44]	; 0x2c
   25740:	mov	r0, #0
   25744:	ldr	r4, [sp]
   25748:	add	sp, sp, #4
   2574c:	pop	{pc}		; (ldr pc, [sp], #4)

00025750 <flatcc_builder_custom_reset@@Base>:
   25750:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25754:	strd	r6, [sp, #8]
   25758:	strd	r8, [sp, #16]
   2575c:	strd	sl, [sp, #24]
   25760:	str	lr, [sp, #32]
   25764:	sub	sp, sp, #12
   25768:	mov	r6, r0
   2576c:	mov	fp, r1
   25770:	mov	r9, r2
   25774:	mov	r4, r0
   25778:	mov	r5, #0
   2577c:	mov	sl, r5
   25780:	mov	r8, #1
   25784:	b	257a8 <flatcc_builder_custom_reset@@Base+0x58>
   25788:	ldr	r2, [r7, #56]	; 0x38
   2578c:	mov	r1, sl
   25790:	ldr	r0, [r7, #52]	; 0x34
   25794:	bl	1459c <memset@plt>
   25798:	add	r5, r5, #1
   2579c:	add	r4, r4, #8
   257a0:	cmp	r5, #8
   257a4:	beq	25818 <flatcc_builder_custom_reset@@Base+0xc8>
   257a8:	add	r1, r4, #52	; 0x34
   257ac:	mov	r7, r4
   257b0:	ldr	r3, [r4, #52]	; 0x34
   257b4:	cmp	r3, #0
   257b8:	beq	257f0 <flatcc_builder_custom_reset@@Base+0xa0>
   257bc:	cmp	r5, #5
   257c0:	cmpne	r9, #0
   257c4:	beq	25788 <flatcc_builder_custom_reset@@Base+0x38>
   257c8:	str	r5, [sp]
   257cc:	mov	r3, r8
   257d0:	mov	r2, r8
   257d4:	ldr	r0, [r6, #40]	; 0x28
   257d8:	ldr	ip, [r6, #48]	; 0x30
   257dc:	blx	ip
   257e0:	cmp	r0, #0
   257e4:	beq	25788 <flatcc_builder_custom_reset@@Base+0x38>
   257e8:	mvn	r0, #0
   257ec:	b	25894 <flatcc_builder_custom_reset@@Base+0x144>
   257f0:	ldr	r3, [r4, #56]	; 0x38
   257f4:	cmp	r3, #0
   257f8:	beq	25798 <flatcc_builder_custom_reset@@Base+0x48>
   257fc:	ldr	r3, [pc, #188]	; 258c0 <flatcc_builder_custom_reset@@Base+0x170>
   25800:	movw	r2, #434	; 0x1b2
   25804:	movw	r1, #5868	; 0x16ec
   25808:	movt	r1, #4
   2580c:	movw	r0, #5972	; 0x1754
   25810:	movt	r0, #4
   25814:	bl	145f0 <__assert_fail@plt>
   25818:	mov	r3, #0
   2581c:	str	r3, [r6, #120]	; 0x78
   25820:	ldr	r3, [r6, #124]	; 0x7c
   25824:	cmp	r3, #0
   25828:	movne	r3, #16
   2582c:	strne	r3, [r6, #124]	; 0x7c
   25830:	mov	r3, #0
   25834:	strh	r3, [r6, #128]	; 0x80
   25838:	str	r3, [r6, #136]	; 0x88
   2583c:	str	r3, [r6, #140]	; 0x8c
   25840:	str	r3, [r6, #156]	; 0x9c
   25844:	str	r3, [r6, #160]	; 0xa0
   25848:	str	r3, [r6, #20]
   2584c:	str	r3, [r6, #24]
   25850:	str	r3, [r6, #148]	; 0x94
   25854:	str	r3, [r6, #152]	; 0x98
   25858:	ldr	r2, [r6, #60]	; 0x3c
   2585c:	str	r2, [r6, #16]
   25860:	ldr	r2, [r6, #76]	; 0x4c
   25864:	str	r2, [r6]
   25868:	ldr	r2, [r6, #52]	; 0x34
   2586c:	str	r2, [r6, #4]
   25870:	str	r3, [r6, #32]
   25874:	cmp	fp, r3
   25878:	beq	25888 <flatcc_builder_custom_reset@@Base+0x138>
   2587c:	str	r3, [r6, #172]	; 0xac
   25880:	str	r3, [r6, #176]	; 0xb0
   25884:	str	r3, [r6, #180]	; 0xb4
   25888:	ldr	r0, [r6, #184]	; 0xb8
   2588c:	cmp	r0, #0
   25890:	bne	258b0 <flatcc_builder_custom_reset@@Base+0x160>
   25894:	add	sp, sp, #12
   25898:	ldrd	r4, [sp]
   2589c:	ldrd	r6, [sp, #8]
   258a0:	ldrd	r8, [sp, #16]
   258a4:	ldrd	sl, [sp, #24]
   258a8:	add	sp, sp, #32
   258ac:	pop	{pc}		; (ldr pc, [sp], #4)
   258b0:	add	r0, r6, #188	; 0xbc
   258b4:	bl	295ec <flatcc_emitter_reset@@Base>
   258b8:	mov	r0, #0
   258bc:	b	25894 <flatcc_builder_custom_reset@@Base+0x144>
   258c0:	strdeq	r1, [r4], -r4

000258c4 <flatcc_builder_reset@@Base>:
   258c4:	str	r4, [sp, #-8]!
   258c8:	str	lr, [sp, #4]
   258cc:	mov	r2, #0
   258d0:	mov	r1, r2
   258d4:	bl	25750 <flatcc_builder_custom_reset@@Base>
   258d8:	ldr	r4, [sp]
   258dc:	add	sp, sp, #4
   258e0:	pop	{pc}		; (ldr pc, [sp], #4)

000258e4 <flatcc_builder_clear@@Base>:
   258e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   258e8:	strd	r6, [sp, #8]
   258ec:	str	r8, [sp, #16]
   258f0:	str	lr, [sp, #20]
   258f4:	sub	sp, sp, #8
   258f8:	mov	r6, r0
   258fc:	add	r5, r0, #52	; 0x34
   25900:	mov	r4, #0
   25904:	mov	r8, r4
   25908:	str	r4, [sp]
   2590c:	ldr	r7, [r6, #48]	; 0x30
   25910:	mov	r3, r8
   25914:	mov	r2, r8
   25918:	mov	r1, r5
   2591c:	ldr	r0, [r6, #40]	; 0x28
   25920:	blx	r7
   25924:	add	r4, r4, #1
   25928:	add	r5, r5, #8
   2592c:	cmp	r4, #8
   25930:	bne	25908 <flatcc_builder_clear@@Base+0x24>
   25934:	ldr	r3, [r6, #184]	; 0xb8
   25938:	cmp	r3, #0
   2593c:	bne	25968 <flatcc_builder_clear@@Base+0x84>
   25940:	mov	r2, #232	; 0xe8
   25944:	mov	r1, #0
   25948:	mov	r0, r6
   2594c:	bl	1459c <memset@plt>
   25950:	add	sp, sp, #8
   25954:	ldrd	r4, [sp]
   25958:	ldrd	r6, [sp, #8]
   2595c:	ldr	r8, [sp, #16]
   25960:	add	sp, sp, #20
   25964:	pop	{pc}		; (ldr pc, [sp], #4)
   25968:	add	r0, r6, #188	; 0xbc
   2596c:	bl	296c8 <flatcc_emitter_clear@@Base>
   25970:	b	25940 <flatcc_builder_clear@@Base+0x5c>

00025974 <flatcc_builder_enter_user_frame_ptr@@Base>:
   25974:	strd	r4, [sp, #-24]!	; 0xffffffe8
   25978:	strd	r6, [sp, #8]
   2597c:	str	r8, [sp, #16]
   25980:	str	lr, [sp, #20]
   25984:	sub	sp, sp, #8
   25988:	mov	r4, r0
   2598c:	add	r5, r1, #3
   25990:	bic	r5, r5, #3
   25994:	add	r5, r5, #4
   25998:	ldr	r6, [r0, #228]	; 0xe4
   2599c:	add	r2, r6, r5
   259a0:	ldr	r3, [r0, #112]	; 0x70
   259a4:	cmp	r2, r3
   259a8:	bls	259d0 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   259ac:	mov	r3, #7
   259b0:	str	r3, [sp]
   259b4:	ldr	r7, [r0, #48]	; 0x30
   259b8:	mov	r3, #0
   259bc:	add	r1, r0, #108	; 0x6c
   259c0:	ldr	r0, [r0, #40]	; 0x28
   259c4:	blx	r7
   259c8:	cmp	r0, #0
   259cc:	bne	25a28 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   259d0:	ldr	r8, [r4, #108]	; 0x6c
   259d4:	adds	r7, r8, r6
   259d8:	moveq	r0, #0
   259dc:	beq	25a10 <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   259e0:	mov	r2, r5
   259e4:	mov	r1, #0
   259e8:	mov	r0, r7
   259ec:	bl	1459c <memset@plt>
   259f0:	add	r0, r7, #4
   259f4:	ldr	r3, [r4, #224]	; 0xe0
   259f8:	str	r3, [r8, r6]
   259fc:	ldr	r1, [r4, #228]	; 0xe4
   25a00:	add	r3, r1, #4
   25a04:	str	r3, [r4, #224]	; 0xe0
   25a08:	add	r5, r1, r5
   25a0c:	str	r5, [r4, #228]	; 0xe4
   25a10:	add	sp, sp, #8
   25a14:	ldrd	r4, [sp]
   25a18:	ldrd	r6, [sp, #8]
   25a1c:	ldr	r8, [sp, #16]
   25a20:	add	sp, sp, #20
   25a24:	pop	{pc}		; (ldr pc, [sp], #4)
   25a28:	ldr	r3, [pc, #20]	; 25a44 <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   25a2c:	mov	r2, #308	; 0x134
   25a30:	movw	r1, #5868	; 0x16ec
   25a34:	movt	r1, #4
   25a38:	movw	r0, #5952	; 0x1740
   25a3c:	movt	r0, #4
   25a40:	bl	145f0 <__assert_fail@plt>
   25a44:			; <UNDEFINED> instruction: 0x000411b8

00025a48 <flatcc_builder_enter_user_frame@@Base>:
   25a48:	strd	r4, [sp, #-20]!	; 0xffffffec
   25a4c:	strd	r6, [sp, #8]
   25a50:	str	lr, [sp, #16]
   25a54:	sub	sp, sp, #12
   25a58:	mov	r4, r0
   25a5c:	add	r5, r1, #3
   25a60:	bic	r5, r5, #3
   25a64:	add	r5, r5, #4
   25a68:	ldr	r6, [r0, #228]	; 0xe4
   25a6c:	add	r2, r6, r5
   25a70:	ldr	r3, [r0, #112]	; 0x70
   25a74:	cmp	r2, r3
   25a78:	bls	25aa0 <flatcc_builder_enter_user_frame@@Base+0x58>
   25a7c:	mov	r3, #7
   25a80:	str	r3, [sp]
   25a84:	ldr	r7, [r0, #48]	; 0x30
   25a88:	mov	r3, #0
   25a8c:	add	r1, r0, #108	; 0x6c
   25a90:	ldr	r0, [r0, #40]	; 0x28
   25a94:	blx	r7
   25a98:	cmp	r0, #0
   25a9c:	bne	25ae8 <flatcc_builder_enter_user_frame@@Base+0xa0>
   25aa0:	ldr	r7, [r4, #108]	; 0x6c
   25aa4:	adds	r0, r7, r6
   25aa8:	beq	25ad4 <flatcc_builder_enter_user_frame@@Base+0x8c>
   25aac:	mov	r2, r5
   25ab0:	mov	r1, #0
   25ab4:	bl	1459c <memset@plt>
   25ab8:	ldr	r3, [r4, #224]	; 0xe0
   25abc:	str	r3, [r7, r6]
   25ac0:	ldr	r1, [r4, #228]	; 0xe4
   25ac4:	add	r0, r1, #4
   25ac8:	str	r0, [r4, #224]	; 0xe0
   25acc:	add	r5, r1, r5
   25ad0:	str	r5, [r4, #228]	; 0xe4
   25ad4:	add	sp, sp, #12
   25ad8:	ldrd	r4, [sp]
   25adc:	ldrd	r6, [sp, #8]
   25ae0:	add	sp, sp, #16
   25ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   25ae8:	ldr	r3, [pc, #20]	; 25b04 <flatcc_builder_enter_user_frame@@Base+0xbc>
   25aec:	mov	r2, #308	; 0x134
   25af0:	movw	r1, #5868	; 0x16ec
   25af4:	movt	r1, #4
   25af8:	movw	r0, #5952	; 0x1740
   25afc:	movt	r0, #4
   25b00:	bl	145f0 <__assert_fail@plt>
   25b04:			; <UNDEFINED> instruction: 0x000411b8

00025b08 <flatcc_builder_exit_user_frame@@Base>:
   25b08:	ldr	r3, [r0, #224]	; 0xe0
   25b0c:	cmp	r3, #0
   25b10:	beq	25b34 <flatcc_builder_exit_user_frame@@Base+0x2c>
   25b14:	ldr	r2, [r0, #108]	; 0x6c
   25b18:	add	r2, r2, r3
   25b1c:	sub	r3, r3, #4
   25b20:	str	r3, [r0, #228]	; 0xe4
   25b24:	ldr	r3, [r2, #-4]
   25b28:	str	r3, [r0, #224]	; 0xe0
   25b2c:	mov	r0, r3
   25b30:	bx	lr
   25b34:	str	r4, [sp, #-8]!
   25b38:	str	lr, [sp, #4]
   25b3c:	ldr	r3, [pc, #20]	; 25b58 <flatcc_builder_exit_user_frame@@Base+0x50>
   25b40:	movw	r2, #542	; 0x21e
   25b44:	movw	r1, #5868	; 0x16ec
   25b48:	movt	r1, #4
   25b4c:	movw	r0, #5992	; 0x1768
   25b50:	movt	r0, #4
   25b54:	bl	145f0 <__assert_fail@plt>
   25b58:	andeq	r1, r4, r0, lsl r2

00025b5c <flatcc_builder_exit_user_frame_at@@Base>:
   25b5c:	str	r4, [sp, #-8]!
   25b60:	str	lr, [sp, #4]
   25b64:	ldr	r3, [r0, #224]	; 0xe0
   25b68:	cmp	r3, r1
   25b6c:	bcc	25b84 <flatcc_builder_exit_user_frame_at@@Base+0x28>
   25b70:	str	r1, [r0, #224]	; 0xe0
   25b74:	bl	25b08 <flatcc_builder_exit_user_frame@@Base>
   25b78:	ldr	r4, [sp]
   25b7c:	add	sp, sp, #4
   25b80:	pop	{pc}		; (ldr pc, [sp], #4)
   25b84:	ldr	r3, [pc, #20]	; 25ba0 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   25b88:	movw	r2, #551	; 0x227
   25b8c:	movw	r1, #5868	; 0x16ec
   25b90:	movt	r1, #4
   25b94:	movw	r0, #6020	; 0x1784
   25b98:	movt	r0, #4
   25b9c:	bl	145f0 <__assert_fail@plt>
   25ba0:	andeq	r1, r4, r0, lsr r2

00025ba4 <flatcc_builder_get_current_user_frame@@Base>:
   25ba4:	ldr	r0, [r0, #224]	; 0xe0
   25ba8:	bx	lr

00025bac <flatcc_builder_get_user_frame_ptr@@Base>:
   25bac:	ldr	r0, [r0, #108]	; 0x6c
   25bb0:	add	r0, r0, r1
   25bb4:	bx	lr

00025bb8 <flatcc_builder_embed_buffer@@Base>:
   25bb8:	strd	r4, [sp, #-16]!
   25bbc:	str	r6, [sp, #8]
   25bc0:	str	lr, [sp, #12]
   25bc4:	sub	sp, sp, #88	; 0x58
   25bc8:	mov	r4, r0
   25bcc:	mov	r6, r2
   25bd0:	mov	r5, r3
   25bd4:	ldr	r3, [r0, #152]	; 0x98
   25bd8:	adds	r3, r3, #0
   25bdc:	movne	r3, #1
   25be0:	mov	r2, r1
   25be4:	add	r1, sp, #104	; 0x68
   25be8:	bl	2519c <flatcc_builder_default_alloc@@Base+0x128>
   25bec:	cmp	r0, #0
   25bf0:	bne	25d4c <flatcc_builder_embed_buffer@@Base+0x194>
   25bf4:	ldr	r3, [sp, #108]	; 0x6c
   25bf8:	and	r3, r3, #2
   25bfc:	cmp	r3, #0
   25c00:	movne	r2, #4
   25c04:	moveq	r2, #0
   25c08:	ldr	r1, [r4, #136]	; 0x88
   25c0c:	sub	r3, r1, r5
   25c10:	sub	r2, r3, r2
   25c14:	ldrh	r3, [sp, #104]	; 0x68
   25c18:	sub	r3, r3, #1
   25c1c:	and	r3, r3, r2
   25c20:	add	r2, r5, r3
   25c24:	str	r2, [sp, #84]	; 0x54
   25c28:	mov	r2, #0
   25c2c:	str	r2, [sp, #12]
   25c30:	str	r2, [sp, #16]
   25c34:	ldr	r2, [r4, #152]	; 0x98
   25c38:	cmp	r2, #0
   25c3c:	beq	25c5c <flatcc_builder_embed_buffer@@Base+0xa4>
   25c40:	mov	r2, #4
   25c44:	str	r2, [sp, #12]
   25c48:	add	r0, sp, #84	; 0x54
   25c4c:	str	r0, [sp, #20]
   25c50:	str	r2, [sp, #24]
   25c54:	mov	r2, #1
   25c58:	str	r2, [sp, #16]
   25c5c:	cmp	r5, #0
   25c60:	beq	25c8c <flatcc_builder_embed_buffer@@Base+0xd4>
   25c64:	ldr	r2, [sp, #12]
   25c68:	add	r2, r2, r5
   25c6c:	str	r2, [sp, #12]
   25c70:	ldr	r2, [sp, #16]
   25c74:	add	r2, r2, #1
   25c78:	add	r0, sp, #88	; 0x58
   25c7c:	add	r0, r0, r2, lsl #3
   25c80:	str	r6, [r0, #-76]	; 0xffffffb4
   25c84:	str	r5, [r0, #-72]	; 0xffffffb8
   25c88:	str	r2, [sp, #16]
   25c8c:	cmp	r3, #0
   25c90:	beq	25cc4 <flatcc_builder_embed_buffer@@Base+0x10c>
   25c94:	ldr	r2, [sp, #12]
   25c98:	add	r2, r2, r3
   25c9c:	str	r2, [sp, #12]
   25ca0:	ldr	r2, [sp, #16]
   25ca4:	add	r2, r2, #1
   25ca8:	add	r0, sp, #88	; 0x58
   25cac:	add	ip, r0, r2, lsl #3
   25cb0:	movw	r0, #3996	; 0xf9c
   25cb4:	movt	r0, #4
   25cb8:	str	r0, [ip, #-76]	; 0xffffffb4
   25cbc:	str	r3, [ip, #-72]	; 0xffffffb8
   25cc0:	str	r2, [sp, #16]
   25cc4:	ldr	r3, [sp, #12]
   25cc8:	sub	r5, r1, r3
   25ccc:	cmp	r1, r5
   25cd0:	ble	25d14 <flatcc_builder_embed_buffer@@Base+0x15c>
   25cd4:	str	r3, [sp]
   25cd8:	ldr	r6, [r4, #44]	; 0x2c
   25cdc:	mov	r3, r5
   25ce0:	ldr	r2, [sp, #16]
   25ce4:	add	r1, sp, #20
   25ce8:	ldr	r0, [r4, #36]	; 0x24
   25cec:	blx	r6
   25cf0:	cmp	r0, #0
   25cf4:	streq	r5, [r4, #136]	; 0x88
   25cf8:	bne	25d30 <flatcc_builder_embed_buffer@@Base+0x178>
   25cfc:	mov	r0, r5
   25d00:	add	sp, sp, #88	; 0x58
   25d04:	ldrd	r4, [sp]
   25d08:	ldr	r6, [sp, #8]
   25d0c:	add	sp, sp, #12
   25d10:	pop	{pc}		; (ldr pc, [sp], #4)
   25d14:	ldr	r3, [pc, #56]	; 25d54 <flatcc_builder_embed_buffer@@Base+0x19c>
   25d18:	movw	r2, #647	; 0x287
   25d1c:	movw	r1, #5868	; 0x16ec
   25d20:	movt	r1, #4
   25d24:	movw	r0, #5952	; 0x1740
   25d28:	movt	r0, #4
   25d2c:	bl	145f0 <__assert_fail@plt>
   25d30:	ldr	r3, [pc, #28]	; 25d54 <flatcc_builder_embed_buffer@@Base+0x19c>
   25d34:	movw	r2, #651	; 0x28b
   25d38:	movw	r1, #5868	; 0x16ec
   25d3c:	movt	r1, #4
   25d40:	movw	r0, #5952	; 0x1740
   25d44:	movt	r0, #4
   25d48:	bl	145f0 <__assert_fail@plt>
   25d4c:	mov	r5, #0
   25d50:	b	25cfc <flatcc_builder_embed_buffer@@Base+0x144>
   25d54:	andeq	r1, r4, r8, ror #3

00025d58 <flatcc_builder_create_buffer@@Base>:
   25d58:	strd	r4, [sp, #-28]!	; 0xffffffe4
   25d5c:	strd	r6, [sp, #8]
   25d60:	strd	r8, [sp, #16]
   25d64:	str	lr, [sp, #24]
   25d68:	sub	sp, sp, #100	; 0x64
   25d6c:	mov	r5, r0
   25d70:	mov	r8, r1
   25d74:	mov	r4, r3
   25d78:	ldr	r7, [sp, #132]	; 0x84
   25d7c:	mov	r3, #0
   25d80:	str	r3, [sp, #12]
   25d84:	and	r6, r7, #1
   25d88:	mov	r3, r6
   25d8c:	add	r1, sp, #128	; 0x80
   25d90:	bl	2519c <flatcc_builder_default_alloc@@Base+0x128>
   25d94:	cmp	r0, #0
   25d98:	bne	25f94 <flatcc_builder_create_buffer@@Base+0x23c>
   25d9c:	ldrh	r2, [sp, #128]	; 0x80
   25da0:	ldrh	r3, [r5, #128]	; 0x80
   25da4:	cmp	r3, r2
   25da8:	strhcc	r2, [r5, #128]	; 0x80
   25dac:	cmp	r8, #0
   25db0:	ldrne	r3, [r8]
   25db4:	strne	r3, [sp, #12]
   25db8:	ldr	r1, [sp, #12]
   25dbc:	cmp	r1, #0
   25dc0:	movne	r1, #4
   25dc4:	and	r3, r7, #2
   25dc8:	cmp	r3, #0
   25dcc:	movne	ip, #4
   25dd0:	moveq	ip, #0
   25dd4:	ldr	r0, [r5, #136]	; 0x88
   25dd8:	sub	r3, r0, #4
   25ddc:	sub	r3, r3, r1
   25de0:	sub	r3, r3, ip
   25de4:	sub	r2, r2, #1
   25de8:	and	r3, r3, r2
   25dec:	mov	r2, #0
   25df0:	str	r2, [sp, #16]
   25df4:	str	r2, [sp, #20]
   25df8:	ands	r7, r7, #3
   25dfc:	beq	25e1c <flatcc_builder_create_buffer@@Base+0xc4>
   25e00:	mov	r2, #4
   25e04:	str	r2, [sp, #16]
   25e08:	add	ip, sp, #88	; 0x58
   25e0c:	str	ip, [sp, #24]
   25e10:	str	r2, [sp, #28]
   25e14:	mov	r2, #1
   25e18:	str	r2, [sp, #20]
   25e1c:	ldr	ip, [sp, #16]
   25e20:	add	ip, ip, #4
   25e24:	str	ip, [sp, #16]
   25e28:	ldr	lr, [sp, #20]
   25e2c:	add	r2, lr, #1
   25e30:	add	r8, sp, #96	; 0x60
   25e34:	add	r8, r8, r2, lsl #3
   25e38:	add	r9, sp, #92	; 0x5c
   25e3c:	str	r9, [r8, #-80]	; 0xffffffb0
   25e40:	mov	r9, #4
   25e44:	str	r9, [r8, #-76]	; 0xffffffb4
   25e48:	str	r2, [sp, #20]
   25e4c:	cmp	r1, #0
   25e50:	beq	25e7c <flatcc_builder_create_buffer@@Base+0x124>
   25e54:	add	ip, ip, r1
   25e58:	str	ip, [sp, #16]
   25e5c:	add	r2, lr, #2
   25e60:	add	ip, sp, #96	; 0x60
   25e64:	add	r2, ip, r2, lsl #3
   25e68:	add	ip, sp, #12
   25e6c:	str	ip, [r2, #-80]	; 0xffffffb0
   25e70:	str	r1, [r2, #-76]	; 0xffffffb4
   25e74:	add	lr, lr, #2
   25e78:	str	lr, [sp, #20]
   25e7c:	cmp	r3, #0
   25e80:	beq	25eb4 <flatcc_builder_create_buffer@@Base+0x15c>
   25e84:	ldr	r2, [sp, #16]
   25e88:	add	r2, r2, r3
   25e8c:	str	r2, [sp, #16]
   25e90:	ldr	r2, [sp, #20]
   25e94:	add	r2, r2, #1
   25e98:	add	r1, sp, #96	; 0x60
   25e9c:	add	ip, r1, r2, lsl #3
   25ea0:	movw	r1, #3996	; 0xf9c
   25ea4:	movt	r1, #4
   25ea8:	str	r1, [ip, #-80]	; 0xffffffb0
   25eac:	str	r3, [ip, #-76]	; 0xffffffb4
   25eb0:	str	r2, [sp, #20]
   25eb4:	ldr	r1, [sp, #16]
   25eb8:	sub	r3, r0, r1
   25ebc:	cmp	r7, #0
   25ec0:	movne	r2, #4
   25ec4:	moveq	r2, #0
   25ec8:	add	r3, r3, r2
   25ecc:	cmp	r6, #0
   25ed0:	ldrne	r2, [r5, #144]	; 0x90
   25ed4:	ldreq	r2, [r5, #140]	; 0x8c
   25ed8:	sub	r2, r2, r3
   25edc:	str	r2, [sp, #88]	; 0x58
   25ee0:	sub	r4, r4, r3
   25ee4:	str	r4, [sp, #92]	; 0x5c
   25ee8:	sub	r4, r0, r1
   25eec:	cmp	r0, r4
   25ef0:	ble	25f40 <flatcc_builder_create_buffer@@Base+0x1e8>
   25ef4:	str	r1, [sp]
   25ef8:	ldr	r6, [r5, #44]	; 0x2c
   25efc:	mov	r3, r4
   25f00:	ldr	r2, [sp, #20]
   25f04:	add	r1, sp, #24
   25f08:	ldr	r0, [r5, #36]	; 0x24
   25f0c:	blx	r6
   25f10:	cmp	r0, #0
   25f14:	bne	25f5c <flatcc_builder_create_buffer@@Base+0x204>
   25f18:	str	r4, [r5, #136]	; 0x88
   25f1c:	cmp	r4, #0
   25f20:	beq	25f78 <flatcc_builder_create_buffer@@Base+0x220>
   25f24:	mov	r0, r4
   25f28:	add	sp, sp, #100	; 0x64
   25f2c:	ldrd	r4, [sp]
   25f30:	ldrd	r6, [sp, #8]
   25f34:	ldrd	r8, [sp, #16]
   25f38:	add	sp, sp, #24
   25f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   25f40:	ldr	r3, [pc, #84]	; 25f9c <flatcc_builder_create_buffer@@Base+0x244>
   25f44:	movw	r2, #647	; 0x287
   25f48:	movw	r1, #5868	; 0x16ec
   25f4c:	movt	r1, #4
   25f50:	movw	r0, #5952	; 0x1740
   25f54:	movt	r0, #4
   25f58:	bl	145f0 <__assert_fail@plt>
   25f5c:	ldr	r3, [pc, #56]	; 25f9c <flatcc_builder_create_buffer@@Base+0x244>
   25f60:	movw	r2, #651	; 0x28b
   25f64:	movw	r1, #5868	; 0x16ec
   25f68:	movt	r1, #4
   25f6c:	movw	r0, #5952	; 0x1740
   25f70:	movt	r0, #4
   25f74:	bl	145f0 <__assert_fail@plt>
   25f78:	ldr	r3, [pc, #32]	; 25fa0 <flatcc_builder_create_buffer@@Base+0x248>
   25f7c:	mov	r2, #772	; 0x304
   25f80:	movw	r1, #5868	; 0x16ec
   25f84:	movt	r1, #4
   25f88:	movw	r0, #5952	; 0x1740
   25f8c:	movt	r0, #4
   25f90:	bl	145f0 <__assert_fail@plt>
   25f94:	mov	r4, #0
   25f98:	b	25f24 <flatcc_builder_create_buffer@@Base+0x1cc>
   25f9c:	andeq	r1, r4, r8, ror #3
   25fa0:	andeq	r1, r4, r4, asr r2

00025fa4 <flatcc_builder_create_struct@@Base>:
   25fa4:	strd	r4, [sp, #-16]!
   25fa8:	str	r6, [sp, #8]
   25fac:	str	lr, [sp, #12]
   25fb0:	sub	sp, sp, #80	; 0x50
   25fb4:	cmp	r3, #0
   25fb8:	beq	26010 <flatcc_builder_create_struct@@Base+0x6c>
   25fbc:	mov	r4, r0
   25fc0:	ldrh	r0, [r0, #128]	; 0x80
   25fc4:	cmp	r0, r3
   25fc8:	strhcc	r3, [r4, #128]	; 0x80
   25fcc:	ldr	ip, [r4, #136]	; 0x88
   25fd0:	sub	r0, ip, r2
   25fd4:	sub	r3, r3, #1
   25fd8:	and	r3, r3, r0
   25fdc:	mov	r0, #0
   25fe0:	str	r0, [sp, #8]
   25fe4:	str	r0, [sp, #12]
   25fe8:	cmp	r2, r0
   25fec:	beq	26064 <flatcc_builder_create_struct@@Base+0xc0>
   25ff0:	str	r2, [sp, #8]
   25ff4:	str	r1, [sp, #16]
   25ff8:	str	r2, [sp, #20]
   25ffc:	mov	r2, #1
   26000:	str	r2, [sp, #12]
   26004:	cmp	r3, r0
   26008:	beq	2609c <flatcc_builder_create_struct@@Base+0xf8>
   2600c:	b	2606c <flatcc_builder_create_struct@@Base+0xc8>
   26010:	ldr	r3, [pc, #212]	; 260ec <flatcc_builder_create_struct@@Base+0x148>
   26014:	movw	r2, #783	; 0x30f
   26018:	movw	r1, #5868	; 0x16ec
   2601c:	movt	r1, #4
   26020:	movw	r0, #6052	; 0x17a4
   26024:	movt	r0, #4
   26028:	bl	145f0 <__assert_fail@plt>
   2602c:	ldr	r3, [pc, #188]	; 260f0 <flatcc_builder_create_struct@@Base+0x14c>
   26030:	movw	r2, #647	; 0x287
   26034:	movw	r1, #5868	; 0x16ec
   26038:	movt	r1, #4
   2603c:	movw	r0, #5952	; 0x1740
   26040:	movt	r0, #4
   26044:	bl	145f0 <__assert_fail@plt>
   26048:	ldr	r3, [pc, #160]	; 260f0 <flatcc_builder_create_struct@@Base+0x14c>
   2604c:	movw	r2, #651	; 0x28b
   26050:	movw	r1, #5868	; 0x16ec
   26054:	movt	r1, #4
   26058:	movw	r0, #5952	; 0x1740
   2605c:	movt	r0, #4
   26060:	bl	145f0 <__assert_fail@plt>
   26064:	cmp	r3, #0
   26068:	beq	2602c <flatcc_builder_create_struct@@Base+0x88>
   2606c:	ldr	r2, [sp, #8]
   26070:	add	r2, r2, r3
   26074:	str	r2, [sp, #8]
   26078:	ldr	r2, [sp, #12]
   2607c:	add	r2, r2, #1
   26080:	add	r1, sp, #80	; 0x50
   26084:	add	r0, r1, r2, lsl #3
   26088:	movw	r1, #3996	; 0xf9c
   2608c:	movt	r1, #4
   26090:	str	r1, [r0, #-72]	; 0xffffffb8
   26094:	str	r3, [r0, #-68]	; 0xffffffbc
   26098:	str	r2, [sp, #12]
   2609c:	ldr	r3, [sp, #8]
   260a0:	sub	r5, ip, r3
   260a4:	cmp	ip, r5
   260a8:	ble	2602c <flatcc_builder_create_struct@@Base+0x88>
   260ac:	str	r3, [sp]
   260b0:	ldr	r6, [r4, #44]	; 0x2c
   260b4:	mov	r3, r5
   260b8:	ldr	r2, [sp, #12]
   260bc:	add	r1, sp, #16
   260c0:	ldr	r0, [r4, #36]	; 0x24
   260c4:	blx	r6
   260c8:	cmp	r0, #0
   260cc:	bne	26048 <flatcc_builder_create_struct@@Base+0xa4>
   260d0:	str	r5, [r4, #136]	; 0x88
   260d4:	mov	r0, r5
   260d8:	add	sp, sp, #80	; 0x50
   260dc:	ldrd	r4, [sp]
   260e0:	ldr	r6, [sp, #8]
   260e4:	add	sp, sp, #12
   260e8:	pop	{pc}		; (ldr pc, [sp], #4)
   260ec:	andeq	r1, r4, r4, ror r2
   260f0:	andeq	r1, r4, r8, ror #3

000260f4 <flatcc_builder_start_buffer@@Base>:
   260f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   260f8:	strd	r6, [sp, #8]
   260fc:	str	r8, [sp, #16]
   26100:	str	lr, [sp, #20]
   26104:	mov	r4, r0
   26108:	mov	r5, r1
   2610c:	mov	r7, r2
   26110:	mov	r6, r3
   26114:	ldrh	r1, [r0, #128]	; 0x80
   26118:	bl	252c0 <flatcc_builder_default_alloc@@Base+0x24c>
   2611c:	cmp	r0, #0
   26120:	bne	261c0 <flatcc_builder_start_buffer@@Base+0xcc>
   26124:	mov	r3, #1
   26128:	strh	r3, [r4, #128]	; 0x80
   2612c:	ldr	r3, [r4, #32]
   26130:	ldrh	r2, [r4, #132]	; 0x84
   26134:	strh	r2, [r3, #34]	; 0x22
   26138:	strh	r7, [r4, #132]	; 0x84
   2613c:	ldr	r3, [r4, #32]
   26140:	ldrh	r2, [r4, #164]	; 0xa4
   26144:	strh	r2, [r3, #32]
   26148:	strh	r6, [r4, #164]	; 0xa4
   2614c:	ldr	r3, [r4, #32]
   26150:	ldr	r2, [r4, #144]	; 0x90
   26154:	str	r2, [r3, #20]
   26158:	ldr	r3, [r4, #32]
   2615c:	ldr	r2, [r4, #152]	; 0x98
   26160:	str	r2, [r3, #28]
   26164:	ldr	r3, [r4, #136]	; 0x88
   26168:	str	r3, [r4, #144]	; 0x90
   2616c:	ldr	r3, [r4, #148]	; 0x94
   26170:	add	r2, r3, #1
   26174:	str	r2, [r4, #148]	; 0x94
   26178:	str	r3, [r4, #152]	; 0x98
   2617c:	ldr	r3, [r4, #32]
   26180:	ldr	r2, [r4, #168]	; 0xa8
   26184:	str	r2, [r3, #16]
   26188:	movw	r3, #3996	; 0xf9c
   2618c:	movt	r3, #4
   26190:	cmp	r5, #0
   26194:	moveq	r5, r3
   26198:	ldr	r3, [r5]
   2619c:	str	r3, [r4, #168]	; 0xa8
   261a0:	ldr	r3, [r4, #32]
   261a4:	mov	r2, #1
   261a8:	strh	r2, [r3, #14]
   261ac:	ldrd	r4, [sp]
   261b0:	ldrd	r6, [sp, #8]
   261b4:	ldr	r8, [sp, #16]
   261b8:	add	sp, sp, #20
   261bc:	pop	{pc}		; (ldr pc, [sp], #4)
   261c0:	mvn	r0, #0
   261c4:	b	261ac <flatcc_builder_start_buffer@@Base+0xb8>

000261c8 <flatcc_builder_end_buffer@@Base>:
   261c8:	strd	r4, [sp, #-12]!
   261cc:	str	lr, [sp, #8]
   261d0:	sub	sp, sp, #12
   261d4:	mov	r4, r0
   261d8:	ldrh	r2, [r0, #164]	; 0xa4
   261dc:	and	r2, r2, #2
   261e0:	ldr	r0, [r0, #152]	; 0x98
   261e4:	cmp	r0, #0
   261e8:	moveq	r0, r2
   261ec:	orrne	r0, r2, #1
   261f0:	ldr	r2, [r4, #32]
   261f4:	ldrh	r2, [r2, #14]
   261f8:	cmp	r2, #1
   261fc:	bne	26248 <flatcc_builder_end_buffer@@Base+0x80>
   26200:	ldrh	r2, [r4, #132]	; 0x84
   26204:	ldrh	r3, [r4, #128]	; 0x80
   26208:	cmp	r3, r2
   2620c:	strhcc	r2, [r4, #128]	; 0x80
   26210:	str	r0, [sp, #4]
   26214:	ldrh	r3, [r4, #128]	; 0x80
   26218:	str	r3, [sp]
   2621c:	mov	r3, r1
   26220:	add	r1, r4, #168	; 0xa8
   26224:	mov	r0, r4
   26228:	bl	25d58 <flatcc_builder_create_buffer@@Base>
   2622c:	subs	r5, r0, #0
   26230:	bne	26264 <flatcc_builder_end_buffer@@Base+0x9c>
   26234:	mov	r0, r5
   26238:	add	sp, sp, #12
   2623c:	ldrd	r4, [sp]
   26240:	add	sp, sp, #8
   26244:	pop	{pc}		; (ldr pc, [sp], #4)
   26248:	ldr	r3, [pc, #184]	; 26308 <flatcc_builder_end_buffer@@Base+0x140>
   2624c:	movw	r2, #838	; 0x346
   26250:	movw	r1, #5868	; 0x16ec
   26254:	movt	r1, #4
   26258:	movw	r0, #6064	; 0x17b0
   2625c:	movt	r0, #4
   26260:	bl	145f0 <__assert_fail@plt>
   26264:	ldr	r3, [r4, #32]
   26268:	ldr	r2, [r3, #20]
   2626c:	str	r2, [r4, #144]	; 0x90
   26270:	ldr	r2, [r3, #28]
   26274:	str	r2, [r4, #152]	; 0x98
   26278:	ldr	r2, [r3, #16]
   2627c:	str	r2, [r4, #168]	; 0xa8
   26280:	ldrh	r3, [r3, #32]
   26284:	strh	r3, [r4, #164]	; 0xa4
   26288:	ldr	r2, [r4, #20]
   2628c:	mov	r1, #0
   26290:	ldr	r0, [r4, #16]
   26294:	bl	1459c <memset@plt>
   26298:	ldr	r2, [r4, #32]
   2629c:	ldr	r3, [r2, #8]
   262a0:	str	r3, [r4, #20]
   262a4:	ldr	r0, [r2]
   262a8:	str	r0, [r4, #28]
   262ac:	ldr	r1, [r2, #4]
   262b0:	ldr	r3, [r4, #60]	; 0x3c
   262b4:	add	r3, r3, r0
   262b8:	str	r3, [r4, #16]
   262bc:	ldr	r3, [r4, #64]	; 0x40
   262c0:	sub	r3, r3, r0
   262c4:	cmp	r3, r1
   262c8:	movcs	r3, r1
   262cc:	str	r3, [r4, #24]
   262d0:	str	r1, [r2, #4]
   262d4:	ldrh	r3, [r4, #130]	; 0x82
   262d8:	ldrh	r2, [r4, #128]	; 0x80
   262dc:	cmp	r2, r3
   262e0:	strhcc	r3, [r4, #128]	; 0x80
   262e4:	ldr	r3, [r4, #32]
   262e8:	ldrh	r2, [r3, #12]
   262ec:	strh	r2, [r4, #130]	; 0x82
   262f0:	sub	r3, r3, #36	; 0x24
   262f4:	str	r3, [r4, #32]
   262f8:	ldr	r3, [r4, #156]	; 0x9c
   262fc:	sub	r3, r3, #1
   26300:	str	r3, [r4, #156]	; 0x9c
   26304:	b	26234 <flatcc_builder_end_buffer@@Base+0x6c>
   26308:	muleq	r4, r4, r2

0002630c <flatcc_builder_start_struct@@Base>:
   2630c:	strd	r4, [sp, #-16]!
   26310:	str	r6, [sp, #8]
   26314:	str	lr, [sp, #12]
   26318:	mov	r4, r0
   2631c:	mov	r5, r1
   26320:	mov	r1, r2
   26324:	bl	252c0 <flatcc_builder_default_alloc@@Base+0x24c>
   26328:	cmp	r0, #0
   2632c:	movne	r0, #0
   26330:	bne	26390 <flatcc_builder_start_struct@@Base+0x84>
   26334:	ldr	r3, [r4, #32]
   26338:	mov	r2, #2
   2633c:	strh	r2, [r3, #14]
   26340:	ldr	r1, [r4, #28]
   26344:	ldr	r2, [r4, #60]	; 0x3c
   26348:	add	r2, r2, r1
   2634c:	str	r2, [r4, #16]
   26350:	ldr	r3, [r4, #64]	; 0x40
   26354:	sub	r3, r3, r1
   26358:	cmn	r3, #4
   2635c:	mvnhi	r3, #3
   26360:	str	r3, [r4, #24]
   26364:	ldr	r3, [r4, #32]
   26368:	mvn	r2, #3
   2636c:	str	r2, [r3, #4]
   26370:	ldr	r6, [r4, #20]
   26374:	add	r5, r5, r6
   26378:	str	r5, [r4, #20]
   2637c:	ldr	r3, [r4, #24]
   26380:	cmp	r5, r3
   26384:	bcs	263a0 <flatcc_builder_start_struct@@Base+0x94>
   26388:	ldr	r0, [r4, #16]
   2638c:	add	r0, r0, r6
   26390:	ldrd	r4, [sp]
   26394:	ldr	r6, [sp, #8]
   26398:	add	sp, sp, #12
   2639c:	pop	{pc}		; (ldr pc, [sp], #4)
   263a0:	add	r1, r5, #1
   263a4:	mov	r0, r4
   263a8:	bl	24fec <main@@Base+0x79c>
   263ac:	cmp	r0, #0
   263b0:	movne	r0, #0
   263b4:	beq	26388 <flatcc_builder_start_struct@@Base+0x7c>
   263b8:	b	26390 <flatcc_builder_start_struct@@Base+0x84>

000263bc <flatcc_builder_struct_edit@@Base>:
   263bc:	ldr	r0, [r0, #16]
   263c0:	bx	lr

000263c4 <flatcc_builder_end_struct@@Base>:
   263c4:	strd	r4, [sp, #-16]!
   263c8:	str	r6, [sp, #8]
   263cc:	str	lr, [sp, #12]
   263d0:	ldr	r3, [r0, #32]
   263d4:	ldrh	r3, [r3, #14]
   263d8:	cmp	r3, #2
   263dc:	bne	26410 <flatcc_builder_end_struct@@Base+0x4c>
   263e0:	mov	r4, r0
   263e4:	ldrh	r3, [r0, #130]	; 0x82
   263e8:	ldr	r2, [r0, #20]
   263ec:	ldr	r1, [r0, #16]
   263f0:	bl	25fa4 <flatcc_builder_create_struct@@Base>
   263f4:	subs	r5, r0, #0
   263f8:	bne	2642c <flatcc_builder_end_struct@@Base+0x68>
   263fc:	mov	r0, r5
   26400:	ldrd	r4, [sp]
   26404:	ldr	r6, [sp, #8]
   26408:	add	sp, sp, #12
   2640c:	pop	{pc}		; (ldr pc, [sp], #4)
   26410:	ldr	r3, [pc, #148]	; 264ac <flatcc_builder_end_struct@@Base+0xe8>
   26414:	mov	r2, #872	; 0x368
   26418:	movw	r1, #5868	; 0x16ec
   2641c:	movt	r1, #4
   26420:	movw	r0, #6108	; 0x17dc
   26424:	movt	r0, #4
   26428:	bl	145f0 <__assert_fail@plt>
   2642c:	ldr	r2, [r4, #20]
   26430:	mov	r1, #0
   26434:	ldr	r0, [r4, #16]
   26438:	bl	1459c <memset@plt>
   2643c:	ldr	r2, [r4, #32]
   26440:	ldr	r3, [r2, #8]
   26444:	str	r3, [r4, #20]
   26448:	ldr	r0, [r2]
   2644c:	str	r0, [r4, #28]
   26450:	ldr	r1, [r2, #4]
   26454:	ldr	r3, [r4, #60]	; 0x3c
   26458:	add	r3, r3, r0
   2645c:	str	r3, [r4, #16]
   26460:	ldr	r3, [r4, #64]	; 0x40
   26464:	sub	r3, r3, r0
   26468:	cmp	r3, r1
   2646c:	movcs	r3, r1
   26470:	str	r3, [r4, #24]
   26474:	str	r1, [r2, #4]
   26478:	ldrh	r3, [r4, #130]	; 0x82
   2647c:	ldrh	r2, [r4, #128]	; 0x80
   26480:	cmp	r2, r3
   26484:	strhcc	r3, [r4, #128]	; 0x80
   26488:	ldr	r3, [r4, #32]
   2648c:	ldrh	r2, [r3, #12]
   26490:	strh	r2, [r4, #130]	; 0x82
   26494:	sub	r3, r3, #36	; 0x24
   26498:	str	r3, [r4, #32]
   2649c:	ldr	r3, [r4, #156]	; 0x9c
   264a0:	sub	r3, r3, #1
   264a4:	str	r3, [r4, #156]	; 0x9c
   264a8:	b	263fc <flatcc_builder_end_struct@@Base+0x38>
   264ac:			; <UNDEFINED> instruction: 0x000412b0

000264b0 <flatcc_builder_extend_vector@@Base>:
   264b0:	strd	r4, [sp, #-16]!
   264b4:	str	r6, [sp, #8]
   264b8:	str	lr, [sp, #12]
   264bc:	mov	r4, r0
   264c0:	ldr	r2, [r0, #32]
   264c4:	ldr	r3, [r2, #20]
   264c8:	add	r0, r1, r3
   264cc:	ldr	ip, [r2, #24]
   264d0:	cmp	r3, r0
   264d4:	movls	r3, #0
   264d8:	movhi	r3, #1
   264dc:	cmp	ip, r0
   264e0:	orrcc	r3, r3, #1
   264e4:	cmp	r3, #0
   264e8:	bne	26528 <flatcc_builder_extend_vector@@Base+0x78>
   264ec:	str	r0, [r2, #20]
   264f0:	ldr	r5, [r4, #20]
   264f4:	ldr	r3, [r4, #32]
   264f8:	ldr	r3, [r3, #16]
   264fc:	mla	r1, r3, r1, r5
   26500:	str	r1, [r4, #20]
   26504:	ldr	r3, [r4, #24]
   26508:	cmp	r1, r3
   2650c:	bcs	26544 <flatcc_builder_extend_vector@@Base+0x94>
   26510:	ldr	r0, [r4, #16]
   26514:	add	r0, r0, r5
   26518:	ldrd	r4, [sp]
   2651c:	ldr	r6, [sp, #8]
   26520:	add	sp, sp, #12
   26524:	pop	{pc}		; (ldr pc, [sp], #4)
   26528:	ldr	r3, [pc, #52]	; 26564 <flatcc_builder_extend_vector@@Base+0xb4>
   2652c:	mov	r2, #892	; 0x37c
   26530:	movw	r1, #5868	; 0x16ec
   26534:	movt	r1, #4
   26538:	movw	r0, #6152	; 0x1808
   2653c:	movt	r0, #4
   26540:	bl	145f0 <__assert_fail@plt>
   26544:	mvn	r2, #3
   26548:	add	r1, r1, #1
   2654c:	mov	r0, r4
   26550:	bl	24fec <main@@Base+0x79c>
   26554:	cmp	r0, #0
   26558:	movne	r0, #0
   2655c:	beq	26510 <flatcc_builder_extend_vector@@Base+0x60>
   26560:	b	26518 <flatcc_builder_extend_vector@@Base+0x68>
   26564:	andeq	r1, r4, ip, asr #5

00026568 <flatcc_builder_vector_push@@Base>:
   26568:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2656c:	strd	r6, [sp, #8]
   26570:	str	r8, [sp, #16]
   26574:	str	lr, [sp, #20]
   26578:	ldr	r3, [r0, #32]
   2657c:	ldrh	r2, [r3, #14]
   26580:	cmp	r2, #4
   26584:	bne	265fc <flatcc_builder_vector_push@@Base+0x94>
   26588:	mov	r4, r0
   2658c:	mov	r6, r1
   26590:	ldr	r2, [r3, #20]
   26594:	ldr	r1, [r3, #24]
   26598:	cmp	r2, r1
   2659c:	bhi	26618 <flatcc_builder_vector_push@@Base+0xb0>
   265a0:	add	r2, r2, #1
   265a4:	str	r2, [r3, #20]
   265a8:	ldr	r3, [r0, #32]
   265ac:	ldr	r7, [r3, #16]
   265b0:	ldr	r5, [r0, #20]
   265b4:	add	r1, r7, r5
   265b8:	str	r1, [r0, #20]
   265bc:	ldr	r3, [r0, #24]
   265c0:	cmp	r1, r3
   265c4:	bcs	26634 <flatcc_builder_vector_push@@Base+0xcc>
   265c8:	ldr	r4, [r4, #16]
   265cc:	adds	r4, r4, r5
   265d0:	beq	265e4 <flatcc_builder_vector_push@@Base+0x7c>
   265d4:	mov	r2, r7
   265d8:	mov	r1, r6
   265dc:	mov	r0, r4
   265e0:	bl	14524 <memcpy@plt>
   265e4:	mov	r0, r4
   265e8:	ldrd	r4, [sp]
   265ec:	ldrd	r6, [sp, #8]
   265f0:	ldr	r8, [sp, #16]
   265f4:	add	sp, sp, #20
   265f8:	pop	{pc}		; (ldr pc, [sp], #4)
   265fc:	ldr	r3, [pc, #76]	; 26650 <flatcc_builder_vector_push@@Base+0xe8>
   26600:	movw	r2, #907	; 0x38b
   26604:	movw	r1, #5868	; 0x16ec
   26608:	movt	r1, #4
   2660c:	movw	r0, #6180	; 0x1824
   26610:	movt	r0, #4
   26614:	bl	145f0 <__assert_fail@plt>
   26618:	ldr	r3, [pc, #48]	; 26650 <flatcc_builder_vector_push@@Base+0xe8>
   2661c:	mov	r2, #908	; 0x38c
   26620:	movw	r1, #5868	; 0x16ec
   26624:	movt	r1, #4
   26628:	movw	r0, #6224	; 0x1850
   2662c:	movt	r0, #4
   26630:	bl	145f0 <__assert_fail@plt>
   26634:	mvn	r2, #3
   26638:	add	r1, r1, #1
   2663c:	bl	24fec <main@@Base+0x79c>
   26640:	cmp	r0, #0
   26644:	movne	r4, #0
   26648:	beq	265c8 <flatcc_builder_vector_push@@Base+0x60>
   2664c:	b	265e4 <flatcc_builder_vector_push@@Base+0x7c>
   26650:	andeq	r1, r4, r0, ror #5

00026654 <flatcc_builder_append_vector@@Base>:
   26654:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26658:	strd	r6, [sp, #8]
   2665c:	str	r8, [sp, #16]
   26660:	str	lr, [sp, #20]
   26664:	mov	r6, r1
   26668:	ldr	r1, [r0, #32]
   2666c:	ldrh	r3, [r1, #14]
   26670:	cmp	r3, #4
   26674:	bne	26700 <flatcc_builder_append_vector@@Base+0xac>
   26678:	mov	r4, r0
   2667c:	ldr	r3, [r1, #20]
   26680:	add	r0, r2, r3
   26684:	ldr	ip, [r1, #24]
   26688:	cmp	r3, r0
   2668c:	movls	r3, #0
   26690:	movhi	r3, #1
   26694:	cmp	ip, r0
   26698:	orrcc	r3, r3, #1
   2669c:	cmp	r3, #0
   266a0:	bne	2671c <flatcc_builder_append_vector@@Base+0xc8>
   266a4:	str	r0, [r1, #20]
   266a8:	ldr	r3, [r4, #32]
   266ac:	ldr	r5, [r3, #16]
   266b0:	mul	r5, r5, r2
   266b4:	ldr	r7, [r4, #20]
   266b8:	add	r1, r5, r7
   266bc:	str	r1, [r4, #20]
   266c0:	ldr	r3, [r4, #24]
   266c4:	cmp	r1, r3
   266c8:	bcs	26738 <flatcc_builder_append_vector@@Base+0xe4>
   266cc:	ldr	r4, [r4, #16]
   266d0:	adds	r4, r4, r7
   266d4:	beq	266e8 <flatcc_builder_append_vector@@Base+0x94>
   266d8:	mov	r2, r5
   266dc:	mov	r1, r6
   266e0:	mov	r0, r4
   266e4:	bl	14524 <memcpy@plt>
   266e8:	mov	r0, r4
   266ec:	ldrd	r4, [sp]
   266f0:	ldrd	r6, [sp, #8]
   266f4:	ldr	r8, [sp, #16]
   266f8:	add	sp, sp, #20
   266fc:	pop	{pc}		; (ldr pc, [sp], #4)
   26700:	ldr	r3, [pc, #80]	; 26758 <flatcc_builder_append_vector@@Base+0x104>
   26704:	movw	r2, #915	; 0x393
   26708:	movw	r1, #5868	; 0x16ec
   2670c:	movt	r1, #4
   26710:	movw	r0, #6180	; 0x1824
   26714:	movt	r0, #4
   26718:	bl	145f0 <__assert_fail@plt>
   2671c:	ldr	r3, [pc, #56]	; 2675c <flatcc_builder_append_vector@@Base+0x108>
   26720:	mov	r2, #892	; 0x37c
   26724:	movw	r1, #5868	; 0x16ec
   26728:	movt	r1, #4
   2672c:	movw	r0, #6152	; 0x1808
   26730:	movt	r0, #4
   26734:	bl	145f0 <__assert_fail@plt>
   26738:	mvn	r2, #3
   2673c:	add	r1, r1, #1
   26740:	mov	r0, r4
   26744:	bl	24fec <main@@Base+0x79c>
   26748:	cmp	r0, #0
   2674c:	movne	r4, #0
   26750:	beq	266cc <flatcc_builder_append_vector@@Base+0x78>
   26754:	b	266e8 <flatcc_builder_append_vector@@Base+0x94>
   26758:	strdeq	r1, [r4], -ip
   2675c:	andeq	r1, r4, ip, asr #5

00026760 <flatcc_builder_extend_offset_vector@@Base>:
   26760:	strd	r4, [sp, #-16]!
   26764:	str	r6, [sp, #8]
   26768:	str	lr, [sp, #12]
   2676c:	mov	r4, r0
   26770:	ldr	r2, [r0, #32]
   26774:	ldr	r3, [r2, #20]
   26778:	adds	r3, r1, r3
   2677c:	movcs	ip, #1
   26780:	movcc	ip, #0
   26784:	cmn	r3, #-1073741823	; 0xc0000001
   26788:	movls	r0, #0
   2678c:	movhi	r0, #1
   26790:	orrs	r0, ip, r0
   26794:	bne	267cc <flatcc_builder_extend_offset_vector@@Base+0x6c>
   26798:	str	r3, [r2, #20]
   2679c:	ldr	r5, [r4, #20]
   267a0:	add	r1, r5, r1, lsl #2
   267a4:	str	r1, [r4, #20]
   267a8:	ldr	r3, [r4, #24]
   267ac:	cmp	r1, r3
   267b0:	bcs	267e8 <flatcc_builder_extend_offset_vector@@Base+0x88>
   267b4:	ldr	r0, [r4, #16]
   267b8:	add	r0, r0, r5
   267bc:	ldrd	r4, [sp]
   267c0:	ldr	r6, [sp, #8]
   267c4:	add	sp, sp, #12
   267c8:	pop	{pc}		; (ldr pc, [sp], #4)
   267cc:	ldr	r3, [pc, #52]	; 26808 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   267d0:	mov	r2, #892	; 0x37c
   267d4:	movw	r1, #5868	; 0x16ec
   267d8:	movt	r1, #4
   267dc:	movw	r0, #6152	; 0x1808
   267e0:	movt	r0, #4
   267e4:	bl	145f0 <__assert_fail@plt>
   267e8:	mvn	r2, #3
   267ec:	add	r1, r1, #1
   267f0:	mov	r0, r4
   267f4:	bl	24fec <main@@Base+0x79c>
   267f8:	cmp	r0, #0
   267fc:	movne	r0, #0
   26800:	beq	267b4 <flatcc_builder_extend_offset_vector@@Base+0x54>
   26804:	b	267bc <flatcc_builder_extend_offset_vector@@Base+0x5c>
   26808:	andeq	r1, r4, ip, asr #5

0002680c <flatcc_builder_offset_vector_push@@Base>:
   2680c:	strd	r4, [sp, #-16]!
   26810:	str	r6, [sp, #8]
   26814:	str	lr, [sp, #12]
   26818:	ldr	r2, [r0, #32]
   2681c:	ldrh	r3, [r2, #14]
   26820:	cmp	r3, #5
   26824:	bne	2687c <flatcc_builder_offset_vector_push@@Base+0x70>
   26828:	mov	r4, r0
   2682c:	mov	r6, r1
   26830:	ldr	r3, [r2, #20]
   26834:	cmn	r3, #-1073741823	; 0xc0000001
   26838:	moveq	r0, #0
   2683c:	beq	2686c <flatcc_builder_offset_vector_push@@Base+0x60>
   26840:	add	r3, r3, #1
   26844:	str	r3, [r2, #20]
   26848:	ldr	r5, [r4, #20]
   2684c:	add	r3, r5, #4
   26850:	str	r3, [r4, #20]
   26854:	ldr	r2, [r4, #24]
   26858:	cmp	r3, r2
   2685c:	bcs	26898 <flatcc_builder_offset_vector_push@@Base+0x8c>
   26860:	ldr	r3, [r4, #16]
   26864:	adds	r0, r3, r5
   26868:	strne	r6, [r3, r5]
   2686c:	ldrd	r4, [sp]
   26870:	ldr	r6, [sp, #8]
   26874:	add	sp, sp, #12
   26878:	pop	{pc}		; (ldr pc, [sp], #4)
   2687c:	ldr	r3, [pc, #52]	; 268b8 <flatcc_builder_offset_vector_push@@Base+0xac>
   26880:	movw	r2, #934	; 0x3a6
   26884:	movw	r1, #5868	; 0x16ec
   26888:	movt	r1, #4
   2688c:	movw	r0, #6288	; 0x1890
   26890:	movt	r0, #4
   26894:	bl	145f0 <__assert_fail@plt>
   26898:	mvn	r2, #3
   2689c:	add	r1, r5, #5
   268a0:	mov	r0, r4
   268a4:	bl	24fec <main@@Base+0x79c>
   268a8:	cmp	r0, #0
   268ac:	movne	r0, #0
   268b0:	beq	26860 <flatcc_builder_offset_vector_push@@Base+0x54>
   268b4:	b	2686c <flatcc_builder_offset_vector_push@@Base+0x60>
   268b8:	andeq	r1, r4, ip, lsl r3

000268bc <flatcc_builder_append_offset_vector@@Base>:
   268bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   268c0:	strd	r6, [sp, #8]
   268c4:	str	r8, [sp, #16]
   268c8:	str	lr, [sp, #20]
   268cc:	mov	r6, r1
   268d0:	ldr	r1, [r0, #32]
   268d4:	ldrh	r3, [r1, #14]
   268d8:	cmp	r3, #5
   268dc:	bne	2695c <flatcc_builder_append_offset_vector@@Base+0xa0>
   268e0:	mov	r5, r0
   268e4:	ldr	r3, [r1, #20]
   268e8:	adds	r3, r2, r3
   268ec:	movcs	ip, #1
   268f0:	movcc	ip, #0
   268f4:	cmn	r3, #-1073741823	; 0xc0000001
   268f8:	movls	r0, #0
   268fc:	movhi	r0, #1
   26900:	orrs	r0, ip, r0
   26904:	bne	26978 <flatcc_builder_append_offset_vector@@Base+0xbc>
   26908:	str	r3, [r1, #20]
   2690c:	lsl	r4, r2, #2
   26910:	ldr	r7, [r5, #20]
   26914:	add	r1, r4, r7
   26918:	str	r1, [r5, #20]
   2691c:	ldr	r3, [r5, #24]
   26920:	cmp	r1, r3
   26924:	bcs	26994 <flatcc_builder_append_offset_vector@@Base+0xd8>
   26928:	ldr	r5, [r5, #16]
   2692c:	adds	r5, r5, r7
   26930:	beq	26944 <flatcc_builder_append_offset_vector@@Base+0x88>
   26934:	mov	r2, r4
   26938:	mov	r1, r6
   2693c:	mov	r0, r5
   26940:	bl	14524 <memcpy@plt>
   26944:	mov	r0, r5
   26948:	ldrd	r4, [sp]
   2694c:	ldrd	r6, [sp, #8]
   26950:	ldr	r8, [sp, #16]
   26954:	add	sp, sp, #20
   26958:	pop	{pc}		; (ldr pc, [sp], #4)
   2695c:	ldr	r3, [pc, #80]	; 269b4 <flatcc_builder_append_offset_vector@@Base+0xf8>
   26960:	mov	r2, #948	; 0x3b4
   26964:	movw	r1, #5868	; 0x16ec
   26968:	movt	r1, #4
   2696c:	movw	r0, #6288	; 0x1890
   26970:	movt	r0, #4
   26974:	bl	145f0 <__assert_fail@plt>
   26978:	ldr	r3, [pc, #56]	; 269b8 <flatcc_builder_append_offset_vector@@Base+0xfc>
   2697c:	mov	r2, #892	; 0x37c
   26980:	movw	r1, #5868	; 0x16ec
   26984:	movt	r1, #4
   26988:	movw	r0, #6152	; 0x1808
   2698c:	movt	r0, #4
   26990:	bl	145f0 <__assert_fail@plt>
   26994:	mvn	r2, #3
   26998:	add	r1, r1, #1
   2699c:	mov	r0, r5
   269a0:	bl	24fec <main@@Base+0x79c>
   269a4:	cmp	r0, #0
   269a8:	movne	r5, #0
   269ac:	beq	26928 <flatcc_builder_append_offset_vector@@Base+0x6c>
   269b0:	b	26944 <flatcc_builder_append_offset_vector@@Base+0x88>
   269b4:	andeq	r1, r4, r0, asr #6
   269b8:	andeq	r1, r4, ip, asr #5

000269bc <flatcc_builder_extend_string@@Base>:
   269bc:	strd	r4, [sp, #-16]!
   269c0:	str	r6, [sp, #8]
   269c4:	str	lr, [sp, #12]
   269c8:	ldr	r2, [r0, #32]
   269cc:	ldrh	r3, [r2, #14]
   269d0:	cmp	r3, #6
   269d4:	bne	26a1c <flatcc_builder_extend_string@@Base+0x60>
   269d8:	mov	r4, r0
   269dc:	ldr	r3, [r2, #20]
   269e0:	adds	r3, r1, r3
   269e4:	bcs	26a38 <flatcc_builder_extend_string@@Base+0x7c>
   269e8:	str	r3, [r2, #20]
   269ec:	ldr	r5, [r0, #20]
   269f0:	add	r1, r1, r5
   269f4:	str	r1, [r0, #20]
   269f8:	ldr	r3, [r0, #24]
   269fc:	cmp	r1, r3
   26a00:	bcs	26a54 <flatcc_builder_extend_string@@Base+0x98>
   26a04:	ldr	r0, [r4, #16]
   26a08:	add	r0, r0, r5
   26a0c:	ldrd	r4, [sp]
   26a10:	ldr	r6, [sp, #8]
   26a14:	add	sp, sp, #12
   26a18:	pop	{pc}		; (ldr pc, [sp], #4)
   26a1c:	ldr	r3, [pc, #76]	; 26a70 <flatcc_builder_extend_string@@Base+0xb4>
   26a20:	movw	r2, #957	; 0x3bd
   26a24:	movw	r1, #5868	; 0x16ec
   26a28:	movt	r1, #4
   26a2c:	movw	r0, #6340	; 0x18c4
   26a30:	movt	r0, #4
   26a34:	bl	145f0 <__assert_fail@plt>
   26a38:	ldr	r3, [pc, #52]	; 26a74 <flatcc_builder_extend_string@@Base+0xb8>
   26a3c:	mov	r2, #892	; 0x37c
   26a40:	movw	r1, #5868	; 0x16ec
   26a44:	movt	r1, #4
   26a48:	movw	r0, #6152	; 0x1808
   26a4c:	movt	r0, #4
   26a50:	bl	145f0 <__assert_fail@plt>
   26a54:	mvn	r2, #3
   26a58:	add	r1, r1, #1
   26a5c:	bl	24fec <main@@Base+0x79c>
   26a60:	cmp	r0, #0
   26a64:	movne	r0, #0
   26a68:	beq	26a04 <flatcc_builder_extend_string@@Base+0x48>
   26a6c:	b	26a0c <flatcc_builder_extend_string@@Base+0x50>
   26a70:	andeq	r1, r4, r4, ror #6
   26a74:	andeq	r1, r4, ip, asr #5

00026a78 <flatcc_builder_append_string@@Base>:
   26a78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   26a7c:	strd	r6, [sp, #8]
   26a80:	str	r8, [sp, #16]
   26a84:	str	lr, [sp, #20]
   26a88:	mov	r5, r2
   26a8c:	ldr	r2, [r0, #32]
   26a90:	ldrh	r3, [r2, #14]
   26a94:	cmp	r3, #6
   26a98:	bne	26b00 <flatcc_builder_append_string@@Base+0x88>
   26a9c:	mov	r4, r0
   26aa0:	mov	r6, r1
   26aa4:	ldr	r3, [r2, #20]
   26aa8:	adds	r3, r5, r3
   26aac:	bcs	26b1c <flatcc_builder_append_string@@Base+0xa4>
   26ab0:	str	r3, [r2, #20]
   26ab4:	ldr	r7, [r0, #20]
   26ab8:	add	r1, r5, r7
   26abc:	str	r1, [r0, #20]
   26ac0:	ldr	r3, [r0, #24]
   26ac4:	cmp	r1, r3
   26ac8:	bcs	26b38 <flatcc_builder_append_string@@Base+0xc0>
   26acc:	ldr	r4, [r4, #16]
   26ad0:	adds	r4, r4, r7
   26ad4:	beq	26ae8 <flatcc_builder_append_string@@Base+0x70>
   26ad8:	mov	r2, r5
   26adc:	mov	r1, r6
   26ae0:	mov	r0, r4
   26ae4:	bl	14524 <memcpy@plt>
   26ae8:	mov	r0, r4
   26aec:	ldrd	r4, [sp]
   26af0:	ldrd	r6, [sp, #8]
   26af4:	ldr	r8, [sp, #16]
   26af8:	add	sp, sp, #20
   26afc:	pop	{pc}		; (ldr pc, [sp], #4)
   26b00:	ldr	r3, [pc, #76]	; 26b54 <flatcc_builder_append_string@@Base+0xdc>
   26b04:	movw	r2, #966	; 0x3c6
   26b08:	movw	r1, #5868	; 0x16ec
   26b0c:	movt	r1, #4
   26b10:	movw	r0, #6340	; 0x18c4
   26b14:	movt	r0, #4
   26b18:	bl	145f0 <__assert_fail@plt>
   26b1c:	ldr	r3, [pc, #52]	; 26b58 <flatcc_builder_append_string@@Base+0xe0>
   26b20:	mov	r2, #892	; 0x37c
   26b24:	movw	r1, #5868	; 0x16ec
   26b28:	movt	r1, #4
   26b2c:	movw	r0, #6152	; 0x1808
   26b30:	movt	r0, #4
   26b34:	bl	145f0 <__assert_fail@plt>
   26b38:	mvn	r2, #3
   26b3c:	add	r1, r1, #1
   26b40:	bl	24fec <main@@Base+0x79c>
   26b44:	cmp	r0, #0
   26b48:	movne	r4, #0
   26b4c:	beq	26acc <flatcc_builder_append_string@@Base+0x54>
   26b50:	b	26ae8 <flatcc_builder_append_string@@Base+0x70>
   26b54:	andeq	r1, r4, r4, lsl #7
   26b58:	andeq	r1, r4, ip, asr #5

00026b5c <flatcc_builder_append_string_str@@Base>:
   26b5c:	strd	r4, [sp, #-16]!
   26b60:	str	r6, [sp, #8]
   26b64:	str	lr, [sp, #12]
   26b68:	mov	r5, r0
   26b6c:	mov	r4, r1
   26b70:	mov	r0, r1
   26b74:	bl	14578 <strlen@plt>
   26b78:	mov	r2, r0
   26b7c:	mov	r1, r4
   26b80:	mov	r0, r5
   26b84:	bl	26a78 <flatcc_builder_append_string@@Base>
   26b88:	ldrd	r4, [sp]
   26b8c:	ldr	r6, [sp, #8]
   26b90:	add	sp, sp, #12
   26b94:	pop	{pc}		; (ldr pc, [sp], #4)

00026b98 <flatcc_builder_append_string_strn@@Base>:
   26b98:	strd	r4, [sp, #-16]!
   26b9c:	str	r6, [sp, #8]
   26ba0:	str	lr, [sp, #12]
   26ba4:	mov	r6, r0
   26ba8:	mov	r4, r1
   26bac:	mov	r5, r2
   26bb0:	mov	r1, #0
   26bb4:	mov	r0, r4
   26bb8:	bl	145c0 <memchr@plt>
   26bbc:	cmp	r0, #0
   26bc0:	subne	r5, r0, r4
   26bc4:	mov	r2, r5
   26bc8:	mov	r1, r4
   26bcc:	mov	r0, r6
   26bd0:	bl	26a78 <flatcc_builder_append_string@@Base>
   26bd4:	ldrd	r4, [sp]
   26bd8:	ldr	r6, [sp, #8]
   26bdc:	add	sp, sp, #12
   26be0:	pop	{pc}		; (ldr pc, [sp], #4)

00026be4 <flatcc_builder_truncate_vector@@Base>:
   26be4:	str	r4, [sp, #-8]!
   26be8:	str	lr, [sp, #4]
   26bec:	ldr	ip, [r0, #32]
   26bf0:	ldrh	r3, [ip, #14]
   26bf4:	cmp	r3, #4
   26bf8:	bne	26c48 <flatcc_builder_truncate_vector@@Base+0x64>
   26bfc:	ldr	r3, [ip, #20]
   26c00:	cmp	r3, r1
   26c04:	bcc	26c64 <flatcc_builder_truncate_vector@@Base+0x80>
   26c08:	sub	r3, r3, r1
   26c0c:	str	r3, [ip, #20]
   26c10:	ldr	r3, [r0, #32]
   26c14:	ldr	r2, [r3, #16]
   26c18:	mul	r2, r2, r1
   26c1c:	ldr	r3, [r0, #20]
   26c20:	sub	r3, r3, r2
   26c24:	str	r3, [r0, #20]
   26c28:	ldr	r0, [r0, #16]
   26c2c:	mov	r1, #0
   26c30:	add	r0, r0, r3
   26c34:	bl	1459c <memset@plt>
   26c38:	mov	r0, #0
   26c3c:	ldr	r4, [sp]
   26c40:	add	sp, sp, #4
   26c44:	pop	{pc}		; (ldr pc, [sp], #4)
   26c48:	ldr	r3, [pc, #48]	; 26c80 <flatcc_builder_truncate_vector@@Base+0x9c>
   26c4c:	movw	r2, #985	; 0x3d9
   26c50:	movw	r1, #5868	; 0x16ec
   26c54:	movt	r1, #4
   26c58:	movw	r0, #6180	; 0x1824
   26c5c:	movt	r0, #4
   26c60:	bl	145f0 <__assert_fail@plt>
   26c64:	ldr	r3, [pc, #20]	; 26c80 <flatcc_builder_truncate_vector@@Base+0x9c>
   26c68:	movw	r2, #986	; 0x3da
   26c6c:	movw	r1, #5868	; 0x16ec
   26c70:	movt	r1, #4
   26c74:	movw	r0, #6384	; 0x18f0
   26c78:	movt	r0, #4
   26c7c:	bl	145f0 <__assert_fail@plt>
   26c80:	andeq	r1, r4, r4, lsr #7

00026c84 <flatcc_builder_truncate_offset_vector@@Base>:
   26c84:	str	r4, [sp, #-8]!
   26c88:	str	lr, [sp, #4]
   26c8c:	ldr	ip, [r0, #32]
   26c90:	ldrh	r3, [ip, #14]
   26c94:	cmp	r3, #5
   26c98:	bne	26ce8 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   26c9c:	ldr	r3, [ip, #20]
   26ca0:	cmp	r3, r1
   26ca4:	bcc	26d04 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   26ca8:	sub	r3, r3, r1
   26cac:	str	r3, [ip, #20]
   26cb0:	ldr	r3, [r0, #32]
   26cb4:	ldr	r2, [r3, #16]
   26cb8:	mul	r2, r2, r1
   26cbc:	ldr	r3, [r0, #20]
   26cc0:	sub	r3, r3, r2
   26cc4:	str	r3, [r0, #20]
   26cc8:	ldr	r0, [r0, #16]
   26ccc:	mov	r1, #0
   26cd0:	add	r0, r0, r3
   26cd4:	bl	1459c <memset@plt>
   26cd8:	mov	r0, #0
   26cdc:	ldr	r4, [sp]
   26ce0:	add	sp, sp, #4
   26ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   26ce8:	ldr	r3, [pc, #48]	; 26d20 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   26cec:	movw	r2, #994	; 0x3e2
   26cf0:	movw	r1, #5868	; 0x16ec
   26cf4:	movt	r1, #4
   26cf8:	movw	r0, #6288	; 0x1890
   26cfc:	movt	r0, #4
   26d00:	bl	145f0 <__assert_fail@plt>
   26d04:	ldr	r3, [pc, #20]	; 26d20 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   26d08:	movw	r2, #995	; 0x3e3
   26d0c:	movw	r1, #5868	; 0x16ec
   26d10:	movt	r1, #4
   26d14:	movw	r0, #6420	; 0x1914
   26d18:	movt	r0, #4
   26d1c:	bl	145f0 <__assert_fail@plt>
   26d20:	andeq	r1, r4, r4, asr #7

00026d24 <flatcc_builder_truncate_string@@Base>:
   26d24:	str	r4, [sp, #-8]!
   26d28:	str	lr, [sp, #4]
   26d2c:	ldr	r2, [r0, #32]
   26d30:	ldrh	r3, [r2, #14]
   26d34:	cmp	r3, #6
   26d38:	bne	26d80 <flatcc_builder_truncate_string@@Base+0x5c>
   26d3c:	ldr	r3, [r2, #20]
   26d40:	cmp	r3, r1
   26d44:	bcc	26d9c <flatcc_builder_truncate_string@@Base+0x78>
   26d48:	sub	r3, r3, r1
   26d4c:	str	r3, [r2, #20]
   26d50:	ldr	r3, [r0, #20]
   26d54:	sub	r3, r3, r1
   26d58:	str	r3, [r0, #20]
   26d5c:	ldr	r0, [r0, #16]
   26d60:	mov	r2, r1
   26d64:	mov	r1, #0
   26d68:	add	r0, r0, r3
   26d6c:	bl	1459c <memset@plt>
   26d70:	mov	r0, #0
   26d74:	ldr	r4, [sp]
   26d78:	add	sp, sp, #4
   26d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   26d80:	ldr	r3, [pc, #48]	; 26db8 <flatcc_builder_truncate_string@@Base+0x94>
   26d84:	movw	r2, #1003	; 0x3eb
   26d88:	movw	r1, #5868	; 0x16ec
   26d8c:	movt	r1, #4
   26d90:	movw	r0, #6340	; 0x18c4
   26d94:	movt	r0, #4
   26d98:	bl	145f0 <__assert_fail@plt>
   26d9c:	ldr	r3, [pc, #20]	; 26db8 <flatcc_builder_truncate_string@@Base+0x94>
   26da0:	mov	r2, #1004	; 0x3ec
   26da4:	movw	r1, #5868	; 0x16ec
   26da8:	movt	r1, #4
   26dac:	movw	r0, #6480	; 0x1950
   26db0:	movt	r0, #4
   26db4:	bl	145f0 <__assert_fail@plt>
   26db8:	andeq	r1, r4, ip, ror #7

00026dbc <flatcc_builder_start_vector@@Base>:
   26dbc:	strd	r4, [sp, #-16]!
   26dc0:	str	r6, [sp, #8]
   26dc4:	str	lr, [sp, #12]
   26dc8:	mov	r4, r0
   26dcc:	mov	r6, r1
   26dd0:	mov	r5, r3
   26dd4:	cmp	r2, #4
   26dd8:	movcs	r1, r2
   26ddc:	movcc	r1, #4
   26de0:	bl	252c0 <flatcc_builder_default_alloc@@Base+0x24c>
   26de4:	cmp	r0, #0
   26de8:	bne	26e54 <flatcc_builder_start_vector@@Base+0x98>
   26dec:	ldr	r3, [r4, #32]
   26df0:	str	r6, [r3, #16]
   26df4:	ldr	r3, [r4, #32]
   26df8:	mov	r2, #0
   26dfc:	str	r2, [r3, #20]
   26e00:	ldr	r3, [r4, #32]
   26e04:	str	r5, [r3, #24]
   26e08:	ldr	r3, [r4, #32]
   26e0c:	mov	r2, #4
   26e10:	strh	r2, [r3, #14]
   26e14:	ldr	r1, [r4, #28]
   26e18:	ldr	r2, [r4, #60]	; 0x3c
   26e1c:	add	r2, r2, r1
   26e20:	str	r2, [r4, #16]
   26e24:	ldr	r3, [r4, #64]	; 0x40
   26e28:	sub	r3, r3, r1
   26e2c:	cmn	r3, #4
   26e30:	mvnhi	r3, #3
   26e34:	str	r3, [r4, #24]
   26e38:	ldr	r3, [r4, #32]
   26e3c:	mvn	r2, #3
   26e40:	str	r2, [r3, #4]
   26e44:	ldrd	r4, [sp]
   26e48:	ldr	r6, [sp, #8]
   26e4c:	add	sp, sp, #12
   26e50:	pop	{pc}		; (ldr pc, [sp], #4)
   26e54:	mvn	r0, #0
   26e58:	b	26e44 <flatcc_builder_start_vector@@Base+0x88>

00026e5c <flatcc_builder_start_offset_vector@@Base>:
   26e5c:	str	r4, [sp, #-8]!
   26e60:	str	lr, [sp, #4]
   26e64:	mov	r4, r0
   26e68:	mov	r1, #4
   26e6c:	bl	252c0 <flatcc_builder_default_alloc@@Base+0x24c>
   26e70:	cmp	r0, #0
   26e74:	bne	26ed8 <flatcc_builder_start_offset_vector@@Base+0x7c>
   26e78:	ldr	r3, [r4, #32]
   26e7c:	mov	r2, #4
   26e80:	str	r2, [r3, #16]
   26e84:	ldr	r3, [r4, #32]
   26e88:	mov	r2, #0
   26e8c:	str	r2, [r3, #20]
   26e90:	ldr	r3, [r4, #32]
   26e94:	mov	r2, #5
   26e98:	strh	r2, [r3, #14]
   26e9c:	ldr	r1, [r4, #28]
   26ea0:	ldr	r2, [r4, #60]	; 0x3c
   26ea4:	add	r2, r2, r1
   26ea8:	str	r2, [r4, #16]
   26eac:	ldr	r3, [r4, #64]	; 0x40
   26eb0:	sub	r3, r3, r1
   26eb4:	cmn	r3, #4
   26eb8:	mvnhi	r3, #3
   26ebc:	str	r3, [r4, #24]
   26ec0:	ldr	r3, [r4, #32]
   26ec4:	mvn	r2, #3
   26ec8:	str	r2, [r3, #4]
   26ecc:	ldr	r4, [sp]
   26ed0:	add	sp, sp, #4
   26ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   26ed8:	mvn	r0, #0
   26edc:	b	26ecc <flatcc_builder_start_offset_vector@@Base+0x70>

00026ee0 <flatcc_builder_start_string@@Base>:
   26ee0:	str	r4, [sp, #-8]!
   26ee4:	str	lr, [sp, #4]
   26ee8:	mov	r4, r0
   26eec:	mov	r1, #1
   26ef0:	bl	252c0 <flatcc_builder_default_alloc@@Base+0x24c>
   26ef4:	cmp	r0, #0
   26ef8:	bne	26f5c <flatcc_builder_start_string@@Base+0x7c>
   26efc:	ldr	r3, [r4, #32]
   26f00:	mov	r2, #1
   26f04:	str	r2, [r3, #16]
   26f08:	ldr	r3, [r4, #32]
   26f0c:	mov	r2, #0
   26f10:	str	r2, [r3, #20]
   26f14:	ldr	r3, [r4, #32]
   26f18:	mov	r2, #6
   26f1c:	strh	r2, [r3, #14]
   26f20:	ldr	r1, [r4, #28]
   26f24:	ldr	r2, [r4, #60]	; 0x3c
   26f28:	add	r2, r2, r1
   26f2c:	str	r2, [r4, #16]
   26f30:	ldr	r3, [r4, #64]	; 0x40
   26f34:	sub	r3, r3, r1
   26f38:	cmn	r3, #4
   26f3c:	mvnhi	r3, #3
   26f40:	str	r3, [r4, #24]
   26f44:	ldr	r3, [r4, #32]
   26f48:	mvn	r2, #3
   26f4c:	str	r2, [r3, #4]
   26f50:	ldr	r4, [sp]
   26f54:	add	sp, sp, #4
   26f58:	pop	{pc}		; (ldr pc, [sp], #4)
   26f5c:	mvn	r0, #0
   26f60:	b	26f50 <flatcc_builder_start_string@@Base+0x70>

00026f64 <flatcc_builder_reserve_table@@Base>:
   26f64:	strd	r4, [sp, #-20]!	; 0xffffffec
   26f68:	strd	r6, [sp, #8]
   26f6c:	str	lr, [sp, #16]
   26f70:	sub	sp, sp, #12
   26f74:	cmp	r1, #0
   26f78:	blt	27058 <flatcc_builder_reserve_table@@Base+0xf4>
   26f7c:	mov	r4, r0
   26f80:	ldr	r2, [r0, #32]
   26f84:	ldrh	r6, [r2, #28]
   26f88:	ldr	r3, [r2, #16]
   26f8c:	add	r6, r3, r6, lsl #1
   26f90:	add	r1, r1, #2
   26f94:	lsl	r5, r1, #1
   26f98:	add	r2, r6, r5
   26f9c:	ldr	r3, [r0, #56]	; 0x38
   26fa0:	cmp	r2, r3
   26fa4:	bls	26fcc <flatcc_builder_reserve_table@@Base+0x68>
   26fa8:	mov	r3, #0
   26fac:	str	r3, [sp]
   26fb0:	ldr	r7, [r0, #48]	; 0x30
   26fb4:	mov	r3, #1
   26fb8:	add	r1, r0, #52	; 0x34
   26fbc:	ldr	r0, [r0, #40]	; 0x28
   26fc0:	blx	r7
   26fc4:	cmp	r0, #0
   26fc8:	bne	27074 <flatcc_builder_reserve_table@@Base+0x110>
   26fcc:	ldr	r3, [r4, #52]	; 0x34
   26fd0:	adds	r3, r3, r6
   26fd4:	moveq	r3, #0
   26fd8:	streq	r3, [r4, #4]
   26fdc:	mvneq	r0, #0
   26fe0:	beq	27044 <flatcc_builder_reserve_table@@Base+0xe0>
   26fe4:	add	r3, r3, #4
   26fe8:	str	r3, [r4, #4]
   26fec:	ldr	r3, [r4, #32]
   26ff0:	ldr	r6, [r3, #20]
   26ff4:	add	r2, r5, r6
   26ff8:	sub	r2, r2, #3
   26ffc:	ldr	r3, [r4, #80]	; 0x50
   27000:	cmp	r2, r3
   27004:	bls	2702c <flatcc_builder_reserve_table@@Base+0xc8>
   27008:	mov	r3, #3
   2700c:	str	r3, [sp]
   27010:	ldr	r5, [r4, #48]	; 0x30
   27014:	mov	r3, #0
   27018:	add	r1, r4, #76	; 0x4c
   2701c:	ldr	r0, [r4, #40]	; 0x28
   27020:	blx	r5
   27024:	cmp	r0, #0
   27028:	bne	27090 <flatcc_builder_reserve_table@@Base+0x12c>
   2702c:	ldr	r0, [r4, #76]	; 0x4c
   27030:	add	r0, r0, r6
   27034:	str	r0, [r4]
   27038:	clz	r0, r0
   2703c:	lsr	r0, r0, #5
   27040:	rsb	r0, r0, #0
   27044:	add	sp, sp, #12
   27048:	ldrd	r4, [sp]
   2704c:	ldrd	r6, [sp, #8]
   27050:	add	sp, sp, #16
   27054:	pop	{pc}		; (ldr pc, [sp], #4)
   27058:	ldr	r3, [pc, #76]	; 270ac <flatcc_builder_reserve_table@@Base+0x148>
   2705c:	movw	r2, #1065	; 0x429
   27060:	movw	r1, #5868	; 0x16ec
   27064:	movt	r1, #4
   27068:	movw	r0, #6516	; 0x1974
   2706c:	movt	r0, #4
   27070:	bl	145f0 <__assert_fail@plt>
   27074:	ldr	r3, [pc, #52]	; 270b0 <flatcc_builder_reserve_table@@Base+0x14c>
   27078:	mov	r2, #308	; 0x134
   2707c:	movw	r1, #5868	; 0x16ec
   27080:	movt	r1, #4
   27084:	movw	r0, #5952	; 0x1740
   27088:	movt	r0, #4
   2708c:	bl	145f0 <__assert_fail@plt>
   27090:	ldr	r3, [pc, #24]	; 270b0 <flatcc_builder_reserve_table@@Base+0x14c>
   27094:	mov	r2, #308	; 0x134
   27098:	movw	r1, #5868	; 0x16ec
   2709c:	movt	r1, #4
   270a0:	movw	r0, #5952	; 0x1740
   270a4:	movt	r0, #4
   270a8:	bl	145f0 <__assert_fail@plt>
   270ac:	andeq	r1, r4, ip, lsl #8
   270b0:			; <UNDEFINED> instruction: 0x000411b8

000270b4 <flatcc_builder_start_table@@Base>:
   270b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   270b8:	strd	r6, [sp, #8]
   270bc:	str	r8, [sp, #16]
   270c0:	str	lr, [sp, #20]
   270c4:	sub	sp, sp, #8
   270c8:	mov	r4, r0
   270cc:	mov	r5, r1
   270d0:	mov	r1, #4
   270d4:	bl	252c0 <flatcc_builder_default_alloc@@Base+0x24c>
   270d8:	subs	r6, r0, #0
   270dc:	bne	27288 <flatcc_builder_start_table@@Base+0x1d4>
   270e0:	ldr	r2, [r4, #32]
   270e4:	ldr	r3, [r4, #4]
   270e8:	ldr	r1, [r4, #52]	; 0x34
   270ec:	sub	r3, r3, r1
   270f0:	str	r3, [r2, #16]
   270f4:	ldr	r2, [r4, #32]
   270f8:	ldr	r3, [r4]
   270fc:	ldr	r1, [r4, #76]	; 0x4c
   27100:	sub	r3, r3, r1
   27104:	str	r3, [r2, #20]
   27108:	ldr	r3, [r4, #32]
   2710c:	ldr	r2, [r4, #12]
   27110:	str	r2, [r3, #24]
   27114:	ldr	r3, [r4, #32]
   27118:	ldrh	r2, [r4, #8]
   2711c:	strh	r2, [r3, #28]
   27120:	movw	r3, #15186	; 0x3b52
   27124:	movt	r3, #12137	; 0x2f69
   27128:	str	r3, [r4, #12]
   2712c:	mov	r3, #0
   27130:	strh	r3, [r4, #8]
   27134:	ldr	r3, [r4, #32]
   27138:	mov	r2, #3
   2713c:	strh	r2, [r3, #14]
   27140:	ldr	r2, [r4, #32]
   27144:	ldrh	r7, [r2, #28]
   27148:	ldr	r3, [r2, #16]
   2714c:	add	r7, r3, r7, lsl #1
   27150:	add	r5, r5, #2
   27154:	lsl	r5, r5, #1
   27158:	add	r2, r7, r5
   2715c:	ldr	r3, [r4, #56]	; 0x38
   27160:	cmp	r2, r3
   27164:	bls	2718c <flatcc_builder_start_table@@Base+0xd8>
   27168:	mov	r3, #0
   2716c:	str	r3, [sp]
   27170:	ldr	r8, [r4, #48]	; 0x30
   27174:	mov	r3, #1
   27178:	add	r1, r4, #52	; 0x34
   2717c:	ldr	r0, [r4, #40]	; 0x28
   27180:	blx	r8
   27184:	cmp	r0, #0
   27188:	bne	27250 <flatcc_builder_start_table@@Base+0x19c>
   2718c:	ldr	r3, [r4, #52]	; 0x34
   27190:	adds	r3, r3, r7
   27194:	moveq	r3, #0
   27198:	streq	r3, [r4, #4]
   2719c:	mvneq	r6, #0
   271a0:	beq	27234 <flatcc_builder_start_table@@Base+0x180>
   271a4:	add	r3, r3, #4
   271a8:	str	r3, [r4, #4]
   271ac:	ldr	r3, [r4, #32]
   271b0:	ldr	r7, [r3, #20]
   271b4:	sub	r2, r5, #3
   271b8:	add	r2, r2, r7
   271bc:	ldr	r3, [r4, #80]	; 0x50
   271c0:	cmp	r2, r3
   271c4:	bls	271ec <flatcc_builder_start_table@@Base+0x138>
   271c8:	mov	r3, #3
   271cc:	str	r3, [sp]
   271d0:	ldr	r5, [r4, #48]	; 0x30
   271d4:	mov	r3, #0
   271d8:	add	r1, r4, #76	; 0x4c
   271dc:	ldr	r0, [r4, #40]	; 0x28
   271e0:	blx	r5
   271e4:	cmp	r0, #0
   271e8:	bne	2726c <flatcc_builder_start_table@@Base+0x1b8>
   271ec:	ldr	r3, [r4, #76]	; 0x4c
   271f0:	add	r3, r3, r7
   271f4:	str	r3, [r4]
   271f8:	cmp	r3, #0
   271fc:	beq	27290 <flatcc_builder_start_table@@Base+0x1dc>
   27200:	ldr	r1, [r4, #28]
   27204:	ldr	r2, [r4, #60]	; 0x3c
   27208:	add	r2, r2, r1
   2720c:	str	r2, [r4, #16]
   27210:	ldr	r3, [r4, #64]	; 0x40
   27214:	sub	r3, r3, r1
   27218:	movw	r2, #65532	; 0xfffc
   2721c:	cmp	r3, r2
   27220:	movwhi	r3, #65532	; 0xfffc
   27224:	str	r3, [r4, #24]
   27228:	ldr	r3, [r4, #32]
   2722c:	movw	r2, #65532	; 0xfffc
   27230:	str	r2, [r3, #4]
   27234:	mov	r0, r6
   27238:	add	sp, sp, #8
   2723c:	ldrd	r4, [sp]
   27240:	ldrd	r6, [sp, #8]
   27244:	ldr	r8, [sp, #16]
   27248:	add	sp, sp, #20
   2724c:	pop	{pc}		; (ldr pc, [sp], #4)
   27250:	ldr	r3, [pc, #64]	; 27298 <flatcc_builder_start_table@@Base+0x1e4>
   27254:	mov	r2, #308	; 0x134
   27258:	movw	r1, #5868	; 0x16ec
   2725c:	movt	r1, #4
   27260:	movw	r0, #5952	; 0x1740
   27264:	movt	r0, #4
   27268:	bl	145f0 <__assert_fail@plt>
   2726c:	ldr	r3, [pc, #36]	; 27298 <flatcc_builder_start_table@@Base+0x1e4>
   27270:	mov	r2, #308	; 0x134
   27274:	movw	r1, #5868	; 0x16ec
   27278:	movt	r1, #4
   2727c:	movw	r0, #5952	; 0x1740
   27280:	movt	r0, #4
   27284:	bl	145f0 <__assert_fail@plt>
   27288:	mvn	r6, #0
   2728c:	b	27234 <flatcc_builder_start_table@@Base+0x180>
   27290:	mvn	r6, #0
   27294:	b	27234 <flatcc_builder_start_table@@Base+0x180>
   27298:			; <UNDEFINED> instruction: 0x000411b8

0002729c <flatcc_builder_create_vtable@@Base>:
   2729c:	strd	r4, [sp, #-16]!
   272a0:	str	r6, [sp, #8]
   272a4:	str	lr, [sp, #12]
   272a8:	sub	sp, sp, #80	; 0x50
   272ac:	mov	r5, r0
   272b0:	mov	r3, #0
   272b4:	str	r3, [sp, #8]
   272b8:	str	r3, [sp, #12]
   272bc:	cmp	r2, #0
   272c0:	beq	2735c <flatcc_builder_create_vtable@@Base+0xc0>
   272c4:	str	r2, [sp, #8]
   272c8:	str	r1, [sp, #16]
   272cc:	str	r2, [sp, #20]
   272d0:	mov	r3, #1
   272d4:	str	r3, [sp, #12]
   272d8:	ldr	r3, [r0, #152]	; 0x98
   272dc:	cmp	r3, #0
   272e0:	bne	27374 <flatcc_builder_create_vtable@@Base+0xd8>
   272e4:	ldr	r3, [r0, #180]	; 0xb4
   272e8:	cmp	r3, #0
   272ec:	bne	27374 <flatcc_builder_create_vtable@@Base+0xd8>
   272f0:	ldr	r4, [r0, #140]	; 0x8c
   272f4:	mov	r3, r2
   272f8:	add	r2, r2, r4
   272fc:	str	r2, [r0, #140]	; 0x8c
   27300:	cmp	r4, r2
   27304:	ble	273e0 <flatcc_builder_create_vtable@@Base+0x144>
   27308:	ldr	r3, [pc, #276]	; 27424 <flatcc_builder_create_vtable@@Base+0x188>
   2730c:	movw	r2, #673	; 0x2a1
   27310:	movw	r1, #5868	; 0x16ec
   27314:	movt	r1, #4
   27318:	movw	r0, #5952	; 0x1740
   2731c:	movt	r0, #4
   27320:	bl	145f0 <__assert_fail@plt>
   27324:	ldr	r3, [pc, #252]	; 27428 <flatcc_builder_create_vtable@@Base+0x18c>
   27328:	movw	r2, #647	; 0x287
   2732c:	movw	r1, #5868	; 0x16ec
   27330:	movt	r1, #4
   27334:	movw	r0, #5952	; 0x1740
   27338:	movt	r0, #4
   2733c:	bl	145f0 <__assert_fail@plt>
   27340:	ldr	r3, [pc, #224]	; 27428 <flatcc_builder_create_vtable@@Base+0x18c>
   27344:	movw	r2, #651	; 0x28b
   27348:	movw	r1, #5868	; 0x16ec
   2734c:	movt	r1, #4
   27350:	movw	r0, #5952	; 0x1740
   27354:	movt	r0, #4
   27358:	bl	145f0 <__assert_fail@plt>
   2735c:	ldr	r3, [r0, #152]	; 0x98
   27360:	cmp	r3, #0
   27364:	bne	27324 <flatcc_builder_create_vtable@@Base+0x88>
   27368:	ldr	r3, [r0, #180]	; 0xb4
   2736c:	cmp	r3, #0
   27370:	beq	273d0 <flatcc_builder_create_vtable@@Base+0x134>
   27374:	ldr	r2, [r5, #136]	; 0x88
   27378:	ldr	r3, [sp, #8]
   2737c:	sub	r4, r2, r3
   27380:	cmp	r2, r4
   27384:	ble	27324 <flatcc_builder_create_vtable@@Base+0x88>
   27388:	str	r3, [sp]
   2738c:	ldr	r6, [r5, #44]	; 0x2c
   27390:	mov	r3, r4
   27394:	ldr	r2, [sp, #12]
   27398:	add	r1, sp, #16
   2739c:	ldr	r0, [r5, #36]	; 0x24
   273a0:	blx	r6
   273a4:	cmp	r0, #0
   273a8:	bne	27340 <flatcc_builder_create_vtable@@Base+0xa4>
   273ac:	str	r4, [r5, #136]	; 0x88
   273b0:	cmp	r4, #0
   273b4:	addne	r4, r4, #1
   273b8:	mov	r0, r4
   273bc:	add	sp, sp, #80	; 0x50
   273c0:	ldrd	r4, [sp]
   273c4:	ldr	r6, [sp, #8]
   273c8:	add	sp, sp, #12
   273cc:	pop	{pc}		; (ldr pc, [sp], #4)
   273d0:	ldr	r4, [r5, #140]	; 0x8c
   273d4:	ldr	r3, [sp, #8]
   273d8:	add	r2, r3, r4
   273dc:	str	r2, [r5, #140]	; 0x8c
   273e0:	str	r3, [sp]
   273e4:	ldr	r6, [r5, #44]	; 0x2c
   273e8:	mov	r3, r4
   273ec:	ldr	r2, [sp, #12]
   273f0:	add	r1, sp, #16
   273f4:	ldr	r0, [r5, #36]	; 0x24
   273f8:	blx	r6
   273fc:	cmp	r0, #0
   27400:	addeq	r4, r4, #1
   27404:	beq	273b8 <flatcc_builder_create_vtable@@Base+0x11c>
   27408:	ldr	r3, [pc, #20]	; 27424 <flatcc_builder_create_vtable@@Base+0x188>
   2740c:	movw	r2, #677	; 0x2a5
   27410:	movw	r1, #5868	; 0x16ec
   27414:	movt	r1, #4
   27418:	movw	r0, #5952	; 0x1740
   2741c:	movt	r0, #4
   27420:	bl	145f0 <__assert_fail@plt>
   27424:	muleq	r4, ip, r1
   27428:	andeq	r1, r4, r8, ror #3

0002742c <flatcc_builder_create_cached_vtable@@Base>:
   2742c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27430:	strd	r6, [sp, #8]
   27434:	strd	r8, [sp, #16]
   27438:	strd	sl, [sp, #24]
   2743c:	str	lr, [sp, #32]
   27440:	sub	sp, sp, #36	; 0x24
   27444:	mov	r5, r0
   27448:	str	r1, [sp, #12]
   2744c:	str	r2, [sp, #16]
   27450:	mov	r6, r3
   27454:	ldr	r3, [r0, #116]	; 0x74
   27458:	cmp	r3, #0
   2745c:	beq	274a4 <flatcc_builder_create_cached_vtable@@Base+0x78>
   27460:	ldr	r8, [r5, #116]	; 0x74
   27464:	rsb	r3, r8, #32
   27468:	lsr	r8, r6, r3
   2746c:	ldr	sl, [r5, #92]	; 0x5c
   27470:	adds	r9, sl, r8, lsl #2
   27474:	str	r9, [sp, #20]
   27478:	beq	277b4 <flatcc_builder_create_cached_vtable@@Base+0x388>
   2747c:	ldr	r6, [sl, r8, lsl #2]
   27480:	cmp	r6, #0
   27484:	beq	276dc <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   27488:	ldr	fp, [r5, #100]	; 0x64
   2748c:	ldr	r7, [r5, #68]	; 0x44
   27490:	mov	r3, #0
   27494:	str	r3, [sp, #28]
   27498:	str	r8, [sp, #24]
   2749c:	ldr	r8, [sp, #16]
   274a0:	b	275ac <flatcc_builder_create_cached_vtable@@Base+0x180>
   274a4:	add	r8, r0, #92	; 0x5c
   274a8:	ldr	r4, [r0, #124]	; 0x7c
   274ac:	cmp	r4, #0
   274b0:	bne	27530 <flatcc_builder_create_cached_vtable@@Base+0x104>
   274b4:	ldr	r3, [r0, #104]	; 0x68
   274b8:	cmp	r3, #15
   274bc:	bhi	274e8 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   274c0:	mov	r3, #6
   274c4:	str	r3, [sp]
   274c8:	ldr	r7, [r0, #48]	; 0x30
   274cc:	mov	r3, #0
   274d0:	mov	r2, #16
   274d4:	add	r1, r0, #100	; 0x64
   274d8:	ldr	r0, [r0, #40]	; 0x28
   274dc:	blx	r7
   274e0:	cmp	r0, #0
   274e4:	bne	2754c <flatcc_builder_create_cached_vtable@@Base+0x120>
   274e8:	ldr	r3, [r5, #100]	; 0x64
   274ec:	cmp	r3, #0
   274f0:	beq	277cc <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   274f4:	mov	r3, #16
   274f8:	str	r3, [r5, #124]	; 0x7c
   274fc:	mov	r3, #5
   27500:	str	r3, [sp]
   27504:	ldr	r7, [r5, #48]	; 0x30
   27508:	mov	r3, #1
   2750c:	mov	r2, #256	; 0x100
   27510:	mov	r1, r8
   27514:	ldr	r0, [r5, #40]	; 0x28
   27518:	blx	r7
   2751c:	cmp	r0, #0
   27520:	bne	277cc <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   27524:	ldr	r1, [r5, #96]	; 0x60
   27528:	mov	r2, #256	; 0x100
   2752c:	b	2756c <flatcc_builder_create_cached_vtable@@Base+0x140>
   27530:	ldr	r3, [pc, #668]	; 277d4 <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   27534:	movw	r2, #342	; 0x156
   27538:	movw	r1, #5868	; 0x16ec
   2753c:	movt	r1, #4
   27540:	movw	r0, #6528	; 0x1980
   27544:	movt	r0, #4
   27548:	bl	145f0 <__assert_fail@plt>
   2754c:	ldr	r3, [pc, #644]	; 277d8 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   27550:	mov	r2, #308	; 0x134
   27554:	movw	r1, #5868	; 0x16ec
   27558:	movt	r1, #4
   2755c:	movw	r0, #5952	; 0x1740
   27560:	movt	r0, #4
   27564:	bl	145f0 <__assert_fail@plt>
   27568:	mov	r2, r3
   2756c:	lsl	r3, r2, #1
   27570:	cmp	r3, r1
   27574:	bls	27568 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   27578:	lsr	r3, r2, #2
   2757c:	cmp	r2, #7
   27580:	bls	27594 <flatcc_builder_create_cached_vtable@@Base+0x168>
   27584:	mov	r2, #1
   27588:	add	r4, r4, #1
   2758c:	cmp	r3, r2, lsl r4
   27590:	bhi	27588 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   27594:	str	r4, [r5, #116]	; 0x74
   27598:	b	27460 <flatcc_builder_create_cached_vtable@@Base+0x34>
   2759c:	add	r9, r4, #12
   275a0:	ldr	r6, [r4, #12]
   275a4:	cmp	r6, #0
   275a8:	beq	2763c <flatcc_builder_create_cached_vtable@@Base+0x210>
   275ac:	add	r4, fp, r6
   275b0:	ldr	r3, [r4, #8]
   275b4:	add	r1, r7, r3
   275b8:	ldrh	r3, [r7, r3]
   275bc:	cmp	r3, r8
   275c0:	bne	2759c <flatcc_builder_create_cached_vtable@@Base+0x170>
   275c4:	mov	r2, r8
   275c8:	ldr	r0, [sp, #12]
   275cc:	bl	14530 <memcmp@plt>
   275d0:	cmp	r0, #0
   275d4:	bne	2759c <flatcc_builder_create_cached_vtable@@Base+0x170>
   275d8:	ldr	r2, [r4, #4]
   275dc:	ldr	r3, [r5, #152]	; 0x98
   275e0:	cmp	r2, r3
   275e4:	bne	2762c <flatcc_builder_create_cached_vtable@@Base+0x200>
   275e8:	ldr	r8, [sp, #24]
   275ec:	ldr	r3, [sp, #20]
   275f0:	cmp	r3, r9
   275f4:	beq	2760c <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   275f8:	ldr	r3, [r4, #12]
   275fc:	str	r3, [r9]
   27600:	ldr	r3, [sl, r8, lsl #2]
   27604:	str	r3, [r4, #12]
   27608:	str	r6, [sl, r8, lsl #2]
   2760c:	ldr	r0, [r4]
   27610:	add	sp, sp, #36	; 0x24
   27614:	ldrd	r4, [sp]
   27618:	ldrd	r6, [sp, #8]
   2761c:	ldrd	r8, [sp, #16]
   27620:	ldrd	sl, [sp, #24]
   27624:	add	sp, sp, #32
   27628:	pop	{pc}		; (ldr pc, [sp], #4)
   2762c:	add	r9, r4, #12
   27630:	ldr	r6, [r4, #12]
   27634:	str	r4, [sp, #28]
   27638:	b	275a4 <flatcc_builder_create_cached_vtable@@Base+0x178>
   2763c:	ldr	r8, [sp, #24]
   27640:	ldr	r4, [r5, #124]	; 0x7c
   27644:	add	r2, r4, #16
   27648:	ldr	r3, [r5, #104]	; 0x68
   2764c:	cmp	r2, r3
   27650:	bls	27678 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   27654:	mov	r3, #6
   27658:	str	r3, [sp]
   2765c:	ldr	r6, [r5, #48]	; 0x30
   27660:	mov	r3, #0
   27664:	add	r1, r5, #100	; 0x64
   27668:	ldr	r0, [r5, #40]	; 0x28
   2766c:	blx	r6
   27670:	cmp	r0, #0
   27674:	bne	276e8 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   27678:	ldr	r6, [r5, #100]	; 0x64
   2767c:	adds	r7, r6, r4
   27680:	beq	277bc <flatcc_builder_create_cached_vtable@@Base+0x390>
   27684:	ldr	r3, [r5, #124]	; 0x7c
   27688:	add	r2, r3, #16
   2768c:	str	r2, [r5, #124]	; 0x7c
   27690:	ldr	r2, [r5, #152]	; 0x98
   27694:	str	r2, [r7, #4]
   27698:	ldr	r2, [sl, r8, lsl #2]
   2769c:	str	r2, [r7, #12]
   276a0:	str	r3, [sl, r8, lsl #2]
   276a4:	ldr	r2, [sp, #16]
   276a8:	ldr	r1, [sp, #12]
   276ac:	mov	r0, r5
   276b0:	bl	2729c <flatcc_builder_create_vtable@@Base>
   276b4:	str	r0, [r6, r4]
   276b8:	cmp	r0, #0
   276bc:	beq	27610 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   276c0:	ldr	r3, [sp, #28]
   276c4:	cmp	r3, #0
   276c8:	beq	27704 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   276cc:	ldr	r3, [r3, #8]
   276d0:	str	r3, [r7, #8]
   276d4:	ldr	r0, [r6, r4]
   276d8:	b	27610 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   276dc:	mov	r3, #0
   276e0:	str	r3, [sp, #28]
   276e4:	b	27640 <flatcc_builder_create_cached_vtable@@Base+0x214>
   276e8:	ldr	r3, [pc, #232]	; 277d8 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   276ec:	mov	r2, #308	; 0x134
   276f0:	movw	r1, #5868	; 0x16ec
   276f4:	movt	r1, #4
   276f8:	movw	r0, #5952	; 0x1740
   276fc:	movt	r0, #4
   27700:	bl	145f0 <__assert_fail@plt>
   27704:	ldr	r2, [r5, #172]	; 0xac
   27708:	cmp	r2, #0
   2770c:	beq	27724 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   27710:	ldr	r3, [r5, #120]	; 0x78
   27714:	ldr	r1, [sp, #16]
   27718:	add	r3, r1, r3
   2771c:	cmp	r2, r3
   27720:	bcc	2778c <flatcc_builder_create_cached_vtable@@Base+0x360>
   27724:	ldr	r8, [r5, #120]	; 0x78
   27728:	ldr	r3, [sp, #16]
   2772c:	add	r2, r8, r3
   27730:	ldr	r3, [r5, #72]	; 0x48
   27734:	cmp	r2, r3
   27738:	bls	27760 <flatcc_builder_create_cached_vtable@@Base+0x334>
   2773c:	mov	r3, #2
   27740:	str	r3, [sp]
   27744:	ldr	sl, [r5, #48]	; 0x30
   27748:	mov	r3, #0
   2774c:	add	r1, r5, #68	; 0x44
   27750:	ldr	r0, [r5, #40]	; 0x28
   27754:	blx	sl
   27758:	cmp	r0, #0
   2775c:	bne	27798 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   27760:	ldr	r3, [r5, #68]	; 0x44
   27764:	adds	r0, r3, r8
   27768:	beq	277c4 <flatcc_builder_create_cached_vtable@@Base+0x398>
   2776c:	ldr	r3, [r5, #120]	; 0x78
   27770:	str	r3, [r7, #8]
   27774:	ldr	r2, [sp, #16]
   27778:	add	r3, r2, r3
   2777c:	str	r3, [r5, #120]	; 0x78
   27780:	ldr	r1, [sp, #12]
   27784:	bl	14524 <memcpy@plt>
   27788:	b	276d4 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   2778c:	mov	r0, r5
   27790:	bl	25634 <flatcc_builder_flush_vtable_cache@@Base>
   27794:	b	276d4 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   27798:	ldr	r3, [pc, #56]	; 277d8 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   2779c:	mov	r2, #308	; 0x134
   277a0:	movw	r1, #5868	; 0x16ec
   277a4:	movt	r1, #4
   277a8:	movw	r0, #5952	; 0x1740
   277ac:	movt	r0, #4
   277b0:	bl	145f0 <__assert_fail@plt>
   277b4:	mov	r0, #0
   277b8:	b	27610 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   277bc:	mov	r0, #0
   277c0:	b	27610 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   277c4:	mvn	r0, #0
   277c8:	b	27610 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   277cc:	mov	r0, #0
   277d0:	b	27610 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   277d4:	andeq	r1, r4, ip, lsr #8
   277d8:			; <UNDEFINED> instruction: 0x000411b8

000277dc <flatcc_builder_create_table@@Base>:
   277dc:	strd	r4, [sp, #-20]!	; 0xffffffec
   277e0:	strd	r6, [sp, #8]
   277e4:	str	lr, [sp, #16]
   277e8:	sub	sp, sp, #92	; 0x5c
   277ec:	ldr	r7, [sp, #116]	; 0x74
   277f0:	ldr	ip, [sp, #120]	; 0x78
   277f4:	cmp	r7, #0
   277f8:	blt	27940 <flatcc_builder_create_table@@Base+0x164>
   277fc:	mov	r4, r0
   27800:	tst	ip, #1
   27804:	beq	2795c <flatcc_builder_create_table@@Base+0x180>
   27808:	cmp	r3, #4
   2780c:	movcc	r3, #4
   27810:	ldrh	r0, [r0, #128]	; 0x80
   27814:	cmp	r0, r3
   27818:	strhcc	r3, [r4, #128]	; 0x80
   2781c:	ldr	r0, [r4, #136]	; 0x88
   27820:	sub	r6, r0, r2
   27824:	sub	r3, r3, #1
   27828:	and	r6, r6, r3
   2782c:	sub	r0, r0, r2
   27830:	sub	r0, r0, #4
   27834:	sub	ip, ip, #1
   27838:	sub	ip, r0, ip
   2783c:	sub	ip, ip, r6
   27840:	str	ip, [sp, #84]	; 0x54
   27844:	cmp	r7, #0
   27848:	ble	27878 <flatcc_builder_create_table@@Base+0x9c>
   2784c:	ldr	ip, [sp, #112]	; 0x70
   27850:	add	r7, ip, r7, lsl #1
   27854:	sub	r0, r6, r0
   27858:	sub	lr, r0, #4
   2785c:	ldrh	r3, [ip], #2
   27860:	sub	r5, lr, r3
   27864:	ldr	r0, [r1, r3]
   27868:	add	r0, r0, r5
   2786c:	str	r0, [r1, r3]
   27870:	cmp	r7, ip
   27874:	bne	2785c <flatcc_builder_create_table@@Base+0x80>
   27878:	mov	r3, #4
   2787c:	str	r3, [sp, #12]
   27880:	add	r0, sp, #84	; 0x54
   27884:	str	r0, [sp, #20]
   27888:	str	r3, [sp, #24]
   2788c:	mov	r3, #1
   27890:	str	r3, [sp, #16]
   27894:	cmp	r2, #0
   27898:	beq	278b4 <flatcc_builder_create_table@@Base+0xd8>
   2789c:	add	r3, r2, #4
   278a0:	str	r3, [sp, #12]
   278a4:	str	r1, [sp, #28]
   278a8:	str	r2, [sp, #32]
   278ac:	mov	r3, #2
   278b0:	str	r3, [sp, #16]
   278b4:	cmp	r6, #0
   278b8:	beq	278ec <flatcc_builder_create_table@@Base+0x110>
   278bc:	ldr	r3, [sp, #12]
   278c0:	add	r3, r3, r6
   278c4:	str	r3, [sp, #12]
   278c8:	ldr	r3, [sp, #16]
   278cc:	add	r3, r3, #1
   278d0:	add	r2, sp, #88	; 0x58
   278d4:	add	r1, r2, r3, lsl #3
   278d8:	movw	r2, #3996	; 0xf9c
   278dc:	movt	r2, #4
   278e0:	str	r2, [r1, #-76]	; 0xffffffb4
   278e4:	str	r6, [r1, #-72]	; 0xffffffb8
   278e8:	str	r3, [sp, #16]
   278ec:	ldr	r2, [r4, #136]	; 0x88
   278f0:	ldr	r3, [sp, #12]
   278f4:	sub	r5, r2, r3
   278f8:	cmp	r2, r5
   278fc:	ble	27978 <flatcc_builder_create_table@@Base+0x19c>
   27900:	str	r3, [sp]
   27904:	ldr	r6, [r4, #44]	; 0x2c
   27908:	mov	r3, r5
   2790c:	ldr	r2, [sp, #16]
   27910:	add	r1, sp, #20
   27914:	ldr	r0, [r4, #36]	; 0x24
   27918:	blx	r6
   2791c:	cmp	r0, #0
   27920:	bne	27994 <flatcc_builder_create_table@@Base+0x1b8>
   27924:	str	r5, [r4, #136]	; 0x88
   27928:	mov	r0, r5
   2792c:	add	sp, sp, #92	; 0x5c
   27930:	ldrd	r4, [sp]
   27934:	ldrd	r6, [sp, #8]
   27938:	add	sp, sp, #16
   2793c:	pop	{pc}		; (ldr pc, [sp], #4)
   27940:	ldr	r3, [pc, #104]	; 279b0 <flatcc_builder_create_table@@Base+0x1d4>
   27944:	movw	r2, #1237	; 0x4d5
   27948:	movw	r1, #5868	; 0x16ec
   2794c:	movt	r1, #4
   27950:	movw	r0, #6544	; 0x1990
   27954:	movt	r0, #4
   27958:	bl	145f0 <__assert_fail@plt>
   2795c:	ldr	r3, [pc, #76]	; 279b0 <flatcc_builder_create_table@@Base+0x1d4>
   27960:	movw	r2, #1243	; 0x4db
   27964:	movw	r1, #5868	; 0x16ec
   27968:	movt	r1, #4
   2796c:	movw	r0, #6564	; 0x19a4
   27970:	movt	r0, #4
   27974:	bl	145f0 <__assert_fail@plt>
   27978:	ldr	r3, [pc, #52]	; 279b4 <flatcc_builder_create_table@@Base+0x1d8>
   2797c:	movw	r2, #647	; 0x287
   27980:	movw	r1, #5868	; 0x16ec
   27984:	movt	r1, #4
   27988:	movw	r0, #5952	; 0x1740
   2798c:	movt	r0, #4
   27990:	bl	145f0 <__assert_fail@plt>
   27994:	ldr	r3, [pc, #24]	; 279b4 <flatcc_builder_create_table@@Base+0x1d8>
   27998:	movw	r2, #651	; 0x28b
   2799c:	movw	r1, #5868	; 0x16ec
   279a0:	movt	r1, #4
   279a4:	movw	r0, #5952	; 0x1740
   279a8:	movt	r0, #4
   279ac:	bl	145f0 <__assert_fail@plt>
   279b0:	andeq	r1, r4, r8, lsr r4
   279b4:	andeq	r1, r4, r8, ror #3

000279b8 <flatcc_builder_check_required_field@@Base>:
   279b8:	ldr	r3, [r0, #32]
   279bc:	ldrh	r3, [r3, #14]
   279c0:	cmp	r3, #3
   279c4:	bne	279ec <flatcc_builder_check_required_field@@Base+0x34>
   279c8:	ldrh	r3, [r0, #8]
   279cc:	cmp	r3, r1
   279d0:	bls	27a10 <flatcc_builder_check_required_field@@Base+0x58>
   279d4:	ldr	r3, [r0, #4]
   279d8:	lsl	r1, r1, #1
   279dc:	ldrh	r0, [r3, r1]
   279e0:	adds	r0, r0, #0
   279e4:	movne	r0, #1
   279e8:	bx	lr
   279ec:	str	r4, [sp, #-8]!
   279f0:	str	lr, [sp, #4]
   279f4:	ldr	r3, [pc, #28]	; 27a18 <flatcc_builder_check_required_field@@Base+0x60>
   279f8:	movw	r2, #1272	; 0x4f8
   279fc:	movw	r1, #5868	; 0x16ec
   27a00:	movt	r1, #4
   27a04:	movw	r0, #6576	; 0x19b0
   27a08:	movt	r0, #4
   27a0c:	bl	145f0 <__assert_fail@plt>
   27a10:	mov	r0, #0
   27a14:	bx	lr
   27a18:	andeq	r1, r4, r4, asr r4

00027a1c <flatcc_builder_check_union_field@@Base>:
   27a1c:	ldr	r3, [r0, #32]
   27a20:	ldrh	r3, [r3, #14]
   27a24:	cmp	r3, #3
   27a28:	bne	27a7c <flatcc_builder_check_union_field@@Base+0x60>
   27a2c:	cmp	r1, #0
   27a30:	beq	27ac8 <flatcc_builder_check_union_field@@Base+0xac>
   27a34:	ldrh	r3, [r0, #8]
   27a38:	cmp	r3, r1
   27a3c:	bls	27ad0 <flatcc_builder_check_union_field@@Base+0xb4>
   27a40:	ldr	r3, [r0, #4]
   27a44:	sub	r1, r1, #-2147483647	; 0x80000001
   27a48:	lsl	r1, r1, #1
   27a4c:	ldrh	r2, [r3, r1]
   27a50:	cmp	r2, #0
   27a54:	beq	27aa0 <flatcc_builder_check_union_field@@Base+0x84>
   27a58:	ldr	r0, [r0, #16]
   27a5c:	ldrb	r2, [r0, r2]
   27a60:	cmp	r2, #0
   27a64:	bne	27ab4 <flatcc_builder_check_union_field@@Base+0x98>
   27a68:	add	r1, r3, r1
   27a6c:	ldrh	r0, [r1, #2]
   27a70:	clz	r0, r0
   27a74:	lsr	r0, r0, #5
   27a78:	bx	lr
   27a7c:	str	r4, [sp, #-8]!
   27a80:	str	lr, [sp, #4]
   27a84:	ldr	r3, [pc, #76]	; 27ad8 <flatcc_builder_check_union_field@@Base+0xbc>
   27a88:	movw	r2, #1279	; 0x4ff
   27a8c:	movw	r1, #5868	; 0x16ec
   27a90:	movt	r1, #4
   27a94:	movw	r0, #6576	; 0x19b0
   27a98:	movt	r0, #4
   27a9c:	bl	145f0 <__assert_fail@plt>
   27aa0:	add	r1, r3, r1
   27aa4:	ldrh	r0, [r1, #2]
   27aa8:	clz	r0, r0
   27aac:	lsr	r0, r0, #5
   27ab0:	bx	lr
   27ab4:	add	r1, r3, r1
   27ab8:	ldrh	r0, [r1, #2]
   27abc:	adds	r0, r0, #0
   27ac0:	movne	r0, #1
   27ac4:	bx	lr
   27ac8:	mov	r0, #0
   27acc:	bx	lr
   27ad0:	mov	r0, #0
   27ad4:	bx	lr
   27ad8:	andeq	r1, r4, r8, ror r4

00027adc <flatcc_builder_check_required@@Base>:
   27adc:	ldr	r3, [r0, #32]
   27ae0:	ldrh	r3, [r3, #14]
   27ae4:	cmp	r3, #3
   27ae8:	bne	27b44 <flatcc_builder_check_required@@Base+0x68>
   27aec:	ldrh	r3, [r0, #8]
   27af0:	cmp	r3, r2
   27af4:	blt	27b70 <flatcc_builder_check_required@@Base+0x94>
   27af8:	cmp	r2, #0
   27afc:	ble	27b78 <flatcc_builder_check_required@@Base+0x9c>
   27b00:	ldr	ip, [r0, #4]
   27b04:	ldrh	r3, [r1]
   27b08:	lsl	r3, r3, #1
   27b0c:	ldrh	r3, [ip, r3]
   27b10:	cmp	r3, #0
   27b14:	beq	27b80 <flatcc_builder_check_required@@Base+0xa4>
   27b18:	add	r0, r1, #2
   27b1c:	add	r2, r1, r2, lsl #1
   27b20:	cmp	r0, r2
   27b24:	beq	27b68 <flatcc_builder_check_required@@Base+0x8c>
   27b28:	ldrh	r3, [r0], #2
   27b2c:	lsl	r3, r3, #1
   27b30:	ldrh	r3, [ip, r3]
   27b34:	cmp	r3, #0
   27b38:	bne	27b20 <flatcc_builder_check_required@@Base+0x44>
   27b3c:	mov	r0, #0
   27b40:	bx	lr
   27b44:	str	r4, [sp, #-8]!
   27b48:	str	lr, [sp, #4]
   27b4c:	ldr	r3, [pc, #52]	; 27b88 <flatcc_builder_check_required@@Base+0xac>
   27b50:	movw	r2, #1297	; 0x511
   27b54:	movw	r1, #5868	; 0x16ec
   27b58:	movt	r1, #4
   27b5c:	movw	r0, #6576	; 0x19b0
   27b60:	movt	r0, #4
   27b64:	bl	145f0 <__assert_fail@plt>
   27b68:	mov	r0, #1
   27b6c:	bx	lr
   27b70:	mov	r0, #0
   27b74:	bx	lr
   27b78:	mov	r0, #1
   27b7c:	bx	lr
   27b80:	mov	r0, #0
   27b84:	bx	lr
   27b88:	muleq	r4, ip, r4

00027b8c <flatcc_builder_end_table@@Base>:
   27b8c:	strd	r4, [sp, #-20]!	; 0xffffffec
   27b90:	strd	r6, [sp, #8]
   27b94:	str	lr, [sp, #16]
   27b98:	sub	sp, sp, #20
   27b9c:	ldr	r3, [r0, #32]
   27ba0:	ldrh	r3, [r3, #14]
   27ba4:	cmp	r3, #3
   27ba8:	bne	27c28 <flatcc_builder_end_table@@Base+0x9c>
   27bac:	mov	r4, r0
   27bb0:	ldr	r2, [r0, #4]
   27bb4:	sub	r6, r2, #4
   27bb8:	ldrh	r5, [r0, #8]
   27bbc:	add	r5, r5, #2
   27bc0:	lsl	r5, r5, #1
   27bc4:	uxth	r5, r5
   27bc8:	strh	r5, [r2, #-4]
   27bcc:	ldr	r3, [r0, #20]
   27bd0:	add	r3, r3, #4
   27bd4:	uxth	r1, r3
   27bd8:	strh	r1, [r2, #-2]
   27bdc:	ldr	r3, [r0, #12]
   27be0:	eor	r3, r3, r5
   27be4:	movw	r2, #31153	; 0x79b1
   27be8:	movt	r2, #40503	; 0x9e37
   27bec:	mul	r3, r2, r3
   27bf0:	eor	r3, r3, r1
   27bf4:	mul	r3, r2, r3
   27bf8:	str	r3, [r0, #12]
   27bfc:	mov	r2, r5
   27c00:	mov	r1, r6
   27c04:	bl	2742c <flatcc_builder_create_cached_vtable@@Base>
   27c08:	subs	r7, r0, #0
   27c0c:	bne	27c44 <flatcc_builder_end_table@@Base+0xb8>
   27c10:	mov	r0, r7
   27c14:	add	sp, sp, #20
   27c18:	ldrd	r4, [sp]
   27c1c:	ldrd	r6, [sp, #8]
   27c20:	add	sp, sp, #16
   27c24:	pop	{pc}		; (ldr pc, [sp], #4)
   27c28:	ldr	r3, [pc, #284]	; 27d4c <flatcc_builder_end_table@@Base+0x1c0>
   27c2c:	movw	r2, #1317	; 0x525
   27c30:	movw	r1, #5868	; 0x16ec
   27c34:	movt	r1, #4
   27c38:	movw	r0, #6576	; 0x19b0
   27c3c:	movt	r0, #4
   27c40:	bl	145f0 <__assert_fail@plt>
   27c44:	mov	r2, r5
   27c48:	mov	r1, #0
   27c4c:	mov	r0, r6
   27c50:	bl	1459c <memset@plt>
   27c54:	ldr	r3, [r4, #32]
   27c58:	ldr	r2, [r4, #76]	; 0x4c
   27c5c:	ldr	r3, [r3, #20]
   27c60:	add	r2, r2, r3
   27c64:	str	r7, [sp, #8]
   27c68:	ldr	r3, [r4]
   27c6c:	sub	r3, r3, r2
   27c70:	asr	r3, r3, #1
   27c74:	str	r3, [sp, #4]
   27c78:	str	r2, [sp]
   27c7c:	ldrh	r3, [r4, #130]	; 0x82
   27c80:	ldr	r2, [r4, #20]
   27c84:	ldr	r1, [r4, #16]
   27c88:	mov	r0, r4
   27c8c:	bl	277dc <flatcc_builder_create_table@@Base>
   27c90:	subs	r7, r0, #0
   27c94:	beq	27c10 <flatcc_builder_end_table@@Base+0x84>
   27c98:	ldr	r3, [r4, #32]
   27c9c:	ldr	r2, [r3, #24]
   27ca0:	str	r2, [r4, #12]
   27ca4:	ldrh	r2, [r3, #28]
   27ca8:	strh	r2, [r4, #8]
   27cac:	ldr	r2, [r4, #52]	; 0x34
   27cb0:	ldr	r1, [r3, #16]
   27cb4:	add	r2, r2, r1
   27cb8:	str	r2, [r4, #4]
   27cbc:	ldr	r2, [r4, #76]	; 0x4c
   27cc0:	ldr	r3, [r3, #20]
   27cc4:	add	r3, r2, r3
   27cc8:	str	r3, [r4]
   27ccc:	ldr	r2, [r4, #20]
   27cd0:	mov	r1, #0
   27cd4:	ldr	r0, [r4, #16]
   27cd8:	bl	1459c <memset@plt>
   27cdc:	ldr	r2, [r4, #32]
   27ce0:	ldr	r3, [r2, #8]
   27ce4:	str	r3, [r4, #20]
   27ce8:	ldr	r0, [r2]
   27cec:	str	r0, [r4, #28]
   27cf0:	ldr	r1, [r2, #4]
   27cf4:	ldr	r3, [r4, #60]	; 0x3c
   27cf8:	add	r3, r3, r0
   27cfc:	str	r3, [r4, #16]
   27d00:	ldr	r3, [r4, #64]	; 0x40
   27d04:	sub	r3, r3, r0
   27d08:	cmp	r3, r1
   27d0c:	movcs	r3, r1
   27d10:	str	r3, [r4, #24]
   27d14:	str	r1, [r2, #4]
   27d18:	ldrh	r3, [r4, #130]	; 0x82
   27d1c:	ldrh	r2, [r4, #128]	; 0x80
   27d20:	cmp	r2, r3
   27d24:	strhcc	r3, [r4, #128]	; 0x80
   27d28:	ldr	r3, [r4, #32]
   27d2c:	ldrh	r2, [r3, #12]
   27d30:	strh	r2, [r4, #130]	; 0x82
   27d34:	sub	r3, r3, #36	; 0x24
   27d38:	str	r3, [r4, #32]
   27d3c:	ldr	r3, [r4, #156]	; 0x9c
   27d40:	sub	r3, r3, #1
   27d44:	str	r3, [r4, #156]	; 0x9c
   27d48:	b	27c10 <flatcc_builder_end_table@@Base+0x84>
   27d4c:			; <UNDEFINED> instruction: 0x000414bc

00027d50 <flatcc_builder_create_vector@@Base>:
   27d50:	strd	r4, [sp, #-16]!
   27d54:	str	r6, [sp, #8]
   27d58:	str	lr, [sp, #12]
   27d5c:	sub	sp, sp, #88	; 0x58
   27d60:	mov	r4, r0
   27d64:	ldrh	r0, [sp, #104]	; 0x68
   27d68:	ldr	ip, [sp, #108]	; 0x6c
   27d6c:	cmp	r2, ip
   27d70:	bhi	27e64 <flatcc_builder_create_vector@@Base+0x114>
   27d74:	cmp	r0, #4
   27d78:	movcc	r0, #4
   27d7c:	ldrh	ip, [r4, #128]	; 0x80
   27d80:	cmp	ip, r0
   27d84:	strhcc	r0, [r4, #128]	; 0x80
   27d88:	mul	r3, r3, r2
   27d8c:	str	r2, [sp, #84]	; 0x54
   27d90:	ldr	r2, [r4, #136]	; 0x88
   27d94:	sub	ip, r2, r3
   27d98:	sub	r0, r0, #1
   27d9c:	and	r0, r0, ip
   27da0:	mov	ip, #4
   27da4:	str	ip, [sp, #12]
   27da8:	add	lr, sp, #84	; 0x54
   27dac:	str	lr, [sp, #20]
   27db0:	str	ip, [sp, #24]
   27db4:	mov	ip, #1
   27db8:	str	ip, [sp, #16]
   27dbc:	cmp	r3, #0
   27dc0:	beq	27ddc <flatcc_builder_create_vector@@Base+0x8c>
   27dc4:	add	ip, r3, #4
   27dc8:	str	ip, [sp, #12]
   27dcc:	str	r1, [sp, #28]
   27dd0:	str	r3, [sp, #32]
   27dd4:	mov	r3, #2
   27dd8:	str	r3, [sp, #16]
   27ddc:	cmp	r0, #0
   27de0:	beq	27e14 <flatcc_builder_create_vector@@Base+0xc4>
   27de4:	ldr	r3, [sp, #12]
   27de8:	add	r3, r3, r0
   27dec:	str	r3, [sp, #12]
   27df0:	ldr	r3, [sp, #16]
   27df4:	add	r3, r3, #1
   27df8:	add	r1, sp, #88	; 0x58
   27dfc:	add	ip, r1, r3, lsl #3
   27e00:	movw	r1, #3996	; 0xf9c
   27e04:	movt	r1, #4
   27e08:	str	r1, [ip, #-76]	; 0xffffffb4
   27e0c:	str	r0, [ip, #-72]	; 0xffffffb8
   27e10:	str	r3, [sp, #16]
   27e14:	ldr	r3, [sp, #12]
   27e18:	sub	r5, r2, r3
   27e1c:	cmp	r2, r5
   27e20:	ble	27e80 <flatcc_builder_create_vector@@Base+0x130>
   27e24:	str	r3, [sp]
   27e28:	ldr	r6, [r4, #44]	; 0x2c
   27e2c:	mov	r3, r5
   27e30:	ldr	r2, [sp, #16]
   27e34:	add	r1, sp, #20
   27e38:	ldr	r0, [r4, #36]	; 0x24
   27e3c:	blx	r6
   27e40:	cmp	r0, #0
   27e44:	bne	27e9c <flatcc_builder_create_vector@@Base+0x14c>
   27e48:	str	r5, [r4, #136]	; 0x88
   27e4c:	mov	r0, r5
   27e50:	add	sp, sp, #88	; 0x58
   27e54:	ldrd	r4, [sp]
   27e58:	ldr	r6, [sp, #8]
   27e5c:	add	sp, sp, #12
   27e60:	pop	{pc}		; (ldr pc, [sp], #4)
   27e64:	ldr	r3, [pc, #76]	; 27eb8 <flatcc_builder_create_vector@@Base+0x168>
   27e68:	movw	r2, #1365	; 0x555
   27e6c:	movw	r1, #5868	; 0x16ec
   27e70:	movt	r1, #4
   27e74:	movw	r0, #6620	; 0x19dc
   27e78:	movt	r0, #4
   27e7c:	bl	145f0 <__assert_fail@plt>
   27e80:	ldr	r3, [pc, #52]	; 27ebc <flatcc_builder_create_vector@@Base+0x16c>
   27e84:	movw	r2, #647	; 0x287
   27e88:	movw	r1, #5868	; 0x16ec
   27e8c:	movt	r1, #4
   27e90:	movw	r0, #5952	; 0x1740
   27e94:	movt	r0, #4
   27e98:	bl	145f0 <__assert_fail@plt>
   27e9c:	ldr	r3, [pc, #24]	; 27ebc <flatcc_builder_create_vector@@Base+0x16c>
   27ea0:	movw	r2, #651	; 0x28b
   27ea4:	movw	r1, #5868	; 0x16ec
   27ea8:	movt	r1, #4
   27eac:	movw	r0, #5952	; 0x1740
   27eb0:	movt	r0, #4
   27eb4:	bl	145f0 <__assert_fail@plt>
   27eb8:	ldrdeq	r1, [r4], -r8
   27ebc:	andeq	r1, r4, r8, ror #3

00027ec0 <flatcc_builder_end_vector@@Base>:
   27ec0:	strd	r4, [sp, #-12]!
   27ec4:	str	lr, [sp, #8]
   27ec8:	sub	sp, sp, #12
   27ecc:	ldr	r1, [r0, #32]
   27ed0:	ldrh	r3, [r1, #14]
   27ed4:	cmp	r3, #4
   27ed8:	bne	27f1c <flatcc_builder_end_vector@@Base+0x5c>
   27edc:	mov	r4, r0
   27ee0:	ldr	r3, [r1, #16]
   27ee4:	ldr	r2, [r1, #20]
   27ee8:	ldr	r1, [r1, #24]
   27eec:	str	r1, [sp, #4]
   27ef0:	ldrh	r1, [r0, #130]	; 0x82
   27ef4:	str	r1, [sp]
   27ef8:	ldr	r1, [r0, #16]
   27efc:	bl	27d50 <flatcc_builder_create_vector@@Base>
   27f00:	subs	r5, r0, #0
   27f04:	bne	27f38 <flatcc_builder_end_vector@@Base+0x78>
   27f08:	mov	r0, r5
   27f0c:	add	sp, sp, #12
   27f10:	ldrd	r4, [sp]
   27f14:	add	sp, sp, #8
   27f18:	pop	{pc}		; (ldr pc, [sp], #4)
   27f1c:	ldr	r3, [pc, #148]	; 27fb8 <flatcc_builder_end_vector@@Base+0xf8>
   27f20:	movw	r2, #1400	; 0x578
   27f24:	movw	r1, #5868	; 0x16ec
   27f28:	movt	r1, #4
   27f2c:	movw	r0, #6180	; 0x1824
   27f30:	movt	r0, #4
   27f34:	bl	145f0 <__assert_fail@plt>
   27f38:	ldr	r2, [r4, #20]
   27f3c:	mov	r1, #0
   27f40:	ldr	r0, [r4, #16]
   27f44:	bl	1459c <memset@plt>
   27f48:	ldr	r2, [r4, #32]
   27f4c:	ldr	r3, [r2, #8]
   27f50:	str	r3, [r4, #20]
   27f54:	ldr	r0, [r2]
   27f58:	str	r0, [r4, #28]
   27f5c:	ldr	r1, [r2, #4]
   27f60:	ldr	r3, [r4, #60]	; 0x3c
   27f64:	add	r3, r3, r0
   27f68:	str	r3, [r4, #16]
   27f6c:	ldr	r3, [r4, #64]	; 0x40
   27f70:	sub	r3, r3, r0
   27f74:	cmp	r3, r1
   27f78:	movcs	r3, r1
   27f7c:	str	r3, [r4, #24]
   27f80:	str	r1, [r2, #4]
   27f84:	ldrh	r3, [r4, #130]	; 0x82
   27f88:	ldrh	r2, [r4, #128]	; 0x80
   27f8c:	cmp	r2, r3
   27f90:	strhcc	r3, [r4, #128]	; 0x80
   27f94:	ldr	r3, [r4, #32]
   27f98:	ldrh	r2, [r3, #12]
   27f9c:	strh	r2, [r4, #130]	; 0x82
   27fa0:	sub	r3, r3, #36	; 0x24
   27fa4:	str	r3, [r4, #32]
   27fa8:	ldr	r3, [r4, #156]	; 0x9c
   27fac:	sub	r3, r3, #1
   27fb0:	str	r3, [r4, #156]	; 0x9c
   27fb4:	b	27f08 <flatcc_builder_end_vector@@Base+0x48>
   27fb8:	strdeq	r1, [r4], -r8

00027fbc <flatcc_builder_vector_count@@Base>:
   27fbc:	ldr	r3, [r0, #32]
   27fc0:	ldr	r0, [r3, #20]
   27fc4:	bx	lr

00027fc8 <flatcc_builder_vector_edit@@Base>:
   27fc8:	ldr	r0, [r0, #16]
   27fcc:	bx	lr

00027fd0 <flatcc_builder_create_offset_vector_direct@@Base>:
   27fd0:	str	r4, [sp, #-8]!
   27fd4:	str	lr, [sp, #4]
   27fd8:	mov	r3, #0
   27fdc:	bl	2542c <flatcc_builder_default_alloc@@Base+0x3b8>
   27fe0:	ldr	r4, [sp]
   27fe4:	add	sp, sp, #4
   27fe8:	pop	{pc}		; (ldr pc, [sp], #4)

00027fec <flatcc_builder_end_offset_vector@@Base>:
   27fec:	strd	r4, [sp, #-16]!
   27ff0:	str	r6, [sp, #8]
   27ff4:	str	lr, [sp, #12]
   27ff8:	ldr	r3, [r0, #32]
   27ffc:	ldrh	r2, [r3, #14]
   28000:	cmp	r2, #5
   28004:	bne	28034 <flatcc_builder_end_offset_vector@@Base+0x48>
   28008:	mov	r4, r0
   2800c:	ldr	r2, [r3, #20]
   28010:	ldr	r1, [r0, #16]
   28014:	bl	27fd0 <flatcc_builder_create_offset_vector_direct@@Base>
   28018:	subs	r5, r0, #0
   2801c:	bne	28050 <flatcc_builder_end_offset_vector@@Base+0x64>
   28020:	mov	r0, r5
   28024:	ldrd	r4, [sp]
   28028:	ldr	r6, [sp, #8]
   2802c:	add	sp, sp, #12
   28030:	pop	{pc}		; (ldr pc, [sp], #4)
   28034:	ldr	r3, [pc, #148]	; 280d0 <flatcc_builder_end_offset_vector@@Base+0xe4>
   28038:	movw	r2, #1480	; 0x5c8
   2803c:	movw	r1, #5868	; 0x16ec
   28040:	movt	r1, #4
   28044:	movw	r0, #6288	; 0x1890
   28048:	movt	r0, #4
   2804c:	bl	145f0 <__assert_fail@plt>
   28050:	ldr	r2, [r4, #20]
   28054:	mov	r1, #0
   28058:	ldr	r0, [r4, #16]
   2805c:	bl	1459c <memset@plt>
   28060:	ldr	r2, [r4, #32]
   28064:	ldr	r3, [r2, #8]
   28068:	str	r3, [r4, #20]
   2806c:	ldr	r0, [r2]
   28070:	str	r0, [r4, #28]
   28074:	ldr	r1, [r2, #4]
   28078:	ldr	r3, [r4, #60]	; 0x3c
   2807c:	add	r3, r3, r0
   28080:	str	r3, [r4, #16]
   28084:	ldr	r3, [r4, #64]	; 0x40
   28088:	sub	r3, r3, r0
   2808c:	cmp	r3, r1
   28090:	movcs	r3, r1
   28094:	str	r3, [r4, #24]
   28098:	str	r1, [r2, #4]
   2809c:	ldrh	r3, [r4, #130]	; 0x82
   280a0:	ldrh	r2, [r4, #128]	; 0x80
   280a4:	cmp	r2, r3
   280a8:	strhcc	r3, [r4, #128]	; 0x80
   280ac:	ldr	r3, [r4, #32]
   280b0:	ldrh	r2, [r3, #12]
   280b4:	strh	r2, [r4, #130]	; 0x82
   280b8:	sub	r3, r3, #36	; 0x24
   280bc:	str	r3, [r4, #32]
   280c0:	ldr	r3, [r4, #156]	; 0x9c
   280c4:	sub	r3, r3, #1
   280c8:	str	r3, [r4, #156]	; 0x9c
   280cc:	b	28020 <flatcc_builder_end_offset_vector@@Base+0x34>
   280d0:	andeq	r1, r4, r4, lsl r5

000280d4 <flatcc_builder_create_offset_vector@@Base>:
   280d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   280d8:	strd	r6, [sp, #8]
   280dc:	str	r8, [sp, #16]
   280e0:	str	lr, [sp, #20]
   280e4:	mov	r5, r0
   280e8:	mov	r7, r1
   280ec:	mov	r6, r2
   280f0:	bl	26e5c <flatcc_builder_start_offset_vector@@Base>
   280f4:	subs	r4, r0, #0
   280f8:	movne	r4, #0
   280fc:	beq	28118 <flatcc_builder_create_offset_vector@@Base+0x44>
   28100:	mov	r0, r4
   28104:	ldrd	r4, [sp]
   28108:	ldrd	r6, [sp, #8]
   2810c:	ldr	r8, [sp, #16]
   28110:	add	sp, sp, #20
   28114:	pop	{pc}		; (ldr pc, [sp], #4)
   28118:	mov	r1, r6
   2811c:	mov	r0, r5
   28120:	bl	26760 <flatcc_builder_extend_offset_vector@@Base>
   28124:	cmp	r0, #0
   28128:	beq	28100 <flatcc_builder_create_offset_vector@@Base+0x2c>
   2812c:	lsl	r2, r6, #2
   28130:	mov	r1, r7
   28134:	bl	14524 <memcpy@plt>
   28138:	mov	r0, r5
   2813c:	bl	27fec <flatcc_builder_end_offset_vector@@Base>
   28140:	mov	r4, r0
   28144:	b	28100 <flatcc_builder_create_offset_vector@@Base+0x2c>

00028148 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   28148:	strd	r4, [sp, #-16]!
   2814c:	str	r6, [sp, #8]
   28150:	str	lr, [sp, #12]
   28154:	mov	r4, r0
   28158:	ldr	r2, [r0, #32]
   2815c:	ldrh	r0, [r2, #14]
   28160:	cmp	r0, #5
   28164:	bne	28198 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   28168:	mov	r3, r1
   2816c:	ldr	r2, [r2, #20]
   28170:	ldr	r1, [r4, #16]
   28174:	mov	r0, r4
   28178:	bl	2542c <flatcc_builder_default_alloc@@Base+0x3b8>
   2817c:	subs	r5, r0, #0
   28180:	bne	281b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   28184:	mov	r0, r5
   28188:	ldrd	r4, [sp]
   2818c:	ldr	r6, [sp, #8]
   28190:	add	sp, sp, #12
   28194:	pop	{pc}		; (ldr pc, [sp], #4)
   28198:	ldr	r3, [pc, #148]	; 28234 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   2819c:	movw	r2, #1493	; 0x5d5
   281a0:	movw	r1, #5868	; 0x16ec
   281a4:	movt	r1, #4
   281a8:	movw	r0, #6288	; 0x1890
   281ac:	movt	r0, #4
   281b0:	bl	145f0 <__assert_fail@plt>
   281b4:	ldr	r2, [r4, #20]
   281b8:	mov	r1, #0
   281bc:	ldr	r0, [r4, #16]
   281c0:	bl	1459c <memset@plt>
   281c4:	ldr	r2, [r4, #32]
   281c8:	ldr	r3, [r2, #8]
   281cc:	str	r3, [r4, #20]
   281d0:	ldr	r0, [r2]
   281d4:	str	r0, [r4, #28]
   281d8:	ldr	r1, [r2, #4]
   281dc:	ldr	r3, [r4, #60]	; 0x3c
   281e0:	add	r3, r3, r0
   281e4:	str	r3, [r4, #16]
   281e8:	ldr	r3, [r4, #64]	; 0x40
   281ec:	sub	r3, r3, r0
   281f0:	cmp	r3, r1
   281f4:	movcs	r3, r1
   281f8:	str	r3, [r4, #24]
   281fc:	str	r1, [r2, #4]
   28200:	ldrh	r3, [r4, #130]	; 0x82
   28204:	ldrh	r2, [r4, #128]	; 0x80
   28208:	cmp	r2, r3
   2820c:	strhcc	r3, [r4, #128]	; 0x80
   28210:	ldr	r3, [r4, #32]
   28214:	ldrh	r2, [r3, #12]
   28218:	strh	r2, [r4, #130]	; 0x82
   2821c:	sub	r3, r3, #36	; 0x24
   28220:	str	r3, [r4, #32]
   28224:	ldr	r3, [r4, #156]	; 0x9c
   28228:	sub	r3, r3, #1
   2822c:	str	r3, [r4, #156]	; 0x9c
   28230:	b	28184 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   28234:	andeq	r1, r4, r8, lsr r5

00028238 <flatcc_builder_offset_vector_edit@@Base>:
   28238:	ldr	r0, [r0, #16]
   2823c:	bx	lr

00028240 <flatcc_builder_offset_vector_count@@Base>:
   28240:	ldr	r3, [r0, #32]
   28244:	ldr	r0, [r3, #20]
   28248:	bx	lr

0002824c <flatcc_builder_create_union_vector_direct@@Base>:
   2824c:	strd	r4, [sp, #-20]!	; 0xffffffec
   28250:	strd	r6, [sp, #8]
   28254:	str	lr, [sp, #16]
   28258:	sub	sp, sp, #12
   2825c:	mov	r4, r0
   28260:	mov	r5, r1
   28264:	mov	r6, r2
   28268:	mov	r1, r3
   2826c:	mov	r3, r2
   28270:	ldr	r2, [sp, #32]
   28274:	mov	r0, r5
   28278:	bl	2542c <flatcc_builder_default_alloc@@Base+0x3b8>
   2827c:	subs	r7, r0, #0
   28280:	bne	282a8 <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   28284:	mov	r3, #0
   28288:	str	r3, [r4]
   2828c:	str	r3, [r4, #4]
   28290:	mov	r0, r4
   28294:	add	sp, sp, #12
   28298:	ldrd	r4, [sp]
   2829c:	ldrd	r6, [sp, #8]
   282a0:	add	sp, sp, #16
   282a4:	pop	{pc}		; (ldr pc, [sp], #4)
   282a8:	mvn	r3, #0
   282ac:	str	r3, [sp, #4]
   282b0:	mov	r3, #1
   282b4:	str	r3, [sp]
   282b8:	ldr	r2, [sp, #32]
   282bc:	mov	r1, r6
   282c0:	mov	r0, r5
   282c4:	bl	27d50 <flatcc_builder_create_vector@@Base>
   282c8:	cmp	r0, #0
   282cc:	moveq	r3, #0
   282d0:	streq	r3, [r4]
   282d4:	strne	r0, [r4]
   282d8:	str	r7, [r4, #4]
   282dc:	b	28290 <flatcc_builder_create_union_vector_direct@@Base+0x44>

000282e0 <flatcc_builder_create_union_vector@@Base>:
   282e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   282e4:	strd	r6, [sp, #8]
   282e8:	str	r8, [sp, #16]
   282ec:	str	lr, [sp, #20]
   282f0:	sub	sp, sp, #16
   282f4:	mov	r5, r0
   282f8:	mov	r4, r1
   282fc:	mov	r7, r2
   28300:	mov	r6, r3
   28304:	mov	r0, r1
   28308:	bl	26e5c <flatcc_builder_start_offset_vector@@Base>
   2830c:	cmp	r0, #0
   28310:	beq	2833c <flatcc_builder_create_union_vector@@Base+0x5c>
   28314:	mov	r3, #0
   28318:	str	r3, [r5]
   2831c:	str	r3, [r5, #4]
   28320:	mov	r0, r5
   28324:	add	sp, sp, #16
   28328:	ldrd	r4, [sp]
   2832c:	ldrd	r6, [sp, #8]
   28330:	ldr	r8, [sp, #16]
   28334:	add	sp, sp, #20
   28338:	pop	{pc}		; (ldr pc, [sp], #4)
   2833c:	mov	r1, r6
   28340:	mov	r0, r4
   28344:	bl	26760 <flatcc_builder_extend_offset_vector@@Base>
   28348:	cmp	r0, #0
   2834c:	moveq	r3, #0
   28350:	streq	r3, [r5]
   28354:	streq	r3, [r5, #4]
   28358:	beq	28320 <flatcc_builder_create_union_vector@@Base+0x40>
   2835c:	ldr	r8, [r4, #20]
   28360:	add	r1, r6, r8
   28364:	str	r1, [r4, #20]
   28368:	ldr	r3, [r4, #24]
   2836c:	cmp	r1, r3
   28370:	bcs	28454 <flatcc_builder_create_union_vector@@Base+0x174>
   28374:	ldr	r3, [r4, #16]
   28378:	adds	r2, r3, r8
   2837c:	beq	2846c <flatcc_builder_create_union_vector@@Base+0x18c>
   28380:	cmp	r6, #0
   28384:	beq	283b4 <flatcc_builder_create_union_vector@@Base+0xd4>
   28388:	mov	r1, r7
   2838c:	sub	ip, r2, #1
   28390:	sub	r0, r3, #4
   28394:	add	r7, r7, r6, lsl #3
   28398:	ldrb	lr, [r1]
   2839c:	strb	lr, [ip, #1]!
   283a0:	ldr	lr, [r1, #4]
   283a4:	str	lr, [r0, #4]!
   283a8:	add	r1, r1, #8
   283ac:	cmp	r1, r7
   283b0:	bne	28398 <flatcc_builder_create_union_vector@@Base+0xb8>
   283b4:	str	r6, [sp]
   283b8:	mov	r1, r4
   283bc:	add	r0, sp, #8
   283c0:	bl	2824c <flatcc_builder_create_union_vector_direct@@Base>
   283c4:	ldr	r7, [sp, #8]
   283c8:	ldr	r6, [sp, #12]
   283cc:	ldr	r2, [r4, #20]
   283d0:	mov	r1, #0
   283d4:	ldr	r0, [r4, #16]
   283d8:	bl	1459c <memset@plt>
   283dc:	ldr	r2, [r4, #32]
   283e0:	ldr	r3, [r2, #8]
   283e4:	str	r3, [r4, #20]
   283e8:	ldr	r0, [r2]
   283ec:	str	r0, [r4, #28]
   283f0:	ldr	r1, [r2, #4]
   283f4:	ldr	r3, [r4, #60]	; 0x3c
   283f8:	add	r3, r3, r0
   283fc:	str	r3, [r4, #16]
   28400:	ldr	r3, [r4, #64]	; 0x40
   28404:	sub	r3, r3, r0
   28408:	cmp	r3, r1
   2840c:	movcs	r3, r1
   28410:	str	r3, [r4, #24]
   28414:	str	r1, [r2, #4]
   28418:	ldrh	r3, [r4, #130]	; 0x82
   2841c:	ldrh	r2, [r4, #128]	; 0x80
   28420:	cmp	r2, r3
   28424:	strhcc	r3, [r4, #128]	; 0x80
   28428:	ldr	r3, [r4, #32]
   2842c:	ldrh	r2, [r3, #12]
   28430:	strh	r2, [r4, #130]	; 0x82
   28434:	sub	r3, r3, #36	; 0x24
   28438:	str	r3, [r4, #32]
   2843c:	ldr	r3, [r4, #156]	; 0x9c
   28440:	sub	r3, r3, #1
   28444:	str	r3, [r4, #156]	; 0x9c
   28448:	str	r7, [r5]
   2844c:	str	r6, [r5, #4]
   28450:	b	28320 <flatcc_builder_create_union_vector@@Base+0x40>
   28454:	mvn	r2, #3
   28458:	add	r1, r1, #1
   2845c:	mov	r0, r4
   28460:	bl	24fec <main@@Base+0x79c>
   28464:	cmp	r0, #0
   28468:	beq	28374 <flatcc_builder_create_union_vector@@Base+0x94>
   2846c:	mov	r3, #0
   28470:	str	r3, [r5]
   28474:	str	r3, [r5, #4]
   28478:	b	28320 <flatcc_builder_create_union_vector@@Base+0x40>

0002847c <flatcc_builder_start_union_vector@@Base>:
   2847c:	str	r4, [sp, #-8]!
   28480:	str	lr, [sp, #4]
   28484:	mov	r4, r0
   28488:	mov	r1, #4
   2848c:	bl	252c0 <flatcc_builder_default_alloc@@Base+0x24c>
   28490:	cmp	r0, #0
   28494:	bne	284f8 <flatcc_builder_start_union_vector@@Base+0x7c>
   28498:	ldr	r3, [r4, #32]
   2849c:	mov	r2, #8
   284a0:	str	r2, [r3, #16]
   284a4:	ldr	r3, [r4, #32]
   284a8:	mov	r2, #0
   284ac:	str	r2, [r3, #20]
   284b0:	ldr	r3, [r4, #32]
   284b4:	mov	r2, #7
   284b8:	strh	r2, [r3, #14]
   284bc:	ldr	r1, [r4, #28]
   284c0:	ldr	r2, [r4, #60]	; 0x3c
   284c4:	add	r2, r2, r1
   284c8:	str	r2, [r4, #16]
   284cc:	ldr	r3, [r4, #64]	; 0x40
   284d0:	sub	r3, r3, r1
   284d4:	cmn	r3, #4
   284d8:	mvnhi	r3, #3
   284dc:	str	r3, [r4, #24]
   284e0:	ldr	r3, [r4, #32]
   284e4:	mvn	r2, #3
   284e8:	str	r2, [r3, #4]
   284ec:	ldr	r4, [sp]
   284f0:	add	sp, sp, #4
   284f4:	pop	{pc}		; (ldr pc, [sp], #4)
   284f8:	mvn	r0, #0
   284fc:	b	284ec <flatcc_builder_start_union_vector@@Base+0x70>

00028500 <flatcc_builder_end_union_vector@@Base>:
   28500:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28504:	strd	r6, [sp, #8]
   28508:	str	r8, [sp, #16]
   2850c:	str	lr, [sp, #20]
   28510:	sub	sp, sp, #16
   28514:	ldr	r3, [r1, #32]
   28518:	ldrh	r2, [r3, #14]
   2851c:	cmp	r2, #7
   28520:	bne	28648 <flatcc_builder_end_union_vector@@Base+0x148>
   28524:	mov	r6, r0
   28528:	mov	r4, r1
   2852c:	ldr	r5, [r3, #20]
   28530:	ldr	r8, [r1, #20]
   28534:	add	r1, r5, r5, lsl #2
   28538:	add	r1, r1, r8
   2853c:	str	r1, [r4, #20]
   28540:	ldr	r3, [r4, #24]
   28544:	cmp	r1, r3
   28548:	bcs	28664 <flatcc_builder_end_union_vector@@Base+0x164>
   2854c:	ldr	r7, [r4, #16]
   28550:	adds	r3, r7, r8
   28554:	beq	2867c <flatcc_builder_end_union_vector@@Base+0x17c>
   28558:	add	r2, r3, r5, lsl #2
   2855c:	cmp	r5, #0
   28560:	beq	28590 <flatcc_builder_end_union_vector@@Base+0x90>
   28564:	mov	r1, r7
   28568:	sub	ip, r2, #1
   2856c:	sub	r0, r3, #4
   28570:	add	r7, r7, r5, lsl #3
   28574:	ldrb	lr, [r1]
   28578:	strb	lr, [ip, #1]!
   2857c:	ldr	lr, [r1, #4]
   28580:	str	lr, [r0, #4]!
   28584:	add	r1, r1, #8
   28588:	cmp	r1, r7
   2858c:	bne	28574 <flatcc_builder_end_union_vector@@Base+0x74>
   28590:	str	r5, [sp]
   28594:	mov	r1, r4
   28598:	add	r0, sp, #8
   2859c:	bl	2824c <flatcc_builder_create_union_vector_direct@@Base>
   285a0:	ldr	r7, [sp, #8]
   285a4:	ldr	r5, [sp, #12]
   285a8:	ldr	r2, [r4, #20]
   285ac:	mov	r1, #0
   285b0:	ldr	r0, [r4, #16]
   285b4:	bl	1459c <memset@plt>
   285b8:	ldr	r2, [r4, #32]
   285bc:	ldr	r3, [r2, #8]
   285c0:	str	r3, [r4, #20]
   285c4:	ldr	r0, [r2]
   285c8:	str	r0, [r4, #28]
   285cc:	ldr	r1, [r2, #4]
   285d0:	ldr	r3, [r4, #60]	; 0x3c
   285d4:	add	r3, r3, r0
   285d8:	str	r3, [r4, #16]
   285dc:	ldr	r3, [r4, #64]	; 0x40
   285e0:	sub	r3, r3, r0
   285e4:	cmp	r3, r1
   285e8:	movcs	r3, r1
   285ec:	str	r3, [r4, #24]
   285f0:	str	r1, [r2, #4]
   285f4:	ldrh	r3, [r4, #130]	; 0x82
   285f8:	ldrh	r2, [r4, #128]	; 0x80
   285fc:	cmp	r2, r3
   28600:	strhcc	r3, [r4, #128]	; 0x80
   28604:	ldr	r3, [r4, #32]
   28608:	ldrh	r2, [r3, #12]
   2860c:	strh	r2, [r4, #130]	; 0x82
   28610:	sub	r3, r3, #36	; 0x24
   28614:	str	r3, [r4, #32]
   28618:	ldr	r3, [r4, #156]	; 0x9c
   2861c:	sub	r3, r3, #1
   28620:	str	r3, [r4, #156]	; 0x9c
   28624:	str	r7, [r6]
   28628:	str	r5, [r6, #4]
   2862c:	mov	r0, r6
   28630:	add	sp, sp, #16
   28634:	ldrd	r4, [sp]
   28638:	ldrd	r6, [sp, #8]
   2863c:	ldr	r8, [sp, #16]
   28640:	add	sp, sp, #20
   28644:	pop	{pc}		; (ldr pc, [sp], #4)
   28648:	ldr	r3, [pc, #60]	; 2868c <flatcc_builder_end_union_vector@@Base+0x18c>
   2864c:	movw	r2, #1617	; 0x651
   28650:	movw	r1, #5868	; 0x16ec
   28654:	movt	r1, #4
   28658:	movw	r0, #6640	; 0x19f0
   2865c:	movt	r0, #4
   28660:	bl	145f0 <__assert_fail@plt>
   28664:	mvn	r2, #3
   28668:	add	r1, r1, #1
   2866c:	mov	r0, r4
   28670:	bl	24fec <main@@Base+0x79c>
   28674:	cmp	r0, #0
   28678:	beq	2854c <flatcc_builder_end_union_vector@@Base+0x4c>
   2867c:	mov	r3, #0
   28680:	str	r3, [r6]
   28684:	str	r3, [r6, #4]
   28688:	b	2862c <flatcc_builder_end_union_vector@@Base+0x12c>
   2868c:	andeq	r1, r4, r4, ror #10

00028690 <flatcc_builder_union_vector_edit@@Base>:
   28690:	ldr	r0, [r0, #16]
   28694:	bx	lr

00028698 <flatcc_builder_union_vector_count@@Base>:
   28698:	ldr	r3, [r0, #32]
   2869c:	ldr	r0, [r3, #20]
   286a0:	bx	lr

000286a4 <flatcc_builder_extend_union_vector@@Base>:
   286a4:	strd	r4, [sp, #-16]!
   286a8:	str	r6, [sp, #8]
   286ac:	str	lr, [sp, #12]
   286b0:	mov	r4, r0
   286b4:	ldr	r2, [r0, #32]
   286b8:	ldr	r3, [r2, #20]
   286bc:	adds	r3, r1, r3
   286c0:	movcs	ip, #1
   286c4:	movcc	ip, #0
   286c8:	cmn	r3, #-536870911	; 0xe0000001
   286cc:	movls	r0, #0
   286d0:	movhi	r0, #1
   286d4:	orrs	r0, ip, r0
   286d8:	bne	28710 <flatcc_builder_extend_union_vector@@Base+0x6c>
   286dc:	str	r3, [r2, #20]
   286e0:	ldr	r5, [r4, #20]
   286e4:	add	r1, r5, r1, lsl #3
   286e8:	str	r1, [r4, #20]
   286ec:	ldr	r3, [r4, #24]
   286f0:	cmp	r1, r3
   286f4:	bcs	2872c <flatcc_builder_extend_union_vector@@Base+0x88>
   286f8:	ldr	r0, [r4, #16]
   286fc:	add	r0, r0, r5
   28700:	ldrd	r4, [sp]
   28704:	ldr	r6, [sp, #8]
   28708:	add	sp, sp, #12
   2870c:	pop	{pc}		; (ldr pc, [sp], #4)
   28710:	ldr	r3, [pc, #52]	; 2874c <flatcc_builder_extend_union_vector@@Base+0xa8>
   28714:	mov	r2, #892	; 0x37c
   28718:	movw	r1, #5868	; 0x16ec
   2871c:	movt	r1, #4
   28720:	movw	r0, #6152	; 0x1808
   28724:	movt	r0, #4
   28728:	bl	145f0 <__assert_fail@plt>
   2872c:	mvn	r2, #3
   28730:	add	r1, r1, #1
   28734:	mov	r0, r4
   28738:	bl	24fec <main@@Base+0x79c>
   2873c:	cmp	r0, #0
   28740:	movne	r0, #0
   28744:	beq	286f8 <flatcc_builder_extend_union_vector@@Base+0x54>
   28748:	b	28700 <flatcc_builder_extend_union_vector@@Base+0x5c>
   2874c:	andeq	r1, r4, ip, asr #5

00028750 <flatcc_builder_truncate_union_vector@@Base>:
   28750:	str	r4, [sp, #-8]!
   28754:	str	lr, [sp, #4]
   28758:	ldr	ip, [r0, #32]
   2875c:	ldrh	r3, [ip, #14]
   28760:	cmp	r3, #7
   28764:	bne	287b4 <flatcc_builder_truncate_union_vector@@Base+0x64>
   28768:	ldr	r3, [ip, #20]
   2876c:	cmp	r3, r1
   28770:	bcc	287d0 <flatcc_builder_truncate_union_vector@@Base+0x80>
   28774:	sub	r3, r3, r1
   28778:	str	r3, [ip, #20]
   2877c:	ldr	r3, [r0, #32]
   28780:	ldr	r2, [r3, #16]
   28784:	mul	r2, r2, r1
   28788:	ldr	r3, [r0, #20]
   2878c:	sub	r3, r3, r2
   28790:	str	r3, [r0, #20]
   28794:	ldr	r0, [r0, #16]
   28798:	mov	r1, #0
   2879c:	add	r0, r0, r3
   287a0:	bl	1459c <memset@plt>
   287a4:	mov	r0, #0
   287a8:	ldr	r4, [sp]
   287ac:	add	sp, sp, #4
   287b0:	pop	{pc}		; (ldr pc, [sp], #4)
   287b4:	ldr	r3, [pc, #48]	; 287ec <flatcc_builder_truncate_union_vector@@Base+0x9c>
   287b8:	movw	r2, #1665	; 0x681
   287bc:	movw	r1, #5868	; 0x16ec
   287c0:	movt	r1, #4
   287c4:	movw	r0, #6640	; 0x19f0
   287c8:	movt	r0, #4
   287cc:	bl	145f0 <__assert_fail@plt>
   287d0:	ldr	r3, [pc, #20]	; 287ec <flatcc_builder_truncate_union_vector@@Base+0x9c>
   287d4:	movw	r2, #1666	; 0x682
   287d8:	movw	r1, #5868	; 0x16ec
   287dc:	movt	r1, #4
   287e0:	movw	r0, #6420	; 0x1914
   287e4:	movt	r0, #4
   287e8:	bl	145f0 <__assert_fail@plt>
   287ec:	andeq	r1, r4, r4, lsl #11

000287f0 <flatcc_builder_union_vector_push@@Base>:
   287f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   287f4:	strd	r6, [sp, #8]
   287f8:	str	lr, [sp, #16]
   287fc:	sub	sp, sp, #12
   28800:	add	r3, sp, #8
   28804:	stmdb	r3, {r1, r2}
   28808:	ldr	r2, [r0, #32]
   2880c:	ldrh	r3, [r2, #14]
   28810:	cmp	r3, #7
   28814:	bne	28870 <flatcc_builder_union_vector_push@@Base+0x80>
   28818:	mov	r4, r0
   2881c:	ldr	r3, [r2, #20]
   28820:	cmn	r3, #-536870911	; 0xe0000001
   28824:	moveq	r0, #0
   28828:	beq	2885c <flatcc_builder_union_vector_push@@Base+0x6c>
   2882c:	add	r3, r3, #1
   28830:	str	r3, [r2, #20]
   28834:	ldr	r5, [r4, #20]
   28838:	add	r3, r5, #8
   2883c:	str	r3, [r4, #20]
   28840:	ldr	r2, [r4, #24]
   28844:	cmp	r3, r2
   28848:	bcs	2888c <flatcc_builder_union_vector_push@@Base+0x9c>
   2884c:	ldr	r3, [r4, #16]
   28850:	adds	r0, r3, r5
   28854:	ldrdne	r6, [sp]
   28858:	strdne	r6, [r3, r5]
   2885c:	add	sp, sp, #12
   28860:	ldrd	r4, [sp]
   28864:	ldrd	r6, [sp, #8]
   28868:	add	sp, sp, #16
   2886c:	pop	{pc}		; (ldr pc, [sp], #4)
   28870:	ldr	r3, [pc, #52]	; 288ac <flatcc_builder_union_vector_push@@Base+0xbc>
   28874:	movw	r2, #1677	; 0x68d
   28878:	movw	r1, #5868	; 0x16ec
   2887c:	movt	r1, #4
   28880:	movw	r0, #6640	; 0x19f0
   28884:	movt	r0, #4
   28888:	bl	145f0 <__assert_fail@plt>
   2888c:	mvn	r2, #3
   28890:	add	r1, r5, #9
   28894:	mov	r0, r4
   28898:	bl	24fec <main@@Base+0x79c>
   2889c:	cmp	r0, #0
   288a0:	movne	r0, #0
   288a4:	beq	2884c <flatcc_builder_union_vector_push@@Base+0x5c>
   288a8:	b	2885c <flatcc_builder_union_vector_push@@Base+0x6c>
   288ac:	andeq	r1, r4, ip, lsr #11

000288b0 <flatcc_builder_append_union_vector@@Base>:
   288b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   288b4:	strd	r6, [sp, #8]
   288b8:	str	r8, [sp, #16]
   288bc:	str	lr, [sp, #20]
   288c0:	mov	r6, r1
   288c4:	ldr	r1, [r0, #32]
   288c8:	ldrh	r3, [r1, #14]
   288cc:	cmp	r3, #7
   288d0:	bne	28950 <flatcc_builder_append_union_vector@@Base+0xa0>
   288d4:	mov	r5, r0
   288d8:	ldr	r3, [r1, #20]
   288dc:	adds	r3, r2, r3
   288e0:	movcs	ip, #1
   288e4:	movcc	ip, #0
   288e8:	cmn	r3, #-536870911	; 0xe0000001
   288ec:	movls	r0, #0
   288f0:	movhi	r0, #1
   288f4:	orrs	r0, ip, r0
   288f8:	bne	2896c <flatcc_builder_append_union_vector@@Base+0xbc>
   288fc:	str	r3, [r1, #20]
   28900:	lsl	r4, r2, #3
   28904:	ldr	r7, [r5, #20]
   28908:	add	r1, r4, r7
   2890c:	str	r1, [r5, #20]
   28910:	ldr	r3, [r5, #24]
   28914:	cmp	r1, r3
   28918:	bcs	28988 <flatcc_builder_append_union_vector@@Base+0xd8>
   2891c:	ldr	r5, [r5, #16]
   28920:	adds	r5, r5, r7
   28924:	beq	28938 <flatcc_builder_append_union_vector@@Base+0x88>
   28928:	mov	r2, r4
   2892c:	mov	r1, r6
   28930:	mov	r0, r5
   28934:	bl	14524 <memcpy@plt>
   28938:	mov	r0, r5
   2893c:	ldrd	r4, [sp]
   28940:	ldrd	r6, [sp, #8]
   28944:	ldr	r8, [sp, #16]
   28948:	add	sp, sp, #20
   2894c:	pop	{pc}		; (ldr pc, [sp], #4)
   28950:	ldr	r3, [pc, #80]	; 289a8 <flatcc_builder_append_union_vector@@Base+0xf8>
   28954:	movw	r2, #1692	; 0x69c
   28958:	movw	r1, #5868	; 0x16ec
   2895c:	movt	r1, #4
   28960:	movw	r0, #6640	; 0x19f0
   28964:	movt	r0, #4
   28968:	bl	145f0 <__assert_fail@plt>
   2896c:	ldr	r3, [pc, #56]	; 289ac <flatcc_builder_append_union_vector@@Base+0xfc>
   28970:	mov	r2, #892	; 0x37c
   28974:	movw	r1, #5868	; 0x16ec
   28978:	movt	r1, #4
   2897c:	movw	r0, #6152	; 0x1808
   28980:	movt	r0, #4
   28984:	bl	145f0 <__assert_fail@plt>
   28988:	mvn	r2, #3
   2898c:	add	r1, r1, #1
   28990:	mov	r0, r5
   28994:	bl	24fec <main@@Base+0x79c>
   28998:	cmp	r0, #0
   2899c:	movne	r5, #0
   289a0:	beq	2891c <flatcc_builder_append_union_vector@@Base+0x6c>
   289a4:	b	28938 <flatcc_builder_append_union_vector@@Base+0x88>
   289a8:	ldrdeq	r1, [r4], -r0
   289ac:	andeq	r1, r4, ip, asr #5

000289b0 <flatcc_builder_create_string@@Base>:
   289b0:	strd	r4, [sp, #-16]!
   289b4:	str	r6, [sp, #8]
   289b8:	str	lr, [sp, #12]
   289bc:	sub	sp, sp, #88	; 0x58
   289c0:	mov	r4, r0
   289c4:	str	r2, [sp, #84]	; 0x54
   289c8:	ldr	r0, [r0, #136]	; 0x88
   289cc:	sub	r3, r0, r2
   289d0:	sub	r3, r3, #1
   289d4:	and	r3, r3, #3
   289d8:	add	r3, r3, #1
   289dc:	mov	ip, #4
   289e0:	str	ip, [sp, #12]
   289e4:	add	lr, sp, #84	; 0x54
   289e8:	str	lr, [sp, #20]
   289ec:	str	ip, [sp, #24]
   289f0:	mov	ip, #1
   289f4:	str	ip, [sp, #16]
   289f8:	cmp	r2, #0
   289fc:	beq	28a18 <flatcc_builder_create_string@@Base+0x68>
   28a00:	add	ip, r2, #4
   28a04:	str	ip, [sp, #12]
   28a08:	str	r1, [sp, #28]
   28a0c:	str	r2, [sp, #32]
   28a10:	mov	r2, #2
   28a14:	str	r2, [sp, #16]
   28a18:	ldr	r1, [sp, #12]
   28a1c:	add	r1, r3, r1
   28a20:	str	r1, [sp, #12]
   28a24:	ldr	r2, [sp, #16]
   28a28:	add	r2, r2, #1
   28a2c:	add	ip, sp, #88	; 0x58
   28a30:	add	lr, ip, r2, lsl #3
   28a34:	movw	ip, #3996	; 0xf9c
   28a38:	movt	ip, #4
   28a3c:	str	ip, [lr, #-76]	; 0xffffffb4
   28a40:	str	r3, [lr, #-72]	; 0xffffffb8
   28a44:	str	r2, [sp, #16]
   28a48:	sub	r5, r0, r1
   28a4c:	cmp	r0, r5
   28a50:	ble	28a90 <flatcc_builder_create_string@@Base+0xe0>
   28a54:	str	r1, [sp]
   28a58:	ldr	r6, [r4, #44]	; 0x2c
   28a5c:	mov	r3, r5
   28a60:	add	r1, sp, #20
   28a64:	ldr	r0, [r4, #36]	; 0x24
   28a68:	blx	r6
   28a6c:	cmp	r0, #0
   28a70:	bne	28aac <flatcc_builder_create_string@@Base+0xfc>
   28a74:	str	r5, [r4, #136]	; 0x88
   28a78:	mov	r0, r5
   28a7c:	add	sp, sp, #88	; 0x58
   28a80:	ldrd	r4, [sp]
   28a84:	ldr	r6, [sp, #8]
   28a88:	add	sp, sp, #12
   28a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   28a90:	add	r3, ip, #588	; 0x24c
   28a94:	movw	r2, #647	; 0x287
   28a98:	movw	r1, #5868	; 0x16ec
   28a9c:	movt	r1, #4
   28aa0:	movw	r0, #5952	; 0x1740
   28aa4:	movt	r0, #4
   28aa8:	bl	145f0 <__assert_fail@plt>
   28aac:	ldr	r3, [pc, #20]	; 28ac8 <flatcc_builder_create_string@@Base+0x118>
   28ab0:	movw	r2, #651	; 0x28b
   28ab4:	movw	r1, #5868	; 0x16ec
   28ab8:	movt	r1, #4
   28abc:	movw	r0, #5952	; 0x1740
   28ac0:	movt	r0, #4
   28ac4:	bl	145f0 <__assert_fail@plt>
   28ac8:	andeq	r1, r4, r8, ror #3

00028acc <flatcc_builder_create_string_str@@Base>:
   28acc:	strd	r4, [sp, #-16]!
   28ad0:	str	r6, [sp, #8]
   28ad4:	str	lr, [sp, #12]
   28ad8:	mov	r5, r0
   28adc:	mov	r4, r1
   28ae0:	mov	r0, r1
   28ae4:	bl	14578 <strlen@plt>
   28ae8:	mov	r2, r0
   28aec:	mov	r1, r4
   28af0:	mov	r0, r5
   28af4:	bl	289b0 <flatcc_builder_create_string@@Base>
   28af8:	ldrd	r4, [sp]
   28afc:	ldr	r6, [sp, #8]
   28b00:	add	sp, sp, #12
   28b04:	pop	{pc}		; (ldr pc, [sp], #4)

00028b08 <flatcc_builder_create_string_strn@@Base>:
   28b08:	strd	r4, [sp, #-16]!
   28b0c:	str	r6, [sp, #8]
   28b10:	str	lr, [sp, #12]
   28b14:	mov	r6, r0
   28b18:	mov	r4, r1
   28b1c:	mov	r5, r2
   28b20:	mov	r1, #0
   28b24:	mov	r0, r4
   28b28:	bl	145c0 <memchr@plt>
   28b2c:	cmp	r0, #0
   28b30:	subne	r5, r0, r4
   28b34:	mov	r2, r5
   28b38:	mov	r1, r4
   28b3c:	mov	r0, r6
   28b40:	bl	289b0 <flatcc_builder_create_string@@Base>
   28b44:	ldrd	r4, [sp]
   28b48:	ldr	r6, [sp, #8]
   28b4c:	add	sp, sp, #12
   28b50:	pop	{pc}		; (ldr pc, [sp], #4)

00028b54 <flatcc_builder_end_string@@Base>:
   28b54:	strd	r4, [sp, #-16]!
   28b58:	str	r6, [sp, #8]
   28b5c:	str	lr, [sp, #12]
   28b60:	ldr	r3, [r0, #32]
   28b64:	ldrh	r2, [r3, #14]
   28b68:	cmp	r2, #6
   28b6c:	bne	28ba8 <flatcc_builder_end_string@@Base+0x54>
   28b70:	mov	r4, r0
   28b74:	ldr	r2, [r0, #20]
   28b78:	ldr	r3, [r3, #20]
   28b7c:	cmp	r3, r2
   28b80:	bne	28bc4 <flatcc_builder_end_string@@Base+0x70>
   28b84:	ldr	r1, [r0, #16]
   28b88:	bl	289b0 <flatcc_builder_create_string@@Base>
   28b8c:	subs	r5, r0, #0
   28b90:	bne	28be0 <flatcc_builder_end_string@@Base+0x8c>
   28b94:	mov	r0, r5
   28b98:	ldrd	r4, [sp]
   28b9c:	ldr	r6, [sp, #8]
   28ba0:	add	sp, sp, #12
   28ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   28ba8:	ldr	r3, [pc, #176]	; 28c60 <flatcc_builder_end_string@@Base+0x10c>
   28bac:	movw	r2, #1732	; 0x6c4
   28bb0:	movw	r1, #5868	; 0x16ec
   28bb4:	movt	r1, #4
   28bb8:	movw	r0, #6340	; 0x18c4
   28bbc:	movt	r0, #4
   28bc0:	bl	145f0 <__assert_fail@plt>
   28bc4:	ldr	r3, [pc, #148]	; 28c60 <flatcc_builder_end_string@@Base+0x10c>
   28bc8:	movw	r2, #1733	; 0x6c5
   28bcc:	movw	r1, #5868	; 0x16ec
   28bd0:	movt	r1, #4
   28bd4:	movw	r0, #6692	; 0x1a24
   28bd8:	movt	r0, #4
   28bdc:	bl	145f0 <__assert_fail@plt>
   28be0:	ldr	r2, [r4, #20]
   28be4:	mov	r1, #0
   28be8:	ldr	r0, [r4, #16]
   28bec:	bl	1459c <memset@plt>
   28bf0:	ldr	r2, [r4, #32]
   28bf4:	ldr	r3, [r2, #8]
   28bf8:	str	r3, [r4, #20]
   28bfc:	ldr	r0, [r2]
   28c00:	str	r0, [r4, #28]
   28c04:	ldr	r1, [r2, #4]
   28c08:	ldr	r3, [r4, #60]	; 0x3c
   28c0c:	add	r3, r3, r0
   28c10:	str	r3, [r4, #16]
   28c14:	ldr	r3, [r4, #64]	; 0x40
   28c18:	sub	r3, r3, r0
   28c1c:	cmp	r3, r1
   28c20:	movcs	r3, r1
   28c24:	str	r3, [r4, #24]
   28c28:	str	r1, [r2, #4]
   28c2c:	ldrh	r3, [r4, #130]	; 0x82
   28c30:	ldrh	r2, [r4, #128]	; 0x80
   28c34:	cmp	r2, r3
   28c38:	strhcc	r3, [r4, #128]	; 0x80
   28c3c:	ldr	r3, [r4, #32]
   28c40:	ldrh	r2, [r3, #12]
   28c44:	strh	r2, [r4, #130]	; 0x82
   28c48:	sub	r3, r3, #36	; 0x24
   28c4c:	str	r3, [r4, #32]
   28c50:	ldr	r3, [r4, #156]	; 0x9c
   28c54:	sub	r3, r3, #1
   28c58:	str	r3, [r4, #156]	; 0x9c
   28c5c:	b	28b94 <flatcc_builder_end_string@@Base+0x40>
   28c60:	strdeq	r1, [r4], -r4

00028c64 <flatcc_builder_string_edit@@Base>:
   28c64:	ldr	r0, [r0, #16]
   28c68:	bx	lr

00028c6c <flatcc_builder_string_len@@Base>:
   28c6c:	ldr	r3, [r0, #32]
   28c70:	ldr	r0, [r3, #20]
   28c74:	bx	lr

00028c78 <flatcc_builder_table_add@@Base>:
   28c78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28c7c:	strd	r6, [sp, #8]
   28c80:	str	r8, [sp, #16]
   28c84:	str	lr, [sp, #20]
   28c88:	mov	r5, r1
   28c8c:	ldr	r1, [r0, #32]
   28c90:	ldrh	r1, [r1, #14]
   28c94:	cmp	r1, #3
   28c98:	bne	28d58 <flatcc_builder_table_add@@Base+0xe0>
   28c9c:	mov	r4, r0
   28ca0:	movw	r1, #32764	; 0x7ffc
   28ca4:	cmp	r5, r1
   28ca8:	bhi	28d74 <flatcc_builder_table_add@@Base+0xfc>
   28cac:	ldrh	r1, [r0, #130]	; 0x82
   28cb0:	cmp	r1, r3
   28cb4:	strhcc	r3, [r0, #130]	; 0x82
   28cb8:	ldr	r0, [r0, #4]
   28cbc:	lsl	r1, r5, #1
   28cc0:	ldrh	r1, [r0, r1]
   28cc4:	cmp	r1, #0
   28cc8:	bne	28d90 <flatcc_builder_table_add@@Base+0x118>
   28ccc:	ldr	r0, [r4, #12]
   28cd0:	eor	r0, r0, r5
   28cd4:	movw	r1, #31153	; 0x79b1
   28cd8:	movt	r1, #40503	; 0x9e37
   28cdc:	mul	r0, r1, r0
   28ce0:	eor	r0, r0, r2
   28ce4:	mul	r0, r1, r0
   28ce8:	str	r0, [r4, #12]
   28cec:	uxth	r7, r5
   28cf0:	sub	r6, r3, #1
   28cf4:	ldr	r0, [r4, #20]
   28cf8:	add	r6, r6, r0
   28cfc:	rsb	r3, r3, #0
   28d00:	and	r6, r6, r3
   28d04:	add	r1, r2, r6
   28d08:	str	r1, [r4, #20]
   28d0c:	ldr	r3, [r4, #24]
   28d10:	cmp	r1, r3
   28d14:	bcs	28dac <flatcc_builder_table_add@@Base+0x134>
   28d18:	uxth	r5, r5
   28d1c:	ldr	r3, [r4, #4]
   28d20:	lsl	r5, r5, #1
   28d24:	add	r2, r6, #4
   28d28:	strh	r2, [r3, r5]
   28d2c:	ldrh	r3, [r4, #8]
   28d30:	cmp	r3, r7
   28d34:	addls	r7, r7, #1
   28d38:	strhls	r7, [r4, #8]
   28d3c:	ldr	r0, [r4, #16]
   28d40:	add	r0, r0, r6
   28d44:	ldrd	r4, [sp]
   28d48:	ldrd	r6, [sp, #8]
   28d4c:	ldr	r8, [sp, #16]
   28d50:	add	sp, sp, #20
   28d54:	pop	{pc}		; (ldr pc, [sp], #4)
   28d58:	ldr	r3, [pc, #108]	; 28dcc <flatcc_builder_table_add@@Base+0x154>
   28d5c:	movw	r2, #1773	; 0x6ed
   28d60:	movw	r1, #5868	; 0x16ec
   28d64:	movt	r1, #4
   28d68:	movw	r0, #6576	; 0x19b0
   28d6c:	movt	r0, #4
   28d70:	bl	145f0 <__assert_fail@plt>
   28d74:	ldr	r3, [pc, #80]	; 28dcc <flatcc_builder_table_add@@Base+0x154>
   28d78:	movw	r2, #1774	; 0x6ee
   28d7c:	movw	r1, #5868	; 0x16ec
   28d80:	movt	r1, #4
   28d84:	movw	r0, #6728	; 0x1a48
   28d88:	movt	r0, #4
   28d8c:	bl	145f0 <__assert_fail@plt>
   28d90:	ldr	r3, [pc, #52]	; 28dcc <flatcc_builder_table_add@@Base+0x154>
   28d94:	movw	r2, #1784	; 0x6f8
   28d98:	movw	r1, #5868	; 0x16ec
   28d9c:	movt	r1, #4
   28da0:	movw	r0, #5952	; 0x1740
   28da4:	movt	r0, #4
   28da8:	bl	145f0 <__assert_fail@plt>
   28dac:	movw	r2, #65532	; 0xfffc
   28db0:	add	r1, r1, #1
   28db4:	mov	r0, r4
   28db8:	bl	24fec <main@@Base+0x79c>
   28dbc:	cmp	r0, #0
   28dc0:	movne	r0, #0
   28dc4:	beq	28d18 <flatcc_builder_table_add@@Base+0xa0>
   28dc8:	b	28d44 <flatcc_builder_table_add@@Base+0xcc>
   28dcc:	andeq	r1, r4, r0, lsl r6

00028dd0 <flatcc_builder_table_edit@@Base>:
   28dd0:	ldr	r2, [r0, #32]
   28dd4:	ldrh	r2, [r2, #14]
   28dd8:	cmp	r2, #3
   28ddc:	bne	28df4 <flatcc_builder_table_edit@@Base+0x24>
   28de0:	ldr	r3, [r0, #20]
   28de4:	sub	r3, r3, r1
   28de8:	ldr	r0, [r0, #16]
   28dec:	add	r0, r0, r3
   28df0:	bx	lr
   28df4:	str	r4, [sp, #-8]!
   28df8:	str	lr, [sp, #4]
   28dfc:	ldr	r3, [pc, #20]	; 28e18 <flatcc_builder_table_edit@@Base+0x48>
   28e00:	movw	r2, #1794	; 0x702
   28e04:	movw	r1, #5868	; 0x16ec
   28e08:	movt	r1, #4
   28e0c:	movw	r0, #6576	; 0x19b0
   28e10:	movt	r0, #4
   28e14:	bl	145f0 <__assert_fail@plt>
   28e18:	andeq	r1, r4, ip, lsr #12

00028e1c <flatcc_builder_table_add_copy@@Base>:
   28e1c:	strd	r4, [sp, #-16]!
   28e20:	str	r6, [sp, #8]
   28e24:	str	lr, [sp, #12]
   28e28:	mov	r6, r2
   28e2c:	mov	r5, r3
   28e30:	ldrh	r3, [sp, #16]
   28e34:	mov	r2, r5
   28e38:	bl	28c78 <flatcc_builder_table_add@@Base>
   28e3c:	subs	r4, r0, #0
   28e40:	beq	28e54 <flatcc_builder_table_add_copy@@Base+0x38>
   28e44:	mov	r2, r5
   28e48:	mov	r1, r6
   28e4c:	mov	r0, r4
   28e50:	bl	14524 <memcpy@plt>
   28e54:	mov	r0, r4
   28e58:	ldrd	r4, [sp]
   28e5c:	ldr	r6, [sp, #8]
   28e60:	add	sp, sp, #12
   28e64:	pop	{pc}		; (ldr pc, [sp], #4)

00028e68 <flatcc_builder_table_add_offset@@Base>:
   28e68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28e6c:	strd	r6, [sp, #8]
   28e70:	str	r8, [sp, #16]
   28e74:	str	lr, [sp, #20]
   28e78:	ldr	r3, [r0, #32]
   28e7c:	ldrh	r3, [r3, #14]
   28e80:	cmp	r3, #3
   28e84:	bne	28f48 <flatcc_builder_table_add_offset@@Base+0xe0>
   28e88:	mov	r4, r0
   28e8c:	mov	r5, r1
   28e90:	movw	r3, #32764	; 0x7ffc
   28e94:	cmp	r1, r3
   28e98:	bhi	28f64 <flatcc_builder_table_add_offset@@Base+0xfc>
   28e9c:	ldr	r2, [r0, #4]
   28ea0:	lsl	r3, r1, #1
   28ea4:	ldrh	r3, [r2, r3]
   28ea8:	cmp	r3, #0
   28eac:	bne	28f80 <flatcc_builder_table_add_offset@@Base+0x118>
   28eb0:	ldr	r3, [r0, #12]
   28eb4:	eor	r3, r3, r1
   28eb8:	movw	r2, #31153	; 0x79b1
   28ebc:	movt	r2, #40503	; 0x9e37
   28ec0:	mul	r3, r2, r3
   28ec4:	eor	r3, r3, #4
   28ec8:	mul	r3, r2, r3
   28ecc:	str	r3, [r0, #12]
   28ed0:	uxth	r7, r1
   28ed4:	ldr	r6, [r0, #20]
   28ed8:	add	r6, r6, #3
   28edc:	bic	r6, r6, #3
   28ee0:	add	r1, r6, #4
   28ee4:	str	r1, [r0, #20]
   28ee8:	ldr	r3, [r0, #24]
   28eec:	cmp	r1, r3
   28ef0:	bhi	28f9c <flatcc_builder_table_add_offset@@Base+0x134>
   28ef4:	uxth	r2, r6
   28ef8:	uxth	r5, r5
   28efc:	ldr	r3, [r4, #4]
   28f00:	lsl	r5, r5, #1
   28f04:	add	r1, r2, #4
   28f08:	strh	r1, [r3, r5]
   28f0c:	ldrh	r3, [r4, #8]
   28f10:	cmp	r3, r7
   28f14:	addls	r7, r7, #1
   28f18:	strhls	r7, [r4, #8]
   28f1c:	ldr	r3, [r4]
   28f20:	add	r1, r3, #2
   28f24:	str	r1, [r4]
   28f28:	strh	r2, [r3]
   28f2c:	ldr	r0, [r4, #16]
   28f30:	add	r0, r0, r6
   28f34:	ldrd	r4, [sp]
   28f38:	ldrd	r6, [sp, #8]
   28f3c:	ldr	r8, [sp, #16]
   28f40:	add	sp, sp, #20
   28f44:	pop	{pc}		; (ldr pc, [sp], #4)
   28f48:	ldr	r3, [pc, #100]	; 28fb4 <flatcc_builder_table_add_offset@@Base+0x14c>
   28f4c:	movw	r2, #1811	; 0x713
   28f50:	movw	r1, #5868	; 0x16ec
   28f54:	movt	r1, #4
   28f58:	movw	r0, #6576	; 0x19b0
   28f5c:	movt	r0, #4
   28f60:	bl	145f0 <__assert_fail@plt>
   28f64:	ldr	r3, [pc, #72]	; 28fb4 <flatcc_builder_table_add_offset@@Base+0x14c>
   28f68:	movw	r2, #1812	; 0x714
   28f6c:	movw	r1, #5868	; 0x16ec
   28f70:	movt	r1, #4
   28f74:	movw	r0, #6728	; 0x1a48
   28f78:	movt	r0, #4
   28f7c:	bl	145f0 <__assert_fail@plt>
   28f80:	ldr	r3, [pc, #44]	; 28fb4 <flatcc_builder_table_add_offset@@Base+0x14c>
   28f84:	movw	r2, #1819	; 0x71b
   28f88:	movw	r1, #5868	; 0x16ec
   28f8c:	movt	r1, #4
   28f90:	movw	r0, #5952	; 0x1740
   28f94:	movt	r0, #4
   28f98:	bl	145f0 <__assert_fail@plt>
   28f9c:	movw	r2, #65532	; 0xfffc
   28fa0:	bl	24fec <main@@Base+0x79c>
   28fa4:	cmp	r0, #0
   28fa8:	movne	r0, #0
   28fac:	beq	28ef4 <flatcc_builder_table_add_offset@@Base+0x8c>
   28fb0:	b	28f34 <flatcc_builder_table_add_offset@@Base+0xcc>
   28fb4:	andeq	r1, r4, r8, asr #12

00028fb8 <flatcc_builder_table_add_union@@Base>:
   28fb8:	strd	r4, [sp, #-20]!	; 0xffffffec
   28fbc:	strd	r6, [sp, #8]
   28fc0:	str	lr, [sp, #16]
   28fc4:	sub	sp, sp, #12
   28fc8:	mov	r7, r1
   28fcc:	add	r1, sp, #8
   28fd0:	stmdb	r1, {r2, r3}
   28fd4:	ldrb	r6, [sp]
   28fd8:	ldr	r5, [sp, #4]
   28fdc:	ldr	r3, [r0, #32]
   28fe0:	ldrh	r3, [r3, #14]
   28fe4:	cmp	r3, #3
   28fe8:	bne	2905c <flatcc_builder_table_add_union@@Base+0xa4>
   28fec:	mov	r4, r0
   28ff0:	clz	r3, r6
   28ff4:	lsr	r3, r3, #5
   28ff8:	cmp	r5, #0
   28ffc:	moveq	r3, #0
   29000:	cmp	r3, #0
   29004:	bne	29078 <flatcc_builder_table_add_union@@Base+0xc0>
   29008:	cmp	r5, #0
   2900c:	beq	29024 <flatcc_builder_table_add_union@@Base+0x6c>
   29010:	mov	r1, r7
   29014:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   29018:	cmp	r0, #0
   2901c:	strne	r5, [r0]
   29020:	beq	29094 <flatcc_builder_table_add_union@@Base+0xdc>
   29024:	mov	r3, #1
   29028:	mov	r2, r3
   2902c:	sub	r1, r7, #1
   29030:	mov	r0, r4
   29034:	bl	28c78 <flatcc_builder_table_add@@Base>
   29038:	cmp	r0, #0
   2903c:	beq	290b0 <flatcc_builder_table_add_union@@Base+0xf8>
   29040:	strb	r6, [r0]
   29044:	mov	r0, #0
   29048:	add	sp, sp, #12
   2904c:	ldrd	r4, [sp]
   29050:	ldrd	r6, [sp, #8]
   29054:	add	sp, sp, #16
   29058:	pop	{pc}		; (ldr pc, [sp], #4)
   2905c:	ldr	r3, [pc, #104]	; 290cc <flatcc_builder_table_add_union@@Base+0x114>
   29060:	movw	r2, #1518	; 0x5ee
   29064:	movw	r1, #5868	; 0x16ec
   29068:	movt	r1, #4
   2906c:	movw	r0, #6576	; 0x19b0
   29070:	movt	r0, #4
   29074:	bl	145f0 <__assert_fail@plt>
   29078:	ldr	r3, [pc, #76]	; 290cc <flatcc_builder_table_add_union@@Base+0x114>
   2907c:	movw	r2, #1519	; 0x5ef
   29080:	movw	r1, #5868	; 0x16ec
   29084:	movt	r1, #4
   29088:	movw	r0, #6796	; 0x1a8c
   2908c:	movt	r0, #4
   29090:	bl	145f0 <__assert_fail@plt>
   29094:	ldr	r3, [pc, #48]	; 290cc <flatcc_builder_table_add_union@@Base+0x114>
   29098:	movw	r2, #1522	; 0x5f2
   2909c:	movw	r1, #5868	; 0x16ec
   290a0:	movt	r1, #4
   290a4:	movw	r0, #6832	; 0x1ab0
   290a8:	movt	r0, #4
   290ac:	bl	145f0 <__assert_fail@plt>
   290b0:	ldr	r3, [pc, #20]	; 290cc <flatcc_builder_table_add_union@@Base+0x114>
   290b4:	movw	r2, #1526	; 0x5f6
   290b8:	movw	r1, #5868	; 0x16ec
   290bc:	movt	r1, #4
   290c0:	movw	r0, #6844	; 0x1abc
   290c4:	movt	r0, #4
   290c8:	bl	145f0 <__assert_fail@plt>
   290cc:	andeq	r1, r4, r8, ror #12

000290d0 <flatcc_builder_table_add_union_vector@@Base>:
   290d0:	strd	r4, [sp, #-20]!	; 0xffffffec
   290d4:	strd	r6, [sp, #8]
   290d8:	str	lr, [sp, #16]
   290dc:	sub	sp, sp, #12
   290e0:	mov	r7, r1
   290e4:	add	r1, sp, #8
   290e8:	stmdb	r1, {r2, r3}
   290ec:	ldr	r4, [sp]
   290f0:	ldr	r6, [sp, #4]
   290f4:	ldr	r3, [r0, #32]
   290f8:	ldrh	r3, [r3, #14]
   290fc:	cmp	r3, #3
   29100:	bne	2914c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   29104:	mov	r5, r0
   29108:	clz	r3, r6
   2910c:	lsr	r3, r3, #5
   29110:	clz	r2, r4
   29114:	lsr	r2, r2, #5
   29118:	cmp	r2, r3
   2911c:	beq	29184 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   29120:	adds	r4, r4, #0
   29124:	movne	r4, #1
   29128:	cmp	r4, r3
   2912c:	mvnne	r4, #0
   29130:	beq	29168 <flatcc_builder_table_add_union_vector@@Base+0x98>
   29134:	mov	r0, r4
   29138:	add	sp, sp, #12
   2913c:	ldrd	r4, [sp]
   29140:	ldrd	r6, [sp, #8]
   29144:	add	sp, sp, #16
   29148:	pop	{pc}		; (ldr pc, [sp], #4)
   2914c:	ldr	r3, [pc, #160]	; 291f4 <flatcc_builder_table_add_union_vector@@Base+0x124>
   29150:	mov	r2, #1536	; 0x600
   29154:	movw	r1, #5868	; 0x16ec
   29158:	movt	r1, #4
   2915c:	movw	r0, #6576	; 0x19b0
   29160:	movt	r0, #4
   29164:	bl	145f0 <__assert_fail@plt>
   29168:	ldr	r3, [pc, #132]	; 291f4 <flatcc_builder_table_add_union_vector@@Base+0x124>
   2916c:	movw	r2, #1537	; 0x601
   29170:	movw	r1, #5868	; 0x16ec
   29174:	movt	r1, #4
   29178:	movw	r0, #6856	; 0x1ac8
   2917c:	movt	r0, #4
   29180:	bl	145f0 <__assert_fail@plt>
   29184:	cmp	r4, #0
   29188:	beq	29134 <flatcc_builder_table_add_union_vector@@Base+0x64>
   2918c:	sub	r1, r7, #1
   29190:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   29194:	cmp	r0, #0
   29198:	beq	291d8 <flatcc_builder_table_add_union_vector@@Base+0x108>
   2919c:	str	r4, [r0]
   291a0:	mov	r1, r7
   291a4:	mov	r0, r5
   291a8:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   291ac:	cmp	r0, #0
   291b0:	strne	r6, [r0]
   291b4:	movne	r4, #0
   291b8:	bne	29134 <flatcc_builder_table_add_union_vector@@Base+0x64>
   291bc:	ldr	r3, [pc, #48]	; 291f4 <flatcc_builder_table_add_union_vector@@Base+0x124>
   291c0:	movw	r2, #1544	; 0x608
   291c4:	movw	r1, #5868	; 0x16ec
   291c8:	movt	r1, #4
   291cc:	movw	r0, #6832	; 0x1ab0
   291d0:	movt	r0, #4
   291d4:	bl	145f0 <__assert_fail@plt>
   291d8:	ldr	r3, [pc, #20]	; 291f4 <flatcc_builder_table_add_union_vector@@Base+0x124>
   291dc:	movw	r2, #1540	; 0x604
   291e0:	movw	r1, #5868	; 0x16ec
   291e4:	movt	r1, #4
   291e8:	movw	r0, #6832	; 0x1ab0
   291ec:	movt	r0, #4
   291f0:	bl	145f0 <__assert_fail@plt>
   291f4:	andeq	r1, r4, r8, lsl #13

000291f8 <flatcc_builder_push_buffer_alignment@@Base>:
   291f8:	mov	r3, r0
   291fc:	ldrh	r0, [r0, #128]	; 0x80
   29200:	mov	r2, #4
   29204:	strh	r2, [r3, #128]	; 0x80
   29208:	bx	lr

0002920c <flatcc_builder_pop_buffer_alignment@@Base>:
   2920c:	ldrh	r3, [r0, #128]	; 0x80
   29210:	cmp	r3, r1
   29214:	strhcc	r1, [r0, #128]	; 0x80
   29218:	bx	lr

0002921c <flatcc_builder_get_buffer_alignment@@Base>:
   2921c:	ldrh	r0, [r0, #128]	; 0x80
   29220:	bx	lr

00029224 <flatcc_builder_set_vtable_clustering@@Base>:
   29224:	clz	r1, r1
   29228:	lsr	r1, r1, #5
   2922c:	str	r1, [r0, #180]	; 0xb4
   29230:	bx	lr

00029234 <flatcc_builder_set_block_align@@Base>:
   29234:	strh	r1, [r0, #132]	; 0x84
   29238:	bx	lr

0002923c <flatcc_builder_get_level@@Base>:
   2923c:	ldr	r0, [r0, #156]	; 0x9c
   29240:	bx	lr

00029244 <flatcc_builder_set_max_level@@Base>:
   29244:	str	r1, [r0, #176]	; 0xb0
   29248:	ldr	r3, [r0, #160]	; 0xa0
   2924c:	cmp	r3, r1
   29250:	strlt	r1, [r0, #160]	; 0xa0
   29254:	bx	lr

00029258 <flatcc_builder_get_buffer_size@@Base>:
   29258:	ldr	r2, [r0, #140]	; 0x8c
   2925c:	ldr	r0, [r0, #136]	; 0x88
   29260:	sub	r0, r2, r0
   29264:	bx	lr

00029268 <flatcc_builder_get_buffer_start@@Base>:
   29268:	ldr	r0, [r0, #136]	; 0x88
   2926c:	bx	lr

00029270 <flatcc_builder_get_buffer_end@@Base>:
   29270:	ldr	r0, [r0, #140]	; 0x8c
   29274:	bx	lr

00029278 <flatcc_builder_set_vtable_cache_limit@@Base>:
   29278:	str	r1, [r0, #172]	; 0xac
   2927c:	bx	lr

00029280 <flatcc_builder_set_identifier@@Base>:
   29280:	movw	r3, #3996	; 0xf9c
   29284:	movt	r3, #4
   29288:	cmp	r1, #0
   2928c:	moveq	r1, r3
   29290:	ldr	r3, [r1]
   29294:	str	r3, [r0, #168]	; 0xa8
   29298:	bx	lr

0002929c <flatcc_builder_get_type@@Base>:
   2929c:	ldr	r3, [r0, #32]
   292a0:	cmp	r3, #0
   292a4:	ldrhne	r0, [r3, #14]
   292a8:	moveq	r0, #0
   292ac:	bx	lr

000292b0 <flatcc_builder_get_type_at@@Base>:
   292b0:	cmp	r1, #0
   292b4:	ble	292dc <flatcc_builder_get_type_at@@Base+0x2c>
   292b8:	ldr	r3, [r0, #156]	; 0x9c
   292bc:	cmp	r3, r1
   292c0:	blt	292e4 <flatcc_builder_get_type_at@@Base+0x34>
   292c4:	sub	r1, r1, r3
   292c8:	ldr	r3, [r0, #32]
   292cc:	add	r1, r1, r1, lsl #3
   292d0:	add	r1, r3, r1, lsl #2
   292d4:	ldrh	r0, [r1, #14]
   292d8:	bx	lr
   292dc:	mov	r0, #0
   292e0:	bx	lr
   292e4:	mov	r0, #0
   292e8:	bx	lr

000292ec <flatcc_builder_get_direct_buffer@@Base>:
   292ec:	ldr	r3, [r0, #184]	; 0xb8
   292f0:	cmp	r3, #0
   292f4:	bne	2930c <flatcc_builder_get_direct_buffer@@Base+0x20>
   292f8:	cmp	r1, #0
   292fc:	beq	2934c <flatcc_builder_get_direct_buffer@@Base+0x60>
   29300:	mov	r0, #0
   29304:	str	r0, [r1]
   29308:	bx	lr
   2930c:	ldr	r2, [r0, #188]	; 0xbc
   29310:	ldr	r3, [r0, #192]	; 0xc0
   29314:	cmp	r2, r3
   29318:	beq	29330 <flatcc_builder_get_direct_buffer@@Base+0x44>
   2931c:	cmp	r1, #0
   29320:	beq	29344 <flatcc_builder_get_direct_buffer@@Base+0x58>
   29324:	mov	r0, #0
   29328:	str	r0, [r1]
   2932c:	bx	lr
   29330:	cmp	r1, #0
   29334:	ldrne	r3, [r0, #212]	; 0xd4
   29338:	strne	r3, [r1]
   2933c:	ldr	r0, [r0, #196]	; 0xc4
   29340:	bx	lr
   29344:	mov	r0, r1
   29348:	bx	lr
   2934c:	mov	r0, r1
   29350:	bx	lr

00029354 <flatcc_builder_copy_buffer@@Base>:
   29354:	ldr	r3, [r0, #184]	; 0xb8
   29358:	cmp	r3, #0
   2935c:	beq	293a0 <flatcc_builder_copy_buffer@@Base+0x4c>
   29360:	str	r4, [sp, #-8]!
   29364:	str	lr, [sp, #4]
   29368:	add	r0, r0, #188	; 0xbc
   2936c:	bl	29b10 <flatcc_emitter_copy_buffer@@Base>
   29370:	cmp	r0, #0
   29374:	beq	29384 <flatcc_builder_copy_buffer@@Base+0x30>
   29378:	ldr	r4, [sp]
   2937c:	add	sp, sp, #4
   29380:	pop	{pc}		; (ldr pc, [sp], #4)
   29384:	ldr	r3, [pc, #28]	; 293a8 <flatcc_builder_copy_buffer@@Base+0x54>
   29388:	movw	r2, #1926	; 0x786
   2938c:	movw	r1, #5868	; 0x16ec
   29390:	movt	r1, #4
   29394:	movw	r0, #6896	; 0x1af0
   29398:	movt	r0, #4
   2939c:	bl	145f0 <__assert_fail@plt>
   293a0:	mov	r0, #0
   293a4:	bx	lr
   293a8:			; <UNDEFINED> instruction: 0x000416b0

000293ac <flatcc_builder_finalize_buffer@@Base>:
   293ac:	strd	r4, [sp, #-16]!
   293b0:	str	r6, [sp, #8]
   293b4:	str	lr, [sp, #12]
   293b8:	mov	r5, r0
   293bc:	ldr	r4, [r0, #140]	; 0x8c
   293c0:	ldr	r3, [r0, #136]	; 0x88
   293c4:	sub	r4, r4, r3
   293c8:	cmp	r1, #0
   293cc:	strne	r4, [r1]
   293d0:	mov	r0, r4
   293d4:	bl	14554 <malloc@plt>
   293d8:	subs	r6, r0, #0
   293dc:	beq	2940c <flatcc_builder_finalize_buffer@@Base+0x60>
   293e0:	mov	r2, r4
   293e4:	mov	r1, r6
   293e8:	mov	r0, r5
   293ec:	bl	29354 <flatcc_builder_copy_buffer@@Base>
   293f0:	cmp	r0, #0
   293f4:	beq	29428 <flatcc_builder_finalize_buffer@@Base+0x7c>
   293f8:	mov	r0, r6
   293fc:	ldrd	r4, [sp]
   29400:	ldr	r6, [sp, #8]
   29404:	add	sp, sp, #12
   29408:	pop	{pc}		; (ldr pc, [sp], #4)
   2940c:	ldr	r3, [pc, #48]	; 29444 <flatcc_builder_finalize_buffer@@Base+0x98>
   29410:	movw	r2, #1944	; 0x798
   29414:	movw	r1, #5868	; 0x16ec
   29418:	movt	r1, #4
   2941c:	movw	r0, #5952	; 0x1740
   29420:	movt	r0, #4
   29424:	bl	145f0 <__assert_fail@plt>
   29428:	ldr	r3, [pc, #20]	; 29444 <flatcc_builder_finalize_buffer@@Base+0x98>
   2942c:	movw	r2, #1948	; 0x79c
   29430:	movw	r1, #5868	; 0x16ec
   29434:	movt	r1, #4
   29438:	movw	r0, #5952	; 0x1740
   2943c:	movt	r0, #4
   29440:	bl	145f0 <__assert_fail@plt>
   29444:	andeq	r1, r4, ip, asr #13

00029448 <flatcc_builder_finalize_aligned_buffer@@Base>:
   29448:	strd	r4, [sp, #-20]!	; 0xffffffec
   2944c:	strd	r6, [sp, #8]
   29450:	str	lr, [sp, #16]
   29454:	sub	sp, sp, #12
   29458:	mov	r7, r0
   2945c:	ldr	r4, [r0, #140]	; 0x8c
   29460:	ldr	r3, [r0, #136]	; 0x88
   29464:	sub	r3, r4, r3
   29468:	subs	r6, r1, #0
   2946c:	strne	r3, [r6]
   29470:	ldrh	r1, [r0, #128]	; 0x80
   29474:	sub	r4, r1, #1
   29478:	add	r4, r4, r3
   2947c:	rsb	r3, r1, #0
   29480:	and	r4, r4, r3
   29484:	mov	r3, #0
   29488:	str	r3, [sp, #4]
   2948c:	mov	r2, r4
   29490:	cmp	r1, #4
   29494:	movcc	r1, #4
   29498:	add	r0, sp, #4
   2949c:	bl	14590 <posix_memalign@plt>
   294a0:	cmp	r0, #0
   294a4:	beq	294cc <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   294a8:	ldr	r0, [sp, #4]
   294ac:	cmp	r0, #0
   294b0:	beq	294b8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   294b4:	bl	14518 <free@plt>
   294b8:	cmp	r6, #0
   294bc:	movne	r5, #0
   294c0:	strne	r5, [r6]
   294c4:	moveq	r5, r6
   294c8:	b	294f0 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   294cc:	ldr	r5, [sp, #4]
   294d0:	cmp	r5, #0
   294d4:	beq	294b8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   294d8:	mov	r2, r4
   294dc:	mov	r1, r5
   294e0:	mov	r0, r7
   294e4:	bl	29354 <flatcc_builder_copy_buffer@@Base>
   294e8:	cmp	r0, #0
   294ec:	beq	29508 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   294f0:	mov	r0, r5
   294f4:	add	sp, sp, #12
   294f8:	ldrd	r4, [sp]
   294fc:	ldrd	r6, [sp, #8]
   29500:	add	sp, sp, #16
   29504:	pop	{pc}		; (ldr pc, [sp], #4)
   29508:	mov	r0, r5
   2950c:	bl	14518 <free@plt>
   29510:	b	294b8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

00029514 <flatcc_builder_aligned_alloc@@Base>:
   29514:	push	{lr}		; (str lr, [sp, #-4]!)
   29518:	sub	sp, sp, #12
   2951c:	mov	r3, #0
   29520:	str	r3, [sp, #4]
   29524:	mov	r2, r1
   29528:	cmp	r0, #4
   2952c:	movcs	r1, r0
   29530:	movcc	r1, #4
   29534:	add	r0, sp, #4
   29538:	bl	14590 <posix_memalign@plt>
   2953c:	cmp	r0, #0
   29540:	beq	2955c <flatcc_builder_aligned_alloc@@Base+0x48>
   29544:	ldr	r0, [sp, #4]
   29548:	cmp	r0, #0
   2954c:	beq	2955c <flatcc_builder_aligned_alloc@@Base+0x48>
   29550:	bl	14518 <free@plt>
   29554:	mov	r3, #0
   29558:	str	r3, [sp, #4]
   2955c:	ldr	r0, [sp, #4]
   29560:	add	sp, sp, #12
   29564:	pop	{pc}		; (ldr pc, [sp], #4)

00029568 <flatcc_builder_aligned_free@@Base>:
   29568:	str	r4, [sp, #-8]!
   2956c:	str	lr, [sp, #4]
   29570:	bl	14518 <free@plt>
   29574:	ldr	r4, [sp]
   29578:	add	sp, sp, #4
   2957c:	pop	{pc}		; (ldr pc, [sp], #4)

00029580 <flatcc_builder_get_emit_context@@Base>:
   29580:	ldr	r0, [r0, #36]	; 0x24
   29584:	bx	lr

00029588 <flatcc_emitter_recycle_page@@Base>:
   29588:	ldr	r3, [r0]
   2958c:	cmp	r3, r1
   29590:	beq	295dc <flatcc_emitter_recycle_page@@Base+0x54>
   29594:	ldr	r3, [r0, #4]
   29598:	cmp	r3, r1
   2959c:	beq	295e4 <flatcc_emitter_recycle_page@@Base+0x5c>
   295a0:	ldr	r2, [r1, #2944]	; 0xb80
   295a4:	ldr	r3, [r1, #2948]	; 0xb84
   295a8:	str	r3, [r2, #2948]	; 0xb84
   295ac:	ldr	r2, [r1, #2944]	; 0xb80
   295b0:	str	r2, [r3, #2944]	; 0xb80
   295b4:	ldr	r3, [r0]
   295b8:	ldr	r3, [r3, #2948]	; 0xb84
   295bc:	str	r3, [r1, #2948]	; 0xb84
   295c0:	ldr	r2, [r0]
   295c4:	str	r2, [r1, #2944]	; 0xb80
   295c8:	str	r1, [r3, #2944]	; 0xb80
   295cc:	ldr	r3, [r1, #2944]	; 0xb80
   295d0:	str	r1, [r3, #2948]	; 0xb84
   295d4:	mov	r0, #0
   295d8:	bx	lr
   295dc:	mvn	r0, #0
   295e0:	bx	lr
   295e4:	mvn	r0, #0
   295e8:	bx	lr

000295ec <flatcc_emitter_reset@@Base>:
   295ec:	ldr	r3, [r0]
   295f0:	cmp	r3, #0
   295f4:	bxeq	lr
   295f8:	str	r3, [r0, #4]
   295fc:	add	r2, r3, #1472	; 0x5c0
   29600:	str	r2, [r0, #8]
   29604:	str	r2, [r0, #16]
   29608:	mov	r2, #1472	; 0x5c0
   2960c:	str	r2, [r0, #12]
   29610:	str	r2, [r0, #20]
   29614:	movw	r2, #64064	; 0xfa40
   29618:	movt	r2, #65535	; 0xffff
   2961c:	str	r2, [r3, #2952]	; 0xb88
   29620:	ldr	r3, [r0, #32]
   29624:	cmp	r3, #0
   29628:	ldreq	r3, [r0, #24]
   2962c:	streq	r3, [r0, #32]
   29630:	ldr	r3, [r0, #32]
   29634:	add	r2, r3, r3, lsl #1
   29638:	ldr	r3, [r0, #24]
   2963c:	lsr	r3, r3, #2
   29640:	add	r3, r3, r2, lsr #2
   29644:	str	r3, [r0, #32]
   29648:	mov	r2, #0
   2964c:	str	r2, [r0, #24]
   29650:	ldr	r2, [r0, #28]
   29654:	cmp	r2, r3, lsl #1
   29658:	bxls	lr
   2965c:	str	r4, [sp, #-8]!
   29660:	str	lr, [sp, #4]
   29664:	mov	r4, r0
   29668:	ldr	r3, [r0, #4]
   2966c:	ldr	r0, [r3, #2944]	; 0xb80
   29670:	ldr	r2, [r4]
   29674:	cmp	r0, r2
   29678:	beq	296bc <flatcc_emitter_reset@@Base+0xd0>
   2967c:	ldr	r2, [r0, #2944]	; 0xb80
   29680:	str	r2, [r3, #2944]	; 0xb80
   29684:	ldr	r3, [r4, #4]
   29688:	str	r3, [r2, #2948]	; 0xb84
   2968c:	bl	14518 <free@plt>
   29690:	ldr	r3, [r4, #28]
   29694:	sub	r3, r3, #2944	; 0xb80
   29698:	str	r3, [r4, #28]
   2969c:	ldr	r2, [r4, #32]
   296a0:	cmp	r3, r2, lsl #1
   296a4:	bls	296bc <flatcc_emitter_reset@@Base+0xd0>
   296a8:	ldr	r3, [r4, #4]
   296ac:	ldr	r0, [r3, #2944]	; 0xb80
   296b0:	ldr	r2, [r4]
   296b4:	cmp	r0, r2
   296b8:	bne	2967c <flatcc_emitter_reset@@Base+0x90>
   296bc:	ldr	r4, [sp]
   296c0:	add	sp, sp, #4
   296c4:	pop	{pc}		; (ldr pc, [sp], #4)

000296c8 <flatcc_emitter_clear@@Base>:
   296c8:	ldr	r3, [r0]
   296cc:	cmp	r3, #0
   296d0:	bxeq	lr
   296d4:	strd	r4, [sp, #-16]!
   296d8:	str	r6, [sp, #8]
   296dc:	str	lr, [sp, #12]
   296e0:	mov	r5, r0
   296e4:	ldr	r2, [r3, #2948]	; 0xb84
   296e8:	mov	r1, #0
   296ec:	str	r1, [r2, #2944]	; 0xb80
   296f0:	ldr	r4, [r3, #2944]	; 0xb80
   296f4:	cmp	r4, r1
   296f8:	bne	29708 <flatcc_emitter_clear@@Base+0x40>
   296fc:	mov	r4, r3
   29700:	b	2971c <flatcc_emitter_clear@@Base+0x54>
   29704:	mov	r4, r3
   29708:	ldr	r0, [r4, #2948]	; 0xb84
   2970c:	bl	14518 <free@plt>
   29710:	ldr	r3, [r4, #2944]	; 0xb80
   29714:	cmp	r3, #0
   29718:	bne	29704 <flatcc_emitter_clear@@Base+0x3c>
   2971c:	mov	r0, r4
   29720:	bl	14518 <free@plt>
   29724:	mov	r2, #36	; 0x24
   29728:	mov	r1, #0
   2972c:	mov	r0, r5
   29730:	bl	1459c <memset@plt>
   29734:	ldrd	r4, [sp]
   29738:	ldr	r6, [sp, #8]
   2973c:	add	sp, sp, #12
   29740:	pop	{pc}		; (ldr pc, [sp], #4)

00029744 <flatcc_emitter@@Base>:
   29744:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29748:	strd	r6, [sp, #8]
   2974c:	strd	r8, [sp, #16]
   29750:	strd	sl, [sp, #24]
   29754:	str	lr, [sp, #32]
   29758:	sub	sp, sp, #4
   2975c:	mov	r4, r0
   29760:	ldr	ip, [sp, #40]	; 0x28
   29764:	ldr	r0, [r0, #24]
   29768:	add	r0, r0, ip
   2976c:	str	r0, [r4, #24]
   29770:	cmp	r3, #0
   29774:	blt	297a4 <flatcc_emitter@@Base+0x60>
   29778:	ldr	r3, [r4, #20]
   2977c:	cmp	r3, ip
   29780:	bcs	2988c <flatcc_emitter@@Base+0x148>
   29784:	cmp	r2, #0
   29788:	moveq	r0, r2
   2978c:	beq	2998c <flatcc_emitter@@Base+0x248>
   29790:	add	r5, r1, #8
   29794:	mov	r8, r2
   29798:	movw	fp, #64064	; 0xfa40
   2979c:	movt	fp, #65535	; 0xffff
   297a0:	b	299e8 <flatcc_emitter@@Base+0x2a4>
   297a4:	ldr	r3, [r4, #12]
   297a8:	cmp	r3, ip
   297ac:	bcs	297c4 <flatcc_emitter@@Base+0x80>
   297b0:	add	r5, r1, r2, lsl #3
   297b4:	sub	r8, r2, #1
   297b8:	movw	fp, #64064	; 0xfa40
   297bc:	movt	fp, #65535	; 0xffff
   297c0:	b	299b8 <flatcc_emitter@@Base+0x274>
   297c4:	ldr	r6, [r4, #8]
   297c8:	sub	r6, r6, ip
   297cc:	str	r6, [r4, #8]
   297d0:	sub	ip, r3, ip
   297d4:	str	ip, [r4, #12]
   297d8:	b	298a0 <flatcc_emitter@@Base+0x15c>
   297dc:	mov	r2, r6
   297e0:	rsb	r1, r2, #0
   297e4:	ldr	r0, [r4, #8]
   297e8:	add	r0, r0, r1
   297ec:	str	r0, [r4, #8]
   297f0:	sub	r3, r3, r2
   297f4:	str	r3, [r4, #12]
   297f8:	add	r9, r9, r1
   297fc:	sub	r6, r6, r2
   29800:	mov	r1, r9
   29804:	bl	14524 <memcpy@plt>
   29808:	cmp	r6, #0
   2980c:	beq	299b0 <flatcc_emitter@@Base+0x26c>
   29810:	ldr	r3, [r4, #12]
   29814:	cmp	r3, r6
   29818:	bcs	297dc <flatcc_emitter@@Base+0x98>
   2981c:	cmp	r3, #0
   29820:	movne	r2, r3
   29824:	bne	297e0 <flatcc_emitter@@Base+0x9c>
   29828:	ldr	r7, [r4]
   2982c:	cmp	r7, #0
   29830:	beq	29a44 <flatcc_emitter@@Base+0x300>
   29834:	ldr	r2, [r7, #2948]	; 0xb84
   29838:	ldr	r3, [r4, #4]
   2983c:	cmp	r2, r3
   29840:	beq	29a08 <flatcc_emitter@@Base+0x2c4>
   29844:	ldr	r3, [r7, #2952]	; 0xb88
   29848:	sub	r3, r3, #2944	; 0xb80
   2984c:	str	r3, [r2, #2952]	; 0xb88
   29850:	ldr	r3, [r4]
   29854:	ldr	r3, [r3, #2948]	; 0xb84
   29858:	str	r3, [r4]
   2985c:	ldr	r3, [r4]
   29860:	add	r2, r3, #2944	; 0xb80
   29864:	str	r2, [r4, #8]
   29868:	mov	r2, #2944	; 0xb80
   2986c:	str	r2, [r4, #12]
   29870:	ldr	r2, [r3, #2944]	; 0xb80
   29874:	ldr	r2, [r2, #2952]	; 0xb88
   29878:	sub	r2, r2, #2944	; 0xb80
   2987c:	str	r2, [r3, #2952]	; 0xb88
   29880:	b	29808 <flatcc_emitter@@Base+0xc4>
   29884:	mov	r0, #0
   29888:	b	2998c <flatcc_emitter@@Base+0x248>
   2988c:	ldr	r6, [r4, #16]
   29890:	add	r0, r6, ip
   29894:	str	r0, [r4, #16]
   29898:	sub	ip, r3, ip
   2989c:	str	ip, [r4, #20]
   298a0:	sub	r4, r2, #1
   298a4:	cmp	r2, #0
   298a8:	moveq	r0, r2
   298ac:	beq	2998c <flatcc_emitter@@Base+0x248>
   298b0:	add	r5, r1, #8
   298b4:	ldr	r2, [r5, #-4]
   298b8:	ldr	r1, [r5, #-8]
   298bc:	mov	r0, r6
   298c0:	bl	14524 <memcpy@plt>
   298c4:	ldr	r3, [r5, #-4]
   298c8:	add	r6, r6, r3
   298cc:	sub	r4, r4, #1
   298d0:	add	r5, r5, #8
   298d4:	cmn	r4, #1
   298d8:	bne	298b4 <flatcc_emitter@@Base+0x170>
   298dc:	mov	r0, #0
   298e0:	b	2998c <flatcc_emitter@@Base+0x248>
   298e4:	mov	r6, r7
   298e8:	mov	r2, r6
   298ec:	mov	r1, r9
   298f0:	ldr	r0, [r4, #16]
   298f4:	bl	14524 <memcpy@plt>
   298f8:	sub	r7, r7, r6
   298fc:	add	r9, r9, r6
   29900:	ldr	r3, [r4, #16]
   29904:	add	r3, r3, r6
   29908:	str	r3, [r4, #16]
   2990c:	ldr	r3, [r4, #20]
   29910:	sub	r6, r3, r6
   29914:	str	r6, [r4, #20]
   29918:	cmp	r7, #0
   2991c:	beq	299dc <flatcc_emitter@@Base+0x298>
   29920:	ldr	r6, [r4, #20]
   29924:	cmp	r6, r7
   29928:	bcs	298e4 <flatcc_emitter@@Base+0x1a0>
   2992c:	cmp	r6, #0
   29930:	bne	298e8 <flatcc_emitter@@Base+0x1a4>
   29934:	ldr	r6, [r4, #4]
   29938:	cmp	r6, #0
   2993c:	beq	29ac8 <flatcc_emitter@@Base+0x384>
   29940:	ldr	r3, [r6, #2944]	; 0xb80
   29944:	ldr	r2, [r4]
   29948:	cmp	r3, r2
   2994c:	beq	29a8c <flatcc_emitter@@Base+0x348>
   29950:	str	r3, [r4, #4]
   29954:	ldr	r3, [r4, #4]
   29958:	str	r3, [r4, #16]
   2995c:	mov	r2, #2944	; 0xb80
   29960:	str	r2, [r4, #20]
   29964:	ldr	r2, [r3, #2948]	; 0xb84
   29968:	ldr	r2, [r2, #2952]	; 0xb88
   2996c:	add	r2, r2, #2944	; 0xb80
   29970:	str	r2, [r3, #2952]	; 0xb88
   29974:	b	29918 <flatcc_emitter@@Base+0x1d4>
   29978:	mvn	r0, #0
   2997c:	b	2998c <flatcc_emitter@@Base+0x248>
   29980:	mvn	r0, #0
   29984:	b	2998c <flatcc_emitter@@Base+0x248>
   29988:	mvn	r0, #0
   2998c:	add	sp, sp, #4
   29990:	ldrd	r4, [sp]
   29994:	ldrd	r6, [sp, #8]
   29998:	ldrd	r8, [sp, #16]
   2999c:	ldrd	sl, [sp, #24]
   299a0:	add	sp, sp, #32
   299a4:	pop	{pc}		; (ldr pc, [sp], #4)
   299a8:	mvn	r0, #0
   299ac:	b	2998c <flatcc_emitter@@Base+0x248>
   299b0:	sub	r5, r5, #8
   299b4:	sub	r8, r8, #1
   299b8:	cmn	r8, #1
   299bc:	beq	29884 <flatcc_emitter@@Base+0x140>
   299c0:	ldr	r6, [r5, #-4]
   299c4:	ldr	r9, [r5, #-8]
   299c8:	add	r9, r9, r6
   299cc:	cmp	r6, #0
   299d0:	beq	299b0 <flatcc_emitter@@Base+0x26c>
   299d4:	mov	sl, #1472	; 0x5c0
   299d8:	b	29810 <flatcc_emitter@@Base+0xcc>
   299dc:	add	r5, r5, #8
   299e0:	subs	r8, r8, #1
   299e4:	beq	29a00 <flatcc_emitter@@Base+0x2bc>
   299e8:	ldr	r9, [r5, #-8]
   299ec:	ldr	r7, [r5, #-4]
   299f0:	cmp	r7, #0
   299f4:	beq	299dc <flatcc_emitter@@Base+0x298>
   299f8:	mov	sl, #1472	; 0x5c0
   299fc:	b	29920 <flatcc_emitter@@Base+0x1dc>
   29a00:	mov	r0, #0
   29a04:	b	2998c <flatcc_emitter@@Base+0x248>
   29a08:	movw	r0, #2956	; 0xb8c
   29a0c:	bl	14554 <malloc@plt>
   29a10:	cmp	r0, #0
   29a14:	beq	29978 <flatcc_emitter@@Base+0x234>
   29a18:	ldr	r3, [r4, #28]
   29a1c:	add	r3, r3, #2944	; 0xb80
   29a20:	str	r3, [r4, #28]
   29a24:	ldr	r3, [r4, #4]
   29a28:	str	r3, [r0, #2948]	; 0xb84
   29a2c:	str	r7, [r0, #2944]	; 0xb80
   29a30:	str	r0, [r7, #2948]	; 0xb84
   29a34:	ldr	r3, [r4, #4]
   29a38:	str	r0, [r3, #2944]	; 0xb80
   29a3c:	str	r0, [r4]
   29a40:	b	2985c <flatcc_emitter@@Base+0x118>
   29a44:	movw	r0, #2956	; 0xb8c
   29a48:	bl	14554 <malloc@plt>
   29a4c:	cmp	r0, #0
   29a50:	beq	29980 <flatcc_emitter@@Base+0x23c>
   29a54:	ldr	r3, [r4, #28]
   29a58:	add	r3, r3, #2944	; 0xb80
   29a5c:	str	r3, [r4, #28]
   29a60:	str	r0, [r4]
   29a64:	str	r0, [r4, #4]
   29a68:	str	r0, [r0, #2944]	; 0xb80
   29a6c:	str	r0, [r0, #2948]	; 0xb84
   29a70:	add	r3, r0, #1472	; 0x5c0
   29a74:	str	r3, [r4, #8]
   29a78:	str	r3, [r4, #16]
   29a7c:	str	sl, [r4, #12]
   29a80:	str	sl, [r4, #20]
   29a84:	str	fp, [r0, #2952]	; 0xb88
   29a88:	b	29808 <flatcc_emitter@@Base+0xc4>
   29a8c:	movw	r0, #2956	; 0xb8c
   29a90:	bl	14554 <malloc@plt>
   29a94:	cmp	r0, #0
   29a98:	beq	29988 <flatcc_emitter@@Base+0x244>
   29a9c:	ldr	r3, [r4, #28]
   29aa0:	add	r3, r3, #2944	; 0xb80
   29aa4:	str	r3, [r4, #28]
   29aa8:	str	r6, [r0, #2948]	; 0xb84
   29aac:	ldr	r3, [r4]
   29ab0:	str	r3, [r0, #2944]	; 0xb80
   29ab4:	str	r0, [r3, #2948]	; 0xb84
   29ab8:	ldr	r3, [r4, #4]
   29abc:	str	r0, [r3, #2944]	; 0xb80
   29ac0:	str	r0, [r4, #4]
   29ac4:	b	29954 <flatcc_emitter@@Base+0x210>
   29ac8:	movw	r0, #2956	; 0xb8c
   29acc:	bl	14554 <malloc@plt>
   29ad0:	cmp	r0, #0
   29ad4:	beq	299a8 <flatcc_emitter@@Base+0x264>
   29ad8:	ldr	r3, [r4, #28]
   29adc:	add	r3, r3, #2944	; 0xb80
   29ae0:	str	r3, [r4, #28]
   29ae4:	str	r0, [r4]
   29ae8:	str	r0, [r4, #4]
   29aec:	str	r0, [r0, #2944]	; 0xb80
   29af0:	str	r0, [r0, #2948]	; 0xb84
   29af4:	add	r3, r0, #1472	; 0x5c0
   29af8:	str	r3, [r4, #8]
   29afc:	str	r3, [r4, #16]
   29b00:	str	sl, [r4, #12]
   29b04:	str	sl, [r4, #20]
   29b08:	str	fp, [r0, #2952]	; 0xb88
   29b0c:	b	29918 <flatcc_emitter@@Base+0x1d4>

00029b10 <flatcc_emitter_copy_buffer@@Base>:
   29b10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   29b14:	strd	r6, [sp, #8]
   29b18:	str	r8, [sp, #16]
   29b1c:	str	lr, [sp, #20]
   29b20:	ldr	r3, [r0, #24]
   29b24:	cmp	r3, r2
   29b28:	movhi	r4, #0
   29b2c:	bhi	29bbc <flatcc_emitter_copy_buffer@@Base+0xac>
   29b30:	ldr	r4, [r0]
   29b34:	cmp	r4, #0
   29b38:	beq	29bbc <flatcc_emitter_copy_buffer@@Base+0xac>
   29b3c:	mov	r5, r1
   29b40:	mov	r7, r0
   29b44:	ldr	r2, [r0, #4]
   29b48:	cmp	r4, r2
   29b4c:	beq	29bd4 <flatcc_emitter_copy_buffer@@Base+0xc4>
   29b50:	ldr	r4, [r0, #12]
   29b54:	rsb	r4, r4, #2944	; 0xb80
   29b58:	mov	r2, r4
   29b5c:	ldr	r1, [r0, #8]
   29b60:	mov	r0, r5
   29b64:	bl	14524 <memcpy@plt>
   29b68:	add	r4, r5, r4
   29b6c:	ldr	r3, [r7]
   29b70:	ldr	r5, [r3, #2944]	; 0xb80
   29b74:	ldr	r3, [r7, #4]
   29b78:	cmp	r5, r3
   29b7c:	beq	29bec <flatcc_emitter_copy_buffer@@Base+0xdc>
   29b80:	mov	r6, #2944	; 0xb80
   29b84:	mov	r2, r6
   29b88:	mov	r1, r5
   29b8c:	mov	r0, r4
   29b90:	bl	14524 <memcpy@plt>
   29b94:	add	r4, r4, #2944	; 0xb80
   29b98:	ldr	r5, [r5, #2944]	; 0xb80
   29b9c:	ldr	r3, [r7, #4]
   29ba0:	cmp	r3, r5
   29ba4:	bne	29b84 <flatcc_emitter_copy_buffer@@Base+0x74>
   29ba8:	ldr	r2, [r7, #20]
   29bac:	rsb	r2, r2, #2944	; 0xb80
   29bb0:	mov	r1, r5
   29bb4:	mov	r0, r4
   29bb8:	bl	14524 <memcpy@plt>
   29bbc:	mov	r0, r4
   29bc0:	ldrd	r4, [sp]
   29bc4:	ldrd	r6, [sp, #8]
   29bc8:	ldr	r8, [sp, #16]
   29bcc:	add	sp, sp, #20
   29bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   29bd4:	mov	r2, r3
   29bd8:	ldr	r1, [r0, #8]
   29bdc:	mov	r0, r5
   29be0:	bl	14524 <memcpy@plt>
   29be4:	mov	r4, r5
   29be8:	b	29bbc <flatcc_emitter_copy_buffer@@Base+0xac>
   29bec:	mov	r5, r3
   29bf0:	b	29ba8 <flatcc_emitter_copy_buffer@@Base+0x98>
   29bf4:	add	r1, r1, #2
   29bf8:	lsl	r1, r1, #1
   29bfc:	uxth	r1, r1
   29c00:	ldrh	ip, [r0, #22]
   29c04:	cmp	ip, r1
   29c08:	bls	29c48 <flatcc_emitter_copy_buffer@@Base+0x138>
   29c0c:	ldr	ip, [r0, #12]
   29c10:	ldrh	r1, [ip, r1]
   29c14:	cmp	r1, #0
   29c18:	beq	29c48 <flatcc_emitter_copy_buffer@@Base+0x138>
   29c1c:	ldrh	ip, [r0, #20]
   29c20:	add	r2, r1, #4
   29c24:	cmp	ip, r2
   29c28:	bcc	29c60 <flatcc_emitter_copy_buffer@@Base+0x150>
   29c2c:	ldr	r2, [r0, #16]
   29c30:	add	r1, r1, r2
   29c34:	tst	r1, #3
   29c38:	bne	29c68 <flatcc_emitter_copy_buffer@@Base+0x158>
   29c3c:	str	r1, [r3]
   29c40:	mov	r0, #0
   29c44:	bx	lr
   29c48:	mov	r1, #0
   29c4c:	str	r1, [r3]
   29c50:	cmp	r2, r1
   29c54:	moveq	r0, r2
   29c58:	movne	r0, #4
   29c5c:	bx	lr
   29c60:	mov	r0, #13
   29c64:	bx	lr
   29c68:	mov	r0, #12
   29c6c:	bx	lr

00029c70 <flatcc_verify_error_string@@Base>:
   29c70:	cmp	r0, #36	; 0x24
   29c74:	ldrls	pc, [pc, r0, lsl #2]
   29c78:	b	29ec0 <flatcc_verify_error_string@@Base+0x250>
   29c7c:	andeq	r9, r2, ip, asr #29
   29c80:	andeq	r9, r2, r0, lsl sp
   29c84:	andeq	r9, r2, ip, lsl sp
   29c88:	andeq	r9, r2, r8, lsr #26
   29c8c:	andeq	r9, r2, r4, lsr sp
   29c90:	andeq	r9, r2, r0, asr #26
   29c94:	andeq	r9, r2, ip, asr #26
   29c98:	andeq	r9, r2, r8, asr sp
   29c9c:	andeq	r9, r2, r4, ror #26
   29ca0:	andeq	r9, r2, r0, ror sp
   29ca4:	andeq	r9, r2, ip, ror sp
   29ca8:	andeq	r9, r2, r8, lsl #27
   29cac:	muleq	r2, r4, sp
   29cb0:	andeq	r9, r2, r0, lsr #27
   29cb4:	andeq	r9, r2, ip, lsr #27
   29cb8:			; <UNDEFINED> instruction: 0x00029db8
   29cbc:	andeq	r9, r2, r4, asr #27
   29cc0:	ldrdeq	r9, [r2], -r0
   29cc4:	ldrdeq	r9, [r2], -ip
   29cc8:	andeq	r9, r2, r8, ror #27
   29ccc:	strdeq	r9, [r2], -r4
   29cd0:	andeq	r9, r2, r0, lsl #28
   29cd4:	andeq	r9, r2, ip, lsl #28
   29cd8:	andeq	r9, r2, r8, lsl lr
   29cdc:	andeq	r9, r2, r4, lsr #28
   29ce0:	andeq	r9, r2, r0, lsr lr
   29ce4:	andeq	r9, r2, ip, lsr lr
   29ce8:	andeq	r9, r2, r8, asr #28
   29cec:	andeq	r9, r2, r4, asr lr
   29cf0:	andeq	r9, r2, r0, ror #28
   29cf4:	andeq	r9, r2, ip, ror #28
   29cf8:	andeq	r9, r2, r8, ror lr
   29cfc:	andeq	r9, r2, r4, lsl #29
   29d00:	muleq	r2, r0, lr
   29d04:	muleq	r2, ip, lr
   29d08:	andeq	r9, r2, r8, lsr #29
   29d0c:			; <UNDEFINED> instruction: 0x00029eb4
   29d10:	movw	r0, #8048	; 0x1f70
   29d14:	movt	r0, #4
   29d18:	bx	lr
   29d1c:	movw	r0, #6916	; 0x1b04
   29d20:	movt	r0, #4
   29d24:	bx	lr
   29d28:	movw	r0, #6936	; 0x1b18
   29d2c:	movt	r0, #4
   29d30:	bx	lr
   29d34:	movw	r0, #6964	; 0x1b34
   29d38:	movt	r0, #4
   29d3c:	bx	lr
   29d40:	movw	r0, #6988	; 0x1b4c
   29d44:	movt	r0, #4
   29d48:	bx	lr
   29d4c:	movw	r0, #7024	; 0x1b70
   29d50:	movt	r0, #4
   29d54:	bx	lr
   29d58:	movw	r0, #7056	; 0x1b90
   29d5c:	movt	r0, #4
   29d60:	bx	lr
   29d64:	movw	r0, #7084	; 0x1bac
   29d68:	movt	r0, #4
   29d6c:	bx	lr
   29d70:	movw	r0, #7104	; 0x1bc0
   29d74:	movt	r0, #4
   29d78:	bx	lr
   29d7c:	movw	r0, #7124	; 0x1bd4
   29d80:	movt	r0, #4
   29d84:	bx	lr
   29d88:	movw	r0, #7148	; 0x1bec
   29d8c:	movt	r0, #4
   29d90:	bx	lr
   29d94:	movw	r0, #7168	; 0x1c00
   29d98:	movt	r0, #4
   29d9c:	bx	lr
   29da0:	movw	r0, #7192	; 0x1c18
   29da4:	movt	r0, #4
   29da8:	bx	lr
   29dac:	movw	r0, #7220	; 0x1c34
   29db0:	movt	r0, #4
   29db4:	bx	lr
   29db8:	movw	r0, #7248	; 0x1c50
   29dbc:	movt	r0, #4
   29dc0:	bx	lr
   29dc4:	movw	r0, #7288	; 0x1c78
   29dc8:	movt	r0, #4
   29dcc:	bx	lr
   29dd0:	movw	r0, #7328	; 0x1ca0
   29dd4:	movt	r0, #4
   29dd8:	bx	lr
   29ddc:	movw	r0, #7368	; 0x1cc8
   29de0:	movt	r0, #4
   29de4:	bx	lr
   29de8:	movw	r0, #7388	; 0x1cdc
   29dec:	movt	r0, #4
   29df0:	bx	lr
   29df4:	movw	r0, #7428	; 0x1d04
   29df8:	movt	r0, #4
   29dfc:	bx	lr
   29e00:	movw	r0, #7452	; 0x1d1c
   29e04:	movt	r0, #4
   29e08:	bx	lr
   29e0c:	movw	r0, #7496	; 0x1d48
   29e10:	movt	r0, #4
   29e14:	bx	lr
   29e18:	movw	r0, #7548	; 0x1d7c
   29e1c:	movt	r0, #4
   29e20:	bx	lr
   29e24:	movw	r0, #7592	; 0x1da8
   29e28:	movt	r0, #4
   29e2c:	bx	lr
   29e30:	movw	r0, #7636	; 0x1dd4
   29e34:	movt	r0, #4
   29e38:	bx	lr
   29e3c:	movw	r0, #7684	; 0x1e04
   29e40:	movt	r0, #4
   29e44:	bx	lr
   29e48:	movw	r0, #7704	; 0x1e18
   29e4c:	movt	r0, #4
   29e50:	bx	lr
   29e54:	movw	r0, #7732	; 0x1e34
   29e58:	movt	r0, #4
   29e5c:	bx	lr
   29e60:	movw	r0, #7756	; 0x1e4c
   29e64:	movt	r0, #4
   29e68:	bx	lr
   29e6c:	movw	r0, #7796	; 0x1e74
   29e70:	movt	r0, #4
   29e74:	bx	lr
   29e78:	movw	r0, #7836	; 0x1e9c
   29e7c:	movt	r0, #4
   29e80:	bx	lr
   29e84:	movw	r0, #7860	; 0x1eb4
   29e88:	movt	r0, #4
   29e8c:	bx	lr
   29e90:	movw	r0, #7900	; 0x1edc
   29e94:	movt	r0, #4
   29e98:	bx	lr
   29e9c:	movw	r0, #7940	; 0x1f04
   29ea0:	movt	r0, #4
   29ea4:	bx	lr
   29ea8:	movw	r0, #7992	; 0x1f38
   29eac:	movt	r0, #4
   29eb0:	bx	lr
   29eb4:	movw	r0, #8032	; 0x1f60
   29eb8:	movt	r0, #4
   29ebc:	bx	lr
   29ec0:	movw	r0, #6904	; 0x1af8
   29ec4:	movt	r0, #4
   29ec8:	bx	lr
   29ecc:	movw	r0, #6912	; 0x1b00
   29ed0:	movt	r0, #4
   29ed4:	bx	lr

00029ed8 <flatcc_verify_field@@Base>:
   29ed8:	add	r1, r1, #2
   29edc:	lsl	r1, r1, #1
   29ee0:	uxth	r1, r1
   29ee4:	ldrh	ip, [r0, #22]
   29ee8:	cmp	ip, r1
   29eec:	bls	29f38 <flatcc_verify_field@@Base+0x60>
   29ef0:	ldr	ip, [r0, #12]
   29ef4:	ldrh	r1, [ip, r1]
   29ef8:	cmp	r1, #0
   29efc:	beq	29f40 <flatcc_verify_field@@Base+0x68>
   29f00:	add	r2, r2, r1
   29f04:	ldrh	ip, [r0, #20]
   29f08:	cmp	r2, ip
   29f0c:	bhi	29f48 <flatcc_verify_field@@Base+0x70>
   29f10:	ldr	r2, [r0]
   29f14:	ldr	r0, [r0, #16]
   29f18:	add	r2, r2, r0
   29f1c:	add	r2, r2, r1
   29f20:	sub	r3, r3, #1
   29f24:	and	r2, r2, r3
   29f28:	cmp	r2, #0
   29f2c:	moveq	r0, #0
   29f30:	movne	r0, #12
   29f34:	bx	lr
   29f38:	mov	r0, #0
   29f3c:	bx	lr
   29f40:	mov	r0, #0
   29f44:	bx	lr
   29f48:	mov	r0, #13
   29f4c:	bx	lr

00029f50 <flatcc_verify_string_field@@Base>:
   29f50:	str	r4, [sp, #-8]!
   29f54:	str	lr, [sp, #4]
   29f58:	sub	sp, sp, #8
   29f5c:	mov	r4, r0
   29f60:	add	r3, sp, #4
   29f64:	bl	29bf4 <flatcc_emitter_copy_buffer@@Base+0xe4>
   29f68:	cmp	r0, #0
   29f6c:	bne	29fdc <flatcc_verify_string_field@@Base+0x8c>
   29f70:	ldr	r3, [sp, #4]
   29f74:	cmp	r3, #0
   29f78:	beq	29fdc <flatcc_verify_string_field@@Base+0x8c>
   29f7c:	ldr	r1, [r4]
   29f80:	ldr	r2, [r1, r3]
   29f84:	add	r2, r3, r2
   29f88:	cmp	r3, r2
   29f8c:	movcs	r0, #17
   29f90:	bcs	29fdc <flatcc_verify_string_field@@Base+0x8c>
   29f94:	ldr	r3, [r4, #4]
   29f98:	add	ip, r2, #4
   29f9c:	cmp	r3, ip
   29fa0:	movcc	r0, #17
   29fa4:	bcc	29fdc <flatcc_verify_string_field@@Base+0x8c>
   29fa8:	tst	r2, #3
   29fac:	movne	r0, #17
   29fb0:	bne	29fdc <flatcc_verify_string_field@@Base+0x8c>
   29fb4:	ldr	r2, [r1, r2]
   29fb8:	sub	r3, r3, ip
   29fbc:	add	lr, r2, #1
   29fc0:	cmp	r3, lr
   29fc4:	movcc	r0, #8
   29fc8:	bcc	29fdc <flatcc_verify_string_field@@Base+0x8c>
   29fcc:	add	r1, r1, ip
   29fd0:	ldrb	r3, [r1, r2]
   29fd4:	cmp	r3, #0
   29fd8:	movne	r0, #7
   29fdc:	add	sp, sp, #8
   29fe0:	ldr	r4, [sp]
   29fe4:	add	sp, sp, #4
   29fe8:	pop	{pc}		; (ldr pc, [sp], #4)

00029fec <flatcc_verify_vector_field@@Base>:
   29fec:	strd	r4, [sp, #-16]!
   29ff0:	str	r6, [sp, #8]
   29ff4:	str	lr, [sp, #12]
   29ff8:	sub	sp, sp, #8
   29ffc:	mov	r6, r0
   2a000:	mov	r5, r3
   2a004:	ldrh	r4, [sp, #24]
   2a008:	add	r3, sp, #4
   2a00c:	bl	29bf4 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2a010:	cmp	r0, #0
   2a014:	bne	2a090 <flatcc_verify_vector_field@@Base+0xa4>
   2a018:	ldr	r3, [sp, #4]
   2a01c:	cmp	r3, #0
   2a020:	beq	2a090 <flatcc_verify_vector_field@@Base+0xa4>
   2a024:	ldr	r1, [r6]
   2a028:	ldr	r2, [r1, r3]
   2a02c:	add	r2, r3, r2
   2a030:	cmp	r3, r2
   2a034:	movcs	r0, #16
   2a038:	bcs	2a090 <flatcc_verify_vector_field@@Base+0xa4>
   2a03c:	ldr	ip, [r6, #4]
   2a040:	add	r3, r2, #4
   2a044:	cmp	ip, r3
   2a048:	movcc	r0, #16
   2a04c:	bcc	2a090 <flatcc_verify_vector_field@@Base+0xa4>
   2a050:	cmp	r4, #4
   2a054:	movcc	r4, #4
   2a058:	sub	r4, r4, #1
   2a05c:	orr	r4, r4, #3
   2a060:	tst	r4, r3
   2a064:	movne	r0, #16
   2a068:	bne	2a090 <flatcc_verify_vector_field@@Base+0xa4>
   2a06c:	ldr	r2, [r1, r2]
   2a070:	ldr	r1, [sp, #28]
   2a074:	cmp	r1, r2
   2a078:	movcc	r0, #25
   2a07c:	bcc	2a090 <flatcc_verify_vector_field@@Base+0xa4>
   2a080:	sub	r3, ip, r3
   2a084:	mul	r5, r2, r5
   2a088:	cmp	r3, r5
   2a08c:	movcc	r0, #26
   2a090:	add	sp, sp, #8
   2a094:	ldrd	r4, [sp]
   2a098:	ldr	r6, [sp, #8]
   2a09c:	add	sp, sp, #12
   2a0a0:	pop	{pc}		; (ldr pc, [sp], #4)

0002a0a4 <flatcc_verify_string_vector_field@@Base>:
   2a0a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   2a0a8:	strd	r6, [sp, #8]
   2a0ac:	str	lr, [sp, #16]
   2a0b0:	sub	sp, sp, #12
   2a0b4:	mov	r4, r0
   2a0b8:	add	r3, sp, #4
   2a0bc:	bl	29bf4 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2a0c0:	cmp	r0, #0
   2a0c4:	bne	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a0c8:	ldr	r3, [sp, #4]
   2a0cc:	cmp	r3, #0
   2a0d0:	beq	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a0d4:	ldr	r1, [r4]
   2a0d8:	ldr	r2, [r1, r3]
   2a0dc:	add	r2, r3, r2
   2a0e0:	cmp	r3, r2
   2a0e4:	movcs	r0, #16
   2a0e8:	bcs	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a0ec:	ldr	r4, [r4, #4]
   2a0f0:	add	r3, r2, #4
   2a0f4:	cmp	r4, r3
   2a0f8:	movcc	r0, #16
   2a0fc:	bcc	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a100:	tst	r3, #3
   2a104:	bne	2a234 <flatcc_verify_string_vector_field@@Base+0x190>
   2a108:	ldr	ip, [r1, r2]
   2a10c:	cmn	ip, #-1073741823	; 0xc0000001
   2a110:	bhi	2a234 <flatcc_verify_string_vector_field@@Base+0x190>
   2a114:	lsl	r5, ip, #2
   2a118:	sub	lr, r4, r3
   2a11c:	cmp	lr, r5
   2a120:	bcc	2a234 <flatcc_verify_string_vector_field@@Base+0x190>
   2a124:	cmp	ip, #0
   2a128:	beq	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a12c:	ldr	r2, [r1, r3]
   2a130:	add	r2, r3, r2
   2a134:	cmp	r2, r3
   2a138:	movls	r0, #17
   2a13c:	bls	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a140:	add	lr, r2, #4
   2a144:	cmp	r4, lr
   2a148:	movcc	r0, #17
   2a14c:	bcc	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a150:	tst	r2, #3
   2a154:	bne	2a1c4 <flatcc_verify_string_vector_field@@Base+0x120>
   2a158:	ldr	r7, [r1, r2]
   2a15c:	sub	ip, r4, lr
   2a160:	add	r6, r7, #1
   2a164:	cmp	ip, r6
   2a168:	addcs	ip, r3, r5
   2a16c:	bcc	2a1c4 <flatcc_verify_string_vector_field@@Base+0x120>
   2a170:	add	lr, r1, lr
   2a174:	ldrb	lr, [lr, r7]
   2a178:	cmp	lr, #0
   2a17c:	bne	2a200 <flatcc_verify_string_vector_field@@Base+0x15c>
   2a180:	add	r3, r3, #4
   2a184:	cmp	r3, ip
   2a188:	beq	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a18c:	ldr	r2, [r1, r3]
   2a190:	add	r2, r3, r2
   2a194:	cmp	r2, r3
   2a198:	bls	2a21c <flatcc_verify_string_vector_field@@Base+0x178>
   2a19c:	add	lr, r2, #4
   2a1a0:	cmp	r4, lr
   2a1a4:	bcc	2a224 <flatcc_verify_string_vector_field@@Base+0x180>
   2a1a8:	tst	r2, #3
   2a1ac:	bne	2a1c4 <flatcc_verify_string_vector_field@@Base+0x120>
   2a1b0:	ldr	r7, [r1, r2]
   2a1b4:	sub	r5, r4, lr
   2a1b8:	add	r6, r7, #1
   2a1bc:	cmp	r5, r6
   2a1c0:	bcs	2a170 <flatcc_verify_string_vector_field@@Base+0xcc>
   2a1c4:	add	ip, r2, #4
   2a1c8:	tst	r2, #3
   2a1cc:	movne	r0, #17
   2a1d0:	bne	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a1d4:	ldr	r2, [r1, r2]
   2a1d8:	sub	r3, r4, ip
   2a1dc:	add	lr, r2, #1
   2a1e0:	cmp	r3, lr
   2a1e4:	movcc	r0, #8
   2a1e8:	bcc	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a1ec:	add	r1, r1, ip
   2a1f0:	ldrb	r3, [r1, r2]
   2a1f4:	cmp	r3, #0
   2a1f8:	movne	r0, #7
   2a1fc:	b	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a200:	cmp	r3, r2
   2a204:	bcs	2a22c <flatcc_verify_string_vector_field@@Base+0x188>
   2a208:	add	ip, r2, #4
   2a20c:	cmp	r4, ip
   2a210:	bcs	2a1c8 <flatcc_verify_string_vector_field@@Base+0x124>
   2a214:	mov	r0, #17
   2a218:	b	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a21c:	mov	r0, #17
   2a220:	b	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a224:	mov	r0, #17
   2a228:	b	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a22c:	mov	r0, #17
   2a230:	b	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a234:	tst	r3, #3
   2a238:	movne	r0, #16
   2a23c:	bne	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a240:	ldr	r2, [r1, r2]
   2a244:	cmn	r2, #-1073741823	; 0xc0000001
   2a248:	movhi	r0, #25
   2a24c:	bhi	2a260 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2a250:	sub	r3, r4, r3
   2a254:	lsl	r2, r2, #2
   2a258:	cmp	r3, r2
   2a25c:	movcc	r0, #26
   2a260:	add	sp, sp, #12
   2a264:	ldrd	r4, [sp]
   2a268:	ldrd	r6, [sp, #8]
   2a26c:	add	sp, sp, #16
   2a270:	pop	{pc}		; (ldr pc, [sp], #4)

0002a274 <flatcc_verify_table_field@@Base>:
   2a274:	strd	r4, [sp, #-12]!
   2a278:	str	lr, [sp, #8]
   2a27c:	sub	sp, sp, #36	; 0x24
   2a280:	mov	r4, r0
   2a284:	mov	r5, r3
   2a288:	add	r3, sp, #28
   2a28c:	bl	29bf4 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2a290:	cmp	r0, #0
   2a294:	bne	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a298:	ldr	r3, [sp, #28]
   2a29c:	cmp	r3, #0
   2a2a0:	bne	2a2b4 <flatcc_verify_table_field@@Base+0x40>
   2a2a4:	add	sp, sp, #36	; 0x24
   2a2a8:	ldrd	r4, [sp]
   2a2ac:	add	sp, sp, #8
   2a2b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2a2b4:	ldr	r0, [r4]
   2a2b8:	ldr	ip, [r4, #4]
   2a2bc:	ldr	r1, [r0, r3]
   2a2c0:	ldr	r2, [r4, #8]
   2a2c4:	sub	r2, r2, #1
   2a2c8:	str	r2, [sp, #12]
   2a2cc:	cmp	r2, #0
   2a2d0:	moveq	r0, #3
   2a2d4:	beq	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a2d8:	add	r2, r3, r1
   2a2dc:	cmp	r3, r2
   2a2e0:	movcs	r0, #15
   2a2e4:	bcs	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a2e8:	add	r3, r2, #4
   2a2ec:	cmp	ip, r3
   2a2f0:	movcc	r0, #15
   2a2f4:	bcc	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a2f8:	tst	r2, #3
   2a2fc:	movne	r0, #15
   2a300:	bne	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a304:	str	r2, [sp, #20]
   2a308:	ldr	r3, [r0, r2]
   2a30c:	subs	r3, r2, r3
   2a310:	movmi	r0, #29
   2a314:	bmi	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a318:	tst	r3, #1
   2a31c:	movne	r0, #29
   2a320:	bne	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a324:	add	lr, r3, #2
   2a328:	cmp	ip, lr
   2a32c:	movcc	r0, #27
   2a330:	bcc	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a334:	add	r4, r0, r3
   2a338:	ldrh	r1, [r0, r3]
   2a33c:	strh	r1, [sp, #26]
   2a340:	add	r3, r1, r3
   2a344:	cmp	ip, r3
   2a348:	movcc	r0, #30
   2a34c:	bcc	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a350:	tst	r1, #1
   2a354:	movne	r0, #30
   2a358:	bne	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a35c:	cmp	r1, #3
   2a360:	movls	r0, #28
   2a364:	bls	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a368:	ldrh	r3, [r0, lr]
   2a36c:	strh	r3, [sp, #24]
   2a370:	sub	r2, ip, r2
   2a374:	cmp	r2, r3
   2a378:	movcc	r0, #20
   2a37c:	bcc	2a2a4 <flatcc_verify_table_field@@Base+0x30>
   2a380:	str	r4, [sp, #16]
   2a384:	str	r0, [sp, #4]
   2a388:	str	ip, [sp, #8]
   2a38c:	add	r0, sp, #4
   2a390:	blx	r5
   2a394:	b	2a2a4 <flatcc_verify_table_field@@Base+0x30>

0002a398 <flatcc_verify_table_vector_field@@Base>:
   2a398:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2a39c:	strd	r6, [sp, #8]
   2a3a0:	strd	r8, [sp, #16]
   2a3a4:	strd	sl, [sp, #24]
   2a3a8:	str	lr, [sp, #32]
   2a3ac:	sub	sp, sp, #36	; 0x24
   2a3b0:	mov	r4, r0
   2a3b4:	mov	r5, r3
   2a3b8:	add	r3, sp, #28
   2a3bc:	bl	29bf4 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2a3c0:	cmp	r0, #0
   2a3c4:	bne	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a3c8:	ldr	r3, [sp, #28]
   2a3cc:	cmp	r3, #0
   2a3d0:	bne	2a3f0 <flatcc_verify_table_vector_field@@Base+0x58>
   2a3d4:	add	sp, sp, #36	; 0x24
   2a3d8:	ldrd	r4, [sp]
   2a3dc:	ldrd	r6, [sp, #8]
   2a3e0:	ldrd	r8, [sp, #16]
   2a3e4:	ldrd	sl, [sp, #24]
   2a3e8:	add	sp, sp, #32
   2a3ec:	pop	{pc}		; (ldr pc, [sp], #4)
   2a3f0:	ldr	r7, [r4]
   2a3f4:	ldr	r2, [r7, r3]
   2a3f8:	ldr	r6, [r4, #8]
   2a3fc:	cmp	r6, #0
   2a400:	movle	r0, #3
   2a404:	ble	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a408:	add	r2, r3, r2
   2a40c:	cmp	r3, r2
   2a410:	movcs	r0, #16
   2a414:	bcs	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a418:	ldr	r8, [r4, #4]
   2a41c:	add	r4, r2, #4
   2a420:	cmp	r8, r4
   2a424:	movcc	r0, #16
   2a428:	bcc	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a42c:	tst	r4, #3
   2a430:	bne	2a62c <flatcc_verify_table_vector_field@@Base+0x294>
   2a434:	ldr	r3, [r7, r2]
   2a438:	cmn	r3, #-1073741823	; 0xc0000001
   2a43c:	bhi	2a62c <flatcc_verify_table_vector_field@@Base+0x294>
   2a440:	lsl	sl, r3, #2
   2a444:	sub	r1, r8, r4
   2a448:	cmp	r1, sl
   2a44c:	bcc	2a62c <flatcc_verify_table_vector_field@@Base+0x294>
   2a450:	cmp	r3, #0
   2a454:	addne	r9, r7, r4
   2a458:	addne	sl, r4, sl
   2a45c:	subne	r6, r6, #2
   2a460:	bne	2a4b4 <flatcc_verify_table_vector_field@@Base+0x11c>
   2a464:	b	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a468:	ldr	r3, [r7, r2]
   2a46c:	cmn	r3, #-1073741823	; 0xc0000001
   2a470:	movhi	r0, #25
   2a474:	bhi	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a478:	sub	r4, r8, r4
   2a47c:	lsl	r3, r3, #2
   2a480:	cmp	r4, r3
   2a484:	movcc	r0, #26
   2a488:	b	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a48c:	str	r2, [sp, #16]
   2a490:	str	r7, [sp, #4]
   2a494:	str	r8, [sp, #8]
   2a498:	add	r0, sp, #4
   2a49c:	blx	r5
   2a4a0:	cmp	r0, #0
   2a4a4:	bne	2a618 <flatcc_verify_table_vector_field@@Base+0x280>
   2a4a8:	add	r4, r4, #4
   2a4ac:	cmp	r4, sl
   2a4b0:	beq	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a4b4:	mov	fp, r9
   2a4b8:	ldr	r3, [r9], #4
   2a4bc:	str	r6, [sp, #12]
   2a4c0:	cmp	r6, #0
   2a4c4:	beq	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a4c8:	add	r3, r3, r4
   2a4cc:	cmp	r4, r3
   2a4d0:	bcs	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a4d4:	add	r2, r3, #4
   2a4d8:	cmp	r8, r2
   2a4dc:	bcc	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a4e0:	tst	r3, #3
   2a4e4:	bne	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a4e8:	str	r3, [sp, #20]
   2a4ec:	ldr	r1, [r7, r3]
   2a4f0:	subs	r1, r3, r1
   2a4f4:	bmi	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a4f8:	tst	r1, #1
   2a4fc:	bne	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a500:	add	ip, r1, #2
   2a504:	cmp	r8, ip
   2a508:	bcc	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a50c:	add	r2, r7, r1
   2a510:	ldrh	r0, [r7, r1]
   2a514:	strh	r0, [sp, #26]
   2a518:	add	r1, r0, r1
   2a51c:	cmp	r8, r1
   2a520:	bcc	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a524:	tst	r0, #1
   2a528:	bne	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a52c:	cmp	r0, #3
   2a530:	bls	2a548 <flatcc_verify_table_vector_field@@Base+0x1b0>
   2a534:	ldrh	r1, [r7, ip]
   2a538:	strh	r1, [sp, #24]
   2a53c:	sub	r3, r8, r3
   2a540:	cmp	r3, r1
   2a544:	bcs	2a48c <flatcc_verify_table_vector_field@@Base+0xf4>
   2a548:	ldr	r3, [fp]
   2a54c:	str	r6, [sp, #12]
   2a550:	cmp	r6, #0
   2a554:	beq	2a624 <flatcc_verify_table_vector_field@@Base+0x28c>
   2a558:	add	r3, r4, r3
   2a55c:	cmp	r4, r3
   2a560:	movcs	r0, #15
   2a564:	bcs	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a568:	add	r2, r3, #4
   2a56c:	cmp	r8, r2
   2a570:	movcc	r0, #15
   2a574:	bcc	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a578:	tst	r3, #3
   2a57c:	movne	r0, #15
   2a580:	bne	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a584:	str	r3, [sp, #20]
   2a588:	ldr	r2, [r7, r3]
   2a58c:	subs	r2, r3, r2
   2a590:	movmi	r0, #29
   2a594:	bmi	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a598:	tst	r2, #1
   2a59c:	movne	r0, #29
   2a5a0:	bne	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a5a4:	add	r0, r2, #2
   2a5a8:	cmp	r8, r0
   2a5ac:	movcc	r0, #27
   2a5b0:	bcc	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a5b4:	add	ip, r7, r2
   2a5b8:	ldrh	r1, [r7, r2]
   2a5bc:	strh	r1, [sp, #26]
   2a5c0:	add	r2, r1, r2
   2a5c4:	cmp	r8, r2
   2a5c8:	movcc	r0, #30
   2a5cc:	bcc	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a5d0:	tst	r1, #1
   2a5d4:	movne	r0, #30
   2a5d8:	bne	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a5dc:	cmp	r1, #3
   2a5e0:	movls	r0, #28
   2a5e4:	bls	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a5e8:	ldrh	r2, [r7, r0]
   2a5ec:	strh	r2, [sp, #24]
   2a5f0:	sub	r3, r8, r3
   2a5f4:	cmp	r3, r2
   2a5f8:	movcc	r0, #20
   2a5fc:	bcc	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a600:	str	ip, [sp, #16]
   2a604:	str	r7, [sp, #4]
   2a608:	str	r8, [sp, #8]
   2a60c:	add	r0, sp, #4
   2a610:	blx	r5
   2a614:	b	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a618:	ldr	r3, [fp]
   2a61c:	str	r6, [sp, #12]
   2a620:	b	2a558 <flatcc_verify_table_vector_field@@Base+0x1c0>
   2a624:	mov	r0, #3
   2a628:	b	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>
   2a62c:	tst	r4, #3
   2a630:	beq	2a468 <flatcc_verify_table_vector_field@@Base+0xd0>
   2a634:	mov	r0, #16
   2a638:	b	2a3d4 <flatcc_verify_table_vector_field@@Base+0x3c>

0002a63c <flatcc_verify_union_table@@Base>:
   2a63c:	strd	r4, [sp, #-12]!
   2a640:	str	lr, [sp, #8]
   2a644:	sub	sp, sp, #28
   2a648:	ldr	r4, [r0]
   2a64c:	ldr	lr, [r0, #4]
   2a650:	ldr	ip, [r0, #16]
   2a654:	ldr	r2, [r0, #20]
   2a658:	ldr	r3, [r0, #8]
   2a65c:	sub	r3, r3, #1
   2a660:	str	r3, [sp, #8]
   2a664:	cmp	r3, #0
   2a668:	moveq	r0, #3
   2a66c:	beq	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a670:	add	r3, ip, r2
   2a674:	cmp	ip, r3
   2a678:	movcs	r0, #15
   2a67c:	bcs	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a680:	add	r2, r3, #4
   2a684:	cmp	lr, r2
   2a688:	movcc	r0, #15
   2a68c:	bcc	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a690:	tst	r3, #3
   2a694:	movne	r0, #15
   2a698:	bne	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a69c:	str	r3, [sp, #16]
   2a6a0:	ldr	r2, [r4, r3]
   2a6a4:	subs	r2, r3, r2
   2a6a8:	movmi	r0, #29
   2a6ac:	bmi	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a6b0:	tst	r2, #1
   2a6b4:	movne	r0, #29
   2a6b8:	bne	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a6bc:	add	ip, r2, #2
   2a6c0:	cmp	lr, ip
   2a6c4:	movcc	r0, #27
   2a6c8:	bcc	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a6cc:	add	r5, r4, r2
   2a6d0:	ldrh	r0, [r4, r2]
   2a6d4:	strh	r0, [sp, #22]
   2a6d8:	add	r2, r0, r2
   2a6dc:	cmp	lr, r2
   2a6e0:	movcc	r0, #30
   2a6e4:	bcc	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a6e8:	tst	r0, #1
   2a6ec:	movne	r0, #30
   2a6f0:	bne	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a6f4:	cmp	r0, #3
   2a6f8:	movls	r0, #28
   2a6fc:	bls	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a700:	ldrh	r2, [r4, ip]
   2a704:	strh	r2, [sp, #20]
   2a708:	sub	r3, lr, r3
   2a70c:	cmp	r3, r2
   2a710:	movcc	r0, #20
   2a714:	bcc	2a72c <flatcc_verify_union_table@@Base+0xf0>
   2a718:	str	r5, [sp, #12]
   2a71c:	str	r4, [sp]
   2a720:	str	lr, [sp, #4]
   2a724:	mov	r0, sp
   2a728:	blx	r1
   2a72c:	add	sp, sp, #28
   2a730:	ldrd	r4, [sp]
   2a734:	add	sp, sp, #8
   2a738:	pop	{pc}		; (ldr pc, [sp], #4)

0002a73c <flatcc_verify_union_struct@@Base>:
   2a73c:	ldr	ip, [r0, #4]
   2a740:	ldr	r3, [r0, #16]
   2a744:	ldr	r0, [r0, #20]
   2a748:	cmp	r0, #0
   2a74c:	beq	2a784 <flatcc_verify_union_struct@@Base+0x48>
   2a750:	add	r3, r3, r0
   2a754:	cmp	ip, r3
   2a758:	bcc	2a78c <flatcc_verify_union_struct@@Base+0x50>
   2a75c:	adds	r1, r1, r3
   2a760:	bcs	2a794 <flatcc_verify_union_struct@@Base+0x58>
   2a764:	cmp	ip, r1
   2a768:	bcc	2a79c <flatcc_verify_union_struct@@Base+0x60>
   2a76c:	sub	r2, r2, #1
   2a770:	and	r3, r3, r2
   2a774:	cmp	r3, #0
   2a778:	moveq	r0, #0
   2a77c:	movne	r0, #11
   2a780:	bx	lr
   2a784:	mov	r0, #18
   2a788:	bx	lr
   2a78c:	mov	r0, #18
   2a790:	bx	lr
   2a794:	mov	r0, #10
   2a798:	bx	lr
   2a79c:	mov	r0, #9
   2a7a0:	bx	lr

0002a7a4 <flatcc_verify_union_string@@Base>:
   2a7a4:	ldr	r2, [r0, #16]
   2a7a8:	ldr	r3, [r0, #20]
   2a7ac:	add	r3, r2, r3
   2a7b0:	cmp	r2, r3
   2a7b4:	bcs	2a800 <flatcc_verify_union_string@@Base+0x5c>
   2a7b8:	ldr	r2, [r0, #4]
   2a7bc:	add	r1, r3, #4
   2a7c0:	cmp	r2, r1
   2a7c4:	bcc	2a808 <flatcc_verify_union_string@@Base+0x64>
   2a7c8:	tst	r3, #3
   2a7cc:	bne	2a810 <flatcc_verify_union_string@@Base+0x6c>
   2a7d0:	ldr	r0, [r0]
   2a7d4:	ldr	r3, [r0, r3]
   2a7d8:	sub	r2, r2, r1
   2a7dc:	add	ip, r3, #1
   2a7e0:	cmp	r2, ip
   2a7e4:	bcc	2a818 <flatcc_verify_union_string@@Base+0x74>
   2a7e8:	add	r1, r0, r1
   2a7ec:	ldrb	r3, [r1, r3]
   2a7f0:	cmp	r3, #0
   2a7f4:	moveq	r0, #0
   2a7f8:	movne	r0, #7
   2a7fc:	bx	lr
   2a800:	mov	r0, #17
   2a804:	bx	lr
   2a808:	mov	r0, #17
   2a80c:	bx	lr
   2a810:	mov	r0, #17
   2a814:	bx	lr
   2a818:	mov	r0, #8
   2a81c:	bx	lr

0002a820 <flatcc_verify_buffer_header@@Base>:
   2a820:	tst	r0, #3
   2a824:	bne	2a894 <flatcc_verify_buffer_header@@Base+0x74>
   2a828:	cmn	r1, #9
   2a82c:	bhi	2a89c <flatcc_verify_buffer_header@@Base+0x7c>
   2a830:	cmp	r1, #7
   2a834:	bls	2a8a4 <flatcc_verify_buffer_header@@Base+0x84>
   2a838:	cmp	r2, #0
   2a83c:	beq	2a8ac <flatcc_verify_buffer_header@@Base+0x8c>
   2a840:	str	r4, [sp, #-8]!
   2a844:	str	lr, [sp, #4]
   2a848:	sub	sp, sp, #8
   2a84c:	mov	r1, r2
   2a850:	mov	r4, r0
   2a854:	mov	r2, #4
   2a858:	add	r0, sp, r2
   2a85c:	bl	145a8 <strncpy@plt>
   2a860:	ldr	r3, [sp, #4]
   2a864:	ldr	r2, [r4, #4]
   2a868:	cmp	r3, #0
   2a86c:	cmpne	r2, r3
   2a870:	moveq	r3, #1
   2a874:	movne	r3, #0
   2a878:	cmp	r3, #0
   2a87c:	movne	r0, #0
   2a880:	moveq	r0, #2
   2a884:	add	sp, sp, #8
   2a888:	ldr	r4, [sp]
   2a88c:	add	sp, sp, #4
   2a890:	pop	{pc}		; (ldr pc, [sp], #4)
   2a894:	mov	r0, #5
   2a898:	bx	lr
   2a89c:	mov	r0, #6
   2a8a0:	bx	lr
   2a8a4:	mov	r0, #1
   2a8a8:	bx	lr
   2a8ac:	mov	r0, #0
   2a8b0:	bx	lr

0002a8b4 <flatcc_verify_typed_buffer_header@@Base>:
   2a8b4:	tst	r0, #3
   2a8b8:	bne	2a8e8 <flatcc_verify_typed_buffer_header@@Base+0x34>
   2a8bc:	cmn	r1, #9
   2a8c0:	bhi	2a8f0 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   2a8c4:	cmp	r1, #7
   2a8c8:	bls	2a8f8 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2a8cc:	cmp	r2, #0
   2a8d0:	beq	2a900 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2a8d4:	ldr	r0, [r0, #4]
   2a8d8:	cmp	r2, r0
   2a8dc:	movne	r0, #2
   2a8e0:	moveq	r0, #0
   2a8e4:	bx	lr
   2a8e8:	mov	r0, #5
   2a8ec:	bx	lr
   2a8f0:	mov	r0, #6
   2a8f4:	bx	lr
   2a8f8:	mov	r0, #1
   2a8fc:	bx	lr
   2a900:	mov	r0, #0
   2a904:	bx	lr

0002a908 <flatcc_verify_struct_as_root@@Base>:
   2a908:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2a90c:	strd	r6, [sp, #8]
   2a910:	str	r8, [sp, #16]
   2a914:	str	lr, [sp, #20]
   2a918:	mov	r6, r0
   2a91c:	mov	r5, r1
   2a920:	mov	r7, r2
   2a924:	mov	r4, r3
   2a928:	bl	2a820 <flatcc_verify_buffer_header@@Base>
   2a92c:	cmp	r0, #0
   2a930:	bne	2a994 <flatcc_verify_struct_as_root@@Base+0x8c>
   2a934:	ldr	r2, [r6]
   2a938:	clz	r3, r2
   2a93c:	lsr	r3, r3, #5
   2a940:	cmp	r5, r2
   2a944:	orrcc	r3, r3, #1
   2a948:	cmp	r3, #0
   2a94c:	movne	r0, #18
   2a950:	bne	2a980 <flatcc_verify_struct_as_root@@Base+0x78>
   2a954:	adds	r4, r4, r2
   2a958:	movcs	r0, #10
   2a95c:	bcs	2a980 <flatcc_verify_struct_as_root@@Base+0x78>
   2a960:	cmp	r5, r4
   2a964:	movcc	r0, #9
   2a968:	bcc	2a980 <flatcc_verify_struct_as_root@@Base+0x78>
   2a96c:	ldrh	r3, [sp, #24]
   2a970:	sub	r3, r3, #1
   2a974:	and	r2, r2, r3
   2a978:	cmp	r2, #0
   2a97c:	movne	r0, #11
   2a980:	ldrd	r4, [sp]
   2a984:	ldrd	r6, [sp, #8]
   2a988:	ldr	r8, [sp, #16]
   2a98c:	add	sp, sp, #20
   2a990:	pop	{pc}		; (ldr pc, [sp], #4)
   2a994:	mov	r2, r7
   2a998:	mov	r1, r5
   2a99c:	mov	r0, r6
   2a9a0:	bl	2a820 <flatcc_verify_buffer_header@@Base>
   2a9a4:	b	2a980 <flatcc_verify_struct_as_root@@Base+0x78>

0002a9a8 <flatcc_verify_struct_as_typed_root@@Base>:
   2a9a8:	strd	r4, [sp, #-16]!
   2a9ac:	str	r6, [sp, #8]
   2a9b0:	str	lr, [sp, #12]
   2a9b4:	mov	r6, r0
   2a9b8:	mov	r5, r1
   2a9bc:	mov	r4, r3
   2a9c0:	bl	2a8b4 <flatcc_verify_typed_buffer_header@@Base>
   2a9c4:	cmp	r0, #0
   2a9c8:	bne	2aa18 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2a9cc:	ldr	r2, [r6]
   2a9d0:	clz	r3, r2
   2a9d4:	lsr	r3, r3, #5
   2a9d8:	cmp	r5, r2
   2a9dc:	orrcc	r3, r3, #1
   2a9e0:	cmp	r3, #0
   2a9e4:	movne	r0, #18
   2a9e8:	bne	2aa18 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2a9ec:	adds	r4, r4, r2
   2a9f0:	movcs	r0, #10
   2a9f4:	bcs	2aa18 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2a9f8:	cmp	r5, r4
   2a9fc:	movcc	r0, #9
   2aa00:	bcc	2aa18 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   2aa04:	ldrh	r3, [sp, #16]
   2aa08:	sub	r3, r3, #1
   2aa0c:	and	r2, r2, r3
   2aa10:	cmp	r2, #0
   2aa14:	movne	r0, #11
   2aa18:	ldrd	r4, [sp]
   2aa1c:	ldr	r6, [sp, #8]
   2aa20:	add	sp, sp, #12
   2aa24:	pop	{pc}		; (ldr pc, [sp], #4)

0002aa28 <flatcc_verify_table_as_root@@Base>:
   2aa28:	strd	r4, [sp, #-20]!	; 0xffffffec
   2aa2c:	strd	r6, [sp, #8]
   2aa30:	str	lr, [sp, #16]
   2aa34:	sub	sp, sp, #28
   2aa38:	mov	r4, r0
   2aa3c:	mov	r5, r1
   2aa40:	mov	r6, r2
   2aa44:	mov	r7, r3
   2aa48:	bl	2a820 <flatcc_verify_buffer_header@@Base>
   2aa4c:	cmp	r0, #0
   2aa50:	bne	2ab1c <flatcc_verify_table_as_root@@Base+0xf4>
   2aa54:	ldr	r3, [r4]
   2aa58:	mov	r2, #99	; 0x63
   2aa5c:	str	r2, [sp, #8]
   2aa60:	cmp	r3, #0
   2aa64:	moveq	r0, #15
   2aa68:	beq	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aa6c:	add	r2, r3, #4
   2aa70:	cmp	r5, r2
   2aa74:	movcc	r0, #15
   2aa78:	bcc	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aa7c:	tst	r3, #3
   2aa80:	movne	r0, #15
   2aa84:	bne	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aa88:	str	r3, [sp, #16]
   2aa8c:	ldr	r2, [r4, r3]
   2aa90:	subs	r2, r3, r2
   2aa94:	movmi	r0, #29
   2aa98:	bmi	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aa9c:	tst	r2, #1
   2aaa0:	movne	r0, #29
   2aaa4:	bne	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aaa8:	add	r0, r2, #2
   2aaac:	cmp	r5, r0
   2aab0:	movcc	r0, #27
   2aab4:	bcc	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aab8:	add	ip, r4, r2
   2aabc:	ldrh	r1, [r4, r2]
   2aac0:	strh	r1, [sp, #22]
   2aac4:	add	r2, r1, r2
   2aac8:	cmp	r5, r2
   2aacc:	movcc	r0, #30
   2aad0:	bcc	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aad4:	tst	r1, #1
   2aad8:	movne	r0, #30
   2aadc:	bne	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aae0:	cmp	r1, #3
   2aae4:	movls	r0, #28
   2aae8:	bls	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2aaec:	ldrh	r2, [r4, r0]
   2aaf0:	strh	r2, [sp, #20]
   2aaf4:	sub	r3, r5, r3
   2aaf8:	cmp	r3, r2
   2aafc:	movcc	r0, #20
   2ab00:	bcc	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2ab04:	str	ip, [sp, #12]
   2ab08:	str	r4, [sp]
   2ab0c:	str	r5, [sp, #4]
   2ab10:	mov	r0, sp
   2ab14:	blx	r7
   2ab18:	b	2ab2c <flatcc_verify_table_as_root@@Base+0x104>
   2ab1c:	mov	r2, r6
   2ab20:	mov	r1, r5
   2ab24:	mov	r0, r4
   2ab28:	bl	2a820 <flatcc_verify_buffer_header@@Base>
   2ab2c:	add	sp, sp, #28
   2ab30:	ldrd	r4, [sp]
   2ab34:	ldrd	r6, [sp, #8]
   2ab38:	add	sp, sp, #16
   2ab3c:	pop	{pc}		; (ldr pc, [sp], #4)

0002ab40 <flatcc_verify_table_as_typed_root@@Base>:
   2ab40:	strd	r4, [sp, #-16]!
   2ab44:	str	r6, [sp, #8]
   2ab48:	str	lr, [sp, #12]
   2ab4c:	sub	sp, sp, #24
   2ab50:	mov	r4, r0
   2ab54:	mov	r5, r1
   2ab58:	mov	r6, r3
   2ab5c:	bl	2a8b4 <flatcc_verify_typed_buffer_header@@Base>
   2ab60:	cmp	r0, #0
   2ab64:	beq	2ab7c <flatcc_verify_table_as_typed_root@@Base+0x3c>
   2ab68:	add	sp, sp, #24
   2ab6c:	ldrd	r4, [sp]
   2ab70:	ldr	r6, [sp, #8]
   2ab74:	add	sp, sp, #12
   2ab78:	pop	{pc}		; (ldr pc, [sp], #4)
   2ab7c:	ldr	r3, [r4]
   2ab80:	mov	r2, #99	; 0x63
   2ab84:	str	r2, [sp, #8]
   2ab88:	cmp	r3, #0
   2ab8c:	moveq	r0, #15
   2ab90:	beq	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2ab94:	add	r2, r3, #4
   2ab98:	cmp	r5, r2
   2ab9c:	movcc	r0, #15
   2aba0:	bcc	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2aba4:	tst	r3, #3
   2aba8:	movne	r0, #15
   2abac:	bne	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2abb0:	str	r3, [sp, #16]
   2abb4:	ldr	r2, [r4, r3]
   2abb8:	subs	r2, r3, r2
   2abbc:	movmi	r0, #29
   2abc0:	bmi	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2abc4:	tst	r2, #1
   2abc8:	movne	r0, #29
   2abcc:	bne	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2abd0:	add	r0, r2, #2
   2abd4:	cmp	r5, r0
   2abd8:	movcc	r0, #27
   2abdc:	bcc	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2abe0:	add	ip, r4, r2
   2abe4:	ldrh	r1, [r4, r2]
   2abe8:	strh	r1, [sp, #22]
   2abec:	add	r2, r1, r2
   2abf0:	cmp	r5, r2
   2abf4:	movcc	r0, #30
   2abf8:	bcc	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2abfc:	tst	r1, #1
   2ac00:	movne	r0, #30
   2ac04:	bne	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2ac08:	cmp	r1, #3
   2ac0c:	movls	r0, #28
   2ac10:	bls	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2ac14:	ldrh	r2, [r4, r0]
   2ac18:	strh	r2, [sp, #20]
   2ac1c:	sub	r3, r5, r3
   2ac20:	cmp	r3, r2
   2ac24:	movcc	r0, #20
   2ac28:	bcc	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2ac2c:	str	ip, [sp, #12]
   2ac30:	str	r4, [sp]
   2ac34:	str	r5, [sp, #4]
   2ac38:	mov	r0, sp
   2ac3c:	blx	r6
   2ac40:	b	2ab68 <flatcc_verify_table_as_typed_root@@Base+0x28>

0002ac44 <flatcc_verify_struct_as_nested_root@@Base>:
   2ac44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ac48:	strd	r6, [sp, #8]
   2ac4c:	str	r8, [sp, #16]
   2ac50:	str	lr, [sp, #20]
   2ac54:	sub	sp, sp, #8
   2ac58:	mov	r5, r0
   2ac5c:	mov	r4, r1
   2ac60:	mov	r8, r2
   2ac64:	mov	r7, r3
   2ac68:	ldrh	r6, [sp, #36]	; 0x24
   2ac6c:	mvn	r3, #0
   2ac70:	str	r3, [sp, #4]
   2ac74:	mov	r3, #1
   2ac78:	str	r3, [sp]
   2ac7c:	mov	r3, r6
   2ac80:	bl	29fec <flatcc_verify_vector_field@@Base>
   2ac84:	cmp	r0, #0
   2ac88:	bne	2ad00 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   2ac8c:	add	r1, r4, #2
   2ac90:	lsl	r1, r1, #1
   2ac94:	uxth	r1, r1
   2ac98:	ldrh	r3, [r5, #22]
   2ac9c:	cmp	r3, r1
   2aca0:	bls	2ace8 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2aca4:	ldr	r3, [r5, #12]
   2aca8:	ldrh	r3, [r3, r1]
   2acac:	cmp	r3, #0
   2acb0:	beq	2ace8 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2acb4:	ldr	r2, [r5, #16]
   2acb8:	add	r3, r3, r2
   2acbc:	ldr	r2, [r5]
   2acc0:	adds	r1, r2, r3
   2acc4:	beq	2ace8 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2acc8:	ldr	r3, [r2, r3]
   2accc:	add	r0, r1, r3
   2acd0:	ldr	r1, [r1, r3]
   2acd4:	str	r6, [sp]
   2acd8:	ldr	r3, [sp, #32]
   2acdc:	mov	r2, r7
   2ace0:	add	r0, r0, #4
   2ace4:	bl	2a908 <flatcc_verify_struct_as_root@@Base>
   2ace8:	add	sp, sp, #8
   2acec:	ldrd	r4, [sp]
   2acf0:	ldrd	r6, [sp, #8]
   2acf4:	ldr	r8, [sp, #16]
   2acf8:	add	sp, sp, #20
   2acfc:	pop	{pc}		; (ldr pc, [sp], #4)
   2ad00:	mvn	r3, #0
   2ad04:	str	r3, [sp, #4]
   2ad08:	mov	r3, #1
   2ad0c:	str	r3, [sp]
   2ad10:	mov	r3, r6
   2ad14:	mov	r2, r8
   2ad18:	mov	r1, r4
   2ad1c:	mov	r0, r5
   2ad20:	bl	29fec <flatcc_verify_vector_field@@Base>
   2ad24:	b	2ace8 <flatcc_verify_struct_as_nested_root@@Base+0xa4>

0002ad28 <flatcc_verify_table_as_nested_root@@Base>:
   2ad28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ad2c:	strd	r6, [sp, #8]
   2ad30:	str	r8, [sp, #16]
   2ad34:	str	lr, [sp, #20]
   2ad38:	sub	sp, sp, #32
   2ad3c:	mov	r5, r0
   2ad40:	mov	r4, r1
   2ad44:	mov	r8, r2
   2ad48:	mov	r6, r3
   2ad4c:	ldrh	r7, [sp, #56]	; 0x38
   2ad50:	mvn	r3, #0
   2ad54:	str	r3, [sp, #4]
   2ad58:	mov	r3, #1
   2ad5c:	str	r3, [sp]
   2ad60:	mov	r3, r7
   2ad64:	bl	29fec <flatcc_verify_vector_field@@Base>
   2ad68:	cmp	r0, #0
   2ad6c:	bne	2aeb0 <flatcc_verify_table_as_nested_root@@Base+0x188>
   2ad70:	add	r1, r4, #2
   2ad74:	lsl	r1, r1, #1
   2ad78:	uxth	r1, r1
   2ad7c:	ldrh	r3, [r5, #22]
   2ad80:	cmp	r3, r1
   2ad84:	bls	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ad88:	ldr	r3, [r5, #12]
   2ad8c:	ldrh	r3, [r3, r1]
   2ad90:	cmp	r3, #0
   2ad94:	beq	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ad98:	ldr	r2, [r5, #16]
   2ad9c:	add	r3, r3, r2
   2ada0:	ldr	r2, [r5]
   2ada4:	adds	r1, r2, r3
   2ada8:	beq	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2adac:	ldr	r3, [r2, r3]
   2adb0:	add	r7, r1, r3
   2adb4:	ldr	r4, [r1, r3]
   2adb8:	add	r8, r7, #4
   2adbc:	mov	r2, r6
   2adc0:	mov	r1, r4
   2adc4:	mov	r0, r8
   2adc8:	bl	2a820 <flatcc_verify_buffer_header@@Base>
   2adcc:	cmp	r0, #0
   2add0:	bne	2aeec <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   2add4:	ldr	r2, [r7, #4]
   2add8:	ldr	r3, [r5, #8]
   2addc:	sub	r3, r3, #1
   2ade0:	str	r3, [sp, #16]
   2ade4:	cmp	r3, #0
   2ade8:	moveq	r0, #3
   2adec:	beq	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2adf0:	cmp	r2, #0
   2adf4:	moveq	r0, #15
   2adf8:	beq	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2adfc:	add	r3, r2, #4
   2ae00:	cmp	r4, r3
   2ae04:	movcc	r0, #15
   2ae08:	bcc	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae0c:	tst	r2, #3
   2ae10:	movne	r0, #15
   2ae14:	bne	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae18:	str	r2, [sp, #24]
   2ae1c:	ldr	r3, [r8, r2]
   2ae20:	subs	r3, r2, r3
   2ae24:	movmi	r0, #29
   2ae28:	bmi	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae2c:	tst	r3, #1
   2ae30:	movne	r0, #29
   2ae34:	bne	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae38:	add	r0, r3, #2
   2ae3c:	cmp	r4, r0
   2ae40:	movcc	r0, #27
   2ae44:	bcc	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae48:	add	ip, r8, r3
   2ae4c:	ldrh	r1, [r8, r3]
   2ae50:	strh	r1, [sp, #30]
   2ae54:	add	r3, r1, r3
   2ae58:	cmp	r4, r3
   2ae5c:	movcc	r0, #30
   2ae60:	bcc	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae64:	tst	r1, #1
   2ae68:	movne	r0, #30
   2ae6c:	bne	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae70:	cmp	r1, #3
   2ae74:	movls	r0, #28
   2ae78:	bls	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae7c:	ldrh	r3, [r8, r0]
   2ae80:	strh	r3, [sp, #28]
   2ae84:	sub	r2, r4, r2
   2ae88:	cmp	r2, r3
   2ae8c:	movcc	r0, #20
   2ae90:	bcc	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2ae94:	str	ip, [sp, #20]
   2ae98:	str	r8, [sp, #8]
   2ae9c:	str	r4, [sp, #12]
   2aea0:	add	r0, sp, #8
   2aea4:	ldr	r3, [sp, #60]	; 0x3c
   2aea8:	blx	r3
   2aeac:	b	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2aeb0:	mvn	r3, #0
   2aeb4:	str	r3, [sp, #4]
   2aeb8:	mov	r3, #1
   2aebc:	str	r3, [sp]
   2aec0:	mov	r3, r7
   2aec4:	mov	r2, r8
   2aec8:	mov	r1, r4
   2aecc:	mov	r0, r5
   2aed0:	bl	29fec <flatcc_verify_vector_field@@Base>
   2aed4:	add	sp, sp, #32
   2aed8:	ldrd	r4, [sp]
   2aedc:	ldrd	r6, [sp, #8]
   2aee0:	ldr	r8, [sp, #16]
   2aee4:	add	sp, sp, #20
   2aee8:	pop	{pc}		; (ldr pc, [sp], #4)
   2aeec:	mov	r2, r6
   2aef0:	mov	r1, r4
   2aef4:	mov	r0, r8
   2aef8:	bl	2a820 <flatcc_verify_buffer_header@@Base>
   2aefc:	b	2aed4 <flatcc_verify_table_as_nested_root@@Base+0x1ac>

0002af00 <flatcc_verify_union_field@@Base>:
   2af00:	strd	r4, [sp, #-20]!	; 0xffffffec
   2af04:	strd	r6, [sp, #8]
   2af08:	str	lr, [sp, #16]
   2af0c:	sub	sp, sp, #36	; 0x24
   2af10:	add	ip, r1, #1
   2af14:	lsl	ip, ip, #1
   2af18:	uxth	ip, ip
   2af1c:	ldrh	lr, [r0, #22]
   2af20:	cmp	lr, ip
   2af24:	bls	2aff4 <flatcc_verify_union_field@@Base+0xf4>
   2af28:	ldr	r6, [r0, #12]
   2af2c:	ldrh	r4, [r6, ip]
   2af30:	cmp	r4, #0
   2af34:	beq	2aff4 <flatcc_verify_union_field@@Base+0xf4>
   2af38:	add	r5, r4, #1
   2af3c:	ldrh	r7, [r0, #20]
   2af40:	cmp	r5, r7
   2af44:	bhi	2b038 <flatcc_verify_union_field@@Base+0x138>
   2af48:	ldr	r7, [r0]
   2af4c:	add	ip, ip, #2
   2af50:	uxth	ip, ip
   2af54:	cmp	lr, ip
   2af58:	bls	2b040 <flatcc_verify_union_field@@Base+0x140>
   2af5c:	ldr	lr, [r0, #16]
   2af60:	add	r4, r4, lr
   2af64:	add	r5, r7, r4
   2af68:	ldrb	lr, [r7, r4]
   2af6c:	ldrh	r4, [r6, ip]
   2af70:	adds	ip, lr, #0
   2af74:	movne	ip, #1
   2af78:	cmp	r4, #0
   2af7c:	moveq	ip, #1
   2af80:	cmp	ip, #0
   2af84:	moveq	r0, #24
   2af88:	beq	2b024 <flatcc_verify_union_field@@Base+0x124>
   2af8c:	cmp	lr, #0
   2af90:	moveq	r0, #0
   2af94:	beq	2b024 <flatcc_verify_union_field@@Base+0x124>
   2af98:	mov	r6, r3
   2af9c:	mov	r4, r0
   2afa0:	add	r3, sp, #28
   2afa4:	bl	29bf4 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2afa8:	cmp	r0, #0
   2afac:	bne	2b024 <flatcc_verify_union_field@@Base+0x124>
   2afb0:	ldr	r3, [sp, #28]
   2afb4:	cmp	r3, #0
   2afb8:	beq	2b024 <flatcc_verify_union_field@@Base+0x124>
   2afbc:	ldr	r2, [r4]
   2afc0:	str	r2, [sp, #4]
   2afc4:	ldr	r1, [r4, #4]
   2afc8:	str	r1, [sp, #8]
   2afcc:	ldr	r1, [r4, #8]
   2afd0:	str	r1, [sp, #12]
   2afd4:	str	r3, [sp, #20]
   2afd8:	ldr	r3, [r2, r3]
   2afdc:	str	r3, [sp, #24]
   2afe0:	ldrb	r3, [r5]
   2afe4:	strb	r3, [sp, #16]
   2afe8:	add	r0, sp, #4
   2afec:	blx	r6
   2aff0:	b	2b024 <flatcc_verify_union_field@@Base+0x124>
   2aff4:	add	ip, ip, #2
   2aff8:	uxth	ip, ip
   2affc:	cmp	lr, ip
   2b000:	bls	2b018 <flatcc_verify_union_field@@Base+0x118>
   2b004:	ldr	r3, [r0, #12]
   2b008:	ldrh	r3, [r3, ip]
   2b00c:	cmp	r3, #0
   2b010:	movne	r0, #23
   2b014:	bne	2b024 <flatcc_verify_union_field@@Base+0x124>
   2b018:	cmp	r2, #0
   2b01c:	moveq	r0, r2
   2b020:	movne	r0, #21
   2b024:	add	sp, sp, #36	; 0x24
   2b028:	ldrd	r4, [sp]
   2b02c:	ldrd	r6, [sp, #8]
   2b030:	add	sp, sp, #16
   2b034:	pop	{pc}		; (ldr pc, [sp], #4)
   2b038:	mov	r0, #13
   2b03c:	b	2b024 <flatcc_verify_union_field@@Base+0x124>
   2b040:	ldr	ip, [r0, #16]
   2b044:	add	r4, r4, ip
   2b048:	add	r5, r7, r4
   2b04c:	ldrb	lr, [r7, r4]
   2b050:	b	2af8c <flatcc_verify_union_field@@Base+0x8c>

0002b054 <flatcc_verify_union_vector_field@@Base>:
   2b054:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2b058:	strd	r6, [sp, #8]
   2b05c:	strd	r8, [sp, #16]
   2b060:	str	sl, [sp, #24]
   2b064:	str	lr, [sp, #28]
   2b068:	sub	sp, sp, #40	; 0x28
   2b06c:	sub	r7, r1, #1
   2b070:	uxth	r7, r7
   2b074:	add	r5, r1, #1
   2b078:	lsl	r5, r5, #1
   2b07c:	uxth	r5, r5
   2b080:	ldrh	lr, [r0, #22]
   2b084:	cmp	lr, r5
   2b088:	bls	2b09c <flatcc_verify_union_vector_field@@Base+0x48>
   2b08c:	ldr	ip, [r0, #12]
   2b090:	ldrh	ip, [ip, r5]
   2b094:	cmp	ip, #0
   2b098:	bne	2b0d0 <flatcc_verify_union_vector_field@@Base+0x7c>
   2b09c:	add	ip, r5, #2
   2b0a0:	uxth	ip, ip
   2b0a4:	cmp	lr, ip
   2b0a8:	ldrhi	lr, [r0, #12]
   2b0ac:	ldrhhi	ip, [lr, ip]
   2b0b0:	movls	ip, #0
   2b0b4:	uxth	lr, ip
   2b0b8:	adds	ip, r2, #0
   2b0bc:	movne	ip, #1
   2b0c0:	cmp	lr, #0
   2b0c4:	movne	ip, #0
   2b0c8:	cmp	ip, #0
   2b0cc:	bne	2b2d8 <flatcc_verify_union_vector_field@@Base+0x284>
   2b0d0:	mov	r9, r3
   2b0d4:	mov	r8, r2
   2b0d8:	mov	r6, r1
   2b0dc:	mov	r4, r0
   2b0e0:	mvn	r3, #0
   2b0e4:	str	r3, [sp, #4]
   2b0e8:	mov	r3, #1
   2b0ec:	str	r3, [sp]
   2b0f0:	mov	r1, r7
   2b0f4:	bl	29fec <flatcc_verify_vector_field@@Base>
   2b0f8:	subs	sl, r0, #0
   2b0fc:	bne	2b1f8 <flatcc_verify_union_vector_field@@Base+0x1a4>
   2b100:	ldrh	r3, [r4, #22]
   2b104:	cmp	r3, r5
   2b108:	bls	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b10c:	ldr	r3, [r4, #12]
   2b110:	ldrh	r3, [r3, r5]
   2b114:	cmp	r3, #0
   2b118:	beq	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b11c:	ldr	r2, [r4, #16]
   2b120:	add	r3, r3, r2
   2b124:	ldr	r2, [r4]
   2b128:	adds	r1, r2, r3
   2b12c:	beq	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b130:	ldr	r3, [r2, r3]
   2b134:	add	r5, r1, r3
   2b138:	ldr	r7, [r1, r3]
   2b13c:	add	r3, sp, #36	; 0x24
   2b140:	mov	r2, r8
   2b144:	mov	r1, r6
   2b148:	mov	r0, r4
   2b14c:	bl	29bf4 <flatcc_emitter_copy_buffer@@Base+0xe4>
   2b150:	subs	sl, r0, #0
   2b154:	bne	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b158:	ldr	r3, [sp, #36]	; 0x24
   2b15c:	cmp	r3, #0
   2b160:	beq	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b164:	ldr	r1, [r4]
   2b168:	ldr	r2, [r1, r3]
   2b16c:	ldr	r0, [r4, #8]
   2b170:	cmp	r0, #0
   2b174:	movle	sl, #3
   2b178:	ble	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b17c:	add	r2, r3, r2
   2b180:	cmp	r3, r2
   2b184:	movcs	sl, #16
   2b188:	bcs	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b18c:	ldr	ip, [r4, #4]
   2b190:	add	r3, r2, #4
   2b194:	cmp	ip, r3
   2b198:	movcc	sl, #16
   2b19c:	bcc	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b1a0:	tst	r3, #3
   2b1a4:	bne	2b2e0 <flatcc_verify_union_vector_field@@Base+0x28c>
   2b1a8:	add	r6, r1, r2
   2b1ac:	ldr	lr, [r1, r2]
   2b1b0:	cmn	lr, #-1073741823	; 0xc0000001
   2b1b4:	bhi	2b2e0 <flatcc_verify_union_vector_field@@Base+0x28c>
   2b1b8:	sub	r4, ip, r3
   2b1bc:	cmp	r4, lr, lsl #2
   2b1c0:	bcc	2b2e0 <flatcc_verify_union_vector_field@@Base+0x28c>
   2b1c4:	cmp	r7, lr
   2b1c8:	bne	2b2c8 <flatcc_verify_union_vector_field@@Base+0x274>
   2b1cc:	str	r1, [sp, #12]
   2b1d0:	str	ip, [sp, #16]
   2b1d4:	sub	r0, r0, #1
   2b1d8:	str	r0, [sp, #20]
   2b1dc:	cmp	lr, #0
   2b1e0:	beq	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b1e4:	add	r4, r5, #4
   2b1e8:	add	lr, lr, #4
   2b1ec:	add	r5, lr, r5
   2b1f0:	rsb	r7, r1, #4
   2b1f4:	b	2b294 <flatcc_verify_union_vector_field@@Base+0x240>
   2b1f8:	mvn	r3, #0
   2b1fc:	str	r3, [sp, #4]
   2b200:	mov	r3, #1
   2b204:	str	r3, [sp]
   2b208:	mov	r2, r8
   2b20c:	mov	r1, r7
   2b210:	mov	r0, r4
   2b214:	bl	29fec <flatcc_verify_vector_field@@Base>
   2b218:	mov	sl, r0
   2b21c:	mov	r0, sl
   2b220:	add	sp, sp, #40	; 0x28
   2b224:	ldrd	r4, [sp]
   2b228:	ldrd	r6, [sp, #8]
   2b22c:	ldrd	r8, [sp, #16]
   2b230:	ldr	sl, [sp, #24]
   2b234:	add	sp, sp, #28
   2b238:	pop	{pc}		; (ldr pc, [sp], #4)
   2b23c:	ldr	r2, [r1, r2]
   2b240:	cmn	r2, #-1073741823	; 0xc0000001
   2b244:	movhi	sl, #25
   2b248:	bhi	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b24c:	sub	r3, ip, r3
   2b250:	lsl	r2, r2, #2
   2b254:	cmp	r3, r2
   2b258:	movcc	sl, #26
   2b25c:	b	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b260:	ldrb	r1, [r4]
   2b264:	cmp	r1, #0
   2b268:	beq	2b2d0 <flatcc_verify_union_vector_field@@Base+0x27c>
   2b26c:	strb	r1, [sp, #24]
   2b270:	str	r2, [sp, #28]
   2b274:	str	r3, [sp, #32]
   2b278:	add	r0, sp, #12
   2b27c:	blx	r9
   2b280:	cmp	r0, #0
   2b284:	bne	2b2b8 <flatcc_verify_union_vector_field@@Base+0x264>
   2b288:	add	r4, r4, #1
   2b28c:	cmp	r5, r4
   2b290:	beq	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b294:	add	r2, r7, r6
   2b298:	ldr	r3, [r6, #4]!
   2b29c:	cmp	r3, #0
   2b2a0:	bne	2b260 <flatcc_verify_union_vector_field@@Base+0x20c>
   2b2a4:	ldrb	r3, [r4]
   2b2a8:	cmp	r3, #0
   2b2ac:	beq	2b288 <flatcc_verify_union_vector_field@@Base+0x234>
   2b2b0:	mov	sl, #32
   2b2b4:	b	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b2b8:	add	r0, sp, #12
   2b2bc:	blx	r9
   2b2c0:	mov	sl, r0
   2b2c4:	b	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b2c8:	mov	sl, #34	; 0x22
   2b2cc:	b	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b2d0:	mov	sl, #33	; 0x21
   2b2d4:	b	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b2d8:	mov	sl, #22
   2b2dc:	b	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b2e0:	tst	r3, #3
   2b2e4:	beq	2b23c <flatcc_verify_union_vector_field@@Base+0x1e8>
   2b2e8:	mov	sl, #16
   2b2ec:	b	2b21c <flatcc_verify_union_vector_field@@Base+0x1c8>
   2b2f0:	sub	sp, sp, #8
   2b2f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2b2f8:	strd	r6, [sp, #8]
   2b2fc:	strd	r8, [sp, #16]
   2b300:	str	sl, [sp, #24]
   2b304:	str	lr, [sp, #28]
   2b308:	add	r1, sp, #28
   2b30c:	stmib	r1, {r2, r3}
   2b310:	ldrd	r2, [sp, #32]
   2b314:	ldr	lr, [sp, #40]	; 0x28
   2b318:	orrs	r1, r2, r3
   2b31c:	beq	2b3d8 <flatcc_verify_union_vector_field@@Base+0x384>
   2b320:	mov	r8, #0
   2b324:	lsr	r9, r3, #22
   2b328:	lsl	r9, r9, #22
   2b32c:	orrs	r1, r8, r9
   2b330:	subeq	ip, lr, #10
   2b334:	moveq	r9, #0
   2b338:	moveq	r8, r9
   2b33c:	movteq	r8, #65472	; 0xffc0
   2b340:	bne	2b370 <flatcc_verify_union_vector_field@@Base+0x31c>
   2b344:	lsl	r1, r3, #10
   2b348:	orr	r1, r1, r2, lsr #22
   2b34c:	lsl	lr, r2, #10
   2b350:	mov	r2, lr
   2b354:	mov	r3, r1
   2b358:	mov	lr, ip
   2b35c:	mov	r6, r9
   2b360:	and	r7, r1, r8
   2b364:	sub	ip, ip, #10
   2b368:	orrs	r1, r6, r7
   2b36c:	beq	2b344 <flatcc_verify_union_vector_field@@Base+0x2f0>
   2b370:	cmp	r2, #0
   2b374:	sbcs	r1, r3, #0
   2b378:	blt	2b3a4 <flatcc_verify_union_vector_field@@Base+0x350>
   2b37c:	sub	r1, lr, #1
   2b380:	adds	r4, r2, r2
   2b384:	adc	r5, r3, r3
   2b388:	mov	r2, r4
   2b38c:	mov	r3, r5
   2b390:	mov	lr, r1
   2b394:	sub	r1, r1, #1
   2b398:	cmp	r4, #0
   2b39c:	sbcs	ip, r5, #0
   2b3a0:	bge	2b380 <flatcc_verify_union_vector_field@@Base+0x32c>
   2b3a4:	strd	r2, [sp, #32]
   2b3a8:	str	lr, [sp, #40]	; 0x28
   2b3ac:	strd	r2, [r0]
   2b3b0:	ldrd	r2, [sp, #40]	; 0x28
   2b3b4:	strd	r2, [r0, #8]
   2b3b8:	ldrd	r4, [sp]
   2b3bc:	ldrd	r6, [sp, #8]
   2b3c0:	ldrd	r8, [sp, #16]
   2b3c4:	ldr	sl, [sp, #24]
   2b3c8:	ldr	lr, [sp, #28]
   2b3cc:	add	sp, sp, #32
   2b3d0:	add	sp, sp, #8
   2b3d4:	bx	lr
   2b3d8:	movw	r3, #8072	; 0x1f88
   2b3dc:	movt	r3, #4
   2b3e0:	mov	r2, #260	; 0x104
   2b3e4:	movw	r1, #10248	; 0x2808
   2b3e8:	movt	r1, #4
   2b3ec:	movw	r0, #10336	; 0x2860
   2b3f0:	movt	r0, #4
   2b3f4:	bl	145f0 <__assert_fail@plt>

0002b3f8 <grisu3_diy_fp_encode_double@@Base>:
   2b3f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b3fc:	strd	r6, [sp, #8]
   2b400:	strd	r8, [sp, #16]
   2b404:	strd	sl, [sp, #24]
   2b408:	str	lr, [sp, #32]
   2b40c:	sub	sp, sp, #92	; 0x5c
   2b410:	mov	r6, r3
   2b414:	ldr	r7, [sp, #128]	; 0x80
   2b418:	cmp	r7, #0
   2b41c:	movne	r7, #4
   2b420:	sub	r5, r2, r3
   2b424:	strd	r0, [sp, #72]	; 0x48
   2b428:	mov	r3, #0
   2b42c:	str	r3, [sp, #80]	; 0x50
   2b430:	add	r0, sp, #72	; 0x48
   2b434:	ldrd	r2, [sp, #80]	; 0x50
   2b438:	strd	r2, [sp]
   2b43c:	ldm	r0, {r2, r3}
   2b440:	bl	2b2f0 <flatcc_verify_union_vector_field@@Base+0x29c>
   2b444:	ldr	r4, [sp, #72]	; 0x48
   2b448:	ldr	r3, [sp, #76]	; 0x4c
   2b44c:	ldr	r1, [sp, #80]	; 0x50
   2b450:	rsb	ip, r1, #0
   2b454:	lsl	ip, r7, ip
   2b458:	cmn	r5, #348	; 0x15c
   2b45c:	blt	2b65c <grisu3_diy_fp_encode_double@@Base+0x264>
   2b460:	cmp	r5, #348	; 0x15c
   2b464:	bge	2b678 <grisu3_diy_fp_encode_double@@Base+0x280>
   2b468:	add	r0, r5, #348	; 0x15c
   2b46c:	add	r2, r0, #7
   2b470:	cmp	r0, #0
   2b474:	movlt	r0, r2
   2b478:	asr	r0, r0, #3
   2b47c:	movw	r2, #8072	; 0x1f88
   2b480:	movt	r2, #4
   2b484:	add	r0, r2, r0, lsl #4
   2b488:	ldrsh	r2, [r0, #66]	; 0x42
   2b48c:	ldr	r7, [r0, #56]	; 0x38
   2b490:	ldr	lr, [r0, #60]	; 0x3c
   2b494:	ldrsh	r0, [r0, #64]	; 0x40
   2b498:	str	r0, [sp, #44]	; 0x2c
   2b49c:	cmp	r5, r2
   2b4a0:	blt	2b694 <grisu3_diy_fp_encode_double@@Base+0x29c>
   2b4a4:	add	r0, r2, #7
   2b4a8:	cmp	r5, r0
   2b4ac:	bgt	2b6b0 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   2b4b0:	cmp	r5, r2
   2b4b4:	beq	2b564 <grisu3_diy_fp_encode_double@@Base+0x16c>
   2b4b8:	sub	r2, r5, r2
   2b4bc:	sub	r2, r2, #1
   2b4c0:	cmp	r2, #6
   2b4c4:	bhi	2b6cc <grisu3_diy_fp_encode_double@@Base+0x2d4>
   2b4c8:	ldr	r0, [pc, #1052]	; 2b8ec <grisu3_diy_fp_encode_double@@Base+0x4f4>
   2b4cc:	add	sl, r0, r2, lsl #4
   2b4d0:	ldr	r0, [r0, r2, lsl #4]
   2b4d4:	ldr	r5, [sl, #4]
   2b4d8:	umull	r8, r9, r4, r5
   2b4dc:	strd	r8, [sp, #16]
   2b4e0:	umull	r8, r9, r3, r0
   2b4e4:	strd	r8, [sp, #24]
   2b4e8:	umull	r4, r5, r4, r0
   2b4ec:	mov	r8, r5
   2b4f0:	mov	r9, #0
   2b4f4:	ldr	r0, [sp, #24]
   2b4f8:	adds	r0, r8, r0
   2b4fc:	adc	r4, r9, r9
   2b500:	adds	r0, r0, #-2147483648	; 0x80000000
   2b504:	adc	r4, r4, r9
   2b508:	ldr	r5, [sp, #16]
   2b50c:	adds	r0, r0, r5
   2b510:	adc	r8, r4, r9
   2b514:	mov	r4, r8
   2b518:	mov	fp, r9
   2b51c:	ldr	r0, [sp, #28]
   2b520:	ldr	r5, [sp, #20]
   2b524:	adds	r0, r0, r5
   2b528:	str	r0, [sp, #32]
   2b52c:	adc	r0, r9, r9
   2b530:	str	r0, [sp, #36]	; 0x24
   2b534:	ldrd	r8, [sp, #32]
   2b538:	ldr	r0, [sl, #4]
   2b53c:	umlal	r8, r9, r0, r3
   2b540:	adds	r4, r4, r8
   2b544:	adc	r3, fp, r9
   2b548:	ldr	r0, [sl, #8]
   2b54c:	add	r1, r1, r0
   2b550:	add	r1, r1, #64	; 0x40
   2b554:	add	r6, r6, #1
   2b558:	add	r2, r6, r2
   2b55c:	cmp	r2, #19
   2b560:	addgt	ip, ip, #4
   2b564:	mov	r2, #0
   2b568:	umull	sl, fp, r4, lr
   2b56c:	umull	r8, r9, r3, r7
   2b570:	umull	r4, r5, r4, r7
   2b574:	mov	r6, r5
   2b578:	mov	r7, r2
   2b57c:	adds	r0, r6, r8
   2b580:	adc	r4, r2, r2
   2b584:	adds	r0, r0, #-2147483648	; 0x80000000
   2b588:	adc	r4, r4, r2
   2b58c:	adds	r0, r0, sl
   2b590:	adc	r4, r4, r2
   2b594:	mov	r0, r4
   2b598:	mov	r5, r2
   2b59c:	mov	r8, r2
   2b5a0:	adds	r2, r9, fp
   2b5a4:	str	r2, [sp, #8]
   2b5a8:	adc	r2, r7, r7
   2b5ac:	str	r2, [sp, #12]
   2b5b0:	ldrd	r6, [sp, #8]
   2b5b4:	umlal	r6, r7, lr, r3
   2b5b8:	adds	r0, r0, r6
   2b5bc:	adc	r5, r5, r7
   2b5c0:	ldr	r3, [sp, #44]	; 0x2c
   2b5c4:	add	r1, r1, r3
   2b5c8:	add	r6, r1, #64	; 0x40
   2b5cc:	cmp	ip, r8
   2b5d0:	movne	r7, #9
   2b5d4:	moveq	r7, #8
   2b5d8:	add	r7, ip, r7
   2b5dc:	str	r0, [sp, #72]	; 0x48
   2b5e0:	str	r5, [sp, #76]	; 0x4c
   2b5e4:	str	r6, [sp, #80]	; 0x50
   2b5e8:	ldrd	r2, [sp, #80]	; 0x50
   2b5ec:	strd	r2, [sp]
   2b5f0:	add	r3, sp, #72	; 0x48
   2b5f4:	ldm	r3, {r2, r3}
   2b5f8:	add	r0, sp, #56	; 0x38
   2b5fc:	bl	2b2f0 <flatcc_verify_union_vector_field@@Base+0x29c>
   2b600:	ldr	lr, [sp, #56]	; 0x38
   2b604:	str	lr, [sp, #72]	; 0x48
   2b608:	ldr	r3, [sp, #60]	; 0x3c
   2b60c:	str	r3, [sp, #76]	; 0x4c
   2b610:	mov	ip, r3
   2b614:	ldr	r4, [sp, #64]	; 0x40
   2b618:	sub	r0, r6, r4
   2b61c:	lsl	r0, r7, r0
   2b620:	add	r2, r4, #64	; 0x40
   2b624:	movw	r3, #64526	; 0xfc0e
   2b628:	movt	r3, #65535	; 0xffff
   2b62c:	cmp	r2, r3
   2b630:	movge	r5, #0
   2b634:	bge	2b718 <grisu3_diy_fp_encode_double@@Base+0x320>
   2b638:	mvn	r3, #1072	; 0x430
   2b63c:	cmp	r2, r3
   2b640:	blt	2b6e8 <grisu3_diy_fp_encode_double@@Base+0x2f0>
   2b644:	add	r3, r4, #1136	; 0x470
   2b648:	add	r3, r3, #2
   2b64c:	rsb	r5, r3, #64	; 0x40
   2b650:	cmp	r5, #60	; 0x3c
   2b654:	bgt	2b6ec <grisu3_diy_fp_encode_double@@Base+0x2f4>
   2b658:	b	2b718 <grisu3_diy_fp_encode_double@@Base+0x320>
   2b65c:	ldr	r3, [pc, #652]	; 2b8f0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2b660:	mov	r2, #80	; 0x50
   2b664:	movw	r1, #10348	; 0x286c
   2b668:	movt	r1, #4
   2b66c:	movw	r0, #10436	; 0x28c4
   2b670:	movt	r0, #4
   2b674:	bl	145f0 <__assert_fail@plt>
   2b678:	ldr	r3, [pc, #624]	; 2b8f0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2b67c:	mov	r2, #81	; 0x51
   2b680:	movw	r1, #10348	; 0x286c
   2b684:	movt	r1, #4
   2b688:	movw	r0, #10468	; 0x28e4
   2b68c:	movt	r0, #4
   2b690:	bl	145f0 <__assert_fail@plt>
   2b694:	ldr	r3, [pc, #596]	; 2b8f0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2b698:	mov	r2, #88	; 0x58
   2b69c:	movw	r1, #10348	; 0x286c
   2b6a0:	movt	r1, #4
   2b6a4:	movw	r0, #10512	; 0x2910
   2b6a8:	movt	r0, #4
   2b6ac:	bl	145f0 <__assert_fail@plt>
   2b6b0:	ldr	r3, [pc, #568]	; 2b8f0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   2b6b4:	mov	r2, #89	; 0x59
   2b6b8:	movw	r1, #10348	; 0x286c
   2b6bc:	movt	r1, #4
   2b6c0:	movw	r0, #10528	; 0x2920
   2b6c4:	movt	r0, #4
   2b6c8:	bl	145f0 <__assert_fail@plt>
   2b6cc:	ldr	r3, [pc, #544]	; 2b8f4 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   2b6d0:	mov	r2, #185	; 0xb9
   2b6d4:	movw	r1, #10348	; 0x286c
   2b6d8:	movt	r1, #4
   2b6dc:	movw	r0, #10556	; 0x293c
   2b6e0:	movt	r0, #4
   2b6e4:	bl	145f0 <__assert_fail@plt>
   2b6e8:	mov	r3, #0
   2b6ec:	rsb	r3, r3, #2
   2b6f0:	rsb	r1, r3, #32
   2b6f4:	sub	r2, r3, #32
   2b6f8:	lsr	lr, lr, r3
   2b6fc:	orr	lr, lr, ip, lsl r1
   2b700:	orr	lr, lr, ip, lsr r2
   2b704:	lsr	ip, ip, r3
   2b708:	add	r4, r4, r3
   2b70c:	asr	r0, r0, r3
   2b710:	add	r0, r0, #9
   2b714:	mov	r5, #62	; 0x3e
   2b718:	rsb	r6, r5, #32
   2b71c:	sub	r1, r5, #32
   2b720:	lsr	sl, lr, r5
   2b724:	orr	sl, sl, ip, lsl r6
   2b728:	orr	sl, sl, ip, lsr r1
   2b72c:	lsr	fp, ip, r5
   2b730:	add	r4, r5, r4
   2b734:	sub	ip, r5, #1
   2b738:	mov	r1, #1
   2b73c:	and	r1, lr, r1, lsl ip
   2b740:	lsl	r1, r1, #3
   2b744:	mov	lr, #8
   2b748:	lsl	ip, lr, ip
   2b74c:	add	lr, r0, ip
   2b750:	cmp	lr, r5
   2b754:	bgt	2b788 <grisu3_diy_fp_encode_double@@Base+0x390>
   2b758:	adds	sl, sl, #1
   2b75c:	adc	fp, fp, #0
   2b760:	mov	r6, #0
   2b764:	and	r7, fp, #2097152	; 0x200000
   2b768:	orrs	r3, r6, r7
   2b76c:	beq	2b788 <grisu3_diy_fp_encode_double@@Base+0x390>
   2b770:	lsr	r5, sl, #1
   2b774:	orr	r5, r5, fp, lsl #31
   2b778:	lsr	r6, fp, #1
   2b77c:	mov	sl, r5
   2b780:	mov	fp, r6
   2b784:	add	r4, r4, #1
   2b788:	mvn	r6, #0
   2b78c:	movw	r7, #65535	; 0xffff
   2b790:	movt	r7, #31
   2b794:	cmp	fp, r7
   2b798:	cmpeq	sl, r6
   2b79c:	bls	2b7d4 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   2b7a0:	mov	r2, sl
   2b7a4:	mov	r3, fp
   2b7a8:	lsr	r5, r2, #1
   2b7ac:	orr	r5, r5, r3, lsl #31
   2b7b0:	lsr	r8, r3, #1
   2b7b4:	mov	r2, r5
   2b7b8:	mov	r3, r8
   2b7bc:	add	r4, r4, #1
   2b7c0:	cmp	r8, r7
   2b7c4:	cmpeq	r5, r6
   2b7c8:	bhi	2b7a8 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   2b7cc:	mov	sl, r5
   2b7d0:	mov	fp, r8
   2b7d4:	movw	r5, #64462	; 0xfbce
   2b7d8:	movt	r5, #65535	; 0xffff
   2b7dc:	cmp	r4, r5
   2b7e0:	blt	2b8e0 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2b7e4:	mvn	r5, #1072	; 0x430
   2b7e8:	cmp	r4, r5
   2b7ec:	blt	2b8a8 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   2b7f0:	mov	r6, #0
   2b7f4:	and	r7, fp, #1048576	; 0x100000
   2b7f8:	orrs	r3, r6, r7
   2b7fc:	bne	2b854 <grisu3_diy_fp_encode_double@@Base+0x45c>
   2b800:	sub	r5, r4, #1
   2b804:	movw	r7, #64462	; 0xfbce
   2b808:	movt	r7, #65535	; 0xffff
   2b80c:	mov	r8, #0
   2b810:	mov	r2, sl
   2b814:	mov	r3, fp
   2b818:	mov	sl, r7
   2b81c:	adds	r4, r2, r2
   2b820:	adc	r9, r3, r3
   2b824:	mov	r2, r4
   2b828:	mov	r3, r9
   2b82c:	mov	r4, r5
   2b830:	cmp	r5, sl
   2b834:	beq	2b8bc <grisu3_diy_fp_encode_double@@Base+0x4c4>
   2b838:	mov	r6, r8
   2b83c:	and	r7, r9, #1048576	; 0x100000
   2b840:	sub	r5, r5, #1
   2b844:	orrs	r9, r6, r7
   2b848:	beq	2b81c <grisu3_diy_fp_encode_double@@Base+0x424>
   2b84c:	mov	sl, r2
   2b850:	mov	fp, r3
   2b854:	add	r4, r4, #1072	; 0x430
   2b858:	add	r4, r4, #3
   2b85c:	ubfx	r3, fp, #0, #20
   2b860:	mov	r6, sl
   2b864:	orr	r7, r3, r4, lsl #20
   2b868:	ldr	r3, [sp, #132]	; 0x84
   2b86c:	strd	r6, [r3]
   2b870:	sub	r0, ip, r0
   2b874:	cmp	lr, r1
   2b878:	movgt	lr, #0
   2b87c:	movle	lr, #1
   2b880:	cmp	r0, r1
   2b884:	movlt	r0, lr
   2b888:	orrge	r0, lr, #1
   2b88c:	add	sp, sp, #92	; 0x5c
   2b890:	ldrd	r4, [sp]
   2b894:	ldrd	r6, [sp, #8]
   2b898:	ldrd	r8, [sp, #16]
   2b89c:	ldrd	sl, [sp, #24]
   2b8a0:	add	sp, sp, #32
   2b8a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2b8a8:	movw	r5, #64462	; 0xfbce
   2b8ac:	movt	r5, #65535	; 0xffff
   2b8b0:	cmp	r4, r5
   2b8b4:	bne	2b854 <grisu3_diy_fp_encode_double@@Base+0x45c>
   2b8b8:	b	2b8c4 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2b8bc:	mov	sl, r2
   2b8c0:	mov	fp, r9
   2b8c4:	mov	r4, #0
   2b8c8:	and	r5, fp, #1048576	; 0x100000
   2b8cc:	orrs	r3, r4, r5
   2b8d0:	beq	2b85c <grisu3_diy_fp_encode_double@@Base+0x464>
   2b8d4:	movw	r4, #64462	; 0xfbce
   2b8d8:	movt	r4, #65535	; 0xffff
   2b8dc:	b	2b854 <grisu3_diy_fp_encode_double@@Base+0x45c>
   2b8e0:	mov	r6, #0
   2b8e4:	mov	r7, #0
   2b8e8:	b	2b868 <grisu3_diy_fp_encode_double@@Base+0x470>
   2b8ec:	andeq	r2, r4, r0, asr r5
   2b8f0:	andeq	r1, r4, r0, lsr #31
   2b8f4:	andeq	r2, r4, r0, lsr r5
   2b8f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2b8fc:	strd	r6, [sp, #8]
   2b900:	strd	r8, [sp, #16]
   2b904:	strd	sl, [sp, #24]
   2b908:	str	lr, [sp, #32]
   2b90c:	sub	sp, sp, #44	; 0x2c
   2b910:	mov	ip, r2
   2b914:	str	r2, [sp, #12]
   2b918:	mov	r2, #0
   2b91c:	mov	r3, #0
   2b920:	strd	r2, [ip]
   2b924:	cmp	r1, #1000	; 0x3e8
   2b928:	addle	r1, r1, #1
   2b92c:	addle	r1, r0, r1
   2b930:	addgt	r1, r0, #1000	; 0x3e8
   2b934:	addgt	r1, r1, #1
   2b938:	cmp	r1, r0
   2b93c:	moveq	r6, r0
   2b940:	beq	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2b944:	ldrb	r3, [r0]
   2b948:	cmp	r3, #45	; 0x2d
   2b94c:	movne	r3, r0
   2b950:	movne	r2, #0
   2b954:	strne	r2, [sp, #16]
   2b958:	beq	2ba44 <grisu3_diy_fp_encode_double@@Base+0x64c>
   2b95c:	ldrb	r4, [r3]
   2b960:	cmp	r4, #48	; 0x30
   2b964:	beq	2ba5c <grisu3_diy_fp_encode_double@@Base+0x664>
   2b968:	sub	r2, r4, #49	; 0x31
   2b96c:	uxtb	r2, r2
   2b970:	cmp	r2, #8
   2b974:	bhi	2bab4 <grisu3_diy_fp_encode_double@@Base+0x6bc>
   2b978:	add	ip, r3, #1
   2b97c:	sub	r4, r4, #48	; 0x30
   2b980:	asr	r5, r4, #31
   2b984:	cmp	r1, ip
   2b988:	beq	2c134 <grisu3_diy_fp_encode_double@@Base+0xd3c>
   2b98c:	ldrb	sl, [ip]
   2b990:	sub	r3, sl, #48	; 0x30
   2b994:	uxtb	r3, r3
   2b998:	cmp	r3, #9
   2b99c:	movhi	r6, ip
   2b9a0:	bhi	2c2dc <grisu3_diy_fp_encode_double@@Base+0xee4>
   2b9a4:	add	r2, ip, #1
   2b9a8:	mov	lr, r1
   2b9ac:	add	r9, pc, #964	; 0x3c4
   2b9b0:	ldrd	r8, [r9]
   2b9b4:	mov	r6, r2
   2b9b8:	lsl	fp, r5, #2
   2b9bc:	lsl	r3, r4, #2
   2b9c0:	orr	r7, fp, r4, lsr #30
   2b9c4:	adds	r3, r3, r4
   2b9c8:	adc	r7, r7, r5
   2b9cc:	adds	r3, r3, r3
   2b9d0:	adc	r7, r7, r7
   2b9d4:	uxtb	sl, sl
   2b9d8:	mov	fp, #0
   2b9dc:	adds	r3, r3, sl
   2b9e0:	adc	r7, r7, fp
   2b9e4:	subs	r4, r3, #48	; 0x30
   2b9e8:	sbc	r5, r7, #0
   2b9ec:	cmp	r2, lr
   2b9f0:	beq	2c13c <grisu3_diy_fp_encode_double@@Base+0xd44>
   2b9f4:	ldrb	sl, [r2], #1
   2b9f8:	sub	r3, sl, #48	; 0x30
   2b9fc:	uxtb	r3, r3
   2ba00:	cmp	r3, #9
   2ba04:	bhi	2c2dc <grisu3_diy_fp_encode_double@@Base+0xee4>
   2ba08:	cmp	r5, r9
   2ba0c:	cmpeq	r4, r8
   2ba10:	bls	2b9b4 <grisu3_diy_fp_encode_double@@Base+0x5bc>
   2ba14:	cmp	sl, #52	; 0x34
   2ba18:	movls	sl, #0
   2ba1c:	movhi	sl, #1
   2ba20:	adds	r4, r4, sl
   2ba24:	adc	r5, r5, #0
   2ba28:	sub	r7, r6, ip
   2ba2c:	cmp	r1, r6
   2ba30:	moveq	r6, #0
   2ba34:	beq	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ba38:	mov	r3, #1
   2ba3c:	str	r3, [sp, #20]
   2ba40:	b	2c2e8 <grisu3_diy_fp_encode_double@@Base+0xef0>
   2ba44:	add	r3, r0, #1
   2ba48:	cmp	r1, r3
   2ba4c:	beq	2c11c <grisu3_diy_fp_encode_double@@Base+0xd24>
   2ba50:	mov	r2, #1
   2ba54:	str	r2, [sp, #16]
   2ba58:	b	2b95c <grisu3_diy_fp_encode_double@@Base+0x564>
   2ba5c:	add	ip, r3, #1
   2ba60:	cmp	r1, ip
   2ba64:	moveq	r6, #0
   2ba68:	beq	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2ba6c:	ldrb	r2, [r3, #1]
   2ba70:	orr	lr, r2, #32
   2ba74:	cmp	lr, #120	; 0x78
   2ba78:	beq	2c124 <grisu3_diy_fp_encode_double@@Base+0xd2c>
   2ba7c:	cmp	r2, #48	; 0x30
   2ba80:	addeq	r3, r3, #2
   2ba84:	moveq	lr, r1
   2ba88:	bne	2baa8 <grisu3_diy_fp_encode_double@@Base+0x6b0>
   2ba8c:	mov	ip, r3
   2ba90:	cmp	r3, lr
   2ba94:	beq	2c12c <grisu3_diy_fp_encode_double@@Base+0xd34>
   2ba98:	add	r3, r3, #1
   2ba9c:	ldrb	r2, [ip]
   2baa0:	cmp	r2, #48	; 0x30
   2baa4:	beq	2ba8c <grisu3_diy_fp_encode_double@@Base+0x694>
   2baa8:	mov	r4, #0
   2baac:	mov	r5, #0
   2bab0:	b	2b98c <grisu3_diy_fp_encode_double@@Base+0x594>
   2bab4:	ldr	r3, [sp, #16]
   2bab8:	cmp	r3, #0
   2babc:	moveq	r6, r0
   2bac0:	movne	r6, #0
   2bac4:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2bac8:	add	lr, ip, #1
   2bacc:	add	r2, r6, #1
   2bad0:	cmp	r1, r2
   2bad4:	beq	2c168 <grisu3_diy_fp_encode_double@@Base+0xd70>
   2bad8:	ldrb	r3, [r6, #1]
   2badc:	sub	r3, r3, #48	; 0x30
   2bae0:	uxtb	r3, r3
   2bae4:	cmp	r3, #9
   2bae8:	bhi	2c2c0 <grisu3_diy_fp_encode_double@@Base+0xec8>
   2baec:	add	r2, r6, #2
   2baf0:	mov	r9, r1
   2baf4:	sub	sl, ip, r6
   2baf8:	add	ip, sl, r2
   2bafc:	mov	lr, r2
   2bb00:	cmp	r2, r9
   2bb04:	beq	2c170 <grisu3_diy_fp_encode_double@@Base+0xd78>
   2bb08:	add	r2, r2, #1
   2bb0c:	ldrb	r3, [lr]
   2bb10:	sub	r3, r3, #48	; 0x30
   2bb14:	uxtb	r3, r3
   2bb18:	cmp	r3, #9
   2bb1c:	bls	2baf8 <grisu3_diy_fp_encode_double@@Base+0x700>
   2bb20:	mov	r6, lr
   2bb24:	mov	r3, #1
   2bb28:	str	r3, [sp, #20]
   2bb2c:	b	2c334 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   2bb30:	add	r2, r6, #1
   2bb34:	mov	sl, r2
   2bb38:	ldrb	r8, [r6, #1]
   2bb3c:	sub	r3, r8, #48	; 0x30
   2bb40:	uxtb	r3, r3
   2bb44:	cmp	r3, #9
   2bb48:	movhi	r6, #0
   2bb4c:	bhi	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2bb50:	cmp	r1, r2
   2bb54:	beq	2c178 <grisu3_diy_fp_encode_double@@Base+0xd80>
   2bb58:	add	r3, pc, #536	; 0x218
   2bb5c:	ldrd	r2, [r3]
   2bb60:	cmp	r5, r3
   2bb64:	cmpeq	r4, r2
   2bb68:	bhi	2c3cc <grisu3_diy_fp_encode_double@@Base+0xfd4>
   2bb6c:	add	lr, r6, #2
   2bb70:	add	r6, r6, ip
   2bb74:	add	r6, r6, #1
   2bb78:	str	r1, [sp, #24]
   2bb7c:	mov	r2, r1
   2bb80:	str	r0, [sp, #28]
   2bb84:	mov	fp, lr
   2bb88:	lsl	r9, r5, #2
   2bb8c:	lsl	r3, r4, #2
   2bb90:	orr	ip, r9, r4, lsr #30
   2bb94:	adds	r3, r3, r4
   2bb98:	adc	ip, ip, r5
   2bb9c:	adds	r3, r3, r3
   2bba0:	adc	ip, ip, ip
   2bba4:	uxtb	r8, r8
   2bba8:	mov	r9, #0
   2bbac:	adds	r3, r3, r8
   2bbb0:	adc	ip, ip, r9
   2bbb4:	subs	r4, r3, #48	; 0x30
   2bbb8:	sbc	r5, ip, #0
   2bbbc:	sub	ip, r6, lr
   2bbc0:	cmp	lr, r2
   2bbc4:	beq	2c180 <grisu3_diy_fp_encode_double@@Base+0xd88>
   2bbc8:	ldrb	r8, [lr], #1
   2bbcc:	sub	r3, r8, #48	; 0x30
   2bbd0:	uxtb	r3, r3
   2bbd4:	cmp	r3, #9
   2bbd8:	bhi	2bc38 <grisu3_diy_fp_encode_double@@Base+0x840>
   2bbdc:	add	r1, pc, #404	; 0x194
   2bbe0:	ldrd	r0, [r1]
   2bbe4:	cmp	r5, r1
   2bbe8:	cmpeq	r4, r0
   2bbec:	bls	2bb84 <grisu3_diy_fp_encode_double@@Base+0x78c>
   2bbf0:	ldr	r1, [sp, #24]
   2bbf4:	ldr	r0, [sp, #28]
   2bbf8:	ldr	r3, [sp, #20]
   2bbfc:	cmp	r3, #0
   2bc00:	bne	2c2ac <grisu3_diy_fp_encode_double@@Base+0xeb4>
   2bc04:	cmp	r8, #52	; 0x34
   2bc08:	movls	r2, #0
   2bc0c:	movhi	r2, #1
   2bc10:	adds	r4, r4, r2
   2bc14:	adc	r5, r5, #0
   2bc18:	sub	r3, fp, sl
   2bc1c:	add	r7, r7, r3
   2bc20:	cmp	r1, fp
   2bc24:	moveq	r6, #0
   2bc28:	beq	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2bc2c:	mov	r3, #1
   2bc30:	str	r3, [sp, #20]
   2bc34:	b	2bc48 <grisu3_diy_fp_encode_double@@Base+0x850>
   2bc38:	ldr	r1, [sp, #24]
   2bc3c:	ldr	r0, [sp, #28]
   2bc40:	sub	r3, fp, sl
   2bc44:	add	r7, r7, r3
   2bc48:	ldrb	r3, [fp]
   2bc4c:	cmp	r3, #48	; 0x30
   2bc50:	bne	2c2a4 <grisu3_diy_fp_encode_double@@Base+0xeac>
   2bc54:	add	r3, fp, #1
   2bc58:	mov	r2, r1
   2bc5c:	sub	fp, ip, fp
   2bc60:	add	ip, fp, r3
   2bc64:	mov	r6, r3
   2bc68:	cmp	r2, r3
   2bc6c:	beq	2c188 <grisu3_diy_fp_encode_double@@Base+0xd90>
   2bc70:	add	r3, r3, #1
   2bc74:	ldrb	lr, [r6]
   2bc78:	cmp	lr, #48	; 0x30
   2bc7c:	beq	2bc60 <grisu3_diy_fp_encode_double@@Base+0x868>
   2bc80:	ldrb	r3, [r6]
   2bc84:	sub	r3, r3, #49	; 0x31
   2bc88:	uxtb	r3, r3
   2bc8c:	cmp	r3, #8
   2bc90:	bhi	2c340 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2bc94:	add	r2, r6, #1
   2bc98:	cmp	r1, r2
   2bc9c:	beq	2c190 <grisu3_diy_fp_encode_double@@Base+0xd98>
   2bca0:	ldrb	r3, [r6, #1]
   2bca4:	sub	r3, r3, #48	; 0x30
   2bca8:	uxtb	r3, r3
   2bcac:	cmp	r3, #9
   2bcb0:	bhi	2c294 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   2bcb4:	add	r2, r6, #2
   2bcb8:	mov	lr, r1
   2bcbc:	mov	r6, r2
   2bcc0:	cmp	lr, r2
   2bcc4:	beq	2c198 <grisu3_diy_fp_encode_double@@Base+0xda0>
   2bcc8:	add	r2, r2, #1
   2bccc:	ldrb	r3, [r6]
   2bcd0:	sub	r3, r3, #48	; 0x30
   2bcd4:	uxtb	r3, r3
   2bcd8:	cmp	r3, #9
   2bcdc:	bls	2bcbc <grisu3_diy_fp_encode_double@@Base+0x8c4>
   2bce0:	mov	r3, #1
   2bce4:	str	r3, [sp, #20]
   2bce8:	b	2c340 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2bcec:	add	r2, r6, #2
   2bcf0:	cmp	r1, r2
   2bcf4:	beq	2c1a0 <grisu3_diy_fp_encode_double@@Base+0xda8>
   2bcf8:	mov	fp, #0
   2bcfc:	b	2c384 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   2bd00:	add	r2, r6, #2
   2bd04:	cmp	r1, r2
   2bd08:	beq	2c1a8 <grisu3_diy_fp_encode_double@@Base+0xdb0>
   2bd0c:	mov	fp, #1
   2bd10:	b	2c384 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   2bd14:	mov	r6, r2
   2bd18:	cmp	sl, r2
   2bd1c:	beq	2c1b8 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   2bd20:	ldrb	r9, [r2], #1
   2bd24:	sub	lr, r9, #48	; 0x30
   2bd28:	uxtb	lr, lr
   2bd2c:	cmp	lr, #9
   2bd30:	bhi	2c1d0 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   2bd34:	cmp	r3, #32768	; 0x8000
   2bd38:	bge	2bd14 <grisu3_diy_fp_encode_double@@Base+0x91c>
   2bd3c:	add	r3, r3, r3, lsl #2
   2bd40:	add	r3, r9, r3, lsl #1
   2bd44:	sub	r3, r3, #48	; 0x30
   2bd48:	b	2bd14 <grisu3_diy_fp_encode_double@@Base+0x91c>
   2bd4c:	mov	r2, #0
   2bd50:	mov	r3, #0
   2bd54:	movt	r3, #32752	; 0x7ff0
   2bd58:	strd	r2, [r9]
   2bd5c:	ldr	r3, [sp, #16]
   2bd60:	cmp	r3, #0
   2bd64:	beq	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2bd68:	vldr	d7, [r9]
   2bd6c:	vneg.f64	d7, d7
   2bd70:	vstr	d7, [r9]
   2bd74:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2bd78:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2bd7c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2bd80:	andeq	r0, r0, r0
   2bd84:	sbcmi	r8, r3, r0, lsl #16
   2bd88:	andeq	r0, r0, r0
   2bd8c:	addmi	r4, pc, r0
   2bd90:	andeq	r0, r0, r0
   2bd94:	smlawbmi	lr, r0, r4, r8
   2bd98:	andeq	r0, r0, r0
   2bd9c:	orrsmi	sp, r7, r4, lsl #15
   2bda0:	andcs	r0, r0, r0
   2bda4:	andmi	sl, r2, #95	; 0x5f
   2bda8:	andge	r0, r0, #0
   2bdac:	rsbmi	r1, sp, #148, 20	; 0x94000
   2bdb0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2bdb4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2bdb8:	strbcc	r8, [r0, r0]!
   2bdbc:	movtmi	ip, #4985	; 0x1379
   2bdc0:	strbvs	ip, [lr, -r0, lsl #16]
   2bdc4:			; <UNDEFINED> instruction: 0x43abc16d
   2bdc8:	ldmvc	r5!, {r6, sl, fp, pc}
   2bdcc:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2bdd0:			; <UNDEFINED> instruction: 0x064dd592
   2bdd4:	strmi	pc, [r0], #207	; 0xcf
   2bdd8:	usatle	lr, #2, r0, asr #30
   2bddc:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2bde0:	addsvs	r3, r1, r0, lsl #26
   2bde4:	mvnmi	r5, #228, 16	; 0xe40000
   2bde8:	ldrbhi	sl, [r8]
   2bdec:	cmnmi	r6, #1459617792	; 0x57000000
   2bdf0:	ldrtcs	r0, [r4], -r0
   2bdf4:	movwmi	r6, #52213	; 0xcbf5
   2bdf8:	strb	r0, [r0, #-0]
   2bdfc:	adcmi	r3, r2, #156	; 0x9c
   2be00:	stmda	r0, {}	; <UNPREDICTABLE>
   2be04:	eorsmi	r4, r7, #7733248	; 0x760000
   2be08:	andeq	r0, r0, r0
   2be0c:	bicmi	ip, sp, r5, ror #26
   2be10:	andeq	r0, r0, r0
   2be14:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2be18:	andeq	r0, r0, r0
   2be1c:	rscsmi	r6, r8, r0, lsl #20
   2be20:	andeq	r0, r0, r0
   2be24:	subsmi	r0, r9, r0
   2be28:	andeq	r0, r0, r0
   2be2c:	eormi	r0, r4, r0
   2be30:	mov	r0, r4
   2be34:	mov	r1, r5
   2be38:	bl	3da14 <flatcc_json_printer_clear@@Base+0x390>
   2be3c:	vmov	d7, r0, r1
   2be40:	sub	r3, r8, r7
   2be44:	add	r3, r3, #22
   2be48:	cmp	r3, #44	; 0x2c
   2be4c:	ldrls	pc, [pc, r3, lsl #2]
   2be50:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2be54:	andeq	fp, r2, r8, lsl #30
   2be58:	andeq	fp, r2, r8, lsl pc
   2be5c:	andeq	fp, r2, r4, lsr #30
   2be60:	andeq	fp, r2, r0, lsr pc
   2be64:	andeq	fp, r2, ip, lsr pc
   2be68:	andeq	fp, r2, r8, asr #30
   2be6c:	andeq	fp, r2, r4, asr pc
   2be70:	andeq	fp, r2, r0, ror #30
   2be74:	andeq	fp, r2, ip, ror #30
   2be78:	andeq	fp, r2, r8, ror pc
   2be7c:	andeq	fp, r2, r4, lsl #31
   2be80:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   2be84:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   2be88:	andeq	fp, r2, r8, lsr #31
   2be8c:			; <UNDEFINED> instruction: 0x0002bfb4
   2be90:	andeq	fp, r2, r0, asr #31
   2be94:	andeq	fp, r2, ip, asr #31
   2be98:	ldrdeq	fp, [r2], -r8
   2be9c:	andeq	fp, r2, r4, ror #31
   2bea0:	strdeq	fp, [r2], -r0
   2bea4:	strdeq	fp, [r2], -ip
   2bea8:	andeq	ip, r2, r8
   2beac:	andeq	fp, r2, r0, lsl pc
   2beb0:	andeq	ip, r2, r4, lsl r0
   2beb4:	andeq	ip, r2, r0, lsr #32
   2beb8:	andeq	ip, r2, ip, lsr #32
   2bebc:	andeq	ip, r2, r8, lsr r0
   2bec0:	andeq	ip, r2, r4, asr #32
   2bec4:	andeq	ip, r2, r0, asr r0
   2bec8:	andeq	ip, r2, ip, asr r0
   2becc:	andeq	ip, r2, r8, rrx
   2bed0:	andeq	ip, r2, r4, ror r0
   2bed4:	andeq	ip, r2, r0, lsl #1
   2bed8:	andeq	ip, r2, ip, lsl #1
   2bedc:	muleq	r2, r8, r0
   2bee0:	andeq	ip, r2, r4, lsr #1
   2bee4:	strheq	ip, [r2], -r0
   2bee8:	strheq	ip, [r2], -ip	; <UNPREDICTABLE>
   2beec:	andeq	ip, r2, r8, asr #1
   2bef0:	ldrdeq	ip, [r2], -r4
   2bef4:	andeq	ip, r2, r0, ror #1
   2bef8:	andeq	ip, r2, ip, ror #1
   2befc:	strdeq	ip, [r2], -r8
   2bf00:	andeq	ip, r2, r4, lsl #2
   2bf04:	andeq	ip, r2, r0, lsl r1
   2bf08:	vldr	d6, [pc, #-320]	; 2bdd0 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   2bf0c:	vdiv.f64	d7, d7, d6
   2bf10:	vstr	d7, [r9]
   2bf14:	b	2bd5c <grisu3_diy_fp_encode_double@@Base+0x964>
   2bf18:	vldr	d6, [pc, #-328]	; 2bdd8 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   2bf1c:	vdiv.f64	d7, d7, d6
   2bf20:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf24:	vldr	d6, [pc, #-356]	; 2bdc8 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   2bf28:	vdiv.f64	d7, d7, d6
   2bf2c:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf30:	vldr	d6, [pc, #-344]	; 2bde0 <grisu3_diy_fp_encode_double@@Base+0x9e8>
   2bf34:	vdiv.f64	d7, d7, d6
   2bf38:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf3c:	vldr	d6, [pc, #-388]	; 2bdc0 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   2bf40:	vdiv.f64	d7, d7, d6
   2bf44:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf48:	vldr	d6, [pc, #-360]	; 2bde8 <grisu3_diy_fp_encode_double@@Base+0x9f0>
   2bf4c:	vdiv.f64	d7, d7, d6
   2bf50:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf54:	vldr	d6, [pc, #-420]	; 2bdb8 <grisu3_diy_fp_encode_double@@Base+0x9c0>
   2bf58:	vdiv.f64	d7, d7, d6
   2bf5c:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf60:	vldr	d6, [pc, #-376]	; 2bdf0 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   2bf64:	vdiv.f64	d7, d7, d6
   2bf68:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf6c:	vldr	d6, [pc, #-452]	; 2bdb0 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   2bf70:	vdiv.f64	d7, d7, d6
   2bf74:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf78:	vldr	d6, [pc, #-392]	; 2bdf8 <grisu3_diy_fp_encode_double@@Base+0xa00>
   2bf7c:	vdiv.f64	d7, d7, d6
   2bf80:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf84:	vldr	d6, [pc, #-484]	; 2bda8 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   2bf88:	vdiv.f64	d7, d7, d6
   2bf8c:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf90:	vldr	d6, [pc, #-408]	; 2be00 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2bf94:	vdiv.f64	d7, d7, d6
   2bf98:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bf9c:	vldr	d6, [pc, #-516]	; 2bda0 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   2bfa0:	vdiv.f64	d7, d7, d6
   2bfa4:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bfa8:	vldr	d6, [pc, #-424]	; 2be08 <grisu3_diy_fp_encode_double@@Base+0xa10>
   2bfac:	vdiv.f64	d7, d7, d6
   2bfb0:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bfb4:	vldr	d6, [pc, #-548]	; 2bd98 <grisu3_diy_fp_encode_double@@Base+0x9a0>
   2bfb8:	vdiv.f64	d7, d7, d6
   2bfbc:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bfc0:	vldr	d6, [pc, #-440]	; 2be10 <grisu3_diy_fp_encode_double@@Base+0xa18>
   2bfc4:	vdiv.f64	d7, d7, d6
   2bfc8:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bfcc:	vldr	d6, [pc, #-580]	; 2bd90 <grisu3_diy_fp_encode_double@@Base+0x998>
   2bfd0:	vdiv.f64	d7, d7, d6
   2bfd4:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bfd8:	vldr	d6, [pc, #-456]	; 2be18 <grisu3_diy_fp_encode_double@@Base+0xa20>
   2bfdc:	vdiv.f64	d7, d7, d6
   2bfe0:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bfe4:	vldr	d6, [pc, #-620]	; 2bd80 <grisu3_diy_fp_encode_double@@Base+0x988>
   2bfe8:	vdiv.f64	d7, d7, d6
   2bfec:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bff0:	vldr	d6, [pc, #-624]	; 2bd88 <grisu3_diy_fp_encode_double@@Base+0x990>
   2bff4:	vdiv.f64	d7, d7, d6
   2bff8:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2bffc:	vldr	d6, [pc, #-484]	; 2be20 <grisu3_diy_fp_encode_double@@Base+0xa28>
   2c000:	vdiv.f64	d7, d7, d6
   2c004:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c008:	vldr	d6, [pc, #-488]	; 2be28 <grisu3_diy_fp_encode_double@@Base+0xa30>
   2c00c:	vdiv.f64	d7, d7, d6
   2c010:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c014:	vldr	d6, [pc, #-500]	; 2be28 <grisu3_diy_fp_encode_double@@Base+0xa30>
   2c018:	vmul.f64	d7, d7, d6
   2c01c:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c020:	vldr	d6, [pc, #-520]	; 2be20 <grisu3_diy_fp_encode_double@@Base+0xa28>
   2c024:	vmul.f64	d7, d7, d6
   2c028:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c02c:	vldr	d6, [pc, #-684]	; 2bd88 <grisu3_diy_fp_encode_double@@Base+0x990>
   2c030:	vmul.f64	d7, d7, d6
   2c034:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c038:	vldr	d6, [pc, #-704]	; 2bd80 <grisu3_diy_fp_encode_double@@Base+0x988>
   2c03c:	vmul.f64	d7, d7, d6
   2c040:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c044:	vldr	d6, [pc, #-564]	; 2be18 <grisu3_diy_fp_encode_double@@Base+0xa20>
   2c048:	vmul.f64	d7, d7, d6
   2c04c:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c050:	vldr	d6, [pc, #-712]	; 2bd90 <grisu3_diy_fp_encode_double@@Base+0x998>
   2c054:	vmul.f64	d7, d7, d6
   2c058:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c05c:	vldr	d6, [pc, #-596]	; 2be10 <grisu3_diy_fp_encode_double@@Base+0xa18>
   2c060:	vmul.f64	d7, d7, d6
   2c064:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c068:	vldr	d6, [pc, #-728]	; 2bd98 <grisu3_diy_fp_encode_double@@Base+0x9a0>
   2c06c:	vmul.f64	d7, d7, d6
   2c070:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c074:	vldr	d6, [pc, #-628]	; 2be08 <grisu3_diy_fp_encode_double@@Base+0xa10>
   2c078:	vmul.f64	d7, d7, d6
   2c07c:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c080:	vldr	d6, [pc, #-744]	; 2bda0 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   2c084:	vmul.f64	d7, d7, d6
   2c088:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c08c:	vldr	d6, [pc, #-660]	; 2be00 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2c090:	vmul.f64	d7, d7, d6
   2c094:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c098:	vldr	d6, [pc, #-760]	; 2bda8 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   2c09c:	vmul.f64	d7, d7, d6
   2c0a0:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c0a4:	vldr	d6, [pc, #-692]	; 2bdf8 <grisu3_diy_fp_encode_double@@Base+0xa00>
   2c0a8:	vmul.f64	d7, d7, d6
   2c0ac:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c0b0:	vldr	d6, [pc, #-776]	; 2bdb0 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   2c0b4:	vmul.f64	d7, d7, d6
   2c0b8:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c0bc:	vldr	d6, [pc, #-724]	; 2bdf0 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   2c0c0:	vmul.f64	d7, d7, d6
   2c0c4:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c0c8:	vldr	d6, [pc, #-792]	; 2bdb8 <grisu3_diy_fp_encode_double@@Base+0x9c0>
   2c0cc:	vmul.f64	d7, d7, d6
   2c0d0:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c0d4:	vldr	d6, [pc, #-756]	; 2bde8 <grisu3_diy_fp_encode_double@@Base+0x9f0>
   2c0d8:	vmul.f64	d7, d7, d6
   2c0dc:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c0e0:	vldr	d6, [pc, #-808]	; 2bdc0 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   2c0e4:	vmul.f64	d7, d7, d6
   2c0e8:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c0ec:	vldr	d6, [pc, #-788]	; 2bde0 <grisu3_diy_fp_encode_double@@Base+0x9e8>
   2c0f0:	vmul.f64	d7, d7, d6
   2c0f4:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c0f8:	vldr	d6, [pc, #-824]	; 2bdc8 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   2c0fc:	vmul.f64	d7, d7, d6
   2c100:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c104:	vldr	d6, [pc, #-820]	; 2bdd8 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   2c108:	vmul.f64	d7, d7, d6
   2c10c:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c110:	vldr	d6, [pc, #-840]	; 2bdd0 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   2c114:	vmul.f64	d7, d7, d6
   2c118:	b	2bf10 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2c11c:	mov	r6, #0
   2c120:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c124:	mov	r6, r0
   2c128:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c12c:	mov	r6, #0
   2c130:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c134:	mov	r6, #0
   2c138:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c13c:	mov	r6, #0
   2c140:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c144:	mov	r6, #0
   2c148:	mov	r0, r6
   2c14c:	add	sp, sp, #44	; 0x2c
   2c150:	ldrd	r4, [sp]
   2c154:	ldrd	r6, [sp, #8]
   2c158:	ldrd	r8, [sp, #16]
   2c15c:	ldrd	sl, [sp, #24]
   2c160:	add	sp, sp, #32
   2c164:	pop	{pc}		; (ldr pc, [sp], #4)
   2c168:	mov	r6, #0
   2c16c:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c170:	mov	r6, #0
   2c174:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c178:	mov	r6, #0
   2c17c:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c180:	mov	r6, #0
   2c184:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c188:	mov	r6, #0
   2c18c:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c190:	mov	r6, #0
   2c194:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c198:	mov	r6, #0
   2c19c:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c1a0:	mov	r6, #0
   2c1a4:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c1a8:	mov	r6, #0
   2c1ac:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c1b0:	mov	r6, #0
   2c1b4:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c1b8:	cmp	fp, #0
   2c1bc:	moveq	r6, #0
   2c1c0:	bne	2c1d8 <grisu3_diy_fp_encode_double@@Base+0xde0>
   2c1c4:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c1c8:	add	r8, ip, r3
   2c1cc:	b	2c1e8 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   2c1d0:	cmp	fp, #0
   2c1d4:	beq	2c1c8 <grisu3_diy_fp_encode_double@@Base+0xdd0>
   2c1d8:	rsb	r8, r3, #0
   2c1dc:	add	r8, ip, r8
   2c1e0:	cmp	r1, r6
   2c1e4:	beq	2c1b0 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   2c1e8:	ldr	r9, [sp, #12]
   2c1ec:	mov	sl, r0
   2c1f0:	orrs	r3, r4, r5
   2c1f4:	moveq	r2, #1
   2c1f8:	movne	r2, #0
   2c1fc:	cmn	r8, #324	; 0x144
   2c200:	movge	r3, #0
   2c204:	movlt	r3, #1
   2c208:	orrs	r3, r2, r3
   2c20c:	bne	2bd5c <grisu3_diy_fp_encode_double@@Base+0x964>
   2c210:	movw	r3, #310	; 0x136
   2c214:	cmp	r8, r3
   2c218:	bgt	2bd4c <grisu3_diy_fp_encode_double@@Base+0x954>
   2c21c:	mvn	r2, #0
   2c220:	movw	r3, #65535	; 0xffff
   2c224:	movt	r3, #31
   2c228:	cmp	r5, r3
   2c22c:	cmpeq	r4, r2
   2c230:	movls	r3, #1
   2c234:	movhi	r3, #0
   2c238:	cmp	r8, #22
   2c23c:	movhi	r3, #0
   2c240:	andls	r3, r3, #1
   2c244:	cmp	r3, #0
   2c248:	bne	2be30 <grisu3_diy_fp_encode_double@@Base+0xa38>
   2c24c:	str	r9, [sp, #4]
   2c250:	ldr	r3, [sp, #20]
   2c254:	str	r3, [sp]
   2c258:	mov	r3, r7
   2c25c:	mov	r2, r8
   2c260:	mov	r0, r4
   2c264:	mov	r1, r5
   2c268:	bl	2b3f8 <grisu3_diy_fp_encode_double@@Base>
   2c26c:	cmp	r0, #0
   2c270:	bne	2bd5c <grisu3_diy_fp_encode_double@@Base+0x964>
   2c274:	add	r1, sp, #36	; 0x24
   2c278:	mov	r0, sl
   2c27c:	bl	145b4 <strtod@plt>
   2c280:	vstr	d0, [r9]
   2c284:	ldr	r3, [sp, #36]	; 0x24
   2c288:	cmp	r6, r3
   2c28c:	movcs	r6, r3
   2c290:	b	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c294:	mov	r6, r2
   2c298:	mov	r3, #1
   2c29c:	str	r3, [sp, #20]
   2c2a0:	b	2c340 <grisu3_diy_fp_encode_double@@Base+0xf48>
   2c2a4:	mov	r6, fp
   2c2a8:	b	2bc80 <grisu3_diy_fp_encode_double@@Base+0x888>
   2c2ac:	sub	r3, fp, sl
   2c2b0:	add	r7, r7, r3
   2c2b4:	mov	r3, #1
   2c2b8:	str	r3, [sp, #20]
   2c2bc:	b	2bc48 <grisu3_diy_fp_encode_double@@Base+0x850>
   2c2c0:	mov	ip, lr
   2c2c4:	mov	r6, r2
   2c2c8:	mov	r3, #1
   2c2cc:	str	r3, [sp, #20]
   2c2d0:	b	2c334 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   2c2d4:	mov	ip, #0
   2c2d8:	b	2c320 <grisu3_diy_fp_encode_double@@Base+0xf28>
   2c2dc:	sub	r7, r6, ip
   2c2e0:	mov	r3, #0
   2c2e4:	str	r3, [sp, #20]
   2c2e8:	ldrb	r3, [r6]
   2c2ec:	cmp	r3, #48	; 0x30
   2c2f0:	bne	2c2d4 <grisu3_diy_fp_encode_double@@Base+0xedc>
   2c2f4:	add	r3, r6, #1
   2c2f8:	mov	lr, r1
   2c2fc:	mov	ip, #0
   2c300:	add	ip, ip, #1
   2c304:	mov	r6, r3
   2c308:	cmp	r3, lr
   2c30c:	beq	2c144 <grisu3_diy_fp_encode_double@@Base+0xd4c>
   2c310:	add	r3, r3, #1
   2c314:	ldrb	r2, [r6]
   2c318:	cmp	r2, #48	; 0x30
   2c31c:	beq	2c300 <grisu3_diy_fp_encode_double@@Base+0xf08>
   2c320:	ldrb	r3, [r6]
   2c324:	sub	r3, r3, #49	; 0x31
   2c328:	uxtb	r3, r3
   2c32c:	cmp	r3, #8
   2c330:	bls	2bac8 <grisu3_diy_fp_encode_double@@Base+0x6d0>
   2c334:	ldrb	r3, [r6]
   2c338:	cmp	r3, #46	; 0x2e
   2c33c:	beq	2bb30 <grisu3_diy_fp_encode_double@@Base+0x738>
   2c340:	add	ip, r7, ip
   2c344:	ldrb	r3, [r6]
   2c348:	orr	r3, r3, #32
   2c34c:	cmp	r3, #101	; 0x65
   2c350:	movne	r8, #0
   2c354:	bne	2c1dc <grisu3_diy_fp_encode_double@@Base+0xde4>
   2c358:	sub	r3, r1, r6
   2c35c:	cmp	r3, #1
   2c360:	movle	r6, #0
   2c364:	ble	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c368:	ldrb	r3, [r6, #1]
   2c36c:	cmp	r3, #43	; 0x2b
   2c370:	beq	2bcec <grisu3_diy_fp_encode_double@@Base+0x8f4>
   2c374:	cmp	r3, #45	; 0x2d
   2c378:	beq	2bd00 <grisu3_diy_fp_encode_double@@Base+0x908>
   2c37c:	add	r2, r6, #1
   2c380:	mov	fp, #0
   2c384:	ldrb	r8, [r2]
   2c388:	sub	lr, r8, #48	; 0x30
   2c38c:	uxtb	lr, lr
   2c390:	cmp	lr, #9
   2c394:	movhi	r6, #0
   2c398:	bhi	2c148 <grisu3_diy_fp_encode_double@@Base+0xd50>
   2c39c:	add	r6, r2, #1
   2c3a0:	sub	r3, r8, #48	; 0x30
   2c3a4:	cmp	r1, r6
   2c3a8:	beq	2c1b8 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   2c3ac:	ldrb	r9, [r2, #1]
   2c3b0:	sub	lr, r9, #48	; 0x30
   2c3b4:	uxtb	lr, lr
   2c3b8:	cmp	lr, #9
   2c3bc:	bhi	2c1d0 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   2c3c0:	add	r2, r2, #2
   2c3c4:	mov	sl, r1
   2c3c8:	b	2bd34 <grisu3_diy_fp_encode_double@@Base+0x93c>
   2c3cc:	ldr	r3, [sp, #20]
   2c3d0:	cmp	r3, #0
   2c3d4:	movne	fp, sl
   2c3d8:	bne	2c2ac <grisu3_diy_fp_encode_double@@Base+0xeb4>
   2c3dc:	cmp	r8, #52	; 0x34
   2c3e0:	movls	r2, #0
   2c3e4:	movhi	r2, #1
   2c3e8:	adds	r4, r4, r2
   2c3ec:	adc	r5, r5, #0
   2c3f0:	mov	fp, sl
   2c3f4:	mov	r3, #1
   2c3f8:	str	r3, [sp, #20]
   2c3fc:	b	2bc48 <grisu3_diy_fp_encode_double@@Base+0x850>

0002c400 <flatcc_json_parser_error_string@@Base>:
   2c400:	cmp	r0, #34	; 0x22
   2c404:	ldrls	pc, [pc, r0, lsl #2]
   2c408:	b	2c630 <flatcc_json_parser_error_string@@Base+0x230>
   2c40c:	andeq	ip, r2, ip, lsr r6
   2c410:	muleq	r2, r8, r4
   2c414:	andeq	ip, r2, r4, lsr #9
   2c418:			; <UNDEFINED> instruction: 0x0002c4b0
   2c41c:			; <UNDEFINED> instruction: 0x0002c4bc
   2c420:	andeq	ip, r2, r8, asr #9
   2c424:	ldrdeq	ip, [r2], -r4
   2c428:	andeq	ip, r2, r0, ror #9
   2c42c:	andeq	ip, r2, ip, ror #9
   2c430:	strdeq	ip, [r2], -r8
   2c434:	andeq	ip, r2, r4, lsl #10
   2c438:	andeq	ip, r2, r0, lsl r5
   2c43c:	andeq	ip, r2, ip, lsl r5
   2c440:	andeq	ip, r2, r8, lsr #10
   2c444:	andeq	ip, r2, r4, lsr r5
   2c448:	andeq	ip, r2, r0, asr #10
   2c44c:	andeq	ip, r2, ip, asr #10
   2c450:	andeq	ip, r2, r8, asr r5
   2c454:	andeq	ip, r2, r4, ror #10
   2c458:	andeq	ip, r2, r0, ror r5
   2c45c:	andeq	ip, r2, ip, ror r5
   2c460:	andeq	ip, r2, r8, lsl #11
   2c464:	muleq	r2, r4, r5
   2c468:	andeq	ip, r2, r0, lsr #11
   2c46c:	andeq	ip, r2, ip, lsr #11
   2c470:			; <UNDEFINED> instruction: 0x0002c5b8
   2c474:	andeq	ip, r2, r4, asr #11
   2c478:	ldrdeq	ip, [r2], -r0
   2c47c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c480:	andeq	ip, r2, r8, ror #11
   2c484:	strdeq	ip, [r2], -r4
   2c488:	andeq	ip, r2, r0, lsl #12
   2c48c:	andeq	ip, r2, ip, lsl #12
   2c490:	andeq	ip, r2, r8, lsl r6
   2c494:	andeq	ip, r2, r4, lsr #12
   2c498:	movw	r0, #11220	; 0x2bd4
   2c49c:	movt	r0, #4
   2c4a0:	bx	lr
   2c4a4:	movw	r0, #10584	; 0x2958
   2c4a8:	movt	r0, #4
   2c4ac:	bx	lr
   2c4b0:	movw	r0, #10600	; 0x2968
   2c4b4:	movt	r0, #4
   2c4b8:	bx	lr
   2c4bc:	movw	r0, #10616	; 0x2978
   2c4c0:	movt	r0, #4
   2c4c4:	bx	lr
   2c4c8:	movw	r0, #10632	; 0x2988
   2c4cc:	movt	r0, #4
   2c4d0:	bx	lr
   2c4d4:	movw	r0, #10656	; 0x29a0
   2c4d8:	movt	r0, #4
   2c4dc:	bx	lr
   2c4e0:	movw	r0, #7848	; 0x1ea8
   2c4e4:	movt	r0, #4
   2c4e8:	bx	lr
   2c4ec:	movw	r0, #10672	; 0x29b0
   2c4f0:	movt	r0, #4
   2c4f4:	bx	lr
   2c4f8:	movw	r0, #10684	; 0x29bc
   2c4fc:	movt	r0, #4
   2c500:	bx	lr
   2c504:	movw	r0, #10704	; 0x29d0
   2c508:	movt	r0, #4
   2c50c:	bx	lr
   2c510:	movw	r0, #10724	; 0x29e4
   2c514:	movt	r0, #4
   2c518:	bx	lr
   2c51c:	movw	r0, #10740	; 0x29f4
   2c520:	movt	r0, #4
   2c524:	bx	lr
   2c528:	movw	r0, #10760	; 0x2a08
   2c52c:	movt	r0, #4
   2c530:	bx	lr
   2c534:	movw	r0, #10776	; 0x2a18
   2c538:	movt	r0, #4
   2c53c:	bx	lr
   2c540:	movw	r0, #10804	; 0x2a34
   2c544:	movt	r0, #4
   2c548:	bx	lr
   2c54c:	movw	r0, #10824	; 0x2a48
   2c550:	movt	r0, #4
   2c554:	bx	lr
   2c558:	movw	r0, #10840	; 0x2a58
   2c55c:	movt	r0, #4
   2c560:	bx	lr
   2c564:	movw	r0, #10860	; 0x2a6c
   2c568:	movt	r0, #4
   2c56c:	bx	lr
   2c570:	movw	r0, #10876	; 0x2a7c
   2c574:	movt	r0, #4
   2c578:	bx	lr
   2c57c:	movw	r0, #10892	; 0x2a8c
   2c580:	movt	r0, #4
   2c584:	bx	lr
   2c588:	movw	r0, #10912	; 0x2aa0
   2c58c:	movt	r0, #4
   2c590:	bx	lr
   2c594:	movw	r0, #10928	; 0x2ab0
   2c598:	movt	r0, #4
   2c59c:	bx	lr
   2c5a0:	movw	r0, #10944	; 0x2ac0
   2c5a4:	movt	r0, #4
   2c5a8:	bx	lr
   2c5ac:	movw	r0, #10980	; 0x2ae4
   2c5b0:	movt	r0, #4
   2c5b4:	bx	lr
   2c5b8:	movw	r0, #11000	; 0x2af8
   2c5bc:	movt	r0, #4
   2c5c0:	bx	lr
   2c5c4:	movw	r0, #11032	; 0x2b18
   2c5c8:	movt	r0, #4
   2c5cc:	bx	lr
   2c5d0:	movw	r0, #11064	; 0x2b38
   2c5d4:	movt	r0, #4
   2c5d8:	bx	lr
   2c5dc:	movw	r0, #11092	; 0x2b54
   2c5e0:	movt	r0, #4
   2c5e4:	bx	lr
   2c5e8:	movw	r0, #6964	; 0x1b34
   2c5ec:	movt	r0, #4
   2c5f0:	bx	lr
   2c5f4:	movw	r0, #11120	; 0x2b70
   2c5f8:	movt	r0, #4
   2c5fc:	bx	lr
   2c600:	movw	r0, #11152	; 0x2b90
   2c604:	movt	r0, #4
   2c608:	bx	lr
   2c60c:	movw	r0, #11176	; 0x2ba8
   2c610:	movt	r0, #4
   2c614:	bx	lr
   2c618:	movw	r0, #11204	; 0x2bc4
   2c61c:	movt	r0, #4
   2c620:	bx	lr
   2c624:	movw	r0, #8032	; 0x1f60
   2c628:	movt	r0, #4
   2c62c:	bx	lr
   2c630:	movw	r0, #6904	; 0x1af8
   2c634:	movt	r0, #4
   2c638:	bx	lr
   2c63c:	movw	r0, #6912	; 0x1b00
   2c640:	movt	r0, #4
   2c644:	bx	lr

0002c648 <flatcc_json_parser_set_error@@Base>:
   2c648:	ldr	ip, [r0, #20]
   2c64c:	cmp	ip, #0
   2c650:	bne	2c66c <flatcc_json_parser_set_error@@Base+0x24>
   2c654:	str	r3, [r0, #20]
   2c658:	ldr	r3, [r0, #4]
   2c65c:	sub	r3, r1, r3
   2c660:	add	r3, r3, #1
   2c664:	str	r3, [r0, #16]
   2c668:	str	r1, [r0, #32]
   2c66c:	mov	r0, r2
   2c670:	bx	lr

0002c674 <flatcc_json_parser_string_part@@Base>:
   2c674:	str	r4, [sp, #-8]!
   2c678:	str	lr, [sp, #4]
   2c67c:	cmp	r1, r2
   2c680:	beq	2c714 <flatcc_json_parser_string_part@@Base+0xa0>
   2c684:	ldrb	ip, [r1]
   2c688:	cmp	ip, #34	; 0x22
   2c68c:	cmpne	ip, #31
   2c690:	movhi	r3, #1
   2c694:	movls	r3, #0
   2c698:	cmp	ip, #92	; 0x5c
   2c69c:	moveq	r3, #0
   2c6a0:	andne	r3, r3, #1
   2c6a4:	cmp	r3, #0
   2c6a8:	beq	2c6e8 <flatcc_json_parser_string_part@@Base+0x74>
   2c6ac:	add	r3, r1, #1
   2c6b0:	mov	r4, r2
   2c6b4:	mov	r1, r3
   2c6b8:	cmp	r3, r4
   2c6bc:	beq	2c718 <flatcc_json_parser_string_part@@Base+0xa4>
   2c6c0:	ldrb	lr, [r3], #1
   2c6c4:	cmp	lr, #34	; 0x22
   2c6c8:	cmpne	lr, #31
   2c6cc:	movhi	ip, #1
   2c6d0:	movls	ip, #0
   2c6d4:	cmp	lr, #92	; 0x5c
   2c6d8:	moveq	ip, #0
   2c6dc:	andne	ip, ip, #1
   2c6e0:	cmp	ip, #0
   2c6e4:	bne	2c6b4 <flatcc_json_parser_string_part@@Base+0x40>
   2c6e8:	ldrb	r3, [r1]
   2c6ec:	cmp	r3, #31
   2c6f0:	bls	2c704 <flatcc_json_parser_string_part@@Base+0x90>
   2c6f4:	mov	r0, r1
   2c6f8:	ldr	r4, [sp]
   2c6fc:	add	sp, sp, #4
   2c700:	pop	{pc}		; (ldr pc, [sp], #4)
   2c704:	mov	r3, #17
   2c708:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2c70c:	mov	r1, r0
   2c710:	b	2c6f4 <flatcc_json_parser_string_part@@Base+0x80>
   2c714:	mov	r1, r2
   2c718:	mov	r3, #20
   2c71c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2c720:	mov	r1, r0
   2c724:	b	2c6f4 <flatcc_json_parser_string_part@@Base+0x80>

0002c728 <flatcc_json_parser_space_ext@@Base>:
   2c728:	str	r4, [sp, #-8]!
   2c72c:	str	lr, [sp, #4]
   2c730:	mov	lr, r2
   2c734:	mov	r4, #0
   2c738:	cmp	r1, r2
   2c73c:	beq	2c868 <flatcc_json_parser_space_ext@@Base+0x140>
   2c740:	ldrb	r3, [r1]
   2c744:	cmp	r3, #32
   2c748:	bne	2c76c <flatcc_json_parser_space_ext@@Base+0x44>
   2c74c:	add	r3, r1, #1
   2c750:	mov	r1, r3
   2c754:	cmp	r3, lr
   2c758:	beq	2c86c <flatcc_json_parser_space_ext@@Base+0x144>
   2c75c:	add	r3, r3, #1
   2c760:	ldrb	ip, [r1]
   2c764:	cmp	ip, #32
   2c768:	beq	2c750 <flatcc_json_parser_space_ext@@Base+0x28>
   2c76c:	ldrb	r3, [r1]
   2c770:	cmp	r3, #32
   2c774:	bls	2c7cc <flatcc_json_parser_space_ext@@Base+0xa4>
   2c778:	mov	r0, r1
   2c77c:	b	2c84c <flatcc_json_parser_space_ext@@Base+0x124>
   2c780:	sub	r3, r2, r1
   2c784:	cmp	r3, #1
   2c788:	movle	r3, r4
   2c78c:	ble	2c7a0 <flatcc_json_parser_space_ext@@Base+0x78>
   2c790:	ldrb	r3, [r1, #1]
   2c794:	cmp	r3, #10
   2c798:	movne	r3, #0
   2c79c:	moveq	r3, #1
   2c7a0:	add	r1, r1, r3
   2c7a4:	ldr	r3, [r0, #12]
   2c7a8:	add	r3, r3, #1
   2c7ac:	str	r3, [r0, #12]
   2c7b0:	add	r1, r1, #1
   2c7b4:	str	r1, [r0, #4]
   2c7b8:	cmp	r2, r1
   2c7bc:	beq	2c860 <flatcc_json_parser_space_ext@@Base+0x138>
   2c7c0:	ldrb	r3, [r1]
   2c7c4:	cmp	r3, #32
   2c7c8:	bhi	2c858 <flatcc_json_parser_space_ext@@Base+0x130>
   2c7cc:	sub	r3, r3, #9
   2c7d0:	cmp	r3, #23
   2c7d4:	ldrls	pc, [pc, r3, lsl #2]
   2c7d8:	b	2c844 <flatcc_json_parser_space_ext@@Base+0x11c>
   2c7dc:	andeq	ip, r2, ip, lsr r8
   2c7e0:	andeq	ip, r2, r4, lsr #15
   2c7e4:	andeq	ip, r2, r4, asr #16
   2c7e8:	andeq	ip, r2, r4, asr #16
   2c7ec:	andeq	ip, r2, r0, lsl #15
   2c7f0:	andeq	ip, r2, r4, asr #16
   2c7f4:	andeq	ip, r2, r4, asr #16
   2c7f8:	andeq	ip, r2, r4, asr #16
   2c7fc:	andeq	ip, r2, r4, asr #16
   2c800:	andeq	ip, r2, r4, asr #16
   2c804:	andeq	ip, r2, r4, asr #16
   2c808:	andeq	ip, r2, r4, asr #16
   2c80c:	andeq	ip, r2, r4, asr #16
   2c810:	andeq	ip, r2, r4, asr #16
   2c814:	andeq	ip, r2, r4, asr #16
   2c818:	andeq	ip, r2, r4, asr #16
   2c81c:	andeq	ip, r2, r4, asr #16
   2c820:	andeq	ip, r2, r4, asr #16
   2c824:	andeq	ip, r2, r4, asr #16
   2c828:	andeq	ip, r2, r4, asr #16
   2c82c:	andeq	ip, r2, r4, asr #16
   2c830:	andeq	ip, r2, r4, asr #16
   2c834:	andeq	ip, r2, r4, asr #16
   2c838:	andeq	ip, r2, r8, lsr r7
   2c83c:	add	r1, r1, #1
   2c840:	b	2c7b8 <flatcc_json_parser_space_ext@@Base+0x90>
   2c844:	mov	r3, #5
   2c848:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2c84c:	ldr	r4, [sp]
   2c850:	add	sp, sp, #4
   2c854:	pop	{pc}		; (ldr pc, [sp], #4)
   2c858:	mov	r0, r1
   2c85c:	b	2c84c <flatcc_json_parser_space_ext@@Base+0x124>
   2c860:	mov	r0, r1
   2c864:	b	2c84c <flatcc_json_parser_space_ext@@Base+0x124>
   2c868:	mov	r1, r2
   2c86c:	mov	r0, r1
   2c870:	b	2c84c <flatcc_json_parser_space_ext@@Base+0x124>
   2c874:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2c878:	strd	r6, [sp, #8]
   2c87c:	strd	r8, [sp, #16]
   2c880:	strd	sl, [sp, #24]
   2c884:	str	lr, [sp, #32]
   2c888:	sub	sp, sp, #36	; 0x24
   2c88c:	str	r0, [sp, #8]
   2c890:	mov	r7, r2
   2c894:	str	r3, [sp, #12]
   2c898:	ldr	fp, [sp, #72]	; 0x48
   2c89c:	mov	r3, #0
   2c8a0:	strb	r3, [fp]
   2c8a4:	cmp	r1, r2
   2c8a8:	beq	2c92c <flatcc_json_parser_space_ext@@Base+0x204>
   2c8ac:	ldrb	r3, [r1]
   2c8b0:	cmp	r3, #34	; 0x22
   2c8b4:	addeq	r4, r1, #1
   2c8b8:	bne	2c904 <flatcc_json_parser_space_ext@@Base+0x1dc>
   2c8bc:	sub	r3, r7, r4
   2c8c0:	cmp	r3, #1
   2c8c4:	ble	2c8d8 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2c8c8:	ldrb	r3, [r4]
   2c8cc:	cmp	r3, #32
   2c8d0:	bhi	2c8ec <flatcc_json_parser_space_ext@@Base+0x1c4>
   2c8d4:	beq	2c918 <flatcc_json_parser_space_ext@@Base+0x1f0>
   2c8d8:	mov	r2, r7
   2c8dc:	mov	r1, r4
   2c8e0:	ldr	r0, [sp, #8]
   2c8e4:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2c8e8:	mov	r4, r0
   2c8ec:	cmp	r7, r4
   2c8f0:	beq	2ca14 <flatcc_json_parser_space_ext@@Base+0x2ec>
   2c8f4:	mov	r8, #0
   2c8f8:	add	sl, sp, #16
   2c8fc:	add	r9, sp, #24
   2c900:	b	2c970 <flatcc_json_parser_space_ext@@Base+0x248>
   2c904:	mov	r3, #5
   2c908:	ldr	r0, [sp, #8]
   2c90c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2c910:	mov	r4, r0
   2c914:	b	2c8bc <flatcc_json_parser_space_ext@@Base+0x194>
   2c918:	ldrb	r3, [r4, #1]
   2c91c:	cmp	r3, #32
   2c920:	addhi	r4, r4, #1
   2c924:	bls	2c8d8 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2c928:	b	2c8ec <flatcc_json_parser_space_ext@@Base+0x1c4>
   2c92c:	mov	r4, r2
   2c930:	b	2c8d8 <flatcc_json_parser_space_ext@@Base+0x1b0>
   2c934:	mov	r4, r0
   2c938:	ldr	r3, [sp, #20]
   2c93c:	cmp	r3, #0
   2c940:	bne	2c9d4 <flatcc_json_parser_space_ext@@Base+0x2ac>
   2c944:	ldrd	r2, [sp, #24]
   2c948:	cmp	r3, #0
   2c94c:	cmpeq	r2, #255	; 0xff
   2c950:	uxtbls	r8, r2
   2c954:	bhi	2c9f8 <flatcc_json_parser_space_ext@@Base+0x2d0>
   2c958:	ldrb	r3, [fp]
   2c95c:	add	r3, r8, r3
   2c960:	strb	r3, [fp]
   2c964:	ldr	r3, [sp, #16]
   2c968:	cmp	r3, #0
   2c96c:	beq	2ca14 <flatcc_json_parser_space_ext@@Base+0x2ec>
   2c970:	ldr	r6, [sp, #12]
   2c974:	mov	r5, r4
   2c978:	str	sl, [sp, #4]
   2c97c:	str	r9, [sp]
   2c980:	ldr	r4, [r6]
   2c984:	add	r3, sp, #20
   2c988:	mov	r2, r7
   2c98c:	mov	r1, r5
   2c990:	ldr	r0, [sp, #8]
   2c994:	blx	r4
   2c998:	cmp	r7, r0
   2c99c:	beq	2ca10 <flatcc_json_parser_space_ext@@Base+0x2e8>
   2c9a0:	cmp	r5, r0
   2c9a4:	bne	2c934 <flatcc_json_parser_space_ext@@Base+0x20c>
   2c9a8:	mov	r5, r0
   2c9ac:	ldr	r3, [r6, #4]!
   2c9b0:	cmp	r3, #0
   2c9b4:	bne	2c978 <flatcc_json_parser_space_ext@@Base+0x250>
   2c9b8:	mov	r3, #23
   2c9bc:	mov	r2, r7
   2c9c0:	mov	r1, r0
   2c9c4:	ldr	r0, [sp, #8]
   2c9c8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2c9cc:	mov	r4, r0
   2c9d0:	b	2ca14 <flatcc_json_parser_space_ext@@Base+0x2ec>
   2c9d4:	mov	r3, #8
   2c9d8:	mov	r2, r7
   2c9dc:	mov	r1, r0
   2c9e0:	ldr	r0, [sp, #8]
   2c9e4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2c9e8:	cmp	r7, r0
   2c9ec:	bne	2c958 <flatcc_json_parser_space_ext@@Base+0x230>
   2c9f0:	mov	r4, r0
   2c9f4:	b	2ca14 <flatcc_json_parser_space_ext@@Base+0x2ec>
   2c9f8:	mov	r3, #7
   2c9fc:	mov	r2, r7
   2ca00:	mov	r1, r0
   2ca04:	ldr	r0, [sp, #8]
   2ca08:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2ca0c:	b	2c9e8 <flatcc_json_parser_space_ext@@Base+0x2c0>
   2ca10:	mov	r4, r0
   2ca14:	mov	r0, r4
   2ca18:	add	sp, sp, #36	; 0x24
   2ca1c:	ldrd	r4, [sp]
   2ca20:	ldrd	r6, [sp, #8]
   2ca24:	ldrd	r8, [sp, #16]
   2ca28:	ldrd	sl, [sp, #24]
   2ca2c:	add	sp, sp, #32
   2ca30:	pop	{pc}		; (ldr pc, [sp], #4)
   2ca34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2ca38:	strd	r6, [sp, #8]
   2ca3c:	strd	r8, [sp, #16]
   2ca40:	strd	sl, [sp, #24]
   2ca44:	str	lr, [sp, #32]
   2ca48:	sub	sp, sp, #28
   2ca4c:	mov	r6, r0
   2ca50:	mov	r4, r1
   2ca54:	mov	r5, r2
   2ca58:	str	r3, [sp, #12]
   2ca5c:	ldr	r9, [sp, #64]	; 0x40
   2ca60:	ldr	sl, [sp, #72]	; 0x48
   2ca64:	mov	r3, #0
   2ca68:	str	r3, [sp, #20]
   2ca6c:	ldr	r0, [r0]
   2ca70:	bl	26e5c <flatcc_builder_start_offset_vector@@Base>
   2ca74:	cmp	r0, #0
   2ca78:	beq	2cab4 <flatcc_json_parser_space_ext@@Base+0x38c>
   2ca7c:	mov	r3, #33	; 0x21
   2ca80:	mov	r2, r5
   2ca84:	mov	r1, r4
   2ca88:	mov	r0, r6
   2ca8c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2ca90:	mov	r4, r0
   2ca94:	mov	r0, r4
   2ca98:	add	sp, sp, #28
   2ca9c:	ldrd	r4, [sp]
   2caa0:	ldrd	r6, [sp, #8]
   2caa4:	ldrd	r8, [sp, #16]
   2caa8:	ldrd	sl, [sp, #24]
   2caac:	add	sp, sp, #32
   2cab0:	pop	{pc}		; (ldr pc, [sp], #4)
   2cab4:	cmp	r4, r5
   2cab8:	beq	2cac8 <flatcc_json_parser_space_ext@@Base+0x3a0>
   2cabc:	ldrb	r3, [r4]
   2cac0:	cmp	r3, #91	; 0x5b
   2cac4:	beq	2cae8 <flatcc_json_parser_space_ext@@Base+0x3c0>
   2cac8:	mov	r3, #22
   2cacc:	mov	r2, r5
   2cad0:	mov	r1, r4
   2cad4:	mov	r0, r6
   2cad8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2cadc:	mov	r4, r0
   2cae0:	mov	r7, #0
   2cae4:	b	2cd28 <flatcc_json_parser_space_ext@@Base+0x600>
   2cae8:	add	r8, r4, #1
   2caec:	sub	r3, r5, r8
   2caf0:	cmp	r3, #1
   2caf4:	ble	2cb08 <flatcc_json_parser_space_ext@@Base+0x3e0>
   2caf8:	ldrb	r3, [r4, #1]
   2cafc:	cmp	r3, #32
   2cb00:	bhi	2cb1c <flatcc_json_parser_space_ext@@Base+0x3f4>
   2cb04:	beq	2cb44 <flatcc_json_parser_space_ext@@Base+0x41c>
   2cb08:	mov	r2, r5
   2cb0c:	mov	r1, r8
   2cb10:	mov	r0, r6
   2cb14:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2cb18:	mov	r8, r0
   2cb1c:	cmp	r5, r8
   2cb20:	beq	2cb30 <flatcc_json_parser_space_ext@@Base+0x408>
   2cb24:	ldrb	r3, [r8]
   2cb28:	cmp	r3, #93	; 0x5d
   2cb2c:	beq	2cb58 <flatcc_json_parser_space_ext@@Base+0x430>
   2cb30:	cmp	r9, #0
   2cb34:	beq	2cba4 <flatcc_json_parser_space_ext@@Base+0x47c>
   2cb38:	mov	r7, #0
   2cb3c:	add	fp, sp, #20
   2cb40:	b	2cc74 <flatcc_json_parser_space_ext@@Base+0x54c>
   2cb44:	ldrb	r3, [r4, #2]
   2cb48:	cmp	r3, #32
   2cb4c:	addhi	r8, r4, #2
   2cb50:	bls	2cb08 <flatcc_json_parser_space_ext@@Base+0x3e0>
   2cb54:	b	2cb1c <flatcc_json_parser_space_ext@@Base+0x3f4>
   2cb58:	add	r4, r8, #1
   2cb5c:	sub	r3, r5, r4
   2cb60:	cmp	r3, #1
   2cb64:	ble	2cb78 <flatcc_json_parser_space_ext@@Base+0x450>
   2cb68:	ldrb	r3, [r8, #1]
   2cb6c:	cmp	r3, #32
   2cb70:	bhi	2cae0 <flatcc_json_parser_space_ext@@Base+0x3b8>
   2cb74:	beq	2cb90 <flatcc_json_parser_space_ext@@Base+0x468>
   2cb78:	mov	r2, r5
   2cb7c:	mov	r1, r4
   2cb80:	mov	r0, r6
   2cb84:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2cb88:	mov	r4, r0
   2cb8c:	b	2cae0 <flatcc_json_parser_space_ext@@Base+0x3b8>
   2cb90:	ldrb	r3, [r8, #2]
   2cb94:	cmp	r3, #32
   2cb98:	addhi	r4, r8, #2
   2cb9c:	bls	2cb78 <flatcc_json_parser_space_ext@@Base+0x450>
   2cba0:	b	2cae0 <flatcc_json_parser_space_ext@@Base+0x3b8>
   2cba4:	mov	r3, #30
   2cba8:	mov	r2, r5
   2cbac:	mov	r1, r8
   2cbb0:	mov	r0, r6
   2cbb4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2cbb8:	mov	r4, r0
   2cbbc:	b	2ca94 <flatcc_json_parser_space_ext@@Base+0x36c>
   2cbc0:	ldrb	r3, [r4, #1]
   2cbc4:	cmp	r3, #32
   2cbc8:	addhi	r4, r4, #1
   2cbcc:	bls	2ccdc <flatcc_json_parser_space_ext@@Base+0x5b4>
   2cbd0:	b	2ccf0 <flatcc_json_parser_space_ext@@Base+0x5c8>
   2cbd4:	add	r1, r4, #1
   2cbd8:	sub	r3, r5, r1
   2cbdc:	cmp	r3, #1
   2cbe0:	ble	2cbf8 <flatcc_json_parser_space_ext@@Base+0x4d0>
   2cbe4:	ldrb	r3, [r4, #1]
   2cbe8:	cmp	r3, #32
   2cbec:	movhi	r4, r1
   2cbf0:	bhi	2cd24 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2cbf4:	beq	2cc0c <flatcc_json_parser_space_ext@@Base+0x4e4>
   2cbf8:	mov	r2, r5
   2cbfc:	mov	r0, r6
   2cc00:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2cc04:	mov	r4, r0
   2cc08:	b	2cd24 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2cc0c:	ldrb	r3, [r4, #2]
   2cc10:	cmp	r3, #32
   2cc14:	addhi	r4, r4, #2
   2cc18:	bls	2cbf8 <flatcc_json_parser_space_ext@@Base+0x4d0>
   2cc1c:	b	2cd24 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2cc20:	add	r8, r4, #1
   2cc24:	sub	r3, r5, r8
   2cc28:	cmp	r3, #1
   2cc2c:	ble	2cc40 <flatcc_json_parser_space_ext@@Base+0x518>
   2cc30:	ldrb	r3, [r4, #1]
   2cc34:	cmp	r3, #32
   2cc38:	bhi	2cc54 <flatcc_json_parser_space_ext@@Base+0x52c>
   2cc3c:	beq	2cd4c <flatcc_json_parser_space_ext@@Base+0x624>
   2cc40:	mov	r2, r5
   2cc44:	mov	r1, r8
   2cc48:	mov	r0, r6
   2cc4c:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2cc50:	mov	r8, r0
   2cc54:	cmp	r5, r8
   2cc58:	beq	2cd60 <flatcc_json_parser_space_ext@@Base+0x638>
   2cc5c:	ldrb	r3, [r8]
   2cc60:	cmp	r3, #93	; 0x5d
   2cc64:	beq	2cd7c <flatcc_json_parser_space_ext@@Base+0x654>
   2cc68:	add	r7, r7, #1
   2cc6c:	cmp	r9, r7
   2cc70:	beq	2cba4 <flatcc_json_parser_space_ext@@Base+0x47c>
   2cc74:	ldr	r1, [sp, #12]
   2cc78:	ldr	r0, [r6]
   2cc7c:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2cc80:	ldrb	r3, [r0, r7]
   2cc84:	str	fp, [sp]
   2cc88:	mov	r2, r5
   2cc8c:	mov	r1, r8
   2cc90:	mov	r0, r6
   2cc94:	blx	sl
   2cc98:	mov	r4, r0
   2cc9c:	cmp	r5, r0
   2cca0:	beq	2ca94 <flatcc_json_parser_space_ext@@Base+0x36c>
   2cca4:	mov	r1, #1
   2cca8:	ldr	r0, [r6]
   2ccac:	bl	26760 <flatcc_builder_extend_offset_vector@@Base>
   2ccb0:	cmp	r0, #0
   2ccb4:	beq	2ca7c <flatcc_json_parser_space_ext@@Base+0x354>
   2ccb8:	ldr	r3, [sp, #20]
   2ccbc:	str	r3, [r0]
   2ccc0:	sub	r3, r5, r4
   2ccc4:	cmp	r3, #1
   2ccc8:	ble	2ccdc <flatcc_json_parser_space_ext@@Base+0x5b4>
   2cccc:	ldrb	r3, [r4]
   2ccd0:	cmp	r3, #32
   2ccd4:	bhi	2ccf8 <flatcc_json_parser_space_ext@@Base+0x5d0>
   2ccd8:	beq	2cbc0 <flatcc_json_parser_space_ext@@Base+0x498>
   2ccdc:	mov	r2, r5
   2cce0:	mov	r1, r4
   2cce4:	mov	r0, r6
   2cce8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2ccec:	mov	r4, r0
   2ccf0:	cmp	r5, r4
   2ccf4:	beq	2cd24 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2ccf8:	ldrb	r3, [r4]
   2ccfc:	cmp	r3, #44	; 0x2c
   2cd00:	beq	2cc20 <flatcc_json_parser_space_ext@@Base+0x4f8>
   2cd04:	cmp	r3, #93	; 0x5d
   2cd08:	beq	2cbd4 <flatcc_json_parser_space_ext@@Base+0x4ac>
   2cd0c:	mov	r3, #9
   2cd10:	mov	r2, r5
   2cd14:	mov	r1, r4
   2cd18:	mov	r0, r6
   2cd1c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2cd20:	mov	r4, r0
   2cd24:	add	r7, r7, #1
   2cd28:	cmp	r9, r7
   2cd2c:	beq	2cdc8 <flatcc_json_parser_space_ext@@Base+0x6a0>
   2cd30:	mov	r3, #30
   2cd34:	mov	r2, r5
   2cd38:	mov	r1, r4
   2cd3c:	mov	r0, r6
   2cd40:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2cd44:	mov	r4, r0
   2cd48:	b	2ca94 <flatcc_json_parser_space_ext@@Base+0x36c>
   2cd4c:	ldrb	r3, [r4, #2]
   2cd50:	cmp	r3, #32
   2cd54:	addhi	r8, r4, #2
   2cd58:	bls	2cc40 <flatcc_json_parser_space_ext@@Base+0x518>
   2cd5c:	b	2cc54 <flatcc_json_parser_space_ext@@Base+0x52c>
   2cd60:	mov	r3, #9
   2cd64:	mov	r2, r5
   2cd68:	mov	r1, r8
   2cd6c:	mov	r0, r6
   2cd70:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2cd74:	mov	r4, r0
   2cd78:	b	2cd24 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2cd7c:	add	r4, r8, #1
   2cd80:	sub	r3, r5, r4
   2cd84:	cmp	r3, #1
   2cd88:	ble	2cd9c <flatcc_json_parser_space_ext@@Base+0x674>
   2cd8c:	ldrb	r3, [r8, #1]
   2cd90:	cmp	r3, #32
   2cd94:	bhi	2cd24 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2cd98:	beq	2cdb4 <flatcc_json_parser_space_ext@@Base+0x68c>
   2cd9c:	mov	r2, r5
   2cda0:	mov	r1, r4
   2cda4:	mov	r0, r6
   2cda8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2cdac:	mov	r4, r0
   2cdb0:	b	2cd24 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2cdb4:	ldrb	r3, [r8, #2]
   2cdb8:	cmp	r3, #32
   2cdbc:	addhi	r4, r8, #2
   2cdc0:	bls	2cd9c <flatcc_json_parser_space_ext@@Base+0x674>
   2cdc4:	b	2cd24 <flatcc_json_parser_space_ext@@Base+0x5fc>
   2cdc8:	ldr	r1, [sp, #12]
   2cdcc:	ldr	r0, [r6]
   2cdd0:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2cdd4:	mov	r1, r0
   2cdd8:	ldr	r0, [r6]
   2cddc:	bl	28148 <flatcc_builder_end_offset_vector_for_unions@@Base>
   2cde0:	str	r0, [sp, #20]
   2cde4:	cmp	r0, #0
   2cde8:	beq	2ca7c <flatcc_json_parser_space_ext@@Base+0x354>
   2cdec:	ldrh	r1, [sp, #68]	; 0x44
   2cdf0:	ldr	r0, [r6]
   2cdf4:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   2cdf8:	cmp	r0, #0
   2cdfc:	beq	2ca7c <flatcc_json_parser_space_ext@@Base+0x354>
   2ce00:	ldr	r3, [sp, #20]
   2ce04:	str	r3, [r0]
   2ce08:	b	2ca94 <flatcc_json_parser_space_ext@@Base+0x36c>

0002ce0c <flatcc_json_parser_string_escape@@Base>:
   2ce0c:	str	r4, [sp, #-8]!
   2ce10:	str	lr, [sp, #4]
   2ce14:	sub	lr, r2, r1
   2ce18:	cmp	lr, #1
   2ce1c:	ble	2ce2c <flatcc_json_parser_string_escape@@Base+0x20>
   2ce20:	ldrb	ip, [r1]
   2ce24:	cmp	ip, #92	; 0x5c
   2ce28:	beq	2ce48 <flatcc_json_parser_string_escape@@Base+0x3c>
   2ce2c:	mov	ip, #0
   2ce30:	strb	ip, [r3]
   2ce34:	mov	r3, #18
   2ce38:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2ce3c:	ldr	r4, [sp]
   2ce40:	add	sp, sp, #4
   2ce44:	pop	{pc}		; (ldr pc, [sp], #4)
   2ce48:	ldrb	ip, [r1, #1]
   2ce4c:	sub	ip, ip, #34	; 0x22
   2ce50:	cmp	ip, #86	; 0x56
   2ce54:	ldrls	pc, [pc, ip, lsl #2]
   2ce58:	b	2d348 <flatcc_json_parser_string_escape@@Base+0x53c>
   2ce5c:	andeq	sp, r2, r0, lsl #6
   2ce60:	andeq	sp, r2, r8, asr #6
   2ce64:	andeq	sp, r2, r8, asr #6
   2ce68:	andeq	sp, r2, r8, asr #6
   2ce6c:	andeq	sp, r2, r8, asr #6
   2ce70:	andeq	sp, r2, r8, asr #6
   2ce74:	andeq	sp, r2, r8, asr #6
   2ce78:	andeq	sp, r2, r8, asr #6
   2ce7c:	andeq	sp, r2, r8, asr #6
   2ce80:	andeq	sp, r2, r8, asr #6
   2ce84:	andeq	sp, r2, r8, asr #6
   2ce88:	andeq	sp, r2, r8, asr #6
   2ce8c:	andeq	sp, r2, r8, asr #6
   2ce90:	andeq	sp, r2, r0, lsr r3
   2ce94:	andeq	sp, r2, r8, asr #6
   2ce98:	andeq	sp, r2, r8, asr #6
   2ce9c:	andeq	sp, r2, r8, asr #6
   2cea0:	andeq	sp, r2, r8, asr #6
   2cea4:	andeq	sp, r2, r8, asr #6
   2cea8:	andeq	sp, r2, r8, asr #6
   2ceac:	andeq	sp, r2, r8, asr #6
   2ceb0:	andeq	sp, r2, r8, asr #6
   2ceb4:	andeq	sp, r2, r8, asr #6
   2ceb8:	andeq	sp, r2, r8, asr #6
   2cebc:	andeq	sp, r2, r8, asr #6
   2cec0:	andeq	sp, r2, r8, asr #6
   2cec4:	andeq	sp, r2, r8, asr #6
   2cec8:	andeq	sp, r2, r8, asr #6
   2cecc:	andeq	sp, r2, r8, asr #6
   2ced0:	andeq	sp, r2, r8, asr #6
   2ced4:	andeq	sp, r2, r8, asr #6
   2ced8:	andeq	sp, r2, r8, asr #6
   2cedc:	andeq	sp, r2, r8, asr #6
   2cee0:	andeq	sp, r2, r8, asr #6
   2cee4:	andeq	sp, r2, r8, asr #6
   2cee8:	andeq	sp, r2, r8, asr #6
   2ceec:	andeq	sp, r2, r8, asr #6
   2cef0:	andeq	sp, r2, r8, asr #6
   2cef4:	andeq	sp, r2, r8, asr #6
   2cef8:	andeq	sp, r2, r8, asr #6
   2cefc:	andeq	sp, r2, r8, asr #6
   2cf00:	andeq	sp, r2, r8, asr #6
   2cf04:	andeq	sp, r2, r8, asr #6
   2cf08:	andeq	sp, r2, r8, asr #6
   2cf0c:	andeq	sp, r2, r8, asr #6
   2cf10:	andeq	sp, r2, r8, asr #6
   2cf14:	andeq	sp, r2, r8, asr #6
   2cf18:	andeq	sp, r2, r8, asr #6
   2cf1c:	andeq	sp, r2, r8, asr #6
   2cf20:	andeq	sp, r2, r8, asr #6
   2cf24:	andeq	sp, r2, r8, asr #6
   2cf28:	andeq	sp, r2, r8, asr #6
   2cf2c:	andeq	sp, r2, r8, asr #6
   2cf30:	andeq	sp, r2, r8, asr #6
   2cf34:	andeq	sp, r2, r8, asr #6
   2cf38:	andeq	sp, r2, r8, asr #6
   2cf3c:	andeq	sp, r2, r8, asr #6
   2cf40:	andeq	sp, r2, r8, asr #6
   2cf44:	andeq	sp, r2, r8, lsl r3
   2cf48:	andeq	sp, r2, r8, asr #6
   2cf4c:	andeq	sp, r2, r8, asr #6
   2cf50:	andeq	sp, r2, r8, asr #6
   2cf54:	andeq	sp, r2, r8, asr #6
   2cf58:	andeq	sp, r2, r8, asr #6
   2cf5c:	ldrdeq	sp, [r2], -r0
   2cf60:	andeq	sp, r2, r8, asr #6
   2cf64:	andeq	sp, r2, r8, asr #6
   2cf68:	andeq	sp, r2, r8, asr #6
   2cf6c:	andeq	sp, r2, r8, ror #5
   2cf70:	andeq	sp, r2, r8, asr #6
   2cf74:	andeq	sp, r2, r8, asr #6
   2cf78:	andeq	sp, r2, r8, asr #6
   2cf7c:	andeq	sp, r2, r8, asr #6
   2cf80:	andeq	sp, r2, r8, asr #6
   2cf84:	andeq	sp, r2, r8, asr #6
   2cf88:	andeq	sp, r2, r8, asr #6
   2cf8c:	andeq	sp, r2, r0, lsr #5
   2cf90:	andeq	sp, r2, r8, asr #6
   2cf94:	andeq	sp, r2, r8, asr #6
   2cf98:	andeq	sp, r2, r8, asr #6
   2cf9c:			; <UNDEFINED> instruction: 0x0002d2b8
   2cfa0:	andeq	sp, r2, r8, asr #6
   2cfa4:	andeq	sp, r2, r8, lsl #5
   2cfa8:	andeq	sp, r2, r4, lsl #1
   2cfac:	andeq	sp, r2, r8, asr #6
   2cfb0:	andeq	sp, r2, r8, asr #6
   2cfb4:			; <UNDEFINED> instruction: 0x0002cfb8
   2cfb8:	mov	ip, #1
   2cfbc:	strb	ip, [r3]
   2cfc0:	cmp	lr, #3
   2cfc4:	ble	2d048 <flatcc_json_parser_string_escape@@Base+0x23c>
   2cfc8:	ldrb	ip, [r1, #2]
   2cfcc:	sub	lr, ip, #48	; 0x30
   2cfd0:	uxtb	lr, lr
   2cfd4:	cmp	lr, #9
   2cfd8:	lslls	ip, ip, #4
   2cfdc:	andls	ip, ip, #240	; 0xf0
   2cfe0:	bls	2d004 <flatcc_json_parser_string_escape@@Base+0x1f8>
   2cfe4:	orr	ip, ip, #32
   2cfe8:	sub	lr, ip, #97	; 0x61
   2cfec:	uxtb	lr, lr
   2cff0:	cmp	lr, #5
   2cff4:	bhi	2d05c <flatcc_json_parser_string_escape@@Base+0x250>
   2cff8:	sub	ip, ip, #87	; 0x57
   2cffc:	lsl	ip, ip, #4
   2d000:	uxtb	ip, ip
   2d004:	ldrb	lr, [r1, #3]
   2d008:	sub	r4, lr, #48	; 0x30
   2d00c:	uxtb	r4, r4
   2d010:	cmp	r4, #9
   2d014:	orrls	ip, r4, ip
   2d018:	bls	2d03c <flatcc_json_parser_string_escape@@Base+0x230>
   2d01c:	orr	lr, lr, #32
   2d020:	sub	r4, lr, #97	; 0x61
   2d024:	uxtb	r4, r4
   2d028:	cmp	r4, #5
   2d02c:	bhi	2d070 <flatcc_json_parser_string_escape@@Base+0x264>
   2d030:	sub	lr, lr, #87	; 0x57
   2d034:	orr	ip, lr, ip
   2d038:	uxtb	ip, ip
   2d03c:	strb	ip, [r3, #1]
   2d040:	add	r0, r1, #4
   2d044:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d048:	mov	ip, #0
   2d04c:	strb	ip, [r3]
   2d050:	mov	r3, #18
   2d054:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d058:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d05c:	mov	ip, #0
   2d060:	strb	ip, [r3]
   2d064:	mov	r3, #18
   2d068:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d06c:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d070:	mov	ip, #0
   2d074:	strb	ip, [r3]
   2d078:	mov	r3, #18
   2d07c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d080:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d084:	cmp	lr, #5
   2d088:	ble	2d14c <flatcc_json_parser_string_escape@@Base+0x340>
   2d08c:	ldrb	ip, [r1, #2]
   2d090:	sub	lr, ip, #48	; 0x30
   2d094:	uxtb	lr, lr
   2d098:	cmp	lr, #9
   2d09c:	lslls	ip, ip, #12
   2d0a0:	andls	lr, ip, #61440	; 0xf000
   2d0a4:	bls	2d0c8 <flatcc_json_parser_string_escape@@Base+0x2bc>
   2d0a8:	orr	ip, ip, #32
   2d0ac:	sub	lr, ip, #97	; 0x61
   2d0b0:	uxtb	lr, lr
   2d0b4:	cmp	lr, #5
   2d0b8:	bhi	2d160 <flatcc_json_parser_string_escape@@Base+0x354>
   2d0bc:	sub	ip, ip, #87	; 0x57
   2d0c0:	lsl	ip, ip, #12
   2d0c4:	and	lr, ip, #61440	; 0xf000
   2d0c8:	ldrb	ip, [r1, #3]
   2d0cc:	sub	r4, ip, #48	; 0x30
   2d0d0:	uxtb	r4, r4
   2d0d4:	cmp	r4, #9
   2d0d8:	bhi	2d174 <flatcc_json_parser_string_escape@@Base+0x368>
   2d0dc:	sub	ip, ip, #48	; 0x30
   2d0e0:	uxth	ip, ip
   2d0e4:	orr	ip, lr, ip, lsl #8
   2d0e8:	and	ip, ip, #65280	; 0xff00
   2d0ec:	ldrb	lr, [r1, #4]
   2d0f0:	sub	r4, lr, #48	; 0x30
   2d0f4:	uxtb	r4, r4
   2d0f8:	cmp	r4, #9
   2d0fc:	bhi	2d1b0 <flatcc_json_parser_string_escape@@Base+0x3a4>
   2d100:	sub	lr, lr, #48	; 0x30
   2d104:	uxth	lr, lr
   2d108:	orr	ip, ip, lr, lsl #4
   2d10c:	uxth	ip, ip
   2d110:	ldrb	lr, [r1, #5]
   2d114:	sub	r4, lr, #48	; 0x30
   2d118:	uxtb	r4, r4
   2d11c:	cmp	r4, #9
   2d120:	bhi	2d1ec <flatcc_json_parser_string_escape@@Base+0x3e0>
   2d124:	sub	r2, lr, #48	; 0x30
   2d128:	orr	r2, ip, r2
   2d12c:	uxth	r2, r2
   2d130:	cmp	r2, #127	; 0x7f
   2d134:	bhi	2d224 <flatcc_json_parser_string_escape@@Base+0x418>
   2d138:	mov	r0, #1
   2d13c:	strb	r0, [r3]
   2d140:	strb	r2, [r3, #1]
   2d144:	add	r0, r1, #6
   2d148:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d14c:	mov	ip, #0
   2d150:	strb	ip, [r3]
   2d154:	mov	r3, #18
   2d158:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d15c:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d160:	mov	ip, #0
   2d164:	strb	ip, [r3]
   2d168:	mov	r3, #18
   2d16c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d170:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d174:	orr	ip, ip, #32
   2d178:	sub	r4, ip, #97	; 0x61
   2d17c:	uxtb	r4, r4
   2d180:	cmp	r4, #5
   2d184:	bhi	2d19c <flatcc_json_parser_string_escape@@Base+0x390>
   2d188:	sub	ip, ip, #87	; 0x57
   2d18c:	uxth	ip, ip
   2d190:	orr	ip, lr, ip, lsl #8
   2d194:	and	ip, ip, #65280	; 0xff00
   2d198:	b	2d0ec <flatcc_json_parser_string_escape@@Base+0x2e0>
   2d19c:	mov	ip, #0
   2d1a0:	strb	ip, [r3]
   2d1a4:	mov	r3, #18
   2d1a8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d1ac:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d1b0:	orr	lr, lr, #32
   2d1b4:	sub	r4, lr, #97	; 0x61
   2d1b8:	uxtb	r4, r4
   2d1bc:	cmp	r4, #5
   2d1c0:	bhi	2d1d8 <flatcc_json_parser_string_escape@@Base+0x3cc>
   2d1c4:	sub	lr, lr, #87	; 0x57
   2d1c8:	uxth	lr, lr
   2d1cc:	orr	ip, ip, lr, lsl #4
   2d1d0:	uxth	ip, ip
   2d1d4:	b	2d110 <flatcc_json_parser_string_escape@@Base+0x304>
   2d1d8:	mov	ip, #0
   2d1dc:	strb	ip, [r3]
   2d1e0:	mov	r3, #18
   2d1e4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d1e8:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d1ec:	orr	lr, lr, #32
   2d1f0:	sub	r4, lr, #97	; 0x61
   2d1f4:	uxtb	r4, r4
   2d1f8:	cmp	r4, #5
   2d1fc:	bhi	2d210 <flatcc_json_parser_string_escape@@Base+0x404>
   2d200:	sub	r2, lr, #87	; 0x57
   2d204:	orr	r2, ip, r2
   2d208:	uxth	r2, r2
   2d20c:	b	2d130 <flatcc_json_parser_string_escape@@Base+0x324>
   2d210:	mov	ip, #0
   2d214:	strb	ip, [r3]
   2d218:	mov	r3, #18
   2d21c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d220:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d224:	cmp	r2, #2048	; 0x800
   2d228:	bcs	2d254 <flatcc_json_parser_string_escape@@Base+0x448>
   2d22c:	mov	r0, #2
   2d230:	strb	r0, [r3]
   2d234:	mvn	r0, #63	; 0x3f
   2d238:	orr	r0, r0, r2, lsr #6
   2d23c:	strb	r0, [r3, #1]
   2d240:	and	r2, r2, #63	; 0x3f
   2d244:	mvn	r2, r2, lsl #25
   2d248:	mvn	r2, r2, lsr #25
   2d24c:	strb	r2, [r3, #2]
   2d250:	b	2d144 <flatcc_json_parser_string_escape@@Base+0x338>
   2d254:	mov	r0, #3
   2d258:	strb	r0, [r3]
   2d25c:	mvn	r0, #31
   2d260:	orr	r0, r0, r2, lsr #12
   2d264:	strb	r0, [r3, #1]
   2d268:	ubfx	ip, r2, #6, #6
   2d26c:	mvn	r0, #127	; 0x7f
   2d270:	orr	ip, r0, ip
   2d274:	strb	ip, [r3, #2]
   2d278:	and	r2, r2, #63	; 0x3f
   2d27c:	orr	r2, r0, r2
   2d280:	strb	r2, [r3, #3]
   2d284:	b	2d144 <flatcc_json_parser_string_escape@@Base+0x338>
   2d288:	mov	r2, #1
   2d28c:	strb	r2, [r3]
   2d290:	mov	r2, #9
   2d294:	strb	r2, [r3, #1]
   2d298:	add	r0, r1, #2
   2d29c:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d2a0:	mov	r2, #1
   2d2a4:	strb	r2, [r3]
   2d2a8:	mov	r2, #10
   2d2ac:	strb	r2, [r3, #1]
   2d2b0:	add	r0, r1, #2
   2d2b4:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d2b8:	mov	r2, #1
   2d2bc:	strb	r2, [r3]
   2d2c0:	mov	r2, #13
   2d2c4:	strb	r2, [r3, #1]
   2d2c8:	add	r0, r1, #2
   2d2cc:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d2d0:	mov	r2, #1
   2d2d4:	strb	r2, [r3]
   2d2d8:	mov	r2, #8
   2d2dc:	strb	r2, [r3, #1]
   2d2e0:	add	r0, r1, #2
   2d2e4:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d2e8:	mov	r2, #1
   2d2ec:	strb	r2, [r3]
   2d2f0:	mov	r2, #12
   2d2f4:	strb	r2, [r3, #1]
   2d2f8:	add	r0, r1, #2
   2d2fc:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d300:	mov	r2, #1
   2d304:	strb	r2, [r3]
   2d308:	mov	r2, #34	; 0x22
   2d30c:	strb	r2, [r3, #1]
   2d310:	add	r0, r1, #2
   2d314:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d318:	mov	r2, #1
   2d31c:	strb	r2, [r3]
   2d320:	mov	r2, #92	; 0x5c
   2d324:	strb	r2, [r3, #1]
   2d328:	add	r0, r1, #2
   2d32c:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d330:	mov	r2, #1
   2d334:	strb	r2, [r3]
   2d338:	mov	r2, #47	; 0x2f
   2d33c:	strb	r2, [r3, #1]
   2d340:	add	r0, r1, #2
   2d344:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>
   2d348:	mov	ip, #0
   2d34c:	strb	ip, [r3]
   2d350:	mov	r3, #18
   2d354:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d358:	b	2ce3c <flatcc_json_parser_string_escape@@Base+0x30>

0002d35c <flatcc_json_parser_skip_constant@@Base>:
   2d35c:	strd	r4, [sp, #-16]!
   2d360:	str	r6, [sp, #8]
   2d364:	str	lr, [sp, #12]
   2d368:	mov	r6, r0
   2d36c:	mov	r4, r1
   2d370:	mov	r5, r2
   2d374:	cmp	r1, r2
   2d378:	bne	2d3a0 <flatcc_json_parser_skip_constant@@Base+0x44>
   2d37c:	mov	r4, r2
   2d380:	mov	r0, r4
   2d384:	ldrd	r4, [sp]
   2d388:	ldr	r6, [sp, #8]
   2d38c:	add	sp, sp, #12
   2d390:	pop	{pc}		; (ldr pc, [sp], #4)
   2d394:	add	r4, r4, #1
   2d398:	cmp	r5, r4
   2d39c:	beq	2d380 <flatcc_json_parser_skip_constant@@Base+0x24>
   2d3a0:	ldrb	r3, [r4]
   2d3a4:	cmp	r3, #95	; 0x5f
   2d3a8:	movne	r2, #0
   2d3ac:	moveq	r2, #1
   2d3b0:	orrs	r2, r2, r3, lsr #7
   2d3b4:	bne	2d394 <flatcc_json_parser_skip_constant@@Base+0x38>
   2d3b8:	sub	r2, r3, #48	; 0x30
   2d3bc:	uxtb	r2, r2
   2d3c0:	cmp	r3, #46	; 0x2e
   2d3c4:	cmpne	r2, #9
   2d3c8:	bls	2d394 <flatcc_json_parser_skip_constant@@Base+0x38>
   2d3cc:	orr	r2, r3, #32
   2d3d0:	sub	r2, r2, #97	; 0x61
   2d3d4:	uxtb	r2, r2
   2d3d8:	cmp	r2, #25
   2d3dc:	addls	r4, r4, #1
   2d3e0:	bls	2d398 <flatcc_json_parser_skip_constant@@Base+0x3c>
   2d3e4:	sub	r2, r5, r4
   2d3e8:	cmp	r2, #1
   2d3ec:	ble	2d3fc <flatcc_json_parser_skip_constant@@Base+0xa0>
   2d3f0:	cmp	r3, #32
   2d3f4:	bhi	2d380 <flatcc_json_parser_skip_constant@@Base+0x24>
   2d3f8:	beq	2d41c <flatcc_json_parser_skip_constant@@Base+0xc0>
   2d3fc:	mov	r2, r5
   2d400:	mov	r1, r4
   2d404:	mov	r0, r6
   2d408:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2d40c:	cmp	r0, r4
   2d410:	beq	2d380 <flatcc_json_parser_skip_constant@@Base+0x24>
   2d414:	mov	r4, r0
   2d418:	b	2d398 <flatcc_json_parser_skip_constant@@Base+0x3c>
   2d41c:	ldrb	r3, [r4, #1]
   2d420:	cmp	r3, #32
   2d424:	addhi	r0, r4, #1
   2d428:	bls	2d3fc <flatcc_json_parser_skip_constant@@Base+0xa0>
   2d42c:	b	2d40c <flatcc_json_parser_skip_constant@@Base+0xb0>

0002d430 <flatcc_json_parser_match_constant@@Base>:
   2d430:	str	r4, [sp, #-8]!
   2d434:	str	lr, [sp, #4]
   2d438:	sub	ip, r2, r1
   2d43c:	cmp	ip, r3
   2d440:	ble	2d488 <flatcc_json_parser_match_constant@@Base+0x58>
   2d444:	mov	ip, r0
   2d448:	add	r0, r1, r3
   2d44c:	ldrb	r3, [r1, r3]
   2d450:	cmp	r3, #32
   2d454:	beq	2d4a4 <flatcc_json_parser_match_constant@@Base+0x74>
   2d458:	cmp	r3, #34	; 0x22
   2d45c:	beq	2d4e8 <flatcc_json_parser_match_constant@@Base+0xb8>
   2d460:	cmp	r3, #92	; 0x5c
   2d464:	bne	2d548 <flatcc_json_parser_match_constant@@Base+0x118>
   2d468:	mov	r3, #0
   2d46c:	ldr	r1, [sp, #8]
   2d470:	str	r3, [r1]
   2d474:	mov	r3, #18
   2d478:	mov	r1, r0
   2d47c:	mov	r0, ip
   2d480:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d484:	b	2d498 <flatcc_json_parser_match_constant@@Base+0x68>
   2d488:	mov	r3, #0
   2d48c:	ldr	r2, [sp, #8]
   2d490:	str	r3, [r2]
   2d494:	mov	r0, r1
   2d498:	ldr	r4, [sp]
   2d49c:	add	sp, sp, #4
   2d4a0:	pop	{pc}		; (ldr pc, [sp], #4)
   2d4a4:	add	r3, r0, #1
   2d4a8:	cmp	r2, r3
   2d4ac:	beq	2d55c <flatcc_json_parser_match_constant@@Base+0x12c>
   2d4b0:	ldrb	r1, [r0, #1]
   2d4b4:	cmp	r1, #32
   2d4b8:	bne	2d570 <flatcc_json_parser_match_constant@@Base+0x140>
   2d4bc:	add	r3, r0, #2
   2d4c0:	mov	r0, r3
   2d4c4:	cmp	r3, r2
   2d4c8:	beq	2d560 <flatcc_json_parser_match_constant@@Base+0x130>
   2d4cc:	add	r3, r3, #1
   2d4d0:	ldrb	r1, [r0]
   2d4d4:	cmp	r1, #32
   2d4d8:	beq	2d4c0 <flatcc_json_parser_match_constant@@Base+0x90>
   2d4dc:	ldrb	r3, [r0]
   2d4e0:	cmp	r3, #34	; 0x22
   2d4e4:	bne	2d524 <flatcc_json_parser_match_constant@@Base+0xf4>
   2d4e8:	add	r1, r0, #1
   2d4ec:	cmn	r1, #1
   2d4f0:	bge	2d508 <flatcc_json_parser_match_constant@@Base+0xd8>
   2d4f4:	ldrb	r3, [r0, #1]
   2d4f8:	cmp	r3, #32
   2d4fc:	movhi	r0, r1
   2d500:	bhi	2d514 <flatcc_json_parser_match_constant@@Base+0xe4>
   2d504:	beq	2d534 <flatcc_json_parser_match_constant@@Base+0x104>
   2d508:	mov	r2, #0
   2d50c:	mov	r0, ip
   2d510:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2d514:	mov	r3, #0
   2d518:	ldr	r2, [sp, #8]
   2d51c:	str	r3, [r2]
   2d520:	b	2d498 <flatcc_json_parser_match_constant@@Base+0x68>
   2d524:	mov	r3, #1
   2d528:	ldr	r2, [sp, #8]
   2d52c:	str	r3, [r2]
   2d530:	b	2d498 <flatcc_json_parser_match_constant@@Base+0x68>
   2d534:	ldrb	r3, [r0, #2]
   2d538:	cmp	r3, #32
   2d53c:	addhi	r0, r0, #2
   2d540:	bls	2d508 <flatcc_json_parser_match_constant@@Base+0xd8>
   2d544:	b	2d514 <flatcc_json_parser_match_constant@@Base+0xe4>
   2d548:	mov	r3, #0
   2d54c:	ldr	r2, [sp, #8]
   2d550:	str	r3, [r2]
   2d554:	mov	r0, r1
   2d558:	b	2d498 <flatcc_json_parser_match_constant@@Base+0x68>
   2d55c:	mov	r0, r3
   2d560:	mov	r3, #0
   2d564:	ldr	r2, [sp, #8]
   2d568:	str	r3, [r2]
   2d56c:	b	2d498 <flatcc_json_parser_match_constant@@Base+0x68>
   2d570:	mov	r0, r3
   2d574:	b	2d4dc <flatcc_json_parser_match_constant@@Base+0xac>

0002d578 <flatcc_json_parser_double@@Base>:
   2d578:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2d57c:	strd	r6, [sp, #8]
   2d580:	str	r8, [sp, #16]
   2d584:	str	lr, [sp, #20]
   2d588:	mov	r4, #0
   2d58c:	mov	r5, #0
   2d590:	strd	r4, [r3]
   2d594:	cmp	r1, r2
   2d598:	beq	2d62c <flatcc_json_parser_double@@Base+0xb4>
   2d59c:	ldrb	ip, [r1]
   2d5a0:	cmp	ip, #45	; 0x2d
   2d5a4:	addeq	ip, r1, #1
   2d5a8:	movne	ip, r1
   2d5ac:	mov	r6, r3
   2d5b0:	mov	r5, r2
   2d5b4:	mov	r4, r1
   2d5b8:	mov	r7, r0
   2d5bc:	sub	r3, r2, ip
   2d5c0:	cmp	r3, #1
   2d5c4:	ble	2d5dc <flatcc_json_parser_double@@Base+0x64>
   2d5c8:	ldrb	r3, [ip]
   2d5cc:	cmp	r3, #46	; 0x2e
   2d5d0:	beq	2d650 <flatcc_json_parser_double@@Base+0xd8>
   2d5d4:	cmp	r3, #48	; 0x30
   2d5d8:	beq	2d644 <flatcc_json_parser_double@@Base+0xcc>
   2d5dc:	mov	r2, r6
   2d5e0:	sub	r1, r5, r4
   2d5e4:	mov	r0, r4
   2d5e8:	bl	2b8f8 <grisu3_diy_fp_encode_double@@Base+0x500>
   2d5ec:	mov	r2, r0
   2d5f0:	cmp	r4, r0
   2d5f4:	cmpne	r0, #0
   2d5f8:	bne	2d62c <flatcc_json_parser_double@@Base+0xb4>
   2d5fc:	vldr	d7, [r6]
   2d600:	vabs.f64	d7, d7
   2d604:	vldr	d6, [pc, #100]	; 2d670 <flatcc_json_parser_double@@Base+0xf8>
   2d608:	vcmp.f64	d7, d6
   2d60c:	vmrs	APSR_nzcv, fpscr
   2d610:	movgt	r3, #7
   2d614:	movle	r3, #6
   2d618:	mov	r2, r5
   2d61c:	mov	r1, r4
   2d620:	mov	r0, r7
   2d624:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d628:	mov	r2, r0
   2d62c:	mov	r0, r2
   2d630:	ldrd	r4, [sp]
   2d634:	ldrd	r6, [sp, #8]
   2d638:	ldr	r8, [sp, #16]
   2d63c:	add	sp, sp, #20
   2d640:	pop	{pc}		; (ldr pc, [sp], #4)
   2d644:	ldrb	r3, [ip, #1]
   2d648:	cmp	r3, #48	; 0x30
   2d64c:	bne	2d5dc <flatcc_json_parser_double@@Base+0x64>
   2d650:	mov	r3, #6
   2d654:	mov	r2, r5
   2d658:	mov	r1, r4
   2d65c:	mov	r0, r7
   2d660:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d664:	mov	r2, r0
   2d668:	b	2d62c <flatcc_json_parser_double@@Base+0xb4>
   2d66c:	nop	{0}
   2d670:			; <UNDEFINED> instruction: 0xffffffff
   2d674:	svcvc	0x00efffff

0002d678 <flatcc_json_parser_float@@Base>:
   2d678:	mov	ip, #0
   2d67c:	str	ip, [r3]
   2d680:	cmp	r1, r2
   2d684:	beq	2d7a8 <flatcc_json_parser_float@@Base+0x130>
   2d688:	strd	r4, [sp, #-20]!	; 0xffffffec
   2d68c:	strd	r6, [sp, #8]
   2d690:	str	lr, [sp, #16]
   2d694:	sub	sp, sp, #12
   2d698:	ldrb	ip, [r1]
   2d69c:	cmp	ip, #45	; 0x2d
   2d6a0:	addeq	ip, r1, #1
   2d6a4:	movne	ip, r1
   2d6a8:	mov	r6, r3
   2d6ac:	mov	r5, r2
   2d6b0:	mov	r4, r1
   2d6b4:	mov	r7, r0
   2d6b8:	sub	r3, r2, ip
   2d6bc:	cmp	r3, #1
   2d6c0:	ble	2d6d8 <flatcc_json_parser_float@@Base+0x60>
   2d6c4:	ldrb	r3, [ip]
   2d6c8:	cmp	r3, #46	; 0x2e
   2d6cc:	beq	2d734 <flatcc_json_parser_float@@Base+0xbc>
   2d6d0:	cmp	r3, #48	; 0x30
   2d6d4:	beq	2d728 <flatcc_json_parser_float@@Base+0xb0>
   2d6d8:	mov	r2, sp
   2d6dc:	sub	r1, r5, r4
   2d6e0:	mov	r0, r4
   2d6e4:	bl	2b8f8 <grisu3_diy_fp_encode_double@@Base+0x500>
   2d6e8:	vldr	d6, [sp]
   2d6ec:	vcvt.f32.f64	s15, d6
   2d6f0:	vstr	s15, [r6]
   2d6f4:	vabs.f32	s15, s15
   2d6f8:	vldr	s14, [pc, #176]	; 2d7b0 <flatcc_json_parser_float@@Base+0x138>
   2d6fc:	vcmp.f32	s15, s14
   2d700:	vmrs	APSR_nzcv, fpscr
   2d704:	bgt	2d74c <flatcc_json_parser_float@@Base+0xd4>
   2d708:	cmp	r4, r0
   2d70c:	cmpne	r0, #0
   2d710:	beq	2d790 <flatcc_json_parser_float@@Base+0x118>
   2d714:	add	sp, sp, #12
   2d718:	ldrd	r4, [sp]
   2d71c:	ldrd	r6, [sp, #8]
   2d720:	add	sp, sp, #16
   2d724:	pop	{pc}		; (ldr pc, [sp], #4)
   2d728:	ldrb	r3, [ip, #1]
   2d72c:	cmp	r3, #48	; 0x30
   2d730:	bne	2d6d8 <flatcc_json_parser_float@@Base+0x60>
   2d734:	mov	r3, #6
   2d738:	mov	r2, r5
   2d73c:	mov	r1, r4
   2d740:	mov	r0, r7
   2d744:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d748:	b	2d714 <flatcc_json_parser_float@@Base+0x9c>
   2d74c:	vcmpe.f64	d6, #0.0
   2d750:	vmrs	APSR_nzcv, fpscr
   2d754:	vldr	s15, [pc, #88]	; 2d7b4 <flatcc_json_parser_float@@Base+0x13c>
   2d758:	vldr	s14, [pc, #88]	; 2d7b8 <flatcc_json_parser_float@@Base+0x140>
   2d75c:	vmovpl.f32	s15, s14
   2d760:	vstr	s15, [r6]
   2d764:	vabs.f32	s15, s15
   2d768:	vldr	s14, [pc, #64]	; 2d7b0 <flatcc_json_parser_float@@Base+0x138>
   2d76c:	vcmp.f32	s15, s14
   2d770:	vmrs	APSR_nzcv, fpscr
   2d774:	ble	2d790 <flatcc_json_parser_float@@Base+0x118>
   2d778:	mov	r3, #7
   2d77c:	mov	r2, r5
   2d780:	mov	r1, r4
   2d784:	mov	r0, r7
   2d788:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d78c:	b	2d714 <flatcc_json_parser_float@@Base+0x9c>
   2d790:	mov	r3, #6
   2d794:	mov	r2, r5
   2d798:	mov	r1, r4
   2d79c:	mov	r0, r7
   2d7a0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d7a4:	b	2d714 <flatcc_json_parser_float@@Base+0x9c>
   2d7a8:	mov	r0, r2
   2d7ac:	bx	lr
   2d7b0:	svcvc	0x007fffff
   2d7b4:			; <UNDEFINED> instruction: 0xff800000
   2d7b8:	svcvc	0x00800000

0002d7bc <flatcc_json_parser_integer@@Base>:
   2d7bc:	cmp	r1, r2
   2d7c0:	beq	2d8c8 <flatcc_json_parser_integer@@Base+0x10c>
   2d7c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d7c8:	strd	r6, [sp, #8]
   2d7cc:	strd	r8, [sp, #16]
   2d7d0:	strd	sl, [sp, #24]
   2d7d4:	str	lr, [sp, #32]
   2d7d8:	sub	sp, sp, #12
   2d7dc:	mov	r8, r0
   2d7e0:	ldrb	lr, [r1]
   2d7e4:	cmp	lr, #45	; 0x2d
   2d7e8:	movne	lr, #0
   2d7ec:	moveq	lr, #1
   2d7f0:	str	lr, [r3]
   2d7f4:	add	r0, r1, lr
   2d7f8:	cmp	r2, r0
   2d7fc:	beq	2d920 <flatcc_json_parser_integer@@Base+0x164>
   2d800:	mov	ip, r1
   2d804:	str	r8, [sp, #4]
   2d808:	ldrb	r8, [r1, lr]
   2d80c:	sub	r3, r8, #48	; 0x30
   2d810:	uxtb	r3, r3
   2d814:	cmp	r3, #9
   2d818:	bhi	2d8d8 <flatcc_json_parser_integer@@Base+0x11c>
   2d81c:	uxtb	r8, r8
   2d820:	mov	r9, #0
   2d824:	subs	r4, r8, #48	; 0x30
   2d828:	sbc	r5, r9, #0
   2d82c:	add	lr, r0, #1
   2d830:	mov	sl, r2
   2d834:	mov	r0, lr
   2d838:	cmp	lr, sl
   2d83c:	beq	2d928 <flatcc_json_parser_integer@@Base+0x16c>
   2d840:	ldrb	r8, [lr], #1
   2d844:	sub	r3, r8, #48	; 0x30
   2d848:	uxtb	r3, r3
   2d84c:	cmp	r3, #9
   2d850:	bhi	2d8e0 <flatcc_json_parser_integer@@Base+0x124>
   2d854:	lsl	fp, r5, #2
   2d858:	lsl	r3, r4, #2
   2d85c:	orr	r9, fp, r4, lsr #30
   2d860:	adds	r3, r3, r4
   2d864:	adc	r9, r9, r5
   2d868:	adds	r3, r3, r3
   2d86c:	adc	r9, r9, r9
   2d870:	subs	r3, r3, #48	; 0x30
   2d874:	sbc	fp, r9, #0
   2d878:	uxtb	r8, r8
   2d87c:	mov	r9, #0
   2d880:	adds	r6, r8, r3
   2d884:	adc	r7, r9, fp
   2d888:	cmp	r7, r5
   2d88c:	cmpeq	r6, r4
   2d890:	bcc	2d8a0 <flatcc_json_parser_integer@@Base+0xe4>
   2d894:	mov	r4, r6
   2d898:	mov	r5, r7
   2d89c:	b	2d834 <flatcc_json_parser_integer@@Base+0x78>
   2d8a0:	mov	r3, #8
   2d8a4:	mov	r1, r0
   2d8a8:	ldr	r0, [sp, #4]
   2d8ac:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d8b0:	b	2d904 <flatcc_json_parser_integer@@Base+0x148>
   2d8b4:	mov	r3, #12
   2d8b8:	mov	r1, r0
   2d8bc:	ldr	r0, [sp, #4]
   2d8c0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2d8c4:	b	2d904 <flatcc_json_parser_integer@@Base+0x148>
   2d8c8:	mov	r0, r2
   2d8cc:	bx	lr
   2d8d0:	mov	r0, ip
   2d8d4:	b	2d904 <flatcc_json_parser_integer@@Base+0x148>
   2d8d8:	mov	r4, #0
   2d8dc:	mov	r5, #0
   2d8e0:	cmp	r0, ip
   2d8e4:	beq	2d8d0 <flatcc_json_parser_integer@@Base+0x114>
   2d8e8:	ldrb	r3, [r0]
   2d8ec:	and	r1, r3, #223	; 0xdf
   2d8f0:	cmp	r3, #46	; 0x2e
   2d8f4:	cmpne	r1, #69	; 0x45
   2d8f8:	beq	2d8b4 <flatcc_json_parser_integer@@Base+0xf8>
   2d8fc:	ldr	r3, [sp, #48]	; 0x30
   2d900:	strd	r4, [r3]
   2d904:	add	sp, sp, #12
   2d908:	ldrd	r4, [sp]
   2d90c:	ldrd	r6, [sp, #8]
   2d910:	ldrd	r8, [sp, #16]
   2d914:	ldrd	sl, [sp, #24]
   2d918:	add	sp, sp, #32
   2d91c:	pop	{pc}		; (ldr pc, [sp], #4)
   2d920:	mov	r4, #0
   2d924:	mov	r5, #0
   2d928:	cmp	r1, r0
   2d92c:	bne	2d8fc <flatcc_json_parser_integer@@Base+0x140>
   2d930:	b	2d904 <flatcc_json_parser_integer@@Base+0x148>

0002d934 <flatcc_json_parser_generic_json@@Base>:
   2d934:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2d938:	strd	r6, [sp, #8]
   2d93c:	strd	r8, [sp, #16]
   2d940:	strd	sl, [sp, #24]
   2d944:	str	lr, [sp, #32]
   2d948:	sub	sp, sp, #548	; 0x224
   2d94c:	mov	r5, r2
   2d950:	cmp	r1, r2
   2d954:	beq	2e53c <flatcc_json_parser_generic_json@@Base+0xc08>
   2d958:	mov	fp, r0
   2d95c:	mov	r4, r1
   2d960:	add	r6, sp, #32
   2d964:	movw	r9, #58152	; 0xe328
   2d968:	movt	r9, #3
   2d96c:	movw	sl, #58144	; 0xe320
   2d970:	movt	sl, #3
   2d974:	add	r3, sp, #32
   2d978:	cmp	r6, r3
   2d97c:	beq	2e5b0 <flatcc_json_parser_generic_json@@Base+0xc7c>
   2d980:	ldrb	r3, [r6, #-1]
   2d984:	cmp	r3, #125	; 0x7d
   2d988:	beq	2db08 <flatcc_json_parser_generic_json@@Base+0x1d4>
   2d98c:	ldrb	r3, [r4]
   2d990:	sub	r2, r3, #34	; 0x22
   2d994:	cmp	r2, #89	; 0x59
   2d998:	ldrls	pc, [pc, r2, lsl #2]
   2d99c:	b	2e1bc <flatcc_json_parser_generic_json@@Base+0x888>
   2d9a0:	andeq	sp, r2, ip, ror ip
   2d9a4:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9a8:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9ac:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9b0:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9b4:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9b8:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9bc:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9c0:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9c4:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9c8:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9cc:	andeq	sp, r2, r8, lsl #26
   2d9d0:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9d4:			; <UNDEFINED> instruction: 0x0002e1bc
   2d9d8:	andeq	sp, r2, r8, lsl #26
   2d9dc:	andeq	sp, r2, r8, lsl #26
   2d9e0:	andeq	sp, r2, r8, lsl #26
   2d9e4:	andeq	sp, r2, r8, lsl #26
   2d9e8:	andeq	sp, r2, r8, lsl #26
   2d9ec:	andeq	sp, r2, r8, lsl #26
   2d9f0:	andeq	sp, r2, r8, lsl #26
   2d9f4:	andeq	sp, r2, r8, lsl #26
   2d9f8:	andeq	sp, r2, r8, lsl #26
   2d9fc:	andeq	sp, r2, r8, lsl #26
   2da00:			; <UNDEFINED> instruction: 0x0002e1bc
   2da04:			; <UNDEFINED> instruction: 0x0002e1bc
   2da08:			; <UNDEFINED> instruction: 0x0002e1bc
   2da0c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da10:			; <UNDEFINED> instruction: 0x0002e1bc
   2da14:			; <UNDEFINED> instruction: 0x0002e1bc
   2da18:			; <UNDEFINED> instruction: 0x0002e1bc
   2da1c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da20:			; <UNDEFINED> instruction: 0x0002e1bc
   2da24:			; <UNDEFINED> instruction: 0x0002e1bc
   2da28:			; <UNDEFINED> instruction: 0x0002e1bc
   2da2c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da30:			; <UNDEFINED> instruction: 0x0002e1bc
   2da34:			; <UNDEFINED> instruction: 0x0002e1bc
   2da38:			; <UNDEFINED> instruction: 0x0002e1bc
   2da3c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da40:			; <UNDEFINED> instruction: 0x0002e1bc
   2da44:			; <UNDEFINED> instruction: 0x0002e1bc
   2da48:			; <UNDEFINED> instruction: 0x0002e1bc
   2da4c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da50:			; <UNDEFINED> instruction: 0x0002e1bc
   2da54:			; <UNDEFINED> instruction: 0x0002e1bc
   2da58:			; <UNDEFINED> instruction: 0x0002e1bc
   2da5c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da60:			; <UNDEFINED> instruction: 0x0002e1bc
   2da64:			; <UNDEFINED> instruction: 0x0002e1bc
   2da68:			; <UNDEFINED> instruction: 0x0002e1bc
   2da6c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da70:			; <UNDEFINED> instruction: 0x0002e1bc
   2da74:			; <UNDEFINED> instruction: 0x0002e1bc
   2da78:			; <UNDEFINED> instruction: 0x0002e1bc
   2da7c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da80:			; <UNDEFINED> instruction: 0x0002e1bc
   2da84:	muleq	r2, ip, r0
   2da88:			; <UNDEFINED> instruction: 0x0002e1bc
   2da8c:			; <UNDEFINED> instruction: 0x0002e1bc
   2da90:			; <UNDEFINED> instruction: 0x0002e1bc
   2da94:			; <UNDEFINED> instruction: 0x0002e1bc
   2da98:			; <UNDEFINED> instruction: 0x0002e1bc
   2da9c:			; <UNDEFINED> instruction: 0x0002e1bc
   2daa0:			; <UNDEFINED> instruction: 0x0002e1bc
   2daa4:			; <UNDEFINED> instruction: 0x0002e1bc
   2daa8:			; <UNDEFINED> instruction: 0x0002e1bc
   2daac:			; <UNDEFINED> instruction: 0x0002e1bc
   2dab0:	andeq	sp, r2, ip, asr #30
   2dab4:			; <UNDEFINED> instruction: 0x0002e1bc
   2dab8:			; <UNDEFINED> instruction: 0x0002e1bc
   2dabc:			; <UNDEFINED> instruction: 0x0002e1bc
   2dac0:			; <UNDEFINED> instruction: 0x0002e1bc
   2dac4:			; <UNDEFINED> instruction: 0x0002e1bc
   2dac8:			; <UNDEFINED> instruction: 0x0002e1bc
   2dacc:			; <UNDEFINED> instruction: 0x0002e1bc
   2dad0:	andeq	lr, r2, r8, asr r0
   2dad4:			; <UNDEFINED> instruction: 0x0002e1bc
   2dad8:			; <UNDEFINED> instruction: 0x0002e1bc
   2dadc:			; <UNDEFINED> instruction: 0x0002e1bc
   2dae0:			; <UNDEFINED> instruction: 0x0002e1bc
   2dae4:			; <UNDEFINED> instruction: 0x0002e1bc
   2dae8:	andeq	sp, r2, ip, asr #30
   2daec:			; <UNDEFINED> instruction: 0x0002e1bc
   2daf0:			; <UNDEFINED> instruction: 0x0002e1bc
   2daf4:			; <UNDEFINED> instruction: 0x0002e1bc
   2daf8:			; <UNDEFINED> instruction: 0x0002e1bc
   2dafc:			; <UNDEFINED> instruction: 0x0002e1bc
   2db00:			; <UNDEFINED> instruction: 0x0002e1bc
   2db04:	andeq	lr, r2, ip, lsr #2
   2db08:	ldrb	r3, [r4]
   2db0c:	cmp	r3, #34	; 0x22
   2db10:	addeq	r1, r4, #1
   2db14:	bne	2db34 <flatcc_json_parser_generic_json@@Base+0x200>
   2db18:	cmp	r5, r1
   2db1c:	beq	2db9c <flatcc_json_parser_generic_json@@Base+0x268>
   2db20:	ldrb	r3, [r1]
   2db24:	cmp	r3, #34	; 0x22
   2db28:	bne	2db68 <flatcc_json_parser_generic_json@@Base+0x234>
   2db2c:	add	r0, r1, #1
   2db30:	b	2dbac <flatcc_json_parser_generic_json@@Base+0x278>
   2db34:	mov	r3, #5
   2db38:	mov	r2, r5
   2db3c:	mov	r1, r4
   2db40:	mov	r0, fp
   2db44:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2db48:	mov	r1, r0
   2db4c:	b	2db18 <flatcc_json_parser_generic_json@@Base+0x1e4>
   2db50:	add	r1, r3, #1
   2db54:	cmp	r5, r1
   2db58:	beq	2db9c <flatcc_json_parser_generic_json@@Base+0x268>
   2db5c:	ldrb	r3, [r3, #1]
   2db60:	cmp	r3, #34	; 0x22
   2db64:	beq	2db90 <flatcc_json_parser_generic_json@@Base+0x25c>
   2db68:	cmp	r3, #92	; 0x5c
   2db6c:	movne	r3, r1
   2db70:	bne	2db50 <flatcc_json_parser_generic_json@@Base+0x21c>
   2db74:	sub	r3, r5, r1
   2db78:	cmp	r3, #1
   2db7c:	ble	2db88 <flatcc_json_parser_generic_json@@Base+0x254>
   2db80:	add	r3, r1, #1
   2db84:	b	2db50 <flatcc_json_parser_generic_json@@Base+0x21c>
   2db88:	cmp	r5, r1
   2db8c:	beq	2db9c <flatcc_json_parser_generic_json@@Base+0x268>
   2db90:	ldrb	r3, [r1]
   2db94:	cmp	r3, #34	; 0x22
   2db98:	beq	2db2c <flatcc_json_parser_generic_json@@Base+0x1f8>
   2db9c:	mov	r3, #20
   2dba0:	mov	r2, r5
   2dba4:	mov	r0, fp
   2dba8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2dbac:	sub	r3, r5, r0
   2dbb0:	cmp	r3, #1
   2dbb4:	ble	2dbc8 <flatcc_json_parser_generic_json@@Base+0x294>
   2dbb8:	ldrb	r3, [r0]
   2dbbc:	cmp	r3, #32
   2dbc0:	bhi	2dbd8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2dbc4:	beq	2dc24 <flatcc_json_parser_generic_json@@Base+0x2f0>
   2dbc8:	mov	r2, r5
   2dbcc:	mov	r1, r0
   2dbd0:	mov	r0, fp
   2dbd4:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2dbd8:	cmp	r5, r0
   2dbdc:	beq	2dc38 <flatcc_json_parser_generic_json@@Base+0x304>
   2dbe0:	ldrb	r3, [r0]
   2dbe4:	cmp	r3, #58	; 0x3a
   2dbe8:	bne	2dc50 <flatcc_json_parser_generic_json@@Base+0x31c>
   2dbec:	add	r4, r0, #1
   2dbf0:	sub	r3, r5, r4
   2dbf4:	cmp	r3, #1
   2dbf8:	ble	2dc0c <flatcc_json_parser_generic_json@@Base+0x2d8>
   2dbfc:	ldrb	r3, [r0, #1]
   2dc00:	cmp	r3, #32
   2dc04:	bhi	2d98c <flatcc_json_parser_generic_json@@Base+0x58>
   2dc08:	beq	2dc68 <flatcc_json_parser_generic_json@@Base+0x334>
   2dc0c:	mov	r2, r5
   2dc10:	mov	r1, r4
   2dc14:	mov	r0, fp
   2dc18:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2dc1c:	mov	r4, r0
   2dc20:	b	2d98c <flatcc_json_parser_generic_json@@Base+0x58>
   2dc24:	ldrb	r3, [r0, #1]
   2dc28:	cmp	r3, #32
   2dc2c:	addhi	r0, r0, #1
   2dc30:	bls	2dbc8 <flatcc_json_parser_generic_json@@Base+0x294>
   2dc34:	b	2dbd8 <flatcc_json_parser_generic_json@@Base+0x2a4>
   2dc38:	mov	r3, #10
   2dc3c:	mov	r2, r5
   2dc40:	mov	r1, r0
   2dc44:	mov	r0, fp
   2dc48:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2dc4c:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2dc50:	mov	r3, #4
   2dc54:	mov	r2, r5
   2dc58:	mov	r1, r0
   2dc5c:	mov	r0, fp
   2dc60:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2dc64:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2dc68:	ldrb	r3, [r0, #2]
   2dc6c:	cmp	r3, #32
   2dc70:	addhi	r4, r0, #2
   2dc74:	bls	2dc0c <flatcc_json_parser_generic_json@@Base+0x2d8>
   2dc78:	b	2d98c <flatcc_json_parser_generic_json@@Base+0x58>
   2dc7c:	cmp	r5, r4
   2dc80:	addne	r0, r4, #1
   2dc84:	bne	2dc9c <flatcc_json_parser_generic_json@@Base+0x368>
   2dc88:	mov	r3, #16
   2dc8c:	mov	r2, r5
   2dc90:	mov	r1, r4
   2dc94:	mov	r0, fp
   2dc98:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2dc9c:	cmp	r5, r0
   2dca0:	beq	2e54c <flatcc_json_parser_generic_json@@Base+0xc18>
   2dca4:	ldrb	r3, [r0]
   2dca8:	cmp	r3, #34	; 0x22
   2dcac:	bne	2dcdc <flatcc_json_parser_generic_json@@Base+0x3a8>
   2dcb0:	b	2dd00 <flatcc_json_parser_generic_json@@Base+0x3cc>
   2dcb4:	add	r3, sp, #28
   2dcb8:	mov	r2, r5
   2dcbc:	mov	r1, r0
   2dcc0:	mov	r0, fp
   2dcc4:	bl	2ce0c <flatcc_json_parser_string_escape@@Base>
   2dcc8:	cmp	r5, r0
   2dccc:	beq	2e54c <flatcc_json_parser_generic_json@@Base+0xc18>
   2dcd0:	ldrb	r3, [r0]
   2dcd4:	cmp	r3, #34	; 0x22
   2dcd8:	beq	2dd00 <flatcc_json_parser_generic_json@@Base+0x3cc>
   2dcdc:	mov	r2, r5
   2dce0:	mov	r1, r0
   2dce4:	mov	r0, fp
   2dce8:	bl	2c674 <flatcc_json_parser_string_part@@Base>
   2dcec:	cmp	r5, r0
   2dcf0:	beq	2dcb4 <flatcc_json_parser_generic_json@@Base+0x380>
   2dcf4:	ldrb	r3, [r0]
   2dcf8:	cmp	r3, #34	; 0x22
   2dcfc:	bne	2dcb4 <flatcc_json_parser_generic_json@@Base+0x380>
   2dd00:	add	r0, r0, #1
   2dd04:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2dd08:	cmp	r5, r4
   2dd0c:	moveq	r0, r4
   2dd10:	beq	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2dd14:	cmp	r3, #45	; 0x2d
   2dd18:	beq	2ddd0 <flatcc_json_parser_generic_json@@Base+0x49c>
   2dd1c:	ldrb	r3, [r4]
   2dd20:	cmp	r3, #48	; 0x30
   2dd24:	beq	2ddf4 <flatcc_json_parser_generic_json@@Base+0x4c0>
   2dd28:	sub	r3, r3, #49	; 0x31
   2dd2c:	uxtb	r3, r3
   2dd30:	cmp	r3, #8
   2dd34:	bhi	2de04 <flatcc_json_parser_generic_json@@Base+0x4d0>
   2dd38:	add	r0, r4, #1
   2dd3c:	cmp	r5, r0
   2dd40:	beq	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2dd44:	ldrb	r3, [r4, #1]
   2dd48:	sub	r3, r3, #48	; 0x30
   2dd4c:	uxtb	r3, r3
   2dd50:	cmp	r3, #9
   2dd54:	bhi	2dd84 <flatcc_json_parser_generic_json@@Base+0x450>
   2dd58:	add	r4, r4, #2
   2dd5c:	mov	r2, r5
   2dd60:	mov	r0, r4
   2dd64:	cmp	r2, r4
   2dd68:	beq	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2dd6c:	add	r4, r4, #1
   2dd70:	ldrb	r3, [r0]
   2dd74:	sub	r3, r3, #48	; 0x30
   2dd78:	uxtb	r3, r3
   2dd7c:	cmp	r3, #9
   2dd80:	bls	2dd60 <flatcc_json_parser_generic_json@@Base+0x42c>
   2dd84:	ldrb	r3, [r0]
   2dd88:	cmp	r3, #46	; 0x2e
   2dd8c:	beq	2de1c <flatcc_json_parser_generic_json@@Base+0x4e8>
   2dd90:	ldrb	r3, [r0]
   2dd94:	and	r3, r3, #223	; 0xdf
   2dd98:	cmp	r3, #69	; 0x45
   2dd9c:	beq	2de98 <flatcc_json_parser_generic_json@@Base+0x564>
   2dda0:	ldrb	r3, [r0]
   2dda4:	cmp	r3, #32
   2dda8:	beq	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2ddac:	bls	2e564 <flatcc_json_parser_generic_json@@Base+0xc30>
   2ddb0:	cmp	r3, #58	; 0x3a
   2ddb4:	beq	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2ddb8:	bls	2e594 <flatcc_json_parser_generic_json@@Base+0xc60>
   2ddbc:	cmp	r3, #93	; 0x5d
   2ddc0:	beq	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2ddc4:	cmp	r3, #125	; 0x7d
   2ddc8:	bne	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2ddcc:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2ddd0:	add	r4, r4, #1
   2ddd4:	cmp	r5, r4
   2ddd8:	bne	2dd1c <flatcc_json_parser_generic_json@@Base+0x3e8>
   2dddc:	mov	r3, #6
   2dde0:	mov	r2, r4
   2dde4:	mov	r1, r4
   2dde8:	mov	r0, fp
   2ddec:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2ddf0:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2ddf4:	add	r0, r4, #1
   2ddf8:	cmp	r5, r0
   2ddfc:	bne	2dd84 <flatcc_json_parser_generic_json@@Base+0x450>
   2de00:	b	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2de04:	mov	r3, #6
   2de08:	mov	r2, r5
   2de0c:	mov	r1, r4
   2de10:	mov	r0, fp
   2de14:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2de18:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2de1c:	ldrb	r3, [r0, #1]
   2de20:	sub	r3, r3, #48	; 0x30
   2de24:	uxtb	r3, r3
   2de28:	cmp	r3, #9
   2de2c:	bhi	2de80 <flatcc_json_parser_generic_json@@Base+0x54c>
   2de30:	add	r2, r0, #2
   2de34:	cmp	r5, r2
   2de38:	beq	2e5a8 <flatcc_json_parser_generic_json@@Base+0xc74>
   2de3c:	ldrb	r3, [r0, #2]
   2de40:	sub	r3, r3, #48	; 0x30
   2de44:	uxtb	r3, r3
   2de48:	cmp	r3, #9
   2de4c:	bhi	2e5a0 <flatcc_json_parser_generic_json@@Base+0xc6c>
   2de50:	add	r2, r0, #3
   2de54:	mov	r1, r5
   2de58:	mov	r0, r2
   2de5c:	cmp	r1, r2
   2de60:	beq	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2de64:	add	r2, r2, #1
   2de68:	ldrb	r3, [r0]
   2de6c:	sub	r3, r3, #48	; 0x30
   2de70:	uxtb	r3, r3
   2de74:	cmp	r3, #9
   2de78:	bls	2de58 <flatcc_json_parser_generic_json@@Base+0x524>
   2de7c:	b	2dd90 <flatcc_json_parser_generic_json@@Base+0x45c>
   2de80:	mov	r3, #6
   2de84:	mov	r2, r5
   2de88:	add	r1, r0, #1
   2de8c:	mov	r0, fp
   2de90:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2de94:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2de98:	add	r1, r0, #1
   2de9c:	cmp	r5, r1
   2dea0:	beq	2dee8 <flatcc_json_parser_generic_json@@Base+0x5b4>
   2dea4:	ldrb	r3, [r0, #1]
   2dea8:	sub	r3, r3, #43	; 0x2b
   2deac:	tst	r3, #253	; 0xfd
   2deb0:	bne	2dec0 <flatcc_json_parser_generic_json@@Base+0x58c>
   2deb4:	add	r1, r0, #2
   2deb8:	cmp	r5, r1
   2debc:	beq	2ded4 <flatcc_json_parser_generic_json@@Base+0x5a0>
   2dec0:	ldrb	r3, [r1]
   2dec4:	sub	r3, r3, #48	; 0x30
   2dec8:	uxtb	r3, r3
   2decc:	cmp	r3, #9
   2ded0:	bls	2defc <flatcc_json_parser_generic_json@@Base+0x5c8>
   2ded4:	mov	r3, #6
   2ded8:	mov	r2, r5
   2dedc:	mov	r0, fp
   2dee0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2dee4:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2dee8:	mov	r3, #6
   2deec:	mov	r2, r1
   2def0:	mov	r0, fp
   2def4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2def8:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2defc:	add	r0, r1, #1
   2df00:	cmp	r5, r0
   2df04:	beq	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2df08:	ldrb	r3, [r1, #1]
   2df0c:	sub	r3, r3, #48	; 0x30
   2df10:	uxtb	r3, r3
   2df14:	cmp	r3, #9
   2df18:	bhi	2dda0 <flatcc_json_parser_generic_json@@Base+0x46c>
   2df1c:	add	r3, r1, #2
   2df20:	mov	r1, r5
   2df24:	mov	r0, r3
   2df28:	cmp	r1, r3
   2df2c:	beq	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2df30:	add	r3, r3, #1
   2df34:	ldrb	r2, [r0]
   2df38:	sub	r2, r2, #48	; 0x30
   2df3c:	uxtb	r2, r2
   2df40:	cmp	r2, #9
   2df44:	bls	2df24 <flatcc_json_parser_generic_json@@Base+0x5f0>
   2df48:	b	2dda0 <flatcc_json_parser_generic_json@@Base+0x46c>
   2df4c:	sub	r7, r5, r4
   2df50:	cmp	r7, #3
   2df54:	ble	2df78 <flatcc_json_parser_generic_json@@Base+0x644>
   2df58:	mov	r2, #4
   2df5c:	movw	r1, #58136	; 0xe318
   2df60:	movt	r1, #3
   2df64:	mov	r0, r4
   2df68:	bl	14530 <memcmp@plt>
   2df6c:	cmp	r0, #0
   2df70:	addeq	r0, r4, #4
   2df74:	beq	2dfe4 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2df78:	cmp	r7, #4
   2df7c:	ble	2df9c <flatcc_json_parser_generic_json@@Base+0x668>
   2df80:	mov	r2, #5
   2df84:	mov	r1, sl
   2df88:	mov	r0, r4
   2df8c:	bl	14530 <memcmp@plt>
   2df90:	cmp	r0, #0
   2df94:	addeq	r0, r4, #5
   2df98:	beq	2dfe4 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2df9c:	mov	r2, #0
   2dfa0:	mov	r3, #0
   2dfa4:	strd	r2, [sp, #16]
   2dfa8:	mov	r3, #0
   2dfac:	str	r3, [sp, #12]
   2dfb0:	cmp	r5, r4
   2dfb4:	moveq	r0, r4
   2dfb8:	beq	2dfe4 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2dfbc:	add	r3, sp, #16
   2dfc0:	str	r3, [sp]
   2dfc4:	add	r3, sp, #12
   2dfc8:	mov	r2, r5
   2dfcc:	mov	r1, r4
   2dfd0:	mov	r0, fp
   2dfd4:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   2dfd8:	cmp	r0, r4
   2dfdc:	moveq	r0, r4
   2dfe0:	bne	2dff4 <flatcc_json_parser_generic_json@@Base+0x6c0>
   2dfe4:	cmp	r0, r4
   2dfe8:	beq	2e040 <flatcc_json_parser_generic_json@@Base+0x70c>
   2dfec:	add	r7, sp, #32
   2dff0:	b	2e390 <flatcc_json_parser_generic_json@@Base+0xa5c>
   2dff4:	ldr	r3, [sp, #12]
   2dff8:	cmp	r3, #0
   2dffc:	bne	2e028 <flatcc_json_parser_generic_json@@Base+0x6f4>
   2e000:	ldrd	r2, [sp, #16]
   2e004:	cmp	r3, #0
   2e008:	cmpeq	r2, #255	; 0xff
   2e00c:	bls	2dfe4 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2e010:	mov	r3, #7
   2e014:	mov	r2, r5
   2e018:	mov	r1, r0
   2e01c:	mov	r0, fp
   2e020:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e024:	b	2dfe4 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2e028:	mov	r3, #8
   2e02c:	mov	r2, r5
   2e030:	mov	r1, r0
   2e034:	mov	r0, fp
   2e038:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e03c:	b	2dfe4 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2e040:	mov	r3, #5
   2e044:	mov	r2, r5
   2e048:	mov	r1, r4
   2e04c:	mov	r0, fp
   2e050:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e054:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2e058:	sub	r3, r5, r4
   2e05c:	cmp	r3, #3
   2e060:	ble	2e07c <flatcc_json_parser_generic_json@@Base+0x748>
   2e064:	mov	r2, #4
   2e068:	mov	r1, r9
   2e06c:	mov	r0, r4
   2e070:	bl	14530 <memcmp@plt>
   2e074:	cmp	r0, #0
   2e078:	beq	2e094 <flatcc_json_parser_generic_json@@Base+0x760>
   2e07c:	mov	r3, #5
   2e080:	mov	r2, r5
   2e084:	mov	r1, r4
   2e088:	mov	r0, fp
   2e08c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e090:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2e094:	add	r0, r4, #4
   2e098:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e09c:	add	r3, sp, #544	; 0x220
   2e0a0:	cmp	r6, r3
   2e0a4:	beq	2e100 <flatcc_json_parser_generic_json@@Base+0x7cc>
   2e0a8:	mov	r3, #93	; 0x5d
   2e0ac:	strb	r3, [r6], #1
   2e0b0:	add	r1, r4, #1
   2e0b4:	sub	r3, r5, r1
   2e0b8:	cmp	r3, #1
   2e0bc:	ble	2e0d4 <flatcc_json_parser_generic_json@@Base+0x7a0>
   2e0c0:	ldrb	r3, [r4, #1]
   2e0c4:	cmp	r3, #32
   2e0c8:	movhi	r4, r1
   2e0cc:	bhi	2e0e4 <flatcc_json_parser_generic_json@@Base+0x7b0>
   2e0d0:	beq	2e118 <flatcc_json_parser_generic_json@@Base+0x7e4>
   2e0d4:	mov	r2, r5
   2e0d8:	mov	r0, fp
   2e0dc:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e0e0:	mov	r4, r0
   2e0e4:	cmp	r5, r4
   2e0e8:	beq	2e544 <flatcc_json_parser_generic_json@@Base+0xc10>
   2e0ec:	ldrb	r3, [r4]
   2e0f0:	cmp	r3, #93	; 0x5d
   2e0f4:	bne	2d974 <flatcc_json_parser_generic_json@@Base+0x40>
   2e0f8:	mov	r0, r4
   2e0fc:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e100:	mov	r3, #2
   2e104:	mov	r2, r5
   2e108:	mov	r1, r4
   2e10c:	mov	r0, fp
   2e110:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e114:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2e118:	ldrb	r3, [r4, #2]
   2e11c:	cmp	r3, #32
   2e120:	addhi	r4, r4, #2
   2e124:	bls	2e0d4 <flatcc_json_parser_generic_json@@Base+0x7a0>
   2e128:	b	2e0e4 <flatcc_json_parser_generic_json@@Base+0x7b0>
   2e12c:	add	r3, sp, #544	; 0x220
   2e130:	cmp	r6, r3
   2e134:	beq	2e190 <flatcc_json_parser_generic_json@@Base+0x85c>
   2e138:	mov	r3, #125	; 0x7d
   2e13c:	strb	r3, [r6], #1
   2e140:	add	r1, r4, #1
   2e144:	sub	r3, r5, r1
   2e148:	cmp	r3, #1
   2e14c:	ble	2e164 <flatcc_json_parser_generic_json@@Base+0x830>
   2e150:	ldrb	r3, [r4, #1]
   2e154:	cmp	r3, #32
   2e158:	movhi	r4, r1
   2e15c:	bhi	2e174 <flatcc_json_parser_generic_json@@Base+0x840>
   2e160:	beq	2e1a8 <flatcc_json_parser_generic_json@@Base+0x874>
   2e164:	mov	r2, r5
   2e168:	mov	r0, fp
   2e16c:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e170:	mov	r4, r0
   2e174:	cmp	r5, r4
   2e178:	beq	2e544 <flatcc_json_parser_generic_json@@Base+0xc10>
   2e17c:	ldrb	r3, [r4]
   2e180:	cmp	r3, #125	; 0x7d
   2e184:	bne	2d974 <flatcc_json_parser_generic_json@@Base+0x40>
   2e188:	mov	r0, r4
   2e18c:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e190:	mov	r3, #2
   2e194:	mov	r2, r5
   2e198:	mov	r1, r4
   2e19c:	mov	r0, fp
   2e1a0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e1a4:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2e1a8:	ldrb	r3, [r4, #2]
   2e1ac:	cmp	r3, #32
   2e1b0:	addhi	r4, r4, #2
   2e1b4:	bls	2e164 <flatcc_json_parser_generic_json@@Base+0x830>
   2e1b8:	b	2e174 <flatcc_json_parser_generic_json@@Base+0x840>
   2e1bc:	mov	r3, #5
   2e1c0:	mov	r2, r5
   2e1c4:	mov	r1, r4
   2e1c8:	mov	r0, fp
   2e1cc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e1d0:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2e1d4:	sub	r3, r5, r0
   2e1d8:	cmp	r3, #1
   2e1dc:	ble	2e1f0 <flatcc_json_parser_generic_json@@Base+0x8bc>
   2e1e0:	ldrb	r3, [r0]
   2e1e4:	cmp	r3, #32
   2e1e8:	bhi	2e208 <flatcc_json_parser_generic_json@@Base+0x8d4>
   2e1ec:	beq	2e234 <flatcc_json_parser_generic_json@@Base+0x900>
   2e1f0:	mov	r2, r5
   2e1f4:	mov	r1, r0
   2e1f8:	mov	r0, fp
   2e1fc:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e200:	cmp	r5, r0
   2e204:	beq	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e208:	ldrb	r3, [r0]
   2e20c:	cmp	r3, #44	; 0x2c
   2e210:	beq	2e290 <flatcc_json_parser_generic_json@@Base+0x95c>
   2e214:	cmp	r3, #93	; 0x5d
   2e218:	beq	2e248 <flatcc_json_parser_generic_json@@Base+0x914>
   2e21c:	mov	r3, #9
   2e220:	mov	r2, r5
   2e224:	mov	r1, r0
   2e228:	mov	r0, fp
   2e22c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e230:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e234:	ldrb	r3, [r0, #1]
   2e238:	cmp	r3, #32
   2e23c:	addhi	r0, r0, #1
   2e240:	bls	2e1f0 <flatcc_json_parser_generic_json@@Base+0x8bc>
   2e244:	b	2e200 <flatcc_json_parser_generic_json@@Base+0x8cc>
   2e248:	add	r1, r0, #1
   2e24c:	sub	r3, r5, r1
   2e250:	cmp	r3, #1
   2e254:	ble	2e26c <flatcc_json_parser_generic_json@@Base+0x938>
   2e258:	ldrb	r3, [r0, #1]
   2e25c:	cmp	r3, #32
   2e260:	movhi	r0, r1
   2e264:	bhi	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e268:	beq	2e27c <flatcc_json_parser_generic_json@@Base+0x948>
   2e26c:	mov	r2, r5
   2e270:	mov	r0, fp
   2e274:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e278:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e27c:	ldrb	r3, [r0, #2]
   2e280:	cmp	r3, #32
   2e284:	addhi	r0, r0, #2
   2e288:	bls	2e26c <flatcc_json_parser_generic_json@@Base+0x938>
   2e28c:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e290:	add	r1, r0, #1
   2e294:	sub	r3, r5, r1
   2e298:	cmp	r3, #1
   2e29c:	ble	2e2b0 <flatcc_json_parser_generic_json@@Base+0x97c>
   2e2a0:	ldrb	r3, [r0, #1]
   2e2a4:	cmp	r3, #32
   2e2a8:	bhi	2e2c0 <flatcc_json_parser_generic_json@@Base+0x98c>
   2e2ac:	beq	2e2dc <flatcc_json_parser_generic_json@@Base+0x9a8>
   2e2b0:	mov	r2, r5
   2e2b4:	mov	r0, fp
   2e2b8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e2bc:	mov	r1, r0
   2e2c0:	cmp	r5, r1
   2e2c4:	beq	2e2f0 <flatcc_json_parser_generic_json@@Base+0x9bc>
   2e2c8:	ldrb	r3, [r1]
   2e2cc:	cmp	r3, #93	; 0x5d
   2e2d0:	beq	2e304 <flatcc_json_parser_generic_json@@Base+0x9d0>
   2e2d4:	mov	r4, r1
   2e2d8:	b	2d974 <flatcc_json_parser_generic_json@@Base+0x40>
   2e2dc:	ldrb	r3, [r0, #2]
   2e2e0:	cmp	r3, #32
   2e2e4:	addhi	r1, r0, #2
   2e2e8:	bls	2e2b0 <flatcc_json_parser_generic_json@@Base+0x97c>
   2e2ec:	b	2e2c0 <flatcc_json_parser_generic_json@@Base+0x98c>
   2e2f0:	mov	r3, #9
   2e2f4:	mov	r2, r5
   2e2f8:	mov	r0, fp
   2e2fc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e300:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e304:	add	r0, r1, #1
   2e308:	sub	r3, r5, r0
   2e30c:	cmp	r3, #1
   2e310:	ble	2e324 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2e314:	ldrb	r3, [r1, #1]
   2e318:	cmp	r3, #32
   2e31c:	bhi	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e320:	beq	2e338 <flatcc_json_parser_generic_json@@Base+0xa04>
   2e324:	mov	r2, r5
   2e328:	mov	r1, r0
   2e32c:	mov	r0, fp
   2e330:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e334:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e338:	ldrb	r3, [r1, #2]
   2e33c:	cmp	r3, #32
   2e340:	addhi	r0, r1, #2
   2e344:	bls	2e324 <flatcc_json_parser_generic_json@@Base+0x9f0>
   2e348:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e34c:	mov	r2, r5
   2e350:	mov	r1, r0
   2e354:	mov	r0, fp
   2e358:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e35c:	cmp	r5, r0
   2e360:	beq	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e364:	ldrb	r3, [r0]
   2e368:	cmp	r3, #44	; 0x2c
   2e36c:	beq	2e42c <flatcc_json_parser_generic_json@@Base+0xaf8>
   2e370:	cmp	r3, #125	; 0x7d
   2e374:	beq	2e3e4 <flatcc_json_parser_generic_json@@Base+0xab0>
   2e378:	mov	r3, #10
   2e37c:	mov	r2, r5
   2e380:	mov	r1, r0
   2e384:	mov	r0, fp
   2e388:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e38c:	mov	r6, r8
   2e390:	subs	r3, r6, r7
   2e394:	movne	r3, #1
   2e398:	cmp	r0, r5
   2e39c:	cmpne	r6, r7
   2e3a0:	beq	2e4e8 <flatcc_json_parser_generic_json@@Base+0xbb4>
   2e3a4:	sub	r8, r6, #1
   2e3a8:	ldrb	r3, [r6, #-1]
   2e3ac:	cmp	r3, #93	; 0x5d
   2e3b0:	beq	2e1d4 <flatcc_json_parser_generic_json@@Base+0x8a0>
   2e3b4:	sub	r3, r5, r0
   2e3b8:	cmp	r3, #1
   2e3bc:	ble	2e34c <flatcc_json_parser_generic_json@@Base+0xa18>
   2e3c0:	ldrb	r3, [r0]
   2e3c4:	cmp	r3, #32
   2e3c8:	bhi	2e364 <flatcc_json_parser_generic_json@@Base+0xa30>
   2e3cc:	bne	2e34c <flatcc_json_parser_generic_json@@Base+0xa18>
   2e3d0:	ldrb	r3, [r0, #1]
   2e3d4:	cmp	r3, #32
   2e3d8:	addhi	r0, r0, #1
   2e3dc:	bls	2e34c <flatcc_json_parser_generic_json@@Base+0xa18>
   2e3e0:	b	2e35c <flatcc_json_parser_generic_json@@Base+0xa28>
   2e3e4:	add	r1, r0, #1
   2e3e8:	sub	r3, r5, r1
   2e3ec:	cmp	r3, #1
   2e3f0:	ble	2e408 <flatcc_json_parser_generic_json@@Base+0xad4>
   2e3f4:	ldrb	r3, [r0, #1]
   2e3f8:	cmp	r3, #32
   2e3fc:	movhi	r0, r1
   2e400:	bhi	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e404:	beq	2e418 <flatcc_json_parser_generic_json@@Base+0xae4>
   2e408:	mov	r2, r5
   2e40c:	mov	r0, fp
   2e410:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e414:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e418:	ldrb	r3, [r0, #2]
   2e41c:	cmp	r3, #32
   2e420:	addhi	r0, r0, #2
   2e424:	bls	2e408 <flatcc_json_parser_generic_json@@Base+0xad4>
   2e428:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e42c:	add	r1, r0, #1
   2e430:	sub	r3, r5, r1
   2e434:	cmp	r3, #1
   2e438:	ble	2e44c <flatcc_json_parser_generic_json@@Base+0xb18>
   2e43c:	ldrb	r3, [r0, #1]
   2e440:	cmp	r3, #32
   2e444:	bhi	2e45c <flatcc_json_parser_generic_json@@Base+0xb28>
   2e448:	beq	2e478 <flatcc_json_parser_generic_json@@Base+0xb44>
   2e44c:	mov	r2, r5
   2e450:	mov	r0, fp
   2e454:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e458:	mov	r1, r0
   2e45c:	cmp	r5, r1
   2e460:	beq	2e48c <flatcc_json_parser_generic_json@@Base+0xb58>
   2e464:	ldrb	r3, [r1]
   2e468:	cmp	r3, #125	; 0x7d
   2e46c:	beq	2e4a0 <flatcc_json_parser_generic_json@@Base+0xb6c>
   2e470:	mov	r4, r1
   2e474:	b	2d974 <flatcc_json_parser_generic_json@@Base+0x40>
   2e478:	ldrb	r3, [r0, #2]
   2e47c:	cmp	r3, #32
   2e480:	addhi	r1, r0, #2
   2e484:	bls	2e44c <flatcc_json_parser_generic_json@@Base+0xb18>
   2e488:	b	2e45c <flatcc_json_parser_generic_json@@Base+0xb28>
   2e48c:	mov	r3, #10
   2e490:	mov	r2, r5
   2e494:	mov	r0, fp
   2e498:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e49c:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e4a0:	add	r0, r1, #1
   2e4a4:	sub	r3, r5, r0
   2e4a8:	cmp	r3, #1
   2e4ac:	ble	2e4c0 <flatcc_json_parser_generic_json@@Base+0xb8c>
   2e4b0:	ldrb	r3, [r1, #1]
   2e4b4:	cmp	r3, #32
   2e4b8:	bhi	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e4bc:	beq	2e4d4 <flatcc_json_parser_generic_json@@Base+0xba0>
   2e4c0:	mov	r2, r5
   2e4c4:	mov	r1, r0
   2e4c8:	mov	r0, fp
   2e4cc:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e4d0:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e4d4:	ldrb	r3, [r1, #2]
   2e4d8:	cmp	r3, #32
   2e4dc:	addhi	r0, r1, #2
   2e4e0:	bls	2e4c0 <flatcc_json_parser_generic_json@@Base+0xb8c>
   2e4e4:	b	2e38c <flatcc_json_parser_generic_json@@Base+0xa58>
   2e4e8:	cmp	r0, r5
   2e4ec:	movne	r3, #0
   2e4f0:	andeq	r3, r3, #1
   2e4f4:	cmp	r3, #0
   2e4f8:	bne	2e518 <flatcc_json_parser_generic_json@@Base+0xbe4>
   2e4fc:	add	sp, sp, #548	; 0x224
   2e500:	ldrd	r4, [sp]
   2e504:	ldrd	r6, [sp, #8]
   2e508:	ldrd	r8, [sp, #16]
   2e50c:	ldrd	sl, [sp, #24]
   2e510:	add	sp, sp, #32
   2e514:	pop	{pc}		; (ldr pc, [sp], #4)
   2e518:	ldrb	r3, [r6, #-1]
   2e51c:	cmp	r3, #93	; 0x5d
   2e520:	moveq	r3, #9
   2e524:	movne	r3, #10
   2e528:	mov	r2, r5
   2e52c:	mov	r1, r0
   2e530:	mov	r0, fp
   2e534:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e538:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2e53c:	mov	r0, r2
   2e540:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2e544:	mov	r0, r4
   2e548:	b	2e4fc <flatcc_json_parser_generic_json@@Base+0xbc8>
   2e54c:	mov	r3, #20
   2e550:	mov	r2, r5
   2e554:	mov	r1, r0
   2e558:	mov	r0, fp
   2e55c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e560:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e564:	cmp	r3, #9
   2e568:	bcc	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2e56c:	cmp	r3, #11
   2e570:	bls	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e574:	cmp	r3, #13
   2e578:	beq	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e57c:	mov	r3, #6
   2e580:	mov	r2, r5
   2e584:	mov	r1, r0
   2e588:	mov	r0, fp
   2e58c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e590:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e594:	cmp	r3, #44	; 0x2c
   2e598:	bne	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2e59c:	b	2dfec <flatcc_json_parser_generic_json@@Base+0x6b8>
   2e5a0:	mov	r0, r2
   2e5a4:	b	2dd90 <flatcc_json_parser_generic_json@@Base+0x45c>
   2e5a8:	mov	r0, r2
   2e5ac:	b	2e57c <flatcc_json_parser_generic_json@@Base+0xc48>
   2e5b0:	ldrb	r3, [r4]
   2e5b4:	sub	r2, r3, #34	; 0x22
   2e5b8:	cmp	r2, #89	; 0x59
   2e5bc:	ldrls	pc, [pc, r2, lsl #2]
   2e5c0:	b	2e1bc <flatcc_json_parser_generic_json@@Base+0x888>
   2e5c4:	andeq	sp, r2, ip, ror ip
   2e5c8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5cc:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5d0:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5d4:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5d8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5dc:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5e0:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5e4:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5e8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5ec:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5f0:	andeq	sp, r2, r8, lsl #26
   2e5f4:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5f8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e5fc:	andeq	sp, r2, r8, lsl #26
   2e600:	andeq	sp, r2, r8, lsl #26
   2e604:	andeq	sp, r2, r8, lsl #26
   2e608:	andeq	sp, r2, r8, lsl #26
   2e60c:	andeq	sp, r2, r8, lsl #26
   2e610:	andeq	sp, r2, r8, lsl #26
   2e614:	andeq	sp, r2, r8, lsl #26
   2e618:	andeq	sp, r2, r8, lsl #26
   2e61c:	andeq	sp, r2, r8, lsl #26
   2e620:	andeq	sp, r2, r8, lsl #26
   2e624:			; <UNDEFINED> instruction: 0x0002e1bc
   2e628:			; <UNDEFINED> instruction: 0x0002e1bc
   2e62c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e630:			; <UNDEFINED> instruction: 0x0002e1bc
   2e634:			; <UNDEFINED> instruction: 0x0002e1bc
   2e638:			; <UNDEFINED> instruction: 0x0002e1bc
   2e63c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e640:			; <UNDEFINED> instruction: 0x0002e1bc
   2e644:			; <UNDEFINED> instruction: 0x0002e1bc
   2e648:			; <UNDEFINED> instruction: 0x0002e1bc
   2e64c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e650:			; <UNDEFINED> instruction: 0x0002e1bc
   2e654:			; <UNDEFINED> instruction: 0x0002e1bc
   2e658:			; <UNDEFINED> instruction: 0x0002e1bc
   2e65c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e660:			; <UNDEFINED> instruction: 0x0002e1bc
   2e664:			; <UNDEFINED> instruction: 0x0002e1bc
   2e668:			; <UNDEFINED> instruction: 0x0002e1bc
   2e66c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e670:			; <UNDEFINED> instruction: 0x0002e1bc
   2e674:			; <UNDEFINED> instruction: 0x0002e1bc
   2e678:			; <UNDEFINED> instruction: 0x0002e1bc
   2e67c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e680:			; <UNDEFINED> instruction: 0x0002e1bc
   2e684:			; <UNDEFINED> instruction: 0x0002e1bc
   2e688:			; <UNDEFINED> instruction: 0x0002e1bc
   2e68c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e690:			; <UNDEFINED> instruction: 0x0002e1bc
   2e694:			; <UNDEFINED> instruction: 0x0002e1bc
   2e698:			; <UNDEFINED> instruction: 0x0002e1bc
   2e69c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6a0:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6a4:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6a8:	andeq	lr, r2, r8, lsr #1
   2e6ac:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6b0:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6b4:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6b8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6bc:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6c0:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6c4:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6c8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6cc:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6d0:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6d4:	andeq	sp, r2, ip, asr #30
   2e6d8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6dc:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6e0:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6e4:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6e8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6ec:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6f0:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6f4:	andeq	lr, r2, r8, asr r0
   2e6f8:			; <UNDEFINED> instruction: 0x0002e1bc
   2e6fc:			; <UNDEFINED> instruction: 0x0002e1bc
   2e700:			; <UNDEFINED> instruction: 0x0002e1bc
   2e704:			; <UNDEFINED> instruction: 0x0002e1bc
   2e708:			; <UNDEFINED> instruction: 0x0002e1bc
   2e70c:	andeq	sp, r2, ip, asr #30
   2e710:			; <UNDEFINED> instruction: 0x0002e1bc
   2e714:			; <UNDEFINED> instruction: 0x0002e1bc
   2e718:			; <UNDEFINED> instruction: 0x0002e1bc
   2e71c:			; <UNDEFINED> instruction: 0x0002e1bc
   2e720:			; <UNDEFINED> instruction: 0x0002e1bc
   2e724:			; <UNDEFINED> instruction: 0x0002e1bc
   2e728:	andeq	lr, r2, ip, lsr #2

0002e72c <flatcc_json_parser_unmatched_symbol@@Base>:
   2e72c:	strd	r4, [sp, #-16]!
   2e730:	str	r6, [sp, #8]
   2e734:	str	lr, [sp, #12]
   2e738:	mov	r5, r0
   2e73c:	mov	r4, r2
   2e740:	ldr	r3, [r0, #8]
   2e744:	tst	r3, #1
   2e748:	beq	2e890 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   2e74c:	cmp	r1, r2
   2e750:	beq	2e89c <flatcc_json_parser_unmatched_symbol@@Base+0x170>
   2e754:	ldrb	r3, [r1]
   2e758:	cmp	r3, #34	; 0x22
   2e75c:	bne	2e784 <flatcc_json_parser_unmatched_symbol@@Base+0x58>
   2e760:	add	r1, r1, #1
   2e764:	b	2e7c4 <flatcc_json_parser_unmatched_symbol@@Base+0x98>
   2e768:	add	r3, r1, #1
   2e76c:	add	r1, r3, #1
   2e770:	cmp	r4, r1
   2e774:	beq	2e7b0 <flatcc_json_parser_unmatched_symbol@@Base+0x84>
   2e778:	ldrb	r3, [r3, #1]
   2e77c:	cmp	r3, #34	; 0x22
   2e780:	beq	2e7a4 <flatcc_json_parser_unmatched_symbol@@Base+0x78>
   2e784:	cmp	r3, #92	; 0x5c
   2e788:	movne	r3, r1
   2e78c:	bne	2e76c <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   2e790:	sub	r3, r4, r1
   2e794:	cmp	r3, #1
   2e798:	bgt	2e768 <flatcc_json_parser_unmatched_symbol@@Base+0x3c>
   2e79c:	cmp	r4, r1
   2e7a0:	beq	2e7b0 <flatcc_json_parser_unmatched_symbol@@Base+0x84>
   2e7a4:	ldrb	r3, [r1]
   2e7a8:	cmp	r3, #34	; 0x22
   2e7ac:	beq	2e760 <flatcc_json_parser_unmatched_symbol@@Base+0x34>
   2e7b0:	mov	r3, #20
   2e7b4:	mov	r2, r4
   2e7b8:	mov	r0, r5
   2e7bc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e7c0:	mov	r1, r0
   2e7c4:	sub	r3, r4, r1
   2e7c8:	cmp	r3, #1
   2e7cc:	ble	2e7e0 <flatcc_json_parser_unmatched_symbol@@Base+0xb4>
   2e7d0:	ldrb	r3, [r1]
   2e7d4:	cmp	r3, #32
   2e7d8:	bhi	2e7f0 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   2e7dc:	beq	2e824 <flatcc_json_parser_unmatched_symbol@@Base+0xf8>
   2e7e0:	mov	r2, r4
   2e7e4:	mov	r0, r5
   2e7e8:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e7ec:	mov	r1, r0
   2e7f0:	cmp	r4, r1
   2e7f4:	beq	2e804 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
   2e7f8:	ldrb	r3, [r1]
   2e7fc:	cmp	r3, #58	; 0x3a
   2e800:	beq	2e838 <flatcc_json_parser_unmatched_symbol@@Base+0x10c>
   2e804:	mov	r3, #4
   2e808:	mov	r2, r4
   2e80c:	mov	r0, r5
   2e810:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e814:	ldrd	r4, [sp]
   2e818:	ldr	r6, [sp, #8]
   2e81c:	add	sp, sp, #12
   2e820:	pop	{pc}		; (ldr pc, [sp], #4)
   2e824:	ldrb	r3, [r1, #1]
   2e828:	cmp	r3, #32
   2e82c:	addhi	r1, r1, #1
   2e830:	bls	2e7e0 <flatcc_json_parser_unmatched_symbol@@Base+0xb4>
   2e834:	b	2e7f0 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   2e838:	add	r0, r1, #1
   2e83c:	sub	r3, r4, r0
   2e840:	cmp	r3, #1
   2e844:	ble	2e858 <flatcc_json_parser_unmatched_symbol@@Base+0x12c>
   2e848:	ldrb	r3, [r1, #1]
   2e84c:	cmp	r3, #32
   2e850:	bhi	2e868 <flatcc_json_parser_unmatched_symbol@@Base+0x13c>
   2e854:	beq	2e87c <flatcc_json_parser_unmatched_symbol@@Base+0x150>
   2e858:	mov	r2, r4
   2e85c:	mov	r1, r0
   2e860:	mov	r0, r5
   2e864:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2e868:	mov	r2, r4
   2e86c:	mov	r1, r0
   2e870:	mov	r0, r5
   2e874:	bl	2d934 <flatcc_json_parser_generic_json@@Base>
   2e878:	b	2e814 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   2e87c:	ldrb	r3, [r1, #2]
   2e880:	cmp	r3, #32
   2e884:	addhi	r0, r1, #2
   2e888:	bls	2e858 <flatcc_json_parser_unmatched_symbol@@Base+0x12c>
   2e88c:	b	2e868 <flatcc_json_parser_unmatched_symbol@@Base+0x13c>
   2e890:	mov	r3, #13
   2e894:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e898:	b	2e814 <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   2e89c:	mov	r1, r2
   2e8a0:	b	2e7b0 <flatcc_json_parser_unmatched_symbol@@Base+0x84>

0002e8a4 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2e8a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2e8a8:	strd	r6, [sp, #8]
   2e8ac:	strd	r8, [sp, #16]
   2e8b0:	strd	sl, [sp, #24]
   2e8b4:	str	lr, [sp, #32]
   2e8b8:	sub	sp, sp, #28
   2e8bc:	mov	r7, r0
   2e8c0:	mov	r6, r2
   2e8c4:	mov	r8, r3
   2e8c8:	cmp	r1, r2
   2e8cc:	beq	2e8e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c>
   2e8d0:	ldrb	r3, [r1]
   2e8d4:	cmp	r3, #34	; 0x22
   2e8d8:	addeq	r4, r1, #1
   2e8dc:	beq	2e8f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x50>
   2e8e0:	mov	r3, #16
   2e8e4:	mov	r2, r6
   2e8e8:	mov	r0, r7
   2e8ec:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e8f0:	mov	r4, r0
   2e8f4:	mov	r2, r6
   2e8f8:	mov	r1, r4
   2e8fc:	mov	r0, r7
   2e900:	bl	2c674 <flatcc_json_parser_string_part@@Base>
   2e904:	mov	r5, r0
   2e908:	cmp	r6, r0
   2e90c:	beq	2e91c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   2e910:	ldrb	r3, [r0]
   2e914:	cmp	r3, #34	; 0x22
   2e918:	beq	2e960 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   2e91c:	mov	r3, #0
   2e920:	str	r3, [r8]
   2e924:	ldr	r3, [sp, #64]	; 0x40
   2e928:	cmp	r3, #0
   2e92c:	movne	r3, #32
   2e930:	moveq	r3, #31
   2e934:	mov	r2, r6
   2e938:	mov	r1, r5
   2e93c:	mov	r0, r7
   2e940:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e944:	add	sp, sp, #28
   2e948:	ldrd	r4, [sp]
   2e94c:	ldrd	r6, [sp, #8]
   2e950:	ldrd	r8, [sp, #16]
   2e954:	ldrd	sl, [sp, #24]
   2e958:	add	sp, sp, #32
   2e95c:	pop	{pc}		; (ldr pc, [sp], #4)
   2e960:	sub	sl, r0, r4
   2e964:	and	r3, sl, #3
   2e968:	lsr	r9, sl, #2
   2e96c:	add	r9, r9, r9, lsl #1
   2e970:	cmp	r3, #2
   2e974:	addeq	r9, r9, #1
   2e978:	beq	2e984 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe0>
   2e97c:	cmp	r3, #3
   2e980:	addeq	r9, r9, #2
   2e984:	mvn	r3, #0
   2e988:	mov	r2, #1
   2e98c:	mov	r1, r2
   2e990:	ldr	r0, [r7]
   2e994:	bl	26dbc <flatcc_builder_start_vector@@Base>
   2e998:	cmp	r0, #0
   2e99c:	beq	2e9c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   2e9a0:	mov	r3, #0
   2e9a4:	str	r3, [r8]
   2e9a8:	mov	r3, #33	; 0x21
   2e9ac:	mov	r2, r6
   2e9b0:	mov	r1, r5
   2e9b4:	mov	r0, r7
   2e9b8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2e9bc:	b	2e944 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   2e9c0:	mov	r1, r9
   2e9c4:	ldr	r0, [r7]
   2e9c8:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   2e9cc:	subs	r3, r0, #0
   2e9d0:	str	r3, [sp]
   2e9d4:	beq	2e9a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   2e9d8:	ldr	r3, [sp, #64]	; 0x40
   2e9dc:	adds	r3, r3, #0
   2e9e0:	movne	r3, #1
   2e9e4:	cmp	r3, #0
   2e9e8:	beq	2ea04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   2e9ec:	cmp	r3, #1
   2e9f0:	ldreq	r0, [pc, #708]	; 2ecbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x418>
   2e9f4:	beq	2ea08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x164>
   2e9f8:	mov	r5, #0
   2e9fc:	add	r5, r4, r5
   2ea00:	b	2e91c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   2ea04:	ldr	r0, [pc, #692]	; 2ecc0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   2ea08:	cmp	r9, #0
   2ea0c:	movne	fp, r9
   2ea10:	mvneq	fp, #0
   2ea14:	str	sl, [sp, #8]
   2ea18:	mov	ip, r4
   2ea1c:	ldr	r3, [sp]
   2ea20:	str	r3, [sp, #4]
   2ea24:	add	fp, r3, fp
   2ea28:	ldr	r3, [sp, #4]
   2ea2c:	sub	r3, fp, r3
   2ea30:	str	r3, [sp, #12]
   2ea34:	ldr	r1, [sp, #8]
   2ea38:	cmp	r1, #0
   2ea3c:	beq	2ea48 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a4>
   2ea40:	mov	r3, #0
   2ea44:	b	2ea88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   2ea48:	ldr	r1, [sp, #8]
   2ea4c:	cmp	r1, #2
   2ea50:	beq	2ebc0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x31c>
   2ea54:	cmp	r1, #3
   2ea58:	beq	2ec60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3bc>
   2ea5c:	cmp	r1, #0
   2ea60:	bne	2ead4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   2ea64:	b	2ebfc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x358>
   2ea68:	add	ip, ip, #1
   2ea6c:	sub	r1, r1, #1
   2ea70:	sub	r3, r3, #1
   2ea74:	add	r3, r3, #1
   2ea78:	cmp	r3, #3
   2ea7c:	bhi	2eb58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b4>
   2ea80:	cmp	r3, r1
   2ea84:	beq	2ea4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a8>
   2ea88:	ldrb	r2, [ip, r3]
   2ea8c:	ldrb	r2, [r0, r2]
   2ea90:	add	lr, sp, #24
   2ea94:	add	lr, lr, r3
   2ea98:	strb	r2, [lr, #-4]
   2ea9c:	cmp	r2, #63	; 0x3f
   2eaa0:	bls	2ea74 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2eaa4:	cmp	r2, #65	; 0x41
   2eaa8:	beq	2ea68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   2eaac:	cmp	r2, #66	; 0x42
   2eab0:	movne	r2, r3
   2eab4:	beq	2eae0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x23c>
   2eab8:	sub	r2, r1, r2
   2eabc:	cmp	r3, #2
   2eac0:	beq	2ebc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   2eac4:	cmp	r3, #3
   2eac8:	beq	2ec64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
   2eacc:	cmp	r3, #0
   2ead0:	beq	2ebec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   2ead4:	ldr	r3, [sp, #8]
   2ead8:	sub	r5, sl, r3
   2eadc:	b	2e9fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   2eae0:	add	r2, r3, #1
   2eae4:	cmp	r2, #7
   2eae8:	movhi	lr, #0
   2eaec:	movls	lr, #1
   2eaf0:	cmp	r1, r2
   2eaf4:	movls	lr, #0
   2eaf8:	cmp	lr, #0
   2eafc:	beq	2eab8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2eb00:	add	lr, ip, r2
   2eb04:	ldrb	ip, [ip, r2]
   2eb08:	ldrb	ip, [r0, ip]
   2eb0c:	sub	ip, ip, #65	; 0x41
   2eb10:	uxtb	ip, ip
   2eb14:	cmp	ip, #1
   2eb18:	bhi	2eab8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2eb1c:	add	r2, r2, #1
   2eb20:	cmp	r1, r2
   2eb24:	movls	ip, #0
   2eb28:	movhi	ip, #1
   2eb2c:	cmp	r2, #7
   2eb30:	movhi	ip, #0
   2eb34:	cmp	ip, #0
   2eb38:	beq	2eab8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2eb3c:	ldrb	ip, [lr, #1]!
   2eb40:	ldrb	ip, [r0, ip]
   2eb44:	sub	ip, ip, #65	; 0x41
   2eb48:	uxtb	ip, ip
   2eb4c:	cmp	ip, #1
   2eb50:	bls	2eb1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x278>
   2eb54:	b	2eab8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   2eb58:	ldr	r3, [sp, #12]
   2eb5c:	cmp	r3, #2
   2eb60:	bls	2ecb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   2eb64:	ldrb	lr, [sp, #21]
   2eb68:	ldrb	r2, [sp, #20]
   2eb6c:	lsr	r3, lr, #4
   2eb70:	orr	r3, r3, r2, lsl #2
   2eb74:	ldr	r2, [sp, #4]
   2eb78:	strb	r3, [r2]
   2eb7c:	ldrb	r2, [sp, #22]
   2eb80:	lsr	r3, r2, #2
   2eb84:	orr	r3, r3, lr, lsl #4
   2eb88:	ldr	lr, [sp, #4]
   2eb8c:	strb	r3, [lr, #1]
   2eb90:	ldrb	r3, [sp, #23]
   2eb94:	orr	r3, r3, r2, lsl #6
   2eb98:	strb	r3, [lr, #2]
   2eb9c:	add	r3, lr, #3
   2eba0:	str	r3, [sp, #4]
   2eba4:	add	ip, ip, #4
   2eba8:	sub	r2, r1, #4
   2ebac:	str	r2, [sp, #8]
   2ebb0:	cmp	r3, fp
   2ebb4:	bne	2ea28 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x184>
   2ebb8:	ldr	r2, [sp, #8]
   2ebbc:	b	2ebec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   2ebc0:	mov	r2, #0
   2ebc4:	ldrb	r3, [sp, #21]
   2ebc8:	lsl	r1, r3, #4
   2ebcc:	tst	r1, #255	; 0xff
   2ebd0:	bne	2ecb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   2ebd4:	ldrb	r1, [sp, #20]
   2ebd8:	lsr	r3, r3, #4
   2ebdc:	orr	r3, r3, r1, lsl #2
   2ebe0:	ldr	r1, [sp, #4]
   2ebe4:	strb	r3, [r1], #1
   2ebe8:	str	r1, [sp, #4]
   2ebec:	sub	r2, sl, r2
   2ebf0:	cmp	sl, r2
   2ebf4:	addne	r5, r4, r2
   2ebf8:	bne	2e91c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   2ebfc:	ldr	r3, [sp, #4]
   2ec00:	ldr	r2, [sp]
   2ec04:	sub	r1, r3, r2
   2ec08:	cmp	r9, r1
   2ec0c:	bls	2ec24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   2ec10:	sub	r1, r9, r1
   2ec14:	ldr	r0, [r7]
   2ec18:	bl	26be4 <flatcc_builder_truncate_vector@@Base>
   2ec1c:	cmp	r0, #0
   2ec20:	bne	2e9a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   2ec24:	ldr	r0, [r7]
   2ec28:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   2ec2c:	str	r0, [r8]
   2ec30:	cmp	r0, #0
   2ec34:	beq	2e9a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   2ec38:	ldrb	r3, [r5]
   2ec3c:	cmp	r3, #34	; 0x22
   2ec40:	addeq	r0, r5, #1
   2ec44:	beq	2e944 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   2ec48:	mov	r3, #20
   2ec4c:	mov	r2, r6
   2ec50:	mov	r1, r5
   2ec54:	mov	r0, r7
   2ec58:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2ec5c:	b	2e944 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   2ec60:	mov	r2, #0
   2ec64:	ldrb	r3, [sp, #22]
   2ec68:	lsl	r1, r3, #6
   2ec6c:	tst	r1, #255	; 0xff
   2ec70:	bne	2ecb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   2ec74:	ldr	r1, [sp, #12]
   2ec78:	cmp	r1, #1
   2ec7c:	bls	2ecb0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   2ec80:	ldrb	r0, [sp, #21]
   2ec84:	ldrb	ip, [sp, #20]
   2ec88:	lsr	r1, r0, #4
   2ec8c:	orr	r1, r1, ip, lsl #2
   2ec90:	ldr	ip, [sp, #4]
   2ec94:	strb	r1, [ip]
   2ec98:	lsr	r3, r3, #2
   2ec9c:	orr	r3, r3, r0, lsl #4
   2eca0:	strb	r3, [ip, #1]
   2eca4:	add	r3, ip, #2
   2eca8:	str	r3, [sp, #4]
   2ecac:	b	2ebec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   2ecb0:	ldr	r3, [sp, #8]
   2ecb4:	sub	r5, sl, r3
   2ecb8:	b	2e9fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   2ecbc:	andeq	r2, r4, r0, asr #13
   2ecc0:	andeq	r2, r4, r0, asr #11

0002ecc4 <flatcc_json_parser_build_string@@Base>:
   2ecc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ecc8:	strd	r6, [sp, #8]
   2eccc:	str	r8, [sp, #16]
   2ecd0:	str	lr, [sp, #20]
   2ecd4:	sub	sp, sp, #8
   2ecd8:	mov	r5, r0
   2ecdc:	mov	r6, r2
   2ece0:	mov	r8, r3
   2ece4:	cmp	r1, r2
   2ece8:	beq	2ecfc <flatcc_json_parser_build_string@@Base+0x38>
   2ecec:	ldrb	r3, [r1]
   2ecf0:	cmp	r3, #34	; 0x22
   2ecf4:	addeq	r7, r1, #1
   2ecf8:	beq	2ed10 <flatcc_json_parser_build_string@@Base+0x4c>
   2ecfc:	mov	r3, #16
   2ed00:	mov	r2, r6
   2ed04:	mov	r0, r5
   2ed08:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2ed0c:	mov	r7, r0
   2ed10:	mov	r2, r6
   2ed14:	mov	r1, r7
   2ed18:	mov	r0, r5
   2ed1c:	bl	2c674 <flatcc_json_parser_string_part@@Base>
   2ed20:	mov	r4, r0
   2ed24:	cmp	r6, r0
   2ed28:	beq	2ed38 <flatcc_json_parser_build_string@@Base+0x74>
   2ed2c:	ldrb	r3, [r0]
   2ed30:	cmp	r3, #34	; 0x22
   2ed34:	beq	2ed6c <flatcc_json_parser_build_string@@Base+0xa8>
   2ed38:	ldr	r0, [r5]
   2ed3c:	bl	26ee0 <flatcc_builder_start_string@@Base>
   2ed40:	cmp	r0, #0
   2ed44:	beq	2edac <flatcc_json_parser_build_string@@Base+0xe8>
   2ed48:	mov	r3, #0
   2ed4c:	str	r3, [r8]
   2ed50:	mov	r0, r4
   2ed54:	add	sp, sp, #8
   2ed58:	ldrd	r4, [sp]
   2ed5c:	ldrd	r6, [sp, #8]
   2ed60:	ldr	r8, [sp, #16]
   2ed64:	add	sp, sp, #20
   2ed68:	pop	{pc}		; (ldr pc, [sp], #4)
   2ed6c:	sub	r2, r0, r7
   2ed70:	mov	r1, r7
   2ed74:	ldr	r0, [r5]
   2ed78:	bl	289b0 <flatcc_builder_create_string@@Base>
   2ed7c:	str	r0, [r8]
   2ed80:	ldrb	r3, [r4]
   2ed84:	cmp	r3, #34	; 0x22
   2ed88:	addeq	r4, r4, #1
   2ed8c:	beq	2ed50 <flatcc_json_parser_build_string@@Base+0x8c>
   2ed90:	mov	r3, #20
   2ed94:	mov	r2, r6
   2ed98:	mov	r1, r4
   2ed9c:	mov	r0, r5
   2eda0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2eda4:	mov	r4, r0
   2eda8:	b	2ed50 <flatcc_json_parser_build_string@@Base+0x8c>
   2edac:	sub	r2, r4, r7
   2edb0:	mov	r1, r7
   2edb4:	ldr	r0, [r5]
   2edb8:	bl	26a78 <flatcc_builder_append_string@@Base>
   2edbc:	cmp	r0, #0
   2edc0:	beq	2ed48 <flatcc_json_parser_build_string@@Base+0x84>
   2edc4:	cmp	r6, r4
   2edc8:	beq	2ee64 <flatcc_json_parser_build_string@@Base+0x1a0>
   2edcc:	ldrb	r3, [r4]
   2edd0:	cmp	r3, #34	; 0x22
   2edd4:	bne	2edfc <flatcc_json_parser_build_string@@Base+0x138>
   2edd8:	ldr	r0, [r5]
   2eddc:	bl	28b54 <flatcc_builder_end_string@@Base>
   2ede0:	str	r0, [r8]
   2ede4:	b	2ed80 <flatcc_json_parser_build_string@@Base+0xbc>
   2ede8:	mov	r4, r7
   2edec:	b	2ed48 <flatcc_json_parser_build_string@@Base+0x84>
   2edf0:	ldrb	r3, [r4]
   2edf4:	cmp	r3, #34	; 0x22
   2edf8:	beq	2edd8 <flatcc_json_parser_build_string@@Base+0x114>
   2edfc:	add	r3, sp, #4
   2ee00:	mov	r2, r6
   2ee04:	mov	r1, r4
   2ee08:	mov	r0, r5
   2ee0c:	bl	2ce0c <flatcc_json_parser_string_escape@@Base>
   2ee10:	mov	r7, r0
   2ee14:	ldrb	r2, [sp, #4]
   2ee18:	add	r1, sp, #5
   2ee1c:	ldr	r0, [r5]
   2ee20:	bl	26a78 <flatcc_builder_append_string@@Base>
   2ee24:	cmp	r0, #0
   2ee28:	beq	2ede8 <flatcc_json_parser_build_string@@Base+0x124>
   2ee2c:	mov	r2, r6
   2ee30:	mov	r1, r7
   2ee34:	mov	r0, r5
   2ee38:	bl	2c674 <flatcc_json_parser_string_part@@Base>
   2ee3c:	mov	r4, r0
   2ee40:	cmp	r6, r0
   2ee44:	beq	2ee64 <flatcc_json_parser_build_string@@Base+0x1a0>
   2ee48:	sub	r2, r0, r7
   2ee4c:	mov	r1, r7
   2ee50:	ldr	r0, [r5]
   2ee54:	bl	26a78 <flatcc_builder_append_string@@Base>
   2ee58:	cmp	r0, #0
   2ee5c:	bne	2edf0 <flatcc_json_parser_build_string@@Base+0x12c>
   2ee60:	b	2ed48 <flatcc_json_parser_build_string@@Base+0x84>
   2ee64:	ldr	r0, [r5]
   2ee68:	bl	28b54 <flatcc_builder_end_string@@Base>
   2ee6c:	str	r0, [r8]
   2ee70:	b	2ed90 <flatcc_json_parser_build_string@@Base+0xcc>

0002ee74 <flatcc_json_parser_prepare_unions@@Base>:
   2ee74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2ee78:	strd	r6, [sp, #8]
   2ee7c:	str	r8, [sp, #16]
   2ee80:	str	lr, [sp, #20]
   2ee84:	mov	r6, r0
   2ee88:	mov	r4, r1
   2ee8c:	mov	r7, r2
   2ee90:	mov	r5, r3
   2ee94:	add	r1, r3, r3, lsl #1
   2ee98:	lsl	r1, r1, #3
   2ee9c:	add	r1, r1, #8
   2eea0:	ldr	r0, [r0]
   2eea4:	bl	25a48 <flatcc_builder_enter_user_frame@@Base>
   2eea8:	ldr	r3, [sp, #24]
   2eeac:	str	r0, [r3]
   2eeb0:	cmp	r0, #0
   2eeb4:	beq	2eee0 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   2eeb8:	mov	r1, r0
   2eebc:	ldr	r0, [r6]
   2eec0:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2eec4:	str	r5, [r0]
   2eec8:	mov	r0, r4
   2eecc:	ldrd	r4, [sp]
   2eed0:	ldrd	r6, [sp, #8]
   2eed4:	ldr	r8, [sp, #16]
   2eed8:	add	sp, sp, #20
   2eedc:	pop	{pc}		; (ldr pc, [sp], #4)
   2eee0:	mov	r3, #33	; 0x21
   2eee4:	mov	r2, r7
   2eee8:	mov	r1, r4
   2eeec:	mov	r0, r6
   2eef0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2eef4:	b	2eecc <flatcc_json_parser_prepare_unions@@Base+0x58>

0002eef8 <flatcc_json_parser_finalize_unions@@Base>:
   2eef8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2eefc:	strd	r6, [sp, #8]
   2ef00:	str	r8, [sp, #16]
   2ef04:	str	lr, [sp, #20]
   2ef08:	mov	r4, r0
   2ef0c:	mov	r6, r1
   2ef10:	mov	r7, r2
   2ef14:	mov	r5, r3
   2ef18:	mov	r1, r3
   2ef1c:	ldr	r0, [r0]
   2ef20:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2ef24:	ldr	r3, [r0, #4]
   2ef28:	cmp	r3, #0
   2ef2c:	bne	2ef54 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   2ef30:	mov	r1, r5
   2ef34:	ldr	r0, [r4]
   2ef38:	bl	25b5c <flatcc_builder_exit_user_frame_at@@Base>
   2ef3c:	mov	r0, r6
   2ef40:	ldrd	r4, [sp]
   2ef44:	ldrd	r6, [sp, #8]
   2ef48:	ldr	r8, [sp, #16]
   2ef4c:	add	sp, sp, #20
   2ef50:	pop	{pc}		; (ldr pc, [sp], #4)
   2ef54:	mov	r3, #27
   2ef58:	mov	r2, r7
   2ef5c:	mov	r1, r6
   2ef60:	mov	r0, r4
   2ef64:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2ef68:	mov	r6, r0
   2ef6c:	b	2ef30 <flatcc_json_parser_finalize_unions@@Base+0x38>

0002ef70 <flatcc_json_parser_union@@Base>:
   2ef70:	strd	r4, [sp, #-20]!	; 0xffffffec
   2ef74:	strd	r6, [sp, #8]
   2ef78:	str	lr, [sp, #16]
   2ef7c:	sub	sp, sp, #20
   2ef80:	mov	r5, r0
   2ef84:	mov	r7, r1
   2ef88:	mov	r6, r2
   2ef8c:	mov	r4, r3
   2ef90:	ldr	r1, [sp, #44]	; 0x2c
   2ef94:	ldr	r0, [r0]
   2ef98:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2ef9c:	add	r3, r4, r4, lsl #1
   2efa0:	add	r3, r0, r3, lsl #3
   2efa4:	ldr	r3, [r3, #8]
   2efa8:	cmp	r3, #0
   2efac:	bne	2f048 <flatcc_json_parser_union@@Base+0xd8>
   2efb0:	add	r3, r4, r4, lsl #1
   2efb4:	add	r3, r0, r3, lsl #3
   2efb8:	ldrb	r3, [r3, #20]
   2efbc:	cmp	r3, #0
   2efc0:	beq	2f078 <flatcc_json_parser_union@@Base+0x108>
   2efc4:	add	r4, r4, r4, lsl #1
   2efc8:	add	r4, r0, r4, lsl #3
   2efcc:	ldrb	r3, [r4, #21]
   2efd0:	strb	r3, [sp, #8]
   2efd4:	cmp	r3, #0
   2efd8:	beq	2f0bc <flatcc_json_parser_union@@Base+0x14c>
   2efdc:	ldr	r2, [r0, #4]
   2efe0:	sub	r2, r2, #1
   2efe4:	str	r2, [r0, #4]
   2efe8:	add	r2, sp, #12
   2efec:	str	r2, [sp]
   2eff0:	mov	r2, r6
   2eff4:	mov	r1, r7
   2eff8:	mov	r0, r5
   2effc:	ldr	r4, [sp, #48]	; 0x30
   2f000:	blx	r4
   2f004:	mov	r4, r0
   2f008:	cmp	r6, r0
   2f00c:	beq	2f060 <flatcc_json_parser_union@@Base+0xf0>
   2f010:	add	r3, sp, #16
   2f014:	ldmdb	r3, {r2, r3}
   2f018:	ldrh	r1, [sp, #40]	; 0x28
   2f01c:	ldr	r0, [r5]
   2f020:	bl	28fb8 <flatcc_builder_table_add_union@@Base>
   2f024:	cmp	r0, #0
   2f028:	beq	2f060 <flatcc_json_parser_union@@Base+0xf0>
   2f02c:	mov	r3, #28
   2f030:	mov	r2, r6
   2f034:	mov	r1, r4
   2f038:	mov	r0, r5
   2f03c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f040:	mov	r4, r0
   2f044:	b	2f060 <flatcc_json_parser_union@@Base+0xf0>
   2f048:	mov	r3, #28
   2f04c:	mov	r2, r6
   2f050:	mov	r1, r7
   2f054:	mov	r0, r5
   2f058:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f05c:	mov	r4, r0
   2f060:	mov	r0, r4
   2f064:	add	sp, sp, #20
   2f068:	ldrd	r4, [sp]
   2f06c:	ldrd	r6, [sp, #8]
   2f070:	add	sp, sp, #16
   2f074:	pop	{pc}		; (ldr pc, [sp], #4)
   2f078:	ldr	r3, [r0, #4]
   2f07c:	add	r3, r3, #1
   2f080:	str	r3, [r0, #4]
   2f084:	ldr	r1, [r5, #12]
   2f088:	lsl	r3, r4, #1
   2f08c:	add	r2, r3, r4
   2f090:	add	r2, r0, r2, lsl #3
   2f094:	str	r1, [r2, #16]
   2f098:	ldr	r1, [r5, #4]
   2f09c:	str	r1, [r2, #12]
   2f0a0:	str	r7, [r2, #8]
   2f0a4:	mov	r2, r6
   2f0a8:	mov	r1, r7
   2f0ac:	mov	r0, r5
   2f0b0:	bl	2d934 <flatcc_json_parser_generic_json@@Base>
   2f0b4:	mov	r4, r0
   2f0b8:	b	2f060 <flatcc_json_parser_union@@Base+0xf0>
   2f0bc:	mov	r3, #25
   2f0c0:	mov	r2, r6
   2f0c4:	mov	r1, r7
   2f0c8:	mov	r0, r5
   2f0cc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f0d0:	mov	r4, r0
   2f0d4:	b	2f060 <flatcc_json_parser_union@@Base+0xf0>

0002f0d8 <flatcc_json_parser_union_type@@Base>:
   2f0d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f0dc:	strd	r6, [sp, #8]
   2f0e0:	strd	r8, [sp, #16]
   2f0e4:	strd	sl, [sp, #24]
   2f0e8:	str	lr, [sp, #32]
   2f0ec:	sub	sp, sp, #36	; 0x24
   2f0f0:	mov	r5, r0
   2f0f4:	mov	r7, r1
   2f0f8:	mov	r6, r2
   2f0fc:	mov	r4, r3
   2f100:	ldr	r1, [sp, #76]	; 0x4c
   2f104:	ldr	r0, [r0]
   2f108:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2f10c:	add	r9, r0, #8
   2f110:	add	r4, r4, r4, lsl #1
   2f114:	lsl	r4, r4, #3
   2f118:	add	sl, r9, r4
   2f11c:	ldrb	r3, [sl, #12]
   2f120:	cmp	r3, #0
   2f124:	bne	2f1a0 <flatcc_json_parser_union_type@@Base+0xc8>
   2f128:	mov	r8, r0
   2f12c:	mov	r3, #1
   2f130:	strb	r3, [sl, #12]
   2f134:	mov	r2, #0
   2f138:	mov	r3, #0
   2f13c:	strd	r2, [sp, #16]
   2f140:	mov	r3, #0
   2f144:	str	r3, [sp, #12]
   2f148:	strb	r3, [sl, #13]
   2f14c:	cmp	r7, r6
   2f150:	beq	2f310 <flatcc_json_parser_union_type@@Base+0x238>
   2f154:	add	r3, sp, #16
   2f158:	str	r3, [sp]
   2f15c:	add	r3, sp, #12
   2f160:	mov	r2, r6
   2f164:	mov	r1, r7
   2f168:	mov	r0, r5
   2f16c:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   2f170:	mov	fp, r0
   2f174:	cmp	r7, r0
   2f178:	bne	2f1d8 <flatcc_json_parser_union_type@@Base+0x100>
   2f17c:	add	r3, sl, #13
   2f180:	str	r3, [sp]
   2f184:	ldr	r3, [sp, #80]	; 0x50
   2f188:	mov	r2, r6
   2f18c:	mov	r1, fp
   2f190:	mov	r0, r5
   2f194:	bl	2c874 <flatcc_json_parser_space_ext@@Base+0x14c>
   2f198:	mov	fp, r0
   2f19c:	b	2f234 <flatcc_json_parser_union_type@@Base+0x15c>
   2f1a0:	mov	r3, #28
   2f1a4:	mov	r2, r6
   2f1a8:	mov	r1, r7
   2f1ac:	mov	r0, r5
   2f1b0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f1b4:	mov	fp, r0
   2f1b8:	mov	r0, fp
   2f1bc:	add	sp, sp, #36	; 0x24
   2f1c0:	ldrd	r4, [sp]
   2f1c4:	ldrd	r6, [sp, #8]
   2f1c8:	ldrd	r8, [sp, #16]
   2f1cc:	ldrd	sl, [sp, #24]
   2f1d0:	add	sp, sp, #32
   2f1d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2f1d8:	ldr	r3, [sp, #12]
   2f1dc:	cmp	r3, #0
   2f1e0:	bne	2f214 <flatcc_json_parser_union_type@@Base+0x13c>
   2f1e4:	ldrd	r2, [sp, #16]
   2f1e8:	cmp	r3, #0
   2f1ec:	cmpeq	r2, #255	; 0xff
   2f1f0:	strbls	r2, [sl, #13]
   2f1f4:	bls	2f234 <flatcc_json_parser_union_type@@Base+0x15c>
   2f1f8:	mov	r3, #7
   2f1fc:	mov	r2, r6
   2f200:	mov	r1, r0
   2f204:	mov	r0, r5
   2f208:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f20c:	mov	fp, r0
   2f210:	b	2f22c <flatcc_json_parser_union_type@@Base+0x154>
   2f214:	mov	r3, #8
   2f218:	mov	r2, r6
   2f21c:	mov	r1, r0
   2f220:	mov	r0, r5
   2f224:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f228:	mov	fp, r0
   2f22c:	cmp	r7, fp
   2f230:	beq	2f17c <flatcc_json_parser_union_type@@Base+0xa4>
   2f234:	ldr	r3, [r9, r4]
   2f238:	cmp	r3, #0
   2f23c:	beq	2f2dc <flatcc_json_parser_union_type@@Base+0x204>
   2f240:	ldr	r3, [r8, #4]
   2f244:	cmp	r3, #0
   2f248:	beq	2f2f4 <flatcc_json_parser_union_type@@Base+0x21c>
   2f24c:	sub	r3, r3, #1
   2f250:	str	r3, [r8, #4]
   2f254:	ldr	r8, [r5, #12]
   2f258:	ldr	r7, [r5, #4]
   2f25c:	ldr	r3, [sl, #8]
   2f260:	str	r3, [r5, #12]
   2f264:	ldr	r3, [sl, #4]
   2f268:	str	r3, [r5, #4]
   2f26c:	ldrb	r3, [sl, #13]
   2f270:	strb	r3, [sp, #24]
   2f274:	ldr	r1, [r9, r4]
   2f278:	add	r2, sp, #28
   2f27c:	str	r2, [sp]
   2f280:	mov	r2, r6
   2f284:	mov	r0, r5
   2f288:	ldr	r4, [sp, #84]	; 0x54
   2f28c:	blx	r4
   2f290:	cmp	r6, r0
   2f294:	moveq	fp, r6
   2f298:	beq	2f1b8 <flatcc_json_parser_union_type@@Base+0xe0>
   2f29c:	add	r3, sp, #32
   2f2a0:	ldmdb	r3, {r2, r3}
   2f2a4:	ldrh	r1, [sp, #72]	; 0x48
   2f2a8:	ldr	r0, [r5]
   2f2ac:	bl	28fb8 <flatcc_builder_table_add_union@@Base>
   2f2b0:	cmp	r0, #0
   2f2b4:	streq	r8, [r5, #12]
   2f2b8:	streq	r7, [r5, #4]
   2f2bc:	beq	2f1b8 <flatcc_json_parser_union_type@@Base+0xe0>
   2f2c0:	mov	r3, #28
   2f2c4:	mov	r2, r6
   2f2c8:	mov	r1, fp
   2f2cc:	mov	r0, r5
   2f2d0:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f2d4:	mov	fp, r0
   2f2d8:	b	2f1b8 <flatcc_json_parser_union_type@@Base+0xe0>
   2f2dc:	ldrb	r2, [sl, #13]
   2f2e0:	ldr	r3, [r8, #4]
   2f2e4:	cmp	r2, #0
   2f2e8:	addne	r3, r3, #1
   2f2ec:	str	r3, [r8, #4]
   2f2f0:	b	2f1b8 <flatcc_json_parser_union_type@@Base+0xe0>
   2f2f4:	ldr	r3, [pc, #28]	; 2f318 <flatcc_json_parser_union_type@@Base+0x240>
   2f2f8:	movw	r2, #965	; 0x3c5
   2f2fc:	movw	r1, #11224	; 0x2bd8
   2f300:	movt	r1, #4
   2f304:	movw	r0, #11300	; 0x2c24
   2f308:	movt	r0, #4
   2f30c:	bl	145f0 <__assert_fail@plt>
   2f310:	mov	fp, r6
   2f314:	b	2f17c <flatcc_json_parser_union_type@@Base+0xa4>
   2f318:	andeq	r2, r4, r0, asr #15

0002f31c <flatcc_json_parser_union_vector@@Base>:
   2f31c:	strd	r4, [sp, #-20]!	; 0xffffffec
   2f320:	strd	r6, [sp, #8]
   2f324:	str	lr, [sp, #16]
   2f328:	sub	sp, sp, #20
   2f32c:	mov	r5, r0
   2f330:	mov	r6, r1
   2f334:	mov	r7, r2
   2f338:	mov	r4, r3
   2f33c:	ldr	r1, [sp, #44]	; 0x2c
   2f340:	ldr	r0, [r0]
   2f344:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2f348:	add	r2, r0, #8
   2f34c:	add	r4, r4, r4, lsl #1
   2f350:	lsl	r3, r4, #3
   2f354:	add	r1, r2, r3
   2f358:	ldr	ip, [r2, r3]
   2f35c:	cmp	ip, #0
   2f360:	bne	2f3a4 <flatcc_json_parser_union_vector@@Base+0x88>
   2f364:	ldrb	ip, [r1, #12]
   2f368:	cmp	ip, #0
   2f36c:	bne	2f3cc <flatcc_json_parser_union_vector@@Base+0xb0>
   2f370:	ldr	ip, [r0, #4]
   2f374:	add	ip, ip, #1
   2f378:	str	ip, [r0, #4]
   2f37c:	ldr	r0, [r5, #12]
   2f380:	str	r0, [r1, #8]
   2f384:	ldr	r0, [r5, #4]
   2f388:	str	r0, [r1, #4]
   2f38c:	str	r6, [r2, r3]
   2f390:	mov	r2, r7
   2f394:	mov	r1, r6
   2f398:	mov	r0, r5
   2f39c:	bl	2d934 <flatcc_json_parser_generic_json@@Base>
   2f3a0:	b	2f3b8 <flatcc_json_parser_union_vector@@Base+0x9c>
   2f3a4:	mov	r3, #28
   2f3a8:	mov	r2, r7
   2f3ac:	mov	r1, r6
   2f3b0:	mov	r0, r5
   2f3b4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f3b8:	add	sp, sp, #20
   2f3bc:	ldrd	r4, [sp]
   2f3c0:	ldrd	r6, [sp, #8]
   2f3c4:	add	sp, sp, #16
   2f3c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2f3cc:	ldr	r3, [r0, #4]
   2f3d0:	sub	r3, r3, #1
   2f3d4:	str	r3, [r0, #4]
   2f3d8:	ldr	r3, [r1, #20]
   2f3dc:	ldr	r2, [sp, #48]	; 0x30
   2f3e0:	str	r2, [sp, #8]
   2f3e4:	ldrh	r2, [sp, #40]	; 0x28
   2f3e8:	str	r2, [sp, #4]
   2f3ec:	ldr	r2, [r1, #16]
   2f3f0:	str	r2, [sp]
   2f3f4:	mov	r2, r7
   2f3f8:	mov	r1, r6
   2f3fc:	mov	r0, r5
   2f400:	bl	2ca34 <flatcc_json_parser_space_ext@@Base+0x30c>
   2f404:	b	2f3b8 <flatcc_json_parser_union_vector@@Base+0x9c>

0002f408 <flatcc_json_parser_union_type_vector@@Base>:
   2f408:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2f40c:	strd	r6, [sp, #8]
   2f410:	strd	r8, [sp, #16]
   2f414:	strd	sl, [sp, #24]
   2f418:	str	lr, [sp, #32]
   2f41c:	sub	sp, sp, #52	; 0x34
   2f420:	mov	r7, r0
   2f424:	mov	r6, r1
   2f428:	mov	r5, r2
   2f42c:	mov	r4, r3
   2f430:	ldrh	r3, [sp, #88]	; 0x58
   2f434:	str	r3, [sp, #16]
   2f438:	ldr	sl, [sp, #104]	; 0x68
   2f43c:	ldr	r1, [sp, #92]	; 0x5c
   2f440:	ldr	r0, [r0]
   2f444:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2f448:	add	r4, r4, r4, lsl #1
   2f44c:	lsl	r3, r4, #3
   2f450:	str	r3, [sp, #20]
   2f454:	add	r0, r0, #8
   2f458:	add	fp, r0, r3
   2f45c:	ldrb	r3, [fp, #12]
   2f460:	cmp	r3, #0
   2f464:	bne	2f4b8 <flatcc_json_parser_union_type_vector@@Base+0xb0>
   2f468:	mov	r1, #1
   2f46c:	strb	r1, [fp, #12]
   2f470:	mvn	r3, #0
   2f474:	mov	r2, r1
   2f478:	ldr	r0, [r7]
   2f47c:	bl	26dbc <flatcc_builder_start_vector@@Base>
   2f480:	cmp	r0, #0
   2f484:	beq	2f4d0 <flatcc_json_parser_union_type_vector@@Base+0xc8>
   2f488:	mov	r3, #33	; 0x21
   2f48c:	mov	r2, r5
   2f490:	mov	r1, r6
   2f494:	mov	r0, r7
   2f498:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f49c:	add	sp, sp, #52	; 0x34
   2f4a0:	ldrd	r4, [sp]
   2f4a4:	ldrd	r6, [sp, #8]
   2f4a8:	ldrd	r8, [sp, #16]
   2f4ac:	ldrd	sl, [sp, #24]
   2f4b0:	add	sp, sp, #32
   2f4b4:	pop	{pc}		; (ldr pc, [sp], #4)
   2f4b8:	mov	r3, #28
   2f4bc:	mov	r2, r5
   2f4c0:	mov	r1, r6
   2f4c4:	mov	r0, r7
   2f4c8:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f4cc:	b	2f49c <flatcc_json_parser_union_type_vector@@Base+0x94>
   2f4d0:	cmp	r6, r5
   2f4d4:	beq	2f4e4 <flatcc_json_parser_union_type_vector@@Base+0xdc>
   2f4d8:	ldrb	r3, [r6]
   2f4dc:	cmp	r3, #91	; 0x5b
   2f4e0:	beq	2f60c <flatcc_json_parser_union_type_vector@@Base+0x204>
   2f4e4:	mov	r3, #22
   2f4e8:	mov	r2, r5
   2f4ec:	mov	r1, r6
   2f4f0:	mov	r0, r7
   2f4f4:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f4f8:	mov	r6, r0
   2f4fc:	ldr	r0, [r7]
   2f500:	bl	27fbc <flatcc_builder_vector_count@@Base>
   2f504:	mov	r4, r0
   2f508:	str	r0, [fp, #16]
   2f50c:	mov	r1, r0
   2f510:	ldr	r0, [r7]
   2f514:	bl	25a48 <flatcc_builder_enter_user_frame@@Base>
   2f518:	mov	r8, r0
   2f51c:	mov	r1, r0
   2f520:	ldr	r0, [r7]
   2f524:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2f528:	mov	r9, r0
   2f52c:	ldr	r0, [r7]
   2f530:	bl	27fc8 <flatcc_builder_vector_edit@@Base>
   2f534:	mov	r2, r4
   2f538:	mov	r1, r0
   2f53c:	mov	r0, r9
   2f540:	bl	14524 <memcpy@plt>
   2f544:	ldr	r0, [r7]
   2f548:	bl	27ec0 <flatcc_builder_end_vector@@Base>
   2f54c:	subs	r9, r0, #0
   2f550:	beq	2f488 <flatcc_json_parser_union_type_vector@@Base+0x80>
   2f554:	ldr	r3, [sp, #16]
   2f558:	sub	r1, r3, #1
   2f55c:	ldr	r0, [r7]
   2f560:	bl	28e68 <flatcc_builder_table_add_offset@@Base>
   2f564:	cmp	r0, #0
   2f568:	beq	2f488 <flatcc_json_parser_union_type_vector@@Base+0x80>
   2f56c:	str	r9, [r0]
   2f570:	ldr	r1, [sp, #92]	; 0x5c
   2f574:	ldr	r0, [r7]
   2f578:	bl	25bac <flatcc_builder_get_user_frame_ptr@@Base>
   2f57c:	add	r2, r0, #8
   2f580:	ldr	r3, [sp, #20]
   2f584:	add	r1, r2, r3
   2f588:	str	r8, [r1, #20]
   2f58c:	ldr	r3, [r2, r3]
   2f590:	cmp	r3, #0
   2f594:	beq	2f974 <flatcc_json_parser_union_type_vector@@Base+0x56c>
   2f598:	ldr	r3, [r0, #4]
   2f59c:	cmp	r3, #0
   2f5a0:	beq	2f988 <flatcc_json_parser_union_type_vector@@Base+0x580>
   2f5a4:	sub	r3, r3, #1
   2f5a8:	str	r3, [r0, #4]
   2f5ac:	ldr	sl, [r7, #12]
   2f5b0:	ldr	r9, [r7, #4]
   2f5b4:	ldr	r3, [r1, #8]
   2f5b8:	str	r3, [r7, #12]
   2f5bc:	ldr	r3, [r1, #4]
   2f5c0:	str	r3, [r7, #4]
   2f5c4:	ldr	r3, [sp, #20]
   2f5c8:	ldr	r1, [r2, r3]
   2f5cc:	ldr	r3, [sp, #100]	; 0x64
   2f5d0:	str	r3, [sp, #8]
   2f5d4:	ldr	r3, [sp, #16]
   2f5d8:	str	r3, [sp, #4]
   2f5dc:	str	r4, [sp]
   2f5e0:	mov	r3, r8
   2f5e4:	mov	r2, r5
   2f5e8:	mov	r0, r7
   2f5ec:	bl	2ca34 <flatcc_json_parser_space_ext@@Base+0x30c>
   2f5f0:	cmp	r5, r0
   2f5f4:	moveq	r0, r5
   2f5f8:	beq	2f49c <flatcc_json_parser_union_type_vector@@Base+0x94>
   2f5fc:	str	sl, [r7, #12]
   2f600:	str	r9, [r7, #4]
   2f604:	mov	r0, r6
   2f608:	b	2f49c <flatcc_json_parser_union_type_vector@@Base+0x94>
   2f60c:	add	r1, r6, #1
   2f610:	sub	r3, r5, r1
   2f614:	cmp	r3, #1
   2f618:	ble	2f630 <flatcc_json_parser_union_type_vector@@Base+0x228>
   2f61c:	ldrb	r3, [r6, #1]
   2f620:	cmp	r3, #32
   2f624:	movhi	r6, r1
   2f628:	bhi	2f640 <flatcc_json_parser_union_type_vector@@Base+0x238>
   2f62c:	beq	2f65c <flatcc_json_parser_union_type_vector@@Base+0x254>
   2f630:	mov	r2, r5
   2f634:	mov	r0, r7
   2f638:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2f63c:	mov	r6, r0
   2f640:	cmp	r5, r6
   2f644:	beq	2f654 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   2f648:	ldrb	r3, [r6]
   2f64c:	cmp	r3, #93	; 0x5d
   2f650:	beq	2f670 <flatcc_json_parser_union_type_vector@@Base+0x268>
   2f654:	mov	r8, #0
   2f658:	b	2f86c <flatcc_json_parser_union_type_vector@@Base+0x464>
   2f65c:	ldrb	r3, [r6, #2]
   2f660:	cmp	r3, #32
   2f664:	addhi	r6, r6, #2
   2f668:	bls	2f630 <flatcc_json_parser_union_type_vector@@Base+0x228>
   2f66c:	b	2f640 <flatcc_json_parser_union_type_vector@@Base+0x238>
   2f670:	add	r1, r6, #1
   2f674:	sub	r3, r5, r1
   2f678:	cmp	r3, #1
   2f67c:	ble	2f694 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   2f680:	ldrb	r3, [r6, #1]
   2f684:	cmp	r3, #32
   2f688:	movhi	r6, r1
   2f68c:	bhi	2f4fc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2f690:	beq	2f6a8 <flatcc_json_parser_union_type_vector@@Base+0x2a0>
   2f694:	mov	r2, r5
   2f698:	mov	r0, r7
   2f69c:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2f6a0:	mov	r6, r0
   2f6a4:	b	2f4fc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2f6a8:	ldrb	r3, [r6, #2]
   2f6ac:	cmp	r3, #32
   2f6b0:	addhi	r6, r6, #2
   2f6b4:	bls	2f694 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   2f6b8:	b	2f4fc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2f6bc:	ldr	r3, [sp, #28]
   2f6c0:	cmp	r3, #0
   2f6c4:	bne	2f6f8 <flatcc_json_parser_union_type_vector@@Base+0x2f0>
   2f6c8:	ldrd	r2, [sp, #32]
   2f6cc:	cmp	r3, #0
   2f6d0:	cmpeq	r2, #255	; 0xff
   2f6d4:	strbls	r2, [sp, #47]	; 0x2f
   2f6d8:	bls	2f718 <flatcc_json_parser_union_type_vector@@Base+0x310>
   2f6dc:	mov	r3, #7
   2f6e0:	mov	r2, r5
   2f6e4:	mov	r1, r0
   2f6e8:	mov	r0, r7
   2f6ec:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f6f0:	mov	r4, r0
   2f6f4:	b	2f710 <flatcc_json_parser_union_type_vector@@Base+0x308>
   2f6f8:	mov	r3, #8
   2f6fc:	mov	r2, r5
   2f700:	mov	r1, r0
   2f704:	mov	r0, r7
   2f708:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f70c:	mov	r4, r0
   2f710:	cmp	r4, r6
   2f714:	beq	2f8c4 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   2f718:	ldrb	r0, [sp, #47]	; 0x2f
   2f71c:	blx	sl
   2f720:	cmp	r0, #0
   2f724:	bne	2f738 <flatcc_json_parser_union_type_vector@@Base+0x330>
   2f728:	ldr	r3, [r7, #8]
   2f72c:	tst	r3, #1
   2f730:	beq	2f7ac <flatcc_json_parser_union_type_vector@@Base+0x3a4>
   2f734:	strb	r8, [sp, #47]	; 0x2f
   2f738:	ldrb	r3, [sp, #47]	; 0x2f
   2f73c:	strb	r3, [r9]
   2f740:	sub	r3, r5, r4
   2f744:	cmp	r3, #1
   2f748:	ble	2f75c <flatcc_json_parser_union_type_vector@@Base+0x354>
   2f74c:	ldrb	r3, [r4]
   2f750:	cmp	r3, #32
   2f754:	bhi	2f770 <flatcc_json_parser_union_type_vector@@Base+0x368>
   2f758:	beq	2f7c4 <flatcc_json_parser_union_type_vector@@Base+0x3bc>
   2f75c:	mov	r2, r5
   2f760:	mov	r1, r4
   2f764:	mov	r0, r7
   2f768:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2f76c:	mov	r4, r0
   2f770:	cmp	r5, r4
   2f774:	beq	2f7a4 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2f778:	ldrb	r3, [r4]
   2f77c:	cmp	r3, #44	; 0x2c
   2f780:	beq	2f824 <flatcc_json_parser_union_type_vector@@Base+0x41c>
   2f784:	cmp	r3, #93	; 0x5d
   2f788:	beq	2f7d8 <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   2f78c:	mov	r3, #9
   2f790:	mov	r2, r5
   2f794:	mov	r1, r4
   2f798:	mov	r0, r7
   2f79c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f7a0:	mov	r4, r0
   2f7a4:	mov	r6, r4
   2f7a8:	b	2f4fc <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2f7ac:	mov	r3, #15
   2f7b0:	mov	r2, r5
   2f7b4:	mov	r1, r4
   2f7b8:	mov	r0, r7
   2f7bc:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f7c0:	b	2f49c <flatcc_json_parser_union_type_vector@@Base+0x94>
   2f7c4:	ldrb	r3, [r4, #1]
   2f7c8:	cmp	r3, #32
   2f7cc:	addhi	r4, r4, #1
   2f7d0:	bls	2f75c <flatcc_json_parser_union_type_vector@@Base+0x354>
   2f7d4:	b	2f770 <flatcc_json_parser_union_type_vector@@Base+0x368>
   2f7d8:	add	r1, r4, #1
   2f7dc:	sub	r3, r5, r1
   2f7e0:	cmp	r3, #1
   2f7e4:	ble	2f7fc <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   2f7e8:	ldrb	r3, [r4, #1]
   2f7ec:	cmp	r3, #32
   2f7f0:	movhi	r4, r1
   2f7f4:	bhi	2f7a4 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2f7f8:	beq	2f810 <flatcc_json_parser_union_type_vector@@Base+0x408>
   2f7fc:	mov	r2, r5
   2f800:	mov	r0, r7
   2f804:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2f808:	mov	r4, r0
   2f80c:	b	2f7a4 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2f810:	ldrb	r3, [r4, #2]
   2f814:	cmp	r3, #32
   2f818:	addhi	r4, r4, #2
   2f81c:	bls	2f7fc <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   2f820:	b	2f7a4 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2f824:	add	r6, r4, #1
   2f828:	sub	r3, r5, r6
   2f82c:	cmp	r3, #1
   2f830:	ble	2f844 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   2f834:	ldrb	r3, [r4, #1]
   2f838:	cmp	r3, #32
   2f83c:	bhi	2f858 <flatcc_json_parser_union_type_vector@@Base+0x450>
   2f840:	beq	2f8f8 <flatcc_json_parser_union_type_vector@@Base+0x4f0>
   2f844:	mov	r2, r5
   2f848:	mov	r1, r6
   2f84c:	mov	r0, r7
   2f850:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2f854:	mov	r6, r0
   2f858:	cmp	r5, r6
   2f85c:	beq	2f90c <flatcc_json_parser_union_type_vector@@Base+0x504>
   2f860:	ldrb	r3, [r6]
   2f864:	cmp	r3, #93	; 0x5d
   2f868:	beq	2f928 <flatcc_json_parser_union_type_vector@@Base+0x520>
   2f86c:	mov	r1, #1
   2f870:	ldr	r0, [r7]
   2f874:	bl	264b0 <flatcc_builder_extend_vector@@Base>
   2f878:	subs	r9, r0, #0
   2f87c:	beq	2f488 <flatcc_json_parser_union_type_vector@@Base+0x80>
   2f880:	mov	r2, #0
   2f884:	mov	r3, #0
   2f888:	strd	r2, [sp, #32]
   2f88c:	str	r8, [sp, #28]
   2f890:	strb	r8, [sp, #47]	; 0x2f
   2f894:	cmp	r5, r6
   2f898:	beq	2f8c4 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   2f89c:	add	r3, sp, #32
   2f8a0:	str	r3, [sp]
   2f8a4:	add	r3, sp, #28
   2f8a8:	mov	r2, r5
   2f8ac:	mov	r1, r6
   2f8b0:	mov	r0, r7
   2f8b4:	bl	2d7bc <flatcc_json_parser_integer@@Base>
   2f8b8:	mov	r4, r0
   2f8bc:	cmp	r0, r6
   2f8c0:	bne	2f6bc <flatcc_json_parser_union_type_vector@@Base+0x2b4>
   2f8c4:	add	r3, sp, #47	; 0x2f
   2f8c8:	str	r3, [sp]
   2f8cc:	ldr	r3, [sp, #96]	; 0x60
   2f8d0:	mov	r2, r5
   2f8d4:	mov	r1, r6
   2f8d8:	mov	r0, r7
   2f8dc:	bl	2c874 <flatcc_json_parser_space_ext@@Base+0x14c>
   2f8e0:	mov	r4, r0
   2f8e4:	cmp	r5, r0
   2f8e8:	cmpne	r0, r6
   2f8ec:	bne	2f718 <flatcc_json_parser_union_type_vector@@Base+0x310>
   2f8f0:	mov	r6, r0
   2f8f4:	b	2f488 <flatcc_json_parser_union_type_vector@@Base+0x80>
   2f8f8:	ldrb	r3, [r4, #2]
   2f8fc:	cmp	r3, #32
   2f900:	addhi	r6, r4, #2
   2f904:	bls	2f844 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   2f908:	b	2f858 <flatcc_json_parser_union_type_vector@@Base+0x450>
   2f90c:	mov	r3, #9
   2f910:	mov	r2, r5
   2f914:	mov	r1, r6
   2f918:	mov	r0, r7
   2f91c:	bl	2c648 <flatcc_json_parser_set_error@@Base>
   2f920:	mov	r4, r0
   2f924:	b	2f7a4 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2f928:	add	r4, r6, #1
   2f92c:	sub	r3, r5, r4
   2f930:	cmp	r3, #1
   2f934:	ble	2f948 <flatcc_json_parser_union_type_vector@@Base+0x540>
   2f938:	ldrb	r3, [r6, #1]
   2f93c:	cmp	r3, #32
   2f940:	bhi	2f7a4 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2f944:	beq	2f960 <flatcc_json_parser_union_type_vector@@Base+0x558>
   2f948:	mov	r2, r5
   2f94c:	mov	r1, r4
   2f950:	mov	r0, r7
   2f954:	bl	2c728 <flatcc_json_parser_space_ext@@Base>
   2f958:	mov	r4, r0
   2f95c:	b	2f7a4 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2f960:	ldrb	r3, [r6, #2]
   2f964:	cmp	r3, #32
   2f968:	addhi	r4, r6, #2
   2f96c:	bls	2f948 <flatcc_json_parser_union_type_vector@@Base+0x540>
   2f970:	b	2f7a4 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   2f974:	ldr	r3, [r0, #4]
   2f978:	add	r3, r3, #1
   2f97c:	str	r3, [r0, #4]
   2f980:	mov	r0, r6
   2f984:	b	2f49c <flatcc_json_parser_union_type_vector@@Base+0x94>
   2f988:	ldr	r3, [pc, #20]	; 2f9a4 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   2f98c:	movw	r2, #1122	; 0x462
   2f990:	movw	r1, #11224	; 0x2bd8
   2f994:	movt	r1, #4
   2f998:	movw	r0, #11300	; 0x2c24
   2f99c:	movt	r0, #4
   2f9a0:	bl	145f0 <__assert_fail@plt>
   2f9a4:	andeq	r2, r4, r0, ror #15

0002f9a8 <flatcc_json_parser_table_as_root@@Base>:
   2f9a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   2f9ac:	strd	r6, [sp, #8]
   2f9b0:	str	lr, [sp, #16]
   2f9b4:	sub	sp, sp, #52	; 0x34
   2f9b8:	mov	r7, r0
   2f9bc:	mov	r5, r2
   2f9c0:	ldr	ip, [sp, #72]	; 0x48
   2f9c4:	asr	r0, ip, #1
   2f9c8:	and	r0, r0, #2
   2f9cc:	subs	r4, r1, #0
   2f9d0:	addeq	r4, sp, #8
   2f9d4:	add	r6, r2, r3
   2f9d8:	mov	r2, #0
   2f9dc:	str	r2, [r4, #16]
   2f9e0:	str	r2, [r4, #20]
   2f9e4:	str	r2, [r4, #36]	; 0x24
   2f9e8:	str	r7, [r4]
   2f9ec:	str	r5, [r4, #4]
   2f9f0:	mov	r3, #1
   2f9f4:	str	r3, [r4, #12]
   2f9f8:	str	ip, [r4, #8]
   2f9fc:	str	r5, [r4, #24]
   2fa00:	str	r6, [r4, #28]
   2fa04:	str	r5, [r4, #32]
   2fa08:	mov	r3, r0
   2fa0c:	ldr	r1, [sp, #76]	; 0x4c
   2fa10:	mov	r0, r7
   2fa14:	bl	260f4 <flatcc_builder_start_buffer@@Base>
   2fa18:	cmp	r0, #0
   2fa1c:	bne	2fa78 <flatcc_json_parser_table_as_root@@Base+0xd0>
   2fa20:	add	r3, sp, #4
   2fa24:	mov	r2, r6
   2fa28:	mov	r1, r5
   2fa2c:	mov	r0, r4
   2fa30:	ldr	r6, [sp, #80]	; 0x50
   2fa34:	blx	r6
   2fa38:	ldr	r6, [r4, #20]
   2fa3c:	cmp	r6, #0
   2fa40:	beq	2fa5c <flatcc_json_parser_table_as_root@@Base+0xb4>
   2fa44:	mov	r0, r6
   2fa48:	add	sp, sp, #52	; 0x34
   2fa4c:	ldrd	r4, [sp]
   2fa50:	ldrd	r6, [sp, #8]
   2fa54:	add	sp, sp, #16
   2fa58:	pop	{pc}		; (ldr pc, [sp], #4)
   2fa5c:	ldr	r1, [sp, #4]
   2fa60:	mov	r0, r7
   2fa64:	bl	261c8 <flatcc_builder_end_buffer@@Base>
   2fa68:	cmp	r0, #0
   2fa6c:	beq	2fa80 <flatcc_json_parser_table_as_root@@Base+0xd8>
   2fa70:	str	r5, [r4, #36]	; 0x24
   2fa74:	b	2fa44 <flatcc_json_parser_table_as_root@@Base+0x9c>
   2fa78:	mvn	r6, #0
   2fa7c:	b	2fa44 <flatcc_json_parser_table_as_root@@Base+0x9c>
   2fa80:	mvn	r6, #0
   2fa84:	b	2fa44 <flatcc_json_parser_table_as_root@@Base+0x9c>

0002fa88 <flatcc_json_parser_struct_as_root@@Base>:
   2fa88:	strd	r4, [sp, #-20]!	; 0xffffffec
   2fa8c:	strd	r6, [sp, #8]
   2fa90:	str	lr, [sp, #16]
   2fa94:	sub	sp, sp, #52	; 0x34
   2fa98:	mov	r7, r0
   2fa9c:	mov	r5, r2
   2faa0:	ldr	ip, [sp, #72]	; 0x48
   2faa4:	asr	r0, ip, #1
   2faa8:	and	r0, r0, #2
   2faac:	subs	r4, r1, #0
   2fab0:	addeq	r4, sp, #8
   2fab4:	add	r6, r2, r3
   2fab8:	mov	r2, #0
   2fabc:	str	r2, [r4, #16]
   2fac0:	str	r2, [r4, #20]
   2fac4:	str	r2, [r4, #36]	; 0x24
   2fac8:	str	r7, [r4]
   2facc:	str	r5, [r4, #4]
   2fad0:	mov	r3, #1
   2fad4:	str	r3, [r4, #12]
   2fad8:	str	ip, [r4, #8]
   2fadc:	str	r5, [r4, #24]
   2fae0:	str	r6, [r4, #28]
   2fae4:	str	r5, [r4, #32]
   2fae8:	mov	r3, r0
   2faec:	ldr	r1, [sp, #76]	; 0x4c
   2faf0:	mov	r0, r7
   2faf4:	bl	260f4 <flatcc_builder_start_buffer@@Base>
   2faf8:	cmp	r0, #0
   2fafc:	bne	2fb58 <flatcc_json_parser_struct_as_root@@Base+0xd0>
   2fb00:	add	r3, sp, #4
   2fb04:	mov	r2, r6
   2fb08:	mov	r1, r5
   2fb0c:	mov	r0, r4
   2fb10:	ldr	r6, [sp, #80]	; 0x50
   2fb14:	blx	r6
   2fb18:	ldr	r6, [r4, #20]
   2fb1c:	cmp	r6, #0
   2fb20:	beq	2fb3c <flatcc_json_parser_struct_as_root@@Base+0xb4>
   2fb24:	mov	r0, r6
   2fb28:	add	sp, sp, #52	; 0x34
   2fb2c:	ldrd	r4, [sp]
   2fb30:	ldrd	r6, [sp, #8]
   2fb34:	add	sp, sp, #16
   2fb38:	pop	{pc}		; (ldr pc, [sp], #4)
   2fb3c:	ldr	r1, [sp, #4]
   2fb40:	mov	r0, r7
   2fb44:	bl	261c8 <flatcc_builder_end_buffer@@Base>
   2fb48:	cmp	r0, #0
   2fb4c:	beq	2fb60 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   2fb50:	str	r5, [r4, #36]	; 0x24
   2fb54:	b	2fb24 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2fb58:	mvn	r6, #0
   2fb5c:	b	2fb24 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2fb60:	mvn	r6, #0
   2fb64:	b	2fb24 <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2fb68:	cmp	r0, #99	; 0x63
   2fb6c:	bhi	2fb90 <flatcc_json_parser_struct_as_root@@Base+0x108>
   2fb70:	cmp	r0, #9
   2fb74:	bhi	2fbe0 <flatcc_json_parser_struct_as_root@@Base+0x158>
   2fb78:	mov	r3, #0
   2fb7c:	strb	r3, [r1, #1]
   2fb80:	add	r0, r0, #48	; 0x30
   2fb84:	strb	r0, [r1]
   2fb88:	mov	r0, #1
   2fb8c:	bx	lr
   2fb90:	mov	r3, #0
   2fb94:	strb	r3, [r1, #3]
   2fb98:	movw	ip, #11320	; 0x2c38
   2fb9c:	movt	ip, #4
   2fba0:	movw	r3, #34079	; 0x851f
   2fba4:	movt	r3, #20971	; 0x51eb
   2fba8:	umull	r2, r3, r3, r0
   2fbac:	lsr	r3, r3, #5
   2fbb0:	mov	r2, #100	; 0x64
   2fbb4:	mls	r0, r2, r3, r0
   2fbb8:	uxtb	r0, r0
   2fbbc:	add	r2, ip, r0, lsl #1
   2fbc0:	ldrb	r0, [ip, r0, lsl #1]
   2fbc4:	strb	r0, [r1, #1]
   2fbc8:	ldrb	r2, [r2, #1]
   2fbcc:	strb	r2, [r1, #2]
   2fbd0:	add	r3, r3, #48	; 0x30
   2fbd4:	strb	r3, [r1]
   2fbd8:	mov	r0, #3
   2fbdc:	bx	lr
   2fbe0:	mov	r3, #0
   2fbe4:	strb	r3, [r1, #2]
   2fbe8:	movw	r2, #11320	; 0x2c38
   2fbec:	movt	r2, #4
   2fbf0:	movw	r3, #34079	; 0x851f
   2fbf4:	movt	r3, #20971	; 0x51eb
   2fbf8:	umull	ip, r3, r3, r0
   2fbfc:	lsr	r3, r3, #5
   2fc00:	mov	ip, #100	; 0x64
   2fc04:	mls	r0, ip, r3, r0
   2fc08:	uxtb	r0, r0
   2fc0c:	add	r3, r2, r0, lsl #1
   2fc10:	ldrb	r2, [r2, r0, lsl #1]
   2fc14:	strb	r2, [r1]
   2fc18:	ldrb	r3, [r3, #1]
   2fc1c:	strb	r3, [r1, #1]
   2fc20:	mov	r0, #2
   2fc24:	bx	lr
   2fc28:	strd	r4, [sp, #-12]!
   2fc2c:	str	lr, [sp, #8]
   2fc30:	cmp	r0, #1000	; 0x3e8
   2fc34:	bcc	2fccc <flatcc_json_parser_struct_as_root@@Base+0x244>
   2fc38:	movw	r3, #9999	; 0x270f
   2fc3c:	cmp	r0, r3
   2fc40:	bhi	2fd04 <flatcc_json_parser_struct_as_root@@Base+0x27c>
   2fc44:	mov	r3, #0
   2fc48:	strb	r3, [r1, #4]
   2fc4c:	add	ip, r1, #2
   2fc50:	movw	lr, #11320	; 0x2c38
   2fc54:	movt	lr, #4
   2fc58:	movw	r3, #34079	; 0x851f
   2fc5c:	movt	r3, #20971	; 0x51eb
   2fc60:	umull	r2, r3, r3, r0
   2fc64:	lsr	r3, r3, #5
   2fc68:	mov	r2, #100	; 0x64
   2fc6c:	mls	r2, r2, r3, r0
   2fc70:	uxth	r2, r2
   2fc74:	add	r4, lr, r2, lsl #1
   2fc78:	uxth	r0, r3
   2fc7c:	ldrb	r3, [lr, r2, lsl #1]
   2fc80:	strb	r3, [r1, #2]
   2fc84:	ldrb	r3, [r4, #1]
   2fc88:	strb	r3, [r1, #3]
   2fc8c:	mov	r1, #4
   2fc90:	movw	r2, #11320	; 0x2c38
   2fc94:	movt	r2, #4
   2fc98:	movw	r3, #34079	; 0x851f
   2fc9c:	movt	r3, #20971	; 0x51eb
   2fca0:	umull	lr, r3, r3, r0
   2fca4:	lsr	r3, r3, #5
   2fca8:	mov	lr, #100	; 0x64
   2fcac:	mls	r3, lr, r3, r0
   2fcb0:	uxth	r3, r3
   2fcb4:	add	r0, r2, r3, lsl #1
   2fcb8:	ldrb	r3, [r2, r3, lsl #1]
   2fcbc:	strb	r3, [ip, #-2]
   2fcc0:	ldrb	r3, [r0, #1]
   2fcc4:	strb	r3, [ip, #-1]
   2fcc8:	b	2fdac <flatcc_json_parser_struct_as_root@@Base+0x324>
   2fccc:	cmp	r0, #99	; 0x63
   2fcd0:	bhi	2fd54 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   2fcd4:	cmp	r0, #9
   2fcd8:	bhi	2fcf0 <flatcc_json_parser_struct_as_root@@Base+0x268>
   2fcdc:	add	r4, r1, #1
   2fce0:	mov	r3, #0
   2fce4:	strb	r3, [r1, #1]
   2fce8:	mov	r1, #1
   2fcec:	b	2fda4 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   2fcf0:	add	ip, r1, #2
   2fcf4:	mov	r3, #0
   2fcf8:	strb	r3, [r1, #2]
   2fcfc:	mov	r1, #2
   2fd00:	b	2fc90 <flatcc_json_parser_struct_as_root@@Base+0x208>
   2fd04:	mov	r3, #0
   2fd08:	strb	r3, [r1, #5]
   2fd0c:	add	lr, r1, #3
   2fd10:	movw	ip, #11320	; 0x2c38
   2fd14:	movt	ip, #4
   2fd18:	movw	r3, #34079	; 0x851f
   2fd1c:	movt	r3, #20971	; 0x51eb
   2fd20:	umull	r2, r3, r3, r0
   2fd24:	lsr	r3, r3, #5
   2fd28:	mov	r2, #100	; 0x64
   2fd2c:	mls	r2, r2, r3, r0
   2fd30:	uxth	r2, r2
   2fd34:	add	r4, ip, r2, lsl #1
   2fd38:	uxth	r0, r3
   2fd3c:	ldrb	r3, [ip, r2, lsl #1]
   2fd40:	strb	r3, [r1, #3]
   2fd44:	ldrb	r3, [r4, #1]
   2fd48:	strb	r3, [r1, #4]
   2fd4c:	mov	r1, #5
   2fd50:	b	2fd64 <flatcc_json_parser_struct_as_root@@Base+0x2dc>
   2fd54:	add	lr, r1, #3
   2fd58:	mov	r3, #0
   2fd5c:	strb	r3, [r1, #3]
   2fd60:	mov	r1, #3
   2fd64:	sub	r4, lr, #2
   2fd68:	movw	ip, #11320	; 0x2c38
   2fd6c:	movt	ip, #4
   2fd70:	movw	r3, #34079	; 0x851f
   2fd74:	movt	r3, #20971	; 0x51eb
   2fd78:	umull	r2, r3, r3, r0
   2fd7c:	lsr	r3, r3, #5
   2fd80:	mov	r2, #100	; 0x64
   2fd84:	mls	r2, r2, r3, r0
   2fd88:	uxth	r2, r2
   2fd8c:	add	r5, ip, r2, lsl #1
   2fd90:	uxth	r0, r3
   2fd94:	ldrb	r3, [ip, r2, lsl #1]
   2fd98:	strb	r3, [lr, #-2]
   2fd9c:	ldrb	r3, [r5, #1]
   2fda0:	strb	r3, [lr, #-1]
   2fda4:	add	r0, r0, #48	; 0x30
   2fda8:	strb	r0, [r4, #-1]
   2fdac:	mov	r0, r1
   2fdb0:	ldrd	r4, [sp]
   2fdb4:	add	sp, sp, #8
   2fdb8:	pop	{pc}		; (ldr pc, [sp], #4)
   2fdbc:	strd	r4, [sp, #-12]!
   2fdc0:	str	lr, [sp, #8]
   2fdc4:	mov	r3, r0
   2fdc8:	movw	r2, #9999	; 0x270f
   2fdcc:	cmp	r0, r2
   2fdd0:	bls	2fe4c <flatcc_json_parser_struct_as_root@@Base+0x3c4>
   2fdd4:	movw	r2, #38527	; 0x967f
   2fdd8:	movt	r2, #152	; 0x98
   2fddc:	cmp	r0, r2
   2fde0:	bls	2fe18 <flatcc_json_parser_struct_as_root@@Base+0x390>
   2fde4:	movw	r2, #51711	; 0xc9ff
   2fde8:	movt	r2, #15258	; 0x3b9a
   2fdec:	cmp	r0, r2
   2fdf0:	bhi	2ffd8 <flatcc_json_parser_struct_as_root@@Base+0x550>
   2fdf4:	movw	r2, #57599	; 0xe0ff
   2fdf8:	movt	r2, #1525	; 0x5f5
   2fdfc:	cmp	r0, r2
   2fe00:	bhi	2feb4 <flatcc_json_parser_struct_as_root@@Base+0x42c>
   2fe04:	add	r4, r1, #8
   2fe08:	mov	r2, #0
   2fe0c:	strb	r2, [r1, #8]
   2fe10:	mov	r0, #8
   2fe14:	b	30020 <flatcc_json_parser_struct_as_root@@Base+0x598>
   2fe18:	movw	r2, #16959	; 0x423f
   2fe1c:	movt	r2, #15
   2fe20:	cmp	r0, r2
   2fe24:	bhi	2ffc4 <flatcc_json_parser_struct_as_root@@Base+0x53c>
   2fe28:	movw	r2, #34463	; 0x869f
   2fe2c:	movt	r2, #1
   2fe30:	cmp	r0, r2
   2fe34:	bhi	3010c <flatcc_json_parser_struct_as_root@@Base+0x684>
   2fe38:	add	r4, r1, #5
   2fe3c:	mov	r2, #0
   2fe40:	strb	r2, [r1, #5]
   2fe44:	mov	r0, #5
   2fe48:	b	2ff38 <flatcc_json_parser_struct_as_root@@Base+0x4b0>
   2fe4c:	cmp	r0, #99	; 0x63
   2fe50:	bls	2fe70 <flatcc_json_parser_struct_as_root@@Base+0x3e8>
   2fe54:	cmp	r0, #1000	; 0x3e8
   2fe58:	bcs	2fe8c <flatcc_json_parser_struct_as_root@@Base+0x404>
   2fe5c:	add	lr, r1, #3
   2fe60:	mov	r2, #0
   2fe64:	strb	r2, [r1, #3]
   2fe68:	mov	r0, #3
   2fe6c:	b	2ff74 <flatcc_json_parser_struct_as_root@@Base+0x4ec>
   2fe70:	cmp	r0, #9
   2fe74:	bhi	2fea0 <flatcc_json_parser_struct_as_root@@Base+0x418>
   2fe78:	add	r4, r1, #1
   2fe7c:	mov	r2, #0
   2fe80:	strb	r2, [r1, #1]
   2fe84:	mov	r0, #1
   2fe88:	b	2ffb0 <flatcc_json_parser_struct_as_root@@Base+0x528>
   2fe8c:	add	r4, r1, #4
   2fe90:	mov	r2, #0
   2fe94:	strb	r2, [r1, #4]
   2fe98:	mov	r0, #4
   2fe9c:	b	30098 <flatcc_json_parser_struct_as_root@@Base+0x610>
   2fea0:	add	lr, r1, #2
   2fea4:	mov	r2, #0
   2fea8:	strb	r2, [r1, #2]
   2feac:	mov	r0, #2
   2feb0:	b	300d4 <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2feb4:	mov	r2, #0
   2feb8:	strb	r2, [r1, #9]
   2febc:	add	lr, r1, #7
   2fec0:	movw	r0, #11320	; 0x2c38
   2fec4:	movt	r0, #4
   2fec8:	movw	r2, #34079	; 0x851f
   2fecc:	movt	r2, #20971	; 0x51eb
   2fed0:	umull	ip, r2, r2, r3
   2fed4:	lsr	r2, r2, #5
   2fed8:	mov	ip, #100	; 0x64
   2fedc:	mls	ip, ip, r2, r3
   2fee0:	add	r4, r0, ip, lsl #1
   2fee4:	mov	r3, r2
   2fee8:	ldrb	r2, [r0, ip, lsl #1]
   2feec:	strb	r2, [r1, #7]
   2fef0:	ldrb	r2, [r4, #1]
   2fef4:	strb	r2, [r1, #8]
   2fef8:	mov	r0, #9
   2fefc:	sub	r4, lr, #2
   2ff00:	movw	r1, #11320	; 0x2c38
   2ff04:	movt	r1, #4
   2ff08:	movw	r2, #34079	; 0x851f
   2ff0c:	movt	r2, #20971	; 0x51eb
   2ff10:	umull	ip, r2, r2, r3
   2ff14:	lsr	r2, r2, #5
   2ff18:	mov	ip, #100	; 0x64
   2ff1c:	mls	ip, ip, r2, r3
   2ff20:	add	r5, r1, ip, lsl #1
   2ff24:	mov	r3, r2
   2ff28:	ldrb	r2, [r1, ip, lsl #1]
   2ff2c:	strb	r2, [lr, #-2]
   2ff30:	ldrb	r2, [r5, #1]
   2ff34:	strb	r2, [lr, #-1]
   2ff38:	sub	lr, r4, #2
   2ff3c:	movw	r1, #11320	; 0x2c38
   2ff40:	movt	r1, #4
   2ff44:	movw	r2, #34079	; 0x851f
   2ff48:	movt	r2, #20971	; 0x51eb
   2ff4c:	umull	ip, r2, r2, r3
   2ff50:	lsr	r2, r2, #5
   2ff54:	mov	ip, #100	; 0x64
   2ff58:	mls	ip, ip, r2, r3
   2ff5c:	add	r5, r1, ip, lsl #1
   2ff60:	mov	r3, r2
   2ff64:	ldrb	r2, [r1, ip, lsl #1]
   2ff68:	strb	r2, [r4, #-2]
   2ff6c:	ldrb	r2, [r5, #1]
   2ff70:	strb	r2, [r4, #-1]
   2ff74:	sub	r4, lr, #2
   2ff78:	movw	r1, #11320	; 0x2c38
   2ff7c:	movt	r1, #4
   2ff80:	movw	r2, #34079	; 0x851f
   2ff84:	movt	r2, #20971	; 0x51eb
   2ff88:	umull	ip, r2, r2, r3
   2ff8c:	lsr	r2, r2, #5
   2ff90:	mov	ip, #100	; 0x64
   2ff94:	mls	ip, ip, r2, r3
   2ff98:	add	r5, r1, ip, lsl #1
   2ff9c:	mov	r3, r2
   2ffa0:	ldrb	r2, [r1, ip, lsl #1]
   2ffa4:	strb	r2, [lr, #-2]
   2ffa8:	ldrb	r2, [r5, #1]
   2ffac:	strb	r2, [lr, #-1]
   2ffb0:	add	r3, r3, #48	; 0x30
   2ffb4:	strb	r3, [r4, #-1]
   2ffb8:	ldrd	r4, [sp]
   2ffbc:	add	sp, sp, #8
   2ffc0:	pop	{pc}		; (ldr pc, [sp], #4)
   2ffc4:	add	lr, r1, #7
   2ffc8:	mov	r2, #0
   2ffcc:	strb	r2, [r1, #7]
   2ffd0:	mov	r0, #7
   2ffd4:	b	2fefc <flatcc_json_parser_struct_as_root@@Base+0x474>
   2ffd8:	mov	r2, #0
   2ffdc:	strb	r2, [r1, #10]
   2ffe0:	add	r4, r1, #8
   2ffe4:	movw	r0, #11320	; 0x2c38
   2ffe8:	movt	r0, #4
   2ffec:	movw	r2, #34079	; 0x851f
   2fff0:	movt	r2, #20971	; 0x51eb
   2fff4:	umull	ip, r2, r2, r3
   2fff8:	lsr	r2, r2, #5
   2fffc:	mov	ip, #100	; 0x64
   30000:	mls	ip, ip, r2, r3
   30004:	add	lr, r0, ip, lsl #1
   30008:	mov	r3, r2
   3000c:	ldrb	r2, [r0, ip, lsl #1]
   30010:	strb	r2, [r1, #8]
   30014:	ldrb	r2, [lr, #1]
   30018:	strb	r2, [r1, #9]
   3001c:	mov	r0, #10
   30020:	sub	lr, r4, #2
   30024:	movw	r1, #11320	; 0x2c38
   30028:	movt	r1, #4
   3002c:	movw	r2, #34079	; 0x851f
   30030:	movt	r2, #20971	; 0x51eb
   30034:	umull	ip, r2, r2, r3
   30038:	lsr	r2, r2, #5
   3003c:	mov	ip, #100	; 0x64
   30040:	mls	ip, ip, r2, r3
   30044:	add	r5, r1, ip, lsl #1
   30048:	mov	r3, r2
   3004c:	ldrb	r2, [r1, ip, lsl #1]
   30050:	strb	r2, [r4, #-2]
   30054:	ldrb	r2, [r5, #1]
   30058:	strb	r2, [r4, #-1]
   3005c:	sub	r4, lr, #2
   30060:	movw	r1, #11320	; 0x2c38
   30064:	movt	r1, #4
   30068:	movw	r2, #34079	; 0x851f
   3006c:	movt	r2, #20971	; 0x51eb
   30070:	umull	ip, r2, r2, r3
   30074:	lsr	r2, r2, #5
   30078:	mov	ip, #100	; 0x64
   3007c:	mls	ip, ip, r2, r3
   30080:	add	r5, r1, ip, lsl #1
   30084:	mov	r3, r2
   30088:	ldrb	r2, [r1, ip, lsl #1]
   3008c:	strb	r2, [lr, #-2]
   30090:	ldrb	r2, [r5, #1]
   30094:	strb	r2, [lr, #-1]
   30098:	sub	lr, r4, #2
   3009c:	movw	r1, #11320	; 0x2c38
   300a0:	movt	r1, #4
   300a4:	movw	r2, #34079	; 0x851f
   300a8:	movt	r2, #20971	; 0x51eb
   300ac:	umull	ip, r2, r2, r3
   300b0:	lsr	r2, r2, #5
   300b4:	mov	ip, #100	; 0x64
   300b8:	mls	ip, ip, r2, r3
   300bc:	add	r5, r1, ip, lsl #1
   300c0:	mov	r3, r2
   300c4:	ldrb	r2, [r1, ip, lsl #1]
   300c8:	strb	r2, [r4, #-2]
   300cc:	ldrb	r2, [r5, #1]
   300d0:	strb	r2, [r4, #-1]
   300d4:	movw	r1, #11320	; 0x2c38
   300d8:	movt	r1, #4
   300dc:	movw	r2, #34079	; 0x851f
   300e0:	movt	r2, #20971	; 0x51eb
   300e4:	umull	ip, r2, r2, r3
   300e8:	lsr	r2, r2, #5
   300ec:	mov	ip, #100	; 0x64
   300f0:	mls	r3, ip, r2, r3
   300f4:	add	r2, r1, r3, lsl #1
   300f8:	ldrb	r3, [r1, r3, lsl #1]
   300fc:	strb	r3, [lr, #-2]
   30100:	ldrb	r3, [r2, #1]
   30104:	strb	r3, [lr, #-1]
   30108:	b	2ffb8 <flatcc_json_parser_struct_as_root@@Base+0x530>
   3010c:	add	lr, r1, #6
   30110:	mov	r2, #0
   30114:	strb	r2, [r1, #6]
   30118:	mov	r0, #6
   3011c:	b	3005c <flatcc_json_parser_struct_as_root@@Base+0x5d4>
   30120:	strd	r4, [sp, #-36]!	; 0xffffffdc
   30124:	strd	r6, [sp, #8]
   30128:	strd	r8, [sp, #16]
   3012c:	strd	sl, [sp, #24]
   30130:	str	lr, [sp, #32]
   30134:	sub	sp, sp, #4
   30138:	mov	r4, r0
   3013c:	mov	r6, r2
   30140:	add	r3, pc, #840	; 0x348
   30144:	ldrd	r2, [r3]
   30148:	cmp	r1, r3
   3014c:	cmpeq	r0, r2
   30150:	bls	30378 <flatcc_json_parser_struct_as_root@@Base+0x8f0>
   30154:	mov	r5, r1
   30158:	add	r3, pc, #824	; 0x338
   3015c:	ldrd	r2, [r3]
   30160:	cmp	r1, r3
   30164:	cmpeq	r0, r2
   30168:	bls	303ec <flatcc_json_parser_struct_as_root@@Base+0x964>
   3016c:	add	r3, pc, #812	; 0x32c
   30170:	ldrd	r2, [r3]
   30174:	cmp	r1, r3
   30178:	cmpeq	r0, r2
   3017c:	bls	303b0 <flatcc_json_parser_struct_as_root@@Base+0x928>
   30180:	add	r3, pc, #800	; 0x320
   30184:	ldrd	r2, [r3]
   30188:	cmp	r1, r3
   3018c:	cmpeq	r0, r2
   30190:	bls	30388 <flatcc_json_parser_struct_as_root@@Base+0x900>
   30194:	add	r3, pc, #788	; 0x314
   30198:	ldrd	r2, [r3]
   3019c:	cmp	r1, r3
   301a0:	cmpeq	r0, r2
   301a4:	bhi	304e8 <flatcc_json_parser_struct_as_root@@Base+0xa60>
   301a8:	mov	r3, #0
   301ac:	strb	r3, [r6, #19]
   301b0:	add	r9, r6, #17
   301b4:	movw	r7, #11320	; 0x2c38
   301b8:	movt	r7, #4
   301bc:	mov	r2, #100	; 0x64
   301c0:	mov	r3, #0
   301c4:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   301c8:	mov	r8, r2
   301cc:	add	sl, r7, r2, lsl #1
   301d0:	mov	r2, #100	; 0x64
   301d4:	mov	r3, #0
   301d8:	mov	r0, r4
   301dc:	mov	r1, r5
   301e0:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   301e4:	mov	r4, r0
   301e8:	mov	r5, r1
   301ec:	ldrb	r3, [r7, r8, lsl #1]
   301f0:	strb	r3, [r6, #17]
   301f4:	ldrb	r3, [sl, #1]
   301f8:	strb	r3, [r6, #18]
   301fc:	mov	r7, #19
   30200:	sub	r8, r9, #2
   30204:	movw	r6, #11320	; 0x2c38
   30208:	movt	r6, #4
   3020c:	mov	r2, #100	; 0x64
   30210:	mov	r3, #0
   30214:	mov	r0, r4
   30218:	mov	r1, r5
   3021c:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30220:	mov	sl, r2
   30224:	add	fp, r6, r2, lsl #1
   30228:	mov	r2, #100	; 0x64
   3022c:	mov	r3, #0
   30230:	mov	r0, r4
   30234:	mov	r1, r5
   30238:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   3023c:	mov	r4, r0
   30240:	mov	r5, r1
   30244:	ldrb	r3, [r6, sl, lsl #1]
   30248:	strb	r3, [r9, #-2]
   3024c:	ldrb	r3, [fp, #1]
   30250:	strb	r3, [r9, #-1]
   30254:	sub	r9, r8, #2
   30258:	movw	r6, #11320	; 0x2c38
   3025c:	movt	r6, #4
   30260:	mov	r2, #100	; 0x64
   30264:	mov	r3, #0
   30268:	mov	r0, r4
   3026c:	mov	r1, r5
   30270:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30274:	mov	sl, r2
   30278:	add	fp, r6, r2, lsl #1
   3027c:	mov	r2, #100	; 0x64
   30280:	mov	r3, #0
   30284:	mov	r0, r4
   30288:	mov	r1, r5
   3028c:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30290:	mov	r4, r0
   30294:	mov	r5, r1
   30298:	ldrb	r3, [r6, sl, lsl #1]
   3029c:	strb	r3, [r8, #-2]
   302a0:	ldrb	r3, [fp, #1]
   302a4:	strb	r3, [r8, #-1]
   302a8:	sub	r8, r9, #2
   302ac:	movw	r6, #11320	; 0x2c38
   302b0:	movt	r6, #4
   302b4:	mov	r2, #100	; 0x64
   302b8:	mov	r3, #0
   302bc:	mov	r0, r4
   302c0:	mov	r1, r5
   302c4:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   302c8:	mov	sl, r2
   302cc:	add	fp, r6, r2, lsl #1
   302d0:	mov	r2, #100	; 0x64
   302d4:	mov	r3, #0
   302d8:	mov	r0, r4
   302dc:	mov	r1, r5
   302e0:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   302e4:	mov	r4, r0
   302e8:	mov	r5, r1
   302ec:	ldrb	r3, [r6, sl, lsl #1]
   302f0:	strb	r3, [r9, #-2]
   302f4:	ldrb	r3, [fp, #1]
   302f8:	strb	r3, [r9, #-1]
   302fc:	movw	r6, #11320	; 0x2c38
   30300:	movt	r6, #4
   30304:	mov	r2, #100	; 0x64
   30308:	mov	r3, #0
   3030c:	mov	r0, r4
   30310:	mov	r1, r5
   30314:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30318:	add	r3, r6, r2, lsl #1
   3031c:	ldrb	r2, [r6, r2, lsl #1]
   30320:	strb	r2, [r8, #-2]
   30324:	ldrb	r3, [r3, #1]
   30328:	strb	r3, [r8, #-1]
   3032c:	sub	r6, r8, #3
   30330:	mov	r2, #100	; 0x64
   30334:	mov	r3, #0
   30338:	mov	r0, r4
   3033c:	mov	r1, r5
   30340:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30344:	mov	r2, #10
   30348:	mov	r3, #0
   3034c:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30350:	add	r2, r2, #48	; 0x30
   30354:	strb	r2, [r8, #-3]
   30358:	mov	r2, #1000	; 0x3e8
   3035c:	mov	r3, #0
   30360:	mov	r0, r4
   30364:	mov	r1, r5
   30368:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   3036c:	mov	r4, r0
   30370:	mov	r5, r1
   30374:	b	306e4 <flatcc_json_parser_struct_as_root@@Base+0xc5c>
   30378:	mov	r1, r6
   3037c:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   30380:	mov	r7, r0
   30384:	b	307b4 <flatcc_json_parser_struct_as_root@@Base+0xd2c>
   30388:	add	r3, pc, #296	; 0x128
   3038c:	ldrd	r2, [r3]
   30390:	cmp	r1, r3
   30394:	cmpeq	r0, r2
   30398:	bhi	307d4 <flatcc_json_parser_struct_as_root@@Base+0xd4c>
   3039c:	add	r9, r6, #17
   303a0:	mov	r3, #0
   303a4:	strb	r3, [r6, #17]
   303a8:	mov	r7, #17
   303ac:	b	30200 <flatcc_json_parser_struct_as_root@@Base+0x778>
   303b0:	add	r3, pc, #264	; 0x108
   303b4:	ldrd	r2, [r3]
   303b8:	cmp	r1, r3
   303bc:	cmpeq	r0, r2
   303c0:	bhi	307e8 <flatcc_json_parser_struct_as_root@@Base+0xd60>
   303c4:	add	r3, pc, #252	; 0xfc
   303c8:	ldrd	r2, [r3]
   303cc:	cmp	r1, r3
   303d0:	cmpeq	r0, r2
   303d4:	bhi	30450 <flatcc_json_parser_struct_as_root@@Base+0x9c8>
   303d8:	add	r9, r6, #14
   303dc:	mov	r3, #0
   303e0:	strb	r3, [r6, #14]
   303e4:	mov	r7, #14
   303e8:	b	305e8 <flatcc_json_parser_struct_as_root@@Base+0xb60>
   303ec:	add	r3, pc, #220	; 0xdc
   303f0:	ldrd	r2, [r3]
   303f4:	cmp	r1, r3
   303f8:	cmpeq	r0, r2
   303fc:	bls	30428 <flatcc_json_parser_struct_as_root@@Base+0x9a0>
   30400:	add	r3, pc, #208	; 0xd0
   30404:	ldrd	r2, [r3]
   30408:	cmp	r1, r3
   3040c:	cmpeq	r0, r2
   30410:	bhi	30464 <flatcc_json_parser_struct_as_root@@Base+0x9dc>
   30414:	add	r8, r6, #12
   30418:	mov	r3, #0
   3041c:	strb	r3, [r6, #12]
   30420:	mov	r7, #12
   30424:	b	3063c <flatcc_json_parser_struct_as_root@@Base+0xbb4>
   30428:	add	r3, pc, #176	; 0xb0
   3042c:	ldrd	r2, [r3]
   30430:	cmp	r1, r3
   30434:	cmpeq	r0, r2
   30438:	bhi	30478 <flatcc_json_parser_struct_as_root@@Base+0x9f0>
   3043c:	add	r9, r6, #10
   30440:	mov	r3, #0
   30444:	strb	r3, [r6, #10]
   30448:	mov	r7, #10
   3044c:	b	30690 <flatcc_json_parser_struct_as_root@@Base+0xc08>
   30450:	add	r8, r6, #15
   30454:	mov	r3, #0
   30458:	strb	r3, [r6, #15]
   3045c:	mov	r7, #15
   30460:	b	30254 <flatcc_json_parser_struct_as_root@@Base+0x7cc>
   30464:	add	r9, r6, #13
   30468:	mov	r3, #0
   3046c:	strb	r3, [r6, #13]
   30470:	mov	r7, #13
   30474:	b	302a8 <flatcc_json_parser_struct_as_root@@Base+0x820>
   30478:	add	r8, r6, #11
   3047c:	mov	r3, #0
   30480:	strb	r3, [r6, #11]
   30484:	mov	r7, #11
   30488:	b	302fc <flatcc_json_parser_struct_as_root@@Base+0x874>
   3048c:	nop	{0}
   30490:	blcc	fe6e2c94 <__bss_end__@@Base+0xfe68e948>
   30494:	andeq	r0, r0, r0
   30498:	mrcmi	15, 3, r9, cr2, cr15, {7}
   3049c:	andeq	r0, r0, r8, lsl r9
   304a0:	svcvs	0x00c0ffff
   304a4:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   304a8:			; <UNDEFINED> instruction: 0xa763ffff
   304ac:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   304b0:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   304b4:	bhi	ff1f90cc <__bss_end__@@Base+0xff1a4d80>
   304b8:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   304bc:	smceq	13400	; 0x3458
   304c0:	strbge	r7, [r6], #4095	; 0xfff
   304c4:	andeq	r8, r3, lr, ror sp
   304c8:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   304cc:	strdeq	r5, [r0], -r3
   304d0:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   304d4:	andeq	r0, r0, r7, lsl r0
   304d8:	strtle	r0, [r5], #4095	; 0xfff
   304dc:	andeq	r0, r0, r8, ror #1
   304e0:	strpl	lr, [fp], #-1023	; 0xfffffc01
   304e4:	andeq	r0, r0, r2
   304e8:	mov	r3, #0
   304ec:	strb	r3, [r6, #20]
   304f0:	add	r9, r6, #18
   304f4:	movw	r7, #11320	; 0x2c38
   304f8:	movt	r7, #4
   304fc:	mov	r2, #100	; 0x64
   30500:	mov	r3, #0
   30504:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30508:	mov	r8, r2
   3050c:	add	sl, r7, r2, lsl #1
   30510:	mov	r2, #100	; 0x64
   30514:	mov	r3, #0
   30518:	mov	r0, r4
   3051c:	mov	r1, r5
   30520:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30524:	mov	r4, r0
   30528:	mov	r5, r1
   3052c:	ldrb	r3, [r7, r8, lsl #1]
   30530:	strb	r3, [r6, #18]
   30534:	ldrb	r3, [sl, #1]
   30538:	strb	r3, [r6, #19]
   3053c:	mov	r7, #20
   30540:	sub	r8, r9, #2
   30544:	movw	r6, #11320	; 0x2c38
   30548:	movt	r6, #4
   3054c:	mov	r2, #100	; 0x64
   30550:	mov	r3, #0
   30554:	mov	r0, r4
   30558:	mov	r1, r5
   3055c:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30560:	mov	sl, r2
   30564:	add	fp, r6, r2, lsl #1
   30568:	mov	r2, #100	; 0x64
   3056c:	mov	r3, #0
   30570:	mov	r0, r4
   30574:	mov	r1, r5
   30578:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   3057c:	mov	r4, r0
   30580:	mov	r5, r1
   30584:	ldrb	r3, [r6, sl, lsl #1]
   30588:	strb	r3, [r9, #-2]
   3058c:	ldrb	r3, [fp, #1]
   30590:	strb	r3, [r9, #-1]
   30594:	sub	r9, r8, #2
   30598:	movw	r6, #11320	; 0x2c38
   3059c:	movt	r6, #4
   305a0:	mov	r2, #100	; 0x64
   305a4:	mov	r3, #0
   305a8:	mov	r0, r4
   305ac:	mov	r1, r5
   305b0:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   305b4:	mov	sl, r2
   305b8:	add	fp, r6, r2, lsl #1
   305bc:	mov	r2, #100	; 0x64
   305c0:	mov	r3, #0
   305c4:	mov	r0, r4
   305c8:	mov	r1, r5
   305cc:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   305d0:	mov	r4, r0
   305d4:	mov	r5, r1
   305d8:	ldrb	r3, [r6, sl, lsl #1]
   305dc:	strb	r3, [r8, #-2]
   305e0:	ldrb	r3, [fp, #1]
   305e4:	strb	r3, [r8, #-1]
   305e8:	sub	r8, r9, #2
   305ec:	movw	r6, #11320	; 0x2c38
   305f0:	movt	r6, #4
   305f4:	mov	r2, #100	; 0x64
   305f8:	mov	r3, #0
   305fc:	mov	r0, r4
   30600:	mov	r1, r5
   30604:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30608:	mov	sl, r2
   3060c:	add	fp, r6, r2, lsl #1
   30610:	mov	r2, #100	; 0x64
   30614:	mov	r3, #0
   30618:	mov	r0, r4
   3061c:	mov	r1, r5
   30620:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30624:	mov	r4, r0
   30628:	mov	r5, r1
   3062c:	ldrb	r3, [r6, sl, lsl #1]
   30630:	strb	r3, [r9, #-2]
   30634:	ldrb	r3, [fp, #1]
   30638:	strb	r3, [r9, #-1]
   3063c:	sub	r9, r8, #2
   30640:	movw	r6, #11320	; 0x2c38
   30644:	movt	r6, #4
   30648:	mov	r2, #100	; 0x64
   3064c:	mov	r3, #0
   30650:	mov	r0, r4
   30654:	mov	r1, r5
   30658:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   3065c:	mov	sl, r2
   30660:	add	fp, r6, r2, lsl #1
   30664:	mov	r2, #100	; 0x64
   30668:	mov	r3, #0
   3066c:	mov	r0, r4
   30670:	mov	r1, r5
   30674:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30678:	mov	r4, r0
   3067c:	mov	r5, r1
   30680:	ldrb	r3, [r6, sl, lsl #1]
   30684:	strb	r3, [r8, #-2]
   30688:	ldrb	r3, [fp, #1]
   3068c:	strb	r3, [r8, #-1]
   30690:	sub	r6, r9, #2
   30694:	movw	r8, #11320	; 0x2c38
   30698:	movt	r8, #4
   3069c:	mov	r2, #100	; 0x64
   306a0:	mov	r3, #0
   306a4:	mov	r0, r4
   306a8:	mov	r1, r5
   306ac:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   306b0:	mov	sl, r2
   306b4:	add	fp, r8, r2, lsl #1
   306b8:	mov	r2, #100	; 0x64
   306bc:	mov	r3, #0
   306c0:	mov	r0, r4
   306c4:	mov	r1, r5
   306c8:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   306cc:	mov	r4, r0
   306d0:	mov	r5, r1
   306d4:	ldrb	r3, [r8, sl, lsl #1]
   306d8:	strb	r3, [r9, #-2]
   306dc:	ldrb	r3, [fp, #1]
   306e0:	strb	r3, [r9, #-1]
   306e4:	movw	r8, #11320	; 0x2c38
   306e8:	movt	r8, #4
   306ec:	mov	r2, #100	; 0x64
   306f0:	mov	r3, #0
   306f4:	mov	r0, r4
   306f8:	mov	r1, r5
   306fc:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30700:	add	r3, r8, r2, lsl #1
   30704:	ldrb	r2, [r8, r2, lsl #1]
   30708:	strb	r2, [r6, #-2]
   3070c:	ldrb	r3, [r3, #1]
   30710:	strb	r3, [r6, #-1]
   30714:	mov	r2, #100	; 0x64
   30718:	mov	r3, #0
   3071c:	mov	r0, r4
   30720:	mov	r1, r5
   30724:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30728:	mov	r2, #100	; 0x64
   3072c:	mov	r3, #0
   30730:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30734:	add	r3, r8, r2, lsl #1
   30738:	ldrb	r2, [r8, r2, lsl #1]
   3073c:	strb	r2, [r6, #-4]
   30740:	ldrb	r3, [r3, #1]
   30744:	strb	r3, [r6, #-3]
   30748:	movw	r2, #10000	; 0x2710
   3074c:	mov	r3, #0
   30750:	mov	r0, r4
   30754:	mov	r1, r5
   30758:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   3075c:	mov	r2, #100	; 0x64
   30760:	mov	r3, #0
   30764:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30768:	add	r3, r8, r2, lsl #1
   3076c:	ldrb	r2, [r8, r2, lsl #1]
   30770:	strb	r2, [r6, #-6]
   30774:	ldrb	r3, [r3, #1]
   30778:	strb	r3, [r6, #-5]
   3077c:	movw	r2, #16960	; 0x4240
   30780:	movt	r2, #15
   30784:	mov	r3, #0
   30788:	mov	r0, r4
   3078c:	mov	r1, r5
   30790:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   30794:	mov	r2, #100	; 0x64
   30798:	mov	r3, #0
   3079c:	bl	3dcd8 <flatcc_json_printer_clear@@Base+0x654>
   307a0:	add	r3, r8, r2, lsl #1
   307a4:	ldrb	r2, [r8, r2, lsl #1]
   307a8:	strb	r2, [r6, #-8]
   307ac:	ldrb	r3, [r3, #1]
   307b0:	strb	r3, [r6, #-7]
   307b4:	mov	r0, r7
   307b8:	add	sp, sp, #4
   307bc:	ldrd	r4, [sp]
   307c0:	ldrd	r6, [sp, #8]
   307c4:	ldrd	r8, [sp, #16]
   307c8:	ldrd	sl, [sp, #24]
   307cc:	add	sp, sp, #32
   307d0:	pop	{pc}		; (ldr pc, [sp], #4)
   307d4:	add	r9, r6, #18
   307d8:	mov	r3, #0
   307dc:	strb	r3, [r6, #18]
   307e0:	mov	r7, #18
   307e4:	b	30540 <flatcc_json_parser_struct_as_root@@Base+0xab8>
   307e8:	add	r8, r6, #16
   307ec:	mov	r3, #0
   307f0:	strb	r3, [r6, #16]
   307f4:	mov	r7, #16
   307f8:	b	30594 <flatcc_json_parser_struct_as_root@@Base+0xb0c>
   307fc:	str	r4, [sp, #-8]!
   30800:	str	lr, [sp, #4]
   30804:	lsr	r4, r0, #31
   30808:	cmp	r0, #0
   3080c:	blt	30828 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   30810:	uxtb	r0, r0
   30814:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   30818:	add	r0, r0, r4
   3081c:	ldr	r4, [sp]
   30820:	add	sp, sp, #4
   30824:	pop	{pc}		; (ldr pc, [sp], #4)
   30828:	mov	r3, #45	; 0x2d
   3082c:	strb	r3, [r1], #1
   30830:	rsb	r0, r0, #0
   30834:	sxtb	r0, r0
   30838:	b	30810 <flatcc_json_parser_struct_as_root@@Base+0xd88>
   3083c:	str	r4, [sp, #-8]!
   30840:	str	lr, [sp, #4]
   30844:	lsr	r4, r0, #31
   30848:	cmp	r0, #0
   3084c:	blt	30868 <flatcc_json_parser_struct_as_root@@Base+0xde0>
   30850:	uxth	r0, r0
   30854:	bl	2fc28 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   30858:	add	r0, r0, r4
   3085c:	ldr	r4, [sp]
   30860:	add	sp, sp, #4
   30864:	pop	{pc}		; (ldr pc, [sp], #4)
   30868:	mov	r3, #45	; 0x2d
   3086c:	strb	r3, [r1], #1
   30870:	rsb	r0, r0, #0
   30874:	sxth	r0, r0
   30878:	b	30850 <flatcc_json_parser_struct_as_root@@Base+0xdc8>
   3087c:	str	r4, [sp, #-8]!
   30880:	str	lr, [sp, #4]
   30884:	lsr	r4, r0, #31
   30888:	cmp	r0, #0
   3088c:	blt	308a4 <flatcc_json_parser_struct_as_root@@Base+0xe1c>
   30890:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   30894:	add	r0, r0, r4
   30898:	ldr	r4, [sp]
   3089c:	add	sp, sp, #4
   308a0:	pop	{pc}		; (ldr pc, [sp], #4)
   308a4:	mov	r3, #45	; 0x2d
   308a8:	strb	r3, [r1], #1
   308ac:	rsb	r0, r0, #0
   308b0:	b	30890 <flatcc_json_parser_struct_as_root@@Base+0xe08>
   308b4:	str	r4, [sp, #-8]!
   308b8:	str	lr, [sp, #4]
   308bc:	lsr	r4, r1, #31
   308c0:	cmp	r0, #0
   308c4:	sbcs	r3, r1, #0
   308c8:	blt	308e0 <flatcc_json_parser_struct_as_root@@Base+0xe58>
   308cc:	bl	30120 <flatcc_json_parser_struct_as_root@@Base+0x698>
   308d0:	add	r0, r0, r4
   308d4:	ldr	r4, [sp]
   308d8:	add	sp, sp, #4
   308dc:	pop	{pc}		; (ldr pc, [sp], #4)
   308e0:	mov	r3, #45	; 0x2d
   308e4:	strb	r3, [r2], #1
   308e8:	rsbs	r0, r0, #0
   308ec:	rsc	r1, r1, #0
   308f0:	b	308cc <flatcc_json_parser_struct_as_root@@Base+0xe44>
   308f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   308f8:	strd	r6, [sp, #8]
   308fc:	strd	r8, [sp, #16]
   30900:	strd	sl, [sp, #24]
   30904:	str	lr, [sp, #32]
   30908:	sub	sp, sp, #116	; 0x74
   3090c:	str	r0, [sp, #52]	; 0x34
   30910:	str	r1, [sp, #64]	; 0x40
   30914:	mov	r4, r2
   30918:	str	r2, [sp, #28]
   3091c:	str	r3, [sp, #20]
   30920:	ldr	ip, [sp, #152]	; 0x98
   30924:	str	ip, [sp, #68]	; 0x44
   30928:	ldr	lr, [sp, #156]	; 0x9c
   3092c:	str	lr, [sp, #48]	; 0x30
   30930:	ldrd	r0, [sp, #160]	; 0xa0
   30934:	ldrd	r2, [sp, #168]	; 0xa8
   30938:	ldr	lr, [sp, #176]	; 0xb0
   3093c:	ldr	r5, [sp, #180]	; 0xb4
   30940:	str	r5, [sp, #24]
   30944:	subs	sl, r4, lr
   30948:	ldr	r4, [sp, #20]
   3094c:	sbc	fp, r4, r5
   30950:	cmp	fp, r1
   30954:	cmpeq	sl, r0
   30958:	bls	309a4 <flatcc_json_parser_struct_as_root@@Base+0xf1c>
   3095c:	subs	r6, ip, r0
   30960:	ldr	r4, [sp, #48]	; 0x30
   30964:	sbc	r7, r4, r1
   30968:	cmp	r3, r7
   3096c:	cmpeq	r2, r6
   30970:	bhi	309b0 <flatcc_json_parser_struct_as_root@@Base+0xf28>
   30974:	subs	ip, ip, r2
   30978:	sbc	r6, r4, r3
   3097c:	subs	ip, ip, r0
   30980:	str	ip, [sp, #32]
   30984:	sbc	ip, r6, r1
   30988:	str	ip, [sp, #36]	; 0x24
   3098c:	ldr	ip, [sp, #64]	; 0x40
   30990:	sub	ip, ip, #1
   30994:	ldr	r4, [sp, #52]	; 0x34
   30998:	add	ip, r4, ip
   3099c:	ldrd	r4, [sp, #32]
   309a0:	b	309f4 <flatcc_json_parser_struct_as_root@@Base+0xf6c>
   309a4:	mov	r8, r0
   309a8:	mov	r9, r1
   309ac:	b	30a70 <flatcc_json_parser_struct_as_root@@Base+0xfe8>
   309b0:	mov	r8, r0
   309b4:	mov	r9, r1
   309b8:	b	30b1c <flatcc_json_parser_struct_as_root@@Base+0x1094>
   309bc:	mov	r0, #0
   309c0:	b	30b7c <flatcc_json_parser_struct_as_root@@Base+0x10f4>
   309c4:	ldrb	r1, [ip]
   309c8:	sub	r1, r1, #1
   309cc:	strb	r1, [ip]
   309d0:	subs	r7, r4, r2
   309d4:	sbc	r6, r5, r3
   309d8:	mov	r0, r8
   309dc:	mov	r1, r9
   309e0:	cmp	r3, r5
   309e4:	cmpeq	r2, r4
   309e8:	bhi	30b1c <flatcc_json_parser_struct_as_root@@Base+0x1094>
   309ec:	mov	r4, r7
   309f0:	mov	r5, r6
   309f4:	adds	r8, r2, r0
   309f8:	adc	r9, r3, r1
   309fc:	cmp	r9, fp
   30a00:	cmpeq	r8, sl
   30a04:	bcc	309c4 <flatcc_json_parser_struct_as_root@@Base+0xf3c>
   30a08:	subs	ip, sl, r0
   30a0c:	str	ip, [sp]
   30a10:	sbc	ip, fp, r1
   30a14:	str	ip, [sp, #4]
   30a18:	ldr	ip, [sp, #28]
   30a1c:	subs	ip, lr, ip
   30a20:	ldr	r4, [sp, #24]
   30a24:	ldr	r5, [sp, #20]
   30a28:	sbc	r4, r4, r5
   30a2c:	adds	ip, ip, r8
   30a30:	str	ip, [sp, #8]
   30a34:	adc	ip, r4, r9
   30a38:	str	ip, [sp, #12]
   30a3c:	ldrd	r4, [sp]
   30a40:	ldrd	r6, [sp, #8]
   30a44:	cmp	r5, r7
   30a48:	cmpeq	r4, r6
   30a4c:	movcc	r8, r0
   30a50:	movcc	r9, r1
   30a54:	bcc	30a70 <flatcc_json_parser_struct_as_root@@Base+0xfe8>
   30a58:	ldr	r1, [sp, #64]	; 0x40
   30a5c:	sub	r1, r1, #1
   30a60:	ldr	ip, [sp, #52]	; 0x34
   30a64:	ldrb	r0, [ip, r1]
   30a68:	sub	r0, r0, #1
   30a6c:	strb	r0, [ip, r1]
   30a70:	ldr	r1, [sp, #28]
   30a74:	adds	r1, r1, lr
   30a78:	str	r1, [sp, #56]	; 0x38
   30a7c:	ldr	r1, [sp, #20]
   30a80:	ldr	r0, [sp, #24]
   30a84:	adc	r1, r1, r0
   30a88:	str	r1, [sp, #60]	; 0x3c
   30a8c:	ldrd	r0, [sp, #56]	; 0x38
   30a90:	cmp	r1, r9
   30a94:	cmpeq	r0, r8
   30a98:	bls	30b1c <flatcc_json_parser_struct_as_root@@Base+0x1094>
   30a9c:	ldr	ip, [sp, #68]	; 0x44
   30aa0:	subs	ip, ip, r8
   30aa4:	str	ip, [sp, #80]	; 0x50
   30aa8:	ldr	ip, [sp, #48]	; 0x30
   30aac:	sbc	ip, ip, r9
   30ab0:	str	ip, [sp, #84]	; 0x54
   30ab4:	ldrd	r4, [sp, #80]	; 0x50
   30ab8:	cmp	r5, r3
   30abc:	cmpeq	r4, r2
   30ac0:	bcc	30b1c <flatcc_json_parser_struct_as_root@@Base+0x1094>
   30ac4:	adds	ip, r2, r8
   30ac8:	str	ip, [sp, #88]	; 0x58
   30acc:	adc	r3, r3, r9
   30ad0:	str	r3, [sp, #92]	; 0x5c
   30ad4:	ldrd	r2, [sp, #88]	; 0x58
   30ad8:	cmp	r3, r1
   30adc:	cmpeq	r2, r0
   30ae0:	movcc	r0, #0
   30ae4:	bcc	30b7c <flatcc_json_parser_struct_as_root@@Base+0x10f4>
   30ae8:	subs	ip, r0, r8
   30aec:	str	ip, [sp, #96]	; 0x60
   30af0:	sbc	ip, r1, r9
   30af4:	str	ip, [sp, #100]	; 0x64
   30af8:	subs	ip, r2, r0
   30afc:	str	ip, [sp, #104]	; 0x68
   30b00:	sbc	r3, r3, r1
   30b04:	str	r3, [sp, #108]	; 0x6c
   30b08:	ldrd	r2, [sp, #96]	; 0x60
   30b0c:	ldrd	r0, [sp, #104]	; 0x68
   30b10:	cmp	r3, r1
   30b14:	cmpeq	r2, r0
   30b18:	bhi	309bc <flatcc_json_parser_struct_as_root@@Base+0xf34>
   30b1c:	adds	r3, lr, lr
   30b20:	str	r3, [sp, #40]	; 0x28
   30b24:	ldr	r1, [sp, #24]
   30b28:	adc	r3, r1, r1
   30b2c:	str	r3, [sp, #44]	; 0x2c
   30b30:	ldrd	r2, [sp, #40]	; 0x28
   30b34:	cmp	r3, r9
   30b38:	cmpeq	r2, r8
   30b3c:	movhi	r0, #0
   30b40:	bhi	30b7c <flatcc_json_parser_struct_as_root@@Base+0x10f4>
   30b44:	lsl	r3, r1, #2
   30b48:	orr	r3, r3, lr, lsr #30
   30b4c:	lsl	r2, lr, #2
   30b50:	ldr	r1, [sp, #68]	; 0x44
   30b54:	subs	r2, r1, r2
   30b58:	str	r2, [sp, #72]	; 0x48
   30b5c:	ldr	r2, [sp, #48]	; 0x30
   30b60:	sbc	r3, r2, r3
   30b64:	str	r3, [sp, #76]	; 0x4c
   30b68:	ldrd	r2, [sp, #72]	; 0x48
   30b6c:	cmp	r3, r9
   30b70:	cmpeq	r2, r8
   30b74:	movcs	r0, #1
   30b78:	movcc	r0, #0
   30b7c:	add	sp, sp, #116	; 0x74
   30b80:	ldrd	r4, [sp]
   30b84:	ldrd	r6, [sp, #8]
   30b88:	ldrd	r8, [sp, #16]
   30b8c:	ldrd	sl, [sp, #24]
   30b90:	add	sp, sp, #32
   30b94:	pop	{pc}		; (ldr pc, [sp], #4)
   30b98:	strd	r4, [sp, #-12]!
   30b9c:	str	lr, [sp, #8]
   30ba0:	subs	r3, r0, #0
   30ba4:	mov	lr, r1
   30ba8:	movlt	r2, #45	; 0x2d
   30bac:	strblt	r2, [lr], #1
   30bb0:	rsblt	r3, r3, #0
   30bb4:	mov	r0, lr
   30bb8:	movw	r4, #26215	; 0x6667
   30bbc:	movt	r4, #26214	; 0x6666
   30bc0:	mvn	r5, #9
   30bc4:	smull	r2, ip, r4, r3
   30bc8:	asr	r2, r3, #31
   30bcc:	rsb	r2, r2, ip, asr #2
   30bd0:	mla	r3, r5, r2, r3
   30bd4:	add	r3, r3, #48	; 0x30
   30bd8:	strb	r3, [r0], #1
   30bdc:	mov	r3, r2
   30be0:	cmp	r2, #0
   30be4:	bne	30bc4 <flatcc_json_parser_struct_as_root@@Base+0x113c>
   30be8:	mov	r3, #0
   30bec:	strb	r3, [r0]
   30bf0:	sub	r3, r0, lr
   30bf4:	add	r5, r3, r3, lsr #31
   30bf8:	asr	r5, r5, #1
   30bfc:	cmp	r3, #1
   30c00:	ble	30c30 <flatcc_json_parser_struct_as_root@@Base+0x11a8>
   30c04:	sub	r3, lr, #1
   30c08:	mov	ip, r0
   30c0c:	ldrb	r2, [r3, #1]
   30c10:	ldrb	r4, [ip, #-1]!
   30c14:	strb	r4, [r3, #1]
   30c18:	strb	r2, [ip]
   30c1c:	add	r2, r3, #2
   30c20:	sub	r2, r2, lr
   30c24:	add	r3, r3, #1
   30c28:	cmp	r5, r2
   30c2c:	bgt	30c0c <flatcc_json_parser_struct_as_root@@Base+0x1184>
   30c30:	sub	r0, r0, r1
   30c34:	ldrd	r4, [sp]
   30c38:	add	sp, sp, #8
   30c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   30c40:	lsl	r3, r0, #2
   30c44:	movw	r2, #43691	; 0xaaab
   30c48:	movt	r2, #43690	; 0xaaaa
   30c4c:	umull	r2, r3, r2, r3
   30c50:	lsr	r3, r3, #1
   30c54:	add	r3, r3, #3
   30c58:	bic	r3, r3, #3
   30c5c:	tst	r1, #128	; 0x80
   30c60:	bne	30c90 <flatcc_json_parser_struct_as_root@@Base+0x1208>
   30c64:	movw	r2, #43691	; 0xaaab
   30c68:	movt	r2, #43690	; 0xaaaa
   30c6c:	umull	r1, r2, r2, r0
   30c70:	lsr	r2, r2, #1
   30c74:	add	r2, r2, r2, lsl #1
   30c78:	sub	r2, r0, r2
   30c7c:	cmp	r2, #1
   30c80:	subeq	r3, r3, #2
   30c84:	beq	30c90 <flatcc_json_parser_struct_as_root@@Base+0x1208>
   30c88:	cmp	r2, #2
   30c8c:	subeq	r3, r3, #1
   30c90:	mov	r0, r3
   30c94:	bx	lr
   30c98:	strd	r4, [sp, #-28]!	; 0xffffffe4
   30c9c:	strd	r6, [sp, #8]
   30ca0:	strd	r8, [sp, #16]
   30ca4:	str	lr, [sp, #24]
   30ca8:	ldr	r8, [sp, #28]
   30cac:	cmp	r3, #0
   30cb0:	beq	30e74 <flatcc_json_parser_struct_as_root@@Base+0x13ec>
   30cb4:	ldr	r6, [r3]
   30cb8:	bics	ip, r8, #224	; 0xe0
   30cbc:	beq	30d14 <flatcc_json_parser_struct_as_root@@Base+0x128c>
   30cc0:	cmp	ip, #1
   30cc4:	movweq	r5, #13240	; 0x33b8
   30cc8:	movteq	r5, #4
   30ccc:	beq	30d1c <flatcc_json_parser_struct_as_root@@Base+0x1294>
   30cd0:	mov	r7, r0
   30cd4:	mov	r1, #3
   30cd8:	cmp	r2, #0
   30cdc:	beq	30cf0 <flatcc_json_parser_struct_as_root@@Base+0x1268>
   30ce0:	sub	r0, r7, r0
   30ce4:	str	r0, [r2]
   30ce8:	cmp	r3, #0
   30cec:	beq	30cfc <flatcc_json_parser_struct_as_root@@Base+0x1274>
   30cf0:	ldr	r2, [r3]
   30cf4:	sub	r6, r2, r6
   30cf8:	str	r6, [r3]
   30cfc:	mov	r0, r1
   30d00:	ldrd	r4, [sp]
   30d04:	ldrd	r6, [sp, #8]
   30d08:	ldrd	r8, [sp, #16]
   30d0c:	add	sp, sp, #24
   30d10:	pop	{pc}		; (ldr pc, [sp], #4)
   30d14:	movw	r5, #13172	; 0x3374
   30d18:	movt	r5, #4
   30d1c:	cmp	r6, #2
   30d20:	bls	30e20 <flatcc_json_parser_struct_as_root@@Base+0x1398>
   30d24:	add	r4, r0, #4
   30d28:	add	ip, r1, #3
   30d2c:	mov	r1, ip
   30d30:	mov	r7, r4
   30d34:	ldrb	lr, [ip, #-3]
   30d38:	ldrb	lr, [r5, lr, lsr #2]
   30d3c:	strb	lr, [r4, #-4]
   30d40:	ldrb	lr, [ip, #-3]
   30d44:	lsl	lr, lr, #4
   30d48:	and	lr, lr, #48	; 0x30
   30d4c:	ldrb	r9, [ip, #-2]
   30d50:	orr	lr, lr, r9, lsr #4
   30d54:	ldrb	lr, [r5, lr]
   30d58:	strb	lr, [r4, #-3]
   30d5c:	ldrb	lr, [ip, #-2]
   30d60:	lsl	lr, lr, #2
   30d64:	and	lr, lr, #60	; 0x3c
   30d68:	ldrb	r9, [ip, #-1]
   30d6c:	orr	lr, lr, r9, lsr #6
   30d70:	ldrb	lr, [r5, lr]
   30d74:	strb	lr, [r4, #-2]
   30d78:	ldrb	lr, [ip, #-1]
   30d7c:	and	lr, lr, #63	; 0x3f
   30d80:	ldrb	lr, [r5, lr]
   30d84:	strb	lr, [r4, #-1]
   30d88:	sub	r6, r6, #3
   30d8c:	add	r4, r4, #4
   30d90:	add	ip, ip, #3
   30d94:	cmp	r6, #2
   30d98:	bhi	30d2c <flatcc_json_parser_struct_as_root@@Base+0x12a4>
   30d9c:	and	r8, r8, #128	; 0x80
   30da0:	cmp	r6, #1
   30da4:	beq	30e28 <flatcc_json_parser_struct_as_root@@Base+0x13a0>
   30da8:	cmp	r6, #2
   30dac:	bne	30e68 <flatcc_json_parser_struct_as_root@@Base+0x13e0>
   30db0:	ldrb	ip, [r1]
   30db4:	ldrb	ip, [r5, ip, lsr #2]
   30db8:	strb	ip, [r7]
   30dbc:	ldrb	ip, [r1]
   30dc0:	lsl	ip, ip, #4
   30dc4:	and	ip, ip, #48	; 0x30
   30dc8:	ldrb	lr, [r1, #1]
   30dcc:	orr	ip, ip, lr, lsr #4
   30dd0:	ldrb	ip, [r5, ip]
   30dd4:	strb	ip, [r7, #1]
   30dd8:	ldrb	r1, [r1, #1]
   30ddc:	lsl	r1, r1, #2
   30de0:	and	r1, r1, #60	; 0x3c
   30de4:	ldrb	r1, [r5, r1]
   30de8:	strb	r1, [r7, #2]
   30dec:	cmp	r8, #0
   30df0:	addeq	r7, r7, #3
   30df4:	beq	30e04 <flatcc_json_parser_struct_as_root@@Base+0x137c>
   30df8:	mov	r1, #61	; 0x3d
   30dfc:	strb	r1, [r7, #3]
   30e00:	add	r7, r7, #4
   30e04:	cmp	r2, #0
   30e08:	moveq	r1, #0
   30e0c:	moveq	r6, r1
   30e10:	beq	30cf0 <flatcc_json_parser_struct_as_root@@Base+0x1268>
   30e14:	mov	r1, #0
   30e18:	mov	r6, r1
   30e1c:	b	30ce0 <flatcc_json_parser_struct_as_root@@Base+0x1258>
   30e20:	mov	r7, r0
   30e24:	b	30d9c <flatcc_json_parser_struct_as_root@@Base+0x1314>
   30e28:	ldrb	ip, [r1]
   30e2c:	ldrb	ip, [r5, ip, lsr #2]
   30e30:	strb	ip, [r7]
   30e34:	ldrb	r1, [r1]
   30e38:	lsl	r1, r1, #4
   30e3c:	and	r1, r1, #48	; 0x30
   30e40:	ldrb	r1, [r5, r1]
   30e44:	strb	r1, [r7, #1]
   30e48:	cmp	r8, #0
   30e4c:	addeq	r7, r7, #2
   30e50:	beq	30e04 <flatcc_json_parser_struct_as_root@@Base+0x137c>
   30e54:	mov	r1, #61	; 0x3d
   30e58:	strb	r1, [r7, #2]
   30e5c:	strb	r1, [r7, #3]
   30e60:	add	r7, r7, #4
   30e64:	b	30e04 <flatcc_json_parser_struct_as_root@@Base+0x137c>
   30e68:	mov	r1, #0
   30e6c:	mov	r6, r1
   30e70:	b	30cd8 <flatcc_json_parser_struct_as_root@@Base+0x1250>
   30e74:	cmp	r2, #0
   30e78:	movne	r7, r0
   30e7c:	movne	r1, #2
   30e80:	movne	r6, #0
   30e84:	bne	30ce0 <flatcc_json_parser_struct_as_root@@Base+0x1258>
   30e88:	mov	r1, #2
   30e8c:	b	30cfc <flatcc_json_parser_struct_as_root@@Base+0x1274>
   30e90:	ldr	r3, [r0, #20]
   30e94:	ldr	r2, [r0, #16]
   30e98:	cmp	r3, r2
   30e9c:	bcc	30ec8 <flatcc_json_parser_struct_as_root@@Base+0x1440>
   30ea0:	ldr	r2, [r0, #36]	; 0x24
   30ea4:	cmp	r2, #0
   30ea8:	moveq	r2, #3
   30eac:	streq	r2, [r0, #36]	; 0x24
   30eb0:	ldr	r1, [r0]
   30eb4:	sub	r3, r3, r1
   30eb8:	ldr	r2, [r0, #12]
   30ebc:	add	r3, r2, r3
   30ec0:	str	r3, [r0, #12]
   30ec4:	str	r1, [r0, #20]
   30ec8:	ldr	r3, [r0, #20]
   30ecc:	mov	r2, #0
   30ed0:	strb	r2, [r3]
   30ed4:	bx	lr
   30ed8:	sub	sp, sp, #8
   30edc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   30ee0:	strd	r6, [sp, #8]
   30ee4:	strd	r8, [sp, #16]
   30ee8:	str	sl, [sp, #24]
   30eec:	str	lr, [sp, #28]
   30ef0:	add	r1, sp, #28
   30ef4:	stmib	r1, {r2, r3}
   30ef8:	ldrd	r2, [sp, #32]
   30efc:	ldr	lr, [sp, #40]	; 0x28
   30f00:	orrs	r1, r2, r3
   30f04:	beq	30fc0 <flatcc_json_parser_struct_as_root@@Base+0x1538>
   30f08:	mov	r8, #0
   30f0c:	lsr	r9, r3, #22
   30f10:	lsl	r9, r9, #22
   30f14:	orrs	r1, r8, r9
   30f18:	subeq	ip, lr, #10
   30f1c:	moveq	r9, #0
   30f20:	moveq	r8, r9
   30f24:	movteq	r8, #65472	; 0xffc0
   30f28:	bne	30f58 <flatcc_json_parser_struct_as_root@@Base+0x14d0>
   30f2c:	lsl	r1, r3, #10
   30f30:	orr	r1, r1, r2, lsr #22
   30f34:	lsl	lr, r2, #10
   30f38:	mov	r2, lr
   30f3c:	mov	r3, r1
   30f40:	mov	lr, ip
   30f44:	mov	r6, r9
   30f48:	and	r7, r1, r8
   30f4c:	sub	ip, ip, #10
   30f50:	orrs	r1, r6, r7
   30f54:	beq	30f2c <flatcc_json_parser_struct_as_root@@Base+0x14a4>
   30f58:	cmp	r2, #0
   30f5c:	sbcs	r1, r3, #0
   30f60:	blt	30f8c <flatcc_json_parser_struct_as_root@@Base+0x1504>
   30f64:	sub	r1, lr, #1
   30f68:	adds	r4, r2, r2
   30f6c:	adc	r5, r3, r3
   30f70:	mov	r2, r4
   30f74:	mov	r3, r5
   30f78:	mov	lr, r1
   30f7c:	sub	r1, r1, #1
   30f80:	cmp	r4, #0
   30f84:	sbcs	ip, r5, #0
   30f88:	bge	30f68 <flatcc_json_parser_struct_as_root@@Base+0x14e0>
   30f8c:	strd	r2, [sp, #32]
   30f90:	str	lr, [sp, #40]	; 0x28
   30f94:	strd	r2, [r0]
   30f98:	ldrd	r2, [sp, #40]	; 0x28
   30f9c:	strd	r2, [r0, #8]
   30fa0:	ldrd	r4, [sp]
   30fa4:	ldrd	r6, [sp, #8]
   30fa8:	ldrd	r8, [sp, #16]
   30fac:	ldr	sl, [sp, #24]
   30fb0:	ldr	lr, [sp, #28]
   30fb4:	add	sp, sp, #32
   30fb8:	add	sp, sp, #8
   30fbc:	bx	lr
   30fc0:	ldr	r3, [pc, #20]	; 30fdc <flatcc_json_parser_struct_as_root@@Base+0x1554>
   30fc4:	mov	r2, #260	; 0x104
   30fc8:	movw	r1, #10248	; 0x2808
   30fcc:	movt	r1, #4
   30fd0:	movw	r0, #10336	; 0x2860
   30fd4:	movt	r0, #4
   30fd8:	bl	145f0 <__assert_fail@plt>
   30fdc:	andeq	r2, r4, r4, lsl #26
   30fe0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   30fe4:	strd	r6, [sp, #8]
   30fe8:	str	r8, [sp, #16]
   30fec:	str	lr, [sp, #20]
   30ff0:	mov	r5, r0
   30ff4:	mov	r7, r1
   30ff8:	mov	r6, r2
   30ffc:	ldr	r2, [r0, #20]
   31000:	ldr	r3, [r0, #16]
   31004:	cmp	r2, r3
   31008:	bcc	31018 <flatcc_json_parser_struct_as_root@@Base+0x1590>
   3100c:	ldr	r3, [r0, #44]	; 0x2c
   31010:	mov	r1, #0
   31014:	blx	r3
   31018:	ldr	r4, [r5, #16]
   3101c:	ldr	r3, [r5, #20]
   31020:	sub	r4, r4, r3
   31024:	cmp	r4, r6
   31028:	bcs	31078 <flatcc_json_parser_struct_as_root@@Base+0x15f0>
   3102c:	mov	r8, #0
   31030:	mov	r2, r4
   31034:	mov	r1, r7
   31038:	ldr	r0, [r5, #20]
   3103c:	bl	14524 <memcpy@plt>
   31040:	ldr	r3, [r5, #20]
   31044:	add	r3, r3, r4
   31048:	str	r3, [r5, #20]
   3104c:	add	r7, r7, r4
   31050:	sub	r6, r6, r4
   31054:	ldr	r3, [r5, #44]	; 0x2c
   31058:	mov	r1, r8
   3105c:	mov	r0, r5
   31060:	blx	r3
   31064:	ldr	r4, [r5, #16]
   31068:	ldr	r3, [r5, #20]
   3106c:	sub	r4, r4, r3
   31070:	cmp	r6, r4
   31074:	bhi	31030 <flatcc_json_parser_struct_as_root@@Base+0x15a8>
   31078:	mov	r2, r6
   3107c:	mov	r1, r7
   31080:	ldr	r0, [r5, #20]
   31084:	bl	14524 <memcpy@plt>
   31088:	ldr	r3, [r5, #20]
   3108c:	add	r6, r3, r6
   31090:	str	r6, [r5, #20]
   31094:	ldrd	r4, [sp]
   31098:	ldrd	r6, [sp, #8]
   3109c:	ldr	r8, [sp, #16]
   310a0:	add	sp, sp, #20
   310a4:	pop	{pc}		; (ldr pc, [sp], #4)
   310a8:	cmp	r0, #0
   310ac:	beq	310d0 <flatcc_json_parser_struct_as_root@@Base+0x1648>
   310b0:	movw	r3, #11320	; 0x2c38
   310b4:	movt	r3, #4
   310b8:	ldr	r2, [r3, #228]	; 0xe4
   310bc:	str	r2, [r1]
   310c0:	ldrb	r3, [r3, #232]	; 0xe8
   310c4:	strb	r3, [r1, #4]
   310c8:	mov	r0, #4
   310cc:	bx	lr
   310d0:	movw	r3, #11320	; 0x2c38
   310d4:	movt	r3, #4
   310d8:	ldr	r2, [r3, #236]	; 0xec
   310dc:	str	r2, [r1]
   310e0:	ldrh	r3, [r3, #240]	; 0xf0
   310e4:	strh	r3, [r1, #4]
   310e8:	mov	r0, #5
   310ec:	bx	lr
   310f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   310f4:	strd	r6, [sp, #8]
   310f8:	str	r8, [sp, #16]
   310fc:	str	lr, [sp, #20]
   31100:	mov	r4, r0
   31104:	mov	r6, r1
   31108:	ldr	r2, [r0, #20]
   3110c:	ldr	r3, [r0, #16]
   31110:	cmp	r2, r3
   31114:	bcc	31124 <flatcc_json_parser_struct_as_root@@Base+0x169c>
   31118:	ldr	r3, [r0, #44]	; 0x2c
   3111c:	mov	r1, #0
   31120:	blx	r3
   31124:	ldr	r5, [r4, #16]
   31128:	ldr	r3, [r4, #20]
   3112c:	sub	r5, r5, r3
   31130:	cmp	r5, r6
   31134:	bcs	31184 <flatcc_json_parser_struct_as_root@@Base+0x16fc>
   31138:	mov	r8, #32
   3113c:	mov	r7, #0
   31140:	mov	r2, r5
   31144:	mov	r1, r8
   31148:	ldr	r0, [r4, #20]
   3114c:	bl	1459c <memset@plt>
   31150:	ldr	r3, [r4, #20]
   31154:	add	r3, r3, r5
   31158:	str	r3, [r4, #20]
   3115c:	sub	r6, r6, r5
   31160:	ldr	r3, [r4, #44]	; 0x2c
   31164:	mov	r1, r7
   31168:	mov	r0, r4
   3116c:	blx	r3
   31170:	ldr	r5, [r4, #16]
   31174:	ldr	r3, [r4, #20]
   31178:	sub	r5, r5, r3
   3117c:	cmp	r6, r5
   31180:	bhi	31140 <flatcc_json_parser_struct_as_root@@Base+0x16b8>
   31184:	mov	r2, r6
   31188:	mov	r1, #32
   3118c:	ldr	r0, [r4, #20]
   31190:	bl	1459c <memset@plt>
   31194:	ldr	r3, [r4, #20]
   31198:	add	r6, r3, r6
   3119c:	str	r6, [r4, #20]
   311a0:	ldrd	r4, [sp]
   311a4:	ldrd	r6, [sp, #8]
   311a8:	ldr	r8, [sp, #16]
   311ac:	add	sp, sp, #20
   311b0:	pop	{pc}		; (ldr pc, [sp], #4)
   311b4:	strd	r4, [sp, #-16]!
   311b8:	str	r6, [sp, #8]
   311bc:	str	lr, [sp, #12]
   311c0:	mov	r4, r0
   311c4:	ldrb	r3, [r0, #25]
   311c8:	ldr	r5, [r0, #32]
   311cc:	mul	r5, r5, r3
   311d0:	ldr	r0, [r0, #20]
   311d4:	add	r3, r0, r5
   311d8:	ldr	r2, [r4, #16]
   311dc:	cmp	r2, r3
   311e0:	bcs	31200 <flatcc_json_parser_struct_as_root@@Base+0x1778>
   311e4:	mov	r1, r5
   311e8:	mov	r0, r4
   311ec:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   311f0:	ldrd	r4, [sp]
   311f4:	ldr	r6, [sp, #8]
   311f8:	add	sp, sp, #12
   311fc:	pop	{pc}		; (ldr pc, [sp], #4)
   31200:	mov	r2, r5
   31204:	mov	r1, #32
   31208:	bl	1459c <memset@plt>
   3120c:	ldr	r3, [r4, #20]
   31210:	add	r5, r3, r5
   31214:	str	r5, [r4, #20]
   31218:	b	311f0 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   3121c:	strd	r4, [sp, #-12]!
   31220:	str	lr, [sp, #8]
   31224:	sub	sp, sp, #12
   31228:	mov	r5, r0
   3122c:	mov	r0, #0
   31230:	str	r0, [sp, #4]
   31234:	cmp	r1, r0
   31238:	cmpne	r2, #7
   3123c:	bls	31284 <flatcc_json_parser_struct_as_root@@Base+0x17fc>
   31240:	mov	r4, r1
   31244:	cmp	r3, #0
   31248:	beq	31270 <flatcc_json_parser_struct_as_root@@Base+0x17e8>
   3124c:	mov	r2, #4
   31250:	mov	r1, r3
   31254:	add	r0, sp, r2
   31258:	bl	145a8 <strncpy@plt>
   3125c:	ldr	r3, [sp, #4]
   31260:	ldr	r2, [r4, #4]
   31264:	cmp	r2, r3
   31268:	cmpne	r3, #0
   3126c:	bne	312b0 <flatcc_json_parser_struct_as_root@@Base+0x1828>
   31270:	mov	r0, #1
   31274:	add	sp, sp, #12
   31278:	ldrd	r4, [sp]
   3127c:	add	sp, sp, #8
   31280:	pop	{pc}		; (ldr pc, [sp], #4)
   31284:	ldr	r3, [r5, #36]	; 0x24
   31288:	cmp	r3, r0
   3128c:	moveq	r3, #1
   31290:	streq	r3, [r5, #36]	; 0x24
   31294:	ldr	r3, [pc, #64]	; 312dc <flatcc_json_parser_struct_as_root@@Base+0x1854>
   31298:	movw	r2, #1019	; 0x3fb
   3129c:	movw	r1, #13308	; 0x33fc
   312a0:	movt	r1, #4
   312a4:	movw	r0, #13384	; 0x3448
   312a8:	movt	r0, #4
   312ac:	bl	145f0 <__assert_fail@plt>
   312b0:	ldr	r3, [r5, #36]	; 0x24
   312b4:	cmp	r3, #0
   312b8:	moveq	r3, #1
   312bc:	streq	r3, [r5, #36]	; 0x24
   312c0:	ldr	r3, [pc, #20]	; 312dc <flatcc_json_parser_struct_as_root@@Base+0x1854>
   312c4:	movw	r2, #1028	; 0x404
   312c8:	movw	r1, #13308	; 0x33fc
   312cc:	movt	r1, #4
   312d0:	movw	r0, #13416	; 0x3468
   312d4:	movt	r0, #4
   312d8:	bl	145f0 <__assert_fail@plt>
   312dc:	andeq	r2, r4, ip, lsr #26
   312e0:	strd	r4, [sp, #-16]!
   312e4:	str	r6, [sp, #8]
   312e8:	str	lr, [sp, #12]
   312ec:	mov	r4, r0
   312f0:	cmp	r1, #0
   312f4:	bne	31308 <flatcc_json_parser_struct_as_root@@Base+0x1880>
   312f8:	ldr	r3, [r0, #20]
   312fc:	ldr	r5, [r0, #16]
   31300:	cmp	r3, r5
   31304:	bcs	31354 <flatcc_json_parser_struct_as_root@@Base+0x18cc>
   31308:	ldr	r0, [r4]
   3130c:	ldr	r5, [r4, #20]
   31310:	sub	r5, r5, r0
   31314:	ldr	r3, [r4, #40]	; 0x28
   31318:	mov	r2, #1
   3131c:	mov	r1, r5
   31320:	bl	14548 <fwrite@plt>
   31324:	ldr	r3, [r4]
   31328:	str	r3, [r4, #20]
   3132c:	ldr	r3, [r4, #12]
   31330:	add	r5, r3, r5
   31334:	str	r5, [r4, #12]
   31338:	ldr	r3, [r4, #20]
   3133c:	mov	r2, #0
   31340:	strb	r2, [r3]
   31344:	ldrd	r4, [sp]
   31348:	ldr	r6, [sp, #8]
   3134c:	add	sp, sp, #12
   31350:	pop	{pc}		; (ldr pc, [sp], #4)
   31354:	sub	r5, r3, r5
   31358:	ldr	r3, [r0, #40]	; 0x28
   3135c:	mov	r2, #1
   31360:	ldr	r1, [r0, #8]
   31364:	ldr	r0, [r0]
   31368:	bl	14548 <fwrite@plt>
   3136c:	ldr	r0, [r4]
   31370:	ldr	r1, [r4, #8]
   31374:	mov	r2, r5
   31378:	add	r1, r0, r1
   3137c:	bl	14524 <memcpy@plt>
   31380:	ldr	r3, [r4]
   31384:	add	r3, r3, r5
   31388:	str	r3, [r4, #20]
   3138c:	ldr	r3, [r4, #12]
   31390:	ldr	r2, [r4, #8]
   31394:	add	r3, r3, r2
   31398:	str	r3, [r4, #12]
   3139c:	b	31338 <flatcc_json_parser_struct_as_root@@Base+0x18b0>
   313a0:	strd	r4, [sp, #-16]!
   313a4:	str	r6, [sp, #8]
   313a8:	str	lr, [sp, #12]
   313ac:	ldr	r3, [r0, #20]
   313b0:	ldr	r5, [r0]
   313b4:	mov	r2, #0
   313b8:	strb	r2, [r3]
   313bc:	ldr	r1, [r0, #20]
   313c0:	ldr	r2, [r0, #16]
   313c4:	cmp	r1, r2
   313c8:	bcs	313dc <flatcc_json_parser_struct_as_root@@Base+0x1954>
   313cc:	ldrd	r4, [sp]
   313d0:	ldr	r6, [sp, #8]
   313d4:	add	sp, sp, #12
   313d8:	pop	{pc}		; (ldr pc, [sp], #4)
   313dc:	mov	r4, r0
   313e0:	sub	r5, r3, r5
   313e4:	ldr	r1, [r0, #4]
   313e8:	lsl	r1, r1, #1
   313ec:	ldr	r0, [r0]
   313f0:	bl	1453c <realloc@plt>
   313f4:	cmp	r0, #0
   313f8:	beq	31434 <flatcc_json_parser_struct_as_root@@Base+0x19ac>
   313fc:	ldr	r3, [r4, #4]
   31400:	lsl	r3, r3, #1
   31404:	str	r3, [r4, #4]
   31408:	sub	r3, r3, #64	; 0x40
   3140c:	str	r3, [r4, #8]
   31410:	str	r0, [r4]
   31414:	add	r5, r0, r5
   31418:	str	r5, [r4, #20]
   3141c:	add	r0, r0, r3
   31420:	str	r0, [r4, #16]
   31424:	ldr	r3, [r4, #20]
   31428:	mov	r2, #0
   3142c:	strb	r2, [r3]
   31430:	b	313cc <flatcc_json_parser_struct_as_root@@Base+0x1944>
   31434:	ldr	r3, [r4, #36]	; 0x24
   31438:	cmp	r3, #0
   3143c:	moveq	r3, #3
   31440:	streq	r3, [r4, #36]	; 0x24
   31444:	ldr	r3, [r4, #12]
   31448:	add	r3, r3, r5
   3144c:	str	r3, [r4, #12]
   31450:	ldr	r3, [r4]
   31454:	str	r3, [r4, #20]
   31458:	b	31424 <flatcc_json_parser_struct_as_root@@Base+0x199c>
   3145c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31460:	strd	r6, [sp, #8]
   31464:	strd	r8, [sp, #16]
   31468:	strd	sl, [sp, #24]
   3146c:	str	lr, [sp, #32]
   31470:	sub	sp, sp, #4
   31474:	mov	r6, r0
   31478:	mov	sl, r2
   3147c:	ldr	r3, [r0, #20]
   31480:	add	r2, r3, #1
   31484:	str	r2, [r0, #20]
   31488:	mov	r2, #34	; 0x22
   3148c:	strb	r2, [r3]
   31490:	mov	r7, #92	; 0x5c
   31494:	mov	r9, #102	; 0x66
   31498:	mov	r8, #117	; 0x75
   3149c:	b	3150c <flatcc_json_parser_struct_as_root@@Base+0x1a84>
   314a0:	mov	r5, r1
   314a4:	b	31560 <flatcc_json_parser_struct_as_root@@Base+0x1ad8>
   314a8:	mov	r2, fp
   314ac:	bl	14524 <memcpy@plt>
   314b0:	ldr	r3, [r6, #20]
   314b4:	add	r3, r3, fp
   314b8:	str	r3, [r6, #20]
   314bc:	b	31584 <flatcc_json_parser_struct_as_root@@Base+0x1afc>
   314c0:	cmp	r4, #34	; 0x22
   314c4:	beq	314f0 <flatcc_json_parser_struct_as_root@@Base+0x1a68>
   314c8:	cmp	r4, #92	; 0x5c
   314cc:	beq	31640 <flatcc_json_parser_struct_as_root@@Base+0x1bb8>
   314d0:	cmp	r4, #13
   314d4:	bne	315c0 <flatcc_json_parser_struct_as_root@@Base+0x1b38>
   314d8:	ldr	r3, [r6, #20]
   314dc:	add	r2, r3, #1
   314e0:	str	r2, [r6, #20]
   314e4:	mov	r2, #114	; 0x72
   314e8:	strb	r2, [r3]
   314ec:	b	31504 <flatcc_json_parser_struct_as_root@@Base+0x1a7c>
   314f0:	ldr	r3, [r6, #20]
   314f4:	add	r2, r3, #1
   314f8:	str	r2, [r6, #20]
   314fc:	mov	r2, #34	; 0x22
   31500:	strb	r2, [r3]
   31504:	sub	sl, sl, #1
   31508:	add	r1, r5, #1
   3150c:	ldrb	r4, [r1]
   31510:	cmp	r4, #34	; 0x22
   31514:	cmpne	r4, #31
   31518:	movhi	r3, #1
   3151c:	movls	r3, #0
   31520:	cmp	r4, #92	; 0x5c
   31524:	moveq	r3, #0
   31528:	andne	r3, r3, #1
   3152c:	cmp	r3, #0
   31530:	beq	314a0 <flatcc_json_parser_struct_as_root@@Base+0x1a18>
   31534:	mov	r5, r1
   31538:	ldrb	r4, [r5, #1]!
   3153c:	cmp	r4, #34	; 0x22
   31540:	cmpne	r4, #31
   31544:	movhi	r3, #1
   31548:	movls	r3, #0
   3154c:	cmp	r4, #92	; 0x5c
   31550:	moveq	r3, #0
   31554:	andne	r3, r3, #1
   31558:	cmp	r3, #0
   3155c:	bne	31538 <flatcc_json_parser_struct_as_root@@Base+0x1ab0>
   31560:	sub	fp, r5, r1
   31564:	ldr	r0, [r6, #20]
   31568:	add	r3, r0, fp
   3156c:	ldr	r2, [r6, #16]
   31570:	cmp	r2, r3
   31574:	bhi	314a8 <flatcc_json_parser_struct_as_root@@Base+0x1a20>
   31578:	mov	r2, fp
   3157c:	mov	r0, r6
   31580:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   31584:	subs	sl, sl, fp
   31588:	beq	316b0 <flatcc_json_parser_struct_as_root@@Base+0x1c28>
   3158c:	ldr	r3, [r6, #20]
   31590:	add	r2, r3, #1
   31594:	str	r2, [r6, #20]
   31598:	strb	r7, [r3]
   3159c:	cmp	r4, #12
   315a0:	beq	3166c <flatcc_json_parser_struct_as_root@@Base+0x1be4>
   315a4:	bhi	314c0 <flatcc_json_parser_struct_as_root@@Base+0x1a38>
   315a8:	cmp	r4, #9
   315ac:	beq	31654 <flatcc_json_parser_struct_as_root@@Base+0x1bcc>
   315b0:	cmp	r4, #10
   315b4:	beq	31680 <flatcc_json_parser_struct_as_root@@Base+0x1bf8>
   315b8:	cmp	r4, #8
   315bc:	beq	31698 <flatcc_json_parser_struct_as_root@@Base+0x1c10>
   315c0:	ldr	r3, [r6, #20]
   315c4:	add	r2, r3, #1
   315c8:	str	r2, [r6, #20]
   315cc:	strb	r8, [r3]
   315d0:	ldr	r3, [r6, #20]
   315d4:	add	r2, r3, #1
   315d8:	str	r2, [r6, #20]
   315dc:	mov	r2, #48	; 0x30
   315e0:	strb	r2, [r3]
   315e4:	ldr	r3, [r6, #20]
   315e8:	add	r1, r3, #1
   315ec:	str	r1, [r6, #20]
   315f0:	strb	r2, [r3]
   315f4:	lsr	r1, r4, #4
   315f8:	cmp	r1, #10
   315fc:	movcc	r3, r2
   31600:	movcs	r3, #87	; 0x57
   31604:	ldr	r2, [r6, #20]
   31608:	add	r0, r2, #1
   3160c:	str	r0, [r6, #20]
   31610:	add	r3, r3, r1
   31614:	strb	r3, [r2]
   31618:	and	r4, r4, #15
   3161c:	cmp	r4, #10
   31620:	movcc	r3, #48	; 0x30
   31624:	movcs	r3, #87	; 0x57
   31628:	ldr	r2, [r6, #20]
   3162c:	add	r1, r2, #1
   31630:	str	r1, [r6, #20]
   31634:	add	r4, r3, r4
   31638:	strb	r4, [r2]
   3163c:	b	31504 <flatcc_json_parser_struct_as_root@@Base+0x1a7c>
   31640:	ldr	r3, [r6, #20]
   31644:	add	r2, r3, #1
   31648:	str	r2, [r6, #20]
   3164c:	strb	r7, [r3]
   31650:	b	31504 <flatcc_json_parser_struct_as_root@@Base+0x1a7c>
   31654:	ldr	r3, [r6, #20]
   31658:	add	r2, r3, #1
   3165c:	str	r2, [r6, #20]
   31660:	mov	r2, #116	; 0x74
   31664:	strb	r2, [r3]
   31668:	b	31504 <flatcc_json_parser_struct_as_root@@Base+0x1a7c>
   3166c:	ldr	r3, [r6, #20]
   31670:	add	r2, r3, #1
   31674:	str	r2, [r6, #20]
   31678:	strb	r9, [r3]
   3167c:	b	31504 <flatcc_json_parser_struct_as_root@@Base+0x1a7c>
   31680:	ldr	r3, [r6, #20]
   31684:	add	r2, r3, #1
   31688:	str	r2, [r6, #20]
   3168c:	mov	r2, #110	; 0x6e
   31690:	strb	r2, [r3]
   31694:	b	31504 <flatcc_json_parser_struct_as_root@@Base+0x1a7c>
   31698:	ldr	r3, [r6, #20]
   3169c:	add	r2, r3, #1
   316a0:	str	r2, [r6, #20]
   316a4:	mov	r2, #98	; 0x62
   316a8:	strb	r2, [r3]
   316ac:	b	31504 <flatcc_json_parser_struct_as_root@@Base+0x1a7c>
   316b0:	ldr	r3, [r6, #20]
   316b4:	add	r2, r3, #1
   316b8:	str	r2, [r6, #20]
   316bc:	mov	r2, #34	; 0x22
   316c0:	strb	r2, [r3]
   316c4:	add	sp, sp, #4
   316c8:	ldrd	r4, [sp]
   316cc:	ldrd	r6, [sp, #8]
   316d0:	ldrd	r8, [sp, #16]
   316d4:	ldrd	sl, [sp, #24]
   316d8:	add	sp, sp, #32
   316dc:	pop	{pc}		; (ldr pc, [sp], #4)
   316e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   316e4:	strd	r6, [sp, #8]
   316e8:	str	r8, [sp, #16]
   316ec:	str	lr, [sp, #20]
   316f0:	mov	r4, r0
   316f4:	mov	r6, r1
   316f8:	mov	r5, r2
   316fc:	ldrb	r3, [r0, #25]
   31700:	cmp	r3, #0
   31704:	bne	317d0 <flatcc_json_parser_struct_as_root@@Base+0x1d48>
   31708:	ldr	r2, [r0, #20]
   3170c:	ldr	r3, [r0, #16]
   31710:	cmp	r2, r3
   31714:	bcc	31724 <flatcc_json_parser_struct_as_root@@Base+0x1c9c>
   31718:	ldr	r3, [r0, #44]	; 0x2c
   3171c:	mov	r1, #0
   31720:	blx	r3
   31724:	ldr	r3, [r4, #20]
   31728:	mov	r2, #34	; 0x22
   3172c:	strb	r2, [r3]
   31730:	ldrb	r3, [r4, #26]
   31734:	ldr	r0, [r4, #20]
   31738:	cmp	r3, #0
   3173c:	addeq	r0, r0, #1
   31740:	str	r0, [r4, #20]
   31744:	add	r3, r0, r5
   31748:	ldr	r2, [r4, #16]
   3174c:	cmp	r2, r3
   31750:	bls	31830 <flatcc_json_parser_struct_as_root@@Base+0x1da8>
   31754:	mov	r2, r5
   31758:	mov	r1, r6
   3175c:	bl	14524 <memcpy@plt>
   31760:	ldr	r3, [r4, #20]
   31764:	add	r5, r3, r5
   31768:	str	r5, [r4, #20]
   3176c:	ldr	r3, [r4, #20]
   31770:	mov	r2, #34	; 0x22
   31774:	strb	r2, [r3]
   31778:	ldrb	r3, [r4, #26]
   3177c:	clz	r3, r3
   31780:	lsr	r3, r3, #5
   31784:	ldr	r1, [r4, #20]
   31788:	add	r2, r1, r3
   3178c:	add	r2, r2, #1
   31790:	str	r2, [r4, #20]
   31794:	mov	r2, #58	; 0x3a
   31798:	strb	r2, [r1, r3]
   3179c:	ldr	r3, [r4, #20]
   317a0:	mov	r2, #32
   317a4:	strb	r2, [r3]
   317a8:	ldrb	r2, [r4, #25]
   317ac:	ldr	r3, [r4, #20]
   317b0:	cmp	r2, #0
   317b4:	addne	r3, r3, #1
   317b8:	str	r3, [r4, #20]
   317bc:	ldrd	r4, [sp]
   317c0:	ldrd	r6, [sp, #8]
   317c4:	ldr	r8, [sp, #16]
   317c8:	add	sp, sp, #20
   317cc:	pop	{pc}		; (ldr pc, [sp], #4)
   317d0:	ldr	r3, [r0, #20]
   317d4:	add	r2, r3, #1
   317d8:	str	r2, [r0, #20]
   317dc:	mov	r2, #10
   317e0:	strb	r2, [r3]
   317e4:	ldrb	r3, [r0, #25]
   317e8:	ldr	r7, [r0, #32]
   317ec:	mul	r7, r7, r3
   317f0:	ldr	r0, [r0, #20]
   317f4:	add	r3, r0, r7
   317f8:	ldr	r2, [r4, #16]
   317fc:	cmp	r2, r3
   31800:	bcs	31814 <flatcc_json_parser_struct_as_root@@Base+0x1d8c>
   31804:	mov	r1, r7
   31808:	mov	r0, r4
   3180c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   31810:	b	31724 <flatcc_json_parser_struct_as_root@@Base+0x1c9c>
   31814:	mov	r2, r7
   31818:	mov	r1, #32
   3181c:	bl	1459c <memset@plt>
   31820:	ldr	r3, [r4, #20]
   31824:	add	r7, r3, r7
   31828:	str	r7, [r4, #20]
   3182c:	b	31724 <flatcc_json_parser_struct_as_root@@Base+0x1c9c>
   31830:	mov	r2, r5
   31834:	mov	r1, r6
   31838:	mov	r0, r4
   3183c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   31840:	b	3176c <flatcc_json_parser_struct_as_root@@Base+0x1ce4>
   31844:	strd	r4, [sp, #-36]!	; 0xffffffdc
   31848:	strd	r6, [sp, #8]
   3184c:	strd	r8, [sp, #16]
   31850:	strd	sl, [sp, #24]
   31854:	str	lr, [sp, #32]
   31858:	sub	sp, sp, #220	; 0xdc
   3185c:	vstr	d0, [sp, #48]	; 0x30
   31860:	subs	r1, r0, #0
   31864:	str	r1, [sp, #44]	; 0x2c
   31868:	beq	31e48 <flatcc_json_parser_struct_as_root@@Base+0x23c0>
   3186c:	vmov	r4, r5, d0
   31870:	adds	r2, r4, r4
   31874:	adc	r3, r5, r5
   31878:	mov	r0, #0
   3187c:	mov	r1, #0
   31880:	movt	r1, #65504	; 0xffe0
   31884:	cmp	r3, r1
   31888:	cmpeq	r2, r0
   3188c:	bhi	31e64 <flatcc_json_parser_struct_as_root@@Base+0x23dc>
   31890:	cmp	r4, #0
   31894:	sbcs	r3, r5, #0
   31898:	blt	31e84 <flatcc_json_parser_struct_as_root@@Base+0x23fc>
   3189c:	ldr	fp, [sp, #44]	; 0x2c
   318a0:	orrs	r3, r4, r5
   318a4:	beq	31eac <flatcc_json_parser_struct_as_root@@Base+0x2424>
   318a8:	mov	r2, #0
   318ac:	mov	r3, #0
   318b0:	movt	r3, #32752	; 0x7ff0
   318b4:	cmp	r5, r3
   318b8:	cmpeq	r4, r2
   318bc:	beq	31ecc <flatcc_json_parser_struct_as_root@@Base+0x2444>
   318c0:	ldrd	r2, [sp, #48]	; 0x30
   318c4:	mov	r1, r2
   318c8:	str	r2, [sp, #96]	; 0x60
   318cc:	mov	r8, r3
   318d0:	mov	r4, #0
   318d4:	bic	r5, r3, #-2147483648	; 0x80000000
   318d8:	lsr	r5, r5, #20
   318dc:	lsl	r5, r5, #20
   318e0:	orrs	r3, r4, r5
   318e4:	bne	31efc <flatcc_json_parser_struct_as_root@@Base+0x2474>
   318e8:	mov	r6, r1
   318ec:	ubfx	r9, r8, #0, #20
   318f0:	movw	sl, #64462	; 0xfbce
   318f4:	movt	sl, #65535	; 0xffff
   318f8:	str	r6, [sp, #152]	; 0x98
   318fc:	str	r9, [sp, #156]	; 0x9c
   31900:	str	sl, [sp, #160]	; 0xa0
   31904:	ldrd	r2, [sp, #160]	; 0xa0
   31908:	strd	r2, [sp]
   3190c:	add	r3, sp, #152	; 0x98
   31910:	ldm	r3, {r2, r3}
   31914:	add	r0, sp, #168	; 0xa8
   31918:	bl	30ed8 <flatcc_json_parser_struct_as_root@@Base+0x1450>
   3191c:	ldr	r3, [sp, #168]	; 0xa8
   31920:	str	r3, [sp, #112]	; 0x70
   31924:	ldr	r3, [sp, #172]	; 0xac
   31928:	str	r3, [sp, #120]	; 0x78
   3192c:	ldr	r3, [sp, #176]	; 0xb0
   31930:	str	r3, [sp, #128]	; 0x80
   31934:	adds	r3, r6, r6
   31938:	str	r3, [sp, #136]	; 0x88
   3193c:	adc	r1, r9, r9
   31940:	str	r1, [sp, #140]	; 0x8c
   31944:	adds	r2, r3, #1
   31948:	adc	r3, r1, #0
   3194c:	str	r2, [sp, #184]	; 0xb8
   31950:	str	r3, [sp, #188]	; 0xbc
   31954:	sub	r7, sl, #1
   31958:	str	r7, [sp, #192]	; 0xc0
   3195c:	ldrd	r2, [sp, #192]	; 0xc0
   31960:	strd	r2, [sp]
   31964:	add	r3, sp, #184	; 0xb8
   31968:	ldm	r3, {r2, r3}
   3196c:	add	r0, sp, #200	; 0xc8
   31970:	bl	30ed8 <flatcc_json_parser_struct_as_root@@Base+0x1450>
   31974:	ldr	r3, [sp, #208]	; 0xd0
   31978:	str	r3, [sp, #132]	; 0x84
   3197c:	vldr	d7, [sp, #48]	; 0x30
   31980:	vcmpe.f64	d7, #0.0
   31984:	vmrs	APSR_nzcv, fpscr
   31988:	ble	31f1c <flatcc_json_parser_struct_as_root@@Base+0x2494>
   3198c:	vldr	d7, [pc, #916]	; 31d28 <flatcc_json_parser_struct_as_root@@Base+0x22a0>
   31990:	vldr	d6, [sp, #48]	; 0x30
   31994:	vcmpe.f64	d6, d7
   31998:	vmrs	APSR_nzcv, fpscr
   3199c:	bhi	31f1c <flatcc_json_parser_struct_as_root@@Base+0x2494>
   319a0:	ubfx	r8, r8, #0, #20
   319a4:	ldr	r3, [sp, #96]	; 0x60
   319a8:	orrs	r3, r3, r8
   319ac:	moveq	r3, #1
   319b0:	movne	r3, #0
   319b4:	orrs	r2, r4, r5
   319b8:	moveq	r3, #0
   319bc:	cmp	r3, #0
   319c0:	bne	31f38 <flatcc_json_parser_struct_as_root@@Base+0x24b0>
   319c4:	ldr	r3, [sp, #136]	; 0x88
   319c8:	subs	r0, r3, #1
   319cc:	ldr	r3, [sp, #140]	; 0x8c
   319d0:	sbc	r4, r3, #0
   319d4:	ldr	r3, [sp, #132]	; 0x84
   319d8:	sub	r7, r7, r3
   319dc:	sub	r2, r7, #32
   319e0:	rsb	r3, r7, #32
   319e4:	lsl	r4, r4, r7
   319e8:	orr	r4, r4, r0, lsl r2
   319ec:	orr	r4, r4, r0, lsr r3
   319f0:	lsl	r0, r0, r7
   319f4:	ldr	r3, [sp, #128]	; 0x80
   319f8:	rsb	r3, r3, #-16777216	; 0xff000000
   319fc:	add	r3, r3, #16711680	; 0xff0000
   31a00:	add	r3, r3, #65280	; 0xff00
   31a04:	add	r3, r3, #195	; 0xc3
   31a08:	vmov	s12, r3
   31a0c:	vcvt.f64.s32	d6, s12
   31a10:	vldr	d7, [pc, #792]	; 31d30 <flatcc_json_parser_struct_as_root@@Base+0x22a8>
   31a14:	vmul.f64	d6, d6, d7
   31a18:	vcvt.s32.f64	s15, d6
   31a1c:	vcmpe.f64	d6, #0.0
   31a20:	vmrs	APSR_nzcv, fpscr
   31a24:	bmi	31a48 <flatcc_json_parser_struct_as_root@@Base+0x1fc0>
   31a28:	vcvt.f64.s32	d5, s15
   31a2c:	vsub.f64	d6, d6, d5
   31a30:	vcmp.f64	d6, #0.0
   31a34:	vmrs	APSR_nzcv, fpscr
   31a38:	beq	31a48 <flatcc_json_parser_struct_as_root@@Base+0x1fc0>
   31a3c:	vmov	r3, s15
   31a40:	add	r3, r3, #1
   31a44:	vmov	s15, r3
   31a48:	vmov	r3, s15
   31a4c:	add	r3, r3, #344	; 0x158
   31a50:	add	r2, r3, #10
   31a54:	add	r3, r3, #3
   31a58:	cmp	r3, #0
   31a5c:	movlt	r3, r2
   31a60:	asr	r3, r3, #3
   31a64:	add	r3, r3, #1
   31a68:	ldr	r1, [pc, #712]	; 31d38 <flatcc_json_parser_struct_as_root@@Base+0x22b0>
   31a6c:	add	r2, r1, r3, lsl #4
   31a70:	ldr	lr, [r1, r3, lsl #4]
   31a74:	ldr	ip, [r2, #4]
   31a78:	ldrsh	r3, [r2, #10]
   31a7c:	str	r3, [sp, #136]	; 0x88
   31a80:	mov	r3, #0
   31a84:	ldr	r1, [sp, #112]	; 0x70
   31a88:	umull	r8, r9, r1, ip
   31a8c:	ldr	sl, [sp, #120]	; 0x78
   31a90:	umull	r6, r7, sl, lr
   31a94:	strd	r6, [sp, #96]	; 0x60
   31a98:	umull	r6, r7, r1, lr
   31a9c:	mov	r1, r7
   31aa0:	ldr	r6, [sp, #96]	; 0x60
   31aa4:	adds	r1, r1, r6
   31aa8:	adc	r5, r3, r3
   31aac:	adds	r1, r1, #-2147483648	; 0x80000000
   31ab0:	adc	r5, r5, r3
   31ab4:	strd	r8, [sp, #112]	; 0x70
   31ab8:	adds	r1, r1, r8
   31abc:	adc	r5, r5, r3
   31ac0:	mov	r1, r5
   31ac4:	ldr	r5, [sp, #100]	; 0x64
   31ac8:	ldr	r6, [sp, #116]	; 0x74
   31acc:	adds	r5, r5, r6
   31ad0:	str	r5, [sp, #104]	; 0x68
   31ad4:	adc	r5, r3, r3
   31ad8:	str	r5, [sp, #108]	; 0x6c
   31adc:	ldrd	r6, [sp, #104]	; 0x68
   31ae0:	umlal	r6, r7, ip, sl
   31ae4:	adds	r1, r1, r6
   31ae8:	str	r1, [sp, #80]	; 0x50
   31aec:	adc	r1, r3, r7
   31af0:	str	r1, [sp, #84]	; 0x54
   31af4:	ldrsh	r2, [r2, #8]
   31af8:	ldr	r1, [sp, #128]	; 0x80
   31afc:	add	r2, r2, r1
   31b00:	umull	r6, r7, r0, ip
   31b04:	strd	r6, [sp, #104]	; 0x68
   31b08:	umull	r8, r9, r4, lr
   31b0c:	strd	r8, [sp, #112]	; 0x70
   31b10:	ldr	r7, [sp, #200]	; 0xc8
   31b14:	ldr	r6, [sp, #204]	; 0xcc
   31b18:	umull	r8, r9, r7, ip
   31b1c:	strd	r8, [sp, #120]	; 0x78
   31b20:	umull	r8, r9, r6, lr
   31b24:	strd	r8, [sp, #96]	; 0x60
   31b28:	umull	r0, r1, r0, lr
   31b2c:	mov	r9, r1
   31b30:	ldr	r1, [sp, #112]	; 0x70
   31b34:	adds	r0, r9, r1
   31b38:	adc	r5, r3, r3
   31b3c:	adds	r0, r0, #-2147483648	; 0x80000000
   31b40:	adc	r5, r5, r3
   31b44:	ldr	r1, [sp, #104]	; 0x68
   31b48:	adds	r0, r0, r1
   31b4c:	adc	r5, r5, r3
   31b50:	mov	r0, r5
   31b54:	umull	r4, r5, r4, ip
   31b58:	subs	r9, r4, #1
   31b5c:	sbc	r5, r5, #0
   31b60:	ldr	r1, [sp, #116]	; 0x74
   31b64:	adds	r1, r9, r1
   31b68:	adc	r4, r5, r3
   31b6c:	ldr	sl, [sp, #108]	; 0x6c
   31b70:	adds	r1, r1, sl
   31b74:	adc	r4, r4, r3
   31b78:	adds	r1, r0, r1
   31b7c:	str	r1, [sp, #64]	; 0x40
   31b80:	adc	r1, r3, r4
   31b84:	str	r1, [sp, #68]	; 0x44
   31b88:	umull	r0, r1, r7, lr
   31b8c:	mov	lr, r1
   31b90:	ldr	r1, [sp, #96]	; 0x60
   31b94:	adds	r1, lr, r1
   31b98:	adc	r0, r3, r3
   31b9c:	adds	r1, r1, #-2147483648	; 0x80000000
   31ba0:	adc	r0, r0, r3
   31ba4:	ldrd	r8, [sp, #120]	; 0x78
   31ba8:	adds	r1, r1, r8
   31bac:	adc	r4, r0, r3
   31bb0:	mov	r1, r4
   31bb4:	mov	r0, r3
   31bb8:	umull	r6, r7, r6, ip
   31bbc:	adds	ip, r6, #1
   31bc0:	adc	lr, r7, r3
   31bc4:	ldr	r5, [sp, #100]	; 0x64
   31bc8:	adds	ip, ip, r5
   31bcc:	adc	lr, lr, r3
   31bd0:	adds	ip, ip, r9
   31bd4:	adc	lr, lr, r3
   31bd8:	adds	r3, r1, ip
   31bdc:	str	r3, [sp, #72]	; 0x48
   31be0:	adc	r3, r0, lr
   31be4:	str	r3, [sp, #76]	; 0x4c
   31be8:	ldrd	r4, [sp, #72]	; 0x48
   31bec:	ldrd	r0, [sp, #64]	; 0x40
   31bf0:	subs	r3, r4, r0
   31bf4:	str	r3, [sp, #56]	; 0x38
   31bf8:	sbc	r3, r5, r1
   31bfc:	str	r3, [sp, #60]	; 0x3c
   31c00:	cmp	r1, r5
   31c04:	cmpeq	r0, r4
   31c08:	bhi	31f54 <flatcc_json_parser_struct_as_root@@Base+0x24cc>
   31c0c:	movw	r6, #65472	; 0xffc0
   31c10:	movt	r6, #65535	; 0xffff
   31c14:	sub	r6, r6, r2
   31c18:	mov	r3, #1
   31c1c:	sub	r1, r6, #32
   31c20:	rsb	r0, r6, #32
   31c24:	lsl	ip, r3, r1
   31c28:	orr	ip, ip, r3, lsr r0
   31c2c:	str	ip, [sp, #148]	; 0x94
   31c30:	lsl	lr, r3, r6
   31c34:	str	lr, [sp, #144]	; 0x90
   31c38:	ldrd	r4, [sp, #72]	; 0x48
   31c3c:	lsr	r3, r4, r6
   31c40:	orr	r3, r3, r5, lsl r0
   31c44:	orr	r3, r3, r5, lsr r1
   31c48:	subs	r1, lr, #1
   31c4c:	str	r1, [sp, #104]	; 0x68
   31c50:	sbc	r0, ip, #0
   31c54:	str	r0, [sp, #112]	; 0x70
   31c58:	and	r8, r4, r1
   31c5c:	and	r9, r5, r0
   31c60:	add	r2, r2, #129	; 0x81
   31c64:	movw	r1, #1233	; 0x4d1
   31c68:	mul	r2, r1, r2
   31c6c:	asr	r2, r2, #12
   31c70:	add	r4, r2, #1
   31c74:	movw	r1, #11320	; 0x2c38
   31c78:	movt	r1, #4
   31c7c:	add	r1, r1, r4, lsl #2
   31c80:	ldr	r1, [r1, #1700]	; 0x6a4
   31c84:	cmp	r3, r1
   31c88:	movcc	r4, r2
   31c8c:	movw	r2, #11320	; 0x2c38
   31c90:	movt	r2, #4
   31c94:	add	r2, r2, r4, lsl #2
   31c98:	ldr	r1, [r2, #1700]	; 0x6a4
   31c9c:	str	r1, [sp, #64]	; 0x40
   31ca0:	cmp	r4, #0
   31ca4:	ble	3219c <flatcc_json_parser_struct_as_root@@Base+0x2714>
   31ca8:	udiv	r2, r3, r1
   31cac:	add	r0, r2, #48	; 0x30
   31cb0:	strb	r0, [fp]
   31cb4:	mls	r3, r1, r2, r3
   31cb8:	str	r3, [sp, #96]	; 0x60
   31cbc:	sub	r4, r4, #1
   31cc0:	sub	lr, r6, #32
   31cc4:	rsb	ip, r6, #32
   31cc8:	lsl	r2, r3, lr
   31ccc:	orr	r2, r2, r3, lsr ip
   31cd0:	lsl	r0, r3, r6
   31cd4:	adds	r3, r0, r8
   31cd8:	str	r3, [sp, #88]	; 0x58
   31cdc:	adc	r3, r2, r9
   31ce0:	str	r3, [sp, #92]	; 0x5c
   31ce4:	ldrd	r2, [sp, #88]	; 0x58
   31ce8:	ldrd	r0, [sp, #56]	; 0x38
   31cec:	cmp	r3, r1
   31cf0:	cmpeq	r2, r0
   31cf4:	bcc	31f70 <flatcc_json_parser_struct_as_root@@Base+0x24e8>
   31cf8:	mov	r5, #1
   31cfc:	movw	lr, #52429	; 0xcccd
   31d00:	movt	lr, #52428	; 0xcccc
   31d04:	sub	sl, r6, #32
   31d08:	rsb	r7, r6, #32
   31d0c:	str	fp, [sp, #140]	; 0x8c
   31d10:	ldr	r1, [sp, #64]	; 0x40
   31d14:	ldr	r3, [sp, #96]	; 0x60
   31d18:	strd	r8, [sp, #96]	; 0x60
   31d1c:	str	fp, [sp, #64]	; 0x40
   31d20:	str	sl, [sp, #120]	; 0x78
   31d24:	b	31d48 <flatcc_json_parser_struct_as_root@@Base+0x22c0>
   31d28:			; <UNDEFINED> instruction: 0xffffffff
   31d2c:	svcvc	0x00efffff
   31d30:			; <UNDEFINED> instruction: 0x509f79fe
   31d34:	svccc	0x00d34413
   31d38:	andeq	r2, r4, r8, asr sp
   31d3c:	andeq	r2, r4, ip, lsr sp
   31d40:	andeq	r2, r4, r0, asr sp
   31d44:	andeq	r3, r4, r8, asr #5
   31d48:	umull	r2, r1, lr, r1
   31d4c:	lsr	r1, r1, #3
   31d50:	cmp	r4, #0
   31d54:	beq	31f94 <flatcc_json_parser_struct_as_root@@Base+0x250c>
   31d58:	udiv	r2, r3, r1
   31d5c:	add	r0, r2, #48	; 0x30
   31d60:	ldr	ip, [sp, #64]	; 0x40
   31d64:	strb	r0, [ip, #1]!
   31d68:	str	ip, [sp, #64]	; 0x40
   31d6c:	add	r5, r5, #1
   31d70:	mls	r3, r1, r2, r3
   31d74:	sub	r4, r4, #1
   31d78:	ldr	r2, [sp, #120]	; 0x78
   31d7c:	lsl	r2, r3, r2
   31d80:	orr	r2, r2, r3, lsr r7
   31d84:	lsl	r0, r3, r6
   31d88:	ldrd	r8, [sp, #96]	; 0x60
   31d8c:	adds	sl, r0, r8
   31d90:	mov	r0, r9
   31d94:	adc	fp, r2, r9
   31d98:	ldrd	r8, [sp, #56]	; 0x38
   31d9c:	cmp	fp, r9
   31da0:	cmpeq	sl, r8
   31da4:	bcs	31d48 <flatcc_json_parser_struct_as_root@@Base+0x22c0>
   31da8:	str	r1, [sp, #64]	; 0x40
   31dac:	strd	sl, [sp, #88]	; 0x58
   31db0:	ldr	fp, [sp, #140]	; 0x8c
   31db4:	ldrd	r8, [sp, #72]	; 0x48
   31db8:	ldr	r1, [sp, #80]	; 0x50
   31dbc:	subs	lr, r8, r1
   31dc0:	ldr	r1, [sp, #84]	; 0x54
   31dc4:	sbc	r1, r9, r1
   31dc8:	ldrd	r2, [sp, #80]	; 0x50
   31dcc:	cmp	r9, r3
   31dd0:	cmpeq	r8, r2
   31dd4:	movcc	r0, #1
   31dd8:	movcs	r0, #0
   31ddc:	ldr	r3, [sp, #132]	; 0x84
   31de0:	ldr	r2, [sp, #128]	; 0x80
   31de4:	cmp	r3, r2
   31de8:	orrne	r0, r0, #1
   31dec:	cmp	r0, #0
   31df0:	bne	31f78 <flatcc_json_parser_struct_as_root@@Base+0x24f0>
   31df4:	mov	r8, #1
   31df8:	mov	r9, #0
   31dfc:	strd	r8, [sp, #24]
   31e00:	sub	r0, r6, #32
   31e04:	rsb	ip, r6, #32
   31e08:	ldr	r3, [sp, #64]	; 0x40
   31e0c:	lsl	r0, r3, r0
   31e10:	orr	r0, r0, r3, lsr ip
   31e14:	lsl	r6, r3, r6
   31e18:	str	r6, [sp, #16]
   31e1c:	str	r0, [sp, #20]
   31e20:	ldrd	r2, [sp, #88]	; 0x58
   31e24:	strd	r2, [sp, #8]
   31e28:	ldrd	r2, [sp, #56]	; 0x38
   31e2c:	strd	r2, [sp]
   31e30:	mov	r2, lr
   31e34:	mov	r3, r1
   31e38:	mov	r1, r5
   31e3c:	mov	r0, fp
   31e40:	bl	308f4 <flatcc_json_parser_struct_as_root@@Base+0xe6c>
   31e44:	b	32100 <flatcc_json_parser_struct_as_root@@Base+0x2678>
   31e48:	ldr	r3, [pc, #-276]	; 31d3c <flatcc_json_parser_struct_as_root@@Base+0x22b4>
   31e4c:	mov	r2, #189	; 0xbd
   31e50:	movw	r1, #13444	; 0x3484
   31e54:	movt	r1, #4
   31e58:	movw	r0, #13532	; 0x34dc
   31e5c:	movt	r0, #4
   31e60:	bl	145f0 <__assert_fail@plt>
   31e64:	vmov	r3, s0
   31e68:	mov	r2, r5
   31e6c:	movw	r1, #13536	; 0x34e0
   31e70:	movt	r1, #4
   31e74:	ldr	r0, [sp, #44]	; 0x2c
   31e78:	bl	145d8 <sprintf@plt>
   31e7c:	mov	r0, #21
   31e80:	b	32180 <flatcc_json_parser_struct_as_root@@Base+0x26f8>
   31e84:	ldr	fp, [sp, #44]	; 0x2c
   31e88:	mov	r3, #45	; 0x2d
   31e8c:	strb	r3, [fp], #1
   31e90:	vldr	d7, [sp, #48]	; 0x30
   31e94:	vneg.f64	d7, d7
   31e98:	vstr	d7, [sp, #48]	; 0x30
   31e9c:	add	r3, r5, #-2147483648	; 0x80000000
   31ea0:	vmov	r4, s0
   31ea4:	mov	r5, r3
   31ea8:	b	318a0 <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   31eac:	mov	r3, #48	; 0x30
   31eb0:	strb	r3, [fp]
   31eb4:	mov	r0, fp
   31eb8:	mov	r3, #0
   31ebc:	strb	r3, [r0, #1]!
   31ec0:	ldr	r3, [sp, #44]	; 0x2c
   31ec4:	sub	r0, r0, r3
   31ec8:	b	32180 <flatcc_json_parser_struct_as_root@@Base+0x26f8>
   31ecc:	mov	r3, #105	; 0x69
   31ed0:	strb	r3, [fp]
   31ed4:	mov	r3, #110	; 0x6e
   31ed8:	strb	r3, [fp, #1]
   31edc:	mov	r3, #102	; 0x66
   31ee0:	strb	r3, [fp, #2]
   31ee4:	mov	r0, fp
   31ee8:	mov	r3, #0
   31eec:	strb	r3, [r0, #3]!
   31ef0:	ldr	r3, [sp, #44]	; 0x2c
   31ef4:	sub	r0, r0, r3
   31ef8:	b	32180 <flatcc_json_parser_struct_as_root@@Base+0x26f8>
   31efc:	ldr	r6, [sp, #96]	; 0x60
   31f00:	ubfx	r9, r8, #0, #20
   31f04:	adds	r6, r6, #0
   31f08:	adc	r9, r9, #1048576	; 0x100000
   31f0c:	ubfx	sl, r8, #20, #11
   31f10:	sub	sl, sl, #1072	; 0x430
   31f14:	sub	sl, sl, #3
   31f18:	b	318f8 <flatcc_json_parser_struct_as_root@@Base+0x1e70>
   31f1c:	ldr	r3, [pc, #-484]	; 31d40 <flatcc_json_parser_struct_as_root@@Base+0x22b8>
   31f20:	mov	r2, #138	; 0x8a
   31f24:	movw	r1, #13444	; 0x3484
   31f28:	movt	r1, #4
   31f2c:	movw	r0, #13552	; 0x34f0
   31f30:	movt	r0, #4
   31f34:	bl	145f0 <__assert_fail@plt>
   31f38:	lsl	r4, r9, #2
   31f3c:	orr	r4, r4, r6, lsr #30
   31f40:	lsl	r0, r6, #2
   31f44:	subs	r0, r0, #1
   31f48:	sbc	r4, r4, #0
   31f4c:	sub	r7, sl, #2
   31f50:	b	319d4 <flatcc_json_parser_struct_as_root@@Base+0x1f4c>
   31f54:	ldr	r3, [pc, #-536]	; 31d44 <flatcc_json_parser_struct_as_root@@Base+0x22bc>
   31f58:	mov	r2, #239	; 0xef
   31f5c:	movw	r1, #10248	; 0x2808
   31f60:	movt	r1, #4
   31f64:	movw	r0, #13592	; 0x3518
   31f68:	movt	r0, #4
   31f6c:	bl	145f0 <__assert_fail@plt>
   31f70:	mov	r5, #1
   31f74:	b	31db4 <flatcc_json_parser_struct_as_root@@Base+0x232c>
   31f78:	ldr	r3, [pc, #-572]	; 31d44 <flatcc_json_parser_struct_as_root@@Base+0x22bc>
   31f7c:	mov	r2, #239	; 0xef
   31f80:	movw	r1, #10248	; 0x2808
   31f84:	movt	r1, #4
   31f88:	movw	r0, #13592	; 0x3518
   31f8c:	movt	r0, #4
   31f90:	bl	145f0 <__assert_fail@plt>
   31f94:	ldr	fp, [sp, #140]	; 0x8c
   31f98:	ldrd	r8, [sp, #96]	; 0x60
   31f9c:	sub	r7, r5, #1
   31fa0:	add	r7, fp, r7
   31fa4:	mov	r3, #1
   31fa8:	mov	ip, #0
   31fac:	rsb	r2, r6, #32
   31fb0:	str	r2, [sp, #64]	; 0x40
   31fb4:	sub	r2, r6, #32
   31fb8:	str	r2, [sp, #88]	; 0x58
   31fbc:	add	lr, r4, r5
   31fc0:	str	fp, [sp, #96]	; 0x60
   31fc4:	ldrd	sl, [sp, #56]	; 0x38
   31fc8:	str	lr, [sp, #56]	; 0x38
   31fcc:	lsl	r1, r9, #2
   31fd0:	lsl	r2, r8, #2
   31fd4:	orr	r0, r1, r8, lsr #30
   31fd8:	adds	r2, r2, r8
   31fdc:	adc	r0, r0, r9
   31fe0:	adds	r2, r2, r2
   31fe4:	adc	r0, r0, r0
   31fe8:	lsl	lr, ip, #2
   31fec:	lsl	r1, r3, #2
   31ff0:	orr	r4, lr, r3, lsr #30
   31ff4:	adds	r3, r1, r3
   31ff8:	adc	ip, r4, ip
   31ffc:	adds	r3, r3, r3
   32000:	adc	ip, ip, ip
   32004:	lsl	lr, fp, #2
   32008:	lsl	r1, sl, #2
   3200c:	orr	r4, lr, sl, lsr #30
   32010:	adds	r1, r1, sl
   32014:	adc	r4, r4, fp
   32018:	adds	r1, r1, r1
   3201c:	str	r1, [sp, #32]
   32020:	adc	r1, r4, r4
   32024:	str	r1, [sp, #36]	; 0x24
   32028:	ldrd	sl, [sp, #32]
   3202c:	lsr	r1, r2, r6
   32030:	ldr	lr, [sp, #64]	; 0x40
   32034:	orr	r1, r1, r0, lsl lr
   32038:	ldr	lr, [sp, #88]	; 0x58
   3203c:	orr	r1, r1, r0, lsr lr
   32040:	add	r1, r1, #48	; 0x30
   32044:	strb	r1, [r7, #1]!
   32048:	add	r5, r5, #1
   3204c:	ldr	r1, [sp, #104]	; 0x68
   32050:	and	r8, r1, r2
   32054:	ldr	r2, [sp, #112]	; 0x70
   32058:	and	r9, r2, r0
   3205c:	ldr	r2, [sp, #56]	; 0x38
   32060:	sub	r4, r2, r5
   32064:	cmp	fp, r9
   32068:	cmpeq	sl, r8
   3206c:	bls	31fcc <flatcc_json_parser_struct_as_root@@Base+0x2544>
   32070:	strd	sl, [sp, #56]	; 0x38
   32074:	ldr	fp, [sp, #96]	; 0x60
   32078:	ldrd	r6, [sp, #72]	; 0x48
   3207c:	ldr	r1, [sp, #80]	; 0x50
   32080:	subs	sl, r6, r1
   32084:	ldr	r1, [sp, #84]	; 0x54
   32088:	sbc	lr, r7, r1
   3208c:	ldrd	r0, [sp, #80]	; 0x50
   32090:	cmp	r7, r1
   32094:	cmpeq	r6, r0
   32098:	movcc	r1, #1
   3209c:	movcs	r1, #0
   320a0:	ldr	r2, [sp, #132]	; 0x84
   320a4:	ldr	r0, [sp, #128]	; 0x80
   320a8:	cmp	r2, r0
   320ac:	orrne	r1, r1, #1
   320b0:	cmp	r1, #0
   320b4:	bne	321a4 <flatcc_json_parser_struct_as_root@@Base+0x271c>
   320b8:	mul	lr, r3, lr
   320bc:	mla	lr, sl, ip, lr
   320c0:	umull	r0, r1, r3, sl
   320c4:	add	r1, lr, r1
   320c8:	str	r3, [sp, #24]
   320cc:	str	ip, [sp, #28]
   320d0:	ldr	r3, [sp, #144]	; 0x90
   320d4:	str	r3, [sp, #16]
   320d8:	ldr	r3, [sp, #148]	; 0x94
   320dc:	str	r3, [sp, #20]
   320e0:	strd	r8, [sp, #8]
   320e4:	ldrd	r2, [sp, #56]	; 0x38
   320e8:	strd	r2, [sp]
   320ec:	mov	r2, r0
   320f0:	mov	r3, r1
   320f4:	mov	r1, r5
   320f8:	mov	r0, fp
   320fc:	bl	308f4 <flatcc_json_parser_struct_as_root@@Base+0xe6c>
   32100:	ldr	r3, [sp, #136]	; 0x88
   32104:	sub	r6, r4, r3
   32108:	cmp	r0, #0
   3210c:	beq	321c0 <flatcc_json_parser_struct_as_root@@Base+0x2738>
   32110:	cmp	r5, #2
   32114:	movge	r0, r5
   32118:	movlt	r0, #2
   3211c:	ldr	r3, [sp, #136]	; 0x88
   32120:	sub	r4, r3, r4
   32124:	cmp	r0, r4
   32128:	suble	r0, r0, #1
   3212c:	movgt	r0, r4
   32130:	cmp	r6, #0
   32134:	blt	321e4 <flatcc_json_parser_struct_as_root@@Base+0x275c>
   32138:	cmp	r6, #2
   3213c:	bhi	322b8 <flatcc_json_parser_struct_as_root@@Base+0x2830>
   32140:	cmp	r6, #0
   32144:	ble	3216c <flatcc_json_parser_struct_as_root@@Base+0x26e4>
   32148:	sub	r1, r6, #1
   3214c:	add	r3, fp, r5
   32150:	add	r6, r3, r6
   32154:	mov	r2, #48	; 0x30
   32158:	strb	r2, [r3], #1
   3215c:	cmp	r3, r6
   32160:	bne	32158 <flatcc_json_parser_struct_as_root@@Base+0x26d0>
   32164:	add	r5, r5, #1
   32168:	add	r5, r5, r1
   3216c:	add	r0, fp, r5
   32170:	mov	r3, #0
   32174:	strb	r3, [fp, r5]
   32178:	ldr	r3, [sp, #44]	; 0x2c
   3217c:	sub	r0, r0, r3
   32180:	add	sp, sp, #220	; 0xdc
   32184:	ldrd	r4, [sp]
   32188:	ldrd	r6, [sp, #8]
   3218c:	ldrd	r8, [sp, #16]
   32190:	ldrd	sl, [sp, #24]
   32194:	add	sp, sp, #32
   32198:	pop	{pc}		; (ldr pc, [sp], #4)
   3219c:	mov	r5, #0
   321a0:	b	31f9c <flatcc_json_parser_struct_as_root@@Base+0x2514>
   321a4:	ldr	r3, [pc, #-1128]	; 31d44 <flatcc_json_parser_struct_as_root@@Base+0x22bc>
   321a8:	mov	r2, #239	; 0xef
   321ac:	movw	r1, #10248	; 0x2808
   321b0:	movt	r1, #4
   321b4:	movw	r0, #13592	; 0x3518
   321b8:	movt	r0, #4
   321bc:	bl	145f0 <__assert_fail@plt>
   321c0:	ldrd	r2, [sp, #48]	; 0x30
   321c4:	movw	r1, #13620	; 0x3534
   321c8:	movt	r1, #4
   321cc:	mov	r0, fp
   321d0:	bl	145d8 <sprintf@plt>
   321d4:	ldr	r3, [sp, #44]	; 0x2c
   321d8:	sub	r3, fp, r3
   321dc:	add	r0, r3, r0
   321e0:	b	32180 <flatcc_json_parser_struct_as_root@@Base+0x26f8>
   321e4:	add	r3, r6, r5
   321e8:	cmp	r4, r5
   321ec:	cmnge	r3, #2
   321f0:	bge	32254 <flatcc_json_parser_struct_as_root@@Base+0x27cc>
   321f4:	cmp	r5, #1
   321f8:	ble	322b8 <flatcc_json_parser_struct_as_root@@Base+0x2830>
   321fc:	cmp	r0, #0
   32200:	ble	3221c <flatcc_json_parser_struct_as_root@@Base+0x2794>
   32204:	add	r3, fp, r5
   32208:	sub	r1, r3, r0
   3220c:	ldrb	r2, [r3, #-1]
   32210:	strb	r2, [r3], #-1
   32214:	cmp	r1, r3
   32218:	bne	3220c <flatcc_json_parser_struct_as_root@@Base+0x2784>
   3221c:	add	r3, r5, #1
   32220:	sub	r2, r5, r0
   32224:	mov	r1, #46	; 0x2e
   32228:	strb	r1, [fp, r2]
   3222c:	adds	r0, r0, r6
   32230:	moveq	r5, r3
   32234:	beq	3216c <flatcc_json_parser_struct_as_root@@Base+0x26e4>
   32238:	add	r5, r5, #2
   3223c:	mov	r2, #101	; 0x65
   32240:	strb	r2, [fp, r3]
   32244:	add	r1, fp, r5
   32248:	bl	30b98 <flatcc_json_parser_struct_as_root@@Base+0x1110>
   3224c:	add	r5, r5, r0
   32250:	b	3216c <flatcc_json_parser_struct_as_root@@Base+0x26e4>
   32254:	rsb	r0, r5, #2
   32258:	sub	r0, r0, r6
   3225c:	mov	r2, r5
   32260:	mov	r1, fp
   32264:	add	r0, fp, r0
   32268:	bl	1450c <memmove@plt>
   3226c:	mov	r3, #48	; 0x30
   32270:	strb	r3, [fp]
   32274:	mov	r3, #46	; 0x2e
   32278:	strb	r3, [fp, #1]
   3227c:	rsb	r6, r6, #2
   32280:	sub	r6, r6, r5
   32284:	cmp	r6, #2
   32288:	ble	322b0 <flatcc_json_parser_struct_as_root@@Base+0x2828>
   3228c:	add	r3, fp, #1
   32290:	sub	r2, fp, #1
   32294:	add	r2, r2, r6
   32298:	mov	r1, #48	; 0x30
   3229c:	strb	r1, [r3, #1]!
   322a0:	cmp	r3, r2
   322a4:	bne	3229c <flatcc_json_parser_struct_as_root@@Base+0x2814>
   322a8:	add	r5, r5, r6
   322ac:	b	3216c <flatcc_json_parser_struct_as_root@@Base+0x26e4>
   322b0:	mov	r6, #2
   322b4:	b	322a8 <flatcc_json_parser_struct_as_root@@Base+0x2820>
   322b8:	add	r4, r5, #1
   322bc:	mov	r3, #101	; 0x65
   322c0:	strb	r3, [fp, r5]
   322c4:	add	r1, fp, r4
   322c8:	mov	r0, r6
   322cc:	bl	30b98 <flatcc_json_parser_struct_as_root@@Base+0x1110>
   322d0:	add	r5, r4, r0
   322d4:	b	3216c <flatcc_json_parser_struct_as_root@@Base+0x26e4>

000322d8 <flatcc_json_printer_error_string@@Base>:
   322d8:	cmp	r0, #3
   322dc:	ldrls	pc, [pc, r0, lsl #2]
   322e0:	b	32318 <flatcc_json_printer_error_string@@Base+0x40>
   322e4:	andeq	r2, r3, r4, lsr #6
   322e8:	strdeq	r2, [r3], -r4
   322ec:	andeq	r2, r3, r0, lsl #6
   322f0:	andeq	r2, r3, ip, lsl #6
   322f4:	movw	r0, #13644	; 0x354c
   322f8:	movt	r0, #4
   322fc:	bx	lr
   32300:	movw	r0, #13628	; 0x353c
   32304:	movt	r0, #4
   32308:	bx	lr
   3230c:	movw	r0, #7848	; 0x1ea8
   32310:	movt	r0, #4
   32314:	bx	lr
   32318:	movw	r0, #6904	; 0x1af8
   3231c:	movt	r0, #4
   32320:	bx	lr
   32324:	movw	r0, #6912	; 0x1b00
   32328:	movt	r0, #4
   3232c:	bx	lr

00032330 <flatcc_json_printer_fmt_float@@Base>:
   32330:	str	r4, [sp, #-8]!
   32334:	str	lr, [sp, #4]
   32338:	vcvt.f64.f32	d0, s0
   3233c:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   32340:	ldr	r4, [sp]
   32344:	add	sp, sp, #4
   32348:	pop	{pc}		; (ldr pc, [sp], #4)

0003234c <flatcc_json_printer_fmt_double@@Base>:
   3234c:	str	r4, [sp, #-8]!
   32350:	str	lr, [sp, #4]
   32354:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   32358:	ldr	r4, [sp]
   3235c:	add	sp, sp, #4
   32360:	pop	{pc}		; (ldr pc, [sp], #4)

00032364 <flatcc_json_printer_fmt_bool@@Base>:
   32364:	cmp	r1, #0
   32368:	bne	3238c <flatcc_json_printer_fmt_bool@@Base+0x28>
   3236c:	movw	r3, #58144	; 0xe320
   32370:	movt	r3, #3
   32374:	ldr	r2, [r3]
   32378:	str	r2, [r0]
   3237c:	ldrb	r3, [r3, #4]
   32380:	strb	r3, [r0, #4]
   32384:	mov	r0, #5
   32388:	bx	lr
   3238c:	movw	r3, #58136	; 0xe318
   32390:	movt	r3, #3
   32394:	ldr	r3, [r3]
   32398:	str	r3, [r0]
   3239c:	mov	r0, #4
   323a0:	bx	lr

000323a4 <flatcc_json_printer_string@@Base>:
   323a4:	str	r4, [sp, #-8]!
   323a8:	str	lr, [sp, #4]
   323ac:	bl	3145c <flatcc_json_parser_struct_as_root@@Base+0x19d4>
   323b0:	ldr	r4, [sp]
   323b4:	add	sp, sp, #4
   323b8:	pop	{pc}		; (ldr pc, [sp], #4)

000323bc <flatcc_json_printer_write@@Base>:
   323bc:	strd	r4, [sp, #-16]!
   323c0:	str	r6, [sp, #8]
   323c4:	str	lr, [sp, #12]
   323c8:	mov	r4, r0
   323cc:	mov	r5, r2
   323d0:	ldr	r0, [r0, #20]
   323d4:	add	r3, r0, r2
   323d8:	ldr	r2, [r4, #16]
   323dc:	cmp	r2, r3
   323e0:	bhi	32400 <flatcc_json_printer_write@@Base+0x44>
   323e4:	mov	r2, r5
   323e8:	mov	r0, r4
   323ec:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   323f0:	ldrd	r4, [sp]
   323f4:	ldr	r6, [sp, #8]
   323f8:	add	sp, sp, #12
   323fc:	pop	{pc}		; (ldr pc, [sp], #4)
   32400:	mov	r2, r5
   32404:	bl	14524 <memcpy@plt>
   32408:	ldr	r3, [r4, #20]
   3240c:	add	r5, r3, r5
   32410:	str	r5, [r4, #20]
   32414:	b	323f0 <flatcc_json_printer_write@@Base+0x34>

00032418 <flatcc_json_printer_nl@@Base>:
   32418:	ldr	r3, [r0, #20]
   3241c:	add	r2, r3, #1
   32420:	str	r2, [r0, #20]
   32424:	mov	r2, #10
   32428:	strb	r2, [r3]
   3242c:	ldr	r2, [r0, #20]
   32430:	ldr	r3, [r0, #16]
   32434:	cmp	r2, r3
   32438:	bxcc	lr
   3243c:	str	r4, [sp, #-8]!
   32440:	str	lr, [sp, #4]
   32444:	ldr	r3, [r0, #44]	; 0x2c
   32448:	mov	r1, #0
   3244c:	blx	r3
   32450:	ldr	r4, [sp]
   32454:	add	sp, sp, #4
   32458:	pop	{pc}		; (ldr pc, [sp], #4)

0003245c <flatcc_json_printer_char@@Base>:
   3245c:	ldr	r3, [r0, #20]
   32460:	add	r2, r3, #1
   32464:	str	r2, [r0, #20]
   32468:	strb	r1, [r3]
   3246c:	bx	lr

00032470 <flatcc_json_printer_indent@@Base>:
   32470:	strd	r4, [sp, #-16]!
   32474:	str	r6, [sp, #8]
   32478:	str	lr, [sp, #12]
   3247c:	mov	r4, r0
   32480:	ldrb	r3, [r0, #25]
   32484:	ldr	r5, [r0, #32]
   32488:	mul	r5, r5, r3
   3248c:	ldr	r0, [r0, #20]
   32490:	add	r3, r0, r5
   32494:	ldr	r2, [r4, #16]
   32498:	cmp	r2, r3
   3249c:	bcs	324bc <flatcc_json_printer_indent@@Base+0x4c>
   324a0:	mov	r1, r5
   324a4:	mov	r0, r4
   324a8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   324ac:	ldrd	r4, [sp]
   324b0:	ldr	r6, [sp, #8]
   324b4:	add	sp, sp, #12
   324b8:	pop	{pc}		; (ldr pc, [sp], #4)
   324bc:	mov	r2, r5
   324c0:	mov	r1, #32
   324c4:	bl	1459c <memset@plt>
   324c8:	ldr	r3, [r4, #20]
   324cc:	add	r5, r3, r5
   324d0:	str	r5, [r4, #20]
   324d4:	b	324ac <flatcc_json_printer_indent@@Base+0x3c>

000324d8 <flatcc_json_printer_add_level@@Base>:
   324d8:	ldr	r3, [r0, #32]
   324dc:	add	r1, r3, r1
   324e0:	str	r1, [r0, #32]
   324e4:	bx	lr

000324e8 <flatcc_json_printer_get_level@@Base>:
   324e8:	ldr	r0, [r0, #32]
   324ec:	bx	lr

000324f0 <flatcc_json_printer_uint8@@Base>:
   324f0:	str	r4, [sp, #-8]!
   324f4:	str	lr, [sp, #4]
   324f8:	mov	r4, r0
   324fc:	mov	r0, r1
   32500:	ldr	r1, [r4, #20]
   32504:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   32508:	ldr	r3, [r4, #20]
   3250c:	add	r0, r3, r0
   32510:	str	r0, [r4, #20]
   32514:	ldr	r4, [sp]
   32518:	add	sp, sp, #4
   3251c:	pop	{pc}		; (ldr pc, [sp], #4)

00032520 <flatcc_json_printer_uint16@@Base>:
   32520:	str	r4, [sp, #-8]!
   32524:	str	lr, [sp, #4]
   32528:	mov	r4, r0
   3252c:	mov	r0, r1
   32530:	ldr	r1, [r4, #20]
   32534:	bl	2fc28 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   32538:	ldr	r3, [r4, #20]
   3253c:	add	r0, r3, r0
   32540:	str	r0, [r4, #20]
   32544:	ldr	r4, [sp]
   32548:	add	sp, sp, #4
   3254c:	pop	{pc}		; (ldr pc, [sp], #4)

00032550 <flatcc_json_printer_uint32@@Base>:
   32550:	str	r4, [sp, #-8]!
   32554:	str	lr, [sp, #4]
   32558:	mov	r4, r0
   3255c:	mov	r0, r1
   32560:	ldr	r1, [r4, #20]
   32564:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   32568:	ldr	r3, [r4, #20]
   3256c:	add	r0, r3, r0
   32570:	str	r0, [r4, #20]
   32574:	ldr	r4, [sp]
   32578:	add	sp, sp, #4
   3257c:	pop	{pc}		; (ldr pc, [sp], #4)

00032580 <flatcc_json_printer_uint64@@Base>:
   32580:	str	r4, [sp, #-8]!
   32584:	str	lr, [sp, #4]
   32588:	mov	r4, r0
   3258c:	mov	r0, r2
   32590:	mov	r1, r3
   32594:	ldr	r2, [r4, #20]
   32598:	bl	30120 <flatcc_json_parser_struct_as_root@@Base+0x698>
   3259c:	ldr	r3, [r4, #20]
   325a0:	add	r0, r3, r0
   325a4:	str	r0, [r4, #20]
   325a8:	ldr	r4, [sp]
   325ac:	add	sp, sp, #4
   325b0:	pop	{pc}		; (ldr pc, [sp], #4)

000325b4 <flatcc_json_printer_int8@@Base>:
   325b4:	str	r4, [sp, #-8]!
   325b8:	str	lr, [sp, #4]
   325bc:	mov	r4, r0
   325c0:	mov	r0, r1
   325c4:	ldr	r1, [r4, #20]
   325c8:	bl	307fc <flatcc_json_parser_struct_as_root@@Base+0xd74>
   325cc:	ldr	r3, [r4, #20]
   325d0:	add	r0, r3, r0
   325d4:	str	r0, [r4, #20]
   325d8:	ldr	r4, [sp]
   325dc:	add	sp, sp, #4
   325e0:	pop	{pc}		; (ldr pc, [sp], #4)

000325e4 <flatcc_json_printer_int16@@Base>:
   325e4:	str	r4, [sp, #-8]!
   325e8:	str	lr, [sp, #4]
   325ec:	mov	r4, r0
   325f0:	mov	r0, r1
   325f4:	ldr	r1, [r4, #20]
   325f8:	bl	3083c <flatcc_json_parser_struct_as_root@@Base+0xdb4>
   325fc:	ldr	r3, [r4, #20]
   32600:	add	r0, r3, r0
   32604:	str	r0, [r4, #20]
   32608:	ldr	r4, [sp]
   3260c:	add	sp, sp, #4
   32610:	pop	{pc}		; (ldr pc, [sp], #4)

00032614 <flatcc_json_printer_int32@@Base>:
   32614:	str	r4, [sp, #-8]!
   32618:	str	lr, [sp, #4]
   3261c:	mov	r4, r0
   32620:	mov	r0, r1
   32624:	ldr	r1, [r4, #20]
   32628:	bl	3087c <flatcc_json_parser_struct_as_root@@Base+0xdf4>
   3262c:	ldr	r3, [r4, #20]
   32630:	add	r0, r3, r0
   32634:	str	r0, [r4, #20]
   32638:	ldr	r4, [sp]
   3263c:	add	sp, sp, #4
   32640:	pop	{pc}		; (ldr pc, [sp], #4)

00032644 <flatcc_json_printer_int64@@Base>:
   32644:	str	r4, [sp, #-8]!
   32648:	str	lr, [sp, #4]
   3264c:	mov	r4, r0
   32650:	mov	r0, r2
   32654:	mov	r1, r3
   32658:	ldr	r2, [r4, #20]
   3265c:	bl	308b4 <flatcc_json_parser_struct_as_root@@Base+0xe2c>
   32660:	ldr	r3, [r4, #20]
   32664:	add	r0, r3, r0
   32668:	str	r0, [r4, #20]
   3266c:	ldr	r4, [sp]
   32670:	add	sp, sp, #4
   32674:	pop	{pc}		; (ldr pc, [sp], #4)

00032678 <flatcc_json_printer_float@@Base>:
   32678:	str	r4, [sp, #-8]!
   3267c:	str	lr, [sp, #4]
   32680:	mov	r4, r0
   32684:	ldr	r0, [r0, #20]
   32688:	vcvt.f64.f32	d0, s0
   3268c:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   32690:	ldr	r3, [r4, #20]
   32694:	add	r0, r3, r0
   32698:	str	r0, [r4, #20]
   3269c:	ldr	r4, [sp]
   326a0:	add	sp, sp, #4
   326a4:	pop	{pc}		; (ldr pc, [sp], #4)

000326a8 <flatcc_json_printer_double@@Base>:
   326a8:	str	r4, [sp, #-8]!
   326ac:	str	lr, [sp, #4]
   326b0:	mov	r4, r0
   326b4:	ldr	r0, [r0, #20]
   326b8:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   326bc:	ldr	r3, [r4, #20]
   326c0:	add	r0, r3, r0
   326c4:	str	r0, [r4, #20]
   326c8:	ldr	r4, [sp]
   326cc:	add	sp, sp, #4
   326d0:	pop	{pc}		; (ldr pc, [sp], #4)

000326d4 <flatcc_json_printer_enum@@Base>:
   326d4:	strd	r4, [sp, #-16]!
   326d8:	str	r6, [sp, #8]
   326dc:	str	lr, [sp, #12]
   326e0:	mov	r4, r0
   326e4:	mov	r5, r2
   326e8:	ldr	r3, [r0, #20]
   326ec:	mov	r2, #34	; 0x22
   326f0:	strb	r2, [r3]
   326f4:	ldrb	r3, [r0, #26]
   326f8:	ldr	r0, [r0, #20]
   326fc:	cmp	r3, #0
   32700:	addeq	r0, r0, #1
   32704:	str	r0, [r4, #20]
   32708:	add	r3, r0, r5
   3270c:	ldr	r2, [r4, #16]
   32710:	cmp	r2, r3
   32714:	bls	3275c <flatcc_json_printer_enum@@Base+0x88>
   32718:	mov	r2, r5
   3271c:	bl	14524 <memcpy@plt>
   32720:	ldr	r3, [r4, #20]
   32724:	add	r5, r3, r5
   32728:	str	r5, [r4, #20]
   3272c:	ldr	r3, [r4, #20]
   32730:	mov	r2, #34	; 0x22
   32734:	strb	r2, [r3]
   32738:	ldrb	r2, [r4, #26]
   3273c:	ldr	r3, [r4, #20]
   32740:	cmp	r2, #0
   32744:	addeq	r3, r3, #1
   32748:	str	r3, [r4, #20]
   3274c:	ldrd	r4, [sp]
   32750:	ldr	r6, [sp, #8]
   32754:	add	sp, sp, #12
   32758:	pop	{pc}		; (ldr pc, [sp], #4)
   3275c:	mov	r2, r5
   32760:	mov	r0, r4
   32764:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   32768:	b	3272c <flatcc_json_printer_enum@@Base+0x58>

0003276c <flatcc_json_printer_delimit_enum_flags@@Base>:
   3276c:	ldrb	r3, [r0, #26]
   32770:	adds	r1, r1, #0
   32774:	movne	r1, #1
   32778:	cmp	r3, #0
   3277c:	movne	r3, r1
   32780:	moveq	r3, #1
   32784:	ldr	r2, [r0, #20]
   32788:	mov	r1, #34	; 0x22
   3278c:	strb	r1, [r2]
   32790:	ldr	r1, [r0, #20]
   32794:	add	r1, r1, r3
   32798:	str	r1, [r0, #20]
   3279c:	bx	lr

000327a0 <flatcc_json_printer_enum_flag@@Base>:
   327a0:	strd	r4, [sp, #-16]!
   327a4:	str	r6, [sp, #8]
   327a8:	str	lr, [sp, #12]
   327ac:	mov	r4, r0
   327b0:	mov	ip, r2
   327b4:	mov	r5, r3
   327b8:	ldr	r3, [r0, #20]
   327bc:	mov	r2, #32
   327c0:	strb	r2, [r3]
   327c4:	ldr	r0, [r0, #20]
   327c8:	cmp	r1, #0
   327cc:	addgt	r0, r0, #1
   327d0:	str	r0, [r4, #20]
   327d4:	add	r3, r0, r5
   327d8:	ldr	r2, [r4, #16]
   327dc:	cmp	r2, r3
   327e0:	bhi	32804 <flatcc_json_printer_enum_flag@@Base+0x64>
   327e4:	mov	r2, r5
   327e8:	mov	r1, ip
   327ec:	mov	r0, r4
   327f0:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   327f4:	ldrd	r4, [sp]
   327f8:	ldr	r6, [sp, #8]
   327fc:	add	sp, sp, #12
   32800:	pop	{pc}		; (ldr pc, [sp], #4)
   32804:	mov	r2, r5
   32808:	mov	r1, ip
   3280c:	bl	14524 <memcpy@plt>
   32810:	ldr	r3, [r4, #20]
   32814:	add	r5, r3, r5
   32818:	str	r5, [r4, #20]
   3281c:	b	327f4 <flatcc_json_printer_enum_flag@@Base+0x54>

00032820 <flatcc_json_printer_string_field@@Base>:
   32820:	add	r2, r2, #2
   32824:	lsl	r2, r2, #1
   32828:	ldr	ip, [r1, #8]
   3282c:	cmp	r2, ip
   32830:	bxge	lr
   32834:	strd	r4, [sp, #-32]!	; 0xffffffe0
   32838:	strd	r6, [sp, #8]
   3283c:	strd	r8, [sp, #16]
   32840:	str	sl, [sp, #24]
   32844:	str	lr, [sp, #28]
   32848:	ldr	ip, [r1, #4]
   3284c:	ldrh	r5, [ip, r2]
   32850:	cmp	r5, #0
   32854:	beq	32974 <flatcc_json_printer_string_field@@Base+0x154>
   32858:	ldr	r6, [r1]
   3285c:	adds	r7, r6, r5
   32860:	beq	32974 <flatcc_json_printer_string_field@@Base+0x154>
   32864:	ldr	r2, [r1, #16]
   32868:	add	ip, r2, #1
   3286c:	str	ip, [r1, #16]
   32870:	cmp	r2, #0
   32874:	beq	3288c <flatcc_json_printer_string_field@@Base+0x6c>
   32878:	ldr	r2, [r0, #20]
   3287c:	add	r1, r2, #1
   32880:	str	r1, [r0, #20]
   32884:	mov	r1, #44	; 0x2c
   32888:	strb	r1, [r2]
   3288c:	mov	r8, r3
   32890:	mov	r4, r0
   32894:	ldrb	r3, [r0, #25]
   32898:	cmp	r3, #0
   3289c:	bne	3298c <flatcc_json_printer_string_field@@Base+0x16c>
   328a0:	ldr	r2, [r0, #20]
   328a4:	ldr	r3, [r0, #16]
   328a8:	cmp	r2, r3
   328ac:	bcc	328bc <flatcc_json_printer_string_field@@Base+0x9c>
   328b0:	ldr	r3, [r0, #44]	; 0x2c
   328b4:	mov	r1, #0
   328b8:	blx	r3
   328bc:	ldr	r3, [r4, #20]
   328c0:	mov	r2, #34	; 0x22
   328c4:	strb	r2, [r3]
   328c8:	ldrb	r3, [r4, #26]
   328cc:	ldr	r0, [r4, #20]
   328d0:	cmp	r3, #0
   328d4:	addeq	r0, r0, #1
   328d8:	str	r0, [r4, #20]
   328dc:	ldr	r3, [sp, #32]
   328e0:	add	r3, r0, r3
   328e4:	ldr	r2, [r4, #16]
   328e8:	cmp	r2, r3
   328ec:	bls	329ec <flatcc_json_printer_string_field@@Base+0x1cc>
   328f0:	ldr	r2, [sp, #32]
   328f4:	mov	r1, r8
   328f8:	bl	14524 <memcpy@plt>
   328fc:	ldr	r3, [r4, #20]
   32900:	ldr	r2, [sp, #32]
   32904:	add	r3, r3, r2
   32908:	str	r3, [r4, #20]
   3290c:	ldr	r3, [r4, #20]
   32910:	mov	r2, #34	; 0x22
   32914:	strb	r2, [r3]
   32918:	ldrb	r3, [r4, #26]
   3291c:	clz	r3, r3
   32920:	lsr	r3, r3, #5
   32924:	ldr	r1, [r4, #20]
   32928:	add	r2, r1, r3
   3292c:	add	r2, r2, #1
   32930:	str	r2, [r4, #20]
   32934:	mov	r2, #58	; 0x3a
   32938:	strb	r2, [r1, r3]
   3293c:	ldr	r3, [r4, #20]
   32940:	mov	r2, #32
   32944:	strb	r2, [r3]
   32948:	ldrb	r2, [r4, #25]
   3294c:	ldr	r3, [r4, #20]
   32950:	cmp	r2, #0
   32954:	addne	r3, r3, #1
   32958:	str	r3, [r4, #20]
   3295c:	ldr	r3, [r6, r5]
   32960:	add	r1, r7, r3
   32964:	ldr	r2, [r7, r3]
   32968:	add	r1, r1, #4
   3296c:	mov	r0, r4
   32970:	bl	3145c <flatcc_json_parser_struct_as_root@@Base+0x19d4>
   32974:	ldrd	r4, [sp]
   32978:	ldrd	r6, [sp, #8]
   3297c:	ldrd	r8, [sp, #16]
   32980:	ldr	sl, [sp, #24]
   32984:	add	sp, sp, #28
   32988:	pop	{pc}		; (ldr pc, [sp], #4)
   3298c:	ldr	r3, [r0, #20]
   32990:	add	r2, r3, #1
   32994:	str	r2, [r0, #20]
   32998:	mov	r2, #10
   3299c:	strb	r2, [r3]
   329a0:	ldrb	r3, [r0, #25]
   329a4:	ldr	r9, [r0, #32]
   329a8:	mul	r9, r9, r3
   329ac:	ldr	r0, [r0, #20]
   329b0:	add	r3, r0, r9
   329b4:	ldr	r2, [r4, #16]
   329b8:	cmp	r2, r3
   329bc:	bcs	329d0 <flatcc_json_printer_string_field@@Base+0x1b0>
   329c0:	mov	r1, r9
   329c4:	mov	r0, r4
   329c8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   329cc:	b	328bc <flatcc_json_printer_string_field@@Base+0x9c>
   329d0:	mov	r2, r9
   329d4:	mov	r1, #32
   329d8:	bl	1459c <memset@plt>
   329dc:	ldr	r3, [r4, #20]
   329e0:	add	r9, r3, r9
   329e4:	str	r9, [r4, #20]
   329e8:	b	328bc <flatcc_json_printer_string_field@@Base+0x9c>
   329ec:	ldr	r2, [sp, #32]
   329f0:	mov	r1, r8
   329f4:	mov	r0, r4
   329f8:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   329fc:	b	3290c <flatcc_json_printer_string_field@@Base+0xec>

00032a00 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   32a00:	add	r2, r2, #2
   32a04:	lsl	r2, r2, #1
   32a08:	ldr	ip, [r1, #8]
   32a0c:	cmp	r2, ip
   32a10:	bxge	lr
   32a14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   32a18:	strd	r6, [sp, #8]
   32a1c:	strd	r8, [sp, #16]
   32a20:	strd	sl, [sp, #24]
   32a24:	str	lr, [sp, #32]
   32a28:	sub	sp, sp, #20
   32a2c:	ldr	ip, [r1, #4]
   32a30:	ldrh	r6, [ip, r2]
   32a34:	cmp	r6, #0
   32a38:	beq	32d14 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x314>
   32a3c:	ldr	r9, [r1]
   32a40:	ldr	r5, [sp, #60]	; 0x3c
   32a44:	adds	r5, r5, #0
   32a48:	movne	r5, #1
   32a4c:	orr	r8, r5, #128	; 0x80
   32a50:	adds	sl, r9, r6
   32a54:	beq	32d14 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x314>
   32a58:	ldr	r2, [r1, #16]
   32a5c:	add	ip, r2, #1
   32a60:	str	ip, [r1, #16]
   32a64:	cmp	r2, #0
   32a68:	beq	32a80 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x80>
   32a6c:	ldr	r2, [r0, #20]
   32a70:	add	r1, r2, #1
   32a74:	str	r1, [r0, #20]
   32a78:	mov	r1, #44	; 0x2c
   32a7c:	strb	r1, [r2]
   32a80:	mov	r7, r3
   32a84:	mov	r4, r0
   32a88:	ldrb	r3, [r0, #25]
   32a8c:	cmp	r3, #0
   32a90:	bne	32c74 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x274>
   32a94:	ldr	r2, [r0, #20]
   32a98:	ldr	r3, [r0, #16]
   32a9c:	cmp	r2, r3
   32aa0:	bcc	32ab0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb0>
   32aa4:	ldr	r3, [r0, #44]	; 0x2c
   32aa8:	mov	r1, #0
   32aac:	blx	r3
   32ab0:	ldr	r3, [r4, #20]
   32ab4:	mov	r2, #34	; 0x22
   32ab8:	strb	r2, [r3]
   32abc:	ldrb	r3, [r4, #26]
   32ac0:	ldr	r0, [r4, #20]
   32ac4:	cmp	r3, #0
   32ac8:	addeq	r0, r0, #1
   32acc:	str	r0, [r4, #20]
   32ad0:	ldr	r3, [sp, #56]	; 0x38
   32ad4:	add	r3, r0, r3
   32ad8:	ldr	r2, [r4, #16]
   32adc:	cmp	r2, r3
   32ae0:	bls	32cd4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2d4>
   32ae4:	ldr	r2, [sp, #56]	; 0x38
   32ae8:	mov	r1, r7
   32aec:	bl	14524 <memcpy@plt>
   32af0:	ldr	r3, [r4, #20]
   32af4:	ldr	r2, [sp, #56]	; 0x38
   32af8:	add	r3, r3, r2
   32afc:	str	r3, [r4, #20]
   32b00:	ldr	r3, [r4, #20]
   32b04:	mov	r1, #34	; 0x22
   32b08:	strb	r1, [r3]
   32b0c:	ldrb	r3, [r4, #26]
   32b10:	clz	r3, r3
   32b14:	lsr	r3, r3, #5
   32b18:	ldr	r0, [r4, #20]
   32b1c:	add	r2, r0, r3
   32b20:	add	r2, r2, #1
   32b24:	str	r2, [r4, #20]
   32b28:	mov	r2, #58	; 0x3a
   32b2c:	strb	r2, [r0, r3]
   32b30:	ldr	r3, [r4, #20]
   32b34:	mov	r2, #32
   32b38:	strb	r2, [r3]
   32b3c:	ldrb	r3, [r4, #25]
   32b40:	adds	r3, r3, #0
   32b44:	movne	r3, #1
   32b48:	ldr	r0, [r4, #20]
   32b4c:	add	r2, r0, r3
   32b50:	str	r2, [r4, #20]
   32b54:	ldr	ip, [r9, r6]
   32b58:	add	r7, sl, ip
   32b5c:	ldr	ip, [sl, ip]
   32b60:	str	ip, [sp, #8]
   32b64:	add	r7, r7, #4
   32b68:	add	r2, r2, #1
   32b6c:	str	r2, [r4, #20]
   32b70:	strb	r1, [r0, r3]
   32b74:	mov	r1, r8
   32b78:	ldr	r0, [sp, #8]
   32b7c:	bl	30c40 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   32b80:	mov	r9, r0
   32b84:	ldr	r3, [r4, #20]
   32b88:	add	r3, r3, r0
   32b8c:	ldr	r2, [r4, #16]
   32b90:	cmp	r2, r3
   32b94:	bhi	32ba8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1a8>
   32b98:	ldr	r3, [r4, #44]	; 0x2c
   32b9c:	mov	r1, #0
   32ba0:	mov	r0, r4
   32ba4:	blx	r3
   32ba8:	ldr	r0, [r4, #20]
   32bac:	ldr	r6, [r4, #16]
   32bb0:	add	r3, r0, r9
   32bb4:	cmp	r6, r3
   32bb8:	bcs	32ce8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2e8>
   32bbc:	sub	r6, r6, r0
   32bc0:	bic	r6, r6, #3
   32bc4:	add	r3, r6, r6, lsl #1
   32bc8:	lsr	r9, r3, #2
   32bcc:	cmp	r3, #3
   32bd0:	bls	32c58 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x258>
   32bd4:	mov	sl, #0
   32bd8:	str	r9, [sp, #12]
   32bdc:	str	r5, [sp]
   32be0:	add	r3, sp, #12
   32be4:	mov	r2, sl
   32be8:	mov	r1, r7
   32bec:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0x1210>
   32bf0:	ldr	r3, [r4, #20]
   32bf4:	add	r6, r3, r6
   32bf8:	str	r6, [r4, #20]
   32bfc:	add	r7, r7, r9
   32c00:	ldr	r3, [sp, #8]
   32c04:	sub	r9, r3, r9
   32c08:	str	r9, [sp, #8]
   32c0c:	ldr	r3, [r4, #44]	; 0x2c
   32c10:	mov	r1, sl
   32c14:	mov	r0, r4
   32c18:	blx	r3
   32c1c:	mov	r1, r8
   32c20:	ldr	r0, [sp, #8]
   32c24:	bl	30c40 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   32c28:	mov	r9, r0
   32c2c:	ldr	r0, [r4, #20]
   32c30:	ldr	r6, [r4, #16]
   32c34:	add	r3, r0, r9
   32c38:	cmp	r6, r3
   32c3c:	bcs	32ce8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2e8>
   32c40:	sub	r6, r6, r0
   32c44:	bic	r6, r6, #3
   32c48:	add	r3, r6, r6, lsl #1
   32c4c:	lsr	r9, r3, #2
   32c50:	cmp	r3, #3
   32c54:	bhi	32bd8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1d8>
   32c58:	ldr	r3, [pc, #208]	; 32d30 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x330>
   32c5c:	movw	r2, #277	; 0x115
   32c60:	movw	r1, #13308	; 0x33fc
   32c64:	movt	r1, #4
   32c68:	movw	r0, #13656	; 0x3558
   32c6c:	movt	r0, #4
   32c70:	bl	145f0 <__assert_fail@plt>
   32c74:	ldr	r3, [r0, #20]
   32c78:	add	r2, r3, #1
   32c7c:	str	r2, [r0, #20]
   32c80:	mov	r2, #10
   32c84:	strb	r2, [r3]
   32c88:	ldrb	r3, [r0, #25]
   32c8c:	ldr	fp, [r0, #32]
   32c90:	mul	fp, fp, r3
   32c94:	ldr	r0, [r0, #20]
   32c98:	add	r3, r0, fp
   32c9c:	ldr	r2, [r4, #16]
   32ca0:	cmp	r2, r3
   32ca4:	bcs	32cb8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b8>
   32ca8:	mov	r1, fp
   32cac:	mov	r0, r4
   32cb0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   32cb4:	b	32ab0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb0>
   32cb8:	mov	r2, fp
   32cbc:	mov	r1, #32
   32cc0:	bl	1459c <memset@plt>
   32cc4:	ldr	r3, [r4, #20]
   32cc8:	add	fp, r3, fp
   32ccc:	str	fp, [r4, #20]
   32cd0:	b	32ab0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xb0>
   32cd4:	ldr	r2, [sp, #56]	; 0x38
   32cd8:	mov	r1, r7
   32cdc:	mov	r0, r4
   32ce0:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   32ce4:	b	32b00 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x100>
   32ce8:	str	r8, [sp]
   32cec:	add	r3, sp, #8
   32cf0:	mov	r2, #0
   32cf4:	mov	r1, r7
   32cf8:	bl	30c98 <flatcc_json_parser_struct_as_root@@Base+0x1210>
   32cfc:	ldr	r2, [r4, #20]
   32d00:	add	r3, r2, r9
   32d04:	add	r3, r3, #1
   32d08:	str	r3, [r4, #20]
   32d0c:	mov	r3, #34	; 0x22
   32d10:	strb	r3, [r2, r9]
   32d14:	add	sp, sp, #20
   32d18:	ldrd	r4, [sp]
   32d1c:	ldrd	r6, [sp, #8]
   32d20:	ldrd	r8, [sp, #16]
   32d24:	ldrd	sl, [sp, #24]
   32d28:	add	sp, sp, #32
   32d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   32d30:	andeq	r3, r4, r8, lsl #6

00032d34 <flatcc_json_printer_uint8_field@@Base>:
   32d34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32d38:	strd	r6, [sp, #8]
   32d3c:	str	r8, [sp, #16]
   32d40:	str	lr, [sp, #20]
   32d44:	ldr	r6, [sp, #24]
   32d48:	ldrb	lr, [sp, #28]
   32d4c:	add	r2, r2, #2
   32d50:	lsl	r2, r2, #1
   32d54:	ldr	ip, [r1, #8]
   32d58:	cmp	r2, ip
   32d5c:	bge	32d98 <flatcc_json_printer_uint8_field@@Base+0x64>
   32d60:	ldr	ip, [r1, #4]
   32d64:	ldrh	r2, [ip, r2]
   32d68:	cmp	r2, #0
   32d6c:	beq	32d98 <flatcc_json_printer_uint8_field@@Base+0x64>
   32d70:	ldr	ip, [r1]
   32d74:	cmn	ip, r2
   32d78:	beq	32d98 <flatcc_json_printer_uint8_field@@Base+0x64>
   32d7c:	ldrb	r5, [ip, r2]
   32d80:	cmp	lr, r5
   32d84:	bne	32da8 <flatcc_json_printer_uint8_field@@Base+0x74>
   32d88:	ldrb	r2, [r0, #28]
   32d8c:	cmp	r2, #0
   32d90:	beq	32da8 <flatcc_json_printer_uint8_field@@Base+0x74>
   32d94:	b	32eac <flatcc_json_printer_uint8_field@@Base+0x178>
   32d98:	ldrb	r2, [r0, #29]
   32d9c:	cmp	r2, #0
   32da0:	beq	32eac <flatcc_json_printer_uint8_field@@Base+0x178>
   32da4:	mov	r5, lr
   32da8:	ldr	r2, [r1, #16]
   32dac:	add	ip, r2, #1
   32db0:	str	ip, [r1, #16]
   32db4:	cmp	r2, #0
   32db8:	beq	32dd0 <flatcc_json_printer_uint8_field@@Base+0x9c>
   32dbc:	ldr	r2, [r0, #20]
   32dc0:	add	r1, r2, #1
   32dc4:	str	r1, [r0, #20]
   32dc8:	mov	r1, #44	; 0x2c
   32dcc:	strb	r1, [r2]
   32dd0:	mov	r7, r3
   32dd4:	mov	r4, r0
   32dd8:	ldrb	r3, [r0, #25]
   32ddc:	cmp	r3, #0
   32de0:	bne	32ec0 <flatcc_json_printer_uint8_field@@Base+0x18c>
   32de4:	ldr	r2, [r0, #20]
   32de8:	ldr	r3, [r0, #16]
   32dec:	cmp	r2, r3
   32df0:	bcc	32e00 <flatcc_json_printer_uint8_field@@Base+0xcc>
   32df4:	ldr	r3, [r0, #44]	; 0x2c
   32df8:	mov	r1, #0
   32dfc:	blx	r3
   32e00:	ldr	r3, [r4, #20]
   32e04:	mov	r2, #34	; 0x22
   32e08:	strb	r2, [r3]
   32e0c:	ldrb	r3, [r4, #26]
   32e10:	ldr	r0, [r4, #20]
   32e14:	cmp	r3, #0
   32e18:	addeq	r0, r0, #1
   32e1c:	str	r0, [r4, #20]
   32e20:	add	r3, r0, r6
   32e24:	ldr	r2, [r4, #16]
   32e28:	cmp	r2, r3
   32e2c:	bls	32f20 <flatcc_json_printer_uint8_field@@Base+0x1ec>
   32e30:	mov	r2, r6
   32e34:	mov	r1, r7
   32e38:	bl	14524 <memcpy@plt>
   32e3c:	ldr	r3, [r4, #20]
   32e40:	add	r6, r3, r6
   32e44:	str	r6, [r4, #20]
   32e48:	ldr	r3, [r4, #20]
   32e4c:	mov	r2, #34	; 0x22
   32e50:	strb	r2, [r3]
   32e54:	ldrb	r3, [r4, #26]
   32e58:	clz	r3, r3
   32e5c:	lsr	r3, r3, #5
   32e60:	ldr	r1, [r4, #20]
   32e64:	add	r2, r1, r3
   32e68:	add	r2, r2, #1
   32e6c:	str	r2, [r4, #20]
   32e70:	mov	r2, #58	; 0x3a
   32e74:	strb	r2, [r1, r3]
   32e78:	ldr	r3, [r4, #20]
   32e7c:	mov	r2, #32
   32e80:	strb	r2, [r3]
   32e84:	ldrb	r3, [r4, #25]
   32e88:	ldr	r1, [r4, #20]
   32e8c:	cmp	r3, #0
   32e90:	addne	r1, r1, #1
   32e94:	str	r1, [r4, #20]
   32e98:	mov	r0, r5
   32e9c:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   32ea0:	ldr	r3, [r4, #20]
   32ea4:	add	r0, r3, r0
   32ea8:	str	r0, [r4, #20]
   32eac:	ldrd	r4, [sp]
   32eb0:	ldrd	r6, [sp, #8]
   32eb4:	ldr	r8, [sp, #16]
   32eb8:	add	sp, sp, #20
   32ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   32ec0:	ldr	r3, [r0, #20]
   32ec4:	add	r2, r3, #1
   32ec8:	str	r2, [r0, #20]
   32ecc:	mov	r2, #10
   32ed0:	strb	r2, [r3]
   32ed4:	ldrb	r3, [r0, #25]
   32ed8:	ldr	r8, [r0, #32]
   32edc:	mul	r8, r8, r3
   32ee0:	ldr	r0, [r0, #20]
   32ee4:	add	r3, r0, r8
   32ee8:	ldr	r2, [r4, #16]
   32eec:	cmp	r2, r3
   32ef0:	bcs	32f04 <flatcc_json_printer_uint8_field@@Base+0x1d0>
   32ef4:	mov	r1, r8
   32ef8:	mov	r0, r4
   32efc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   32f00:	b	32e00 <flatcc_json_printer_uint8_field@@Base+0xcc>
   32f04:	mov	r2, r8
   32f08:	mov	r1, #32
   32f0c:	bl	1459c <memset@plt>
   32f10:	ldr	r3, [r4, #20]
   32f14:	add	r8, r3, r8
   32f18:	str	r8, [r4, #20]
   32f1c:	b	32e00 <flatcc_json_printer_uint8_field@@Base+0xcc>
   32f20:	mov	r2, r6
   32f24:	mov	r1, r7
   32f28:	mov	r0, r4
   32f2c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   32f30:	b	32e48 <flatcc_json_printer_uint8_field@@Base+0x114>

00032f34 <flatcc_json_printer_uint16_field@@Base>:
   32f34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   32f38:	strd	r6, [sp, #8]
   32f3c:	str	r8, [sp, #16]
   32f40:	str	lr, [sp, #20]
   32f44:	ldr	r6, [sp, #24]
   32f48:	ldrh	lr, [sp, #28]
   32f4c:	add	r2, r2, #2
   32f50:	lsl	r2, r2, #1
   32f54:	ldr	ip, [r1, #8]
   32f58:	cmp	r2, ip
   32f5c:	bge	32f98 <flatcc_json_printer_uint16_field@@Base+0x64>
   32f60:	ldr	ip, [r1, #4]
   32f64:	ldrh	r2, [ip, r2]
   32f68:	cmp	r2, #0
   32f6c:	beq	32f98 <flatcc_json_printer_uint16_field@@Base+0x64>
   32f70:	ldr	ip, [r1]
   32f74:	cmn	ip, r2
   32f78:	beq	32f98 <flatcc_json_printer_uint16_field@@Base+0x64>
   32f7c:	ldrh	r5, [ip, r2]
   32f80:	cmp	lr, r5
   32f84:	bne	32fa8 <flatcc_json_printer_uint16_field@@Base+0x74>
   32f88:	ldrb	r2, [r0, #28]
   32f8c:	cmp	r2, #0
   32f90:	beq	32fa8 <flatcc_json_printer_uint16_field@@Base+0x74>
   32f94:	b	330ac <flatcc_json_printer_uint16_field@@Base+0x178>
   32f98:	ldrb	r2, [r0, #29]
   32f9c:	cmp	r2, #0
   32fa0:	beq	330ac <flatcc_json_printer_uint16_field@@Base+0x178>
   32fa4:	mov	r5, lr
   32fa8:	ldr	r2, [r1, #16]
   32fac:	add	ip, r2, #1
   32fb0:	str	ip, [r1, #16]
   32fb4:	cmp	r2, #0
   32fb8:	beq	32fd0 <flatcc_json_printer_uint16_field@@Base+0x9c>
   32fbc:	ldr	r2, [r0, #20]
   32fc0:	add	r1, r2, #1
   32fc4:	str	r1, [r0, #20]
   32fc8:	mov	r1, #44	; 0x2c
   32fcc:	strb	r1, [r2]
   32fd0:	mov	r7, r3
   32fd4:	mov	r4, r0
   32fd8:	ldrb	r3, [r0, #25]
   32fdc:	cmp	r3, #0
   32fe0:	bne	330c0 <flatcc_json_printer_uint16_field@@Base+0x18c>
   32fe4:	ldr	r2, [r0, #20]
   32fe8:	ldr	r3, [r0, #16]
   32fec:	cmp	r2, r3
   32ff0:	bcc	33000 <flatcc_json_printer_uint16_field@@Base+0xcc>
   32ff4:	ldr	r3, [r0, #44]	; 0x2c
   32ff8:	mov	r1, #0
   32ffc:	blx	r3
   33000:	ldr	r3, [r4, #20]
   33004:	mov	r2, #34	; 0x22
   33008:	strb	r2, [r3]
   3300c:	ldrb	r3, [r4, #26]
   33010:	ldr	r0, [r4, #20]
   33014:	cmp	r3, #0
   33018:	addeq	r0, r0, #1
   3301c:	str	r0, [r4, #20]
   33020:	add	r3, r0, r6
   33024:	ldr	r2, [r4, #16]
   33028:	cmp	r2, r3
   3302c:	bls	33120 <flatcc_json_printer_uint16_field@@Base+0x1ec>
   33030:	mov	r2, r6
   33034:	mov	r1, r7
   33038:	bl	14524 <memcpy@plt>
   3303c:	ldr	r3, [r4, #20]
   33040:	add	r6, r3, r6
   33044:	str	r6, [r4, #20]
   33048:	ldr	r3, [r4, #20]
   3304c:	mov	r2, #34	; 0x22
   33050:	strb	r2, [r3]
   33054:	ldrb	r3, [r4, #26]
   33058:	clz	r3, r3
   3305c:	lsr	r3, r3, #5
   33060:	ldr	r1, [r4, #20]
   33064:	add	r2, r1, r3
   33068:	add	r2, r2, #1
   3306c:	str	r2, [r4, #20]
   33070:	mov	r2, #58	; 0x3a
   33074:	strb	r2, [r1, r3]
   33078:	ldr	r3, [r4, #20]
   3307c:	mov	r2, #32
   33080:	strb	r2, [r3]
   33084:	ldrb	r3, [r4, #25]
   33088:	ldr	r1, [r4, #20]
   3308c:	cmp	r3, #0
   33090:	addne	r1, r1, #1
   33094:	str	r1, [r4, #20]
   33098:	mov	r0, r5
   3309c:	bl	2fc28 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   330a0:	ldr	r3, [r4, #20]
   330a4:	add	r0, r3, r0
   330a8:	str	r0, [r4, #20]
   330ac:	ldrd	r4, [sp]
   330b0:	ldrd	r6, [sp, #8]
   330b4:	ldr	r8, [sp, #16]
   330b8:	add	sp, sp, #20
   330bc:	pop	{pc}		; (ldr pc, [sp], #4)
   330c0:	ldr	r3, [r0, #20]
   330c4:	add	r2, r3, #1
   330c8:	str	r2, [r0, #20]
   330cc:	mov	r2, #10
   330d0:	strb	r2, [r3]
   330d4:	ldrb	r3, [r0, #25]
   330d8:	ldr	r8, [r0, #32]
   330dc:	mul	r8, r8, r3
   330e0:	ldr	r0, [r0, #20]
   330e4:	add	r3, r0, r8
   330e8:	ldr	r2, [r4, #16]
   330ec:	cmp	r2, r3
   330f0:	bcs	33104 <flatcc_json_printer_uint16_field@@Base+0x1d0>
   330f4:	mov	r1, r8
   330f8:	mov	r0, r4
   330fc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   33100:	b	33000 <flatcc_json_printer_uint16_field@@Base+0xcc>
   33104:	mov	r2, r8
   33108:	mov	r1, #32
   3310c:	bl	1459c <memset@plt>
   33110:	ldr	r3, [r4, #20]
   33114:	add	r8, r3, r8
   33118:	str	r8, [r4, #20]
   3311c:	b	33000 <flatcc_json_printer_uint16_field@@Base+0xcc>
   33120:	mov	r2, r6
   33124:	mov	r1, r7
   33128:	mov	r0, r4
   3312c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   33130:	b	33048 <flatcc_json_printer_uint16_field@@Base+0x114>

00033134 <flatcc_json_printer_uint32_field@@Base>:
   33134:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33138:	strd	r6, [sp, #8]
   3313c:	str	r8, [sp, #16]
   33140:	str	lr, [sp, #20]
   33144:	ldr	r6, [sp, #24]
   33148:	add	r2, r2, #2
   3314c:	lsl	r2, r2, #1
   33150:	ldr	ip, [r1, #8]
   33154:	cmp	r2, ip
   33158:	bge	33198 <flatcc_json_printer_uint32_field@@Base+0x64>
   3315c:	ldr	ip, [r1, #4]
   33160:	ldrh	r2, [ip, r2]
   33164:	cmp	r2, #0
   33168:	beq	33198 <flatcc_json_printer_uint32_field@@Base+0x64>
   3316c:	ldr	ip, [r1]
   33170:	cmn	ip, r2
   33174:	beq	33198 <flatcc_json_printer_uint32_field@@Base+0x64>
   33178:	ldr	r5, [ip, r2]
   3317c:	ldr	r2, [sp, #28]
   33180:	cmp	r2, r5
   33184:	bne	331a8 <flatcc_json_printer_uint32_field@@Base+0x74>
   33188:	ldrb	r2, [r0, #28]
   3318c:	cmp	r2, #0
   33190:	beq	331a8 <flatcc_json_printer_uint32_field@@Base+0x74>
   33194:	b	332ac <flatcc_json_printer_uint32_field@@Base+0x178>
   33198:	ldrb	r2, [r0, #29]
   3319c:	cmp	r2, #0
   331a0:	beq	332ac <flatcc_json_printer_uint32_field@@Base+0x178>
   331a4:	ldr	r5, [sp, #28]
   331a8:	ldr	r2, [r1, #16]
   331ac:	add	ip, r2, #1
   331b0:	str	ip, [r1, #16]
   331b4:	cmp	r2, #0
   331b8:	beq	331d0 <flatcc_json_printer_uint32_field@@Base+0x9c>
   331bc:	ldr	r2, [r0, #20]
   331c0:	add	r1, r2, #1
   331c4:	str	r1, [r0, #20]
   331c8:	mov	r1, #44	; 0x2c
   331cc:	strb	r1, [r2]
   331d0:	mov	r7, r3
   331d4:	mov	r4, r0
   331d8:	ldrb	r3, [r0, #25]
   331dc:	cmp	r3, #0
   331e0:	bne	332c0 <flatcc_json_printer_uint32_field@@Base+0x18c>
   331e4:	ldr	r2, [r0, #20]
   331e8:	ldr	r3, [r0, #16]
   331ec:	cmp	r2, r3
   331f0:	bcc	33200 <flatcc_json_printer_uint32_field@@Base+0xcc>
   331f4:	ldr	r3, [r0, #44]	; 0x2c
   331f8:	mov	r1, #0
   331fc:	blx	r3
   33200:	ldr	r3, [r4, #20]
   33204:	mov	r2, #34	; 0x22
   33208:	strb	r2, [r3]
   3320c:	ldrb	r3, [r4, #26]
   33210:	ldr	r0, [r4, #20]
   33214:	cmp	r3, #0
   33218:	addeq	r0, r0, #1
   3321c:	str	r0, [r4, #20]
   33220:	add	r3, r0, r6
   33224:	ldr	r2, [r4, #16]
   33228:	cmp	r2, r3
   3322c:	bls	33320 <flatcc_json_printer_uint32_field@@Base+0x1ec>
   33230:	mov	r2, r6
   33234:	mov	r1, r7
   33238:	bl	14524 <memcpy@plt>
   3323c:	ldr	r3, [r4, #20]
   33240:	add	r6, r3, r6
   33244:	str	r6, [r4, #20]
   33248:	ldr	r3, [r4, #20]
   3324c:	mov	r2, #34	; 0x22
   33250:	strb	r2, [r3]
   33254:	ldrb	r3, [r4, #26]
   33258:	clz	r3, r3
   3325c:	lsr	r3, r3, #5
   33260:	ldr	r1, [r4, #20]
   33264:	add	r2, r1, r3
   33268:	add	r2, r2, #1
   3326c:	str	r2, [r4, #20]
   33270:	mov	r2, #58	; 0x3a
   33274:	strb	r2, [r1, r3]
   33278:	ldr	r3, [r4, #20]
   3327c:	mov	r2, #32
   33280:	strb	r2, [r3]
   33284:	ldrb	r3, [r4, #25]
   33288:	ldr	r1, [r4, #20]
   3328c:	cmp	r3, #0
   33290:	addne	r1, r1, #1
   33294:	str	r1, [r4, #20]
   33298:	mov	r0, r5
   3329c:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   332a0:	ldr	r3, [r4, #20]
   332a4:	add	r0, r3, r0
   332a8:	str	r0, [r4, #20]
   332ac:	ldrd	r4, [sp]
   332b0:	ldrd	r6, [sp, #8]
   332b4:	ldr	r8, [sp, #16]
   332b8:	add	sp, sp, #20
   332bc:	pop	{pc}		; (ldr pc, [sp], #4)
   332c0:	ldr	r3, [r0, #20]
   332c4:	add	r2, r3, #1
   332c8:	str	r2, [r0, #20]
   332cc:	mov	r2, #10
   332d0:	strb	r2, [r3]
   332d4:	ldrb	r3, [r0, #25]
   332d8:	ldr	r8, [r0, #32]
   332dc:	mul	r8, r8, r3
   332e0:	ldr	r0, [r0, #20]
   332e4:	add	r3, r0, r8
   332e8:	ldr	r2, [r4, #16]
   332ec:	cmp	r2, r3
   332f0:	bcs	33304 <flatcc_json_printer_uint32_field@@Base+0x1d0>
   332f4:	mov	r1, r8
   332f8:	mov	r0, r4
   332fc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   33300:	b	33200 <flatcc_json_printer_uint32_field@@Base+0xcc>
   33304:	mov	r2, r8
   33308:	mov	r1, #32
   3330c:	bl	1459c <memset@plt>
   33310:	ldr	r3, [r4, #20]
   33314:	add	r8, r3, r8
   33318:	str	r8, [r4, #20]
   3331c:	b	33200 <flatcc_json_printer_uint32_field@@Base+0xcc>
   33320:	mov	r2, r6
   33324:	mov	r1, r7
   33328:	mov	r0, r4
   3332c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   33330:	b	33248 <flatcc_json_printer_uint32_field@@Base+0x114>

00033334 <flatcc_json_printer_uint64_field@@Base>:
   33334:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33338:	strd	r6, [sp, #8]
   3333c:	strd	r8, [sp, #16]
   33340:	str	sl, [sp, #24]
   33344:	str	lr, [sp, #28]
   33348:	ldr	r5, [sp, #32]
   3334c:	add	r2, r2, #2
   33350:	lsl	r2, r2, #1
   33354:	ldr	ip, [r1, #8]
   33358:	cmp	r2, ip
   3335c:	bge	333a0 <flatcc_json_printer_uint64_field@@Base+0x6c>
   33360:	ldr	ip, [r1, #4]
   33364:	ldrh	r2, [ip, r2]
   33368:	cmp	r2, #0
   3336c:	beq	333a0 <flatcc_json_printer_uint64_field@@Base+0x6c>
   33370:	ldr	ip, [r1]
   33374:	cmn	ip, r2
   33378:	beq	333a0 <flatcc_json_printer_uint64_field@@Base+0x6c>
   3337c:	ldrd	r6, [ip, r2]
   33380:	ldrd	r8, [sp, #40]	; 0x28
   33384:	cmp	r9, r7
   33388:	cmpeq	r8, r6
   3338c:	bne	333b0 <flatcc_json_printer_uint64_field@@Base+0x7c>
   33390:	ldrb	r2, [r0, #28]
   33394:	cmp	r2, #0
   33398:	beq	333b0 <flatcc_json_printer_uint64_field@@Base+0x7c>
   3339c:	b	334b8 <flatcc_json_printer_uint64_field@@Base+0x184>
   333a0:	ldrb	r2, [r0, #29]
   333a4:	cmp	r2, #0
   333a8:	beq	334b8 <flatcc_json_printer_uint64_field@@Base+0x184>
   333ac:	ldrd	r6, [sp, #40]	; 0x28
   333b0:	ldr	r2, [r1, #16]
   333b4:	add	ip, r2, #1
   333b8:	str	ip, [r1, #16]
   333bc:	cmp	r2, #0
   333c0:	beq	333d8 <flatcc_json_printer_uint64_field@@Base+0xa4>
   333c4:	ldr	r2, [r0, #20]
   333c8:	add	r1, r2, #1
   333cc:	str	r1, [r0, #20]
   333d0:	mov	r1, #44	; 0x2c
   333d4:	strb	r1, [r2]
   333d8:	mov	r8, r3
   333dc:	mov	r4, r0
   333e0:	ldrb	r3, [r0, #25]
   333e4:	cmp	r3, #0
   333e8:	bne	334d0 <flatcc_json_printer_uint64_field@@Base+0x19c>
   333ec:	ldr	r2, [r0, #20]
   333f0:	ldr	r3, [r0, #16]
   333f4:	cmp	r2, r3
   333f8:	bcc	33408 <flatcc_json_printer_uint64_field@@Base+0xd4>
   333fc:	ldr	r3, [r0, #44]	; 0x2c
   33400:	mov	r1, #0
   33404:	blx	r3
   33408:	ldr	r3, [r4, #20]
   3340c:	mov	r2, #34	; 0x22
   33410:	strb	r2, [r3]
   33414:	ldrb	r3, [r4, #26]
   33418:	ldr	r0, [r4, #20]
   3341c:	cmp	r3, #0
   33420:	addeq	r0, r0, #1
   33424:	str	r0, [r4, #20]
   33428:	add	r3, r0, r5
   3342c:	ldr	r2, [r4, #16]
   33430:	cmp	r2, r3
   33434:	bls	33530 <flatcc_json_printer_uint64_field@@Base+0x1fc>
   33438:	mov	r2, r5
   3343c:	mov	r1, r8
   33440:	bl	14524 <memcpy@plt>
   33444:	ldr	r3, [r4, #20]
   33448:	add	r5, r3, r5
   3344c:	str	r5, [r4, #20]
   33450:	ldr	r3, [r4, #20]
   33454:	mov	r2, #34	; 0x22
   33458:	strb	r2, [r3]
   3345c:	ldrb	r3, [r4, #26]
   33460:	clz	r3, r3
   33464:	lsr	r3, r3, #5
   33468:	ldr	r1, [r4, #20]
   3346c:	add	r2, r1, r3
   33470:	add	r2, r2, #1
   33474:	str	r2, [r4, #20]
   33478:	mov	r2, #58	; 0x3a
   3347c:	strb	r2, [r1, r3]
   33480:	ldr	r3, [r4, #20]
   33484:	mov	r2, #32
   33488:	strb	r2, [r3]
   3348c:	ldrb	r3, [r4, #25]
   33490:	ldr	r2, [r4, #20]
   33494:	cmp	r3, #0
   33498:	addne	r2, r2, #1
   3349c:	str	r2, [r4, #20]
   334a0:	mov	r0, r6
   334a4:	mov	r1, r7
   334a8:	bl	30120 <flatcc_json_parser_struct_as_root@@Base+0x698>
   334ac:	ldr	r3, [r4, #20]
   334b0:	add	r0, r3, r0
   334b4:	str	r0, [r4, #20]
   334b8:	ldrd	r4, [sp]
   334bc:	ldrd	r6, [sp, #8]
   334c0:	ldrd	r8, [sp, #16]
   334c4:	ldr	sl, [sp, #24]
   334c8:	add	sp, sp, #28
   334cc:	pop	{pc}		; (ldr pc, [sp], #4)
   334d0:	ldr	r3, [r0, #20]
   334d4:	add	r2, r3, #1
   334d8:	str	r2, [r0, #20]
   334dc:	mov	r2, #10
   334e0:	strb	r2, [r3]
   334e4:	ldrb	r3, [r0, #25]
   334e8:	ldr	r9, [r0, #32]
   334ec:	mul	r9, r9, r3
   334f0:	ldr	r0, [r0, #20]
   334f4:	add	r3, r0, r9
   334f8:	ldr	r2, [r4, #16]
   334fc:	cmp	r2, r3
   33500:	bcs	33514 <flatcc_json_printer_uint64_field@@Base+0x1e0>
   33504:	mov	r1, r9
   33508:	mov	r0, r4
   3350c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   33510:	b	33408 <flatcc_json_printer_uint64_field@@Base+0xd4>
   33514:	mov	r2, r9
   33518:	mov	r1, #32
   3351c:	bl	1459c <memset@plt>
   33520:	ldr	r3, [r4, #20]
   33524:	add	r9, r3, r9
   33528:	str	r9, [r4, #20]
   3352c:	b	33408 <flatcc_json_printer_uint64_field@@Base+0xd4>
   33530:	mov	r2, r5
   33534:	mov	r1, r8
   33538:	mov	r0, r4
   3353c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   33540:	b	33450 <flatcc_json_printer_uint64_field@@Base+0x11c>

00033544 <flatcc_json_printer_int8_field@@Base>:
   33544:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33548:	strd	r6, [sp, #8]
   3354c:	str	r8, [sp, #16]
   33550:	str	lr, [sp, #20]
   33554:	ldr	r6, [sp, #24]
   33558:	ldrsb	lr, [sp, #28]
   3355c:	add	r2, r2, #2
   33560:	lsl	r2, r2, #1
   33564:	ldr	ip, [r1, #8]
   33568:	cmp	r2, ip
   3356c:	bge	335a8 <flatcc_json_printer_int8_field@@Base+0x64>
   33570:	ldr	ip, [r1, #4]
   33574:	ldrh	r2, [ip, r2]
   33578:	cmp	r2, #0
   3357c:	beq	335a8 <flatcc_json_printer_int8_field@@Base+0x64>
   33580:	ldr	ip, [r1]
   33584:	cmn	ip, r2
   33588:	beq	335a8 <flatcc_json_printer_int8_field@@Base+0x64>
   3358c:	ldrsb	r5, [ip, r2]
   33590:	cmp	lr, r5
   33594:	bne	335b8 <flatcc_json_printer_int8_field@@Base+0x74>
   33598:	ldrb	r2, [r0, #28]
   3359c:	cmp	r2, #0
   335a0:	beq	335b8 <flatcc_json_printer_int8_field@@Base+0x74>
   335a4:	b	336bc <flatcc_json_printer_int8_field@@Base+0x178>
   335a8:	ldrb	r2, [r0, #29]
   335ac:	cmp	r2, #0
   335b0:	beq	336bc <flatcc_json_printer_int8_field@@Base+0x178>
   335b4:	mov	r5, lr
   335b8:	ldr	r2, [r1, #16]
   335bc:	add	ip, r2, #1
   335c0:	str	ip, [r1, #16]
   335c4:	cmp	r2, #0
   335c8:	beq	335e0 <flatcc_json_printer_int8_field@@Base+0x9c>
   335cc:	ldr	r2, [r0, #20]
   335d0:	add	r1, r2, #1
   335d4:	str	r1, [r0, #20]
   335d8:	mov	r1, #44	; 0x2c
   335dc:	strb	r1, [r2]
   335e0:	mov	r7, r3
   335e4:	mov	r4, r0
   335e8:	ldrb	r3, [r0, #25]
   335ec:	cmp	r3, #0
   335f0:	bne	336d0 <flatcc_json_printer_int8_field@@Base+0x18c>
   335f4:	ldr	r2, [r0, #20]
   335f8:	ldr	r3, [r0, #16]
   335fc:	cmp	r2, r3
   33600:	bcc	33610 <flatcc_json_printer_int8_field@@Base+0xcc>
   33604:	ldr	r3, [r0, #44]	; 0x2c
   33608:	mov	r1, #0
   3360c:	blx	r3
   33610:	ldr	r3, [r4, #20]
   33614:	mov	r2, #34	; 0x22
   33618:	strb	r2, [r3]
   3361c:	ldrb	r3, [r4, #26]
   33620:	ldr	r0, [r4, #20]
   33624:	cmp	r3, #0
   33628:	addeq	r0, r0, #1
   3362c:	str	r0, [r4, #20]
   33630:	add	r3, r0, r6
   33634:	ldr	r2, [r4, #16]
   33638:	cmp	r2, r3
   3363c:	bls	33730 <flatcc_json_printer_int8_field@@Base+0x1ec>
   33640:	mov	r2, r6
   33644:	mov	r1, r7
   33648:	bl	14524 <memcpy@plt>
   3364c:	ldr	r3, [r4, #20]
   33650:	add	r6, r3, r6
   33654:	str	r6, [r4, #20]
   33658:	ldr	r3, [r4, #20]
   3365c:	mov	r2, #34	; 0x22
   33660:	strb	r2, [r3]
   33664:	ldrb	r3, [r4, #26]
   33668:	clz	r3, r3
   3366c:	lsr	r3, r3, #5
   33670:	ldr	r1, [r4, #20]
   33674:	add	r2, r1, r3
   33678:	add	r2, r2, #1
   3367c:	str	r2, [r4, #20]
   33680:	mov	r2, #58	; 0x3a
   33684:	strb	r2, [r1, r3]
   33688:	ldr	r3, [r4, #20]
   3368c:	mov	r2, #32
   33690:	strb	r2, [r3]
   33694:	ldrb	r3, [r4, #25]
   33698:	ldr	r1, [r4, #20]
   3369c:	cmp	r3, #0
   336a0:	addne	r1, r1, #1
   336a4:	str	r1, [r4, #20]
   336a8:	mov	r0, r5
   336ac:	bl	307fc <flatcc_json_parser_struct_as_root@@Base+0xd74>
   336b0:	ldr	r3, [r4, #20]
   336b4:	add	r0, r3, r0
   336b8:	str	r0, [r4, #20]
   336bc:	ldrd	r4, [sp]
   336c0:	ldrd	r6, [sp, #8]
   336c4:	ldr	r8, [sp, #16]
   336c8:	add	sp, sp, #20
   336cc:	pop	{pc}		; (ldr pc, [sp], #4)
   336d0:	ldr	r3, [r0, #20]
   336d4:	add	r2, r3, #1
   336d8:	str	r2, [r0, #20]
   336dc:	mov	r2, #10
   336e0:	strb	r2, [r3]
   336e4:	ldrb	r3, [r0, #25]
   336e8:	ldr	r8, [r0, #32]
   336ec:	mul	r8, r8, r3
   336f0:	ldr	r0, [r0, #20]
   336f4:	add	r3, r0, r8
   336f8:	ldr	r2, [r4, #16]
   336fc:	cmp	r2, r3
   33700:	bcs	33714 <flatcc_json_printer_int8_field@@Base+0x1d0>
   33704:	mov	r1, r8
   33708:	mov	r0, r4
   3370c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   33710:	b	33610 <flatcc_json_printer_int8_field@@Base+0xcc>
   33714:	mov	r2, r8
   33718:	mov	r1, #32
   3371c:	bl	1459c <memset@plt>
   33720:	ldr	r3, [r4, #20]
   33724:	add	r8, r3, r8
   33728:	str	r8, [r4, #20]
   3372c:	b	33610 <flatcc_json_printer_int8_field@@Base+0xcc>
   33730:	mov	r2, r6
   33734:	mov	r1, r7
   33738:	mov	r0, r4
   3373c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   33740:	b	33658 <flatcc_json_printer_int8_field@@Base+0x114>

00033744 <flatcc_json_printer_int16_field@@Base>:
   33744:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33748:	strd	r6, [sp, #8]
   3374c:	str	r8, [sp, #16]
   33750:	str	lr, [sp, #20]
   33754:	ldr	r6, [sp, #24]
   33758:	ldrsh	lr, [sp, #28]
   3375c:	add	r2, r2, #2
   33760:	lsl	r2, r2, #1
   33764:	ldr	ip, [r1, #8]
   33768:	cmp	r2, ip
   3376c:	bge	337a8 <flatcc_json_printer_int16_field@@Base+0x64>
   33770:	ldr	ip, [r1, #4]
   33774:	ldrh	r2, [ip, r2]
   33778:	cmp	r2, #0
   3377c:	beq	337a8 <flatcc_json_printer_int16_field@@Base+0x64>
   33780:	ldr	ip, [r1]
   33784:	cmn	ip, r2
   33788:	beq	337a8 <flatcc_json_printer_int16_field@@Base+0x64>
   3378c:	ldrsh	r5, [ip, r2]
   33790:	cmp	lr, r5
   33794:	bne	337b8 <flatcc_json_printer_int16_field@@Base+0x74>
   33798:	ldrb	r2, [r0, #28]
   3379c:	cmp	r2, #0
   337a0:	beq	337b8 <flatcc_json_printer_int16_field@@Base+0x74>
   337a4:	b	338bc <flatcc_json_printer_int16_field@@Base+0x178>
   337a8:	ldrb	r2, [r0, #29]
   337ac:	cmp	r2, #0
   337b0:	beq	338bc <flatcc_json_printer_int16_field@@Base+0x178>
   337b4:	mov	r5, lr
   337b8:	ldr	r2, [r1, #16]
   337bc:	add	ip, r2, #1
   337c0:	str	ip, [r1, #16]
   337c4:	cmp	r2, #0
   337c8:	beq	337e0 <flatcc_json_printer_int16_field@@Base+0x9c>
   337cc:	ldr	r2, [r0, #20]
   337d0:	add	r1, r2, #1
   337d4:	str	r1, [r0, #20]
   337d8:	mov	r1, #44	; 0x2c
   337dc:	strb	r1, [r2]
   337e0:	mov	r7, r3
   337e4:	mov	r4, r0
   337e8:	ldrb	r3, [r0, #25]
   337ec:	cmp	r3, #0
   337f0:	bne	338d0 <flatcc_json_printer_int16_field@@Base+0x18c>
   337f4:	ldr	r2, [r0, #20]
   337f8:	ldr	r3, [r0, #16]
   337fc:	cmp	r2, r3
   33800:	bcc	33810 <flatcc_json_printer_int16_field@@Base+0xcc>
   33804:	ldr	r3, [r0, #44]	; 0x2c
   33808:	mov	r1, #0
   3380c:	blx	r3
   33810:	ldr	r3, [r4, #20]
   33814:	mov	r2, #34	; 0x22
   33818:	strb	r2, [r3]
   3381c:	ldrb	r3, [r4, #26]
   33820:	ldr	r0, [r4, #20]
   33824:	cmp	r3, #0
   33828:	addeq	r0, r0, #1
   3382c:	str	r0, [r4, #20]
   33830:	add	r3, r0, r6
   33834:	ldr	r2, [r4, #16]
   33838:	cmp	r2, r3
   3383c:	bls	33930 <flatcc_json_printer_int16_field@@Base+0x1ec>
   33840:	mov	r2, r6
   33844:	mov	r1, r7
   33848:	bl	14524 <memcpy@plt>
   3384c:	ldr	r3, [r4, #20]
   33850:	add	r6, r3, r6
   33854:	str	r6, [r4, #20]
   33858:	ldr	r3, [r4, #20]
   3385c:	mov	r2, #34	; 0x22
   33860:	strb	r2, [r3]
   33864:	ldrb	r3, [r4, #26]
   33868:	clz	r3, r3
   3386c:	lsr	r3, r3, #5
   33870:	ldr	r1, [r4, #20]
   33874:	add	r2, r1, r3
   33878:	add	r2, r2, #1
   3387c:	str	r2, [r4, #20]
   33880:	mov	r2, #58	; 0x3a
   33884:	strb	r2, [r1, r3]
   33888:	ldr	r3, [r4, #20]
   3388c:	mov	r2, #32
   33890:	strb	r2, [r3]
   33894:	ldrb	r3, [r4, #25]
   33898:	ldr	r1, [r4, #20]
   3389c:	cmp	r3, #0
   338a0:	addne	r1, r1, #1
   338a4:	str	r1, [r4, #20]
   338a8:	mov	r0, r5
   338ac:	bl	3083c <flatcc_json_parser_struct_as_root@@Base+0xdb4>
   338b0:	ldr	r3, [r4, #20]
   338b4:	add	r0, r3, r0
   338b8:	str	r0, [r4, #20]
   338bc:	ldrd	r4, [sp]
   338c0:	ldrd	r6, [sp, #8]
   338c4:	ldr	r8, [sp, #16]
   338c8:	add	sp, sp, #20
   338cc:	pop	{pc}		; (ldr pc, [sp], #4)
   338d0:	ldr	r3, [r0, #20]
   338d4:	add	r2, r3, #1
   338d8:	str	r2, [r0, #20]
   338dc:	mov	r2, #10
   338e0:	strb	r2, [r3]
   338e4:	ldrb	r3, [r0, #25]
   338e8:	ldr	r8, [r0, #32]
   338ec:	mul	r8, r8, r3
   338f0:	ldr	r0, [r0, #20]
   338f4:	add	r3, r0, r8
   338f8:	ldr	r2, [r4, #16]
   338fc:	cmp	r2, r3
   33900:	bcs	33914 <flatcc_json_printer_int16_field@@Base+0x1d0>
   33904:	mov	r1, r8
   33908:	mov	r0, r4
   3390c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   33910:	b	33810 <flatcc_json_printer_int16_field@@Base+0xcc>
   33914:	mov	r2, r8
   33918:	mov	r1, #32
   3391c:	bl	1459c <memset@plt>
   33920:	ldr	r3, [r4, #20]
   33924:	add	r8, r3, r8
   33928:	str	r8, [r4, #20]
   3392c:	b	33810 <flatcc_json_printer_int16_field@@Base+0xcc>
   33930:	mov	r2, r6
   33934:	mov	r1, r7
   33938:	mov	r0, r4
   3393c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   33940:	b	33858 <flatcc_json_printer_int16_field@@Base+0x114>

00033944 <flatcc_json_printer_int32_field@@Base>:
   33944:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33948:	strd	r6, [sp, #8]
   3394c:	str	r8, [sp, #16]
   33950:	str	lr, [sp, #20]
   33954:	ldr	r6, [sp, #24]
   33958:	add	r2, r2, #2
   3395c:	lsl	r2, r2, #1
   33960:	ldr	ip, [r1, #8]
   33964:	cmp	r2, ip
   33968:	bge	339a8 <flatcc_json_printer_int32_field@@Base+0x64>
   3396c:	ldr	ip, [r1, #4]
   33970:	ldrh	r2, [ip, r2]
   33974:	cmp	r2, #0
   33978:	beq	339a8 <flatcc_json_printer_int32_field@@Base+0x64>
   3397c:	ldr	ip, [r1]
   33980:	cmn	ip, r2
   33984:	beq	339a8 <flatcc_json_printer_int32_field@@Base+0x64>
   33988:	ldr	r5, [ip, r2]
   3398c:	ldr	r2, [sp, #28]
   33990:	cmp	r2, r5
   33994:	bne	339b8 <flatcc_json_printer_int32_field@@Base+0x74>
   33998:	ldrb	r2, [r0, #28]
   3399c:	cmp	r2, #0
   339a0:	beq	339b8 <flatcc_json_printer_int32_field@@Base+0x74>
   339a4:	b	33abc <flatcc_json_printer_int32_field@@Base+0x178>
   339a8:	ldrb	r2, [r0, #29]
   339ac:	cmp	r2, #0
   339b0:	beq	33abc <flatcc_json_printer_int32_field@@Base+0x178>
   339b4:	ldr	r5, [sp, #28]
   339b8:	ldr	r2, [r1, #16]
   339bc:	add	ip, r2, #1
   339c0:	str	ip, [r1, #16]
   339c4:	cmp	r2, #0
   339c8:	beq	339e0 <flatcc_json_printer_int32_field@@Base+0x9c>
   339cc:	ldr	r2, [r0, #20]
   339d0:	add	r1, r2, #1
   339d4:	str	r1, [r0, #20]
   339d8:	mov	r1, #44	; 0x2c
   339dc:	strb	r1, [r2]
   339e0:	mov	r7, r3
   339e4:	mov	r4, r0
   339e8:	ldrb	r3, [r0, #25]
   339ec:	cmp	r3, #0
   339f0:	bne	33ad0 <flatcc_json_printer_int32_field@@Base+0x18c>
   339f4:	ldr	r2, [r0, #20]
   339f8:	ldr	r3, [r0, #16]
   339fc:	cmp	r2, r3
   33a00:	bcc	33a10 <flatcc_json_printer_int32_field@@Base+0xcc>
   33a04:	ldr	r3, [r0, #44]	; 0x2c
   33a08:	mov	r1, #0
   33a0c:	blx	r3
   33a10:	ldr	r3, [r4, #20]
   33a14:	mov	r2, #34	; 0x22
   33a18:	strb	r2, [r3]
   33a1c:	ldrb	r3, [r4, #26]
   33a20:	ldr	r0, [r4, #20]
   33a24:	cmp	r3, #0
   33a28:	addeq	r0, r0, #1
   33a2c:	str	r0, [r4, #20]
   33a30:	add	r3, r0, r6
   33a34:	ldr	r2, [r4, #16]
   33a38:	cmp	r2, r3
   33a3c:	bls	33b30 <flatcc_json_printer_int32_field@@Base+0x1ec>
   33a40:	mov	r2, r6
   33a44:	mov	r1, r7
   33a48:	bl	14524 <memcpy@plt>
   33a4c:	ldr	r3, [r4, #20]
   33a50:	add	r6, r3, r6
   33a54:	str	r6, [r4, #20]
   33a58:	ldr	r3, [r4, #20]
   33a5c:	mov	r2, #34	; 0x22
   33a60:	strb	r2, [r3]
   33a64:	ldrb	r3, [r4, #26]
   33a68:	clz	r3, r3
   33a6c:	lsr	r3, r3, #5
   33a70:	ldr	r1, [r4, #20]
   33a74:	add	r2, r1, r3
   33a78:	add	r2, r2, #1
   33a7c:	str	r2, [r4, #20]
   33a80:	mov	r2, #58	; 0x3a
   33a84:	strb	r2, [r1, r3]
   33a88:	ldr	r3, [r4, #20]
   33a8c:	mov	r2, #32
   33a90:	strb	r2, [r3]
   33a94:	ldrb	r3, [r4, #25]
   33a98:	ldr	r1, [r4, #20]
   33a9c:	cmp	r3, #0
   33aa0:	addne	r1, r1, #1
   33aa4:	str	r1, [r4, #20]
   33aa8:	mov	r0, r5
   33aac:	bl	3087c <flatcc_json_parser_struct_as_root@@Base+0xdf4>
   33ab0:	ldr	r3, [r4, #20]
   33ab4:	add	r0, r3, r0
   33ab8:	str	r0, [r4, #20]
   33abc:	ldrd	r4, [sp]
   33ac0:	ldrd	r6, [sp, #8]
   33ac4:	ldr	r8, [sp, #16]
   33ac8:	add	sp, sp, #20
   33acc:	pop	{pc}		; (ldr pc, [sp], #4)
   33ad0:	ldr	r3, [r0, #20]
   33ad4:	add	r2, r3, #1
   33ad8:	str	r2, [r0, #20]
   33adc:	mov	r2, #10
   33ae0:	strb	r2, [r3]
   33ae4:	ldrb	r3, [r0, #25]
   33ae8:	ldr	r8, [r0, #32]
   33aec:	mul	r8, r8, r3
   33af0:	ldr	r0, [r0, #20]
   33af4:	add	r3, r0, r8
   33af8:	ldr	r2, [r4, #16]
   33afc:	cmp	r2, r3
   33b00:	bcs	33b14 <flatcc_json_printer_int32_field@@Base+0x1d0>
   33b04:	mov	r1, r8
   33b08:	mov	r0, r4
   33b0c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   33b10:	b	33a10 <flatcc_json_printer_int32_field@@Base+0xcc>
   33b14:	mov	r2, r8
   33b18:	mov	r1, #32
   33b1c:	bl	1459c <memset@plt>
   33b20:	ldr	r3, [r4, #20]
   33b24:	add	r8, r3, r8
   33b28:	str	r8, [r4, #20]
   33b2c:	b	33a10 <flatcc_json_printer_int32_field@@Base+0xcc>
   33b30:	mov	r2, r6
   33b34:	mov	r1, r7
   33b38:	mov	r0, r4
   33b3c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   33b40:	b	33a58 <flatcc_json_printer_int32_field@@Base+0x114>

00033b44 <flatcc_json_printer_int64_field@@Base>:
   33b44:	strd	r4, [sp, #-32]!	; 0xffffffe0
   33b48:	strd	r6, [sp, #8]
   33b4c:	strd	r8, [sp, #16]
   33b50:	str	sl, [sp, #24]
   33b54:	str	lr, [sp, #28]
   33b58:	ldr	r5, [sp, #32]
   33b5c:	add	r2, r2, #2
   33b60:	lsl	r2, r2, #1
   33b64:	ldr	ip, [r1, #8]
   33b68:	cmp	r2, ip
   33b6c:	bge	33bb0 <flatcc_json_printer_int64_field@@Base+0x6c>
   33b70:	ldr	ip, [r1, #4]
   33b74:	ldrh	r2, [ip, r2]
   33b78:	cmp	r2, #0
   33b7c:	beq	33bb0 <flatcc_json_printer_int64_field@@Base+0x6c>
   33b80:	ldr	ip, [r1]
   33b84:	cmn	ip, r2
   33b88:	beq	33bb0 <flatcc_json_printer_int64_field@@Base+0x6c>
   33b8c:	ldrd	r6, [ip, r2]
   33b90:	ldrd	r8, [sp, #40]	; 0x28
   33b94:	cmp	r9, r7
   33b98:	cmpeq	r8, r6
   33b9c:	bne	33bc0 <flatcc_json_printer_int64_field@@Base+0x7c>
   33ba0:	ldrb	r2, [r0, #28]
   33ba4:	cmp	r2, #0
   33ba8:	beq	33bc0 <flatcc_json_printer_int64_field@@Base+0x7c>
   33bac:	b	33cc8 <flatcc_json_printer_int64_field@@Base+0x184>
   33bb0:	ldrb	r2, [r0, #29]
   33bb4:	cmp	r2, #0
   33bb8:	beq	33cc8 <flatcc_json_printer_int64_field@@Base+0x184>
   33bbc:	ldrd	r6, [sp, #40]	; 0x28
   33bc0:	ldr	r2, [r1, #16]
   33bc4:	add	ip, r2, #1
   33bc8:	str	ip, [r1, #16]
   33bcc:	cmp	r2, #0
   33bd0:	beq	33be8 <flatcc_json_printer_int64_field@@Base+0xa4>
   33bd4:	ldr	r2, [r0, #20]
   33bd8:	add	r1, r2, #1
   33bdc:	str	r1, [r0, #20]
   33be0:	mov	r1, #44	; 0x2c
   33be4:	strb	r1, [r2]
   33be8:	mov	r8, r3
   33bec:	mov	r4, r0
   33bf0:	ldrb	r3, [r0, #25]
   33bf4:	cmp	r3, #0
   33bf8:	bne	33ce0 <flatcc_json_printer_int64_field@@Base+0x19c>
   33bfc:	ldr	r2, [r0, #20]
   33c00:	ldr	r3, [r0, #16]
   33c04:	cmp	r2, r3
   33c08:	bcc	33c18 <flatcc_json_printer_int64_field@@Base+0xd4>
   33c0c:	ldr	r3, [r0, #44]	; 0x2c
   33c10:	mov	r1, #0
   33c14:	blx	r3
   33c18:	ldr	r3, [r4, #20]
   33c1c:	mov	r2, #34	; 0x22
   33c20:	strb	r2, [r3]
   33c24:	ldrb	r3, [r4, #26]
   33c28:	ldr	r0, [r4, #20]
   33c2c:	cmp	r3, #0
   33c30:	addeq	r0, r0, #1
   33c34:	str	r0, [r4, #20]
   33c38:	add	r3, r0, r5
   33c3c:	ldr	r2, [r4, #16]
   33c40:	cmp	r2, r3
   33c44:	bls	33d40 <flatcc_json_printer_int64_field@@Base+0x1fc>
   33c48:	mov	r2, r5
   33c4c:	mov	r1, r8
   33c50:	bl	14524 <memcpy@plt>
   33c54:	ldr	r3, [r4, #20]
   33c58:	add	r5, r3, r5
   33c5c:	str	r5, [r4, #20]
   33c60:	ldr	r3, [r4, #20]
   33c64:	mov	r2, #34	; 0x22
   33c68:	strb	r2, [r3]
   33c6c:	ldrb	r3, [r4, #26]
   33c70:	clz	r3, r3
   33c74:	lsr	r3, r3, #5
   33c78:	ldr	r1, [r4, #20]
   33c7c:	add	r2, r1, r3
   33c80:	add	r2, r2, #1
   33c84:	str	r2, [r4, #20]
   33c88:	mov	r2, #58	; 0x3a
   33c8c:	strb	r2, [r1, r3]
   33c90:	ldr	r3, [r4, #20]
   33c94:	mov	r2, #32
   33c98:	strb	r2, [r3]
   33c9c:	ldrb	r3, [r4, #25]
   33ca0:	ldr	r2, [r4, #20]
   33ca4:	cmp	r3, #0
   33ca8:	addne	r2, r2, #1
   33cac:	str	r2, [r4, #20]
   33cb0:	mov	r0, r6
   33cb4:	mov	r1, r7
   33cb8:	bl	308b4 <flatcc_json_parser_struct_as_root@@Base+0xe2c>
   33cbc:	ldr	r3, [r4, #20]
   33cc0:	add	r0, r3, r0
   33cc4:	str	r0, [r4, #20]
   33cc8:	ldrd	r4, [sp]
   33ccc:	ldrd	r6, [sp, #8]
   33cd0:	ldrd	r8, [sp, #16]
   33cd4:	ldr	sl, [sp, #24]
   33cd8:	add	sp, sp, #28
   33cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   33ce0:	ldr	r3, [r0, #20]
   33ce4:	add	r2, r3, #1
   33ce8:	str	r2, [r0, #20]
   33cec:	mov	r2, #10
   33cf0:	strb	r2, [r3]
   33cf4:	ldrb	r3, [r0, #25]
   33cf8:	ldr	r9, [r0, #32]
   33cfc:	mul	r9, r9, r3
   33d00:	ldr	r0, [r0, #20]
   33d04:	add	r3, r0, r9
   33d08:	ldr	r2, [r4, #16]
   33d0c:	cmp	r2, r3
   33d10:	bcs	33d24 <flatcc_json_printer_int64_field@@Base+0x1e0>
   33d14:	mov	r1, r9
   33d18:	mov	r0, r4
   33d1c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   33d20:	b	33c18 <flatcc_json_printer_int64_field@@Base+0xd4>
   33d24:	mov	r2, r9
   33d28:	mov	r1, #32
   33d2c:	bl	1459c <memset@plt>
   33d30:	ldr	r3, [r4, #20]
   33d34:	add	r9, r3, r9
   33d38:	str	r9, [r4, #20]
   33d3c:	b	33c18 <flatcc_json_printer_int64_field@@Base+0xd4>
   33d40:	mov	r2, r5
   33d44:	mov	r1, r8
   33d48:	mov	r0, r4
   33d4c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   33d50:	b	33c60 <flatcc_json_printer_int64_field@@Base+0x11c>

00033d54 <flatcc_json_printer_bool_field@@Base>:
   33d54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33d58:	strd	r6, [sp, #8]
   33d5c:	str	r8, [sp, #16]
   33d60:	str	lr, [sp, #20]
   33d64:	ldr	r6, [sp, #24]
   33d68:	ldrb	lr, [sp, #28]
   33d6c:	add	r2, r2, #2
   33d70:	lsl	r2, r2, #1
   33d74:	ldr	ip, [r1, #8]
   33d78:	cmp	r2, ip
   33d7c:	bge	33db8 <flatcc_json_printer_bool_field@@Base+0x64>
   33d80:	ldr	ip, [r1, #4]
   33d84:	ldrh	r2, [ip, r2]
   33d88:	cmp	r2, #0
   33d8c:	beq	33db8 <flatcc_json_printer_bool_field@@Base+0x64>
   33d90:	ldr	ip, [r1]
   33d94:	cmn	ip, r2
   33d98:	beq	33db8 <flatcc_json_printer_bool_field@@Base+0x64>
   33d9c:	ldrb	r5, [ip, r2]
   33da0:	cmp	lr, r5
   33da4:	bne	33dc8 <flatcc_json_printer_bool_field@@Base+0x74>
   33da8:	ldrb	r2, [r0, #28]
   33dac:	cmp	r2, #0
   33db0:	beq	33dc8 <flatcc_json_printer_bool_field@@Base+0x74>
   33db4:	b	33ecc <flatcc_json_printer_bool_field@@Base+0x178>
   33db8:	ldrb	r2, [r0, #29]
   33dbc:	cmp	r2, #0
   33dc0:	beq	33ecc <flatcc_json_printer_bool_field@@Base+0x178>
   33dc4:	mov	r5, lr
   33dc8:	ldr	r2, [r1, #16]
   33dcc:	add	ip, r2, #1
   33dd0:	str	ip, [r1, #16]
   33dd4:	cmp	r2, #0
   33dd8:	beq	33df0 <flatcc_json_printer_bool_field@@Base+0x9c>
   33ddc:	ldr	r2, [r0, #20]
   33de0:	add	r1, r2, #1
   33de4:	str	r1, [r0, #20]
   33de8:	mov	r1, #44	; 0x2c
   33dec:	strb	r1, [r2]
   33df0:	mov	r7, r3
   33df4:	mov	r4, r0
   33df8:	ldrb	r3, [r0, #25]
   33dfc:	cmp	r3, #0
   33e00:	bne	33ee0 <flatcc_json_printer_bool_field@@Base+0x18c>
   33e04:	ldr	r2, [r0, #20]
   33e08:	ldr	r3, [r0, #16]
   33e0c:	cmp	r2, r3
   33e10:	bcc	33e20 <flatcc_json_printer_bool_field@@Base+0xcc>
   33e14:	ldr	r3, [r0, #44]	; 0x2c
   33e18:	mov	r1, #0
   33e1c:	blx	r3
   33e20:	ldr	r3, [r4, #20]
   33e24:	mov	r2, #34	; 0x22
   33e28:	strb	r2, [r3]
   33e2c:	ldrb	r3, [r4, #26]
   33e30:	ldr	r0, [r4, #20]
   33e34:	cmp	r3, #0
   33e38:	addeq	r0, r0, #1
   33e3c:	str	r0, [r4, #20]
   33e40:	add	r3, r0, r6
   33e44:	ldr	r2, [r4, #16]
   33e48:	cmp	r2, r3
   33e4c:	bls	33f40 <flatcc_json_printer_bool_field@@Base+0x1ec>
   33e50:	mov	r2, r6
   33e54:	mov	r1, r7
   33e58:	bl	14524 <memcpy@plt>
   33e5c:	ldr	r3, [r4, #20]
   33e60:	add	r6, r3, r6
   33e64:	str	r6, [r4, #20]
   33e68:	ldr	r3, [r4, #20]
   33e6c:	mov	r2, #34	; 0x22
   33e70:	strb	r2, [r3]
   33e74:	ldrb	r3, [r4, #26]
   33e78:	clz	r3, r3
   33e7c:	lsr	r3, r3, #5
   33e80:	ldr	r1, [r4, #20]
   33e84:	add	r2, r1, r3
   33e88:	add	r2, r2, #1
   33e8c:	str	r2, [r4, #20]
   33e90:	mov	r2, #58	; 0x3a
   33e94:	strb	r2, [r1, r3]
   33e98:	ldr	r3, [r4, #20]
   33e9c:	mov	r2, #32
   33ea0:	strb	r2, [r3]
   33ea4:	ldrb	r3, [r4, #25]
   33ea8:	ldr	r1, [r4, #20]
   33eac:	cmp	r3, #0
   33eb0:	addne	r1, r1, #1
   33eb4:	str	r1, [r4, #20]
   33eb8:	mov	r0, r5
   33ebc:	bl	310a8 <flatcc_json_parser_struct_as_root@@Base+0x1620>
   33ec0:	ldr	r3, [r4, #20]
   33ec4:	add	r0, r3, r0
   33ec8:	str	r0, [r4, #20]
   33ecc:	ldrd	r4, [sp]
   33ed0:	ldrd	r6, [sp, #8]
   33ed4:	ldr	r8, [sp, #16]
   33ed8:	add	sp, sp, #20
   33edc:	pop	{pc}		; (ldr pc, [sp], #4)
   33ee0:	ldr	r3, [r0, #20]
   33ee4:	add	r2, r3, #1
   33ee8:	str	r2, [r0, #20]
   33eec:	mov	r2, #10
   33ef0:	strb	r2, [r3]
   33ef4:	ldrb	r3, [r0, #25]
   33ef8:	ldr	r8, [r0, #32]
   33efc:	mul	r8, r8, r3
   33f00:	ldr	r0, [r0, #20]
   33f04:	add	r3, r0, r8
   33f08:	ldr	r2, [r4, #16]
   33f0c:	cmp	r2, r3
   33f10:	bcs	33f24 <flatcc_json_printer_bool_field@@Base+0x1d0>
   33f14:	mov	r1, r8
   33f18:	mov	r0, r4
   33f1c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   33f20:	b	33e20 <flatcc_json_printer_bool_field@@Base+0xcc>
   33f24:	mov	r2, r8
   33f28:	mov	r1, #32
   33f2c:	bl	1459c <memset@plt>
   33f30:	ldr	r3, [r4, #20]
   33f34:	add	r8, r3, r8
   33f38:	str	r8, [r4, #20]
   33f3c:	b	33e20 <flatcc_json_printer_bool_field@@Base+0xcc>
   33f40:	mov	r2, r6
   33f44:	mov	r1, r7
   33f48:	mov	r0, r4
   33f4c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   33f50:	b	33e68 <flatcc_json_printer_bool_field@@Base+0x114>

00033f54 <flatcc_json_printer_float_field@@Base>:
   33f54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   33f58:	strd	r6, [sp, #8]
   33f5c:	str	r8, [sp, #16]
   33f60:	str	lr, [sp, #20]
   33f64:	vpush	{d8}
   33f68:	ldr	r5, [sp, #32]
   33f6c:	add	r2, r2, #2
   33f70:	lsl	r2, r2, #1
   33f74:	ldr	ip, [r1, #8]
   33f78:	cmp	r2, ip
   33f7c:	bge	33fbc <flatcc_json_printer_float_field@@Base+0x68>
   33f80:	ldr	ip, [r1, #4]
   33f84:	ldrh	ip, [ip, r2]
   33f88:	cmp	ip, #0
   33f8c:	beq	33fbc <flatcc_json_printer_float_field@@Base+0x68>
   33f90:	ldr	r2, [r1]
   33f94:	adds	r2, r2, ip
   33f98:	beq	33fbc <flatcc_json_printer_float_field@@Base+0x68>
   33f9c:	vldr	s16, [r2]
   33fa0:	vcmp.f32	s0, s16
   33fa4:	vmrs	APSR_nzcv, fpscr
   33fa8:	bne	33fcc <flatcc_json_printer_float_field@@Base+0x78>
   33fac:	ldrb	r2, [r0, #28]
   33fb0:	cmp	r2, #0
   33fb4:	beq	33fcc <flatcc_json_printer_float_field@@Base+0x78>
   33fb8:	b	340d0 <flatcc_json_printer_float_field@@Base+0x17c>
   33fbc:	ldrb	r2, [r0, #29]
   33fc0:	cmp	r2, #0
   33fc4:	beq	340d0 <flatcc_json_printer_float_field@@Base+0x17c>
   33fc8:	vmov.f32	s16, s0
   33fcc:	ldr	r2, [r1, #16]
   33fd0:	add	ip, r2, #1
   33fd4:	str	ip, [r1, #16]
   33fd8:	cmp	r2, #0
   33fdc:	beq	33ff4 <flatcc_json_printer_float_field@@Base+0xa0>
   33fe0:	ldr	r2, [r0, #20]
   33fe4:	add	r1, r2, #1
   33fe8:	str	r1, [r0, #20]
   33fec:	mov	r1, #44	; 0x2c
   33ff0:	strb	r1, [r2]
   33ff4:	mov	r6, r3
   33ff8:	mov	r4, r0
   33ffc:	ldrb	r3, [r0, #25]
   34000:	cmp	r3, #0
   34004:	bne	340e8 <flatcc_json_printer_float_field@@Base+0x194>
   34008:	ldr	r2, [r0, #20]
   3400c:	ldr	r3, [r0, #16]
   34010:	cmp	r2, r3
   34014:	bcc	34024 <flatcc_json_printer_float_field@@Base+0xd0>
   34018:	ldr	r3, [r0, #44]	; 0x2c
   3401c:	mov	r1, #0
   34020:	blx	r3
   34024:	ldr	r3, [r4, #20]
   34028:	mov	r2, #34	; 0x22
   3402c:	strb	r2, [r3]
   34030:	ldrb	r3, [r4, #26]
   34034:	ldr	r0, [r4, #20]
   34038:	cmp	r3, #0
   3403c:	addeq	r0, r0, #1
   34040:	str	r0, [r4, #20]
   34044:	add	r3, r0, r5
   34048:	ldr	r2, [r4, #16]
   3404c:	cmp	r2, r3
   34050:	bls	34148 <flatcc_json_printer_float_field@@Base+0x1f4>
   34054:	mov	r2, r5
   34058:	mov	r1, r6
   3405c:	bl	14524 <memcpy@plt>
   34060:	ldr	r3, [r4, #20]
   34064:	add	r5, r3, r5
   34068:	str	r5, [r4, #20]
   3406c:	ldr	r3, [r4, #20]
   34070:	mov	r2, #34	; 0x22
   34074:	strb	r2, [r3]
   34078:	ldrb	r3, [r4, #26]
   3407c:	clz	r3, r3
   34080:	lsr	r3, r3, #5
   34084:	ldr	r1, [r4, #20]
   34088:	add	r2, r1, r3
   3408c:	add	r2, r2, #1
   34090:	str	r2, [r4, #20]
   34094:	mov	r2, #58	; 0x3a
   34098:	strb	r2, [r1, r3]
   3409c:	ldr	r3, [r4, #20]
   340a0:	mov	r2, #32
   340a4:	strb	r2, [r3]
   340a8:	ldrb	r3, [r4, #25]
   340ac:	ldr	r0, [r4, #20]
   340b0:	cmp	r3, #0
   340b4:	addne	r0, r0, #1
   340b8:	str	r0, [r4, #20]
   340bc:	vcvt.f64.f32	d0, s16
   340c0:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   340c4:	ldr	r3, [r4, #20]
   340c8:	add	r0, r3, r0
   340cc:	str	r0, [r4, #20]
   340d0:	vpop	{d8}
   340d4:	ldrd	r4, [sp]
   340d8:	ldrd	r6, [sp, #8]
   340dc:	ldr	r8, [sp, #16]
   340e0:	add	sp, sp, #20
   340e4:	pop	{pc}		; (ldr pc, [sp], #4)
   340e8:	ldr	r3, [r0, #20]
   340ec:	add	r2, r3, #1
   340f0:	str	r2, [r0, #20]
   340f4:	mov	r2, #10
   340f8:	strb	r2, [r3]
   340fc:	ldrb	r3, [r0, #25]
   34100:	ldr	r7, [r0, #32]
   34104:	mul	r7, r7, r3
   34108:	ldr	r0, [r0, #20]
   3410c:	add	r3, r0, r7
   34110:	ldr	r2, [r4, #16]
   34114:	cmp	r2, r3
   34118:	bcs	3412c <flatcc_json_printer_float_field@@Base+0x1d8>
   3411c:	mov	r1, r7
   34120:	mov	r0, r4
   34124:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   34128:	b	34024 <flatcc_json_printer_float_field@@Base+0xd0>
   3412c:	mov	r2, r7
   34130:	mov	r1, #32
   34134:	bl	1459c <memset@plt>
   34138:	ldr	r3, [r4, #20]
   3413c:	add	r7, r3, r7
   34140:	str	r7, [r4, #20]
   34144:	b	34024 <flatcc_json_printer_float_field@@Base+0xd0>
   34148:	mov	r2, r5
   3414c:	mov	r1, r6
   34150:	mov	r0, r4
   34154:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   34158:	b	3406c <flatcc_json_printer_float_field@@Base+0x118>

0003415c <flatcc_json_printer_double_field@@Base>:
   3415c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34160:	strd	r6, [sp, #8]
   34164:	str	r8, [sp, #16]
   34168:	str	lr, [sp, #20]
   3416c:	vpush	{d8}
   34170:	ldr	r5, [sp, #32]
   34174:	add	r2, r2, #2
   34178:	lsl	r2, r2, #1
   3417c:	ldr	ip, [r1, #8]
   34180:	cmp	r2, ip
   34184:	bge	341c4 <flatcc_json_printer_double_field@@Base+0x68>
   34188:	ldr	ip, [r1, #4]
   3418c:	ldrh	ip, [ip, r2]
   34190:	cmp	ip, #0
   34194:	beq	341c4 <flatcc_json_printer_double_field@@Base+0x68>
   34198:	ldr	r2, [r1]
   3419c:	adds	r2, r2, ip
   341a0:	beq	341c4 <flatcc_json_printer_double_field@@Base+0x68>
   341a4:	vldr	d8, [r2]
   341a8:	vcmp.f64	d0, d8
   341ac:	vmrs	APSR_nzcv, fpscr
   341b0:	bne	341d4 <flatcc_json_printer_double_field@@Base+0x78>
   341b4:	ldrb	r2, [r0, #28]
   341b8:	cmp	r2, #0
   341bc:	beq	341d4 <flatcc_json_printer_double_field@@Base+0x78>
   341c0:	b	342d8 <flatcc_json_printer_double_field@@Base+0x17c>
   341c4:	ldrb	r2, [r0, #29]
   341c8:	cmp	r2, #0
   341cc:	beq	342d8 <flatcc_json_printer_double_field@@Base+0x17c>
   341d0:	vmov.f64	d8, d0
   341d4:	ldr	r2, [r1, #16]
   341d8:	add	ip, r2, #1
   341dc:	str	ip, [r1, #16]
   341e0:	cmp	r2, #0
   341e4:	beq	341fc <flatcc_json_printer_double_field@@Base+0xa0>
   341e8:	ldr	r2, [r0, #20]
   341ec:	add	r1, r2, #1
   341f0:	str	r1, [r0, #20]
   341f4:	mov	r1, #44	; 0x2c
   341f8:	strb	r1, [r2]
   341fc:	mov	r6, r3
   34200:	mov	r4, r0
   34204:	ldrb	r3, [r0, #25]
   34208:	cmp	r3, #0
   3420c:	bne	342f0 <flatcc_json_printer_double_field@@Base+0x194>
   34210:	ldr	r2, [r0, #20]
   34214:	ldr	r3, [r0, #16]
   34218:	cmp	r2, r3
   3421c:	bcc	3422c <flatcc_json_printer_double_field@@Base+0xd0>
   34220:	ldr	r3, [r0, #44]	; 0x2c
   34224:	mov	r1, #0
   34228:	blx	r3
   3422c:	ldr	r3, [r4, #20]
   34230:	mov	r2, #34	; 0x22
   34234:	strb	r2, [r3]
   34238:	ldrb	r3, [r4, #26]
   3423c:	ldr	r0, [r4, #20]
   34240:	cmp	r3, #0
   34244:	addeq	r0, r0, #1
   34248:	str	r0, [r4, #20]
   3424c:	add	r3, r0, r5
   34250:	ldr	r2, [r4, #16]
   34254:	cmp	r2, r3
   34258:	bls	34350 <flatcc_json_printer_double_field@@Base+0x1f4>
   3425c:	mov	r2, r5
   34260:	mov	r1, r6
   34264:	bl	14524 <memcpy@plt>
   34268:	ldr	r3, [r4, #20]
   3426c:	add	r5, r3, r5
   34270:	str	r5, [r4, #20]
   34274:	ldr	r3, [r4, #20]
   34278:	mov	r2, #34	; 0x22
   3427c:	strb	r2, [r3]
   34280:	ldrb	r3, [r4, #26]
   34284:	clz	r3, r3
   34288:	lsr	r3, r3, #5
   3428c:	ldr	r1, [r4, #20]
   34290:	add	r2, r1, r3
   34294:	add	r2, r2, #1
   34298:	str	r2, [r4, #20]
   3429c:	mov	r2, #58	; 0x3a
   342a0:	strb	r2, [r1, r3]
   342a4:	ldr	r3, [r4, #20]
   342a8:	mov	r2, #32
   342ac:	strb	r2, [r3]
   342b0:	ldrb	r3, [r4, #25]
   342b4:	ldr	r0, [r4, #20]
   342b8:	cmp	r3, #0
   342bc:	addne	r0, r0, #1
   342c0:	str	r0, [r4, #20]
   342c4:	vmov.f64	d0, d8
   342c8:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   342cc:	ldr	r3, [r4, #20]
   342d0:	add	r0, r3, r0
   342d4:	str	r0, [r4, #20]
   342d8:	vpop	{d8}
   342dc:	ldrd	r4, [sp]
   342e0:	ldrd	r6, [sp, #8]
   342e4:	ldr	r8, [sp, #16]
   342e8:	add	sp, sp, #20
   342ec:	pop	{pc}		; (ldr pc, [sp], #4)
   342f0:	ldr	r3, [r0, #20]
   342f4:	add	r2, r3, #1
   342f8:	str	r2, [r0, #20]
   342fc:	mov	r2, #10
   34300:	strb	r2, [r3]
   34304:	ldrb	r3, [r0, #25]
   34308:	ldr	r7, [r0, #32]
   3430c:	mul	r7, r7, r3
   34310:	ldr	r0, [r0, #20]
   34314:	add	r3, r0, r7
   34318:	ldr	r2, [r4, #16]
   3431c:	cmp	r2, r3
   34320:	bcs	34334 <flatcc_json_printer_double_field@@Base+0x1d8>
   34324:	mov	r1, r7
   34328:	mov	r0, r4
   3432c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   34330:	b	3422c <flatcc_json_printer_double_field@@Base+0xd0>
   34334:	mov	r2, r7
   34338:	mov	r1, #32
   3433c:	bl	1459c <memset@plt>
   34340:	ldr	r3, [r4, #20]
   34344:	add	r7, r3, r7
   34348:	str	r7, [r4, #20]
   3434c:	b	3422c <flatcc_json_printer_double_field@@Base+0xd0>
   34350:	mov	r2, r5
   34354:	mov	r1, r6
   34358:	mov	r0, r4
   3435c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   34360:	b	34274 <flatcc_json_printer_double_field@@Base+0x118>

00034364 <flatcc_json_printer_uint8_enum_field@@Base>:
   34364:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34368:	strd	r6, [sp, #8]
   3436c:	str	r8, [sp, #16]
   34370:	str	lr, [sp, #20]
   34374:	ldr	r6, [sp, #24]
   34378:	ldrb	lr, [sp, #28]
   3437c:	add	r2, r2, #2
   34380:	lsl	r2, r2, #1
   34384:	ldr	ip, [r1, #8]
   34388:	cmp	r2, ip
   3438c:	bge	343c8 <flatcc_json_printer_uint8_enum_field@@Base+0x64>
   34390:	ldr	ip, [r1, #4]
   34394:	ldrh	r2, [ip, r2]
   34398:	cmp	r2, #0
   3439c:	beq	343c8 <flatcc_json_printer_uint8_enum_field@@Base+0x64>
   343a0:	ldr	ip, [r1]
   343a4:	cmn	ip, r2
   343a8:	beq	343c8 <flatcc_json_printer_uint8_enum_field@@Base+0x64>
   343ac:	ldrb	r5, [ip, r2]
   343b0:	cmp	lr, r5
   343b4:	bne	343d8 <flatcc_json_printer_uint8_enum_field@@Base+0x74>
   343b8:	ldrb	r2, [r0, #28]
   343bc:	cmp	r2, #0
   343c0:	beq	343d8 <flatcc_json_printer_uint8_enum_field@@Base+0x74>
   343c4:	b	344e4 <flatcc_json_printer_uint8_enum_field@@Base+0x180>
   343c8:	ldrb	r2, [r0, #29]
   343cc:	cmp	r2, #0
   343d0:	beq	344e4 <flatcc_json_printer_uint8_enum_field@@Base+0x180>
   343d4:	mov	r5, lr
   343d8:	ldr	r2, [r1, #16]
   343dc:	add	ip, r2, #1
   343e0:	str	ip, [r1, #16]
   343e4:	cmp	r2, #0
   343e8:	beq	34400 <flatcc_json_printer_uint8_enum_field@@Base+0x9c>
   343ec:	ldr	r2, [r0, #20]
   343f0:	add	r1, r2, #1
   343f4:	str	r1, [r0, #20]
   343f8:	mov	r1, #44	; 0x2c
   343fc:	strb	r1, [r2]
   34400:	mov	r7, r3
   34404:	mov	r4, r0
   34408:	ldrb	r3, [r0, #25]
   3440c:	cmp	r3, #0
   34410:	bne	344f8 <flatcc_json_printer_uint8_enum_field@@Base+0x194>
   34414:	ldr	r2, [r0, #20]
   34418:	ldr	r3, [r0, #16]
   3441c:	cmp	r2, r3
   34420:	bcc	34430 <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   34424:	ldr	r3, [r0, #44]	; 0x2c
   34428:	mov	r1, #0
   3442c:	blx	r3
   34430:	ldr	r3, [r4, #20]
   34434:	mov	r2, #34	; 0x22
   34438:	strb	r2, [r3]
   3443c:	ldrb	r3, [r4, #26]
   34440:	ldr	r0, [r4, #20]
   34444:	cmp	r3, #0
   34448:	addeq	r0, r0, #1
   3444c:	str	r0, [r4, #20]
   34450:	add	r3, r0, r6
   34454:	ldr	r2, [r4, #16]
   34458:	cmp	r2, r3
   3445c:	bls	34558 <flatcc_json_printer_uint8_enum_field@@Base+0x1f4>
   34460:	mov	r2, r6
   34464:	mov	r1, r7
   34468:	bl	14524 <memcpy@plt>
   3446c:	ldr	r3, [r4, #20]
   34470:	add	r6, r3, r6
   34474:	str	r6, [r4, #20]
   34478:	ldr	r3, [r4, #20]
   3447c:	mov	r2, #34	; 0x22
   34480:	strb	r2, [r3]
   34484:	ldrb	r3, [r4, #26]
   34488:	clz	r3, r3
   3448c:	lsr	r3, r3, #5
   34490:	ldr	r1, [r4, #20]
   34494:	add	r2, r1, r3
   34498:	add	r2, r2, #1
   3449c:	str	r2, [r4, #20]
   344a0:	mov	r2, #58	; 0x3a
   344a4:	strb	r2, [r1, r3]
   344a8:	ldr	r3, [r4, #20]
   344ac:	mov	r2, #32
   344b0:	strb	r2, [r3]
   344b4:	ldrb	r3, [r4, #25]
   344b8:	ldr	r1, [r4, #20]
   344bc:	cmp	r3, #0
   344c0:	addne	r1, r1, #1
   344c4:	str	r1, [r4, #20]
   344c8:	ldrb	r3, [r4, #27]
   344cc:	cmp	r3, #0
   344d0:	bne	3456c <flatcc_json_printer_uint8_enum_field@@Base+0x208>
   344d4:	mov	r1, r5
   344d8:	mov	r0, r4
   344dc:	ldr	r3, [sp, #32]
   344e0:	blx	r3
   344e4:	ldrd	r4, [sp]
   344e8:	ldrd	r6, [sp, #8]
   344ec:	ldr	r8, [sp, #16]
   344f0:	add	sp, sp, #20
   344f4:	pop	{pc}		; (ldr pc, [sp], #4)
   344f8:	ldr	r3, [r0, #20]
   344fc:	add	r2, r3, #1
   34500:	str	r2, [r0, #20]
   34504:	mov	r2, #10
   34508:	strb	r2, [r3]
   3450c:	ldrb	r3, [r0, #25]
   34510:	ldr	r8, [r0, #32]
   34514:	mul	r8, r8, r3
   34518:	ldr	r0, [r0, #20]
   3451c:	add	r3, r0, r8
   34520:	ldr	r2, [r4, #16]
   34524:	cmp	r2, r3
   34528:	bcs	3453c <flatcc_json_printer_uint8_enum_field@@Base+0x1d8>
   3452c:	mov	r1, r8
   34530:	mov	r0, r4
   34534:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   34538:	b	34430 <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   3453c:	mov	r2, r8
   34540:	mov	r1, #32
   34544:	bl	1459c <memset@plt>
   34548:	ldr	r3, [r4, #20]
   3454c:	add	r8, r3, r8
   34550:	str	r8, [r4, #20]
   34554:	b	34430 <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   34558:	mov	r2, r6
   3455c:	mov	r1, r7
   34560:	mov	r0, r4
   34564:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   34568:	b	34478 <flatcc_json_printer_uint8_enum_field@@Base+0x114>
   3456c:	mov	r0, r5
   34570:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   34574:	ldr	r3, [r4, #20]
   34578:	add	r0, r3, r0
   3457c:	str	r0, [r4, #20]
   34580:	b	344e4 <flatcc_json_printer_uint8_enum_field@@Base+0x180>

00034584 <flatcc_json_printer_uint16_enum_field@@Base>:
   34584:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34588:	strd	r6, [sp, #8]
   3458c:	str	r8, [sp, #16]
   34590:	str	lr, [sp, #20]
   34594:	ldr	r6, [sp, #24]
   34598:	ldrh	lr, [sp, #28]
   3459c:	add	r2, r2, #2
   345a0:	lsl	r2, r2, #1
   345a4:	ldr	ip, [r1, #8]
   345a8:	cmp	r2, ip
   345ac:	bge	345e8 <flatcc_json_printer_uint16_enum_field@@Base+0x64>
   345b0:	ldr	ip, [r1, #4]
   345b4:	ldrh	r2, [ip, r2]
   345b8:	cmp	r2, #0
   345bc:	beq	345e8 <flatcc_json_printer_uint16_enum_field@@Base+0x64>
   345c0:	ldr	ip, [r1]
   345c4:	cmn	ip, r2
   345c8:	beq	345e8 <flatcc_json_printer_uint16_enum_field@@Base+0x64>
   345cc:	ldrh	r5, [ip, r2]
   345d0:	cmp	lr, r5
   345d4:	bne	345f8 <flatcc_json_printer_uint16_enum_field@@Base+0x74>
   345d8:	ldrb	r2, [r0, #28]
   345dc:	cmp	r2, #0
   345e0:	beq	345f8 <flatcc_json_printer_uint16_enum_field@@Base+0x74>
   345e4:	b	34704 <flatcc_json_printer_uint16_enum_field@@Base+0x180>
   345e8:	ldrb	r2, [r0, #29]
   345ec:	cmp	r2, #0
   345f0:	beq	34704 <flatcc_json_printer_uint16_enum_field@@Base+0x180>
   345f4:	mov	r5, lr
   345f8:	ldr	r2, [r1, #16]
   345fc:	add	ip, r2, #1
   34600:	str	ip, [r1, #16]
   34604:	cmp	r2, #0
   34608:	beq	34620 <flatcc_json_printer_uint16_enum_field@@Base+0x9c>
   3460c:	ldr	r2, [r0, #20]
   34610:	add	r1, r2, #1
   34614:	str	r1, [r0, #20]
   34618:	mov	r1, #44	; 0x2c
   3461c:	strb	r1, [r2]
   34620:	mov	r7, r3
   34624:	mov	r4, r0
   34628:	ldrb	r3, [r0, #25]
   3462c:	cmp	r3, #0
   34630:	bne	34718 <flatcc_json_printer_uint16_enum_field@@Base+0x194>
   34634:	ldr	r2, [r0, #20]
   34638:	ldr	r3, [r0, #16]
   3463c:	cmp	r2, r3
   34640:	bcc	34650 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   34644:	ldr	r3, [r0, #44]	; 0x2c
   34648:	mov	r1, #0
   3464c:	blx	r3
   34650:	ldr	r3, [r4, #20]
   34654:	mov	r2, #34	; 0x22
   34658:	strb	r2, [r3]
   3465c:	ldrb	r3, [r4, #26]
   34660:	ldr	r0, [r4, #20]
   34664:	cmp	r3, #0
   34668:	addeq	r0, r0, #1
   3466c:	str	r0, [r4, #20]
   34670:	add	r3, r0, r6
   34674:	ldr	r2, [r4, #16]
   34678:	cmp	r2, r3
   3467c:	bls	34778 <flatcc_json_printer_uint16_enum_field@@Base+0x1f4>
   34680:	mov	r2, r6
   34684:	mov	r1, r7
   34688:	bl	14524 <memcpy@plt>
   3468c:	ldr	r3, [r4, #20]
   34690:	add	r6, r3, r6
   34694:	str	r6, [r4, #20]
   34698:	ldr	r3, [r4, #20]
   3469c:	mov	r2, #34	; 0x22
   346a0:	strb	r2, [r3]
   346a4:	ldrb	r3, [r4, #26]
   346a8:	clz	r3, r3
   346ac:	lsr	r3, r3, #5
   346b0:	ldr	r1, [r4, #20]
   346b4:	add	r2, r1, r3
   346b8:	add	r2, r2, #1
   346bc:	str	r2, [r4, #20]
   346c0:	mov	r2, #58	; 0x3a
   346c4:	strb	r2, [r1, r3]
   346c8:	ldr	r3, [r4, #20]
   346cc:	mov	r2, #32
   346d0:	strb	r2, [r3]
   346d4:	ldrb	r3, [r4, #25]
   346d8:	ldr	r1, [r4, #20]
   346dc:	cmp	r3, #0
   346e0:	addne	r1, r1, #1
   346e4:	str	r1, [r4, #20]
   346e8:	ldrb	r3, [r4, #27]
   346ec:	cmp	r3, #0
   346f0:	bne	3478c <flatcc_json_printer_uint16_enum_field@@Base+0x208>
   346f4:	mov	r1, r5
   346f8:	mov	r0, r4
   346fc:	ldr	r3, [sp, #32]
   34700:	blx	r3
   34704:	ldrd	r4, [sp]
   34708:	ldrd	r6, [sp, #8]
   3470c:	ldr	r8, [sp, #16]
   34710:	add	sp, sp, #20
   34714:	pop	{pc}		; (ldr pc, [sp], #4)
   34718:	ldr	r3, [r0, #20]
   3471c:	add	r2, r3, #1
   34720:	str	r2, [r0, #20]
   34724:	mov	r2, #10
   34728:	strb	r2, [r3]
   3472c:	ldrb	r3, [r0, #25]
   34730:	ldr	r8, [r0, #32]
   34734:	mul	r8, r8, r3
   34738:	ldr	r0, [r0, #20]
   3473c:	add	r3, r0, r8
   34740:	ldr	r2, [r4, #16]
   34744:	cmp	r2, r3
   34748:	bcs	3475c <flatcc_json_printer_uint16_enum_field@@Base+0x1d8>
   3474c:	mov	r1, r8
   34750:	mov	r0, r4
   34754:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   34758:	b	34650 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   3475c:	mov	r2, r8
   34760:	mov	r1, #32
   34764:	bl	1459c <memset@plt>
   34768:	ldr	r3, [r4, #20]
   3476c:	add	r8, r3, r8
   34770:	str	r8, [r4, #20]
   34774:	b	34650 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   34778:	mov	r2, r6
   3477c:	mov	r1, r7
   34780:	mov	r0, r4
   34784:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   34788:	b	34698 <flatcc_json_printer_uint16_enum_field@@Base+0x114>
   3478c:	mov	r0, r5
   34790:	bl	2fc28 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   34794:	ldr	r3, [r4, #20]
   34798:	add	r0, r3, r0
   3479c:	str	r0, [r4, #20]
   347a0:	b	34704 <flatcc_json_printer_uint16_enum_field@@Base+0x180>

000347a4 <flatcc_json_printer_uint32_enum_field@@Base>:
   347a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   347a8:	strd	r6, [sp, #8]
   347ac:	str	r8, [sp, #16]
   347b0:	str	lr, [sp, #20]
   347b4:	ldr	r6, [sp, #24]
   347b8:	add	r2, r2, #2
   347bc:	lsl	r2, r2, #1
   347c0:	ldr	ip, [r1, #8]
   347c4:	cmp	r2, ip
   347c8:	bge	34808 <flatcc_json_printer_uint32_enum_field@@Base+0x64>
   347cc:	ldr	ip, [r1, #4]
   347d0:	ldrh	r2, [ip, r2]
   347d4:	cmp	r2, #0
   347d8:	beq	34808 <flatcc_json_printer_uint32_enum_field@@Base+0x64>
   347dc:	ldr	ip, [r1]
   347e0:	cmn	ip, r2
   347e4:	beq	34808 <flatcc_json_printer_uint32_enum_field@@Base+0x64>
   347e8:	ldr	r5, [ip, r2]
   347ec:	ldr	r2, [sp, #28]
   347f0:	cmp	r2, r5
   347f4:	bne	34818 <flatcc_json_printer_uint32_enum_field@@Base+0x74>
   347f8:	ldrb	r2, [r0, #28]
   347fc:	cmp	r2, #0
   34800:	beq	34818 <flatcc_json_printer_uint32_enum_field@@Base+0x74>
   34804:	b	34924 <flatcc_json_printer_uint32_enum_field@@Base+0x180>
   34808:	ldrb	r2, [r0, #29]
   3480c:	cmp	r2, #0
   34810:	beq	34924 <flatcc_json_printer_uint32_enum_field@@Base+0x180>
   34814:	ldr	r5, [sp, #28]
   34818:	ldr	r2, [r1, #16]
   3481c:	add	ip, r2, #1
   34820:	str	ip, [r1, #16]
   34824:	cmp	r2, #0
   34828:	beq	34840 <flatcc_json_printer_uint32_enum_field@@Base+0x9c>
   3482c:	ldr	r2, [r0, #20]
   34830:	add	r1, r2, #1
   34834:	str	r1, [r0, #20]
   34838:	mov	r1, #44	; 0x2c
   3483c:	strb	r1, [r2]
   34840:	mov	r7, r3
   34844:	mov	r4, r0
   34848:	ldrb	r3, [r0, #25]
   3484c:	cmp	r3, #0
   34850:	bne	34938 <flatcc_json_printer_uint32_enum_field@@Base+0x194>
   34854:	ldr	r2, [r0, #20]
   34858:	ldr	r3, [r0, #16]
   3485c:	cmp	r2, r3
   34860:	bcc	34870 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   34864:	ldr	r3, [r0, #44]	; 0x2c
   34868:	mov	r1, #0
   3486c:	blx	r3
   34870:	ldr	r3, [r4, #20]
   34874:	mov	r2, #34	; 0x22
   34878:	strb	r2, [r3]
   3487c:	ldrb	r3, [r4, #26]
   34880:	ldr	r0, [r4, #20]
   34884:	cmp	r3, #0
   34888:	addeq	r0, r0, #1
   3488c:	str	r0, [r4, #20]
   34890:	add	r3, r0, r6
   34894:	ldr	r2, [r4, #16]
   34898:	cmp	r2, r3
   3489c:	bls	34998 <flatcc_json_printer_uint32_enum_field@@Base+0x1f4>
   348a0:	mov	r2, r6
   348a4:	mov	r1, r7
   348a8:	bl	14524 <memcpy@plt>
   348ac:	ldr	r3, [r4, #20]
   348b0:	add	r6, r3, r6
   348b4:	str	r6, [r4, #20]
   348b8:	ldr	r3, [r4, #20]
   348bc:	mov	r2, #34	; 0x22
   348c0:	strb	r2, [r3]
   348c4:	ldrb	r3, [r4, #26]
   348c8:	clz	r3, r3
   348cc:	lsr	r3, r3, #5
   348d0:	ldr	r1, [r4, #20]
   348d4:	add	r2, r1, r3
   348d8:	add	r2, r2, #1
   348dc:	str	r2, [r4, #20]
   348e0:	mov	r2, #58	; 0x3a
   348e4:	strb	r2, [r1, r3]
   348e8:	ldr	r3, [r4, #20]
   348ec:	mov	r2, #32
   348f0:	strb	r2, [r3]
   348f4:	ldrb	r3, [r4, #25]
   348f8:	ldr	r1, [r4, #20]
   348fc:	cmp	r3, #0
   34900:	addne	r1, r1, #1
   34904:	str	r1, [r4, #20]
   34908:	ldrb	r3, [r4, #27]
   3490c:	cmp	r3, #0
   34910:	bne	349ac <flatcc_json_printer_uint32_enum_field@@Base+0x208>
   34914:	mov	r1, r5
   34918:	mov	r0, r4
   3491c:	ldr	r3, [sp, #32]
   34920:	blx	r3
   34924:	ldrd	r4, [sp]
   34928:	ldrd	r6, [sp, #8]
   3492c:	ldr	r8, [sp, #16]
   34930:	add	sp, sp, #20
   34934:	pop	{pc}		; (ldr pc, [sp], #4)
   34938:	ldr	r3, [r0, #20]
   3493c:	add	r2, r3, #1
   34940:	str	r2, [r0, #20]
   34944:	mov	r2, #10
   34948:	strb	r2, [r3]
   3494c:	ldrb	r3, [r0, #25]
   34950:	ldr	r8, [r0, #32]
   34954:	mul	r8, r8, r3
   34958:	ldr	r0, [r0, #20]
   3495c:	add	r3, r0, r8
   34960:	ldr	r2, [r4, #16]
   34964:	cmp	r2, r3
   34968:	bcs	3497c <flatcc_json_printer_uint32_enum_field@@Base+0x1d8>
   3496c:	mov	r1, r8
   34970:	mov	r0, r4
   34974:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   34978:	b	34870 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   3497c:	mov	r2, r8
   34980:	mov	r1, #32
   34984:	bl	1459c <memset@plt>
   34988:	ldr	r3, [r4, #20]
   3498c:	add	r8, r3, r8
   34990:	str	r8, [r4, #20]
   34994:	b	34870 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   34998:	mov	r2, r6
   3499c:	mov	r1, r7
   349a0:	mov	r0, r4
   349a4:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   349a8:	b	348b8 <flatcc_json_printer_uint32_enum_field@@Base+0x114>
   349ac:	mov	r0, r5
   349b0:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   349b4:	ldr	r3, [r4, #20]
   349b8:	add	r0, r3, r0
   349bc:	str	r0, [r4, #20]
   349c0:	b	34924 <flatcc_json_printer_uint32_enum_field@@Base+0x180>

000349c4 <flatcc_json_printer_uint64_enum_field@@Base>:
   349c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   349c8:	strd	r6, [sp, #8]
   349cc:	strd	r8, [sp, #16]
   349d0:	str	sl, [sp, #24]
   349d4:	str	lr, [sp, #28]
   349d8:	ldr	r5, [sp, #32]
   349dc:	add	r2, r2, #2
   349e0:	lsl	r2, r2, #1
   349e4:	ldr	ip, [r1, #8]
   349e8:	cmp	r2, ip
   349ec:	bge	34a30 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   349f0:	ldr	ip, [r1, #4]
   349f4:	ldrh	r2, [ip, r2]
   349f8:	cmp	r2, #0
   349fc:	beq	34a30 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   34a00:	ldr	ip, [r1]
   34a04:	cmn	ip, r2
   34a08:	beq	34a30 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   34a0c:	ldrd	r6, [ip, r2]
   34a10:	ldrd	r8, [sp, #40]	; 0x28
   34a14:	cmp	r9, r7
   34a18:	cmpeq	r8, r6
   34a1c:	bne	34a40 <flatcc_json_printer_uint64_enum_field@@Base+0x7c>
   34a20:	ldrb	r2, [r0, #28]
   34a24:	cmp	r2, #0
   34a28:	beq	34a40 <flatcc_json_printer_uint64_enum_field@@Base+0x7c>
   34a2c:	b	34b50 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>
   34a30:	ldrb	r2, [r0, #29]
   34a34:	cmp	r2, #0
   34a38:	beq	34b50 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>
   34a3c:	ldrd	r6, [sp, #40]	; 0x28
   34a40:	ldr	r2, [r1, #16]
   34a44:	add	ip, r2, #1
   34a48:	str	ip, [r1, #16]
   34a4c:	cmp	r2, #0
   34a50:	beq	34a68 <flatcc_json_printer_uint64_enum_field@@Base+0xa4>
   34a54:	ldr	r2, [r0, #20]
   34a58:	add	r1, r2, #1
   34a5c:	str	r1, [r0, #20]
   34a60:	mov	r1, #44	; 0x2c
   34a64:	strb	r1, [r2]
   34a68:	mov	r8, r3
   34a6c:	mov	r4, r0
   34a70:	ldrb	r3, [r0, #25]
   34a74:	cmp	r3, #0
   34a78:	bne	34b68 <flatcc_json_printer_uint64_enum_field@@Base+0x1a4>
   34a7c:	ldr	r2, [r0, #20]
   34a80:	ldr	r3, [r0, #16]
   34a84:	cmp	r2, r3
   34a88:	bcc	34a98 <flatcc_json_printer_uint64_enum_field@@Base+0xd4>
   34a8c:	ldr	r3, [r0, #44]	; 0x2c
   34a90:	mov	r1, #0
   34a94:	blx	r3
   34a98:	ldr	r3, [r4, #20]
   34a9c:	mov	r2, #34	; 0x22
   34aa0:	strb	r2, [r3]
   34aa4:	ldrb	r3, [r4, #26]
   34aa8:	ldr	r0, [r4, #20]
   34aac:	cmp	r3, #0
   34ab0:	addeq	r0, r0, #1
   34ab4:	str	r0, [r4, #20]
   34ab8:	add	r3, r0, r5
   34abc:	ldr	r2, [r4, #16]
   34ac0:	cmp	r2, r3
   34ac4:	bls	34bc8 <flatcc_json_printer_uint64_enum_field@@Base+0x204>
   34ac8:	mov	r2, r5
   34acc:	mov	r1, r8
   34ad0:	bl	14524 <memcpy@plt>
   34ad4:	ldr	r3, [r4, #20]
   34ad8:	add	r5, r3, r5
   34adc:	str	r5, [r4, #20]
   34ae0:	ldr	r3, [r4, #20]
   34ae4:	mov	r2, #34	; 0x22
   34ae8:	strb	r2, [r3]
   34aec:	ldrb	r3, [r4, #26]
   34af0:	clz	r3, r3
   34af4:	lsr	r3, r3, #5
   34af8:	ldr	r1, [r4, #20]
   34afc:	add	r2, r1, r3
   34b00:	add	r2, r2, #1
   34b04:	str	r2, [r4, #20]
   34b08:	mov	r2, #58	; 0x3a
   34b0c:	strb	r2, [r1, r3]
   34b10:	ldr	r3, [r4, #20]
   34b14:	mov	r2, #32
   34b18:	strb	r2, [r3]
   34b1c:	ldrb	r3, [r4, #25]
   34b20:	ldr	r2, [r4, #20]
   34b24:	cmp	r3, #0
   34b28:	addne	r2, r2, #1
   34b2c:	str	r2, [r4, #20]
   34b30:	ldrb	r3, [r4, #27]
   34b34:	cmp	r3, #0
   34b38:	bne	34bdc <flatcc_json_printer_uint64_enum_field@@Base+0x218>
   34b3c:	mov	r2, r6
   34b40:	mov	r3, r7
   34b44:	mov	r0, r4
   34b48:	ldr	r1, [sp, #48]	; 0x30
   34b4c:	blx	r1
   34b50:	ldrd	r4, [sp]
   34b54:	ldrd	r6, [sp, #8]
   34b58:	ldrd	r8, [sp, #16]
   34b5c:	ldr	sl, [sp, #24]
   34b60:	add	sp, sp, #28
   34b64:	pop	{pc}		; (ldr pc, [sp], #4)
   34b68:	ldr	r3, [r0, #20]
   34b6c:	add	r2, r3, #1
   34b70:	str	r2, [r0, #20]
   34b74:	mov	r2, #10
   34b78:	strb	r2, [r3]
   34b7c:	ldrb	r3, [r0, #25]
   34b80:	ldr	r9, [r0, #32]
   34b84:	mul	r9, r9, r3
   34b88:	ldr	r0, [r0, #20]
   34b8c:	add	r3, r0, r9
   34b90:	ldr	r2, [r4, #16]
   34b94:	cmp	r2, r3
   34b98:	bcs	34bac <flatcc_json_printer_uint64_enum_field@@Base+0x1e8>
   34b9c:	mov	r1, r9
   34ba0:	mov	r0, r4
   34ba4:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   34ba8:	b	34a98 <flatcc_json_printer_uint64_enum_field@@Base+0xd4>
   34bac:	mov	r2, r9
   34bb0:	mov	r1, #32
   34bb4:	bl	1459c <memset@plt>
   34bb8:	ldr	r3, [r4, #20]
   34bbc:	add	r9, r3, r9
   34bc0:	str	r9, [r4, #20]
   34bc4:	b	34a98 <flatcc_json_printer_uint64_enum_field@@Base+0xd4>
   34bc8:	mov	r2, r5
   34bcc:	mov	r1, r8
   34bd0:	mov	r0, r4
   34bd4:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   34bd8:	b	34ae0 <flatcc_json_printer_uint64_enum_field@@Base+0x11c>
   34bdc:	mov	r0, r6
   34be0:	mov	r1, r7
   34be4:	bl	30120 <flatcc_json_parser_struct_as_root@@Base+0x698>
   34be8:	ldr	r3, [r4, #20]
   34bec:	add	r0, r3, r0
   34bf0:	str	r0, [r4, #20]
   34bf4:	b	34b50 <flatcc_json_printer_uint64_enum_field@@Base+0x18c>

00034bf8 <flatcc_json_printer_int8_enum_field@@Base>:
   34bf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34bfc:	strd	r6, [sp, #8]
   34c00:	str	r8, [sp, #16]
   34c04:	str	lr, [sp, #20]
   34c08:	ldr	r6, [sp, #24]
   34c0c:	ldrsb	lr, [sp, #28]
   34c10:	add	r2, r2, #2
   34c14:	lsl	r2, r2, #1
   34c18:	ldr	ip, [r1, #8]
   34c1c:	cmp	r2, ip
   34c20:	bge	34c5c <flatcc_json_printer_int8_enum_field@@Base+0x64>
   34c24:	ldr	ip, [r1, #4]
   34c28:	ldrh	r2, [ip, r2]
   34c2c:	cmp	r2, #0
   34c30:	beq	34c5c <flatcc_json_printer_int8_enum_field@@Base+0x64>
   34c34:	ldr	ip, [r1]
   34c38:	cmn	ip, r2
   34c3c:	beq	34c5c <flatcc_json_printer_int8_enum_field@@Base+0x64>
   34c40:	ldrsb	r5, [ip, r2]
   34c44:	cmp	lr, r5
   34c48:	bne	34c6c <flatcc_json_printer_int8_enum_field@@Base+0x74>
   34c4c:	ldrb	r2, [r0, #28]
   34c50:	cmp	r2, #0
   34c54:	beq	34c6c <flatcc_json_printer_int8_enum_field@@Base+0x74>
   34c58:	b	34d78 <flatcc_json_printer_int8_enum_field@@Base+0x180>
   34c5c:	ldrb	r2, [r0, #29]
   34c60:	cmp	r2, #0
   34c64:	beq	34d78 <flatcc_json_printer_int8_enum_field@@Base+0x180>
   34c68:	mov	r5, lr
   34c6c:	ldr	r2, [r1, #16]
   34c70:	add	ip, r2, #1
   34c74:	str	ip, [r1, #16]
   34c78:	cmp	r2, #0
   34c7c:	beq	34c94 <flatcc_json_printer_int8_enum_field@@Base+0x9c>
   34c80:	ldr	r2, [r0, #20]
   34c84:	add	r1, r2, #1
   34c88:	str	r1, [r0, #20]
   34c8c:	mov	r1, #44	; 0x2c
   34c90:	strb	r1, [r2]
   34c94:	mov	r7, r3
   34c98:	mov	r4, r0
   34c9c:	ldrb	r3, [r0, #25]
   34ca0:	cmp	r3, #0
   34ca4:	bne	34d8c <flatcc_json_printer_int8_enum_field@@Base+0x194>
   34ca8:	ldr	r2, [r0, #20]
   34cac:	ldr	r3, [r0, #16]
   34cb0:	cmp	r2, r3
   34cb4:	bcc	34cc4 <flatcc_json_printer_int8_enum_field@@Base+0xcc>
   34cb8:	ldr	r3, [r0, #44]	; 0x2c
   34cbc:	mov	r1, #0
   34cc0:	blx	r3
   34cc4:	ldr	r3, [r4, #20]
   34cc8:	mov	r2, #34	; 0x22
   34ccc:	strb	r2, [r3]
   34cd0:	ldrb	r3, [r4, #26]
   34cd4:	ldr	r0, [r4, #20]
   34cd8:	cmp	r3, #0
   34cdc:	addeq	r0, r0, #1
   34ce0:	str	r0, [r4, #20]
   34ce4:	add	r3, r0, r6
   34ce8:	ldr	r2, [r4, #16]
   34cec:	cmp	r2, r3
   34cf0:	bls	34dec <flatcc_json_printer_int8_enum_field@@Base+0x1f4>
   34cf4:	mov	r2, r6
   34cf8:	mov	r1, r7
   34cfc:	bl	14524 <memcpy@plt>
   34d00:	ldr	r3, [r4, #20]
   34d04:	add	r6, r3, r6
   34d08:	str	r6, [r4, #20]
   34d0c:	ldr	r3, [r4, #20]
   34d10:	mov	r2, #34	; 0x22
   34d14:	strb	r2, [r3]
   34d18:	ldrb	r3, [r4, #26]
   34d1c:	clz	r3, r3
   34d20:	lsr	r3, r3, #5
   34d24:	ldr	r1, [r4, #20]
   34d28:	add	r2, r1, r3
   34d2c:	add	r2, r2, #1
   34d30:	str	r2, [r4, #20]
   34d34:	mov	r2, #58	; 0x3a
   34d38:	strb	r2, [r1, r3]
   34d3c:	ldr	r3, [r4, #20]
   34d40:	mov	r2, #32
   34d44:	strb	r2, [r3]
   34d48:	ldrb	r3, [r4, #25]
   34d4c:	ldr	r1, [r4, #20]
   34d50:	cmp	r3, #0
   34d54:	addne	r1, r1, #1
   34d58:	str	r1, [r4, #20]
   34d5c:	ldrb	r3, [r4, #27]
   34d60:	cmp	r3, #0
   34d64:	bne	34e00 <flatcc_json_printer_int8_enum_field@@Base+0x208>
   34d68:	mov	r1, r5
   34d6c:	mov	r0, r4
   34d70:	ldr	r3, [sp, #32]
   34d74:	blx	r3
   34d78:	ldrd	r4, [sp]
   34d7c:	ldrd	r6, [sp, #8]
   34d80:	ldr	r8, [sp, #16]
   34d84:	add	sp, sp, #20
   34d88:	pop	{pc}		; (ldr pc, [sp], #4)
   34d8c:	ldr	r3, [r0, #20]
   34d90:	add	r2, r3, #1
   34d94:	str	r2, [r0, #20]
   34d98:	mov	r2, #10
   34d9c:	strb	r2, [r3]
   34da0:	ldrb	r3, [r0, #25]
   34da4:	ldr	r8, [r0, #32]
   34da8:	mul	r8, r8, r3
   34dac:	ldr	r0, [r0, #20]
   34db0:	add	r3, r0, r8
   34db4:	ldr	r2, [r4, #16]
   34db8:	cmp	r2, r3
   34dbc:	bcs	34dd0 <flatcc_json_printer_int8_enum_field@@Base+0x1d8>
   34dc0:	mov	r1, r8
   34dc4:	mov	r0, r4
   34dc8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   34dcc:	b	34cc4 <flatcc_json_printer_int8_enum_field@@Base+0xcc>
   34dd0:	mov	r2, r8
   34dd4:	mov	r1, #32
   34dd8:	bl	1459c <memset@plt>
   34ddc:	ldr	r3, [r4, #20]
   34de0:	add	r8, r3, r8
   34de4:	str	r8, [r4, #20]
   34de8:	b	34cc4 <flatcc_json_printer_int8_enum_field@@Base+0xcc>
   34dec:	mov	r2, r6
   34df0:	mov	r1, r7
   34df4:	mov	r0, r4
   34df8:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   34dfc:	b	34d0c <flatcc_json_printer_int8_enum_field@@Base+0x114>
   34e00:	mov	r0, r5
   34e04:	bl	307fc <flatcc_json_parser_struct_as_root@@Base+0xd74>
   34e08:	ldr	r3, [r4, #20]
   34e0c:	add	r0, r3, r0
   34e10:	str	r0, [r4, #20]
   34e14:	b	34d78 <flatcc_json_printer_int8_enum_field@@Base+0x180>

00034e18 <flatcc_json_printer_int16_enum_field@@Base>:
   34e18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   34e1c:	strd	r6, [sp, #8]
   34e20:	str	r8, [sp, #16]
   34e24:	str	lr, [sp, #20]
   34e28:	ldr	r6, [sp, #24]
   34e2c:	ldrsh	lr, [sp, #28]
   34e30:	add	r2, r2, #2
   34e34:	lsl	r2, r2, #1
   34e38:	ldr	ip, [r1, #8]
   34e3c:	cmp	r2, ip
   34e40:	bge	34e7c <flatcc_json_printer_int16_enum_field@@Base+0x64>
   34e44:	ldr	ip, [r1, #4]
   34e48:	ldrh	r2, [ip, r2]
   34e4c:	cmp	r2, #0
   34e50:	beq	34e7c <flatcc_json_printer_int16_enum_field@@Base+0x64>
   34e54:	ldr	ip, [r1]
   34e58:	cmn	ip, r2
   34e5c:	beq	34e7c <flatcc_json_printer_int16_enum_field@@Base+0x64>
   34e60:	ldrsh	r5, [ip, r2]
   34e64:	cmp	lr, r5
   34e68:	bne	34e8c <flatcc_json_printer_int16_enum_field@@Base+0x74>
   34e6c:	ldrb	r2, [r0, #28]
   34e70:	cmp	r2, #0
   34e74:	beq	34e8c <flatcc_json_printer_int16_enum_field@@Base+0x74>
   34e78:	b	34f98 <flatcc_json_printer_int16_enum_field@@Base+0x180>
   34e7c:	ldrb	r2, [r0, #29]
   34e80:	cmp	r2, #0
   34e84:	beq	34f98 <flatcc_json_printer_int16_enum_field@@Base+0x180>
   34e88:	mov	r5, lr
   34e8c:	ldr	r2, [r1, #16]
   34e90:	add	ip, r2, #1
   34e94:	str	ip, [r1, #16]
   34e98:	cmp	r2, #0
   34e9c:	beq	34eb4 <flatcc_json_printer_int16_enum_field@@Base+0x9c>
   34ea0:	ldr	r2, [r0, #20]
   34ea4:	add	r1, r2, #1
   34ea8:	str	r1, [r0, #20]
   34eac:	mov	r1, #44	; 0x2c
   34eb0:	strb	r1, [r2]
   34eb4:	mov	r7, r3
   34eb8:	mov	r4, r0
   34ebc:	ldrb	r3, [r0, #25]
   34ec0:	cmp	r3, #0
   34ec4:	bne	34fac <flatcc_json_printer_int16_enum_field@@Base+0x194>
   34ec8:	ldr	r2, [r0, #20]
   34ecc:	ldr	r3, [r0, #16]
   34ed0:	cmp	r2, r3
   34ed4:	bcc	34ee4 <flatcc_json_printer_int16_enum_field@@Base+0xcc>
   34ed8:	ldr	r3, [r0, #44]	; 0x2c
   34edc:	mov	r1, #0
   34ee0:	blx	r3
   34ee4:	ldr	r3, [r4, #20]
   34ee8:	mov	r2, #34	; 0x22
   34eec:	strb	r2, [r3]
   34ef0:	ldrb	r3, [r4, #26]
   34ef4:	ldr	r0, [r4, #20]
   34ef8:	cmp	r3, #0
   34efc:	addeq	r0, r0, #1
   34f00:	str	r0, [r4, #20]
   34f04:	add	r3, r0, r6
   34f08:	ldr	r2, [r4, #16]
   34f0c:	cmp	r2, r3
   34f10:	bls	3500c <flatcc_json_printer_int16_enum_field@@Base+0x1f4>
   34f14:	mov	r2, r6
   34f18:	mov	r1, r7
   34f1c:	bl	14524 <memcpy@plt>
   34f20:	ldr	r3, [r4, #20]
   34f24:	add	r6, r3, r6
   34f28:	str	r6, [r4, #20]
   34f2c:	ldr	r3, [r4, #20]
   34f30:	mov	r2, #34	; 0x22
   34f34:	strb	r2, [r3]
   34f38:	ldrb	r3, [r4, #26]
   34f3c:	clz	r3, r3
   34f40:	lsr	r3, r3, #5
   34f44:	ldr	r1, [r4, #20]
   34f48:	add	r2, r1, r3
   34f4c:	add	r2, r2, #1
   34f50:	str	r2, [r4, #20]
   34f54:	mov	r2, #58	; 0x3a
   34f58:	strb	r2, [r1, r3]
   34f5c:	ldr	r3, [r4, #20]
   34f60:	mov	r2, #32
   34f64:	strb	r2, [r3]
   34f68:	ldrb	r3, [r4, #25]
   34f6c:	ldr	r1, [r4, #20]
   34f70:	cmp	r3, #0
   34f74:	addne	r1, r1, #1
   34f78:	str	r1, [r4, #20]
   34f7c:	ldrb	r3, [r4, #27]
   34f80:	cmp	r3, #0
   34f84:	bne	35020 <flatcc_json_printer_int16_enum_field@@Base+0x208>
   34f88:	mov	r1, r5
   34f8c:	mov	r0, r4
   34f90:	ldr	r3, [sp, #32]
   34f94:	blx	r3
   34f98:	ldrd	r4, [sp]
   34f9c:	ldrd	r6, [sp, #8]
   34fa0:	ldr	r8, [sp, #16]
   34fa4:	add	sp, sp, #20
   34fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   34fac:	ldr	r3, [r0, #20]
   34fb0:	add	r2, r3, #1
   34fb4:	str	r2, [r0, #20]
   34fb8:	mov	r2, #10
   34fbc:	strb	r2, [r3]
   34fc0:	ldrb	r3, [r0, #25]
   34fc4:	ldr	r8, [r0, #32]
   34fc8:	mul	r8, r8, r3
   34fcc:	ldr	r0, [r0, #20]
   34fd0:	add	r3, r0, r8
   34fd4:	ldr	r2, [r4, #16]
   34fd8:	cmp	r2, r3
   34fdc:	bcs	34ff0 <flatcc_json_printer_int16_enum_field@@Base+0x1d8>
   34fe0:	mov	r1, r8
   34fe4:	mov	r0, r4
   34fe8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   34fec:	b	34ee4 <flatcc_json_printer_int16_enum_field@@Base+0xcc>
   34ff0:	mov	r2, r8
   34ff4:	mov	r1, #32
   34ff8:	bl	1459c <memset@plt>
   34ffc:	ldr	r3, [r4, #20]
   35000:	add	r8, r3, r8
   35004:	str	r8, [r4, #20]
   35008:	b	34ee4 <flatcc_json_printer_int16_enum_field@@Base+0xcc>
   3500c:	mov	r2, r6
   35010:	mov	r1, r7
   35014:	mov	r0, r4
   35018:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3501c:	b	34f2c <flatcc_json_printer_int16_enum_field@@Base+0x114>
   35020:	mov	r0, r5
   35024:	bl	3083c <flatcc_json_parser_struct_as_root@@Base+0xdb4>
   35028:	ldr	r3, [r4, #20]
   3502c:	add	r0, r3, r0
   35030:	str	r0, [r4, #20]
   35034:	b	34f98 <flatcc_json_printer_int16_enum_field@@Base+0x180>

00035038 <flatcc_json_printer_int32_enum_field@@Base>:
   35038:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3503c:	strd	r6, [sp, #8]
   35040:	str	r8, [sp, #16]
   35044:	str	lr, [sp, #20]
   35048:	ldr	r6, [sp, #24]
   3504c:	add	r2, r2, #2
   35050:	lsl	r2, r2, #1
   35054:	ldr	ip, [r1, #8]
   35058:	cmp	r2, ip
   3505c:	bge	3509c <flatcc_json_printer_int32_enum_field@@Base+0x64>
   35060:	ldr	ip, [r1, #4]
   35064:	ldrh	r2, [ip, r2]
   35068:	cmp	r2, #0
   3506c:	beq	3509c <flatcc_json_printer_int32_enum_field@@Base+0x64>
   35070:	ldr	ip, [r1]
   35074:	cmn	ip, r2
   35078:	beq	3509c <flatcc_json_printer_int32_enum_field@@Base+0x64>
   3507c:	ldr	r5, [ip, r2]
   35080:	ldr	r2, [sp, #28]
   35084:	cmp	r2, r5
   35088:	bne	350ac <flatcc_json_printer_int32_enum_field@@Base+0x74>
   3508c:	ldrb	r2, [r0, #28]
   35090:	cmp	r2, #0
   35094:	beq	350ac <flatcc_json_printer_int32_enum_field@@Base+0x74>
   35098:	b	351b8 <flatcc_json_printer_int32_enum_field@@Base+0x180>
   3509c:	ldrb	r2, [r0, #29]
   350a0:	cmp	r2, #0
   350a4:	beq	351b8 <flatcc_json_printer_int32_enum_field@@Base+0x180>
   350a8:	ldr	r5, [sp, #28]
   350ac:	ldr	r2, [r1, #16]
   350b0:	add	ip, r2, #1
   350b4:	str	ip, [r1, #16]
   350b8:	cmp	r2, #0
   350bc:	beq	350d4 <flatcc_json_printer_int32_enum_field@@Base+0x9c>
   350c0:	ldr	r2, [r0, #20]
   350c4:	add	r1, r2, #1
   350c8:	str	r1, [r0, #20]
   350cc:	mov	r1, #44	; 0x2c
   350d0:	strb	r1, [r2]
   350d4:	mov	r7, r3
   350d8:	mov	r4, r0
   350dc:	ldrb	r3, [r0, #25]
   350e0:	cmp	r3, #0
   350e4:	bne	351cc <flatcc_json_printer_int32_enum_field@@Base+0x194>
   350e8:	ldr	r2, [r0, #20]
   350ec:	ldr	r3, [r0, #16]
   350f0:	cmp	r2, r3
   350f4:	bcc	35104 <flatcc_json_printer_int32_enum_field@@Base+0xcc>
   350f8:	ldr	r3, [r0, #44]	; 0x2c
   350fc:	mov	r1, #0
   35100:	blx	r3
   35104:	ldr	r3, [r4, #20]
   35108:	mov	r2, #34	; 0x22
   3510c:	strb	r2, [r3]
   35110:	ldrb	r3, [r4, #26]
   35114:	ldr	r0, [r4, #20]
   35118:	cmp	r3, #0
   3511c:	addeq	r0, r0, #1
   35120:	str	r0, [r4, #20]
   35124:	add	r3, r0, r6
   35128:	ldr	r2, [r4, #16]
   3512c:	cmp	r2, r3
   35130:	bls	3522c <flatcc_json_printer_int32_enum_field@@Base+0x1f4>
   35134:	mov	r2, r6
   35138:	mov	r1, r7
   3513c:	bl	14524 <memcpy@plt>
   35140:	ldr	r3, [r4, #20]
   35144:	add	r6, r3, r6
   35148:	str	r6, [r4, #20]
   3514c:	ldr	r3, [r4, #20]
   35150:	mov	r2, #34	; 0x22
   35154:	strb	r2, [r3]
   35158:	ldrb	r3, [r4, #26]
   3515c:	clz	r3, r3
   35160:	lsr	r3, r3, #5
   35164:	ldr	r1, [r4, #20]
   35168:	add	r2, r1, r3
   3516c:	add	r2, r2, #1
   35170:	str	r2, [r4, #20]
   35174:	mov	r2, #58	; 0x3a
   35178:	strb	r2, [r1, r3]
   3517c:	ldr	r3, [r4, #20]
   35180:	mov	r2, #32
   35184:	strb	r2, [r3]
   35188:	ldrb	r3, [r4, #25]
   3518c:	ldr	r1, [r4, #20]
   35190:	cmp	r3, #0
   35194:	addne	r1, r1, #1
   35198:	str	r1, [r4, #20]
   3519c:	ldrb	r3, [r4, #27]
   351a0:	cmp	r3, #0
   351a4:	bne	35240 <flatcc_json_printer_int32_enum_field@@Base+0x208>
   351a8:	mov	r1, r5
   351ac:	mov	r0, r4
   351b0:	ldr	r3, [sp, #32]
   351b4:	blx	r3
   351b8:	ldrd	r4, [sp]
   351bc:	ldrd	r6, [sp, #8]
   351c0:	ldr	r8, [sp, #16]
   351c4:	add	sp, sp, #20
   351c8:	pop	{pc}		; (ldr pc, [sp], #4)
   351cc:	ldr	r3, [r0, #20]
   351d0:	add	r2, r3, #1
   351d4:	str	r2, [r0, #20]
   351d8:	mov	r2, #10
   351dc:	strb	r2, [r3]
   351e0:	ldrb	r3, [r0, #25]
   351e4:	ldr	r8, [r0, #32]
   351e8:	mul	r8, r8, r3
   351ec:	ldr	r0, [r0, #20]
   351f0:	add	r3, r0, r8
   351f4:	ldr	r2, [r4, #16]
   351f8:	cmp	r2, r3
   351fc:	bcs	35210 <flatcc_json_printer_int32_enum_field@@Base+0x1d8>
   35200:	mov	r1, r8
   35204:	mov	r0, r4
   35208:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3520c:	b	35104 <flatcc_json_printer_int32_enum_field@@Base+0xcc>
   35210:	mov	r2, r8
   35214:	mov	r1, #32
   35218:	bl	1459c <memset@plt>
   3521c:	ldr	r3, [r4, #20]
   35220:	add	r8, r3, r8
   35224:	str	r8, [r4, #20]
   35228:	b	35104 <flatcc_json_printer_int32_enum_field@@Base+0xcc>
   3522c:	mov	r2, r6
   35230:	mov	r1, r7
   35234:	mov	r0, r4
   35238:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3523c:	b	3514c <flatcc_json_printer_int32_enum_field@@Base+0x114>
   35240:	mov	r0, r5
   35244:	bl	3087c <flatcc_json_parser_struct_as_root@@Base+0xdf4>
   35248:	ldr	r3, [r4, #20]
   3524c:	add	r0, r3, r0
   35250:	str	r0, [r4, #20]
   35254:	b	351b8 <flatcc_json_printer_int32_enum_field@@Base+0x180>

00035258 <flatcc_json_printer_int64_enum_field@@Base>:
   35258:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3525c:	strd	r6, [sp, #8]
   35260:	strd	r8, [sp, #16]
   35264:	str	sl, [sp, #24]
   35268:	str	lr, [sp, #28]
   3526c:	ldr	r5, [sp, #32]
   35270:	add	r2, r2, #2
   35274:	lsl	r2, r2, #1
   35278:	ldr	ip, [r1, #8]
   3527c:	cmp	r2, ip
   35280:	bge	352c4 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   35284:	ldr	ip, [r1, #4]
   35288:	ldrh	r2, [ip, r2]
   3528c:	cmp	r2, #0
   35290:	beq	352c4 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   35294:	ldr	ip, [r1]
   35298:	cmn	ip, r2
   3529c:	beq	352c4 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   352a0:	ldrd	r6, [ip, r2]
   352a4:	ldrd	r8, [sp, #40]	; 0x28
   352a8:	cmp	r9, r7
   352ac:	cmpeq	r8, r6
   352b0:	bne	352d4 <flatcc_json_printer_int64_enum_field@@Base+0x7c>
   352b4:	ldrb	r2, [r0, #28]
   352b8:	cmp	r2, #0
   352bc:	beq	352d4 <flatcc_json_printer_int64_enum_field@@Base+0x7c>
   352c0:	b	353e4 <flatcc_json_printer_int64_enum_field@@Base+0x18c>
   352c4:	ldrb	r2, [r0, #29]
   352c8:	cmp	r2, #0
   352cc:	beq	353e4 <flatcc_json_printer_int64_enum_field@@Base+0x18c>
   352d0:	ldrd	r6, [sp, #40]	; 0x28
   352d4:	ldr	r2, [r1, #16]
   352d8:	add	ip, r2, #1
   352dc:	str	ip, [r1, #16]
   352e0:	cmp	r2, #0
   352e4:	beq	352fc <flatcc_json_printer_int64_enum_field@@Base+0xa4>
   352e8:	ldr	r2, [r0, #20]
   352ec:	add	r1, r2, #1
   352f0:	str	r1, [r0, #20]
   352f4:	mov	r1, #44	; 0x2c
   352f8:	strb	r1, [r2]
   352fc:	mov	r8, r3
   35300:	mov	r4, r0
   35304:	ldrb	r3, [r0, #25]
   35308:	cmp	r3, #0
   3530c:	bne	353fc <flatcc_json_printer_int64_enum_field@@Base+0x1a4>
   35310:	ldr	r2, [r0, #20]
   35314:	ldr	r3, [r0, #16]
   35318:	cmp	r2, r3
   3531c:	bcc	3532c <flatcc_json_printer_int64_enum_field@@Base+0xd4>
   35320:	ldr	r3, [r0, #44]	; 0x2c
   35324:	mov	r1, #0
   35328:	blx	r3
   3532c:	ldr	r3, [r4, #20]
   35330:	mov	r2, #34	; 0x22
   35334:	strb	r2, [r3]
   35338:	ldrb	r3, [r4, #26]
   3533c:	ldr	r0, [r4, #20]
   35340:	cmp	r3, #0
   35344:	addeq	r0, r0, #1
   35348:	str	r0, [r4, #20]
   3534c:	add	r3, r0, r5
   35350:	ldr	r2, [r4, #16]
   35354:	cmp	r2, r3
   35358:	bls	3545c <flatcc_json_printer_int64_enum_field@@Base+0x204>
   3535c:	mov	r2, r5
   35360:	mov	r1, r8
   35364:	bl	14524 <memcpy@plt>
   35368:	ldr	r3, [r4, #20]
   3536c:	add	r5, r3, r5
   35370:	str	r5, [r4, #20]
   35374:	ldr	r3, [r4, #20]
   35378:	mov	r2, #34	; 0x22
   3537c:	strb	r2, [r3]
   35380:	ldrb	r3, [r4, #26]
   35384:	clz	r3, r3
   35388:	lsr	r3, r3, #5
   3538c:	ldr	r1, [r4, #20]
   35390:	add	r2, r1, r3
   35394:	add	r2, r2, #1
   35398:	str	r2, [r4, #20]
   3539c:	mov	r2, #58	; 0x3a
   353a0:	strb	r2, [r1, r3]
   353a4:	ldr	r3, [r4, #20]
   353a8:	mov	r2, #32
   353ac:	strb	r2, [r3]
   353b0:	ldrb	r3, [r4, #25]
   353b4:	ldr	r2, [r4, #20]
   353b8:	cmp	r3, #0
   353bc:	addne	r2, r2, #1
   353c0:	str	r2, [r4, #20]
   353c4:	ldrb	r3, [r4, #27]
   353c8:	cmp	r3, #0
   353cc:	bne	35470 <flatcc_json_printer_int64_enum_field@@Base+0x218>
   353d0:	mov	r2, r6
   353d4:	mov	r3, r7
   353d8:	mov	r0, r4
   353dc:	ldr	r1, [sp, #48]	; 0x30
   353e0:	blx	r1
   353e4:	ldrd	r4, [sp]
   353e8:	ldrd	r6, [sp, #8]
   353ec:	ldrd	r8, [sp, #16]
   353f0:	ldr	sl, [sp, #24]
   353f4:	add	sp, sp, #28
   353f8:	pop	{pc}		; (ldr pc, [sp], #4)
   353fc:	ldr	r3, [r0, #20]
   35400:	add	r2, r3, #1
   35404:	str	r2, [r0, #20]
   35408:	mov	r2, #10
   3540c:	strb	r2, [r3]
   35410:	ldrb	r3, [r0, #25]
   35414:	ldr	r9, [r0, #32]
   35418:	mul	r9, r9, r3
   3541c:	ldr	r0, [r0, #20]
   35420:	add	r3, r0, r9
   35424:	ldr	r2, [r4, #16]
   35428:	cmp	r2, r3
   3542c:	bcs	35440 <flatcc_json_printer_int64_enum_field@@Base+0x1e8>
   35430:	mov	r1, r9
   35434:	mov	r0, r4
   35438:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3543c:	b	3532c <flatcc_json_printer_int64_enum_field@@Base+0xd4>
   35440:	mov	r2, r9
   35444:	mov	r1, #32
   35448:	bl	1459c <memset@plt>
   3544c:	ldr	r3, [r4, #20]
   35450:	add	r9, r3, r9
   35454:	str	r9, [r4, #20]
   35458:	b	3532c <flatcc_json_printer_int64_enum_field@@Base+0xd4>
   3545c:	mov	r2, r5
   35460:	mov	r1, r8
   35464:	mov	r0, r4
   35468:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3546c:	b	35374 <flatcc_json_printer_int64_enum_field@@Base+0x11c>
   35470:	mov	r0, r6
   35474:	mov	r1, r7
   35478:	bl	308b4 <flatcc_json_parser_struct_as_root@@Base+0xe2c>
   3547c:	ldr	r3, [r4, #20]
   35480:	add	r0, r3, r0
   35484:	str	r0, [r4, #20]
   35488:	b	353e4 <flatcc_json_printer_int64_enum_field@@Base+0x18c>

0003548c <flatcc_json_printer_bool_enum_field@@Base>:
   3548c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35490:	strd	r6, [sp, #8]
   35494:	str	r8, [sp, #16]
   35498:	str	lr, [sp, #20]
   3549c:	ldr	r6, [sp, #24]
   354a0:	ldrb	lr, [sp, #28]
   354a4:	add	r2, r2, #2
   354a8:	lsl	r2, r2, #1
   354ac:	ldr	ip, [r1, #8]
   354b0:	cmp	r2, ip
   354b4:	bge	354f0 <flatcc_json_printer_bool_enum_field@@Base+0x64>
   354b8:	ldr	ip, [r1, #4]
   354bc:	ldrh	r2, [ip, r2]
   354c0:	cmp	r2, #0
   354c4:	beq	354f0 <flatcc_json_printer_bool_enum_field@@Base+0x64>
   354c8:	ldr	ip, [r1]
   354cc:	cmn	ip, r2
   354d0:	beq	354f0 <flatcc_json_printer_bool_enum_field@@Base+0x64>
   354d4:	ldrb	r5, [ip, r2]
   354d8:	cmp	lr, r5
   354dc:	bne	35500 <flatcc_json_printer_bool_enum_field@@Base+0x74>
   354e0:	ldrb	r2, [r0, #28]
   354e4:	cmp	r2, #0
   354e8:	beq	35500 <flatcc_json_printer_bool_enum_field@@Base+0x74>
   354ec:	b	3560c <flatcc_json_printer_bool_enum_field@@Base+0x180>
   354f0:	ldrb	r2, [r0, #29]
   354f4:	cmp	r2, #0
   354f8:	beq	3560c <flatcc_json_printer_bool_enum_field@@Base+0x180>
   354fc:	mov	r5, lr
   35500:	ldr	r2, [r1, #16]
   35504:	add	ip, r2, #1
   35508:	str	ip, [r1, #16]
   3550c:	cmp	r2, #0
   35510:	beq	35528 <flatcc_json_printer_bool_enum_field@@Base+0x9c>
   35514:	ldr	r2, [r0, #20]
   35518:	add	r1, r2, #1
   3551c:	str	r1, [r0, #20]
   35520:	mov	r1, #44	; 0x2c
   35524:	strb	r1, [r2]
   35528:	mov	r7, r3
   3552c:	mov	r4, r0
   35530:	ldrb	r3, [r0, #25]
   35534:	cmp	r3, #0
   35538:	bne	35620 <flatcc_json_printer_bool_enum_field@@Base+0x194>
   3553c:	ldr	r2, [r0, #20]
   35540:	ldr	r3, [r0, #16]
   35544:	cmp	r2, r3
   35548:	bcc	35558 <flatcc_json_printer_bool_enum_field@@Base+0xcc>
   3554c:	ldr	r3, [r0, #44]	; 0x2c
   35550:	mov	r1, #0
   35554:	blx	r3
   35558:	ldr	r3, [r4, #20]
   3555c:	mov	r2, #34	; 0x22
   35560:	strb	r2, [r3]
   35564:	ldrb	r3, [r4, #26]
   35568:	ldr	r0, [r4, #20]
   3556c:	cmp	r3, #0
   35570:	addeq	r0, r0, #1
   35574:	str	r0, [r4, #20]
   35578:	add	r3, r0, r6
   3557c:	ldr	r2, [r4, #16]
   35580:	cmp	r2, r3
   35584:	bls	35680 <flatcc_json_printer_bool_enum_field@@Base+0x1f4>
   35588:	mov	r2, r6
   3558c:	mov	r1, r7
   35590:	bl	14524 <memcpy@plt>
   35594:	ldr	r3, [r4, #20]
   35598:	add	r6, r3, r6
   3559c:	str	r6, [r4, #20]
   355a0:	ldr	r3, [r4, #20]
   355a4:	mov	r2, #34	; 0x22
   355a8:	strb	r2, [r3]
   355ac:	ldrb	r3, [r4, #26]
   355b0:	clz	r3, r3
   355b4:	lsr	r3, r3, #5
   355b8:	ldr	r1, [r4, #20]
   355bc:	add	r2, r1, r3
   355c0:	add	r2, r2, #1
   355c4:	str	r2, [r4, #20]
   355c8:	mov	r2, #58	; 0x3a
   355cc:	strb	r2, [r1, r3]
   355d0:	ldr	r3, [r4, #20]
   355d4:	mov	r2, #32
   355d8:	strb	r2, [r3]
   355dc:	ldrb	r3, [r4, #25]
   355e0:	ldr	r1, [r4, #20]
   355e4:	cmp	r3, #0
   355e8:	addne	r1, r1, #1
   355ec:	str	r1, [r4, #20]
   355f0:	ldrb	r3, [r4, #27]
   355f4:	cmp	r3, #0
   355f8:	bne	35694 <flatcc_json_printer_bool_enum_field@@Base+0x208>
   355fc:	mov	r1, r5
   35600:	mov	r0, r4
   35604:	ldr	r3, [sp, #32]
   35608:	blx	r3
   3560c:	ldrd	r4, [sp]
   35610:	ldrd	r6, [sp, #8]
   35614:	ldr	r8, [sp, #16]
   35618:	add	sp, sp, #20
   3561c:	pop	{pc}		; (ldr pc, [sp], #4)
   35620:	ldr	r3, [r0, #20]
   35624:	add	r2, r3, #1
   35628:	str	r2, [r0, #20]
   3562c:	mov	r2, #10
   35630:	strb	r2, [r3]
   35634:	ldrb	r3, [r0, #25]
   35638:	ldr	r8, [r0, #32]
   3563c:	mul	r8, r8, r3
   35640:	ldr	r0, [r0, #20]
   35644:	add	r3, r0, r8
   35648:	ldr	r2, [r4, #16]
   3564c:	cmp	r2, r3
   35650:	bcs	35664 <flatcc_json_printer_bool_enum_field@@Base+0x1d8>
   35654:	mov	r1, r8
   35658:	mov	r0, r4
   3565c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   35660:	b	35558 <flatcc_json_printer_bool_enum_field@@Base+0xcc>
   35664:	mov	r2, r8
   35668:	mov	r1, #32
   3566c:	bl	1459c <memset@plt>
   35670:	ldr	r3, [r4, #20]
   35674:	add	r8, r3, r8
   35678:	str	r8, [r4, #20]
   3567c:	b	35558 <flatcc_json_printer_bool_enum_field@@Base+0xcc>
   35680:	mov	r2, r6
   35684:	mov	r1, r7
   35688:	mov	r0, r4
   3568c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   35690:	b	355a0 <flatcc_json_printer_bool_enum_field@@Base+0x114>
   35694:	mov	r0, r5
   35698:	bl	310a8 <flatcc_json_parser_struct_as_root@@Base+0x1620>
   3569c:	ldr	r3, [r4, #20]
   356a0:	add	r0, r3, r0
   356a4:	str	r0, [r4, #20]
   356a8:	b	3560c <flatcc_json_printer_bool_enum_field@@Base+0x180>

000356ac <flatcc_json_printer_uint8_struct_field@@Base>:
   356ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   356b0:	strd	r6, [sp, #8]
   356b4:	str	r8, [sp, #16]
   356b8:	str	lr, [sp, #20]
   356bc:	mov	r4, r0
   356c0:	ldr	r6, [sp, #28]
   356c4:	ldrb	r5, [r2, r3]
   356c8:	cmp	r1, #0
   356cc:	beq	356e4 <flatcc_json_printer_uint8_struct_field@@Base+0x38>
   356d0:	ldr	r3, [r0, #20]
   356d4:	add	r2, r3, #1
   356d8:	str	r2, [r0, #20]
   356dc:	mov	r2, #44	; 0x2c
   356e0:	strb	r2, [r3]
   356e4:	ldrb	r3, [r4, #25]
   356e8:	cmp	r3, #0
   356ec:	bne	357d0 <flatcc_json_printer_uint8_struct_field@@Base+0x124>
   356f0:	ldr	r2, [r4, #20]
   356f4:	ldr	r3, [r4, #16]
   356f8:	cmp	r2, r3
   356fc:	bcc	35710 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   35700:	ldr	r3, [r4, #44]	; 0x2c
   35704:	mov	r1, #0
   35708:	mov	r0, r4
   3570c:	blx	r3
   35710:	ldr	r3, [r4, #20]
   35714:	mov	r2, #34	; 0x22
   35718:	strb	r2, [r3]
   3571c:	ldrb	r3, [r4, #26]
   35720:	ldr	r0, [r4, #20]
   35724:	cmp	r3, #0
   35728:	addeq	r0, r0, #1
   3572c:	str	r0, [r4, #20]
   35730:	add	r3, r0, r6
   35734:	ldr	r2, [r4, #16]
   35738:	cmp	r2, r3
   3573c:	bls	35830 <flatcc_json_printer_uint8_struct_field@@Base+0x184>
   35740:	mov	r2, r6
   35744:	ldr	r1, [sp, #24]
   35748:	bl	14524 <memcpy@plt>
   3574c:	ldr	r3, [r4, #20]
   35750:	add	r6, r3, r6
   35754:	str	r6, [r4, #20]
   35758:	ldr	r3, [r4, #20]
   3575c:	mov	r2, #34	; 0x22
   35760:	strb	r2, [r3]
   35764:	ldrb	r3, [r4, #26]
   35768:	clz	r3, r3
   3576c:	lsr	r3, r3, #5
   35770:	ldr	r1, [r4, #20]
   35774:	add	r2, r1, r3
   35778:	add	r2, r2, #1
   3577c:	str	r2, [r4, #20]
   35780:	mov	r2, #58	; 0x3a
   35784:	strb	r2, [r1, r3]
   35788:	ldr	r3, [r4, #20]
   3578c:	mov	r2, #32
   35790:	strb	r2, [r3]
   35794:	ldrb	r3, [r4, #25]
   35798:	ldr	r1, [r4, #20]
   3579c:	cmp	r3, #0
   357a0:	addne	r1, r1, #1
   357a4:	str	r1, [r4, #20]
   357a8:	mov	r0, r5
   357ac:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   357b0:	ldr	r3, [r4, #20]
   357b4:	add	r0, r3, r0
   357b8:	str	r0, [r4, #20]
   357bc:	ldrd	r4, [sp]
   357c0:	ldrd	r6, [sp, #8]
   357c4:	ldr	r8, [sp, #16]
   357c8:	add	sp, sp, #20
   357cc:	pop	{pc}		; (ldr pc, [sp], #4)
   357d0:	ldr	r3, [r4, #20]
   357d4:	add	r2, r3, #1
   357d8:	str	r2, [r4, #20]
   357dc:	mov	r2, #10
   357e0:	strb	r2, [r3]
   357e4:	ldrb	r3, [r4, #25]
   357e8:	ldr	r7, [r4, #32]
   357ec:	mul	r7, r7, r3
   357f0:	ldr	r0, [r4, #20]
   357f4:	add	r3, r0, r7
   357f8:	ldr	r2, [r4, #16]
   357fc:	cmp	r2, r3
   35800:	bcs	35814 <flatcc_json_printer_uint8_struct_field@@Base+0x168>
   35804:	mov	r1, r7
   35808:	mov	r0, r4
   3580c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   35810:	b	35710 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   35814:	mov	r2, r7
   35818:	mov	r1, #32
   3581c:	bl	1459c <memset@plt>
   35820:	ldr	r3, [r4, #20]
   35824:	add	r7, r3, r7
   35828:	str	r7, [r4, #20]
   3582c:	b	35710 <flatcc_json_printer_uint8_struct_field@@Base+0x64>
   35830:	mov	r2, r6
   35834:	ldr	r1, [sp, #24]
   35838:	mov	r0, r4
   3583c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   35840:	b	35758 <flatcc_json_printer_uint8_struct_field@@Base+0xac>

00035844 <flatcc_json_printer_uint16_struct_field@@Base>:
   35844:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35848:	strd	r6, [sp, #8]
   3584c:	str	r8, [sp, #16]
   35850:	str	lr, [sp, #20]
   35854:	mov	r4, r0
   35858:	ldr	r6, [sp, #28]
   3585c:	ldrh	r5, [r2, r3]
   35860:	cmp	r1, #0
   35864:	beq	3587c <flatcc_json_printer_uint16_struct_field@@Base+0x38>
   35868:	ldr	r3, [r0, #20]
   3586c:	add	r2, r3, #1
   35870:	str	r2, [r0, #20]
   35874:	mov	r2, #44	; 0x2c
   35878:	strb	r2, [r3]
   3587c:	ldrb	r3, [r4, #25]
   35880:	cmp	r3, #0
   35884:	bne	35968 <flatcc_json_printer_uint16_struct_field@@Base+0x124>
   35888:	ldr	r2, [r4, #20]
   3588c:	ldr	r3, [r4, #16]
   35890:	cmp	r2, r3
   35894:	bcc	358a8 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   35898:	ldr	r3, [r4, #44]	; 0x2c
   3589c:	mov	r1, #0
   358a0:	mov	r0, r4
   358a4:	blx	r3
   358a8:	ldr	r3, [r4, #20]
   358ac:	mov	r2, #34	; 0x22
   358b0:	strb	r2, [r3]
   358b4:	ldrb	r3, [r4, #26]
   358b8:	ldr	r0, [r4, #20]
   358bc:	cmp	r3, #0
   358c0:	addeq	r0, r0, #1
   358c4:	str	r0, [r4, #20]
   358c8:	add	r3, r0, r6
   358cc:	ldr	r2, [r4, #16]
   358d0:	cmp	r2, r3
   358d4:	bls	359c8 <flatcc_json_printer_uint16_struct_field@@Base+0x184>
   358d8:	mov	r2, r6
   358dc:	ldr	r1, [sp, #24]
   358e0:	bl	14524 <memcpy@plt>
   358e4:	ldr	r3, [r4, #20]
   358e8:	add	r6, r3, r6
   358ec:	str	r6, [r4, #20]
   358f0:	ldr	r3, [r4, #20]
   358f4:	mov	r2, #34	; 0x22
   358f8:	strb	r2, [r3]
   358fc:	ldrb	r3, [r4, #26]
   35900:	clz	r3, r3
   35904:	lsr	r3, r3, #5
   35908:	ldr	r1, [r4, #20]
   3590c:	add	r2, r1, r3
   35910:	add	r2, r2, #1
   35914:	str	r2, [r4, #20]
   35918:	mov	r2, #58	; 0x3a
   3591c:	strb	r2, [r1, r3]
   35920:	ldr	r3, [r4, #20]
   35924:	mov	r2, #32
   35928:	strb	r2, [r3]
   3592c:	ldrb	r3, [r4, #25]
   35930:	ldr	r1, [r4, #20]
   35934:	cmp	r3, #0
   35938:	addne	r1, r1, #1
   3593c:	str	r1, [r4, #20]
   35940:	mov	r0, r5
   35944:	bl	2fc28 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   35948:	ldr	r3, [r4, #20]
   3594c:	add	r0, r3, r0
   35950:	str	r0, [r4, #20]
   35954:	ldrd	r4, [sp]
   35958:	ldrd	r6, [sp, #8]
   3595c:	ldr	r8, [sp, #16]
   35960:	add	sp, sp, #20
   35964:	pop	{pc}		; (ldr pc, [sp], #4)
   35968:	ldr	r3, [r4, #20]
   3596c:	add	r2, r3, #1
   35970:	str	r2, [r4, #20]
   35974:	mov	r2, #10
   35978:	strb	r2, [r3]
   3597c:	ldrb	r3, [r4, #25]
   35980:	ldr	r7, [r4, #32]
   35984:	mul	r7, r7, r3
   35988:	ldr	r0, [r4, #20]
   3598c:	add	r3, r0, r7
   35990:	ldr	r2, [r4, #16]
   35994:	cmp	r2, r3
   35998:	bcs	359ac <flatcc_json_printer_uint16_struct_field@@Base+0x168>
   3599c:	mov	r1, r7
   359a0:	mov	r0, r4
   359a4:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   359a8:	b	358a8 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   359ac:	mov	r2, r7
   359b0:	mov	r1, #32
   359b4:	bl	1459c <memset@plt>
   359b8:	ldr	r3, [r4, #20]
   359bc:	add	r7, r3, r7
   359c0:	str	r7, [r4, #20]
   359c4:	b	358a8 <flatcc_json_printer_uint16_struct_field@@Base+0x64>
   359c8:	mov	r2, r6
   359cc:	ldr	r1, [sp, #24]
   359d0:	mov	r0, r4
   359d4:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   359d8:	b	358f0 <flatcc_json_printer_uint16_struct_field@@Base+0xac>

000359dc <flatcc_json_printer_uint32_struct_field@@Base>:
   359dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   359e0:	strd	r6, [sp, #8]
   359e4:	str	r8, [sp, #16]
   359e8:	str	lr, [sp, #20]
   359ec:	mov	r4, r0
   359f0:	ldr	r6, [sp, #28]
   359f4:	ldr	r5, [r2, r3]
   359f8:	cmp	r1, #0
   359fc:	beq	35a14 <flatcc_json_printer_uint32_struct_field@@Base+0x38>
   35a00:	ldr	r3, [r0, #20]
   35a04:	add	r2, r3, #1
   35a08:	str	r2, [r0, #20]
   35a0c:	mov	r2, #44	; 0x2c
   35a10:	strb	r2, [r3]
   35a14:	ldrb	r3, [r4, #25]
   35a18:	cmp	r3, #0
   35a1c:	bne	35b00 <flatcc_json_printer_uint32_struct_field@@Base+0x124>
   35a20:	ldr	r2, [r4, #20]
   35a24:	ldr	r3, [r4, #16]
   35a28:	cmp	r2, r3
   35a2c:	bcc	35a40 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   35a30:	ldr	r3, [r4, #44]	; 0x2c
   35a34:	mov	r1, #0
   35a38:	mov	r0, r4
   35a3c:	blx	r3
   35a40:	ldr	r3, [r4, #20]
   35a44:	mov	r2, #34	; 0x22
   35a48:	strb	r2, [r3]
   35a4c:	ldrb	r3, [r4, #26]
   35a50:	ldr	r0, [r4, #20]
   35a54:	cmp	r3, #0
   35a58:	addeq	r0, r0, #1
   35a5c:	str	r0, [r4, #20]
   35a60:	add	r3, r0, r6
   35a64:	ldr	r2, [r4, #16]
   35a68:	cmp	r2, r3
   35a6c:	bls	35b60 <flatcc_json_printer_uint32_struct_field@@Base+0x184>
   35a70:	mov	r2, r6
   35a74:	ldr	r1, [sp, #24]
   35a78:	bl	14524 <memcpy@plt>
   35a7c:	ldr	r3, [r4, #20]
   35a80:	add	r6, r3, r6
   35a84:	str	r6, [r4, #20]
   35a88:	ldr	r3, [r4, #20]
   35a8c:	mov	r2, #34	; 0x22
   35a90:	strb	r2, [r3]
   35a94:	ldrb	r3, [r4, #26]
   35a98:	clz	r3, r3
   35a9c:	lsr	r3, r3, #5
   35aa0:	ldr	r1, [r4, #20]
   35aa4:	add	r2, r1, r3
   35aa8:	add	r2, r2, #1
   35aac:	str	r2, [r4, #20]
   35ab0:	mov	r2, #58	; 0x3a
   35ab4:	strb	r2, [r1, r3]
   35ab8:	ldr	r3, [r4, #20]
   35abc:	mov	r2, #32
   35ac0:	strb	r2, [r3]
   35ac4:	ldrb	r3, [r4, #25]
   35ac8:	ldr	r1, [r4, #20]
   35acc:	cmp	r3, #0
   35ad0:	addne	r1, r1, #1
   35ad4:	str	r1, [r4, #20]
   35ad8:	mov	r0, r5
   35adc:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   35ae0:	ldr	r3, [r4, #20]
   35ae4:	add	r0, r3, r0
   35ae8:	str	r0, [r4, #20]
   35aec:	ldrd	r4, [sp]
   35af0:	ldrd	r6, [sp, #8]
   35af4:	ldr	r8, [sp, #16]
   35af8:	add	sp, sp, #20
   35afc:	pop	{pc}		; (ldr pc, [sp], #4)
   35b00:	ldr	r3, [r4, #20]
   35b04:	add	r2, r3, #1
   35b08:	str	r2, [r4, #20]
   35b0c:	mov	r2, #10
   35b10:	strb	r2, [r3]
   35b14:	ldrb	r3, [r4, #25]
   35b18:	ldr	r7, [r4, #32]
   35b1c:	mul	r7, r7, r3
   35b20:	ldr	r0, [r4, #20]
   35b24:	add	r3, r0, r7
   35b28:	ldr	r2, [r4, #16]
   35b2c:	cmp	r2, r3
   35b30:	bcs	35b44 <flatcc_json_printer_uint32_struct_field@@Base+0x168>
   35b34:	mov	r1, r7
   35b38:	mov	r0, r4
   35b3c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   35b40:	b	35a40 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   35b44:	mov	r2, r7
   35b48:	mov	r1, #32
   35b4c:	bl	1459c <memset@plt>
   35b50:	ldr	r3, [r4, #20]
   35b54:	add	r7, r3, r7
   35b58:	str	r7, [r4, #20]
   35b5c:	b	35a40 <flatcc_json_printer_uint32_struct_field@@Base+0x64>
   35b60:	mov	r2, r6
   35b64:	ldr	r1, [sp, #24]
   35b68:	mov	r0, r4
   35b6c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   35b70:	b	35a88 <flatcc_json_printer_uint32_struct_field@@Base+0xac>

00035b74 <flatcc_json_printer_uint64_struct_field@@Base>:
   35b74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35b78:	strd	r6, [sp, #8]
   35b7c:	str	r8, [sp, #16]
   35b80:	str	lr, [sp, #20]
   35b84:	mov	r4, r0
   35b88:	ldr	r5, [sp, #28]
   35b8c:	ldrd	r6, [r2, r3]
   35b90:	cmp	r1, #0
   35b94:	beq	35bac <flatcc_json_printer_uint64_struct_field@@Base+0x38>
   35b98:	ldr	r3, [r0, #20]
   35b9c:	add	r2, r3, #1
   35ba0:	str	r2, [r0, #20]
   35ba4:	mov	r2, #44	; 0x2c
   35ba8:	strb	r2, [r3]
   35bac:	ldrb	r3, [r4, #25]
   35bb0:	cmp	r3, #0
   35bb4:	bne	35c9c <flatcc_json_printer_uint64_struct_field@@Base+0x128>
   35bb8:	ldr	r2, [r4, #20]
   35bbc:	ldr	r3, [r4, #16]
   35bc0:	cmp	r2, r3
   35bc4:	bcc	35bd8 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   35bc8:	ldr	r3, [r4, #44]	; 0x2c
   35bcc:	mov	r1, #0
   35bd0:	mov	r0, r4
   35bd4:	blx	r3
   35bd8:	ldr	r3, [r4, #20]
   35bdc:	mov	r2, #34	; 0x22
   35be0:	strb	r2, [r3]
   35be4:	ldrb	r3, [r4, #26]
   35be8:	ldr	r0, [r4, #20]
   35bec:	cmp	r3, #0
   35bf0:	addeq	r0, r0, #1
   35bf4:	str	r0, [r4, #20]
   35bf8:	add	r3, r0, r5
   35bfc:	ldr	r2, [r4, #16]
   35c00:	cmp	r2, r3
   35c04:	bls	35cfc <flatcc_json_printer_uint64_struct_field@@Base+0x188>
   35c08:	mov	r2, r5
   35c0c:	ldr	r1, [sp, #24]
   35c10:	bl	14524 <memcpy@plt>
   35c14:	ldr	r3, [r4, #20]
   35c18:	add	r5, r3, r5
   35c1c:	str	r5, [r4, #20]
   35c20:	ldr	r3, [r4, #20]
   35c24:	mov	r2, #34	; 0x22
   35c28:	strb	r2, [r3]
   35c2c:	ldrb	r3, [r4, #26]
   35c30:	clz	r3, r3
   35c34:	lsr	r3, r3, #5
   35c38:	ldr	r1, [r4, #20]
   35c3c:	add	r2, r1, r3
   35c40:	add	r2, r2, #1
   35c44:	str	r2, [r4, #20]
   35c48:	mov	r2, #58	; 0x3a
   35c4c:	strb	r2, [r1, r3]
   35c50:	ldr	r3, [r4, #20]
   35c54:	mov	r2, #32
   35c58:	strb	r2, [r3]
   35c5c:	ldrb	r3, [r4, #25]
   35c60:	ldr	r2, [r4, #20]
   35c64:	cmp	r3, #0
   35c68:	addne	r2, r2, #1
   35c6c:	str	r2, [r4, #20]
   35c70:	mov	r0, r6
   35c74:	mov	r1, r7
   35c78:	bl	30120 <flatcc_json_parser_struct_as_root@@Base+0x698>
   35c7c:	ldr	r3, [r4, #20]
   35c80:	add	r0, r3, r0
   35c84:	str	r0, [r4, #20]
   35c88:	ldrd	r4, [sp]
   35c8c:	ldrd	r6, [sp, #8]
   35c90:	ldr	r8, [sp, #16]
   35c94:	add	sp, sp, #20
   35c98:	pop	{pc}		; (ldr pc, [sp], #4)
   35c9c:	ldr	r3, [r4, #20]
   35ca0:	add	r2, r3, #1
   35ca4:	str	r2, [r4, #20]
   35ca8:	mov	r2, #10
   35cac:	strb	r2, [r3]
   35cb0:	ldrb	r3, [r4, #25]
   35cb4:	ldr	r8, [r4, #32]
   35cb8:	mul	r8, r8, r3
   35cbc:	ldr	r0, [r4, #20]
   35cc0:	add	r3, r0, r8
   35cc4:	ldr	r2, [r4, #16]
   35cc8:	cmp	r2, r3
   35ccc:	bcs	35ce0 <flatcc_json_printer_uint64_struct_field@@Base+0x16c>
   35cd0:	mov	r1, r8
   35cd4:	mov	r0, r4
   35cd8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   35cdc:	b	35bd8 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   35ce0:	mov	r2, r8
   35ce4:	mov	r1, #32
   35ce8:	bl	1459c <memset@plt>
   35cec:	ldr	r3, [r4, #20]
   35cf0:	add	r8, r3, r8
   35cf4:	str	r8, [r4, #20]
   35cf8:	b	35bd8 <flatcc_json_printer_uint64_struct_field@@Base+0x64>
   35cfc:	mov	r2, r5
   35d00:	ldr	r1, [sp, #24]
   35d04:	mov	r0, r4
   35d08:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   35d0c:	b	35c20 <flatcc_json_printer_uint64_struct_field@@Base+0xac>

00035d10 <flatcc_json_printer_int8_struct_field@@Base>:
   35d10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35d14:	strd	r6, [sp, #8]
   35d18:	str	r8, [sp, #16]
   35d1c:	str	lr, [sp, #20]
   35d20:	mov	r4, r0
   35d24:	ldr	r6, [sp, #28]
   35d28:	ldrsb	r5, [r2, r3]
   35d2c:	cmp	r1, #0
   35d30:	beq	35d48 <flatcc_json_printer_int8_struct_field@@Base+0x38>
   35d34:	ldr	r3, [r0, #20]
   35d38:	add	r2, r3, #1
   35d3c:	str	r2, [r0, #20]
   35d40:	mov	r2, #44	; 0x2c
   35d44:	strb	r2, [r3]
   35d48:	ldrb	r3, [r4, #25]
   35d4c:	cmp	r3, #0
   35d50:	bne	35e34 <flatcc_json_printer_int8_struct_field@@Base+0x124>
   35d54:	ldr	r2, [r4, #20]
   35d58:	ldr	r3, [r4, #16]
   35d5c:	cmp	r2, r3
   35d60:	bcc	35d74 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   35d64:	ldr	r3, [r4, #44]	; 0x2c
   35d68:	mov	r1, #0
   35d6c:	mov	r0, r4
   35d70:	blx	r3
   35d74:	ldr	r3, [r4, #20]
   35d78:	mov	r2, #34	; 0x22
   35d7c:	strb	r2, [r3]
   35d80:	ldrb	r3, [r4, #26]
   35d84:	ldr	r0, [r4, #20]
   35d88:	cmp	r3, #0
   35d8c:	addeq	r0, r0, #1
   35d90:	str	r0, [r4, #20]
   35d94:	add	r3, r0, r6
   35d98:	ldr	r2, [r4, #16]
   35d9c:	cmp	r2, r3
   35da0:	bls	35e94 <flatcc_json_printer_int8_struct_field@@Base+0x184>
   35da4:	mov	r2, r6
   35da8:	ldr	r1, [sp, #24]
   35dac:	bl	14524 <memcpy@plt>
   35db0:	ldr	r3, [r4, #20]
   35db4:	add	r6, r3, r6
   35db8:	str	r6, [r4, #20]
   35dbc:	ldr	r3, [r4, #20]
   35dc0:	mov	r2, #34	; 0x22
   35dc4:	strb	r2, [r3]
   35dc8:	ldrb	r3, [r4, #26]
   35dcc:	clz	r3, r3
   35dd0:	lsr	r3, r3, #5
   35dd4:	ldr	r1, [r4, #20]
   35dd8:	add	r2, r1, r3
   35ddc:	add	r2, r2, #1
   35de0:	str	r2, [r4, #20]
   35de4:	mov	r2, #58	; 0x3a
   35de8:	strb	r2, [r1, r3]
   35dec:	ldr	r3, [r4, #20]
   35df0:	mov	r2, #32
   35df4:	strb	r2, [r3]
   35df8:	ldrb	r3, [r4, #25]
   35dfc:	ldr	r1, [r4, #20]
   35e00:	cmp	r3, #0
   35e04:	addne	r1, r1, #1
   35e08:	str	r1, [r4, #20]
   35e0c:	mov	r0, r5
   35e10:	bl	307fc <flatcc_json_parser_struct_as_root@@Base+0xd74>
   35e14:	ldr	r3, [r4, #20]
   35e18:	add	r0, r3, r0
   35e1c:	str	r0, [r4, #20]
   35e20:	ldrd	r4, [sp]
   35e24:	ldrd	r6, [sp, #8]
   35e28:	ldr	r8, [sp, #16]
   35e2c:	add	sp, sp, #20
   35e30:	pop	{pc}		; (ldr pc, [sp], #4)
   35e34:	ldr	r3, [r4, #20]
   35e38:	add	r2, r3, #1
   35e3c:	str	r2, [r4, #20]
   35e40:	mov	r2, #10
   35e44:	strb	r2, [r3]
   35e48:	ldrb	r3, [r4, #25]
   35e4c:	ldr	r7, [r4, #32]
   35e50:	mul	r7, r7, r3
   35e54:	ldr	r0, [r4, #20]
   35e58:	add	r3, r0, r7
   35e5c:	ldr	r2, [r4, #16]
   35e60:	cmp	r2, r3
   35e64:	bcs	35e78 <flatcc_json_printer_int8_struct_field@@Base+0x168>
   35e68:	mov	r1, r7
   35e6c:	mov	r0, r4
   35e70:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   35e74:	b	35d74 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   35e78:	mov	r2, r7
   35e7c:	mov	r1, #32
   35e80:	bl	1459c <memset@plt>
   35e84:	ldr	r3, [r4, #20]
   35e88:	add	r7, r3, r7
   35e8c:	str	r7, [r4, #20]
   35e90:	b	35d74 <flatcc_json_printer_int8_struct_field@@Base+0x64>
   35e94:	mov	r2, r6
   35e98:	ldr	r1, [sp, #24]
   35e9c:	mov	r0, r4
   35ea0:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   35ea4:	b	35dbc <flatcc_json_printer_int8_struct_field@@Base+0xac>

00035ea8 <flatcc_json_printer_int16_struct_field@@Base>:
   35ea8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   35eac:	strd	r6, [sp, #8]
   35eb0:	str	r8, [sp, #16]
   35eb4:	str	lr, [sp, #20]
   35eb8:	mov	r4, r0
   35ebc:	ldr	r6, [sp, #28]
   35ec0:	ldrsh	r5, [r2, r3]
   35ec4:	cmp	r1, #0
   35ec8:	beq	35ee0 <flatcc_json_printer_int16_struct_field@@Base+0x38>
   35ecc:	ldr	r3, [r0, #20]
   35ed0:	add	r2, r3, #1
   35ed4:	str	r2, [r0, #20]
   35ed8:	mov	r2, #44	; 0x2c
   35edc:	strb	r2, [r3]
   35ee0:	ldrb	r3, [r4, #25]
   35ee4:	cmp	r3, #0
   35ee8:	bne	35fcc <flatcc_json_printer_int16_struct_field@@Base+0x124>
   35eec:	ldr	r2, [r4, #20]
   35ef0:	ldr	r3, [r4, #16]
   35ef4:	cmp	r2, r3
   35ef8:	bcc	35f0c <flatcc_json_printer_int16_struct_field@@Base+0x64>
   35efc:	ldr	r3, [r4, #44]	; 0x2c
   35f00:	mov	r1, #0
   35f04:	mov	r0, r4
   35f08:	blx	r3
   35f0c:	ldr	r3, [r4, #20]
   35f10:	mov	r2, #34	; 0x22
   35f14:	strb	r2, [r3]
   35f18:	ldrb	r3, [r4, #26]
   35f1c:	ldr	r0, [r4, #20]
   35f20:	cmp	r3, #0
   35f24:	addeq	r0, r0, #1
   35f28:	str	r0, [r4, #20]
   35f2c:	add	r3, r0, r6
   35f30:	ldr	r2, [r4, #16]
   35f34:	cmp	r2, r3
   35f38:	bls	3602c <flatcc_json_printer_int16_struct_field@@Base+0x184>
   35f3c:	mov	r2, r6
   35f40:	ldr	r1, [sp, #24]
   35f44:	bl	14524 <memcpy@plt>
   35f48:	ldr	r3, [r4, #20]
   35f4c:	add	r6, r3, r6
   35f50:	str	r6, [r4, #20]
   35f54:	ldr	r3, [r4, #20]
   35f58:	mov	r2, #34	; 0x22
   35f5c:	strb	r2, [r3]
   35f60:	ldrb	r3, [r4, #26]
   35f64:	clz	r3, r3
   35f68:	lsr	r3, r3, #5
   35f6c:	ldr	r1, [r4, #20]
   35f70:	add	r2, r1, r3
   35f74:	add	r2, r2, #1
   35f78:	str	r2, [r4, #20]
   35f7c:	mov	r2, #58	; 0x3a
   35f80:	strb	r2, [r1, r3]
   35f84:	ldr	r3, [r4, #20]
   35f88:	mov	r2, #32
   35f8c:	strb	r2, [r3]
   35f90:	ldrb	r3, [r4, #25]
   35f94:	ldr	r1, [r4, #20]
   35f98:	cmp	r3, #0
   35f9c:	addne	r1, r1, #1
   35fa0:	str	r1, [r4, #20]
   35fa4:	mov	r0, r5
   35fa8:	bl	3083c <flatcc_json_parser_struct_as_root@@Base+0xdb4>
   35fac:	ldr	r3, [r4, #20]
   35fb0:	add	r0, r3, r0
   35fb4:	str	r0, [r4, #20]
   35fb8:	ldrd	r4, [sp]
   35fbc:	ldrd	r6, [sp, #8]
   35fc0:	ldr	r8, [sp, #16]
   35fc4:	add	sp, sp, #20
   35fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   35fcc:	ldr	r3, [r4, #20]
   35fd0:	add	r2, r3, #1
   35fd4:	str	r2, [r4, #20]
   35fd8:	mov	r2, #10
   35fdc:	strb	r2, [r3]
   35fe0:	ldrb	r3, [r4, #25]
   35fe4:	ldr	r7, [r4, #32]
   35fe8:	mul	r7, r7, r3
   35fec:	ldr	r0, [r4, #20]
   35ff0:	add	r3, r0, r7
   35ff4:	ldr	r2, [r4, #16]
   35ff8:	cmp	r2, r3
   35ffc:	bcs	36010 <flatcc_json_printer_int16_struct_field@@Base+0x168>
   36000:	mov	r1, r7
   36004:	mov	r0, r4
   36008:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3600c:	b	35f0c <flatcc_json_printer_int16_struct_field@@Base+0x64>
   36010:	mov	r2, r7
   36014:	mov	r1, #32
   36018:	bl	1459c <memset@plt>
   3601c:	ldr	r3, [r4, #20]
   36020:	add	r7, r3, r7
   36024:	str	r7, [r4, #20]
   36028:	b	35f0c <flatcc_json_printer_int16_struct_field@@Base+0x64>
   3602c:	mov	r2, r6
   36030:	ldr	r1, [sp, #24]
   36034:	mov	r0, r4
   36038:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3603c:	b	35f54 <flatcc_json_printer_int16_struct_field@@Base+0xac>

00036040 <flatcc_json_printer_int32_struct_field@@Base>:
   36040:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36044:	strd	r6, [sp, #8]
   36048:	str	r8, [sp, #16]
   3604c:	str	lr, [sp, #20]
   36050:	mov	r4, r0
   36054:	ldr	r6, [sp, #28]
   36058:	ldr	r5, [r2, r3]
   3605c:	cmp	r1, #0
   36060:	beq	36078 <flatcc_json_printer_int32_struct_field@@Base+0x38>
   36064:	ldr	r3, [r0, #20]
   36068:	add	r2, r3, #1
   3606c:	str	r2, [r0, #20]
   36070:	mov	r2, #44	; 0x2c
   36074:	strb	r2, [r3]
   36078:	ldrb	r3, [r4, #25]
   3607c:	cmp	r3, #0
   36080:	bne	36164 <flatcc_json_printer_int32_struct_field@@Base+0x124>
   36084:	ldr	r2, [r4, #20]
   36088:	ldr	r3, [r4, #16]
   3608c:	cmp	r2, r3
   36090:	bcc	360a4 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   36094:	ldr	r3, [r4, #44]	; 0x2c
   36098:	mov	r1, #0
   3609c:	mov	r0, r4
   360a0:	blx	r3
   360a4:	ldr	r3, [r4, #20]
   360a8:	mov	r2, #34	; 0x22
   360ac:	strb	r2, [r3]
   360b0:	ldrb	r3, [r4, #26]
   360b4:	ldr	r0, [r4, #20]
   360b8:	cmp	r3, #0
   360bc:	addeq	r0, r0, #1
   360c0:	str	r0, [r4, #20]
   360c4:	add	r3, r0, r6
   360c8:	ldr	r2, [r4, #16]
   360cc:	cmp	r2, r3
   360d0:	bls	361c4 <flatcc_json_printer_int32_struct_field@@Base+0x184>
   360d4:	mov	r2, r6
   360d8:	ldr	r1, [sp, #24]
   360dc:	bl	14524 <memcpy@plt>
   360e0:	ldr	r3, [r4, #20]
   360e4:	add	r6, r3, r6
   360e8:	str	r6, [r4, #20]
   360ec:	ldr	r3, [r4, #20]
   360f0:	mov	r2, #34	; 0x22
   360f4:	strb	r2, [r3]
   360f8:	ldrb	r3, [r4, #26]
   360fc:	clz	r3, r3
   36100:	lsr	r3, r3, #5
   36104:	ldr	r1, [r4, #20]
   36108:	add	r2, r1, r3
   3610c:	add	r2, r2, #1
   36110:	str	r2, [r4, #20]
   36114:	mov	r2, #58	; 0x3a
   36118:	strb	r2, [r1, r3]
   3611c:	ldr	r3, [r4, #20]
   36120:	mov	r2, #32
   36124:	strb	r2, [r3]
   36128:	ldrb	r3, [r4, #25]
   3612c:	ldr	r1, [r4, #20]
   36130:	cmp	r3, #0
   36134:	addne	r1, r1, #1
   36138:	str	r1, [r4, #20]
   3613c:	mov	r0, r5
   36140:	bl	3087c <flatcc_json_parser_struct_as_root@@Base+0xdf4>
   36144:	ldr	r3, [r4, #20]
   36148:	add	r0, r3, r0
   3614c:	str	r0, [r4, #20]
   36150:	ldrd	r4, [sp]
   36154:	ldrd	r6, [sp, #8]
   36158:	ldr	r8, [sp, #16]
   3615c:	add	sp, sp, #20
   36160:	pop	{pc}		; (ldr pc, [sp], #4)
   36164:	ldr	r3, [r4, #20]
   36168:	add	r2, r3, #1
   3616c:	str	r2, [r4, #20]
   36170:	mov	r2, #10
   36174:	strb	r2, [r3]
   36178:	ldrb	r3, [r4, #25]
   3617c:	ldr	r7, [r4, #32]
   36180:	mul	r7, r7, r3
   36184:	ldr	r0, [r4, #20]
   36188:	add	r3, r0, r7
   3618c:	ldr	r2, [r4, #16]
   36190:	cmp	r2, r3
   36194:	bcs	361a8 <flatcc_json_printer_int32_struct_field@@Base+0x168>
   36198:	mov	r1, r7
   3619c:	mov	r0, r4
   361a0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   361a4:	b	360a4 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   361a8:	mov	r2, r7
   361ac:	mov	r1, #32
   361b0:	bl	1459c <memset@plt>
   361b4:	ldr	r3, [r4, #20]
   361b8:	add	r7, r3, r7
   361bc:	str	r7, [r4, #20]
   361c0:	b	360a4 <flatcc_json_printer_int32_struct_field@@Base+0x64>
   361c4:	mov	r2, r6
   361c8:	ldr	r1, [sp, #24]
   361cc:	mov	r0, r4
   361d0:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   361d4:	b	360ec <flatcc_json_printer_int32_struct_field@@Base+0xac>

000361d8 <flatcc_json_printer_int64_struct_field@@Base>:
   361d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   361dc:	strd	r6, [sp, #8]
   361e0:	str	r8, [sp, #16]
   361e4:	str	lr, [sp, #20]
   361e8:	mov	r4, r0
   361ec:	ldr	r5, [sp, #28]
   361f0:	ldrd	r6, [r2, r3]
   361f4:	cmp	r1, #0
   361f8:	beq	36210 <flatcc_json_printer_int64_struct_field@@Base+0x38>
   361fc:	ldr	r3, [r0, #20]
   36200:	add	r2, r3, #1
   36204:	str	r2, [r0, #20]
   36208:	mov	r2, #44	; 0x2c
   3620c:	strb	r2, [r3]
   36210:	ldrb	r3, [r4, #25]
   36214:	cmp	r3, #0
   36218:	bne	36300 <flatcc_json_printer_int64_struct_field@@Base+0x128>
   3621c:	ldr	r2, [r4, #20]
   36220:	ldr	r3, [r4, #16]
   36224:	cmp	r2, r3
   36228:	bcc	3623c <flatcc_json_printer_int64_struct_field@@Base+0x64>
   3622c:	ldr	r3, [r4, #44]	; 0x2c
   36230:	mov	r1, #0
   36234:	mov	r0, r4
   36238:	blx	r3
   3623c:	ldr	r3, [r4, #20]
   36240:	mov	r2, #34	; 0x22
   36244:	strb	r2, [r3]
   36248:	ldrb	r3, [r4, #26]
   3624c:	ldr	r0, [r4, #20]
   36250:	cmp	r3, #0
   36254:	addeq	r0, r0, #1
   36258:	str	r0, [r4, #20]
   3625c:	add	r3, r0, r5
   36260:	ldr	r2, [r4, #16]
   36264:	cmp	r2, r3
   36268:	bls	36360 <flatcc_json_printer_int64_struct_field@@Base+0x188>
   3626c:	mov	r2, r5
   36270:	ldr	r1, [sp, #24]
   36274:	bl	14524 <memcpy@plt>
   36278:	ldr	r3, [r4, #20]
   3627c:	add	r5, r3, r5
   36280:	str	r5, [r4, #20]
   36284:	ldr	r3, [r4, #20]
   36288:	mov	r2, #34	; 0x22
   3628c:	strb	r2, [r3]
   36290:	ldrb	r3, [r4, #26]
   36294:	clz	r3, r3
   36298:	lsr	r3, r3, #5
   3629c:	ldr	r1, [r4, #20]
   362a0:	add	r2, r1, r3
   362a4:	add	r2, r2, #1
   362a8:	str	r2, [r4, #20]
   362ac:	mov	r2, #58	; 0x3a
   362b0:	strb	r2, [r1, r3]
   362b4:	ldr	r3, [r4, #20]
   362b8:	mov	r2, #32
   362bc:	strb	r2, [r3]
   362c0:	ldrb	r3, [r4, #25]
   362c4:	ldr	r2, [r4, #20]
   362c8:	cmp	r3, #0
   362cc:	addne	r2, r2, #1
   362d0:	str	r2, [r4, #20]
   362d4:	mov	r0, r6
   362d8:	mov	r1, r7
   362dc:	bl	308b4 <flatcc_json_parser_struct_as_root@@Base+0xe2c>
   362e0:	ldr	r3, [r4, #20]
   362e4:	add	r0, r3, r0
   362e8:	str	r0, [r4, #20]
   362ec:	ldrd	r4, [sp]
   362f0:	ldrd	r6, [sp, #8]
   362f4:	ldr	r8, [sp, #16]
   362f8:	add	sp, sp, #20
   362fc:	pop	{pc}		; (ldr pc, [sp], #4)
   36300:	ldr	r3, [r4, #20]
   36304:	add	r2, r3, #1
   36308:	str	r2, [r4, #20]
   3630c:	mov	r2, #10
   36310:	strb	r2, [r3]
   36314:	ldrb	r3, [r4, #25]
   36318:	ldr	r8, [r4, #32]
   3631c:	mul	r8, r8, r3
   36320:	ldr	r0, [r4, #20]
   36324:	add	r3, r0, r8
   36328:	ldr	r2, [r4, #16]
   3632c:	cmp	r2, r3
   36330:	bcs	36344 <flatcc_json_printer_int64_struct_field@@Base+0x16c>
   36334:	mov	r1, r8
   36338:	mov	r0, r4
   3633c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   36340:	b	3623c <flatcc_json_printer_int64_struct_field@@Base+0x64>
   36344:	mov	r2, r8
   36348:	mov	r1, #32
   3634c:	bl	1459c <memset@plt>
   36350:	ldr	r3, [r4, #20]
   36354:	add	r8, r3, r8
   36358:	str	r8, [r4, #20]
   3635c:	b	3623c <flatcc_json_printer_int64_struct_field@@Base+0x64>
   36360:	mov	r2, r5
   36364:	ldr	r1, [sp, #24]
   36368:	mov	r0, r4
   3636c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   36370:	b	36284 <flatcc_json_printer_int64_struct_field@@Base+0xac>

00036374 <flatcc_json_printer_bool_struct_field@@Base>:
   36374:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36378:	strd	r6, [sp, #8]
   3637c:	str	r8, [sp, #16]
   36380:	str	lr, [sp, #20]
   36384:	mov	r4, r0
   36388:	ldr	r6, [sp, #28]
   3638c:	ldrb	r5, [r2, r3]
   36390:	cmp	r1, #0
   36394:	beq	363ac <flatcc_json_printer_bool_struct_field@@Base+0x38>
   36398:	ldr	r3, [r0, #20]
   3639c:	add	r2, r3, #1
   363a0:	str	r2, [r0, #20]
   363a4:	mov	r2, #44	; 0x2c
   363a8:	strb	r2, [r3]
   363ac:	ldrb	r3, [r4, #25]
   363b0:	cmp	r3, #0
   363b4:	bne	36498 <flatcc_json_printer_bool_struct_field@@Base+0x124>
   363b8:	ldr	r2, [r4, #20]
   363bc:	ldr	r3, [r4, #16]
   363c0:	cmp	r2, r3
   363c4:	bcc	363d8 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   363c8:	ldr	r3, [r4, #44]	; 0x2c
   363cc:	mov	r1, #0
   363d0:	mov	r0, r4
   363d4:	blx	r3
   363d8:	ldr	r3, [r4, #20]
   363dc:	mov	r2, #34	; 0x22
   363e0:	strb	r2, [r3]
   363e4:	ldrb	r3, [r4, #26]
   363e8:	ldr	r0, [r4, #20]
   363ec:	cmp	r3, #0
   363f0:	addeq	r0, r0, #1
   363f4:	str	r0, [r4, #20]
   363f8:	add	r3, r0, r6
   363fc:	ldr	r2, [r4, #16]
   36400:	cmp	r2, r3
   36404:	bls	364f8 <flatcc_json_printer_bool_struct_field@@Base+0x184>
   36408:	mov	r2, r6
   3640c:	ldr	r1, [sp, #24]
   36410:	bl	14524 <memcpy@plt>
   36414:	ldr	r3, [r4, #20]
   36418:	add	r6, r3, r6
   3641c:	str	r6, [r4, #20]
   36420:	ldr	r3, [r4, #20]
   36424:	mov	r2, #34	; 0x22
   36428:	strb	r2, [r3]
   3642c:	ldrb	r3, [r4, #26]
   36430:	clz	r3, r3
   36434:	lsr	r3, r3, #5
   36438:	ldr	r1, [r4, #20]
   3643c:	add	r2, r1, r3
   36440:	add	r2, r2, #1
   36444:	str	r2, [r4, #20]
   36448:	mov	r2, #58	; 0x3a
   3644c:	strb	r2, [r1, r3]
   36450:	ldr	r3, [r4, #20]
   36454:	mov	r2, #32
   36458:	strb	r2, [r3]
   3645c:	ldrb	r3, [r4, #25]
   36460:	ldr	r1, [r4, #20]
   36464:	cmp	r3, #0
   36468:	addne	r1, r1, #1
   3646c:	str	r1, [r4, #20]
   36470:	mov	r0, r5
   36474:	bl	310a8 <flatcc_json_parser_struct_as_root@@Base+0x1620>
   36478:	ldr	r3, [r4, #20]
   3647c:	add	r0, r3, r0
   36480:	str	r0, [r4, #20]
   36484:	ldrd	r4, [sp]
   36488:	ldrd	r6, [sp, #8]
   3648c:	ldr	r8, [sp, #16]
   36490:	add	sp, sp, #20
   36494:	pop	{pc}		; (ldr pc, [sp], #4)
   36498:	ldr	r3, [r4, #20]
   3649c:	add	r2, r3, #1
   364a0:	str	r2, [r4, #20]
   364a4:	mov	r2, #10
   364a8:	strb	r2, [r3]
   364ac:	ldrb	r3, [r4, #25]
   364b0:	ldr	r7, [r4, #32]
   364b4:	mul	r7, r7, r3
   364b8:	ldr	r0, [r4, #20]
   364bc:	add	r3, r0, r7
   364c0:	ldr	r2, [r4, #16]
   364c4:	cmp	r2, r3
   364c8:	bcs	364dc <flatcc_json_printer_bool_struct_field@@Base+0x168>
   364cc:	mov	r1, r7
   364d0:	mov	r0, r4
   364d4:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   364d8:	b	363d8 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   364dc:	mov	r2, r7
   364e0:	mov	r1, #32
   364e4:	bl	1459c <memset@plt>
   364e8:	ldr	r3, [r4, #20]
   364ec:	add	r7, r3, r7
   364f0:	str	r7, [r4, #20]
   364f4:	b	363d8 <flatcc_json_printer_bool_struct_field@@Base+0x64>
   364f8:	mov	r2, r6
   364fc:	ldr	r1, [sp, #24]
   36500:	mov	r0, r4
   36504:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   36508:	b	36420 <flatcc_json_printer_bool_struct_field@@Base+0xac>

0003650c <flatcc_json_printer_float_struct_field@@Base>:
   3650c:	strd	r4, [sp, #-16]!
   36510:	str	r6, [sp, #8]
   36514:	str	lr, [sp, #12]
   36518:	vpush	{d8}
   3651c:	mov	r4, r0
   36520:	ldr	r5, [sp, #28]
   36524:	add	r3, r2, r3
   36528:	vldr	s16, [r3]
   3652c:	cmp	r1, #0
   36530:	beq	36548 <flatcc_json_printer_float_struct_field@@Base+0x3c>
   36534:	ldr	r3, [r0, #20]
   36538:	add	r2, r3, #1
   3653c:	str	r2, [r0, #20]
   36540:	mov	r2, #44	; 0x2c
   36544:	strb	r2, [r3]
   36548:	ldrb	r3, [r4, #25]
   3654c:	cmp	r3, #0
   36550:	bne	36634 <flatcc_json_printer_float_struct_field@@Base+0x128>
   36554:	ldr	r2, [r4, #20]
   36558:	ldr	r3, [r4, #16]
   3655c:	cmp	r2, r3
   36560:	bcc	36574 <flatcc_json_printer_float_struct_field@@Base+0x68>
   36564:	ldr	r3, [r4, #44]	; 0x2c
   36568:	mov	r1, #0
   3656c:	mov	r0, r4
   36570:	blx	r3
   36574:	ldr	r3, [r4, #20]
   36578:	mov	r2, #34	; 0x22
   3657c:	strb	r2, [r3]
   36580:	ldrb	r3, [r4, #26]
   36584:	ldr	r0, [r4, #20]
   36588:	cmp	r3, #0
   3658c:	addeq	r0, r0, #1
   36590:	str	r0, [r4, #20]
   36594:	add	r3, r0, r5
   36598:	ldr	r2, [r4, #16]
   3659c:	cmp	r2, r3
   365a0:	bls	36694 <flatcc_json_printer_float_struct_field@@Base+0x188>
   365a4:	mov	r2, r5
   365a8:	ldr	r1, [sp, #24]
   365ac:	bl	14524 <memcpy@plt>
   365b0:	ldr	r3, [r4, #20]
   365b4:	add	r5, r3, r5
   365b8:	str	r5, [r4, #20]
   365bc:	ldr	r3, [r4, #20]
   365c0:	mov	r2, #34	; 0x22
   365c4:	strb	r2, [r3]
   365c8:	ldrb	r3, [r4, #26]
   365cc:	clz	r3, r3
   365d0:	lsr	r3, r3, #5
   365d4:	ldr	r1, [r4, #20]
   365d8:	add	r2, r1, r3
   365dc:	add	r2, r2, #1
   365e0:	str	r2, [r4, #20]
   365e4:	mov	r2, #58	; 0x3a
   365e8:	strb	r2, [r1, r3]
   365ec:	ldr	r3, [r4, #20]
   365f0:	mov	r2, #32
   365f4:	strb	r2, [r3]
   365f8:	ldrb	r3, [r4, #25]
   365fc:	ldr	r0, [r4, #20]
   36600:	cmp	r3, #0
   36604:	addne	r0, r0, #1
   36608:	str	r0, [r4, #20]
   3660c:	vcvt.f64.f32	d0, s16
   36610:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   36614:	ldr	r3, [r4, #20]
   36618:	add	r0, r3, r0
   3661c:	str	r0, [r4, #20]
   36620:	vpop	{d8}
   36624:	ldrd	r4, [sp]
   36628:	ldr	r6, [sp, #8]
   3662c:	add	sp, sp, #12
   36630:	pop	{pc}		; (ldr pc, [sp], #4)
   36634:	ldr	r3, [r4, #20]
   36638:	add	r2, r3, #1
   3663c:	str	r2, [r4, #20]
   36640:	mov	r2, #10
   36644:	strb	r2, [r3]
   36648:	ldrb	r3, [r4, #25]
   3664c:	ldr	r6, [r4, #32]
   36650:	mul	r6, r6, r3
   36654:	ldr	r0, [r4, #20]
   36658:	add	r3, r0, r6
   3665c:	ldr	r2, [r4, #16]
   36660:	cmp	r2, r3
   36664:	bcs	36678 <flatcc_json_printer_float_struct_field@@Base+0x16c>
   36668:	mov	r1, r6
   3666c:	mov	r0, r4
   36670:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   36674:	b	36574 <flatcc_json_printer_float_struct_field@@Base+0x68>
   36678:	mov	r2, r6
   3667c:	mov	r1, #32
   36680:	bl	1459c <memset@plt>
   36684:	ldr	r3, [r4, #20]
   36688:	add	r6, r3, r6
   3668c:	str	r6, [r4, #20]
   36690:	b	36574 <flatcc_json_printer_float_struct_field@@Base+0x68>
   36694:	mov	r2, r5
   36698:	ldr	r1, [sp, #24]
   3669c:	mov	r0, r4
   366a0:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   366a4:	b	365bc <flatcc_json_printer_float_struct_field@@Base+0xb0>

000366a8 <flatcc_json_printer_double_struct_field@@Base>:
   366a8:	strd	r4, [sp, #-16]!
   366ac:	str	r6, [sp, #8]
   366b0:	str	lr, [sp, #12]
   366b4:	vpush	{d8}
   366b8:	mov	r4, r0
   366bc:	ldr	r5, [sp, #28]
   366c0:	add	r3, r2, r3
   366c4:	vldr	d8, [r3]
   366c8:	cmp	r1, #0
   366cc:	beq	366e4 <flatcc_json_printer_double_struct_field@@Base+0x3c>
   366d0:	ldr	r3, [r0, #20]
   366d4:	add	r2, r3, #1
   366d8:	str	r2, [r0, #20]
   366dc:	mov	r2, #44	; 0x2c
   366e0:	strb	r2, [r3]
   366e4:	ldrb	r3, [r4, #25]
   366e8:	cmp	r3, #0
   366ec:	bne	367d0 <flatcc_json_printer_double_struct_field@@Base+0x128>
   366f0:	ldr	r2, [r4, #20]
   366f4:	ldr	r3, [r4, #16]
   366f8:	cmp	r2, r3
   366fc:	bcc	36710 <flatcc_json_printer_double_struct_field@@Base+0x68>
   36700:	ldr	r3, [r4, #44]	; 0x2c
   36704:	mov	r1, #0
   36708:	mov	r0, r4
   3670c:	blx	r3
   36710:	ldr	r3, [r4, #20]
   36714:	mov	r2, #34	; 0x22
   36718:	strb	r2, [r3]
   3671c:	ldrb	r3, [r4, #26]
   36720:	ldr	r0, [r4, #20]
   36724:	cmp	r3, #0
   36728:	addeq	r0, r0, #1
   3672c:	str	r0, [r4, #20]
   36730:	add	r3, r0, r5
   36734:	ldr	r2, [r4, #16]
   36738:	cmp	r2, r3
   3673c:	bls	36830 <flatcc_json_printer_double_struct_field@@Base+0x188>
   36740:	mov	r2, r5
   36744:	ldr	r1, [sp, #24]
   36748:	bl	14524 <memcpy@plt>
   3674c:	ldr	r3, [r4, #20]
   36750:	add	r5, r3, r5
   36754:	str	r5, [r4, #20]
   36758:	ldr	r3, [r4, #20]
   3675c:	mov	r2, #34	; 0x22
   36760:	strb	r2, [r3]
   36764:	ldrb	r3, [r4, #26]
   36768:	clz	r3, r3
   3676c:	lsr	r3, r3, #5
   36770:	ldr	r1, [r4, #20]
   36774:	add	r2, r1, r3
   36778:	add	r2, r2, #1
   3677c:	str	r2, [r4, #20]
   36780:	mov	r2, #58	; 0x3a
   36784:	strb	r2, [r1, r3]
   36788:	ldr	r3, [r4, #20]
   3678c:	mov	r2, #32
   36790:	strb	r2, [r3]
   36794:	ldrb	r3, [r4, #25]
   36798:	ldr	r0, [r4, #20]
   3679c:	cmp	r3, #0
   367a0:	addne	r0, r0, #1
   367a4:	str	r0, [r4, #20]
   367a8:	vmov.f64	d0, d8
   367ac:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   367b0:	ldr	r3, [r4, #20]
   367b4:	add	r0, r3, r0
   367b8:	str	r0, [r4, #20]
   367bc:	vpop	{d8}
   367c0:	ldrd	r4, [sp]
   367c4:	ldr	r6, [sp, #8]
   367c8:	add	sp, sp, #12
   367cc:	pop	{pc}		; (ldr pc, [sp], #4)
   367d0:	ldr	r3, [r4, #20]
   367d4:	add	r2, r3, #1
   367d8:	str	r2, [r4, #20]
   367dc:	mov	r2, #10
   367e0:	strb	r2, [r3]
   367e4:	ldrb	r3, [r4, #25]
   367e8:	ldr	r6, [r4, #32]
   367ec:	mul	r6, r6, r3
   367f0:	ldr	r0, [r4, #20]
   367f4:	add	r3, r0, r6
   367f8:	ldr	r2, [r4, #16]
   367fc:	cmp	r2, r3
   36800:	bcs	36814 <flatcc_json_printer_double_struct_field@@Base+0x16c>
   36804:	mov	r1, r6
   36808:	mov	r0, r4
   3680c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   36810:	b	36710 <flatcc_json_printer_double_struct_field@@Base+0x68>
   36814:	mov	r2, r6
   36818:	mov	r1, #32
   3681c:	bl	1459c <memset@plt>
   36820:	ldr	r3, [r4, #20]
   36824:	add	r6, r3, r6
   36828:	str	r6, [r4, #20]
   3682c:	b	36710 <flatcc_json_printer_double_struct_field@@Base+0x68>
   36830:	mov	r2, r5
   36834:	ldr	r1, [sp, #24]
   36838:	mov	r0, r4
   3683c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   36840:	b	36758 <flatcc_json_printer_double_struct_field@@Base+0xb0>

00036844 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   36844:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36848:	strd	r6, [sp, #8]
   3684c:	str	r8, [sp, #16]
   36850:	str	lr, [sp, #20]
   36854:	mov	r4, r0
   36858:	ldr	r6, [sp, #28]
   3685c:	ldrb	r5, [r2, r3]
   36860:	cmp	r1, #0
   36864:	beq	3687c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x38>
   36868:	ldr	r3, [r0, #20]
   3686c:	add	r2, r3, #1
   36870:	str	r2, [r0, #20]
   36874:	mov	r2, #44	; 0x2c
   36878:	strb	r2, [r3]
   3687c:	ldrb	r3, [r4, #25]
   36880:	cmp	r3, #0
   36884:	bne	36970 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x12c>
   36888:	ldr	r2, [r4, #20]
   3688c:	ldr	r3, [r4, #16]
   36890:	cmp	r2, r3
   36894:	bcc	368a8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x64>
   36898:	ldr	r3, [r4, #44]	; 0x2c
   3689c:	mov	r1, #0
   368a0:	mov	r0, r4
   368a4:	blx	r3
   368a8:	ldr	r3, [r4, #20]
   368ac:	mov	r2, #34	; 0x22
   368b0:	strb	r2, [r3]
   368b4:	ldrb	r3, [r4, #26]
   368b8:	ldr	r0, [r4, #20]
   368bc:	cmp	r3, #0
   368c0:	addeq	r0, r0, #1
   368c4:	str	r0, [r4, #20]
   368c8:	add	r3, r0, r6
   368cc:	ldr	r2, [r4, #16]
   368d0:	cmp	r2, r3
   368d4:	bls	369d0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x18c>
   368d8:	mov	r2, r6
   368dc:	ldr	r1, [sp, #24]
   368e0:	bl	14524 <memcpy@plt>
   368e4:	ldr	r3, [r4, #20]
   368e8:	add	r6, r3, r6
   368ec:	str	r6, [r4, #20]
   368f0:	ldr	r3, [r4, #20]
   368f4:	mov	r2, #34	; 0x22
   368f8:	strb	r2, [r3]
   368fc:	ldrb	r3, [r4, #26]
   36900:	clz	r3, r3
   36904:	lsr	r3, r3, #5
   36908:	ldr	r1, [r4, #20]
   3690c:	add	r2, r1, r3
   36910:	add	r2, r2, #1
   36914:	str	r2, [r4, #20]
   36918:	mov	r2, #58	; 0x3a
   3691c:	strb	r2, [r1, r3]
   36920:	ldr	r3, [r4, #20]
   36924:	mov	r2, #32
   36928:	strb	r2, [r3]
   3692c:	ldrb	r3, [r4, #25]
   36930:	ldr	r1, [r4, #20]
   36934:	cmp	r3, #0
   36938:	addne	r1, r1, #1
   3693c:	str	r1, [r4, #20]
   36940:	ldrb	r3, [r4, #27]
   36944:	cmp	r3, #0
   36948:	bne	369e4 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1a0>
   3694c:	mov	r1, r5
   36950:	mov	r0, r4
   36954:	ldr	r3, [sp, #32]
   36958:	blx	r3
   3695c:	ldrd	r4, [sp]
   36960:	ldrd	r6, [sp, #8]
   36964:	ldr	r8, [sp, #16]
   36968:	add	sp, sp, #20
   3696c:	pop	{pc}		; (ldr pc, [sp], #4)
   36970:	ldr	r3, [r4, #20]
   36974:	add	r2, r3, #1
   36978:	str	r2, [r4, #20]
   3697c:	mov	r2, #10
   36980:	strb	r2, [r3]
   36984:	ldrb	r3, [r4, #25]
   36988:	ldr	r7, [r4, #32]
   3698c:	mul	r7, r7, r3
   36990:	ldr	r0, [r4, #20]
   36994:	add	r3, r0, r7
   36998:	ldr	r2, [r4, #16]
   3699c:	cmp	r2, r3
   369a0:	bcs	369b4 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x170>
   369a4:	mov	r1, r7
   369a8:	mov	r0, r4
   369ac:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   369b0:	b	368a8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x64>
   369b4:	mov	r2, r7
   369b8:	mov	r1, #32
   369bc:	bl	1459c <memset@plt>
   369c0:	ldr	r3, [r4, #20]
   369c4:	add	r7, r3, r7
   369c8:	str	r7, [r4, #20]
   369cc:	b	368a8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x64>
   369d0:	mov	r2, r6
   369d4:	ldr	r1, [sp, #24]
   369d8:	mov	r0, r4
   369dc:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   369e0:	b	368f0 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xac>
   369e4:	mov	r0, r5
   369e8:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   369ec:	ldr	r3, [r4, #20]
   369f0:	add	r0, r3, r0
   369f4:	str	r0, [r4, #20]
   369f8:	b	3695c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x118>

000369fc <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   369fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36a00:	strd	r6, [sp, #8]
   36a04:	str	r8, [sp, #16]
   36a08:	str	lr, [sp, #20]
   36a0c:	mov	r4, r0
   36a10:	ldr	r6, [sp, #28]
   36a14:	ldrh	r5, [r2, r3]
   36a18:	cmp	r1, #0
   36a1c:	beq	36a34 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x38>
   36a20:	ldr	r3, [r0, #20]
   36a24:	add	r2, r3, #1
   36a28:	str	r2, [r0, #20]
   36a2c:	mov	r2, #44	; 0x2c
   36a30:	strb	r2, [r3]
   36a34:	ldrb	r3, [r4, #25]
   36a38:	cmp	r3, #0
   36a3c:	bne	36b28 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x12c>
   36a40:	ldr	r2, [r4, #20]
   36a44:	ldr	r3, [r4, #16]
   36a48:	cmp	r2, r3
   36a4c:	bcc	36a60 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x64>
   36a50:	ldr	r3, [r4, #44]	; 0x2c
   36a54:	mov	r1, #0
   36a58:	mov	r0, r4
   36a5c:	blx	r3
   36a60:	ldr	r3, [r4, #20]
   36a64:	mov	r2, #34	; 0x22
   36a68:	strb	r2, [r3]
   36a6c:	ldrb	r3, [r4, #26]
   36a70:	ldr	r0, [r4, #20]
   36a74:	cmp	r3, #0
   36a78:	addeq	r0, r0, #1
   36a7c:	str	r0, [r4, #20]
   36a80:	add	r3, r0, r6
   36a84:	ldr	r2, [r4, #16]
   36a88:	cmp	r2, r3
   36a8c:	bls	36b88 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x18c>
   36a90:	mov	r2, r6
   36a94:	ldr	r1, [sp, #24]
   36a98:	bl	14524 <memcpy@plt>
   36a9c:	ldr	r3, [r4, #20]
   36aa0:	add	r6, r3, r6
   36aa4:	str	r6, [r4, #20]
   36aa8:	ldr	r3, [r4, #20]
   36aac:	mov	r2, #34	; 0x22
   36ab0:	strb	r2, [r3]
   36ab4:	ldrb	r3, [r4, #26]
   36ab8:	clz	r3, r3
   36abc:	lsr	r3, r3, #5
   36ac0:	ldr	r1, [r4, #20]
   36ac4:	add	r2, r1, r3
   36ac8:	add	r2, r2, #1
   36acc:	str	r2, [r4, #20]
   36ad0:	mov	r2, #58	; 0x3a
   36ad4:	strb	r2, [r1, r3]
   36ad8:	ldr	r3, [r4, #20]
   36adc:	mov	r2, #32
   36ae0:	strb	r2, [r3]
   36ae4:	ldrb	r3, [r4, #25]
   36ae8:	ldr	r1, [r4, #20]
   36aec:	cmp	r3, #0
   36af0:	addne	r1, r1, #1
   36af4:	str	r1, [r4, #20]
   36af8:	ldrb	r3, [r4, #27]
   36afc:	cmp	r3, #0
   36b00:	bne	36b9c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1a0>
   36b04:	mov	r1, r5
   36b08:	mov	r0, r4
   36b0c:	ldr	r3, [sp, #32]
   36b10:	blx	r3
   36b14:	ldrd	r4, [sp]
   36b18:	ldrd	r6, [sp, #8]
   36b1c:	ldr	r8, [sp, #16]
   36b20:	add	sp, sp, #20
   36b24:	pop	{pc}		; (ldr pc, [sp], #4)
   36b28:	ldr	r3, [r4, #20]
   36b2c:	add	r2, r3, #1
   36b30:	str	r2, [r4, #20]
   36b34:	mov	r2, #10
   36b38:	strb	r2, [r3]
   36b3c:	ldrb	r3, [r4, #25]
   36b40:	ldr	r7, [r4, #32]
   36b44:	mul	r7, r7, r3
   36b48:	ldr	r0, [r4, #20]
   36b4c:	add	r3, r0, r7
   36b50:	ldr	r2, [r4, #16]
   36b54:	cmp	r2, r3
   36b58:	bcs	36b6c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x170>
   36b5c:	mov	r1, r7
   36b60:	mov	r0, r4
   36b64:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   36b68:	b	36a60 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x64>
   36b6c:	mov	r2, r7
   36b70:	mov	r1, #32
   36b74:	bl	1459c <memset@plt>
   36b78:	ldr	r3, [r4, #20]
   36b7c:	add	r7, r3, r7
   36b80:	str	r7, [r4, #20]
   36b84:	b	36a60 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x64>
   36b88:	mov	r2, r6
   36b8c:	ldr	r1, [sp, #24]
   36b90:	mov	r0, r4
   36b94:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   36b98:	b	36aa8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xac>
   36b9c:	mov	r0, r5
   36ba0:	bl	2fc28 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   36ba4:	ldr	r3, [r4, #20]
   36ba8:	add	r0, r3, r0
   36bac:	str	r0, [r4, #20]
   36bb0:	b	36b14 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x118>

00036bb4 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   36bb4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36bb8:	strd	r6, [sp, #8]
   36bbc:	str	r8, [sp, #16]
   36bc0:	str	lr, [sp, #20]
   36bc4:	mov	r4, r0
   36bc8:	ldr	r6, [sp, #28]
   36bcc:	ldr	r5, [r2, r3]
   36bd0:	cmp	r1, #0
   36bd4:	beq	36bec <flatcc_json_printer_uint32_enum_struct_field@@Base+0x38>
   36bd8:	ldr	r3, [r0, #20]
   36bdc:	add	r2, r3, #1
   36be0:	str	r2, [r0, #20]
   36be4:	mov	r2, #44	; 0x2c
   36be8:	strb	r2, [r3]
   36bec:	ldrb	r3, [r4, #25]
   36bf0:	cmp	r3, #0
   36bf4:	bne	36ce0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x12c>
   36bf8:	ldr	r2, [r4, #20]
   36bfc:	ldr	r3, [r4, #16]
   36c00:	cmp	r2, r3
   36c04:	bcc	36c18 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x64>
   36c08:	ldr	r3, [r4, #44]	; 0x2c
   36c0c:	mov	r1, #0
   36c10:	mov	r0, r4
   36c14:	blx	r3
   36c18:	ldr	r3, [r4, #20]
   36c1c:	mov	r2, #34	; 0x22
   36c20:	strb	r2, [r3]
   36c24:	ldrb	r3, [r4, #26]
   36c28:	ldr	r0, [r4, #20]
   36c2c:	cmp	r3, #0
   36c30:	addeq	r0, r0, #1
   36c34:	str	r0, [r4, #20]
   36c38:	add	r3, r0, r6
   36c3c:	ldr	r2, [r4, #16]
   36c40:	cmp	r2, r3
   36c44:	bls	36d40 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x18c>
   36c48:	mov	r2, r6
   36c4c:	ldr	r1, [sp, #24]
   36c50:	bl	14524 <memcpy@plt>
   36c54:	ldr	r3, [r4, #20]
   36c58:	add	r6, r3, r6
   36c5c:	str	r6, [r4, #20]
   36c60:	ldr	r3, [r4, #20]
   36c64:	mov	r2, #34	; 0x22
   36c68:	strb	r2, [r3]
   36c6c:	ldrb	r3, [r4, #26]
   36c70:	clz	r3, r3
   36c74:	lsr	r3, r3, #5
   36c78:	ldr	r1, [r4, #20]
   36c7c:	add	r2, r1, r3
   36c80:	add	r2, r2, #1
   36c84:	str	r2, [r4, #20]
   36c88:	mov	r2, #58	; 0x3a
   36c8c:	strb	r2, [r1, r3]
   36c90:	ldr	r3, [r4, #20]
   36c94:	mov	r2, #32
   36c98:	strb	r2, [r3]
   36c9c:	ldrb	r3, [r4, #25]
   36ca0:	ldr	r1, [r4, #20]
   36ca4:	cmp	r3, #0
   36ca8:	addne	r1, r1, #1
   36cac:	str	r1, [r4, #20]
   36cb0:	ldrb	r3, [r4, #27]
   36cb4:	cmp	r3, #0
   36cb8:	bne	36d54 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1a0>
   36cbc:	mov	r1, r5
   36cc0:	mov	r0, r4
   36cc4:	ldr	r3, [sp, #32]
   36cc8:	blx	r3
   36ccc:	ldrd	r4, [sp]
   36cd0:	ldrd	r6, [sp, #8]
   36cd4:	ldr	r8, [sp, #16]
   36cd8:	add	sp, sp, #20
   36cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   36ce0:	ldr	r3, [r4, #20]
   36ce4:	add	r2, r3, #1
   36ce8:	str	r2, [r4, #20]
   36cec:	mov	r2, #10
   36cf0:	strb	r2, [r3]
   36cf4:	ldrb	r3, [r4, #25]
   36cf8:	ldr	r7, [r4, #32]
   36cfc:	mul	r7, r7, r3
   36d00:	ldr	r0, [r4, #20]
   36d04:	add	r3, r0, r7
   36d08:	ldr	r2, [r4, #16]
   36d0c:	cmp	r2, r3
   36d10:	bcs	36d24 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x170>
   36d14:	mov	r1, r7
   36d18:	mov	r0, r4
   36d1c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   36d20:	b	36c18 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x64>
   36d24:	mov	r2, r7
   36d28:	mov	r1, #32
   36d2c:	bl	1459c <memset@plt>
   36d30:	ldr	r3, [r4, #20]
   36d34:	add	r7, r3, r7
   36d38:	str	r7, [r4, #20]
   36d3c:	b	36c18 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x64>
   36d40:	mov	r2, r6
   36d44:	ldr	r1, [sp, #24]
   36d48:	mov	r0, r4
   36d4c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   36d50:	b	36c60 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xac>
   36d54:	mov	r0, r5
   36d58:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   36d5c:	ldr	r3, [r4, #20]
   36d60:	add	r0, r3, r0
   36d64:	str	r0, [r4, #20]
   36d68:	b	36ccc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x118>

00036d6c <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   36d6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36d70:	strd	r6, [sp, #8]
   36d74:	str	r8, [sp, #16]
   36d78:	str	lr, [sp, #20]
   36d7c:	mov	r4, r0
   36d80:	ldr	r5, [sp, #28]
   36d84:	ldrd	r6, [r2, r3]
   36d88:	cmp	r1, #0
   36d8c:	beq	36da4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x38>
   36d90:	ldr	r3, [r0, #20]
   36d94:	add	r2, r3, #1
   36d98:	str	r2, [r0, #20]
   36d9c:	mov	r2, #44	; 0x2c
   36da0:	strb	r2, [r3]
   36da4:	ldrb	r3, [r4, #25]
   36da8:	cmp	r3, #0
   36dac:	bne	36e9c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x130>
   36db0:	ldr	r2, [r4, #20]
   36db4:	ldr	r3, [r4, #16]
   36db8:	cmp	r2, r3
   36dbc:	bcc	36dd0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x64>
   36dc0:	ldr	r3, [r4, #44]	; 0x2c
   36dc4:	mov	r1, #0
   36dc8:	mov	r0, r4
   36dcc:	blx	r3
   36dd0:	ldr	r3, [r4, #20]
   36dd4:	mov	r2, #34	; 0x22
   36dd8:	strb	r2, [r3]
   36ddc:	ldrb	r3, [r4, #26]
   36de0:	ldr	r0, [r4, #20]
   36de4:	cmp	r3, #0
   36de8:	addeq	r0, r0, #1
   36dec:	str	r0, [r4, #20]
   36df0:	add	r3, r0, r5
   36df4:	ldr	r2, [r4, #16]
   36df8:	cmp	r2, r3
   36dfc:	bls	36efc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x190>
   36e00:	mov	r2, r5
   36e04:	ldr	r1, [sp, #24]
   36e08:	bl	14524 <memcpy@plt>
   36e0c:	ldr	r3, [r4, #20]
   36e10:	add	r5, r3, r5
   36e14:	str	r5, [r4, #20]
   36e18:	ldr	r3, [r4, #20]
   36e1c:	mov	r2, #34	; 0x22
   36e20:	strb	r2, [r3]
   36e24:	ldrb	r3, [r4, #26]
   36e28:	clz	r3, r3
   36e2c:	lsr	r3, r3, #5
   36e30:	ldr	r1, [r4, #20]
   36e34:	add	r2, r1, r3
   36e38:	add	r2, r2, #1
   36e3c:	str	r2, [r4, #20]
   36e40:	mov	r2, #58	; 0x3a
   36e44:	strb	r2, [r1, r3]
   36e48:	ldr	r3, [r4, #20]
   36e4c:	mov	r2, #32
   36e50:	strb	r2, [r3]
   36e54:	ldrb	r3, [r4, #25]
   36e58:	ldr	r2, [r4, #20]
   36e5c:	cmp	r3, #0
   36e60:	addne	r2, r2, #1
   36e64:	str	r2, [r4, #20]
   36e68:	ldrb	r3, [r4, #27]
   36e6c:	cmp	r3, #0
   36e70:	bne	36f10 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1a4>
   36e74:	mov	r2, r6
   36e78:	mov	r3, r7
   36e7c:	mov	r0, r4
   36e80:	ldr	r1, [sp, #32]
   36e84:	blx	r1
   36e88:	ldrd	r4, [sp]
   36e8c:	ldrd	r6, [sp, #8]
   36e90:	ldr	r8, [sp, #16]
   36e94:	add	sp, sp, #20
   36e98:	pop	{pc}		; (ldr pc, [sp], #4)
   36e9c:	ldr	r3, [r4, #20]
   36ea0:	add	r2, r3, #1
   36ea4:	str	r2, [r4, #20]
   36ea8:	mov	r2, #10
   36eac:	strb	r2, [r3]
   36eb0:	ldrb	r3, [r4, #25]
   36eb4:	ldr	r8, [r4, #32]
   36eb8:	mul	r8, r8, r3
   36ebc:	ldr	r0, [r4, #20]
   36ec0:	add	r3, r0, r8
   36ec4:	ldr	r2, [r4, #16]
   36ec8:	cmp	r2, r3
   36ecc:	bcs	36ee0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x174>
   36ed0:	mov	r1, r8
   36ed4:	mov	r0, r4
   36ed8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   36edc:	b	36dd0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x64>
   36ee0:	mov	r2, r8
   36ee4:	mov	r1, #32
   36ee8:	bl	1459c <memset@plt>
   36eec:	ldr	r3, [r4, #20]
   36ef0:	add	r8, r3, r8
   36ef4:	str	r8, [r4, #20]
   36ef8:	b	36dd0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x64>
   36efc:	mov	r2, r5
   36f00:	ldr	r1, [sp, #24]
   36f04:	mov	r0, r4
   36f08:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   36f0c:	b	36e18 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xac>
   36f10:	mov	r0, r6
   36f14:	mov	r1, r7
   36f18:	bl	30120 <flatcc_json_parser_struct_as_root@@Base+0x698>
   36f1c:	ldr	r3, [r4, #20]
   36f20:	add	r0, r3, r0
   36f24:	str	r0, [r4, #20]
   36f28:	b	36e88 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x11c>

00036f2c <flatcc_json_printer_int8_enum_struct_field@@Base>:
   36f2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   36f30:	strd	r6, [sp, #8]
   36f34:	str	r8, [sp, #16]
   36f38:	str	lr, [sp, #20]
   36f3c:	mov	r4, r0
   36f40:	ldr	r6, [sp, #28]
   36f44:	ldrsb	r5, [r2, r3]
   36f48:	cmp	r1, #0
   36f4c:	beq	36f64 <flatcc_json_printer_int8_enum_struct_field@@Base+0x38>
   36f50:	ldr	r3, [r0, #20]
   36f54:	add	r2, r3, #1
   36f58:	str	r2, [r0, #20]
   36f5c:	mov	r2, #44	; 0x2c
   36f60:	strb	r2, [r3]
   36f64:	ldrb	r3, [r4, #25]
   36f68:	cmp	r3, #0
   36f6c:	bne	37058 <flatcc_json_printer_int8_enum_struct_field@@Base+0x12c>
   36f70:	ldr	r2, [r4, #20]
   36f74:	ldr	r3, [r4, #16]
   36f78:	cmp	r2, r3
   36f7c:	bcc	36f90 <flatcc_json_printer_int8_enum_struct_field@@Base+0x64>
   36f80:	ldr	r3, [r4, #44]	; 0x2c
   36f84:	mov	r1, #0
   36f88:	mov	r0, r4
   36f8c:	blx	r3
   36f90:	ldr	r3, [r4, #20]
   36f94:	mov	r2, #34	; 0x22
   36f98:	strb	r2, [r3]
   36f9c:	ldrb	r3, [r4, #26]
   36fa0:	ldr	r0, [r4, #20]
   36fa4:	cmp	r3, #0
   36fa8:	addeq	r0, r0, #1
   36fac:	str	r0, [r4, #20]
   36fb0:	add	r3, r0, r6
   36fb4:	ldr	r2, [r4, #16]
   36fb8:	cmp	r2, r3
   36fbc:	bls	370b8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x18c>
   36fc0:	mov	r2, r6
   36fc4:	ldr	r1, [sp, #24]
   36fc8:	bl	14524 <memcpy@plt>
   36fcc:	ldr	r3, [r4, #20]
   36fd0:	add	r6, r3, r6
   36fd4:	str	r6, [r4, #20]
   36fd8:	ldr	r3, [r4, #20]
   36fdc:	mov	r2, #34	; 0x22
   36fe0:	strb	r2, [r3]
   36fe4:	ldrb	r3, [r4, #26]
   36fe8:	clz	r3, r3
   36fec:	lsr	r3, r3, #5
   36ff0:	ldr	r1, [r4, #20]
   36ff4:	add	r2, r1, r3
   36ff8:	add	r2, r2, #1
   36ffc:	str	r2, [r4, #20]
   37000:	mov	r2, #58	; 0x3a
   37004:	strb	r2, [r1, r3]
   37008:	ldr	r3, [r4, #20]
   3700c:	mov	r2, #32
   37010:	strb	r2, [r3]
   37014:	ldrb	r3, [r4, #25]
   37018:	ldr	r1, [r4, #20]
   3701c:	cmp	r3, #0
   37020:	addne	r1, r1, #1
   37024:	str	r1, [r4, #20]
   37028:	ldrb	r3, [r4, #27]
   3702c:	cmp	r3, #0
   37030:	bne	370cc <flatcc_json_printer_int8_enum_struct_field@@Base+0x1a0>
   37034:	mov	r1, r5
   37038:	mov	r0, r4
   3703c:	ldr	r3, [sp, #32]
   37040:	blx	r3
   37044:	ldrd	r4, [sp]
   37048:	ldrd	r6, [sp, #8]
   3704c:	ldr	r8, [sp, #16]
   37050:	add	sp, sp, #20
   37054:	pop	{pc}		; (ldr pc, [sp], #4)
   37058:	ldr	r3, [r4, #20]
   3705c:	add	r2, r3, #1
   37060:	str	r2, [r4, #20]
   37064:	mov	r2, #10
   37068:	strb	r2, [r3]
   3706c:	ldrb	r3, [r4, #25]
   37070:	ldr	r7, [r4, #32]
   37074:	mul	r7, r7, r3
   37078:	ldr	r0, [r4, #20]
   3707c:	add	r3, r0, r7
   37080:	ldr	r2, [r4, #16]
   37084:	cmp	r2, r3
   37088:	bcs	3709c <flatcc_json_printer_int8_enum_struct_field@@Base+0x170>
   3708c:	mov	r1, r7
   37090:	mov	r0, r4
   37094:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37098:	b	36f90 <flatcc_json_printer_int8_enum_struct_field@@Base+0x64>
   3709c:	mov	r2, r7
   370a0:	mov	r1, #32
   370a4:	bl	1459c <memset@plt>
   370a8:	ldr	r3, [r4, #20]
   370ac:	add	r7, r3, r7
   370b0:	str	r7, [r4, #20]
   370b4:	b	36f90 <flatcc_json_printer_int8_enum_struct_field@@Base+0x64>
   370b8:	mov	r2, r6
   370bc:	ldr	r1, [sp, #24]
   370c0:	mov	r0, r4
   370c4:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   370c8:	b	36fd8 <flatcc_json_printer_int8_enum_struct_field@@Base+0xac>
   370cc:	mov	r0, r5
   370d0:	bl	307fc <flatcc_json_parser_struct_as_root@@Base+0xd74>
   370d4:	ldr	r3, [r4, #20]
   370d8:	add	r0, r3, r0
   370dc:	str	r0, [r4, #20]
   370e0:	b	37044 <flatcc_json_printer_int8_enum_struct_field@@Base+0x118>

000370e4 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   370e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   370e8:	strd	r6, [sp, #8]
   370ec:	str	r8, [sp, #16]
   370f0:	str	lr, [sp, #20]
   370f4:	mov	r4, r0
   370f8:	ldr	r6, [sp, #28]
   370fc:	ldrsh	r5, [r2, r3]
   37100:	cmp	r1, #0
   37104:	beq	3711c <flatcc_json_printer_int16_enum_struct_field@@Base+0x38>
   37108:	ldr	r3, [r0, #20]
   3710c:	add	r2, r3, #1
   37110:	str	r2, [r0, #20]
   37114:	mov	r2, #44	; 0x2c
   37118:	strb	r2, [r3]
   3711c:	ldrb	r3, [r4, #25]
   37120:	cmp	r3, #0
   37124:	bne	37210 <flatcc_json_printer_int16_enum_struct_field@@Base+0x12c>
   37128:	ldr	r2, [r4, #20]
   3712c:	ldr	r3, [r4, #16]
   37130:	cmp	r2, r3
   37134:	bcc	37148 <flatcc_json_printer_int16_enum_struct_field@@Base+0x64>
   37138:	ldr	r3, [r4, #44]	; 0x2c
   3713c:	mov	r1, #0
   37140:	mov	r0, r4
   37144:	blx	r3
   37148:	ldr	r3, [r4, #20]
   3714c:	mov	r2, #34	; 0x22
   37150:	strb	r2, [r3]
   37154:	ldrb	r3, [r4, #26]
   37158:	ldr	r0, [r4, #20]
   3715c:	cmp	r3, #0
   37160:	addeq	r0, r0, #1
   37164:	str	r0, [r4, #20]
   37168:	add	r3, r0, r6
   3716c:	ldr	r2, [r4, #16]
   37170:	cmp	r2, r3
   37174:	bls	37270 <flatcc_json_printer_int16_enum_struct_field@@Base+0x18c>
   37178:	mov	r2, r6
   3717c:	ldr	r1, [sp, #24]
   37180:	bl	14524 <memcpy@plt>
   37184:	ldr	r3, [r4, #20]
   37188:	add	r6, r3, r6
   3718c:	str	r6, [r4, #20]
   37190:	ldr	r3, [r4, #20]
   37194:	mov	r2, #34	; 0x22
   37198:	strb	r2, [r3]
   3719c:	ldrb	r3, [r4, #26]
   371a0:	clz	r3, r3
   371a4:	lsr	r3, r3, #5
   371a8:	ldr	r1, [r4, #20]
   371ac:	add	r2, r1, r3
   371b0:	add	r2, r2, #1
   371b4:	str	r2, [r4, #20]
   371b8:	mov	r2, #58	; 0x3a
   371bc:	strb	r2, [r1, r3]
   371c0:	ldr	r3, [r4, #20]
   371c4:	mov	r2, #32
   371c8:	strb	r2, [r3]
   371cc:	ldrb	r3, [r4, #25]
   371d0:	ldr	r1, [r4, #20]
   371d4:	cmp	r3, #0
   371d8:	addne	r1, r1, #1
   371dc:	str	r1, [r4, #20]
   371e0:	ldrb	r3, [r4, #27]
   371e4:	cmp	r3, #0
   371e8:	bne	37284 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1a0>
   371ec:	mov	r1, r5
   371f0:	mov	r0, r4
   371f4:	ldr	r3, [sp, #32]
   371f8:	blx	r3
   371fc:	ldrd	r4, [sp]
   37200:	ldrd	r6, [sp, #8]
   37204:	ldr	r8, [sp, #16]
   37208:	add	sp, sp, #20
   3720c:	pop	{pc}		; (ldr pc, [sp], #4)
   37210:	ldr	r3, [r4, #20]
   37214:	add	r2, r3, #1
   37218:	str	r2, [r4, #20]
   3721c:	mov	r2, #10
   37220:	strb	r2, [r3]
   37224:	ldrb	r3, [r4, #25]
   37228:	ldr	r7, [r4, #32]
   3722c:	mul	r7, r7, r3
   37230:	ldr	r0, [r4, #20]
   37234:	add	r3, r0, r7
   37238:	ldr	r2, [r4, #16]
   3723c:	cmp	r2, r3
   37240:	bcs	37254 <flatcc_json_printer_int16_enum_struct_field@@Base+0x170>
   37244:	mov	r1, r7
   37248:	mov	r0, r4
   3724c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37250:	b	37148 <flatcc_json_printer_int16_enum_struct_field@@Base+0x64>
   37254:	mov	r2, r7
   37258:	mov	r1, #32
   3725c:	bl	1459c <memset@plt>
   37260:	ldr	r3, [r4, #20]
   37264:	add	r7, r3, r7
   37268:	str	r7, [r4, #20]
   3726c:	b	37148 <flatcc_json_printer_int16_enum_struct_field@@Base+0x64>
   37270:	mov	r2, r6
   37274:	ldr	r1, [sp, #24]
   37278:	mov	r0, r4
   3727c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   37280:	b	37190 <flatcc_json_printer_int16_enum_struct_field@@Base+0xac>
   37284:	mov	r0, r5
   37288:	bl	3083c <flatcc_json_parser_struct_as_root@@Base+0xdb4>
   3728c:	ldr	r3, [r4, #20]
   37290:	add	r0, r3, r0
   37294:	str	r0, [r4, #20]
   37298:	b	371fc <flatcc_json_printer_int16_enum_struct_field@@Base+0x118>

0003729c <flatcc_json_printer_int32_enum_struct_field@@Base>:
   3729c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   372a0:	strd	r6, [sp, #8]
   372a4:	str	r8, [sp, #16]
   372a8:	str	lr, [sp, #20]
   372ac:	mov	r4, r0
   372b0:	ldr	r6, [sp, #28]
   372b4:	ldr	r5, [r2, r3]
   372b8:	cmp	r1, #0
   372bc:	beq	372d4 <flatcc_json_printer_int32_enum_struct_field@@Base+0x38>
   372c0:	ldr	r3, [r0, #20]
   372c4:	add	r2, r3, #1
   372c8:	str	r2, [r0, #20]
   372cc:	mov	r2, #44	; 0x2c
   372d0:	strb	r2, [r3]
   372d4:	ldrb	r3, [r4, #25]
   372d8:	cmp	r3, #0
   372dc:	bne	373c8 <flatcc_json_printer_int32_enum_struct_field@@Base+0x12c>
   372e0:	ldr	r2, [r4, #20]
   372e4:	ldr	r3, [r4, #16]
   372e8:	cmp	r2, r3
   372ec:	bcc	37300 <flatcc_json_printer_int32_enum_struct_field@@Base+0x64>
   372f0:	ldr	r3, [r4, #44]	; 0x2c
   372f4:	mov	r1, #0
   372f8:	mov	r0, r4
   372fc:	blx	r3
   37300:	ldr	r3, [r4, #20]
   37304:	mov	r2, #34	; 0x22
   37308:	strb	r2, [r3]
   3730c:	ldrb	r3, [r4, #26]
   37310:	ldr	r0, [r4, #20]
   37314:	cmp	r3, #0
   37318:	addeq	r0, r0, #1
   3731c:	str	r0, [r4, #20]
   37320:	add	r3, r0, r6
   37324:	ldr	r2, [r4, #16]
   37328:	cmp	r2, r3
   3732c:	bls	37428 <flatcc_json_printer_int32_enum_struct_field@@Base+0x18c>
   37330:	mov	r2, r6
   37334:	ldr	r1, [sp, #24]
   37338:	bl	14524 <memcpy@plt>
   3733c:	ldr	r3, [r4, #20]
   37340:	add	r6, r3, r6
   37344:	str	r6, [r4, #20]
   37348:	ldr	r3, [r4, #20]
   3734c:	mov	r2, #34	; 0x22
   37350:	strb	r2, [r3]
   37354:	ldrb	r3, [r4, #26]
   37358:	clz	r3, r3
   3735c:	lsr	r3, r3, #5
   37360:	ldr	r1, [r4, #20]
   37364:	add	r2, r1, r3
   37368:	add	r2, r2, #1
   3736c:	str	r2, [r4, #20]
   37370:	mov	r2, #58	; 0x3a
   37374:	strb	r2, [r1, r3]
   37378:	ldr	r3, [r4, #20]
   3737c:	mov	r2, #32
   37380:	strb	r2, [r3]
   37384:	ldrb	r3, [r4, #25]
   37388:	ldr	r1, [r4, #20]
   3738c:	cmp	r3, #0
   37390:	addne	r1, r1, #1
   37394:	str	r1, [r4, #20]
   37398:	ldrb	r3, [r4, #27]
   3739c:	cmp	r3, #0
   373a0:	bne	3743c <flatcc_json_printer_int32_enum_struct_field@@Base+0x1a0>
   373a4:	mov	r1, r5
   373a8:	mov	r0, r4
   373ac:	ldr	r3, [sp, #32]
   373b0:	blx	r3
   373b4:	ldrd	r4, [sp]
   373b8:	ldrd	r6, [sp, #8]
   373bc:	ldr	r8, [sp, #16]
   373c0:	add	sp, sp, #20
   373c4:	pop	{pc}		; (ldr pc, [sp], #4)
   373c8:	ldr	r3, [r4, #20]
   373cc:	add	r2, r3, #1
   373d0:	str	r2, [r4, #20]
   373d4:	mov	r2, #10
   373d8:	strb	r2, [r3]
   373dc:	ldrb	r3, [r4, #25]
   373e0:	ldr	r7, [r4, #32]
   373e4:	mul	r7, r7, r3
   373e8:	ldr	r0, [r4, #20]
   373ec:	add	r3, r0, r7
   373f0:	ldr	r2, [r4, #16]
   373f4:	cmp	r2, r3
   373f8:	bcs	3740c <flatcc_json_printer_int32_enum_struct_field@@Base+0x170>
   373fc:	mov	r1, r7
   37400:	mov	r0, r4
   37404:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37408:	b	37300 <flatcc_json_printer_int32_enum_struct_field@@Base+0x64>
   3740c:	mov	r2, r7
   37410:	mov	r1, #32
   37414:	bl	1459c <memset@plt>
   37418:	ldr	r3, [r4, #20]
   3741c:	add	r7, r3, r7
   37420:	str	r7, [r4, #20]
   37424:	b	37300 <flatcc_json_printer_int32_enum_struct_field@@Base+0x64>
   37428:	mov	r2, r6
   3742c:	ldr	r1, [sp, #24]
   37430:	mov	r0, r4
   37434:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   37438:	b	37348 <flatcc_json_printer_int32_enum_struct_field@@Base+0xac>
   3743c:	mov	r0, r5
   37440:	bl	3087c <flatcc_json_parser_struct_as_root@@Base+0xdf4>
   37444:	ldr	r3, [r4, #20]
   37448:	add	r0, r3, r0
   3744c:	str	r0, [r4, #20]
   37450:	b	373b4 <flatcc_json_printer_int32_enum_struct_field@@Base+0x118>

00037454 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   37454:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37458:	strd	r6, [sp, #8]
   3745c:	str	r8, [sp, #16]
   37460:	str	lr, [sp, #20]
   37464:	mov	r4, r0
   37468:	ldr	r5, [sp, #28]
   3746c:	ldrd	r6, [r2, r3]
   37470:	cmp	r1, #0
   37474:	beq	3748c <flatcc_json_printer_int64_enum_struct_field@@Base+0x38>
   37478:	ldr	r3, [r0, #20]
   3747c:	add	r2, r3, #1
   37480:	str	r2, [r0, #20]
   37484:	mov	r2, #44	; 0x2c
   37488:	strb	r2, [r3]
   3748c:	ldrb	r3, [r4, #25]
   37490:	cmp	r3, #0
   37494:	bne	37584 <flatcc_json_printer_int64_enum_struct_field@@Base+0x130>
   37498:	ldr	r2, [r4, #20]
   3749c:	ldr	r3, [r4, #16]
   374a0:	cmp	r2, r3
   374a4:	bcc	374b8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x64>
   374a8:	ldr	r3, [r4, #44]	; 0x2c
   374ac:	mov	r1, #0
   374b0:	mov	r0, r4
   374b4:	blx	r3
   374b8:	ldr	r3, [r4, #20]
   374bc:	mov	r2, #34	; 0x22
   374c0:	strb	r2, [r3]
   374c4:	ldrb	r3, [r4, #26]
   374c8:	ldr	r0, [r4, #20]
   374cc:	cmp	r3, #0
   374d0:	addeq	r0, r0, #1
   374d4:	str	r0, [r4, #20]
   374d8:	add	r3, r0, r5
   374dc:	ldr	r2, [r4, #16]
   374e0:	cmp	r2, r3
   374e4:	bls	375e4 <flatcc_json_printer_int64_enum_struct_field@@Base+0x190>
   374e8:	mov	r2, r5
   374ec:	ldr	r1, [sp, #24]
   374f0:	bl	14524 <memcpy@plt>
   374f4:	ldr	r3, [r4, #20]
   374f8:	add	r5, r3, r5
   374fc:	str	r5, [r4, #20]
   37500:	ldr	r3, [r4, #20]
   37504:	mov	r2, #34	; 0x22
   37508:	strb	r2, [r3]
   3750c:	ldrb	r3, [r4, #26]
   37510:	clz	r3, r3
   37514:	lsr	r3, r3, #5
   37518:	ldr	r1, [r4, #20]
   3751c:	add	r2, r1, r3
   37520:	add	r2, r2, #1
   37524:	str	r2, [r4, #20]
   37528:	mov	r2, #58	; 0x3a
   3752c:	strb	r2, [r1, r3]
   37530:	ldr	r3, [r4, #20]
   37534:	mov	r2, #32
   37538:	strb	r2, [r3]
   3753c:	ldrb	r3, [r4, #25]
   37540:	ldr	r2, [r4, #20]
   37544:	cmp	r3, #0
   37548:	addne	r2, r2, #1
   3754c:	str	r2, [r4, #20]
   37550:	ldrb	r3, [r4, #27]
   37554:	cmp	r3, #0
   37558:	bne	375f8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1a4>
   3755c:	mov	r2, r6
   37560:	mov	r3, r7
   37564:	mov	r0, r4
   37568:	ldr	r1, [sp, #32]
   3756c:	blx	r1
   37570:	ldrd	r4, [sp]
   37574:	ldrd	r6, [sp, #8]
   37578:	ldr	r8, [sp, #16]
   3757c:	add	sp, sp, #20
   37580:	pop	{pc}		; (ldr pc, [sp], #4)
   37584:	ldr	r3, [r4, #20]
   37588:	add	r2, r3, #1
   3758c:	str	r2, [r4, #20]
   37590:	mov	r2, #10
   37594:	strb	r2, [r3]
   37598:	ldrb	r3, [r4, #25]
   3759c:	ldr	r8, [r4, #32]
   375a0:	mul	r8, r8, r3
   375a4:	ldr	r0, [r4, #20]
   375a8:	add	r3, r0, r8
   375ac:	ldr	r2, [r4, #16]
   375b0:	cmp	r2, r3
   375b4:	bcs	375c8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x174>
   375b8:	mov	r1, r8
   375bc:	mov	r0, r4
   375c0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   375c4:	b	374b8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x64>
   375c8:	mov	r2, r8
   375cc:	mov	r1, #32
   375d0:	bl	1459c <memset@plt>
   375d4:	ldr	r3, [r4, #20]
   375d8:	add	r8, r3, r8
   375dc:	str	r8, [r4, #20]
   375e0:	b	374b8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x64>
   375e4:	mov	r2, r5
   375e8:	ldr	r1, [sp, #24]
   375ec:	mov	r0, r4
   375f0:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   375f4:	b	37500 <flatcc_json_printer_int64_enum_struct_field@@Base+0xac>
   375f8:	mov	r0, r6
   375fc:	mov	r1, r7
   37600:	bl	308b4 <flatcc_json_parser_struct_as_root@@Base+0xe2c>
   37604:	ldr	r3, [r4, #20]
   37608:	add	r0, r3, r0
   3760c:	str	r0, [r4, #20]
   37610:	b	37570 <flatcc_json_printer_int64_enum_struct_field@@Base+0x11c>

00037614 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   37614:	strd	r4, [sp, #-24]!	; 0xffffffe8
   37618:	strd	r6, [sp, #8]
   3761c:	str	r8, [sp, #16]
   37620:	str	lr, [sp, #20]
   37624:	mov	r4, r0
   37628:	ldr	r6, [sp, #28]
   3762c:	ldrb	r5, [r2, r3]
   37630:	cmp	r1, #0
   37634:	beq	3764c <flatcc_json_printer_bool_enum_struct_field@@Base+0x38>
   37638:	ldr	r3, [r0, #20]
   3763c:	add	r2, r3, #1
   37640:	str	r2, [r0, #20]
   37644:	mov	r2, #44	; 0x2c
   37648:	strb	r2, [r3]
   3764c:	ldrb	r3, [r4, #25]
   37650:	cmp	r3, #0
   37654:	bne	37740 <flatcc_json_printer_bool_enum_struct_field@@Base+0x12c>
   37658:	ldr	r2, [r4, #20]
   3765c:	ldr	r3, [r4, #16]
   37660:	cmp	r2, r3
   37664:	bcc	37678 <flatcc_json_printer_bool_enum_struct_field@@Base+0x64>
   37668:	ldr	r3, [r4, #44]	; 0x2c
   3766c:	mov	r1, #0
   37670:	mov	r0, r4
   37674:	blx	r3
   37678:	ldr	r3, [r4, #20]
   3767c:	mov	r2, #34	; 0x22
   37680:	strb	r2, [r3]
   37684:	ldrb	r3, [r4, #26]
   37688:	ldr	r0, [r4, #20]
   3768c:	cmp	r3, #0
   37690:	addeq	r0, r0, #1
   37694:	str	r0, [r4, #20]
   37698:	add	r3, r0, r6
   3769c:	ldr	r2, [r4, #16]
   376a0:	cmp	r2, r3
   376a4:	bls	377a0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x18c>
   376a8:	mov	r2, r6
   376ac:	ldr	r1, [sp, #24]
   376b0:	bl	14524 <memcpy@plt>
   376b4:	ldr	r3, [r4, #20]
   376b8:	add	r6, r3, r6
   376bc:	str	r6, [r4, #20]
   376c0:	ldr	r3, [r4, #20]
   376c4:	mov	r2, #34	; 0x22
   376c8:	strb	r2, [r3]
   376cc:	ldrb	r3, [r4, #26]
   376d0:	clz	r3, r3
   376d4:	lsr	r3, r3, #5
   376d8:	ldr	r1, [r4, #20]
   376dc:	add	r2, r1, r3
   376e0:	add	r2, r2, #1
   376e4:	str	r2, [r4, #20]
   376e8:	mov	r2, #58	; 0x3a
   376ec:	strb	r2, [r1, r3]
   376f0:	ldr	r3, [r4, #20]
   376f4:	mov	r2, #32
   376f8:	strb	r2, [r3]
   376fc:	ldrb	r3, [r4, #25]
   37700:	ldr	r1, [r4, #20]
   37704:	cmp	r3, #0
   37708:	addne	r1, r1, #1
   3770c:	str	r1, [r4, #20]
   37710:	ldrb	r3, [r4, #27]
   37714:	cmp	r3, #0
   37718:	bne	377b4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1a0>
   3771c:	mov	r1, r5
   37720:	mov	r0, r4
   37724:	ldr	r3, [sp, #32]
   37728:	blx	r3
   3772c:	ldrd	r4, [sp]
   37730:	ldrd	r6, [sp, #8]
   37734:	ldr	r8, [sp, #16]
   37738:	add	sp, sp, #20
   3773c:	pop	{pc}		; (ldr pc, [sp], #4)
   37740:	ldr	r3, [r4, #20]
   37744:	add	r2, r3, #1
   37748:	str	r2, [r4, #20]
   3774c:	mov	r2, #10
   37750:	strb	r2, [r3]
   37754:	ldrb	r3, [r4, #25]
   37758:	ldr	r7, [r4, #32]
   3775c:	mul	r7, r7, r3
   37760:	ldr	r0, [r4, #20]
   37764:	add	r3, r0, r7
   37768:	ldr	r2, [r4, #16]
   3776c:	cmp	r2, r3
   37770:	bcs	37784 <flatcc_json_printer_bool_enum_struct_field@@Base+0x170>
   37774:	mov	r1, r7
   37778:	mov	r0, r4
   3777c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37780:	b	37678 <flatcc_json_printer_bool_enum_struct_field@@Base+0x64>
   37784:	mov	r2, r7
   37788:	mov	r1, #32
   3778c:	bl	1459c <memset@plt>
   37790:	ldr	r3, [r4, #20]
   37794:	add	r7, r3, r7
   37798:	str	r7, [r4, #20]
   3779c:	b	37678 <flatcc_json_printer_bool_enum_struct_field@@Base+0x64>
   377a0:	mov	r2, r6
   377a4:	ldr	r1, [sp, #24]
   377a8:	mov	r0, r4
   377ac:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   377b0:	b	376c0 <flatcc_json_printer_bool_enum_struct_field@@Base+0xac>
   377b4:	mov	r0, r5
   377b8:	bl	310a8 <flatcc_json_parser_struct_as_root@@Base+0x1620>
   377bc:	ldr	r3, [r4, #20]
   377c0:	add	r0, r3, r0
   377c4:	str	r0, [r4, #20]
   377c8:	b	3772c <flatcc_json_printer_bool_enum_struct_field@@Base+0x118>

000377cc <flatcc_json_printer_utype_vector_field@@Base>:
   377cc:	add	r2, r2, #2
   377d0:	lsl	r2, r2, #1
   377d4:	ldr	ip, [r1, #8]
   377d8:	cmp	ip, r2
   377dc:	bxle	lr
   377e0:	ldr	ip, [r1, #4]
   377e4:	ldrh	r2, [ip, r2]
   377e8:	cmp	r2, #0
   377ec:	bxeq	lr
   377f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   377f4:	strd	r6, [sp, #8]
   377f8:	strd	r8, [sp, #16]
   377fc:	str	sl, [sp, #24]
   37800:	str	lr, [sp, #28]
   37804:	ldr	ip, [r1]
   37808:	adds	lr, ip, r2
   3780c:	beq	379dc <flatcc_json_printer_utype_vector_field@@Base+0x210>
   37810:	ldr	r4, [r1, #16]
   37814:	add	r5, r4, #1
   37818:	str	r5, [r1, #16]
   3781c:	cmp	r4, #0
   37820:	beq	37838 <flatcc_json_printer_utype_vector_field@@Base+0x6c>
   37824:	ldr	r1, [r0, #20]
   37828:	add	r4, r1, #1
   3782c:	str	r4, [r0, #20]
   37830:	mov	r4, #44	; 0x2c
   37834:	strb	r4, [r1]
   37838:	mov	r1, r3
   3783c:	mov	r4, r0
   37840:	ldr	r3, [ip, r2]
   37844:	add	r6, lr, r3
   37848:	ldr	r7, [lr, r3]
   3784c:	ldr	r2, [sp, #32]
   37850:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   37854:	ldr	r3, [r4, #32]
   37858:	add	r3, r3, #1
   3785c:	str	r3, [r4, #32]
   37860:	ldr	r3, [r4, #20]
   37864:	add	r2, r3, #1
   37868:	str	r2, [r4, #20]
   3786c:	mov	r2, #91	; 0x5b
   37870:	strb	r2, [r3]
   37874:	cmp	r7, #0
   37878:	beq	379bc <flatcc_json_printer_utype_vector_field@@Base+0x1f0>
   3787c:	ldrb	r3, [r4, #25]
   37880:	cmp	r3, #0
   37884:	bne	378e4 <flatcc_json_printer_utype_vector_field@@Base+0x118>
   37888:	ldr	r2, [r4, #20]
   3788c:	ldr	r3, [r4, #16]
   37890:	cmp	r2, r3
   37894:	bcc	378a8 <flatcc_json_printer_utype_vector_field@@Base+0xdc>
   37898:	ldr	r3, [r4, #44]	; 0x2c
   3789c:	mov	r1, #0
   378a0:	mov	r0, r4
   378a4:	blx	r3
   378a8:	ldr	r1, [r4, #20]
   378ac:	ldrb	r0, [r6, #4]
   378b0:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   378b4:	ldr	r3, [r4, #20]
   378b8:	add	r0, r3, r0
   378bc:	str	r0, [r4, #20]
   378c0:	add	r5, r6, #5
   378c4:	cmp	r7, #1
   378c8:	beq	379bc <flatcc_json_printer_utype_vector_field@@Base+0x1f0>
   378cc:	add	r7, r7, #4
   378d0:	add	r6, r6, r7
   378d4:	mov	r7, #44	; 0x2c
   378d8:	mov	r8, #0
   378dc:	mov	r9, #10
   378e0:	b	37960 <flatcc_json_printer_utype_vector_field@@Base+0x194>
   378e4:	ldr	r3, [r4, #20]
   378e8:	add	r2, r3, #1
   378ec:	str	r2, [r4, #20]
   378f0:	mov	r2, #10
   378f4:	strb	r2, [r3]
   378f8:	mov	r0, r4
   378fc:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   37900:	b	378a8 <flatcc_json_printer_utype_vector_field@@Base+0xdc>
   37904:	ldr	r3, [r4, #20]
   37908:	add	r2, r3, #1
   3790c:	str	r2, [r4, #20]
   37910:	strb	r9, [r3]
   37914:	ldrb	r3, [r4, #25]
   37918:	ldr	sl, [r4, #32]
   3791c:	mul	sl, sl, r3
   37920:	ldr	r0, [r4, #20]
   37924:	add	r3, r0, sl
   37928:	ldr	r2, [r4, #16]
   3792c:	cmp	r2, r3
   37930:	bcs	379a0 <flatcc_json_printer_utype_vector_field@@Base+0x1d4>
   37934:	mov	r1, sl
   37938:	mov	r0, r4
   3793c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37940:	ldr	r1, [r4, #20]
   37944:	ldrb	r0, [r5], #1
   37948:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3794c:	ldr	r3, [r4, #20]
   37950:	add	r0, r3, r0
   37954:	str	r0, [r4, #20]
   37958:	cmp	r6, r5
   3795c:	beq	379bc <flatcc_json_printer_utype_vector_field@@Base+0x1f0>
   37960:	ldr	r3, [r4, #20]
   37964:	add	r2, r3, #1
   37968:	str	r2, [r4, #20]
   3796c:	strb	r7, [r3]
   37970:	ldrb	r3, [r4, #25]
   37974:	cmp	r3, #0
   37978:	bne	37904 <flatcc_json_printer_utype_vector_field@@Base+0x138>
   3797c:	ldr	r2, [r4, #20]
   37980:	ldr	r3, [r4, #16]
   37984:	cmp	r2, r3
   37988:	bcc	37940 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   3798c:	ldr	r3, [r4, #44]	; 0x2c
   37990:	mov	r1, r8
   37994:	mov	r0, r4
   37998:	blx	r3
   3799c:	b	37940 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   379a0:	mov	r2, sl
   379a4:	mov	r1, #32
   379a8:	bl	1459c <memset@plt>
   379ac:	ldr	r3, [r4, #20]
   379b0:	add	sl, r3, sl
   379b4:	str	sl, [r4, #20]
   379b8:	b	37940 <flatcc_json_printer_utype_vector_field@@Base+0x174>
   379bc:	ldrb	r3, [r4, #25]
   379c0:	cmp	r3, #0
   379c4:	bne	379f4 <flatcc_json_printer_utype_vector_field@@Base+0x228>
   379c8:	ldr	r3, [r4, #20]
   379cc:	add	r2, r3, #1
   379d0:	str	r2, [r4, #20]
   379d4:	mov	r2, #93	; 0x5d
   379d8:	strb	r2, [r3]
   379dc:	ldrd	r4, [sp]
   379e0:	ldrd	r6, [sp, #8]
   379e4:	ldrd	r8, [sp, #16]
   379e8:	ldr	sl, [sp, #24]
   379ec:	add	sp, sp, #28
   379f0:	pop	{pc}		; (ldr pc, [sp], #4)
   379f4:	ldr	r3, [r4, #20]
   379f8:	add	r2, r3, #1
   379fc:	str	r2, [r4, #20]
   37a00:	mov	r2, #10
   37a04:	strb	r2, [r3]
   37a08:	ldr	r5, [r4, #32]
   37a0c:	sub	r5, r5, #1
   37a10:	str	r5, [r4, #32]
   37a14:	ldrb	r3, [r4, #25]
   37a18:	mul	r5, r5, r3
   37a1c:	ldr	r0, [r4, #20]
   37a20:	add	r3, r0, r5
   37a24:	ldr	r2, [r4, #16]
   37a28:	cmp	r2, r3
   37a2c:	bcs	37a40 <flatcc_json_printer_utype_vector_field@@Base+0x274>
   37a30:	mov	r1, r5
   37a34:	mov	r0, r4
   37a38:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37a3c:	b	379c8 <flatcc_json_printer_utype_vector_field@@Base+0x1fc>
   37a40:	mov	r2, r5
   37a44:	mov	r1, #32
   37a48:	bl	1459c <memset@plt>
   37a4c:	ldr	r3, [r4, #20]
   37a50:	add	r5, r3, r5
   37a54:	str	r5, [r4, #20]
   37a58:	b	379c8 <flatcc_json_printer_utype_vector_field@@Base+0x1fc>

00037a5c <flatcc_json_printer_uint8_vector_field@@Base>:
   37a5c:	add	r2, r2, #2
   37a60:	lsl	r2, r2, #1
   37a64:	ldr	ip, [r1, #8]
   37a68:	cmp	ip, r2
   37a6c:	bxle	lr
   37a70:	ldr	ip, [r1, #4]
   37a74:	ldrh	r2, [ip, r2]
   37a78:	cmp	r2, #0
   37a7c:	bxeq	lr
   37a80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37a84:	strd	r6, [sp, #8]
   37a88:	strd	r8, [sp, #16]
   37a8c:	str	sl, [sp, #24]
   37a90:	str	lr, [sp, #28]
   37a94:	ldr	ip, [r1]
   37a98:	adds	lr, ip, r2
   37a9c:	beq	37c6c <flatcc_json_printer_uint8_vector_field@@Base+0x210>
   37aa0:	ldr	r4, [r1, #16]
   37aa4:	add	r5, r4, #1
   37aa8:	str	r5, [r1, #16]
   37aac:	cmp	r4, #0
   37ab0:	beq	37ac8 <flatcc_json_printer_uint8_vector_field@@Base+0x6c>
   37ab4:	ldr	r1, [r0, #20]
   37ab8:	add	r4, r1, #1
   37abc:	str	r4, [r0, #20]
   37ac0:	mov	r4, #44	; 0x2c
   37ac4:	strb	r4, [r1]
   37ac8:	mov	r1, r3
   37acc:	mov	r4, r0
   37ad0:	ldr	r3, [ip, r2]
   37ad4:	add	r6, lr, r3
   37ad8:	ldr	r7, [lr, r3]
   37adc:	ldr	r2, [sp, #32]
   37ae0:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   37ae4:	ldr	r3, [r4, #32]
   37ae8:	add	r3, r3, #1
   37aec:	str	r3, [r4, #32]
   37af0:	ldr	r3, [r4, #20]
   37af4:	add	r2, r3, #1
   37af8:	str	r2, [r4, #20]
   37afc:	mov	r2, #91	; 0x5b
   37b00:	strb	r2, [r3]
   37b04:	cmp	r7, #0
   37b08:	beq	37c4c <flatcc_json_printer_uint8_vector_field@@Base+0x1f0>
   37b0c:	ldrb	r3, [r4, #25]
   37b10:	cmp	r3, #0
   37b14:	bne	37b74 <flatcc_json_printer_uint8_vector_field@@Base+0x118>
   37b18:	ldr	r2, [r4, #20]
   37b1c:	ldr	r3, [r4, #16]
   37b20:	cmp	r2, r3
   37b24:	bcc	37b38 <flatcc_json_printer_uint8_vector_field@@Base+0xdc>
   37b28:	ldr	r3, [r4, #44]	; 0x2c
   37b2c:	mov	r1, #0
   37b30:	mov	r0, r4
   37b34:	blx	r3
   37b38:	ldr	r1, [r4, #20]
   37b3c:	ldrb	r0, [r6, #4]
   37b40:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   37b44:	ldr	r3, [r4, #20]
   37b48:	add	r0, r3, r0
   37b4c:	str	r0, [r4, #20]
   37b50:	add	r5, r6, #5
   37b54:	cmp	r7, #1
   37b58:	beq	37c4c <flatcc_json_printer_uint8_vector_field@@Base+0x1f0>
   37b5c:	add	r7, r7, #4
   37b60:	add	r6, r6, r7
   37b64:	mov	r7, #44	; 0x2c
   37b68:	mov	r8, #0
   37b6c:	mov	r9, #10
   37b70:	b	37bf0 <flatcc_json_printer_uint8_vector_field@@Base+0x194>
   37b74:	ldr	r3, [r4, #20]
   37b78:	add	r2, r3, #1
   37b7c:	str	r2, [r4, #20]
   37b80:	mov	r2, #10
   37b84:	strb	r2, [r3]
   37b88:	mov	r0, r4
   37b8c:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   37b90:	b	37b38 <flatcc_json_printer_uint8_vector_field@@Base+0xdc>
   37b94:	ldr	r3, [r4, #20]
   37b98:	add	r2, r3, #1
   37b9c:	str	r2, [r4, #20]
   37ba0:	strb	r9, [r3]
   37ba4:	ldrb	r3, [r4, #25]
   37ba8:	ldr	sl, [r4, #32]
   37bac:	mul	sl, sl, r3
   37bb0:	ldr	r0, [r4, #20]
   37bb4:	add	r3, r0, sl
   37bb8:	ldr	r2, [r4, #16]
   37bbc:	cmp	r2, r3
   37bc0:	bcs	37c30 <flatcc_json_printer_uint8_vector_field@@Base+0x1d4>
   37bc4:	mov	r1, sl
   37bc8:	mov	r0, r4
   37bcc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37bd0:	ldr	r1, [r4, #20]
   37bd4:	ldrb	r0, [r5], #1
   37bd8:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   37bdc:	ldr	r3, [r4, #20]
   37be0:	add	r0, r3, r0
   37be4:	str	r0, [r4, #20]
   37be8:	cmp	r6, r5
   37bec:	beq	37c4c <flatcc_json_printer_uint8_vector_field@@Base+0x1f0>
   37bf0:	ldr	r3, [r4, #20]
   37bf4:	add	r2, r3, #1
   37bf8:	str	r2, [r4, #20]
   37bfc:	strb	r7, [r3]
   37c00:	ldrb	r3, [r4, #25]
   37c04:	cmp	r3, #0
   37c08:	bne	37b94 <flatcc_json_printer_uint8_vector_field@@Base+0x138>
   37c0c:	ldr	r2, [r4, #20]
   37c10:	ldr	r3, [r4, #16]
   37c14:	cmp	r2, r3
   37c18:	bcc	37bd0 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   37c1c:	ldr	r3, [r4, #44]	; 0x2c
   37c20:	mov	r1, r8
   37c24:	mov	r0, r4
   37c28:	blx	r3
   37c2c:	b	37bd0 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   37c30:	mov	r2, sl
   37c34:	mov	r1, #32
   37c38:	bl	1459c <memset@plt>
   37c3c:	ldr	r3, [r4, #20]
   37c40:	add	sl, r3, sl
   37c44:	str	sl, [r4, #20]
   37c48:	b	37bd0 <flatcc_json_printer_uint8_vector_field@@Base+0x174>
   37c4c:	ldrb	r3, [r4, #25]
   37c50:	cmp	r3, #0
   37c54:	bne	37c84 <flatcc_json_printer_uint8_vector_field@@Base+0x228>
   37c58:	ldr	r3, [r4, #20]
   37c5c:	add	r2, r3, #1
   37c60:	str	r2, [r4, #20]
   37c64:	mov	r2, #93	; 0x5d
   37c68:	strb	r2, [r3]
   37c6c:	ldrd	r4, [sp]
   37c70:	ldrd	r6, [sp, #8]
   37c74:	ldrd	r8, [sp, #16]
   37c78:	ldr	sl, [sp, #24]
   37c7c:	add	sp, sp, #28
   37c80:	pop	{pc}		; (ldr pc, [sp], #4)
   37c84:	ldr	r3, [r4, #20]
   37c88:	add	r2, r3, #1
   37c8c:	str	r2, [r4, #20]
   37c90:	mov	r2, #10
   37c94:	strb	r2, [r3]
   37c98:	ldr	r5, [r4, #32]
   37c9c:	sub	r5, r5, #1
   37ca0:	str	r5, [r4, #32]
   37ca4:	ldrb	r3, [r4, #25]
   37ca8:	mul	r5, r5, r3
   37cac:	ldr	r0, [r4, #20]
   37cb0:	add	r3, r0, r5
   37cb4:	ldr	r2, [r4, #16]
   37cb8:	cmp	r2, r3
   37cbc:	bcs	37cd0 <flatcc_json_printer_uint8_vector_field@@Base+0x274>
   37cc0:	mov	r1, r5
   37cc4:	mov	r0, r4
   37cc8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37ccc:	b	37c58 <flatcc_json_printer_uint8_vector_field@@Base+0x1fc>
   37cd0:	mov	r2, r5
   37cd4:	mov	r1, #32
   37cd8:	bl	1459c <memset@plt>
   37cdc:	ldr	r3, [r4, #20]
   37ce0:	add	r5, r3, r5
   37ce4:	str	r5, [r4, #20]
   37ce8:	b	37c58 <flatcc_json_printer_uint8_vector_field@@Base+0x1fc>

00037cec <flatcc_json_printer_uint16_vector_field@@Base>:
   37cec:	add	r2, r2, #2
   37cf0:	lsl	r2, r2, #1
   37cf4:	ldr	ip, [r1, #8]
   37cf8:	cmp	ip, r2
   37cfc:	bxle	lr
   37d00:	ldr	ip, [r1, #4]
   37d04:	ldrh	r2, [ip, r2]
   37d08:	cmp	r2, #0
   37d0c:	bxeq	lr
   37d10:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37d14:	strd	r6, [sp, #8]
   37d18:	strd	r8, [sp, #16]
   37d1c:	str	sl, [sp, #24]
   37d20:	str	lr, [sp, #28]
   37d24:	ldr	ip, [r1]
   37d28:	adds	lr, ip, r2
   37d2c:	beq	37f3c <flatcc_json_printer_uint16_vector_field@@Base+0x250>
   37d30:	ldr	r4, [r1, #16]
   37d34:	add	r5, r4, #1
   37d38:	str	r5, [r1, #16]
   37d3c:	cmp	r4, #0
   37d40:	beq	37d58 <flatcc_json_printer_uint16_vector_field@@Base+0x6c>
   37d44:	ldr	r1, [r0, #20]
   37d48:	add	r4, r1, #1
   37d4c:	str	r4, [r0, #20]
   37d50:	mov	r4, #44	; 0x2c
   37d54:	strb	r4, [r1]
   37d58:	mov	r1, r3
   37d5c:	mov	r4, r0
   37d60:	ldr	r3, [ip, r2]
   37d64:	add	r6, lr, r3
   37d68:	ldr	r7, [lr, r3]
   37d6c:	ldr	r2, [sp, #32]
   37d70:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   37d74:	ldr	r3, [r4, #32]
   37d78:	add	r3, r3, #1
   37d7c:	str	r3, [r4, #32]
   37d80:	ldr	r3, [r4, #20]
   37d84:	add	r2, r3, #1
   37d88:	str	r2, [r4, #20]
   37d8c:	mov	r2, #91	; 0x5b
   37d90:	strb	r2, [r3]
   37d94:	cmp	r7, #0
   37d98:	beq	37f1c <flatcc_json_printer_uint16_vector_field@@Base+0x230>
   37d9c:	ldrb	r3, [r4, #25]
   37da0:	cmp	r3, #0
   37da4:	bne	37e00 <flatcc_json_printer_uint16_vector_field@@Base+0x114>
   37da8:	ldr	r2, [r4, #20]
   37dac:	ldr	r3, [r4, #16]
   37db0:	cmp	r2, r3
   37db4:	bcc	37dc8 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   37db8:	ldr	r3, [r4, #44]	; 0x2c
   37dbc:	mov	r1, #0
   37dc0:	mov	r0, r4
   37dc4:	blx	r3
   37dc8:	ldr	r1, [r4, #20]
   37dcc:	ldrh	r0, [r6, #4]
   37dd0:	bl	2fc28 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   37dd4:	ldr	r3, [r4, #20]
   37dd8:	add	r0, r3, r0
   37ddc:	str	r0, [r4, #20]
   37de0:	add	r6, r6, #6
   37de4:	sub	r5, r7, #2
   37de8:	cmp	r7, #1
   37dec:	beq	37f1c <flatcc_json_printer_uint16_vector_field@@Base+0x230>
   37df0:	mov	r7, #44	; 0x2c
   37df4:	mov	r8, #0
   37df8:	mov	r9, #10
   37dfc:	b	37ec0 <flatcc_json_printer_uint16_vector_field@@Base+0x1d4>
   37e00:	ldr	r3, [r4, #20]
   37e04:	add	r2, r3, #1
   37e08:	str	r2, [r4, #20]
   37e0c:	mov	r2, #10
   37e10:	strb	r2, [r3]
   37e14:	ldrb	r3, [r4, #25]
   37e18:	ldr	r5, [r4, #32]
   37e1c:	mul	r5, r5, r3
   37e20:	ldr	r0, [r4, #20]
   37e24:	add	r3, r0, r5
   37e28:	ldr	r2, [r4, #16]
   37e2c:	cmp	r2, r3
   37e30:	bcs	37e44 <flatcc_json_printer_uint16_vector_field@@Base+0x158>
   37e34:	mov	r1, r5
   37e38:	mov	r0, r4
   37e3c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37e40:	b	37dc8 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   37e44:	mov	r2, r5
   37e48:	mov	r1, #32
   37e4c:	bl	1459c <memset@plt>
   37e50:	ldr	r3, [r4, #20]
   37e54:	add	r5, r3, r5
   37e58:	str	r5, [r4, #20]
   37e5c:	b	37dc8 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   37e60:	ldr	r3, [r4, #20]
   37e64:	add	r2, r3, #1
   37e68:	str	r2, [r4, #20]
   37e6c:	strb	r9, [r3]
   37e70:	ldrb	r3, [r4, #25]
   37e74:	ldr	sl, [r4, #32]
   37e78:	mul	sl, sl, r3
   37e7c:	ldr	r0, [r4, #20]
   37e80:	add	r3, r0, sl
   37e84:	ldr	r2, [r4, #16]
   37e88:	cmp	r2, r3
   37e8c:	bcs	37f00 <flatcc_json_printer_uint16_vector_field@@Base+0x214>
   37e90:	mov	r1, sl
   37e94:	mov	r0, r4
   37e98:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37e9c:	ldr	r1, [r4, #20]
   37ea0:	ldrh	r0, [r6], #2
   37ea4:	bl	2fc28 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   37ea8:	ldr	r3, [r4, #20]
   37eac:	add	r0, r3, r0
   37eb0:	str	r0, [r4, #20]
   37eb4:	sub	r5, r5, #1
   37eb8:	cmn	r5, #1
   37ebc:	beq	37f1c <flatcc_json_printer_uint16_vector_field@@Base+0x230>
   37ec0:	ldr	r3, [r4, #20]
   37ec4:	add	r2, r3, #1
   37ec8:	str	r2, [r4, #20]
   37ecc:	strb	r7, [r3]
   37ed0:	ldrb	r3, [r4, #25]
   37ed4:	cmp	r3, #0
   37ed8:	bne	37e60 <flatcc_json_printer_uint16_vector_field@@Base+0x174>
   37edc:	ldr	r2, [r4, #20]
   37ee0:	ldr	r3, [r4, #16]
   37ee4:	cmp	r2, r3
   37ee8:	bcc	37e9c <flatcc_json_printer_uint16_vector_field@@Base+0x1b0>
   37eec:	ldr	r3, [r4, #44]	; 0x2c
   37ef0:	mov	r1, r8
   37ef4:	mov	r0, r4
   37ef8:	blx	r3
   37efc:	b	37e9c <flatcc_json_printer_uint16_vector_field@@Base+0x1b0>
   37f00:	mov	r2, sl
   37f04:	mov	r1, #32
   37f08:	bl	1459c <memset@plt>
   37f0c:	ldr	r3, [r4, #20]
   37f10:	add	sl, r3, sl
   37f14:	str	sl, [r4, #20]
   37f18:	b	37e9c <flatcc_json_printer_uint16_vector_field@@Base+0x1b0>
   37f1c:	ldrb	r3, [r4, #25]
   37f20:	cmp	r3, #0
   37f24:	bne	37f54 <flatcc_json_printer_uint16_vector_field@@Base+0x268>
   37f28:	ldr	r3, [r4, #20]
   37f2c:	add	r2, r3, #1
   37f30:	str	r2, [r4, #20]
   37f34:	mov	r2, #93	; 0x5d
   37f38:	strb	r2, [r3]
   37f3c:	ldrd	r4, [sp]
   37f40:	ldrd	r6, [sp, #8]
   37f44:	ldrd	r8, [sp, #16]
   37f48:	ldr	sl, [sp, #24]
   37f4c:	add	sp, sp, #28
   37f50:	pop	{pc}		; (ldr pc, [sp], #4)
   37f54:	ldr	r3, [r4, #20]
   37f58:	add	r2, r3, #1
   37f5c:	str	r2, [r4, #20]
   37f60:	mov	r2, #10
   37f64:	strb	r2, [r3]
   37f68:	ldr	r5, [r4, #32]
   37f6c:	sub	r5, r5, #1
   37f70:	str	r5, [r4, #32]
   37f74:	ldrb	r3, [r4, #25]
   37f78:	mul	r5, r5, r3
   37f7c:	ldr	r0, [r4, #20]
   37f80:	add	r3, r0, r5
   37f84:	ldr	r2, [r4, #16]
   37f88:	cmp	r2, r3
   37f8c:	bcs	37fa0 <flatcc_json_printer_uint16_vector_field@@Base+0x2b4>
   37f90:	mov	r1, r5
   37f94:	mov	r0, r4
   37f98:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   37f9c:	b	37f28 <flatcc_json_printer_uint16_vector_field@@Base+0x23c>
   37fa0:	mov	r2, r5
   37fa4:	mov	r1, #32
   37fa8:	bl	1459c <memset@plt>
   37fac:	ldr	r3, [r4, #20]
   37fb0:	add	r5, r3, r5
   37fb4:	str	r5, [r4, #20]
   37fb8:	b	37f28 <flatcc_json_printer_uint16_vector_field@@Base+0x23c>

00037fbc <flatcc_json_printer_uint32_vector_field@@Base>:
   37fbc:	add	r2, r2, #2
   37fc0:	lsl	r2, r2, #1
   37fc4:	ldr	ip, [r1, #8]
   37fc8:	cmp	ip, r2
   37fcc:	bxle	lr
   37fd0:	ldr	ip, [r1, #4]
   37fd4:	ldrh	r2, [ip, r2]
   37fd8:	cmp	r2, #0
   37fdc:	bxeq	lr
   37fe0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   37fe4:	strd	r6, [sp, #8]
   37fe8:	strd	r8, [sp, #16]
   37fec:	str	sl, [sp, #24]
   37ff0:	str	lr, [sp, #28]
   37ff4:	ldr	ip, [r1]
   37ff8:	adds	lr, ip, r2
   37ffc:	beq	381cc <flatcc_json_printer_uint32_vector_field@@Base+0x210>
   38000:	ldr	r4, [r1, #16]
   38004:	add	r5, r4, #1
   38008:	str	r5, [r1, #16]
   3800c:	cmp	r4, #0
   38010:	beq	38028 <flatcc_json_printer_uint32_vector_field@@Base+0x6c>
   38014:	ldr	r1, [r0, #20]
   38018:	add	r4, r1, #1
   3801c:	str	r4, [r0, #20]
   38020:	mov	r4, #44	; 0x2c
   38024:	strb	r4, [r1]
   38028:	mov	r1, r3
   3802c:	mov	r4, r0
   38030:	ldr	r3, [ip, r2]
   38034:	add	r6, lr, r3
   38038:	ldr	r7, [lr, r3]
   3803c:	ldr	r2, [sp, #32]
   38040:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   38044:	ldr	r3, [r4, #32]
   38048:	add	r3, r3, #1
   3804c:	str	r3, [r4, #32]
   38050:	ldr	r3, [r4, #20]
   38054:	add	r2, r3, #1
   38058:	str	r2, [r4, #20]
   3805c:	mov	r2, #91	; 0x5b
   38060:	strb	r2, [r3]
   38064:	cmp	r7, #0
   38068:	beq	381ac <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   3806c:	ldrb	r3, [r4, #25]
   38070:	cmp	r3, #0
   38074:	bne	380d0 <flatcc_json_printer_uint32_vector_field@@Base+0x114>
   38078:	ldr	r2, [r4, #20]
   3807c:	ldr	r3, [r4, #16]
   38080:	cmp	r2, r3
   38084:	bcc	38098 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   38088:	ldr	r3, [r4, #44]	; 0x2c
   3808c:	mov	r1, #0
   38090:	mov	r0, r4
   38094:	blx	r3
   38098:	ldr	r1, [r4, #20]
   3809c:	ldr	r0, [r6, #4]
   380a0:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   380a4:	ldr	r3, [r4, #20]
   380a8:	add	r0, r3, r0
   380ac:	str	r0, [r4, #20]
   380b0:	add	r6, r6, #8
   380b4:	sub	r5, r7, #2
   380b8:	cmp	r7, #1
   380bc:	beq	381ac <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   380c0:	mov	r7, #44	; 0x2c
   380c4:	mov	r8, #0
   380c8:	mov	r9, #10
   380cc:	b	38150 <flatcc_json_printer_uint32_vector_field@@Base+0x194>
   380d0:	ldr	r3, [r4, #20]
   380d4:	add	r2, r3, #1
   380d8:	str	r2, [r4, #20]
   380dc:	mov	r2, #10
   380e0:	strb	r2, [r3]
   380e4:	mov	r0, r4
   380e8:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   380ec:	b	38098 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   380f0:	ldr	r3, [r4, #20]
   380f4:	add	r2, r3, #1
   380f8:	str	r2, [r4, #20]
   380fc:	strb	r9, [r3]
   38100:	ldrb	r3, [r4, #25]
   38104:	ldr	sl, [r4, #32]
   38108:	mul	sl, sl, r3
   3810c:	ldr	r0, [r4, #20]
   38110:	add	r3, r0, sl
   38114:	ldr	r2, [r4, #16]
   38118:	cmp	r2, r3
   3811c:	bcs	38190 <flatcc_json_printer_uint32_vector_field@@Base+0x1d4>
   38120:	mov	r1, sl
   38124:	mov	r0, r4
   38128:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3812c:	ldr	r1, [r4, #20]
   38130:	ldr	r0, [r6], #4
   38134:	bl	2fdbc <flatcc_json_parser_struct_as_root@@Base+0x334>
   38138:	ldr	r3, [r4, #20]
   3813c:	add	r0, r3, r0
   38140:	str	r0, [r4, #20]
   38144:	sub	r5, r5, #1
   38148:	cmn	r5, #1
   3814c:	beq	381ac <flatcc_json_printer_uint32_vector_field@@Base+0x1f0>
   38150:	ldr	r3, [r4, #20]
   38154:	add	r2, r3, #1
   38158:	str	r2, [r4, #20]
   3815c:	strb	r7, [r3]
   38160:	ldrb	r3, [r4, #25]
   38164:	cmp	r3, #0
   38168:	bne	380f0 <flatcc_json_printer_uint32_vector_field@@Base+0x134>
   3816c:	ldr	r2, [r4, #20]
   38170:	ldr	r3, [r4, #16]
   38174:	cmp	r2, r3
   38178:	bcc	3812c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   3817c:	ldr	r3, [r4, #44]	; 0x2c
   38180:	mov	r1, r8
   38184:	mov	r0, r4
   38188:	blx	r3
   3818c:	b	3812c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   38190:	mov	r2, sl
   38194:	mov	r1, #32
   38198:	bl	1459c <memset@plt>
   3819c:	ldr	r3, [r4, #20]
   381a0:	add	sl, r3, sl
   381a4:	str	sl, [r4, #20]
   381a8:	b	3812c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   381ac:	ldrb	r3, [r4, #25]
   381b0:	cmp	r3, #0
   381b4:	bne	381e4 <flatcc_json_printer_uint32_vector_field@@Base+0x228>
   381b8:	ldr	r3, [r4, #20]
   381bc:	add	r2, r3, #1
   381c0:	str	r2, [r4, #20]
   381c4:	mov	r2, #93	; 0x5d
   381c8:	strb	r2, [r3]
   381cc:	ldrd	r4, [sp]
   381d0:	ldrd	r6, [sp, #8]
   381d4:	ldrd	r8, [sp, #16]
   381d8:	ldr	sl, [sp, #24]
   381dc:	add	sp, sp, #28
   381e0:	pop	{pc}		; (ldr pc, [sp], #4)
   381e4:	ldr	r3, [r4, #20]
   381e8:	add	r2, r3, #1
   381ec:	str	r2, [r4, #20]
   381f0:	mov	r2, #10
   381f4:	strb	r2, [r3]
   381f8:	ldr	r5, [r4, #32]
   381fc:	sub	r5, r5, #1
   38200:	str	r5, [r4, #32]
   38204:	ldrb	r3, [r4, #25]
   38208:	mul	r5, r5, r3
   3820c:	ldr	r0, [r4, #20]
   38210:	add	r3, r0, r5
   38214:	ldr	r2, [r4, #16]
   38218:	cmp	r2, r3
   3821c:	bcs	38230 <flatcc_json_printer_uint32_vector_field@@Base+0x274>
   38220:	mov	r1, r5
   38224:	mov	r0, r4
   38228:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3822c:	b	381b8 <flatcc_json_printer_uint32_vector_field@@Base+0x1fc>
   38230:	mov	r2, r5
   38234:	mov	r1, #32
   38238:	bl	1459c <memset@plt>
   3823c:	ldr	r3, [r4, #20]
   38240:	add	r5, r3, r5
   38244:	str	r5, [r4, #20]
   38248:	b	381b8 <flatcc_json_printer_uint32_vector_field@@Base+0x1fc>

0003824c <flatcc_json_printer_uint64_vector_field@@Base>:
   3824c:	add	r2, r2, #2
   38250:	lsl	r2, r2, #1
   38254:	ldr	ip, [r1, #8]
   38258:	cmp	ip, r2
   3825c:	bxle	lr
   38260:	ldr	ip, [r1, #4]
   38264:	ldrh	r2, [ip, r2]
   38268:	cmp	r2, #0
   3826c:	bxeq	lr
   38270:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38274:	strd	r6, [sp, #8]
   38278:	strd	r8, [sp, #16]
   3827c:	str	sl, [sp, #24]
   38280:	str	lr, [sp, #28]
   38284:	ldr	ip, [r1]
   38288:	adds	lr, ip, r2
   3828c:	beq	3845c <flatcc_json_printer_uint64_vector_field@@Base+0x210>
   38290:	ldr	r4, [r1, #16]
   38294:	add	r5, r4, #1
   38298:	str	r5, [r1, #16]
   3829c:	cmp	r4, #0
   382a0:	beq	382b8 <flatcc_json_printer_uint64_vector_field@@Base+0x6c>
   382a4:	ldr	r1, [r0, #20]
   382a8:	add	r4, r1, #1
   382ac:	str	r4, [r0, #20]
   382b0:	mov	r4, #44	; 0x2c
   382b4:	strb	r4, [r1]
   382b8:	mov	r1, r3
   382bc:	mov	r4, r0
   382c0:	ldr	r3, [ip, r2]
   382c4:	add	r6, lr, r3
   382c8:	ldr	r7, [lr, r3]
   382cc:	ldr	r2, [sp, #32]
   382d0:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   382d4:	ldr	r3, [r4, #32]
   382d8:	add	r3, r3, #1
   382dc:	str	r3, [r4, #32]
   382e0:	ldr	r3, [r4, #20]
   382e4:	add	r2, r3, #1
   382e8:	str	r2, [r4, #20]
   382ec:	mov	r2, #91	; 0x5b
   382f0:	strb	r2, [r3]
   382f4:	cmp	r7, #0
   382f8:	beq	3843c <flatcc_json_printer_uint64_vector_field@@Base+0x1f0>
   382fc:	ldrb	r3, [r4, #25]
   38300:	cmp	r3, #0
   38304:	bne	38360 <flatcc_json_printer_uint64_vector_field@@Base+0x114>
   38308:	ldr	r2, [r4, #20]
   3830c:	ldr	r3, [r4, #16]
   38310:	cmp	r2, r3
   38314:	bcc	38328 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   38318:	ldr	r3, [r4, #44]	; 0x2c
   3831c:	mov	r1, #0
   38320:	mov	r0, r4
   38324:	blx	r3
   38328:	ldr	r2, [r4, #20]
   3832c:	ldrd	r0, [r6, #4]
   38330:	bl	30120 <flatcc_json_parser_struct_as_root@@Base+0x698>
   38334:	ldr	r3, [r4, #20]
   38338:	add	r0, r3, r0
   3833c:	str	r0, [r4, #20]
   38340:	add	r6, r6, #12
   38344:	sub	r5, r7, #2
   38348:	cmp	r7, #1
   3834c:	beq	3843c <flatcc_json_printer_uint64_vector_field@@Base+0x1f0>
   38350:	mov	r7, #44	; 0x2c
   38354:	mov	r8, #0
   38358:	mov	r9, #10
   3835c:	b	383e0 <flatcc_json_printer_uint64_vector_field@@Base+0x194>
   38360:	ldr	r3, [r4, #20]
   38364:	add	r2, r3, #1
   38368:	str	r2, [r4, #20]
   3836c:	mov	r2, #10
   38370:	strb	r2, [r3]
   38374:	mov	r0, r4
   38378:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3837c:	b	38328 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   38380:	ldr	r3, [r4, #20]
   38384:	add	r2, r3, #1
   38388:	str	r2, [r4, #20]
   3838c:	strb	r9, [r3]
   38390:	ldrb	r3, [r4, #25]
   38394:	ldr	sl, [r4, #32]
   38398:	mul	sl, sl, r3
   3839c:	ldr	r0, [r4, #20]
   383a0:	add	r3, r0, sl
   383a4:	ldr	r2, [r4, #16]
   383a8:	cmp	r2, r3
   383ac:	bcs	38420 <flatcc_json_printer_uint64_vector_field@@Base+0x1d4>
   383b0:	mov	r1, sl
   383b4:	mov	r0, r4
   383b8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   383bc:	ldr	r2, [r4, #20]
   383c0:	ldrd	r0, [r6], #8
   383c4:	bl	30120 <flatcc_json_parser_struct_as_root@@Base+0x698>
   383c8:	ldr	r3, [r4, #20]
   383cc:	add	r0, r3, r0
   383d0:	str	r0, [r4, #20]
   383d4:	sub	r5, r5, #1
   383d8:	cmn	r5, #1
   383dc:	beq	3843c <flatcc_json_printer_uint64_vector_field@@Base+0x1f0>
   383e0:	ldr	r3, [r4, #20]
   383e4:	add	r2, r3, #1
   383e8:	str	r2, [r4, #20]
   383ec:	strb	r7, [r3]
   383f0:	ldrb	r3, [r4, #25]
   383f4:	cmp	r3, #0
   383f8:	bne	38380 <flatcc_json_printer_uint64_vector_field@@Base+0x134>
   383fc:	ldr	r2, [r4, #20]
   38400:	ldr	r3, [r4, #16]
   38404:	cmp	r2, r3
   38408:	bcc	383bc <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   3840c:	ldr	r3, [r4, #44]	; 0x2c
   38410:	mov	r1, r8
   38414:	mov	r0, r4
   38418:	blx	r3
   3841c:	b	383bc <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   38420:	mov	r2, sl
   38424:	mov	r1, #32
   38428:	bl	1459c <memset@plt>
   3842c:	ldr	r3, [r4, #20]
   38430:	add	sl, r3, sl
   38434:	str	sl, [r4, #20]
   38438:	b	383bc <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   3843c:	ldrb	r3, [r4, #25]
   38440:	cmp	r3, #0
   38444:	bne	38474 <flatcc_json_printer_uint64_vector_field@@Base+0x228>
   38448:	ldr	r3, [r4, #20]
   3844c:	add	r2, r3, #1
   38450:	str	r2, [r4, #20]
   38454:	mov	r2, #93	; 0x5d
   38458:	strb	r2, [r3]
   3845c:	ldrd	r4, [sp]
   38460:	ldrd	r6, [sp, #8]
   38464:	ldrd	r8, [sp, #16]
   38468:	ldr	sl, [sp, #24]
   3846c:	add	sp, sp, #28
   38470:	pop	{pc}		; (ldr pc, [sp], #4)
   38474:	ldr	r3, [r4, #20]
   38478:	add	r2, r3, #1
   3847c:	str	r2, [r4, #20]
   38480:	mov	r2, #10
   38484:	strb	r2, [r3]
   38488:	ldr	r5, [r4, #32]
   3848c:	sub	r5, r5, #1
   38490:	str	r5, [r4, #32]
   38494:	ldrb	r3, [r4, #25]
   38498:	mul	r5, r5, r3
   3849c:	ldr	r0, [r4, #20]
   384a0:	add	r3, r0, r5
   384a4:	ldr	r2, [r4, #16]
   384a8:	cmp	r2, r3
   384ac:	bcs	384c0 <flatcc_json_printer_uint64_vector_field@@Base+0x274>
   384b0:	mov	r1, r5
   384b4:	mov	r0, r4
   384b8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   384bc:	b	38448 <flatcc_json_printer_uint64_vector_field@@Base+0x1fc>
   384c0:	mov	r2, r5
   384c4:	mov	r1, #32
   384c8:	bl	1459c <memset@plt>
   384cc:	ldr	r3, [r4, #20]
   384d0:	add	r5, r3, r5
   384d4:	str	r5, [r4, #20]
   384d8:	b	38448 <flatcc_json_printer_uint64_vector_field@@Base+0x1fc>

000384dc <flatcc_json_printer_int8_vector_field@@Base>:
   384dc:	add	r2, r2, #2
   384e0:	lsl	r2, r2, #1
   384e4:	ldr	ip, [r1, #8]
   384e8:	cmp	ip, r2
   384ec:	bxle	lr
   384f0:	ldr	ip, [r1, #4]
   384f4:	ldrh	r2, [ip, r2]
   384f8:	cmp	r2, #0
   384fc:	bxeq	lr
   38500:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38504:	strd	r6, [sp, #8]
   38508:	strd	r8, [sp, #16]
   3850c:	str	sl, [sp, #24]
   38510:	str	lr, [sp, #28]
   38514:	ldr	ip, [r1]
   38518:	adds	lr, ip, r2
   3851c:	beq	386ec <flatcc_json_printer_int8_vector_field@@Base+0x210>
   38520:	ldr	r4, [r1, #16]
   38524:	add	r5, r4, #1
   38528:	str	r5, [r1, #16]
   3852c:	cmp	r4, #0
   38530:	beq	38548 <flatcc_json_printer_int8_vector_field@@Base+0x6c>
   38534:	ldr	r1, [r0, #20]
   38538:	add	r4, r1, #1
   3853c:	str	r4, [r0, #20]
   38540:	mov	r4, #44	; 0x2c
   38544:	strb	r4, [r1]
   38548:	mov	r1, r3
   3854c:	mov	r4, r0
   38550:	ldr	r3, [ip, r2]
   38554:	add	r6, lr, r3
   38558:	ldr	r7, [lr, r3]
   3855c:	ldr	r2, [sp, #32]
   38560:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   38564:	ldr	r3, [r4, #32]
   38568:	add	r3, r3, #1
   3856c:	str	r3, [r4, #32]
   38570:	ldr	r3, [r4, #20]
   38574:	add	r2, r3, #1
   38578:	str	r2, [r4, #20]
   3857c:	mov	r2, #91	; 0x5b
   38580:	strb	r2, [r3]
   38584:	cmp	r7, #0
   38588:	beq	386cc <flatcc_json_printer_int8_vector_field@@Base+0x1f0>
   3858c:	ldrb	r3, [r4, #25]
   38590:	cmp	r3, #0
   38594:	bne	385f4 <flatcc_json_printer_int8_vector_field@@Base+0x118>
   38598:	ldr	r2, [r4, #20]
   3859c:	ldr	r3, [r4, #16]
   385a0:	cmp	r2, r3
   385a4:	bcc	385b8 <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   385a8:	ldr	r3, [r4, #44]	; 0x2c
   385ac:	mov	r1, #0
   385b0:	mov	r0, r4
   385b4:	blx	r3
   385b8:	ldr	r1, [r4, #20]
   385bc:	ldrsb	r0, [r6, #4]
   385c0:	bl	307fc <flatcc_json_parser_struct_as_root@@Base+0xd74>
   385c4:	ldr	r3, [r4, #20]
   385c8:	add	r0, r3, r0
   385cc:	str	r0, [r4, #20]
   385d0:	add	r5, r6, #5
   385d4:	cmp	r7, #1
   385d8:	beq	386cc <flatcc_json_printer_int8_vector_field@@Base+0x1f0>
   385dc:	add	r7, r7, #4
   385e0:	add	r6, r6, r7
   385e4:	mov	r7, #44	; 0x2c
   385e8:	mov	r8, #0
   385ec:	mov	r9, #10
   385f0:	b	38670 <flatcc_json_printer_int8_vector_field@@Base+0x194>
   385f4:	ldr	r3, [r4, #20]
   385f8:	add	r2, r3, #1
   385fc:	str	r2, [r4, #20]
   38600:	mov	r2, #10
   38604:	strb	r2, [r3]
   38608:	mov	r0, r4
   3860c:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   38610:	b	385b8 <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   38614:	ldr	r3, [r4, #20]
   38618:	add	r2, r3, #1
   3861c:	str	r2, [r4, #20]
   38620:	strb	r9, [r3]
   38624:	ldrb	r3, [r4, #25]
   38628:	ldr	sl, [r4, #32]
   3862c:	mul	sl, sl, r3
   38630:	ldr	r0, [r4, #20]
   38634:	add	r3, r0, sl
   38638:	ldr	r2, [r4, #16]
   3863c:	cmp	r2, r3
   38640:	bcs	386b0 <flatcc_json_printer_int8_vector_field@@Base+0x1d4>
   38644:	mov	r1, sl
   38648:	mov	r0, r4
   3864c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   38650:	ldr	r1, [r4, #20]
   38654:	ldrsb	r0, [r5], #1
   38658:	bl	307fc <flatcc_json_parser_struct_as_root@@Base+0xd74>
   3865c:	ldr	r3, [r4, #20]
   38660:	add	r0, r3, r0
   38664:	str	r0, [r4, #20]
   38668:	cmp	r6, r5
   3866c:	beq	386cc <flatcc_json_printer_int8_vector_field@@Base+0x1f0>
   38670:	ldr	r3, [r4, #20]
   38674:	add	r2, r3, #1
   38678:	str	r2, [r4, #20]
   3867c:	strb	r7, [r3]
   38680:	ldrb	r3, [r4, #25]
   38684:	cmp	r3, #0
   38688:	bne	38614 <flatcc_json_printer_int8_vector_field@@Base+0x138>
   3868c:	ldr	r2, [r4, #20]
   38690:	ldr	r3, [r4, #16]
   38694:	cmp	r2, r3
   38698:	bcc	38650 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   3869c:	ldr	r3, [r4, #44]	; 0x2c
   386a0:	mov	r1, r8
   386a4:	mov	r0, r4
   386a8:	blx	r3
   386ac:	b	38650 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   386b0:	mov	r2, sl
   386b4:	mov	r1, #32
   386b8:	bl	1459c <memset@plt>
   386bc:	ldr	r3, [r4, #20]
   386c0:	add	sl, r3, sl
   386c4:	str	sl, [r4, #20]
   386c8:	b	38650 <flatcc_json_printer_int8_vector_field@@Base+0x174>
   386cc:	ldrb	r3, [r4, #25]
   386d0:	cmp	r3, #0
   386d4:	bne	38704 <flatcc_json_printer_int8_vector_field@@Base+0x228>
   386d8:	ldr	r3, [r4, #20]
   386dc:	add	r2, r3, #1
   386e0:	str	r2, [r4, #20]
   386e4:	mov	r2, #93	; 0x5d
   386e8:	strb	r2, [r3]
   386ec:	ldrd	r4, [sp]
   386f0:	ldrd	r6, [sp, #8]
   386f4:	ldrd	r8, [sp, #16]
   386f8:	ldr	sl, [sp, #24]
   386fc:	add	sp, sp, #28
   38700:	pop	{pc}		; (ldr pc, [sp], #4)
   38704:	ldr	r3, [r4, #20]
   38708:	add	r2, r3, #1
   3870c:	str	r2, [r4, #20]
   38710:	mov	r2, #10
   38714:	strb	r2, [r3]
   38718:	ldr	r5, [r4, #32]
   3871c:	sub	r5, r5, #1
   38720:	str	r5, [r4, #32]
   38724:	ldrb	r3, [r4, #25]
   38728:	mul	r5, r5, r3
   3872c:	ldr	r0, [r4, #20]
   38730:	add	r3, r0, r5
   38734:	ldr	r2, [r4, #16]
   38738:	cmp	r2, r3
   3873c:	bcs	38750 <flatcc_json_printer_int8_vector_field@@Base+0x274>
   38740:	mov	r1, r5
   38744:	mov	r0, r4
   38748:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3874c:	b	386d8 <flatcc_json_printer_int8_vector_field@@Base+0x1fc>
   38750:	mov	r2, r5
   38754:	mov	r1, #32
   38758:	bl	1459c <memset@plt>
   3875c:	ldr	r3, [r4, #20]
   38760:	add	r5, r3, r5
   38764:	str	r5, [r4, #20]
   38768:	b	386d8 <flatcc_json_printer_int8_vector_field@@Base+0x1fc>

0003876c <flatcc_json_printer_int16_vector_field@@Base>:
   3876c:	add	r2, r2, #2
   38770:	lsl	r2, r2, #1
   38774:	ldr	ip, [r1, #8]
   38778:	cmp	ip, r2
   3877c:	bxle	lr
   38780:	ldr	ip, [r1, #4]
   38784:	ldrh	r2, [ip, r2]
   38788:	cmp	r2, #0
   3878c:	bxeq	lr
   38790:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38794:	strd	r6, [sp, #8]
   38798:	strd	r8, [sp, #16]
   3879c:	str	sl, [sp, #24]
   387a0:	str	lr, [sp, #28]
   387a4:	ldr	ip, [r1]
   387a8:	adds	lr, ip, r2
   387ac:	beq	3897c <flatcc_json_printer_int16_vector_field@@Base+0x210>
   387b0:	ldr	r4, [r1, #16]
   387b4:	add	r5, r4, #1
   387b8:	str	r5, [r1, #16]
   387bc:	cmp	r4, #0
   387c0:	beq	387d8 <flatcc_json_printer_int16_vector_field@@Base+0x6c>
   387c4:	ldr	r1, [r0, #20]
   387c8:	add	r4, r1, #1
   387cc:	str	r4, [r0, #20]
   387d0:	mov	r4, #44	; 0x2c
   387d4:	strb	r4, [r1]
   387d8:	mov	r1, r3
   387dc:	mov	r4, r0
   387e0:	ldr	r3, [ip, r2]
   387e4:	add	r6, lr, r3
   387e8:	ldr	r7, [lr, r3]
   387ec:	ldr	r2, [sp, #32]
   387f0:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   387f4:	ldr	r3, [r4, #32]
   387f8:	add	r3, r3, #1
   387fc:	str	r3, [r4, #32]
   38800:	ldr	r3, [r4, #20]
   38804:	add	r2, r3, #1
   38808:	str	r2, [r4, #20]
   3880c:	mov	r2, #91	; 0x5b
   38810:	strb	r2, [r3]
   38814:	cmp	r7, #0
   38818:	beq	3895c <flatcc_json_printer_int16_vector_field@@Base+0x1f0>
   3881c:	ldrb	r3, [r4, #25]
   38820:	cmp	r3, #0
   38824:	bne	38880 <flatcc_json_printer_int16_vector_field@@Base+0x114>
   38828:	ldr	r2, [r4, #20]
   3882c:	ldr	r3, [r4, #16]
   38830:	cmp	r2, r3
   38834:	bcc	38848 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   38838:	ldr	r3, [r4, #44]	; 0x2c
   3883c:	mov	r1, #0
   38840:	mov	r0, r4
   38844:	blx	r3
   38848:	ldr	r1, [r4, #20]
   3884c:	ldrsh	r0, [r6, #4]
   38850:	bl	3083c <flatcc_json_parser_struct_as_root@@Base+0xdb4>
   38854:	ldr	r3, [r4, #20]
   38858:	add	r0, r3, r0
   3885c:	str	r0, [r4, #20]
   38860:	add	r6, r6, #6
   38864:	sub	r5, r7, #2
   38868:	cmp	r7, #1
   3886c:	beq	3895c <flatcc_json_printer_int16_vector_field@@Base+0x1f0>
   38870:	mov	r7, #44	; 0x2c
   38874:	mov	r8, #0
   38878:	mov	r9, #10
   3887c:	b	38900 <flatcc_json_printer_int16_vector_field@@Base+0x194>
   38880:	ldr	r3, [r4, #20]
   38884:	add	r2, r3, #1
   38888:	str	r2, [r4, #20]
   3888c:	mov	r2, #10
   38890:	strb	r2, [r3]
   38894:	mov	r0, r4
   38898:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3889c:	b	38848 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   388a0:	ldr	r3, [r4, #20]
   388a4:	add	r2, r3, #1
   388a8:	str	r2, [r4, #20]
   388ac:	strb	r9, [r3]
   388b0:	ldrb	r3, [r4, #25]
   388b4:	ldr	sl, [r4, #32]
   388b8:	mul	sl, sl, r3
   388bc:	ldr	r0, [r4, #20]
   388c0:	add	r3, r0, sl
   388c4:	ldr	r2, [r4, #16]
   388c8:	cmp	r2, r3
   388cc:	bcs	38940 <flatcc_json_printer_int16_vector_field@@Base+0x1d4>
   388d0:	mov	r1, sl
   388d4:	mov	r0, r4
   388d8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   388dc:	ldr	r1, [r4, #20]
   388e0:	ldrsh	r0, [r6], #2
   388e4:	bl	3083c <flatcc_json_parser_struct_as_root@@Base+0xdb4>
   388e8:	ldr	r3, [r4, #20]
   388ec:	add	r0, r3, r0
   388f0:	str	r0, [r4, #20]
   388f4:	sub	r5, r5, #1
   388f8:	cmn	r5, #1
   388fc:	beq	3895c <flatcc_json_printer_int16_vector_field@@Base+0x1f0>
   38900:	ldr	r3, [r4, #20]
   38904:	add	r2, r3, #1
   38908:	str	r2, [r4, #20]
   3890c:	strb	r7, [r3]
   38910:	ldrb	r3, [r4, #25]
   38914:	cmp	r3, #0
   38918:	bne	388a0 <flatcc_json_printer_int16_vector_field@@Base+0x134>
   3891c:	ldr	r2, [r4, #20]
   38920:	ldr	r3, [r4, #16]
   38924:	cmp	r2, r3
   38928:	bcc	388dc <flatcc_json_printer_int16_vector_field@@Base+0x170>
   3892c:	ldr	r3, [r4, #44]	; 0x2c
   38930:	mov	r1, r8
   38934:	mov	r0, r4
   38938:	blx	r3
   3893c:	b	388dc <flatcc_json_printer_int16_vector_field@@Base+0x170>
   38940:	mov	r2, sl
   38944:	mov	r1, #32
   38948:	bl	1459c <memset@plt>
   3894c:	ldr	r3, [r4, #20]
   38950:	add	sl, r3, sl
   38954:	str	sl, [r4, #20]
   38958:	b	388dc <flatcc_json_printer_int16_vector_field@@Base+0x170>
   3895c:	ldrb	r3, [r4, #25]
   38960:	cmp	r3, #0
   38964:	bne	38994 <flatcc_json_printer_int16_vector_field@@Base+0x228>
   38968:	ldr	r3, [r4, #20]
   3896c:	add	r2, r3, #1
   38970:	str	r2, [r4, #20]
   38974:	mov	r2, #93	; 0x5d
   38978:	strb	r2, [r3]
   3897c:	ldrd	r4, [sp]
   38980:	ldrd	r6, [sp, #8]
   38984:	ldrd	r8, [sp, #16]
   38988:	ldr	sl, [sp, #24]
   3898c:	add	sp, sp, #28
   38990:	pop	{pc}		; (ldr pc, [sp], #4)
   38994:	ldr	r3, [r4, #20]
   38998:	add	r2, r3, #1
   3899c:	str	r2, [r4, #20]
   389a0:	mov	r2, #10
   389a4:	strb	r2, [r3]
   389a8:	ldr	r5, [r4, #32]
   389ac:	sub	r5, r5, #1
   389b0:	str	r5, [r4, #32]
   389b4:	ldrb	r3, [r4, #25]
   389b8:	mul	r5, r5, r3
   389bc:	ldr	r0, [r4, #20]
   389c0:	add	r3, r0, r5
   389c4:	ldr	r2, [r4, #16]
   389c8:	cmp	r2, r3
   389cc:	bcs	389e0 <flatcc_json_printer_int16_vector_field@@Base+0x274>
   389d0:	mov	r1, r5
   389d4:	mov	r0, r4
   389d8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   389dc:	b	38968 <flatcc_json_printer_int16_vector_field@@Base+0x1fc>
   389e0:	mov	r2, r5
   389e4:	mov	r1, #32
   389e8:	bl	1459c <memset@plt>
   389ec:	ldr	r3, [r4, #20]
   389f0:	add	r5, r3, r5
   389f4:	str	r5, [r4, #20]
   389f8:	b	38968 <flatcc_json_printer_int16_vector_field@@Base+0x1fc>

000389fc <flatcc_json_printer_int32_vector_field@@Base>:
   389fc:	add	r2, r2, #2
   38a00:	lsl	r2, r2, #1
   38a04:	ldr	ip, [r1, #8]
   38a08:	cmp	ip, r2
   38a0c:	bxle	lr
   38a10:	ldr	ip, [r1, #4]
   38a14:	ldrh	r2, [ip, r2]
   38a18:	cmp	r2, #0
   38a1c:	bxeq	lr
   38a20:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38a24:	strd	r6, [sp, #8]
   38a28:	strd	r8, [sp, #16]
   38a2c:	str	sl, [sp, #24]
   38a30:	str	lr, [sp, #28]
   38a34:	ldr	ip, [r1]
   38a38:	adds	lr, ip, r2
   38a3c:	beq	38c0c <flatcc_json_printer_int32_vector_field@@Base+0x210>
   38a40:	ldr	r4, [r1, #16]
   38a44:	add	r5, r4, #1
   38a48:	str	r5, [r1, #16]
   38a4c:	cmp	r4, #0
   38a50:	beq	38a68 <flatcc_json_printer_int32_vector_field@@Base+0x6c>
   38a54:	ldr	r1, [r0, #20]
   38a58:	add	r4, r1, #1
   38a5c:	str	r4, [r0, #20]
   38a60:	mov	r4, #44	; 0x2c
   38a64:	strb	r4, [r1]
   38a68:	mov	r1, r3
   38a6c:	mov	r4, r0
   38a70:	ldr	r3, [ip, r2]
   38a74:	add	r6, lr, r3
   38a78:	ldr	r7, [lr, r3]
   38a7c:	ldr	r2, [sp, #32]
   38a80:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   38a84:	ldr	r3, [r4, #32]
   38a88:	add	r3, r3, #1
   38a8c:	str	r3, [r4, #32]
   38a90:	ldr	r3, [r4, #20]
   38a94:	add	r2, r3, #1
   38a98:	str	r2, [r4, #20]
   38a9c:	mov	r2, #91	; 0x5b
   38aa0:	strb	r2, [r3]
   38aa4:	cmp	r7, #0
   38aa8:	beq	38bec <flatcc_json_printer_int32_vector_field@@Base+0x1f0>
   38aac:	ldrb	r3, [r4, #25]
   38ab0:	cmp	r3, #0
   38ab4:	bne	38b10 <flatcc_json_printer_int32_vector_field@@Base+0x114>
   38ab8:	ldr	r2, [r4, #20]
   38abc:	ldr	r3, [r4, #16]
   38ac0:	cmp	r2, r3
   38ac4:	bcc	38ad8 <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   38ac8:	ldr	r3, [r4, #44]	; 0x2c
   38acc:	mov	r1, #0
   38ad0:	mov	r0, r4
   38ad4:	blx	r3
   38ad8:	ldr	r1, [r4, #20]
   38adc:	ldr	r0, [r6, #4]
   38ae0:	bl	3087c <flatcc_json_parser_struct_as_root@@Base+0xdf4>
   38ae4:	ldr	r3, [r4, #20]
   38ae8:	add	r0, r3, r0
   38aec:	str	r0, [r4, #20]
   38af0:	add	r6, r6, #8
   38af4:	sub	r5, r7, #2
   38af8:	cmp	r7, #1
   38afc:	beq	38bec <flatcc_json_printer_int32_vector_field@@Base+0x1f0>
   38b00:	mov	r7, #44	; 0x2c
   38b04:	mov	r8, #0
   38b08:	mov	r9, #10
   38b0c:	b	38b90 <flatcc_json_printer_int32_vector_field@@Base+0x194>
   38b10:	ldr	r3, [r4, #20]
   38b14:	add	r2, r3, #1
   38b18:	str	r2, [r4, #20]
   38b1c:	mov	r2, #10
   38b20:	strb	r2, [r3]
   38b24:	mov	r0, r4
   38b28:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   38b2c:	b	38ad8 <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   38b30:	ldr	r3, [r4, #20]
   38b34:	add	r2, r3, #1
   38b38:	str	r2, [r4, #20]
   38b3c:	strb	r9, [r3]
   38b40:	ldrb	r3, [r4, #25]
   38b44:	ldr	sl, [r4, #32]
   38b48:	mul	sl, sl, r3
   38b4c:	ldr	r0, [r4, #20]
   38b50:	add	r3, r0, sl
   38b54:	ldr	r2, [r4, #16]
   38b58:	cmp	r2, r3
   38b5c:	bcs	38bd0 <flatcc_json_printer_int32_vector_field@@Base+0x1d4>
   38b60:	mov	r1, sl
   38b64:	mov	r0, r4
   38b68:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   38b6c:	ldr	r1, [r4, #20]
   38b70:	ldr	r0, [r6], #4
   38b74:	bl	3087c <flatcc_json_parser_struct_as_root@@Base+0xdf4>
   38b78:	ldr	r3, [r4, #20]
   38b7c:	add	r0, r3, r0
   38b80:	str	r0, [r4, #20]
   38b84:	sub	r5, r5, #1
   38b88:	cmn	r5, #1
   38b8c:	beq	38bec <flatcc_json_printer_int32_vector_field@@Base+0x1f0>
   38b90:	ldr	r3, [r4, #20]
   38b94:	add	r2, r3, #1
   38b98:	str	r2, [r4, #20]
   38b9c:	strb	r7, [r3]
   38ba0:	ldrb	r3, [r4, #25]
   38ba4:	cmp	r3, #0
   38ba8:	bne	38b30 <flatcc_json_printer_int32_vector_field@@Base+0x134>
   38bac:	ldr	r2, [r4, #20]
   38bb0:	ldr	r3, [r4, #16]
   38bb4:	cmp	r2, r3
   38bb8:	bcc	38b6c <flatcc_json_printer_int32_vector_field@@Base+0x170>
   38bbc:	ldr	r3, [r4, #44]	; 0x2c
   38bc0:	mov	r1, r8
   38bc4:	mov	r0, r4
   38bc8:	blx	r3
   38bcc:	b	38b6c <flatcc_json_printer_int32_vector_field@@Base+0x170>
   38bd0:	mov	r2, sl
   38bd4:	mov	r1, #32
   38bd8:	bl	1459c <memset@plt>
   38bdc:	ldr	r3, [r4, #20]
   38be0:	add	sl, r3, sl
   38be4:	str	sl, [r4, #20]
   38be8:	b	38b6c <flatcc_json_printer_int32_vector_field@@Base+0x170>
   38bec:	ldrb	r3, [r4, #25]
   38bf0:	cmp	r3, #0
   38bf4:	bne	38c24 <flatcc_json_printer_int32_vector_field@@Base+0x228>
   38bf8:	ldr	r3, [r4, #20]
   38bfc:	add	r2, r3, #1
   38c00:	str	r2, [r4, #20]
   38c04:	mov	r2, #93	; 0x5d
   38c08:	strb	r2, [r3]
   38c0c:	ldrd	r4, [sp]
   38c10:	ldrd	r6, [sp, #8]
   38c14:	ldrd	r8, [sp, #16]
   38c18:	ldr	sl, [sp, #24]
   38c1c:	add	sp, sp, #28
   38c20:	pop	{pc}		; (ldr pc, [sp], #4)
   38c24:	ldr	r3, [r4, #20]
   38c28:	add	r2, r3, #1
   38c2c:	str	r2, [r4, #20]
   38c30:	mov	r2, #10
   38c34:	strb	r2, [r3]
   38c38:	ldr	r5, [r4, #32]
   38c3c:	sub	r5, r5, #1
   38c40:	str	r5, [r4, #32]
   38c44:	ldrb	r3, [r4, #25]
   38c48:	mul	r5, r5, r3
   38c4c:	ldr	r0, [r4, #20]
   38c50:	add	r3, r0, r5
   38c54:	ldr	r2, [r4, #16]
   38c58:	cmp	r2, r3
   38c5c:	bcs	38c70 <flatcc_json_printer_int32_vector_field@@Base+0x274>
   38c60:	mov	r1, r5
   38c64:	mov	r0, r4
   38c68:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   38c6c:	b	38bf8 <flatcc_json_printer_int32_vector_field@@Base+0x1fc>
   38c70:	mov	r2, r5
   38c74:	mov	r1, #32
   38c78:	bl	1459c <memset@plt>
   38c7c:	ldr	r3, [r4, #20]
   38c80:	add	r5, r3, r5
   38c84:	str	r5, [r4, #20]
   38c88:	b	38bf8 <flatcc_json_printer_int32_vector_field@@Base+0x1fc>

00038c8c <flatcc_json_printer_int64_vector_field@@Base>:
   38c8c:	add	r2, r2, #2
   38c90:	lsl	r2, r2, #1
   38c94:	ldr	ip, [r1, #8]
   38c98:	cmp	ip, r2
   38c9c:	bxle	lr
   38ca0:	ldr	ip, [r1, #4]
   38ca4:	ldrh	r2, [ip, r2]
   38ca8:	cmp	r2, #0
   38cac:	bxeq	lr
   38cb0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38cb4:	strd	r6, [sp, #8]
   38cb8:	strd	r8, [sp, #16]
   38cbc:	str	sl, [sp, #24]
   38cc0:	str	lr, [sp, #28]
   38cc4:	ldr	ip, [r1]
   38cc8:	adds	lr, ip, r2
   38ccc:	beq	38e9c <flatcc_json_printer_int64_vector_field@@Base+0x210>
   38cd0:	ldr	r4, [r1, #16]
   38cd4:	add	r5, r4, #1
   38cd8:	str	r5, [r1, #16]
   38cdc:	cmp	r4, #0
   38ce0:	beq	38cf8 <flatcc_json_printer_int64_vector_field@@Base+0x6c>
   38ce4:	ldr	r1, [r0, #20]
   38ce8:	add	r4, r1, #1
   38cec:	str	r4, [r0, #20]
   38cf0:	mov	r4, #44	; 0x2c
   38cf4:	strb	r4, [r1]
   38cf8:	mov	r1, r3
   38cfc:	mov	r4, r0
   38d00:	ldr	r3, [ip, r2]
   38d04:	add	r6, lr, r3
   38d08:	ldr	r7, [lr, r3]
   38d0c:	ldr	r2, [sp, #32]
   38d10:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   38d14:	ldr	r3, [r4, #32]
   38d18:	add	r3, r3, #1
   38d1c:	str	r3, [r4, #32]
   38d20:	ldr	r3, [r4, #20]
   38d24:	add	r2, r3, #1
   38d28:	str	r2, [r4, #20]
   38d2c:	mov	r2, #91	; 0x5b
   38d30:	strb	r2, [r3]
   38d34:	cmp	r7, #0
   38d38:	beq	38e7c <flatcc_json_printer_int64_vector_field@@Base+0x1f0>
   38d3c:	ldrb	r3, [r4, #25]
   38d40:	cmp	r3, #0
   38d44:	bne	38da0 <flatcc_json_printer_int64_vector_field@@Base+0x114>
   38d48:	ldr	r2, [r4, #20]
   38d4c:	ldr	r3, [r4, #16]
   38d50:	cmp	r2, r3
   38d54:	bcc	38d68 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   38d58:	ldr	r3, [r4, #44]	; 0x2c
   38d5c:	mov	r1, #0
   38d60:	mov	r0, r4
   38d64:	blx	r3
   38d68:	ldr	r2, [r4, #20]
   38d6c:	ldrd	r0, [r6, #4]
   38d70:	bl	308b4 <flatcc_json_parser_struct_as_root@@Base+0xe2c>
   38d74:	ldr	r3, [r4, #20]
   38d78:	add	r0, r3, r0
   38d7c:	str	r0, [r4, #20]
   38d80:	add	r6, r6, #12
   38d84:	sub	r5, r7, #2
   38d88:	cmp	r7, #1
   38d8c:	beq	38e7c <flatcc_json_printer_int64_vector_field@@Base+0x1f0>
   38d90:	mov	r7, #44	; 0x2c
   38d94:	mov	r8, #0
   38d98:	mov	r9, #10
   38d9c:	b	38e20 <flatcc_json_printer_int64_vector_field@@Base+0x194>
   38da0:	ldr	r3, [r4, #20]
   38da4:	add	r2, r3, #1
   38da8:	str	r2, [r4, #20]
   38dac:	mov	r2, #10
   38db0:	strb	r2, [r3]
   38db4:	mov	r0, r4
   38db8:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   38dbc:	b	38d68 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   38dc0:	ldr	r3, [r4, #20]
   38dc4:	add	r2, r3, #1
   38dc8:	str	r2, [r4, #20]
   38dcc:	strb	r9, [r3]
   38dd0:	ldrb	r3, [r4, #25]
   38dd4:	ldr	sl, [r4, #32]
   38dd8:	mul	sl, sl, r3
   38ddc:	ldr	r0, [r4, #20]
   38de0:	add	r3, r0, sl
   38de4:	ldr	r2, [r4, #16]
   38de8:	cmp	r2, r3
   38dec:	bcs	38e60 <flatcc_json_printer_int64_vector_field@@Base+0x1d4>
   38df0:	mov	r1, sl
   38df4:	mov	r0, r4
   38df8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   38dfc:	ldr	r2, [r4, #20]
   38e00:	ldrd	r0, [r6], #8
   38e04:	bl	308b4 <flatcc_json_parser_struct_as_root@@Base+0xe2c>
   38e08:	ldr	r3, [r4, #20]
   38e0c:	add	r0, r3, r0
   38e10:	str	r0, [r4, #20]
   38e14:	sub	r5, r5, #1
   38e18:	cmn	r5, #1
   38e1c:	beq	38e7c <flatcc_json_printer_int64_vector_field@@Base+0x1f0>
   38e20:	ldr	r3, [r4, #20]
   38e24:	add	r2, r3, #1
   38e28:	str	r2, [r4, #20]
   38e2c:	strb	r7, [r3]
   38e30:	ldrb	r3, [r4, #25]
   38e34:	cmp	r3, #0
   38e38:	bne	38dc0 <flatcc_json_printer_int64_vector_field@@Base+0x134>
   38e3c:	ldr	r2, [r4, #20]
   38e40:	ldr	r3, [r4, #16]
   38e44:	cmp	r2, r3
   38e48:	bcc	38dfc <flatcc_json_printer_int64_vector_field@@Base+0x170>
   38e4c:	ldr	r3, [r4, #44]	; 0x2c
   38e50:	mov	r1, r8
   38e54:	mov	r0, r4
   38e58:	blx	r3
   38e5c:	b	38dfc <flatcc_json_printer_int64_vector_field@@Base+0x170>
   38e60:	mov	r2, sl
   38e64:	mov	r1, #32
   38e68:	bl	1459c <memset@plt>
   38e6c:	ldr	r3, [r4, #20]
   38e70:	add	sl, r3, sl
   38e74:	str	sl, [r4, #20]
   38e78:	b	38dfc <flatcc_json_printer_int64_vector_field@@Base+0x170>
   38e7c:	ldrb	r3, [r4, #25]
   38e80:	cmp	r3, #0
   38e84:	bne	38eb4 <flatcc_json_printer_int64_vector_field@@Base+0x228>
   38e88:	ldr	r3, [r4, #20]
   38e8c:	add	r2, r3, #1
   38e90:	str	r2, [r4, #20]
   38e94:	mov	r2, #93	; 0x5d
   38e98:	strb	r2, [r3]
   38e9c:	ldrd	r4, [sp]
   38ea0:	ldrd	r6, [sp, #8]
   38ea4:	ldrd	r8, [sp, #16]
   38ea8:	ldr	sl, [sp, #24]
   38eac:	add	sp, sp, #28
   38eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   38eb4:	ldr	r3, [r4, #20]
   38eb8:	add	r2, r3, #1
   38ebc:	str	r2, [r4, #20]
   38ec0:	mov	r2, #10
   38ec4:	strb	r2, [r3]
   38ec8:	ldr	r5, [r4, #32]
   38ecc:	sub	r5, r5, #1
   38ed0:	str	r5, [r4, #32]
   38ed4:	ldrb	r3, [r4, #25]
   38ed8:	mul	r5, r5, r3
   38edc:	ldr	r0, [r4, #20]
   38ee0:	add	r3, r0, r5
   38ee4:	ldr	r2, [r4, #16]
   38ee8:	cmp	r2, r3
   38eec:	bcs	38f00 <flatcc_json_printer_int64_vector_field@@Base+0x274>
   38ef0:	mov	r1, r5
   38ef4:	mov	r0, r4
   38ef8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   38efc:	b	38e88 <flatcc_json_printer_int64_vector_field@@Base+0x1fc>
   38f00:	mov	r2, r5
   38f04:	mov	r1, #32
   38f08:	bl	1459c <memset@plt>
   38f0c:	ldr	r3, [r4, #20]
   38f10:	add	r5, r3, r5
   38f14:	str	r5, [r4, #20]
   38f18:	b	38e88 <flatcc_json_printer_int64_vector_field@@Base+0x1fc>

00038f1c <flatcc_json_printer_bool_vector_field@@Base>:
   38f1c:	add	r2, r2, #2
   38f20:	lsl	r2, r2, #1
   38f24:	ldr	ip, [r1, #8]
   38f28:	cmp	ip, r2
   38f2c:	bxle	lr
   38f30:	ldr	ip, [r1, #4]
   38f34:	ldrh	r2, [ip, r2]
   38f38:	cmp	r2, #0
   38f3c:	bxeq	lr
   38f40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   38f44:	strd	r6, [sp, #8]
   38f48:	strd	r8, [sp, #16]
   38f4c:	str	sl, [sp, #24]
   38f50:	str	lr, [sp, #28]
   38f54:	ldr	ip, [r1]
   38f58:	adds	lr, ip, r2
   38f5c:	beq	3916c <flatcc_json_printer_bool_vector_field@@Base+0x250>
   38f60:	ldr	r4, [r1, #16]
   38f64:	add	r5, r4, #1
   38f68:	str	r5, [r1, #16]
   38f6c:	cmp	r4, #0
   38f70:	beq	38f88 <flatcc_json_printer_bool_vector_field@@Base+0x6c>
   38f74:	ldr	r1, [r0, #20]
   38f78:	add	r4, r1, #1
   38f7c:	str	r4, [r0, #20]
   38f80:	mov	r4, #44	; 0x2c
   38f84:	strb	r4, [r1]
   38f88:	mov	r1, r3
   38f8c:	mov	r4, r0
   38f90:	ldr	r3, [ip, r2]
   38f94:	add	r6, lr, r3
   38f98:	ldr	r7, [lr, r3]
   38f9c:	ldr	r2, [sp, #32]
   38fa0:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   38fa4:	ldr	r3, [r4, #32]
   38fa8:	add	r3, r3, #1
   38fac:	str	r3, [r4, #32]
   38fb0:	ldr	r3, [r4, #20]
   38fb4:	add	r2, r3, #1
   38fb8:	str	r2, [r4, #20]
   38fbc:	mov	r2, #91	; 0x5b
   38fc0:	strb	r2, [r3]
   38fc4:	cmp	r7, #0
   38fc8:	beq	3914c <flatcc_json_printer_bool_vector_field@@Base+0x230>
   38fcc:	ldrb	r3, [r4, #25]
   38fd0:	cmp	r3, #0
   38fd4:	bne	39034 <flatcc_json_printer_bool_vector_field@@Base+0x118>
   38fd8:	ldr	r2, [r4, #20]
   38fdc:	ldr	r3, [r4, #16]
   38fe0:	cmp	r2, r3
   38fe4:	bcc	38ff8 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   38fe8:	ldr	r3, [r4, #44]	; 0x2c
   38fec:	mov	r1, #0
   38ff0:	mov	r0, r4
   38ff4:	blx	r3
   38ff8:	ldr	r1, [r4, #20]
   38ffc:	ldrb	r0, [r6, #4]
   39000:	bl	310a8 <flatcc_json_parser_struct_as_root@@Base+0x1620>
   39004:	ldr	r3, [r4, #20]
   39008:	add	r0, r3, r0
   3900c:	str	r0, [r4, #20]
   39010:	add	r5, r6, #5
   39014:	cmp	r7, #1
   39018:	beq	3914c <flatcc_json_printer_bool_vector_field@@Base+0x230>
   3901c:	add	r7, r7, #4
   39020:	add	r6, r6, r7
   39024:	mov	r7, #44	; 0x2c
   39028:	mov	r8, #0
   3902c:	mov	r9, #10
   39030:	b	390f0 <flatcc_json_printer_bool_vector_field@@Base+0x1d4>
   39034:	ldr	r3, [r4, #20]
   39038:	add	r2, r3, #1
   3903c:	str	r2, [r4, #20]
   39040:	mov	r2, #10
   39044:	strb	r2, [r3]
   39048:	ldrb	r3, [r4, #25]
   3904c:	ldr	r5, [r4, #32]
   39050:	mul	r5, r5, r3
   39054:	ldr	r0, [r4, #20]
   39058:	add	r3, r0, r5
   3905c:	ldr	r2, [r4, #16]
   39060:	cmp	r2, r3
   39064:	bcs	39078 <flatcc_json_printer_bool_vector_field@@Base+0x15c>
   39068:	mov	r1, r5
   3906c:	mov	r0, r4
   39070:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   39074:	b	38ff8 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   39078:	mov	r2, r5
   3907c:	mov	r1, #32
   39080:	bl	1459c <memset@plt>
   39084:	ldr	r3, [r4, #20]
   39088:	add	r5, r3, r5
   3908c:	str	r5, [r4, #20]
   39090:	b	38ff8 <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   39094:	ldr	r3, [r4, #20]
   39098:	add	r2, r3, #1
   3909c:	str	r2, [r4, #20]
   390a0:	strb	r9, [r3]
   390a4:	ldrb	r3, [r4, #25]
   390a8:	ldr	sl, [r4, #32]
   390ac:	mul	sl, sl, r3
   390b0:	ldr	r0, [r4, #20]
   390b4:	add	r3, r0, sl
   390b8:	ldr	r2, [r4, #16]
   390bc:	cmp	r2, r3
   390c0:	bcs	39130 <flatcc_json_printer_bool_vector_field@@Base+0x214>
   390c4:	mov	r1, sl
   390c8:	mov	r0, r4
   390cc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   390d0:	ldr	r1, [r4, #20]
   390d4:	ldrb	r0, [r5], #1
   390d8:	bl	310a8 <flatcc_json_parser_struct_as_root@@Base+0x1620>
   390dc:	ldr	r3, [r4, #20]
   390e0:	add	r0, r3, r0
   390e4:	str	r0, [r4, #20]
   390e8:	cmp	r6, r5
   390ec:	beq	3914c <flatcc_json_printer_bool_vector_field@@Base+0x230>
   390f0:	ldr	r3, [r4, #20]
   390f4:	add	r2, r3, #1
   390f8:	str	r2, [r4, #20]
   390fc:	strb	r7, [r3]
   39100:	ldrb	r3, [r4, #25]
   39104:	cmp	r3, #0
   39108:	bne	39094 <flatcc_json_printer_bool_vector_field@@Base+0x178>
   3910c:	ldr	r2, [r4, #20]
   39110:	ldr	r3, [r4, #16]
   39114:	cmp	r2, r3
   39118:	bcc	390d0 <flatcc_json_printer_bool_vector_field@@Base+0x1b4>
   3911c:	ldr	r3, [r4, #44]	; 0x2c
   39120:	mov	r1, r8
   39124:	mov	r0, r4
   39128:	blx	r3
   3912c:	b	390d0 <flatcc_json_printer_bool_vector_field@@Base+0x1b4>
   39130:	mov	r2, sl
   39134:	mov	r1, #32
   39138:	bl	1459c <memset@plt>
   3913c:	ldr	r3, [r4, #20]
   39140:	add	sl, r3, sl
   39144:	str	sl, [r4, #20]
   39148:	b	390d0 <flatcc_json_printer_bool_vector_field@@Base+0x1b4>
   3914c:	ldrb	r3, [r4, #25]
   39150:	cmp	r3, #0
   39154:	bne	39184 <flatcc_json_printer_bool_vector_field@@Base+0x268>
   39158:	ldr	r3, [r4, #20]
   3915c:	add	r2, r3, #1
   39160:	str	r2, [r4, #20]
   39164:	mov	r2, #93	; 0x5d
   39168:	strb	r2, [r3]
   3916c:	ldrd	r4, [sp]
   39170:	ldrd	r6, [sp, #8]
   39174:	ldrd	r8, [sp, #16]
   39178:	ldr	sl, [sp, #24]
   3917c:	add	sp, sp, #28
   39180:	pop	{pc}		; (ldr pc, [sp], #4)
   39184:	ldr	r3, [r4, #20]
   39188:	add	r2, r3, #1
   3918c:	str	r2, [r4, #20]
   39190:	mov	r2, #10
   39194:	strb	r2, [r3]
   39198:	ldr	r5, [r4, #32]
   3919c:	sub	r5, r5, #1
   391a0:	str	r5, [r4, #32]
   391a4:	ldrb	r3, [r4, #25]
   391a8:	mul	r5, r5, r3
   391ac:	ldr	r0, [r4, #20]
   391b0:	add	r3, r0, r5
   391b4:	ldr	r2, [r4, #16]
   391b8:	cmp	r2, r3
   391bc:	bcs	391d0 <flatcc_json_printer_bool_vector_field@@Base+0x2b4>
   391c0:	mov	r1, r5
   391c4:	mov	r0, r4
   391c8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   391cc:	b	39158 <flatcc_json_printer_bool_vector_field@@Base+0x23c>
   391d0:	mov	r2, r5
   391d4:	mov	r1, #32
   391d8:	bl	1459c <memset@plt>
   391dc:	ldr	r3, [r4, #20]
   391e0:	add	r5, r3, r5
   391e4:	str	r5, [r4, #20]
   391e8:	b	39158 <flatcc_json_printer_bool_vector_field@@Base+0x23c>

000391ec <flatcc_json_printer_float_vector_field@@Base>:
   391ec:	add	r2, r2, #2
   391f0:	lsl	r2, r2, #1
   391f4:	ldr	ip, [r1, #8]
   391f8:	cmp	ip, r2
   391fc:	bxle	lr
   39200:	ldr	ip, [r1, #4]
   39204:	ldrh	r2, [ip, r2]
   39208:	cmp	r2, #0
   3920c:	bxeq	lr
   39210:	strd	r4, [sp, #-32]!	; 0xffffffe0
   39214:	strd	r6, [sp, #8]
   39218:	strd	r8, [sp, #16]
   3921c:	str	sl, [sp, #24]
   39220:	str	lr, [sp, #28]
   39224:	ldr	ip, [r1]
   39228:	adds	lr, ip, r2
   3922c:	beq	39404 <flatcc_json_printer_float_vector_field@@Base+0x218>
   39230:	ldr	r4, [r1, #16]
   39234:	add	r5, r4, #1
   39238:	str	r5, [r1, #16]
   3923c:	cmp	r4, #0
   39240:	beq	39258 <flatcc_json_printer_float_vector_field@@Base+0x6c>
   39244:	ldr	r1, [r0, #20]
   39248:	add	r4, r1, #1
   3924c:	str	r4, [r0, #20]
   39250:	mov	r4, #44	; 0x2c
   39254:	strb	r4, [r1]
   39258:	mov	r1, r3
   3925c:	mov	r4, r0
   39260:	ldr	r3, [ip, r2]
   39264:	add	r6, lr, r3
   39268:	ldr	r7, [lr, r3]
   3926c:	ldr	r2, [sp, #32]
   39270:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   39274:	ldr	r3, [r4, #32]
   39278:	add	r3, r3, #1
   3927c:	str	r3, [r4, #32]
   39280:	ldr	r3, [r4, #20]
   39284:	add	r2, r3, #1
   39288:	str	r2, [r4, #20]
   3928c:	mov	r2, #91	; 0x5b
   39290:	strb	r2, [r3]
   39294:	cmp	r7, #0
   39298:	beq	393e4 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
   3929c:	ldrb	r3, [r4, #25]
   392a0:	cmp	r3, #0
   392a4:	bne	39304 <flatcc_json_printer_float_vector_field@@Base+0x118>
   392a8:	ldr	r2, [r4, #20]
   392ac:	ldr	r3, [r4, #16]
   392b0:	cmp	r2, r3
   392b4:	bcc	392c8 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   392b8:	ldr	r3, [r4, #44]	; 0x2c
   392bc:	mov	r1, #0
   392c0:	mov	r0, r4
   392c4:	blx	r3
   392c8:	vldr	s0, [r6, #4]
   392cc:	ldr	r0, [r4, #20]
   392d0:	vcvt.f64.f32	d0, s0
   392d4:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   392d8:	ldr	r3, [r4, #20]
   392dc:	add	r0, r3, r0
   392e0:	str	r0, [r4, #20]
   392e4:	add	r6, r6, #8
   392e8:	sub	r5, r7, #2
   392ec:	cmp	r7, #1
   392f0:	beq	393e4 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
   392f4:	mov	r7, #44	; 0x2c
   392f8:	mov	r8, #0
   392fc:	mov	r9, #10
   39300:	b	39388 <flatcc_json_printer_float_vector_field@@Base+0x19c>
   39304:	ldr	r3, [r4, #20]
   39308:	add	r2, r3, #1
   3930c:	str	r2, [r4, #20]
   39310:	mov	r2, #10
   39314:	strb	r2, [r3]
   39318:	mov	r0, r4
   3931c:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   39320:	b	392c8 <flatcc_json_printer_float_vector_field@@Base+0xdc>
   39324:	ldr	r3, [r4, #20]
   39328:	add	r2, r3, #1
   3932c:	str	r2, [r4, #20]
   39330:	strb	r9, [r3]
   39334:	ldrb	r3, [r4, #25]
   39338:	ldr	sl, [r4, #32]
   3933c:	mul	sl, sl, r3
   39340:	ldr	r0, [r4, #20]
   39344:	add	r3, r0, sl
   39348:	ldr	r2, [r4, #16]
   3934c:	cmp	r2, r3
   39350:	bcs	393c8 <flatcc_json_printer_float_vector_field@@Base+0x1dc>
   39354:	mov	r1, sl
   39358:	mov	r0, r4
   3935c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   39360:	vldmia	r6!, {s0}
   39364:	ldr	r0, [r4, #20]
   39368:	vcvt.f64.f32	d0, s0
   3936c:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   39370:	ldr	r3, [r4, #20]
   39374:	add	r0, r3, r0
   39378:	str	r0, [r4, #20]
   3937c:	sub	r5, r5, #1
   39380:	cmn	r5, #1
   39384:	beq	393e4 <flatcc_json_printer_float_vector_field@@Base+0x1f8>
   39388:	ldr	r3, [r4, #20]
   3938c:	add	r2, r3, #1
   39390:	str	r2, [r4, #20]
   39394:	strb	r7, [r3]
   39398:	ldrb	r3, [r4, #25]
   3939c:	cmp	r3, #0
   393a0:	bne	39324 <flatcc_json_printer_float_vector_field@@Base+0x138>
   393a4:	ldr	r2, [r4, #20]
   393a8:	ldr	r3, [r4, #16]
   393ac:	cmp	r2, r3
   393b0:	bcc	39360 <flatcc_json_printer_float_vector_field@@Base+0x174>
   393b4:	ldr	r3, [r4, #44]	; 0x2c
   393b8:	mov	r1, r8
   393bc:	mov	r0, r4
   393c0:	blx	r3
   393c4:	b	39360 <flatcc_json_printer_float_vector_field@@Base+0x174>
   393c8:	mov	r2, sl
   393cc:	mov	r1, #32
   393d0:	bl	1459c <memset@plt>
   393d4:	ldr	r3, [r4, #20]
   393d8:	add	sl, r3, sl
   393dc:	str	sl, [r4, #20]
   393e0:	b	39360 <flatcc_json_printer_float_vector_field@@Base+0x174>
   393e4:	ldrb	r3, [r4, #25]
   393e8:	cmp	r3, #0
   393ec:	bne	3941c <flatcc_json_printer_float_vector_field@@Base+0x230>
   393f0:	ldr	r3, [r4, #20]
   393f4:	add	r2, r3, #1
   393f8:	str	r2, [r4, #20]
   393fc:	mov	r2, #93	; 0x5d
   39400:	strb	r2, [r3]
   39404:	ldrd	r4, [sp]
   39408:	ldrd	r6, [sp, #8]
   3940c:	ldrd	r8, [sp, #16]
   39410:	ldr	sl, [sp, #24]
   39414:	add	sp, sp, #28
   39418:	pop	{pc}		; (ldr pc, [sp], #4)
   3941c:	ldr	r3, [r4, #20]
   39420:	add	r2, r3, #1
   39424:	str	r2, [r4, #20]
   39428:	mov	r2, #10
   3942c:	strb	r2, [r3]
   39430:	ldr	r5, [r4, #32]
   39434:	sub	r5, r5, #1
   39438:	str	r5, [r4, #32]
   3943c:	ldrb	r3, [r4, #25]
   39440:	mul	r5, r5, r3
   39444:	ldr	r0, [r4, #20]
   39448:	add	r3, r0, r5
   3944c:	ldr	r2, [r4, #16]
   39450:	cmp	r2, r3
   39454:	bcs	39468 <flatcc_json_printer_float_vector_field@@Base+0x27c>
   39458:	mov	r1, r5
   3945c:	mov	r0, r4
   39460:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   39464:	b	393f0 <flatcc_json_printer_float_vector_field@@Base+0x204>
   39468:	mov	r2, r5
   3946c:	mov	r1, #32
   39470:	bl	1459c <memset@plt>
   39474:	ldr	r3, [r4, #20]
   39478:	add	r5, r3, r5
   3947c:	str	r5, [r4, #20]
   39480:	b	393f0 <flatcc_json_printer_float_vector_field@@Base+0x204>

00039484 <flatcc_json_printer_double_vector_field@@Base>:
   39484:	add	r2, r2, #2
   39488:	lsl	r2, r2, #1
   3948c:	ldr	ip, [r1, #8]
   39490:	cmp	ip, r2
   39494:	bxle	lr
   39498:	ldr	ip, [r1, #4]
   3949c:	ldrh	r2, [ip, r2]
   394a0:	cmp	r2, #0
   394a4:	bxeq	lr
   394a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   394ac:	strd	r6, [sp, #8]
   394b0:	strd	r8, [sp, #16]
   394b4:	str	sl, [sp, #24]
   394b8:	str	lr, [sp, #28]
   394bc:	ldr	ip, [r1]
   394c0:	adds	lr, ip, r2
   394c4:	beq	39694 <flatcc_json_printer_double_vector_field@@Base+0x210>
   394c8:	ldr	r4, [r1, #16]
   394cc:	add	r5, r4, #1
   394d0:	str	r5, [r1, #16]
   394d4:	cmp	r4, #0
   394d8:	beq	394f0 <flatcc_json_printer_double_vector_field@@Base+0x6c>
   394dc:	ldr	r1, [r0, #20]
   394e0:	add	r4, r1, #1
   394e4:	str	r4, [r0, #20]
   394e8:	mov	r4, #44	; 0x2c
   394ec:	strb	r4, [r1]
   394f0:	mov	r1, r3
   394f4:	mov	r4, r0
   394f8:	ldr	r3, [ip, r2]
   394fc:	add	r6, lr, r3
   39500:	ldr	r7, [lr, r3]
   39504:	ldr	r2, [sp, #32]
   39508:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3950c:	ldr	r3, [r4, #32]
   39510:	add	r3, r3, #1
   39514:	str	r3, [r4, #32]
   39518:	ldr	r3, [r4, #20]
   3951c:	add	r2, r3, #1
   39520:	str	r2, [r4, #20]
   39524:	mov	r2, #91	; 0x5b
   39528:	strb	r2, [r3]
   3952c:	cmp	r7, #0
   39530:	beq	39674 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
   39534:	ldrb	r3, [r4, #25]
   39538:	cmp	r3, #0
   3953c:	bne	39598 <flatcc_json_printer_double_vector_field@@Base+0x114>
   39540:	ldr	r2, [r4, #20]
   39544:	ldr	r3, [r4, #16]
   39548:	cmp	r2, r3
   3954c:	bcc	39560 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   39550:	ldr	r3, [r4, #44]	; 0x2c
   39554:	mov	r1, #0
   39558:	mov	r0, r4
   3955c:	blx	r3
   39560:	ldr	r0, [r4, #20]
   39564:	vldr	d0, [r6, #4]
   39568:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   3956c:	ldr	r3, [r4, #20]
   39570:	add	r0, r3, r0
   39574:	str	r0, [r4, #20]
   39578:	add	r6, r6, #12
   3957c:	sub	r5, r7, #2
   39580:	cmp	r7, #1
   39584:	beq	39674 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
   39588:	mov	r7, #44	; 0x2c
   3958c:	mov	r8, #0
   39590:	mov	r9, #10
   39594:	b	39618 <flatcc_json_printer_double_vector_field@@Base+0x194>
   39598:	ldr	r3, [r4, #20]
   3959c:	add	r2, r3, #1
   395a0:	str	r2, [r4, #20]
   395a4:	mov	r2, #10
   395a8:	strb	r2, [r3]
   395ac:	mov	r0, r4
   395b0:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   395b4:	b	39560 <flatcc_json_printer_double_vector_field@@Base+0xdc>
   395b8:	ldr	r3, [r4, #20]
   395bc:	add	r2, r3, #1
   395c0:	str	r2, [r4, #20]
   395c4:	strb	r9, [r3]
   395c8:	ldrb	r3, [r4, #25]
   395cc:	ldr	sl, [r4, #32]
   395d0:	mul	sl, sl, r3
   395d4:	ldr	r0, [r4, #20]
   395d8:	add	r3, r0, sl
   395dc:	ldr	r2, [r4, #16]
   395e0:	cmp	r2, r3
   395e4:	bcs	39658 <flatcc_json_printer_double_vector_field@@Base+0x1d4>
   395e8:	mov	r1, sl
   395ec:	mov	r0, r4
   395f0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   395f4:	ldr	r0, [r4, #20]
   395f8:	vldmia	r6!, {d0}
   395fc:	bl	31844 <flatcc_json_parser_struct_as_root@@Base+0x1dbc>
   39600:	ldr	r3, [r4, #20]
   39604:	add	r0, r3, r0
   39608:	str	r0, [r4, #20]
   3960c:	sub	r5, r5, #1
   39610:	cmn	r5, #1
   39614:	beq	39674 <flatcc_json_printer_double_vector_field@@Base+0x1f0>
   39618:	ldr	r3, [r4, #20]
   3961c:	add	r2, r3, #1
   39620:	str	r2, [r4, #20]
   39624:	strb	r7, [r3]
   39628:	ldrb	r3, [r4, #25]
   3962c:	cmp	r3, #0
   39630:	bne	395b8 <flatcc_json_printer_double_vector_field@@Base+0x134>
   39634:	ldr	r2, [r4, #20]
   39638:	ldr	r3, [r4, #16]
   3963c:	cmp	r2, r3
   39640:	bcc	395f4 <flatcc_json_printer_double_vector_field@@Base+0x170>
   39644:	ldr	r3, [r4, #44]	; 0x2c
   39648:	mov	r1, r8
   3964c:	mov	r0, r4
   39650:	blx	r3
   39654:	b	395f4 <flatcc_json_printer_double_vector_field@@Base+0x170>
   39658:	mov	r2, sl
   3965c:	mov	r1, #32
   39660:	bl	1459c <memset@plt>
   39664:	ldr	r3, [r4, #20]
   39668:	add	sl, r3, sl
   3966c:	str	sl, [r4, #20]
   39670:	b	395f4 <flatcc_json_printer_double_vector_field@@Base+0x170>
   39674:	ldrb	r3, [r4, #25]
   39678:	cmp	r3, #0
   3967c:	bne	396ac <flatcc_json_printer_double_vector_field@@Base+0x228>
   39680:	ldr	r3, [r4, #20]
   39684:	add	r2, r3, #1
   39688:	str	r2, [r4, #20]
   3968c:	mov	r2, #93	; 0x5d
   39690:	strb	r2, [r3]
   39694:	ldrd	r4, [sp]
   39698:	ldrd	r6, [sp, #8]
   3969c:	ldrd	r8, [sp, #16]
   396a0:	ldr	sl, [sp, #24]
   396a4:	add	sp, sp, #28
   396a8:	pop	{pc}		; (ldr pc, [sp], #4)
   396ac:	ldr	r3, [r4, #20]
   396b0:	add	r2, r3, #1
   396b4:	str	r2, [r4, #20]
   396b8:	mov	r2, #10
   396bc:	strb	r2, [r3]
   396c0:	ldr	r5, [r4, #32]
   396c4:	sub	r5, r5, #1
   396c8:	str	r5, [r4, #32]
   396cc:	ldrb	r3, [r4, #25]
   396d0:	mul	r5, r5, r3
   396d4:	ldr	r0, [r4, #20]
   396d8:	add	r3, r0, r5
   396dc:	ldr	r2, [r4, #16]
   396e0:	cmp	r2, r3
   396e4:	bcs	396f8 <flatcc_json_printer_double_vector_field@@Base+0x274>
   396e8:	mov	r1, r5
   396ec:	mov	r0, r4
   396f0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   396f4:	b	39680 <flatcc_json_printer_double_vector_field@@Base+0x1fc>
   396f8:	mov	r2, r5
   396fc:	mov	r1, #32
   39700:	bl	1459c <memset@plt>
   39704:	ldr	r3, [r4, #20]
   39708:	add	r5, r3, r5
   3970c:	str	r5, [r4, #20]
   39710:	b	39680 <flatcc_json_printer_double_vector_field@@Base+0x1fc>

00039714 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   39714:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39718:	strd	r6, [sp, #8]
   3971c:	strd	r8, [sp, #16]
   39720:	strd	sl, [sp, #24]
   39724:	str	lr, [sp, #32]
   39728:	sub	sp, sp, #12
   3972c:	mov	r4, r0
   39730:	ldr	r7, [sp, #52]	; 0x34
   39734:	ldrb	r0, [r0, #27]
   39738:	cmp	r0, #0
   3973c:	bne	39838 <flatcc_json_printer_utype_enum_vector_field@@Base+0x124>
   39740:	add	r2, r2, #2
   39744:	lsl	r2, r2, #1
   39748:	ldr	r0, [r1, #8]
   3974c:	cmp	r0, r2
   39750:	ble	39938 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   39754:	ldr	r0, [r1, #4]
   39758:	ldrh	r2, [r0, r2]
   3975c:	cmp	r2, #0
   39760:	beq	39938 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   39764:	ldr	r0, [r1]
   39768:	adds	ip, r0, r2
   3976c:	beq	39938 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   39770:	ldr	lr, [r1, #16]
   39774:	add	r5, lr, #1
   39778:	str	r5, [r1, #16]
   3977c:	cmp	lr, #0
   39780:	beq	39798 <flatcc_json_printer_utype_enum_vector_field@@Base+0x84>
   39784:	ldr	r1, [r4, #20]
   39788:	add	lr, r1, #1
   3978c:	str	lr, [r4, #20]
   39790:	mov	lr, #44	; 0x2c
   39794:	strb	lr, [r1]
   39798:	ldr	r2, [r0, r2]
   3979c:	add	r6, ip, r2
   397a0:	ldr	r8, [ip, r2]
   397a4:	ldr	r2, [sp, #48]	; 0x30
   397a8:	mov	r1, r3
   397ac:	mov	r0, r4
   397b0:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   397b4:	ldr	r3, [r4, #32]
   397b8:	add	r3, r3, #1
   397bc:	str	r3, [r4, #32]
   397c0:	ldr	r3, [r4, #20]
   397c4:	add	r2, r3, #1
   397c8:	str	r2, [r4, #20]
   397cc:	mov	r2, #91	; 0x5b
   397d0:	strb	r2, [r3]
   397d4:	cmp	r8, #0
   397d8:	beq	39918 <flatcc_json_printer_utype_enum_vector_field@@Base+0x204>
   397dc:	ldrb	r3, [r4, #25]
   397e0:	cmp	r3, #0
   397e4:	bne	3984c <flatcc_json_printer_utype_enum_vector_field@@Base+0x138>
   397e8:	ldr	r2, [r4, #20]
   397ec:	ldr	r3, [r4, #16]
   397f0:	cmp	r2, r3
   397f4:	bcc	39808 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf4>
   397f8:	ldr	r3, [r4, #44]	; 0x2c
   397fc:	mov	r1, #0
   39800:	mov	r0, r4
   39804:	blx	r3
   39808:	ldrb	r1, [r6, #4]
   3980c:	mov	r0, r4
   39810:	blx	r7
   39814:	add	r5, r6, #5
   39818:	cmp	r8, #1
   3981c:	beq	39918 <flatcc_json_printer_utype_enum_vector_field@@Base+0x204>
   39820:	add	r8, r8, #4
   39824:	add	r6, r6, r8
   39828:	mov	r8, #44	; 0x2c
   3982c:	mov	r9, #0
   39830:	mov	sl, #10
   39834:	b	398bc <flatcc_json_printer_utype_enum_vector_field@@Base+0x1a8>
   39838:	ldr	r0, [sp, #48]	; 0x30
   3983c:	str	r0, [sp]
   39840:	mov	r0, r4
   39844:	bl	377cc <flatcc_json_printer_utype_vector_field@@Base>
   39848:	b	39938 <flatcc_json_printer_utype_enum_vector_field@@Base+0x224>
   3984c:	ldr	r3, [r4, #20]
   39850:	add	r2, r3, #1
   39854:	str	r2, [r4, #20]
   39858:	mov	r2, #10
   3985c:	strb	r2, [r3]
   39860:	mov	r0, r4
   39864:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   39868:	b	39808 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf4>
   3986c:	ldr	r3, [r4, #20]
   39870:	add	r2, r3, #1
   39874:	str	r2, [r4, #20]
   39878:	strb	sl, [r3]
   3987c:	ldrb	r3, [r4, #25]
   39880:	ldr	fp, [r4, #32]
   39884:	mul	fp, fp, r3
   39888:	ldr	r0, [r4, #20]
   3988c:	add	r3, r0, fp
   39890:	ldr	r2, [r4, #16]
   39894:	cmp	r2, r3
   39898:	bcs	398fc <flatcc_json_printer_utype_enum_vector_field@@Base+0x1e8>
   3989c:	mov	r1, fp
   398a0:	mov	r0, r4
   398a4:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   398a8:	ldrb	r1, [r5], #1
   398ac:	mov	r0, r4
   398b0:	blx	r7
   398b4:	cmp	r6, r5
   398b8:	beq	39918 <flatcc_json_printer_utype_enum_vector_field@@Base+0x204>
   398bc:	ldr	r3, [r4, #20]
   398c0:	add	r2, r3, #1
   398c4:	str	r2, [r4, #20]
   398c8:	strb	r8, [r3]
   398cc:	ldrb	r3, [r4, #25]
   398d0:	cmp	r3, #0
   398d4:	bne	3986c <flatcc_json_printer_utype_enum_vector_field@@Base+0x158>
   398d8:	ldr	r2, [r4, #20]
   398dc:	ldr	r3, [r4, #16]
   398e0:	cmp	r2, r3
   398e4:	bcc	398a8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x194>
   398e8:	ldr	r3, [r4, #44]	; 0x2c
   398ec:	mov	r1, r9
   398f0:	mov	r0, r4
   398f4:	blx	r3
   398f8:	b	398a8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x194>
   398fc:	mov	r2, fp
   39900:	mov	r1, #32
   39904:	bl	1459c <memset@plt>
   39908:	ldr	r3, [r4, #20]
   3990c:	add	fp, r3, fp
   39910:	str	fp, [r4, #20]
   39914:	b	398a8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x194>
   39918:	ldrb	r3, [r4, #25]
   3991c:	cmp	r3, #0
   39920:	bne	39954 <flatcc_json_printer_utype_enum_vector_field@@Base+0x240>
   39924:	ldr	r3, [r4, #20]
   39928:	add	r2, r3, #1
   3992c:	str	r2, [r4, #20]
   39930:	mov	r2, #93	; 0x5d
   39934:	strb	r2, [r3]
   39938:	add	sp, sp, #12
   3993c:	ldrd	r4, [sp]
   39940:	ldrd	r6, [sp, #8]
   39944:	ldrd	r8, [sp, #16]
   39948:	ldrd	sl, [sp, #24]
   3994c:	add	sp, sp, #32
   39950:	pop	{pc}		; (ldr pc, [sp], #4)
   39954:	ldr	r3, [r4, #20]
   39958:	add	r2, r3, #1
   3995c:	str	r2, [r4, #20]
   39960:	mov	r2, #10
   39964:	strb	r2, [r3]
   39968:	ldr	r5, [r4, #32]
   3996c:	sub	r5, r5, #1
   39970:	str	r5, [r4, #32]
   39974:	ldrb	r3, [r4, #25]
   39978:	mul	r5, r5, r3
   3997c:	ldr	r0, [r4, #20]
   39980:	add	r3, r0, r5
   39984:	ldr	r2, [r4, #16]
   39988:	cmp	r2, r3
   3998c:	bcs	399a0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x28c>
   39990:	mov	r1, r5
   39994:	mov	r0, r4
   39998:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3999c:	b	39924 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   399a0:	mov	r2, r5
   399a4:	mov	r1, #32
   399a8:	bl	1459c <memset@plt>
   399ac:	ldr	r3, [r4, #20]
   399b0:	add	r5, r3, r5
   399b4:	str	r5, [r4, #20]
   399b8:	b	39924 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>

000399bc <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   399bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   399c0:	strd	r6, [sp, #8]
   399c4:	strd	r8, [sp, #16]
   399c8:	strd	sl, [sp, #24]
   399cc:	str	lr, [sp, #32]
   399d0:	sub	sp, sp, #12
   399d4:	mov	r4, r0
   399d8:	ldr	r7, [sp, #52]	; 0x34
   399dc:	ldrb	r0, [r0, #27]
   399e0:	cmp	r0, #0
   399e4:	bne	39ae0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x124>
   399e8:	add	r2, r2, #2
   399ec:	lsl	r2, r2, #1
   399f0:	ldr	r0, [r1, #8]
   399f4:	cmp	r0, r2
   399f8:	ble	39be0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   399fc:	ldr	r0, [r1, #4]
   39a00:	ldrh	r2, [r0, r2]
   39a04:	cmp	r2, #0
   39a08:	beq	39be0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   39a0c:	ldr	r0, [r1]
   39a10:	adds	ip, r0, r2
   39a14:	beq	39be0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   39a18:	ldr	lr, [r1, #16]
   39a1c:	add	r5, lr, #1
   39a20:	str	r5, [r1, #16]
   39a24:	cmp	lr, #0
   39a28:	beq	39a40 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x84>
   39a2c:	ldr	r1, [r4, #20]
   39a30:	add	lr, r1, #1
   39a34:	str	lr, [r4, #20]
   39a38:	mov	lr, #44	; 0x2c
   39a3c:	strb	lr, [r1]
   39a40:	ldr	r2, [r0, r2]
   39a44:	add	r6, ip, r2
   39a48:	ldr	r8, [ip, r2]
   39a4c:	ldr	r2, [sp, #48]	; 0x30
   39a50:	mov	r1, r3
   39a54:	mov	r0, r4
   39a58:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   39a5c:	ldr	r3, [r4, #32]
   39a60:	add	r3, r3, #1
   39a64:	str	r3, [r4, #32]
   39a68:	ldr	r3, [r4, #20]
   39a6c:	add	r2, r3, #1
   39a70:	str	r2, [r4, #20]
   39a74:	mov	r2, #91	; 0x5b
   39a78:	strb	r2, [r3]
   39a7c:	cmp	r8, #0
   39a80:	beq	39bc0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x204>
   39a84:	ldrb	r3, [r4, #25]
   39a88:	cmp	r3, #0
   39a8c:	bne	39af4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x138>
   39a90:	ldr	r2, [r4, #20]
   39a94:	ldr	r3, [r4, #16]
   39a98:	cmp	r2, r3
   39a9c:	bcc	39ab0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
   39aa0:	ldr	r3, [r4, #44]	; 0x2c
   39aa4:	mov	r1, #0
   39aa8:	mov	r0, r4
   39aac:	blx	r3
   39ab0:	ldrb	r1, [r6, #4]
   39ab4:	mov	r0, r4
   39ab8:	blx	r7
   39abc:	add	r5, r6, #5
   39ac0:	cmp	r8, #1
   39ac4:	beq	39bc0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x204>
   39ac8:	add	r8, r8, #4
   39acc:	add	r6, r6, r8
   39ad0:	mov	r8, #44	; 0x2c
   39ad4:	mov	r9, #0
   39ad8:	mov	sl, #10
   39adc:	b	39b64 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1a8>
   39ae0:	ldr	r0, [sp, #48]	; 0x30
   39ae4:	str	r0, [sp]
   39ae8:	mov	r0, r4
   39aec:	bl	37a5c <flatcc_json_printer_uint8_vector_field@@Base>
   39af0:	b	39be0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   39af4:	ldr	r3, [r4, #20]
   39af8:	add	r2, r3, #1
   39afc:	str	r2, [r4, #20]
   39b00:	mov	r2, #10
   39b04:	strb	r2, [r3]
   39b08:	mov	r0, r4
   39b0c:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   39b10:	b	39ab0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
   39b14:	ldr	r3, [r4, #20]
   39b18:	add	r2, r3, #1
   39b1c:	str	r2, [r4, #20]
   39b20:	strb	sl, [r3]
   39b24:	ldrb	r3, [r4, #25]
   39b28:	ldr	fp, [r4, #32]
   39b2c:	mul	fp, fp, r3
   39b30:	ldr	r0, [r4, #20]
   39b34:	add	r3, r0, fp
   39b38:	ldr	r2, [r4, #16]
   39b3c:	cmp	r2, r3
   39b40:	bcs	39ba4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1e8>
   39b44:	mov	r1, fp
   39b48:	mov	r0, r4
   39b4c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   39b50:	ldrb	r1, [r5], #1
   39b54:	mov	r0, r4
   39b58:	blx	r7
   39b5c:	cmp	r6, r5
   39b60:	beq	39bc0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x204>
   39b64:	ldr	r3, [r4, #20]
   39b68:	add	r2, r3, #1
   39b6c:	str	r2, [r4, #20]
   39b70:	strb	r8, [r3]
   39b74:	ldrb	r3, [r4, #25]
   39b78:	cmp	r3, #0
   39b7c:	bne	39b14 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x158>
   39b80:	ldr	r2, [r4, #20]
   39b84:	ldr	r3, [r4, #16]
   39b88:	cmp	r2, r3
   39b8c:	bcc	39b50 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   39b90:	ldr	r3, [r4, #44]	; 0x2c
   39b94:	mov	r1, r9
   39b98:	mov	r0, r4
   39b9c:	blx	r3
   39ba0:	b	39b50 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   39ba4:	mov	r2, fp
   39ba8:	mov	r1, #32
   39bac:	bl	1459c <memset@plt>
   39bb0:	ldr	r3, [r4, #20]
   39bb4:	add	fp, r3, fp
   39bb8:	str	fp, [r4, #20]
   39bbc:	b	39b50 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   39bc0:	ldrb	r3, [r4, #25]
   39bc4:	cmp	r3, #0
   39bc8:	bne	39bfc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x240>
   39bcc:	ldr	r3, [r4, #20]
   39bd0:	add	r2, r3, #1
   39bd4:	str	r2, [r4, #20]
   39bd8:	mov	r2, #93	; 0x5d
   39bdc:	strb	r2, [r3]
   39be0:	add	sp, sp, #12
   39be4:	ldrd	r4, [sp]
   39be8:	ldrd	r6, [sp, #8]
   39bec:	ldrd	r8, [sp, #16]
   39bf0:	ldrd	sl, [sp, #24]
   39bf4:	add	sp, sp, #32
   39bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   39bfc:	ldr	r3, [r4, #20]
   39c00:	add	r2, r3, #1
   39c04:	str	r2, [r4, #20]
   39c08:	mov	r2, #10
   39c0c:	strb	r2, [r3]
   39c10:	ldr	r5, [r4, #32]
   39c14:	sub	r5, r5, #1
   39c18:	str	r5, [r4, #32]
   39c1c:	ldrb	r3, [r4, #25]
   39c20:	mul	r5, r5, r3
   39c24:	ldr	r0, [r4, #20]
   39c28:	add	r3, r0, r5
   39c2c:	ldr	r2, [r4, #16]
   39c30:	cmp	r2, r3
   39c34:	bcs	39c48 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x28c>
   39c38:	mov	r1, r5
   39c3c:	mov	r0, r4
   39c40:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   39c44:	b	39bcc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   39c48:	mov	r2, r5
   39c4c:	mov	r1, #32
   39c50:	bl	1459c <memset@plt>
   39c54:	ldr	r3, [r4, #20]
   39c58:	add	r5, r3, r5
   39c5c:	str	r5, [r4, #20]
   39c60:	b	39bcc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>

00039c64 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   39c64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39c68:	strd	r6, [sp, #8]
   39c6c:	strd	r8, [sp, #16]
   39c70:	strd	sl, [sp, #24]
   39c74:	str	lr, [sp, #32]
   39c78:	sub	sp, sp, #12
   39c7c:	mov	r4, r0
   39c80:	ldr	r7, [sp, #52]	; 0x34
   39c84:	ldrb	r0, [r0, #27]
   39c88:	cmp	r0, #0
   39c8c:	bne	39d84 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x120>
   39c90:	add	r2, r2, #2
   39c94:	lsl	r2, r2, #1
   39c98:	ldr	r0, [r1, #8]
   39c9c:	cmp	r0, r2
   39ca0:	ble	39e88 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x224>
   39ca4:	ldr	r0, [r1, #4]
   39ca8:	ldrh	r2, [r0, r2]
   39cac:	cmp	r2, #0
   39cb0:	beq	39e88 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x224>
   39cb4:	ldr	r0, [r1]
   39cb8:	adds	ip, r0, r2
   39cbc:	beq	39e88 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x224>
   39cc0:	ldr	lr, [r1, #16]
   39cc4:	add	r5, lr, #1
   39cc8:	str	r5, [r1, #16]
   39ccc:	cmp	lr, #0
   39cd0:	beq	39ce8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x84>
   39cd4:	ldr	r1, [r4, #20]
   39cd8:	add	lr, r1, #1
   39cdc:	str	lr, [r4, #20]
   39ce0:	mov	lr, #44	; 0x2c
   39ce4:	strb	lr, [r1]
   39ce8:	ldr	r2, [r0, r2]
   39cec:	add	r6, ip, r2
   39cf0:	ldr	r8, [ip, r2]
   39cf4:	ldr	r2, [sp, #48]	; 0x30
   39cf8:	mov	r1, r3
   39cfc:	mov	r0, r4
   39d00:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   39d04:	ldr	r3, [r4, #32]
   39d08:	add	r3, r3, #1
   39d0c:	str	r3, [r4, #32]
   39d10:	ldr	r3, [r4, #20]
   39d14:	add	r2, r3, #1
   39d18:	str	r2, [r4, #20]
   39d1c:	mov	r2, #91	; 0x5b
   39d20:	strb	r2, [r3]
   39d24:	cmp	r8, #0
   39d28:	beq	39e68 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>
   39d2c:	ldrb	r3, [r4, #25]
   39d30:	cmp	r3, #0
   39d34:	bne	39d98 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x134>
   39d38:	ldr	r2, [r4, #20]
   39d3c:	ldr	r3, [r4, #16]
   39d40:	cmp	r2, r3
   39d44:	bcc	39d58 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   39d48:	ldr	r3, [r4, #44]	; 0x2c
   39d4c:	mov	r1, #0
   39d50:	mov	r0, r4
   39d54:	blx	r3
   39d58:	ldrh	r1, [r6, #4]
   39d5c:	mov	r0, r4
   39d60:	blx	r7
   39d64:	add	r6, r6, #6
   39d68:	sub	r5, r8, #2
   39d6c:	cmp	r8, #1
   39d70:	beq	39e68 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>
   39d74:	mov	r8, #44	; 0x2c
   39d78:	mov	r9, #0
   39d7c:	mov	sl, #10
   39d80:	b	39e0c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a8>
   39d84:	ldr	r0, [sp, #48]	; 0x30
   39d88:	str	r0, [sp]
   39d8c:	mov	r0, r4
   39d90:	bl	37cec <flatcc_json_printer_uint16_vector_field@@Base>
   39d94:	b	39e88 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x224>
   39d98:	ldr	r3, [r4, #20]
   39d9c:	add	r2, r3, #1
   39da0:	str	r2, [r4, #20]
   39da4:	mov	r2, #10
   39da8:	strb	r2, [r3]
   39dac:	mov	r0, r4
   39db0:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   39db4:	b	39d58 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   39db8:	ldr	r3, [r4, #20]
   39dbc:	add	r2, r3, #1
   39dc0:	str	r2, [r4, #20]
   39dc4:	strb	sl, [r3]
   39dc8:	ldrb	r3, [r4, #25]
   39dcc:	ldr	fp, [r4, #32]
   39dd0:	mul	fp, fp, r3
   39dd4:	ldr	r0, [r4, #20]
   39dd8:	add	r3, r0, fp
   39ddc:	ldr	r2, [r4, #16]
   39de0:	cmp	r2, r3
   39de4:	bcs	39e4c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e8>
   39de8:	mov	r1, fp
   39dec:	mov	r0, r4
   39df0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   39df4:	ldrh	r1, [r6], #2
   39df8:	mov	r0, r4
   39dfc:	blx	r7
   39e00:	sub	r5, r5, #1
   39e04:	cmn	r5, #1
   39e08:	beq	39e68 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>
   39e0c:	ldr	r3, [r4, #20]
   39e10:	add	r2, r3, #1
   39e14:	str	r2, [r4, #20]
   39e18:	strb	r8, [r3]
   39e1c:	ldrb	r3, [r4, #25]
   39e20:	cmp	r3, #0
   39e24:	bne	39db8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x154>
   39e28:	ldr	r2, [r4, #20]
   39e2c:	ldr	r3, [r4, #16]
   39e30:	cmp	r2, r3
   39e34:	bcc	39df4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x190>
   39e38:	ldr	r3, [r4, #44]	; 0x2c
   39e3c:	mov	r1, r9
   39e40:	mov	r0, r4
   39e44:	blx	r3
   39e48:	b	39df4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x190>
   39e4c:	mov	r2, fp
   39e50:	mov	r1, #32
   39e54:	bl	1459c <memset@plt>
   39e58:	ldr	r3, [r4, #20]
   39e5c:	add	fp, r3, fp
   39e60:	str	fp, [r4, #20]
   39e64:	b	39df4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x190>
   39e68:	ldrb	r3, [r4, #25]
   39e6c:	cmp	r3, #0
   39e70:	bne	39ea4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x240>
   39e74:	ldr	r3, [r4, #20]
   39e78:	add	r2, r3, #1
   39e7c:	str	r2, [r4, #20]
   39e80:	mov	r2, #93	; 0x5d
   39e84:	strb	r2, [r3]
   39e88:	add	sp, sp, #12
   39e8c:	ldrd	r4, [sp]
   39e90:	ldrd	r6, [sp, #8]
   39e94:	ldrd	r8, [sp, #16]
   39e98:	ldrd	sl, [sp, #24]
   39e9c:	add	sp, sp, #32
   39ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   39ea4:	ldr	r3, [r4, #20]
   39ea8:	add	r2, r3, #1
   39eac:	str	r2, [r4, #20]
   39eb0:	mov	r2, #10
   39eb4:	strb	r2, [r3]
   39eb8:	ldr	r5, [r4, #32]
   39ebc:	sub	r5, r5, #1
   39ec0:	str	r5, [r4, #32]
   39ec4:	ldrb	r3, [r4, #25]
   39ec8:	mul	r5, r5, r3
   39ecc:	ldr	r0, [r4, #20]
   39ed0:	add	r3, r0, r5
   39ed4:	ldr	r2, [r4, #16]
   39ed8:	cmp	r2, r3
   39edc:	bcs	39ef0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x28c>
   39ee0:	mov	r1, r5
   39ee4:	mov	r0, r4
   39ee8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   39eec:	b	39e74 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x210>
   39ef0:	mov	r2, r5
   39ef4:	mov	r1, #32
   39ef8:	bl	1459c <memset@plt>
   39efc:	ldr	r3, [r4, #20]
   39f00:	add	r5, r3, r5
   39f04:	str	r5, [r4, #20]
   39f08:	b	39e74 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x210>

00039f0c <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   39f0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   39f10:	strd	r6, [sp, #8]
   39f14:	strd	r8, [sp, #16]
   39f18:	strd	sl, [sp, #24]
   39f1c:	str	lr, [sp, #32]
   39f20:	sub	sp, sp, #12
   39f24:	mov	r4, r0
   39f28:	ldr	r7, [sp, #52]	; 0x34
   39f2c:	ldrb	r0, [r0, #27]
   39f30:	cmp	r0, #0
   39f34:	bne	3a02c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x120>
   39f38:	add	r2, r2, #2
   39f3c:	lsl	r2, r2, #1
   39f40:	ldr	r0, [r1, #8]
   39f44:	cmp	r0, r2
   39f48:	ble	3a130 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x224>
   39f4c:	ldr	r0, [r1, #4]
   39f50:	ldrh	r2, [r0, r2]
   39f54:	cmp	r2, #0
   39f58:	beq	3a130 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x224>
   39f5c:	ldr	r0, [r1]
   39f60:	adds	ip, r0, r2
   39f64:	beq	3a130 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x224>
   39f68:	ldr	lr, [r1, #16]
   39f6c:	add	r5, lr, #1
   39f70:	str	r5, [r1, #16]
   39f74:	cmp	lr, #0
   39f78:	beq	39f90 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x84>
   39f7c:	ldr	r1, [r4, #20]
   39f80:	add	lr, r1, #1
   39f84:	str	lr, [r4, #20]
   39f88:	mov	lr, #44	; 0x2c
   39f8c:	strb	lr, [r1]
   39f90:	ldr	r2, [r0, r2]
   39f94:	add	r6, ip, r2
   39f98:	ldr	r8, [ip, r2]
   39f9c:	ldr	r2, [sp, #48]	; 0x30
   39fa0:	mov	r1, r3
   39fa4:	mov	r0, r4
   39fa8:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   39fac:	ldr	r3, [r4, #32]
   39fb0:	add	r3, r3, #1
   39fb4:	str	r3, [r4, #32]
   39fb8:	ldr	r3, [r4, #20]
   39fbc:	add	r2, r3, #1
   39fc0:	str	r2, [r4, #20]
   39fc4:	mov	r2, #91	; 0x5b
   39fc8:	strb	r2, [r3]
   39fcc:	cmp	r8, #0
   39fd0:	beq	3a110 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>
   39fd4:	ldrb	r3, [r4, #25]
   39fd8:	cmp	r3, #0
   39fdc:	bne	3a040 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x134>
   39fe0:	ldr	r2, [r4, #20]
   39fe4:	ldr	r3, [r4, #16]
   39fe8:	cmp	r2, r3
   39fec:	bcc	3a000 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   39ff0:	ldr	r3, [r4, #44]	; 0x2c
   39ff4:	mov	r1, #0
   39ff8:	mov	r0, r4
   39ffc:	blx	r3
   3a000:	ldr	r1, [r6, #4]
   3a004:	mov	r0, r4
   3a008:	blx	r7
   3a00c:	add	r6, r6, #8
   3a010:	sub	r5, r8, #2
   3a014:	cmp	r8, #1
   3a018:	beq	3a110 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>
   3a01c:	mov	r8, #44	; 0x2c
   3a020:	mov	r9, #0
   3a024:	mov	sl, #10
   3a028:	b	3a0b4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1a8>
   3a02c:	ldr	r0, [sp, #48]	; 0x30
   3a030:	str	r0, [sp]
   3a034:	mov	r0, r4
   3a038:	bl	37fbc <flatcc_json_printer_uint32_vector_field@@Base>
   3a03c:	b	3a130 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x224>
   3a040:	ldr	r3, [r4, #20]
   3a044:	add	r2, r3, #1
   3a048:	str	r2, [r4, #20]
   3a04c:	mov	r2, #10
   3a050:	strb	r2, [r3]
   3a054:	mov	r0, r4
   3a058:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3a05c:	b	3a000 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   3a060:	ldr	r3, [r4, #20]
   3a064:	add	r2, r3, #1
   3a068:	str	r2, [r4, #20]
   3a06c:	strb	sl, [r3]
   3a070:	ldrb	r3, [r4, #25]
   3a074:	ldr	fp, [r4, #32]
   3a078:	mul	fp, fp, r3
   3a07c:	ldr	r0, [r4, #20]
   3a080:	add	r3, r0, fp
   3a084:	ldr	r2, [r4, #16]
   3a088:	cmp	r2, r3
   3a08c:	bcs	3a0f4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1e8>
   3a090:	mov	r1, fp
   3a094:	mov	r0, r4
   3a098:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3a09c:	ldr	r1, [r6], #4
   3a0a0:	mov	r0, r4
   3a0a4:	blx	r7
   3a0a8:	sub	r5, r5, #1
   3a0ac:	cmn	r5, #1
   3a0b0:	beq	3a110 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>
   3a0b4:	ldr	r3, [r4, #20]
   3a0b8:	add	r2, r3, #1
   3a0bc:	str	r2, [r4, #20]
   3a0c0:	strb	r8, [r3]
   3a0c4:	ldrb	r3, [r4, #25]
   3a0c8:	cmp	r3, #0
   3a0cc:	bne	3a060 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x154>
   3a0d0:	ldr	r2, [r4, #20]
   3a0d4:	ldr	r3, [r4, #16]
   3a0d8:	cmp	r2, r3
   3a0dc:	bcc	3a09c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
   3a0e0:	ldr	r3, [r4, #44]	; 0x2c
   3a0e4:	mov	r1, r9
   3a0e8:	mov	r0, r4
   3a0ec:	blx	r3
   3a0f0:	b	3a09c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
   3a0f4:	mov	r2, fp
   3a0f8:	mov	r1, #32
   3a0fc:	bl	1459c <memset@plt>
   3a100:	ldr	r3, [r4, #20]
   3a104:	add	fp, r3, fp
   3a108:	str	fp, [r4, #20]
   3a10c:	b	3a09c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
   3a110:	ldrb	r3, [r4, #25]
   3a114:	cmp	r3, #0
   3a118:	bne	3a14c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x240>
   3a11c:	ldr	r3, [r4, #20]
   3a120:	add	r2, r3, #1
   3a124:	str	r2, [r4, #20]
   3a128:	mov	r2, #93	; 0x5d
   3a12c:	strb	r2, [r3]
   3a130:	add	sp, sp, #12
   3a134:	ldrd	r4, [sp]
   3a138:	ldrd	r6, [sp, #8]
   3a13c:	ldrd	r8, [sp, #16]
   3a140:	ldrd	sl, [sp, #24]
   3a144:	add	sp, sp, #32
   3a148:	pop	{pc}		; (ldr pc, [sp], #4)
   3a14c:	ldr	r3, [r4, #20]
   3a150:	add	r2, r3, #1
   3a154:	str	r2, [r4, #20]
   3a158:	mov	r2, #10
   3a15c:	strb	r2, [r3]
   3a160:	ldr	r5, [r4, #32]
   3a164:	sub	r5, r5, #1
   3a168:	str	r5, [r4, #32]
   3a16c:	ldrb	r3, [r4, #25]
   3a170:	mul	r5, r5, r3
   3a174:	ldr	r0, [r4, #20]
   3a178:	add	r3, r0, r5
   3a17c:	ldr	r2, [r4, #16]
   3a180:	cmp	r2, r3
   3a184:	bcs	3a198 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x28c>
   3a188:	mov	r1, r5
   3a18c:	mov	r0, r4
   3a190:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3a194:	b	3a11c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x210>
   3a198:	mov	r2, r5
   3a19c:	mov	r1, #32
   3a1a0:	bl	1459c <memset@plt>
   3a1a4:	ldr	r3, [r4, #20]
   3a1a8:	add	r5, r3, r5
   3a1ac:	str	r5, [r4, #20]
   3a1b0:	b	3a11c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x210>

0003a1b4 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3a1b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a1b8:	strd	r6, [sp, #8]
   3a1bc:	strd	r8, [sp, #16]
   3a1c0:	strd	sl, [sp, #24]
   3a1c4:	str	lr, [sp, #32]
   3a1c8:	sub	sp, sp, #12
   3a1cc:	mov	r4, r0
   3a1d0:	ldr	r7, [sp, #52]	; 0x34
   3a1d4:	ldrb	r0, [r0, #27]
   3a1d8:	cmp	r0, #0
   3a1dc:	bne	3a2d4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x120>
   3a1e0:	add	r2, r2, #2
   3a1e4:	lsl	r2, r2, #1
   3a1e8:	ldr	r0, [r1, #8]
   3a1ec:	cmp	r0, r2
   3a1f0:	ble	3a3d8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x224>
   3a1f4:	ldr	r0, [r1, #4]
   3a1f8:	ldrh	r2, [r0, r2]
   3a1fc:	cmp	r2, #0
   3a200:	beq	3a3d8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x224>
   3a204:	ldr	r0, [r1]
   3a208:	adds	ip, r0, r2
   3a20c:	beq	3a3d8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x224>
   3a210:	ldr	lr, [r1, #16]
   3a214:	add	r5, lr, #1
   3a218:	str	r5, [r1, #16]
   3a21c:	cmp	lr, #0
   3a220:	beq	3a238 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x84>
   3a224:	ldr	r1, [r4, #20]
   3a228:	add	lr, r1, #1
   3a22c:	str	lr, [r4, #20]
   3a230:	mov	lr, #44	; 0x2c
   3a234:	strb	lr, [r1]
   3a238:	ldr	r2, [r0, r2]
   3a23c:	add	r6, ip, r2
   3a240:	ldr	r8, [ip, r2]
   3a244:	ldr	r2, [sp, #48]	; 0x30
   3a248:	mov	r1, r3
   3a24c:	mov	r0, r4
   3a250:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3a254:	ldr	r3, [r4, #32]
   3a258:	add	r3, r3, #1
   3a25c:	str	r3, [r4, #32]
   3a260:	ldr	r3, [r4, #20]
   3a264:	add	r2, r3, #1
   3a268:	str	r2, [r4, #20]
   3a26c:	mov	r2, #91	; 0x5b
   3a270:	strb	r2, [r3]
   3a274:	cmp	r8, #0
   3a278:	beq	3a3b8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>
   3a27c:	ldrb	r3, [r4, #25]
   3a280:	cmp	r3, #0
   3a284:	bne	3a2e8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x134>
   3a288:	ldr	r2, [r4, #20]
   3a28c:	ldr	r3, [r4, #16]
   3a290:	cmp	r2, r3
   3a294:	bcc	3a2a8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3a298:	ldr	r3, [r4, #44]	; 0x2c
   3a29c:	mov	r1, #0
   3a2a0:	mov	r0, r4
   3a2a4:	blx	r3
   3a2a8:	ldrd	r2, [r6, #4]
   3a2ac:	mov	r0, r4
   3a2b0:	blx	r7
   3a2b4:	add	r6, r6, #12
   3a2b8:	sub	r5, r8, #2
   3a2bc:	cmp	r8, #1
   3a2c0:	beq	3a3b8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>
   3a2c4:	mov	r8, #44	; 0x2c
   3a2c8:	mov	r9, #0
   3a2cc:	mov	sl, #10
   3a2d0:	b	3a35c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a8>
   3a2d4:	ldr	r0, [sp, #48]	; 0x30
   3a2d8:	str	r0, [sp]
   3a2dc:	mov	r0, r4
   3a2e0:	bl	3824c <flatcc_json_printer_uint64_vector_field@@Base>
   3a2e4:	b	3a3d8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x224>
   3a2e8:	ldr	r3, [r4, #20]
   3a2ec:	add	r2, r3, #1
   3a2f0:	str	r2, [r4, #20]
   3a2f4:	mov	r2, #10
   3a2f8:	strb	r2, [r3]
   3a2fc:	mov	r0, r4
   3a300:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3a304:	b	3a2a8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   3a308:	ldr	r3, [r4, #20]
   3a30c:	add	r2, r3, #1
   3a310:	str	r2, [r4, #20]
   3a314:	strb	sl, [r3]
   3a318:	ldrb	r3, [r4, #25]
   3a31c:	ldr	fp, [r4, #32]
   3a320:	mul	fp, fp, r3
   3a324:	ldr	r0, [r4, #20]
   3a328:	add	r3, r0, fp
   3a32c:	ldr	r2, [r4, #16]
   3a330:	cmp	r2, r3
   3a334:	bcs	3a39c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e8>
   3a338:	mov	r1, fp
   3a33c:	mov	r0, r4
   3a340:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3a344:	ldrd	r2, [r6], #8
   3a348:	mov	r0, r4
   3a34c:	blx	r7
   3a350:	sub	r5, r5, #1
   3a354:	cmn	r5, #1
   3a358:	beq	3a3b8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>
   3a35c:	ldr	r3, [r4, #20]
   3a360:	add	r2, r3, #1
   3a364:	str	r2, [r4, #20]
   3a368:	strb	r8, [r3]
   3a36c:	ldrb	r3, [r4, #25]
   3a370:	cmp	r3, #0
   3a374:	bne	3a308 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x154>
   3a378:	ldr	r2, [r4, #20]
   3a37c:	ldr	r3, [r4, #16]
   3a380:	cmp	r2, r3
   3a384:	bcc	3a344 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   3a388:	ldr	r3, [r4, #44]	; 0x2c
   3a38c:	mov	r1, r9
   3a390:	mov	r0, r4
   3a394:	blx	r3
   3a398:	b	3a344 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   3a39c:	mov	r2, fp
   3a3a0:	mov	r1, #32
   3a3a4:	bl	1459c <memset@plt>
   3a3a8:	ldr	r3, [r4, #20]
   3a3ac:	add	fp, r3, fp
   3a3b0:	str	fp, [r4, #20]
   3a3b4:	b	3a344 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   3a3b8:	ldrb	r3, [r4, #25]
   3a3bc:	cmp	r3, #0
   3a3c0:	bne	3a3f4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x240>
   3a3c4:	ldr	r3, [r4, #20]
   3a3c8:	add	r2, r3, #1
   3a3cc:	str	r2, [r4, #20]
   3a3d0:	mov	r2, #93	; 0x5d
   3a3d4:	strb	r2, [r3]
   3a3d8:	add	sp, sp, #12
   3a3dc:	ldrd	r4, [sp]
   3a3e0:	ldrd	r6, [sp, #8]
   3a3e4:	ldrd	r8, [sp, #16]
   3a3e8:	ldrd	sl, [sp, #24]
   3a3ec:	add	sp, sp, #32
   3a3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   3a3f4:	ldr	r3, [r4, #20]
   3a3f8:	add	r2, r3, #1
   3a3fc:	str	r2, [r4, #20]
   3a400:	mov	r2, #10
   3a404:	strb	r2, [r3]
   3a408:	ldr	r5, [r4, #32]
   3a40c:	sub	r5, r5, #1
   3a410:	str	r5, [r4, #32]
   3a414:	ldrb	r3, [r4, #25]
   3a418:	mul	r5, r5, r3
   3a41c:	ldr	r0, [r4, #20]
   3a420:	add	r3, r0, r5
   3a424:	ldr	r2, [r4, #16]
   3a428:	cmp	r2, r3
   3a42c:	bcs	3a440 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x28c>
   3a430:	mov	r1, r5
   3a434:	mov	r0, r4
   3a438:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3a43c:	b	3a3c4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x210>
   3a440:	mov	r2, r5
   3a444:	mov	r1, #32
   3a448:	bl	1459c <memset@plt>
   3a44c:	ldr	r3, [r4, #20]
   3a450:	add	r5, r3, r5
   3a454:	str	r5, [r4, #20]
   3a458:	b	3a3c4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x210>

0003a45c <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3a45c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a460:	strd	r6, [sp, #8]
   3a464:	strd	r8, [sp, #16]
   3a468:	strd	sl, [sp, #24]
   3a46c:	str	lr, [sp, #32]
   3a470:	sub	sp, sp, #12
   3a474:	mov	r4, r0
   3a478:	ldr	r7, [sp, #52]	; 0x34
   3a47c:	ldrb	r0, [r0, #27]
   3a480:	cmp	r0, #0
   3a484:	bne	3a580 <flatcc_json_printer_int8_enum_vector_field@@Base+0x124>
   3a488:	add	r2, r2, #2
   3a48c:	lsl	r2, r2, #1
   3a490:	ldr	r0, [r1, #8]
   3a494:	cmp	r0, r2
   3a498:	ble	3a680 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3a49c:	ldr	r0, [r1, #4]
   3a4a0:	ldrh	r2, [r0, r2]
   3a4a4:	cmp	r2, #0
   3a4a8:	beq	3a680 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3a4ac:	ldr	r0, [r1]
   3a4b0:	adds	ip, r0, r2
   3a4b4:	beq	3a680 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3a4b8:	ldr	lr, [r1, #16]
   3a4bc:	add	r5, lr, #1
   3a4c0:	str	r5, [r1, #16]
   3a4c4:	cmp	lr, #0
   3a4c8:	beq	3a4e0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x84>
   3a4cc:	ldr	r1, [r4, #20]
   3a4d0:	add	lr, r1, #1
   3a4d4:	str	lr, [r4, #20]
   3a4d8:	mov	lr, #44	; 0x2c
   3a4dc:	strb	lr, [r1]
   3a4e0:	ldr	r2, [r0, r2]
   3a4e4:	add	r6, ip, r2
   3a4e8:	ldr	r8, [ip, r2]
   3a4ec:	ldr	r2, [sp, #48]	; 0x30
   3a4f0:	mov	r1, r3
   3a4f4:	mov	r0, r4
   3a4f8:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3a4fc:	ldr	r3, [r4, #32]
   3a500:	add	r3, r3, #1
   3a504:	str	r3, [r4, #32]
   3a508:	ldr	r3, [r4, #20]
   3a50c:	add	r2, r3, #1
   3a510:	str	r2, [r4, #20]
   3a514:	mov	r2, #91	; 0x5b
   3a518:	strb	r2, [r3]
   3a51c:	cmp	r8, #0
   3a520:	beq	3a660 <flatcc_json_printer_int8_enum_vector_field@@Base+0x204>
   3a524:	ldrb	r3, [r4, #25]
   3a528:	cmp	r3, #0
   3a52c:	bne	3a594 <flatcc_json_printer_int8_enum_vector_field@@Base+0x138>
   3a530:	ldr	r2, [r4, #20]
   3a534:	ldr	r3, [r4, #16]
   3a538:	cmp	r2, r3
   3a53c:	bcc	3a550 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
   3a540:	ldr	r3, [r4, #44]	; 0x2c
   3a544:	mov	r1, #0
   3a548:	mov	r0, r4
   3a54c:	blx	r3
   3a550:	ldrsb	r1, [r6, #4]
   3a554:	mov	r0, r4
   3a558:	blx	r7
   3a55c:	add	r5, r6, #5
   3a560:	cmp	r8, #1
   3a564:	beq	3a660 <flatcc_json_printer_int8_enum_vector_field@@Base+0x204>
   3a568:	add	r8, r8, #4
   3a56c:	add	r6, r6, r8
   3a570:	mov	r8, #44	; 0x2c
   3a574:	mov	r9, #0
   3a578:	mov	sl, #10
   3a57c:	b	3a604 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1a8>
   3a580:	ldr	r0, [sp, #48]	; 0x30
   3a584:	str	r0, [sp]
   3a588:	mov	r0, r4
   3a58c:	bl	384dc <flatcc_json_printer_int8_vector_field@@Base>
   3a590:	b	3a680 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3a594:	ldr	r3, [r4, #20]
   3a598:	add	r2, r3, #1
   3a59c:	str	r2, [r4, #20]
   3a5a0:	mov	r2, #10
   3a5a4:	strb	r2, [r3]
   3a5a8:	mov	r0, r4
   3a5ac:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3a5b0:	b	3a550 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
   3a5b4:	ldr	r3, [r4, #20]
   3a5b8:	add	r2, r3, #1
   3a5bc:	str	r2, [r4, #20]
   3a5c0:	strb	sl, [r3]
   3a5c4:	ldrb	r3, [r4, #25]
   3a5c8:	ldr	fp, [r4, #32]
   3a5cc:	mul	fp, fp, r3
   3a5d0:	ldr	r0, [r4, #20]
   3a5d4:	add	r3, r0, fp
   3a5d8:	ldr	r2, [r4, #16]
   3a5dc:	cmp	r2, r3
   3a5e0:	bcs	3a644 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1e8>
   3a5e4:	mov	r1, fp
   3a5e8:	mov	r0, r4
   3a5ec:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3a5f0:	ldrsb	r1, [r5], #1
   3a5f4:	mov	r0, r4
   3a5f8:	blx	r7
   3a5fc:	cmp	r6, r5
   3a600:	beq	3a660 <flatcc_json_printer_int8_enum_vector_field@@Base+0x204>
   3a604:	ldr	r3, [r4, #20]
   3a608:	add	r2, r3, #1
   3a60c:	str	r2, [r4, #20]
   3a610:	strb	r8, [r3]
   3a614:	ldrb	r3, [r4, #25]
   3a618:	cmp	r3, #0
   3a61c:	bne	3a5b4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x158>
   3a620:	ldr	r2, [r4, #20]
   3a624:	ldr	r3, [r4, #16]
   3a628:	cmp	r2, r3
   3a62c:	bcc	3a5f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   3a630:	ldr	r3, [r4, #44]	; 0x2c
   3a634:	mov	r1, r9
   3a638:	mov	r0, r4
   3a63c:	blx	r3
   3a640:	b	3a5f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   3a644:	mov	r2, fp
   3a648:	mov	r1, #32
   3a64c:	bl	1459c <memset@plt>
   3a650:	ldr	r3, [r4, #20]
   3a654:	add	fp, r3, fp
   3a658:	str	fp, [r4, #20]
   3a65c:	b	3a5f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   3a660:	ldrb	r3, [r4, #25]
   3a664:	cmp	r3, #0
   3a668:	bne	3a69c <flatcc_json_printer_int8_enum_vector_field@@Base+0x240>
   3a66c:	ldr	r3, [r4, #20]
   3a670:	add	r2, r3, #1
   3a674:	str	r2, [r4, #20]
   3a678:	mov	r2, #93	; 0x5d
   3a67c:	strb	r2, [r3]
   3a680:	add	sp, sp, #12
   3a684:	ldrd	r4, [sp]
   3a688:	ldrd	r6, [sp, #8]
   3a68c:	ldrd	r8, [sp, #16]
   3a690:	ldrd	sl, [sp, #24]
   3a694:	add	sp, sp, #32
   3a698:	pop	{pc}		; (ldr pc, [sp], #4)
   3a69c:	ldr	r3, [r4, #20]
   3a6a0:	add	r2, r3, #1
   3a6a4:	str	r2, [r4, #20]
   3a6a8:	mov	r2, #10
   3a6ac:	strb	r2, [r3]
   3a6b0:	ldr	r5, [r4, #32]
   3a6b4:	sub	r5, r5, #1
   3a6b8:	str	r5, [r4, #32]
   3a6bc:	ldrb	r3, [r4, #25]
   3a6c0:	mul	r5, r5, r3
   3a6c4:	ldr	r0, [r4, #20]
   3a6c8:	add	r3, r0, r5
   3a6cc:	ldr	r2, [r4, #16]
   3a6d0:	cmp	r2, r3
   3a6d4:	bcs	3a6e8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x28c>
   3a6d8:	mov	r1, r5
   3a6dc:	mov	r0, r4
   3a6e0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3a6e4:	b	3a66c <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   3a6e8:	mov	r2, r5
   3a6ec:	mov	r1, #32
   3a6f0:	bl	1459c <memset@plt>
   3a6f4:	ldr	r3, [r4, #20]
   3a6f8:	add	r5, r3, r5
   3a6fc:	str	r5, [r4, #20]
   3a700:	b	3a66c <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>

0003a704 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3a704:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a708:	strd	r6, [sp, #8]
   3a70c:	strd	r8, [sp, #16]
   3a710:	strd	sl, [sp, #24]
   3a714:	str	lr, [sp, #32]
   3a718:	sub	sp, sp, #12
   3a71c:	mov	r4, r0
   3a720:	ldr	r7, [sp, #52]	; 0x34
   3a724:	ldrb	r0, [r0, #27]
   3a728:	cmp	r0, #0
   3a72c:	bne	3a824 <flatcc_json_printer_int16_enum_vector_field@@Base+0x120>
   3a730:	add	r2, r2, #2
   3a734:	lsl	r2, r2, #1
   3a738:	ldr	r0, [r1, #8]
   3a73c:	cmp	r0, r2
   3a740:	ble	3a928 <flatcc_json_printer_int16_enum_vector_field@@Base+0x224>
   3a744:	ldr	r0, [r1, #4]
   3a748:	ldrh	r2, [r0, r2]
   3a74c:	cmp	r2, #0
   3a750:	beq	3a928 <flatcc_json_printer_int16_enum_vector_field@@Base+0x224>
   3a754:	ldr	r0, [r1]
   3a758:	adds	ip, r0, r2
   3a75c:	beq	3a928 <flatcc_json_printer_int16_enum_vector_field@@Base+0x224>
   3a760:	ldr	lr, [r1, #16]
   3a764:	add	r5, lr, #1
   3a768:	str	r5, [r1, #16]
   3a76c:	cmp	lr, #0
   3a770:	beq	3a788 <flatcc_json_printer_int16_enum_vector_field@@Base+0x84>
   3a774:	ldr	r1, [r4, #20]
   3a778:	add	lr, r1, #1
   3a77c:	str	lr, [r4, #20]
   3a780:	mov	lr, #44	; 0x2c
   3a784:	strb	lr, [r1]
   3a788:	ldr	r2, [r0, r2]
   3a78c:	add	r6, ip, r2
   3a790:	ldr	r8, [ip, r2]
   3a794:	ldr	r2, [sp, #48]	; 0x30
   3a798:	mov	r1, r3
   3a79c:	mov	r0, r4
   3a7a0:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3a7a4:	ldr	r3, [r4, #32]
   3a7a8:	add	r3, r3, #1
   3a7ac:	str	r3, [r4, #32]
   3a7b0:	ldr	r3, [r4, #20]
   3a7b4:	add	r2, r3, #1
   3a7b8:	str	r2, [r4, #20]
   3a7bc:	mov	r2, #91	; 0x5b
   3a7c0:	strb	r2, [r3]
   3a7c4:	cmp	r8, #0
   3a7c8:	beq	3a908 <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>
   3a7cc:	ldrb	r3, [r4, #25]
   3a7d0:	cmp	r3, #0
   3a7d4:	bne	3a838 <flatcc_json_printer_int16_enum_vector_field@@Base+0x134>
   3a7d8:	ldr	r2, [r4, #20]
   3a7dc:	ldr	r3, [r4, #16]
   3a7e0:	cmp	r2, r3
   3a7e4:	bcc	3a7f8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3a7e8:	ldr	r3, [r4, #44]	; 0x2c
   3a7ec:	mov	r1, #0
   3a7f0:	mov	r0, r4
   3a7f4:	blx	r3
   3a7f8:	ldrsh	r1, [r6, #4]
   3a7fc:	mov	r0, r4
   3a800:	blx	r7
   3a804:	add	r6, r6, #6
   3a808:	sub	r5, r8, #2
   3a80c:	cmp	r8, #1
   3a810:	beq	3a908 <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>
   3a814:	mov	r8, #44	; 0x2c
   3a818:	mov	r9, #0
   3a81c:	mov	sl, #10
   3a820:	b	3a8ac <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a8>
   3a824:	ldr	r0, [sp, #48]	; 0x30
   3a828:	str	r0, [sp]
   3a82c:	mov	r0, r4
   3a830:	bl	3876c <flatcc_json_printer_int16_vector_field@@Base>
   3a834:	b	3a928 <flatcc_json_printer_int16_enum_vector_field@@Base+0x224>
   3a838:	ldr	r3, [r4, #20]
   3a83c:	add	r2, r3, #1
   3a840:	str	r2, [r4, #20]
   3a844:	mov	r2, #10
   3a848:	strb	r2, [r3]
   3a84c:	mov	r0, r4
   3a850:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3a854:	b	3a7f8 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   3a858:	ldr	r3, [r4, #20]
   3a85c:	add	r2, r3, #1
   3a860:	str	r2, [r4, #20]
   3a864:	strb	sl, [r3]
   3a868:	ldrb	r3, [r4, #25]
   3a86c:	ldr	fp, [r4, #32]
   3a870:	mul	fp, fp, r3
   3a874:	ldr	r0, [r4, #20]
   3a878:	add	r3, r0, fp
   3a87c:	ldr	r2, [r4, #16]
   3a880:	cmp	r2, r3
   3a884:	bcs	3a8ec <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e8>
   3a888:	mov	r1, fp
   3a88c:	mov	r0, r4
   3a890:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3a894:	ldrsh	r1, [r6], #2
   3a898:	mov	r0, r4
   3a89c:	blx	r7
   3a8a0:	sub	r5, r5, #1
   3a8a4:	cmn	r5, #1
   3a8a8:	beq	3a908 <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>
   3a8ac:	ldr	r3, [r4, #20]
   3a8b0:	add	r2, r3, #1
   3a8b4:	str	r2, [r4, #20]
   3a8b8:	strb	r8, [r3]
   3a8bc:	ldrb	r3, [r4, #25]
   3a8c0:	cmp	r3, #0
   3a8c4:	bne	3a858 <flatcc_json_printer_int16_enum_vector_field@@Base+0x154>
   3a8c8:	ldr	r2, [r4, #20]
   3a8cc:	ldr	r3, [r4, #16]
   3a8d0:	cmp	r2, r3
   3a8d4:	bcc	3a894 <flatcc_json_printer_int16_enum_vector_field@@Base+0x190>
   3a8d8:	ldr	r3, [r4, #44]	; 0x2c
   3a8dc:	mov	r1, r9
   3a8e0:	mov	r0, r4
   3a8e4:	blx	r3
   3a8e8:	b	3a894 <flatcc_json_printer_int16_enum_vector_field@@Base+0x190>
   3a8ec:	mov	r2, fp
   3a8f0:	mov	r1, #32
   3a8f4:	bl	1459c <memset@plt>
   3a8f8:	ldr	r3, [r4, #20]
   3a8fc:	add	fp, r3, fp
   3a900:	str	fp, [r4, #20]
   3a904:	b	3a894 <flatcc_json_printer_int16_enum_vector_field@@Base+0x190>
   3a908:	ldrb	r3, [r4, #25]
   3a90c:	cmp	r3, #0
   3a910:	bne	3a944 <flatcc_json_printer_int16_enum_vector_field@@Base+0x240>
   3a914:	ldr	r3, [r4, #20]
   3a918:	add	r2, r3, #1
   3a91c:	str	r2, [r4, #20]
   3a920:	mov	r2, #93	; 0x5d
   3a924:	strb	r2, [r3]
   3a928:	add	sp, sp, #12
   3a92c:	ldrd	r4, [sp]
   3a930:	ldrd	r6, [sp, #8]
   3a934:	ldrd	r8, [sp, #16]
   3a938:	ldrd	sl, [sp, #24]
   3a93c:	add	sp, sp, #32
   3a940:	pop	{pc}		; (ldr pc, [sp], #4)
   3a944:	ldr	r3, [r4, #20]
   3a948:	add	r2, r3, #1
   3a94c:	str	r2, [r4, #20]
   3a950:	mov	r2, #10
   3a954:	strb	r2, [r3]
   3a958:	ldr	r5, [r4, #32]
   3a95c:	sub	r5, r5, #1
   3a960:	str	r5, [r4, #32]
   3a964:	ldrb	r3, [r4, #25]
   3a968:	mul	r5, r5, r3
   3a96c:	ldr	r0, [r4, #20]
   3a970:	add	r3, r0, r5
   3a974:	ldr	r2, [r4, #16]
   3a978:	cmp	r2, r3
   3a97c:	bcs	3a990 <flatcc_json_printer_int16_enum_vector_field@@Base+0x28c>
   3a980:	mov	r1, r5
   3a984:	mov	r0, r4
   3a988:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3a98c:	b	3a914 <flatcc_json_printer_int16_enum_vector_field@@Base+0x210>
   3a990:	mov	r2, r5
   3a994:	mov	r1, #32
   3a998:	bl	1459c <memset@plt>
   3a99c:	ldr	r3, [r4, #20]
   3a9a0:	add	r5, r3, r5
   3a9a4:	str	r5, [r4, #20]
   3a9a8:	b	3a914 <flatcc_json_printer_int16_enum_vector_field@@Base+0x210>

0003a9ac <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3a9ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3a9b0:	strd	r6, [sp, #8]
   3a9b4:	strd	r8, [sp, #16]
   3a9b8:	strd	sl, [sp, #24]
   3a9bc:	str	lr, [sp, #32]
   3a9c0:	sub	sp, sp, #12
   3a9c4:	mov	r4, r0
   3a9c8:	ldr	r7, [sp, #52]	; 0x34
   3a9cc:	ldrb	r0, [r0, #27]
   3a9d0:	cmp	r0, #0
   3a9d4:	bne	3aacc <flatcc_json_printer_int32_enum_vector_field@@Base+0x120>
   3a9d8:	add	r2, r2, #2
   3a9dc:	lsl	r2, r2, #1
   3a9e0:	ldr	r0, [r1, #8]
   3a9e4:	cmp	r0, r2
   3a9e8:	ble	3abd0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x224>
   3a9ec:	ldr	r0, [r1, #4]
   3a9f0:	ldrh	r2, [r0, r2]
   3a9f4:	cmp	r2, #0
   3a9f8:	beq	3abd0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x224>
   3a9fc:	ldr	r0, [r1]
   3aa00:	adds	ip, r0, r2
   3aa04:	beq	3abd0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x224>
   3aa08:	ldr	lr, [r1, #16]
   3aa0c:	add	r5, lr, #1
   3aa10:	str	r5, [r1, #16]
   3aa14:	cmp	lr, #0
   3aa18:	beq	3aa30 <flatcc_json_printer_int32_enum_vector_field@@Base+0x84>
   3aa1c:	ldr	r1, [r4, #20]
   3aa20:	add	lr, r1, #1
   3aa24:	str	lr, [r4, #20]
   3aa28:	mov	lr, #44	; 0x2c
   3aa2c:	strb	lr, [r1]
   3aa30:	ldr	r2, [r0, r2]
   3aa34:	add	r6, ip, r2
   3aa38:	ldr	r8, [ip, r2]
   3aa3c:	ldr	r2, [sp, #48]	; 0x30
   3aa40:	mov	r1, r3
   3aa44:	mov	r0, r4
   3aa48:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3aa4c:	ldr	r3, [r4, #32]
   3aa50:	add	r3, r3, #1
   3aa54:	str	r3, [r4, #32]
   3aa58:	ldr	r3, [r4, #20]
   3aa5c:	add	r2, r3, #1
   3aa60:	str	r2, [r4, #20]
   3aa64:	mov	r2, #91	; 0x5b
   3aa68:	strb	r2, [r3]
   3aa6c:	cmp	r8, #0
   3aa70:	beq	3abb0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>
   3aa74:	ldrb	r3, [r4, #25]
   3aa78:	cmp	r3, #0
   3aa7c:	bne	3aae0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x134>
   3aa80:	ldr	r2, [r4, #20]
   3aa84:	ldr	r3, [r4, #16]
   3aa88:	cmp	r2, r3
   3aa8c:	bcc	3aaa0 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3aa90:	ldr	r3, [r4, #44]	; 0x2c
   3aa94:	mov	r1, #0
   3aa98:	mov	r0, r4
   3aa9c:	blx	r3
   3aaa0:	ldr	r1, [r6, #4]
   3aaa4:	mov	r0, r4
   3aaa8:	blx	r7
   3aaac:	add	r6, r6, #8
   3aab0:	sub	r5, r8, #2
   3aab4:	cmp	r8, #1
   3aab8:	beq	3abb0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>
   3aabc:	mov	r8, #44	; 0x2c
   3aac0:	mov	r9, #0
   3aac4:	mov	sl, #10
   3aac8:	b	3ab54 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1a8>
   3aacc:	ldr	r0, [sp, #48]	; 0x30
   3aad0:	str	r0, [sp]
   3aad4:	mov	r0, r4
   3aad8:	bl	389fc <flatcc_json_printer_int32_vector_field@@Base>
   3aadc:	b	3abd0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x224>
   3aae0:	ldr	r3, [r4, #20]
   3aae4:	add	r2, r3, #1
   3aae8:	str	r2, [r4, #20]
   3aaec:	mov	r2, #10
   3aaf0:	strb	r2, [r3]
   3aaf4:	mov	r0, r4
   3aaf8:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3aafc:	b	3aaa0 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   3ab00:	ldr	r3, [r4, #20]
   3ab04:	add	r2, r3, #1
   3ab08:	str	r2, [r4, #20]
   3ab0c:	strb	sl, [r3]
   3ab10:	ldrb	r3, [r4, #25]
   3ab14:	ldr	fp, [r4, #32]
   3ab18:	mul	fp, fp, r3
   3ab1c:	ldr	r0, [r4, #20]
   3ab20:	add	r3, r0, fp
   3ab24:	ldr	r2, [r4, #16]
   3ab28:	cmp	r2, r3
   3ab2c:	bcs	3ab94 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1e8>
   3ab30:	mov	r1, fp
   3ab34:	mov	r0, r4
   3ab38:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3ab3c:	ldr	r1, [r6], #4
   3ab40:	mov	r0, r4
   3ab44:	blx	r7
   3ab48:	sub	r5, r5, #1
   3ab4c:	cmn	r5, #1
   3ab50:	beq	3abb0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>
   3ab54:	ldr	r3, [r4, #20]
   3ab58:	add	r2, r3, #1
   3ab5c:	str	r2, [r4, #20]
   3ab60:	strb	r8, [r3]
   3ab64:	ldrb	r3, [r4, #25]
   3ab68:	cmp	r3, #0
   3ab6c:	bne	3ab00 <flatcc_json_printer_int32_enum_vector_field@@Base+0x154>
   3ab70:	ldr	r2, [r4, #20]
   3ab74:	ldr	r3, [r4, #16]
   3ab78:	cmp	r2, r3
   3ab7c:	bcc	3ab3c <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
   3ab80:	ldr	r3, [r4, #44]	; 0x2c
   3ab84:	mov	r1, r9
   3ab88:	mov	r0, r4
   3ab8c:	blx	r3
   3ab90:	b	3ab3c <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
   3ab94:	mov	r2, fp
   3ab98:	mov	r1, #32
   3ab9c:	bl	1459c <memset@plt>
   3aba0:	ldr	r3, [r4, #20]
   3aba4:	add	fp, r3, fp
   3aba8:	str	fp, [r4, #20]
   3abac:	b	3ab3c <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
   3abb0:	ldrb	r3, [r4, #25]
   3abb4:	cmp	r3, #0
   3abb8:	bne	3abec <flatcc_json_printer_int32_enum_vector_field@@Base+0x240>
   3abbc:	ldr	r3, [r4, #20]
   3abc0:	add	r2, r3, #1
   3abc4:	str	r2, [r4, #20]
   3abc8:	mov	r2, #93	; 0x5d
   3abcc:	strb	r2, [r3]
   3abd0:	add	sp, sp, #12
   3abd4:	ldrd	r4, [sp]
   3abd8:	ldrd	r6, [sp, #8]
   3abdc:	ldrd	r8, [sp, #16]
   3abe0:	ldrd	sl, [sp, #24]
   3abe4:	add	sp, sp, #32
   3abe8:	pop	{pc}		; (ldr pc, [sp], #4)
   3abec:	ldr	r3, [r4, #20]
   3abf0:	add	r2, r3, #1
   3abf4:	str	r2, [r4, #20]
   3abf8:	mov	r2, #10
   3abfc:	strb	r2, [r3]
   3ac00:	ldr	r5, [r4, #32]
   3ac04:	sub	r5, r5, #1
   3ac08:	str	r5, [r4, #32]
   3ac0c:	ldrb	r3, [r4, #25]
   3ac10:	mul	r5, r5, r3
   3ac14:	ldr	r0, [r4, #20]
   3ac18:	add	r3, r0, r5
   3ac1c:	ldr	r2, [r4, #16]
   3ac20:	cmp	r2, r3
   3ac24:	bcs	3ac38 <flatcc_json_printer_int32_enum_vector_field@@Base+0x28c>
   3ac28:	mov	r1, r5
   3ac2c:	mov	r0, r4
   3ac30:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3ac34:	b	3abbc <flatcc_json_printer_int32_enum_vector_field@@Base+0x210>
   3ac38:	mov	r2, r5
   3ac3c:	mov	r1, #32
   3ac40:	bl	1459c <memset@plt>
   3ac44:	ldr	r3, [r4, #20]
   3ac48:	add	r5, r3, r5
   3ac4c:	str	r5, [r4, #20]
   3ac50:	b	3abbc <flatcc_json_printer_int32_enum_vector_field@@Base+0x210>

0003ac54 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3ac54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3ac58:	strd	r6, [sp, #8]
   3ac5c:	strd	r8, [sp, #16]
   3ac60:	strd	sl, [sp, #24]
   3ac64:	str	lr, [sp, #32]
   3ac68:	sub	sp, sp, #12
   3ac6c:	mov	r4, r0
   3ac70:	ldr	r7, [sp, #52]	; 0x34
   3ac74:	ldrb	r0, [r0, #27]
   3ac78:	cmp	r0, #0
   3ac7c:	bne	3ad74 <flatcc_json_printer_int64_enum_vector_field@@Base+0x120>
   3ac80:	add	r2, r2, #2
   3ac84:	lsl	r2, r2, #1
   3ac88:	ldr	r0, [r1, #8]
   3ac8c:	cmp	r0, r2
   3ac90:	ble	3ae78 <flatcc_json_printer_int64_enum_vector_field@@Base+0x224>
   3ac94:	ldr	r0, [r1, #4]
   3ac98:	ldrh	r2, [r0, r2]
   3ac9c:	cmp	r2, #0
   3aca0:	beq	3ae78 <flatcc_json_printer_int64_enum_vector_field@@Base+0x224>
   3aca4:	ldr	r0, [r1]
   3aca8:	adds	ip, r0, r2
   3acac:	beq	3ae78 <flatcc_json_printer_int64_enum_vector_field@@Base+0x224>
   3acb0:	ldr	lr, [r1, #16]
   3acb4:	add	r5, lr, #1
   3acb8:	str	r5, [r1, #16]
   3acbc:	cmp	lr, #0
   3acc0:	beq	3acd8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x84>
   3acc4:	ldr	r1, [r4, #20]
   3acc8:	add	lr, r1, #1
   3accc:	str	lr, [r4, #20]
   3acd0:	mov	lr, #44	; 0x2c
   3acd4:	strb	lr, [r1]
   3acd8:	ldr	r2, [r0, r2]
   3acdc:	add	r6, ip, r2
   3ace0:	ldr	r8, [ip, r2]
   3ace4:	ldr	r2, [sp, #48]	; 0x30
   3ace8:	mov	r1, r3
   3acec:	mov	r0, r4
   3acf0:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3acf4:	ldr	r3, [r4, #32]
   3acf8:	add	r3, r3, #1
   3acfc:	str	r3, [r4, #32]
   3ad00:	ldr	r3, [r4, #20]
   3ad04:	add	r2, r3, #1
   3ad08:	str	r2, [r4, #20]
   3ad0c:	mov	r2, #91	; 0x5b
   3ad10:	strb	r2, [r3]
   3ad14:	cmp	r8, #0
   3ad18:	beq	3ae58 <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>
   3ad1c:	ldrb	r3, [r4, #25]
   3ad20:	cmp	r3, #0
   3ad24:	bne	3ad88 <flatcc_json_printer_int64_enum_vector_field@@Base+0x134>
   3ad28:	ldr	r2, [r4, #20]
   3ad2c:	ldr	r3, [r4, #16]
   3ad30:	cmp	r2, r3
   3ad34:	bcc	3ad48 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3ad38:	ldr	r3, [r4, #44]	; 0x2c
   3ad3c:	mov	r1, #0
   3ad40:	mov	r0, r4
   3ad44:	blx	r3
   3ad48:	ldrd	r2, [r6, #4]
   3ad4c:	mov	r0, r4
   3ad50:	blx	r7
   3ad54:	add	r6, r6, #12
   3ad58:	sub	r5, r8, #2
   3ad5c:	cmp	r8, #1
   3ad60:	beq	3ae58 <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>
   3ad64:	mov	r8, #44	; 0x2c
   3ad68:	mov	r9, #0
   3ad6c:	mov	sl, #10
   3ad70:	b	3adfc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a8>
   3ad74:	ldr	r0, [sp, #48]	; 0x30
   3ad78:	str	r0, [sp]
   3ad7c:	mov	r0, r4
   3ad80:	bl	38c8c <flatcc_json_printer_int64_vector_field@@Base>
   3ad84:	b	3ae78 <flatcc_json_printer_int64_enum_vector_field@@Base+0x224>
   3ad88:	ldr	r3, [r4, #20]
   3ad8c:	add	r2, r3, #1
   3ad90:	str	r2, [r4, #20]
   3ad94:	mov	r2, #10
   3ad98:	strb	r2, [r3]
   3ad9c:	mov	r0, r4
   3ada0:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3ada4:	b	3ad48 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   3ada8:	ldr	r3, [r4, #20]
   3adac:	add	r2, r3, #1
   3adb0:	str	r2, [r4, #20]
   3adb4:	strb	sl, [r3]
   3adb8:	ldrb	r3, [r4, #25]
   3adbc:	ldr	fp, [r4, #32]
   3adc0:	mul	fp, fp, r3
   3adc4:	ldr	r0, [r4, #20]
   3adc8:	add	r3, r0, fp
   3adcc:	ldr	r2, [r4, #16]
   3add0:	cmp	r2, r3
   3add4:	bcs	3ae3c <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e8>
   3add8:	mov	r1, fp
   3addc:	mov	r0, r4
   3ade0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3ade4:	ldrd	r2, [r6], #8
   3ade8:	mov	r0, r4
   3adec:	blx	r7
   3adf0:	sub	r5, r5, #1
   3adf4:	cmn	r5, #1
   3adf8:	beq	3ae58 <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>
   3adfc:	ldr	r3, [r4, #20]
   3ae00:	add	r2, r3, #1
   3ae04:	str	r2, [r4, #20]
   3ae08:	strb	r8, [r3]
   3ae0c:	ldrb	r3, [r4, #25]
   3ae10:	cmp	r3, #0
   3ae14:	bne	3ada8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x154>
   3ae18:	ldr	r2, [r4, #20]
   3ae1c:	ldr	r3, [r4, #16]
   3ae20:	cmp	r2, r3
   3ae24:	bcc	3ade4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   3ae28:	ldr	r3, [r4, #44]	; 0x2c
   3ae2c:	mov	r1, r9
   3ae30:	mov	r0, r4
   3ae34:	blx	r3
   3ae38:	b	3ade4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   3ae3c:	mov	r2, fp
   3ae40:	mov	r1, #32
   3ae44:	bl	1459c <memset@plt>
   3ae48:	ldr	r3, [r4, #20]
   3ae4c:	add	fp, r3, fp
   3ae50:	str	fp, [r4, #20]
   3ae54:	b	3ade4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   3ae58:	ldrb	r3, [r4, #25]
   3ae5c:	cmp	r3, #0
   3ae60:	bne	3ae94 <flatcc_json_printer_int64_enum_vector_field@@Base+0x240>
   3ae64:	ldr	r3, [r4, #20]
   3ae68:	add	r2, r3, #1
   3ae6c:	str	r2, [r4, #20]
   3ae70:	mov	r2, #93	; 0x5d
   3ae74:	strb	r2, [r3]
   3ae78:	add	sp, sp, #12
   3ae7c:	ldrd	r4, [sp]
   3ae80:	ldrd	r6, [sp, #8]
   3ae84:	ldrd	r8, [sp, #16]
   3ae88:	ldrd	sl, [sp, #24]
   3ae8c:	add	sp, sp, #32
   3ae90:	pop	{pc}		; (ldr pc, [sp], #4)
   3ae94:	ldr	r3, [r4, #20]
   3ae98:	add	r2, r3, #1
   3ae9c:	str	r2, [r4, #20]
   3aea0:	mov	r2, #10
   3aea4:	strb	r2, [r3]
   3aea8:	ldr	r5, [r4, #32]
   3aeac:	sub	r5, r5, #1
   3aeb0:	str	r5, [r4, #32]
   3aeb4:	ldrb	r3, [r4, #25]
   3aeb8:	mul	r5, r5, r3
   3aebc:	ldr	r0, [r4, #20]
   3aec0:	add	r3, r0, r5
   3aec4:	ldr	r2, [r4, #16]
   3aec8:	cmp	r2, r3
   3aecc:	bcs	3aee0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x28c>
   3aed0:	mov	r1, r5
   3aed4:	mov	r0, r4
   3aed8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3aedc:	b	3ae64 <flatcc_json_printer_int64_enum_vector_field@@Base+0x210>
   3aee0:	mov	r2, r5
   3aee4:	mov	r1, #32
   3aee8:	bl	1459c <memset@plt>
   3aeec:	ldr	r3, [r4, #20]
   3aef0:	add	r5, r3, r5
   3aef4:	str	r5, [r4, #20]
   3aef8:	b	3ae64 <flatcc_json_printer_int64_enum_vector_field@@Base+0x210>

0003aefc <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3aefc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3af00:	strd	r6, [sp, #8]
   3af04:	strd	r8, [sp, #16]
   3af08:	strd	sl, [sp, #24]
   3af0c:	str	lr, [sp, #32]
   3af10:	sub	sp, sp, #12
   3af14:	mov	r4, r0
   3af18:	ldr	r7, [sp, #52]	; 0x34
   3af1c:	ldrb	r0, [r0, #27]
   3af20:	cmp	r0, #0
   3af24:	bne	3b020 <flatcc_json_printer_bool_enum_vector_field@@Base+0x124>
   3af28:	add	r2, r2, #2
   3af2c:	lsl	r2, r2, #1
   3af30:	ldr	r0, [r1, #8]
   3af34:	cmp	r0, r2
   3af38:	ble	3b120 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3af3c:	ldr	r0, [r1, #4]
   3af40:	ldrh	r2, [r0, r2]
   3af44:	cmp	r2, #0
   3af48:	beq	3b120 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3af4c:	ldr	r0, [r1]
   3af50:	adds	ip, r0, r2
   3af54:	beq	3b120 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3af58:	ldr	lr, [r1, #16]
   3af5c:	add	r5, lr, #1
   3af60:	str	r5, [r1, #16]
   3af64:	cmp	lr, #0
   3af68:	beq	3af80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x84>
   3af6c:	ldr	r1, [r4, #20]
   3af70:	add	lr, r1, #1
   3af74:	str	lr, [r4, #20]
   3af78:	mov	lr, #44	; 0x2c
   3af7c:	strb	lr, [r1]
   3af80:	ldr	r2, [r0, r2]
   3af84:	add	r6, ip, r2
   3af88:	ldr	r8, [ip, r2]
   3af8c:	ldr	r2, [sp, #48]	; 0x30
   3af90:	mov	r1, r3
   3af94:	mov	r0, r4
   3af98:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3af9c:	ldr	r3, [r4, #32]
   3afa0:	add	r3, r3, #1
   3afa4:	str	r3, [r4, #32]
   3afa8:	ldr	r3, [r4, #20]
   3afac:	add	r2, r3, #1
   3afb0:	str	r2, [r4, #20]
   3afb4:	mov	r2, #91	; 0x5b
   3afb8:	strb	r2, [r3]
   3afbc:	cmp	r8, #0
   3afc0:	beq	3b100 <flatcc_json_printer_bool_enum_vector_field@@Base+0x204>
   3afc4:	ldrb	r3, [r4, #25]
   3afc8:	cmp	r3, #0
   3afcc:	bne	3b034 <flatcc_json_printer_bool_enum_vector_field@@Base+0x138>
   3afd0:	ldr	r2, [r4, #20]
   3afd4:	ldr	r3, [r4, #16]
   3afd8:	cmp	r2, r3
   3afdc:	bcc	3aff0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
   3afe0:	ldr	r3, [r4, #44]	; 0x2c
   3afe4:	mov	r1, #0
   3afe8:	mov	r0, r4
   3afec:	blx	r3
   3aff0:	ldrb	r1, [r6, #4]
   3aff4:	mov	r0, r4
   3aff8:	blx	r7
   3affc:	add	r5, r6, #5
   3b000:	cmp	r8, #1
   3b004:	beq	3b100 <flatcc_json_printer_bool_enum_vector_field@@Base+0x204>
   3b008:	add	r8, r8, #4
   3b00c:	add	r6, r6, r8
   3b010:	mov	r8, #44	; 0x2c
   3b014:	mov	r9, #0
   3b018:	mov	sl, #10
   3b01c:	b	3b0a4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1a8>
   3b020:	ldr	r0, [sp, #48]	; 0x30
   3b024:	str	r0, [sp]
   3b028:	mov	r0, r4
   3b02c:	bl	38f1c <flatcc_json_printer_bool_vector_field@@Base>
   3b030:	b	3b120 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3b034:	ldr	r3, [r4, #20]
   3b038:	add	r2, r3, #1
   3b03c:	str	r2, [r4, #20]
   3b040:	mov	r2, #10
   3b044:	strb	r2, [r3]
   3b048:	mov	r0, r4
   3b04c:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3b050:	b	3aff0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
   3b054:	ldr	r3, [r4, #20]
   3b058:	add	r2, r3, #1
   3b05c:	str	r2, [r4, #20]
   3b060:	strb	sl, [r3]
   3b064:	ldrb	r3, [r4, #25]
   3b068:	ldr	fp, [r4, #32]
   3b06c:	mul	fp, fp, r3
   3b070:	ldr	r0, [r4, #20]
   3b074:	add	r3, r0, fp
   3b078:	ldr	r2, [r4, #16]
   3b07c:	cmp	r2, r3
   3b080:	bcs	3b0e4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1e8>
   3b084:	mov	r1, fp
   3b088:	mov	r0, r4
   3b08c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3b090:	ldrb	r1, [r5], #1
   3b094:	mov	r0, r4
   3b098:	blx	r7
   3b09c:	cmp	r6, r5
   3b0a0:	beq	3b100 <flatcc_json_printer_bool_enum_vector_field@@Base+0x204>
   3b0a4:	ldr	r3, [r4, #20]
   3b0a8:	add	r2, r3, #1
   3b0ac:	str	r2, [r4, #20]
   3b0b0:	strb	r8, [r3]
   3b0b4:	ldrb	r3, [r4, #25]
   3b0b8:	cmp	r3, #0
   3b0bc:	bne	3b054 <flatcc_json_printer_bool_enum_vector_field@@Base+0x158>
   3b0c0:	ldr	r2, [r4, #20]
   3b0c4:	ldr	r3, [r4, #16]
   3b0c8:	cmp	r2, r3
   3b0cc:	bcc	3b090 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   3b0d0:	ldr	r3, [r4, #44]	; 0x2c
   3b0d4:	mov	r1, r9
   3b0d8:	mov	r0, r4
   3b0dc:	blx	r3
   3b0e0:	b	3b090 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   3b0e4:	mov	r2, fp
   3b0e8:	mov	r1, #32
   3b0ec:	bl	1459c <memset@plt>
   3b0f0:	ldr	r3, [r4, #20]
   3b0f4:	add	fp, r3, fp
   3b0f8:	str	fp, [r4, #20]
   3b0fc:	b	3b090 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   3b100:	ldrb	r3, [r4, #25]
   3b104:	cmp	r3, #0
   3b108:	bne	3b13c <flatcc_json_printer_bool_enum_vector_field@@Base+0x240>
   3b10c:	ldr	r3, [r4, #20]
   3b110:	add	r2, r3, #1
   3b114:	str	r2, [r4, #20]
   3b118:	mov	r2, #93	; 0x5d
   3b11c:	strb	r2, [r3]
   3b120:	add	sp, sp, #12
   3b124:	ldrd	r4, [sp]
   3b128:	ldrd	r6, [sp, #8]
   3b12c:	ldrd	r8, [sp, #16]
   3b130:	ldrd	sl, [sp, #24]
   3b134:	add	sp, sp, #32
   3b138:	pop	{pc}		; (ldr pc, [sp], #4)
   3b13c:	ldr	r3, [r4, #20]
   3b140:	add	r2, r3, #1
   3b144:	str	r2, [r4, #20]
   3b148:	mov	r2, #10
   3b14c:	strb	r2, [r3]
   3b150:	ldr	r5, [r4, #32]
   3b154:	sub	r5, r5, #1
   3b158:	str	r5, [r4, #32]
   3b15c:	ldrb	r3, [r4, #25]
   3b160:	mul	r5, r5, r3
   3b164:	ldr	r0, [r4, #20]
   3b168:	add	r3, r0, r5
   3b16c:	ldr	r2, [r4, #16]
   3b170:	cmp	r2, r3
   3b174:	bcs	3b188 <flatcc_json_printer_bool_enum_vector_field@@Base+0x28c>
   3b178:	mov	r1, r5
   3b17c:	mov	r0, r4
   3b180:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3b184:	b	3b10c <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3b188:	mov	r2, r5
   3b18c:	mov	r1, #32
   3b190:	bl	1459c <memset@plt>
   3b194:	ldr	r3, [r4, #20]
   3b198:	add	r5, r3, r5
   3b19c:	str	r5, [r4, #20]
   3b1a0:	b	3b10c <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>

0003b1a4 <flatcc_json_printer_struct_vector_field@@Base>:
   3b1a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b1a8:	strd	r6, [sp, #8]
   3b1ac:	strd	r8, [sp, #16]
   3b1b0:	strd	sl, [sp, #24]
   3b1b4:	str	lr, [sp, #32]
   3b1b8:	sub	sp, sp, #4
   3b1bc:	ldr	r9, [sp, #44]	; 0x2c
   3b1c0:	ldr	r8, [sp, #48]	; 0x30
   3b1c4:	add	r2, r2, #2
   3b1c8:	lsl	r2, r2, #1
   3b1cc:	ldr	ip, [r1, #8]
   3b1d0:	cmp	r2, ip
   3b1d4:	bge	3b4b8 <flatcc_json_printer_struct_vector_field@@Base+0x314>
   3b1d8:	ldr	ip, [r1, #4]
   3b1dc:	ldrh	r2, [ip, r2]
   3b1e0:	cmp	r2, #0
   3b1e4:	beq	3b4b8 <flatcc_json_printer_struct_vector_field@@Base+0x314>
   3b1e8:	ldr	ip, [r1]
   3b1ec:	adds	lr, ip, r2
   3b1f0:	beq	3b4b8 <flatcc_json_printer_struct_vector_field@@Base+0x314>
   3b1f4:	ldr	r4, [r1, #16]
   3b1f8:	add	r5, r4, #1
   3b1fc:	str	r5, [r1, #16]
   3b200:	cmp	r4, #0
   3b204:	beq	3b21c <flatcc_json_printer_struct_vector_field@@Base+0x78>
   3b208:	ldr	r1, [r0, #20]
   3b20c:	add	r4, r1, #1
   3b210:	str	r4, [r0, #20]
   3b214:	mov	r4, #44	; 0x2c
   3b218:	strb	r4, [r1]
   3b21c:	mov	r1, r3
   3b220:	mov	r4, r0
   3b224:	ldr	r3, [ip, r2]
   3b228:	add	r5, lr, r3
   3b22c:	ldr	r7, [lr, r3]
   3b230:	ldr	r2, [sp, #40]	; 0x28
   3b234:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3b238:	ldr	r3, [r4, #32]
   3b23c:	add	r3, r3, #1
   3b240:	str	r3, [r4, #32]
   3b244:	ldr	r3, [r4, #20]
   3b248:	add	r2, r3, #1
   3b24c:	str	r2, [r4, #20]
   3b250:	mov	r2, #91	; 0x5b
   3b254:	strb	r2, [r3]
   3b258:	cmp	r7, #0
   3b25c:	beq	3b498 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3b260:	ldrb	r3, [r4, #25]
   3b264:	cmp	r3, #0
   3b268:	bne	3b2f4 <flatcc_json_printer_struct_vector_field@@Base+0x150>
   3b26c:	ldr	r2, [r4, #20]
   3b270:	ldr	r3, [r4, #16]
   3b274:	cmp	r2, r3
   3b278:	bcc	3b28c <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3b27c:	ldr	r3, [r4, #44]	; 0x2c
   3b280:	mov	r1, #0
   3b284:	mov	r0, r4
   3b288:	blx	r3
   3b28c:	add	r5, r5, #4
   3b290:	ldr	r3, [r4, #32]
   3b294:	add	r3, r3, #1
   3b298:	str	r3, [r4, #32]
   3b29c:	ldr	r3, [r4, #20]
   3b2a0:	add	r2, r3, #1
   3b2a4:	str	r2, [r4, #20]
   3b2a8:	mov	r2, #123	; 0x7b
   3b2ac:	strb	r2, [r3]
   3b2b0:	mov	r1, r5
   3b2b4:	mov	r0, r4
   3b2b8:	blx	r8
   3b2bc:	ldrb	r3, [r4, #25]
   3b2c0:	cmp	r3, #0
   3b2c4:	bne	3b314 <flatcc_json_printer_struct_vector_field@@Base+0x170>
   3b2c8:	ldr	r3, [r4, #20]
   3b2cc:	add	r2, r3, #1
   3b2d0:	str	r2, [r4, #20]
   3b2d4:	mov	r2, #125	; 0x7d
   3b2d8:	strb	r2, [r3]
   3b2dc:	sub	r6, r7, #2
   3b2e0:	cmp	r7, #1
   3b2e4:	beq	3b498 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3b2e8:	mov	sl, #44	; 0x2c
   3b2ec:	mov	fp, #10
   3b2f0:	b	3b3d4 <flatcc_json_printer_struct_vector_field@@Base+0x230>
   3b2f4:	ldr	r3, [r4, #20]
   3b2f8:	add	r2, r3, #1
   3b2fc:	str	r2, [r4, #20]
   3b300:	mov	r2, #10
   3b304:	strb	r2, [r3]
   3b308:	mov	r0, r4
   3b30c:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3b310:	b	3b28c <flatcc_json_printer_struct_vector_field@@Base+0xe8>
   3b314:	ldr	r3, [r4, #20]
   3b318:	add	r2, r3, #1
   3b31c:	str	r2, [r4, #20]
   3b320:	mov	r2, #10
   3b324:	strb	r2, [r3]
   3b328:	ldr	r3, [r4, #32]
   3b32c:	sub	r3, r3, #1
   3b330:	str	r3, [r4, #32]
   3b334:	mov	r0, r4
   3b338:	bl	311b4 <flatcc_json_parser_struct_as_root@@Base+0x172c>
   3b33c:	b	3b2c8 <flatcc_json_printer_struct_vector_field@@Base+0x124>
   3b340:	ldr	r3, [r4, #20]
   3b344:	add	r2, r3, #1
   3b348:	str	r2, [r4, #20]
   3b34c:	strb	fp, [r3]
   3b350:	ldrb	r3, [r4, #25]
   3b354:	ldr	r7, [r4, #32]
   3b358:	mul	r7, r7, r3
   3b35c:	ldr	r0, [r4, #20]
   3b360:	add	r3, r0, r7
   3b364:	ldr	r2, [r4, #16]
   3b368:	cmp	r2, r3
   3b36c:	bcs	3b418 <flatcc_json_printer_struct_vector_field@@Base+0x274>
   3b370:	mov	r1, r7
   3b374:	mov	r0, r4
   3b378:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3b37c:	ldr	r3, [r4, #32]
   3b380:	add	r3, r3, #1
   3b384:	str	r3, [r4, #32]
   3b388:	ldr	r3, [r4, #20]
   3b38c:	add	r2, r3, #1
   3b390:	str	r2, [r4, #20]
   3b394:	mov	r2, #123	; 0x7b
   3b398:	strb	r2, [r3]
   3b39c:	mov	r1, r5
   3b3a0:	mov	r0, r4
   3b3a4:	blx	r8
   3b3a8:	ldrb	r3, [r4, #25]
   3b3ac:	cmp	r3, #0
   3b3b0:	bne	3b434 <flatcc_json_printer_struct_vector_field@@Base+0x290>
   3b3b4:	ldr	r3, [r4, #20]
   3b3b8:	add	r2, r3, #1
   3b3bc:	str	r2, [r4, #20]
   3b3c0:	mov	r2, #125	; 0x7d
   3b3c4:	strb	r2, [r3]
   3b3c8:	sub	r6, r6, #1
   3b3cc:	cmn	r6, #1
   3b3d0:	beq	3b498 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3b3d4:	add	r5, r5, r9
   3b3d8:	ldr	r3, [r4, #20]
   3b3dc:	add	r2, r3, #1
   3b3e0:	str	r2, [r4, #20]
   3b3e4:	strb	sl, [r3]
   3b3e8:	ldrb	r3, [r4, #25]
   3b3ec:	cmp	r3, #0
   3b3f0:	bne	3b340 <flatcc_json_printer_struct_vector_field@@Base+0x19c>
   3b3f4:	ldr	r2, [r4, #20]
   3b3f8:	ldr	r3, [r4, #16]
   3b3fc:	cmp	r2, r3
   3b400:	bcc	3b37c <flatcc_json_printer_struct_vector_field@@Base+0x1d8>
   3b404:	ldr	r3, [r4, #44]	; 0x2c
   3b408:	mov	r1, #0
   3b40c:	mov	r0, r4
   3b410:	blx	r3
   3b414:	b	3b37c <flatcc_json_printer_struct_vector_field@@Base+0x1d8>
   3b418:	mov	r2, r7
   3b41c:	mov	r1, #32
   3b420:	bl	1459c <memset@plt>
   3b424:	ldr	r3, [r4, #20]
   3b428:	add	r7, r3, r7
   3b42c:	str	r7, [r4, #20]
   3b430:	b	3b37c <flatcc_json_printer_struct_vector_field@@Base+0x1d8>
   3b434:	ldr	r3, [r4, #20]
   3b438:	add	r2, r3, #1
   3b43c:	str	r2, [r4, #20]
   3b440:	strb	fp, [r3]
   3b444:	ldr	r7, [r4, #32]
   3b448:	sub	r7, r7, #1
   3b44c:	str	r7, [r4, #32]
   3b450:	ldrb	r3, [r4, #25]
   3b454:	mul	r7, r7, r3
   3b458:	ldr	r0, [r4, #20]
   3b45c:	add	r3, r0, r7
   3b460:	ldr	r2, [r4, #16]
   3b464:	cmp	r2, r3
   3b468:	bcs	3b47c <flatcc_json_printer_struct_vector_field@@Base+0x2d8>
   3b46c:	mov	r1, r7
   3b470:	mov	r0, r4
   3b474:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3b478:	b	3b3b4 <flatcc_json_printer_struct_vector_field@@Base+0x210>
   3b47c:	mov	r2, r7
   3b480:	mov	r1, #32
   3b484:	bl	1459c <memset@plt>
   3b488:	ldr	r3, [r4, #20]
   3b48c:	add	r7, r3, r7
   3b490:	str	r7, [r4, #20]
   3b494:	b	3b3b4 <flatcc_json_printer_struct_vector_field@@Base+0x210>
   3b498:	ldrb	r3, [r4, #25]
   3b49c:	cmp	r3, #0
   3b4a0:	bne	3b4d4 <flatcc_json_printer_struct_vector_field@@Base+0x330>
   3b4a4:	ldr	r3, [r4, #20]
   3b4a8:	add	r2, r3, #1
   3b4ac:	str	r2, [r4, #20]
   3b4b0:	mov	r2, #93	; 0x5d
   3b4b4:	strb	r2, [r3]
   3b4b8:	add	sp, sp, #4
   3b4bc:	ldrd	r4, [sp]
   3b4c0:	ldrd	r6, [sp, #8]
   3b4c4:	ldrd	r8, [sp, #16]
   3b4c8:	ldrd	sl, [sp, #24]
   3b4cc:	add	sp, sp, #32
   3b4d0:	pop	{pc}		; (ldr pc, [sp], #4)
   3b4d4:	ldr	r3, [r4, #20]
   3b4d8:	add	r2, r3, #1
   3b4dc:	str	r2, [r4, #20]
   3b4e0:	mov	r2, #10
   3b4e4:	strb	r2, [r3]
   3b4e8:	ldr	r5, [r4, #32]
   3b4ec:	sub	r5, r5, #1
   3b4f0:	str	r5, [r4, #32]
   3b4f4:	ldrb	r3, [r4, #25]
   3b4f8:	mul	r5, r5, r3
   3b4fc:	ldr	r0, [r4, #20]
   3b500:	add	r3, r0, r5
   3b504:	ldr	r2, [r4, #16]
   3b508:	cmp	r2, r3
   3b50c:	bcs	3b520 <flatcc_json_printer_struct_vector_field@@Base+0x37c>
   3b510:	mov	r1, r5
   3b514:	mov	r0, r4
   3b518:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3b51c:	b	3b4a4 <flatcc_json_printer_struct_vector_field@@Base+0x300>
   3b520:	mov	r2, r5
   3b524:	mov	r1, #32
   3b528:	bl	1459c <memset@plt>
   3b52c:	ldr	r3, [r4, #20]
   3b530:	add	r5, r3, r5
   3b534:	str	r5, [r4, #20]
   3b538:	b	3b4a4 <flatcc_json_printer_struct_vector_field@@Base+0x300>

0003b53c <flatcc_json_printer_string_vector_field@@Base>:
   3b53c:	add	r2, r2, #2
   3b540:	lsl	r2, r2, #1
   3b544:	ldr	ip, [r1, #8]
   3b548:	cmp	ip, r2
   3b54c:	bxle	lr
   3b550:	ldr	ip, [r1, #4]
   3b554:	ldrh	r2, [ip, r2]
   3b558:	cmp	r2, #0
   3b55c:	bxeq	lr
   3b560:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b564:	strd	r6, [sp, #8]
   3b568:	strd	r8, [sp, #16]
   3b56c:	strd	sl, [sp, #24]
   3b570:	str	lr, [sp, #32]
   3b574:	sub	sp, sp, #4
   3b578:	ldr	ip, [r1]
   3b57c:	adds	lr, ip, r2
   3b580:	beq	3b79c <flatcc_json_printer_string_vector_field@@Base+0x260>
   3b584:	ldr	r4, [r1, #16]
   3b588:	add	r5, r4, #1
   3b58c:	str	r5, [r1, #16]
   3b590:	cmp	r4, #0
   3b594:	beq	3b5ac <flatcc_json_printer_string_vector_field@@Base+0x70>
   3b598:	ldr	r1, [r0, #20]
   3b59c:	add	r4, r1, #1
   3b5a0:	str	r4, [r0, #20]
   3b5a4:	mov	r4, #44	; 0x2c
   3b5a8:	strb	r4, [r1]
   3b5ac:	mov	r1, r3
   3b5b0:	mov	r4, r0
   3b5b4:	ldr	r3, [ip, r2]
   3b5b8:	add	r6, lr, r3
   3b5bc:	ldr	r5, [lr, r3]
   3b5c0:	ldr	r2, [sp, #40]	; 0x28
   3b5c4:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3b5c8:	ldr	r3, [r4, #32]
   3b5cc:	add	r3, r3, #1
   3b5d0:	str	r3, [r4, #32]
   3b5d4:	ldr	r3, [r4, #20]
   3b5d8:	add	r2, r3, #1
   3b5dc:	str	r2, [r4, #20]
   3b5e0:	mov	r2, #91	; 0x5b
   3b5e4:	strb	r2, [r3]
   3b5e8:	cmp	r5, #0
   3b5ec:	beq	3b77c <flatcc_json_printer_string_vector_field@@Base+0x240>
   3b5f0:	ldrb	r3, [r4, #25]
   3b5f4:	cmp	r3, #0
   3b5f8:	bne	3b658 <flatcc_json_printer_string_vector_field@@Base+0x11c>
   3b5fc:	ldr	r2, [r4, #20]
   3b600:	ldr	r3, [r4, #16]
   3b604:	cmp	r2, r3
   3b608:	bcc	3b61c <flatcc_json_printer_string_vector_field@@Base+0xe0>
   3b60c:	ldr	r3, [r4, #44]	; 0x2c
   3b610:	mov	r1, #0
   3b614:	mov	r0, r4
   3b618:	blx	r3
   3b61c:	ldr	r3, [r6, #4]
   3b620:	add	r3, r3, #4
   3b624:	add	r1, r6, r3
   3b628:	ldr	r2, [r6, r3]
   3b62c:	add	r1, r1, #4
   3b630:	mov	r0, r4
   3b634:	bl	3145c <flatcc_json_parser_struct_as_root@@Base+0x19d4>
   3b638:	sub	r7, r5, #2
   3b63c:	cmp	r5, #1
   3b640:	beq	3b77c <flatcc_json_printer_string_vector_field@@Base+0x240>
   3b644:	add	r6, r6, #8
   3b648:	mov	r8, #44	; 0x2c
   3b64c:	mov	r9, #0
   3b650:	mov	sl, #10
   3b654:	b	3b71c <flatcc_json_printer_string_vector_field@@Base+0x1e0>
   3b658:	ldr	r3, [r4, #20]
   3b65c:	add	r2, r3, #1
   3b660:	str	r2, [r4, #20]
   3b664:	mov	r2, #10
   3b668:	strb	r2, [r3]
   3b66c:	ldrb	r3, [r4, #25]
   3b670:	ldr	r7, [r4, #32]
   3b674:	mul	r7, r7, r3
   3b678:	ldr	r0, [r4, #20]
   3b67c:	add	r3, r0, r7
   3b680:	ldr	r2, [r4, #16]
   3b684:	cmp	r2, r3
   3b688:	bcs	3b69c <flatcc_json_printer_string_vector_field@@Base+0x160>
   3b68c:	mov	r1, r7
   3b690:	mov	r0, r4
   3b694:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3b698:	b	3b61c <flatcc_json_printer_string_vector_field@@Base+0xe0>
   3b69c:	mov	r2, r7
   3b6a0:	mov	r1, #32
   3b6a4:	bl	1459c <memset@plt>
   3b6a8:	ldr	r3, [r4, #20]
   3b6ac:	add	r7, r3, r7
   3b6b0:	str	r7, [r4, #20]
   3b6b4:	b	3b61c <flatcc_json_printer_string_vector_field@@Base+0xe0>
   3b6b8:	ldr	r3, [r4, #20]
   3b6bc:	add	r2, r3, #1
   3b6c0:	str	r2, [r4, #20]
   3b6c4:	strb	sl, [r3]
   3b6c8:	ldrb	r3, [r4, #25]
   3b6cc:	ldr	fp, [r4, #32]
   3b6d0:	mul	fp, fp, r3
   3b6d4:	ldr	r0, [r4, #20]
   3b6d8:	add	r3, r0, fp
   3b6dc:	ldr	r2, [r4, #16]
   3b6e0:	cmp	r2, r3
   3b6e4:	bcs	3b760 <flatcc_json_printer_string_vector_field@@Base+0x224>
   3b6e8:	mov	r1, fp
   3b6ec:	mov	r0, r4
   3b6f0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3b6f4:	add	r6, r6, #4
   3b6f8:	ldr	r3, [r5]
   3b6fc:	add	r1, r5, r3
   3b700:	ldr	r2, [r5, r3]
   3b704:	add	r1, r1, #4
   3b708:	mov	r0, r4
   3b70c:	bl	3145c <flatcc_json_parser_struct_as_root@@Base+0x19d4>
   3b710:	sub	r7, r7, #1
   3b714:	cmn	r7, #1
   3b718:	beq	3b77c <flatcc_json_printer_string_vector_field@@Base+0x240>
   3b71c:	mov	r5, r6
   3b720:	ldr	r3, [r4, #20]
   3b724:	add	r2, r3, #1
   3b728:	str	r2, [r4, #20]
   3b72c:	strb	r8, [r3]
   3b730:	ldrb	r3, [r4, #25]
   3b734:	cmp	r3, #0
   3b738:	bne	3b6b8 <flatcc_json_printer_string_vector_field@@Base+0x17c>
   3b73c:	ldr	r2, [r4, #20]
   3b740:	ldr	r3, [r4, #16]
   3b744:	cmp	r2, r3
   3b748:	bcc	3b6f4 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3b74c:	ldr	r3, [r4, #44]	; 0x2c
   3b750:	mov	r1, r9
   3b754:	mov	r0, r4
   3b758:	blx	r3
   3b75c:	b	3b6f4 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3b760:	mov	r2, fp
   3b764:	mov	r1, #32
   3b768:	bl	1459c <memset@plt>
   3b76c:	ldr	r3, [r4, #20]
   3b770:	add	fp, r3, fp
   3b774:	str	fp, [r4, #20]
   3b778:	b	3b6f4 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3b77c:	ldrb	r3, [r4, #25]
   3b780:	cmp	r3, #0
   3b784:	bne	3b7b8 <flatcc_json_printer_string_vector_field@@Base+0x27c>
   3b788:	ldr	r3, [r4, #20]
   3b78c:	add	r2, r3, #1
   3b790:	str	r2, [r4, #20]
   3b794:	mov	r2, #93	; 0x5d
   3b798:	strb	r2, [r3]
   3b79c:	add	sp, sp, #4
   3b7a0:	ldrd	r4, [sp]
   3b7a4:	ldrd	r6, [sp, #8]
   3b7a8:	ldrd	r8, [sp, #16]
   3b7ac:	ldrd	sl, [sp, #24]
   3b7b0:	add	sp, sp, #32
   3b7b4:	pop	{pc}		; (ldr pc, [sp], #4)
   3b7b8:	ldr	r3, [r4, #20]
   3b7bc:	add	r2, r3, #1
   3b7c0:	str	r2, [r4, #20]
   3b7c4:	mov	r2, #10
   3b7c8:	strb	r2, [r3]
   3b7cc:	ldr	r5, [r4, #32]
   3b7d0:	sub	r5, r5, #1
   3b7d4:	str	r5, [r4, #32]
   3b7d8:	ldrb	r3, [r4, #25]
   3b7dc:	mul	r5, r5, r3
   3b7e0:	ldr	r0, [r4, #20]
   3b7e4:	add	r3, r0, r5
   3b7e8:	ldr	r2, [r4, #16]
   3b7ec:	cmp	r2, r3
   3b7f0:	bcs	3b804 <flatcc_json_printer_string_vector_field@@Base+0x2c8>
   3b7f4:	mov	r1, r5
   3b7f8:	mov	r0, r4
   3b7fc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3b800:	b	3b788 <flatcc_json_printer_string_vector_field@@Base+0x24c>
   3b804:	mov	r2, r5
   3b808:	mov	r1, #32
   3b80c:	bl	1459c <memset@plt>
   3b810:	ldr	r3, [r4, #20]
   3b814:	add	r5, r3, r5
   3b818:	str	r5, [r4, #20]
   3b81c:	b	3b788 <flatcc_json_printer_string_vector_field@@Base+0x24c>

0003b820 <flatcc_json_printer_table_vector_field@@Base>:
   3b820:	add	r2, r2, #2
   3b824:	lsl	r2, r2, #1
   3b828:	ldr	ip, [r1, #8]
   3b82c:	cmp	ip, r2
   3b830:	bxle	lr
   3b834:	ldr	ip, [r1, #4]
   3b838:	ldrh	r2, [ip, r2]
   3b83c:	cmp	r2, #0
   3b840:	bxeq	lr
   3b844:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3b848:	strd	r6, [sp, #8]
   3b84c:	strd	r8, [sp, #16]
   3b850:	strd	sl, [sp, #24]
   3b854:	str	lr, [sp, #32]
   3b858:	sub	sp, sp, #28
   3b85c:	ldr	ip, [r1]
   3b860:	adds	lr, ip, r2
   3b864:	beq	3b9b4 <flatcc_json_printer_table_vector_field@@Base+0x194>
   3b868:	ldr	r4, [r1, #16]
   3b86c:	add	r5, r4, #1
   3b870:	str	r5, [r1, #16]
   3b874:	cmp	r4, #0
   3b878:	beq	3b890 <flatcc_json_printer_table_vector_field@@Base+0x70>
   3b87c:	ldr	r4, [r0, #20]
   3b880:	add	r5, r4, #1
   3b884:	str	r5, [r0, #20]
   3b888:	mov	r5, #44	; 0x2c
   3b88c:	strb	r5, [r4]
   3b890:	mov	r5, r3
   3b894:	mov	r7, r1
   3b898:	mov	r4, r0
   3b89c:	ldr	r3, [ip, r2]
   3b8a0:	add	r8, lr, r3
   3b8a4:	ldr	r6, [lr, r3]
   3b8a8:	ldrb	r3, [r0, #25]
   3b8ac:	cmp	r3, #0
   3b8b0:	bne	3b9d0 <flatcc_json_printer_table_vector_field@@Base+0x1b0>
   3b8b4:	ldr	r2, [r0, #20]
   3b8b8:	ldr	r3, [r0, #16]
   3b8bc:	cmp	r2, r3
   3b8c0:	bcc	3b8d0 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   3b8c4:	ldr	r3, [r0, #44]	; 0x2c
   3b8c8:	mov	r1, #0
   3b8cc:	blx	r3
   3b8d0:	ldr	r3, [r4, #20]
   3b8d4:	mov	r2, #34	; 0x22
   3b8d8:	strb	r2, [r3]
   3b8dc:	ldrb	r3, [r4, #26]
   3b8e0:	ldr	r0, [r4, #20]
   3b8e4:	cmp	r3, #0
   3b8e8:	addeq	r0, r0, #1
   3b8ec:	str	r0, [r4, #20]
   3b8f0:	ldr	r3, [sp, #64]	; 0x40
   3b8f4:	add	r3, r0, r3
   3b8f8:	ldr	r2, [r4, #16]
   3b8fc:	cmp	r2, r3
   3b900:	bls	3ba30 <flatcc_json_printer_table_vector_field@@Base+0x210>
   3b904:	ldr	r2, [sp, #64]	; 0x40
   3b908:	mov	r1, r5
   3b90c:	bl	14524 <memcpy@plt>
   3b910:	ldr	r3, [r4, #20]
   3b914:	ldr	r2, [sp, #64]	; 0x40
   3b918:	add	r3, r3, r2
   3b91c:	str	r3, [r4, #20]
   3b920:	ldr	r3, [r4, #20]
   3b924:	mov	r2, #34	; 0x22
   3b928:	strb	r2, [r3]
   3b92c:	ldrb	r3, [r4, #26]
   3b930:	clz	r3, r3
   3b934:	lsr	r3, r3, #5
   3b938:	ldr	r1, [r4, #20]
   3b93c:	add	r2, r1, r3
   3b940:	add	r2, r2, #1
   3b944:	str	r2, [r4, #20]
   3b948:	mov	r2, #58	; 0x3a
   3b94c:	strb	r2, [r1, r3]
   3b950:	ldr	r3, [r4, #20]
   3b954:	mov	r2, #32
   3b958:	strb	r2, [r3]
   3b95c:	ldrb	r3, [r4, #25]
   3b960:	adds	r3, r3, #0
   3b964:	movne	r3, #1
   3b968:	ldr	r0, [r4, #20]
   3b96c:	add	r2, r0, r3
   3b970:	ldr	r1, [r4, #32]
   3b974:	add	r1, r1, #1
   3b978:	str	r1, [r4, #32]
   3b97c:	add	r2, r2, #1
   3b980:	str	r2, [r4, #20]
   3b984:	mov	r2, #91	; 0x5b
   3b988:	strb	r2, [r0, r3]
   3b98c:	cmp	r6, #0
   3b990:	bne	3ba44 <flatcc_json_printer_table_vector_field@@Base+0x224>
   3b994:	ldrb	r3, [r4, #25]
   3b998:	cmp	r3, #0
   3b99c:	bne	3bc78 <flatcc_json_printer_table_vector_field@@Base+0x458>
   3b9a0:	ldr	r3, [r4, #20]
   3b9a4:	add	r2, r3, #1
   3b9a8:	str	r2, [r4, #20]
   3b9ac:	mov	r2, #93	; 0x5d
   3b9b0:	strb	r2, [r3]
   3b9b4:	add	sp, sp, #28
   3b9b8:	ldrd	r4, [sp]
   3b9bc:	ldrd	r6, [sp, #8]
   3b9c0:	ldrd	r8, [sp, #16]
   3b9c4:	ldrd	sl, [sp, #24]
   3b9c8:	add	sp, sp, #32
   3b9cc:	pop	{pc}		; (ldr pc, [sp], #4)
   3b9d0:	ldr	r3, [r0, #20]
   3b9d4:	add	r2, r3, #1
   3b9d8:	str	r2, [r0, #20]
   3b9dc:	mov	r2, #10
   3b9e0:	strb	r2, [r3]
   3b9e4:	ldrb	r3, [r0, #25]
   3b9e8:	ldr	r9, [r0, #32]
   3b9ec:	mul	r9, r9, r3
   3b9f0:	ldr	r0, [r0, #20]
   3b9f4:	add	r3, r0, r9
   3b9f8:	ldr	r2, [r4, #16]
   3b9fc:	cmp	r2, r3
   3ba00:	bcs	3ba14 <flatcc_json_printer_table_vector_field@@Base+0x1f4>
   3ba04:	mov	r1, r9
   3ba08:	mov	r0, r4
   3ba0c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3ba10:	b	3b8d0 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   3ba14:	mov	r2, r9
   3ba18:	mov	r1, #32
   3ba1c:	bl	1459c <memset@plt>
   3ba20:	ldr	r3, [r4, #20]
   3ba24:	add	r9, r3, r9
   3ba28:	str	r9, [r4, #20]
   3ba2c:	b	3b8d0 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   3ba30:	ldr	r2, [sp, #64]	; 0x40
   3ba34:	mov	r1, r5
   3ba38:	mov	r0, r4
   3ba3c:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3ba40:	b	3b920 <flatcc_json_printer_table_vector_field@@Base+0x100>
   3ba44:	add	r5, r8, #4
   3ba48:	ldr	r3, [r7, #12]
   3ba4c:	subs	r2, r3, #1
   3ba50:	beq	3bae4 <flatcc_json_printer_table_vector_field@@Base+0x2c4>
   3ba54:	ldr	r0, [r8, #4]
   3ba58:	add	r3, r5, r0
   3ba5c:	ldr	r1, [r4, #32]
   3ba60:	add	r1, r1, #1
   3ba64:	str	r1, [r4, #32]
   3ba68:	ldr	r1, [r4, #20]
   3ba6c:	add	ip, r1, #1
   3ba70:	str	ip, [r4, #20]
   3ba74:	mov	ip, #123	; 0x7b
   3ba78:	strb	ip, [r1]
   3ba7c:	mov	r1, #0
   3ba80:	str	r1, [sp, #20]
   3ba84:	str	r2, [sp, #16]
   3ba88:	str	r3, [sp, #4]
   3ba8c:	ldr	r2, [r5, r0]
   3ba90:	sub	r3, r3, r2
   3ba94:	str	r3, [sp, #8]
   3ba98:	ldrh	r3, [r3]
   3ba9c:	str	r3, [sp, #12]
   3baa0:	add	r1, sp, #4
   3baa4:	mov	r0, r4
   3baa8:	ldr	r3, [sp, #68]	; 0x44
   3baac:	blx	r3
   3bab0:	ldrb	r3, [r4, #25]
   3bab4:	cmp	r3, #0
   3bab8:	bne	3baf8 <flatcc_json_printer_table_vector_field@@Base+0x2d8>
   3babc:	ldr	r3, [r4, #20]
   3bac0:	add	r2, r3, #1
   3bac4:	str	r2, [r4, #20]
   3bac8:	mov	r2, #125	; 0x7d
   3bacc:	strb	r2, [r3]
   3bad0:	sub	r6, r6, #1
   3bad4:	mov	r9, #44	; 0x2c
   3bad8:	mov	fp, #123	; 0x7b
   3badc:	mov	sl, #0
   3bae0:	b	3bba0 <flatcc_json_printer_table_vector_field@@Base+0x380>
   3bae4:	ldr	r3, [r4, #36]	; 0x24
   3bae8:	cmp	r3, #0
   3baec:	moveq	r3, #2
   3baf0:	streq	r3, [r4, #36]	; 0x24
   3baf4:	b	3bad0 <flatcc_json_printer_table_vector_field@@Base+0x2b0>
   3baf8:	ldr	r3, [r4, #20]
   3bafc:	add	r2, r3, #1
   3bb00:	str	r2, [r4, #20]
   3bb04:	mov	r2, #10
   3bb08:	strb	r2, [r3]
   3bb0c:	ldr	r8, [r4, #32]
   3bb10:	sub	r8, r8, #1
   3bb14:	str	r8, [r4, #32]
   3bb18:	ldrb	r3, [r4, #25]
   3bb1c:	mul	r8, r8, r3
   3bb20:	ldr	r0, [r4, #20]
   3bb24:	add	r3, r0, r8
   3bb28:	ldr	r2, [r4, #16]
   3bb2c:	cmp	r2, r3
   3bb30:	bcs	3bb44 <flatcc_json_printer_table_vector_field@@Base+0x324>
   3bb34:	mov	r1, r8
   3bb38:	mov	r0, r4
   3bb3c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3bb40:	b	3babc <flatcc_json_printer_table_vector_field@@Base+0x29c>
   3bb44:	mov	r2, r8
   3bb48:	mov	r1, #32
   3bb4c:	bl	1459c <memset@plt>
   3bb50:	ldr	r3, [r4, #20]
   3bb54:	add	r8, r3, r8
   3bb58:	str	r8, [r4, #20]
   3bb5c:	b	3babc <flatcc_json_printer_table_vector_field@@Base+0x29c>
   3bb60:	ldr	r3, [r4, #36]	; 0x24
   3bb64:	cmp	r3, #0
   3bb68:	moveq	r3, #2
   3bb6c:	streq	r3, [r4, #36]	; 0x24
   3bb70:	b	3bba0 <flatcc_json_printer_table_vector_field@@Base+0x380>
   3bb74:	mov	r2, r8
   3bb78:	mov	r1, #32
   3bb7c:	bl	1459c <memset@plt>
   3bb80:	ldr	r3, [r4, #20]
   3bb84:	add	r8, r3, r8
   3bb88:	str	r8, [r4, #20]
   3bb8c:	ldr	r3, [r4, #20]
   3bb90:	add	r2, r3, #1
   3bb94:	str	r2, [r4, #20]
   3bb98:	mov	r2, #125	; 0x7d
   3bb9c:	strb	r2, [r3]
   3bba0:	sub	r6, r6, #1
   3bba4:	cmn	r6, #1
   3bba8:	beq	3b994 <flatcc_json_printer_table_vector_field@@Base+0x174>
   3bbac:	add	r5, r5, #4
   3bbb0:	ldr	r3, [r4, #20]
   3bbb4:	add	r2, r3, #1
   3bbb8:	str	r2, [r4, #20]
   3bbbc:	strb	r9, [r3]
   3bbc0:	ldr	r3, [r7, #12]
   3bbc4:	subs	r3, r3, #1
   3bbc8:	beq	3bb60 <flatcc_json_printer_table_vector_field@@Base+0x340>
   3bbcc:	ldr	r0, [r5]
   3bbd0:	add	r2, r5, r0
   3bbd4:	ldr	r1, [r4, #32]
   3bbd8:	add	r1, r1, #1
   3bbdc:	str	r1, [r4, #32]
   3bbe0:	ldr	r1, [r4, #20]
   3bbe4:	add	ip, r1, #1
   3bbe8:	str	ip, [r4, #20]
   3bbec:	strb	fp, [r1]
   3bbf0:	str	sl, [sp, #20]
   3bbf4:	str	r3, [sp, #16]
   3bbf8:	str	r2, [sp, #4]
   3bbfc:	ldr	r3, [r5, r0]
   3bc00:	sub	r3, r2, r3
   3bc04:	str	r3, [sp, #8]
   3bc08:	ldrh	r3, [r3]
   3bc0c:	str	r3, [sp, #12]
   3bc10:	add	r1, sp, #4
   3bc14:	mov	r0, r4
   3bc18:	ldr	r3, [sp, #68]	; 0x44
   3bc1c:	blx	r3
   3bc20:	ldrb	r3, [r4, #25]
   3bc24:	cmp	r3, #0
   3bc28:	beq	3bb8c <flatcc_json_printer_table_vector_field@@Base+0x36c>
   3bc2c:	ldr	r3, [r4, #20]
   3bc30:	add	r2, r3, #1
   3bc34:	str	r2, [r4, #20]
   3bc38:	mov	r2, #10
   3bc3c:	strb	r2, [r3]
   3bc40:	ldr	r8, [r4, #32]
   3bc44:	sub	r8, r8, #1
   3bc48:	str	r8, [r4, #32]
   3bc4c:	ldrb	r3, [r4, #25]
   3bc50:	mul	r8, r8, r3
   3bc54:	ldr	r0, [r4, #20]
   3bc58:	add	r3, r0, r8
   3bc5c:	ldr	r2, [r4, #16]
   3bc60:	cmp	r2, r3
   3bc64:	bcs	3bb74 <flatcc_json_printer_table_vector_field@@Base+0x354>
   3bc68:	mov	r1, r8
   3bc6c:	mov	r0, r4
   3bc70:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3bc74:	b	3bb8c <flatcc_json_printer_table_vector_field@@Base+0x36c>
   3bc78:	ldr	r3, [r4, #20]
   3bc7c:	add	r2, r3, #1
   3bc80:	str	r2, [r4, #20]
   3bc84:	mov	r2, #10
   3bc88:	strb	r2, [r3]
   3bc8c:	ldr	r5, [r4, #32]
   3bc90:	sub	r5, r5, #1
   3bc94:	str	r5, [r4, #32]
   3bc98:	ldrb	r3, [r4, #25]
   3bc9c:	mul	r5, r5, r3
   3bca0:	ldr	r0, [r4, #20]
   3bca4:	add	r3, r0, r5
   3bca8:	ldr	r2, [r4, #16]
   3bcac:	cmp	r2, r3
   3bcb0:	bcs	3bcc4 <flatcc_json_printer_table_vector_field@@Base+0x4a4>
   3bcb4:	mov	r1, r5
   3bcb8:	mov	r0, r4
   3bcbc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3bcc0:	b	3b9a0 <flatcc_json_printer_table_vector_field@@Base+0x180>
   3bcc4:	mov	r2, r5
   3bcc8:	mov	r1, #32
   3bccc:	bl	1459c <memset@plt>
   3bcd0:	ldr	r3, [r4, #20]
   3bcd4:	add	r5, r3, r5
   3bcd8:	str	r5, [r4, #20]
   3bcdc:	b	3b9a0 <flatcc_json_printer_table_vector_field@@Base+0x180>

0003bce0 <flatcc_json_printer_union_vector_field@@Base>:
   3bce0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   3bce4:	strd	r6, [sp, #8]
   3bce8:	strd	r8, [sp, #16]
   3bcec:	strd	sl, [sp, #24]
   3bcf0:	str	lr, [sp, #32]
   3bcf4:	sub	sp, sp, #140	; 0x8c
   3bcf8:	mov	r4, r0
   3bcfc:	mov	r5, r1
   3bd00:	str	r2, [sp, #12]
   3bd04:	str	r3, [sp, #8]
   3bd08:	ldr	r6, [sp, #176]	; 0xb0
   3bd0c:	add	r3, r2, #1
   3bd10:	lsl	r3, r3, #1
   3bd14:	ldr	r2, [r1, #8]
   3bd18:	cmp	r3, r2
   3bd1c:	movge	r7, #0
   3bd20:	bge	3bd3c <flatcc_json_printer_union_vector_field@@Base+0x5c>
   3bd24:	ldr	r1, [r1, #4]
   3bd28:	ldrh	r1, [r1, r3]
   3bd2c:	cmp	r1, #0
   3bd30:	ldrne	r7, [r5]
   3bd34:	addne	r7, r7, r1
   3bd38:	moveq	r7, #0
   3bd3c:	add	r3, r3, #2
   3bd40:	cmp	r3, r2
   3bd44:	bge	3c00c <flatcc_json_printer_union_vector_field@@Base+0x32c>
   3bd48:	ldr	r2, [r5, #4]
   3bd4c:	ldrh	r9, [r2, r3]
   3bd50:	cmp	r9, #0
   3bd54:	beq	3c00c <flatcc_json_printer_union_vector_field@@Base+0x32c>
   3bd58:	ldr	sl, [r5]
   3bd5c:	add	fp, sl, r9
   3bd60:	ldr	r3, [r5, #12]
   3bd64:	str	r3, [sp, #20]
   3bd68:	cmp	r6, #100	; 0x64
   3bd6c:	bgt	3c01c <flatcc_json_printer_union_vector_field@@Base+0x33c>
   3bd70:	add	r8, sp, #28
   3bd74:	mov	r2, r6
   3bd78:	ldr	r1, [sp, #8]
   3bd7c:	mov	r0, r8
   3bd80:	bl	14524 <memcpy@plt>
   3bd84:	add	r2, r8, r6
   3bd88:	movw	r3, #13692	; 0x357c
   3bd8c:	movt	r3, #4
   3bd90:	ldr	r1, [r3]
   3bd94:	str	r1, [r8, r6]
   3bd98:	ldrb	r3, [r3, #4]
   3bd9c:	strb	r3, [r2, #4]
   3bda0:	cmp	fp, #0
   3bda4:	cmpne	r7, #0
   3bda8:	bne	3bdc8 <flatcc_json_printer_union_vector_field@@Base+0xe8>
   3bdac:	add	sp, sp, #140	; 0x8c
   3bdb0:	ldrd	r4, [sp]
   3bdb4:	ldrd	r6, [sp, #8]
   3bdb8:	ldrd	r8, [sp, #16]
   3bdbc:	ldrd	sl, [sp, #24]
   3bdc0:	add	sp, sp, #32
   3bdc4:	pop	{pc}		; (ldr pc, [sp], #4)
   3bdc8:	ldr	r3, [sp, #180]	; 0xb4
   3bdcc:	str	r3, [sp, #4]
   3bdd0:	add	r3, r6, #5
   3bdd4:	str	r3, [sp]
   3bdd8:	add	r3, sp, #28
   3bddc:	ldr	r2, [sp, #12]
   3bde0:	sub	r2, r2, #1
   3bde4:	mov	r1, r5
   3bde8:	mov	r0, r4
   3bdec:	bl	39714 <flatcc_json_printer_utype_enum_vector_field@@Base>
   3bdf0:	ldr	r3, [r5, #16]
   3bdf4:	add	r2, r3, #1
   3bdf8:	str	r2, [r5, #16]
   3bdfc:	cmp	r3, #0
   3be00:	beq	3be18 <flatcc_json_printer_union_vector_field@@Base+0x138>
   3be04:	ldr	r3, [r4, #20]
   3be08:	add	r2, r3, #1
   3be0c:	str	r2, [r4, #20]
   3be10:	mov	r2, #44	; 0x2c
   3be14:	strb	r2, [r3]
   3be18:	ldr	r3, [sl, r9]
   3be1c:	add	r5, fp, r3
   3be20:	ldr	r8, [r7]
   3be24:	ldr	r9, [fp, r3]
   3be28:	mov	r2, r6
   3be2c:	ldr	r1, [sp, #8]
   3be30:	mov	r0, r4
   3be34:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3be38:	ldr	r3, [r4, #32]
   3be3c:	add	r3, r3, #1
   3be40:	str	r3, [r4, #32]
   3be44:	ldr	r3, [r4, #20]
   3be48:	add	r2, r3, #1
   3be4c:	str	r2, [r4, #20]
   3be50:	mov	r2, #91	; 0x5b
   3be54:	strb	r2, [r3]
   3be58:	cmp	r9, #0
   3be5c:	beq	3bf80 <flatcc_json_printer_union_vector_field@@Base+0x2a0>
   3be60:	add	r7, r7, r8
   3be64:	add	r5, r5, #4
   3be68:	ldrb	r3, [r7, #4]
   3be6c:	cmp	r3, #0
   3be70:	beq	3bea8 <flatcc_json_printer_union_vector_field@@Base+0x1c8>
   3be74:	strb	r3, [sp, #24]
   3be78:	str	r5, [sp, #16]
   3be7c:	add	r1, sp, #16
   3be80:	mov	r0, r4
   3be84:	ldr	r3, [sp, #184]	; 0xb8
   3be88:	blx	r3
   3be8c:	add	r6, r7, #4
   3be90:	add	r9, r9, #3
   3be94:	add	r7, r7, r9
   3be98:	mov	r8, #44	; 0x2c
   3be9c:	mov	sl, #110	; 0x6e
   3bea0:	mov	r9, #117	; 0x75
   3bea4:	b	3bf3c <flatcc_json_printer_union_vector_field@@Base+0x25c>
   3bea8:	ldr	r3, [r4, #20]
   3beac:	add	r2, r3, #1
   3beb0:	str	r2, [r4, #20]
   3beb4:	mov	r2, #110	; 0x6e
   3beb8:	strb	r2, [r3]
   3bebc:	ldr	r3, [r4, #20]
   3bec0:	add	r2, r3, #1
   3bec4:	str	r2, [r4, #20]
   3bec8:	mov	r2, #117	; 0x75
   3becc:	strb	r2, [r3]
   3bed0:	ldr	r3, [r4, #20]
   3bed4:	add	r2, r3, #1
   3bed8:	str	r2, [r4, #20]
   3bedc:	mov	r2, #108	; 0x6c
   3bee0:	strb	r2, [r3]
   3bee4:	ldr	r3, [r4, #20]
   3bee8:	add	r1, r3, #1
   3beec:	str	r1, [r4, #20]
   3bef0:	strb	r2, [r3]
   3bef4:	b	3be8c <flatcc_json_printer_union_vector_field@@Base+0x1ac>
   3bef8:	ldr	r3, [r4, #20]
   3befc:	add	r2, r3, #1
   3bf00:	str	r2, [r4, #20]
   3bf04:	strb	sl, [r3]
   3bf08:	ldr	r3, [r4, #20]
   3bf0c:	add	r2, r3, #1
   3bf10:	str	r2, [r4, #20]
   3bf14:	strb	r9, [r3]
   3bf18:	ldr	r3, [r4, #20]
   3bf1c:	add	r2, r3, #1
   3bf20:	str	r2, [r4, #20]
   3bf24:	mov	r2, #108	; 0x6c
   3bf28:	strb	r2, [r3]
   3bf2c:	ldr	r3, [r4, #20]
   3bf30:	add	r1, r3, #1
   3bf34:	str	r1, [r4, #20]
   3bf38:	strb	r2, [r3]
   3bf3c:	cmp	r6, r7
   3bf40:	beq	3bf80 <flatcc_json_printer_union_vector_field@@Base+0x2a0>
   3bf44:	add	r5, r5, #4
   3bf48:	ldrb	r2, [r6, #1]!
   3bf4c:	ldr	r3, [r4, #20]
   3bf50:	add	r1, r3, #1
   3bf54:	str	r1, [r4, #20]
   3bf58:	strb	r8, [r3]
   3bf5c:	cmp	r2, #0
   3bf60:	beq	3bef8 <flatcc_json_printer_union_vector_field@@Base+0x218>
   3bf64:	strb	r2, [sp, #24]
   3bf68:	str	r5, [sp, #16]
   3bf6c:	add	r1, sp, #16
   3bf70:	mov	r0, r4
   3bf74:	ldr	r3, [sp, #184]	; 0xb8
   3bf78:	blx	r3
   3bf7c:	b	3bf3c <flatcc_json_printer_union_vector_field@@Base+0x25c>
   3bf80:	ldrb	r3, [r4, #25]
   3bf84:	cmp	r3, #0
   3bf88:	bne	3bfa4 <flatcc_json_printer_union_vector_field@@Base+0x2c4>
   3bf8c:	ldr	r3, [r4, #20]
   3bf90:	add	r2, r3, #1
   3bf94:	str	r2, [r4, #20]
   3bf98:	mov	r2, #93	; 0x5d
   3bf9c:	strb	r2, [r3]
   3bfa0:	b	3bdac <flatcc_json_printer_union_vector_field@@Base+0xcc>
   3bfa4:	ldr	r3, [r4, #20]
   3bfa8:	add	r2, r3, #1
   3bfac:	str	r2, [r4, #20]
   3bfb0:	mov	r2, #10
   3bfb4:	strb	r2, [r3]
   3bfb8:	ldr	r5, [r4, #32]
   3bfbc:	sub	r5, r5, #1
   3bfc0:	str	r5, [r4, #32]
   3bfc4:	ldrb	r3, [r4, #25]
   3bfc8:	mul	r5, r5, r3
   3bfcc:	ldr	r0, [r4, #20]
   3bfd0:	add	r3, r0, r5
   3bfd4:	ldr	r2, [r4, #16]
   3bfd8:	cmp	r2, r3
   3bfdc:	bcs	3bff0 <flatcc_json_printer_union_vector_field@@Base+0x310>
   3bfe0:	mov	r1, r5
   3bfe4:	mov	r0, r4
   3bfe8:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3bfec:	b	3bf8c <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   3bff0:	mov	r2, r5
   3bff4:	mov	r1, #32
   3bff8:	bl	1459c <memset@plt>
   3bffc:	ldr	r3, [r4, #20]
   3c000:	add	r5, r3, r5
   3c004:	str	r5, [r4, #20]
   3c008:	b	3bf8c <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   3c00c:	ldr	r3, [r5, #12]
   3c010:	str	r3, [sp, #20]
   3c014:	cmp	r6, #100	; 0x64
   3c018:	ble	3bdac <flatcc_json_printer_union_vector_field@@Base+0xcc>
   3c01c:	ldr	r3, [r4, #36]	; 0x24
   3c020:	cmp	r3, #0
   3c024:	moveq	r3, #1
   3c028:	streq	r3, [r4, #36]	; 0x24
   3c02c:	ldr	r3, [pc, #20]	; 3c048 <flatcc_json_printer_union_vector_field@@Base+0x368>
   3c030:	movw	r2, #843	; 0x34b
   3c034:	movw	r1, #13308	; 0x33fc
   3c038:	movt	r1, #4
   3c03c:	movw	r0, #13664	; 0x3560
   3c040:	movt	r0, #4
   3c044:	bl	145f0 <__assert_fail@plt>
   3c048:	andeq	r3, r4, ip, lsr #6

0003c04c <flatcc_json_printer_table_field@@Base>:
   3c04c:	add	r2, r2, #2
   3c050:	lsl	r2, r2, #1
   3c054:	ldr	ip, [r1, #8]
   3c058:	cmp	r2, ip
   3c05c:	bxge	lr
   3c060:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c064:	strd	r6, [sp, #8]
   3c068:	strd	r8, [sp, #16]
   3c06c:	str	sl, [sp, #24]
   3c070:	str	lr, [sp, #28]
   3c074:	sub	sp, sp, #24
   3c078:	ldr	ip, [r1, #4]
   3c07c:	ldrh	r6, [ip, r2]
   3c080:	cmp	r6, #0
   3c084:	beq	3c218 <flatcc_json_printer_table_field@@Base+0x1cc>
   3c088:	ldr	r7, [r1]
   3c08c:	adds	r8, r7, r6
   3c090:	beq	3c218 <flatcc_json_printer_table_field@@Base+0x1cc>
   3c094:	ldr	r2, [r1, #16]
   3c098:	add	ip, r2, #1
   3c09c:	str	ip, [r1, #16]
   3c0a0:	cmp	r2, #0
   3c0a4:	beq	3c0bc <flatcc_json_printer_table_field@@Base+0x70>
   3c0a8:	ldr	r2, [r0, #20]
   3c0ac:	add	ip, r2, #1
   3c0b0:	str	ip, [r0, #20]
   3c0b4:	mov	ip, #44	; 0x2c
   3c0b8:	strb	ip, [r2]
   3c0bc:	mov	r9, r3
   3c0c0:	mov	r5, r1
   3c0c4:	mov	r4, r0
   3c0c8:	ldrb	r3, [r0, #25]
   3c0cc:	cmp	r3, #0
   3c0d0:	bne	3c234 <flatcc_json_printer_table_field@@Base+0x1e8>
   3c0d4:	ldr	r2, [r0, #20]
   3c0d8:	ldr	r3, [r0, #16]
   3c0dc:	cmp	r2, r3
   3c0e0:	bcc	3c0f0 <flatcc_json_printer_table_field@@Base+0xa4>
   3c0e4:	ldr	r3, [r0, #44]	; 0x2c
   3c0e8:	mov	r1, #0
   3c0ec:	blx	r3
   3c0f0:	ldr	r3, [r4, #20]
   3c0f4:	mov	r2, #34	; 0x22
   3c0f8:	strb	r2, [r3]
   3c0fc:	ldrb	r3, [r4, #26]
   3c100:	ldr	r0, [r4, #20]
   3c104:	cmp	r3, #0
   3c108:	addeq	r0, r0, #1
   3c10c:	str	r0, [r4, #20]
   3c110:	ldr	r3, [sp, #56]	; 0x38
   3c114:	add	r3, r0, r3
   3c118:	ldr	r2, [r4, #16]
   3c11c:	cmp	r2, r3
   3c120:	bls	3c294 <flatcc_json_printer_table_field@@Base+0x248>
   3c124:	ldr	r2, [sp, #56]	; 0x38
   3c128:	mov	r1, r9
   3c12c:	bl	14524 <memcpy@plt>
   3c130:	ldr	r3, [r4, #20]
   3c134:	ldr	r2, [sp, #56]	; 0x38
   3c138:	add	r3, r3, r2
   3c13c:	str	r3, [r4, #20]
   3c140:	ldr	r3, [r4, #20]
   3c144:	mov	r2, #34	; 0x22
   3c148:	strb	r2, [r3]
   3c14c:	ldrb	r3, [r4, #26]
   3c150:	clz	r3, r3
   3c154:	lsr	r3, r3, #5
   3c158:	ldr	r1, [r4, #20]
   3c15c:	add	r2, r1, r3
   3c160:	add	r2, r2, #1
   3c164:	str	r2, [r4, #20]
   3c168:	mov	r2, #58	; 0x3a
   3c16c:	strb	r2, [r1, r3]
   3c170:	ldr	r3, [r4, #20]
   3c174:	mov	r2, #32
   3c178:	strb	r2, [r3]
   3c17c:	ldrb	r0, [r4, #25]
   3c180:	adds	r0, r0, #0
   3c184:	movne	r0, #1
   3c188:	ldr	lr, [r4, #20]
   3c18c:	add	r3, lr, r0
   3c190:	str	r3, [r4, #20]
   3c194:	ldr	r2, [r5, #12]
   3c198:	subs	r1, r2, #1
   3c19c:	beq	3c2a8 <flatcc_json_printer_table_field@@Base+0x25c>
   3c1a0:	ldr	r5, [r7, r6]
   3c1a4:	add	r2, r8, r5
   3c1a8:	ldr	ip, [r4, #32]
   3c1ac:	add	ip, ip, #1
   3c1b0:	str	ip, [r4, #32]
   3c1b4:	add	r3, r3, #1
   3c1b8:	str	r3, [r4, #20]
   3c1bc:	mov	r3, #123	; 0x7b
   3c1c0:	strb	r3, [lr, r0]
   3c1c4:	mov	r3, #0
   3c1c8:	str	r3, [sp, #20]
   3c1cc:	str	r1, [sp, #16]
   3c1d0:	str	r2, [sp, #4]
   3c1d4:	ldr	r3, [r8, r5]
   3c1d8:	sub	r3, r2, r3
   3c1dc:	str	r3, [sp, #8]
   3c1e0:	ldrh	r3, [r3]
   3c1e4:	str	r3, [sp, #12]
   3c1e8:	add	r1, sp, #4
   3c1ec:	mov	r0, r4
   3c1f0:	ldr	r3, [sp, #60]	; 0x3c
   3c1f4:	blx	r3
   3c1f8:	ldrb	r3, [r4, #25]
   3c1fc:	cmp	r3, #0
   3c200:	bne	3c2bc <flatcc_json_printer_table_field@@Base+0x270>
   3c204:	ldr	r3, [r4, #20]
   3c208:	add	r2, r3, #1
   3c20c:	str	r2, [r4, #20]
   3c210:	mov	r2, #125	; 0x7d
   3c214:	strb	r2, [r3]
   3c218:	add	sp, sp, #24
   3c21c:	ldrd	r4, [sp]
   3c220:	ldrd	r6, [sp, #8]
   3c224:	ldrd	r8, [sp, #16]
   3c228:	ldr	sl, [sp, #24]
   3c22c:	add	sp, sp, #28
   3c230:	pop	{pc}		; (ldr pc, [sp], #4)
   3c234:	ldr	r3, [r0, #20]
   3c238:	add	r2, r3, #1
   3c23c:	str	r2, [r0, #20]
   3c240:	mov	r2, #10
   3c244:	strb	r2, [r3]
   3c248:	ldrb	r3, [r0, #25]
   3c24c:	ldr	sl, [r0, #32]
   3c250:	mul	sl, sl, r3
   3c254:	ldr	r0, [r0, #20]
   3c258:	add	r3, r0, sl
   3c25c:	ldr	r2, [r4, #16]
   3c260:	cmp	r2, r3
   3c264:	bcs	3c278 <flatcc_json_printer_table_field@@Base+0x22c>
   3c268:	mov	r1, sl
   3c26c:	mov	r0, r4
   3c270:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3c274:	b	3c0f0 <flatcc_json_printer_table_field@@Base+0xa4>
   3c278:	mov	r2, sl
   3c27c:	mov	r1, #32
   3c280:	bl	1459c <memset@plt>
   3c284:	ldr	r3, [r4, #20]
   3c288:	add	sl, r3, sl
   3c28c:	str	sl, [r4, #20]
   3c290:	b	3c0f0 <flatcc_json_printer_table_field@@Base+0xa4>
   3c294:	ldr	r2, [sp, #56]	; 0x38
   3c298:	mov	r1, r9
   3c29c:	mov	r0, r4
   3c2a0:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3c2a4:	b	3c140 <flatcc_json_printer_table_field@@Base+0xf4>
   3c2a8:	ldr	r3, [r4, #36]	; 0x24
   3c2ac:	cmp	r3, #0
   3c2b0:	moveq	r3, #2
   3c2b4:	streq	r3, [r4, #36]	; 0x24
   3c2b8:	b	3c218 <flatcc_json_printer_table_field@@Base+0x1cc>
   3c2bc:	ldr	r3, [r4, #20]
   3c2c0:	add	r2, r3, #1
   3c2c4:	str	r2, [r4, #20]
   3c2c8:	mov	r2, #10
   3c2cc:	strb	r2, [r3]
   3c2d0:	ldr	r5, [r4, #32]
   3c2d4:	sub	r5, r5, #1
   3c2d8:	str	r5, [r4, #32]
   3c2dc:	ldrb	r3, [r4, #25]
   3c2e0:	mul	r5, r5, r3
   3c2e4:	ldr	r0, [r4, #20]
   3c2e8:	add	r3, r0, r5
   3c2ec:	ldr	r2, [r4, #16]
   3c2f0:	cmp	r2, r3
   3c2f4:	bcs	3c308 <flatcc_json_printer_table_field@@Base+0x2bc>
   3c2f8:	mov	r1, r5
   3c2fc:	mov	r0, r4
   3c300:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3c304:	b	3c204 <flatcc_json_printer_table_field@@Base+0x1b8>
   3c308:	mov	r2, r5
   3c30c:	mov	r1, #32
   3c310:	bl	1459c <memset@plt>
   3c314:	ldr	r3, [r4, #20]
   3c318:	add	r5, r3, r5
   3c31c:	str	r5, [r4, #20]
   3c320:	b	3c204 <flatcc_json_printer_table_field@@Base+0x1b8>

0003c324 <flatcc_json_printer_union_field@@Base>:
   3c324:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3c328:	strd	r6, [sp, #8]
   3c32c:	strd	r8, [sp, #16]
   3c330:	str	sl, [sp, #24]
   3c334:	str	lr, [sp, #28]
   3c338:	sub	sp, sp, #16
   3c33c:	ldr	r6, [sp, #48]	; 0x30
   3c340:	add	r2, r2, #1
   3c344:	lsl	r2, r2, #1
   3c348:	ldr	lr, [r1, #8]
   3c34c:	cmp	r2, lr
   3c350:	movge	ip, #0
   3c354:	bge	3c370 <flatcc_json_printer_union_field@@Base+0x4c>
   3c358:	ldr	ip, [r1, #4]
   3c35c:	ldrh	r4, [ip, r2]
   3c360:	cmp	r4, #0
   3c364:	ldrne	ip, [r1]
   3c368:	addne	ip, ip, r4
   3c36c:	moveq	ip, #0
   3c370:	add	r2, r2, #2
   3c374:	cmp	r2, lr
   3c378:	bge	3c4f0 <flatcc_json_printer_union_field@@Base+0x1cc>
   3c37c:	ldr	lr, [r1, #4]
   3c380:	ldrh	r2, [lr, r2]
   3c384:	cmp	r2, #0
   3c388:	beq	3c4f0 <flatcc_json_printer_union_field@@Base+0x1cc>
   3c38c:	ldr	r8, [r1]
   3c390:	adds	r8, r8, r2
   3c394:	moveq	r2, #1
   3c398:	movne	r2, #0
   3c39c:	cmp	ip, #0
   3c3a0:	moveq	r2, #1
   3c3a4:	cmp	r2, #0
   3c3a8:	bne	3c4f0 <flatcc_json_printer_union_field@@Base+0x1cc>
   3c3ac:	ldrb	r9, [ip]
   3c3b0:	ldr	r2, [r1, #16]
   3c3b4:	add	ip, r2, #1
   3c3b8:	str	ip, [r1, #16]
   3c3bc:	cmp	r2, #0
   3c3c0:	beq	3c3d8 <flatcc_json_printer_union_field@@Base+0xb4>
   3c3c4:	ldr	r2, [r0, #20]
   3c3c8:	add	ip, r2, #1
   3c3cc:	str	ip, [r0, #20]
   3c3d0:	mov	ip, #44	; 0x2c
   3c3d4:	strb	ip, [r2]
   3c3d8:	mov	r7, r3
   3c3dc:	mov	r5, r1
   3c3e0:	mov	r4, r0
   3c3e4:	ldrb	r3, [r0, #25]
   3c3e8:	cmp	r3, #0
   3c3ec:	bne	3c50c <flatcc_json_printer_union_field@@Base+0x1e8>
   3c3f0:	ldr	r2, [r0, #20]
   3c3f4:	ldr	r3, [r0, #16]
   3c3f8:	cmp	r2, r3
   3c3fc:	bcc	3c40c <flatcc_json_printer_union_field@@Base+0xe8>
   3c400:	ldr	r3, [r0, #44]	; 0x2c
   3c404:	mov	r1, #0
   3c408:	blx	r3
   3c40c:	ldr	r3, [r4, #20]
   3c410:	mov	r2, #34	; 0x22
   3c414:	strb	r2, [r3]
   3c418:	ldrb	r3, [r4, #26]
   3c41c:	ldr	r0, [r4, #20]
   3c420:	cmp	r3, #0
   3c424:	addeq	r0, r0, #1
   3c428:	str	r0, [r4, #20]
   3c42c:	add	r3, r0, r6
   3c430:	ldr	r2, [r4, #16]
   3c434:	cmp	r2, r3
   3c438:	bls	3c56c <flatcc_json_printer_union_field@@Base+0x248>
   3c43c:	mov	r2, r6
   3c440:	mov	r1, r7
   3c444:	bl	14524 <memcpy@plt>
   3c448:	ldr	r3, [r4, #20]
   3c44c:	add	r3, r3, r6
   3c450:	str	r3, [r4, #20]
   3c454:	ldr	r3, [r4, #20]
   3c458:	add	r2, r3, #5
   3c45c:	ldr	r1, [r4, #16]
   3c460:	cmp	r1, r2
   3c464:	bhi	3c580 <flatcc_json_printer_union_field@@Base+0x25c>
   3c468:	mov	r2, #5
   3c46c:	movw	r1, #13692	; 0x357c
   3c470:	movt	r1, #4
   3c474:	mov	r0, r4
   3c478:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3c47c:	ldr	r3, [r4, #20]
   3c480:	mov	r2, #34	; 0x22
   3c484:	strb	r2, [r3]
   3c488:	ldrb	r3, [r4, #26]
   3c48c:	clz	r3, r3
   3c490:	lsr	r3, r3, #5
   3c494:	ldr	r1, [r4, #20]
   3c498:	add	r2, r1, r3
   3c49c:	add	r2, r2, #1
   3c4a0:	str	r2, [r4, #20]
   3c4a4:	mov	r2, #58	; 0x3a
   3c4a8:	strb	r2, [r1, r3]
   3c4ac:	ldr	r3, [r4, #20]
   3c4b0:	mov	r2, #32
   3c4b4:	strb	r2, [r3]
   3c4b8:	ldrb	r3, [r4, #25]
   3c4bc:	ldr	r1, [r4, #20]
   3c4c0:	cmp	r3, #0
   3c4c4:	addne	r1, r1, #1
   3c4c8:	str	r1, [r4, #20]
   3c4cc:	ldrb	r3, [r4, #27]
   3c4d0:	cmp	r3, #0
   3c4d4:	bne	3c5a8 <flatcc_json_printer_union_field@@Base+0x284>
   3c4d8:	mov	r1, r9
   3c4dc:	mov	r0, r4
   3c4e0:	ldr	r3, [sp, #52]	; 0x34
   3c4e4:	blx	r3
   3c4e8:	cmp	r9, #0
   3c4ec:	bne	3c5c0 <flatcc_json_printer_union_field@@Base+0x29c>
   3c4f0:	add	sp, sp, #16
   3c4f4:	ldrd	r4, [sp]
   3c4f8:	ldrd	r6, [sp, #8]
   3c4fc:	ldrd	r8, [sp, #16]
   3c500:	ldr	sl, [sp, #24]
   3c504:	add	sp, sp, #28
   3c508:	pop	{pc}		; (ldr pc, [sp], #4)
   3c50c:	ldr	r3, [r0, #20]
   3c510:	add	r2, r3, #1
   3c514:	str	r2, [r0, #20]
   3c518:	mov	r2, #10
   3c51c:	strb	r2, [r3]
   3c520:	ldrb	r3, [r0, #25]
   3c524:	ldr	sl, [r0, #32]
   3c528:	mul	sl, sl, r3
   3c52c:	ldr	r0, [r0, #20]
   3c530:	add	r3, r0, sl
   3c534:	ldr	r2, [r4, #16]
   3c538:	cmp	r2, r3
   3c53c:	bcs	3c550 <flatcc_json_printer_union_field@@Base+0x22c>
   3c540:	mov	r1, sl
   3c544:	mov	r0, r4
   3c548:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3c54c:	b	3c40c <flatcc_json_printer_union_field@@Base+0xe8>
   3c550:	mov	r2, sl
   3c554:	mov	r1, #32
   3c558:	bl	1459c <memset@plt>
   3c55c:	ldr	r3, [r4, #20]
   3c560:	add	sl, r3, sl
   3c564:	str	sl, [r4, #20]
   3c568:	b	3c40c <flatcc_json_printer_union_field@@Base+0xe8>
   3c56c:	mov	r2, r6
   3c570:	mov	r1, r7
   3c574:	mov	r0, r4
   3c578:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3c57c:	b	3c454 <flatcc_json_printer_union_field@@Base+0x130>
   3c580:	movw	r2, #13692	; 0x357c
   3c584:	movt	r2, #4
   3c588:	ldr	r1, [r2]
   3c58c:	str	r1, [r3]
   3c590:	ldrb	r2, [r2, #4]
   3c594:	strb	r2, [r3, #4]
   3c598:	ldr	r3, [r4, #20]
   3c59c:	add	r3, r3, #5
   3c5a0:	str	r3, [r4, #20]
   3c5a4:	b	3c47c <flatcc_json_printer_union_field@@Base+0x158>
   3c5a8:	mov	r0, r9
   3c5ac:	bl	2fb68 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   3c5b0:	ldr	r3, [r4, #20]
   3c5b4:	add	r0, r3, r0
   3c5b8:	str	r0, [r4, #20]
   3c5bc:	b	3c4e8 <flatcc_json_printer_union_field@@Base+0x1c4>
   3c5c0:	ldr	r3, [r4, #20]
   3c5c4:	add	r2, r3, #1
   3c5c8:	str	r2, [r4, #20]
   3c5cc:	mov	r2, #44	; 0x2c
   3c5d0:	strb	r2, [r3]
   3c5d4:	mov	r2, r6
   3c5d8:	mov	r1, r7
   3c5dc:	mov	r0, r4
   3c5e0:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3c5e4:	ldr	r3, [r5, #12]
   3c5e8:	str	r3, [sp, #8]
   3c5ec:	strb	r9, [sp, #12]
   3c5f0:	str	r8, [sp, #4]
   3c5f4:	add	r1, sp, #4
   3c5f8:	mov	r0, r4
   3c5fc:	ldr	r3, [sp, #56]	; 0x38
   3c600:	blx	r3
   3c604:	b	3c4f0 <flatcc_json_printer_union_field@@Base+0x1cc>

0003c608 <flatcc_json_printer_union_table@@Base>:
   3c608:	ldr	r3, [r1, #4]
   3c60c:	subs	ip, r3, #1
   3c610:	beq	3c6b0 <flatcc_json_printer_union_table@@Base+0xa8>
   3c614:	strd	r4, [sp, #-12]!
   3c618:	str	lr, [sp, #8]
   3c61c:	sub	sp, sp, #28
   3c620:	mov	r4, r0
   3c624:	ldr	r1, [r1]
   3c628:	ldr	lr, [r1]
   3c62c:	add	r3, r1, lr
   3c630:	ldr	r0, [r0, #32]
   3c634:	add	r0, r0, #1
   3c638:	str	r0, [r4, #32]
   3c63c:	ldr	r0, [r4, #20]
   3c640:	add	r5, r0, #1
   3c644:	str	r5, [r4, #20]
   3c648:	mov	r5, #123	; 0x7b
   3c64c:	strb	r5, [r0]
   3c650:	mov	r0, #0
   3c654:	str	r0, [sp, #20]
   3c658:	str	ip, [sp, #16]
   3c65c:	str	r3, [sp, #4]
   3c660:	ldr	r1, [r1, lr]
   3c664:	sub	r3, r3, r1
   3c668:	str	r3, [sp, #8]
   3c66c:	ldrh	r3, [r3]
   3c670:	str	r3, [sp, #12]
   3c674:	add	r1, sp, #4
   3c678:	mov	r0, r4
   3c67c:	blx	r2
   3c680:	ldrb	r3, [r4, #25]
   3c684:	cmp	r3, #0
   3c688:	bne	3c6c4 <flatcc_json_printer_union_table@@Base+0xbc>
   3c68c:	ldr	r3, [r4, #20]
   3c690:	add	r2, r3, #1
   3c694:	str	r2, [r4, #20]
   3c698:	mov	r2, #125	; 0x7d
   3c69c:	strb	r2, [r3]
   3c6a0:	add	sp, sp, #28
   3c6a4:	ldrd	r4, [sp]
   3c6a8:	add	sp, sp, #8
   3c6ac:	pop	{pc}		; (ldr pc, [sp], #4)
   3c6b0:	ldr	r3, [r0, #36]	; 0x24
   3c6b4:	cmp	r3, #0
   3c6b8:	moveq	r3, #2
   3c6bc:	streq	r3, [r0, #36]	; 0x24
   3c6c0:	bx	lr
   3c6c4:	ldr	r3, [r4, #20]
   3c6c8:	add	r2, r3, #1
   3c6cc:	str	r2, [r4, #20]
   3c6d0:	mov	r2, #10
   3c6d4:	strb	r2, [r3]
   3c6d8:	ldr	r5, [r4, #32]
   3c6dc:	sub	r5, r5, #1
   3c6e0:	str	r5, [r4, #32]
   3c6e4:	ldrb	r3, [r4, #25]
   3c6e8:	mul	r5, r5, r3
   3c6ec:	ldr	r0, [r4, #20]
   3c6f0:	add	r3, r0, r5
   3c6f4:	ldr	r2, [r4, #16]
   3c6f8:	cmp	r2, r3
   3c6fc:	bcs	3c710 <flatcc_json_printer_union_table@@Base+0x108>
   3c700:	mov	r1, r5
   3c704:	mov	r0, r4
   3c708:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3c70c:	b	3c68c <flatcc_json_printer_union_table@@Base+0x84>
   3c710:	mov	r2, r5
   3c714:	mov	r1, #32
   3c718:	bl	1459c <memset@plt>
   3c71c:	ldr	r3, [r4, #20]
   3c720:	add	r5, r3, r5
   3c724:	str	r5, [r4, #20]
   3c728:	b	3c68c <flatcc_json_printer_union_table@@Base+0x84>

0003c72c <flatcc_json_printer_union_struct@@Base>:
   3c72c:	strd	r4, [sp, #-16]!
   3c730:	str	r6, [sp, #8]
   3c734:	str	lr, [sp, #12]
   3c738:	mov	r4, r0
   3c73c:	ldr	r3, [r0, #32]
   3c740:	add	r3, r3, #1
   3c744:	str	r3, [r0, #32]
   3c748:	ldr	r3, [r0, #20]
   3c74c:	add	ip, r3, #1
   3c750:	str	ip, [r0, #20]
   3c754:	mov	ip, #123	; 0x7b
   3c758:	strb	ip, [r3]
   3c75c:	ldr	r3, [r1]
   3c760:	ldr	r1, [r3]
   3c764:	add	r1, r3, r1
   3c768:	blx	r2
   3c76c:	ldrb	r3, [r4, #25]
   3c770:	cmp	r3, #0
   3c774:	bne	3c79c <flatcc_json_printer_union_struct@@Base+0x70>
   3c778:	ldr	r3, [r4, #20]
   3c77c:	add	r2, r3, #1
   3c780:	str	r2, [r4, #20]
   3c784:	mov	r2, #125	; 0x7d
   3c788:	strb	r2, [r3]
   3c78c:	ldrd	r4, [sp]
   3c790:	ldr	r6, [sp, #8]
   3c794:	add	sp, sp, #12
   3c798:	pop	{pc}		; (ldr pc, [sp], #4)
   3c79c:	ldr	r3, [r4, #20]
   3c7a0:	add	r2, r3, #1
   3c7a4:	str	r2, [r4, #20]
   3c7a8:	mov	r2, #10
   3c7ac:	strb	r2, [r3]
   3c7b0:	ldr	r5, [r4, #32]
   3c7b4:	sub	r5, r5, #1
   3c7b8:	str	r5, [r4, #32]
   3c7bc:	ldrb	r3, [r4, #25]
   3c7c0:	mul	r5, r5, r3
   3c7c4:	ldr	r0, [r4, #20]
   3c7c8:	add	r3, r0, r5
   3c7cc:	ldr	r2, [r4, #16]
   3c7d0:	cmp	r2, r3
   3c7d4:	bcs	3c7e8 <flatcc_json_printer_union_struct@@Base+0xbc>
   3c7d8:	mov	r1, r5
   3c7dc:	mov	r0, r4
   3c7e0:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3c7e4:	b	3c778 <flatcc_json_printer_union_struct@@Base+0x4c>
   3c7e8:	mov	r2, r5
   3c7ec:	mov	r1, #32
   3c7f0:	bl	1459c <memset@plt>
   3c7f4:	ldr	r3, [r4, #20]
   3c7f8:	add	r5, r3, r5
   3c7fc:	str	r5, [r4, #20]
   3c800:	b	3c778 <flatcc_json_printer_union_struct@@Base+0x4c>

0003c804 <flatcc_json_printer_union_string@@Base>:
   3c804:	str	r4, [sp, #-8]!
   3c808:	str	lr, [sp, #4]
   3c80c:	ldr	r3, [r1]
   3c810:	ldr	r2, [r3]
   3c814:	add	r1, r3, r2
   3c818:	ldr	r2, [r3, r2]
   3c81c:	add	r1, r1, #4
   3c820:	bl	3145c <flatcc_json_parser_struct_as_root@@Base+0x19d4>
   3c824:	ldr	r4, [sp]
   3c828:	add	sp, sp, #4
   3c82c:	pop	{pc}		; (ldr pc, [sp], #4)

0003c830 <flatcc_json_printer_embedded_struct_field@@Base>:
   3c830:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3c834:	strd	r6, [sp, #8]
   3c838:	str	r8, [sp, #16]
   3c83c:	str	lr, [sp, #20]
   3c840:	mov	r4, r0
   3c844:	mov	r6, r2
   3c848:	mov	r5, r3
   3c84c:	ldr	r7, [sp, #28]
   3c850:	cmp	r1, #0
   3c854:	beq	3c86c <flatcc_json_printer_embedded_struct_field@@Base+0x3c>
   3c858:	ldr	r3, [r0, #20]
   3c85c:	add	r2, r3, #1
   3c860:	str	r2, [r0, #20]
   3c864:	mov	r2, #44	; 0x2c
   3c868:	strb	r2, [r3]
   3c86c:	ldrb	r3, [r4, #25]
   3c870:	cmp	r3, #0
   3c874:	bne	3c990 <flatcc_json_printer_embedded_struct_field@@Base+0x160>
   3c878:	ldr	r2, [r4, #20]
   3c87c:	ldr	r3, [r4, #16]
   3c880:	cmp	r2, r3
   3c884:	bcc	3c898 <flatcc_json_printer_embedded_struct_field@@Base+0x68>
   3c888:	ldr	r3, [r4, #44]	; 0x2c
   3c88c:	mov	r1, #0
   3c890:	mov	r0, r4
   3c894:	blx	r3
   3c898:	ldr	r3, [r4, #20]
   3c89c:	mov	r2, #34	; 0x22
   3c8a0:	strb	r2, [r3]
   3c8a4:	ldrb	r3, [r4, #26]
   3c8a8:	ldr	r0, [r4, #20]
   3c8ac:	cmp	r3, #0
   3c8b0:	addeq	r0, r0, #1
   3c8b4:	str	r0, [r4, #20]
   3c8b8:	add	r3, r0, r7
   3c8bc:	ldr	r2, [r4, #16]
   3c8c0:	cmp	r2, r3
   3c8c4:	bls	3c9f0 <flatcc_json_printer_embedded_struct_field@@Base+0x1c0>
   3c8c8:	mov	r2, r7
   3c8cc:	ldr	r1, [sp, #24]
   3c8d0:	bl	14524 <memcpy@plt>
   3c8d4:	ldr	r3, [r4, #20]
   3c8d8:	add	r7, r3, r7
   3c8dc:	str	r7, [r4, #20]
   3c8e0:	ldr	r3, [r4, #20]
   3c8e4:	mov	r2, #34	; 0x22
   3c8e8:	strb	r2, [r3]
   3c8ec:	ldrb	r3, [r4, #26]
   3c8f0:	clz	r3, r3
   3c8f4:	lsr	r3, r3, #5
   3c8f8:	ldr	r1, [r4, #20]
   3c8fc:	add	r2, r1, r3
   3c900:	add	r2, r2, #1
   3c904:	str	r2, [r4, #20]
   3c908:	mov	r2, #58	; 0x3a
   3c90c:	strb	r2, [r1, r3]
   3c910:	ldr	r3, [r4, #20]
   3c914:	mov	r2, #32
   3c918:	strb	r2, [r3]
   3c91c:	ldrb	r3, [r4, #25]
   3c920:	adds	r3, r3, #0
   3c924:	movne	r3, #1
   3c928:	ldr	r0, [r4, #20]
   3c92c:	add	r2, r0, r3
   3c930:	ldr	r1, [r4, #32]
   3c934:	add	r1, r1, #1
   3c938:	str	r1, [r4, #32]
   3c93c:	add	r2, r2, #1
   3c940:	str	r2, [r4, #20]
   3c944:	mov	r2, #123	; 0x7b
   3c948:	strb	r2, [r0, r3]
   3c94c:	add	r1, r6, r5
   3c950:	mov	r0, r4
   3c954:	ldr	r3, [sp, #32]
   3c958:	blx	r3
   3c95c:	ldrb	r3, [r4, #25]
   3c960:	cmp	r3, #0
   3c964:	bne	3ca04 <flatcc_json_printer_embedded_struct_field@@Base+0x1d4>
   3c968:	ldr	r3, [r4, #20]
   3c96c:	add	r2, r3, #1
   3c970:	str	r2, [r4, #20]
   3c974:	mov	r2, #125	; 0x7d
   3c978:	strb	r2, [r3]
   3c97c:	ldrd	r4, [sp]
   3c980:	ldrd	r6, [sp, #8]
   3c984:	ldr	r8, [sp, #16]
   3c988:	add	sp, sp, #20
   3c98c:	pop	{pc}		; (ldr pc, [sp], #4)
   3c990:	ldr	r3, [r4, #20]
   3c994:	add	r2, r3, #1
   3c998:	str	r2, [r4, #20]
   3c99c:	mov	r2, #10
   3c9a0:	strb	r2, [r3]
   3c9a4:	ldrb	r3, [r4, #25]
   3c9a8:	ldr	r8, [r4, #32]
   3c9ac:	mul	r8, r8, r3
   3c9b0:	ldr	r0, [r4, #20]
   3c9b4:	add	r3, r0, r8
   3c9b8:	ldr	r2, [r4, #16]
   3c9bc:	cmp	r2, r3
   3c9c0:	bcs	3c9d4 <flatcc_json_printer_embedded_struct_field@@Base+0x1a4>
   3c9c4:	mov	r1, r8
   3c9c8:	mov	r0, r4
   3c9cc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3c9d0:	b	3c898 <flatcc_json_printer_embedded_struct_field@@Base+0x68>
   3c9d4:	mov	r2, r8
   3c9d8:	mov	r1, #32
   3c9dc:	bl	1459c <memset@plt>
   3c9e0:	ldr	r3, [r4, #20]
   3c9e4:	add	r8, r3, r8
   3c9e8:	str	r8, [r4, #20]
   3c9ec:	b	3c898 <flatcc_json_printer_embedded_struct_field@@Base+0x68>
   3c9f0:	mov	r2, r7
   3c9f4:	ldr	r1, [sp, #24]
   3c9f8:	mov	r0, r4
   3c9fc:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3ca00:	b	3c8e0 <flatcc_json_printer_embedded_struct_field@@Base+0xb0>
   3ca04:	ldr	r3, [r4, #20]
   3ca08:	add	r2, r3, #1
   3ca0c:	str	r2, [r4, #20]
   3ca10:	mov	r2, #10
   3ca14:	strb	r2, [r3]
   3ca18:	ldr	r5, [r4, #32]
   3ca1c:	sub	r5, r5, #1
   3ca20:	str	r5, [r4, #32]
   3ca24:	ldrb	r3, [r4, #25]
   3ca28:	mul	r5, r5, r3
   3ca2c:	ldr	r0, [r4, #20]
   3ca30:	add	r3, r0, r5
   3ca34:	ldr	r2, [r4, #16]
   3ca38:	cmp	r2, r3
   3ca3c:	bcs	3ca50 <flatcc_json_printer_embedded_struct_field@@Base+0x220>
   3ca40:	mov	r1, r5
   3ca44:	mov	r0, r4
   3ca48:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3ca4c:	b	3c968 <flatcc_json_printer_embedded_struct_field@@Base+0x138>
   3ca50:	mov	r2, r5
   3ca54:	mov	r1, #32
   3ca58:	bl	1459c <memset@plt>
   3ca5c:	ldr	r3, [r4, #20]
   3ca60:	add	r5, r3, r5
   3ca64:	str	r5, [r4, #20]
   3ca68:	b	3c968 <flatcc_json_printer_embedded_struct_field@@Base+0x138>

0003ca6c <flatcc_json_printer_struct_field@@Base>:
   3ca6c:	add	r2, r2, #2
   3ca70:	lsl	r2, r2, #1
   3ca74:	ldr	ip, [r1, #8]
   3ca78:	cmp	r2, ip
   3ca7c:	bxge	lr
   3ca80:	ldr	ip, [r1, #4]
   3ca84:	ldrh	r2, [ip, r2]
   3ca88:	cmp	r2, #0
   3ca8c:	bxeq	lr
   3ca90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   3ca94:	strd	r6, [sp, #8]
   3ca98:	str	r8, [sp, #16]
   3ca9c:	str	lr, [sp, #20]
   3caa0:	ldr	r5, [r1]
   3caa4:	adds	r5, r5, r2
   3caa8:	beq	3cbf0 <flatcc_json_printer_struct_field@@Base+0x184>
   3caac:	ldr	r2, [r1, #16]
   3cab0:	add	ip, r2, #1
   3cab4:	str	ip, [r1, #16]
   3cab8:	cmp	r2, #0
   3cabc:	beq	3cad4 <flatcc_json_printer_struct_field@@Base+0x68>
   3cac0:	ldr	r2, [r0, #20]
   3cac4:	add	r1, r2, #1
   3cac8:	str	r1, [r0, #20]
   3cacc:	mov	r1, #44	; 0x2c
   3cad0:	strb	r1, [r2]
   3cad4:	mov	r6, r3
   3cad8:	mov	r4, r0
   3cadc:	ldrb	r3, [r0, #25]
   3cae0:	cmp	r3, #0
   3cae4:	bne	3cc04 <flatcc_json_printer_struct_field@@Base+0x198>
   3cae8:	ldr	r2, [r0, #20]
   3caec:	ldr	r3, [r0, #16]
   3caf0:	cmp	r2, r3
   3caf4:	bcc	3cb04 <flatcc_json_printer_struct_field@@Base+0x98>
   3caf8:	ldr	r3, [r0, #44]	; 0x2c
   3cafc:	mov	r1, #0
   3cb00:	blx	r3
   3cb04:	ldr	r3, [r4, #20]
   3cb08:	mov	r2, #34	; 0x22
   3cb0c:	strb	r2, [r3]
   3cb10:	ldrb	r3, [r4, #26]
   3cb14:	ldr	r0, [r4, #20]
   3cb18:	cmp	r3, #0
   3cb1c:	addeq	r0, r0, #1
   3cb20:	str	r0, [r4, #20]
   3cb24:	ldr	r3, [sp, #24]
   3cb28:	add	r3, r0, r3
   3cb2c:	ldr	r2, [r4, #16]
   3cb30:	cmp	r2, r3
   3cb34:	bls	3cc64 <flatcc_json_printer_struct_field@@Base+0x1f8>
   3cb38:	ldr	r2, [sp, #24]
   3cb3c:	mov	r1, r6
   3cb40:	bl	14524 <memcpy@plt>
   3cb44:	ldr	r3, [r4, #20]
   3cb48:	ldr	r2, [sp, #24]
   3cb4c:	add	r3, r3, r2
   3cb50:	str	r3, [r4, #20]
   3cb54:	ldr	r3, [r4, #20]
   3cb58:	mov	r2, #34	; 0x22
   3cb5c:	strb	r2, [r3]
   3cb60:	ldrb	r3, [r4, #26]
   3cb64:	clz	r3, r3
   3cb68:	lsr	r3, r3, #5
   3cb6c:	ldr	r1, [r4, #20]
   3cb70:	add	r2, r1, r3
   3cb74:	add	r2, r2, #1
   3cb78:	str	r2, [r4, #20]
   3cb7c:	mov	r2, #58	; 0x3a
   3cb80:	strb	r2, [r1, r3]
   3cb84:	ldr	r3, [r4, #20]
   3cb88:	mov	r2, #32
   3cb8c:	strb	r2, [r3]
   3cb90:	ldrb	r3, [r4, #25]
   3cb94:	adds	r3, r3, #0
   3cb98:	movne	r3, #1
   3cb9c:	ldr	r0, [r4, #20]
   3cba0:	add	r2, r0, r3
   3cba4:	ldr	r1, [r4, #32]
   3cba8:	add	r1, r1, #1
   3cbac:	str	r1, [r4, #32]
   3cbb0:	add	r2, r2, #1
   3cbb4:	str	r2, [r4, #20]
   3cbb8:	mov	r2, #123	; 0x7b
   3cbbc:	strb	r2, [r0, r3]
   3cbc0:	mov	r1, r5
   3cbc4:	mov	r0, r4
   3cbc8:	ldr	r3, [sp, #28]
   3cbcc:	blx	r3
   3cbd0:	ldrb	r3, [r4, #25]
   3cbd4:	cmp	r3, #0
   3cbd8:	bne	3cc78 <flatcc_json_printer_struct_field@@Base+0x20c>
   3cbdc:	ldr	r3, [r4, #20]
   3cbe0:	add	r2, r3, #1
   3cbe4:	str	r2, [r4, #20]
   3cbe8:	mov	r2, #125	; 0x7d
   3cbec:	strb	r2, [r3]
   3cbf0:	ldrd	r4, [sp]
   3cbf4:	ldrd	r6, [sp, #8]
   3cbf8:	ldr	r8, [sp, #16]
   3cbfc:	add	sp, sp, #20
   3cc00:	pop	{pc}		; (ldr pc, [sp], #4)
   3cc04:	ldr	r3, [r0, #20]
   3cc08:	add	r2, r3, #1
   3cc0c:	str	r2, [r0, #20]
   3cc10:	mov	r2, #10
   3cc14:	strb	r2, [r3]
   3cc18:	ldrb	r3, [r0, #25]
   3cc1c:	ldr	r7, [r0, #32]
   3cc20:	mul	r7, r7, r3
   3cc24:	ldr	r0, [r0, #20]
   3cc28:	add	r3, r0, r7
   3cc2c:	ldr	r2, [r4, #16]
   3cc30:	cmp	r2, r3
   3cc34:	bcs	3cc48 <flatcc_json_printer_struct_field@@Base+0x1dc>
   3cc38:	mov	r1, r7
   3cc3c:	mov	r0, r4
   3cc40:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3cc44:	b	3cb04 <flatcc_json_printer_struct_field@@Base+0x98>
   3cc48:	mov	r2, r7
   3cc4c:	mov	r1, #32
   3cc50:	bl	1459c <memset@plt>
   3cc54:	ldr	r3, [r4, #20]
   3cc58:	add	r7, r3, r7
   3cc5c:	str	r7, [r4, #20]
   3cc60:	b	3cb04 <flatcc_json_printer_struct_field@@Base+0x98>
   3cc64:	ldr	r2, [sp, #24]
   3cc68:	mov	r1, r6
   3cc6c:	mov	r0, r4
   3cc70:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3cc74:	b	3cb54 <flatcc_json_printer_struct_field@@Base+0xe8>
   3cc78:	ldr	r3, [r4, #20]
   3cc7c:	add	r2, r3, #1
   3cc80:	str	r2, [r4, #20]
   3cc84:	mov	r2, #10
   3cc88:	strb	r2, [r3]
   3cc8c:	ldr	r5, [r4, #32]
   3cc90:	sub	r5, r5, #1
   3cc94:	str	r5, [r4, #32]
   3cc98:	ldrb	r3, [r4, #25]
   3cc9c:	mul	r5, r5, r3
   3cca0:	ldr	r0, [r4, #20]
   3cca4:	add	r3, r0, r5
   3cca8:	ldr	r2, [r4, #16]
   3ccac:	cmp	r2, r3
   3ccb0:	bcs	3ccc4 <flatcc_json_printer_struct_field@@Base+0x258>
   3ccb4:	mov	r1, r5
   3ccb8:	mov	r0, r4
   3ccbc:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3ccc0:	b	3cbdc <flatcc_json_printer_struct_field@@Base+0x170>
   3ccc4:	mov	r2, r5
   3ccc8:	mov	r1, #32
   3cccc:	bl	1459c <memset@plt>
   3ccd0:	ldr	r3, [r4, #20]
   3ccd4:	add	r5, r3, r5
   3ccd8:	str	r5, [r4, #20]
   3ccdc:	b	3cbdc <flatcc_json_printer_struct_field@@Base+0x170>

0003cce0 <flatcc_json_printer_struct_as_root@@Base>:
   3cce0:	strd	r4, [sp, #-16]!
   3cce4:	str	r6, [sp, #8]
   3cce8:	str	lr, [sp, #12]
   3ccec:	mov	r4, r0
   3ccf0:	mov	r5, r1
   3ccf4:	bl	3121c <flatcc_json_parser_struct_as_root@@Base+0x1794>
   3ccf8:	cmp	r0, #0
   3ccfc:	beq	3ce28 <flatcc_json_printer_struct_as_root@@Base+0x148>
   3cd00:	ldr	r3, [r4, #32]
   3cd04:	add	r3, r3, #1
   3cd08:	str	r3, [r4, #32]
   3cd0c:	ldr	r3, [r4, #20]
   3cd10:	add	r2, r3, #1
   3cd14:	str	r2, [r4, #20]
   3cd18:	mov	r2, #123	; 0x7b
   3cd1c:	strb	r2, [r3]
   3cd20:	ldr	r1, [r5]
   3cd24:	add	r1, r5, r1
   3cd28:	mov	r0, r4
   3cd2c:	ldr	r3, [sp, #16]
   3cd30:	blx	r3
   3cd34:	ldrb	r3, [r4, #25]
   3cd38:	cmp	r3, #0
   3cd3c:	bne	3cdc0 <flatcc_json_printer_struct_as_root@@Base+0xe0>
   3cd40:	ldr	r3, [r4, #20]
   3cd44:	add	r2, r3, #1
   3cd48:	str	r2, [r4, #20]
   3cd4c:	mov	r2, #125	; 0x7d
   3cd50:	strb	r2, [r3]
   3cd54:	ldrb	r3, [r4, #25]
   3cd58:	cmp	r3, #0
   3cd5c:	beq	3cd80 <flatcc_json_printer_struct_as_root@@Base+0xa0>
   3cd60:	ldr	r3, [r4, #32]
   3cd64:	cmp	r3, #0
   3cd68:	bne	3cd80 <flatcc_json_printer_struct_as_root@@Base+0xa0>
   3cd6c:	ldr	r3, [r4, #20]
   3cd70:	add	r2, r3, #1
   3cd74:	str	r2, [r4, #20]
   3cd78:	mov	r2, #10
   3cd7c:	strb	r2, [r3]
   3cd80:	ldr	r3, [r4, #44]	; 0x2c
   3cd84:	mov	r1, #1
   3cd88:	mov	r0, r4
   3cd8c:	blx	r3
   3cd90:	ldr	r3, [r4, #36]	; 0x24
   3cd94:	cmp	r3, #0
   3cd98:	bne	3ce30 <flatcc_json_printer_struct_as_root@@Base+0x150>
   3cd9c:	ldr	r0, [r4, #20]
   3cda0:	ldr	r3, [r4]
   3cda4:	sub	r0, r0, r3
   3cda8:	ldr	r3, [r4, #12]
   3cdac:	add	r0, r0, r3
   3cdb0:	ldrd	r4, [sp]
   3cdb4:	ldr	r6, [sp, #8]
   3cdb8:	add	sp, sp, #12
   3cdbc:	pop	{pc}		; (ldr pc, [sp], #4)
   3cdc0:	ldr	r3, [r4, #20]
   3cdc4:	add	r2, r3, #1
   3cdc8:	str	r2, [r4, #20]
   3cdcc:	mov	r2, #10
   3cdd0:	strb	r2, [r3]
   3cdd4:	ldr	r5, [r4, #32]
   3cdd8:	sub	r5, r5, #1
   3cddc:	str	r5, [r4, #32]
   3cde0:	ldrb	r3, [r4, #25]
   3cde4:	mul	r5, r5, r3
   3cde8:	ldr	r0, [r4, #20]
   3cdec:	add	r3, r0, r5
   3cdf0:	ldr	r2, [r4, #16]
   3cdf4:	cmp	r2, r3
   3cdf8:	bcs	3ce0c <flatcc_json_printer_struct_as_root@@Base+0x12c>
   3cdfc:	mov	r1, r5
   3ce00:	mov	r0, r4
   3ce04:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3ce08:	b	3cd40 <flatcc_json_printer_struct_as_root@@Base+0x60>
   3ce0c:	mov	r2, r5
   3ce10:	mov	r1, #32
   3ce14:	bl	1459c <memset@plt>
   3ce18:	ldr	r3, [r4, #20]
   3ce1c:	add	r5, r3, r5
   3ce20:	str	r5, [r4, #20]
   3ce24:	b	3cd40 <flatcc_json_printer_struct_as_root@@Base+0x60>
   3ce28:	mvn	r0, #0
   3ce2c:	b	3cdb0 <flatcc_json_printer_struct_as_root@@Base+0xd0>
   3ce30:	mvn	r0, #0
   3ce34:	b	3cdb0 <flatcc_json_printer_struct_as_root@@Base+0xd0>

0003ce38 <flatcc_json_printer_table_as_root@@Base>:
   3ce38:	strd	r4, [sp, #-12]!
   3ce3c:	str	lr, [sp, #8]
   3ce40:	sub	sp, sp, #28
   3ce44:	mov	r4, r0
   3ce48:	mov	r5, r1
   3ce4c:	bl	3121c <flatcc_json_parser_struct_as_root@@Base+0x1794>
   3ce50:	cmp	r0, #0
   3ce54:	beq	3cfac <flatcc_json_printer_table_as_root@@Base+0x174>
   3ce58:	ldr	r1, [r5]
   3ce5c:	add	r3, r5, r1
   3ce60:	ldr	r2, [r4, #32]
   3ce64:	add	r2, r2, #1
   3ce68:	str	r2, [r4, #32]
   3ce6c:	ldr	r2, [r4, #20]
   3ce70:	add	r0, r2, #1
   3ce74:	str	r0, [r4, #20]
   3ce78:	mov	r0, #123	; 0x7b
   3ce7c:	strb	r0, [r2]
   3ce80:	mov	r2, #0
   3ce84:	str	r2, [sp, #20]
   3ce88:	mov	r2, #99	; 0x63
   3ce8c:	str	r2, [sp, #16]
   3ce90:	str	r3, [sp, #4]
   3ce94:	ldr	r2, [r5, r1]
   3ce98:	sub	r3, r3, r2
   3ce9c:	str	r3, [sp, #8]
   3cea0:	ldrh	r3, [r3]
   3cea4:	str	r3, [sp, #12]
   3cea8:	add	r1, sp, #4
   3ceac:	mov	r0, r4
   3ceb0:	ldr	r3, [sp, #40]	; 0x28
   3ceb4:	blx	r3
   3ceb8:	ldrb	r3, [r4, #25]
   3cebc:	cmp	r3, #0
   3cec0:	bne	3cf44 <flatcc_json_printer_table_as_root@@Base+0x10c>
   3cec4:	ldr	r3, [r4, #20]
   3cec8:	add	r2, r3, #1
   3cecc:	str	r2, [r4, #20]
   3ced0:	mov	r2, #125	; 0x7d
   3ced4:	strb	r2, [r3]
   3ced8:	ldrb	r3, [r4, #25]
   3cedc:	cmp	r3, #0
   3cee0:	beq	3cf04 <flatcc_json_printer_table_as_root@@Base+0xcc>
   3cee4:	ldr	r3, [r4, #32]
   3cee8:	cmp	r3, #0
   3ceec:	bne	3cf04 <flatcc_json_printer_table_as_root@@Base+0xcc>
   3cef0:	ldr	r3, [r4, #20]
   3cef4:	add	r2, r3, #1
   3cef8:	str	r2, [r4, #20]
   3cefc:	mov	r2, #10
   3cf00:	strb	r2, [r3]
   3cf04:	ldr	r3, [r4, #44]	; 0x2c
   3cf08:	mov	r1, #1
   3cf0c:	mov	r0, r4
   3cf10:	blx	r3
   3cf14:	ldr	r3, [r4, #36]	; 0x24
   3cf18:	cmp	r3, #0
   3cf1c:	bne	3cfb4 <flatcc_json_printer_table_as_root@@Base+0x17c>
   3cf20:	ldr	r0, [r4, #20]
   3cf24:	ldr	r3, [r4]
   3cf28:	sub	r0, r0, r3
   3cf2c:	ldr	r3, [r4, #12]
   3cf30:	add	r0, r0, r3
   3cf34:	add	sp, sp, #28
   3cf38:	ldrd	r4, [sp]
   3cf3c:	add	sp, sp, #8
   3cf40:	pop	{pc}		; (ldr pc, [sp], #4)
   3cf44:	ldr	r3, [r4, #20]
   3cf48:	add	r2, r3, #1
   3cf4c:	str	r2, [r4, #20]
   3cf50:	mov	r2, #10
   3cf54:	strb	r2, [r3]
   3cf58:	ldr	r5, [r4, #32]
   3cf5c:	sub	r5, r5, #1
   3cf60:	str	r5, [r4, #32]
   3cf64:	ldrb	r3, [r4, #25]
   3cf68:	mul	r5, r5, r3
   3cf6c:	ldr	r0, [r4, #20]
   3cf70:	add	r3, r0, r5
   3cf74:	ldr	r2, [r4, #16]
   3cf78:	cmp	r2, r3
   3cf7c:	bcs	3cf90 <flatcc_json_printer_table_as_root@@Base+0x158>
   3cf80:	mov	r1, r5
   3cf84:	mov	r0, r4
   3cf88:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3cf8c:	b	3cec4 <flatcc_json_printer_table_as_root@@Base+0x8c>
   3cf90:	mov	r2, r5
   3cf94:	mov	r1, #32
   3cf98:	bl	1459c <memset@plt>
   3cf9c:	ldr	r3, [r4, #20]
   3cfa0:	add	r5, r3, r5
   3cfa4:	str	r5, [r4, #20]
   3cfa8:	b	3cec4 <flatcc_json_printer_table_as_root@@Base+0x8c>
   3cfac:	mvn	r0, #0
   3cfb0:	b	3cf34 <flatcc_json_printer_table_as_root@@Base+0xfc>
   3cfb4:	mvn	r0, #0
   3cfb8:	b	3cf34 <flatcc_json_printer_table_as_root@@Base+0xfc>

0003cfbc <flatcc_json_printer_struct_as_nested_root@@Base>:
   3cfbc:	add	r2, r2, #2
   3cfc0:	lsl	r2, r2, #1
   3cfc4:	ldr	ip, [r1, #8]
   3cfc8:	cmp	r2, ip
   3cfcc:	bxge	lr
   3cfd0:	ldr	ip, [r1, #4]
   3cfd4:	ldrh	r2, [ip, r2]
   3cfd8:	cmp	r2, #0
   3cfdc:	bxeq	lr
   3cfe0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   3cfe4:	strd	r6, [sp, #8]
   3cfe8:	strd	r8, [sp, #16]
   3cfec:	str	sl, [sp, #24]
   3cff0:	str	lr, [sp, #28]
   3cff4:	ldr	ip, [r1]
   3cff8:	adds	r7, ip, r2
   3cffc:	beq	3d0b8 <flatcc_json_printer_struct_as_nested_root@@Base+0xfc>
   3d000:	mov	r6, r3
   3d004:	mov	r5, r1
   3d008:	mov	r4, r0
   3d00c:	ldr	r8, [ip, r2]
   3d010:	add	r9, r7, r8
   3d014:	ldr	r3, [sp, #36]	; 0x24
   3d018:	ldr	r2, [r7, r8]
   3d01c:	mov	r1, r9
   3d020:	bl	3121c <flatcc_json_parser_struct_as_root@@Base+0x1794>
   3d024:	cmp	r0, #0
   3d028:	beq	3d0b8 <flatcc_json_printer_struct_as_nested_root@@Base+0xfc>
   3d02c:	ldr	r3, [r5, #16]
   3d030:	add	r2, r3, #1
   3d034:	str	r2, [r5, #16]
   3d038:	cmp	r3, #0
   3d03c:	beq	3d054 <flatcc_json_printer_struct_as_nested_root@@Base+0x98>
   3d040:	ldr	r3, [r4, #20]
   3d044:	add	r2, r3, #1
   3d048:	str	r2, [r4, #20]
   3d04c:	mov	r2, #44	; 0x2c
   3d050:	strb	r2, [r3]
   3d054:	ldr	r2, [sp, #32]
   3d058:	mov	r1, r6
   3d05c:	mov	r0, r4
   3d060:	bl	316e0 <flatcc_json_parser_struct_as_root@@Base+0x1c58>
   3d064:	ldr	r3, [r4, #32]
   3d068:	add	r3, r3, #1
   3d06c:	str	r3, [r4, #32]
   3d070:	ldr	r3, [r4, #20]
   3d074:	add	r2, r3, #1
   3d078:	str	r2, [r4, #20]
   3d07c:	mov	r2, #123	; 0x7b
   3d080:	strb	r2, [r3]
   3d084:	ldr	r1, [r7, r8]
   3d088:	add	r1, r9, r1
   3d08c:	mov	r0, r4
   3d090:	ldr	r3, [sp, #40]	; 0x28
   3d094:	blx	r3
   3d098:	ldrb	r3, [r4, #25]
   3d09c:	cmp	r3, #0
   3d0a0:	bne	3d0d0 <flatcc_json_printer_struct_as_nested_root@@Base+0x114>
   3d0a4:	ldr	r3, [r4, #20]
   3d0a8:	add	r2, r3, #1
   3d0ac:	str	r2, [r4, #20]
   3d0b0:	mov	r2, #125	; 0x7d
   3d0b4:	strb	r2, [r3]
   3d0b8:	ldrd	r4, [sp]
   3d0bc:	ldrd	r6, [sp, #8]
   3d0c0:	ldrd	r8, [sp, #16]
   3d0c4:	ldr	sl, [sp, #24]
   3d0c8:	add	sp, sp, #28
   3d0cc:	pop	{pc}		; (ldr pc, [sp], #4)
   3d0d0:	ldr	r3, [r4, #20]
   3d0d4:	add	r2, r3, #1
   3d0d8:	str	r2, [r4, #20]
   3d0dc:	mov	r2, #10
   3d0e0:	strb	r2, [r3]
   3d0e4:	ldr	r5, [r4, #32]
   3d0e8:	sub	r5, r5, #1
   3d0ec:	str	r5, [r4, #32]
   3d0f0:	ldrb	r3, [r4, #25]
   3d0f4:	mul	r5, r5, r3
   3d0f8:	ldr	r0, [r4, #20]
   3d0fc:	add	r3, r0, r5
   3d100:	ldr	r2, [r4, #16]
   3d104:	cmp	r2, r3
   3d108:	bcs	3d11c <flatcc_json_printer_struct_as_nested_root@@Base+0x160>
   3d10c:	mov	r1, r5
   3d110:	mov	r0, r4
   3d114:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3d118:	b	3d0a4 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   3d11c:	mov	r2, r5
   3d120:	mov	r1, #32
   3d124:	bl	1459c <memset@plt>
   3d128:	ldr	r3, [r4, #20]
   3d12c:	add	r5, r3, r5
   3d130:	str	r5, [r4, #20]
   3d134:	b	3d0a4 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>

0003d138 <flatcc_json_printer_table_as_nested_root@@Base>:
   3d138:	add	r2, r2, #2
   3d13c:	lsl	r2, r2, #1
   3d140:	ldr	ip, [r1, #8]
   3d144:	cmp	r2, ip
   3d148:	bxge	lr
   3d14c:	ldr	ip, [r1, #4]
   3d150:	ldrh	r2, [ip, r2]
   3d154:	cmp	r2, #0
   3d158:	bxeq	lr
   3d15c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   3d160:	strd	r6, [sp, #8]
   3d164:	strd	r8, [sp, #16]
   3d168:	str	lr, [sp, #24]
   3d16c:	sub	sp, sp, #28
   3d170:	ldr	ip, [r1]
   3d174:	adds	lr, ip, r2
   3d178:	beq	3d328 <flatcc_json_printer_table_as_nested_root@@Base+0x1f0>
   3d17c:	mov	r6, r3
   3d180:	mov	r5, r1
   3d184:	mov	r4, r0
   3d188:	ldr	r2, [ip, r2]
   3d18c:	add	r8, lr, r2
   3d190:	add	r7, r8, #4
   3d194:	ldr	r3, [sp, #60]	; 0x3c
   3d198:	ldr	r2, [lr, r2]
   3d19c:	mov	r1, r7
   3d1a0:	bl	3121c <flatcc_json_parser_struct_as_root@@Base+0x1794>
   3d1a4:	cmp	r0, #0
   3d1a8:	beq	3d328 <flatcc_json_printer_table_as_nested_root@@Base+0x1f0>
   3d1ac:	ldr	r3, [r5, #16]
   3d1b0:	add	r2, r3, #1
   3d1b4:	str	r2, [r5, #16]
   3d1b8:	cmp	r3, #0
   3d1bc:	beq	3d1d4 <flatcc_json_printer_table_as_nested_root@@Base+0x9c>
   3d1c0:	ldr	r3, [r4, #20]
   3d1c4:	add	r2, r3, #1
   3d1c8:	str	r2, [r4, #20]
   3d1cc:	mov	r2, #44	; 0x2c
   3d1d0:	strb	r2, [r3]
   3d1d4:	ldrb	r3, [r4, #25]
   3d1d8:	cmp	r3, #0
   3d1dc:	bne	3d340 <flatcc_json_printer_table_as_nested_root@@Base+0x208>
   3d1e0:	ldr	r2, [r4, #20]
   3d1e4:	ldr	r3, [r4, #16]
   3d1e8:	cmp	r2, r3
   3d1ec:	bcc	3d200 <flatcc_json_printer_table_as_nested_root@@Base+0xc8>
   3d1f0:	ldr	r3, [r4, #44]	; 0x2c
   3d1f4:	mov	r1, #0
   3d1f8:	mov	r0, r4
   3d1fc:	blx	r3
   3d200:	ldr	r3, [r4, #20]
   3d204:	mov	r2, #34	; 0x22
   3d208:	strb	r2, [r3]
   3d20c:	ldrb	r3, [r4, #26]
   3d210:	ldr	r0, [r4, #20]
   3d214:	cmp	r3, #0
   3d218:	addeq	r0, r0, #1
   3d21c:	str	r0, [r4, #20]
   3d220:	ldr	r3, [sp, #56]	; 0x38
   3d224:	add	r3, r0, r3
   3d228:	ldr	r2, [r4, #16]
   3d22c:	cmp	r2, r3
   3d230:	bls	3d3a0 <flatcc_json_printer_table_as_nested_root@@Base+0x268>
   3d234:	ldr	r2, [sp, #56]	; 0x38
   3d238:	mov	r1, r6
   3d23c:	bl	14524 <memcpy@plt>
   3d240:	ldr	r3, [r4, #20]
   3d244:	ldr	r2, [sp, #56]	; 0x38
   3d248:	add	r3, r3, r2
   3d24c:	str	r3, [r4, #20]
   3d250:	ldr	r3, [r4, #20]
   3d254:	mov	r2, #34	; 0x22
   3d258:	strb	r2, [r3]
   3d25c:	ldrb	r3, [r4, #26]
   3d260:	clz	r3, r3
   3d264:	lsr	r3, r3, #5
   3d268:	ldr	r1, [r4, #20]
   3d26c:	add	r2, r1, r3
   3d270:	add	r2, r2, #1
   3d274:	str	r2, [r4, #20]
   3d278:	mov	r2, #58	; 0x3a
   3d27c:	strb	r2, [r1, r3]
   3d280:	ldr	r3, [r4, #20]
   3d284:	mov	r2, #32
   3d288:	strb	r2, [r3]
   3d28c:	ldrb	r2, [r4, #25]
   3d290:	adds	r2, r2, #0
   3d294:	movne	r2, #1
   3d298:	ldr	lr, [r4, #20]
   3d29c:	add	r1, lr, r2
   3d2a0:	str	r1, [r4, #20]
   3d2a4:	ldr	r3, [r5, #12]
   3d2a8:	subs	r3, r3, #1
   3d2ac:	beq	3d3b4 <flatcc_json_printer_table_as_nested_root@@Base+0x27c>
   3d2b0:	ldr	r5, [r8, #4]
   3d2b4:	add	r0, r7, r5
   3d2b8:	ldr	ip, [r4, #32]
   3d2bc:	add	ip, ip, #1
   3d2c0:	str	ip, [r4, #32]
   3d2c4:	add	r1, r1, #1
   3d2c8:	str	r1, [r4, #20]
   3d2cc:	mov	r1, #123	; 0x7b
   3d2d0:	strb	r1, [lr, r2]
   3d2d4:	mov	r2, #0
   3d2d8:	str	r2, [sp, #20]
   3d2dc:	str	r3, [sp, #16]
   3d2e0:	str	r0, [sp, #4]
   3d2e4:	ldr	r3, [r7, r5]
   3d2e8:	sub	r3, r0, r3
   3d2ec:	str	r3, [sp, #8]
   3d2f0:	ldrh	r3, [r3]
   3d2f4:	str	r3, [sp, #12]
   3d2f8:	add	r1, sp, #4
   3d2fc:	mov	r0, r4
   3d300:	ldr	r3, [sp, #64]	; 0x40
   3d304:	blx	r3
   3d308:	ldrb	r3, [r4, #25]
   3d30c:	cmp	r3, #0
   3d310:	bne	3d3c8 <flatcc_json_printer_table_as_nested_root@@Base+0x290>
   3d314:	ldr	r3, [r4, #20]
   3d318:	add	r2, r3, #1
   3d31c:	str	r2, [r4, #20]
   3d320:	mov	r2, #125	; 0x7d
   3d324:	strb	r2, [r3]
   3d328:	add	sp, sp, #28
   3d32c:	ldrd	r4, [sp]
   3d330:	ldrd	r6, [sp, #8]
   3d334:	ldrd	r8, [sp, #16]
   3d338:	add	sp, sp, #24
   3d33c:	pop	{pc}		; (ldr pc, [sp], #4)
   3d340:	ldr	r3, [r4, #20]
   3d344:	add	r2, r3, #1
   3d348:	str	r2, [r4, #20]
   3d34c:	mov	r2, #10
   3d350:	strb	r2, [r3]
   3d354:	ldrb	r3, [r4, #25]
   3d358:	ldr	r9, [r4, #32]
   3d35c:	mul	r9, r9, r3
   3d360:	ldr	r0, [r4, #20]
   3d364:	add	r3, r0, r9
   3d368:	ldr	r2, [r4, #16]
   3d36c:	cmp	r2, r3
   3d370:	bcs	3d384 <flatcc_json_printer_table_as_nested_root@@Base+0x24c>
   3d374:	mov	r1, r9
   3d378:	mov	r0, r4
   3d37c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3d380:	b	3d200 <flatcc_json_printer_table_as_nested_root@@Base+0xc8>
   3d384:	mov	r2, r9
   3d388:	mov	r1, #32
   3d38c:	bl	1459c <memset@plt>
   3d390:	ldr	r3, [r4, #20]
   3d394:	add	r9, r3, r9
   3d398:	str	r9, [r4, #20]
   3d39c:	b	3d200 <flatcc_json_printer_table_as_nested_root@@Base+0xc8>
   3d3a0:	ldr	r2, [sp, #56]	; 0x38
   3d3a4:	mov	r1, r6
   3d3a8:	mov	r0, r4
   3d3ac:	bl	30fe0 <flatcc_json_parser_struct_as_root@@Base+0x1558>
   3d3b0:	b	3d250 <flatcc_json_printer_table_as_nested_root@@Base+0x118>
   3d3b4:	ldr	r3, [r4, #36]	; 0x24
   3d3b8:	cmp	r3, #0
   3d3bc:	moveq	r3, #2
   3d3c0:	streq	r3, [r4, #36]	; 0x24
   3d3c4:	b	3d328 <flatcc_json_printer_table_as_nested_root@@Base+0x1f0>
   3d3c8:	ldr	r3, [r4, #20]
   3d3cc:	add	r2, r3, #1
   3d3d0:	str	r2, [r4, #20]
   3d3d4:	mov	r2, #10
   3d3d8:	strb	r2, [r3]
   3d3dc:	ldr	r5, [r4, #32]
   3d3e0:	sub	r5, r5, #1
   3d3e4:	str	r5, [r4, #32]
   3d3e8:	ldrb	r3, [r4, #25]
   3d3ec:	mul	r5, r5, r3
   3d3f0:	ldr	r0, [r4, #20]
   3d3f4:	add	r3, r0, r5
   3d3f8:	ldr	r2, [r4, #16]
   3d3fc:	cmp	r2, r3
   3d400:	bcs	3d414 <flatcc_json_printer_table_as_nested_root@@Base+0x2dc>
   3d404:	mov	r1, r5
   3d408:	mov	r0, r4
   3d40c:	bl	310f0 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   3d410:	b	3d314 <flatcc_json_printer_table_as_nested_root@@Base+0x1dc>
   3d414:	mov	r2, r5
   3d418:	mov	r1, #32
   3d41c:	bl	1459c <memset@plt>
   3d420:	ldr	r3, [r4, #20]
   3d424:	add	r5, r3, r5
   3d428:	str	r5, [r4, #20]
   3d42c:	b	3d314 <flatcc_json_printer_table_as_nested_root@@Base+0x1dc>

0003d430 <flatcc_json_printer_init@@Base>:
   3d430:	strd	r4, [sp, #-16]!
   3d434:	str	r6, [sp, #8]
   3d438:	str	lr, [sp, #12]
   3d43c:	mov	r4, r0
   3d440:	mov	r5, r1
   3d444:	mov	r2, #48	; 0x30
   3d448:	mov	r1, #0
   3d44c:	bl	1459c <memset@plt>
   3d450:	cmp	r5, #0
   3d454:	beq	3d4b4 <flatcc_json_printer_init@@Base+0x84>
   3d458:	str	r5, [r4, #40]	; 0x28
   3d45c:	movw	r3, #4832	; 0x12e0
   3d460:	movt	r3, #3
   3d464:	str	r3, [r4, #44]	; 0x2c
   3d468:	movw	r0, #16448	; 0x4040
   3d46c:	bl	14554 <malloc@plt>
   3d470:	str	r0, [r4]
   3d474:	cmp	r0, #0
   3d478:	beq	3d4c4 <flatcc_json_printer_init@@Base+0x94>
   3d47c:	mov	r3, #1
   3d480:	strb	r3, [r4, #24]
   3d484:	movw	r3, #16448	; 0x4040
   3d488:	str	r3, [r4, #4]
   3d48c:	mov	r3, #16384	; 0x4000
   3d490:	str	r3, [r4, #8]
   3d494:	str	r0, [r4, #20]
   3d498:	add	r0, r0, r3
   3d49c:	str	r0, [r4, #16]
   3d4a0:	mov	r0, #0
   3d4a4:	ldrd	r4, [sp]
   3d4a8:	ldr	r6, [sp, #8]
   3d4ac:	add	sp, sp, #12
   3d4b0:	pop	{pc}		; (ldr pc, [sp], #4)
   3d4b4:	movw	r3, #17220	; 0x4344
   3d4b8:	movt	r3, #5
   3d4bc:	ldr	r5, [r3]
   3d4c0:	b	3d458 <flatcc_json_printer_init@@Base+0x28>
   3d4c4:	mvn	r0, #0
   3d4c8:	b	3d4a4 <flatcc_json_printer_init@@Base+0x74>

0003d4cc <flatcc_json_printer_init_buffer@@Base>:
   3d4cc:	strd	r4, [sp, #-16]!
   3d4d0:	str	r6, [sp, #8]
   3d4d4:	str	lr, [sp, #12]
   3d4d8:	cmp	r2, #63	; 0x3f
   3d4dc:	bls	3d538 <flatcc_json_printer_init_buffer@@Base+0x6c>
   3d4e0:	mov	r4, r0
   3d4e4:	mov	r6, r1
   3d4e8:	mov	r5, r2
   3d4ec:	mov	r2, #32
   3d4f0:	mov	r1, #0
   3d4f4:	add	r0, r0, #12
   3d4f8:	bl	1459c <memset@plt>
   3d4fc:	str	r6, [r4]
   3d500:	str	r5, [r4, #4]
   3d504:	sub	r5, r5, #64	; 0x40
   3d508:	str	r5, [r4, #8]
   3d50c:	str	r6, [r4, #20]
   3d510:	add	r5, r6, r5
   3d514:	str	r5, [r4, #16]
   3d518:	movw	r3, #3728	; 0xe90
   3d51c:	movt	r3, #3
   3d520:	str	r3, [r4, #44]	; 0x2c
   3d524:	mov	r0, #0
   3d528:	ldrd	r4, [sp]
   3d52c:	ldr	r6, [sp, #8]
   3d530:	add	sp, sp, #12
   3d534:	pop	{pc}		; (ldr pc, [sp], #4)
   3d538:	ldr	r3, [pc, #20]	; 3d554 <flatcc_json_printer_init_buffer@@Base+0x88>
   3d53c:	movw	r2, #1165	; 0x48d
   3d540:	movw	r1, #13308	; 0x33fc
   3d544:	movt	r1, #4
   3d548:	movw	r0, #13700	; 0x3584
   3d54c:	movt	r0, #4
   3d550:	bl	145f0 <__assert_fail@plt>
   3d554:	andeq	r3, r4, r4, asr r3

0003d558 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   3d558:	strd	r4, [sp, #-16]!
   3d55c:	str	r6, [sp, #8]
   3d560:	str	lr, [sp, #12]
   3d564:	mov	r5, r0
   3d568:	cmp	r1, #0
   3d56c:	moveq	r4, #4096	; 0x1000
   3d570:	beq	3d580 <flatcc_json_printer_init_dynamic_buffer@@Base+0x28>
   3d574:	cmp	r1, #64	; 0x40
   3d578:	movcs	r4, r1
   3d57c:	movcc	r4, #64	; 0x40
   3d580:	mov	r2, #32
   3d584:	mov	r1, #0
   3d588:	add	r0, r5, #12
   3d58c:	bl	1459c <memset@plt>
   3d590:	mov	r0, r4
   3d594:	bl	14554 <malloc@plt>
   3d598:	str	r0, [r5]
   3d59c:	mov	r3, #1
   3d5a0:	strb	r3, [r5, #24]
   3d5a4:	str	r4, [r5, #4]
   3d5a8:	sub	r4, r4, #64	; 0x40
   3d5ac:	str	r4, [r5, #8]
   3d5b0:	str	r0, [r5, #20]
   3d5b4:	add	r4, r0, r4
   3d5b8:	str	r4, [r5, #16]
   3d5bc:	movw	r3, #5024	; 0x13a0
   3d5c0:	movt	r3, #3
   3d5c4:	str	r3, [r5, #44]	; 0x2c
   3d5c8:	cmp	r0, #0
   3d5cc:	movne	r0, #0
   3d5d0:	beq	3d5e4 <flatcc_json_printer_init_dynamic_buffer@@Base+0x8c>
   3d5d4:	ldrd	r4, [sp]
   3d5d8:	ldr	r6, [sp, #8]
   3d5dc:	add	sp, sp, #12
   3d5e0:	pop	{pc}		; (ldr pc, [sp], #4)
   3d5e4:	ldr	r3, [r5, #36]	; 0x24
   3d5e8:	cmp	r3, #0
   3d5ec:	moveq	r3, #3
   3d5f0:	streq	r3, [r5, #36]	; 0x24
   3d5f4:	mvn	r0, #0
   3d5f8:	b	3d5d4 <flatcc_json_printer_init_dynamic_buffer@@Base+0x7c>

0003d5fc <flatcc_json_printer_get_buffer@@Base>:
   3d5fc:	strd	r4, [sp, #-16]!
   3d600:	str	r6, [sp, #8]
   3d604:	str	lr, [sp, #12]
   3d608:	mov	r4, r0
   3d60c:	mov	r5, r1
   3d610:	ldr	r3, [r0, #44]	; 0x2c
   3d614:	mov	r1, #0
   3d618:	blx	r3
   3d61c:	cmp	r5, #0
   3d620:	beq	3d634 <flatcc_json_printer_get_buffer@@Base+0x38>
   3d624:	ldr	r3, [r4, #20]
   3d628:	ldr	r2, [r4]
   3d62c:	sub	r3, r3, r2
   3d630:	str	r3, [r5]
   3d634:	ldr	r0, [r4]
   3d638:	ldrd	r4, [sp]
   3d63c:	ldr	r6, [sp, #8]
   3d640:	add	sp, sp, #12
   3d644:	pop	{pc}		; (ldr pc, [sp], #4)

0003d648 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   3d648:	strd	r4, [sp, #-16]!
   3d64c:	str	r6, [sp, #8]
   3d650:	str	lr, [sp, #12]
   3d654:	mov	r5, r0
   3d658:	bl	3d5fc <flatcc_json_printer_get_buffer@@Base>
   3d65c:	mov	r4, r0
   3d660:	mov	r2, #48	; 0x30
   3d664:	mov	r1, #0
   3d668:	mov	r0, r5
   3d66c:	bl	1459c <memset@plt>
   3d670:	mov	r0, r4
   3d674:	ldrd	r4, [sp]
   3d678:	ldr	r6, [sp, #8]
   3d67c:	add	sp, sp, #12
   3d680:	pop	{pc}		; (ldr pc, [sp], #4)

0003d684 <flatcc_json_printer_clear@@Base>:
   3d684:	str	r4, [sp, #-8]!
   3d688:	str	lr, [sp, #4]
   3d68c:	mov	r4, r0
   3d690:	ldrb	r3, [r0, #24]
   3d694:	cmp	r3, #0
   3d698:	beq	3d6ac <flatcc_json_printer_clear@@Base+0x28>
   3d69c:	ldr	r0, [r0]
   3d6a0:	cmp	r0, #0
   3d6a4:	beq	3d6ac <flatcc_json_printer_clear@@Base+0x28>
   3d6a8:	bl	14518 <free@plt>
   3d6ac:	mov	r2, #48	; 0x30
   3d6b0:	mov	r1, #0
   3d6b4:	mov	r0, r4
   3d6b8:	bl	1459c <memset@plt>
   3d6bc:	ldr	r4, [sp]
   3d6c0:	add	sp, sp, #4
   3d6c4:	pop	{pc}		; (ldr pc, [sp], #4)
   3d6c8:	eor	r1, r1, #-2147483648	; 0x80000000
   3d6cc:	b	3d6d4 <flatcc_json_printer_clear@@Base+0x50>
   3d6d0:	eor	r3, r3, #-2147483648	; 0x80000000
   3d6d4:	push	{r4, r5, lr}
   3d6d8:	lsl	r4, r1, #1
   3d6dc:	lsl	r5, r3, #1
   3d6e0:	teq	r4, r5
   3d6e4:	teqeq	r0, r2
   3d6e8:	orrsne	ip, r4, r0
   3d6ec:	orrsne	ip, r5, r2
   3d6f0:	mvnsne	ip, r4, asr #21
   3d6f4:	mvnsne	ip, r5, asr #21
   3d6f8:	beq	3d8e4 <flatcc_json_printer_clear@@Base+0x260>
   3d6fc:	lsr	r4, r4, #21
   3d700:	rsbs	r5, r4, r5, lsr #21
   3d704:	rsblt	r5, r5, #0
   3d708:	ble	3d728 <flatcc_json_printer_clear@@Base+0xa4>
   3d70c:	add	r4, r4, r5
   3d710:	eor	r2, r0, r2
   3d714:	eor	r3, r1, r3
   3d718:	eor	r0, r2, r0
   3d71c:	eor	r1, r3, r1
   3d720:	eor	r2, r0, r2
   3d724:	eor	r3, r1, r3
   3d728:	cmp	r5, #54	; 0x36
   3d72c:	pophi	{r4, r5, pc}
   3d730:	tst	r1, #-2147483648	; 0x80000000
   3d734:	lsl	r1, r1, #12
   3d738:	mov	ip, #1048576	; 0x100000
   3d73c:	orr	r1, ip, r1, lsr #12
   3d740:	beq	3d74c <flatcc_json_printer_clear@@Base+0xc8>
   3d744:	rsbs	r0, r0, #0
   3d748:	rsc	r1, r1, #0
   3d74c:	tst	r3, #-2147483648	; 0x80000000
   3d750:	lsl	r3, r3, #12
   3d754:	orr	r3, ip, r3, lsr #12
   3d758:	beq	3d764 <flatcc_json_printer_clear@@Base+0xe0>
   3d75c:	rsbs	r2, r2, #0
   3d760:	rsc	r3, r3, #0
   3d764:	teq	r4, r5
   3d768:	beq	3d8cc <flatcc_json_printer_clear@@Base+0x248>
   3d76c:	sub	r4, r4, #1
   3d770:	rsbs	lr, r5, #32
   3d774:	blt	3d790 <flatcc_json_printer_clear@@Base+0x10c>
   3d778:	lsl	ip, r2, lr
   3d77c:	adds	r0, r0, r2, lsr r5
   3d780:	adc	r1, r1, #0
   3d784:	adds	r0, r0, r3, lsl lr
   3d788:	adcs	r1, r1, r3, asr r5
   3d78c:	b	3d7ac <flatcc_json_printer_clear@@Base+0x128>
   3d790:	sub	r5, r5, #32
   3d794:	add	lr, lr, #32
   3d798:	cmp	r2, #1
   3d79c:	lsl	ip, r3, lr
   3d7a0:	orrcs	ip, ip, #2
   3d7a4:	adds	r0, r0, r3, asr r5
   3d7a8:	adcs	r1, r1, r3, asr #31
   3d7ac:	and	r5, r1, #-2147483648	; 0x80000000
   3d7b0:	bpl	3d7c0 <flatcc_json_printer_clear@@Base+0x13c>
   3d7b4:	rsbs	ip, ip, #0
   3d7b8:	rscs	r0, r0, #0
   3d7bc:	rsc	r1, r1, #0
   3d7c0:	cmp	r1, #1048576	; 0x100000
   3d7c4:	bcc	3d804 <flatcc_json_printer_clear@@Base+0x180>
   3d7c8:	cmp	r1, #2097152	; 0x200000
   3d7cc:	bcc	3d7ec <flatcc_json_printer_clear@@Base+0x168>
   3d7d0:	lsrs	r1, r1, #1
   3d7d4:	rrxs	r0, r0
   3d7d8:	rrx	ip, ip
   3d7dc:	add	r4, r4, #1
   3d7e0:	lsl	r2, r4, #21
   3d7e4:	cmn	r2, #4194304	; 0x400000
   3d7e8:	bcs	3d944 <flatcc_json_printer_clear@@Base+0x2c0>
   3d7ec:	cmp	ip, #-2147483648	; 0x80000000
   3d7f0:	lsrseq	ip, r0, #1
   3d7f4:	adcs	r0, r0, #0
   3d7f8:	adc	r1, r1, r4, lsl #20
   3d7fc:	orr	r1, r1, r5
   3d800:	pop	{r4, r5, pc}
   3d804:	lsls	ip, ip, #1
   3d808:	adcs	r0, r0, r0
   3d80c:	adc	r1, r1, r1
   3d810:	tst	r1, #1048576	; 0x100000
   3d814:	sub	r4, r4, #1
   3d818:	bne	3d7ec <flatcc_json_printer_clear@@Base+0x168>
   3d81c:	teq	r1, #0
   3d820:	moveq	r1, r0
   3d824:	moveq	r0, #0
   3d828:	clz	r3, r1
   3d82c:	addeq	r3, r3, #32
   3d830:	sub	r3, r3, #11
   3d834:	subs	r2, r3, #32
   3d838:	bge	3d85c <flatcc_json_printer_clear@@Base+0x1d8>
   3d83c:	adds	r2, r2, #12
   3d840:	ble	3d858 <flatcc_json_printer_clear@@Base+0x1d4>
   3d844:	add	ip, r2, #20
   3d848:	rsb	r2, r2, #12
   3d84c:	lsl	r0, r1, ip
   3d850:	lsr	r1, r1, r2
   3d854:	b	3d86c <flatcc_json_printer_clear@@Base+0x1e8>
   3d858:	add	r2, r2, #20
   3d85c:	rsble	ip, r2, #32
   3d860:	lsl	r1, r1, r2
   3d864:	orrle	r1, r1, r0, lsr ip
   3d868:	lslle	r0, r0, r2
   3d86c:	subs	r4, r4, r3
   3d870:	addge	r1, r1, r4, lsl #20
   3d874:	orrge	r1, r1, r5
   3d878:	popge	{r4, r5, pc}
   3d87c:	mvn	r4, r4
   3d880:	subs	r4, r4, #31
   3d884:	bge	3d8c0 <flatcc_json_printer_clear@@Base+0x23c>
   3d888:	adds	r4, r4, #12
   3d88c:	bgt	3d8a8 <flatcc_json_printer_clear@@Base+0x224>
   3d890:	add	r4, r4, #20
   3d894:	rsb	r2, r4, #32
   3d898:	lsr	r0, r0, r4
   3d89c:	orr	r0, r0, r1, lsl r2
   3d8a0:	orr	r1, r5, r1, lsr r4
   3d8a4:	pop	{r4, r5, pc}
   3d8a8:	rsb	r4, r4, #12
   3d8ac:	rsb	r2, r4, #32
   3d8b0:	lsr	r0, r0, r2
   3d8b4:	orr	r0, r0, r1, lsl r4
   3d8b8:	mov	r1, r5
   3d8bc:	pop	{r4, r5, pc}
   3d8c0:	lsr	r0, r1, r4
   3d8c4:	mov	r1, r5
   3d8c8:	pop	{r4, r5, pc}
   3d8cc:	teq	r4, #0
   3d8d0:	eor	r3, r3, #1048576	; 0x100000
   3d8d4:	eoreq	r1, r1, #1048576	; 0x100000
   3d8d8:	addeq	r4, r4, #1
   3d8dc:	subne	r5, r5, #1
   3d8e0:	b	3d76c <flatcc_json_printer_clear@@Base+0xe8>
   3d8e4:	mvns	ip, r4, asr #21
   3d8e8:	mvnsne	ip, r5, asr #21
   3d8ec:	beq	3d954 <flatcc_json_printer_clear@@Base+0x2d0>
   3d8f0:	teq	r4, r5
   3d8f4:	teqeq	r0, r2
   3d8f8:	beq	3d90c <flatcc_json_printer_clear@@Base+0x288>
   3d8fc:	orrs	ip, r4, r0
   3d900:	moveq	r1, r3
   3d904:	moveq	r0, r2
   3d908:	pop	{r4, r5, pc}
   3d90c:	teq	r1, r3
   3d910:	movne	r1, #0
   3d914:	movne	r0, #0
   3d918:	popne	{r4, r5, pc}
   3d91c:	lsrs	ip, r4, #21
   3d920:	bne	3d934 <flatcc_json_printer_clear@@Base+0x2b0>
   3d924:	lsls	r0, r0, #1
   3d928:	adcs	r1, r1, r1
   3d92c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3d930:	pop	{r4, r5, pc}
   3d934:	adds	r4, r4, #4194304	; 0x400000
   3d938:	addcc	r1, r1, #1048576	; 0x100000
   3d93c:	popcc	{r4, r5, pc}
   3d940:	and	r5, r1, #-2147483648	; 0x80000000
   3d944:	orr	r1, r5, #2130706432	; 0x7f000000
   3d948:	orr	r1, r1, #15728640	; 0xf00000
   3d94c:	mov	r0, #0
   3d950:	pop	{r4, r5, pc}
   3d954:	mvns	ip, r4, asr #21
   3d958:	movne	r1, r3
   3d95c:	movne	r0, r2
   3d960:	mvnseq	ip, r5, asr #21
   3d964:	movne	r3, r1
   3d968:	movne	r2, r0
   3d96c:	orrs	r4, r0, r1, lsl #12
   3d970:	orrseq	r5, r2, r3, lsl #12
   3d974:	teqeq	r1, r3
   3d978:	orrne	r1, r1, #524288	; 0x80000
   3d97c:	pop	{r4, r5, pc}
   3d980:	teq	r0, #0
   3d984:	moveq	r1, #0
   3d988:	bxeq	lr
   3d98c:	push	{r4, r5, lr}
   3d990:	mov	r4, #1024	; 0x400
   3d994:	add	r4, r4, #50	; 0x32
   3d998:	mov	r5, #0
   3d99c:	mov	r1, #0
   3d9a0:	b	3d81c <flatcc_json_printer_clear@@Base+0x198>
   3d9a4:	teq	r0, #0
   3d9a8:	moveq	r1, #0
   3d9ac:	bxeq	lr
   3d9b0:	push	{r4, r5, lr}
   3d9b4:	mov	r4, #1024	; 0x400
   3d9b8:	add	r4, r4, #50	; 0x32
   3d9bc:	ands	r5, r0, #-2147483648	; 0x80000000
   3d9c0:	rsbmi	r0, r0, #0
   3d9c4:	mov	r1, #0
   3d9c8:	b	3d81c <flatcc_json_printer_clear@@Base+0x198>
   3d9cc:	lsls	r2, r0, #1
   3d9d0:	asr	r1, r2, #3
   3d9d4:	rrx	r1, r1
   3d9d8:	lsl	r0, r2, #28
   3d9dc:	andsne	r3, r2, #-16777216	; 0xff000000
   3d9e0:	teqne	r3, #-16777216	; 0xff000000
   3d9e4:	eorne	r1, r1, #939524096	; 0x38000000
   3d9e8:	bxne	lr
   3d9ec:	bics	r2, r2, #-16777216	; 0xff000000
   3d9f0:	bxeq	lr
   3d9f4:	teq	r3, #-16777216	; 0xff000000
   3d9f8:	orreq	r1, r1, #524288	; 0x80000
   3d9fc:	bxeq	lr
   3da00:	push	{r4, r5, lr}
   3da04:	mov	r4, #896	; 0x380
   3da08:	and	r5, r1, #-2147483648	; 0x80000000
   3da0c:	bic	r1, r1, #-2147483648	; 0x80000000
   3da10:	b	3d81c <flatcc_json_printer_clear@@Base+0x198>
   3da14:	orrs	r2, r0, r1
   3da18:	bxeq	lr
   3da1c:	push	{r4, r5, lr}
   3da20:	mov	r5, #0
   3da24:	b	3da44 <flatcc_json_printer_clear@@Base+0x3c0>
   3da28:	orrs	r2, r0, r1
   3da2c:	bxeq	lr
   3da30:	push	{r4, r5, lr}
   3da34:	ands	r5, r1, #-2147483648	; 0x80000000
   3da38:	bpl	3da44 <flatcc_json_printer_clear@@Base+0x3c0>
   3da3c:	rsbs	r0, r0, #0
   3da40:	rsc	r1, r1, #0
   3da44:	mov	r4, #1024	; 0x400
   3da48:	add	r4, r4, #50	; 0x32
   3da4c:	lsrs	ip, r1, #22
   3da50:	beq	3d7c0 <flatcc_json_printer_clear@@Base+0x13c>
   3da54:	mov	r2, #3
   3da58:	lsrs	ip, ip, #3
   3da5c:	addne	r2, r2, #3
   3da60:	lsrs	ip, ip, #3
   3da64:	addne	r2, r2, #3
   3da68:	add	r2, r2, ip, lsr #3
   3da6c:	rsb	r3, r2, #32
   3da70:	lsl	ip, r0, r3
   3da74:	lsr	r0, r0, r2
   3da78:	orr	r0, r0, r1, lsl r3
   3da7c:	lsr	r1, r1, r2
   3da80:	add	r4, r4, r2
   3da84:	b	3d7c0 <flatcc_json_printer_clear@@Base+0x13c>
   3da88:	eor	r0, r0, #-2147483648	; 0x80000000
   3da8c:	b	3da94 <flatcc_json_printer_clear@@Base+0x410>
   3da90:	eor	r1, r1, #-2147483648	; 0x80000000
   3da94:	lsls	r2, r0, #1
   3da98:	lslsne	r3, r1, #1
   3da9c:	teqne	r2, r3
   3daa0:	mvnsne	ip, r2, asr #24
   3daa4:	mvnsne	ip, r3, asr #24
   3daa8:	beq	3dba0 <flatcc_json_printer_clear@@Base+0x51c>
   3daac:	lsr	r2, r2, #24
   3dab0:	rsbs	r3, r2, r3, lsr #24
   3dab4:	addgt	r2, r2, r3
   3dab8:	eorgt	r1, r0, r1
   3dabc:	eorgt	r0, r1, r0
   3dac0:	eorgt	r1, r0, r1
   3dac4:	rsblt	r3, r3, #0
   3dac8:	cmp	r3, #25
   3dacc:	bxhi	lr
   3dad0:	tst	r0, #-2147483648	; 0x80000000
   3dad4:	orr	r0, r0, #8388608	; 0x800000
   3dad8:	bic	r0, r0, #-16777216	; 0xff000000
   3dadc:	rsbne	r0, r0, #0
   3dae0:	tst	r1, #-2147483648	; 0x80000000
   3dae4:	orr	r1, r1, #8388608	; 0x800000
   3dae8:	bic	r1, r1, #-16777216	; 0xff000000
   3daec:	rsbne	r1, r1, #0
   3daf0:	teq	r2, r3
   3daf4:	beq	3db88 <flatcc_json_printer_clear@@Base+0x504>
   3daf8:	sub	r2, r2, #1
   3dafc:	adds	r0, r0, r1, asr r3
   3db00:	rsb	r3, r3, #32
   3db04:	lsl	r1, r1, r3
   3db08:	and	r3, r0, #-2147483648	; 0x80000000
   3db0c:	bpl	3db18 <flatcc_json_printer_clear@@Base+0x494>
   3db10:	rsbs	r1, r1, #0
   3db14:	rsc	r0, r0, #0
   3db18:	cmp	r0, #8388608	; 0x800000
   3db1c:	bcc	3db50 <flatcc_json_printer_clear@@Base+0x4cc>
   3db20:	cmp	r0, #16777216	; 0x1000000
   3db24:	bcc	3db3c <flatcc_json_printer_clear@@Base+0x4b8>
   3db28:	lsrs	r0, r0, #1
   3db2c:	rrx	r1, r1
   3db30:	add	r2, r2, #1
   3db34:	cmp	r2, #254	; 0xfe
   3db38:	bcs	3dbf4 <flatcc_json_printer_clear@@Base+0x570>
   3db3c:	cmp	r1, #-2147483648	; 0x80000000
   3db40:	adc	r0, r0, r2, lsl #23
   3db44:	biceq	r0, r0, #1
   3db48:	orr	r0, r0, r3
   3db4c:	bx	lr
   3db50:	lsls	r1, r1, #1
   3db54:	adc	r0, r0, r0
   3db58:	tst	r0, #8388608	; 0x800000
   3db5c:	sub	r2, r2, #1
   3db60:	bne	3db3c <flatcc_json_printer_clear@@Base+0x4b8>
   3db64:	clz	ip, r0
   3db68:	sub	ip, ip, #8
   3db6c:	subs	r2, r2, ip
   3db70:	lsl	r0, r0, ip
   3db74:	addge	r0, r0, r2, lsl #23
   3db78:	rsblt	r2, r2, #0
   3db7c:	orrge	r0, r0, r3
   3db80:	orrlt	r0, r3, r0, lsr r2
   3db84:	bx	lr
   3db88:	teq	r2, #0
   3db8c:	eor	r1, r1, #8388608	; 0x800000
   3db90:	eoreq	r0, r0, #8388608	; 0x800000
   3db94:	addeq	r2, r2, #1
   3db98:	subne	r3, r3, #1
   3db9c:	b	3daf8 <flatcc_json_printer_clear@@Base+0x474>
   3dba0:	lsl	r3, r1, #1
   3dba4:	mvns	ip, r2, asr #24
   3dba8:	mvnsne	ip, r3, asr #24
   3dbac:	beq	3dc00 <flatcc_json_printer_clear@@Base+0x57c>
   3dbb0:	teq	r2, r3
   3dbb4:	beq	3dbc4 <flatcc_json_printer_clear@@Base+0x540>
   3dbb8:	teq	r2, #0
   3dbbc:	moveq	r0, r1
   3dbc0:	bx	lr
   3dbc4:	teq	r0, r1
   3dbc8:	movne	r0, #0
   3dbcc:	bxne	lr
   3dbd0:	tst	r2, #-16777216	; 0xff000000
   3dbd4:	bne	3dbe4 <flatcc_json_printer_clear@@Base+0x560>
   3dbd8:	lsls	r0, r0, #1
   3dbdc:	orrcs	r0, r0, #-2147483648	; 0x80000000
   3dbe0:	bx	lr
   3dbe4:	adds	r2, r2, #33554432	; 0x2000000
   3dbe8:	addcc	r0, r0, #8388608	; 0x800000
   3dbec:	bxcc	lr
   3dbf0:	and	r3, r0, #-2147483648	; 0x80000000
   3dbf4:	orr	r0, r3, #2130706432	; 0x7f000000
   3dbf8:	orr	r0, r0, #8388608	; 0x800000
   3dbfc:	bx	lr
   3dc00:	mvns	r2, r2, asr #24
   3dc04:	movne	r0, r1
   3dc08:	mvnseq	r3, r3, asr #24
   3dc0c:	movne	r1, r0
   3dc10:	lsls	r2, r0, #9
   3dc14:	lslseq	r3, r1, #9
   3dc18:	teqeq	r0, r1
   3dc1c:	orrne	r0, r0, #4194304	; 0x400000
   3dc20:	bx	lr
   3dc24:	mov	r3, #0
   3dc28:	b	3dc34 <flatcc_json_printer_clear@@Base+0x5b0>
   3dc2c:	ands	r3, r0, #-2147483648	; 0x80000000
   3dc30:	rsbmi	r0, r0, #0
   3dc34:	movs	ip, r0
   3dc38:	bxeq	lr
   3dc3c:	orr	r3, r3, #1258291200	; 0x4b000000
   3dc40:	mov	r1, r0
   3dc44:	mov	r0, #0
   3dc48:	b	3dc8c <flatcc_json_printer_clear@@Base+0x608>
   3dc4c:	orrs	r2, r0, r1
   3dc50:	bxeq	lr
   3dc54:	mov	r3, #0
   3dc58:	b	3dc74 <flatcc_json_printer_clear@@Base+0x5f0>
   3dc5c:	orrs	r2, r0, r1
   3dc60:	bxeq	lr
   3dc64:	ands	r3, r1, #-2147483648	; 0x80000000
   3dc68:	bpl	3dc74 <flatcc_json_printer_clear@@Base+0x5f0>
   3dc6c:	rsbs	r0, r0, #0
   3dc70:	rsc	r1, r1, #0
   3dc74:	movs	ip, r1
   3dc78:	moveq	ip, r0
   3dc7c:	moveq	r1, r0
   3dc80:	moveq	r0, #0
   3dc84:	orr	r3, r3, #1526726656	; 0x5b000000
   3dc88:	subeq	r3, r3, #268435456	; 0x10000000
   3dc8c:	sub	r3, r3, #8388608	; 0x800000
   3dc90:	clz	r2, ip
   3dc94:	subs	r2, r2, #8
   3dc98:	sub	r3, r3, r2, lsl #23
   3dc9c:	blt	3dcbc <flatcc_json_printer_clear@@Base+0x638>
   3dca0:	add	r3, r3, r1, lsl r2
   3dca4:	lsl	ip, r0, r2
   3dca8:	rsb	r2, r2, #32
   3dcac:	cmp	ip, #-2147483648	; 0x80000000
   3dcb0:	adc	r0, r3, r0, lsr r2
   3dcb4:	biceq	r0, r0, #1
   3dcb8:	bx	lr
   3dcbc:	add	r2, r2, #32
   3dcc0:	lsl	ip, r1, r2
   3dcc4:	rsb	r2, r2, #32
   3dcc8:	orrs	r0, r0, ip, lsl #1
   3dccc:	adc	r0, r3, r1, lsr r2
   3dcd0:	biceq	r0, r0, ip, lsr #31
   3dcd4:	bx	lr
   3dcd8:	cmp	r3, #0
   3dcdc:	cmpeq	r2, #0
   3dce0:	bne	3dcf8 <flatcc_json_printer_clear@@Base+0x674>
   3dce4:	cmp	r1, #0
   3dce8:	cmpeq	r0, #0
   3dcec:	mvnne	r1, #0
   3dcf0:	mvnne	r0, #0
   3dcf4:	b	3dd14 <flatcc_json_printer_clear@@Base+0x690>
   3dcf8:	sub	sp, sp, #8
   3dcfc:	push	{sp, lr}
   3dd00:	bl	3dd24 <flatcc_json_printer_clear@@Base+0x6a0>
   3dd04:	ldr	lr, [sp, #4]
   3dd08:	add	sp, sp, #8
   3dd0c:	pop	{r2, r3}
   3dd10:	bx	lr
   3dd14:	push	{r1, lr}
   3dd18:	mov	r0, #8
   3dd1c:	bl	144f4 <raise@plt>
   3dd20:	pop	{r1, pc}
   3dd24:	cmp	r1, r3
   3dd28:	cmpeq	r0, r2
   3dd2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dd30:	mov	r4, r0
   3dd34:	movcc	r0, #0
   3dd38:	mov	r5, r1
   3dd3c:	ldr	lr, [sp, #36]	; 0x24
   3dd40:	movcc	r1, r0
   3dd44:	bcc	3de40 <flatcc_json_printer_clear@@Base+0x7bc>
   3dd48:	cmp	r3, #0
   3dd4c:	clzeq	ip, r2
   3dd50:	clzne	ip, r3
   3dd54:	addeq	ip, ip, #32
   3dd58:	cmp	r5, #0
   3dd5c:	clzeq	r1, r4
   3dd60:	addeq	r1, r1, #32
   3dd64:	clzne	r1, r5
   3dd68:	sub	ip, ip, r1
   3dd6c:	sub	sl, ip, #32
   3dd70:	lsl	r9, r3, ip
   3dd74:	rsb	fp, ip, #32
   3dd78:	orr	r9, r9, r2, lsl sl
   3dd7c:	orr	r9, r9, r2, lsr fp
   3dd80:	lsl	r8, r2, ip
   3dd84:	cmp	r5, r9
   3dd88:	cmpeq	r4, r8
   3dd8c:	movcc	r0, #0
   3dd90:	movcc	r1, r0
   3dd94:	bcc	3ddb0 <flatcc_json_printer_clear@@Base+0x72c>
   3dd98:	mov	r0, #1
   3dd9c:	subs	r4, r4, r8
   3dda0:	lsl	r1, r0, sl
   3dda4:	orr	r1, r1, r0, lsr fp
   3dda8:	lsl	r0, r0, ip
   3ddac:	sbc	r5, r5, r9
   3ddb0:	cmp	ip, #0
   3ddb4:	beq	3de40 <flatcc_json_printer_clear@@Base+0x7bc>
   3ddb8:	lsr	r6, r8, #1
   3ddbc:	orr	r6, r6, r9, lsl #31
   3ddc0:	lsr	r7, r9, #1
   3ddc4:	mov	r2, ip
   3ddc8:	b	3ddec <flatcc_json_printer_clear@@Base+0x768>
   3ddcc:	subs	r3, r4, r6
   3ddd0:	sbc	r8, r5, r7
   3ddd4:	adds	r3, r3, r3
   3ddd8:	adc	r8, r8, r8
   3dddc:	adds	r4, r3, #1
   3dde0:	adc	r5, r8, #0
   3dde4:	subs	r2, r2, #1
   3dde8:	beq	3de08 <flatcc_json_printer_clear@@Base+0x784>
   3ddec:	cmp	r5, r7
   3ddf0:	cmpeq	r4, r6
   3ddf4:	bcs	3ddcc <flatcc_json_printer_clear@@Base+0x748>
   3ddf8:	adds	r4, r4, r4
   3ddfc:	adc	r5, r5, r5
   3de00:	subs	r2, r2, #1
   3de04:	bne	3ddec <flatcc_json_printer_clear@@Base+0x768>
   3de08:	lsr	r3, r4, ip
   3de0c:	orr	r3, r3, r5, lsl fp
   3de10:	lsr	r2, r5, ip
   3de14:	orr	r3, r3, r5, lsr sl
   3de18:	adds	r0, r0, r4
   3de1c:	mov	r4, r3
   3de20:	lsl	r3, r2, ip
   3de24:	orr	r3, r3, r4, lsl sl
   3de28:	lsl	ip, r4, ip
   3de2c:	orr	r3, r3, r4, lsr fp
   3de30:	adc	r1, r1, r5
   3de34:	subs	r0, r0, ip
   3de38:	mov	r5, r2
   3de3c:	sbc	r1, r1, r3
   3de40:	cmp	lr, #0
   3de44:	strdne	r4, [lr]
   3de48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003de4c <__libc_csu_init@@Base>:
   3de4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3de50:	mov	r7, r0
   3de54:	ldr	r6, [pc, #72]	; 3dea4 <__libc_csu_init@@Base+0x58>
   3de58:	ldr	r5, [pc, #72]	; 3dea8 <__libc_csu_init@@Base+0x5c>
   3de5c:	add	r6, pc, r6
   3de60:	add	r5, pc, r5
   3de64:	sub	r6, r6, r5
   3de68:	mov	r8, r1
   3de6c:	mov	r9, r2
   3de70:	bl	144d4 <raise@plt-0x20>
   3de74:	asrs	r6, r6, #2
   3de78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3de7c:	mov	r4, #0
   3de80:	add	r4, r4, #1
   3de84:	ldr	r3, [r5], #4
   3de88:	mov	r2, r9
   3de8c:	mov	r1, r8
   3de90:	mov	r0, r7
   3de94:	blx	r3
   3de98:	cmp	r6, r4
   3de9c:	bne	3de80 <__libc_csu_init@@Base+0x34>
   3dea0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dea4:	strheq	r6, [r1], -r0
   3dea8:	andeq	r6, r1, r8, lsr #1

0003deac <__libc_csu_fini@@Base>:
   3deac:	bx	lr

Disassembly of section .fini:

0003deb0 <.fini>:
   3deb0:	push	{r3, lr}
   3deb4:	pop	{r3, pc}
