
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

00011dcc <.init>:
   11dcc:	push	{r3, lr}
   11dd0:	bl	1238c <__assert_fail@plt+0x54>
   11dd4:	pop	{r3, pc}

Disassembly of section .plt:

00011dd8 <pthread_mutex_unlock@plt-0x14>:
   11dd8:	push	{lr}		; (str lr, [sp, #-4]!)
   11ddc:	ldr	lr, [pc, #4]	; 11de8 <pthread_mutex_unlock@plt-0x4>
   11de0:	add	lr, pc, lr
   11de4:	ldr	pc, [lr, #8]!
   11de8:	andeq	r7, r2, r8, lsl r2

00011dec <pthread_mutex_unlock@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #159744	; 0x27000
   11df4:	ldr	pc, [ip, #536]!	; 0x218

00011df8 <fdopen@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #159744	; 0x27000
   11e00:	ldr	pc, [ip, #528]!	; 0x210

00011e04 <calloc@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #159744	; 0x27000
   11e0c:	ldr	pc, [ip, #520]!	; 0x208

00011e10 <fputs_unlocked@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #159744	; 0x27000
   11e18:	ldr	pc, [ip, #512]!	; 0x200

00011e1c <raise@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #159744	; 0x27000
   11e24:	ldr	pc, [ip, #504]!	; 0x1f8

00011e28 <strcmp@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #159744	; 0x27000
   11e30:	ldr	pc, [ip, #496]!	; 0x1f0

00011e34 <strtol@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #159744	; 0x27000
   11e3c:	ldr	pc, [ip, #488]!	; 0x1e8

00011e40 <posix_fadvise64@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #159744	; 0x27000
   11e48:	ldr	pc, [ip, #480]!	; 0x1e0

00011e4c <pause@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #159744	; 0x27000
   11e54:	ldr	pc, [ip, #472]!	; 0x1d8

00011e58 <pthread_mutex_destroy@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #159744	; 0x27000
   11e60:	ldr	pc, [ip, #464]!	; 0x1d0

00011e64 <fflush@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #159744	; 0x27000
   11e6c:	ldr	pc, [ip, #456]!	; 0x1c8

00011e70 <wcwidth@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #159744	; 0x27000
   11e78:	ldr	pc, [ip, #448]!	; 0x1c0

00011e7c <memmove@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #159744	; 0x27000
   11e84:	ldr	pc, [ip, #440]!	; 0x1b8

00011e88 <free@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #159744	; 0x27000
   11e90:	ldr	pc, [ip, #432]!	; 0x1b0

00011e94 <pthread_mutex_lock@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #159744	; 0x27000
   11e9c:	ldr	pc, [ip, #424]!	; 0x1a8

00011ea0 <nanosleep@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #159744	; 0x27000
   11ea8:	ldr	pc, [ip, #416]!	; 0x1a0

00011eac <ferror@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #159744	; 0x27000
   11eb4:	ldr	pc, [ip, #408]!	; 0x198

00011eb8 <_exit@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #159744	; 0x27000
   11ec0:	ldr	pc, [ip, #400]!	; 0x190

00011ec4 <memcpy@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #159744	; 0x27000
   11ecc:	ldr	pc, [ip, #392]!	; 0x188

00011ed0 <execlp@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #159744	; 0x27000
   11ed8:	ldr	pc, [ip, #384]!	; 0x180

00011edc <pthread_mutex_init@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #159744	; 0x27000
   11ee4:	ldr	pc, [ip, #376]!	; 0x178

00011ee8 <__strtoull_internal@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #159744	; 0x27000
   11ef0:	ldr	pc, [ip, #368]!	; 0x170

00011ef4 <mbsinit@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #159744	; 0x27000
   11efc:	ldr	pc, [ip, #360]!	; 0x168

00011f00 <signal@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #159744	; 0x27000
   11f08:	ldr	pc, [ip, #352]!	; 0x160

00011f0c <__sched_cpucount@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #159744	; 0x27000
   11f14:	ldr	pc, [ip, #344]!	; 0x158

00011f18 <strtold@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #159744	; 0x27000
   11f20:	ldr	pc, [ip, #336]!	; 0x150

00011f24 <ftruncate64@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #159744	; 0x27000
   11f2c:	ldr	pc, [ip, #328]!	; 0x148

00011f30 <fwrite_unlocked@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #159744	; 0x27000
   11f38:	ldr	pc, [ip, #320]!	; 0x140

00011f3c <memcmp@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #159744	; 0x27000
   11f44:	ldr	pc, [ip, #312]!	; 0x138

00011f48 <stpcpy@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #159744	; 0x27000
   11f50:	ldr	pc, [ip, #304]!	; 0x130

00011f54 <dcgettext@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #159744	; 0x27000
   11f5c:	ldr	pc, [ip, #296]!	; 0x128

00011f60 <pthread_cond_init@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #159744	; 0x27000
   11f68:	ldr	pc, [ip, #288]!	; 0x120

00011f6c <sysconf@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #159744	; 0x27000
   11f74:	ldr	pc, [ip, #280]!	; 0x118

00011f78 <unlink@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #159744	; 0x27000
   11f80:	ldr	pc, [ip, #272]!	; 0x110

00011f84 <dup2@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #159744	; 0x27000
   11f8c:	ldr	pc, [ip, #264]!	; 0x108

00011f90 <getrlimit64@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #159744	; 0x27000
   11f98:	ldr	pc, [ip, #256]!	; 0x100

00011f9c <realloc@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #159744	; 0x27000
   11fa4:	ldr	pc, [ip, #248]!	; 0xf8

00011fa8 <sigismember@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #159744	; 0x27000
   11fb0:	ldr	pc, [ip, #240]!	; 0xf0

00011fb4 <textdomain@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #159744	; 0x27000
   11fbc:	ldr	pc, [ip, #232]!	; 0xe8

00011fc0 <iswcntrl@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #159744	; 0x27000
   11fc8:	ldr	pc, [ip, #224]!	; 0xe0

00011fcc <pthread_cond_destroy@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #159744	; 0x27000
   11fd4:	ldr	pc, [ip, #216]!	; 0xd8

00011fd8 <fflush_unlocked@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #159744	; 0x27000
   11fe0:	ldr	pc, [ip, #208]!	; 0xd0

00011fe4 <iswprint@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #159744	; 0x27000
   11fec:	ldr	pc, [ip, #200]!	; 0xc8

00011ff0 <__fxstat64@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #159744	; 0x27000
   11ff8:	ldr	pc, [ip, #192]!	; 0xc0

00011ffc <sigaction@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #159744	; 0x27000
   12004:	ldr	pc, [ip, #184]!	; 0xb8

00012008 <mkostemp64@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #159744	; 0x27000
   12010:	ldr	pc, [ip, #176]!	; 0xb0

00012014 <fwrite@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #159744	; 0x27000
   1201c:	ldr	pc, [ip, #168]!	; 0xa8

00012020 <lseek64@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #159744	; 0x27000
   12028:	ldr	pc, [ip, #160]!	; 0xa0

0001202c <__stpcpy_chk@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #159744	; 0x27000
   12034:	ldr	pc, [ip, #152]!	; 0x98

00012038 <waitpid@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #159744	; 0x27000
   12040:	ldr	pc, [ip, #144]!	; 0x90

00012044 <__ctype_get_mb_cur_max@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #159744	; 0x27000
   1204c:	ldr	pc, [ip, #136]!	; 0x88

00012050 <pthread_sigmask@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #159744	; 0x27000
   12058:	ldr	pc, [ip, #128]!	; 0x80

0001205c <pthread_create@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #159744	; 0x27000
   12064:	ldr	pc, [ip, #120]!	; 0x78

00012068 <__fpending@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #159744	; 0x27000
   12070:	ldr	pc, [ip, #112]!	; 0x70

00012074 <mbrtowc@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #159744	; 0x27000
   1207c:	ldr	pc, [ip, #104]!	; 0x68

00012080 <error@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #159744	; 0x27000
   12088:	ldr	pc, [ip, #96]!	; 0x60

0001208c <open64@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #159744	; 0x27000
   12094:	ldr	pc, [ip, #88]!	; 0x58

00012098 <strcoll@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #159744	; 0x27000
   120a0:	ldr	pc, [ip, #80]!	; 0x50

000120a4 <getenv@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #159744	; 0x27000
   120ac:	ldr	pc, [ip, #72]!	; 0x48

000120b0 <mkstemp64@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #159744	; 0x27000
   120b8:	ldr	pc, [ip, #64]!	; 0x40

000120bc <sysinfo@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #159744	; 0x27000
   120c4:	ldr	pc, [ip, #56]!	; 0x38

000120c8 <malloc@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #159744	; 0x27000
   120d0:	ldr	pc, [ip, #48]!	; 0x30

000120d4 <sigaddset@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #159744	; 0x27000
   120dc:	ldr	pc, [ip, #40]!	; 0x28

000120e0 <__libc_start_main@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #159744	; 0x27000
   120e8:	ldr	pc, [ip, #32]!

000120ec <__freading@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #159744	; 0x27000
   120f4:	ldr	pc, [ip, #24]!

000120f8 <__ctype_toupper_loc@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #159744	; 0x27000
   12100:	ldr	pc, [ip, #16]!

00012104 <__gmon_start__@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #159744	; 0x27000
   1210c:	ldr	pc, [ip, #8]!

00012110 <getopt_long@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #159744	; 0x27000
   12118:	ldr	pc, [ip, #0]!

0001211c <__ctype_b_loc@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #155648	; 0x26000
   12124:	ldr	pc, [ip, #4088]!	; 0xff8

00012128 <exit@plt>:
   12128:	add	ip, pc, #0, 12
   1212c:	add	ip, ip, #155648	; 0x26000
   12130:	ldr	pc, [ip, #4080]!	; 0xff0

00012134 <strtoul@plt>:
   12134:	add	ip, pc, #0, 12
   12138:	add	ip, ip, #155648	; 0x26000
   1213c:	ldr	pc, [ip, #4072]!	; 0xfe8

00012140 <strlen@plt>:
   12140:	add	ip, pc, #0, 12
   12144:	add	ip, ip, #155648	; 0x26000
   12148:	ldr	pc, [ip, #4064]!	; 0xfe0

0001214c <strchr@plt>:
   1214c:	add	ip, pc, #0, 12
   12150:	add	ip, ip, #155648	; 0x26000
   12154:	ldr	pc, [ip, #4056]!	; 0xfd8

00012158 <strxfrm@plt>:
   12158:	add	ip, pc, #0, 12
   1215c:	add	ip, ip, #155648	; 0x26000
   12160:	ldr	pc, [ip, #4048]!	; 0xfd0

00012164 <__errno_location@plt>:
   12164:	add	ip, pc, #0, 12
   12168:	add	ip, ip, #155648	; 0x26000
   1216c:	ldr	pc, [ip, #4040]!	; 0xfc8

00012170 <__cxa_atexit@plt>:
   12170:	add	ip, pc, #0, 12
   12174:	add	ip, ip, #155648	; 0x26000
   12178:	ldr	pc, [ip, #4032]!	; 0xfc0

0001217c <setvbuf@plt>:
   1217c:	add	ip, pc, #0, 12
   12180:	add	ip, ip, #155648	; 0x26000
   12184:	ldr	pc, [ip, #4024]!	; 0xfb8

00012188 <memset@plt>:
   12188:	add	ip, pc, #0, 12
   1218c:	add	ip, ip, #155648	; 0x26000
   12190:	ldr	pc, [ip, #4016]!	; 0xfb0

00012194 <fgetc@plt>:
   12194:	add	ip, pc, #0, 12
   12198:	add	ip, ip, #155648	; 0x26000
   1219c:	ldr	pc, [ip, #4008]!	; 0xfa8

000121a0 <__printf_chk@plt>:
   121a0:	add	ip, pc, #0, 12
   121a4:	add	ip, ip, #155648	; 0x26000
   121a8:	ldr	pc, [ip, #4000]!	; 0xfa0

000121ac <write@plt>:
   121ac:	add	ip, pc, #0, 12
   121b0:	add	ip, ip, #155648	; 0x26000
   121b4:	ldr	pc, [ip, #3992]!	; 0xf98

000121b8 <fileno@plt>:
   121b8:	add	ip, pc, #0, 12
   121bc:	add	ip, ip, #155648	; 0x26000
   121c0:	ldr	pc, [ip, #3984]!	; 0xf90

000121c4 <__fprintf_chk@plt>:
   121c4:	add	ip, pc, #0, 12
   121c8:	add	ip, ip, #155648	; 0x26000
   121cc:	ldr	pc, [ip, #3976]!	; 0xf88

000121d0 <memchr@plt>:
   121d0:	add	ip, pc, #0, 12
   121d4:	add	ip, ip, #155648	; 0x26000
   121d8:	ldr	pc, [ip, #3968]!	; 0xf80

000121dc <fclose@plt>:
   121dc:	add	ip, pc, #0, 12
   121e0:	add	ip, ip, #155648	; 0x26000
   121e4:	ldr	pc, [ip, #3960]!	; 0xf78

000121e8 <pipe@plt>:
   121e8:	add	ip, pc, #0, 12
   121ec:	add	ip, ip, #155648	; 0x26000
   121f0:	ldr	pc, [ip, #3952]!	; 0xf70

000121f4 <fseeko64@plt>:
   121f4:	add	ip, pc, #0, 12
   121f8:	add	ip, ip, #155648	; 0x26000
   121fc:	ldr	pc, [ip, #3944]!	; 0xf68

00012200 <fcntl64@plt>:
   12200:	add	ip, pc, #0, 12
   12204:	add	ip, ip, #155648	; 0x26000
   12208:	ldr	pc, [ip, #3936]!	; 0xf60

0001220c <__overflow@plt>:
   1220c:	add	ip, pc, #0, 12
   12210:	add	ip, ip, #155648	; 0x26000
   12214:	ldr	pc, [ip, #3928]!	; 0xf58

00012218 <setlocale@plt>:
   12218:	add	ip, pc, #0, 12
   1221c:	add	ip, ip, #155648	; 0x26000
   12220:	ldr	pc, [ip, #3920]!	; 0xf50

00012224 <sigemptyset@plt>:
   12224:	add	ip, pc, #0, 12
   12228:	add	ip, ip, #155648	; 0x26000
   1222c:	ldr	pc, [ip, #3912]!	; 0xf48

00012230 <fork@plt>:
   12230:	add	ip, pc, #0, 12
   12234:	add	ip, ip, #155648	; 0x26000
   12238:	ldr	pc, [ip, #3904]!	; 0xf40

0001223c <__explicit_bzero_chk@plt>:
   1223c:	add	ip, pc, #0, 12
   12240:	add	ip, ip, #155648	; 0x26000
   12244:	ldr	pc, [ip, #3896]!	; 0xf38

00012248 <strrchr@plt>:
   12248:	add	ip, pc, #0, 12
   1224c:	add	ip, ip, #155648	; 0x26000
   12250:	ldr	pc, [ip, #3888]!	; 0xf30

00012254 <pthread_join@plt>:
   12254:	add	ip, pc, #0, 12
   12258:	add	ip, ip, #155648	; 0x26000
   1225c:	ldr	pc, [ip, #3880]!	; 0xf28

00012260 <nl_langinfo@plt>:
   12260:	add	ip, pc, #0, 12
   12264:	add	ip, ip, #155648	; 0x26000
   12268:	ldr	pc, [ip, #3872]!	; 0xf20

0001226c <localeconv@plt>:
   1226c:	add	ip, pc, #0, 12
   12270:	add	ip, ip, #155648	; 0x26000
   12274:	ldr	pc, [ip, #3864]!	; 0xf18

00012278 <clearerr_unlocked@plt>:
   12278:	add	ip, pc, #0, 12
   1227c:	add	ip, ip, #155648	; 0x26000
   12280:	ldr	pc, [ip, #3856]!	; 0xf10

00012284 <fopen64@plt>:
   12284:	add	ip, pc, #0, 12
   12288:	add	ip, ip, #155648	; 0x26000
   1228c:	ldr	pc, [ip, #3848]!	; 0xf08

00012290 <qsort@plt>:
   12290:	add	ip, pc, #0, 12
   12294:	add	ip, ip, #155648	; 0x26000
   12298:	ldr	pc, [ip, #3840]!	; 0xf00

0001229c <pipe2@plt>:
   1229c:	add	ip, pc, #0, 12
   122a0:	add	ip, ip, #155648	; 0x26000
   122a4:	ldr	pc, [ip, #3832]!	; 0xef8

000122a8 <pthread_cond_wait@plt>:
   122a8:	add	ip, pc, #0, 12
   122ac:	add	ip, ip, #155648	; 0x26000
   122b0:	ldr	pc, [ip, #3824]!	; 0xef0

000122b4 <euidaccess@plt>:
   122b4:	add	ip, pc, #0, 12
   122b8:	add	ip, ip, #155648	; 0x26000
   122bc:	ldr	pc, [ip, #3816]!	; 0xee8

000122c0 <sched_getaffinity@plt>:
   122c0:	add	ip, pc, #0, 12
   122c4:	add	ip, ip, #155648	; 0x26000
   122c8:	ldr	pc, [ip, #3808]!	; 0xee0

000122cc <bindtextdomain@plt>:
   122cc:	add	ip, pc, #0, 12
   122d0:	add	ip, ip, #155648	; 0x26000
   122d4:	ldr	pc, [ip, #3800]!	; 0xed8

000122d8 <fread_unlocked@plt>:
   122d8:	add	ip, pc, #0, 12
   122dc:	add	ip, ip, #155648	; 0x26000
   122e0:	ldr	pc, [ip, #3792]!	; 0xed0

000122e4 <getrandom@plt>:
   122e4:	add	ip, pc, #0, 12
   122e8:	add	ip, ip, #155648	; 0x26000
   122ec:	ldr	pc, [ip, #3784]!	; 0xec8

000122f0 <__xstat64@plt>:
   122f0:	add	ip, pc, #0, 12
   122f4:	add	ip, ip, #155648	; 0x26000
   122f8:	ldr	pc, [ip, #3776]!	; 0xec0

000122fc <strncmp@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #155648	; 0x26000
   12304:	ldr	pc, [ip, #3768]!	; 0xeb8

00012308 <pthread_cond_signal@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #155648	; 0x26000
   12310:	ldr	pc, [ip, #3760]!	; 0xeb0

00012314 <abort@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #155648	; 0x26000
   1231c:	ldr	pc, [ip, #3752]!	; 0xea8

00012320 <close@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #155648	; 0x26000
   12328:	ldr	pc, [ip, #3744]!	; 0xea0

0001232c <dcngettext@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #155648	; 0x26000
   12334:	ldr	pc, [ip, #3736]!	; 0xe98

00012338 <__assert_fail@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #155648	; 0x26000
   12340:	ldr	pc, [ip, #3728]!	; 0xe90

Disassembly of section .text:

00012350 <_obstack_begin@@Base-0x13210>:
   12350:	mov	fp, #0
   12354:	mov	lr, #0
   12358:	pop	{r1}		; (ldr r1, [sp], #4)
   1235c:	mov	r2, sp
   12360:	push	{r2}		; (str r2, [sp, #-4]!)
   12364:	push	{r0}		; (str r0, [sp, #-4]!)
   12368:	ldr	ip, [pc, #16]	; 12380 <__assert_fail@plt+0x48>
   1236c:	push	{ip}		; (str ip, [sp, #-4]!)
   12370:	ldr	r0, [pc, #12]	; 12384 <__assert_fail@plt+0x4c>
   12374:	ldr	r3, [pc, #12]	; 12388 <__assert_fail@plt+0x50>
   12378:	bl	120e0 <__libc_start_main@plt>
   1237c:	bl	12314 <abort@plt>
   12380:	andeq	r5, r2, r8, lsl #31
   12384:	muleq	r1, r0, r8
   12388:	andeq	r5, r2, r8, lsr #30
   1238c:	ldr	r3, [pc, #20]	; 123a8 <__assert_fail@plt+0x70>
   12390:	ldr	r2, [pc, #20]	; 123ac <__assert_fail@plt+0x74>
   12394:	add	r3, pc, r3
   12398:	ldr	r2, [r3, r2]
   1239c:	cmp	r2, #0
   123a0:	bxeq	lr
   123a4:	b	12104 <__gmon_start__@plt>
   123a8:	andeq	r6, r2, r4, ror #24
   123ac:	ldrdeq	r0, [r0], -r4
   123b0:	ldr	r0, [pc, #24]	; 123d0 <__assert_fail@plt+0x98>
   123b4:	ldr	r3, [pc, #24]	; 123d4 <__assert_fail@plt+0x9c>
   123b8:	cmp	r3, r0
   123bc:	bxeq	lr
   123c0:	ldr	r3, [pc, #16]	; 123d8 <__assert_fail@plt+0xa0>
   123c4:	cmp	r3, #0
   123c8:	bxeq	lr
   123cc:	bx	r3
   123d0:			; <UNDEFINED> instruction: 0x000392b4
   123d4:			; <UNDEFINED> instruction: 0x000392b4
   123d8:	andeq	r0, r0, r0
   123dc:	ldr	r0, [pc, #36]	; 12408 <__assert_fail@plt+0xd0>
   123e0:	ldr	r1, [pc, #36]	; 1240c <__assert_fail@plt+0xd4>
   123e4:	sub	r1, r1, r0
   123e8:	asr	r1, r1, #2
   123ec:	add	r1, r1, r1, lsr #31
   123f0:	asrs	r1, r1, #1
   123f4:	bxeq	lr
   123f8:	ldr	r3, [pc, #16]	; 12410 <__assert_fail@plt+0xd8>
   123fc:	cmp	r3, #0
   12400:	bxeq	lr
   12404:	bx	r3
   12408:			; <UNDEFINED> instruction: 0x000392b4
   1240c:			; <UNDEFINED> instruction: 0x000392b4
   12410:	andeq	r0, r0, r0
   12414:	push	{r4, lr}
   12418:	ldr	r4, [pc, #24]	; 12438 <__assert_fail@plt+0x100>
   1241c:	ldrb	r3, [r4]
   12420:	cmp	r3, #0
   12424:	popne	{r4, pc}
   12428:	bl	123b0 <__assert_fail@plt+0x78>
   1242c:	mov	r3, #1
   12430:	strb	r3, [r4]
   12434:	pop	{r4, pc}
   12438:	ldrdeq	r9, [r3], -ip
   1243c:	b	123dc <__assert_fail@plt+0xa4>
   12440:	push	{fp, lr}
   12444:	mov	fp, sp
   12448:	sub	sp, sp, #56	; 0x38
   1244c:	mov	r4, r0
   12450:	cmp	r0, #0
   12454:	bne	12848 <__assert_fail@plt+0x510>
   12458:	movw	r1, #24539	; 0x5fdb
   1245c:	mov	r0, #0
   12460:	mov	r2, #5
   12464:	movt	r1, #2
   12468:	bl	11f54 <dcgettext@plt>
   1246c:	mov	r1, r0
   12470:	movw	r0, #39108	; 0x98c4
   12474:	movt	r0, #3
   12478:	ldr	r2, [r0]
   1247c:	mov	r0, #1
   12480:	mov	r3, r2
   12484:	bl	121a0 <__printf_chk@plt>
   12488:	movw	r1, #24610	; 0x6022
   1248c:	mov	r0, #0
   12490:	mov	r2, #5
   12494:	movt	r1, #2
   12498:	bl	11f54 <dcgettext@plt>
   1249c:	movw	r7, #37588	; 0x92d4
   124a0:	movt	r7, #3
   124a4:	ldr	r1, [r7]
   124a8:	bl	11e10 <fputs_unlocked@plt>
   124ac:	movw	r1, #29176	; 0x71f8
   124b0:	mov	r0, #0
   124b4:	mov	r2, #5
   124b8:	movt	r1, #2
   124bc:	bl	11f54 <dcgettext@plt>
   124c0:	ldr	r1, [r7]
   124c4:	bl	11e10 <fputs_unlocked@plt>
   124c8:	movw	r1, #29232	; 0x7230
   124cc:	mov	r0, #0
   124d0:	mov	r2, #5
   124d4:	movt	r1, #2
   124d8:	bl	11f54 <dcgettext@plt>
   124dc:	ldr	r1, [r7]
   124e0:	bl	11e10 <fputs_unlocked@plt>
   124e4:	movw	r1, #24673	; 0x6061
   124e8:	mov	r0, #0
   124ec:	mov	r2, #5
   124f0:	movt	r1, #2
   124f4:	bl	11f54 <dcgettext@plt>
   124f8:	ldr	r1, [r7]
   124fc:	bl	11e10 <fputs_unlocked@plt>
   12500:	movw	r1, #24693	; 0x6075
   12504:	mov	r0, #0
   12508:	mov	r2, #5
   1250c:	movt	r1, #2
   12510:	bl	11f54 <dcgettext@plt>
   12514:	ldr	r1, [r7]
   12518:	bl	11e10 <fputs_unlocked@plt>
   1251c:	movw	r1, #24897	; 0x6141
   12520:	mov	r0, #0
   12524:	mov	r2, #5
   12528:	movt	r1, #2
   1252c:	bl	11f54 <dcgettext@plt>
   12530:	ldr	r1, [r7]
   12534:	bl	11e10 <fputs_unlocked@plt>
   12538:	movw	r1, #25108	; 0x6214
   1253c:	mov	r0, #0
   12540:	mov	r2, #5
   12544:	movt	r1, #2
   12548:	bl	11f54 <dcgettext@plt>
   1254c:	ldr	r1, [r7]
   12550:	bl	11e10 <fputs_unlocked@plt>
   12554:	movw	r1, #25184	; 0x6260
   12558:	mov	r0, #0
   1255c:	mov	r2, #5
   12560:	movt	r1, #2
   12564:	bl	11f54 <dcgettext@plt>
   12568:	ldr	r1, [r7]
   1256c:	bl	11e10 <fputs_unlocked@plt>
   12570:	movw	r1, #25458	; 0x6372
   12574:	mov	r0, #0
   12578:	mov	r2, #5
   1257c:	movt	r1, #2
   12580:	bl	11f54 <dcgettext@plt>
   12584:	ldr	r1, [r7]
   12588:	bl	11e10 <fputs_unlocked@plt>
   1258c:	movw	r1, #25736	; 0x6488
   12590:	mov	r0, #0
   12594:	mov	r2, #5
   12598:	movt	r1, #2
   1259c:	bl	11f54 <dcgettext@plt>
   125a0:	ldr	r1, [r7]
   125a4:	bl	11e10 <fputs_unlocked@plt>
   125a8:	movw	r1, #25753	; 0x6499
   125ac:	mov	r0, #0
   125b0:	mov	r2, #5
   125b4:	movt	r1, #2
   125b8:	bl	11f54 <dcgettext@plt>
   125bc:	ldr	r1, [r7]
   125c0:	bl	11e10 <fputs_unlocked@plt>
   125c4:	movw	r1, #25871	; 0x650f
   125c8:	mov	r0, #0
   125cc:	mov	r2, #5
   125d0:	movt	r1, #2
   125d4:	bl	11f54 <dcgettext@plt>
   125d8:	ldr	r1, [r7]
   125dc:	bl	11e10 <fputs_unlocked@plt>
   125e0:	movw	r1, #26148	; 0x6624
   125e4:	mov	r0, #0
   125e8:	mov	r2, #5
   125ec:	movt	r1, #2
   125f0:	bl	11f54 <dcgettext@plt>
   125f4:	ldr	r1, [r7]
   125f8:	bl	11e10 <fputs_unlocked@plt>
   125fc:	movw	r1, #26496	; 0x6780
   12600:	mov	r0, #0
   12604:	mov	r2, #5
   12608:	movt	r1, #2
   1260c:	bl	11f54 <dcgettext@plt>
   12610:	ldr	r1, [r7]
   12614:	bl	11e10 <fputs_unlocked@plt>
   12618:	movw	r1, #26640	; 0x6810
   1261c:	mov	r0, #0
   12620:	mov	r2, #5
   12624:	movt	r1, #2
   12628:	bl	11f54 <dcgettext@plt>
   1262c:	ldr	r1, [r7]
   12630:	bl	11e10 <fputs_unlocked@plt>
   12634:	movw	r1, #26856	; 0x68e8
   12638:	mov	r0, #0
   1263c:	mov	r2, #5
   12640:	movt	r1, #2
   12644:	bl	11f54 <dcgettext@plt>
   12648:	movw	r2, #27309	; 0x6aad
   1264c:	mov	r1, r0
   12650:	mov	r0, #1
   12654:	movt	r2, #2
   12658:	bl	121a0 <__printf_chk@plt>
   1265c:	movw	r1, #27314	; 0x6ab2
   12660:	mov	r0, #0
   12664:	mov	r2, #5
   12668:	movt	r1, #2
   1266c:	bl	11f54 <dcgettext@plt>
   12670:	ldr	r1, [r7]
   12674:	bl	11e10 <fputs_unlocked@plt>
   12678:	movw	r1, #27378	; 0x6af2
   1267c:	mov	r0, #0
   12680:	mov	r2, #5
   12684:	movt	r1, #2
   12688:	bl	11f54 <dcgettext@plt>
   1268c:	ldr	r1, [r7]
   12690:	bl	11e10 <fputs_unlocked@plt>
   12694:	movw	r1, #27423	; 0x6b1f
   12698:	mov	r0, #0
   1269c:	mov	r2, #5
   126a0:	movt	r1, #2
   126a4:	bl	11f54 <dcgettext@plt>
   126a8:	ldr	r1, [r7]
   126ac:	bl	11e10 <fputs_unlocked@plt>
   126b0:	movw	r1, #27477	; 0x6b55
   126b4:	mov	r0, #0
   126b8:	mov	r2, #5
   126bc:	movt	r1, #2
   126c0:	bl	11f54 <dcgettext@plt>
   126c4:	ldr	r1, [r7]
   126c8:	bl	11e10 <fputs_unlocked@plt>
   126cc:	movw	r1, #28081	; 0x6db1
   126d0:	mov	r0, #0
   126d4:	mov	r2, #5
   126d8:	movt	r1, #2
   126dc:	bl	11f54 <dcgettext@plt>
   126e0:	ldr	r1, [r7]
   126e4:	bl	11e10 <fputs_unlocked@plt>
   126e8:	movw	r0, #32216	; 0x7dd8
   126ec:	mov	r2, #48	; 0x30
   126f0:	mov	r6, sp
   126f4:	movw	r5, #28466	; 0x6f32
   126f8:	movt	r0, #2
   126fc:	movt	r5, #2
   12700:	add	r1, r0, #32
   12704:	add	r3, r0, #16
   12708:	vld1.64	{d18-d19}, [r0], r2
   1270c:	vld1.64	{d16-d17}, [r1]
   12710:	vld1.64	{d20-d21}, [r3]
   12714:	add	r1, r6, #32
   12718:	vldr	d22, [r0]
   1271c:	add	r0, r6, #16
   12720:	vst1.64	{d16-d17}, [r1]
   12724:	movw	r1, #29307	; 0x727b
   12728:	vst1.64	{d20-d21}, [r0]
   1272c:	mov	r0, r6
   12730:	vst1.64	{d18-d19}, [r0], r2
   12734:	movt	r1, #2
   12738:	vstr	d22, [r0]
   1273c:	mov	r0, r5
   12740:	bl	11e28 <strcmp@plt>
   12744:	cmp	r0, #0
   12748:	ldrne	r1, [r6, #8]!
   1274c:	cmpne	r1, #0
   12750:	bne	1273c <__assert_fail@plt+0x404>
   12754:	ldr	r6, [r6, #4]
   12758:	movw	r1, #29402	; 0x72da
   1275c:	mov	r0, #0
   12760:	mov	r2, #5
   12764:	movt	r1, #2
   12768:	bl	11f54 <dcgettext@plt>
   1276c:	movw	r2, #28740	; 0x7044
   12770:	movw	r3, #29425	; 0x72f1
   12774:	mov	r1, r0
   12778:	mov	r0, #1
   1277c:	movt	r2, #2
   12780:	movt	r3, #2
   12784:	bl	121a0 <__printf_chk@plt>
   12788:	cmp	r6, #0
   1278c:	mov	r0, #5
   12790:	mov	r1, #0
   12794:	moveq	r6, r5
   12798:	bl	12218 <setlocale@plt>
   1279c:	cmp	r0, #0
   127a0:	beq	127d8 <__assert_fail@plt+0x4a0>
   127a4:	movw	r1, #29465	; 0x7319
   127a8:	mov	r2, #3
   127ac:	movt	r1, #2
   127b0:	bl	122fc <strncmp@plt>
   127b4:	cmp	r0, #0
   127b8:	beq	127d8 <__assert_fail@plt+0x4a0>
   127bc:	movw	r1, #29469	; 0x731d
   127c0:	mov	r0, #0
   127c4:	mov	r2, #5
   127c8:	movt	r1, #2
   127cc:	bl	11f54 <dcgettext@plt>
   127d0:	ldr	r1, [r7]
   127d4:	bl	11e10 <fputs_unlocked@plt>
   127d8:	movw	r1, #29540	; 0x7364
   127dc:	mov	r0, #0
   127e0:	mov	r2, #5
   127e4:	movt	r1, #2
   127e8:	bl	11f54 <dcgettext@plt>
   127ec:	movw	r2, #29425	; 0x72f1
   127f0:	mov	r1, r0
   127f4:	mov	r0, #1
   127f8:	mov	r3, r5
   127fc:	movt	r2, #2
   12800:	bl	121a0 <__printf_chk@plt>
   12804:	movw	r1, #29567	; 0x737f
   12808:	mov	r0, #0
   1280c:	mov	r2, #5
   12810:	movt	r1, #2
   12814:	bl	11f54 <dcgettext@plt>
   12818:	movw	r3, #24692	; 0x6074
   1281c:	mov	r1, r0
   12820:	movw	r0, #29335	; 0x7297
   12824:	cmp	r6, r5
   12828:	mov	r2, r6
   1282c:	movt	r0, #2
   12830:	movt	r3, #2
   12834:	moveq	r3, r0
   12838:	mov	r0, #1
   1283c:	bl	121a0 <__printf_chk@plt>
   12840:	mov	r0, r4
   12844:	bl	12128 <exit@plt>
   12848:	movw	r0, #37576	; 0x92c8
   1284c:	movw	r1, #24500	; 0x5fb4
   12850:	mov	r2, #5
   12854:	movt	r0, #3
   12858:	movt	r1, #2
   1285c:	ldr	r5, [r0]
   12860:	mov	r0, #0
   12864:	bl	11f54 <dcgettext@plt>
   12868:	mov	r2, r0
   1286c:	movw	r0, #39108	; 0x98c4
   12870:	mov	r1, #1
   12874:	movt	r0, #3
   12878:	ldr	r3, [r0]
   1287c:	mov	r0, r5
   12880:	bl	121c4 <__fprintf_chk@plt>
   12884:	mov	r0, r4
   12888:	bl	12128 <exit@plt>
   1288c:	nop	{0}
   12890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12894:	add	fp, sp, #28
   12898:	sub	sp, sp, #4
   1289c:	vpush	{d12-d13}
   128a0:	vpush	{d8-d10}
   128a4:	sub	sp, sp, #528	; 0x210
   128a8:	str	r0, [sp, #108]	; 0x6c
   128ac:	movw	r0, #28310	; 0x6e96
   128b0:	mov	r5, r1
   128b4:	movt	r0, #2
   128b8:	bl	120a4 <getenv@plt>
   128bc:	str	r0, [sp, #116]	; 0x74
   128c0:	bl	1fca8 <__assert_fail@plt+0xd970>
   128c4:	mov	r4, r0
   128c8:	ldr	r0, [r5]
   128cc:	str	r5, [sp, #112]	; 0x70
   128d0:	bl	1fd0c <__assert_fail@plt+0xd9d4>
   128d4:	movw	r1, #24692	; 0x6074
   128d8:	mov	r0, #6
   128dc:	movt	r1, #2
   128e0:	str	r1, [sp, #16]
   128e4:	bl	12218 <setlocale@plt>
   128e8:	movw	r5, #28744	; 0x7048
   128ec:	movw	r1, #28326	; 0x6ea6
   128f0:	str	r0, [sp, #92]	; 0x5c
   128f4:	movt	r5, #2
   128f8:	movt	r1, #2
   128fc:	mov	r0, r5
   12900:	bl	122cc <bindtextdomain@plt>
   12904:	mov	r0, r5
   12908:	bl	11fb4 <textdomain@plt>
   1290c:	movw	r0, #37480	; 0x9268
   12910:	mov	r1, #2
   12914:	movt	r0, #3
   12918:	str	r1, [r0]
   1291c:	mov	r0, #3
   12920:	bl	1d958 <__assert_fail@plt+0xb620>
   12924:	movw	sl, #39016	; 0x9868
   12928:	movt	sl, #3
   1292c:	strb	r0, [sl]
   12930:	mov	r0, #2
   12934:	bl	1d958 <__assert_fail@plt+0xb620>
   12938:	strb	r0, [sl, #1]
   1293c:	bl	1226c <localeconv@plt>
   12940:	ldr	r1, [r0]
   12944:	sub	r3, r4, #3504	; 0xdb0
   12948:	mov	r7, #0
   1294c:	sub	r3, r3, #196608	; 0x30000
   12950:	cmp	r3, #696	; 0x2b8
   12954:	movwhi	r7, #1
   12958:	ldrb	r2, [r1]
   1295c:	str	r7, [sp, #104]	; 0x68
   12960:	cmp	r2, #0
   12964:	strb	r2, [sl, #2]
   12968:	beq	12978 <__assert_fail@plt+0x640>
   1296c:	ldrb	r1, [r1, #1]
   12970:	cmp	r1, #0
   12974:	beq	12980 <__assert_fail@plt+0x648>
   12978:	mov	r1, #46	; 0x2e
   1297c:	strb	r1, [sl, #2]
   12980:	ldr	r0, [r0, #4]
   12984:	ldrb	r1, [r0]
   12988:	cmp	r1, #0
   1298c:	str	r1, [sl, #12]
   12990:	beq	129a8 <__assert_fail@plt+0x670>
   12994:	ldrb	r0, [r0, #1]
   12998:	cmp	r0, #0
   1299c:	beq	129b0 <__assert_fail@plt+0x678>
   129a0:	mov	r0, #1
   129a4:	strb	r0, [sl, #3]
   129a8:	mov	r0, #256	; 0x100
   129ac:	str	r0, [sl, #12]
   129b0:	mov	r4, #0
   129b4:	strb	r4, [sl, #4]
   129b8:	bl	1211c <__ctype_b_loc@plt>
   129bc:	mov	r7, r0
   129c0:	bl	120f8 <__ctype_toupper_loc@plt>
   129c4:	movw	r9, #37984	; 0x9460
   129c8:	movw	ip, #37728	; 0x9360
   129cc:	movw	lr, #38240	; 0x9560
   129d0:	movw	r8, #38496	; 0x9660
   129d4:	mov	r1, #1
   129d8:	mov	r3, #0
   129dc:	str	r7, [sp, #120]	; 0x78
   129e0:	movt	r9, #3
   129e4:	movt	ip, #3
   129e8:	movt	lr, #3
   129ec:	movt	r8, #3
   129f0:	ldr	r6, [r7]
   129f4:	subs	r7, r3, #10
   129f8:	clz	r2, r7
   129fc:	movwne	r7, #1
   12a00:	lsr	r2, r2, #5
   12a04:	add	r6, r6, r4
   12a08:	add	r4, r4, #2
   12a0c:	ldrh	r6, [r6]
   12a10:	bic	r5, r1, r6, lsr #14
   12a14:	strb	r5, [r9, r3]
   12a18:	and	r5, r6, #1
   12a1c:	orr	r2, r5, r2
   12a20:	strb	r2, [ip, r3]
   12a24:	eor	r2, r5, #1
   12a28:	and	r2, r7, r2
   12a2c:	and	r7, r6, #8
   12a30:	eor	r7, r1, r7, lsr #3
   12a34:	and	r2, r7, r2
   12a38:	ldr	r7, [sp, #120]	; 0x78
   12a3c:	strb	r2, [lr, r3]
   12a40:	ldr	r2, [r0]
   12a44:	ldr	r2, [r2, r3, lsl #2]
   12a48:	strb	r2, [r8, r3]
   12a4c:	add	r3, r3, #1
   12a50:	cmp	r3, #256	; 0x100
   12a54:	bne	129f0 <__assert_fail@plt+0x6b8>
   12a58:	ldrb	r0, [sl, #1]
   12a5c:	cmp	r0, #0
   12a60:	beq	12b1c <__assert_fail@plt+0x7e4>
   12a64:	movw	sl, #14
   12a68:	movw	r9, #37348	; 0x91e4
   12a6c:	movw	r6, #38496	; 0x9660
   12a70:	mov	r8, #0
   12a74:	movt	sl, #2
   12a78:	movt	r9, #3
   12a7c:	movt	r6, #3
   12a80:	add	r0, r8, sl
   12a84:	bl	12260 <nl_langinfo@plt>
   12a88:	mov	r4, r0
   12a8c:	bl	12140 <strlen@plt>
   12a90:	mov	r5, r0
   12a94:	add	r0, r0, #1
   12a98:	bl	234d0 <__assert_fail@plt+0x11198>
   12a9c:	add	r1, r9, r8, lsl #3
   12aa0:	add	r8, r8, #1
   12aa4:	cmp	r5, #0
   12aa8:	str	r0, [r1, #28]
   12aac:	str	r8, [r1, #32]
   12ab0:	mov	r1, #0
   12ab4:	beq	12ae4 <__assert_fail@plt+0x7ac>
   12ab8:	mov	r1, #0
   12abc:	ldrb	r2, [r4]
   12ac0:	ldr	r3, [r7]
   12ac4:	add	r4, r4, #1
   12ac8:	ldrb	r3, [r3, r2, lsl #1]
   12acc:	tst	r3, #1
   12ad0:	ldrbeq	r2, [r6, r2]
   12ad4:	strbeq	r2, [r0, r1]
   12ad8:	addeq	r1, r1, #1
   12adc:	subs	r5, r5, #1
   12ae0:	bne	12abc <__assert_fail@plt+0x784>
   12ae4:	mov	r2, #0
   12ae8:	cmp	r8, #12
   12aec:	strb	r2, [r0, r1]
   12af0:	bne	12a80 <__assert_fail@plt+0x748>
   12af4:	movw	r3, #31152	; 0x79b0
   12af8:	add	r0, r9, #28
   12afc:	mov	r1, #12
   12b00:	mov	r2, #8
   12b04:	movt	r3, #1
   12b08:	bl	12290 <qsort@plt>
   12b0c:	movw	sl, #39016	; 0x9868
   12b10:	movw	r9, #37984	; 0x9460
   12b14:	movt	sl, #3
   12b18:	movt	r9, #3
   12b1c:	movw	r0, #37600	; 0x92e0
   12b20:	movt	r0, #3
   12b24:	bl	12224 <sigemptyset@plt>
   12b28:	add	r2, sp, #128	; 0x80
   12b2c:	mov	r0, #14
   12b30:	mov	r1, #0
   12b34:	bl	11ffc <sigaction@plt>
   12b38:	ldr	r0, [sp, #128]	; 0x80
   12b3c:	cmp	r0, #1
   12b40:	beq	12b54 <__assert_fail@plt+0x81c>
   12b44:	movw	r0, #37600	; 0x92e0
   12b48:	mov	r1, #14
   12b4c:	movt	r0, #3
   12b50:	bl	120d4 <sigaddset@plt>
   12b54:	add	r2, sp, #128	; 0x80
   12b58:	mov	r0, #1
   12b5c:	mov	r1, #0
   12b60:	bl	11ffc <sigaction@plt>
   12b64:	ldr	r0, [sp, #128]	; 0x80
   12b68:	cmp	r0, #1
   12b6c:	beq	12b80 <__assert_fail@plt+0x848>
   12b70:	movw	r0, #37600	; 0x92e0
   12b74:	mov	r1, #1
   12b78:	movt	r0, #3
   12b7c:	bl	120d4 <sigaddset@plt>
   12b80:	add	r2, sp, #128	; 0x80
   12b84:	mov	r0, #2
   12b88:	mov	r1, #0
   12b8c:	bl	11ffc <sigaction@plt>
   12b90:	ldr	r0, [sp, #128]	; 0x80
   12b94:	cmp	r0, #1
   12b98:	beq	12bac <__assert_fail@plt+0x874>
   12b9c:	movw	r0, #37600	; 0x92e0
   12ba0:	mov	r1, #2
   12ba4:	movt	r0, #3
   12ba8:	bl	120d4 <sigaddset@plt>
   12bac:	add	r2, sp, #128	; 0x80
   12bb0:	mov	r0, #13
   12bb4:	mov	r1, #0
   12bb8:	bl	11ffc <sigaction@plt>
   12bbc:	ldr	r0, [sp, #128]	; 0x80
   12bc0:	cmp	r0, #1
   12bc4:	beq	12bd8 <__assert_fail@plt+0x8a0>
   12bc8:	movw	r0, #37600	; 0x92e0
   12bcc:	mov	r1, #13
   12bd0:	movt	r0, #3
   12bd4:	bl	120d4 <sigaddset@plt>
   12bd8:	add	r2, sp, #128	; 0x80
   12bdc:	mov	r0, #3
   12be0:	mov	r1, #0
   12be4:	bl	11ffc <sigaction@plt>
   12be8:	ldr	r0, [sp, #128]	; 0x80
   12bec:	cmp	r0, #1
   12bf0:	beq	12c04 <__assert_fail@plt+0x8cc>
   12bf4:	movw	r0, #37600	; 0x92e0
   12bf8:	mov	r1, #3
   12bfc:	movt	r0, #3
   12c00:	bl	120d4 <sigaddset@plt>
   12c04:	add	r2, sp, #128	; 0x80
   12c08:	mov	r0, #15
   12c0c:	mov	r1, #0
   12c10:	bl	11ffc <sigaction@plt>
   12c14:	ldr	r0, [sp, #128]	; 0x80
   12c18:	cmp	r0, #1
   12c1c:	beq	12c30 <__assert_fail@plt+0x8f8>
   12c20:	movw	r0, #37600	; 0x92e0
   12c24:	mov	r1, #15
   12c28:	movt	r0, #3
   12c2c:	bl	120d4 <sigaddset@plt>
   12c30:	add	r2, sp, #128	; 0x80
   12c34:	mov	r0, #29
   12c38:	mov	r1, #0
   12c3c:	bl	11ffc <sigaction@plt>
   12c40:	ldr	r0, [sp, #128]	; 0x80
   12c44:	cmp	r0, #1
   12c48:	beq	12c5c <__assert_fail@plt+0x924>
   12c4c:	movw	r0, #37600	; 0x92e0
   12c50:	mov	r1, #29
   12c54:	movt	r0, #3
   12c58:	bl	120d4 <sigaddset@plt>
   12c5c:	add	r2, sp, #128	; 0x80
   12c60:	mov	r0, #27
   12c64:	mov	r1, #0
   12c68:	bl	11ffc <sigaction@plt>
   12c6c:	ldr	r0, [sp, #128]	; 0x80
   12c70:	cmp	r0, #1
   12c74:	beq	12c88 <__assert_fail@plt+0x950>
   12c78:	movw	r0, #37600	; 0x92e0
   12c7c:	mov	r1, #27
   12c80:	movt	r0, #3
   12c84:	bl	120d4 <sigaddset@plt>
   12c88:	add	r2, sp, #128	; 0x80
   12c8c:	mov	r0, #26
   12c90:	mov	r1, #0
   12c94:	bl	11ffc <sigaction@plt>
   12c98:	ldr	r0, [sp, #128]	; 0x80
   12c9c:	cmp	r0, #1
   12ca0:	beq	12cb4 <__assert_fail@plt+0x97c>
   12ca4:	movw	r0, #37600	; 0x92e0
   12ca8:	mov	r1, #26
   12cac:	movt	r0, #3
   12cb0:	bl	120d4 <sigaddset@plt>
   12cb4:	add	r2, sp, #128	; 0x80
   12cb8:	mov	r0, #24
   12cbc:	mov	r1, #0
   12cc0:	bl	11ffc <sigaction@plt>
   12cc4:	ldr	r0, [sp, #128]	; 0x80
   12cc8:	cmp	r0, #1
   12ccc:	beq	12ce0 <__assert_fail@plt+0x9a8>
   12cd0:	movw	r0, #37600	; 0x92e0
   12cd4:	mov	r1, #24
   12cd8:	movt	r0, #3
   12cdc:	bl	120d4 <sigaddset@plt>
   12ce0:	add	r4, sp, #128	; 0x80
   12ce4:	mov	r0, #25
   12ce8:	mov	r1, #0
   12cec:	mov	r6, #0
   12cf0:	mov	r2, r4
   12cf4:	bl	11ffc <sigaction@plt>
   12cf8:	ldr	r0, [sp, #128]	; 0x80
   12cfc:	cmp	r0, #1
   12d00:	beq	12d14 <__assert_fail@plt+0x9dc>
   12d04:	movw	r0, #37600	; 0x92e0
   12d08:	mov	r1, #25
   12d0c:	movt	r0, #3
   12d10:	bl	120d4 <sigaddset@plt>
   12d14:	movw	r0, #28412	; 0x6efc
   12d18:	movw	r5, #37600	; 0x92e0
   12d1c:	mov	r2, #128	; 0x80
   12d20:	movt	r0, #1
   12d24:	movt	r5, #3
   12d28:	str	r0, [sp, #128]	; 0x80
   12d2c:	add	r0, r4, #4
   12d30:	mov	r1, r5
   12d34:	bl	11ec4 <memcpy@plt>
   12d38:	mov	r0, r5
   12d3c:	mov	r1, #14
   12d40:	str	r6, [sp, #260]	; 0x104
   12d44:	bl	11fa8 <sigismember@plt>
   12d48:	cmp	r0, #0
   12d4c:	beq	12d60 <__assert_fail@plt+0xa28>
   12d50:	add	r1, sp, #128	; 0x80
   12d54:	mov	r0, #14
   12d58:	mov	r2, #0
   12d5c:	bl	11ffc <sigaction@plt>
   12d60:	movw	r0, #37600	; 0x92e0
   12d64:	mov	r1, #1
   12d68:	movt	r0, #3
   12d6c:	bl	11fa8 <sigismember@plt>
   12d70:	cmp	r0, #0
   12d74:	beq	12d88 <__assert_fail@plt+0xa50>
   12d78:	add	r1, sp, #128	; 0x80
   12d7c:	mov	r0, #1
   12d80:	mov	r2, #0
   12d84:	bl	11ffc <sigaction@plt>
   12d88:	movw	r0, #37600	; 0x92e0
   12d8c:	mov	r1, #2
   12d90:	movt	r0, #3
   12d94:	bl	11fa8 <sigismember@plt>
   12d98:	cmp	r0, #0
   12d9c:	beq	12db0 <__assert_fail@plt+0xa78>
   12da0:	add	r1, sp, #128	; 0x80
   12da4:	mov	r0, #2
   12da8:	mov	r2, #0
   12dac:	bl	11ffc <sigaction@plt>
   12db0:	movw	r0, #37600	; 0x92e0
   12db4:	mov	r1, #13
   12db8:	movt	r0, #3
   12dbc:	bl	11fa8 <sigismember@plt>
   12dc0:	cmp	r0, #0
   12dc4:	beq	12dd8 <__assert_fail@plt+0xaa0>
   12dc8:	add	r1, sp, #128	; 0x80
   12dcc:	mov	r0, #13
   12dd0:	mov	r2, #0
   12dd4:	bl	11ffc <sigaction@plt>
   12dd8:	movw	r0, #37600	; 0x92e0
   12ddc:	mov	r1, #3
   12de0:	movt	r0, #3
   12de4:	bl	11fa8 <sigismember@plt>
   12de8:	cmp	r0, #0
   12dec:	beq	12e00 <__assert_fail@plt+0xac8>
   12df0:	add	r1, sp, #128	; 0x80
   12df4:	mov	r0, #3
   12df8:	mov	r2, #0
   12dfc:	bl	11ffc <sigaction@plt>
   12e00:	movw	r0, #37600	; 0x92e0
   12e04:	mov	r1, #15
   12e08:	movt	r0, #3
   12e0c:	bl	11fa8 <sigismember@plt>
   12e10:	cmp	r0, #0
   12e14:	beq	12e28 <__assert_fail@plt+0xaf0>
   12e18:	add	r1, sp, #128	; 0x80
   12e1c:	mov	r0, #15
   12e20:	mov	r2, #0
   12e24:	bl	11ffc <sigaction@plt>
   12e28:	movw	r0, #37600	; 0x92e0
   12e2c:	mov	r1, #29
   12e30:	movt	r0, #3
   12e34:	bl	11fa8 <sigismember@plt>
   12e38:	cmp	r0, #0
   12e3c:	beq	12e50 <__assert_fail@plt+0xb18>
   12e40:	add	r1, sp, #128	; 0x80
   12e44:	mov	r0, #29
   12e48:	mov	r2, #0
   12e4c:	bl	11ffc <sigaction@plt>
   12e50:	movw	r0, #37600	; 0x92e0
   12e54:	mov	r1, #27
   12e58:	movt	r0, #3
   12e5c:	bl	11fa8 <sigismember@plt>
   12e60:	cmp	r0, #0
   12e64:	beq	12e78 <__assert_fail@plt+0xb40>
   12e68:	add	r1, sp, #128	; 0x80
   12e6c:	mov	r0, #27
   12e70:	mov	r2, #0
   12e74:	bl	11ffc <sigaction@plt>
   12e78:	movw	r0, #37600	; 0x92e0
   12e7c:	mov	r1, #26
   12e80:	movt	r0, #3
   12e84:	bl	11fa8 <sigismember@plt>
   12e88:	cmp	r0, #0
   12e8c:	beq	12ea0 <__assert_fail@plt+0xb68>
   12e90:	add	r1, sp, #128	; 0x80
   12e94:	mov	r0, #26
   12e98:	mov	r2, #0
   12e9c:	bl	11ffc <sigaction@plt>
   12ea0:	movw	r0, #37600	; 0x92e0
   12ea4:	mov	r1, #24
   12ea8:	movt	r0, #3
   12eac:	bl	11fa8 <sigismember@plt>
   12eb0:	cmp	r0, #0
   12eb4:	beq	12ec8 <__assert_fail@plt+0xb90>
   12eb8:	add	r1, sp, #128	; 0x80
   12ebc:	mov	r0, #24
   12ec0:	mov	r2, #0
   12ec4:	bl	11ffc <sigaction@plt>
   12ec8:	movw	r0, #37600	; 0x92e0
   12ecc:	mov	r1, #25
   12ed0:	movt	r0, #3
   12ed4:	bl	11fa8 <sigismember@plt>
   12ed8:	cmp	r0, #0
   12edc:	beq	12ef0 <__assert_fail@plt+0xbb8>
   12ee0:	add	r1, sp, #128	; 0x80
   12ee4:	mov	r0, #25
   12ee8:	mov	r2, #0
   12eec:	bl	11ffc <sigaction@plt>
   12ef0:	mov	r0, #17
   12ef4:	mov	r1, #0
   12ef8:	mov	r5, #0
   12efc:	bl	11f00 <signal@plt>
   12f00:	movw	r0, #28496	; 0x6f50
   12f04:	movt	r0, #1
   12f08:	bl	25f8c <_obstack_memory_used@@Base+0x69c>
   12f0c:	ldr	r7, [sp, #108]	; 0x6c
   12f10:	add	r0, sp, #272	; 0x110
   12f14:	vmov.i32	q8, #0	; 0x00000000
   12f18:	str	r5, [sp, #308]	; 0x134
   12f1c:	mov	r8, #0
   12f20:	add	r1, r0, #4
   12f24:	add	r0, r0, #20
   12f28:	vst1.32	{d16-d17}, [r0]
   12f2c:	mvn	r0, #0
   12f30:	vst1.32	{d16-d17}, [r1]
   12f34:	mov	r1, #4
   12f38:	str	r0, [sp, #272]	; 0x110
   12f3c:	str	r0, [sp, #280]	; 0x118
   12f40:	mov	r0, r7
   12f44:	bl	235a0 <__assert_fail@plt+0x11268>
   12f48:	str	r0, [sp, #124]	; 0x7c
   12f4c:	add	r0, r4, #1
   12f50:	ldr	ip, [sp, #112]	; 0x70
   12f54:	movw	r3, #37568	; 0x92c0
   12f58:	mvn	lr, #0
   12f5c:	mov	r5, #0
   12f60:	mov	r4, #0
   12f64:	str	r0, [sp, #100]	; 0x64
   12f68:	sub	r0, fp, #288	; 0x120
   12f6c:	movt	r3, #3
   12f70:	add	r1, r0, #12
   12f74:	str	r1, [sp, #80]	; 0x50
   12f78:	orr	r1, r0, #4
   12f7c:	add	r0, r0, #8
   12f80:	str	r0, [sp, #88]	; 0x58
   12f84:	ldr	r0, [sp, #116]	; 0x74
   12f88:	str	r1, [sp, #84]	; 0x54
   12f8c:	clz	r0, r0
   12f90:	lsr	r0, r0, #5
   12f94:	str	r0, [sp, #76]	; 0x4c
   12f98:	mov	r0, #0
   12f9c:	str	r0, [sp, #20]
   12fa0:	mov	r0, #0
   12fa4:	str	r0, [sp, #96]	; 0x60
   12fa8:	mov	r0, #0
   12fac:	str	r0, [sp, #60]	; 0x3c
   12fb0:	mov	r0, #0
   12fb4:	str	r0, [sp, #28]
   12fb8:	mov	r0, #0
   12fbc:	b	12fdc <__assert_fail@plt+0xca4>
   12fc0:	add	r1, r0, #1
   12fc4:	str	r1, [r3]
   12fc8:	ldr	r1, [sp, #124]	; 0x7c
   12fcc:	ldr	r0, [ip, r0, lsl #2]
   12fd0:	str	r0, [r1, r8, lsl #2]
   12fd4:	add	r8, r8, #1
   12fd8:	mov	r0, r6
   12fdc:	mov	r1, r4
   12fe0:	cmn	r4, #1
   12fe4:	mov	r6, r0
   12fe8:	mvn	r4, #0
   12fec:	str	lr, [fp, #-104]	; 0xffffff98
   12ff0:	beq	136e8 <__assert_fail@plt+0x13b0>
   12ff4:	ldr	r0, [sp, #116]	; 0x74
   12ff8:	cmp	r0, #0
   12ffc:	cmpne	r8, #0
   13000:	bne	136c4 <__assert_fail@plt+0x138c>
   13004:	movw	r2, #31632	; 0x7b90
   13008:	movw	r3, #31664	; 0x7bb0
   1300c:	sub	r0, fp, #104	; 0x68
   13010:	mov	r1, ip
   13014:	str	r0, [sp]
   13018:	mov	r0, r7
   1301c:	movt	r2, #2
   13020:	movt	r3, #2
   13024:	bl	12110 <getopt_long@plt>
   13028:	ldr	r7, [sp, #108]	; 0x6c
   1302c:	ldr	ip, [sp, #112]	; 0x70
   13030:	movw	r3, #37568	; 0x92c0
   13034:	mov	r4, r0
   13038:	add	r1, r0, #3
   1303c:	movw	r0, #266	; 0x10a
   13040:	mvn	lr, #0
   13044:	movt	r3, #3
   13048:	cmp	r1, r0
   1304c:	bhi	169e8 <__assert_fail@plt+0x46b0>
   13050:	add	r2, pc, #4
   13054:	mov	r0, #1
   13058:	ldr	pc, [r2, r1, lsl #2]
   1305c:	strdeq	r6, [r1], -r0
   13060:	andeq	r6, r1, r4, asr #20
   13064:	andeq	r3, r1, r8, ror #13
   13068:	andeq	r6, r1, r8, ror #19
   1306c:	andeq	r3, r1, r0, lsl #22
   13070:	andeq	r6, r1, r8, ror #19
   13074:	andeq	r6, r1, r8, ror #19
   13078:	andeq	r6, r1, r8, ror #19
   1307c:	andeq	r6, r1, r8, ror #19
   13080:	andeq	r6, r1, r8, ror #19
   13084:	andeq	r6, r1, r8, ror #19
   13088:	andeq	r6, r1, r8, ror #19
   1308c:	andeq	r6, r1, r8, ror #19
   13090:	andeq	r6, r1, r8, ror #19
   13094:	andeq	r6, r1, r8, ror #19
   13098:	andeq	r6, r1, r8, ror #19
   1309c:	andeq	r6, r1, r8, ror #19
   130a0:	andeq	r6, r1, r8, ror #19
   130a4:	andeq	r6, r1, r8, ror #19
   130a8:	andeq	r6, r1, r8, ror #19
   130ac:	andeq	r6, r1, r8, ror #19
   130b0:	andeq	r6, r1, r8, ror #19
   130b4:	andeq	r6, r1, r8, ror #19
   130b8:	andeq	r6, r1, r8, ror #19
   130bc:	andeq	r6, r1, r8, ror #19
   130c0:	andeq	r6, r1, r8, ror #19
   130c4:	andeq	r6, r1, r8, ror #19
   130c8:	andeq	r6, r1, r8, ror #19
   130cc:	andeq	r6, r1, r8, ror #19
   130d0:	andeq	r6, r1, r8, ror #19
   130d4:	andeq	r6, r1, r8, ror #19
   130d8:	andeq	r6, r1, r8, ror #19
   130dc:	andeq	r6, r1, r8, ror #19
   130e0:	andeq	r6, r1, r8, ror #19
   130e4:	andeq	r6, r1, r8, ror #19
   130e8:	andeq	r6, r1, r8, ror #19
   130ec:	andeq	r6, r1, r8, ror #19
   130f0:	andeq	r6, r1, r8, ror #19
   130f4:	andeq	r6, r1, r8, ror #19
   130f8:	andeq	r6, r1, r8, ror #19
   130fc:	andeq	r6, r1, r8, ror #19
   13100:	andeq	r6, r1, r8, ror #19
   13104:	andeq	r6, r1, r8, ror #19
   13108:	andeq	r6, r1, r8, ror #19
   1310c:	andeq	r6, r1, r8, ror #19
   13110:	andeq	r6, r1, r8, ror #19
   13114:	andeq	r6, r1, r8, ror #19
   13118:	andeq	r6, r1, r8, ror #19
   1311c:	andeq	r6, r1, r8, ror #19
   13120:	andeq	r6, r1, r8, ror #19
   13124:	andeq	r6, r1, r8, ror #19
   13128:	andeq	r6, r1, r8, ror #19
   1312c:	andeq	r6, r1, r8, ror #19
   13130:	andeq	r6, r1, r8, ror #19
   13134:	andeq	r6, r1, r8, ror #19
   13138:	andeq	r6, r1, r8, ror #19
   1313c:	andeq	r6, r1, r8, ror #19
   13140:	andeq	r6, r1, r8, ror #19
   13144:	andeq	r6, r1, r8, ror #19
   13148:	andeq	r6, r1, r8, ror #19
   1314c:	andeq	r6, r1, r8, ror #19
   13150:	andeq	r6, r1, r8, ror #19
   13154:	andeq	r6, r1, r8, ror #19
   13158:	andeq	r6, r1, r8, ror #19
   1315c:	andeq	r6, r1, r8, ror #19
   13160:	andeq	r6, r1, r8, ror #19
   13164:	andeq	r6, r1, r8, ror #19
   13168:	andeq	r6, r1, r8, ror #19
   1316c:	andeq	r6, r1, r8, ror #19
   13170:	andeq	r6, r1, r8, ror #19
   13174:	andeq	r3, r1, r0, lsr #17
   13178:	andeq	r6, r1, r8, ror #19
   1317c:	andeq	r6, r1, r8, ror #19
   13180:	andeq	r6, r1, r8, ror #19
   13184:	andeq	r6, r1, r8, ror #19
   13188:	andeq	r6, r1, r8, ror #19
   1318c:	andeq	r6, r1, r8, ror #19
   13190:	andeq	r6, r1, r8, ror #19
   13194:	andeq	r6, r1, r8, ror #19
   13198:	andeq	r6, r1, r8, ror #19
   1319c:	andeq	r3, r1, r8, lsl #9
   131a0:	andeq	r6, r1, r8, ror #19
   131a4:	andeq	r6, r1, r8, ror #19
   131a8:	andeq	r6, r1, r8, ror #19
   131ac:	andeq	r6, r1, r8, ror #19
   131b0:	andeq	r3, r1, r8, lsl #9
   131b4:	muleq	r1, r4, r7
   131b8:	andeq	r3, r1, ip, lsl sp
   131bc:	andeq	r6, r1, r8, ror #19
   131c0:	andeq	r3, r1, r8, lsl #9
   131c4:	andeq	r6, r1, r8, ror #19
   131c8:	andeq	r6, r1, r8, ror #19
   131cc:	andeq	r6, r1, r8, ror #19
   131d0:	andeq	r6, r1, r8, ror #19
   131d4:	andeq	r6, r1, r8, ror #19
   131d8:	andeq	r6, r1, r8, ror #19
   131dc:	andeq	r6, r1, r8, ror #19
   131e0:	andeq	r6, r1, r8, ror #19
   131e4:	andeq	r6, r1, r8, ror #19
   131e8:	andeq	r6, r1, r8, ror #19
   131ec:	andeq	r6, r1, r8, ror #19
   131f0:	andeq	r3, r1, r8, lsl #9
   131f4:	andeq	r3, r1, r0, lsr #17
   131f8:	andeq	r3, r1, r8, lsl #9
   131fc:	andeq	r6, r1, r8, ror #19
   13200:	andeq	r3, r1, r8, lsl #9
   13204:	andeq	r3, r1, r8, lsl #9
   13208:	andeq	r3, r1, r8, lsl #9
   1320c:	andeq	r3, r1, r8, lsl #9
   13210:	andeq	r6, r1, r8, ror #19
   13214:			; <UNDEFINED> instruction: 0x000138bc
   13218:	andeq	r6, r1, r8, ror #19
   1321c:	ldrdeq	r2, [r1], -ip
   13220:	andeq	r3, r1, r8, lsl #9
   13224:	andeq	r3, r1, r4, asr #20
   13228:	andeq	r6, r1, r8, ror #19
   1322c:	andeq	r6, r1, r8, ror #19
   13230:	andeq	r3, r1, r8, lsl #9
   13234:	andeq	r3, r1, r8, lsl #26
   13238:	andeq	r3, r1, r4, asr r9
   1323c:	andeq	r3, r1, ip, asr #19
   13240:	andeq	r6, r1, r8, ror #19
   13244:	andeq	r6, r1, r8, ror #19
   13248:	andeq	r6, r1, r8, ror #19
   1324c:			; <UNDEFINED> instruction: 0x00013cb0
   13250:	andeq	r3, r1, r8, ror #26
   13254:	andeq	r6, r1, r8, ror #19
   13258:	andeq	r6, r1, r8, ror #19
   1325c:	andeq	r6, r1, r8, ror #19
   13260:	andeq	r6, r1, r8, ror #19
   13264:	andeq	r6, r1, r8, ror #19
   13268:	andeq	r6, r1, r8, ror #19
   1326c:	andeq	r6, r1, r8, ror #19
   13270:	andeq	r6, r1, r8, ror #19
   13274:	andeq	r6, r1, r8, ror #19
   13278:	andeq	r6, r1, r8, ror #19
   1327c:	andeq	r6, r1, r8, ror #19
   13280:	andeq	r6, r1, r8, ror #19
   13284:	andeq	r6, r1, r8, ror #19
   13288:	andeq	r6, r1, r8, ror #19
   1328c:	andeq	r6, r1, r8, ror #19
   13290:	andeq	r6, r1, r8, ror #19
   13294:	andeq	r6, r1, r8, ror #19
   13298:	andeq	r6, r1, r8, ror #19
   1329c:	andeq	r6, r1, r8, ror #19
   132a0:	andeq	r6, r1, r8, ror #19
   132a4:	andeq	r6, r1, r8, ror #19
   132a8:	andeq	r6, r1, r8, ror #19
   132ac:	andeq	r6, r1, r8, ror #19
   132b0:	andeq	r6, r1, r8, ror #19
   132b4:	andeq	r6, r1, r8, ror #19
   132b8:	andeq	r6, r1, r8, ror #19
   132bc:	andeq	r6, r1, r8, ror #19
   132c0:	andeq	r6, r1, r8, ror #19
   132c4:	andeq	r6, r1, r8, ror #19
   132c8:	andeq	r6, r1, r8, ror #19
   132cc:	andeq	r6, r1, r8, ror #19
   132d0:	andeq	r6, r1, r8, ror #19
   132d4:	andeq	r6, r1, r8, ror #19
   132d8:	andeq	r6, r1, r8, ror #19
   132dc:	andeq	r6, r1, r8, ror #19
   132e0:	andeq	r6, r1, r8, ror #19
   132e4:	andeq	r6, r1, r8, ror #19
   132e8:	andeq	r6, r1, r8, ror #19
   132ec:	andeq	r6, r1, r8, ror #19
   132f0:	andeq	r6, r1, r8, ror #19
   132f4:	andeq	r6, r1, r8, ror #19
   132f8:	andeq	r6, r1, r8, ror #19
   132fc:	andeq	r6, r1, r8, ror #19
   13300:	andeq	r6, r1, r8, ror #19
   13304:	andeq	r6, r1, r8, ror #19
   13308:	andeq	r6, r1, r8, ror #19
   1330c:	andeq	r6, r1, r8, ror #19
   13310:	andeq	r6, r1, r8, ror #19
   13314:	andeq	r6, r1, r8, ror #19
   13318:	andeq	r6, r1, r8, ror #19
   1331c:	andeq	r6, r1, r8, ror #19
   13320:	andeq	r6, r1, r8, ror #19
   13324:	andeq	r6, r1, r8, ror #19
   13328:	andeq	r6, r1, r8, ror #19
   1332c:	andeq	r6, r1, r8, ror #19
   13330:	andeq	r6, r1, r8, ror #19
   13334:	andeq	r6, r1, r8, ror #19
   13338:	andeq	r6, r1, r8, ror #19
   1333c:	andeq	r6, r1, r8, ror #19
   13340:	andeq	r6, r1, r8, ror #19
   13344:	andeq	r6, r1, r8, ror #19
   13348:	andeq	r6, r1, r8, ror #19
   1334c:	andeq	r6, r1, r8, ror #19
   13350:	andeq	r6, r1, r8, ror #19
   13354:	andeq	r6, r1, r8, ror #19
   13358:	andeq	r6, r1, r8, ror #19
   1335c:	andeq	r6, r1, r8, ror #19
   13360:	andeq	r6, r1, r8, ror #19
   13364:	andeq	r6, r1, r8, ror #19
   13368:	andeq	r6, r1, r8, ror #19
   1336c:	andeq	r6, r1, r8, ror #19
   13370:	andeq	r6, r1, r8, ror #19
   13374:	andeq	r6, r1, r8, ror #19
   13378:	andeq	r6, r1, r8, ror #19
   1337c:	andeq	r6, r1, r8, ror #19
   13380:	andeq	r6, r1, r8, ror #19
   13384:	andeq	r6, r1, r8, ror #19
   13388:	andeq	r6, r1, r8, ror #19
   1338c:	andeq	r6, r1, r8, ror #19
   13390:	andeq	r6, r1, r8, ror #19
   13394:	andeq	r6, r1, r8, ror #19
   13398:	andeq	r6, r1, r8, ror #19
   1339c:	andeq	r6, r1, r8, ror #19
   133a0:	andeq	r6, r1, r8, ror #19
   133a4:	andeq	r6, r1, r8, ror #19
   133a8:	andeq	r6, r1, r8, ror #19
   133ac:	andeq	r6, r1, r8, ror #19
   133b0:	andeq	r6, r1, r8, ror #19
   133b4:	andeq	r6, r1, r8, ror #19
   133b8:	andeq	r6, r1, r8, ror #19
   133bc:	andeq	r6, r1, r8, ror #19
   133c0:	andeq	r6, r1, r8, ror #19
   133c4:	andeq	r6, r1, r8, ror #19
   133c8:	andeq	r6, r1, r8, ror #19
   133cc:	andeq	r6, r1, r8, ror #19
   133d0:	andeq	r6, r1, r8, ror #19
   133d4:	andeq	r6, r1, r8, ror #19
   133d8:	andeq	r6, r1, r8, ror #19
   133dc:	andeq	r6, r1, r8, ror #19
   133e0:	andeq	r6, r1, r8, ror #19
   133e4:	andeq	r6, r1, r8, ror #19
   133e8:	andeq	r6, r1, r8, ror #19
   133ec:	andeq	r6, r1, r8, ror #19
   133f0:	andeq	r6, r1, r8, ror #19
   133f4:	andeq	r6, r1, r8, ror #19
   133f8:	andeq	r6, r1, r8, ror #19
   133fc:	andeq	r6, r1, r8, ror #19
   13400:	andeq	r6, r1, r8, ror #19
   13404:	andeq	r6, r1, r8, ror #19
   13408:	andeq	r6, r1, r8, ror #19
   1340c:	andeq	r6, r1, r8, ror #19
   13410:	andeq	r6, r1, r8, ror #19
   13414:	andeq	r6, r1, r8, ror #19
   13418:	andeq	r6, r1, r8, ror #19
   1341c:	andeq	r6, r1, r8, ror #19
   13420:	andeq	r6, r1, r8, ror #19
   13424:	andeq	r6, r1, r8, ror #19
   13428:	andeq	r6, r1, r8, ror #19
   1342c:	andeq	r6, r1, r8, ror #19
   13430:	andeq	r6, r1, r8, ror #19
   13434:	andeq	r6, r1, r8, ror #19
   13438:	andeq	r6, r1, r8, ror #19
   1343c:	andeq	r6, r1, r8, ror #19
   13440:	andeq	r6, r1, r8, ror #19
   13444:	andeq	r6, r1, r8, ror #19
   13448:	andeq	r6, r1, r8, ror #19
   1344c:	andeq	r6, r1, r8, ror #19
   13450:	andeq	r6, r1, r8, ror #19
   13454:	andeq	r6, r1, r8, ror #19
   13458:	andeq	r6, r1, r8, ror #19
   1345c:	andeq	r6, r1, r8, ror #19
   13460:	andeq	r6, r1, r8, ror #19
   13464:	andeq	r6, r1, r8, ror #19
   13468:	andeq	r3, r1, ip, lsr r8
   1346c:	andeq	r3, r1, r4, asr r7
   13470:	andeq	r3, r1, ip, lsl #29
   13474:	andeq	r3, r1, r0, lsr #29
   13478:	andeq	r3, r1, ip, ror sp
   1347c:	andeq	r3, r1, r0, lsr lr
   13480:	andeq	r3, r1, r0, lsr #21
   13484:	andeq	r3, r1, r0, ror #19
   13488:	mov	r0, #0
   1348c:	mov	r1, r4
   13490:	strb	r0, [sp, #129]	; 0x81
   13494:	ldr	r0, [sp, #100]	; 0x64
   13498:	strb	r4, [sp, #128]	; 0x80
   1349c:	mvn	r2, #76	; 0x4c
   134a0:	uxtab	r1, r2, r1
   134a4:	cmp	r1, #37	; 0x25
   134a8:	bhi	136bc <__assert_fail@plt+0x1384>
   134ac:	add	r2, pc, #0
   134b0:	ldr	pc, [r2, r1, lsl #2]
   134b4:	andeq	r3, r1, ip, asr #10
   134b8:			; <UNDEFINED> instruction: 0x000136bc
   134bc:			; <UNDEFINED> instruction: 0x000136bc
   134c0:			; <UNDEFINED> instruction: 0x000136bc
   134c4:			; <UNDEFINED> instruction: 0x000136bc
   134c8:	andeq	r3, r1, r0, ror #12
   134cc:			; <UNDEFINED> instruction: 0x000136bc
   134d0:			; <UNDEFINED> instruction: 0x000136bc
   134d4:			; <UNDEFINED> instruction: 0x000136bc
   134d8:	andeq	r3, r1, ip, lsl r6
   134dc:			; <UNDEFINED> instruction: 0x000136bc
   134e0:			; <UNDEFINED> instruction: 0x000136bc
   134e4:			; <UNDEFINED> instruction: 0x000136bc
   134e8:			; <UNDEFINED> instruction: 0x000136bc
   134ec:			; <UNDEFINED> instruction: 0x000136bc
   134f0:			; <UNDEFINED> instruction: 0x000136bc
   134f4:			; <UNDEFINED> instruction: 0x000136bc
   134f8:			; <UNDEFINED> instruction: 0x000136bc
   134fc:			; <UNDEFINED> instruction: 0x000136bc
   13500:			; <UNDEFINED> instruction: 0x000136bc
   13504:			; <UNDEFINED> instruction: 0x000136bc
   13508:	ldrdeq	r3, [r1], -r8
   1350c:			; <UNDEFINED> instruction: 0x000136bc
   13510:	andeq	r3, r1, ip, lsr r6
   13514:			; <UNDEFINED> instruction: 0x000136bc
   13518:			; <UNDEFINED> instruction: 0x000135b4
   1351c:	strdeq	r3, [r1], -ip
   13520:	andeq	r3, r1, ip, ror #10
   13524:	andeq	r3, r1, ip, lsl #11
   13528:			; <UNDEFINED> instruction: 0x000136bc
   1352c:			; <UNDEFINED> instruction: 0x000136bc
   13530:			; <UNDEFINED> instruction: 0x000136bc
   13534:			; <UNDEFINED> instruction: 0x000136bc
   13538:	andeq	r3, r1, r0, lsr #13
   1353c:			; <UNDEFINED> instruction: 0x000136bc
   13540:			; <UNDEFINED> instruction: 0x000136bc
   13544:			; <UNDEFINED> instruction: 0x000136bc
   13548:	andeq	r3, r1, r0, lsl #13
   1354c:	mov	r1, #1
   13550:	strb	r1, [sp, #302]	; 0x12e
   13554:	ldrb	r1, [r0], #1
   13558:	mvn	r2, #76	; 0x4c
   1355c:	uxtab	r1, r2, r1
   13560:	cmp	r1, #37	; 0x25
   13564:	bls	134ac <__assert_fail@plt+0x1174>
   13568:	b	136bc <__assert_fail@plt+0x1384>
   1356c:	mov	r1, #1
   13570:	strb	r1, [sp, #301]	; 0x12d
   13574:	ldrb	r1, [r0], #1
   13578:	mvn	r2, #76	; 0x4c
   1357c:	uxtab	r1, r2, r1
   13580:	cmp	r1, #37	; 0x25
   13584:	bls	134ac <__assert_fail@plt+0x1174>
   13588:	b	136bc <__assert_fail@plt+0x1384>
   1358c:	ldr	r1, [sp, #288]	; 0x120
   13590:	cmp	r1, #0
   13594:	bne	13624 <__assert_fail@plt+0x12ec>
   13598:	ldrb	r1, [r0], #1
   1359c:	str	r9, [sp, #288]	; 0x120
   135a0:	mvn	r2, #76	; 0x4c
   135a4:	uxtab	r1, r2, r1
   135a8:	cmp	r1, #37	; 0x25
   135ac:	bls	134ac <__assert_fail@plt+0x1174>
   135b0:	b	136bc <__assert_fail@plt+0x1384>
   135b4:	movw	r1, #38496	; 0x9660
   135b8:	movt	r1, #3
   135bc:	str	r1, [sp, #292]	; 0x124
   135c0:	ldrb	r1, [r0], #1
   135c4:	mvn	r2, #76	; 0x4c
   135c8:	uxtab	r1, r2, r1
   135cc:	cmp	r1, #37	; 0x25
   135d0:	bls	134ac <__assert_fail@plt+0x1174>
   135d4:	b	136bc <__assert_fail@plt+0x1384>
   135d8:	movw	r1, #257	; 0x101
   135dc:	add	r2, sp, #256	; 0x100
   135e0:	strh	r1, [r2, #40]	; 0x28
   135e4:	ldrb	r1, [r0], #1
   135e8:	mvn	r2, #76	; 0x4c
   135ec:	uxtab	r1, r2, r1
   135f0:	cmp	r1, #37	; 0x25
   135f4:	bls	134ac <__assert_fail@plt+0x1174>
   135f8:	b	136bc <__assert_fail@plt+0x1384>
   135fc:	mov	r1, #1
   13600:	strb	r1, [sp, #300]	; 0x12c
   13604:	ldrb	r1, [r0], #1
   13608:	mvn	r2, #76	; 0x4c
   1360c:	uxtab	r1, r2, r1
   13610:	cmp	r1, #37	; 0x25
   13614:	bls	134ac <__assert_fail@plt+0x1174>
   13618:	b	136bc <__assert_fail@plt+0x1384>
   1361c:	mov	r1, #1
   13620:	strb	r1, [sp, #304]	; 0x130
   13624:	ldrb	r1, [r0], #1
   13628:	mvn	r2, #76	; 0x4c
   1362c:	uxtab	r1, r2, r1
   13630:	cmp	r1, #37	; 0x25
   13634:	bls	134ac <__assert_fail@plt+0x1174>
   13638:	b	136bc <__assert_fail@plt+0x1384>
   1363c:	movw	r1, #38240	; 0x9560
   13640:	movt	r1, #3
   13644:	str	r1, [sp, #288]	; 0x120
   13648:	ldrb	r1, [r0], #1
   1364c:	mvn	r2, #76	; 0x4c
   13650:	uxtab	r1, r2, r1
   13654:	cmp	r1, #37	; 0x25
   13658:	bls	134ac <__assert_fail@plt+0x1174>
   1365c:	b	136bc <__assert_fail@plt+0x1384>
   13660:	mov	r1, #1
   13664:	strb	r1, [sp, #299]	; 0x12b
   13668:	ldrb	r1, [r0], #1
   1366c:	mvn	r2, #76	; 0x4c
   13670:	uxtab	r1, r2, r1
   13674:	cmp	r1, #37	; 0x25
   13678:	bls	134ac <__assert_fail@plt+0x1174>
   1367c:	b	136bc <__assert_fail@plt+0x1384>
   13680:	mov	r1, #1
   13684:	strb	r1, [sp, #303]	; 0x12f
   13688:	ldrb	r1, [r0], #1
   1368c:	mvn	r2, #76	; 0x4c
   13690:	uxtab	r1, r2, r1
   13694:	cmp	r1, #37	; 0x25
   13698:	bls	134ac <__assert_fail@plt+0x1174>
   1369c:	b	136bc <__assert_fail@plt+0x1384>
   136a0:	mov	r1, #1
   136a4:	strb	r1, [sp, #298]	; 0x12a
   136a8:	ldrb	r1, [r0], #1
   136ac:	mvn	r2, #76	; 0x4c
   136b0:	uxtab	r1, r2, r1
   136b4:	cmp	r1, #37	; 0x25
   136b8:	bls	134ac <__assert_fail@plt+0x1174>
   136bc:	mov	r0, r6
   136c0:	b	12fdc <__assert_fail@plt+0xca4>
   136c4:	tst	r5, #255	; 0xff
   136c8:	ldreq	r0, [sp, #104]	; 0x68
   136cc:	eoreq	r0, r0, #1
   136d0:	tsteq	r0, #1
   136d4:	bne	136e4 <__assert_fail@plt+0x13ac>
   136d8:	ldr	r2, [r3]
   136dc:	cmp	r2, r7
   136e0:	bne	136f8 <__assert_fail@plt+0x13c0>
   136e4:	mov	r4, r1
   136e8:	ldr	r0, [r3]
   136ec:	cmp	r0, r7
   136f0:	blt	12fc0 <__assert_fail@plt+0xc88>
   136f4:	b	14c80 <__assert_fail@plt+0x2948>
   136f8:	ldr	r0, [ip, r2, lsl #2]
   136fc:	ldrb	r3, [r0]
   13700:	cmp	r3, #45	; 0x2d
   13704:	ldrbeq	r3, [r0, #1]
   13708:	cmpeq	r3, #111	; 0x6f
   1370c:	beq	1372c <__assert_fail@plt+0x13f4>
   13710:	movw	r3, #37568	; 0x92c0
   13714:	mov	r4, r1
   13718:	movt	r3, #3
   1371c:	ldr	r0, [r3]
   13720:	cmp	r0, r7
   13724:	blt	12fc0 <__assert_fail@plt+0xc88>
   13728:	b	14c80 <__assert_fail@plt+0x2948>
   1372c:	movw	r3, #37568	; 0x92c0
   13730:	add	r2, r2, #1
   13734:	cmp	r2, r7
   13738:	movt	r3, #3
   1373c:	bne	13004 <__assert_fail@plt+0xccc>
   13740:	ldrb	r0, [r0, #2]
   13744:	mov	r4, r1
   13748:	cmp	r0, #0
   1374c:	beq	136e8 <__assert_fail@plt+0x13b0>
   13750:	b	13004 <__assert_fail@plt+0xccc>
   13754:	ldr	r0, [sl, #16]
   13758:	cmp	r0, #0
   1375c:	beq	144e8 <__assert_fail@plt+0x21b0>
   13760:	movw	r1, #37592	; 0x92d8
   13764:	movt	r1, #3
   13768:	ldr	r4, [r1]
   1376c:	mov	r1, r4
   13770:	bl	11e28 <strcmp@plt>
   13774:	ldr	r7, [sp, #108]	; 0x6c
   13778:	ldr	ip, [sp, #112]	; 0x70
   1377c:	movw	r3, #37568	; 0x92c0
   13780:	mvn	lr, #0
   13784:	cmp	r0, #0
   13788:	movt	r3, #3
   1378c:	beq	144f4 <__assert_fail@plt+0x21bc>
   13790:	b	16ad0 <__assert_fail@plt+0x4798>
   13794:	movw	r0, #37592	; 0x92d8
   13798:	sub	r1, fp, #208	; 0xd0
   1379c:	add	r3, sp, #128	; 0x80
   137a0:	mov	r2, #10
   137a4:	movt	r0, #3
   137a8:	ldr	r4, [r0]
   137ac:	ldr	r0, [fp, #-104]	; 0xffffff98
   137b0:	str	r0, [sp, #72]	; 0x48
   137b4:	movw	r0, #30271	; 0x763f
   137b8:	movt	r0, #2
   137bc:	str	r0, [sp]
   137c0:	mov	r0, r4
   137c4:	bl	23de4 <__assert_fail@plt+0x11aac>
   137c8:	cmp	r0, #2
   137cc:	beq	13ebc <__assert_fail@plt+0x1b84>
   137d0:	cmp	r0, #0
   137d4:	bne	16c7c <__assert_fail@plt+0x4944>
   137d8:	ldr	r0, [fp, #-208]	; 0xffffff30
   137dc:	ldr	ip, [sp, #112]	; 0x70
   137e0:	ldr	r7, [sp, #108]	; 0x6c
   137e4:	movw	r3, #37568	; 0x92c0
   137e8:	mvn	lr, #0
   137ec:	movt	r3, #3
   137f0:	ldrb	r0, [r0, #-1]
   137f4:	sub	r0, r0, #48	; 0x30
   137f8:	cmp	r0, #9
   137fc:	bhi	13f74 <__assert_fail@plt+0x1c3c>
   13800:	ldr	r1, [sp, #132]	; 0x84
   13804:	mov	r0, #0
   13808:	cmp	r0, r1, lsr #22
   1380c:	bne	16c78 <__assert_fail@plt+0x4940>
   13810:	ldr	r2, [sp, #128]	; 0x80
   13814:	lsl	r1, r1, #10
   13818:	lsl	r0, r2, #10
   1381c:	orr	r1, r1, r2, lsr #22
   13820:	str	r0, [sp, #128]	; 0x80
   13824:	str	r1, [sp, #132]	; 0x84
   13828:	ldr	r2, [sl, #28]
   1382c:	subs	r2, r0, r2
   13830:	sbcs	r2, r1, #0
   13834:	bcs	13f8c <__assert_fail@plt+0x1c54>
   13838:	b	13fb8 <__assert_fail@plt+0x1c80>
   1383c:	movw	r0, #37592	; 0x92d8
   13840:	movt	r0, #3
   13844:	ldr	r1, [r0]
   13848:	cmp	r1, #0
   1384c:	beq	14504 <__assert_fail@plt+0x21cc>
   13850:	movw	r0, #37476	; 0x9264
   13854:	movw	r4, #32196	; 0x7dc4
   13858:	mov	r2, #1
   1385c:	movt	r0, #3
   13860:	movt	r4, #2
   13864:	str	r2, [sp]
   13868:	ldr	r0, [r0]
   1386c:	mov	r3, r4
   13870:	stmib	sp, {r0, r2}
   13874:	movw	r0, #28471	; 0x6f37
   13878:	movw	r2, #32200	; 0x7dc8
   1387c:	movt	r0, #2
   13880:	movt	r2, #2
   13884:	bl	1c194 <__assert_fail@plt+0x9e5c>
   13888:	ldr	r7, [sp, #108]	; 0x6c
   1388c:	ldr	ip, [sp, #112]	; 0x70
   13890:	ldrb	r4, [r4, r0]
   13894:	movw	r3, #37568	; 0x92c0
   13898:	mvn	lr, #0
   1389c:	movt	r3, #3
   138a0:	uxtb	r0, r5
   138a4:	cmp	r0, #0
   138a8:	cmpne	r4, r0
   138ac:	bne	16cb4 <__assert_fail@plt+0x497c>
   138b0:	mov	r0, r6
   138b4:	mov	r5, r4
   138b8:	b	12fdc <__assert_fail@plt+0xca4>
   138bc:	sub	r1, fp, #288	; 0x120
   138c0:	vmov.i32	q8, #0	; 0x00000000
   138c4:	mov	r0, #36	; 0x24
   138c8:	movw	r4, #37592	; 0x92d8
   138cc:	mov	r2, r1
   138d0:	movt	r4, #3
   138d4:	vst1.64	{d16-d17}, [r2], r0
   138d8:	mov	r0, #0
   138dc:	str	r0, [r2]
   138e0:	add	r2, r1, #16
   138e4:	str	r0, [fp, #-256]	; 0xffffff00
   138e8:	mvn	r0, #0
   138ec:	vst1.64	{d16-d17}, [r2]
   138f0:	str	r0, [fp, #-280]	; 0xfffffee8
   138f4:	ldr	r0, [r4]
   138f8:	movw	r2, #28519	; 0x6f67
   138fc:	movt	r2, #2
   13900:	bl	16fe8 <__assert_fail@plt+0x4cb0>
   13904:	ldr	r2, [fp, #-288]	; 0xfffffee0
   13908:	sub	r1, r2, #1
   1390c:	cmp	r2, #0
   13910:	str	r1, [fp, #-288]	; 0xfffffee0
   13914:	beq	16c94 <__assert_fail@plt+0x495c>
   13918:	ldrb	r2, [r0]
   1391c:	cmp	r2, #46	; 0x2e
   13920:	bne	13fc4 <__assert_fail@plt+0x1c8c>
   13924:	ldr	r1, [sp, #84]	; 0x54
   13928:	movw	r2, #28409	; 0x6ef9
   1392c:	add	r0, r0, #1
   13930:	movt	r2, #2
   13934:	bl	16fe8 <__assert_fail@plt+0x4cb0>
   13938:	ldr	r1, [fp, #-284]	; 0xfffffee4
   1393c:	sub	r2, r1, #1
   13940:	cmp	r1, #0
   13944:	str	r2, [fp, #-284]	; 0xfffffee4
   13948:	beq	16adc <__assert_fail@plt+0x47a4>
   1394c:	ldr	r1, [fp, #-288]	; 0xfffffee0
   13950:	b	13fc8 <__assert_fail@plt+0x1c90>
   13954:	movw	r4, #37592	; 0x92d8
   13958:	movt	r4, #3
   1395c:	ldr	r0, [r4]
   13960:	ldrb	r1, [r0]
   13964:	cmp	r1, #0
   13968:	beq	16aec <__assert_fail@plt+0x47b4>
   1396c:	ldrb	r2, [r0, #1]
   13970:	cmp	r2, #0
   13974:	beq	139a4 <__assert_fail@plt+0x166c>
   13978:	movw	r1, #28696	; 0x7018
   1397c:	movt	r1, #2
   13980:	bl	11e28 <strcmp@plt>
   13984:	ldr	r7, [sp, #108]	; 0x6c
   13988:	ldr	ip, [sp, #112]	; 0x70
   1398c:	movw	r3, #37568	; 0x92c0
   13990:	mvn	lr, #0
   13994:	mov	r1, #0
   13998:	cmp	r0, #0
   1399c:	movt	r3, #3
   139a0:	bne	16af8 <__assert_fail@plt+0x47c0>
   139a4:	movw	r0, #37348	; 0x91e4
   139a8:	movt	r0, #3
   139ac:	ldr	r2, [r0, #4]
   139b0:	cmp	r2, #256	; 0x100
   139b4:	cmpne	r2, r1
   139b8:	bne	16b2c <__assert_fail@plt+0x47f4>
   139bc:	str	r1, [r0, #4]
   139c0:	mov	r4, #116	; 0x74
   139c4:	mov	r0, r6
   139c8:	b	12fdc <__assert_fail@plt+0xca4>
   139cc:	mov	r0, #1
   139d0:	mov	r4, #117	; 0x75
   139d4:	strb	r0, [sl, #7]
   139d8:	mov	r0, r6
   139dc:	b	12fdc <__assert_fail@plt+0xca4>
   139e0:	movw	r0, #37592	; 0x92d8
   139e4:	str	r5, [sp, #32]
   139e8:	ldr	r4, [fp, #-104]	; 0xffffff98
   139ec:	add	r3, sp, #128	; 0x80
   139f0:	mov	r1, #0
   139f4:	mov	r2, #10
   139f8:	movt	r0, #3
   139fc:	ldr	r5, [r0]
   13a00:	movw	r0, #24692	; 0x6074
   13a04:	movt	r0, #2
   13a08:	str	r0, [sp]
   13a0c:	mov	r0, r5
   13a10:	bl	23de4 <__assert_fail@plt+0x11aac>
   13a14:	cmp	r0, #0
   13a18:	beq	141bc <__assert_fail@plt+0x1e84>
   13a1c:	ldr	ip, [sp, #112]	; 0x70
   13a20:	ldr	r7, [sp, #108]	; 0x6c
   13a24:	movw	r3, #37568	; 0x92c0
   13a28:	mvn	r1, #0
   13a2c:	cmp	r0, #1
   13a30:	mvn	lr, #0
   13a34:	movt	r3, #3
   13a38:	str	r1, [sp, #20]
   13a3c:	beq	14560 <__assert_fail@plt+0x2228>
   13a40:	b	16b38 <__assert_fail@plt+0x4800>
   13a44:	movw	r0, #37592	; 0x92d8
   13a48:	mov	sl, r5
   13a4c:	mov	r4, #111	; 0x6f
   13a50:	movt	r0, #3
   13a54:	ldr	r5, [r0]
   13a58:	ldr	r0, [sp, #60]	; 0x3c
   13a5c:	cmp	r0, #0
   13a60:	beq	1451c <__assert_fail@plt+0x21e4>
   13a64:	mov	r1, r5
   13a68:	bl	11e28 <strcmp@plt>
   13a6c:	ldr	r7, [sp, #108]	; 0x6c
   13a70:	ldr	ip, [sp, #112]	; 0x70
   13a74:	movw	r3, #37568	; 0x92c0
   13a78:	str	r5, [sp, #60]	; 0x3c
   13a7c:	mov	r5, sl
   13a80:	movw	sl, #39016	; 0x9868
   13a84:	cmp	r0, #0
   13a88:	mvn	lr, #0
   13a8c:	mov	r0, r6
   13a90:	movt	r3, #3
   13a94:	movt	sl, #3
   13a98:	beq	12fdc <__assert_fail@plt+0xca4>
   13a9c:	b	16b50 <__assert_fail@plt+0x4818>
   13aa0:	movw	r0, #37592	; 0x92d8
   13aa4:	movw	r4, #32160	; 0x7da0
   13aa8:	mov	r2, #1
   13aac:	movt	r0, #3
   13ab0:	movt	r4, #2
   13ab4:	str	r2, [sp]
   13ab8:	ldr	r1, [r0]
   13abc:	movw	r0, #37476	; 0x9264
   13ac0:	mov	r3, r4
   13ac4:	movt	r0, #3
   13ac8:	ldr	r0, [r0]
   13acc:	stmib	sp, {r0, r2}
   13ad0:	movw	r0, #28464	; 0x6f30
   13ad4:	movw	r2, #32168	; 0x7da8
   13ad8:	movt	r0, #2
   13adc:	movt	r2, #2
   13ae0:	bl	1c194 <__assert_fail@plt+0x9e5c>
   13ae4:	ldr	r7, [sp, #108]	; 0x6c
   13ae8:	ldr	ip, [sp, #112]	; 0x70
   13aec:	ldrb	r4, [r4, r0]
   13af0:	movw	r3, #37568	; 0x92c0
   13af4:	mvn	lr, #0
   13af8:	movt	r3, #3
   13afc:	b	13488 <__assert_fail@plt+0x1150>
   13b00:	movw	r2, #37592	; 0x92d8
   13b04:	movt	r2, #3
   13b08:	ldr	r1, [r2]
   13b0c:	ldrb	r0, [r1]
   13b10:	cmp	r0, #43	; 0x2b
   13b14:	bne	144c4 <__assert_fail@plt+0x218c>
   13b18:	ldr	r3, [r3]
   13b1c:	mov	r0, #0
   13b20:	mov	r4, #0
   13b24:	mov	r2, #0
   13b28:	cmp	r3, r7
   13b2c:	beq	13b64 <__assert_fail@plt+0x182c>
   13b30:	ldr	r3, [ip, r3, lsl #2]
   13b34:	mov	r4, #0
   13b38:	ldrb	r2, [r3]
   13b3c:	cmp	r2, #45	; 0x2d
   13b40:	mov	r2, #0
   13b44:	bne	13b64 <__assert_fail@plt+0x182c>
   13b48:	ldrb	r2, [r3, #1]
   13b4c:	mov	r4, #0
   13b50:	sub	r2, r2, #48	; 0x30
   13b54:	cmp	r2, #10
   13b58:	ldr	r2, [sp, #76]	; 0x4c
   13b5c:	movwcc	r4, #1
   13b60:	and	r2, r4, r2
   13b64:	ldr	r3, [sp, #104]	; 0x68
   13b68:	orr	r2, r3, r2
   13b6c:	movw	r3, #37568	; 0x92c0
   13b70:	tst	r2, #1
   13b74:	movw	r2, #37592	; 0x92d8
   13b78:	movt	r3, #3
   13b7c:	movt	r2, #3
   13b80:	beq	148dc <__assert_fail@plt+0x25a4>
   13b84:	sub	r3, fp, #288	; 0x120
   13b88:	vmov.i32	q8, #0	; 0x00000000
   13b8c:	mov	r0, #36	; 0x24
   13b90:	mov	sl, r6
   13b94:	mov	r6, #0
   13b98:	mov	r2, r3
   13b9c:	str	r6, [fp, #-256]	; 0xffffff00
   13ba0:	vst1.64	{d16-d17}, [r2], r0
   13ba4:	add	r0, r3, #16
   13ba8:	add	r3, sp, #128	; 0x80
   13bac:	vst1.64	{d16-d17}, [r0]
   13bb0:	mvn	r0, #0
   13bb4:	str	r6, [r2]
   13bb8:	mov	r2, #10
   13bbc:	str	r0, [fp, #-280]	; 0xfffffee8
   13bc0:	movw	r0, #24692	; 0x6074
   13bc4:	movt	r0, #2
   13bc8:	str	r0, [sp]
   13bcc:	add	r0, r1, #1
   13bd0:	sub	r1, fp, #208	; 0xd0
   13bd4:	bl	23de4 <__assert_fail@plt+0x11aac>
   13bd8:	cmp	r0, #4
   13bdc:	bhi	13c18 <__assert_fail@plt+0x18e0>
   13be0:	add	r1, pc, #0
   13be4:	ldr	pc, [r1, r0, lsl #2]
   13be8:	strdeq	r3, [r1], -ip
   13bec:	andeq	r3, r1, r0, lsl ip
   13bf0:	strdeq	r3, [r1], -ip
   13bf4:	andeq	r3, r1, r0, lsl ip
   13bf8:	andeq	r4, r1, r8, ror r5
   13bfc:	ldr	r1, [sp, #132]	; 0x84
   13c00:	ldr	r0, [sp, #128]	; 0x80
   13c04:	cmp	r1, #0
   13c08:	str	r0, [fp, #-288]	; 0xfffffee0
   13c0c:	beq	13c18 <__assert_fail@plt+0x18e0>
   13c10:	mvn	r0, #0
   13c14:	str	r0, [fp, #-288]	; 0xfffffee0
   13c18:	ldr	r0, [fp, #-208]	; 0xffffff30
   13c1c:	ldr	ip, [sp, #112]	; 0x70
   13c20:	ldr	r7, [sp, #108]	; 0x6c
   13c24:	movw	r3, #37568	; 0x92c0
   13c28:	mvn	lr, #0
   13c2c:	movt	r3, #3
   13c30:	cmp	r0, #0
   13c34:	beq	14590 <__assert_fail@plt+0x2258>
   13c38:	ldrb	r1, [r0]
   13c3c:	cmp	r1, #46	; 0x2e
   13c40:	bne	14570 <__assert_fail@plt+0x2238>
   13c44:	movw	r1, #24692	; 0x6074
   13c48:	add	r0, r0, #1
   13c4c:	add	r3, sp, #128	; 0x80
   13c50:	mov	r2, #10
   13c54:	movt	r1, #2
   13c58:	str	r1, [sp]
   13c5c:	sub	r1, fp, #208	; 0xd0
   13c60:	bl	23de4 <__assert_fail@plt+0x11aac>
   13c64:	cmp	r0, #4
   13c68:	bhi	13ca8 <__assert_fail@plt+0x1970>
   13c6c:	add	r1, pc, #4
   13c70:	mov	r6, #0
   13c74:	ldr	pc, [r1, r0, lsl #2]
   13c78:	andeq	r3, r1, ip, lsl #25
   13c7c:	andeq	r3, r1, r0, lsr #25
   13c80:	andeq	r3, r1, ip, lsl #25
   13c84:	andeq	r3, r1, r0, lsr #25
   13c88:	andeq	r4, r1, ip, ror r5
   13c8c:	ldr	r1, [sp, #132]	; 0x84
   13c90:	ldr	r0, [sp, #128]	; 0x80
   13c94:	cmp	r1, #0
   13c98:	str	r0, [fp, #-284]	; 0xfffffee4
   13c9c:	beq	13ca8 <__assert_fail@plt+0x1970>
   13ca0:	mvn	r0, #0
   13ca4:	str	r0, [fp, #-284]	; 0xfffffee4
   13ca8:	ldr	r6, [fp, #-208]	; 0xffffff30
   13cac:	b	1457c <__assert_fail@plt+0x2244>
   13cb0:	ldr	r0, [r3]
   13cb4:	mov	r4, #121	; 0x79
   13cb8:	add	r1, ip, r0, lsl #2
   13cbc:	ldr	r2, [r1, #-4]
   13cc0:	movw	r1, #37592	; 0x92d8
   13cc4:	movt	r1, #3
   13cc8:	ldr	r1, [r1]
   13ccc:	cmp	r1, r2
   13cd0:	beq	13cdc <__assert_fail@plt+0x19a4>
   13cd4:	mov	r0, r6
   13cd8:	b	12fdc <__assert_fail@plt+0xca4>
   13cdc:	ldrb	r2, [r1], #1
   13ce0:	sub	r3, r2, #48	; 0x30
   13ce4:	cmp	r3, #10
   13ce8:	bcc	13cdc <__assert_fail@plt+0x19a4>
   13cec:	movw	r3, #37568	; 0x92c0
   13cf0:	cmp	r2, #0
   13cf4:	subne	r0, r0, #1
   13cf8:	movt	r3, #3
   13cfc:	str	r0, [r3]
   13d00:	mov	r0, r6
   13d04:	b	12fdc <__assert_fail@plt+0xca4>
   13d08:	mov	r0, #1
   13d0c:	mov	r4, #115	; 0x73
   13d10:	strb	r0, [sl, #6]
   13d14:	mov	r0, r6
   13d18:	b	12fdc <__assert_fail@plt+0xca4>
   13d1c:	movw	r2, #37592	; 0x92d8
   13d20:	ldr	r1, [sl, #24]
   13d24:	ldr	r0, [sl, #36]	; 0x24
   13d28:	movt	r2, #3
   13d2c:	ldr	r4, [r2]
   13d30:	cmp	r1, r0
   13d34:	bne	144cc <__assert_fail@plt+0x2194>
   13d38:	ldr	r0, [sl, #40]	; 0x28
   13d3c:	add	r1, sl, #36	; 0x24
   13d40:	mov	r2, #4
   13d44:	bl	2367c <__assert_fail@plt+0x11344>
   13d48:	str	r0, [sl, #40]	; 0x28
   13d4c:	ldr	r7, [sp, #108]	; 0x6c
   13d50:	ldr	ip, [sp, #112]	; 0x70
   13d54:	movw	r3, #37568	; 0x92c0
   13d58:	mvn	lr, #0
   13d5c:	ldr	r1, [sl, #24]
   13d60:	movt	r3, #3
   13d64:	b	144d0 <__assert_fail@plt+0x2198>
   13d68:	mov	r0, #1
   13d6c:	mov	r4, #122	; 0x7a
   13d70:	strb	r0, [sl, #8]
   13d74:	mov	r0, r6
   13d78:	b	12fdc <__assert_fail@plt+0xca4>
   13d7c:	movw	r0, #37592	; 0x92d8
   13d80:	sub	r3, fp, #240	; 0xf0
   13d84:	mov	r1, #0
   13d88:	mov	r2, #10
   13d8c:	mov	sl, r6
   13d90:	movt	r0, #3
   13d94:	ldr	r9, [r0]
   13d98:	ldr	r0, [fp, #-104]	; 0xffffff98
   13d9c:	str	r0, [sp, #72]	; 0x48
   13da0:	movw	r0, #24692	; 0x6074
   13da4:	movt	r0, #2
   13da8:	str	r0, [sp]
   13dac:	mov	r0, r9
   13db0:	bl	23de4 <__assert_fail@plt+0x11aac>
   13db4:	mov	r6, r0
   13db8:	add	r1, sp, #128	; 0x80
   13dbc:	mov	r0, #7
   13dc0:	bl	11f90 <getrlimit64@plt>
   13dc4:	ldr	r1, [sp, #128]	; 0x80
   13dc8:	mov	r4, #17
   13dcc:	cmp	r0, #0
   13dd0:	subeq	r4, r1, #3
   13dd4:	cmp	r6, #0
   13dd8:	bne	16b5c <__assert_fail@plt+0x4824>
   13ddc:	ldr	r1, [fp, #-236]	; 0xffffff14
   13de0:	ldr	r0, [fp, #-240]	; 0xffffff10
   13de4:	ldr	ip, [sp, #112]	; 0x70
   13de8:	ldr	r7, [sp, #108]	; 0x6c
   13dec:	movw	r2, #37348	; 0x91e4
   13df0:	movw	r3, #37568	; 0x92c0
   13df4:	mvn	lr, #0
   13df8:	movt	r2, #3
   13dfc:	movt	r3, #3
   13e00:	cmp	r1, #0
   13e04:	str	r0, [r2, #8]
   13e08:	bne	16b64 <__assert_fail@plt+0x482c>
   13e0c:	cmp	r0, #1
   13e10:	bls	16be8 <__assert_fail@plt+0x48b0>
   13e14:	cmp	r4, r0
   13e18:	bcc	16b64 <__assert_fail@plt+0x482c>
   13e1c:	movw	r9, #37984	; 0x9460
   13e20:	mov	r4, #260	; 0x104
   13e24:	mov	r0, sl
   13e28:	movt	r9, #3
   13e2c:	b	14530 <__assert_fail@plt+0x21f8>
   13e30:	movw	r0, #37592	; 0x92d8
   13e34:	mov	sl, r5
   13e38:	movw	r4, #261	; 0x105
   13e3c:	movt	r0, #3
   13e40:	ldr	r5, [r0]
   13e44:	ldr	r0, [sp, #28]
   13e48:	cmp	r0, #0
   13e4c:	beq	14524 <__assert_fail@plt+0x21ec>
   13e50:	mov	r1, r5
   13e54:	bl	11e28 <strcmp@plt>
   13e58:	ldr	r7, [sp, #108]	; 0x6c
   13e5c:	ldr	ip, [sp, #112]	; 0x70
   13e60:	movw	r3, #37568	; 0x92c0
   13e64:	str	r5, [sp, #28]
   13e68:	mov	r5, sl
   13e6c:	movw	sl, #39016	; 0x9868
   13e70:	cmp	r0, #0
   13e74:	mvn	lr, #0
   13e78:	mov	r0, r6
   13e7c:	movt	r3, #3
   13e80:	movt	sl, #3
   13e84:	beq	12fdc <__assert_fail@plt+0xca4>
   13e88:	b	16c6c <__assert_fail@plt+0x4934>
   13e8c:	mov	r0, #1
   13e90:	movw	r4, #258	; 0x102
   13e94:	strb	r0, [sl, #5]
   13e98:	mov	r0, r6
   13e9c:	b	12fdc <__assert_fail@plt+0xca4>
   13ea0:	movw	r0, #37592	; 0x92d8
   13ea4:	movw	r4, #259	; 0x103
   13ea8:	movt	r0, #3
   13eac:	ldr	r0, [r0]
   13eb0:	str	r0, [sp, #96]	; 0x60
   13eb4:	mov	r0, r6
   13eb8:	b	12fdc <__assert_fail@plt+0xca4>
   13ebc:	ldr	r1, [fp, #-208]	; 0xffffff30
   13ec0:	ldrb	r0, [r1, #-1]
   13ec4:	sub	r2, r0, #48	; 0x30
   13ec8:	mov	r0, #2
   13ecc:	cmp	r2, #9
   13ed0:	bhi	16c7c <__assert_fail@plt+0x4944>
   13ed4:	ldrb	r2, [r1, #1]
   13ed8:	ldr	ip, [sp, #112]	; 0x70
   13edc:	ldr	r7, [sp, #108]	; 0x6c
   13ee0:	movw	r3, #37568	; 0x92c0
   13ee4:	mvn	lr, #0
   13ee8:	movt	r3, #3
   13eec:	cmp	r2, #0
   13ef0:	bne	16c7c <__assert_fail@plt+0x4944>
   13ef4:	ldrb	r1, [r1]
   13ef8:	cmp	r1, #98	; 0x62
   13efc:	beq	13f74 <__assert_fail@plt+0x1c3c>
   13f00:	cmp	r1, #37	; 0x25
   13f04:	bne	16c7c <__assert_fail@plt+0x4944>
   13f08:	bl	1f958 <__assert_fail@plt+0xd620>
   13f0c:	ldr	r0, [sp, #128]	; 0x80
   13f10:	ldr	r1, [sp, #132]	; 0x84
   13f14:	vmov.f64	d8, d0
   13f18:	bl	25cfc <_obstack_memory_used@@Base+0x40c>
   13f1c:	vldr	d17, [pc, #1012]	; 14318 <__assert_fail@plt+0x1fe0>
   13f20:	vldr	d18, [pc, #1016]	; 14320 <__assert_fail@plt+0x1fe8>
   13f24:	vmov	d16, r0, r1
   13f28:	vmul.f64	d16, d8, d16
   13f2c:	vdiv.f64	d16, d16, d17
   13f30:	vcmpe.f64	d16, d18
   13f34:	vmrs	APSR_nzcv, fpscr
   13f38:	bpl	16c78 <__assert_fail@plt+0x4940>
   13f3c:	vmov	r0, r1, d16
   13f40:	bl	25dc0 <_obstack_memory_used@@Base+0x4d0>
   13f44:	ldr	ip, [sp, #112]	; 0x70
   13f48:	ldr	r7, [sp, #108]	; 0x6c
   13f4c:	movw	r3, #37568	; 0x92c0
   13f50:	str	r1, [sp, #132]	; 0x84
   13f54:	str	r0, [sp, #128]	; 0x80
   13f58:	mvn	lr, #0
   13f5c:	movt	r3, #3
   13f60:	ldr	r2, [sl, #28]
   13f64:	subs	r2, r0, r2
   13f68:	sbcs	r2, r1, #0
   13f6c:	bcs	13f8c <__assert_fail@plt+0x1c54>
   13f70:	b	13fb8 <__assert_fail@plt+0x1c80>
   13f74:	ldr	r0, [sp, #128]	; 0x80
   13f78:	ldr	r1, [sp, #132]	; 0x84
   13f7c:	ldr	r2, [sl, #28]
   13f80:	subs	r2, r0, r2
   13f84:	sbcs	r2, r1, #0
   13f88:	bcc	13fb8 <__assert_fail@plt+0x1c80>
   13f8c:	cmp	r1, #0
   13f90:	str	r0, [sl, #28]
   13f94:	bne	16c78 <__assert_fail@plt+0x4940>
   13f98:	movw	r1, #37348	; 0x91e4
   13f9c:	movt	r1, #3
   13fa0:	ldr	r1, [r1, #8]
   13fa4:	add	r1, r1, r1, lsl #3
   13fa8:	lsl	r1, r1, #1
   13fac:	cmp	r1, r0
   13fb0:	movcc	r1, r0
   13fb4:	str	r1, [sl, #28]
   13fb8:	mov	r4, #83	; 0x53
   13fbc:	mov	r0, r6
   13fc0:	b	12fdc <__assert_fail@plt+0xca4>
   13fc4:	ldr	r2, [fp, #-284]	; 0xfffffee4
   13fc8:	orrs	r1, r1, r2
   13fcc:	movw	r3, #38496	; 0x9660
   13fd0:	movt	r3, #3
   13fd4:	mvneq	r1, #0
   13fd8:	streq	r1, [fp, #-288]	; 0xfffffee0
   13fdc:	b	13fec <__assert_fail@plt+0x1cb4>
   13fe0:	ldr	r1, [fp, #-272]	; 0xfffffef0
   13fe4:	cmp	r1, #0
   13fe8:	streq	r9, [fp, #-272]	; 0xfffffef0
   13fec:	add	r0, r0, #1
   13ff0:	ldrb	r1, [r0, #-1]
   13ff4:	sub	r1, r1, #44	; 0x2c
   13ff8:	cmp	r1, #70	; 0x46
   13ffc:	bhi	1419c <__assert_fail@plt+0x1e64>
   14000:	add	r2, pc, #0
   14004:	ldr	pc, [r2, r1, lsl #2]
   14008:	strdeq	r4, [r1], -r8
   1400c:	muleq	r1, ip, r1
   14010:	muleq	r1, ip, r1
   14014:	muleq	r1, ip, r1
   14018:	muleq	r1, ip, r1
   1401c:	muleq	r1, ip, r1
   14020:	muleq	r1, ip, r1
   14024:	muleq	r1, ip, r1
   14028:	muleq	r1, ip, r1
   1402c:	muleq	r1, ip, r1
   14030:	muleq	r1, ip, r1
   14034:	muleq	r1, ip, r1
   14038:	muleq	r1, ip, r1
   1403c:	muleq	r1, ip, r1
   14040:	muleq	r1, ip, r1
   14044:	muleq	r1, ip, r1
   14048:	muleq	r1, ip, r1
   1404c:	muleq	r1, ip, r1
   14050:	muleq	r1, ip, r1
   14054:	muleq	r1, ip, r1
   14058:	muleq	r1, ip, r1
   1405c:	muleq	r1, ip, r1
   14060:	muleq	r1, ip, r1
   14064:	muleq	r1, ip, r1
   14068:	muleq	r1, ip, r1
   1406c:	muleq	r1, ip, r1
   14070:	muleq	r1, ip, r1
   14074:	muleq	r1, ip, r1
   14078:	muleq	r1, ip, r1
   1407c:	muleq	r1, ip, r1
   14080:	muleq	r1, ip, r1
   14084:	muleq	r1, ip, r1
   14088:	muleq	r1, ip, r1
   1408c:	andeq	r4, r1, r4, lsr #2
   14090:	muleq	r1, ip, r1
   14094:	muleq	r1, ip, r1
   14098:	muleq	r1, ip, r1
   1409c:	muleq	r1, ip, r1
   140a0:	andeq	r4, r1, ip, lsr r1
   140a4:	muleq	r1, ip, r1
   140a8:	muleq	r1, ip, r1
   140ac:	muleq	r1, ip, r1
   140b0:	andeq	r4, r1, r4, ror #2
   140b4:	muleq	r1, ip, r1
   140b8:	muleq	r1, ip, r1
   140bc:	muleq	r1, ip, r1
   140c0:	muleq	r1, ip, r1
   140c4:	muleq	r1, ip, r1
   140c8:	muleq	r1, ip, r1
   140cc:	muleq	r1, ip, r1
   140d0:	muleq	r1, ip, r1
   140d4:	muleq	r1, ip, r1
   140d8:	muleq	r1, ip, r1
   140dc:	muleq	r1, ip, r1
   140e0:	andeq	r4, r1, r8, asr #2
   140e4:	muleq	r1, ip, r1
   140e8:	andeq	r4, r1, r4, asr r1
   140ec:	muleq	r1, ip, r1
   140f0:	andeq	r4, r1, r0, ror r1
   140f4:	andeq	r4, r1, r8, ror r1
   140f8:	andeq	r4, r1, r0, lsr r1
   140fc:	andeq	r3, r1, r0, ror #31
   14100:	muleq	r1, ip, r1
   14104:	muleq	r1, ip, r1
   14108:	muleq	r1, ip, r1
   1410c:	muleq	r1, ip, r1
   14110:	andeq	r4, r1, r4, lsl #3
   14114:	muleq	r1, ip, r1
   14118:	muleq	r1, ip, r1
   1411c:	muleq	r1, ip, r1
   14120:	muleq	r1, r0, r1
   14124:	mov	r1, #1
   14128:	strb	r1, [fp, #-258]	; 0xfffffefe
   1412c:	b	13fec <__assert_fail@plt+0x1cb4>
   14130:	mov	r1, #1
   14134:	strb	r1, [fp, #-259]	; 0xfffffefd
   14138:	b	13fec <__assert_fail@plt+0x1cb4>
   1413c:	mov	r1, #1
   14140:	strb	r1, [fp, #-261]	; 0xfffffefb
   14144:	b	13fec <__assert_fail@plt+0x1cb4>
   14148:	mov	r1, #1
   1414c:	strb	r1, [fp, #-264]	; 0xfffffef8
   14150:	b	13fec <__assert_fail@plt+0x1cb4>
   14154:	movw	r1, #38240	; 0x9560
   14158:	movt	r1, #3
   1415c:	str	r1, [fp, #-272]	; 0xfffffef0
   14160:	b	13fec <__assert_fail@plt+0x1cb4>
   14164:	mov	r1, #1
   14168:	strb	r1, [fp, #-256]	; 0xffffff00
   1416c:	b	13fec <__assert_fail@plt+0x1cb4>
   14170:	str	r3, [fp, #-268]	; 0xfffffef4
   14174:	b	13fec <__assert_fail@plt+0x1cb4>
   14178:	mov	r1, #1
   1417c:	strb	r1, [fp, #-260]	; 0xfffffefc
   14180:	b	13fec <__assert_fail@plt+0x1cb4>
   14184:	mov	r1, #1
   14188:	strb	r1, [fp, #-262]	; 0xfffffefa
   1418c:	b	13fec <__assert_fail@plt+0x1cb4>
   14190:	mov	r1, #1
   14194:	strb	r1, [fp, #-257]	; 0xfffffeff
   14198:	b	13fec <__assert_fail@plt+0x1cb4>
   1419c:	mov	r1, #0
   141a0:	str	r1, [fp, #-276]	; 0xfffffeec
   141a4:	mvn	r1, #0
   141a8:	str	r1, [fp, #-280]	; 0xfffffee8
   141ac:	ldrb	r1, [r0, #-1]
   141b0:	cmp	r1, #0
   141b4:	beq	14474 <__assert_fail@plt+0x213c>
   141b8:	b	16ca4 <__assert_fail@plt+0x496c>
   141bc:	ldr	r0, [sp, #132]	; 0x84
   141c0:	cmp	r0, #0
   141c4:	beq	1453c <__assert_fail@plt+0x2204>
   141c8:	ldr	ip, [sp, #112]	; 0x70
   141cc:	ldr	r7, [sp, #108]	; 0x6c
   141d0:	movw	r3, #37568	; 0x92c0
   141d4:	mov	r0, #0
   141d8:	mvn	r1, #0
   141dc:	mvn	lr, #0
   141e0:	str	r0, [sp, #132]	; 0x84
   141e4:	mvn	r0, #0
   141e8:	movt	r3, #3
   141ec:	str	r1, [sp, #128]	; 0x80
   141f0:	str	r0, [sp, #20]
   141f4:	b	14560 <__assert_fail@plt+0x2228>
   141f8:	ldr	r1, [sp, #88]	; 0x58
   141fc:	movw	r2, #28595	; 0x6fb3
   14200:	movt	r2, #2
   14204:	bl	16fe8 <__assert_fail@plt+0x4cb0>
   14208:	ldr	r1, [fp, #-280]	; 0xfffffee8
   1420c:	sub	r2, r1, #1
   14210:	cmp	r1, #0
   14214:	str	r2, [fp, #-280]	; 0xfffffee8
   14218:	beq	16c94 <__assert_fail@plt+0x495c>
   1421c:	ldrb	r1, [r0]
   14220:	cmp	r1, #46	; 0x2e
   14224:	bne	1423c <__assert_fail@plt+0x1f04>
   14228:	ldr	r1, [sp, #80]	; 0x50
   1422c:	movw	r2, #28409	; 0x6ef9
   14230:	add	r0, r0, #1
   14234:	movt	r2, #2
   14238:	bl	16fe8 <__assert_fail@plt+0x4cb0>
   1423c:	movw	r7, #38496	; 0x9660
   14240:	movt	r7, #3
   14244:	ldrb	r1, [r0]
   14248:	sub	r2, r1, #77	; 0x4d
   1424c:	cmp	r2, #37	; 0x25
   14250:	bhi	1446c <__assert_fail@plt+0x2134>
   14254:	add	r3, pc, #0
   14258:	ldr	pc, [r3, r2, lsl #2]
   1425c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14260:	andeq	r4, r1, ip, ror #8
   14264:	andeq	r4, r1, ip, ror #8
   14268:	andeq	r4, r1, ip, ror #8
   1426c:	andeq	r4, r1, ip, ror #8
   14270:	andeq	r4, r1, r0, lsl r4
   14274:	andeq	r4, r1, ip, ror #8
   14278:	andeq	r4, r1, ip, ror #8
   1427c:	andeq	r4, r1, ip, ror #8
   14280:	andeq	r4, r1, ip, asr #7
   14284:	andeq	r4, r1, ip, ror #8
   14288:	andeq	r4, r1, ip, ror #8
   1428c:	andeq	r4, r1, ip, ror #8
   14290:	andeq	r4, r1, ip, ror #8
   14294:	andeq	r4, r1, ip, ror #8
   14298:	andeq	r4, r1, ip, ror #8
   1429c:	andeq	r4, r1, ip, ror #8
   142a0:	andeq	r4, r1, ip, ror #8
   142a4:	andeq	r4, r1, ip, ror #8
   142a8:	andeq	r4, r1, ip, ror #8
   142ac:	andeq	r4, r1, ip, ror #8
   142b0:	andeq	r4, r1, ip, lsl #7
   142b4:	andeq	r4, r1, ip, ror #8
   142b8:	andeq	r4, r1, ip, ror #7
   142bc:	andeq	r4, r1, ip, ror #8
   142c0:	andeq	r4, r1, r0, ror r3
   142c4:	andeq	r4, r1, ip, lsr #7
   142c8:	andeq	r4, r1, r8, lsr #6
   142cc:	andeq	r4, r1, r8, asr #6
   142d0:	andeq	r4, r1, ip, ror #8
   142d4:	andeq	r4, r1, ip, ror #8
   142d8:	andeq	r4, r1, ip, ror #8
   142dc:	andeq	r4, r1, ip, ror #8
   142e0:	andeq	r4, r1, r0, asr r4
   142e4:	andeq	r4, r1, ip, ror #8
   142e8:	andeq	r4, r1, ip, ror #8
   142ec:	andeq	r4, r1, ip, ror #8
   142f0:	andeq	r4, r1, r0, lsr r4
   142f4:	mov	r1, #1
   142f8:	add	r0, r0, #1
   142fc:	strb	r1, [fp, #-258]	; 0xfffffefe
   14300:	ldrb	r1, [r0]
   14304:	sub	r2, r1, #77	; 0x4d
   14308:	cmp	r2, #37	; 0x25
   1430c:	bls	14254 <__assert_fail@plt+0x1f1c>
   14310:	b	1446c <__assert_fail@plt+0x2134>
   14314:	nop	{0}
   14318:	andeq	r0, r0, r0
   1431c:	subsmi	r0, r9, r0
   14320:	andeq	r0, r0, r0
   14324:	mvnsmi	r0, #0
   14328:	mov	r1, #1
   1432c:	add	r0, r0, #1
   14330:	strb	r1, [fp, #-259]	; 0xfffffefd
   14334:	ldrb	r1, [r0]
   14338:	sub	r2, r1, #77	; 0x4d
   1433c:	cmp	r2, #37	; 0x25
   14340:	bls	14254 <__assert_fail@plt+0x1f1c>
   14344:	b	1446c <__assert_fail@plt+0x2134>
   14348:	ldr	r1, [fp, #-272]	; 0xfffffef0
   1434c:	cmp	r1, #0
   14350:	bne	143d4 <__assert_fail@plt+0x209c>
   14354:	str	r9, [fp, #-272]	; 0xfffffef0
   14358:	add	r0, r0, #1
   1435c:	ldrb	r1, [r0]
   14360:	sub	r2, r1, #77	; 0x4d
   14364:	cmp	r2, #37	; 0x25
   14368:	bls	14254 <__assert_fail@plt+0x1f1c>
   1436c:	b	1446c <__assert_fail@plt+0x2134>
   14370:	str	r7, [fp, #-268]	; 0xfffffef4
   14374:	add	r0, r0, #1
   14378:	ldrb	r1, [r0]
   1437c:	sub	r2, r1, #77	; 0x4d
   14380:	cmp	r2, #37	; 0x25
   14384:	bls	14254 <__assert_fail@plt+0x1f1c>
   14388:	b	1446c <__assert_fail@plt+0x2134>
   1438c:	mov	r1, #1
   14390:	add	r0, r0, #1
   14394:	strb	r1, [fp, #-263]	; 0xfffffef9
   14398:	ldrb	r1, [r0]
   1439c:	sub	r2, r1, #77	; 0x4d
   143a0:	cmp	r2, #37	; 0x25
   143a4:	bls	14254 <__assert_fail@plt+0x1f1c>
   143a8:	b	1446c <__assert_fail@plt+0x2134>
   143ac:	mov	r1, #1
   143b0:	add	r0, r0, #1
   143b4:	strb	r1, [fp, #-260]	; 0xfffffefc
   143b8:	ldrb	r1, [r0]
   143bc:	sub	r2, r1, #77	; 0x4d
   143c0:	cmp	r2, #37	; 0x25
   143c4:	bls	14254 <__assert_fail@plt+0x1f1c>
   143c8:	b	1446c <__assert_fail@plt+0x2134>
   143cc:	mov	r1, #1
   143d0:	strb	r1, [fp, #-256]	; 0xffffff00
   143d4:	add	r0, r0, #1
   143d8:	ldrb	r1, [r0]
   143dc:	sub	r2, r1, #77	; 0x4d
   143e0:	cmp	r2, #37	; 0x25
   143e4:	bls	14254 <__assert_fail@plt+0x1f1c>
   143e8:	b	1446c <__assert_fail@plt+0x2134>
   143ec:	movw	r1, #38240	; 0x9560
   143f0:	add	r0, r0, #1
   143f4:	movt	r1, #3
   143f8:	str	r1, [fp, #-272]	; 0xfffffef0
   143fc:	ldrb	r1, [r0]
   14400:	sub	r2, r1, #77	; 0x4d
   14404:	cmp	r2, #37	; 0x25
   14408:	bls	14254 <__assert_fail@plt+0x1f1c>
   1440c:	b	1446c <__assert_fail@plt+0x2134>
   14410:	mov	r1, #1
   14414:	add	r0, r0, #1
   14418:	strb	r1, [fp, #-261]	; 0xfffffefb
   1441c:	ldrb	r1, [r0]
   14420:	sub	r2, r1, #77	; 0x4d
   14424:	cmp	r2, #37	; 0x25
   14428:	bls	14254 <__assert_fail@plt+0x1f1c>
   1442c:	b	1446c <__assert_fail@plt+0x2134>
   14430:	mov	r1, #1
   14434:	add	r0, r0, #1
   14438:	strb	r1, [fp, #-257]	; 0xfffffeff
   1443c:	ldrb	r1, [r0]
   14440:	sub	r2, r1, #77	; 0x4d
   14444:	cmp	r2, #37	; 0x25
   14448:	bls	14254 <__assert_fail@plt+0x1f1c>
   1444c:	b	1446c <__assert_fail@plt+0x2134>
   14450:	mov	r1, #1
   14454:	add	r0, r0, #1
   14458:	strb	r1, [fp, #-262]	; 0xfffffefa
   1445c:	ldrb	r1, [r0]
   14460:	sub	r2, r1, #77	; 0x4d
   14464:	cmp	r2, #37	; 0x25
   14468:	bls	14254 <__assert_fail@plt+0x1f1c>
   1446c:	cmp	r1, #0
   14470:	bne	16ca4 <__assert_fail@plt+0x496c>
   14474:	sub	r0, fp, #288	; 0x120
   14478:	mov	r1, #40	; 0x28
   1447c:	bl	23930 <__assert_fail@plt+0x115f8>
   14480:	add	r1, sl, #20
   14484:	ldr	r3, [r1]
   14488:	mov	r2, r1
   1448c:	add	r1, r3, #36	; 0x24
   14490:	cmp	r3, #0
   14494:	bne	14484 <__assert_fail@plt+0x214c>
   14498:	mov	r1, #0
   1449c:	str	r0, [r2]
   144a0:	mov	r4, #107	; 0x6b
   144a4:	str	r1, [r0, #36]	; 0x24
   144a8:	mov	r0, r6
   144ac:	ldr	ip, [sp, #112]	; 0x70
   144b0:	ldr	r7, [sp, #108]	; 0x6c
   144b4:	movw	r3, #37568	; 0x92c0
   144b8:	mvn	lr, #0
   144bc:	movt	r3, #3
   144c0:	b	12fdc <__assert_fail@plt+0xca4>
   144c4:	ldr	r0, [sp, #104]	; 0x68
   144c8:	b	148dc <__assert_fail@plt+0x25a4>
   144cc:	ldr	r0, [sl, #40]	; 0x28
   144d0:	add	r2, r1, #1
   144d4:	str	r2, [sl, #24]
   144d8:	str	r4, [r0, r1, lsl #2]
   144dc:	mov	r4, #84	; 0x54
   144e0:	mov	r0, r6
   144e4:	b	12fdc <__assert_fail@plt+0xca4>
   144e8:	movw	r0, #37592	; 0x92d8
   144ec:	movt	r0, #3
   144f0:	ldr	r4, [r0]
   144f4:	str	r4, [sl, #16]
   144f8:	movw	r4, #257	; 0x101
   144fc:	mov	r0, r6
   14500:	b	12fdc <__assert_fail@plt+0xca4>
   14504:	mov	r4, #99	; 0x63
   14508:	uxtb	r0, r5
   1450c:	cmp	r0, #0
   14510:	cmpne	r4, r0
   14514:	beq	138b0 <__assert_fail@plt+0x1578>
   14518:	b	16cb4 <__assert_fail@plt+0x497c>
   1451c:	str	r5, [sp, #60]	; 0x3c
   14520:	b	14528 <__assert_fail@plt+0x21f0>
   14524:	str	r5, [sp, #28]
   14528:	mov	r0, r6
   1452c:	mov	r5, sl
   14530:	movw	sl, #39016	; 0x9868
   14534:	movt	sl, #3
   14538:	b	12fdc <__assert_fail@plt+0xca4>
   1453c:	ldr	r1, [sp, #128]	; 0x80
   14540:	ldr	ip, [sp, #112]	; 0x70
   14544:	ldr	r7, [sp, #108]	; 0x6c
   14548:	movw	r3, #37568	; 0x92c0
   1454c:	mvn	lr, #0
   14550:	movt	r3, #3
   14554:	orrs	r0, r1, r0
   14558:	str	r1, [sp, #20]
   1455c:	beq	16cc0 <__assert_fail@plt+0x4988>
   14560:	ldr	r5, [sp, #32]
   14564:	movw	r4, #263	; 0x107
   14568:	mov	r0, r6
   1456c:	b	12fdc <__assert_fail@plt+0xca4>
   14570:	mov	r6, r0
   14574:	b	14590 <__assert_fail@plt+0x2258>
   14578:	mov	r6, #0
   1457c:	ldr	ip, [sp, #112]	; 0x70
   14580:	ldr	r7, [sp, #108]	; 0x6c
   14584:	movw	r3, #37568	; 0x92c0
   14588:	mvn	lr, #0
   1458c:	movt	r3, #3
   14590:	ldr	r0, [fp, #-288]	; 0xfffffee0
   14594:	ldr	r1, [fp, #-284]	; 0xfffffee4
   14598:	orrs	r0, r0, r1
   1459c:	mvneq	r0, #0
   145a0:	streq	r0, [fp, #-288]	; 0xfffffee0
   145a4:	mov	r0, #1
   145a8:	cmp	r6, #0
   145ac:	bne	145b8 <__assert_fail@plt+0x2280>
   145b0:	b	148c8 <__assert_fail@plt+0x2590>
   145b4:	add	r6, r6, #1
   145b8:	ldrb	r1, [r6]
   145bc:	cmp	r1, #114	; 0x72
   145c0:	bhi	148c8 <__assert_fail@plt+0x2590>
   145c4:	add	r2, pc, #0
   145c8:	ldr	pc, [r2, r1, lsl #2]
   145cc:	strdeq	r4, [r1], -ip
   145d0:	andeq	r4, r1, r8, asr #17
   145d4:	andeq	r4, r1, r8, asr #17
   145d8:	andeq	r4, r1, r8, asr #17
   145dc:	andeq	r4, r1, r8, asr #17
   145e0:	andeq	r4, r1, r8, asr #17
   145e4:	andeq	r4, r1, r8, asr #17
   145e8:	andeq	r4, r1, r8, asr #17
   145ec:	andeq	r4, r1, r8, asr #17
   145f0:	andeq	r4, r1, r8, asr #17
   145f4:	andeq	r4, r1, r8, asr #17
   145f8:	andeq	r4, r1, r8, asr #17
   145fc:	andeq	r4, r1, r8, asr #17
   14600:	andeq	r4, r1, r8, asr #17
   14604:	andeq	r4, r1, r8, asr #17
   14608:	andeq	r4, r1, r8, asr #17
   1460c:	andeq	r4, r1, r8, asr #17
   14610:	andeq	r4, r1, r8, asr #17
   14614:	andeq	r4, r1, r8, asr #17
   14618:	andeq	r4, r1, r8, asr #17
   1461c:	andeq	r4, r1, r8, asr #17
   14620:	andeq	r4, r1, r8, asr #17
   14624:	andeq	r4, r1, r8, asr #17
   14628:	andeq	r4, r1, r8, asr #17
   1462c:	andeq	r4, r1, r8, asr #17
   14630:	andeq	r4, r1, r8, asr #17
   14634:	andeq	r4, r1, r8, asr #17
   14638:	andeq	r4, r1, r8, asr #17
   1463c:	andeq	r4, r1, r8, asr #17
   14640:	andeq	r4, r1, r8, asr #17
   14644:	andeq	r4, r1, r8, asr #17
   14648:	andeq	r4, r1, r8, asr #17
   1464c:	andeq	r4, r1, r8, asr #17
   14650:	andeq	r4, r1, r8, asr #17
   14654:	andeq	r4, r1, r8, asr #17
   14658:	andeq	r4, r1, r8, asr #17
   1465c:	andeq	r4, r1, r8, asr #17
   14660:	andeq	r4, r1, r8, asr #17
   14664:	andeq	r4, r1, r8, asr #17
   14668:	andeq	r4, r1, r8, asr #17
   1466c:	andeq	r4, r1, r8, asr #17
   14670:	andeq	r4, r1, r8, asr #17
   14674:	andeq	r4, r1, r8, asr #17
   14678:	andeq	r4, r1, r8, asr #17
   1467c:	andeq	r4, r1, r8, asr #17
   14680:	andeq	r4, r1, r8, asr #17
   14684:	andeq	r4, r1, r8, asr #17
   14688:	andeq	r4, r1, r8, asr #17
   1468c:	andeq	r4, r1, r8, asr #17
   14690:	andeq	r4, r1, r8, asr #17
   14694:	andeq	r4, r1, r8, asr #17
   14698:	andeq	r4, r1, r8, asr #17
   1469c:	andeq	r4, r1, r8, asr #17
   146a0:	andeq	r4, r1, r8, asr #17
   146a4:	andeq	r4, r1, r8, asr #17
   146a8:	andeq	r4, r1, r8, asr #17
   146ac:	andeq	r4, r1, r8, asr #17
   146b0:	andeq	r4, r1, r8, asr #17
   146b4:	andeq	r4, r1, r8, asr #17
   146b8:	andeq	r4, r1, r8, asr #17
   146bc:	andeq	r4, r1, r8, asr #17
   146c0:	andeq	r4, r1, r8, asr #17
   146c4:	andeq	r4, r1, r8, asr #17
   146c8:	andeq	r4, r1, r8, asr #17
   146cc:	andeq	r4, r1, r8, asr #17
   146d0:	andeq	r4, r1, r8, asr #17
   146d4:	andeq	r4, r1, r8, asr #17
   146d8:	andeq	r4, r1, r8, asr #17
   146dc:	andeq	r4, r1, r8, asr #17
   146e0:	andeq	r4, r1, r8, asr #17
   146e4:	andeq	r4, r1, r8, asr #17
   146e8:	andeq	r4, r1, r8, asr #17
   146ec:	andeq	r4, r1, r8, asr #17
   146f0:	andeq	r4, r1, r8, asr #17
   146f4:	andeq	r4, r1, r8, asr #17
   146f8:	andeq	r4, r1, r8, asr #17
   146fc:	andeq	r4, r1, r8, asr #17
   14700:	muleq	r1, r8, r7
   14704:	andeq	r4, r1, r8, asr #17
   14708:	andeq	r4, r1, r8, asr #17
   1470c:	andeq	r4, r1, r8, asr #17
   14710:	andeq	r4, r1, r8, asr #17
   14714:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14718:	andeq	r4, r1, r8, asr #17
   1471c:	andeq	r4, r1, r8, asr #17
   14720:	andeq	r4, r1, r8, asr #17
   14724:	andeq	r4, r1, ip, asr #16
   14728:	andeq	r4, r1, r8, asr #17
   1472c:	andeq	r4, r1, r8, asr #17
   14730:	andeq	r4, r1, r8, asr #17
   14734:	andeq	r4, r1, r8, asr #17
   14738:	andeq	r4, r1, r8, asr #17
   1473c:	andeq	r4, r1, r8, asr #17
   14740:	andeq	r4, r1, r8, asr #17
   14744:	andeq	r4, r1, r8, asr #17
   14748:	andeq	r4, r1, r8, asr #17
   1474c:	andeq	r4, r1, r8, asr #17
   14750:	andeq	r4, r1, r8, asr #17
   14754:	andeq	r4, r1, r0, lsl r8
   14758:	andeq	r4, r1, r8, asr #17
   1475c:	andeq	r4, r1, ip, lsr #16
   14760:	andeq	r4, r1, r8, asr #17
   14764:	andeq	r4, r1, r8, asr r8
   14768:	andeq	r4, r1, r8, ror r8
   1476c:	ldrdeq	r4, [r1], -r8
   14770:			; <UNDEFINED> instruction: 0x000147b4
   14774:	andeq	r4, r1, r8, asr #17
   14778:	andeq	r4, r1, r8, asr #17
   1477c:	andeq	r4, r1, r8, asr #17
   14780:	andeq	r4, r1, r8, asr #17
   14784:	muleq	r1, r4, r8
   14788:	andeq	r4, r1, r8, asr #17
   1478c:	andeq	r4, r1, r8, asr #17
   14790:	andeq	r4, r1, r8, asr #17
   14794:			; <UNDEFINED> instruction: 0x000148b0
   14798:	mov	r1, #1
   1479c:	add	r6, r6, #1
   147a0:	strb	r1, [fp, #-258]	; 0xfffffefe
   147a4:	ldrb	r1, [r6]
   147a8:	cmp	r1, #114	; 0x72
   147ac:	bls	145c4 <__assert_fail@plt+0x228c>
   147b0:	b	148c8 <__assert_fail@plt+0x2590>
   147b4:	ldr	r1, [fp, #-272]	; 0xfffffef0
   147b8:	cmp	r1, #0
   147bc:	bne	145b4 <__assert_fail@plt+0x227c>
   147c0:	str	r9, [fp, #-272]	; 0xfffffef0
   147c4:	add	r6, r6, #1
   147c8:	ldrb	r1, [r6]
   147cc:	cmp	r1, #114	; 0x72
   147d0:	bls	145c4 <__assert_fail@plt+0x228c>
   147d4:	b	148c8 <__assert_fail@plt+0x2590>
   147d8:	mov	r1, #1
   147dc:	add	r6, r6, #1
   147e0:	strb	r1, [fp, #-259]	; 0xfffffefd
   147e4:	ldrb	r1, [r6]
   147e8:	cmp	r1, #114	; 0x72
   147ec:	bls	145c4 <__assert_fail@plt+0x228c>
   147f0:	b	148c8 <__assert_fail@plt+0x2590>
   147f4:	mov	r1, #1
   147f8:	add	r6, r6, #1
   147fc:	strb	r1, [fp, #-261]	; 0xfffffefb
   14800:	ldrb	r1, [r6]
   14804:	cmp	r1, #114	; 0x72
   14808:	bls	145c4 <__assert_fail@plt+0x228c>
   1480c:	b	148c8 <__assert_fail@plt+0x2590>
   14810:	mov	r1, #1
   14814:	add	r6, r6, #1
   14818:	strb	r1, [fp, #-264]	; 0xfffffef8
   1481c:	ldrb	r1, [r6]
   14820:	cmp	r1, #114	; 0x72
   14824:	bls	145c4 <__assert_fail@plt+0x228c>
   14828:	b	148c8 <__assert_fail@plt+0x2590>
   1482c:	movw	r1, #38240	; 0x9560
   14830:	add	r6, r6, #1
   14834:	movt	r1, #3
   14838:	str	r1, [fp, #-272]	; 0xfffffef0
   1483c:	ldrb	r1, [r6]
   14840:	cmp	r1, #114	; 0x72
   14844:	bls	145c4 <__assert_fail@plt+0x228c>
   14848:	b	148c8 <__assert_fail@plt+0x2590>
   1484c:	mov	r1, #1
   14850:	strb	r1, [fp, #-256]	; 0xffffff00
   14854:	b	145b4 <__assert_fail@plt+0x227c>
   14858:	movw	r1, #38496	; 0x9660
   1485c:	add	r6, r6, #1
   14860:	movt	r1, #3
   14864:	str	r1, [fp, #-268]	; 0xfffffef4
   14868:	ldrb	r1, [r6]
   1486c:	cmp	r1, #114	; 0x72
   14870:	bls	145c4 <__assert_fail@plt+0x228c>
   14874:	b	148c8 <__assert_fail@plt+0x2590>
   14878:	mov	r1, #1
   1487c:	add	r6, r6, #1
   14880:	strb	r1, [fp, #-260]	; 0xfffffefc
   14884:	ldrb	r1, [r6]
   14888:	cmp	r1, #114	; 0x72
   1488c:	bls	145c4 <__assert_fail@plt+0x228c>
   14890:	b	148c8 <__assert_fail@plt+0x2590>
   14894:	mov	r1, #1
   14898:	add	r6, r6, #1
   1489c:	strb	r1, [fp, #-262]	; 0xfffffefa
   148a0:	ldrb	r1, [r6]
   148a4:	cmp	r1, #114	; 0x72
   148a8:	bls	145c4 <__assert_fail@plt+0x228c>
   148ac:	b	148c8 <__assert_fail@plt+0x2590>
   148b0:	mov	r1, #1
   148b4:	add	r6, r6, #1
   148b8:	strb	r1, [fp, #-257]	; 0xfffffeff
   148bc:	ldrb	r1, [r6]
   148c0:	cmp	r1, #114	; 0x72
   148c4:	bls	145c4 <__assert_fail@plt+0x228c>
   148c8:	movw	r2, #37592	; 0x92d8
   148cc:	mov	r6, sl
   148d0:	movw	sl, #39016	; 0x9868
   148d4:	movt	sl, #3
   148d8:	movt	r2, #3
   148dc:	ldr	r1, [r2]
   148e0:	ldr	r2, [sp, #124]	; 0x7c
   148e4:	str	r0, [sp, #104]	; 0x68
   148e8:	mov	r4, #1
   148ec:	mov	r0, r6
   148f0:	str	r1, [r2, r8, lsl #2]
   148f4:	add	r8, r8, #1
   148f8:	b	12fdc <__assert_fail@plt+0xca4>
   148fc:	cmp	r4, #0
   14900:	beq	14c24 <__assert_fail@plt+0x28ec>
   14904:	ldr	r0, [r3]
   14908:	movw	r2, #28350	; 0x6ebe
   1490c:	movt	r2, #2
   14910:	add	r1, r0, #1
   14914:	str	r1, [r3]
   14918:	ldr	r1, [sp, #88]	; 0x58
   1491c:	ldr	r4, [ip, r0, lsl #2]
   14920:	add	r0, r4, #1
   14924:	bl	16fe8 <__assert_fail@plt+0x4cb0>
   14928:	cmp	r0, #0
   1492c:	beq	16ce4 <__assert_fail@plt+0x49ac>
   14930:	ldrb	r1, [r0]
   14934:	cmp	r1, #46	; 0x2e
   14938:	bne	14960 <__assert_fail@plt+0x2628>
   1493c:	ldr	r1, [sp, #80]	; 0x50
   14940:	movw	r2, #28409	; 0x6ef9
   14944:	add	r0, r0, #1
   14948:	movt	r2, #2
   1494c:	bl	16fe8 <__assert_fail@plt+0x4cb0>
   14950:	ldr	r1, [fp, #-276]	; 0xfffffeec
   14954:	cmp	r1, #0
   14958:	bne	14994 <__assert_fail@plt+0x265c>
   1495c:	b	1496c <__assert_fail@plt+0x2634>
   14960:	ldr	r1, [fp, #-276]	; 0xfffffeec
   14964:	cmp	r1, #0
   14968:	bne	14994 <__assert_fail@plt+0x265c>
   1496c:	ldr	r1, [fp, #-280]	; 0xfffffee8
   14970:	cmp	r1, #0
   14974:	subne	r1, r1, #1
   14978:	strne	r1, [fp, #-280]	; 0xfffffee8
   1497c:	b	14994 <__assert_fail@plt+0x265c>
   14980:	add	r0, r0, #1
   14984:	b	14994 <__assert_fail@plt+0x265c>
   14988:	mov	r1, #1
   1498c:	strb	r1, [fp, #-256]	; 0xffffff00
   14990:	b	14980 <__assert_fail@plt+0x2648>
   14994:	ldrb	r1, [r0]
   14998:	cmp	r1, #114	; 0x72
   1499c:	bhi	16d04 <__assert_fail@plt+0x49cc>
   149a0:	add	r2, pc, #0
   149a4:	ldr	pc, [r2, r1, lsl #2]
   149a8:	andeq	r4, r1, r4, lsr #24
   149ac:	andeq	r6, r1, r4, lsl #26
   149b0:	andeq	r6, r1, r4, lsl #26
   149b4:	andeq	r6, r1, r4, lsl #26
   149b8:	andeq	r6, r1, r4, lsl #26
   149bc:	andeq	r6, r1, r4, lsl #26
   149c0:	andeq	r6, r1, r4, lsl #26
   149c4:	andeq	r6, r1, r4, lsl #26
   149c8:	andeq	r6, r1, r4, lsl #26
   149cc:	andeq	r6, r1, r4, lsl #26
   149d0:	andeq	r6, r1, r4, lsl #26
   149d4:	andeq	r6, r1, r4, lsl #26
   149d8:	andeq	r6, r1, r4, lsl #26
   149dc:	andeq	r6, r1, r4, lsl #26
   149e0:	andeq	r6, r1, r4, lsl #26
   149e4:	andeq	r6, r1, r4, lsl #26
   149e8:	andeq	r6, r1, r4, lsl #26
   149ec:	andeq	r6, r1, r4, lsl #26
   149f0:	andeq	r6, r1, r4, lsl #26
   149f4:	andeq	r6, r1, r4, lsl #26
   149f8:	andeq	r6, r1, r4, lsl #26
   149fc:	andeq	r6, r1, r4, lsl #26
   14a00:	andeq	r6, r1, r4, lsl #26
   14a04:	andeq	r6, r1, r4, lsl #26
   14a08:	andeq	r6, r1, r4, lsl #26
   14a0c:	andeq	r6, r1, r4, lsl #26
   14a10:	andeq	r6, r1, r4, lsl #26
   14a14:	andeq	r6, r1, r4, lsl #26
   14a18:	andeq	r6, r1, r4, lsl #26
   14a1c:	andeq	r6, r1, r4, lsl #26
   14a20:	andeq	r6, r1, r4, lsl #26
   14a24:	andeq	r6, r1, r4, lsl #26
   14a28:	andeq	r6, r1, r4, lsl #26
   14a2c:	andeq	r6, r1, r4, lsl #26
   14a30:	andeq	r6, r1, r4, lsl #26
   14a34:	andeq	r6, r1, r4, lsl #26
   14a38:	andeq	r6, r1, r4, lsl #26
   14a3c:	andeq	r6, r1, r4, lsl #26
   14a40:	andeq	r6, r1, r4, lsl #26
   14a44:	andeq	r6, r1, r4, lsl #26
   14a48:	andeq	r6, r1, r4, lsl #26
   14a4c:	andeq	r6, r1, r4, lsl #26
   14a50:	andeq	r6, r1, r4, lsl #26
   14a54:	andeq	r6, r1, r4, lsl #26
   14a58:	andeq	r6, r1, r4, lsl #26
   14a5c:	andeq	r6, r1, r4, lsl #26
   14a60:	andeq	r6, r1, r4, lsl #26
   14a64:	andeq	r6, r1, r4, lsl #26
   14a68:	andeq	r6, r1, r4, lsl #26
   14a6c:	andeq	r6, r1, r4, lsl #26
   14a70:	andeq	r6, r1, r4, lsl #26
   14a74:	andeq	r6, r1, r4, lsl #26
   14a78:	andeq	r6, r1, r4, lsl #26
   14a7c:	andeq	r6, r1, r4, lsl #26
   14a80:	andeq	r6, r1, r4, lsl #26
   14a84:	andeq	r6, r1, r4, lsl #26
   14a88:	andeq	r6, r1, r4, lsl #26
   14a8c:	andeq	r6, r1, r4, lsl #26
   14a90:	andeq	r6, r1, r4, lsl #26
   14a94:	andeq	r6, r1, r4, lsl #26
   14a98:	andeq	r6, r1, r4, lsl #26
   14a9c:	andeq	r6, r1, r4, lsl #26
   14aa0:	andeq	r6, r1, r4, lsl #26
   14aa4:	andeq	r6, r1, r4, lsl #26
   14aa8:	andeq	r6, r1, r4, lsl #26
   14aac:	andeq	r6, r1, r4, lsl #26
   14ab0:	andeq	r6, r1, r4, lsl #26
   14ab4:	andeq	r6, r1, r4, lsl #26
   14ab8:	andeq	r6, r1, r4, lsl #26
   14abc:	andeq	r6, r1, r4, lsl #26
   14ac0:	andeq	r6, r1, r4, lsl #26
   14ac4:	andeq	r6, r1, r4, lsl #26
   14ac8:	andeq	r6, r1, r4, lsl #26
   14acc:	andeq	r6, r1, r4, lsl #26
   14ad0:	andeq	r6, r1, r4, lsl #26
   14ad4:	andeq	r6, r1, r4, lsl #26
   14ad8:	andeq	r6, r1, r4, lsl #26
   14adc:	andeq	r4, r1, r4, ror fp
   14ae0:	andeq	r6, r1, r4, lsl #26
   14ae4:	andeq	r6, r1, r4, lsl #26
   14ae8:	andeq	r6, r1, r4, lsl #26
   14aec:	andeq	r6, r1, r4, lsl #26
   14af0:	andeq	r4, r1, ip, lsr #23
   14af4:	andeq	r6, r1, r4, lsl #26
   14af8:	andeq	r6, r1, r4, lsl #26
   14afc:	andeq	r6, r1, r4, lsl #26
   14b00:	andeq	r4, r1, r8, lsl #19
   14b04:	andeq	r6, r1, r4, lsl #26
   14b08:	andeq	r6, r1, r4, lsl #26
   14b0c:	andeq	r6, r1, r4, lsl #26
   14b10:	andeq	r6, r1, r4, lsl #26
   14b14:	andeq	r6, r1, r4, lsl #26
   14b18:	andeq	r6, r1, r4, lsl #26
   14b1c:	andeq	r6, r1, r4, lsl #26
   14b20:	andeq	r6, r1, r4, lsl #26
   14b24:	andeq	r6, r1, r4, lsl #26
   14b28:	andeq	r6, r1, r4, lsl #26
   14b2c:	andeq	r6, r1, r4, lsl #26
   14b30:	andeq	r4, r1, r4, lsl ip
   14b34:	andeq	r6, r1, r4, lsl #26
   14b38:			; <UNDEFINED> instruction: 0x00014bbc
   14b3c:	andeq	r6, r1, r4, lsl #26
   14b40:	ldrdeq	r4, [r1], -r0
   14b44:	andeq	r4, r1, r4, ror #23
   14b48:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b4c:	muleq	r1, r4, fp
   14b50:	andeq	r6, r1, r4, lsl #26
   14b54:	andeq	r6, r1, r4, lsl #26
   14b58:	andeq	r6, r1, r4, lsl #26
   14b5c:	andeq	r6, r1, r4, lsl #26
   14b60:	andeq	r4, r1, r4, lsl #24
   14b64:	andeq	r6, r1, r4, lsl #26
   14b68:	andeq	r6, r1, r4, lsl #26
   14b6c:	andeq	r6, r1, r4, lsl #26
   14b70:	andeq	r4, r1, r4, lsl #23
   14b74:	mov	r1, #1
   14b78:	add	r0, r0, #1
   14b7c:	strb	r1, [fp, #-258]	; 0xfffffefe
   14b80:	b	14994 <__assert_fail@plt+0x265c>
   14b84:	mov	r1, #1
   14b88:	add	r0, r0, #1
   14b8c:	strb	r1, [fp, #-257]	; 0xfffffeff
   14b90:	b	14994 <__assert_fail@plt+0x265c>
   14b94:	ldr	r1, [fp, #-272]	; 0xfffffef0
   14b98:	cmp	r1, #0
   14b9c:	bne	14980 <__assert_fail@plt+0x2648>
   14ba0:	str	r9, [fp, #-272]	; 0xfffffef0
   14ba4:	add	r0, r0, #1
   14ba8:	b	14994 <__assert_fail@plt+0x265c>
   14bac:	mov	r1, #1
   14bb0:	add	r0, r0, #1
   14bb4:	strb	r1, [fp, #-261]	; 0xfffffefb
   14bb8:	b	14994 <__assert_fail@plt+0x265c>
   14bbc:	movw	r1, #38240	; 0x9560
   14bc0:	add	r0, r0, #1
   14bc4:	movt	r1, #3
   14bc8:	str	r1, [fp, #-272]	; 0xfffffef0
   14bcc:	b	14994 <__assert_fail@plt+0x265c>
   14bd0:	movw	r1, #38496	; 0x9660
   14bd4:	add	r0, r0, #1
   14bd8:	movt	r1, #3
   14bdc:	str	r1, [fp, #-268]	; 0xfffffef4
   14be0:	b	14994 <__assert_fail@plt+0x265c>
   14be4:	mov	r1, #1
   14be8:	add	r0, r0, #1
   14bec:	strb	r1, [fp, #-260]	; 0xfffffefc
   14bf0:	b	14994 <__assert_fail@plt+0x265c>
   14bf4:	mov	r1, #1
   14bf8:	add	r0, r0, #1
   14bfc:	strb	r1, [fp, #-259]	; 0xfffffefd
   14c00:	b	14994 <__assert_fail@plt+0x265c>
   14c04:	mov	r1, #1
   14c08:	add	r0, r0, #1
   14c0c:	strb	r1, [fp, #-262]	; 0xfffffefa
   14c10:	b	14994 <__assert_fail@plt+0x265c>
   14c14:	mov	r1, #1
   14c18:	add	r0, r0, #1
   14c1c:	strb	r1, [fp, #-263]	; 0xfffffef9
   14c20:	b	14994 <__assert_fail@plt+0x265c>
   14c24:	mov	r0, #1
   14c28:	mov	r1, #40	; 0x28
   14c2c:	strb	r0, [fp, #-255]	; 0xffffff01
   14c30:	sub	r0, fp, #288	; 0x120
   14c34:	bl	23930 <__assert_fail@plt+0x115f8>
   14c38:	movw	r1, #39016	; 0x9868
   14c3c:	movt	r1, #3
   14c40:	add	r1, r1, #20
   14c44:	ldr	r3, [r1]
   14c48:	mov	r2, r1
   14c4c:	add	r1, r3, #36	; 0x24
   14c50:	cmp	r3, #0
   14c54:	bne	14c44 <__assert_fail@plt+0x290c>
   14c58:	mov	r1, #0
   14c5c:	str	r0, [r2]
   14c60:	mov	r4, #1
   14c64:	str	r1, [r0, #36]	; 0x24
   14c68:	mov	r0, #1
   14c6c:	str	r0, [sp, #104]	; 0x68
   14c70:	mov	r0, sl
   14c74:	movw	sl, #39016	; 0x9868
   14c78:	movt	sl, #3
   14c7c:	b	144ac <__assert_fail@plt+0x2174>
   14c80:	ldr	r0, [sp, #96]	; 0x60
   14c84:	cmp	r0, #0
   14c88:	beq	14da8 <__assert_fail@plt+0x2a70>
   14c8c:	cmp	r8, #0
   14c90:	bne	16d4c <__assert_fail@plt+0x4a14>
   14c94:	ldr	r0, [sp, #96]	; 0x60
   14c98:	movw	r1, #29726	; 0x741e
   14c9c:	mov	r9, r5
   14ca0:	movt	r1, #2
   14ca4:	bl	179bc <__assert_fail@plt+0x5684>
   14ca8:	ldr	r7, [sp, #124]	; 0x7c
   14cac:	cmp	r0, #0
   14cb0:	beq	16dc8 <__assert_fail@plt+0x4a90>
   14cb4:	add	r5, sp, #128	; 0x80
   14cb8:	mov	r4, r0
   14cbc:	mov	r0, r5
   14cc0:	bl	224f0 <__assert_fail@plt+0x101b8>
   14cc4:	mov	r0, r4
   14cc8:	mov	r1, r5
   14ccc:	bl	225a4 <__assert_fail@plt+0x1026c>
   14cd0:	cmp	r0, #0
   14cd4:	beq	16de4 <__assert_fail@plt+0x4aac>
   14cd8:	ldr	r1, [sp, #96]	; 0x60
   14cdc:	mov	r0, r4
   14ce0:	mov	sl, r6
   14ce4:	bl	17158 <__assert_fail@plt+0x4e20>
   14ce8:	ldr	r0, [sp, #128]	; 0x80
   14cec:	cmp	r0, #0
   14cf0:	beq	16df0 <__assert_fail@plt+0x4ab8>
   14cf4:	mov	r0, r7
   14cf8:	bl	1d88c <__assert_fail@plt+0xb554>
   14cfc:	ldr	r7, [sp, #128]	; 0x80
   14d00:	ldr	r8, [sp, #132]	; 0x84
   14d04:	movw	r4, #30454	; 0x76f6
   14d08:	mov	r6, #0
   14d0c:	movt	r4, #2
   14d10:	cmp	r6, r7
   14d14:	bcs	14d80 <__assert_fail@plt+0x2a48>
   14d18:	ldr	r5, [r8, r6, lsl #2]
   14d1c:	mov	r1, r4
   14d20:	mov	r0, r5
   14d24:	bl	11e28 <strcmp@plt>
   14d28:	cmp	r0, #0
   14d2c:	beq	16a6c <__assert_fail@plt+0x4734>
   14d30:	ldrb	r0, [r5]
   14d34:	add	r6, r6, #1
   14d38:	cmp	r0, #0
   14d3c:	bne	14d10 <__assert_fail@plt+0x29d8>
   14d40:	movw	r1, #28942	; 0x710e
   14d44:	mov	r0, #0
   14d48:	mov	r2, #5
   14d4c:	movt	r1, #2
   14d50:	bl	11f54 <dcgettext@plt>
   14d54:	ldr	r2, [sp, #96]	; 0x60
   14d58:	mov	r4, r0
   14d5c:	mov	r0, #0
   14d60:	mov	r1, #3
   14d64:	bl	219dc <__assert_fail@plt+0xf6a4>
   14d68:	mov	r3, r0
   14d6c:	str	r6, [sp]
   14d70:	mov	r0, #2
   14d74:	mov	r1, #0
   14d78:	mov	r2, r4
   14d7c:	bl	12080 <error@plt>
   14d80:	mov	r5, r9
   14d84:	ldr	r9, [sp, #60]	; 0x3c
   14d88:	mov	r6, sl
   14d8c:	movw	sl, #39016	; 0x9868
   14d90:	movt	sl, #3
   14d94:	ldr	r0, [sl, #20]
   14d98:	mov	r3, #0
   14d9c:	cmp	r0, #0
   14da0:	bne	14dc4 <__assert_fail@plt+0x2a8c>
   14da4:	b	14ed4 <__assert_fail@plt+0x2b9c>
   14da8:	mov	r7, r8
   14dac:	ldr	r9, [sp, #60]	; 0x3c
   14db0:	ldr	r8, [sp, #124]	; 0x7c
   14db4:	ldr	r0, [sl, #20]
   14db8:	mov	r3, #0
   14dbc:	cmp	r0, #0
   14dc0:	beq	14ed4 <__assert_fail@plt+0x2b9c>
   14dc4:	mov	r3, #0
   14dc8:	mov	r1, r0
   14dcc:	ldr	r2, [r1, #16]
   14dd0:	cmp	r2, #0
   14dd4:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14dd8:	ldr	r2, [r1, #20]
   14ddc:	cmp	r2, #0
   14de0:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14de4:	ldrb	r2, [r1, #24]
   14de8:	cmp	r2, #0
   14dec:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14df0:	ldrb	r2, [r1, #25]
   14df4:	cmp	r2, #0
   14df8:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14dfc:	ldrb	r2, [r1, #26]
   14e00:	cmp	r2, #0
   14e04:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14e08:	ldrb	r2, [r1, #28]
   14e0c:	cmp	r2, #0
   14e10:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14e14:	ldrb	r2, [r1, #29]
   14e18:	cmp	r2, #0
   14e1c:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14e20:	ldrb	r2, [r1, #30]
   14e24:	cmp	r2, #0
   14e28:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14e2c:	ldrb	r2, [r1, #32]
   14e30:	cmp	r2, #0
   14e34:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14e38:	ldrb	r2, [r1, #27]
   14e3c:	cmp	r2, #0
   14e40:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14e44:	ldrb	r2, [r1, #31]
   14e48:	cmp	r2, #0
   14e4c:	bne	14ea8 <__assert_fail@plt+0x2b70>
   14e50:	ldr	r2, [sp, #288]	; 0x120
   14e54:	str	r2, [r1, #16]
   14e58:	ldr	r2, [sp, #292]	; 0x124
   14e5c:	str	r2, [r1, #20]
   14e60:	ldrb	r2, [sp, #296]	; 0x128
   14e64:	strb	r2, [r1, #24]
   14e68:	ldrb	r2, [sp, #297]	; 0x129
   14e6c:	strb	r2, [r1, #25]
   14e70:	ldrb	r2, [sp, #302]	; 0x12e
   14e74:	strb	r2, [r1, #30]
   14e78:	ldrb	r2, [sp, #298]	; 0x12a
   14e7c:	strb	r2, [r1, #26]
   14e80:	ldrb	r2, [sp, #300]	; 0x12c
   14e84:	strb	r2, [r1, #28]
   14e88:	ldrb	r2, [sp, #301]	; 0x12d
   14e8c:	strb	r2, [r1, #29]
   14e90:	ldrb	r2, [sp, #304]	; 0x130
   14e94:	strb	r2, [r1, #32]
   14e98:	ldrb	r2, [sp, #299]	; 0x12b
   14e9c:	strb	r2, [r1, #27]
   14ea0:	ldrb	r2, [sp, #303]	; 0x12f
   14ea4:	strb	r2, [r1, #31]
   14ea8:	ldrb	r2, [r1, #27]
   14eac:	ldr	r1, [r1, #36]	; 0x24
   14eb0:	and	r3, r3, #1
   14eb4:	orrs	r3, r2, r3
   14eb8:	movwne	r3, #1
   14ebc:	cmp	r1, #0
   14ec0:	bne	14dcc <__assert_fail@plt+0x2a94>
   14ec4:	mov	r1, #0
   14ec8:	cmp	r0, #0
   14ecc:	str	r1, [sp, #72]	; 0x48
   14ed0:	bne	14f80 <__assert_fail@plt+0x2c48>
   14ed4:	ldrb	r0, [sp, #297]	; 0x129
   14ed8:	ldrb	r1, [sp, #296]	; 0x128
   14edc:	orr	r0, r1, r0
   14ee0:	ldrb	r1, [sp, #298]	; 0x12a
   14ee4:	orr	r0, r0, r1
   14ee8:	ldrb	r1, [sp, #300]	; 0x12c
   14eec:	orr	r0, r0, r1
   14ef0:	ldrb	r1, [sp, #301]	; 0x12d
   14ef4:	orr	r0, r0, r1
   14ef8:	ldrb	r1, [sp, #302]	; 0x12e
   14efc:	orr	r0, r0, r1
   14f00:	ldrb	r1, [sp, #304]	; 0x130
   14f04:	orr	r0, r0, r1
   14f08:	ldrb	r1, [sp, #299]	; 0x12b
   14f0c:	orrs	r0, r0, r1
   14f10:	bne	14f28 <__assert_fail@plt+0x2bf0>
   14f14:	ldr	r0, [sp, #288]	; 0x120
   14f18:	cmp	r0, #0
   14f1c:	ldreq	r0, [sp, #292]	; 0x124
   14f20:	cmpeq	r0, #0
   14f24:	beq	14fd8 <__assert_fail@plt+0x2ca0>
   14f28:	add	r0, sp, #272	; 0x110
   14f2c:	mov	r1, #40	; 0x28
   14f30:	mov	r4, r3
   14f34:	bl	23930 <__assert_fail@plt+0x115f8>
   14f38:	add	r1, sl, #20
   14f3c:	ldr	r3, [r1]
   14f40:	mov	r2, r1
   14f44:	add	r1, r3, #36	; 0x24
   14f48:	cmp	r3, #0
   14f4c:	bne	14f3c <__assert_fail@plt+0x2c04>
   14f50:	str	r0, [r2]
   14f54:	mov	r1, #0
   14f58:	mov	r3, r4
   14f5c:	str	r1, [r0, #36]	; 0x24
   14f60:	ldrb	r0, [sp, #299]	; 0x12b
   14f64:	mov	r1, #1
   14f68:	str	r1, [sp, #72]	; 0x48
   14f6c:	orrs	r3, r0, r4
   14f70:	ldr	r0, [sl, #20]
   14f74:	movwne	r3, #1
   14f78:	cmp	r0, #0
   14f7c:	beq	14fe0 <__assert_fail@plt+0x2ca8>
   14f80:	mov	r4, r3
   14f84:	ldrb	r1, [r0, #32]
   14f88:	ldrb	r2, [r0, #27]
   14f8c:	ldrb	r3, [r0, #28]
   14f90:	orr	r1, r2, r1
   14f94:	ldr	r2, [r0, #16]
   14f98:	cmp	r2, #0
   14f9c:	ldrb	r2, [r0, #26]
   14fa0:	movwne	r1, #1
   14fa4:	add	r2, r3, r2
   14fa8:	ldrb	r3, [r0, #29]
   14fac:	add	r2, r2, r3
   14fb0:	ldrb	r3, [r0, #30]
   14fb4:	add	r2, r2, r3
   14fb8:	uxtab	r1, r1, r2
   14fbc:	cmp	r1, #2
   14fc0:	bcs	16a4c <__assert_fail@plt+0x4714>
   14fc4:	ldr	r0, [r0, #36]	; 0x24
   14fc8:	cmp	r0, #0
   14fcc:	bne	14f84 <__assert_fail@plt+0x2c4c>
   14fd0:	mov	r3, r4
   14fd4:	b	14fe0 <__assert_fail@plt+0x2ca8>
   14fd8:	mov	r0, #0
   14fdc:	str	r0, [sp, #72]	; 0x48
   14fe0:	ldrb	r0, [sl, #5]
   14fe4:	str	r9, [sp, #60]	; 0x3c
   14fe8:	str	r5, [sp, #32]
   14fec:	cmp	r0, #1
   14ff0:	bne	15c60 <__assert_fail@plt+0x3928>
   14ff4:	cmp	r9, #0
   14ff8:	str	r3, [sp, #24]
   14ffc:	tsteq	r5, #255	; 0xff
   15000:	beq	1501c <__assert_fail@plt+0x2ce4>
   15004:	tst	r5, #255	; 0xff
   15008:	movw	r0, #37348	; 0x91e4
   1500c:	moveq	r5, #111	; 0x6f
   15010:	movt	r0, #3
   15014:	strb	r5, [r0, #16]!
   15018:	bl	17124 <__assert_fail@plt+0x4dec>
   1501c:	ldr	r0, [sp, #92]	; 0x5c
   15020:	cmp	r0, #0
   15024:	beq	15040 <__assert_fail@plt+0x2d08>
   15028:	movw	r1, #24692	; 0x6074
   1502c:	mov	r0, #3
   15030:	movt	r1, #2
   15034:	bl	12218 <setlocale@plt>
   15038:	cmp	r0, #0
   1503c:	bne	1506c <__assert_fail@plt+0x2d34>
   15040:	movw	r1, #28997	; 0x7145
   15044:	mov	r0, #0
   15048:	mov	r2, #5
   1504c:	movt	r1, #2
   15050:	bl	11f54 <dcgettext@plt>
   15054:	movw	r2, #32646	; 0x7f86
   15058:	mov	r3, r0
   1505c:	mov	r0, #0
   15060:	mov	r1, #0
   15064:	movt	r2, #2
   15068:	bl	12080 <error@plt>
   1506c:	ldrb	r0, [sl]
   15070:	str	r6, [sp, #12]
   15074:	cmp	r0, #0
   15078:	beq	150b8 <__assert_fail@plt+0x2d80>
   1507c:	movw	r1, #29018	; 0x715a
   15080:	mov	r0, #0
   15084:	mov	r2, #5
   15088:	movt	r1, #2
   1508c:	bl	11f54 <dcgettext@plt>
   15090:	mov	r5, r0
   15094:	mov	r0, #3
   15098:	mov	r1, #0
   1509c:	bl	12218 <setlocale@plt>
   150a0:	bl	21c88 <__assert_fail@plt+0xf950>
   150a4:	mov	r3, r0
   150a8:	mov	r0, #0
   150ac:	mov	r1, #0
   150b0:	mov	r2, r5
   150b4:	b	150e0 <__assert_fail@plt+0x2da8>
   150b8:	movw	r1, #29065	; 0x7189
   150bc:	mov	r0, #0
   150c0:	mov	r2, #5
   150c4:	movt	r1, #2
   150c8:	bl	11f54 <dcgettext@plt>
   150cc:	movw	r2, #32646	; 0x7f86
   150d0:	mov	r3, r0
   150d4:	mov	r0, #0
   150d8:	mov	r1, #0
   150dc:	movt	r2, #2
   150e0:	bl	12080 <error@plt>
   150e4:	ldrb	r0, [sp, #304]	; 0x130
   150e8:	ldr	r9, [sl, #20]
   150ec:	ldrb	r5, [sp, #303]	; 0x12f
   150f0:	ldrb	lr, [sp, #300]	; 0x12c
   150f4:	ldrb	r4, [sp, #298]	; 0x12a
   150f8:	ldr	sl, [sp, #288]	; 0x120
   150fc:	ldr	ip, [sp, #292]	; 0x124
   15100:	str	r0, [sp, #52]	; 0x34
   15104:	ldrb	r0, [sp, #302]	; 0x12e
   15108:	cmp	r9, #0
   1510c:	str	r0, [sp, #112]	; 0x70
   15110:	ldrb	r0, [sp, #301]	; 0x12d
   15114:	str	r0, [sp, #108]	; 0x6c
   15118:	ldrb	r0, [sp, #299]	; 0x12b
   1511c:	str	r0, [sp, #68]	; 0x44
   15120:	ldrb	r0, [sp, #297]	; 0x129
   15124:	str	r0, [sp, #96]	; 0x60
   15128:	ldrb	r0, [sp, #296]	; 0x128
   1512c:	str	r0, [sp, #92]	; 0x5c
   15130:	beq	156b4 <__assert_fail@plt+0x337c>
   15134:	sub	r0, fp, #208	; 0xd0
   15138:	str	r4, [sp, #104]	; 0x68
   1513c:	str	r8, [sp, #124]	; 0x7c
   15140:	ldr	r4, [sp, #52]	; 0x34
   15144:	ldr	r8, [sp, #68]	; 0x44
   15148:	str	lr, [sp, #100]	; 0x64
   1514c:	sub	lr, fp, #104	; 0x68
   15150:	mov	r1, sl
   15154:	str	r7, [sp, #64]	; 0x40
   15158:	orr	r0, r0, #3
   1515c:	str	r0, [sp, #48]	; 0x30
   15160:	sub	r0, fp, #240	; 0xf0
   15164:	orr	r0, r0, #1
   15168:	str	r0, [sp, #44]	; 0x2c
   1516c:	mov	r0, #1
   15170:	str	r0, [sp, #116]	; 0x74
   15174:	mov	r0, #0
   15178:	str	r0, [sp, #80]	; 0x50
   1517c:	mov	r0, #0
   15180:	str	r0, [sp, #76]	; 0x4c
   15184:	mov	r0, #0
   15188:	str	r0, [sp, #40]	; 0x28
   1518c:	mov	r0, #0
   15190:	str	r0, [sp, #36]	; 0x24
   15194:	mov	r0, ip
   15198:	str	r1, [sp, #84]	; 0x54
   1519c:	str	r0, [sp, #88]	; 0x58
   151a0:	ldrb	r1, [r9, #26]
   151a4:	ldrb	r0, [r9, #28]
   151a8:	orr	r1, r0, r1
   151ac:	tst	r1, #255	; 0xff
   151b0:	bne	151c0 <__assert_fail@plt+0x2e88>
   151b4:	ldrb	r1, [r9, #29]
   151b8:	cmp	r1, #0
   151bc:	beq	151e8 <__assert_fail@plt+0x2eb0>
   151c0:	ldr	r2, [sp, #76]	; 0x4c
   151c4:	cmp	r0, #0
   151c8:	clz	r1, r0
   151cc:	movwne	r0, #1
   151d0:	orr	r2, r2, r0
   151d4:	lsr	r0, r1, #5
   151d8:	ldr	r1, [sp, #80]	; 0x50
   151dc:	str	r2, [sp, #76]	; 0x4c
   151e0:	orr	r1, r1, r0
   151e4:	str	r1, [sp, #80]	; 0x50
   151e8:	ldrb	r0, [r9, #33]	; 0x21
   151ec:	cmp	r0, #0
   151f0:	beq	1534c <__assert_fail@plt+0x3014>
   151f4:	str	r8, [sp, #68]	; 0x44
   151f8:	mov	r8, r5
   151fc:	ldr	r5, [r9]
   15200:	ldr	r0, [r9, #8]
   15204:	mov	r1, #0
   15208:	mov	r2, lr
   1520c:	mov	sl, r7
   15210:	mov	r7, lr
   15214:	cmn	r5, #1
   15218:	str	r0, [sp, #56]	; 0x38
   1521c:	mov	r0, #43	; 0x2b
   15220:	addeq	r5, r5, #1
   15224:	strh	r0, [fp, #-240]	; 0xffffff10
   15228:	mov	r0, r5
   1522c:	bl	1f064 <__assert_fail@plt+0xcd2c>
   15230:	mov	r1, r0
   15234:	ldr	r0, [sp, #44]	; 0x2c
   15238:	mov	r2, #25
   1523c:	bl	1202c <__stpcpy_chk@plt>
   15240:	mov	r6, r0
   15244:	movw	r0, #27437	; 0x6b2d
   15248:	mov	r1, #0
   1524c:	mov	r2, r7
   15250:	movt	r0, #32
   15254:	str	r0, [fp, #-208]	; 0xffffff30
   15258:	add	r0, r5, #1
   1525c:	bl	1f064 <__assert_fail@plt+0xcd2c>
   15260:	mov	r1, r0
   15264:	ldr	r0, [sp, #48]	; 0x30
   15268:	mov	r2, #24
   1526c:	bl	1202c <__stpcpy_chk@plt>
   15270:	mov	r5, r0
   15274:	ldr	r0, [r9, #8]
   15278:	cmn	r0, #1
   1527c:	beq	152f0 <__assert_fail@plt+0x2fb8>
   15280:	str	r4, [sp, #52]	; 0x34
   15284:	ldr	r4, [sp, #56]	; 0x38
   15288:	movw	r0, #11552	; 0x2d20
   1528c:	mov	r1, #0
   15290:	mov	r2, r7
   15294:	strh	r0, [r6]
   15298:	mov	r0, #0
   1529c:	strb	r0, [r6, #2]!
   152a0:	add	sl, r4, #1
   152a4:	mov	r0, sl
   152a8:	bl	1f064 <__assert_fail@plt+0xcd2c>
   152ac:	mov	r1, r0
   152b0:	mov	r0, r6
   152b4:	bl	11f48 <stpcpy@plt>
   152b8:	mov	r0, #44	; 0x2c
   152bc:	mov	r1, #0
   152c0:	mov	r2, r7
   152c4:	strh	r0, [r5], #1
   152c8:	ldr	r0, [r9, #12]
   152cc:	cmn	r0, #1
   152d0:	addeq	sl, r4, #2
   152d4:	ldr	r4, [sp, #52]	; 0x34
   152d8:	mov	r0, sl
   152dc:	ldr	sl, [sp, #64]	; 0x40
   152e0:	bl	1f064 <__assert_fail@plt+0xcd2c>
   152e4:	mov	r1, r0
   152e8:	mov	r0, r5
   152ec:	bl	11f48 <stpcpy@plt>
   152f0:	movw	r1, #30456	; 0x76f8
   152f4:	mov	r0, #0
   152f8:	mov	r2, #5
   152fc:	movt	r1, #2
   15300:	bl	11f54 <dcgettext@plt>
   15304:	mov	r5, r0
   15308:	mov	r0, #0
   1530c:	sub	r1, fp, #240	; 0xf0
   15310:	bl	21c78 <__assert_fail@plt+0xf940>
   15314:	mov	r6, r0
   15318:	mov	r0, #1
   1531c:	sub	r1, fp, #208	; 0xd0
   15320:	bl	21c78 <__assert_fail@plt+0xf940>
   15324:	str	r0, [sp]
   15328:	mov	r0, #0
   1532c:	mov	r1, #0
   15330:	mov	r2, r5
   15334:	mov	r3, r6
   15338:	bl	12080 <error@plt>
   1533c:	mov	r5, r8
   15340:	ldr	r8, [sp, #68]	; 0x44
   15344:	mov	lr, r7
   15348:	mov	r7, sl
   1534c:	ldr	r1, [r9]
   15350:	mov	r0, #0
   15354:	cmn	r1, #1
   15358:	beq	15398 <__assert_fail@plt+0x3060>
   1535c:	ldr	r2, [r9, #8]
   15360:	cmp	r2, r1
   15364:	bcs	15398 <__assert_fail@plt+0x3060>
   15368:	movw	r1, #30501	; 0x7725
   1536c:	mov	r0, #0
   15370:	mov	r2, #5
   15374:	movt	r1, #2
   15378:	bl	11f54 <dcgettext@plt>
   1537c:	ldr	r3, [sp, #116]	; 0x74
   15380:	mov	r2, r0
   15384:	mov	r0, #0
   15388:	mov	r1, #0
   1538c:	bl	12080 <error@plt>
   15390:	sub	lr, fp, #104	; 0x68
   15394:	mov	r0, #1
   15398:	ldrb	r2, [r9, #26]
   1539c:	mov	r1, #1
   153a0:	cmp	r2, #0
   153a4:	bne	153c0 <__assert_fail@plt+0x3088>
   153a8:	ldrb	r2, [r9, #28]
   153ac:	cmp	r2, #0
   153b0:	bne	153c0 <__assert_fail@plt+0x3088>
   153b4:	ldrb	r2, [r9, #29]
   153b8:	cmp	r2, #0
   153bc:	beq	153dc <__assert_fail@plt+0x30a4>
   153c0:	ldr	r3, [r9, #8]
   153c4:	mov	r2, #0
   153c8:	cmp	r3, #0
   153cc:	beq	153f8 <__assert_fail@plt+0x30c0>
   153d0:	cmp	r0, #0
   153d4:	beq	1540c <__assert_fail@plt+0x30d4>
   153d8:	b	154a8 <__assert_fail@plt+0x3170>
   153dc:	ldrb	r1, [r9, #30]
   153e0:	cmp	r1, #0
   153e4:	movwne	r1, #1
   153e8:	ldr	r3, [r9, #8]
   153ec:	mov	r2, #0
   153f0:	cmp	r3, #0
   153f4:	bne	153d0 <__assert_fail@plt+0x3098>
   153f8:	ldr	r2, [r9, #12]
   153fc:	cmp	r2, #0
   15400:	movwne	r2, #1
   15404:	cmp	r0, #0
   15408:	bne	154a8 <__assert_fail@plt+0x3170>
   1540c:	movw	r0, #37348	; 0x91e4
   15410:	ldr	r3, [sp, #72]	; 0x48
   15414:	movt	r0, #3
   15418:	ldr	r0, [r0, #4]
   1541c:	subs	r0, r0, #256	; 0x100
   15420:	movwne	r0, #1
   15424:	orr	r0, r3, r0
   15428:	orrs	r0, r2, r0
   1542c:	bne	154a8 <__assert_fail@plt+0x3170>
   15430:	ldrb	r0, [r9, #24]
   15434:	cmp	r0, #0
   15438:	mov	r2, r0
   1543c:	movwne	r2, #1
   15440:	orr	r1, r1, r2
   15444:	cmp	r1, #1
   15448:	bne	1547c <__assert_fail@plt+0x3144>
   1544c:	cmp	r0, #0
   15450:	beq	15470 <__assert_fail@plt+0x3138>
   15454:	ldrb	r0, [r9, #25]
   15458:	cmp	r0, #0
   1545c:	bne	154a8 <__assert_fail@plt+0x3170>
   15460:	ldr	r0, [r9, #12]
   15464:	cmp	r0, #0
   15468:	bne	1547c <__assert_fail@plt+0x3144>
   1546c:	b	154a8 <__assert_fail@plt+0x3170>
   15470:	ldr	r0, [r9, #4]
   15474:	cmp	r0, #0
   15478:	beq	15454 <__assert_fail@plt+0x311c>
   1547c:	movw	r1, #30544	; 0x7750
   15480:	mov	r0, #0
   15484:	mov	r2, #5
   15488:	movt	r1, #2
   1548c:	bl	11f54 <dcgettext@plt>
   15490:	ldr	r3, [sp, #116]	; 0x74
   15494:	mov	r2, r0
   15498:	mov	r0, #0
   1549c:	mov	r1, #0
   154a0:	bl	12080 <error@plt>
   154a4:	sub	lr, fp, #104	; 0x68
   154a8:	ldr	r0, [sp, #72]	; 0x48
   154ac:	cmp	r0, #0
   154b0:	bne	15548 <__assert_fail@plt+0x3210>
   154b4:	ldrb	r0, [r9, #26]
   154b8:	cmp	r0, #0
   154bc:	bne	154d8 <__assert_fail@plt+0x31a0>
   154c0:	ldrb	r0, [r9, #28]
   154c4:	cmp	r0, #0
   154c8:	bne	154d8 <__assert_fail@plt+0x31a0>
   154cc:	ldrb	r0, [r9, #29]
   154d0:	cmp	r0, #0
   154d4:	beq	15548 <__assert_fail@plt+0x3210>
   154d8:	ldr	r0, [r9]
   154dc:	ldr	r1, [r9, #8]
   154e0:	adds	r2, r0, #1
   154e4:	addeq	r2, r0, #2
   154e8:	cmp	r1, r2
   154ec:	bcc	15548 <__assert_fail@plt+0x3210>
   154f0:	movw	r1, #30616	; 0x7798
   154f4:	mov	r0, #0
   154f8:	mov	r2, #5
   154fc:	movt	r1, #2
   15500:	bl	11f54 <dcgettext@plt>
   15504:	ldr	r3, [sp, #116]	; 0x74
   15508:	mov	r2, r0
   1550c:	mov	r0, #0
   15510:	mov	r1, #0
   15514:	bl	12080 <error@plt>
   15518:	ldrb	r0, [r9, #28]
   1551c:	ldr	r2, [sp, #36]	; 0x24
   15520:	sub	lr, fp, #104	; 0x68
   15524:	cmp	r0, #0
   15528:	clz	r1, r0
   1552c:	movwne	r0, #1
   15530:	orr	r2, r2, r0
   15534:	lsr	r0, r1, #5
   15538:	ldr	r1, [sp, #40]	; 0x28
   1553c:	str	r2, [sp, #36]	; 0x24
   15540:	orr	r1, r1, r0
   15544:	str	r1, [sp, #40]	; 0x28
   15548:	ldr	r2, [sp, #84]	; 0x54
   1554c:	ldr	r1, [sp, #88]	; 0x58
   15550:	mov	ip, #0
   15554:	mov	sl, #0
   15558:	cmp	r2, #0
   1555c:	beq	1556c <__assert_fail@plt+0x3234>
   15560:	ldr	r0, [r9, #16]
   15564:	subs	sl, r2, r0
   15568:	movne	sl, r2
   1556c:	mov	r6, r7
   15570:	cmp	r1, #0
   15574:	beq	15584 <__assert_fail@plt+0x324c>
   15578:	ldr	r0, [r9, #20]
   1557c:	subs	ip, r1, r0
   15580:	movne	ip, r1
   15584:	ldrb	r3, [r9, #27]
   15588:	ldr	r7, [sp, #108]	; 0x6c
   1558c:	ldrb	r2, [r9, #26]
   15590:	ldrb	r0, [r9, #31]
   15594:	ldrb	r1, [r9, #25]
   15598:	eor	r3, r3, #1
   1559c:	eor	r2, r2, #1
   155a0:	eor	r0, r0, #1
   155a4:	eor	r1, r1, #1
   155a8:	and	r8, r3, r8
   155ac:	ldrb	r3, [r9, #29]
   155b0:	and	r5, r0, r5
   155b4:	ldrb	r0, [r9, #32]
   155b8:	eor	r3, r3, #1
   155bc:	eor	r0, r0, #1
   155c0:	and	r7, r3, r7
   155c4:	ldrb	r3, [r9, #28]
   155c8:	and	r4, r0, r4
   155cc:	ldrb	r0, [r9, #24]
   155d0:	str	r7, [sp, #108]	; 0x6c
   155d4:	ldr	r7, [sp, #100]	; 0x64
   155d8:	eor	r3, r3, #1
   155dc:	eor	r0, r0, #1
   155e0:	and	r7, r3, r7
   155e4:	ldr	r3, [sp, #104]	; 0x68
   155e8:	str	r7, [sp, #100]	; 0x64
   155ec:	mov	r7, r6
   155f0:	and	r3, r2, r3
   155f4:	ldrb	r2, [r9, #30]
   155f8:	ldr	r9, [r9, #36]	; 0x24
   155fc:	str	r3, [sp, #104]	; 0x68
   15600:	ldr	r3, [sp, #112]	; 0x70
   15604:	eor	r2, r2, #1
   15608:	cmp	r9, #0
   1560c:	and	r3, r2, r3
   15610:	ldr	r2, [sp, #96]	; 0x60
   15614:	str	r3, [sp, #112]	; 0x70
   15618:	and	r2, r1, r2
   1561c:	ldr	r1, [sp, #92]	; 0x5c
   15620:	str	r2, [sp, #96]	; 0x60
   15624:	and	r1, r0, r1
   15628:	ldr	r0, [sp, #116]	; 0x74
   1562c:	str	r1, [sp, #92]	; 0x5c
   15630:	mov	r1, sl
   15634:	add	r0, r0, #1
   15638:	str	r0, [sp, #116]	; 0x74
   1563c:	mov	r0, ip
   15640:	bne	15198 <__assert_fail@plt+0x2e60>
   15644:	ldr	r0, [sp, #40]	; 0x28
   15648:	ldr	r3, [sp, #24]
   1564c:	str	r8, [sp, #68]	; 0x44
   15650:	str	r4, [sp, #52]	; 0x34
   15654:	str	r5, [sp, #116]	; 0x74
   15658:	tst	r0, #1
   1565c:	beq	15794 <__assert_fail@plt+0x345c>
   15660:	movw	r0, #37348	; 0x91e4
   15664:	movw	r9, #39016	; 0x9868
   15668:	ldr	r8, [sp, #124]	; 0x7c
   1566c:	ldr	lr, [sp, #100]	; 0x64
   15670:	mov	r2, #0
   15674:	movt	r0, #3
   15678:	movt	r9, #3
   1567c:	ldr	r0, [r0, #4]
   15680:	ldr	r1, [r9, #12]
   15684:	cmp	r0, #256	; 0x100
   15688:	bne	157b0 <__assert_fail@plt+0x3478>
   1568c:	cmp	r1, #256	; 0x100
   15690:	beq	1598c <__assert_fail@plt+0x3654>
   15694:	ldr	r0, [sp, #120]	; 0x78
   15698:	uxtb	r1, r1
   1569c:	mov	r2, #0
   156a0:	ldr	r0, [r0]
   156a4:	ldrb	r0, [r0, r1, lsl #1]
   156a8:	tst	r0, #1
   156ac:	bne	157b8 <__assert_fail@plt+0x3480>
   156b0:	b	15820 <__assert_fail@plt+0x34e8>
   156b4:	ldr	r3, [sp, #24]
   156b8:	movw	r9, #37984	; 0x9460
   156bc:	str	r5, [sp, #116]	; 0x74
   156c0:	mov	r6, #0
   156c4:	mov	r0, #0
   156c8:	mov	r2, #0
   156cc:	movt	r9, #3
   156d0:	cmp	r2, #0
   156d4:	bne	159a8 <__assert_fail@plt+0x3670>
   156d8:	orr	r0, r6, r0
   156dc:	tst	r0, #1
   156e0:	beq	159a8 <__assert_fail@plt+0x3670>
   156e4:	movw	r1, #30896	; 0x78b0
   156e8:	mov	r0, #0
   156ec:	mov	r2, #5
   156f0:	str	lr, [sp, #100]	; 0x64
   156f4:	str	ip, [sp, #124]	; 0x7c
   156f8:	str	r4, [sp, #104]	; 0x68
   156fc:	mov	r9, #0
   15700:	movt	r1, #2
   15704:	bl	11f54 <dcgettext@plt>
   15708:	movw	r5, #39016	; 0x9868
   1570c:	movw	r1, #37348	; 0x91e4
   15710:	mov	r4, r0
   15714:	movt	r1, #3
   15718:	movt	r5, #3
   1571c:	ldrb	r0, [r5, #2]
   15720:	ldr	r1, [r1, #4]
   15724:	cmp	r1, r0
   15728:	beq	15748 <__assert_fail@plt+0x3410>
   1572c:	movw	r1, #30947	; 0x78e3
   15730:	mov	r0, #0
   15734:	mov	r2, #5
   15738:	movt	r1, #2
   1573c:	bl	11f54 <dcgettext@plt>
   15740:	str	r0, [sp, #16]
   15744:	ldrb	r0, [r5, #2]
   15748:	strb	r9, [fp, #-243]	; 0xffffff0d
   1574c:	strb	r0, [fp, #-244]	; 0xffffff0c
   15750:	sub	r0, fp, #244	; 0xf4
   15754:	bl	21c88 <__assert_fail@plt+0xf950>
   15758:	ldr	r3, [sp, #16]
   1575c:	str	r0, [sp]
   15760:	mov	r0, #0
   15764:	mov	r1, #0
   15768:	mov	r2, r4
   1576c:	bl	12080 <error@plt>
   15770:	ldr	r3, [sp, #24]
   15774:	ldr	r4, [sp, #104]	; 0x68
   15778:	ldr	ip, [sp, #124]	; 0x7c
   1577c:	ldr	lr, [sp, #100]	; 0x64
   15780:	movw	r9, #37984	; 0x9460
   15784:	tst	r6, #1
   15788:	movt	r9, #3
   1578c:	bne	159b0 <__assert_fail@plt+0x3678>
   15790:	b	15a14 <__assert_fail@plt+0x36dc>
   15794:	ldr	r0, [sp, #36]	; 0x24
   15798:	ldr	r8, [sp, #124]	; 0x7c
   1579c:	ldr	lr, [sp, #100]	; 0x64
   157a0:	mov	r2, #0
   157a4:	tst	r0, #1
   157a8:	bne	15820 <__assert_fail@plt+0x34e8>
   157ac:	b	1598c <__assert_fail@plt+0x3654>
   157b0:	cmp	r0, r1
   157b4:	bne	15864 <__assert_fail@plt+0x352c>
   157b8:	movw	r1, #30661	; 0x77c5
   157bc:	mov	r0, #0
   157c0:	mov	r2, #5
   157c4:	mov	r6, ip
   157c8:	mov	r9, lr
   157cc:	movt	r1, #2
   157d0:	bl	11f54 <dcgettext@plt>
   157d4:	mov	r8, r0
   157d8:	mov	r0, #0
   157dc:	strb	r0, [fp, #-239]	; 0xffffff11
   157e0:	movw	r0, #39016	; 0x9868
   157e4:	movt	r0, #3
   157e8:	ldr	r0, [r0, #12]
   157ec:	strb	r0, [fp, #-240]	; 0xffffff10
   157f0:	sub	r0, fp, #240	; 0xf0
   157f4:	bl	21c88 <__assert_fail@plt+0xf950>
   157f8:	mov	r2, r8
   157fc:	ldr	r8, [sp, #124]	; 0x7c
   15800:	mov	r3, r0
   15804:	mov	r0, #0
   15808:	mov	r1, #0
   1580c:	bl	12080 <error@plt>
   15810:	ldr	r3, [sp, #24]
   15814:	mov	lr, r9
   15818:	mov	ip, r6
   1581c:	mov	r2, #1
   15820:	movw	r0, #37348	; 0x91e4
   15824:	movt	r0, #3
   15828:	ldr	r0, [r0, #4]
   1582c:	cmp	r0, #256	; 0x100
   15830:	bne	15864 <__assert_fail@plt+0x352c>
   15834:	movw	r5, #39016	; 0x9868
   15838:	movt	r5, #3
   1583c:	ldr	r0, [r5, #12]
   15840:	cmp	r0, #256	; 0x100
   15844:	beq	1598c <__assert_fail@plt+0x3654>
   15848:	ldr	r1, [sp, #120]	; 0x78
   1584c:	ldrb	r0, [r5, #2]
   15850:	ldr	r1, [r1]
   15854:	ldrb	r0, [r1, r0, lsl #1]
   15858:	tst	r0, #1
   1585c:	bne	15878 <__assert_fail@plt+0x3540>
   15860:	b	1598c <__assert_fail@plt+0x3654>
   15864:	movw	r5, #39016	; 0x9868
   15868:	movt	r5, #3
   1586c:	ldrb	r1, [r5, #2]
   15870:	cmp	r0, r1
   15874:	bne	158ec <__assert_fail@plt+0x35b4>
   15878:	movw	r1, #30723	; 0x7803
   1587c:	mov	r0, #0
   15880:	mov	r2, #5
   15884:	mov	r6, ip
   15888:	mov	r9, lr
   1588c:	movt	r1, #2
   15890:	bl	11f54 <dcgettext@plt>
   15894:	mov	r4, r0
   15898:	mov	r0, #0
   1589c:	strb	r0, [fp, #-103]	; 0xffffff99
   158a0:	ldrb	r0, [r5, #2]
   158a4:	strb	r0, [fp, #-104]	; 0xffffff98
   158a8:	sub	r0, fp, #104	; 0x68
   158ac:	bl	21c88 <__assert_fail@plt+0xf950>
   158b0:	mov	r3, r0
   158b4:	mov	r0, #0
   158b8:	mov	r1, #0
   158bc:	mov	r2, r4
   158c0:	bl	12080 <error@plt>
   158c4:	ldr	r0, [sp, #80]	; 0x50
   158c8:	ldr	r3, [sp, #24]
   158cc:	ldr	r4, [sp, #104]	; 0x68
   158d0:	mov	lr, r9
   158d4:	movw	r9, #37984	; 0x9460
   158d8:	mov	ip, r6
   158dc:	movt	r9, #3
   158e0:	tst	r0, #1
   158e4:	bne	159b0 <__assert_fail@plt+0x3678>
   158e8:	b	15a14 <__assert_fail@plt+0x36dc>
   158ec:	cmp	r0, #45	; 0x2d
   158f0:	bne	15904 <__assert_fail@plt+0x35cc>
   158f4:	movw	r1, #30783	; 0x783f
   158f8:	mov	r8, #0
   158fc:	movt	r1, #2
   15900:	b	1592c <__assert_fail@plt+0x35f4>
   15904:	ldr	r1, [sp, #36]	; 0x24
   15908:	subs	r0, r0, #43	; 0x2b
   1590c:	movwne	r0, #1
   15910:	mvn	r1, r1
   15914:	orr	r0, r1, r0
   15918:	tst	r0, #1
   1591c:	bne	1598c <__assert_fail@plt+0x3654>
   15920:	movw	r1, #30840	; 0x7878
   15924:	mov	r8, #0
   15928:	movt	r1, #2
   1592c:	str	r2, [sp, #120]	; 0x78
   15930:	mov	r0, #0
   15934:	mov	r2, #5
   15938:	mov	r4, ip
   1593c:	mov	r6, lr
   15940:	bl	11f54 <dcgettext@plt>
   15944:	mov	r9, r0
   15948:	movw	r0, #37348	; 0x91e4
   1594c:	strb	r8, [fp, #-103]	; 0xffffff99
   15950:	ldr	r8, [sp, #124]	; 0x7c
   15954:	movt	r0, #3
   15958:	ldr	r0, [r0, #4]
   1595c:	strb	r0, [fp, #-104]	; 0xffffff98
   15960:	sub	r0, fp, #104	; 0x68
   15964:	bl	21c88 <__assert_fail@plt+0xf950>
   15968:	mov	r3, r0
   1596c:	mov	r0, #0
   15970:	mov	r1, #0
   15974:	mov	r2, r9
   15978:	bl	12080 <error@plt>
   1597c:	ldr	r2, [sp, #120]	; 0x78
   15980:	ldr	r3, [sp, #24]
   15984:	mov	lr, r6
   15988:	mov	ip, r4
   1598c:	ldr	r4, [sp, #104]	; 0x68
   15990:	ldr	r6, [sp, #80]	; 0x50
   15994:	ldr	r0, [sp, #76]	; 0x4c
   15998:	movw	r9, #37984	; 0x9460
   1599c:	movt	r9, #3
   159a0:	cmp	r2, #0
   159a4:	beq	156d8 <__assert_fail@plt+0x33a0>
   159a8:	tst	r6, #1
   159ac:	beq	15a14 <__assert_fail@plt+0x36dc>
   159b0:	movw	r0, #39016	; 0x9868
   159b4:	movt	r0, #3
   159b8:	ldrb	r0, [r0, #3]
   159bc:	cmp	r0, #1
   159c0:	bne	15a14 <__assert_fail@plt+0x36dc>
   159c4:	movw	r1, #30953	; 0x78e9
   159c8:	mov	r0, #0
   159cc:	mov	r2, #5
   159d0:	mov	r5, sl
   159d4:	mov	sl, r4
   159d8:	mov	r4, r9
   159dc:	mov	r6, ip
   159e0:	mov	r9, lr
   159e4:	movt	r1, #2
   159e8:	bl	11f54 <dcgettext@plt>
   159ec:	mov	r2, r0
   159f0:	mov	r0, #0
   159f4:	mov	r1, #0
   159f8:	bl	12080 <error@plt>
   159fc:	ldr	r3, [sp, #24]
   15a00:	mov	lr, r9
   15a04:	mov	r9, r4
   15a08:	mov	r4, sl
   15a0c:	mov	ip, r6
   15a10:	mov	sl, r5
   15a14:	ldr	r0, [sp, #96]	; 0x60
   15a18:	ldr	r1, [sp, #92]	; 0x5c
   15a1c:	cmp	ip, #0
   15a20:	cmpeq	sl, #0
   15a24:	orr	r0, r1, r0
   15a28:	beq	15a5c <__assert_fail@plt+0x3724>
   15a2c:	movw	r1, #39016	; 0x9868
   15a30:	movt	r1, #3
   15a34:	mov	r2, r1
   15a38:	ldrb	r1, [r1, #6]
   15a3c:	ldrb	r2, [r2, #7]
   15a40:	tst	r0, #255	; 0xff
   15a44:	beq	15aec <__assert_fail@plt+0x37b4>
   15a48:	mov	r0, #98	; 0x62
   15a4c:	strb	r0, [fp, #-208]	; 0xffffff30
   15a50:	sub	r0, fp, #208	; 0xd0
   15a54:	add	r0, r0, #1
   15a58:	b	15af0 <__assert_fail@plt+0x37b8>
   15a5c:	ldr	r1, [sp, #52]	; 0x34
   15a60:	ldr	r2, [sp, #112]	; 0x70
   15a64:	orr	r1, r2, r1
   15a68:	ldr	r2, [sp, #108]	; 0x6c
   15a6c:	orr	r1, r1, r2
   15a70:	ldr	r2, [sp, #68]	; 0x44
   15a74:	orr	r1, r1, lr
   15a78:	orr	r1, r1, r2
   15a7c:	orr	r1, r1, r4
   15a80:	orr	r1, r1, r0
   15a84:	tst	r1, #255	; 0xff
   15a88:	bne	15a2c <__assert_fail@plt+0x36f4>
   15a8c:	ldr	r1, [sp, #116]	; 0x74
   15a90:	tst	r1, #255	; 0xff
   15a94:	beq	15c4c <__assert_fail@plt+0x3914>
   15a98:	movw	r5, #39016	; 0x9868
   15a9c:	movt	r5, #3
   15aa0:	ldrb	r1, [r5, #6]
   15aa4:	cmp	r1, #0
   15aa8:	beq	15ac4 <__assert_fail@plt+0x378c>
   15aac:	ldr	r0, [r5, #20]
   15ab0:	cmp	r0, #0
   15ab4:	beq	15c4c <__assert_fail@plt+0x3914>
   15ab8:	sub	r0, fp, #208	; 0xd0
   15abc:	mov	r5, r0
   15ac0:	b	15b80 <__assert_fail@plt+0x3848>
   15ac4:	ldrb	r1, [r5, #7]
   15ac8:	ldr	r2, [r5, #20]
   15acc:	cmp	r1, #1
   15ad0:	bne	15c14 <__assert_fail@plt+0x38dc>
   15ad4:	cmp	r2, #0
   15ad8:	beq	15c14 <__assert_fail@plt+0x38dc>
   15adc:	mov	r1, #0
   15ae0:	mov	r2, #1
   15ae4:	tst	r0, #255	; 0xff
   15ae8:	bne	15a48 <__assert_fail@plt+0x3710>
   15aec:	sub	r0, fp, #208	; 0xd0
   15af0:	movw	r3, #38240	; 0x9560
   15af4:	sub	r5, fp, #208	; 0xd0
   15af8:	movt	r3, #3
   15afc:	cmp	sl, r3
   15b00:	moveq	r3, #100	; 0x64
   15b04:	strbeq	r3, [r0], #1
   15b08:	cmp	ip, #0
   15b0c:	movne	r3, #102	; 0x66
   15b10:	strbne	r3, [r0], #1
   15b14:	tst	lr, #255	; 0xff
   15b18:	movne	r3, #103	; 0x67
   15b1c:	strbne	r3, [r0], #1
   15b20:	ldr	r3, [sp, #108]	; 0x6c
   15b24:	tst	r3, #255	; 0xff
   15b28:	movne	r3, #104	; 0x68
   15b2c:	strbne	r3, [r0], #1
   15b30:	cmp	sl, r9
   15b34:	moveq	r3, #105	; 0x69
   15b38:	strbeq	r3, [r0], #1
   15b3c:	ldr	r3, [sp, #112]	; 0x70
   15b40:	tst	r3, #255	; 0xff
   15b44:	movne	r3, #77	; 0x4d
   15b48:	strbne	r3, [r0], #1
   15b4c:	tst	r4, #255	; 0xff
   15b50:	movne	r3, #110	; 0x6e
   15b54:	strbne	r3, [r0], #1
   15b58:	ldr	r3, [sp, #68]	; 0x44
   15b5c:	tst	r3, #255	; 0xff
   15b60:	movne	r3, #82	; 0x52
   15b64:	strbne	r3, [r0], #1
   15b68:	ldr	r3, [sp, #116]	; 0x74
   15b6c:	tst	r3, #255	; 0xff
   15b70:	beq	15b88 <__assert_fail@plt+0x3850>
   15b74:	orr	r1, r2, r1
   15b78:	eors	r1, r1, #1
   15b7c:	bne	15b88 <__assert_fail@plt+0x3850>
   15b80:	mov	r1, #114	; 0x72
   15b84:	strb	r1, [r0], #1
   15b88:	ldr	r1, [sp, #52]	; 0x34
   15b8c:	tst	r1, #255	; 0xff
   15b90:	movne	r1, #86	; 0x56
   15b94:	strbne	r1, [r0], #1
   15b98:	mov	r1, #0
   15b9c:	strb	r1, [r0]
   15ba0:	mov	r0, r5
   15ba4:	bl	12140 <strlen@plt>
   15ba8:	movw	r1, #31023	; 0x792f
   15bac:	movw	r2, #31047	; 0x7947
   15bb0:	mov	r3, r0
   15bb4:	mov	r0, #5
   15bb8:	str	r0, [sp]
   15bbc:	movt	r1, #2
   15bc0:	movt	r2, #2
   15bc4:	mov	r0, #0
   15bc8:	bl	1232c <dcngettext@plt>
   15bcc:	mov	r2, r0
   15bd0:	mov	r0, #0
   15bd4:	mov	r1, #0
   15bd8:	mov	r3, r5
   15bdc:	bl	12080 <error@plt>
   15be0:	ldr	r0, [sp, #116]	; 0x74
   15be4:	ldr	r3, [sp, #24]
   15be8:	tst	r0, #255	; 0xff
   15bec:	beq	15c4c <__assert_fail@plt+0x3914>
   15bf0:	movw	r0, #39016	; 0x9868
   15bf4:	movt	r0, #3
   15bf8:	ldrb	r0, [r0, #6]
   15bfc:	cmp	r0, #0
   15c00:	bne	15c4c <__assert_fail@plt+0x3914>
   15c04:	movw	r0, #39016	; 0x9868
   15c08:	movt	r0, #3
   15c0c:	ldr	r2, [r0, #20]
   15c10:	ldrb	r1, [r0, #7]
   15c14:	cmp	r2, #0
   15c18:	beq	15c4c <__assert_fail@plt+0x3914>
   15c1c:	cmp	r1, #0
   15c20:	bne	15c4c <__assert_fail@plt+0x3914>
   15c24:	movw	r1, #31073	; 0x7961
   15c28:	mov	r0, #0
   15c2c:	mov	r2, #5
   15c30:	movt	r1, #2
   15c34:	bl	11f54 <dcgettext@plt>
   15c38:	mov	r2, r0
   15c3c:	mov	r0, #0
   15c40:	mov	r1, #0
   15c44:	bl	12080 <error@plt>
   15c48:	ldr	r3, [sp, #24]
   15c4c:	ldr	r5, [sp, #32]
   15c50:	ldr	r6, [sp, #12]
   15c54:	ldr	r9, [sp, #60]	; 0x3c
   15c58:	movw	sl, #39016	; 0x9868
   15c5c:	movt	sl, #3
   15c60:	ldrb	r0, [sp, #303]	; 0x12f
   15c64:	cmp	r3, #0
   15c68:	strb	r0, [sl, #9]
   15c6c:	beq	15cc4 <__assert_fail@plt+0x398c>
   15c70:	ldr	r0, [sp, #28]
   15c74:	mov	r1, #16
   15c78:	bl	21ca0 <__assert_fail@plt+0xf968>
   15c7c:	cmp	r0, #0
   15c80:	beq	16e5c <__assert_fail@plt+0x4b24>
   15c84:	sub	r1, fp, #208	; 0xd0
   15c88:	mov	r2, #16
   15c8c:	mov	r4, r0
   15c90:	bl	21e24 <__assert_fail@plt+0xfaec>
   15c94:	mov	r0, r4
   15c98:	bl	21f84 <__assert_fail@plt+0xfc4c>
   15c9c:	cmp	r0, #0
   15ca0:	bne	16e88 <__assert_fail@plt+0x4b50>
   15ca4:	movw	r4, #38856	; 0x97c8
   15ca8:	movt	r4, #3
   15cac:	mov	r0, r4
   15cb0:	bl	1c460 <__assert_fail@plt+0xa128>
   15cb4:	sub	r0, fp, #208	; 0xd0
   15cb8:	mov	r1, #16
   15cbc:	mov	r2, r4
   15cc0:	bl	1d0c0 <__assert_fail@plt+0xad88>
   15cc4:	ldr	r0, [sl, #24]
   15cc8:	cmp	r0, #0
   15ccc:	beq	15f14 <__assert_fail@plt+0x3bdc>
   15cd0:	cmp	r7, #0
   15cd4:	beq	16998 <__assert_fail@plt+0x4660>
   15cd8:	ldr	r0, [sl, #28]
   15cdc:	cmp	r0, #0
   15ce0:	beq	15d00 <__assert_fail@plt+0x39c8>
   15ce4:	movw	r1, #37348	; 0x91e4
   15ce8:	movt	r1, #3
   15cec:	ldr	r1, [r1, #8]
   15cf0:	add	r1, r1, r1, lsl #3
   15cf4:	cmp	r0, r1, lsl #1
   15cf8:	lslls	r0, r1, #1
   15cfc:	str	r0, [sl, #28]
   15d00:	tst	r5, #255	; 0xff
   15d04:	beq	15f48 <__assert_fail@plt+0x3c10>
   15d08:	cmp	r7, #2
   15d0c:	bcs	16e0c <__assert_fail@plt+0x4ad4>
   15d10:	cmp	r9, #0
   15d14:	bne	16e4c <__assert_fail@plt+0x4b14>
   15d18:	ldr	r9, [r8]
   15d1c:	movw	r1, #29726	; 0x741e
   15d20:	movt	r1, #2
   15d24:	mov	r0, r9
   15d28:	bl	179bc <__assert_fail@plt+0x5684>
   15d2c:	cmp	r0, #0
   15d30:	str	r0, [sp, #108]	; 0x6c
   15d34:	beq	16ab4 <__assert_fail@plt+0x477c>
   15d38:	movw	r0, #37348	; 0x91e4
   15d3c:	ldr	r7, [sl, #20]
   15d40:	movt	r0, #3
   15d44:	ldr	r1, [r0, #12]
   15d48:	ldr	r0, [sl, #28]
   15d4c:	cmp	r1, r0
   15d50:	movhi	r0, r1
   15d54:	ldrb	r1, [sl, #7]
   15d58:	eor	r5, r1, #1
   15d5c:	and	r1, r0, #15
   15d60:	rsb	r1, r1, #16
   15d64:	add	r4, r1, r0
   15d68:	mov	r0, r4
   15d6c:	bl	24aec <__assert_fail@plt+0x127b4>
   15d70:	cmp	r0, #0
   15d74:	bne	15d88 <__assert_fail@plt+0x3a50>
   15d78:	lsr	r0, r4, #1
   15d7c:	cmp	r4, #35	; 0x23
   15d80:	bhi	15d5c <__assert_fail@plt+0x3a24>
   15d84:	b	16aa4 <__assert_fail@plt+0x476c>
   15d88:	mov	r1, #16
   15d8c:	mov	sl, #0
   15d90:	mov	r2, r9
   15d94:	str	r1, [fp, #-188]	; 0xffffff44
   15d98:	ldr	r1, [sp, #108]	; 0x6c
   15d9c:	str	r0, [fp, #-208]	; 0xffffff30
   15da0:	sub	r0, fp, #208	; 0xd0
   15da4:	str	r4, [fp, #-196]	; 0xffffff3c
   15da8:	str	sl, [fp, #-200]	; 0xffffff38
   15dac:	str	sl, [fp, #-192]	; 0xffffff40
   15db0:	str	sl, [fp, #-204]	; 0xffffff34
   15db4:	strb	sl, [fp, #-184]	; 0xffffff48
   15db8:	str	sl, [fp, #-240]	; 0xffffff10
   15dbc:	bl	17c24 <__assert_fail@plt+0x58ec>
   15dc0:	cmp	r0, #0
   15dc4:	beq	16144 <__assert_fail@plt+0x3e0c>
   15dc8:	and	r5, r5, #1
   15dcc:	cmp	r7, #0
   15dd0:	str	r9, [sp, #112]	; 0x70
   15dd4:	beq	1602c <__assert_fail@plt+0x3cf4>
   15dd8:	mov	r0, #0
   15ddc:	mov	r8, #0
   15de0:	mov	sl, #0
   15de4:	mov	r7, #0
   15de8:	str	r0, [sp, #120]	; 0x78
   15dec:	mov	r0, #0
   15df0:	str	r0, [sp, #116]	; 0x74
   15df4:	ldr	r9, [fp, #-208]	; 0xffffff30
   15df8:	ldr	r4, [fp, #-196]	; 0xffffff3c
   15dfc:	str	sl, [sp, #124]	; 0x7c
   15e00:	ldr	sl, [fp, #-200]	; 0xffffff38
   15e04:	cmp	r7, #0
   15e08:	add	r6, r9, r4
   15e0c:	beq	15e24 <__assert_fail@plt+0x3aec>
   15e10:	sub	r1, r6, #16
   15e14:	sub	r0, fp, #240	; 0xf0
   15e18:	bl	18080 <__assert_fail@plt+0x5d48>
   15e1c:	cmp	r0, r5
   15e20:	bge	169cc <__assert_fail@plt+0x4694>
   15e24:	add	r0, r9, r4
   15e28:	ldr	r9, [sp, #112]	; 0x70
   15e2c:	str	r6, [sp, #104]	; 0x68
   15e30:	sub	r6, r6, sl, lsl #4
   15e34:	sub	r4, r0, #32
   15e38:	add	r0, r4, #16
   15e3c:	cmp	r6, r0
   15e40:	bcs	15e5c <__assert_fail@plt+0x3b24>
   15e44:	mov	r1, r4
   15e48:	bl	18080 <__assert_fail@plt+0x5d48>
   15e4c:	sub	r4, r4, #16
   15e50:	cmp	r0, r5
   15e54:	blt	15e38 <__assert_fail@plt+0x3b00>
   15e58:	b	16024 <__assert_fail@plt+0x3cec>
   15e5c:	ldr	r0, [sp, #120]	; 0x78
   15e60:	ldr	r2, [r4, #20]
   15e64:	adds	r0, r0, sl
   15e68:	str	r0, [sp, #120]	; 0x78
   15e6c:	ldr	r0, [sp, #116]	; 0x74
   15e70:	adc	r0, r0, #0
   15e74:	cmp	r7, r2
   15e78:	str	r0, [sp, #116]	; 0x74
   15e7c:	bcs	15e9c <__assert_fail@plt+0x3b64>
   15e80:	ldr	r0, [sp, #124]	; 0x7c
   15e84:	cmp	r8, r7, lsl #1
   15e88:	beq	15ea4 <__assert_fail@plt+0x3b6c>
   15e8c:	lsl	r7, r7, #1
   15e90:	cmp	r7, r2
   15e94:	bcc	15e84 <__assert_fail@plt+0x3b4c>
   15e98:	b	15ea8 <__assert_fail@plt+0x3b70>
   15e9c:	ldr	sl, [sp, #124]	; 0x7c
   15ea0:	b	15ec0 <__assert_fail@plt+0x3b88>
   15ea4:	mov	r7, r2
   15ea8:	bl	1d88c <__assert_fail@plt+0xb554>
   15eac:	mov	r0, r7
   15eb0:	bl	234d0 <__assert_fail@plt+0x11198>
   15eb4:	str	r0, [fp, #-240]	; 0xffffff10
   15eb8:	mov	sl, r0
   15ebc:	ldr	r2, [r4, #20]
   15ec0:	ldr	r1, [r4, #16]
   15ec4:	mov	r0, sl
   15ec8:	bl	11ec4 <memcpy@plt>
   15ecc:	ldr	r0, [r4, #20]
   15ed0:	mov	r2, r9
   15ed4:	str	r0, [fp, #-236]	; 0xffffff14
   15ed8:	ldr	r0, [r4, #16]
   15edc:	ldr	r1, [r4, #24]
   15ee0:	sub	r1, r1, r0
   15ee4:	add	r1, sl, r1
   15ee8:	str	r1, [fp, #-232]	; 0xffffff18
   15eec:	ldr	r1, [r4, #28]
   15ef0:	sub	r0, r1, r0
   15ef4:	ldr	r1, [sp, #108]	; 0x6c
   15ef8:	add	r0, sl, r0
   15efc:	str	r0, [fp, #-228]	; 0xffffff1c
   15f00:	sub	r0, fp, #208	; 0xd0
   15f04:	bl	17c24 <__assert_fail@plt+0x58ec>
   15f08:	cmp	r0, #0
   15f0c:	bne	15df4 <__assert_fail@plt+0x3abc>
   15f10:	b	16144 <__assert_fail@plt+0x3e0c>
   15f14:	movw	r0, #29118	; 0x71be
   15f18:	movt	r0, #2
   15f1c:	bl	120a4 <getenv@plt>
   15f20:	movw	r4, #27309	; 0x6aad
   15f24:	cmp	r0, #0
   15f28:	movt	r4, #2
   15f2c:	movne	r4, r0
   15f30:	ldr	r0, [sl, #36]	; 0x24
   15f34:	cmp	r0, #0
   15f38:	beq	1696c <__assert_fail@plt+0x4634>
   15f3c:	ldr	r0, [sl, #40]	; 0x28
   15f40:	mov	r1, #0
   15f44:	b	16984 <__assert_fail@plt+0x464c>
   15f48:	movw	r4, #30454	; 0x76f6
   15f4c:	mov	r9, r6
   15f50:	mov	r6, #0
   15f54:	movt	r4, #2
   15f58:	ldr	r5, [r8, r6, lsl #2]
   15f5c:	mov	r1, r4
   15f60:	mov	r0, r5
   15f64:	bl	11e28 <strcmp@plt>
   15f68:	cmp	r0, #0
   15f6c:	beq	15f84 <__assert_fail@plt+0x3c4c>
   15f70:	mov	r0, r5
   15f74:	mov	r1, #4
   15f78:	bl	122b4 <euidaccess@plt>
   15f7c:	cmp	r0, #0
   15f80:	bne	16aa8 <__assert_fail@plt+0x4770>
   15f84:	add	r6, r6, #1
   15f88:	cmp	r6, r7
   15f8c:	bcc	15f58 <__assert_fail@plt+0x3c20>
   15f90:	ldr	r0, [sp, #60]	; 0x3c
   15f94:	cmp	r0, #0
   15f98:	beq	15fd8 <__assert_fail@plt+0x3ca0>
   15f9c:	ldr	r0, [sp, #60]	; 0x3c
   15fa0:	movw	r1, #65	; 0x41
   15fa4:	movw	r2, #438	; 0x1b6
   15fa8:	movt	r1, #8
   15fac:	bl	1208c <open64@plt>
   15fb0:	cmn	r0, #1
   15fb4:	ble	16ec0 <__assert_fail@plt+0x4b88>
   15fb8:	mov	r4, r0
   15fbc:	cmp	r0, #1
   15fc0:	beq	15fd8 <__assert_fail@plt+0x3ca0>
   15fc4:	mov	r0, r4
   15fc8:	mov	r1, #1
   15fcc:	bl	11f84 <dup2@plt>
   15fd0:	mov	r0, r4
   15fd4:	bl	12320 <close@plt>
   15fd8:	tst	r9, #1
   15fdc:	beq	16234 <__assert_fail@plt+0x3efc>
   15fe0:	mov	r0, r7
   15fe4:	mov	r1, #8
   15fe8:	bl	238e4 <__assert_fail@plt+0x115ac>
   15fec:	ldr	r3, [sp, #60]	; 0x3c
   15ff0:	mov	r1, #0
   15ff4:	ldr	r2, [r8, r1, lsl #2]
   15ff8:	str	r2, [r0, r1, lsl #3]
   15ffc:	add	r1, r1, #1
   16000:	cmp	r1, r7
   16004:	bcc	15ff4 <__assert_fail@plt+0x3cbc>
   16008:	mov	r1, #0
   1600c:	mov	r2, r7
   16010:	bl	171d4 <__assert_fail@plt+0x4e9c>
   16014:	ldrb	r0, [sl, #4]
   16018:	cmp	r0, #1
   1601c:	beq	1693c <__assert_fail@plt+0x4604>
   16020:	b	16954 <__assert_fail@plt+0x461c>
   16024:	add	r5, r4, #32
   16028:	b	16154 <__assert_fail@plt+0x3e1c>
   1602c:	mov	r0, #0
   16030:	mov	sl, #0
   16034:	mov	r7, #0
   16038:	mov	r4, #0
   1603c:	str	r0, [sp, #116]	; 0x74
   16040:	str	r4, [sp, #120]	; 0x78
   16044:	ldr	r8, [fp, #-208]	; 0xffffff30
   16048:	ldr	r4, [fp, #-196]	; 0xffffff3c
   1604c:	ldr	r9, [fp, #-200]	; 0xffffff38
   16050:	cmp	r7, #0
   16054:	add	r6, r8, r4
   16058:	beq	16070 <__assert_fail@plt+0x3d38>
   1605c:	sub	r1, r6, #16
   16060:	sub	r0, fp, #240	; 0xf0
   16064:	bl	18080 <__assert_fail@plt+0x5d48>
   16068:	cmp	r0, r5
   1606c:	bge	169dc <__assert_fail@plt+0x46a4>
   16070:	add	r0, r8, r4
   16074:	str	sl, [sp, #124]	; 0x7c
   16078:	sub	sl, r6, r9, lsl #4
   1607c:	str	r6, [sp, #104]	; 0x68
   16080:	sub	r8, r0, #16
   16084:	cmp	sl, r8
   16088:	bcs	160ac <__assert_fail@plt+0x3d74>
   1608c:	sub	r4, r8, #16
   16090:	mov	r0, r8
   16094:	mov	r1, r4
   16098:	bl	18080 <__assert_fail@plt+0x5d48>
   1609c:	cmp	r0, r5
   160a0:	mov	r8, r4
   160a4:	blt	16084 <__assert_fail@plt+0x3d4c>
   160a8:	b	1614c <__assert_fail@plt+0x3e14>
   160ac:	ldr	r4, [sp, #120]	; 0x78
   160b0:	ldr	r0, [sp, #116]	; 0x74
   160b4:	ldr	r2, [r8, #4]
   160b8:	adds	r4, r4, r9
   160bc:	adc	r0, r0, #0
   160c0:	cmp	r7, r2
   160c4:	str	r0, [sp, #116]	; 0x74
   160c8:	bcs	160f0 <__assert_fail@plt+0x3db8>
   160cc:	ldr	r9, [sp, #112]	; 0x70
   160d0:	ldr	r0, [sp, #124]	; 0x7c
   160d4:	mov	r1, #0
   160d8:	cmp	r1, r7, lsl #1
   160dc:	beq	160fc <__assert_fail@plt+0x3dc4>
   160e0:	lsl	r7, r7, #1
   160e4:	cmp	r7, r2
   160e8:	bcc	160d8 <__assert_fail@plt+0x3da0>
   160ec:	b	16100 <__assert_fail@plt+0x3dc8>
   160f0:	ldr	r9, [sp, #112]	; 0x70
   160f4:	ldr	sl, [sp, #124]	; 0x7c
   160f8:	b	16118 <__assert_fail@plt+0x3de0>
   160fc:	mov	r7, r2
   16100:	bl	1d88c <__assert_fail@plt+0xb554>
   16104:	mov	r0, r7
   16108:	bl	234d0 <__assert_fail@plt+0x11198>
   1610c:	str	r0, [fp, #-240]	; 0xffffff10
   16110:	mov	sl, r0
   16114:	ldr	r2, [r8, #4]
   16118:	ldr	r1, [r8]
   1611c:	mov	r0, sl
   16120:	bl	11ec4 <memcpy@plt>
   16124:	ldr	r0, [r8, #4]
   16128:	ldr	r1, [sp, #108]	; 0x6c
   1612c:	mov	r2, r9
   16130:	str	r0, [fp, #-236]	; 0xffffff14
   16134:	sub	r0, fp, #208	; 0xd0
   16138:	bl	17c24 <__assert_fail@plt+0x58ec>
   1613c:	cmp	r0, #0
   16140:	bne	16040 <__assert_fail@plt+0x3d08>
   16144:	mov	r4, #0
   16148:	b	16210 <__assert_fail@plt+0x3ed8>
   1614c:	ldr	r9, [sp, #112]	; 0x70
   16150:	add	r5, r4, #16
   16154:	ldr	sl, [sp, #124]	; 0x7c
   16158:	ldr	r6, [sp, #104]	; 0x68
   1615c:	ldr	r0, [sp, #32]
   16160:	mov	r4, #1
   16164:	uxtb	r0, r0
   16168:	cmp	r0, #99	; 0x63
   1616c:	bne	16210 <__assert_fail@plt+0x3ed8>
   16170:	mov	r4, r6
   16174:	movw	r6, #37576	; 0x92c8
   16178:	movw	r1, #31134	; 0x799e
   1617c:	mov	r2, #5
   16180:	movt	r6, #3
   16184:	movt	r1, #2
   16188:	ldr	r0, [r6]
   1618c:	str	r0, [sp, #124]	; 0x7c
   16190:	mov	r0, #0
   16194:	bl	11f54 <dcgettext@plt>
   16198:	str	r0, [sp, #112]	; 0x70
   1619c:	ldr	r0, [sp, #120]	; 0x78
   161a0:	ldr	r2, [sp, #116]	; 0x74
   161a4:	sub	r8, r5, #16
   161a8:	sub	r1, r4, r8
   161ac:	adds	r0, r0, r1, asr #4
   161b0:	adc	r1, r2, r1, asr #31
   161b4:	movw	r2, #39108	; 0x98c4
   161b8:	movt	r2, #3
   161bc:	ldr	r7, [r2]
   161c0:	sub	r2, fp, #104	; 0x68
   161c4:	bl	1f064 <__assert_fail@plt+0xcd2c>
   161c8:	str	r0, [sp, #4]
   161cc:	ldr	r0, [sp, #124]	; 0x7c
   161d0:	ldr	r2, [sp, #112]	; 0x70
   161d4:	mov	r1, #1
   161d8:	mov	r3, r7
   161dc:	str	r9, [sp]
   161e0:	mov	r4, #1
   161e4:	bl	121c4 <__fprintf_chk@plt>
   161e8:	ldr	r7, [r6]
   161ec:	movw	r1, #31156	; 0x79b4
   161f0:	mov	r0, #0
   161f4:	mov	r2, #5
   161f8:	movt	r1, #2
   161fc:	bl	11f54 <dcgettext@plt>
   16200:	mov	r2, r0
   16204:	mov	r0, r8
   16208:	mov	r1, r7
   1620c:	bl	19460 <__assert_fail@plt+0x7128>
   16210:	ldr	r0, [sp, #108]	; 0x6c
   16214:	mov	r1, r9
   16218:	bl	17158 <__assert_fail@plt+0x4e20>
   1621c:	ldr	r0, [fp, #-208]	; 0xffffff30
   16220:	bl	1d88c <__assert_fail@plt+0xb554>
   16224:	mov	r0, sl
   16228:	bl	1d88c <__assert_fail@plt+0xb554>
   1622c:	mov	r0, r4
   16230:	bl	12128 <exit@plt>
   16234:	ldr	r0, [sp, #20]
   16238:	ldr	r9, [sp, #60]	; 0x3c
   1623c:	cmp	r0, #0
   16240:	bne	16254 <__assert_fail@plt+0x3f1c>
   16244:	mov	r0, #2
   16248:	bl	1f76c <__assert_fail@plt+0xd434>
   1624c:	cmp	r0, #8
   16250:	movcs	r0, #8
   16254:	mov	r1, #0
   16258:	mvn	r2, r0
   1625c:	vmov.f64	d9, #104	; 0x3f400000  0.750
   16260:	vmov.f64	d10, #64	; 0x3e000000  0.125
   16264:	vmov.i32	q6, #0	; 0x00000000
   16268:	str	r1, [fp, #-228]	; 0xffffff1c
   1626c:	movw	r1, #58254	; 0xe38e
   16270:	movt	r1, #65080	; 0xfe38
   16274:	cmp	r2, r1
   16278:	movhi	r1, r2
   1627c:	mov	r2, #2
   16280:	add	r1, r2, r1, lsl #1
   16284:	str	r1, [sp, #68]	; 0x44
   16288:	movw	r1, #7281	; 0x1c71
   1628c:	movt	r1, #455	; 0x1c7
   16290:	cmp	r0, r1
   16294:	movcc	r1, r0
   16298:	add	r0, r1, r1, lsl #3
   1629c:	str	r1, [sp, #80]	; 0x50
   162a0:	lsl	r0, r0, #4
   162a4:	str	r0, [sp, #76]	; 0x4c
   162a8:	sub	r0, fp, #208	; 0xd0
   162ac:	add	r2, r0, #48	; 0x30
   162b0:	str	r2, [sp, #56]	; 0x38
   162b4:	add	r2, r0, #32
   162b8:	orr	r0, r0, #4
   162bc:	str	r0, [sp, #92]	; 0x5c
   162c0:	lsl	r0, r1, #1
   162c4:	movw	r1, #29726	; 0x741e
   162c8:	str	r2, [sp, #96]	; 0x60
   162cc:	str	r0, [sp, #72]	; 0x48
   162d0:	mov	r0, #0
   162d4:	movt	r1, #2
   162d8:	str	r0, [sp, #100]	; 0x64
   162dc:	mov	r0, #0
   162e0:	str	r0, [sp, #108]	; 0x6c
   162e4:	ldr	r0, [r8]
   162e8:	str	r0, [sp, #104]	; 0x68
   162ec:	bl	179bc <__assert_fail@plt+0x5684>
   162f0:	cmp	r0, #0
   162f4:	str	r0, [sp, #112]	; 0x70
   162f8:	beq	16ea4 <__assert_fail@plt+0x4b6c>
   162fc:	ldr	r2, [sp, #80]	; 0x50
   16300:	mov	r3, #24
   16304:	cmp	r2, #2
   16308:	bcc	16328 <__assert_fail@plt+0x3ff0>
   1630c:	mov	r0, #1
   16310:	mov	r3, #16
   16314:	lsl	r1, r0, #1
   16318:	cmp	r2, r0, lsl #1
   1631c:	add	r3, r3, #16
   16320:	mov	r0, r1
   16324:	bhi	16314 <__assert_fail@plt+0x3fdc>
   16328:	orr	r0, r3, #1
   1632c:	str	r3, [sp, #84]	; 0x54
   16330:	str	r0, [sp, #116]	; 0x74
   16334:	ldr	r0, [fp, #-228]	; 0xffffff1c
   16338:	cmp	r0, #0
   1633c:	bne	165e0 <__assert_fail@plt+0x42a8>
   16340:	orr	r5, r3, #2
   16344:	mov	r6, #0
   16348:	str	r7, [sp, #64]	; 0x40
   1634c:	str	r8, [sp, #124]	; 0x7c
   16350:	cmp	r6, #0
   16354:	beq	1654c <__assert_fail@plt+0x4214>
   16358:	ldr	r4, [r8, r6, lsl #2]
   1635c:	movw	r1, #30454	; 0x76f6
   16360:	movt	r1, #2
   16364:	mov	r0, r4
   16368:	bl	11e28 <strcmp@plt>
   1636c:	cmp	r0, #0
   16370:	beq	16560 <__assert_fail@plt+0x4228>
   16374:	mov	r0, #3
   16378:	mov	r1, r4
   1637c:	sub	r2, fp, #208	; 0xd0
   16380:	bl	122f0 <__xstat64@plt>
   16384:	ldr	r3, [sp, #116]	; 0x74
   16388:	cmp	r0, #0
   1638c:	sub	r1, fp, #104	; 0x68
   16390:	bne	16d14 <__assert_fail@plt+0x49dc>
   16394:	ldr	r0, [fp, #-192]	; 0xffffff40
   16398:	and	r0, r0, #61440	; 0xf000
   1639c:	cmp	r0, #32768	; 0x8000
   163a0:	bne	164f0 <__assert_fail@plt+0x41b8>
   163a4:	ldr	r0, [sp, #56]	; 0x38
   163a8:	ldm	r0, {r4, r9}
   163ac:	ldr	r0, [sl, #60]	; 0x3c
   163b0:	cmp	r0, #0
   163b4:	bne	16510 <__assert_fail@plt+0x41d8>
   163b8:	ldr	r0, [sl, #28]
   163bc:	cmp	r0, #0
   163c0:	str	r0, [sl, #60]	; 0x3c
   163c4:	bne	16510 <__assert_fail@plt+0x41d8>
   163c8:	mov	r0, #2
   163cc:	mov	r7, r1
   163d0:	bl	11f90 <getrlimit64@plt>
   163d4:	mvn	r8, #0
   163d8:	cmp	r0, #0
   163dc:	bne	163f8 <__assert_fail@plt+0x40c0>
   163e0:	ldr	r8, [fp, #-104]	; 0xffffff98
   163e4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   163e8:	mvn	r2, #0
   163ec:	subs	r1, r8, r2
   163f0:	sbcs	r0, r0, #0
   163f4:	movcs	r8, r2
   163f8:	mov	r0, #9
   163fc:	mov	r1, r7
   16400:	bl	11f90 <getrlimit64@plt>
   16404:	cmp	r0, #0
   16408:	bne	16420 <__assert_fail@plt+0x40e8>
   1640c:	ldr	r0, [fp, #-104]	; 0xffffff98
   16410:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16414:	subs	r2, r0, r8
   16418:	sbcs	r1, r1, #0
   1641c:	movcc	r8, r0
   16420:	mov	r0, #5
   16424:	sub	r1, fp, #104	; 0x68
   16428:	bl	11f90 <getrlimit64@plt>
   1642c:	lsr	r8, r8, #1
   16430:	cmp	r0, #0
   16434:	bne	1646c <__assert_fail@plt+0x4134>
   16438:	ldr	r1, [fp, #-100]	; 0xffffff9c
   1643c:	ldr	r0, [fp, #-104]	; 0xffffff98
   16440:	lsr	r2, r1, #4
   16444:	lsr	r0, r0, #4
   16448:	lsl	r2, r2, #4
   1644c:	orr	r0, r0, r1, lsl #28
   16450:	sub	r2, r2, r1, lsr #4
   16454:	mov	r1, #15
   16458:	umull	r0, r1, r0, r1
   1645c:	add	r1, r1, r2
   16460:	subs	r2, r0, r8
   16464:	sbcs	r1, r1, #0
   16468:	movcc	r8, r0
   1646c:	bl	1f9e0 <__assert_fail@plt+0xd6a8>
   16470:	vmov.f64	d8, d0
   16474:	bl	1f958 <__assert_fail@plt+0xd620>
   16478:	vmul.f64	d17, d0, d10
   1647c:	vmul.f64	d16, d0, d9
   16480:	vmov	s2, r8
   16484:	vcvt.u32.f64	s0, d16
   16488:	vcmpe.f64	d8, d17
   1648c:	vcvt.f64.u32	d18, s2
   16490:	vmrs	APSR_nzcv, fpscr
   16494:	vcmpe.f64	d16, d18
   16498:	vmov	r1, s0
   1649c:	vselgt.f64	d17, d8, d17
   164a0:	vmrs	APSR_nzcv, fpscr
   164a4:	movpl	r1, r8
   164a8:	vcvt.u32.f64	s0, d17
   164ac:	vmov	s2, r1
   164b0:	vmov	r0, s0
   164b4:	vcvt.f64.u32	d16, s2
   164b8:	ldr	r8, [sp, #124]	; 0x7c
   164bc:	ldr	r7, [sp, #64]	; 0x40
   164c0:	ldr	r3, [sp, #116]	; 0x74
   164c4:	vcmpe.f64	d17, d16
   164c8:	vmrs	APSR_nzcv, fpscr
   164cc:	movpl	r0, r1
   164d0:	movw	r1, #37348	; 0x91e4
   164d4:	movt	r1, #3
   164d8:	ldr	r1, [r1, #8]
   164dc:	add	r1, r1, r1, lsl #3
   164e0:	cmp	r0, r1, lsl #1
   164e4:	lslls	r0, r1, #1
   164e8:	str	r0, [sl, #60]	; 0x3c
   164ec:	b	16510 <__assert_fail@plt+0x41d8>
   164f0:	ldr	r0, [sl, #28]
   164f4:	cmp	r0, #0
   164f8:	bne	16588 <__assert_fail@plt+0x4250>
   164fc:	mov	r9, #0
   16500:	mov	r4, #131072	; 0x20000
   16504:	ldr	r0, [sl, #60]	; 0x3c
   16508:	cmp	r0, #0
   1650c:	beq	163b8 <__assert_fail@plt+0x4080>
   16510:	mul	r1, r3, r4
   16514:	sub	r2, r0, r5
   16518:	add	r1, r1, #1
   1651c:	cmp	r2, r1
   16520:	bls	16584 <__assert_fail@plt+0x424c>
   16524:	udiv	r2, r1, r3
   16528:	eor	r2, r4, r2
   1652c:	orrs	r2, r2, r9
   16530:	ldr	r9, [sp, #60]	; 0x3c
   16534:	bne	16588 <__assert_fail@plt+0x4250>
   16538:	add	r6, r6, #1
   1653c:	add	r5, r1, r5
   16540:	cmp	r6, r7
   16544:	bcc	16350 <__assert_fail@plt+0x4018>
   16548:	b	1658c <__assert_fail@plt+0x4254>
   1654c:	ldr	r0, [sp, #112]	; 0x70
   16550:	bl	121b8 <fileno@plt>
   16554:	mov	r1, r0
   16558:	mov	r0, #3
   1655c:	b	16568 <__assert_fail@plt+0x4230>
   16560:	mov	r0, #3
   16564:	mov	r1, #0
   16568:	sub	r2, fp, #208	; 0xd0
   1656c:	bl	11ff0 <__fxstat64@plt>
   16570:	ldr	r3, [sp, #116]	; 0x74
   16574:	cmp	r0, #0
   16578:	sub	r1, fp, #104	; 0x68
   1657c:	beq	16394 <__assert_fail@plt+0x405c>
   16580:	b	16d14 <__assert_fail@plt+0x49dc>
   16584:	ldr	r9, [sp, #60]	; 0x3c
   16588:	mov	r5, r0
   1658c:	and	r0, r5, #15
   16590:	rsb	r0, r0, #16
   16594:	add	r4, r0, r5
   16598:	mov	r0, r4
   1659c:	bl	24aec <__assert_fail@plt+0x127b4>
   165a0:	cmp	r0, #0
   165a4:	bne	165bc <__assert_fail@plt+0x4284>
   165a8:	ldr	r0, [sp, #116]	; 0x74
   165ac:	lsr	r5, r4, #1
   165b0:	cmp	r0, r4, lsr #1
   165b4:	bcc	1658c <__assert_fail@plt+0x4254>
   165b8:	b	16aa4 <__assert_fail@plt+0x476c>
   165bc:	ldr	r1, [sp, #84]	; 0x54
   165c0:	str	r1, [fp, #-220]	; 0xffffff24
   165c4:	str	r0, [fp, #-240]	; 0xffffff10
   165c8:	mov	r0, #0
   165cc:	str	r4, [fp, #-228]	; 0xffffff1c
   165d0:	str	r0, [fp, #-232]	; 0xffffff18
   165d4:	str	r0, [fp, #-224]	; 0xffffff20
   165d8:	str	r0, [fp, #-236]	; 0xffffff14
   165dc:	strb	r0, [fp, #-216]	; 0xffffff28
   165e0:	mov	r0, #0
   165e4:	sub	r7, r7, #1
   165e8:	add	r8, r8, #4
   165ec:	strb	r0, [fp, #-216]	; 0xffffff28
   165f0:	str	r8, [sp, #124]	; 0x7c
   165f4:	str	r7, [sp, #64]	; 0x40
   165f8:	ldr	r1, [sp, #112]	; 0x70
   165fc:	ldr	r2, [sp, #104]	; 0x68
   16600:	sub	r0, fp, #240	; 0xf0
   16604:	bl	17c24 <__assert_fail@plt+0x58ec>
   16608:	cmp	r0, #0
   1660c:	beq	16874 <__assert_fail@plt+0x453c>
   16610:	ldrb	r0, [fp, #-216]	; 0xffffff28
   16614:	ldr	r5, [fp, #-228]	; 0xffffff1c
   16618:	cmp	r7, #0
   1661c:	cmpne	r0, #0
   16620:	beq	16644 <__assert_fail@plt+0x430c>
   16624:	ldr	r1, [fp, #-236]	; 0xffffff14
   16628:	ldr	r2, [fp, #-232]	; 0xffffff18
   1662c:	ldr	r6, [sp, #84]	; 0x54
   16630:	sub	r3, r5, r1
   16634:	mls	r2, r2, r6, r3
   16638:	ldr	r3, [sp, #116]	; 0x74
   1663c:	cmp	r3, r2
   16640:	bcc	16870 <__assert_fail@plt+0x4538>
   16644:	ldr	r6, [fp, #-240]	; 0xffffff10
   16648:	mov	r1, #0
   1664c:	cmp	r0, #0
   16650:	str	r1, [sl, #64]	; 0x40
   16654:	beq	166a8 <__assert_fail@plt+0x4370>
   16658:	ldr	r0, [sp, #108]	; 0x6c
   1665c:	ldr	r1, [fp, #-224]	; 0xffffff20
   16660:	orr	r0, r0, r7
   16664:	orrs	r0, r0, r1
   16668:	bne	166a8 <__assert_fail@plt+0x4370>
   1666c:	ldr	r0, [sp, #112]	; 0x70
   16670:	ldr	r1, [sp, #104]	; 0x68
   16674:	bl	17158 <__assert_fail@plt+0x4e20>
   16678:	movw	r1, #31331	; 0x7a63
   1667c:	mov	r0, r9
   16680:	movt	r1, #2
   16684:	bl	179bc <__assert_fail@plt+0x5684>
   16688:	cmp	r0, #0
   1668c:	beq	16ab4 <__assert_fail@plt+0x477c>
   16690:	str	r0, [fp, #-244]	; 0xffffff0c
   16694:	mov	r0, #1
   16698:	mov	r4, sl
   1669c:	str	r9, [sp, #120]	; 0x78
   166a0:	str	r0, [sp, #100]	; 0x64
   166a4:	b	166cc <__assert_fail@plt+0x4394>
   166a8:	sub	r0, fp, #244	; 0xf4
   166ac:	mov	r1, #0
   166b0:	mov	r4, sl
   166b4:	bl	1aa0c <__assert_fail@plt+0x86d4>
   166b8:	add	r0, r0, #9
   166bc:	str	r0, [sp, #120]	; 0x78
   166c0:	ldr	r0, [sp, #108]	; 0x6c
   166c4:	add	r0, r0, #1
   166c8:	str	r0, [sp, #108]	; 0x6c
   166cc:	ldr	sl, [fp, #-232]	; 0xffffff18
   166d0:	add	r8, r6, r5
   166d4:	str	r6, [sp, #88]	; 0x58
   166d8:	cmp	sl, #2
   166dc:	bcc	167f4 <__assert_fail@plt+0x44bc>
   166e0:	ldr	r1, [sp, #72]	; 0x48
   166e4:	movw	r0, #47928	; 0xbb38
   166e8:	movt	r0, #1
   166ec:	bl	1ed94 <__assert_fail@plt+0xca5c>
   166f0:	str	r0, [fp, #-208]	; 0xffffff30
   166f4:	ldr	r0, [sp, #92]	; 0x5c
   166f8:	mov	r1, #0
   166fc:	bl	11edc <pthread_mutex_init@plt>
   16700:	ldr	r0, [sp, #96]	; 0x60
   16704:	mov	r1, #0
   16708:	bl	11f60 <pthread_cond_init@plt>
   1670c:	ldr	r0, [sp, #76]	; 0x4c
   16710:	bl	234d0 <__assert_fail@plt+0x11198>
   16714:	mov	r7, r0
   16718:	mov	r4, #0
   1671c:	mov	r9, r0
   16720:	mov	r1, #0
   16724:	str	r4, [r0, #16]
   16728:	str	sl, [r0, #20]
   1672c:	str	sl, [r0, #24]
   16730:	str	r4, [r0, #28]
   16734:	str	r4, [r0, #40]	; 0x28
   16738:	strb	r4, [r0, #44]	; 0x2c
   1673c:	mov	r0, #72	; 0x48
   16740:	add	r6, r7, #48	; 0x30
   16744:	vst1.32	{d12-d13}, [r9], r0
   16748:	mov	r0, r6
   1674c:	bl	11edc <pthread_mutex_init@plt>
   16750:	str	r4, [sp, #4]
   16754:	ldr	r4, [sp, #80]	; 0x50
   16758:	mov	r0, r7
   1675c:	mov	r1, r9
   16760:	mov	r2, r8
   16764:	str	sl, [sp]
   16768:	mov	r3, r4
   1676c:	bl	1bb70 <__assert_fail@plt+0x9838>
   16770:	ldr	r5, [fp, #-244]	; 0xffffff0c
   16774:	sub	r0, fp, #208	; 0xd0
   16778:	mov	r1, r4
   1677c:	mov	r2, sl
   16780:	mov	r3, r9
   16784:	stm	sp, {r0, r5}
   16788:	ldr	r0, [sp, #120]	; 0x78
   1678c:	str	r0, [sp, #8]
   16790:	mov	r0, r8
   16794:	bl	1b188 <__assert_fail@plt+0x8e50>
   16798:	cmp	r4, #0
   1679c:	beq	167b8 <__assert_fail@plt+0x4480>
   167a0:	ldr	r4, [sp, #68]	; 0x44
   167a4:	mov	r0, r6
   167a8:	bl	11e58 <pthread_mutex_destroy@plt>
   167ac:	adds	r4, r4, #1
   167b0:	add	r6, r6, #72	; 0x48
   167b4:	bne	167a4 <__assert_fail@plt+0x446c>
   167b8:	mov	r0, r7
   167bc:	bl	1d88c <__assert_fail@plt+0xb554>
   167c0:	ldr	r0, [fp, #-208]	; 0xffffff30
   167c4:	bl	1edf8 <__assert_fail@plt+0xcac0>
   167c8:	ldr	r0, [sp, #96]	; 0x60
   167cc:	bl	11fcc <pthread_cond_destroy@plt>
   167d0:	ldr	r0, [sp, #92]	; 0x5c
   167d4:	bl	11e58 <pthread_mutex_destroy@plt>
   167d8:	ldr	r9, [sp, #60]	; 0x3c
   167dc:	ldr	r8, [sp, #124]	; 0x7c
   167e0:	ldr	r7, [sp, #64]	; 0x40
   167e4:	ldr	r4, [sp, #120]	; 0x78
   167e8:	movw	sl, #39016	; 0x9868
   167ec:	movt	sl, #3
   167f0:	b	16854 <__assert_fail@plt+0x451c>
   167f4:	ldrb	r0, [r4, #7]
   167f8:	sub	r6, r8, #16
   167fc:	mov	sl, r4
   16800:	ldr	r5, [fp, #-244]	; 0xffffff0c
   16804:	ldr	r8, [sp, #124]	; 0x7c
   16808:	ldr	r7, [sp, #64]	; 0x40
   1680c:	ldr	r4, [sp, #120]	; 0x78
   16810:	cmp	r0, #1
   16814:	bne	16844 <__assert_fail@plt+0x450c>
   16818:	ldr	r0, [sl, #64]	; 0x40
   1681c:	cmp	r0, #0
   16820:	beq	16838 <__assert_fail@plt+0x4500>
   16824:	add	r1, sl, #64	; 0x40
   16828:	mov	r0, r6
   1682c:	bl	18080 <__assert_fail@plt+0x5d48>
   16830:	cmp	r0, #0
   16834:	beq	16854 <__assert_fail@plt+0x451c>
   16838:	vld1.32	{d16-d17}, [r6]
   1683c:	add	r0, sl, #64	; 0x40
   16840:	vst1.64	{d16-d17}, [r0]
   16844:	mov	r0, r6
   16848:	mov	r1, r5
   1684c:	mov	r2, r4
   16850:	bl	19460 <__assert_fail@plt+0x7128>
   16854:	mov	r0, r5
   16858:	mov	r1, r4
   1685c:	bl	17158 <__assert_fail@plt+0x4e20>
   16860:	ldr	r0, [sp, #100]	; 0x64
   16864:	tst	r0, #1
   16868:	beq	165f8 <__assert_fail@plt+0x42c0>
   1686c:	b	168a8 <__assert_fail@plt+0x4570>
   16870:	str	r1, [fp, #-224]	; 0xffffff20
   16874:	ldr	r0, [sp, #112]	; 0x70
   16878:	ldr	r1, [sp, #104]	; 0x68
   1687c:	bl	17158 <__assert_fail@plt+0x4e20>
   16880:	movw	r1, #29726	; 0x741e
   16884:	cmp	r7, #0
   16888:	movt	r1, #2
   1688c:	bne	162e4 <__assert_fail@plt+0x3fac>
   16890:	ldr	r0, [fp, #-240]	; 0xffffff10
   16894:	bl	1d88c <__assert_fail@plt+0xb554>
   16898:	ldr	r0, [sp, #100]	; 0x64
   1689c:	tst	r0, #1
   168a0:	bne	16910 <__assert_fail@plt+0x45d8>
   168a4:	b	168bc <__assert_fail@plt+0x4584>
   168a8:	ldr	r0, [sp, #88]	; 0x58
   168ac:	bl	1d88c <__assert_fail@plt+0xb554>
   168b0:	ldr	r0, [sp, #100]	; 0x64
   168b4:	tst	r0, #1
   168b8:	bne	16910 <__assert_fail@plt+0x45d8>
   168bc:	ldr	r5, [sl, #32]
   168c0:	ldr	r0, [sp, #108]	; 0x6c
   168c4:	mov	r1, #8
   168c8:	bl	235a0 <__assert_fail@plt+0x11268>
   168cc:	mov	r4, r0
   168d0:	cmp	r5, #0
   168d4:	beq	168f4 <__assert_fail@plt+0x45bc>
   168d8:	add	r0, r4, #4
   168dc:	add	r1, r5, #9
   168e0:	stmda	r0, {r1, r5}
   168e4:	add	r0, r0, #8
   168e8:	ldr	r5, [r5]
   168ec:	cmp	r5, #0
   168f0:	bne	168dc <__assert_fail@plt+0x45a4>
   168f4:	ldr	r1, [sp, #108]	; 0x6c
   168f8:	mov	r0, r4
   168fc:	mov	r3, r9
   16900:	mov	r2, r1
   16904:	bl	171d4 <__assert_fail@plt+0x4e9c>
   16908:	mov	r0, r4
   1690c:	bl	1d88c <__assert_fail@plt+0xb554>
   16910:	ldr	r0, [sl, #52]	; 0x34
   16914:	cmp	r0, #1
   16918:	blt	16930 <__assert_fail@plt+0x45f8>
   1691c:	mvn	r0, #0
   16920:	bl	1af10 <__assert_fail@plt+0x8bd8>
   16924:	ldr	r0, [sl, #52]	; 0x34
   16928:	cmp	r0, #0
   1692c:	bgt	1691c <__assert_fail@plt+0x45e4>
   16930:	ldrb	r0, [sl, #4]
   16934:	cmp	r0, #1
   16938:	bne	16954 <__assert_fail@plt+0x461c>
   1693c:	movw	r0, #37584	; 0x92d0
   16940:	movt	r0, #3
   16944:	ldr	r0, [r0]
   16948:	bl	1d2d4 <__assert_fail@plt+0xaf9c>
   1694c:	cmn	r0, #1
   16950:	beq	16edc <__assert_fail@plt+0x4ba4>
   16954:	mov	r0, #0
   16958:	sub	sp, fp, #72	; 0x48
   1695c:	vpop	{d8-d10}
   16960:	vpop	{d12-d13}
   16964:	add	sp, sp, #4
   16968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1696c:	ldr	r0, [sl, #40]	; 0x28
   16970:	add	r1, sl, #36	; 0x24
   16974:	mov	r2, #4
   16978:	bl	2367c <__assert_fail@plt+0x11344>
   1697c:	str	r0, [sl, #40]	; 0x28
   16980:	ldr	r1, [sl, #24]
   16984:	add	r2, r1, #1
   16988:	str	r2, [sl, #24]
   1698c:	str	r4, [r0, r1, lsl #2]
   16990:	cmp	r7, #0
   16994:	bne	15cd8 <__assert_fail@plt+0x39a0>
   16998:	mov	r0, r8
   1699c:	bl	1d88c <__assert_fail@plt+0xb554>
   169a0:	mov	r0, #4
   169a4:	bl	234d0 <__assert_fail@plt+0x11198>
   169a8:	mov	r8, r0
   169ac:	movw	r0, #30454	; 0x76f6
   169b0:	mov	r7, #1
   169b4:	movt	r0, #2
   169b8:	str	r0, [r8]
   169bc:	ldr	r0, [sl, #28]
   169c0:	cmp	r0, #0
   169c4:	bne	15ce4 <__assert_fail@plt+0x39ac>
   169c8:	b	15d00 <__assert_fail@plt+0x39c8>
   169cc:	ldr	r9, [sp, #112]	; 0x70
   169d0:	ldr	sl, [sp, #124]	; 0x7c
   169d4:	mov	r5, r6
   169d8:	b	1615c <__assert_fail@plt+0x3e24>
   169dc:	ldr	r9, [sp, #112]	; 0x70
   169e0:	mov	r5, r6
   169e4:	b	1615c <__assert_fail@plt+0x3e24>
   169e8:	mov	r0, #2
   169ec:	bl	12440 <__assert_fail@plt+0x108>
   169f0:	movw	r0, #37472	; 0x9260
   169f4:	movw	r2, #28767	; 0x705f
   169f8:	mov	r1, #0
   169fc:	movw	r7, #28754	; 0x7052
   16a00:	movt	r0, #3
   16a04:	movt	r2, #2
   16a08:	str	r1, [sp, #8]
   16a0c:	movw	r1, #28466	; 0x6f32
   16a10:	movt	r7, #2
   16a14:	ldr	r3, [r0]
   16a18:	movw	r0, #37588	; 0x92d4
   16a1c:	str	r2, [sp, #4]
   16a20:	movw	r2, #28740	; 0x7044
   16a24:	movt	r1, #2
   16a28:	str	r7, [sp]
   16a2c:	movt	r0, #3
   16a30:	movt	r2, #2
   16a34:	ldr	r0, [r0]
   16a38:	bl	2329c <__assert_fail@plt+0x10f64>
   16a3c:	mov	r0, #0
   16a40:	bl	12128 <exit@plt>
   16a44:	mov	r0, #0
   16a48:	bl	12440 <__assert_fail@plt+0x108>
   16a4c:	mov	r1, #0
   16a50:	sub	r4, fp, #208	; 0xd0
   16a54:	strb	r1, [r0, #31]
   16a58:	strh	r1, [r0, #24]
   16a5c:	mov	r1, r4
   16a60:	bl	17b48 <__assert_fail@plt+0x5810>
   16a64:	mov	r0, r4
   16a68:	bl	17124 <__assert_fail@plt+0x4dec>
   16a6c:	movw	r1, #28879	; 0x70cf
   16a70:	mov	r0, #0
   16a74:	mov	r2, #5
   16a78:	movt	r1, #2
   16a7c:	bl	11f54 <dcgettext@plt>
   16a80:	ldr	r1, [r8, r6, lsl #2]
   16a84:	mov	r4, r0
   16a88:	mov	r0, #4
   16a8c:	bl	21760 <__assert_fail@plt+0xf428>
   16a90:	mov	r3, r0
   16a94:	mov	r0, #2
   16a98:	mov	r1, #0
   16a9c:	mov	r2, r4
   16aa0:	bl	12080 <error@plt>
   16aa4:	bl	23a30 <__assert_fail@plt+0x116f8>
   16aa8:	movw	r1, #31319	; 0x7a57
   16aac:	movt	r1, #2
   16ab0:	b	16d1c <__assert_fail@plt+0x49e4>
   16ab4:	movw	r1, #30319	; 0x766f
   16ab8:	mov	r0, #0
   16abc:	mov	r2, #5
   16ac0:	movt	r1, #2
   16ac4:	bl	11f54 <dcgettext@plt>
   16ac8:	mov	r1, r9
   16acc:	bl	17948 <__assert_fail@plt+0x5610>
   16ad0:	movw	r1, #28482	; 0x6f42
   16ad4:	movt	r1, #2
   16ad8:	b	16cc8 <__assert_fail@plt+0x4990>
   16adc:	ldr	r0, [r4]
   16ae0:	movw	r1, #28570	; 0x6f9a
   16ae4:	movt	r1, #2
   16ae8:	bl	170c4 <__assert_fail@plt+0x4d8c>
   16aec:	movw	r1, #28686	; 0x700e
   16af0:	movt	r1, #2
   16af4:	b	16cc8 <__assert_fail@plt+0x4990>
   16af8:	movw	r1, #28699	; 0x701b
   16afc:	mov	r0, #0
   16b00:	mov	r2, #5
   16b04:	movt	r1, #2
   16b08:	bl	11f54 <dcgettext@plt>
   16b0c:	mov	r5, r0
   16b10:	ldr	r0, [r4]
   16b14:	bl	21c88 <__assert_fail@plt+0xf950>
   16b18:	mov	r3, r0
   16b1c:	mov	r0, #2
   16b20:	mov	r1, #0
   16b24:	mov	r2, r5
   16b28:	bl	12080 <error@plt>
   16b2c:	movw	r1, #28722	; 0x7032
   16b30:	movt	r1, #2
   16b34:	b	16cc8 <__assert_fail@plt+0x4990>
   16b38:	movw	r3, #31664	; 0x7bb0
   16b3c:	mov	r1, r4
   16b40:	mov	r2, #7
   16b44:	str	r5, [sp]
   16b48:	movt	r3, #2
   16b4c:	bl	23d20 <__assert_fail@plt+0x119e8>
   16b50:	movw	r1, #28620	; 0x6fcc
   16b54:	movt	r1, #2
   16b58:	b	16cc8 <__assert_fail@plt+0x4990>
   16b5c:	cmp	r6, #1
   16b60:	bne	16d30 <__assert_fail@plt+0x49f8>
   16b64:	movw	r1, #30196	; 0x75f4
   16b68:	mov	r0, #0
   16b6c:	mov	r2, #5
   16b70:	movt	r1, #2
   16b74:	bl	11f54 <dcgettext@plt>
   16b78:	mov	r6, r0
   16b7c:	mov	r0, r9
   16b80:	bl	21c88 <__assert_fail@plt+0xf950>
   16b84:	ldr	r1, [sp, #72]	; 0x48
   16b88:	str	r0, [sp]
   16b8c:	movw	r0, #31664	; 0x7bb0
   16b90:	mov	r2, r6
   16b94:	movt	r0, #2
   16b98:	ldr	r5, [r0, r1, lsl #4]
   16b9c:	mov	r0, #0
   16ba0:	mov	r1, #0
   16ba4:	mov	r3, r5
   16ba8:	bl	12080 <error@plt>
   16bac:	movw	r1, #30223	; 0x760f
   16bb0:	mov	r0, #0
   16bb4:	mov	r2, #5
   16bb8:	movt	r1, #2
   16bbc:	bl	11f54 <dcgettext@plt>
   16bc0:	mov	r6, r0
   16bc4:	sub	r1, fp, #208	; 0xd0
   16bc8:	mov	r0, r4
   16bcc:	bl	1f024 <__assert_fail@plt+0xccec>
   16bd0:	str	r0, [sp]
   16bd4:	mov	r0, #2
   16bd8:	mov	r1, #0
   16bdc:	mov	r2, r6
   16be0:	mov	r3, r5
   16be4:	bl	12080 <error@plt>
   16be8:	movw	r1, #30141	; 0x75bd
   16bec:	mov	r0, #0
   16bf0:	mov	r2, #5
   16bf4:	movt	r1, #2
   16bf8:	bl	11f54 <dcgettext@plt>
   16bfc:	mov	r4, r0
   16c00:	mov	r0, r9
   16c04:	bl	21c88 <__assert_fail@plt+0xf950>
   16c08:	ldr	r1, [sp, #72]	; 0x48
   16c0c:	str	r0, [sp]
   16c10:	movw	r0, #31664	; 0x7bb0
   16c14:	mov	r2, r4
   16c18:	movt	r0, #2
   16c1c:	ldr	r5, [r0, r1, lsl #4]
   16c20:	mov	r0, #0
   16c24:	mov	r1, #0
   16c28:	mov	r3, r5
   16c2c:	bl	12080 <error@plt>
   16c30:	movw	r1, #30166	; 0x75d6
   16c34:	mov	r0, #0
   16c38:	mov	r2, #5
   16c3c:	movt	r1, #2
   16c40:	bl	11f54 <dcgettext@plt>
   16c44:	mov	r4, r0
   16c48:	movw	r0, #30194	; 0x75f2
   16c4c:	movt	r0, #2
   16c50:	bl	21c88 <__assert_fail@plt+0xf950>
   16c54:	str	r0, [sp]
   16c58:	mov	r0, #2
   16c5c:	mov	r1, #0
   16c60:	mov	r2, r4
   16c64:	mov	r3, r5
   16c68:	bl	12080 <error@plt>
   16c6c:	movw	r1, #28652	; 0x6fec
   16c70:	movt	r1, #2
   16c74:	b	16cc8 <__assert_fail@plt+0x4990>
   16c78:	mov	r0, #1
   16c7c:	ldr	r1, [sp, #72]	; 0x48
   16c80:	movw	r3, #31664	; 0x7bb0
   16c84:	mov	r2, #83	; 0x53
   16c88:	str	r4, [sp]
   16c8c:	movt	r3, #2
   16c90:	bl	23d20 <__assert_fail@plt+0x119e8>
   16c94:	ldr	r0, [r4]
   16c98:	movw	r1, #28549	; 0x6f85
   16c9c:	movt	r1, #2
   16ca0:	bl	170c4 <__assert_fail@plt+0x4d8c>
   16ca4:	ldr	r0, [r4]
   16ca8:	movw	r1, #28434	; 0x6f12
   16cac:	movt	r1, #2
   16cb0:	bl	170c4 <__assert_fail@plt+0x4d8c>
   16cb4:	movw	r0, #28479	; 0x6f3f
   16cb8:	movt	r0, #2
   16cbc:	bl	17124 <__assert_fail@plt+0x4dec>
   16cc0:	movw	r1, #30284	; 0x764c
   16cc4:	movt	r1, #2
   16cc8:	mov	r0, #0
   16ccc:	mov	r2, #5
   16cd0:	bl	11f54 <dcgettext@plt>
   16cd4:	mov	r2, r0
   16cd8:	mov	r0, #2
   16cdc:	mov	r1, #0
   16ce0:	bl	12080 <error@plt>
   16ce4:	movw	r0, #32647	; 0x7f87
   16ce8:	movw	r1, #28375	; 0x6ed7
   16cec:	movw	r3, #28386	; 0x6ee2
   16cf0:	movw	r2, #4449	; 0x1161
   16cf4:	movt	r0, #2
   16cf8:	movt	r1, #2
   16cfc:	movt	r3, #2
   16d00:	bl	12338 <__assert_fail@plt>
   16d04:	movw	r1, #28434	; 0x6f12
   16d08:	mov	r0, r4
   16d0c:	movt	r1, #2
   16d10:	bl	170c4 <__assert_fail@plt+0x4d8c>
   16d14:	movw	r1, #31597	; 0x7b6d
   16d18:	movt	r1, #2
   16d1c:	mov	r0, #0
   16d20:	mov	r2, #5
   16d24:	bl	11f54 <dcgettext@plt>
   16d28:	ldr	r1, [r8, r6, lsl #2]
   16d2c:	bl	17948 <__assert_fail@plt+0x5610>
   16d30:	ldr	r1, [sp, #72]	; 0x48
   16d34:	movw	r3, #31664	; 0x7bb0
   16d38:	mov	r0, r6
   16d3c:	mov	r2, #4
   16d40:	str	r9, [sp]
   16d44:	movt	r3, #2
   16d48:	bl	23d20 <__assert_fail@plt+0x119e8>
   16d4c:	movw	r1, #28779	; 0x706b
   16d50:	mov	r0, #0
   16d54:	mov	r2, #5
   16d58:	movt	r1, #2
   16d5c:	bl	11f54 <dcgettext@plt>
   16d60:	mov	r4, r0
   16d64:	ldr	r0, [sp, #124]	; 0x7c
   16d68:	ldr	r1, [r0]
   16d6c:	mov	r0, #4
   16d70:	bl	21760 <__assert_fail@plt+0xf428>
   16d74:	mov	r3, r0
   16d78:	mov	r0, #0
   16d7c:	mov	r1, #0
   16d80:	mov	r2, r4
   16d84:	bl	12080 <error@plt>
   16d88:	movw	r0, #37576	; 0x92c8
   16d8c:	movw	r1, #28796	; 0x707c
   16d90:	mov	r2, #5
   16d94:	movt	r0, #3
   16d98:	movt	r1, #2
   16d9c:	ldr	r4, [r0]
   16da0:	mov	r0, #0
   16da4:	bl	11f54 <dcgettext@plt>
   16da8:	movw	r2, #33206	; 0x81b6
   16dac:	mov	r3, r0
   16db0:	mov	r0, r4
   16db4:	mov	r1, #1
   16db8:	movt	r2, #2
   16dbc:	bl	121c4 <__fprintf_chk@plt>
   16dc0:	mov	r0, #2
   16dc4:	bl	12440 <__assert_fail@plt+0x108>
   16dc8:	movw	r1, #30319	; 0x766f
   16dcc:	mov	r0, #0
   16dd0:	mov	r2, #5
   16dd4:	movt	r1, #2
   16dd8:	bl	11f54 <dcgettext@plt>
   16ddc:	ldr	r1, [sp, #96]	; 0x60
   16de0:	bl	17948 <__assert_fail@plt+0x5610>
   16de4:	movw	r1, #28848	; 0x70b0
   16de8:	movt	r1, #2
   16dec:	b	16df8 <__assert_fail@plt+0x4ac0>
   16df0:	movw	r1, #28980	; 0x7134
   16df4:	movt	r1, #2
   16df8:	mov	r0, #0
   16dfc:	mov	r2, #5
   16e00:	bl	11f54 <dcgettext@plt>
   16e04:	ldr	r1, [sp, #96]	; 0x60
   16e08:	b	16a84 <__assert_fail@plt+0x474c>
   16e0c:	movw	r1, #29125	; 0x71c5
   16e10:	mov	r0, #0
   16e14:	mov	r2, #5
   16e18:	movt	r1, #2
   16e1c:	bl	11f54 <dcgettext@plt>
   16e20:	ldr	r1, [r8, #4]
   16e24:	mov	r4, r0
   16e28:	mov	r0, #4
   16e2c:	bl	21760 <__assert_fail@plt+0xf428>
   16e30:	mov	r3, r0
   16e34:	uxtb	r0, r5
   16e38:	str	r0, [sp]
   16e3c:	mov	r0, #2
   16e40:	mov	r1, #0
   16e44:	mov	r2, r4
   16e48:	bl	12080 <error@plt>
   16e4c:	movw	r0, #37348	; 0x91e4
   16e50:	movt	r0, #3
   16e54:	strb	r5, [r0]
   16e58:	bl	17124 <__assert_fail@plt+0x4dec>
   16e5c:	movw	r1, #30319	; 0x766f
   16e60:	mov	r0, #0
   16e64:	mov	r2, #5
   16e68:	movt	r1, #2
   16e6c:	bl	11f54 <dcgettext@plt>
   16e70:	ldr	r2, [sp, #28]
   16e74:	movw	r1, #31124	; 0x7994
   16e78:	movt	r1, #2
   16e7c:	cmp	r2, #0
   16e80:	movne	r1, r2
   16e84:	bl	17948 <__assert_fail@plt+0x5610>
   16e88:	movw	r1, #29163	; 0x71eb
   16e8c:	mov	r0, #0
   16e90:	mov	r2, #5
   16e94:	movt	r1, #2
   16e98:	bl	11f54 <dcgettext@plt>
   16e9c:	ldr	r1, [sp, #28]
   16ea0:	bl	17948 <__assert_fail@plt+0x5610>
   16ea4:	movw	r1, #30319	; 0x766f
   16ea8:	mov	r0, #0
   16eac:	mov	r2, #5
   16eb0:	movt	r1, #2
   16eb4:	bl	11f54 <dcgettext@plt>
   16eb8:	ldr	r1, [sp, #104]	; 0x68
   16ebc:	bl	17948 <__assert_fail@plt+0x5610>
   16ec0:	movw	r1, #30319	; 0x766f
   16ec4:	mov	r0, #0
   16ec8:	mov	r2, #5
   16ecc:	movt	r1, #2
   16ed0:	bl	11f54 <dcgettext@plt>
   16ed4:	ldr	r1, [sp, #60]	; 0x3c
   16ed8:	bl	17948 <__assert_fail@plt+0x5610>
   16edc:	movw	r1, #29163	; 0x71eb
   16ee0:	mov	r0, #0
   16ee4:	mov	r2, #5
   16ee8:	movt	r1, #2
   16eec:	bl	11f54 <dcgettext@plt>
   16ef0:	movw	r1, #30454	; 0x76f6
   16ef4:	movt	r1, #2
   16ef8:	bl	17948 <__assert_fail@plt+0x5610>
   16efc:	push	{r4, r5, r6, sl, fp, lr}
   16f00:	add	fp, sp, #16
   16f04:	movw	r5, #39016	; 0x9868
   16f08:	mov	r4, r0
   16f0c:	movt	r5, #3
   16f10:	ldr	r6, [r5, #32]
   16f14:	cmp	r6, #0
   16f18:	beq	16f30 <__assert_fail@plt+0x4bf8>
   16f1c:	add	r0, r6, #9
   16f20:	bl	11f78 <unlink@plt>
   16f24:	ldr	r6, [r6]
   16f28:	cmp	r6, #0
   16f2c:	bne	16f1c <__assert_fail@plt+0x4be4>
   16f30:	mov	r0, #0
   16f34:	mov	r1, #0
   16f38:	str	r0, [r5, #32]
   16f3c:	mov	r0, r4
   16f40:	bl	11f00 <signal@plt>
   16f44:	mov	r0, r4
   16f48:	pop	{r4, r5, r6, sl, fp, lr}
   16f4c:	b	11e1c <raise@plt>
   16f50:	push	{r4, r5, r6, r7, fp, lr}
   16f54:	add	fp, sp, #16
   16f58:	sub	sp, sp, #136	; 0x88
   16f5c:	movw	r5, #39016	; 0x9868
   16f60:	movt	r5, #3
   16f64:	ldr	r0, [r5, #32]
   16f68:	cmp	r0, #0
   16f6c:	beq	16fdc <__assert_fail@plt+0x4ca4>
   16f70:	add	r0, sp, #4
   16f74:	movw	r1, #37600	; 0x92e0
   16f78:	mov	r6, #0
   16f7c:	add	r4, r0, #4
   16f80:	movt	r1, #3
   16f84:	mov	r0, #0
   16f88:	mov	r2, r4
   16f8c:	bl	12050 <pthread_sigmask@plt>
   16f90:	clz	r0, r0
   16f94:	lsr	r0, r0, #5
   16f98:	strb	r0, [sp, #4]
   16f9c:	ldr	r7, [r5, #32]
   16fa0:	cmp	r7, #0
   16fa4:	beq	16fc0 <__assert_fail@plt+0x4c88>
   16fa8:	add	r0, r7, #9
   16fac:	bl	11f78 <unlink@plt>
   16fb0:	ldr	r7, [r7]
   16fb4:	cmp	r7, #0
   16fb8:	bne	16fa8 <__assert_fail@plt+0x4c70>
   16fbc:	ldrb	r0, [sp, #4]
   16fc0:	cmp	r0, #0
   16fc4:	str	r6, [r5, #32]
   16fc8:	beq	16fdc <__assert_fail@plt+0x4ca4>
   16fcc:	mov	r0, #2
   16fd0:	mov	r1, r4
   16fd4:	mov	r2, #0
   16fd8:	bl	12050 <pthread_sigmask@plt>
   16fdc:	bl	1c368 <__assert_fail@plt+0xa030>
   16fe0:	sub	sp, fp, #16
   16fe4:	pop	{r4, r5, r6, r7, fp, pc}
   16fe8:	push	{r4, r5, r6, sl, fp, lr}
   16fec:	add	fp, sp, #16
   16ff0:	sub	sp, sp, #24
   16ff4:	mov	r4, r0
   16ff8:	movw	r0, #24692	; 0x6074
   16ffc:	mov	r5, r2
   17000:	mov	r6, r1
   17004:	add	r1, sp, #20
   17008:	add	r3, sp, #8
   1700c:	mov	r2, #10
   17010:	movt	r0, #2
   17014:	str	r0, [sp]
   17018:	mov	r0, r4
   1701c:	bl	23de4 <__assert_fail@plt+0x11aac>
   17020:	cmp	r0, #4
   17024:	bhi	17060 <__assert_fail@plt+0x4d28>
   17028:	add	r1, pc, #0
   1702c:	ldr	pc, [r1, r0, lsl #2]
   17030:	andeq	r7, r1, r4, asr #32
   17034:	andeq	r7, r1, r8, asr r0
   17038:	andeq	r7, r1, r4, asr #32
   1703c:	andeq	r7, r1, r8, asr r0
   17040:	andeq	r7, r1, ip, rrx
   17044:	ldr	r1, [sp, #12]
   17048:	ldr	r0, [sp, #8]
   1704c:	cmp	r1, #0
   17050:	str	r0, [r6]
   17054:	beq	17060 <__assert_fail@plt+0x4d28>
   17058:	mvn	r0, #0
   1705c:	str	r0, [r6]
   17060:	ldr	r0, [sp, #20]
   17064:	sub	sp, fp, #16
   17068:	pop	{r4, r5, r6, sl, fp, pc}
   1706c:	mov	r0, #0
   17070:	cmp	r5, #0
   17074:	beq	17064 <__assert_fail@plt+0x4d2c>
   17078:	movw	r1, #29978	; 0x751a
   1707c:	mov	r0, #0
   17080:	mov	r2, #5
   17084:	movt	r1, #2
   17088:	bl	11f54 <dcgettext@plt>
   1708c:	mov	r6, r0
   17090:	mov	r0, #0
   17094:	mov	r1, r5
   17098:	mov	r2, #5
   1709c:	bl	11f54 <dcgettext@plt>
   170a0:	mov	r5, r0
   170a4:	mov	r0, r4
   170a8:	bl	21c88 <__assert_fail@plt+0xf950>
   170ac:	str	r0, [sp]
   170b0:	mov	r0, #2
   170b4:	mov	r1, #0
   170b8:	mov	r2, r6
   170bc:	mov	r3, r5
   170c0:	bl	12080 <error@plt>
   170c4:	push	{fp, lr}
   170c8:	mov	fp, sp
   170cc:	sub	sp, sp, #8
   170d0:	mov	r4, r1
   170d4:	movw	r1, #30011	; 0x753b
   170d8:	mov	r5, r0
   170dc:	mov	r0, #0
   170e0:	mov	r2, #5
   170e4:	movt	r1, #2
   170e8:	bl	11f54 <dcgettext@plt>
   170ec:	mov	r6, r0
   170f0:	mov	r0, #0
   170f4:	mov	r1, r4
   170f8:	mov	r2, #5
   170fc:	bl	11f54 <dcgettext@plt>
   17100:	mov	r4, r0
   17104:	mov	r0, r5
   17108:	bl	21c88 <__assert_fail@plt+0xf950>
   1710c:	str	r0, [sp]
   17110:	mov	r0, #2
   17114:	mov	r1, #0
   17118:	mov	r2, r6
   1711c:	mov	r3, r4
   17120:	bl	12080 <error@plt>
   17124:	push	{fp, lr}
   17128:	mov	fp, sp
   1712c:	movw	r1, #30110	; 0x759e
   17130:	mov	r4, r0
   17134:	mov	r0, #0
   17138:	mov	r2, #5
   1713c:	movt	r1, #2
   17140:	bl	11f54 <dcgettext@plt>
   17144:	mov	r2, r0
   17148:	mov	r0, #2
   1714c:	mov	r1, #0
   17150:	mov	r3, r4
   17154:	bl	12080 <error@plt>
   17158:	push	{r4, r5, fp, lr}
   1715c:	add	fp, sp, #8
   17160:	mov	r4, r1
   17164:	mov	r5, r0
   17168:	bl	121b8 <fileno@plt>
   1716c:	cmp	r0, #1
   17170:	beq	17188 <__assert_fail@plt+0x4e50>
   17174:	cmp	r0, #0
   17178:	bne	1719c <__assert_fail@plt+0x4e64>
   1717c:	mov	r0, r5
   17180:	pop	{r4, r5, fp, lr}
   17184:	b	12278 <clearerr_unlocked@plt>
   17188:	mov	r0, r5
   1718c:	bl	11fd8 <fflush_unlocked@plt>
   17190:	cmp	r0, #0
   17194:	bne	171c8 <__assert_fail@plt+0x4e90>
   17198:	pop	{r4, r5, fp, pc}
   1719c:	mov	r0, r5
   171a0:	bl	1d2d4 <__assert_fail@plt+0xaf9c>
   171a4:	cmp	r0, #0
   171a8:	popeq	{r4, r5, fp, pc}
   171ac:	movw	r1, #29163	; 0x71eb
   171b0:	movt	r1, #2
   171b4:	mov	r0, #0
   171b8:	mov	r2, #5
   171bc:	bl	11f54 <dcgettext@plt>
   171c0:	mov	r1, r4
   171c4:	bl	17948 <__assert_fail@plt+0x5610>
   171c8:	movw	r1, #30439	; 0x76e7
   171cc:	movt	r1, #2
   171d0:	b	171b4 <__assert_fail@plt+0x4e7c>
   171d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171d8:	add	fp, sp, #28
   171dc:	sub	sp, sp, #148	; 0x94
   171e0:	mov	r9, r0
   171e4:	movw	r0, #37348	; 0x91e4
   171e8:	mov	r7, r2
   171ec:	str	r3, [sp, #12]
   171f0:	str	r1, [sp, #32]
   171f4:	movt	r0, #3
   171f8:	str	r9, [sp, #16]
   171fc:	ldr	r4, [r0, #8]
   17200:	cmp	r4, r2
   17204:	bcs	173fc <__assert_fail@plt+0x50c4>
   17208:	cmp	r4, r7
   1720c:	str	r7, [sp, #20]
   17210:	bls	17228 <__assert_fail@plt+0x4ef0>
   17214:	movw	r6, #37348	; 0x91e4
   17218:	mov	r2, #0
   1721c:	mov	r5, #0
   17220:	movt	r6, #3
   17224:	b	172f8 <__assert_fail@plt+0x4fc0>
   17228:	movw	r6, #37348	; 0x91e4
   1722c:	mov	r5, #0
   17230:	mov	r2, #0
   17234:	movt	r6, #3
   17238:	sub	r0, fp, #32
   1723c:	mov	r1, #0
   17240:	str	r2, [sp, #28]
   17244:	bl	1aa0c <__assert_fail@plt+0x86d4>
   17248:	mov	sl, r0
   1724c:	add	r7, r9, r5, lsl #3
   17250:	ldr	r9, [r6, #8]
   17254:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17258:	add	r2, sp, #40	; 0x28
   1725c:	str	r0, [sp, #24]
   17260:	mov	r0, r7
   17264:	mov	r1, r9
   17268:	bl	19e90 <__assert_fail@plt+0x7b58>
   1726c:	mov	r4, r0
   17270:	cmp	r0, r9
   17274:	bcs	17280 <__assert_fail@plt+0x4f48>
   17278:	cmp	r4, #1
   1727c:	bls	178b0 <__assert_fail@plt+0x5578>
   17280:	ldr	r6, [sp, #32]
   17284:	ldr	r0, [sp, #40]	; 0x28
   17288:	ldr	r3, [sp, #24]
   1728c:	add	r8, sl, #9
   17290:	mov	r2, r4
   17294:	str	r8, [sp]
   17298:	cmp	r6, r9
   1729c:	str	r0, [sp, #4]
   172a0:	mov	r0, r7
   172a4:	movcc	r9, r6
   172a8:	mov	r1, r9
   172ac:	bl	1a1a0 <__assert_fail@plt+0x7e68>
   172b0:	ldr	r9, [sp, #16]
   172b4:	ldr	r2, [sp, #28]
   172b8:	cmp	r6, r4
   172bc:	add	r5, r4, r5
   172c0:	movcc	r4, r6
   172c4:	sub	r6, r6, r4
   172c8:	mov	r0, r9
   172cc:	str	r8, [r0, r2, lsl #3]!
   172d0:	str	r6, [sp, #32]
   172d4:	movw	r6, #37348	; 0x91e4
   172d8:	add	r2, r2, #1
   172dc:	str	sl, [r0, #4]
   172e0:	ldr	r0, [sp, #20]
   172e4:	movt	r6, #3
   172e8:	ldr	r4, [r6, #8]
   172ec:	sub	r7, r0, r5
   172f0:	cmp	r4, r7
   172f4:	bls	17238 <__assert_fail@plt+0x4f00>
   172f8:	udiv	r0, r2, r4
   172fc:	mul	r0, r0, r4
   17300:	sub	r0, r0, r2
   17304:	add	r8, r4, r0
   17308:	cmp	r7, r8
   1730c:	bls	173c4 <__assert_fail@plt+0x508c>
   17310:	sub	r0, fp, #32
   17314:	mov	r1, #0
   17318:	str	r2, [sp, #28]
   1731c:	bl	1aa0c <__assert_fail@plt+0x86d4>
   17320:	mov	r1, r9
   17324:	mov	r9, r0
   17328:	add	r2, sp, #40	; 0x28
   1732c:	add	r0, r1, r5, lsl #3
   17330:	sub	r1, r7, r8
   17334:	add	r7, r1, #1
   17338:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1733c:	str	r0, [sp, #24]
   17340:	str	r1, [sp, #8]
   17344:	mov	r1, r7
   17348:	bl	19e90 <__assert_fail@plt+0x7b58>
   1734c:	mov	r4, r0
   17350:	cmp	r0, r7
   17354:	bcs	17360 <__assert_fail@plt+0x5028>
   17358:	cmp	r4, #1
   1735c:	bls	17904 <__assert_fail@plt+0x55cc>
   17360:	ldr	r0, [sp, #40]	; 0x28
   17364:	ldr	r8, [sp, #32]
   17368:	ldr	r3, [sp, #8]
   1736c:	add	sl, r9, #9
   17370:	mov	r2, r4
   17374:	str	sl, [sp]
   17378:	str	r0, [sp, #4]
   1737c:	ldr	r0, [sp, #24]
   17380:	cmp	r8, r7
   17384:	movcc	r7, r8
   17388:	mov	r1, r7
   1738c:	bl	1a1a0 <__assert_fail@plt+0x7e68>
   17390:	ldr	r1, [sp, #16]
   17394:	ldr	r2, [sp, #28]
   17398:	cmp	r8, r4
   1739c:	add	r5, r4, r5
   173a0:	movcc	r4, r8
   173a4:	sub	r8, r8, r4
   173a8:	mov	r0, r1
   173ac:	str	sl, [r0, r2, lsl #3]!
   173b0:	add	r2, r2, #1
   173b4:	str	r9, [r0, #4]
   173b8:	mov	r9, r1
   173bc:	ldr	r4, [r6, #8]
   173c0:	b	173c8 <__assert_fail@plt+0x5090>
   173c4:	ldr	r8, [sp, #32]
   173c8:	ldr	r6, [sp, #20]
   173cc:	add	r0, r9, r2, lsl #3
   173d0:	mov	r7, r2
   173d4:	add	r1, r9, r5, lsl #3
   173d8:	sub	r2, r6, r5
   173dc:	lsl	r2, r2, #3
   173e0:	bl	11e7c <memmove@plt>
   173e4:	add	r0, r7, r6
   173e8:	add	r8, r8, r7
   173ec:	sub	r7, r0, r5
   173f0:	str	r8, [sp, #32]
   173f4:	cmp	r4, r7
   173f8:	bcc	17208 <__assert_fail@plt+0x4ed0>
   173fc:	ldr	r0, [sp, #32]
   17400:	cmp	r0, r7
   17404:	bcs	17770 <__assert_fail@plt+0x5438>
   17408:	add	r0, sp, #40	; 0x28
   1740c:	str	r7, [sp, #20]
   17410:	add	r0, r0, #96	; 0x60
   17414:	str	r0, [sp, #28]
   17418:	ldr	r0, [sp, #12]
   1741c:	cmp	r0, #0
   17420:	beq	175e8 <__assert_fail@plt+0x52b0>
   17424:	ldr	r9, [sp, #32]
   17428:	mov	r6, #0
   1742c:	lsl	r8, r9, #3
   17430:	ldr	sl, [sp, #16]
   17434:	movw	r1, #30454	; 0x76f6
   17438:	movt	r1, #2
   1743c:	ldr	r7, [sl, r8]!
   17440:	mov	r0, r7
   17444:	bl	11e28 <strcmp@plt>
   17448:	mov	r4, r0
   1744c:	ldr	r0, [sp, #12]
   17450:	mov	r1, r7
   17454:	bl	11e28 <strcmp@plt>
   17458:	cmp	r4, #0
   1745c:	beq	1747c <__assert_fail@plt+0x5144>
   17460:	cmp	r0, #0
   17464:	bne	1747c <__assert_fail@plt+0x5144>
   17468:	cmp	r6, #0
   1746c:	beq	174b8 <__assert_fail@plt+0x5180>
   17470:	ldr	r7, [sp, #20]
   17474:	add	r5, r6, #9
   17478:	b	1750c <__assert_fail@plt+0x51d4>
   1747c:	movw	r0, #39016	; 0x9868
   17480:	movt	r0, #3
   17484:	ldr	r5, [r0, #44]	; 0x2c
   17488:	cmp	r5, #0
   1748c:	bne	17540 <__assert_fail@plt+0x5208>
   17490:	movw	r2, #38752	; 0x9760
   17494:	mov	r0, #3
   17498:	mov	r1, #1
   1749c:	movt	r2, #3
   174a0:	bl	11ff0 <__fxstat64@plt>
   174a4:	cmp	r0, #0
   174a8:	beq	17530 <__assert_fail@plt+0x51f8>
   174ac:	bl	12164 <__errno_location@plt>
   174b0:	ldr	r5, [r0]
   174b4:	b	17534 <__assert_fail@plt+0x51fc>
   174b8:	add	r0, sp, #36	; 0x24
   174bc:	mov	r1, #0
   174c0:	bl	1aa0c <__assert_fail@plt+0x86d4>
   174c4:	ldr	r4, [sp, #36]	; 0x24
   174c8:	mov	r6, r0
   174cc:	mov	r0, sl
   174d0:	mov	r1, #1
   174d4:	sub	r2, fp, #32
   174d8:	bl	19e90 <__assert_fail@plt+0x7b58>
   174dc:	ldr	r7, [sp, #20]
   174e0:	cmp	r0, #0
   174e4:	beq	17924 <__assert_fail@plt+0x55ec>
   174e8:	mov	r2, r0
   174ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174f0:	add	r5, r6, #9
   174f4:	mov	r1, #0
   174f8:	mov	r3, r4
   174fc:	str	r5, [sp]
   17500:	str	r0, [sp, #4]
   17504:	mov	r0, sl
   17508:	bl	1a1a0 <__assert_fail@plt+0x7e68>
   1750c:	ldr	r0, [sp, #16]
   17510:	str	r5, [sl]
   17514:	add	r0, r0, r9, lsl #3
   17518:	str	r6, [r0, #4]
   1751c:	add	r9, r9, #1
   17520:	add	r8, r8, #8
   17524:	cmp	r9, r7
   17528:	bcc	17430 <__assert_fail@plt+0x50f8>
   1752c:	b	17770 <__assert_fail@plt+0x5438>
   17530:	mvn	r5, #0
   17534:	movw	r0, #39016	; 0x9868
   17538:	movt	r0, #3
   1753c:	str	r5, [r0, #44]	; 0x2c
   17540:	cmn	r5, #1
   17544:	bgt	1776c <__assert_fail@plt+0x5434>
   17548:	cmp	r4, #0
   1754c:	beq	17570 <__assert_fail@plt+0x5238>
   17550:	ldr	r1, [sl]
   17554:	mov	r0, #3
   17558:	add	r2, sp, #40	; 0x28
   1755c:	bl	122f0 <__xstat64@plt>
   17560:	ldr	r7, [sp, #20]
   17564:	cmp	r0, #0
   17568:	bne	175d4 <__assert_fail@plt+0x529c>
   1756c:	b	1758c <__assert_fail@plt+0x5254>
   17570:	mov	r0, #3
   17574:	mov	r1, #0
   17578:	add	r2, sp, #40	; 0x28
   1757c:	bl	11ff0 <__fxstat64@plt>
   17580:	ldr	r7, [sp, #20]
   17584:	cmp	r0, #0
   17588:	bne	175d4 <__assert_fail@plt+0x529c>
   1758c:	ldr	r1, [sp, #28]
   17590:	movw	r0, #38752	; 0x9760
   17594:	movt	r0, #3
   17598:	and	r0, r0, r5, asr #31
   1759c:	ldrd	r2, [r0, #96]	; 0x60
   175a0:	ldrd	r4, [r1]
   175a4:	eor	r1, r5, r3
   175a8:	eor	r2, r4, r2
   175ac:	orrs	r1, r2, r1
   175b0:	bne	175d4 <__assert_fail@plt+0x529c>
   175b4:	ldrd	r0, [r0]
   175b8:	ldr	r2, [sp, #40]	; 0x28
   175bc:	ldr	r3, [sp, #44]	; 0x2c
   175c0:	eor	r1, r3, r1
   175c4:	eor	r0, r2, r0
   175c8:	orrs	r0, r0, r1
   175cc:	beq	17468 <__assert_fail@plt+0x5130>
   175d0:	ldr	r7, [sp, #20]
   175d4:	add	r9, r9, #1
   175d8:	add	r8, r8, #8
   175dc:	cmp	r9, r7
   175e0:	bcc	17430 <__assert_fail@plt+0x50f8>
   175e4:	b	17770 <__assert_fail@plt+0x5438>
   175e8:	ldr	r0, [sp, #16]
   175ec:	ldr	r5, [sp, #32]
   175f0:	movw	r8, #30454	; 0x76f6
   175f4:	movw	r9, #39016	; 0x9868
   175f8:	mov	sl, #0
   175fc:	movt	r8, #2
   17600:	movt	r9, #3
   17604:	add	r4, r0, r5, lsl #3
   17608:	ldr	r0, [r4]
   1760c:	mov	r1, r8
   17610:	bl	11e28 <strcmp@plt>
   17614:	ldr	r6, [r9, #44]	; 0x2c
   17618:	mov	r7, r0
   1761c:	cmp	r6, #0
   17620:	bne	17654 <__assert_fail@plt+0x531c>
   17624:	movw	r2, #38752	; 0x9760
   17628:	mov	r0, #3
   1762c:	mov	r1, #1
   17630:	movt	r2, #3
   17634:	bl	11ff0 <__fxstat64@plt>
   17638:	cmp	r0, #0
   1763c:	beq	1764c <__assert_fail@plt+0x5314>
   17640:	bl	12164 <__errno_location@plt>
   17644:	ldr	r6, [r0]
   17648:	b	17650 <__assert_fail@plt+0x5318>
   1764c:	mvn	r6, #0
   17650:	str	r6, [r9, #44]	; 0x2c
   17654:	cmn	r6, #1
   17658:	bgt	1776c <__assert_fail@plt+0x5434>
   1765c:	cmp	r7, #0
   17660:	beq	17684 <__assert_fail@plt+0x534c>
   17664:	ldr	r1, [r4]
   17668:	mov	r0, #3
   1766c:	add	r2, sp, #40	; 0x28
   17670:	bl	122f0 <__xstat64@plt>
   17674:	ldr	r7, [sp, #20]
   17678:	cmp	r0, #0
   1767c:	bne	17758 <__assert_fail@plt+0x5420>
   17680:	b	176a0 <__assert_fail@plt+0x5368>
   17684:	mov	r0, #3
   17688:	mov	r1, #0
   1768c:	add	r2, sp, #40	; 0x28
   17690:	bl	11ff0 <__fxstat64@plt>
   17694:	ldr	r7, [sp, #20]
   17698:	cmp	r0, #0
   1769c:	bne	17758 <__assert_fail@plt+0x5420>
   176a0:	ldr	r1, [sp, #28]
   176a4:	movw	r0, #38752	; 0x9760
   176a8:	movt	r0, #3
   176ac:	and	r0, r0, r6, asr #31
   176b0:	ldrd	r2, [r0, #96]	; 0x60
   176b4:	ldrd	r6, [r1]
   176b8:	eor	r1, r7, r3
   176bc:	eor	r2, r6, r2
   176c0:	orrs	r1, r2, r1
   176c4:	bne	176f8 <__assert_fail@plt+0x53c0>
   176c8:	ldrd	r0, [r0]
   176cc:	ldr	r2, [sp, #40]	; 0x28
   176d0:	ldr	r3, [sp, #44]	; 0x2c
   176d4:	ldr	r7, [sp, #20]
   176d8:	eor	r1, r3, r1
   176dc:	eor	r0, r2, r0
   176e0:	orrs	r0, r0, r1
   176e4:	bne	17758 <__assert_fail@plt+0x5420>
   176e8:	cmp	sl, #0
   176ec:	beq	17700 <__assert_fail@plt+0x53c8>
   176f0:	add	r6, sl, #9
   176f4:	b	17754 <__assert_fail@plt+0x541c>
   176f8:	ldr	r7, [sp, #20]
   176fc:	b	17758 <__assert_fail@plt+0x5420>
   17700:	add	r0, sp, #36	; 0x24
   17704:	mov	r1, #0
   17708:	bl	1aa0c <__assert_fail@plt+0x86d4>
   1770c:	ldr	r7, [sp, #36]	; 0x24
   17710:	mov	sl, r0
   17714:	mov	r0, r4
   17718:	mov	r1, #1
   1771c:	sub	r2, fp, #32
   17720:	bl	19e90 <__assert_fail@plt+0x7b58>
   17724:	cmp	r0, #0
   17728:	beq	1792c <__assert_fail@plt+0x55f4>
   1772c:	mov	r2, r0
   17730:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17734:	add	r6, sl, #9
   17738:	mov	r1, #0
   1773c:	mov	r3, r7
   17740:	str	r6, [sp]
   17744:	str	r0, [sp, #4]
   17748:	mov	r0, r4
   1774c:	bl	1a1a0 <__assert_fail@plt+0x7e68>
   17750:	ldr	r7, [sp, #20]
   17754:	stm	r4, {r6, sl}
   17758:	add	r5, r5, #1
   1775c:	add	r4, r4, #8
   17760:	cmp	r5, r7
   17764:	bcc	17608 <__assert_fail@plt+0x52d0>
   17768:	b	17770 <__assert_fail@plt+0x5438>
   1776c:	ldr	r7, [sp, #20]
   17770:	ldr	r6, [sp, #16]
   17774:	ldr	r9, [sp, #32]
   17778:	sub	r8, fp, #32
   1777c:	sub	r5, r6, #8
   17780:	add	r0, r6, #8
   17784:	str	r0, [sp, #28]
   17788:	b	177f0 <__assert_fail@plt+0x54b8>
   1778c:	add	r4, r0, #9
   17790:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17794:	mov	r7, r0
   17798:	cmp	r9, sl
   1779c:	mov	r0, r9
   177a0:	mov	r2, sl
   177a4:	stm	sp, {r4, r6}
   177a8:	str	r9, [sp, #32]
   177ac:	mov	r9, sl
   177b0:	ldr	r6, [sp, #16]
   177b4:	movcc	r9, r0
   177b8:	mov	r1, r9
   177bc:	mov	r0, r6
   177c0:	bl	1a1a0 <__assert_fail@plt+0x7e68>
   177c4:	stm	r6, {r4, r7}
   177c8:	add	r1, r6, sl, lsl #3
   177cc:	ldr	r0, [sp, #20]
   177d0:	sub	r4, r0, sl
   177d4:	ldr	r0, [sp, #28]
   177d8:	lsl	r2, r4, #3
   177dc:	bl	11e7c <memmove@plt>
   177e0:	ldr	r0, [sp, #32]
   177e4:	add	r7, r4, #1
   177e8:	add	r0, r0, #1
   177ec:	sub	r9, r0, r9
   177f0:	mov	r0, r6
   177f4:	mov	r1, r7
   177f8:	add	r2, sp, #40	; 0x28
   177fc:	bl	19e90 <__assert_fail@plt+0x7b58>
   17800:	mov	sl, r0
   17804:	cmp	r0, r7
   17808:	str	r7, [sp, #20]
   1780c:	bne	17844 <__assert_fail@plt+0x550c>
   17810:	ldr	r0, [sp, #12]
   17814:	movw	r1, #31331	; 0x7a63
   17818:	movt	r1, #2
   1781c:	bl	179bc <__assert_fail@plt+0x5684>
   17820:	cmp	r0, #0
   17824:	bne	17884 <__assert_fail@plt+0x554c>
   17828:	bl	12164 <__errno_location@plt>
   1782c:	cmp	r7, #3
   17830:	bcc	178cc <__assert_fail@plt+0x5594>
   17834:	ldr	r0, [r0]
   17838:	cmp	r0, #24
   1783c:	beq	1784c <__assert_fail@plt+0x5514>
   17840:	b	178cc <__assert_fail@plt+0x5594>
   17844:	cmp	sl, #2
   17848:	bls	178e8 <__assert_fail@plt+0x55b0>
   1784c:	ldr	r6, [sp, #40]	; 0x28
   17850:	sub	r4, r6, #4
   17854:	ldr	r1, [r5, sl, lsl #3]
   17858:	ldr	r0, [r4, sl, lsl #2]
   1785c:	bl	17158 <__assert_fail@plt+0x4e20>
   17860:	sub	sl, sl, #1
   17864:	mov	r1, #0
   17868:	mov	r0, r8
   1786c:	cmp	sl, #2
   17870:	movwhi	r1, #1
   17874:	bl	1aa0c <__assert_fail@plt+0x86d4>
   17878:	cmp	r0, #0
   1787c:	beq	17854 <__assert_fail@plt+0x551c>
   17880:	b	1778c <__assert_fail@plt+0x5454>
   17884:	mov	r3, r0
   17888:	ldr	r0, [sp, #40]	; 0x28
   1788c:	ldr	r1, [sp, #12]
   17890:	mov	r2, r7
   17894:	str	r1, [sp]
   17898:	str	r0, [sp, #4]
   1789c:	mov	r0, r6
   178a0:	mov	r1, r9
   178a4:	bl	1a1a0 <__assert_fail@plt+0x7e68>
   178a8:	sub	sp, fp, #28
   178ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178b0:	movw	r1, #30319	; 0x766f
   178b4:	mov	r0, #0
   178b8:	mov	r2, #5
   178bc:	movt	r1, #2
   178c0:	bl	11f54 <dcgettext@plt>
   178c4:	ldr	r1, [r7, r4, lsl #3]
   178c8:	bl	17948 <__assert_fail@plt+0x5610>
   178cc:	movw	r1, #30319	; 0x766f
   178d0:	mov	r0, #0
   178d4:	mov	r2, #5
   178d8:	movt	r1, #2
   178dc:	bl	11f54 <dcgettext@plt>
   178e0:	ldr	r1, [sp, #12]
   178e4:	bl	17948 <__assert_fail@plt+0x5610>
   178e8:	movw	r1, #30319	; 0x766f
   178ec:	mov	r0, #0
   178f0:	mov	r2, #5
   178f4:	movt	r1, #2
   178f8:	bl	11f54 <dcgettext@plt>
   178fc:	ldr	r1, [r6, sl, lsl #3]
   17900:	bl	17948 <__assert_fail@plt+0x5610>
   17904:	movw	r1, #30319	; 0x766f
   17908:	mov	r0, #0
   1790c:	mov	r2, #5
   17910:	movt	r1, #2
   17914:	bl	11f54 <dcgettext@plt>
   17918:	ldr	r1, [sp, #24]
   1791c:	ldr	r1, [r1, r4, lsl #3]
   17920:	bl	17948 <__assert_fail@plt+0x5610>
   17924:	ldr	r0, [sp, #16]
   17928:	add	r4, r0, r8
   1792c:	movw	r1, #30319	; 0x766f
   17930:	mov	r0, #0
   17934:	mov	r2, #5
   17938:	movt	r1, #2
   1793c:	bl	11f54 <dcgettext@plt>
   17940:	ldr	r1, [r4]
   17944:	bl	17948 <__assert_fail@plt+0x5610>
   17948:	push	{fp, lr}
   1794c:	mov	fp, sp
   17950:	sub	sp, sp, #8
   17954:	mov	r6, r1
   17958:	mov	r4, r0
   1795c:	bl	12164 <__errno_location@plt>
   17960:	ldr	r5, [r0]
   17964:	cmp	r6, #0
   17968:	bne	17984 <__assert_fail@plt+0x564c>
   1796c:	movw	r1, #31616	; 0x7b80
   17970:	mov	r0, #0
   17974:	mov	r2, #5
   17978:	movt	r1, #2
   1797c:	bl	11f54 <dcgettext@plt>
   17980:	mov	r6, r0
   17984:	mov	r0, #0
   17988:	mov	r1, #3
   1798c:	mov	r2, r6
   17990:	bl	219dc <__assert_fail@plt+0xf6a4>
   17994:	movw	r2, #31609	; 0x7b79
   17998:	str	r0, [sp]
   1799c:	mov	r0, #2
   179a0:	mov	r1, r5
   179a4:	mov	r3, r4
   179a8:	movt	r2, #2
   179ac:	bl	12080 <error@plt>
   179b0:	ldr	r1, [r1]
   179b4:	ldr	r0, [r0]
   179b8:	b	11e28 <strcmp@plt>
   179bc:	push	{r4, r5, r6, r7, fp, lr}
   179c0:	add	fp, sp, #16
   179c4:	mov	r4, r0
   179c8:	ldrb	r0, [r1]
   179cc:	cmp	r0, #119	; 0x77
   179d0:	beq	17a1c <__assert_fail@plt+0x56e4>
   179d4:	cmp	r0, #114	; 0x72
   179d8:	bne	17aec <__assert_fail@plt+0x57b4>
   179dc:	mov	r5, r1
   179e0:	movw	r1, #30454	; 0x76f6
   179e4:	mov	r0, r4
   179e8:	movt	r1, #2
   179ec:	bl	11e28 <strcmp@plt>
   179f0:	cmp	r0, #0
   179f4:	beq	17ab4 <__assert_fail@plt+0x577c>
   179f8:	mov	r0, r4
   179fc:	mov	r1, #524288	; 0x80000
   17a00:	bl	1208c <open64@plt>
   17a04:	cmp	r0, #0
   17a08:	blt	17ad4 <__assert_fail@plt+0x579c>
   17a0c:	mov	r1, r5
   17a10:	bl	11df8 <fdopen@plt>
   17a14:	mov	r4, r0
   17a18:	b	17ad8 <__assert_fail@plt+0x57a0>
   17a1c:	cmp	r4, #0
   17a20:	beq	17aa0 <__assert_fail@plt+0x5768>
   17a24:	mov	r0, #1
   17a28:	mov	r2, #0
   17a2c:	mov	r3, #0
   17a30:	bl	11f24 <ftruncate64@plt>
   17a34:	cmp	r0, #0
   17a38:	beq	17aa0 <__assert_fail@plt+0x5768>
   17a3c:	bl	12164 <__errno_location@plt>
   17a40:	movw	r7, #39016	; 0x9868
   17a44:	mov	r6, r0
   17a48:	movt	r7, #3
   17a4c:	ldr	r5, [r6]
   17a50:	ldr	r0, [r7, #44]	; 0x2c
   17a54:	cmp	r0, #0
   17a58:	bne	17a80 <__assert_fail@plt+0x5748>
   17a5c:	movw	r2, #38752	; 0x9760
   17a60:	mov	r0, #3
   17a64:	mov	r1, #1
   17a68:	movt	r2, #3
   17a6c:	bl	11ff0 <__fxstat64@plt>
   17a70:	cmp	r0, #0
   17a74:	ldrne	r0, [r6]
   17a78:	mvneq	r0, #0
   17a7c:	str	r0, [r7, #44]	; 0x2c
   17a80:	cmn	r0, #1
   17a84:	bgt	17b0c <__assert_fail@plt+0x57d4>
   17a88:	movw	r0, #38752	; 0x9760
   17a8c:	movt	r0, #3
   17a90:	ldr	r0, [r0, #16]
   17a94:	and	r0, r0, #61440	; 0xf000
   17a98:	cmp	r0, #32768	; 0x8000
   17a9c:	beq	17b0c <__assert_fail@plt+0x57d4>
   17aa0:	movw	r0, #37588	; 0x92d4
   17aa4:	movt	r0, #3
   17aa8:	ldr	r4, [r0]
   17aac:	mov	r0, r4
   17ab0:	pop	{r4, r5, r6, r7, fp, pc}
   17ab4:	movw	r0, #39016	; 0x9868
   17ab8:	mov	r1, #1
   17abc:	movt	r0, #3
   17ac0:	strb	r1, [r0, #4]
   17ac4:	movw	r0, #37584	; 0x92d0
   17ac8:	movt	r0, #3
   17acc:	ldr	r4, [r0]
   17ad0:	b	17ad8 <__assert_fail@plt+0x57a0>
   17ad4:	mov	r4, #0
   17ad8:	mov	r0, r4
   17adc:	mov	r1, #2
   17ae0:	bl	1d298 <__assert_fail@plt+0xaf60>
   17ae4:	mov	r0, r4
   17ae8:	pop	{r4, r5, r6, r7, fp, pc}
   17aec:	movw	r0, #30352	; 0x7690
   17af0:	movw	r1, #28375	; 0x6ed7
   17af4:	movw	r3, #30393	; 0x76b9
   17af8:	movw	r2, #981	; 0x3d5
   17afc:	movt	r0, #2
   17b00:	movt	r1, #2
   17b04:	movt	r3, #2
   17b08:	bl	12338 <__assert_fail@plt>
   17b0c:	movw	r1, #30331	; 0x767b
   17b10:	mov	r0, #0
   17b14:	mov	r2, #5
   17b18:	movt	r1, #2
   17b1c:	bl	11f54 <dcgettext@plt>
   17b20:	mov	r6, r0
   17b24:	mov	r0, #0
   17b28:	mov	r1, #3
   17b2c:	mov	r2, r4
   17b30:	bl	219dc <__assert_fail@plt+0xf6a4>
   17b34:	mov	r3, r0
   17b38:	mov	r0, #2
   17b3c:	mov	r1, r5
   17b40:	mov	r2, r6
   17b44:	bl	12080 <error@plt>
   17b48:	ldrb	r2, [r0, #24]
   17b4c:	cmp	r2, #0
   17b50:	bne	17b60 <__assert_fail@plt+0x5828>
   17b54:	ldrb	r2, [r0, #25]
   17b58:	cmp	r2, #0
   17b5c:	beq	17b68 <__assert_fail@plt+0x5830>
   17b60:	mov	r2, #98	; 0x62
   17b64:	strb	r2, [r1], #1
   17b68:	ldr	r2, [r0, #16]
   17b6c:	movw	r3, #38240	; 0x9560
   17b70:	movt	r3, #3
   17b74:	cmp	r2, r3
   17b78:	movw	r3, #37984	; 0x9460
   17b7c:	moveq	r2, #100	; 0x64
   17b80:	movt	r3, #3
   17b84:	strbeq	r2, [r1], #1
   17b88:	ldr	r2, [r0, #20]
   17b8c:	cmp	r2, #0
   17b90:	movne	r2, #102	; 0x66
   17b94:	strbne	r2, [r1], #1
   17b98:	ldrb	r2, [r0, #28]
   17b9c:	cmp	r2, #0
   17ba0:	movne	r2, #103	; 0x67
   17ba4:	strbne	r2, [r1], #1
   17ba8:	ldrb	r2, [r0, #29]
   17bac:	cmp	r2, #0
   17bb0:	movne	r2, #104	; 0x68
   17bb4:	strbne	r2, [r1], #1
   17bb8:	ldr	r2, [r0, #16]
   17bbc:	cmp	r2, r3
   17bc0:	moveq	r2, #105	; 0x69
   17bc4:	strbeq	r2, [r1], #1
   17bc8:	ldrb	r2, [r0, #30]
   17bcc:	cmp	r2, #0
   17bd0:	movne	r2, #77	; 0x4d
   17bd4:	strbne	r2, [r1], #1
   17bd8:	ldrb	r2, [r0, #26]
   17bdc:	cmp	r2, #0
   17be0:	movne	r2, #110	; 0x6e
   17be4:	strbne	r2, [r1], #1
   17be8:	ldrb	r2, [r0, #27]
   17bec:	cmp	r2, #0
   17bf0:	movne	r2, #82	; 0x52
   17bf4:	strbne	r2, [r1], #1
   17bf8:	ldrb	r2, [r0, #31]
   17bfc:	cmp	r2, #0
   17c00:	movne	r2, #114	; 0x72
   17c04:	strbne	r2, [r1], #1
   17c08:	ldrb	r0, [r0, #32]
   17c0c:	cmp	r0, #0
   17c10:	movne	r0, #86	; 0x56
   17c14:	strbne	r0, [r1], #1
   17c18:	mov	r0, #0
   17c1c:	strb	r0, [r1]
   17c20:	bx	lr
   17c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c28:	add	fp, sp, #28
   17c2c:	sub	sp, sp, #52	; 0x34
   17c30:	movw	r7, #39016	; 0x9868
   17c34:	mov	lr, r0
   17c38:	mov	r3, r2
   17c3c:	mov	r5, #10
   17c40:	movt	r7, #3
   17c44:	ldrb	r2, [lr, #24]
   17c48:	ldrb	r0, [r7, #8]
   17c4c:	cmp	r0, #0
   17c50:	mov	r0, #0
   17c54:	movwne	r5, #0
   17c58:	cmp	r2, #0
   17c5c:	beq	17c68 <__assert_fail@plt+0x5930>
   17c60:	sub	sp, fp, #28
   17c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c68:	ldr	r0, [lr, #20]
   17c6c:	str	r1, [sp, #16]
   17c70:	ldr	r2, [lr, #16]
   17c74:	ldr	r1, [lr, #4]
   17c78:	str	r3, [sp, #4]
   17c7c:	str	r0, [sp, #24]
   17c80:	ldr	r0, [r7, #20]
   17c84:	cmp	r1, r2
   17c88:	str	r0, [sp, #40]	; 0x28
   17c8c:	movw	r0, #37348	; 0x91e4
   17c90:	movt	r0, #3
   17c94:	ldr	r4, [r0, #12]
   17c98:	beq	17cc4 <__assert_fail@plt+0x598c>
   17c9c:	ldr	r0, [lr]
   17ca0:	mov	r6, lr
   17ca4:	add	r1, r0, r1
   17ca8:	sub	r1, r1, r2
   17cac:	bl	11e7c <memmove@plt>
   17cb0:	ldr	r1, [r6, #16]
   17cb4:	mov	lr, r6
   17cb8:	mov	r0, #0
   17cbc:	str	r1, [r6, #4]
   17cc0:	str	r0, [r6, #8]
   17cc4:	ldr	r0, [sp, #24]
   17cc8:	movw	r7, #37728	; 0x9360
   17ccc:	sub	r4, r4, #18
   17cd0:	str	r5, [sp, #28]
   17cd4:	str	lr, [sp, #20]
   17cd8:	movt	r7, #3
   17cdc:	add	r6, r0, #1
   17ce0:	rsb	r0, r0, #0
   17ce4:	str	r0, [sp, #8]
   17ce8:	str	r6, [sp, #12]
   17cec:	b	17d20 <__assert_fail@plt+0x59e8>
   17cf0:	lsr	r1, r1, #4
   17cf4:	mov	r2, #16
   17cf8:	mov	r5, lr
   17cfc:	str	r1, [fp, #-32]	; 0xffffffe0
   17d00:	sub	r1, fp, #32
   17d04:	bl	2367c <__assert_fail@plt+0x11344>
   17d08:	str	r0, [r5]
   17d0c:	mov	lr, r5
   17d10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17d14:	lsl	r0, r0, #4
   17d18:	str	r0, [r5, #12]
   17d1c:	ldr	r1, [r5, #4]
   17d20:	ldr	r8, [lr]
   17d24:	ldr	r2, [lr, #12]
   17d28:	ldr	r0, [lr, #8]
   17d2c:	add	r5, r8, r2
   17d30:	ldr	r2, [sp, #8]
   17d34:	cmp	r0, #0
   17d38:	add	r9, r8, r1
   17d3c:	rsbne	r1, r0, #0
   17d40:	mla	r3, r0, r2, r5
   17d44:	movne	r2, r5
   17d48:	sub	r5, r5, r0, lsl #4
   17d4c:	ldrne	r1, [r2, r1, lsl #4]!
   17d50:	sub	sl, r3, r9
   17d54:	ldrne	r2, [r2, #4]
   17d58:	addne	r8, r1, r2
   17d5c:	cmp	r6, sl
   17d60:	bcs	1800c <__assert_fail@plt+0x5cd4>
   17d64:	str	r5, [fp, #-36]	; 0xffffffdc
   17d68:	ldr	r5, [sp, #16]
   17d6c:	sub	r0, sl, #1
   17d70:	mov	r1, #1
   17d74:	udiv	r6, r0, r6
   17d78:	mov	r0, r9
   17d7c:	mov	r2, r6
   17d80:	mov	r3, r5
   17d84:	bl	122d8 <fread_unlocked@plt>
   17d88:	add	r3, r9, r0
   17d8c:	cmp	r0, r6
   17d90:	bne	17d9c <__assert_fail@plt+0x5a64>
   17d94:	ldr	r1, [sp, #28]
   17d98:	b	17de4 <__assert_fail@plt+0x5aac>
   17d9c:	ldr	r2, [r5]
   17da0:	ldr	r1, [sp, #28]
   17da4:	ldr	r6, [sp, #20]
   17da8:	tst	r2, #32
   17dac:	bne	18064 <__assert_fail@plt+0x5d2c>
   17db0:	tst	r2, #16
   17db4:	beq	17de4 <__assert_fail@plt+0x5aac>
   17db8:	mov	r2, #1
   17dbc:	strb	r2, [r6, #24]
   17dc0:	ldr	r2, [r6]
   17dc4:	cmp	r2, r3
   17dc8:	beq	18058 <__assert_fail@plt+0x5d20>
   17dcc:	cmp	r8, r3
   17dd0:	mov	r2, r8
   17dd4:	beq	17de8 <__assert_fail@plt+0x5ab0>
   17dd8:	ldrb	r2, [r3, #-1]
   17ddc:	cmp	r2, r1
   17de0:	strbne	r1, [r3], #1
   17de4:	mov	r2, r3
   17de8:	sub	sl, sl, r0
   17dec:	str	r2, [sp, #32]
   17df0:	sub	r2, r2, r9
   17df4:	mov	r0, r9
   17df8:	bl	121d0 <memchr@plt>
   17dfc:	cmp	r0, #0
   17e00:	beq	17fe8 <__assert_fail@plt+0x5cb0>
   17e04:	ldr	r5, [fp, #-36]	; 0xffffffdc
   17e08:	ldr	r2, [sp, #40]	; 0x28
   17e0c:	mov	r6, r8
   17e10:	mov	lr, r5
   17e14:	b	17e20 <__assert_fail@plt+0x5ae8>
   17e18:	ldr	r4, [sp, #36]	; 0x24
   17e1c:	b	17fac <__assert_fail@plt+0x5c74>
   17e20:	mov	r8, r0
   17e24:	mov	r1, #0
   17e28:	strb	r1, [r8], #1
   17e2c:	str	r6, [r5, #-16]!
   17e30:	sub	r9, r8, r6
   17e34:	str	r5, [fp, #-36]	; 0xffffffdc
   17e38:	cmp	r4, r9
   17e3c:	str	r9, [r5, #4]
   17e40:	movls	r4, r9
   17e44:	cmp	r2, #0
   17e48:	beq	17fb0 <__assert_fail@plt+0x5c78>
   17e4c:	ldr	r1, [r2, #8]
   17e50:	str	r4, [sp, #36]	; 0x24
   17e54:	cmn	r1, #1
   17e58:	beq	17e74 <__assert_fail@plt+0x5b3c>
   17e5c:	mov	r0, r6
   17e60:	mov	r1, r9
   17e64:	mov	r4, lr
   17e68:	bl	19c6c <__assert_fail@plt+0x7934>
   17e6c:	ldr	r2, [sp, #40]	; 0x28
   17e70:	mov	lr, r4
   17e74:	str	r0, [lr, #-4]
   17e78:	ldr	r4, [r2]
   17e7c:	cmn	r4, #1
   17e80:	beq	17f04 <__assert_fail@plt+0x5bcc>
   17e84:	movw	r1, #37348	; 0x91e4
   17e88:	ldr	ip, [r2, #4]
   17e8c:	add	r0, r6, r9
   17e90:	movt	r1, #3
   17e94:	sub	r0, r0, #1
   17e98:	ldr	r3, [r1, #4]
   17e9c:	cmp	r3, #256	; 0x100
   17ea0:	bne	17f2c <__assert_fail@plt+0x5bf4>
   17ea4:	cmp	r0, r6
   17ea8:	bls	17f64 <__assert_fail@plt+0x5c2c>
   17eac:	cmp	r4, #0
   17eb0:	bne	17ebc <__assert_fail@plt+0x5b84>
   17eb4:	b	17f64 <__assert_fail@plt+0x5c2c>
   17eb8:	add	r6, r6, #1
   17ebc:	cmp	r6, r0
   17ec0:	bcs	17edc <__assert_fail@plt+0x5ba4>
   17ec4:	ldrb	r1, [r6]
   17ec8:	ldrb	r1, [r7, r1]
   17ecc:	cmp	r1, #0
   17ed0:	bne	17eb8 <__assert_fail@plt+0x5b80>
   17ed4:	b	17edc <__assert_fail@plt+0x5ba4>
   17ed8:	add	r6, r6, #1
   17edc:	cmp	r6, r0
   17ee0:	bcs	17ef4 <__assert_fail@plt+0x5bbc>
   17ee4:	ldrb	r1, [r6]
   17ee8:	ldrb	r1, [r7, r1]
   17eec:	cmp	r1, #0
   17ef0:	beq	17ed8 <__assert_fail@plt+0x5ba0>
   17ef4:	sub	r4, r4, #1
   17ef8:	cmp	r6, r0
   17efc:	bcc	17eac <__assert_fail@plt+0x5b74>
   17f00:	b	17f64 <__assert_fail@plt+0x5c2c>
   17f04:	ldrb	r0, [r2, #24]
   17f08:	cmp	r0, #0
   17f0c:	beq	17e18 <__assert_fail@plt+0x5ae0>
   17f10:	ldr	r4, [sp, #36]	; 0x24
   17f14:	sub	r6, r6, #1
   17f18:	ldrb	r0, [r6, #1]!
   17f1c:	ldrb	r0, [r7, r0]
   17f20:	cmp	r0, #0
   17f24:	bne	17f18 <__assert_fail@plt+0x5be0>
   17f28:	b	17fac <__assert_fail@plt+0x5c74>
   17f2c:	cmp	r0, r6
   17f30:	bls	17f64 <__assert_fail@plt+0x5c2c>
   17f34:	cmp	r4, #0
   17f38:	beq	17f64 <__assert_fail@plt+0x5c2c>
   17f3c:	cmp	r6, r0
   17f40:	bcs	17f58 <__assert_fail@plt+0x5c20>
   17f44:	ldrb	r1, [r6], #1
   17f48:	cmp	r6, r0
   17f4c:	bcs	17f58 <__assert_fail@plt+0x5c20>
   17f50:	cmp	r3, r1
   17f54:	bne	17f44 <__assert_fail@plt+0x5c0c>
   17f58:	sub	r4, r4, #1
   17f5c:	cmp	r6, r0
   17f60:	bcc	17f34 <__assert_fail@plt+0x5bfc>
   17f64:	cmp	r6, r0
   17f68:	bcs	17f9c <__assert_fail@plt+0x5c64>
   17f6c:	ldrb	r1, [r2, #24]
   17f70:	ldr	r4, [sp, #36]	; 0x24
   17f74:	cmp	r1, #0
   17f78:	beq	17fa0 <__assert_fail@plt+0x5c68>
   17f7c:	ldrb	r1, [r6]
   17f80:	ldrb	r1, [r7, r1]
   17f84:	cmp	r1, #0
   17f88:	beq	17fa0 <__assert_fail@plt+0x5c68>
   17f8c:	add	r6, r6, #1
   17f90:	cmp	r6, r0
   17f94:	bcc	17f7c <__assert_fail@plt+0x5c44>
   17f98:	b	17fa0 <__assert_fail@plt+0x5c68>
   17f9c:	ldr	r4, [sp, #36]	; 0x24
   17fa0:	add	r6, r6, ip
   17fa4:	cmp	r0, r6
   17fa8:	movcc	r6, r0
   17fac:	str	r6, [lr, #-8]
   17fb0:	ldr	r0, [sp, #24]
   17fb4:	ldr	r1, [sp, #28]
   17fb8:	sub	sl, sl, r0
   17fbc:	ldr	r0, [sp, #32]
   17fc0:	sub	r2, r0, r8
   17fc4:	mov	r0, r8
   17fc8:	bl	121d0 <memchr@plt>
   17fcc:	ldr	r5, [fp, #-36]	; 0xffffffdc
   17fd0:	ldr	r2, [sp, #40]	; 0x28
   17fd4:	cmp	r0, #0
   17fd8:	mov	r6, r8
   17fdc:	mov	lr, r5
   17fe0:	bne	17e20 <__assert_fail@plt+0x5ae8>
   17fe4:	b	17fec <__assert_fail@plt+0x5cb4>
   17fe8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   17fec:	ldr	lr, [sp, #20]
   17ff0:	ldr	r2, [sp, #32]
   17ff4:	ldr	r6, [sp, #12]
   17ff8:	ldrb	r0, [lr, #24]
   17ffc:	mov	r9, r2
   18000:	cmp	r0, #0
   18004:	beq	17d5c <__assert_fail@plt+0x5a24>
   18008:	b	18010 <__assert_fail@plt+0x5cd8>
   1800c:	mov	r2, r9
   18010:	ldr	r0, [lr]
   18014:	ldr	r1, [lr, #12]
   18018:	add	r3, r0, r1
   1801c:	sub	ip, r2, r0
   18020:	subs	r3, r3, r5
   18024:	str	ip, [lr, #4]
   18028:	asr	r3, r3, #4
   1802c:	str	r3, [lr, #8]
   18030:	beq	17cf0 <__assert_fail@plt+0x59b8>
   18034:	movw	r1, #37348	; 0x91e4
   18038:	sub	r0, r2, r8
   1803c:	str	r0, [lr, #16]
   18040:	add	r0, r4, #18
   18044:	movt	r1, #3
   18048:	str	r0, [r1, #12]
   1804c:	mov	r0, #1
   18050:	sub	sp, fp, #28
   18054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18058:	mov	r0, #0
   1805c:	sub	sp, fp, #28
   18060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18064:	movw	r1, #31171	; 0x79c3
   18068:	mov	r0, #0
   1806c:	mov	r2, #5
   18070:	movt	r1, #2
   18074:	bl	11f54 <dcgettext@plt>
   18078:	ldr	r1, [sp, #4]
   1807c:	bl	17948 <__assert_fail@plt+0x5610>
   18080:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18084:	add	fp, sp, #28
   18088:	sub	sp, sp, #4
   1808c:	vpush	{d8}
   18090:	sub	sp, sp, #248	; 0xf8
   18094:	sub	sp, sp, #8192	; 0x2000
   18098:	movw	r6, #39016	; 0x9868
   1809c:	mov	r2, r1
   180a0:	mov	r7, r0
   180a4:	movt	r6, #3
   180a8:	ldr	ip, [r6, #20]
   180ac:	cmp	ip, #0
   180b0:	beq	19394 <__assert_fail@plt+0x705c>
   180b4:	sub	lr, fp, #3072	; 0xc00
   180b8:	add	r0, sp, #4080	; 0xff0
   180bc:	ldr	sl, [r2, #8]
   180c0:	ldr	r9, [r7, #8]
   180c4:	ldr	r4, [r7, #12]
   180c8:	movw	r8, #37728	; 0x9360
   180cc:	str	r2, [sp, #48]	; 0x30
   180d0:	str	r7, [sp, #52]	; 0x34
   180d4:	sub	r1, lr, #1016	; 0x3f8
   180d8:	ldr	lr, [r2, #12]
   180dc:	add	r0, r0, #156	; 0x9c
   180e0:	movt	r8, #3
   180e4:	str	r0, [sp, #16]
   180e8:	add	r1, r1, #16
   180ec:	str	r1, [sp]
   180f0:	b	18100 <__assert_fail@plt+0x5dc8>
   180f4:	add	sl, sl, r0
   180f8:	cmp	r3, sl
   180fc:	movcc	sl, r3
   18100:	movw	r0, #39016	; 0x9868
   18104:	cmp	sl, lr
   18108:	ldr	r5, [ip, #16]
   1810c:	ldr	r3, [ip, #20]
   18110:	str	ip, [sp, #68]	; 0x44
   18114:	movt	r0, #3
   18118:	movhi	lr, sl
   1811c:	cmp	r9, r4
   18120:	ldrb	r0, [r0]
   18124:	movhi	r4, r9
   18128:	sub	r6, lr, sl
   1812c:	sub	r7, r4, r9
   18130:	cmp	r0, #0
   18134:	bne	18180 <__assert_fail@plt+0x5e48>
   18138:	ldrb	r0, [ip, #26]
   1813c:	cmp	r0, #0
   18140:	bne	18180 <__assert_fail@plt+0x5e48>
   18144:	ldrb	r0, [ip, #28]
   18148:	cmp	r0, #0
   1814c:	bne	18180 <__assert_fail@plt+0x5e48>
   18150:	ldrb	r0, [ip, #29]
   18154:	cmp	r0, #0
   18158:	bne	18180 <__assert_fail@plt+0x5e48>
   1815c:	ldrb	r0, [ip, #30]
   18160:	cmp	r0, #0
   18164:	bne	18180 <__assert_fail@plt+0x5e48>
   18168:	ldrb	r0, [ip, #27]
   1816c:	cmp	r0, #0
   18170:	bne	18180 <__assert_fail@plt+0x5e48>
   18174:	ldrb	r0, [ip, #32]
   18178:	cmp	r0, #0
   1817c:	beq	1916c <__assert_fail@plt+0x6e34>
   18180:	orrs	r0, r3, r5
   18184:	movwne	r0, #1
   18188:	str	r0, [sp, #64]	; 0x40
   1818c:	beq	1823c <__assert_fail@plt+0x5f04>
   18190:	add	r0, r6, r7
   18194:	str	r4, [sp, #60]	; 0x3c
   18198:	mov	r1, #0
   1819c:	mov	r4, #0
   181a0:	add	r2, sp, #80	; 0x50
   181a4:	str	r3, [sp, #76]	; 0x4c
   181a8:	str	lr, [sp, #36]	; 0x24
   181ac:	add	r0, r0, #2
   181b0:	str	r1, [sp, #56]	; 0x38
   181b4:	cmp	r0, #4000	; 0xfa0
   181b8:	bls	181cc <__assert_fail@plt+0x5e94>
   181bc:	bl	234d0 <__assert_fail@plt+0x11198>
   181c0:	ldr	ip, [sp, #68]	; 0x44
   181c4:	mov	r2, r0
   181c8:	str	r0, [sp, #56]	; 0x38
   181cc:	add	lr, r2, r7
   181d0:	cmp	r7, #0
   181d4:	mov	r0, r2
   181d8:	str	r2, [sp, #72]	; 0x48
   181dc:	beq	18348 <__assert_fail@plt+0x6010>
   181e0:	cmp	r5, #0
   181e4:	beq	18264 <__assert_fail@plt+0x5f2c>
   181e8:	ldr	r1, [sp, #76]	; 0x4c
   181ec:	mov	r4, #0
   181f0:	cmp	r1, #0
   181f4:	beq	18294 <__assert_fail@plt+0x5f5c>
   181f8:	mov	r1, r9
   181fc:	ldrb	r2, [r1]
   18200:	ldrb	r3, [r5, r2]
   18204:	cmp	r3, #0
   18208:	beq	1821c <__assert_fail@plt+0x5ee4>
   1820c:	add	r1, r1, #1
   18210:	subs	r7, r7, #1
   18214:	bne	181fc <__assert_fail@plt+0x5ec4>
   18218:	b	18348 <__assert_fail@plt+0x6010>
   1821c:	ldr	r3, [sp, #76]	; 0x4c
   18220:	ldrb	r2, [r3, r2]
   18224:	strb	r2, [r0, r4]
   18228:	add	r4, r4, #1
   1822c:	add	r1, r1, #1
   18230:	subs	r7, r7, #1
   18234:	bne	181fc <__assert_fail@plt+0x5ec4>
   18238:	b	18348 <__assert_fail@plt+0x6010>
   1823c:	ldrb	r0, [r4]
   18240:	mov	r2, r6
   18244:	str	r9, [sp, #72]	; 0x48
   18248:	str	r0, [sp, #44]	; 0x2c
   1824c:	mov	r0, #0
   18250:	strb	r0, [r4]
   18254:	mov	r4, sl
   18258:	ldrb	r1, [lr]
   1825c:	str	r1, [sp, #40]	; 0x28
   18260:	b	1849c <__assert_fail@plt+0x6164>
   18264:	ldr	r4, [sp, #76]	; 0x4c
   18268:	mov	r1, r9
   1826c:	mov	r2, r7
   18270:	mov	r3, r0
   18274:	cmp	r4, #0
   18278:	beq	182bc <__assert_fail@plt+0x5f84>
   1827c:	ldrb	r0, [r1], #1
   18280:	subs	r2, r2, #1
   18284:	ldrb	r0, [r4, r0]
   18288:	strb	r0, [r3], #1
   1828c:	bne	1827c <__assert_fail@plt+0x5f44>
   18290:	b	18340 <__assert_fail@plt+0x6008>
   18294:	mov	r1, r9
   18298:	ldrb	r2, [r1]
   1829c:	add	r1, r1, #1
   182a0:	ldrb	r3, [r5, r2]
   182a4:	cmp	r3, #0
   182a8:	strbeq	r2, [r0, r4]
   182ac:	addeq	r4, r4, #1
   182b0:	subs	r7, r7, #1
   182b4:	bne	18298 <__assert_fail@plt+0x5f60>
   182b8:	b	18348 <__assert_fail@plt+0x6010>
   182bc:	mov	ip, #0
   182c0:	cmp	r7, #15
   182c4:	bhi	182d4 <__assert_fail@plt+0x5f9c>
   182c8:	ldr	r0, [sp, #72]	; 0x48
   182cc:	ldr	r4, [sp, #60]	; 0x3c
   182d0:	b	1831c <__assert_fail@plt+0x5fe4>
   182d4:	ldr	r0, [sp, #72]	; 0x48
   182d8:	ldr	r4, [sp, #60]	; 0x3c
   182dc:	cmp	r0, r4
   182e0:	cmpcc	r9, lr
   182e4:	bcc	1831c <__assert_fail@plt+0x5fe4>
   182e8:	bic	ip, r7, #15
   182ec:	mov	r3, r0
   182f0:	mov	r1, r9
   182f4:	mov	r2, ip
   182f8:	vld1.8	{d16-d17}, [r1]!
   182fc:	subs	r2, r2, #16
   18300:	vst1.8	{d16-d17}, [r3]!
   18304:	bne	182f8 <__assert_fail@plt+0x5fc0>
   18308:	cmp	r7, ip
   1830c:	bne	1831c <__assert_fail@plt+0x5fe4>
   18310:	ldr	ip, [sp, #68]	; 0x44
   18314:	mov	r4, r7
   18318:	b	18348 <__assert_fail@plt+0x6010>
   1831c:	sub	r1, r4, ip
   18320:	add	r2, r9, ip
   18324:	add	r3, r0, ip
   18328:	sub	r1, r1, r9
   1832c:	ldrb	r0, [r2], #1
   18330:	subs	r1, r1, #1
   18334:	strb	r0, [r3], #1
   18338:	bne	1832c <__assert_fail@plt+0x5ff4>
   1833c:	ldr	ip, [sp, #68]	; 0x44
   18340:	mov	r4, r7
   18344:	ldr	r0, [sp, #72]	; 0x48
   18348:	ldr	r3, [sp, #76]	; 0x4c
   1834c:	add	r1, lr, #1
   18350:	mov	r7, r4
   18354:	mov	r2, #0
   18358:	cmp	r6, #0
   1835c:	mov	r4, r1
   18360:	strb	r2, [r0, r7]
   18364:	beq	18494 <__assert_fail@plt+0x615c>
   18368:	cmp	r5, #0
   1836c:	beq	183c8 <__assert_fail@plt+0x6090>
   18370:	mov	r2, #0
   18374:	cmp	r3, #0
   18378:	beq	183a4 <__assert_fail@plt+0x606c>
   1837c:	ldrb	r0, [sl]
   18380:	add	sl, sl, #1
   18384:	ldrb	r1, [r5, r0]
   18388:	cmp	r1, #0
   1838c:	ldrbeq	r0, [r3, r0]
   18390:	strbeq	r0, [r4, r2]
   18394:	addeq	r2, r2, #1
   18398:	subs	r6, r6, #1
   1839c:	bne	1837c <__assert_fail@plt+0x6044>
   183a0:	b	18494 <__assert_fail@plt+0x615c>
   183a4:	ldrb	r0, [sl]
   183a8:	add	sl, sl, #1
   183ac:	ldrb	r1, [r5, r0]
   183b0:	cmp	r1, #0
   183b4:	strbeq	r0, [r4, r2]
   183b8:	addeq	r2, r2, #1
   183bc:	subs	r6, r6, #1
   183c0:	bne	183a4 <__assert_fail@plt+0x606c>
   183c4:	b	18494 <__assert_fail@plt+0x615c>
   183c8:	cmp	r3, #0
   183cc:	beq	183f0 <__assert_fail@plt+0x60b8>
   183d0:	mov	r0, r6
   183d4:	mov	r1, r4
   183d8:	ldrb	r2, [sl], #1
   183dc:	subs	r0, r0, #1
   183e0:	ldrb	r2, [r3, r2]
   183e4:	strb	r2, [r1], #1
   183e8:	bne	183d8 <__assert_fail@plt+0x60a0>
   183ec:	b	18490 <__assert_fail@plt+0x6158>
   183f0:	mov	r0, #0
   183f4:	cmp	r6, #15
   183f8:	bhi	18404 <__assert_fail@plt+0x60cc>
   183fc:	ldr	r5, [sp, #36]	; 0x24
   18400:	b	1845c <__assert_fail@plt+0x6124>
   18404:	ldr	r5, [sp, #36]	; 0x24
   18408:	cmp	r4, r5
   1840c:	bcs	18434 <__assert_fail@plt+0x60fc>
   18410:	ldr	r1, [sp, #60]	; 0x3c
   18414:	ldr	r2, [sp, #72]	; 0x48
   18418:	add	r1, r5, r1
   1841c:	sub	r1, r1, sl
   18420:	sub	r1, r1, r9
   18424:	add	r1, r2, r1
   18428:	add	r1, r1, #1
   1842c:	cmp	sl, r1
   18430:	bcc	1845c <__assert_fail@plt+0x6124>
   18434:	bic	r0, r6, #15
   18438:	mov	r2, r4
   1843c:	mov	r3, sl
   18440:	mov	r1, r0
   18444:	vld1.8	{d16-d17}, [r3]!
   18448:	subs	r1, r1, #16
   1844c:	vst1.8	{d16-d17}, [r2]!
   18450:	bne	18444 <__assert_fail@plt+0x610c>
   18454:	cmp	r6, r0
   18458:	beq	18490 <__assert_fail@plt+0x6158>
   1845c:	ldr	r3, [sp, #60]	; 0x3c
   18460:	sub	r2, r5, r0
   18464:	add	r1, sl, r0
   18468:	sub	r2, r2, sl
   1846c:	add	r0, r0, r3
   18470:	ldr	r3, [sp, #72]	; 0x48
   18474:	sub	r0, r0, r9
   18478:	add	r0, r3, r0
   1847c:	add	r0, r0, #1
   18480:	ldrb	r3, [r1], #1
   18484:	subs	r2, r2, #1
   18488:	strb	r3, [r0], #1
   1848c:	bne	18480 <__assert_fail@plt+0x6148>
   18490:	mov	r2, r6
   18494:	add	lr, r4, r2
   18498:	mov	r0, #0
   1849c:	strb	r0, [lr]
   184a0:	str	r2, [sp, #76]	; 0x4c
   184a4:	ldrb	r0, [ip, #26]
   184a8:	cmp	r0, #0
   184ac:	beq	18514 <__assert_fail@plt+0x61dc>
   184b0:	ldr	r0, [sp, #72]	; 0x48
   184b4:	sub	r0, r0, #1
   184b8:	ldrb	r1, [r0, #1]!
   184bc:	ldrb	r1, [r8, r1]
   184c0:	cmp	r1, #0
   184c4:	bne	184b8 <__assert_fail@plt+0x6180>
   184c8:	sub	r1, r4, #1
   184cc:	ldrb	r2, [r1, #1]!
   184d0:	ldrb	r2, [r8, r2]
   184d4:	cmp	r2, #0
   184d8:	bne	184cc <__assert_fail@plt+0x6194>
   184dc:	movw	r2, #39016	; 0x9868
   184e0:	movt	r2, #3
   184e4:	ldr	r3, [r2, #12]
   184e8:	ldrb	r2, [r2, #2]
   184ec:	bl	22904 <__assert_fail@plt+0x105cc>
   184f0:	mov	r2, r0
   184f4:	ldr	r0, [sp, #64]	; 0x40
   184f8:	cmp	r0, #0
   184fc:	beq	1866c <__assert_fail@plt+0x6334>
   18500:	ldr	r0, [sp, #56]	; 0x38
   18504:	mov	r4, r2
   18508:	bl	1d88c <__assert_fail@plt+0xb554>
   1850c:	mov	r2, r4
   18510:	b	18684 <__assert_fail@plt+0x634c>
   18514:	ldrb	r0, [ip, #28]
   18518:	cmp	r0, #0
   1851c:	beq	1858c <__assert_fail@plt+0x6254>
   18520:	mov	r5, r4
   18524:	ldr	r4, [sp, #72]	; 0x48
   18528:	sub	lr, fp, #3072	; 0xc00
   1852c:	sub	r1, lr, #1016	; 0x3f8
   18530:	mov	r0, r4
   18534:	bl	11f18 <strtold@plt>
   18538:	mov	r0, r5
   1853c:	sub	r1, fp, #52	; 0x34
   18540:	vmov.f64	d8, d0
   18544:	bl	11f18 <strtold@plt>
   18548:	add	r1, sp, #4080	; 0xff0
   1854c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18550:	ldr	r1, [r1, #312]	; 0x138
   18554:	cmp	r1, r4
   18558:	beq	18654 <__assert_fail@plt+0x631c>
   1855c:	mov	r2, #1
   18560:	cmp	r0, r5
   18564:	mov	r4, r5
   18568:	beq	184f4 <__assert_fail@plt+0x61bc>
   1856c:	vcmpe.f64	d8, d0
   18570:	vmrs	APSR_nzcv, fpscr
   18574:	bpl	18a0c <__assert_fail@plt+0x66d4>
   18578:	mvn	r2, #0
   1857c:	ldr	r0, [sp, #64]	; 0x40
   18580:	cmp	r0, #0
   18584:	bne	18500 <__assert_fail@plt+0x61c8>
   18588:	b	1866c <__assert_fail@plt+0x6334>
   1858c:	ldrb	r0, [ip, #29]
   18590:	str	r7, [sp, #20]
   18594:	cmp	r0, #0
   18598:	beq	18958 <__assert_fail@plt+0x6620>
   1859c:	ldr	r0, [sp, #72]	; 0x48
   185a0:	sub	r0, r0, #1
   185a4:	ldrb	r9, [r0, #1]!
   185a8:	ldrb	r1, [r8, r9]
   185ac:	cmp	r1, #0
   185b0:	bne	185a4 <__assert_fail@plt+0x626c>
   185b4:	sub	r1, r4, #1
   185b8:	ldrb	lr, [r1, #1]!
   185bc:	ldrb	r2, [r8, lr]
   185c0:	cmp	r2, #0
   185c4:	bne	185b8 <__assert_fail@plt+0x6280>
   185c8:	cmp	r9, #45	; 0x2d
   185cc:	mov	sl, r0
   185d0:	str	r4, [sp, #4]
   185d4:	addeq	sl, sl, #1
   185d8:	mov	r5, sl
   185dc:	ldrb	r6, [r5], #1
   185e0:	sub	r2, r6, #48	; 0x30
   185e4:	cmp	r2, #9
   185e8:	bhi	18a84 <__assert_fail@plt+0x674c>
   185ec:	movw	r2, #39016	; 0x9868
   185f0:	mov	ip, #0
   185f4:	movt	r2, #3
   185f8:	ldr	r2, [r2, #12]
   185fc:	str	r2, [sp, #60]	; 0x3c
   18600:	uxtb	r3, r6
   18604:	uxtb	r4, ip
   18608:	mov	r2, r5
   1860c:	cmp	r4, r3
   18610:	ldrb	r3, [r5]
   18614:	ldr	r4, [sp, #60]	; 0x3c
   18618:	movcc	ip, r6
   1861c:	cmp	r4, r3
   18620:	mov	r4, r5
   18624:	addeq	r4, sl, #2
   18628:	mov	r5, r4
   1862c:	mov	sl, r4
   18630:	ldrb	r6, [r5], #1
   18634:	sub	r7, r6, #48	; 0x30
   18638:	cmp	r7, #10
   1863c:	bcc	18600 <__assert_fail@plt+0x62c8>
   18640:	ldr	r7, [sp, #60]	; 0x3c
   18644:	cmp	r7, r3
   18648:	bne	18b74 <__assert_fail@plt+0x683c>
   1864c:	sub	r5, r4, #1
   18650:	b	18bc4 <__assert_fail@plt+0x688c>
   18654:	subs	r2, r0, r5
   18658:	mov	r4, r5
   1865c:	mvnne	r2, #0
   18660:	ldr	r0, [sp, #64]	; 0x40
   18664:	cmp	r0, #0
   18668:	bne	18500 <__assert_fail@plt+0x61c8>
   1866c:	ldr	r0, [sp, #44]	; 0x2c
   18670:	ldr	r1, [sp, #72]	; 0x48
   18674:	strb	r0, [r1, r7]
   18678:	ldr	r0, [sp, #40]	; 0x28
   1867c:	ldr	r1, [sp, #76]	; 0x4c
   18680:	strb	r0, [r4, r1]
   18684:	ldr	ip, [sp, #68]	; 0x44
   18688:	cmp	r2, #0
   1868c:	bne	19440 <__assert_fail@plt+0x7108>
   18690:	ldr	ip, [ip, #36]	; 0x24
   18694:	cmp	ip, #0
   18698:	beq	19368 <__assert_fail@plt+0x7030>
   1869c:	ldr	r0, [sp, #52]	; 0x34
   186a0:	ldr	r9, [r0]
   186a4:	ldr	r6, [r0, #4]
   186a8:	ldr	r0, [ip, #8]
   186ac:	cmn	r0, #1
   186b0:	beq	18788 <__assert_fail@plt+0x6450>
   186b4:	mov	r0, r9
   186b8:	mov	r1, r6
   186bc:	mov	r2, ip
   186c0:	mov	r4, ip
   186c4:	bl	19c6c <__assert_fail@plt+0x7934>
   186c8:	mov	r7, r0
   186cc:	ldr	r0, [sp, #48]	; 0x30
   186d0:	mov	r2, r4
   186d4:	ldr	sl, [r0]
   186d8:	ldr	r1, [r0, #4]
   186dc:	mov	r0, sl
   186e0:	str	r1, [sp, #76]	; 0x4c
   186e4:	bl	19c6c <__assert_fail@plt+0x7934>
   186e8:	mov	ip, r4
   186ec:	mov	lr, r0
   186f0:	ldr	r5, [ip]
   186f4:	cmn	r5, #1
   186f8:	beq	187b4 <__assert_fail@plt+0x647c>
   186fc:	add	r0, r9, r6
   18700:	mov	r4, r7
   18704:	sub	r3, r0, #1
   18708:	movw	r0, #37348	; 0x91e4
   1870c:	movt	r0, #3
   18710:	ldr	r2, [r0, #4]
   18714:	ldr	r0, [ip, #4]
   18718:	cmp	r2, #256	; 0x100
   1871c:	bne	18808 <__assert_fail@plt+0x64d0>
   18720:	ldr	r7, [sp, #76]	; 0x4c
   18724:	cmp	r3, r9
   18728:	mov	r1, r5
   1872c:	bls	18848 <__assert_fail@plt+0x6510>
   18730:	cmp	r1, #0
   18734:	bne	18740 <__assert_fail@plt+0x6408>
   18738:	b	18848 <__assert_fail@plt+0x6510>
   1873c:	add	r9, r9, #1
   18740:	cmp	r9, r3
   18744:	bcs	18760 <__assert_fail@plt+0x6428>
   18748:	ldrb	r6, [r9]
   1874c:	ldrb	r6, [r8, r6]
   18750:	cmp	r6, #0
   18754:	bne	1873c <__assert_fail@plt+0x6404>
   18758:	b	18760 <__assert_fail@plt+0x6428>
   1875c:	add	r9, r9, #1
   18760:	cmp	r9, r3
   18764:	bcs	18778 <__assert_fail@plt+0x6440>
   18768:	ldrb	r6, [r9]
   1876c:	ldrb	r6, [r8, r6]
   18770:	cmp	r6, #0
   18774:	beq	1875c <__assert_fail@plt+0x6424>
   18778:	sub	r1, r1, #1
   1877c:	cmp	r9, r3
   18780:	bcc	18730 <__assert_fail@plt+0x63f8>
   18784:	b	18848 <__assert_fail@plt+0x6510>
   18788:	add	r0, r9, r6
   1878c:	sub	r7, r0, #1
   18790:	ldr	r0, [sp, #48]	; 0x30
   18794:	ldr	sl, [r0]
   18798:	ldr	r0, [r0, #4]
   1879c:	str	r0, [sp, #76]	; 0x4c
   187a0:	add	r0, sl, r0
   187a4:	sub	lr, r0, #1
   187a8:	ldr	r5, [ip]
   187ac:	cmn	r5, #1
   187b0:	bne	186fc <__assert_fail@plt+0x63c4>
   187b4:	ldrb	r0, [ip, #24]
   187b8:	mov	r4, r7
   187bc:	cmp	r0, #0
   187c0:	beq	18100 <__assert_fail@plt+0x5dc8>
   187c4:	b	187cc <__assert_fail@plt+0x6494>
   187c8:	add	r9, r9, #1
   187cc:	cmp	r9, r4
   187d0:	bcs	187ec <__assert_fail@plt+0x64b4>
   187d4:	ldrb	r0, [r9]
   187d8:	ldrb	r0, [r8, r0]
   187dc:	cmp	r0, #0
   187e0:	bne	187c8 <__assert_fail@plt+0x6490>
   187e4:	b	187ec <__assert_fail@plt+0x64b4>
   187e8:	add	sl, sl, #1
   187ec:	cmp	sl, lr
   187f0:	bcs	18100 <__assert_fail@plt+0x5dc8>
   187f4:	ldrb	r0, [sl]
   187f8:	ldrb	r0, [r8, r0]
   187fc:	cmp	r0, #0
   18800:	bne	187e8 <__assert_fail@plt+0x64b0>
   18804:	b	18100 <__assert_fail@plt+0x5dc8>
   18808:	ldr	r7, [sp, #76]	; 0x4c
   1880c:	cmp	r3, r9
   18810:	mov	r1, r5
   18814:	bls	18848 <__assert_fail@plt+0x6510>
   18818:	cmp	r1, #0
   1881c:	beq	18848 <__assert_fail@plt+0x6510>
   18820:	cmp	r9, r3
   18824:	bcs	1883c <__assert_fail@plt+0x6504>
   18828:	ldrb	r6, [r9], #1
   1882c:	cmp	r9, r3
   18830:	bcs	1883c <__assert_fail@plt+0x6504>
   18834:	cmp	r2, r6
   18838:	bne	18828 <__assert_fail@plt+0x64f0>
   1883c:	sub	r1, r1, #1
   18840:	cmp	r9, r3
   18844:	bcc	18818 <__assert_fail@plt+0x64e0>
   18848:	ldrb	r6, [ip, #24]
   1884c:	cmp	r9, r3
   18850:	bcs	18878 <__assert_fail@plt+0x6540>
   18854:	cmp	r6, #0
   18858:	beq	18878 <__assert_fail@plt+0x6540>
   1885c:	ldrb	r1, [r9]
   18860:	ldrb	r1, [r8, r1]
   18864:	cmp	r1, #0
   18868:	beq	18878 <__assert_fail@plt+0x6540>
   1886c:	add	r9, r9, #1
   18870:	cmp	r9, r3
   18874:	bcc	1885c <__assert_fail@plt+0x6524>
   18878:	add	r9, r9, r0
   1887c:	add	r1, sl, r7
   18880:	cmp	r3, r9
   18884:	movcc	r9, r3
   18888:	sub	r3, r1, #1
   1888c:	cmp	r2, #256	; 0x100
   18890:	bne	188f4 <__assert_fail@plt+0x65bc>
   18894:	cmp	r3, sl
   18898:	bls	1892c <__assert_fail@plt+0x65f4>
   1889c:	cmp	r5, #0
   188a0:	bne	188ac <__assert_fail@plt+0x6574>
   188a4:	b	1892c <__assert_fail@plt+0x65f4>
   188a8:	add	sl, sl, #1
   188ac:	cmp	sl, r3
   188b0:	bcs	188cc <__assert_fail@plt+0x6594>
   188b4:	ldrb	r1, [sl]
   188b8:	ldrb	r1, [r8, r1]
   188bc:	cmp	r1, #0
   188c0:	bne	188a8 <__assert_fail@plt+0x6570>
   188c4:	b	188cc <__assert_fail@plt+0x6594>
   188c8:	add	sl, sl, #1
   188cc:	cmp	sl, r3
   188d0:	bcs	188e4 <__assert_fail@plt+0x65ac>
   188d4:	ldrb	r1, [sl]
   188d8:	ldrb	r1, [r8, r1]
   188dc:	cmp	r1, #0
   188e0:	beq	188c8 <__assert_fail@plt+0x6590>
   188e4:	sub	r5, r5, #1
   188e8:	cmp	sl, r3
   188ec:	bcc	1889c <__assert_fail@plt+0x6564>
   188f0:	b	1892c <__assert_fail@plt+0x65f4>
   188f4:	cmp	r3, sl
   188f8:	bls	1892c <__assert_fail@plt+0x65f4>
   188fc:	cmp	r5, #0
   18900:	beq	1892c <__assert_fail@plt+0x65f4>
   18904:	cmp	sl, r3
   18908:	bcs	18920 <__assert_fail@plt+0x65e8>
   1890c:	ldrb	r1, [sl], #1
   18910:	cmp	sl, r3
   18914:	bcs	18920 <__assert_fail@plt+0x65e8>
   18918:	cmp	r2, r1
   1891c:	bne	1890c <__assert_fail@plt+0x65d4>
   18920:	sub	r5, r5, #1
   18924:	cmp	sl, r3
   18928:	bcc	188fc <__assert_fail@plt+0x65c4>
   1892c:	cmp	r6, #0
   18930:	bne	1893c <__assert_fail@plt+0x6604>
   18934:	b	180f4 <__assert_fail@plt+0x5dbc>
   18938:	add	sl, sl, #1
   1893c:	cmp	sl, r3
   18940:	bcs	180f4 <__assert_fail@plt+0x5dbc>
   18944:	ldrb	r1, [sl]
   18948:	ldrb	r1, [r8, r1]
   1894c:	cmp	r1, #0
   18950:	bne	18938 <__assert_fail@plt+0x6600>
   18954:	b	180f4 <__assert_fail@plt+0x5dbc>
   18958:	ldrb	r0, [ip, #30]
   1895c:	cmp	r0, #0
   18960:	beq	18d14 <__assert_fail@plt+0x69dc>
   18964:	ldr	r0, [sp, #72]	; 0x48
   18968:	mov	sl, r4
   1896c:	sub	r0, r0, #1
   18970:	ldrb	r1, [r0, #1]!
   18974:	ldrb	r1, [r8, r1]
   18978:	cmp	r1, #0
   1897c:	bne	18970 <__assert_fail@plt+0x6638>
   18980:	mov	lr, #12
   18984:	mov	ip, #0
   18988:	add	r3, lr, ip
   1898c:	movw	r1, #37348	; 0x91e4
   18990:	lsr	r3, r3, #1
   18994:	movt	r1, #3
   18998:	add	r7, r1, r3, lsl #3
   1899c:	ldr	r6, [r7, #28]
   189a0:	ldrb	r4, [r6]
   189a4:	cmp	r4, #0
   189a8:	beq	18a8c <__assert_fail@plt+0x6754>
   189ac:	add	r6, r6, #1
   189b0:	mov	r5, #0
   189b4:	ldrb	r1, [r0, r5]
   189b8:	movw	r2, #38496	; 0x9660
   189bc:	uxtb	r4, r4
   189c0:	movt	r2, #3
   189c4:	ldrb	r1, [r2, r1]
   189c8:	cmp	r1, r4
   189cc:	bcc	189e8 <__assert_fail@plt+0x66b0>
   189d0:	bhi	189f8 <__assert_fail@plt+0x66c0>
   189d4:	ldrb	r4, [r6, r5]
   189d8:	add	r5, r5, #1
   189dc:	cmp	r4, #0
   189e0:	bne	189b4 <__assert_fail@plt+0x667c>
   189e4:	b	18a8c <__assert_fail@plt+0x6754>
   189e8:	mov	lr, r3
   189ec:	cmp	ip, lr
   189f0:	bcc	18988 <__assert_fail@plt+0x6650>
   189f4:	b	18a04 <__assert_fail@plt+0x66cc>
   189f8:	add	ip, r3, #1
   189fc:	cmp	ip, lr
   18a00:	bcc	18988 <__assert_fail@plt+0x6650>
   18a04:	mov	ip, #0
   18a08:	b	18a90 <__assert_fail@plt+0x6758>
   18a0c:	bgt	184f4 <__assert_fail@plt+0x61bc>
   18a10:	vcmp.f64	d8, d0
   18a14:	mov	r2, #0
   18a18:	vmrs	APSR_nzcv, fpscr
   18a1c:	beq	184f4 <__assert_fail@plt+0x61bc>
   18a20:	vcmpe.f64	d0, d0
   18a24:	mvn	r2, #0
   18a28:	vmrs	APSR_nzcv, fpscr
   18a2c:	bvc	184f4 <__assert_fail@plt+0x61bc>
   18a30:	vcmpe.f64	d8, d8
   18a34:	mov	r2, #1
   18a38:	vmrs	APSR_nzcv, fpscr
   18a3c:	bvc	184f4 <__assert_fail@plt+0x61bc>
   18a40:	ldr	r0, [sp, #72]	; 0x48
   18a44:	mov	r1, #0
   18a48:	bl	11f18 <strtold@plt>
   18a4c:	mov	r5, r4
   18a50:	add	r4, sp, #4080	; 0xff0
   18a54:	mov	r1, #0
   18a58:	mov	r0, r5
   18a5c:	vstr	d0, [r4, #344]	; 0x158
   18a60:	bl	11f18 <strtold@plt>
   18a64:	sub	lr, fp, #3072	; 0xc00
   18a68:	mov	r1, r4
   18a6c:	mov	r2, #8
   18a70:	vstr	d0, [r4]
   18a74:	mov	r4, r5
   18a78:	sub	r0, lr, #984	; 0x3d8
   18a7c:	bl	11f3c <memcmp@plt>
   18a80:	b	184f0 <__assert_fail@plt+0x61b8>
   18a84:	mov	ip, #0
   18a88:	b	18b78 <__assert_fail@plt+0x6840>
   18a8c:	ldr	ip, [r7, #32]
   18a90:	sub	r1, sl, #1
   18a94:	mov	r0, sl
   18a98:	ldrb	r0, [r1, #1]!
   18a9c:	ldrb	r0, [r8, r0]
   18aa0:	cmp	r0, #0
   18aa4:	bne	18a98 <__assert_fail@plt+0x6760>
   18aa8:	mov	r9, #12
   18aac:	mov	lr, #0
   18ab0:	add	r0, r9, lr
   18ab4:	lsr	r3, r0, #1
   18ab8:	movw	r0, #37348	; 0x91e4
   18abc:	movt	r0, #3
   18ac0:	add	r6, r0, r3, lsl #3
   18ac4:	ldr	r5, [r6, #28]
   18ac8:	ldrb	r0, [r5]
   18acc:	cmp	r0, #0
   18ad0:	beq	18b54 <__assert_fail@plt+0x681c>
   18ad4:	add	r5, r5, #1
   18ad8:	mov	r4, #0
   18adc:	ldrb	r2, [r1, r4]
   18ae0:	movw	r7, #38496	; 0x9660
   18ae4:	uxtb	r0, r0
   18ae8:	movt	r7, #3
   18aec:	ldrb	r2, [r7, r2]
   18af0:	cmp	r2, r0
   18af4:	bcc	18b10 <__assert_fail@plt+0x67d8>
   18af8:	bhi	18b28 <__assert_fail@plt+0x67f0>
   18afc:	ldrb	r0, [r5, r4]
   18b00:	add	r4, r4, #1
   18b04:	cmp	r0, #0
   18b08:	bne	18adc <__assert_fail@plt+0x67a4>
   18b0c:	b	18b54 <__assert_fail@plt+0x681c>
   18b10:	mov	r9, r3
   18b14:	ldr	r7, [sp, #20]
   18b18:	mov	r4, sl
   18b1c:	cmp	lr, r9
   18b20:	bcc	18ab0 <__assert_fail@plt+0x6778>
   18b24:	b	18b3c <__assert_fail@plt+0x6804>
   18b28:	add	lr, r3, #1
   18b2c:	ldr	r7, [sp, #20]
   18b30:	mov	r4, sl
   18b34:	cmp	lr, r9
   18b38:	bcc	18ab0 <__assert_fail@plt+0x6778>
   18b3c:	mov	r0, #0
   18b40:	sub	r2, ip, r0
   18b44:	ldr	r0, [sp, #64]	; 0x40
   18b48:	cmp	r0, #0
   18b4c:	bne	18500 <__assert_fail@plt+0x61c8>
   18b50:	b	1866c <__assert_fail@plt+0x6334>
   18b54:	ldr	r0, [r6, #32]
   18b58:	ldr	r7, [sp, #20]
   18b5c:	mov	r4, sl
   18b60:	sub	r2, ip, r0
   18b64:	ldr	r0, [sp, #64]	; 0x40
   18b68:	cmp	r0, #0
   18b6c:	bne	18500 <__assert_fail@plt+0x61c8>
   18b70:	b	1866c <__assert_fail@plt+0x6334>
   18b74:	mov	sl, r2
   18b78:	movw	r2, #39016	; 0x9868
   18b7c:	movt	r2, #3
   18b80:	ldrb	r2, [r2, #2]
   18b84:	cmp	r6, r2
   18b88:	bne	18bc0 <__assert_fail@plt+0x6888>
   18b8c:	ldrb	r2, [r5]
   18b90:	sub	r3, r2, #48	; 0x30
   18b94:	cmp	r3, #9
   18b98:	bhi	18bc4 <__assert_fail@plt+0x688c>
   18b9c:	uxtb	r3, r2
   18ba0:	uxtb	r4, ip
   18ba4:	cmp	r4, r3
   18ba8:	movcc	ip, r2
   18bac:	ldrb	r2, [r5, #1]!
   18bb0:	sub	r3, r2, #48	; 0x30
   18bb4:	cmp	r3, #10
   18bb8:	bcc	18b9c <__assert_fail@plt+0x6864>
   18bbc:	b	18bc4 <__assert_fail@plt+0x688c>
   18bc0:	mov	r5, sl
   18bc4:	uxtb	r2, ip
   18bc8:	mov	ip, #0
   18bcc:	mov	r6, #0
   18bd0:	cmp	r2, #49	; 0x31
   18bd4:	bcc	18bf0 <__assert_fail@plt+0x68b8>
   18bd8:	ldrb	r2, [r5]
   18bdc:	movw	r3, #32272	; 0x7e10
   18be0:	cmp	r9, #45	; 0x2d
   18be4:	movt	r3, #2
   18be8:	ldrb	r6, [r3, r2]
   18bec:	rsbeq	r6, r6, #0
   18bf0:	cmp	lr, #45	; 0x2d
   18bf4:	mov	sl, r1
   18bf8:	addeq	sl, sl, #1
   18bfc:	mov	r3, sl
   18c00:	ldrb	r5, [r3], #1
   18c04:	sub	r2, r5, #48	; 0x30
   18c08:	cmp	r2, #9
   18c0c:	bhi	18c8c <__assert_fail@plt+0x6954>
   18c10:	movw	r2, #39016	; 0x9868
   18c14:	mov	ip, #0
   18c18:	str	r6, [sp, #60]	; 0x3c
   18c1c:	movt	r2, #3
   18c20:	ldr	r9, [r2, #12]
   18c24:	mov	r4, r3
   18c28:	uxtb	r2, r5
   18c2c:	uxtb	r3, ip
   18c30:	ldrb	r7, [r4]
   18c34:	cmp	r3, r2
   18c38:	mov	r2, r4
   18c3c:	movcc	ip, r5
   18c40:	cmp	r9, r7
   18c44:	addeq	r2, sl, #2
   18c48:	mov	r3, r2
   18c4c:	mov	sl, r2
   18c50:	ldrb	r5, [r3], #1
   18c54:	sub	r6, r5, #48	; 0x30
   18c58:	cmp	r6, #10
   18c5c:	bcc	18c24 <__assert_fail@plt+0x68ec>
   18c60:	cmp	r9, r7
   18c64:	bne	18c84 <__assert_fail@plt+0x694c>
   18c68:	ldr	r6, [sp, #60]	; 0x3c
   18c6c:	sub	r3, r2, #1
   18c70:	uxtb	r7, ip
   18c74:	mov	r2, #0
   18c78:	cmp	r7, #49	; 0x31
   18c7c:	bcs	18ce8 <__assert_fail@plt+0x69b0>
   18c80:	b	18d00 <__assert_fail@plt+0x69c8>
   18c84:	ldr	r6, [sp, #60]	; 0x3c
   18c88:	mov	sl, r4
   18c8c:	movw	r2, #39016	; 0x9868
   18c90:	movt	r2, #3
   18c94:	ldrb	r2, [r2, #2]
   18c98:	cmp	r5, r2
   18c9c:	bne	18cd4 <__assert_fail@plt+0x699c>
   18ca0:	ldrb	r2, [r3]
   18ca4:	sub	r4, r2, #48	; 0x30
   18ca8:	cmp	r4, #9
   18cac:	bhi	18cd8 <__assert_fail@plt+0x69a0>
   18cb0:	uxtb	r4, r2
   18cb4:	uxtb	r5, ip
   18cb8:	cmp	r5, r4
   18cbc:	movcc	ip, r2
   18cc0:	ldrb	r2, [r3, #1]!
   18cc4:	sub	r4, r2, #48	; 0x30
   18cc8:	cmp	r4, #10
   18ccc:	bcc	18cb0 <__assert_fail@plt+0x6978>
   18cd0:	b	18cd8 <__assert_fail@plt+0x69a0>
   18cd4:	mov	r3, sl
   18cd8:	uxtb	r7, ip
   18cdc:	mov	r2, #0
   18ce0:	cmp	r7, #49	; 0x31
   18ce4:	bcc	18d00 <__assert_fail@plt+0x69c8>
   18ce8:	ldrb	r2, [r3]
   18cec:	movw	r3, #32272	; 0x7e10
   18cf0:	cmp	lr, #45	; 0x2d
   18cf4:	movt	r3, #2
   18cf8:	ldrb	r2, [r3, r2]
   18cfc:	rsbeq	r2, r2, #0
   18d00:	ldr	r7, [sp, #20]
   18d04:	ldr	r4, [sp, #4]
   18d08:	subs	r2, r6, r2
   18d0c:	bne	184f4 <__assert_fail@plt+0x61bc>
   18d10:	b	184dc <__assert_fail@plt+0x61a4>
   18d14:	ldrb	r0, [ip, #27]
   18d18:	cmp	r0, #0
   18d1c:	beq	19028 <__assert_fail@plt+0x6cf0>
   18d20:	ldr	r0, [sp, #16]
   18d24:	str	r4, [sp, #4]
   18d28:	movw	r4, #38856	; 0x97c8
   18d2c:	mov	r2, #156	; 0x9c
   18d30:	movt	r4, #3
   18d34:	mov	r1, r4
   18d38:	bl	11ec4 <memcpy@plt>
   18d3c:	add	r0, sp, #4080	; 0xff0
   18d40:	mov	r1, r4
   18d44:	mov	r2, #156	; 0x9c
   18d48:	bl	11ec4 <memcpy@plt>
   18d4c:	movw	r0, #39016	; 0x9868
   18d50:	movt	r0, #3
   18d54:	ldrb	r0, [r0]
   18d58:	cmp	r0, #0
   18d5c:	beq	19044 <__assert_fail@plt+0x6d0c>
   18d60:	ldr	r0, [sp, #76]	; 0x4c
   18d64:	ldr	r1, [sp, #4]
   18d68:	sub	lr, fp, #3072	; 0xc00
   18d6c:	mov	r5, #4000	; 0xfa0
   18d70:	sub	r4, lr, #984	; 0x3d8
   18d74:	mov	r2, r0
   18d78:	add	r0, r1, r0
   18d7c:	str	r0, [sp, #32]
   18d80:	mov	r0, r7
   18d84:	ldr	r7, [sp, #72]	; 0x48
   18d88:	add	r3, r7, r0
   18d8c:	add	r0, r2, r0
   18d90:	mov	r2, r7
   18d94:	mov	r7, r1
   18d98:	add	r0, r0, r0, lsl #1
   18d9c:	str	r3, [sp, #60]	; 0x3c
   18da0:	str	r2, [sp, #36]	; 0x24
   18da4:	add	r0, r0, #2
   18da8:	str	r0, [sp, #8]
   18dac:	mov	r0, #0
   18db0:	str	r0, [sp, #24]
   18db4:	mov	r0, #0
   18db8:	str	r0, [sp, #12]
   18dbc:	b	18df8 <__assert_fail@plt+0x6ac0>
   18dc0:	cmp	r9, sl
   18dc4:	mov	r0, #0
   18dc8:	mov	r1, r6
   18dcc:	movwhi	r0, #1
   18dd0:	movcc	sl, r9
   18dd4:	subcc	r0, r0, #1
   18dd8:	mov	r2, sl
   18ddc:	str	r0, [sp, #12]
   18de0:	mov	r0, r4
   18de4:	bl	11f3c <memcmp@plt>
   18de8:	ldr	r1, [sp, #12]
   18dec:	cmp	r0, #0
   18df0:	movne	r1, r0
   18df4:	str	r1, [sp, #12]
   18df8:	ldr	sl, [sp, #8]
   18dfc:	cmp	r5, sl
   18e00:	bcs	18e40 <__assert_fail@plt+0x6b08>
   18e04:	ldr	r0, [sp, #24]
   18e08:	bl	1d88c <__assert_fail@plt+0xb554>
   18e0c:	add	r0, r5, r5, lsl #1
   18e10:	cmp	sl, r0, lsr #1
   18e14:	lsrls	sl, r0, #1
   18e18:	mov	r0, sl
   18e1c:	bl	24aec <__assert_fail@plt+0x127b4>
   18e20:	sub	lr, fp, #3072	; 0xc00
   18e24:	cmp	r0, #0
   18e28:	mov	r4, r0
   18e2c:	mov	r6, r0
   18e30:	sub	r0, lr, #984	; 0x3d8
   18e34:	movweq	sl, #4000	; 0xfa0
   18e38:	moveq	r4, r0
   18e3c:	b	18e48 <__assert_fail@plt+0x6b10>
   18e40:	ldr	r6, [sp, #24]
   18e44:	mov	sl, r5
   18e48:	ldr	r0, [sp, #60]	; 0x3c
   18e4c:	ldr	r1, [sp, #36]	; 0x24
   18e50:	mov	r5, #0
   18e54:	mov	r9, #0
   18e58:	cmp	r1, r0
   18e5c:	bcs	18f24 <__assert_fail@plt+0x6bec>
   18e60:	ldr	r1, [sp, #36]	; 0x24
   18e64:	mov	r0, r4
   18e68:	mov	r2, sl
   18e6c:	bl	19da8 <__assert_fail@plt+0x7a70>
   18e70:	add	r9, r0, #1
   18e74:	ldr	r0, [sp, #32]
   18e78:	cmp	r7, r0
   18e7c:	bcc	18f30 <__assert_fail@plt+0x6bf8>
   18e80:	str	r5, [sp, #28]
   18e84:	add	r5, r5, r9
   18e88:	cmp	r5, sl
   18e8c:	bhi	18f64 <__assert_fail@plt+0x6c2c>
   18e90:	cmp	sl, r9
   18e94:	bcc	18f64 <__assert_fail@plt+0x6c2c>
   18e98:	str	r6, [sp, #24]
   18e9c:	mov	r6, r4
   18ea0:	ldr	r4, [sp, #36]	; 0x24
   18ea4:	mov	r5, sl
   18ea8:	ldr	r0, [sp, #60]	; 0x3c
   18eac:	cmp	r4, r0
   18eb0:	bcc	18fc8 <__assert_fail@plt+0x6c90>
   18eb4:	ldr	r0, [sp, #32]
   18eb8:	cmp	r7, r0
   18ebc:	bcs	18ed0 <__assert_fail@plt+0x6b98>
   18ec0:	mov	r0, r7
   18ec4:	bl	12140 <strlen@plt>
   18ec8:	add	r0, r7, r0
   18ecc:	add	r7, r0, #1
   18ed0:	ldr	r0, [sp, #60]	; 0x3c
   18ed4:	cmp	r4, r0
   18ed8:	ldrcs	r0, [sp, #32]
   18edc:	cmpcs	r7, r0
   18ee0:	bcs	19018 <__assert_fail@plt+0x6ce0>
   18ee4:	mov	r0, r6
   18ee8:	mov	r1, r9
   18eec:	add	r2, sp, #4080	; 0xff0
   18ef0:	str	r4, [sp, #36]	; 0x24
   18ef4:	bl	1d0c0 <__assert_fail@plt+0xad88>
   18ef8:	ldr	sl, [sp, #28]
   18efc:	ldr	r2, [sp, #16]
   18f00:	mov	r4, r6
   18f04:	add	r6, r6, r9
   18f08:	mov	r0, r6
   18f0c:	mov	r1, sl
   18f10:	bl	1d0c0 <__assert_fail@plt+0xad88>
   18f14:	ldr	r0, [sp, #12]
   18f18:	cmp	r0, #0
   18f1c:	bne	18df8 <__assert_fail@plt+0x6ac0>
   18f20:	b	18dc0 <__assert_fail@plt+0x6a88>
   18f24:	ldr	r0, [sp, #32]
   18f28:	cmp	r7, r0
   18f2c:	bcs	18e80 <__assert_fail@plt+0x6b48>
   18f30:	cmp	sl, r9
   18f34:	mov	r1, sl
   18f38:	mov	r0, #0
   18f3c:	movcc	r1, r9
   18f40:	addcs	r0, r4, r9
   18f44:	sub	r2, r1, r9
   18f48:	mov	r1, r7
   18f4c:	bl	19da8 <__assert_fail@plt+0x7a70>
   18f50:	add	r5, r0, #1
   18f54:	str	r5, [sp, #28]
   18f58:	add	r5, r5, r9
   18f5c:	cmp	r5, sl
   18f60:	bls	18e90 <__assert_fail@plt+0x6b58>
   18f64:	mov	r0, r6
   18f68:	bl	1d88c <__assert_fail@plt+0xb554>
   18f6c:	movw	r1, #21845	; 0x5555
   18f70:	add	r0, r5, r5, lsl #1
   18f74:	movt	r1, #21845	; 0x5555
   18f78:	cmp	r5, r1
   18f7c:	lsrcc	r5, r0, #1
   18f80:	mov	r0, r5
   18f84:	bl	234d0 <__assert_fail@plt+0x11198>
   18f88:	mov	r6, r0
   18f8c:	ldr	r0, [sp, #60]	; 0x3c
   18f90:	ldr	r4, [sp, #36]	; 0x24
   18f94:	cmp	r4, r0
   18f98:	bcs	18fe8 <__assert_fail@plt+0x6cb0>
   18f9c:	mov	r0, r6
   18fa0:	mov	r1, r4
   18fa4:	mov	r2, r9
   18fa8:	bl	12158 <strxfrm@plt>
   18fac:	ldr	r0, [sp, #32]
   18fb0:	str	r6, [sp, #24]
   18fb4:	cmp	r7, r0
   18fb8:	bcc	18ff8 <__assert_fail@plt+0x6cc0>
   18fbc:	ldr	r0, [sp, #60]	; 0x3c
   18fc0:	cmp	r4, r0
   18fc4:	bcs	18eb4 <__assert_fail@plt+0x6b7c>
   18fc8:	mov	r0, r4
   18fcc:	bl	12140 <strlen@plt>
   18fd0:	add	r0, r4, r0
   18fd4:	add	r4, r0, #1
   18fd8:	ldr	r0, [sp, #32]
   18fdc:	cmp	r7, r0
   18fe0:	bcc	18ec0 <__assert_fail@plt+0x6b88>
   18fe4:	b	18ed0 <__assert_fail@plt+0x6b98>
   18fe8:	ldr	r0, [sp, #32]
   18fec:	str	r6, [sp, #24]
   18ff0:	cmp	r7, r0
   18ff4:	bcs	18fbc <__assert_fail@plt+0x6c84>
   18ff8:	ldr	r2, [sp, #28]
   18ffc:	add	r0, r6, r9
   19000:	mov	r1, r7
   19004:	bl	12158 <strxfrm@plt>
   19008:	ldr	r0, [sp, #60]	; 0x3c
   1900c:	cmp	r4, r0
   19010:	bcs	18eb4 <__assert_fail@plt+0x6b7c>
   19014:	b	18fc8 <__assert_fail@plt+0x6c90>
   19018:	ldr	r7, [sp, #20]
   1901c:	ldr	r5, [sp, #28]
   19020:	add	sl, r6, r9
   19024:	b	19064 <__assert_fail@plt+0x6d2c>
   19028:	ldrb	r0, [ip, #32]
   1902c:	cmp	r0, #0
   19030:	beq	19140 <__assert_fail@plt+0x6e08>
   19034:	ldr	r0, [sp, #72]	; 0x48
   19038:	mov	r1, r4
   1903c:	bl	1d3d8 <__assert_fail@plt+0xb0a0>
   19040:	b	184f0 <__assert_fail@plt+0x61b8>
   19044:	ldr	r5, [sp, #76]	; 0x4c
   19048:	ldr	sl, [sp, #4]
   1904c:	ldr	r6, [sp, #72]	; 0x48
   19050:	mov	r0, #0
   19054:	mov	r9, r7
   19058:	str	r0, [sp, #24]
   1905c:	mov	r0, #0
   19060:	str	r0, [sp, #12]
   19064:	add	r4, sp, #4080	; 0xff0
   19068:	mov	r0, r6
   1906c:	mov	r1, r9
   19070:	str	r6, [sp, #60]	; 0x3c
   19074:	mov	r2, r4
   19078:	bl	1d0c0 <__assert_fail@plt+0xad88>
   1907c:	sub	lr, fp, #3072	; 0xc00
   19080:	mov	r0, r4
   19084:	sub	r4, lr, #1016	; 0x3f8
   19088:	mov	r1, r4
   1908c:	bl	1c4c8 <__assert_fail@plt+0xa190>
   19090:	ldr	r6, [sp, #16]
   19094:	mov	r0, sl
   19098:	mov	r1, r5
   1909c:	str	sl, [sp, #36]	; 0x24
   190a0:	str	r5, [sp, #28]
   190a4:	mov	r2, r6
   190a8:	bl	1d0c0 <__assert_fail@plt+0xad88>
   190ac:	mov	r0, r6
   190b0:	ldr	r6, [sp]
   190b4:	mov	r1, r6
   190b8:	bl	1c4c8 <__assert_fail@plt+0xa190>
   190bc:	mov	r0, r4
   190c0:	mov	r1, r6
   190c4:	mov	r2, #16
   190c8:	bl	11f3c <memcmp@plt>
   190cc:	mov	r1, r0
   190d0:	cmp	r0, #0
   190d4:	bne	1911c <__assert_fail@plt+0x6de4>
   190d8:	ldr	r1, [sp, #12]
   190dc:	cmp	r1, #0
   190e0:	bne	1911c <__assert_fail@plt+0x6de4>
   190e4:	ldr	r2, [sp, #28]
   190e8:	ldr	r0, [sp, #60]	; 0x3c
   190ec:	ldr	r1, [sp, #36]	; 0x24
   190f0:	cmp	r9, r2
   190f4:	movcc	r2, r9
   190f8:	bl	11f3c <memcmp@plt>
   190fc:	mov	r1, r0
   19100:	cmp	r0, #0
   19104:	bne	1911c <__assert_fail@plt+0x6de4>
   19108:	ldr	r0, [sp, #28]
   1910c:	mov	r1, #0
   19110:	cmp	r9, r0
   19114:	movwhi	r1, #1
   19118:	subcc	r1, r1, #1
   1911c:	ldr	r0, [sp, #24]
   19120:	mov	r4, r1
   19124:	bl	1d88c <__assert_fail@plt+0xb554>
   19128:	mov	r2, r4
   1912c:	ldr	r4, [sp, #4]
   19130:	ldr	r0, [sp, #64]	; 0x40
   19134:	cmp	r0, #0
   19138:	bne	18500 <__assert_fail@plt+0x61c8>
   1913c:	b	1866c <__assert_fail@plt+0x6334>
   19140:	ldr	r0, [sp, #72]	; 0x48
   19144:	cmp	r7, #0
   19148:	beq	19180 <__assert_fail@plt+0x6e48>
   1914c:	ldr	r2, [sp, #76]	; 0x4c
   19150:	cmp	r2, #0
   19154:	beq	1919c <__assert_fail@plt+0x6e64>
   19158:	add	r3, r2, #1
   1915c:	add	r1, r7, #1
   19160:	mov	r2, r4
   19164:	bl	23b64 <__assert_fail@plt+0x1182c>
   19168:	b	184f0 <__assert_fail@plt+0x61b8>
   1916c:	cmp	r5, #0
   19170:	beq	191b0 <__assert_fail@plt+0x6e78>
   19174:	cmp	r3, #0
   19178:	bne	191fc <__assert_fail@plt+0x6ec4>
   1917c:	b	1928c <__assert_fail@plt+0x6f54>
   19180:	ldr	r2, [sp, #76]	; 0x4c
   19184:	cmp	r2, #0
   19188:	mvnne	r2, #0
   1918c:	ldr	r0, [sp, #64]	; 0x40
   19190:	cmp	r0, #0
   19194:	bne	18500 <__assert_fail@plt+0x61c8>
   19198:	b	1866c <__assert_fail@plt+0x6334>
   1919c:	mov	r2, #1
   191a0:	ldr	r0, [sp, #64]	; 0x40
   191a4:	cmp	r0, #0
   191a8:	bne	18500 <__assert_fail@plt+0x61c8>
   191ac:	b	1866c <__assert_fail@plt+0x6334>
   191b0:	cmp	r7, #0
   191b4:	beq	19308 <__assert_fail@plt+0x6fd0>
   191b8:	cmp	r6, #0
   191bc:	beq	1942c <__assert_fail@plt+0x70f4>
   191c0:	cmp	r3, #0
   191c4:	beq	19320 <__assert_fail@plt+0x6fe8>
   191c8:	cmp	sl, lr
   191cc:	cmpcc	r9, r4
   191d0:	bcs	19344 <__assert_fail@plt+0x700c>
   191d4:	ldrb	r0, [sl], #1
   191d8:	ldrb	r1, [r9], #1
   191dc:	ldrb	r0, [r3, r0]
   191e0:	ldrb	r1, [r3, r1]
   191e4:	subs	r2, r1, r0
   191e8:	beq	191c8 <__assert_fail@plt+0x6e90>
   191ec:	b	19440 <__assert_fail@plt+0x7108>
   191f0:	mov	r3, r6
   191f4:	add	sl, sl, #1
   191f8:	add	r9, r9, #1
   191fc:	mov	r0, #0
   19200:	cmp	r9, r4
   19204:	bcs	19224 <__assert_fail@plt+0x6eec>
   19208:	ldrb	r1, [r9]
   1920c:	ldrb	r1, [r5, r1]
   19210:	cmp	r1, #0
   19214:	beq	19234 <__assert_fail@plt+0x6efc>
   19218:	add	r9, r9, #1
   1921c:	cmp	r9, r4
   19220:	bcc	19208 <__assert_fail@plt+0x6ed0>
   19224:	mov	r1, #0
   19228:	cmp	sl, lr
   1922c:	bcc	19240 <__assert_fail@plt+0x6f08>
   19230:	b	19358 <__assert_fail@plt+0x7020>
   19234:	mov	r1, #1
   19238:	cmp	sl, lr
   1923c:	bcs	19358 <__assert_fail@plt+0x7020>
   19240:	mov	r6, r3
   19244:	ldrb	r2, [sl]
   19248:	ldrb	r3, [r5, r2]
   1924c:	cmp	r3, #0
   19250:	beq	19264 <__assert_fail@plt+0x6f2c>
   19254:	add	sl, sl, #1
   19258:	cmp	sl, lr
   1925c:	bcc	19244 <__assert_fail@plt+0x6f0c>
   19260:	b	19358 <__assert_fail@plt+0x7020>
   19264:	cmp	r1, #0
   19268:	beq	19354 <__assert_fail@plt+0x701c>
   1926c:	ldrb	r1, [r9]
   19270:	ldrb	r0, [r6, r2]
   19274:	ldrb	r1, [r6, r1]
   19278:	subs	r2, r1, r0
   1927c:	beq	191f0 <__assert_fail@plt+0x6eb8>
   19280:	b	19440 <__assert_fail@plt+0x7108>
   19284:	add	sl, sl, #1
   19288:	add	r9, r9, #1
   1928c:	mov	r0, #0
   19290:	cmp	r9, r4
   19294:	bcs	192b4 <__assert_fail@plt+0x6f7c>
   19298:	ldrb	r1, [r9]
   1929c:	ldrb	r1, [r5, r1]
   192a0:	cmp	r1, #0
   192a4:	beq	192c4 <__assert_fail@plt+0x6f8c>
   192a8:	add	r9, r9, #1
   192ac:	cmp	r9, r4
   192b0:	bcc	19298 <__assert_fail@plt+0x6f60>
   192b4:	mov	r1, #0
   192b8:	cmp	sl, lr
   192bc:	bcc	192d0 <__assert_fail@plt+0x6f98>
   192c0:	b	19358 <__assert_fail@plt+0x7020>
   192c4:	mov	r1, #1
   192c8:	cmp	sl, lr
   192cc:	bcs	19358 <__assert_fail@plt+0x7020>
   192d0:	ldrb	r2, [sl]
   192d4:	ldrb	r3, [r5, r2]
   192d8:	cmp	r3, #0
   192dc:	beq	192f0 <__assert_fail@plt+0x6fb8>
   192e0:	add	sl, sl, #1
   192e4:	cmp	sl, lr
   192e8:	bcc	192d0 <__assert_fail@plt+0x6f98>
   192ec:	b	19358 <__assert_fail@plt+0x7020>
   192f0:	cmp	r1, #0
   192f4:	beq	19354 <__assert_fail@plt+0x701c>
   192f8:	ldrb	r0, [r9]
   192fc:	subs	r2, r0, r2
   19300:	beq	19284 <__assert_fail@plt+0x6f4c>
   19304:	b	19440 <__assert_fail@plt+0x7108>
   19308:	cmp	r6, #0
   1930c:	mvnne	r6, #0
   19310:	mov	r2, r6
   19314:	cmp	r2, #0
   19318:	beq	18690 <__assert_fail@plt+0x6358>
   1931c:	b	19440 <__assert_fail@plt+0x7108>
   19320:	cmp	r7, r6
   19324:	mov	r2, r6
   19328:	mov	r0, r9
   1932c:	mov	r1, sl
   19330:	movcc	r2, r7
   19334:	bl	11f3c <memcmp@plt>
   19338:	ldr	ip, [sp, #68]	; 0x44
   1933c:	cmp	r0, #0
   19340:	bne	1943c <__assert_fail@plt+0x7104>
   19344:	subs	r2, r7, r6
   19348:	movwne	r2, #1
   1934c:	bcs	18688 <__assert_fail@plt+0x6350>
   19350:	b	19434 <__assert_fail@plt+0x70fc>
   19354:	mov	r0, #1
   19358:	sub	r2, r1, r0
   1935c:	cmp	r2, #0
   19360:	beq	18690 <__assert_fail@plt+0x6358>
   19364:	b	19440 <__assert_fail@plt+0x7108>
   19368:	movw	r6, #39016	; 0x9868
   1936c:	mov	r0, #0
   19370:	movt	r6, #3
   19374:	ldrb	r1, [r6, #7]
   19378:	cmp	r1, #0
   1937c:	bne	1941c <__assert_fail@plt+0x70e4>
   19380:	ldrb	r1, [r6, #6]
   19384:	ldr	r7, [sp, #52]	; 0x34
   19388:	ldr	r2, [sp, #48]	; 0x30
   1938c:	cmp	r1, #0
   19390:	bne	1941c <__assert_fail@plt+0x70e4>
   19394:	ldr	r3, [r2, #4]
   19398:	ldr	r1, [r7, #4]
   1939c:	sub	r4, r3, #1
   193a0:	subs	r5, r1, #1
   193a4:	beq	193cc <__assert_fail@plt+0x7094>
   193a8:	cmp	r4, #0
   193ac:	beq	193dc <__assert_fail@plt+0x70a4>
   193b0:	ldr	r0, [r7]
   193b4:	ldrb	r7, [r6]
   193b8:	ldr	r2, [r2]
   193bc:	cmp	r7, #0
   193c0:	beq	193e4 <__assert_fail@plt+0x70ac>
   193c4:	bl	23b64 <__assert_fail@plt+0x1182c>
   193c8:	b	19410 <__assert_fail@plt+0x70d8>
   193cc:	cmp	r4, #0
   193d0:	mvnne	r4, #0
   193d4:	mov	r0, r4
   193d8:	b	19410 <__assert_fail@plt+0x70d8>
   193dc:	mov	r0, #1
   193e0:	b	19410 <__assert_fail@plt+0x70d8>
   193e4:	cmp	r5, r4
   193e8:	mov	r3, r4
   193ec:	mov	r1, r2
   193f0:	movcc	r3, r5
   193f4:	mov	r2, r3
   193f8:	bl	11f3c <memcmp@plt>
   193fc:	cmp	r0, #0
   19400:	bne	19410 <__assert_fail@plt+0x70d8>
   19404:	subs	r0, r5, r4
   19408:	movwne	r0, #1
   1940c:	mvncc	r0, #0
   19410:	ldrb	r1, [r6, #9]
   19414:	cmp	r1, #0
   19418:	rsbne	r0, r0, #0
   1941c:	sub	sp, fp, #40	; 0x28
   19420:	vpop	{d8}
   19424:	add	sp, sp, #4
   19428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1942c:	mov	r2, #1
   19430:	b	19440 <__assert_fail@plt+0x7108>
   19434:	mvn	r2, #0
   19438:	b	19440 <__assert_fail@plt+0x7108>
   1943c:	mov	r2, r0
   19440:	ldrb	r0, [ip, #31]
   19444:	cmp	r0, #0
   19448:	rsbne	r2, r2, #0
   1944c:	mov	r0, r2
   19450:	sub	sp, fp, #40	; 0x28
   19454:	vpop	{d8}
   19458:	add	sp, sp, #4
   1945c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19464:	add	fp, sp, #28
   19468:	sub	sp, sp, #4
   1946c:	vpush	{d12-d13}
   19470:	vpush	{d8-d10}
   19474:	sub	sp, sp, #24
   19478:	ldr	r5, [r0]
   1947c:	ldr	r7, [r0, #4]
   19480:	mov	r8, r2
   19484:	mov	r4, r1
   19488:	cmp	r2, #0
   1948c:	str	r0, [sp, #4]
   19490:	add	r6, r5, r7
   19494:	bne	19528 <__assert_fail@plt+0x71f0>
   19498:	movw	r0, #39016	; 0x9868
   1949c:	movt	r0, #3
   194a0:	ldrb	r0, [r0, #5]
   194a4:	cmp	r0, #1
   194a8:	bne	19528 <__assert_fail@plt+0x71f0>
   194ac:	cmp	r7, #1
   194b0:	blt	1957c <__assert_fail@plt+0x7244>
   194b4:	sub	r7, r7, #1
   194b8:	ldrb	r0, [r5], #1
   194bc:	cmp	r7, #0
   194c0:	ldr	r2, [r4, #24]
   194c4:	mov	r1, r0
   194c8:	movweq	r1, #10
   194cc:	cmp	r0, #9
   194d0:	ldr	r0, [r4, #20]
   194d4:	movweq	r1, #62	; 0x3e
   194d8:	cmp	r0, r2
   194dc:	bcs	194fc <__assert_fail@plt+0x71c4>
   194e0:	add	r2, r0, #1
   194e4:	str	r2, [r4, #20]
   194e8:	strb	r1, [r0]
   194ec:	sub	r7, r7, #1
   194f0:	cmp	r5, r6
   194f4:	bcc	194b8 <__assert_fail@plt+0x7180>
   194f8:	b	1957c <__assert_fail@plt+0x7244>
   194fc:	mov	r0, r4
   19500:	bl	1220c <__overflow@plt>
   19504:	cmn	r0, #1
   19508:	bne	194ec <__assert_fail@plt+0x71b4>
   1950c:	movw	r1, #31286	; 0x7a36
   19510:	mov	r0, #0
   19514:	mov	r2, #5
   19518:	movt	r1, #2
   1951c:	bl	11f54 <dcgettext@plt>
   19520:	mov	r1, #0
   19524:	bl	17948 <__assert_fail@plt+0x5610>
   19528:	movw	r0, #39016	; 0x9868
   1952c:	mov	r1, #10
   19530:	mov	r2, r7
   19534:	mov	r3, r4
   19538:	movt	r0, #3
   1953c:	ldrb	r0, [r0, #8]
   19540:	cmp	r0, #0
   19544:	mov	r0, r5
   19548:	movwne	r1, #0
   1954c:	strb	r1, [r6, #-1]
   19550:	mov	r1, #1
   19554:	bl	11f30 <fwrite_unlocked@plt>
   19558:	cmp	r0, r7
   1955c:	bne	19c50 <__assert_fail@plt+0x7918>
   19560:	mov	r0, #0
   19564:	strb	r0, [r6, #-1]
   19568:	sub	sp, fp, #72	; 0x48
   1956c:	vpop	{d8-d10}
   19570:	vpop	{d12-d13}
   19574:	add	sp, sp, #4
   19578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1957c:	movw	r0, #39016	; 0x9868
   19580:	movw	r9, #37728	; 0x9360
   19584:	vmov.i16	d10, #9	; 0x0009
   19588:	vmov.i32	q6, #1	; 0x00000001
   1958c:	movt	r0, #3
   19590:	movt	r9, #3
   19594:	ldr	sl, [r0, #20]
   19598:	mov	r0, #0
   1959c:	vdup.32	q4, r0
   195a0:	ldr	r0, [sp, #4]
   195a4:	cmp	sl, #0
   195a8:	str	sl, [sp, #8]
   195ac:	ldr	r4, [r0]
   195b0:	ldr	r1, [r0, #4]
   195b4:	add	r0, r4, r1
   195b8:	sub	r6, r0, #1
   195bc:	beq	19650 <__assert_fail@plt+0x7318>
   195c0:	ldr	r8, [sl]
   195c4:	mov	r7, r4
   195c8:	cmn	r8, #1
   195cc:	beq	196d8 <__assert_fail@plt+0x73a0>
   195d0:	movw	r0, #37348	; 0x91e4
   195d4:	movt	r0, #3
   195d8:	ldr	r3, [r0, #4]
   195dc:	ldr	r0, [sl, #4]
   195e0:	cmp	r3, #256	; 0x100
   195e4:	bne	1965c <__assert_fail@plt+0x7324>
   195e8:	cmp	r6, r4
   195ec:	mov	r2, r4
   195f0:	mov	r3, r8
   195f4:	bls	1969c <__assert_fail@plt+0x7364>
   195f8:	cmp	r3, #0
   195fc:	bne	19608 <__assert_fail@plt+0x72d0>
   19600:	b	1969c <__assert_fail@plt+0x7364>
   19604:	add	r2, r2, #1
   19608:	cmp	r2, r6
   1960c:	bcs	19628 <__assert_fail@plt+0x72f0>
   19610:	ldrb	r7, [r2]
   19614:	ldrb	r7, [r9, r7]
   19618:	cmp	r7, #0
   1961c:	bne	19604 <__assert_fail@plt+0x72cc>
   19620:	b	19628 <__assert_fail@plt+0x72f0>
   19624:	add	r2, r2, #1
   19628:	cmp	r2, r6
   1962c:	bcs	19640 <__assert_fail@plt+0x7308>
   19630:	ldrb	r7, [r2]
   19634:	ldrb	r7, [r9, r7]
   19638:	cmp	r7, #0
   1963c:	beq	19624 <__assert_fail@plt+0x72ec>
   19640:	sub	r3, r3, #1
   19644:	cmp	r2, r6
   19648:	bcc	195f8 <__assert_fail@plt+0x72c0>
   1964c:	b	1969c <__assert_fail@plt+0x7364>
   19650:	mov	sl, r6
   19654:	mov	r7, r4
   19658:	b	19914 <__assert_fail@plt+0x75dc>
   1965c:	cmp	r6, r4
   19660:	mov	r2, r4
   19664:	mov	r5, r8
   19668:	bls	1969c <__assert_fail@plt+0x7364>
   1966c:	cmp	r5, #0
   19670:	beq	1969c <__assert_fail@plt+0x7364>
   19674:	cmp	r2, r6
   19678:	bcs	19690 <__assert_fail@plt+0x7358>
   1967c:	ldrb	r7, [r2], #1
   19680:	cmp	r2, r6
   19684:	bcs	19690 <__assert_fail@plt+0x7358>
   19688:	cmp	r3, r7
   1968c:	bne	1967c <__assert_fail@plt+0x7344>
   19690:	sub	r5, r5, #1
   19694:	cmp	r2, r6
   19698:	bcc	1966c <__assert_fail@plt+0x7334>
   1969c:	cmp	r2, r6
   196a0:	bcs	196cc <__assert_fail@plt+0x7394>
   196a4:	ldrb	r3, [sl, #24]
   196a8:	cmp	r3, #0
   196ac:	beq	196cc <__assert_fail@plt+0x7394>
   196b0:	ldrb	r3, [r2]
   196b4:	ldrb	r3, [r9, r3]
   196b8:	cmp	r3, #0
   196bc:	beq	196cc <__assert_fail@plt+0x7394>
   196c0:	add	r2, r2, #1
   196c4:	cmp	r2, r6
   196c8:	bcc	196b0 <__assert_fail@plt+0x7378>
   196cc:	add	r7, r2, r0
   196d0:	cmp	r6, r7
   196d4:	movcc	r7, r6
   196d8:	ldr	r0, [sl, #8]
   196dc:	cmn	r0, #1
   196e0:	beq	196f4 <__assert_fail@plt+0x73bc>
   196e4:	mov	r0, r4
   196e8:	mov	r2, sl
   196ec:	bl	19c6c <__assert_fail@plt+0x7934>
   196f0:	mov	r6, r0
   196f4:	ldrb	r0, [sl, #24]
   196f8:	cmp	r0, #0
   196fc:	beq	19708 <__assert_fail@plt+0x73d0>
   19700:	cmn	r8, #1
   19704:	beq	19738 <__assert_fail@plt+0x7400>
   19708:	ldrb	r0, [sl, #30]
   1970c:	cmp	r0, #0
   19710:	bne	19738 <__assert_fail@plt+0x7400>
   19714:	ldrb	r0, [sl, #26]
   19718:	cmp	r0, #0
   1971c:	bne	19738 <__assert_fail@plt+0x7400>
   19720:	ldrb	r0, [sl, #28]
   19724:	cmp	r0, #0
   19728:	bne	19738 <__assert_fail@plt+0x7400>
   1972c:	ldrb	r0, [sl, #29]
   19730:	cmp	r0, #0
   19734:	beq	19c34 <__assert_fail@plt+0x78fc>
   19738:	ldrb	r8, [r6]
   1973c:	mov	r0, #0
   19740:	sub	r7, r7, #1
   19744:	strb	r0, [r6]
   19748:	mov	r0, r7
   1974c:	ldrb	r1, [r7, #1]!
   19750:	ldrb	r1, [r9, r1]
   19754:	cmp	r1, #0
   19758:	bne	19748 <__assert_fail@plt+0x7410>
   1975c:	movw	r3, #38496	; 0x9660
   19760:	cmp	r6, r7
   19764:	str	r7, [sp, #20]
   19768:	movt	r3, #3
   1976c:	bcs	1977c <__assert_fail@plt+0x7444>
   19770:	mov	sl, r6
   19774:	str	r6, [sp, #20]
   19778:	b	19910 <__assert_fail@plt+0x75d8>
   1977c:	ldrb	r1, [sl, #30]
   19780:	cmp	r1, #0
   19784:	beq	19824 <__assert_fail@plt+0x74ec>
   19788:	str	r8, [sp]
   1978c:	ldrb	r1, [r0, #1]!
   19790:	ldrb	r1, [r9, r1]
   19794:	cmp	r1, #0
   19798:	bne	1978c <__assert_fail@plt+0x7454>
   1979c:	mov	lr, #12
   197a0:	mov	ip, #0
   197a4:	add	r1, lr, ip
   197a8:	lsr	r8, r1, #1
   197ac:	movw	r1, #37348	; 0x91e4
   197b0:	movt	r1, #3
   197b4:	add	r1, r1, r8, lsl #3
   197b8:	ldr	r5, [r1, #28]
   197bc:	ldrb	r1, [r5]
   197c0:	cmp	r1, #0
   197c4:	beq	19904 <__assert_fail@plt+0x75cc>
   197c8:	add	r5, r5, #1
   197cc:	mov	sl, r0
   197d0:	ldrb	r2, [sl]
   197d4:	uxtb	r1, r1
   197d8:	ldrb	r2, [r3, r2]
   197dc:	cmp	r2, r1
   197e0:	bcc	197fc <__assert_fail@plt+0x74c4>
   197e4:	bhi	1980c <__assert_fail@plt+0x74d4>
   197e8:	ldrb	r1, [r5], #1
   197ec:	add	sl, sl, #1
   197f0:	cmp	r1, #0
   197f4:	bne	197d0 <__assert_fail@plt+0x7498>
   197f8:	b	19908 <__assert_fail@plt+0x75d0>
   197fc:	mov	lr, r8
   19800:	cmp	ip, lr
   19804:	bcc	197a4 <__assert_fail@plt+0x746c>
   19808:	b	19818 <__assert_fail@plt+0x74e0>
   1980c:	add	ip, r8, #1
   19810:	cmp	ip, lr
   19814:	bcc	197a4 <__assert_fail@plt+0x746c>
   19818:	ldr	r8, [sp]
   1981c:	mov	sl, r7
   19820:	b	19910 <__assert_fail@plt+0x75d8>
   19824:	ldrb	r0, [sl, #28]
   19828:	cmp	r0, #0
   1982c:	beq	19844 <__assert_fail@plt+0x750c>
   19830:	mov	r0, r7
   19834:	add	r1, sp, #20
   19838:	bl	11f18 <strtold@plt>
   1983c:	ldr	sl, [sp, #20]
   19840:	b	19910 <__assert_fail@plt+0x75d8>
   19844:	ldrb	r0, [sl, #26]
   19848:	cmp	r0, #0
   1984c:	bne	1985c <__assert_fail@plt+0x7524>
   19850:	ldrb	r0, [sl, #29]
   19854:	cmp	r0, #0
   19858:	beq	19770 <__assert_fail@plt+0x7438>
   1985c:	cmp	r7, r6
   19860:	mov	r0, #0
   19864:	mov	lr, r7
   19868:	str	r8, [sp]
   1986c:	mov	sl, #0
   19870:	ldrbcc	r0, [r7]
   19874:	subcc	r0, r0, #45	; 0x2d
   19878:	clzcc	r0, r0
   1987c:	lsrcc	r0, r0, #5
   19880:	ldrb	r8, [lr, r0]!
   19884:	sub	r0, r8, #48	; 0x30
   19888:	add	r5, lr, #1
   1988c:	cmp	r0, #9
   19890:	bhi	19b98 <__assert_fail@plt+0x7860>
   19894:	movw	r0, #39016	; 0x9868
   19898:	mov	sl, #0
   1989c:	movt	r0, #3
   198a0:	ldr	ip, [r0, #12]
   198a4:	uxtb	r0, r8
   198a8:	uxtb	r1, sl
   198ac:	mov	r3, r5
   198b0:	cmp	r1, r0
   198b4:	ldrb	r0, [r5]
   198b8:	mov	r1, r5
   198bc:	movcc	sl, r8
   198c0:	cmp	ip, r0
   198c4:	addeq	r1, lr, #2
   198c8:	mov	r5, r1
   198cc:	mov	lr, r1
   198d0:	ldrb	r8, [r5], #1
   198d4:	sub	r2, r8, #48	; 0x30
   198d8:	cmp	r2, #10
   198dc:	bcc	198a4 <__assert_fail@plt+0x756c>
   198e0:	cmp	ip, r0
   198e4:	bne	19b94 <__assert_fail@plt+0x785c>
   198e8:	ldr	r8, [sp]
   198ec:	sub	r5, r1, #1
   198f0:	uxtb	r0, sl
   198f4:	mov	sl, r7
   198f8:	cmp	r0, #48	; 0x30
   198fc:	bcc	19910 <__assert_fail@plt+0x75d8>
   19900:	b	19bfc <__assert_fail@plt+0x78c4>
   19904:	mov	sl, r0
   19908:	ldr	r8, [sp]
   1990c:	str	sl, [sp, #20]
   19910:	strb	r8, [r6]
   19914:	sub	r8, r7, r4
   19918:	mov	r0, r4
   1991c:	mov	r2, #0
   19920:	mov	r1, r8
   19924:	bl	1f0e8 <__assert_fail@plt+0xcdb0>
   19928:	mov	r6, r0
   1992c:	cmp	r7, r4
   19930:	bls	199bc <__assert_fail@plt+0x7684>
   19934:	cmp	r8, #4
   19938:	bcs	19944 <__assert_fail@plt+0x760c>
   1993c:	mov	r0, r4
   19940:	b	199a8 <__assert_fail@plt+0x7670>
   19944:	vorr	d18, d8, d8
   19948:	bic	r1, r8, #3
   1994c:	vorr	q8, q4, q4
   19950:	vmov.32	d18[0], r6
   19954:	add	r0, r4, r1
   19958:	mov	r2, r1
   1995c:	add	r6, sp, #16
   19960:	vorr	d16, d18, d18
   19964:	ldr	r3, [r4], #4
   19968:	subs	r2, r2, #4
   1996c:	str	r3, [sp, #16]
   19970:	vld1.32	{d18[0]}, [r6 :32]
   19974:	vmovl.u8	q9, d18
   19978:	vceq.i16	d18, d18, d10
   1997c:	vmovl.u16	q9, d18
   19980:	vand	q9, q9, q6
   19984:	vadd.i32	q8, q8, q9
   19988:	bne	19964 <__assert_fail@plt+0x762c>
   1998c:	vext.8	q9, q8, q8, #8
   19990:	cmp	r1, r8
   19994:	vadd.i32	q8, q8, q9
   19998:	vdup.32	q9, d16[1]
   1999c:	vadd.i32	q8, q8, q9
   199a0:	vmov.32	r6, d16[0]
   199a4:	beq	199bc <__assert_fail@plt+0x7684>
   199a8:	ldrb	r1, [r0], #1
   199ac:	cmp	r1, #9
   199b0:	addeq	r6, r6, #1
   199b4:	cmp	r7, r0
   199b8:	bne	199a8 <__assert_fail@plt+0x7670>
   199bc:	sub	r5, sl, r7
   199c0:	mov	r0, r7
   199c4:	mov	r2, #0
   199c8:	mov	r1, r5
   199cc:	bl	1f0e8 <__assert_fail@plt+0xcdb0>
   199d0:	mov	r4, r0
   199d4:	cmp	r7, sl
   199d8:	add	r1, sp, #12
   199dc:	bcs	19a64 <__assert_fail@plt+0x772c>
   199e0:	cmp	r5, #4
   199e4:	bcs	199f0 <__assert_fail@plt+0x76b8>
   199e8:	mov	r0, r7
   199ec:	b	19a50 <__assert_fail@plt+0x7718>
   199f0:	vorr	d18, d8, d8
   199f4:	bic	ip, r5, #3
   199f8:	vorr	q8, q4, q4
   199fc:	vmov.32	d18[0], r4
   19a00:	add	r0, r7, ip
   19a04:	mov	r2, ip
   19a08:	vorr	d16, d18, d18
   19a0c:	ldr	r3, [r7], #4
   19a10:	subs	r2, r2, #4
   19a14:	str	r3, [sp, #12]
   19a18:	vld1.32	{d18[0]}, [r1 :32]
   19a1c:	vmovl.u8	q9, d18
   19a20:	vceq.i16	d18, d18, d10
   19a24:	vmovl.u16	q9, d18
   19a28:	vand	q9, q9, q6
   19a2c:	vadd.i32	q8, q8, q9
   19a30:	bne	19a0c <__assert_fail@plt+0x76d4>
   19a34:	vext.8	q9, q8, q8, #8
   19a38:	cmp	ip, r5
   19a3c:	vadd.i32	q8, q8, q9
   19a40:	vdup.32	q9, d16[1]
   19a44:	vadd.i32	q8, q8, q9
   19a48:	vmov.32	r4, d16[0]
   19a4c:	beq	19a64 <__assert_fail@plt+0x772c>
   19a50:	ldrb	r1, [r0], #1
   19a54:	cmp	r1, #9
   19a58:	addeq	r4, r4, #1
   19a5c:	cmp	sl, r0
   19a60:	bne	19a50 <__assert_fail@plt+0x7718>
   19a64:	ldr	sl, [sp, #8]
   19a68:	movw	r5, #37588	; 0x92d4
   19a6c:	cmp	r6, #0
   19a70:	mov	r7, #32
   19a74:	movt	r5, #3
   19a78:	beq	19abc <__assert_fail@plt+0x7784>
   19a7c:	ldr	r0, [r5]
   19a80:	sub	r6, r6, #1
   19a84:	ldr	r1, [r0, #20]
   19a88:	ldr	r2, [r0, #24]
   19a8c:	cmp	r1, r2
   19a90:	bcs	19aac <__assert_fail@plt+0x7774>
   19a94:	add	r2, r1, #1
   19a98:	str	r2, [r0, #20]
   19a9c:	strb	r7, [r1]
   19aa0:	cmp	r6, #0
   19aa4:	bne	19a7c <__assert_fail@plt+0x7744>
   19aa8:	b	19abc <__assert_fail@plt+0x7784>
   19aac:	mov	r1, #32
   19ab0:	bl	1220c <__overflow@plt>
   19ab4:	cmp	r6, #0
   19ab8:	bne	19a7c <__assert_fail@plt+0x7744>
   19abc:	cmp	r4, #0
   19ac0:	mov	r6, #95	; 0x5f
   19ac4:	beq	19b68 <__assert_fail@plt+0x7830>
   19ac8:	ldr	r0, [r5]
   19acc:	ldr	r1, [r0, #20]
   19ad0:	ldr	r2, [r0, #24]
   19ad4:	cmp	r1, r2
   19ad8:	bcs	19af4 <__assert_fail@plt+0x77bc>
   19adc:	add	r2, r1, #1
   19ae0:	str	r2, [r0, #20]
   19ae4:	strb	r6, [r1]
   19ae8:	subs	r4, r4, #1
   19aec:	bne	19ac8 <__assert_fail@plt+0x7790>
   19af0:	b	19b04 <__assert_fail@plt+0x77cc>
   19af4:	mov	r1, #95	; 0x5f
   19af8:	bl	1220c <__overflow@plt>
   19afc:	subs	r4, r4, #1
   19b00:	bne	19ac8 <__assert_fail@plt+0x7790>
   19b04:	ldr	r0, [r5]
   19b08:	ldr	r1, [r0, #20]
   19b0c:	ldr	r2, [r0, #24]
   19b10:	cmp	r1, r2
   19b14:	bcs	19c3c <__assert_fail@plt+0x7904>
   19b18:	add	r2, r1, #1
   19b1c:	str	r2, [r0, #20]
   19b20:	mov	r0, #10
   19b24:	strb	r0, [r1]
   19b28:	cmp	sl, #0
   19b2c:	beq	19568 <__assert_fail@plt+0x7230>
   19b30:	ldr	sl, [sl, #36]	; 0x24
   19b34:	cmp	sl, #0
   19b38:	bne	195a0 <__assert_fail@plt+0x7268>
   19b3c:	movw	r0, #39016	; 0x9868
   19b40:	movt	r0, #3
   19b44:	ldrb	r0, [r0, #7]
   19b48:	cmp	r0, #0
   19b4c:	bne	19568 <__assert_fail@plt+0x7230>
   19b50:	movw	r0, #39016	; 0x9868
   19b54:	movt	r0, #3
   19b58:	ldrb	r0, [r0, #6]
   19b5c:	cmp	r0, #0
   19b60:	beq	195a0 <__assert_fail@plt+0x7268>
   19b64:	b	19568 <__assert_fail@plt+0x7230>
   19b68:	movw	r1, #31299	; 0x7a43
   19b6c:	mov	r0, #0
   19b70:	mov	r2, #5
   19b74:	movt	r1, #2
   19b78:	bl	11f54 <dcgettext@plt>
   19b7c:	mov	r1, r0
   19b80:	mov	r0, #1
   19b84:	bl	121a0 <__printf_chk@plt>
   19b88:	cmp	sl, #0
   19b8c:	bne	19b30 <__assert_fail@plt+0x77f8>
   19b90:	b	19568 <__assert_fail@plt+0x7230>
   19b94:	mov	lr, r3
   19b98:	movw	r0, #39016	; 0x9868
   19b9c:	movt	r0, #3
   19ba0:	ldrb	r0, [r0, #2]
   19ba4:	cmp	r8, r0
   19ba8:	bne	19be4 <__assert_fail@plt+0x78ac>
   19bac:	ldrb	r1, [r5]
   19bb0:	ldr	r8, [sp]
   19bb4:	sub	r0, r1, #48	; 0x30
   19bb8:	cmp	r0, #9
   19bbc:	bhi	19bec <__assert_fail@plt+0x78b4>
   19bc0:	uxtb	r0, r1
   19bc4:	uxtb	r2, sl
   19bc8:	cmp	r2, r0
   19bcc:	movcc	sl, r1
   19bd0:	ldrb	r1, [r5, #1]!
   19bd4:	sub	r0, r1, #48	; 0x30
   19bd8:	cmp	r0, #10
   19bdc:	bcc	19bc0 <__assert_fail@plt+0x7888>
   19be0:	b	19bec <__assert_fail@plt+0x78b4>
   19be4:	ldr	r8, [sp]
   19be8:	mov	r5, lr
   19bec:	uxtb	r0, sl
   19bf0:	mov	sl, r7
   19bf4:	cmp	r0, #48	; 0x30
   19bf8:	bcc	19910 <__assert_fail@plt+0x75d8>
   19bfc:	ldr	r0, [sp, #8]
   19c00:	ldrb	r0, [r0, #29]
   19c04:	cmp	r0, #0
   19c08:	beq	19c28 <__assert_fail@plt+0x78f0>
   19c0c:	ldrb	r0, [r5]
   19c10:	movw	r1, #32272	; 0x7e10
   19c14:	movt	r1, #2
   19c18:	ldrb	r0, [r1, r0]
   19c1c:	cmp	r0, #0
   19c20:	movwne	r0, #1
   19c24:	b	19c2c <__assert_fail@plt+0x78f4>
   19c28:	mov	r0, #0
   19c2c:	add	sl, r5, r0
   19c30:	b	1990c <__assert_fail@plt+0x75d4>
   19c34:	mov	sl, r6
   19c38:	b	19914 <__assert_fail@plt+0x75dc>
   19c3c:	mov	r1, #10
   19c40:	bl	1220c <__overflow@plt>
   19c44:	cmp	sl, #0
   19c48:	bne	19b30 <__assert_fail@plt+0x77f8>
   19c4c:	b	19568 <__assert_fail@plt+0x7230>
   19c50:	movw	r1, #31286	; 0x7a36
   19c54:	mov	r0, #0
   19c58:	mov	r2, #5
   19c5c:	movt	r1, #2
   19c60:	bl	11f54 <dcgettext@plt>
   19c64:	mov	r1, r8
   19c68:	bl	17948 <__assert_fail@plt+0x5610>
   19c6c:	push	{r4, sl, fp, lr}
   19c70:	add	fp, sp, #8
   19c74:	movw	r3, #37348	; 0x91e4
   19c78:	ldr	ip, [r2, #12]
   19c7c:	ldr	lr, [r2, #8]
   19c80:	add	r1, r0, r1
   19c84:	movt	r3, #3
   19c88:	sub	r1, r1, #1
   19c8c:	ldr	r3, [r3, #4]
   19c90:	cmp	ip, #0
   19c94:	addeq	lr, lr, #1
   19c98:	cmp	r3, #256	; 0x100
   19c9c:	bne	19d08 <__assert_fail@plt+0x79d0>
   19ca0:	cmp	r1, r0
   19ca4:	bls	19d58 <__assert_fail@plt+0x7a20>
   19ca8:	movw	r3, #37728	; 0x9360
   19cac:	movt	r3, #3
   19cb0:	cmp	lr, #0
   19cb4:	bne	19cc0 <__assert_fail@plt+0x7988>
   19cb8:	b	19d58 <__assert_fail@plt+0x7a20>
   19cbc:	add	r0, r0, #1
   19cc0:	cmp	r0, r1
   19cc4:	bcs	19ce0 <__assert_fail@plt+0x79a8>
   19cc8:	ldrb	r4, [r0]
   19ccc:	ldrb	r4, [r3, r4]
   19cd0:	cmp	r4, #0
   19cd4:	bne	19cbc <__assert_fail@plt+0x7984>
   19cd8:	b	19ce0 <__assert_fail@plt+0x79a8>
   19cdc:	add	r0, r0, #1
   19ce0:	cmp	r0, r1
   19ce4:	bcs	19cf8 <__assert_fail@plt+0x79c0>
   19ce8:	ldrb	r4, [r0]
   19cec:	ldrb	r4, [r3, r4]
   19cf0:	cmp	r4, #0
   19cf4:	beq	19cdc <__assert_fail@plt+0x79a4>
   19cf8:	sub	lr, lr, #1
   19cfc:	cmp	r0, r1
   19d00:	bcc	19cb0 <__assert_fail@plt+0x7978>
   19d04:	b	19d58 <__assert_fail@plt+0x7a20>
   19d08:	cmp	r1, r0
   19d0c:	bls	19d58 <__assert_fail@plt+0x7a20>
   19d10:	cmp	lr, #0
   19d14:	beq	19d58 <__assert_fail@plt+0x7a20>
   19d18:	sub	lr, lr, #1
   19d1c:	cmp	r0, r1
   19d20:	bcc	19d3c <__assert_fail@plt+0x7a04>
   19d24:	cmp	r0, r1
   19d28:	bcc	19d10 <__assert_fail@plt+0x79d8>
   19d2c:	b	19d58 <__assert_fail@plt+0x7a20>
   19d30:	add	r0, r0, #1
   19d34:	cmp	r0, r1
   19d38:	bcs	19d24 <__assert_fail@plt+0x79ec>
   19d3c:	ldrb	r4, [r0]
   19d40:	cmp	r3, r4
   19d44:	bne	19d30 <__assert_fail@plt+0x79f8>
   19d48:	orrs	r4, lr, ip
   19d4c:	addne	r0, r0, #1
   19d50:	cmp	r0, r1
   19d54:	bcc	19d10 <__assert_fail@plt+0x79d8>
   19d58:	cmp	ip, #0
   19d5c:	popeq	{r4, sl, fp, pc}
   19d60:	ldrb	r2, [r2, #25]
   19d64:	cmp	r2, #0
   19d68:	beq	19d98 <__assert_fail@plt+0x7a60>
   19d6c:	cmp	r0, r1
   19d70:	bcs	19d98 <__assert_fail@plt+0x7a60>
   19d74:	movw	r2, #37728	; 0x9360
   19d78:	movt	r2, #3
   19d7c:	ldrb	r3, [r0]
   19d80:	ldrb	r3, [r2, r3]
   19d84:	cmp	r3, #0
   19d88:	beq	19d98 <__assert_fail@plt+0x7a60>
   19d8c:	add	r0, r0, #1
   19d90:	cmp	r0, r1
   19d94:	bcc	19d7c <__assert_fail@plt+0x7a44>
   19d98:	add	r0, r0, ip
   19d9c:	cmp	r1, r0
   19da0:	movcc	r0, r1
   19da4:	pop	{r4, sl, fp, pc}
   19da8:	push	{r4, r5, r6, r7, fp, lr}
   19dac:	add	fp, sp, #16
   19db0:	mov	r5, r2
   19db4:	mov	r4, r1
   19db8:	mov	r6, r0
   19dbc:	bl	12164 <__errno_location@plt>
   19dc0:	mov	r7, r0
   19dc4:	mov	r0, #0
   19dc8:	mov	r1, r4
   19dcc:	mov	r2, r5
   19dd0:	str	r0, [r7]
   19dd4:	mov	r0, r6
   19dd8:	bl	12158 <strxfrm@plt>
   19ddc:	ldr	r5, [r7]
   19de0:	cmp	r5, #0
   19de4:	popeq	{r4, r5, r6, r7, fp, pc}
   19de8:	movw	r1, #31183	; 0x79cf
   19dec:	mov	r0, #0
   19df0:	mov	r2, #5
   19df4:	movt	r1, #2
   19df8:	bl	11f54 <dcgettext@plt>
   19dfc:	mov	r2, r0
   19e00:	mov	r0, #0
   19e04:	mov	r1, r5
   19e08:	bl	12080 <error@plt>
   19e0c:	movw	r1, #31212	; 0x79ec
   19e10:	mov	r0, #0
   19e14:	mov	r2, #5
   19e18:	movt	r1, #2
   19e1c:	bl	11f54 <dcgettext@plt>
   19e20:	mov	r2, r0
   19e24:	mov	r0, #0
   19e28:	mov	r1, #0
   19e2c:	bl	12080 <error@plt>
   19e30:	movw	r1, #31254	; 0x7a16
   19e34:	mov	r0, #0
   19e38:	mov	r2, #5
   19e3c:	movt	r1, #2
   19e40:	bl	11f54 <dcgettext@plt>
   19e44:	mov	r5, r0
   19e48:	mov	r0, #0
   19e4c:	mov	r1, #8
   19e50:	mov	r2, r4
   19e54:	bl	216b8 <__assert_fail@plt+0xf380>
   19e58:	mov	r3, r0
   19e5c:	mov	r0, #2
   19e60:	mov	r1, #0
   19e64:	mov	r2, r5
   19e68:	bl	12080 <error@plt>
   19e6c:	cmp	r0, r1
   19e70:	bxeq	lr
   19e74:	push	{r4, sl, fp, lr}
   19e78:	add	fp, sp, #8
   19e7c:	mov	r4, r0
   19e80:	bl	11f84 <dup2@plt>
   19e84:	mov	r0, r4
   19e88:	pop	{r4, sl, fp, lr}
   19e8c:	b	12320 <close@plt>
   19e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e94:	add	fp, sp, #28
   19e98:	sub	sp, sp, #28
   19e9c:	mov	r9, r0
   19ea0:	mov	r6, r1
   19ea4:	mov	r0, r1
   19ea8:	mov	r1, #4
   19eac:	mov	r7, r2
   19eb0:	bl	235a0 <__assert_fail@plt+0x11268>
   19eb4:	cmp	r6, #0
   19eb8:	str	r0, [r7]
   19ebc:	beq	1a0f8 <__assert_fail@plt+0x7dc0>
   19ec0:	movw	r5, #29726	; 0x741e
   19ec4:	mov	r4, r0
   19ec8:	mov	r7, #0
   19ecc:	str	r6, [sp, #12]
   19ed0:	str	r9, [sp, #4]
   19ed4:	str	r0, [sp, #8]
   19ed8:	movt	r5, #2
   19edc:	add	r0, r9, r7, lsl #3
   19ee0:	ldr	sl, [r0, #4]
   19ee4:	cmp	sl, #0
   19ee8:	ldrbne	r0, [sl, #8]
   19eec:	cmpne	r0, #0
   19ef0:	bne	19f20 <__assert_fail@plt+0x7be8>
   19ef4:	ldr	r0, [r9, r7, lsl #3]
   19ef8:	mov	r1, r5
   19efc:	bl	179bc <__assert_fail@plt+0x5684>
   19f00:	mov	r8, r0
   19f04:	cmp	r8, #0
   19f08:	str	r8, [r4, r7, lsl #2]
   19f0c:	beq	1a0fc <__assert_fail@plt+0x7dc4>
   19f10:	add	r7, r7, #1
   19f14:	cmp	r7, r6
   19f18:	bcc	19edc <__assert_fail@plt+0x7ba4>
   19f1c:	b	1a0fc <__assert_fail@plt+0x7dc4>
   19f20:	cmp	r0, #1
   19f24:	bne	19f60 <__assert_fail@plt+0x7c28>
   19f28:	movw	r0, #39016	; 0x9868
   19f2c:	ldr	r6, [sl, #4]
   19f30:	add	r1, sp, #16
   19f34:	movt	r0, #3
   19f38:	ldr	r0, [r0, #48]	; 0x30
   19f3c:	str	r6, [sp, #20]
   19f40:	bl	1eae0 <__assert_fail@plt+0xc7a8>
   19f44:	cmp	r0, #0
   19f48:	beq	19f5c <__assert_fail@plt+0x7c24>
   19f4c:	mov	r1, #2
   19f50:	strb	r1, [r0, #8]
   19f54:	mov	r0, r6
   19f58:	bl	1af10 <__assert_fail@plt+0x8bd8>
   19f5c:	ldr	r9, [sp, #4]
   19f60:	add	r0, sl, #9
   19f64:	mov	r1, #0
   19f68:	mov	r8, #0
   19f6c:	bl	1208c <open64@plt>
   19f70:	cmp	r0, #0
   19f74:	blt	1a048 <__assert_fail@plt+0x7d10>
   19f78:	mov	r6, r0
   19f7c:	add	r0, sp, #16
   19f80:	mov	r1, #9
   19f84:	bl	1acbc <__assert_fail@plt+0x8984>
   19f88:	cmn	r0, #1
   19f8c:	beq	1a068 <__assert_fail@plt+0x7d30>
   19f90:	cmp	r0, #0
   19f94:	beq	1a108 <__assert_fail@plt+0x7dd0>
   19f98:	str	r0, [sl, #4]
   19f9c:	movw	r0, #39016	; 0x9868
   19fa0:	movt	r0, #3
   19fa4:	ldr	r0, [r0, #48]	; 0x30
   19fa8:	cmp	r0, #0
   19fac:	bne	19fe8 <__assert_fail@plt+0x7cb0>
   19fb0:	movw	r2, #45108	; 0xb034
   19fb4:	movw	r3, #45124	; 0xb044
   19fb8:	mov	r0, #0
   19fbc:	mov	r1, #0
   19fc0:	str	r0, [sp]
   19fc4:	mov	r0, #47	; 0x2f
   19fc8:	movt	r2, #1
   19fcc:	movt	r3, #1
   19fd0:	bl	1de60 <__assert_fail@plt+0xbb28>
   19fd4:	movw	r1, #39016	; 0x9868
   19fd8:	cmp	r0, #0
   19fdc:	movt	r1, #3
   19fe0:	str	r0, [r1, #48]	; 0x30
   19fe4:	beq	1a15c <__assert_fail@plt+0x7e24>
   19fe8:	mov	r1, #1
   19fec:	strb	r1, [sl, #8]
   19ff0:	mov	r1, sl
   19ff4:	bl	1ea98 <__assert_fail@plt+0xc760>
   19ff8:	cmp	r0, #0
   19ffc:	beq	1a15c <__assert_fail@plt+0x7e24>
   1a000:	mov	r0, r6
   1a004:	bl	12320 <close@plt>
   1a008:	ldr	r0, [sp, #20]
   1a00c:	bl	12320 <close@plt>
   1a010:	ldr	r0, [sp, #16]
   1a014:	movw	r5, #29726	; 0x741e
   1a018:	movt	r5, #2
   1a01c:	mov	r1, r5
   1a020:	bl	11df8 <fdopen@plt>
   1a024:	ldr	r6, [sp, #12]
   1a028:	mov	r8, r0
   1a02c:	cmp	r0, #0
   1a030:	beq	1a0c0 <__assert_fail@plt+0x7d88>
   1a034:	ldr	r4, [sp, #8]
   1a038:	cmp	r8, #0
   1a03c:	str	r8, [r4, r7, lsl #2]
   1a040:	bne	19f10 <__assert_fail@plt+0x7bd8>
   1a044:	b	1a0fc <__assert_fail@plt+0x7dc4>
   1a048:	ldr	r6, [sp, #12]
   1a04c:	ldr	r4, [sp, #8]
   1a050:	movw	r5, #29726	; 0x741e
   1a054:	movt	r5, #2
   1a058:	cmp	r8, #0
   1a05c:	str	r8, [r4, r7, lsl #2]
   1a060:	bne	19f10 <__assert_fail@plt+0x7bd8>
   1a064:	b	1a0fc <__assert_fail@plt+0x7dc4>
   1a068:	movw	r5, #39016	; 0x9868
   1a06c:	movt	r5, #3
   1a070:	mov	r8, r5
   1a074:	bl	12164 <__errno_location@plt>
   1a078:	ldr	r5, [r0]
   1a07c:	cmp	r5, #24
   1a080:	bne	1a160 <__assert_fail@plt+0x7e28>
   1a084:	mov	r4, r0
   1a088:	mov	r0, r6
   1a08c:	bl	12320 <close@plt>
   1a090:	mov	r0, #24
   1a094:	ldr	r6, [sp, #12]
   1a098:	ldr	r9, [sp, #4]
   1a09c:	movw	r5, #29726	; 0x741e
   1a0a0:	mov	r8, #0
   1a0a4:	str	r0, [r4]
   1a0a8:	ldr	r4, [sp, #8]
   1a0ac:	movt	r5, #2
   1a0b0:	cmp	r8, #0
   1a0b4:	str	r8, [r4, r7, lsl #2]
   1a0b8:	bne	19f10 <__assert_fail@plt+0x7bd8>
   1a0bc:	b	1a0fc <__assert_fail@plt+0x7dc4>
   1a0c0:	bl	12164 <__errno_location@plt>
   1a0c4:	mov	r4, r0
   1a0c8:	ldr	r6, [r0]
   1a0cc:	ldr	r0, [sp, #16]
   1a0d0:	bl	12320 <close@plt>
   1a0d4:	str	r6, [r4]
   1a0d8:	ldr	r9, [sp, #4]
   1a0dc:	ldr	r6, [sp, #12]
   1a0e0:	mov	r8, #0
   1a0e4:	ldr	r4, [sp, #8]
   1a0e8:	cmp	r8, #0
   1a0ec:	str	r8, [r4, r7, lsl #2]
   1a0f0:	bne	19f10 <__assert_fail@plt+0x7bd8>
   1a0f4:	b	1a0fc <__assert_fail@plt+0x7dc4>
   1a0f8:	mov	r7, #0
   1a0fc:	mov	r0, r7
   1a100:	sub	sp, fp, #28
   1a104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a108:	ldr	r0, [sp, #16]
   1a10c:	bl	12320 <close@plt>
   1a110:	mov	r0, r6
   1a114:	mov	r1, #0
   1a118:	bl	19e6c <__assert_fail@plt+0x7b34>
   1a11c:	ldr	r0, [sp, #20]
   1a120:	mov	r1, #1
   1a124:	bl	19e6c <__assert_fail@plt+0x7b34>
   1a128:	movw	r0, #39016	; 0x9868
   1a12c:	movw	r2, #31364	; 0x7a84
   1a130:	mov	r3, #0
   1a134:	movt	r0, #3
   1a138:	movt	r2, #2
   1a13c:	ldr	r0, [r0, #16]
   1a140:	mov	r1, r0
   1a144:	bl	11ed0 <execlp@plt>
   1a148:	bl	12164 <__errno_location@plt>
   1a14c:	ldr	r0, [r0]
   1a150:	movw	r1, #31367	; 0x7a87
   1a154:	movt	r1, #2
   1a158:	bl	1ae84 <__assert_fail@plt+0x8b4c>
   1a15c:	bl	23a30 <__assert_fail@plt+0x116f8>
   1a160:	movw	r1, #31333	; 0x7a65
   1a164:	mov	r0, #0
   1a168:	mov	r2, #5
   1a16c:	movt	r1, #2
   1a170:	bl	11f54 <dcgettext@plt>
   1a174:	ldr	r1, [r8, #16]
   1a178:	mov	r4, r0
   1a17c:	mov	r0, #4
   1a180:	bl	21760 <__assert_fail@plt+0xf428>
   1a184:	mov	r3, r0
   1a188:	mov	r0, #2
   1a18c:	mov	r1, r5
   1a190:	mov	r2, r4
   1a194:	bl	12080 <error@plt>
   1a198:	nop	{0}
   1a19c:	nop	{0}
   1a1a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1a4:	add	fp, sp, #28
   1a1a8:	sub	sp, sp, #84	; 0x54
   1a1ac:	str	r1, [sp, #44]	; 0x2c
   1a1b0:	str	r0, [fp, #-52]	; 0xffffffcc
   1a1b4:	mov	r0, r2
   1a1b8:	mov	r1, #28
   1a1bc:	str	r3, [sp, #36]	; 0x24
   1a1c0:	mov	r5, r2
   1a1c4:	bl	235a0 <__assert_fail@plt+0x11268>
   1a1c8:	mov	r4, r0
   1a1cc:	mov	r0, r5
   1a1d0:	mov	r1, #4
   1a1d4:	bl	235a0 <__assert_fail@plt+0x11268>
   1a1d8:	str	r0, [sp, #56]	; 0x38
   1a1dc:	mov	r0, r5
   1a1e0:	mov	r1, #4
   1a1e4:	bl	235a0 <__assert_fail@plt+0x11268>
   1a1e8:	str	r0, [sp, #48]	; 0x30
   1a1ec:	mov	r0, r5
   1a1f0:	mov	r1, #4
   1a1f4:	bl	235a0 <__assert_fail@plt+0x11268>
   1a1f8:	mov	r8, r0
   1a1fc:	mov	r0, #0
   1a200:	cmp	r5, #0
   1a204:	str	r0, [fp, #-44]	; 0xffffffd4
   1a208:	beq	1a9d0 <__assert_fail@plt+0x8698>
   1a20c:	movw	r0, #39016	; 0x9868
   1a210:	ldr	r9, [fp, #-52]	; 0xffffffcc
   1a214:	mov	sl, #0
   1a218:	str	r4, [fp, #-48]	; 0xffffffd0
   1a21c:	str	r8, [sp, #52]	; 0x34
   1a220:	movt	r0, #3
   1a224:	ldr	r0, [r0, #20]
   1a228:	str	r0, [sp, #20]
   1a22c:	ldr	r0, [fp, #12]
   1a230:	add	r0, r0, #4
   1a234:	str	r0, [sp, #40]	; 0x28
   1a238:	rsb	r0, sl, sl, lsl #3
   1a23c:	movw	r1, #37348	; 0x91e4
   1a240:	add	r6, r4, r0, lsl #2
   1a244:	movw	r0, #39016	; 0x9868
   1a248:	movt	r1, #3
   1a24c:	movt	r0, #3
   1a250:	ldr	r1, [r1, #12]
   1a254:	ldr	r0, [r0, #28]
   1a258:	udiv	r0, r0, r5
   1a25c:	cmp	r1, r0
   1a260:	movhi	r0, r1
   1a264:	and	r1, r0, #15
   1a268:	rsb	r1, r1, #16
   1a26c:	add	r7, r1, r0
   1a270:	mov	r0, r7
   1a274:	bl	24aec <__assert_fail@plt+0x127b4>
   1a278:	cmp	r0, #0
   1a27c:	str	r0, [r6]
   1a280:	bne	1a294 <__assert_fail@plt+0x7f5c>
   1a284:	lsr	r0, r7, #1
   1a288:	cmp	r7, #35	; 0x23
   1a28c:	bhi	1a264 <__assert_fail@plt+0x7f2c>
   1a290:	b	1a484 <__assert_fail@plt+0x814c>
   1a294:	mov	r4, r6
   1a298:	ldr	r8, [fp, #12]
   1a29c:	mov	r0, #0
   1a2a0:	mov	r1, #16
   1a2a4:	str	r7, [r4, #12]!
   1a2a8:	mov	r7, r4
   1a2ac:	str	r0, [r4, #4]
   1a2b0:	str	r1, [r4, #8]
   1a2b4:	str	r0, [r4, #-8]
   1a2b8:	strb	r0, [r4, #12]
   1a2bc:	str	r0, [r7, #-4]!
   1a2c0:	mov	r0, r6
   1a2c4:	ldr	r2, [r9, sl, lsl #3]
   1a2c8:	ldr	r1, [r8, sl, lsl #2]
   1a2cc:	bl	17c24 <__assert_fail@plt+0x58ec>
   1a2d0:	cmp	r0, #0
   1a2d4:	beq	1a318 <__assert_fail@plt+0x7fe0>
   1a2d8:	ldr	r0, [r4]
   1a2dc:	ldr	r1, [r6]
   1a2e0:	ldr	r2, [sp, #56]	; 0x38
   1a2e4:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1a2e8:	ldr	r8, [sp, #52]	; 0x34
   1a2ec:	add	r0, r1, r0
   1a2f0:	sub	r1, r0, #16
   1a2f4:	str	r1, [r2, sl, lsl #2]
   1a2f8:	ldr	r1, [r7]
   1a2fc:	sub	r0, r0, r1, lsl #4
   1a300:	ldr	r1, [sp, #48]	; 0x30
   1a304:	str	r0, [r1, sl, lsl #2]
   1a308:	add	sl, sl, #1
   1a30c:	cmp	sl, r5
   1a310:	bcc	1a238 <__assert_fail@plt+0x7f00>
   1a314:	b	1a440 <__assert_fail@plt+0x8108>
   1a318:	ldr	r1, [r9, sl, lsl #3]
   1a31c:	ldr	r0, [r8, sl, lsl #2]
   1a320:	bl	17158 <__assert_fail@plt+0x4e20>
   1a324:	ldr	r4, [sp, #44]	; 0x2c
   1a328:	cmp	sl, r4
   1a32c:	bcs	1a340 <__assert_fail@plt+0x8008>
   1a330:	ldr	r0, [r9, sl, lsl #3]
   1a334:	bl	1b05c <__assert_fail@plt+0x8d24>
   1a338:	sub	r4, r4, #1
   1a33c:	str	r4, [sp, #44]	; 0x2c
   1a340:	ldr	r0, [r6]
   1a344:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1a348:	bl	1d88c <__assert_fail@plt+0xb554>
   1a34c:	ldr	r8, [sp, #52]	; 0x34
   1a350:	sub	r0, r5, #1
   1a354:	cmp	sl, r0
   1a358:	bcs	1a434 <__assert_fail@plt+0x80fc>
   1a35c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1a360:	mvn	r1, sl
   1a364:	mov	r2, sl
   1a368:	add	lr, r5, r1
   1a36c:	cmp	lr, #2
   1a370:	bcc	1a3e4 <__assert_fail@plt+0x80ac>
   1a374:	ldr	r1, [fp, #12]
   1a378:	add	r3, r6, sl, lsl #3
   1a37c:	add	r2, r1, r5, lsl #2
   1a380:	cmp	r3, r2
   1a384:	bcs	1a3a0 <__assert_fail@plt+0x8068>
   1a388:	ldr	r1, [fp, #12]
   1a38c:	add	r2, r6, r5, lsl #3
   1a390:	add	r7, r1, sl, lsl #2
   1a394:	cmp	r7, r2
   1a398:	mov	r2, sl
   1a39c:	bcc	1a3e4 <__assert_fail@plt+0x80ac>
   1a3a0:	ldr	r1, [sp, #40]	; 0x28
   1a3a4:	bic	ip, lr, #1
   1a3a8:	add	r2, sl, ip
   1a3ac:	mov	r7, ip
   1a3b0:	add	r6, r1, sl, lsl #2
   1a3b4:	mov	r4, r6
   1a3b8:	add	r1, r3, #8
   1a3bc:	subs	r7, r7, #2
   1a3c0:	vld1.32	{d16-d17}, [r1]
   1a3c4:	vst1.32	{d16-d17}, [r3]!
   1a3c8:	vld1.32	{d16}, [r4]!
   1a3cc:	vstr	d16, [r6, #-4]
   1a3d0:	mov	r6, r4
   1a3d4:	bne	1a3b8 <__assert_fail@plt+0x8080>
   1a3d8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1a3dc:	cmp	lr, ip
   1a3e0:	beq	1a420 <__assert_fail@plt+0x80e8>
   1a3e4:	ldr	r1, [sp, #40]	; 0x28
   1a3e8:	add	r7, r6, r2, lsl #3
   1a3ec:	sub	r3, r5, #1
   1a3f0:	add	r1, r1, r2, lsl #2
   1a3f4:	sub	r2, r3, r2
   1a3f8:	mov	r3, r7
   1a3fc:	ldr	r6, [r7, #12]
   1a400:	ldr	r4, [r3, #8]!
   1a404:	subs	r2, r2, #1
   1a408:	stm	r7, {r4, r6}
   1a40c:	ldr	r7, [r1]
   1a410:	str	r7, [r1, #-4]
   1a414:	add	r1, r1, #4
   1a418:	mov	r7, r3
   1a41c:	bne	1a3fc <__assert_fail@plt+0x80c4>
   1a420:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1a424:	mov	r5, r0
   1a428:	cmp	sl, r5
   1a42c:	bcc	1a238 <__assert_fail@plt+0x7f00>
   1a430:	b	1a440 <__assert_fail@plt+0x8108>
   1a434:	mov	r5, r0
   1a438:	cmp	sl, r5
   1a43c:	bcc	1a238 <__assert_fail@plt+0x7f00>
   1a440:	cmp	r5, #0
   1a444:	beq	1a9d0 <__assert_fail@plt+0x8698>
   1a448:	mov	r0, #0
   1a44c:	cmp	r5, #3
   1a450:	bls	1a490 <__assert_fail@plt+0x8158>
   1a454:	add	r1, pc, #852	; 0x354
   1a458:	bic	r0, r5, #3
   1a45c:	vmov.i32	q8, #4	; 0x00000004
   1a460:	mov	r2, r8
   1a464:	vld1.64	{d18-d19}, [r1 :128]
   1a468:	mov	r1, r0
   1a46c:	vadd.i32	q10, q9, q8
   1a470:	vst1.32	{d18-d19}, [r2]!
   1a474:	subs	r1, r1, #4
   1a478:	vorr	q9, q10, q10
   1a47c:	bne	1a46c <__assert_fail@plt+0x8134>
   1a480:	b	1a488 <__assert_fail@plt+0x8150>
   1a484:	bl	23a30 <__assert_fail@plt+0x116f8>
   1a488:	cmp	r5, r0
   1a48c:	beq	1a49c <__assert_fail@plt+0x8164>
   1a490:	str	r0, [r8, r0, lsl #2]
   1a494:	add	r0, r0, #1
   1a498:	b	1a488 <__assert_fail@plt+0x8150>
   1a49c:	ldr	r2, [sp, #56]	; 0x38
   1a4a0:	cmp	r5, #2
   1a4a4:	bcc	1a4ec <__assert_fail@plt+0x81b4>
   1a4a8:	mov	r6, #1
   1a4ac:	ldr	r0, [r8, r6, lsl #2]
   1a4b0:	sub	r4, r6, #1
   1a4b4:	ldr	r1, [r2, r0, lsl #2]
   1a4b8:	ldr	r0, [r8, r4, lsl #2]
   1a4bc:	ldr	r0, [r2, r0, lsl #2]
   1a4c0:	bl	18080 <__assert_fail@plt+0x5d48>
   1a4c4:	cmp	r0, #1
   1a4c8:	ldr	r2, [sp, #56]	; 0x38
   1a4cc:	ldrge	r0, [r8, r4, lsl #2]
   1a4d0:	ldrge	r1, [r8, r6, lsl #2]
   1a4d4:	strge	r1, [r8, r4, lsl #2]
   1a4d8:	strge	r0, [r8, r6, lsl #2]
   1a4dc:	movge	r6, #0
   1a4e0:	add	r6, r6, #1
   1a4e4:	cmp	r6, r5
   1a4e8:	bcc	1a4ac <__assert_fail@plt+0x8174>
   1a4ec:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1a4f0:	cmp	r5, #0
   1a4f4:	beq	1a9d0 <__assert_fail@plt+0x8698>
   1a4f8:	add	r0, r8, #4
   1a4fc:	ldr	r2, [sp, #56]	; 0x38
   1a500:	str	r0, [sp, #24]
   1a504:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a508:	add	r0, r0, #8
   1a50c:	str	r0, [sp, #16]
   1a510:	add	r0, r4, #28
   1a514:	str	r0, [sp, #12]
   1a518:	add	r0, r2, #4
   1a51c:	str	r0, [sp, #8]
   1a520:	ldr	r0, [sp, #48]	; 0x30
   1a524:	add	r0, r0, #4
   1a528:	str	r0, [sp, #4]
   1a52c:	mov	r0, #0
   1a530:	str	r0, [sp, #32]
   1a534:	mov	r0, #0
   1a538:	str	r0, [sp, #28]
   1a53c:	ldr	r0, [r8]
   1a540:	mov	r4, r2
   1a544:	ldr	sl, [r2, r0, lsl #2]
   1a548:	movw	r0, #39016	; 0x9868
   1a54c:	movt	r0, #3
   1a550:	ldrb	r0, [r0, #7]
   1a554:	cmp	r0, #1
   1a558:	bne	1a5bc <__assert_fail@plt+0x8284>
   1a55c:	ldr	r0, [sp, #32]
   1a560:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1a564:	ldr	r6, [sp, #28]
   1a568:	cmp	r0, #0
   1a56c:	beq	1a590 <__assert_fail@plt+0x8258>
   1a570:	mov	r1, sl
   1a574:	bl	18080 <__assert_fail@plt+0x5d48>
   1a578:	cmp	r0, #0
   1a57c:	beq	1a5e0 <__assert_fail@plt+0x82a8>
   1a580:	ldr	r1, [sp, #36]	; 0x24
   1a584:	ldr	r2, [fp, #8]
   1a588:	sub	r0, fp, #44	; 0x2c
   1a58c:	bl	19460 <__assert_fail@plt+0x7128>
   1a590:	ldr	r2, [sl, #4]
   1a594:	cmp	r6, r2
   1a598:	bcs	1a5d8 <__assert_fail@plt+0x82a0>
   1a59c:	mov	r0, r6
   1a5a0:	cmp	r0, #0
   1a5a4:	beq	1a5e8 <__assert_fail@plt+0x82b0>
   1a5a8:	lsl	r6, r0, #1
   1a5ac:	cmp	r2, r0, lsl #1
   1a5b0:	mov	r0, r6
   1a5b4:	bhi	1a5a0 <__assert_fail@plt+0x8268>
   1a5b8:	b	1a5ec <__assert_fail@plt+0x82b4>
   1a5bc:	ldr	r1, [sp, #36]	; 0x24
   1a5c0:	ldr	r2, [fp, #8]
   1a5c4:	mov	r0, sl
   1a5c8:	bl	19460 <__assert_fail@plt+0x7128>
   1a5cc:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1a5d0:	mov	r2, r4
   1a5d4:	b	1a654 <__assert_fail@plt+0x831c>
   1a5d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a5dc:	b	1a604 <__assert_fail@plt+0x82cc>
   1a5e0:	mov	r2, r4
   1a5e4:	b	1a654 <__assert_fail@plt+0x831c>
   1a5e8:	mov	r6, r2
   1a5ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a5f0:	bl	1d88c <__assert_fail@plt+0xb554>
   1a5f4:	mov	r0, r6
   1a5f8:	bl	234d0 <__assert_fail@plt+0x11198>
   1a5fc:	str	r0, [fp, #-44]	; 0xffffffd4
   1a600:	ldr	r2, [sl, #4]
   1a604:	str	r2, [fp, #-40]	; 0xffffffd8
   1a608:	ldr	r1, [sl]
   1a60c:	bl	11ec4 <memcpy@plt>
   1a610:	ldr	r0, [sp, #20]
   1a614:	str	r6, [sp, #28]
   1a618:	cmp	r0, #0
   1a61c:	beq	1a648 <__assert_fail@plt+0x8310>
   1a620:	ldr	r0, [sl]
   1a624:	ldr	r1, [sl, #8]
   1a628:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a62c:	sub	r1, r1, r0
   1a630:	add	r1, r2, r1
   1a634:	str	r1, [fp, #-36]	; 0xffffffdc
   1a638:	ldr	r1, [sl, #12]
   1a63c:	sub	r0, r1, r0
   1a640:	add	r0, r2, r0
   1a644:	str	r0, [fp, #-32]	; 0xffffffe0
   1a648:	sub	r0, fp, #44	; 0x2c
   1a64c:	mov	r2, r4
   1a650:	str	r0, [sp, #32]
   1a654:	ldr	r6, [r8]
   1a658:	ldr	r0, [sp, #48]	; 0x30
   1a65c:	ldr	r0, [r0, r6, lsl #2]
   1a660:	cmp	r0, sl
   1a664:	bcs	1a680 <__assert_fail@plt+0x8348>
   1a668:	sub	r0, sl, #16
   1a66c:	str	r0, [r2, r6, lsl #2]
   1a670:	mov	r1, #0
   1a674:	cmp	r5, #2
   1a678:	bcs	1a6e8 <__assert_fail@plt+0x83b0>
   1a67c:	b	1a98c <__assert_fail@plt+0x8654>
   1a680:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a684:	ldr	r2, [r0, r6, lsl #3]
   1a688:	ldr	r0, [fp, #12]
   1a68c:	ldr	r1, [r0, r6, lsl #2]
   1a690:	rsb	r0, r6, r6, lsl #3
   1a694:	add	r0, r7, r0, lsl #2
   1a698:	bl	17c24 <__assert_fail@plt+0x58ec>
   1a69c:	cmp	r0, #0
   1a6a0:	beq	1a7c0 <__assert_fail@plt+0x8488>
   1a6a4:	ldr	r6, [r8]
   1a6a8:	mov	r1, r7
   1a6ac:	mov	r3, r4
   1a6b0:	rsb	r0, r6, r6, lsl #3
   1a6b4:	ldr	r0, [r1, r0, lsl #2]!
   1a6b8:	ldr	r2, [r1, #8]
   1a6bc:	ldr	r1, [r1, #12]
   1a6c0:	add	r1, r0, r1
   1a6c4:	sub	r0, r1, #16
   1a6c8:	sub	r1, r1, r2, lsl #4
   1a6cc:	ldr	r2, [sp, #48]	; 0x30
   1a6d0:	str	r0, [r4, r6, lsl #2]
   1a6d4:	str	r1, [r2, r6, lsl #2]
   1a6d8:	mov	r2, r4
   1a6dc:	mov	r1, #0
   1a6e0:	cmp	r5, #2
   1a6e4:	bcc	1a98c <__assert_fail@plt+0x8654>
   1a6e8:	mov	r9, #1
   1a6ec:	mov	sl, r5
   1a6f0:	mov	r7, #1
   1a6f4:	b	1a704 <__assert_fail@plt+0x83cc>
   1a6f8:	ldr	r0, [r2, r6, lsl #2]
   1a6fc:	add	r1, sl, r7
   1a700:	lsr	r9, r1, #1
   1a704:	ldr	r1, [r8, r9, lsl #2]
   1a708:	ldr	r1, [r2, r1, lsl #2]
   1a70c:	bl	18080 <__assert_fail@plt+0x5d48>
   1a710:	cmp	r0, #0
   1a714:	blt	1a728 <__assert_fail@plt+0x83f0>
   1a718:	bne	1a73c <__assert_fail@plt+0x8404>
   1a71c:	ldr	r0, [r8, r9, lsl #2]
   1a720:	cmp	r6, r0
   1a724:	bcs	1a73c <__assert_fail@plt+0x8404>
   1a728:	mov	sl, r9
   1a72c:	mov	r2, r4
   1a730:	cmp	r7, sl
   1a734:	bcc	1a6f8 <__assert_fail@plt+0x83c0>
   1a738:	b	1a74c <__assert_fail@plt+0x8414>
   1a73c:	add	r7, r9, #1
   1a740:	mov	r2, r4
   1a744:	cmp	r7, sl
   1a748:	bcc	1a6f8 <__assert_fail@plt+0x83c0>
   1a74c:	subs	r0, r7, #1
   1a750:	mov	r1, #0
   1a754:	beq	1a98c <__assert_fail@plt+0x8654>
   1a758:	mov	r1, #0
   1a75c:	cmp	r0, #4
   1a760:	bcc	1a95c <__assert_fail@plt+0x8624>
   1a764:	bic	r1, r0, #3
   1a768:	mov	ip, r5
   1a76c:	mov	r3, r8
   1a770:	mov	r2, r1
   1a774:	add	r5, r3, #4
   1a778:	subs	r2, r2, #4
   1a77c:	vld1.32	{d16-d17}, [r5]
   1a780:	vst1.32	{d16-d17}, [r3]!
   1a784:	bne	1a774 <__assert_fail@plt+0x843c>
   1a788:	ldr	r2, [sp, #56]	; 0x38
   1a78c:	cmp	r0, r1
   1a790:	mov	r5, ip
   1a794:	bne	1a95c <__assert_fail@plt+0x8624>
   1a798:	mov	r1, r0
   1a79c:	str	r6, [r8, r1, lsl #2]
   1a7a0:	cmp	r5, #0
   1a7a4:	bne	1a53c <__assert_fail@plt+0x8204>
   1a7a8:	b	1a998 <__assert_fail@plt+0x8660>
   1a7ac:	nop	{0}
   1a7b0:	andeq	r0, r0, r0
   1a7b4:	andeq	r0, r0, r1
   1a7b8:	andeq	r0, r0, r2
   1a7bc:	andeq	r0, r0, r3
   1a7c0:	ldr	r7, [fp, #12]
   1a7c4:	cmp	r5, #2
   1a7c8:	bcc	1a7f4 <__assert_fail@plt+0x84bc>
   1a7cc:	ldr	r1, [sp, #24]
   1a7d0:	sub	r0, r5, #1
   1a7d4:	ldr	r2, [r1]
   1a7d8:	ldr	r3, [r8]
   1a7dc:	cmp	r2, r3
   1a7e0:	subhi	r2, r2, #1
   1a7e4:	strhi	r2, [r1]
   1a7e8:	subs	r0, r0, #1
   1a7ec:	add	r1, r1, #4
   1a7f0:	bne	1a7d4 <__assert_fail@plt+0x849c>
   1a7f4:	ldr	r0, [r8]
   1a7f8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1a7fc:	ldr	r1, [r6, r0, lsl #3]
   1a800:	ldr	r0, [r7, r0, lsl #2]
   1a804:	bl	17158 <__assert_fail@plt+0x4e20>
   1a808:	mov	sl, r5
   1a80c:	sub	r9, r5, #1
   1a810:	ldr	r0, [r8]
   1a814:	ldr	r5, [sp, #44]	; 0x2c
   1a818:	cmp	r0, r5
   1a81c:	bcs	1a834 <__assert_fail@plt+0x84fc>
   1a820:	ldr	r0, [r6, r0, lsl #3]
   1a824:	bl	1b05c <__assert_fail@plt+0x8d24>
   1a828:	ldr	r0, [r8]
   1a82c:	sub	r5, r5, #1
   1a830:	str	r5, [sp, #44]	; 0x2c
   1a834:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1a838:	rsb	r0, r0, r0, lsl #3
   1a83c:	ldr	r0, [r1, r0, lsl #2]
   1a840:	bl	1d88c <__assert_fail@plt+0xb554>
   1a844:	ldr	r6, [r8]
   1a848:	mvn	ip, #15
   1a84c:	cmp	r6, r9
   1a850:	bcs	1a8e0 <__assert_fail@plt+0x85a8>
   1a854:	ldr	r0, [sp, #40]	; 0x28
   1a858:	ldr	r1, [sp, #16]
   1a85c:	ldr	r2, [sp, #8]
   1a860:	ldr	r3, [sp, #4]
   1a864:	ldr	r5, [sp, #12]
   1a868:	rsb	r7, r6, r6, lsl #3
   1a86c:	sub	r4, sl, #1
   1a870:	add	r0, r0, r6, lsl #2
   1a874:	add	r1, r1, r6, lsl #3
   1a878:	add	r2, r2, r6, lsl #2
   1a87c:	add	r3, r3, r6, lsl #2
   1a880:	add	r5, r5, r7, lsl #2
   1a884:	sub	r6, r4, r6
   1a888:	ldr	r4, [r0]
   1a88c:	subs	r6, r6, #1
   1a890:	str	r4, [r0, #-4]
   1a894:	add	r0, r0, #4
   1a898:	ldm	r1, {r4, r7}
   1a89c:	stmdb	r1, {r4, r7}
   1a8a0:	mov	r7, r5
   1a8a4:	add	r4, r5, #12
   1a8a8:	add	r1, r1, #8
   1a8ac:	vld1.32	{d16-d17}, [r7], ip
   1a8b0:	vld1.32	{d18-d19}, [r4]
   1a8b4:	vst1.32	{d18-d19}, [r7]
   1a8b8:	sub	r7, r5, #28
   1a8bc:	add	r5, r5, #28
   1a8c0:	vst1.32	{d16-d17}, [r7]
   1a8c4:	ldr	r7, [r2]
   1a8c8:	str	r7, [r2, #-4]
   1a8cc:	ldr	r7, [r3]
   1a8d0:	add	r2, r2, #4
   1a8d4:	str	r7, [r3, #-4]
   1a8d8:	add	r3, r3, #4
   1a8dc:	bne	1a888 <__assert_fail@plt+0x8550>
   1a8e0:	ldr	r2, [sp, #56]	; 0x38
   1a8e4:	cmp	r9, #0
   1a8e8:	beq	1a998 <__assert_fail@plt+0x8660>
   1a8ec:	mov	r7, r2
   1a8f0:	mov	r0, #0
   1a8f4:	cmp	r9, #3
   1a8f8:	bls	1a924 <__assert_fail@plt+0x85ec>
   1a8fc:	bic	r0, r9, #3
   1a900:	mov	r2, r8
   1a904:	mov	r1, r0
   1a908:	add	r3, r2, #4
   1a90c:	subs	r1, r1, #4
   1a910:	vld1.32	{d16-d17}, [r3]
   1a914:	vst1.32	{d16-d17}, [r2]!
   1a918:	bne	1a908 <__assert_fail@plt+0x85d0>
   1a91c:	cmp	r9, r0
   1a920:	beq	1a948 <__assert_fail@plt+0x8610>
   1a924:	ldr	r1, [sp, #24]
   1a928:	sub	r2, sl, #1
   1a92c:	add	r1, r1, r0, lsl #2
   1a930:	sub	r0, r2, r0
   1a934:	ldr	r2, [r1]
   1a938:	subs	r0, r0, #1
   1a93c:	str	r2, [r1, #-4]
   1a940:	add	r1, r1, #4
   1a944:	bne	1a934 <__assert_fail@plt+0x85fc>
   1a948:	mov	r5, r9
   1a94c:	mov	r2, r7
   1a950:	cmp	r5, #0
   1a954:	bne	1a53c <__assert_fail@plt+0x8204>
   1a958:	b	1a998 <__assert_fail@plt+0x8660>
   1a95c:	mov	r4, r2
   1a960:	ldr	r2, [sp, #24]
   1a964:	add	r2, r2, r1, lsl #2
   1a968:	mvn	r1, r1
   1a96c:	add	r1, r1, r7
   1a970:	ldr	r3, [r2]
   1a974:	subs	r1, r1, #1
   1a978:	str	r3, [r2, #-4]
   1a97c:	add	r2, r2, #4
   1a980:	bne	1a970 <__assert_fail@plt+0x8638>
   1a984:	mov	r1, r0
   1a988:	mov	r2, r4
   1a98c:	str	r6, [r8, r1, lsl #2]
   1a990:	cmp	r5, #0
   1a994:	bne	1a53c <__assert_fail@plt+0x8204>
   1a998:	ldr	r0, [sp, #32]
   1a99c:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1a9a0:	cmp	r0, #0
   1a9a4:	movwne	r0, #39016	; 0x9868
   1a9a8:	movtne	r0, #3
   1a9ac:	ldrbne	r0, [r0, #7]
   1a9b0:	cmpne	r0, #0
   1a9b4:	beq	1a9d0 <__assert_fail@plt+0x8698>
   1a9b8:	ldr	r1, [sp, #36]	; 0x24
   1a9bc:	ldr	r2, [fp, #8]
   1a9c0:	sub	r0, fp, #44	; 0x2c
   1a9c4:	bl	19460 <__assert_fail@plt+0x7128>
   1a9c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a9cc:	bl	1d88c <__assert_fail@plt+0xb554>
   1a9d0:	ldr	r0, [sp, #36]	; 0x24
   1a9d4:	ldr	r1, [fp, #8]
   1a9d8:	bl	17158 <__assert_fail@plt+0x4e20>
   1a9dc:	ldr	r0, [fp, #12]
   1a9e0:	bl	1d88c <__assert_fail@plt+0xb554>
   1a9e4:	mov	r0, r4
   1a9e8:	bl	1d88c <__assert_fail@plt+0xb554>
   1a9ec:	mov	r0, r8
   1a9f0:	bl	1d88c <__assert_fail@plt+0xb554>
   1a9f4:	ldr	r0, [sp, #48]	; 0x30
   1a9f8:	bl	1d88c <__assert_fail@plt+0xb554>
   1a9fc:	ldr	r0, [sp, #56]	; 0x38
   1aa00:	bl	1d88c <__assert_fail@plt+0xb554>
   1aa04:	sub	sp, fp, #28
   1aa08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa10:	add	fp, sp, #28
   1aa14:	sub	sp, sp, #148	; 0x94
   1aa18:	movw	r7, #39016	; 0x9868
   1aa1c:	str	r1, [sp, #8]
   1aa20:	str	r0, [sp, #12]
   1aa24:	movt	r7, #3
   1aa28:	ldr	r0, [r7, #40]	; 0x28
   1aa2c:	ldr	r1, [r7, #56]	; 0x38
   1aa30:	ldr	r6, [r0, r1, lsl #2]
   1aa34:	mov	r0, r6
   1aa38:	bl	12140 <strlen@plt>
   1aa3c:	mov	r5, r0
   1aa40:	add	r0, r0, #24
   1aa44:	bic	r0, r0, #3
   1aa48:	bl	234d0 <__assert_fail@plt+0x11198>
   1aa4c:	add	sl, r0, #9
   1aa50:	mov	r4, r0
   1aa54:	mov	r1, r6
   1aa58:	mov	r2, r5
   1aa5c:	mov	r0, sl
   1aa60:	bl	11ec4 <memcpy@plt>
   1aa64:	movw	r0, #32528	; 0x7f10
   1aa68:	movw	r1, #22616	; 0x5858
   1aa6c:	movt	r0, #2
   1aa70:	movt	r1, #88	; 0x58
   1aa74:	vldr	d16, [r0]
   1aa78:	add	r0, sl, r5
   1aa7c:	str	r1, [r0, #8]
   1aa80:	vst1.8	{d16}, [r0]
   1aa84:	mov	r0, #0
   1aa88:	str	r0, [r4]
   1aa8c:	ldr	r1, [r7, #56]	; 0x38
   1aa90:	ldr	r0, [r7, #24]
   1aa94:	add	r1, r1, #1
   1aa98:	subs	r0, r1, r0
   1aa9c:	movne	r0, r1
   1aaa0:	movw	r1, #37600	; 0x92e0
   1aaa4:	str	r0, [r7, #56]	; 0x38
   1aaa8:	add	r0, sp, #16
   1aaac:	movt	r1, #3
   1aab0:	add	r9, r0, #4
   1aab4:	mov	r0, #0
   1aab8:	mov	r2, r9
   1aabc:	bl	12050 <pthread_sigmask@plt>
   1aac0:	clz	r0, r0
   1aac4:	mov	r1, #524288	; 0x80000
   1aac8:	lsr	r0, r0, #5
   1aacc:	strb	r0, [sp, #16]
   1aad0:	mov	r0, sl
   1aad4:	bl	228e8 <__assert_fail@plt+0x105b0>
   1aad8:	cmp	r0, #0
   1aadc:	mov	r7, r0
   1aae0:	movwge	r0, #37344	; 0x91e0
   1aae4:	movtge	r0, #3
   1aae8:	ldrge	r1, [r0]
   1aaec:	strge	r4, [r1]
   1aaf0:	strge	r4, [r0]
   1aaf4:	bl	12164 <__errno_location@plt>
   1aaf8:	mov	r5, r0
   1aafc:	ldr	r8, [r0]
   1ab00:	ldrb	r0, [sp, #16]
   1ab04:	cmp	r0, #0
   1ab08:	beq	1ab1c <__assert_fail@plt+0x87e4>
   1ab0c:	mov	r0, #2
   1ab10:	mov	r1, r9
   1ab14:	mov	r2, #0
   1ab18:	bl	12050 <pthread_sigmask@plt>
   1ab1c:	cmn	r7, #1
   1ab20:	str	r8, [r5]
   1ab24:	ble	1abc8 <__assert_fail@plt+0x8890>
   1ab28:	movw	r6, #39016	; 0x9868
   1ab2c:	mov	r0, #0
   1ab30:	movt	r6, #3
   1ab34:	strb	r0, [r4, #8]
   1ab38:	ldr	r0, [r6, #16]
   1ab3c:	cmp	r0, #0
   1ab40:	beq	1abfc <__assert_fail@plt+0x88c4>
   1ab44:	add	r0, sp, #16
   1ab48:	mov	r1, #4
   1ab4c:	bl	1acbc <__assert_fail@plt+0x8984>
   1ab50:	cmp	r0, #1
   1ab54:	str	r0, [r4, #4]
   1ab58:	blt	1abf4 <__assert_fail@plt+0x88bc>
   1ab5c:	mov	r0, r7
   1ab60:	bl	12320 <close@plt>
   1ab64:	ldr	r0, [sp, #16]
   1ab68:	bl	12320 <close@plt>
   1ab6c:	ldr	r0, [r6, #48]	; 0x30
   1ab70:	ldr	r7, [sp, #20]
   1ab74:	cmp	r0, #0
   1ab78:	bne	1abac <__assert_fail@plt+0x8874>
   1ab7c:	movw	r2, #45108	; 0xb034
   1ab80:	movw	r3, #45124	; 0xb044
   1ab84:	mov	r0, #0
   1ab88:	mov	r1, #0
   1ab8c:	str	r0, [sp]
   1ab90:	movt	r2, #1
   1ab94:	movt	r3, #1
   1ab98:	mov	r0, #47	; 0x2f
   1ab9c:	bl	1de60 <__assert_fail@plt+0xbb28>
   1aba0:	cmp	r0, #0
   1aba4:	str	r0, [r6, #48]	; 0x30
   1aba8:	beq	1abc4 <__assert_fail@plt+0x888c>
   1abac:	mov	r1, #1
   1abb0:	strb	r1, [r4, #8]
   1abb4:	mov	r1, r4
   1abb8:	bl	1ea98 <__assert_fail@plt+0xc760>
   1abbc:	cmp	r0, #0
   1abc0:	bne	1abfc <__assert_fail@plt+0x88c4>
   1abc4:	bl	23a30 <__assert_fail@plt+0x116f8>
   1abc8:	cmp	r8, #24
   1abcc:	bne	1ac28 <__assert_fail@plt+0x88f0>
   1abd0:	ldr	r0, [sp, #8]
   1abd4:	cmp	r0, #0
   1abd8:	beq	1ac28 <__assert_fail@plt+0x88f0>
   1abdc:	mov	r0, r4
   1abe0:	bl	1d88c <__assert_fail@plt+0xb554>
   1abe4:	mov	r4, #0
   1abe8:	mov	r0, r4
   1abec:	sub	sp, fp, #28
   1abf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abf4:	cmp	r0, #0
   1abf8:	beq	1ac7c <__assert_fail@plt+0x8944>
   1abfc:	movw	r1, #31331	; 0x7a63
   1ac00:	mov	r0, r7
   1ac04:	movt	r1, #2
   1ac08:	bl	11df8 <fdopen@plt>
   1ac0c:	ldr	r1, [sp, #12]
   1ac10:	cmp	r0, #0
   1ac14:	str	r0, [r1]
   1ac18:	beq	1ac60 <__assert_fail@plt+0x8928>
   1ac1c:	mov	r0, r4
   1ac20:	sub	sp, fp, #28
   1ac24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac28:	movw	r1, #31562	; 0x7b4a
   1ac2c:	mov	r0, #0
   1ac30:	mov	r2, #5
   1ac34:	movt	r1, #2
   1ac38:	bl	11f54 <dcgettext@plt>
   1ac3c:	mov	r4, r0
   1ac40:	mov	r0, #4
   1ac44:	mov	r1, r6
   1ac48:	bl	21760 <__assert_fail@plt+0xf428>
   1ac4c:	mov	r3, r0
   1ac50:	mov	r0, #2
   1ac54:	mov	r1, r8
   1ac58:	mov	r2, r4
   1ac5c:	bl	12080 <error@plt>
   1ac60:	movw	r1, #31531	; 0x7b2b
   1ac64:	mov	r0, #0
   1ac68:	mov	r2, #5
   1ac6c:	movt	r1, #2
   1ac70:	bl	11f54 <dcgettext@plt>
   1ac74:	mov	r1, sl
   1ac78:	bl	17948 <__assert_fail@plt+0x5610>
   1ac7c:	ldr	r0, [sp, #20]
   1ac80:	bl	12320 <close@plt>
   1ac84:	mov	r0, r7
   1ac88:	mov	r1, #1
   1ac8c:	bl	19e6c <__assert_fail@plt+0x7b34>
   1ac90:	ldr	r0, [sp, #16]
   1ac94:	mov	r1, #0
   1ac98:	bl	19e6c <__assert_fail@plt+0x7b34>
   1ac9c:	ldr	r0, [r6, #16]
   1aca0:	mov	r2, #0
   1aca4:	mov	r1, r0
   1aca8:	bl	11ed0 <execlp@plt>
   1acac:	ldr	r0, [r5]
   1acb0:	movw	r1, #31497	; 0x7b09
   1acb4:	movt	r1, #2
   1acb8:	bl	1ae84 <__assert_fail@plt+0x8b4c>
   1acbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acc0:	add	fp, sp, #28
   1acc4:	sub	sp, sp, #4
   1acc8:	vpush	{d8}
   1accc:	sub	sp, sp, #136	; 0x88
   1acd0:	mov	r5, r1
   1acd4:	mov	r1, #524288	; 0x80000
   1acd8:	mov	r4, r0
   1acdc:	bl	1fae8 <__assert_fail@plt+0xd7b0>
   1ace0:	cmp	r0, #0
   1ace4:	blt	1ae2c <__assert_fail@plt+0x8af4>
   1ace8:	movw	r1, #37348	; 0x91e4
   1acec:	movw	r7, #39016	; 0x9868
   1acf0:	movt	r1, #3
   1acf4:	movt	r7, #3
   1acf8:	ldr	r1, [r1, #8]
   1acfc:	ldr	r0, [r7, #52]	; 0x34
   1ad00:	add	r1, r1, #1
   1ad04:	cmp	r1, r0
   1ad08:	bcs	1ad3c <__assert_fail@plt+0x8a04>
   1ad0c:	mvn	r0, #0
   1ad10:	bl	1af10 <__assert_fail@plt+0x8bd8>
   1ad14:	ldr	r0, [r7, #52]	; 0x34
   1ad18:	cmp	r0, #1
   1ad1c:	blt	1ad3c <__assert_fail@plt+0x8a04>
   1ad20:	mov	r0, #0
   1ad24:	bl	1af10 <__assert_fail@plt+0x8bd8>
   1ad28:	cmp	r0, #0
   1ad2c:	beq	1ad3c <__assert_fail@plt+0x8a04>
   1ad30:	ldr	r0, [r7, #52]	; 0x34
   1ad34:	cmp	r0, #0
   1ad38:	bgt	1ad20 <__assert_fail@plt+0x89e8>
   1ad3c:	cmp	r5, #0
   1ad40:	beq	1ae34 <__assert_fail@plt+0x8afc>
   1ad44:	add	r0, sp, #4
   1ad48:	vmov.f64	d8, #80	; 0x3e800000  0.250
   1ad4c:	str	r4, [sp]
   1ad50:	add	sl, r0, #4
   1ad54:	movw	r1, #37600	; 0x92e0
   1ad58:	mov	r0, #0
   1ad5c:	mov	r2, sl
   1ad60:	movt	r1, #3
   1ad64:	bl	12050 <pthread_sigmask@plt>
   1ad68:	ldr	r9, [r7, #32]
   1ad6c:	clz	r0, r0
   1ad70:	mov	r1, #0
   1ad74:	lsr	r0, r0, #5
   1ad78:	str	r1, [r7, #32]
   1ad7c:	strb	r0, [sp, #4]
   1ad80:	bl	12230 <fork@plt>
   1ad84:	mov	r6, r0
   1ad88:	bl	12164 <__errno_location@plt>
   1ad8c:	cmp	r6, #0
   1ad90:	ldr	r8, [r0]
   1ad94:	mov	r4, r0
   1ad98:	strne	r9, [r7, #32]
   1ad9c:	ldrb	r0, [sp, #4]
   1ada0:	cmp	r0, #0
   1ada4:	beq	1adb8 <__assert_fail@plt+0x8a80>
   1ada8:	mov	r0, #2
   1adac:	mov	r1, sl
   1adb0:	mov	r2, #0
   1adb4:	bl	12050 <pthread_sigmask@plt>
   1adb8:	cmn	r6, #1
   1adbc:	str	r8, [r4]
   1adc0:	bgt	1ae0c <__assert_fail@plt+0x8ad4>
   1adc4:	cmp	r8, #11
   1adc8:	bne	1ae0c <__assert_fail@plt+0x8ad4>
   1adcc:	vmov.f64	d0, d8
   1add0:	sub	r5, r5, #1
   1add4:	bl	23c58 <__assert_fail@plt+0x11920>
   1add8:	ldr	r0, [r7, #52]	; 0x34
   1addc:	cmp	r0, #1
   1ade0:	blt	1ae00 <__assert_fail@plt+0x8ac8>
   1ade4:	mov	r0, #0
   1ade8:	bl	1af10 <__assert_fail@plt+0x8bd8>
   1adec:	cmp	r0, #0
   1adf0:	beq	1ae00 <__assert_fail@plt+0x8ac8>
   1adf4:	ldr	r0, [r7, #52]	; 0x34
   1adf8:	cmp	r0, #0
   1adfc:	bgt	1ade4 <__assert_fail@plt+0x8aac>
   1ae00:	vadd.f64	d8, d8, d8
   1ae04:	cmp	r5, #0
   1ae08:	bne	1ad54 <__assert_fail@plt+0x8a1c>
   1ae0c:	cmn	r6, #1
   1ae10:	ble	1ae4c <__assert_fail@plt+0x8b14>
   1ae14:	cmp	r6, #0
   1ae18:	beq	1ae34 <__assert_fail@plt+0x8afc>
   1ae1c:	ldr	r0, [r7, #52]	; 0x34
   1ae20:	add	r0, r0, #1
   1ae24:	str	r0, [r7, #52]	; 0x34
   1ae28:	b	1ae70 <__assert_fail@plt+0x8b38>
   1ae2c:	mvn	r6, #0
   1ae30:	b	1ae70 <__assert_fail@plt+0x8b38>
   1ae34:	mov	r0, #0
   1ae38:	mov	r6, #0
   1ae3c:	bl	12320 <close@plt>
   1ae40:	mov	r0, #1
   1ae44:	bl	12320 <close@plt>
   1ae48:	b	1ae70 <__assert_fail@plt+0x8b38>
   1ae4c:	bl	12164 <__errno_location@plt>
   1ae50:	ldr	r7, [sp]
   1ae54:	mov	r4, r0
   1ae58:	ldr	r5, [r0]
   1ae5c:	ldr	r0, [r7]
   1ae60:	bl	12320 <close@plt>
   1ae64:	ldr	r0, [r7, #4]
   1ae68:	bl	12320 <close@plt>
   1ae6c:	str	r5, [r4]
   1ae70:	mov	r0, r6
   1ae74:	sub	sp, fp, #40	; 0x28
   1ae78:	vpop	{d8}
   1ae7c:	add	sp, sp, #4
   1ae80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae84:	push	{fp, lr}
   1ae88:	mov	fp, sp
   1ae8c:	sub	sp, sp, #16
   1ae90:	mov	r4, r0
   1ae94:	mov	r0, r1
   1ae98:	mov	r5, r1
   1ae9c:	bl	12140 <strlen@plt>
   1aea0:	mov	r2, r0
   1aea4:	mov	r0, #2
   1aea8:	mov	r1, r5
   1aeac:	bl	121ac <write@plt>
   1aeb0:	cmp	r4, #0
   1aeb4:	beq	1aef4 <__assert_fail@plt+0x8bbc>
   1aeb8:	add	r1, sp, #4
   1aebc:	mov	r0, r4
   1aec0:	bl	1ef94 <__assert_fail@plt+0xcc5c>
   1aec4:	movw	r1, #31461	; 0x7ae5
   1aec8:	mov	r4, r0
   1aecc:	mov	r0, #2
   1aed0:	mov	r2, #8
   1aed4:	movt	r1, #2
   1aed8:	bl	121ac <write@plt>
   1aedc:	mov	r0, r4
   1aee0:	bl	12140 <strlen@plt>
   1aee4:	mov	r2, r0
   1aee8:	mov	r0, #2
   1aeec:	mov	r1, r4
   1aef0:	bl	121ac <write@plt>
   1aef4:	movw	r1, #24691	; 0x6073
   1aef8:	mov	r0, #2
   1aefc:	mov	r2, #1
   1af00:	movt	r1, #2
   1af04:	bl	121ac <write@plt>
   1af08:	mov	r0, #2
   1af0c:	bl	11eb8 <_exit@plt>
   1af10:	push	{r4, r5, fp, lr}
   1af14:	add	fp, sp, #8
   1af18:	sub	sp, sp, #16
   1af1c:	mov	r5, r0
   1af20:	cmp	r0, #0
   1af24:	clz	r1, r5
   1af28:	mvneq	r0, #0
   1af2c:	lsr	r2, r1, #5
   1af30:	mov	r1, sp
   1af34:	bl	12038 <waitpid@plt>
   1af38:	cmn	r0, #1
   1af3c:	ble	1afac <__assert_fail@plt+0x8c74>
   1af40:	mov	r4, r0
   1af44:	cmp	r0, #0
   1af48:	beq	1afa0 <__assert_fail@plt+0x8c68>
   1af4c:	cmp	r5, #0
   1af50:	bgt	1af7c <__assert_fail@plt+0x8c44>
   1af54:	movw	r0, #39016	; 0x9868
   1af58:	add	r1, sp, #4
   1af5c:	str	r4, [sp, #8]
   1af60:	movt	r0, #3
   1af64:	ldr	r0, [r0, #48]	; 0x30
   1af68:	bl	1eae0 <__assert_fail@plt+0xc7a8>
   1af6c:	cmp	r0, #0
   1af70:	beq	1afa0 <__assert_fail@plt+0x8c68>
   1af74:	mov	r1, #2
   1af78:	strb	r1, [r0, #8]
   1af7c:	ldrh	r0, [sp]
   1af80:	movw	r1, #65407	; 0xff7f
   1af84:	tst	r0, r1
   1af88:	bne	1aff4 <__assert_fail@plt+0x8cbc>
   1af8c:	movw	r0, #39016	; 0x9868
   1af90:	movt	r0, #3
   1af94:	ldr	r1, [r0, #52]	; 0x34
   1af98:	sub	r1, r1, #1
   1af9c:	str	r1, [r0, #52]	; 0x34
   1afa0:	mov	r0, r4
   1afa4:	sub	sp, fp, #8
   1afa8:	pop	{r4, r5, fp, pc}
   1afac:	bl	12164 <__errno_location@plt>
   1afb0:	ldr	r4, [r0]
   1afb4:	movw	r1, #31411	; 0x7ab3
   1afb8:	mov	r0, #0
   1afbc:	mov	r2, #5
   1afc0:	movt	r1, #2
   1afc4:	bl	11f54 <dcgettext@plt>
   1afc8:	mov	r5, r0
   1afcc:	movw	r0, #39016	; 0x9868
   1afd0:	movt	r0, #3
   1afd4:	ldr	r1, [r0, #16]
   1afd8:	mov	r0, #4
   1afdc:	bl	21760 <__assert_fail@plt+0xf428>
   1afe0:	mov	r3, r0
   1afe4:	mov	r0, #2
   1afe8:	mov	r1, r4
   1afec:	mov	r2, r5
   1aff0:	bl	12080 <error@plt>
   1aff4:	movw	r1, #31431	; 0x7ac7
   1aff8:	mov	r0, #0
   1affc:	mov	r2, #5
   1b000:	movt	r1, #2
   1b004:	bl	11f54 <dcgettext@plt>
   1b008:	mov	r4, r0
   1b00c:	movw	r0, #39016	; 0x9868
   1b010:	movt	r0, #3
   1b014:	ldr	r1, [r0, #16]
   1b018:	mov	r0, #4
   1b01c:	bl	21760 <__assert_fail@plt+0xf428>
   1b020:	mov	r3, r0
   1b024:	mov	r0, #2
   1b028:	mov	r1, #0
   1b02c:	mov	r2, r4
   1b030:	bl	12080 <error@plt>
   1b034:	ldr	r0, [r0, #4]
   1b038:	udiv	r2, r0, r1
   1b03c:	mls	r0, r2, r1, r0
   1b040:	bx	lr
   1b044:	ldr	r1, [r1, #4]
   1b048:	ldr	r0, [r0, #4]
   1b04c:	sub	r0, r0, r1
   1b050:	clz	r0, r0
   1b054:	lsr	r0, r0, #5
   1b058:	bx	lr
   1b05c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b060:	add	fp, sp, #28
   1b064:	sub	sp, sp, #132	; 0x84
   1b068:	mov	r5, r0
   1b06c:	movw	r0, #39016	; 0x9868
   1b070:	movt	r0, #3
   1b074:	add	r4, r0, #32
   1b078:	mov	r6, r4
   1b07c:	ldr	r4, [r4]
   1b080:	add	r1, r4, #9
   1b084:	cmp	r1, r5
   1b088:	bne	1b078 <__assert_fail@plt+0x8d40>
   1b08c:	ldrb	r1, [r4, #8]
   1b090:	cmp	r1, #1
   1b094:	bne	1b0c4 <__assert_fail@plt+0x8d8c>
   1b098:	ldr	r7, [r4, #4]
   1b09c:	ldr	r0, [r0, #48]	; 0x30
   1b0a0:	mov	r1, sp
   1b0a4:	str	r7, [sp, #4]
   1b0a8:	bl	1eae0 <__assert_fail@plt+0xc7a8>
   1b0ac:	cmp	r0, #0
   1b0b0:	beq	1b0c4 <__assert_fail@plt+0x8d8c>
   1b0b4:	mov	r1, #2
   1b0b8:	strb	r1, [r0, #8]
   1b0bc:	mov	r0, r7
   1b0c0:	bl	1af10 <__assert_fail@plt+0x8bd8>
   1b0c4:	mov	r0, sp
   1b0c8:	ldr	sl, [r4]
   1b0cc:	movw	r1, #37600	; 0x92e0
   1b0d0:	add	r7, r0, #4
   1b0d4:	movt	r1, #3
   1b0d8:	mov	r0, #0
   1b0dc:	mov	r2, r7
   1b0e0:	bl	12050 <pthread_sigmask@plt>
   1b0e4:	clz	r0, r0
   1b0e8:	lsr	r0, r0, #5
   1b0ec:	strb	r0, [sp]
   1b0f0:	mov	r0, r5
   1b0f4:	bl	11f78 <unlink@plt>
   1b0f8:	mov	r9, r0
   1b0fc:	bl	12164 <__errno_location@plt>
   1b100:	ldr	r8, [r0]
   1b104:	str	sl, [r6]
   1b108:	ldrb	r0, [sp]
   1b10c:	cmp	r0, #0
   1b110:	beq	1b124 <__assert_fail@plt+0x8dec>
   1b114:	mov	r0, #2
   1b118:	mov	r1, r7
   1b11c:	mov	r2, #0
   1b120:	bl	12050 <pthread_sigmask@plt>
   1b124:	cmp	r9, #0
   1b128:	beq	1b168 <__assert_fail@plt+0x8e30>
   1b12c:	movw	r1, #31470	; 0x7aee
   1b130:	mov	r0, #0
   1b134:	mov	r2, #5
   1b138:	movt	r1, #2
   1b13c:	bl	11f54 <dcgettext@plt>
   1b140:	mov	r7, r0
   1b144:	mov	r0, #0
   1b148:	mov	r1, #3
   1b14c:	mov	r2, r5
   1b150:	bl	219dc <__assert_fail@plt+0xf6a4>
   1b154:	mov	r3, r0
   1b158:	mov	r0, #0
   1b15c:	mov	r1, r8
   1b160:	mov	r2, r7
   1b164:	bl	12080 <error@plt>
   1b168:	cmp	sl, #0
   1b16c:	movweq	r0, #37344	; 0x91e0
   1b170:	movteq	r0, #3
   1b174:	streq	r6, [r0]
   1b178:	mov	r0, r4
   1b17c:	bl	1d88c <__assert_fail@plt+0xb554>
   1b180:	sub	sp, fp, #28
   1b184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b18c:	add	fp, sp, #28
   1b190:	sub	sp, sp, #92	; 0x5c
   1b194:	mov	r5, r1
   1b198:	mov	r8, r0
   1b19c:	lsr	r0, r1, #1
   1b1a0:	ldr	sl, [fp, #8]
   1b1a4:	ldr	r1, [fp, #12]
   1b1a8:	ldr	r6, [r3, #20]
   1b1ac:	ldr	r7, [r3, #24]
   1b1b0:	mov	r4, r3
   1b1b4:	str	r2, [sp, #24]
   1b1b8:	str	r0, [sp, #64]	; 0x40
   1b1bc:	str	r8, [sp, #60]	; 0x3c
   1b1c0:	mov	r0, r2
   1b1c4:	str	r2, [sp, #68]	; 0x44
   1b1c8:	cmp	r5, #2
   1b1cc:	ldr	r0, [r3, #32]
   1b1d0:	str	sl, [sp, #76]	; 0x4c
   1b1d4:	str	r1, [sp, #80]	; 0x50
   1b1d8:	ldr	r1, [fp, #16]
   1b1dc:	str	r1, [sp, #84]	; 0x54
   1b1e0:	str	r0, [sp, #72]	; 0x48
   1b1e4:	addcs	r0, r7, r6
   1b1e8:	cmpcs	r0, #131072	; 0x20000
   1b1ec:	bcs	1bac0 <__assert_fail@plt+0x9788>
   1b1f0:	ldr	r0, [sp, #24]
   1b1f4:	cmp	r7, #2
   1b1f8:	sub	r5, r8, r0, lsl #4
   1b1fc:	bcc	1b21c <__assert_fail@plt+0x8ee4>
   1b200:	mvn	r1, #15
   1b204:	sub	r0, r8, r6, lsl #4
   1b208:	mov	r3, #0
   1b20c:	and	r1, r1, r6, lsl #3
   1b210:	sub	r2, r5, r1
   1b214:	mov	r1, r7
   1b218:	bl	1bc98 <__assert_fail@plt+0x9960>
   1b21c:	cmp	r6, #2
   1b220:	bcc	1b238 <__assert_fail@plt+0x8f00>
   1b224:	mov	r0, r8
   1b228:	mov	r1, r6
   1b22c:	mov	r2, r5
   1b230:	mov	r3, #0
   1b234:	bl	1bc98 <__assert_fail@plt+0x9960>
   1b238:	sub	r0, r8, r6, lsl #4
   1b23c:	add	r6, sl, #4
   1b240:	str	r8, [r4]
   1b244:	str	r0, [r4, #4]
   1b248:	sub	r1, r0, r7, lsl #4
   1b24c:	str	r0, [r4, #8]
   1b250:	mov	r0, r6
   1b254:	str	r1, [r4, #12]
   1b258:	bl	11e94 <pthread_mutex_lock@plt>
   1b25c:	mov	r5, sl
   1b260:	mov	r1, r4
   1b264:	ldr	r0, [r5], #32
   1b268:	bl	1ee18 <__assert_fail@plt+0xcae0>
   1b26c:	mov	r0, #1
   1b270:	strb	r0, [r4, #44]	; 0x2c
   1b274:	mov	r0, r5
   1b278:	mov	r4, r6
   1b27c:	bl	12308 <pthread_cond_signal@plt>
   1b280:	mov	r0, r6
   1b284:	bl	11dec <pthread_mutex_unlock@plt>
   1b288:	str	r6, [sp, #20]
   1b28c:	str	r5, [sp, #16]
   1b290:	b	1b29c <__assert_fail@plt+0x8f64>
   1b294:	ldr	r0, [sp, #36]	; 0x24
   1b298:	bl	11dec <pthread_mutex_unlock@plt>
   1b29c:	mov	r0, r4
   1b2a0:	bl	11e94 <pthread_mutex_lock@plt>
   1b2a4:	ldr	r0, [sl]
   1b2a8:	bl	1eec8 <__assert_fail@plt+0xcb90>
   1b2ac:	mov	r6, r0
   1b2b0:	cmp	r0, #0
   1b2b4:	bne	1b2d8 <__assert_fail@plt+0x8fa0>
   1b2b8:	mov	r0, r5
   1b2bc:	mov	r1, r4
   1b2c0:	bl	122a8 <pthread_cond_wait@plt>
   1b2c4:	ldr	r0, [sl]
   1b2c8:	bl	1eec8 <__assert_fail@plt+0xcb90>
   1b2cc:	cmp	r0, #0
   1b2d0:	beq	1b2b8 <__assert_fail@plt+0x8f80>
   1b2d4:	mov	r6, r0
   1b2d8:	mov	r0, r4
   1b2dc:	bl	11dec <pthread_mutex_unlock@plt>
   1b2e0:	add	r0, r6, #48	; 0x30
   1b2e4:	str	r0, [sp, #36]	; 0x24
   1b2e8:	bl	11e94 <pthread_mutex_lock@plt>
   1b2ec:	mov	r0, #0
   1b2f0:	strb	r0, [r6, #44]	; 0x2c
   1b2f4:	ldr	r1, [r6, #40]	; 0x28
   1b2f8:	cmp	r1, #0
   1b2fc:	beq	1ba84 <__assert_fail@plt+0x974c>
   1b300:	ldr	r2, [sp, #24]
   1b304:	mov	r0, #2
   1b308:	mov	r3, #1
   1b30c:	ldr	r7, [r6]
   1b310:	cmp	r1, #1
   1b314:	add	r0, r0, r1, lsl #1
   1b318:	add	r8, r3, r2, lsr r0
   1b31c:	ldr	r3, [r6, #4]
   1b320:	str	r3, [sp, #40]	; 0x28
   1b324:	bne	1b470 <__assert_fail@plt+0x9138>
   1b328:	ldr	r9, [r6, #8]
   1b32c:	str	r7, [sp, #28]
   1b330:	cmp	r7, r9
   1b334:	beq	1b560 <__assert_fail@plt+0x9228>
   1b338:	ldr	r0, [r6, #12]
   1b33c:	str	r7, [sp, #48]	; 0x30
   1b340:	str	r7, [sp, #32]
   1b344:	mov	sl, r7
   1b348:	mov	r7, r3
   1b34c:	str	r3, [sp, #56]	; 0x38
   1b350:	str	r3, [sp, #44]	; 0x2c
   1b354:	str	r0, [sp, #52]	; 0x34
   1b358:	mov	r0, r3
   1b35c:	ldr	r0, [sp, #52]	; 0x34
   1b360:	cmp	r7, r0
   1b364:	beq	1b6a0 <__assert_fail@plt+0x9368>
   1b368:	cmp	r8, #0
   1b36c:	beq	1b6a8 <__assert_fail@plt+0x9370>
   1b370:	sub	r4, sl, #16
   1b374:	sub	r5, r7, #16
   1b378:	mov	r0, r4
   1b37c:	mov	r1, r5
   1b380:	bl	18080 <__assert_fail@plt+0x5d48>
   1b384:	cmp	r0, #0
   1b388:	ble	1b3fc <__assert_fail@plt+0x90c4>
   1b38c:	movw	r4, #39016	; 0x9868
   1b390:	str	r5, [r6, #4]
   1b394:	movt	r4, #3
   1b398:	ldrb	r0, [r4, #7]
   1b39c:	cmp	r0, #1
   1b3a0:	bne	1b3d0 <__assert_fail@plt+0x9098>
   1b3a4:	ldr	r0, [r4, #64]	; 0x40
   1b3a8:	cmp	r0, #0
   1b3ac:	beq	1b3c4 <__assert_fail@plt+0x908c>
   1b3b0:	add	r1, r4, #64	; 0x40
   1b3b4:	mov	r0, r5
   1b3b8:	bl	18080 <__assert_fail@plt+0x5d48>
   1b3bc:	cmp	r0, #0
   1b3c0:	beq	1b3e0 <__assert_fail@plt+0x90a8>
   1b3c4:	vld1.32	{d16-d17}, [r5]
   1b3c8:	add	r0, r4, #64	; 0x40
   1b3cc:	vst1.64	{d16-d17}, [r0]
   1b3d0:	ldr	r1, [fp, #12]
   1b3d4:	ldr	r2, [fp, #16]
   1b3d8:	mov	r0, r5
   1b3dc:	bl	19460 <__assert_fail@plt+0x7128>
   1b3e0:	mov	r7, r5
   1b3e4:	str	r5, [sp, #56]	; 0x38
   1b3e8:	str	r5, [sp, #44]	; 0x2c
   1b3ec:	sub	r8, r8, #1
   1b3f0:	cmp	sl, r9
   1b3f4:	bne	1b35c <__assert_fail@plt+0x9024>
   1b3f8:	b	1b468 <__assert_fail@plt+0x9130>
   1b3fc:	movw	r5, #39016	; 0x9868
   1b400:	str	r4, [r6]
   1b404:	movt	r5, #3
   1b408:	ldrb	r0, [r5, #7]
   1b40c:	cmp	r0, #1
   1b410:	bne	1b440 <__assert_fail@plt+0x9108>
   1b414:	ldr	r0, [r5, #64]	; 0x40
   1b418:	cmp	r0, #0
   1b41c:	beq	1b434 <__assert_fail@plt+0x90fc>
   1b420:	add	r1, r5, #64	; 0x40
   1b424:	mov	r0, r4
   1b428:	bl	18080 <__assert_fail@plt+0x5d48>
   1b42c:	cmp	r0, #0
   1b430:	beq	1b450 <__assert_fail@plt+0x9118>
   1b434:	vld1.32	{d16-d17}, [r4]
   1b438:	add	r0, r5, #64	; 0x40
   1b43c:	vst1.64	{d16-d17}, [r0]
   1b440:	ldr	r1, [fp, #12]
   1b444:	ldr	r2, [fp, #16]
   1b448:	mov	r0, r4
   1b44c:	bl	19460 <__assert_fail@plt+0x7128>
   1b450:	str	r4, [sp, #48]	; 0x30
   1b454:	str	r4, [sp, #32]
   1b458:	mov	sl, r4
   1b45c:	sub	r8, r8, #1
   1b460:	cmp	sl, r9
   1b464:	bne	1b35c <__assert_fail@plt+0x9024>
   1b468:	mov	sl, r9
   1b46c:	b	1b6ac <__assert_fail@plt+0x9374>
   1b470:	ldr	r1, [r6, #16]
   1b474:	ldr	r2, [r6, #8]
   1b478:	ldr	r9, [r1]
   1b47c:	cmp	r7, r2
   1b480:	str	r1, [sp, #32]
   1b484:	str	r2, [sp, #52]	; 0x34
   1b488:	beq	1b660 <__assert_fail@plt+0x9328>
   1b48c:	ldr	r1, [r6, #12]
   1b490:	cmp	r3, r1
   1b494:	str	r1, [sp, #44]	; 0x2c
   1b498:	beq	1b68c <__assert_fail@plt+0x9354>
   1b49c:	cmp	r8, #0
   1b4a0:	beq	1b778 <__assert_fail@plt+0x9440>
   1b4a4:	ldr	r1, [sp, #24]
   1b4a8:	mov	r2, r7
   1b4ac:	mov	ip, r3
   1b4b0:	str	r3, [sp, #56]	; 0x38
   1b4b4:	mov	sl, r2
   1b4b8:	str	r2, [sp, #28]
   1b4bc:	str	r2, [sp, #48]	; 0x30
   1b4c0:	lsr	r1, r1, r0
   1b4c4:	sub	r0, r9, #16
   1b4c8:	rsb	r7, r1, #0
   1b4cc:	sub	r5, ip, #16
   1b4d0:	sub	r4, sl, #16
   1b4d4:	mov	r9, r0
   1b4d8:	mov	r8, ip
   1b4dc:	mov	r0, r4
   1b4e0:	mov	r1, r5
   1b4e4:	bl	18080 <__assert_fail@plt+0x5d48>
   1b4e8:	cmp	r0, #0
   1b4ec:	ble	1b530 <__assert_fail@plt+0x91f8>
   1b4f0:	str	r5, [r6, #4]
   1b4f4:	mov	ip, r5
   1b4f8:	str	r5, [sp, #56]	; 0x38
   1b4fc:	vld1.32	{d16-d17}, [r5]
   1b500:	vst1.32	{d16-d17}, [r9]
   1b504:	ldr	r0, [sp, #52]	; 0x34
   1b508:	cmp	sl, r0
   1b50c:	beq	1b554 <__assert_fail@plt+0x921c>
   1b510:	ldr	r0, [sp, #44]	; 0x2c
   1b514:	cmp	ip, r0
   1b518:	beq	1b7b0 <__assert_fail@plt+0x9478>
   1b51c:	add	r7, r7, #1
   1b520:	sub	r0, r9, #16
   1b524:	cmp	r7, #1
   1b528:	bne	1b4cc <__assert_fail@plt+0x9194>
   1b52c:	b	1b7c0 <__assert_fail@plt+0x9488>
   1b530:	str	r4, [r6]
   1b534:	str	r4, [sp, #48]	; 0x30
   1b538:	mov	sl, r4
   1b53c:	mov	ip, r8
   1b540:	vld1.32	{d16-d17}, [r4]
   1b544:	vst1.32	{d16-d17}, [r9]
   1b548:	ldr	r0, [sp, #52]	; 0x34
   1b54c:	cmp	sl, r0
   1b550:	bne	1b510 <__assert_fail@plt+0x91d8>
   1b554:	ldr	r5, [sp, #56]	; 0x38
   1b558:	ldr	sl, [sp, #52]	; 0x34
   1b55c:	b	1b7b8 <__assert_fail@plt+0x9480>
   1b560:	mov	r9, r7
   1b564:	str	r3, [sp, #56]	; 0x38
   1b568:	str	r7, [sp, #48]	; 0x30
   1b56c:	mov	sl, r7
   1b570:	mov	r7, r3
   1b574:	mov	r0, r3
   1b578:	str	r9, [sp, #32]
   1b57c:	ldr	r2, [r6, #24]
   1b580:	sub	r0, r3, r0
   1b584:	cmp	r2, r0, asr #4
   1b588:	beq	1b6c4 <__assert_fail@plt+0x938c>
   1b58c:	ldr	r0, [sp, #28]
   1b590:	ldr	r1, [sp, #32]
   1b594:	ldr	r5, [sp, #16]
   1b598:	str	r2, [sp, #44]	; 0x2c
   1b59c:	sub	r0, r0, r1
   1b5a0:	ldr	r1, [r6, #20]
   1b5a4:	cmp	r1, r0, asr #4
   1b5a8:	ldr	r1, [sp, #48]	; 0x30
   1b5ac:	bne	1b678 <__assert_fail@plt+0x9340>
   1b5b0:	ldr	sl, [fp, #8]
   1b5b4:	cmp	r8, #0
   1b5b8:	beq	1b67c <__assert_fail@plt+0x9344>
   1b5bc:	ldr	r9, [r6, #12]
   1b5c0:	cmp	r7, r9
   1b5c4:	beq	1b794 <__assert_fail@plt+0x945c>
   1b5c8:	rsb	r5, r8, #1
   1b5cc:	ldr	r8, [sp, #20]
   1b5d0:	sub	r4, r7, #16
   1b5d4:	movw	r7, #39016	; 0x9868
   1b5d8:	movt	r7, #3
   1b5dc:	str	r4, [r6, #4]
   1b5e0:	ldrb	r0, [r7, #7]
   1b5e4:	cmp	r0, #1
   1b5e8:	bne	1b618 <__assert_fail@plt+0x92e0>
   1b5ec:	ldr	r0, [r7, #64]	; 0x40
   1b5f0:	cmp	r0, #0
   1b5f4:	beq	1b60c <__assert_fail@plt+0x92d4>
   1b5f8:	add	r1, r7, #64	; 0x40
   1b5fc:	mov	r0, r4
   1b600:	bl	18080 <__assert_fail@plt+0x5d48>
   1b604:	cmp	r0, #0
   1b608:	beq	1b628 <__assert_fail@plt+0x92f0>
   1b60c:	vld1.32	{d16-d17}, [r4]
   1b610:	add	r0, r7, #64	; 0x40
   1b614:	vst1.64	{d16-d17}, [r0]
   1b618:	ldr	r1, [fp, #12]
   1b61c:	ldr	r2, [fp, #16]
   1b620:	mov	r0, r4
   1b624:	bl	19460 <__assert_fail@plt+0x7128>
   1b628:	sub	r0, r4, #16
   1b62c:	cmp	r9, r4
   1b630:	beq	1b648 <__assert_fail@plt+0x9310>
   1b634:	add	r1, r5, #1
   1b638:	cmp	r5, #0
   1b63c:	mov	r4, r0
   1b640:	mov	r5, r1
   1b644:	bne	1b5dc <__assert_fail@plt+0x92a4>
   1b648:	ldr	r5, [sp, #16]
   1b64c:	ldr	r7, [sp, #28]
   1b650:	add	r0, r0, #16
   1b654:	mov	r4, r8
   1b658:	mov	r8, r0
   1b65c:	b	1b8e8 <__assert_fail@plt+0x95b0>
   1b660:	mov	r5, r3
   1b664:	str	r7, [sp, #48]	; 0x30
   1b668:	mov	r0, r7
   1b66c:	mov	sl, r7
   1b670:	mov	ip, r3
   1b674:	b	1b7d8 <__assert_fail@plt+0x94a0>
   1b678:	ldr	sl, [fp, #8]
   1b67c:	ldr	r4, [sp, #20]
   1b680:	ldr	r7, [sp, #28]
   1b684:	ldr	r8, [sp, #56]	; 0x38
   1b688:	b	1b8ec <__assert_fail@plt+0x95b4>
   1b68c:	mov	r5, r3
   1b690:	str	r7, [sp, #48]	; 0x30
   1b694:	mov	ip, r3
   1b698:	mov	sl, r7
   1b69c:	b	1b7d0 <__assert_fail@plt+0x9498>
   1b6a0:	ldr	r7, [sp, #52]	; 0x34
   1b6a4:	b	1b6ac <__assert_fail@plt+0x9374>
   1b6a8:	mvn	r8, #0
   1b6ac:	ldr	r3, [sp, #40]	; 0x28
   1b6b0:	ldr	r0, [sp, #44]	; 0x2c
   1b6b4:	ldr	r2, [r6, #24]
   1b6b8:	sub	r0, r3, r0
   1b6bc:	cmp	r2, r0, asr #4
   1b6c0:	bne	1b58c <__assert_fail@plt+0x9254>
   1b6c4:	asr	r0, r0, #4
   1b6c8:	cmp	sl, r9
   1b6cc:	str	r0, [sp, #44]	; 0x2c
   1b6d0:	beq	1b790 <__assert_fail@plt+0x9458>
   1b6d4:	ldr	r4, [sp, #20]
   1b6d8:	cmp	r8, #0
   1b6dc:	beq	1b79c <__assert_fail@plt+0x9464>
   1b6e0:	rsb	r5, r8, #1
   1b6e4:	sub	r4, sl, #16
   1b6e8:	ldr	sl, [fp, #8]
   1b6ec:	ldr	r8, [sp, #56]	; 0x38
   1b6f0:	movw	r7, #39016	; 0x9868
   1b6f4:	movt	r7, #3
   1b6f8:	str	r4, [r6]
   1b6fc:	ldrb	r0, [r7, #7]
   1b700:	cmp	r0, #1
   1b704:	bne	1b734 <__assert_fail@plt+0x93fc>
   1b708:	ldr	r0, [r7, #64]	; 0x40
   1b70c:	cmp	r0, #0
   1b710:	beq	1b728 <__assert_fail@plt+0x93f0>
   1b714:	add	r1, r7, #64	; 0x40
   1b718:	mov	r0, r4
   1b71c:	bl	18080 <__assert_fail@plt+0x5d48>
   1b720:	cmp	r0, #0
   1b724:	beq	1b744 <__assert_fail@plt+0x940c>
   1b728:	vld1.32	{d16-d17}, [r4]
   1b72c:	add	r0, r7, #64	; 0x40
   1b730:	vst1.64	{d16-d17}, [r0]
   1b734:	ldr	r1, [fp, #12]
   1b738:	ldr	r2, [fp, #16]
   1b73c:	mov	r0, r4
   1b740:	bl	19460 <__assert_fail@plt+0x7128>
   1b744:	sub	r0, r4, #16
   1b748:	cmp	r9, r4
   1b74c:	beq	1b764 <__assert_fail@plt+0x942c>
   1b750:	add	r1, r5, #1
   1b754:	cmp	r5, #0
   1b758:	mov	r4, r0
   1b75c:	mov	r5, r1
   1b760:	bne	1b6f8 <__assert_fail@plt+0x93c0>
   1b764:	ldr	r5, [sp, #16]
   1b768:	ldr	r7, [sp, #28]
   1b76c:	ldr	r4, [sp, #20]
   1b770:	add	r1, r0, #16
   1b774:	b	1b8ec <__assert_fail@plt+0x95b4>
   1b778:	mov	r5, r3
   1b77c:	str	r7, [sp, #48]	; 0x30
   1b780:	mov	ip, r3
   1b784:	mov	sl, r7
   1b788:	mvn	r8, #0
   1b78c:	b	1b7d0 <__assert_fail@plt+0x9498>
   1b790:	ldr	sl, [fp, #8]
   1b794:	ldr	r4, [sp, #20]
   1b798:	b	1b7a0 <__assert_fail@plt+0x9468>
   1b79c:	ldr	sl, [fp, #8]
   1b7a0:	ldr	r5, [sp, #16]
   1b7a4:	ldr	r7, [sp, #28]
   1b7a8:	ldr	r8, [sp, #56]	; 0x38
   1b7ac:	b	1b8e8 <__assert_fail@plt+0x95b0>
   1b7b0:	ldr	r5, [sp, #56]	; 0x38
   1b7b4:	ldr	ip, [sp, #44]	; 0x2c
   1b7b8:	rsb	r8, r7, #0
   1b7bc:	b	1b7c8 <__assert_fail@plt+0x9490>
   1b7c0:	ldr	r5, [sp, #56]	; 0x38
   1b7c4:	mvn	r8, #0
   1b7c8:	ldr	r4, [sp, #20]
   1b7cc:	ldr	r7, [sp, #28]
   1b7d0:	ldr	r0, [sp, #52]	; 0x34
   1b7d4:	ldr	r3, [sp, #40]	; 0x28
   1b7d8:	ldr	r2, [r6, #24]
   1b7dc:	sub	r1, r3, ip
   1b7e0:	cmp	r2, r1, asr #4
   1b7e4:	str	r2, [sp, #44]	; 0x2c
   1b7e8:	bne	1b858 <__assert_fail@plt+0x9520>
   1b7ec:	cmp	sl, r0
   1b7f0:	cmpne	r8, #0
   1b7f4:	beq	1b8d4 <__assert_fail@plt+0x959c>
   1b7f8:	ldr	r0, [sp, #52]	; 0x34
   1b7fc:	rsb	r1, r8, #1
   1b800:	mov	r2, #0
   1b804:	sub	r0, r0, sl
   1b808:	add	r0, r0, #16
   1b80c:	add	r3, sl, r2
   1b810:	cmp	r0, r2
   1b814:	sub	r3, r3, #16
   1b818:	vld1.32	{d16-d17}, [r3]
   1b81c:	add	r3, r9, r2
   1b820:	sub	r3, r3, #16
   1b824:	vst1.32	{d16-d17}, [r3]
   1b828:	sub	r3, r2, #16
   1b82c:	beq	1b844 <__assert_fail@plt+0x950c>
   1b830:	add	r2, r1, #1
   1b834:	cmp	r1, #0
   1b838:	mov	r1, r2
   1b83c:	mov	r2, r3
   1b840:	bne	1b80c <__assert_fail@plt+0x94d4>
   1b844:	add	r0, sl, r3
   1b848:	add	r9, r9, r3
   1b84c:	str	r0, [sp, #48]	; 0x30
   1b850:	str	r0, [r6]
   1b854:	b	1b8d4 <__assert_fail@plt+0x959c>
   1b858:	ldr	r1, [r6, #20]
   1b85c:	sub	r0, r7, sl
   1b860:	cmp	r1, r0, asr #4
   1b864:	bne	1b8d4 <__assert_fail@plt+0x959c>
   1b868:	cmp	r8, #0
   1b86c:	ldr	sl, [fp, #8]
   1b870:	ldrne	r0, [r6, #12]
   1b874:	cmpne	ip, r0
   1b878:	beq	1b8d8 <__assert_fail@plt+0x95a0>
   1b87c:	sub	r0, r0, ip
   1b880:	rsb	r1, r8, #1
   1b884:	mov	r2, #0
   1b888:	add	r0, r0, #16
   1b88c:	add	r3, ip, r2
   1b890:	cmp	r0, r2
   1b894:	sub	r3, r3, #16
   1b898:	vld1.32	{d16-d17}, [r3]
   1b89c:	add	r3, r9, r2
   1b8a0:	sub	r3, r3, #16
   1b8a4:	vst1.32	{d16-d17}, [r3]
   1b8a8:	sub	r3, r2, #16
   1b8ac:	beq	1b8c4 <__assert_fail@plt+0x958c>
   1b8b0:	add	r2, r1, #1
   1b8b4:	cmp	r1, #0
   1b8b8:	mov	r1, r2
   1b8bc:	mov	r2, r3
   1b8c0:	bne	1b88c <__assert_fail@plt+0x9554>
   1b8c4:	add	r8, ip, r3
   1b8c8:	add	r9, r9, r3
   1b8cc:	str	r8, [r6, #4]
   1b8d0:	b	1b8dc <__assert_fail@plt+0x95a4>
   1b8d4:	ldr	sl, [fp, #8]
   1b8d8:	mov	r8, r5
   1b8dc:	ldr	r0, [sp, #32]
   1b8e0:	ldr	r5, [sp, #16]
   1b8e4:	str	r9, [r0]
   1b8e8:	ldr	r1, [sp, #48]	; 0x30
   1b8ec:	ldr	r0, [sp, #40]	; 0x28
   1b8f0:	ldr	r2, [sp, #44]	; 0x2c
   1b8f4:	sub	r0, r0, r8
   1b8f8:	sub	r0, r2, r0, asr #4
   1b8fc:	str	r0, [r6, #24]
   1b900:	sub	r0, r7, r1
   1b904:	ldr	r1, [r6, #20]
   1b908:	sub	r0, r1, r0, asr #4
   1b90c:	str	r0, [r6, #20]
   1b910:	ldrb	r1, [r6, #44]	; 0x2c
   1b914:	cmp	r1, #0
   1b918:	beq	1b970 <__assert_fail@plt+0x9638>
   1b91c:	ldr	r0, [r6, #40]	; 0x28
   1b920:	cmp	r0, #2
   1b924:	bcc	1b9ec <__assert_fail@plt+0x96b4>
   1b928:	ldr	r0, [r6, #28]
   1b92c:	add	r0, r0, #48	; 0x30
   1b930:	bl	11e94 <pthread_mutex_lock@plt>
   1b934:	ldr	r8, [r6, #28]
   1b938:	ldrb	r0, [r8, #44]	; 0x2c
   1b93c:	cmp	r0, #0
   1b940:	bne	1ba78 <__assert_fail@plt+0x9740>
   1b944:	ldr	r2, [r8]
   1b948:	ldmib	r8, {r0, r3}
   1b94c:	ldr	r1, [r8, #12]
   1b950:	cmp	r2, r3
   1b954:	bne	1ba34 <__assert_fail@plt+0x96fc>
   1b958:	cmp	r0, r1
   1b95c:	beq	1ba78 <__assert_fail@plt+0x9740>
   1b960:	ldr	r0, [r8, #20]
   1b964:	cmp	r0, #0
   1b968:	bne	1ba78 <__assert_fail@plt+0x9740>
   1b96c:	b	1ba48 <__assert_fail@plt+0x9710>
   1b970:	ldr	r3, [r6]
   1b974:	ldmib	r6, {r1, r7}
   1b978:	ldr	r2, [r6, #12]
   1b97c:	cmp	r3, r7
   1b980:	bne	1b99c <__assert_fail@plt+0x9664>
   1b984:	ldr	r4, [sp, #20]
   1b988:	cmp	r0, #0
   1b98c:	bne	1b91c <__assert_fail@plt+0x95e4>
   1b990:	cmp	r1, r2
   1b994:	bne	1b9b4 <__assert_fail@plt+0x967c>
   1b998:	b	1b91c <__assert_fail@plt+0x95e4>
   1b99c:	ldr	r4, [sp, #20]
   1b9a0:	cmp	r1, r2
   1b9a4:	bne	1b9b4 <__assert_fail@plt+0x967c>
   1b9a8:	ldr	r0, [r6, #24]
   1b9ac:	cmp	r0, #0
   1b9b0:	bne	1b91c <__assert_fail@plt+0x95e4>
   1b9b4:	mov	r0, r4
   1b9b8:	bl	11e94 <pthread_mutex_lock@plt>
   1b9bc:	ldr	r0, [sl]
   1b9c0:	mov	r1, r6
   1b9c4:	bl	1ee18 <__assert_fail@plt+0xcae0>
   1b9c8:	mov	r0, #1
   1b9cc:	strb	r0, [r6, #44]	; 0x2c
   1b9d0:	mov	r0, r5
   1b9d4:	bl	12308 <pthread_cond_signal@plt>
   1b9d8:	mov	r0, r4
   1b9dc:	bl	11dec <pthread_mutex_unlock@plt>
   1b9e0:	ldr	r0, [r6, #40]	; 0x28
   1b9e4:	cmp	r0, #2
   1b9e8:	bcs	1b928 <__assert_fail@plt+0x95f0>
   1b9ec:	ldr	r0, [r6, #20]
   1b9f0:	ldr	r1, [r6, #24]
   1b9f4:	cmn	r0, r1
   1b9f8:	bne	1b294 <__assert_fail@plt+0x8f5c>
   1b9fc:	mov	r7, r4
   1ba00:	ldr	r4, [r6, #28]
   1ba04:	mov	r0, r7
   1ba08:	bl	11e94 <pthread_mutex_lock@plt>
   1ba0c:	ldr	r0, [sl]
   1ba10:	mov	r1, r4
   1ba14:	bl	1ee18 <__assert_fail@plt+0xcae0>
   1ba18:	mov	r0, #1
   1ba1c:	strb	r0, [r4, #44]	; 0x2c
   1ba20:	mov	r0, r5
   1ba24:	mov	r4, r7
   1ba28:	bl	12308 <pthread_cond_signal@plt>
   1ba2c:	mov	r0, r7
   1ba30:	b	1ba7c <__assert_fail@plt+0x9744>
   1ba34:	cmp	r0, r1
   1ba38:	bne	1ba48 <__assert_fail@plt+0x9710>
   1ba3c:	ldr	r0, [r8, #24]
   1ba40:	cmp	r0, #0
   1ba44:	bne	1ba78 <__assert_fail@plt+0x9740>
   1ba48:	mov	r0, r4
   1ba4c:	bl	11e94 <pthread_mutex_lock@plt>
   1ba50:	ldr	r0, [sl]
   1ba54:	mov	r1, r8
   1ba58:	bl	1ee18 <__assert_fail@plt+0xcae0>
   1ba5c:	mov	r0, #1
   1ba60:	strb	r0, [r8, #44]	; 0x2c
   1ba64:	mov	r0, r5
   1ba68:	bl	12308 <pthread_cond_signal@plt>
   1ba6c:	mov	r0, r4
   1ba70:	bl	11dec <pthread_mutex_unlock@plt>
   1ba74:	ldr	r8, [r6, #28]
   1ba78:	add	r0, r8, #48	; 0x30
   1ba7c:	bl	11dec <pthread_mutex_unlock@plt>
   1ba80:	b	1b294 <__assert_fail@plt+0x8f5c>
   1ba84:	ldr	r0, [sp, #36]	; 0x24
   1ba88:	bl	11dec <pthread_mutex_unlock@plt>
   1ba8c:	mov	r0, r4
   1ba90:	bl	11e94 <pthread_mutex_lock@plt>
   1ba94:	ldr	r0, [sl]
   1ba98:	mov	r1, r6
   1ba9c:	bl	1ee18 <__assert_fail@plt+0xcae0>
   1baa0:	mov	r0, #1
   1baa4:	strb	r0, [r6, #44]	; 0x2c
   1baa8:	mov	r0, r5
   1baac:	bl	12308 <pthread_cond_signal@plt>
   1bab0:	mov	r0, r4
   1bab4:	bl	11dec <pthread_mutex_unlock@plt>
   1bab8:	sub	sp, fp, #28
   1babc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bac0:	movw	r2, #48220	; 0xbc5c
   1bac4:	sub	r0, fp, #32
   1bac8:	add	r3, sp, #60	; 0x3c
   1bacc:	mov	r1, #0
   1bad0:	movt	r2, #1
   1bad4:	bl	1205c <pthread_create@plt>
   1bad8:	ldr	r6, [r4, #20]
   1badc:	cmp	r0, #0
   1bae0:	beq	1bafc <__assert_fail@plt+0x97c4>
   1bae4:	ldr	r7, [r4, #24]
   1bae8:	ldr	r0, [sp, #24]
   1baec:	cmp	r7, #2
   1baf0:	sub	r5, r8, r0, lsl #4
   1baf4:	bcs	1b200 <__assert_fail@plt+0x8ec8>
   1baf8:	b	1b21c <__assert_fail@plt+0x8ee4>
   1bafc:	ldr	r0, [fp, #12]
   1bb00:	ldr	r3, [r4, #36]	; 0x24
   1bb04:	ldr	r2, [sp, #24]
   1bb08:	sub	r1, r5, r5, lsr #1
   1bb0c:	str	sl, [sp]
   1bb10:	str	r0, [sp, #4]
   1bb14:	ldr	r0, [fp, #16]
   1bb18:	str	r0, [sp, #8]
   1bb1c:	sub	r0, r8, r6, lsl #4
   1bb20:	bl	1b188 <__assert_fail@plt+0x8e50>
   1bb24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bb28:	mov	r1, #0
   1bb2c:	bl	12254 <pthread_join@plt>
   1bb30:	sub	sp, fp, #28
   1bb34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb38:	ldr	r2, [r1, #40]	; 0x28
   1bb3c:	ldr	r3, [r0, #40]	; 0x28
   1bb40:	cmp	r3, r2
   1bb44:	ldreq	r2, [r1, #20]
   1bb48:	ldreq	r1, [r1, #24]
   1bb4c:	movne	r0, #0
   1bb50:	addeq	r1, r1, r2
   1bb54:	ldreq	r2, [r0, #20]
   1bb58:	ldreq	r0, [r0, #24]
   1bb5c:	addeq	r2, r0, r2
   1bb60:	moveq	r0, #0
   1bb64:	cmpeq	r2, r1
   1bb68:	movwcc	r0, #1
   1bb6c:	bx	lr
   1bb70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb74:	add	fp, sp, #28
   1bb78:	sub	sp, sp, #12
   1bb7c:	mov	r4, r1
   1bb80:	ldr	r1, [fp, #8]
   1bb84:	mov	r6, r2
   1bb88:	ldr	r2, [fp, #12]
   1bb8c:	mov	r5, r3
   1bb90:	mov	sl, #0
   1bb94:	mov	r8, #1
   1bb98:	rsb	r9, r1, #0
   1bb9c:	b	1bbd4 <__assert_fail@plt+0x989c>
   1bba0:	ldr	r0, [fp, #8]
   1bba4:	str	r1, [r4, #32]
   1bba8:	lsr	r3, r5, #1
   1bbac:	mov	r2, r7
   1bbb0:	stm	sp, {r0, r8}
   1bbb4:	mov	r0, r4
   1bbb8:	bl	1bb70 <__assert_fail@plt+0x9838>
   1bbbc:	mov	r1, r0
   1bbc0:	str	r0, [r4, #36]	; 0x24
   1bbc4:	mov	r0, r4
   1bbc8:	sub	r5, r5, r5, lsr #1
   1bbcc:	mov	r2, #0
   1bbd0:	mov	r4, r1
   1bbd4:	ands	r1, r2, #1
   1bbd8:	mov	r2, #24
   1bbdc:	add	r7, r6, r9, lsl #4
   1bbe0:	add	r3, r0, #12
   1bbe4:	movwne	r2, #20
   1bbe8:	cmp	r1, #0
   1bbec:	ldr	r2, [r0, r2]
   1bbf0:	addne	r3, r0, #8
   1bbf4:	str	r7, [r4]
   1bbf8:	lsr	r1, r2, #1
   1bbfc:	sub	r2, r2, r2, lsr #1
   1bc00:	sub	r6, r7, r1, lsl #4
   1bc04:	stmib	r4, {r6, r7}
   1bc08:	str	r6, [r4, #12]
   1bc0c:	str	r3, [r4, #16]
   1bc10:	str	r1, [r4, #20]
   1bc14:	str	r2, [r4, #24]
   1bc18:	str	r0, [r4, #28]
   1bc1c:	mov	r1, #0
   1bc20:	ldr	r0, [r0, #40]	; 0x28
   1bc24:	strb	sl, [r4, #44]	; 0x2c
   1bc28:	add	r0, r0, #1
   1bc2c:	str	r0, [r4, #40]	; 0x28
   1bc30:	add	r0, r4, #48	; 0x30
   1bc34:	bl	11edc <pthread_mutex_init@plt>
   1bc38:	add	r1, r4, #72	; 0x48
   1bc3c:	cmp	r5, #2
   1bc40:	bcs	1bba0 <__assert_fail@plt+0x9868>
   1bc44:	mov	r0, #0
   1bc48:	str	r0, [r4, #32]
   1bc4c:	str	r0, [r4, #36]	; 0x24
   1bc50:	mov	r0, r1
   1bc54:	sub	sp, fp, #28
   1bc58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc5c:	push	{r4, sl, fp, lr}
   1bc60:	add	fp, sp, #8
   1bc64:	sub	sp, sp, #16
   1bc68:	ldr	ip, [r0]
   1bc6c:	ldmib	r0, {r1, r2, r3, lr}
   1bc70:	ldr	r4, [r0, #20]
   1bc74:	ldr	r0, [r0, #24]
   1bc78:	str	r0, [sp, #8]
   1bc7c:	mov	r0, ip
   1bc80:	str	lr, [sp]
   1bc84:	str	r4, [sp, #4]
   1bc88:	bl	1b188 <__assert_fail@plt+0x8e50>
   1bc8c:	mov	r0, #0
   1bc90:	sub	sp, fp, #8
   1bc94:	pop	{r4, sl, fp, pc}
   1bc98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc9c:	add	fp, sp, #28
   1bca0:	sub	sp, sp, #4
   1bca4:	mov	r9, r3
   1bca8:	mov	r8, r2
   1bcac:	mov	r4, r0
   1bcb0:	cmp	r1, #2
   1bcb4:	bne	1bd14 <__assert_fail@plt+0x99dc>
   1bcb8:	sub	r6, r4, #16
   1bcbc:	sub	r5, r4, #32
   1bcc0:	mov	r0, r6
   1bcc4:	mov	r1, r5
   1bcc8:	bl	18080 <__assert_fail@plt+0x5d48>
   1bccc:	cmp	r9, #0
   1bcd0:	beq	1bd68 <__assert_fail@plt+0x9a30>
   1bcd4:	mvn	r1, #15
   1bcd8:	cmp	r0, #0
   1bcdc:	mvngt	r1, #31
   1bce0:	cmp	r0, #0
   1bce4:	add	r1, r4, r1
   1bce8:	vld1.32	{d16-d17}, [r1]
   1bcec:	sub	r1, r8, #16
   1bcf0:	vst1.32	{d16-d17}, [r1]
   1bcf4:	mvn	r1, #31
   1bcf8:	mvngt	r1, #15
   1bcfc:	add	r0, r4, r1
   1bd00:	vld1.32	{d16-d17}, [r0]
   1bd04:	sub	r0, r8, #32
   1bd08:	vst1.32	{d16-d17}, [r0]
   1bd0c:	sub	sp, fp, #28
   1bd10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd14:	mov	r7, r1
   1bd18:	lsr	sl, r1, #1
   1bd1c:	mov	r1, #0
   1bd20:	cmp	r9, #0
   1bd24:	mov	r3, r9
   1bd28:	sub	r5, r1, r7, lsr #1
   1bd2c:	mov	r1, r9
   1bd30:	sub	r6, r7, r7, lsr #1
   1bd34:	sub	r0, r4, sl, lsl #4
   1bd38:	movne	r1, r5
   1bd3c:	add	r2, r8, r1, lsl #4
   1bd40:	mov	r1, r6
   1bd44:	bl	1bc98 <__assert_fail@plt+0x9960>
   1bd48:	cmp	r7, #4
   1bd4c:	bcc	1bd94 <__assert_fail@plt+0x9a5c>
   1bd50:	eor	r3, r9, #1
   1bd54:	mov	r0, r4
   1bd58:	mov	r1, sl
   1bd5c:	mov	r2, r8
   1bd60:	bl	1bc98 <__assert_fail@plt+0x9960>
   1bd64:	b	1bdac <__assert_fail@plt+0x9a74>
   1bd68:	cmp	r0, #1
   1bd6c:	blt	1be34 <__assert_fail@plt+0x9afc>
   1bd70:	vld1.32	{d16-d17}, [r6]
   1bd74:	sub	r0, r8, #16
   1bd78:	vst1.32	{d16-d17}, [r0]
   1bd7c:	vld1.32	{d16-d17}, [r5]
   1bd80:	vst1.32	{d16-d17}, [r6]
   1bd84:	vld1.32	{d16-d17}, [r0]
   1bd88:	vst1.32	{d16-d17}, [r5]
   1bd8c:	sub	sp, fp, #28
   1bd90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd94:	cmp	r9, #0
   1bd98:	bne	1bdac <__assert_fail@plt+0x9a74>
   1bd9c:	sub	r0, r4, #16
   1bda0:	vld1.32	{d16-d17}, [r0]
   1bda4:	sub	r0, r8, #16
   1bda8:	vst1.32	{d16-d17}, [r0]
   1bdac:	cmp	r9, #0
   1bdb0:	mov	r9, r8
   1bdb4:	movne	r9, r4
   1bdb8:	movne	r4, r8
   1bdbc:	add	r7, r4, r5, lsl #4
   1bdc0:	sub	r8, r9, #16
   1bdc4:	sub	r5, r7, #16
   1bdc8:	mov	r0, r8
   1bdcc:	mov	r1, r5
   1bdd0:	bl	18080 <__assert_fail@plt+0x5d48>
   1bdd4:	sub	r4, r4, #16
   1bdd8:	cmp	r0, #0
   1bddc:	ble	1bdf8 <__assert_fail@plt+0x9ac0>
   1bde0:	vld1.32	{d16-d17}, [r5]
   1bde4:	subs	r6, r6, #1
   1bde8:	mov	r7, r5
   1bdec:	vst1.32	{d16-d17}, [r4]
   1bdf0:	bne	1bdc4 <__assert_fail@plt+0x9a8c>
   1bdf4:	b	1be10 <__assert_fail@plt+0x9ad8>
   1bdf8:	vld1.32	{d16-d17}, [r8]
   1bdfc:	subs	sl, sl, #1
   1be00:	mov	r9, r8
   1be04:	vst1.32	{d16-d17}, [r4]
   1be08:	bne	1bdc0 <__assert_fail@plt+0x9a88>
   1be0c:	b	1be34 <__assert_fail@plt+0x9afc>
   1be10:	mvn	r0, #0
   1be14:	add	r1, r9, r0, lsl #4
   1be18:	vld1.32	{d16-d17}, [r1]
   1be1c:	add	r1, r4, r0, lsl #4
   1be20:	sub	r0, r0, #1
   1be24:	vst1.32	{d16-d17}, [r1]
   1be28:	add	r1, sl, r0
   1be2c:	cmn	r1, #1
   1be30:	bne	1be14 <__assert_fail@plt+0x9adc>
   1be34:	sub	sp, fp, #28
   1be38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be3c:	mov	r0, #1
   1be40:	b	12440 <__assert_fail@plt+0x108>
   1be44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be48:	add	fp, sp, #28
   1be4c:	sub	sp, sp, #12
   1be50:	mov	r4, r3
   1be54:	mov	r9, r2
   1be58:	mov	r7, r1
   1be5c:	mov	r8, r0
   1be60:	bl	12140 <strlen@plt>
   1be64:	ldr	r6, [r7]
   1be68:	cmp	r6, #0
   1be6c:	beq	1bf18 <__assert_fail@plt+0x9be0>
   1be70:	mov	r5, r0
   1be74:	cmp	r9, #0
   1be78:	beq	1bf28 <__assert_fail@plt+0x9bf0>
   1be7c:	add	r0, r7, #4
   1be80:	mvn	sl, #0
   1be84:	mov	r7, #0
   1be88:	str	r9, [sp]
   1be8c:	str	r0, [sp, #8]
   1be90:	mov	r0, #0
   1be94:	str	r0, [sp, #4]
   1be98:	mov	r0, r9
   1be9c:	mov	r0, r6
   1bea0:	mov	r1, r8
   1bea4:	mov	r2, r5
   1bea8:	bl	122fc <strncmp@plt>
   1beac:	cmp	r0, #0
   1beb0:	bne	1befc <__assert_fail@plt+0x9bc4>
   1beb4:	mov	r0, r6
   1beb8:	bl	12140 <strlen@plt>
   1bebc:	cmp	r0, r5
   1bec0:	beq	1bf1c <__assert_fail@plt+0x9be4>
   1bec4:	cmn	sl, #1
   1bec8:	beq	1bef8 <__assert_fail@plt+0x9bc0>
   1becc:	ldr	r0, [sp]
   1bed0:	mov	r1, r9
   1bed4:	mov	r2, r4
   1bed8:	mla	r0, sl, r4, r0
   1bedc:	bl	11f3c <memcmp@plt>
   1bee0:	ldr	r1, [sp, #4]
   1bee4:	cmp	r0, #0
   1bee8:	movwne	r0, #1
   1beec:	orr	r1, r1, r0
   1bef0:	str	r1, [sp, #4]
   1bef4:	b	1befc <__assert_fail@plt+0x9bc4>
   1bef8:	mov	sl, r7
   1befc:	ldr	r0, [sp, #8]
   1bf00:	add	r9, r9, r4
   1bf04:	ldr	r6, [r0, r7, lsl #2]
   1bf08:	add	r7, r7, #1
   1bf0c:	cmp	r6, #0
   1bf10:	bne	1be9c <__assert_fail@plt+0x9b64>
   1bf14:	b	1bf90 <__assert_fail@plt+0x9c58>
   1bf18:	mvn	r7, #0
   1bf1c:	mov	r0, r7
   1bf20:	sub	sp, fp, #28
   1bf24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf28:	add	r4, r7, #4
   1bf2c:	mov	r0, #0
   1bf30:	mvn	sl, #0
   1bf34:	mov	r7, #0
   1bf38:	str	r0, [sp, #4]
   1bf3c:	mov	r0, r6
   1bf40:	mov	r1, r8
   1bf44:	mov	r2, r5
   1bf48:	bl	122fc <strncmp@plt>
   1bf4c:	cmp	r0, #0
   1bf50:	bne	1bf80 <__assert_fail@plt+0x9c48>
   1bf54:	mov	r0, r6
   1bf58:	bl	12140 <strlen@plt>
   1bf5c:	cmp	r0, r5
   1bf60:	beq	1bf1c <__assert_fail@plt+0x9be4>
   1bf64:	ldr	r1, [sp, #4]
   1bf68:	cmn	sl, #1
   1bf6c:	add	r0, sl, #1
   1bf70:	movwne	r0, #1
   1bf74:	moveq	sl, r7
   1bf78:	orr	r1, r1, r0
   1bf7c:	str	r1, [sp, #4]
   1bf80:	ldr	r6, [r4, r7, lsl #2]
   1bf84:	add	r7, r7, #1
   1bf88:	cmp	r6, #0
   1bf8c:	bne	1bf3c <__assert_fail@plt+0x9c04>
   1bf90:	ldr	r0, [sp, #4]
   1bf94:	tst	r0, #1
   1bf98:	mvnne	sl, #1
   1bf9c:	mov	r0, sl
   1bfa0:	sub	sp, fp, #28
   1bfa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfa8:	push	{r4, r5, r6, r7, fp, lr}
   1bfac:	add	fp, sp, #16
   1bfb0:	mov	r5, r0
   1bfb4:	ldr	r0, [r1]
   1bfb8:	mvn	r4, #0
   1bfbc:	cmp	r0, #0
   1bfc0:	beq	1bff0 <__assert_fail@plt+0x9cb8>
   1bfc4:	add	r7, r1, #4
   1bfc8:	mov	r6, #0
   1bfcc:	mov	r1, r5
   1bfd0:	bl	11e28 <strcmp@plt>
   1bfd4:	cmp	r0, #0
   1bfd8:	moveq	r0, r6
   1bfdc:	popeq	{r4, r5, r6, r7, fp, pc}
   1bfe0:	ldr	r0, [r7, r6, lsl #2]
   1bfe4:	add	r6, r6, #1
   1bfe8:	cmp	r0, #0
   1bfec:	bne	1bfcc <__assert_fail@plt+0x9c94>
   1bff0:	mov	r0, r4
   1bff4:	pop	{r4, r5, r6, r7, fp, pc}
   1bff8:	push	{r4, r5, r6, sl, fp, lr}
   1bffc:	add	fp, sp, #16
   1c000:	sub	sp, sp, #8
   1c004:	mov	r4, r1
   1c008:	movw	r1, #32586	; 0x7f4a
   1c00c:	mov	r5, r0
   1c010:	movw	r0, #32559	; 0x7f2f
   1c014:	cmn	r2, #1
   1c018:	mov	r2, #5
   1c01c:	movt	r0, #2
   1c020:	movt	r1, #2
   1c024:	moveq	r1, r0
   1c028:	mov	r0, #0
   1c02c:	bl	11f54 <dcgettext@plt>
   1c030:	mov	r6, r0
   1c034:	mov	r0, #0
   1c038:	mov	r1, #8
   1c03c:	mov	r2, r4
   1c040:	bl	216b8 <__assert_fail@plt+0xf380>
   1c044:	mov	r4, r0
   1c048:	mov	r0, #1
   1c04c:	mov	r1, r5
   1c050:	bl	21c78 <__assert_fail@plt+0xf940>
   1c054:	str	r0, [sp]
   1c058:	mov	r0, #0
   1c05c:	mov	r1, #0
   1c060:	mov	r2, r6
   1c064:	mov	r3, r4
   1c068:	bl	12080 <error@plt>
   1c06c:	sub	sp, fp, #16
   1c070:	pop	{r4, r5, r6, sl, fp, pc}
   1c074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c078:	add	fp, sp, #28
   1c07c:	sub	sp, sp, #4
   1c080:	mov	r5, r1
   1c084:	movw	r1, #32615	; 0x7f67
   1c088:	mov	sl, r2
   1c08c:	mov	r7, r0
   1c090:	mov	r0, #0
   1c094:	mov	r2, #5
   1c098:	mov	r8, #0
   1c09c:	movt	r1, #2
   1c0a0:	bl	11f54 <dcgettext@plt>
   1c0a4:	movw	r4, #37576	; 0x92c8
   1c0a8:	movt	r4, #3
   1c0ac:	ldr	r1, [r4]
   1c0b0:	bl	11e10 <fputs_unlocked@plt>
   1c0b4:	ldr	r6, [r7]
   1c0b8:	cmp	r6, #0
   1c0bc:	beq	1c15c <__assert_fail@plt+0x9e24>
   1c0c0:	add	r9, r7, #4
   1c0c4:	mov	r7, #0
   1c0c8:	str	sl, [sp]
   1c0cc:	cmp	r8, #0
   1c0d0:	beq	1c0ec <__assert_fail@plt+0x9db4>
   1c0d4:	mov	r0, r7
   1c0d8:	mov	r1, r5
   1c0dc:	mov	r2, sl
   1c0e0:	bl	11f3c <memcmp@plt>
   1c0e4:	cmp	r0, #0
   1c0e8:	beq	1c118 <__assert_fail@plt+0x9de0>
   1c0ec:	ldr	r7, [r4]
   1c0f0:	mov	r0, r6
   1c0f4:	bl	21c88 <__assert_fail@plt+0xf950>
   1c0f8:	movw	r2, #32636	; 0x7f7c
   1c0fc:	mov	r3, r0
   1c100:	mov	r0, r7
   1c104:	mov	r1, #1
   1c108:	movt	r2, #2
   1c10c:	bl	121c4 <__fprintf_chk@plt>
   1c110:	mov	r7, r5
   1c114:	b	1c148 <__assert_fail@plt+0x9e10>
   1c118:	mov	sl, r9
   1c11c:	ldr	r9, [r4]
   1c120:	mov	r0, r6
   1c124:	bl	21c88 <__assert_fail@plt+0xf950>
   1c128:	mov	r3, r0
   1c12c:	mov	r0, r9
   1c130:	mov	r9, sl
   1c134:	ldr	sl, [sp]
   1c138:	movw	r2, #32644	; 0x7f84
   1c13c:	mov	r1, #1
   1c140:	movt	r2, #2
   1c144:	bl	121c4 <__fprintf_chk@plt>
   1c148:	ldr	r6, [r9, -r8, lsl #2]
   1c14c:	add	r5, r5, sl
   1c150:	sub	r8, r8, #1
   1c154:	cmp	r6, #0
   1c158:	bne	1c0cc <__assert_fail@plt+0x9d94>
   1c15c:	ldr	r0, [r4]
   1c160:	ldr	r1, [r0, #20]
   1c164:	ldr	r2, [r0, #24]
   1c168:	cmp	r1, r2
   1c16c:	addcc	r2, r1, #1
   1c170:	strcc	r2, [r0, #20]
   1c174:	movcc	r0, #10
   1c178:	strbcc	r0, [r1]
   1c17c:	subcc	sp, fp, #28
   1c180:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c184:	mov	r1, #10
   1c188:	sub	sp, fp, #28
   1c18c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c190:	b	1220c <__overflow@plt>
   1c194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c198:	add	fp, sp, #28
   1c19c:	sub	sp, sp, #12
   1c1a0:	mov	sl, r0
   1c1a4:	ldr	r0, [fp, #16]
   1c1a8:	ldr	r9, [fp, #8]
   1c1ac:	mov	r5, r3
   1c1b0:	mov	r8, r2
   1c1b4:	mov	r6, r1
   1c1b8:	cmp	r0, #0
   1c1bc:	beq	1c1ec <__assert_fail@plt+0x9eb4>
   1c1c0:	mov	r0, r6
   1c1c4:	mov	r1, r8
   1c1c8:	mov	r2, r5
   1c1cc:	mov	r3, r9
   1c1d0:	bl	1be44 <__assert_fail@plt+0x9b0c>
   1c1d4:	mov	r4, r0
   1c1d8:	cmn	r4, #1
   1c1dc:	ble	1c23c <__assert_fail@plt+0x9f04>
   1c1e0:	mov	r0, r4
   1c1e4:	sub	sp, fp, #28
   1c1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1ec:	ldr	r0, [r8]
   1c1f0:	movw	r7, #32559	; 0x7f2f
   1c1f4:	str	r5, [sp, #8]
   1c1f8:	movt	r7, #2
   1c1fc:	cmp	r0, #0
   1c200:	beq	1c254 <__assert_fail@plt+0x9f1c>
   1c204:	add	r5, r8, #4
   1c208:	mov	r4, #0
   1c20c:	mov	r1, r6
   1c210:	bl	11e28 <strcmp@plt>
   1c214:	cmp	r0, #0
   1c218:	beq	1c230 <__assert_fail@plt+0x9ef8>
   1c21c:	ldr	r0, [r5, r4, lsl #2]
   1c220:	add	r4, r4, #1
   1c224:	cmp	r0, #0
   1c228:	bne	1c20c <__assert_fail@plt+0x9ed4>
   1c22c:	b	1c254 <__assert_fail@plt+0x9f1c>
   1c230:	ldr	r5, [sp, #8]
   1c234:	cmn	r4, #1
   1c238:	bgt	1c1e0 <__assert_fail@plt+0x9ea8>
   1c23c:	movw	r0, #32559	; 0x7f2f
   1c240:	movw	r7, #32586	; 0x7f4a
   1c244:	str	r5, [sp, #8]
   1c248:	movt	r0, #2
   1c24c:	movt	r7, #2
   1c250:	moveq	r7, r0
   1c254:	ldr	r5, [fp, #12]
   1c258:	mov	r0, #0
   1c25c:	mov	r1, r7
   1c260:	mov	r2, #5
   1c264:	bl	11f54 <dcgettext@plt>
   1c268:	mov	r4, r0
   1c26c:	mov	r0, #0
   1c270:	mov	r1, #8
   1c274:	mov	r2, r6
   1c278:	bl	216b8 <__assert_fail@plt+0xf380>
   1c27c:	mov	r6, r0
   1c280:	mov	r0, #1
   1c284:	mov	r1, sl
   1c288:	bl	21c78 <__assert_fail@plt+0xf940>
   1c28c:	str	r0, [sp]
   1c290:	mov	r0, #0
   1c294:	mov	r1, #0
   1c298:	mov	r2, r4
   1c29c:	mov	r3, r6
   1c2a0:	bl	12080 <error@plt>
   1c2a4:	ldr	r1, [sp, #8]
   1c2a8:	mov	r0, r8
   1c2ac:	mov	r2, r9
   1c2b0:	bl	1c074 <__assert_fail@plt+0x9d3c>
   1c2b4:	blx	r5
   1c2b8:	mvn	r4, #0
   1c2bc:	mov	r0, r4
   1c2c0:	sub	sp, fp, #28
   1c2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c2cc:	add	fp, sp, #24
   1c2d0:	ldr	r6, [r1]
   1c2d4:	cmp	r6, #0
   1c2d8:	beq	1c33c <__assert_fail@plt+0xa004>
   1c2dc:	mov	r8, r1
   1c2e0:	mov	r7, r2
   1c2e4:	mov	r1, r2
   1c2e8:	mov	r2, r3
   1c2ec:	mov	r4, r3
   1c2f0:	mov	r9, r0
   1c2f4:	bl	11f3c <memcmp@plt>
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c334 <__assert_fail@plt+0x9ffc>
   1c300:	add	r7, r7, r4
   1c304:	add	r5, r8, #4
   1c308:	ldr	r6, [r5]
   1c30c:	cmp	r6, #0
   1c310:	beq	1c33c <__assert_fail@plt+0xa004>
   1c314:	mov	r0, r9
   1c318:	mov	r1, r7
   1c31c:	mov	r2, r4
   1c320:	bl	11f3c <memcmp@plt>
   1c324:	add	r7, r7, r4
   1c328:	add	r5, r5, #4
   1c32c:	cmp	r0, #0
   1c330:	bne	1c308 <__assert_fail@plt+0x9fd0>
   1c334:	mov	r0, r6
   1c338:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c33c:	mov	r6, #0
   1c340:	mov	r0, r6
   1c344:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c348:	movw	r1, #39096	; 0x98b8
   1c34c:	movt	r1, #3
   1c350:	str	r0, [r1, #4]
   1c354:	bx	lr
   1c358:	movw	r1, #39096	; 0x98b8
   1c35c:	movt	r1, #3
   1c360:	strb	r0, [r1]
   1c364:	bx	lr
   1c368:	push	{r4, r5, r6, sl, fp, lr}
   1c36c:	add	fp, sp, #16
   1c370:	sub	sp, sp, #8
   1c374:	movw	r0, #37588	; 0x92d4
   1c378:	movt	r0, #3
   1c37c:	ldr	r0, [r0]
   1c380:	bl	24e94 <__assert_fail@plt+0x12b5c>
   1c384:	cmp	r0, #0
   1c388:	beq	1c3b0 <__assert_fail@plt+0xa078>
   1c38c:	movw	r5, #39096	; 0x98b8
   1c390:	movt	r5, #3
   1c394:	ldrb	r0, [r5]
   1c398:	cmp	r0, #0
   1c39c:	beq	1c3dc <__assert_fail@plt+0xa0a4>
   1c3a0:	bl	12164 <__errno_location@plt>
   1c3a4:	ldr	r0, [r0]
   1c3a8:	cmp	r0, #32
   1c3ac:	bne	1c3dc <__assert_fail@plt+0xa0a4>
   1c3b0:	movw	r0, #37576	; 0x92c8
   1c3b4:	movt	r0, #3
   1c3b8:	ldr	r0, [r0]
   1c3bc:	bl	24e94 <__assert_fail@plt+0x12b5c>
   1c3c0:	cmp	r0, #0
   1c3c4:	subeq	sp, fp, #16
   1c3c8:	popeq	{r4, r5, r6, sl, fp, pc}
   1c3cc:	movw	r0, #37480	; 0x9268
   1c3d0:	movt	r0, #3
   1c3d4:	ldr	r0, [r0]
   1c3d8:	bl	11eb8 <_exit@plt>
   1c3dc:	movw	r1, #32649	; 0x7f89
   1c3e0:	mov	r0, #0
   1c3e4:	mov	r2, #5
   1c3e8:	movt	r1, #2
   1c3ec:	bl	11f54 <dcgettext@plt>
   1c3f0:	ldr	r6, [r5, #4]
   1c3f4:	mov	r4, r0
   1c3f8:	bl	12164 <__errno_location@plt>
   1c3fc:	ldr	r5, [r0]
   1c400:	cmp	r6, #0
   1c404:	bne	1c420 <__assert_fail@plt+0xa0e8>
   1c408:	movw	r2, #32646	; 0x7f86
   1c40c:	mov	r0, #0
   1c410:	mov	r1, r5
   1c414:	mov	r3, r4
   1c418:	movt	r2, #2
   1c41c:	b	1c440 <__assert_fail@plt+0xa108>
   1c420:	mov	r0, r6
   1c424:	bl	21900 <__assert_fail@plt+0xf5c8>
   1c428:	movw	r2, #31609	; 0x7b79
   1c42c:	mov	r3, r0
   1c430:	str	r4, [sp]
   1c434:	mov	r0, #0
   1c438:	mov	r1, r5
   1c43c:	movt	r2, #2
   1c440:	bl	12080 <error@plt>
   1c444:	movw	r0, #37480	; 0x9268
   1c448:	movt	r0, #3
   1c44c:	ldr	r0, [r0]
   1c450:	bl	11eb8 <_exit@plt>
	...
   1c460:	add	r2, pc, #40	; 0x28
   1c464:	mov	r1, #0
   1c468:	vld1.64	{d16-d17}, [r2 :128]
   1c46c:	mov	r2, #20
   1c470:	str	r1, [r0, #16]
   1c474:	str	r1, [r0, #24]
   1c478:	vst1.32	{d16-d17}, [r0], r2
   1c47c:	str	r1, [r0]
   1c480:	bx	lr
   1c484:	nop	{0}
   1c488:	nop	{0}
   1c48c:	nop	{0}
   1c490:	strbvs	r2, [r5, -r1, lsl #6]
   1c494:	svc	0x00cdab89
   1c498:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1c49c:	eorsne	r5, r2, r6, ror r4
   1c4a0:	ldr	r2, [r0]
   1c4a4:	str	r2, [r1]
   1c4a8:	ldr	r2, [r0, #4]
   1c4ac:	str	r2, [r1, #4]
   1c4b0:	ldr	r2, [r0, #8]
   1c4b4:	str	r2, [r1, #8]
   1c4b8:	ldr	r0, [r0, #12]
   1c4bc:	str	r0, [r1, #12]
   1c4c0:	mov	r0, r1
   1c4c4:	bx	lr
   1c4c8:	push	{r4, r5, r6, r7, fp, lr}
   1c4cc:	add	fp, sp, #16
   1c4d0:	mov	r4, r1
   1c4d4:	ldr	r1, [r0, #24]
   1c4d8:	ldr	r2, [r0, #16]
   1c4dc:	mov	r5, r0
   1c4e0:	mov	r7, #32
   1c4e4:	add	r6, r5, #28
   1c4e8:	add	r0, r2, r1
   1c4ec:	cmp	r1, #56	; 0x38
   1c4f0:	movwcc	r7, #16
   1c4f4:	str	r0, [r5, #16]
   1c4f8:	cmp	r0, r2
   1c4fc:	lsl	r3, r0, #3
   1c500:	ldrcc	r2, [r5, #20]
   1c504:	add	ip, r6, r7, lsl #2
   1c508:	addcc	r2, r2, #1
   1c50c:	strcc	r2, [r5, #20]
   1c510:	mvn	r2, #7
   1c514:	add	r2, r2, r7, lsl #2
   1c518:	str	r3, [r6, r2]
   1c51c:	sub	r2, r2, r1
   1c520:	ldr	r3, [r5, #20]
   1c524:	lsl	r3, r3, #3
   1c528:	orr	r0, r3, r0, lsr #29
   1c52c:	str	r0, [ip, #-4]
   1c530:	add	r0, r6, r1
   1c534:	movw	r1, #32664	; 0x7f98
   1c538:	movt	r1, #2
   1c53c:	bl	11ec4 <memcpy@plt>
   1c540:	lsl	r1, r7, #2
   1c544:	mov	r0, r6
   1c548:	mov	r2, r5
   1c54c:	bl	1c578 <__assert_fail@plt+0xa240>
   1c550:	ldr	r0, [r5]
   1c554:	str	r0, [r4]
   1c558:	ldr	r0, [r5, #4]
   1c55c:	str	r0, [r4, #4]
   1c560:	ldr	r0, [r5, #8]
   1c564:	str	r0, [r4, #8]
   1c568:	ldr	r0, [r5, #12]
   1c56c:	str	r0, [r4, #12]
   1c570:	mov	r0, r4
   1c574:	pop	{r4, r5, r6, r7, fp, pc}
   1c578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c57c:	add	fp, sp, #28
   1c580:	sub	sp, sp, #88	; 0x58
   1c584:	ldr	r3, [r2, #16]
   1c588:	adds	r3, r3, r1
   1c58c:	bic	r1, r1, #3
   1c590:	str	r3, [r2, #16]
   1c594:	add	lr, r0, r1
   1c598:	ldr	r3, [r2, #20]
   1c59c:	adc	r3, r3, #0
   1c5a0:	cmp	lr, r0
   1c5a4:	str	r3, [r2, #20]
   1c5a8:	ldm	r2, {r3, r4, ip}
   1c5ac:	ldr	r1, [r2, #12]
   1c5b0:	str	r2, [sp]
   1c5b4:	bls	1cfc8 <__assert_fail@plt+0xac90>
   1c5b8:	mov	sl, r0
   1c5bc:	str	lr, [sp, #4]
   1c5c0:	eor	r2, ip, r1
   1c5c4:	ldr	r0, [sl]
   1c5c8:	str	r3, [sp, #24]
   1c5cc:	mov	r6, r4
   1c5d0:	str	r1, [sp, #28]
   1c5d4:	str	ip, [fp, #-40]	; 0xffffffd8
   1c5d8:	ldr	r5, [sl, #8]
   1c5dc:	ldr	lr, [sl, #12]
   1c5e0:	ldr	r8, [sl, #36]	; 0x24
   1c5e4:	and	r2, r4, r2
   1c5e8:	ldr	r4, [sl, #4]
   1c5ec:	eor	r7, r6, ip
   1c5f0:	eor	r2, r2, r1
   1c5f4:	add	r2, r3, r2
   1c5f8:	movw	r3, #42104	; 0xa478
   1c5fc:	add	r2, r2, r0
   1c600:	movt	r3, #55146	; 0xd76a
   1c604:	str	r5, [fp, #-36]	; 0xffffffdc
   1c608:	str	r0, [fp, #-44]	; 0xffffffd4
   1c60c:	ldr	r0, [sl, #16]
   1c610:	str	lr, [fp, #-52]	; 0xffffffcc
   1c614:	str	r8, [fp, #-56]	; 0xffffffc8
   1c618:	add	r2, r2, r3
   1c61c:	mov	r3, r6
   1c620:	str	r4, [fp, #-32]	; 0xffffffe0
   1c624:	add	r2, r6, r2, ror #25
   1c628:	add	r6, r1, r4
   1c62c:	movw	r1, #46934	; 0xb756
   1c630:	str	r3, [sp, #20]
   1c634:	and	r7, r2, r7
   1c638:	movt	r1, #59591	; 0xe8c7
   1c63c:	eor	r7, r7, ip
   1c640:	str	r0, [sp, #44]	; 0x2c
   1c644:	ldr	ip, [sl, #24]
   1c648:	add	r7, r6, r7
   1c64c:	eor	r6, r2, r3
   1c650:	add	r7, r7, r1
   1c654:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1c658:	add	r7, r2, r7, ror #20
   1c65c:	and	r6, r7, r6
   1c660:	str	ip, [sp, #48]	; 0x30
   1c664:	eor	r6, r6, r3
   1c668:	add	r4, r1, r5
   1c66c:	movw	r1, #28891	; 0x70db
   1c670:	add	r5, r3, lr
   1c674:	add	r6, r4, r6
   1c678:	movt	r1, #9248	; 0x2420
   1c67c:	add	r6, r6, r1
   1c680:	movw	r1, #52974	; 0xceee
   1c684:	add	r4, r7, r6, ror #15
   1c688:	eor	r6, r7, r2
   1c68c:	movt	r1, #49597	; 0xc1bd
   1c690:	and	r6, r4, r6
   1c694:	eor	r6, r6, r2
   1c698:	add	r2, r0, r2
   1c69c:	ldr	r0, [sl, #20]
   1c6a0:	add	r6, r5, r6
   1c6a4:	add	r6, r6, r1
   1c6a8:	movw	r1, #4015	; 0xfaf
   1c6ac:	add	r5, r4, r6, ror #10
   1c6b0:	eor	r6, r4, r7
   1c6b4:	movt	r1, #62844	; 0xf57c
   1c6b8:	and	r6, r5, r6
   1c6bc:	str	r0, [sp, #32]
   1c6c0:	eor	r6, r6, r7
   1c6c4:	add	r7, r0, r7
   1c6c8:	ldr	r0, [sl, #28]
   1c6cc:	add	r2, r2, r6
   1c6d0:	movw	r6, #38145	; 0x9501
   1c6d4:	add	r2, r2, r1
   1c6d8:	movw	r1, #50730	; 0xc62a
   1c6dc:	movt	r6, #64838	; 0xfd46
   1c6e0:	add	r3, r5, r2, ror #25
   1c6e4:	eor	r2, r5, r4
   1c6e8:	movt	r1, #18311	; 0x4787
   1c6ec:	and	r2, r3, r2
   1c6f0:	str	r0, [sp, #16]
   1c6f4:	eor	r2, r2, r4
   1c6f8:	add	r4, ip, r4
   1c6fc:	add	r2, r7, r2
   1c700:	add	r2, r2, r1
   1c704:	movw	r1, #17939	; 0x4613
   1c708:	add	r7, r3, r2, ror #20
   1c70c:	eor	r2, r3, r5
   1c710:	movt	r1, #43056	; 0xa830
   1c714:	and	r2, r7, r2
   1c718:	eor	r2, r2, r5
   1c71c:	add	r5, r0, r5
   1c720:	ldr	r0, [sl, #32]
   1c724:	add	r2, r4, r2
   1c728:	add	r2, r2, r1
   1c72c:	add	r4, r7, r2, ror #15
   1c730:	eor	r2, r7, r3
   1c734:	and	r2, r4, r2
   1c738:	str	r0, [sp, #40]	; 0x28
   1c73c:	eor	r1, r2, r3
   1c740:	add	r3, r0, r3
   1c744:	ldr	r0, [sl, #40]	; 0x28
   1c748:	ldr	r2, [sl, #44]	; 0x2c
   1c74c:	add	r1, r5, r1
   1c750:	eor	r5, r4, r7
   1c754:	add	r1, r1, r6
   1c758:	movw	r6, #39128	; 0x98d8
   1c75c:	add	r1, r4, r1, ror #10
   1c760:	movt	r6, #27008	; 0x6980
   1c764:	and	r5, r1, r5
   1c768:	str	r2, [fp, #-48]	; 0xffffffd0
   1c76c:	str	r0, [sp, #52]	; 0x34
   1c770:	eor	lr, r5, r7
   1c774:	movw	r5, #63407	; 0xf7af
   1c778:	add	r7, r8, r7
   1c77c:	add	r3, r3, lr
   1c780:	movt	r5, #35652	; 0x8b44
   1c784:	add	r3, r3, r6
   1c788:	add	lr, r1, r3, ror #25
   1c78c:	eor	r3, r1, r4
   1c790:	and	r3, lr, r3
   1c794:	eor	r3, r3, r4
   1c798:	add	r4, r0, r4
   1c79c:	add	r3, r7, r3
   1c7a0:	add	r3, r3, r5
   1c7a4:	add	r7, lr, r3, ror #20
   1c7a8:	eor	r3, lr, r1
   1c7ac:	and	r3, r7, r3
   1c7b0:	eor	r5, r7, lr
   1c7b4:	eor	r9, r3, r1
   1c7b8:	movw	r3, #42063	; 0xa44f
   1c7bc:	add	r1, r2, r1
   1c7c0:	add	r4, r4, r9
   1c7c4:	sub	r4, r4, r3
   1c7c8:	movw	r3, #55230	; 0xd7be
   1c7cc:	add	r4, r7, r4, ror #15
   1c7d0:	movt	r3, #35164	; 0x895c
   1c7d4:	and	r5, r4, r5
   1c7d8:	eor	r5, r5, lr
   1c7dc:	add	r1, r1, r5
   1c7e0:	add	r1, r1, r3
   1c7e4:	ldr	r3, [sl, #48]	; 0x30
   1c7e8:	add	r5, r4, r1, ror #10
   1c7ec:	eor	r1, r4, r7
   1c7f0:	and	r1, r5, r1
   1c7f4:	eor	r1, r1, r7
   1c7f8:	add	r6, r3, lr
   1c7fc:	str	r3, [sp, #56]	; 0x38
   1c800:	movw	r3, #4386	; 0x1122
   1c804:	add	r1, r6, r1
   1c808:	movt	r3, #27536	; 0x6b90
   1c80c:	add	r1, r1, r3
   1c810:	ldr	r3, [sl, #56]	; 0x38
   1c814:	add	r6, r5, r1, ror #25
   1c818:	eor	r1, r5, r4
   1c81c:	and	r1, r6, r1
   1c820:	eor	lr, r1, r4
   1c824:	ldr	r1, [sl, #52]	; 0x34
   1c828:	add	r4, r3, r4
   1c82c:	mov	r9, r3
   1c830:	str	r3, [sp, #8]
   1c834:	movw	r3, #17294	; 0x438e
   1c838:	movt	r3, #42617	; 0xa679
   1c83c:	add	r7, r1, r7
   1c840:	str	r1, [sp, #36]	; 0x24
   1c844:	movw	r1, #29075	; 0x7193
   1c848:	add	r7, r7, lr
   1c84c:	movt	r1, #64920	; 0xfd98
   1c850:	add	r7, r7, r1
   1c854:	eor	r1, r6, r5
   1c858:	add	r7, r6, r7, ror #20
   1c85c:	and	r1, r7, r1
   1c860:	eor	r1, r1, r5
   1c864:	add	r1, r4, r1
   1c868:	eor	r4, r7, r6
   1c86c:	add	r1, r1, r3
   1c870:	ldr	r3, [sl, #60]	; 0x3c
   1c874:	add	sl, sl, #64	; 0x40
   1c878:	add	r1, r7, r1, ror #15
   1c87c:	and	r4, r1, r4
   1c880:	eor	r4, r4, r6
   1c884:	add	r5, r3, r5
   1c888:	mov	lr, r3
   1c88c:	str	r3, [sp, #12]
   1c890:	movw	r3, #2081	; 0x821
   1c894:	add	r4, r5, r4
   1c898:	movt	r3, #18868	; 0x49b4
   1c89c:	add	r4, r4, r3
   1c8a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c8a4:	add	r4, r1, r4, ror #10
   1c8a8:	eor	r5, r4, r1
   1c8ac:	and	r5, r5, r7
   1c8b0:	add	r7, ip, r7
   1c8b4:	ldr	ip, [sp, #32]
   1c8b8:	add	r6, r3, r6
   1c8bc:	eor	r5, r5, r1
   1c8c0:	movw	r3, #9570	; 0x2562
   1c8c4:	add	r5, r6, r5
   1c8c8:	movt	r3, #63006	; 0xf61e
   1c8cc:	add	r5, r5, r3
   1c8d0:	movw	r3, #45888	; 0xb340
   1c8d4:	add	r5, r4, r5, ror #27
   1c8d8:	movt	r3, #49216	; 0xc040
   1c8dc:	eor	r6, r5, r4
   1c8e0:	and	r6, r6, r1
   1c8e4:	add	r1, r2, r1
   1c8e8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c8ec:	eor	r6, r6, r4
   1c8f0:	add	r6, r7, r6
   1c8f4:	add	r6, r6, r3
   1c8f8:	movw	r3, #23121	; 0x5a51
   1c8fc:	add	r6, r5, r6, ror #23
   1c900:	movt	r3, #9822	; 0x265e
   1c904:	eor	r7, r6, r5
   1c908:	and	r7, r7, r4
   1c90c:	add	r4, r2, r4
   1c910:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1c914:	eor	r7, r7, r5
   1c918:	add	r1, r1, r7
   1c91c:	add	r1, r1, r3
   1c920:	movw	r3, #51114	; 0xc7aa
   1c924:	add	r1, r6, r1, ror #18
   1c928:	movt	r3, #59830	; 0xe9b6
   1c92c:	eor	r7, r1, r6
   1c930:	and	r7, r7, r5
   1c934:	add	r5, ip, r5
   1c938:	eor	r7, r7, r6
   1c93c:	add	r4, r4, r7
   1c940:	add	r4, r4, r3
   1c944:	movw	r3, #4189	; 0x105d
   1c948:	add	r4, r1, r4, ror #12
   1c94c:	movt	r3, #54831	; 0xd62f
   1c950:	eor	r7, r4, r1
   1c954:	and	r7, r7, r6
   1c958:	add	r6, r0, r6
   1c95c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c960:	eor	r7, r7, r1
   1c964:	add	r5, r5, r7
   1c968:	add	r5, r5, r3
   1c96c:	movw	r3, #5203	; 0x1453
   1c970:	add	r5, r4, r5, ror #27
   1c974:	movt	r3, #580	; 0x244
   1c978:	eor	r7, r5, r4
   1c97c:	and	r7, r7, r1
   1c980:	add	r1, lr, r1
   1c984:	ldr	lr, [sp, #44]	; 0x2c
   1c988:	eor	r7, r7, r4
   1c98c:	add	r6, r6, r7
   1c990:	add	r6, r6, r3
   1c994:	movw	r3, #59009	; 0xe681
   1c998:	add	r6, r5, r6, ror #23
   1c99c:	movt	r3, #55457	; 0xd8a1
   1c9a0:	eor	r7, r6, r5
   1c9a4:	and	r7, r7, r4
   1c9a8:	add	r4, lr, r4
   1c9ac:	eor	r7, r7, r5
   1c9b0:	add	r1, r1, r7
   1c9b4:	add	r1, r1, r3
   1c9b8:	movw	r3, #64456	; 0xfbc8
   1c9bc:	add	r1, r6, r1, ror #18
   1c9c0:	movt	r3, #59347	; 0xe7d3
   1c9c4:	eor	r7, r1, r6
   1c9c8:	and	r7, r7, r5
   1c9cc:	add	r5, r8, r5
   1c9d0:	ldr	r8, [sp, #36]	; 0x24
   1c9d4:	eor	r7, r7, r6
   1c9d8:	add	r4, r4, r7
   1c9dc:	add	r4, r4, r3
   1c9e0:	movw	r3, #52710	; 0xcde6
   1c9e4:	add	r4, r1, r4, ror #12
   1c9e8:	movt	r3, #8673	; 0x21e1
   1c9ec:	eor	r7, r4, r1
   1c9f0:	and	r7, r7, r6
   1c9f4:	add	r6, r9, r6
   1c9f8:	ldr	r9, [sp, #56]	; 0x38
   1c9fc:	eor	r7, r7, r1
   1ca00:	add	r5, r5, r7
   1ca04:	add	r5, r5, r3
   1ca08:	movw	r3, #2006	; 0x7d6
   1ca0c:	add	r5, r4, r5, ror #27
   1ca10:	movt	r3, #49975	; 0xc337
   1ca14:	eor	r7, r5, r4
   1ca18:	and	r7, r7, r1
   1ca1c:	add	r1, r0, r1
   1ca20:	ldr	r0, [sp, #40]	; 0x28
   1ca24:	eor	r7, r7, r4
   1ca28:	add	r6, r6, r7
   1ca2c:	add	r6, r6, r3
   1ca30:	movw	r3, #3463	; 0xd87
   1ca34:	add	r6, r5, r6, ror #23
   1ca38:	movt	r3, #62677	; 0xf4d5
   1ca3c:	eor	r7, r6, r5
   1ca40:	and	r7, r7, r4
   1ca44:	add	r4, r0, r4
   1ca48:	eor	r7, r7, r5
   1ca4c:	add	r1, r1, r7
   1ca50:	add	r1, r1, r3
   1ca54:	movw	r3, #5357	; 0x14ed
   1ca58:	add	r1, r6, r1, ror #18
   1ca5c:	movt	r3, #17754	; 0x455a
   1ca60:	eor	r7, r1, r6
   1ca64:	and	r7, r7, r5
   1ca68:	add	r5, r8, r5
   1ca6c:	eor	r7, r7, r6
   1ca70:	add	r4, r4, r7
   1ca74:	add	r4, r4, r3
   1ca78:	movw	r3, #59653	; 0xe905
   1ca7c:	add	r4, r1, r4, ror #12
   1ca80:	movt	r3, #43491	; 0xa9e3
   1ca84:	eor	r7, r4, r1
   1ca88:	and	r7, r7, r6
   1ca8c:	add	r6, r2, r6
   1ca90:	ldr	r2, [sp, #16]
   1ca94:	eor	r7, r7, r1
   1ca98:	add	r5, r5, r7
   1ca9c:	add	r5, r5, r3
   1caa0:	movw	r3, #41976	; 0xa3f8
   1caa4:	add	r5, r4, r5, ror #27
   1caa8:	movt	r3, #64751	; 0xfcef
   1caac:	eor	r7, r5, r4
   1cab0:	and	r7, r7, r1
   1cab4:	add	r1, r2, r1
   1cab8:	eor	r7, r7, r4
   1cabc:	add	r6, r6, r7
   1cac0:	add	r6, r6, r3
   1cac4:	movw	r3, #729	; 0x2d9
   1cac8:	add	r6, r5, r6, ror #23
   1cacc:	movt	r3, #26479	; 0x676f
   1cad0:	eor	r7, r6, r5
   1cad4:	and	r7, r7, r4
   1cad8:	add	r4, r9, r4
   1cadc:	ldr	r9, [fp, #-52]	; 0xffffffcc
   1cae0:	eor	r7, r7, r5
   1cae4:	add	r1, r1, r7
   1cae8:	add	r1, r1, r3
   1caec:	add	r1, r6, r1, ror #18
   1caf0:	eor	r7, r1, r6
   1caf4:	and	r3, r7, r5
   1caf8:	add	r5, ip, r5
   1cafc:	ldr	ip, [sp, #8]
   1cb00:	eor	r3, r3, r6
   1cb04:	add	r6, r0, r6
   1cb08:	ldr	r0, [sp, #48]	; 0x30
   1cb0c:	add	r3, r4, r3
   1cb10:	movw	r4, #19594	; 0x4c8a
   1cb14:	movt	r4, #36138	; 0x8d2a
   1cb18:	add	r3, r3, r4
   1cb1c:	add	r3, r1, r3, ror #12
   1cb20:	eor	r4, r7, r3
   1cb24:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1cb28:	add	r4, r5, r4
   1cb2c:	movw	r5, #14658	; 0x3942
   1cb30:	movt	r5, #65530	; 0xfffa
   1cb34:	add	r4, r4, r5
   1cb38:	eor	r5, r3, r1
   1cb3c:	add	r4, r3, r4, ror #28
   1cb40:	add	r1, r7, r1
   1cb44:	ldr	r7, [fp, #-32]	; 0xffffffe0
   1cb48:	eor	r5, r5, r4
   1cb4c:	add	r5, r6, r5
   1cb50:	movw	r6, #63105	; 0xf681
   1cb54:	movt	r6, #34673	; 0x8771
   1cb58:	add	r5, r5, r6
   1cb5c:	eor	r6, r4, r3
   1cb60:	add	r3, ip, r3
   1cb64:	add	r5, r4, r5, ror #21
   1cb68:	eor	r6, r6, r5
   1cb6c:	add	r1, r1, r6
   1cb70:	movw	r6, #24866	; 0x6122
   1cb74:	movt	r6, #28061	; 0x6d9d
   1cb78:	add	r1, r1, r6
   1cb7c:	eor	r6, r5, r4
   1cb80:	add	r4, r7, r4
   1cb84:	ldr	r7, [sp, #52]	; 0x34
   1cb88:	add	r1, r5, r1, ror #16
   1cb8c:	eor	r6, r6, r1
   1cb90:	add	r3, r3, r6
   1cb94:	movw	r6, #14348	; 0x380c
   1cb98:	movt	r6, #64997	; 0xfde5
   1cb9c:	add	r3, r3, r6
   1cba0:	eor	r6, r1, r5
   1cba4:	add	r5, lr, r5
   1cba8:	ldr	lr, [sp, #12]
   1cbac:	add	r3, r1, r3, ror #9
   1cbb0:	eor	r6, r6, r3
   1cbb4:	add	r4, r4, r6
   1cbb8:	movw	r6, #59972	; 0xea44
   1cbbc:	movt	r6, #42174	; 0xa4be
   1cbc0:	add	r4, r4, r6
   1cbc4:	eor	r6, r3, r1
   1cbc8:	add	r1, r2, r1
   1cbcc:	add	r4, r3, r4, ror #28
   1cbd0:	eor	r6, r6, r4
   1cbd4:	add	r5, r5, r6
   1cbd8:	movw	r6, #53161	; 0xcfa9
   1cbdc:	movt	r6, #19422	; 0x4bde
   1cbe0:	add	r5, r5, r6
   1cbe4:	eor	r6, r4, r3
   1cbe8:	add	r3, r7, r3
   1cbec:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1cbf0:	add	r5, r4, r5, ror #21
   1cbf4:	eor	r6, r6, r5
   1cbf8:	add	r1, r1, r6
   1cbfc:	movw	r6, #19296	; 0x4b60
   1cc00:	movt	r6, #63163	; 0xf6bb
   1cc04:	add	r1, r1, r6
   1cc08:	eor	r6, r5, r4
   1cc0c:	add	r4, r8, r4
   1cc10:	ldr	r8, [fp, #-44]	; 0xffffffd4
   1cc14:	add	r1, r5, r1, ror #16
   1cc18:	eor	r6, r6, r1
   1cc1c:	add	r3, r3, r6
   1cc20:	movw	r6, #48240	; 0xbc70
   1cc24:	movt	r6, #48831	; 0xbebf
   1cc28:	add	r3, r3, r6
   1cc2c:	eor	r6, r1, r5
   1cc30:	add	r5, r8, r5
   1cc34:	add	r3, r1, r3, ror #9
   1cc38:	eor	r6, r6, r3
   1cc3c:	add	r4, r4, r6
   1cc40:	movw	r6, #32454	; 0x7ec6
   1cc44:	movt	r6, #10395	; 0x289b
   1cc48:	add	r4, r4, r6
   1cc4c:	eor	r6, r3, r1
   1cc50:	add	r1, r9, r1
   1cc54:	add	r4, r3, r4, ror #28
   1cc58:	eor	r6, r6, r4
   1cc5c:	add	r5, r5, r6
   1cc60:	movw	r6, #10234	; 0x27fa
   1cc64:	movt	r6, #60065	; 0xeaa1
   1cc68:	add	r5, r5, r6
   1cc6c:	eor	r6, r4, r3
   1cc70:	add	r3, r0, r3
   1cc74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cc78:	add	r5, r4, r5, ror #21
   1cc7c:	eor	r6, r6, r5
   1cc80:	add	r1, r1, r6
   1cc84:	movw	r6, #12421	; 0x3085
   1cc88:	movt	r6, #54511	; 0xd4ef
   1cc8c:	add	r1, r1, r6
   1cc90:	eor	r6, r5, r4
   1cc94:	add	r4, r0, r4
   1cc98:	ldr	r0, [sp, #56]	; 0x38
   1cc9c:	add	r1, r5, r1, ror #16
   1cca0:	eor	r6, r6, r1
   1cca4:	add	r3, r3, r6
   1cca8:	movw	r6, #7429	; 0x1d05
   1ccac:	movt	r6, #1160	; 0x488
   1ccb0:	add	r3, r3, r6
   1ccb4:	eor	r6, r1, r5
   1ccb8:	add	r5, r0, r5
   1ccbc:	add	r3, r1, r3, ror #9
   1ccc0:	eor	r6, r6, r3
   1ccc4:	add	r4, r4, r6
   1ccc8:	movw	r6, #53305	; 0xd039
   1cccc:	movt	r6, #55764	; 0xd9d4
   1ccd0:	add	r4, r4, r6
   1ccd4:	eor	r6, r3, r1
   1ccd8:	add	r1, lr, r1
   1ccdc:	add	r4, r3, r4, ror #28
   1cce0:	eor	r6, r6, r4
   1cce4:	add	r5, r5, r6
   1cce8:	movw	r6, #39397	; 0x99e5
   1ccec:	movt	r6, #59099	; 0xe6db
   1ccf0:	add	r5, r5, r6
   1ccf4:	eor	r6, r4, r3
   1ccf8:	add	r3, r7, r3
   1ccfc:	ldr	r7, [sp, #32]
   1cd00:	add	r5, r4, r5, ror #21
   1cd04:	eor	r6, r6, r5
   1cd08:	add	r2, r2, r5
   1cd0c:	add	r1, r1, r6
   1cd10:	movw	r6, #31992	; 0x7cf8
   1cd14:	movt	r6, #8098	; 0x1fa2
   1cd18:	add	r1, r1, r6
   1cd1c:	eor	r6, r5, r4
   1cd20:	add	r4, r8, r4
   1cd24:	add	r1, r5, r1, ror #16
   1cd28:	eor	r6, r6, r1
   1cd2c:	add	r3, r3, r6
   1cd30:	movw	r6, #22117	; 0x5665
   1cd34:	movt	r6, #50348	; 0xc4ac
   1cd38:	add	r3, r3, r6
   1cd3c:	mvn	r6, r5
   1cd40:	movw	r5, #65431	; 0xff97
   1cd44:	add	r3, r1, r3, ror #9
   1cd48:	movt	r5, #17194	; 0x432a
   1cd4c:	orr	r6, r3, r6
   1cd50:	eor	r6, r6, r1
   1cd54:	add	r4, r4, r6
   1cd58:	movw	r6, #8772	; 0x2244
   1cd5c:	movt	r6, #62505	; 0xf429
   1cd60:	add	r4, r4, r6
   1cd64:	mvn	r6, r1
   1cd68:	add	r1, ip, r1
   1cd6c:	ldr	ip, [fp, #-40]	; 0xffffffd8
   1cd70:	add	r4, r3, r4, ror #26
   1cd74:	orr	r6, r4, r6
   1cd78:	eor	r6, r6, r3
   1cd7c:	add	r2, r2, r6
   1cd80:	add	r2, r2, r5
   1cd84:	mvn	r5, r3
   1cd88:	add	r3, r7, r3
   1cd8c:	add	r2, r4, r2, ror #22
   1cd90:	orr	r5, r2, r5
   1cd94:	eor	r5, r5, r4
   1cd98:	add	r1, r1, r5
   1cd9c:	movw	r5, #9127	; 0x23a7
   1cda0:	movt	r5, #43924	; 0xab94
   1cda4:	add	r1, r1, r5
   1cda8:	mvn	r5, r4
   1cdac:	add	r4, r0, r4
   1cdb0:	ldr	r0, [sp, #52]	; 0x34
   1cdb4:	add	r1, r2, r1, ror #17
   1cdb8:	orr	r5, r1, r5
   1cdbc:	eor	r5, r5, r2
   1cdc0:	add	r3, r3, r5
   1cdc4:	movw	r5, #41017	; 0xa039
   1cdc8:	movt	r5, #64659	; 0xfc93
   1cdcc:	add	r3, r3, r5
   1cdd0:	mvn	r5, r2
   1cdd4:	add	r2, r9, r2
   1cdd8:	add	r3, r1, r3, ror #11
   1cddc:	orr	r5, r3, r5
   1cde0:	eor	r5, r5, r1
   1cde4:	add	r4, r4, r5
   1cde8:	movw	r5, #22979	; 0x59c3
   1cdec:	movt	r5, #25947	; 0x655b
   1cdf0:	add	r4, r4, r5
   1cdf4:	mvn	r5, r1
   1cdf8:	add	r1, r0, r1
   1cdfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ce00:	add	r4, r3, r4, ror #26
   1ce04:	orr	r5, r4, r5
   1ce08:	eor	r5, r5, r3
   1ce0c:	add	r2, r2, r5
   1ce10:	movw	r5, #52370	; 0xcc92
   1ce14:	movt	r5, #36620	; 0x8f0c
   1ce18:	add	r2, r2, r5
   1ce1c:	mvn	r5, r3
   1ce20:	add	r3, r0, r3
   1ce24:	ldr	r0, [sp, #40]	; 0x28
   1ce28:	add	r2, r4, r2, ror #22
   1ce2c:	orr	r5, r2, r5
   1ce30:	eor	r5, r5, r4
   1ce34:	add	r1, r1, r5
   1ce38:	movw	r5, #62589	; 0xf47d
   1ce3c:	movt	r5, #65519	; 0xffef
   1ce40:	add	r1, r1, r5
   1ce44:	mvn	r5, r4
   1ce48:	add	r4, r0, r4
   1ce4c:	ldr	r0, [sp, #48]	; 0x30
   1ce50:	add	r1, r2, r1, ror #17
   1ce54:	orr	r5, r1, r5
   1ce58:	eor	r5, r5, r2
   1ce5c:	add	r3, r3, r5
   1ce60:	movw	r5, #24017	; 0x5dd1
   1ce64:	movt	r5, #34180	; 0x8584
   1ce68:	add	r3, r3, r5
   1ce6c:	mvn	r5, r2
   1ce70:	add	r2, lr, r2
   1ce74:	ldr	lr, [sp, #4]
   1ce78:	add	r3, r1, r3, ror #11
   1ce7c:	orr	r5, r3, r5
   1ce80:	mvn	r7, r3
   1ce84:	eor	r5, r5, r1
   1ce88:	add	r4, r4, r5
   1ce8c:	movw	r5, #32335	; 0x7e4f
   1ce90:	cmp	sl, lr
   1ce94:	movt	r5, #28584	; 0x6fa8
   1ce98:	add	r4, r4, r5
   1ce9c:	mvn	r5, r1
   1cea0:	add	r1, r0, r1
   1cea4:	ldr	r0, [sp, #36]	; 0x24
   1cea8:	add	r4, r3, r4, ror #26
   1ceac:	orr	r5, r4, r5
   1ceb0:	eor	r5, r5, r3
   1ceb4:	add	r2, r2, r5
   1ceb8:	movw	r5, #59104	; 0xe6e0
   1cebc:	add	r3, r0, r3
   1cec0:	ldr	r0, [sp, #44]	; 0x2c
   1cec4:	movt	r5, #65068	; 0xfe2c
   1cec8:	add	r2, r2, r5
   1cecc:	movw	r5, #17172	; 0x4314
   1ced0:	add	r2, r4, r2, ror #22
   1ced4:	movt	r5, #41729	; 0xa301
   1ced8:	orr	r7, r2, r7
   1cedc:	add	r6, r0, r4
   1cee0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1cee4:	eor	r7, r7, r4
   1cee8:	add	r1, r1, r7
   1ceec:	mvn	r7, r4
   1cef0:	movw	r4, #32386	; 0x7e82
   1cef4:	add	r1, r1, r5
   1cef8:	movw	r5, #4513	; 0x11a1
   1cefc:	movt	r4, #63315	; 0xf753
   1cf00:	add	r1, r2, r1, ror #17
   1cf04:	movt	r5, #19976	; 0x4e08
   1cf08:	orr	r7, r1, r7
   1cf0c:	eor	r7, r7, r2
   1cf10:	add	r3, r3, r7
   1cf14:	mvn	r7, r2
   1cf18:	add	r2, r0, r2
   1cf1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cf20:	add	r3, r3, r5
   1cf24:	add	r3, r1, r3, ror #11
   1cf28:	orr	r7, r3, r7
   1cf2c:	eor	r7, r7, r1
   1cf30:	add	r7, r6, r7
   1cf34:	mvn	r6, r1
   1cf38:	add	r1, r0, r1
   1cf3c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1cf40:	add	r7, r7, r4
   1cf44:	movw	r4, #62005	; 0xf235
   1cf48:	add	r7, r3, r7, ror #26
   1cf4c:	movt	r4, #48442	; 0xbd3a
   1cf50:	orr	r6, r7, r6
   1cf54:	mvn	r5, r7
   1cf58:	eor	r6, r6, r3
   1cf5c:	add	r2, r2, r6
   1cf60:	mvn	r6, r3
   1cf64:	add	r3, r0, r3
   1cf68:	add	r2, r2, r4
   1cf6c:	movw	r4, #53947	; 0xd2bb
   1cf70:	add	r2, r7, r2, ror #22
   1cf74:	movt	r4, #10967	; 0x2ad7
   1cf78:	orr	r6, r2, r6
   1cf7c:	eor	r6, r6, r7
   1cf80:	add	r1, r1, r6
   1cf84:	add	r1, r1, r4
   1cf88:	ldr	r4, [sp, #20]
   1cf8c:	add	r1, r2, r1, ror #17
   1cf90:	orr	r5, r1, r5
   1cf94:	add	ip, r1, ip
   1cf98:	eor	r5, r5, r2
   1cf9c:	add	r6, r1, r4
   1cfa0:	movw	r4, #54161	; 0xd391
   1cfa4:	add	r3, r3, r5
   1cfa8:	ldr	r1, [sp, #28]
   1cfac:	movt	r4, #60294	; 0xeb86
   1cfb0:	add	r3, r3, r4
   1cfb4:	add	r4, r6, r3, ror #11
   1cfb8:	ldr	r3, [sp, #24]
   1cfbc:	add	r1, r2, r1
   1cfc0:	add	r3, r7, r3
   1cfc4:	bcc	1c5c0 <__assert_fail@plt+0xa288>
   1cfc8:	ldr	r0, [sp]
   1cfcc:	stm	r0, {r3, r4, ip}
   1cfd0:	str	r1, [r0, #12]
   1cfd4:	sub	sp, fp, #28
   1cfd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfdc:	nop	{0}
   1cfe0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cfe4:	add	fp, sp, #24
   1cfe8:	sub	sp, sp, #160	; 0xa0
   1cfec:	mov	r8, r2
   1cff0:	add	r2, pc, #184	; 0xb8
   1cff4:	add	r5, sp, #4
   1cff8:	vld1.64	{d16-d17}, [r2 :128]
   1cffc:	mov	r2, #20
   1d000:	mov	r3, r5
   1d004:	vst1.32	{d16-d17}, [r3], r2
   1d008:	mov	r2, #0
   1d00c:	str	r2, [r3]
   1d010:	str	r2, [sp, #20]
   1d014:	str	r2, [sp, #28]
   1d018:	mov	r2, r5
   1d01c:	bl	1d0c0 <__assert_fail@plt+0xad88>
   1d020:	ldr	r1, [sp, #28]
   1d024:	ldr	r2, [sp, #20]
   1d028:	mov	r7, #32
   1d02c:	add	r6, r5, #28
   1d030:	add	r0, r2, r1
   1d034:	cmp	r1, #56	; 0x38
   1d038:	movwcc	r7, #16
   1d03c:	str	r0, [sp, #20]
   1d040:	cmp	r0, r2
   1d044:	lsl	r3, r0, #3
   1d048:	ldrcc	r2, [sp, #24]
   1d04c:	addcc	r2, r2, #1
   1d050:	strcc	r2, [sp, #24]
   1d054:	mvn	r2, #7
   1d058:	add	r2, r2, r7, lsl #2
   1d05c:	str	r3, [r6, r2]
   1d060:	add	r3, r6, r7, lsl #2
   1d064:	sub	r2, r2, r1
   1d068:	ldr	r4, [sp, #24]
   1d06c:	lsl	r4, r4, #3
   1d070:	orr	r0, r4, r0, lsr #29
   1d074:	str	r0, [r3, #-4]
   1d078:	add	r0, r6, r1
   1d07c:	movw	r1, #32664	; 0x7f98
   1d080:	movt	r1, #2
   1d084:	bl	11ec4 <memcpy@plt>
   1d088:	lsl	r1, r7, #2
   1d08c:	mov	r0, r6
   1d090:	mov	r2, r5
   1d094:	bl	1c578 <__assert_fail@plt+0xa240>
   1d098:	vld1.32	{d16-d17}, [r5]
   1d09c:	mov	r0, r8
   1d0a0:	vst1.8	{d16-d17}, [r8]
   1d0a4:	sub	sp, fp, #24
   1d0a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d0ac:	nop	{0}
   1d0b0:	strbvs	r2, [r5, -r1, lsl #6]
   1d0b4:	svc	0x00cdab89
   1d0b8:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1d0bc:	eorsne	r5, r2, r6, ror r4
   1d0c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0c4:	add	fp, sp, #28
   1d0c8:	sub	sp, sp, #20
   1d0cc:	ldr	r6, [r2, #24]
   1d0d0:	mov	r4, r2
   1d0d4:	mov	r5, r1
   1d0d8:	mov	r8, r0
   1d0dc:	cmp	r6, #0
   1d0e0:	beq	1d150 <__assert_fail@plt+0xae18>
   1d0e4:	rsb	r7, r6, #128	; 0x80
   1d0e8:	add	r9, r4, #28
   1d0ec:	mov	r1, r8
   1d0f0:	cmp	r7, r5
   1d0f4:	add	r0, r9, r6
   1d0f8:	movhi	r7, r5
   1d0fc:	mov	r2, r7
   1d100:	bl	11ec4 <memcpy@plt>
   1d104:	ldr	r0, [r4, #24]
   1d108:	add	r0, r0, r7
   1d10c:	cmp	r0, #65	; 0x41
   1d110:	str	r0, [r4, #24]
   1d114:	bcc	1d148 <__assert_fail@plt+0xae10>
   1d118:	bic	r1, r0, #63	; 0x3f
   1d11c:	mov	r0, r9
   1d120:	mov	r2, r4
   1d124:	bl	1c578 <__assert_fail@plt+0xa240>
   1d128:	ldr	r0, [r4, #24]
   1d12c:	and	r2, r0, #63	; 0x3f
   1d130:	add	r0, r7, r6
   1d134:	bic	r0, r0, #63	; 0x3f
   1d138:	str	r2, [r4, #24]
   1d13c:	add	r1, r9, r0
   1d140:	mov	r0, r9
   1d144:	bl	11ec4 <memcpy@plt>
   1d148:	sub	r5, r5, r7
   1d14c:	add	r8, r8, r7
   1d150:	cmp	r5, #64	; 0x40
   1d154:	bcc	1d22c <__assert_fail@plt+0xaef4>
   1d158:	tst	r8, #3
   1d15c:	beq	1d210 <__assert_fail@plt+0xaed8>
   1d160:	cmp	r5, #65	; 0x41
   1d164:	bcc	1d23c <__assert_fail@plt+0xaf04>
   1d168:	sub	r0, r5, #64	; 0x40
   1d16c:	add	r7, r4, #28
   1d170:	mov	sl, #48	; 0x30
   1d174:	str	r0, [sp, #12]
   1d178:	sub	r0, r5, #65	; 0x41
   1d17c:	add	r6, r7, #32
   1d180:	bic	r0, r0, #63	; 0x3f
   1d184:	str	r0, [sp, #8]
   1d188:	add	r0, r0, #64	; 0x40
   1d18c:	str	r0, [sp, #4]
   1d190:	mov	r0, r8
   1d194:	add	r8, r7, #16
   1d198:	mov	r9, r0
   1d19c:	str	r0, [sp, #16]
   1d1a0:	mov	r1, #64	; 0x40
   1d1a4:	add	r2, r0, #48	; 0x30
   1d1a8:	vld1.8	{d16-d17}, [r9], r1
   1d1ac:	add	r1, r0, #32
   1d1b0:	vld1.8	{d18-d19}, [r2]
   1d1b4:	add	r0, r0, #16
   1d1b8:	mov	r2, r4
   1d1bc:	vld1.8	{d20-d21}, [r1]
   1d1c0:	mov	r1, r7
   1d1c4:	vst1.8	{d16-d17}, [r1], sl
   1d1c8:	vld1.8	{d16-d17}, [r0]
   1d1cc:	vst1.8	{d18-d19}, [r1]
   1d1d0:	mov	r0, r7
   1d1d4:	mov	r1, #64	; 0x40
   1d1d8:	vst1.8	{d20-d21}, [r6]
   1d1dc:	vst1.8	{d16-d17}, [r8]
   1d1e0:	bl	1c578 <__assert_fail@plt+0xa240>
   1d1e4:	sub	r5, r5, #64	; 0x40
   1d1e8:	mov	r0, r9
   1d1ec:	cmp	r5, #64	; 0x40
   1d1f0:	bhi	1d1a0 <__assert_fail@plt+0xae68>
   1d1f4:	ldr	r0, [sp, #12]
   1d1f8:	ldr	r1, [sp, #8]
   1d1fc:	ldr	r8, [sp, #16]
   1d200:	sub	r5, r0, r1
   1d204:	ldr	r0, [sp, #4]
   1d208:	add	r8, r8, r0
   1d20c:	b	1d240 <__assert_fail@plt+0xaf08>
   1d210:	bic	r6, r5, #63	; 0x3f
   1d214:	mov	r0, r8
   1d218:	mov	r2, r4
   1d21c:	mov	r1, r6
   1d220:	bl	1c578 <__assert_fail@plt+0xa240>
   1d224:	add	r8, r8, r6
   1d228:	and	r5, r5, #63	; 0x3f
   1d22c:	cmp	r5, #0
   1d230:	bne	1d240 <__assert_fail@plt+0xaf08>
   1d234:	sub	sp, fp, #28
   1d238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d23c:	mov	r5, #64	; 0x40
   1d240:	ldr	r7, [r4, #24]
   1d244:	add	r6, r4, #28
   1d248:	mov	r1, r8
   1d24c:	mov	r2, r5
   1d250:	add	r0, r6, r7
   1d254:	bl	11ec4 <memcpy@plt>
   1d258:	add	r5, r7, r5
   1d25c:	cmp	r5, #64	; 0x40
   1d260:	bcc	1d288 <__assert_fail@plt+0xaf50>
   1d264:	mov	r0, r6
   1d268:	mov	r1, #64	; 0x40
   1d26c:	mov	r2, r4
   1d270:	bl	1c578 <__assert_fail@plt+0xa240>
   1d274:	sub	r5, r5, #64	; 0x40
   1d278:	add	r1, r4, #92	; 0x5c
   1d27c:	mov	r0, r6
   1d280:	mov	r2, r5
   1d284:	bl	11ec4 <memcpy@plt>
   1d288:	str	r5, [r4, #24]
   1d28c:	sub	sp, fp, #28
   1d290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d294:	b	11e40 <posix_fadvise64@plt>
   1d298:	cmp	r0, #0
   1d29c:	bxeq	lr
   1d2a0:	push	{r4, sl, fp, lr}
   1d2a4:	add	fp, sp, #8
   1d2a8:	sub	sp, sp, #16
   1d2ac:	mov	r4, r1
   1d2b0:	bl	121b8 <fileno@plt>
   1d2b4:	mov	r1, #0
   1d2b8:	mov	r2, #0
   1d2bc:	mov	r3, #0
   1d2c0:	str	r1, [sp]
   1d2c4:	stmib	sp, {r1, r4}
   1d2c8:	bl	11e40 <posix_fadvise64@plt>
   1d2cc:	sub	sp, fp, #8
   1d2d0:	pop	{r4, sl, fp, pc}
   1d2d4:	push	{r4, r5, r6, sl, fp, lr}
   1d2d8:	add	fp, sp, #16
   1d2dc:	sub	sp, sp, #8
   1d2e0:	mov	r4, r0
   1d2e4:	bl	121b8 <fileno@plt>
   1d2e8:	cmn	r0, #1
   1d2ec:	ble	1d360 <__assert_fail@plt+0xb028>
   1d2f0:	mov	r0, r4
   1d2f4:	bl	120ec <__freading@plt>
   1d2f8:	cmp	r0, #0
   1d2fc:	beq	1d328 <__assert_fail@plt+0xaff0>
   1d300:	mov	r0, r4
   1d304:	bl	121b8 <fileno@plt>
   1d308:	mov	r1, #1
   1d30c:	mov	r2, #0
   1d310:	mov	r3, #0
   1d314:	str	r1, [sp]
   1d318:	bl	12020 <lseek64@plt>
   1d31c:	and	r0, r0, r1
   1d320:	cmn	r0, #1
   1d324:	beq	1d360 <__assert_fail@plt+0xb028>
   1d328:	mov	r0, r4
   1d32c:	bl	1d370 <__assert_fail@plt+0xb038>
   1d330:	cmp	r0, #0
   1d334:	beq	1d360 <__assert_fail@plt+0xb028>
   1d338:	bl	12164 <__errno_location@plt>
   1d33c:	ldr	r6, [r0]
   1d340:	mov	r5, r0
   1d344:	mov	r0, r4
   1d348:	bl	121dc <fclose@plt>
   1d34c:	cmp	r6, #0
   1d350:	strne	r6, [r5]
   1d354:	mvnne	r0, #0
   1d358:	sub	sp, fp, #16
   1d35c:	pop	{r4, r5, r6, sl, fp, pc}
   1d360:	mov	r0, r4
   1d364:	sub	sp, fp, #16
   1d368:	pop	{r4, r5, r6, sl, fp, lr}
   1d36c:	b	121dc <fclose@plt>
   1d370:	push	{r4, sl, fp, lr}
   1d374:	add	fp, sp, #8
   1d378:	sub	sp, sp, #8
   1d37c:	mov	r4, r0
   1d380:	cmp	r0, #0
   1d384:	beq	1d3a0 <__assert_fail@plt+0xb068>
   1d388:	mov	r0, r4
   1d38c:	bl	120ec <__freading@plt>
   1d390:	cmp	r0, #0
   1d394:	ldrbne	r0, [r4, #1]
   1d398:	tstne	r0, #1
   1d39c:	bne	1d3b0 <__assert_fail@plt+0xb078>
   1d3a0:	mov	r0, r4
   1d3a4:	sub	sp, fp, #8
   1d3a8:	pop	{r4, sl, fp, lr}
   1d3ac:	b	11e64 <fflush@plt>
   1d3b0:	mov	r0, #1
   1d3b4:	mov	r2, #0
   1d3b8:	mov	r3, #0
   1d3bc:	str	r0, [sp]
   1d3c0:	mov	r0, r4
   1d3c4:	bl	1d8b4 <__assert_fail@plt+0xb57c>
   1d3c8:	mov	r0, r4
   1d3cc:	sub	sp, fp, #8
   1d3d0:	pop	{r4, sl, fp, lr}
   1d3d4:	b	11e64 <fflush@plt>
   1d3d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3dc:	add	fp, sp, #28
   1d3e0:	sub	sp, sp, #12
   1d3e4:	mov	r8, r1
   1d3e8:	mov	r9, r0
   1d3ec:	bl	11e28 <strcmp@plt>
   1d3f0:	cmp	r0, #0
   1d3f4:	moveq	r0, #0
   1d3f8:	subeq	sp, fp, #28
   1d3fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d400:	ldrb	r4, [r9]
   1d404:	cmp	r4, #0
   1d408:	beq	1d48c <__assert_fail@plt+0xb154>
   1d40c:	ldrb	r6, [r8]
   1d410:	cmp	r6, #0
   1d414:	beq	1d864 <__assert_fail@plt+0xb52c>
   1d418:	mov	sl, r0
   1d41c:	movw	r0, #32729	; 0x7fd9
   1d420:	mov	r1, r9
   1d424:	movt	r0, #2
   1d428:	bl	11e28 <strcmp@plt>
   1d42c:	cmp	r0, #0
   1d430:	beq	1d48c <__assert_fail@plt+0xb154>
   1d434:	movw	r0, #32729	; 0x7fd9
   1d438:	mov	r1, r8
   1d43c:	movt	r0, #2
   1d440:	bl	11e28 <strcmp@plt>
   1d444:	cmp	r0, #0
   1d448:	beq	1d864 <__assert_fail@plt+0xb52c>
   1d44c:	movw	r0, #32728	; 0x7fd8
   1d450:	mov	r1, r9
   1d454:	movt	r0, #2
   1d458:	bl	11e28 <strcmp@plt>
   1d45c:	cmp	r0, #0
   1d460:	beq	1d48c <__assert_fail@plt+0xb154>
   1d464:	movw	r0, #32728	; 0x7fd8
   1d468:	mov	r1, r8
   1d46c:	movt	r0, #2
   1d470:	bl	11e28 <strcmp@plt>
   1d474:	cmp	r0, #0
   1d478:	beq	1d864 <__assert_fail@plt+0xb52c>
   1d47c:	cmp	r4, #46	; 0x2e
   1d480:	bne	1d498 <__assert_fail@plt+0xb160>
   1d484:	cmp	r6, #46	; 0x2e
   1d488:	beq	1d498 <__assert_fail@plt+0xb160>
   1d48c:	mvn	r0, #0
   1d490:	sub	sp, fp, #28
   1d494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d498:	cmp	r4, #46	; 0x2e
   1d49c:	bne	1d4d8 <__assert_fail@plt+0xb1a0>
   1d4a0:	mov	r4, #46	; 0x2e
   1d4a4:	cmp	r6, #46	; 0x2e
   1d4a8:	bne	1d4e0 <__assert_fail@plt+0xb1a8>
   1d4ac:	ldrb	r4, [r9, #1]!
   1d4b0:	add	r8, r8, #1
   1d4b4:	cmp	r4, #0
   1d4b8:	bne	1d4e0 <__assert_fail@plt+0xb1a8>
   1d4bc:	mov	r7, #0
   1d4c0:	mov	r6, r9
   1d4c4:	ldrb	r0, [r8]
   1d4c8:	str	r7, [sp, #8]
   1d4cc:	cmp	r0, #0
   1d4d0:	bne	1d580 <__assert_fail@plt+0xb248>
   1d4d4:	b	1d614 <__assert_fail@plt+0xb2dc>
   1d4d8:	cmp	r6, #46	; 0x2e
   1d4dc:	beq	1d864 <__assert_fail@plt+0xb52c>
   1d4e0:	mov	r1, #0
   1d4e4:	mvn	r5, #64	; 0x40
   1d4e8:	mov	r6, r9
   1d4ec:	mov	r7, #0
   1d4f0:	tst	r1, #1
   1d4f4:	beq	1d51c <__assert_fail@plt+0xb1e4>
   1d4f8:	uxtab	r0, r5, r4
   1d4fc:	mov	r1, #0
   1d500:	cmp	r0, #26
   1d504:	bcc	1d564 <__assert_fail@plt+0xb22c>
   1d508:	uxtb	r0, r4
   1d50c:	sub	r2, r0, #97	; 0x61
   1d510:	cmp	r2, #26
   1d514:	bcc	1d564 <__assert_fail@plt+0xb22c>
   1d518:	b	1d558 <__assert_fail@plt+0xb220>
   1d51c:	uxtb	r0, r4
   1d520:	cmp	r0, #46	; 0x2e
   1d524:	bne	1d544 <__assert_fail@plt+0xb20c>
   1d528:	cmp	r7, #0
   1d52c:	mov	r1, #1
   1d530:	moveq	r7, r6
   1d534:	ldrb	r4, [r6, #1]!
   1d538:	cmp	r4, #0
   1d53c:	bne	1d4f0 <__assert_fail@plt+0xb1b8>
   1d540:	b	1d570 <__assert_fail@plt+0xb238>
   1d544:	bl	24b70 <__assert_fail@plt+0x12838>
   1d548:	mov	r1, #0
   1d54c:	cmp	r0, #0
   1d550:	bne	1d564 <__assert_fail@plt+0xb22c>
   1d554:	ldrb	r0, [r6]
   1d558:	mov	r1, #0
   1d55c:	cmp	r0, #126	; 0x7e
   1d560:	movne	r7, r1
   1d564:	ldrb	r4, [r6, #1]!
   1d568:	cmp	r4, #0
   1d56c:	bne	1d4f0 <__assert_fail@plt+0xb1b8>
   1d570:	ldrb	r0, [r8]
   1d574:	str	r7, [sp, #8]
   1d578:	cmp	r0, #0
   1d57c:	beq	1d614 <__assert_fail@plt+0xb2dc>
   1d580:	mov	r1, #0
   1d584:	mvn	r5, #64	; 0x40
   1d588:	mov	r4, r8
   1d58c:	mov	r7, #0
   1d590:	tst	r1, #1
   1d594:	beq	1d5bc <__assert_fail@plt+0xb284>
   1d598:	uxtab	r2, r5, r0
   1d59c:	mov	r1, #0
   1d5a0:	cmp	r2, #26
   1d5a4:	bcc	1d604 <__assert_fail@plt+0xb2cc>
   1d5a8:	uxtb	r0, r0
   1d5ac:	sub	r2, r0, #97	; 0x61
   1d5b0:	cmp	r2, #26
   1d5b4:	bcc	1d604 <__assert_fail@plt+0xb2cc>
   1d5b8:	b	1d5f8 <__assert_fail@plt+0xb2c0>
   1d5bc:	uxtb	r0, r0
   1d5c0:	cmp	r0, #46	; 0x2e
   1d5c4:	bne	1d5e4 <__assert_fail@plt+0xb2ac>
   1d5c8:	cmp	r7, #0
   1d5cc:	mov	r1, #1
   1d5d0:	moveq	r7, r4
   1d5d4:	ldrb	r0, [r4, #1]!
   1d5d8:	cmp	r0, #0
   1d5dc:	bne	1d590 <__assert_fail@plt+0xb258>
   1d5e0:	b	1d61c <__assert_fail@plt+0xb2e4>
   1d5e4:	bl	24b70 <__assert_fail@plt+0x12838>
   1d5e8:	mov	r1, #0
   1d5ec:	cmp	r0, #0
   1d5f0:	bne	1d604 <__assert_fail@plt+0xb2cc>
   1d5f4:	ldrb	r0, [r4]
   1d5f8:	mov	r1, #0
   1d5fc:	cmp	r0, #126	; 0x7e
   1d600:	movne	r7, r1
   1d604:	ldrb	r0, [r4, #1]!
   1d608:	cmp	r0, #0
   1d60c:	bne	1d590 <__assert_fail@plt+0xb258>
   1d610:	b	1d61c <__assert_fail@plt+0xb2e4>
   1d614:	mov	r7, #0
   1d618:	mov	r4, r8
   1d61c:	ldr	r1, [sp, #8]
   1d620:	cmp	r7, #0
   1d624:	mov	r0, r4
   1d628:	movne	r0, r7
   1d62c:	sub	lr, r0, r8
   1d630:	mov	r0, r6
   1d634:	cmp	r1, #0
   1d638:	movne	r0, r1
   1d63c:	sub	r2, r0, r9
   1d640:	orrs	r0, r1, r7
   1d644:	beq	1d674 <__assert_fail@plt+0xb33c>
   1d648:	cmp	r2, lr
   1d64c:	bne	1d674 <__assert_fail@plt+0xb33c>
   1d650:	mov	r0, r9
   1d654:	mov	r1, r8
   1d658:	mov	r5, r2
   1d65c:	bl	122fc <strncmp@plt>
   1d660:	mov	r2, r5
   1d664:	cmp	r0, #0
   1d668:	mov	lr, r5
   1d66c:	subeq	lr, r4, r8
   1d670:	subeq	r2, r6, r9
   1d674:	mov	ip, #0
   1d678:	mov	r6, #0
   1d67c:	cmp	ip, lr
   1d680:	cmpcs	r6, r2
   1d684:	bcc	1d694 <__assert_fail@plt+0xb35c>
   1d688:	b	1d880 <__assert_fail@plt+0xb548>
   1d68c:	add	ip, ip, #1
   1d690:	add	r6, r6, #1
   1d694:	cmp	r6, r2
   1d698:	bcs	1d6ac <__assert_fail@plt+0xb374>
   1d69c:	ldrb	r0, [r9, r6]
   1d6a0:	sub	r0, r0, #48	; 0x30
   1d6a4:	cmp	r0, #9
   1d6a8:	bhi	1d6c4 <__assert_fail@plt+0xb38c>
   1d6ac:	cmp	ip, lr
   1d6b0:	bcs	1d790 <__assert_fail@plt+0xb458>
   1d6b4:	ldrb	r0, [r8, ip]
   1d6b8:	sub	r0, r0, #48	; 0x30
   1d6bc:	cmp	r0, #10
   1d6c0:	bcc	1d790 <__assert_fail@plt+0xb458>
   1d6c4:	mov	r0, #0
   1d6c8:	cmp	r2, r6
   1d6cc:	mov	r1, #0
   1d6d0:	beq	1d704 <__assert_fail@plt+0xb3cc>
   1d6d4:	ldrb	r3, [r9, r6]
   1d6d8:	sub	r1, r3, #48	; 0x30
   1d6dc:	cmp	r1, #10
   1d6e0:	mov	r1, #0
   1d6e4:	bcc	1d704 <__assert_fail@plt+0xb3cc>
   1d6e8:	sub	r1, r3, #65	; 0x41
   1d6ec:	cmp	r1, #26
   1d6f0:	bcc	1d750 <__assert_fail@plt+0xb418>
   1d6f4:	sub	r1, r3, #97	; 0x61
   1d6f8:	cmp	r1, #26
   1d6fc:	mov	r1, r3
   1d700:	bcs	1d778 <__assert_fail@plt+0xb440>
   1d704:	cmp	lr, ip
   1d708:	beq	1d75c <__assert_fail@plt+0xb424>
   1d70c:	ldrb	r3, [r8, ip]
   1d710:	sub	r7, r3, #48	; 0x30
   1d714:	cmp	r7, #10
   1d718:	bcc	1d75c <__assert_fail@plt+0xb424>
   1d71c:	sub	r0, r3, #65	; 0x41
   1d720:	cmp	r0, #26
   1d724:	bcc	1d768 <__assert_fail@plt+0xb430>
   1d728:	sub	r0, r3, #97	; 0x61
   1d72c:	cmp	r0, #26
   1d730:	mov	r0, r3
   1d734:	bcc	1d75c <__assert_fail@plt+0xb424>
   1d738:	orr	r0, r3, #256	; 0x100
   1d73c:	cmp	r3, #126	; 0x7e
   1d740:	mvneq	r0, #0
   1d744:	cmp	r1, r0
   1d748:	beq	1d68c <__assert_fail@plt+0xb354>
   1d74c:	b	1d870 <__assert_fail@plt+0xb538>
   1d750:	mov	r1, r3
   1d754:	cmp	lr, ip
   1d758:	bne	1d70c <__assert_fail@plt+0xb3d4>
   1d75c:	cmp	r1, r0
   1d760:	beq	1d68c <__assert_fail@plt+0xb354>
   1d764:	b	1d870 <__assert_fail@plt+0xb538>
   1d768:	mov	r0, r3
   1d76c:	cmp	r1, r0
   1d770:	beq	1d68c <__assert_fail@plt+0xb354>
   1d774:	b	1d870 <__assert_fail@plt+0xb538>
   1d778:	orr	r1, r3, #256	; 0x100
   1d77c:	cmp	r3, #126	; 0x7e
   1d780:	mvneq	r1, #0
   1d784:	cmp	lr, ip
   1d788:	bne	1d70c <__assert_fail@plt+0xb3d4>
   1d78c:	b	1d75c <__assert_fail@plt+0xb424>
   1d790:	mov	r3, r6
   1d794:	ldrb	r4, [r9, r3]
   1d798:	add	r3, r3, #1
   1d79c:	cmp	r4, #48	; 0x30
   1d7a0:	beq	1d794 <__assert_fail@plt+0xb45c>
   1d7a4:	sub	r6, r3, #1
   1d7a8:	ldrb	r5, [r8, ip]
   1d7ac:	add	ip, ip, #1
   1d7b0:	cmp	r5, #48	; 0x30
   1d7b4:	beq	1d7a8 <__assert_fail@plt+0xb470>
   1d7b8:	sub	r1, r5, #48	; 0x30
   1d7bc:	sub	r7, r4, #48	; 0x30
   1d7c0:	mov	r0, #0
   1d7c4:	cmp	r1, #10
   1d7c8:	mov	r1, #0
   1d7cc:	movwcc	r1, #1
   1d7d0:	cmp	r7, #9
   1d7d4:	bhi	1d84c <__assert_fail@plt+0xb514>
   1d7d8:	add	r0, r8, ip
   1d7dc:	mvn	r6, #0
   1d7e0:	mov	r7, r9
   1d7e4:	str	lr, [sp, #4]
   1d7e8:	str	r0, [sp, #8]
   1d7ec:	mov	r0, #0
   1d7f0:	tst	r1, #1
   1d7f4:	beq	1d864 <__assert_fail@plt+0xb52c>
   1d7f8:	ldr	r1, [sp, #8]
   1d7fc:	cmp	r0, #0
   1d800:	subeq	r0, r4, r5
   1d804:	ldrb	r4, [r7, r3]
   1d808:	add	r7, r7, #1
   1d80c:	add	r1, r1, r6
   1d810:	add	r6, r6, #1
   1d814:	ldrb	r5, [r1, #1]
   1d818:	sub	lr, r4, #48	; 0x30
   1d81c:	sub	r1, r5, #48	; 0x30
   1d820:	cmp	r1, #10
   1d824:	mov	r1, #0
   1d828:	movwcc	r1, #1
   1d82c:	cmp	lr, #10
   1d830:	bcc	1d7f0 <__assert_fail@plt+0xb4b8>
   1d834:	ldr	lr, [sp, #4]
   1d838:	add	ip, ip, r6
   1d83c:	add	r6, r3, r6
   1d840:	cmp	r1, #0
   1d844:	beq	1d858 <__assert_fail@plt+0xb520>
   1d848:	b	1d48c <__assert_fail@plt+0xb154>
   1d84c:	sub	ip, ip, #1
   1d850:	cmp	r1, #0
   1d854:	bne	1d48c <__assert_fail@plt+0xb154>
   1d858:	cmp	r0, #0
   1d85c:	beq	1d67c <__assert_fail@plt+0xb344>
   1d860:	b	1d878 <__assert_fail@plt+0xb540>
   1d864:	mov	r0, #1
   1d868:	sub	sp, fp, #28
   1d86c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d870:	subs	r0, r1, r0
   1d874:	moveq	r0, sl
   1d878:	sub	sp, fp, #28
   1d87c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d880:	mov	r0, sl
   1d884:	sub	sp, fp, #28
   1d888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d88c:	push	{r4, r5, r6, sl, fp, lr}
   1d890:	add	fp, sp, #16
   1d894:	mov	r4, r0
   1d898:	bl	12164 <__errno_location@plt>
   1d89c:	ldr	r6, [r0]
   1d8a0:	mov	r5, r0
   1d8a4:	mov	r0, r4
   1d8a8:	bl	11e88 <free@plt>
   1d8ac:	str	r6, [r5]
   1d8b0:	pop	{r4, r5, r6, sl, fp, pc}
   1d8b4:	push	{r4, r5, r6, r7, fp, lr}
   1d8b8:	add	fp, sp, #16
   1d8bc:	sub	sp, sp, #8
   1d8c0:	mov	r4, r0
   1d8c4:	ldr	r0, [r0, #4]
   1d8c8:	mov	r5, r3
   1d8cc:	mov	r6, r2
   1d8d0:	ldr	r1, [r4, #8]
   1d8d4:	cmp	r1, r0
   1d8d8:	bne	1d8f4 <__assert_fail@plt+0xb5bc>
   1d8dc:	ldrd	r0, [r4, #16]
   1d8e0:	cmp	r1, r0
   1d8e4:	bne	1d8f4 <__assert_fail@plt+0xb5bc>
   1d8e8:	ldr	r0, [r4, #36]	; 0x24
   1d8ec:	cmp	r0, #0
   1d8f0:	beq	1d90c <__assert_fail@plt+0xb5d4>
   1d8f4:	mov	r0, r4
   1d8f8:	mov	r2, r6
   1d8fc:	mov	r3, r5
   1d900:	sub	sp, fp, #16
   1d904:	pop	{r4, r5, r6, r7, fp, lr}
   1d908:	b	121f4 <fseeko64@plt>
   1d90c:	ldr	r7, [fp, #8]
   1d910:	mov	r0, r4
   1d914:	bl	121b8 <fileno@plt>
   1d918:	mov	r2, r6
   1d91c:	mov	r3, r5
   1d920:	str	r7, [sp]
   1d924:	bl	12020 <lseek64@plt>
   1d928:	and	r2, r0, r1
   1d92c:	cmn	r2, #1
   1d930:	mvneq	r0, #0
   1d934:	subeq	sp, fp, #16
   1d938:	popeq	{r4, r5, r6, r7, fp, pc}
   1d93c:	strd	r0, [r4, #80]	; 0x50
   1d940:	ldr	r0, [r4]
   1d944:	bic	r0, r0, #16
   1d948:	str	r0, [r4]
   1d94c:	mov	r0, #0
   1d950:	sub	sp, fp, #16
   1d954:	pop	{r4, r5, r6, r7, fp, pc}
   1d958:	push	{r4, sl, fp, lr}
   1d95c:	add	fp, sp, #8
   1d960:	sub	sp, sp, #264	; 0x108
   1d964:	add	r1, sp, #7
   1d968:	movw	r2, #257	; 0x101
   1d96c:	bl	22830 <__assert_fail@plt+0x104f8>
   1d970:	mov	r4, #0
   1d974:	cmp	r0, #0
   1d978:	bne	1d9b0 <__assert_fail@plt+0xb678>
   1d97c:	movw	r1, #29628	; 0x73bc
   1d980:	add	r0, sp, #7
   1d984:	movt	r1, #2
   1d988:	bl	11e28 <strcmp@plt>
   1d98c:	cmp	r0, #0
   1d990:	beq	1d9b0 <__assert_fail@plt+0xb678>
   1d994:	movw	r1, #32731	; 0x7fdb
   1d998:	add	r0, sp, #7
   1d99c:	movt	r1, #2
   1d9a0:	bl	11e28 <strcmp@plt>
   1d9a4:	mov	r4, r0
   1d9a8:	cmp	r0, #0
   1d9ac:	movwne	r4, #1
   1d9b0:	mov	r0, r4
   1d9b4:	sub	sp, fp, #8
   1d9b8:	pop	{r4, sl, fp, pc}
   1d9bc:	andeq	r0, r0, r0
   1d9c0:	ldr	r0, [r0, #8]
   1d9c4:	bx	lr
   1d9c8:	ldr	r0, [r0, #12]
   1d9cc:	bx	lr
   1d9d0:	ldr	r0, [r0, #16]
   1d9d4:	bx	lr
   1d9d8:	ldm	r0, {r2, ip}
   1d9dc:	mov	r0, #0
   1d9e0:	cmp	r2, ip
   1d9e4:	bxcs	lr
   1d9e8:	mov	r0, #0
   1d9ec:	ldr	r1, [r2]
   1d9f0:	cmp	r1, #0
   1d9f4:	beq	1da18 <__assert_fail@plt+0xb6e0>
   1d9f8:	mov	r3, #0
   1d9fc:	mov	r1, r2
   1da00:	ldr	r1, [r1, #4]
   1da04:	add	r3, r3, #1
   1da08:	cmp	r1, #0
   1da0c:	bne	1da00 <__assert_fail@plt+0xb6c8>
   1da10:	cmp	r3, r0
   1da14:	movhi	r0, r3
   1da18:	add	r2, r2, #8
   1da1c:	cmp	r2, ip
   1da20:	bcc	1d9ec <__assert_fail@plt+0xb6b4>
   1da24:	bx	lr
   1da28:	push	{fp, lr}
   1da2c:	mov	fp, sp
   1da30:	ldm	r0, {r3, ip}
   1da34:	mov	lr, #0
   1da38:	mov	r1, #0
   1da3c:	cmp	r3, ip
   1da40:	bcs	1da7c <__assert_fail@plt+0xb744>
   1da44:	mov	r1, #0
   1da48:	mov	lr, #0
   1da4c:	ldr	r2, [r3]
   1da50:	cmp	r2, #0
   1da54:	beq	1da70 <__assert_fail@plt+0xb738>
   1da58:	mov	r2, r3
   1da5c:	ldr	r2, [r2, #4]
   1da60:	add	r1, r1, #1
   1da64:	cmp	r2, #0
   1da68:	bne	1da5c <__assert_fail@plt+0xb724>
   1da6c:	add	lr, lr, #1
   1da70:	add	r3, r3, #8
   1da74:	cmp	r3, ip
   1da78:	bcc	1da4c <__assert_fail@plt+0xb714>
   1da7c:	ldr	r2, [r0, #12]
   1da80:	cmp	lr, r2
   1da84:	bne	1da9c <__assert_fail@plt+0xb764>
   1da88:	ldr	r2, [r0, #16]
   1da8c:	mov	r0, #1
   1da90:	cmp	r1, r2
   1da94:	movne	r0, #0
   1da98:	pop	{fp, pc}
   1da9c:	mov	r0, #0
   1daa0:	pop	{fp, pc}
   1daa4:	nop	{0}
   1daa8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1daac:	add	fp, sp, #24
   1dab0:	sub	sp, sp, #8
   1dab4:	ldr	r6, [r0]
   1dab8:	ldmib	r0, {r2, r7, r8}
   1dabc:	ldr	r3, [r0, #16]
   1dac0:	mov	r4, r1
   1dac4:	mov	r5, #0
   1dac8:	cmp	r6, r2
   1dacc:	bcs	1db0c <__assert_fail@plt+0xb7d4>
   1dad0:	mov	r5, #0
   1dad4:	ldr	r0, [r6]
   1dad8:	cmp	r0, #0
   1dadc:	beq	1db00 <__assert_fail@plt+0xb7c8>
   1dae0:	mov	r0, #0
   1dae4:	mov	r1, r6
   1dae8:	ldr	r1, [r1, #4]
   1daec:	add	r0, r0, #1
   1daf0:	cmp	r1, #0
   1daf4:	bne	1dae8 <__assert_fail@plt+0xb7b0>
   1daf8:	cmp	r0, r5
   1dafc:	movhi	r5, r0
   1db00:	add	r6, r6, #8
   1db04:	cmp	r6, r2
   1db08:	bcc	1dad4 <__assert_fail@plt+0xb79c>
   1db0c:	movw	r2, #32737	; 0x7fe1
   1db10:	mov	r0, r4
   1db14:	mov	r1, #1
   1db18:	movt	r2, #2
   1db1c:	bl	121c4 <__fprintf_chk@plt>
   1db20:	movw	r2, #32761	; 0x7ff9
   1db24:	mov	r0, r4
   1db28:	mov	r1, #1
   1db2c:	mov	r3, r7
   1db30:	movt	r2, #2
   1db34:	bl	121c4 <__fprintf_chk@plt>
   1db38:	vldr	d16, [pc, #80]	; 1db90 <__assert_fail@plt+0xb858>
   1db3c:	vmov	s0, r8
   1db40:	movw	r2, #32785	; 0x8011
   1db44:	mov	r0, r4
   1db48:	mov	r1, #1
   1db4c:	mov	r3, r8
   1db50:	vcvt.f64.u32	d17, s0
   1db54:	vmov	s0, r7
   1db58:	movt	r2, #2
   1db5c:	vcvt.f64.u32	d18, s0
   1db60:	vmul.f64	d16, d17, d16
   1db64:	vdiv.f64	d16, d16, d18
   1db68:	vstr	d16, [sp]
   1db6c:	bl	121c4 <__fprintf_chk@plt>
   1db70:	movw	r2, #32818	; 0x8032
   1db74:	mov	r0, r4
   1db78:	mov	r1, #1
   1db7c:	mov	r3, r5
   1db80:	movt	r2, #2
   1db84:	sub	sp, fp, #24
   1db88:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1db8c:	b	121c4 <__fprintf_chk@plt>
   1db90:	andeq	r0, r0, r0
   1db94:	subsmi	r0, r9, r0
   1db98:	push	{r4, r5, r6, r7, fp, lr}
   1db9c:	add	fp, sp, #16
   1dba0:	mov	r4, r1
   1dba4:	ldr	r1, [r0, #8]
   1dba8:	ldr	r2, [r0, #24]
   1dbac:	mov	r5, r0
   1dbb0:	mov	r0, r4
   1dbb4:	blx	r2
   1dbb8:	ldr	r1, [r5, #8]
   1dbbc:	cmp	r0, r1
   1dbc0:	bcs	1dc2c <__assert_fail@plt+0xb8f4>
   1dbc4:	ldr	r7, [r5]
   1dbc8:	mov	r6, #0
   1dbcc:	ldr	r1, [r7, r0, lsl #3]!
   1dbd0:	cmp	r1, #0
   1dbd4:	cmpne	r7, #0
   1dbd8:	bne	1dbe8 <__assert_fail@plt+0xb8b0>
   1dbdc:	mov	r0, r6
   1dbe0:	pop	{r4, r5, r6, r7, fp, pc}
   1dbe4:	ldr	r1, [r7]
   1dbe8:	cmp	r1, r4
   1dbec:	beq	1dc14 <__assert_fail@plt+0xb8dc>
   1dbf0:	ldr	r2, [r5, #28]
   1dbf4:	mov	r0, r4
   1dbf8:	blx	r2
   1dbfc:	cmp	r0, #0
   1dc00:	bne	1dc20 <__assert_fail@plt+0xb8e8>
   1dc04:	ldr	r7, [r7, #4]
   1dc08:	cmp	r7, #0
   1dc0c:	bne	1dbe4 <__assert_fail@plt+0xb8ac>
   1dc10:	b	1dbdc <__assert_fail@plt+0xb8a4>
   1dc14:	mov	r6, r4
   1dc18:	mov	r0, r6
   1dc1c:	pop	{r4, r5, r6, r7, fp, pc}
   1dc20:	ldr	r6, [r7]
   1dc24:	mov	r0, r6
   1dc28:	pop	{r4, r5, r6, r7, fp, pc}
   1dc2c:	bl	12314 <abort@plt>
   1dc30:	ldr	r1, [r0, #16]
   1dc34:	cmp	r1, #0
   1dc38:	moveq	r0, #0
   1dc3c:	bxeq	lr
   1dc40:	ldm	r0, {r1, r2}
   1dc44:	cmp	r1, r2
   1dc48:	bcs	1dc60 <__assert_fail@plt+0xb928>
   1dc4c:	ldr	r0, [r1], #8
   1dc50:	cmp	r0, #0
   1dc54:	bxne	lr
   1dc58:	cmp	r1, r2
   1dc5c:	bcc	1dc4c <__assert_fail@plt+0xb914>
   1dc60:	push	{fp, lr}
   1dc64:	mov	fp, sp
   1dc68:	bl	12314 <abort@plt>
   1dc6c:	push	{r4, r5, fp, lr}
   1dc70:	add	fp, sp, #8
   1dc74:	mov	r5, r1
   1dc78:	ldr	r1, [r0, #8]
   1dc7c:	ldr	r2, [r0, #24]
   1dc80:	mov	r4, r0
   1dc84:	mov	r0, r5
   1dc88:	blx	r2
   1dc8c:	ldr	r1, [r4, #8]
   1dc90:	cmp	r0, r1
   1dc94:	bcs	1dcf0 <__assert_fail@plt+0xb9b8>
   1dc98:	ldr	r1, [r4]
   1dc9c:	add	r2, r1, r0, lsl #3
   1dca0:	ldr	r3, [r2]
   1dca4:	ldr	r2, [r2, #4]
   1dca8:	cmp	r3, r5
   1dcac:	beq	1dcbc <__assert_fail@plt+0xb984>
   1dcb0:	cmp	r2, #0
   1dcb4:	bne	1dca0 <__assert_fail@plt+0xb968>
   1dcb8:	b	1dcc8 <__assert_fail@plt+0xb990>
   1dcbc:	cmp	r2, #0
   1dcc0:	ldrne	r0, [r2]
   1dcc4:	popne	{r4, r5, fp, pc}
   1dcc8:	ldr	r2, [r4, #4]
   1dccc:	add	r0, r1, r0, lsl #3
   1dcd0:	add	r1, r0, #8
   1dcd4:	cmp	r1, r2
   1dcd8:	movcs	r0, #0
   1dcdc:	popcs	{r4, r5, fp, pc}
   1dce0:	ldr	r0, [r1], #8
   1dce4:	cmp	r0, #0
   1dce8:	popne	{r4, r5, fp, pc}
   1dcec:	b	1dcd4 <__assert_fail@plt+0xb99c>
   1dcf0:	bl	12314 <abort@plt>
   1dcf4:	push	{r4, r5, fp, lr}
   1dcf8:	add	fp, sp, #8
   1dcfc:	ldm	r0, {r5, lr}
   1dd00:	mov	ip, r0
   1dd04:	mov	r0, #0
   1dd08:	cmp	r5, lr
   1dd0c:	bcs	1dd68 <__assert_fail@plt+0xba30>
   1dd10:	mov	r0, #0
   1dd14:	ldr	r3, [r5]
   1dd18:	cmp	r3, #0
   1dd1c:	cmpne	r5, #0
   1dd20:	bne	1dd34 <__assert_fail@plt+0xb9fc>
   1dd24:	add	r5, r5, #8
   1dd28:	cmp	r5, lr
   1dd2c:	bcc	1dd14 <__assert_fail@plt+0xb9dc>
   1dd30:	b	1dd68 <__assert_fail@plt+0xba30>
   1dd34:	mov	r3, r5
   1dd38:	cmp	r0, r2
   1dd3c:	popcs	{r4, r5, fp, pc}
   1dd40:	ldr	r4, [r3]
   1dd44:	str	r4, [r1, r0, lsl #2]
   1dd48:	add	r0, r0, #1
   1dd4c:	ldr	r3, [r3, #4]
   1dd50:	cmp	r3, #0
   1dd54:	bne	1dd38 <__assert_fail@plt+0xba00>
   1dd58:	ldr	lr, [ip, #4]
   1dd5c:	add	r5, r5, #8
   1dd60:	cmp	r5, lr
   1dd64:	bcc	1dd14 <__assert_fail@plt+0xb9dc>
   1dd68:	pop	{r4, r5, fp, pc}
   1dd6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dd70:	add	fp, sp, #24
   1dd74:	mov	r5, r1
   1dd78:	ldr	r4, [r0]
   1dd7c:	ldr	r1, [r0, #4]
   1dd80:	mov	r6, #0
   1dd84:	cmp	r4, r1
   1dd88:	bcs	1de04 <__assert_fail@plt+0xbacc>
   1dd8c:	mov	r9, r2
   1dd90:	mov	r8, r0
   1dd94:	mov	r6, #0
   1dd98:	ldr	r0, [r4]
   1dd9c:	cmp	r0, #0
   1dda0:	cmpne	r4, #0
   1dda4:	bne	1ddb8 <__assert_fail@plt+0xba80>
   1dda8:	add	r4, r4, #8
   1ddac:	cmp	r4, r1
   1ddb0:	bcc	1dd98 <__assert_fail@plt+0xba60>
   1ddb4:	b	1de04 <__assert_fail@plt+0xbacc>
   1ddb8:	mov	r1, r9
   1ddbc:	blx	r5
   1ddc0:	cmp	r0, #0
   1ddc4:	beq	1de04 <__assert_fail@plt+0xbacc>
   1ddc8:	mov	r7, r4
   1ddcc:	ldr	r7, [r7, #4]
   1ddd0:	add	r6, r6, #1
   1ddd4:	cmp	r7, #0
   1ddd8:	beq	1ddf4 <__assert_fail@plt+0xbabc>
   1dddc:	ldr	r0, [r7]
   1dde0:	mov	r1, r9
   1dde4:	blx	r5
   1dde8:	cmp	r0, #0
   1ddec:	bne	1ddcc <__assert_fail@plt+0xba94>
   1ddf0:	b	1de04 <__assert_fail@plt+0xbacc>
   1ddf4:	ldr	r1, [r8, #4]
   1ddf8:	add	r4, r4, #8
   1ddfc:	cmp	r4, r1
   1de00:	bcc	1dd98 <__assert_fail@plt+0xba60>
   1de04:	mov	r0, r6
   1de08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1de0c:	ldrb	r2, [r0]
   1de10:	cmp	r2, #0
   1de14:	moveq	r0, #0
   1de18:	bxeq	lr
   1de1c:	add	r3, r0, #1
   1de20:	mov	r0, #0
   1de24:	rsb	r0, r0, r0, lsl #5
   1de28:	uxtab	r0, r0, r2
   1de2c:	udiv	r2, r0, r1
   1de30:	mls	r0, r2, r1, r0
   1de34:	ldrb	r2, [r3], #1
   1de38:	cmp	r2, #0
   1de3c:	bne	1de24 <__assert_fail@plt+0xbaec>
   1de40:	bx	lr
   1de44:	movw	r1, #32848	; 0x8050
   1de48:	movt	r1, #2
   1de4c:	vld1.32	{d16-d17}, [r1]!
   1de50:	ldr	r1, [r1]
   1de54:	vst1.32	{d16-d17}, [r0]!
   1de58:	str	r1, [r0]
   1de5c:	bx	lr
   1de60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1de64:	add	fp, sp, #24
   1de68:	movw	r9, #57516	; 0xe0ac
   1de6c:	movw	r5, #57496	; 0xe098
   1de70:	cmp	r3, #0
   1de74:	mov	r6, r0
   1de78:	mov	r0, #40	; 0x28
   1de7c:	mov	r7, r1
   1de80:	movt	r9, #1
   1de84:	movt	r5, #1
   1de88:	movne	r9, r3
   1de8c:	cmp	r2, #0
   1de90:	movne	r5, r2
   1de94:	bl	24aec <__assert_fail@plt+0x127b4>
   1de98:	mov	r8, #0
   1de9c:	cmp	r0, #0
   1dea0:	beq	1e080 <__assert_fail@plt+0xbd48>
   1dea4:	mov	r4, r0
   1dea8:	cmp	r7, #0
   1deac:	beq	1df5c <__assert_fail@plt+0xbc24>
   1deb0:	movw	r0, #32848	; 0x8050
   1deb4:	str	r7, [r4, #20]
   1deb8:	movt	r0, #2
   1debc:	cmp	r7, r0
   1dec0:	beq	1df68 <__assert_fail@plt+0xbc30>
   1dec4:	vldr	s2, [pc, #444]	; 1e088 <__assert_fail@plt+0xbd50>
   1dec8:	vldr	s0, [r7, #8]
   1decc:	vcmpe.f32	s0, s2
   1ded0:	vmrs	APSR_nzcv, fpscr
   1ded4:	ble	1df40 <__assert_fail@plt+0xbc08>
   1ded8:	vldr	s4, [pc, #428]	; 1e08c <__assert_fail@plt+0xbd54>
   1dedc:	vcmpe.f32	s0, s4
   1dee0:	vmrs	APSR_nzcv, fpscr
   1dee4:	bpl	1df40 <__assert_fail@plt+0xbc08>
   1dee8:	vldr	s4, [pc, #416]	; 1e090 <__assert_fail@plt+0xbd58>
   1deec:	vldr	s6, [r7, #12]
   1def0:	vcmpe.f32	s6, s4
   1def4:	vmrs	APSR_nzcv, fpscr
   1def8:	ble	1df40 <__assert_fail@plt+0xbc08>
   1defc:	vldr	s4, [r7]
   1df00:	vcmpe.f32	s4, #0.0
   1df04:	vmrs	APSR_nzcv, fpscr
   1df08:	blt	1df40 <__assert_fail@plt+0xbc08>
   1df0c:	vadd.f32	s2, s4, s2
   1df10:	vcmpe.f32	s2, s0
   1df14:	vmrs	APSR_nzcv, fpscr
   1df18:	bpl	1df40 <__assert_fail@plt+0xbc08>
   1df1c:	vldr	s0, [r7, #4]
   1df20:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1df24:	vcmpe.f32	s0, s4
   1df28:	vmrs	APSR_nzcv, fpscr
   1df2c:	bhi	1df40 <__assert_fail@plt+0xbc08>
   1df30:	vcmpe.f32	s2, s0
   1df34:	mov	r0, r7
   1df38:	vmrs	APSR_nzcv, fpscr
   1df3c:	bmi	1df68 <__assert_fail@plt+0xbc30>
   1df40:	movw	r0, #32848	; 0x8050
   1df44:	movt	r0, #2
   1df48:	str	r0, [r4, #20]
   1df4c:	mov	r0, r4
   1df50:	bl	1d88c <__assert_fail@plt+0xb554>
   1df54:	mov	r0, r8
   1df58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1df5c:	movw	r0, #32848	; 0x8050
   1df60:	movt	r0, #2
   1df64:	str	r0, [r4, #20]
   1df68:	ldrb	r1, [r0, #16]
   1df6c:	cmp	r1, #0
   1df70:	bne	1df9c <__assert_fail@plt+0xbc64>
   1df74:	vldr	s0, [r0, #8]
   1df78:	vldr	s4, [pc, #276]	; 1e094 <__assert_fail@plt+0xbd5c>
   1df7c:	vmov	s2, r6
   1df80:	vcvt.f32.u32	s2, s2
   1df84:	vdiv.f32	s2, s2, s0
   1df88:	vcmpe.f32	s2, s4
   1df8c:	vcvt.u32.f32	s0, s2
   1df90:	vmrs	APSR_nzcv, fpscr
   1df94:	bge	1e01c <__assert_fail@plt+0xbce4>
   1df98:	vmov	r6, s0
   1df9c:	cmp	r6, #10
   1dfa0:	movls	r6, #10
   1dfa4:	orr	r0, r6, #1
   1dfa8:	cmn	r0, #1
   1dfac:	beq	1e01c <__assert_fail@plt+0xbce4>
   1dfb0:	ldr	r6, [fp, #8]
   1dfb4:	mov	r1, #3
   1dfb8:	cmp	r0, #10
   1dfbc:	bcc	1dff4 <__assert_fail@plt+0xbcbc>
   1dfc0:	mov	r1, #3
   1dfc4:	mov	r3, #9
   1dfc8:	mov	r2, #12
   1dfcc:	udiv	r7, r0, r1
   1dfd0:	mls	r7, r7, r1, r0
   1dfd4:	cmp	r7, #0
   1dfd8:	beq	1dff4 <__assert_fail@plt+0xbcbc>
   1dfdc:	add	r3, r3, r2
   1dfe0:	add	r2, r2, #8
   1dfe4:	add	r1, r1, #2
   1dfe8:	add	r3, r3, #4
   1dfec:	cmp	r3, r0
   1dff0:	bcc	1dfcc <__assert_fail@plt+0xbc94>
   1dff4:	udiv	r2, r0, r1
   1dff8:	mls	r1, r2, r1, r0
   1dffc:	cmp	r1, #0
   1e000:	bne	1e014 <__assert_fail@plt+0xbcdc>
   1e004:	add	r0, r0, #2
   1e008:	cmn	r0, #1
   1e00c:	bne	1dfb4 <__assert_fail@plt+0xbc7c>
   1e010:	b	1e01c <__assert_fail@plt+0xbce4>
   1e014:	cmp	r0, #536870912	; 0x20000000
   1e018:	bcc	1e034 <__assert_fail@plt+0xbcfc>
   1e01c:	mov	r0, #0
   1e020:	str	r0, [r4, #8]
   1e024:	mov	r0, r4
   1e028:	bl	1d88c <__assert_fail@plt+0xb554>
   1e02c:	mov	r0, r8
   1e030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e034:	cmp	r0, #0
   1e038:	str	r0, [r4, #8]
   1e03c:	beq	1e024 <__assert_fail@plt+0xbcec>
   1e040:	mov	r1, #8
   1e044:	bl	24a98 <__assert_fail@plt+0x12760>
   1e048:	cmp	r0, #0
   1e04c:	str	r0, [r4]
   1e050:	beq	1e024 <__assert_fail@plt+0xbcec>
   1e054:	mov	r1, #0
   1e058:	mov	r8, r4
   1e05c:	str	r1, [r4, #12]
   1e060:	str	r1, [r4, #16]
   1e064:	str	r5, [r4, #24]
   1e068:	str	r9, [r4, #28]
   1e06c:	str	r6, [r4, #32]
   1e070:	str	r1, [r4, #36]	; 0x24
   1e074:	ldr	r1, [r4, #8]
   1e078:	add	r0, r0, r1, lsl #3
   1e07c:	str	r0, [r4, #4]
   1e080:	mov	r0, r8
   1e084:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e088:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e08c:	svccc	0x00666666
   1e090:	svccc	0x008ccccd
   1e094:	svcmi	0x00800000
   1e098:	ror	r2, r0, #3
   1e09c:	udiv	r2, r2, r1
   1e0a0:	mul	r1, r2, r1
   1e0a4:	rsb	r0, r1, r0, ror #3
   1e0a8:	bx	lr
   1e0ac:	sub	r0, r0, r1
   1e0b0:	clz	r0, r0
   1e0b4:	lsr	r0, r0, #5
   1e0b8:	bx	lr
   1e0bc:	push	{r4, r5, r6, r7, fp, lr}
   1e0c0:	add	fp, sp, #16
   1e0c4:	mov	r4, r0
   1e0c8:	ldr	r5, [r0]
   1e0cc:	ldr	r0, [r0, #4]
   1e0d0:	cmp	r5, r0
   1e0d4:	bcs	1e16c <__assert_fail@plt+0xbe34>
   1e0d8:	mov	r6, #0
   1e0dc:	ldr	r1, [r5]
   1e0e0:	cmp	r1, #0
   1e0e4:	beq	1e160 <__assert_fail@plt+0xbe28>
   1e0e8:	ldr	r1, [r4, #32]
   1e0ec:	ldr	r7, [r5, #4]
   1e0f0:	cmp	r1, #0
   1e0f4:	mov	r0, r1
   1e0f8:	movwne	r0, #1
   1e0fc:	cmp	r7, #0
   1e100:	beq	1e144 <__assert_fail@plt+0xbe0c>
   1e104:	tst	r0, #1
   1e108:	beq	1e118 <__assert_fail@plt+0xbde0>
   1e10c:	ldr	r0, [r7]
   1e110:	blx	r1
   1e114:	ldr	r1, [r4, #32]
   1e118:	str	r6, [r7]
   1e11c:	cmp	r1, #0
   1e120:	ldr	r0, [r4, #36]	; 0x24
   1e124:	ldr	r2, [r7, #4]
   1e128:	str	r0, [r7, #4]
   1e12c:	mov	r0, r1
   1e130:	str	r7, [r4, #36]	; 0x24
   1e134:	mov	r7, r2
   1e138:	movwne	r0, #1
   1e13c:	cmp	r2, #0
   1e140:	bne	1e104 <__assert_fail@plt+0xbdcc>
   1e144:	cmp	r0, #0
   1e148:	beq	1e154 <__assert_fail@plt+0xbe1c>
   1e14c:	ldr	r0, [r5]
   1e150:	blx	r1
   1e154:	str	r6, [r5]
   1e158:	str	r6, [r5, #4]
   1e15c:	ldr	r0, [r4, #4]
   1e160:	add	r5, r5, #8
   1e164:	cmp	r5, r0
   1e168:	bcc	1e0dc <__assert_fail@plt+0xbda4>
   1e16c:	mov	r0, #0
   1e170:	str	r0, [r4, #12]
   1e174:	str	r0, [r4, #16]
   1e178:	pop	{r4, r5, r6, r7, fp, pc}
   1e17c:	push	{r4, r5, r6, sl, fp, lr}
   1e180:	add	fp, sp, #16
   1e184:	mov	r4, r0
   1e188:	ldr	r0, [r0, #32]
   1e18c:	cmp	r0, #0
   1e190:	ldrne	r0, [r4, #16]
   1e194:	cmpne	r0, #0
   1e198:	beq	1e200 <__assert_fail@plt+0xbec8>
   1e19c:	ldr	r5, [r4]
   1e1a0:	ldr	r1, [r4, #4]
   1e1a4:	cmp	r5, r1
   1e1a8:	bcc	1e1bc <__assert_fail@plt+0xbe84>
   1e1ac:	b	1e200 <__assert_fail@plt+0xbec8>
   1e1b0:	add	r5, r5, #8
   1e1b4:	cmp	r5, r1
   1e1b8:	bcs	1e200 <__assert_fail@plt+0xbec8>
   1e1bc:	ldr	r0, [r5]
   1e1c0:	cmp	r0, #0
   1e1c4:	cmpne	r5, #0
   1e1c8:	beq	1e1b0 <__assert_fail@plt+0xbe78>
   1e1cc:	ldr	r1, [r4, #32]
   1e1d0:	blx	r1
   1e1d4:	ldr	r6, [r5, #4]
   1e1d8:	cmp	r6, #0
   1e1dc:	beq	1e1f8 <__assert_fail@plt+0xbec0>
   1e1e0:	ldr	r1, [r4, #32]
   1e1e4:	ldr	r0, [r6]
   1e1e8:	blx	r1
   1e1ec:	ldr	r6, [r6, #4]
   1e1f0:	cmp	r6, #0
   1e1f4:	bne	1e1e0 <__assert_fail@plt+0xbea8>
   1e1f8:	ldr	r1, [r4, #4]
   1e1fc:	b	1e1b0 <__assert_fail@plt+0xbe78>
   1e200:	ldr	r5, [r4]
   1e204:	ldr	r1, [r4, #4]
   1e208:	cmp	r5, r1
   1e20c:	bcc	1e220 <__assert_fail@plt+0xbee8>
   1e210:	b	1e248 <__assert_fail@plt+0xbf10>
   1e214:	add	r5, r5, #8
   1e218:	cmp	r5, r1
   1e21c:	bcs	1e248 <__assert_fail@plt+0xbf10>
   1e220:	ldr	r0, [r5, #4]
   1e224:	cmp	r0, #0
   1e228:	beq	1e214 <__assert_fail@plt+0xbedc>
   1e22c:	ldr	r6, [r0, #4]
   1e230:	bl	1d88c <__assert_fail@plt+0xb554>
   1e234:	cmp	r6, #0
   1e238:	mov	r0, r6
   1e23c:	bne	1e22c <__assert_fail@plt+0xbef4>
   1e240:	ldr	r1, [r4, #4]
   1e244:	b	1e214 <__assert_fail@plt+0xbedc>
   1e248:	ldr	r0, [r4, #36]	; 0x24
   1e24c:	cmp	r0, #0
   1e250:	beq	1e268 <__assert_fail@plt+0xbf30>
   1e254:	ldr	r5, [r0, #4]
   1e258:	bl	1d88c <__assert_fail@plt+0xb554>
   1e25c:	cmp	r5, #0
   1e260:	mov	r0, r5
   1e264:	bne	1e254 <__assert_fail@plt+0xbf1c>
   1e268:	ldr	r0, [r4]
   1e26c:	bl	1d88c <__assert_fail@plt+0xb554>
   1e270:	mov	r0, r4
   1e274:	pop	{r4, r5, r6, sl, fp, lr}
   1e278:	b	1d88c <__assert_fail@plt+0xb554>
   1e27c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e280:	add	fp, sp, #28
   1e284:	sub	sp, sp, #44	; 0x2c
   1e288:	mov	r7, r0
   1e28c:	mov	r4, r0
   1e290:	ldr	r0, [r7, #20]!
   1e294:	ldrb	r2, [r0, #16]
   1e298:	cmp	r2, #0
   1e29c:	bne	1e2cc <__assert_fail@plt+0xbf94>
   1e2a0:	vldr	s0, [r0, #8]
   1e2a4:	vldr	s4, [pc, #576]	; 1e4ec <__assert_fail@plt+0xc1b4>
   1e2a8:	vmov	s2, r1
   1e2ac:	mov	r5, #0
   1e2b0:	vcvt.f32.u32	s2, s2
   1e2b4:	vdiv.f32	s2, s2, s0
   1e2b8:	vcmpe.f32	s2, s4
   1e2bc:	vcvt.u32.f32	s0, s2
   1e2c0:	vmrs	APSR_nzcv, fpscr
   1e2c4:	bge	1e3f0 <__assert_fail@plt+0xc0b8>
   1e2c8:	vmov	r1, s0
   1e2cc:	cmp	r1, #10
   1e2d0:	mov	r5, #0
   1e2d4:	movls	r1, #10
   1e2d8:	orr	r6, r1, #1
   1e2dc:	cmn	r6, #1
   1e2e0:	bne	1e2f4 <__assert_fail@plt+0xbfbc>
   1e2e4:	b	1e3f0 <__assert_fail@plt+0xc0b8>
   1e2e8:	add	r6, r6, #2
   1e2ec:	cmn	r6, #1
   1e2f0:	beq	1e3f0 <__assert_fail@plt+0xc0b8>
   1e2f4:	mov	r0, #3
   1e2f8:	cmp	r6, #10
   1e2fc:	bcc	1e334 <__assert_fail@plt+0xbffc>
   1e300:	mov	r0, #3
   1e304:	mov	r2, #9
   1e308:	mov	r1, #12
   1e30c:	udiv	r3, r6, r0
   1e310:	mls	r3, r3, r0, r6
   1e314:	cmp	r3, #0
   1e318:	beq	1e334 <__assert_fail@plt+0xbffc>
   1e31c:	add	r2, r2, r1
   1e320:	add	r1, r1, #8
   1e324:	add	r0, r0, #2
   1e328:	add	r2, r2, #4
   1e32c:	cmp	r2, r6
   1e330:	bcc	1e30c <__assert_fail@plt+0xbfd4>
   1e334:	udiv	r1, r6, r0
   1e338:	mls	r0, r1, r0, r6
   1e33c:	cmp	r0, #0
   1e340:	beq	1e2e8 <__assert_fail@plt+0xbfb0>
   1e344:	sub	r0, r6, #1
   1e348:	cmn	r0, #-536870910	; 0xe0000002
   1e34c:	bhi	1e3f0 <__assert_fail@plt+0xc0b8>
   1e350:	ldr	r0, [r4, #8]
   1e354:	cmp	r6, r0
   1e358:	bne	1e36c <__assert_fail@plt+0xc034>
   1e35c:	mov	r5, #1
   1e360:	mov	r0, r5
   1e364:	sub	sp, fp, #28
   1e368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e36c:	mov	r0, r6
   1e370:	mov	r1, #8
   1e374:	bl	24a98 <__assert_fail@plt+0x12760>
   1e378:	cmp	r0, #0
   1e37c:	str	r0, [sp, #4]
   1e380:	beq	1e3f0 <__assert_fail@plt+0xc0b8>
   1e384:	mov	r1, #0
   1e388:	add	r0, r0, r6, lsl #3
   1e38c:	str	r6, [sp, #12]
   1e390:	add	r5, sp, #4
   1e394:	mov	sl, r4
   1e398:	mov	r2, #0
   1e39c:	str	r1, [sp, #16]
   1e3a0:	str	r1, [sp, #20]
   1e3a4:	str	r0, [sp, #8]
   1e3a8:	add	r0, r5, #20
   1e3ac:	mov	r1, r4
   1e3b0:	vld1.32	{d16-d17}, [r7]
   1e3b4:	vst1.32	{d16-d17}, [r0]
   1e3b8:	ldr	r0, [sl, #36]!	; 0x24
   1e3bc:	str	r0, [sp, #40]	; 0x28
   1e3c0:	mov	r0, r5
   1e3c4:	bl	1e4f0 <__assert_fail@plt+0xc1b8>
   1e3c8:	cmp	r0, #0
   1e3cc:	beq	1e3fc <__assert_fail@plt+0xc0c4>
   1e3d0:	ldr	r0, [r4]
   1e3d4:	bl	1d88c <__assert_fail@plt+0xb554>
   1e3d8:	mov	r0, #36	; 0x24
   1e3dc:	vld1.32	{d16-d17}, [r5], r0
   1e3e0:	vst1.32	{d16-d17}, [r4], r0
   1e3e4:	ldr	r0, [r5]
   1e3e8:	mov	r5, #1
   1e3ec:	str	r0, [r4]
   1e3f0:	mov	r0, r5
   1e3f4:	sub	sp, fp, #28
   1e3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3fc:	ldr	r0, [sp, #40]	; 0x28
   1e400:	str	r0, [sl]
   1e404:	ldr	r0, [sp, #8]
   1e408:	ldr	r8, [sp, #4]
   1e40c:	cmp	r8, r0
   1e410:	str	r0, [sp]
   1e414:	bcs	1e4b8 <__assert_fail@plt+0xc180>
   1e418:	mov	r9, #0
   1e41c:	ldr	r0, [r8]
   1e420:	cmp	r0, #0
   1e424:	beq	1e4a8 <__assert_fail@plt+0xc170>
   1e428:	ldr	r6, [r8, #4]
   1e42c:	cmp	r6, #0
   1e430:	beq	1e4a4 <__assert_fail@plt+0xc16c>
   1e434:	ldr	r1, [r4, #8]
   1e438:	ldr	r5, [r6]
   1e43c:	ldr	r2, [r4, #24]
   1e440:	mov	r0, r5
   1e444:	blx	r2
   1e448:	ldr	r1, [r4, #8]
   1e44c:	cmp	r0, r1
   1e450:	bcs	1e4e8 <__assert_fail@plt+0xc1b0>
   1e454:	ldr	r3, [r4]
   1e458:	ldr	r2, [r6, #4]
   1e45c:	ldr	r7, [r3, r0, lsl #3]
   1e460:	cmp	r7, #0
   1e464:	beq	1e474 <__assert_fail@plt+0xc13c>
   1e468:	add	r0, r3, r0, lsl #3
   1e46c:	add	r0, r0, #4
   1e470:	b	1e48c <__assert_fail@plt+0xc154>
   1e474:	str	r5, [r3, r0, lsl #3]
   1e478:	ldr	r0, [r4, #12]
   1e47c:	add	r0, r0, #1
   1e480:	str	r0, [r4, #12]
   1e484:	mov	r0, sl
   1e488:	str	r9, [r6]
   1e48c:	ldr	r3, [r0]
   1e490:	cmp	r2, #0
   1e494:	str	r3, [r6, #4]
   1e498:	str	r6, [r0]
   1e49c:	mov	r6, r2
   1e4a0:	bne	1e438 <__assert_fail@plt+0xc100>
   1e4a4:	str	r9, [r8, #4]
   1e4a8:	ldr	r0, [sp]
   1e4ac:	add	r8, r8, #8
   1e4b0:	cmp	r8, r0
   1e4b4:	bcc	1e41c <__assert_fail@plt+0xc0e4>
   1e4b8:	add	r1, sp, #4
   1e4bc:	mov	r0, r4
   1e4c0:	mov	r2, #0
   1e4c4:	mov	r5, #0
   1e4c8:	bl	1e4f0 <__assert_fail@plt+0xc1b8>
   1e4cc:	cmp	r0, #0
   1e4d0:	beq	1e4e8 <__assert_fail@plt+0xc1b0>
   1e4d4:	ldr	r0, [sp, #4]
   1e4d8:	bl	1d88c <__assert_fail@plt+0xb554>
   1e4dc:	mov	r0, r5
   1e4e0:	sub	sp, fp, #28
   1e4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4e8:	bl	12314 <abort@plt>
   1e4ec:	svcmi	0x00800000
   1e4f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4f4:	add	fp, sp, #28
   1e4f8:	sub	sp, sp, #4
   1e4fc:	ldr	r8, [r1]
   1e500:	ldr	r3, [r1, #4]
   1e504:	mov	r6, r0
   1e508:	mov	r0, #1
   1e50c:	str	r1, [sp]
   1e510:	cmp	r8, r3
   1e514:	bcs	1e714 <__assert_fail@plt+0xc3dc>
   1e518:	add	r9, r6, #36	; 0x24
   1e51c:	cmp	r2, #0
   1e520:	beq	1e5cc <__assert_fail@plt+0xc294>
   1e524:	mov	sl, #0
   1e528:	ldr	r1, [r8]
   1e52c:	cmp	r1, #0
   1e530:	beq	1e5bc <__assert_fail@plt+0xc284>
   1e534:	ldr	r7, [r8, #4]
   1e538:	cmp	r7, #0
   1e53c:	beq	1e5b8 <__assert_fail@plt+0xc280>
   1e540:	ldr	r1, [r6, #8]
   1e544:	ldr	r4, [r7]
   1e548:	ldr	r2, [r6, #24]
   1e54c:	mov	r0, r4
   1e550:	blx	r2
   1e554:	ldr	r1, [r6, #8]
   1e558:	cmp	r0, r1
   1e55c:	bcs	1e728 <__assert_fail@plt+0xc3f0>
   1e560:	ldr	r3, [r6]
   1e564:	ldr	r2, [r7, #4]
   1e568:	ldr	r5, [r3, r0, lsl #3]
   1e56c:	cmp	r5, #0
   1e570:	beq	1e580 <__assert_fail@plt+0xc248>
   1e574:	add	r0, r3, r0, lsl #3
   1e578:	add	r0, r0, #4
   1e57c:	b	1e598 <__assert_fail@plt+0xc260>
   1e580:	str	r4, [r3, r0, lsl #3]
   1e584:	ldr	r0, [r6, #12]
   1e588:	add	r0, r0, #1
   1e58c:	str	r0, [r6, #12]
   1e590:	mov	r0, r9
   1e594:	str	sl, [r7]
   1e598:	ldr	r3, [r0]
   1e59c:	cmp	r2, #0
   1e5a0:	str	r3, [r7, #4]
   1e5a4:	str	r7, [r0]
   1e5a8:	mov	r7, r2
   1e5ac:	bne	1e544 <__assert_fail@plt+0xc20c>
   1e5b0:	ldr	r0, [sp]
   1e5b4:	ldr	r3, [r0, #4]
   1e5b8:	str	sl, [r8, #4]
   1e5bc:	add	r8, r8, #8
   1e5c0:	cmp	r8, r3
   1e5c4:	bcc	1e528 <__assert_fail@plt+0xc1f0>
   1e5c8:	b	1e710 <__assert_fail@plt+0xc3d8>
   1e5cc:	mov	r5, #0
   1e5d0:	ldr	sl, [r8]
   1e5d4:	cmp	sl, #0
   1e5d8:	beq	1e704 <__assert_fail@plt+0xc3cc>
   1e5dc:	ldr	r7, [r8, #4]
   1e5e0:	ldr	r1, [r6, #8]
   1e5e4:	cmp	r7, #0
   1e5e8:	beq	1e664 <__assert_fail@plt+0xc32c>
   1e5ec:	mov	sl, #0
   1e5f0:	ldr	r4, [r7]
   1e5f4:	ldr	r2, [r6, #24]
   1e5f8:	mov	r0, r4
   1e5fc:	blx	r2
   1e600:	ldr	r1, [r6, #8]
   1e604:	cmp	r0, r1
   1e608:	bcs	1e728 <__assert_fail@plt+0xc3f0>
   1e60c:	ldr	r3, [r6]
   1e610:	ldr	r2, [r7, #4]
   1e614:	ldr	r5, [r3, r0, lsl #3]
   1e618:	cmp	r5, #0
   1e61c:	beq	1e62c <__assert_fail@plt+0xc2f4>
   1e620:	add	r0, r3, r0, lsl #3
   1e624:	add	r0, r0, #4
   1e628:	b	1e644 <__assert_fail@plt+0xc30c>
   1e62c:	str	r4, [r3, r0, lsl #3]
   1e630:	ldr	r0, [r6, #12]
   1e634:	add	r0, r0, #1
   1e638:	str	r0, [r6, #12]
   1e63c:	mov	r0, r9
   1e640:	str	sl, [r7]
   1e644:	ldr	r3, [r0]
   1e648:	cmp	r2, #0
   1e64c:	str	r3, [r7, #4]
   1e650:	str	r7, [r0]
   1e654:	mov	r7, r2
   1e658:	bne	1e5f0 <__assert_fail@plt+0xc2b8>
   1e65c:	ldr	sl, [r8]
   1e660:	mov	r5, #0
   1e664:	str	r5, [r8, #4]
   1e668:	mov	r0, sl
   1e66c:	ldr	r2, [r6, #24]
   1e670:	blx	r2
   1e674:	mov	r4, r0
   1e678:	ldr	r0, [r6, #8]
   1e67c:	cmp	r4, r0
   1e680:	bcs	1e728 <__assert_fail@plt+0xc3f0>
   1e684:	ldr	r7, [r6]
   1e688:	ldr	r0, [r7, r4, lsl #3]
   1e68c:	cmp	r0, #0
   1e690:	beq	1e6b0 <__assert_fail@plt+0xc378>
   1e694:	ldr	r0, [r9]
   1e698:	cmp	r0, #0
   1e69c:	beq	1e6c4 <__assert_fail@plt+0xc38c>
   1e6a0:	mov	r1, r0
   1e6a4:	ldr	r2, [r1, #4]!
   1e6a8:	str	r2, [r9]
   1e6ac:	b	1e6d8 <__assert_fail@plt+0xc3a0>
   1e6b0:	str	sl, [r7, r4, lsl #3]
   1e6b4:	ldr	r0, [r6, #12]
   1e6b8:	add	r0, r0, #1
   1e6bc:	str	r0, [r6, #12]
   1e6c0:	b	1e6ec <__assert_fail@plt+0xc3b4>
   1e6c4:	mov	r0, #8
   1e6c8:	bl	24aec <__assert_fail@plt+0x127b4>
   1e6cc:	cmp	r0, #0
   1e6d0:	beq	1e71c <__assert_fail@plt+0xc3e4>
   1e6d4:	add	r1, r0, #4
   1e6d8:	str	sl, [r0]
   1e6dc:	add	r2, r7, r4, lsl #3
   1e6e0:	ldr	r3, [r2, #4]
   1e6e4:	str	r3, [r1]
   1e6e8:	str	r0, [r2, #4]
   1e6ec:	ldr	r0, [sp]
   1e6f0:	str	r5, [r8]
   1e6f4:	ldr	r1, [r0, #12]
   1e6f8:	ldr	r3, [r0, #4]
   1e6fc:	sub	r1, r1, #1
   1e700:	str	r1, [r0, #12]
   1e704:	add	r8, r8, #8
   1e708:	cmp	r8, r3
   1e70c:	bcc	1e5d0 <__assert_fail@plt+0xc298>
   1e710:	mov	r0, #1
   1e714:	sub	sp, fp, #28
   1e718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e71c:	mov	r0, #0
   1e720:	sub	sp, fp, #28
   1e724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e728:	bl	12314 <abort@plt>
   1e72c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e730:	add	fp, sp, #28
   1e734:	sub	sp, sp, #4
   1e738:	cmp	r1, #0
   1e73c:	beq	1ea80 <__assert_fail@plt+0xc748>
   1e740:	mov	r8, r2
   1e744:	mov	sl, r1
   1e748:	ldr	r1, [r0, #8]
   1e74c:	ldr	r2, [r0, #24]
   1e750:	mov	r4, r0
   1e754:	mov	r0, sl
   1e758:	blx	r2
   1e75c:	mov	r7, r0
   1e760:	ldr	r0, [r4, #8]
   1e764:	cmp	r7, r0
   1e768:	bcs	1ea80 <__assert_fail@plt+0xc748>
   1e76c:	ldr	r5, [r4]
   1e770:	mov	r9, r5
   1e774:	ldr	r1, [r9, r7, lsl #3]!
   1e778:	cmp	r1, #0
   1e77c:	beq	1e810 <__assert_fail@plt+0xc4d8>
   1e780:	cmp	r1, sl
   1e784:	beq	1e7b0 <__assert_fail@plt+0xc478>
   1e788:	ldr	r2, [r4, #28]
   1e78c:	mov	r0, sl
   1e790:	blx	r2
   1e794:	cmp	r0, #0
   1e798:	mov	r6, r9
   1e79c:	beq	1e7cc <__assert_fail@plt+0xc494>
   1e7a0:	ldr	r0, [r6]
   1e7a4:	cmp	r0, #0
   1e7a8:	bne	1e7b4 <__assert_fail@plt+0xc47c>
   1e7ac:	b	1e810 <__assert_fail@plt+0xc4d8>
   1e7b0:	mov	r0, sl
   1e7b4:	cmp	r8, #0
   1e7b8:	mov	r7, #0
   1e7bc:	strne	r0, [r8]
   1e7c0:	mov	r0, r7
   1e7c4:	sub	sp, fp, #28
   1e7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7cc:	add	r6, r5, r7, lsl #3
   1e7d0:	ldr	r0, [r6, #4]!
   1e7d4:	cmp	r0, #0
   1e7d8:	beq	1e810 <__assert_fail@plt+0xc4d8>
   1e7dc:	ldr	r1, [r0]
   1e7e0:	cmp	r1, sl
   1e7e4:	beq	1e804 <__assert_fail@plt+0xc4cc>
   1e7e8:	ldr	r2, [r4, #28]
   1e7ec:	mov	r0, sl
   1e7f0:	blx	r2
   1e7f4:	ldr	r6, [r6]
   1e7f8:	cmp	r0, #0
   1e7fc:	beq	1e7d0 <__assert_fail@plt+0xc498>
   1e800:	b	1e7a0 <__assert_fail@plt+0xc468>
   1e804:	mov	r0, sl
   1e808:	cmp	r0, #0
   1e80c:	bne	1e7b4 <__assert_fail@plt+0xc47c>
   1e810:	vldr	s0, [r4, #8]
   1e814:	vldr	s2, [r4, #12]
   1e818:	ldr	r0, [r4, #20]
   1e81c:	vcvt.f32.u32	s0, s0
   1e820:	vcvt.f32.u32	s4, s2
   1e824:	vldr	s2, [r0, #8]
   1e828:	vmul.f32	s6, s2, s0
   1e82c:	vcmpe.f32	s6, s4
   1e830:	vmrs	APSR_nzcv, fpscr
   1e834:	bpl	1e998 <__assert_fail@plt+0xc660>
   1e838:	movw	r1, #32848	; 0x8050
   1e83c:	movt	r1, #2
   1e840:	cmp	r0, r1
   1e844:	beq	1e8e0 <__assert_fail@plt+0xc5a8>
   1e848:	vldr	s6, [pc, #564]	; 1ea84 <__assert_fail@plt+0xc74c>
   1e84c:	vcmpe.f32	s2, s6
   1e850:	vmrs	APSR_nzcv, fpscr
   1e854:	ble	1e8bc <__assert_fail@plt+0xc584>
   1e858:	vldr	s8, [pc, #552]	; 1ea88 <__assert_fail@plt+0xc750>
   1e85c:	vcmpe.f32	s2, s8
   1e860:	vmrs	APSR_nzcv, fpscr
   1e864:	bpl	1e8bc <__assert_fail@plt+0xc584>
   1e868:	vldr	s8, [pc, #540]	; 1ea8c <__assert_fail@plt+0xc754>
   1e86c:	vldr	s10, [r0, #12]
   1e870:	vcmpe.f32	s10, s8
   1e874:	vmrs	APSR_nzcv, fpscr
   1e878:	ble	1e8bc <__assert_fail@plt+0xc584>
   1e87c:	vldr	s8, [r0]
   1e880:	vcmpe.f32	s8, #0.0
   1e884:	vmrs	APSR_nzcv, fpscr
   1e888:	blt	1e8bc <__assert_fail@plt+0xc584>
   1e88c:	vadd.f32	s6, s8, s6
   1e890:	vcmpe.f32	s6, s2
   1e894:	vmrs	APSR_nzcv, fpscr
   1e898:	bpl	1e8bc <__assert_fail@plt+0xc584>
   1e89c:	vldr	s8, [r0, #4]
   1e8a0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1e8a4:	vcmpe.f32	s8, s10
   1e8a8:	vmrs	APSR_nzcv, fpscr
   1e8ac:	bhi	1e8bc <__assert_fail@plt+0xc584>
   1e8b0:	vcmpe.f32	s6, s8
   1e8b4:	vmrs	APSR_nzcv, fpscr
   1e8b8:	bmi	1e8cc <__assert_fail@plt+0xc594>
   1e8bc:	vldr	s2, [pc, #460]	; 1ea90 <__assert_fail@plt+0xc758>
   1e8c0:	movw	r0, #32848	; 0x8050
   1e8c4:	movt	r0, #2
   1e8c8:	str	r0, [r4, #20]
   1e8cc:	vmul.f32	s6, s2, s0
   1e8d0:	vcmpe.f32	s6, s4
   1e8d4:	vmrs	APSR_nzcv, fpscr
   1e8d8:	bmi	1e8f4 <__assert_fail@plt+0xc5bc>
   1e8dc:	b	1e998 <__assert_fail@plt+0xc660>
   1e8e0:	mov	r0, r1
   1e8e4:	vmul.f32	s6, s2, s0
   1e8e8:	vcmpe.f32	s6, s4
   1e8ec:	vmrs	APSR_nzcv, fpscr
   1e8f0:	bpl	1e998 <__assert_fail@plt+0xc660>
   1e8f4:	vldr	s4, [r0, #12]
   1e8f8:	ldrb	r0, [r0, #16]
   1e8fc:	mvn	r7, #0
   1e900:	vmul.f32	s0, s4, s0
   1e904:	vldr	s4, [pc, #392]	; 1ea94 <__assert_fail@plt+0xc75c>
   1e908:	cmp	r0, #0
   1e90c:	vmul.f32	s2, s2, s0
   1e910:	vseleq.f32	s0, s2, s0
   1e914:	vcmpe.f32	s0, s4
   1e918:	vmrs	APSR_nzcv, fpscr
   1e91c:	bge	1ea14 <__assert_fail@plt+0xc6dc>
   1e920:	vcvt.u32.f32	s0, s0
   1e924:	mov	r0, r4
   1e928:	vmov	r1, s0
   1e92c:	bl	1e27c <__assert_fail@plt+0xbf44>
   1e930:	cmp	r0, #0
   1e934:	beq	1ea14 <__assert_fail@plt+0xc6dc>
   1e938:	ldr	r1, [r4, #8]
   1e93c:	ldr	r2, [r4, #24]
   1e940:	mov	r0, sl
   1e944:	blx	r2
   1e948:	mov	r7, r0
   1e94c:	ldr	r0, [r4, #8]
   1e950:	cmp	r7, r0
   1e954:	bcs	1ea80 <__assert_fail@plt+0xc748>
   1e958:	ldr	r5, [r4]
   1e95c:	mov	r9, r5
   1e960:	ldr	r1, [r9, r7, lsl #3]!
   1e964:	cmp	r1, #0
   1e968:	beq	1e9c0 <__assert_fail@plt+0xc688>
   1e96c:	cmp	r1, sl
   1e970:	mov	r0, sl
   1e974:	beq	1e990 <__assert_fail@plt+0xc658>
   1e978:	ldr	r2, [r4, #28]
   1e97c:	mov	r0, sl
   1e980:	blx	r2
   1e984:	cmp	r0, #0
   1e988:	beq	1ea30 <__assert_fail@plt+0xc6f8>
   1e98c:	ldr	r0, [r9]
   1e990:	cmp	r0, #0
   1e994:	bne	1ea80 <__assert_fail@plt+0xc748>
   1e998:	ldr	r0, [r9]
   1e99c:	cmp	r0, #0
   1e9a0:	beq	1e9c0 <__assert_fail@plt+0xc688>
   1e9a4:	ldr	r0, [r4, #36]	; 0x24
   1e9a8:	cmp	r0, #0
   1e9ac:	beq	1e9e0 <__assert_fail@plt+0xc6a8>
   1e9b0:	mov	r1, r0
   1e9b4:	ldr	r2, [r1, #4]!
   1e9b8:	str	r2, [r4, #36]	; 0x24
   1e9bc:	b	1e9f4 <__assert_fail@plt+0xc6bc>
   1e9c0:	str	sl, [r9]
   1e9c4:	ldr	r0, [r4, #12]
   1e9c8:	ldr	r1, [r4, #16]
   1e9cc:	add	r0, r0, #1
   1e9d0:	add	r1, r1, #1
   1e9d4:	str	r0, [r4, #12]
   1e9d8:	str	r1, [r4, #16]
   1e9dc:	b	1ea10 <__assert_fail@plt+0xc6d8>
   1e9e0:	mov	r0, #8
   1e9e4:	bl	24aec <__assert_fail@plt+0x127b4>
   1e9e8:	cmp	r0, #0
   1e9ec:	beq	1ea20 <__assert_fail@plt+0xc6e8>
   1e9f0:	add	r1, r0, #4
   1e9f4:	str	sl, [r0]
   1e9f8:	ldr	r2, [r9, #4]
   1e9fc:	str	r2, [r1]
   1ea00:	str	r0, [r9, #4]
   1ea04:	ldr	r0, [r4, #16]
   1ea08:	add	r0, r0, #1
   1ea0c:	str	r0, [r4, #16]
   1ea10:	mov	r7, #1
   1ea14:	mov	r0, r7
   1ea18:	sub	sp, fp, #28
   1ea1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea20:	mvn	r7, #0
   1ea24:	mov	r0, r7
   1ea28:	sub	sp, fp, #28
   1ea2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea30:	add	r6, r5, r7, lsl #3
   1ea34:	ldr	r0, [r6, #4]!
   1ea38:	cmp	r0, #0
   1ea3c:	beq	1e998 <__assert_fail@plt+0xc660>
   1ea40:	ldr	r1, [r0]
   1ea44:	cmp	r1, sl
   1ea48:	beq	1ea74 <__assert_fail@plt+0xc73c>
   1ea4c:	ldr	r2, [r4, #28]
   1ea50:	mov	r0, sl
   1ea54:	blx	r2
   1ea58:	ldr	r6, [r6]
   1ea5c:	cmp	r0, #0
   1ea60:	beq	1ea34 <__assert_fail@plt+0xc6fc>
   1ea64:	ldr	r0, [r6]
   1ea68:	cmp	r0, #0
   1ea6c:	beq	1e998 <__assert_fail@plt+0xc660>
   1ea70:	b	1ea80 <__assert_fail@plt+0xc748>
   1ea74:	mov	r0, sl
   1ea78:	cmp	r0, #0
   1ea7c:	beq	1e998 <__assert_fail@plt+0xc660>
   1ea80:	bl	12314 <abort@plt>
   1ea84:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ea88:	svccc	0x00666666
   1ea8c:	svccc	0x008ccccd
   1ea90:	svccc	0x004ccccd
   1ea94:	svcmi	0x00800000
   1ea98:	push	{r4, sl, fp, lr}
   1ea9c:	add	fp, sp, #8
   1eaa0:	sub	sp, sp, #8
   1eaa4:	add	r2, sp, #4
   1eaa8:	mov	r4, r1
   1eaac:	bl	1e72c <__assert_fail@plt+0xc3f4>
   1eab0:	cmn	r0, #1
   1eab4:	beq	1ead0 <__assert_fail@plt+0xc798>
   1eab8:	ldr	r1, [sp, #4]
   1eabc:	cmp	r0, #0
   1eac0:	moveq	r4, r1
   1eac4:	mov	r0, r4
   1eac8:	sub	sp, fp, #8
   1eacc:	pop	{r4, sl, fp, pc}
   1ead0:	mov	r4, #0
   1ead4:	mov	r0, r4
   1ead8:	sub	sp, fp, #8
   1eadc:	pop	{r4, sl, fp, pc}
   1eae0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1eae4:	add	fp, sp, #24
   1eae8:	mov	r9, r1
   1eaec:	ldr	r1, [r0, #8]
   1eaf0:	ldr	r2, [r0, #24]
   1eaf4:	mov	r5, r0
   1eaf8:	mov	r0, r9
   1eafc:	blx	r2
   1eb00:	mov	r7, r0
   1eb04:	ldr	r0, [r5, #8]
   1eb08:	cmp	r7, r0
   1eb0c:	bcs	1ed7c <__assert_fail@plt+0xca44>
   1eb10:	ldr	r6, [r5]
   1eb14:	mov	r8, #0
   1eb18:	mov	r4, r6
   1eb1c:	ldr	r1, [r4, r7, lsl #3]!
   1eb20:	cmp	r1, #0
   1eb24:	beq	1ebd8 <__assert_fail@plt+0xc8a0>
   1eb28:	cmp	r1, r9
   1eb2c:	beq	1eb48 <__assert_fail@plt+0xc810>
   1eb30:	ldr	r2, [r5, #28]
   1eb34:	mov	r0, r9
   1eb38:	blx	r2
   1eb3c:	cmp	r0, #0
   1eb40:	beq	1eb80 <__assert_fail@plt+0xc848>
   1eb44:	ldr	r9, [r4]
   1eb48:	add	r0, r6, r7, lsl #3
   1eb4c:	ldr	r0, [r0, #4]
   1eb50:	cmp	r0, #0
   1eb54:	beq	1ebc8 <__assert_fail@plt+0xc890>
   1eb58:	ldm	r0, {r1, r2}
   1eb5c:	stm	r4, {r1, r2}
   1eb60:	mov	r1, #0
   1eb64:	str	r1, [r0]
   1eb68:	ldr	r1, [r5, #36]	; 0x24
   1eb6c:	str	r1, [r0, #4]
   1eb70:	str	r0, [r5, #36]	; 0x24
   1eb74:	cmp	r9, #0
   1eb78:	bne	1ec10 <__assert_fail@plt+0xc8d8>
   1eb7c:	b	1ebd8 <__assert_fail@plt+0xc8a0>
   1eb80:	add	r7, r6, r7, lsl #3
   1eb84:	ldr	r0, [r7, #4]!
   1eb88:	cmp	r0, #0
   1eb8c:	beq	1ebd8 <__assert_fail@plt+0xc8a0>
   1eb90:	ldr	r1, [r0]
   1eb94:	cmp	r1, r9
   1eb98:	beq	1ebe0 <__assert_fail@plt+0xc8a8>
   1eb9c:	ldr	r2, [r5, #28]
   1eba0:	mov	r0, r9
   1eba4:	blx	r2
   1eba8:	ldr	r1, [r7]
   1ebac:	cmp	r0, #0
   1ebb0:	bne	1ebe8 <__assert_fail@plt+0xc8b0>
   1ebb4:	ldr	r0, [r1, #4]!
   1ebb8:	cmp	r0, #0
   1ebbc:	mov	r7, r1
   1ebc0:	bne	1eb90 <__assert_fail@plt+0xc858>
   1ebc4:	b	1ebd8 <__assert_fail@plt+0xc8a0>
   1ebc8:	mov	r0, #0
   1ebcc:	str	r0, [r4]
   1ebd0:	cmp	r9, #0
   1ebd4:	bne	1ec10 <__assert_fail@plt+0xc8d8>
   1ebd8:	mov	r0, r8
   1ebdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ebe0:	mov	r1, r0
   1ebe4:	b	1ebec <__assert_fail@plt+0xc8b4>
   1ebe8:	ldr	r9, [r1]
   1ebec:	ldr	r0, [r1, #4]
   1ebf0:	str	r0, [r7]
   1ebf4:	mov	r0, #0
   1ebf8:	str	r0, [r1]
   1ebfc:	ldr	r0, [r5, #36]	; 0x24
   1ec00:	str	r0, [r1, #4]
   1ec04:	str	r1, [r5, #36]	; 0x24
   1ec08:	cmp	r9, #0
   1ec0c:	beq	1ebd8 <__assert_fail@plt+0xc8a0>
   1ec10:	ldr	r0, [r5, #16]
   1ec14:	sub	r0, r0, #1
   1ec18:	str	r0, [r5, #16]
   1ec1c:	ldr	r0, [r4]
   1ec20:	cmp	r0, #0
   1ec24:	bne	1ed3c <__assert_fail@plt+0xca04>
   1ec28:	ldr	r0, [r5, #12]
   1ec2c:	vldr	s0, [r5, #8]
   1ec30:	sub	r1, r0, #1
   1ec34:	str	r1, [r5, #12]
   1ec38:	vmov	s2, r1
   1ec3c:	ldr	r0, [r5, #20]
   1ec40:	vcvt.f32.u32	s0, s0
   1ec44:	vcvt.f32.u32	s2, s2
   1ec48:	vldr	s4, [r0]
   1ec4c:	vmul.f32	s6, s4, s0
   1ec50:	vcmpe.f32	s6, s2
   1ec54:	vmrs	APSR_nzcv, fpscr
   1ec58:	ble	1ed3c <__assert_fail@plt+0xca04>
   1ec5c:	movw	r1, #32848	; 0x8050
   1ec60:	movt	r1, #2
   1ec64:	cmp	r0, r1
   1ec68:	beq	1ecd0 <__assert_fail@plt+0xc998>
   1ec6c:	vldr	s8, [pc, #268]	; 1ed80 <__assert_fail@plt+0xca48>
   1ec70:	vldr	s6, [r0, #8]
   1ec74:	vcmpe.f32	s6, s8
   1ec78:	vmrs	APSR_nzcv, fpscr
   1ec7c:	ble	1ecac <__assert_fail@plt+0xc974>
   1ec80:	vldr	s10, [pc, #252]	; 1ed84 <__assert_fail@plt+0xca4c>
   1ec84:	vcmpe.f32	s6, s10
   1ec88:	vmrs	APSR_nzcv, fpscr
   1ec8c:	bpl	1ecac <__assert_fail@plt+0xc974>
   1ec90:	vcmpe.f32	s4, #0.0
   1ec94:	vmrs	APSR_nzcv, fpscr
   1ec98:	vldrge	s10, [r0, #12]
   1ec9c:	vldrge	s12, [pc, #228]	; 1ed88 <__assert_fail@plt+0xca50>
   1eca0:	vcmpege.f32	s10, s12
   1eca4:	vmrsge	APSR_nzcv, fpscr
   1eca8:	bgt	1ed48 <__assert_fail@plt+0xca10>
   1ecac:	vldr	s4, [pc, #216]	; 1ed8c <__assert_fail@plt+0xca54>
   1ecb0:	movw	r0, #32848	; 0x8050
   1ecb4:	movt	r0, #2
   1ecb8:	str	r0, [r5, #20]
   1ecbc:	vmul.f32	s4, s4, s0
   1ecc0:	vcmpe.f32	s4, s2
   1ecc4:	vmrs	APSR_nzcv, fpscr
   1ecc8:	bgt	1ece4 <__assert_fail@plt+0xc9ac>
   1eccc:	b	1ed3c <__assert_fail@plt+0xca04>
   1ecd0:	mov	r0, r1
   1ecd4:	vmul.f32	s4, s4, s0
   1ecd8:	vcmpe.f32	s4, s2
   1ecdc:	vmrs	APSR_nzcv, fpscr
   1ece0:	ble	1ed3c <__assert_fail@plt+0xca04>
   1ece4:	ldrb	r1, [r0, #16]
   1ece8:	vldr	s2, [r0, #4]
   1ecec:	cmp	r1, #0
   1ecf0:	vmul.f32	s0, s2, s0
   1ecf4:	vldreq	s2, [r0, #8]
   1ecf8:	mov	r0, r5
   1ecfc:	vmuleq.f32	s0, s0, s2
   1ed00:	vcvt.u32.f32	s0, s0
   1ed04:	vmov	r1, s0
   1ed08:	bl	1e27c <__assert_fail@plt+0xbf44>
   1ed0c:	cmp	r0, #0
   1ed10:	bne	1ed3c <__assert_fail@plt+0xca04>
   1ed14:	ldr	r0, [r5, #36]	; 0x24
   1ed18:	cmp	r0, #0
   1ed1c:	beq	1ed34 <__assert_fail@plt+0xc9fc>
   1ed20:	ldr	r4, [r0, #4]
   1ed24:	bl	1d88c <__assert_fail@plt+0xb554>
   1ed28:	cmp	r4, #0
   1ed2c:	mov	r0, r4
   1ed30:	bne	1ed20 <__assert_fail@plt+0xc9e8>
   1ed34:	mov	r0, #0
   1ed38:	str	r0, [r5, #36]	; 0x24
   1ed3c:	mov	r8, r9
   1ed40:	mov	r0, r8
   1ed44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ed48:	vadd.f32	s8, s4, s8
   1ed4c:	vcmpe.f32	s8, s6
   1ed50:	vmrs	APSR_nzcv, fpscr
   1ed54:	bpl	1ecac <__assert_fail@plt+0xc974>
   1ed58:	vldr	s6, [r0, #4]
   1ed5c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1ed60:	vcmpe.f32	s6, s10
   1ed64:	vmrs	APSR_nzcv, fpscr
   1ed68:	bhi	1ecac <__assert_fail@plt+0xc974>
   1ed6c:	vcmpe.f32	s8, s6
   1ed70:	vmrs	APSR_nzcv, fpscr
   1ed74:	bmi	1ecd4 <__assert_fail@plt+0xc99c>
   1ed78:	b	1ecac <__assert_fail@plt+0xc974>
   1ed7c:	bl	12314 <abort@plt>
   1ed80:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ed84:	svccc	0x00666666
   1ed88:	svccc	0x008ccccd
   1ed8c:	andeq	r0, r0, r0
   1ed90:	b	1eae0 <__assert_fail@plt+0xc7a8>
   1ed94:	push	{r4, r5, r6, sl, fp, lr}
   1ed98:	add	fp, sp, #16
   1ed9c:	mov	r5, r0
   1eda0:	mov	r0, #16
   1eda4:	mov	r4, r1
   1eda8:	bl	234d0 <__assert_fail@plt+0x11198>
   1edac:	cmp	r4, #0
   1edb0:	mov	r6, r0
   1edb4:	mov	r1, #4
   1edb8:	movweq	r4, #1
   1edbc:	mov	r0, r4
   1edc0:	bl	235a0 <__assert_fail@plt+0x11268>
   1edc4:	movw	r2, #60912	; 0xedf0
   1edc8:	mov	r1, #0
   1edcc:	cmp	r5, #0
   1edd0:	movt	r2, #1
   1edd4:	str	r1, [r0]
   1edd8:	stm	r6, {r0, r4}
   1eddc:	mov	r0, r6
   1ede0:	str	r1, [r6, #8]
   1ede4:	movne	r2, r5
   1ede8:	str	r2, [r6, #12]
   1edec:	pop	{r4, r5, r6, sl, fp, pc}
   1edf0:	mov	r0, #0
   1edf4:	bx	lr
   1edf8:	push	{r4, sl, fp, lr}
   1edfc:	add	fp, sp, #8
   1ee00:	mov	r4, r0
   1ee04:	ldr	r0, [r0]
   1ee08:	bl	1d88c <__assert_fail@plt+0xb554>
   1ee0c:	mov	r0, r4
   1ee10:	pop	{r4, sl, fp, lr}
   1ee14:	b	1d88c <__assert_fail@plt+0xb554>
   1ee18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ee1c:	add	fp, sp, #24
   1ee20:	mov	r6, r1
   1ee24:	mov	r1, r0
   1ee28:	mov	r4, r0
   1ee2c:	ldr	r0, [r1, #4]!
   1ee30:	ldr	r2, [r1, #4]
   1ee34:	sub	r0, r0, #1
   1ee38:	cmp	r0, r2
   1ee3c:	bls	1ee48 <__assert_fail@plt+0xcb10>
   1ee40:	ldr	r0, [r4]
   1ee44:	b	1ee5c <__assert_fail@plt+0xcb24>
   1ee48:	ldr	r0, [r4]
   1ee4c:	mov	r2, #4
   1ee50:	bl	2367c <__assert_fail@plt+0x11344>
   1ee54:	str	r0, [r4]
   1ee58:	ldr	r2, [r4, #8]
   1ee5c:	add	r5, r2, #1
   1ee60:	mov	r8, #1
   1ee64:	cmp	r2, #0
   1ee68:	str	r5, [r4, #8]
   1ee6c:	str	r6, [r0, r5, lsl #2]
   1ee70:	ldr	r6, [r4]
   1ee74:	ldr	r9, [r6, r5, lsl #2]
   1ee78:	beq	1eeac <__assert_fail@plt+0xcb74>
   1ee7c:	ldr	r4, [r4, #12]
   1ee80:	lsr	r7, r5, #1
   1ee84:	mov	r1, r9
   1ee88:	ldr	r0, [r6, r7, lsl #2]
   1ee8c:	blx	r4
   1ee90:	cmp	r0, #0
   1ee94:	bgt	1eeb8 <__assert_fail@plt+0xcb80>
   1ee98:	ldr	r0, [r6, r7, lsl #2]
   1ee9c:	cmp	r7, #1
   1eea0:	str	r0, [r6, r5, lsl #2]
   1eea4:	mov	r5, r7
   1eea8:	bne	1ee80 <__assert_fail@plt+0xcb48>
   1eeac:	mov	r0, #0
   1eeb0:	str	r9, [r6, r8, lsl #2]
   1eeb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eeb8:	mov	r8, r5
   1eebc:	mov	r0, #0
   1eec0:	str	r9, [r6, r8, lsl #2]
   1eec4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eec8:	ldr	r1, [r0, #8]
   1eecc:	cmp	r1, #0
   1eed0:	moveq	r0, #0
   1eed4:	bxeq	lr
   1eed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eedc:	add	fp, sp, #28
   1eee0:	sub	sp, sp, #12
   1eee4:	ldr	r2, [r0]
   1eee8:	sub	r6, r1, #1
   1eeec:	ldr	r3, [r2, #4]
   1eef0:	str	r6, [r0, #8]
   1eef4:	ldr	r1, [r2, r1, lsl #2]
   1eef8:	str	r3, [sp, #4]
   1eefc:	str	r1, [r2, #4]
   1ef00:	ldr	r9, [r0]
   1ef04:	mov	r7, r9
   1ef08:	ldr	r1, [r7, #4]!
   1ef0c:	str	r1, [sp, #8]
   1ef10:	mov	r1, #0
   1ef14:	cmp	r1, r6, lsr #1
   1ef18:	beq	1ef80 <__assert_fail@plt+0xcc48>
   1ef1c:	ldr	r5, [r0, #12]
   1ef20:	lsr	sl, r6, #1
   1ef24:	mov	r8, #1
   1ef28:	lsl	r4, r8, #1
   1ef2c:	cmp	r6, r8, lsl #1
   1ef30:	bls	1ef4c <__assert_fail@plt+0xcc14>
   1ef34:	orr	r7, r4, #1
   1ef38:	ldr	r0, [r9, r4, lsl #2]
   1ef3c:	ldr	r1, [r9, r7, lsl #2]
   1ef40:	blx	r5
   1ef44:	cmp	r0, #0
   1ef48:	movlt	r4, r7
   1ef4c:	mov	r7, r9
   1ef50:	ldr	r1, [sp, #8]
   1ef54:	ldr	r0, [r7, r4, lsl #2]!
   1ef58:	blx	r5
   1ef5c:	cmp	r0, #0
   1ef60:	ble	1ef7c <__assert_fail@plt+0xcc44>
   1ef64:	ldr	r0, [r9, r4, lsl #2]
   1ef68:	cmp	r4, sl
   1ef6c:	str	r0, [r9, r8, lsl #2]
   1ef70:	mov	r8, r4
   1ef74:	bls	1ef28 <__assert_fail@plt+0xcbf0>
   1ef78:	b	1ef80 <__assert_fail@plt+0xcc48>
   1ef7c:	add	r7, r9, r8, lsl #2
   1ef80:	ldr	r0, [sp, #8]
   1ef84:	str	r0, [r7]
   1ef88:	ldr	r0, [sp, #4]
   1ef8c:	sub	sp, fp, #28
   1ef90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef94:	movw	ip, #26215	; 0x6667
   1ef98:	mov	r2, #0
   1ef9c:	cmp	r0, #0
   1efa0:	strb	r2, [r1, #11]
   1efa4:	add	r1, r1, #10
   1efa8:	movt	ip, #26214	; 0x6666
   1efac:	blt	1efe8 <__assert_fail@plt+0xccb0>
   1efb0:	smmul	r3, r0, ip
   1efb4:	asr	r2, r3, #2
   1efb8:	add	r2, r2, r3, lsr #31
   1efbc:	add	r3, r2, r2, lsl #2
   1efc0:	sub	r3, r0, r3, lsl #1
   1efc4:	add	r0, r0, #9
   1efc8:	add	r3, r3, #48	; 0x30
   1efcc:	cmp	r0, #18
   1efd0:	mov	r0, r2
   1efd4:	strb	r3, [r1], #-1
   1efd8:	bhi	1efb0 <__assert_fail@plt+0xcc78>
   1efdc:	add	r1, r1, #1
   1efe0:	mov	r0, r1
   1efe4:	bx	lr
   1efe8:	smmul	r3, r0, ip
   1efec:	asr	r2, r3, #2
   1eff0:	add	r2, r2, r3, lsr #31
   1eff4:	add	r3, r2, r2, lsl #2
   1eff8:	rsb	r3, r0, r3, lsl #1
   1effc:	add	r0, r0, #9
   1f000:	add	r3, r3, #48	; 0x30
   1f004:	cmp	r0, #18
   1f008:	mov	r0, r2
   1f00c:	strb	r3, [r1], #-1
   1f010:	bhi	1efe8 <__assert_fail@plt+0xccb0>
   1f014:	mov	r0, #45	; 0x2d
   1f018:	strb	r0, [r1]
   1f01c:	mov	r0, r1
   1f020:	bx	lr
   1f024:	movw	ip, #52429	; 0xcccd
   1f028:	mov	r2, #0
   1f02c:	strb	r2, [r1, #10]
   1f030:	add	r1, r1, #9
   1f034:	movt	ip, #52428	; 0xcccc
   1f038:	umull	r3, r2, r0, ip
   1f03c:	cmp	r0, #9
   1f040:	lsr	r2, r2, #3
   1f044:	add	r3, r2, r2, lsl #2
   1f048:	sub	r3, r0, r3, lsl #1
   1f04c:	mov	r0, r2
   1f050:	orr	r3, r3, #48	; 0x30
   1f054:	strb	r3, [r1], #-1
   1f058:	bhi	1f038 <__assert_fail@plt+0xcd00>
   1f05c:	add	r0, r1, #1
   1f060:	bx	lr
   1f064:	push	{r4, r5, r6, sl, fp, lr}
   1f068:	add	fp, sp, #16
   1f06c:	mov	r5, r0
   1f070:	mov	r0, #0
   1f074:	mov	r4, r1
   1f078:	add	r6, r2, #19
   1f07c:	strb	r0, [r2, #20]
   1f080:	mov	r0, r5
   1f084:	mov	r1, r4
   1f088:	mov	r2, #10
   1f08c:	mov	r3, #0
   1f090:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   1f094:	add	r2, r0, r0, lsl #2
   1f098:	sub	r2, r5, r2, lsl #1
   1f09c:	orr	r2, r2, #48	; 0x30
   1f0a0:	strb	r2, [r6], #-1
   1f0a4:	rsbs	r2, r5, #9
   1f0a8:	mov	r5, r0
   1f0ac:	rscs	r2, r4, #0
   1f0b0:	mov	r4, r1
   1f0b4:	bcc	1f080 <__assert_fail@plt+0xcd48>
   1f0b8:	add	r0, r6, #1
   1f0bc:	pop	{r4, r5, r6, sl, fp, pc}
   1f0c0:	push	{r4, r5, fp, lr}
   1f0c4:	add	fp, sp, #8
   1f0c8:	mov	r4, r1
   1f0cc:	mov	r5, r0
   1f0d0:	bl	12140 <strlen@plt>
   1f0d4:	mov	r1, r0
   1f0d8:	mov	r0, r5
   1f0dc:	mov	r2, r4
   1f0e0:	pop	{r4, r5, fp, lr}
   1f0e4:	b	1f0e8 <__assert_fail@plt+0xcdb0>
   1f0e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0ec:	add	fp, sp, #28
   1f0f0:	sub	sp, sp, #20
   1f0f4:	mov	r4, r2
   1f0f8:	mov	r6, r1
   1f0fc:	mov	r5, r0
   1f100:	add	r7, r0, r1
   1f104:	bl	12044 <__ctype_get_mb_cur_max@plt>
   1f108:	cmp	r0, #1
   1f10c:	bls	1f3f4 <__assert_fail@plt+0xd0bc>
   1f110:	cmp	r6, #1
   1f114:	blt	1f4ac <__assert_fail@plt+0xd174>
   1f118:	and	sl, r4, #1
   1f11c:	mov	r3, #0
   1f120:	add	r8, sp, #4
   1f124:	add	r9, sp, #8
   1f128:	tst	r4, #2
   1f12c:	eor	r2, sl, #1
   1f130:	bne	1f4bc <__assert_fail@plt+0xd184>
   1f134:	mov	r4, #0
   1f138:	ldrb	r0, [r5]
   1f13c:	sub	r0, r0, #32
   1f140:	cmp	r0, #94	; 0x5e
   1f144:	bhi	1f2e0 <__assert_fail@plt+0xcfa8>
   1f148:	add	r1, pc, #0
   1f14c:	ldr	pc, [r1, r0, lsl #2]
   1f150:	andeq	pc, r1, ip, asr #5
   1f154:	andeq	pc, r1, ip, asr #5
   1f158:	andeq	pc, r1, ip, asr #5
   1f15c:	andeq	pc, r1, ip, asr #5
   1f160:	andeq	pc, r1, r0, ror #5
   1f164:	andeq	pc, r1, ip, asr #5
   1f168:	andeq	pc, r1, ip, asr #5
   1f16c:	andeq	pc, r1, ip, asr #5
   1f170:	andeq	pc, r1, ip, asr #5
   1f174:	andeq	pc, r1, ip, asr #5
   1f178:	andeq	pc, r1, ip, asr #5
   1f17c:	andeq	pc, r1, ip, asr #5
   1f180:	andeq	pc, r1, ip, asr #5
   1f184:	andeq	pc, r1, ip, asr #5
   1f188:	andeq	pc, r1, ip, asr #5
   1f18c:	andeq	pc, r1, ip, asr #5
   1f190:	andeq	pc, r1, ip, asr #5
   1f194:	andeq	pc, r1, ip, asr #5
   1f198:	andeq	pc, r1, ip, asr #5
   1f19c:	andeq	pc, r1, ip, asr #5
   1f1a0:	andeq	pc, r1, ip, asr #5
   1f1a4:	andeq	pc, r1, ip, asr #5
   1f1a8:	andeq	pc, r1, ip, asr #5
   1f1ac:	andeq	pc, r1, ip, asr #5
   1f1b0:	andeq	pc, r1, ip, asr #5
   1f1b4:	andeq	pc, r1, ip, asr #5
   1f1b8:	andeq	pc, r1, ip, asr #5
   1f1bc:	andeq	pc, r1, ip, asr #5
   1f1c0:	andeq	pc, r1, ip, asr #5
   1f1c4:	andeq	pc, r1, ip, asr #5
   1f1c8:	andeq	pc, r1, ip, asr #5
   1f1cc:	andeq	pc, r1, ip, asr #5
   1f1d0:	andeq	pc, r1, r0, ror #5
   1f1d4:	andeq	pc, r1, ip, asr #5
   1f1d8:	andeq	pc, r1, ip, asr #5
   1f1dc:	andeq	pc, r1, ip, asr #5
   1f1e0:	andeq	pc, r1, ip, asr #5
   1f1e4:	andeq	pc, r1, ip, asr #5
   1f1e8:	andeq	pc, r1, ip, asr #5
   1f1ec:	andeq	pc, r1, ip, asr #5
   1f1f0:	andeq	pc, r1, ip, asr #5
   1f1f4:	andeq	pc, r1, ip, asr #5
   1f1f8:	andeq	pc, r1, ip, asr #5
   1f1fc:	andeq	pc, r1, ip, asr #5
   1f200:	andeq	pc, r1, ip, asr #5
   1f204:	andeq	pc, r1, ip, asr #5
   1f208:	andeq	pc, r1, ip, asr #5
   1f20c:	andeq	pc, r1, ip, asr #5
   1f210:	andeq	pc, r1, ip, asr #5
   1f214:	andeq	pc, r1, ip, asr #5
   1f218:	andeq	pc, r1, ip, asr #5
   1f21c:	andeq	pc, r1, ip, asr #5
   1f220:	andeq	pc, r1, ip, asr #5
   1f224:	andeq	pc, r1, ip, asr #5
   1f228:	andeq	pc, r1, ip, asr #5
   1f22c:	andeq	pc, r1, ip, asr #5
   1f230:	andeq	pc, r1, ip, asr #5
   1f234:	andeq	pc, r1, ip, asr #5
   1f238:	andeq	pc, r1, ip, asr #5
   1f23c:	andeq	pc, r1, ip, asr #5
   1f240:	andeq	pc, r1, ip, asr #5
   1f244:	andeq	pc, r1, ip, asr #5
   1f248:	andeq	pc, r1, ip, asr #5
   1f24c:	andeq	pc, r1, ip, asr #5
   1f250:	andeq	pc, r1, r0, ror #5
   1f254:	andeq	pc, r1, ip, asr #5
   1f258:	andeq	pc, r1, ip, asr #5
   1f25c:	andeq	pc, r1, ip, asr #5
   1f260:	andeq	pc, r1, ip, asr #5
   1f264:	andeq	pc, r1, ip, asr #5
   1f268:	andeq	pc, r1, ip, asr #5
   1f26c:	andeq	pc, r1, ip, asr #5
   1f270:	andeq	pc, r1, ip, asr #5
   1f274:	andeq	pc, r1, ip, asr #5
   1f278:	andeq	pc, r1, ip, asr #5
   1f27c:	andeq	pc, r1, ip, asr #5
   1f280:	andeq	pc, r1, ip, asr #5
   1f284:	andeq	pc, r1, ip, asr #5
   1f288:	andeq	pc, r1, ip, asr #5
   1f28c:	andeq	pc, r1, ip, asr #5
   1f290:	andeq	pc, r1, ip, asr #5
   1f294:	andeq	pc, r1, ip, asr #5
   1f298:	andeq	pc, r1, ip, asr #5
   1f29c:	andeq	pc, r1, ip, asr #5
   1f2a0:	andeq	pc, r1, ip, asr #5
   1f2a4:	andeq	pc, r1, ip, asr #5
   1f2a8:	andeq	pc, r1, ip, asr #5
   1f2ac:	andeq	pc, r1, ip, asr #5
   1f2b0:	andeq	pc, r1, ip, asr #5
   1f2b4:	andeq	pc, r1, ip, asr #5
   1f2b8:	andeq	pc, r1, ip, asr #5
   1f2bc:	andeq	pc, r1, ip, asr #5
   1f2c0:	andeq	pc, r1, ip, asr #5
   1f2c4:	andeq	pc, r1, ip, asr #5
   1f2c8:	andeq	pc, r1, ip, asr #5
   1f2cc:	add	r4, r4, #1
   1f2d0:	add	r5, r5, #1
   1f2d4:	cmp	r5, r7
   1f2d8:	bcc	1f138 <__assert_fail@plt+0xce00>
   1f2dc:	b	1f760 <__assert_fail@plt+0xd428>
   1f2e0:	str	r2, [sp]
   1f2e4:	str	r3, [sp, #12]
   1f2e8:	str	r3, [sp, #8]
   1f2ec:	sub	r2, r7, r5
   1f2f0:	mov	r0, r8
   1f2f4:	mov	r1, r5
   1f2f8:	mov	r3, r9
   1f2fc:	mov	r6, r5
   1f300:	bl	25314 <__assert_fail@plt+0x12fdc>
   1f304:	cmp	r0, #0
   1f308:	beq	1f348 <__assert_fail@plt+0xd010>
   1f30c:	mov	r5, r0
   1f310:	cmn	r0, #2
   1f314:	beq	1f398 <__assert_fail@plt+0xd060>
   1f318:	cmn	r5, #1
   1f31c:	beq	1f3b4 <__assert_fail@plt+0xd07c>
   1f320:	ldr	r0, [sp, #4]
   1f324:	bl	11e70 <wcwidth@plt>
   1f328:	cmn	r0, #1
   1f32c:	ble	1f35c <__assert_fail@plt+0xd024>
   1f330:	mvn	r1, #-2147483648	; 0x80000000
   1f334:	sub	r1, r1, r4
   1f338:	cmp	r0, r1
   1f33c:	bgt	1f390 <__assert_fail@plt+0xd058>
   1f340:	add	r4, r0, r4
   1f344:	b	1f378 <__assert_fail@plt+0xd040>
   1f348:	mov	r5, #1
   1f34c:	ldr	r0, [sp, #4]
   1f350:	bl	11e70 <wcwidth@plt>
   1f354:	cmn	r0, #1
   1f358:	bgt	1f330 <__assert_fail@plt+0xcff8>
   1f35c:	ldr	r0, [sp, #4]
   1f360:	bl	11fc0 <iswcntrl@plt>
   1f364:	cmp	r0, #0
   1f368:	bne	1f378 <__assert_fail@plt+0xd040>
   1f36c:	cmn	r4, #-2147483647	; 0x80000001
   1f370:	beq	1f390 <__assert_fail@plt+0xd058>
   1f374:	add	r4, r4, #1
   1f378:	mov	r0, r9
   1f37c:	add	r5, r6, r5
   1f380:	bl	11ef4 <mbsinit@plt>
   1f384:	cmp	r0, #0
   1f388:	beq	1f2ec <__assert_fail@plt+0xcfb4>
   1f38c:	b	1f3c8 <__assert_fail@plt+0xd090>
   1f390:	mov	r0, #7
   1f394:	b	1f3dc <__assert_fail@plt+0xd0a4>
   1f398:	ldr	r0, [sp]
   1f39c:	cmp	sl, #0
   1f3a0:	mov	r5, r7
   1f3a4:	add	r4, r4, r0
   1f3a8:	mov	r0, #1
   1f3ac:	beq	1f3c8 <__assert_fail@plt+0xd090>
   1f3b0:	b	1f3dc <__assert_fail@plt+0xd0a4>
   1f3b4:	mov	r0, #1
   1f3b8:	cmp	sl, #0
   1f3bc:	bne	1f3dc <__assert_fail@plt+0xd0a4>
   1f3c0:	add	r4, r4, #1
   1f3c4:	add	r5, r6, #1
   1f3c8:	ldr	r2, [sp]
   1f3cc:	mov	r3, #0
   1f3d0:	cmp	r5, r7
   1f3d4:	bcc	1f138 <__assert_fail@plt+0xce00>
   1f3d8:	b	1f760 <__assert_fail@plt+0xd428>
   1f3dc:	ldr	r2, [sp]
   1f3e0:	cmp	r0, #0
   1f3e4:	mov	r5, r6
   1f3e8:	mov	r3, #0
   1f3ec:	beq	1f2d4 <__assert_fail@plt+0xcf9c>
   1f3f0:	b	1f448 <__assert_fail@plt+0xd110>
   1f3f4:	tst	r4, #2
   1f3f8:	bne	1f450 <__assert_fail@plt+0xd118>
   1f3fc:	mov	r4, #0
   1f400:	cmp	r5, r7
   1f404:	bcs	1f760 <__assert_fail@plt+0xd428>
   1f408:	ldrb	r6, [r5], #1
   1f40c:	bl	1211c <__ctype_b_loc@plt>
   1f410:	ldr	r0, [r0]
   1f414:	add	r0, r0, r6, lsl #1
   1f418:	ldrh	r1, [r0]
   1f41c:	tst	r1, #16384	; 0x4000
   1f420:	bne	1f430 <__assert_fail@plt+0xd0f8>
   1f424:	mov	r0, #0
   1f428:	tst	r1, #2
   1f42c:	bne	1f440 <__assert_fail@plt+0xd108>
   1f430:	cmn	r4, #-2147483647	; 0x80000001
   1f434:	mov	r0, #0
   1f438:	mvneq	r0, #0
   1f43c:	addne	r4, r4, #1
   1f440:	ands	r0, r0, #7
   1f444:	beq	1f400 <__assert_fail@plt+0xd0c8>
   1f448:	mvn	r4, #0
   1f44c:	b	1f498 <__assert_fail@plt+0xd160>
   1f450:	mov	r6, #0
   1f454:	cmp	r5, r7
   1f458:	bcs	1f75c <__assert_fail@plt+0xd424>
   1f45c:	ldrb	r4, [r5]
   1f460:	bl	1211c <__ctype_b_loc@plt>
   1f464:	ldr	r0, [r0]
   1f468:	add	r0, r0, r4, lsl #1
   1f46c:	mvn	r4, #0
   1f470:	ldrb	r0, [r0, #1]
   1f474:	tst	r0, #64	; 0x40
   1f478:	beq	1f760 <__assert_fail@plt+0xd428>
   1f47c:	cmn	r6, #-2147483647	; 0x80000001
   1f480:	mov	r0, #0
   1f484:	add	r5, r5, #1
   1f488:	movweq	r0, #7
   1f48c:	addne	r6, r6, #1
   1f490:	cmp	r0, #0
   1f494:	beq	1f454 <__assert_fail@plt+0xd11c>
   1f498:	cmp	r0, #7
   1f49c:	mvneq	r4, #-2147483648	; 0x80000000
   1f4a0:	mov	r0, r4
   1f4a4:	sub	sp, fp, #28
   1f4a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4ac:	mov	r4, #0
   1f4b0:	mov	r0, r4
   1f4b4:	sub	sp, fp, #28
   1f4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4bc:	mov	r4, #0
   1f4c0:	ldrb	r0, [r5]
   1f4c4:	sub	r0, r0, #32
   1f4c8:	cmp	r0, #94	; 0x5e
   1f4cc:	bhi	1f668 <__assert_fail@plt+0xd330>
   1f4d0:	add	r1, pc, #0
   1f4d4:	ldr	pc, [r1, r0, lsl #2]
   1f4d8:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f4dc:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f4e0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f4e4:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f4e8:	andeq	pc, r1, r8, ror #12
   1f4ec:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f4f0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f4f4:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f4f8:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f4fc:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f500:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f504:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f508:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f50c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f510:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f514:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f518:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f51c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f520:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f524:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f528:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f52c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f530:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f534:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f538:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f53c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f540:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f544:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f548:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f54c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f550:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f554:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f558:	andeq	pc, r1, r8, ror #12
   1f55c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f560:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f564:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f568:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f56c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f570:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f574:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f578:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f57c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f580:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f584:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f588:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f58c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f590:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f594:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f598:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f59c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5a0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5a4:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5a8:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5ac:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5b0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5b4:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5b8:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5bc:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5c0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5c4:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5c8:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5cc:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5d0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5d4:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5d8:	andeq	pc, r1, r8, ror #12
   1f5dc:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5e0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5e4:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5e8:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5ec:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5f0:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5f4:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5f8:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f5fc:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f600:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f604:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f608:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f60c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f610:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f614:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f618:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f61c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f620:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f624:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f628:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f62c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f630:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f634:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f638:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f63c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f640:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f644:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f648:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f64c:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f650:	andeq	pc, r1, r4, asr r6	; <UNPREDICTABLE>
   1f654:	add	r4, r4, #1
   1f658:	add	r5, r5, #1
   1f65c:	cmp	r5, r7
   1f660:	bcc	1f4c0 <__assert_fail@plt+0xd188>
   1f664:	b	1f760 <__assert_fail@plt+0xd428>
   1f668:	mov	r6, r5
   1f66c:	str	r2, [sp]
   1f670:	str	r3, [sp, #12]
   1f674:	str	r3, [sp, #8]
   1f678:	sub	r2, r7, r6
   1f67c:	mov	r0, r8
   1f680:	mov	r1, r6
   1f684:	mov	r3, r9
   1f688:	bl	25314 <__assert_fail@plt+0x12fdc>
   1f68c:	cmp	r0, #0
   1f690:	beq	1f6ac <__assert_fail@plt+0xd374>
   1f694:	mov	r5, r0
   1f698:	cmn	r0, #2
   1f69c:	beq	1f700 <__assert_fail@plt+0xd3c8>
   1f6a0:	cmn	r5, #1
   1f6a4:	bne	1f6b0 <__assert_fail@plt+0xd378>
   1f6a8:	b	1f71c <__assert_fail@plt+0xd3e4>
   1f6ac:	mov	r5, #1
   1f6b0:	ldr	r0, [sp, #4]
   1f6b4:	bl	11e70 <wcwidth@plt>
   1f6b8:	cmp	r0, #0
   1f6bc:	blt	1f6f0 <__assert_fail@plt+0xd3b8>
   1f6c0:	mvn	r1, #-2147483648	; 0x80000000
   1f6c4:	sub	r1, r1, r4
   1f6c8:	cmp	r0, r1
   1f6cc:	bgt	1f6f8 <__assert_fail@plt+0xd3c0>
   1f6d0:	add	r4, r0, r4
   1f6d4:	mov	r0, r9
   1f6d8:	add	r6, r6, r5
   1f6dc:	bl	11ef4 <mbsinit@plt>
   1f6e0:	cmp	r0, #0
   1f6e4:	mov	r5, r6
   1f6e8:	beq	1f678 <__assert_fail@plt+0xd340>
   1f6ec:	b	1f730 <__assert_fail@plt+0xd3f8>
   1f6f0:	mov	r0, #1
   1f6f4:	b	1f744 <__assert_fail@plt+0xd40c>
   1f6f8:	mov	r0, #7
   1f6fc:	b	1f744 <__assert_fail@plt+0xd40c>
   1f700:	ldr	r0, [sp]
   1f704:	cmp	sl, #0
   1f708:	mov	r5, r7
   1f70c:	add	r4, r4, r0
   1f710:	mov	r0, #1
   1f714:	bne	1f744 <__assert_fail@plt+0xd40c>
   1f718:	b	1f730 <__assert_fail@plt+0xd3f8>
   1f71c:	mov	r0, #1
   1f720:	cmp	sl, #0
   1f724:	bne	1f744 <__assert_fail@plt+0xd40c>
   1f728:	add	r4, r4, #1
   1f72c:	add	r5, r6, #1
   1f730:	ldr	r2, [sp]
   1f734:	mov	r3, #0
   1f738:	cmp	r5, r7
   1f73c:	bcc	1f4c0 <__assert_fail@plt+0xd188>
   1f740:	b	1f760 <__assert_fail@plt+0xd428>
   1f744:	ldr	r2, [sp]
   1f748:	cmp	r0, #0
   1f74c:	mov	r5, r6
   1f750:	mov	r3, #0
   1f754:	beq	1f65c <__assert_fail@plt+0xd324>
   1f758:	b	1f448 <__assert_fail@plt+0xd110>
   1f75c:	mov	r4, r6
   1f760:	mov	r0, r4
   1f764:	sub	sp, fp, #28
   1f768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f76c:	push	{r4, r5, fp, lr}
   1f770:	add	fp, sp, #8
   1f774:	sub	sp, sp, #128	; 0x80
   1f778:	mvn	r4, #0
   1f77c:	cmp	r0, #2
   1f780:	bne	1f7dc <__assert_fail@plt+0xd4a4>
   1f784:	movw	r0, #32868	; 0x8064
   1f788:	movt	r0, #2
   1f78c:	bl	120a4 <getenv@plt>
   1f790:	bl	1f8a4 <__assert_fail@plt+0xd56c>
   1f794:	mov	r5, r0
   1f798:	movw	r0, #32884	; 0x8074
   1f79c:	movt	r0, #2
   1f7a0:	bl	120a4 <getenv@plt>
   1f7a4:	bl	1f8a4 <__assert_fail@plt+0xd56c>
   1f7a8:	mov	r1, r0
   1f7ac:	cmp	r0, #0
   1f7b0:	mvneq	r1, #0
   1f7b4:	cmp	r5, r1
   1f7b8:	mov	r4, r1
   1f7bc:	movcc	r4, r5
   1f7c0:	cmp	r5, #0
   1f7c4:	beq	1f7d4 <__assert_fail@plt+0xd49c>
   1f7c8:	mov	r0, r4
   1f7cc:	sub	sp, fp, #8
   1f7d0:	pop	{r4, r5, fp, pc}
   1f7d4:	mov	r0, #1
   1f7d8:	mov	r4, r1
   1f7dc:	cmp	r0, #1
   1f7e0:	bne	1f814 <__assert_fail@plt+0xd4dc>
   1f7e4:	mov	r2, sp
   1f7e8:	mov	r0, #0
   1f7ec:	mov	r1, #128	; 0x80
   1f7f0:	bl	122c0 <sched_getaffinity@plt>
   1f7f4:	cmp	r0, #0
   1f7f8:	beq	1f878 <__assert_fail@plt+0xd540>
   1f7fc:	mov	r0, #84	; 0x54
   1f800:	bl	11f6c <sysconf@plt>
   1f804:	mov	r5, r0
   1f808:	cmp	r0, #0
   1f80c:	movle	r5, #1
   1f810:	b	1f890 <__assert_fail@plt+0xd558>
   1f814:	mov	r0, #83	; 0x53
   1f818:	bl	11f6c <sysconf@plt>
   1f81c:	mov	r5, r0
   1f820:	sub	r0, r0, #1
   1f824:	cmp	r0, #1
   1f828:	bhi	1f860 <__assert_fail@plt+0xd528>
   1f82c:	mov	r2, sp
   1f830:	mov	r0, #0
   1f834:	mov	r1, #128	; 0x80
   1f838:	bl	122c0 <sched_getaffinity@plt>
   1f83c:	cmp	r0, #0
   1f840:	bne	1f890 <__assert_fail@plt+0xd558>
   1f844:	mov	r1, sp
   1f848:	mov	r0, #128	; 0x80
   1f84c:	bl	11f0c <__sched_cpucount@plt>
   1f850:	cmp	r0, #0
   1f854:	cmpne	r0, r5
   1f858:	bls	1f890 <__assert_fail@plt+0xd558>
   1f85c:	b	1f864 <__assert_fail@plt+0xd52c>
   1f860:	mov	r0, r5
   1f864:	cmp	r0, #0
   1f868:	mov	r5, r0
   1f86c:	bgt	1f890 <__assert_fail@plt+0xd558>
   1f870:	mov	r5, #1
   1f874:	b	1f890 <__assert_fail@plt+0xd558>
   1f878:	mov	r1, sp
   1f87c:	mov	r0, #128	; 0x80
   1f880:	bl	11f0c <__sched_cpucount@plt>
   1f884:	cmp	r0, #0
   1f888:	beq	1f7fc <__assert_fail@plt+0xd4c4>
   1f88c:	mov	r5, r0
   1f890:	cmp	r5, r4
   1f894:	movcc	r4, r5
   1f898:	mov	r0, r4
   1f89c:	sub	sp, fp, #8
   1f8a0:	pop	{r4, r5, fp, pc}
   1f8a4:	push	{fp, lr}
   1f8a8:	mov	fp, sp
   1f8ac:	sub	sp, sp, #8
   1f8b0:	mov	r2, r0
   1f8b4:	mov	r0, #0
   1f8b8:	cmp	r2, #0
   1f8bc:	bne	1f8c8 <__assert_fail@plt+0xd590>
   1f8c0:	b	1f93c <__assert_fail@plt+0xd604>
   1f8c4:	add	r2, r2, #1
   1f8c8:	ldrb	r1, [r2]
   1f8cc:	sub	r3, r1, #9
   1f8d0:	cmp	r3, #5
   1f8d4:	bcc	1f8c4 <__assert_fail@plt+0xd58c>
   1f8d8:	cmp	r1, #32
   1f8dc:	beq	1f8c4 <__assert_fail@plt+0xd58c>
   1f8e0:	sub	r1, r1, #48	; 0x30
   1f8e4:	cmp	r1, #9
   1f8e8:	bhi	1f93c <__assert_fail@plt+0xd604>
   1f8ec:	mov	r0, #0
   1f8f0:	add	r1, sp, #4
   1f8f4:	str	r0, [sp, #4]
   1f8f8:	mov	r0, r2
   1f8fc:	mov	r2, #10
   1f900:	bl	12134 <strtoul@plt>
   1f904:	ldr	r1, [sp, #4]
   1f908:	cmp	r1, #0
   1f90c:	bne	1f918 <__assert_fail@plt+0xd5e0>
   1f910:	b	1f948 <__assert_fail@plt+0xd610>
   1f914:	add	r1, r1, #1
   1f918:	ldrb	r2, [r1]
   1f91c:	sub	r3, r2, #9
   1f920:	cmp	r3, #5
   1f924:	bcc	1f914 <__assert_fail@plt+0xd5dc>
   1f928:	cmp	r2, #32
   1f92c:	beq	1f914 <__assert_fail@plt+0xd5dc>
   1f930:	cmp	r2, #0
   1f934:	cmpne	r2, #44	; 0x2c
   1f938:	bne	1f944 <__assert_fail@plt+0xd60c>
   1f93c:	mov	sp, fp
   1f940:	pop	{fp, pc}
   1f944:	str	r1, [sp, #4]
   1f948:	mov	r0, #0
   1f94c:	mov	sp, fp
   1f950:	pop	{fp, pc}
   1f954:	andeq	r0, r0, r0
   1f958:	push	{r4, sl, fp, lr}
   1f95c:	add	fp, sp, #8
   1f960:	sub	sp, sp, #64	; 0x40
   1f964:	mov	r0, #85	; 0x55
   1f968:	bl	11f6c <sysconf@plt>
   1f96c:	mov	r4, r0
   1f970:	mov	r0, #30
   1f974:	bl	11f6c <sysconf@plt>
   1f978:	orr	r1, r0, r4
   1f97c:	cmn	r1, #1
   1f980:	ble	1f9a0 <__assert_fail@plt+0xd668>
   1f984:	vmov	s0, r0
   1f988:	vcvt.f64.s32	d16, s0
   1f98c:	vmov	s0, r4
   1f990:	vcvt.f64.s32	d17, s0
   1f994:	vmul.f64	d0, d17, d16
   1f998:	sub	sp, fp, #8
   1f99c:	pop	{r4, sl, fp, pc}
   1f9a0:	mov	r0, sp
   1f9a4:	bl	120bc <sysinfo@plt>
   1f9a8:	cmp	r0, #0
   1f9ac:	vldrne	d0, [pc, #36]	; 1f9d8 <__assert_fail@plt+0xd6a0>
   1f9b0:	subne	sp, fp, #8
   1f9b4:	popne	{r4, sl, fp, pc}
   1f9b8:	vldr	s0, [sp, #16]
   1f9bc:	vldr	s2, [sp, #52]	; 0x34
   1f9c0:	vcvt.f64.u32	d16, s2
   1f9c4:	vcvt.f64.u32	d17, s0
   1f9c8:	vmul.f64	d0, d17, d16
   1f9cc:	sub	sp, fp, #8
   1f9d0:	pop	{r4, sl, fp, pc}
   1f9d4:	nop	{0}
   1f9d8:	andeq	r0, r0, r0
   1f9dc:	orrsmi	r0, r0, r0
   1f9e0:	push	{r4, sl, fp, lr}
   1f9e4:	add	fp, sp, #8
   1f9e8:	sub	sp, sp, #64	; 0x40
   1f9ec:	mov	r0, #86	; 0x56
   1f9f0:	bl	11f6c <sysconf@plt>
   1f9f4:	mov	r4, r0
   1f9f8:	mov	r0, #30
   1f9fc:	bl	11f6c <sysconf@plt>
   1fa00:	orr	r1, r0, r4
   1fa04:	cmp	r1, #0
   1fa08:	blt	1fa28 <__assert_fail@plt+0xd6f0>
   1fa0c:	vmov	s0, r0
   1fa10:	vcvt.f64.s32	d16, s0
   1fa14:	vmov	s0, r4
   1fa18:	vcvt.f64.s32	d17, s0
   1fa1c:	vmul.f64	d0, d17, d16
   1fa20:	sub	sp, fp, #8
   1fa24:	pop	{r4, sl, fp, pc}
   1fa28:	mov	r0, sp
   1fa2c:	bl	120bc <sysinfo@plt>
   1fa30:	cmp	r0, #0
   1fa34:	beq	1fa7c <__assert_fail@plt+0xd744>
   1fa38:	mov	r0, #85	; 0x55
   1fa3c:	bl	11f6c <sysconf@plt>
   1fa40:	mov	r4, r0
   1fa44:	mov	r0, #30
   1fa48:	bl	11f6c <sysconf@plt>
   1fa4c:	orr	r1, r0, r4
   1fa50:	cmn	r1, #1
   1fa54:	ble	1faa4 <__assert_fail@plt+0xd76c>
   1fa58:	vmov	s0, r0
   1fa5c:	vcvt.f64.s32	d16, s0
   1fa60:	vmov	s0, r4
   1fa64:	vcvt.f64.s32	d17, s0
   1fa68:	vmul.f64	d16, d17, d16
   1fa6c:	vmov.f64	d17, #80	; 0x3e800000  0.250
   1fa70:	vmul.f64	d0, d16, d17
   1fa74:	sub	sp, fp, #8
   1fa78:	pop	{r4, sl, fp, pc}
   1fa7c:	vldr	s0, [sp, #20]
   1fa80:	vldr	s2, [sp, #28]
   1fa84:	vldr	s4, [sp, #52]	; 0x34
   1fa88:	vcvt.f64.u32	d16, s2
   1fa8c:	vcvt.f64.u32	d17, s0
   1fa90:	vcvt.f64.u32	d18, s4
   1fa94:	vadd.f64	d16, d17, d16
   1fa98:	vmul.f64	d0, d16, d18
   1fa9c:	sub	sp, fp, #8
   1faa0:	pop	{r4, sl, fp, pc}
   1faa4:	mov	r0, sp
   1faa8:	bl	120bc <sysinfo@plt>
   1faac:	cmp	r0, #0
   1fab0:	beq	1fac8 <__assert_fail@plt+0xd790>
   1fab4:	vldr	d16, [pc, #36]	; 1fae0 <__assert_fail@plt+0xd7a8>
   1fab8:	vmov.f64	d17, #80	; 0x3e800000  0.250
   1fabc:	vmul.f64	d0, d16, d17
   1fac0:	sub	sp, fp, #8
   1fac4:	pop	{r4, sl, fp, pc}
   1fac8:	vldr	s0, [sp, #16]
   1facc:	vldr	s2, [sp, #52]	; 0x34
   1fad0:	vcvt.f64.u32	d16, s2
   1fad4:	vcvt.f64.u32	d17, s0
   1fad8:	b	1fa68 <__assert_fail@plt+0xd730>
   1fadc:	nop	{0}
   1fae0:	andeq	r0, r0, r0
   1fae4:	orrsmi	r0, r0, r0
   1fae8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1faec:	add	fp, sp, #24
   1faf0:	movw	r7, #39104	; 0x98c0
   1faf4:	mov	r4, r0
   1faf8:	ldr	r9, [r0]
   1fafc:	ldr	r8, [r0, #4]
   1fb00:	mov	r5, r1
   1fb04:	movt	r7, #3
   1fb08:	ldr	r0, [r7]
   1fb0c:	cmp	r0, #0
   1fb10:	blt	1fb44 <__assert_fail@plt+0xd80c>
   1fb14:	mov	r0, r4
   1fb18:	mov	r1, r5
   1fb1c:	bl	1229c <pipe2@plt>
   1fb20:	mov	r6, r0
   1fb24:	cmn	r0, #1
   1fb28:	bgt	1fb6c <__assert_fail@plt+0xd834>
   1fb2c:	bl	12164 <__errno_location@plt>
   1fb30:	ldr	r0, [r0]
   1fb34:	cmp	r0, #38	; 0x26
   1fb38:	bne	1fb6c <__assert_fail@plt+0xd834>
   1fb3c:	mvn	r0, #0
   1fb40:	str	r0, [r7]
   1fb44:	movw	r0, #63487	; 0xf7ff
   1fb48:	movt	r0, #65527	; 0xfff7
   1fb4c:	tst	r5, r0
   1fb50:	beq	1fb7c <__assert_fail@plt+0xd844>
   1fb54:	bl	12164 <__errno_location@plt>
   1fb58:	mov	r1, #22
   1fb5c:	str	r1, [r0]
   1fb60:	mvn	r6, #0
   1fb64:	mov	r0, r6
   1fb68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fb6c:	mov	r0, #1
   1fb70:	str	r0, [r7]
   1fb74:	mov	r0, r6
   1fb78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fb7c:	mov	r0, r4
   1fb80:	bl	121e8 <pipe@plt>
   1fb84:	mvn	r6, #0
   1fb88:	cmp	r0, #0
   1fb8c:	blt	1fb64 <__assert_fail@plt+0xd82c>
   1fb90:	tst	r5, #2048	; 0x800
   1fb94:	bne	1fc14 <__assert_fail@plt+0xd8dc>
   1fb98:	mov	r6, #0
   1fb9c:	tst	r5, #524288	; 0x80000
   1fba0:	beq	1fb64 <__assert_fail@plt+0xd82c>
   1fba4:	ldr	r0, [r4, #4]
   1fba8:	mov	r1, #1
   1fbac:	mov	r2, #0
   1fbb0:	bl	24ff0 <__assert_fail@plt+0x12cb8>
   1fbb4:	cmp	r0, #0
   1fbb8:	blt	1fc7c <__assert_fail@plt+0xd944>
   1fbbc:	ldr	r1, [r4, #4]
   1fbc0:	orr	r2, r0, #1
   1fbc4:	mov	r0, r1
   1fbc8:	mov	r1, #2
   1fbcc:	bl	24ff0 <__assert_fail@plt+0x12cb8>
   1fbd0:	cmn	r0, #1
   1fbd4:	beq	1fc7c <__assert_fail@plt+0xd944>
   1fbd8:	ldr	r0, [r4]
   1fbdc:	mov	r1, #1
   1fbe0:	mov	r2, #0
   1fbe4:	mov	r6, #0
   1fbe8:	bl	24ff0 <__assert_fail@plt+0x12cb8>
   1fbec:	cmp	r0, #0
   1fbf0:	blt	1fc7c <__assert_fail@plt+0xd944>
   1fbf4:	ldr	r1, [r4]
   1fbf8:	orr	r2, r0, #1
   1fbfc:	mov	r0, r1
   1fc00:	mov	r1, #2
   1fc04:	bl	24ff0 <__assert_fail@plt+0x12cb8>
   1fc08:	cmn	r0, #1
   1fc0c:	bne	1fb64 <__assert_fail@plt+0xd82c>
   1fc10:	b	1fc7c <__assert_fail@plt+0xd944>
   1fc14:	ldr	r0, [r4, #4]
   1fc18:	mov	r1, #3
   1fc1c:	mov	r2, #0
   1fc20:	bl	24ff0 <__assert_fail@plt+0x12cb8>
   1fc24:	cmp	r0, #0
   1fc28:	blt	1fc7c <__assert_fail@plt+0xd944>
   1fc2c:	ldr	r1, [r4, #4]
   1fc30:	orr	r2, r0, #2048	; 0x800
   1fc34:	mov	r0, r1
   1fc38:	mov	r1, #4
   1fc3c:	bl	24ff0 <__assert_fail@plt+0x12cb8>
   1fc40:	cmn	r0, #1
   1fc44:	beq	1fc7c <__assert_fail@plt+0xd944>
   1fc48:	ldr	r0, [r4]
   1fc4c:	mov	r1, #3
   1fc50:	mov	r2, #0
   1fc54:	bl	24ff0 <__assert_fail@plt+0x12cb8>
   1fc58:	cmp	r0, #0
   1fc5c:	blt	1fc7c <__assert_fail@plt+0xd944>
   1fc60:	ldr	r1, [r4]
   1fc64:	orr	r2, r0, #2048	; 0x800
   1fc68:	mov	r0, r1
   1fc6c:	mov	r1, #4
   1fc70:	bl	24ff0 <__assert_fail@plt+0x12cb8>
   1fc74:	cmn	r0, #1
   1fc78:	bne	1fb98 <__assert_fail@plt+0xd860>
   1fc7c:	bl	12164 <__errno_location@plt>
   1fc80:	mov	r5, r0
   1fc84:	ldr	r6, [r0]
   1fc88:	ldr	r0, [r4]
   1fc8c:	bl	12320 <close@plt>
   1fc90:	ldr	r0, [r4, #4]
   1fc94:	bl	12320 <close@plt>
   1fc98:	str	r9, [r4]
   1fc9c:	str	r8, [r4, #4]
   1fca0:	str	r6, [r5]
   1fca4:	b	1fb60 <__assert_fail@plt+0xd828>
   1fca8:	push	{r4, sl, fp, lr}
   1fcac:	add	fp, sp, #8
   1fcb0:	sub	sp, sp, #8
   1fcb4:	movw	r0, #32901	; 0x8085
   1fcb8:	movt	r0, #2
   1fcbc:	bl	120a4 <getenv@plt>
   1fcc0:	cmp	r0, #0
   1fcc4:	movw	r4, #4201	; 0x1069
   1fcc8:	ldrbne	r1, [r0]
   1fccc:	movt	r4, #3
   1fcd0:	cmpne	r1, #0
   1fcd4:	bne	1fce4 <__assert_fail@plt+0xd9ac>
   1fcd8:	mov	r0, r4
   1fcdc:	sub	sp, fp, #8
   1fce0:	pop	{r4, sl, fp, pc}
   1fce4:	add	r1, sp, #4
   1fce8:	mov	r2, #10
   1fcec:	bl	11e34 <strtol@plt>
   1fcf0:	ldr	r1, [sp, #4]
   1fcf4:	ldrb	r1, [r1]
   1fcf8:	cmp	r1, #0
   1fcfc:	moveq	r4, r0
   1fd00:	mov	r0, r4
   1fd04:	sub	sp, fp, #8
   1fd08:	pop	{r4, sl, fp, pc}
   1fd0c:	push	{r4, r5, fp, lr}
   1fd10:	add	fp, sp, #8
   1fd14:	cmp	r0, #0
   1fd18:	beq	1fdac <__assert_fail@plt+0xda74>
   1fd1c:	mov	r1, #47	; 0x2f
   1fd20:	mov	r4, r0
   1fd24:	bl	12248 <strrchr@plt>
   1fd28:	cmp	r0, #0
   1fd2c:	mov	r5, r4
   1fd30:	addne	r5, r0, #1
   1fd34:	sub	r0, r5, r4
   1fd38:	cmp	r0, #7
   1fd3c:	blt	1fd90 <__assert_fail@plt+0xda58>
   1fd40:	movw	r1, #32973	; 0x80cd
   1fd44:	sub	r0, r5, #7
   1fd48:	mov	r2, #7
   1fd4c:	movt	r1, #2
   1fd50:	bl	122fc <strncmp@plt>
   1fd54:	cmp	r0, #0
   1fd58:	bne	1fd90 <__assert_fail@plt+0xda58>
   1fd5c:	movw	r1, #32981	; 0x80d5
   1fd60:	mov	r0, r5
   1fd64:	mov	r2, #3
   1fd68:	movt	r1, #2
   1fd6c:	bl	122fc <strncmp@plt>
   1fd70:	cmp	r0, #0
   1fd74:	beq	1fd80 <__assert_fail@plt+0xda48>
   1fd78:	mov	r4, r5
   1fd7c:	b	1fd90 <__assert_fail@plt+0xda58>
   1fd80:	movw	r0, #37560	; 0x92b8
   1fd84:	add	r4, r5, #3
   1fd88:	movt	r0, #3
   1fd8c:	str	r4, [r0]
   1fd90:	movw	r0, #37564	; 0x92bc
   1fd94:	movt	r0, #3
   1fd98:	str	r4, [r0]
   1fd9c:	movw	r0, #39108	; 0x98c4
   1fda0:	movt	r0, #3
   1fda4:	str	r4, [r0]
   1fda8:	pop	{r4, r5, fp, pc}
   1fdac:	movw	r0, #37576	; 0x92c8
   1fdb0:	mov	r1, #55	; 0x37
   1fdb4:	mov	r2, #1
   1fdb8:	movt	r0, #3
   1fdbc:	ldr	r3, [r0]
   1fdc0:	movw	r0, #32917	; 0x8095
   1fdc4:	movt	r0, #2
   1fdc8:	bl	12014 <fwrite@plt>
   1fdcc:	bl	12314 <abort@plt>
   1fdd0:	push	{r4, r5, r6, sl, fp, lr}
   1fdd4:	add	fp, sp, #16
   1fdd8:	mov	r4, r0
   1fddc:	movw	r0, #39112	; 0x98c8
   1fde0:	movt	r0, #3
   1fde4:	cmp	r4, #0
   1fde8:	moveq	r4, r0
   1fdec:	bl	12164 <__errno_location@plt>
   1fdf0:	ldr	r6, [r0]
   1fdf4:	mov	r5, r0
   1fdf8:	mov	r0, r4
   1fdfc:	mov	r1, #48	; 0x30
   1fe00:	bl	23930 <__assert_fail@plt+0x115f8>
   1fe04:	str	r6, [r5]
   1fe08:	pop	{r4, r5, r6, sl, fp, pc}
   1fe0c:	movw	r1, #39112	; 0x98c8
   1fe10:	cmp	r0, #0
   1fe14:	movt	r1, #3
   1fe18:	movne	r1, r0
   1fe1c:	ldr	r0, [r1]
   1fe20:	bx	lr
   1fe24:	movw	r2, #39112	; 0x98c8
   1fe28:	cmp	r0, #0
   1fe2c:	movt	r2, #3
   1fe30:	movne	r2, r0
   1fe34:	str	r1, [r2]
   1fe38:	bx	lr
   1fe3c:	movw	r3, #39112	; 0x98c8
   1fe40:	cmp	r0, #0
   1fe44:	movt	r3, #3
   1fe48:	movne	r3, r0
   1fe4c:	ubfx	r0, r1, #5, #3
   1fe50:	and	r1, r1, #31
   1fe54:	add	r0, r3, r0, lsl #2
   1fe58:	ldr	r3, [r0, #8]
   1fe5c:	eor	r2, r2, r3, lsr r1
   1fe60:	and	r2, r2, #1
   1fe64:	eor	r2, r3, r2, lsl r1
   1fe68:	str	r2, [r0, #8]
   1fe6c:	mov	r0, #1
   1fe70:	and	r0, r0, r3, lsr r1
   1fe74:	bx	lr
   1fe78:	movw	r2, #39112	; 0x98c8
   1fe7c:	cmp	r0, #0
   1fe80:	movt	r2, #3
   1fe84:	movne	r2, r0
   1fe88:	ldr	r0, [r2, #4]
   1fe8c:	str	r1, [r2, #4]
   1fe90:	bx	lr
   1fe94:	movw	r3, #39112	; 0x98c8
   1fe98:	cmp	r0, #0
   1fe9c:	movt	r3, #3
   1fea0:	movne	r3, r0
   1fea4:	cmp	r1, #0
   1fea8:	mov	r0, #10
   1feac:	cmpne	r2, #0
   1feb0:	str	r0, [r3]
   1feb4:	bne	1fec4 <__assert_fail@plt+0xdb8c>
   1feb8:	push	{fp, lr}
   1febc:	mov	fp, sp
   1fec0:	bl	12314 <abort@plt>
   1fec4:	str	r1, [r3, #40]	; 0x28
   1fec8:	str	r2, [r3, #44]	; 0x2c
   1fecc:	bx	lr
   1fed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fed4:	add	fp, sp, #28
   1fed8:	sub	sp, sp, #20
   1fedc:	mov	r7, r0
   1fee0:	ldr	r0, [fp, #8]
   1fee4:	movw	r5, #39112	; 0x98c8
   1fee8:	mov	r8, r3
   1feec:	mov	r9, r2
   1fef0:	mov	sl, r1
   1fef4:	movt	r5, #3
   1fef8:	cmp	r0, #0
   1fefc:	movne	r5, r0
   1ff00:	bl	12164 <__errno_location@plt>
   1ff04:	mov	r4, r0
   1ff08:	ldm	r5, {r0, r1}
   1ff0c:	ldr	r2, [r5, #40]	; 0x28
   1ff10:	ldr	r3, [r5, #44]	; 0x2c
   1ff14:	add	r5, r5, #8
   1ff18:	ldr	r6, [r4]
   1ff1c:	stm	sp, {r0, r1, r5}
   1ff20:	str	r2, [sp, #12]
   1ff24:	str	r3, [sp, #16]
   1ff28:	mov	r0, r7
   1ff2c:	mov	r1, sl
   1ff30:	mov	r2, r9
   1ff34:	mov	r3, r8
   1ff38:	bl	1ff48 <__assert_fail@plt+0xdc10>
   1ff3c:	str	r6, [r4]
   1ff40:	sub	sp, fp, #28
   1ff44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff4c:	add	fp, sp, #28
   1ff50:	sub	sp, sp, #156	; 0x9c
   1ff54:	str	r0, [sp, #76]	; 0x4c
   1ff58:	ldr	r0, [fp, #12]
   1ff5c:	mov	r6, r1
   1ff60:	str	r3, [sp, #84]	; 0x54
   1ff64:	str	r2, [fp, #-84]	; 0xffffffac
   1ff68:	and	r1, r0, #4
   1ff6c:	str	r1, [sp, #24]
   1ff70:	and	r1, r0, #1
   1ff74:	str	r1, [sp, #28]
   1ff78:	ubfx	r8, r0, #1, #1
   1ff7c:	bl	12044 <__ctype_get_mb_cur_max@plt>
   1ff80:	str	r0, [sp, #32]
   1ff84:	ldr	r0, [fp, #24]
   1ff88:	ldr	r7, [fp, #8]
   1ff8c:	mov	r1, #0
   1ff90:	mov	r2, #0
   1ff94:	mov	r4, #1
   1ff98:	str	r1, [sp, #52]	; 0x34
   1ff9c:	str	r0, [sp, #72]	; 0x48
   1ffa0:	ldr	r0, [fp, #20]
   1ffa4:	str	r0, [sp, #68]	; 0x44
   1ffa8:	mov	r0, #0
   1ffac:	str	r0, [sp, #48]	; 0x30
   1ffb0:	mov	r0, #0
   1ffb4:	str	r0, [sp, #92]	; 0x5c
   1ffb8:	mov	r0, #0
   1ffbc:	str	r0, [fp, #-76]	; 0xffffffb4
   1ffc0:	mov	r0, #0
   1ffc4:	cmp	r7, #10
   1ffc8:	bhi	212b0 <__assert_fail@plt+0xef78>
   1ffcc:	add	r1, pc, #28
   1ffd0:	mov	sl, r6
   1ffd4:	ldr	r6, [sp, #76]	; 0x4c
   1ffd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ffdc:	ldr	lr, [sp, #84]	; 0x54
   1ffe0:	mov	r9, #0
   1ffe4:	mov	r3, #1
   1ffe8:	mov	r5, #0
   1ffec:	ldr	pc, [r1, r7, lsl #2]
   1fff0:	andeq	r0, r2, r0, asr #1
   1fff4:	strdeq	r0, [r2], -ip
   1fff8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1fffc:	strheq	r0, [r2], -r8
   20000:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20004:	andeq	r0, r2, r4, lsr #2
   20008:	andeq	r0, r2, r0, ror #1
   2000c:	andeq	r0, r2, r0, lsr r3
   20010:	andeq	r0, r2, ip, lsl r0
   20014:	andeq	r0, r2, ip, lsl r0
   20018:	andeq	r0, r2, r4, asr #5
   2001c:	mov	r9, r4
   20020:	movw	r4, #33061	; 0x8125
   20024:	mov	r5, r8
   20028:	mov	r8, r2
   2002c:	mov	r0, #0
   20030:	mov	r2, #5
   20034:	movt	r4, #2
   20038:	mov	r1, r4
   2003c:	bl	11f54 <dcgettext@plt>
   20040:	cmp	r0, r4
   20044:	str	r0, [sp, #68]	; 0x44
   20048:	bne	201d8 <__assert_fail@plt+0xdea0>
   2004c:	bl	252dc <__assert_fail@plt+0x12fa4>
   20050:	ldrb	r1, [r0]
   20054:	and	r1, r1, #223	; 0xdf
   20058:	cmp	r1, #71	; 0x47
   2005c:	beq	201a4 <__assert_fail@plt+0xde6c>
   20060:	cmp	r1, #85	; 0x55
   20064:	bne	201bc <__assert_fail@plt+0xde84>
   20068:	ldrb	r1, [r0, #1]
   2006c:	and	r1, r1, #223	; 0xdf
   20070:	cmp	r1, #84	; 0x54
   20074:	bne	201bc <__assert_fail@plt+0xde84>
   20078:	ldrb	r1, [r0, #2]
   2007c:	and	r1, r1, #223	; 0xdf
   20080:	cmp	r1, #70	; 0x46
   20084:	bne	201bc <__assert_fail@plt+0xde84>
   20088:	ldrb	r1, [r0, #3]
   2008c:	cmp	r1, #45	; 0x2d
   20090:	ldrbeq	r1, [r0, #4]
   20094:	cmpeq	r1, #56	; 0x38
   20098:	bne	201bc <__assert_fail@plt+0xde84>
   2009c:	ldrb	r0, [r0, #5]
   200a0:	cmp	r0, #0
   200a4:	movw	r0, #33063	; 0x8127
   200a8:	movt	r0, #2
   200ac:	str	r0, [sp, #68]	; 0x44
   200b0:	bne	201bc <__assert_fail@plt+0xde84>
   200b4:	b	201d8 <__assert_fail@plt+0xdea0>
   200b8:	mov	r0, #1
   200bc:	b	200fc <__assert_fail@plt+0xddc4>
   200c0:	mov	r7, #0
   200c4:	mov	r9, #0
   200c8:	mov	r3, r0
   200cc:	b	2019c <__assert_fail@plt+0xde64>
   200d0:	tst	r8, #1
   200d4:	bne	200fc <__assert_fail@plt+0xddc4>
   200d8:	mov	r3, r0
   200dc:	b	20154 <__assert_fail@plt+0xde1c>
   200e0:	mov	r0, #1
   200e4:	mov	r9, #0
   200e8:	mov	r7, #5
   200ec:	b	20138 <__assert_fail@plt+0xde00>
   200f0:	mov	r3, #1
   200f4:	tst	r8, #1
   200f8:	beq	20154 <__assert_fail@plt+0xde1c>
   200fc:	mov	r1, #1
   20100:	mov	r9, #0
   20104:	mov	r7, #2
   20108:	mov	r3, r0
   2010c:	mov	r5, #1
   20110:	str	r1, [fp, #-76]	; 0xffffffb4
   20114:	movw	r1, #28618	; 0x6fca
   20118:	movt	r1, #2
   2011c:	str	r1, [sp, #92]	; 0x5c
   20120:	b	20330 <__assert_fail@plt+0xdff8>
   20124:	mov	r7, #5
   20128:	tst	r8, #1
   2012c:	beq	20174 <__assert_fail@plt+0xde3c>
   20130:	mov	r0, #1
   20134:	mov	r9, #0
   20138:	str	r0, [fp, #-76]	; 0xffffffb4
   2013c:	movw	r0, #30391	; 0x76b7
   20140:	mov	r3, #1
   20144:	mov	r5, #1
   20148:	movt	r0, #2
   2014c:	str	r0, [sp, #92]	; 0x5c
   20150:	b	20330 <__assert_fail@plt+0xdff8>
   20154:	cmp	sl, #0
   20158:	mov	r9, #1
   2015c:	mov	r7, #2
   20160:	movne	r0, #39	; 0x27
   20164:	strbne	r0, [r6]
   20168:	movw	r0, #28618	; 0x6fca
   2016c:	movt	r0, #2
   20170:	b	20190 <__assert_fail@plt+0xde58>
   20174:	cmp	sl, #0
   20178:	mov	r9, #1
   2017c:	mov	r3, #1
   20180:	movne	r0, #34	; 0x22
   20184:	strbne	r0, [r6]
   20188:	movw	r0, #30391	; 0x76b7
   2018c:	movt	r0, #2
   20190:	str	r0, [sp, #92]	; 0x5c
   20194:	mov	r0, #1
   20198:	str	r0, [fp, #-76]	; 0xffffffb4
   2019c:	mov	r5, #0
   201a0:	b	20330 <__assert_fail@plt+0xdff8>
   201a4:	ldrb	r1, [r0, #1]
   201a8:	and	r1, r1, #223	; 0xdf
   201ac:	cmp	r1, #66	; 0x42
   201b0:	ldrbeq	r1, [r0, #2]
   201b4:	cmpeq	r1, #49	; 0x31
   201b8:	beq	210d8 <__assert_fail@plt+0xeda0>
   201bc:	movw	r0, #28618	; 0x6fca
   201c0:	movw	r1, #30391	; 0x76b7
   201c4:	cmp	r7, #9
   201c8:	movt	r0, #2
   201cc:	movt	r1, #2
   201d0:	moveq	r0, r1
   201d4:	str	r0, [sp, #68]	; 0x44
   201d8:	movw	r4, #28618	; 0x6fca
   201dc:	mov	r0, #0
   201e0:	mov	r2, #5
   201e4:	movt	r4, #2
   201e8:	mov	r1, r4
   201ec:	bl	11f54 <dcgettext@plt>
   201f0:	cmp	r0, r4
   201f4:	str	r0, [sp, #72]	; 0x48
   201f8:	beq	20208 <__assert_fail@plt+0xded0>
   201fc:	mov	r4, r9
   20200:	mov	r2, r8
   20204:	b	202c0 <__assert_fail@plt+0xdf88>
   20208:	bl	252dc <__assert_fail@plt+0x12fa4>
   2020c:	ldrb	r1, [r0]
   20210:	mov	r4, r9
   20214:	and	r1, r1, #223	; 0xdf
   20218:	cmp	r1, #71	; 0x47
   2021c:	beq	20278 <__assert_fail@plt+0xdf40>
   20220:	cmp	r1, #85	; 0x55
   20224:	mov	r2, r8
   20228:	bne	202a0 <__assert_fail@plt+0xdf68>
   2022c:	ldrb	r1, [r0, #1]
   20230:	and	r1, r1, #223	; 0xdf
   20234:	cmp	r1, #84	; 0x54
   20238:	bne	202a0 <__assert_fail@plt+0xdf68>
   2023c:	ldrb	r1, [r0, #2]
   20240:	and	r1, r1, #223	; 0xdf
   20244:	cmp	r1, #70	; 0x46
   20248:	ldrbeq	r1, [r0, #3]
   2024c:	cmpeq	r1, #45	; 0x2d
   20250:	bne	202a0 <__assert_fail@plt+0xdf68>
   20254:	ldrb	r1, [r0, #4]
   20258:	cmp	r1, #56	; 0x38
   2025c:	ldrbeq	r0, [r0, #5]
   20260:	cmpeq	r0, #0
   20264:	bne	202a0 <__assert_fail@plt+0xdf68>
   20268:	movw	r0, #33067	; 0x812b
   2026c:	movt	r0, #2
   20270:	str	r0, [sp, #72]	; 0x48
   20274:	b	202c0 <__assert_fail@plt+0xdf88>
   20278:	ldrb	r1, [r0, #1]
   2027c:	mov	r2, r8
   20280:	and	r1, r1, #223	; 0xdf
   20284:	cmp	r1, #66	; 0x42
   20288:	bne	202a0 <__assert_fail@plt+0xdf68>
   2028c:	ldrb	r1, [r0, #2]
   20290:	cmp	r1, #49	; 0x31
   20294:	ldrbeq	r1, [r0, #3]
   20298:	cmpeq	r1, #56	; 0x38
   2029c:	beq	2111c <__assert_fail@plt+0xede4>
   202a0:	movw	r0, #28618	; 0x6fca
   202a4:	cmp	r7, #9
   202a8:	movt	r0, #2
   202ac:	mov	r1, r0
   202b0:	movw	r0, #30391	; 0x76b7
   202b4:	movt	r0, #2
   202b8:	moveq	r1, r0
   202bc:	str	r1, [sp, #72]	; 0x48
   202c0:	mov	r8, r5
   202c4:	mov	r9, #0
   202c8:	tst	r8, #1
   202cc:	mov	r5, r8
   202d0:	str	r2, [fp, #-48]	; 0xffffffd0
   202d4:	bne	2030c <__assert_fail@plt+0xdfd4>
   202d8:	ldr	r0, [sp, #68]	; 0x44
   202dc:	ldrb	r0, [r0]
   202e0:	cmp	r0, #0
   202e4:	beq	2030c <__assert_fail@plt+0xdfd4>
   202e8:	ldr	r1, [sp, #68]	; 0x44
   202ec:	mov	r9, #0
   202f0:	add	r1, r1, #1
   202f4:	cmp	r9, sl
   202f8:	strbcc	r0, [r6, r9]
   202fc:	ldrb	r0, [r1, r9]
   20300:	add	r9, r9, #1
   20304:	cmp	r0, #0
   20308:	bne	202f4 <__assert_fail@plt+0xdfbc>
   2030c:	ldr	r8, [sp, #72]	; 0x48
   20310:	mov	r0, r8
   20314:	bl	12140 <strlen@plt>
   20318:	ldr	ip, [fp, #-84]	; 0xffffffac
   2031c:	ldr	lr, [sp, #84]	; 0x54
   20320:	ldr	r2, [fp, #-48]	; 0xffffffd0
   20324:	str	r0, [fp, #-76]	; 0xffffffb4
   20328:	str	r8, [sp, #92]	; 0x5c
   2032c:	mov	r3, #1
   20330:	ldr	r0, [fp, #16]
   20334:	str	r7, [fp, #-64]	; 0xffffffc0
   20338:	str	r5, [fp, #-72]	; 0xffffffb8
   2033c:	str	r3, [sp, #80]	; 0x50
   20340:	cmp	r0, #0
   20344:	movwne	r0, #1
   20348:	and	r0, r0, r5
   2034c:	str	r0, [fp, #-88]	; 0xffffffa8
   20350:	ldr	r0, [fp, #-76]	; 0xffffffb4
   20354:	cmp	r0, #0
   20358:	movwne	r0, #1
   2035c:	subs	r7, r7, #2
   20360:	and	r1, r0, r5
   20364:	str	r7, [fp, #-80]	; 0xffffffb0
   20368:	and	r1, r3, r1
   2036c:	str	r1, [sp, #40]	; 0x28
   20370:	clz	r1, r7
   20374:	lsr	r1, r1, #5
   20378:	and	r1, r1, r5
   2037c:	eor	r5, r5, #1
   20380:	str	r1, [sp, #36]	; 0x24
   20384:	mov	r1, r7
   20388:	str	r5, [sp, #88]	; 0x58
   2038c:	mov	r7, #0
   20390:	movwne	r1, #1
   20394:	orr	r5, r1, r5
   20398:	and	r1, r1, r3
   2039c:	and	r0, r0, r1
   203a0:	str	r5, [sp, #60]	; 0x3c
   203a4:	str	r1, [fp, #-68]	; 0xffffffbc
   203a8:	str	r0, [fp, #-60]	; 0xffffffc4
   203ac:	eor	r0, r3, #1
   203b0:	str	r0, [sp, #44]	; 0x2c
   203b4:	cmn	lr, #1
   203b8:	beq	203c8 <__assert_fail@plt+0xe090>
   203bc:	cmp	r7, lr
   203c0:	bne	203d4 <__assert_fail@plt+0xe09c>
   203c4:	b	2104c <__assert_fail@plt+0xed14>
   203c8:	ldrb	r0, [ip, r7]
   203cc:	cmp	r0, #0
   203d0:	beq	21054 <__assert_fail@plt+0xed1c>
   203d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   203d8:	mov	r8, #0
   203dc:	str	r4, [fp, #-52]	; 0xffffffcc
   203e0:	str	r2, [fp, #-48]	; 0xffffffd0
   203e4:	cmp	r0, #0
   203e8:	beq	2041c <__assert_fail@plt+0xe0e4>
   203ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   203f0:	add	r4, r7, r0
   203f4:	cmp	r0, #2
   203f8:	bcc	20414 <__assert_fail@plt+0xe0dc>
   203fc:	cmn	lr, #1
   20400:	bne	20414 <__assert_fail@plt+0xe0dc>
   20404:	mov	r0, ip
   20408:	bl	12140 <strlen@plt>
   2040c:	ldr	ip, [fp, #-84]	; 0xffffffac
   20410:	mov	lr, r0
   20414:	cmp	r4, lr
   20418:	bls	20434 <__assert_fail@plt+0xe0fc>
   2041c:	mov	r0, #0
   20420:	str	r0, [fp, #-56]	; 0xffffffc8
   20424:	ldrb	r5, [ip, r7]
   20428:	cmp	r5, #126	; 0x7e
   2042c:	bls	20484 <__assert_fail@plt+0xe14c>
   20430:	b	2088c <__assert_fail@plt+0xe554>
   20434:	ldr	r1, [sp, #92]	; 0x5c
   20438:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2043c:	add	r0, ip, r7
   20440:	mov	r4, lr
   20444:	bl	11f3c <memcmp@plt>
   20448:	ldr	r2, [sp, #88]	; 0x58
   2044c:	cmp	r0, #0
   20450:	mov	r1, r0
   20454:	movwne	r1, #1
   20458:	orr	r1, r1, r2
   2045c:	tst	r1, #1
   20460:	beq	21160 <__assert_fail@plt+0xee28>
   20464:	ldr	ip, [fp, #-84]	; 0xffffffac
   20468:	clz	r0, r0
   2046c:	mov	lr, r4
   20470:	lsr	r0, r0, #5
   20474:	str	r0, [fp, #-56]	; 0xffffffc8
   20478:	ldrb	r5, [ip, r7]
   2047c:	cmp	r5, #126	; 0x7e
   20480:	bhi	2088c <__assert_fail@plt+0xe554>
   20484:	add	r3, pc, #16
   20488:	mov	r4, #1
   2048c:	mov	r2, #110	; 0x6e
   20490:	mov	r0, #97	; 0x61
   20494:	mov	r1, #0
   20498:	ldr	pc, [r3, r5, lsl #2]
   2049c:	andeq	r0, r2, ip, ror #14
   204a0:	andeq	r0, r2, ip, lsl #17
   204a4:	andeq	r0, r2, ip, lsl #17
   204a8:	andeq	r0, r2, ip, lsl #17
   204ac:	andeq	r0, r2, ip, lsl #17
   204b0:	andeq	r0, r2, ip, lsl #17
   204b4:	andeq	r0, r2, ip, lsl #17
   204b8:	andeq	r0, r2, r8, ror #18
   204bc:	andeq	r0, r2, ip, asr #14
   204c0:	andeq	r0, r2, r4, lsr r7
   204c4:	andeq	r0, r2, r8, asr r7
   204c8:	andeq	r0, r2, r8, ror #15
   204cc:	andeq	r0, r2, ip, lsr #14
   204d0:	andeq	r0, r2, r4, asr r7
   204d4:	andeq	r0, r2, ip, lsl #17
   204d8:	andeq	r0, r2, ip, lsl #17
   204dc:	andeq	r0, r2, ip, lsl #17
   204e0:	andeq	r0, r2, ip, lsl #17
   204e4:	andeq	r0, r2, ip, lsl #17
   204e8:	andeq	r0, r2, ip, lsl #17
   204ec:	andeq	r0, r2, ip, lsl #17
   204f0:	andeq	r0, r2, ip, lsl #17
   204f4:	andeq	r0, r2, ip, lsl #17
   204f8:	andeq	r0, r2, ip, lsl #17
   204fc:	andeq	r0, r2, ip, lsl #17
   20500:	andeq	r0, r2, ip, lsl #17
   20504:	andeq	r0, r2, ip, lsl #17
   20508:	andeq	r0, r2, ip, lsl #17
   2050c:	andeq	r0, r2, ip, lsl #17
   20510:	andeq	r0, r2, ip, lsl #17
   20514:	andeq	r0, r2, ip, lsl #17
   20518:	andeq	r0, r2, ip, lsl #17
   2051c:	andeq	r0, r2, r4, ror #17
   20520:	andeq	r0, r2, r8, ror #17
   20524:	andeq	r0, r2, r8, ror #17
   20528:			; <UNDEFINED> instruction: 0x000206b8
   2052c:	andeq	r0, r2, r8, ror #17
   20530:	muleq	r2, r8, r6
   20534:	andeq	r0, r2, r8, ror #17
   20538:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   2053c:	andeq	r0, r2, r8, ror #17
   20540:	andeq	r0, r2, r8, ror #17
   20544:	andeq	r0, r2, r8, ror #17
   20548:	muleq	r2, r8, r6
   2054c:	muleq	r2, r8, r6
   20550:	muleq	r2, r8, r6
   20554:	muleq	r2, r8, r6
   20558:	muleq	r2, r8, r6
   2055c:	muleq	r2, r8, r6
   20560:	muleq	r2, r8, r6
   20564:	muleq	r2, r8, r6
   20568:	muleq	r2, r8, r6
   2056c:	muleq	r2, r8, r6
   20570:	muleq	r2, r8, r6
   20574:	muleq	r2, r8, r6
   20578:	muleq	r2, r8, r6
   2057c:	muleq	r2, r8, r6
   20580:	muleq	r2, r8, r6
   20584:	muleq	r2, r8, r6
   20588:	andeq	r0, r2, r8, ror #17
   2058c:	andeq	r0, r2, r8, ror #17
   20590:	andeq	r0, r2, r8, ror #17
   20594:	andeq	r0, r2, r8, ror #17
   20598:	andeq	r0, r2, ip, lsr #15
   2059c:	andeq	r0, r2, ip, lsl #17
   205a0:	muleq	r2, r8, r6
   205a4:	muleq	r2, r8, r6
   205a8:	muleq	r2, r8, r6
   205ac:	muleq	r2, r8, r6
   205b0:	muleq	r2, r8, r6
   205b4:	muleq	r2, r8, r6
   205b8:	muleq	r2, r8, r6
   205bc:	muleq	r2, r8, r6
   205c0:	muleq	r2, r8, r6
   205c4:	muleq	r2, r8, r6
   205c8:	muleq	r2, r8, r6
   205cc:	muleq	r2, r8, r6
   205d0:	muleq	r2, r8, r6
   205d4:	muleq	r2, r8, r6
   205d8:	muleq	r2, r8, r6
   205dc:	muleq	r2, r8, r6
   205e0:	muleq	r2, r8, r6
   205e4:	muleq	r2, r8, r6
   205e8:	muleq	r2, r8, r6
   205ec:	muleq	r2, r8, r6
   205f0:	muleq	r2, r8, r6
   205f4:	muleq	r2, r8, r6
   205f8:	muleq	r2, r8, r6
   205fc:	muleq	r2, r8, r6
   20600:	muleq	r2, r8, r6
   20604:	muleq	r2, r8, r6
   20608:	andeq	r0, r2, r8, ror #17
   2060c:	strdeq	r0, [r2], -r8
   20610:	muleq	r2, r8, r6
   20614:	andeq	r0, r2, r8, ror #17
   20618:	muleq	r2, r8, r6
   2061c:	andeq	r0, r2, r8, ror #17
   20620:	muleq	r2, r8, r6
   20624:	muleq	r2, r8, r6
   20628:	muleq	r2, r8, r6
   2062c:	muleq	r2, r8, r6
   20630:	muleq	r2, r8, r6
   20634:	muleq	r2, r8, r6
   20638:	muleq	r2, r8, r6
   2063c:	muleq	r2, r8, r6
   20640:	muleq	r2, r8, r6
   20644:	muleq	r2, r8, r6
   20648:	muleq	r2, r8, r6
   2064c:	muleq	r2, r8, r6
   20650:	muleq	r2, r8, r6
   20654:	muleq	r2, r8, r6
   20658:	muleq	r2, r8, r6
   2065c:	muleq	r2, r8, r6
   20660:	muleq	r2, r8, r6
   20664:	muleq	r2, r8, r6
   20668:	muleq	r2, r8, r6
   2066c:	muleq	r2, r8, r6
   20670:	muleq	r2, r8, r6
   20674:	muleq	r2, r8, r6
   20678:	muleq	r2, r8, r6
   2067c:	muleq	r2, r8, r6
   20680:	muleq	r2, r8, r6
   20684:	muleq	r2, r8, r6
   20688:	ldrdeq	r0, [r2], -r8
   2068c:	andeq	r0, r2, r8, ror #17
   20690:	ldrdeq	r0, [r2], -r8
   20694:			; <UNDEFINED> instruction: 0x000206b8
   20698:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2069c:	cmp	r0, #0
   206a0:	beq	2097c <__assert_fail@plt+0xe644>
   206a4:	ldr	r0, [fp, #16]
   206a8:	cmp	r0, #0
   206ac:	mov	r0, r5
   206b0:	bne	2098c <__assert_fail@plt+0xe654>
   206b4:	b	209ac <__assert_fail@plt+0xe674>
   206b8:	mov	r4, #0
   206bc:	cmp	r7, #0
   206c0:	beq	208e4 <__assert_fail@plt+0xe5ac>
   206c4:	mov	r8, #0
   206c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   206cc:	cmp	r0, #0
   206d0:	bne	206a4 <__assert_fail@plt+0xe36c>
   206d4:	b	2097c <__assert_fail@plt+0xe644>
   206d8:	mov	r4, #0
   206dc:	cmn	lr, #1
   206e0:	beq	208bc <__assert_fail@plt+0xe584>
   206e4:	cmp	r7, #0
   206e8:	bne	206c4 <__assert_fail@plt+0xe38c>
   206ec:	cmp	lr, #1
   206f0:	beq	208e4 <__assert_fail@plt+0xe5ac>
   206f4:	b	206c4 <__assert_fail@plt+0xe38c>
   206f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   206fc:	cmp	r0, #2
   20700:	bne	20914 <__assert_fail@plt+0xe5dc>
   20704:	ldr	r0, [fp, #-72]	; 0xffffffb8
   20708:	tst	r0, #1
   2070c:	bne	21174 <__assert_fail@plt+0xee3c>
   20710:	mov	r8, #0
   20714:	mov	r0, #92	; 0x5c
   20718:	mov	r4, #0
   2071c:	cmp	r8, #0
   20720:	beq	20934 <__assert_fail@plt+0xe5fc>
   20724:	ldr	r2, [fp, #-48]	; 0xffffffd0
   20728:	b	20a28 <__assert_fail@plt+0xe6f0>
   2072c:	mov	r0, #102	; 0x66
   20730:	b	20968 <__assert_fail@plt+0xe630>
   20734:	mov	r2, #116	; 0x74
   20738:	ldr	r0, [sp, #60]	; 0x3c
   2073c:	tst	r0, #1
   20740:	mov	r0, r2
   20744:	bne	20968 <__assert_fail@plt+0xe630>
   20748:	b	21174 <__assert_fail@plt+0xee3c>
   2074c:	mov	r0, #98	; 0x62
   20750:	b	20968 <__assert_fail@plt+0xe630>
   20754:	mov	r2, #114	; 0x72
   20758:	ldr	r0, [sp, #60]	; 0x3c
   2075c:	tst	r0, #1
   20760:	mov	r0, r2
   20764:	bne	20968 <__assert_fail@plt+0xe630>
   20768:	b	21174 <__assert_fail@plt+0xee3c>
   2076c:	ldr	r0, [sp, #80]	; 0x50
   20770:	tst	r0, #1
   20774:	beq	20a50 <__assert_fail@plt+0xe718>
   20778:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2077c:	tst	r0, #1
   20780:	bne	2129c <__assert_fail@plt+0xef64>
   20784:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20788:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2078c:	cmp	r0, #2
   20790:	ldr	r0, [fp, #-80]	; 0xffffffb0
   20794:	movwne	r0, #1
   20798:	orr	r0, r0, r2
   2079c:	tst	r0, #1
   207a0:	beq	20d48 <__assert_fail@plt+0xea10>
   207a4:	mov	r0, r9
   207a8:	b	20d7c <__assert_fail@plt+0xea44>
   207ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   207b0:	mov	r8, #0
   207b4:	mov	r5, #63	; 0x3f
   207b8:	cmp	r0, #5
   207bc:	beq	20c04 <__assert_fail@plt+0xe8cc>
   207c0:	cmp	r0, #2
   207c4:	bne	20cb4 <__assert_fail@plt+0xe97c>
   207c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   207cc:	tst	r0, #1
   207d0:	bne	21174 <__assert_fail@plt+0xee3c>
   207d4:	mov	r4, #0
   207d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   207dc:	cmp	r0, #0
   207e0:	bne	206a4 <__assert_fail@plt+0xe36c>
   207e4:	b	2097c <__assert_fail@plt+0xe644>
   207e8:	mov	r0, #118	; 0x76
   207ec:	b	20968 <__assert_fail@plt+0xe630>
   207f0:	mov	r0, #1
   207f4:	mov	r5, #39	; 0x27
   207f8:	str	r0, [sp, #52]	; 0x34
   207fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20800:	cmp	r0, #2
   20804:	bne	20878 <__assert_fail@plt+0xe540>
   20808:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2080c:	tst	r0, #1
   20810:	bne	21174 <__assert_fail@plt+0xee3c>
   20814:	ldr	r2, [sp, #48]	; 0x30
   20818:	clz	r1, sl
   2081c:	mov	r8, #0
   20820:	lsr	r1, r1, #5
   20824:	cmp	r2, #0
   20828:	mov	r0, r2
   2082c:	movwne	r0, #1
   20830:	orrs	r0, r0, r1
   20834:	moveq	r2, sl
   20838:	moveq	sl, r0
   2083c:	cmp	r9, sl
   20840:	str	r2, [sp, #48]	; 0x30
   20844:	movcc	r0, #39	; 0x27
   20848:	strbcc	r0, [r6, r9]
   2084c:	add	r0, r9, #1
   20850:	cmp	r0, sl
   20854:	movcc	r1, #92	; 0x5c
   20858:	strbcc	r1, [r6, r0]
   2085c:	add	r0, r9, #2
   20860:	add	r9, r9, #3
   20864:	cmp	r0, sl
   20868:	movcc	r1, #39	; 0x27
   2086c:	strbcc	r1, [r6, r0]
   20870:	mov	r0, #0
   20874:	str	r0, [fp, #-48]	; 0xffffffd0
   20878:	mov	r4, #1
   2087c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20880:	cmp	r0, #0
   20884:	bne	206a4 <__assert_fail@plt+0xe36c>
   20888:	b	2097c <__assert_fail@plt+0xe644>
   2088c:	ldr	r0, [sp, #32]
   20890:	cmp	r0, #1
   20894:	bne	20a80 <__assert_fail@plt+0xe748>
   20898:	str	lr, [sp, #84]	; 0x54
   2089c:	bl	1211c <__ctype_b_loc@plt>
   208a0:	ldr	r0, [r0]
   208a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   208a8:	mov	r1, #1
   208ac:	add	r0, r0, r5, lsl #1
   208b0:	ldrb	r0, [r0, #1]
   208b4:	ubfx	r4, r0, #6, #1
   208b8:	b	20e78 <__assert_fail@plt+0xeb40>
   208bc:	cmp	r7, #0
   208c0:	ldrbeq	r0, [ip, #1]
   208c4:	cmpeq	r0, #0
   208c8:	beq	208e4 <__assert_fail@plt+0xe5ac>
   208cc:	mvn	lr, #0
   208d0:	mov	r8, #0
   208d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   208d8:	cmp	r0, #0
   208dc:	bne	206a4 <__assert_fail@plt+0xe36c>
   208e0:	b	2097c <__assert_fail@plt+0xe644>
   208e4:	mov	r1, #1
   208e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   208ec:	cmp	r0, #2
   208f0:	bne	20900 <__assert_fail@plt+0xe5c8>
   208f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   208f8:	tst	r0, #1
   208fc:	bne	21174 <__assert_fail@plt+0xee3c>
   20900:	mov	r4, r1
   20904:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20908:	cmp	r0, #0
   2090c:	bne	206a4 <__assert_fail@plt+0xe36c>
   20910:	b	2097c <__assert_fail@plt+0xe644>
   20914:	ldr	r1, [sp, #40]	; 0x28
   20918:	mov	r8, #0
   2091c:	mov	r0, #92	; 0x5c
   20920:	cmp	r1, #0
   20924:	beq	20968 <__assert_fail@plt+0xe630>
   20928:	mov	r4, #0
   2092c:	cmp	r8, #0
   20930:	bne	20724 <__assert_fail@plt+0xe3ec>
   20934:	ldr	r2, [fp, #-48]	; 0xffffffd0
   20938:	tst	r2, #1
   2093c:	beq	20a28 <__assert_fail@plt+0xe6f0>
   20940:	cmp	r9, sl
   20944:	movcc	r1, #39	; 0x27
   20948:	strbcc	r1, [r6, r9]
   2094c:	add	r1, r9, #1
   20950:	add	r9, r9, #2
   20954:	cmp	r1, sl
   20958:	movcc	r2, #39	; 0x27
   2095c:	strbcc	r2, [r6, r1]
   20960:	mov	r2, #0
   20964:	b	20a28 <__assert_fail@plt+0xe6f0>
   20968:	ldr	r1, [sp, #80]	; 0x50
   2096c:	mov	r4, #0
   20970:	mov	r8, #0
   20974:	tst	r1, #1
   20978:	bne	209b8 <__assert_fail@plt+0xe680>
   2097c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   20980:	cmp	r0, #0
   20984:	mov	r0, r5
   20988:	beq	209ac <__assert_fail@plt+0xe674>
   2098c:	ldr	r1, [fp, #16]
   20990:	ubfx	r0, r5, #5, #3
   20994:	mov	r2, #1
   20998:	ldr	r0, [r1, r0, lsl #2]
   2099c:	and	r1, r5, #31
   209a0:	tst	r0, r2, lsl r1
   209a4:	mov	r0, r5
   209a8:	bne	209b8 <__assert_fail@plt+0xe680>
   209ac:	ldr	r1, [fp, #-56]	; 0xffffffc8
   209b0:	cmp	r1, #0
   209b4:	beq	20e10 <__assert_fail@plt+0xead8>
   209b8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   209bc:	tst	r1, #1
   209c0:	bne	21154 <__assert_fail@plt+0xee1c>
   209c4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   209c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   209cc:	cmp	r1, #2
   209d0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   209d4:	movwne	r1, #1
   209d8:	orr	r1, r1, r2
   209dc:	tst	r1, #1
   209e0:	bne	20a18 <__assert_fail@plt+0xe6e0>
   209e4:	cmp	r9, sl
   209e8:	movcc	r1, #39	; 0x27
   209ec:	strbcc	r1, [r6, r9]
   209f0:	add	r1, r9, #1
   209f4:	cmp	r1, sl
   209f8:	movcc	r2, #36	; 0x24
   209fc:	strbcc	r2, [r6, r1]
   20a00:	add	r1, r9, #2
   20a04:	add	r9, r9, #3
   20a08:	cmp	r1, sl
   20a0c:	movcc	r2, #39	; 0x27
   20a10:	strbcc	r2, [r6, r1]
   20a14:	mov	r2, #1
   20a18:	cmp	r9, sl
   20a1c:	movcc	r1, #92	; 0x5c
   20a20:	strbcc	r1, [r6, r9]
   20a24:	add	r9, r9, #1
   20a28:	cmp	r9, sl
   20a2c:	add	r7, r7, #1
   20a30:	strbcc	r0, [r6, r9]
   20a34:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20a38:	add	r9, r9, #1
   20a3c:	and	r0, r0, r4
   20a40:	mov	r4, r0
   20a44:	cmn	lr, #1
   20a48:	bne	203bc <__assert_fail@plt+0xe084>
   20a4c:	b	203c8 <__assert_fail@plt+0xe090>
   20a50:	ldr	r0, [sp, #28]
   20a54:	mov	r4, #0
   20a58:	mov	r8, #0
   20a5c:	mov	r5, #0
   20a60:	cmp	r0, #0
   20a64:	beq	2097c <__assert_fail@plt+0xe644>
   20a68:	ldr	r4, [fp, #-52]	; 0xffffffcc
   20a6c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   20a70:	add	r7, r7, #1
   20a74:	cmn	lr, #1
   20a78:	bne	203bc <__assert_fail@plt+0xe084>
   20a7c:	b	203c8 <__assert_fail@plt+0xe090>
   20a80:	mov	r0, #0
   20a84:	cmn	lr, #1
   20a88:	str	r0, [fp, #-36]	; 0xffffffdc
   20a8c:	str	r0, [fp, #-40]	; 0xffffffd8
   20a90:	bne	20aa4 <__assert_fail@plt+0xe76c>
   20a94:	mov	r0, ip
   20a98:	bl	12140 <strlen@plt>
   20a9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   20aa0:	mov	lr, r0
   20aa4:	ldr	r0, [sp, #36]	; 0x24
   20aa8:	str	sl, [sp, #56]	; 0x38
   20aac:	str	lr, [sp, #84]	; 0x54
   20ab0:	cmp	r0, #0
   20ab4:	beq	20ccc <__assert_fail@plt+0xe994>
   20ab8:	add	r0, ip, r7
   20abc:	mov	r4, #1
   20ac0:	mov	r6, #0
   20ac4:	sub	sl, fp, #40	; 0x28
   20ac8:	str	r0, [sp, #20]
   20acc:	str	r6, [sp, #64]	; 0x40
   20ad0:	add	r6, r6, r7
   20ad4:	sub	r0, fp, #44	; 0x2c
   20ad8:	mov	r3, sl
   20adc:	add	r1, ip, r6
   20ae0:	sub	r2, lr, r6
   20ae4:	bl	25314 <__assert_fail@plt+0x12fdc>
   20ae8:	cmn	r0, #2
   20aec:	beq	20e28 <__assert_fail@plt+0xeaf0>
   20af0:	ldr	sl, [sp, #56]	; 0x38
   20af4:	cmn	r0, #1
   20af8:	beq	20e1c <__assert_fail@plt+0xeae4>
   20afc:	cmp	r0, #0
   20b00:	beq	20e20 <__assert_fail@plt+0xeae8>
   20b04:	cmp	r0, #2
   20b08:	bcc	20bc8 <__assert_fail@plt+0xe890>
   20b0c:	ldr	r1, [sp, #64]	; 0x40
   20b10:	ldr	r2, [sp, #20]
   20b14:	add	r1, r2, r1
   20b18:	mov	r2, #1
   20b1c:	ldrb	r3, [r1, r2]
   20b20:	sub	r3, r3, #91	; 0x5b
   20b24:	cmp	r3, #33	; 0x21
   20b28:	bhi	20bbc <__assert_fail@plt+0xe884>
   20b2c:	add	r6, pc, #0
   20b30:	ldr	pc, [r6, r3, lsl #2]
   20b34:	andeq	r1, r2, r0, lsl #3
   20b38:	andeq	r1, r2, r0, lsl #3
   20b3c:			; <UNDEFINED> instruction: 0x00020bbc
   20b40:	andeq	r1, r2, r0, lsl #3
   20b44:			; <UNDEFINED> instruction: 0x00020bbc
   20b48:	andeq	r1, r2, r0, lsl #3
   20b4c:			; <UNDEFINED> instruction: 0x00020bbc
   20b50:			; <UNDEFINED> instruction: 0x00020bbc
   20b54:			; <UNDEFINED> instruction: 0x00020bbc
   20b58:			; <UNDEFINED> instruction: 0x00020bbc
   20b5c:			; <UNDEFINED> instruction: 0x00020bbc
   20b60:			; <UNDEFINED> instruction: 0x00020bbc
   20b64:			; <UNDEFINED> instruction: 0x00020bbc
   20b68:			; <UNDEFINED> instruction: 0x00020bbc
   20b6c:			; <UNDEFINED> instruction: 0x00020bbc
   20b70:			; <UNDEFINED> instruction: 0x00020bbc
   20b74:			; <UNDEFINED> instruction: 0x00020bbc
   20b78:			; <UNDEFINED> instruction: 0x00020bbc
   20b7c:			; <UNDEFINED> instruction: 0x00020bbc
   20b80:			; <UNDEFINED> instruction: 0x00020bbc
   20b84:			; <UNDEFINED> instruction: 0x00020bbc
   20b88:			; <UNDEFINED> instruction: 0x00020bbc
   20b8c:			; <UNDEFINED> instruction: 0x00020bbc
   20b90:			; <UNDEFINED> instruction: 0x00020bbc
   20b94:			; <UNDEFINED> instruction: 0x00020bbc
   20b98:			; <UNDEFINED> instruction: 0x00020bbc
   20b9c:			; <UNDEFINED> instruction: 0x00020bbc
   20ba0:			; <UNDEFINED> instruction: 0x00020bbc
   20ba4:			; <UNDEFINED> instruction: 0x00020bbc
   20ba8:			; <UNDEFINED> instruction: 0x00020bbc
   20bac:			; <UNDEFINED> instruction: 0x00020bbc
   20bb0:			; <UNDEFINED> instruction: 0x00020bbc
   20bb4:			; <UNDEFINED> instruction: 0x00020bbc
   20bb8:	andeq	r1, r2, r0, lsl #3
   20bbc:	add	r2, r2, #1
   20bc0:	cmp	r2, r0
   20bc4:	bcc	20b1c <__assert_fail@plt+0xe7e4>
   20bc8:	ldr	r6, [sp, #64]	; 0x40
   20bcc:	add	r6, r0, r6
   20bd0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20bd4:	bl	11fe4 <iswprint@plt>
   20bd8:	cmp	r0, #0
   20bdc:	sub	sl, fp, #40	; 0x28
   20be0:	movwne	r0, #1
   20be4:	and	r4, r4, r0
   20be8:	mov	r0, sl
   20bec:	bl	11ef4 <mbsinit@plt>
   20bf0:	ldr	ip, [fp, #-84]	; 0xffffffac
   20bf4:	ldr	lr, [sp, #84]	; 0x54
   20bf8:	cmp	r0, #0
   20bfc:	beq	20acc <__assert_fail@plt+0xe794>
   20c00:	b	20e6c <__assert_fail@plt+0xeb34>
   20c04:	ldr	r0, [sp, #24]
   20c08:	cmp	r0, #0
   20c0c:	beq	20cb4 <__assert_fail@plt+0xe97c>
   20c10:	add	r0, r7, #2
   20c14:	cmp	r0, lr
   20c18:	bcs	20cb4 <__assert_fail@plt+0xe97c>
   20c1c:	add	r1, ip, r7
   20c20:	ldrb	r1, [r1, #1]
   20c24:	cmp	r1, #63	; 0x3f
   20c28:	bne	20cb4 <__assert_fail@plt+0xe97c>
   20c2c:	ldrb	r5, [ip, r0]
   20c30:	sub	r1, r5, #33	; 0x21
   20c34:	cmp	r1, #29
   20c38:	bhi	20cb4 <__assert_fail@plt+0xe97c>
   20c3c:	movw	r3, #20929	; 0x51c1
   20c40:	mov	r2, #1
   20c44:	movt	r3, #14336	; 0x3800
   20c48:	tst	r3, r2, lsl r1
   20c4c:	beq	20cb4 <__assert_fail@plt+0xe97c>
   20c50:	ldr	r1, [fp, #-72]	; 0xffffffb8
   20c54:	tst	r1, #1
   20c58:	bne	212a4 <__assert_fail@plt+0xef6c>
   20c5c:	cmp	r9, sl
   20c60:	mov	r7, r0
   20c64:	mov	r4, #0
   20c68:	movcc	r1, #63	; 0x3f
   20c6c:	strbcc	r1, [r6, r9]
   20c70:	add	r1, r9, #1
   20c74:	cmp	r1, sl
   20c78:	movcc	r2, #34	; 0x22
   20c7c:	strbcc	r2, [r6, r1]
   20c80:	add	r1, r9, #2
   20c84:	cmp	r1, sl
   20c88:	movcc	r2, #34	; 0x22
   20c8c:	strbcc	r2, [r6, r1]
   20c90:	add	r1, r9, #3
   20c94:	add	r9, r9, #4
   20c98:	cmp	r1, sl
   20c9c:	movcc	r2, #63	; 0x3f
   20ca0:	strbcc	r2, [r6, r1]
   20ca4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20ca8:	cmp	r0, #0
   20cac:	bne	206a4 <__assert_fail@plt+0xe36c>
   20cb0:	b	2097c <__assert_fail@plt+0xe644>
   20cb4:	mov	r5, #63	; 0x3f
   20cb8:	mov	r4, #0
   20cbc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20cc0:	cmp	r0, #0
   20cc4:	bne	206a4 <__assert_fail@plt+0xe36c>
   20cc8:	b	2097c <__assert_fail@plt+0xe644>
   20ccc:	mov	r4, #1
   20cd0:	mov	r6, #0
   20cd4:	sub	sl, fp, #40	; 0x28
   20cd8:	str	r6, [sp, #64]	; 0x40
   20cdc:	add	r6, r6, r7
   20ce0:	sub	r0, fp, #44	; 0x2c
   20ce4:	mov	r3, sl
   20ce8:	add	r1, ip, r6
   20cec:	sub	r2, lr, r6
   20cf0:	bl	25314 <__assert_fail@plt+0x12fdc>
   20cf4:	cmn	r0, #2
   20cf8:	beq	20e28 <__assert_fail@plt+0xeaf0>
   20cfc:	cmn	r0, #1
   20d00:	beq	20e1c <__assert_fail@plt+0xeae4>
   20d04:	ldr	r6, [sp, #64]	; 0x40
   20d08:	cmp	r0, #0
   20d0c:	beq	20e68 <__assert_fail@plt+0xeb30>
   20d10:	add	r6, r0, r6
   20d14:	ldr	r0, [fp, #-44]	; 0xffffffd4
   20d18:	bl	11fe4 <iswprint@plt>
   20d1c:	cmp	r0, #0
   20d20:	sub	sl, fp, #40	; 0x28
   20d24:	movwne	r0, #1
   20d28:	and	r4, r4, r0
   20d2c:	mov	r0, sl
   20d30:	bl	11ef4 <mbsinit@plt>
   20d34:	ldr	ip, [fp, #-84]	; 0xffffffac
   20d38:	ldr	lr, [sp, #84]	; 0x54
   20d3c:	cmp	r0, #0
   20d40:	beq	20cd8 <__assert_fail@plt+0xe9a0>
   20d44:	b	20e6c <__assert_fail@plt+0xeb34>
   20d48:	cmp	r9, sl
   20d4c:	mov	r2, #1
   20d50:	movcc	r0, #39	; 0x27
   20d54:	strbcc	r0, [r6, r9]
   20d58:	add	r0, r9, #1
   20d5c:	cmp	r0, sl
   20d60:	movcc	r1, #36	; 0x24
   20d64:	strbcc	r1, [r6, r0]
   20d68:	add	r0, r9, #2
   20d6c:	cmp	r0, sl
   20d70:	movcc	r1, #39	; 0x27
   20d74:	strbcc	r1, [r6, r0]
   20d78:	add	r0, r9, #3
   20d7c:	cmp	r0, sl
   20d80:	add	r9, r0, #1
   20d84:	str	r2, [fp, #-48]	; 0xffffffd0
   20d88:	movcc	r1, #92	; 0x5c
   20d8c:	strbcc	r1, [r6, r0]
   20d90:	ldr	r1, [fp, #-64]	; 0xffffffc0
   20d94:	cmp	r1, #2
   20d98:	beq	20df8 <__assert_fail@plt+0xeac0>
   20d9c:	add	r1, r7, #1
   20da0:	mov	r4, #0
   20da4:	mov	r8, #1
   20da8:	mov	r5, #48	; 0x30
   20dac:	cmp	r1, lr
   20db0:	bcs	20698 <__assert_fail@plt+0xe360>
   20db4:	ldrb	r1, [ip, r1]
   20db8:	sub	r1, r1, #48	; 0x30
   20dbc:	uxtb	r1, r1
   20dc0:	cmp	r1, #9
   20dc4:	bhi	20698 <__assert_fail@plt+0xe360>
   20dc8:	cmp	r9, sl
   20dcc:	movcc	r1, #48	; 0x30
   20dd0:	strbcc	r1, [r6, r9]
   20dd4:	add	r1, r0, #2
   20dd8:	add	r9, r0, #3
   20ddc:	cmp	r1, sl
   20de0:	movcc	r2, #48	; 0x30
   20de4:	strbcc	r2, [r6, r1]
   20de8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20dec:	cmp	r0, #0
   20df0:	bne	206a4 <__assert_fail@plt+0xe36c>
   20df4:	b	2097c <__assert_fail@plt+0xe644>
   20df8:	mov	r0, #48	; 0x30
   20dfc:	mov	r8, #1
   20e00:	mov	r4, #0
   20e04:	ldr	r1, [fp, #-56]	; 0xffffffc8
   20e08:	cmp	r1, #0
   20e0c:	bne	209b8 <__assert_fail@plt+0xe680>
   20e10:	cmp	r8, #0
   20e14:	beq	20934 <__assert_fail@plt+0xe5fc>
   20e18:	b	20724 <__assert_fail@plt+0xe3ec>
   20e1c:	mov	r4, #0
   20e20:	ldr	ip, [fp, #-84]	; 0xffffffac
   20e24:	b	20e60 <__assert_fail@plt+0xeb28>
   20e28:	ldr	r1, [sp, #84]	; 0x54
   20e2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   20e30:	mov	r4, #0
   20e34:	cmp	r6, r1
   20e38:	bcs	20e60 <__assert_fail@plt+0xeb28>
   20e3c:	ldrb	r0, [ip, r6]
   20e40:	cmp	r0, #0
   20e44:	beq	20e60 <__assert_fail@plt+0xeb28>
   20e48:	ldr	r0, [sp, #64]	; 0x40
   20e4c:	add	r0, r0, #1
   20e50:	add	r6, r0, r7
   20e54:	str	r0, [sp, #64]	; 0x40
   20e58:	cmp	r6, r1
   20e5c:	bcc	20e3c <__assert_fail@plt+0xeb04>
   20e60:	ldr	r6, [sp, #64]	; 0x40
   20e64:	b	20e6c <__assert_fail@plt+0xeb34>
   20e68:	ldr	ip, [fp, #-84]	; 0xffffffac
   20e6c:	mov	r1, r6
   20e70:	ldr	r6, [sp, #76]	; 0x4c
   20e74:	ldr	sl, [sp, #56]	; 0x38
   20e78:	ldr	r0, [sp, #44]	; 0x2c
   20e7c:	cmp	r1, #1
   20e80:	orr	r2, r4, r0
   20e84:	mov	r0, r1
   20e88:	bhi	20ea8 <__assert_fail@plt+0xeb70>
   20e8c:	tst	r2, #1
   20e90:	beq	20ea8 <__assert_fail@plt+0xeb70>
   20e94:	ldr	lr, [sp, #84]	; 0x54
   20e98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20e9c:	cmp	r0, #0
   20ea0:	bne	206a4 <__assert_fail@plt+0xe36c>
   20ea4:	b	2097c <__assert_fail@plt+0xe644>
   20ea8:	str	r2, [sp, #64]	; 0x40
   20eac:	add	r0, r0, r7
   20eb0:	add	r1, r7, #1
   20eb4:	ldr	lr, [sp, #84]	; 0x54
   20eb8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   20ebc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   20ec0:	mov	r3, #0
   20ec4:	str	r0, [sp, #56]	; 0x38
   20ec8:	ldr	r0, [sp, #64]	; 0x40
   20ecc:	tst	r0, #1
   20ed0:	bne	20fb8 <__assert_fail@plt+0xec80>
   20ed4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   20ed8:	tst	r0, #1
   20edc:	bne	21158 <__assert_fail@plt+0xee20>
   20ee0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   20ee4:	cmp	r7, #2
   20ee8:	movwne	r3, #1
   20eec:	orr	r3, r3, r2
   20ef0:	tst	r3, #1
   20ef4:	bne	20f2c <__assert_fail@plt+0xebf4>
   20ef8:	cmp	r9, sl
   20efc:	add	r3, r9, #1
   20f00:	movcc	r2, #39	; 0x27
   20f04:	strbcc	r2, [r6, r9]
   20f08:	cmp	r3, sl
   20f0c:	movcc	r2, #36	; 0x24
   20f10:	strbcc	r2, [r6, r3]
   20f14:	add	r3, r9, #2
   20f18:	add	r9, r9, #3
   20f1c:	cmp	r3, sl
   20f20:	movcc	r2, #39	; 0x27
   20f24:	strbcc	r2, [r6, r3]
   20f28:	mov	r2, #1
   20f2c:	cmp	r9, sl
   20f30:	mov	r0, r2
   20f34:	movcc	r3, #92	; 0x5c
   20f38:	strbcc	r3, [r6, r9]
   20f3c:	add	r3, r9, #1
   20f40:	cmp	r3, sl
   20f44:	andcc	r7, r5, #192	; 0xc0
   20f48:	movcc	r2, #48	; 0x30
   20f4c:	orrcc	r7, r2, r7, lsr #6
   20f50:	strbcc	r7, [r6, r3]
   20f54:	add	r3, r9, #2
   20f58:	add	r9, r9, #3
   20f5c:	cmp	r3, sl
   20f60:	lsrcc	r7, r5, #3
   20f64:	movcc	r2, #6
   20f68:	bficc	r7, r2, #3, #29
   20f6c:	mov	r2, #6
   20f70:	strbcc	r7, [r6, r3]
   20f74:	bfi	r5, r2, #3, #29
   20f78:	mov	r3, #1
   20f7c:	mov	r2, r0
   20f80:	ldr	r0, [sp, #56]	; 0x38
   20f84:	and	r8, r3, #1
   20f88:	cmp	r0, r1
   20f8c:	bhi	20fec <__assert_fail@plt+0xecb4>
   20f90:	b	2102c <__assert_fail@plt+0xecf4>
   20f94:	cmp	r9, sl
   20f98:	ldr	r7, [fp, #-64]	; 0xffffffc0
   20f9c:	strbcc	r5, [r6, r9]
   20fa0:	add	r9, r9, #1
   20fa4:	ldrb	r5, [ip, r1]
   20fa8:	add	r1, r1, #1
   20fac:	ldr	r0, [sp, #64]	; 0x40
   20fb0:	tst	r0, #1
   20fb4:	beq	20ed4 <__assert_fail@plt+0xeb9c>
   20fb8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   20fbc:	tst	r7, #1
   20fc0:	beq	20fd4 <__assert_fail@plt+0xec9c>
   20fc4:	cmp	r9, sl
   20fc8:	movcc	r7, #92	; 0x5c
   20fcc:	strbcc	r7, [r6, r9]
   20fd0:	add	r9, r9, #1
   20fd4:	mov	r7, #0
   20fd8:	str	r7, [fp, #-56]	; 0xffffffc8
   20fdc:	ldr	r0, [sp, #56]	; 0x38
   20fe0:	and	r8, r3, #1
   20fe4:	cmp	r0, r1
   20fe8:	bls	2102c <__assert_fail@plt+0xecf4>
   20fec:	cmp	r8, #0
   20ff0:	mvn	r7, r2
   20ff4:	movwne	r8, #1
   20ff8:	orr	r7, r7, r8
   20ffc:	tst	r7, #1
   21000:	bne	20f94 <__assert_fail@plt+0xec5c>
   21004:	cmp	r9, sl
   21008:	movcc	r7, #39	; 0x27
   2100c:	strbcc	r7, [r6, r9]
   21010:	add	r7, r9, #1
   21014:	add	r9, r9, #2
   21018:	cmp	r7, sl
   2101c:	movcc	r2, #39	; 0x27
   21020:	strbcc	r2, [r6, r7]
   21024:	mov	r2, #0
   21028:	b	20f94 <__assert_fail@plt+0xec5c>
   2102c:	cmp	r8, #0
   21030:	sub	r7, r1, #1
   21034:	mov	r0, r5
   21038:	str	r2, [fp, #-48]	; 0xffffffd0
   2103c:	movwne	r8, #1
   21040:	cmp	r8, #0
   21044:	beq	20934 <__assert_fail@plt+0xe5fc>
   21048:	b	20724 <__assert_fail@plt+0xe3ec>
   2104c:	mov	lr, r7
   21050:	b	21058 <__assert_fail@plt+0xed20>
   21054:	mvn	lr, #0
   21058:	ldr	r7, [fp, #-64]	; 0xffffffc0
   2105c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   21060:	eor	r0, r7, #2
   21064:	orr	r0, r0, r9
   21068:	clz	r0, r0
   2106c:	lsr	r0, r0, #5
   21070:	tst	r1, r0
   21074:	bne	21174 <__assert_fail@plt+0xee3c>
   21078:	mov	r0, r1
   2107c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   21080:	cmp	r7, #2
   21084:	movwne	r1, #1
   21088:	orr	r0, r0, r1
   2108c:	tst	r0, #1
   21090:	ldreq	r0, [sp, #52]	; 0x34
   21094:	streq	lr, [sp, #84]	; 0x54
   21098:	eoreq	r0, r0, #1
   2109c:	tsteq	r0, #1
   210a0:	bne	21238 <__assert_fail@plt+0xef00>
   210a4:	tst	r4, #1
   210a8:	bne	211f4 <__assert_fail@plt+0xeebc>
   210ac:	ldr	r6, [sp, #48]	; 0x30
   210b0:	mov	r8, #0
   210b4:	cmp	r6, #0
   210b8:	beq	21230 <__assert_fail@plt+0xeef8>
   210bc:	ldr	r0, [sp, #80]	; 0x50
   210c0:	mov	r1, #0
   210c4:	cmp	sl, #0
   210c8:	mov	r4, #0
   210cc:	str	r1, [fp, #-72]	; 0xffffffb8
   210d0:	beq	1ffc4 <__assert_fail@plt+0xdc8c>
   210d4:	b	21238 <__assert_fail@plt+0xef00>
   210d8:	ldrb	r1, [r0, #3]
   210dc:	cmp	r1, #56	; 0x38
   210e0:	ldrbeq	r1, [r0, #4]
   210e4:	cmpeq	r1, #48	; 0x30
   210e8:	bne	201bc <__assert_fail@plt+0xde84>
   210ec:	ldrb	r1, [r0, #5]
   210f0:	cmp	r1, #51	; 0x33
   210f4:	ldrbeq	r1, [r0, #6]
   210f8:	cmpeq	r1, #48	; 0x30
   210fc:	bne	201bc <__assert_fail@plt+0xde84>
   21100:	ldrb	r0, [r0, #7]
   21104:	cmp	r0, #0
   21108:	movw	r0, #33071	; 0x812f
   2110c:	movt	r0, #2
   21110:	str	r0, [sp, #68]	; 0x44
   21114:	bne	201bc <__assert_fail@plt+0xde84>
   21118:	b	201d8 <__assert_fail@plt+0xdea0>
   2111c:	ldrb	r1, [r0, #4]
   21120:	cmp	r1, #48	; 0x30
   21124:	ldrbeq	r1, [r0, #5]
   21128:	cmpeq	r1, #51	; 0x33
   2112c:	bne	202a0 <__assert_fail@plt+0xdf68>
   21130:	ldrb	r1, [r0, #6]
   21134:	cmp	r1, #48	; 0x30
   21138:	ldrbeq	r0, [r0, #7]
   2113c:	cmpeq	r0, #0
   21140:	bne	202a0 <__assert_fail@plt+0xdf68>
   21144:	movw	r0, #33075	; 0x8133
   21148:	movt	r0, #2
   2114c:	str	r0, [sp, #72]	; 0x48
   21150:	b	202c0 <__assert_fail@plt+0xdf88>
   21154:	ldr	r7, [fp, #-64]	; 0xffffffc0
   21158:	ldr	r2, [sp, #80]	; 0x50
   2115c:	b	21194 <__assert_fail@plt+0xee5c>
   21160:	ldr	ip, [fp, #-84]	; 0xffffffac
   21164:	mov	r2, #1
   21168:	mov	lr, r4
   2116c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   21170:	b	21194 <__assert_fail@plt+0xee5c>
   21174:	ldr	r2, [sp, #80]	; 0x50
   21178:	mov	r7, #2
   2117c:	b	21194 <__assert_fail@plt+0xee5c>
   21180:	ldr	r6, [sp, #76]	; 0x4c
   21184:	ldr	ip, [fp, #-84]	; 0xffffffac
   21188:	ldr	lr, [sp, #84]	; 0x54
   2118c:	ldr	r2, [sp, #80]	; 0x50
   21190:	mov	r7, #2
   21194:	mov	r0, #0
   21198:	ldr	r1, [fp, #12]
   2119c:	tst	r2, #1
   211a0:	mov	r2, r7
   211a4:	mov	r3, lr
   211a8:	str	r0, [sp, #8]
   211ac:	ldr	r0, [sp, #68]	; 0x44
   211b0:	movwne	r2, #4
   211b4:	cmp	r7, #2
   211b8:	movne	r2, r7
   211bc:	str	r2, [sp]
   211c0:	mov	r2, ip
   211c4:	bic	r1, r1, #2
   211c8:	str	r0, [sp, #12]
   211cc:	ldr	r0, [sp, #72]	; 0x48
   211d0:	str	r1, [sp, #4]
   211d4:	mov	r1, sl
   211d8:	str	r0, [sp, #16]
   211dc:	mov	r0, r6
   211e0:	bl	1ff48 <__assert_fail@plt+0xdc10>
   211e4:	mov	r9, r0
   211e8:	mov	r0, r9
   211ec:	sub	sp, fp, #28
   211f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211f4:	mov	r0, #5
   211f8:	ldr	r1, [sp, #48]	; 0x30
   211fc:	ldr	r2, [fp, #-84]	; 0xffffffac
   21200:	ldr	r3, [sp, #84]	; 0x54
   21204:	str	r0, [sp]
   21208:	ldr	r0, [fp, #12]
   2120c:	str	r0, [sp, #4]
   21210:	ldr	r0, [fp, #16]
   21214:	str	r0, [sp, #8]
   21218:	ldr	r0, [sp, #68]	; 0x44
   2121c:	str	r0, [sp, #12]
   21220:	ldr	r0, [sp, #72]	; 0x48
   21224:	str	r0, [sp, #16]
   21228:	ldr	r0, [sp, #76]	; 0x4c
   2122c:	b	211e0 <__assert_fail@plt+0xeea8>
   21230:	mov	r0, #0
   21234:	str	r0, [fp, #-72]	; 0xffffffb8
   21238:	ldr	r1, [sp, #92]	; 0x5c
   2123c:	cmp	r1, #0
   21240:	beq	21280 <__assert_fail@plt+0xef48>
   21244:	ldr	r0, [fp, #-72]	; 0xffffffb8
   21248:	ldr	r2, [sp, #76]	; 0x4c
   2124c:	tst	r0, #1
   21250:	bne	21284 <__assert_fail@plt+0xef4c>
   21254:	ldrb	r0, [r1]
   21258:	cmp	r0, #0
   2125c:	beq	21284 <__assert_fail@plt+0xef4c>
   21260:	add	r1, r1, #1
   21264:	cmp	r9, sl
   21268:	strbcc	r0, [r2, r9]
   2126c:	add	r9, r9, #1
   21270:	ldrb	r0, [r1], #1
   21274:	cmp	r0, #0
   21278:	bne	21264 <__assert_fail@plt+0xef2c>
   2127c:	b	21284 <__assert_fail@plt+0xef4c>
   21280:	ldr	r2, [sp, #76]	; 0x4c
   21284:	cmp	r9, sl
   21288:	movcc	r0, #0
   2128c:	strbcc	r0, [r2, r9]
   21290:	mov	r0, r9
   21294:	sub	sp, fp, #28
   21298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2129c:	mov	r2, #1
   212a0:	b	2116c <__assert_fail@plt+0xee34>
   212a4:	ldr	r2, [sp, #80]	; 0x50
   212a8:	mov	r7, #5
   212ac:	b	21194 <__assert_fail@plt+0xee5c>
   212b0:	bl	12314 <abort@plt>
   212b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212b8:	add	fp, sp, #28
   212bc:	sub	sp, sp, #28
   212c0:	movw	r5, #39112	; 0x98c8
   212c4:	cmp	r2, #0
   212c8:	mov	r4, r1
   212cc:	mov	r7, r0
   212d0:	str	r0, [sp, #20]
   212d4:	movt	r5, #3
   212d8:	movne	r5, r2
   212dc:	bl	12164 <__errno_location@plt>
   212e0:	mov	sl, r0
   212e4:	ldm	r5, {r0, r1}
   212e8:	ldr	r2, [r5, #40]	; 0x28
   212ec:	ldr	r3, [r5, #44]	; 0x2c
   212f0:	add	r9, r5, #8
   212f4:	ldr	r6, [sl]
   212f8:	orr	r8, r1, #1
   212fc:	mov	r1, #0
   21300:	str	r6, [sp, #24]
   21304:	stm	sp, {r0, r8, r9}
   21308:	str	r2, [sp, #12]
   2130c:	str	r3, [sp, #16]
   21310:	mov	r0, #0
   21314:	mov	r2, r7
   21318:	mov	r3, r4
   2131c:	mov	r6, r4
   21320:	bl	1ff48 <__assert_fail@plt+0xdc10>
   21324:	add	r7, r0, #1
   21328:	mov	r0, r7
   2132c:	bl	23500 <__assert_fail@plt+0x111c8>
   21330:	mov	r4, r0
   21334:	ldr	r0, [r5]
   21338:	ldr	r2, [r5, #44]	; 0x2c
   2133c:	ldr	r1, [r5, #40]	; 0x28
   21340:	mov	r3, r6
   21344:	stm	sp, {r0, r8, r9}
   21348:	str	r2, [sp, #16]
   2134c:	str	r1, [sp, #12]
   21350:	mov	r0, r4
   21354:	mov	r1, r7
   21358:	ldr	r2, [sp, #20]
   2135c:	bl	1ff48 <__assert_fail@plt+0xdc10>
   21360:	ldr	r0, [sp, #24]
   21364:	str	r0, [sl]
   21368:	mov	r0, r4
   2136c:	sub	sp, fp, #28
   21370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21378:	add	fp, sp, #28
   2137c:	sub	sp, sp, #36	; 0x24
   21380:	movw	r8, #39112	; 0x98c8
   21384:	cmp	r3, #0
   21388:	mov	r4, r2
   2138c:	str	r2, [sp, #24]
   21390:	mov	r5, r1
   21394:	mov	r6, r0
   21398:	str	r0, [sp, #20]
   2139c:	movt	r8, #3
   213a0:	movne	r8, r3
   213a4:	bl	12164 <__errno_location@plt>
   213a8:	str	r0, [sp, #28]
   213ac:	cmp	r4, #0
   213b0:	add	sl, r8, #8
   213b4:	ldm	r8, {r3, r9}
   213b8:	ldr	r7, [r0]
   213bc:	ldr	r1, [r8, #40]	; 0x28
   213c0:	ldr	r2, [r8, #44]	; 0x2c
   213c4:	mov	r0, #0
   213c8:	orreq	r9, r9, #1
   213cc:	str	r7, [sp, #32]
   213d0:	mov	r7, r5
   213d4:	stm	sp, {r3, r9, sl}
   213d8:	str	r1, [sp, #12]
   213dc:	str	r2, [sp, #16]
   213e0:	mov	r1, #0
   213e4:	mov	r2, r6
   213e8:	mov	r3, r5
   213ec:	bl	1ff48 <__assert_fail@plt+0xdc10>
   213f0:	add	r4, r0, #1
   213f4:	mov	r5, r0
   213f8:	mov	r0, r4
   213fc:	bl	23500 <__assert_fail@plt+0x111c8>
   21400:	mov	r6, r0
   21404:	ldr	r0, [r8]
   21408:	ldr	r2, [r8, #44]	; 0x2c
   2140c:	ldr	r1, [r8, #40]	; 0x28
   21410:	mov	r3, r7
   21414:	stm	sp, {r0, r9, sl}
   21418:	str	r2, [sp, #16]
   2141c:	str	r1, [sp, #12]
   21420:	mov	r0, r6
   21424:	mov	r1, r4
   21428:	ldr	r2, [sp, #20]
   2142c:	bl	1ff48 <__assert_fail@plt+0xdc10>
   21430:	ldr	r0, [sp, #24]
   21434:	ldr	r1, [sp, #32]
   21438:	ldr	r2, [sp, #28]
   2143c:	cmp	r0, #0
   21440:	str	r1, [r2]
   21444:	strne	r5, [r0]
   21448:	mov	r0, r6
   2144c:	sub	sp, fp, #28
   21450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21454:	push	{r4, r5, r6, r7, fp, lr}
   21458:	add	fp, sp, #16
   2145c:	movw	r4, #37536	; 0x92a0
   21460:	movt	r4, #3
   21464:	ldrd	r6, [r4]
   21468:	cmp	r7, #2
   2146c:	blt	21498 <__assert_fail@plt+0xf160>
   21470:	add	r5, r6, #12
   21474:	mov	r7, #0
   21478:	ldr	r0, [r5, r7, lsl #3]
   2147c:	bl	1d88c <__assert_fail@plt+0xb554>
   21480:	ldr	r1, [r4, #4]
   21484:	add	r2, r7, #2
   21488:	add	r0, r7, #1
   2148c:	mov	r7, r0
   21490:	cmp	r2, r1
   21494:	blt	21478 <__assert_fail@plt+0xf140>
   21498:	ldr	r0, [r6, #4]
   2149c:	movw	r5, #39160	; 0x98f8
   214a0:	movt	r5, #3
   214a4:	cmp	r0, r5
   214a8:	beq	214bc <__assert_fail@plt+0xf184>
   214ac:	bl	1d88c <__assert_fail@plt+0xb554>
   214b0:	mov	r0, #256	; 0x100
   214b4:	str	r0, [r4, #8]
   214b8:	str	r5, [r4, #12]
   214bc:	add	r5, r4, #8
   214c0:	cmp	r6, r5
   214c4:	beq	214d4 <__assert_fail@plt+0xf19c>
   214c8:	mov	r0, r6
   214cc:	bl	1d88c <__assert_fail@plt+0xb554>
   214d0:	str	r5, [r4]
   214d4:	mov	r0, #1
   214d8:	str	r0, [r4, #4]
   214dc:	pop	{r4, r5, r6, r7, fp, pc}
   214e0:	movw	r3, #39112	; 0x98c8
   214e4:	mvn	r2, #0
   214e8:	movt	r3, #3
   214ec:	b	214f0 <__assert_fail@plt+0xf1b8>
   214f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214f4:	add	fp, sp, #28
   214f8:	sub	sp, sp, #44	; 0x2c
   214fc:	mov	r7, r3
   21500:	str	r2, [sp, #36]	; 0x24
   21504:	str	r1, [sp, #32]
   21508:	mov	r5, r0
   2150c:	bl	12164 <__errno_location@plt>
   21510:	cmp	r5, #0
   21514:	blt	21678 <__assert_fail@plt+0xf340>
   21518:	cmn	r5, #-2147483647	; 0x80000001
   2151c:	beq	21678 <__assert_fail@plt+0xf340>
   21520:	movw	r8, #37536	; 0x92a0
   21524:	mov	r4, r0
   21528:	movt	r8, #3
   2152c:	ldr	r6, [r8]
   21530:	ldr	r1, [r8, #4]
   21534:	ldr	r0, [r0]
   21538:	str	r4, [sp, #28]
   2153c:	cmp	r1, r5
   21540:	str	r0, [sp, #24]
   21544:	ble	21550 <__assert_fail@plt+0xf218>
   21548:	mov	sl, r6
   2154c:	b	215b4 <__assert_fail@plt+0xf27c>
   21550:	mov	r0, #8
   21554:	add	r9, r8, #8
   21558:	add	r2, r5, #1
   2155c:	str	r1, [fp, #-32]	; 0xffffffe0
   21560:	mvn	r3, #-2147483648	; 0x80000000
   21564:	str	r0, [sp]
   21568:	subs	r0, r6, r9
   2156c:	sub	r2, r2, r1
   21570:	sub	r1, fp, #32
   21574:	movne	r0, r6
   21578:	bl	23700 <__assert_fail@plt+0x113c8>
   2157c:	str	r0, [r8]
   21580:	cmp	r6, r9
   21584:	mov	sl, r0
   21588:	ldrdeq	r0, [r8, #8]
   2158c:	stmeq	sl, {r0, r1}
   21590:	ldr	r1, [r8, #4]
   21594:	ldr	r2, [fp, #-32]	; 0xffffffe0
   21598:	add	r0, sl, r1, lsl #3
   2159c:	sub	r1, r2, r1
   215a0:	lsl	r2, r1, #3
   215a4:	mov	r1, #0
   215a8:	bl	12188 <memset@plt>
   215ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   215b0:	str	r0, [r8, #4]
   215b4:	mov	r9, sl
   215b8:	ldr	r6, [r9, r5, lsl #3]!
   215bc:	ldr	r4, [r9, #4]!
   215c0:	ldm	r7, {r0, r1}
   215c4:	ldr	r2, [r7, #40]	; 0x28
   215c8:	ldr	r3, [r7, #44]	; 0x2c
   215cc:	orr	r8, r1, #1
   215d0:	add	r1, r7, #8
   215d4:	stm	sp, {r0, r8}
   215d8:	add	r0, sp, #8
   215dc:	str	r1, [sp, #20]
   215e0:	stm	r0, {r1, r2, r3}
   215e4:	mov	r0, r4
   215e8:	mov	r1, r6
   215ec:	ldr	r2, [sp, #32]
   215f0:	ldr	r3, [sp, #36]	; 0x24
   215f4:	bl	1ff48 <__assert_fail@plt+0xdc10>
   215f8:	cmp	r6, r0
   215fc:	bhi	21660 <__assert_fail@plt+0xf328>
   21600:	add	r6, r0, #1
   21604:	movw	r0, #39160	; 0x98f8
   21608:	movt	r0, #3
   2160c:	str	r6, [sl, r5, lsl #3]
   21610:	cmp	r4, r0
   21614:	beq	21620 <__assert_fail@plt+0xf2e8>
   21618:	mov	r0, r4
   2161c:	bl	1d88c <__assert_fail@plt+0xb554>
   21620:	mov	r0, r6
   21624:	bl	23500 <__assert_fail@plt+0x111c8>
   21628:	str	r0, [r9]
   2162c:	mov	r4, r0
   21630:	add	r3, sp, #8
   21634:	ldr	r0, [r7]
   21638:	ldr	r1, [r7, #40]	; 0x28
   2163c:	ldr	r2, [r7, #44]	; 0x2c
   21640:	stm	sp, {r0, r8}
   21644:	ldr	r0, [sp, #20]
   21648:	stm	r3, {r0, r1, r2}
   2164c:	mov	r0, r4
   21650:	mov	r1, r6
   21654:	ldr	r2, [sp, #32]
   21658:	ldr	r3, [sp, #36]	; 0x24
   2165c:	bl	1ff48 <__assert_fail@plt+0xdc10>
   21660:	ldr	r1, [sp, #24]
   21664:	ldr	r0, [sp, #28]
   21668:	str	r1, [r0]
   2166c:	mov	r0, r4
   21670:	sub	sp, fp, #28
   21674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21678:	bl	12314 <abort@plt>
   2167c:	movw	r3, #39112	; 0x98c8
   21680:	movt	r3, #3
   21684:	b	214f0 <__assert_fail@plt+0xf1b8>
   21688:	movw	r3, #39112	; 0x98c8
   2168c:	mov	r1, r0
   21690:	mov	r0, #0
   21694:	mvn	r2, #0
   21698:	movt	r3, #3
   2169c:	b	214f0 <__assert_fail@plt+0xf1b8>
   216a0:	movw	r3, #39112	; 0x98c8
   216a4:	mov	r2, r1
   216a8:	mov	r1, r0
   216ac:	mov	r0, #0
   216b0:	movt	r3, #3
   216b4:	b	214f0 <__assert_fail@plt+0xf1b8>
   216b8:	push	{fp, lr}
   216bc:	mov	fp, sp
   216c0:	sub	sp, sp, #48	; 0x30
   216c4:	vmov.i32	q8, #0	; 0x00000000
   216c8:	mov	ip, #32
   216cc:	mov	r3, sp
   216d0:	mov	lr, r2
   216d4:	cmp	r1, #10
   216d8:	add	r2, r3, #16
   216dc:	vst1.64	{d16-d17}, [r3], ip
   216e0:	vst1.64	{d16-d17}, [r3]
   216e4:	vst1.64	{d16-d17}, [r2]
   216e8:	beq	21708 <__assert_fail@plt+0xf3d0>
   216ec:	str	r1, [sp]
   216f0:	mov	r3, sp
   216f4:	mov	r1, lr
   216f8:	mvn	r2, #0
   216fc:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21700:	mov	sp, fp
   21704:	pop	{fp, pc}
   21708:	bl	12314 <abort@plt>
   2170c:	push	{r4, sl, fp, lr}
   21710:	add	fp, sp, #8
   21714:	sub	sp, sp, #48	; 0x30
   21718:	mov	ip, r3
   2171c:	mov	r3, sp
   21720:	vmov.i32	q8, #0	; 0x00000000
   21724:	mov	lr, #32
   21728:	cmp	r1, #10
   2172c:	add	r4, r3, #16
   21730:	vst1.64	{d16-d17}, [r3], lr
   21734:	vst1.64	{d16-d17}, [r3]
   21738:	vst1.64	{d16-d17}, [r4]
   2173c:	beq	2175c <__assert_fail@plt+0xf424>
   21740:	str	r1, [sp]
   21744:	mov	r1, r2
   21748:	mov	r3, sp
   2174c:	mov	r2, ip
   21750:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21754:	sub	sp, fp, #8
   21758:	pop	{r4, sl, fp, pc}
   2175c:	bl	12314 <abort@plt>
   21760:	push	{fp, lr}
   21764:	mov	fp, sp
   21768:	sub	sp, sp, #48	; 0x30
   2176c:	mov	r3, sp
   21770:	vmov.i32	q8, #0	; 0x00000000
   21774:	mov	ip, #32
   21778:	cmp	r0, #10
   2177c:	add	r2, r3, #16
   21780:	vst1.64	{d16-d17}, [r3], ip
   21784:	vst1.64	{d16-d17}, [r3]
   21788:	vst1.64	{d16-d17}, [r2]
   2178c:	beq	217ac <__assert_fail@plt+0xf474>
   21790:	str	r0, [sp]
   21794:	mov	r3, sp
   21798:	mov	r0, #0
   2179c:	mvn	r2, #0
   217a0:	bl	214f0 <__assert_fail@plt+0xf1b8>
   217a4:	mov	sp, fp
   217a8:	pop	{fp, pc}
   217ac:	bl	12314 <abort@plt>
   217b0:	push	{fp, lr}
   217b4:	mov	fp, sp
   217b8:	sub	sp, sp, #48	; 0x30
   217bc:	mov	r3, sp
   217c0:	vmov.i32	q8, #0	; 0x00000000
   217c4:	mov	ip, #32
   217c8:	cmp	r0, #10
   217cc:	add	lr, r3, #16
   217d0:	vst1.64	{d16-d17}, [r3], ip
   217d4:	vst1.64	{d16-d17}, [r3]
   217d8:	vst1.64	{d16-d17}, [lr]
   217dc:	beq	217f8 <__assert_fail@plt+0xf4c0>
   217e0:	str	r0, [sp]
   217e4:	mov	r3, sp
   217e8:	mov	r0, #0
   217ec:	bl	214f0 <__assert_fail@plt+0xf1b8>
   217f0:	mov	sp, fp
   217f4:	pop	{fp, pc}
   217f8:	bl	12314 <abort@plt>
   217fc:	push	{r4, sl, fp, lr}
   21800:	add	fp, sp, #8
   21804:	sub	sp, sp, #48	; 0x30
   21808:	mov	lr, r0
   2180c:	movw	r0, #39112	; 0x98c8
   21810:	mov	r3, #32
   21814:	mov	ip, r1
   21818:	mov	r4, #1
   2181c:	movt	r0, #3
   21820:	add	r1, r0, #16
   21824:	vld1.64	{d16-d17}, [r0], r3
   21828:	mov	r3, sp
   2182c:	vld1.64	{d18-d19}, [r1]
   21830:	add	r1, r3, #16
   21834:	vld1.64	{d20-d21}, [r0]
   21838:	add	r0, r3, #32
   2183c:	vst1.64	{d18-d19}, [r1]
   21840:	mov	r1, r3
   21844:	vst1.64	{d20-d21}, [r0]
   21848:	mov	r0, #28
   2184c:	and	r0, r0, r2, lsr #3
   21850:	and	r2, r2, #31
   21854:	vst1.64	{d16-d17}, [r1], r0
   21858:	ldr	r0, [r1, #8]
   2185c:	bic	r4, r4, r0, lsr r2
   21860:	eor	r0, r0, r4, lsl r2
   21864:	mov	r2, ip
   21868:	str	r0, [r1, #8]
   2186c:	mov	r0, #0
   21870:	mov	r1, lr
   21874:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21878:	sub	sp, fp, #8
   2187c:	pop	{r4, sl, fp, pc}
   21880:	push	{fp, lr}
   21884:	mov	fp, sp
   21888:	sub	sp, sp, #48	; 0x30
   2188c:	mov	ip, r0
   21890:	movw	r0, #39112	; 0x98c8
   21894:	mov	r3, #32
   21898:	movt	r0, #3
   2189c:	add	r2, r0, #16
   218a0:	vld1.64	{d16-d17}, [r0], r3
   218a4:	mov	r3, sp
   218a8:	vld1.64	{d18-d19}, [r2]
   218ac:	add	r2, r3, #16
   218b0:	vld1.64	{d20-d21}, [r0]
   218b4:	add	r0, r3, #32
   218b8:	vst1.64	{d18-d19}, [r2]
   218bc:	mov	r2, r3
   218c0:	vst1.64	{d20-d21}, [r0]
   218c4:	mov	r0, #28
   218c8:	and	r0, r0, r1, lsr #3
   218cc:	and	r1, r1, #31
   218d0:	vst1.64	{d16-d17}, [r2], r0
   218d4:	mov	r0, #1
   218d8:	ldr	lr, [r2, #8]
   218dc:	bic	r0, r0, lr, lsr r1
   218e0:	eor	r0, lr, r0, lsl r1
   218e4:	mov	r1, ip
   218e8:	str	r0, [r2, #8]
   218ec:	mov	r0, #0
   218f0:	mvn	r2, #0
   218f4:	bl	214f0 <__assert_fail@plt+0xf1b8>
   218f8:	mov	sp, fp
   218fc:	pop	{fp, pc}
   21900:	push	{fp, lr}
   21904:	mov	fp, sp
   21908:	sub	sp, sp, #48	; 0x30
   2190c:	movw	r2, #39112	; 0x98c8
   21910:	mov	r3, #32
   21914:	mov	r1, r0
   21918:	movt	r2, #3
   2191c:	add	r0, r2, #16
   21920:	vld1.64	{d16-d17}, [r2], r3
   21924:	mov	r3, sp
   21928:	vld1.64	{d18-d19}, [r0]
   2192c:	add	r0, r3, #16
   21930:	vld1.64	{d20-d21}, [r2]
   21934:	mov	r2, r3
   21938:	vst1.64	{d18-d19}, [r0]
   2193c:	add	r0, r3, #32
   21940:	vst1.64	{d20-d21}, [r0]
   21944:	mov	r0, #12
   21948:	vst1.64	{d16-d17}, [r2], r0
   2194c:	ldr	r0, [r2]
   21950:	orr	r0, r0, #67108864	; 0x4000000
   21954:	str	r0, [r2]
   21958:	mov	r0, #0
   2195c:	mvn	r2, #0
   21960:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21964:	mov	sp, fp
   21968:	pop	{fp, pc}
   2196c:	push	{fp, lr}
   21970:	mov	fp, sp
   21974:	sub	sp, sp, #48	; 0x30
   21978:	mov	ip, r1
   2197c:	mov	r1, r0
   21980:	movw	r0, #39112	; 0x98c8
   21984:	mov	r3, #32
   21988:	movt	r0, #3
   2198c:	add	r2, r0, #16
   21990:	vld1.64	{d16-d17}, [r0], r3
   21994:	mov	r3, sp
   21998:	vld1.64	{d18-d19}, [r2]
   2199c:	add	r2, r3, #16
   219a0:	vld1.64	{d20-d21}, [r0]
   219a4:	add	r0, r3, #32
   219a8:	vst1.64	{d18-d19}, [r2]
   219ac:	mov	r2, r3
   219b0:	vst1.64	{d20-d21}, [r0]
   219b4:	mov	r0, #12
   219b8:	vst1.64	{d16-d17}, [r2], r0
   219bc:	ldr	r0, [r2]
   219c0:	orr	r0, r0, #67108864	; 0x4000000
   219c4:	str	r0, [r2]
   219c8:	mov	r0, #0
   219cc:	mov	r2, ip
   219d0:	bl	214f0 <__assert_fail@plt+0xf1b8>
   219d4:	mov	sp, fp
   219d8:	pop	{fp, pc}
   219dc:	push	{r4, sl, fp, lr}
   219e0:	add	fp, sp, #8
   219e4:	sub	sp, sp, #96	; 0x60
   219e8:	mov	ip, r2
   219ec:	mov	r2, sp
   219f0:	vmov.i32	q8, #0	; 0x00000000
   219f4:	mov	r4, #28
   219f8:	cmp	r1, #10
   219fc:	mov	r3, r2
   21a00:	add	lr, r2, #16
   21a04:	vst1.64	{d16-d17}, [r3], r4
   21a08:	vst1.64	{d16-d17}, [lr]
   21a0c:	vst1.32	{d16-d17}, [r3]
   21a10:	beq	21a60 <__assert_fail@plt+0xf728>
   21a14:	vld1.64	{d16-d17}, [r2], r4
   21a18:	vld1.64	{d18-d19}, [lr]
   21a1c:	add	r3, sp, #48	; 0x30
   21a20:	add	r4, r3, #4
   21a24:	vld1.32	{d20-d21}, [r2]
   21a28:	add	r2, r3, #20
   21a2c:	vst1.32	{d16-d17}, [r4]
   21a30:	vst1.32	{d18-d19}, [r2]
   21a34:	add	r2, r3, #32
   21a38:	vst1.32	{d20-d21}, [r2]
   21a3c:	str	r1, [sp, #48]	; 0x30
   21a40:	mvn	r2, #0
   21a44:	ldr	r1, [sp, #60]	; 0x3c
   21a48:	orr	r1, r1, #67108864	; 0x4000000
   21a4c:	str	r1, [sp, #60]	; 0x3c
   21a50:	mov	r1, ip
   21a54:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21a58:	sub	sp, fp, #8
   21a5c:	pop	{r4, sl, fp, pc}
   21a60:	bl	12314 <abort@plt>
   21a64:	push	{r4, r5, fp, lr}
   21a68:	add	fp, sp, #8
   21a6c:	sub	sp, sp, #48	; 0x30
   21a70:	mov	ip, r3
   21a74:	movw	r3, #39112	; 0x98c8
   21a78:	mov	lr, #32
   21a7c:	cmp	r1, #0
   21a80:	mov	r5, sp
   21a84:	movt	r3, #3
   21a88:	cmpne	r2, #0
   21a8c:	add	r4, r3, #16
   21a90:	vld1.64	{d16-d17}, [r3], lr
   21a94:	vld1.64	{d18-d19}, [r4]
   21a98:	add	r4, r5, #16
   21a9c:	vld1.64	{d20-d21}, [r3]
   21aa0:	vst1.64	{d16-d17}, [r5], lr
   21aa4:	mov	r3, #10
   21aa8:	vst1.64	{d18-d19}, [r4]
   21aac:	vst1.64	{d20-d21}, [r5]
   21ab0:	str	r3, [sp]
   21ab4:	bne	21abc <__assert_fail@plt+0xf784>
   21ab8:	bl	12314 <abort@plt>
   21abc:	str	r2, [sp, #44]	; 0x2c
   21ac0:	str	r1, [sp, #40]	; 0x28
   21ac4:	mov	r3, sp
   21ac8:	mov	r1, ip
   21acc:	mvn	r2, #0
   21ad0:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21ad4:	sub	sp, fp, #8
   21ad8:	pop	{r4, r5, fp, pc}
   21adc:	push	{r4, r5, fp, lr}
   21ae0:	add	fp, sp, #8
   21ae4:	sub	sp, sp, #48	; 0x30
   21ae8:	mov	lr, r3
   21aec:	movw	r3, #39112	; 0x98c8
   21af0:	mov	ip, #32
   21af4:	cmp	r1, #0
   21af8:	mov	r5, sp
   21afc:	movt	r3, #3
   21b00:	cmpne	r2, #0
   21b04:	add	r4, r3, #16
   21b08:	vld1.64	{d16-d17}, [r3], ip
   21b0c:	vld1.64	{d18-d19}, [r4]
   21b10:	add	r4, r5, #16
   21b14:	vld1.64	{d20-d21}, [r3]
   21b18:	vst1.64	{d16-d17}, [r5], ip
   21b1c:	mov	r3, #10
   21b20:	vst1.64	{d18-d19}, [r4]
   21b24:	vst1.64	{d20-d21}, [r5]
   21b28:	str	r3, [sp]
   21b2c:	bne	21b34 <__assert_fail@plt+0xf7fc>
   21b30:	bl	12314 <abort@plt>
   21b34:	ldr	ip, [fp, #8]
   21b38:	str	r2, [sp, #44]	; 0x2c
   21b3c:	str	r1, [sp, #40]	; 0x28
   21b40:	mov	r3, sp
   21b44:	mov	r1, lr
   21b48:	mov	r2, ip
   21b4c:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21b50:	sub	sp, fp, #8
   21b54:	pop	{r4, r5, fp, pc}
   21b58:	push	{r4, sl, fp, lr}
   21b5c:	add	fp, sp, #8
   21b60:	sub	sp, sp, #48	; 0x30
   21b64:	mov	ip, r2
   21b68:	movw	r2, #39112	; 0x98c8
   21b6c:	mov	lr, #32
   21b70:	cmp	r0, #0
   21b74:	mov	r4, sp
   21b78:	movt	r2, #3
   21b7c:	cmpne	r1, #0
   21b80:	add	r3, r2, #16
   21b84:	vld1.64	{d16-d17}, [r2], lr
   21b88:	vld1.64	{d18-d19}, [r3]
   21b8c:	add	r3, r4, #16
   21b90:	vld1.64	{d20-d21}, [r2]
   21b94:	vst1.64	{d16-d17}, [r4], lr
   21b98:	mov	r2, #10
   21b9c:	vst1.64	{d18-d19}, [r3]
   21ba0:	vst1.64	{d20-d21}, [r4]
   21ba4:	str	r2, [sp]
   21ba8:	bne	21bb0 <__assert_fail@plt+0xf878>
   21bac:	bl	12314 <abort@plt>
   21bb0:	str	r1, [sp, #44]	; 0x2c
   21bb4:	str	r0, [sp, #40]	; 0x28
   21bb8:	mov	r3, sp
   21bbc:	mov	r0, #0
   21bc0:	mov	r1, ip
   21bc4:	mvn	r2, #0
   21bc8:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21bcc:	sub	sp, fp, #8
   21bd0:	pop	{r4, sl, fp, pc}
   21bd4:	push	{r4, r5, fp, lr}
   21bd8:	add	fp, sp, #8
   21bdc:	sub	sp, sp, #48	; 0x30
   21be0:	mov	lr, r2
   21be4:	movw	r2, #39112	; 0x98c8
   21be8:	mov	ip, r3
   21bec:	mov	r3, #32
   21bf0:	cmp	r0, #0
   21bf4:	mov	r5, sp
   21bf8:	movt	r2, #3
   21bfc:	cmpne	r1, #0
   21c00:	add	r4, r2, #16
   21c04:	vld1.64	{d16-d17}, [r2], r3
   21c08:	vld1.64	{d18-d19}, [r4]
   21c0c:	add	r4, r5, #16
   21c10:	vld1.64	{d20-d21}, [r2]
   21c14:	vst1.64	{d16-d17}, [r5], r3
   21c18:	mov	r2, #10
   21c1c:	vst1.64	{d18-d19}, [r4]
   21c20:	vst1.64	{d20-d21}, [r5]
   21c24:	str	r2, [sp]
   21c28:	bne	21c30 <__assert_fail@plt+0xf8f8>
   21c2c:	bl	12314 <abort@plt>
   21c30:	str	r1, [sp, #44]	; 0x2c
   21c34:	str	r0, [sp, #40]	; 0x28
   21c38:	mov	r3, sp
   21c3c:	mov	r0, #0
   21c40:	mov	r1, lr
   21c44:	mov	r2, ip
   21c48:	bl	214f0 <__assert_fail@plt+0xf1b8>
   21c4c:	sub	sp, fp, #8
   21c50:	pop	{r4, r5, fp, pc}
   21c54:	movw	r3, #37488	; 0x9270
   21c58:	movt	r3, #3
   21c5c:	b	214f0 <__assert_fail@plt+0xf1b8>
   21c60:	movw	r3, #37488	; 0x9270
   21c64:	mov	r2, r1
   21c68:	mov	r1, r0
   21c6c:	mov	r0, #0
   21c70:	movt	r3, #3
   21c74:	b	214f0 <__assert_fail@plt+0xf1b8>
   21c78:	movw	r3, #37488	; 0x9270
   21c7c:	mvn	r2, #0
   21c80:	movt	r3, #3
   21c84:	b	214f0 <__assert_fail@plt+0xf1b8>
   21c88:	movw	r3, #37488	; 0x9270
   21c8c:	mov	r1, r0
   21c90:	mov	r0, #0
   21c94:	mvn	r2, #0
   21c98:	movt	r3, #3
   21c9c:	b	214f0 <__assert_fail@plt+0xf1b8>
   21ca0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21ca4:	add	fp, sp, #24
   21ca8:	cmp	r1, #0
   21cac:	beq	21d1c <__assert_fail@plt+0xf9e4>
   21cb0:	mov	r5, r1
   21cb4:	mov	r6, r0
   21cb8:	cmp	r0, #0
   21cbc:	beq	21d44 <__assert_fail@plt+0xfa0c>
   21cc0:	movw	r1, #33164	; 0x818c
   21cc4:	mov	r0, r6
   21cc8:	movt	r1, #2
   21ccc:	bl	25228 <__assert_fail@plt+0x12ef0>
   21cd0:	cmp	r0, #0
   21cd4:	beq	21e08 <__assert_fail@plt+0xfad0>
   21cd8:	mov	r7, r0
   21cdc:	movw	r0, #2076	; 0x81c
   21ce0:	bl	234d0 <__assert_fail@plt+0x11198>
   21ce4:	mov	r9, r0
   21ce8:	movw	r0, #8128	; 0x1fc0
   21cec:	cmp	r5, #2048	; 0x800
   21cf0:	mov	r2, #0
   21cf4:	movcs	r5, #2048	; 0x800
   21cf8:	movt	r0, #2
   21cfc:	str	r7, [r9]
   21d00:	add	r1, r9, #12
   21d04:	stmib	r9, {r0, r6}
   21d08:	mov	r0, r7
   21d0c:	mov	r3, r5
   21d10:	bl	1217c <setvbuf@plt>
   21d14:	mov	r0, r9
   21d18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21d1c:	movw	r0, #2076	; 0x81c
   21d20:	bl	234d0 <__assert_fail@plt+0x11198>
   21d24:	movw	r1, #8128	; 0x1fc0
   21d28:	mov	r9, r0
   21d2c:	mov	r0, #0
   21d30:	movt	r1, #2
   21d34:	stm	r9, {r0, r1}
   21d38:	str	r0, [r9, #8]
   21d3c:	mov	r0, r9
   21d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21d44:	movw	r0, #2076	; 0x81c
   21d48:	bl	234d0 <__assert_fail@plt+0x11198>
   21d4c:	cmp	r5, #1024	; 0x400
   21d50:	mov	r9, r0
   21d54:	movw	r1, #8128	; 0x1fc0
   21d58:	mov	r0, #0
   21d5c:	movcs	r5, #1024	; 0x400
   21d60:	movt	r1, #2
   21d64:	add	r8, r9, #16
   21d68:	cmp	r5, #1
   21d6c:	stm	r9, {r0, r1}
   21d70:	str	r0, [r9, #8]
   21d74:	str	r0, [r9, #12]
   21d78:	blt	21dc4 <__assert_fail@plt+0xfa8c>
   21d7c:	add	r6, r8, r5
   21d80:	mov	r5, r8
   21d84:	sub	r1, r6, r5
   21d88:	mov	r0, r5
   21d8c:	mov	r2, #0
   21d90:	bl	122e4 <getrandom@plt>
   21d94:	cmp	r0, #0
   21d98:	blt	21dac <__assert_fail@plt+0xfa74>
   21d9c:	add	r5, r5, r0
   21da0:	cmp	r5, r6
   21da4:	bcc	21d84 <__assert_fail@plt+0xfa4c>
   21da8:	b	21dc4 <__assert_fail@plt+0xfa8c>
   21dac:	bl	12164 <__errno_location@plt>
   21db0:	ldr	r4, [r0]
   21db4:	cmp	r4, #4
   21db8:	bne	21dd4 <__assert_fail@plt+0xfa9c>
   21dbc:	cmp	r5, r6
   21dc0:	bcc	21d84 <__assert_fail@plt+0xfa4c>
   21dc4:	mov	r0, r8
   21dc8:	bl	22260 <__assert_fail@plt+0xff28>
   21dcc:	mov	r0, r9
   21dd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21dd4:	ldr	r5, [r9]
   21dd8:	mov	r7, r0
   21ddc:	mov	r0, r9
   21de0:	movw	r1, #2076	; 0x81c
   21de4:	movw	r2, #2076	; 0x81c
   21de8:	bl	1223c <__explicit_bzero_chk@plt>
   21dec:	mov	r0, r9
   21df0:	bl	1d88c <__assert_fail@plt+0xb554>
   21df4:	cmp	r5, #0
   21df8:	beq	21e04 <__assert_fail@plt+0xfacc>
   21dfc:	mov	r0, r5
   21e00:	bl	1d2d4 <__assert_fail@plt+0xaf9c>
   21e04:	str	r4, [r7]
   21e08:	mov	r9, #0
   21e0c:	mov	r0, r9
   21e10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21e14:	str	r1, [r0, #4]
   21e18:	bx	lr
   21e1c:	str	r1, [r0, #8]
   21e20:	bx	lr
   21e24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e28:	add	fp, sp, #28
   21e2c:	sub	sp, sp, #4
   21e30:	ldr	r3, [r0]
   21e34:	mov	r6, r2
   21e38:	mov	r5, r1
   21e3c:	mov	sl, r0
   21e40:	cmp	r3, #0
   21e44:	beq	21ec0 <__assert_fail@plt+0xfb88>
   21e48:	mov	r0, r5
   21e4c:	mov	r1, #1
   21e50:	mov	r2, r6
   21e54:	bl	122d8 <fread_unlocked@plt>
   21e58:	mov	r4, r0
   21e5c:	sub	r6, r6, r0
   21e60:	bl	12164 <__errno_location@plt>
   21e64:	cmp	r6, #0
   21e68:	beq	21eb8 <__assert_fail@plt+0xfb80>
   21e6c:	mov	r7, r0
   21e70:	ldr	r1, [sl]
   21e74:	ldr	r0, [r7]
   21e78:	ldr	r1, [r1]
   21e7c:	lsl	r1, r1, #26
   21e80:	and	r0, r0, r1, asr #31
   21e84:	str	r0, [r7]
   21e88:	ldr	r1, [sl, #4]
   21e8c:	ldr	r0, [sl, #8]
   21e90:	blx	r1
   21e94:	ldr	r3, [sl]
   21e98:	add	r5, r5, r4
   21e9c:	mov	r1, #1
   21ea0:	mov	r2, r6
   21ea4:	mov	r0, r5
   21ea8:	bl	122d8 <fread_unlocked@plt>
   21eac:	mov	r4, r0
   21eb0:	subs	r6, r6, r0
   21eb4:	bne	21e70 <__assert_fail@plt+0xfb38>
   21eb8:	sub	sp, fp, #28
   21ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ec0:	ldr	r7, [sl, #12]
   21ec4:	movw	r0, #1052	; 0x41c
   21ec8:	add	r9, sl, r0
   21ecc:	sub	r0, r9, r7
   21ed0:	cmp	r7, r6
   21ed4:	add	r1, r0, #1024	; 0x400
   21ed8:	bcs	21f4c <__assert_fail@plt+0xfc14>
   21edc:	add	r8, sl, #16
   21ee0:	mov	r0, r5
   21ee4:	mov	r2, r7
   21ee8:	bl	11ec4 <memcpy@plt>
   21eec:	add	r5, r5, r7
   21ef0:	sub	r6, r6, r7
   21ef4:	tst	r5, #3
   21ef8:	beq	21f1c <__assert_fail@plt+0xfbe4>
   21efc:	mov	r0, r8
   21f00:	mov	r1, r9
   21f04:	bl	22030 <__assert_fail@plt+0xfcf8>
   21f08:	mov	r7, #1024	; 0x400
   21f0c:	cmp	r6, #1024	; 0x400
   21f10:	mov	r1, r9
   21f14:	bhi	21ee0 <__assert_fail@plt+0xfba8>
   21f18:	b	21f64 <__assert_fail@plt+0xfc2c>
   21f1c:	cmp	r6, #1024	; 0x400
   21f20:	bcc	21f54 <__assert_fail@plt+0xfc1c>
   21f24:	mov	r0, r8
   21f28:	mov	r1, r5
   21f2c:	bl	22030 <__assert_fail@plt+0xfcf8>
   21f30:	subs	r6, r6, #1024	; 0x400
   21f34:	add	r5, r5, #1024	; 0x400
   21f38:	bne	21f1c <__assert_fail@plt+0xfbe4>
   21f3c:	mov	r0, #0
   21f40:	str	r0, [sl, #12]
   21f44:	sub	sp, fp, #28
   21f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f4c:	mov	r9, r1
   21f50:	b	21f64 <__assert_fail@plt+0xfc2c>
   21f54:	mov	r0, r8
   21f58:	mov	r1, r9
   21f5c:	bl	22030 <__assert_fail@plt+0xfcf8>
   21f60:	mov	r7, #1024	; 0x400
   21f64:	mov	r0, r5
   21f68:	mov	r1, r9
   21f6c:	mov	r2, r6
   21f70:	bl	11ec4 <memcpy@plt>
   21f74:	sub	r0, r7, r6
   21f78:	str	r0, [sl, #12]
   21f7c:	sub	sp, fp, #28
   21f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f84:	push	{r4, r5, fp, lr}
   21f88:	add	fp, sp, #8
   21f8c:	ldr	r4, [r0]
   21f90:	movw	r1, #2076	; 0x81c
   21f94:	mvn	r2, #0
   21f98:	mov	r5, r0
   21f9c:	bl	1223c <__explicit_bzero_chk@plt>
   21fa0:	mov	r0, r5
   21fa4:	bl	1d88c <__assert_fail@plt+0xb554>
   21fa8:	cmp	r4, #0
   21fac:	moveq	r0, #0
   21fb0:	popeq	{r4, r5, fp, pc}
   21fb4:	mov	r0, r4
   21fb8:	pop	{r4, r5, fp, lr}
   21fbc:	b	1d2d4 <__assert_fail@plt+0xaf9c>
   21fc0:	push	{fp, lr}
   21fc4:	mov	fp, sp
   21fc8:	cmp	r0, #0
   21fcc:	beq	2202c <__assert_fail@plt+0xfcf4>
   21fd0:	mov	r4, r0
   21fd4:	movw	r0, #37480	; 0x9268
   21fd8:	movt	r0, #3
   21fdc:	ldr	r5, [r0]
   21fe0:	bl	12164 <__errno_location@plt>
   21fe4:	ldr	r6, [r0]
   21fe8:	movw	r0, #33167	; 0x818f
   21fec:	movw	r1, #33183	; 0x819f
   21ff0:	mov	r2, #5
   21ff4:	movt	r0, #2
   21ff8:	movt	r1, #2
   21ffc:	cmp	r6, #0
   22000:	moveq	r1, r0
   22004:	mov	r0, #0
   22008:	bl	11f54 <dcgettext@plt>
   2200c:	mov	r7, r0
   22010:	mov	r0, r4
   22014:	bl	21c88 <__assert_fail@plt+0xf950>
   22018:	mov	r3, r0
   2201c:	mov	r0, r5
   22020:	mov	r1, r6
   22024:	mov	r2, r7
   22028:	bl	12080 <error@plt>
   2202c:	bl	12314 <abort@plt>
   22030:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22034:	add	fp, sp, #24
   22038:	add	r6, r0, #1024	; 0x400
   2203c:	add	lr, r0, #512	; 0x200
   22040:	ldm	r6, {r2, r3, r6}
   22044:	add	r6, r6, #1
   22048:	add	r4, r6, r3
   2204c:	add	r3, r0, #16
   22050:	str	r6, [r0, #1032]	; 0x408
   22054:	mvn	r6, r0
   22058:	cmp	lr, r3
   2205c:	movhi	r3, lr
   22060:	add	r3, r3, r6
   22064:	lsr	ip, r3, #4
   22068:	mov	r3, #0
   2206c:	mov	r5, r0
   22070:	eor	r2, r2, r2, lsl #13
   22074:	ldr	r6, [r5, r3]!
   22078:	and	r7, r6, #1020	; 0x3fc
   2207c:	ldr	r8, [r0, r7]
   22080:	ldr	r7, [r5, #512]	; 0x200
   22084:	add	r2, r2, r7
   22088:	add	r4, r2, r4
   2208c:	add	r4, r4, r8
   22090:	eor	r8, r2, r2, lsr #6
   22094:	str	r4, [r5]
   22098:	ubfx	r4, r4, #10, #8
   2209c:	ldr	r4, [r0, r4, lsl #2]
   220a0:	add	r4, r4, r6
   220a4:	mov	r6, r1
   220a8:	str	r4, [r6, r3]!
   220ac:	add	r3, r3, #16
   220b0:	ldr	r2, [r5, #516]	; 0x204
   220b4:	ldr	r7, [r5, #4]
   220b8:	add	r2, r2, r8
   220bc:	add	r8, r2, r4
   220c0:	and	r4, r7, #1020	; 0x3fc
   220c4:	ldr	r4, [r0, r4]
   220c8:	add	r4, r8, r4
   220cc:	eor	r8, r2, r2, lsl #2
   220d0:	str	r4, [r5, #4]
   220d4:	ubfx	r4, r4, #10, #8
   220d8:	ldr	r4, [r0, r4, lsl #2]
   220dc:	add	r4, r4, r7
   220e0:	str	r4, [r6, #4]
   220e4:	ldr	r2, [r5, #520]	; 0x208
   220e8:	ldr	r7, [r5, #8]
   220ec:	add	r2, r2, r8
   220f0:	add	r8, r2, r4
   220f4:	and	r4, r7, #1020	; 0x3fc
   220f8:	ldr	r4, [r0, r4]
   220fc:	add	r4, r8, r4
   22100:	eor	r8, r2, r2, lsr #16
   22104:	str	r4, [r5, #8]
   22108:	ubfx	r4, r4, #10, #8
   2210c:	ldr	r4, [r0, r4, lsl #2]
   22110:	add	r4, r4, r7
   22114:	str	r4, [r6, #8]
   22118:	ldr	r2, [r5, #524]	; 0x20c
   2211c:	ldr	r7, [r5, #12]
   22120:	add	r2, r2, r8
   22124:	add	r8, r2, r4
   22128:	and	r4, r7, #1020	; 0x3fc
   2212c:	ldr	r4, [r0, r4]
   22130:	add	r4, r8, r4
   22134:	str	r4, [r5, #12]
   22138:	ubfx	r4, r4, #10, #8
   2213c:	add	r5, r0, r3
   22140:	ldr	r4, [r0, r4, lsl #2]
   22144:	cmp	r5, lr
   22148:	add	r4, r4, r7
   2214c:	str	r4, [r6, #12]
   22150:	bcc	2206c <__assert_fail@plt+0xfd34>
   22154:	lsl	lr, ip, #4
   22158:	add	r9, r1, #16
   2215c:	add	ip, r0, #1024	; 0x400
   22160:	mov	r3, r0
   22164:	add	r5, r3, lr
   22168:	eor	r2, r2, r2, lsl #13
   2216c:	add	r3, r3, #16
   22170:	ldr	r7, [r5, #16]
   22174:	ldr	r8, [r5, #-496]	; 0xfffffe10
   22178:	and	r6, r7, #1020	; 0x3fc
   2217c:	add	r2, r2, r8
   22180:	ldr	r6, [r0, r6]
   22184:	add	r4, r2, r4
   22188:	eor	r8, r2, r2, lsr #6
   2218c:	add	r4, r4, r6
   22190:	mov	r6, r9
   22194:	add	r9, r9, #16
   22198:	str	r4, [r5, #16]
   2219c:	ubfx	r4, r4, #10, #8
   221a0:	ldr	r4, [r0, r4, lsl #2]
   221a4:	add	r4, r4, r7
   221a8:	str	r4, [r6, lr]!
   221ac:	ldr	r2, [r5, #20]
   221b0:	ldr	r7, [r5, #-492]	; 0xfffffe14
   221b4:	and	r1, r2, #1020	; 0x3fc
   221b8:	add	r7, r7, r8
   221bc:	ldr	r1, [r0, r1]
   221c0:	add	r4, r7, r4
   221c4:	add	r1, r4, r1
   221c8:	str	r1, [r5, #20]
   221cc:	ubfx	r1, r1, #10, #8
   221d0:	ldr	r1, [r0, r1, lsl #2]
   221d4:	add	r1, r1, r2
   221d8:	eor	r2, r7, r7, lsl #2
   221dc:	str	r1, [r6, #4]
   221e0:	ldr	r4, [r5, #-488]	; 0xfffffe18
   221e4:	ldr	r7, [r5, #24]
   221e8:	add	r2, r4, r2
   221ec:	and	r4, r7, #1020	; 0x3fc
   221f0:	ldr	r4, [r0, r4]
   221f4:	add	r1, r2, r1
   221f8:	eor	r2, r2, r2, lsr #16
   221fc:	add	r1, r1, r4
   22200:	str	r1, [r5, #24]
   22204:	ubfx	r1, r1, #10, #8
   22208:	ldr	r1, [r0, r1, lsl #2]
   2220c:	add	r1, r1, r7
   22210:	str	r1, [r6, #8]
   22214:	ldr	r4, [r5, #-484]	; 0xfffffe1c
   22218:	ldr	r7, [r5, #28]
   2221c:	add	r2, r4, r2
   22220:	and	r4, r7, #1020	; 0x3fc
   22224:	ldr	r4, [r0, r4]
   22228:	add	r1, r2, r1
   2222c:	add	r1, r1, r4
   22230:	str	r1, [r5, #28]
   22234:	ubfx	r1, r1, #10, #8
   22238:	ldr	r1, [r0, r1, lsl #2]
   2223c:	add	r4, r1, r7
   22240:	add	r1, r3, lr
   22244:	add	r1, r1, #16
   22248:	str	r4, [r6, #12]
   2224c:	cmp	r1, ip
   22250:	bcc	22164 <__assert_fail@plt+0xfe2c>
   22254:	str	r2, [r0, #1024]	; 0x400
   22258:	str	r4, [r0, #1028]	; 0x404
   2225c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22264:	add	fp, sp, #28
   22268:	sub	sp, sp, #28
   2226c:	str	r0, [sp, #20]
   22270:	add	r7, r0, #28
   22274:	movw	r0, #19064	; 0x4a78
   22278:	movw	r6, #57178	; 0xdf5a
   2227c:	movw	r5, #89	; 0x59
   22280:	movw	r1, #15947	; 0x3e4b
   22284:	movw	sl, #6872	; 0x1ad8
   22288:	movw	r8, #15433	; 0x3c49
   2228c:	movw	lr, #37145	; 0x9119
   22290:	mov	r9, #0
   22294:	movt	r0, #55594	; 0xd92a
   22298:	movt	r6, #4967	; 0x1367
   2229c:	movt	r5, #38361	; 0x95d9
   222a0:	movt	r1, #49942	; 0xc316
   222a4:	movt	sl, #3906	; 0xf42
   222a8:	movt	r8, #42266	; 0xa51a
   222ac:	movt	lr, #12384	; 0x3060
   222b0:	str	r0, [sp, #16]
   222b4:	movw	r0, #59931	; 0xea1b
   222b8:	movt	r0, #50415	; 0xc4ef
   222bc:	ldr	r3, [r7, #-28]	; 0xffffffe4
   222c0:	str	r0, [sp, #24]
   222c4:	ldr	r0, [r7]
   222c8:	str	lr, [sp, #4]
   222cc:	add	r6, r3, r6
   222d0:	ldr	r3, [sp, #20]
   222d4:	str	r0, [sp, #12]
   222d8:	add	r3, r3, r9, lsl #2
   222dc:	add	r9, r9, #8
   222e0:	ldmib	r3, {r2, lr}
   222e4:	ldr	r0, [r3, #12]
   222e8:	ldr	ip, [r3, #16]
   222ec:	cmp	r9, #256	; 0x100
   222f0:	add	r5, r2, r5
   222f4:	add	r2, r0, sl
   222f8:	add	r4, lr, r1
   222fc:	eor	r6, r6, r5, lsl #11
   22300:	add	r5, r4, r5
   22304:	add	r2, r2, r6
   22308:	str	r6, [sp, #8]
   2230c:	add	r6, r2, r4
   22310:	eor	r4, r5, r4, lsr #2
   22314:	eor	r0, r6, r2, lsl #8
   22318:	ldr	r6, [r3, #20]
   2231c:	str	r4, [sp]
   22320:	add	r1, r6, r8
   22324:	ldr	r6, [sp, #16]
   22328:	add	r1, r1, r0
   2232c:	add	r5, ip, r6
   22330:	add	r5, r5, r4
   22334:	ldr	r4, [sp, #4]
   22338:	add	r2, r5, r2
   2233c:	add	r6, r1, r5
   22340:	eor	sl, r2, r5, lsr #16
   22344:	ldr	r5, [r3, #24]
   22348:	ldr	r2, [sp, #24]
   2234c:	eor	ip, r6, r1, lsl #10
   22350:	ldr	r6, [sp, #12]
   22354:	str	ip, [sp, #16]
   22358:	add	r5, r5, r2
   2235c:	add	r6, r6, r4
   22360:	ldr	r2, [sp]
   22364:	add	r5, r5, sl
   22368:	add	r6, r6, ip
   2236c:	add	r1, r5, r1
   22370:	eor	r8, r1, r5, lsr #4
   22374:	ldr	r1, [sp, #8]
   22378:	add	r5, r6, r5
   2237c:	add	r4, r8, r1
   22380:	add	r1, r4, r6
   22384:	eor	lr, r1, r4, lsr #9
   22388:	add	r1, lr, r0
   2238c:	eor	r0, r5, r6, lsl #8
   22390:	add	r5, r0, r2
   22394:	add	r6, r5, r4
   22398:	str	r6, [r7, #-28]	; 0xffffffe4
   2239c:	str	r5, [r3, #4]
   223a0:	str	r1, [r3, #8]
   223a4:	str	sl, [r3, #12]
   223a8:	str	ip, [r3, #16]
   223ac:	str	r8, [r3, #20]
   223b0:	str	r0, [r3, #24]
   223b4:	str	lr, [r7]
   223b8:	add	r7, r7, #32
   223bc:	bcc	222bc <__assert_fail@plt+0xff84>
   223c0:	ldr	r3, [sp, #20]
   223c4:	ldr	r9, [sp, #16]
   223c8:	mov	r4, #0
   223cc:	add	r7, r3, #28
   223d0:	str	r0, [sp, #24]
   223d4:	ldr	r0, [r7]
   223d8:	ldr	r3, [r7, #-28]	; 0xffffffe4
   223dc:	str	r0, [sp, #16]
   223e0:	add	r0, r3, r6
   223e4:	str	r0, [sp, #12]
   223e8:	ldr	r0, [sp, #20]
   223ec:	add	r3, r0, r4, lsl #2
   223f0:	add	r4, r4, #8
   223f4:	ldmib	r3, {r6, ip}
   223f8:	ldr	r2, [r3, #16]
   223fc:	ldr	r0, [r3, #12]
   22400:	cmp	r4, #256	; 0x100
   22404:	str	r2, [sp, #8]
   22408:	ldr	r2, [sp, #12]
   2240c:	add	r5, r6, r5
   22410:	add	r0, r0, sl
   22414:	add	r1, ip, r1
   22418:	eor	r2, r2, r5, lsl #11
   2241c:	add	r0, r0, r2
   22420:	str	r2, [sp, #12]
   22424:	add	r2, r0, r1
   22428:	eor	ip, r2, r0, lsl #8
   2242c:	ldr	r2, [r3, #20]
   22430:	add	r2, r2, r8
   22434:	add	r6, r2, ip
   22438:	add	r2, r1, r5
   2243c:	eor	r5, r2, r1, lsr #2
   22440:	ldr	r1, [sp, #8]
   22444:	add	r1, r1, r9
   22448:	add	r1, r1, r5
   2244c:	add	r0, r1, r0
   22450:	add	r2, r6, r1
   22454:	eor	sl, r0, r1, lsr #16
   22458:	ldr	r0, [r3, #24]
   2245c:	ldr	r1, [sp, #24]
   22460:	eor	r9, r2, r6, lsl #10
   22464:	ldr	r2, [sp, #16]
   22468:	add	r0, r0, r1
   2246c:	add	r2, r2, lr
   22470:	add	r0, r0, sl
   22474:	add	lr, r2, r9
   22478:	add	r1, r0, r6
   2247c:	eor	r8, r1, r0, lsr #4
   22480:	ldr	r1, [sp, #12]
   22484:	add	r0, lr, r0
   22488:	eor	r0, r0, lr, lsl #8
   2248c:	add	r5, r0, r5
   22490:	add	r6, r8, r1
   22494:	add	r1, r6, lr
   22498:	eor	r1, r1, r6, lsr #9
   2249c:	add	r6, r5, r6
   224a0:	add	r2, r1, ip
   224a4:	mov	lr, r1
   224a8:	str	r6, [r7, #-28]	; 0xffffffe4
   224ac:	str	r5, [r3, #4]
   224b0:	str	r2, [r3, #8]
   224b4:	str	sl, [r3, #12]
   224b8:	str	r9, [r3, #16]
   224bc:	str	r8, [r3, #20]
   224c0:	str	r0, [r3, #24]
   224c4:	str	lr, [r7]
   224c8:	mov	r1, r2
   224cc:	add	r7, r7, #32
   224d0:	bcc	223d0 <__assert_fail@plt+0x10098>
   224d4:	ldr	r0, [sp, #20]
   224d8:	mov	r1, #0
   224dc:	str	r1, [r0, #1024]	; 0x400
   224e0:	str	r1, [r0, #1028]	; 0x404
   224e4:	str	r1, [r0, #1032]	; 0x408
   224e8:	sub	sp, fp, #28
   224ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224f0:	push	{r4, r5, r6, sl, fp, lr}
   224f4:	add	fp, sp, #16
   224f8:	sub	sp, sp, #8
   224fc:	movw	r5, #19180	; 0x4aec
   22500:	movw	r6, #55436	; 0xd88c
   22504:	mov	r4, r0
   22508:	mov	r0, #0
   2250c:	mov	r1, #0
   22510:	mov	r2, #0
   22514:	movt	r5, #2
   22518:	str	r0, [r4]
   2251c:	str	r0, [r4, #4]
   22520:	str	r0, [r4, #8]
   22524:	movt	r6, #1
   22528:	add	r0, r4, #12
   2252c:	mov	r3, r5
   22530:	str	r6, [sp]
   22534:	bl	25560 <_obstack_begin@@Base>
   22538:	add	r0, r4, #56	; 0x38
   2253c:	mov	r1, #0
   22540:	mov	r2, #0
   22544:	mov	r3, r5
   22548:	str	r6, [sp]
   2254c:	bl	25560 <_obstack_begin@@Base>
   22550:	add	r0, r4, #100	; 0x64
   22554:	mov	r1, #0
   22558:	mov	r2, #0
   2255c:	mov	r3, r5
   22560:	str	r6, [sp]
   22564:	bl	25560 <_obstack_begin@@Base>
   22568:	sub	sp, fp, #16
   2256c:	pop	{r4, r5, r6, sl, fp, pc}
   22570:	push	{r4, sl, fp, lr}
   22574:	add	fp, sp, #8
   22578:	mov	r4, r0
   2257c:	add	r0, r0, #12
   22580:	mov	r1, #0
   22584:	bl	25858 <_obstack_free@@Base>
   22588:	add	r0, r4, #56	; 0x38
   2258c:	mov	r1, #0
   22590:	bl	25858 <_obstack_free@@Base>
   22594:	add	r0, r4, #100	; 0x64
   22598:	mov	r1, #0
   2259c:	pop	{r4, sl, fp, lr}
   225a0:	b	25858 <_obstack_free@@Base>
   225a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   225a8:	add	fp, sp, #24
   225ac:	mov	r5, r1
   225b0:	mov	r8, r0
   225b4:	bl	12194 <fgetc@plt>
   225b8:	cmn	r0, #1
   225bc:	beq	22664 <__assert_fail@plt+0x1032c>
   225c0:	mov	r7, r0
   225c4:	add	r6, r5, #12
   225c8:	add	r4, r5, #24
   225cc:	ldr	r0, [r5, #24]
   225d0:	ldr	r1, [r5, #28]
   225d4:	cmp	r1, r0
   225d8:	bne	225ec <__assert_fail@plt+0x102b4>
   225dc:	mov	r0, r6
   225e0:	mov	r1, #1
   225e4:	bl	256b4 <_obstack_newchunk@@Base>
   225e8:	ldr	r0, [r4]
   225ec:	add	r1, r0, #1
   225f0:	cmp	r7, #0
   225f4:	str	r1, [r4]
   225f8:	strb	r7, [r0]
   225fc:	bne	22608 <__assert_fail@plt+0x102d0>
   22600:	mov	r0, r5
   22604:	bl	2275c <__assert_fail@plt+0x10424>
   22608:	mov	r0, r8
   2260c:	bl	12194 <fgetc@plt>
   22610:	mov	r7, r0
   22614:	cmn	r0, #1
   22618:	bne	225cc <__assert_fail@plt+0x10294>
   2261c:	ldr	r1, [r5, #20]
   22620:	ldr	r0, [r5, #24]
   22624:	cmp	r0, r1
   22628:	beq	2267c <__assert_fail@plt+0x10344>
   2262c:	ldr	r1, [r5, #28]
   22630:	cmp	r1, r0
   22634:	bne	22648 <__assert_fail@plt+0x10310>
   22638:	mov	r0, r6
   2263c:	mov	r1, #1
   22640:	bl	256b4 <_obstack_newchunk@@Base>
   22644:	ldr	r0, [r4]
   22648:	add	r1, r0, #1
   2264c:	str	r1, [r5, #24]
   22650:	mov	r1, #0
   22654:	strb	r1, [r0]
   22658:	mov	r0, r5
   2265c:	bl	2275c <__assert_fail@plt+0x10424>
   22660:	b	2267c <__assert_fail@plt+0x10344>
   22664:	add	r4, r5, #24
   22668:	add	r6, r5, #12
   2266c:	ldr	r1, [r5, #20]
   22670:	ldr	r0, [r5, #24]
   22674:	cmp	r0, r1
   22678:	bne	2262c <__assert_fail@plt+0x102f4>
   2267c:	ldr	r0, [r5, #68]	; 0x44
   22680:	ldr	r1, [r5, #72]	; 0x48
   22684:	sub	r1, r1, r0
   22688:	cmp	r1, #4
   2268c:	bcs	226a0 <__assert_fail@plt+0x10368>
   22690:	add	r0, r5, #56	; 0x38
   22694:	mov	r1, #4
   22698:	bl	256b4 <_obstack_newchunk@@Base>
   2269c:	ldr	r0, [r5, #68]	; 0x44
   226a0:	mov	r1, #0
   226a4:	str	r1, [r0]
   226a8:	ldr	r1, [r5, #68]	; 0x44
   226ac:	ldr	r0, [r5, #64]	; 0x40
   226b0:	add	r2, r1, #4
   226b4:	str	r2, [r5, #68]	; 0x44
   226b8:	cmp	r2, r0
   226bc:	ldrbeq	r1, [r5, #96]	; 0x60
   226c0:	orreq	r1, r1, #2
   226c4:	strbeq	r1, [r5, #96]	; 0x60
   226c8:	ldr	r7, [r5, #80]	; 0x50
   226cc:	ldr	r3, [r5, #60]	; 0x3c
   226d0:	ldr	r1, [r5, #72]	; 0x48
   226d4:	add	r2, r7, r2
   226d8:	bic	r2, r2, r7
   226dc:	sub	r7, r2, r3
   226e0:	sub	r3, r1, r3
   226e4:	str	r2, [r5, #68]	; 0x44
   226e8:	cmp	r7, r3
   226ec:	movhi	r2, r1
   226f0:	strhi	r1, [r5, #68]	; 0x44
   226f4:	str	r0, [r5, #4]
   226f8:	str	r2, [r5, #64]	; 0x40
   226fc:	ldr	r0, [r5, #108]	; 0x6c
   22700:	ldr	r2, [r5, #112]	; 0x70
   22704:	cmp	r2, r0
   22708:	ldrbeq	r1, [r5, #140]	; 0x8c
   2270c:	orreq	r1, r1, #2
   22710:	strbeq	r1, [r5, #140]	; 0x8c
   22714:	ldr	r7, [r5, #124]	; 0x7c
   22718:	ldr	r3, [r5, #104]	; 0x68
   2271c:	ldr	r1, [r5, #116]	; 0x74
   22720:	add	r2, r7, r2
   22724:	bic	r2, r2, r7
   22728:	sub	r7, r2, r3
   2272c:	sub	r3, r1, r3
   22730:	str	r2, [r5, #112]	; 0x70
   22734:	cmp	r7, r3
   22738:	strhi	r1, [r5, #112]	; 0x70
   2273c:	str	r0, [r5, #8]
   22740:	movhi	r2, r1
   22744:	mov	r0, r8
   22748:	str	r2, [r5, #108]	; 0x6c
   2274c:	bl	11eac <ferror@plt>
   22750:	clz	r0, r0
   22754:	lsr	r0, r0, #5
   22758:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2275c:	push	{r4, r5, r6, r7, fp, lr}
   22760:	add	fp, sp, #16
   22764:	ldr	r5, [r0, #20]
   22768:	ldr	r6, [r0, #24]
   2276c:	mov	r4, r0
   22770:	cmp	r6, r5
   22774:	mvn	r7, r5
   22778:	ldrbeq	r0, [r4, #52]	; 0x34
   2277c:	orreq	r0, r0, #2
   22780:	strbeq	r0, [r4, #52]	; 0x34
   22784:	ldr	r1, [r4, #36]	; 0x24
   22788:	ldr	r2, [r4, #16]
   2278c:	ldr	r0, [r4, #28]
   22790:	add	r3, r1, r6
   22794:	bic	r1, r3, r1
   22798:	sub	r3, r1, r2
   2279c:	sub	r2, r0, r2
   227a0:	str	r1, [r4, #24]
   227a4:	cmp	r3, r2
   227a8:	movhi	r1, r0
   227ac:	strhi	r0, [r4, #24]
   227b0:	str	r1, [r4, #20]
   227b4:	ldr	r0, [r4, #68]	; 0x44
   227b8:	ldr	r1, [r4, #72]	; 0x48
   227bc:	sub	r1, r1, r0
   227c0:	cmp	r1, #4
   227c4:	bcs	227d8 <__assert_fail@plt+0x104a0>
   227c8:	add	r0, r4, #56	; 0x38
   227cc:	mov	r1, #4
   227d0:	bl	256b4 <_obstack_newchunk@@Base>
   227d4:	ldr	r0, [r4, #68]	; 0x44
   227d8:	str	r5, [r0]
   227dc:	add	r6, r6, r7
   227e0:	ldr	r1, [r4, #68]	; 0x44
   227e4:	ldr	r0, [r4, #112]	; 0x70
   227e8:	ldr	r2, [r4, #116]	; 0x74
   227ec:	add	r1, r1, #4
   227f0:	str	r1, [r4, #68]	; 0x44
   227f4:	sub	r1, r2, r0
   227f8:	cmp	r1, #4
   227fc:	bcs	22810 <__assert_fail@plt+0x104d8>
   22800:	add	r0, r4, #100	; 0x64
   22804:	mov	r1, #4
   22808:	bl	256b4 <_obstack_newchunk@@Base>
   2280c:	ldr	r0, [r4, #112]	; 0x70
   22810:	str	r6, [r0]
   22814:	ldr	r0, [r4]
   22818:	ldr	r1, [r4, #112]	; 0x70
   2281c:	add	r1, r1, #4
   22820:	add	r0, r0, #1
   22824:	str	r1, [r4, #112]	; 0x70
   22828:	str	r0, [r4]
   2282c:	pop	{r4, r5, r6, r7, fp, pc}
   22830:	push	{r4, r5, r6, r7, fp, lr}
   22834:	add	fp, sp, #16
   22838:	mov	r4, r1
   2283c:	mov	r1, #0
   22840:	mov	r6, r2
   22844:	bl	12218 <setlocale@plt>
   22848:	cmp	r0, #0
   2284c:	beq	2287c <__assert_fail@plt+0x10544>
   22850:	mov	r7, r0
   22854:	bl	12140 <strlen@plt>
   22858:	cmp	r0, r6
   2285c:	bcs	2289c <__assert_fail@plt+0x10564>
   22860:	add	r2, r0, #1
   22864:	mov	r0, r4
   22868:	mov	r1, r7
   2286c:	bl	11ec4 <memcpy@plt>
   22870:	mov	r5, #0
   22874:	mov	r0, r5
   22878:	pop	{r4, r5, r6, r7, fp, pc}
   2287c:	cmp	r6, #0
   22880:	mov	r5, #22
   22884:	movne	r0, #0
   22888:	strbne	r0, [r4]
   2288c:	movne	r0, r5
   22890:	popne	{r4, r5, r6, r7, fp, pc}
   22894:	mov	r0, r5
   22898:	pop	{r4, r5, r6, r7, fp, pc}
   2289c:	mov	r5, #34	; 0x22
   228a0:	cmp	r6, #0
   228a4:	beq	228c4 <__assert_fail@plt+0x1058c>
   228a8:	sub	r6, r6, #1
   228ac:	mov	r0, r4
   228b0:	mov	r1, r7
   228b4:	mov	r2, r6
   228b8:	bl	11ec4 <memcpy@plt>
   228bc:	mov	r0, #0
   228c0:	strb	r0, [r4, r6]
   228c4:	mov	r0, r5
   228c8:	pop	{r4, r5, r6, r7, fp, pc}
   228cc:	mov	r1, #0
   228d0:	b	12218 <setlocale@plt>
   228d4:	push	{fp, lr}
   228d8:	mov	fp, sp
   228dc:	bl	120b0 <mkstemp64@plt>
   228e0:	pop	{fp, lr}
   228e4:	b	22dcc <__assert_fail@plt+0x10a94>
   228e8:	push	{r4, sl, fp, lr}
   228ec:	add	fp, sp, #8
   228f0:	mov	r4, r1
   228f4:	bl	12008 <mkostemp64@plt>
   228f8:	mov	r1, r4
   228fc:	pop	{r4, sl, fp, lr}
   22900:	b	251d0 <__assert_fail@plt+0x12e98>
   22904:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22908:	add	fp, sp, #24
   2290c:	ldrb	lr, [r0]
   22910:	ldrb	r5, [r1]
   22914:	cmp	lr, #45	; 0x2d
   22918:	bne	22994 <__assert_fail@plt+0x1065c>
   2291c:	ldrb	r4, [r0, #1]!
   22920:	cmp	r4, #48	; 0x30
   22924:	beq	2291c <__assert_fail@plt+0x105e4>
   22928:	cmp	r4, r3
   2292c:	beq	2291c <__assert_fail@plt+0x105e4>
   22930:	cmp	r5, #45	; 0x2d
   22934:	bne	22a7c <__assert_fail@plt+0x10744>
   22938:	ldrb	r5, [r1, #1]!
   2293c:	cmp	r5, #48	; 0x30
   22940:	beq	22938 <__assert_fail@plt+0x10600>
   22944:	cmp	r5, r3
   22948:	beq	22938 <__assert_fail@plt+0x10600>
   2294c:	sub	r6, r4, #48	; 0x30
   22950:	mov	ip, #0
   22954:	b	2295c <__assert_fail@plt+0x10624>
   22958:	sub	r6, r4, #48	; 0x30
   2295c:	cmp	r6, #10
   22960:	mov	lr, #0
   22964:	movwcc	lr, #1
   22968:	cmp	r6, #9
   2296c:	bhi	22adc <__assert_fail@plt+0x107a4>
   22970:	cmp	r5, r4
   22974:	bne	22adc <__assert_fail@plt+0x107a4>
   22978:	ldrb	r4, [r0, #1]!
   2297c:	cmp	r4, r3
   22980:	beq	22978 <__assert_fail@plt+0x10640>
   22984:	ldrb	r5, [r1, #1]!
   22988:	cmp	r5, r3
   2298c:	beq	22984 <__assert_fail@plt+0x1064c>
   22990:	b	22958 <__assert_fail@plt+0x10620>
   22994:	cmp	r5, #45	; 0x2d
   22998:	bne	229e4 <__assert_fail@plt+0x106ac>
   2299c:	ldrb	r6, [r1, #1]!
   229a0:	cmp	r6, #48	; 0x30
   229a4:	beq	2299c <__assert_fail@plt+0x10664>
   229a8:	cmp	r6, r3
   229ac:	beq	2299c <__assert_fail@plt+0x10664>
   229b0:	cmp	r6, r2
   229b4:	bne	229cc <__assert_fail@plt+0x10694>
   229b8:	mov	r7, #1
   229bc:	ldrb	r6, [r1, r7]
   229c0:	add	r7, r7, #1
   229c4:	cmp	r6, #48	; 0x30
   229c8:	beq	229bc <__assert_fail@plt+0x10684>
   229cc:	sub	r1, r6, #48	; 0x30
   229d0:	mov	ip, #1
   229d4:	cmp	r1, #10
   229d8:	bcs	22a50 <__assert_fail@plt+0x10718>
   229dc:	b	22db8 <__assert_fail@plt+0x10a80>
   229e0:	ldrb	lr, [r0, #1]!
   229e4:	cmp	lr, #48	; 0x30
   229e8:	cmpne	lr, r3
   229ec:	beq	229e0 <__assert_fail@plt+0x106a8>
   229f0:	b	229f8 <__assert_fail@plt+0x106c0>
   229f4:	ldrb	r5, [r1, #1]!
   229f8:	cmp	r5, #48	; 0x30
   229fc:	cmpne	r5, r3
   22a00:	beq	229f4 <__assert_fail@plt+0x106bc>
   22a04:	sub	r6, lr, #48	; 0x30
   22a08:	mov	ip, #0
   22a0c:	b	22a14 <__assert_fail@plt+0x106dc>
   22a10:	sub	r6, lr, #48	; 0x30
   22a14:	cmp	r6, #10
   22a18:	mov	r4, #0
   22a1c:	movwcc	r4, #1
   22a20:	cmp	r6, #9
   22a24:	bhi	22b80 <__assert_fail@plt+0x10848>
   22a28:	cmp	lr, r5
   22a2c:	bne	22b80 <__assert_fail@plt+0x10848>
   22a30:	ldrb	lr, [r0, #1]!
   22a34:	cmp	lr, r3
   22a38:	beq	22a30 <__assert_fail@plt+0x106f8>
   22a3c:	ldrb	r5, [r1, #1]!
   22a40:	cmp	r5, r3
   22a44:	beq	22a3c <__assert_fail@plt+0x10704>
   22a48:	b	22a10 <__assert_fail@plt+0x106d8>
   22a4c:	ldrb	lr, [r0, #1]!
   22a50:	cmp	lr, #48	; 0x30
   22a54:	cmpne	lr, r3
   22a58:	beq	22a4c <__assert_fail@plt+0x10714>
   22a5c:	cmp	lr, r2
   22a60:	bne	22a74 <__assert_fail@plt+0x1073c>
   22a64:	add	r0, r0, #1
   22a68:	ldrb	lr, [r0], #1
   22a6c:	cmp	lr, #48	; 0x30
   22a70:	beq	22a68 <__assert_fail@plt+0x10730>
   22a74:	sub	r0, lr, #48	; 0x30
   22a78:	b	22d58 <__assert_fail@plt+0x10a20>
   22a7c:	cmp	r4, r2
   22a80:	bne	22a98 <__assert_fail@plt+0x10760>
   22a84:	mov	r7, #1
   22a88:	ldrb	r4, [r0, r7]
   22a8c:	add	r7, r7, #1
   22a90:	cmp	r4, #48	; 0x30
   22a94:	beq	22a88 <__assert_fail@plt+0x10750>
   22a98:	sub	r0, r4, #48	; 0x30
   22a9c:	mvn	ip, #0
   22aa0:	cmp	r0, #10
   22aa4:	bcs	22ab0 <__assert_fail@plt+0x10778>
   22aa8:	b	22db8 <__assert_fail@plt+0x10a80>
   22aac:	ldrb	r5, [r1, #1]!
   22ab0:	cmp	r5, #48	; 0x30
   22ab4:	cmpne	r5, r3
   22ab8:	beq	22aac <__assert_fail@plt+0x10774>
   22abc:	cmp	r5, r2
   22ac0:	bne	22ad4 <__assert_fail@plt+0x1079c>
   22ac4:	add	r0, r1, #1
   22ac8:	ldrb	r5, [r0], #1
   22acc:	cmp	r5, #48	; 0x30
   22ad0:	beq	22ac8 <__assert_fail@plt+0x10790>
   22ad4:	sub	r0, r5, #48	; 0x30
   22ad8:	b	22cf8 <__assert_fail@plt+0x109c0>
   22adc:	subs	r7, r4, r2
   22ae0:	sub	r8, r5, #48	; 0x30
   22ae4:	movwne	r7, #1
   22ae8:	cmp	r8, #10
   22aec:	movwcc	ip, #1
   22af0:	subs	r6, r5, r2
   22af4:	movwne	r6, #1
   22af8:	orr	r6, r6, lr
   22afc:	cmp	r6, #1
   22b00:	bne	22c24 <__assert_fail@plt+0x108ec>
   22b04:	orrs	r7, ip, r7
   22b08:	beq	22c24 <__assert_fail@plt+0x108ec>
   22b0c:	sub	r7, r4, #48	; 0x30
   22b10:	mov	r2, #0
   22b14:	mov	ip, #0
   22b18:	cmp	r7, #9
   22b1c:	bhi	22b40 <__assert_fail@plt+0x10808>
   22b20:	mov	ip, #0
   22b24:	ldrb	r7, [r0, #1]!
   22b28:	cmp	r7, r3
   22b2c:	beq	22b24 <__assert_fail@plt+0x107ec>
   22b30:	sub	r7, r7, #48	; 0x30
   22b34:	add	ip, ip, #1
   22b38:	cmp	r7, #10
   22b3c:	bcc	22b24 <__assert_fail@plt+0x107ec>
   22b40:	cmp	r8, #9
   22b44:	bhi	22b68 <__assert_fail@plt+0x10830>
   22b48:	mov	r2, #0
   22b4c:	ldrb	r0, [r1, #1]!
   22b50:	cmp	r0, r3
   22b54:	beq	22b4c <__assert_fail@plt+0x10814>
   22b58:	sub	r0, r0, #48	; 0x30
   22b5c:	add	r2, r2, #1
   22b60:	cmp	r0, #10
   22b64:	bcc	22b4c <__assert_fail@plt+0x10814>
   22b68:	cmp	ip, r2
   22b6c:	bne	22d0c <__assert_fail@plt+0x109d4>
   22b70:	cmp	ip, #0
   22b74:	subne	ip, r5, r4
   22b78:	mov	r0, ip
   22b7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22b80:	subs	r7, lr, r2
   22b84:	sub	r8, r5, #48	; 0x30
   22b88:	movwne	r7, #1
   22b8c:	cmp	r8, #10
   22b90:	movwcc	ip, #1
   22b94:	subs	r6, r5, r2
   22b98:	movwne	r6, #1
   22b9c:	orr	r4, r6, r4
   22ba0:	cmp	r4, #1
   22ba4:	bne	22c6c <__assert_fail@plt+0x10934>
   22ba8:	orrs	r7, ip, r7
   22bac:	beq	22c6c <__assert_fail@plt+0x10934>
   22bb0:	sub	r7, lr, #48	; 0x30
   22bb4:	mov	r2, #0
   22bb8:	mov	ip, #0
   22bbc:	cmp	r7, #9
   22bc0:	bhi	22be4 <__assert_fail@plt+0x108ac>
   22bc4:	mov	ip, #0
   22bc8:	ldrb	r4, [r0, #1]!
   22bcc:	cmp	r4, r3
   22bd0:	beq	22bc8 <__assert_fail@plt+0x10890>
   22bd4:	sub	r4, r4, #48	; 0x30
   22bd8:	add	ip, ip, #1
   22bdc:	cmp	r4, #10
   22be0:	bcc	22bc8 <__assert_fail@plt+0x10890>
   22be4:	cmp	r8, #9
   22be8:	bhi	22c0c <__assert_fail@plt+0x108d4>
   22bec:	mov	r2, #0
   22bf0:	ldrb	r0, [r1, #1]!
   22bf4:	cmp	r0, r3
   22bf8:	beq	22bf0 <__assert_fail@plt+0x108b8>
   22bfc:	sub	r0, r0, #48	; 0x30
   22c00:	add	r2, r2, #1
   22c04:	cmp	r0, #10
   22c08:	bcc	22bf0 <__assert_fail@plt+0x108b8>
   22c0c:	cmp	ip, r2
   22c10:	bne	22d1c <__assert_fail@plt+0x109e4>
   22c14:	cmp	ip, #0
   22c18:	subne	ip, lr, r5
   22c1c:	mov	r0, ip
   22c20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22c24:	uxtb	r2, r2
   22c28:	cmp	r5, r2
   22c2c:	bne	22cb4 <__assert_fail@plt+0x1097c>
   22c30:	cmp	r4, r2
   22c34:	bne	22d2c <__assert_fail@plt+0x109f4>
   22c38:	add	r0, r0, #1
   22c3c:	add	r1, r1, #1
   22c40:	mov	ip, #0
   22c44:	ldrb	r7, [r1]
   22c48:	ldrb	r3, [r0]
   22c4c:	sub	r2, r7, #48	; 0x30
   22c50:	cmp	r7, r3
   22c54:	bne	22d6c <__assert_fail@plt+0x10a34>
   22c58:	add	r0, r0, #1
   22c5c:	add	r1, r1, #1
   22c60:	cmp	r2, #10
   22c64:	bcc	22c44 <__assert_fail@plt+0x1090c>
   22c68:	b	22db8 <__assert_fail@plt+0x10a80>
   22c6c:	uxtb	r2, r2
   22c70:	cmp	lr, r2
   22c74:	bne	22cd8 <__assert_fail@plt+0x109a0>
   22c78:	cmp	r5, lr
   22c7c:	bne	22d44 <__assert_fail@plt+0x10a0c>
   22c80:	add	r1, r1, #1
   22c84:	add	r0, r0, #1
   22c88:	mov	ip, #0
   22c8c:	ldrb	r7, [r0]
   22c90:	ldrb	r3, [r1]
   22c94:	sub	r2, r7, #48	; 0x30
   22c98:	cmp	r7, r3
   22c9c:	bne	22d94 <__assert_fail@plt+0x10a5c>
   22ca0:	add	r1, r1, #1
   22ca4:	add	r0, r0, #1
   22ca8:	cmp	r2, #10
   22cac:	bcc	22c8c <__assert_fail@plt+0x10954>
   22cb0:	b	22db8 <__assert_fail@plt+0x10a80>
   22cb4:	mov	ip, #0
   22cb8:	cmp	r4, r2
   22cbc:	bne	22db8 <__assert_fail@plt+0x10a80>
   22cc0:	add	r0, r0, #1
   22cc4:	ldrb	r1, [r0], #1
   22cc8:	cmp	r1, #48	; 0x30
   22ccc:	beq	22cc4 <__assert_fail@plt+0x1098c>
   22cd0:	sub	r0, r1, #48	; 0x30
   22cd4:	b	22cf8 <__assert_fail@plt+0x109c0>
   22cd8:	mov	ip, #0
   22cdc:	cmp	r5, r2
   22ce0:	bne	22db8 <__assert_fail@plt+0x10a80>
   22ce4:	add	r1, r1, #1
   22ce8:	ldrb	r0, [r1], #1
   22cec:	cmp	r0, #48	; 0x30
   22cf0:	beq	22ce8 <__assert_fail@plt+0x109b0>
   22cf4:	sub	r0, r0, #48	; 0x30
   22cf8:	mov	ip, #0
   22cfc:	cmp	r0, #10
   22d00:	mvncc	ip, #0
   22d04:	mov	r0, ip
   22d08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22d0c:	mvn	ip, #0
   22d10:	movwcc	ip, #1
   22d14:	mov	r0, ip
   22d18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22d1c:	mov	ip, #1
   22d20:	mvncc	ip, #0
   22d24:	mov	r0, ip
   22d28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22d2c:	add	r1, r1, #1
   22d30:	ldrb	r0, [r1], #1
   22d34:	cmp	r0, #48	; 0x30
   22d38:	beq	22d30 <__assert_fail@plt+0x109f8>
   22d3c:	sub	r0, r0, #48	; 0x30
   22d40:	b	22d58 <__assert_fail@plt+0x10a20>
   22d44:	add	r0, r0, #1
   22d48:	ldrb	r1, [r0], #1
   22d4c:	cmp	r1, #48	; 0x30
   22d50:	beq	22d48 <__assert_fail@plt+0x10a10>
   22d54:	sub	r0, r1, #48	; 0x30
   22d58:	mov	ip, #0
   22d5c:	cmp	r0, #10
   22d60:	movwcc	ip, #1
   22d64:	mov	r0, ip
   22d68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22d6c:	sub	r6, r3, #48	; 0x30
   22d70:	cmp	r2, #9
   22d74:	cmpls	r6, #9
   22d78:	bls	22dc0 <__assert_fail@plt+0x10a88>
   22d7c:	cmp	r2, #10
   22d80:	bcc	22d30 <__assert_fail@plt+0x109f8>
   22d84:	mov	ip, #0
   22d88:	cmp	r6, #10
   22d8c:	bcc	22cc4 <__assert_fail@plt+0x1098c>
   22d90:	b	22db8 <__assert_fail@plt+0x10a80>
   22d94:	sub	r6, r3, #48	; 0x30
   22d98:	cmp	r2, #9
   22d9c:	cmpls	r6, #9
   22da0:	bls	22dc0 <__assert_fail@plt+0x10a88>
   22da4:	cmp	r2, #10
   22da8:	bcc	22d48 <__assert_fail@plt+0x10a10>
   22dac:	mov	ip, #0
   22db0:	cmp	r6, #10
   22db4:	bcc	22ce8 <__assert_fail@plt+0x109b0>
   22db8:	mov	r0, ip
   22dbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22dc0:	sub	ip, r7, r3
   22dc4:	mov	r0, ip
   22dc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22dcc:	push	{r4, r5, r6, r7, fp, lr}
   22dd0:	add	fp, sp, #16
   22dd4:	mov	r4, r0
   22dd8:	cmp	r0, #2
   22ddc:	movhi	r0, r4
   22de0:	pophi	{r4, r5, r6, r7, fp, pc}
   22de4:	mov	r0, r4
   22de8:	bl	259a4 <_obstack_memory_used@@Base+0xb4>
   22dec:	mov	r5, r0
   22df0:	bl	12164 <__errno_location@plt>
   22df4:	ldr	r7, [r0]
   22df8:	mov	r6, r0
   22dfc:	mov	r0, r4
   22e00:	bl	12320 <close@plt>
   22e04:	mov	r0, r5
   22e08:	str	r7, [r6]
   22e0c:	pop	{r4, r5, r6, r7, fp, pc}
   22e10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22e14:	add	fp, sp, #24
   22e18:	sub	sp, sp, #32
   22e1c:	ldr	r6, [fp, #12]
   22e20:	ldr	r7, [fp, #8]
   22e24:	mov	r4, r2
   22e28:	mov	r8, r0
   22e2c:	cmp	r1, #0
   22e30:	beq	22e58 <__assert_fail@plt+0x10b20>
   22e34:	movw	r2, #33198	; 0x81ae
   22e38:	mov	r5, r1
   22e3c:	str	r3, [sp, #4]
   22e40:	str	r4, [sp]
   22e44:	mov	r0, r8
   22e48:	mov	r1, #1
   22e4c:	movt	r2, #2
   22e50:	mov	r3, r5
   22e54:	b	22e70 <__assert_fail@plt+0x10b38>
   22e58:	movw	r2, #33210	; 0x81ba
   22e5c:	str	r3, [sp]
   22e60:	mov	r0, r8
   22e64:	mov	r1, #1
   22e68:	mov	r3, r4
   22e6c:	movt	r2, #2
   22e70:	bl	121c4 <__fprintf_chk@plt>
   22e74:	movw	r1, #33217	; 0x81c1
   22e78:	mov	r0, #0
   22e7c:	mov	r2, #5
   22e80:	movt	r1, #2
   22e84:	bl	11f54 <dcgettext@plt>
   22e88:	movw	r2, #33935	; 0x848f
   22e8c:	mov	r3, r0
   22e90:	movw	r0, #2022	; 0x7e6
   22e94:	mov	r1, #1
   22e98:	str	r0, [sp]
   22e9c:	movt	r2, #2
   22ea0:	mov	r0, r8
   22ea4:	bl	121c4 <__fprintf_chk@plt>
   22ea8:	movw	r4, #24691	; 0x6073
   22eac:	mov	r1, r8
   22eb0:	movt	r4, #2
   22eb4:	mov	r0, r4
   22eb8:	bl	11e10 <fputs_unlocked@plt>
   22ebc:	movw	r1, #33221	; 0x81c5
   22ec0:	mov	r0, #0
   22ec4:	mov	r2, #5
   22ec8:	movt	r1, #2
   22ecc:	bl	11f54 <dcgettext@plt>
   22ed0:	movw	r3, #33392	; 0x8270
   22ed4:	mov	r2, r0
   22ed8:	mov	r0, r8
   22edc:	mov	r1, #1
   22ee0:	movt	r3, #2
   22ee4:	bl	121c4 <__fprintf_chk@plt>
   22ee8:	mov	r0, r4
   22eec:	mov	r1, r8
   22ef0:	bl	11e10 <fputs_unlocked@plt>
   22ef4:	cmp	r6, #9
   22ef8:	bhi	22f34 <__assert_fail@plt+0x10bfc>
   22efc:	add	r0, pc, #0
   22f00:	ldr	pc, [r0, r6, lsl #2]
   22f04:	andeq	r2, r2, ip, lsr #30
   22f08:	andeq	r2, r2, r0, asr #30
   22f0c:	andeq	r2, r2, r0, ror pc
   22f10:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   22f14:	andeq	r2, r2, r0, asr #31
   22f18:	andeq	r2, r2, r8, ror #31
   22f1c:	andeq	r3, r2, r0, lsl r0
   22f20:	andeq	r3, r2, r8, asr #32
   22f24:	strdeq	r3, [r2], -r0
   22f28:	muleq	r2, r8, r0
   22f2c:	sub	sp, fp, #24
   22f30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22f34:	movw	r1, #33745	; 0x83d1
   22f38:	movt	r1, #2
   22f3c:	b	230a0 <__assert_fail@plt+0x10d68>
   22f40:	movw	r1, #33426	; 0x8292
   22f44:	mov	r0, #0
   22f48:	mov	r2, #5
   22f4c:	movt	r1, #2
   22f50:	bl	11f54 <dcgettext@plt>
   22f54:	ldr	r3, [r7]
   22f58:	mov	r2, r0
   22f5c:	mov	r0, r8
   22f60:	mov	r1, #1
   22f64:	sub	sp, fp, #24
   22f68:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22f6c:	b	121c4 <__fprintf_chk@plt>
   22f70:	movw	r1, #33442	; 0x82a2
   22f74:	mov	r0, #0
   22f78:	mov	r2, #5
   22f7c:	movt	r1, #2
   22f80:	bl	11f54 <dcgettext@plt>
   22f84:	mov	r2, r0
   22f88:	ldr	r3, [r7]
   22f8c:	ldr	r0, [r7, #4]
   22f90:	str	r0, [sp]
   22f94:	b	23084 <__assert_fail@plt+0x10d4c>
   22f98:	movw	r1, #33465	; 0x82b9
   22f9c:	mov	r0, #0
   22fa0:	mov	r2, #5
   22fa4:	movt	r1, #2
   22fa8:	bl	11f54 <dcgettext@plt>
   22fac:	ldr	r3, [r7]
   22fb0:	mov	r2, r0
   22fb4:	ldmib	r7, {r0, r1}
   22fb8:	stm	sp, {r0, r1}
   22fbc:	b	23084 <__assert_fail@plt+0x10d4c>
   22fc0:	movw	r1, #33493	; 0x82d5
   22fc4:	mov	r0, #0
   22fc8:	mov	r2, #5
   22fcc:	movt	r1, #2
   22fd0:	bl	11f54 <dcgettext@plt>
   22fd4:	ldr	r3, [r7]
   22fd8:	mov	r2, r0
   22fdc:	ldmib	r7, {r0, r1, r7}
   22fe0:	stm	sp, {r0, r1, r7}
   22fe4:	b	23084 <__assert_fail@plt+0x10d4c>
   22fe8:	movw	r1, #33525	; 0x82f5
   22fec:	mov	r0, #0
   22ff0:	mov	r2, #5
   22ff4:	movt	r1, #2
   22ff8:	bl	11f54 <dcgettext@plt>
   22ffc:	ldr	r3, [r7]
   23000:	mov	r2, r0
   23004:	ldmib	r7, {r0, r1, r6, r7}
   23008:	stm	sp, {r0, r1, r6, r7}
   2300c:	b	23084 <__assert_fail@plt+0x10d4c>
   23010:	movw	r1, #33561	; 0x8319
   23014:	mov	r0, #0
   23018:	mov	r2, #5
   2301c:	movt	r1, #2
   23020:	bl	11f54 <dcgettext@plt>
   23024:	ldr	r3, [r7]
   23028:	mov	r2, r0
   2302c:	ldmib	r7, {r0, r1, r6}
   23030:	ldr	r5, [r7, #16]
   23034:	ldr	r7, [r7, #20]
   23038:	stm	sp, {r0, r1, r6}
   2303c:	str	r5, [sp, #12]
   23040:	str	r7, [sp, #16]
   23044:	b	23084 <__assert_fail@plt+0x10d4c>
   23048:	movw	r1, #33601	; 0x8341
   2304c:	mov	r0, #0
   23050:	mov	r2, #5
   23054:	movt	r1, #2
   23058:	bl	11f54 <dcgettext@plt>
   2305c:	ldr	r3, [r7]
   23060:	mov	r2, r0
   23064:	ldmib	r7, {r0, r1, r6}
   23068:	ldr	r5, [r7, #16]
   2306c:	ldr	r4, [r7, #20]
   23070:	ldr	r7, [r7, #24]
   23074:	stm	sp, {r0, r1, r6}
   23078:	str	r5, [sp, #12]
   2307c:	str	r4, [sp, #16]
   23080:	str	r7, [sp, #20]
   23084:	mov	r0, r8
   23088:	mov	r1, #1
   2308c:	bl	121c4 <__fprintf_chk@plt>
   23090:	sub	sp, fp, #24
   23094:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23098:	movw	r1, #33693	; 0x839d
   2309c:	movt	r1, #2
   230a0:	mov	r0, #0
   230a4:	mov	r2, #5
   230a8:	bl	11f54 <dcgettext@plt>
   230ac:	mov	ip, r0
   230b0:	ldr	r3, [r7]
   230b4:	ldr	r0, [r7, #4]
   230b8:	ldr	r1, [r7, #8]
   230bc:	ldr	r6, [r7, #12]
   230c0:	ldr	r5, [r7, #16]
   230c4:	ldr	r4, [r7, #20]
   230c8:	ldr	r2, [r7, #24]
   230cc:	ldr	lr, [r7, #28]
   230d0:	ldr	r7, [r7, #32]
   230d4:	stm	sp, {r0, r1, r6}
   230d8:	str	r5, [sp, #12]
   230dc:	str	r4, [sp, #16]
   230e0:	str	r2, [sp, #20]
   230e4:	str	lr, [sp, #24]
   230e8:	str	r7, [sp, #28]
   230ec:	b	23134 <__assert_fail@plt+0x10dfc>
   230f0:	movw	r1, #33645	; 0x836d
   230f4:	mov	r0, #0
   230f8:	mov	r2, #5
   230fc:	movt	r1, #2
   23100:	bl	11f54 <dcgettext@plt>
   23104:	mov	ip, r0
   23108:	ldr	r3, [r7]
   2310c:	ldmib	r7, {r0, r1, r6}
   23110:	ldr	r5, [r7, #16]
   23114:	ldr	r4, [r7, #20]
   23118:	ldr	r2, [r7, #24]
   2311c:	ldr	r7, [r7, #28]
   23120:	stm	sp, {r0, r1, r6}
   23124:	str	r5, [sp, #12]
   23128:	str	r4, [sp, #16]
   2312c:	str	r2, [sp, #20]
   23130:	str	r7, [sp, #24]
   23134:	mov	r0, r8
   23138:	mov	r1, #1
   2313c:	mov	r2, ip
   23140:	bl	121c4 <__fprintf_chk@plt>
   23144:	sub	sp, fp, #24
   23148:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2314c:	push	{r4, sl, fp, lr}
   23150:	add	fp, sp, #8
   23154:	sub	sp, sp, #8
   23158:	ldr	ip, [fp, #8]
   2315c:	mov	lr, #0
   23160:	ldr	r4, [ip, lr, lsl #2]
   23164:	add	lr, lr, #1
   23168:	cmp	r4, #0
   2316c:	bne	23160 <__assert_fail@plt+0x10e28>
   23170:	sub	r4, lr, #1
   23174:	str	ip, [sp]
   23178:	str	r4, [sp, #4]
   2317c:	bl	22e10 <__assert_fail@plt+0x10ad8>
   23180:	sub	sp, fp, #8
   23184:	pop	{r4, sl, fp, pc}
   23188:	push	{fp, lr}
   2318c:	mov	fp, sp
   23190:	sub	sp, sp, #48	; 0x30
   23194:	ldr	ip, [fp, #8]
   23198:	ldr	lr, [ip]
   2319c:	cmp	lr, #0
   231a0:	str	lr, [sp, #8]
   231a4:	beq	23240 <__assert_fail@plt+0x10f08>
   231a8:	ldr	lr, [ip, #4]
   231ac:	cmp	lr, #0
   231b0:	str	lr, [sp, #12]
   231b4:	beq	23248 <__assert_fail@plt+0x10f10>
   231b8:	ldr	lr, [ip, #8]
   231bc:	cmp	lr, #0
   231c0:	str	lr, [sp, #16]
   231c4:	beq	23250 <__assert_fail@plt+0x10f18>
   231c8:	ldr	lr, [ip, #12]
   231cc:	cmp	lr, #0
   231d0:	str	lr, [sp, #20]
   231d4:	beq	23258 <__assert_fail@plt+0x10f20>
   231d8:	ldr	lr, [ip, #16]
   231dc:	cmp	lr, #0
   231e0:	str	lr, [sp, #24]
   231e4:	beq	23260 <__assert_fail@plt+0x10f28>
   231e8:	ldr	lr, [ip, #20]
   231ec:	cmp	lr, #0
   231f0:	str	lr, [sp, #28]
   231f4:	beq	23268 <__assert_fail@plt+0x10f30>
   231f8:	ldr	lr, [ip, #24]
   231fc:	cmp	lr, #0
   23200:	str	lr, [sp, #32]
   23204:	beq	23270 <__assert_fail@plt+0x10f38>
   23208:	ldr	lr, [ip, #28]
   2320c:	cmp	lr, #0
   23210:	str	lr, [sp, #36]	; 0x24
   23214:	beq	23278 <__assert_fail@plt+0x10f40>
   23218:	ldr	lr, [ip, #32]
   2321c:	cmp	lr, #0
   23220:	str	lr, [sp, #40]	; 0x28
   23224:	beq	23280 <__assert_fail@plt+0x10f48>
   23228:	ldr	lr, [ip, #36]	; 0x24
   2322c:	mov	ip, #10
   23230:	cmp	lr, #0
   23234:	str	lr, [sp, #44]	; 0x2c
   23238:	movweq	ip, #9
   2323c:	b	23284 <__assert_fail@plt+0x10f4c>
   23240:	mov	ip, #0
   23244:	b	23284 <__assert_fail@plt+0x10f4c>
   23248:	mov	ip, #1
   2324c:	b	23284 <__assert_fail@plt+0x10f4c>
   23250:	mov	ip, #2
   23254:	b	23284 <__assert_fail@plt+0x10f4c>
   23258:	mov	ip, #3
   2325c:	b	23284 <__assert_fail@plt+0x10f4c>
   23260:	mov	ip, #4
   23264:	b	23284 <__assert_fail@plt+0x10f4c>
   23268:	mov	ip, #5
   2326c:	b	23284 <__assert_fail@plt+0x10f4c>
   23270:	mov	ip, #6
   23274:	b	23284 <__assert_fail@plt+0x10f4c>
   23278:	mov	ip, #7
   2327c:	b	23284 <__assert_fail@plt+0x10f4c>
   23280:	mov	ip, #8
   23284:	add	lr, sp, #8
   23288:	str	ip, [sp, #4]
   2328c:	str	lr, [sp]
   23290:	bl	22e10 <__assert_fail@plt+0x10ad8>
   23294:	mov	sp, fp
   23298:	pop	{fp, pc}
   2329c:	push	{fp, lr}
   232a0:	mov	fp, sp
   232a4:	sub	sp, sp, #56	; 0x38
   232a8:	add	ip, fp, #8
   232ac:	str	ip, [sp, #12]
   232b0:	ldr	lr, [fp, #8]
   232b4:	cmp	lr, #0
   232b8:	str	lr, [sp, #16]
   232bc:	beq	23358 <__assert_fail@plt+0x11020>
   232c0:	ldr	lr, [ip, #4]
   232c4:	cmp	lr, #0
   232c8:	str	lr, [sp, #20]
   232cc:	beq	23360 <__assert_fail@plt+0x11028>
   232d0:	ldr	lr, [ip, #8]
   232d4:	cmp	lr, #0
   232d8:	str	lr, [sp, #24]
   232dc:	beq	23368 <__assert_fail@plt+0x11030>
   232e0:	ldr	lr, [ip, #12]
   232e4:	cmp	lr, #0
   232e8:	str	lr, [sp, #28]
   232ec:	beq	23370 <__assert_fail@plt+0x11038>
   232f0:	ldr	lr, [ip, #16]
   232f4:	cmp	lr, #0
   232f8:	str	lr, [sp, #32]
   232fc:	beq	23378 <__assert_fail@plt+0x11040>
   23300:	ldr	lr, [ip, #20]
   23304:	cmp	lr, #0
   23308:	str	lr, [sp, #36]	; 0x24
   2330c:	beq	23380 <__assert_fail@plt+0x11048>
   23310:	ldr	lr, [ip, #24]
   23314:	cmp	lr, #0
   23318:	str	lr, [sp, #40]	; 0x28
   2331c:	beq	23388 <__assert_fail@plt+0x11050>
   23320:	ldr	lr, [ip, #28]
   23324:	cmp	lr, #0
   23328:	str	lr, [sp, #44]	; 0x2c
   2332c:	beq	23390 <__assert_fail@plt+0x11058>
   23330:	ldr	lr, [ip, #32]
   23334:	cmp	lr, #0
   23338:	str	lr, [sp, #48]	; 0x30
   2333c:	beq	23398 <__assert_fail@plt+0x11060>
   23340:	ldr	lr, [ip, #36]	; 0x24
   23344:	mov	ip, #10
   23348:	cmp	lr, #0
   2334c:	str	lr, [sp, #52]	; 0x34
   23350:	movweq	ip, #9
   23354:	b	2339c <__assert_fail@plt+0x11064>
   23358:	mov	ip, #0
   2335c:	b	2339c <__assert_fail@plt+0x11064>
   23360:	mov	ip, #1
   23364:	b	2339c <__assert_fail@plt+0x11064>
   23368:	mov	ip, #2
   2336c:	b	2339c <__assert_fail@plt+0x11064>
   23370:	mov	ip, #3
   23374:	b	2339c <__assert_fail@plt+0x11064>
   23378:	mov	ip, #4
   2337c:	b	2339c <__assert_fail@plt+0x11064>
   23380:	mov	ip, #5
   23384:	b	2339c <__assert_fail@plt+0x11064>
   23388:	mov	ip, #6
   2338c:	b	2339c <__assert_fail@plt+0x11064>
   23390:	mov	ip, #7
   23394:	b	2339c <__assert_fail@plt+0x11064>
   23398:	mov	ip, #8
   2339c:	add	lr, sp, #16
   233a0:	str	ip, [sp, #4]
   233a4:	str	lr, [sp]
   233a8:	bl	22e10 <__assert_fail@plt+0x10ad8>
   233ac:	mov	sp, fp
   233b0:	pop	{fp, pc}
   233b4:	push	{fp, lr}
   233b8:	mov	fp, sp
   233bc:	movw	r0, #37588	; 0x92d4
   233c0:	movt	r0, #3
   233c4:	ldr	r1, [r0]
   233c8:	movw	r0, #24691	; 0x6073
   233cc:	movt	r0, #2
   233d0:	bl	11e10 <fputs_unlocked@plt>
   233d4:	movw	r1, #33805	; 0x840d
   233d8:	mov	r0, #0
   233dc:	mov	r2, #5
   233e0:	movt	r1, #2
   233e4:	bl	11f54 <dcgettext@plt>
   233e8:	movw	r2, #33825	; 0x8421
   233ec:	mov	r1, r0
   233f0:	mov	r0, #1
   233f4:	movt	r2, #2
   233f8:	bl	121a0 <__printf_chk@plt>
   233fc:	movw	r1, #33847	; 0x8437
   23400:	mov	r0, #0
   23404:	mov	r2, #5
   23408:	movt	r1, #2
   2340c:	bl	11f54 <dcgettext@plt>
   23410:	movw	r2, #28740	; 0x7044
   23414:	movw	r3, #29425	; 0x72f1
   23418:	mov	r1, r0
   2341c:	mov	r0, #1
   23420:	movt	r2, #2
   23424:	movt	r3, #2
   23428:	bl	121a0 <__printf_chk@plt>
   2342c:	movw	r1, #33867	; 0x844b
   23430:	mov	r0, #0
   23434:	mov	r2, #5
   23438:	movt	r1, #2
   2343c:	bl	11f54 <dcgettext@plt>
   23440:	movw	r2, #33906	; 0x8472
   23444:	mov	r1, r0
   23448:	mov	r0, #1
   2344c:	movt	r2, #2
   23450:	pop	{fp, lr}
   23454:	b	121a0 <__printf_chk@plt>
   23458:	push	{r4, r5, r6, sl, fp, lr}
   2345c:	add	fp, sp, #16
   23460:	mov	r4, r2
   23464:	mov	r5, r1
   23468:	mov	r6, r0
   2346c:	bl	25968 <_obstack_memory_used@@Base+0x78>
   23470:	cmp	r0, #0
   23474:	popne	{r4, r5, r6, sl, fp, pc}
   23478:	cmp	r6, #0
   2347c:	beq	23490 <__assert_fail@plt+0x11158>
   23480:	cmp	r5, #0
   23484:	cmpne	r4, #0
   23488:	bne	23490 <__assert_fail@plt+0x11158>
   2348c:	pop	{r4, r5, r6, sl, fp, pc}
   23490:	bl	23a30 <__assert_fail@plt+0x116f8>
   23494:	push	{r4, r5, r6, sl, fp, lr}
   23498:	add	fp, sp, #16
   2349c:	mov	r4, r2
   234a0:	mov	r5, r1
   234a4:	mov	r6, r0
   234a8:	bl	25968 <_obstack_memory_used@@Base+0x78>
   234ac:	cmp	r0, #0
   234b0:	popne	{r4, r5, r6, sl, fp, pc}
   234b4:	cmp	r6, #0
   234b8:	beq	234cc <__assert_fail@plt+0x11194>
   234bc:	cmp	r5, #0
   234c0:	cmpne	r4, #0
   234c4:	bne	234cc <__assert_fail@plt+0x11194>
   234c8:	pop	{r4, r5, r6, sl, fp, pc}
   234cc:	bl	23a30 <__assert_fail@plt+0x116f8>
   234d0:	push	{fp, lr}
   234d4:	mov	fp, sp
   234d8:	bl	24aec <__assert_fail@plt+0x127b4>
   234dc:	cmp	r0, #0
   234e0:	popne	{fp, pc}
   234e4:	bl	23a30 <__assert_fail@plt+0x116f8>
   234e8:	push	{fp, lr}
   234ec:	mov	fp, sp
   234f0:	bl	24aec <__assert_fail@plt+0x127b4>
   234f4:	cmp	r0, #0
   234f8:	popne	{fp, pc}
   234fc:	bl	23a30 <__assert_fail@plt+0x116f8>
   23500:	push	{fp, lr}
   23504:	mov	fp, sp
   23508:	bl	24aec <__assert_fail@plt+0x127b4>
   2350c:	cmp	r0, #0
   23510:	popne	{fp, pc}
   23514:	bl	23a30 <__assert_fail@plt+0x116f8>
   23518:	push	{r4, r5, fp, lr}
   2351c:	add	fp, sp, #8
   23520:	mov	r4, r1
   23524:	mov	r5, r0
   23528:	bl	24b1c <__assert_fail@plt+0x127e4>
   2352c:	cmp	r0, #0
   23530:	popne	{r4, r5, fp, pc}
   23534:	cmp	r5, #0
   23538:	beq	23548 <__assert_fail@plt+0x11210>
   2353c:	cmp	r4, #0
   23540:	bne	23548 <__assert_fail@plt+0x11210>
   23544:	pop	{r4, r5, fp, pc}
   23548:	bl	23a30 <__assert_fail@plt+0x116f8>
   2354c:	push	{fp, lr}
   23550:	mov	fp, sp
   23554:	cmp	r1, #0
   23558:	orreq	r1, r1, #1
   2355c:	bl	24b1c <__assert_fail@plt+0x127e4>
   23560:	cmp	r0, #0
   23564:	popne	{fp, pc}
   23568:	bl	23a30 <__assert_fail@plt+0x116f8>
   2356c:	push	{fp, lr}
   23570:	mov	fp, sp
   23574:	clz	r3, r2
   23578:	lsr	ip, r3, #5
   2357c:	clz	r3, r1
   23580:	lsr	r3, r3, #5
   23584:	orrs	r3, r3, ip
   23588:	movwne	r1, #1
   2358c:	movwne	r2, #1
   23590:	bl	25968 <_obstack_memory_used@@Base+0x78>
   23594:	cmp	r0, #0
   23598:	popne	{fp, pc}
   2359c:	bl	23a30 <__assert_fail@plt+0x116f8>
   235a0:	push	{fp, lr}
   235a4:	mov	fp, sp
   235a8:	mov	r2, r1
   235ac:	mov	r1, r0
   235b0:	mov	r0, #0
   235b4:	bl	25968 <_obstack_memory_used@@Base+0x78>
   235b8:	cmp	r0, #0
   235bc:	popne	{fp, pc}
   235c0:	bl	23a30 <__assert_fail@plt+0x116f8>
   235c4:	push	{fp, lr}
   235c8:	mov	fp, sp
   235cc:	mov	r2, r1
   235d0:	mov	r1, r0
   235d4:	clz	r0, r2
   235d8:	clz	r3, r1
   235dc:	lsr	r0, r0, #5
   235e0:	lsr	r3, r3, #5
   235e4:	orrs	r0, r3, r0
   235e8:	movwne	r1, #1
   235ec:	movwne	r2, #1
   235f0:	mov	r0, #0
   235f4:	bl	25968 <_obstack_memory_used@@Base+0x78>
   235f8:	cmp	r0, #0
   235fc:	popne	{fp, pc}
   23600:	bl	23a30 <__assert_fail@plt+0x116f8>
   23604:	push	{r4, r5, r6, sl, fp, lr}
   23608:	add	fp, sp, #16
   2360c:	ldr	r5, [r1]
   23610:	mov	r4, r1
   23614:	mov	r6, r0
   23618:	cmp	r0, #0
   2361c:	beq	23634 <__assert_fail@plt+0x112fc>
   23620:	mov	r0, #1
   23624:	add	r0, r0, r5, lsr #1
   23628:	adds	r5, r5, r0
   2362c:	bcc	2363c <__assert_fail@plt+0x11304>
   23630:	b	23678 <__assert_fail@plt+0x11340>
   23634:	cmp	r5, #0
   23638:	movweq	r5, #64	; 0x40
   2363c:	mov	r0, r6
   23640:	mov	r1, r5
   23644:	mov	r2, #1
   23648:	bl	25968 <_obstack_memory_used@@Base+0x78>
   2364c:	cmp	r5, #0
   23650:	mov	r1, r5
   23654:	movwne	r1, #1
   23658:	cmp	r0, #0
   2365c:	bne	23670 <__assert_fail@plt+0x11338>
   23660:	clz	r2, r6
   23664:	lsr	r2, r2, #5
   23668:	orrs	r1, r2, r1
   2366c:	bne	23678 <__assert_fail@plt+0x11340>
   23670:	str	r5, [r4]
   23674:	pop	{r4, r5, r6, sl, fp, pc}
   23678:	bl	23a30 <__assert_fail@plt+0x116f8>
   2367c:	push	{r4, r5, r6, r7, fp, lr}
   23680:	add	fp, sp, #16
   23684:	ldr	r5, [r1]
   23688:	mov	r6, r2
   2368c:	mov	r4, r1
   23690:	mov	r7, r0
   23694:	cmp	r0, #0
   23698:	beq	236b0 <__assert_fail@plt+0x11378>
   2369c:	mov	r0, #1
   236a0:	add	r0, r0, r5, lsr #1
   236a4:	adds	r5, r5, r0
   236a8:	bcc	236c8 <__assert_fail@plt+0x11390>
   236ac:	b	236fc <__assert_fail@plt+0x113c4>
   236b0:	cmp	r5, #0
   236b4:	bne	236c8 <__assert_fail@plt+0x11390>
   236b8:	mov	r0, #64	; 0x40
   236bc:	cmp	r6, #64	; 0x40
   236c0:	udiv	r5, r0, r6
   236c4:	addhi	r5, r5, #1
   236c8:	mov	r0, r7
   236cc:	mov	r1, r5
   236d0:	mov	r2, r6
   236d4:	bl	25968 <_obstack_memory_used@@Base+0x78>
   236d8:	cmp	r0, #0
   236dc:	bne	236f4 <__assert_fail@plt+0x113bc>
   236e0:	cmp	r7, #0
   236e4:	beq	236fc <__assert_fail@plt+0x113c4>
   236e8:	cmp	r6, #0
   236ec:	cmpne	r5, #0
   236f0:	bne	236fc <__assert_fail@plt+0x113c4>
   236f4:	str	r5, [r4]
   236f8:	pop	{r4, r5, r6, r7, fp, pc}
   236fc:	bl	23a30 <__assert_fail@plt+0x116f8>
   23700:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23704:	add	fp, sp, #24
   23708:	mov	r8, r1
   2370c:	ldr	r1, [r1]
   23710:	mov	r5, r0
   23714:	add	r0, r1, r1, asr #1
   23718:	cmp	r0, r1
   2371c:	mvnvs	r0, #-2147483648	; 0x80000000
   23720:	cmp	r0, r3
   23724:	mov	r7, r0
   23728:	movgt	r7, r3
   2372c:	cmn	r3, #1
   23730:	movle	r7, r0
   23734:	ldr	r0, [fp, #8]
   23738:	cmn	r0, #1
   2373c:	ble	23764 <__assert_fail@plt+0x1142c>
   23740:	cmp	r0, #0
   23744:	beq	237b8 <__assert_fail@plt+0x11480>
   23748:	cmn	r7, #1
   2374c:	ble	2378c <__assert_fail@plt+0x11454>
   23750:	mvn	r4, #-2147483648	; 0x80000000
   23754:	udiv	r6, r4, r0
   23758:	cmp	r6, r7
   2375c:	bge	237b8 <__assert_fail@plt+0x11480>
   23760:	b	237c8 <__assert_fail@plt+0x11490>
   23764:	cmn	r7, #1
   23768:	ble	237a8 <__assert_fail@plt+0x11470>
   2376c:	cmn	r0, #1
   23770:	beq	237b8 <__assert_fail@plt+0x11480>
   23774:	mov	r6, #-2147483648	; 0x80000000
   23778:	mvn	r4, #-2147483648	; 0x80000000
   2377c:	sdiv	r6, r6, r0
   23780:	cmp	r6, r7
   23784:	bge	237b8 <__assert_fail@plt+0x11480>
   23788:	b	237c8 <__assert_fail@plt+0x11490>
   2378c:	beq	237b8 <__assert_fail@plt+0x11480>
   23790:	mov	r6, #-2147483648	; 0x80000000
   23794:	mvn	r4, #-2147483648	; 0x80000000
   23798:	sdiv	r6, r6, r7
   2379c:	cmp	r6, r0
   237a0:	bge	237b8 <__assert_fail@plt+0x11480>
   237a4:	b	237c8 <__assert_fail@plt+0x11490>
   237a8:	mvn	r4, #-2147483648	; 0x80000000
   237ac:	sdiv	r6, r4, r0
   237b0:	cmp	r7, r6
   237b4:	blt	237c8 <__assert_fail@plt+0x11490>
   237b8:	mul	r6, r7, r0
   237bc:	mov	r4, #64	; 0x40
   237c0:	cmp	r6, #63	; 0x3f
   237c4:	bgt	237d0 <__assert_fail@plt+0x11498>
   237c8:	sdiv	r7, r4, r0
   237cc:	mul	r6, r7, r0
   237d0:	cmp	r5, #0
   237d4:	moveq	r4, #0
   237d8:	streq	r4, [r8]
   237dc:	sub	r4, r7, r1
   237e0:	cmp	r4, r2
   237e4:	bge	23890 <__assert_fail@plt+0x11558>
   237e8:	add	r7, r1, r2
   237ec:	mov	r6, #0
   237f0:	mov	r2, #0
   237f4:	cmp	r7, r3
   237f8:	movwgt	r6, #1
   237fc:	cmn	r3, #1
   23800:	movwgt	r2, #1
   23804:	cmp	r7, r1
   23808:	bvs	238c4 <__assert_fail@plt+0x1158c>
   2380c:	ands	r1, r2, r6
   23810:	bne	238c4 <__assert_fail@plt+0x1158c>
   23814:	cmn	r0, #1
   23818:	ble	23840 <__assert_fail@plt+0x11508>
   2381c:	cmp	r0, #0
   23820:	beq	2388c <__assert_fail@plt+0x11554>
   23824:	cmn	r7, #1
   23828:	ble	23864 <__assert_fail@plt+0x1152c>
   2382c:	mvn	r1, #-2147483648	; 0x80000000
   23830:	udiv	r1, r1, r0
   23834:	cmp	r1, r7
   23838:	bge	2388c <__assert_fail@plt+0x11554>
   2383c:	b	238c4 <__assert_fail@plt+0x1158c>
   23840:	cmn	r7, #1
   23844:	ble	2387c <__assert_fail@plt+0x11544>
   23848:	cmn	r0, #1
   2384c:	beq	2388c <__assert_fail@plt+0x11554>
   23850:	mov	r1, #-2147483648	; 0x80000000
   23854:	sdiv	r1, r1, r0
   23858:	cmp	r1, r7
   2385c:	bge	2388c <__assert_fail@plt+0x11554>
   23860:	b	238c4 <__assert_fail@plt+0x1158c>
   23864:	beq	2388c <__assert_fail@plt+0x11554>
   23868:	mov	r1, #-2147483648	; 0x80000000
   2386c:	sdiv	r1, r1, r7
   23870:	cmp	r1, r0
   23874:	bge	2388c <__assert_fail@plt+0x11554>
   23878:	b	238c4 <__assert_fail@plt+0x1158c>
   2387c:	mvn	r1, #-2147483648	; 0x80000000
   23880:	sdiv	r1, r1, r0
   23884:	cmp	r7, r1
   23888:	blt	238c4 <__assert_fail@plt+0x1158c>
   2388c:	mul	r6, r7, r0
   23890:	mov	r0, r5
   23894:	mov	r1, r6
   23898:	bl	24b1c <__assert_fail@plt+0x127e4>
   2389c:	cmp	r6, #0
   238a0:	movwne	r6, #1
   238a4:	cmp	r0, #0
   238a8:	bne	238bc <__assert_fail@plt+0x11584>
   238ac:	clz	r1, r5
   238b0:	lsr	r1, r1, #5
   238b4:	orrs	r1, r1, r6
   238b8:	bne	238c4 <__assert_fail@plt+0x1158c>
   238bc:	str	r7, [r8]
   238c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   238c4:	bl	23a30 <__assert_fail@plt+0x116f8>
   238c8:	push	{fp, lr}
   238cc:	mov	fp, sp
   238d0:	mov	r1, #1
   238d4:	bl	24a98 <__assert_fail@plt+0x12760>
   238d8:	cmp	r0, #0
   238dc:	popne	{fp, pc}
   238e0:	bl	23a30 <__assert_fail@plt+0x116f8>
   238e4:	push	{fp, lr}
   238e8:	mov	fp, sp
   238ec:	bl	24a98 <__assert_fail@plt+0x12760>
   238f0:	cmp	r0, #0
   238f4:	popne	{fp, pc}
   238f8:	bl	23a30 <__assert_fail@plt+0x116f8>
   238fc:	push	{fp, lr}
   23900:	mov	fp, sp
   23904:	mov	r1, #1
   23908:	bl	24a98 <__assert_fail@plt+0x12760>
   2390c:	cmp	r0, #0
   23910:	popne	{fp, pc}
   23914:	bl	23a30 <__assert_fail@plt+0x116f8>
   23918:	push	{fp, lr}
   2391c:	mov	fp, sp
   23920:	bl	24a98 <__assert_fail@plt+0x12760>
   23924:	cmp	r0, #0
   23928:	popne	{fp, pc}
   2392c:	bl	23a30 <__assert_fail@plt+0x116f8>
   23930:	push	{r4, r5, r6, sl, fp, lr}
   23934:	add	fp, sp, #16
   23938:	mov	r5, r0
   2393c:	mov	r0, r1
   23940:	mov	r4, r1
   23944:	bl	24aec <__assert_fail@plt+0x127b4>
   23948:	cmp	r0, #0
   2394c:	beq	23968 <__assert_fail@plt+0x11630>
   23950:	mov	r1, r5
   23954:	mov	r2, r4
   23958:	mov	r6, r0
   2395c:	bl	11ec4 <memcpy@plt>
   23960:	mov	r0, r6
   23964:	pop	{r4, r5, r6, sl, fp, pc}
   23968:	bl	23a30 <__assert_fail@plt+0x116f8>
   2396c:	push	{r4, r5, r6, sl, fp, lr}
   23970:	add	fp, sp, #16
   23974:	mov	r5, r0
   23978:	mov	r0, r1
   2397c:	mov	r4, r1
   23980:	bl	24aec <__assert_fail@plt+0x127b4>
   23984:	cmp	r0, #0
   23988:	beq	239a4 <__assert_fail@plt+0x1166c>
   2398c:	mov	r1, r5
   23990:	mov	r2, r4
   23994:	mov	r6, r0
   23998:	bl	11ec4 <memcpy@plt>
   2399c:	mov	r0, r6
   239a0:	pop	{r4, r5, r6, sl, fp, pc}
   239a4:	bl	23a30 <__assert_fail@plt+0x116f8>
   239a8:	push	{r4, r5, r6, sl, fp, lr}
   239ac:	add	fp, sp, #16
   239b0:	mov	r5, r0
   239b4:	add	r0, r1, #1
   239b8:	mov	r4, r1
   239bc:	bl	24aec <__assert_fail@plt+0x127b4>
   239c0:	cmp	r0, #0
   239c4:	beq	239ec <__assert_fail@plt+0x116b4>
   239c8:	mov	r6, r0
   239cc:	mov	r0, #0
   239d0:	mov	r1, r5
   239d4:	mov	r2, r4
   239d8:	strb	r0, [r6, r4]
   239dc:	mov	r0, r6
   239e0:	bl	11ec4 <memcpy@plt>
   239e4:	mov	r0, r6
   239e8:	pop	{r4, r5, r6, sl, fp, pc}
   239ec:	bl	23a30 <__assert_fail@plt+0x116f8>
   239f0:	push	{r4, r5, r6, sl, fp, lr}
   239f4:	add	fp, sp, #16
   239f8:	mov	r4, r0
   239fc:	bl	12140 <strlen@plt>
   23a00:	add	r5, r0, #1
   23a04:	mov	r0, r5
   23a08:	bl	24aec <__assert_fail@plt+0x127b4>
   23a0c:	cmp	r0, #0
   23a10:	beq	23a2c <__assert_fail@plt+0x116f4>
   23a14:	mov	r1, r4
   23a18:	mov	r2, r5
   23a1c:	mov	r6, r0
   23a20:	bl	11ec4 <memcpy@plt>
   23a24:	mov	r0, r6
   23a28:	pop	{r4, r5, r6, sl, fp, pc}
   23a2c:	bl	23a30 <__assert_fail@plt+0x116f8>
   23a30:	push	{fp, lr}
   23a34:	mov	fp, sp
   23a38:	movw	r0, #37480	; 0x9268
   23a3c:	movw	r1, #33982	; 0x84be
   23a40:	mov	r2, #5
   23a44:	movt	r0, #3
   23a48:	movt	r1, #2
   23a4c:	ldr	r4, [r0]
   23a50:	mov	r0, #0
   23a54:	bl	11f54 <dcgettext@plt>
   23a58:	movw	r2, #32646	; 0x7f86
   23a5c:	mov	r3, r0
   23a60:	mov	r0, r4
   23a64:	mov	r1, #0
   23a68:	movt	r2, #2
   23a6c:	bl	12080 <error@plt>
   23a70:	bl	12314 <abort@plt>
   23a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a78:	add	fp, sp, #28
   23a7c:	sub	sp, sp, #4
   23a80:	mov	r9, r3
   23a84:	mov	r6, r2
   23a88:	mov	r7, r1
   23a8c:	mov	r4, r0
   23a90:	bl	25374 <__assert_fail@plt+0x1303c>
   23a94:	mov	r8, r0
   23a98:	bl	12164 <__errno_location@plt>
   23a9c:	ldr	r5, [r0]
   23aa0:	cmp	r5, #0
   23aa4:	beq	23b58 <__assert_fail@plt+0x11820>
   23aa8:	movw	r1, #33999	; 0x84cf
   23aac:	mov	r0, #0
   23ab0:	mov	r2, #5
   23ab4:	movt	r1, #2
   23ab8:	bl	11f54 <dcgettext@plt>
   23abc:	mov	r2, r0
   23ac0:	mov	r0, #0
   23ac4:	mov	r1, r5
   23ac8:	bl	12080 <error@plt>
   23acc:	movw	r1, #34024	; 0x84e8
   23ad0:	mov	r0, #0
   23ad4:	mov	r2, #5
   23ad8:	movt	r1, #2
   23adc:	bl	11f54 <dcgettext@plt>
   23ae0:	mov	r2, r0
   23ae4:	mov	r0, #0
   23ae8:	mov	r1, #0
   23aec:	bl	12080 <error@plt>
   23af0:	movw	r0, #37480	; 0x9268
   23af4:	movw	r1, #34067	; 0x8513
   23af8:	mov	r2, #5
   23afc:	movt	r0, #3
   23b00:	movt	r1, #2
   23b04:	ldr	sl, [r0]
   23b08:	mov	r0, #0
   23b0c:	bl	11f54 <dcgettext@plt>
   23b10:	mov	r5, r0
   23b14:	mov	r0, #0
   23b18:	mov	r1, #8
   23b1c:	mov	r2, r4
   23b20:	mov	r3, r7
   23b24:	bl	2170c <__assert_fail@plt+0xf3d4>
   23b28:	mov	r4, r0
   23b2c:	mov	r0, #1
   23b30:	mov	r1, #8
   23b34:	mov	r2, r6
   23b38:	mov	r3, r9
   23b3c:	bl	2170c <__assert_fail@plt+0xf3d4>
   23b40:	str	r0, [sp]
   23b44:	mov	r0, sl
   23b48:	mov	r1, #0
   23b4c:	mov	r2, r5
   23b50:	mov	r3, r4
   23b54:	bl	12080 <error@plt>
   23b58:	mov	r0, r8
   23b5c:	sub	sp, fp, #28
   23b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b68:	add	fp, sp, #28
   23b6c:	sub	sp, sp, #4
   23b70:	mov	r6, r3
   23b74:	mov	r9, r2
   23b78:	mov	r4, r1
   23b7c:	mov	r7, r0
   23b80:	bl	25490 <__assert_fail@plt+0x13158>
   23b84:	mov	r8, r0
   23b88:	bl	12164 <__errno_location@plt>
   23b8c:	ldr	r5, [r0]
   23b90:	cmp	r5, #0
   23b94:	beq	23c48 <__assert_fail@plt+0x11910>
   23b98:	movw	r1, #33999	; 0x84cf
   23b9c:	mov	r0, #0
   23ba0:	mov	r2, #5
   23ba4:	movt	r1, #2
   23ba8:	bl	11f54 <dcgettext@plt>
   23bac:	mov	r2, r0
   23bb0:	mov	r0, #0
   23bb4:	mov	r1, r5
   23bb8:	bl	12080 <error@plt>
   23bbc:	movw	r1, #34024	; 0x84e8
   23bc0:	mov	r0, #0
   23bc4:	mov	r2, #5
   23bc8:	movt	r1, #2
   23bcc:	bl	11f54 <dcgettext@plt>
   23bd0:	mov	r2, r0
   23bd4:	mov	r0, #0
   23bd8:	mov	r1, #0
   23bdc:	bl	12080 <error@plt>
   23be0:	movw	r0, #37480	; 0x9268
   23be4:	movw	r1, #34067	; 0x8513
   23be8:	mov	r2, #5
   23bec:	movt	r0, #3
   23bf0:	movt	r1, #2
   23bf4:	ldr	sl, [r0]
   23bf8:	mov	r0, #0
   23bfc:	bl	11f54 <dcgettext@plt>
   23c00:	mov	r5, r0
   23c04:	sub	r3, r4, #1
   23c08:	mov	r0, #0
   23c0c:	mov	r1, #8
   23c10:	mov	r2, r7
   23c14:	bl	2170c <__assert_fail@plt+0xf3d4>
   23c18:	mov	r4, r0
   23c1c:	sub	r3, r6, #1
   23c20:	mov	r0, #1
   23c24:	mov	r1, #8
   23c28:	mov	r2, r9
   23c2c:	bl	2170c <__assert_fail@plt+0xf3d4>
   23c30:	str	r0, [sp]
   23c34:	mov	r0, sl
   23c38:	mov	r1, #0
   23c3c:	mov	r2, r5
   23c40:	mov	r3, r4
   23c44:	bl	12080 <error@plt>
   23c48:	mov	r0, r8
   23c4c:	sub	sp, fp, #28
   23c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c54:	andeq	r0, r0, r0
   23c58:	push	{r4, r5, r6, sl, fp, lr}
   23c5c:	add	fp, sp, #16
   23c60:	vpush	{d8}
   23c64:	sub	sp, sp, #8
   23c68:	vldr	d16, [pc, #168]	; 23d18 <__assert_fail@plt+0x119e0>
   23c6c:	vmov.f64	d8, d0
   23c70:	vcmpe.f64	d0, d16
   23c74:	vmrs	APSR_nzcv, fpscr
   23c78:	blt	23c90 <__assert_fail@plt+0x11958>
   23c7c:	bl	11e4c <pause@plt>
   23c80:	bl	12164 <__errno_location@plt>
   23c84:	ldr	r0, [r0]
   23c88:	cmp	r0, #4
   23c8c:	beq	23c7c <__assert_fail@plt+0x11944>
   23c90:	mov	r6, sp
   23c94:	vmov.f64	d0, d8
   23c98:	mov	r0, r6
   23c9c:	bl	24f18 <__assert_fail@plt+0x12be0>
   23ca0:	bl	12164 <__errno_location@plt>
   23ca4:	mov	r5, #0
   23ca8:	mov	r4, r0
   23cac:	mov	r1, r6
   23cb0:	str	r5, [r0]
   23cb4:	mov	r0, r6
   23cb8:	bl	11ea0 <nanosleep@plt>
   23cbc:	cmp	r0, #0
   23cc0:	beq	23cf4 <__assert_fail@plt+0x119bc>
   23cc4:	mov	r6, sp
   23cc8:	mov	r5, #0
   23ccc:	ldr	r0, [r4]
   23cd0:	orr	r0, r0, #4
   23cd4:	cmp	r0, #4
   23cd8:	bne	23d04 <__assert_fail@plt+0x119cc>
   23cdc:	mov	r0, r6
   23ce0:	mov	r1, r6
   23ce4:	str	r5, [r4]
   23ce8:	bl	11ea0 <nanosleep@plt>
   23cec:	cmp	r0, #0
   23cf0:	bne	23ccc <__assert_fail@plt+0x11994>
   23cf4:	mov	r0, r5
   23cf8:	sub	sp, fp, #24
   23cfc:	vpop	{d8}
   23d00:	pop	{r4, r5, r6, sl, fp, pc}
   23d04:	mvn	r5, #0
   23d08:	mov	r0, r5
   23d0c:	sub	sp, fp, #24
   23d10:	vpop	{d8}
   23d14:	pop	{r4, r5, r6, sl, fp, pc}
   23d18:	andeq	r0, r0, r0
   23d1c:	mvnmi	r0, r0
   23d20:	push	{fp, lr}
   23d24:	mov	fp, sp
   23d28:	sub	sp, sp, #8
   23d2c:	movw	ip, #37480	; 0x9268
   23d30:	movt	ip, #3
   23d34:	ldr	ip, [ip]
   23d38:	str	ip, [sp, #4]
   23d3c:	ldr	ip, [fp, #8]
   23d40:	str	ip, [sp]
   23d44:	bl	23d4c <__assert_fail@plt+0x11a14>
   23d48:	bl	12314 <abort@plt>
   23d4c:	push	{r4, r5, r6, r7, fp, lr}
   23d50:	add	fp, sp, #16
   23d54:	sub	sp, sp, #16
   23d58:	sub	r0, r0, #1
   23d5c:	cmp	r0, #4
   23d60:	bcs	23de0 <__assert_fail@plt+0x11aa8>
   23d64:	mov	r5, r1
   23d68:	movw	r1, #34200	; 0x8598
   23d6c:	ldr	r4, [fp, #12]
   23d70:	ldr	r6, [fp, #8]
   23d74:	movt	r1, #2
   23d78:	cmn	r5, #1
   23d7c:	ldr	r1, [r1, r0, lsl #2]
   23d80:	ble	23d94 <__assert_fail@plt+0x11a5c>
   23d84:	ldr	r7, [r3, r5, lsl #4]
   23d88:	movw	r5, #34104	; 0x8538
   23d8c:	movt	r5, #2
   23d90:	b	23db0 <__assert_fail@plt+0x11a78>
   23d94:	mov	r0, #0
   23d98:	add	r7, sp, #14
   23d9c:	strb	r0, [sp, #15]
   23da0:	movw	r0, #34104	; 0x8538
   23da4:	strb	r2, [sp, #14]
   23da8:	movt	r0, #2
   23dac:	sub	r5, r0, r5
   23db0:	mov	r0, #0
   23db4:	mov	r2, #5
   23db8:	bl	11f54 <dcgettext@plt>
   23dbc:	mov	r2, r0
   23dc0:	mov	r0, r4
   23dc4:	mov	r1, #0
   23dc8:	mov	r3, r5
   23dcc:	str	r7, [sp]
   23dd0:	str	r6, [sp, #4]
   23dd4:	bl	12080 <error@plt>
   23dd8:	sub	sp, fp, #16
   23ddc:	pop	{r4, r5, r6, r7, fp, pc}
   23de0:	bl	12314 <abort@plt>
   23de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23de8:	add	fp, sp, #28
   23dec:	sub	sp, sp, #44	; 0x2c
   23df0:	cmp	r2, #37	; 0x25
   23df4:	bcs	24a78 <__assert_fail@plt+0x12740>
   23df8:	ldr	sl, [fp, #8]
   23dfc:	mov	r6, r2
   23e00:	mov	r7, r1
   23e04:	mov	r4, r0
   23e08:	str	r3, [sp, #36]	; 0x24
   23e0c:	bl	12164 <__errno_location@plt>
   23e10:	mov	r5, r0
   23e14:	mov	r0, #0
   23e18:	str	r0, [r5]
   23e1c:	bl	1211c <__ctype_b_loc@plt>
   23e20:	ldr	r1, [r0]
   23e24:	mov	r2, r4
   23e28:	ldrb	r0, [r2], #1
   23e2c:	add	r3, r1, r0, lsl #1
   23e30:	ldrb	r3, [r3, #1]
   23e34:	tst	r3, #32
   23e38:	bne	23e28 <__assert_fail@plt+0x11af0>
   23e3c:	sub	r9, fp, #32
   23e40:	cmp	r7, #0
   23e44:	mov	r8, #4
   23e48:	movne	r9, r7
   23e4c:	cmp	r0, #45	; 0x2d
   23e50:	beq	24210 <__assert_fail@plt+0x11ed8>
   23e54:	mov	r0, r4
   23e58:	mov	r1, r9
   23e5c:	mov	r2, r6
   23e60:	mov	r3, #0
   23e64:	bl	11ee8 <__strtoull_internal@plt>
   23e68:	mov	r7, r1
   23e6c:	ldr	r1, [r9]
   23e70:	cmp	r1, r4
   23e74:	beq	23eac <__assert_fail@plt+0x11b74>
   23e78:	mov	r6, r0
   23e7c:	ldr	r0, [r5]
   23e80:	cmp	r0, #0
   23e84:	beq	241c8 <__assert_fail@plt+0x11e90>
   23e88:	cmp	r0, #34	; 0x22
   23e8c:	bne	24210 <__assert_fail@plt+0x11ed8>
   23e90:	mov	r8, #1
   23e94:	cmp	sl, #0
   23e98:	beq	24a64 <__assert_fail@plt+0x1272c>
   23e9c:	ldrb	r4, [r1]
   23ea0:	cmp	r4, #0
   23ea4:	bne	23ef0 <__assert_fail@plt+0x11bb8>
   23ea8:	b	24a64 <__assert_fail@plt+0x1272c>
   23eac:	cmp	sl, #0
   23eb0:	beq	24210 <__assert_fail@plt+0x11ed8>
   23eb4:	mov	r5, r1
   23eb8:	ldrb	r1, [r4]
   23ebc:	cmp	r1, #0
   23ec0:	beq	24210 <__assert_fail@plt+0x11ed8>
   23ec4:	mov	r0, sl
   23ec8:	bl	1214c <strchr@plt>
   23ecc:	cmp	r0, #0
   23ed0:	beq	24210 <__assert_fail@plt+0x11ed8>
   23ed4:	mov	r1, r5
   23ed8:	mov	r8, #0
   23edc:	mov	r6, #1
   23ee0:	mov	r7, #0
   23ee4:	ldrb	r4, [r1]
   23ee8:	cmp	r4, #0
   23eec:	beq	24a64 <__assert_fail@plt+0x1272c>
   23ef0:	str	r1, [sp, #32]
   23ef4:	mov	r0, sl
   23ef8:	mov	r1, r4
   23efc:	bl	1214c <strchr@plt>
   23f00:	cmp	r0, #0
   23f04:	beq	24204 <__assert_fail@plt+0x11ecc>
   23f08:	sub	r0, r4, #69	; 0x45
   23f0c:	mov	r1, #1
   23f10:	mov	r3, #0
   23f14:	mov	r5, #1024	; 0x400
   23f18:	cmp	r0, #47	; 0x2f
   23f1c:	str	r1, [sp, #28]
   23f20:	bhi	24024 <__assert_fail@plt+0x11cec>
   23f24:	add	r1, pc, #0
   23f28:	ldr	pc, [r1, r0, lsl #2]
   23f2c:	andeq	r3, r2, ip, ror #31
   23f30:	andeq	r4, r2, r4, lsr #32
   23f34:	andeq	r3, r2, ip, ror #31
   23f38:	andeq	r4, r2, r4, lsr #32
   23f3c:	andeq	r4, r2, r4, lsr #32
   23f40:	andeq	r4, r2, r4, lsr #32
   23f44:	andeq	r3, r2, ip, ror #31
   23f48:	andeq	r4, r2, r4, lsr #32
   23f4c:	andeq	r3, r2, ip, ror #31
   23f50:	andeq	r4, r2, r4, lsr #32
   23f54:	andeq	r4, r2, r4, lsr #32
   23f58:	andeq	r3, r2, ip, ror #31
   23f5c:	andeq	r4, r2, r4, lsr #32
   23f60:	andeq	r4, r2, r4, lsr #32
   23f64:	andeq	r4, r2, r4, lsr #32
   23f68:	andeq	r3, r2, ip, ror #31
   23f6c:	andeq	r4, r2, r4, lsr #32
   23f70:	andeq	r4, r2, r4, lsr #32
   23f74:	andeq	r4, r2, r4, lsr #32
   23f78:	andeq	r4, r2, r4, lsr #32
   23f7c:	andeq	r3, r2, ip, ror #31
   23f80:	andeq	r3, r2, ip, ror #31
   23f84:	andeq	r4, r2, r4, lsr #32
   23f88:	andeq	r4, r2, r4, lsr #32
   23f8c:	andeq	r4, r2, r4, lsr #32
   23f90:	andeq	r4, r2, r4, lsr #32
   23f94:	andeq	r4, r2, r4, lsr #32
   23f98:	andeq	r4, r2, r4, lsr #32
   23f9c:	andeq	r4, r2, r4, lsr #32
   23fa0:	andeq	r4, r2, r4, lsr #32
   23fa4:	andeq	r4, r2, r4, lsr #32
   23fa8:	andeq	r4, r2, r4, lsr #32
   23fac:	andeq	r4, r2, r4, lsr #32
   23fb0:	andeq	r4, r2, r4, lsr #32
   23fb4:	andeq	r3, r2, ip, ror #31
   23fb8:	andeq	r4, r2, r4, lsr #32
   23fbc:	andeq	r4, r2, r4, lsr #32
   23fc0:	andeq	r4, r2, r4, lsr #32
   23fc4:	andeq	r3, r2, ip, ror #31
   23fc8:	andeq	r4, r2, r4, lsr #32
   23fcc:	andeq	r3, r2, ip, ror #31
   23fd0:	andeq	r4, r2, r4, lsr #32
   23fd4:	andeq	r4, r2, r4, lsr #32
   23fd8:	andeq	r4, r2, r4, lsr #32
   23fdc:	andeq	r4, r2, r4, lsr #32
   23fe0:	andeq	r4, r2, r4, lsr #32
   23fe4:	andeq	r4, r2, r4, lsr #32
   23fe8:	andeq	r3, r2, ip, ror #31
   23fec:	mov	r0, sl
   23ff0:	mov	r1, #48	; 0x30
   23ff4:	bl	1214c <strchr@plt>
   23ff8:	cmp	r0, #0
   23ffc:	beq	24020 <__assert_fail@plt+0x11ce8>
   24000:	ldr	r1, [sp, #32]
   24004:	ldrb	r0, [r1, #1]
   24008:	cmp	r0, #66	; 0x42
   2400c:	cmpne	r0, #68	; 0x44
   24010:	bne	241d8 <__assert_fail@plt+0x11ea0>
   24014:	mov	r5, #1000	; 0x3e8
   24018:	mov	r0, #2
   2401c:	str	r0, [sp, #28]
   24020:	mov	r3, #0
   24024:	sub	r0, r4, #66	; 0x42
   24028:	cmp	r0, #53	; 0x35
   2402c:	bhi	24204 <__assert_fail@plt+0x11ecc>
   24030:	add	r1, pc, #0
   24034:	ldr	pc, [r1, r0, lsl #2]
   24038:	andeq	r4, r2, r4, ror r5
   2403c:	andeq	r4, r2, r4, lsl #4
   24040:	andeq	r4, r2, r4, lsl #4
   24044:	muleq	r2, ip, r5
   24048:	andeq	r4, r2, r4, lsl #4
   2404c:	andeq	r4, r2, r0, lsl r1
   24050:	andeq	r4, r2, r4, lsl #4
   24054:	andeq	r4, r2, r4, lsl #4
   24058:	andeq	r4, r2, r4, lsl #4
   2405c:	andeq	r4, r2, ip, lsl r2
   24060:	andeq	r4, r2, r4, lsl #4
   24064:	andeq	r4, r2, r4, ror #4
   24068:	andeq	r4, r2, r4, lsl #4
   2406c:	andeq	r4, r2, r4, lsl #4
   24070:	strdeq	r4, [r2], -r0
   24074:	andeq	r4, r2, r4, lsl #4
   24078:	andeq	r4, r2, r4, lsl #4
   2407c:	andeq	r4, r2, r4, lsl #4
   24080:	strdeq	r4, [r2], -r0
   24084:	andeq	r4, r2, r4, lsl #4
   24088:	andeq	r4, r2, r4, lsl #4
   2408c:	andeq	r4, r2, r4, lsl #4
   24090:	andeq	r4, r2, r4, lsl #4
   24094:	andeq	r4, r2, r8, lsl r8
   24098:	ldrdeq	r4, [r2], -r8
   2409c:	andeq	r4, r2, r4, lsl #4
   240a0:	andeq	r4, r2, r4, lsl #4
   240a4:	andeq	r4, r2, r4, lsl #4
   240a8:	andeq	r4, r2, r4, lsl #4
   240ac:	andeq	r4, r2, r4, lsl #4
   240b0:	andeq	r4, r2, r4, lsl #4
   240b4:	andeq	r4, r2, r4, lsl #4
   240b8:	andeq	r4, r2, ip, ror #19
   240bc:	andeq	r4, r2, r4, asr #20
   240c0:	andeq	r4, r2, r4, lsl #4
   240c4:	andeq	r4, r2, r4, lsl #4
   240c8:	andeq	r4, r2, r4, lsl #4
   240cc:	andeq	r4, r2, r0, lsl r1
   240d0:	andeq	r4, r2, r4, lsl #4
   240d4:	andeq	r4, r2, r4, lsl #4
   240d8:	andeq	r4, r2, r4, lsl #4
   240dc:	andeq	r4, r2, ip, lsl r2
   240e0:	andeq	r4, r2, r4, lsl #4
   240e4:	andeq	r4, r2, r4, ror #4
   240e8:	andeq	r4, r2, r4, lsl #4
   240ec:	andeq	r4, r2, r4, lsl #4
   240f0:	andeq	r4, r2, r4, lsl #4
   240f4:	andeq	r4, r2, r4, lsl #4
   240f8:	andeq	r4, r2, r4, lsl #4
   240fc:	andeq	r4, r2, r4, lsl #4
   24100:	strdeq	r4, [r2], -r0
   24104:	andeq	r4, r2, r4, lsl #4
   24108:	andeq	r4, r2, r4, lsl #4
   2410c:	andeq	r4, r2, r0, lsr #20
   24110:	mvn	r0, #0
   24114:	mvn	r1, #0
   24118:	mov	r2, r5
   2411c:	mov	sl, r3
   24120:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   24124:	subs	r3, r0, r6
   24128:	mov	lr, #0
   2412c:	umull	r4, r2, r6, r5
   24130:	str	r1, [sp, #20]
   24134:	sbcs	r3, r1, r7
   24138:	mla	ip, r6, sl, r2
   2413c:	mov	r2, r1
   24140:	movwcc	lr, #1
   24144:	mla	r7, r7, r5, ip
   24148:	mov	r2, #0
   2414c:	cmp	lr, #0
   24150:	mvnne	r4, #0
   24154:	mvnne	r7, #0
   24158:	subs	r6, r0, r4
   2415c:	sbcs	r6, r1, r7
   24160:	movwcc	r2, #1
   24164:	umull	r3, r6, r4, r5
   24168:	cmp	r2, #0
   2416c:	str	r6, [sp, #16]
   24170:	mvnne	r3, #0
   24174:	cmp	r2, #0
   24178:	umull	r6, ip, r3, r5
   2417c:	mla	r1, r3, sl, ip
   24180:	ldr	ip, [sp, #16]
   24184:	str	r1, [sp, #12]
   24188:	mla	r4, r4, sl, ip
   2418c:	mla	r4, r7, r5, r4
   24190:	ldr	r7, [sp, #12]
   24194:	mvnne	r4, #0
   24198:	subs	r0, r0, r3
   2419c:	ldr	r0, [sp, #20]
   241a0:	mla	r7, r4, r5, r7
   241a4:	sbcs	r0, r0, r4
   241a8:	mov	r0, #0
   241ac:	movwcc	r0, #1
   241b0:	cmp	r0, #0
   241b4:	mov	r1, r0
   241b8:	orr	r0, lr, r2
   241bc:	mvnne	r7, #0
   241c0:	mvnne	r6, #0
   241c4:	b	24810 <__assert_fail@plt+0x124d8>
   241c8:	mov	r8, r0
   241cc:	cmp	sl, #0
   241d0:	bne	23e9c <__assert_fail@plt+0x11b64>
   241d4:	b	24a64 <__assert_fail@plt+0x1272c>
   241d8:	cmp	r0, #105	; 0x69
   241dc:	mov	r3, #0
   241e0:	bne	24024 <__assert_fail@plt+0x11cec>
   241e4:	ldrb	r0, [r1, #2]
   241e8:	mov	r1, #1
   241ec:	cmp	r0, #66	; 0x42
   241f0:	movweq	r1, #3
   241f4:	str	r1, [sp, #28]
   241f8:	sub	r0, r4, #66	; 0x42
   241fc:	cmp	r0, #53	; 0x35
   24200:	bls	24030 <__assert_fail@plt+0x11cf8>
   24204:	ldr	r0, [sp, #36]	; 0x24
   24208:	orr	r8, r8, #2
   2420c:	strd	r6, [r0]
   24210:	mov	r0, r8
   24214:	sub	sp, fp, #28
   24218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2421c:	mvn	r0, #0
   24220:	mvn	r1, #0
   24224:	mov	r2, r5
   24228:	mov	r4, r3
   2422c:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   24230:	subs	r0, r0, r6
   24234:	mov	r2, #0
   24238:	sbcs	r0, r1, r7
   2423c:	movwcc	r2, #1
   24240:	umull	r0, r1, r6, r5
   24244:	mla	r1, r6, r4, r1
   24248:	cmp	r2, #0
   2424c:	mov	r3, r2
   24250:	mla	r7, r7, r5, r1
   24254:	mvnne	r0, #0
   24258:	mvnne	r7, #0
   2425c:	mov	r6, r0
   24260:	b	24a44 <__assert_fail@plt+0x1270c>
   24264:	mvn	r0, #0
   24268:	mvn	r1, #0
   2426c:	mov	r2, r5
   24270:	str	r3, [sp, #24]
   24274:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   24278:	subs	r3, r0, r6
   2427c:	mov	ip, r0
   24280:	umull	r4, r0, r6, r5
   24284:	mov	sl, #0
   24288:	sbcs	r3, r1, r7
   2428c:	str	r0, [sp, #20]
   24290:	ldr	r0, [sp, #24]
   24294:	mov	r3, #0
   24298:	movwcc	r3, #1
   2429c:	cmp	r3, #0
   242a0:	mvnne	r4, #0
   242a4:	cmp	r3, #0
   242a8:	umull	lr, r2, r4, r5
   242ac:	mla	r2, r4, r0, r2
   242b0:	str	r2, [sp, #16]
   242b4:	ldr	r2, [sp, #20]
   242b8:	mla	r6, r6, r0, r2
   242bc:	ldr	r0, [sp, #16]
   242c0:	mla	r6, r7, r5, r6
   242c4:	mvnne	r6, #0
   242c8:	mla	r7, r6, r5, r0
   242cc:	subs	r0, ip, r4
   242d0:	sbcs	r0, r1, r6
   242d4:	movwcc	sl, #1
   242d8:	cmp	sl, #0
   242dc:	orr	r3, r3, sl
   242e0:	mvnne	lr, #0
   242e4:	mvnne	r7, #0
   242e8:	mov	r6, lr
   242ec:	b	24a44 <__assert_fail@plt+0x1270c>
   242f0:	mvn	r0, #0
   242f4:	mvn	r1, #0
   242f8:	mov	r2, r5
   242fc:	mov	sl, r3
   24300:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   24304:	subs	r3, r0, r6
   24308:	mov	ip, r1
   2430c:	umull	r2, lr, r6, r5
   24310:	str	r0, [sp, #20]
   24314:	sbcs	r3, r1, r7
   24318:	mov	r1, #0
   2431c:	mla	r6, r6, sl, lr
   24320:	mov	lr, #0
   24324:	str	ip, [sp, #16]
   24328:	movwcc	r1, #1
   2432c:	mla	r7, r7, r5, r6
   24330:	cmp	r1, #0
   24334:	mvnne	r2, #0
   24338:	cmp	r1, #0
   2433c:	umull	r3, r4, r2, r5
   24340:	mvnne	r7, #0
   24344:	mla	r4, r2, sl, r4
   24348:	subs	r2, r0, r2
   2434c:	sbcs	r2, ip, r7
   24350:	mla	r4, r7, r5, r4
   24354:	movwcc	lr, #1
   24358:	mov	r2, #0
   2435c:	cmp	lr, #0
   24360:	mvnne	r3, #0
   24364:	mvnne	r4, #0
   24368:	subs	r7, r0, r3
   2436c:	mov	r0, r5
   24370:	sbcs	r7, ip, r4
   24374:	movwcc	r2, #1
   24378:	umull	r5, r7, r3, r5
   2437c:	cmp	r2, #0
   24380:	mla	r3, r3, sl, r7
   24384:	mvnne	r5, #0
   24388:	mla	r3, r4, r0, r3
   2438c:	cmp	r2, #0
   24390:	umull	r6, ip, r5, r0
   24394:	mvnne	r3, #0
   24398:	mla	ip, r5, sl, ip
   2439c:	mla	r7, r3, r0, ip
   243a0:	ldr	r0, [sp, #20]
   243a4:	subs	r0, r0, r5
   243a8:	ldr	r0, [sp, #16]
   243ac:	sbcs	r0, r0, r3
   243b0:	mov	r0, #0
   243b4:	movwcc	r0, #1
   243b8:	cmp	r0, #0
   243bc:	mov	r3, r0
   243c0:	orr	r0, r1, lr
   243c4:	orr	r0, r0, r2
   243c8:	mvnne	r7, #0
   243cc:	mvnne	r6, #0
   243d0:	orr	r3, r0, r3
   243d4:	b	24a44 <__assert_fail@plt+0x1270c>
   243d8:	mvn	r0, #0
   243dc:	mvn	r1, #0
   243e0:	mov	r2, r5
   243e4:	mov	r4, r3
   243e8:	str	r3, [sp, #24]
   243ec:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   243f0:	umull	r3, r2, r6, r5
   243f4:	mla	r2, r6, r4, r2
   243f8:	subs	r6, r0, r6
   243fc:	sbcs	r6, r1, r7
   24400:	mla	r2, r7, r5, r2
   24404:	mov	r7, #0
   24408:	mov	r6, #0
   2440c:	movwcc	r6, #1
   24410:	cmp	r6, #0
   24414:	str	r6, [sp, #20]
   24418:	mvnne	r3, #0
   2441c:	mvnne	r2, #0
   24420:	subs	r4, r0, r3
   24424:	umull	r6, ip, r3, r5
   24428:	sbcs	r4, r1, r2
   2442c:	ldr	r4, [sp, #24]
   24430:	movwcc	r7, #1
   24434:	cmp	r7, #0
   24438:	mov	lr, r7
   2443c:	str	r7, [sp, #16]
   24440:	mvnne	r6, #0
   24444:	cmp	lr, #0
   24448:	mov	lr, #0
   2444c:	umull	sl, r7, r6, r5
   24450:	mla	r3, r3, r4, ip
   24454:	mla	r7, r6, r4, r7
   24458:	mov	r4, r0
   2445c:	mla	r2, r2, r5, r3
   24460:	mvnne	r2, #0
   24464:	subs	r3, r0, r6
   24468:	mov	r0, #0
   2446c:	mla	r7, r2, r5, r7
   24470:	sbcs	r2, r1, r2
   24474:	mov	r3, r4
   24478:	movwcc	r0, #1
   2447c:	str	r3, [sp, #4]
   24480:	cmp	r0, #0
   24484:	str	r0, [sp, #12]
   24488:	mov	r0, r1
   2448c:	mvnne	sl, #0
   24490:	mvnne	r7, #0
   24494:	str	r0, [sp, #8]
   24498:	subs	r2, r4, sl
   2449c:	ldr	r4, [sp, #24]
   244a0:	sbcs	r2, r1, r7
   244a4:	movwcc	lr, #1
   244a8:	umull	r6, r2, sl, r5
   244ac:	cmp	lr, #0
   244b0:	mvnne	r6, #0
   244b4:	mla	r2, sl, r4, r2
   244b8:	cmp	lr, #0
   244bc:	umull	r1, ip, r6, r5
   244c0:	mla	r2, r7, r5, r2
   244c4:	mla	ip, r6, r4, ip
   244c8:	mvnne	r2, #0
   244cc:	subs	r6, r3, r6
   244d0:	mla	r7, r2, r5, ip
   244d4:	sbcs	r2, r0, r2
   244d8:	mov	ip, #0
   244dc:	movwcc	ip, #1
   244e0:	mov	r2, #0
   244e4:	cmp	ip, #0
   244e8:	mvnne	r1, #0
   244ec:	mvnne	r7, #0
   244f0:	subs	r6, r3, r1
   244f4:	ldr	r3, [sp, #24]
   244f8:	sbcs	r6, r0, r7
   244fc:	umull	r0, sl, r1, r5
   24500:	movwcc	r2, #1
   24504:	cmp	r2, #0
   24508:	mvnne	r0, #0
   2450c:	mla	r1, r1, r3, sl
   24510:	cmp	r2, #0
   24514:	umull	r6, r4, r0, r5
   24518:	mla	r1, r7, r5, r1
   2451c:	mla	r4, r0, r3, r4
   24520:	ldr	r3, [sp, #4]
   24524:	mvnne	r1, #0
   24528:	mla	r7, r1, r5, r4
   2452c:	ldr	r5, [sp, #16]
   24530:	subs	r0, r3, r0
   24534:	ldr	r0, [sp, #8]
   24538:	sbcs	r0, r0, r1
   2453c:	mov	r0, #0
   24540:	movwcc	r0, #1
   24544:	cmp	r0, #0
   24548:	mov	r1, r0
   2454c:	ldr	r0, [sp, #20]
   24550:	mvnne	r7, #0
   24554:	mvnne	r6, #0
   24558:	orr	r0, r0, r5
   2455c:	ldr	r5, [sp, #12]
   24560:	orr	r0, r0, r5
   24564:	orr	r0, r0, lr
   24568:	orr	r0, r0, ip
   2456c:	orr	r0, r0, r2
   24570:	b	249e0 <__assert_fail@plt+0x126a8>
   24574:	mov	r1, #0
   24578:	lsl	r2, r7, #10
   2457c:	lsl	r0, r6, #10
   24580:	lsr	r3, r7, #22
   24584:	cmp	r1, r7, lsr #22
   24588:	orr	r2, r2, r6, lsr #22
   2458c:	mvnne	r0, #0
   24590:	movwne	r3, #1
   24594:	cmp	r1, r7, lsr #22
   24598:	b	24a10 <__assert_fail@plt+0x126d8>
   2459c:	mvn	r0, #0
   245a0:	mvn	r1, #0
   245a4:	mov	r2, r5
   245a8:	mov	sl, r3
   245ac:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   245b0:	subs	r2, r0, r6
   245b4:	mov	ip, r0
   245b8:	mov	r0, #0
   245bc:	sbcs	r2, r1, r7
   245c0:	movwcc	r0, #1
   245c4:	umull	r4, r2, r6, r5
   245c8:	cmp	r0, #0
   245cc:	mla	r2, r6, sl, r2
   245d0:	str	r0, [sp, #20]
   245d4:	mvnne	r4, #0
   245d8:	cmp	r0, #0
   245dc:	mla	r2, r7, r5, r2
   245e0:	mov	r0, #0
   245e4:	umull	lr, r3, r4, r5
   245e8:	mvnne	r2, #0
   245ec:	mla	r3, r4, sl, r3
   245f0:	mla	r6, r2, r5, r3
   245f4:	subs	r3, ip, r4
   245f8:	sbcs	r2, r1, r2
   245fc:	mov	r3, r1
   24600:	movwcc	r0, #1
   24604:	str	r3, [sp, #8]
   24608:	cmp	r0, #0
   2460c:	str	r0, [sp, #16]
   24610:	mov	r0, ip
   24614:	mvnne	lr, #0
   24618:	mvnne	r6, #0
   2461c:	str	r0, [sp, #12]
   24620:	subs	r2, ip, lr
   24624:	umull	r7, r4, lr, r5
   24628:	sbcs	r2, r1, r6
   2462c:	mla	r4, lr, sl, r4
   24630:	mov	r2, #0
   24634:	mla	r6, r6, r5, r4
   24638:	mov	r4, #0
   2463c:	movwcc	r2, #1
   24640:	cmp	r2, #0
   24644:	mvnne	r7, #0
   24648:	cmp	r2, #0
   2464c:	umull	r1, ip, r7, r5
   24650:	mvnne	r6, #0
   24654:	mla	ip, r7, sl, ip
   24658:	subs	r7, r0, r7
   2465c:	mla	lr, r6, r5, ip
   24660:	sbcs	r7, r3, r6
   24664:	mov	ip, #0
   24668:	movwcc	ip, #1
   2466c:	cmp	ip, #0
   24670:	mvnne	r1, #0
   24674:	mvnne	lr, #0
   24678:	subs	r7, r0, r1
   2467c:	sbcs	r7, r3, lr
   24680:	movwcc	r4, #1
   24684:	umull	r0, r7, r1, r5
   24688:	cmp	r4, #0
   2468c:	mla	r1, r1, sl, r7
   24690:	mvnne	r0, #0
   24694:	mla	r1, lr, r5, r1
   24698:	cmp	r4, #0
   2469c:	umull	r6, r3, r0, r5
   246a0:	mvnne	r1, #0
   246a4:	mla	r3, r0, sl, r3
   246a8:	mla	r7, r1, r5, r3
   246ac:	ldr	r3, [sp, #12]
   246b0:	subs	r0, r3, r0
   246b4:	ldr	r3, [sp, #16]
   246b8:	ldr	r0, [sp, #8]
   246bc:	sbcs	r0, r0, r1
   246c0:	mov	r0, #0
   246c4:	movwcc	r0, #1
   246c8:	cmp	r0, #0
   246cc:	mov	r1, r0
   246d0:	ldr	r0, [sp, #20]
   246d4:	mvnne	r7, #0
   246d8:	mvnne	r6, #0
   246dc:	orr	r0, r0, r3
   246e0:	orr	r0, r0, r2
   246e4:	orr	r0, r0, ip
   246e8:	orr	r0, r0, r4
   246ec:	b	24810 <__assert_fail@plt+0x124d8>
   246f0:	mvn	r0, #0
   246f4:	mvn	r1, #0
   246f8:	mov	r2, r5
   246fc:	mov	sl, r3
   24700:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   24704:	umull	r3, r2, r6, r5
   24708:	mov	lr, r1
   2470c:	mov	r1, r0
   24710:	mla	r2, r6, sl, r2
   24714:	subs	r6, r0, r6
   24718:	mov	r0, #0
   2471c:	sbcs	r6, lr, r7
   24720:	mla	r2, r7, r5, r2
   24724:	movwcc	r0, #1
   24728:	cmp	r0, #0
   2472c:	str	r0, [sp, #20]
   24730:	mov	r0, r1
   24734:	mvnne	r3, #0
   24738:	mvnne	r2, #0
   2473c:	str	r0, [sp, #16]
   24740:	subs	r4, r1, r3
   24744:	umull	r7, ip, r3, r5
   24748:	sbcs	r4, lr, r2
   2474c:	mla	r3, r3, sl, ip
   24750:	mov	ip, #0
   24754:	mov	r4, #0
   24758:	mla	r2, r2, r5, r3
   2475c:	movwcc	r4, #1
   24760:	cmp	r4, #0
   24764:	mvnne	r7, #0
   24768:	cmp	r4, #0
   2476c:	umull	r1, r6, r7, r5
   24770:	mvnne	r2, #0
   24774:	mla	r6, r7, sl, r6
   24778:	mla	r3, r2, r5, r6
   2477c:	subs	r6, r0, r7
   24780:	sbcs	r2, lr, r2
   24784:	movwcc	ip, #1
   24788:	mov	r2, #0
   2478c:	cmp	ip, #0
   24790:	mvnne	r1, #0
   24794:	mvnne	r3, #0
   24798:	subs	r6, r0, r1
   2479c:	sbcs	r6, lr, r3
   247a0:	movwcc	r2, #1
   247a4:	umull	r0, r6, r1, r5
   247a8:	cmp	r2, #0
   247ac:	str	r6, [sp, #12]
   247b0:	mvnne	r0, #0
   247b4:	cmp	r2, #0
   247b8:	umull	r6, r7, r0, r5
   247bc:	mla	r7, r0, sl, r7
   247c0:	str	r7, [sp, #8]
   247c4:	ldr	r7, [sp, #12]
   247c8:	mla	r1, r1, sl, r7
   247cc:	mla	r1, r3, r5, r1
   247d0:	ldr	r3, [sp, #8]
   247d4:	mvnne	r1, #0
   247d8:	mla	r7, r1, r5, r3
   247dc:	ldr	r3, [sp, #16]
   247e0:	subs	r0, r3, r0
   247e4:	sbcs	r0, lr, r1
   247e8:	mov	r0, #0
   247ec:	movwcc	r0, #1
   247f0:	cmp	r0, #0
   247f4:	mov	r1, r0
   247f8:	ldr	r0, [sp, #20]
   247fc:	mvnne	r7, #0
   24800:	mvnne	r6, #0
   24804:	orr	r0, r0, r4
   24808:	orr	r0, r0, ip
   2480c:	orr	r0, r0, r2
   24810:	orr	r3, r0, r1
   24814:	b	24a44 <__assert_fail@plt+0x1270c>
   24818:	mvn	r0, #0
   2481c:	mvn	r1, #0
   24820:	mov	r2, r5
   24824:	mov	sl, r3
   24828:	bl	25d70 <_obstack_memory_used@@Base+0x480>
   2482c:	mov	ip, r1
   24830:	subs	r1, r0, r6
   24834:	umull	r3, lr, r6, r5
   24838:	mov	r2, r5
   2483c:	sbcs	r1, ip, r7
   24840:	mla	r6, r6, sl, lr
   24844:	str	ip, [sp, #4]
   24848:	mov	r1, #0
   2484c:	mla	r7, r7, r2, r6
   24850:	movwcc	r1, #1
   24854:	cmp	r1, #0
   24858:	str	r1, [sp, #20]
   2485c:	mvnne	r3, #0
   24860:	cmp	r1, #0
   24864:	mov	r1, r0
   24868:	umull	r4, r5, r3, r5
   2486c:	mvnne	r7, #0
   24870:	mov	lr, r1
   24874:	mla	r5, r3, sl, r5
   24878:	subs	r3, r0, r3
   2487c:	sbcs	r0, ip, r7
   24880:	mla	r5, r7, r2, r5
   24884:	mov	r0, #0
   24888:	movwcc	r0, #1
   2488c:	cmp	r0, #0
   24890:	str	r0, [sp, #16]
   24894:	mvnne	r4, #0
   24898:	mvnne	r5, #0
   2489c:	subs	r0, r1, r4
   248a0:	mov	r1, #0
   248a4:	sbcs	r0, ip, r5
   248a8:	movwcc	r1, #1
   248ac:	umull	r3, r0, r4, r2
   248b0:	cmp	r1, #0
   248b4:	mla	r0, r4, sl, r0
   248b8:	mov	r4, lr
   248bc:	str	r1, [sp, #12]
   248c0:	mvnne	r3, #0
   248c4:	mla	r0, r5, r2, r0
   248c8:	cmp	r1, #0
   248cc:	str	r4, [sp]
   248d0:	umull	r7, r6, r3, r2
   248d4:	mvnne	r0, #0
   248d8:	mla	r6, r3, sl, r6
   248dc:	subs	r3, lr, r3
   248e0:	mla	r5, r0, r2, r6
   248e4:	sbcs	r0, ip, r0
   248e8:	mov	r3, #0
   248ec:	mov	r0, #0
   248f0:	movwcc	r0, #1
   248f4:	cmp	r0, #0
   248f8:	str	r0, [sp, #8]
   248fc:	mvnne	r7, #0
   24900:	mvnne	r5, #0
   24904:	subs	r0, lr, r7
   24908:	sbcs	r0, ip, r5
   2490c:	movwcc	r3, #1
   24910:	umull	r6, r0, r7, r2
   24914:	cmp	r3, #0
   24918:	mla	r7, r7, sl, r0
   2491c:	mov	r0, ip
   24920:	mvnne	r6, #0
   24924:	mla	r7, r5, r2, r7
   24928:	cmp	r3, #0
   2492c:	mov	r5, #0
   24930:	umull	r1, lr, r6, r2
   24934:	mvnne	r7, #0
   24938:	mla	lr, r6, sl, lr
   2493c:	subs	r6, r4, r6
   24940:	mla	lr, r7, r2, lr
   24944:	sbcs	r7, ip, r7
   24948:	mov	ip, #0
   2494c:	movwcc	ip, #1
   24950:	cmp	ip, #0
   24954:	mvnne	r1, #0
   24958:	mvnne	lr, #0
   2495c:	subs	r7, r4, r1
   24960:	sbcs	r7, r0, lr
   24964:	movwcc	r5, #1
   24968:	umull	r0, r7, r1, r2
   2496c:	cmp	r5, #0
   24970:	mla	r1, r1, sl, r7
   24974:	mvnne	r0, #0
   24978:	mla	r1, lr, r2, r1
   2497c:	cmp	r5, #0
   24980:	umull	r6, r4, r0, r2
   24984:	mvnne	r1, #0
   24988:	mla	r4, r0, sl, r4
   2498c:	mla	r7, r1, r2, r4
   24990:	ldr	r2, [sp]
   24994:	subs	r0, r2, r0
   24998:	ldr	r2, [sp, #16]
   2499c:	ldr	r0, [sp, #4]
   249a0:	sbcs	r0, r0, r1
   249a4:	mov	r0, #0
   249a8:	movwcc	r0, #1
   249ac:	cmp	r0, #0
   249b0:	mov	r1, r0
   249b4:	ldr	r0, [sp, #20]
   249b8:	mvnne	r7, #0
   249bc:	mvnne	r6, #0
   249c0:	orr	r0, r0, r2
   249c4:	ldr	r2, [sp, #12]
   249c8:	orr	r0, r0, r2
   249cc:	ldr	r2, [sp, #8]
   249d0:	orr	r0, r0, r2
   249d4:	orr	r0, r0, r3
   249d8:	orr	r0, r0, ip
   249dc:	orr	r0, r0, r5
   249e0:	orr	r0, r0, r1
   249e4:	and	r3, r0, #1
   249e8:	b	24a44 <__assert_fail@plt+0x1270c>
   249ec:	mov	r1, #0
   249f0:	lsl	r2, r7, #9
   249f4:	lsl	r0, r6, #9
   249f8:	lsr	r3, r7, #23
   249fc:	cmp	r1, r7, lsr #23
   24a00:	orr	r2, r2, r6, lsr #23
   24a04:	mvnne	r0, #0
   24a08:	movwne	r3, #1
   24a0c:	cmp	r1, r7, lsr #23
   24a10:	mvnne	r2, #0
   24a14:	mov	r6, r0
   24a18:	mov	r7, r2
   24a1c:	b	24a44 <__assert_fail@plt+0x1270c>
   24a20:	lsl	r1, r7, #1
   24a24:	lsl	r0, r6, #1
   24a28:	cmp	r7, #0
   24a2c:	lsr	r3, r7, #31
   24a30:	orr	r1, r1, r6, lsr #31
   24a34:	mvnlt	r0, #0
   24a38:	mvnlt	r1, #0
   24a3c:	mov	r6, r0
   24a40:	mov	r7, r1
   24a44:	ldr	r1, [sp, #32]
   24a48:	ldr	r2, [sp, #28]
   24a4c:	orr	r8, r3, r8
   24a50:	add	r0, r1, r2
   24a54:	str	r0, [r9]
   24a58:	ldrb	r0, [r1, r2]
   24a5c:	cmp	r0, #0
   24a60:	orrne	r8, r8, #2
   24a64:	ldr	r0, [sp, #36]	; 0x24
   24a68:	strd	r6, [r0]
   24a6c:	mov	r0, r8
   24a70:	sub	sp, fp, #28
   24a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a78:	movw	r0, #34216	; 0x85a8
   24a7c:	movw	r1, #34254	; 0x85ce
   24a80:	movw	r3, #34270	; 0x85de
   24a84:	mov	r2, #85	; 0x55
   24a88:	movt	r0, #2
   24a8c:	movt	r1, #2
   24a90:	movt	r3, #2
   24a94:	bl	12338 <__assert_fail@plt>
   24a98:	clz	r2, r1
   24a9c:	clz	r3, r0
   24aa0:	lsr	r2, r2, #5
   24aa4:	lsr	r3, r3, #5
   24aa8:	orrs	r2, r3, r2
   24aac:	movwne	r1, #1
   24ab0:	movwne	r0, #1
   24ab4:	cmp	r1, #0
   24ab8:	beq	24ae8 <__assert_fail@plt+0x127b0>
   24abc:	mvn	r2, #-2147483648	; 0x80000000
   24ac0:	udiv	r2, r2, r1
   24ac4:	cmp	r2, r0
   24ac8:	bcs	24ae8 <__assert_fail@plt+0x127b0>
   24acc:	push	{fp, lr}
   24ad0:	mov	fp, sp
   24ad4:	bl	12164 <__errno_location@plt>
   24ad8:	mov	r1, #12
   24adc:	str	r1, [r0]
   24ae0:	mov	r0, #0
   24ae4:	pop	{fp, pc}
   24ae8:	b	11e04 <calloc@plt>
   24aec:	cmp	r0, #0
   24af0:	movweq	r0, #1
   24af4:	cmn	r0, #1
   24af8:	ble	24b00 <__assert_fail@plt+0x127c8>
   24afc:	b	120c8 <malloc@plt>
   24b00:	push	{fp, lr}
   24b04:	mov	fp, sp
   24b08:	bl	12164 <__errno_location@plt>
   24b0c:	mov	r1, #12
   24b10:	str	r1, [r0]
   24b14:	mov	r0, #0
   24b18:	pop	{fp, pc}
   24b1c:	push	{fp, lr}
   24b20:	mov	fp, sp
   24b24:	cmp	r0, #0
   24b28:	beq	24b44 <__assert_fail@plt+0x1280c>
   24b2c:	cmp	r1, #0
   24b30:	beq	24b50 <__assert_fail@plt+0x12818>
   24b34:	cmn	r1, #1
   24b38:	ble	24b5c <__assert_fail@plt+0x12824>
   24b3c:	pop	{fp, lr}
   24b40:	b	11f9c <realloc@plt>
   24b44:	mov	r0, r1
   24b48:	pop	{fp, lr}
   24b4c:	b	24aec <__assert_fail@plt+0x127b4>
   24b50:	bl	1d88c <__assert_fail@plt+0xb554>
   24b54:	mov	r0, #0
   24b58:	pop	{fp, pc}
   24b5c:	bl	12164 <__errno_location@plt>
   24b60:	mov	r1, #12
   24b64:	str	r1, [r0]
   24b68:	mov	r0, #0
   24b6c:	pop	{fp, pc}
   24b70:	sub	r2, r0, #65	; 0x41
   24b74:	mov	r1, r0
   24b78:	mov	r0, #1
   24b7c:	cmp	r2, #26
   24b80:	subcs	r2, r1, #97	; 0x61
   24b84:	cmpcs	r2, #26
   24b88:	bcs	24b90 <__assert_fail@plt+0x12858>
   24b8c:	bx	lr
   24b90:	sub	r1, r1, #48	; 0x30
   24b94:	cmp	r1, #10
   24b98:	movcs	r0, #0
   24b9c:	bx	lr
   24ba0:	sub	r2, r0, #65	; 0x41
   24ba4:	mov	r1, r0
   24ba8:	mov	r0, #1
   24bac:	cmp	r2, #26
   24bb0:	subcs	r1, r1, #97	; 0x61
   24bb4:	cmpcs	r1, #26
   24bb8:	movcs	r0, #0
   24bbc:	bx	lr
   24bc0:	mov	r1, #0
   24bc4:	cmp	r0, #128	; 0x80
   24bc8:	movwcc	r1, #1
   24bcc:	mov	r0, r1
   24bd0:	bx	lr
   24bd4:	sub	r1, r0, #9
   24bd8:	sub	r0, r0, #32
   24bdc:	clz	r1, r1
   24be0:	clz	r0, r0
   24be4:	lsr	r1, r1, #5
   24be8:	lsr	r0, r0, #5
   24bec:	orr	r0, r0, r1
   24bf0:	bx	lr
   24bf4:	mov	r1, r0
   24bf8:	mov	r0, #1
   24bfc:	cmp	r1, #32
   24c00:	bxcc	lr
   24c04:	cmp	r1, #127	; 0x7f
   24c08:	movne	r0, #0
   24c0c:	bx	lr
   24c10:	sub	r1, r0, #48	; 0x30
   24c14:	mov	r0, #0
   24c18:	cmp	r1, #10
   24c1c:	movwcc	r0, #1
   24c20:	bx	lr
   24c24:	sub	r1, r0, #33	; 0x21
   24c28:	mov	r0, #0
   24c2c:	cmp	r1, #94	; 0x5e
   24c30:	movwcc	r0, #1
   24c34:	bx	lr
   24c38:	sub	r1, r0, #97	; 0x61
   24c3c:	mov	r0, #0
   24c40:	cmp	r1, #26
   24c44:	movwcc	r0, #1
   24c48:	bx	lr
   24c4c:	sub	r1, r0, #32
   24c50:	mov	r0, #0
   24c54:	cmp	r1, #95	; 0x5f
   24c58:	movwcc	r0, #1
   24c5c:	bx	lr
   24c60:	sub	r1, r0, #33	; 0x21
   24c64:	cmp	r1, #93	; 0x5d
   24c68:	bhi	24df4 <__assert_fail@plt+0x12abc>
   24c6c:	add	r2, pc, #4
   24c70:	mov	r0, #1
   24c74:	ldr	pc, [r2, r1, lsl #2]
   24c78:	strdeq	r4, [r2], -r0
   24c7c:	strdeq	r4, [r2], -r0
   24c80:	strdeq	r4, [r2], -r0
   24c84:	strdeq	r4, [r2], -r0
   24c88:	strdeq	r4, [r2], -r0
   24c8c:	strdeq	r4, [r2], -r0
   24c90:	strdeq	r4, [r2], -r0
   24c94:	strdeq	r4, [r2], -r0
   24c98:	strdeq	r4, [r2], -r0
   24c9c:	strdeq	r4, [r2], -r0
   24ca0:	strdeq	r4, [r2], -r0
   24ca4:	strdeq	r4, [r2], -r0
   24ca8:	strdeq	r4, [r2], -r0
   24cac:	strdeq	r4, [r2], -r0
   24cb0:	strdeq	r4, [r2], -r0
   24cb4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cb8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cbc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cc0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cc4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cc8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24ccc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cd0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cd4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cd8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cdc:	strdeq	r4, [r2], -r0
   24ce0:	strdeq	r4, [r2], -r0
   24ce4:	strdeq	r4, [r2], -r0
   24ce8:	strdeq	r4, [r2], -r0
   24cec:	strdeq	r4, [r2], -r0
   24cf0:	strdeq	r4, [r2], -r0
   24cf4:	strdeq	r4, [r2], -r0
   24cf8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24cfc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d00:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d04:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d08:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d0c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d10:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d14:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d18:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d1c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d20:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d24:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d28:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d2c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d30:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d34:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d38:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d3c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d40:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d44:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d48:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d4c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d50:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d54:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d58:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d5c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d60:	strdeq	r4, [r2], -r0
   24d64:	strdeq	r4, [r2], -r0
   24d68:	strdeq	r4, [r2], -r0
   24d6c:	strdeq	r4, [r2], -r0
   24d70:	strdeq	r4, [r2], -r0
   24d74:	strdeq	r4, [r2], -r0
   24d78:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d7c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d80:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d84:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d88:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d8c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d90:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d94:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d98:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24d9c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24da0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24da4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24da8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dac:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24db0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24db4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24db8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dbc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dc0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dc4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dc8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dcc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dd0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dd4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24dd8:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24ddc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24de0:	strdeq	r4, [r2], -r0
   24de4:	strdeq	r4, [r2], -r0
   24de8:	strdeq	r4, [r2], -r0
   24dec:	strdeq	r4, [r2], -r0
   24df0:	bx	lr
   24df4:	mov	r0, #0
   24df8:	bx	lr
   24dfc:	sub	r0, r0, #9
   24e00:	cmp	r0, #23
   24e04:	movhi	r0, #0
   24e08:	bxhi	lr
   24e0c:	movw	r1, #31
   24e10:	bic	r0, r0, #-16777216	; 0xff000000
   24e14:	mov	r2, #1
   24e18:	movt	r1, #128	; 0x80
   24e1c:	and	r0, r2, r1, lsr r0
   24e20:	bx	lr
   24e24:	sub	r1, r0, #65	; 0x41
   24e28:	mov	r0, #0
   24e2c:	cmp	r1, #26
   24e30:	movwcc	r0, #1
   24e34:	bx	lr
   24e38:	sub	r2, r0, #48	; 0x30
   24e3c:	mov	r1, r0
   24e40:	mov	r0, #1
   24e44:	cmp	r2, #22
   24e48:	bhi	24e60 <__assert_fail@plt+0x12b28>
   24e4c:	movw	r3, #1023	; 0x3ff
   24e50:	mov	ip, #1
   24e54:	movt	r3, #126	; 0x7e
   24e58:	tst	r3, ip, lsl r2
   24e5c:	bxne	lr
   24e60:	sub	r1, r1, #97	; 0x61
   24e64:	cmp	r1, #6
   24e68:	movcs	r0, #0
   24e6c:	bxcs	lr
   24e70:	bx	lr
   24e74:	sub	r1, r0, #65	; 0x41
   24e78:	cmp	r1, #26
   24e7c:	addcc	r0, r0, #32
   24e80:	bx	lr
   24e84:	sub	r1, r0, #97	; 0x61
   24e88:	cmp	r1, #26
   24e8c:	subcc	r0, r0, #32
   24e90:	bx	lr
   24e94:	push	{r4, r5, r6, sl, fp, lr}
   24e98:	add	fp, sp, #16
   24e9c:	mov	r4, r0
   24ea0:	bl	12068 <__fpending@plt>
   24ea4:	ldr	r6, [r4]
   24ea8:	mov	r5, r0
   24eac:	mov	r0, r4
   24eb0:	bl	1d2d4 <__assert_fail@plt+0xaf9c>
   24eb4:	tst	r6, #32
   24eb8:	bne	24ef0 <__assert_fail@plt+0x12bb8>
   24ebc:	cmp	r0, #0
   24ec0:	mov	r4, r0
   24ec4:	mvnne	r4, #0
   24ec8:	cmp	r5, #0
   24ecc:	bne	24efc <__assert_fail@plt+0x12bc4>
   24ed0:	cmp	r0, #0
   24ed4:	beq	24efc <__assert_fail@plt+0x12bc4>
   24ed8:	bl	12164 <__errno_location@plt>
   24edc:	ldr	r0, [r0]
   24ee0:	subs	r4, r0, #9
   24ee4:	mvnne	r4, #0
   24ee8:	mov	r0, r4
   24eec:	pop	{r4, r5, r6, sl, fp, pc}
   24ef0:	mvn	r4, #0
   24ef4:	cmp	r0, #0
   24ef8:	beq	24f04 <__assert_fail@plt+0x12bcc>
   24efc:	mov	r0, r4
   24f00:	pop	{r4, r5, r6, sl, fp, pc}
   24f04:	bl	12164 <__errno_location@plt>
   24f08:	mov	r1, #0
   24f0c:	str	r1, [r0]
   24f10:	mov	r0, r4
   24f14:	pop	{r4, r5, r6, sl, fp, pc}
   24f18:	vldr	d16, [pc, #184]	; 24fd8 <__assert_fail@plt+0x12ca0>
   24f1c:	vcmpe.f64	d0, d16
   24f20:	vmrs	APSR_nzcv, fpscr
   24f24:	ble	24fb0 <__assert_fail@plt+0x12c78>
   24f28:	vldr	d16, [pc, #176]	; 24fe0 <__assert_fail@plt+0x12ca8>
   24f2c:	movw	ip, #51712	; 0xca00
   24f30:	movt	ip, #15258	; 0x3b9a
   24f34:	vcmpe.f64	d0, d16
   24f38:	vmrs	APSR_nzcv, fpscr
   24f3c:	bpl	24fc4 <__assert_fail@plt+0x12c8c>
   24f40:	push	{fp, lr}
   24f44:	mov	fp, sp
   24f48:	vldr	d16, [pc, #152]	; 24fe8 <__assert_fail@plt+0x12cb0>
   24f4c:	vcvt.s32.f64	s2, d0
   24f50:	movw	r1, #12193	; 0x2fa1
   24f54:	vcvt.f64.s32	d17, s2
   24f58:	movt	r1, #17592	; 0x44b8
   24f5c:	vmov	lr, s2
   24f60:	vsub.f64	d17, d0, d17
   24f64:	vmul.f64	d16, d17, d16
   24f68:	vcvt.s32.f64	s0, d16
   24f6c:	vcvt.f64.s32	d17, s0
   24f70:	vmov	r2, s0
   24f74:	vcmpe.f64	d16, d17
   24f78:	vmrs	APSR_nzcv, fpscr
   24f7c:	addgt	r2, r2, #1
   24f80:	smmul	r1, r2, r1
   24f84:	asr	r3, r1, #28
   24f88:	add	r1, r3, r1, lsr #31
   24f8c:	mls	r2, r1, ip, r2
   24f90:	add	r1, r1, lr
   24f94:	cmp	r2, #0
   24f98:	add	r3, r1, r2, asr #31
   24f9c:	addlt	r2, r2, ip
   24fa0:	pop	{fp, lr}
   24fa4:	str	r3, [r0]
   24fa8:	str	r2, [r0, #4]
   24fac:	bx	lr
   24fb0:	mov	r2, #0
   24fb4:	mov	r3, #-2147483648	; 0x80000000
   24fb8:	str	r3, [r0]
   24fbc:	str	r2, [r0, #4]
   24fc0:	bx	lr
   24fc4:	sub	r2, ip, #1
   24fc8:	mvn	r3, #-2147483648	; 0x80000000
   24fcc:	str	r3, [r0]
   24fd0:	str	r2, [r0, #4]
   24fd4:	bx	lr
   24fd8:	andeq	r0, r0, r0
   24fdc:	mvngt	r0, r0
   24fe0:	andeq	r0, r0, r0
   24fe4:	mvnmi	r0, r0
   24fe8:	andeq	r0, r0, r0
   24fec:	bicmi	ip, sp, r5, ror #26
   24ff0:	sub	sp, sp, #8
   24ff4:	push	{r4, r5, r6, r7, fp, lr}
   24ff8:	add	fp, sp, #16
   24ffc:	sub	sp, sp, #8
   25000:	mov	r5, r0
   25004:	add	r0, fp, #8
   25008:	cmp	r1, #11
   2500c:	str	r3, [fp, #12]
   25010:	str	r2, [fp, #8]
   25014:	str	r0, [sp, #4]
   25018:	bhi	25054 <__assert_fail@plt+0x12d1c>
   2501c:	mov	r0, #1
   25020:	movw	r2, #1300	; 0x514
   25024:	tst	r2, r0, lsl r1
   25028:	bne	25114 <__assert_fail@plt+0x12ddc>
   2502c:	movw	r2, #2570	; 0xa0a
   25030:	tst	r2, r0, lsl r1
   25034:	bne	2507c <__assert_fail@plt+0x12d44>
   25038:	cmp	r1, #0
   2503c:	bne	25054 <__assert_fail@plt+0x12d1c>
   25040:	ldr	r0, [sp, #4]
   25044:	add	r1, r0, #4
   25048:	str	r1, [sp, #4]
   2504c:	mov	r1, #0
   25050:	b	25120 <__assert_fail@plt+0x12de8>
   25054:	sub	r0, r1, #1024	; 0x400
   25058:	cmp	r0, #10
   2505c:	bhi	25114 <__assert_fail@plt+0x12ddc>
   25060:	mov	r2, #1
   25064:	movw	r3, #645	; 0x285
   25068:	tst	r3, r2, lsl r0
   2506c:	bne	25114 <__assert_fail@plt+0x12ddc>
   25070:	movw	r3, #1282	; 0x502
   25074:	tst	r3, r2, lsl r0
   25078:	beq	25088 <__assert_fail@plt+0x12d50>
   2507c:	mov	r0, r5
   25080:	bl	12200 <fcntl64@plt>
   25084:	b	2512c <__assert_fail@plt+0x12df4>
   25088:	cmp	r0, #6
   2508c:	bne	25114 <__assert_fail@plt+0x12ddc>
   25090:	ldr	r0, [sp, #4]
   25094:	movw	r7, #39416	; 0x99f8
   25098:	movt	r7, #3
   2509c:	add	r1, r0, #4
   250a0:	str	r1, [sp, #4]
   250a4:	ldr	r6, [r0]
   250a8:	ldr	r0, [r7]
   250ac:	cmp	r0, #0
   250b0:	blt	25150 <__assert_fail@plt+0x12e18>
   250b4:	mov	r0, r5
   250b8:	movw	r1, #1030	; 0x406
   250bc:	mov	r2, r6
   250c0:	bl	12200 <fcntl64@plt>
   250c4:	mov	r4, r0
   250c8:	cmn	r0, #1
   250cc:	bgt	25144 <__assert_fail@plt+0x12e0c>
   250d0:	bl	12164 <__errno_location@plt>
   250d4:	ldr	r0, [r0]
   250d8:	cmp	r0, #22
   250dc:	bne	25144 <__assert_fail@plt+0x12e0c>
   250e0:	mov	r0, r5
   250e4:	mov	r1, #0
   250e8:	mov	r2, r6
   250ec:	bl	12200 <fcntl64@plt>
   250f0:	mov	r4, r0
   250f4:	cmp	r0, #0
   250f8:	blt	25130 <__assert_fail@plt+0x12df8>
   250fc:	mvn	r0, #0
   25100:	str	r0, [r7]
   25104:	mov	r0, #1
   25108:	cmp	r0, #0
   2510c:	bne	2517c <__assert_fail@plt+0x12e44>
   25110:	b	25130 <__assert_fail@plt+0x12df8>
   25114:	ldr	r0, [sp, #4]
   25118:	add	r2, r0, #4
   2511c:	str	r2, [sp, #4]
   25120:	ldr	r2, [r0]
   25124:	mov	r0, r5
   25128:	bl	12200 <fcntl64@plt>
   2512c:	mov	r4, r0
   25130:	mov	r0, r4
   25134:	sub	sp, fp, #16
   25138:	pop	{r4, r5, r6, r7, fp, lr}
   2513c:	add	sp, sp, #8
   25140:	bx	lr
   25144:	mov	r0, #1
   25148:	str	r0, [r7]
   2514c:	b	25130 <__assert_fail@plt+0x12df8>
   25150:	mov	r0, r5
   25154:	mov	r1, #0
   25158:	mov	r2, r6
   2515c:	bl	12200 <fcntl64@plt>
   25160:	mov	r4, r0
   25164:	ldr	r0, [r7]
   25168:	add	r0, r0, #1
   2516c:	clz	r0, r0
   25170:	lsr	r0, r0, #5
   25174:	cmp	r0, #0
   25178:	beq	25130 <__assert_fail@plt+0x12df8>
   2517c:	cmp	r4, #0
   25180:	blt	25130 <__assert_fail@plt+0x12df8>
   25184:	mov	r0, r4
   25188:	mov	r1, #1
   2518c:	bl	12200 <fcntl64@plt>
   25190:	cmp	r0, #0
   25194:	blt	251b0 <__assert_fail@plt+0x12e78>
   25198:	orr	r2, r0, #1
   2519c:	mov	r0, r4
   251a0:	mov	r1, #2
   251a4:	bl	12200 <fcntl64@plt>
   251a8:	cmn	r0, #1
   251ac:	bne	25130 <__assert_fail@plt+0x12df8>
   251b0:	bl	12164 <__errno_location@plt>
   251b4:	ldr	r6, [r0]
   251b8:	mov	r5, r0
   251bc:	mov	r0, r4
   251c0:	bl	12320 <close@plt>
   251c4:	str	r6, [r5]
   251c8:	mvn	r4, #0
   251cc:	b	25130 <__assert_fail@plt+0x12df8>
   251d0:	push	{r4, r5, r6, r7, fp, lr}
   251d4:	add	fp, sp, #16
   251d8:	mov	r4, r0
   251dc:	cmp	r0, #2
   251e0:	movhi	r0, r4
   251e4:	pophi	{r4, r5, r6, r7, fp, pc}
   251e8:	mov	r0, r4
   251ec:	bl	25214 <__assert_fail@plt+0x12edc>
   251f0:	mov	r5, r0
   251f4:	bl	12164 <__errno_location@plt>
   251f8:	ldr	r7, [r0]
   251fc:	mov	r6, r0
   25200:	mov	r0, r4
   25204:	bl	12320 <close@plt>
   25208:	mov	r0, r5
   2520c:	str	r7, [r6]
   25210:	pop	{r4, r5, r6, r7, fp, pc}
   25214:	lsl	r1, r1, #12
   25218:	movw	r2, #1030	; 0x406
   2521c:	and	r1, r2, r1, asr #31
   25220:	mov	r2, #3
   25224:	b	24ff0 <__assert_fail@plt+0x12cb8>
   25228:	push	{r4, r5, r6, r7, fp, lr}
   2522c:	add	fp, sp, #16
   25230:	mov	r5, r1
   25234:	bl	12284 <fopen64@plt>
   25238:	mov	r4, #0
   2523c:	cmp	r0, #0
   25240:	beq	25290 <__assert_fail@plt+0x12f58>
   25244:	mov	r6, r0
   25248:	bl	121b8 <fileno@plt>
   2524c:	cmp	r0, #2
   25250:	movhi	r0, r6
   25254:	pophi	{r4, r5, r6, r7, fp, pc}
   25258:	bl	259a4 <_obstack_memory_used@@Base+0xb4>
   2525c:	cmn	r0, #1
   25260:	ble	252bc <__assert_fail@plt+0x12f84>
   25264:	mov	r7, r0
   25268:	mov	r0, r6
   2526c:	bl	1d2d4 <__assert_fail@plt+0xaf9c>
   25270:	cmp	r0, #0
   25274:	bne	25298 <__assert_fail@plt+0x12f60>
   25278:	mov	r0, r7
   2527c:	mov	r1, r5
   25280:	bl	11df8 <fdopen@plt>
   25284:	mov	r4, r0
   25288:	cmp	r0, #0
   2528c:	beq	25298 <__assert_fail@plt+0x12f60>
   25290:	mov	r0, r4
   25294:	pop	{r4, r5, r6, r7, fp, pc}
   25298:	bl	12164 <__errno_location@plt>
   2529c:	ldr	r5, [r0]
   252a0:	mov	r4, r0
   252a4:	mov	r0, r7
   252a8:	bl	12320 <close@plt>
   252ac:	str	r5, [r4]
   252b0:	mov	r4, #0
   252b4:	mov	r0, r4
   252b8:	pop	{r4, r5, r6, r7, fp, pc}
   252bc:	bl	12164 <__errno_location@plt>
   252c0:	ldr	r7, [r0]
   252c4:	mov	r5, r0
   252c8:	mov	r0, r6
   252cc:	bl	1d2d4 <__assert_fail@plt+0xaf9c>
   252d0:	mov	r0, r4
   252d4:	str	r7, [r5]
   252d8:	pop	{r4, r5, r6, r7, fp, pc}
   252dc:	push	{fp, lr}
   252e0:	mov	fp, sp
   252e4:	mov	r0, #14
   252e8:	bl	12260 <nl_langinfo@plt>
   252ec:	movw	r1, #24692	; 0x6074
   252f0:	cmp	r0, #0
   252f4:	movt	r1, #2
   252f8:	movne	r1, r0
   252fc:	movw	r0, #34349	; 0x862d
   25300:	ldrb	r2, [r1]
   25304:	movt	r0, #2
   25308:	cmp	r2, #0
   2530c:	movne	r0, r1
   25310:	pop	{fp, pc}
   25314:	push	{r4, r5, r6, r7, fp, lr}
   25318:	add	fp, sp, #16
   2531c:	sub	sp, sp, #8
   25320:	add	r5, sp, #4
   25324:	cmp	r0, #0
   25328:	mov	r7, r2
   2532c:	mov	r4, r1
   25330:	movne	r5, r0
   25334:	mov	r0, r5
   25338:	bl	12074 <mbrtowc@plt>
   2533c:	mov	r6, r0
   25340:	cmp	r7, #0
   25344:	beq	25368 <__assert_fail@plt+0x13030>
   25348:	cmn	r6, #2
   2534c:	bcc	25368 <__assert_fail@plt+0x13030>
   25350:	mov	r0, #0
   25354:	bl	1d958 <__assert_fail@plt+0xb620>
   25358:	cmp	r0, #0
   2535c:	ldrbeq	r0, [r4]
   25360:	moveq	r6, #1
   25364:	streq	r0, [r5]
   25368:	mov	r0, r6
   2536c:	sub	sp, fp, #16
   25370:	pop	{r4, r5, r6, r7, fp, pc}
   25374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25378:	add	fp, sp, #28
   2537c:	sub	sp, sp, #28
   25380:	mov	r4, r3
   25384:	mov	r6, r2
   25388:	mov	r5, r1
   2538c:	mov	r7, r0
   25390:	cmp	r1, r3
   25394:	bne	253b0 <__assert_fail@plt+0x13078>
   25398:	mov	r0, r7
   2539c:	mov	r1, r6
   253a0:	mov	r2, r5
   253a4:	bl	11f3c <memcmp@plt>
   253a8:	cmp	r0, #0
   253ac:	beq	25478 <__assert_fail@plt+0x13140>
   253b0:	ldrb	r0, [r6, r4]
   253b4:	mov	r9, #0
   253b8:	str	r4, [sp, #24]
   253bc:	add	r8, r4, #1
   253c0:	str	r5, [sp, #16]
   253c4:	add	sl, r5, #1
   253c8:	str	r0, [sp, #8]
   253cc:	ldrb	r0, [r7, r5]
   253d0:	strb	r9, [r7, r5]
   253d4:	strb	r9, [r6, r4]
   253d8:	str	r0, [sp, #4]
   253dc:	bl	12164 <__errno_location@plt>
   253e0:	mov	r4, r7
   253e4:	mov	r5, r0
   253e8:	mov	r7, r6
   253ec:	str	r6, [sp, #20]
   253f0:	str	r4, [sp, #12]
   253f4:	mov	r0, r4
   253f8:	mov	r1, r7
   253fc:	str	r9, [r5]
   25400:	bl	12098 <strcoll@plt>
   25404:	cmp	r0, #0
   25408:	bne	25458 <__assert_fail@plt+0x13120>
   2540c:	mov	r0, r4
   25410:	bl	12140 <strlen@plt>
   25414:	add	r6, r0, #1
   25418:	mov	r0, r7
   2541c:	sub	sl, sl, r6
   25420:	bl	12140 <strlen@plt>
   25424:	add	r0, r0, #1
   25428:	cmp	sl, #0
   2542c:	sub	r8, r8, r0
   25430:	beq	2544c <__assert_fail@plt+0x13114>
   25434:	add	r4, r4, r6
   25438:	add	r7, r7, r0
   2543c:	cmp	r8, #0
   25440:	bne	253f4 <__assert_fail@plt+0x130bc>
   25444:	mov	r0, #1
   25448:	b	25458 <__assert_fail@plt+0x13120>
   2544c:	cmp	r8, #0
   25450:	mvnne	r8, #0
   25454:	mov	r0, r8
   25458:	ldr	r1, [sp, #24]
   2545c:	ldr	r2, [sp, #20]
   25460:	ldr	r3, [sp, #16]
   25464:	ldmib	sp, {r5, r6, r7}
   25468:	strb	r5, [r7, r3]
   2546c:	strb	r6, [r2, r1]
   25470:	sub	sp, fp, #28
   25474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25478:	bl	12164 <__errno_location@plt>
   2547c:	mov	r1, r0
   25480:	mov	r0, #0
   25484:	str	r0, [r1]
   25488:	sub	sp, fp, #28
   2548c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25494:	add	fp, sp, #28
   25498:	sub	sp, sp, #4
   2549c:	mov	sl, r3
   254a0:	mov	r5, r2
   254a4:	mov	r6, r1
   254a8:	mov	r7, r0
   254ac:	cmp	r1, r3
   254b0:	bne	254cc <__assert_fail@plt+0x13194>
   254b4:	mov	r0, r7
   254b8:	mov	r1, r5
   254bc:	mov	r2, r6
   254c0:	bl	11f3c <memcmp@plt>
   254c4:	cmp	r0, #0
   254c8:	beq	25548 <__assert_fail@plt+0x13210>
   254cc:	bl	12164 <__errno_location@plt>
   254d0:	mov	r8, r0
   254d4:	mov	r9, #0
   254d8:	mov	r0, r7
   254dc:	mov	r1, r5
   254e0:	str	r9, [r8]
   254e4:	bl	12098 <strcoll@plt>
   254e8:	cmp	r0, #0
   254ec:	bne	2552c <__assert_fail@plt+0x131f4>
   254f0:	mov	r0, r7
   254f4:	bl	12140 <strlen@plt>
   254f8:	add	r4, r0, #1
   254fc:	mov	r0, r5
   25500:	sub	r6, r6, r4
   25504:	bl	12140 <strlen@plt>
   25508:	add	r0, r0, #1
   2550c:	cmp	r6, #0
   25510:	sub	sl, sl, r0
   25514:	beq	25534 <__assert_fail@plt+0x131fc>
   25518:	add	r7, r7, r4
   2551c:	add	r5, r5, r0
   25520:	cmp	sl, #0
   25524:	bne	254d8 <__assert_fail@plt+0x131a0>
   25528:	mov	r0, #1
   2552c:	sub	sp, fp, #28
   25530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25534:	cmp	sl, #0
   25538:	mvnne	sl, #0
   2553c:	mov	r0, sl
   25540:	sub	sp, fp, #28
   25544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25548:	bl	12164 <__errno_location@plt>
   2554c:	mov	r1, r0
   25550:	mov	r0, #0
   25554:	str	r0, [r1]
   25558:	sub	sp, fp, #28
   2555c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025560 <_obstack_begin@@Base>:
   25560:	push	{r4, r5, r6, sl, fp, lr}
   25564:	add	fp, sp, #16
   25568:	cmp	r1, #0
   2556c:	mov	r4, r0
   25570:	str	r3, [r0, #28]
   25574:	mov	r5, r2
   25578:	movweq	r1, #4072	; 0xfe8
   2557c:	cmp	r2, #0
   25580:	str	r1, [r0]
   25584:	ldr	r0, [fp, #8]
   25588:	movweq	r5, #8
   2558c:	sub	r6, r5, #1
   25590:	str	r0, [r4, #32]
   25594:	str	r6, [r4, #24]
   25598:	ldrb	r0, [r4, #40]	; 0x28
   2559c:	and	r0, r0, #254	; 0xfe
   255a0:	strb	r0, [r4, #40]	; 0x28
   255a4:	mov	r0, r1
   255a8:	blx	r3
   255ac:	cmp	r0, #0
   255b0:	str	r0, [r4, #4]
   255b4:	addne	r1, r6, r0
   255b8:	rsbne	r2, r5, #0
   255bc:	addne	r1, r1, #8
   255c0:	andne	r1, r1, r2
   255c4:	strne	r1, [r4, #12]
   255c8:	strne	r1, [r4, #8]
   255cc:	ldrne	r1, [r4]
   255d0:	addne	r1, r0, r1
   255d4:	strne	r1, [r0]
   255d8:	strne	r1, [r4, #16]
   255dc:	movne	r1, #0
   255e0:	strne	r1, [r0, #4]
   255e4:	ldrbne	r0, [r4, #40]	; 0x28
   255e8:	andne	r0, r0, #249	; 0xf9
   255ec:	strbne	r0, [r4, #40]	; 0x28
   255f0:	movne	r0, #1
   255f4:	popne	{r4, r5, r6, sl, fp, pc}
   255f8:	movw	r0, #37552	; 0x92b0
   255fc:	movt	r0, #3
   25600:	ldr	r0, [r0]
   25604:	blx	r0

00025608 <_obstack_begin_1@@Base>:
   25608:	push	{r4, r5, r6, sl, fp, lr}
   2560c:	add	fp, sp, #16
   25610:	cmp	r1, #0
   25614:	mov	r4, r0
   25618:	str	r3, [r0, #28]
   2561c:	mov	r5, r2
   25620:	movweq	r1, #4072	; 0xfe8
   25624:	cmp	r2, #0
   25628:	str	r1, [r0]
   2562c:	ldr	r0, [fp, #8]
   25630:	movweq	r5, #8
   25634:	sub	r6, r5, #1
   25638:	str	r0, [r4, #32]
   2563c:	ldr	r0, [fp, #12]
   25640:	str	r0, [r4, #36]	; 0x24
   25644:	str	r6, [r4, #24]
   25648:	ldrb	r2, [r4, #40]	; 0x28
   2564c:	orr	r2, r2, #1
   25650:	strb	r2, [r4, #40]	; 0x28
   25654:	blx	r3
   25658:	cmp	r0, #0
   2565c:	str	r0, [r4, #4]
   25660:	addne	r1, r6, r0
   25664:	rsbne	r2, r5, #0
   25668:	addne	r1, r1, #8
   2566c:	andne	r1, r1, r2
   25670:	strne	r1, [r4, #12]
   25674:	strne	r1, [r4, #8]
   25678:	ldrne	r1, [r4]
   2567c:	addne	r1, r0, r1
   25680:	strne	r1, [r0]
   25684:	strne	r1, [r4, #16]
   25688:	movne	r1, #0
   2568c:	strne	r1, [r0, #4]
   25690:	ldrbne	r0, [r4, #40]	; 0x28
   25694:	andne	r0, r0, #249	; 0xf9
   25698:	strbne	r0, [r4, #40]	; 0x28
   2569c:	movne	r0, #1
   256a0:	popne	{r4, r5, r6, sl, fp, pc}
   256a4:	movw	r0, #37552	; 0x92b0
   256a8:	movt	r0, #3
   256ac:	ldr	r0, [r0]
   256b0:	blx	r0

000256b4 <_obstack_newchunk@@Base>:
   256b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   256b8:	add	fp, sp, #28
   256bc:	sub	sp, sp, #4
   256c0:	mov	r4, r0
   256c4:	ldr	r2, [r0]
   256c8:	ldr	r0, [r0, #8]
   256cc:	ldr	r3, [r4, #12]
   256d0:	sub	r9, r3, r0
   256d4:	ldr	r0, [r4, #24]
   256d8:	mov	r3, #0
   256dc:	add	r1, r9, r1
   256e0:	adds	r6, r1, r0
   256e4:	adc	r0, r3, #0
   256e8:	mov	r3, #100	; 0x64
   256ec:	add	r3, r3, r9, lsr #3
   256f0:	adds	r7, r3, r6
   256f4:	movcs	r7, r6
   256f8:	cmp	r7, r2
   256fc:	movcc	r7, r2
   25700:	cmp	r1, r9
   25704:	bcc	25808 <_obstack_newchunk@@Base+0x154>
   25708:	cmp	r0, #0
   2570c:	bne	25808 <_obstack_newchunk@@Base+0x154>
   25710:	ldrb	r0, [r4, #40]	; 0x28
   25714:	ldr	r8, [r4, #4]
   25718:	tst	r0, #1
   2571c:	bne	2573c <_obstack_newchunk@@Base+0x88>
   25720:	ldr	r1, [r4, #28]
   25724:	mov	r0, r7
   25728:	blx	r1
   2572c:	mov	r6, r0
   25730:	cmp	r0, #0
   25734:	bne	25758 <_obstack_newchunk@@Base+0xa4>
   25738:	b	25808 <_obstack_newchunk@@Base+0x154>
   2573c:	ldr	r2, [r4, #28]
   25740:	ldr	r0, [r4, #36]	; 0x24
   25744:	mov	r1, r7
   25748:	blx	r2
   2574c:	mov	r6, r0
   25750:	cmp	r0, #0
   25754:	beq	25808 <_obstack_newchunk@@Base+0x154>
   25758:	add	r0, r6, r7
   2575c:	str	r6, [r4, #4]
   25760:	str	r8, [r6, #4]
   25764:	mov	r2, r9
   25768:	str	r0, [r4, #16]
   2576c:	str	r0, [r6]
   25770:	ldr	r5, [r4, #24]
   25774:	ldr	sl, [r4, #8]
   25778:	add	r0, r5, r6
   2577c:	mov	r1, sl
   25780:	add	r0, r0, #8
   25784:	bic	r7, r0, r5
   25788:	mov	r0, r7
   2578c:	bl	11ec4 <memcpy@plt>
   25790:	ldrb	r0, [r4, #40]	; 0x28
   25794:	tst	r0, #2
   25798:	bne	257e8 <_obstack_newchunk@@Base+0x134>
   2579c:	add	r1, r5, r8
   257a0:	mvn	r0, r5
   257a4:	add	r1, r1, #8
   257a8:	and	r0, r1, r0
   257ac:	cmp	sl, r0
   257b0:	bne	257e8 <_obstack_newchunk@@Base+0x134>
   257b4:	ldr	r0, [r8, #4]
   257b8:	str	r0, [r6, #4]
   257bc:	ldrb	r0, [r4, #40]	; 0x28
   257c0:	tst	r0, #1
   257c4:	bne	257d8 <_obstack_newchunk@@Base+0x124>
   257c8:	ldr	r1, [r4, #32]
   257cc:	mov	r0, r8
   257d0:	blx	r1
   257d4:	b	257e8 <_obstack_newchunk@@Base+0x134>
   257d8:	ldr	r2, [r4, #32]
   257dc:	ldr	r0, [r4, #36]	; 0x24
   257e0:	mov	r1, r8
   257e4:	blx	r2
   257e8:	add	r0, r7, r9
   257ec:	str	r7, [r4, #8]
   257f0:	str	r0, [r4, #12]
   257f4:	ldrb	r0, [r4, #40]	; 0x28
   257f8:	and	r0, r0, #253	; 0xfd
   257fc:	strb	r0, [r4, #40]	; 0x28
   25800:	sub	sp, fp, #28
   25804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25808:	movw	r0, #37552	; 0x92b0
   2580c:	movt	r0, #3
   25810:	ldr	r0, [r0]
   25814:	blx	r0

00025818 <_obstack_allocated_p@@Base>:
   25818:	ldr	r2, [r0, #4]
   2581c:	mov	r0, #0
   25820:	cmp	r2, #0
   25824:	bxeq	lr
   25828:	cmp	r2, r1
   2582c:	bcc	25844 <_obstack_allocated_p@@Base+0x2c>
   25830:	ldr	r2, [r2, #4]
   25834:	cmp	r2, #0
   25838:	bxeq	lr
   2583c:	cmp	r2, r1
   25840:	bcs	25830 <_obstack_allocated_p@@Base+0x18>
   25844:	ldr	r3, [r2]
   25848:	cmp	r3, r1
   2584c:	bcc	25830 <_obstack_allocated_p@@Base+0x18>
   25850:	mov	r0, #1
   25854:	bx	lr

00025858 <_obstack_free@@Base>:
   25858:	push	{r4, r5, r6, sl, fp, lr}
   2585c:	add	fp, sp, #16
   25860:	mov	r5, r1
   25864:	ldr	r1, [r0, #4]
   25868:	cmp	r1, #0
   2586c:	beq	258cc <_obstack_free@@Base+0x74>
   25870:	mov	r4, r0
   25874:	cmp	r1, r5
   25878:	bcs	25888 <_obstack_free@@Base+0x30>
   2587c:	ldr	r0, [r1]
   25880:	cmp	r0, r5
   25884:	bcs	258d8 <_obstack_free@@Base+0x80>
   25888:	ldrb	r0, [r4, #40]	; 0x28
   2588c:	ldr	r6, [r1, #4]
   25890:	tst	r0, #1
   25894:	bne	258a8 <_obstack_free@@Base+0x50>
   25898:	ldr	r2, [r4, #32]
   2589c:	mov	r0, r1
   258a0:	blx	r2
   258a4:	b	258b4 <_obstack_free@@Base+0x5c>
   258a8:	ldr	r2, [r4, #32]
   258ac:	ldr	r0, [r4, #36]	; 0x24
   258b0:	blx	r2
   258b4:	ldrb	r0, [r4, #40]	; 0x28
   258b8:	cmp	r6, #0
   258bc:	mov	r1, r6
   258c0:	orr	r0, r0, #2
   258c4:	strb	r0, [r4, #40]	; 0x28
   258c8:	bne	25874 <_obstack_free@@Base+0x1c>
   258cc:	cmp	r5, #0
   258d0:	popeq	{r4, r5, r6, sl, fp, pc}
   258d4:	bl	12314 <abort@plt>
   258d8:	str	r5, [r4, #8]
   258dc:	str	r5, [r4, #12]
   258e0:	ldr	r0, [r1]
   258e4:	str	r1, [r4, #4]
   258e8:	str	r0, [r4, #16]
   258ec:	pop	{r4, r5, r6, sl, fp, pc}

000258f0 <_obstack_memory_used@@Base>:
   258f0:	ldr	r1, [r0, #4]
   258f4:	mov	r0, #0
   258f8:	b	2590c <_obstack_memory_used@@Base+0x1c>
   258fc:	ldr	r2, [r1]
   25900:	sub	r0, r0, r1
   25904:	ldr	r1, [r1, #4]
   25908:	add	r0, r0, r2
   2590c:	cmp	r1, #0
   25910:	bxeq	lr
   25914:	b	258fc <_obstack_memory_used@@Base+0xc>
   25918:	push	{fp, lr}
   2591c:	mov	fp, sp
   25920:	movw	r0, #37576	; 0x92c8
   25924:	movw	r1, #33982	; 0x84be
   25928:	mov	r2, #5
   2592c:	movt	r0, #3
   25930:	movt	r1, #2
   25934:	ldr	r4, [r0]
   25938:	mov	r0, #0
   2593c:	bl	11f54 <dcgettext@plt>
   25940:	movw	r2, #33206	; 0x81b6
   25944:	mov	r3, r0
   25948:	mov	r0, r4
   2594c:	mov	r1, #1
   25950:	movt	r2, #2
   25954:	bl	121c4 <__fprintf_chk@plt>
   25958:	movw	r0, #37480	; 0x9268
   2595c:	movt	r0, #3
   25960:	ldr	r0, [r0]
   25964:	bl	12128 <exit@plt>
   25968:	cmp	r2, #0
   2596c:	beq	2599c <_obstack_memory_used@@Base+0xac>
   25970:	mvn	r3, #0
   25974:	udiv	r3, r3, r2
   25978:	cmp	r3, r1
   2597c:	bcs	2599c <_obstack_memory_used@@Base+0xac>
   25980:	push	{fp, lr}
   25984:	mov	fp, sp
   25988:	bl	12164 <__errno_location@plt>
   2598c:	mov	r1, #12
   25990:	str	r1, [r0]
   25994:	mov	r0, #0
   25998:	pop	{fp, pc}
   2599c:	mul	r1, r2, r1
   259a0:	b	24b1c <__assert_fail@plt+0x127e4>
   259a4:	mov	r1, #0
   259a8:	mov	r2, #3
   259ac:	b	24ff0 <__assert_fail@plt+0x12cb8>
   259b0:	eor	r1, r1, #-2147483648	; 0x80000000
   259b4:	b	259bc <_obstack_memory_used@@Base+0xcc>
   259b8:	eor	r3, r3, #-2147483648	; 0x80000000
   259bc:	push	{r4, r5, lr}
   259c0:	lsl	r4, r1, #1
   259c4:	lsl	r5, r3, #1
   259c8:	teq	r4, r5
   259cc:	teqeq	r0, r2
   259d0:	orrsne	ip, r4, r0
   259d4:	orrsne	ip, r5, r2
   259d8:	mvnsne	ip, r4, asr #21
   259dc:	mvnsne	ip, r5, asr #21
   259e0:	beq	25bcc <_obstack_memory_used@@Base+0x2dc>
   259e4:	lsr	r4, r4, #21
   259e8:	rsbs	r5, r4, r5, lsr #21
   259ec:	rsblt	r5, r5, #0
   259f0:	ble	25a10 <_obstack_memory_used@@Base+0x120>
   259f4:	add	r4, r4, r5
   259f8:	eor	r2, r0, r2
   259fc:	eor	r3, r1, r3
   25a00:	eor	r0, r2, r0
   25a04:	eor	r1, r3, r1
   25a08:	eor	r2, r0, r2
   25a0c:	eor	r3, r1, r3
   25a10:	cmp	r5, #54	; 0x36
   25a14:	pophi	{r4, r5, pc}
   25a18:	tst	r1, #-2147483648	; 0x80000000
   25a1c:	lsl	r1, r1, #12
   25a20:	mov	ip, #1048576	; 0x100000
   25a24:	orr	r1, ip, r1, lsr #12
   25a28:	beq	25a34 <_obstack_memory_used@@Base+0x144>
   25a2c:	rsbs	r0, r0, #0
   25a30:	rsc	r1, r1, #0
   25a34:	tst	r3, #-2147483648	; 0x80000000
   25a38:	lsl	r3, r3, #12
   25a3c:	orr	r3, ip, r3, lsr #12
   25a40:	beq	25a4c <_obstack_memory_used@@Base+0x15c>
   25a44:	rsbs	r2, r2, #0
   25a48:	rsc	r3, r3, #0
   25a4c:	teq	r4, r5
   25a50:	beq	25bb4 <_obstack_memory_used@@Base+0x2c4>
   25a54:	sub	r4, r4, #1
   25a58:	rsbs	lr, r5, #32
   25a5c:	blt	25a78 <_obstack_memory_used@@Base+0x188>
   25a60:	lsl	ip, r2, lr
   25a64:	adds	r0, r0, r2, lsr r5
   25a68:	adc	r1, r1, #0
   25a6c:	adds	r0, r0, r3, lsl lr
   25a70:	adcs	r1, r1, r3, asr r5
   25a74:	b	25a94 <_obstack_memory_used@@Base+0x1a4>
   25a78:	sub	r5, r5, #32
   25a7c:	add	lr, lr, #32
   25a80:	cmp	r2, #1
   25a84:	lsl	ip, r3, lr
   25a88:	orrcs	ip, ip, #2
   25a8c:	adds	r0, r0, r3, asr r5
   25a90:	adcs	r1, r1, r3, asr #31
   25a94:	and	r5, r1, #-2147483648	; 0x80000000
   25a98:	bpl	25aa8 <_obstack_memory_used@@Base+0x1b8>
   25a9c:	rsbs	ip, ip, #0
   25aa0:	rscs	r0, r0, #0
   25aa4:	rsc	r1, r1, #0
   25aa8:	cmp	r1, #1048576	; 0x100000
   25aac:	bcc	25aec <_obstack_memory_used@@Base+0x1fc>
   25ab0:	cmp	r1, #2097152	; 0x200000
   25ab4:	bcc	25ad4 <_obstack_memory_used@@Base+0x1e4>
   25ab8:	lsrs	r1, r1, #1
   25abc:	rrxs	r0, r0
   25ac0:	rrx	ip, ip
   25ac4:	add	r4, r4, #1
   25ac8:	lsl	r2, r4, #21
   25acc:	cmn	r2, #4194304	; 0x400000
   25ad0:	bcs	25c2c <_obstack_memory_used@@Base+0x33c>
   25ad4:	cmp	ip, #-2147483648	; 0x80000000
   25ad8:	lsrseq	ip, r0, #1
   25adc:	adcs	r0, r0, #0
   25ae0:	adc	r1, r1, r4, lsl #20
   25ae4:	orr	r1, r1, r5
   25ae8:	pop	{r4, r5, pc}
   25aec:	lsls	ip, ip, #1
   25af0:	adcs	r0, r0, r0
   25af4:	adc	r1, r1, r1
   25af8:	tst	r1, #1048576	; 0x100000
   25afc:	sub	r4, r4, #1
   25b00:	bne	25ad4 <_obstack_memory_used@@Base+0x1e4>
   25b04:	teq	r1, #0
   25b08:	moveq	r1, r0
   25b0c:	moveq	r0, #0
   25b10:	clz	r3, r1
   25b14:	addeq	r3, r3, #32
   25b18:	sub	r3, r3, #11
   25b1c:	subs	r2, r3, #32
   25b20:	bge	25b44 <_obstack_memory_used@@Base+0x254>
   25b24:	adds	r2, r2, #12
   25b28:	ble	25b40 <_obstack_memory_used@@Base+0x250>
   25b2c:	add	ip, r2, #20
   25b30:	rsb	r2, r2, #12
   25b34:	lsl	r0, r1, ip
   25b38:	lsr	r1, r1, r2
   25b3c:	b	25b54 <_obstack_memory_used@@Base+0x264>
   25b40:	add	r2, r2, #20
   25b44:	rsble	ip, r2, #32
   25b48:	lsl	r1, r1, r2
   25b4c:	orrle	r1, r1, r0, lsr ip
   25b50:	lslle	r0, r0, r2
   25b54:	subs	r4, r4, r3
   25b58:	addge	r1, r1, r4, lsl #20
   25b5c:	orrge	r1, r1, r5
   25b60:	popge	{r4, r5, pc}
   25b64:	mvn	r4, r4
   25b68:	subs	r4, r4, #31
   25b6c:	bge	25ba8 <_obstack_memory_used@@Base+0x2b8>
   25b70:	adds	r4, r4, #12
   25b74:	bgt	25b90 <_obstack_memory_used@@Base+0x2a0>
   25b78:	add	r4, r4, #20
   25b7c:	rsb	r2, r4, #32
   25b80:	lsr	r0, r0, r4
   25b84:	orr	r0, r0, r1, lsl r2
   25b88:	orr	r1, r5, r1, lsr r4
   25b8c:	pop	{r4, r5, pc}
   25b90:	rsb	r4, r4, #12
   25b94:	rsb	r2, r4, #32
   25b98:	lsr	r0, r0, r2
   25b9c:	orr	r0, r0, r1, lsl r4
   25ba0:	mov	r1, r5
   25ba4:	pop	{r4, r5, pc}
   25ba8:	lsr	r0, r1, r4
   25bac:	mov	r1, r5
   25bb0:	pop	{r4, r5, pc}
   25bb4:	teq	r4, #0
   25bb8:	eor	r3, r3, #1048576	; 0x100000
   25bbc:	eoreq	r1, r1, #1048576	; 0x100000
   25bc0:	addeq	r4, r4, #1
   25bc4:	subne	r5, r5, #1
   25bc8:	b	25a54 <_obstack_memory_used@@Base+0x164>
   25bcc:	mvns	ip, r4, asr #21
   25bd0:	mvnsne	ip, r5, asr #21
   25bd4:	beq	25c3c <_obstack_memory_used@@Base+0x34c>
   25bd8:	teq	r4, r5
   25bdc:	teqeq	r0, r2
   25be0:	beq	25bf4 <_obstack_memory_used@@Base+0x304>
   25be4:	orrs	ip, r4, r0
   25be8:	moveq	r1, r3
   25bec:	moveq	r0, r2
   25bf0:	pop	{r4, r5, pc}
   25bf4:	teq	r1, r3
   25bf8:	movne	r1, #0
   25bfc:	movne	r0, #0
   25c00:	popne	{r4, r5, pc}
   25c04:	lsrs	ip, r4, #21
   25c08:	bne	25c1c <_obstack_memory_used@@Base+0x32c>
   25c0c:	lsls	r0, r0, #1
   25c10:	adcs	r1, r1, r1
   25c14:	orrcs	r1, r1, #-2147483648	; 0x80000000
   25c18:	pop	{r4, r5, pc}
   25c1c:	adds	r4, r4, #4194304	; 0x400000
   25c20:	addcc	r1, r1, #1048576	; 0x100000
   25c24:	popcc	{r4, r5, pc}
   25c28:	and	r5, r1, #-2147483648	; 0x80000000
   25c2c:	orr	r1, r5, #2130706432	; 0x7f000000
   25c30:	orr	r1, r1, #15728640	; 0xf00000
   25c34:	mov	r0, #0
   25c38:	pop	{r4, r5, pc}
   25c3c:	mvns	ip, r4, asr #21
   25c40:	movne	r1, r3
   25c44:	movne	r0, r2
   25c48:	mvnseq	ip, r5, asr #21
   25c4c:	movne	r3, r1
   25c50:	movne	r2, r0
   25c54:	orrs	r4, r0, r1, lsl #12
   25c58:	orrseq	r5, r2, r3, lsl #12
   25c5c:	teqeq	r1, r3
   25c60:	orrne	r1, r1, #524288	; 0x80000
   25c64:	pop	{r4, r5, pc}
   25c68:	teq	r0, #0
   25c6c:	moveq	r1, #0
   25c70:	bxeq	lr
   25c74:	push	{r4, r5, lr}
   25c78:	mov	r4, #1024	; 0x400
   25c7c:	add	r4, r4, #50	; 0x32
   25c80:	mov	r5, #0
   25c84:	mov	r1, #0
   25c88:	b	25b04 <_obstack_memory_used@@Base+0x214>
   25c8c:	teq	r0, #0
   25c90:	moveq	r1, #0
   25c94:	bxeq	lr
   25c98:	push	{r4, r5, lr}
   25c9c:	mov	r4, #1024	; 0x400
   25ca0:	add	r4, r4, #50	; 0x32
   25ca4:	ands	r5, r0, #-2147483648	; 0x80000000
   25ca8:	rsbmi	r0, r0, #0
   25cac:	mov	r1, #0
   25cb0:	b	25b04 <_obstack_memory_used@@Base+0x214>
   25cb4:	lsls	r2, r0, #1
   25cb8:	asr	r1, r2, #3
   25cbc:	rrx	r1, r1
   25cc0:	lsl	r0, r2, #28
   25cc4:	andsne	r3, r2, #-16777216	; 0xff000000
   25cc8:	teqne	r3, #-16777216	; 0xff000000
   25ccc:	eorne	r1, r1, #939524096	; 0x38000000
   25cd0:	bxne	lr
   25cd4:	bics	r2, r2, #-16777216	; 0xff000000
   25cd8:	bxeq	lr
   25cdc:	teq	r3, #-16777216	; 0xff000000
   25ce0:	orreq	r1, r1, #524288	; 0x80000
   25ce4:	bxeq	lr
   25ce8:	push	{r4, r5, lr}
   25cec:	mov	r4, #896	; 0x380
   25cf0:	and	r5, r1, #-2147483648	; 0x80000000
   25cf4:	bic	r1, r1, #-2147483648	; 0x80000000
   25cf8:	b	25b04 <_obstack_memory_used@@Base+0x214>
   25cfc:	orrs	r2, r0, r1
   25d00:	bxeq	lr
   25d04:	push	{r4, r5, lr}
   25d08:	mov	r5, #0
   25d0c:	b	25d2c <_obstack_memory_used@@Base+0x43c>
   25d10:	orrs	r2, r0, r1
   25d14:	bxeq	lr
   25d18:	push	{r4, r5, lr}
   25d1c:	ands	r5, r1, #-2147483648	; 0x80000000
   25d20:	bpl	25d2c <_obstack_memory_used@@Base+0x43c>
   25d24:	rsbs	r0, r0, #0
   25d28:	rsc	r1, r1, #0
   25d2c:	mov	r4, #1024	; 0x400
   25d30:	add	r4, r4, #50	; 0x32
   25d34:	lsrs	ip, r1, #22
   25d38:	beq	25aa8 <_obstack_memory_used@@Base+0x1b8>
   25d3c:	mov	r2, #3
   25d40:	lsrs	ip, ip, #3
   25d44:	addne	r2, r2, #3
   25d48:	lsrs	ip, ip, #3
   25d4c:	addne	r2, r2, #3
   25d50:	add	r2, r2, ip, lsr #3
   25d54:	rsb	r3, r2, #32
   25d58:	lsl	ip, r0, r3
   25d5c:	lsr	r0, r0, r2
   25d60:	orr	r0, r0, r1, lsl r3
   25d64:	lsr	r1, r1, r2
   25d68:	add	r4, r4, r2
   25d6c:	b	25aa8 <_obstack_memory_used@@Base+0x1b8>
   25d70:	cmp	r3, #0
   25d74:	cmpeq	r2, #0
   25d78:	bne	25d90 <_obstack_memory_used@@Base+0x4a0>
   25d7c:	cmp	r1, #0
   25d80:	cmpeq	r0, #0
   25d84:	mvnne	r1, #0
   25d88:	mvnne	r0, #0
   25d8c:	b	25dac <_obstack_memory_used@@Base+0x4bc>
   25d90:	sub	sp, sp, #8
   25d94:	push	{sp, lr}
   25d98:	bl	25e00 <_obstack_memory_used@@Base+0x510>
   25d9c:	ldr	lr, [sp, #4]
   25da0:	add	sp, sp, #8
   25da4:	pop	{r2, r3}
   25da8:	bx	lr
   25dac:	push	{r1, lr}
   25db0:	mov	r0, #8
   25db4:	bl	11e1c <raise@plt>
   25db8:	pop	{r1, pc}
   25dbc:	andeq	r0, r0, r0
   25dc0:	vmov	d6, r0, r1
   25dc4:	vldr	d7, [pc, #36]	; 25df0 <_obstack_memory_used@@Base+0x500>
   25dc8:	vldr	d5, [pc, #40]	; 25df8 <_obstack_memory_used@@Base+0x508>
   25dcc:	vmul.f64	d7, d6, d7
   25dd0:	vcvt.u32.f64	s14, d7
   25dd4:	vcvt.f64.u32	d4, s14
   25dd8:	vmov	r1, s14
   25ddc:	vmls.f64	d6, d4, d5
   25de0:	vcvt.u32.f64	s15, d6
   25de4:	vmov	r0, s15
   25de8:	bx	lr
   25dec:	nop			; (mov r0, r0)
   25df0:	andeq	r0, r0, r0
   25df4:	ldclcc	0, cr0, [r0]
   25df8:	andeq	r0, r0, r0
   25dfc:	mvnsmi	r0, r0
   25e00:	cmp	r1, r3
   25e04:	cmpeq	r0, r2
   25e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e0c:	mov	r4, r0
   25e10:	movcc	r0, #0
   25e14:	mov	r5, r1
   25e18:	ldr	lr, [sp, #36]	; 0x24
   25e1c:	movcc	r1, r0
   25e20:	bcc	25f1c <_obstack_memory_used@@Base+0x62c>
   25e24:	cmp	r3, #0
   25e28:	clzeq	ip, r2
   25e2c:	clzne	ip, r3
   25e30:	addeq	ip, ip, #32
   25e34:	cmp	r5, #0
   25e38:	clzeq	r1, r4
   25e3c:	addeq	r1, r1, #32
   25e40:	clzne	r1, r5
   25e44:	sub	ip, ip, r1
   25e48:	sub	sl, ip, #32
   25e4c:	lsl	r9, r3, ip
   25e50:	rsb	fp, ip, #32
   25e54:	orr	r9, r9, r2, lsl sl
   25e58:	orr	r9, r9, r2, lsr fp
   25e5c:	lsl	r8, r2, ip
   25e60:	cmp	r5, r9
   25e64:	cmpeq	r4, r8
   25e68:	movcc	r0, #0
   25e6c:	movcc	r1, r0
   25e70:	bcc	25e8c <_obstack_memory_used@@Base+0x59c>
   25e74:	mov	r0, #1
   25e78:	subs	r4, r4, r8
   25e7c:	lsl	r1, r0, sl
   25e80:	orr	r1, r1, r0, lsr fp
   25e84:	lsl	r0, r0, ip
   25e88:	sbc	r5, r5, r9
   25e8c:	cmp	ip, #0
   25e90:	beq	25f1c <_obstack_memory_used@@Base+0x62c>
   25e94:	lsr	r6, r8, #1
   25e98:	orr	r6, r6, r9, lsl #31
   25e9c:	lsr	r7, r9, #1
   25ea0:	mov	r2, ip
   25ea4:	b	25ec8 <_obstack_memory_used@@Base+0x5d8>
   25ea8:	subs	r3, r4, r6
   25eac:	sbc	r8, r5, r7
   25eb0:	adds	r3, r3, r3
   25eb4:	adc	r8, r8, r8
   25eb8:	adds	r4, r3, #1
   25ebc:	adc	r5, r8, #0
   25ec0:	subs	r2, r2, #1
   25ec4:	beq	25ee4 <_obstack_memory_used@@Base+0x5f4>
   25ec8:	cmp	r5, r7
   25ecc:	cmpeq	r4, r6
   25ed0:	bcs	25ea8 <_obstack_memory_used@@Base+0x5b8>
   25ed4:	adds	r4, r4, r4
   25ed8:	adc	r5, r5, r5
   25edc:	subs	r2, r2, #1
   25ee0:	bne	25ec8 <_obstack_memory_used@@Base+0x5d8>
   25ee4:	lsr	r3, r4, ip
   25ee8:	orr	r3, r3, r5, lsl fp
   25eec:	lsr	r2, r5, ip
   25ef0:	orr	r3, r3, r5, lsr sl
   25ef4:	adds	r0, r0, r4
   25ef8:	mov	r4, r3
   25efc:	lsl	r3, r2, ip
   25f00:	orr	r3, r3, r4, lsl sl
   25f04:	lsl	ip, r4, ip
   25f08:	orr	r3, r3, r4, lsr fp
   25f0c:	adc	r1, r1, r5
   25f10:	subs	r0, r0, ip
   25f14:	mov	r5, r2
   25f18:	sbc	r1, r1, r3
   25f1c:	cmp	lr, #0
   25f20:	strdne	r4, [lr]
   25f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25f2c:	mov	r7, r0
   25f30:	ldr	r6, [pc, #72]	; 25f80 <_obstack_memory_used@@Base+0x690>
   25f34:	ldr	r5, [pc, #72]	; 25f84 <_obstack_memory_used@@Base+0x694>
   25f38:	add	r6, pc, r6
   25f3c:	add	r5, pc, r5
   25f40:	sub	r6, r6, r5
   25f44:	mov	r8, r1
   25f48:	mov	r9, r2
   25f4c:	bl	11dcc <pthread_mutex_unlock@plt-0x20>
   25f50:	asrs	r6, r6, #2
   25f54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25f58:	mov	r4, #0
   25f5c:	add	r4, r4, #1
   25f60:	ldr	r3, [r5], #4
   25f64:	mov	r2, r9
   25f68:	mov	r1, r8
   25f6c:	mov	r0, r7
   25f70:	blx	r3
   25f74:	cmp	r6, r4
   25f78:	bne	25f5c <_obstack_memory_used@@Base+0x66c>
   25f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25f80:	andeq	r2, r1, r4, asr #31
   25f84:			; <UNDEFINED> instruction: 0x00012fbc
   25f88:	bx	lr
   25f8c:	ldr	r3, [pc, #12]	; 25fa0 <_obstack_memory_used@@Base+0x6b0>
   25f90:	mov	r1, #0
   25f94:	add	r3, pc, r3
   25f98:	ldr	r2, [r3]
   25f9c:	b	12170 <__cxa_atexit@plt>
   25fa0:	andeq	r3, r1, r0, asr #4

Disassembly of section .fini:

00025fa4 <.fini>:
   25fa4:	push	{r3, lr}
   25fa8:	pop	{r3, pc}
