
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c14 <.init>:
   10c14:	push	{r3, lr}
   10c18:	bl	11ae4 <__assert_fail@plt+0xc58>
   10c1c:	pop	{r3, pc}

Disassembly of section .plt:

00010c20 <calloc@plt-0x14>:
   10c20:	push	{lr}		; (str lr, [sp, #-4]!)
   10c24:	ldr	lr, [pc, #4]	; 10c30 <calloc@plt-0x4>
   10c28:	add	lr, pc, lr
   10c2c:	ldr	pc, [lr, #8]!
   10c30:	ldrdeq	r9, [r1], -r0

00010c34 <calloc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #102400	; 0x19000
   10c3c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c40 <fputs_unlocked@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #102400	; 0x19000
   10c48:	ldr	pc, [ip, #968]!	; 0x3c8

00010c4c <raise@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #102400	; 0x19000
   10c54:	ldr	pc, [ip, #960]!	; 0x3c0

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #102400	; 0x19000
   10c60:	ldr	pc, [ip, #952]!	; 0x3b8

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #102400	; 0x19000
   10c6c:	ldr	pc, [ip, #944]!	; 0x3b0

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #102400	; 0x19000
   10c78:	ldr	pc, [ip, #936]!	; 0x3a8

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #102400	; 0x19000
   10c84:	ldr	pc, [ip, #928]!	; 0x3a0

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #102400	; 0x19000
   10c90:	ldr	pc, [ip, #920]!	; 0x398

00010c94 <mbsinit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #102400	; 0x19000
   10c9c:	ldr	pc, [ip, #912]!	; 0x390

00010ca0 <ftruncate64@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #102400	; 0x19000
   10ca8:	ldr	pc, [ip, #904]!	; 0x388

00010cac <memcmp@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #102400	; 0x19000
   10cb4:	ldr	pc, [ip, #896]!	; 0x380

00010cb8 <fputc_unlocked@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #102400	; 0x19000
   10cc0:	ldr	pc, [ip, #888]!	; 0x378

00010cc4 <dcgettext@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #102400	; 0x19000
   10ccc:	ldr	pc, [ip, #880]!	; 0x370

00010cd0 <realloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #102400	; 0x19000
   10cd8:	ldr	pc, [ip, #872]!	; 0x368

00010cdc <textdomain@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #102400	; 0x19000
   10ce4:	ldr	pc, [ip, #864]!	; 0x360

00010ce8 <iswprint@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #102400	; 0x19000
   10cf0:	ldr	pc, [ip, #856]!	; 0x358

00010cf4 <__fxstat64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #102400	; 0x19000
   10cfc:	ldr	pc, [ip, #848]!	; 0x350

00010d00 <fwrite@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #102400	; 0x19000
   10d08:	ldr	pc, [ip, #840]!	; 0x348

00010d0c <lseek64@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #102400	; 0x19000
   10d14:	ldr	pc, [ip, #832]!	; 0x340

00010d18 <__ctype_get_mb_cur_max@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #102400	; 0x19000
   10d20:	ldr	pc, [ip, #824]!	; 0x338

00010d24 <__fpending@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #102400	; 0x19000
   10d2c:	ldr	pc, [ip, #816]!	; 0x330

00010d30 <mbrtowc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #102400	; 0x19000
   10d38:	ldr	pc, [ip, #808]!	; 0x328

00010d3c <error@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #102400	; 0x19000
   10d44:	ldr	pc, [ip, #800]!	; 0x320

00010d48 <open64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #102400	; 0x19000
   10d50:	ldr	pc, [ip, #792]!	; 0x318

00010d54 <malloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #102400	; 0x19000
   10d5c:	ldr	pc, [ip, #784]!	; 0x310

00010d60 <__libc_start_main@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #102400	; 0x19000
   10d68:	ldr	pc, [ip, #776]!	; 0x308

00010d6c <__freading@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #102400	; 0x19000
   10d74:	ldr	pc, [ip, #768]!	; 0x300

00010d78 <__gmon_start__@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #102400	; 0x19000
   10d80:	ldr	pc, [ip, #760]!	; 0x2f8

00010d84 <getopt_long@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #102400	; 0x19000
   10d8c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d90 <__ctype_b_loc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #102400	; 0x19000
   10d98:	ldr	pc, [ip, #744]!	; 0x2e8

00010d9c <exit@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #102400	; 0x19000
   10da4:	ldr	pc, [ip, #736]!	; 0x2e0

00010da8 <strlen@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #102400	; 0x19000
   10db0:	ldr	pc, [ip, #728]!	; 0x2d8

00010db4 <strchr@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #102400	; 0x19000
   10dbc:	ldr	pc, [ip, #720]!	; 0x2d0

00010dc0 <__errno_location@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #102400	; 0x19000
   10dc8:	ldr	pc, [ip, #712]!	; 0x2c8

00010dcc <__cxa_atexit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #102400	; 0x19000
   10dd4:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd8 <memset@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #102400	; 0x19000
   10de0:	ldr	pc, [ip, #696]!	; 0x2b8

00010de4 <__printf_chk@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #102400	; 0x19000
   10dec:	ldr	pc, [ip, #688]!	; 0x2b0

00010df0 <fileno@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #102400	; 0x19000
   10df8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dfc <__fprintf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #102400	; 0x19000
   10e04:	ldr	pc, [ip, #672]!	; 0x2a0

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #102400	; 0x19000
   10e10:	ldr	pc, [ip, #664]!	; 0x298

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #102400	; 0x19000
   10e1c:	ldr	pc, [ip, #656]!	; 0x290

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #102400	; 0x19000
   10e28:	ldr	pc, [ip, #648]!	; 0x288

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #102400	; 0x19000
   10e34:	ldr	pc, [ip, #640]!	; 0x280

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #102400	; 0x19000
   10e40:	ldr	pc, [ip, #632]!	; 0x278

00010e44 <__strtoll_internal@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #102400	; 0x19000
   10e4c:	ldr	pc, [ip, #624]!	; 0x270

00010e50 <bindtextdomain@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #102400	; 0x19000
   10e58:	ldr	pc, [ip, #616]!	; 0x268

00010e5c <__xstat64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #102400	; 0x19000
   10e64:	ldr	pc, [ip, #608]!	; 0x260

00010e68 <strncmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #102400	; 0x19000
   10e70:	ldr	pc, [ip, #600]!	; 0x258

00010e74 <abort@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #102400	; 0x19000
   10e7c:	ldr	pc, [ip, #592]!	; 0x250

00010e80 <close@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #102400	; 0x19000
   10e88:	ldr	pc, [ip, #584]!	; 0x248

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #102400	; 0x19000
   10e94:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e9c:	mov	r5, r1
   10ea0:	strd	r6, [sp, #8]
   10ea4:	movw	r7, #35596	; 0x8b0c
   10ea8:	movt	r7, #1
   10eac:	strd	r8, [sp, #16]
   10eb0:	mov	r9, r0
   10eb4:	movw	r8, #41296	; 0xa150
   10eb8:	movt	r8, #2
   10ebc:	strd	sl, [sp, #24]
   10ec0:	mov	sl, #0
   10ec4:	str	lr, [sp, #32]
   10ec8:	sub	sp, sp, #196	; 0xc4
   10ecc:	mov	r6, sl
   10ed0:	ldr	r0, [r1]
   10ed4:	bl	12064 <__assert_fail@plt+0x11d8>
   10ed8:	movw	r1, #34120	; 0x8548
   10edc:	movt	r1, #1
   10ee0:	ldr	fp, [pc, #3004]	; 11aa4 <__assert_fail@plt+0xc18>
   10ee4:	mov	r0, #6
   10ee8:	bl	10e20 <setlocale@plt>
   10eec:	movw	r1, #35464	; 0x8a88
   10ef0:	movt	r1, #1
   10ef4:	movw	r0, #35296	; 0x89e0
   10ef8:	movt	r0, #1
   10efc:	bl	10e50 <bindtextdomain@plt>
   10f00:	movw	r0, #35296	; 0x89e0
   10f04:	movt	r0, #1
   10f08:	bl	10cdc <textdomain@plt>
   10f0c:	movw	r0, #8056	; 0x1f78
   10f10:	movt	r0, #1
   10f14:	bl	1842c <__assert_fail@plt+0x75a0>
   10f18:	mov	r2, #0
   10f1c:	mov	r3, #0
   10f20:	strd	r2, [sp, #24]
   10f24:	str	r7, [sp, #40]	; 0x28
   10f28:	mov	r4, #0
   10f2c:	mov	r3, fp
   10f30:	ldr	r2, [sp, #40]	; 0x28
   10f34:	mov	r1, r5
   10f38:	mov	r0, r9
   10f3c:	str	r4, [sp]
   10f40:	bl	10d84 <getopt_long@plt>
   10f44:	cmn	r0, #1
   10f48:	beq	11280 <__assert_fail@plt+0x3f4>
   10f4c:	cmp	r0, #99	; 0x63
   10f50:	beq	11158 <__assert_fail@plt+0x2cc>
   10f54:	ble	110ec <__assert_fail@plt+0x260>
   10f58:	cmp	r0, #114	; 0x72
   10f5c:	beq	11144 <__assert_fail@plt+0x2b8>
   10f60:	cmp	r0, #115	; 0x73
   10f64:	bne	110dc <__assert_fail@plt+0x250>
   10f68:	bl	10d90 <__ctype_b_loc@plt>
   10f6c:	movw	r2, #41288	; 0xa148
   10f70:	movt	r2, #2
   10f74:	ldr	r0, [r0]
   10f78:	ldr	r3, [r2]
   10f7c:	ldrb	r1, [r3]
   10f80:	lsl	ip, r1, #1
   10f84:	ldrh	ip, [r0, ip]
   10f88:	tst	ip, #8192	; 0x2000
   10f8c:	ldrne	r7, [sp, #40]	; 0x28
   10f90:	beq	11208 <__assert_fail@plt+0x37c>
   10f94:	add	r3, r3, #1
   10f98:	str	r3, [r2]
   10f9c:	ldrb	r1, [r3]
   10fa0:	lsl	ip, r1, #1
   10fa4:	ldrh	ip, [r0, ip]
   10fa8:	tst	ip, #8192	; 0x2000
   10fac:	bne	10f94 <__assert_fail@plt+0x108>
   10fb0:	sub	r1, r1, #37	; 0x25
   10fb4:	str	r7, [sp, #40]	; 0x28
   10fb8:	cmp	r1, #25
   10fbc:	ldrls	pc, [pc, r1, lsl #2]
   10fc0:	b	11038 <__assert_fail@plt+0x1ac>
   10fc4:	andeq	r1, r1, r8, ror #3
   10fc8:	andeq	r1, r1, r8, lsr r0
   10fcc:	andeq	r1, r1, r8, lsr r0
   10fd0:	andeq	r1, r1, r8, lsr r0
   10fd4:	andeq	r1, r1, r8, lsr r0
   10fd8:	andeq	r1, r1, r8, lsr r0
   10fdc:	andeq	r1, r1, r8, lsr r0
   10fe0:	andeq	r1, r1, r8, lsr r0
   10fe4:	andeq	r1, r1, r8, lsr r0
   10fe8:	andeq	r1, r1, r8, lsr r0
   10fec:	strdeq	r1, [r1], -r8
   10ff0:	andeq	r1, r1, r8, lsr r0
   10ff4:	andeq	r1, r1, r8, lsr r0
   10ff8:	andeq	r1, r1, r8, lsr r0
   10ffc:	andeq	r1, r1, r8, lsr r0
   11000:	andeq	r1, r1, r8, lsr r0
   11004:	andeq	r1, r1, r8, lsr r0
   11008:	andeq	r1, r1, r8, lsr r0
   1100c:	andeq	r1, r1, r8, lsr r0
   11010:	andeq	r1, r1, r8, lsr r0
   11014:	andeq	r1, r1, r8, lsr r0
   11018:	andeq	r1, r1, r8, lsr r0
   1101c:	andeq	r1, r1, r8, lsr r0
   11020:	andeq	r1, r1, ip, lsr #32
   11024:	andeq	r1, r1, r8, lsr r0
   11028:	ldrdeq	r1, [r1], -r8
   1102c:	add	r3, r3, #1
   11030:	mov	sl, #3
   11034:	str	r3, [r2]
   11038:	ldr	r6, [r2]
   1103c:	ldrb	r3, [r6]
   11040:	lsl	r1, r3, #1
   11044:	ldrh	r1, [r0, r1]
   11048:	tst	r1, #8192	; 0x2000
   1104c:	ldrne	r7, [sp, #40]	; 0x28
   11050:	beq	11074 <__assert_fail@plt+0x1e8>
   11054:	add	r6, r6, #1
   11058:	str	r6, [r2]
   1105c:	ldrb	r3, [r6]
   11060:	lsl	r1, r3, #1
   11064:	ldrh	r1, [r0, r1]
   11068:	tst	r1, #8192	; 0x2000
   1106c:	bne	11054 <__assert_fail@plt+0x1c8>
   11070:	str	r7, [sp, #40]	; 0x28
   11074:	sub	r3, r3, #43	; 0x2b
   11078:	ands	r3, r3, #253	; 0xfd
   1107c:	bne	11170 <__assert_fail@plt+0x2e4>
   11080:	cmp	sl, #0
   11084:	bne	11a84 <__assert_fail@plt+0xbf8>
   11088:	mov	r2, #5
   1108c:	mov	r0, sl
   11090:	movw	r1, #35528	; 0x8ac8
   11094:	movt	r1, #1
   11098:	bl	10cc4 <dcgettext@plt>
   1109c:	mvn	r7, #-2147483648	; 0x80000000
   110a0:	movw	r3, #35544	; 0x8ad8
   110a4:	movt	r3, #1
   110a8:	mov	r2, #0
   110ac:	str	r0, [sp, #12]
   110b0:	mov	r0, r6
   110b4:	mvn	r6, #0
   110b8:	strd	r6, [sp]
   110bc:	str	r3, [sp, #8]
   110c0:	mov	r3, #-2147483648	; 0x80000000
   110c4:	str	sl, [sp, #16]
   110c8:	mov	sl, #1
   110cc:	bl	16a0c <__assert_fail@plt+0x5b80>
   110d0:	mov	r6, sl
   110d4:	strd	r0, [sp, #24]
   110d8:	b	10f28 <__assert_fail@plt+0x9c>
   110dc:	cmp	r0, #111	; 0x6f
   110e0:	beq	11164 <__assert_fail@plt+0x2d8>
   110e4:	mov	r0, #1
   110e8:	bl	11b98 <__assert_fail@plt+0xd0c>
   110ec:	cmn	r0, #3
   110f0:	bne	11134 <__assert_fail@plt+0x2a8>
   110f4:	movw	r2, #35580	; 0x8afc
   110f8:	movt	r2, #1
   110fc:	movw	r3, #41188	; 0xa0e4
   11100:	movt	r3, #2
   11104:	movw	r0, #41284	; 0xa144
   11108:	movt	r0, #2
   1110c:	stm	sp, {r2, r4}
   11110:	movw	r1, #34040	; 0x84f8
   11114:	movt	r1, #1
   11118:	ldr	r0, [r0]
   1111c:	movw	r2, #35292	; 0x89dc
   11120:	movt	r2, #1
   11124:	ldr	r3, [r3]
   11128:	bl	16098 <__assert_fail@plt+0x520c>
   1112c:	mov	r0, r4
   11130:	bl	10d9c <exit@plt>
   11134:	cmn	r0, #2
   11138:	bne	110e4 <__assert_fail@plt+0x258>
   1113c:	mov	r0, r4
   11140:	bl	11b98 <__assert_fail@plt+0xd0c>
   11144:	movw	r3, #41288	; 0xa148
   11148:	movt	r3, #2
   1114c:	ldr	r3, [r3]
   11150:	str	r3, [r8, #4]
   11154:	b	10f28 <__assert_fail@plt+0x9c>
   11158:	mov	r3, #1
   1115c:	strb	r3, [r8]
   11160:	b	10f28 <__assert_fail@plt+0x9c>
   11164:	mov	r3, #1
   11168:	strb	r3, [r8, #1]
   1116c:	b	10f28 <__assert_fail@plt+0x9c>
   11170:	mov	r2, #5
   11174:	movw	r1, #35528	; 0x8ac8
   11178:	movt	r1, #1
   1117c:	mov	r0, #0
   11180:	bl	10cc4 <dcgettext@plt>
   11184:	mov	r4, #0
   11188:	mvn	r2, #0
   1118c:	str	r0, [sp, #12]
   11190:	mvn	r3, #-2147483648	; 0x80000000
   11194:	movw	r1, #35544	; 0x8ad8
   11198:	movt	r1, #1
   1119c:	mov	r0, r6
   111a0:	strd	r2, [sp]
   111a4:	mov	r3, #-2147483648	; 0x80000000
   111a8:	mov	r2, #0
   111ac:	str	r1, [sp, #8]
   111b0:	str	r4, [sp, #16]
   111b4:	bl	16a0c <__assert_fail@plt+0x5b80>
   111b8:	sub	r3, sl, #4
   111bc:	strd	r0, [sp, #24]
   111c0:	cmp	r3, #1
   111c4:	bhi	111d0 <__assert_fail@plt+0x344>
   111c8:	orrs	r3, r0, r1
   111cc:	beq	11a60 <__assert_fail@plt+0xbd4>
   111d0:	mov	r6, #1
   111d4:	b	10f28 <__assert_fail@plt+0x9c>
   111d8:	add	r3, r3, #1
   111dc:	mov	sl, #2
   111e0:	str	r3, [r2]
   111e4:	b	11038 <__assert_fail@plt+0x1ac>
   111e8:	add	r3, r3, #1
   111ec:	mov	sl, #5
   111f0:	str	r3, [r2]
   111f4:	b	11038 <__assert_fail@plt+0x1ac>
   111f8:	add	r3, r3, #1
   111fc:	mov	sl, #4
   11200:	str	r3, [r2]
   11204:	b	11038 <__assert_fail@plt+0x1ac>
   11208:	sub	r1, r1, #37	; 0x25
   1120c:	cmp	r1, #25
   11210:	ldrls	pc, [pc, r1, lsl #2]
   11214:	b	114f4 <__assert_fail@plt+0x668>
   11218:	andeq	r1, r1, r8, ror #3
   1121c:	strdeq	r1, [r1], -r4
   11220:	strdeq	r1, [r1], -r4
   11224:	strdeq	r1, [r1], -r4
   11228:	strdeq	r1, [r1], -r4
   1122c:	strdeq	r1, [r1], -r4
   11230:	strdeq	r1, [r1], -r4
   11234:	strdeq	r1, [r1], -r4
   11238:	strdeq	r1, [r1], -r4
   1123c:	strdeq	r1, [r1], -r4
   11240:	strdeq	r1, [r1], -r8
   11244:	strdeq	r1, [r1], -r4
   11248:	strdeq	r1, [r1], -r4
   1124c:	strdeq	r1, [r1], -r4
   11250:	strdeq	r1, [r1], -r4
   11254:	strdeq	r1, [r1], -r4
   11258:	strdeq	r1, [r1], -r4
   1125c:	strdeq	r1, [r1], -r4
   11260:	strdeq	r1, [r1], -r4
   11264:	strdeq	r1, [r1], -r4
   11268:	strdeq	r1, [r1], -r4
   1126c:	strdeq	r1, [r1], -r4
   11270:	strdeq	r1, [r1], -r4
   11274:	andeq	r1, r1, ip, lsr #32
   11278:	strdeq	r1, [r1], -r4
   1127c:	ldrdeq	r1, [r1], -r8
   11280:	movw	r3, #41296	; 0xa150
   11284:	movt	r3, #2
   11288:	mov	r2, r3
   1128c:	movw	r3, #41272	; 0xa138
   11290:	movt	r3, #2
   11294:	ldr	r8, [r2, #4]
   11298:	str	r2, [sp, #40]	; 0x28
   1129c:	ldr	r7, [r3]
   112a0:	cmp	r8, r4
   112a4:	sub	r3, r9, r7
   112a8:	add	r9, r5, r7, lsl #2
   112ac:	beq	11770 <__assert_fail@plt+0x8e4>
   112b0:	cmp	sl, #0
   112b4:	moveq	fp, r6
   112b8:	movne	fp, #0
   112bc:	cmp	fp, #0
   112c0:	bne	11a28 <__assert_fail@plt+0xb9c>
   112c4:	ldr	r2, [sp, #40]	; 0x28
   112c8:	ldrb	r4, [r2, #1]
   112cc:	eor	r4, r4, #1
   112d0:	orrs	r4, r6, r4
   112d4:	beq	119cc <__assert_fail@plt+0xb40>
   112d8:	cmp	r3, #0
   112dc:	ble	114c8 <__assert_fail@plt+0x63c>
   112e0:	mov	r1, r8
   112e4:	add	r2, sp, #88	; 0x58
   112e8:	mov	r0, #3
   112ec:	bl	10e5c <__xstat64@plt>
   112f0:	subs	r1, r0, #0
   112f4:	bne	11918 <__assert_fail@plt+0xa8c>
   112f8:	ldr	r3, [sp, #104]	; 0x68
   112fc:	and	r3, r3, #53248	; 0xd000
   11300:	cmp	r3, #32768	; 0x8000
   11304:	bne	11844 <__assert_fail@plt+0x9b8>
   11308:	ldrd	r2, [sp, #136]	; 0x88
   1130c:	cmp	r2, #0
   11310:	sbcs	r1, r3, #0
   11314:	blt	118a4 <__assert_fail@plt+0xa18>
   11318:	cmp	r6, #0
   1131c:	strdne	r2, [sp, #56]	; 0x38
   11320:	ldrdne	r2, [sp, #24]
   11324:	bne	11334 <__assert_fail@plt+0x4a8>
   11328:	mvn	r0, #0
   1132c:	mvn	r1, #0
   11330:	strd	r0, [sp, #56]	; 0x38
   11334:	strd	r2, [sp, #24]
   11338:	ldr	r3, [sp, #40]	; 0x28
   1133c:	movw	r2, #2049	; 0x801
   11340:	ldr	fp, [r5, r7, lsl #2]
   11344:	ldrb	r1, [r3]
   11348:	movw	r3, #2113	; 0x841
   1134c:	cmp	r1, #0
   11350:	moveq	r2, r3
   11354:	cmp	fp, #0
   11358:	str	r2, [sp, #32]
   1135c:	beq	11910 <__assert_fail@plt+0xa84>
   11360:	movw	r3, #35856	; 0x8c10
   11364:	movt	r3, #1
   11368:	str	sl, [sp, #44]	; 0x2c
   1136c:	cmp	sl, #0
   11370:	str	r3, [sp, #76]	; 0x4c
   11374:	movw	r3, #36020	; 0x8cb4
   11378:	movt	r3, #1
   1137c:	str	r3, [sp, #68]	; 0x44
   11380:	movw	r3, #35984	; 0x8c90
   11384:	movt	r3, #1
   11388:	str	r3, [sp, #72]	; 0x48
   1138c:	ldr	r3, [sp, #60]	; 0x3c
   11390:	moveq	r3, #0
   11394:	lsrne	r3, r3, #31
   11398:	str	r3, [sp, #64]	; 0x40
   1139c:	mov	r3, #0
   113a0:	mov	sl, r3
   113a4:	b	1140c <__assert_fail@plt+0x580>
   113a8:	ldrb	r5, [r3]
   113ac:	bl	10dc0 <__errno_location@plt>
   113b0:	ldr	r4, [r0]
   113b4:	cmp	r5, #0
   113b8:	beq	113c4 <__assert_fail@plt+0x538>
   113bc:	cmp	r4, #2
   113c0:	beq	11400 <__assert_fail@plt+0x574>
   113c4:	movw	r1, #35812	; 0x8be4
   113c8:	movt	r1, #1
   113cc:	mov	r2, #5
   113d0:	mov	r0, #0
   113d4:	bl	10cc4 <dcgettext@plt>
   113d8:	mov	r5, r0
   113dc:	mov	r1, fp
   113e0:	mov	r0, #4
   113e4:	mov	sl, #1
   113e8:	bl	146a8 <__assert_fail@plt+0x381c>
   113ec:	mov	r3, r0
   113f0:	mov	r2, r5
   113f4:	mov	r1, r4
   113f8:	mov	r0, #0
   113fc:	bl	10d3c <error@plt>
   11400:	ldr	fp, [r9, #4]!
   11404:	cmp	fp, #0
   11408:	beq	1170c <__assert_fail@plt+0x880>
   1140c:	movw	r2, #438	; 0x1b6
   11410:	mov	r0, fp
   11414:	ldr	r1, [sp, #32]
   11418:	bl	10d48 <open64@plt>
   1141c:	subs	r8, r0, #0
   11420:	ldr	r3, [sp, #40]	; 0x28
   11424:	blt	113a8 <__assert_fail@plt+0x51c>
   11428:	ldrb	r3, [r3, #1]
   1142c:	cmp	r3, #0
   11430:	bne	11590 <__assert_fail@plt+0x704>
   11434:	ldr	r3, [sp, #64]	; 0x40
   11438:	cmp	r3, #0
   1143c:	ldrdeq	r4, [sp, #24]
   11440:	beq	11500 <__assert_fail@plt+0x674>
   11444:	add	r2, sp, #88	; 0x58
   11448:	mov	r1, r8
   1144c:	mov	r0, #3
   11450:	bl	10cf4 <__fxstat64@plt>
   11454:	cmp	r0, #0
   11458:	ldrdeq	r4, [sp, #24]
   1145c:	beq	11730 <__assert_fail@plt+0x8a4>
   11460:	bl	10dc0 <__errno_location@plt>
   11464:	movw	r1, #35840	; 0x8c00
   11468:	movt	r1, #1
   1146c:	ldr	r5, [r0]
   11470:	mov	r2, #5
   11474:	mov	r0, #0
   11478:	bl	10cc4 <dcgettext@plt>
   1147c:	mov	r3, #0
   11480:	mov	r6, r0
   11484:	mov	r1, fp
   11488:	mov	r0, #4
   1148c:	str	r3, [sp, #48]	; 0x30
   11490:	bl	146a8 <__assert_fail@plt+0x381c>
   11494:	mov	r3, r0
   11498:	mov	r2, r6
   1149c:	mov	r1, r5
   114a0:	mov	r0, #0
   114a4:	bl	10d3c <error@plt>
   114a8:	mov	r0, r8
   114ac:	bl	10e80 <close@plt>
   114b0:	cmp	r0, #0
   114b4:	bne	1163c <__assert_fail@plt+0x7b0>
   114b8:	ldr	r3, [sp, #48]	; 0x30
   114bc:	eor	r4, r3, #1
   114c0:	orr	sl, sl, r4
   114c4:	b	11400 <__assert_fail@plt+0x574>
   114c8:	mov	r2, #5
   114cc:	movw	r1, #35744	; 0x8ba0
   114d0:	movt	r1, #1
   114d4:	mov	r0, #0
   114d8:	bl	10cc4 <dcgettext@plt>
   114dc:	mov	r2, r0
   114e0:	mov	r1, #0
   114e4:	mov	r0, r1
   114e8:	bl	10d3c <error@plt>
   114ec:	mov	r0, #1
   114f0:	bl	11b98 <__assert_fail@plt+0xd0c>
   114f4:	ldr	r6, [r2]
   114f8:	ldrb	r3, [r6]
   114fc:	b	11074 <__assert_fail@plt+0x1e8>
   11500:	ldr	r3, [sp, #44]	; 0x2c
   11504:	cmp	r3, #0
   11508:	bne	11668 <__assert_fail@plt+0x7dc>
   1150c:	cmp	r4, #0
   11510:	mov	r6, r4
   11514:	sbcs	r3, r5, #0
   11518:	mov	r7, r5
   1151c:	movlt	r6, #0
   11520:	movlt	r7, #0
   11524:	mov	r3, r7
   11528:	mov	r2, r6
   1152c:	mov	r0, r8
   11530:	bl	10ca0 <ftruncate64@plt>
   11534:	cmp	r0, #0
   11538:	moveq	r3, #1
   1153c:	streq	r3, [sp, #48]	; 0x30
   11540:	beq	114a8 <__assert_fail@plt+0x61c>
   11544:	bl	10dc0 <__errno_location@plt>
   11548:	ldr	r5, [r0]
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	ldr	r1, [sp, #72]	; 0x48
   11558:	str	r0, [sp, #48]	; 0x30
   1155c:	bl	10cc4 <dcgettext@plt>
   11560:	mov	r2, r0
   11564:	mov	r1, fp
   11568:	mov	r0, #4
   1156c:	str	r2, [sp, #80]	; 0x50
   11570:	bl	146a8 <__assert_fail@plt+0x381c>
   11574:	mov	r3, r0
   11578:	mov	r1, r5
   1157c:	strd	r6, [sp]
   11580:	mov	r0, #0
   11584:	ldr	r2, [sp, #80]	; 0x50
   11588:	bl	10d3c <error@plt>
   1158c:	b	114a8 <__assert_fail@plt+0x61c>
   11590:	add	r2, sp, #88	; 0x58
   11594:	mov	r1, r8
   11598:	mov	r0, #3
   1159c:	bl	10cf4 <__fxstat64@plt>
   115a0:	cmp	r0, #0
   115a4:	bne	11460 <__assert_fail@plt+0x5d4>
   115a8:	ldr	r6, [sp, #144]	; 0x90
   115ac:	sub	r3, r6, #1
   115b0:	cmp	r3, #536870912	; 0x20000000
   115b4:	ldrd	r2, [sp, #24]
   115b8:	movcs	r6, #512	; 0x200
   115bc:	mov	r1, r3
   115c0:	asr	r3, r6, #31
   115c4:	cmp	r1, r2, asr #31
   115c8:	mov	r2, r6
   115cc:	strd	r2, [sp, #48]	; 0x30
   115d0:	bne	11790 <__assert_fail@plt+0x904>
   115d4:	ldr	r3, [sp, #24]
   115d8:	smull	r2, r3, r3, r6
   115dc:	mov	r1, r2
   115e0:	mov	r2, r3
   115e4:	cmp	r0, #0
   115e8:	mov	r4, r1
   115ec:	mov	r5, r2
   115f0:	beq	11500 <__assert_fail@plt+0x674>
   115f4:	mov	r0, #0
   115f8:	mov	r2, #5
   115fc:	ldr	r1, [sp, #76]	; 0x4c
   11600:	str	r0, [sp, #48]	; 0x30
   11604:	bl	10cc4 <dcgettext@plt>
   11608:	mov	r5, r0
   1160c:	mov	r1, fp
   11610:	mov	r0, #4
   11614:	bl	146a8 <__assert_fail@plt+0x381c>
   11618:	mov	r2, r5
   1161c:	ldrd	r4, [sp, #24]
   11620:	mov	r1, #0
   11624:	strd	r4, [sp]
   11628:	str	r6, [sp, #8]
   1162c:	str	r0, [sp, #12]
   11630:	mov	r0, r1
   11634:	bl	10d3c <error@plt>
   11638:	b	114a8 <__assert_fail@plt+0x61c>
   1163c:	bl	10dc0 <__errno_location@plt>
   11640:	mov	r2, #5
   11644:	ldr	r4, [r0]
   11648:	mov	r0, #0
   1164c:	mov	sl, #1
   11650:	ldr	r1, [sp, #68]	; 0x44
   11654:	bl	10cc4 <dcgettext@plt>
   11658:	mov	r5, r0
   1165c:	mov	r1, fp
   11660:	mov	r0, #4
   11664:	b	113e8 <__assert_fail@plt+0x55c>
   11668:	ldrd	r0, [sp, #56]	; 0x38
   1166c:	mvn	r3, #0
   11670:	mvn	r2, #0
   11674:	cmp	r1, r3
   11678:	cmpeq	r0, r2
   1167c:	ldrdne	r6, [sp, #56]	; 0x38
   11680:	beq	11730 <__assert_fail@plt+0x8a4>
   11684:	ldr	r3, [sp, #44]	; 0x2c
   11688:	cmp	r3, #2
   1168c:	beq	1175c <__assert_fail@plt+0x8d0>
   11690:	ldr	r3, [sp, #44]	; 0x2c
   11694:	cmp	r3, #3
   11698:	beq	117d0 <__assert_fail@plt+0x944>
   1169c:	ldr	r3, [sp, #44]	; 0x2c
   116a0:	cmp	r3, #4
   116a4:	beq	117e8 <__assert_fail@plt+0x95c>
   116a8:	ldr	r3, [sp, #44]	; 0x2c
   116ac:	cmp	r3, #5
   116b0:	beq	118e8 <__assert_fail@plt+0xa5c>
   116b4:	adds	r2, r6, r4
   116b8:	adcs	r3, r7, r5
   116bc:	mov	r4, r2
   116c0:	mov	r5, r3
   116c4:	bvc	1150c <__assert_fail@plt+0x680>
   116c8:	movw	r1, #35948	; 0x8c6c
   116cc:	movt	r1, #1
   116d0:	mov	r2, #5
   116d4:	mov	r0, #0
   116d8:	bl	10cc4 <dcgettext@plt>
   116dc:	mov	r3, #0
   116e0:	mov	r5, r0
   116e4:	mov	r1, fp
   116e8:	mov	r0, #4
   116ec:	str	r3, [sp, #48]	; 0x30
   116f0:	bl	146a8 <__assert_fail@plt+0x381c>
   116f4:	mov	r1, #0
   116f8:	mov	r3, r0
   116fc:	mov	r2, r5
   11700:	mov	r0, r1
   11704:	bl	10d3c <error@plt>
   11708:	b	114a8 <__assert_fail@plt+0x61c>
   1170c:	mov	r3, sl
   11710:	mov	r0, r3
   11714:	add	sp, sp, #196	; 0xc4
   11718:	ldrd	r4, [sp]
   1171c:	ldrd	r6, [sp, #8]
   11720:	ldrd	r8, [sp, #16]
   11724:	ldrd	sl, [sp, #24]
   11728:	add	sp, sp, #32
   1172c:	pop	{pc}		; (ldr pc, [sp], #4)
   11730:	ldr	r3, [sp, #104]	; 0x68
   11734:	and	r3, r3, #53248	; 0xd000
   11738:	cmp	r3, #32768	; 0x8000
   1173c:	bne	11808 <__assert_fail@plt+0x97c>
   11740:	ldrd	r6, [sp, #136]	; 0x88
   11744:	cmp	r6, #0
   11748:	sbcs	r3, r7, #0
   1174c:	movwlt	r1, #35904	; 0x8c40
   11750:	movtlt	r1, #1
   11754:	bge	11684 <__assert_fail@plt+0x7f8>
   11758:	b	116d0 <__assert_fail@plt+0x844>
   1175c:	cmp	r6, r4
   11760:	sbcs	r3, r7, r5
   11764:	movlt	r6, r4
   11768:	movlt	r7, r5
   1176c:	b	11524 <__assert_fail@plt+0x698>
   11770:	cmp	r6, r4
   11774:	beq	11944 <__assert_fail@plt+0xab8>
   11778:	cmp	r3, #0
   1177c:	ble	114c8 <__assert_fail@plt+0x63c>
   11780:	mvn	r2, #0
   11784:	mvn	r3, #0
   11788:	strd	r2, [sp, #56]	; 0x38
   1178c:	b	11338 <__assert_fail@plt+0x4ac>
   11790:	ldrd	r2, [sp, #24]
   11794:	umull	r4, r5, r2, r6
   11798:	cmp	r3, #0
   1179c:	strd	r4, [sp, #80]	; 0x50
   117a0:	umull	r4, r5, r6, r3
   117a4:	bge	117b0 <__assert_fail@plt+0x924>
   117a8:	subs	r4, r4, r0
   117ac:	sbc	r5, r5, r6
   117b0:	ldr	ip, [sp, #84]	; 0x54
   117b4:	mov	r1, #0
   117b8:	adds	r2, r4, ip
   117bc:	adc	r1, r5, r1
   117c0:	cmp	r1, r2, asr #31
   117c4:	bne	1199c <__assert_fail@plt+0xb10>
   117c8:	ldr	r1, [sp, #80]	; 0x50
   117cc:	b	115e4 <__assert_fail@plt+0x758>
   117d0:	cmp	r6, r4
   117d4:	sbcs	r3, r7, r5
   117d8:	bge	1150c <__assert_fail@plt+0x680>
   117dc:	mov	r4, r6
   117e0:	mov	r5, r7
   117e4:	b	1150c <__assert_fail@plt+0x680>
   117e8:	mov	r2, r4
   117ec:	mov	r3, r5
   117f0:	mov	r0, r6
   117f4:	mov	r1, r7
   117f8:	bl	181bc <__assert_fail@plt+0x7330>
   117fc:	subs	r4, r6, r2
   11800:	sbc	r5, r7, r3
   11804:	b	1150c <__assert_fail@plt+0x680>
   11808:	mov	r1, #2
   1180c:	mov	r3, #0
   11810:	mov	r2, #0
   11814:	mov	r0, r8
   11818:	str	r1, [sp]
   1181c:	bl	10d0c <lseek64@plt>
   11820:	cmp	r0, #0
   11824:	mov	r6, r0
   11828:	sbcs	r3, r1, #0
   1182c:	mov	r7, r1
   11830:	bge	11684 <__assert_fail@plt+0x7f8>
   11834:	bl	10dc0 <__errno_location@plt>
   11838:	movw	r1, #35784	; 0x8bc8
   1183c:	movt	r1, #1
   11840:	b	1146c <__assert_fail@plt+0x5e0>
   11844:	mov	r0, r8
   11848:	bl	10d48 <open64@plt>
   1184c:	mov	r4, r0
   11850:	bl	10dc0 <__errno_location@plt>
   11854:	cmp	r4, #0
   11858:	mov	r8, r0
   1185c:	blt	118a4 <__assert_fail@plt+0xa18>
   11860:	mov	r1, #2
   11864:	mov	r2, #0
   11868:	mov	r3, #0
   1186c:	mov	r0, r4
   11870:	str	r1, [sp]
   11874:	bl	10d0c <lseek64@plt>
   11878:	mov	r2, r0
   1187c:	mov	r3, r1
   11880:	mov	r0, r4
   11884:	ldr	r4, [r8]
   11888:	strd	r2, [sp, #32]
   1188c:	bl	10e80 <close@plt>
   11890:	ldrd	r2, [sp, #32]
   11894:	cmp	r2, #0
   11898:	sbcs	r1, r3, #0
   1189c:	bge	11318 <__assert_fail@plt+0x48c>
   118a0:	str	r4, [r8]
   118a4:	bl	10dc0 <__errno_location@plt>
   118a8:	movw	r1, #35784	; 0x8bc8
   118ac:	movt	r1, #1
   118b0:	ldr	r4, [r0]
   118b4:	mov	r2, #5
   118b8:	mov	r0, #0
   118bc:	bl	10cc4 <dcgettext@plt>
   118c0:	ldr	r3, [sp, #40]	; 0x28
   118c4:	mov	r5, r0
   118c8:	mov	r0, #4
   118cc:	ldr	r1, [r3, #4]
   118d0:	bl	146a8 <__assert_fail@plt+0x381c>
   118d4:	mov	r3, r0
   118d8:	mov	r2, r5
   118dc:	mov	r1, r4
   118e0:	mov	r0, #1
   118e4:	bl	10d3c <error@plt>
   118e8:	mov	r2, r4
   118ec:	mov	r3, r5
   118f0:	mov	r0, r6
   118f4:	mov	r1, r7
   118f8:	bl	181bc <__assert_fail@plt+0x7330>
   118fc:	orrs	r1, r2, r3
   11900:	beq	117dc <__assert_fail@plt+0x950>
   11904:	subs	r4, r4, r2
   11908:	sbc	r5, r5, r3
   1190c:	b	116b4 <__assert_fail@plt+0x828>
   11910:	mov	r3, fp
   11914:	b	11710 <__assert_fail@plt+0x884>
   11918:	bl	10dc0 <__errno_location@plt>
   1191c:	movw	r1, #35768	; 0x8bb8
   11920:	movt	r1, #1
   11924:	ldr	r4, [r0]
   11928:	mov	r2, #5
   1192c:	mov	r0, fp
   11930:	bl	10cc4 <dcgettext@plt>
   11934:	mov	r5, r0
   11938:	mov	r1, r8
   1193c:	mov	r0, #4
   11940:	b	118d0 <__assert_fail@plt+0xa44>
   11944:	mov	r2, #5
   11948:	mov	r0, r6
   1194c:	movw	r1, #35604	; 0x8b14
   11950:	movt	r1, #1
   11954:	bl	10cc4 <dcgettext@plt>
   11958:	mov	r4, r0
   1195c:	movw	r1, #35640	; 0x8b38
   11960:	movt	r1, #1
   11964:	mov	r0, r6
   11968:	bl	159c4 <__assert_fail@plt+0x4b38>
   1196c:	mov	r5, r0
   11970:	movw	r1, #35648	; 0x8b40
   11974:	movt	r1, #1
   11978:	mov	r0, #1
   1197c:	bl	159c4 <__assert_fail@plt+0x4b38>
   11980:	mov	r3, r5
   11984:	mov	r2, r4
   11988:	str	r0, [sp]
   1198c:	mov	r1, r6
   11990:	mov	r0, r6
   11994:	bl	10d3c <error@plt>
   11998:	b	110e4 <__assert_fail@plt+0x258>
   1199c:	ldrd	r4, [sp, #24]
   119a0:	mov	r0, #1
   119a4:	ldr	lr, [sp, #48]	; 0x30
   119a8:	ldr	r2, [sp, #52]	; 0x34
   119ac:	mov	r3, r4
   119b0:	mul	r1, r4, r2
   119b4:	ldr	r2, [sp, #48]	; 0x30
   119b8:	mla	r4, lr, r5, r1
   119bc:	umull	r2, r3, r3, r2
   119c0:	mov	r1, r2
   119c4:	add	r2, r4, r3
   119c8:	b	115e4 <__assert_fail@plt+0x758>
   119cc:	mov	r2, #5
   119d0:	movw	r1, #35700	; 0x8b74
   119d4:	movt	r1, #1
   119d8:	mov	r0, r4
   119dc:	bl	10cc4 <dcgettext@plt>
   119e0:	mov	r5, r0
   119e4:	movw	r1, #35732	; 0x8b94
   119e8:	movt	r1, #1
   119ec:	mov	r0, r4
   119f0:	bl	159c4 <__assert_fail@plt+0x4b38>
   119f4:	mov	r6, r0
   119f8:	movw	r1, #35640	; 0x8b38
   119fc:	movt	r1, #1
   11a00:	mov	r0, #1
   11a04:	bl	159c4 <__assert_fail@plt+0x4b38>
   11a08:	mov	r3, r6
   11a0c:	mov	r2, r5
   11a10:	str	r0, [sp]
   11a14:	mov	r1, r4
   11a18:	mov	r0, r4
   11a1c:	bl	10d3c <error@plt>
   11a20:	mov	r0, #1
   11a24:	bl	11b98 <__assert_fail@plt+0xd0c>
   11a28:	mov	r2, #5
   11a2c:	movw	r1, #35660	; 0x8b4c
   11a30:	movt	r1, #1
   11a34:	mov	r0, r4
   11a38:	bl	10cc4 <dcgettext@plt>
   11a3c:	mov	r5, r0
   11a40:	movw	r1, #35640	; 0x8b38
   11a44:	movt	r1, #1
   11a48:	mov	r0, r4
   11a4c:	bl	159c4 <__assert_fail@plt+0x4b38>
   11a50:	mov	r6, r0
   11a54:	movw	r1, #35648	; 0x8b40
   11a58:	movt	r1, #1
   11a5c:	b	11a00 <__assert_fail@plt+0xb74>
   11a60:	mov	r2, #5
   11a64:	movw	r1, #35560	; 0x8ae8
   11a68:	movt	r1, #1
   11a6c:	mov	r0, r4
   11a70:	bl	10cc4 <dcgettext@plt>
   11a74:	mov	r2, r0
   11a78:	mov	r1, r4
   11a7c:	mov	r0, #1
   11a80:	bl	10d3c <error@plt>
   11a84:	mov	r2, #5
   11a88:	movw	r1, #35488	; 0x8aa0
   11a8c:	movt	r1, #1
   11a90:	mov	r0, r3
   11a94:	str	r3, [sp, #40]	; 0x28
   11a98:	bl	10cc4 <dcgettext@plt>
   11a9c:	mov	r2, r0
   11aa0:	b	114e0 <__assert_fail@plt+0x654>
   11aa4:	andeq	r8, r1, r8, lsl #9
   11aa8:	mov	fp, #0
   11aac:	mov	lr, #0
   11ab0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ab4:	mov	r2, sp
   11ab8:	push	{r2}		; (str r2, [sp, #-4]!)
   11abc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ac0:	ldr	ip, [pc, #16]	; 11ad8 <__assert_fail@plt+0xc4c>
   11ac4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ac8:	ldr	r0, [pc, #12]	; 11adc <__assert_fail@plt+0xc50>
   11acc:	ldr	r3, [pc, #12]	; 11ae0 <__assert_fail@plt+0xc54>
   11ad0:	bl	10d60 <__libc_start_main@plt>
   11ad4:	bl	10e74 <abort@plt>
   11ad8:	andeq	r8, r1, r8, lsr #8
   11adc:	muleq	r1, r8, lr
   11ae0:	andeq	r8, r1, r8, asr #7
   11ae4:	ldr	r3, [pc, #20]	; 11b00 <__assert_fail@plt+0xc74>
   11ae8:	ldr	r2, [pc, #20]	; 11b04 <__assert_fail@plt+0xc78>
   11aec:	add	r3, pc, r3
   11af0:	ldr	r2, [r3, r2]
   11af4:	cmp	r2, #0
   11af8:	bxeq	lr
   11afc:	b	10d78 <__gmon_start__@plt>
   11b00:	andeq	r8, r1, ip, lsl #10
   11b04:	ldrdeq	r0, [r0], -r8
   11b08:	ldr	r0, [pc, #24]	; 11b28 <__assert_fail@plt+0xc9c>
   11b0c:	ldr	r3, [pc, #24]	; 11b2c <__assert_fail@plt+0xca0>
   11b10:	cmp	r3, r0
   11b14:	bxeq	lr
   11b18:	ldr	r3, [pc, #16]	; 11b30 <__assert_fail@plt+0xca4>
   11b1c:	cmp	r3, #0
   11b20:	bxeq	lr
   11b24:	bx	r3
   11b28:	andeq	sl, r2, ip, lsr #2
   11b2c:	andeq	sl, r2, ip, lsr #2
   11b30:	andeq	r0, r0, r0
   11b34:	ldr	r0, [pc, #36]	; 11b60 <__assert_fail@plt+0xcd4>
   11b38:	ldr	r1, [pc, #36]	; 11b64 <__assert_fail@plt+0xcd8>
   11b3c:	sub	r1, r1, r0
   11b40:	asr	r1, r1, #2
   11b44:	add	r1, r1, r1, lsr #31
   11b48:	asrs	r1, r1, #1
   11b4c:	bxeq	lr
   11b50:	ldr	r3, [pc, #16]	; 11b68 <__assert_fail@plt+0xcdc>
   11b54:	cmp	r3, #0
   11b58:	bxeq	lr
   11b5c:	bx	r3
   11b60:	andeq	sl, r2, ip, lsr #2
   11b64:	andeq	sl, r2, ip, lsr #2
   11b68:	andeq	r0, r0, r0
   11b6c:	push	{r4, lr}
   11b70:	ldr	r4, [pc, #24]	; 11b90 <__assert_fail@plt+0xd04>
   11b74:	ldrb	r3, [r4]
   11b78:	cmp	r3, #0
   11b7c:	popne	{r4, pc}
   11b80:	bl	11b08 <__assert_fail@plt+0xc7c>
   11b84:	mov	r3, #1
   11b88:	strb	r3, [r4]
   11b8c:	pop	{r4, pc}
   11b90:	andeq	sl, r2, ip, asr #2
   11b94:	b	11b34 <__assert_fail@plt+0xca8>
   11b98:	subs	r6, r0, #0
   11b9c:	str	r7, [sp, #-8]!
   11ba0:	str	lr, [sp, #4]
   11ba4:	sub	sp, sp, #56	; 0x38
   11ba8:	beq	11bf0 <__assert_fail@plt+0xd64>
   11bac:	movw	r3, #41280	; 0xa140
   11bb0:	movt	r3, #2
   11bb4:	ldr	r4, [r3]
   11bb8:	mov	r2, #5
   11bbc:	movw	r1, #34052	; 0x8504
   11bc0:	movt	r1, #1
   11bc4:	mov	r0, #0
   11bc8:	bl	10cc4 <dcgettext@plt>
   11bcc:	movw	r3, #41312	; 0xa160
   11bd0:	movt	r3, #2
   11bd4:	mov	r2, r0
   11bd8:	mov	r1, #1
   11bdc:	ldr	r3, [r3]
   11be0:	mov	r0, r4
   11be4:	bl	10dfc <__fprintf_chk@plt>
   11be8:	mov	r0, r6
   11bec:	bl	10d9c <exit@plt>
   11bf0:	mov	r2, #5
   11bf4:	movw	r1, #34092	; 0x852c
   11bf8:	movt	r1, #1
   11bfc:	movw	r7, #41284	; 0xa144
   11c00:	movt	r7, #2
   11c04:	bl	10cc4 <dcgettext@plt>
   11c08:	movw	r3, #41312	; 0xa160
   11c0c:	movt	r3, #2
   11c10:	mov	r1, r0
   11c14:	mov	r0, #1
   11c18:	ldr	r2, [r3]
   11c1c:	bl	10de4 <__printf_chk@plt>
   11c20:	mov	r2, #5
   11c24:	movw	r1, #34124	; 0x854c
   11c28:	movt	r1, #1
   11c2c:	mov	r0, r6
   11c30:	bl	10cc4 <dcgettext@plt>
   11c34:	ldr	r1, [r7]
   11c38:	bl	10c40 <fputs_unlocked@plt>
   11c3c:	mov	r2, #5
   11c40:	movw	r1, #34400	; 0x8660
   11c44:	movt	r1, #1
   11c48:	mov	r0, r6
   11c4c:	bl	10cc4 <dcgettext@plt>
   11c50:	ldr	r1, [r7]
   11c54:	bl	10c40 <fputs_unlocked@plt>
   11c58:	mov	r2, #5
   11c5c:	movw	r1, #34476	; 0x86ac
   11c60:	movt	r1, #1
   11c64:	mov	r0, r6
   11c68:	bl	10cc4 <dcgettext@plt>
   11c6c:	ldr	r1, [r7]
   11c70:	bl	10c40 <fputs_unlocked@plt>
   11c74:	mov	r2, #5
   11c78:	movw	r1, #34528	; 0x86e0
   11c7c:	movt	r1, #1
   11c80:	mov	r0, r6
   11c84:	bl	10cc4 <dcgettext@plt>
   11c88:	ldr	r1, [r7]
   11c8c:	bl	10c40 <fputs_unlocked@plt>
   11c90:	mov	r2, #5
   11c94:	movw	r1, #34608	; 0x8730
   11c98:	movt	r1, #1
   11c9c:	mov	r0, r6
   11ca0:	bl	10cc4 <dcgettext@plt>
   11ca4:	ldr	r1, [r7]
   11ca8:	bl	10c40 <fputs_unlocked@plt>
   11cac:	mov	r2, #5
   11cb0:	movw	r1, #34720	; 0x87a0
   11cb4:	movt	r1, #1
   11cb8:	mov	r0, r6
   11cbc:	bl	10cc4 <dcgettext@plt>
   11cc0:	ldr	r1, [r7]
   11cc4:	bl	10c40 <fputs_unlocked@plt>
   11cc8:	mov	r2, #5
   11ccc:	movw	r1, #34768	; 0x87d0
   11cd0:	movt	r1, #1
   11cd4:	mov	r0, r6
   11cd8:	bl	10cc4 <dcgettext@plt>
   11cdc:	ldr	r1, [r7]
   11ce0:	bl	10c40 <fputs_unlocked@plt>
   11ce4:	mov	r2, #5
   11ce8:	movw	r1, #34824	; 0x8808
   11cec:	movt	r1, #1
   11cf0:	mov	r0, r6
   11cf4:	bl	10cc4 <dcgettext@plt>
   11cf8:	ldr	r1, [r7]
   11cfc:	bl	10c40 <fputs_unlocked@plt>
   11d00:	mov	r2, #5
   11d04:	movw	r1, #35036	; 0x88dc
   11d08:	movt	r1, #1
   11d0c:	mov	r0, r6
   11d10:	bl	10cc4 <dcgettext@plt>
   11d14:	ldr	r1, [r7]
   11d18:	bl	10c40 <fputs_unlocked@plt>
   11d1c:	movw	lr, #33872	; 0x8450
   11d20:	movt	lr, #1
   11d24:	ldr	ip, [lr]
   11d28:	ldr	r4, [lr, #4]
   11d2c:	ldrd	r8, [lr, #8]
   11d30:	subs	r1, ip, #0
   11d34:	str	ip, [sp]
   11d38:	ldrd	r2, [lr, #16]
   11d3c:	str	r4, [sp, #4]
   11d40:	ldrd	r4, [lr, #24]
   11d44:	strd	r8, [sp, #8]
   11d48:	ldrd	r8, [lr, #32]
   11d4c:	strd	r2, [sp, #16]
   11d50:	ldrd	r2, [lr, #40]	; 0x28
   11d54:	strd	r4, [sp, #24]
   11d58:	ldrd	r4, [lr, #48]	; 0x30
   11d5c:	strd	r8, [sp, #32]
   11d60:	strd	r2, [sp, #40]	; 0x28
   11d64:	strd	r4, [sp, #48]	; 0x30
   11d68:	movwne	r5, #34040	; 0x84f8
   11d6c:	mov	r4, sp
   11d70:	movtne	r5, #1
   11d74:	bne	11e6c <__assert_fail@plt+0xfe0>
   11d78:	ldr	r4, [r4, #4]
   11d7c:	movw	r1, #35228	; 0x899c
   11d80:	movt	r1, #1
   11d84:	mov	r2, #5
   11d88:	cmp	r4, #0
   11d8c:	beq	11e80 <__assert_fail@plt+0xff4>
   11d90:	mov	r0, #0
   11d94:	bl	10cc4 <dcgettext@plt>
   11d98:	mov	r1, r0
   11d9c:	movw	r3, #35252	; 0x89b4
   11da0:	movt	r3, #1
   11da4:	movw	r2, #35292	; 0x89dc
   11da8:	movt	r2, #1
   11dac:	mov	r0, #1
   11db0:	bl	10de4 <__printf_chk@plt>
   11db4:	mov	r1, #0
   11db8:	mov	r0, #5
   11dbc:	bl	10e20 <setlocale@plt>
   11dc0:	cmp	r0, #0
   11dc4:	movweq	r5, #34040	; 0x84f8
   11dc8:	movteq	r5, #1
   11dcc:	beq	11df0 <__assert_fail@plt+0xf64>
   11dd0:	movw	r1, #35308	; 0x89ec
   11dd4:	movt	r1, #1
   11dd8:	mov	r2, #3
   11ddc:	movw	r5, #34040	; 0x84f8
   11de0:	movt	r5, #1
   11de4:	bl	10e68 <strncmp@plt>
   11de8:	cmp	r0, #0
   11dec:	bne	11f38 <__assert_fail@plt+0x10ac>
   11df0:	mov	r2, #5
   11df4:	movw	r1, #35384	; 0x8a38
   11df8:	movt	r1, #1
   11dfc:	mov	r0, #0
   11e00:	bl	10cc4 <dcgettext@plt>
   11e04:	mov	r1, r0
   11e08:	movw	r3, #34040	; 0x84f8
   11e0c:	movt	r3, #1
   11e10:	movw	r2, #35252	; 0x89b4
   11e14:	movt	r2, #1
   11e18:	mov	r0, #1
   11e1c:	bl	10de4 <__printf_chk@plt>
   11e20:	mov	r2, #5
   11e24:	movw	r1, #35412	; 0x8a54
   11e28:	movt	r1, #1
   11e2c:	mov	r0, #0
   11e30:	bl	10cc4 <dcgettext@plt>
   11e34:	movw	r2, #36048	; 0x8cd0
   11e38:	movt	r2, #1
   11e3c:	cmp	r4, r5
   11e40:	movw	r3, #34120	; 0x8548
   11e44:	movt	r3, #1
   11e48:	mov	r1, r0
   11e4c:	moveq	r3, r2
   11e50:	mov	r2, r4
   11e54:	mov	r0, #1
   11e58:	bl	10de4 <__printf_chk@plt>
   11e5c:	b	11be8 <__assert_fail@plt+0xd5c>
   11e60:	ldr	r1, [r4, #8]!
   11e64:	cmp	r1, #0
   11e68:	beq	11d78 <__assert_fail@plt+0xeec>
   11e6c:	mov	r0, r5
   11e70:	bl	10c58 <strcmp@plt>
   11e74:	cmp	r0, #0
   11e78:	bne	11e60 <__assert_fail@plt+0xfd4>
   11e7c:	b	11d78 <__assert_fail@plt+0xeec>
   11e80:	mov	r0, r4
   11e84:	bl	10cc4 <dcgettext@plt>
   11e88:	mov	r1, r0
   11e8c:	movw	r3, #35252	; 0x89b4
   11e90:	movt	r3, #1
   11e94:	movw	r2, #35292	; 0x89dc
   11e98:	movt	r2, #1
   11e9c:	mov	r0, #1
   11ea0:	bl	10de4 <__printf_chk@plt>
   11ea4:	mov	r1, r4
   11ea8:	mov	r0, #5
   11eac:	bl	10e20 <setlocale@plt>
   11eb0:	cmp	r0, #0
   11eb4:	beq	11ed0 <__assert_fail@plt+0x1044>
   11eb8:	movw	r1, #35308	; 0x89ec
   11ebc:	movt	r1, #1
   11ec0:	mov	r2, #3
   11ec4:	bl	10e68 <strncmp@plt>
   11ec8:	cmp	r0, #0
   11ecc:	bne	11f2c <__assert_fail@plt+0x10a0>
   11ed0:	mov	r2, #5
   11ed4:	movw	r1, #35384	; 0x8a38
   11ed8:	movt	r1, #1
   11edc:	mov	r0, #0
   11ee0:	bl	10cc4 <dcgettext@plt>
   11ee4:	mov	r1, r0
   11ee8:	movw	r3, #34040	; 0x84f8
   11eec:	movt	r3, #1
   11ef0:	movw	r2, #35252	; 0x89b4
   11ef4:	movt	r2, #1
   11ef8:	mov	r0, #1
   11efc:	bl	10de4 <__printf_chk@plt>
   11f00:	movw	r1, #35412	; 0x8a54
   11f04:	movt	r1, #1
   11f08:	mov	r2, #5
   11f0c:	mov	r0, #0
   11f10:	bl	10cc4 <dcgettext@plt>
   11f14:	movw	r4, #34040	; 0x84f8
   11f18:	movt	r4, #1
   11f1c:	movw	r3, #36048	; 0x8cd0
   11f20:	movt	r3, #1
   11f24:	mov	r1, r0
   11f28:	b	11e50 <__assert_fail@plt+0xfc4>
   11f2c:	movw	r5, #34040	; 0x84f8
   11f30:	movt	r5, #1
   11f34:	mov	r4, r5
   11f38:	mov	r2, #5
   11f3c:	movw	r1, #35312	; 0x89f0
   11f40:	movt	r1, #1
   11f44:	mov	r0, #0
   11f48:	bl	10cc4 <dcgettext@plt>
   11f4c:	ldr	r1, [r7]
   11f50:	bl	10c40 <fputs_unlocked@plt>
   11f54:	b	11df0 <__assert_fail@plt+0xf64>
   11f58:	movw	r3, #41304	; 0xa158
   11f5c:	movt	r3, #2
   11f60:	str	r0, [r3]
   11f64:	bx	lr
   11f68:	movw	r3, #41304	; 0xa158
   11f6c:	movt	r3, #2
   11f70:	strb	r0, [r3, #4]
   11f74:	bx	lr
   11f78:	movw	r3, #41284	; 0xa144
   11f7c:	movt	r3, #2
   11f80:	strd	r4, [sp, #-16]!
   11f84:	ldr	r0, [r3]
   11f88:	str	r6, [sp, #8]
   11f8c:	str	lr, [sp, #12]
   11f90:	sub	sp, sp, #8
   11f94:	bl	17ce0 <__assert_fail@plt+0x6e54>
   11f98:	cmp	r0, #0
   11f9c:	beq	11fc8 <__assert_fail@plt+0x113c>
   11fa0:	movw	r4, #41304	; 0xa158
   11fa4:	movt	r4, #2
   11fa8:	ldrb	r6, [r4, #4]
   11fac:	bl	10dc0 <__errno_location@plt>
   11fb0:	mov	r5, r0
   11fb4:	cmp	r6, #0
   11fb8:	beq	11ff4 <__assert_fail@plt+0x1168>
   11fbc:	ldr	r3, [r0]
   11fc0:	cmp	r3, #32
   11fc4:	bne	11ff4 <__assert_fail@plt+0x1168>
   11fc8:	movw	r3, #41280	; 0xa140
   11fcc:	movt	r3, #2
   11fd0:	ldr	r0, [r3]
   11fd4:	bl	17ce0 <__assert_fail@plt+0x6e54>
   11fd8:	cmp	r0, #0
   11fdc:	bne	1203c <__assert_fail@plt+0x11b0>
   11fe0:	add	sp, sp, #8
   11fe4:	ldrd	r4, [sp]
   11fe8:	ldr	r6, [sp, #8]
   11fec:	add	sp, sp, #12
   11ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ff4:	movw	r1, #36224	; 0x8d80
   11ff8:	movt	r1, #1
   11ffc:	mov	r2, #5
   12000:	mov	r0, #0
   12004:	bl	10cc4 <dcgettext@plt>
   12008:	mov	r6, r0
   1200c:	ldr	r0, [r4]
   12010:	cmp	r0, #0
   12014:	beq	1204c <__assert_fail@plt+0x11c0>
   12018:	ldr	r4, [r5]
   1201c:	bl	14e58 <__assert_fail@plt+0x3fcc>
   12020:	mov	r3, r0
   12024:	movw	r2, #36236	; 0x8d8c
   12028:	movt	r2, #1
   1202c:	mov	r0, #0
   12030:	str	r6, [sp]
   12034:	mov	r1, r4
   12038:	bl	10d3c <error@plt>
   1203c:	movw	r3, #41192	; 0xa0e8
   12040:	movt	r3, #2
   12044:	ldr	r0, [r3]
   12048:	bl	10c7c <_exit@plt>
   1204c:	mov	r3, r6
   12050:	movw	r2, #36240	; 0x8d90
   12054:	movt	r2, #1
   12058:	ldr	r1, [r5]
   1205c:	bl	10d3c <error@plt>
   12060:	b	1203c <__assert_fail@plt+0x11b0>
   12064:	strd	r4, [sp, #-16]!
   12068:	subs	r4, r0, #0
   1206c:	str	r6, [sp, #8]
   12070:	str	lr, [sp, #12]
   12074:	beq	1210c <__assert_fail@plt+0x1280>
   12078:	mov	r1, #47	; 0x2f
   1207c:	bl	10e2c <strrchr@plt>
   12080:	subs	r5, r0, #0
   12084:	beq	120e4 <__assert_fail@plt+0x1258>
   12088:	add	r6, r5, #1
   1208c:	sub	r3, r6, r4
   12090:	cmp	r3, #6
   12094:	ble	120e4 <__assert_fail@plt+0x1258>
   12098:	movw	r1, #36300	; 0x8dcc
   1209c:	movt	r1, #1
   120a0:	mov	r2, #7
   120a4:	sub	r0, r5, #6
   120a8:	bl	10e68 <strncmp@plt>
   120ac:	cmp	r0, #0
   120b0:	bne	120e4 <__assert_fail@plt+0x1258>
   120b4:	movw	r1, #36308	; 0x8dd4
   120b8:	movt	r1, #1
   120bc:	mov	r2, #3
   120c0:	mov	r0, r6
   120c4:	bl	10e68 <strncmp@plt>
   120c8:	cmp	r0, #0
   120cc:	movne	r4, r6
   120d0:	bne	120e4 <__assert_fail@plt+0x1258>
   120d4:	add	r4, r5, #4
   120d8:	movw	r3, #41264	; 0xa130
   120dc:	movt	r3, #2
   120e0:	str	r4, [r3]
   120e4:	movw	r2, #41312	; 0xa160
   120e8:	movt	r2, #2
   120ec:	ldr	r6, [sp, #8]
   120f0:	movw	r3, #41268	; 0xa134
   120f4:	movt	r3, #2
   120f8:	str	r4, [r2]
   120fc:	str	r4, [r3]
   12100:	ldrd	r4, [sp]
   12104:	add	sp, sp, #12
   12108:	pop	{pc}		; (ldr pc, [sp], #4)
   1210c:	movw	r3, #41280	; 0xa140
   12110:	movt	r3, #2
   12114:	movw	r0, #36244	; 0x8d94
   12118:	movt	r0, #1
   1211c:	ldr	r3, [r3]
   12120:	mov	r2, #55	; 0x37
   12124:	mov	r1, #1
   12128:	bl	10d00 <fwrite@plt>
   1212c:	bl	10e74 <abort@plt>
   12130:	mov	r2, #5
   12134:	strd	r4, [sp, #-16]!
   12138:	mov	r5, r0
   1213c:	str	r6, [sp, #8]
   12140:	mov	r6, r1
   12144:	mov	r1, r0
   12148:	mov	r0, #0
   1214c:	str	lr, [sp, #12]
   12150:	bl	10cc4 <dcgettext@plt>
   12154:	cmp	r5, r0
   12158:	mov	r4, r0
   1215c:	beq	12174 <__assert_fail@plt+0x12e8>
   12160:	mov	r0, r4
   12164:	ldrd	r4, [sp]
   12168:	ldr	r6, [sp, #8]
   1216c:	add	sp, sp, #12
   12170:	pop	{pc}		; (ldr pc, [sp], #4)
   12174:	bl	17fac <__assert_fail@plt+0x7120>
   12178:	ldrb	r3, [r0]
   1217c:	bic	r3, r3, #32
   12180:	cmp	r3, #85	; 0x55
   12184:	bne	121ec <__assert_fail@plt+0x1360>
   12188:	ldrb	r3, [r0, #1]
   1218c:	bic	r3, r3, #32
   12190:	cmp	r3, #84	; 0x54
   12194:	bne	1226c <__assert_fail@plt+0x13e0>
   12198:	ldrb	r3, [r0, #2]
   1219c:	bic	r3, r3, #32
   121a0:	cmp	r3, #70	; 0x46
   121a4:	bne	1226c <__assert_fail@plt+0x13e0>
   121a8:	ldrb	r3, [r0, #3]
   121ac:	cmp	r3, #45	; 0x2d
   121b0:	bne	1226c <__assert_fail@plt+0x13e0>
   121b4:	ldrb	r3, [r0, #4]
   121b8:	cmp	r3, #56	; 0x38
   121bc:	bne	1226c <__assert_fail@plt+0x13e0>
   121c0:	ldrb	r3, [r0, #5]
   121c4:	cmp	r3, #0
   121c8:	bne	1226c <__assert_fail@plt+0x13e0>
   121cc:	ldrb	r2, [r4]
   121d0:	movw	r3, #36400	; 0x8e30
   121d4:	movt	r3, #1
   121d8:	movw	r4, #36412	; 0x8e3c
   121dc:	movt	r4, #1
   121e0:	cmp	r2, #96	; 0x60
   121e4:	movne	r4, r3
   121e8:	b	12160 <__assert_fail@plt+0x12d4>
   121ec:	cmp	r3, #71	; 0x47
   121f0:	bne	1226c <__assert_fail@plt+0x13e0>
   121f4:	ldrb	r3, [r0, #1]
   121f8:	bic	r3, r3, #32
   121fc:	cmp	r3, #66	; 0x42
   12200:	bne	1226c <__assert_fail@plt+0x13e0>
   12204:	ldrb	r3, [r0, #2]
   12208:	cmp	r3, #49	; 0x31
   1220c:	bne	1226c <__assert_fail@plt+0x13e0>
   12210:	ldrb	r3, [r0, #3]
   12214:	cmp	r3, #56	; 0x38
   12218:	bne	1226c <__assert_fail@plt+0x13e0>
   1221c:	ldrb	r3, [r0, #4]
   12220:	cmp	r3, #48	; 0x30
   12224:	bne	1226c <__assert_fail@plt+0x13e0>
   12228:	ldrb	r3, [r0, #5]
   1222c:	cmp	r3, #51	; 0x33
   12230:	bne	1226c <__assert_fail@plt+0x13e0>
   12234:	ldrb	r3, [r0, #6]
   12238:	cmp	r3, #48	; 0x30
   1223c:	bne	1226c <__assert_fail@plt+0x13e0>
   12240:	ldrb	r3, [r0, #7]
   12244:	cmp	r3, #0
   12248:	bne	1226c <__assert_fail@plt+0x13e0>
   1224c:	ldrb	r2, [r4]
   12250:	movw	r3, #36404	; 0x8e34
   12254:	movt	r3, #1
   12258:	movw	r4, #36408	; 0x8e38
   1225c:	movt	r4, #1
   12260:	cmp	r2, #96	; 0x60
   12264:	movne	r4, r3
   12268:	b	12160 <__assert_fail@plt+0x12d4>
   1226c:	movw	r3, #36416	; 0x8e40
   12270:	movt	r3, #1
   12274:	cmp	r6, #9
   12278:	movw	r4, #36396	; 0x8e2c
   1227c:	movt	r4, #1
   12280:	movne	r4, r3
   12284:	b	12160 <__assert_fail@plt+0x12d4>
   12288:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1228c:	strd	r6, [sp, #8]
   12290:	strd	r8, [sp, #16]
   12294:	mov	r8, r3
   12298:	strd	sl, [sp, #24]
   1229c:	mov	fp, r0
   122a0:	mov	sl, r1
   122a4:	str	lr, [sp, #32]
   122a8:	sub	sp, sp, #140	; 0x8c
   122ac:	ldr	r3, [sp, #180]	; 0xb4
   122b0:	str	r2, [sp, #28]
   122b4:	and	r4, r3, #2
   122b8:	ubfx	r3, r3, #1, #1
   122bc:	str	r3, [sp, #44]	; 0x2c
   122c0:	bl	10d18 <__ctype_get_mb_cur_max@plt>
   122c4:	ldr	r3, [sp, #176]	; 0xb0
   122c8:	str	r0, [sp, #76]	; 0x4c
   122cc:	cmp	r3, #10
   122d0:	ldrls	pc, [pc, r3, lsl #2]
   122d4:	b	13c70 <__assert_fail@plt+0x2de4>
   122d8:	andeq	r2, r1, r8, asr r7
   122dc:	andeq	r2, r1, r4, ror r8
   122e0:	strdeq	r2, [r1], -r0
   122e4:	andeq	r2, r1, r0, ror #17
   122e8:	andeq	r2, r1, r0, ror #12
   122ec:	ldrdeq	r2, [r1], -ip
   122f0:			; <UNDEFINED> instruction: 0x000127b4
   122f4:	andeq	r2, r1, ip, lsl r8
   122f8:	andeq	r2, r1, r4, lsl #6
   122fc:	andeq	r2, r1, r4, lsl #6
   12300:	andeq	r2, r1, r4, lsl #6
   12304:	ldr	r3, [sp, #176]	; 0xb0
   12308:	cmp	r3, #10
   1230c:	beq	12338 <__assert_fail@plt+0x14ac>
   12310:	mov	r1, r3
   12314:	movw	r0, #36420	; 0x8e44
   12318:	movt	r0, #1
   1231c:	bl	12130 <__assert_fail@plt+0x12a4>
   12320:	str	r0, [sp, #188]	; 0xbc
   12324:	movw	r0, #36416	; 0x8e40
   12328:	movt	r0, #1
   1232c:	ldr	r1, [sp, #176]	; 0xb0
   12330:	bl	12130 <__assert_fail@plt+0x12a4>
   12334:	str	r0, [sp, #192]	; 0xc0
   12338:	cmp	r4, #0
   1233c:	movne	r4, #0
   12340:	beq	139fc <__assert_fail@plt+0x2b70>
   12344:	mov	r5, #0
   12348:	ldr	r0, [sp, #192]	; 0xc0
   1234c:	mov	r9, r5
   12350:	str	r5, [sp, #64]	; 0x40
   12354:	bl	10da8 <strlen@plt>
   12358:	mov	r3, #1
   1235c:	ldr	r2, [sp, #44]	; 0x2c
   12360:	cmp	r0, r5
   12364:	moveq	r2, r5
   12368:	str	r3, [sp, #32]
   1236c:	str	r3, [sp, #48]	; 0x30
   12370:	str	r5, [sp, #52]	; 0x34
   12374:	str	r3, [sp, #60]	; 0x3c
   12378:	ldr	r3, [sp, #180]	; 0xb4
   1237c:	str	r0, [sp, #56]	; 0x38
   12380:	str	r5, [sp, #68]	; 0x44
   12384:	str	r5, [sp, #80]	; 0x50
   12388:	str	r5, [sp, #84]	; 0x54
   1238c:	and	r3, r3, #1
   12390:	str	r2, [sp, #88]	; 0x58
   12394:	str	r3, [sp, #92]	; 0x5c
   12398:	ldr	r3, [sp, #180]	; 0xb4
   1239c:	and	r3, r3, #4
   123a0:	str	r3, [sp, #96]	; 0x60
   123a4:	ldr	r3, [sp, #192]	; 0xc0
   123a8:	str	r3, [sp, #72]	; 0x48
   123ac:	mov	r3, fp
   123b0:	mov	r7, #0
   123b4:	mov	fp, r9
   123b8:	mov	r9, r3
   123bc:	cmn	r8, #1
   123c0:	beq	129c4 <__assert_fail@plt+0x1b38>
   123c4:	subs	r6, r8, r7
   123c8:	movne	r6, #1
   123cc:	cmp	r6, #0
   123d0:	beq	129dc <__assert_fail@plt+0x1b50>
   123d4:	ldr	r0, [sp, #28]
   123d8:	ldr	r3, [sp, #48]	; 0x30
   123dc:	cmp	r3, #0
   123e0:	add	r3, r0, r7
   123e4:	str	r3, [sp, #36]	; 0x24
   123e8:	beq	12e68 <__assert_fail@plt+0x1fdc>
   123ec:	ldr	r2, [sp, #56]	; 0x38
   123f0:	cmp	r2, #0
   123f4:	beq	13368 <__assert_fail@plt+0x24dc>
   123f8:	cmp	r2, #1
   123fc:	mov	r3, r2
   12400:	movls	r3, #0
   12404:	movhi	r3, #1
   12408:	cmn	r8, #1
   1240c:	add	r5, r7, r2
   12410:	movne	r3, #0
   12414:	cmp	r3, #0
   12418:	beq	12424 <__assert_fail@plt+0x1598>
   1241c:	bl	10da8 <strlen@plt>
   12420:	mov	r8, r0
   12424:	cmp	r5, r8
   12428:	bhi	13368 <__assert_fail@plt+0x24dc>
   1242c:	ldr	r0, [sp, #36]	; 0x24
   12430:	ldr	r2, [sp, #56]	; 0x38
   12434:	ldr	r1, [sp, #72]	; 0x48
   12438:	bl	10cac <memcmp@plt>
   1243c:	cmp	r0, #0
   12440:	bne	13368 <__assert_fail@plt+0x24dc>
   12444:	ldr	r3, [sp, #44]	; 0x2c
   12448:	cmp	r3, #0
   1244c:	bne	13b14 <__assert_fail@plt+0x2c88>
   12450:	ldr	r3, [sp, #36]	; 0x24
   12454:	ldrb	r5, [r3]
   12458:	cmp	r5, #126	; 0x7e
   1245c:	ldrls	pc, [pc, r5, lsl #2]
   12460:	b	138fc <__assert_fail@plt+0x2a70>
   12464:	andeq	r2, r1, r8, lsr fp
   12468:	strdeq	r3, [r1], -ip
   1246c:	strdeq	r3, [r1], -ip
   12470:	strdeq	r3, [r1], -ip
   12474:	strdeq	r3, [r1], -ip
   12478:	strdeq	r3, [r1], -ip
   1247c:	strdeq	r3, [r1], -ip
   12480:	muleq	r1, r0, sl
   12484:	andeq	r2, r1, r8, lsl #21
   12488:	muleq	r1, r8, sl
   1248c:	andeq	r2, r1, ip, lsl ip
   12490:	andeq	r2, r1, ip, lsl #24
   12494:	andeq	r2, r1, r4, lsr r9
   12498:	andeq	r2, r1, r8, ror #23
   1249c:	strdeq	r3, [r1], -ip
   124a0:	strdeq	r3, [r1], -ip
   124a4:	strdeq	r3, [r1], -ip
   124a8:	strdeq	r3, [r1], -ip
   124ac:	strdeq	r3, [r1], -ip
   124b0:	strdeq	r3, [r1], -ip
   124b4:	strdeq	r3, [r1], -ip
   124b8:	strdeq	r3, [r1], -ip
   124bc:	strdeq	r3, [r1], -ip
   124c0:	strdeq	r3, [r1], -ip
   124c4:	strdeq	r3, [r1], -ip
   124c8:	strdeq	r3, [r1], -ip
   124cc:	strdeq	r3, [r1], -ip
   124d0:	strdeq	r3, [r1], -ip
   124d4:	strdeq	r3, [r1], -ip
   124d8:	strdeq	r3, [r1], -ip
   124dc:	strdeq	r3, [r1], -ip
   124e0:	strdeq	r3, [r1], -ip
   124e4:	muleq	r1, r4, ip
   124e8:	andeq	r2, r1, r8, lsl #25
   124ec:	andeq	r2, r1, r8, lsl #25
   124f0:	andeq	r2, r1, ip, ror ip
   124f4:	andeq	r2, r1, r8, lsl #25
   124f8:	andeq	r2, r1, r0, ror #26
   124fc:	andeq	r2, r1, r8, lsl #25
   12500:	ldrdeq	r2, [r1], -r0
   12504:	andeq	r2, r1, r8, lsl #25
   12508:	andeq	r2, r1, r8, lsl #25
   1250c:	andeq	r2, r1, r8, lsl #25
   12510:	andeq	r2, r1, r0, ror #26
   12514:	andeq	r2, r1, r0, ror #26
   12518:	andeq	r2, r1, r0, ror #26
   1251c:	andeq	r2, r1, r0, ror #26
   12520:	andeq	r2, r1, r0, ror #26
   12524:	andeq	r2, r1, r0, ror #26
   12528:	andeq	r2, r1, r0, ror #26
   1252c:	andeq	r2, r1, r0, ror #26
   12530:	andeq	r2, r1, r0, ror #26
   12534:	andeq	r2, r1, r0, ror #26
   12538:	andeq	r2, r1, r0, ror #26
   1253c:	andeq	r2, r1, r0, ror #26
   12540:	andeq	r2, r1, r0, ror #26
   12544:	andeq	r2, r1, r0, ror #26
   12548:	andeq	r2, r1, r0, ror #26
   1254c:	andeq	r2, r1, r0, ror #26
   12550:	andeq	r2, r1, r8, lsl #25
   12554:	andeq	r2, r1, r8, lsl #25
   12558:	andeq	r2, r1, r8, lsl #25
   1255c:	andeq	r2, r1, r8, lsl #25
   12560:	andeq	r2, r1, r0, lsl #27
   12564:	strdeq	r3, [r1], -ip
   12568:	andeq	r2, r1, r0, ror #26
   1256c:	andeq	r2, r1, r0, ror #26
   12570:	andeq	r2, r1, r0, ror #26
   12574:	andeq	r2, r1, r0, ror #26
   12578:	andeq	r2, r1, r0, ror #26
   1257c:	andeq	r2, r1, r0, ror #26
   12580:	andeq	r2, r1, r0, ror #26
   12584:	andeq	r2, r1, r0, ror #26
   12588:	andeq	r2, r1, r0, ror #26
   1258c:	andeq	r2, r1, r0, ror #26
   12590:	andeq	r2, r1, r0, ror #26
   12594:	andeq	r2, r1, r0, ror #26
   12598:	andeq	r2, r1, r0, ror #26
   1259c:	andeq	r2, r1, r0, ror #26
   125a0:	andeq	r2, r1, r0, ror #26
   125a4:	andeq	r2, r1, r0, ror #26
   125a8:	andeq	r2, r1, r0, ror #26
   125ac:	andeq	r2, r1, r0, ror #26
   125b0:	andeq	r2, r1, r0, ror #26
   125b4:	andeq	r2, r1, r0, ror #26
   125b8:	andeq	r2, r1, r0, ror #26
   125bc:	andeq	r2, r1, r0, ror #26
   125c0:	andeq	r2, r1, r0, ror #26
   125c4:	andeq	r2, r1, r0, ror #26
   125c8:	andeq	r2, r1, r0, ror #26
   125cc:	andeq	r2, r1, r0, ror #26
   125d0:	andeq	r2, r1, r8, lsl #25
   125d4:	andeq	r2, r1, r4, lsr #26
   125d8:	andeq	r2, r1, r0, ror #26
   125dc:	andeq	r2, r1, r8, lsl #25
   125e0:	andeq	r2, r1, r0, ror #26
   125e4:	andeq	r2, r1, r8, lsl #25
   125e8:	andeq	r2, r1, r0, ror #26
   125ec:	andeq	r2, r1, r0, ror #26
   125f0:	andeq	r2, r1, r0, ror #26
   125f4:	andeq	r2, r1, r0, ror #26
   125f8:	andeq	r2, r1, r0, ror #26
   125fc:	andeq	r2, r1, r0, ror #26
   12600:	andeq	r2, r1, r0, ror #26
   12604:	andeq	r2, r1, r0, ror #26
   12608:	andeq	r2, r1, r0, ror #26
   1260c:	andeq	r2, r1, r0, ror #26
   12610:	andeq	r2, r1, r0, ror #26
   12614:	andeq	r2, r1, r0, ror #26
   12618:	andeq	r2, r1, r0, ror #26
   1261c:	andeq	r2, r1, r0, ror #26
   12620:	andeq	r2, r1, r0, ror #26
   12624:	andeq	r2, r1, r0, ror #26
   12628:	andeq	r2, r1, r0, ror #26
   1262c:	andeq	r2, r1, r0, ror #26
   12630:	andeq	r2, r1, r0, ror #26
   12634:	andeq	r2, r1, r0, ror #26
   12638:	andeq	r2, r1, r0, ror #26
   1263c:	andeq	r2, r1, r0, ror #26
   12640:	andeq	r2, r1, r0, ror #26
   12644:	andeq	r2, r1, r0, ror #26
   12648:	andeq	r2, r1, r0, ror #26
   1264c:	andeq	r2, r1, r0, ror #26
   12650:	andeq	r2, r1, r0, lsr ip
   12654:	andeq	r2, r1, r8, lsl #25
   12658:	andeq	r2, r1, r0, lsr ip
   1265c:	andeq	r2, r1, ip, ror ip
   12660:	ldr	r3, [sp, #180]	; 0xb4
   12664:	cmp	r4, #0
   12668:	and	r3, r3, #1
   1266c:	str	r3, [sp, #92]	; 0x5c
   12670:	ldr	r3, [sp, #180]	; 0xb4
   12674:	and	r3, r3, #4
   12678:	str	r3, [sp, #96]	; 0x60
   1267c:	moveq	r3, #1
   12680:	streq	r3, [sp, #60]	; 0x3c
   12684:	beq	12e14 <__assert_fail@plt+0x1f88>
   12688:	mov	r3, #0
   1268c:	mov	r2, #1
   12690:	mov	r4, r3
   12694:	mov	r9, r3
   12698:	str	r2, [sp, #32]
   1269c:	str	r2, [sp, #44]	; 0x2c
   126a0:	str	r3, [sp, #48]	; 0x30
   126a4:	str	r2, [sp, #52]	; 0x34
   126a8:	str	r2, [sp, #56]	; 0x38
   126ac:	str	r3, [sp, #60]	; 0x3c
   126b0:	str	r2, [sp, #64]	; 0x40
   126b4:	str	r2, [sp, #68]	; 0x44
   126b8:	str	r3, [sp, #80]	; 0x50
   126bc:	str	r3, [sp, #84]	; 0x54
   126c0:	str	r3, [sp, #88]	; 0x58
   126c4:	movw	r3, #36416	; 0x8e40
   126c8:	movt	r3, #1
   126cc:	str	r3, [sp, #72]	; 0x48
   126d0:	mov	r3, #2
   126d4:	str	r3, [sp, #176]	; 0xb0
   126d8:	b	123ac <__assert_fail@plt+0x1520>
   126dc:	ldr	r3, [sp, #180]	; 0xb4
   126e0:	cmp	r4, #0
   126e4:	and	r3, r3, #1
   126e8:	str	r3, [sp, #92]	; 0x5c
   126ec:	ldr	r3, [sp, #180]	; 0xb4
   126f0:	and	r3, r3, #4
   126f4:	str	r3, [sp, #96]	; 0x60
   126f8:	bne	13acc <__assert_fail@plt+0x2c40>
   126fc:	cmp	sl, #0
   12700:	beq	13878 <__assert_fail@plt+0x29ec>
   12704:	mov	r3, #34	; 0x22
   12708:	mov	r2, r4
   1270c:	mov	r1, #1
   12710:	mov	r9, r2
   12714:	strb	r3, [fp]
   12718:	movw	r3, #36396	; 0x8e2c
   1271c:	movt	r3, #1
   12720:	mov	r4, r1
   12724:	str	r1, [sp, #32]
   12728:	str	r2, [sp, #44]	; 0x2c
   1272c:	str	r1, [sp, #48]	; 0x30
   12730:	str	r2, [sp, #52]	; 0x34
   12734:	str	r1, [sp, #56]	; 0x38
   12738:	str	r1, [sp, #60]	; 0x3c
   1273c:	str	r2, [sp, #64]	; 0x40
   12740:	str	r2, [sp, #68]	; 0x44
   12744:	str	r3, [sp, #72]	; 0x48
   12748:	str	r2, [sp, #80]	; 0x50
   1274c:	str	r2, [sp, #84]	; 0x54
   12750:	str	r2, [sp, #88]	; 0x58
   12754:	b	123ac <__assert_fail@plt+0x1520>
   12758:	mov	r3, #0
   1275c:	mov	r2, #1
   12760:	mov	r9, r3
   12764:	str	r2, [sp, #32]
   12768:	str	r3, [sp, #44]	; 0x2c
   1276c:	str	r3, [sp, #48]	; 0x30
   12770:	str	r3, [sp, #52]	; 0x34
   12774:	str	r3, [sp, #60]	; 0x3c
   12778:	strd	r2, [sp, #64]	; 0x40
   1277c:	str	r3, [sp, #72]	; 0x48
   12780:	str	r3, [sp, #80]	; 0x50
   12784:	str	r3, [sp, #88]	; 0x58
   12788:	ldr	r3, [sp, #180]	; 0xb4
   1278c:	and	r3, r3, r2
   12790:	str	r3, [sp, #92]	; 0x5c
   12794:	ldr	r3, [sp, #180]	; 0xb4
   12798:	and	r3, r3, #4
   1279c:	str	r3, [sp, #96]	; 0x60
   127a0:	ldr	r3, [sp, #176]	; 0xb0
   127a4:	mov	r4, r3
   127a8:	str	r3, [sp, #56]	; 0x38
   127ac:	str	r3, [sp, #84]	; 0x54
   127b0:	b	123ac <__assert_fail@plt+0x1520>
   127b4:	mov	r3, #1
   127b8:	mov	r4, #0
   127bc:	mov	r9, r4
   127c0:	str	r3, [sp, #32]
   127c4:	str	r3, [sp, #44]	; 0x2c
   127c8:	str	r3, [sp, #48]	; 0x30
   127cc:	str	r4, [sp, #52]	; 0x34
   127d0:	str	r3, [sp, #56]	; 0x38
   127d4:	str	r3, [sp, #60]	; 0x3c
   127d8:	str	r3, [sp, #88]	; 0x58
   127dc:	movw	r3, #36396	; 0x8e2c
   127e0:	movt	r3, #1
   127e4:	str	r4, [sp, #64]	; 0x40
   127e8:	str	r4, [sp, #68]	; 0x44
   127ec:	str	r3, [sp, #72]	; 0x48
   127f0:	ldr	r3, [sp, #180]	; 0xb4
   127f4:	str	r4, [sp, #80]	; 0x50
   127f8:	str	r4, [sp, #84]	; 0x54
   127fc:	and	r3, r3, #1
   12800:	str	r3, [sp, #92]	; 0x5c
   12804:	ldr	r3, [sp, #180]	; 0xb4
   12808:	and	r3, r3, #4
   1280c:	str	r3, [sp, #96]	; 0x60
   12810:	mov	r3, #5
   12814:	str	r3, [sp, #176]	; 0xb0
   12818:	b	123ac <__assert_fail@plt+0x1520>
   1281c:	mov	r3, #1
   12820:	mov	r4, #0
   12824:	mov	r9, r4
   12828:	str	r3, [sp, #32]
   1282c:	str	r4, [sp, #44]	; 0x2c
   12830:	str	r3, [sp, #48]	; 0x30
   12834:	str	r3, [sp, #60]	; 0x3c
   12838:	ldr	r3, [sp, #180]	; 0xb4
   1283c:	str	r4, [sp, #52]	; 0x34
   12840:	str	r4, [sp, #56]	; 0x38
   12844:	str	r4, [sp, #64]	; 0x40
   12848:	str	r4, [sp, #68]	; 0x44
   1284c:	and	r3, r3, #1
   12850:	str	r4, [sp, #72]	; 0x48
   12854:	str	r4, [sp, #80]	; 0x50
   12858:	str	r4, [sp, #84]	; 0x54
   1285c:	str	r3, [sp, #92]	; 0x5c
   12860:	ldr	r3, [sp, #180]	; 0xb4
   12864:	str	r4, [sp, #88]	; 0x58
   12868:	and	r3, r3, #4
   1286c:	str	r3, [sp, #96]	; 0x60
   12870:	b	123ac <__assert_fail@plt+0x1520>
   12874:	mov	r3, #0
   12878:	mov	r2, #1
   1287c:	ldr	r1, [sp, #176]	; 0xb0
   12880:	mov	r4, r3
   12884:	mov	r9, r3
   12888:	movw	r3, #36416	; 0x8e40
   1288c:	movt	r3, #1
   12890:	str	r2, [sp, #32]
   12894:	str	r2, [sp, #44]	; 0x2c
   12898:	str	r4, [sp, #48]	; 0x30
   1289c:	strd	r2, [sp, #68]	; 0x44
   128a0:	ldr	r3, [sp, #180]	; 0xb4
   128a4:	str	r2, [sp, #52]	; 0x34
   128a8:	str	r1, [sp, #56]	; 0x38
   128ac:	str	r4, [sp, #60]	; 0x3c
   128b0:	str	r2, [sp, #64]	; 0x40
   128b4:	and	r3, r3, r2
   128b8:	str	r4, [sp, #80]	; 0x50
   128bc:	str	r4, [sp, #84]	; 0x54
   128c0:	str	r4, [sp, #88]	; 0x58
   128c4:	str	r3, [sp, #92]	; 0x5c
   128c8:	ldr	r3, [sp, #180]	; 0xb4
   128cc:	and	r3, r3, #4
   128d0:	str	r3, [sp, #96]	; 0x60
   128d4:	mov	r3, #2
   128d8:	str	r3, [sp, #176]	; 0xb0
   128dc:	b	123ac <__assert_fail@plt+0x1520>
   128e0:	mov	r3, #1
   128e4:	mov	r2, #0
   128e8:	mov	r4, r2
   128ec:	mov	r9, r2
   128f0:	str	r3, [sp, #32]
   128f4:	str	r3, [sp, #44]	; 0x2c
   128f8:	str	r2, [sp, #48]	; 0x30
   128fc:	str	r3, [sp, #52]	; 0x34
   12900:	str	r3, [sp, #56]	; 0x38
   12904:	str	r3, [sp, #60]	; 0x3c
   12908:	str	r3, [sp, #64]	; 0x40
   1290c:	str	r3, [sp, #68]	; 0x44
   12910:	str	r3, [sp, #88]	; 0x58
   12914:	movw	r3, #36416	; 0x8e40
   12918:	movt	r3, #1
   1291c:	str	r3, [sp, #72]	; 0x48
   12920:	ldr	r3, [sp, #180]	; 0xb4
   12924:	str	r2, [sp, #80]	; 0x50
   12928:	str	r2, [sp, #84]	; 0x54
   1292c:	and	r3, r3, #1
   12930:	b	128c4 <__assert_fail@plt+0x1a38>
   12934:	mov	r5, #102	; 0x66
   12938:	mov	r6, #0
   1293c:	ldr	r3, [sp, #44]	; 0x2c
   12940:	cmp	r3, #0
   12944:	bne	137f4 <__assert_fail@plt+0x2968>
   12948:	ldr	r2, [sp, #52]	; 0x34
   1294c:	eor	r3, fp, #1
   12950:	ands	r3, r2, r3
   12954:	beq	1298c <__assert_fail@plt+0x1b00>
   12958:	cmp	sl, r4
   1295c:	mov	fp, r3
   12960:	movhi	r2, #39	; 0x27
   12964:	strbhi	r2, [r9, r4]
   12968:	add	r2, r4, #1
   1296c:	cmp	sl, r2
   12970:	movhi	r1, #36	; 0x24
   12974:	strbhi	r1, [r9, r2]
   12978:	add	r2, r4, #2
   1297c:	add	r4, r4, #3
   12980:	cmp	sl, r2
   12984:	movhi	r1, #39	; 0x27
   12988:	strbhi	r1, [r9, r2]
   1298c:	cmp	sl, r4
   12990:	add	r7, r7, #1
   12994:	movhi	r3, #92	; 0x5c
   12998:	strbhi	r3, [r9, r4]
   1299c:	add	r4, r4, #1
   129a0:	cmp	r4, sl
   129a4:	ldr	r3, [sp, #32]
   129a8:	strbcc	r5, [r9, r4]
   129ac:	cmp	r6, #0
   129b0:	add	r4, r4, #1
   129b4:	moveq	r3, #0
   129b8:	cmn	r8, #1
   129bc:	str	r3, [sp, #32]
   129c0:	bne	123c4 <__assert_fail@plt+0x1538>
   129c4:	ldr	r3, [sp, #28]
   129c8:	ldrb	r6, [r3, r7]
   129cc:	adds	r6, r6, #0
   129d0:	movne	r6, #1
   129d4:	cmp	r6, #0
   129d8:	bne	123d4 <__assert_fail@plt+0x1548>
   129dc:	mov	r3, r9
   129e0:	mov	r9, fp
   129e4:	mov	fp, r3
   129e8:	ldr	r3, [sp, #68]	; 0x44
   129ec:	cmp	r4, #0
   129f0:	movne	r3, #0
   129f4:	cmp	r3, #0
   129f8:	bne	13bec <__assert_fail@plt+0x2d60>
   129fc:	ldr	r3, [sp, #44]	; 0x2c
   12a00:	ldr	r2, [sp, #52]	; 0x34
   12a04:	eor	r3, r3, #1
   12a08:	ands	r2, r3, r2
   12a0c:	beq	13b24 <__assert_fail@plt+0x2c98>
   12a10:	ldr	r3, [sp, #80]	; 0x50
   12a14:	cmp	r3, #0
   12a18:	beq	13b28 <__assert_fail@plt+0x2c9c>
   12a1c:	ldr	r3, [sp, #32]
   12a20:	cmp	r3, #0
   12a24:	bne	13b9c <__assert_fail@plt+0x2d10>
   12a28:	ldr	r3, [sp, #84]	; 0x54
   12a2c:	adds	r3, r3, #0
   12a30:	movne	r3, #1
   12a34:	cmp	sl, #0
   12a38:	movne	r3, #0
   12a3c:	cmp	r3, #0
   12a40:	ldreq	r2, [sp, #80]	; 0x50
   12a44:	beq	13b28 <__assert_fail@plt+0x2c9c>
   12a48:	ldr	r2, [sp, #84]	; 0x54
   12a4c:	mov	sl, r2
   12a50:	mov	r0, #0
   12a54:	mov	r4, #1
   12a58:	mov	r1, #39	; 0x27
   12a5c:	str	r0, [sp, #44]	; 0x2c
   12a60:	strb	r1, [fp]
   12a64:	str	r0, [sp, #48]	; 0x30
   12a68:	str	r4, [sp, #52]	; 0x34
   12a6c:	str	r4, [sp, #56]	; 0x38
   12a70:	str	r4, [sp, #64]	; 0x40
   12a74:	str	r0, [sp, #68]	; 0x44
   12a78:	str	r3, [sp, #80]	; 0x50
   12a7c:	str	r2, [sp, #84]	; 0x54
   12a80:	str	r0, [sp, #88]	; 0x58
   12a84:	b	126c4 <__assert_fail@plt+0x1838>
   12a88:	mov	r5, #98	; 0x62
   12a8c:	b	12938 <__assert_fail@plt+0x1aac>
   12a90:	mov	r5, #97	; 0x61
   12a94:	b	12938 <__assert_fail@plt+0x1aac>
   12a98:	ldr	r3, [sp, #48]	; 0x30
   12a9c:	str	r3, [sp, #40]	; 0x28
   12aa0:	mov	r3, #116	; 0x74
   12aa4:	ldr	r2, [sp, #68]	; 0x44
   12aa8:	cmp	r2, #0
   12aac:	bne	12ca8 <__assert_fail@plt+0x1e1c>
   12ab0:	ldr	r2, [sp, #60]	; 0x3c
   12ab4:	cmp	r2, #0
   12ab8:	bne	12c04 <__assert_fail@plt+0x1d78>
   12abc:	ldr	r3, [sp, #44]	; 0x2c
   12ac0:	mov	r6, #0
   12ac4:	cmp	r3, #0
   12ac8:	beq	12c74 <__assert_fail@plt+0x1de8>
   12acc:	mov	r3, fp
   12ad0:	ldr	r2, [sp, #184]	; 0xb8
   12ad4:	cmp	r2, #0
   12ad8:	beq	12af8 <__assert_fail@plt+0x1c6c>
   12adc:	ubfx	r1, r5, #5, #8
   12ae0:	mov	r0, r2
   12ae4:	and	r2, r5, #31
   12ae8:	ldr	r1, [r0, r1, lsl #2]
   12aec:	lsr	r2, r1, r2
   12af0:	tst	r2, #1
   12af4:	bne	1293c <__assert_fail@plt+0x1ab0>
   12af8:	ldr	r2, [sp, #40]	; 0x28
   12afc:	cmp	r2, #0
   12b00:	addeq	r7, r7, #1
   12b04:	bne	1293c <__assert_fail@plt+0x1ab0>
   12b08:	cmp	r3, #0
   12b0c:	beq	129a0 <__assert_fail@plt+0x1b14>
   12b10:	cmp	sl, r4
   12b14:	mov	fp, #0
   12b18:	movhi	r3, #39	; 0x27
   12b1c:	strbhi	r3, [r9, r4]
   12b20:	add	r3, r4, #1
   12b24:	add	r4, r4, #2
   12b28:	cmp	sl, r3
   12b2c:	movhi	r2, #39	; 0x27
   12b30:	strbhi	r2, [r9, r3]
   12b34:	b	129a0 <__assert_fail@plt+0x1b14>
   12b38:	ldr	r3, [sp, #48]	; 0x30
   12b3c:	str	r3, [sp, #40]	; 0x28
   12b40:	eor	r3, fp, #1
   12b44:	ldr	r2, [sp, #52]	; 0x34
   12b48:	ands	r2, r2, r3
   12b4c:	beq	1380c <__assert_fail@plt+0x2980>
   12b50:	cmp	sl, r4
   12b54:	movhi	r3, #39	; 0x27
   12b58:	strbhi	r3, [r9, r4]
   12b5c:	add	r3, r4, #1
   12b60:	cmp	sl, r3
   12b64:	movhi	r1, #36	; 0x24
   12b68:	strbhi	r1, [r9, r3]
   12b6c:	add	r3, r4, #2
   12b70:	cmp	sl, r3
   12b74:	movhi	r1, #39	; 0x27
   12b78:	strbhi	r1, [r9, r3]
   12b7c:	add	r3, r4, #3
   12b80:	cmp	sl, r3
   12b84:	bls	13858 <__assert_fail@plt+0x29cc>
   12b88:	mov	r4, r3
   12b8c:	mov	r3, #92	; 0x5c
   12b90:	mov	fp, r2
   12b94:	mov	r2, r4
   12b98:	strb	r3, [r9, r4]
   12b9c:	ldr	r3, [sp, #176]	; 0xb0
   12ba0:	add	r4, r4, #1
   12ba4:	cmp	r3, #2
   12ba8:	beq	138c0 <__assert_fail@plt+0x2a34>
   12bac:	add	r3, r7, #1
   12bb0:	cmp	r3, r8
   12bb4:	bcs	12bcc <__assert_fail@plt+0x1d40>
   12bb8:	ldr	r1, [sp, #28]
   12bbc:	ldrb	r3, [r1, r3]
   12bc0:	sub	r3, r3, #48	; 0x30
   12bc4:	cmp	r3, #9
   12bc8:	bls	138d0 <__assert_fail@plt+0x2a44>
   12bcc:	mov	r3, #0
   12bd0:	mov	r5, #48	; 0x30
   12bd4:	ldr	r6, [sp, #64]	; 0x40
   12bd8:	cmp	r6, #0
   12bdc:	beq	12ad0 <__assert_fail@plt+0x1c44>
   12be0:	mov	r6, #0
   12be4:	b	12af8 <__assert_fail@plt+0x1c6c>
   12be8:	ldr	r3, [sp, #48]	; 0x30
   12bec:	str	r3, [sp, #40]	; 0x28
   12bf0:	ldr	r2, [sp, #60]	; 0x3c
   12bf4:	mov	r5, #13
   12bf8:	mov	r3, #114	; 0x72
   12bfc:	cmp	r2, #0
   12c00:	beq	12abc <__assert_fail@plt+0x1c30>
   12c04:	mov	r5, r3
   12c08:	b	12938 <__assert_fail@plt+0x1aac>
   12c0c:	ldr	r3, [sp, #48]	; 0x30
   12c10:	str	r3, [sp, #40]	; 0x28
   12c14:	mov	r3, #118	; 0x76
   12c18:	b	12ab0 <__assert_fail@plt+0x1c24>
   12c1c:	ldr	r3, [sp, #48]	; 0x30
   12c20:	str	r3, [sp, #40]	; 0x28
   12c24:	mov	r5, #10
   12c28:	mov	r3, #110	; 0x6e
   12c2c:	b	12ab0 <__assert_fail@plt+0x1c24>
   12c30:	ldr	r3, [sp, #48]	; 0x30
   12c34:	cmn	r8, #1
   12c38:	str	r3, [sp, #40]	; 0x28
   12c3c:	beq	13084 <__assert_fail@plt+0x21f8>
   12c40:	subs	r3, r8, #1
   12c44:	movne	r3, #1
   12c48:	cmp	r3, #0
   12c4c:	bne	12c58 <__assert_fail@plt+0x1dcc>
   12c50:	cmp	r7, #0
   12c54:	beq	12c9c <__assert_fail@plt+0x1e10>
   12c58:	mov	r6, #0
   12c5c:	ldr	r3, [sp, #64]	; 0x40
   12c60:	cmp	r3, #0
   12c64:	beq	12acc <__assert_fail@plt+0x1c40>
   12c68:	ldr	r3, [sp, #44]	; 0x2c
   12c6c:	cmp	r3, #0
   12c70:	bne	12acc <__assert_fail@plt+0x1c40>
   12c74:	mov	r3, fp
   12c78:	b	12af8 <__assert_fail@plt+0x1c6c>
   12c7c:	ldr	r3, [sp, #48]	; 0x30
   12c80:	str	r3, [sp, #40]	; 0x28
   12c84:	b	12c50 <__assert_fail@plt+0x1dc4>
   12c88:	ldr	r3, [sp, #48]	; 0x30
   12c8c:	str	r3, [sp, #40]	; 0x28
   12c90:	b	12c58 <__assert_fail@plt+0x1dcc>
   12c94:	ldr	r6, [sp, #48]	; 0x30
   12c98:	str	r6, [sp, #40]	; 0x28
   12c9c:	ldr	r3, [sp, #68]	; 0x44
   12ca0:	cmp	r3, #0
   12ca4:	beq	12c5c <__assert_fail@plt+0x1dd0>
   12ca8:	mov	r3, #2
   12cac:	mov	fp, r9
   12cb0:	str	r3, [sp, #176]	; 0xb0
   12cb4:	ldr	r3, [sp, #60]	; 0x3c
   12cb8:	cmp	r3, #0
   12cbc:	ldr	r3, [sp, #176]	; 0xb0
   12cc0:	movne	r3, #4
   12cc4:	str	r3, [sp, #176]	; 0xb0
   12cc8:	mov	lr, #0
   12ccc:	mov	r0, fp
   12cd0:	ldr	r2, [sp, #28]
   12cd4:	ldr	r3, [sp, #180]	; 0xb4
   12cd8:	ldr	r1, [sp, #188]	; 0xbc
   12cdc:	bic	ip, r3, #2
   12ce0:	ldr	r3, [sp, #176]	; 0xb0
   12ce4:	stm	sp, {r3, ip, lr}
   12ce8:	mov	r3, r8
   12cec:	ldr	ip, [sp, #192]	; 0xc0
   12cf0:	str	r1, [sp, #12]
   12cf4:	mov	r1, sl
   12cf8:	str	ip, [sp, #16]
   12cfc:	bl	12288 <__assert_fail@plt+0x13fc>
   12d00:	mov	r4, r0
   12d04:	mov	r0, r4
   12d08:	add	sp, sp, #140	; 0x8c
   12d0c:	ldrd	r4, [sp]
   12d10:	ldrd	r6, [sp, #8]
   12d14:	ldrd	r8, [sp, #16]
   12d18:	ldrd	sl, [sp, #24]
   12d1c:	add	sp, sp, #32
   12d20:	pop	{pc}		; (ldr pc, [sp], #4)
   12d24:	ldr	r3, [sp, #48]	; 0x30
   12d28:	str	r3, [sp, #40]	; 0x28
   12d2c:	ldr	r3, [sp, #176]	; 0xb0
   12d30:	cmp	r3, #2
   12d34:	beq	130ac <__assert_fail@plt+0x2220>
   12d38:	ldr	r3, [sp, #88]	; 0x58
   12d3c:	cmp	r3, #0
   12d40:	moveq	r5, #92	; 0x5c
   12d44:	moveq	r3, r5
   12d48:	beq	12ab0 <__assert_fail@plt+0x1c24>
   12d4c:	add	r7, r7, #1
   12d50:	mov	r3, fp
   12d54:	mov	r6, #0
   12d58:	mov	r5, #92	; 0x5c
   12d5c:	b	12b08 <__assert_fail@plt+0x1c7c>
   12d60:	ldr	r3, [sp, #64]	; 0x40
   12d64:	cmp	r3, #0
   12d68:	bne	13be0 <__assert_fail@plt+0x2d54>
   12d6c:	ldr	r2, [sp, #48]	; 0x30
   12d70:	mov	r3, fp
   12d74:	mov	r6, r2
   12d78:	str	r2, [sp, #40]	; 0x28
   12d7c:	b	12ad0 <__assert_fail@plt+0x1c44>
   12d80:	ldr	r3, [sp, #176]	; 0xb0
   12d84:	cmp	r3, #2
   12d88:	beq	13b1c <__assert_fail@plt+0x2c90>
   12d8c:	cmp	r3, #5
   12d90:	ldr	r3, [sp, #48]	; 0x30
   12d94:	str	r3, [sp, #40]	; 0x28
   12d98:	bne	12dc4 <__assert_fail@plt+0x1f38>
   12d9c:	ldr	r3, [sp, #96]	; 0x60
   12da0:	cmp	r3, #0
   12da4:	beq	13820 <__assert_fail@plt+0x2994>
   12da8:	add	r3, r7, #2
   12dac:	cmp	r3, r8
   12db0:	bcs	12dc4 <__assert_fail@plt+0x1f38>
   12db4:	ldr	r2, [sp, #36]	; 0x24
   12db8:	ldrb	r5, [r2, #1]
   12dbc:	cmp	r5, #63	; 0x3f
   12dc0:	beq	13908 <__assert_fail@plt+0x2a7c>
   12dc4:	mov	r6, #0
   12dc8:	mov	r5, #63	; 0x3f
   12dcc:	b	12c5c <__assert_fail@plt+0x1dd0>
   12dd0:	ldr	r3, [sp, #176]	; 0xb0
   12dd4:	cmp	r3, #2
   12dd8:	ldr	r3, [sp, #48]	; 0x30
   12ddc:	beq	135c4 <__assert_fail@plt+0x2738>
   12de0:	mov	r5, #39	; 0x27
   12de4:	str	r3, [sp, #40]	; 0x28
   12de8:	str	r6, [sp, #80]	; 0x50
   12dec:	b	12c5c <__assert_fail@plt+0x1dd0>
   12df0:	ldr	r3, [sp, #180]	; 0xb4
   12df4:	cmp	r4, #0
   12df8:	and	r3, r3, #1
   12dfc:	str	r3, [sp, #92]	; 0x5c
   12e00:	ldr	r3, [sp, #180]	; 0xb4
   12e04:	and	r3, r3, #4
   12e08:	str	r3, [sp, #96]	; 0x60
   12e0c:	bne	13c2c <__assert_fail@plt+0x2da0>
   12e10:	str	r4, [sp, #60]	; 0x3c
   12e14:	cmp	sl, #0
   12e18:	bne	13c10 <__assert_fail@plt+0x2d84>
   12e1c:	mov	r3, #1
   12e20:	movw	r2, #36416	; 0x8e40
   12e24:	movt	r2, #1
   12e28:	mov	r4, r3
   12e2c:	mov	r3, #2
   12e30:	mov	r9, sl
   12e34:	str	r4, [sp, #32]
   12e38:	str	sl, [sp, #44]	; 0x2c
   12e3c:	str	sl, [sp, #48]	; 0x30
   12e40:	str	r4, [sp, #52]	; 0x34
   12e44:	str	r4, [sp, #56]	; 0x38
   12e48:	str	r4, [sp, #64]	; 0x40
   12e4c:	str	sl, [sp, #68]	; 0x44
   12e50:	str	r2, [sp, #72]	; 0x48
   12e54:	str	sl, [sp, #80]	; 0x50
   12e58:	str	sl, [sp, #84]	; 0x54
   12e5c:	str	sl, [sp, #88]	; 0x58
   12e60:	str	r3, [sp, #176]	; 0xb0
   12e64:	b	123ac <__assert_fail@plt+0x1520>
   12e68:	ldrb	r5, [r0, r7]
   12e6c:	cmp	r5, #126	; 0x7e
   12e70:	ldrls	pc, [pc, r5, lsl #2]
   12e74:	b	131d8 <__assert_fail@plt+0x234c>
   12e78:	andeq	r3, r1, r4, lsr #3
   12e7c:	ldrdeq	r3, [r1], -r8
   12e80:	ldrdeq	r3, [r1], -r8
   12e84:	ldrdeq	r3, [r1], -r8
   12e88:	ldrdeq	r3, [r1], -r8
   12e8c:	ldrdeq	r3, [r1], -r8
   12e90:	ldrdeq	r3, [r1], -r8
   12e94:	muleq	r1, r4, r1
   12e98:	andeq	r3, r1, r4, lsl #3
   12e9c:	andeq	r3, r1, r8, lsl #2
   12ea0:	andeq	r3, r1, r4, ror r1
   12ea4:	andeq	r3, r1, r8, ror #1
   12ea8:	andeq	r3, r1, r8, asr #3
   12eac:	andeq	r3, r1, r4, asr r1
   12eb0:	ldrdeq	r3, [r1], -r8
   12eb4:	ldrdeq	r3, [r1], -r8
   12eb8:	ldrdeq	r3, [r1], -r8
   12ebc:	ldrdeq	r3, [r1], -r8
   12ec0:	ldrdeq	r3, [r1], -r8
   12ec4:	ldrdeq	r3, [r1], -r8
   12ec8:	ldrdeq	r3, [r1], -r8
   12ecc:	ldrdeq	r3, [r1], -r8
   12ed0:	ldrdeq	r3, [r1], -r8
   12ed4:	ldrdeq	r3, [r1], -r8
   12ed8:	ldrdeq	r3, [r1], -r8
   12edc:	ldrdeq	r3, [r1], -r8
   12ee0:	ldrdeq	r3, [r1], -r8
   12ee4:	ldrdeq	r3, [r1], -r8
   12ee8:	ldrdeq	r3, [r1], -r8
   12eec:	ldrdeq	r3, [r1], -r8
   12ef0:	ldrdeq	r3, [r1], -r8
   12ef4:	ldrdeq	r3, [r1], -r8
   12ef8:	strdeq	r3, [r1], -ip
   12efc:	andeq	r3, r1, r4, ror #2
   12f00:	andeq	r3, r1, r4, ror #2
   12f04:	ldrdeq	r3, [r1], -ip
   12f08:	andeq	r3, r1, r4, ror #2
   12f0c:	ldrdeq	r3, [r1], -r0
   12f10:	andeq	r3, r1, r4, ror #2
   12f14:	andeq	r3, r1, r0, asr #2
   12f18:	andeq	r3, r1, r4, ror #2
   12f1c:	andeq	r3, r1, r4, ror #2
   12f20:	andeq	r3, r1, r4, ror #2
   12f24:	ldrdeq	r3, [r1], -r0
   12f28:	ldrdeq	r3, [r1], -r0
   12f2c:	ldrdeq	r3, [r1], -r0
   12f30:	ldrdeq	r3, [r1], -r0
   12f34:	ldrdeq	r3, [r1], -r0
   12f38:	ldrdeq	r3, [r1], -r0
   12f3c:	ldrdeq	r3, [r1], -r0
   12f40:	ldrdeq	r3, [r1], -r0
   12f44:	ldrdeq	r3, [r1], -r0
   12f48:	ldrdeq	r3, [r1], -r0
   12f4c:	ldrdeq	r3, [r1], -r0
   12f50:	ldrdeq	r3, [r1], -r0
   12f54:	ldrdeq	r3, [r1], -r0
   12f58:	ldrdeq	r3, [r1], -r0
   12f5c:	ldrdeq	r3, [r1], -r0
   12f60:	ldrdeq	r3, [r1], -r0
   12f64:	andeq	r3, r1, r4, ror #2
   12f68:	andeq	r3, r1, r4, ror #2
   12f6c:	andeq	r3, r1, r4, ror #2
   12f70:	andeq	r3, r1, r4, ror #2
   12f74:	andeq	r3, r1, r8, lsl r1
   12f78:	ldrdeq	r3, [r1], -r8
   12f7c:	ldrdeq	r3, [r1], -r0
   12f80:	ldrdeq	r3, [r1], -r0
   12f84:	ldrdeq	r3, [r1], -r0
   12f88:	ldrdeq	r3, [r1], -r0
   12f8c:	ldrdeq	r3, [r1], -r0
   12f90:	ldrdeq	r3, [r1], -r0
   12f94:	ldrdeq	r3, [r1], -r0
   12f98:	ldrdeq	r3, [r1], -r0
   12f9c:	ldrdeq	r3, [r1], -r0
   12fa0:	ldrdeq	r3, [r1], -r0
   12fa4:	ldrdeq	r3, [r1], -r0
   12fa8:	ldrdeq	r3, [r1], -r0
   12fac:	ldrdeq	r3, [r1], -r0
   12fb0:	ldrdeq	r3, [r1], -r0
   12fb4:	ldrdeq	r3, [r1], -r0
   12fb8:	ldrdeq	r3, [r1], -r0
   12fbc:	ldrdeq	r3, [r1], -r0
   12fc0:	ldrdeq	r3, [r1], -r0
   12fc4:	ldrdeq	r3, [r1], -r0
   12fc8:	ldrdeq	r3, [r1], -r0
   12fcc:	ldrdeq	r3, [r1], -r0
   12fd0:	ldrdeq	r3, [r1], -r0
   12fd4:	ldrdeq	r3, [r1], -r0
   12fd8:	ldrdeq	r3, [r1], -r0
   12fdc:	ldrdeq	r3, [r1], -r0
   12fe0:	ldrdeq	r3, [r1], -r0
   12fe4:	andeq	r3, r1, r4, ror #2
   12fe8:	muleq	r1, r8, r0
   12fec:	ldrdeq	r3, [r1], -r0
   12ff0:	andeq	r3, r1, r4, ror #2
   12ff4:	ldrdeq	r3, [r1], -r0
   12ff8:	andeq	r3, r1, r4, ror #2
   12ffc:	ldrdeq	r3, [r1], -r0
   13000:	ldrdeq	r3, [r1], -r0
   13004:	ldrdeq	r3, [r1], -r0
   13008:	ldrdeq	r3, [r1], -r0
   1300c:	ldrdeq	r3, [r1], -r0
   13010:	ldrdeq	r3, [r1], -r0
   13014:	ldrdeq	r3, [r1], -r0
   13018:	ldrdeq	r3, [r1], -r0
   1301c:	ldrdeq	r3, [r1], -r0
   13020:	ldrdeq	r3, [r1], -r0
   13024:	ldrdeq	r3, [r1], -r0
   13028:	ldrdeq	r3, [r1], -r0
   1302c:	ldrdeq	r3, [r1], -r0
   13030:	ldrdeq	r3, [r1], -r0
   13034:	ldrdeq	r3, [r1], -r0
   13038:	ldrdeq	r3, [r1], -r0
   1303c:	ldrdeq	r3, [r1], -r0
   13040:	ldrdeq	r3, [r1], -r0
   13044:	ldrdeq	r3, [r1], -r0
   13048:	ldrdeq	r3, [r1], -r0
   1304c:	ldrdeq	r3, [r1], -r0
   13050:	ldrdeq	r3, [r1], -r0
   13054:	ldrdeq	r3, [r1], -r0
   13058:	ldrdeq	r3, [r1], -r0
   1305c:	ldrdeq	r3, [r1], -r0
   13060:	ldrdeq	r3, [r1], -r0
   13064:	andeq	r3, r1, r4, ror r0
   13068:	andeq	r3, r1, r4, ror #2
   1306c:	andeq	r3, r1, r4, ror r0
   13070:	ldrdeq	r3, [r1], -ip
   13074:	mov	r3, #0
   13078:	cmn	r8, #1
   1307c:	str	r3, [sp, #40]	; 0x28
   13080:	bne	12c40 <__assert_fail@plt+0x1db4>
   13084:	ldr	r3, [sp, #28]
   13088:	ldrb	r3, [r3, #1]
   1308c:	adds	r3, r3, #0
   13090:	movne	r3, #1
   13094:	b	12c48 <__assert_fail@plt+0x1dbc>
   13098:	mov	r3, #0
   1309c:	str	r3, [sp, #40]	; 0x28
   130a0:	ldr	r3, [sp, #176]	; 0xb0
   130a4:	cmp	r3, #2
   130a8:	bne	12d38 <__assert_fail@plt+0x1eac>
   130ac:	ldr	r3, [sp, #44]	; 0x2c
   130b0:	cmp	r3, #0
   130b4:	bne	139f4 <__assert_fail@plt+0x2b68>
   130b8:	mov	r6, r3
   130bc:	add	r7, r7, #1
   130c0:	mov	r3, fp
   130c4:	mov	r5, #92	; 0x5c
   130c8:	b	12b08 <__assert_fail@plt+0x1c7c>
   130cc:	ldr	r6, [sp, #48]	; 0x30
   130d0:	mov	r3, #0
   130d4:	str	r3, [sp, #40]	; 0x28
   130d8:	b	12c5c <__assert_fail@plt+0x1dd0>
   130dc:	mov	r3, #0
   130e0:	str	r3, [sp, #40]	; 0x28
   130e4:	b	12c50 <__assert_fail@plt+0x1dc4>
   130e8:	mov	r3, #0
   130ec:	str	r3, [sp, #40]	; 0x28
   130f0:	mov	r3, #118	; 0x76
   130f4:	b	12ab0 <__assert_fail@plt+0x1c24>
   130f8:	ldr	r6, [sp, #48]	; 0x30
   130fc:	mov	r3, #0
   13100:	str	r3, [sp, #40]	; 0x28
   13104:	b	12c9c <__assert_fail@plt+0x1e10>
   13108:	mov	r3, #0
   1310c:	str	r3, [sp, #40]	; 0x28
   13110:	mov	r3, #116	; 0x74
   13114:	b	12aa4 <__assert_fail@plt+0x1c18>
   13118:	ldr	r3, [sp, #176]	; 0xb0
   1311c:	cmp	r3, #2
   13120:	beq	13630 <__assert_fail@plt+0x27a4>
   13124:	cmp	r3, #5
   13128:	mov	r3, #0
   1312c:	str	r3, [sp, #40]	; 0x28
   13130:	beq	12d9c <__assert_fail@plt+0x1f10>
   13134:	mov	r6, #0
   13138:	mov	r5, #63	; 0x3f
   1313c:	b	12c5c <__assert_fail@plt+0x1dd0>
   13140:	ldr	r3, [sp, #176]	; 0xb0
   13144:	cmp	r3, #2
   13148:	beq	135b8 <__assert_fail@plt+0x272c>
   1314c:	mov	r3, #0
   13150:	b	12de0 <__assert_fail@plt+0x1f54>
   13154:	mov	r3, #0
   13158:	str	r3, [sp, #40]	; 0x28
   1315c:	mov	r3, #114	; 0x72
   13160:	b	12aa4 <__assert_fail@plt+0x1c18>
   13164:	mov	r3, #0
   13168:	mov	r6, r3
   1316c:	str	r3, [sp, #40]	; 0x28
   13170:	b	12c9c <__assert_fail@plt+0x1e10>
   13174:	mov	r3, #0
   13178:	str	r3, [sp, #40]	; 0x28
   1317c:	mov	r3, #110	; 0x6e
   13180:	b	12aa4 <__assert_fail@plt+0x1c18>
   13184:	mov	r3, #0
   13188:	str	r3, [sp, #40]	; 0x28
   1318c:	mov	r3, #98	; 0x62
   13190:	b	12ab0 <__assert_fail@plt+0x1c24>
   13194:	mov	r3, #0
   13198:	str	r3, [sp, #40]	; 0x28
   1319c:	mov	r3, #97	; 0x61
   131a0:	b	12ab0 <__assert_fail@plt+0x1c24>
   131a4:	ldr	r3, [sp, #60]	; 0x3c
   131a8:	cmp	r3, #0
   131ac:	bne	1359c <__assert_fail@plt+0x2710>
   131b0:	ldr	r3, [sp, #92]	; 0x5c
   131b4:	cmp	r3, #0
   131b8:	addne	r7, r7, #1
   131bc:	bne	123bc <__assert_fail@plt+0x1530>
   131c0:	str	r3, [sp, #40]	; 0x28
   131c4:	b	12abc <__assert_fail@plt+0x1c30>
   131c8:	mov	r3, #0
   131cc:	str	r3, [sp, #40]	; 0x28
   131d0:	mov	r3, #102	; 0x66
   131d4:	b	12ab0 <__assert_fail@plt+0x1c24>
   131d8:	mov	r3, #0
   131dc:	str	r3, [sp, #40]	; 0x28
   131e0:	ldr	r3, [sp, #76]	; 0x4c
   131e4:	cmp	r3, #1
   131e8:	bne	13650 <__assert_fail@plt+0x27c4>
   131ec:	bl	10d90 <__ctype_b_loc@plt>
   131f0:	ldr	r2, [r0]
   131f4:	sxth	r3, r5
   131f8:	lsl	r3, r3, #1
   131fc:	ldr	r1, [sp, #76]	; 0x4c
   13200:	ldrh	r3, [r2, r3]
   13204:	mov	r0, r1
   13208:	and	r3, r3, #16384	; 0x4000
   1320c:	cmp	r3, #0
   13210:	ldr	r3, [sp, #60]	; 0x3c
   13214:	movne	r6, #1
   13218:	moveq	r6, #0
   1321c:	movne	r2, #0
   13220:	andeq	r2, r3, #1
   13224:	cmp	r2, #0
   13228:	beq	12c5c <__assert_fail@plt+0x1dd0>
   1322c:	ldr	r2, [sp, #60]	; 0x3c
   13230:	mov	r6, #0
   13234:	add	r1, r0, r7
   13238:	mov	ip, #39	; 0x27
   1323c:	str	r6, [sp, #100]	; 0x64
   13240:	mov	r0, #0
   13244:	ldr	lr, [sp, #36]	; 0x24
   13248:	str	r8, [sp, #36]	; 0x24
   1324c:	ldr	r6, [sp, #40]	; 0x28
   13250:	ldr	r8, [sp, #44]	; 0x2c
   13254:	b	13304 <__assert_fail@plt+0x2478>
   13258:	cmp	r8, #0
   1325c:	bne	13838 <__assert_fail@plt+0x29ac>
   13260:	ldr	r0, [sp, #52]	; 0x34
   13264:	eor	r3, fp, #1
   13268:	ands	r3, r0, r3
   1326c:	beq	1329c <__assert_fail@plt+0x2410>
   13270:	cmp	sl, r4
   13274:	add	r0, r4, #1
   13278:	strbhi	ip, [r9, r4]
   1327c:	cmp	sl, r0
   13280:	movhi	fp, #36	; 0x24
   13284:	strbhi	fp, [r9, r0]
   13288:	add	r0, r4, #2
   1328c:	mov	fp, r3
   13290:	cmp	sl, r0
   13294:	add	r4, r4, #3
   13298:	strbhi	ip, [r9, r0]
   1329c:	cmp	sl, r4
   132a0:	movhi	r3, #92	; 0x5c
   132a4:	strbhi	r3, [r9, r4]
   132a8:	add	r3, r4, #1
   132ac:	cmp	sl, r3
   132b0:	bls	132c0 <__assert_fail@plt+0x2434>
   132b4:	lsr	r0, r5, #6
   132b8:	add	r0, r0, #48	; 0x30
   132bc:	strb	r0, [r9, r3]
   132c0:	add	r3, r4, #2
   132c4:	cmp	sl, r3
   132c8:	bls	132d8 <__assert_fail@plt+0x244c>
   132cc:	ubfx	r0, r5, #3, #3
   132d0:	add	r0, r0, #48	; 0x30
   132d4:	strb	r0, [r9, r3]
   132d8:	add	r7, r7, #1
   132dc:	and	r5, r5, #7
   132e0:	cmp	r1, r7
   132e4:	add	r5, r5, #48	; 0x30
   132e8:	add	r4, r4, #3
   132ec:	bls	1384c <__assert_fail@plt+0x29c0>
   132f0:	mov	r0, r2
   132f4:	cmp	sl, r4
   132f8:	strbhi	r5, [r9, r4]
   132fc:	add	r4, r4, #1
   13300:	ldrb	r5, [lr, #1]!
   13304:	cmp	r2, #0
   13308:	bne	13258 <__assert_fail@plt+0x23cc>
   1330c:	eor	r3, r0, #1
   13310:	cmp	r6, #0
   13314:	and	r3, r3, fp
   13318:	uxtb	r3, r3
   1331c:	beq	13330 <__assert_fail@plt+0x24a4>
   13320:	cmp	sl, r4
   13324:	movhi	r6, #92	; 0x5c
   13328:	strbhi	r6, [r9, r4]
   1332c:	add	r4, r4, #1
   13330:	add	r7, r7, #1
   13334:	cmp	r7, r1
   13338:	bcs	1382c <__assert_fail@plt+0x29a0>
   1333c:	cmp	r3, #0
   13340:	beq	13870 <__assert_fail@plt+0x29e4>
   13344:	cmp	sl, r4
   13348:	add	r3, r4, #1
   1334c:	mov	r6, #0
   13350:	strbhi	ip, [r9, r4]
   13354:	cmp	sl, r3
   13358:	add	r4, r4, #2
   1335c:	mov	fp, r6
   13360:	strbhi	ip, [r9, r3]
   13364:	b	132f4 <__assert_fail@plt+0x2468>
   13368:	ldr	r3, [sp, #36]	; 0x24
   1336c:	ldrb	r5, [r3]
   13370:	cmp	r5, #126	; 0x7e
   13374:	ldrls	pc, [pc, r5, lsl #2]
   13378:	b	131d8 <__assert_fail@plt+0x234c>
   1337c:	muleq	r1, ip, r5
   13380:	ldrdeq	r3, [r1], -r8
   13384:	ldrdeq	r3, [r1], -r8
   13388:	ldrdeq	r3, [r1], -r8
   1338c:	ldrdeq	r3, [r1], -r8
   13390:	ldrdeq	r3, [r1], -r8
   13394:	ldrdeq	r3, [r1], -r8
   13398:	muleq	r1, r0, sl
   1339c:	andeq	r2, r1, r8, lsl #21
   133a0:	andeq	r3, r1, r8, lsl #2
   133a4:	muleq	r1, r0, r5
   133a8:	andeq	r3, r1, r8, ror #1
   133ac:	andeq	r2, r1, r4, lsr r9
   133b0:	andeq	r3, r1, r4, lsl #11
   133b4:	ldrdeq	r3, [r1], -r8
   133b8:	ldrdeq	r3, [r1], -r8
   133bc:	ldrdeq	r3, [r1], -r8
   133c0:	ldrdeq	r3, [r1], -r8
   133c4:	ldrdeq	r3, [r1], -r8
   133c8:	ldrdeq	r3, [r1], -r8
   133cc:	ldrdeq	r3, [r1], -r8
   133d0:	ldrdeq	r3, [r1], -r8
   133d4:	ldrdeq	r3, [r1], -r8
   133d8:	ldrdeq	r3, [r1], -r8
   133dc:	ldrdeq	r3, [r1], -r8
   133e0:	ldrdeq	r3, [r1], -r8
   133e4:	ldrdeq	r3, [r1], -r8
   133e8:	ldrdeq	r3, [r1], -r8
   133ec:	ldrdeq	r3, [r1], -r8
   133f0:	ldrdeq	r3, [r1], -r8
   133f4:	ldrdeq	r3, [r1], -r8
   133f8:	ldrdeq	r3, [r1], -r8
   133fc:	strdeq	r3, [r1], -r8
   13400:	andeq	r3, r1, r8, ror r5
   13404:	andeq	r3, r1, r8, ror r5
   13408:	ldrdeq	r3, [r1], -ip
   1340c:	andeq	r3, r1, r8, ror r5
   13410:	andeq	r3, r1, ip, asr #1
   13414:	andeq	r3, r1, r8, ror r5
   13418:	andeq	r3, r1, r0, asr #2
   1341c:	andeq	r3, r1, r8, ror r5
   13420:	andeq	r3, r1, r8, ror r5
   13424:	andeq	r3, r1, r8, ror r5
   13428:	andeq	r3, r1, ip, asr #1
   1342c:	andeq	r3, r1, ip, asr #1
   13430:	andeq	r3, r1, ip, asr #1
   13434:	andeq	r3, r1, ip, asr #1
   13438:	andeq	r3, r1, ip, asr #1
   1343c:	andeq	r3, r1, ip, asr #1
   13440:	andeq	r3, r1, ip, asr #1
   13444:	andeq	r3, r1, ip, asr #1
   13448:	andeq	r3, r1, ip, asr #1
   1344c:	andeq	r3, r1, ip, asr #1
   13450:	andeq	r3, r1, ip, asr #1
   13454:	andeq	r3, r1, ip, asr #1
   13458:	andeq	r3, r1, ip, asr #1
   1345c:	andeq	r3, r1, ip, asr #1
   13460:	andeq	r3, r1, ip, asr #1
   13464:	andeq	r3, r1, ip, asr #1
   13468:	andeq	r3, r1, r8, ror r5
   1346c:	andeq	r3, r1, r8, ror r5
   13470:	andeq	r3, r1, r8, ror r5
   13474:	andeq	r3, r1, r8, ror r5
   13478:	andeq	r3, r1, r8, lsl r1
   1347c:	ldrdeq	r3, [r1], -r8
   13480:	andeq	r3, r1, ip, asr #1
   13484:	andeq	r3, r1, ip, asr #1
   13488:	andeq	r3, r1, ip, asr #1
   1348c:	andeq	r3, r1, ip, asr #1
   13490:	andeq	r3, r1, ip, asr #1
   13494:	andeq	r3, r1, ip, asr #1
   13498:	andeq	r3, r1, ip, asr #1
   1349c:	andeq	r3, r1, ip, asr #1
   134a0:	andeq	r3, r1, ip, asr #1
   134a4:	andeq	r3, r1, ip, asr #1
   134a8:	andeq	r3, r1, ip, asr #1
   134ac:	andeq	r3, r1, ip, asr #1
   134b0:	andeq	r3, r1, ip, asr #1
   134b4:	andeq	r3, r1, ip, asr #1
   134b8:	andeq	r3, r1, ip, asr #1
   134bc:	andeq	r3, r1, ip, asr #1
   134c0:	andeq	r3, r1, ip, asr #1
   134c4:	andeq	r3, r1, ip, asr #1
   134c8:	andeq	r3, r1, ip, asr #1
   134cc:	andeq	r3, r1, ip, asr #1
   134d0:	andeq	r3, r1, ip, asr #1
   134d4:	andeq	r3, r1, ip, asr #1
   134d8:	andeq	r3, r1, ip, asr #1
   134dc:	andeq	r3, r1, ip, asr #1
   134e0:	andeq	r3, r1, ip, asr #1
   134e4:	andeq	r3, r1, ip, asr #1
   134e8:	andeq	r3, r1, r8, ror r5
   134ec:	muleq	r1, r8, r0
   134f0:	andeq	r3, r1, ip, asr #1
   134f4:	andeq	r3, r1, r8, ror r5
   134f8:	andeq	r3, r1, ip, asr #1
   134fc:	andeq	r3, r1, r8, ror r5
   13500:	andeq	r3, r1, ip, asr #1
   13504:	andeq	r3, r1, ip, asr #1
   13508:	andeq	r3, r1, ip, asr #1
   1350c:	andeq	r3, r1, ip, asr #1
   13510:	andeq	r3, r1, ip, asr #1
   13514:	andeq	r3, r1, ip, asr #1
   13518:	andeq	r3, r1, ip, asr #1
   1351c:	andeq	r3, r1, ip, asr #1
   13520:	andeq	r3, r1, ip, asr #1
   13524:	andeq	r3, r1, ip, asr #1
   13528:	andeq	r3, r1, ip, asr #1
   1352c:	andeq	r3, r1, ip, asr #1
   13530:	andeq	r3, r1, ip, asr #1
   13534:	andeq	r3, r1, ip, asr #1
   13538:	andeq	r3, r1, ip, asr #1
   1353c:	andeq	r3, r1, ip, asr #1
   13540:	andeq	r3, r1, ip, asr #1
   13544:	andeq	r3, r1, ip, asr #1
   13548:	andeq	r3, r1, ip, asr #1
   1354c:	andeq	r3, r1, ip, asr #1
   13550:	andeq	r3, r1, ip, asr #1
   13554:	andeq	r3, r1, ip, asr #1
   13558:	andeq	r3, r1, ip, asr #1
   1355c:	andeq	r3, r1, ip, asr #1
   13560:	andeq	r3, r1, ip, asr #1
   13564:	andeq	r3, r1, ip, asr #1
   13568:	andeq	r3, r1, r4, ror r0
   1356c:	andeq	r3, r1, r8, ror r5
   13570:	andeq	r3, r1, r4, ror r0
   13574:	ldrdeq	r3, [r1], -ip
   13578:	mov	r3, #0
   1357c:	str	r3, [sp, #40]	; 0x28
   13580:	b	12c58 <__assert_fail@plt+0x1dcc>
   13584:	mov	r3, #0
   13588:	str	r3, [sp, #40]	; 0x28
   1358c:	b	12bf0 <__assert_fail@plt+0x1d64>
   13590:	mov	r3, #0
   13594:	str	r3, [sp, #40]	; 0x28
   13598:	b	12c24 <__assert_fail@plt+0x1d98>
   1359c:	ldr	r3, [sp, #44]	; 0x2c
   135a0:	cmp	r3, #0
   135a4:	beq	12b3c <__assert_fail@plt+0x1cb0>
   135a8:	ldr	r3, [sp, #52]	; 0x34
   135ac:	mov	fp, r9
   135b0:	str	r3, [sp, #60]	; 0x3c
   135b4:	b	12cb4 <__assert_fail@plt+0x1e28>
   135b8:	ldr	r3, [sp, #44]	; 0x2c
   135bc:	cmp	r3, #0
   135c0:	bne	139f4 <__assert_fail@plt+0x2b68>
   135c4:	str	r3, [sp, #40]	; 0x28
   135c8:	cmp	sl, #0
   135cc:	ldr	r3, [sp, #84]	; 0x54
   135d0:	clz	r3, r3
   135d4:	lsr	r3, r3, #5
   135d8:	moveq	r3, #0
   135dc:	cmp	r3, #0
   135e0:	strne	sl, [sp, #84]	; 0x54
   135e4:	movne	sl, #0
   135e8:	bne	13618 <__assert_fail@plt+0x278c>
   135ec:	cmp	sl, r4
   135f0:	movhi	r3, #39	; 0x27
   135f4:	strbhi	r3, [r9, r4]
   135f8:	add	r3, r4, #1
   135fc:	cmp	sl, r3
   13600:	movhi	r2, #92	; 0x5c
   13604:	strbhi	r2, [r9, r3]
   13608:	add	r3, r4, #2
   1360c:	cmp	sl, r3
   13610:	movhi	r2, #39	; 0x27
   13614:	strbhi	r2, [r9, r3]
   13618:	mov	r3, #0
   1361c:	add	r4, r4, #3
   13620:	str	r6, [sp, #80]	; 0x50
   13624:	mov	fp, r3
   13628:	mov	r5, #39	; 0x27
   1362c:	b	12af8 <__assert_fail@plt+0x1c6c>
   13630:	ldr	r3, [sp, #44]	; 0x2c
   13634:	cmp	r3, #0
   13638:	bne	139f4 <__assert_fail@plt+0x2b68>
   1363c:	mov	r6, #0
   13640:	mov	r5, #63	; 0x3f
   13644:	str	r3, [sp, #40]	; 0x28
   13648:	mov	r3, fp
   1364c:	b	12af8 <__assert_fail@plt+0x1c6c>
   13650:	mov	r2, #0
   13654:	mov	r3, #0
   13658:	cmn	r8, #1
   1365c:	strd	r2, [sp, #128]	; 0x80
   13660:	bne	13670 <__assert_fail@plt+0x27e4>
   13664:	ldr	r0, [sp, #28]
   13668:	bl	10da8 <strlen@plt>
   1366c:	mov	r8, r0
   13670:	str	r9, [sp, #100]	; 0x64
   13674:	mov	r3, #0
   13678:	strd	sl, [sp, #104]	; 0x68
   1367c:	ldr	sl, [sp, #28]
   13680:	str	r5, [sp, #112]	; 0x70
   13684:	mov	r5, r3
   13688:	ldr	r9, [sp, #68]	; 0x44
   1368c:	str	r4, [sp, #116]	; 0x74
   13690:	add	r4, r7, r5
   13694:	add	r3, sp, #128	; 0x80
   13698:	add	fp, sl, r4
   1369c:	sub	r2, r8, r4
   136a0:	mov	r1, fp
   136a4:	add	r0, sp, #124	; 0x7c
   136a8:	bl	17ff8 <__assert_fail@plt+0x716c>
   136ac:	subs	r1, r0, #0
   136b0:	beq	136f0 <__assert_fail@plt+0x2864>
   136b4:	cmn	r1, #1
   136b8:	beq	13a48 <__assert_fail@plt+0x2bbc>
   136bc:	cmn	r1, #2
   136c0:	beq	13a68 <__assert_fail@plt+0x2bdc>
   136c4:	cmp	r9, #0
   136c8:	bne	13720 <__assert_fail@plt+0x2894>
   136cc:	ldr	r0, [sp, #124]	; 0x7c
   136d0:	add	r5, r5, r1
   136d4:	bl	10ce8 <iswprint@plt>
   136d8:	cmp	r0, #0
   136dc:	add	r0, sp, #128	; 0x80
   136e0:	moveq	r6, #0
   136e4:	bl	10c94 <mbsinit@plt>
   136e8:	cmp	r0, #0
   136ec:	beq	13690 <__assert_fail@plt+0x2804>
   136f0:	ldr	r3, [sp, #60]	; 0x3c
   136f4:	add	r9, sp, #100	; 0x64
   136f8:	mov	r0, r5
   136fc:	ldm	r9, {r9, sl, fp}
   13700:	eor	r2, r6, #1
   13704:	ldr	r5, [sp, #112]	; 0x70
   13708:	and	r2, r2, r3
   1370c:	uxtb	r2, r2
   13710:	ldr	r4, [sp, #116]	; 0x74
   13714:	cmp	r0, #1
   13718:	bhi	13234 <__assert_fail@plt+0x23a8>
   1371c:	b	13224 <__assert_fail@plt+0x2398>
   13720:	cmp	r1, #1
   13724:	beq	136cc <__assert_fail@plt+0x2840>
   13728:	add	r2, r4, #1
   1372c:	add	r3, sl, r1
   13730:	add	r2, sl, r2
   13734:	add	r4, r3, r4
   13738:	ldrb	r3, [r2], #1
   1373c:	sub	r3, r3, #91	; 0x5b
   13740:	cmp	r3, #33	; 0x21
   13744:	ldrls	pc, [pc, r3, lsl #2]
   13748:	b	137d4 <__assert_fail@plt+0x2948>
   1374c:	andeq	r3, r1, r0, ror #15
   13750:	andeq	r3, r1, r0, ror #15
   13754:	ldrdeq	r3, [r1], -r4
   13758:	andeq	r3, r1, r0, ror #15
   1375c:	ldrdeq	r3, [r1], -r4
   13760:	andeq	r3, r1, r0, ror #15
   13764:	ldrdeq	r3, [r1], -r4
   13768:	ldrdeq	r3, [r1], -r4
   1376c:	ldrdeq	r3, [r1], -r4
   13770:	ldrdeq	r3, [r1], -r4
   13774:	ldrdeq	r3, [r1], -r4
   13778:	ldrdeq	r3, [r1], -r4
   1377c:	ldrdeq	r3, [r1], -r4
   13780:	ldrdeq	r3, [r1], -r4
   13784:	ldrdeq	r3, [r1], -r4
   13788:	ldrdeq	r3, [r1], -r4
   1378c:	ldrdeq	r3, [r1], -r4
   13790:	ldrdeq	r3, [r1], -r4
   13794:	ldrdeq	r3, [r1], -r4
   13798:	ldrdeq	r3, [r1], -r4
   1379c:	ldrdeq	r3, [r1], -r4
   137a0:	ldrdeq	r3, [r1], -r4
   137a4:	ldrdeq	r3, [r1], -r4
   137a8:	ldrdeq	r3, [r1], -r4
   137ac:	ldrdeq	r3, [r1], -r4
   137b0:	ldrdeq	r3, [r1], -r4
   137b4:	ldrdeq	r3, [r1], -r4
   137b8:	ldrdeq	r3, [r1], -r4
   137bc:	ldrdeq	r3, [r1], -r4
   137c0:	ldrdeq	r3, [r1], -r4
   137c4:	ldrdeq	r3, [r1], -r4
   137c8:	ldrdeq	r3, [r1], -r4
   137cc:	ldrdeq	r3, [r1], -r4
   137d0:	andeq	r3, r1, r0, ror #15
   137d4:	cmp	r4, r2
   137d8:	bne	13738 <__assert_fail@plt+0x28ac>
   137dc:	b	136cc <__assert_fail@plt+0x2840>
   137e0:	mov	r3, #2
   137e4:	ldr	fp, [sp, #100]	; 0x64
   137e8:	str	r3, [sp, #176]	; 0xb0
   137ec:	ldr	sl, [sp, #104]	; 0x68
   137f0:	b	12cb4 <__assert_fail@plt+0x1e28>
   137f4:	ldr	r2, [sp, #52]	; 0x34
   137f8:	mov	fp, r9
   137fc:	ldr	r3, [sp, #60]	; 0x3c
   13800:	and	r3, r3, r2
   13804:	str	r3, [sp, #60]	; 0x3c
   13808:	b	12cb4 <__assert_fail@plt+0x1e28>
   1380c:	cmp	sl, r4
   13810:	movhi	r2, fp
   13814:	bhi	12b8c <__assert_fail@plt+0x1d00>
   13818:	mov	r2, r4
   1381c:	b	12b9c <__assert_fail@plt+0x1d10>
   13820:	mov	r6, r3
   13824:	mov	r5, #63	; 0x3f
   13828:	b	12c5c <__assert_fail@plt+0x1dd0>
   1382c:	ldr	r8, [sp, #36]	; 0x24
   13830:	ldr	r6, [sp, #100]	; 0x64
   13834:	b	12b08 <__assert_fail@plt+0x1c7c>
   13838:	mov	fp, r9
   1383c:	ldr	r8, [sp, #36]	; 0x24
   13840:	ldr	r3, [sp, #52]	; 0x34
   13844:	str	r3, [sp, #60]	; 0x3c
   13848:	b	12cb4 <__assert_fail@plt+0x1e28>
   1384c:	ldr	r8, [sp, #36]	; 0x24
   13850:	ldr	r6, [sp, #100]	; 0x64
   13854:	b	129a0 <__assert_fail@plt+0x1b14>
   13858:	mov	r3, #0
   1385c:	add	r4, r4, #4
   13860:	mov	fp, r2
   13864:	mov	r6, r3
   13868:	mov	r5, #48	; 0x30
   1386c:	b	12af8 <__assert_fail@plt+0x1c6c>
   13870:	mov	r6, r3
   13874:	b	132f4 <__assert_fail@plt+0x2468>
   13878:	mov	r3, #1
   1387c:	movw	r2, #36396	; 0x8e2c
   13880:	movt	r2, #1
   13884:	mov	r4, r3
   13888:	mov	r9, sl
   1388c:	str	r3, [sp, #32]
   13890:	str	sl, [sp, #44]	; 0x2c
   13894:	str	r3, [sp, #48]	; 0x30
   13898:	str	sl, [sp, #52]	; 0x34
   1389c:	str	r3, [sp, #56]	; 0x38
   138a0:	str	r3, [sp, #60]	; 0x3c
   138a4:	str	sl, [sp, #64]	; 0x40
   138a8:	str	sl, [sp, #68]	; 0x44
   138ac:	str	r2, [sp, #72]	; 0x48
   138b0:	str	sl, [sp, #80]	; 0x50
   138b4:	str	sl, [sp, #84]	; 0x54
   138b8:	str	sl, [sp, #88]	; 0x58
   138bc:	b	123ac <__assert_fail@plt+0x1520>
   138c0:	mov	r3, #0
   138c4:	mov	r5, #48	; 0x30
   138c8:	mov	r6, r3
   138cc:	b	12af8 <__assert_fail@plt+0x1c6c>
   138d0:	cmp	sl, r4
   138d4:	mov	r5, #48	; 0x30
   138d8:	movhi	r3, #48	; 0x30
   138dc:	strbhi	r3, [r9, r4]
   138e0:	add	r3, r2, #2
   138e4:	add	r4, r2, #3
   138e8:	cmp	sl, r3
   138ec:	movhi	r1, #48	; 0x30
   138f0:	strbhi	r1, [r9, r3]
   138f4:	mov	r3, #0
   138f8:	b	12bd4 <__assert_fail@plt+0x1d48>
   138fc:	ldr	r3, [sp, #48]	; 0x30
   13900:	str	r3, [sp, #40]	; 0x28
   13904:	b	131e0 <__assert_fail@plt+0x2354>
   13908:	ldr	r2, [sp, #28]
   1390c:	ldrb	r2, [r2, r3]
   13910:	sub	r1, r2, #33	; 0x21
   13914:	cmp	r1, #29
   13918:	ldrls	pc, [pc, r1, lsl #2]
   1391c:	b	12c58 <__assert_fail@plt+0x1dcc>
   13920:	muleq	r1, r8, r9
   13924:	andeq	r2, r1, r8, asr ip
   13928:	andeq	r2, r1, r8, asr ip
   1392c:	andeq	r2, r1, r8, asr ip
   13930:	andeq	r2, r1, r8, asr ip
   13934:	andeq	r2, r1, r8, asr ip
   13938:	muleq	r1, r8, r9
   1393c:	muleq	r1, r8, r9
   13940:	muleq	r1, r8, r9
   13944:	andeq	r2, r1, r8, asr ip
   13948:	andeq	r2, r1, r8, asr ip
   1394c:	andeq	r2, r1, r8, asr ip
   13950:	muleq	r1, r8, r9
   13954:	andeq	r2, r1, r8, asr ip
   13958:	muleq	r1, r8, r9
   1395c:	andeq	r2, r1, r8, asr ip
   13960:	andeq	r2, r1, r8, asr ip
   13964:	andeq	r2, r1, r8, asr ip
   13968:	andeq	r2, r1, r8, asr ip
   1396c:	andeq	r2, r1, r8, asr ip
   13970:	andeq	r2, r1, r8, asr ip
   13974:	andeq	r2, r1, r8, asr ip
   13978:	andeq	r2, r1, r8, asr ip
   1397c:	andeq	r2, r1, r8, asr ip
   13980:	andeq	r2, r1, r8, asr ip
   13984:	andeq	r2, r1, r8, asr ip
   13988:	andeq	r2, r1, r8, asr ip
   1398c:	muleq	r1, r8, r9
   13990:	muleq	r1, r8, r9
   13994:	muleq	r1, r8, r9
   13998:	ldr	r1, [sp, #44]	; 0x2c
   1399c:	cmp	r1, #0
   139a0:	bne	13c00 <__assert_fail@plt+0x2d74>
   139a4:	cmp	sl, r4
   139a8:	mov	r7, r3
   139ac:	movhi	r1, #63	; 0x3f
   139b0:	mov	r5, r2
   139b4:	mov	r3, fp
   139b8:	strbhi	r1, [r9, r4]
   139bc:	add	r1, r4, #1
   139c0:	cmp	sl, r1
   139c4:	movhi	r0, #34	; 0x22
   139c8:	strbhi	r0, [r9, r1]
   139cc:	add	r1, r4, #2
   139d0:	cmp	sl, r1
   139d4:	movhi	r0, #34	; 0x22
   139d8:	strbhi	r0, [r9, r1]
   139dc:	add	r1, r4, #3
   139e0:	add	r4, r4, #4
   139e4:	cmp	sl, r1
   139e8:	movhi	r0, #63	; 0x3f
   139ec:	strbhi	r0, [r9, r1]
   139f0:	b	12bd4 <__assert_fail@plt+0x1d48>
   139f4:	mov	fp, r9
   139f8:	b	12cb4 <__assert_fail@plt+0x1e28>
   139fc:	ldr	r3, [sp, #188]	; 0xbc
   13a00:	ldrb	r3, [r3]
   13a04:	cmp	r3, #0
   13a08:	beq	12344 <__assert_fail@plt+0x14b8>
   13a0c:	ldr	r2, [sp, #188]	; 0xbc
   13a10:	cmp	sl, r4
   13a14:	bls	13a34 <__assert_fail@plt+0x2ba8>
   13a18:	strb	r3, [fp, r4]
   13a1c:	add	r4, r4, #1
   13a20:	ldrb	r3, [r2, #1]!
   13a24:	cmp	r3, #0
   13a28:	beq	12344 <__assert_fail@plt+0x14b8>
   13a2c:	cmp	sl, r4
   13a30:	bhi	13a18 <__assert_fail@plt+0x2b8c>
   13a34:	ldrb	r3, [r2, #1]!
   13a38:	add	r4, r4, #1
   13a3c:	cmp	r3, #0
   13a40:	bne	13a10 <__assert_fail@plt+0x2b84>
   13a44:	b	12344 <__assert_fail@plt+0x14b8>
   13a48:	add	r9, sp, #100	; 0x64
   13a4c:	mov	r0, r5
   13a50:	ldr	r2, [sp, #60]	; 0x3c
   13a54:	mov	r6, #0
   13a58:	ldm	r9, {r9, sl, fp}
   13a5c:	ldr	r5, [sp, #112]	; 0x70
   13a60:	ldr	r4, [sp, #116]	; 0x74
   13a64:	b	13714 <__assert_fail@plt+0x2888>
   13a68:	cmp	r4, r8
   13a6c:	add	r9, sp, #100	; 0x64
   13a70:	mov	r1, r4
   13a74:	mov	r2, fp
   13a78:	ldm	r9, {r9, sl, fp}
   13a7c:	mov	r3, r5
   13a80:	mov	r0, r5
   13a84:	ldr	r5, [sp, #112]	; 0x70
   13a88:	ldr	r4, [sp, #116]	; 0x74
   13a8c:	bcs	13ac0 <__assert_fail@plt+0x2c34>
   13a90:	ldrb	r6, [r2]
   13a94:	cmp	r6, #0
   13a98:	bne	13aac <__assert_fail@plt+0x2c20>
   13a9c:	b	13bf8 <__assert_fail@plt+0x2d6c>
   13aa0:	ldrb	r6, [r2, #1]!
   13aa4:	cmp	r6, #0
   13aa8:	beq	13b90 <__assert_fail@plt+0x2d04>
   13aac:	add	r3, r3, #1
   13ab0:	add	r1, r7, r3
   13ab4:	cmp	r8, r1
   13ab8:	bhi	13aa0 <__assert_fail@plt+0x2c14>
   13abc:	mov	r0, r3
   13ac0:	mov	r6, #0
   13ac4:	ldr	r2, [sp, #60]	; 0x3c
   13ac8:	b	13714 <__assert_fail@plt+0x2888>
   13acc:	mov	r3, #1
   13ad0:	mov	r4, #0
   13ad4:	mov	r9, r4
   13ad8:	str	r3, [sp, #32]
   13adc:	str	r3, [sp, #44]	; 0x2c
   13ae0:	str	r3, [sp, #48]	; 0x30
   13ae4:	str	r4, [sp, #52]	; 0x34
   13ae8:	str	r3, [sp, #56]	; 0x38
   13aec:	str	r3, [sp, #60]	; 0x3c
   13af0:	str	r3, [sp, #88]	; 0x58
   13af4:	movw	r3, #36396	; 0x8e2c
   13af8:	movt	r3, #1
   13afc:	str	r4, [sp, #64]	; 0x40
   13b00:	str	r4, [sp, #68]	; 0x44
   13b04:	str	r3, [sp, #72]	; 0x48
   13b08:	str	r4, [sp, #80]	; 0x50
   13b0c:	str	r4, [sp, #84]	; 0x54
   13b10:	b	123ac <__assert_fail@plt+0x1520>
   13b14:	mov	fp, r9
   13b18:	b	12cc8 <__assert_fail@plt+0x1e3c>
   13b1c:	ldr	r3, [sp, #48]	; 0x30
   13b20:	b	1363c <__assert_fail@plt+0x27b0>
   13b24:	mov	r2, r3
   13b28:	ldr	r3, [sp, #72]	; 0x48
   13b2c:	cmp	r3, #0
   13b30:	moveq	r2, #0
   13b34:	andne	r2, r2, #1
   13b38:	cmp	r2, #0
   13b3c:	beq	13b6c <__assert_fail@plt+0x2ce0>
   13b40:	mov	r2, r3
   13b44:	ldrb	r3, [r3]
   13b48:	cmp	r3, #0
   13b4c:	beq	13b6c <__assert_fail@plt+0x2ce0>
   13b50:	cmp	sl, r4
   13b54:	bls	13b7c <__assert_fail@plt+0x2cf0>
   13b58:	strb	r3, [fp, r4]
   13b5c:	add	r4, r4, #1
   13b60:	ldrb	r3, [r2, #1]!
   13b64:	cmp	r3, #0
   13b68:	bne	13b50 <__assert_fail@plt+0x2cc4>
   13b6c:	cmp	sl, r4
   13b70:	movhi	r3, #0
   13b74:	strbhi	r3, [fp, r4]
   13b78:	b	12d04 <__assert_fail@plt+0x1e78>
   13b7c:	ldrb	r3, [r2, #1]!
   13b80:	add	r4, r4, #1
   13b84:	cmp	r3, #0
   13b88:	bne	13b50 <__assert_fail@plt+0x2cc4>
   13b8c:	b	13b6c <__assert_fail@plt+0x2ce0>
   13b90:	mov	r0, r3
   13b94:	ldr	r2, [sp, #60]	; 0x3c
   13b98:	b	13714 <__assert_fail@plt+0x2888>
   13b9c:	mov	ip, #5
   13ba0:	mov	r3, r8
   13ba4:	ldr	r1, [sp, #84]	; 0x54
   13ba8:	str	ip, [sp]
   13bac:	ldr	r2, [sp, #180]	; 0xb4
   13bb0:	ldr	ip, [sp, #188]	; 0xbc
   13bb4:	ldr	r0, [sp, #184]	; 0xb8
   13bb8:	str	r2, [sp, #4]
   13bbc:	ldr	r2, [sp, #28]
   13bc0:	str	ip, [sp, #12]
   13bc4:	ldr	ip, [sp, #192]	; 0xc0
   13bc8:	str	r0, [sp, #8]
   13bcc:	mov	r0, fp
   13bd0:	str	ip, [sp, #16]
   13bd4:	bl	12288 <__assert_fail@plt+0x13fc>
   13bd8:	mov	r4, r0
   13bdc:	b	12d04 <__assert_fail@plt+0x1e78>
   13be0:	mov	r6, r3
   13be4:	str	r3, [sp, #40]	; 0x28
   13be8:	b	12c74 <__assert_fail@plt+0x1de8>
   13bec:	mov	r3, #2
   13bf0:	str	r3, [sp, #176]	; 0xb0
   13bf4:	b	12cb4 <__assert_fail@plt+0x1e28>
   13bf8:	ldr	r2, [sp, #60]	; 0x3c
   13bfc:	b	13714 <__assert_fail@plt+0x2888>
   13c00:	mov	r3, #5
   13c04:	mov	fp, r9
   13c08:	str	r3, [sp, #176]	; 0xb0
   13c0c:	b	12cc8 <__assert_fail@plt+0x1e3c>
   13c10:	mov	r1, #1
   13c14:	mov	r9, #0
   13c18:	mov	r3, r9
   13c1c:	mov	r2, r9
   13c20:	str	r1, [sp, #32]
   13c24:	str	sl, [sp, #84]	; 0x54
   13c28:	b	12a50 <__assert_fail@plt+0x1bc4>
   13c2c:	mov	r3, #0
   13c30:	mov	r2, #1
   13c34:	mov	r9, r3
   13c38:	mov	r4, r3
   13c3c:	str	r2, [sp, #32]
   13c40:	strd	r2, [sp, #44]	; 0x2c
   13c44:	strd	r2, [sp, #56]	; 0x38
   13c48:	str	r3, [sp, #80]	; 0x50
   13c4c:	str	r3, [sp, #84]	; 0x54
   13c50:	str	r3, [sp, #88]	; 0x58
   13c54:	movw	r3, #36416	; 0x8e40
   13c58:	movt	r3, #1
   13c5c:	str	r2, [sp, #52]	; 0x34
   13c60:	str	r2, [sp, #64]	; 0x40
   13c64:	str	r2, [sp, #68]	; 0x44
   13c68:	str	r3, [sp, #72]	; 0x48
   13c6c:	b	123ac <__assert_fail@plt+0x1520>
   13c70:	bl	10e74 <abort@plt>
   13c74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c78:	mov	r4, r0
   13c7c:	mov	r5, r3
   13c80:	strd	r6, [sp, #8]
   13c84:	movw	r7, #41196	; 0xa0ec
   13c88:	movt	r7, #2
   13c8c:	strd	r8, [sp, #16]
   13c90:	strd	sl, [sp, #24]
   13c94:	mov	sl, r1
   13c98:	mov	fp, r2
   13c9c:	str	lr, [sp, #32]
   13ca0:	sub	sp, sp, #60	; 0x3c
   13ca4:	bl	10dc0 <__errno_location@plt>
   13ca8:	mov	r8, r0
   13cac:	cmn	r4, #-2147483647	; 0x80000001
   13cb0:	ldr	r6, [r7]
   13cb4:	movne	r0, #0
   13cb8:	moveq	r0, #1
   13cbc:	ldr	r3, [r8]
   13cc0:	orrs	r0, r0, r4, lsr #31
   13cc4:	str	r3, [sp, #28]
   13cc8:	bne	13e58 <__assert_fail@plt+0x2fcc>
   13ccc:	ldr	r3, [r7, #4]
   13cd0:	cmp	r3, r4
   13cd4:	bgt	13d34 <__assert_fail@plt+0x2ea8>
   13cd8:	add	r1, r7, #8
   13cdc:	sub	r2, r4, r3
   13ce0:	str	r3, [sp, #52]	; 0x34
   13ce4:	cmp	r6, r1
   13ce8:	add	r2, r2, #1
   13cec:	beq	13e30 <__assert_fail@plt+0x2fa4>
   13cf0:	mov	r1, #8
   13cf4:	mov	r0, r6
   13cf8:	mvn	r3, #-2147483648	; 0x80000000
   13cfc:	str	r1, [sp]
   13d00:	add	r1, sp, #52	; 0x34
   13d04:	bl	16594 <__assert_fail@plt+0x5708>
   13d08:	mov	r6, r0
   13d0c:	str	r0, [r7]
   13d10:	ldr	r0, [r7, #4]
   13d14:	mov	r1, #0
   13d18:	ldr	r2, [sp, #52]	; 0x34
   13d1c:	sub	r2, r2, r0
   13d20:	add	r0, r6, r0, lsl #3
   13d24:	lsl	r2, r2, #3
   13d28:	bl	10dd8 <memset@plt>
   13d2c:	ldr	r3, [sp, #52]	; 0x34
   13d30:	str	r3, [r7, #4]
   13d34:	ldr	r1, [r5, #4]
   13d38:	add	r0, r6, r4, lsl #3
   13d3c:	add	ip, r5, #8
   13d40:	mov	r3, fp
   13d44:	mov	r2, sl
   13d48:	ldr	r7, [r0, #4]
   13d4c:	str	r0, [sp, #36]	; 0x24
   13d50:	str	ip, [sp, #40]	; 0x28
   13d54:	orr	r0, r1, #1
   13d58:	ldr	r9, [r6, r4, lsl #3]
   13d5c:	str	ip, [sp, #8]
   13d60:	ldr	lr, [r5, #44]	; 0x2c
   13d64:	str	r0, [sp, #4]
   13d68:	ldr	ip, [r5]
   13d6c:	mov	r1, r9
   13d70:	str	ip, [sp, #32]
   13d74:	ldr	ip, [r5, #40]	; 0x28
   13d78:	str	ip, [sp, #12]
   13d7c:	ldr	ip, [sp, #32]
   13d80:	str	lr, [sp, #16]
   13d84:	str	r0, [sp, #44]	; 0x2c
   13d88:	mov	r0, r7
   13d8c:	str	ip, [sp]
   13d90:	bl	12288 <__assert_fail@plt+0x13fc>
   13d94:	cmp	r9, r0
   13d98:	bhi	13e08 <__assert_fail@plt+0x2f7c>
   13d9c:	add	r9, r0, #1
   13da0:	movw	r3, #41316	; 0xa164
   13da4:	movt	r3, #2
   13da8:	cmp	r7, r3
   13dac:	str	r9, [r6, r4, lsl #3]
   13db0:	beq	13dbc <__assert_fail@plt+0x2f30>
   13db4:	mov	r0, r7
   13db8:	bl	17e7c <__assert_fail@plt+0x6ff0>
   13dbc:	mov	r0, r9
   13dc0:	bl	162f0 <__assert_fail@plt+0x5464>
   13dc4:	ldr	ip, [r5]
   13dc8:	mov	r3, fp
   13dcc:	mov	r2, sl
   13dd0:	mov	r1, r9
   13dd4:	mov	r7, r0
   13dd8:	ldr	lr, [sp, #36]	; 0x24
   13ddc:	ldr	r4, [r5, #40]	; 0x28
   13de0:	str	r0, [lr, #4]
   13de4:	ldr	lr, [r5, #44]	; 0x2c
   13de8:	str	ip, [sp]
   13dec:	ldr	ip, [sp, #44]	; 0x2c
   13df0:	str	ip, [sp, #4]
   13df4:	ldr	ip, [sp, #40]	; 0x28
   13df8:	str	r4, [sp, #12]
   13dfc:	str	lr, [sp, #16]
   13e00:	str	ip, [sp, #8]
   13e04:	bl	12288 <__assert_fail@plt+0x13fc>
   13e08:	ldr	r3, [sp, #28]
   13e0c:	mov	r0, r7
   13e10:	str	r3, [r8]
   13e14:	add	sp, sp, #60	; 0x3c
   13e18:	ldrd	r4, [sp]
   13e1c:	ldrd	r6, [sp, #8]
   13e20:	ldrd	r8, [sp, #16]
   13e24:	ldrd	sl, [sp, #24]
   13e28:	add	sp, sp, #32
   13e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e30:	mov	r1, #8
   13e34:	mvn	r3, #-2147483648	; 0x80000000
   13e38:	str	r1, [sp]
   13e3c:	add	r1, sp, #52	; 0x34
   13e40:	bl	16594 <__assert_fail@plt+0x5708>
   13e44:	ldrd	r2, [r7, #8]
   13e48:	mov	r6, r0
   13e4c:	str	r0, [r7]
   13e50:	strd	r2, [r0]
   13e54:	b	13d10 <__assert_fail@plt+0x2e84>
   13e58:	bl	10e74 <abort@plt>
   13e5c:	strd	r4, [sp, #-16]!
   13e60:	mov	r5, r0
   13e64:	str	r6, [sp, #8]
   13e68:	str	lr, [sp, #12]
   13e6c:	bl	10dc0 <__errno_location@plt>
   13e70:	mov	r4, r0
   13e74:	cmp	r5, #0
   13e78:	ldr	r0, [pc, #32]	; 13ea0 <__assert_fail@plt+0x3014>
   13e7c:	mov	r1, #48	; 0x30
   13e80:	movne	r0, r5
   13e84:	ldr	r6, [r4]
   13e88:	bl	16734 <__assert_fail@plt+0x58a8>
   13e8c:	str	r6, [r4]
   13e90:	ldrd	r4, [sp]
   13e94:	ldr	r6, [sp, #8]
   13e98:	add	sp, sp, #12
   13e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13ea0:	andeq	sl, r2, r4, ror #4
   13ea4:	ldr	r3, [pc, #12]	; 13eb8 <__assert_fail@plt+0x302c>
   13ea8:	cmp	r0, #0
   13eac:	moveq	r0, r3
   13eb0:	ldr	r0, [r0]
   13eb4:	bx	lr
   13eb8:	andeq	sl, r2, r4, ror #4
   13ebc:	ldr	r3, [pc, #12]	; 13ed0 <__assert_fail@plt+0x3044>
   13ec0:	cmp	r0, #0
   13ec4:	moveq	r0, r3
   13ec8:	str	r1, [r0]
   13ecc:	bx	lr
   13ed0:	andeq	sl, r2, r4, ror #4
   13ed4:	ldr	r3, [pc, #52]	; 13f10 <__assert_fail@plt+0x3084>
   13ed8:	cmp	r0, #0
   13edc:	push	{lr}		; (str lr, [sp, #-4]!)
   13ee0:	lsr	lr, r1, #5
   13ee4:	and	r1, r1, #31
   13ee8:	moveq	r0, r3
   13eec:	add	r3, r0, #8
   13ef0:	ldr	ip, [r3, lr, lsl #2]
   13ef4:	lsr	r0, ip, r1
   13ef8:	eor	r2, r2, r0
   13efc:	and	r0, r0, #1
   13f00:	and	r2, r2, #1
   13f04:	eor	r1, ip, r2, lsl r1
   13f08:	str	r1, [r3, lr, lsl #2]
   13f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f10:	andeq	sl, r2, r4, ror #4
   13f14:	ldr	r3, [pc, #16]	; 13f2c <__assert_fail@plt+0x30a0>
   13f18:	cmp	r0, #0
   13f1c:	movne	r3, r0
   13f20:	ldr	r0, [r3, #4]
   13f24:	str	r1, [r3, #4]
   13f28:	bx	lr
   13f2c:	andeq	sl, r2, r4, ror #4
   13f30:	ldr	r3, [pc, #48]	; 13f68 <__assert_fail@plt+0x30dc>
   13f34:	cmp	r0, #0
   13f38:	mov	ip, #10
   13f3c:	moveq	r0, r3
   13f40:	cmp	r2, #0
   13f44:	cmpne	r1, #0
   13f48:	str	ip, [r0]
   13f4c:	beq	13f5c <__assert_fail@plt+0x30d0>
   13f50:	str	r1, [r0, #40]	; 0x28
   13f54:	str	r2, [r0, #44]	; 0x2c
   13f58:	bx	lr
   13f5c:	str	r4, [sp, #-8]!
   13f60:	str	lr, [sp, #4]
   13f64:	bl	10e74 <abort@plt>
   13f68:	andeq	sl, r2, r4, ror #4
   13f6c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13f70:	strd	r6, [sp, #8]
   13f74:	mov	r7, r0
   13f78:	mov	r6, r1
   13f7c:	strd	r8, [sp, #16]
   13f80:	mov	r8, r2
   13f84:	mov	r9, r3
   13f88:	str	lr, [sp, #24]
   13f8c:	sub	sp, sp, #28
   13f90:	ldr	r4, [sp, #56]	; 0x38
   13f94:	ldr	ip, [pc, #104]	; 14004 <__assert_fail@plt+0x3178>
   13f98:	cmp	r4, #0
   13f9c:	moveq	r4, ip
   13fa0:	bl	10dc0 <__errno_location@plt>
   13fa4:	ldr	ip, [r4, #44]	; 0x2c
   13fa8:	mov	r5, r0
   13fac:	mov	r1, r6
   13fb0:	add	lr, r4, #8
   13fb4:	mov	r3, r9
   13fb8:	ldr	r6, [r5]
   13fbc:	mov	r2, r8
   13fc0:	mov	r0, r7
   13fc4:	str	ip, [sp, #16]
   13fc8:	ldr	ip, [r4, #40]	; 0x28
   13fcc:	str	lr, [sp, #8]
   13fd0:	str	ip, [sp, #12]
   13fd4:	ldr	ip, [r4, #4]
   13fd8:	str	ip, [sp, #4]
   13fdc:	ldr	ip, [r4]
   13fe0:	str	ip, [sp]
   13fe4:	bl	12288 <__assert_fail@plt+0x13fc>
   13fe8:	str	r6, [r5]
   13fec:	add	sp, sp, #28
   13ff0:	ldrd	r4, [sp]
   13ff4:	ldrd	r6, [sp, #8]
   13ff8:	ldrd	r8, [sp, #16]
   13ffc:	add	sp, sp, #24
   14000:	pop	{pc}		; (ldr pc, [sp], #4)
   14004:	andeq	sl, r2, r4, ror #4
   14008:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1400c:	cmp	r2, #0
   14010:	ldr	r4, [pc, #192]	; 140d8 <__assert_fail@plt+0x324c>
   14014:	movne	r4, r2
   14018:	strd	r6, [sp, #8]
   1401c:	strd	r8, [sp, #16]
   14020:	mov	r9, r1
   14024:	mov	r8, r0
   14028:	strd	sl, [sp, #24]
   1402c:	str	lr, [sp, #32]
   14030:	sub	sp, sp, #36	; 0x24
   14034:	bl	10dc0 <__errno_location@plt>
   14038:	ldr	r5, [r4, #4]
   1403c:	mov	r6, r0
   14040:	add	r7, r4, #8
   14044:	mov	r1, #0
   14048:	mov	r3, r9
   1404c:	ldr	ip, [r4, #44]	; 0x2c
   14050:	mov	r2, r8
   14054:	mov	r0, r1
   14058:	ldr	sl, [r6]
   1405c:	orr	r5, r5, #1
   14060:	str	ip, [sp, #16]
   14064:	ldr	ip, [r4, #40]	; 0x28
   14068:	stmib	sp, {r5, r7, ip}
   1406c:	ldr	ip, [r4]
   14070:	str	ip, [sp]
   14074:	bl	12288 <__assert_fail@plt+0x13fc>
   14078:	add	r1, r0, #1
   1407c:	mov	r0, r1
   14080:	str	r1, [sp, #28]
   14084:	bl	162f0 <__assert_fail@plt+0x5464>
   14088:	ldr	ip, [r4, #44]	; 0x2c
   1408c:	mov	fp, r0
   14090:	mov	r3, r9
   14094:	mov	r2, r8
   14098:	ldr	r1, [sp, #28]
   1409c:	str	ip, [sp, #16]
   140a0:	ldr	ip, [r4, #40]	; 0x28
   140a4:	stmib	sp, {r5, r7, ip}
   140a8:	ldr	ip, [r4]
   140ac:	str	ip, [sp]
   140b0:	bl	12288 <__assert_fail@plt+0x13fc>
   140b4:	mov	r0, fp
   140b8:	str	sl, [r6]
   140bc:	add	sp, sp, #36	; 0x24
   140c0:	ldrd	r4, [sp]
   140c4:	ldrd	r6, [sp, #8]
   140c8:	ldrd	r8, [sp, #16]
   140cc:	ldrd	sl, [sp, #24]
   140d0:	add	sp, sp, #32
   140d4:	pop	{pc}		; (ldr pc, [sp], #4)
   140d8:	andeq	sl, r2, r4, ror #4
   140dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   140e0:	cmp	r3, #0
   140e4:	ldr	r4, [pc, #220]	; 141c8 <__assert_fail@plt+0x333c>
   140e8:	movne	r4, r3
   140ec:	strd	r6, [sp, #8]
   140f0:	mov	r6, r2
   140f4:	strd	r8, [sp, #16]
   140f8:	mov	r9, r0
   140fc:	strd	sl, [sp, #24]
   14100:	mov	sl, r1
   14104:	str	lr, [sp, #32]
   14108:	sub	sp, sp, #44	; 0x2c
   1410c:	bl	10dc0 <__errno_location@plt>
   14110:	ldr	r5, [r4, #4]
   14114:	mov	r7, r0
   14118:	mov	r1, #0
   1411c:	add	r8, r4, #8
   14120:	mov	r3, sl
   14124:	ldr	ip, [r4, #44]	; 0x2c
   14128:	mov	r2, r9
   1412c:	mov	r0, r1
   14130:	ldr	lr, [r7]
   14134:	cmp	r6, r1
   14138:	orreq	r5, r5, #1
   1413c:	str	ip, [sp, #16]
   14140:	ldr	ip, [r4, #40]	; 0x28
   14144:	stmib	sp, {r5, r8, ip}
   14148:	ldr	ip, [r4]
   1414c:	str	lr, [sp, #28]
   14150:	str	ip, [sp]
   14154:	bl	12288 <__assert_fail@plt+0x13fc>
   14158:	add	r1, r0, #1
   1415c:	mov	fp, r0
   14160:	mov	r0, r1
   14164:	str	r1, [sp, #36]	; 0x24
   14168:	bl	162f0 <__assert_fail@plt+0x5464>
   1416c:	ldr	ip, [r4, #44]	; 0x2c
   14170:	mov	r3, sl
   14174:	mov	r2, r9
   14178:	ldr	r1, [sp, #36]	; 0x24
   1417c:	str	ip, [sp, #16]
   14180:	ldr	ip, [r4, #40]	; 0x28
   14184:	str	r0, [sp, #32]
   14188:	stmib	sp, {r5, r8, ip}
   1418c:	ldr	ip, [r4]
   14190:	str	ip, [sp]
   14194:	bl	12288 <__assert_fail@plt+0x13fc>
   14198:	ldr	lr, [sp, #28]
   1419c:	cmp	r6, #0
   141a0:	ldr	r0, [sp, #32]
   141a4:	str	lr, [r7]
   141a8:	strne	fp, [r6]
   141ac:	add	sp, sp, #44	; 0x2c
   141b0:	ldrd	r4, [sp]
   141b4:	ldrd	r6, [sp, #8]
   141b8:	ldrd	r8, [sp, #16]
   141bc:	ldrd	sl, [sp, #24]
   141c0:	add	sp, sp, #32
   141c4:	pop	{pc}		; (ldr pc, [sp], #4)
   141c8:	andeq	sl, r2, r4, ror #4
   141cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   141d0:	movw	r5, #41196	; 0xa0ec
   141d4:	movt	r5, #2
   141d8:	ldr	r3, [r5, #4]
   141dc:	strd	r6, [sp, #8]
   141e0:	str	r8, [sp, #16]
   141e4:	str	lr, [sp, #20]
   141e8:	ldr	r7, [r5]
   141ec:	cmp	r3, #1
   141f0:	ble	14214 <__assert_fail@plt+0x3388>
   141f4:	mov	r4, #1
   141f8:	add	r6, r7, #4
   141fc:	ldr	r0, [r6, r4, lsl #3]
   14200:	add	r4, r4, #1
   14204:	bl	17e7c <__assert_fail@plt+0x6ff0>
   14208:	ldr	r3, [r5, #4]
   1420c:	cmp	r3, r4
   14210:	bgt	141fc <__assert_fail@plt+0x3370>
   14214:	ldr	r0, [r7, #4]
   14218:	movw	r4, #41316	; 0xa164
   1421c:	movt	r4, #2
   14220:	cmp	r0, r4
   14224:	beq	14238 <__assert_fail@plt+0x33ac>
   14228:	bl	17e7c <__assert_fail@plt+0x6ff0>
   1422c:	mov	r3, #256	; 0x100
   14230:	str	r3, [r5, #8]
   14234:	str	r4, [r5, #12]
   14238:	ldr	r4, [pc, #44]	; 1426c <__assert_fail@plt+0x33e0>
   1423c:	cmp	r7, r4
   14240:	beq	14250 <__assert_fail@plt+0x33c4>
   14244:	mov	r0, r7
   14248:	bl	17e7c <__assert_fail@plt+0x6ff0>
   1424c:	str	r4, [r5]
   14250:	mov	r3, #1
   14254:	ldrd	r6, [sp, #8]
   14258:	str	r3, [r5, #4]
   1425c:	ldrd	r4, [sp]
   14260:	ldr	r8, [sp, #16]
   14264:	add	sp, sp, #20
   14268:	pop	{pc}		; (ldr pc, [sp], #4)
   1426c:	strdeq	sl, [r2], -r4
   14270:	ldr	r3, [pc, #4]	; 1427c <__assert_fail@plt+0x33f0>
   14274:	mvn	r2, #0
   14278:	b	13c74 <__assert_fail@plt+0x2de8>
   1427c:	andeq	sl, r2, r4, ror #4
   14280:	ldr	r3, [pc]	; 14288 <__assert_fail@plt+0x33fc>
   14284:	b	13c74 <__assert_fail@plt+0x2de8>
   14288:	andeq	sl, r2, r4, ror #4
   1428c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14290:	movw	r4, #41196	; 0xa0ec
   14294:	movt	r4, #2
   14298:	strd	r6, [sp, #8]
   1429c:	strd	r8, [sp, #16]
   142a0:	strd	sl, [sp, #24]
   142a4:	mov	sl, r0
   142a8:	str	lr, [sp, #32]
   142ac:	sub	sp, sp, #44	; 0x2c
   142b0:	bl	10dc0 <__errno_location@plt>
   142b4:	ldr	r3, [r0]
   142b8:	mov	r8, r0
   142bc:	ldr	r2, [r4, #4]
   142c0:	ldr	r5, [r4]
   142c4:	str	r3, [sp, #28]
   142c8:	cmp	r2, #0
   142cc:	bgt	14328 <__assert_fail@plt+0x349c>
   142d0:	add	r3, r4, #8
   142d4:	str	r2, [sp, #36]	; 0x24
   142d8:	rsb	r2, r2, #1
   142dc:	cmp	r5, r3
   142e0:	beq	143f4 <__assert_fail@plt+0x3568>
   142e4:	mov	r1, #8
   142e8:	mov	r0, r5
   142ec:	mvn	r3, #-2147483648	; 0x80000000
   142f0:	str	r1, [sp]
   142f4:	add	r1, sp, #36	; 0x24
   142f8:	bl	16594 <__assert_fail@plt+0x5708>
   142fc:	mov	r5, r0
   14300:	str	r0, [r4]
   14304:	ldr	r0, [r4, #4]
   14308:	mov	r1, #0
   1430c:	ldr	r2, [sp, #36]	; 0x24
   14310:	sub	r2, r2, r0
   14314:	add	r0, r5, r0, lsl #3
   14318:	lsl	r2, r2, #3
   1431c:	bl	10dd8 <memset@plt>
   14320:	ldr	r3, [sp, #36]	; 0x24
   14324:	str	r3, [r4, #4]
   14328:	movw	r4, #41316	; 0xa164
   1432c:	movt	r4, #2
   14330:	ldr	r9, [r5]
   14334:	add	fp, r4, #264	; 0x108
   14338:	mvn	r3, #0
   1433c:	ldr	r7, [r4, #260]	; 0x104
   14340:	mov	r2, sl
   14344:	ldr	r6, [r5, #4]
   14348:	str	fp, [sp, #8]
   1434c:	mov	r1, r9
   14350:	ldr	ip, [r4, #256]	; 0x100
   14354:	orr	r7, r7, #1
   14358:	ldr	lr, [r4, #300]	; 0x12c
   1435c:	mov	r0, r6
   14360:	str	ip, [sp]
   14364:	str	r7, [sp, #4]
   14368:	str	lr, [sp, #16]
   1436c:	ldr	ip, [r4, #296]	; 0x128
   14370:	str	ip, [sp, #12]
   14374:	bl	12288 <__assert_fail@plt+0x13fc>
   14378:	cmp	r9, r0
   1437c:	bhi	143cc <__assert_fail@plt+0x3540>
   14380:	add	r9, r0, #1
   14384:	cmp	r6, r4
   14388:	str	r9, [r5]
   1438c:	beq	14398 <__assert_fail@plt+0x350c>
   14390:	mov	r0, r6
   14394:	bl	17e7c <__assert_fail@plt+0x6ff0>
   14398:	mov	r0, r9
   1439c:	bl	162f0 <__assert_fail@plt+0x5464>
   143a0:	ldr	r3, [r4, #256]	; 0x100
   143a4:	mov	r2, sl
   143a8:	mov	r1, r9
   143ac:	mov	r6, r0
   143b0:	ldr	lr, [r4, #296]	; 0x128
   143b4:	ldr	ip, [r4, #300]	; 0x12c
   143b8:	str	r0, [r5, #4]
   143bc:	stm	sp, {r3, r7, fp, lr}
   143c0:	mvn	r3, #0
   143c4:	str	ip, [sp, #16]
   143c8:	bl	12288 <__assert_fail@plt+0x13fc>
   143cc:	ldr	r3, [sp, #28]
   143d0:	mov	r0, r6
   143d4:	str	r3, [r8]
   143d8:	add	sp, sp, #44	; 0x2c
   143dc:	ldrd	r4, [sp]
   143e0:	ldrd	r6, [sp, #8]
   143e4:	ldrd	r8, [sp, #16]
   143e8:	ldrd	sl, [sp, #24]
   143ec:	add	sp, sp, #32
   143f0:	pop	{pc}		; (ldr pc, [sp], #4)
   143f4:	mov	r0, #8
   143f8:	mvn	r3, #-2147483648	; 0x80000000
   143fc:	add	r1, sp, #36	; 0x24
   14400:	str	r0, [sp]
   14404:	mov	r0, #0
   14408:	bl	16594 <__assert_fail@plt+0x5708>
   1440c:	ldrd	r2, [r4, #8]
   14410:	mov	r5, r0
   14414:	str	r0, [r4]
   14418:	strd	r2, [r0]
   1441c:	b	14304 <__assert_fail@plt+0x3478>
   14420:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14424:	movw	r4, #41196	; 0xa0ec
   14428:	movt	r4, #2
   1442c:	strd	r6, [sp, #8]
   14430:	strd	r8, [sp, #16]
   14434:	strd	sl, [sp, #24]
   14438:	mov	sl, r0
   1443c:	mov	fp, r1
   14440:	str	lr, [sp, #32]
   14444:	sub	sp, sp, #44	; 0x2c
   14448:	bl	10dc0 <__errno_location@plt>
   1444c:	ldr	r3, [r0]
   14450:	mov	r8, r0
   14454:	ldr	r2, [r4, #4]
   14458:	ldr	r5, [r4]
   1445c:	str	r3, [sp, #28]
   14460:	cmp	r2, #0
   14464:	bgt	144c0 <__assert_fail@plt+0x3634>
   14468:	add	r3, r4, #8
   1446c:	str	r2, [sp, #36]	; 0x24
   14470:	rsb	r2, r2, #1
   14474:	cmp	r5, r3
   14478:	beq	1459c <__assert_fail@plt+0x3710>
   1447c:	mov	r1, #8
   14480:	mov	r0, r5
   14484:	mvn	r3, #-2147483648	; 0x80000000
   14488:	str	r1, [sp]
   1448c:	add	r1, sp, #36	; 0x24
   14490:	bl	16594 <__assert_fail@plt+0x5708>
   14494:	mov	r5, r0
   14498:	str	r0, [r4]
   1449c:	ldr	r0, [r4, #4]
   144a0:	mov	r1, #0
   144a4:	ldr	r2, [sp, #36]	; 0x24
   144a8:	sub	r2, r2, r0
   144ac:	add	r0, r5, r0, lsl #3
   144b0:	lsl	r2, r2, #3
   144b4:	bl	10dd8 <memset@plt>
   144b8:	ldr	r3, [sp, #36]	; 0x24
   144bc:	str	r3, [r4, #4]
   144c0:	movw	r4, #41316	; 0xa164
   144c4:	movt	r4, #2
   144c8:	ldr	r9, [r5]
   144cc:	add	r0, r4, #264	; 0x108
   144d0:	mov	r3, fp
   144d4:	ldr	r7, [r4, #260]	; 0x104
   144d8:	mov	r2, sl
   144dc:	ldr	r6, [r5, #4]
   144e0:	str	r0, [sp, #8]
   144e4:	mov	r1, r9
   144e8:	ldr	ip, [r4, #256]	; 0x100
   144ec:	orr	r7, r7, #1
   144f0:	ldr	lr, [r4, #300]	; 0x12c
   144f4:	mov	r0, r6
   144f8:	str	ip, [sp]
   144fc:	str	r7, [sp, #4]
   14500:	str	lr, [sp, #16]
   14504:	ldr	ip, [r4, #296]	; 0x128
   14508:	str	ip, [sp, #12]
   1450c:	bl	12288 <__assert_fail@plt+0x13fc>
   14510:	cmp	r9, r0
   14514:	bhi	14574 <__assert_fail@plt+0x36e8>
   14518:	add	r9, r0, #1
   1451c:	cmp	r6, r4
   14520:	str	r9, [r5]
   14524:	beq	14530 <__assert_fail@plt+0x36a4>
   14528:	mov	r0, r6
   1452c:	bl	17e7c <__assert_fail@plt+0x6ff0>
   14530:	mov	r0, r9
   14534:	bl	162f0 <__assert_fail@plt+0x5464>
   14538:	ldr	ip, [r4, #256]	; 0x100
   1453c:	mov	r1, r9
   14540:	mov	r3, fp
   14544:	mov	r2, sl
   14548:	mov	r6, r0
   1454c:	ldr	r9, [r4, #296]	; 0x128
   14550:	ldr	lr, [r4, #300]	; 0x12c
   14554:	str	r0, [r5, #4]
   14558:	str	ip, [sp]
   1455c:	ldr	ip, [pc, #100]	; 145c8 <__assert_fail@plt+0x373c>
   14560:	str	r7, [sp, #4]
   14564:	str	ip, [sp, #8]
   14568:	str	r9, [sp, #12]
   1456c:	str	lr, [sp, #16]
   14570:	bl	12288 <__assert_fail@plt+0x13fc>
   14574:	ldr	r3, [sp, #28]
   14578:	mov	r0, r6
   1457c:	str	r3, [r8]
   14580:	add	sp, sp, #44	; 0x2c
   14584:	ldrd	r4, [sp]
   14588:	ldrd	r6, [sp, #8]
   1458c:	ldrd	r8, [sp, #16]
   14590:	ldrd	sl, [sp, #24]
   14594:	add	sp, sp, #32
   14598:	pop	{pc}		; (ldr pc, [sp], #4)
   1459c:	mov	r0, #8
   145a0:	mvn	r3, #-2147483648	; 0x80000000
   145a4:	add	r1, sp, #36	; 0x24
   145a8:	str	r0, [sp]
   145ac:	mov	r0, #0
   145b0:	bl	16594 <__assert_fail@plt+0x5708>
   145b4:	ldrd	r2, [r4, #8]
   145b8:	mov	r5, r0
   145bc:	str	r0, [r4]
   145c0:	strd	r2, [r0]
   145c4:	b	1449c <__assert_fail@plt+0x3610>
   145c8:	andeq	sl, r2, ip, ror #4
   145cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   145d0:	mov	r4, #0
   145d4:	mov	r5, #0
   145d8:	strd	r6, [sp, #8]
   145dc:	cmp	r1, #10
   145e0:	str	lr, [sp, #16]
   145e4:	sub	sp, sp, #100	; 0x64
   145e8:	strd	r4, [sp, #48]	; 0x30
   145ec:	beq	14634 <__assert_fail@plt+0x37a8>
   145f0:	mov	r3, sp
   145f4:	strd	r4, [sp, #8]
   145f8:	str	r1, [sp, #48]	; 0x30
   145fc:	mov	r1, r2
   14600:	mvn	r2, #0
   14604:	ldrd	r6, [sp, #48]	; 0x30
   14608:	strd	r6, [sp]
   1460c:	strd	r4, [sp, #16]
   14610:	strd	r4, [sp, #24]
   14614:	strd	r4, [sp, #32]
   14618:	strd	r4, [sp, #40]	; 0x28
   1461c:	bl	13c74 <__assert_fail@plt+0x2de8>
   14620:	add	sp, sp, #100	; 0x64
   14624:	ldrd	r4, [sp]
   14628:	ldrd	r6, [sp, #8]
   1462c:	add	sp, sp, #16
   14630:	pop	{pc}		; (ldr pc, [sp], #4)
   14634:	bl	10e74 <abort@plt>
   14638:	strd	r4, [sp, #-20]!	; 0xffffffec
   1463c:	mov	r4, #0
   14640:	mov	r5, #0
   14644:	strd	r6, [sp, #8]
   14648:	cmp	r1, #10
   1464c:	str	lr, [sp, #16]
   14650:	sub	sp, sp, #100	; 0x64
   14654:	strd	r4, [sp, #48]	; 0x30
   14658:	beq	146a4 <__assert_fail@plt+0x3818>
   1465c:	mov	ip, r2
   14660:	mov	r2, r3
   14664:	strd	r4, [sp, #8]
   14668:	str	r1, [sp, #48]	; 0x30
   1466c:	mov	r3, sp
   14670:	mov	r1, ip
   14674:	ldrd	r6, [sp, #48]	; 0x30
   14678:	strd	r6, [sp]
   1467c:	strd	r4, [sp, #16]
   14680:	strd	r4, [sp, #24]
   14684:	strd	r4, [sp, #32]
   14688:	strd	r4, [sp, #40]	; 0x28
   1468c:	bl	13c74 <__assert_fail@plt+0x2de8>
   14690:	add	sp, sp, #100	; 0x64
   14694:	ldrd	r4, [sp]
   14698:	ldrd	r6, [sp, #8]
   1469c:	add	sp, sp, #16
   146a0:	pop	{pc}		; (ldr pc, [sp], #4)
   146a4:	bl	10e74 <abort@plt>
   146a8:	mov	r2, #0
   146ac:	mov	r3, #0
   146b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   146b4:	strd	r6, [sp, #8]
   146b8:	cmp	r0, #10
   146bc:	strd	r8, [sp, #16]
   146c0:	strd	sl, [sp, #24]
   146c4:	str	lr, [sp, #32]
   146c8:	sub	sp, sp, #124	; 0x7c
   146cc:	strd	r2, [sp, #72]	; 0x48
   146d0:	strd	r2, [sp, #80]	; 0x50
   146d4:	strd	r2, [sp, #88]	; 0x58
   146d8:	strd	r2, [sp, #96]	; 0x60
   146dc:	strd	r2, [sp, #104]	; 0x68
   146e0:	strd	r2, [sp, #112]	; 0x70
   146e4:	beq	14888 <__assert_fail@plt+0x39fc>
   146e8:	mov	r6, r1
   146ec:	movw	r4, #41196	; 0xa0ec
   146f0:	movt	r4, #2
   146f4:	str	r0, [sp, #72]	; 0x48
   146f8:	ldrd	r0, [sp, #72]	; 0x48
   146fc:	strd	r0, [sp, #24]
   14700:	strd	r2, [sp, #32]
   14704:	strd	r2, [sp, #40]	; 0x28
   14708:	strd	r2, [sp, #48]	; 0x30
   1470c:	strd	r2, [sp, #56]	; 0x38
   14710:	strd	r2, [sp, #64]	; 0x40
   14714:	bl	10dc0 <__errno_location@plt>
   14718:	mov	r8, r0
   1471c:	ldr	r5, [r4]
   14720:	ldr	r2, [r4, #4]
   14724:	ldr	r9, [r0]
   14728:	cmp	r2, #0
   1472c:	bgt	14788 <__assert_fail@plt+0x38fc>
   14730:	add	r3, r4, #8
   14734:	str	r2, [sp, #72]	; 0x48
   14738:	rsb	r2, r2, #1
   1473c:	cmp	r5, r3
   14740:	beq	1485c <__assert_fail@plt+0x39d0>
   14744:	mov	r3, #8
   14748:	mov	r0, r5
   1474c:	add	r1, sp, #72	; 0x48
   14750:	str	r3, [sp]
   14754:	mvn	r3, #-2147483648	; 0x80000000
   14758:	bl	16594 <__assert_fail@plt+0x5708>
   1475c:	mov	r5, r0
   14760:	str	r0, [r4]
   14764:	ldr	r0, [r4, #4]
   14768:	mov	r1, #0
   1476c:	ldr	r2, [sp, #72]	; 0x48
   14770:	sub	r2, r2, r0
   14774:	add	r0, r5, r0, lsl #3
   14778:	lsl	r2, r2, #3
   1477c:	bl	10dd8 <memset@plt>
   14780:	ldr	r3, [sp, #72]	; 0x48
   14784:	str	r3, [r4, #4]
   14788:	ldr	sl, [r5]
   1478c:	add	r0, sp, #32
   14790:	mvn	r3, #0
   14794:	mov	r2, r6
   14798:	ldr	r7, [sp, #28]
   1479c:	ldr	r4, [r5, #4]
   147a0:	mov	r1, sl
   147a4:	str	r0, [sp, #8]
   147a8:	ldr	lr, [sp, #24]
   147ac:	orr	r7, r7, #1
   147b0:	ldr	ip, [sp, #64]	; 0x40
   147b4:	mov	r0, r4
   147b8:	ldr	fp, [sp, #68]	; 0x44
   147bc:	str	lr, [sp]
   147c0:	str	r7, [sp, #4]
   147c4:	str	ip, [sp, #12]
   147c8:	str	fp, [sp, #16]
   147cc:	bl	12288 <__assert_fail@plt+0x13fc>
   147d0:	cmp	sl, r0
   147d4:	bhi	14838 <__assert_fail@plt+0x39ac>
   147d8:	add	sl, r0, #1
   147dc:	movw	r3, #41316	; 0xa164
   147e0:	movt	r3, #2
   147e4:	cmp	r4, r3
   147e8:	str	sl, [r5]
   147ec:	beq	147f8 <__assert_fail@plt+0x396c>
   147f0:	mov	r0, r4
   147f4:	bl	17e7c <__assert_fail@plt+0x6ff0>
   147f8:	mov	r0, sl
   147fc:	bl	162f0 <__assert_fail@plt+0x5464>
   14800:	ldr	r3, [sp, #24]
   14804:	mov	r2, r6
   14808:	mov	r1, sl
   1480c:	mov	r4, r0
   14810:	ldr	lr, [sp, #64]	; 0x40
   14814:	ldr	ip, [sp, #68]	; 0x44
   14818:	str	r0, [r5, #4]
   1481c:	add	r5, sp, #32
   14820:	stm	sp, {r3, r7}
   14824:	mvn	r3, #0
   14828:	str	r5, [sp, #8]
   1482c:	str	lr, [sp, #12]
   14830:	str	ip, [sp, #16]
   14834:	bl	12288 <__assert_fail@plt+0x13fc>
   14838:	mov	r0, r4
   1483c:	str	r9, [r8]
   14840:	add	sp, sp, #124	; 0x7c
   14844:	ldrd	r4, [sp]
   14848:	ldrd	r6, [sp, #8]
   1484c:	ldrd	r8, [sp, #16]
   14850:	ldrd	sl, [sp, #24]
   14854:	add	sp, sp, #32
   14858:	pop	{pc}		; (ldr pc, [sp], #4)
   1485c:	mov	r0, #8
   14860:	mvn	r3, #-2147483648	; 0x80000000
   14864:	add	r1, sp, #72	; 0x48
   14868:	str	r0, [sp]
   1486c:	mov	r0, #0
   14870:	bl	16594 <__assert_fail@plt+0x5708>
   14874:	ldrd	r2, [r4, #8]
   14878:	mov	r5, r0
   1487c:	str	r0, [r4]
   14880:	strd	r2, [r0]
   14884:	b	14764 <__assert_fail@plt+0x38d8>
   14888:	bl	10e74 <abort@plt>
   1488c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14890:	cmp	r0, #10
   14894:	strd	r6, [sp, #8]
   14898:	mov	r6, #0
   1489c:	mov	r7, #0
   148a0:	strd	r8, [sp, #16]
   148a4:	strd	sl, [sp, #24]
   148a8:	str	lr, [sp, #32]
   148ac:	sub	sp, sp, #124	; 0x7c
   148b0:	strd	r6, [sp, #72]	; 0x48
   148b4:	strd	r6, [sp, #80]	; 0x50
   148b8:	strd	r6, [sp, #88]	; 0x58
   148bc:	strd	r6, [sp, #96]	; 0x60
   148c0:	strd	r6, [sp, #104]	; 0x68
   148c4:	strd	r6, [sp, #112]	; 0x70
   148c8:	beq	14a74 <__assert_fail@plt+0x3be8>
   148cc:	mov	sl, r2
   148d0:	movw	r5, #41196	; 0xa0ec
   148d4:	movt	r5, #2
   148d8:	str	r0, [sp, #72]	; 0x48
   148dc:	mov	r9, r1
   148e0:	ldrd	r2, [sp, #72]	; 0x48
   148e4:	strd	r2, [sp, #24]
   148e8:	strd	r6, [sp, #32]
   148ec:	strd	r6, [sp, #40]	; 0x28
   148f0:	strd	r6, [sp, #48]	; 0x30
   148f4:	strd	r6, [sp, #56]	; 0x38
   148f8:	strd	r6, [sp, #64]	; 0x40
   148fc:	bl	10dc0 <__errno_location@plt>
   14900:	mov	r7, r0
   14904:	ldr	r4, [r5]
   14908:	ldr	r2, [r5, #4]
   1490c:	ldr	fp, [r0]
   14910:	cmp	r2, #0
   14914:	bgt	14970 <__assert_fail@plt+0x3ae4>
   14918:	add	r3, r5, #8
   1491c:	str	r2, [sp, #72]	; 0x48
   14920:	rsb	r2, r2, #1
   14924:	cmp	r4, r3
   14928:	beq	14a48 <__assert_fail@plt+0x3bbc>
   1492c:	mov	r3, #8
   14930:	mov	r0, r4
   14934:	add	r1, sp, #72	; 0x48
   14938:	str	r3, [sp]
   1493c:	mvn	r3, #-2147483648	; 0x80000000
   14940:	bl	16594 <__assert_fail@plt+0x5708>
   14944:	mov	r4, r0
   14948:	str	r0, [r5]
   1494c:	ldr	r0, [r5, #4]
   14950:	mov	r1, #0
   14954:	ldr	r2, [sp, #72]	; 0x48
   14958:	sub	r2, r2, r0
   1495c:	add	r0, r4, r0, lsl #3
   14960:	lsl	r2, r2, #3
   14964:	bl	10dd8 <memset@plt>
   14968:	ldr	r3, [sp, #72]	; 0x48
   1496c:	str	r3, [r5, #4]
   14970:	ldr	ip, [sp, #24]
   14974:	add	r0, sp, #32
   14978:	mov	r3, sl
   1497c:	mov	r2, r9
   14980:	ldr	r6, [sp, #28]
   14984:	ldr	r8, [r4]
   14988:	ldr	r5, [r4, #4]
   1498c:	str	ip, [sp]
   14990:	orr	r6, r6, #1
   14994:	ldr	ip, [sp, #64]	; 0x40
   14998:	mov	r1, r8
   1499c:	str	r6, [sp, #4]
   149a0:	ldr	lr, [sp, #68]	; 0x44
   149a4:	str	r0, [sp, #8]
   149a8:	mov	r0, r5
   149ac:	str	ip, [sp, #12]
   149b0:	str	lr, [sp, #16]
   149b4:	bl	12288 <__assert_fail@plt+0x13fc>
   149b8:	cmp	r8, r0
   149bc:	bhi	14a24 <__assert_fail@plt+0x3b98>
   149c0:	add	r8, r0, #1
   149c4:	movw	r3, #41316	; 0xa164
   149c8:	movt	r3, #2
   149cc:	cmp	r5, r3
   149d0:	str	r8, [r4]
   149d4:	beq	149e0 <__assert_fail@plt+0x3b54>
   149d8:	mov	r0, r5
   149dc:	bl	17e7c <__assert_fail@plt+0x6ff0>
   149e0:	mov	r0, r8
   149e4:	bl	162f0 <__assert_fail@plt+0x5464>
   149e8:	ldr	lr, [sp, #24]
   149ec:	mov	r1, r8
   149f0:	mov	r3, sl
   149f4:	mov	r2, r9
   149f8:	mov	r5, r0
   149fc:	ldr	r8, [sp, #64]	; 0x40
   14a00:	ldr	ip, [sp, #68]	; 0x44
   14a04:	str	r0, [r4, #4]
   14a08:	str	lr, [sp]
   14a0c:	add	lr, sp, #32
   14a10:	str	r6, [sp, #4]
   14a14:	str	lr, [sp, #8]
   14a18:	str	r8, [sp, #12]
   14a1c:	str	ip, [sp, #16]
   14a20:	bl	12288 <__assert_fail@plt+0x13fc>
   14a24:	mov	r0, r5
   14a28:	str	fp, [r7]
   14a2c:	add	sp, sp, #124	; 0x7c
   14a30:	ldrd	r4, [sp]
   14a34:	ldrd	r6, [sp, #8]
   14a38:	ldrd	r8, [sp, #16]
   14a3c:	ldrd	sl, [sp, #24]
   14a40:	add	sp, sp, #32
   14a44:	pop	{pc}		; (ldr pc, [sp], #4)
   14a48:	mov	r0, #8
   14a4c:	mvn	r3, #-2147483648	; 0x80000000
   14a50:	add	r1, sp, #72	; 0x48
   14a54:	str	r0, [sp]
   14a58:	mov	r0, #0
   14a5c:	bl	16594 <__assert_fail@plt+0x5708>
   14a60:	ldrd	r2, [r5, #8]
   14a64:	mov	r4, r0
   14a68:	str	r0, [r5]
   14a6c:	strd	r2, [r0]
   14a70:	b	1494c <__assert_fail@plt+0x3ac0>
   14a74:	bl	10e74 <abort@plt>
   14a78:	ldr	r3, [pc, #492]	; 14c6c <__assert_fail@plt+0x3de0>
   14a7c:	lsr	ip, r2, #5
   14a80:	and	r2, r2, #31
   14a84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a88:	movw	r5, #41196	; 0xa0ec
   14a8c:	movt	r5, #2
   14a90:	strd	r6, [sp, #8]
   14a94:	strd	r8, [sp, #16]
   14a98:	strd	sl, [sp, #24]
   14a9c:	mov	sl, r0
   14aa0:	mov	fp, r1
   14aa4:	ldrd	r0, [r3]
   14aa8:	str	lr, [sp, #32]
   14aac:	sub	sp, sp, #92	; 0x5c
   14ab0:	ldrd	r8, [r3, #8]
   14ab4:	add	r6, sp, #48	; 0x30
   14ab8:	strd	r0, [sp, #40]	; 0x28
   14abc:	ldrd	r0, [r3, #16]
   14ac0:	strd	r8, [sp, #48]	; 0x30
   14ac4:	ldrd	r8, [r3, #24]
   14ac8:	strd	r0, [sp, #56]	; 0x38
   14acc:	ldrd	r0, [r3, #32]
   14ad0:	strd	r8, [sp, #64]	; 0x40
   14ad4:	ldrd	r8, [r3, #40]	; 0x28
   14ad8:	strd	r0, [sp, #72]	; 0x48
   14adc:	strd	r8, [sp, #80]	; 0x50
   14ae0:	ldr	r3, [r6, ip, lsl #2]
   14ae4:	mvn	r1, r3, lsr r2
   14ae8:	and	r1, r1, #1
   14aec:	eor	r2, r3, r1, lsl r2
   14af0:	str	r2, [r6, ip, lsl #2]
   14af4:	bl	10dc0 <__errno_location@plt>
   14af8:	ldr	r3, [r0]
   14afc:	mov	r8, r0
   14b00:	ldr	r2, [r5, #4]
   14b04:	ldr	r4, [r5]
   14b08:	str	r3, [sp, #28]
   14b0c:	cmp	r2, #0
   14b10:	bgt	14b6c <__assert_fail@plt+0x3ce0>
   14b14:	add	r3, r5, #8
   14b18:	str	r2, [sp, #36]	; 0x24
   14b1c:	rsb	r2, r2, #1
   14b20:	cmp	r4, r3
   14b24:	beq	14c40 <__assert_fail@plt+0x3db4>
   14b28:	mov	r1, #8
   14b2c:	mov	r0, r4
   14b30:	mvn	r3, #-2147483648	; 0x80000000
   14b34:	str	r1, [sp]
   14b38:	add	r1, sp, #36	; 0x24
   14b3c:	bl	16594 <__assert_fail@plt+0x5708>
   14b40:	mov	r4, r0
   14b44:	str	r0, [r5]
   14b48:	ldr	r0, [r5, #4]
   14b4c:	mov	r1, #0
   14b50:	ldr	r2, [sp, #36]	; 0x24
   14b54:	sub	r2, r2, r0
   14b58:	add	r0, r4, r0, lsl #3
   14b5c:	lsl	r2, r2, #3
   14b60:	bl	10dd8 <memset@plt>
   14b64:	ldr	r3, [sp, #36]	; 0x24
   14b68:	str	r3, [r5, #4]
   14b6c:	ldr	ip, [sp, #40]	; 0x28
   14b70:	mov	r3, fp
   14b74:	mov	r2, sl
   14b78:	ldr	r7, [sp, #44]	; 0x2c
   14b7c:	ldr	r9, [r4]
   14b80:	ldr	r5, [r4, #4]
   14b84:	str	ip, [sp]
   14b88:	orr	r7, r7, #1
   14b8c:	ldr	ip, [sp, #80]	; 0x50
   14b90:	mov	r1, r9
   14b94:	str	r7, [sp, #4]
   14b98:	ldr	lr, [sp, #84]	; 0x54
   14b9c:	mov	r0, r5
   14ba0:	str	r6, [sp, #8]
   14ba4:	str	ip, [sp, #12]
   14ba8:	str	lr, [sp, #16]
   14bac:	bl	12288 <__assert_fail@plt+0x13fc>
   14bb0:	cmp	r9, r0
   14bb4:	bhi	14c18 <__assert_fail@plt+0x3d8c>
   14bb8:	add	r9, r0, #1
   14bbc:	movw	r3, #41316	; 0xa164
   14bc0:	movt	r3, #2
   14bc4:	cmp	r5, r3
   14bc8:	str	r9, [r4]
   14bcc:	beq	14bd8 <__assert_fail@plt+0x3d4c>
   14bd0:	mov	r0, r5
   14bd4:	bl	17e7c <__assert_fail@plt+0x6ff0>
   14bd8:	mov	r0, r9
   14bdc:	bl	162f0 <__assert_fail@plt+0x5464>
   14be0:	mov	r1, r9
   14be4:	ldr	ip, [sp, #40]	; 0x28
   14be8:	mov	r3, fp
   14bec:	mov	r2, sl
   14bf0:	mov	r5, r0
   14bf4:	ldr	r9, [sp, #80]	; 0x50
   14bf8:	ldr	lr, [sp, #84]	; 0x54
   14bfc:	str	r0, [r4, #4]
   14c00:	str	ip, [sp]
   14c04:	str	r7, [sp, #4]
   14c08:	str	r6, [sp, #8]
   14c0c:	str	r9, [sp, #12]
   14c10:	str	lr, [sp, #16]
   14c14:	bl	12288 <__assert_fail@plt+0x13fc>
   14c18:	ldr	r3, [sp, #28]
   14c1c:	mov	r0, r5
   14c20:	str	r3, [r8]
   14c24:	add	sp, sp, #92	; 0x5c
   14c28:	ldrd	r4, [sp]
   14c2c:	ldrd	r6, [sp, #8]
   14c30:	ldrd	r8, [sp, #16]
   14c34:	ldrd	sl, [sp, #24]
   14c38:	add	sp, sp, #32
   14c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c40:	mov	r0, #8
   14c44:	mvn	r3, #-2147483648	; 0x80000000
   14c48:	add	r1, sp, #36	; 0x24
   14c4c:	str	r0, [sp]
   14c50:	mov	r0, #0
   14c54:	bl	16594 <__assert_fail@plt+0x5708>
   14c58:	ldrd	r2, [r5, #8]
   14c5c:	mov	r4, r0
   14c60:	str	r0, [r5]
   14c64:	strd	r2, [r0]
   14c68:	b	14b48 <__assert_fail@plt+0x3cbc>
   14c6c:	andeq	sl, r2, r4, ror #4
   14c70:	ldr	ip, [pc, #476]	; 14e54 <__assert_fail@plt+0x3fc8>
   14c74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c78:	movw	r4, #41196	; 0xa0ec
   14c7c:	movt	r4, #2
   14c80:	ldrd	r2, [ip, #8]
   14c84:	strd	r6, [sp, #8]
   14c88:	lsr	r7, r1, #5
   14c8c:	mov	r6, r0
   14c90:	strd	r8, [sp, #16]
   14c94:	str	lr, [sp, #32]
   14c98:	and	lr, r1, #31
   14c9c:	ldrd	r0, [ip]
   14ca0:	strd	sl, [sp, #24]
   14ca4:	sub	sp, sp, #84	; 0x54
   14ca8:	add	r5, sp, #40	; 0x28
   14cac:	strd	r0, [sp, #32]
   14cb0:	strd	r2, [sp, #40]	; 0x28
   14cb4:	ldrd	r0, [ip, #16]
   14cb8:	ldrd	r2, [ip, #24]
   14cbc:	strd	r0, [sp, #48]	; 0x30
   14cc0:	ldrd	r0, [ip, #32]
   14cc4:	strd	r2, [sp, #56]	; 0x38
   14cc8:	ldrd	r2, [ip, #40]	; 0x28
   14ccc:	strd	r0, [sp, #64]	; 0x40
   14cd0:	strd	r2, [sp, #72]	; 0x48
   14cd4:	ldr	r1, [r5, r7, lsl #2]
   14cd8:	mvn	r3, r1, lsr lr
   14cdc:	and	r3, r3, #1
   14ce0:	eor	r1, r1, r3, lsl lr
   14ce4:	str	r1, [r5, r7, lsl #2]
   14ce8:	bl	10dc0 <__errno_location@plt>
   14cec:	mov	r9, r0
   14cf0:	ldr	sl, [r0]
   14cf4:	ldr	r2, [r4, #4]
   14cf8:	ldr	r7, [r4]
   14cfc:	cmp	r2, #0
   14d00:	bgt	14d5c <__assert_fail@plt+0x3ed0>
   14d04:	add	r3, r4, #8
   14d08:	str	r2, [sp, #28]
   14d0c:	rsb	r2, r2, #1
   14d10:	cmp	r7, r3
   14d14:	beq	14e28 <__assert_fail@plt+0x3f9c>
   14d18:	mov	r1, #8
   14d1c:	mov	r0, r7
   14d20:	mvn	r3, #-2147483648	; 0x80000000
   14d24:	str	r1, [sp]
   14d28:	add	r1, sp, #28
   14d2c:	bl	16594 <__assert_fail@plt+0x5708>
   14d30:	mov	r7, r0
   14d34:	str	r0, [r4]
   14d38:	ldr	r0, [r4, #4]
   14d3c:	mov	r1, #0
   14d40:	ldr	r2, [sp, #28]
   14d44:	sub	r2, r2, r0
   14d48:	add	r0, r7, r0, lsl #3
   14d4c:	lsl	r2, r2, #3
   14d50:	bl	10dd8 <memset@plt>
   14d54:	ldr	r3, [sp, #28]
   14d58:	str	r3, [r4, #4]
   14d5c:	ldr	ip, [sp, #32]
   14d60:	mvn	r3, #0
   14d64:	mov	r2, r6
   14d68:	ldr	r8, [sp, #36]	; 0x24
   14d6c:	ldr	fp, [r7]
   14d70:	ldr	r4, [r7, #4]
   14d74:	str	ip, [sp]
   14d78:	orr	r8, r8, #1
   14d7c:	ldr	ip, [sp, #72]	; 0x48
   14d80:	mov	r1, fp
   14d84:	str	r8, [sp, #4]
   14d88:	ldr	lr, [sp, #76]	; 0x4c
   14d8c:	mov	r0, r4
   14d90:	str	r5, [sp, #8]
   14d94:	str	ip, [sp, #12]
   14d98:	str	lr, [sp, #16]
   14d9c:	bl	12288 <__assert_fail@plt+0x13fc>
   14da0:	cmp	fp, r0
   14da4:	bhi	14e04 <__assert_fail@plt+0x3f78>
   14da8:	add	fp, r0, #1
   14dac:	movw	r3, #41316	; 0xa164
   14db0:	movt	r3, #2
   14db4:	cmp	r4, r3
   14db8:	str	fp, [r7]
   14dbc:	beq	14dc8 <__assert_fail@plt+0x3f3c>
   14dc0:	mov	r0, r4
   14dc4:	bl	17e7c <__assert_fail@plt+0x6ff0>
   14dc8:	mov	r0, fp
   14dcc:	bl	162f0 <__assert_fail@plt+0x5464>
   14dd0:	ldr	r3, [sp, #32]
   14dd4:	mov	r2, r6
   14dd8:	mov	r1, fp
   14ddc:	mov	r4, r0
   14de0:	ldr	lr, [sp, #72]	; 0x48
   14de4:	ldr	ip, [sp, #76]	; 0x4c
   14de8:	str	r0, [r7, #4]
   14dec:	stm	sp, {r3, r8}
   14df0:	mvn	r3, #0
   14df4:	str	r5, [sp, #8]
   14df8:	str	lr, [sp, #12]
   14dfc:	str	ip, [sp, #16]
   14e00:	bl	12288 <__assert_fail@plt+0x13fc>
   14e04:	mov	r0, r4
   14e08:	str	sl, [r9]
   14e0c:	add	sp, sp, #84	; 0x54
   14e10:	ldrd	r4, [sp]
   14e14:	ldrd	r6, [sp, #8]
   14e18:	ldrd	r8, [sp, #16]
   14e1c:	ldrd	sl, [sp, #24]
   14e20:	add	sp, sp, #32
   14e24:	pop	{pc}		; (ldr pc, [sp], #4)
   14e28:	mov	r0, #8
   14e2c:	mvn	r3, #-2147483648	; 0x80000000
   14e30:	add	r1, sp, #28
   14e34:	str	r0, [sp]
   14e38:	mov	r0, #0
   14e3c:	bl	16594 <__assert_fail@plt+0x5708>
   14e40:	ldrd	r2, [r4, #8]
   14e44:	mov	r7, r0
   14e48:	str	r0, [r4]
   14e4c:	strd	r2, [r0]
   14e50:	b	14d38 <__assert_fail@plt+0x3eac>
   14e54:	andeq	sl, r2, r4, ror #4
   14e58:	ldr	ip, [pc, #472]	; 15038 <__assert_fail@plt+0x41ac>
   14e5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e60:	mov	r5, r0
   14e64:	movw	r4, #41196	; 0xa0ec
   14e68:	movt	r4, #2
   14e6c:	ldrd	r2, [ip]
   14e70:	ldrd	r0, [ip, #8]
   14e74:	strd	r6, [sp, #8]
   14e78:	strd	r8, [sp, #16]
   14e7c:	strd	sl, [sp, #24]
   14e80:	str	lr, [sp, #32]
   14e84:	sub	sp, sp, #84	; 0x54
   14e88:	strd	r2, [sp, #32]
   14e8c:	strd	r0, [sp, #40]	; 0x28
   14e90:	ldr	r6, [sp, #44]	; 0x2c
   14e94:	ldrd	r2, [ip, #16]
   14e98:	ldrd	r0, [ip, #24]
   14e9c:	mvn	lr, r6
   14ea0:	and	lr, lr, #67108864	; 0x4000000
   14ea4:	eor	lr, lr, r6
   14ea8:	ldrd	r6, [ip, #40]	; 0x28
   14eac:	strd	r2, [sp, #48]	; 0x30
   14eb0:	ldrd	r2, [ip, #32]
   14eb4:	str	lr, [sp, #44]	; 0x2c
   14eb8:	strd	r0, [sp, #56]	; 0x38
   14ebc:	strd	r2, [sp, #64]	; 0x40
   14ec0:	strd	r6, [sp, #72]	; 0x48
   14ec4:	bl	10dc0 <__errno_location@plt>
   14ec8:	mov	r8, r0
   14ecc:	ldr	r9, [r0]
   14ed0:	ldr	r2, [r4, #4]
   14ed4:	ldr	r6, [r4]
   14ed8:	cmp	r2, #0
   14edc:	bgt	14f38 <__assert_fail@plt+0x40ac>
   14ee0:	add	r3, r4, #8
   14ee4:	str	r2, [sp, #28]
   14ee8:	rsb	r2, r2, #1
   14eec:	cmp	r6, r3
   14ef0:	beq	1500c <__assert_fail@plt+0x4180>
   14ef4:	mov	r1, #8
   14ef8:	mov	r0, r6
   14efc:	mvn	r3, #-2147483648	; 0x80000000
   14f00:	str	r1, [sp]
   14f04:	add	r1, sp, #28
   14f08:	bl	16594 <__assert_fail@plt+0x5708>
   14f0c:	mov	r6, r0
   14f10:	str	r0, [r4]
   14f14:	ldr	r0, [r4, #4]
   14f18:	mov	r1, #0
   14f1c:	ldr	r2, [sp, #28]
   14f20:	sub	r2, r2, r0
   14f24:	add	r0, r6, r0, lsl #3
   14f28:	lsl	r2, r2, #3
   14f2c:	bl	10dd8 <memset@plt>
   14f30:	ldr	r3, [sp, #28]
   14f34:	str	r3, [r4, #4]
   14f38:	ldr	sl, [r6]
   14f3c:	add	r0, sp, #40	; 0x28
   14f40:	mvn	r3, #0
   14f44:	mov	r2, r5
   14f48:	ldr	r7, [sp, #36]	; 0x24
   14f4c:	ldr	r4, [r6, #4]
   14f50:	mov	r1, sl
   14f54:	str	r0, [sp, #8]
   14f58:	ldr	lr, [sp, #32]
   14f5c:	orr	r7, r7, #1
   14f60:	ldr	ip, [sp, #72]	; 0x48
   14f64:	mov	r0, r4
   14f68:	ldr	fp, [sp, #76]	; 0x4c
   14f6c:	str	lr, [sp]
   14f70:	str	r7, [sp, #4]
   14f74:	str	ip, [sp, #12]
   14f78:	str	fp, [sp, #16]
   14f7c:	bl	12288 <__assert_fail@plt+0x13fc>
   14f80:	cmp	sl, r0
   14f84:	bhi	14fe8 <__assert_fail@plt+0x415c>
   14f88:	add	sl, r0, #1
   14f8c:	movw	r3, #41316	; 0xa164
   14f90:	movt	r3, #2
   14f94:	cmp	r4, r3
   14f98:	str	sl, [r6]
   14f9c:	beq	14fa8 <__assert_fail@plt+0x411c>
   14fa0:	mov	r0, r4
   14fa4:	bl	17e7c <__assert_fail@plt+0x6ff0>
   14fa8:	mov	r0, sl
   14fac:	bl	162f0 <__assert_fail@plt+0x5464>
   14fb0:	ldr	r3, [sp, #32]
   14fb4:	mov	r2, r5
   14fb8:	add	r5, sp, #40	; 0x28
   14fbc:	mov	r1, sl
   14fc0:	mov	r4, r0
   14fc4:	ldr	lr, [sp, #72]	; 0x48
   14fc8:	ldr	ip, [sp, #76]	; 0x4c
   14fcc:	str	r0, [r6, #4]
   14fd0:	stm	sp, {r3, r7}
   14fd4:	mvn	r3, #0
   14fd8:	str	r5, [sp, #8]
   14fdc:	str	lr, [sp, #12]
   14fe0:	str	ip, [sp, #16]
   14fe4:	bl	12288 <__assert_fail@plt+0x13fc>
   14fe8:	mov	r0, r4
   14fec:	str	r9, [r8]
   14ff0:	add	sp, sp, #84	; 0x54
   14ff4:	ldrd	r4, [sp]
   14ff8:	ldrd	r6, [sp, #8]
   14ffc:	ldrd	r8, [sp, #16]
   15000:	ldrd	sl, [sp, #24]
   15004:	add	sp, sp, #32
   15008:	pop	{pc}		; (ldr pc, [sp], #4)
   1500c:	mov	r0, #8
   15010:	mvn	r3, #-2147483648	; 0x80000000
   15014:	add	r1, sp, #28
   15018:	str	r0, [sp]
   1501c:	mov	r0, #0
   15020:	bl	16594 <__assert_fail@plt+0x5708>
   15024:	ldrd	r2, [r4, #8]
   15028:	mov	r6, r0
   1502c:	str	r0, [r4]
   15030:	strd	r2, [r0]
   15034:	b	14f14 <__assert_fail@plt+0x4088>
   15038:	andeq	sl, r2, r4, ror #4
   1503c:	ldr	ip, [pc, #480]	; 15224 <__assert_fail@plt+0x4398>
   15040:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15044:	mov	r5, r0
   15048:	movw	r4, #41196	; 0xa0ec
   1504c:	movt	r4, #2
   15050:	ldrd	r2, [ip]
   15054:	strd	r6, [sp, #8]
   15058:	mov	r6, r1
   1505c:	ldrd	r0, [ip, #8]
   15060:	strd	r8, [sp, #16]
   15064:	strd	sl, [sp, #24]
   15068:	str	lr, [sp, #32]
   1506c:	sub	sp, sp, #84	; 0x54
   15070:	ldrd	r8, [ip, #40]	; 0x28
   15074:	strd	r2, [sp, #32]
   15078:	strd	r0, [sp, #40]	; 0x28
   1507c:	ldrd	r2, [ip, #16]
   15080:	ldr	r7, [sp, #44]	; 0x2c
   15084:	ldrd	r0, [ip, #24]
   15088:	strd	r2, [sp, #48]	; 0x30
   1508c:	ldrd	r2, [ip, #32]
   15090:	mvn	lr, r7
   15094:	and	lr, lr, #67108864	; 0x4000000
   15098:	eor	lr, lr, r7
   1509c:	str	lr, [sp, #44]	; 0x2c
   150a0:	strd	r0, [sp, #56]	; 0x38
   150a4:	strd	r2, [sp, #64]	; 0x40
   150a8:	strd	r8, [sp, #72]	; 0x48
   150ac:	bl	10dc0 <__errno_location@plt>
   150b0:	mov	r9, r0
   150b4:	ldr	sl, [r0]
   150b8:	ldr	r2, [r4, #4]
   150bc:	ldr	r7, [r4]
   150c0:	cmp	r2, #0
   150c4:	bgt	15120 <__assert_fail@plt+0x4294>
   150c8:	add	r3, r4, #8
   150cc:	str	r2, [sp, #28]
   150d0:	rsb	r2, r2, #1
   150d4:	cmp	r7, r3
   150d8:	beq	151f8 <__assert_fail@plt+0x436c>
   150dc:	mov	r1, #8
   150e0:	mov	r0, r7
   150e4:	mvn	r3, #-2147483648	; 0x80000000
   150e8:	str	r1, [sp]
   150ec:	add	r1, sp, #28
   150f0:	bl	16594 <__assert_fail@plt+0x5708>
   150f4:	mov	r7, r0
   150f8:	str	r0, [r4]
   150fc:	ldr	r0, [r4, #4]
   15100:	mov	r1, #0
   15104:	ldr	r2, [sp, #28]
   15108:	sub	r2, r2, r0
   1510c:	add	r0, r7, r0, lsl #3
   15110:	lsl	r2, r2, #3
   15114:	bl	10dd8 <memset@plt>
   15118:	ldr	r3, [sp, #28]
   1511c:	str	r3, [r4, #4]
   15120:	ldr	ip, [sp, #32]
   15124:	add	r0, sp, #40	; 0x28
   15128:	mov	r3, r6
   1512c:	mov	r2, r5
   15130:	ldr	r8, [sp, #36]	; 0x24
   15134:	ldr	fp, [r7]
   15138:	ldr	r4, [r7, #4]
   1513c:	str	ip, [sp]
   15140:	orr	r8, r8, #1
   15144:	ldr	ip, [sp, #72]	; 0x48
   15148:	mov	r1, fp
   1514c:	str	r8, [sp, #4]
   15150:	ldr	lr, [sp, #76]	; 0x4c
   15154:	str	r0, [sp, #8]
   15158:	mov	r0, r4
   1515c:	str	ip, [sp, #12]
   15160:	str	lr, [sp, #16]
   15164:	bl	12288 <__assert_fail@plt+0x13fc>
   15168:	cmp	fp, r0
   1516c:	bhi	151d4 <__assert_fail@plt+0x4348>
   15170:	add	fp, r0, #1
   15174:	movw	r3, #41316	; 0xa164
   15178:	movt	r3, #2
   1517c:	cmp	r4, r3
   15180:	str	fp, [r7]
   15184:	beq	15190 <__assert_fail@plt+0x4304>
   15188:	mov	r0, r4
   1518c:	bl	17e7c <__assert_fail@plt+0x6ff0>
   15190:	mov	r0, fp
   15194:	bl	162f0 <__assert_fail@plt+0x5464>
   15198:	ldr	lr, [sp, #32]
   1519c:	mov	r2, r5
   151a0:	mov	r3, r6
   151a4:	mov	r1, fp
   151a8:	mov	r4, r0
   151ac:	ldr	r5, [sp, #72]	; 0x48
   151b0:	ldr	ip, [sp, #76]	; 0x4c
   151b4:	str	r0, [r7, #4]
   151b8:	str	lr, [sp]
   151bc:	add	lr, sp, #40	; 0x28
   151c0:	str	r8, [sp, #4]
   151c4:	str	lr, [sp, #8]
   151c8:	str	r5, [sp, #12]
   151cc:	str	ip, [sp, #16]
   151d0:	bl	12288 <__assert_fail@plt+0x13fc>
   151d4:	mov	r0, r4
   151d8:	str	sl, [r9]
   151dc:	add	sp, sp, #84	; 0x54
   151e0:	ldrd	r4, [sp]
   151e4:	ldrd	r6, [sp, #8]
   151e8:	ldrd	r8, [sp, #16]
   151ec:	ldrd	sl, [sp, #24]
   151f0:	add	sp, sp, #32
   151f4:	pop	{pc}		; (ldr pc, [sp], #4)
   151f8:	mov	r0, #8
   151fc:	mvn	r3, #-2147483648	; 0x80000000
   15200:	add	r1, sp, #28
   15204:	str	r0, [sp]
   15208:	mov	r0, #0
   1520c:	bl	16594 <__assert_fail@plt+0x5708>
   15210:	ldrd	r2, [r4, #8]
   15214:	mov	r7, r0
   15218:	str	r0, [r4]
   1521c:	strd	r2, [r0]
   15220:	b	150fc <__assert_fail@plt+0x4270>
   15224:	andeq	sl, r2, r4, ror #4
   15228:	strd	r4, [sp, #-12]!
   1522c:	mov	r4, #0
   15230:	mov	r5, #0
   15234:	str	lr, [sp, #8]
   15238:	sub	sp, sp, #100	; 0x64
   1523c:	cmp	r1, #10
   15240:	strd	r4, [sp]
   15244:	strd	r4, [sp, #8]
   15248:	strd	r4, [sp, #16]
   1524c:	strd	r4, [sp, #24]
   15250:	strd	r4, [sp, #32]
   15254:	strd	r4, [sp, #40]	; 0x28
   15258:	beq	15288 <__assert_fail@plt+0x43fc>
   1525c:	mov	ip, #67108864	; 0x4000000
   15260:	mov	r3, sp
   15264:	str	r1, [sp]
   15268:	mov	r1, r2
   1526c:	mvn	r2, #0
   15270:	str	ip, [sp, #12]
   15274:	bl	13c74 <__assert_fail@plt+0x2de8>
   15278:	add	sp, sp, #100	; 0x64
   1527c:	ldrd	r4, [sp]
   15280:	add	sp, sp, #8
   15284:	pop	{pc}		; (ldr pc, [sp], #4)
   15288:	bl	10e74 <abort@plt>
   1528c:	ldr	ip, [pc, #156]	; 15330 <__assert_fail@plt+0x44a4>
   15290:	cmp	r2, #0
   15294:	cmpne	r1, #0
   15298:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1529c:	strd	r6, [sp, #8]
   152a0:	mov	r6, r2
   152a4:	str	r8, [sp, #16]
   152a8:	mov	r8, r3
   152ac:	strd	sl, [sp, #20]
   152b0:	ldrd	r4, [ip]
   152b4:	str	lr, [sp, #28]
   152b8:	sub	sp, sp, #48	; 0x30
   152bc:	mov	lr, #10
   152c0:	ldrd	r2, [ip, #8]
   152c4:	ldrd	sl, [ip, #16]
   152c8:	strd	r4, [sp]
   152cc:	ldrd	r4, [ip, #32]
   152d0:	str	lr, [sp]
   152d4:	strd	r2, [sp, #8]
   152d8:	strd	sl, [sp, #16]
   152dc:	ldrd	r2, [ip, #24]
   152e0:	ldrd	sl, [ip, #40]	; 0x28
   152e4:	strd	r2, [sp, #24]
   152e8:	strd	r4, [sp, #32]
   152ec:	strd	sl, [sp, #40]	; 0x28
   152f0:	beq	1532c <__assert_fail@plt+0x44a0>
   152f4:	mov	r7, r1
   152f8:	mov	r3, sp
   152fc:	mov	r1, r8
   15300:	mvn	r2, #0
   15304:	str	r7, [sp, #40]	; 0x28
   15308:	str	r6, [sp, #44]	; 0x2c
   1530c:	bl	13c74 <__assert_fail@plt+0x2de8>
   15310:	add	sp, sp, #48	; 0x30
   15314:	ldrd	r4, [sp]
   15318:	ldrd	r6, [sp, #8]
   1531c:	ldr	r8, [sp, #16]
   15320:	ldrd	sl, [sp, #20]
   15324:	add	sp, sp, #28
   15328:	pop	{pc}		; (ldr pc, [sp], #4)
   1532c:	bl	10e74 <abort@plt>
   15330:	andeq	sl, r2, r4, ror #4
   15334:	ldr	ip, [pc, #156]	; 153d8 <__assert_fail@plt+0x454c>
   15338:	cmp	r2, #0
   1533c:	cmpne	r1, #0
   15340:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15344:	strd	r6, [sp, #8]
   15348:	mov	r6, r2
   1534c:	str	r8, [sp, #16]
   15350:	mov	r8, r3
   15354:	strd	sl, [sp, #20]
   15358:	ldrd	r4, [ip]
   1535c:	str	lr, [sp, #28]
   15360:	sub	sp, sp, #48	; 0x30
   15364:	mov	lr, #10
   15368:	ldrd	r2, [ip, #8]
   1536c:	ldrd	sl, [ip, #16]
   15370:	strd	r4, [sp]
   15374:	ldrd	r4, [ip, #32]
   15378:	str	lr, [sp]
   1537c:	strd	r2, [sp, #8]
   15380:	strd	sl, [sp, #16]
   15384:	ldrd	r2, [ip, #24]
   15388:	ldrd	sl, [ip, #40]	; 0x28
   1538c:	strd	r2, [sp, #24]
   15390:	strd	r4, [sp, #32]
   15394:	strd	sl, [sp, #40]	; 0x28
   15398:	beq	153d4 <__assert_fail@plt+0x4548>
   1539c:	ldr	r2, [sp, #80]	; 0x50
   153a0:	mov	r7, r1
   153a4:	mov	r3, sp
   153a8:	mov	r1, r8
   153ac:	str	r7, [sp, #40]	; 0x28
   153b0:	str	r6, [sp, #44]	; 0x2c
   153b4:	bl	13c74 <__assert_fail@plt+0x2de8>
   153b8:	add	sp, sp, #48	; 0x30
   153bc:	ldrd	r4, [sp]
   153c0:	ldrd	r6, [sp, #8]
   153c4:	ldr	r8, [sp, #16]
   153c8:	ldrd	sl, [sp, #20]
   153cc:	add	sp, sp, #28
   153d0:	pop	{pc}		; (ldr pc, [sp], #4)
   153d4:	bl	10e74 <abort@plt>
   153d8:	andeq	sl, r2, r4, ror #4
   153dc:	ldr	ip, [pc, #512]	; 155e4 <__assert_fail@plt+0x4758>
   153e0:	cmp	r0, #0
   153e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153e8:	ldrd	r4, [ip, #16]
   153ec:	strd	r6, [sp, #8]
   153f0:	clz	r6, r1
   153f4:	mov	r7, r1
   153f8:	strd	r8, [sp, #16]
   153fc:	mov	r8, r0
   15400:	lsr	r6, r6, #5
   15404:	strd	sl, [sp, #24]
   15408:	mov	fp, r2
   1540c:	mov	sl, #10
   15410:	ldrd	r2, [ip]
   15414:	moveq	r6, #1
   15418:	str	lr, [sp, #32]
   1541c:	sub	sp, sp, #92	; 0x5c
   15420:	cmp	r6, #0
   15424:	ldrd	r0, [ip, #8]
   15428:	strd	r2, [sp, #40]	; 0x28
   1542c:	strd	r4, [sp, #56]	; 0x38
   15430:	ldrd	r2, [ip, #24]
   15434:	strd	r0, [sp, #48]	; 0x30
   15438:	ldrd	r0, [ip, #32]
   1543c:	str	sl, [sp, #40]	; 0x28
   15440:	ldrd	r4, [ip, #40]	; 0x28
   15444:	strd	r2, [sp, #64]	; 0x40
   15448:	strd	r0, [sp, #72]	; 0x48
   1544c:	strd	r4, [sp, #80]	; 0x50
   15450:	bne	155e0 <__assert_fail@plt+0x4754>
   15454:	movw	r5, #41196	; 0xa0ec
   15458:	movt	r5, #2
   1545c:	str	r8, [sp, #80]	; 0x50
   15460:	str	r7, [sp, #84]	; 0x54
   15464:	bl	10dc0 <__errno_location@plt>
   15468:	ldr	r3, [r0]
   1546c:	mov	r9, r0
   15470:	ldr	r2, [r5, #4]
   15474:	ldr	r4, [r5]
   15478:	str	r3, [sp, #28]
   1547c:	cmp	r2, #0
   15480:	movgt	r1, sl
   15484:	bgt	154ec <__assert_fail@plt+0x4660>
   15488:	add	r3, r5, #8
   1548c:	str	r2, [sp, #36]	; 0x24
   15490:	rsb	r2, r2, #1
   15494:	cmp	r4, r3
   15498:	beq	155b4 <__assert_fail@plt+0x4728>
   1549c:	mov	r1, #8
   154a0:	mov	r0, r4
   154a4:	mvn	r3, #-2147483648	; 0x80000000
   154a8:	str	r1, [sp]
   154ac:	add	r1, sp, #36	; 0x24
   154b0:	bl	16594 <__assert_fail@plt+0x5708>
   154b4:	mov	r4, r0
   154b8:	str	r0, [r5]
   154bc:	ldr	r0, [r5, #4]
   154c0:	mov	r1, #0
   154c4:	ldr	r2, [sp, #36]	; 0x24
   154c8:	sub	r2, r2, r0
   154cc:	add	r0, r4, r0, lsl #3
   154d0:	lsl	r2, r2, #3
   154d4:	bl	10dd8 <memset@plt>
   154d8:	ldr	r3, [sp, #36]	; 0x24
   154dc:	ldr	r1, [sp, #40]	; 0x28
   154e0:	ldr	r8, [sp, #80]	; 0x50
   154e4:	str	r3, [r5, #4]
   154e8:	ldr	r7, [sp, #84]	; 0x54
   154ec:	mvn	r3, #0
   154f0:	mov	r2, fp
   154f4:	ldr	r6, [sp, #44]	; 0x2c
   154f8:	ldr	sl, [r4]
   154fc:	ldr	r5, [r4, #4]
   15500:	orr	r6, r6, #1
   15504:	stm	sp, {r1, r6}
   15508:	add	r1, sp, #48	; 0x30
   1550c:	str	r8, [sp, #12]
   15510:	mov	r0, r5
   15514:	str	r1, [sp, #8]
   15518:	mov	r1, sl
   1551c:	str	r7, [sp, #16]
   15520:	bl	12288 <__assert_fail@plt+0x13fc>
   15524:	cmp	sl, r0
   15528:	bhi	1558c <__assert_fail@plt+0x4700>
   1552c:	add	r7, r0, #1
   15530:	movw	r3, #41316	; 0xa164
   15534:	movt	r3, #2
   15538:	cmp	r5, r3
   1553c:	str	r7, [r4]
   15540:	beq	1554c <__assert_fail@plt+0x46c0>
   15544:	mov	r0, r5
   15548:	bl	17e7c <__assert_fail@plt+0x6ff0>
   1554c:	mov	r0, r7
   15550:	bl	162f0 <__assert_fail@plt+0x5464>
   15554:	ldr	r3, [sp, #40]	; 0x28
   15558:	mov	r2, fp
   1555c:	mov	r1, r7
   15560:	mov	r5, r0
   15564:	ldr	lr, [sp, #80]	; 0x50
   15568:	ldr	ip, [sp, #84]	; 0x54
   1556c:	str	r0, [r4, #4]
   15570:	add	r4, sp, #48	; 0x30
   15574:	stm	sp, {r3, r6}
   15578:	mvn	r3, #0
   1557c:	str	r4, [sp, #8]
   15580:	str	lr, [sp, #12]
   15584:	str	ip, [sp, #16]
   15588:	bl	12288 <__assert_fail@plt+0x13fc>
   1558c:	ldr	r3, [sp, #28]
   15590:	mov	r0, r5
   15594:	str	r3, [r9]
   15598:	add	sp, sp, #92	; 0x5c
   1559c:	ldrd	r4, [sp]
   155a0:	ldrd	r6, [sp, #8]
   155a4:	ldrd	r8, [sp, #16]
   155a8:	ldrd	sl, [sp, #24]
   155ac:	add	sp, sp, #32
   155b0:	pop	{pc}		; (ldr pc, [sp], #4)
   155b4:	mov	r1, #8
   155b8:	mvn	r3, #-2147483648	; 0x80000000
   155bc:	mov	r0, r6
   155c0:	str	r1, [sp]
   155c4:	add	r1, sp, #36	; 0x24
   155c8:	bl	16594 <__assert_fail@plt+0x5708>
   155cc:	ldrd	r2, [r5, #8]
   155d0:	mov	r4, r0
   155d4:	str	r0, [r5]
   155d8:	strd	r2, [r0]
   155dc:	b	154bc <__assert_fail@plt+0x4630>
   155e0:	bl	10e74 <abort@plt>
   155e4:	andeq	sl, r2, r4, ror #4
   155e8:	ldr	ip, [pc, #536]	; 15808 <__assert_fail@plt+0x497c>
   155ec:	cmp	r0, #0
   155f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   155f4:	ldrd	r4, [ip, #16]
   155f8:	strd	r6, [sp, #8]
   155fc:	mov	r6, r1
   15600:	mov	r7, r0
   15604:	strd	r8, [sp, #16]
   15608:	mov	r9, #10
   1560c:	strd	sl, [sp, #24]
   15610:	mov	sl, r2
   15614:	mov	fp, r3
   15618:	str	lr, [sp, #32]
   1561c:	clz	lr, r1
   15620:	sub	sp, sp, #92	; 0x5c
   15624:	ldrd	r2, [ip]
   15628:	lsr	lr, lr, #5
   1562c:	moveq	lr, #1
   15630:	ldrd	r0, [ip, #8]
   15634:	cmp	lr, #0
   15638:	strd	r4, [sp, #56]	; 0x38
   1563c:	ldrd	r4, [ip, #40]	; 0x28
   15640:	str	lr, [sp, #28]
   15644:	strd	r2, [sp, #40]	; 0x28
   15648:	ldrd	r2, [ip, #24]
   1564c:	strd	r0, [sp, #48]	; 0x30
   15650:	ldrd	r0, [ip, #32]
   15654:	str	r9, [sp, #40]	; 0x28
   15658:	strd	r2, [sp, #64]	; 0x40
   1565c:	strd	r4, [sp, #80]	; 0x50
   15660:	strd	r0, [sp, #72]	; 0x48
   15664:	bne	15804 <__assert_fail@plt+0x4978>
   15668:	movw	r5, #41196	; 0xa0ec
   1566c:	movt	r5, #2
   15670:	str	r7, [sp, #80]	; 0x50
   15674:	str	r6, [sp, #84]	; 0x54
   15678:	bl	10dc0 <__errno_location@plt>
   1567c:	ldr	r3, [r0]
   15680:	mov	r8, r0
   15684:	ldr	r2, [r5, #4]
   15688:	ldr	r4, [r5]
   1568c:	str	r3, [sp, #24]
   15690:	cmp	r2, #0
   15694:	movgt	r1, r9
   15698:	bgt	15700 <__assert_fail@plt+0x4874>
   1569c:	add	r3, r5, #8
   156a0:	str	r2, [sp, #36]	; 0x24
   156a4:	rsb	r2, r2, #1
   156a8:	cmp	r4, r3
   156ac:	beq	157d8 <__assert_fail@plt+0x494c>
   156b0:	mov	r1, #8
   156b4:	mov	r0, r4
   156b8:	mvn	r3, #-2147483648	; 0x80000000
   156bc:	str	r1, [sp]
   156c0:	add	r1, sp, #36	; 0x24
   156c4:	bl	16594 <__assert_fail@plt+0x5708>
   156c8:	mov	r4, r0
   156cc:	str	r0, [r5]
   156d0:	ldr	r0, [r5, #4]
   156d4:	mov	r1, #0
   156d8:	ldr	r2, [sp, #36]	; 0x24
   156dc:	sub	r2, r2, r0
   156e0:	add	r0, r4, r0, lsl #3
   156e4:	lsl	r2, r2, #3
   156e8:	bl	10dd8 <memset@plt>
   156ec:	ldr	r3, [sp, #36]	; 0x24
   156f0:	ldr	r1, [sp, #40]	; 0x28
   156f4:	ldr	r7, [sp, #80]	; 0x50
   156f8:	str	r3, [r5, #4]
   156fc:	ldr	r6, [sp, #84]	; 0x54
   15700:	mov	r3, fp
   15704:	mov	r2, sl
   15708:	ldr	r0, [sp, #44]	; 0x2c
   1570c:	ldr	r9, [r4]
   15710:	ldr	r5, [r4, #4]
   15714:	orr	r0, r0, #1
   15718:	str	r1, [sp]
   1571c:	add	r1, sp, #48	; 0x30
   15720:	str	r0, [sp, #4]
   15724:	str	r1, [sp, #8]
   15728:	mov	r1, r9
   1572c:	str	r7, [sp, #12]
   15730:	str	r6, [sp, #16]
   15734:	str	r0, [sp, #28]
   15738:	mov	r0, r5
   1573c:	bl	12288 <__assert_fail@plt+0x13fc>
   15740:	cmp	r9, r0
   15744:	bhi	157b0 <__assert_fail@plt+0x4924>
   15748:	add	r6, r0, #1
   1574c:	movw	r3, #41316	; 0xa164
   15750:	movt	r3, #2
   15754:	cmp	r5, r3
   15758:	str	r6, [r4]
   1575c:	beq	15768 <__assert_fail@plt+0x48dc>
   15760:	mov	r0, r5
   15764:	bl	17e7c <__assert_fail@plt+0x6ff0>
   15768:	mov	r0, r6
   1576c:	bl	162f0 <__assert_fail@plt+0x5464>
   15770:	ldr	lr, [sp, #40]	; 0x28
   15774:	mov	r1, r6
   15778:	mov	r3, fp
   1577c:	mov	r2, sl
   15780:	mov	r5, r0
   15784:	ldr	r6, [sp, #80]	; 0x50
   15788:	ldr	ip, [sp, #84]	; 0x54
   1578c:	str	r0, [r4, #4]
   15790:	str	lr, [sp]
   15794:	ldr	lr, [sp, #28]
   15798:	str	lr, [sp, #4]
   1579c:	add	lr, sp, #48	; 0x30
   157a0:	str	r6, [sp, #12]
   157a4:	str	lr, [sp, #8]
   157a8:	str	ip, [sp, #16]
   157ac:	bl	12288 <__assert_fail@plt+0x13fc>
   157b0:	ldr	r3, [sp, #24]
   157b4:	mov	r0, r5
   157b8:	str	r3, [r8]
   157bc:	add	sp, sp, #92	; 0x5c
   157c0:	ldrd	r4, [sp]
   157c4:	ldrd	r6, [sp, #8]
   157c8:	ldrd	r8, [sp, #16]
   157cc:	ldrd	sl, [sp, #24]
   157d0:	add	sp, sp, #32
   157d4:	pop	{pc}		; (ldr pc, [sp], #4)
   157d8:	mov	r1, #8
   157dc:	mvn	r3, #-2147483648	; 0x80000000
   157e0:	ldr	r0, [sp, #28]
   157e4:	str	r1, [sp]
   157e8:	add	r1, sp, #36	; 0x24
   157ec:	bl	16594 <__assert_fail@plt+0x5708>
   157f0:	ldrd	r2, [r5, #8]
   157f4:	mov	r4, r0
   157f8:	str	r0, [r5]
   157fc:	strd	r2, [r0]
   15800:	b	156d0 <__assert_fail@plt+0x4844>
   15804:	bl	10e74 <abort@plt>
   15808:	andeq	sl, r2, r4, ror #4
   1580c:	ldr	r3, [pc]	; 15814 <__assert_fail@plt+0x4988>
   15810:	b	13c74 <__assert_fail@plt+0x2de8>
   15814:	strdeq	sl, [r2], -ip
   15818:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1581c:	movw	r4, #41196	; 0xa0ec
   15820:	movt	r4, #2
   15824:	strd	r6, [sp, #8]
   15828:	strd	r8, [sp, #16]
   1582c:	strd	sl, [sp, #24]
   15830:	mov	sl, r0
   15834:	mov	fp, r1
   15838:	str	lr, [sp, #32]
   1583c:	sub	sp, sp, #44	; 0x2c
   15840:	bl	10dc0 <__errno_location@plt>
   15844:	ldr	r3, [r0]
   15848:	mov	r8, r0
   1584c:	ldr	r2, [r4, #4]
   15850:	ldr	r5, [r4]
   15854:	str	r3, [sp, #28]
   15858:	cmp	r2, #0
   1585c:	bgt	158b8 <__assert_fail@plt+0x4a2c>
   15860:	add	r3, r4, #8
   15864:	str	r2, [sp, #36]	; 0x24
   15868:	rsb	r2, r2, #1
   1586c:	cmp	r5, r3
   15870:	beq	15994 <__assert_fail@plt+0x4b08>
   15874:	mov	r1, #8
   15878:	mov	r0, r5
   1587c:	mvn	r3, #-2147483648	; 0x80000000
   15880:	str	r1, [sp]
   15884:	add	r1, sp, #36	; 0x24
   15888:	bl	16594 <__assert_fail@plt+0x5708>
   1588c:	mov	r5, r0
   15890:	str	r0, [r4]
   15894:	ldr	r0, [r4, #4]
   15898:	mov	r1, #0
   1589c:	ldr	r2, [sp, #36]	; 0x24
   158a0:	sub	r2, r2, r0
   158a4:	add	r0, r5, r0, lsl #3
   158a8:	lsl	r2, r2, #3
   158ac:	bl	10dd8 <memset@plt>
   158b0:	ldr	r3, [sp, #36]	; 0x24
   158b4:	str	r3, [r4, #4]
   158b8:	ldr	ip, [r4, #16]
   158bc:	mov	r3, fp
   158c0:	mov	r2, sl
   158c4:	ldr	r7, [r4, #20]
   158c8:	ldr	r0, [pc, #240]	; 159c0 <__assert_fail@plt+0x4b34>
   158cc:	ldr	r9, [r5]
   158d0:	orr	r7, r7, #1
   158d4:	ldr	r6, [r5, #4]
   158d8:	str	ip, [sp]
   158dc:	ldr	ip, [r4, #56]	; 0x38
   158e0:	mov	r1, r9
   158e4:	str	r7, [sp, #4]
   158e8:	ldr	lr, [r4, #60]	; 0x3c
   158ec:	str	r0, [sp, #8]
   158f0:	mov	r0, r6
   158f4:	str	ip, [sp, #12]
   158f8:	str	lr, [sp, #16]
   158fc:	bl	12288 <__assert_fail@plt+0x13fc>
   15900:	cmp	r9, r0
   15904:	bhi	1596c <__assert_fail@plt+0x4ae0>
   15908:	add	r9, r0, #1
   1590c:	movw	r3, #41316	; 0xa164
   15910:	movt	r3, #2
   15914:	cmp	r6, r3
   15918:	str	r9, [r5]
   1591c:	beq	15928 <__assert_fail@plt+0x4a9c>
   15920:	mov	r0, r6
   15924:	bl	17e7c <__assert_fail@plt+0x6ff0>
   15928:	mov	r0, r9
   1592c:	bl	162f0 <__assert_fail@plt+0x5464>
   15930:	ldr	ip, [r4, #16]
   15934:	mov	r1, r9
   15938:	mov	r3, fp
   1593c:	mov	r2, sl
   15940:	mov	r6, r0
   15944:	ldr	r9, [r4, #56]	; 0x38
   15948:	ldr	lr, [r4, #60]	; 0x3c
   1594c:	str	r0, [r5, #4]
   15950:	str	ip, [sp]
   15954:	ldr	ip, [pc, #100]	; 159c0 <__assert_fail@plt+0x4b34>
   15958:	str	r7, [sp, #4]
   1595c:	str	ip, [sp, #8]
   15960:	str	r9, [sp, #12]
   15964:	str	lr, [sp, #16]
   15968:	bl	12288 <__assert_fail@plt+0x13fc>
   1596c:	ldr	r3, [sp, #28]
   15970:	mov	r0, r6
   15974:	str	r3, [r8]
   15978:	add	sp, sp, #44	; 0x2c
   1597c:	ldrd	r4, [sp]
   15980:	ldrd	r6, [sp, #8]
   15984:	ldrd	r8, [sp, #16]
   15988:	ldrd	sl, [sp, #24]
   1598c:	add	sp, sp, #32
   15990:	pop	{pc}		; (ldr pc, [sp], #4)
   15994:	mov	r0, #8
   15998:	mvn	r3, #-2147483648	; 0x80000000
   1599c:	add	r1, sp, #36	; 0x24
   159a0:	str	r0, [sp]
   159a4:	mov	r0, #0
   159a8:	bl	16594 <__assert_fail@plt+0x5708>
   159ac:	ldrd	r2, [r4, #8]
   159b0:	mov	r5, r0
   159b4:	str	r0, [r4]
   159b8:	strd	r2, [r0]
   159bc:	b	15894 <__assert_fail@plt+0x4a08>
   159c0:	andeq	sl, r2, r4, lsl #2
   159c4:	ldr	r3, [pc, #4]	; 159d0 <__assert_fail@plt+0x4b44>
   159c8:	mvn	r2, #0
   159cc:	b	13c74 <__assert_fail@plt+0x2de8>
   159d0:	strdeq	sl, [r2], -ip
   159d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   159d8:	movw	r4, #41196	; 0xa0ec
   159dc:	movt	r4, #2
   159e0:	strd	r6, [sp, #8]
   159e4:	strd	r8, [sp, #16]
   159e8:	strd	sl, [sp, #24]
   159ec:	mov	sl, r0
   159f0:	str	lr, [sp, #32]
   159f4:	sub	sp, sp, #44	; 0x2c
   159f8:	bl	10dc0 <__errno_location@plt>
   159fc:	ldr	r3, [r0]
   15a00:	mov	r8, r0
   15a04:	ldr	r2, [r4, #4]
   15a08:	ldr	r5, [r4]
   15a0c:	str	r3, [sp, #28]
   15a10:	cmp	r2, #0
   15a14:	bgt	15a70 <__assert_fail@plt+0x4be4>
   15a18:	add	r3, r4, #8
   15a1c:	str	r2, [sp, #36]	; 0x24
   15a20:	rsb	r2, r2, #1
   15a24:	cmp	r5, r3
   15a28:	beq	15b38 <__assert_fail@plt+0x4cac>
   15a2c:	mov	r1, #8
   15a30:	mov	r0, r5
   15a34:	mvn	r3, #-2147483648	; 0x80000000
   15a38:	str	r1, [sp]
   15a3c:	add	r1, sp, #36	; 0x24
   15a40:	bl	16594 <__assert_fail@plt+0x5708>
   15a44:	mov	r5, r0
   15a48:	str	r0, [r4]
   15a4c:	ldr	r0, [r4, #4]
   15a50:	mov	r1, #0
   15a54:	ldr	r2, [sp, #36]	; 0x24
   15a58:	sub	r2, r2, r0
   15a5c:	add	r0, r5, r0, lsl #3
   15a60:	lsl	r2, r2, #3
   15a64:	bl	10dd8 <memset@plt>
   15a68:	ldr	r3, [sp, #36]	; 0x24
   15a6c:	str	r3, [r4, #4]
   15a70:	ldr	ip, [r4, #16]
   15a74:	mvn	r3, #0
   15a78:	mov	r2, sl
   15a7c:	ldr	r7, [r4, #20]
   15a80:	ldr	fp, [pc, #220]	; 15b64 <__assert_fail@plt+0x4cd8>
   15a84:	ldr	r9, [r5]
   15a88:	orr	r7, r7, #1
   15a8c:	ldr	r6, [r5, #4]
   15a90:	str	ip, [sp]
   15a94:	ldr	ip, [r4, #56]	; 0x38
   15a98:	mov	r1, r9
   15a9c:	stmib	sp, {r7, fp}
   15aa0:	ldr	lr, [r4, #60]	; 0x3c
   15aa4:	mov	r0, r6
   15aa8:	str	ip, [sp, #12]
   15aac:	str	lr, [sp, #16]
   15ab0:	bl	12288 <__assert_fail@plt+0x13fc>
   15ab4:	cmp	r9, r0
   15ab8:	bhi	15b10 <__assert_fail@plt+0x4c84>
   15abc:	add	r9, r0, #1
   15ac0:	movw	r3, #41316	; 0xa164
   15ac4:	movt	r3, #2
   15ac8:	cmp	r6, r3
   15acc:	str	r9, [r5]
   15ad0:	beq	15adc <__assert_fail@plt+0x4c50>
   15ad4:	mov	r0, r6
   15ad8:	bl	17e7c <__assert_fail@plt+0x6ff0>
   15adc:	mov	r0, r9
   15ae0:	bl	162f0 <__assert_fail@plt+0x5464>
   15ae4:	ldr	r3, [r4, #16]
   15ae8:	mov	r2, sl
   15aec:	mov	r1, r9
   15af0:	mov	r6, r0
   15af4:	ldr	lr, [r4, #56]	; 0x38
   15af8:	ldr	ip, [r4, #60]	; 0x3c
   15afc:	str	r0, [r5, #4]
   15b00:	stm	sp, {r3, r7, fp, lr}
   15b04:	mvn	r3, #0
   15b08:	str	ip, [sp, #16]
   15b0c:	bl	12288 <__assert_fail@plt+0x13fc>
   15b10:	ldr	r3, [sp, #28]
   15b14:	mov	r0, r6
   15b18:	str	r3, [r8]
   15b1c:	add	sp, sp, #44	; 0x2c
   15b20:	ldrd	r4, [sp]
   15b24:	ldrd	r6, [sp, #8]
   15b28:	ldrd	r8, [sp, #16]
   15b2c:	ldrd	sl, [sp, #24]
   15b30:	add	sp, sp, #32
   15b34:	pop	{pc}		; (ldr pc, [sp], #4)
   15b38:	mov	r0, #8
   15b3c:	mvn	r3, #-2147483648	; 0x80000000
   15b40:	add	r1, sp, #36	; 0x24
   15b44:	str	r0, [sp]
   15b48:	mov	r0, #0
   15b4c:	bl	16594 <__assert_fail@plt+0x5708>
   15b50:	ldrd	r2, [r4, #8]
   15b54:	mov	r5, r0
   15b58:	str	r0, [r4]
   15b5c:	strd	r2, [r0]
   15b60:	b	15a4c <__assert_fail@plt+0x4bc0>
   15b64:	andeq	sl, r2, r4, lsl #2
   15b68:	cmp	r1, #0
   15b6c:	strd	r4, [sp, #-16]!
   15b70:	mov	ip, r3
   15b74:	str	r6, [sp, #8]
   15b78:	mov	r4, r0
   15b7c:	str	lr, [sp, #12]
   15b80:	sub	sp, sp, #32
   15b84:	ldr	r5, [sp, #48]	; 0x30
   15b88:	ldr	r6, [sp, #52]	; 0x34
   15b8c:	beq	15cd0 <__assert_fail@plt+0x4e44>
   15b90:	mov	r3, r1
   15b94:	mov	r1, #1
   15b98:	stm	sp, {r2, ip}
   15b9c:	movw	r2, #36524	; 0x8eac
   15ba0:	movt	r2, #1
   15ba4:	bl	10dfc <__fprintf_chk@plt>
   15ba8:	mov	r2, #5
   15bac:	movw	r1, #36544	; 0x8ec0
   15bb0:	movt	r1, #1
   15bb4:	mov	r0, #0
   15bb8:	bl	10cc4 <dcgettext@plt>
   15bbc:	movw	ip, #2022	; 0x7e6
   15bc0:	mov	r3, r0
   15bc4:	mov	r1, #1
   15bc8:	movw	r2, #37272	; 0x9198
   15bcc:	movt	r2, #1
   15bd0:	mov	r0, r4
   15bd4:	str	ip, [sp]
   15bd8:	bl	10dfc <__fprintf_chk@plt>
   15bdc:	mov	r1, r4
   15be0:	mov	r0, #10
   15be4:	bl	10cb8 <fputc_unlocked@plt>
   15be8:	mov	r2, #5
   15bec:	movw	r1, #36548	; 0x8ec4
   15bf0:	movt	r1, #1
   15bf4:	mov	r0, #0
   15bf8:	bl	10cc4 <dcgettext@plt>
   15bfc:	mov	r2, r0
   15c00:	mov	r1, #1
   15c04:	movw	r3, #36720	; 0x8f70
   15c08:	movt	r3, #1
   15c0c:	mov	r0, r4
   15c10:	bl	10dfc <__fprintf_chk@plt>
   15c14:	mov	r1, r4
   15c18:	mov	r0, #10
   15c1c:	bl	10cb8 <fputc_unlocked@plt>
   15c20:	cmp	r6, #9
   15c24:	ldrls	pc, [pc, r6, lsl #2]
   15c28:	b	15f3c <__assert_fail@plt+0x50b0>
   15c2c:			; <UNDEFINED> instruction: 0x00015cbc
   15c30:	andeq	r5, r1, ip, ror #25
   15c34:	andeq	r5, r1, r8, lsr #26
   15c38:	andeq	r5, r1, r8, ror #26
   15c3c:			; <UNDEFINED> instruction: 0x00015db0
   15c40:	andeq	r5, r1, r8, ror #27
   15c44:	andeq	r5, r1, r0, lsr lr
   15c48:	andeq	r5, r1, r4, lsl #29
   15c4c:	ldrdeq	r5, [r1], -ip
   15c50:	andeq	r5, r1, r4, asr ip
   15c54:	movw	r1, #37024	; 0x90a0
   15c58:	movt	r1, #1
   15c5c:	mov	r2, #5
   15c60:	mov	r0, #0
   15c64:	bl	10cc4 <dcgettext@plt>
   15c68:	ldr	lr, [r5, #4]
   15c6c:	mov	r2, r0
   15c70:	mov	r1, #1
   15c74:	mov	r0, r4
   15c78:	ldr	r3, [r5, #8]
   15c7c:	ldr	ip, [r5, #32]
   15c80:	str	lr, [sp]
   15c84:	ldr	lr, [r5, #12]
   15c88:	str	ip, [sp, #28]
   15c8c:	ldr	ip, [r5, #28]
   15c90:	str	r3, [sp, #4]
   15c94:	ldr	r3, [r5, #16]
   15c98:	str	lr, [sp, #8]
   15c9c:	ldr	lr, [r5, #20]
   15ca0:	str	ip, [sp, #24]
   15ca4:	ldr	ip, [r5, #24]
   15ca8:	str	r3, [sp, #12]
   15cac:	ldr	r3, [r5]
   15cb0:	str	lr, [sp, #16]
   15cb4:	str	ip, [sp, #20]
   15cb8:	bl	10dfc <__fprintf_chk@plt>
   15cbc:	add	sp, sp, #32
   15cc0:	ldrd	r4, [sp]
   15cc4:	ldr	r6, [sp, #8]
   15cc8:	add	sp, sp, #12
   15ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd0:	mov	r3, r2
   15cd4:	mov	r1, #1
   15cd8:	str	ip, [sp]
   15cdc:	movw	r2, #36536	; 0x8eb8
   15ce0:	movt	r2, #1
   15ce4:	bl	10dfc <__fprintf_chk@plt>
   15ce8:	b	15ba8 <__assert_fail@plt+0x4d1c>
   15cec:	mov	r2, #5
   15cf0:	movw	r1, #36756	; 0x8f94
   15cf4:	movt	r1, #1
   15cf8:	mov	r0, #0
   15cfc:	bl	10cc4 <dcgettext@plt>
   15d00:	ldr	r3, [r5]
   15d04:	mov	r2, r0
   15d08:	mov	r1, #1
   15d0c:	mov	r0, r4
   15d10:	add	sp, sp, #32
   15d14:	ldrd	r4, [sp]
   15d18:	ldr	r6, [sp, #8]
   15d1c:	ldr	lr, [sp, #12]
   15d20:	add	sp, sp, #16
   15d24:	b	10dfc <__fprintf_chk@plt>
   15d28:	mov	r2, #5
   15d2c:	movw	r1, #36772	; 0x8fa4
   15d30:	movt	r1, #1
   15d34:	mov	r0, #0
   15d38:	bl	10cc4 <dcgettext@plt>
   15d3c:	ldm	r5, {r3, ip}
   15d40:	mov	r2, r0
   15d44:	mov	r1, #1
   15d48:	mov	r0, r4
   15d4c:	str	ip, [sp, #48]	; 0x30
   15d50:	add	sp, sp, #32
   15d54:	ldrd	r4, [sp]
   15d58:	ldr	r6, [sp, #8]
   15d5c:	ldr	lr, [sp, #12]
   15d60:	add	sp, sp, #16
   15d64:	b	10dfc <__fprintf_chk@plt>
   15d68:	mov	r2, #5
   15d6c:	movw	r1, #36796	; 0x8fbc
   15d70:	movt	r1, #1
   15d74:	mov	r0, #0
   15d78:	bl	10cc4 <dcgettext@plt>
   15d7c:	ldm	r5, {r3, lr}
   15d80:	mov	r2, r0
   15d84:	mov	r1, #1
   15d88:	mov	r0, r4
   15d8c:	ldr	ip, [r5, #8]
   15d90:	str	lr, [sp, #48]	; 0x30
   15d94:	str	ip, [sp, #52]	; 0x34
   15d98:	add	sp, sp, #32
   15d9c:	ldrd	r4, [sp]
   15da0:	ldr	r6, [sp, #8]
   15da4:	ldr	lr, [sp, #12]
   15da8:	add	sp, sp, #16
   15dac:	b	10dfc <__fprintf_chk@plt>
   15db0:	mov	r2, #5
   15db4:	movw	r1, #36824	; 0x8fd8
   15db8:	movt	r1, #1
   15dbc:	mov	r0, #0
   15dc0:	bl	10cc4 <dcgettext@plt>
   15dc4:	ldmib	r5, {r3, ip, lr}
   15dc8:	mov	r2, r0
   15dcc:	mov	r1, #1
   15dd0:	mov	r0, r4
   15dd4:	str	r3, [sp]
   15dd8:	ldr	r3, [r5]
   15ddc:	stmib	sp, {ip, lr}
   15de0:	bl	10dfc <__fprintf_chk@plt>
   15de4:	b	15cbc <__assert_fail@plt+0x4e30>
   15de8:	mov	r2, #5
   15dec:	movw	r1, #36856	; 0x8ff8
   15df0:	movt	r1, #1
   15df4:	mov	r0, #0
   15df8:	bl	10cc4 <dcgettext@plt>
   15dfc:	ldmib	r5, {ip, lr}
   15e00:	mov	r2, r0
   15e04:	mov	r1, #1
   15e08:	mov	r0, r4
   15e0c:	ldr	r3, [r5, #16]
   15e10:	str	ip, [sp]
   15e14:	ldr	ip, [r5, #12]
   15e18:	str	r3, [sp, #12]
   15e1c:	ldr	r3, [r5]
   15e20:	str	lr, [sp, #4]
   15e24:	str	ip, [sp, #8]
   15e28:	bl	10dfc <__fprintf_chk@plt>
   15e2c:	b	15cbc <__assert_fail@plt+0x4e30>
   15e30:	mov	r2, #5
   15e34:	movw	r1, #36892	; 0x901c
   15e38:	movt	r1, #1
   15e3c:	mov	r0, #0
   15e40:	bl	10cc4 <dcgettext@plt>
   15e44:	ldr	lr, [r5, #4]
   15e48:	mov	r2, r0
   15e4c:	mov	r1, #1
   15e50:	mov	r0, r4
   15e54:	ldr	r3, [r5, #8]
   15e58:	ldr	ip, [r5, #20]
   15e5c:	str	lr, [sp]
   15e60:	ldr	lr, [r5, #12]
   15e64:	str	ip, [sp, #16]
   15e68:	ldr	ip, [r5, #16]
   15e6c:	str	r3, [sp, #4]
   15e70:	ldr	r3, [r5]
   15e74:	str	lr, [sp, #8]
   15e78:	str	ip, [sp, #12]
   15e7c:	bl	10dfc <__fprintf_chk@plt>
   15e80:	b	15cbc <__assert_fail@plt+0x4e30>
   15e84:	mov	r2, #5
   15e88:	movw	r1, #36932	; 0x9044
   15e8c:	movt	r1, #1
   15e90:	mov	r0, #0
   15e94:	bl	10cc4 <dcgettext@plt>
   15e98:	ldmib	r5, {r3, ip}
   15e9c:	mov	r2, r0
   15ea0:	mov	r1, #1
   15ea4:	mov	r0, r4
   15ea8:	ldr	lr, [r5, #24]
   15eac:	str	r3, [sp]
   15eb0:	ldr	r3, [r5, #12]
   15eb4:	str	lr, [sp, #20]
   15eb8:	ldr	lr, [r5, #20]
   15ebc:	str	ip, [sp, #4]
   15ec0:	ldr	ip, [r5, #16]
   15ec4:	str	r3, [sp, #8]
   15ec8:	ldr	r3, [r5]
   15ecc:	str	ip, [sp, #12]
   15ed0:	str	lr, [sp, #16]
   15ed4:	bl	10dfc <__fprintf_chk@plt>
   15ed8:	b	15cbc <__assert_fail@plt+0x4e30>
   15edc:	mov	r2, #5
   15ee0:	movw	r1, #36976	; 0x9070
   15ee4:	movt	r1, #1
   15ee8:	mov	r0, #0
   15eec:	bl	10cc4 <dcgettext@plt>
   15ef0:	ldmib	r5, {ip, lr}
   15ef4:	mov	r2, r0
   15ef8:	mov	r1, #1
   15efc:	mov	r0, r4
   15f00:	ldr	r3, [r5, #28]
   15f04:	str	ip, [sp]
   15f08:	ldr	ip, [r5, #12]
   15f0c:	str	r3, [sp, #24]
   15f10:	ldr	r3, [r5, #24]
   15f14:	str	lr, [sp, #4]
   15f18:	ldr	lr, [r5, #16]
   15f1c:	str	ip, [sp, #8]
   15f20:	ldr	ip, [r5, #20]
   15f24:	str	r3, [sp, #20]
   15f28:	ldr	r3, [r5]
   15f2c:	str	lr, [sp, #12]
   15f30:	str	ip, [sp, #16]
   15f34:	bl	10dfc <__fprintf_chk@plt>
   15f38:	b	15cbc <__assert_fail@plt+0x4e30>
   15f3c:	movw	r1, #37076	; 0x90d4
   15f40:	movt	r1, #1
   15f44:	b	15c5c <__assert_fail@plt+0x4dd0>
   15f48:	strd	r4, [sp, #-12]!
   15f4c:	str	lr, [sp, #8]
   15f50:	sub	sp, sp, #12
   15f54:	ldr	r5, [sp, #24]
   15f58:	ldr	ip, [r5]
   15f5c:	cmp	ip, #0
   15f60:	beq	15f7c <__assert_fail@plt+0x50f0>
   15f64:	mov	lr, r5
   15f68:	mov	ip, #0
   15f6c:	ldr	r4, [lr, #4]!
   15f70:	add	ip, ip, #1
   15f74:	cmp	r4, #0
   15f78:	bne	15f6c <__assert_fail@plt+0x50e0>
   15f7c:	stm	sp, {r5, ip}
   15f80:	bl	15b68 <__assert_fail@plt+0x4cdc>
   15f84:	add	sp, sp, #12
   15f88:	ldrd	r4, [sp]
   15f8c:	add	sp, sp, #8
   15f90:	pop	{pc}		; (ldr pc, [sp], #4)
   15f94:	push	{lr}		; (str lr, [sp, #-4]!)
   15f98:	sub	sp, sp, #52	; 0x34
   15f9c:	ldr	ip, [sp, #56]	; 0x38
   15fa0:	ldr	lr, [ip]
   15fa4:	cmp	lr, #0
   15fa8:	str	lr, [sp, #8]
   15fac:	beq	16044 <__assert_fail@plt+0x51b8>
   15fb0:	ldr	lr, [ip, #4]
   15fb4:	cmp	lr, #0
   15fb8:	str	lr, [sp, #12]
   15fbc:	beq	16058 <__assert_fail@plt+0x51cc>
   15fc0:	ldr	lr, [ip, #8]
   15fc4:	cmp	lr, #0
   15fc8:	str	lr, [sp, #16]
   15fcc:	beq	16060 <__assert_fail@plt+0x51d4>
   15fd0:	ldr	lr, [ip, #12]
   15fd4:	cmp	lr, #0
   15fd8:	str	lr, [sp, #20]
   15fdc:	beq	16068 <__assert_fail@plt+0x51dc>
   15fe0:	ldr	lr, [ip, #16]
   15fe4:	cmp	lr, #0
   15fe8:	str	lr, [sp, #24]
   15fec:	beq	16070 <__assert_fail@plt+0x51e4>
   15ff0:	ldr	lr, [ip, #20]
   15ff4:	cmp	lr, #0
   15ff8:	str	lr, [sp, #28]
   15ffc:	beq	16078 <__assert_fail@plt+0x51ec>
   16000:	ldr	lr, [ip, #24]
   16004:	cmp	lr, #0
   16008:	str	lr, [sp, #32]
   1600c:	beq	16080 <__assert_fail@plt+0x51f4>
   16010:	ldr	lr, [ip, #28]
   16014:	cmp	lr, #0
   16018:	str	lr, [sp, #36]	; 0x24
   1601c:	beq	16088 <__assert_fail@plt+0x51fc>
   16020:	ldr	lr, [ip, #32]
   16024:	cmp	lr, #0
   16028:	str	lr, [sp, #40]	; 0x28
   1602c:	beq	16090 <__assert_fail@plt+0x5204>
   16030:	ldr	ip, [ip, #36]	; 0x24
   16034:	cmp	ip, #0
   16038:	str	ip, [sp, #44]	; 0x2c
   1603c:	movne	lr, #10
   16040:	moveq	lr, #9
   16044:	add	ip, sp, #8
   16048:	stm	sp, {ip, lr}
   1604c:	bl	15b68 <__assert_fail@plt+0x4cdc>
   16050:	add	sp, sp, #52	; 0x34
   16054:	pop	{pc}		; (ldr pc, [sp], #4)
   16058:	mov	lr, #1
   1605c:	b	16044 <__assert_fail@plt+0x51b8>
   16060:	mov	lr, #2
   16064:	b	16044 <__assert_fail@plt+0x51b8>
   16068:	mov	lr, #3
   1606c:	b	16044 <__assert_fail@plt+0x51b8>
   16070:	mov	lr, #4
   16074:	b	16044 <__assert_fail@plt+0x51b8>
   16078:	mov	lr, #5
   1607c:	b	16044 <__assert_fail@plt+0x51b8>
   16080:	mov	lr, #6
   16084:	b	16044 <__assert_fail@plt+0x51b8>
   16088:	mov	lr, #7
   1608c:	b	16044 <__assert_fail@plt+0x51b8>
   16090:	mov	lr, #8
   16094:	b	16044 <__assert_fail@plt+0x51b8>
   16098:	push	{r3}		; (str r3, [sp, #-4]!)
   1609c:	push	{lr}		; (str lr, [sp, #-4]!)
   160a0:	sub	sp, sp, #56	; 0x38
   160a4:	ldr	ip, [sp, #64]	; 0x40
   160a8:	add	r3, sp, #64	; 0x40
   160ac:	str	r3, [sp, #12]
   160b0:	cmp	ip, #0
   160b4:	str	ip, [sp, #16]
   160b8:	beq	16150 <__assert_fail@plt+0x52c4>
   160bc:	ldr	ip, [sp, #68]	; 0x44
   160c0:	cmp	ip, #0
   160c4:	str	ip, [sp, #20]
   160c8:	beq	16174 <__assert_fail@plt+0x52e8>
   160cc:	ldr	ip, [sp, #72]	; 0x48
   160d0:	cmp	ip, #0
   160d4:	str	ip, [sp, #24]
   160d8:	beq	1617c <__assert_fail@plt+0x52f0>
   160dc:	ldr	ip, [sp, #76]	; 0x4c
   160e0:	cmp	ip, #0
   160e4:	str	ip, [sp, #28]
   160e8:	beq	16184 <__assert_fail@plt+0x52f8>
   160ec:	ldr	ip, [sp, #80]	; 0x50
   160f0:	cmp	ip, #0
   160f4:	str	ip, [sp, #32]
   160f8:	beq	1618c <__assert_fail@plt+0x5300>
   160fc:	ldr	ip, [sp, #84]	; 0x54
   16100:	cmp	ip, #0
   16104:	str	ip, [sp, #36]	; 0x24
   16108:	beq	16194 <__assert_fail@plt+0x5308>
   1610c:	ldr	ip, [sp, #88]	; 0x58
   16110:	cmp	ip, #0
   16114:	str	ip, [sp, #40]	; 0x28
   16118:	beq	1619c <__assert_fail@plt+0x5310>
   1611c:	ldr	ip, [sp, #92]	; 0x5c
   16120:	cmp	ip, #0
   16124:	str	ip, [sp, #44]	; 0x2c
   16128:	beq	161a4 <__assert_fail@plt+0x5318>
   1612c:	ldr	ip, [sp, #96]	; 0x60
   16130:	cmp	ip, #0
   16134:	str	ip, [sp, #48]	; 0x30
   16138:	beq	161ac <__assert_fail@plt+0x5320>
   1613c:	ldr	r3, [sp, #100]	; 0x64
   16140:	cmp	r3, #0
   16144:	str	r3, [sp, #52]	; 0x34
   16148:	movne	ip, #10
   1614c:	moveq	ip, #9
   16150:	ldr	r3, [sp, #60]	; 0x3c
   16154:	add	lr, sp, #16
   16158:	str	lr, [sp]
   1615c:	str	ip, [sp, #4]
   16160:	bl	15b68 <__assert_fail@plt+0x4cdc>
   16164:	add	sp, sp, #56	; 0x38
   16168:	pop	{lr}		; (ldr lr, [sp], #4)
   1616c:	add	sp, sp, #4
   16170:	bx	lr
   16174:	mov	ip, #1
   16178:	b	16150 <__assert_fail@plt+0x52c4>
   1617c:	mov	ip, #2
   16180:	b	16150 <__assert_fail@plt+0x52c4>
   16184:	mov	ip, #3
   16188:	b	16150 <__assert_fail@plt+0x52c4>
   1618c:	mov	ip, #4
   16190:	b	16150 <__assert_fail@plt+0x52c4>
   16194:	mov	ip, #5
   16198:	b	16150 <__assert_fail@plt+0x52c4>
   1619c:	mov	ip, #6
   161a0:	b	16150 <__assert_fail@plt+0x52c4>
   161a4:	mov	ip, #7
   161a8:	b	16150 <__assert_fail@plt+0x52c4>
   161ac:	mov	ip, #8
   161b0:	b	16150 <__assert_fail@plt+0x52c4>
   161b4:	movw	r3, #41284	; 0xa144
   161b8:	movt	r3, #2
   161bc:	str	r4, [sp, #-8]!
   161c0:	mov	r0, #10
   161c4:	ldr	r1, [r3]
   161c8:	str	lr, [sp, #4]
   161cc:	bl	10cb8 <fputc_unlocked@plt>
   161d0:	mov	r2, #5
   161d4:	movw	r1, #37136	; 0x9110
   161d8:	movt	r1, #1
   161dc:	mov	r0, #0
   161e0:	bl	10cc4 <dcgettext@plt>
   161e4:	mov	r1, r0
   161e8:	movw	r2, #37156	; 0x9124
   161ec:	movt	r2, #1
   161f0:	mov	r0, #1
   161f4:	bl	10de4 <__printf_chk@plt>
   161f8:	mov	r2, #5
   161fc:	movw	r1, #37180	; 0x913c
   16200:	movt	r1, #1
   16204:	mov	r0, #0
   16208:	bl	10cc4 <dcgettext@plt>
   1620c:	mov	r1, r0
   16210:	movw	r3, #35252	; 0x89b4
   16214:	movt	r3, #1
   16218:	movw	r2, #35292	; 0x89dc
   1621c:	movt	r2, #1
   16220:	mov	r0, #1
   16224:	bl	10de4 <__printf_chk@plt>
   16228:	mov	r2, #5
   1622c:	movw	r1, #37200	; 0x9150
   16230:	movt	r1, #1
   16234:	mov	r0, #0
   16238:	bl	10cc4 <dcgettext@plt>
   1623c:	mov	r1, r0
   16240:	movw	r2, #37240	; 0x9178
   16244:	movt	r2, #1
   16248:	mov	r0, #1
   1624c:	ldr	r4, [sp]
   16250:	ldr	lr, [sp, #4]
   16254:	add	sp, sp, #8
   16258:	b	10de4 <__printf_chk@plt>
   1625c:	strd	r4, [sp, #-16]!
   16260:	mov	r4, r0
   16264:	mov	r5, r2
   16268:	str	r6, [sp, #8]
   1626c:	mov	r6, r1
   16270:	str	lr, [sp, #12]
   16274:	bl	18068 <__assert_fail@plt+0x71dc>
   16278:	cmp	r0, #0
   1627c:	beq	16290 <__assert_fail@plt+0x5404>
   16280:	ldrd	r4, [sp]
   16284:	ldr	r6, [sp, #8]
   16288:	add	sp, sp, #12
   1628c:	pop	{pc}		; (ldr pc, [sp], #4)
   16290:	cmp	r4, #0
   16294:	beq	162a4 <__assert_fail@plt+0x5418>
   16298:	cmp	r6, #0
   1629c:	cmpne	r5, #0
   162a0:	beq	16280 <__assert_fail@plt+0x53f4>
   162a4:	bl	16860 <__assert_fail@plt+0x59d4>
   162a8:	str	r4, [sp, #-8]!
   162ac:	str	lr, [sp, #4]
   162b0:	bl	17c4c <__assert_fail@plt+0x6dc0>
   162b4:	cmp	r0, #0
   162b8:	beq	162c8 <__assert_fail@plt+0x543c>
   162bc:	ldr	r4, [sp]
   162c0:	add	sp, sp, #4
   162c4:	pop	{pc}		; (ldr pc, [sp], #4)
   162c8:	bl	16860 <__assert_fail@plt+0x59d4>
   162cc:	str	r4, [sp, #-8]!
   162d0:	str	lr, [sp, #4]
   162d4:	bl	17c4c <__assert_fail@plt+0x6dc0>
   162d8:	cmp	r0, #0
   162dc:	beq	162ec <__assert_fail@plt+0x5460>
   162e0:	ldr	r4, [sp]
   162e4:	add	sp, sp, #4
   162e8:	pop	{pc}		; (ldr pc, [sp], #4)
   162ec:	bl	16860 <__assert_fail@plt+0x59d4>
   162f0:	str	r4, [sp, #-8]!
   162f4:	str	lr, [sp, #4]
   162f8:	bl	17c4c <__assert_fail@plt+0x6dc0>
   162fc:	cmp	r0, #0
   16300:	beq	16310 <__assert_fail@plt+0x5484>
   16304:	ldr	r4, [sp]
   16308:	add	sp, sp, #4
   1630c:	pop	{pc}		; (ldr pc, [sp], #4)
   16310:	bl	16860 <__assert_fail@plt+0x59d4>
   16314:	strd	r4, [sp, #-16]!
   16318:	mov	r5, r0
   1631c:	mov	r4, r1
   16320:	str	r6, [sp, #8]
   16324:	str	lr, [sp, #12]
   16328:	bl	17c88 <__assert_fail@plt+0x6dfc>
   1632c:	cmp	r0, #0
   16330:	beq	16344 <__assert_fail@plt+0x54b8>
   16334:	ldrd	r4, [sp]
   16338:	ldr	r6, [sp, #8]
   1633c:	add	sp, sp, #12
   16340:	pop	{pc}		; (ldr pc, [sp], #4)
   16344:	adds	r4, r4, #0
   16348:	movne	r4, #1
   1634c:	cmp	r5, #0
   16350:	moveq	r4, #1
   16354:	cmp	r4, #0
   16358:	beq	16334 <__assert_fail@plt+0x54a8>
   1635c:	bl	16860 <__assert_fail@plt+0x59d4>
   16360:	cmp	r1, #0
   16364:	orreq	r1, r1, #1
   16368:	str	r4, [sp, #-8]!
   1636c:	str	lr, [sp, #4]
   16370:	bl	17c88 <__assert_fail@plt+0x6dfc>
   16374:	cmp	r0, #0
   16378:	beq	16388 <__assert_fail@plt+0x54fc>
   1637c:	ldr	r4, [sp]
   16380:	add	sp, sp, #4
   16384:	pop	{pc}		; (ldr pc, [sp], #4)
   16388:	bl	16860 <__assert_fail@plt+0x59d4>
   1638c:	strd	r4, [sp, #-16]!
   16390:	mov	r4, r0
   16394:	mov	r5, r2
   16398:	str	r6, [sp, #8]
   1639c:	mov	r6, r1
   163a0:	str	lr, [sp, #12]
   163a4:	bl	18068 <__assert_fail@plt+0x71dc>
   163a8:	cmp	r0, #0
   163ac:	beq	163c0 <__assert_fail@plt+0x5534>
   163b0:	ldrd	r4, [sp]
   163b4:	ldr	r6, [sp, #8]
   163b8:	add	sp, sp, #12
   163bc:	pop	{pc}		; (ldr pc, [sp], #4)
   163c0:	cmp	r4, #0
   163c4:	beq	163d4 <__assert_fail@plt+0x5548>
   163c8:	cmp	r6, #0
   163cc:	cmpne	r5, #0
   163d0:	beq	163b0 <__assert_fail@plt+0x5524>
   163d4:	bl	16860 <__assert_fail@plt+0x59d4>
   163d8:	cmp	r2, #0
   163dc:	cmpne	r1, #0
   163e0:	str	r4, [sp, #-8]!
   163e4:	moveq	r2, #1
   163e8:	str	lr, [sp, #4]
   163ec:	moveq	r1, r2
   163f0:	bl	18068 <__assert_fail@plt+0x71dc>
   163f4:	cmp	r0, #0
   163f8:	beq	16408 <__assert_fail@plt+0x557c>
   163fc:	ldr	r4, [sp]
   16400:	add	sp, sp, #4
   16404:	pop	{pc}		; (ldr pc, [sp], #4)
   16408:	bl	16860 <__assert_fail@plt+0x59d4>
   1640c:	mov	r2, r1
   16410:	mov	r1, r0
   16414:	str	r4, [sp, #-8]!
   16418:	mov	r0, #0
   1641c:	str	lr, [sp, #4]
   16420:	bl	18068 <__assert_fail@plt+0x71dc>
   16424:	cmp	r0, #0
   16428:	beq	16438 <__assert_fail@plt+0x55ac>
   1642c:	ldr	r4, [sp]
   16430:	add	sp, sp, #4
   16434:	pop	{pc}		; (ldr pc, [sp], #4)
   16438:	bl	16860 <__assert_fail@plt+0x59d4>
   1643c:	cmp	r1, #0
   16440:	cmpne	r0, #0
   16444:	str	r4, [sp, #-8]!
   16448:	moveq	r2, #1
   1644c:	movne	r2, r1
   16450:	str	lr, [sp, #4]
   16454:	movne	r1, r0
   16458:	moveq	r1, r2
   1645c:	mov	r0, #0
   16460:	bl	18068 <__assert_fail@plt+0x71dc>
   16464:	cmp	r0, #0
   16468:	beq	16478 <__assert_fail@plt+0x55ec>
   1646c:	ldr	r4, [sp]
   16470:	add	sp, sp, #4
   16474:	pop	{pc}		; (ldr pc, [sp], #4)
   16478:	bl	16860 <__assert_fail@plt+0x59d4>
   1647c:	cmp	r0, #0
   16480:	strd	r4, [sp, #-16]!
   16484:	mov	r5, r1
   16488:	ldr	r4, [r1]
   1648c:	str	r6, [sp, #8]
   16490:	str	lr, [sp, #12]
   16494:	beq	164dc <__assert_fail@plt+0x5650>
   16498:	lsr	r3, r4, #1
   1649c:	add	r3, r3, #1
   164a0:	adds	r4, r4, r3
   164a4:	bcs	164d8 <__assert_fail@plt+0x564c>
   164a8:	mov	r2, #1
   164ac:	mov	r1, r4
   164b0:	bl	18068 <__assert_fail@plt+0x71dc>
   164b4:	cmp	r0, #0
   164b8:	beq	164d0 <__assert_fail@plt+0x5644>
   164bc:	ldr	r6, [sp, #8]
   164c0:	str	r4, [r5]
   164c4:	ldrd	r4, [sp]
   164c8:	add	sp, sp, #12
   164cc:	pop	{pc}		; (ldr pc, [sp], #4)
   164d0:	cmp	r4, #0
   164d4:	beq	164bc <__assert_fail@plt+0x5630>
   164d8:	bl	16860 <__assert_fail@plt+0x59d4>
   164dc:	cmp	r4, #0
   164e0:	mov	r2, #1
   164e4:	moveq	r4, #64	; 0x40
   164e8:	mov	r1, r4
   164ec:	bl	18068 <__assert_fail@plt+0x71dc>
   164f0:	cmp	r0, #0
   164f4:	bne	164bc <__assert_fail@plt+0x5630>
   164f8:	b	164d8 <__assert_fail@plt+0x564c>
   164fc:	cmp	r0, #0
   16500:	strd	r4, [sp, #-16]!
   16504:	mov	r5, r1
   16508:	ldr	r4, [r1]
   1650c:	str	r6, [sp, #8]
   16510:	mov	r6, r2
   16514:	str	lr, [sp, #12]
   16518:	beq	16560 <__assert_fail@plt+0x56d4>
   1651c:	lsr	r3, r4, #1
   16520:	add	r3, r3, #1
   16524:	adds	r4, r4, r3
   16528:	bcs	1655c <__assert_fail@plt+0x56d0>
   1652c:	mov	r1, r4
   16530:	bl	18068 <__assert_fail@plt+0x71dc>
   16534:	cmp	r0, #0
   16538:	beq	16550 <__assert_fail@plt+0x56c4>
   1653c:	ldr	r6, [sp, #8]
   16540:	str	r4, [r5]
   16544:	ldrd	r4, [sp]
   16548:	add	sp, sp, #12
   1654c:	pop	{pc}		; (ldr pc, [sp], #4)
   16550:	cmp	r4, #0
   16554:	cmpne	r6, #0
   16558:	beq	1653c <__assert_fail@plt+0x56b0>
   1655c:	bl	16860 <__assert_fail@plt+0x59d4>
   16560:	cmp	r4, #0
   16564:	bne	16578 <__assert_fail@plt+0x56ec>
   16568:	mov	r4, #64	; 0x40
   1656c:	udiv	r4, r4, r2
   16570:	cmp	r2, #64	; 0x40
   16574:	addhi	r4, r4, #1
   16578:	mov	r2, r6
   1657c:	mov	r1, r4
   16580:	mov	r0, #0
   16584:	bl	18068 <__assert_fail@plt+0x71dc>
   16588:	cmp	r0, #0
   1658c:	bne	1653c <__assert_fail@plt+0x56b0>
   16590:	b	1655c <__assert_fail@plt+0x56d0>
   16594:	ldr	ip, [r1]
   16598:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1659c:	strd	r6, [sp, #8]
   165a0:	mov	r7, r1
   165a4:	mov	r6, r0
   165a8:	str	r8, [sp, #16]
   165ac:	mvn	r8, r3
   165b0:	lsr	r8, r8, #31
   165b4:	str	lr, [sp, #20]
   165b8:	asr	r1, ip, #1
   165bc:	ldr	lr, [sp, #24]
   165c0:	adds	r4, ip, r1
   165c4:	mvnvs	r4, #-2147483648	; 0x80000000
   165c8:	cmp	r3, r4
   165cc:	movge	r1, #0
   165d0:	andlt	r1, r8, #1
   165d4:	cmp	r1, #0
   165d8:	movne	r4, r3
   165dc:	smull	r0, r1, r4, lr
   165e0:	cmp	r1, r0, asr #31
   165e4:	bne	16694 <__assert_fail@plt+0x5808>
   165e8:	cmp	r0, #63	; 0x3f
   165ec:	mov	r5, r0
   165f0:	ble	16660 <__assert_fail@plt+0x57d4>
   165f4:	cmp	r6, #0
   165f8:	sub	r1, r4, ip
   165fc:	streq	r6, [r7]
   16600:	cmp	r1, r2
   16604:	bge	16634 <__assert_fail@plt+0x57a8>
   16608:	adds	r4, ip, r2
   1660c:	bvs	16690 <__assert_fail@plt+0x5804>
   16610:	cmp	r4, r3
   16614:	movle	r3, #0
   16618:	andgt	r3, r8, #1
   1661c:	cmp	r3, #0
   16620:	bne	16690 <__assert_fail@plt+0x5804>
   16624:	smull	r0, r1, r4, lr
   16628:	cmp	r1, r0, asr #31
   1662c:	mov	r5, r0
   16630:	bne	16690 <__assert_fail@plt+0x5804>
   16634:	mov	r1, r5
   16638:	mov	r0, r6
   1663c:	bl	17c88 <__assert_fail@plt+0x6dfc>
   16640:	cmp	r0, #0
   16644:	beq	16674 <__assert_fail@plt+0x57e8>
   16648:	ldr	r8, [sp, #16]
   1664c:	str	r4, [r7]
   16650:	ldrd	r4, [sp]
   16654:	ldrd	r6, [sp, #8]
   16658:	add	sp, sp, #20
   1665c:	pop	{pc}		; (ldr pc, [sp], #4)
   16660:	mov	r0, #64	; 0x40
   16664:	sdiv	r4, r0, lr
   16668:	mls	r5, lr, r4, r0
   1666c:	sub	r5, r0, r5
   16670:	b	165f4 <__assert_fail@plt+0x5768>
   16674:	adds	r5, r5, #0
   16678:	movne	r5, #1
   1667c:	cmp	r6, #0
   16680:	movne	r6, r5
   16684:	moveq	r6, #1
   16688:	cmp	r6, #0
   1668c:	beq	16648 <__assert_fail@plt+0x57bc>
   16690:	bl	16860 <__assert_fail@plt+0x59d4>
   16694:	mvn	r0, #-2147483648	; 0x80000000
   16698:	b	16664 <__assert_fail@plt+0x57d8>
   1669c:	mov	r1, #1
   166a0:	str	r4, [sp, #-8]!
   166a4:	str	lr, [sp, #4]
   166a8:	bl	17bd8 <__assert_fail@plt+0x6d4c>
   166ac:	cmp	r0, #0
   166b0:	beq	166c0 <__assert_fail@plt+0x5834>
   166b4:	ldr	r4, [sp]
   166b8:	add	sp, sp, #4
   166bc:	pop	{pc}		; (ldr pc, [sp], #4)
   166c0:	bl	16860 <__assert_fail@plt+0x59d4>
   166c4:	mov	r1, #1
   166c8:	str	r4, [sp, #-8]!
   166cc:	str	lr, [sp, #4]
   166d0:	bl	17bd8 <__assert_fail@plt+0x6d4c>
   166d4:	cmp	r0, #0
   166d8:	beq	166e8 <__assert_fail@plt+0x585c>
   166dc:	ldr	r4, [sp]
   166e0:	add	sp, sp, #4
   166e4:	pop	{pc}		; (ldr pc, [sp], #4)
   166e8:	bl	16860 <__assert_fail@plt+0x59d4>
   166ec:	str	r4, [sp, #-8]!
   166f0:	str	lr, [sp, #4]
   166f4:	bl	17bd8 <__assert_fail@plt+0x6d4c>
   166f8:	cmp	r0, #0
   166fc:	beq	1670c <__assert_fail@plt+0x5880>
   16700:	ldr	r4, [sp]
   16704:	add	sp, sp, #4
   16708:	pop	{pc}		; (ldr pc, [sp], #4)
   1670c:	bl	16860 <__assert_fail@plt+0x59d4>
   16710:	str	r4, [sp, #-8]!
   16714:	str	lr, [sp, #4]
   16718:	bl	17bd8 <__assert_fail@plt+0x6d4c>
   1671c:	cmp	r0, #0
   16720:	beq	16730 <__assert_fail@plt+0x58a4>
   16724:	ldr	r4, [sp]
   16728:	add	sp, sp, #4
   1672c:	pop	{pc}		; (ldr pc, [sp], #4)
   16730:	bl	16860 <__assert_fail@plt+0x59d4>
   16734:	strd	r4, [sp, #-16]!
   16738:	mov	r4, r1
   1673c:	str	r6, [sp, #8]
   16740:	mov	r6, r0
   16744:	mov	r0, r1
   16748:	str	lr, [sp, #12]
   1674c:	bl	17c4c <__assert_fail@plt+0x6dc0>
   16750:	subs	r5, r0, #0
   16754:	beq	16778 <__assert_fail@plt+0x58ec>
   16758:	mov	r2, r4
   1675c:	mov	r1, r6
   16760:	bl	10c88 <memcpy@plt>
   16764:	mov	r0, r5
   16768:	ldrd	r4, [sp]
   1676c:	ldr	r6, [sp, #8]
   16770:	add	sp, sp, #12
   16774:	pop	{pc}		; (ldr pc, [sp], #4)
   16778:	bl	16860 <__assert_fail@plt+0x59d4>
   1677c:	strd	r4, [sp, #-16]!
   16780:	mov	r4, r1
   16784:	str	r6, [sp, #8]
   16788:	mov	r6, r0
   1678c:	mov	r0, r1
   16790:	str	lr, [sp, #12]
   16794:	bl	17c4c <__assert_fail@plt+0x6dc0>
   16798:	subs	r5, r0, #0
   1679c:	beq	167c0 <__assert_fail@plt+0x5934>
   167a0:	mov	r2, r4
   167a4:	mov	r1, r6
   167a8:	bl	10c88 <memcpy@plt>
   167ac:	mov	r0, r5
   167b0:	ldrd	r4, [sp]
   167b4:	ldr	r6, [sp, #8]
   167b8:	add	sp, sp, #12
   167bc:	pop	{pc}		; (ldr pc, [sp], #4)
   167c0:	bl	16860 <__assert_fail@plt+0x59d4>
   167c4:	strd	r4, [sp, #-16]!
   167c8:	mov	r4, r1
   167cc:	str	r6, [sp, #8]
   167d0:	mov	r6, r0
   167d4:	add	r0, r1, #1
   167d8:	str	lr, [sp, #12]
   167dc:	bl	17c4c <__assert_fail@plt+0x6dc0>
   167e0:	subs	r5, r0, #0
   167e4:	beq	16810 <__assert_fail@plt+0x5984>
   167e8:	mov	r3, #0
   167ec:	mov	r1, r6
   167f0:	mov	r2, r4
   167f4:	strb	r3, [r5, r4]
   167f8:	bl	10c88 <memcpy@plt>
   167fc:	mov	r0, r5
   16800:	ldrd	r4, [sp]
   16804:	ldr	r6, [sp, #8]
   16808:	add	sp, sp, #12
   1680c:	pop	{pc}		; (ldr pc, [sp], #4)
   16810:	bl	16860 <__assert_fail@plt+0x59d4>
   16814:	strd	r4, [sp, #-16]!
   16818:	str	r6, [sp, #8]
   1681c:	mov	r6, r0
   16820:	str	lr, [sp, #12]
   16824:	bl	10da8 <strlen@plt>
   16828:	add	r4, r0, #1
   1682c:	mov	r0, r4
   16830:	bl	17c4c <__assert_fail@plt+0x6dc0>
   16834:	subs	r5, r0, #0
   16838:	beq	1685c <__assert_fail@plt+0x59d0>
   1683c:	mov	r2, r4
   16840:	mov	r1, r6
   16844:	bl	10c88 <memcpy@plt>
   16848:	mov	r0, r5
   1684c:	ldrd	r4, [sp]
   16850:	ldr	r6, [sp, #8]
   16854:	add	sp, sp, #12
   16858:	pop	{pc}		; (ldr pc, [sp], #4)
   1685c:	bl	16860 <__assert_fail@plt+0x59d4>
   16860:	movw	r3, #41192	; 0xa0e8
   16864:	movt	r3, #2
   16868:	str	r4, [sp, #-8]!
   1686c:	ldr	r4, [r3]
   16870:	mov	r2, #5
   16874:	movw	r1, #37320	; 0x91c8
   16878:	movt	r1, #1
   1687c:	mov	r0, #0
   16880:	str	lr, [sp, #4]
   16884:	bl	10cc4 <dcgettext@plt>
   16888:	mov	r3, r0
   1688c:	movw	r2, #36240	; 0x8d90
   16890:	movt	r2, #1
   16894:	mov	r1, #0
   16898:	mov	r0, r4
   1689c:	bl	10d3c <error@plt>
   168a0:	bl	10e74 <abort@plt>
   168a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   168a8:	strd	r6, [sp, #8]
   168ac:	mov	r6, r2
   168b0:	mov	r7, r3
   168b4:	str	r8, [sp, #16]
   168b8:	mov	r2, r1
   168bc:	mov	r1, #0
   168c0:	str	lr, [sp, #20]
   168c4:	sub	sp, sp, #16
   168c8:	mov	r8, r0
   168cc:	ldr	ip, [sp, #48]	; 0x30
   168d0:	add	r3, sp, #8
   168d4:	str	ip, [sp]
   168d8:	bl	16b74 <__assert_fail@plt+0x5ce8>
   168dc:	subs	r4, r0, #0
   168e0:	bne	16930 <__assert_fail@plt+0x5aa4>
   168e4:	ldrd	r4, [sp, #8]
   168e8:	ldrd	r0, [sp, #40]	; 0x28
   168ec:	cmp	r4, r6
   168f0:	sbcs	r3, r5, r7
   168f4:	movlt	r3, #1
   168f8:	movge	r3, #0
   168fc:	cmp	r0, r4
   16900:	sbcs	r2, r1, r5
   16904:	orrlt	r3, r3, #1
   16908:	cmp	r3, #0
   1690c:	bne	169b0 <__assert_fail@plt+0x5b24>
   16910:	mov	r0, r4
   16914:	mov	r1, r5
   16918:	add	sp, sp, #16
   1691c:	ldrd	r4, [sp]
   16920:	ldrd	r6, [sp, #8]
   16924:	ldr	r8, [sp, #16]
   16928:	add	sp, sp, #20
   1692c:	pop	{pc}		; (ldr pc, [sp], #4)
   16930:	bl	10dc0 <__errno_location@plt>
   16934:	cmp	r4, #1
   16938:	moveq	r3, #75	; 0x4b
   1693c:	moveq	r4, r3
   16940:	streq	r3, [r0]
   16944:	beq	169a0 <__assert_fail@plt+0x5b14>
   16948:	cmp	r4, #3
   1694c:	beq	16994 <__assert_fail@plt+0x5b08>
   16950:	ldr	r3, [sp, #56]	; 0x38
   16954:	ldr	r4, [r0]
   16958:	cmp	r3, #0
   1695c:	bne	16968 <__assert_fail@plt+0x5adc>
   16960:	mov	r3, #1
   16964:	str	r3, [sp, #56]	; 0x38
   16968:	cmp	r4, #22
   1696c:	moveq	r4, #0
   16970:	mov	r0, r8
   16974:	bl	159d4 <__assert_fail@plt+0x4b48>
   16978:	movw	r2, #36236	; 0x8d8c
   1697c:	movt	r2, #1
   16980:	str	r0, [sp]
   16984:	mov	r1, r4
   16988:	ldr	r3, [sp, #52]	; 0x34
   1698c:	ldr	r0, [sp, #56]	; 0x38
   16990:	bl	10d3c <error@plt>
   16994:	mov	r3, #0
   16998:	mov	r4, r3
   1699c:	str	r3, [r0]
   169a0:	ldr	r3, [sp, #56]	; 0x38
   169a4:	cmp	r3, #0
   169a8:	bne	16970 <__assert_fail@plt+0x5ae4>
   169ac:	b	16960 <__assert_fail@plt+0x5ad4>
   169b0:	bl	10dc0 <__errno_location@plt>
   169b4:	cmp	r4, #1073741824	; 0x40000000
   169b8:	sbcs	r3, r5, #0
   169bc:	bge	169e4 <__assert_fail@plt+0x5b58>
   169c0:	mov	r2, #-1073741824	; 0xc0000000
   169c4:	mvn	r3, #0
   169c8:	cmp	r4, r2
   169cc:	sbcs	r3, r5, r3
   169d0:	blt	169e4 <__assert_fail@plt+0x5b58>
   169d4:	mov	r3, #34	; 0x22
   169d8:	mov	r4, r3
   169dc:	str	r3, [r0]
   169e0:	b	169a0 <__assert_fail@plt+0x5b14>
   169e4:	mov	r3, #75	; 0x4b
   169e8:	str	r3, [r0]
   169ec:	ldr	r3, [sp, #56]	; 0x38
   169f0:	cmp	r3, #0
   169f4:	movne	r4, #75	; 0x4b
   169f8:	bne	16970 <__assert_fail@plt+0x5ae4>
   169fc:	mov	r3, #1
   16a00:	mov	r4, #75	; 0x4b
   16a04:	str	r3, [sp, #56]	; 0x38
   16a08:	b	16970 <__assert_fail@plt+0x5ae4>
   16a0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16a10:	mov	r1, #0
   16a14:	strd	r6, [sp, #8]
   16a18:	mov	r6, r2
   16a1c:	mov	r7, r3
   16a20:	str	r8, [sp, #16]
   16a24:	mov	r2, #10
   16a28:	mov	r8, r0
   16a2c:	str	lr, [sp, #20]
   16a30:	sub	sp, sp, #16
   16a34:	ldr	ip, [sp, #48]	; 0x30
   16a38:	add	r3, sp, #8
   16a3c:	str	ip, [sp]
   16a40:	bl	16b74 <__assert_fail@plt+0x5ce8>
   16a44:	subs	r4, r0, #0
   16a48:	bne	16a98 <__assert_fail@plt+0x5c0c>
   16a4c:	ldrd	r4, [sp, #8]
   16a50:	ldrd	r0, [sp, #40]	; 0x28
   16a54:	cmp	r4, r6
   16a58:	sbcs	r3, r5, r7
   16a5c:	movlt	r3, #1
   16a60:	movge	r3, #0
   16a64:	cmp	r0, r4
   16a68:	sbcs	r2, r1, r5
   16a6c:	orrlt	r3, r3, #1
   16a70:	cmp	r3, #0
   16a74:	bne	16b18 <__assert_fail@plt+0x5c8c>
   16a78:	mov	r0, r4
   16a7c:	mov	r1, r5
   16a80:	add	sp, sp, #16
   16a84:	ldrd	r4, [sp]
   16a88:	ldrd	r6, [sp, #8]
   16a8c:	ldr	r8, [sp, #16]
   16a90:	add	sp, sp, #20
   16a94:	pop	{pc}		; (ldr pc, [sp], #4)
   16a98:	bl	10dc0 <__errno_location@plt>
   16a9c:	cmp	r4, #1
   16aa0:	moveq	r3, #75	; 0x4b
   16aa4:	moveq	r4, r3
   16aa8:	streq	r3, [r0]
   16aac:	beq	16b00 <__assert_fail@plt+0x5c74>
   16ab0:	cmp	r4, #3
   16ab4:	beq	16af4 <__assert_fail@plt+0x5c68>
   16ab8:	ldr	r3, [sp, #56]	; 0x38
   16abc:	ldr	r4, [r0]
   16ac0:	cmp	r3, #0
   16ac4:	beq	16b0c <__assert_fail@plt+0x5c80>
   16ac8:	cmp	r4, #22
   16acc:	moveq	r4, #0
   16ad0:	mov	r0, r8
   16ad4:	bl	159d4 <__assert_fail@plt+0x4b48>
   16ad8:	movw	r2, #36236	; 0x8d8c
   16adc:	movt	r2, #1
   16ae0:	str	r0, [sp]
   16ae4:	mov	r1, r4
   16ae8:	ldr	r3, [sp, #52]	; 0x34
   16aec:	ldr	r0, [sp, #56]	; 0x38
   16af0:	bl	10d3c <error@plt>
   16af4:	mov	r3, #0
   16af8:	mov	r4, r3
   16afc:	str	r3, [r0]
   16b00:	ldr	r3, [sp, #56]	; 0x38
   16b04:	cmp	r3, #0
   16b08:	bne	16ad0 <__assert_fail@plt+0x5c44>
   16b0c:	mov	r3, #1
   16b10:	str	r3, [sp, #56]	; 0x38
   16b14:	b	16ac8 <__assert_fail@plt+0x5c3c>
   16b18:	bl	10dc0 <__errno_location@plt>
   16b1c:	cmp	r4, #1073741824	; 0x40000000
   16b20:	sbcs	r3, r5, #0
   16b24:	bge	16b4c <__assert_fail@plt+0x5cc0>
   16b28:	mov	r2, #-1073741824	; 0xc0000000
   16b2c:	mvn	r3, #0
   16b30:	cmp	r4, r2
   16b34:	sbcs	r3, r5, r3
   16b38:	blt	16b4c <__assert_fail@plt+0x5cc0>
   16b3c:	mov	r3, #34	; 0x22
   16b40:	mov	r4, r3
   16b44:	str	r3, [r0]
   16b48:	b	16b00 <__assert_fail@plt+0x5c74>
   16b4c:	mov	r3, #75	; 0x4b
   16b50:	str	r3, [r0]
   16b54:	ldr	r3, [sp, #56]	; 0x38
   16b58:	cmp	r3, #0
   16b5c:	movne	r4, #75	; 0x4b
   16b60:	bne	16ad0 <__assert_fail@plt+0x5c44>
   16b64:	mov	r3, #1
   16b68:	mov	r4, #75	; 0x4b
   16b6c:	str	r3, [sp, #56]	; 0x38
   16b70:	b	16ad0 <__assert_fail@plt+0x5c44>
   16b74:	cmp	r2, #36	; 0x24
   16b78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16b7c:	strd	r6, [sp, #8]
   16b80:	strd	r8, [sp, #16]
   16b84:	strd	sl, [sp, #24]
   16b88:	str	lr, [sp, #32]
   16b8c:	sub	sp, sp, #36	; 0x24
   16b90:	bhi	1796c <__assert_fail@plt+0x6ae0>
   16b94:	cmp	r1, #0
   16b98:	mov	r5, r1
   16b9c:	mov	r6, r2
   16ba0:	addeq	r5, sp, #28
   16ba4:	mov	sl, r0
   16ba8:	mov	r9, r3
   16bac:	bl	10dc0 <__errno_location@plt>
   16bb0:	mov	fp, r0
   16bb4:	mov	r4, #0
   16bb8:	mov	r2, r6
   16bbc:	mov	r3, r4
   16bc0:	mov	r1, r5
   16bc4:	mov	r0, sl
   16bc8:	str	r4, [fp]
   16bcc:	bl	10e44 <__strtoll_internal@plt>
   16bd0:	ldr	r8, [r5]
   16bd4:	mov	r6, r0
   16bd8:	mov	r7, r1
   16bdc:	cmp	r8, sl
   16be0:	beq	16c38 <__assert_fail@plt+0x5dac>
   16be4:	ldr	r4, [fp]
   16be8:	cmp	r4, #0
   16bec:	beq	16bfc <__assert_fail@plt+0x5d70>
   16bf0:	cmp	r4, #34	; 0x22
   16bf4:	bne	16d3c <__assert_fail@plt+0x5eb0>
   16bf8:	mov	r4, #1
   16bfc:	ldr	r3, [sp, #72]	; 0x48
   16c00:	cmp	r3, #0
   16c04:	beq	16c14 <__assert_fail@plt+0x5d88>
   16c08:	ldrb	sl, [r8]
   16c0c:	cmp	sl, #0
   16c10:	bne	16e40 <__assert_fail@plt+0x5fb4>
   16c14:	strd	r6, [r9]
   16c18:	mov	r0, r4
   16c1c:	add	sp, sp, #36	; 0x24
   16c20:	ldrd	r4, [sp]
   16c24:	ldrd	r6, [sp, #8]
   16c28:	ldrd	r8, [sp, #16]
   16c2c:	ldrd	sl, [sp, #24]
   16c30:	add	sp, sp, #32
   16c34:	pop	{pc}		; (ldr pc, [sp], #4)
   16c38:	ldr	r3, [sp, #72]	; 0x48
   16c3c:	cmp	r3, r4
   16c40:	beq	16d3c <__assert_fail@plt+0x5eb0>
   16c44:	ldrb	sl, [sl]
   16c48:	cmp	sl, r4
   16c4c:	beq	16d3c <__assert_fail@plt+0x5eb0>
   16c50:	mov	r1, sl
   16c54:	mov	r0, r3
   16c58:	bl	10db4 <strchr@plt>
   16c5c:	cmp	r0, r4
   16c60:	movne	r6, #1
   16c64:	movne	r7, #0
   16c68:	beq	16d3c <__assert_fail@plt+0x5eb0>
   16c6c:	sub	fp, sl, #69	; 0x45
   16c70:	cmp	fp, #47	; 0x2f
   16c74:	ldrls	pc, [pc, fp, lsl #2]
   16c78:	b	16e5c <__assert_fail@plt+0x5fd0>
   16c7c:	andeq	r6, r1, r4, asr #26
   16c80:	andeq	r6, r1, ip, asr lr
   16c84:	andeq	r6, r1, r4, asr #26
   16c88:	andeq	r6, r1, ip, asr lr
   16c8c:	andeq	r6, r1, ip, asr lr
   16c90:	andeq	r6, r1, ip, asr lr
   16c94:	andeq	r6, r1, r4, asr #26
   16c98:	andeq	r6, r1, ip, asr lr
   16c9c:	andeq	r6, r1, r4, asr #26
   16ca0:	andeq	r6, r1, ip, asr lr
   16ca4:	andeq	r6, r1, ip, asr lr
   16ca8:	andeq	r6, r1, r4, asr #26
   16cac:	andeq	r6, r1, ip, asr lr
   16cb0:	andeq	r6, r1, ip, asr lr
   16cb4:	andeq	r6, r1, ip, asr lr
   16cb8:	andeq	r6, r1, r4, asr #26
   16cbc:	andeq	r6, r1, ip, asr lr
   16cc0:	andeq	r6, r1, ip, asr lr
   16cc4:	andeq	r6, r1, ip, asr lr
   16cc8:	andeq	r6, r1, ip, asr lr
   16ccc:	andeq	r6, r1, r4, asr #26
   16cd0:	andeq	r6, r1, r4, asr #26
   16cd4:	andeq	r6, r1, ip, asr lr
   16cd8:	andeq	r6, r1, ip, asr lr
   16cdc:	andeq	r6, r1, ip, asr lr
   16ce0:	andeq	r6, r1, ip, asr lr
   16ce4:	andeq	r6, r1, ip, asr lr
   16ce8:	andeq	r6, r1, ip, asr lr
   16cec:	andeq	r6, r1, ip, asr lr
   16cf0:	andeq	r6, r1, ip, asr lr
   16cf4:	andeq	r6, r1, ip, asr lr
   16cf8:	andeq	r6, r1, ip, asr lr
   16cfc:	andeq	r6, r1, ip, asr lr
   16d00:	andeq	r6, r1, ip, asr lr
   16d04:	andeq	r6, r1, r4, asr #26
   16d08:	andeq	r6, r1, ip, asr lr
   16d0c:	andeq	r6, r1, ip, asr lr
   16d10:	andeq	r6, r1, ip, asr lr
   16d14:	andeq	r6, r1, r4, asr #26
   16d18:	andeq	r6, r1, ip, asr lr
   16d1c:	andeq	r6, r1, r4, asr #26
   16d20:	andeq	r6, r1, ip, asr lr
   16d24:	andeq	r6, r1, ip, asr lr
   16d28:	andeq	r6, r1, ip, asr lr
   16d2c:	andeq	r6, r1, ip, asr lr
   16d30:	andeq	r6, r1, ip, asr lr
   16d34:	andeq	r6, r1, ip, asr lr
   16d38:	andeq	r6, r1, r4, asr #26
   16d3c:	mov	r4, #4
   16d40:	b	16c18 <__assert_fail@plt+0x5d8c>
   16d44:	mov	r1, #48	; 0x30
   16d48:	ldr	r0, [sp, #72]	; 0x48
   16d4c:	bl	10db4 <strchr@plt>
   16d50:	cmp	r0, #0
   16d54:	beq	16e5c <__assert_fail@plt+0x5fd0>
   16d58:	ldrb	r3, [r8, #1]
   16d5c:	cmp	r3, #68	; 0x44
   16d60:	beq	17544 <__assert_fail@plt+0x66b8>
   16d64:	cmp	r3, #105	; 0x69
   16d68:	beq	1758c <__assert_fail@plt+0x6700>
   16d6c:	cmp	r3, #66	; 0x42
   16d70:	beq	17544 <__assert_fail@plt+0x66b8>
   16d74:	cmp	fp, #47	; 0x2f
   16d78:	ldrls	pc, [pc, fp, lsl #2]
   16d7c:	b	16e54 <__assert_fail@plt+0x5fc8>
   16d80:	andeq	r7, r1, r4, ror #8
   16d84:	andeq	r6, r1, r4, asr lr
   16d88:	andeq	r7, r1, r8, lsr #5
   16d8c:	andeq	r6, r1, r4, asr lr
   16d90:	andeq	r6, r1, r4, asr lr
   16d94:	andeq	r6, r1, r4, asr lr
   16d98:	andeq	r7, r1, r8, ror r0
   16d9c:	andeq	r6, r1, r4, asr lr
   16da0:	andeq	r7, r1, r4, lsl #8
   16da4:	andeq	r6, r1, r4, asr lr
   16da8:	andeq	r6, r1, r4, asr lr
   16dac:	andeq	r7, r1, r8, lsl #4
   16db0:	andeq	r6, r1, r4, asr lr
   16db4:	andeq	r6, r1, r4, asr lr
   16db8:	andeq	r6, r1, r4, asr lr
   16dbc:	andeq	r7, r1, r8, asr #6
   16dc0:	andeq	r6, r1, r4, asr lr
   16dc4:	andeq	r6, r1, r4, asr lr
   16dc8:	andeq	r6, r1, r4, asr lr
   16dcc:	andeq	r6, r1, r4, asr lr
   16dd0:	andeq	r7, r1, r4, asr #2
   16dd4:	andeq	r6, r1, ip, asr #30
   16dd8:	andeq	r6, r1, r4, asr lr
   16ddc:	andeq	r6, r1, r4, asr lr
   16de0:	andeq	r6, r1, r4, asr lr
   16de4:	andeq	r6, r1, r4, asr lr
   16de8:	andeq	r6, r1, r4, asr lr
   16dec:	andeq	r6, r1, r4, asr lr
   16df0:	andeq	r6, r1, r4, asr lr
   16df4:	andeq	r7, r1, r4, lsl r1
   16df8:	andeq	r7, r1, r4, lsl #10
   16dfc:	andeq	r6, r1, r4, asr lr
   16e00:	andeq	r6, r1, r4, asr lr
   16e04:	andeq	r6, r1, r4, asr lr
   16e08:	andeq	r7, r1, r8, lsr #5
   16e0c:	andeq	r6, r1, r4, asr lr
   16e10:	andeq	r6, r1, r4, asr lr
   16e14:	andeq	r6, r1, r4, asr lr
   16e18:	andeq	r7, r1, r8, ror r0
   16e1c:	andeq	r6, r1, r4, asr lr
   16e20:	andeq	r7, r1, r4, lsl #8
   16e24:	andeq	r6, r1, r4, asr lr
   16e28:	andeq	r6, r1, r4, asr lr
   16e2c:	andeq	r6, r1, r4, asr lr
   16e30:	andeq	r6, r1, r4, asr lr
   16e34:	andeq	r6, r1, r4, asr lr
   16e38:	andeq	r6, r1, r4, asr lr
   16e3c:	andeq	r7, r1, r8, asr #6
   16e40:	mov	r0, r3
   16e44:	mov	r1, sl
   16e48:	bl	10db4 <strchr@plt>
   16e4c:	cmp	r0, #0
   16e50:	bne	16c6c <__assert_fail@plt+0x5de0>
   16e54:	orr	r4, r4, #2
   16e58:	b	16c14 <__assert_fail@plt+0x5d88>
   16e5c:	mov	fp, #1
   16e60:	mov	lr, #1024	; 0x400
   16e64:	sub	sl, sl, #66	; 0x42
   16e68:	cmp	sl, #53	; 0x35
   16e6c:	ldrls	pc, [pc, sl, lsl #2]
   16e70:	b	16e54 <__assert_fail@plt+0x5fc8>
   16e74:	andeq	r7, r1, r8, ror #7
   16e78:	andeq	r6, r1, r4, asr lr
   16e7c:	andeq	r6, r1, r4, asr lr
   16e80:	andeq	r7, r1, ip, ror #8
   16e84:	andeq	r6, r1, r4, asr lr
   16e88:			; <UNDEFINED> instruction: 0x000172b0
   16e8c:	andeq	r6, r1, r4, asr lr
   16e90:	andeq	r6, r1, r4, asr lr
   16e94:	andeq	r6, r1, r4, asr lr
   16e98:	andeq	r7, r1, r0, lsl #1
   16e9c:	andeq	r6, r1, r4, asr lr
   16ea0:	andeq	r7, r1, ip, lsl #8
   16ea4:	andeq	r6, r1, r4, asr lr
   16ea8:	andeq	r6, r1, r4, asr lr
   16eac:	andeq	r7, r1, r0, lsl r2
   16eb0:	andeq	r6, r1, r4, asr lr
   16eb4:	andeq	r6, r1, r4, asr lr
   16eb8:	andeq	r6, r1, r4, asr lr
   16ebc:	andeq	r7, r1, r0, asr r3
   16ec0:	andeq	r6, r1, r4, asr lr
   16ec4:	andeq	r6, r1, r4, asr lr
   16ec8:	andeq	r6, r1, r4, asr lr
   16ecc:	andeq	r6, r1, r4, asr lr
   16ed0:	andeq	r7, r1, ip, asr #2
   16ed4:	andeq	r6, r1, r4, asr pc
   16ed8:	andeq	r6, r1, r4, asr lr
   16edc:	andeq	r6, r1, r4, asr lr
   16ee0:	andeq	r6, r1, r4, asr lr
   16ee4:	andeq	r6, r1, r4, asr lr
   16ee8:	andeq	r6, r1, r4, asr lr
   16eec:	andeq	r6, r1, r4, asr lr
   16ef0:	andeq	r6, r1, r4, asr lr
   16ef4:	andeq	r7, r1, r8, lsl r1
   16ef8:	andeq	r7, r1, r0, rrx
   16efc:	andeq	r6, r1, r4, asr lr
   16f00:	andeq	r6, r1, r4, asr lr
   16f04:	andeq	r6, r1, r4, asr lr
   16f08:			; <UNDEFINED> instruction: 0x000172b0
   16f0c:	andeq	r6, r1, r4, asr lr
   16f10:	andeq	r6, r1, r4, asr lr
   16f14:	andeq	r6, r1, r4, asr lr
   16f18:	andeq	r7, r1, r0, lsl #1
   16f1c:	andeq	r6, r1, r4, asr lr
   16f20:	andeq	r7, r1, ip, lsl #8
   16f24:	andeq	r6, r1, r4, asr lr
   16f28:	andeq	r6, r1, r4, asr lr
   16f2c:	andeq	r6, r1, r4, asr lr
   16f30:	andeq	r6, r1, r4, asr lr
   16f34:	andeq	r6, r1, r4, asr lr
   16f38:	andeq	r6, r1, r4, asr lr
   16f3c:	andeq	r7, r1, r0, asr r3
   16f40:	andeq	r6, r1, r4, asr lr
   16f44:	andeq	r6, r1, r4, asr lr
   16f48:	andeq	r7, r1, ip, ror #1
   16f4c:	mov	fp, #1
   16f50:	mov	lr, #1024	; 0x400
   16f54:	asr	r3, lr, #31
   16f58:	mov	r2, lr
   16f5c:	mov	r1, #0
   16f60:	cmp	r7, r6, asr #31
   16f64:	strd	r2, [sp]
   16f68:	bne	17678 <__assert_fail@plt+0x67ec>
   16f6c:	smull	r2, r3, r6, lr
   16f70:	mov	ip, r2
   16f74:	cmp	r1, #0
   16f78:	bne	1750c <__assert_fail@plt+0x6680>
   16f7c:	mov	r6, ip
   16f80:	mov	r7, r3
   16f84:	cmp	r3, r6, asr #31
   16f88:	mov	ip, r1
   16f8c:	bne	171ac <__assert_fail@plt+0x6320>
   16f90:	smull	r2, r3, r6, lr
   16f94:	mov	sl, r2
   16f98:	subs	r1, ip, #0
   16f9c:	bne	1750c <__assert_fail@plt+0x6680>
   16fa0:	cmp	r3, sl, asr #31
   16fa4:	mov	r6, sl
   16fa8:	mov	ip, r1
   16fac:	mov	r7, r3
   16fb0:	bne	174a8 <__assert_fail@plt+0x661c>
   16fb4:	smull	r2, r3, r6, lr
   16fb8:	mov	sl, r2
   16fbc:	subs	r1, ip, #0
   16fc0:	bne	1750c <__assert_fail@plt+0x6680>
   16fc4:	cmp	r3, sl, asr #31
   16fc8:	mov	r6, sl
   16fcc:	mov	ip, r1
   16fd0:	mov	r7, r3
   16fd4:	bne	1724c <__assert_fail@plt+0x63c0>
   16fd8:	smull	r2, r3, r6, lr
   16fdc:	mov	sl, r2
   16fe0:	subs	r1, ip, #0
   16fe4:	bne	1750c <__assert_fail@plt+0x6680>
   16fe8:	cmp	r3, sl, asr #31
   16fec:	mov	r6, sl
   16ff0:	mov	ip, r1
   16ff4:	mov	r7, r3
   16ff8:	bne	1738c <__assert_fail@plt+0x6500>
   16ffc:	smull	r2, r3, r6, lr
   17000:	mov	sl, r2
   17004:	subs	r1, ip, #0
   17008:	bne	1750c <__assert_fail@plt+0x6680>
   1700c:	cmp	r3, sl, asr #31
   17010:	mov	r6, sl
   17014:	mov	ip, r1
   17018:	mov	r7, r3
   1701c:	bne	172ec <__assert_fail@plt+0x6460>
   17020:	smull	r2, r3, r6, lr
   17024:	mov	sl, r2
   17028:	cmp	ip, #0
   1702c:	bne	1750c <__assert_fail@plt+0x6680>
   17030:	cmp	r3, sl, asr #31
   17034:	mov	r0, sl
   17038:	mov	r1, r3
   1703c:	bne	175a4 <__assert_fail@plt+0x6718>
   17040:	smull	r2, r3, sl, lr
   17044:	mov	lr, r2
   17048:	mov	r2, r3
   1704c:	cmp	ip, #0
   17050:	moveq	r6, lr
   17054:	moveq	r7, r2
   17058:	bne	17528 <__assert_fail@plt+0x669c>
   1705c:	orr	r4, r4, ip
   17060:	add	r3, r8, fp
   17064:	str	r3, [r5]
   17068:	ldrb	r3, [r8, fp]
   1706c:	cmp	r3, #0
   17070:	beq	16c14 <__assert_fail@plt+0x5d88>
   17074:	b	16e54 <__assert_fail@plt+0x5fc8>
   17078:	mov	fp, #1
   1707c:	mov	lr, #1024	; 0x400
   17080:	cmp	r7, r6, asr #31
   17084:	mov	r0, lr
   17088:	mov	ip, #0
   1708c:	asr	r1, lr, #31
   17090:	bne	17550 <__assert_fail@plt+0x66c4>
   17094:	smull	r2, r3, r6, lr
   17098:	mov	r1, r2
   1709c:	mov	lr, r3
   170a0:	cmp	ip, #0
   170a4:	bne	170b4 <__assert_fail@plt+0x6228>
   170a8:	mov	r6, r1
   170ac:	mov	r7, lr
   170b0:	b	17060 <__assert_fail@plt+0x61d4>
   170b4:	cmp	r6, #0
   170b8:	mov	r4, #1
   170bc:	sbcs	r3, r7, #0
   170c0:	blt	170e0 <__assert_fail@plt+0x6254>
   170c4:	mvn	r6, #0
   170c8:	mvn	r7, #-2147483648	; 0x80000000
   170cc:	b	17060 <__assert_fail@plt+0x61d4>
   170d0:	cmp	r0, #0
   170d4:	mov	r4, #1
   170d8:	sbcs	r3, r1, #0
   170dc:	bge	170c4 <__assert_fail@plt+0x6238>
   170e0:	mov	r6, #0
   170e4:	mov	r7, #-2147483648	; 0x80000000
   170e8:	b	17060 <__assert_fail@plt+0x61d4>
   170ec:	cmp	r7, r6, asr #31
   170f0:	mov	r1, #0
   170f4:	bne	17810 <__assert_fail@plt+0x6984>
   170f8:	adds	ip, r6, r6
   170fc:	adc	r3, r7, r7
   17100:	cmp	r1, #0
   17104:	bne	170b4 <__assert_fail@plt+0x6228>
   17108:	mov	r6, ip
   1710c:	mov	r7, r3
   17110:	b	17060 <__assert_fail@plt+0x61d4>
   17114:	mov	fp, #1
   17118:	cmp	r7, r6, asr #31
   1711c:	mov	ip, #0
   17120:	bne	17868 <__assert_fail@plt+0x69dc>
   17124:	lsl	r3, r7, #9
   17128:	lsl	r2, r6, #9
   1712c:	orr	r3, r3, r6, lsr #23
   17130:	cmp	ip, #0
   17134:	bne	170b4 <__assert_fail@plt+0x6228>
   17138:	mov	r6, r2
   1713c:	mov	r7, r3
   17140:	b	17060 <__assert_fail@plt+0x61d4>
   17144:	mov	fp, #1
   17148:	mov	lr, #1024	; 0x400
   1714c:	asr	r3, lr, #31
   17150:	mov	r2, lr
   17154:	mov	r1, #0
   17158:	cmp	r7, r6, asr #31
   1715c:	strd	r2, [sp]
   17160:	bne	176f8 <__assert_fail@plt+0x686c>
   17164:	smull	r2, r3, r6, lr
   17168:	mov	ip, r2
   1716c:	cmp	r1, #0
   17170:	bne	1750c <__assert_fail@plt+0x6680>
   17174:	mov	r6, ip
   17178:	mov	r7, r3
   1717c:	cmp	r3, r6, asr #31
   17180:	mov	ip, r1
   17184:	bne	178bc <__assert_fail@plt+0x6a30>
   17188:	smull	r2, r3, r6, lr
   1718c:	mov	sl, r2
   17190:	subs	r1, ip, #0
   17194:	bne	1750c <__assert_fail@plt+0x6680>
   17198:	cmp	r3, sl, asr #31
   1719c:	mov	r6, sl
   171a0:	mov	ip, r1
   171a4:	mov	r7, r3
   171a8:	beq	16f90 <__assert_fail@plt+0x6104>
   171ac:	umull	r0, r1, r6, lr
   171b0:	cmp	r3, #0
   171b4:	umull	r2, r3, lr, r3
   171b8:	strd	r0, [sp, #16]
   171bc:	mov	r0, r2
   171c0:	mov	r1, r3
   171c4:	strd	r0, [sp, #8]
   171c8:	bge	171e0 <__assert_fail@plt+0x6354>
   171cc:	subs	r3, r0, ip
   171d0:	str	r3, [sp, #8]
   171d4:	ldr	r3, [sp, #12]
   171d8:	sbc	r3, r3, lr
   171dc:	str	r3, [sp, #12]
   171e0:	ldr	r1, [sp, #8]
   171e4:	mov	r2, #0
   171e8:	ldr	r3, [sp, #20]
   171ec:	adds	r3, r1, r3
   171f0:	ldr	r1, [sp, #12]
   171f4:	adc	r2, r1, r2
   171f8:	cmp	r2, r3, asr #31
   171fc:	bne	17b10 <__assert_fail@plt+0x6c84>
   17200:	ldr	sl, [sp, #16]
   17204:	b	16f98 <__assert_fail@plt+0x610c>
   17208:	mov	fp, #1
   1720c:	mov	lr, #1024	; 0x400
   17210:	asr	r3, lr, #31
   17214:	mov	r2, lr
   17218:	mov	r1, #0
   1721c:	cmp	r7, r6, asr #31
   17220:	strd	r2, [sp]
   17224:	bne	17638 <__assert_fail@plt+0x67ac>
   17228:	smull	r2, r3, r6, lr
   1722c:	mov	ip, r2
   17230:	cmp	r1, #0
   17234:	bne	1750c <__assert_fail@plt+0x6680>
   17238:	mov	r6, ip
   1723c:	mov	r7, r3
   17240:	cmp	r3, r6, asr #31
   17244:	mov	ip, r1
   17248:	beq	16fd8 <__assert_fail@plt+0x614c>
   1724c:	umull	r0, r1, r6, lr
   17250:	cmp	r3, #0
   17254:	umull	r2, r3, lr, r3
   17258:	strd	r0, [sp, #16]
   1725c:	mov	r0, r2
   17260:	mov	r1, r3
   17264:	strd	r0, [sp, #8]
   17268:	bge	17280 <__assert_fail@plt+0x63f4>
   1726c:	subs	r3, r0, ip
   17270:	str	r3, [sp, #8]
   17274:	ldr	r3, [sp, #12]
   17278:	sbc	r3, r3, lr
   1727c:	str	r3, [sp, #12]
   17280:	ldr	r1, [sp, #8]
   17284:	mov	r2, #0
   17288:	ldr	r3, [sp, #20]
   1728c:	adds	r3, r1, r3
   17290:	ldr	r1, [sp, #12]
   17294:	adc	r2, r1, r2
   17298:	cmp	r2, r3, asr #31
   1729c:	bne	17a40 <__assert_fail@plt+0x6bb4>
   172a0:	ldr	sl, [sp, #16]
   172a4:	b	16fe0 <__assert_fail@plt+0x6154>
   172a8:	mov	fp, #1
   172ac:	mov	lr, #1024	; 0x400
   172b0:	asr	r3, lr, #31
   172b4:	mov	r2, lr
   172b8:	mov	r1, #0
   172bc:	cmp	r7, r6, asr #31
   172c0:	strd	r2, [sp]
   172c4:	bne	175f8 <__assert_fail@plt+0x676c>
   172c8:	smull	r2, r3, r6, lr
   172cc:	mov	ip, r2
   172d0:	cmp	r1, #0
   172d4:	bne	1750c <__assert_fail@plt+0x6680>
   172d8:	mov	r6, ip
   172dc:	mov	r7, r3
   172e0:	cmp	r3, r6, asr #31
   172e4:	mov	ip, r1
   172e8:	beq	17020 <__assert_fail@plt+0x6194>
   172ec:	umull	r0, r1, r6, lr
   172f0:	cmp	r3, #0
   172f4:	umull	r2, r3, lr, r3
   172f8:	strd	r0, [sp, #16]
   172fc:	mov	r0, r2
   17300:	mov	r1, r3
   17304:	strd	r0, [sp, #8]
   17308:	bge	17320 <__assert_fail@plt+0x6494>
   1730c:	subs	r3, r0, ip
   17310:	str	r3, [sp, #8]
   17314:	ldr	r3, [sp, #12]
   17318:	sbc	r3, r3, lr
   1731c:	str	r3, [sp, #12]
   17320:	ldr	r1, [sp, #8]
   17324:	mov	r2, #0
   17328:	ldr	r3, [sp, #20]
   1732c:	adds	r3, r1, r3
   17330:	ldr	r1, [sp, #12]
   17334:	adc	r2, r1, r2
   17338:	cmp	r2, r3, asr #31
   1733c:	bne	179b0 <__assert_fail@plt+0x6b24>
   17340:	ldr	sl, [sp, #16]
   17344:	b	17028 <__assert_fail@plt+0x619c>
   17348:	mov	fp, #1
   1734c:	mov	lr, #1024	; 0x400
   17350:	asr	r3, lr, #31
   17354:	mov	r2, lr
   17358:	mov	r1, #0
   1735c:	cmp	r7, r6, asr #31
   17360:	strd	r2, [sp]
   17364:	bne	177d0 <__assert_fail@plt+0x6944>
   17368:	smull	r2, r3, r6, lr
   1736c:	mov	ip, r2
   17370:	cmp	r1, #0
   17374:	bne	1750c <__assert_fail@plt+0x6680>
   17378:	mov	r6, ip
   1737c:	mov	r7, r3
   17380:	cmp	r3, r6, asr #31
   17384:	mov	ip, r1
   17388:	beq	16ffc <__assert_fail@plt+0x6170>
   1738c:	umull	r0, r1, r6, lr
   17390:	cmp	r3, #0
   17394:	umull	r2, r3, lr, r3
   17398:	strd	r0, [sp, #16]
   1739c:	mov	r0, r2
   173a0:	mov	r1, r3
   173a4:	strd	r0, [sp, #8]
   173a8:	bge	173c0 <__assert_fail@plt+0x6534>
   173ac:	subs	r3, r0, ip
   173b0:	str	r3, [sp, #8]
   173b4:	ldr	r3, [sp, #12]
   173b8:	sbc	r3, r3, lr
   173bc:	str	r3, [sp, #12]
   173c0:	ldr	r1, [sp, #8]
   173c4:	mov	r2, #0
   173c8:	ldr	r3, [sp, #20]
   173cc:	adds	r3, r1, r3
   173d0:	ldr	r1, [sp, #12]
   173d4:	adc	r2, r1, r2
   173d8:	cmp	r2, r3, asr #31
   173dc:	bne	179f8 <__assert_fail@plt+0x6b6c>
   173e0:	ldr	sl, [sp, #16]
   173e4:	b	17004 <__assert_fail@plt+0x6178>
   173e8:	cmp	r7, r6, asr #31
   173ec:	mov	ip, #0
   173f0:	bne	17778 <__assert_fail@plt+0x68ec>
   173f4:	lsl	r3, r7, #10
   173f8:	lsl	r2, r6, #10
   173fc:	orr	r3, r3, r6, lsr #22
   17400:	b	17130 <__assert_fail@plt+0x62a4>
   17404:	mov	fp, #1
   17408:	mov	lr, #1024	; 0x400
   1740c:	asr	r3, lr, #31
   17410:	mov	r2, lr
   17414:	mov	r1, #0
   17418:	cmp	r7, r6, asr #31
   1741c:	strd	r2, [sp]
   17420:	bne	17738 <__assert_fail@plt+0x68ac>
   17424:	smull	r2, r3, r6, lr
   17428:	mov	sl, r2
   1742c:	subs	ip, r1, #0
   17430:	bne	170b4 <__assert_fail@plt+0x6228>
   17434:	cmp	r3, sl, asr #31
   17438:	mov	r0, sl
   1743c:	mov	r1, r3
   17440:	bne	17918 <__assert_fail@plt+0x6a8c>
   17444:	smull	r2, r3, sl, lr
   17448:	mov	lr, r2
   1744c:	mov	r2, r3
   17450:	cmp	ip, #0
   17454:	bne	170d0 <__assert_fail@plt+0x6244>
   17458:	mov	r6, lr
   1745c:	mov	r7, r2
   17460:	b	17060 <__assert_fail@plt+0x61d4>
   17464:	mov	fp, #1
   17468:	mov	lr, #1024	; 0x400
   1746c:	asr	r3, lr, #31
   17470:	mov	r2, lr
   17474:	mov	r1, #0
   17478:	cmp	r7, r6, asr #31
   1747c:	strd	r2, [sp]
   17480:	bne	176b8 <__assert_fail@plt+0x682c>
   17484:	smull	r2, r3, r6, lr
   17488:	mov	ip, r2
   1748c:	cmp	r1, #0
   17490:	bne	1750c <__assert_fail@plt+0x6680>
   17494:	mov	r6, ip
   17498:	mov	r7, r3
   1749c:	cmp	r3, r6, asr #31
   174a0:	mov	ip, r1
   174a4:	beq	16fb4 <__assert_fail@plt+0x6128>
   174a8:	umull	r0, r1, r6, lr
   174ac:	cmp	r3, #0
   174b0:	umull	r2, r3, lr, r3
   174b4:	strd	r0, [sp, #16]
   174b8:	mov	r0, r2
   174bc:	mov	r1, r3
   174c0:	strd	r0, [sp, #8]
   174c4:	bge	174dc <__assert_fail@plt+0x6650>
   174c8:	subs	r3, r0, ip
   174cc:	str	r3, [sp, #8]
   174d0:	ldr	r3, [sp, #12]
   174d4:	sbc	r3, r3, lr
   174d8:	str	r3, [sp, #12]
   174dc:	ldr	r1, [sp, #8]
   174e0:	mov	r2, #0
   174e4:	ldr	r3, [sp, #20]
   174e8:	adds	r3, r1, r3
   174ec:	ldr	r1, [sp, #12]
   174f0:	adc	r2, r1, r2
   174f4:	cmp	r2, r3, asr #31
   174f8:	bne	17a1c <__assert_fail@plt+0x6b90>
   174fc:	ldr	sl, [sp, #16]
   17500:	b	16fbc <__assert_fail@plt+0x6130>
   17504:	mov	fp, #1
   17508:	b	17060 <__assert_fail@plt+0x61d4>
   1750c:	cmp	r6, #0
   17510:	mov	ip, #1
   17514:	sbcs	r3, r7, #0
   17518:	blt	17538 <__assert_fail@plt+0x66ac>
   1751c:	mvn	r6, #0
   17520:	mvn	r7, #-2147483648	; 0x80000000
   17524:	b	1705c <__assert_fail@plt+0x61d0>
   17528:	cmp	r0, #0
   1752c:	mov	ip, #1
   17530:	sbcs	r3, r1, #0
   17534:	bge	1751c <__assert_fail@plt+0x6690>
   17538:	mov	r6, #0
   1753c:	mov	r7, #-2147483648	; 0x80000000
   17540:	b	1705c <__assert_fail@plt+0x61d0>
   17544:	mov	fp, #2
   17548:	mov	lr, #1000	; 0x3e8
   1754c:	b	16e64 <__assert_fail@plt+0x5fd8>
   17550:	umull	r2, r3, r6, lr
   17554:	cmp	r7, #0
   17558:	strd	r2, [sp]
   1755c:	umull	r2, r3, lr, r7
   17560:	bge	1756c <__assert_fail@plt+0x66e0>
   17564:	subs	r2, r2, ip
   17568:	sbc	r3, r3, lr
   1756c:	ldr	lr, [sp, #4]
   17570:	mov	sl, #0
   17574:	adds	lr, r2, lr
   17578:	adc	sl, r3, sl
   1757c:	cmp	sl, lr, asr #31
   17580:	bne	17ad0 <__assert_fail@plt+0x6c44>
   17584:	ldr	r1, [sp]
   17588:	b	170a0 <__assert_fail@plt+0x6214>
   1758c:	ldrb	r3, [r8, #2]
   17590:	mov	lr, #1024	; 0x400
   17594:	cmp	r3, #66	; 0x42
   17598:	movne	fp, #1
   1759c:	moveq	fp, #3
   175a0:	b	16e64 <__assert_fail@plt+0x5fd8>
   175a4:	cmp	r3, #0
   175a8:	umull	r6, r7, sl, lr
   175ac:	umull	r2, r3, lr, r3
   175b0:	strd	r2, [sp, #8]
   175b4:	strd	r6, [sp, #16]
   175b8:	bge	175d0 <__assert_fail@plt+0x6744>
   175bc:	subs	r3, r2, ip
   175c0:	str	r3, [sp, #8]
   175c4:	ldr	r3, [sp, #12]
   175c8:	sbc	r3, r3, lr
   175cc:	str	r3, [sp, #12]
   175d0:	ldr	r3, [sp, #8]
   175d4:	mov	lr, #0
   175d8:	ldr	r6, [sp, #20]
   175dc:	adds	r2, r3, r6
   175e0:	ldr	r3, [sp, #12]
   175e4:	adc	lr, r3, lr
   175e8:	cmp	lr, r2, asr #31
   175ec:	bne	17a64 <__assert_fail@plt+0x6bd8>
   175f0:	ldr	lr, [sp, #16]
   175f4:	b	1704c <__assert_fail@plt+0x61c0>
   175f8:	umull	r2, r3, r6, lr
   175fc:	cmp	r7, #0
   17600:	strd	r2, [sp, #8]
   17604:	umull	r2, r3, lr, r7
   17608:	bge	17614 <__assert_fail@plt+0x6788>
   1760c:	subs	r2, r2, r1
   17610:	sbc	r3, r3, lr
   17614:	ldr	r0, [sp, #12]
   17618:	mov	ip, #0
   1761c:	adds	r0, r2, r0
   17620:	adc	ip, r3, ip
   17624:	cmp	ip, r0, asr #31
   17628:	bne	1798c <__assert_fail@plt+0x6b00>
   1762c:	mov	r3, r0
   17630:	ldr	ip, [sp, #8]
   17634:	b	172d0 <__assert_fail@plt+0x6444>
   17638:	umull	r2, r3, r6, lr
   1763c:	cmp	r7, #0
   17640:	strd	r2, [sp, #8]
   17644:	umull	r2, r3, lr, r7
   17648:	bge	17654 <__assert_fail@plt+0x67c8>
   1764c:	subs	r2, r2, r1
   17650:	sbc	r3, r3, lr
   17654:	ldr	r0, [sp, #12]
   17658:	mov	ip, #0
   1765c:	adds	r0, r2, r0
   17660:	adc	ip, r3, ip
   17664:	cmp	ip, r0, asr #31
   17668:	bne	17aec <__assert_fail@plt+0x6c60>
   1766c:	mov	r3, r0
   17670:	ldr	ip, [sp, #8]
   17674:	b	17230 <__assert_fail@plt+0x63a4>
   17678:	umull	r2, r3, r6, lr
   1767c:	cmp	r7, #0
   17680:	strd	r2, [sp, #8]
   17684:	umull	r2, r3, lr, r7
   17688:	bge	17694 <__assert_fail@plt+0x6808>
   1768c:	subs	r2, r2, r1
   17690:	sbc	r3, r3, lr
   17694:	ldr	r0, [sp, #12]
   17698:	mov	ip, #0
   1769c:	adds	r0, r2, r0
   176a0:	adc	ip, r3, ip
   176a4:	cmp	ip, r0, asr #31
   176a8:	bne	179d4 <__assert_fail@plt+0x6b48>
   176ac:	mov	r3, r0
   176b0:	ldr	ip, [sp, #8]
   176b4:	b	16f74 <__assert_fail@plt+0x60e8>
   176b8:	umull	r2, r3, r6, lr
   176bc:	cmp	r7, #0
   176c0:	strd	r2, [sp, #8]
   176c4:	umull	r2, r3, lr, r7
   176c8:	bge	176d4 <__assert_fail@plt+0x6848>
   176cc:	subs	r2, r2, r1
   176d0:	sbc	r3, r3, lr
   176d4:	ldr	r0, [sp, #12]
   176d8:	mov	ip, #0
   176dc:	adds	r0, r2, r0
   176e0:	adc	ip, r3, ip
   176e4:	cmp	ip, r0, asr #31
   176e8:	bne	17b8c <__assert_fail@plt+0x6d00>
   176ec:	mov	r3, r0
   176f0:	ldr	ip, [sp, #8]
   176f4:	b	1748c <__assert_fail@plt+0x6600>
   176f8:	umull	r2, r3, r6, lr
   176fc:	cmp	r7, #0
   17700:	strd	r2, [sp, #8]
   17704:	umull	r2, r3, lr, r7
   17708:	bge	17714 <__assert_fail@plt+0x6888>
   1770c:	subs	r2, r2, r1
   17710:	sbc	r3, r3, lr
   17714:	ldr	r0, [sp, #12]
   17718:	mov	ip, #0
   1771c:	adds	r0, r2, r0
   17720:	adc	ip, r3, ip
   17724:	cmp	ip, r0, asr #31
   17728:	bne	17a88 <__assert_fail@plt+0x6bfc>
   1772c:	mov	r3, r0
   17730:	ldr	ip, [sp, #8]
   17734:	b	1716c <__assert_fail@plt+0x62e0>
   17738:	umull	r2, r3, r6, lr
   1773c:	cmp	r7, #0
   17740:	strd	r2, [sp, #8]
   17744:	umull	r2, r3, lr, r7
   17748:	bge	17754 <__assert_fail@plt+0x68c8>
   1774c:	subs	r2, r2, r1
   17750:	sbc	r3, r3, lr
   17754:	ldr	r0, [sp, #12]
   17758:	mov	ip, #0
   1775c:	adds	r0, r2, r0
   17760:	adc	ip, r3, ip
   17764:	cmp	ip, r0, asr #31
   17768:	bne	17b34 <__assert_fail@plt+0x6ca8>
   1776c:	mov	r3, r0
   17770:	ldr	sl, [sp, #8]
   17774:	b	1742c <__assert_fail@plt+0x65a0>
   17778:	mov	r2, r6
   1777c:	mov	r3, #0
   17780:	mov	lr, #1024	; 0x400
   17784:	cmp	r7, #0
   17788:	strd	r2, [sp]
   1778c:	lsr	r3, r6, #22
   17790:	ldr	r2, [sp]
   17794:	umull	r0, r1, lr, r7
   17798:	lsl	r2, r2, #10
   1779c:	bge	177a8 <__assert_fail@plt+0x691c>
   177a0:	subs	r0, r0, ip
   177a4:	sbc	r1, r1, lr
   177a8:	adds	r3, r0, r3
   177ac:	mov	lr, #0
   177b0:	adc	r1, r1, lr
   177b4:	cmp	r1, r3, asr #31
   177b8:	beq	17130 <__assert_fail@plt+0x62a4>
   177bc:	lsl	r3, r7, #10
   177c0:	mov	ip, #1
   177c4:	lsl	r2, r6, #10
   177c8:	orr	r3, r3, r6, lsr #22
   177cc:	b	17130 <__assert_fail@plt+0x62a4>
   177d0:	umull	r2, r3, r6, lr
   177d4:	cmp	r7, #0
   177d8:	strd	r2, [sp, #8]
   177dc:	umull	r2, r3, lr, r7
   177e0:	bge	177ec <__assert_fail@plt+0x6960>
   177e4:	subs	r2, r2, r1
   177e8:	sbc	r3, r3, lr
   177ec:	ldr	r0, [sp, #12]
   177f0:	mov	ip, #0
   177f4:	adds	r0, r2, r0
   177f8:	adc	ip, r3, ip
   177fc:	cmp	ip, r0, asr #31
   17800:	bne	17b58 <__assert_fail@plt+0x6ccc>
   17804:	mov	r3, r0
   17808:	ldr	ip, [sp, #8]
   1780c:	b	17370 <__assert_fail@plt+0x64e4>
   17810:	mov	lr, #2
   17814:	mov	r3, #0
   17818:	adds	ip, r6, r6
   1781c:	adc	r0, r3, r3
   17820:	umull	r2, r3, lr, r7
   17824:	cmp	r7, #0
   17828:	strd	r2, [sp]
   1782c:	bge	17844 <__assert_fail@plt+0x69b8>
   17830:	subs	r3, r2, r1
   17834:	str	r3, [sp]
   17838:	ldr	r3, [sp, #4]
   1783c:	sbc	r3, r3, lr
   17840:	str	r3, [sp, #4]
   17844:	ldr	r3, [sp]
   17848:	mov	lr, #0
   1784c:	adds	r2, r3, r0
   17850:	ldr	r3, [sp, #4]
   17854:	adc	r3, r3, lr
   17858:	cmp	r3, r2, asr #31
   1785c:	bne	17b7c <__assert_fail@plt+0x6cf0>
   17860:	mov	r3, r2
   17864:	b	17100 <__assert_fail@plt+0x6274>
   17868:	mov	r2, r6
   1786c:	mov	r3, #0
   17870:	mov	lr, #512	; 0x200
   17874:	cmp	r7, #0
   17878:	strd	r2, [sp]
   1787c:	lsr	r3, r6, #23
   17880:	ldr	r2, [sp]
   17884:	umull	r0, r1, lr, r7
   17888:	lsl	r2, r2, #9
   1788c:	bge	17898 <__assert_fail@plt+0x6a0c>
   17890:	subs	r0, r0, ip
   17894:	sbc	r1, r1, lr
   17898:	adds	r3, r0, r3
   1789c:	mov	lr, #0
   178a0:	adc	r1, r1, lr
   178a4:	cmp	r1, r3, asr #31
   178a8:	lslne	r3, r7, #9
   178ac:	movne	ip, #1
   178b0:	lslne	r2, r6, #9
   178b4:	orrne	r3, r3, r6, lsr #23
   178b8:	b	17130 <__assert_fail@plt+0x62a4>
   178bc:	umull	r0, r1, r6, lr
   178c0:	cmp	r3, #0
   178c4:	umull	r2, r3, lr, r3
   178c8:	strd	r0, [sp, #16]
   178cc:	mov	r0, r2
   178d0:	mov	r1, r3
   178d4:	strd	r0, [sp, #8]
   178d8:	bge	178f0 <__assert_fail@plt+0x6a64>
   178dc:	subs	r3, r0, ip
   178e0:	str	r3, [sp, #8]
   178e4:	ldr	r3, [sp, #12]
   178e8:	sbc	r3, r3, lr
   178ec:	str	r3, [sp, #12]
   178f0:	ldr	r1, [sp, #8]
   178f4:	mov	r2, #0
   178f8:	ldr	r3, [sp, #20]
   178fc:	adds	r3, r1, r3
   17900:	ldr	r1, [sp, #12]
   17904:	adc	r2, r1, r2
   17908:	cmp	r2, r3, asr #31
   1790c:	bne	17aac <__assert_fail@plt+0x6c20>
   17910:	ldr	sl, [sp, #16]
   17914:	b	17190 <__assert_fail@plt+0x6304>
   17918:	cmp	r3, #0
   1791c:	umull	r6, r7, sl, lr
   17920:	umull	r2, r3, lr, r3
   17924:	strd	r2, [sp, #8]
   17928:	strd	r6, [sp, #16]
   1792c:	bge	17944 <__assert_fail@plt+0x6ab8>
   17930:	subs	r3, r2, ip
   17934:	str	r3, [sp, #8]
   17938:	ldr	r3, [sp, #12]
   1793c:	sbc	r3, r3, lr
   17940:	str	r3, [sp, #12]
   17944:	ldr	r3, [sp, #8]
   17948:	mov	lr, #0
   1794c:	ldr	r6, [sp, #20]
   17950:	adds	r2, r3, r6
   17954:	ldr	r3, [sp, #12]
   17958:	adc	lr, r3, lr
   1795c:	cmp	lr, r2, asr #31
   17960:	bne	17bb0 <__assert_fail@plt+0x6d24>
   17964:	ldr	lr, [sp, #16]
   17968:	b	17450 <__assert_fail@plt+0x65c4>
   1796c:	movw	r3, #37340	; 0x91dc
   17970:	movt	r3, #1
   17974:	movw	r1, #37352	; 0x91e8
   17978:	movt	r1, #1
   1797c:	movw	r0, #37368	; 0x91f8
   17980:	movt	r0, #1
   17984:	mov	r2, #85	; 0x55
   17988:	bl	10e8c <__assert_fail@plt>
   1798c:	ldrd	r2, [sp]
   17990:	mov	r1, #1
   17994:	ldr	ip, [sp]
   17998:	mul	r0, r6, r3
   1799c:	umull	r2, r3, r6, r2
   179a0:	mla	r0, ip, r7, r0
   179a4:	mov	ip, r2
   179a8:	add	r3, r0, r3
   179ac:	b	172d0 <__assert_fail@plt+0x6444>
   179b0:	ldrd	r2, [sp]
   179b4:	mov	ip, #1
   179b8:	ldr	r1, [sp]
   179bc:	mul	r0, r6, r3
   179c0:	umull	r2, r3, r6, r2
   179c4:	mla	r0, r1, r7, r0
   179c8:	mov	sl, r2
   179cc:	add	r3, r0, r3
   179d0:	b	17028 <__assert_fail@plt+0x619c>
   179d4:	ldrd	r2, [sp]
   179d8:	mov	r1, #1
   179dc:	ldr	ip, [sp]
   179e0:	mul	r0, r6, r3
   179e4:	umull	r2, r3, r6, r2
   179e8:	mla	r0, ip, r7, r0
   179ec:	mov	ip, r2
   179f0:	add	r3, r0, r3
   179f4:	b	16f74 <__assert_fail@plt+0x60e8>
   179f8:	ldrd	r2, [sp]
   179fc:	mov	ip, #1
   17a00:	ldr	r1, [sp]
   17a04:	mul	r0, r6, r3
   17a08:	umull	r2, r3, r6, r2
   17a0c:	mla	r0, r1, r7, r0
   17a10:	mov	sl, r2
   17a14:	add	r3, r0, r3
   17a18:	b	17004 <__assert_fail@plt+0x6178>
   17a1c:	ldrd	r2, [sp]
   17a20:	mov	ip, #1
   17a24:	ldr	r1, [sp]
   17a28:	mul	r0, r6, r3
   17a2c:	umull	r2, r3, r6, r2
   17a30:	mla	r0, r1, r7, r0
   17a34:	mov	sl, r2
   17a38:	add	r3, r0, r3
   17a3c:	b	16fbc <__assert_fail@plt+0x6130>
   17a40:	ldrd	r2, [sp]
   17a44:	mov	ip, #1
   17a48:	ldr	r1, [sp]
   17a4c:	mul	r0, r6, r3
   17a50:	umull	r2, r3, r6, r2
   17a54:	mla	r0, r1, r7, r0
   17a58:	mov	sl, r2
   17a5c:	add	r3, r0, r3
   17a60:	b	16fe0 <__assert_fail@plt+0x6154>
   17a64:	ldrd	r2, [sp]
   17a68:	mov	ip, #1
   17a6c:	ldr	lr, [sp]
   17a70:	mul	r6, r0, r3
   17a74:	umull	r2, r3, r0, r2
   17a78:	mla	r6, lr, r1, r6
   17a7c:	mov	lr, r2
   17a80:	add	r2, r6, r3
   17a84:	b	1704c <__assert_fail@plt+0x61c0>
   17a88:	ldrd	r2, [sp]
   17a8c:	mov	r1, #1
   17a90:	ldr	ip, [sp]
   17a94:	mul	r0, r6, r3
   17a98:	umull	r2, r3, r6, r2
   17a9c:	mla	r0, ip, r7, r0
   17aa0:	mov	ip, r2
   17aa4:	add	r3, r0, r3
   17aa8:	b	1716c <__assert_fail@plt+0x62e0>
   17aac:	ldrd	r2, [sp]
   17ab0:	mov	ip, #1
   17ab4:	ldr	r1, [sp]
   17ab8:	mul	r0, r6, r3
   17abc:	umull	r2, r3, r6, r2
   17ac0:	mla	r0, r1, r7, r0
   17ac4:	mov	sl, r2
   17ac8:	add	r3, r0, r3
   17acc:	b	17190 <__assert_fail@plt+0x6304>
   17ad0:	mul	lr, r6, r1
   17ad4:	mov	ip, #1
   17ad8:	umull	r2, r3, r6, r0
   17adc:	mla	lr, r0, r7, lr
   17ae0:	mov	r1, r2
   17ae4:	add	lr, lr, r3
   17ae8:	b	170a0 <__assert_fail@plt+0x6214>
   17aec:	ldrd	r2, [sp]
   17af0:	mov	r1, #1
   17af4:	ldr	ip, [sp]
   17af8:	mul	r0, r6, r3
   17afc:	umull	r2, r3, r6, r2
   17b00:	mla	r0, ip, r7, r0
   17b04:	mov	ip, r2
   17b08:	add	r3, r0, r3
   17b0c:	b	17230 <__assert_fail@plt+0x63a4>
   17b10:	ldrd	r2, [sp]
   17b14:	mov	ip, #1
   17b18:	ldr	r1, [sp]
   17b1c:	mul	r0, r6, r3
   17b20:	umull	r2, r3, r6, r2
   17b24:	mla	r0, r1, r7, r0
   17b28:	mov	sl, r2
   17b2c:	add	r3, r0, r3
   17b30:	b	16f98 <__assert_fail@plt+0x610c>
   17b34:	ldrd	r2, [sp]
   17b38:	mov	r1, #1
   17b3c:	ldr	ip, [sp]
   17b40:	mul	r0, r6, r3
   17b44:	umull	r2, r3, r6, r2
   17b48:	mla	r0, ip, r7, r0
   17b4c:	mov	sl, r2
   17b50:	add	r3, r0, r3
   17b54:	b	1742c <__assert_fail@plt+0x65a0>
   17b58:	ldrd	r2, [sp]
   17b5c:	mov	r1, #1
   17b60:	ldr	ip, [sp]
   17b64:	mul	r0, r6, r3
   17b68:	umull	r2, r3, r6, r2
   17b6c:	mla	r0, ip, r7, r0
   17b70:	mov	ip, r2
   17b74:	add	r3, r0, r3
   17b78:	b	17370 <__assert_fail@plt+0x64e4>
   17b7c:	adds	ip, r6, r6
   17b80:	mov	r1, #1
   17b84:	adc	r3, r7, r7
   17b88:	b	17100 <__assert_fail@plt+0x6274>
   17b8c:	ldrd	r2, [sp]
   17b90:	mov	r1, #1
   17b94:	ldr	ip, [sp]
   17b98:	mul	r0, r6, r3
   17b9c:	umull	r2, r3, r6, r2
   17ba0:	mla	r0, ip, r7, r0
   17ba4:	mov	ip, r2
   17ba8:	add	r3, r0, r3
   17bac:	b	1748c <__assert_fail@plt+0x6600>
   17bb0:	ldrd	r2, [sp]
   17bb4:	mov	ip, #1
   17bb8:	ldr	lr, [sp]
   17bbc:	mul	r6, r0, r3
   17bc0:	umull	r2, r3, r0, r2
   17bc4:	mla	r6, lr, r1, r6
   17bc8:	mov	lr, r2
   17bcc:	add	r3, r6, r3
   17bd0:	mov	r2, r3
   17bd4:	b	17450 <__assert_fail@plt+0x65c4>
   17bd8:	cmp	r1, #0
   17bdc:	cmpne	r0, #0
   17be0:	beq	17c2c <__assert_fail@plt+0x6da0>
   17be4:	strd	r4, [sp, #-16]!
   17be8:	umull	r4, r5, r0, r1
   17bec:	str	r6, [sp, #8]
   17bf0:	str	lr, [sp, #12]
   17bf4:	adds	r3, r5, #0
   17bf8:	movne	r3, #1
   17bfc:	cmp	r4, #0
   17c00:	blt	17c0c <__assert_fail@plt+0x6d80>
   17c04:	cmp	r3, #0
   17c08:	beq	17c38 <__assert_fail@plt+0x6dac>
   17c0c:	bl	10dc0 <__errno_location@plt>
   17c10:	mov	r3, #12
   17c14:	ldrd	r4, [sp]
   17c18:	ldr	r6, [sp, #8]
   17c1c:	add	sp, sp, #12
   17c20:	str	r3, [r0]
   17c24:	mov	r0, #0
   17c28:	pop	{pc}		; (ldr pc, [sp], #4)
   17c2c:	mov	r1, #1
   17c30:	mov	r0, r1
   17c34:	b	10c34 <calloc@plt>
   17c38:	ldrd	r4, [sp]
   17c3c:	ldr	r6, [sp, #8]
   17c40:	ldr	lr, [sp, #12]
   17c44:	add	sp, sp, #16
   17c48:	b	10c34 <calloc@plt>
   17c4c:	cmp	r0, #0
   17c50:	beq	17c5c <__assert_fail@plt+0x6dd0>
   17c54:	blt	17c64 <__assert_fail@plt+0x6dd8>
   17c58:	b	10d54 <malloc@plt>
   17c5c:	mov	r0, #1
   17c60:	b	10d54 <malloc@plt>
   17c64:	str	r4, [sp, #-8]!
   17c68:	str	lr, [sp, #4]
   17c6c:	bl	10dc0 <__errno_location@plt>
   17c70:	mov	r3, #12
   17c74:	ldr	r4, [sp]
   17c78:	add	sp, sp, #4
   17c7c:	str	r3, [r0]
   17c80:	mov	r0, #0
   17c84:	pop	{pc}		; (ldr pc, [sp], #4)
   17c88:	cmp	r0, #0
   17c8c:	beq	17cb4 <__assert_fail@plt+0x6e28>
   17c90:	cmp	r1, #0
   17c94:	str	r4, [sp, #-8]!
   17c98:	str	lr, [sp, #4]
   17c9c:	beq	17cbc <__assert_fail@plt+0x6e30>
   17ca0:	blt	17cd0 <__assert_fail@plt+0x6e44>
   17ca4:	ldr	r4, [sp]
   17ca8:	ldr	lr, [sp, #4]
   17cac:	add	sp, sp, #8
   17cb0:	b	10cd0 <realloc@plt>
   17cb4:	mov	r0, r1
   17cb8:	b	17c4c <__assert_fail@plt+0x6dc0>
   17cbc:	bl	17e7c <__assert_fail@plt+0x6ff0>
   17cc0:	ldr	r4, [sp]
   17cc4:	add	sp, sp, #4
   17cc8:	mov	r0, #0
   17ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   17cd0:	bl	10dc0 <__errno_location@plt>
   17cd4:	mov	r3, #12
   17cd8:	str	r3, [r0]
   17cdc:	b	17cc0 <__assert_fail@plt+0x6e34>
   17ce0:	strd	r4, [sp, #-16]!
   17ce4:	mov	r4, r0
   17ce8:	str	r6, [sp, #8]
   17cec:	str	lr, [sp, #12]
   17cf0:	bl	10d24 <__fpending@plt>
   17cf4:	ldr	r5, [r4]
   17cf8:	mov	r6, r0
   17cfc:	mov	r0, r4
   17d00:	bl	17d68 <__assert_fail@plt+0x6edc>
   17d04:	mov	r4, r0
   17d08:	and	r5, r5, #32
   17d0c:	cmp	r5, #0
   17d10:	bne	17d48 <__assert_fail@plt+0x6ebc>
   17d14:	cmp	r0, #0
   17d18:	beq	17d34 <__assert_fail@plt+0x6ea8>
   17d1c:	cmp	r6, #0
   17d20:	bne	17d60 <__assert_fail@plt+0x6ed4>
   17d24:	bl	10dc0 <__errno_location@plt>
   17d28:	ldr	r4, [r0]
   17d2c:	subs	r4, r4, #9
   17d30:	mvnne	r4, #0
   17d34:	mov	r0, r4
   17d38:	ldrd	r4, [sp]
   17d3c:	ldr	r6, [sp, #8]
   17d40:	add	sp, sp, #12
   17d44:	pop	{pc}		; (ldr pc, [sp], #4)
   17d48:	cmp	r0, #0
   17d4c:	bne	17d60 <__assert_fail@plt+0x6ed4>
   17d50:	bl	10dc0 <__errno_location@plt>
   17d54:	str	r4, [r0]
   17d58:	mvn	r4, #0
   17d5c:	b	17d34 <__assert_fail@plt+0x6ea8>
   17d60:	mvn	r4, #0
   17d64:	b	17d34 <__assert_fail@plt+0x6ea8>
   17d68:	strd	r4, [sp, #-12]!
   17d6c:	mov	r4, r0
   17d70:	str	lr, [sp, #8]
   17d74:	sub	sp, sp, #12
   17d78:	bl	10df0 <fileno@plt>
   17d7c:	cmp	r0, #0
   17d80:	mov	r0, r4
   17d84:	blt	17e08 <__assert_fail@plt+0x6f7c>
   17d88:	bl	10d6c <__freading@plt>
   17d8c:	cmp	r0, #0
   17d90:	bne	17dd4 <__assert_fail@plt+0x6f48>
   17d94:	mov	r0, r4
   17d98:	bl	17e1c <__assert_fail@plt+0x6f90>
   17d9c:	cmp	r0, #0
   17da0:	beq	17e04 <__assert_fail@plt+0x6f78>
   17da4:	bl	10dc0 <__errno_location@plt>
   17da8:	mov	r5, r0
   17dac:	mov	r0, r4
   17db0:	ldr	r4, [r5]
   17db4:	bl	10e08 <fclose@plt>
   17db8:	cmp	r4, #0
   17dbc:	mvnne	r0, #0
   17dc0:	strne	r4, [r5]
   17dc4:	add	sp, sp, #12
   17dc8:	ldrd	r4, [sp]
   17dcc:	add	sp, sp, #8
   17dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   17dd4:	mov	r0, r4
   17dd8:	bl	10df0 <fileno@plt>
   17ddc:	mov	r1, #1
   17de0:	mov	r2, #0
   17de4:	mov	r3, #0
   17de8:	str	r1, [sp]
   17dec:	bl	10d0c <lseek64@plt>
   17df0:	mvn	r3, #0
   17df4:	mvn	r2, #0
   17df8:	cmp	r1, r3
   17dfc:	cmpeq	r0, r2
   17e00:	bne	17d94 <__assert_fail@plt+0x6f08>
   17e04:	mov	r0, r4
   17e08:	add	sp, sp, #12
   17e0c:	ldrd	r4, [sp]
   17e10:	ldr	lr, [sp, #8]
   17e14:	add	sp, sp, #12
   17e18:	b	10e08 <fclose@plt>
   17e1c:	str	r4, [sp, #-8]!
   17e20:	subs	r4, r0, #0
   17e24:	str	lr, [sp, #4]
   17e28:	sub	sp, sp, #8
   17e2c:	beq	17e48 <__assert_fail@plt+0x6fbc>
   17e30:	bl	10d6c <__freading@plt>
   17e34:	cmp	r0, #0
   17e38:	beq	17e48 <__assert_fail@plt+0x6fbc>
   17e3c:	ldr	r3, [r4]
   17e40:	tst	r3, #256	; 0x100
   17e44:	bne	17e60 <__assert_fail@plt+0x6fd4>
   17e48:	mov	r0, r4
   17e4c:	add	sp, sp, #8
   17e50:	ldr	r4, [sp]
   17e54:	ldr	lr, [sp, #4]
   17e58:	add	sp, sp, #8
   17e5c:	b	10c64 <fflush@plt>
   17e60:	mov	r1, #1
   17e64:	mov	r2, #0
   17e68:	mov	r3, #0
   17e6c:	mov	r0, r4
   17e70:	str	r1, [sp]
   17e74:	bl	17edc <__assert_fail@plt+0x7050>
   17e78:	b	17e48 <__assert_fail@plt+0x6fbc>
   17e7c:	strd	r4, [sp, #-12]!
   17e80:	mov	r5, r0
   17e84:	str	lr, [sp, #8]
   17e88:	sub	sp, sp, #12
   17e8c:	bl	10dc0 <__errno_location@plt>
   17e90:	mov	r4, r0
   17e94:	mov	r2, #0
   17e98:	ldr	r3, [r4]
   17e9c:	mov	r0, r5
   17ea0:	str	r2, [r4]
   17ea4:	str	r3, [sp]
   17ea8:	str	r3, [sp, #4]
   17eac:	bl	10c70 <free@plt>
   17eb0:	ldr	r3, [r4]
   17eb4:	add	r2, sp, #8
   17eb8:	clz	r3, r3
   17ebc:	lsr	r3, r3, #5
   17ec0:	add	r3, r2, r3, lsl #2
   17ec4:	ldr	r3, [r3, #-8]
   17ec8:	str	r3, [r4]
   17ecc:	add	sp, sp, #12
   17ed0:	ldrd	r4, [sp]
   17ed4:	add	sp, sp, #8
   17ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   17edc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17ee0:	mov	r4, r0
   17ee4:	ldr	ip, [r0, #4]
   17ee8:	strd	r6, [sp, #8]
   17eec:	str	lr, [sp, #20]
   17ef0:	ldr	lr, [r0, #8]
   17ef4:	str	r8, [sp, #16]
   17ef8:	sub	sp, sp, #8
   17efc:	ldr	r5, [sp, #32]
   17f00:	cmp	lr, ip
   17f04:	beq	17f2c <__assert_fail@plt+0x70a0>
   17f08:	mov	r0, r4
   17f0c:	str	r5, [sp, #32]
   17f10:	add	sp, sp, #8
   17f14:	ldrd	r4, [sp]
   17f18:	ldrd	r6, [sp, #8]
   17f1c:	ldr	r8, [sp, #16]
   17f20:	ldr	lr, [sp, #20]
   17f24:	add	sp, sp, #24
   17f28:	b	10e14 <fseeko64@plt>
   17f2c:	ldr	ip, [r0, #16]
   17f30:	ldr	lr, [r0, #20]
   17f34:	cmp	lr, ip
   17f38:	bne	17f08 <__assert_fail@plt+0x707c>
   17f3c:	ldr	r8, [r0, #36]	; 0x24
   17f40:	cmp	r8, #0
   17f44:	bne	17f08 <__assert_fail@plt+0x707c>
   17f48:	mov	r6, r2
   17f4c:	mov	r7, r3
   17f50:	bl	10df0 <fileno@plt>
   17f54:	mov	r2, r6
   17f58:	mov	r3, r7
   17f5c:	str	r5, [sp]
   17f60:	bl	10d0c <lseek64@plt>
   17f64:	mvn	r3, #0
   17f68:	mvn	r2, #0
   17f6c:	cmp	r1, r3
   17f70:	cmpeq	r0, r2
   17f74:	beq	17fa4 <__assert_fail@plt+0x7118>
   17f78:	ldr	r3, [r4]
   17f7c:	strd	r0, [r4, #80]	; 0x50
   17f80:	bic	r3, r3, #16
   17f84:	str	r3, [r4]
   17f88:	mov	r0, r8
   17f8c:	add	sp, sp, #8
   17f90:	ldrd	r4, [sp]
   17f94:	ldrd	r6, [sp, #8]
   17f98:	ldr	r8, [sp, #16]
   17f9c:	add	sp, sp, #20
   17fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   17fa4:	mvn	r8, #0
   17fa8:	b	17f88 <__assert_fail@plt+0x70fc>
   17fac:	mov	r0, #14
   17fb0:	str	r4, [sp, #-8]!
   17fb4:	str	lr, [sp, #4]
   17fb8:	bl	10e38 <nl_langinfo@plt>
   17fbc:	cmp	r0, #0
   17fc0:	beq	17fe4 <__assert_fail@plt+0x7158>
   17fc4:	ldrb	r2, [r0]
   17fc8:	movw	r3, #37408	; 0x9220
   17fcc:	movt	r3, #1
   17fd0:	ldr	r4, [sp]
   17fd4:	add	sp, sp, #4
   17fd8:	cmp	r2, #0
   17fdc:	moveq	r0, r3
   17fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   17fe4:	ldr	r4, [sp]
   17fe8:	add	sp, sp, #4
   17fec:	movw	r0, #37408	; 0x9220
   17ff0:	movt	r0, #1
   17ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff8:	strd	r4, [sp, #-20]!	; 0xffffffec
   17ffc:	mov	r5, r2
   18000:	strd	r6, [sp, #8]
   18004:	subs	r6, r0, #0
   18008:	mov	r7, r1
   1800c:	str	lr, [sp, #16]
   18010:	sub	sp, sp, #12
   18014:	addeq	r6, sp, #4
   18018:	mov	r0, r6
   1801c:	bl	10d30 <mbrtowc@plt>
   18020:	cmp	r5, #0
   18024:	cmnne	r0, #3
   18028:	mov	r4, r0
   1802c:	bhi	18048 <__assert_fail@plt+0x71bc>
   18030:	mov	r0, r4
   18034:	add	sp, sp, #12
   18038:	ldrd	r4, [sp]
   1803c:	ldrd	r6, [sp, #8]
   18040:	add	sp, sp, #16
   18044:	pop	{pc}		; (ldr pc, [sp], #4)
   18048:	mov	r0, #0
   1804c:	bl	180a0 <__assert_fail@plt+0x7214>
   18050:	cmp	r0, #0
   18054:	bne	18030 <__assert_fail@plt+0x71a4>
   18058:	ldrb	r3, [r7]
   1805c:	mov	r4, #1
   18060:	str	r3, [r6]
   18064:	b	18030 <__assert_fail@plt+0x71a4>
   18068:	umull	r2, r3, r1, r2
   1806c:	cmp	r3, #0
   18070:	bne	1807c <__assert_fail@plt+0x71f0>
   18074:	mov	r1, r2
   18078:	b	17c88 <__assert_fail@plt+0x6dfc>
   1807c:	str	r4, [sp, #-8]!
   18080:	str	lr, [sp, #4]
   18084:	bl	10dc0 <__errno_location@plt>
   18088:	mov	r3, #12
   1808c:	ldr	r4, [sp]
   18090:	add	sp, sp, #4
   18094:	str	r3, [r0]
   18098:	mov	r0, #0
   1809c:	pop	{pc}		; (ldr pc, [sp], #4)
   180a0:	push	{lr}		; (str lr, [sp, #-4]!)
   180a4:	sub	sp, sp, #268	; 0x10c
   180a8:	movw	r2, #257	; 0x101
   180ac:	add	r1, sp, #4
   180b0:	bl	180f8 <__assert_fail@plt+0x726c>
   180b4:	cmp	r0, #0
   180b8:	movne	r0, #0
   180bc:	bne	180f0 <__assert_fail@plt+0x7264>
   180c0:	movw	r1, #37416	; 0x9228
   180c4:	movt	r1, #1
   180c8:	add	r0, sp, #4
   180cc:	bl	10c58 <strcmp@plt>
   180d0:	cmp	r0, #0
   180d4:	beq	180f0 <__assert_fail@plt+0x7264>
   180d8:	add	r0, sp, #4
   180dc:	movw	r1, #37420	; 0x922c
   180e0:	movt	r1, #1
   180e4:	bl	10c58 <strcmp@plt>
   180e8:	adds	r0, r0, #0
   180ec:	movne	r0, #1
   180f0:	add	sp, sp, #268	; 0x10c
   180f4:	pop	{pc}		; (ldr pc, [sp], #4)
   180f8:	strd	r4, [sp, #-16]!
   180fc:	mov	r5, r1
   18100:	mov	r1, #0
   18104:	mov	r4, r2
   18108:	str	r6, [sp, #8]
   1810c:	str	lr, [sp, #12]
   18110:	bl	10e20 <setlocale@plt>
   18114:	subs	r6, r0, #0
   18118:	beq	18198 <__assert_fail@plt+0x730c>
   1811c:	bl	10da8 <strlen@plt>
   18120:	cmp	r4, r0
   18124:	bhi	18144 <__assert_fail@plt+0x72b8>
   18128:	cmp	r4, #0
   1812c:	moveq	r0, #34	; 0x22
   18130:	bne	18168 <__assert_fail@plt+0x72dc>
   18134:	ldrd	r4, [sp]
   18138:	ldr	r6, [sp, #8]
   1813c:	add	sp, sp, #12
   18140:	pop	{pc}		; (ldr pc, [sp], #4)
   18144:	add	r2, r0, #1
   18148:	mov	r1, r6
   1814c:	mov	r0, r5
   18150:	bl	10c88 <memcpy@plt>
   18154:	ldrd	r4, [sp]
   18158:	mov	r0, #0
   1815c:	ldr	r6, [sp, #8]
   18160:	add	sp, sp, #12
   18164:	pop	{pc}		; (ldr pc, [sp], #4)
   18168:	sub	r4, r4, #1
   1816c:	mov	r1, r6
   18170:	mov	r2, r4
   18174:	mov	r0, r5
   18178:	bl	10c88 <memcpy@plt>
   1817c:	mov	r3, #0
   18180:	mov	r0, #34	; 0x22
   18184:	strb	r3, [r5, r4]
   18188:	ldrd	r4, [sp]
   1818c:	ldr	r6, [sp, #8]
   18190:	add	sp, sp, #12
   18194:	pop	{pc}		; (ldr pc, [sp], #4)
   18198:	cmp	r4, #0
   1819c:	mov	r0, #22
   181a0:	strbne	r6, [r5]
   181a4:	ldrd	r4, [sp]
   181a8:	ldr	r6, [sp, #8]
   181ac:	add	sp, sp, #12
   181b0:	pop	{pc}		; (ldr pc, [sp], #4)
   181b4:	mov	r1, #0
   181b8:	b	10e20 <setlocale@plt>
   181bc:	cmp	r3, #0
   181c0:	cmpeq	r2, #0
   181c4:	bne	181e8 <__assert_fail@plt+0x735c>
   181c8:	cmp	r1, #0
   181cc:	movlt	r1, #-2147483648	; 0x80000000
   181d0:	movlt	r0, #0
   181d4:	blt	181e4 <__assert_fail@plt+0x7358>
   181d8:	cmpeq	r0, #0
   181dc:	mvnne	r1, #-2147483648	; 0x80000000
   181e0:	mvnne	r0, #0
   181e4:	b	18290 <__assert_fail@plt+0x7404>
   181e8:	sub	sp, sp, #8
   181ec:	push	{sp, lr}
   181f0:	cmp	r1, #0
   181f4:	blt	18214 <__assert_fail@plt+0x7388>
   181f8:	cmp	r3, #0
   181fc:	blt	18248 <__assert_fail@plt+0x73bc>
   18200:	bl	182a0 <__assert_fail@plt+0x7414>
   18204:	ldr	lr, [sp, #4]
   18208:	add	sp, sp, #8
   1820c:	pop	{r2, r3}
   18210:	bx	lr
   18214:	rsbs	r0, r0, #0
   18218:	sbc	r1, r1, r1, lsl #1
   1821c:	cmp	r3, #0
   18220:	blt	1826c <__assert_fail@plt+0x73e0>
   18224:	bl	182a0 <__assert_fail@plt+0x7414>
   18228:	ldr	lr, [sp, #4]
   1822c:	add	sp, sp, #8
   18230:	pop	{r2, r3}
   18234:	rsbs	r0, r0, #0
   18238:	sbc	r1, r1, r1, lsl #1
   1823c:	rsbs	r2, r2, #0
   18240:	sbc	r3, r3, r3, lsl #1
   18244:	bx	lr
   18248:	rsbs	r2, r2, #0
   1824c:	sbc	r3, r3, r3, lsl #1
   18250:	bl	182a0 <__assert_fail@plt+0x7414>
   18254:	ldr	lr, [sp, #4]
   18258:	add	sp, sp, #8
   1825c:	pop	{r2, r3}
   18260:	rsbs	r0, r0, #0
   18264:	sbc	r1, r1, r1, lsl #1
   18268:	bx	lr
   1826c:	rsbs	r2, r2, #0
   18270:	sbc	r3, r3, r3, lsl #1
   18274:	bl	182a0 <__assert_fail@plt+0x7414>
   18278:	ldr	lr, [sp, #4]
   1827c:	add	sp, sp, #8
   18280:	pop	{r2, r3}
   18284:	rsbs	r2, r2, #0
   18288:	sbc	r3, r3, r3, lsl #1
   1828c:	bx	lr
   18290:	push	{r1, lr}
   18294:	mov	r0, #8
   18298:	bl	10c4c <raise@plt>
   1829c:	pop	{r1, pc}
   182a0:	cmp	r1, r3
   182a4:	cmpeq	r0, r2
   182a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182ac:	mov	r4, r0
   182b0:	movcc	r0, #0
   182b4:	mov	r5, r1
   182b8:	ldr	lr, [sp, #36]	; 0x24
   182bc:	movcc	r1, r0
   182c0:	bcc	183bc <__assert_fail@plt+0x7530>
   182c4:	cmp	r3, #0
   182c8:	clzeq	ip, r2
   182cc:	clzne	ip, r3
   182d0:	addeq	ip, ip, #32
   182d4:	cmp	r5, #0
   182d8:	clzeq	r1, r4
   182dc:	addeq	r1, r1, #32
   182e0:	clzne	r1, r5
   182e4:	sub	ip, ip, r1
   182e8:	sub	sl, ip, #32
   182ec:	lsl	r9, r3, ip
   182f0:	rsb	fp, ip, #32
   182f4:	orr	r9, r9, r2, lsl sl
   182f8:	orr	r9, r9, r2, lsr fp
   182fc:	lsl	r8, r2, ip
   18300:	cmp	r5, r9
   18304:	cmpeq	r4, r8
   18308:	movcc	r0, #0
   1830c:	movcc	r1, r0
   18310:	bcc	1832c <__assert_fail@plt+0x74a0>
   18314:	mov	r0, #1
   18318:	subs	r4, r4, r8
   1831c:	lsl	r1, r0, sl
   18320:	orr	r1, r1, r0, lsr fp
   18324:	lsl	r0, r0, ip
   18328:	sbc	r5, r5, r9
   1832c:	cmp	ip, #0
   18330:	beq	183bc <__assert_fail@plt+0x7530>
   18334:	lsr	r6, r8, #1
   18338:	orr	r6, r6, r9, lsl #31
   1833c:	lsr	r7, r9, #1
   18340:	mov	r2, ip
   18344:	b	18368 <__assert_fail@plt+0x74dc>
   18348:	subs	r3, r4, r6
   1834c:	sbc	r8, r5, r7
   18350:	adds	r3, r3, r3
   18354:	adc	r8, r8, r8
   18358:	adds	r4, r3, #1
   1835c:	adc	r5, r8, #0
   18360:	subs	r2, r2, #1
   18364:	beq	18384 <__assert_fail@plt+0x74f8>
   18368:	cmp	r5, r7
   1836c:	cmpeq	r4, r6
   18370:	bcs	18348 <__assert_fail@plt+0x74bc>
   18374:	adds	r4, r4, r4
   18378:	adc	r5, r5, r5
   1837c:	subs	r2, r2, #1
   18380:	bne	18368 <__assert_fail@plt+0x74dc>
   18384:	lsr	r3, r4, ip
   18388:	orr	r3, r3, r5, lsl fp
   1838c:	lsr	r2, r5, ip
   18390:	orr	r3, r3, r5, lsr sl
   18394:	adds	r0, r0, r4
   18398:	mov	r4, r3
   1839c:	lsl	r3, r2, ip
   183a0:	orr	r3, r3, r4, lsl sl
   183a4:	lsl	ip, r4, ip
   183a8:	orr	r3, r3, r4, lsr fp
   183ac:	adc	r1, r1, r5
   183b0:	subs	r0, r0, ip
   183b4:	mov	r5, r2
   183b8:	sbc	r1, r1, r3
   183bc:	cmp	lr, #0
   183c0:	strdne	r4, [lr]
   183c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   183cc:	mov	r7, r0
   183d0:	ldr	r6, [pc, #72]	; 18420 <__assert_fail@plt+0x7594>
   183d4:	ldr	r5, [pc, #72]	; 18424 <__assert_fail@plt+0x7598>
   183d8:	add	r6, pc, r6
   183dc:	add	r5, pc, r5
   183e0:	sub	r6, r6, r5
   183e4:	mov	r8, r1
   183e8:	mov	r9, r2
   183ec:	bl	10c14 <calloc@plt-0x20>
   183f0:	asrs	r6, r6, #2
   183f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   183f8:	mov	r4, #0
   183fc:	add	r4, r4, #1
   18400:	ldr	r3, [r5], #4
   18404:	mov	r2, r9
   18408:	mov	r1, r8
   1840c:	mov	r0, r7
   18410:	blx	r3
   18414:	cmp	r6, r4
   18418:	bne	183fc <__assert_fail@plt+0x7570>
   1841c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18420:	andeq	r1, r1, r4, lsr fp
   18424:	andeq	r1, r1, ip, lsr #22
   18428:	bx	lr
   1842c:	ldr	r3, [pc, #12]	; 18440 <__assert_fail@plt+0x75b4>
   18430:	mov	r1, #0
   18434:	add	r3, pc, r3
   18438:	ldr	r2, [r3]
   1843c:	b	10dcc <__cxa_atexit@plt>
   18440:	andeq	r1, r1, r4, lsr #25

Disassembly of section .fini:

00018444 <.fini>:
   18444:	push	{r3, lr}
   18448:	pop	{r3, pc}
