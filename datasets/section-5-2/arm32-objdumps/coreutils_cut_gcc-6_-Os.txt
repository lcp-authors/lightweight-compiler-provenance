
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010e44 <.init>:
   10e44:	push	{r3, lr}
   10e48:	bl	11510 <__assert_fail@plt+0x3e8>
   10e4c:	pop	{r3, pc}

Disassembly of section .plt:

00010e50 <calloc@plt-0x14>:
   10e50:	push	{lr}		; (str lr, [sp, #-4]!)
   10e54:	ldr	lr, [pc, #4]	; 10e60 <calloc@plt-0x4>
   10e58:	add	lr, pc, lr
   10e5c:	ldr	pc, [lr, #8]!
   10e60:	andeq	r6, r1, r0, lsr #3

00010e64 <calloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e70 <fputs_unlocked@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #408]!	; 0x198

00010e7c <raise@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #400]!	; 0x190

00010e88 <strcmp@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #392]!	; 0x188

00010e94 <posix_fadvise64@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #384]!	; 0x180

00010ea0 <fflush@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #376]!	; 0x178

00010eac <memmove@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #368]!	; 0x170

00010eb8 <free@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #360]!	; 0x168

00010ec4 <ferror@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #352]!	; 0x160

00010ed0 <_exit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #344]!	; 0x158

00010edc <memcpy@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #336]!	; 0x150

00010ee8 <mbsinit@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #328]!	; 0x148

00010ef4 <fwrite_unlocked@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #320]!	; 0x140

00010f00 <memcmp@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #312]!	; 0x138

00010f0c <fputc_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #304]!	; 0x130

00010f18 <getc_unlocked@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #296]!	; 0x128

00010f24 <dcgettext@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #288]!	; 0x120

00010f30 <realloc@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #280]!	; 0x118

00010f3c <textdomain@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #272]!	; 0x110

00010f48 <iswprint@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #264]!	; 0x108

00010f54 <lseek64@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #256]!	; 0x100

00010f60 <__ctype_get_mb_cur_max@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #248]!	; 0xf8

00010f6c <__fpending@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #240]!	; 0xf0

00010f78 <ferror_unlocked@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #232]!	; 0xe8

00010f84 <mbrtowc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #224]!	; 0xe0

00010f90 <error@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #216]!	; 0xd8

00010f9c <malloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #208]!	; 0xd0

00010fa8 <__libc_start_main@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #200]!	; 0xc8

00010fb4 <__freading@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #192]!	; 0xc0

00010fc0 <__gmon_start__@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #184]!	; 0xb8

00010fcc <getopt_long@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #176]!	; 0xb0

00010fd8 <__ctype_b_loc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #168]!	; 0xa8

00010fe4 <exit@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #160]!	; 0xa0

00010ff0 <strlen@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #152]!	; 0x98

00010ffc <ungetc@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #144]!	; 0x90

00011008 <__errno_location@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #136]!	; 0x88

00011014 <__cxa_atexit@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #128]!	; 0x80

00011020 <memset@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #120]!	; 0x78

0001102c <fgetc@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #112]!	; 0x70

00011038 <__printf_chk@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #104]!	; 0x68

00011044 <fileno@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #96]!	; 0x60

00011050 <__fprintf_chk@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #88]!	; 0x58

0001105c <memchr@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #80]!	; 0x50

00011068 <fclose@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #72]!	; 0x48

00011074 <fseeko64@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #64]!	; 0x40

00011080 <__fread_chk@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #56]!	; 0x38

0001108c <setlocale@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #48]!	; 0x30

00011098 <strrchr@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #40]!	; 0x28

000110a4 <nl_langinfo@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #32]!

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #24]!

000110bc <fopen64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #16]!

000110c8 <qsort@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #8]!

000110d4 <bindtextdomain@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #0]!

000110e0 <fputs@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #4088]!	; 0xff8

000110ec <strncmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #4080]!	; 0xff0

000110f8 <abort@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #4072]!	; 0xfe8

00011104 <feof_unlocked@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #4064]!	; 0xfe0

00011110 <putchar_unlocked@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #4056]!	; 0xfd8

0001111c <strspn@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #4048]!	; 0xfd0

00011128 <__assert_fail@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #4040]!	; 0xfc8

Disassembly of section .text:

00011138 <.text>:
   11138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1113c:	mov	r9, r0
   11140:	sub	sp, sp, #20
   11144:	ldr	r0, [r1]
   11148:	mov	sl, r1
   1114c:	bl	12b34 <__assert_fail@plt+0x1a0c>
   11150:	ldr	r1, [pc, #780]	; 11464 <__assert_fail@plt+0x33c>
   11154:	mov	r0, #6
   11158:	mov	r5, #0
   1115c:	bl	1108c <setlocale@plt>
   11160:	ldr	r4, [pc, #768]	; 11468 <__assert_fail@plt+0x340>
   11164:	ldr	r1, [pc, #768]	; 1146c <__assert_fail@plt+0x344>
   11168:	ldr	r0, [pc, #768]	; 11470 <__assert_fail@plt+0x348>
   1116c:	ldr	fp, [pc, #768]	; 11474 <__assert_fail@plt+0x34c>
   11170:	bl	110d4 <bindtextdomain@plt>
   11174:	mov	r8, r5
   11178:	ldr	r0, [pc, #752]	; 11470 <__assert_fail@plt+0x348>
   1117c:	mov	r7, r5
   11180:	bl	10f3c <textdomain@plt>
   11184:	ldr	r0, [pc, #748]	; 11478 <__assert_fail@plt+0x350>
   11188:	bl	154b8 <__assert_fail@plt+0x4390>
   1118c:	strb	r5, [r4, #4]
   11190:	strb	r5, [r4, #16]
   11194:	strb	r5, [r4, #29]
   11198:	mov	r6, #0
   1119c:	str	r6, [sp]
   111a0:	ldr	r3, [pc, #724]	; 1147c <__assert_fail@plt+0x354>
   111a4:	ldr	r2, [pc, #724]	; 11480 <__assert_fail@plt+0x358>
   111a8:	mov	r1, sl
   111ac:	mov	r0, r9
   111b0:	bl	10fcc <getopt_long@plt>
   111b4:	cmn	r0, #1
   111b8:	bne	11200 <__assert_fail@plt+0xd8>
   111bc:	cmp	r5, r6
   111c0:	moveq	r2, #5
   111c4:	ldreq	r1, [pc, #696]	; 11484 <__assert_fail@plt+0x35c>
   111c8:	beq	112c4 <__assert_fail@plt+0x19c>
   111cc:	cmp	r8, #0
   111d0:	beq	11368 <__assert_fail@plt+0x240>
   111d4:	cmp	r7, #0
   111d8:	movne	r2, #5
   111dc:	ldrne	r1, [pc, #676]	; 11488 <__assert_fail@plt+0x360>
   111e0:	bne	112c4 <__assert_fail@plt+0x19c>
   111e4:	ldrb	r3, [r4, #4]
   111e8:	cmp	r3, #0
   111ec:	movne	r2, #5
   111f0:	ldrne	r1, [pc, #660]	; 1148c <__assert_fail@plt+0x364>
   111f4:	bne	112c4 <__assert_fail@plt+0x19c>
   111f8:	mov	r1, #4
   111fc:	b	1136c <__assert_fail@plt+0x244>
   11200:	cmp	r0, #102	; 0x66
   11204:	beq	112b4 <__assert_fail@plt+0x18c>
   11208:	bgt	11268 <__assert_fail@plt+0x140>
   1120c:	cmp	r0, #99	; 0x63
   11210:	bgt	11238 <__assert_fail@plt+0x110>
   11214:	cmp	r0, #98	; 0x62
   11218:	bge	112b0 <__assert_fail@plt+0x188>
   1121c:	cmn	r0, #3
   11220:	beq	11328 <__assert_fail@plt+0x200>
   11224:	cmn	r0, #2
   11228:	moveq	r0, r6
   1122c:	beq	11234 <__assert_fail@plt+0x10c>
   11230:	mov	r0, #1
   11234:	bl	11bac <__assert_fail@plt+0xa84>
   11238:	cmp	r0, #100	; 0x64
   1123c:	bne	11230 <__assert_fail@plt+0x108>
   11240:	ldr	r2, [fp]
   11244:	ldrb	r3, [r2]
   11248:	cmp	r3, #0
   1124c:	beq	112e8 <__assert_fail@plt+0x1c0>
   11250:	ldrb	r2, [r2, #1]
   11254:	cmp	r2, #0
   11258:	beq	112e8 <__assert_fail@plt+0x1c0>
   1125c:	mov	r2, #5
   11260:	ldr	r1, [pc, #552]	; 11490 <__assert_fail@plt+0x368>
   11264:	b	112c4 <__assert_fail@plt+0x19c>
   11268:	cmp	r0, #122	; 0x7a
   1126c:	beq	1131c <__assert_fail@plt+0x1f4>
   11270:	bgt	11290 <__assert_fail@plt+0x168>
   11274:	cmp	r0, #110	; 0x6e
   11278:	beq	11198 <__assert_fail@plt+0x70>
   1127c:	cmp	r0, #115	; 0x73
   11280:	bne	11230 <__assert_fail@plt+0x108>
   11284:	mov	r3, #1
   11288:	strb	r3, [r4, #4]
   1128c:	b	11198 <__assert_fail@plt+0x70>
   11290:	cmp	r0, #256	; 0x100
   11294:	beq	112f4 <__assert_fail@plt+0x1cc>
   11298:	ldr	r3, [pc, #500]	; 11494 <__assert_fail@plt+0x36c>
   1129c:	cmp	r0, r3
   112a0:	bne	11230 <__assert_fail@plt+0x108>
   112a4:	mov	r3, #1
   112a8:	strb	r3, [r4, #30]
   112ac:	b	11198 <__assert_fail@plt+0x70>
   112b0:	mov	r8, #1
   112b4:	cmp	r5, #0
   112b8:	beq	112e0 <__assert_fail@plt+0x1b8>
   112bc:	ldr	r1, [pc, #468]	; 11498 <__assert_fail@plt+0x370>
   112c0:	mov	r2, #5
   112c4:	mov	r0, #0
   112c8:	bl	10f24 <dcgettext@plt>
   112cc:	mov	r1, #0
   112d0:	mov	r2, r0
   112d4:	mov	r0, r1
   112d8:	bl	10f90 <error@plt>
   112dc:	b	11230 <__assert_fail@plt+0x108>
   112e0:	ldr	r5, [fp]
   112e4:	b	11198 <__assert_fail@plt+0x70>
   112e8:	strb	r3, [r4, #16]
   112ec:	mov	r7, #1
   112f0:	b	11198 <__assert_fail@plt+0x70>
   112f4:	ldr	r6, [fp]
   112f8:	ldrb	r3, [r6]
   112fc:	cmp	r3, #0
   11300:	moveq	r0, #1
   11304:	beq	11310 <__assert_fail@plt+0x1e8>
   11308:	mov	r0, r6
   1130c:	bl	10ff0 <strlen@plt>
   11310:	str	r0, [r4, #20]
   11314:	str	r6, [r4, #24]
   11318:	b	11198 <__assert_fail@plt+0x70>
   1131c:	ldr	r3, [pc, #376]	; 1149c <__assert_fail@plt+0x374>
   11320:	strb	r6, [r3]
   11324:	b	11198 <__assert_fail@plt+0x70>
   11328:	ldr	r3, [pc, #368]	; 114a0 <__assert_fail@plt+0x378>
   1132c:	ldr	r0, [pc, #368]	; 114a4 <__assert_fail@plt+0x37c>
   11330:	str	r3, [sp, #8]
   11334:	ldr	r3, [pc, #364]	; 114a8 <__assert_fail@plt+0x380>
   11338:	str	r6, [sp, #12]
   1133c:	str	r3, [sp, #4]
   11340:	ldr	r3, [pc, #356]	; 114ac <__assert_fail@plt+0x384>
   11344:	ldr	r2, [pc, #356]	; 114b0 <__assert_fail@plt+0x388>
   11348:	str	r3, [sp]
   1134c:	ldr	r3, [pc, #352]	; 114b4 <__assert_fail@plt+0x38c>
   11350:	ldr	r0, [r0]
   11354:	ldr	r1, [pc, #348]	; 114b8 <__assert_fail@plt+0x390>
   11358:	ldr	r3, [r3]
   1135c:	bl	145b4 <__assert_fail@plt+0x348c>
   11360:	mov	r0, r6
   11364:	bl	10fe4 <exit@plt>
   11368:	mov	r1, r8
   1136c:	ldrb	r3, [r4, #30]
   11370:	mov	r0, r5
   11374:	ldr	r6, [pc, #320]	; 114bc <__assert_fail@plt+0x394>
   11378:	cmp	r3, #0
   1137c:	moveq	r3, #0
   11380:	movne	r3, #2
   11384:	orr	r1, r1, r3
   11388:	bl	11f54 <__assert_fail@plt+0xe2c>
   1138c:	cmp	r7, #0
   11390:	moveq	r3, #9
   11394:	ldr	r2, [pc, #292]	; 114c0 <__assert_fail@plt+0x398>
   11398:	strbeq	r3, [r4, #16]
   1139c:	ldr	r3, [r4, #24]
   113a0:	cmp	r3, #0
   113a4:	ldrbeq	r3, [r4, #16]
   113a8:	strbeq	r3, [r4, #28]
   113ac:	ldreq	r3, [pc, #272]	; 114c4 <__assert_fail@plt+0x39c>
   113b0:	streq	r3, [r4, #24]
   113b4:	moveq	r3, #1
   113b8:	streq	r3, [r4, #20]
   113bc:	ldr	r3, [pc, #260]	; 114c8 <__assert_fail@plt+0x3a0>
   113c0:	cmp	r8, #0
   113c4:	moveq	r8, r3
   113c8:	ldr	r3, [r6]
   113cc:	movne	r8, r2
   113d0:	cmp	r9, r3
   113d4:	movne	r5, #1
   113d8:	bne	11454 <__assert_fail@plt+0x32c>
   113dc:	mov	r1, r8
   113e0:	ldr	r0, [pc, #228]	; 114cc <__assert_fail@plt+0x3a4>
   113e4:	bl	11ab4 <__assert_fail@plt+0x98c>
   113e8:	mov	r5, r0
   113ec:	ldrb	r3, [r4, #29]
   113f0:	cmp	r3, #0
   113f4:	beq	11424 <__assert_fail@plt+0x2fc>
   113f8:	ldr	r3, [pc, #208]	; 114d0 <__assert_fail@plt+0x3a8>
   113fc:	ldr	r0, [r3]
   11400:	bl	12608 <__assert_fail@plt+0x14e0>
   11404:	cmn	r0, #1
   11408:	bne	11424 <__assert_fail@plt+0x2fc>
   1140c:	bl	11008 <__errno_location@plt>
   11410:	ldr	r2, [pc, #180]	; 114cc <__assert_fail@plt+0x3a4>
   11414:	mov	r5, #0
   11418:	ldr	r1, [r0]
   1141c:	mov	r0, #0
   11420:	bl	10f90 <error@plt>
   11424:	eor	r0, r5, #1
   11428:	uxtb	r0, r0
   1142c:	add	sp, sp, #20
   11430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11434:	ldr	r0, [sl, r3, lsl #2]
   11438:	mov	r1, r8
   1143c:	bl	11ab4 <__assert_fail@plt+0x98c>
   11440:	ldr	r3, [r6]
   11444:	add	r3, r3, #1
   11448:	str	r3, [r6]
   1144c:	and	r5, r5, r0
   11450:	uxtb	r5, r5
   11454:	ldr	r3, [r6]
   11458:	cmp	r9, r3
   1145c:	bgt	11434 <__assert_fail@plt+0x30c>
   11460:	b	113ec <__assert_fail@plt+0x2c4>
   11464:	andeq	r5, r1, r2, lsr sp
   11468:	andeq	r7, r2, r0, lsl #3
   1146c:	andeq	r5, r1, r3, lsr sp
   11470:	muleq	r1, r0, ip
   11474:	andeq	r7, r2, r8, ror r1
   11478:	andeq	r2, r1, r8, ror #9
   1147c:	andeq	r5, r1, r0, lsr #10
   11480:			; <UNDEFINED> instruction: 0x00015dbf
   11484:	andeq	r5, r1, fp, asr #27
   11488:	andeq	r5, r1, r3, lsl #28
   1148c:	andeq	r5, r1, r5, asr #28
   11490:	andeq	r5, r1, sl, ror #26
   11494:	andeq	r0, r0, r1, lsl #2
   11498:	andeq	r5, r1, fp, asr #26
   1149c:	andeq	r7, r2, r8, lsl #2
   114a0:	muleq	r1, r3, sp
   114a4:	andeq	r7, r2, r4, ror r1
   114a8:	andeq	r5, r1, r0, lsr #27
   114ac:			; <UNDEFINED> instruction: 0x00015db0
   114b0:	andeq	r5, r1, ip, lsl #25
   114b4:	andeq	r7, r2, ip, lsl #2
   114b8:	andeq	r5, r1, r7, ror #11
   114bc:	andeq	r7, r2, r0, ror #2
   114c0:	andeq	r1, r1, r8, lsr #19
   114c4:	muleq	r2, ip, r1
   114c8:	andeq	r1, r1, r4, lsr r6
   114cc:	andeq	r5, r1, r4, ror #31
   114d0:	andeq	r7, r2, r0, ror r1
   114d4:	mov	fp, #0
   114d8:	mov	lr, #0
   114dc:	pop	{r1}		; (ldr r1, [sp], #4)
   114e0:	mov	r2, sp
   114e4:	push	{r2}		; (str r2, [sp, #-4]!)
   114e8:	push	{r0}		; (str r0, [sp, #-4]!)
   114ec:	ldr	ip, [pc, #16]	; 11504 <__assert_fail@plt+0x3dc>
   114f0:	push	{ip}		; (str ip, [sp, #-4]!)
   114f4:	ldr	r0, [pc, #12]	; 11508 <__assert_fail@plt+0x3e0>
   114f8:	ldr	r3, [pc, #12]	; 1150c <__assert_fail@plt+0x3e4>
   114fc:	bl	10fa8 <__libc_start_main@plt>
   11500:	bl	110f8 <abort@plt>
   11504:			; <UNDEFINED> instruction: 0x000154b4
   11508:	andeq	r1, r1, r8, lsr r1
   1150c:	andeq	r5, r1, r4, asr r4
   11510:	ldr	r3, [pc, #20]	; 1152c <__assert_fail@plt+0x404>
   11514:	ldr	r2, [pc, #20]	; 11530 <__assert_fail@plt+0x408>
   11518:	add	r3, pc, r3
   1151c:	ldr	r2, [r3, r2]
   11520:	cmp	r2, #0
   11524:	bxeq	lr
   11528:	b	10fc0 <__gmon_start__@plt>
   1152c:	andeq	r5, r1, r0, ror #21
   11530:	strdeq	r0, [r0], -ip
   11534:	ldr	r3, [pc, #28]	; 11558 <__assert_fail@plt+0x430>
   11538:	ldr	r0, [pc, #28]	; 1155c <__assert_fail@plt+0x434>
   1153c:	sub	r3, r3, r0
   11540:	cmp	r3, #6
   11544:	bxls	lr
   11548:	ldr	r3, [pc, #16]	; 11560 <__assert_fail@plt+0x438>
   1154c:	cmp	r3, #0
   11550:	bxeq	lr
   11554:	bx	r3
   11558:	andeq	r7, r2, r7, asr r1
   1155c:	andeq	r7, r2, r4, asr r1
   11560:	andeq	r0, r0, r0
   11564:	ldr	r1, [pc, #36]	; 11590 <__assert_fail@plt+0x468>
   11568:	ldr	r0, [pc, #36]	; 11594 <__assert_fail@plt+0x46c>
   1156c:	sub	r1, r1, r0
   11570:	asr	r1, r1, #2
   11574:	add	r1, r1, r1, lsr #31
   11578:	asrs	r1, r1, #1
   1157c:	bxeq	lr
   11580:	ldr	r3, [pc, #16]	; 11598 <__assert_fail@plt+0x470>
   11584:	cmp	r3, #0
   11588:	bxeq	lr
   1158c:	bx	r3
   11590:	andeq	r7, r2, r4, asr r1
   11594:	andeq	r7, r2, r4, asr r1
   11598:	andeq	r0, r0, r0
   1159c:	push	{r4, lr}
   115a0:	ldr	r4, [pc, #24]	; 115c0 <__assert_fail@plt+0x498>
   115a4:	ldrb	r3, [r4]
   115a8:	cmp	r3, #0
   115ac:	popne	{r4, pc}
   115b0:	bl	11534 <__assert_fail@plt+0x40c>
   115b4:	mov	r3, #1
   115b8:	strb	r3, [r4]
   115bc:	pop	{r4, pc}
   115c0:	andeq	r7, r2, ip, ror r1
   115c4:	ldr	r0, [pc, #40]	; 115f4 <__assert_fail@plt+0x4cc>
   115c8:	ldr	r3, [r0]
   115cc:	cmp	r3, #0
   115d0:	bne	115d8 <__assert_fail@plt+0x4b0>
   115d4:	b	11564 <__assert_fail@plt+0x43c>
   115d8:	ldr	r3, [pc, #24]	; 115f8 <__assert_fail@plt+0x4d0>
   115dc:	cmp	r3, #0
   115e0:	beq	115d4 <__assert_fail@plt+0x4ac>
   115e4:	push	{r4, lr}
   115e8:	blx	r3
   115ec:	pop	{r4, lr}
   115f0:	b	11564 <__assert_fail@plt+0x43c>
   115f4:	andeq	r6, r2, r4, lsl pc
   115f8:	andeq	r0, r0, r0
   115fc:	push	{r4, r5, lr}
   11600:	ldr	r2, [pc, #40]	; 11630 <__assert_fail@plt+0x508>
   11604:	ldrd	r4, [r0]
   11608:	ldr	r3, [r2]
   1160c:	adds	r4, r4, #1
   11610:	adc	r5, r5, #0
   11614:	strd	r4, [r0]
   11618:	ldrd	r0, [r3, #8]
   1161c:	cmp	r5, r1
   11620:	cmpeq	r4, r0
   11624:	addhi	r3, r3, #16
   11628:	strhi	r3, [r2]
   1162c:	pop	{r4, r5, pc}
   11630:	andeq	r7, r2, r0, lsl #3
   11634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11638:	sub	sp, sp, #36	; 0x24
   1163c:	ldr	r9, [pc, #832]	; 11984 <__assert_fail@plt+0x85c>
   11640:	ldr	r4, [pc, #832]	; 11988 <__assert_fail@plt+0x860>
   11644:	mov	fp, #1
   11648:	ldr	r3, [r9]
   1164c:	mov	sl, #0
   11650:	mov	r5, r0
   11654:	str	fp, [sp, #24]
   11658:	str	sl, [sp, #28]
   1165c:	str	r3, [r4]
   11660:	bl	10f18 <getc_unlocked@plt>
   11664:	cmn	r0, #1
   11668:	beq	1197c <__assert_fail@plt+0x854>
   1166c:	mov	r1, r5
   11670:	bl	10ffc <ungetc@plt>
   11674:	ldr	r3, [r4]
   11678:	ldr	r7, [pc, #780]	; 1198c <__assert_fail@plt+0x864>
   1167c:	mov	r6, sl
   11680:	ldrd	r2, [r3]
   11684:	mov	r8, sl
   11688:	str	sl, [sp, #20]
   1168c:	cmp	r3, #0
   11690:	ldrb	r3, [r4, #4]
   11694:	cmpeq	r2, #1
   11698:	movhi	r2, fp
   1169c:	movls	r2, sl
   116a0:	eor	r3, r2, r3
   116a4:	str	r3, [sp, #16]
   116a8:	ldrd	r2, [sp, #24]
   116ac:	cmp	r3, #0
   116b0:	ldr	r3, [sp, #16]
   116b4:	cmpeq	r2, #1
   116b8:	movne	sl, #0
   116bc:	andeq	sl, r3, #1
   116c0:	cmp	sl, #0
   116c4:	beq	11800 <__assert_fail@plt+0x6d8>
   116c8:	ldrb	r3, [r7]
   116cc:	ldr	r1, [pc, #700]	; 11990 <__assert_fail@plt+0x868>
   116d0:	mov	r2, #0
   116d4:	str	r3, [sp, #4]
   116d8:	ldrb	r3, [r4, #16]
   116dc:	str	r5, [sp, #8]
   116e0:	add	r0, r1, #4
   116e4:	str	r3, [sp]
   116e8:	mvn	r3, #0
   116ec:	bl	127e8 <__assert_fail@plt+0x16c0>
   116f0:	subs	r2, r0, #0
   116f4:	bge	1172c <__assert_fail@plt+0x604>
   116f8:	ldr	r0, [r4, #12]
   116fc:	bl	12700 <__assert_fail@plt+0x15d8>
   11700:	mov	r3, #0
   11704:	mov	r0, r5
   11708:	str	r3, [r4, #12]
   1170c:	bl	10f78 <ferror_unlocked@plt>
   11710:	cmp	r0, #0
   11714:	bne	1197c <__assert_fail@plt+0x854>
   11718:	mov	r0, r5
   1171c:	bl	11104 <feof_unlocked@plt>
   11720:	cmp	r0, #0
   11724:	bne	1197c <__assert_fail@plt+0x854>
   11728:	bl	14b10 <__assert_fail@plt+0x39e8>
   1172c:	bne	11744 <__assert_fail@plt+0x61c>
   11730:	ldr	r3, [pc, #604]	; 11994 <__assert_fail@plt+0x86c>
   11734:	ldr	r2, [pc, #604]	; 11998 <__assert_fail@plt+0x870>
   11738:	ldr	r1, [pc, #604]	; 1199c <__assert_fail@plt+0x874>
   1173c:	ldr	r0, [pc, #604]	; 119a0 <__assert_fail@plt+0x878>
   11740:	bl	11128 <__assert_fail@plt>
   11744:	ldr	r0, [r4, #12]
   11748:	sub	r8, r2, #1
   1174c:	ldrb	r3, [r4, #16]
   11750:	ldrb	r1, [r0, r8]
   11754:	cmp	r1, r3
   11758:	beq	117a0 <__assert_fail@plt+0x678>
   1175c:	ldrb	r3, [r4, #4]
   11760:	cmp	r3, #0
   11764:	movne	sl, #0
   11768:	bne	11798 <__assert_fail@plt+0x670>
   1176c:	ldr	r3, [pc, #560]	; 119a4 <__assert_fail@plt+0x87c>
   11770:	mov	r1, #1
   11774:	ldr	r3, [r3]
   11778:	bl	10ef4 <fwrite_unlocked@plt>
   1177c:	ldr	r3, [r4, #12]
   11780:	ldrb	r0, [r7]
   11784:	ldrb	r3, [r3, r8]
   11788:	cmp	r3, r0
   1178c:	beq	11794 <__assert_fail@plt+0x66c>
   11790:	bl	11110 <putchar_unlocked@plt>
   11794:	ldrb	sl, [r7]
   11798:	mov	r8, sl
   1179c:	b	116a8 <__assert_fail@plt+0x580>
   117a0:	ldr	r3, [r4]
   117a4:	ldrd	r2, [r3]
   117a8:	cmp	r3, #0
   117ac:	cmpeq	r2, #1
   117b0:	bhi	117f4 <__assert_fail@plt+0x6cc>
   117b4:	ldr	r3, [pc, #488]	; 119a4 <__assert_fail@plt+0x87c>
   117b8:	mov	r2, r8
   117bc:	mov	r1, #1
   117c0:	ldr	r3, [r3]
   117c4:	bl	10ef4 <fwrite_unlocked@plt>
   117c8:	ldrb	r2, [r4, #16]
   117cc:	ldrb	r3, [r7]
   117d0:	cmp	r2, r3
   117d4:	bne	117f0 <__assert_fail@plt+0x6c8>
   117d8:	mov	r0, r5
   117dc:	bl	10f18 <getc_unlocked@plt>
   117e0:	cmn	r0, #1
   117e4:	beq	117f4 <__assert_fail@plt+0x6cc>
   117e8:	mov	r1, r5
   117ec:	bl	10ffc <ungetc@plt>
   117f0:	mov	r6, sl
   117f4:	add	r0, sp, #24
   117f8:	bl	115fc <__assert_fail@plt+0x4d4>
   117fc:	mov	r8, #0
   11800:	ldr	r3, [r4]
   11804:	ldrd	r0, [r3]
   11808:	ldrd	r2, [sp, #24]
   1180c:	cmp	r3, r1
   11810:	cmpeq	r2, r0
   11814:	bcc	1187c <__assert_fail@plt+0x754>
   11818:	cmp	r6, #0
   1181c:	beq	11838 <__assert_fail@plt+0x710>
   11820:	ldr	r3, [pc, #380]	; 119a4 <__assert_fail@plt+0x87c>
   11824:	ldr	r2, [r4, #20]
   11828:	mov	r1, #1
   1182c:	ldr	r3, [r3]
   11830:	ldr	r0, [r4, #24]
   11834:	bl	10ef4 <fwrite_unlocked@plt>
   11838:	mov	r0, r5
   1183c:	bl	10f18 <getc_unlocked@plt>
   11840:	ldrb	r3, [r4, #16]
   11844:	cmp	r0, r3
   11848:	mov	sl, r0
   1184c:	beq	11864 <__assert_fail@plt+0x73c>
   11850:	ldrb	r3, [r7]
   11854:	cmp	r0, r3
   11858:	beq	11864 <__assert_fail@plt+0x73c>
   1185c:	cmn	r0, #1
   11860:	bne	1186c <__assert_fail@plt+0x744>
   11864:	mov	r6, #1
   11868:	b	118a8 <__assert_fail@plt+0x780>
   1186c:	bl	11110 <putchar_unlocked@plt>
   11870:	mov	r8, sl
   11874:	b	11838 <__assert_fail@plt+0x710>
   11878:	mov	r8, sl
   1187c:	mov	r0, r5
   11880:	bl	10f18 <getc_unlocked@plt>
   11884:	ldrb	r3, [r4, #16]
   11888:	cmp	r0, r3
   1188c:	mov	sl, r0
   11890:	beq	118a8 <__assert_fail@plt+0x780>
   11894:	ldrb	r3, [r7]
   11898:	cmp	r0, r3
   1189c:	beq	118a8 <__assert_fail@plt+0x780>
   118a0:	cmn	r0, #1
   118a4:	bne	11878 <__assert_fail@plt+0x750>
   118a8:	ldrb	r2, [r4, #16]
   118ac:	ldrb	r3, [r7]
   118b0:	cmp	r3, r2
   118b4:	bne	118dc <__assert_fail@plt+0x7b4>
   118b8:	cmp	sl, r3
   118bc:	bne	118dc <__assert_fail@plt+0x7b4>
   118c0:	mov	r0, r5
   118c4:	bl	10f18 <getc_unlocked@plt>
   118c8:	cmn	r0, #1
   118cc:	moveq	sl, r0
   118d0:	beq	118dc <__assert_fail@plt+0x7b4>
   118d4:	mov	r1, r5
   118d8:	bl	10ffc <ungetc@plt>
   118dc:	ldrb	r1, [r4, #16]
   118e0:	cmp	sl, r1
   118e4:	bne	118f4 <__assert_fail@plt+0x7cc>
   118e8:	add	r0, sp, #24
   118ec:	bl	115fc <__assert_fail@plt+0x4d4>
   118f0:	b	11798 <__assert_fail@plt+0x670>
   118f4:	ldrb	r0, [r7]
   118f8:	cmp	sl, r0
   118fc:	cmnne	sl, #1
   11900:	sub	ip, sl, r0
   11904:	clz	ip, ip
   11908:	lsr	ip, ip, #5
   1190c:	bne	11798 <__assert_fail@plt+0x670>
   11910:	cmp	r6, #0
   11914:	bne	11934 <__assert_fail@plt+0x80c>
   11918:	ldrb	r3, [r4, #4]
   1191c:	cmp	r3, #0
   11920:	beq	11934 <__assert_fail@plt+0x80c>
   11924:	ldrd	r2, [sp, #24]
   11928:	cmp	r3, #0
   1192c:	cmpeq	r2, #1
   11930:	beq	11958 <__assert_fail@plt+0x830>
   11934:	sub	r1, r1, r0
   11938:	clz	r1, r1
   1193c:	lsr	r1, r1, #5
   11940:	cmp	r8, r0
   11944:	moveq	r8, r1
   11948:	orrne	r8, r1, #1
   1194c:	orrs	r3, ip, r8
   11950:	beq	11958 <__assert_fail@plt+0x830>
   11954:	bl	11110 <putchar_unlocked@plt>
   11958:	cmn	sl, #1
   1195c:	beq	1197c <__assert_fail@plt+0x854>
   11960:	ldr	r3, [sp, #20]
   11964:	str	fp, [sp, #24]
   11968:	str	r3, [sp, #28]
   1196c:	ldr	r3, [r9]
   11970:	mov	r6, #0
   11974:	str	r3, [r4]
   11978:	b	11798 <__assert_fail@plt+0x670>
   1197c:	add	sp, sp, #36	; 0x24
   11980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11984:	andeq	r7, r2, r8, lsr #3
   11988:	andeq	r7, r2, r0, lsl #3
   1198c:	andeq	r7, r2, r8, lsl #2
   11990:	andeq	r7, r2, r8, lsl #3
   11994:	ldrdeq	r5, [r1], -ip
   11998:	andeq	r0, r0, fp, lsr r1
   1199c:	ldrdeq	r5, [r1], -r0
   119a0:	ldrdeq	r5, [r1], -sl
   119a4:	andeq	r7, r2, r4, ror r1
   119a8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119ac:	mov	r3, #0
   119b0:	ldr	r6, [pc, #236]	; 11aa4 <__assert_fail@plt+0x97c>
   119b4:	ldr	r4, [pc, #236]	; 11aa8 <__assert_fail@plt+0x980>
   119b8:	add	r8, sp, #8
   119bc:	mov	r2, #0
   119c0:	ldr	sl, [pc, #228]	; 11aac <__assert_fail@plt+0x984>
   119c4:	strd	r2, [r8, #-8]!
   119c8:	mov	r9, r0
   119cc:	ldr	r3, [r6]
   119d0:	mov	r5, #0
   119d4:	add	fp, r4, #28
   119d8:	str	r3, [r4]
   119dc:	mov	r0, r9
   119e0:	bl	10f18 <getc_unlocked@plt>
   119e4:	ldrb	r3, [sl]
   119e8:	cmp	r0, r3
   119ec:	mov	r7, r0
   119f0:	bne	11a14 <__assert_fail@plt+0x8ec>
   119f4:	bl	11110 <putchar_unlocked@plt>
   119f8:	mov	r3, #0
   119fc:	mov	r2, #0
   11a00:	mov	r5, #0
   11a04:	strd	r2, [sp]
   11a08:	ldr	r3, [r6]
   11a0c:	str	r3, [r4]
   11a10:	b	119dc <__assert_fail@plt+0x8b4>
   11a14:	cmn	r0, #1
   11a18:	bne	11a38 <__assert_fail@plt+0x910>
   11a1c:	ldrd	r0, [sp]
   11a20:	orrs	r2, r0, r1
   11a24:	beq	11a30 <__assert_fail@plt+0x908>
   11a28:	mov	r0, r3
   11a2c:	bl	11110 <putchar_unlocked@plt>
   11a30:	add	sp, sp, #12
   11a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a38:	mov	r0, r8
   11a3c:	bl	115fc <__assert_fail@plt+0x4d4>
   11a40:	ldr	r3, [r4]
   11a44:	ldrd	r0, [sp]
   11a48:	ldrd	r2, [r3]
   11a4c:	cmp	r1, r3
   11a50:	cmpeq	r0, r2
   11a54:	bcc	119dc <__assert_fail@plt+0x8b4>
   11a58:	ldr	ip, [r4, #24]
   11a5c:	cmp	ip, fp
   11a60:	beq	11a98 <__assert_fail@plt+0x970>
   11a64:	cmp	r1, r3
   11a68:	cmpeq	r0, r2
   11a6c:	movne	r5, #0
   11a70:	andeq	r5, r5, #1
   11a74:	cmp	r5, #0
   11a78:	moveq	r5, #1
   11a7c:	beq	11a98 <__assert_fail@plt+0x970>
   11a80:	ldr	r3, [pc, #40]	; 11ab0 <__assert_fail@plt+0x988>
   11a84:	ldr	r2, [r4, #20]
   11a88:	mov	r1, #1
   11a8c:	ldr	r3, [r3]
   11a90:	mov	r0, ip
   11a94:	bl	10ef4 <fwrite_unlocked@plt>
   11a98:	mov	r0, r7
   11a9c:	bl	11110 <putchar_unlocked@plt>
   11aa0:	b	119dc <__assert_fail@plt+0x8b4>
   11aa4:	andeq	r7, r2, r8, lsr #3
   11aa8:	andeq	r7, r2, r0, lsl #3
   11aac:	andeq	r7, r2, r8, lsl #2
   11ab0:	andeq	r7, r2, r4, ror r1
   11ab4:	push	{r4, r5, r6, r7, r8, lr}
   11ab8:	mov	r5, r1
   11abc:	ldr	r1, [pc, #212]	; 11b98 <__assert_fail@plt+0xa70>
   11ac0:	mov	r6, r0
   11ac4:	bl	10e88 <strcmp@plt>
   11ac8:	cmp	r0, #0
   11acc:	bne	11b40 <__assert_fail@plt+0xa18>
   11ad0:	ldr	r3, [pc, #196]	; 11b9c <__assert_fail@plt+0xa74>
   11ad4:	mov	r2, #1
   11ad8:	strb	r2, [r3, #29]
   11adc:	ldr	r3, [pc, #188]	; 11ba0 <__assert_fail@plt+0xa78>
   11ae0:	ldr	r4, [r3]
   11ae4:	mov	r1, #2
   11ae8:	mov	r0, r4
   11aec:	bl	125d8 <__assert_fail@plt+0x14b0>
   11af0:	mov	r0, r4
   11af4:	blx	r5
   11af8:	bl	11008 <__errno_location@plt>
   11afc:	ldr	r5, [r0]
   11b00:	mov	r7, r0
   11b04:	mov	r0, r4
   11b08:	bl	10f78 <ferror_unlocked@plt>
   11b0c:	ldr	r1, [pc, #132]	; 11b98 <__assert_fail@plt+0xa70>
   11b10:	cmp	r0, #0
   11b14:	mov	r0, r6
   11b18:	moveq	r5, #0
   11b1c:	bl	10e88 <strcmp@plt>
   11b20:	cmp	r0, #0
   11b24:	mov	r0, r4
   11b28:	bne	11b88 <__assert_fail@plt+0xa60>
   11b2c:	bl	110b0 <clearerr_unlocked@plt>
   11b30:	cmp	r5, #0
   11b34:	bne	11b5c <__assert_fail@plt+0xa34>
   11b38:	mov	r0, #1
   11b3c:	pop	{r4, r5, r6, r7, r8, pc}
   11b40:	ldr	r1, [pc, #92]	; 11ba4 <__assert_fail@plt+0xa7c>
   11b44:	mov	r0, r6
   11b48:	bl	110bc <fopen64@plt>
   11b4c:	subs	r4, r0, #0
   11b50:	bne	11ae4 <__assert_fail@plt+0x9bc>
   11b54:	bl	11008 <__errno_location@plt>
   11b58:	ldr	r5, [r0]
   11b5c:	mov	r2, r6
   11b60:	mov	r1, #3
   11b64:	mov	r0, #0
   11b68:	bl	14024 <__assert_fail@plt+0x2efc>
   11b6c:	ldr	r2, [pc, #52]	; 11ba8 <__assert_fail@plt+0xa80>
   11b70:	mov	r1, r5
   11b74:	mov	r3, r0
   11b78:	mov	r0, #0
   11b7c:	bl	10f90 <error@plt>
   11b80:	mov	r0, #0
   11b84:	pop	{r4, r5, r6, r7, r8, pc}
   11b88:	bl	12608 <__assert_fail@plt+0x14e0>
   11b8c:	cmn	r0, #1
   11b90:	ldreq	r5, [r7]
   11b94:	b	11b30 <__assert_fail@plt+0xa08>
   11b98:	andeq	r5, r1, r4, ror #31
   11b9c:	andeq	r7, r2, r0, lsl #3
   11ba0:	andeq	r7, r2, r0, ror r1
   11ba4:	muleq	r1, r1, sp
   11ba8:	andeq	r6, r1, r6, ror #1
   11bac:	subs	r5, r0, #0
   11bb0:	push	{r7, lr}
   11bb4:	sub	sp, sp, #56	; 0x38
   11bb8:	ldr	r4, [pc, #668]	; 11e5c <__assert_fail@plt+0xd34>
   11bbc:	beq	11bf4 <__assert_fail@plt+0xacc>
   11bc0:	ldr	r3, [pc, #664]	; 11e60 <__assert_fail@plt+0xd38>
   11bc4:	mov	r2, #5
   11bc8:	ldr	r1, [pc, #660]	; 11e64 <__assert_fail@plt+0xd3c>
   11bcc:	mov	r0, #0
   11bd0:	ldr	r6, [r3]
   11bd4:	bl	10f24 <dcgettext@plt>
   11bd8:	ldr	r3, [r4]
   11bdc:	mov	r1, #1
   11be0:	mov	r2, r0
   11be4:	mov	r0, r6
   11be8:	bl	11050 <__fprintf_chk@plt>
   11bec:	mov	r0, r5
   11bf0:	bl	10fe4 <exit@plt>
   11bf4:	mov	r2, #5
   11bf8:	ldr	r1, [pc, #616]	; 11e68 <__assert_fail@plt+0xd40>
   11bfc:	bl	10f24 <dcgettext@plt>
   11c00:	ldr	r2, [r4]
   11c04:	ldr	r4, [pc, #608]	; 11e6c <__assert_fail@plt+0xd44>
   11c08:	ldr	r8, [pc, #608]	; 11e70 <__assert_fail@plt+0xd48>
   11c0c:	mov	r6, r5
   11c10:	mov	r1, r0
   11c14:	mov	r0, #1
   11c18:	bl	11038 <__printf_chk@plt>
   11c1c:	mov	r2, #5
   11c20:	ldr	r1, [pc, #588]	; 11e74 <__assert_fail@plt+0xd4c>
   11c24:	mov	r0, r5
   11c28:	bl	10f24 <dcgettext@plt>
   11c2c:	ldr	r1, [r4]
   11c30:	bl	10e70 <fputs_unlocked@plt>
   11c34:	mov	r2, #5
   11c38:	ldr	r1, [pc, #568]	; 11e78 <__assert_fail@plt+0xd50>
   11c3c:	mov	r0, r5
   11c40:	bl	10f24 <dcgettext@plt>
   11c44:	ldr	r1, [r4]
   11c48:	bl	10e70 <fputs_unlocked@plt>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #548]	; 11e7c <__assert_fail@plt+0xd54>
   11c54:	mov	r0, r5
   11c58:	bl	10f24 <dcgettext@plt>
   11c5c:	ldr	r1, [r4]
   11c60:	bl	10e70 <fputs_unlocked@plt>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #528]	; 11e80 <__assert_fail@plt+0xd58>
   11c6c:	mov	r0, r5
   11c70:	bl	10f24 <dcgettext@plt>
   11c74:	ldr	r1, [r4]
   11c78:	bl	10e70 <fputs_unlocked@plt>
   11c7c:	mov	r2, #5
   11c80:	ldr	r1, [pc, #508]	; 11e84 <__assert_fail@plt+0xd5c>
   11c84:	mov	r0, r5
   11c88:	bl	10f24 <dcgettext@plt>
   11c8c:	ldr	r1, [r4]
   11c90:	bl	10e70 <fputs_unlocked@plt>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #488]	; 11e88 <__assert_fail@plt+0xd60>
   11c9c:	mov	r0, r5
   11ca0:	bl	10f24 <dcgettext@plt>
   11ca4:	ldr	r1, [r4]
   11ca8:	bl	10e70 <fputs_unlocked@plt>
   11cac:	mov	r2, #5
   11cb0:	ldr	r1, [pc, #468]	; 11e8c <__assert_fail@plt+0xd64>
   11cb4:	mov	r0, r5
   11cb8:	bl	10f24 <dcgettext@plt>
   11cbc:	ldr	r1, [r4]
   11cc0:	bl	10e70 <fputs_unlocked@plt>
   11cc4:	mov	r2, #5
   11cc8:	ldr	r1, [pc, #448]	; 11e90 <__assert_fail@plt+0xd68>
   11ccc:	mov	r0, r5
   11cd0:	bl	10f24 <dcgettext@plt>
   11cd4:	ldr	r1, [r4]
   11cd8:	bl	10e70 <fputs_unlocked@plt>
   11cdc:	mov	r2, #5
   11ce0:	ldr	r1, [pc, #428]	; 11e94 <__assert_fail@plt+0xd6c>
   11ce4:	mov	r0, r5
   11ce8:	bl	10f24 <dcgettext@plt>
   11cec:	ldr	r1, [r4]
   11cf0:	bl	10e70 <fputs_unlocked@plt>
   11cf4:	mov	r2, #5
   11cf8:	ldr	r1, [pc, #408]	; 11e98 <__assert_fail@plt+0xd70>
   11cfc:	mov	r0, r5
   11d00:	bl	10f24 <dcgettext@plt>
   11d04:	ldr	r1, [r4]
   11d08:	bl	10e70 <fputs_unlocked@plt>
   11d0c:	mov	r2, #5
   11d10:	ldr	r1, [pc, #388]	; 11e9c <__assert_fail@plt+0xd74>
   11d14:	mov	r0, r5
   11d18:	bl	10f24 <dcgettext@plt>
   11d1c:	ldr	r1, [r4]
   11d20:	bl	10e70 <fputs_unlocked@plt>
   11d24:	mov	r2, #5
   11d28:	ldr	r1, [pc, #368]	; 11ea0 <__assert_fail@plt+0xd78>
   11d2c:	mov	r0, r5
   11d30:	bl	10f24 <dcgettext@plt>
   11d34:	ldr	r1, [r4]
   11d38:	bl	10e70 <fputs_unlocked@plt>
   11d3c:	ldr	lr, [pc, #352]	; 11ea4 <__assert_fail@plt+0xd7c>
   11d40:	mov	ip, sp
   11d44:	ldm	lr!, {r0, r1, r2, r3}
   11d48:	stmia	ip!, {r0, r1, r2, r3}
   11d4c:	ldm	lr!, {r0, r1, r2, r3}
   11d50:	stmia	ip!, {r0, r1, r2, r3}
   11d54:	ldm	lr!, {r0, r1, r2, r3}
   11d58:	stmia	ip!, {r0, r1, r2, r3}
   11d5c:	ldm	lr, {r0, r1}
   11d60:	stm	ip, {r0, r1}
   11d64:	ldr	r1, [sp, r6]
   11d68:	add	r7, sp, r6
   11d6c:	cmp	r1, #0
   11d70:	bne	11e14 <__assert_fail@plt+0xcec>
   11d74:	ldr	r6, [r7, #4]
   11d78:	ldr	r7, [pc, #240]	; 11e70 <__assert_fail@plt+0xd48>
   11d7c:	cmp	r6, #0
   11d80:	mov	r2, #5
   11d84:	ldr	r1, [pc, #284]	; 11ea8 <__assert_fail@plt+0xd80>
   11d88:	mov	r0, #0
   11d8c:	moveq	r6, r7
   11d90:	bl	10f24 <dcgettext@plt>
   11d94:	ldr	r3, [pc, #272]	; 11eac <__assert_fail@plt+0xd84>
   11d98:	ldr	r2, [pc, #272]	; 11eb0 <__assert_fail@plt+0xd88>
   11d9c:	mov	r1, r0
   11da0:	mov	r0, #1
   11da4:	bl	11038 <__printf_chk@plt>
   11da8:	mov	r1, #0
   11dac:	mov	r0, #5
   11db0:	bl	1108c <setlocale@plt>
   11db4:	cmp	r0, #0
   11db8:	bne	11e2c <__assert_fail@plt+0xd04>
   11dbc:	mov	r2, #5
   11dc0:	ldr	r1, [pc, #236]	; 11eb4 <__assert_fail@plt+0xd8c>
   11dc4:	mov	r0, #0
   11dc8:	bl	10f24 <dcgettext@plt>
   11dcc:	ldr	r3, [pc, #156]	; 11e70 <__assert_fail@plt+0xd48>
   11dd0:	ldr	r2, [pc, #212]	; 11eac <__assert_fail@plt+0xd84>
   11dd4:	mov	r1, r0
   11dd8:	mov	r0, #1
   11ddc:	bl	11038 <__printf_chk@plt>
   11de0:	mov	r2, #5
   11de4:	ldr	r1, [pc, #204]	; 11eb8 <__assert_fail@plt+0xd90>
   11de8:	mov	r0, #0
   11dec:	bl	10f24 <dcgettext@plt>
   11df0:	ldr	r2, [pc, #196]	; 11ebc <__assert_fail@plt+0xd94>
   11df4:	cmp	r6, r7
   11df8:	ldr	r3, [pc, #192]	; 11ec0 <__assert_fail@plt+0xd98>
   11dfc:	moveq	r3, r2
   11e00:	mov	r2, r6
   11e04:	mov	r1, r0
   11e08:	mov	r0, #1
   11e0c:	bl	11038 <__printf_chk@plt>
   11e10:	b	11bec <__assert_fail@plt+0xac4>
   11e14:	mov	r0, r8
   11e18:	bl	10e88 <strcmp@plt>
   11e1c:	add	r6, r6, #8
   11e20:	cmp	r0, #0
   11e24:	bne	11d64 <__assert_fail@plt+0xc3c>
   11e28:	b	11d74 <__assert_fail@plt+0xc4c>
   11e2c:	mov	r2, #3
   11e30:	ldr	r1, [pc, #140]	; 11ec4 <__assert_fail@plt+0xd9c>
   11e34:	bl	110ec <strncmp@plt>
   11e38:	cmp	r0, #0
   11e3c:	beq	11dbc <__assert_fail@plt+0xc94>
   11e40:	mov	r2, #5
   11e44:	ldr	r1, [pc, #124]	; 11ec8 <__assert_fail@plt+0xda0>
   11e48:	mov	r0, #0
   11e4c:	bl	10f24 <dcgettext@plt>
   11e50:	ldr	r1, [r4]
   11e54:	bl	10e70 <fputs_unlocked@plt>
   11e58:	b	11dbc <__assert_fail@plt+0xc94>
   11e5c:			; <UNDEFINED> instruction: 0x000271b8
   11e60:	andeq	r7, r2, r8, ror #2
   11e64:	andeq	r5, r1, fp, ror #11
   11e68:	andeq	r5, r1, r2, lsl r6
   11e6c:	andeq	r7, r2, r4, ror r1
   11e70:	andeq	r5, r1, r7, ror #11
   11e74:	andeq	r5, r1, r1, lsr r6
   11e78:	andeq	r5, r1, r3, ror r6
   11e7c:	andeq	r5, r1, fp, lsr #13
   11e80:	strdeq	r5, [r1], -r6
   11e84:	andeq	r5, r1, r7, lsr #15
   11e88:	muleq	r1, r5, r8
   11e8c:	andeq	r5, r1, r7, lsl #18
   11e90:	ldrdeq	r5, [r1], -r9
   11e94:	andeq	r5, r1, r8, lsl sl
   11e98:	andeq	r5, r1, r5, asr #20
   11e9c:	andeq	r5, r1, fp, ror sl
   11ea0:	andeq	r5, r1, r7, asr #22
   11ea4:	andeq	r5, r1, r8, ror #9
   11ea8:	andeq	r5, r1, sp, asr #24
   11eac:	andeq	r5, r1, r4, ror #24
   11eb0:	andeq	r5, r1, ip, lsl #25
   11eb4:	andeq	r5, r1, r5, ror #25
   11eb8:	andeq	r5, r1, r0, lsl #26
   11ebc:	andeq	r5, r1, ip, lsr #29
   11ec0:	andeq	r5, r1, r2, lsr sp
   11ec4:	muleq	r1, sl, ip
   11ec8:	muleq	r1, lr, ip
   11ecc:	andeq	r0, r0, r0
   11ed0:	ldr	r2, [r0]
   11ed4:	ldr	r3, [r1]
   11ed8:	cmp	r2, r3
   11edc:	blt	11eec <__assert_fail@plt+0xdc4>
   11ee0:	movgt	r0, #1
   11ee4:	movle	r0, #0
   11ee8:	bx	lr
   11eec:	mvn	r0, #0
   11ef0:	bx	lr
   11ef4:	push	{r4, r6, r7, r8, r9, lr}
   11ef8:	mov	r6, r2
   11efc:	ldr	r4, [pc, #76]	; 11f50 <__assert_fail@plt+0xe28>
   11f00:	mov	r7, r3
   11f04:	mov	r8, r0
   11f08:	ldm	r4, {r2, r3}
   11f0c:	mov	r9, r1
   11f10:	cmp	r2, r3
   11f14:	bne	11f2c <__assert_fail@plt+0xe04>
   11f18:	mov	r2, #16
   11f1c:	add	r1, r4, #4
   11f20:	ldr	r0, [r4, #8]
   11f24:	bl	14774 <__assert_fail@plt+0x364c>
   11f28:	str	r0, [r4, #8]
   11f2c:	ldr	r3, [r4]
   11f30:	ldr	r1, [r4, #8]
   11f34:	lsl	r2, r3, #4
   11f38:	add	r0, r1, r2
   11f3c:	add	r3, r3, #1
   11f40:	strd	r8, [r1, r2]
   11f44:	strd	r6, [r0, #8]
   11f48:	str	r3, [r4]
   11f4c:	pop	{r4, r6, r7, r8, r9, pc}
   11f50:	andeq	r7, r2, r0, lsr #3
   11f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f58:	ands	r9, r1, #1
   11f5c:	sub	sp, sp, #36	; 0x24
   11f60:	mov	r8, r0
   11f64:	mov	sl, r1
   11f68:	beq	12004 <__assert_fail@plt+0xedc>
   11f6c:	ldr	r1, [pc, #1300]	; 12488 <__assert_fail@plt+0x1360>
   11f70:	bl	10e88 <strcmp@plt>
   11f74:	cmp	r0, #0
   11f78:	bne	12004 <__assert_fail@plt+0xedc>
   11f7c:	add	r8, r8, #1
   11f80:	mov	r4, #1
   11f84:	mov	r5, #0
   11f88:	mov	r6, #1
   11f8c:	mov	r0, #1
   11f90:	mov	r1, #0
   11f94:	mov	fp, #0
   11f98:	strd	r0, [sp]
   11f9c:	ldr	r3, [sp]
   11fa0:	add	r8, r8, #1
   11fa4:	str	r3, [sp, #16]
   11fa8:	mov	r7, r6
   11fac:	ldr	r3, [sp, #4]
   11fb0:	mov	r2, fp
   11fb4:	str	r3, [sp, #20]
   11fb8:	sub	r3, r8, #1
   11fbc:	str	r3, [sp, #12]
   11fc0:	ldrb	r3, [r8, #-1]
   11fc4:	cmp	r3, #45	; 0x2d
   11fc8:	bne	12090 <__assert_fail@plt+0xf68>
   11fcc:	cmp	r7, #0
   11fd0:	beq	1203c <__assert_fail@plt+0xf14>
   11fd4:	ands	r0, sl, #4
   11fd8:	mov	r2, #5
   11fdc:	ldrne	r1, [pc, #1192]	; 1248c <__assert_fail@plt+0x1364>
   11fe0:	ldreq	r1, [pc, #1192]	; 12490 <__assert_fail@plt+0x1368>
   11fe4:	beq	11fec <__assert_fail@plt+0xec4>
   11fe8:	mov	r0, #0
   11fec:	bl	10f24 <dcgettext@plt>
   11ff0:	mov	r1, #0
   11ff4:	mov	r2, r0
   11ff8:	mov	r0, r1
   11ffc:	bl	10f90 <error@plt>
   12000:	b	12270 <__assert_fail@plt+0x1148>
   12004:	mov	r4, #0
   12008:	mov	r5, #0
   1200c:	mov	r6, #0
   12010:	b	11f8c <__assert_fail@plt+0xe64>
   12014:	mov	r0, #0
   12018:	mov	r7, r6
   1201c:	mov	r1, r0
   12020:	strd	r4, [sp]
   12024:	add	r8, r8, #1
   12028:	mov	r4, r0
   1202c:	mov	r5, r1
   12030:	b	11fb8 <__assert_fail@plt+0xe90>
   12034:	mov	fp, #1
   12038:	b	12024 <__assert_fail@plt+0xefc>
   1203c:	orrs	r3, r4, r5
   12040:	movne	fp, #0
   12044:	andeq	fp, r6, #1
   12048:	cmp	fp, #0
   1204c:	beq	12064 <__assert_fail@plt+0xf3c>
   12050:	tst	sl, #4
   12054:	mov	r2, #5
   12058:	ldrne	r1, [pc, #1076]	; 12494 <__assert_fail@plt+0x136c>
   1205c:	ldreq	r1, [pc, #1076]	; 12498 <__assert_fail@plt+0x1370>
   12060:	b	11fe8 <__assert_fail@plt+0xec0>
   12064:	cmp	r6, #0
   12068:	bne	12014 <__assert_fail@plt+0xeec>
   1206c:	ldr	r3, [sp, #16]
   12070:	mov	r0, #0
   12074:	str	r3, [sp]
   12078:	ldr	r3, [sp, #20]
   1207c:	mov	fp, r6
   12080:	mov	r1, r0
   12084:	mov	r7, #1
   12088:	str	r3, [sp, #4]
   1208c:	b	12024 <__assert_fail@plt+0xefc>
   12090:	cmp	r3, #44	; 0x2c
   12094:	str	r3, [sp, #28]
   12098:	beq	120cc <__assert_fail@plt+0xfa4>
   1209c:	str	r2, [sp, #24]
   120a0:	bl	10fd8 <__ctype_b_loc@plt>
   120a4:	ldr	r3, [sp, #28]
   120a8:	ldr	r2, [sp, #24]
   120ac:	lsl	r1, r3, #1
   120b0:	ldr	r0, [r0]
   120b4:	ldrh	ip, [r0, r1]
   120b8:	and	ip, ip, #1
   120bc:	cmp	r3, #0
   120c0:	orreq	ip, ip, #1
   120c4:	cmp	ip, #0
   120c8:	beq	12188 <__assert_fail@plt+0x1060>
   120cc:	cmp	r7, #0
   120d0:	beq	1216c <__assert_fail@plt+0x1044>
   120d4:	orr	r6, r6, r2
   120d8:	tst	r6, #255	; 0xff
   120dc:	bne	120f4 <__assert_fail@plt+0xfcc>
   120e0:	cmp	r9, #0
   120e4:	bne	12134 <__assert_fail@plt+0x100c>
   120e8:	mov	r2, #5
   120ec:	ldr	r1, [pc, #936]	; 1249c <__assert_fail@plt+0x1374>
   120f0:	b	11fe8 <__assert_fail@plt+0xec0>
   120f4:	cmp	r2, #0
   120f8:	bne	12148 <__assert_fail@plt+0x1020>
   120fc:	mvn	r2, #0
   12100:	mvn	r3, #0
   12104:	ldrd	r0, [sp]
   12108:	bl	11ef4 <__assert_fail@plt+0xdcc>
   1210c:	ldrb	r5, [r8, #-1]
   12110:	cmp	r5, #0
   12114:	beq	122b4 <__assert_fail@plt+0x118c>
   12118:	mov	r0, #0
   1211c:	mov	r1, r0
   12120:	mov	fp, r0
   12124:	mov	r7, r0
   12128:	mov	r2, r0
   1212c:	mov	r6, r0
   12130:	b	12024 <__assert_fail@plt+0xefc>
   12134:	ldr	r3, [sp, #16]
   12138:	str	r3, [sp]
   1213c:	ldr	r3, [sp, #20]
   12140:	str	r3, [sp, #4]
   12144:	b	120fc <__assert_fail@plt+0xfd4>
   12148:	ldrd	r2, [sp]
   1214c:	cmp	r3, r5
   12150:	cmpeq	r2, r4
   12154:	movhi	r2, #5
   12158:	ldrhi	r1, [pc, #832]	; 124a0 <__assert_fail@plt+0x1378>
   1215c:	bhi	11fe8 <__assert_fail@plt+0xec0>
   12160:	mov	r2, r4
   12164:	mov	r3, r5
   12168:	b	12104 <__assert_fail@plt+0xfdc>
   1216c:	orrs	r3, r4, r5
   12170:	beq	12050 <__assert_fail@plt+0xf28>
   12174:	mov	r2, r4
   12178:	mov	r3, r5
   1217c:	mov	r0, r4
   12180:	mov	r1, r5
   12184:	b	12108 <__assert_fail@plt+0xfe0>
   12188:	sub	r3, r3, #48	; 0x30
   1218c:	cmp	r3, #9
   12190:	bhi	12278 <__assert_fail@plt+0x1150>
   12194:	cmp	fp, #0
   12198:	ldr	r1, [pc, #772]	; 124a4 <__assert_fail@plt+0x137c>
   1219c:	beq	121ac <__assert_fail@plt+0x1084>
   121a0:	ldr	r0, [r1, #12]
   121a4:	cmp	r0, #0
   121a8:	bne	121b4 <__assert_fail@plt+0x108c>
   121ac:	ldr	r0, [sp, #12]
   121b0:	str	r0, [r1, #12]
   121b4:	add	r1, pc, #708	; 0x2c4
   121b8:	ldrd	r0, [r1]
   121bc:	cmp	r7, #0
   121c0:	movne	r2, r7
   121c4:	moveq	r6, #1
   121c8:	cmp	r5, r1
   121cc:	cmpeq	r4, r0
   121d0:	bhi	1220c <__assert_fail@plt+0x10e4>
   121d4:	mov	ip, #10
   121d8:	umull	r0, r1, r4, ip
   121dc:	mla	r1, ip, r5, r1
   121e0:	adds	r0, r0, r3
   121e4:	adc	r1, r1, r3, asr #31
   121e8:	and	r3, r0, r1
   121ec:	cmn	r3, #1
   121f0:	movne	r3, #0
   121f4:	moveq	r3, #1
   121f8:	cmp	r1, r5
   121fc:	cmpeq	r0, r4
   12200:	orrcc	r3, r3, #1
   12204:	cmp	r3, #0
   12208:	beq	12034 <__assert_fail@plt+0xf0c>
   1220c:	ldr	r3, [pc, #656]	; 124a4 <__assert_fail@plt+0x137c>
   12210:	ldr	r1, [pc, #656]	; 124a8 <__assert_fail@plt+0x1380>
   12214:	ldr	r4, [r3, #12]
   12218:	mov	r0, r4
   1221c:	bl	1111c <strspn@plt>
   12220:	mov	r1, r0
   12224:	mov	r0, r4
   12228:	bl	14ac8 <__assert_fail@plt+0x39a0>
   1222c:	mov	r2, #5
   12230:	mov	r4, r0
   12234:	ands	r0, sl, #4
   12238:	movne	r0, #0
   1223c:	ldrne	r1, [pc, #616]	; 124ac <__assert_fail@plt+0x1384>
   12240:	ldreq	r1, [pc, #616]	; 124b0 <__assert_fail@plt+0x1388>
   12244:	bl	10f24 <dcgettext@plt>
   12248:	mov	r5, r0
   1224c:	mov	r0, r4
   12250:	bl	14164 <__assert_fail@plt+0x303c>
   12254:	mov	r1, #0
   12258:	mov	r2, r5
   1225c:	mov	r3, r0
   12260:	mov	r0, r1
   12264:	bl	10f90 <error@plt>
   12268:	mov	r0, r4
   1226c:	bl	12700 <__assert_fail@plt+0x15d8>
   12270:	mov	r0, #1
   12274:	bl	11bac <__assert_fail@plt+0xa84>
   12278:	ands	r0, sl, #4
   1227c:	mov	r2, #5
   12280:	ldrne	r1, [pc, #556]	; 124b4 <__assert_fail@plt+0x138c>
   12284:	ldreq	r1, [pc, #556]	; 124b8 <__assert_fail@plt+0x1390>
   12288:	movne	r0, ip
   1228c:	bl	10f24 <dcgettext@plt>
   12290:	mov	r4, r0
   12294:	ldr	r0, [sp, #12]
   12298:	bl	14164 <__assert_fail@plt+0x303c>
   1229c:	mov	r1, #0
   122a0:	mov	r2, r4
   122a4:	mov	r3, r0
   122a8:	mov	r0, r1
   122ac:	bl	10f90 <error@plt>
   122b0:	b	12270 <__assert_fail@plt+0x1148>
   122b4:	ldr	r4, [pc, #488]	; 124a4 <__assert_fail@plt+0x137c>
   122b8:	ldr	ip, [r4]
   122bc:	cmp	ip, #0
   122c0:	bne	122dc <__assert_fail@plt+0x11b4>
   122c4:	ands	r0, sl, #4
   122c8:	mov	r2, #5
   122cc:	ldrne	r1, [pc, #488]	; 124bc <__assert_fail@plt+0x1394>
   122d0:	bne	11fe8 <__assert_fail@plt+0xec0>
   122d4:	ldr	r1, [pc, #484]	; 124c0 <__assert_fail@plt+0x1398>
   122d8:	b	11fec <__assert_fail@plt+0xec4>
   122dc:	ldr	r3, [pc, #480]	; 124c4 <__assert_fail@plt+0x139c>
   122e0:	mov	r2, #16
   122e4:	mov	r1, ip
   122e8:	ldr	r0, [r4, #8]
   122ec:	bl	110c8 <qsort@plt>
   122f0:	mov	r6, r5
   122f4:	ldr	r7, [r4]
   122f8:	cmp	r6, r7
   122fc:	bcc	123c4 <__assert_fail@plt+0x129c>
   12300:	tst	sl, #2
   12304:	beq	12380 <__assert_fail@plt+0x1258>
   12308:	ldr	r5, [r4, #8]
   1230c:	mov	r3, #0
   12310:	str	r3, [r4, #8]
   12314:	str	r3, [r4]
   12318:	str	r3, [r4, #4]
   1231c:	ldrd	r2, [r5]
   12320:	cmp	r3, #0
   12324:	cmpeq	r2, #1
   12328:	bls	12340 <__assert_fail@plt+0x1218>
   1232c:	subs	r2, r2, #1
   12330:	sbc	r3, r3, #0
   12334:	mov	r0, #1
   12338:	mov	r1, #0
   1233c:	bl	11ef4 <__assert_fail@plt+0xdcc>
   12340:	mov	r6, r5
   12344:	mov	r8, #1
   12348:	cmp	r7, r8
   1234c:	bhi	12448 <__assert_fail@plt+0x1320>
   12350:	add	r7, r5, r7, lsl #4
   12354:	mvn	r3, #0
   12358:	ldrd	r0, [r7, #-8]
   1235c:	mvn	r2, #0
   12360:	cmp	r1, r3
   12364:	cmpeq	r0, r2
   12368:	beq	12378 <__assert_fail@plt+0x1250>
   1236c:	adds	r0, r0, #1
   12370:	adc	r1, r1, #0
   12374:	bl	11ef4 <__assert_fail@plt+0xdcc>
   12378:	mov	r0, r5
   1237c:	bl	12700 <__assert_fail@plt+0x15d8>
   12380:	ldr	r1, [r4]
   12384:	ldr	r0, [r4, #8]
   12388:	add	r1, r1, #1
   1238c:	str	r1, [r4]
   12390:	lsl	r1, r1, #4
   12394:	bl	146a8 <__assert_fail@plt+0x3580>
   12398:	ldr	r3, [r4]
   1239c:	mvn	r5, #0
   123a0:	sub	r3, r3, #-268435455	; 0xf0000001
   123a4:	lsl	r3, r3, #4
   123a8:	str	r0, [r4, #8]
   123ac:	add	r2, r0, r3
   123b0:	mvn	r4, #0
   123b4:	strd	r4, [r2, #8]
   123b8:	strd	r4, [r0, r3]
   123bc:	add	sp, sp, #36	; 0x24
   123c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123c4:	add	r6, r6, #1
   123c8:	add	fp, r5, #32
   123cc:	lsl	r7, r6, #4
   123d0:	ldr	ip, [r4]
   123d4:	cmp	r6, ip
   123d8:	bcc	123e4 <__assert_fail@plt+0x12bc>
   123dc:	add	r5, r5, #16
   123e0:	b	122f4 <__assert_fail@plt+0x11cc>
   123e4:	ldr	r1, [r4, #8]
   123e8:	add	lr, r1, r5
   123ec:	add	r0, r1, r7
   123f0:	ldrd	r8, [lr, #8]
   123f4:	mov	r2, r8
   123f8:	mov	r3, r9
   123fc:	ldrd	r8, [r1, r7]
   12400:	cmp	r9, r3
   12404:	cmpeq	r8, r2
   12408:	bhi	123dc <__assert_fail@plt+0x12b4>
   1240c:	ldrd	r8, [r0, #8]
   12410:	add	r1, r1, fp
   12414:	cmp	r9, r3
   12418:	cmpeq	r8, r2
   1241c:	movcc	r8, r2
   12420:	sub	r2, ip, #-268435455	; 0xf0000001
   12424:	movcc	r9, r3
   12428:	sub	r2, r2, r6
   1242c:	strd	r8, [lr, #8]
   12430:	lsl	r2, r2, #4
   12434:	bl	10eac <memmove@plt>
   12438:	ldr	r3, [r4]
   1243c:	sub	r3, r3, #1
   12440:	str	r3, [r4]
   12444:	b	123d0 <__assert_fail@plt+0x12a8>
   12448:	ldrd	r0, [r6, #8]
   1244c:	ldrd	r2, [r6, #16]
   12450:	adds	r0, r0, #1
   12454:	adc	r1, r1, #0
   12458:	cmp	r1, r3
   1245c:	cmpeq	r0, r2
   12460:	beq	12470 <__assert_fail@plt+0x1348>
   12464:	subs	r2, r2, #1
   12468:	sbc	r3, r3, #0
   1246c:	bl	11ef4 <__assert_fail@plt+0xdcc>
   12470:	add	r8, r8, #1
   12474:	add	r6, r6, #16
   12478:	b	12348 <__assert_fail@plt+0x1220>
   1247c:	nop			; (mov r0, r0)
   12480:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12484:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12488:	andeq	r5, r1, r4, ror #31
   1248c:	andeq	r5, r1, r8, asr #30
   12490:	andeq	r5, r1, r8, ror #30
   12494:	andeq	r5, r1, ip, ror pc
   12498:	andeq	r5, r1, r9, lsr #31
   1249c:	andeq	r5, r1, r4, asr #31
   124a0:	andeq	r5, r1, r6, ror #31
   124a4:	andeq	r7, r2, r0, lsr #3
   124a8:	strdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   124ac:	andeq	r6, r1, sl
   124b0:	andeq	r6, r1, r0, lsr r0
   124b4:	andeq	r6, r1, sp, asr #32
   124b8:	andeq	r6, r1, r0, ror r0
   124bc:	andeq	r6, r1, r7, lsl #1
   124c0:	strheq	r6, [r1], -r0
   124c4:	ldrdeq	r1, [r1], -r0
   124c8:	ldr	r3, [pc, #4]	; 124d4 <__assert_fail@plt+0x13ac>
   124cc:	str	r0, [r3]
   124d0:	bx	lr
   124d4:			; <UNDEFINED> instruction: 0x000271b0
   124d8:	ldr	r3, [pc, #4]	; 124e4 <__assert_fail@plt+0x13bc>
   124dc:	strb	r0, [r3, #4]
   124e0:	bx	lr
   124e4:			; <UNDEFINED> instruction: 0x000271b0
   124e8:	ldr	r3, [pc, #192]	; 125b0 <__assert_fail@plt+0x1488>
   124ec:	push	{r0, r1, r4, r5, r6, lr}
   124f0:	ldr	r0, [r3]
   124f4:	bl	14c34 <__assert_fail@plt+0x3b0c>
   124f8:	cmp	r0, #0
   124fc:	beq	12594 <__assert_fail@plt+0x146c>
   12500:	ldr	r3, [pc, #172]	; 125b4 <__assert_fail@plt+0x148c>
   12504:	mov	r4, r3
   12508:	ldrb	r2, [r3, #4]
   1250c:	cmp	r2, #0
   12510:	beq	12524 <__assert_fail@plt+0x13fc>
   12514:	bl	11008 <__errno_location@plt>
   12518:	ldr	r3, [r0]
   1251c:	cmp	r3, #32
   12520:	beq	12594 <__assert_fail@plt+0x146c>
   12524:	mov	r2, #5
   12528:	ldr	r1, [pc, #136]	; 125b8 <__assert_fail@plt+0x1490>
   1252c:	mov	r0, #0
   12530:	bl	10f24 <dcgettext@plt>
   12534:	ldr	r4, [r4]
   12538:	cmp	r4, #0
   1253c:	mov	r5, r0
   12540:	beq	12578 <__assert_fail@plt+0x1450>
   12544:	bl	11008 <__errno_location@plt>
   12548:	ldr	r6, [r0]
   1254c:	mov	r0, r4
   12550:	bl	14014 <__assert_fail@plt+0x2eec>
   12554:	str	r5, [sp]
   12558:	ldr	r2, [pc, #92]	; 125bc <__assert_fail@plt+0x1494>
   1255c:	mov	r1, r6
   12560:	mov	r3, r0
   12564:	mov	r0, #0
   12568:	bl	10f90 <error@plt>
   1256c:	ldr	r3, [pc, #76]	; 125c0 <__assert_fail@plt+0x1498>
   12570:	ldr	r0, [r3]
   12574:	bl	10ed0 <_exit@plt>
   12578:	bl	11008 <__errno_location@plt>
   1257c:	mov	r3, r5
   12580:	ldr	r2, [pc, #60]	; 125c4 <__assert_fail@plt+0x149c>
   12584:	ldr	r1, [r0]
   12588:	mov	r0, r4
   1258c:	bl	10f90 <error@plt>
   12590:	b	1256c <__assert_fail@plt+0x1444>
   12594:	ldr	r3, [pc, #44]	; 125c8 <__assert_fail@plt+0x14a0>
   12598:	ldr	r0, [r3]
   1259c:	bl	14c34 <__assert_fail@plt+0x3b0c>
   125a0:	cmp	r0, #0
   125a4:	bne	1256c <__assert_fail@plt+0x1444>
   125a8:	add	sp, sp, #8
   125ac:	pop	{r4, r5, r6, pc}
   125b0:	andeq	r7, r2, r4, ror r1
   125b4:			; <UNDEFINED> instruction: 0x000271b0
   125b8:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   125bc:	andeq	r6, r1, r2, ror #1
   125c0:	andeq	r7, r2, r0, lsl r1
   125c4:	andeq	r6, r1, r6, ror #1
   125c8:	andeq	r7, r2, r8, ror #2
   125cc:	push	{r4, r5}
   125d0:	pop	{r4, r5}
   125d4:	b	10e94 <posix_fadvise64@plt>
   125d8:	cmp	r0, #0
   125dc:	bxeq	lr
   125e0:	push	{r0, r1, r2, r3, r4, lr}
   125e4:	mov	r4, r1
   125e8:	bl	11044 <fileno@plt>
   125ec:	mov	r2, #0
   125f0:	mov	r3, #0
   125f4:	str	r4, [sp, #8]
   125f8:	strd	r2, [sp]
   125fc:	bl	10e94 <posix_fadvise64@plt>
   12600:	add	sp, sp, #16
   12604:	pop	{r4, pc}
   12608:	push	{r0, r1, r2, r4, r5, lr}
   1260c:	mov	r4, r0
   12610:	bl	11044 <fileno@plt>
   12614:	cmp	r0, #0
   12618:	mov	r0, r4
   1261c:	bge	1262c <__assert_fail@plt+0x1504>
   12620:	add	sp, sp, #12
   12624:	pop	{r4, r5, lr}
   12628:	b	11068 <fclose@plt>
   1262c:	bl	10fb4 <__freading@plt>
   12630:	cmp	r0, #0
   12634:	bne	12670 <__assert_fail@plt+0x1548>
   12638:	mov	r0, r4
   1263c:	bl	126b0 <__assert_fail@plt+0x1588>
   12640:	cmp	r0, #0
   12644:	bne	126a4 <__assert_fail@plt+0x157c>
   12648:	mov	r5, #0
   1264c:	mov	r0, r4
   12650:	bl	11068 <fclose@plt>
   12654:	cmp	r5, #0
   12658:	beq	12668 <__assert_fail@plt+0x1540>
   1265c:	bl	11008 <__errno_location@plt>
   12660:	str	r5, [r0]
   12664:	mvn	r0, #0
   12668:	add	sp, sp, #12
   1266c:	pop	{r4, r5, pc}
   12670:	mov	r0, r4
   12674:	bl	11044 <fileno@plt>
   12678:	mov	r3, #1
   1267c:	str	r3, [sp]
   12680:	mov	r2, #0
   12684:	mov	r3, #0
   12688:	bl	10f54 <lseek64@plt>
   1268c:	mvn	r3, #0
   12690:	mvn	r2, #0
   12694:	cmp	r1, r3
   12698:	cmpeq	r0, r2
   1269c:	bne	12638 <__assert_fail@plt+0x1510>
   126a0:	b	12648 <__assert_fail@plt+0x1520>
   126a4:	bl	11008 <__errno_location@plt>
   126a8:	ldr	r5, [r0]
   126ac:	b	1264c <__assert_fail@plt+0x1524>
   126b0:	push	{r0, r1, r4, lr}
   126b4:	subs	r4, r0, #0
   126b8:	bne	126cc <__assert_fail@plt+0x15a4>
   126bc:	mov	r0, r4
   126c0:	add	sp, sp, #8
   126c4:	pop	{r4, lr}
   126c8:	b	10ea0 <fflush@plt>
   126cc:	bl	10fb4 <__freading@plt>
   126d0:	cmp	r0, #0
   126d4:	beq	126bc <__assert_fail@plt+0x1594>
   126d8:	ldr	r3, [r4]
   126dc:	tst	r3, #256	; 0x100
   126e0:	beq	126bc <__assert_fail@plt+0x1594>
   126e4:	mov	r3, #1
   126e8:	str	r3, [sp]
   126ec:	mov	r2, #0
   126f0:	mov	r3, #0
   126f4:	mov	r0, r4
   126f8:	bl	12754 <__assert_fail@plt+0x162c>
   126fc:	b	126bc <__assert_fail@plt+0x1594>
   12700:	push	{r0, r1, r2, r4, r5, lr}
   12704:	mov	r5, r0
   12708:	bl	11008 <__errno_location@plt>
   1270c:	ldr	r3, [r0]
   12710:	mov	r4, r0
   12714:	str	r3, [sp]
   12718:	str	r3, [sp, #4]
   1271c:	mov	r3, #0
   12720:	str	r3, [r0]
   12724:	mov	r0, r5
   12728:	bl	10eb8 <free@plt>
   1272c:	ldr	r3, [r4]
   12730:	add	r2, sp, #8
   12734:	cmp	r3, #0
   12738:	moveq	r3, #4
   1273c:	movne	r3, #0
   12740:	add	r3, r2, r3
   12744:	ldr	r3, [r3, #-8]
   12748:	str	r3, [r4]
   1274c:	add	sp, sp, #12
   12750:	pop	{r4, r5, pc}
   12754:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12758:	mov	r4, r0
   1275c:	ldmib	r0, {ip, lr}
   12760:	ldr	r8, [sp, #32]
   12764:	cmp	lr, ip
   12768:	bne	127d4 <__assert_fail@plt+0x16ac>
   1276c:	ldr	lr, [r0, #20]
   12770:	ldr	ip, [r0, #16]
   12774:	cmp	lr, ip
   12778:	bne	127d4 <__assert_fail@plt+0x16ac>
   1277c:	ldr	r5, [r0, #36]	; 0x24
   12780:	cmp	r5, #0
   12784:	bne	127d4 <__assert_fail@plt+0x16ac>
   12788:	mov	r6, r2
   1278c:	mov	r7, r3
   12790:	bl	11044 <fileno@plt>
   12794:	mov	r2, r6
   12798:	mov	r3, r7
   1279c:	str	r8, [sp]
   127a0:	bl	10f54 <lseek64@plt>
   127a4:	mvn	r3, #0
   127a8:	mvn	r2, #0
   127ac:	cmp	r1, r3
   127b0:	cmpeq	r0, r2
   127b4:	mvneq	r0, #0
   127b8:	ldrne	r3, [r4]
   127bc:	strdne	r0, [r4, #80]	; 0x50
   127c0:	movne	r0, r5
   127c4:	bicne	r3, r3, #16
   127c8:	strne	r3, [r4]
   127cc:	add	sp, sp, #8
   127d0:	pop	{r4, r5, r6, r7, r8, pc}
   127d4:	str	r8, [sp, #32]
   127d8:	mov	r0, r4
   127dc:	add	sp, sp, #8
   127e0:	pop	{r4, r5, r6, r7, r8, lr}
   127e4:	b	11074 <fseeko64@plt>
   127e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127ec:	sub	sp, sp, #36	; 0x24
   127f0:	ldr	r7, [r0]
   127f4:	mov	r8, r3
   127f8:	cmp	r7, #0
   127fc:	str	r0, [sp, #8]
   12800:	str	r1, [sp, #12]
   12804:	mov	r6, r2
   12808:	ldr	r5, [r1]
   1280c:	movne	r3, r1
   12810:	bne	1283c <__assert_fail@plt+0x1714>
   12814:	cmp	r8, #64	; 0x40
   12818:	movcc	r5, r8
   1281c:	movcs	r5, #64	; 0x40
   12820:	mov	r0, r5
   12824:	bl	14b98 <__assert_fail@plt+0x3a70>
   12828:	subs	r7, r0, #0
   1282c:	bne	1283c <__assert_fail@plt+0x1714>
   12830:	mvn	r0, #0
   12834:	add	sp, sp, #36	; 0x24
   12838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1283c:	cmp	r5, r6
   12840:	bcc	129f8 <__assert_fail@plt+0x18d0>
   12844:	cmp	r5, r8
   12848:	cmpcs	r5, r6
   1284c:	moveq	r3, #1
   12850:	movne	r3, #0
   12854:	sub	r9, r5, r6
   12858:	str	r3, [sp, #4]
   1285c:	beq	129f8 <__assert_fail@plt+0x18d0>
   12860:	ldr	r3, [sp, #72]	; 0x48
   12864:	cmn	r3, #1
   12868:	ldr	r3, [sp, #76]	; 0x4c
   1286c:	streq	r3, [sp, #72]	; 0x48
   12870:	beq	12884 <__assert_fail@plt+0x175c>
   12874:	ldr	r2, [sp, #72]	; 0x48
   12878:	cmn	r3, #1
   1287c:	moveq	r3, r2
   12880:	str	r3, [sp, #76]	; 0x4c
   12884:	add	r4, r7, r6
   12888:	add	r1, sp, #28
   1288c:	ldr	r0, [sp, #80]	; 0x50
   12890:	bl	14ca4 <__assert_fail@plt+0x3b7c>
   12894:	subs	fp, r0, #0
   12898:	beq	129dc <__assert_fail@plt+0x18b4>
   1289c:	ldr	r3, [sp, #72]	; 0x48
   128a0:	cmn	r3, #1
   128a4:	beq	12a24 <__assert_fail@plt+0x18fc>
   128a8:	ldr	r3, [sp, #28]
   128ac:	ldr	r2, [sp, #76]	; 0x4c
   128b0:	ldr	r1, [sp, #72]	; 0x48
   128b4:	bl	12a48 <__assert_fail@plt+0x1920>
   128b8:	cmp	r0, #0
   128bc:	beq	12a24 <__assert_fail@plt+0x18fc>
   128c0:	sub	r0, r0, fp
   128c4:	mov	r2, #0
   128c8:	mov	sl, #1
   128cc:	add	r0, r0, #1
   128d0:	str	r0, [sp, #28]
   128d4:	ldr	r1, [sp, #28]
   128d8:	add	r1, r1, #1
   128dc:	cmp	r5, r8
   128e0:	cmpcc	r9, r1
   128e4:	bcs	1295c <__assert_fail@plt+0x1834>
   128e8:	cmp	r5, #63	; 0x3f
   128ec:	lslhi	r3, r5, #1
   128f0:	addls	r3, r5, #64	; 0x40
   128f4:	sub	r4, r4, r7
   128f8:	sub	r0, r3, r4
   128fc:	cmp	r1, r0
   12900:	addhi	r3, r1, r4
   12904:	cmp	r3, r8
   12908:	cmpls	r5, r3
   1290c:	movcs	r3, r8
   12910:	sub	r1, r3, r6
   12914:	cmp	r1, #0
   12918:	bge	12928 <__assert_fail@plt+0x1800>
   1291c:	add	r3, r6, #-2147483648	; 0x80000000
   12920:	cmp	r5, r3
   12924:	beq	129f8 <__assert_fail@plt+0x18d0>
   12928:	mov	r1, r3
   1292c:	mov	r0, r7
   12930:	str	r2, [sp, #20]
   12934:	sub	r9, r3, r4
   12938:	str	r3, [sp, #16]
   1293c:	bl	14bd8 <__assert_fail@plt+0x3ab0>
   12940:	cmp	r0, #0
   12944:	beq	129f8 <__assert_fail@plt+0x18d0>
   12948:	ldr	r3, [sp, #16]
   1294c:	ldr	r2, [sp, #20]
   12950:	add	r4, r0, r4
   12954:	mov	r5, r3
   12958:	mov	r7, r0
   1295c:	cmp	r9, #1
   12960:	bls	129a0 <__assert_fail@plt+0x1878>
   12964:	ldr	r1, [sp, #28]
   12968:	sub	r3, r9, #1
   1296c:	cmp	r3, r1
   12970:	movcs	r3, r1
   12974:	cmp	fp, #0
   12978:	strbeq	r2, [r4]
   1297c:	beq	12998 <__assert_fail@plt+0x1870>
   12980:	mov	r2, r3
   12984:	mov	r1, fp
   12988:	mov	r0, r4
   1298c:	str	r3, [sp, #16]
   12990:	bl	10edc <memcpy@plt>
   12994:	ldr	r3, [sp, #16]
   12998:	add	r4, r4, r3
   1299c:	sub	r9, r9, r3
   129a0:	cmp	fp, #0
   129a4:	bne	12a30 <__assert_fail@plt+0x1908>
   129a8:	cmp	sl, #0
   129ac:	beq	12888 <__assert_fail@plt+0x1760>
   129b0:	add	r0, r7, r6
   129b4:	sub	r0, r4, r0
   129b8:	mov	r3, #0
   129bc:	strb	r3, [r4]
   129c0:	ldr	r3, [sp, #8]
   129c4:	cmp	r0, #0
   129c8:	str	r7, [r3]
   129cc:	ldr	r3, [sp, #12]
   129d0:	str	r5, [r3]
   129d4:	bne	12834 <__assert_fail@plt+0x170c>
   129d8:	b	12830 <__assert_fail@plt+0x1708>
   129dc:	ldr	r0, [sp, #80]	; 0x50
   129e0:	bl	10f18 <getc_unlocked@plt>
   129e4:	cmn	r0, #1
   129e8:	mov	r2, r0
   129ec:	bne	12a00 <__assert_fail@plt+0x18d8>
   129f0:	cmp	r4, r7
   129f4:	bne	129b0 <__assert_fail@plt+0x1888>
   129f8:	mvn	r0, #0
   129fc:	b	129c0 <__assert_fail@plt+0x1898>
   12a00:	ldr	r3, [sp, #72]	; 0x48
   12a04:	ldr	r1, [sp, #76]	; 0x4c
   12a08:	cmp	r1, r0
   12a0c:	cmpne	r3, r0
   12a10:	mov	r3, #1
   12a14:	moveq	sl, #1
   12a18:	movne	sl, #0
   12a1c:	str	r3, [sp, #28]
   12a20:	b	128d4 <__assert_fail@plt+0x17ac>
   12a24:	ldr	sl, [sp, #4]
   12a28:	mov	r2, #0
   12a2c:	b	128d4 <__assert_fail@plt+0x17ac>
   12a30:	ldr	r1, [sp, #28]
   12a34:	ldr	r0, [sp, #80]	; 0x50
   12a38:	bl	14cd4 <__assert_fail@plt+0x3bac>
   12a3c:	cmp	r0, #0
   12a40:	beq	129a8 <__assert_fail@plt+0x1880>
   12a44:	b	129f8 <__assert_fail@plt+0x18d0>
   12a48:	push	{r4, r5, r6, r7, r8, r9, lr}
   12a4c:	uxtb	r4, r1
   12a50:	uxtb	r5, r2
   12a54:	cmp	r4, r5
   12a58:	movne	ip, r0
   12a5c:	bne	12a84 <__assert_fail@plt+0x195c>
   12a60:	mov	r1, r4
   12a64:	mov	r2, r3
   12a68:	pop	{r4, r5, r6, r7, r8, r9, lr}
   12a6c:	b	1105c <memchr@plt>
   12a70:	ldrb	lr, [ip], #1
   12a74:	cmp	r5, lr
   12a78:	cmpne	r4, lr
   12a7c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   12a80:	sub	r3, r3, #1
   12a84:	cmp	r3, #0
   12a88:	mov	r0, ip
   12a8c:	beq	12a98 <__assert_fail@plt+0x1970>
   12a90:	tst	ip, #3
   12a94:	bne	12a70 <__assert_fail@plt+0x1948>
   12a98:	ldr	r0, [pc, #136]	; 12b28 <__assert_fail@plt+0x1a00>
   12a9c:	ldr	r7, [pc, #136]	; 12b2c <__assert_fail@plt+0x1a04>
   12aa0:	and	r1, r0, r1, lsl #8
   12aa4:	and	r2, r0, r2, lsl #8
   12aa8:	orr	lr, r1, r4
   12aac:	orr	r2, r2, r5
   12ab0:	ldr	r8, [pc, #120]	; 12b30 <__assert_fail@plt+0x1a08>
   12ab4:	orr	lr, lr, lr, lsl #16
   12ab8:	orr	r2, r2, r2, lsl #16
   12abc:	cmp	r3, #3
   12ac0:	bhi	12adc <__assert_fail@plt+0x19b4>
   12ac4:	add	r3, ip, r3
   12ac8:	cmp	ip, r3
   12acc:	mov	r0, ip
   12ad0:	bne	12b14 <__assert_fail@plt+0x19ec>
   12ad4:	mov	r0, #0
   12ad8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12adc:	mov	r6, ip
   12ae0:	ldr	r0, [r6], #4
   12ae4:	eor	r9, lr, r0
   12ae8:	add	r1, r9, r7
   12aec:	eor	r0, r0, r2
   12af0:	bic	r1, r1, r9
   12af4:	add	r9, r0, r7
   12af8:	bic	r0, r9, r0
   12afc:	orr	r1, r1, r0
   12b00:	tst	r1, r8
   12b04:	bne	12ac4 <__assert_fail@plt+0x199c>
   12b08:	sub	r3, r3, #4
   12b0c:	mov	ip, r6
   12b10:	b	12abc <__assert_fail@plt+0x1994>
   12b14:	ldrb	r2, [ip], #1
   12b18:	cmp	r4, r2
   12b1c:	cmpne	r5, r2
   12b20:	bne	12ac8 <__assert_fail@plt+0x19a0>
   12b24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12b28:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   12b2c:	mrc2	14, 7, pc, cr14, cr15, {7}
   12b30:	addhi	r8, r0, r0, lsl #1
   12b34:	push	{r4, r5, r6, lr}
   12b38:	subs	r5, r0, #0
   12b3c:	bne	12b54 <__assert_fail@plt+0x1a2c>
   12b40:	ldr	r3, [pc, #124]	; 12bc4 <__assert_fail@plt+0x1a9c>
   12b44:	ldr	r0, [pc, #124]	; 12bc8 <__assert_fail@plt+0x1aa0>
   12b48:	ldr	r1, [r3]
   12b4c:	bl	110e0 <fputs@plt>
   12b50:	bl	110f8 <abort@plt>
   12b54:	mov	r1, #47	; 0x2f
   12b58:	bl	11098 <strrchr@plt>
   12b5c:	cmp	r0, #0
   12b60:	addne	r4, r0, #1
   12b64:	moveq	r4, r5
   12b68:	sub	r3, r4, r5
   12b6c:	cmp	r3, #6
   12b70:	ble	12bb0 <__assert_fail@plt+0x1a88>
   12b74:	mov	r2, #7
   12b78:	ldr	r1, [pc, #76]	; 12bcc <__assert_fail@plt+0x1aa4>
   12b7c:	sub	r0, r4, #7
   12b80:	bl	110ec <strncmp@plt>
   12b84:	cmp	r0, #0
   12b88:	bne	12bb0 <__assert_fail@plt+0x1a88>
   12b8c:	mov	r2, #3
   12b90:	ldr	r1, [pc, #56]	; 12bd0 <__assert_fail@plt+0x1aa8>
   12b94:	mov	r0, r4
   12b98:	bl	110ec <strncmp@plt>
   12b9c:	cmp	r0, #0
   12ba0:	movne	r5, r4
   12ba4:	ldreq	r3, [pc, #40]	; 12bd4 <__assert_fail@plt+0x1aac>
   12ba8:	addeq	r5, r4, #3
   12bac:	streq	r5, [r3]
   12bb0:	ldr	r3, [pc, #32]	; 12bd8 <__assert_fail@plt+0x1ab0>
   12bb4:	str	r5, [r3]
   12bb8:	ldr	r3, [pc, #28]	; 12bdc <__assert_fail@plt+0x1ab4>
   12bbc:	str	r5, [r3]
   12bc0:	pop	{r4, r5, r6, pc}
   12bc4:	andeq	r7, r2, r8, ror #2
   12bc8:	andeq	r6, r1, r9, ror #1
   12bcc:	andeq	r6, r1, r1, lsr #2
   12bd0:	andeq	r6, r1, r9, lsr #2
   12bd4:	andeq	r7, r2, r8, asr r1
   12bd8:			; <UNDEFINED> instruction: 0x000271b8
   12bdc:	andeq	r7, r2, ip, asr r1
   12be0:	push	{r4, r5, r6, lr}
   12be4:	mov	r2, #48	; 0x30
   12be8:	mov	r5, r1
   12bec:	mov	r1, #0
   12bf0:	mov	r4, r0
   12bf4:	bl	11020 <memset@plt>
   12bf8:	cmp	r5, #10
   12bfc:	bne	12c04 <__assert_fail@plt+0x1adc>
   12c00:	bl	110f8 <abort@plt>
   12c04:	str	r5, [r4]
   12c08:	mov	r0, r4
   12c0c:	pop	{r4, r5, r6, pc}
   12c10:	push	{r4, r5, r6, lr}
   12c14:	mov	r4, r0
   12c18:	mov	r5, r1
   12c1c:	bl	14e0c <__assert_fail@plt+0x3ce4>
   12c20:	ldrb	r3, [r0]
   12c24:	bic	r3, r3, #32
   12c28:	cmp	r3, #85	; 0x55
   12c2c:	bne	12c9c <__assert_fail@plt+0x1b74>
   12c30:	ldrb	r3, [r0, #1]
   12c34:	bic	r3, r3, #32
   12c38:	cmp	r3, #84	; 0x54
   12c3c:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12c40:	ldrb	r3, [r0, #2]
   12c44:	bic	r3, r3, #32
   12c48:	cmp	r3, #70	; 0x46
   12c4c:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12c50:	ldrb	r3, [r0, #3]
   12c54:	cmp	r3, #45	; 0x2d
   12c58:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12c5c:	ldrb	r3, [r0, #4]
   12c60:	cmp	r3, #56	; 0x38
   12c64:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12c68:	ldrb	r3, [r0, #5]
   12c6c:	cmp	r3, #0
   12c70:	beq	12c88 <__assert_fail@plt+0x1b60>
   12c74:	ldr	r1, [pc, #144]	; 12d0c <__assert_fail@plt+0x1be4>
   12c78:	ldr	r0, [pc, #144]	; 12d10 <__assert_fail@plt+0x1be8>
   12c7c:	cmp	r5, #9
   12c80:	movne	r0, r1
   12c84:	pop	{r4, r5, r6, pc}
   12c88:	ldrb	r3, [r4]
   12c8c:	ldr	r1, [pc, #128]	; 12d14 <__assert_fail@plt+0x1bec>
   12c90:	ldr	r0, [pc, #128]	; 12d18 <__assert_fail@plt+0x1bf0>
   12c94:	cmp	r3, #96	; 0x60
   12c98:	b	12c80 <__assert_fail@plt+0x1b58>
   12c9c:	cmp	r3, #71	; 0x47
   12ca0:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12ca4:	ldrb	r3, [r0, #1]
   12ca8:	bic	r3, r3, #32
   12cac:	cmp	r3, #66	; 0x42
   12cb0:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12cb4:	ldrb	r3, [r0, #2]
   12cb8:	cmp	r3, #49	; 0x31
   12cbc:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12cc0:	ldrb	r3, [r0, #3]
   12cc4:	cmp	r3, #56	; 0x38
   12cc8:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12ccc:	ldrb	r3, [r0, #4]
   12cd0:	cmp	r3, #48	; 0x30
   12cd4:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12cd8:	ldrb	r3, [r0, #5]
   12cdc:	cmp	r3, #51	; 0x33
   12ce0:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12ce4:	ldrb	r3, [r0, #6]
   12ce8:	cmp	r3, #48	; 0x30
   12cec:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12cf0:	ldrb	r3, [r0, #7]
   12cf4:	cmp	r3, #0
   12cf8:	bne	12c74 <__assert_fail@plt+0x1b4c>
   12cfc:	ldrb	r3, [r4]
   12d00:	ldr	r1, [pc, #20]	; 12d1c <__assert_fail@plt+0x1bf4>
   12d04:	ldr	r0, [pc, #20]	; 12d20 <__assert_fail@plt+0x1bf8>
   12d08:	b	12c94 <__assert_fail@plt+0x1b6c>
   12d0c:	muleq	r1, r5, r1
   12d10:	muleq	r1, r3, r1
   12d14:	andeq	r6, r1, r8, lsl #3
   12d18:	andeq	r6, r1, r4, lsl #3
   12d1c:	muleq	r1, r0, r1
   12d20:	andeq	r6, r1, ip, lsl #3
   12d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d28:	sub	sp, sp, #108	; 0x6c
   12d2c:	mov	r8, r0
   12d30:	str	r3, [sp, #36]	; 0x24
   12d34:	mov	r5, r1
   12d38:	str	r2, [sp, #44]	; 0x2c
   12d3c:	ldr	sl, [sp, #144]	; 0x90
   12d40:	bl	10f60 <__ctype_get_mb_cur_max@plt>
   12d44:	ldr	r3, [sp, #148]	; 0x94
   12d48:	mov	r7, #0
   12d4c:	str	r7, [sp, #48]	; 0x30
   12d50:	lsr	r6, r3, #1
   12d54:	and	r6, r6, #1
   12d58:	mov	r3, #1
   12d5c:	str	r3, [sp, #72]	; 0x48
   12d60:	str	r7, [sp, #24]
   12d64:	str	r7, [sp, #32]
   12d68:	str	r7, [sp, #40]	; 0x28
   12d6c:	str	r7, [sp, #60]	; 0x3c
   12d70:	str	r0, [sp, #76]	; 0x4c
   12d74:	cmp	sl, #10
   12d78:	ldrls	pc, [pc, sl, lsl #2]
   12d7c:	b	12fb8 <__assert_fail@plt+0x1e90>
   12d80:	andeq	r2, r1, ip, lsr #27
   12d84:	andeq	r3, r1, r0, asr #20
   12d88:	andeq	r2, r1, r4, lsl #31
   12d8c:	ldrdeq	r2, [r1], -r0
   12d90:	andeq	r2, r1, r0, ror #30
   12d94:			; <UNDEFINED> instruction: 0x00012db8
   12d98:	andeq	r3, r1, r0, lsr #20
   12d9c:			; <UNDEFINED> instruction: 0x00012fbc
   12da0:			; <UNDEFINED> instruction: 0x00012eb0
   12da4:			; <UNDEFINED> instruction: 0x00012eb0
   12da8:			; <UNDEFINED> instruction: 0x00012eb0
   12dac:	mov	r6, #0
   12db0:	mov	r4, #0
   12db4:	b	12de4 <__assert_fail@plt+0x1cbc>
   12db8:	cmp	r6, #0
   12dbc:	bne	12fe0 <__assert_fail@plt+0x1eb8>
   12dc0:	cmp	r5, #0
   12dc4:	movne	r3, #34	; 0x22
   12dc8:	strbne	r3, [r8]
   12dcc:	mov	r3, #1
   12dd0:	str	r3, [sp, #24]
   12dd4:	str	r3, [sp, #32]
   12dd8:	mov	r4, #1
   12ddc:	ldr	r3, [pc, #3172]	; 13a48 <__assert_fail@plt+0x2920>
   12de0:	str	r3, [sp, #40]	; 0x28
   12de4:	mov	r9, r5
   12de8:	mov	r3, #0
   12dec:	str	r7, [sp, #68]	; 0x44
   12df0:	str	r3, [sp, #28]
   12df4:	ldr	r3, [sp, #36]	; 0x24
   12df8:	cmn	r3, #1
   12dfc:	bne	1398c <__assert_fail@plt+0x2864>
   12e00:	ldr	r3, [sp, #44]	; 0x2c
   12e04:	ldr	r2, [sp, #28]
   12e08:	ldrb	r3, [r3, r2]
   12e0c:	adds	r3, r3, #0
   12e10:	movne	r3, #1
   12e14:	str	r3, [sp, #52]	; 0x34
   12e18:	ldr	r3, [sp, #52]	; 0x34
   12e1c:	cmp	r3, #0
   12e20:	bne	13008 <__assert_fail@plt+0x1ee0>
   12e24:	sub	r2, sl, #2
   12e28:	clz	r2, r2
   12e2c:	lsr	r2, r2, #5
   12e30:	and	r3, r6, r2
   12e34:	cmp	r4, #0
   12e38:	movne	r3, #0
   12e3c:	andeq	r3, r3, #1
   12e40:	cmp	r3, #0
   12e44:	bne	131d0 <__assert_fail@plt+0x20a8>
   12e48:	eor	r3, r6, #1
   12e4c:	ands	r2, r2, r3
   12e50:	beq	139c4 <__assert_fail@plt+0x289c>
   12e54:	ldr	r3, [sp, #68]	; 0x44
   12e58:	cmp	r3, #0
   12e5c:	beq	139fc <__assert_fail@plt+0x28d4>
   12e60:	ldr	r3, [sp, #72]	; 0x48
   12e64:	cmp	r3, #0
   12e68:	beq	139a0 <__assert_fail@plt+0x2878>
   12e6c:	ldr	r3, [sp, #160]	; 0xa0
   12e70:	ldr	r2, [sp, #44]	; 0x2c
   12e74:	str	r3, [sp, #16]
   12e78:	ldr	r3, [sp, #156]	; 0x9c
   12e7c:	ldr	r1, [sp, #60]	; 0x3c
   12e80:	str	r3, [sp, #12]
   12e84:	ldr	r3, [sp, #152]	; 0x98
   12e88:	str	r3, [sp, #8]
   12e8c:	ldr	r3, [sp, #148]	; 0x94
   12e90:	str	r3, [sp, #4]
   12e94:	mov	r3, #5
   12e98:	str	r3, [sp]
   12e9c:	ldr	r3, [sp, #36]	; 0x24
   12ea0:	mov	r0, r8
   12ea4:	bl	12d24 <__assert_fail@plt+0x1bfc>
   12ea8:	mov	r4, r0
   12eac:	b	139f0 <__assert_fail@plt+0x28c8>
   12eb0:	cmp	sl, #10
   12eb4:	beq	12f10 <__assert_fail@plt+0x1de8>
   12eb8:	ldr	r4, [pc, #2956]	; 13a4c <__assert_fail@plt+0x2924>
   12ebc:	mov	r2, #5
   12ec0:	mov	r1, r4
   12ec4:	mov	r0, #0
   12ec8:	bl	10f24 <dcgettext@plt>
   12ecc:	cmp	r0, r4
   12ed0:	str	r0, [sp, #156]	; 0x9c
   12ed4:	bne	12ee4 <__assert_fail@plt+0x1dbc>
   12ed8:	mov	r1, sl
   12edc:	bl	12c10 <__assert_fail@plt+0x1ae8>
   12ee0:	str	r0, [sp, #156]	; 0x9c
   12ee4:	ldr	r4, [pc, #2916]	; 13a50 <__assert_fail@plt+0x2928>
   12ee8:	mov	r2, #5
   12eec:	mov	r1, r4
   12ef0:	mov	r0, #0
   12ef4:	bl	10f24 <dcgettext@plt>
   12ef8:	cmp	r0, r4
   12efc:	str	r0, [sp, #160]	; 0xa0
   12f00:	bne	12f10 <__assert_fail@plt+0x1de8>
   12f04:	mov	r1, sl
   12f08:	bl	12c10 <__assert_fail@plt+0x1ae8>
   12f0c:	str	r0, [sp, #160]	; 0xa0
   12f10:	cmp	r6, #0
   12f14:	moveq	r4, r6
   12f18:	beq	12f30 <__assert_fail@plt+0x1e08>
   12f1c:	mov	r4, #0
   12f20:	b	12f40 <__assert_fail@plt+0x1e18>
   12f24:	cmp	r5, r4
   12f28:	strbhi	r3, [r8, r4]
   12f2c:	add	r4, r4, #1
   12f30:	ldr	r3, [sp, #156]	; 0x9c
   12f34:	ldrb	r3, [r3, r4]
   12f38:	cmp	r3, #0
   12f3c:	bne	12f24 <__assert_fail@plt+0x1dfc>
   12f40:	ldr	r0, [sp, #160]	; 0xa0
   12f44:	bl	10ff0 <strlen@plt>
   12f48:	ldr	r3, [sp, #160]	; 0xa0
   12f4c:	str	r3, [sp, #40]	; 0x28
   12f50:	mov	r3, #1
   12f54:	str	r3, [sp, #24]
   12f58:	str	r0, [sp, #32]
   12f5c:	b	12de4 <__assert_fail@plt+0x1cbc>
   12f60:	mov	r3, #1
   12f64:	cmp	r6, #0
   12f68:	streq	r3, [sp, #24]
   12f6c:	beq	12f8c <__assert_fail@plt+0x1e64>
   12f70:	str	r3, [sp, #32]
   12f74:	ldr	r3, [pc, #2772]	; 13a50 <__assert_fail@plt+0x2928>
   12f78:	mov	r4, #0
   12f7c:	str	r3, [sp, #40]	; 0x28
   12f80:	b	12fb0 <__assert_fail@plt+0x1e88>
   12f84:	cmp	r6, #0
   12f88:	bne	12ff8 <__assert_fail@plt+0x1ed0>
   12f8c:	cmp	r5, #0
   12f90:	movne	r3, #39	; 0x27
   12f94:	strbne	r3, [r8]
   12f98:	mov	r3, #1
   12f9c:	str	r3, [sp, #32]
   12fa0:	mov	r6, #0
   12fa4:	ldr	r3, [pc, #2724]	; 13a50 <__assert_fail@plt+0x2928>
   12fa8:	mov	r4, #1
   12fac:	str	r3, [sp, #40]	; 0x28
   12fb0:	mov	sl, #2
   12fb4:	b	12de4 <__assert_fail@plt+0x1cbc>
   12fb8:	bl	110f8 <abort@plt>
   12fbc:	mov	r6, #0
   12fc0:	mov	r3, #1
   12fc4:	str	r3, [sp, #24]
   12fc8:	mov	r4, r6
   12fcc:	b	12de4 <__assert_fail@plt+0x1cbc>
   12fd0:	mov	r6, #1
   12fd4:	str	r6, [sp, #24]
   12fd8:	str	r6, [sp, #32]
   12fdc:	b	12f74 <__assert_fail@plt+0x1e4c>
   12fe0:	mov	r3, #1
   12fe4:	str	r3, [sp, #32]
   12fe8:	ldr	r3, [pc, #2648]	; 13a48 <__assert_fail@plt+0x2920>
   12fec:	str	r6, [sp, #24]
   12ff0:	str	r3, [sp, #40]	; 0x28
   12ff4:	b	12db0 <__assert_fail@plt+0x1c88>
   12ff8:	mov	r3, #1
   12ffc:	str	r3, [sp, #32]
   13000:	ldr	r3, [pc, #2632]	; 13a50 <__assert_fail@plt+0x2928>
   13004:	b	12ff0 <__assert_fail@plt+0x1ec8>
   13008:	ldr	r3, [sp, #32]
   1300c:	ldr	fp, [sp, #24]
   13010:	cmp	sl, #2
   13014:	moveq	fp, #0
   13018:	andne	fp, fp, #1
   1301c:	adds	r5, r3, #0
   13020:	movne	r5, #1
   13024:	ands	r3, r5, fp
   13028:	str	r3, [sp, #64]	; 0x40
   1302c:	beq	130fc <__assert_fail@plt+0x1fd4>
   13030:	ldr	r2, [sp, #32]
   13034:	ldr	r3, [sp, #28]
   13038:	add	r7, r3, r2
   1303c:	mov	r3, r2
   13040:	ldr	r2, [sp, #36]	; 0x24
   13044:	cmp	r3, #1
   13048:	movls	r3, #0
   1304c:	movhi	r3, #1
   13050:	cmn	r2, #1
   13054:	movne	r3, #0
   13058:	cmp	r3, #0
   1305c:	beq	1306c <__assert_fail@plt+0x1f44>
   13060:	ldr	r0, [sp, #44]	; 0x2c
   13064:	bl	10ff0 <strlen@plt>
   13068:	str	r0, [sp, #36]	; 0x24
   1306c:	ldr	r3, [sp, #36]	; 0x24
   13070:	cmp	r3, r7
   13074:	bcc	130f4 <__assert_fail@plt+0x1fcc>
   13078:	ldr	r3, [sp, #44]	; 0x2c
   1307c:	ldr	r0, [sp, #28]
   13080:	ldr	r2, [sp, #32]
   13084:	ldr	r1, [sp, #40]	; 0x28
   13088:	add	r0, r3, r0
   1308c:	bl	10f00 <memcmp@plt>
   13090:	cmp	r0, #0
   13094:	bne	130f4 <__assert_fail@plt+0x1fcc>
   13098:	cmp	r6, #0
   1309c:	beq	130fc <__assert_fail@plt+0x1fd4>
   130a0:	str	r6, [sp, #24]
   130a4:	ldr	r3, [sp, #24]
   130a8:	ldr	r2, [sp, #44]	; 0x2c
   130ac:	cmp	sl, #2
   130b0:	movne	r3, #0
   130b4:	andeq	r3, r3, #1
   130b8:	cmp	r3, #0
   130bc:	ldr	r3, [sp, #160]	; 0xa0
   130c0:	movne	sl, #4
   130c4:	str	r3, [sp, #16]
   130c8:	ldr	r3, [sp, #156]	; 0x9c
   130cc:	str	sl, [sp]
   130d0:	str	r3, [sp, #12]
   130d4:	mov	r3, #0
   130d8:	str	r3, [sp, #8]
   130dc:	ldr	r3, [sp, #148]	; 0x94
   130e0:	mov	r1, r9
   130e4:	bic	r3, r3, #2
   130e8:	str	r3, [sp, #4]
   130ec:	ldr	r3, [sp, #36]	; 0x24
   130f0:	b	12ea0 <__assert_fail@plt+0x1d78>
   130f4:	mov	r3, #0
   130f8:	str	r3, [sp, #64]	; 0x40
   130fc:	ldr	r2, [sp, #28]
   13100:	ldr	r3, [sp, #44]	; 0x2c
   13104:	add	r3, r3, r2
   13108:	str	r3, [sp, #80]	; 0x50
   1310c:	ldr	r3, [sp, #44]	; 0x2c
   13110:	ldrb	r7, [r3, r2]
   13114:	cmp	r7, #58	; 0x3a
   13118:	bhi	13280 <__assert_fail@plt+0x2158>
   1311c:	cmp	r7, #43	; 0x2b
   13120:	bcs	132d4 <__assert_fail@plt+0x21ac>
   13124:	cmp	r7, #32
   13128:	beq	1332c <__assert_fail@plt+0x2204>
   1312c:	bhi	131d8 <__assert_fail@plt+0x20b0>
   13130:	cmp	r7, #9
   13134:	beq	135e0 <__assert_fail@plt+0x24b8>
   13138:	bhi	1319c <__assert_fail@plt+0x2074>
   1313c:	cmp	r7, #7
   13140:	beq	1368c <__assert_fail@plt+0x2564>
   13144:	bhi	13348 <__assert_fail@plt+0x2220>
   13148:	cmp	r7, #0
   1314c:	beq	13364 <__assert_fail@plt+0x223c>
   13150:	ldr	r3, [sp, #76]	; 0x4c
   13154:	cmp	r3, #1
   13158:	bne	136d0 <__assert_fail@plt+0x25a8>
   1315c:	bl	10fd8 <__ctype_b_loc@plt>
   13160:	sxth	r3, r7
   13164:	lsl	r3, r3, #1
   13168:	ldr	r2, [r0]
   1316c:	ldrh	r5, [r2, r3]
   13170:	ldr	r3, [sp, #76]	; 0x4c
   13174:	str	r3, [sp, #56]	; 0x38
   13178:	lsr	r5, r5, #14
   1317c:	and	r5, r5, #1
   13180:	ldr	r3, [sp, #24]
   13184:	eor	fp, r5, #1
   13188:	and	fp, fp, r3
   1318c:	ands	fp, fp, #255	; 0xff
   13190:	beq	13518 <__assert_fail@plt+0x23f0>
   13194:	mov	r5, #0
   13198:	b	1377c <__assert_fail@plt+0x2654>
   1319c:	cmp	r7, #11
   131a0:	beq	135e8 <__assert_fail@plt+0x24c0>
   131a4:	bcc	13684 <__assert_fail@plt+0x255c>
   131a8:	cmp	r7, #12
   131ac:	beq	13694 <__assert_fail@plt+0x256c>
   131b0:	cmp	r7, #13
   131b4:	moveq	r3, #114	; 0x72
   131b8:	bne	13150 <__assert_fail@plt+0x2028>
   131bc:	cmp	sl, #2
   131c0:	movne	r2, #0
   131c4:	andeq	r2, r6, #1
   131c8:	cmp	r2, #0
   131cc:	beq	1334c <__assert_fail@plt+0x2224>
   131d0:	mov	sl, #2
   131d4:	b	130a4 <__assert_fail@plt+0x1f7c>
   131d8:	cmp	r7, #37	; 0x25
   131dc:	beq	132d4 <__assert_fail@plt+0x21ac>
   131e0:	bhi	131f4 <__assert_fail@plt+0x20cc>
   131e4:	cmp	r7, #35	; 0x23
   131e8:	beq	13320 <__assert_fail@plt+0x21f8>
   131ec:	mov	r5, #0
   131f0:	b	13330 <__assert_fail@plt+0x2208>
   131f4:	cmp	r7, #39	; 0x27
   131f8:	bne	131ec <__assert_fail@plt+0x20c4>
   131fc:	cmp	sl, #2
   13200:	ldrne	r5, [sp, #52]	; 0x34
   13204:	movne	r3, r5
   13208:	strne	r3, [sp, #68]	; 0x44
   1320c:	bne	132d8 <__assert_fail@plt+0x21b0>
   13210:	cmp	r6, #0
   13214:	bne	130a4 <__assert_fail@plt+0x1f7c>
   13218:	ldr	r2, [sp, #60]	; 0x3c
   1321c:	adds	r3, r9, #0
   13220:	movne	r3, #1
   13224:	cmp	r2, #0
   13228:	movne	r3, #0
   1322c:	cmp	r3, #0
   13230:	strne	r9, [sp, #60]	; 0x3c
   13234:	movne	r9, #0
   13238:	bne	13248 <__assert_fail@plt+0x2120>
   1323c:	cmp	r9, r4
   13240:	movhi	r3, #39	; 0x27
   13244:	strbhi	r3, [r8, r4]
   13248:	add	r3, r4, #1
   1324c:	cmp	r3, r9
   13250:	movcc	r2, #92	; 0x5c
   13254:	strbcc	r2, [r8, r3]
   13258:	add	r3, r4, #2
   1325c:	cmp	r3, r9
   13260:	ldr	r5, [sp, #52]	; 0x34
   13264:	movcc	r2, #39	; 0x27
   13268:	strbcc	r2, [r8, r3]
   1326c:	add	r4, r4, #3
   13270:	mov	fp, r6
   13274:	str	r5, [sp, #68]	; 0x44
   13278:	str	r6, [sp, #48]	; 0x30
   1327c:	b	13518 <__assert_fail@plt+0x23f0>
   13280:	cmp	r7, #94	; 0x5e
   13284:	beq	131ec <__assert_fail@plt+0x20c4>
   13288:	bhi	132e0 <__assert_fail@plt+0x21b8>
   1328c:	cmp	r7, #90	; 0x5a
   13290:	bhi	132c8 <__assert_fail@plt+0x21a0>
   13294:	cmp	r7, #65	; 0x41
   13298:	bcs	132d4 <__assert_fail@plt+0x21ac>
   1329c:	cmp	r7, #62	; 0x3e
   132a0:	bls	131ec <__assert_fail@plt+0x20c4>
   132a4:	cmp	r7, #63	; 0x3f
   132a8:	bne	13150 <__assert_fail@plt+0x2028>
   132ac:	cmp	sl, #2
   132b0:	beq	13454 <__assert_fail@plt+0x232c>
   132b4:	cmp	sl, #5
   132b8:	beq	13464 <__assert_fail@plt+0x233c>
   132bc:	mov	fp, #0
   132c0:	mov	r5, fp
   132c4:	b	13518 <__assert_fail@plt+0x23f0>
   132c8:	cmp	r7, #92	; 0x5c
   132cc:	beq	135f0 <__assert_fail@plt+0x24c8>
   132d0:	bls	131ec <__assert_fail@plt+0x20c4>
   132d4:	ldr	r5, [sp, #52]	; 0x34
   132d8:	mov	fp, #0
   132dc:	b	13518 <__assert_fail@plt+0x23f0>
   132e0:	cmp	r7, #122	; 0x7a
   132e4:	bhi	13304 <__assert_fail@plt+0x21dc>
   132e8:	cmp	r7, #97	; 0x61
   132ec:	bcs	132d4 <__assert_fail@plt+0x21ac>
   132f0:	cmp	r7, #95	; 0x5f
   132f4:	beq	132d4 <__assert_fail@plt+0x21ac>
   132f8:	cmp	r7, #96	; 0x60
   132fc:	bne	13150 <__assert_fail@plt+0x2028>
   13300:	b	131ec <__assert_fail@plt+0x20c4>
   13304:	cmp	r7, #124	; 0x7c
   13308:	beq	131ec <__assert_fail@plt+0x20c4>
   1330c:	bcc	1369c <__assert_fail@plt+0x2574>
   13310:	cmp	r7, #125	; 0x7d
   13314:	beq	1369c <__assert_fail@plt+0x2574>
   13318:	cmp	r7, #126	; 0x7e
   1331c:	bne	13150 <__assert_fail@plt+0x2028>
   13320:	ldr	r3, [sp, #28]
   13324:	cmp	r3, #0
   13328:	bne	1345c <__assert_fail@plt+0x2334>
   1332c:	ldr	r5, [sp, #52]	; 0x34
   13330:	cmp	sl, #2
   13334:	movne	fp, #0
   13338:	andeq	fp, r6, #1
   1333c:	cmp	fp, #0
   13340:	beq	13518 <__assert_fail@plt+0x23f0>
   13344:	b	131d0 <__assert_fail@plt+0x20a8>
   13348:	mov	r3, #98	; 0x62
   1334c:	ldr	r2, [sp, #24]
   13350:	cmp	r2, #0
   13354:	beq	1345c <__assert_fail@plt+0x2334>
   13358:	mov	r7, r3
   1335c:	mov	r5, #0
   13360:	b	13570 <__assert_fail@plt+0x2448>
   13364:	ldr	r3, [sp, #24]
   13368:	cmp	r3, #0
   1336c:	beq	13438 <__assert_fail@plt+0x2310>
   13370:	cmp	r6, #0
   13374:	bne	130a0 <__assert_fail@plt+0x1f78>
   13378:	ldr	r3, [sp, #48]	; 0x30
   1337c:	eor	r2, r3, #1
   13380:	cmp	sl, #2
   13384:	movne	r2, #0
   13388:	andeq	r2, r2, #1
   1338c:	cmp	r2, #0
   13390:	moveq	r3, r4
   13394:	beq	133cc <__assert_fail@plt+0x22a4>
   13398:	cmp	r9, r4
   1339c:	movhi	r3, #39	; 0x27
   133a0:	strbhi	r3, [r8, r4]
   133a4:	add	r3, r4, #1
   133a8:	cmp	r9, r3
   133ac:	movhi	r1, #36	; 0x24
   133b0:	strbhi	r1, [r8, r3]
   133b4:	add	r3, r4, #2
   133b8:	cmp	r9, r3
   133bc:	movhi	r1, #39	; 0x27
   133c0:	strbhi	r1, [r8, r3]
   133c4:	add	r3, r4, #3
   133c8:	str	r2, [sp, #48]	; 0x30
   133cc:	cmp	r9, r3
   133d0:	movhi	r2, #92	; 0x5c
   133d4:	strbhi	r2, [r8, r3]
   133d8:	cmp	fp, #0
   133dc:	add	r4, r3, #1
   133e0:	beq	13970 <__assert_fail@plt+0x2848>
   133e4:	ldr	r2, [sp, #28]
   133e8:	ldr	r1, [sp, #36]	; 0x24
   133ec:	add	r2, r2, #1
   133f0:	cmp	r1, r2
   133f4:	bls	13430 <__assert_fail@plt+0x2308>
   133f8:	ldr	r1, [sp, #44]	; 0x2c
   133fc:	mov	r7, #48	; 0x30
   13400:	ldrb	r2, [r1, r2]
   13404:	sub	r2, r2, #48	; 0x30
   13408:	cmp	r2, #9
   1340c:	movhi	r5, r6
   13410:	bhi	13518 <__assert_fail@plt+0x23f0>
   13414:	cmp	r9, r4
   13418:	add	r2, r3, #2
   1341c:	strbhi	r7, [r8, r4]
   13420:	cmp	r9, r2
   13424:	add	r4, r3, #3
   13428:	movhi	r1, #48	; 0x30
   1342c:	strbhi	r1, [r8, r2]
   13430:	mov	r5, r6
   13434:	b	13978 <__assert_fail@plt+0x2850>
   13438:	ldr	r3, [sp, #148]	; 0x94
   1343c:	tst	r3, #1
   13440:	ldreq	r5, [sp, #24]
   13444:	beq	13984 <__assert_fail@plt+0x285c>
   13448:	ldr	r3, [sp, #28]
   1344c:	add	r3, r3, #1
   13450:	b	12df0 <__assert_fail@plt+0x1cc8>
   13454:	cmp	r6, #0
   13458:	bne	130a4 <__assert_fail@plt+0x1f7c>
   1345c:	mov	r5, #0
   13460:	b	132d8 <__assert_fail@plt+0x21b0>
   13464:	ldr	r3, [sp, #148]	; 0x94
   13468:	tst	r3, #4
   1346c:	beq	1345c <__assert_fail@plt+0x2334>
   13470:	ldr	r3, [sp, #28]
   13474:	add	r2, r3, #2
   13478:	ldr	r3, [sp, #36]	; 0x24
   1347c:	cmp	r3, r2
   13480:	bls	1345c <__assert_fail@plt+0x2334>
   13484:	ldr	r3, [sp, #44]	; 0x2c
   13488:	ldr	r1, [sp, #28]
   1348c:	add	r3, r3, r1
   13490:	ldrb	r0, [r3, #1]
   13494:	cmp	r0, #63	; 0x3f
   13498:	bne	1345c <__assert_fail@plt+0x2334>
   1349c:	ldr	r3, [sp, #44]	; 0x2c
   134a0:	ldrb	r1, [r3, r2]
   134a4:	sub	r3, r1, #33	; 0x21
   134a8:	uxtb	r3, r3
   134ac:	cmp	r3, #29
   134b0:	bhi	13980 <__assert_fail@plt+0x2858>
   134b4:	mov	ip, #1
   134b8:	ldr	r5, [pc, #1428]	; 13a54 <__assert_fail@plt+0x292c>
   134bc:	ands	r5, r5, ip, lsl r3
   134c0:	beq	132d8 <__assert_fail@plt+0x21b0>
   134c4:	cmp	r6, #0
   134c8:	bne	130a4 <__assert_fail@plt+0x1f7c>
   134cc:	add	r3, r4, #1
   134d0:	cmp	r9, r4
   134d4:	strbhi	r0, [r8, r4]
   134d8:	cmp	r9, r3
   134dc:	movhi	r0, #34	; 0x22
   134e0:	strbhi	r0, [r8, r3]
   134e4:	add	r3, r4, #2
   134e8:	cmp	r9, r3
   134ec:	movhi	r0, #34	; 0x22
   134f0:	strbhi	r0, [r8, r3]
   134f4:	add	r3, r4, #3
   134f8:	cmp	r9, r3
   134fc:	add	r4, r4, #4
   13500:	mov	r5, r6
   13504:	mov	fp, r6
   13508:	mov	r7, r1
   1350c:	movhi	r0, #63	; 0x3f
   13510:	strbhi	r0, [r8, r3]
   13514:	str	r2, [sp, #28]
   13518:	ldr	r3, [sp, #24]
   1351c:	eor	r3, r3, #1
   13520:	cmp	sl, #2
   13524:	orreq	r3, r3, #1
   13528:	eor	r3, r3, #1
   1352c:	orr	r3, r6, r3
   13530:	tst	r3, #255	; 0xff
   13534:	beq	13564 <__assert_fail@plt+0x243c>
   13538:	ldr	r3, [sp, #152]	; 0x98
   1353c:	cmp	r3, #0
   13540:	beq	13564 <__assert_fail@plt+0x243c>
   13544:	lsr	r2, r7, #5
   13548:	ldr	r1, [sp, #152]	; 0x98
   1354c:	uxtb	r2, r2
   13550:	and	r3, r7, #31
   13554:	ldr	r2, [r1, r2, lsl #2]
   13558:	lsr	r3, r2, r3
   1355c:	tst	r3, #1
   13560:	bne	13570 <__assert_fail@plt+0x2448>
   13564:	ldr	r3, [sp, #64]	; 0x40
   13568:	cmp	r3, #0
   1356c:	beq	13608 <__assert_fail@plt+0x24e0>
   13570:	cmp	r6, #0
   13574:	bne	130a4 <__assert_fail@plt+0x1f7c>
   13578:	ldr	r3, [sp, #48]	; 0x30
   1357c:	eor	r3, r3, #1
   13580:	cmp	sl, #2
   13584:	movne	r3, #0
   13588:	andeq	r3, r3, #1
   1358c:	cmp	r3, #0
   13590:	beq	135c8 <__assert_fail@plt+0x24a0>
   13594:	cmp	r9, r4
   13598:	movhi	r2, #39	; 0x27
   1359c:	strbhi	r2, [r8, r4]
   135a0:	add	r2, r4, #1
   135a4:	cmp	r9, r2
   135a8:	movhi	r1, #36	; 0x24
   135ac:	strbhi	r1, [r8, r2]
   135b0:	add	r2, r4, #2
   135b4:	cmp	r9, r2
   135b8:	add	r4, r4, #3
   135bc:	movhi	r1, #39	; 0x27
   135c0:	strbhi	r1, [r8, r2]
   135c4:	str	r3, [sp, #48]	; 0x30
   135c8:	cmp	r9, r4
   135cc:	movhi	r3, #92	; 0x5c
   135d0:	strbhi	r3, [r8, r4]
   135d4:	ldr	fp, [sp, #52]	; 0x34
   135d8:	add	r4, r4, #1
   135dc:	b	13608 <__assert_fail@plt+0x24e0>
   135e0:	mov	r3, #116	; 0x74
   135e4:	b	131bc <__assert_fail@plt+0x2094>
   135e8:	mov	r3, #118	; 0x76
   135ec:	b	1334c <__assert_fail@plt+0x2224>
   135f0:	cmp	sl, #2
   135f4:	bne	13664 <__assert_fail@plt+0x253c>
   135f8:	cmp	r6, #0
   135fc:	bne	130a4 <__assert_fail@plt+0x1f7c>
   13600:	mov	r5, r6
   13604:	mov	fp, r6
   13608:	ldr	r3, [sp, #48]	; 0x30
   1360c:	eor	fp, fp, #1
   13610:	and	fp, fp, r3
   13614:	tst	fp, #255	; 0xff
   13618:	beq	13644 <__assert_fail@plt+0x251c>
   1361c:	cmp	r9, r4
   13620:	movhi	r3, #39	; 0x27
   13624:	strbhi	r3, [r8, r4]
   13628:	add	r3, r4, #1
   1362c:	cmp	r9, r3
   13630:	movhi	r2, #39	; 0x27
   13634:	add	r4, r4, #2
   13638:	strbhi	r2, [r8, r3]
   1363c:	mov	r3, #0
   13640:	str	r3, [sp, #48]	; 0x30
   13644:	cmp	r9, r4
   13648:	strbhi	r7, [r8, r4]
   1364c:	ldr	r3, [sp, #72]	; 0x48
   13650:	cmp	r5, #0
   13654:	moveq	r3, #0
   13658:	add	r4, r4, #1
   1365c:	str	r3, [sp, #72]	; 0x48
   13660:	b	13448 <__assert_fail@plt+0x2320>
   13664:	ldr	r3, [sp, #24]
   13668:	and	r3, r3, r6
   1366c:	tst	r5, r3
   13670:	moveq	r3, r7
   13674:	beq	131bc <__assert_fail@plt+0x2094>
   13678:	mov	fp, #0
   1367c:	mov	r5, fp
   13680:	b	13608 <__assert_fail@plt+0x24e0>
   13684:	mov	r3, #110	; 0x6e
   13688:	b	131bc <__assert_fail@plt+0x2094>
   1368c:	mov	r3, #97	; 0x61
   13690:	b	1334c <__assert_fail@plt+0x2224>
   13694:	mov	r3, #102	; 0x66
   13698:	b	1334c <__assert_fail@plt+0x2224>
   1369c:	ldr	r3, [sp, #36]	; 0x24
   136a0:	cmn	r3, #1
   136a4:	bne	136c4 <__assert_fail@plt+0x259c>
   136a8:	ldr	r3, [sp, #44]	; 0x2c
   136ac:	ldrb	r3, [r3, #1]
   136b0:	adds	r3, r3, #0
   136b4:	movne	r3, #1
   136b8:	cmp	r3, #0
   136bc:	bne	1345c <__assert_fail@plt+0x2334>
   136c0:	b	13320 <__assert_fail@plt+0x21f8>
   136c4:	ldr	r3, [sp, #36]	; 0x24
   136c8:	subs	r3, r3, #1
   136cc:	b	136b4 <__assert_fail@plt+0x258c>
   136d0:	mov	r3, #0
   136d4:	str	r3, [sp, #96]	; 0x60
   136d8:	str	r3, [sp, #100]	; 0x64
   136dc:	ldr	r3, [sp, #36]	; 0x24
   136e0:	cmn	r3, #1
   136e4:	bne	136f4 <__assert_fail@plt+0x25cc>
   136e8:	ldr	r0, [sp, #44]	; 0x2c
   136ec:	bl	10ff0 <strlen@plt>
   136f0:	str	r0, [sp, #36]	; 0x24
   136f4:	ldr	r5, [sp, #52]	; 0x34
   136f8:	mov	r3, #0
   136fc:	str	r3, [sp, #56]	; 0x38
   13700:	ldr	r3, [sp, #28]
   13704:	ldr	r2, [sp, #56]	; 0x38
   13708:	ldr	r1, [sp, #36]	; 0x24
   1370c:	add	r2, r3, r2
   13710:	ldr	r3, [sp, #44]	; 0x2c
   13714:	add	r0, sp, #92	; 0x5c
   13718:	add	fp, r3, r2
   1371c:	sub	r2, r1, r2
   13720:	add	r3, sp, #96	; 0x60
   13724:	mov	r1, fp
   13728:	bl	14e40 <__assert_fail@plt+0x3d18>
   1372c:	subs	r2, r0, #0
   13730:	beq	13770 <__assert_fail@plt+0x2648>
   13734:	cmn	r2, #1
   13738:	beq	13948 <__assert_fail@plt+0x2820>
   1373c:	cmn	r2, #2
   13740:	bne	138b8 <__assert_fail@plt+0x2790>
   13744:	ldr	r2, [sp, #56]	; 0x38
   13748:	ldr	r3, [sp, #28]
   1374c:	add	r3, r3, r2
   13750:	ldr	r2, [sp, #36]	; 0x24
   13754:	cmp	r2, r3
   13758:	bls	13948 <__assert_fail@plt+0x2820>
   1375c:	ldr	r3, [sp, #80]	; 0x50
   13760:	ldr	r2, [sp, #56]	; 0x38
   13764:	ldrb	r5, [r3, r2]
   13768:	cmp	r5, #0
   1376c:	bne	138a8 <__assert_fail@plt+0x2780>
   13770:	ldr	r3, [sp, #56]	; 0x38
   13774:	cmp	r3, #1
   13778:	bls	13180 <__assert_fail@plt+0x2058>
   1377c:	ldr	r2, [sp, #56]	; 0x38
   13780:	ldr	r3, [sp, #28]
   13784:	mov	fp, #0
   13788:	add	r3, r3, r2
   1378c:	ldr	r2, [sp, #24]
   13790:	str	r3, [sp, #52]	; 0x34
   13794:	eor	r3, r5, #1
   13798:	and	r3, r3, r2
   1379c:	mov	ip, #92	; 0x5c
   137a0:	uxtb	r3, r3
   137a4:	mov	r2, #39	; 0x27
   137a8:	cmp	r3, #0
   137ac:	beq	13950 <__assert_fail@plt+0x2828>
   137b0:	cmp	r6, #0
   137b4:	bne	130a0 <__assert_fail@plt+0x1f78>
   137b8:	ldr	r1, [sp, #48]	; 0x30
   137bc:	eor	r1, r1, #1
   137c0:	cmp	sl, #2
   137c4:	movne	r1, #0
   137c8:	andeq	r1, r1, #1
   137cc:	cmp	r1, #0
   137d0:	beq	13800 <__assert_fail@plt+0x26d8>
   137d4:	add	r0, r4, #1
   137d8:	cmp	r9, r4
   137dc:	strbhi	r2, [r8, r4]
   137e0:	cmp	r9, r0
   137e4:	movhi	lr, #36	; 0x24
   137e8:	strbhi	lr, [r8, r0]
   137ec:	add	r0, r4, #2
   137f0:	add	r4, r4, #3
   137f4:	cmp	r9, r0
   137f8:	strbhi	r2, [r8, r0]
   137fc:	str	r1, [sp, #48]	; 0x30
   13800:	add	r0, r4, #1
   13804:	cmp	r9, r4
   13808:	strbhi	ip, [r8, r4]
   1380c:	cmp	r9, r0
   13810:	lsrhi	r1, r7, #6
   13814:	addhi	r1, r1, #48	; 0x30
   13818:	strbhi	r1, [r8, r0]
   1381c:	add	r0, r4, #2
   13820:	cmp	r9, r0
   13824:	lsrhi	r1, r7, #3
   13828:	and	r7, r7, #7
   1382c:	andhi	r1, r1, #7
   13830:	add	r4, r4, #3
   13834:	add	r7, r7, #48	; 0x30
   13838:	mov	fp, r3
   1383c:	addhi	r1, r1, #48	; 0x30
   13840:	strbhi	r1, [r8, r0]
   13844:	ldr	r1, [sp, #28]
   13848:	ldr	r0, [sp, #52]	; 0x34
   1384c:	add	r1, r1, #1
   13850:	cmp	r0, r1
   13854:	bls	13608 <__assert_fail@plt+0x24e0>
   13858:	ldr	lr, [sp, #48]	; 0x30
   1385c:	eor	r0, fp, #1
   13860:	and	r0, r0, lr
   13864:	tst	r0, #255	; 0xff
   13868:	beq	1388c <__assert_fail@plt+0x2764>
   1386c:	add	r0, r4, #1
   13870:	cmp	r9, r4
   13874:	strbhi	r2, [r8, r4]
   13878:	cmp	r9, r0
   1387c:	add	r4, r4, #2
   13880:	strbhi	r2, [r8, r0]
   13884:	mov	r0, #0
   13888:	str	r0, [sp, #48]	; 0x30
   1388c:	ldr	r0, [sp, #44]	; 0x2c
   13890:	cmp	r9, r4
   13894:	strbhi	r7, [r8, r4]
   13898:	str	r1, [sp, #28]
   1389c:	add	r4, r4, #1
   138a0:	ldrb	r7, [r0, r1]
   138a4:	b	137a8 <__assert_fail@plt+0x2680>
   138a8:	ldr	r3, [sp, #56]	; 0x38
   138ac:	add	r3, r3, #1
   138b0:	str	r3, [sp, #56]	; 0x38
   138b4:	b	13744 <__assert_fail@plt+0x261c>
   138b8:	cmp	sl, #2
   138bc:	movne	r3, #0
   138c0:	andeq	r3, r6, #1
   138c4:	cmp	r3, #0
   138c8:	movne	r1, #1
   138cc:	bne	13928 <__assert_fail@plt+0x2800>
   138d0:	ldr	r0, [sp, #92]	; 0x5c
   138d4:	str	r2, [sp, #84]	; 0x54
   138d8:	bl	10f48 <iswprint@plt>
   138dc:	ldr	r3, [sp, #56]	; 0x38
   138e0:	ldr	r2, [sp, #84]	; 0x54
   138e4:	add	r3, r3, r2
   138e8:	str	r3, [sp, #56]	; 0x38
   138ec:	cmp	r0, #0
   138f0:	add	r0, sp, #96	; 0x60
   138f4:	moveq	r5, #0
   138f8:	bl	10ee8 <mbsinit@plt>
   138fc:	cmp	r0, #0
   13900:	beq	13700 <__assert_fail@plt+0x25d8>
   13904:	b	13770 <__assert_fail@plt+0x2648>
   13908:	ldrb	r3, [fp, r1]
   1390c:	cmp	r3, #94	; 0x5e
   13910:	beq	131d0 <__assert_fail@plt+0x20a8>
   13914:	bhi	13934 <__assert_fail@plt+0x280c>
   13918:	sub	r3, r3, #91	; 0x5b
   1391c:	cmp	r3, #1
   13920:	bls	131d0 <__assert_fail@plt+0x20a8>
   13924:	add	r1, r1, #1
   13928:	cmp	r1, r2
   1392c:	bne	13908 <__assert_fail@plt+0x27e0>
   13930:	b	138d0 <__assert_fail@plt+0x27a8>
   13934:	cmp	r3, #96	; 0x60
   13938:	beq	131d0 <__assert_fail@plt+0x20a8>
   1393c:	cmp	r3, #124	; 0x7c
   13940:	bne	13924 <__assert_fail@plt+0x27fc>
   13944:	b	131d0 <__assert_fail@plt+0x20a8>
   13948:	mov	r5, #0
   1394c:	b	13770 <__assert_fail@plt+0x2648>
   13950:	ldr	r1, [sp, #64]	; 0x40
   13954:	cmp	r1, #0
   13958:	beq	13844 <__assert_fail@plt+0x271c>
   1395c:	cmp	r9, r4
   13960:	strbhi	ip, [r8, r4]
   13964:	str	r3, [sp, #64]	; 0x40
   13968:	add	r4, r4, #1
   1396c:	b	13844 <__assert_fail@plt+0x271c>
   13970:	mov	r5, fp
   13974:	ldr	fp, [sp, #24]
   13978:	mov	r7, #48	; 0x30
   1397c:	b	13518 <__assert_fail@plt+0x23f0>
   13980:	mov	r5, #0
   13984:	mov	fp, r5
   13988:	b	13518 <__assert_fail@plt+0x23f0>
   1398c:	ldr	r3, [sp, #36]	; 0x24
   13990:	ldr	r2, [sp, #28]
   13994:	subs	r3, r3, r2
   13998:	movne	r3, #1
   1399c:	b	12e14 <__assert_fail@plt+0x1cec>
   139a0:	ldr	r3, [sp, #60]	; 0x3c
   139a4:	clz	r7, r9
   139a8:	cmp	r3, #0
   139ac:	lsr	r7, r7, #5
   139b0:	moveq	r7, #0
   139b4:	cmp	r7, #0
   139b8:	mov	r5, r3
   139bc:	bne	12d74 <__assert_fail@plt+0x1c4c>
   139c0:	ldr	r3, [sp, #68]	; 0x44
   139c4:	ldr	r2, [sp, #40]	; 0x28
   139c8:	cmp	r2, #0
   139cc:	moveq	r3, #0
   139d0:	andne	r3, r3, #1
   139d4:	cmp	r3, #0
   139d8:	movne	r3, r2
   139dc:	subne	r2, r3, #1
   139e0:	bne	13a10 <__assert_fail@plt+0x28e8>
   139e4:	cmp	r9, r4
   139e8:	movhi	r3, #0
   139ec:	strbhi	r3, [r8, r4]
   139f0:	mov	r0, r4
   139f4:	add	sp, sp, #108	; 0x6c
   139f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139fc:	mov	r3, r2
   13a00:	b	139c4 <__assert_fail@plt+0x289c>
   13a04:	cmp	r9, r4
   13a08:	strbhi	r3, [r8, r4]
   13a0c:	add	r4, r4, #1
   13a10:	ldrb	r3, [r2, #1]!
   13a14:	cmp	r3, #0
   13a18:	bne	13a04 <__assert_fail@plt+0x28dc>
   13a1c:	b	139e4 <__assert_fail@plt+0x28bc>
   13a20:	ldr	r3, [pc, #32]	; 13a48 <__assert_fail@plt+0x2920>
   13a24:	mov	r6, #1
   13a28:	str	r6, [sp, #24]
   13a2c:	str	r6, [sp, #32]
   13a30:	str	r3, [sp, #40]	; 0x28
   13a34:	mov	r4, #0
   13a38:	mov	sl, #5
   13a3c:	b	12de4 <__assert_fail@plt+0x1cbc>
   13a40:	mov	r6, #1
   13a44:	b	12fd8 <__assert_fail@plt+0x1eb0>
   13a48:	muleq	r1, r3, r1
   13a4c:	muleq	r1, r7, r1
   13a50:	muleq	r1, r5, r1
   13a54:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a5c:	sub	sp, sp, #52	; 0x34
   13a60:	mov	r6, r0
   13a64:	mov	r5, r3
   13a68:	mov	r8, r1
   13a6c:	mov	r9, r2
   13a70:	bl	11008 <__errno_location@plt>
   13a74:	ldr	r7, [pc, #380]	; 13bf8 <__assert_fail@plt+0x2ad0>
   13a78:	cmn	r6, #-2147483647	; 0x80000001
   13a7c:	ldr	r4, [r7]
   13a80:	ldr	r3, [r0]
   13a84:	str	r0, [sp, #24]
   13a88:	str	r3, [sp, #32]
   13a8c:	movne	r3, #0
   13a90:	moveq	r3, #1
   13a94:	orrs	r3, r3, r6, lsr #31
   13a98:	beq	13aa0 <__assert_fail@plt+0x2978>
   13a9c:	bl	110f8 <abort@plt>
   13aa0:	ldr	r2, [r7, #4]
   13aa4:	cmp	r6, r2
   13aa8:	blt	13b18 <__assert_fail@plt+0x29f0>
   13aac:	add	r1, sp, #48	; 0x30
   13ab0:	add	sl, r7, #8
   13ab4:	str	r2, [r1, #-4]!
   13ab8:	cmp	r4, sl
   13abc:	mov	r3, #8
   13ac0:	sub	r2, r6, r2
   13ac4:	movne	r0, r4
   13ac8:	str	r3, [sp]
   13acc:	add	r2, r2, #1
   13ad0:	mvn	r3, #-2147483648	; 0x80000000
   13ad4:	moveq	r0, #0
   13ad8:	bl	147ec <__assert_fail@plt+0x36c4>
   13adc:	cmp	r4, sl
   13ae0:	ldr	r2, [sp, #44]	; 0x2c
   13ae4:	mov	fp, r0
   13ae8:	str	r0, [r7]
   13aec:	ldmeq	r4, {r0, r1}
   13af0:	mov	r4, fp
   13af4:	stmeq	fp, {r0, r1}
   13af8:	ldr	r0, [r7, #4]
   13afc:	mov	r1, #0
   13b00:	sub	r2, r2, r0
   13b04:	add	r0, fp, r0, lsl #3
   13b08:	lsl	r2, r2, #3
   13b0c:	bl	11020 <memset@plt>
   13b10:	ldr	r3, [sp, #44]	; 0x2c
   13b14:	str	r3, [r7, #4]
   13b18:	ldr	r3, [r5, #4]
   13b1c:	add	sl, r4, r6, lsl #3
   13b20:	orr	r3, r3, #1
   13b24:	str	r3, [sp, #28]
   13b28:	add	r3, r5, #8
   13b2c:	str	r3, [sp, #36]	; 0x24
   13b30:	ldr	r3, [r5, #44]	; 0x2c
   13b34:	ldr	fp, [r4, r6, lsl #3]
   13b38:	ldr	r7, [sl, #4]
   13b3c:	str	r3, [sp, #16]
   13b40:	ldr	r3, [r5, #40]	; 0x28
   13b44:	mov	r2, r8
   13b48:	str	r3, [sp, #12]
   13b4c:	add	r3, r5, #8
   13b50:	str	r3, [sp, #8]
   13b54:	ldr	r3, [sp, #28]
   13b58:	mov	r1, fp
   13b5c:	str	r3, [sp, #4]
   13b60:	ldr	r3, [r5]
   13b64:	mov	r0, r7
   13b68:	str	r3, [sp]
   13b6c:	mov	r3, r9
   13b70:	bl	12d24 <__assert_fail@plt+0x1bfc>
   13b74:	cmp	fp, r0
   13b78:	bhi	13be0 <__assert_fail@plt+0x2ab8>
   13b7c:	ldr	r3, [pc, #120]	; 13bfc <__assert_fail@plt+0x2ad4>
   13b80:	add	fp, r0, #1
   13b84:	cmp	r7, r3
   13b88:	str	fp, [r4, r6, lsl #3]
   13b8c:	beq	13b98 <__assert_fail@plt+0x2a70>
   13b90:	mov	r0, r7
   13b94:	bl	12700 <__assert_fail@plt+0x15d8>
   13b98:	mov	r0, fp
   13b9c:	bl	146a4 <__assert_fail@plt+0x357c>
   13ba0:	ldr	r3, [r5, #44]	; 0x2c
   13ba4:	mov	r2, r8
   13ba8:	mov	r1, fp
   13bac:	str	r0, [sl, #4]
   13bb0:	str	r3, [sp, #16]
   13bb4:	ldr	r3, [r5, #40]	; 0x28
   13bb8:	mov	r7, r0
   13bbc:	str	r3, [sp, #12]
   13bc0:	add	r3, r5, #8
   13bc4:	str	r3, [sp, #8]
   13bc8:	ldr	r3, [sp, #28]
   13bcc:	str	r3, [sp, #4]
   13bd0:	ldr	r3, [r5]
   13bd4:	str	r3, [sp]
   13bd8:	mov	r3, r9
   13bdc:	bl	12d24 <__assert_fail@plt+0x1bfc>
   13be0:	ldr	r3, [sp, #24]
   13be4:	ldr	r2, [sp, #32]
   13be8:	mov	r0, r7
   13bec:	str	r2, [r3]
   13bf0:	add	sp, sp, #52	; 0x34
   13bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bf8:	andeq	r7, r2, r4, lsl r1
   13bfc:			; <UNDEFINED> instruction: 0x000271bc
   13c00:	push	{r4, r5, r6, lr}
   13c04:	mov	r5, r0
   13c08:	bl	11008 <__errno_location@plt>
   13c0c:	cmp	r5, #0
   13c10:	mov	r1, #48	; 0x30
   13c14:	ldr	r6, [r0]
   13c18:	mov	r4, r0
   13c1c:	ldr	r0, [pc, #12]	; 13c30 <__assert_fail@plt+0x2b08>
   13c20:	movne	r0, r5
   13c24:	bl	14a80 <__assert_fail@plt+0x3958>
   13c28:	str	r6, [r4]
   13c2c:	pop	{r4, r5, r6, pc}
   13c30:			; <UNDEFINED> instruction: 0x000272bc
   13c34:	ldr	r3, [pc, #12]	; 13c48 <__assert_fail@plt+0x2b20>
   13c38:	cmp	r0, #0
   13c3c:	moveq	r0, r3
   13c40:	ldr	r0, [r0]
   13c44:	bx	lr
   13c48:			; <UNDEFINED> instruction: 0x000272bc
   13c4c:	ldr	r3, [pc, #12]	; 13c60 <__assert_fail@plt+0x2b38>
   13c50:	cmp	r0, #0
   13c54:	moveq	r0, r3
   13c58:	str	r1, [r0]
   13c5c:	bx	lr
   13c60:			; <UNDEFINED> instruction: 0x000272bc
   13c64:	ldr	r3, [pc, #52]	; 13ca0 <__assert_fail@plt+0x2b78>
   13c68:	cmp	r0, #0
   13c6c:	moveq	r0, r3
   13c70:	add	r3, r0, #8
   13c74:	push	{lr}		; (str lr, [sp, #-4]!)
   13c78:	lsr	lr, r1, #5
   13c7c:	and	r1, r1, #31
   13c80:	ldr	ip, [r3, lr, lsl #2]
   13c84:	lsr	r0, ip, r1
   13c88:	eor	r2, r2, r0
   13c8c:	and	r2, r2, #1
   13c90:	and	r0, r0, #1
   13c94:	eor	r1, ip, r2, lsl r1
   13c98:	str	r1, [r3, lr, lsl #2]
   13c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13ca0:			; <UNDEFINED> instruction: 0x000272bc
   13ca4:	ldr	r3, [pc, #16]	; 13cbc <__assert_fail@plt+0x2b94>
   13ca8:	cmp	r0, #0
   13cac:	movne	r3, r0
   13cb0:	ldr	r0, [r3, #4]
   13cb4:	str	r1, [r3, #4]
   13cb8:	bx	lr
   13cbc:			; <UNDEFINED> instruction: 0x000272bc
   13cc0:	ldr	r3, [pc, #44]	; 13cf4 <__assert_fail@plt+0x2bcc>
   13cc4:	cmp	r0, #0
   13cc8:	moveq	r0, r3
   13ccc:	mov	r3, #10
   13cd0:	cmp	r2, #0
   13cd4:	cmpne	r1, #0
   13cd8:	str	r3, [r0]
   13cdc:	bne	13ce8 <__assert_fail@plt+0x2bc0>
   13ce0:	push	{r4, lr}
   13ce4:	bl	110f8 <abort@plt>
   13ce8:	str	r1, [r0, #40]	; 0x28
   13cec:	str	r2, [r0, #44]	; 0x2c
   13cf0:	bx	lr
   13cf4:			; <UNDEFINED> instruction: 0x000272bc
   13cf8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cfc:	sub	sp, sp, #24
   13d00:	mov	sl, r3
   13d04:	ldr	r4, [sp, #56]	; 0x38
   13d08:	ldr	r3, [pc, #100]	; 13d74 <__assert_fail@plt+0x2c4c>
   13d0c:	cmp	r4, #0
   13d10:	moveq	r4, r3
   13d14:	mov	r7, r0
   13d18:	mov	r8, r1
   13d1c:	mov	r9, r2
   13d20:	bl	11008 <__errno_location@plt>
   13d24:	ldr	r3, [r4, #44]	; 0x2c
   13d28:	mov	r2, r9
   13d2c:	mov	r1, r8
   13d30:	ldr	r6, [r0]
   13d34:	str	r3, [sp, #16]
   13d38:	ldr	r3, [r4, #40]	; 0x28
   13d3c:	mov	r5, r0
   13d40:	str	r3, [sp, #12]
   13d44:	add	r3, r4, #8
   13d48:	str	r3, [sp, #8]
   13d4c:	ldr	r3, [r4, #4]
   13d50:	mov	r0, r7
   13d54:	str	r3, [sp, #4]
   13d58:	ldr	r3, [r4]
   13d5c:	str	r3, [sp]
   13d60:	mov	r3, sl
   13d64:	bl	12d24 <__assert_fail@plt+0x1bfc>
   13d68:	str	r6, [r5]
   13d6c:	add	sp, sp, #24
   13d70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d74:			; <UNDEFINED> instruction: 0x000272bc
   13d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d7c:	cmp	r3, #0
   13d80:	sub	sp, sp, #44	; 0x2c
   13d84:	ldr	r4, [pc, #188]	; 13e48 <__assert_fail@plt+0x2d20>
   13d88:	mov	r6, r2
   13d8c:	movne	r4, r3
   13d90:	mov	sl, r1
   13d94:	mov	r9, r0
   13d98:	bl	11008 <__errno_location@plt>
   13d9c:	ldr	r5, [r4, #4]
   13da0:	add	fp, r4, #8
   13da4:	cmp	r6, #0
   13da8:	orreq	r5, r5, #1
   13dac:	mov	r1, #0
   13db0:	mov	r2, r9
   13db4:	ldr	r3, [r0]
   13db8:	mov	r8, r0
   13dbc:	str	r3, [sp, #28]
   13dc0:	ldr	r3, [r4, #44]	; 0x2c
   13dc4:	mov	r0, r1
   13dc8:	str	r3, [sp, #16]
   13dcc:	ldr	r3, [r4, #40]	; 0x28
   13dd0:	stmib	sp, {r5, fp}
   13dd4:	str	r3, [sp, #12]
   13dd8:	ldr	r3, [r4]
   13ddc:	str	r3, [sp]
   13de0:	mov	r3, sl
   13de4:	bl	12d24 <__assert_fail@plt+0x1bfc>
   13de8:	add	r1, r0, #1
   13dec:	mov	r7, r0
   13df0:	mov	r0, r1
   13df4:	str	r1, [sp, #36]	; 0x24
   13df8:	bl	146a4 <__assert_fail@plt+0x357c>
   13dfc:	ldr	r3, [r4, #44]	; 0x2c
   13e00:	mov	r2, r9
   13e04:	str	r3, [sp, #16]
   13e08:	ldr	r3, [r4, #40]	; 0x28
   13e0c:	stmib	sp, {r5, fp}
   13e10:	str	r3, [sp, #12]
   13e14:	ldr	r3, [r4]
   13e18:	ldr	r1, [sp, #36]	; 0x24
   13e1c:	str	r3, [sp]
   13e20:	mov	r3, sl
   13e24:	str	r0, [sp, #32]
   13e28:	bl	12d24 <__assert_fail@plt+0x1bfc>
   13e2c:	ldr	r3, [sp, #28]
   13e30:	cmp	r6, #0
   13e34:	str	r3, [r8]
   13e38:	ldr	r0, [sp, #32]
   13e3c:	strne	r7, [r6]
   13e40:	add	sp, sp, #44	; 0x2c
   13e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e48:			; <UNDEFINED> instruction: 0x000272bc
   13e4c:	mov	r3, r2
   13e50:	mov	r2, #0
   13e54:	b	13d78 <__assert_fail@plt+0x2c50>
   13e58:	push	{r4, r5, r6, r7, r8, lr}
   13e5c:	mov	r6, #1
   13e60:	ldr	r4, [pc, #104]	; 13ed0 <__assert_fail@plt+0x2da8>
   13e64:	ldr	r5, [r4]
   13e68:	add	r7, r5, #12
   13e6c:	ldr	r3, [r4, #4]
   13e70:	add	r7, r7, #8
   13e74:	cmp	r6, r3
   13e78:	blt	13ec0 <__assert_fail@plt+0x2d98>
   13e7c:	ldr	r0, [r5, #4]
   13e80:	ldr	r6, [pc, #76]	; 13ed4 <__assert_fail@plt+0x2dac>
   13e84:	cmp	r0, r6
   13e88:	beq	13e9c <__assert_fail@plt+0x2d74>
   13e8c:	bl	12700 <__assert_fail@plt+0x15d8>
   13e90:	mov	r3, #256	; 0x100
   13e94:	str	r3, [r4, #8]
   13e98:	str	r6, [r4, #12]
   13e9c:	ldr	r6, [pc, #52]	; 13ed8 <__assert_fail@plt+0x2db0>
   13ea0:	cmp	r5, r6
   13ea4:	beq	13eb4 <__assert_fail@plt+0x2d8c>
   13ea8:	mov	r0, r5
   13eac:	bl	12700 <__assert_fail@plt+0x15d8>
   13eb0:	str	r6, [r4]
   13eb4:	mov	r3, #1
   13eb8:	str	r3, [r4, #4]
   13ebc:	pop	{r4, r5, r6, r7, r8, pc}
   13ec0:	ldr	r0, [r7, #-8]
   13ec4:	bl	12700 <__assert_fail@plt+0x15d8>
   13ec8:	add	r6, r6, #1
   13ecc:	b	13e6c <__assert_fail@plt+0x2d44>
   13ed0:	andeq	r7, r2, r4, lsl r1
   13ed4:			; <UNDEFINED> instruction: 0x000271bc
   13ed8:	andeq	r7, r2, ip, lsl r1
   13edc:	ldr	r3, [pc, #4]	; 13ee8 <__assert_fail@plt+0x2dc0>
   13ee0:	mvn	r2, #0
   13ee4:	b	13a58 <__assert_fail@plt+0x2930>
   13ee8:			; <UNDEFINED> instruction: 0x000272bc
   13eec:	ldr	r3, [pc]	; 13ef4 <__assert_fail@plt+0x2dcc>
   13ef0:	b	13a58 <__assert_fail@plt+0x2930>
   13ef4:			; <UNDEFINED> instruction: 0x000272bc
   13ef8:	mov	r1, r0
   13efc:	mov	r0, #0
   13f00:	b	13edc <__assert_fail@plt+0x2db4>
   13f04:	mov	r2, r1
   13f08:	mov	r1, r0
   13f0c:	mov	r0, #0
   13f10:	b	13eec <__assert_fail@plt+0x2dc4>
   13f14:	push	{r4, r5, lr}
   13f18:	sub	sp, sp, #52	; 0x34
   13f1c:	mov	r5, r2
   13f20:	mov	r4, r0
   13f24:	mov	r0, sp
   13f28:	bl	12be0 <__assert_fail@plt+0x1ab8>
   13f2c:	mov	r3, sp
   13f30:	mvn	r2, #0
   13f34:	mov	r1, r5
   13f38:	mov	r0, r4
   13f3c:	bl	13a58 <__assert_fail@plt+0x2930>
   13f40:	add	sp, sp, #52	; 0x34
   13f44:	pop	{r4, r5, pc}
   13f48:	push	{r4, r5, r6, lr}
   13f4c:	sub	sp, sp, #48	; 0x30
   13f50:	mov	r5, r2
   13f54:	mov	r6, r3
   13f58:	mov	r4, r0
   13f5c:	mov	r0, sp
   13f60:	bl	12be0 <__assert_fail@plt+0x1ab8>
   13f64:	mov	r3, sp
   13f68:	mov	r2, r6
   13f6c:	mov	r1, r5
   13f70:	mov	r0, r4
   13f74:	bl	13a58 <__assert_fail@plt+0x2930>
   13f78:	add	sp, sp, #48	; 0x30
   13f7c:	pop	{r4, r5, r6, pc}
   13f80:	mov	r2, r1
   13f84:	mov	r1, r0
   13f88:	mov	r0, #0
   13f8c:	b	13f14 <__assert_fail@plt+0x2dec>
   13f90:	mov	r3, r2
   13f94:	mov	r2, r1
   13f98:	mov	r1, r0
   13f9c:	mov	r0, #0
   13fa0:	b	13f48 <__assert_fail@plt+0x2e20>
   13fa4:	push	{r4, r5, r6, lr}
   13fa8:	mov	r4, r0
   13fac:	ldr	lr, [pc, #80]	; 14004 <__assert_fail@plt+0x2edc>
   13fb0:	mov	r5, r1
   13fb4:	mov	r6, r2
   13fb8:	ldm	lr!, {r0, r1, r2, r3}
   13fbc:	sub	sp, sp, #48	; 0x30
   13fc0:	mov	ip, sp
   13fc4:	stmia	ip!, {r0, r1, r2, r3}
   13fc8:	ldm	lr!, {r0, r1, r2, r3}
   13fcc:	stmia	ip!, {r0, r1, r2, r3}
   13fd0:	ldm	lr, {r0, r1, r2, r3}
   13fd4:	stm	ip, {r0, r1, r2, r3}
   13fd8:	mov	r1, r6
   13fdc:	mov	r2, #1
   13fe0:	mov	r0, sp
   13fe4:	bl	13c64 <__assert_fail@plt+0x2b3c>
   13fe8:	mov	r3, sp
   13fec:	mov	r2, r5
   13ff0:	mov	r1, r4
   13ff4:	mov	r0, #0
   13ff8:	bl	13a58 <__assert_fail@plt+0x2930>
   13ffc:	add	sp, sp, #48	; 0x30
   14000:	pop	{r4, r5, r6, pc}
   14004:			; <UNDEFINED> instruction: 0x000272bc
   14008:	mov	r2, r1
   1400c:	mvn	r1, #0
   14010:	b	13fa4 <__assert_fail@plt+0x2e7c>
   14014:	mov	r1, #58	; 0x3a
   14018:	b	14008 <__assert_fail@plt+0x2ee0>
   1401c:	mov	r2, #58	; 0x3a
   14020:	b	13fa4 <__assert_fail@plt+0x2e7c>
   14024:	push	{r4, r5, lr}
   14028:	sub	sp, sp, #100	; 0x64
   1402c:	mov	r4, r0
   14030:	mov	r0, sp
   14034:	mov	r5, r2
   14038:	bl	12be0 <__assert_fail@plt+0x1ab8>
   1403c:	mov	ip, sp
   14040:	add	lr, sp, #48	; 0x30
   14044:	ldm	ip!, {r0, r1, r2, r3}
   14048:	stmia	lr!, {r0, r1, r2, r3}
   1404c:	ldm	ip!, {r0, r1, r2, r3}
   14050:	stmia	lr!, {r0, r1, r2, r3}
   14054:	ldm	ip, {r0, r1, r2, r3}
   14058:	stm	lr, {r0, r1, r2, r3}
   1405c:	mov	r2, #1
   14060:	mov	r1, #58	; 0x3a
   14064:	add	r0, sp, #48	; 0x30
   14068:	bl	13c64 <__assert_fail@plt+0x2b3c>
   1406c:	add	r3, sp, #48	; 0x30
   14070:	mvn	r2, #0
   14074:	mov	r1, r5
   14078:	mov	r0, r4
   1407c:	bl	13a58 <__assert_fail@plt+0x2930>
   14080:	add	sp, sp, #100	; 0x64
   14084:	pop	{r4, r5, pc}
   14088:	push	{r4, r5, r6, r7, lr}
   1408c:	mov	r4, r0
   14090:	ldr	lr, [pc, #84]	; 140ec <__assert_fail@plt+0x2fc4>
   14094:	mov	r6, r1
   14098:	mov	r7, r2
   1409c:	mov	r5, r3
   140a0:	ldm	lr!, {r0, r1, r2, r3}
   140a4:	sub	sp, sp, #52	; 0x34
   140a8:	mov	ip, sp
   140ac:	stmia	ip!, {r0, r1, r2, r3}
   140b0:	ldm	lr!, {r0, r1, r2, r3}
   140b4:	stmia	ip!, {r0, r1, r2, r3}
   140b8:	ldm	lr, {r0, r1, r2, r3}
   140bc:	stm	ip, {r0, r1, r2, r3}
   140c0:	mov	r2, r7
   140c4:	mov	r1, r6
   140c8:	mov	r0, sp
   140cc:	bl	13cc0 <__assert_fail@plt+0x2b98>
   140d0:	mov	r3, sp
   140d4:	ldr	r2, [sp, #72]	; 0x48
   140d8:	mov	r1, r5
   140dc:	mov	r0, r4
   140e0:	bl	13a58 <__assert_fail@plt+0x2930>
   140e4:	add	sp, sp, #52	; 0x34
   140e8:	pop	{r4, r5, r6, r7, pc}
   140ec:			; <UNDEFINED> instruction: 0x000272bc
   140f0:	mvn	ip, #0
   140f4:	push	{r0, r1, r2, lr}
   140f8:	str	ip, [sp]
   140fc:	bl	14088 <__assert_fail@plt+0x2f60>
   14100:	add	sp, sp, #12
   14104:	pop	{pc}		; (ldr pc, [sp], #4)
   14108:	mov	r3, r2
   1410c:	mov	r2, r1
   14110:	mov	r1, r0
   14114:	mov	r0, #0
   14118:	b	140f0 <__assert_fail@plt+0x2fc8>
   1411c:	push	{r0, r1, r2, lr}
   14120:	str	r3, [sp]
   14124:	mov	r3, r2
   14128:	mov	r2, r1
   1412c:	mov	r1, r0
   14130:	mov	r0, #0
   14134:	bl	14088 <__assert_fail@plt+0x2f60>
   14138:	add	sp, sp, #12
   1413c:	pop	{pc}		; (ldr pc, [sp], #4)
   14140:	ldr	r3, [pc]	; 14148 <__assert_fail@plt+0x3020>
   14144:	b	13a58 <__assert_fail@plt+0x2930>
   14148:	andeq	r7, r2, r4, lsr #2
   1414c:	mov	r2, r1
   14150:	mov	r1, r0
   14154:	mov	r0, #0
   14158:	b	14140 <__assert_fail@plt+0x3018>
   1415c:	mvn	r2, #0
   14160:	b	14140 <__assert_fail@plt+0x3018>
   14164:	mov	r1, r0
   14168:	mov	r0, #0
   1416c:	b	1415c <__assert_fail@plt+0x3034>
   14170:	push	{r4, r5, r6, lr}
   14174:	sub	sp, sp, #32
   14178:	cmp	r1, #0
   1417c:	mov	r5, r0
   14180:	ldr	r4, [sp, #48]	; 0x30
   14184:	ldr	r6, [sp, #52]	; 0x34
   14188:	beq	1423c <__assert_fail@plt+0x3114>
   1418c:	stm	sp, {r2, r3}
   14190:	mov	r3, r1
   14194:	ldr	r2, [pc, #860]	; 144f8 <__assert_fail@plt+0x33d0>
   14198:	mov	r1, #1
   1419c:	bl	11050 <__fprintf_chk@plt>
   141a0:	mov	r2, #5
   141a4:	ldr	r1, [pc, #848]	; 144fc <__assert_fail@plt+0x33d4>
   141a8:	mov	r0, #0
   141ac:	bl	10f24 <dcgettext@plt>
   141b0:	ldr	r3, [pc, #840]	; 14500 <__assert_fail@plt+0x33d8>
   141b4:	ldr	r2, [pc, #840]	; 14504 <__assert_fail@plt+0x33dc>
   141b8:	str	r3, [sp]
   141bc:	mov	r1, #1
   141c0:	mov	r3, r0
   141c4:	mov	r0, r5
   141c8:	bl	11050 <__fprintf_chk@plt>
   141cc:	mov	r1, r5
   141d0:	mov	r0, #10
   141d4:	bl	10f0c <fputc_unlocked@plt>
   141d8:	mov	r2, #5
   141dc:	ldr	r1, [pc, #804]	; 14508 <__assert_fail@plt+0x33e0>
   141e0:	mov	r0, #0
   141e4:	bl	10f24 <dcgettext@plt>
   141e8:	mov	r1, #1
   141ec:	ldr	r3, [pc, #792]	; 1450c <__assert_fail@plt+0x33e4>
   141f0:	mov	r2, r0
   141f4:	mov	r0, r5
   141f8:	bl	11050 <__fprintf_chk@plt>
   141fc:	mov	r1, r5
   14200:	mov	r0, #10
   14204:	bl	10f0c <fputc_unlocked@plt>
   14208:	cmp	r6, #9
   1420c:	ldrls	pc, [pc, r6, lsl #2]
   14210:	b	144ec <__assert_fail@plt+0x33c4>
   14214:	andeq	r4, r1, ip, lsr #6
   14218:	andeq	r4, r1, r4, asr r2
   1421c:	andeq	r4, r1, r0, lsl #5
   14220:			; <UNDEFINED> instruction: 0x000142b4
   14224:	strdeq	r4, [r1], -r0
   14228:	andeq	r4, r1, r4, lsr r3
   1422c:	andeq	r4, r1, ip, ror r3
   14230:	andeq	r4, r1, ip, asr #7
   14234:	andeq	r4, r1, r4, lsr #8
   14238:	andeq	r4, r1, r4, lsl #9
   1423c:	str	r3, [sp]
   14240:	mov	r1, #1
   14244:	mov	r3, r2
   14248:	ldr	r2, [pc, #704]	; 14510 <__assert_fail@plt+0x33e8>
   1424c:	bl	11050 <__fprintf_chk@plt>
   14250:	b	141a0 <__assert_fail@plt+0x3078>
   14254:	mov	r2, #5
   14258:	ldr	r1, [pc, #692]	; 14514 <__assert_fail@plt+0x33ec>
   1425c:	mov	r0, #0
   14260:	bl	10f24 <dcgettext@plt>
   14264:	ldr	r3, [r4]
   14268:	mov	r1, #1
   1426c:	mov	r2, r0
   14270:	mov	r0, r5
   14274:	add	sp, sp, #32
   14278:	pop	{r4, r5, r6, lr}
   1427c:	b	11050 <__fprintf_chk@plt>
   14280:	mov	r2, #5
   14284:	ldr	r1, [pc, #652]	; 14518 <__assert_fail@plt+0x33f0>
   14288:	mov	r0, #0
   1428c:	bl	10f24 <dcgettext@plt>
   14290:	ldr	r3, [r4, #4]
   14294:	mov	r1, #1
   14298:	str	r3, [sp, #48]	; 0x30
   1429c:	ldr	r3, [r4]
   142a0:	mov	r2, r0
   142a4:	mov	r0, r5
   142a8:	add	sp, sp, #32
   142ac:	pop	{r4, r5, r6, lr}
   142b0:	b	11050 <__fprintf_chk@plt>
   142b4:	mov	r2, #5
   142b8:	ldr	r1, [pc, #604]	; 1451c <__assert_fail@plt+0x33f4>
   142bc:	mov	r0, #0
   142c0:	bl	10f24 <dcgettext@plt>
   142c4:	ldr	r3, [r4, #8]
   142c8:	mov	r1, #1
   142cc:	str	r3, [sp, #52]	; 0x34
   142d0:	ldr	r3, [r4, #4]
   142d4:	str	r3, [sp, #48]	; 0x30
   142d8:	ldr	r3, [r4]
   142dc:	mov	r2, r0
   142e0:	mov	r0, r5
   142e4:	add	sp, sp, #32
   142e8:	pop	{r4, r5, r6, lr}
   142ec:	b	11050 <__fprintf_chk@plt>
   142f0:	mov	r2, #5
   142f4:	ldr	r1, [pc, #548]	; 14520 <__assert_fail@plt+0x33f8>
   142f8:	mov	r0, #0
   142fc:	bl	10f24 <dcgettext@plt>
   14300:	ldr	r3, [r4, #12]
   14304:	mov	r1, #1
   14308:	str	r3, [sp, #8]
   1430c:	ldr	r3, [r4, #8]
   14310:	str	r3, [sp, #4]
   14314:	ldr	r3, [r4, #4]
   14318:	str	r3, [sp]
   1431c:	ldr	r3, [r4]
   14320:	mov	r2, r0
   14324:	mov	r0, r5
   14328:	bl	11050 <__fprintf_chk@plt>
   1432c:	add	sp, sp, #32
   14330:	pop	{r4, r5, r6, pc}
   14334:	mov	r2, #5
   14338:	ldr	r1, [pc, #484]	; 14524 <__assert_fail@plt+0x33fc>
   1433c:	mov	r0, #0
   14340:	bl	10f24 <dcgettext@plt>
   14344:	ldr	r3, [r4, #16]
   14348:	mov	r1, #1
   1434c:	str	r3, [sp, #12]
   14350:	ldr	r3, [r4, #12]
   14354:	str	r3, [sp, #8]
   14358:	ldr	r3, [r4, #8]
   1435c:	str	r3, [sp, #4]
   14360:	ldr	r3, [r4, #4]
   14364:	str	r3, [sp]
   14368:	ldr	r3, [r4]
   1436c:	mov	r2, r0
   14370:	mov	r0, r5
   14374:	bl	11050 <__fprintf_chk@plt>
   14378:	b	1432c <__assert_fail@plt+0x3204>
   1437c:	mov	r2, #5
   14380:	ldr	r1, [pc, #416]	; 14528 <__assert_fail@plt+0x3400>
   14384:	mov	r0, #0
   14388:	bl	10f24 <dcgettext@plt>
   1438c:	ldr	r3, [r4, #20]
   14390:	mov	r1, #1
   14394:	str	r3, [sp, #16]
   14398:	ldr	r3, [r4, #16]
   1439c:	str	r3, [sp, #12]
   143a0:	ldr	r3, [r4, #12]
   143a4:	str	r3, [sp, #8]
   143a8:	ldr	r3, [r4, #8]
   143ac:	str	r3, [sp, #4]
   143b0:	ldr	r3, [r4, #4]
   143b4:	str	r3, [sp]
   143b8:	ldr	r3, [r4]
   143bc:	mov	r2, r0
   143c0:	mov	r0, r5
   143c4:	bl	11050 <__fprintf_chk@plt>
   143c8:	b	1432c <__assert_fail@plt+0x3204>
   143cc:	mov	r2, #5
   143d0:	ldr	r1, [pc, #340]	; 1452c <__assert_fail@plt+0x3404>
   143d4:	mov	r0, #0
   143d8:	bl	10f24 <dcgettext@plt>
   143dc:	ldr	r3, [r4, #24]
   143e0:	mov	r1, #1
   143e4:	str	r3, [sp, #20]
   143e8:	ldr	r3, [r4, #20]
   143ec:	str	r3, [sp, #16]
   143f0:	ldr	r3, [r4, #16]
   143f4:	str	r3, [sp, #12]
   143f8:	ldr	r3, [r4, #12]
   143fc:	str	r3, [sp, #8]
   14400:	ldr	r3, [r4, #8]
   14404:	str	r3, [sp, #4]
   14408:	ldr	r3, [r4, #4]
   1440c:	str	r3, [sp]
   14410:	ldr	r3, [r4]
   14414:	mov	r2, r0
   14418:	mov	r0, r5
   1441c:	bl	11050 <__fprintf_chk@plt>
   14420:	b	1432c <__assert_fail@plt+0x3204>
   14424:	mov	r2, #5
   14428:	ldr	r1, [pc, #256]	; 14530 <__assert_fail@plt+0x3408>
   1442c:	mov	r0, #0
   14430:	bl	10f24 <dcgettext@plt>
   14434:	ldr	r3, [r4, #28]
   14438:	mov	r1, #1
   1443c:	str	r3, [sp, #24]
   14440:	ldr	r3, [r4, #24]
   14444:	str	r3, [sp, #20]
   14448:	ldr	r3, [r4, #20]
   1444c:	str	r3, [sp, #16]
   14450:	ldr	r3, [r4, #16]
   14454:	str	r3, [sp, #12]
   14458:	ldr	r3, [r4, #12]
   1445c:	str	r3, [sp, #8]
   14460:	ldr	r3, [r4, #8]
   14464:	str	r3, [sp, #4]
   14468:	ldr	r3, [r4, #4]
   1446c:	str	r3, [sp]
   14470:	ldr	r3, [r4]
   14474:	mov	r2, r0
   14478:	mov	r0, r5
   1447c:	bl	11050 <__fprintf_chk@plt>
   14480:	b	1432c <__assert_fail@plt+0x3204>
   14484:	ldr	r1, [pc, #168]	; 14534 <__assert_fail@plt+0x340c>
   14488:	mov	r2, #5
   1448c:	mov	r0, #0
   14490:	bl	10f24 <dcgettext@plt>
   14494:	ldr	r3, [r4, #32]
   14498:	mov	r1, #1
   1449c:	str	r3, [sp, #28]
   144a0:	ldr	r3, [r4, #28]
   144a4:	str	r3, [sp, #24]
   144a8:	ldr	r3, [r4, #24]
   144ac:	str	r3, [sp, #20]
   144b0:	ldr	r3, [r4, #20]
   144b4:	str	r3, [sp, #16]
   144b8:	ldr	r3, [r4, #16]
   144bc:	str	r3, [sp, #12]
   144c0:	ldr	r3, [r4, #12]
   144c4:	str	r3, [sp, #8]
   144c8:	ldr	r3, [r4, #8]
   144cc:	str	r3, [sp, #4]
   144d0:	ldr	r3, [r4, #4]
   144d4:	str	r3, [sp]
   144d8:	ldr	r3, [r4]
   144dc:	mov	r2, r0
   144e0:	mov	r0, r5
   144e4:	bl	11050 <__fprintf_chk@plt>
   144e8:	b	1432c <__assert_fail@plt+0x3204>
   144ec:	mov	r2, #5
   144f0:	ldr	r1, [pc, #64]	; 14538 <__assert_fail@plt+0x3410>
   144f4:	b	1448c <__assert_fail@plt+0x3364>
   144f8:	andeq	r6, r1, r5, ror #3
   144fc:	strdeq	r6, [r1], -r8
   14500:	andeq	r0, r0, r6, ror #15
   14504:	andeq	r6, r1, r6, asr #9
   14508:	strdeq	r6, [r1], -ip
   1450c:	andeq	r6, r1, r7, lsr #5
   14510:	strdeq	r6, [r1], -r1
   14514:	andeq	r6, r1, r9, asr #5
   14518:	ldrdeq	r6, [r1], -r9
   1451c:	strdeq	r6, [r1], -r0
   14520:	andeq	r6, r1, ip, lsl #6
   14524:	andeq	r6, r1, ip, lsr #6
   14528:	andeq	r6, r1, r0, asr r3
   1452c:	andeq	r6, r1, r8, ror r3
   14530:	andeq	r6, r1, r4, lsr #7
   14534:	ldrdeq	r6, [r1], -r4
   14538:	andeq	r6, r1, r8, lsl #8
   1453c:	push	{r0, r1, r4, lr}
   14540:	mov	ip, #0
   14544:	ldr	lr, [sp, #16]
   14548:	ldr	r4, [lr, ip, lsl #2]
   1454c:	cmp	r4, #0
   14550:	bne	14568 <__assert_fail@plt+0x3440>
   14554:	str	ip, [sp, #4]
   14558:	str	lr, [sp]
   1455c:	bl	14170 <__assert_fail@plt+0x3048>
   14560:	add	sp, sp, #8
   14564:	pop	{r4, pc}
   14568:	add	ip, ip, #1
   1456c:	b	14548 <__assert_fail@plt+0x3420>
   14570:	push	{r4, r5, lr}
   14574:	sub	sp, sp, #52	; 0x34
   14578:	mov	ip, #0
   1457c:	ldr	r5, [sp, #64]	; 0x40
   14580:	add	lr, sp, #8
   14584:	ldr	r4, [r5, ip, lsl #2]
   14588:	cmp	r4, #0
   1458c:	str	r4, [lr, ip, lsl #2]
   14590:	beq	145a0 <__assert_fail@plt+0x3478>
   14594:	add	ip, ip, #1
   14598:	cmp	ip, #10
   1459c:	bne	14584 <__assert_fail@plt+0x345c>
   145a0:	str	ip, [sp, #4]
   145a4:	str	lr, [sp]
   145a8:	bl	14170 <__assert_fail@plt+0x3048>
   145ac:	add	sp, sp, #52	; 0x34
   145b0:	pop	{r4, r5, pc}
   145b4:	push	{r3}		; (str r3, [sp, #-4]!)
   145b8:	push	{r0, r1, r2, r3, lr}
   145bc:	add	r3, sp, #24
   145c0:	str	r3, [sp, #12]
   145c4:	str	r3, [sp]
   145c8:	ldr	r3, [sp, #20]
   145cc:	bl	14570 <__assert_fail@plt+0x3448>
   145d0:	add	sp, sp, #16
   145d4:	pop	{lr}		; (ldr lr, [sp], #4)
   145d8:	add	sp, sp, #4
   145dc:	bx	lr
   145e0:	ldr	r3, [pc, #116]	; 1465c <__assert_fail@plt+0x3534>
   145e4:	push	{r4, lr}
   145e8:	mov	r0, #10
   145ec:	ldr	r1, [r3]
   145f0:	bl	10f0c <fputc_unlocked@plt>
   145f4:	mov	r2, #5
   145f8:	ldr	r1, [pc, #96]	; 14660 <__assert_fail@plt+0x3538>
   145fc:	mov	r0, #0
   14600:	bl	10f24 <dcgettext@plt>
   14604:	ldr	r2, [pc, #88]	; 14664 <__assert_fail@plt+0x353c>
   14608:	mov	r1, r0
   1460c:	mov	r0, #1
   14610:	bl	11038 <__printf_chk@plt>
   14614:	mov	r2, #5
   14618:	ldr	r1, [pc, #72]	; 14668 <__assert_fail@plt+0x3540>
   1461c:	mov	r0, #0
   14620:	bl	10f24 <dcgettext@plt>
   14624:	ldr	r3, [pc, #64]	; 1466c <__assert_fail@plt+0x3544>
   14628:	ldr	r2, [pc, #64]	; 14670 <__assert_fail@plt+0x3548>
   1462c:	mov	r1, r0
   14630:	mov	r0, #1
   14634:	bl	11038 <__printf_chk@plt>
   14638:	mov	r2, #5
   1463c:	ldr	r1, [pc, #48]	; 14674 <__assert_fail@plt+0x354c>
   14640:	mov	r0, #0
   14644:	bl	10f24 <dcgettext@plt>
   14648:	ldr	r2, [pc, #40]	; 14678 <__assert_fail@plt+0x3550>
   1464c:	pop	{r4, lr}
   14650:	mov	r1, r0
   14654:	mov	r0, #1
   14658:	b	11038 <__printf_chk@plt>
   1465c:	andeq	r7, r2, r4, ror r1
   14660:	andeq	r6, r1, r4, asr #8
   14664:	andeq	r6, r1, r8, asr r4
   14668:	andeq	r6, r1, lr, ror #8
   1466c:	andeq	r5, r1, r4, ror #24
   14670:	andeq	r5, r1, ip, lsl #25
   14674:	andeq	r6, r1, r2, lsl #9
   14678:	andeq	r6, r1, r9, lsr #9
   1467c:	push	{r4, lr}
   14680:	bl	14b98 <__assert_fail@plt+0x3a70>
   14684:	cmp	r0, #0
   14688:	popne	{r4, pc}
   1468c:	bl	14b10 <__assert_fail@plt+0x39e8>
   14690:	push	{r4, lr}
   14694:	bl	14b98 <__assert_fail@plt+0x3a70>
   14698:	cmp	r0, #0
   1469c:	popne	{r4, pc}
   146a0:	bl	14b10 <__assert_fail@plt+0x39e8>
   146a4:	b	1467c <__assert_fail@plt+0x3554>
   146a8:	push	{r4, r5, r6, lr}
   146ac:	mov	r5, r0
   146b0:	mov	r4, r1
   146b4:	bl	14bd8 <__assert_fail@plt+0x3ab0>
   146b8:	cmp	r0, #0
   146bc:	popne	{r4, r5, r6, pc}
   146c0:	adds	r4, r4, #0
   146c4:	movne	r4, #1
   146c8:	cmp	r5, #0
   146cc:	orreq	r4, r4, #1
   146d0:	cmp	r4, #0
   146d4:	popeq	{r4, r5, r6, pc}
   146d8:	bl	14b10 <__assert_fail@plt+0x39e8>
   146dc:	push	{r4, lr}
   146e0:	cmp	r1, #0
   146e4:	orreq	r1, r1, #1
   146e8:	bl	14bd8 <__assert_fail@plt+0x3ab0>
   146ec:	cmp	r0, #0
   146f0:	popne	{r4, pc}
   146f4:	bl	14b10 <__assert_fail@plt+0x39e8>
   146f8:	push	{r4, r5, r6, lr}
   146fc:	mov	r6, r0
   14700:	mov	r5, r1
   14704:	mov	r4, r2
   14708:	bl	14e90 <__assert_fail@plt+0x3d68>
   1470c:	cmp	r0, #0
   14710:	popne	{r4, r5, r6, pc}
   14714:	cmp	r6, #0
   14718:	beq	14728 <__assert_fail@plt+0x3600>
   1471c:	cmp	r5, #0
   14720:	cmpne	r4, #0
   14724:	popeq	{r4, r5, r6, pc}
   14728:	bl	14b10 <__assert_fail@plt+0x39e8>
   1472c:	b	146f8 <__assert_fail@plt+0x35d0>
   14730:	cmp	r2, #0
   14734:	cmpne	r1, #0
   14738:	moveq	r2, #1
   1473c:	moveq	r1, r2
   14740:	push	{r4, lr}
   14744:	bl	14e90 <__assert_fail@plt+0x3d68>
   14748:	cmp	r0, #0
   1474c:	popne	{r4, pc}
   14750:	bl	14b10 <__assert_fail@plt+0x39e8>
   14754:	mov	r2, r1
   14758:	mov	r1, r0
   1475c:	mov	r0, #0
   14760:	b	146f8 <__assert_fail@plt+0x35d0>
   14764:	mov	r2, r1
   14768:	mov	r1, r0
   1476c:	mov	r0, #0
   14770:	b	14730 <__assert_fail@plt+0x3608>
   14774:	push	{r4, r5, r6, r7, r8, lr}
   14778:	subs	r7, r0, #0
   1477c:	mov	r5, r1
   14780:	mov	r6, r2
   14784:	ldr	r4, [r1]
   14788:	bne	147c4 <__assert_fail@plt+0x369c>
   1478c:	cmp	r4, #0
   14790:	bne	147ac <__assert_fail@plt+0x3684>
   14794:	mov	r1, r2
   14798:	mov	r0, #64	; 0x40
   1479c:	bl	14ff8 <__assert_fail@plt+0x3ed0>
   147a0:	cmp	r0, #0
   147a4:	movne	r4, r0
   147a8:	addeq	r4, r0, #1
   147ac:	mov	r2, r6
   147b0:	mov	r1, r4
   147b4:	mov	r0, r7
   147b8:	bl	146f8 <__assert_fail@plt+0x35d0>
   147bc:	str	r4, [r5]
   147c0:	pop	{r4, r5, r6, r7, r8, pc}
   147c4:	lsr	r2, r4, #1
   147c8:	add	r3, r2, #1
   147cc:	mvn	r3, r3
   147d0:	cmp	r4, r3
   147d4:	addls	r4, r4, #1
   147d8:	addls	r4, r4, r2
   147dc:	bls	147ac <__assert_fail@plt+0x3684>
   147e0:	bl	14b10 <__assert_fail@plt+0x39e8>
   147e4:	mov	r2, #1
   147e8:	b	14774 <__assert_fail@plt+0x364c>
   147ec:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147f0:	mov	sl, r0
   147f4:	ldr	r8, [r1]
   147f8:	mov	fp, r1
   147fc:	mov	r5, r2
   14800:	asrs	r4, r8, #1
   14804:	mov	r9, r3
   14808:	ldr	r7, [sp, #48]	; 0x30
   1480c:	bpl	148a8 <__assert_fail@plt+0x3780>
   14810:	rsb	r2, r4, #-2147483648	; 0x80000000
   14814:	cmp	r8, r2
   14818:	movge	r2, #0
   1481c:	movlt	r2, #1
   14820:	mvn	r3, r9
   14824:	cmp	r2, #0
   14828:	lsr	r3, r3, #31
   1482c:	addeq	r4, r4, r8
   14830:	mvnne	r4, #-2147483648	; 0x80000000
   14834:	mov	r0, r3
   14838:	cmp	r9, r4
   1483c:	movge	r0, #0
   14840:	andlt	r0, r0, #1
   14844:	cmp	r0, #0
   14848:	str	r3, [sp, #4]
   1484c:	bne	14a1c <__assert_fail@plt+0x38f4>
   14850:	cmp	r7, #0
   14854:	bge	14968 <__assert_fail@plt+0x3840>
   14858:	cmp	r4, #0
   1485c:	bge	148c0 <__assert_fail@plt+0x3798>
   14860:	mov	r1, r7
   14864:	mvn	r0, #-2147483648	; 0x80000000
   14868:	bl	15204 <__assert_fail@plt+0x40dc>
   1486c:	cmp	r0, r4
   14870:	movle	r0, #0
   14874:	movgt	r0, #1
   14878:	cmp	r0, #0
   1487c:	mvnne	r6, #-2147483648	; 0x80000000
   14880:	beq	148d0 <__assert_fail@plt+0x37a8>
   14884:	mov	r1, r7
   14888:	mov	r0, r6
   1488c:	bl	15204 <__assert_fail@plt+0x40dc>
   14890:	mov	r1, r7
   14894:	mov	r4, r0
   14898:	mov	r0, r6
   1489c:	bl	15424 <__assert_fail@plt+0x42fc>
   148a0:	sub	r1, r6, r1
   148a4:	b	148e0 <__assert_fail@plt+0x37b8>
   148a8:	mvn	r2, #-2147483648	; 0x80000000
   148ac:	sub	r2, r2, r4
   148b0:	cmp	r8, r2
   148b4:	movle	r2, #0
   148b8:	movgt	r2, #1
   148bc:	b	14820 <__assert_fail@plt+0x36f8>
   148c0:	cmn	r7, #1
   148c4:	movne	r1, r7
   148c8:	movne	r0, #-2147483648	; 0x80000000
   148cc:	bne	14a34 <__assert_fail@plt+0x390c>
   148d0:	mul	r1, r7, r4
   148d4:	cmp	r1, #63	; 0x3f
   148d8:	movle	r6, #64	; 0x40
   148dc:	ble	14884 <__assert_fail@plt+0x375c>
   148e0:	cmp	sl, #0
   148e4:	sub	r2, r4, r8
   148e8:	streq	sl, [fp]
   148ec:	cmp	r2, r5
   148f0:	bge	149c4 <__assert_fail@plt+0x389c>
   148f4:	cmp	r5, #0
   148f8:	bge	14990 <__assert_fail@plt+0x3868>
   148fc:	rsb	r2, r5, #-2147483648	; 0x80000000
   14900:	cmp	r8, r2
   14904:	movge	r2, #0
   14908:	movlt	r2, #1
   1490c:	cmp	r2, #0
   14910:	bne	14964 <__assert_fail@plt+0x383c>
   14914:	ldr	r0, [sp, #4]
   14918:	add	r5, r8, r5
   1491c:	cmp	r9, r5
   14920:	movge	r0, #0
   14924:	andlt	r0, r0, #1
   14928:	cmp	r0, #0
   1492c:	mov	r4, r5
   14930:	bne	14964 <__assert_fail@plt+0x383c>
   14934:	cmp	r7, #0
   14938:	bge	149d8 <__assert_fail@plt+0x38b0>
   1493c:	cmp	r5, #0
   14940:	bge	149b0 <__assert_fail@plt+0x3888>
   14944:	mov	r1, r7
   14948:	mvn	r0, #-2147483648	; 0x80000000
   1494c:	bl	15204 <__assert_fail@plt+0x40dc>
   14950:	cmp	r5, r0
   14954:	movge	r0, #0
   14958:	movlt	r0, #1
   1495c:	cmp	r0, #0
   14960:	beq	149c0 <__assert_fail@plt+0x3898>
   14964:	bl	14b10 <__assert_fail@plt+0x39e8>
   14968:	beq	148d0 <__assert_fail@plt+0x37a8>
   1496c:	cmp	r4, #0
   14970:	bge	14a2c <__assert_fail@plt+0x3904>
   14974:	cmn	r4, #1
   14978:	beq	148d0 <__assert_fail@plt+0x37a8>
   1497c:	mov	r1, r4
   14980:	mov	r0, #-2147483648	; 0x80000000
   14984:	bl	15204 <__assert_fail@plt+0x40dc>
   14988:	cmp	r7, r0
   1498c:	b	14870 <__assert_fail@plt+0x3748>
   14990:	cmp	r8, #0
   14994:	blt	14914 <__assert_fail@plt+0x37ec>
   14998:	mvn	r2, #-2147483648	; 0x80000000
   1499c:	sub	r2, r2, r5
   149a0:	cmp	r8, r2
   149a4:	movle	r2, #0
   149a8:	movgt	r2, #1
   149ac:	b	1490c <__assert_fail@plt+0x37e4>
   149b0:	cmn	r7, #1
   149b4:	movne	r1, r7
   149b8:	movne	r0, #-2147483648	; 0x80000000
   149bc:	bne	14a10 <__assert_fail@plt+0x38e8>
   149c0:	mul	r1, r5, r7
   149c4:	mov	r0, sl
   149c8:	bl	146a8 <__assert_fail@plt+0x3580>
   149cc:	str	r4, [fp]
   149d0:	add	sp, sp, #12
   149d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149d8:	beq	149c0 <__assert_fail@plt+0x3898>
   149dc:	cmp	r5, #0
   149e0:	movge	r1, r7
   149e4:	mvnge	r0, #-2147483648	; 0x80000000
   149e8:	bge	14a10 <__assert_fail@plt+0x38e8>
   149ec:	cmn	r5, #1
   149f0:	beq	149c0 <__assert_fail@plt+0x3898>
   149f4:	mov	r1, r5
   149f8:	mov	r0, #-2147483648	; 0x80000000
   149fc:	bl	15204 <__assert_fail@plt+0x40dc>
   14a00:	cmp	r7, r0
   14a04:	movle	r0, #0
   14a08:	movgt	r0, #1
   14a0c:	b	1495c <__assert_fail@plt+0x3834>
   14a10:	bl	15204 <__assert_fail@plt+0x40dc>
   14a14:	cmp	r5, r0
   14a18:	b	14a04 <__assert_fail@plt+0x38dc>
   14a1c:	cmp	r7, #0
   14a20:	mov	r4, r9
   14a24:	blt	148c0 <__assert_fail@plt+0x3798>
   14a28:	beq	148d0 <__assert_fail@plt+0x37a8>
   14a2c:	mov	r1, r7
   14a30:	mvn	r0, #-2147483648	; 0x80000000
   14a34:	bl	15204 <__assert_fail@plt+0x40dc>
   14a38:	cmp	r0, r4
   14a3c:	movge	r0, #0
   14a40:	movlt	r0, #1
   14a44:	b	14878 <__assert_fail@plt+0x3750>
   14a48:	push	{r4, lr}
   14a4c:	bl	14b50 <__assert_fail@plt+0x3a28>
   14a50:	cmp	r0, #0
   14a54:	popne	{r4, pc}
   14a58:	bl	14b10 <__assert_fail@plt+0x39e8>
   14a5c:	mov	r1, #1
   14a60:	b	14a48 <__assert_fail@plt+0x3920>
   14a64:	push	{r4, lr}
   14a68:	bl	14b50 <__assert_fail@plt+0x3a28>
   14a6c:	cmp	r0, #0
   14a70:	popne	{r4, pc}
   14a74:	bl	14b10 <__assert_fail@plt+0x39e8>
   14a78:	mov	r1, #1
   14a7c:	b	14a64 <__assert_fail@plt+0x393c>
   14a80:	push	{r4, r5, r6, lr}
   14a84:	mov	r4, r1
   14a88:	mov	r5, r0
   14a8c:	mov	r0, r1
   14a90:	bl	1467c <__assert_fail@plt+0x3554>
   14a94:	mov	r2, r4
   14a98:	mov	r1, r5
   14a9c:	pop	{r4, r5, r6, lr}
   14aa0:	b	10edc <memcpy@plt>
   14aa4:	push	{r4, r5, r6, lr}
   14aa8:	mov	r4, r1
   14aac:	mov	r5, r0
   14ab0:	mov	r0, r1
   14ab4:	bl	14690 <__assert_fail@plt+0x3568>
   14ab8:	mov	r2, r4
   14abc:	mov	r1, r5
   14ac0:	pop	{r4, r5, r6, lr}
   14ac4:	b	10edc <memcpy@plt>
   14ac8:	push	{r4, r5, r6, lr}
   14acc:	mov	r5, r0
   14ad0:	add	r0, r1, #1
   14ad4:	mov	r4, r1
   14ad8:	bl	14690 <__assert_fail@plt+0x3568>
   14adc:	mov	r2, #0
   14ae0:	mov	r1, r5
   14ae4:	strb	r2, [r0, r4]
   14ae8:	mov	r2, r4
   14aec:	pop	{r4, r5, r6, lr}
   14af0:	b	10edc <memcpy@plt>
   14af4:	push	{r4, lr}
   14af8:	mov	r4, r0
   14afc:	bl	10ff0 <strlen@plt>
   14b00:	add	r1, r0, #1
   14b04:	mov	r0, r4
   14b08:	pop	{r4, lr}
   14b0c:	b	14a80 <__assert_fail@plt+0x3958>
   14b10:	ldr	r3, [pc, #44]	; 14b44 <__assert_fail@plt+0x3a1c>
   14b14:	push	{r4, lr}
   14b18:	mov	r2, #5
   14b1c:	ldr	r1, [pc, #36]	; 14b48 <__assert_fail@plt+0x3a20>
   14b20:	mov	r0, #0
   14b24:	ldr	r4, [r3]
   14b28:	bl	10f24 <dcgettext@plt>
   14b2c:	ldr	r2, [pc, #24]	; 14b4c <__assert_fail@plt+0x3a24>
   14b30:	mov	r1, #0
   14b34:	mov	r3, r0
   14b38:	mov	r0, r4
   14b3c:	bl	10f90 <error@plt>
   14b40:	bl	110f8 <abort@plt>
   14b44:	andeq	r7, r2, r0, lsl r1
   14b48:	strdeq	r6, [r1], -r5
   14b4c:	andeq	r6, r1, r6, ror #1
   14b50:	cmp	r1, #0
   14b54:	cmpne	r0, #0
   14b58:	moveq	r1, #1
   14b5c:	moveq	r0, r1
   14b60:	umull	r2, r3, r0, r1
   14b64:	adds	r3, r3, #0
   14b68:	movne	r3, #1
   14b6c:	cmp	r2, #0
   14b70:	blt	14b80 <__assert_fail@plt+0x3a58>
   14b74:	cmp	r3, #0
   14b78:	bne	14b80 <__assert_fail@plt+0x3a58>
   14b7c:	b	10e64 <calloc@plt>
   14b80:	push	{r4, lr}
   14b84:	bl	11008 <__errno_location@plt>
   14b88:	mov	r3, #12
   14b8c:	str	r3, [r0]
   14b90:	mov	r0, #0
   14b94:	pop	{r4, pc}
   14b98:	cmp	r0, #0
   14b9c:	mov	r3, #0
   14ba0:	moveq	r0, #1
   14ba4:	adds	r3, r3, #0
   14ba8:	movne	r3, #1
   14bac:	cmp	r0, #0
   14bb0:	blt	14bc0 <__assert_fail@plt+0x3a98>
   14bb4:	cmp	r3, #0
   14bb8:	bne	14bc0 <__assert_fail@plt+0x3a98>
   14bbc:	b	10f9c <malloc@plt>
   14bc0:	push	{r4, lr}
   14bc4:	bl	11008 <__errno_location@plt>
   14bc8:	mov	r3, #12
   14bcc:	str	r3, [r0]
   14bd0:	mov	r0, #0
   14bd4:	pop	{r4, pc}
   14bd8:	cmp	r0, #0
   14bdc:	push	{r4, lr}
   14be0:	mov	r4, r1
   14be4:	bne	14bf4 <__assert_fail@plt+0x3acc>
   14be8:	mov	r0, r1
   14bec:	pop	{r4, lr}
   14bf0:	b	14b98 <__assert_fail@plt+0x3a70>
   14bf4:	cmp	r1, #0
   14bf8:	bne	14c08 <__assert_fail@plt+0x3ae0>
   14bfc:	bl	12700 <__assert_fail@plt+0x15d8>
   14c00:	mov	r0, #0
   14c04:	pop	{r4, pc}
   14c08:	cmp	r1, #0
   14c0c:	blt	14c1c <__assert_fail@plt+0x3af4>
   14c10:	mov	r3, #0
   14c14:	cmp	r3, r3
   14c18:	beq	14c2c <__assert_fail@plt+0x3b04>
   14c1c:	bl	11008 <__errno_location@plt>
   14c20:	mov	r3, #12
   14c24:	str	r3, [r0]
   14c28:	b	14c00 <__assert_fail@plt+0x3ad8>
   14c2c:	pop	{r4, lr}
   14c30:	b	10f30 <realloc@plt>
   14c34:	push	{r4, r5, r6, lr}
   14c38:	mov	r4, r0
   14c3c:	bl	10f6c <__fpending@plt>
   14c40:	mov	r5, r0
   14c44:	mov	r0, r4
   14c48:	bl	10f78 <ferror_unlocked@plt>
   14c4c:	mov	r6, r0
   14c50:	mov	r0, r4
   14c54:	bl	12608 <__assert_fail@plt+0x14e0>
   14c58:	cmp	r6, #0
   14c5c:	mov	r4, r0
   14c60:	bne	14c8c <__assert_fail@plt+0x3b64>
   14c64:	cmp	r0, #0
   14c68:	beq	14c84 <__assert_fail@plt+0x3b5c>
   14c6c:	cmp	r5, #0
   14c70:	bne	14c9c <__assert_fail@plt+0x3b74>
   14c74:	bl	11008 <__errno_location@plt>
   14c78:	ldr	r4, [r0]
   14c7c:	subs	r4, r4, #9
   14c80:	mvnne	r4, #0
   14c84:	mov	r0, r4
   14c88:	pop	{r4, r5, r6, pc}
   14c8c:	cmp	r0, #0
   14c90:	bne	14c9c <__assert_fail@plt+0x3b74>
   14c94:	bl	11008 <__errno_location@plt>
   14c98:	str	r4, [r0]
   14c9c:	mvn	r4, #0
   14ca0:	b	14c84 <__assert_fail@plt+0x3b5c>
   14ca4:	ldr	r2, [r0, #20]
   14ca8:	ldr	r3, [r0, #16]
   14cac:	cmp	r2, r3
   14cb0:	bhi	14ccc <__assert_fail@plt+0x3ba4>
   14cb4:	ldr	r3, [r0, #4]
   14cb8:	ldr	r0, [r0, #8]
   14cbc:	subs	r0, r0, r3
   14cc0:	strne	r0, [r1]
   14cc4:	movne	r0, r3
   14cc8:	bx	lr
   14ccc:	mov	r0, #0
   14cd0:	bx	lr
   14cd4:	push	{r4, r5, r6, r7, r8, lr}
   14cd8:	subs	r4, r1, #0
   14cdc:	sub	sp, sp, #4096	; 0x1000
   14ce0:	sub	sp, sp, #8
   14ce4:	beq	14df0 <__assert_fail@plt+0x3cc8>
   14ce8:	mov	r5, r0
   14cec:	bl	14edc <__assert_fail@plt+0x3db4>
   14cf0:	mov	r6, r0
   14cf4:	cmp	r6, #0
   14cf8:	bne	14d44 <__assert_fail@plt+0x3c1c>
   14cfc:	mov	r0, r5
   14d00:	bl	11044 <fileno@plt>
   14d04:	cmp	r0, #0
   14d08:	blt	14db4 <__assert_fail@plt+0x3c8c>
   14d0c:	mov	r6, #1
   14d10:	mov	r3, #0
   14d14:	str	r6, [sp]
   14d18:	mov	r2, #0
   14d1c:	bl	10f54 <lseek64@plt>
   14d20:	cmp	r0, #0
   14d24:	sbcs	r3, r1, #0
   14d28:	blt	14db4 <__assert_fail@plt+0x3c8c>
   14d2c:	str	r6, [sp]
   14d30:	mov	r2, r4
   14d34:	mov	r3, #0
   14d38:	mov	r0, r5
   14d3c:	bl	12754 <__assert_fail@plt+0x162c>
   14d40:	b	14da8 <__assert_fail@plt+0x3c80>
   14d44:	add	r1, sp, #8
   14d48:	mov	r0, r5
   14d4c:	bl	14ca4 <__assert_fail@plt+0x3b7c>
   14d50:	cmp	r0, #0
   14d54:	beq	14d88 <__assert_fail@plt+0x3c60>
   14d58:	ldr	r3, [sp, #8]
   14d5c:	cmp	r3, #0
   14d60:	beq	14d88 <__assert_fail@plt+0x3c60>
   14d64:	cmp	r4, r3
   14d68:	ldr	r2, [r5, #4]
   14d6c:	movcc	r3, r4
   14d70:	add	r2, r2, r3
   14d74:	subs	r4, r4, r3
   14d78:	str	r2, [r5, #4]
   14d7c:	beq	14da4 <__assert_fail@plt+0x3c7c>
   14d80:	subs	r6, r6, r3
   14d84:	beq	14cfc <__assert_fail@plt+0x3bd4>
   14d88:	mov	r0, r5
   14d8c:	bl	1102c <fgetc@plt>
   14d90:	cmn	r0, #1
   14d94:	beq	14df8 <__assert_fail@plt+0x3cd0>
   14d98:	subs	r4, r4, #1
   14d9c:	subne	r6, r6, #1
   14da0:	bne	14cf4 <__assert_fail@plt+0x3bcc>
   14da4:	mov	r0, #0
   14da8:	add	sp, sp, #4096	; 0x1000
   14dac:	add	sp, sp, #8
   14db0:	pop	{r4, r5, r6, r7, r8, pc}
   14db4:	mov	r7, #1
   14db8:	mov	r8, #4096	; 0x1000
   14dbc:	cmp	r4, #4096	; 0x1000
   14dc0:	movcc	r6, r4
   14dc4:	movcs	r6, #4096	; 0x1000
   14dc8:	str	r5, [sp]
   14dcc:	mov	r3, r6
   14dd0:	mov	r2, r7
   14dd4:	mov	r1, r8
   14dd8:	add	r0, sp, #8
   14ddc:	bl	11080 <__fread_chk@plt>
   14de0:	cmp	r6, r0
   14de4:	bhi	14df8 <__assert_fail@plt+0x3cd0>
   14de8:	subs	r4, r4, r6
   14dec:	bne	14dbc <__assert_fail@plt+0x3c94>
   14df0:	mov	r0, r4
   14df4:	b	14da8 <__assert_fail@plt+0x3c80>
   14df8:	mov	r0, r5
   14dfc:	bl	10ec4 <ferror@plt>
   14e00:	adds	r0, r0, #0
   14e04:	mvnne	r0, #0
   14e08:	b	14da8 <__assert_fail@plt+0x3c80>
   14e0c:	push	{r4, lr}
   14e10:	mov	r0, #14
   14e14:	bl	110a4 <nl_langinfo@plt>
   14e18:	ldr	r3, [pc, #24]	; 14e38 <__assert_fail@plt+0x3d10>
   14e1c:	cmp	r0, #0
   14e20:	moveq	r0, r3
   14e24:	ldr	r3, [pc, #16]	; 14e3c <__assert_fail@plt+0x3d14>
   14e28:	ldrb	r2, [r0]
   14e2c:	cmp	r2, #0
   14e30:	moveq	r0, r3
   14e34:	pop	{r4, pc}
   14e38:	andeq	r5, r1, r2, lsr sp
   14e3c:	andeq	r6, r1, r6, lsl #10
   14e40:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14e44:	subs	r5, r0, #0
   14e48:	addeq	r5, sp, #4
   14e4c:	mov	r0, r5
   14e50:	mov	r7, r2
   14e54:	mov	r6, r1
   14e58:	bl	10f84 <mbrtowc@plt>
   14e5c:	cmp	r7, #0
   14e60:	cmnne	r0, #3
   14e64:	mov	r4, r0
   14e68:	bls	14e84 <__assert_fail@plt+0x3d5c>
   14e6c:	mov	r0, #0
   14e70:	bl	14f18 <__assert_fail@plt+0x3df0>
   14e74:	cmp	r0, #0
   14e78:	moveq	r4, #1
   14e7c:	ldrbeq	r3, [r6]
   14e80:	streq	r3, [r5]
   14e84:	mov	r0, r4
   14e88:	add	sp, sp, #12
   14e8c:	pop	{r4, r5, r6, r7, pc}
   14e90:	push	{r4, r5, r6, lr}
   14e94:	subs	r4, r2, #0
   14e98:	mov	r6, r0
   14e9c:	mov	r5, r1
   14ea0:	beq	14eb8 <__assert_fail@plt+0x3d90>
   14ea4:	mov	r1, r4
   14ea8:	mvn	r0, #0
   14eac:	bl	14ff8 <__assert_fail@plt+0x3ed0>
   14eb0:	cmp	r0, r5
   14eb4:	bcc	14ec8 <__assert_fail@plt+0x3da0>
   14eb8:	mul	r1, r5, r4
   14ebc:	mov	r0, r6
   14ec0:	pop	{r4, r5, r6, lr}
   14ec4:	b	14bd8 <__assert_fail@plt+0x3ab0>
   14ec8:	bl	11008 <__errno_location@plt>
   14ecc:	mov	r3, #12
   14ed0:	str	r3, [r0]
   14ed4:	mov	r0, #0
   14ed8:	pop	{r4, r5, r6, pc}
   14edc:	ldr	r2, [r0, #20]
   14ee0:	ldr	r3, [r0, #16]
   14ee4:	cmp	r2, r3
   14ee8:	bhi	14f10 <__assert_fail@plt+0x3de8>
   14eec:	ldmib	r0, {r2, r3}
   14ef0:	sub	r2, r3, r2
   14ef4:	ldr	r3, [r0]
   14ef8:	ands	r3, r3, #256	; 0x100
   14efc:	ldrne	r3, [r0, #44]	; 0x2c
   14f00:	ldrne	r0, [r0, #36]	; 0x24
   14f04:	subne	r3, r3, r0
   14f08:	add	r0, r3, r2
   14f0c:	bx	lr
   14f10:	mov	r0, #0
   14f14:	bx	lr
   14f18:	push	{lr}		; (str lr, [sp, #-4]!)
   14f1c:	sub	sp, sp, #268	; 0x10c
   14f20:	ldr	r2, [pc, #64]	; 14f68 <__assert_fail@plt+0x3e40>
   14f24:	add	r1, sp, #4
   14f28:	bl	14f74 <__assert_fail@plt+0x3e4c>
   14f2c:	cmp	r0, #0
   14f30:	movne	r0, #0
   14f34:	bne	14f60 <__assert_fail@plt+0x3e38>
   14f38:	ldr	r1, [pc, #44]	; 14f6c <__assert_fail@plt+0x3e44>
   14f3c:	add	r0, sp, #4
   14f40:	bl	10e88 <strcmp@plt>
   14f44:	cmp	r0, #0
   14f48:	beq	14f60 <__assert_fail@plt+0x3e38>
   14f4c:	ldr	r1, [pc, #28]	; 14f70 <__assert_fail@plt+0x3e48>
   14f50:	add	r0, sp, #4
   14f54:	bl	10e88 <strcmp@plt>
   14f58:	adds	r0, r0, #0
   14f5c:	movne	r0, #1
   14f60:	add	sp, sp, #268	; 0x10c
   14f64:	pop	{pc}		; (ldr pc, [sp], #4)
   14f68:	andeq	r0, r0, r1, lsl #2
   14f6c:	andeq	r6, r1, ip, lsl #10
   14f70:	andeq	r6, r1, lr, lsl #10
   14f74:	push	{r4, r5, r6, lr}
   14f78:	mov	r5, r1
   14f7c:	mov	r1, #0
   14f80:	mov	r4, r2
   14f84:	bl	1108c <setlocale@plt>
   14f88:	subs	r6, r0, #0
   14f8c:	bne	14fa0 <__assert_fail@plt+0x3e78>
   14f90:	cmp	r4, #0
   14f94:	strbne	r6, [r5]
   14f98:	mov	r0, #22
   14f9c:	pop	{r4, r5, r6, pc}
   14fa0:	bl	10ff0 <strlen@plt>
   14fa4:	cmp	r4, r0
   14fa8:	bls	14fc4 <__assert_fail@plt+0x3e9c>
   14fac:	add	r2, r0, #1
   14fb0:	mov	r1, r6
   14fb4:	mov	r0, r5
   14fb8:	bl	10edc <memcpy@plt>
   14fbc:	mov	r0, #0
   14fc0:	pop	{r4, r5, r6, pc}
   14fc4:	cmp	r4, #0
   14fc8:	beq	14fe8 <__assert_fail@plt+0x3ec0>
   14fcc:	sub	r4, r4, #1
   14fd0:	mov	r2, r4
   14fd4:	mov	r1, r6
   14fd8:	mov	r0, r5
   14fdc:	bl	10edc <memcpy@plt>
   14fe0:	mov	r3, #0
   14fe4:	strb	r3, [r5, r4]
   14fe8:	mov	r0, #34	; 0x22
   14fec:	pop	{r4, r5, r6, pc}
   14ff0:	mov	r1, #0
   14ff4:	b	1108c <setlocale@plt>
   14ff8:	subs	r2, r1, #1
   14ffc:	bxeq	lr
   15000:	bcc	151d8 <__assert_fail@plt+0x40b0>
   15004:	cmp	r0, r1
   15008:	bls	151bc <__assert_fail@plt+0x4094>
   1500c:	tst	r1, r2
   15010:	beq	151c8 <__assert_fail@plt+0x40a0>
   15014:	clz	r3, r0
   15018:	clz	r2, r1
   1501c:	sub	r3, r2, r3
   15020:	rsbs	r3, r3, #31
   15024:	addne	r3, r3, r3, lsl #1
   15028:	mov	r2, #0
   1502c:	addne	pc, pc, r3, lsl #2
   15030:	nop			; (mov r0, r0)
   15034:	cmp	r0, r1, lsl #31
   15038:	adc	r2, r2, r2
   1503c:	subcs	r0, r0, r1, lsl #31
   15040:	cmp	r0, r1, lsl #30
   15044:	adc	r2, r2, r2
   15048:	subcs	r0, r0, r1, lsl #30
   1504c:	cmp	r0, r1, lsl #29
   15050:	adc	r2, r2, r2
   15054:	subcs	r0, r0, r1, lsl #29
   15058:	cmp	r0, r1, lsl #28
   1505c:	adc	r2, r2, r2
   15060:	subcs	r0, r0, r1, lsl #28
   15064:	cmp	r0, r1, lsl #27
   15068:	adc	r2, r2, r2
   1506c:	subcs	r0, r0, r1, lsl #27
   15070:	cmp	r0, r1, lsl #26
   15074:	adc	r2, r2, r2
   15078:	subcs	r0, r0, r1, lsl #26
   1507c:	cmp	r0, r1, lsl #25
   15080:	adc	r2, r2, r2
   15084:	subcs	r0, r0, r1, lsl #25
   15088:	cmp	r0, r1, lsl #24
   1508c:	adc	r2, r2, r2
   15090:	subcs	r0, r0, r1, lsl #24
   15094:	cmp	r0, r1, lsl #23
   15098:	adc	r2, r2, r2
   1509c:	subcs	r0, r0, r1, lsl #23
   150a0:	cmp	r0, r1, lsl #22
   150a4:	adc	r2, r2, r2
   150a8:	subcs	r0, r0, r1, lsl #22
   150ac:	cmp	r0, r1, lsl #21
   150b0:	adc	r2, r2, r2
   150b4:	subcs	r0, r0, r1, lsl #21
   150b8:	cmp	r0, r1, lsl #20
   150bc:	adc	r2, r2, r2
   150c0:	subcs	r0, r0, r1, lsl #20
   150c4:	cmp	r0, r1, lsl #19
   150c8:	adc	r2, r2, r2
   150cc:	subcs	r0, r0, r1, lsl #19
   150d0:	cmp	r0, r1, lsl #18
   150d4:	adc	r2, r2, r2
   150d8:	subcs	r0, r0, r1, lsl #18
   150dc:	cmp	r0, r1, lsl #17
   150e0:	adc	r2, r2, r2
   150e4:	subcs	r0, r0, r1, lsl #17
   150e8:	cmp	r0, r1, lsl #16
   150ec:	adc	r2, r2, r2
   150f0:	subcs	r0, r0, r1, lsl #16
   150f4:	cmp	r0, r1, lsl #15
   150f8:	adc	r2, r2, r2
   150fc:	subcs	r0, r0, r1, lsl #15
   15100:	cmp	r0, r1, lsl #14
   15104:	adc	r2, r2, r2
   15108:	subcs	r0, r0, r1, lsl #14
   1510c:	cmp	r0, r1, lsl #13
   15110:	adc	r2, r2, r2
   15114:	subcs	r0, r0, r1, lsl #13
   15118:	cmp	r0, r1, lsl #12
   1511c:	adc	r2, r2, r2
   15120:	subcs	r0, r0, r1, lsl #12
   15124:	cmp	r0, r1, lsl #11
   15128:	adc	r2, r2, r2
   1512c:	subcs	r0, r0, r1, lsl #11
   15130:	cmp	r0, r1, lsl #10
   15134:	adc	r2, r2, r2
   15138:	subcs	r0, r0, r1, lsl #10
   1513c:	cmp	r0, r1, lsl #9
   15140:	adc	r2, r2, r2
   15144:	subcs	r0, r0, r1, lsl #9
   15148:	cmp	r0, r1, lsl #8
   1514c:	adc	r2, r2, r2
   15150:	subcs	r0, r0, r1, lsl #8
   15154:	cmp	r0, r1, lsl #7
   15158:	adc	r2, r2, r2
   1515c:	subcs	r0, r0, r1, lsl #7
   15160:	cmp	r0, r1, lsl #6
   15164:	adc	r2, r2, r2
   15168:	subcs	r0, r0, r1, lsl #6
   1516c:	cmp	r0, r1, lsl #5
   15170:	adc	r2, r2, r2
   15174:	subcs	r0, r0, r1, lsl #5
   15178:	cmp	r0, r1, lsl #4
   1517c:	adc	r2, r2, r2
   15180:	subcs	r0, r0, r1, lsl #4
   15184:	cmp	r0, r1, lsl #3
   15188:	adc	r2, r2, r2
   1518c:	subcs	r0, r0, r1, lsl #3
   15190:	cmp	r0, r1, lsl #2
   15194:	adc	r2, r2, r2
   15198:	subcs	r0, r0, r1, lsl #2
   1519c:	cmp	r0, r1, lsl #1
   151a0:	adc	r2, r2, r2
   151a4:	subcs	r0, r0, r1, lsl #1
   151a8:	cmp	r0, r1
   151ac:	adc	r2, r2, r2
   151b0:	subcs	r0, r0, r1
   151b4:	mov	r0, r2
   151b8:	bx	lr
   151bc:	moveq	r0, #1
   151c0:	movne	r0, #0
   151c4:	bx	lr
   151c8:	clz	r2, r1
   151cc:	rsb	r2, r2, #31
   151d0:	lsr	r0, r0, r2
   151d4:	bx	lr
   151d8:	cmp	r0, #0
   151dc:	mvnne	r0, #0
   151e0:	b	15444 <__assert_fail@plt+0x431c>
   151e4:	cmp	r1, #0
   151e8:	beq	151d8 <__assert_fail@plt+0x40b0>
   151ec:	push	{r0, r1, lr}
   151f0:	bl	14ff8 <__assert_fail@plt+0x3ed0>
   151f4:	pop	{r1, r2, lr}
   151f8:	mul	r3, r2, r0
   151fc:	sub	r1, r1, r3
   15200:	bx	lr
   15204:	cmp	r1, #0
   15208:	beq	15414 <__assert_fail@plt+0x42ec>
   1520c:	eor	ip, r0, r1
   15210:	rsbmi	r1, r1, #0
   15214:	subs	r2, r1, #1
   15218:	beq	153e0 <__assert_fail@plt+0x42b8>
   1521c:	movs	r3, r0
   15220:	rsbmi	r3, r0, #0
   15224:	cmp	r3, r1
   15228:	bls	153ec <__assert_fail@plt+0x42c4>
   1522c:	tst	r1, r2
   15230:	beq	153fc <__assert_fail@plt+0x42d4>
   15234:	clz	r2, r3
   15238:	clz	r0, r1
   1523c:	sub	r2, r0, r2
   15240:	rsbs	r2, r2, #31
   15244:	addne	r2, r2, r2, lsl #1
   15248:	mov	r0, #0
   1524c:	addne	pc, pc, r2, lsl #2
   15250:	nop			; (mov r0, r0)
   15254:	cmp	r3, r1, lsl #31
   15258:	adc	r0, r0, r0
   1525c:	subcs	r3, r3, r1, lsl #31
   15260:	cmp	r3, r1, lsl #30
   15264:	adc	r0, r0, r0
   15268:	subcs	r3, r3, r1, lsl #30
   1526c:	cmp	r3, r1, lsl #29
   15270:	adc	r0, r0, r0
   15274:	subcs	r3, r3, r1, lsl #29
   15278:	cmp	r3, r1, lsl #28
   1527c:	adc	r0, r0, r0
   15280:	subcs	r3, r3, r1, lsl #28
   15284:	cmp	r3, r1, lsl #27
   15288:	adc	r0, r0, r0
   1528c:	subcs	r3, r3, r1, lsl #27
   15290:	cmp	r3, r1, lsl #26
   15294:	adc	r0, r0, r0
   15298:	subcs	r3, r3, r1, lsl #26
   1529c:	cmp	r3, r1, lsl #25
   152a0:	adc	r0, r0, r0
   152a4:	subcs	r3, r3, r1, lsl #25
   152a8:	cmp	r3, r1, lsl #24
   152ac:	adc	r0, r0, r0
   152b0:	subcs	r3, r3, r1, lsl #24
   152b4:	cmp	r3, r1, lsl #23
   152b8:	adc	r0, r0, r0
   152bc:	subcs	r3, r3, r1, lsl #23
   152c0:	cmp	r3, r1, lsl #22
   152c4:	adc	r0, r0, r0
   152c8:	subcs	r3, r3, r1, lsl #22
   152cc:	cmp	r3, r1, lsl #21
   152d0:	adc	r0, r0, r0
   152d4:	subcs	r3, r3, r1, lsl #21
   152d8:	cmp	r3, r1, lsl #20
   152dc:	adc	r0, r0, r0
   152e0:	subcs	r3, r3, r1, lsl #20
   152e4:	cmp	r3, r1, lsl #19
   152e8:	adc	r0, r0, r0
   152ec:	subcs	r3, r3, r1, lsl #19
   152f0:	cmp	r3, r1, lsl #18
   152f4:	adc	r0, r0, r0
   152f8:	subcs	r3, r3, r1, lsl #18
   152fc:	cmp	r3, r1, lsl #17
   15300:	adc	r0, r0, r0
   15304:	subcs	r3, r3, r1, lsl #17
   15308:	cmp	r3, r1, lsl #16
   1530c:	adc	r0, r0, r0
   15310:	subcs	r3, r3, r1, lsl #16
   15314:	cmp	r3, r1, lsl #15
   15318:	adc	r0, r0, r0
   1531c:	subcs	r3, r3, r1, lsl #15
   15320:	cmp	r3, r1, lsl #14
   15324:	adc	r0, r0, r0
   15328:	subcs	r3, r3, r1, lsl #14
   1532c:	cmp	r3, r1, lsl #13
   15330:	adc	r0, r0, r0
   15334:	subcs	r3, r3, r1, lsl #13
   15338:	cmp	r3, r1, lsl #12
   1533c:	adc	r0, r0, r0
   15340:	subcs	r3, r3, r1, lsl #12
   15344:	cmp	r3, r1, lsl #11
   15348:	adc	r0, r0, r0
   1534c:	subcs	r3, r3, r1, lsl #11
   15350:	cmp	r3, r1, lsl #10
   15354:	adc	r0, r0, r0
   15358:	subcs	r3, r3, r1, lsl #10
   1535c:	cmp	r3, r1, lsl #9
   15360:	adc	r0, r0, r0
   15364:	subcs	r3, r3, r1, lsl #9
   15368:	cmp	r3, r1, lsl #8
   1536c:	adc	r0, r0, r0
   15370:	subcs	r3, r3, r1, lsl #8
   15374:	cmp	r3, r1, lsl #7
   15378:	adc	r0, r0, r0
   1537c:	subcs	r3, r3, r1, lsl #7
   15380:	cmp	r3, r1, lsl #6
   15384:	adc	r0, r0, r0
   15388:	subcs	r3, r3, r1, lsl #6
   1538c:	cmp	r3, r1, lsl #5
   15390:	adc	r0, r0, r0
   15394:	subcs	r3, r3, r1, lsl #5
   15398:	cmp	r3, r1, lsl #4
   1539c:	adc	r0, r0, r0
   153a0:	subcs	r3, r3, r1, lsl #4
   153a4:	cmp	r3, r1, lsl #3
   153a8:	adc	r0, r0, r0
   153ac:	subcs	r3, r3, r1, lsl #3
   153b0:	cmp	r3, r1, lsl #2
   153b4:	adc	r0, r0, r0
   153b8:	subcs	r3, r3, r1, lsl #2
   153bc:	cmp	r3, r1, lsl #1
   153c0:	adc	r0, r0, r0
   153c4:	subcs	r3, r3, r1, lsl #1
   153c8:	cmp	r3, r1
   153cc:	adc	r0, r0, r0
   153d0:	subcs	r3, r3, r1
   153d4:	cmp	ip, #0
   153d8:	rsbmi	r0, r0, #0
   153dc:	bx	lr
   153e0:	teq	ip, r0
   153e4:	rsbmi	r0, r0, #0
   153e8:	bx	lr
   153ec:	movcc	r0, #0
   153f0:	asreq	r0, ip, #31
   153f4:	orreq	r0, r0, #1
   153f8:	bx	lr
   153fc:	clz	r2, r1
   15400:	rsb	r2, r2, #31
   15404:	cmp	ip, #0
   15408:	lsr	r0, r3, r2
   1540c:	rsbmi	r0, r0, #0
   15410:	bx	lr
   15414:	cmp	r0, #0
   15418:	mvngt	r0, #-2147483648	; 0x80000000
   1541c:	movlt	r0, #-2147483648	; 0x80000000
   15420:	b	15444 <__assert_fail@plt+0x431c>
   15424:	cmp	r1, #0
   15428:	beq	15414 <__assert_fail@plt+0x42ec>
   1542c:	push	{r0, r1, lr}
   15430:	bl	1520c <__assert_fail@plt+0x40e4>
   15434:	pop	{r1, r2, lr}
   15438:	mul	r3, r2, r0
   1543c:	sub	r1, r1, r3
   15440:	bx	lr
   15444:	push	{r1, lr}
   15448:	mov	r0, #8
   1544c:	bl	10e7c <raise@plt>
   15450:	pop	{r1, pc}
   15454:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15458:	mov	r7, r0
   1545c:	ldr	r6, [pc, #72]	; 154ac <__assert_fail@plt+0x4384>
   15460:	ldr	r5, [pc, #72]	; 154b0 <__assert_fail@plt+0x4388>
   15464:	add	r6, pc, r6
   15468:	add	r5, pc, r5
   1546c:	sub	r6, r6, r5
   15470:	mov	r8, r1
   15474:	mov	r9, r2
   15478:	bl	10e44 <calloc@plt-0x20>
   1547c:	asrs	r6, r6, #2
   15480:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15484:	mov	r4, #0
   15488:	add	r4, r4, #1
   1548c:	ldr	r3, [r5], #4
   15490:	mov	r2, r9
   15494:	mov	r1, r8
   15498:	mov	r0, r7
   1549c:	blx	r3
   154a0:	cmp	r6, r4
   154a4:	bne	15488 <__assert_fail@plt+0x4360>
   154a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154ac:	andeq	r1, r1, r4, lsr #21
   154b0:	muleq	r1, ip, sl
   154b4:	bx	lr
   154b8:	ldr	r3, [pc, #12]	; 154cc <__assert_fail@plt+0x43a4>
   154bc:	mov	r1, #0
   154c0:	add	r3, pc, r3
   154c4:	ldr	r2, [r3]
   154c8:	b	11014 <__cxa_atexit@plt>
   154cc:	andeq	r1, r1, ip, lsr ip

Disassembly of section .fini:

000154d0 <.fini>:
   154d0:	push	{r3, lr}
   154d4:	pop	{r3, pc}
