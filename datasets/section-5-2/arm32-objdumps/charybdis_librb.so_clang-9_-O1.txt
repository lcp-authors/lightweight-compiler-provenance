
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004c8c <_init>:
    4c8c:	push	{r3, lr}
    4c90:	bl	5648 <call_weak_fn>
    4c94:	pop	{r3, pc}

Disassembly of section .plt:

00004c98 <.plt>:
    4c98:	push	{lr}		; (str lr, [sp, #-4]!)
    4c9c:	ldr	lr, [pc, #4]	; 4ca8 <.plt+0x10>
    4ca0:	add	lr, pc, lr
    4ca4:	ldr	pc, [lr, #8]!
    4ca8:	.word	0x00023358

00004cac <rb_helper_run@plt>:
    4cac:	add	ip, pc, #0, 12
    4cb0:	add	ip, ip, #143360	; 0x23000
    4cb4:	ldr	pc, [ip, #856]!	; 0x358

00004cb8 <TLS_method@plt>:
    4cb8:	add	ip, pc, #0, 12
    4cbc:	add	ip, ip, #143360	; 0x23000
    4cc0:	ldr	pc, [ip, #848]!	; 0x350

00004cc4 <open@plt>:
    4cc4:	add	ip, pc, #0, 12
    4cc8:	add	ip, ip, #143360	; 0x23000
    4ccc:	ldr	pc, [ip, #840]!	; 0x348

00004cd0 <rb_init_netio@plt>:
    4cd0:	add	ip, pc, #0, 12
    4cd4:	add	ip, ip, #143360	; 0x23000
    4cd8:	ldr	pc, [ip, #832]!	; 0x340

00004cdc <sigemptyset@plt>:
    4cdc:	add	ip, pc, #0, 12
    4ce0:	add	ip, ip, #143360	; 0x23000
    4ce4:	ldr	pc, [ip, #824]!	; 0x338

00004ce8 <strerror@plt>:
    4ce8:	add	ip, pc, #0, 12
    4cec:	add	ip, ip, #143360	; 0x23000
    4cf0:	ldr	pc, [ip, #816]!	; 0x330

00004cf4 <rb_radixtree_elem_delete@plt>:
    4cf4:	add	ip, pc, #0, 12
    4cf8:	add	ip, ip, #143360	; 0x23000
    4cfc:	ldr	pc, [ip, #808]!	; 0x328

00004d00 <getdtablesize@plt>:
    4d00:	add	ip, pc, #0, 12
    4d04:	add	ip, ip, #143360	; 0x23000
    4d08:	ldr	pc, [ip, #800]!	; 0x320

00004d0c <abort@plt>:
    4d0c:	add	ip, pc, #0, 12
    4d10:	add	ip, ip, #143360	; 0x23000
    4d14:	ldr	pc, [ip, #792]!	; 0x318

00004d18 <connect@plt>:
    4d18:	add	ip, pc, #0, 12
    4d1c:	add	ip, ip, #143360	; 0x23000
    4d20:	ldr	pc, [ip, #784]!	; 0x310

00004d24 <rb_ignore_errno@plt>:
    4d24:	add	ip, pc, #0, 12
    4d28:	add	ip, ip, #143360	; 0x23000
    4d2c:	ldr	pc, [ip, #776]!	; 0x308

00004d30 <rb_settimeout@plt>:
    4d30:	add	ip, pc, #0, 12
    4d34:	add	ip, ip, #143360	; 0x23000
    4d38:	ldr	pc, [ip, #768]!	; 0x300

00004d3c <SSL_CTX_set_cipher_list@plt>:
    4d3c:	add	ip, pc, #0, 12
    4d40:	add	ip, ip, #143360	; 0x23000
    4d44:	ldr	pc, [ip, #760]!	; 0x2f8

00004d48 <ERR_get_error@plt>:
    4d48:	add	ip, pc, #0, 12
    4d4c:	add	ip, ip, #143360	; 0x23000
    4d50:	ldr	pc, [ip, #752]!	; 0x2f0

00004d54 <rb_radixtree_foreach_start@plt>:
    4d54:	add	ip, pc, #0, 12
    4d58:	add	ip, ip, #143360	; 0x23000
    4d5c:	ldr	pc, [ip, #744]!	; 0x2e8

00004d60 <strcasestr@plt>:
    4d60:	add	ip, pc, #0, 12
    4d64:	add	ip, ip, #143360	; 0x23000
    4d68:	ldr	pc, [ip, #736]!	; 0x2e0

00004d6c <rb_connect_tcp@plt>:
    4d6c:	add	ip, pc, #0, 12
    4d70:	add	ip, ip, #143360	; 0x23000
    4d74:	ldr	pc, [ip, #728]!	; 0x2d8

00004d78 <RAND_load_file@plt>:
    4d78:	add	ip, pc, #0, 12
    4d7c:	add	ip, ip, #143360	; 0x23000
    4d80:	ldr	pc, [ip, #720]!	; 0x2d0

00004d84 <signalfd@plt>:
    4d84:	add	ip, pc, #0, 12
    4d88:	add	ip, ip, #143360	; 0x23000
    4d8c:	ldr	pc, [ip, #712]!	; 0x2c8

00004d90 <rb_radixtree_foreach_next@plt>:
    4d90:	add	ip, pc, #0, 12
    4d94:	add	ip, ip, #143360	; 0x23000
    4d98:	ldr	pc, [ip, #704]!	; 0x2c0

00004d9c <SSL_CTX_free@plt>:
    4d9c:	add	ip, pc, #0, 12
    4da0:	add	ip, ip, #143360	; 0x23000
    4da4:	ldr	pc, [ip, #696]!	; 0x2b8

00004da8 <rb_getmaxconnect@plt>:
    4da8:	add	ip, pc, #0, 12
    4dac:	add	ip, ip, #143360	; 0x23000
    4db0:	ldr	pc, [ip, #688]!	; 0x2b0

00004db4 <sigwaitinfo@plt>:
    4db4:	add	ip, pc, #0, 12
    4db8:	add	ip, ip, #143360	; 0x23000
    4dbc:	ldr	pc, [ip, #680]!	; 0x2a8

00004dc0 <__libc_current_sigrtmin@plt>:
    4dc0:	add	ip, pc, #0, 12
    4dc4:	add	ip, ip, #143360	; 0x23000
    4dc8:	ldr	pc, [ip, #672]!	; 0x2a0

00004dcc <__xstat@plt>:
    4dcc:	add	ip, pc, #0, 12
    4dd0:	add	ip, ip, #143360	; 0x23000
    4dd4:	ldr	pc, [ip, #664]!	; 0x298

00004dd8 <rb_event_delete@plt>:
    4dd8:	add	ip, pc, #0, 12
    4ddc:	add	ip, ip, #143360	; 0x23000
    4de0:	ldr	pc, [ip, #656]!	; 0x290

00004de4 <rb_setselect@plt>:
    4de4:	add	ip, pc, #0, 12
    4de8:	add	ip, ip, #143360	; 0x23000
    4dec:	ldr	pc, [ip, #648]!	; 0x288

00004df0 <rb_fd_ssl@plt>:
    4df0:	add	ip, pc, #0, 12
    4df4:	add	ip, ip, #143360	; 0x23000
    4df8:	ldr	pc, [ip, #640]!	; 0x280

00004dfc <sigtimedwait@plt>:
    4dfc:	add	ip, pc, #0, 12
    4e00:	add	ip, ip, #143360	; 0x23000
    4e04:	ldr	pc, [ip, #632]!	; 0x278

00004e08 <rb_setenv@plt>:
    4e08:	add	ip, pc, #0, 12
    4e0c:	add	ip, ip, #143360	; 0x23000
    4e10:	ldr	pc, [ip, #624]!	; 0x270

00004e14 <signal@plt>:
    4e14:	add	ip, pc, #0, 12
    4e18:	add	ip, ip, #143360	; 0x23000
    4e1c:	ldr	pc, [ip, #616]!	; 0x268

00004e20 <rb_get_fd@plt>:
    4e20:	add	ip, pc, #0, 12
    4e24:	add	ip, ip, #143360	; 0x23000
    4e28:	ldr	pc, [ip, #608]!	; 0x260

00004e2c <epoll_create@plt>:
    4e2c:	add	ip, pc, #0, 12
    4e30:	add	ip, ip, #143360	; 0x23000
    4e34:	ldr	pc, [ip, #600]!	; 0x258

00004e38 <rb_clear_patricia@plt>:
    4e38:	add	ip, pc, #0, 12
    4e3c:	add	ip, ip, #143360	; 0x23000
    4e40:	ldr	pc, [ip, #592]!	; 0x250

00004e44 <__gmon_start__@plt>:
    4e44:	add	ip, pc, #0, 12
    4e48:	add	ip, ip, #143360	; 0x23000
    4e4c:	ldr	pc, [ip, #584]!	; 0x248

00004e50 <SSL_CTX_clear_options@plt>:
    4e50:	add	ip, pc, #0, 12
    4e54:	add	ip, ip, #143360	; 0x23000
    4e58:	ldr	pc, [ip, #576]!	; 0x240

00004e5c <SSL_get_current_cipher@plt>:
    4e5c:	add	ip, pc, #0, 12
    4e60:	add	ip, ip, #143360	; 0x23000
    4e64:	ldr	pc, [ip, #568]!	; 0x238

00004e68 <timer_create@plt>:
    4e68:	add	ip, pc, #0, 12
    4e6c:	add	ip, ip, #143360	; 0x23000
    4e70:	ldr	pc, [ip, #560]!	; 0x230

00004e74 <X509_get_X509_PUBKEY@plt>:
    4e74:	add	ip, pc, #0, 12
    4e78:	add	ip, ip, #143360	; 0x23000
    4e7c:	ldr	pc, [ip, #552]!	; 0x228

00004e80 <rb_select@plt>:
    4e80:	add	ip, pc, #0, 12
    4e84:	add	ip, ip, #143360	; 0x23000
    4e88:	ldr	pc, [ip, #544]!	; 0x220

00004e8c <rb_patricia_search_best@plt>:
    4e8c:	add	ip, pc, #0, 12
    4e90:	add	ip, ip, #143360	; 0x23000
    4e94:	ldr	pc, [ip, #536]!	; 0x218

00004e98 <vsnprintf@plt>:
    4e98:	add	ip, pc, #0, 12
    4e9c:	add	ip, ip, #143360	; 0x23000
    4ea0:	ldr	pc, [ip, #528]!	; 0x210

00004ea4 <socketpair@plt>:
    4ea4:	add	ip, pc, #0, 12
    4ea8:	add	ip, ip, #143360	; 0x23000
    4eac:	ldr	pc, [ip, #520]!	; 0x208

00004eb0 <strncpy@plt>:
    4eb0:	add	ip, pc, #0, 12
    4eb4:	add	ip, ip, #143360	; 0x23000
    4eb8:	ldr	pc, [ip, #512]!	; 0x200

00004ebc <fclose@plt>:
    4ebc:	add	ip, pc, #0, 12
    4ec0:	add	ip, ip, #143360	; 0x23000
    4ec4:	ldr	pc, [ip, #504]!	; 0x1f8

00004ec8 <recv@plt>:
    4ec8:	add	ip, pc, #0, 12
    4ecc:	add	ip, ip, #143360	; 0x23000
    4ed0:	ldr	pc, [ip, #496]!	; 0x1f0

00004ed4 <getenv@plt>:
    4ed4:	add	ip, pc, #0, 12
    4ed8:	add	ip, ip, #143360	; 0x23000
    4edc:	ldr	pc, [ip, #488]!	; 0x1e8

00004ee0 <ERR_error_string_n@plt>:
    4ee0:	add	ip, pc, #0, 12
    4ee4:	add	ip, ip, #143360	; 0x23000
    4ee8:	ldr	pc, [ip, #480]!	; 0x1e0

00004eec <strchr@plt>:
    4eec:	add	ip, pc, #0, 12
    4ef0:	add	ip, ip, #143360	; 0x23000
    4ef4:	ldr	pc, [ip, #472]!	; 0x1d8

00004ef8 <rb_gettimeofday@plt>:
    4ef8:	add	ip, pc, #0, 12
    4efc:	add	ip, ip, #143360	; 0x23000
    4f00:	ldr	pc, [ip, #464]!	; 0x1d0

00004f04 <strcasecmp@plt>:
    4f04:	add	ip, pc, #0, 12
    4f08:	add	ip, ip, #143360	; 0x23000
    4f0c:	ldr	pc, [ip, #456]!	; 0x1c8

00004f10 <listen@plt>:
    4f10:	add	ip, pc, #0, 12
    4f14:	add	ip, ip, #143360	; 0x23000
    4f18:	ldr	pc, [ip, #448]!	; 0x1c0

00004f1c <calloc@plt>:
    4f1c:	add	ip, pc, #0, 12
    4f20:	add	ip, ip, #143360	; 0x23000
    4f24:	ldr	pc, [ip, #440]!	; 0x1b8

00004f28 <SSL_write@plt>:
    4f28:	add	ip, pc, #0, 12
    4f2c:	add	ip, ip, #143360	; 0x23000
    4f30:	ldr	pc, [ip, #432]!	; 0x1b0

00004f34 <rb_event_init@plt>:
    4f34:	add	ip, pc, #0, 12
    4f38:	add	ip, ip, #143360	; 0x23000
    4f3c:	ldr	pc, [ip, #424]!	; 0x1a8

00004f40 <fopen@plt>:
    4f40:	add	ip, pc, #0, 12
    4f44:	add	ip, ip, #143360	; 0x23000
    4f48:	ldr	pc, [ip, #416]!	; 0x1a0

00004f4c <rb_set_nb@plt>:
    4f4c:	add	ip, pc, #0, 12
    4f50:	add	ip, ip, #143360	; 0x23000
    4f54:	ldr	pc, [ip, #408]!	; 0x198

00004f58 <memset@plt>:
    4f58:	add	ip, pc, #0, 12
    4f5c:	add	ip, ip, #143360	; 0x23000
    4f60:	ldr	pc, [ip, #400]!	; 0x190

00004f64 <rb_inet_pton@plt>:
    4f64:	add	ip, pc, #0, 12
    4f68:	add	ip, ip, #143360	; 0x23000
    4f6c:	ldr	pc, [ip, #392]!	; 0x188

00004f70 <rb_radixtree_stats@plt>:
    4f70:	add	ip, pc, #0, 12
    4f74:	add	ip, ip, #143360	; 0x23000
    4f78:	ldr	pc, [ip, #384]!	; 0x180

00004f7c <strrchr@plt>:
    4f7c:	add	ip, pc, #0, 12
    4f80:	add	ip, ip, #143360	; 0x23000
    4f84:	ldr	pc, [ip, #376]!	; 0x178

00004f88 <rb_write@plt>:
    4f88:	add	ip, pc, #0, 12
    4f8c:	add	ip, ip, #143360	; 0x23000
    4f90:	ldr	pc, [ip, #368]!	; 0x170

00004f94 <SSL_set_fd@plt>:
    4f94:	add	ip, pc, #0, 12
    4f98:	add	ip, ip, #143360	; 0x23000
    4f9c:	ldr	pc, [ip, #360]!	; 0x168

00004fa0 <SSL_CTX_ctrl@plt>:
    4fa0:	add	ip, pc, #0, 12
    4fa4:	add	ip, ip, #143360	; 0x23000
    4fa8:	ldr	pc, [ip, #352]!	; 0x160

00004fac <rb_linebuf_parse@plt>:
    4fac:	add	ip, pc, #0, 12
    4fb0:	add	ip, ip, #143360	; 0x23000
    4fb4:	ldr	pc, [ip, #344]!	; 0x158

00004fb8 <writev@plt>:
    4fb8:	add	ip, pc, #0, 12
    4fbc:	add	ip, ip, #143360	; 0x23000
    4fc0:	ldr	pc, [ip, #336]!	; 0x150

00004fc4 <rb_fsnprint@plt>:
    4fc4:	add	ip, pc, #0, 12
    4fc8:	add	ip, ip, #143360	; 0x23000
    4fcc:	ldr	pc, [ip, #328]!	; 0x148

00004fd0 <rb_strlcpy@plt>:
    4fd0:	add	ip, pc, #0, 12
    4fd4:	add	ip, ip, #143360	; 0x23000
    4fd8:	ldr	pc, [ip, #320]!	; 0x140

00004fdc <SSL_CIPHER_get_name@plt>:
    4fdc:	add	ip, pc, #0, 12
    4fe0:	add	ip, ip, #143360	; 0x23000
    4fe4:	ldr	pc, [ip, #312]!	; 0x138

00004fe8 <posix_spawnattr_init@plt>:
    4fe8:	add	ip, pc, #0, 12
    4fec:	add	ip, ip, #143360	; 0x23000
    4ff0:	ldr	pc, [ip, #304]!	; 0x130

00004ff4 <OpenSSL_version_num@plt>:
    4ff4:	add	ip, pc, #0, 12
    4ff8:	add	ip, ip, #143360	; 0x23000
    4ffc:	ldr	pc, [ip, #296]!	; 0x128

00005000 <rb_kill@plt>:
    5000:	add	ip, pc, #0, 12
    5004:	add	ip, ip, #143360	; 0x23000
    5008:	ldr	pc, [ip, #288]!	; 0x120

0000500c <free@plt>:
    500c:	add	ip, pc, #0, 12
    5010:	add	ip, ip, #143360	; 0x23000
    5014:	ldr	pc, [ip, #280]!	; 0x118

00005018 <sendmsg@plt>:
    5018:	add	ip, pc, #0, 12
    501c:	add	ip, ip, #143360	; 0x23000
    5020:	ldr	pc, [ip, #272]!	; 0x110

00005024 <read@plt>:
    5024:	add	ip, pc, #0, 12
    5028:	add	ip, ip, #143360	; 0x23000
    502c:	ldr	pc, [ip, #264]!	; 0x108

00005030 <rb_radixtree_elem_add@plt>:
    5030:	add	ip, pc, #0, 12
    5034:	add	ip, ip, #143360	; 0x23000
    5038:	ldr	pc, [ip, #256]!	; 0x100

0000503c <write@plt>:
    503c:	add	ip, pc, #0, 12
    5040:	add	ip, ip, #143360	; 0x23000
    5044:	ldr	pc, [ip, #248]!	; 0xf8

00005048 <SSL_new@plt>:
    5048:	add	ip, pc, #0, 12
    504c:	add	ip, ip, #143360	; 0x23000
    5050:	ldr	pc, [ip, #240]!	; 0xf0

00005054 <access@plt>:
    5054:	add	ip, pc, #0, 12
    5058:	add	ip, ip, #143360	; 0x23000
    505c:	ldr	pc, [ip, #232]!	; 0xe8

00005060 <rb_lib_loop@plt>:
    5060:	add	ip, pc, #0, 12
    5064:	add	ip, ip, #143360	; 0x23000
    5068:	ldr	pc, [ip, #224]!	; 0xe0

0000506c <timer_settime@plt>:
    506c:	add	ip, pc, #0, 12
    5070:	add	ip, ip, #143360	; 0x23000
    5074:	ldr	pc, [ip, #216]!	; 0xd8

00005078 <gettimeofday@plt>:
    5078:	add	ip, pc, #0, 12
    507c:	add	ip, ip, #143360	; 0x23000
    5080:	ldr	pc, [ip, #208]!	; 0xd0

00005084 <accept@plt>:
    5084:	add	ip, pc, #0, 12
    5088:	add	ip, ip, #143360	; 0x23000
    508c:	ldr	pc, [ip, #200]!	; 0xc8

00005090 <SSL_read@plt>:
    5090:	add	ip, pc, #0, 12
    5094:	add	ip, ip, #143360	; 0x23000
    5098:	ldr	pc, [ip, #192]!	; 0xc0

0000509c <rb_read@plt>:
    509c:	add	ip, pc, #0, 12
    50a0:	add	ip, ip, #143360	; 0x23000
    50a4:	ldr	pc, [ip, #184]!	; 0xb8

000050a8 <socket@plt>:
    50a8:	add	ip, pc, #0, 12
    50ac:	add	ip, ip, #143360	; 0x23000
    50b0:	ldr	pc, [ip, #176]!	; 0xb0

000050b4 <rb_linebuf_get@plt>:
    50b4:	add	ip, pc, #0, 12
    50b8:	add	ip, ip, #143360	; 0x23000
    50bc:	ldr	pc, [ip, #168]!	; 0xa8

000050c0 <rb_radixtree_foreach_cur@plt>:
    50c0:	add	ip, pc, #0, 12
    50c4:	add	ip, ip, #143360	; 0x23000
    50c8:	ldr	pc, [ip, #160]!	; 0xa0

000050cc <epoll_wait@plt>:
    50cc:	add	ip, pc, #0, 12
    50d0:	add	ip, ip, #143360	; 0x23000
    50d4:	ldr	pc, [ip, #152]!	; 0x98

000050d8 <SSL_do_handshake@plt>:
    50d8:	add	ip, pc, #0, 12
    50dc:	add	ip, ip, #143360	; 0x23000
    50e0:	ldr	pc, [ip, #144]!	; 0x90

000050e4 <rb_linebuf_flush@plt>:
    50e4:	add	ip, pc, #0, 12
    50e8:	add	ip, ip, #143360	; 0x23000
    50ec:	ldr	pc, [ip, #136]!	; 0x88

000050f0 <posix_spawn@plt>:
    50f0:	add	ip, pc, #0, 12
    50f4:	add	ip, ip, #143360	; 0x23000
    50f8:	ldr	pc, [ip, #128]!	; 0x80

000050fc <strlen@plt>:
    50fc:	add	ip, pc, #0, 12
    5100:	add	ip, ip, #143360	; 0x23000
    5104:	ldr	pc, [ip, #120]!	; 0x78

00005108 <rb_current_time@plt>:
    5108:	add	ip, pc, #0, 12
    510c:	add	ip, ip, #143360	; 0x23000
    5110:	ldr	pc, [ip, #112]!	; 0x70

00005114 <strtoul@plt>:
    5114:	add	ip, pc, #0, 12
    5118:	add	ip, ip, #143360	; 0x23000
    511c:	ldr	pc, [ip, #104]!	; 0x68

00005120 <memcpy@plt>:
    5120:	add	ip, pc, #0, 12
    5124:	add	ip, ip, #143360	; 0x23000
    5128:	ldr	pc, [ip, #96]!	; 0x60

0000512c <PEM_read_X509@plt>:
    512c:	add	ip, pc, #0, 12
    5130:	add	ip, ip, #143360	; 0x23000
    5134:	ldr	pc, [ip, #88]!	; 0x58

00005138 <posix_spawnattr_setflags@plt>:
    5138:	add	ip, pc, #0, 12
    513c:	add	ip, ip, #143360	; 0x23000
    5140:	ldr	pc, [ip, #80]!	; 0x50

00005144 <__ctype_tolower_loc@plt>:
    5144:	add	ip, pc, #0, 12
    5148:	add	ip, ip, #143360	; 0x23000
    514c:	ldr	pc, [ip, #72]!	; 0x48

00005150 <SSL_CTX_use_certificate_chain_file@plt>:
    5150:	add	ip, pc, #0, 12
    5154:	add	ip, ip, #143360	; 0x23000
    5158:	ldr	pc, [ip, #64]!	; 0x40

0000515c <rb_free_rb_dlink_node@plt>:
    515c:	add	ip, pc, #0, 12
    5160:	add	ip, ip, #143360	; 0x23000
    5164:	ldr	pc, [ip, #56]!	; 0x38

00005168 <SSL_CTX_set_options@plt>:
    5168:	add	ip, pc, #0, 12
    516c:	add	ip, ip, #143360	; 0x23000
    5170:	ldr	pc, [ip, #48]!	; 0x30

00005174 <posix_spawnattr_destroy@plt>:
    5174:	add	ip, pc, #0, 12
    5178:	add	ip, ip, #143360	; 0x23000
    517c:	ldr	pc, [ip, #40]!	; 0x28

00005180 <bcmp@plt>:
    5180:	add	ip, pc, #0, 12
    5184:	add	ip, ip, #143360	; 0x23000
    5188:	ldr	pc, [ip, #32]!

0000518c <rb_close@plt>:
    518c:	add	ip, pc, #0, 12
    5190:	add	ip, ip, #143360	; 0x23000
    5194:	ldr	pc, [ip, #24]!

00005198 <strtol@plt>:
    5198:	add	ip, pc, #0, 12
    519c:	add	ip, ip, #143360	; 0x23000
    51a0:	ldr	pc, [ip, #16]!

000051a4 <sigaddset@plt>:
    51a4:	add	ip, pc, #0, 12
    51a8:	add	ip, ip, #143360	; 0x23000
    51ac:	ldr	pc, [ip, #8]!

000051b0 <strcpy@plt>:
    51b0:	add	ip, pc, #0, 12
    51b4:	add	ip, ip, #143360	; 0x23000
    51b8:	ldr	pc, [ip, #0]!

000051bc <waitpid@plt>:
    51bc:	add	ip, pc, #0, 12
    51c0:	add	ip, ip, #139264	; 0x22000
    51c4:	ldr	pc, [ip, #4088]!	; 0xff8

000051c8 <rb_run_one_event@plt>:
    51c8:	add	ip, pc, #0, 12
    51cc:	add	ip, ip, #139264	; 0x22000
    51d0:	ldr	pc, [ip, #4080]!	; 0xff0

000051d4 <rb_patricia_search_exact@plt>:
    51d4:	add	ip, pc, #0, 12
    51d8:	add	ip, ip, #139264	; 0x22000
    51dc:	ldr	pc, [ip, #4072]!	; 0xfe8

000051e0 <strncat@plt>:
    51e0:	add	ip, pc, #0, 12
    51e4:	add	ip, ip, #139264	; 0x22000
    51e8:	ldr	pc, [ip, #4064]!	; 0xfe0

000051ec <atol@plt>:
    51ec:	add	ip, pc, #0, 12
    51f0:	add	ip, ip, #139264	; 0x22000
    51f4:	ldr	pc, [ip, #4056]!	; 0xfd8

000051f8 <rb_bh_free@plt>:
    51f8:	add	ip, pc, #0, 12
    51fc:	add	ip, ip, #139264	; 0x22000
    5200:	ldr	pc, [ip, #4048]!	; 0xfd0

00005204 <rb_init_rb_dlink_nodes@plt>:
    5204:	add	ip, pc, #0, 12
    5208:	add	ip, ip, #139264	; 0x22000
    520c:	ldr	pc, [ip, #4040]!	; 0xfc8

00005210 <EVP_sha1@plt>:
    5210:	add	ip, pc, #0, 12
    5214:	add	ip, ip, #139264	; 0x22000
    5218:	ldr	pc, [ip, #4032]!	; 0xfc0

0000521c <rb_patricia_lookup@plt>:
    521c:	add	ip, pc, #0, 12
    5220:	add	ip, ip, #139264	; 0x22000
    5224:	ldr	pc, [ip, #4024]!	; 0xfb8

00005228 <shutdown@plt>:
    5228:	add	ip, pc, #0, 12
    522c:	add	ip, ip, #139264	; 0x22000
    5230:	ldr	pc, [ip, #4016]!	; 0xfb0

00005234 <bind@plt>:
    5234:	add	ip, pc, #0, 12
    5238:	add	ip, ip, #139264	; 0x22000
    523c:	ldr	pc, [ip, #4008]!	; 0xfa8

00005240 <rb_lib_log@plt>:
    5240:	add	ip, pc, #0, 12
    5244:	add	ip, ip, #139264	; 0x22000
    5248:	ldr	pc, [ip, #4000]!	; 0xfa0

0000524c <SSL_CTX_use_PrivateKey_file@plt>:
    524c:	add	ip, pc, #0, 12
    5250:	add	ip, ip, #139264	; 0x22000
    5254:	ldr	pc, [ip, #3992]!	; 0xf98

00005258 <select@plt>:
    5258:	add	ip, pc, #0, 12
    525c:	add	ip, ip, #139264	; 0x22000
    5260:	ldr	pc, [ip, #3984]!	; 0xf90

00005264 <close@plt>:
    5264:	add	ip, pc, #0, 12
    5268:	add	ip, ip, #139264	; 0x22000
    526c:	ldr	pc, [ip, #3976]!	; 0xf88

00005270 <rb_bh_alloc@plt>:
    5270:	add	ip, pc, #0, 12
    5274:	add	ip, ip, #139264	; 0x22000
    5278:	ldr	pc, [ip, #3968]!	; 0xf80

0000527c <SSL_free@plt>:
    527c:	add	ip, pc, #0, 12
    5280:	add	ip, ip, #139264	; 0x22000
    5284:	ldr	pc, [ip, #3960]!	; 0xf78

00005288 <rb_pipe@plt>:
    5288:	add	ip, pc, #0, 12
    528c:	add	ip, ip, #139264	; 0x22000
    5290:	ldr	pc, [ip, #3952]!	; 0xf70

00005294 <strncasecmp@plt>:
    5294:	add	ip, pc, #0, 12
    5298:	add	ip, ip, #139264	; 0x22000
    529c:	ldr	pc, [ip, #3944]!	; 0xf68

000052a0 <rb_outofmemory@plt>:
    52a0:	add	ip, pc, #0, 12
    52a4:	add	ip, ip, #139264	; 0x22000
    52a8:	ldr	pc, [ip, #3936]!	; 0xf60

000052ac <rb_set_time@plt>:
    52ac:	add	ip, pc, #0, 12
    52b0:	add	ip, ip, #139264	; 0x22000
    52b4:	ldr	pc, [ip, #3928]!	; 0xf58

000052b8 <rb_dictionary_stats@plt>:
    52b8:	add	ip, pc, #0, 12
    52bc:	add	ip, ip, #139264	; 0x22000
    52c0:	ldr	pc, [ip, #3920]!	; 0xf50

000052c4 <malloc@plt>:
    52c4:	add	ip, pc, #0, 12
    52c8:	add	ip, ip, #139264	; 0x22000
    52cc:	ldr	pc, [ip, #3912]!	; 0xf48

000052d0 <sigprocmask@plt>:
    52d0:	add	ip, pc, #0, 12
    52d4:	add	ip, ip, #139264	; 0x22000
    52d8:	ldr	pc, [ip, #3904]!	; 0xf40

000052dc <rb_event_run@plt>:
    52dc:	add	ip, pc, #0, 12
    52e0:	add	ip, ip, #139264	; 0x22000
    52e4:	ldr	pc, [ip, #3896]!	; 0xf38

000052e8 <SSL_set_accept_state@plt>:
    52e8:	add	ip, pc, #0, 12
    52ec:	add	ip, ip, #139264	; 0x22000
    52f0:	ldr	pc, [ip, #3888]!	; 0xf30

000052f4 <rb_init_bh@plt>:
    52f4:	add	ip, pc, #0, 12
    52f8:	add	ip, ip, #139264	; 0x22000
    52fc:	ldr	pc, [ip, #3880]!	; 0xf28

00005300 <PEM_read_DHparams@plt>:
    5300:	add	ip, pc, #0, 12
    5304:	add	ip, ip, #139264	; 0x22000
    5308:	ldr	pc, [ip, #3872]!	; 0xf20

0000530c <gmtime_r@plt>:
    530c:	add	ip, pc, #0, 12
    5310:	add	ip, ip, #139264	; 0x22000
    5314:	ldr	pc, [ip, #3864]!	; 0xf18

00005318 <poll@plt>:
    5318:	add	ip, pc, #0, 12
    531c:	add	ip, ip, #139264	; 0x22000
    5320:	ldr	pc, [ip, #3856]!	; 0xf10

00005324 <ASN1_item_digest@plt>:
    5324:	add	ip, pc, #0, 12
    5328:	add	ip, ip, #139264	; 0x22000
    532c:	ldr	pc, [ip, #3848]!	; 0xf08

00005330 <strnlen@plt>:
    5330:	add	ip, pc, #0, 12
    5334:	add	ip, ip, #139264	; 0x22000
    5338:	ldr	pc, [ip, #3840]!	; 0xf00

0000533c <SSL_get_peer_certificate@plt>:
    533c:	add	ip, pc, #0, 12
    5340:	add	ip, ip, #139264	; 0x22000
    5344:	ldr	pc, [ip, #3832]!	; 0xef8

00005348 <rb_dictionary_find@plt>:
    5348:	add	ip, pc, #0, 12
    534c:	add	ip, ip, #139264	; 0x22000
    5350:	ldr	pc, [ip, #3824]!	; 0xef0

00005354 <rb_lib_init@plt>:
    5354:	add	ip, pc, #0, 12
    5358:	add	ip, ip, #139264	; 0x22000
    535c:	ldr	pc, [ip, #3816]!	; 0xee8

00005360 <SSL_get_verify_result@plt>:
    5360:	add	ip, pc, #0, 12
    5364:	add	ip, ip, #139264	; 0x22000
    5368:	ldr	pc, [ip, #3808]!	; 0xee0

0000536c <strtok_r@plt>:
    536c:	add	ip, pc, #0, 12
    5370:	add	ip, ip, #139264	; 0x22000
    5374:	ldr	pc, [ip, #3800]!	; 0xed8

00005378 <rb_lib_restart@plt>:
    5378:	add	ip, pc, #0, 12
    537c:	add	ip, ip, #139264	; 0x22000
    5380:	ldr	pc, [ip, #3792]!	; 0xed0

00005384 <DH_free@plt>:
    5384:	add	ip, pc, #0, 12
    5388:	add	ip, ip, #139264	; 0x22000
    538c:	ldr	pc, [ip, #3784]!	; 0xec8

00005390 <timer_delete@plt>:
    5390:	add	ip, pc, #0, 12
    5394:	add	ip, ip, #139264	; 0x22000
    5398:	ldr	pc, [ip, #3776]!	; 0xec0

0000539c <rb_open@plt>:
    539c:	add	ip, pc, #0, 12
    53a0:	add	ip, ip, #139264	; 0x22000
    53a4:	ldr	pc, [ip, #3768]!	; 0xeb8

000053a8 <rb_get_sockerr@plt>:
    53a8:	add	ip, pc, #0, 12
    53ac:	add	ip, ip, #139264	; 0x22000
    53b0:	ldr	pc, [ip, #3760]!	; 0xeb0

000053b4 <send@plt>:
    53b4:	add	ip, pc, #0, 12
    53b8:	add	ip, ip, #139264	; 0x22000
    53bc:	ldr	pc, [ip, #3752]!	; 0xea8

000053c0 <SSL_shutdown@plt>:
    53c0:	add	ip, pc, #0, 12
    53c4:	add	ip, ip, #139264	; 0x22000
    53c8:	ldr	pc, [ip, #3744]!	; 0xea0

000053cc <rb_bh_create@plt>:
    53cc:	add	ip, pc, #0, 12
    53d0:	add	ip, ip, #139264	; 0x22000
    53d4:	ldr	pc, [ip, #3736]!	; 0xe98

000053d8 <dup2@plt>:
    53d8:	add	ip, pc, #0, 12
    53dc:	add	ip, ip, #139264	; 0x22000
    53e0:	ldr	pc, [ip, #3728]!	; 0xe90

000053e4 <getpid@plt>:
    53e4:	add	ip, pc, #0, 12
    53e8:	add	ip, ip, #139264	; 0x22000
    53ec:	ldr	pc, [ip, #3720]!	; 0xe88

000053f0 <rb_writev@plt>:
    53f0:	add	ip, pc, #0, 12
    53f4:	add	ip, ip, #139264	; 0x22000
    53f8:	ldr	pc, [ip, #3712]!	; 0xe80

000053fc <RAND_bytes@plt>:
    53fc:	add	ip, pc, #0, 12
    5400:	add	ip, ip, #139264	; 0x22000
    5404:	ldr	pc, [ip, #3704]!	; 0xe78

00005408 <rb_linebuf_newbuf@plt>:
    5408:	add	ip, pc, #0, 12
    540c:	add	ip, ip, #139264	; 0x22000
    5410:	ldr	pc, [ip, #3696]!	; 0xe70

00005414 <rb_fdlist_init@plt>:
    5414:	add	ip, pc, #0, 12
    5418:	add	ip, ip, #139264	; 0x22000
    541c:	ldr	pc, [ip, #3688]!	; 0xe68

00005420 <rb_event_add@plt>:
    5420:	add	ip, pc, #0, 12
    5424:	add	ip, ip, #139264	; 0x22000
    5428:	ldr	pc, [ip, #3680]!	; 0xe60

0000542c <readlink@plt>:
    542c:	add	ip, pc, #0, 12
    5430:	add	ip, ip, #139264	; 0x22000
    5434:	ldr	pc, [ip, #3672]!	; 0xe58

00005438 <SSL_CTX_new@plt>:
    5438:	add	ip, pc, #0, 12
    543c:	add	ip, ip, #139264	; 0x22000
    5440:	ldr	pc, [ip, #3664]!	; 0xe50

00005444 <rb_setup_fd@plt>:
    5444:	add	ip, pc, #0, 12
    5448:	add	ip, ip, #139264	; 0x22000
    544c:	ldr	pc, [ip, #3656]!	; 0xe48

00005450 <recvmsg@plt>:
    5450:	add	ip, pc, #0, 12
    5454:	add	ip, ip, #139264	; 0x22000
    5458:	ldr	pc, [ip, #3648]!	; 0xe40

0000545c <rand@plt>:
    545c:	add	ip, pc, #0, 12
    5460:	add	ip, ip, #139264	; 0x22000
    5464:	ldr	pc, [ip, #3640]!	; 0xe38

00005468 <rb_linebuf_init@plt>:
    5468:	add	ip, pc, #0, 12
    546c:	add	ip, ip, #139264	; 0x22000
    5470:	ldr	pc, [ip, #3632]!	; 0xe30

00005474 <__fxstat@plt>:
    5474:	add	ip, pc, #0, 12
    5478:	add	ip, ip, #139264	; 0x22000
    547c:	ldr	pc, [ip, #3624]!	; 0xe28

00005480 <SSL_set_connect_state@plt>:
    5480:	add	ip, pc, #0, 12
    5484:	add	ip, ip, #139264	; 0x22000
    5488:	ldr	pc, [ip, #3616]!	; 0xe20

0000548c <rb_radixtree_elem_find@plt>:
    548c:	add	ip, pc, #0, 12
    5490:	add	ip, ip, #139264	; 0x22000
    5494:	ldr	pc, [ip, #3608]!	; 0xe18

00005498 <rb_make_rb_dlink_node@plt>:
    5498:	add	ip, pc, #0, 12
    549c:	add	ip, ip, #139264	; 0x22000
    54a0:	ldr	pc, [ip, #3600]!	; 0xe10

000054a4 <rb_strlcat@plt>:
    54a4:	add	ip, pc, #0, 12
    54a8:	add	ip, ip, #139264	; 0x22000
    54ac:	ldr	pc, [ip, #3592]!	; 0xe08

000054b0 <rb_spawn_process@plt>:
    54b0:	add	ip, pc, #0, 12
    54b4:	add	ip, ip, #139264	; 0x22000
    54b8:	ldr	pc, [ip, #3584]!	; 0xe00

000054bc <EVP_sha512@plt>:
    54bc:	add	ip, pc, #0, 12
    54c0:	add	ip, ip, #139264	; 0x22000
    54c4:	ldr	pc, [ip, #3576]!	; 0xdf8

000054c8 <snprintf@plt>:
    54c8:	add	ip, pc, #0, 12
    54cc:	add	ip, ip, #139264	; 0x22000
    54d0:	ldr	pc, [ip, #3568]!	; 0xdf0

000054d4 <RAND_status@plt>:
    54d4:	add	ip, pc, #0, 12
    54d8:	add	ip, ip, #139264	; 0x22000
    54dc:	ldr	pc, [ip, #3560]!	; 0xde8

000054e0 <timerfd_create@plt>:
    54e0:	add	ip, pc, #0, 12
    54e4:	add	ip, ip, #139264	; 0x22000
    54e8:	ldr	pc, [ip, #3552]!	; 0xde0

000054ec <EVP_sha256@plt>:
    54ec:	add	ip, pc, #0, 12
    54f0:	add	ip, ip, #139264	; 0x22000
    54f4:	ldr	pc, [ip, #3544]!	; 0xdd8

000054f8 <strcspn@plt>:
    54f8:	add	ip, pc, #0, 12
    54fc:	add	ip, ip, #139264	; 0x22000
    5500:	ldr	pc, [ip, #3536]!	; 0xdd0

00005504 <rb_linebuf_put@plt>:
    5504:	add	ip, pc, #0, 12
    5508:	add	ip, ip, #139264	; 0x22000
    550c:	ldr	pc, [ip, #3528]!	; 0xdc8

00005510 <rb_listen@plt>:
    5510:	add	ip, pc, #0, 12
    5514:	add	ip, ip, #139264	; 0x22000
    5518:	ldr	pc, [ip, #3520]!	; 0xdc0

0000551c <fcntl@plt>:
    551c:	add	ip, pc, #0, 12
    5520:	add	ip, ip, #139264	; 0x22000
    5524:	ldr	pc, [ip, #3512]!	; 0xdb8

00005528 <strncmp@plt>:
    5528:	add	ip, pc, #0, 12
    552c:	add	ip, ip, #139264	; 0x22000
    5530:	ldr	pc, [ip, #3504]!	; 0xdb0

00005534 <kill@plt>:
    5534:	add	ip, pc, #0, 12
    5538:	add	ip, ip, #139264	; 0x22000
    553c:	ldr	pc, [ip, #3496]!	; 0xda8

00005540 <nanosleep@plt>:
    5540:	add	ip, pc, #0, 12
    5544:	add	ip, ip, #139264	; 0x22000
    5548:	ldr	pc, [ip, #3488]!	; 0xda0

0000554c <rb_event_next@plt>:
    554c:	add	ip, pc, #0, 12
    5550:	add	ip, ip, #139264	; 0x22000
    5554:	ldr	pc, [ip, #3480]!	; 0xd98

00005558 <realloc@plt>:
    5558:	add	ip, pc, #0, 12
    555c:	add	ip, ip, #139264	; 0x22000
    5560:	ldr	pc, [ip, #3472]!	; 0xd90

00005564 <timerfd_settime@plt>:
    5564:	add	ip, pc, #0, 12
    5568:	add	ip, ip, #139264	; 0x22000
    556c:	ldr	pc, [ip, #3464]!	; 0xd88

00005570 <epoll_ctl@plt>:
    5570:	add	ip, pc, #0, 12
    5574:	add	ip, ip, #139264	; 0x22000
    5578:	ldr	pc, [ip, #3456]!	; 0xd80

0000557c <X509_free@plt>:
    557c:	add	ip, pc, #0, 12
    5580:	add	ip, ip, #139264	; 0x22000
    5584:	ldr	pc, [ip, #3448]!	; 0xd78

00005588 <readv@plt>:
    5588:	add	ip, pc, #0, 12
    558c:	add	ip, ip, #139264	; 0x22000
    5590:	ldr	pc, [ip, #3440]!	; 0xd70

00005594 <getsockopt@plt>:
    5594:	add	ip, pc, #0, 12
    5598:	add	ip, ip, #139264	; 0x22000
    559c:	ldr	pc, [ip, #3432]!	; 0xd68

000055a0 <pipe@plt>:
    55a0:	add	ip, pc, #0, 12
    55a4:	add	ip, ip, #139264	; 0x22000
    55a8:	ldr	pc, [ip, #3424]!	; 0xd60

000055ac <OpenSSL_version@plt>:
    55ac:	add	ip, pc, #0, 12
    55b0:	add	ip, ip, #139264	; 0x22000
    55b4:	ldr	pc, [ip, #3416]!	; 0xd58

000055b8 <setsockopt@plt>:
    55b8:	add	ip, pc, #0, 12
    55bc:	add	ip, ip, #139264	; 0x22000
    55c0:	ldr	pc, [ip, #3408]!	; 0xd50

000055c4 <SSL_get_error@plt>:
    55c4:	add	ip, pc, #0, 12
    55c8:	add	ip, ip, #139264	; 0x22000
    55cc:	ldr	pc, [ip, #3400]!	; 0xd48

000055d0 <SSL_get_version@plt>:
    55d0:	add	ip, pc, #0, 12
    55d4:	add	ip, ip, #139264	; 0x22000
    55d8:	ldr	pc, [ip, #3392]!	; 0xd40

000055dc <rb_radixtree_delete@plt>:
    55dc:	add	ip, pc, #0, 12
    55e0:	add	ip, ip, #139264	; 0x22000
    55e4:	ldr	pc, [ip, #3384]!	; 0xd38

000055e8 <memchr@plt>:
    55e8:	add	ip, pc, #0, 12
    55ec:	add	ip, ip, #139264	; 0x22000
    55f0:	ldr	pc, [ip, #3376]!	; 0xd30

000055f4 <setenv@plt>:
    55f4:	add	ip, pc, #0, 12
    55f8:	add	ip, ip, #139264	; 0x22000
    55fc:	ldr	pc, [ip, #3368]!	; 0xd28

00005600 <strcmp@plt>:
    5600:	add	ip, pc, #0, 12
    5604:	add	ip, ip, #139264	; 0x22000
    5608:	ldr	pc, [ip, #3360]!	; 0xd20

0000560c <__errno_location@plt>:
    560c:	add	ip, pc, #0, 12
    5610:	add	ip, ip, #139264	; 0x22000
    5614:	ldr	pc, [ip, #3352]!	; 0xd18

00005618 <__cxa_finalize@plt>:
    5618:	add	ip, pc, #0, 12
    561c:	add	ip, ip, #139264	; 0x22000
    5620:	ldr	pc, [ip, #3344]!	; 0xd10

00005624 <sprintf@plt>:
    5624:	add	ip, pc, #0, 12
    5628:	add	ip, ip, #139264	; 0x22000
    562c:	ldr	pc, [ip, #3336]!	; 0xd08

00005630 <rb_bh_usage@plt>:
    5630:	add	ip, pc, #0, 12
    5634:	add	ip, ip, #139264	; 0x22000
    5638:	ldr	pc, [ip, #3328]!	; 0xd00

0000563c <SSL_CTX_set_verify@plt>:
    563c:	add	ip, pc, #0, 12
    5640:	add	ip, ip, #139264	; 0x22000
    5644:	ldr	pc, [ip, #3320]!	; 0xcf8

Disassembly of section .text:

00005648 <call_weak_fn>:
    5648:	ldr	r3, [pc, #20]	; 5664 <call_weak_fn+0x1c>
    564c:	ldr	r2, [pc, #20]	; 5668 <call_weak_fn+0x20>
    5650:	add	r3, pc, r3
    5654:	ldr	r2, [r3, r2]
    5658:	cmp	r2, #0
    565c:	bxeq	lr
    5660:	b	4e44 <__gmon_start__@plt>
    5664:	.word	0x000229a8
    5668:	.word	0x00000350

0000566c <deregister_tm_clones>:
    566c:	ldr	r0, [pc, #44]	; 56a0 <deregister_tm_clones+0x34>
    5670:	ldr	r3, [pc, #44]	; 56a4 <deregister_tm_clones+0x38>
    5674:	add	r0, pc, r0
    5678:	add	r3, pc, r3
    567c:	cmp	r3, r0
    5680:	ldr	r3, [pc, #32]	; 56a8 <deregister_tm_clones+0x3c>
    5684:	add	r3, pc, r3
    5688:	bxeq	lr
    568c:	ldr	r2, [pc, #24]	; 56ac <deregister_tm_clones+0x40>
    5690:	ldr	r3, [r3, r2]
    5694:	cmp	r3, #0
    5698:	bxeq	lr
    569c:	bx	r3
    56a0:	.word	0x00022e44
    56a4:	.word	0x00022e40
    56a8:	.word	0x00022974
    56ac:	.word	0x0000036c

000056b0 <register_tm_clones>:
    56b0:	ldr	r0, [pc, #56]	; 56f0 <register_tm_clones+0x40>
    56b4:	ldr	r3, [pc, #56]	; 56f4 <register_tm_clones+0x44>
    56b8:	add	r0, pc, r0
    56bc:	add	r3, pc, r3
    56c0:	sub	r1, r3, r0
    56c4:	ldr	r3, [pc, #44]	; 56f8 <register_tm_clones+0x48>
    56c8:	asr	r1, r1, #2
    56cc:	add	r3, pc, r3
    56d0:	add	r1, r1, r1, lsr #31
    56d4:	asrs	r1, r1, #1
    56d8:	bxeq	lr
    56dc:	ldr	r2, [pc, #24]	; 56fc <register_tm_clones+0x4c>
    56e0:	ldr	r3, [r3, r2]
    56e4:	cmp	r3, #0
    56e8:	bxeq	lr
    56ec:	bx	r3
    56f0:	.word	0x00022e00
    56f4:	.word	0x00022dfc
    56f8:	.word	0x0002292c
    56fc:	.word	0x0000037c

00005700 <__do_global_dtors_aux>:
    5700:	ldr	r3, [pc, #76]	; 5754 <__do_global_dtors_aux+0x54>
    5704:	ldr	r2, [pc, #76]	; 5758 <__do_global_dtors_aux+0x58>
    5708:	add	r3, pc, r3
    570c:	add	r2, pc, r2
    5710:	ldrb	r3, [r3]
    5714:	cmp	r3, #0
    5718:	bxne	lr
    571c:	ldr	r3, [pc, #56]	; 575c <__do_global_dtors_aux+0x5c>
    5720:	push	{r4, lr}
    5724:	ldr	r3, [r2, r3]
    5728:	cmp	r3, #0
    572c:	beq	573c <__do_global_dtors_aux+0x3c>
    5730:	ldr	r3, [pc, #40]	; 5760 <__do_global_dtors_aux+0x60>
    5734:	ldr	r0, [pc, r3]
    5738:	bl	5618 <__cxa_finalize@plt>
    573c:	bl	566c <deregister_tm_clones>
    5740:	ldr	r3, [pc, #28]	; 5764 <__do_global_dtors_aux+0x64>
    5744:	mov	r2, #1
    5748:	add	r3, pc, r3
    574c:	strb	r2, [r3]
    5750:	pop	{r4, pc}
    5754:	.word	0x00022db0
    5758:	.word	0x000228ec
    575c:	.word	0x0000040c
    5760:	.word	0x00022cd8
    5764:	.word	0x00022d70

00005768 <frame_dummy>:
    5768:	b	56b0 <register_tm_clones>

0000576c <rb_spawn_process>:
    576c:	push	{r4, r5, r6, sl, fp, lr}
    5770:	add	fp, sp, #16
    5774:	sub	sp, sp, #352	; 0x160
    5778:	mov	r4, r1
    577c:	mov	r5, r0
    5780:	add	r6, sp, #12
    5784:	mov	r0, r6
    5788:	bl	4fe8 <posix_spawnattr_init@plt>
    578c:	mov	r0, r6
    5790:	mov	r1, #64	; 0x40
    5794:	bl	5138 <posix_spawnattr_setflags@plt>
    5798:	ldr	r0, [pc, #80]	; 57f0 <rb_spawn_process+0x84>
    579c:	ldr	r0, [pc, r0]
    57a0:	ldr	r0, [r0]
    57a4:	str	r4, [sp]
    57a8:	str	r0, [sp, #4]
    57ac:	sub	r0, fp, #20
    57b0:	mov	r1, r5
    57b4:	mov	r2, #0
    57b8:	mov	r3, r6
    57bc:	bl	50f0 <posix_spawn@plt>
    57c0:	mov	r4, r0
    57c4:	mov	r0, r6
    57c8:	bl	5174 <posix_spawnattr_destroy@plt>
    57cc:	cmp	r4, #0
    57d0:	beq	57e4 <rb_spawn_process+0x78>
    57d4:	bl	560c <__errno_location@plt>
    57d8:	str	r4, [r0]
    57dc:	mvn	r0, #0
    57e0:	str	r0, [fp, #-20]	; 0xffffffec
    57e4:	ldr	r0, [fp, #-20]	; 0xffffffec
    57e8:	sub	sp, fp, #16
    57ec:	pop	{r4, r5, r6, sl, fp, pc}
    57f0:	.word	0x00022bf0

000057f4 <rb_gettimeofday>:
    57f4:	b	5078 <gettimeofday@plt>

000057f8 <rb_sleep>:
    57f8:	push	{fp, lr}
    57fc:	mov	fp, sp
    5800:	sub	sp, sp, #8
    5804:	str	r0, [sp]
    5808:	mov	r0, #1000	; 0x3e8
    580c:	mul	r0, r1, r0
    5810:	str	r0, [sp, #4]
    5814:	mov	r0, sp
    5818:	mov	r1, #0
    581c:	bl	5540 <nanosleep@plt>
    5820:	mov	sp, fp
    5824:	pop	{fp, pc}

00005828 <rb_strerror>:
    5828:	b	4ce8 <strerror@plt>

0000582c <rb_kill>:
    582c:	b	5534 <kill@plt>

00005830 <rb_setenv>:
    5830:	b	55f4 <setenv@plt>

00005834 <rb_waitpid>:
    5834:	b	51bc <waitpid@plt>

00005838 <rb_getpid>:
    5838:	b	53e4 <getpid@plt>

0000583c <rb_path_to_self>:
    583c:	push	{r4, sl, fp, lr}
    5840:	add	fp, sp, #8
    5844:	ldr	r0, [pc, #36]	; 5870 <rb_path_to_self+0x34>
    5848:	add	r0, pc, r0
    584c:	ldr	r4, [pc, #32]	; 5874 <rb_path_to_self+0x38>
    5850:	add	r4, pc, r4
    5854:	mov	r1, r4
    5858:	mov	r2, #4096	; 0x1000
    585c:	bl	542c <readlink@plt>
    5860:	mvn	r1, #0
    5864:	subs	r0, r0, r1
    5868:	movne	r0, r4
    586c:	pop	{r4, sl, fp, pc}
    5870:	.word	0x0000f618
    5874:	.word	0x00022c69

00005878 <rb_init_netio_win32>:
    5878:	push	{fp, lr}
    587c:	mov	fp, sp
    5880:	bl	560c <__errno_location@plt>
    5884:	mov	r1, #38	; 0x26
    5888:	str	r1, [r0]
    588c:	mvn	r0, #0
    5890:	pop	{fp, pc}

00005894 <rb_setselect_win32>:
    5894:	push	{fp, lr}
    5898:	mov	fp, sp
    589c:	bl	560c <__errno_location@plt>
    58a0:	mov	r1, #38	; 0x26
    58a4:	str	r1, [r0]
    58a8:	pop	{fp, pc}

000058ac <rb_select_win32>:
    58ac:	push	{fp, lr}
    58b0:	mov	fp, sp
    58b4:	bl	560c <__errno_location@plt>
    58b8:	mov	r1, #38	; 0x26
    58bc:	str	r1, [r0]
    58c0:	mvn	r0, #0
    58c4:	pop	{fp, pc}

000058c8 <rb_setup_fd_win32>:
    58c8:	push	{fp, lr}
    58cc:	mov	fp, sp
    58d0:	bl	560c <__errno_location@plt>
    58d4:	mov	r1, #38	; 0x26
    58d8:	str	r1, [r0]
    58dc:	mvn	r0, #0
    58e0:	pop	{fp, pc}

000058e4 <rb_crypt>:
    58e4:	push	{fp, lr}
    58e8:	mov	fp, sp
    58ec:	ldrb	r2, [r1]
    58f0:	cmp	r2, #36	; 0x24
    58f4:	bne	5944 <rb_crypt+0x60>
    58f8:	ldrb	r2, [r1, #2]
    58fc:	cmp	r2, #36	; 0x24
    5900:	beq	5910 <rb_crypt+0x2c>
    5904:	ldrb	r2, [r1, #3]
    5908:	cmp	r2, #36	; 0x24
    590c:	bne	5944 <rb_crypt+0x60>
    5910:	ldrb	r3, [r1, #1]
    5914:	cmp	r3, #54	; 0x36
    5918:	beq	5958 <rb_crypt+0x74>
    591c:	cmp	r3, #53	; 0x35
    5920:	beq	5960 <rb_crypt+0x7c>
    5924:	mov	r2, #0
    5928:	cmp	r3, #49	; 0x31
    592c:	bne	5950 <rb_crypt+0x6c>
    5930:	bl	5970 <rb_md5_crypt>
    5934:	ldr	r2, [pc, #44]	; 5968 <rb_crypt+0x84>
    5938:	add	r2, pc, r2
    593c:	mov	r0, r2
    5940:	pop	{fp, pc}
    5944:	bl	5f10 <rb_des_crypt>
    5948:	ldr	r2, [pc, #28]	; 596c <rb_crypt+0x88>
    594c:	add	r2, pc, r2
    5950:	mov	r0, r2
    5954:	pop	{fp, pc}
    5958:	pop	{fp, lr}
    595c:	b	5e74 <rb_sha512_crypt>
    5960:	pop	{fp, lr}
    5964:	b	5e18 <rb_sha256_crypt>
    5968:	.word	0x00034f58
    596c:	.word	0x00023b74

00005970 <rb_md5_crypt>:
    5970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5974:	add	fp, sp, #28
    5978:	sub	sp, sp, #204	; 0xcc
    597c:	mov	r5, r1
    5980:	mov	r4, r0
    5984:	ldr	r6, [pc, #1076]	; 5dc0 <rb_md5_crypt+0x450>
    5988:	add	r6, pc, r6
    598c:	str	r1, [r6]
    5990:	ldr	r1, [pc, #1068]	; 5dc4 <rb_md5_crypt+0x454>
    5994:	add	r1, pc, r1
    5998:	mov	r0, r5
    599c:	mov	r2, #3
    59a0:	bl	5528 <strncmp@plt>
    59a4:	cmp	r0, #0
    59a8:	addeq	r0, r5, #3
    59ac:	streq	r0, [r6]
    59b0:	ldr	r6, [pc, #1040]	; 5dc8 <rb_md5_crypt+0x458>
    59b4:	ldr	r6, [pc, r6]
    59b8:	ldr	r0, [pc, #1036]	; 5dcc <rb_md5_crypt+0x45c>
    59bc:	add	r0, pc, r0
    59c0:	str	r6, [r0]
    59c4:	add	r1, r6, #8
    59c8:	b	59dc <rb_md5_crypt+0x6c>
    59cc:	cmp	r2, r1
    59d0:	bcs	59f4 <rb_md5_crypt+0x84>
    59d4:	add	r2, r2, #1
    59d8:	str	r2, [r0]
    59dc:	ldr	r2, [pc, #1004]	; 5dd0 <rb_md5_crypt+0x460>
    59e0:	ldr	r2, [pc, r2]
    59e4:	ldrb	r3, [r2]
    59e8:	cmp	r3, #0
    59ec:	cmpne	r3, #36	; 0x24
    59f0:	bne	59cc <rb_md5_crypt+0x5c>
    59f4:	ldr	r7, [pc, #984]	; 5dd4 <rb_md5_crypt+0x464>
    59f8:	ldr	r7, [pc, r7]
    59fc:	add	r5, sp, #116	; 0x74
    5a00:	mov	r0, r5
    5a04:	bl	6c4c <MD5Init>
    5a08:	mov	r0, r4
    5a0c:	bl	50fc <strlen@plt>
    5a10:	mov	r2, r0
    5a14:	mov	r0, r5
    5a18:	mov	r1, r4
    5a1c:	bl	6c90 <MD5Update>
    5a20:	ldr	r1, [pc, #944]	; 5dd8 <rb_md5_crypt+0x468>
    5a24:	add	r1, pc, r1
    5a28:	mov	r0, r5
    5a2c:	mov	r2, #3
    5a30:	bl	6c90 <MD5Update>
    5a34:	sub	r7, r7, r6
    5a38:	ldr	r1, [pc, #924]	; 5ddc <rb_md5_crypt+0x46c>
    5a3c:	ldr	r1, [pc, r1]
    5a40:	mov	r0, r5
    5a44:	mov	r2, r7
    5a48:	bl	6c90 <MD5Update>
    5a4c:	add	r6, sp, #28
    5a50:	mov	r0, r6
    5a54:	bl	6c4c <MD5Init>
    5a58:	mov	r0, r4
    5a5c:	bl	50fc <strlen@plt>
    5a60:	mov	r2, r0
    5a64:	mov	r0, r6
    5a68:	mov	r1, r4
    5a6c:	bl	6c90 <MD5Update>
    5a70:	ldr	r1, [pc, #872]	; 5de0 <rb_md5_crypt+0x470>
    5a74:	ldr	r1, [pc, r1]
    5a78:	mov	r0, r6
    5a7c:	str	r7, [sp, #4]
    5a80:	mov	r2, r7
    5a84:	bl	6c90 <MD5Update>
    5a88:	mov	r0, r4
    5a8c:	bl	50fc <strlen@plt>
    5a90:	mov	r2, r0
    5a94:	mov	r0, r6
    5a98:	mov	r1, r4
    5a9c:	bl	6c90 <MD5Update>
    5aa0:	add	r8, sp, #8
    5aa4:	mov	r0, r8
    5aa8:	mov	r1, r6
    5aac:	bl	6d54 <MD5Final>
    5ab0:	mov	r0, r4
    5ab4:	bl	50fc <strlen@plt>
    5ab8:	cmp	r0, #1
    5abc:	blt	5af0 <rb_md5_crypt+0x180>
    5ac0:	mov	r5, r0
    5ac4:	add	r6, sp, #116	; 0x74
    5ac8:	add	r7, sp, #8
    5acc:	cmp	r5, #16
    5ad0:	mov	r2, r5
    5ad4:	movge	r2, #16
    5ad8:	mov	r0, r6
    5adc:	mov	r1, r7
    5ae0:	bl	6c90 <MD5Update>
    5ae4:	sub	r5, r5, #16
    5ae8:	cmp	r5, #0
    5aec:	bgt	5acc <rb_md5_crypt+0x15c>
    5af0:	vmov.i32	q8, #0	; 0x00000000
    5af4:	vst1.64	{d16-d17}, [r8]
    5af8:	mov	r0, r4
    5afc:	bl	50fc <strlen@plt>
    5b00:	cmp	r0, #0
    5b04:	beq	5b40 <rb_md5_crypt+0x1d0>
    5b08:	mov	r6, r0
    5b0c:	add	r7, sp, #116	; 0x74
    5b10:	mov	r5, #0
    5b14:	add	r8, sp, #8
    5b18:	mov	r0, r7
    5b1c:	tst	r6, #1
    5b20:	moveq	r1, r4
    5b24:	movne	r1, r8
    5b28:	mov	r2, #1
    5b2c:	bl	6c90 <MD5Update>
    5b30:	lsr	r0, r6, #1
    5b34:	cmp	r5, r6, lsr #1
    5b38:	mov	r6, r0
    5b3c:	bne	5b18 <rb_md5_crypt+0x1a8>
    5b40:	ldr	r5, [pc, #668]	; 5de4 <rb_md5_crypt+0x474>
    5b44:	add	r5, pc, r5
    5b48:	ldr	r1, [pc, #664]	; 5de8 <rb_md5_crypt+0x478>
    5b4c:	add	r1, pc, r1
    5b50:	mov	r0, r5
    5b54:	mov	r2, #120	; 0x78
    5b58:	bl	4fd0 <rb_strlcpy@plt>
    5b5c:	ldr	r1, [pc, #648]	; 5dec <rb_md5_crypt+0x47c>
    5b60:	ldr	r1, [pc, r1]
    5b64:	mov	r0, r5
    5b68:	ldr	r2, [sp, #4]
    5b6c:	bl	51e0 <strncat@plt>
    5b70:	ldr	r1, [pc, #632]	; 5df0 <rb_md5_crypt+0x480>
    5b74:	add	r1, pc, r1
    5b78:	mov	r2, #120	; 0x78
    5b7c:	bl	54a4 <rb_strlcat@plt>
    5b80:	add	r7, sp, #8
    5b84:	add	r1, sp, #116	; 0x74
    5b88:	mov	r0, r7
    5b8c:	bl	6d54 <MD5Final>
    5b90:	mov	r5, #0
    5b94:	add	r6, sp, #28
    5b98:	movw	sl, #18725	; 0x4925
    5b9c:	movt	sl, #9362	; 0x2492
    5ba0:	b	5bd4 <rb_md5_crypt+0x264>
    5ba4:	mov	r0, r4
    5ba8:	bl	50fc <strlen@plt>
    5bac:	mov	r2, r0
    5bb0:	mov	r0, r6
    5bb4:	mov	r1, r4
    5bb8:	bl	6c90 <MD5Update>
    5bbc:	mov	r0, r7
    5bc0:	mov	r1, r6
    5bc4:	bl	6d54 <MD5Final>
    5bc8:	add	r5, r5, #1
    5bcc:	cmp	r5, #1000	; 0x3e8
    5bd0:	beq	5c84 <rb_md5_crypt+0x314>
    5bd4:	mov	r0, r6
    5bd8:	bl	6c4c <MD5Init>
    5bdc:	ands	r8, r5, #1
    5be0:	beq	5bfc <rb_md5_crypt+0x28c>
    5be4:	mov	r0, r4
    5be8:	bl	50fc <strlen@plt>
    5bec:	mov	r2, r0
    5bf0:	mov	r0, r6
    5bf4:	mov	r1, r4
    5bf8:	b	5c08 <rb_md5_crypt+0x298>
    5bfc:	mov	r0, r6
    5c00:	mov	r1, r7
    5c04:	mov	r2, #16
    5c08:	bl	6c90 <MD5Update>
    5c0c:	uxth	r9, r5
    5c10:	movw	r0, #43691	; 0xaaab
    5c14:	movt	r0, #43690	; 0xaaaa
    5c18:	mul	r0, r9, r0
    5c1c:	movw	r1, #21846	; 0x5556
    5c20:	movt	r1, #21845	; 0x5555
    5c24:	cmp	r0, r1
    5c28:	bcc	5c40 <rb_md5_crypt+0x2d0>
    5c2c:	ldr	r1, [pc, #448]	; 5df4 <rb_md5_crypt+0x484>
    5c30:	ldr	r1, [pc, r1]
    5c34:	mov	r0, r6
    5c38:	ldr	r2, [sp, #4]
    5c3c:	bl	6c90 <MD5Update>
    5c40:	movw	r0, #28087	; 0x6db7
    5c44:	movt	r0, #46811	; 0xb6db
    5c48:	mul	r0, r9, r0
    5c4c:	cmp	r0, sl
    5c50:	bcc	5c6c <rb_md5_crypt+0x2fc>
    5c54:	mov	r0, r4
    5c58:	bl	50fc <strlen@plt>
    5c5c:	mov	r2, r0
    5c60:	mov	r0, r6
    5c64:	mov	r1, r4
    5c68:	bl	6c90 <MD5Update>
    5c6c:	cmp	r8, #0
    5c70:	beq	5ba4 <rb_md5_crypt+0x234>
    5c74:	mov	r0, r6
    5c78:	mov	r1, r7
    5c7c:	mov	r2, #16
    5c80:	b	5bb8 <rb_md5_crypt+0x248>
    5c84:	ldr	r4, [pc, #364]	; 5df8 <rb_md5_crypt+0x488>
    5c88:	add	r4, pc, r4
    5c8c:	mov	r0, r4
    5c90:	bl	50fc <strlen@plt>
    5c94:	add	r0, r4, r0
    5c98:	ldr	r4, [pc, #348]	; 5dfc <rb_md5_crypt+0x48c>
    5c9c:	add	r4, pc, r4
    5ca0:	str	r0, [r4]
    5ca4:	ldrb	r1, [sp, #8]
    5ca8:	ldrb	r2, [sp, #14]
    5cac:	ldrb	r3, [sp, #20]
    5cb0:	lsl	r2, r2, #8
    5cb4:	orr	r1, r2, r1, lsl #16
    5cb8:	orr	r1, r1, r3
    5cbc:	mov	r2, #4
    5cc0:	bl	6db8 <_crypt_to64>
    5cc4:	ldr	r0, [pc, #308]	; 5e00 <rb_md5_crypt+0x490>
    5cc8:	ldr	r0, [pc, r0]
    5ccc:	add	r0, r0, #4
    5cd0:	str	r0, [r4]
    5cd4:	ldrb	r1, [sp, #9]
    5cd8:	ldrb	r2, [sp, #15]
    5cdc:	ldrb	r3, [sp, #21]
    5ce0:	lsl	r2, r2, #8
    5ce4:	orr	r1, r2, r1, lsl #16
    5ce8:	orr	r1, r1, r3
    5cec:	mov	r2, #4
    5cf0:	bl	6db8 <_crypt_to64>
    5cf4:	ldr	r0, [pc, #264]	; 5e04 <rb_md5_crypt+0x494>
    5cf8:	ldr	r0, [pc, r0]
    5cfc:	add	r0, r0, #4
    5d00:	str	r0, [r4]
    5d04:	ldrb	r1, [sp, #10]
    5d08:	ldrb	r2, [sp, #16]
    5d0c:	ldrb	r3, [sp, #22]
    5d10:	lsl	r2, r2, #8
    5d14:	orr	r1, r2, r1, lsl #16
    5d18:	orr	r1, r1, r3
    5d1c:	mov	r2, #4
    5d20:	bl	6db8 <_crypt_to64>
    5d24:	ldr	r0, [pc, #220]	; 5e08 <rb_md5_crypt+0x498>
    5d28:	ldr	r0, [pc, r0]
    5d2c:	add	r0, r0, #4
    5d30:	str	r0, [r4]
    5d34:	ldrb	r1, [sp, #11]
    5d38:	ldrb	r2, [sp, #17]
    5d3c:	ldrb	r3, [sp, #23]
    5d40:	lsl	r2, r2, #8
    5d44:	orr	r1, r2, r1, lsl #16
    5d48:	orr	r1, r1, r3
    5d4c:	mov	r2, #4
    5d50:	bl	6db8 <_crypt_to64>
    5d54:	ldr	r0, [pc, #176]	; 5e0c <rb_md5_crypt+0x49c>
    5d58:	ldr	r0, [pc, r0]
    5d5c:	add	r0, r0, #4
    5d60:	str	r0, [r4]
    5d64:	ldrb	r1, [sp, #12]
    5d68:	ldrb	r2, [sp, #13]
    5d6c:	ldrb	r3, [sp, #18]
    5d70:	lsl	r3, r3, #8
    5d74:	orr	r1, r3, r1, lsl #16
    5d78:	orr	r1, r1, r2
    5d7c:	mov	r2, #4
    5d80:	bl	6db8 <_crypt_to64>
    5d84:	ldr	r0, [pc, #132]	; 5e10 <rb_md5_crypt+0x4a0>
    5d88:	ldr	r0, [pc, r0]
    5d8c:	add	r0, r0, #4
    5d90:	str	r0, [r4]
    5d94:	ldrb	r1, [sp, #19]
    5d98:	mov	r2, #2
    5d9c:	bl	6db8 <_crypt_to64>
    5da0:	ldr	r0, [pc, #108]	; 5e14 <rb_md5_crypt+0x4a4>
    5da4:	ldr	r0, [pc, r0]
    5da8:	add	r1, r0, #2
    5dac:	str	r1, [r4]
    5db0:	mov	r1, #0
    5db4:	strb	r1, [r0, #2]
    5db8:	sub	sp, fp, #28
    5dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5dc0:	.word	0x00034f00
    5dc4:	.word	0x0000f51c
    5dc8:	.word	0x00034ed4
    5dcc:	.word	0x00034ed0
    5dd0:	.word	0x00034eac
    5dd4:	.word	0x00034e94
    5dd8:	.word	0x0000f48c
    5ddc:	.word	0x00034e4c
    5de0:	.word	0x00034e14
    5de4:	.word	0x00034d4c
    5de8:	.word	0x0000f364
    5dec:	.word	0x00034d28
    5df0:	.word	0x0000f33e
    5df4:	.word	0x00034c58
    5df8:	.word	0x00034c08
    5dfc:	.word	0x00034c6c
    5e00:	.word	0x00034c40
    5e04:	.word	0x00034c10
    5e08:	.word	0x00034be0
    5e0c:	.word	0x00034bb0
    5e10:	.word	0x00034b80
    5e14:	.word	0x00034b64

00005e18 <rb_sha256_crypt>:
    5e18:	push	{r4, r5, r6, sl, fp, lr}
    5e1c:	add	fp, sp, #16
    5e20:	mov	r4, r1
    5e24:	mov	r5, r0
    5e28:	mov	r0, r1
    5e2c:	bl	50fc <strlen@plt>
    5e30:	add	r6, r0, #66	; 0x42
    5e34:	mov	r0, r6
    5e38:	bl	52c4 <malloc@plt>
    5e3c:	cmp	r0, #0
    5e40:	beq	5e68 <rb_sha256_crypt+0x50>
    5e44:	mov	r2, r0
    5e48:	ldr	r0, [pc, #32]	; 5e70 <rb_sha256_crypt+0x58>
    5e4c:	add	r0, pc, r0
    5e50:	str	r2, [r0]
    5e54:	mov	r0, r5
    5e58:	mov	r1, r4
    5e5c:	mov	r3, r6
    5e60:	pop	{r4, r5, r6, sl, fp, lr}
    5e64:	b	7874 <rb_sha256_crypt_r>
    5e68:	mov	r0, #0
    5e6c:	pop	{r4, r5, r6, sl, fp, pc}
    5e70:	.word	0x00034ac0

00005e74 <rb_sha512_crypt>:
    5e74:	push	{r4, r5, r6, sl, fp, lr}
    5e78:	add	fp, sp, #16
    5e7c:	mov	r4, r1
    5e80:	mov	r5, r0
    5e84:	mov	r0, r1
    5e88:	bl	50fc <strlen@plt>
    5e8c:	add	r6, r0, #109	; 0x6d
    5e90:	ldr	r0, [pc, #96]	; 5ef8 <rb_sha512_crypt+0x84>
    5e94:	ldr	r0, [pc, r0]
    5e98:	cmp	r0, r6
    5e9c:	bge	5ed0 <rb_sha512_crypt+0x5c>
    5ea0:	ldr	r0, [pc, #84]	; 5efc <rb_sha512_crypt+0x88>
    5ea4:	ldr	r0, [pc, r0]
    5ea8:	mov	r1, r6
    5eac:	bl	5558 <realloc@plt>
    5eb0:	cmp	r0, #0
    5eb4:	beq	5ef0 <rb_sha512_crypt+0x7c>
    5eb8:	ldr	r1, [pc, #64]	; 5f00 <rb_sha512_crypt+0x8c>
    5ebc:	add	r1, pc, r1
    5ec0:	str	r6, [r1]
    5ec4:	ldr	r1, [pc, #56]	; 5f04 <rb_sha512_crypt+0x90>
    5ec8:	add	r1, pc, r1
    5ecc:	str	r0, [r1]
    5ed0:	ldr	r3, [pc, #48]	; 5f08 <rb_sha512_crypt+0x94>
    5ed4:	ldr	r3, [pc, r3]
    5ed8:	ldr	r2, [pc, #44]	; 5f0c <rb_sha512_crypt+0x98>
    5edc:	ldr	r2, [pc, r2]
    5ee0:	mov	r0, r5
    5ee4:	mov	r1, r4
    5ee8:	pop	{r4, r5, r6, sl, fp, lr}
    5eec:	b	8868 <rb_sha512_crypt_r>
    5ef0:	mov	r0, #0
    5ef4:	pop	{r4, r5, r6, sl, fp, pc}
    5ef8:	.word	0x00034a80
    5efc:	.word	0x00034a6c
    5f00:	.word	0x00034a58
    5f04:	.word	0x00034a48
    5f08:	.word	0x00034a40
    5f0c:	.word	0x00034a34

00005f10 <rb_des_crypt>:
    5f10:	push	{r4, r5, r6, r7, fp, lr}
    5f14:	add	fp, sp, #16
    5f18:	sub	sp, sp, #16
    5f1c:	mov	r4, r1
    5f20:	mov	r5, r0
    5f24:	bl	605c <rb_des_init>
    5f28:	mov	r0, sp
    5f2c:	orr	r1, r0, #1
    5f30:	mov	r2, #255	; 0xff
    5f34:	mov	r3, r5
    5f38:	ldrb	r7, [r3], #1
    5f3c:	lsl	r6, r7, #1
    5f40:	strb	r6, [r1, #-1]
    5f44:	tst	r2, r7, lsl #1
    5f48:	movne	r5, r3
    5f4c:	sub	r3, r1, r0
    5f50:	add	r1, r1, #1
    5f54:	cmp	r3, #8
    5f58:	bne	5f34 <rb_des_crypt+0x24>
    5f5c:	mov	r0, sp
    5f60:	bl	6594 <rb_des_setkey>
    5f64:	ldrb	r5, [r4, #1]
    5f68:	mov	r0, r5
    5f6c:	bl	6858 <rb_ascii_to_bin>
    5f70:	mov	r6, r0
    5f74:	ldrb	r4, [r4]
    5f78:	cmp	r5, #0
    5f7c:	moveq	r5, r4
    5f80:	mov	r0, r4
    5f84:	bl	6858 <rb_ascii_to_bin>
    5f88:	ldr	r7, [pc, #196]	; 6054 <rb_des_crypt+0x144>
    5f8c:	add	r7, pc, r7
    5f90:	strb	r5, [r7, #1]
    5f94:	strb	r4, [r7]
    5f98:	orr	r0, r0, r6, lsl #6
    5f9c:	bl	689c <rb_setup_salt>
    5fa0:	add	r0, sp, #12
    5fa4:	add	r1, sp, #8
    5fa8:	bl	6924 <rb_do_des>
    5fac:	mov	r0, #0
    5fb0:	strb	r0, [r7, #13]
    5fb4:	ldr	r1, [sp, #12]
    5fb8:	ldr	r0, [pc, #152]	; 6058 <rb_des_crypt+0x148>
    5fbc:	add	r0, pc, r0
    5fc0:	ldrb	r2, [r0, r1, lsr #26]
    5fc4:	strb	r2, [r7, #2]
    5fc8:	ubfx	r2, r1, #8, #6
    5fcc:	ldrb	r2, [r0, r2]
    5fd0:	strb	r2, [r7, #5]
    5fd4:	ubfx	r2, r1, #14, #6
    5fd8:	ldrb	r2, [r0, r2]
    5fdc:	strb	r2, [r7, #4]
    5fe0:	ubfx	r2, r1, #20, #6
    5fe4:	ldrb	r2, [r0, r2]
    5fe8:	strb	r2, [r7, #3]
    5fec:	ldr	r2, [sp, #8]
    5ff0:	and	r3, r2, #15
    5ff4:	ldrb	r3, [r0, r3, lsl #2]
    5ff8:	strb	r3, [r7, #12]
    5ffc:	ubfx	r3, r2, #4, #6
    6000:	ldrb	r3, [r0, r3]
    6004:	strb	r3, [r7, #11]
    6008:	ubfx	r3, r2, #10, #6
    600c:	ldrb	r3, [r0, r3]
    6010:	strb	r3, [r7, #10]
    6014:	ubfx	r3, r2, #16, #6
    6018:	ldrb	r3, [r0, r3]
    601c:	strb	r3, [r7, #9]
    6020:	ubfx	r3, r2, #22, #6
    6024:	ldrb	r3, [r0, r3]
    6028:	strb	r3, [r7, #8]
    602c:	ubfx	r3, r1, #2, #6
    6030:	ldrb	r3, [r0, r3]
    6034:	strb	r3, [r7, #6]
    6038:	lsr	r2, r2, #16
    603c:	orr	r1, r2, r1, lsl #16
    6040:	ubfx	r1, r1, #12, #6
    6044:	ldrb	r0, [r0, r1]
    6048:	strb	r0, [r7, #7]
    604c:	sub	sp, fp, #16
    6050:	pop	{r4, r5, r6, r7, fp, pc}
    6054:	.word	0x00023534
    6058:	.word	0x0000eeb3

0000605c <rb_des_init>:
    605c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6060:	add	fp, sp, #28
    6064:	sub	sp, sp, #12
    6068:	ldr	r0, [pc, #1196]	; 651c <rb_des_init+0x4c0>
    606c:	add	r0, pc, r0
    6070:	ldrb	r0, [r0]
    6074:	cmp	r0, #0
    6078:	bne	6514 <rb_des_init+0x4b8>
    607c:	ldr	r1, [pc, #1180]	; 6520 <rb_des_init+0x4c4>
    6080:	add	r1, pc, r1
    6084:	mov	r0, #0
    6088:	str	r0, [r1]
    608c:	ldr	r1, [pc, #1168]	; 6524 <rb_des_init+0x4c8>
    6090:	add	r1, pc, r1
    6094:	str	r0, [r1]
    6098:	ldr	r1, [pc, #1160]	; 6528 <rb_des_init+0x4cc>
    609c:	add	r1, pc, r1
    60a0:	str	r0, [r1]
    60a4:	ldr	r1, [pc, #1152]	; 652c <rb_des_init+0x4d0>
    60a8:	add	r1, pc, r1
    60ac:	str	r0, [r1]
    60b0:	ldr	r1, [pc, #1144]	; 6530 <rb_des_init+0x4d4>
    60b4:	add	r1, pc, r1
    60b8:	ldr	r2, [pc, #1140]	; 6534 <rb_des_init+0x4d8>
    60bc:	add	r2, pc, r2
    60c0:	mov	r3, #0
    60c4:	mov	r7, #0
    60c8:	add	r6, r2, r0, lsl #6
    60cc:	and	r5, r7, #32
    60d0:	and	r4, r3, #16
    60d4:	orr	r5, r4, r5
    60d8:	ubfx	r4, r7, #1, #4
    60dc:	orr	r5, r5, r4
    60e0:	ldrb	r6, [r6, r5]
    60e4:	strb	r6, [r1, r7]
    60e8:	add	r3, r3, #16
    60ec:	add	r7, r7, #1
    60f0:	cmp	r7, #64	; 0x40
    60f4:	bne	60c8 <rb_des_init+0x6c>
    60f8:	add	r1, r1, #64	; 0x40
    60fc:	add	r0, r0, #1
    6100:	cmp	r0, #8
    6104:	bne	60c0 <rb_des_init+0x64>
    6108:	ldr	ip, [pc, #1064]	; 6538 <rb_des_init+0x4dc>
    610c:	add	ip, pc, ip
    6110:	add	r1, ip, #64	; 0x40
    6114:	mov	r2, #0
    6118:	ldr	r9, [pc, #1052]	; 653c <rb_des_init+0x4e0>
    611c:	add	r9, pc, r9
    6120:	lsl	lr, r2, #1
    6124:	mov	r8, #0
    6128:	add	r0, ip, lr, lsl #6
    612c:	ldrb	r0, [r0, r8]
    6130:	lsl	r5, r0, #4
    6134:	lsl	r4, r8, #6
    6138:	mov	r0, #0
    613c:	orr	r7, r0, r4
    6140:	add	r6, r9, r2, lsl #12
    6144:	ldrb	r3, [r1, r0]
    6148:	orr	r3, r5, r3
    614c:	strb	r3, [r6, r7]
    6150:	add	r0, r0, #1
    6154:	cmp	r0, #64	; 0x40
    6158:	bne	613c <rb_des_init+0xe0>
    615c:	add	r8, r8, #1
    6160:	cmp	r8, #64	; 0x40
    6164:	bne	6128 <rb_des_init+0xcc>
    6168:	add	r1, r1, #128	; 0x80
    616c:	add	r2, r2, #1
    6170:	cmp	r2, #4
    6174:	bne	6120 <rb_des_init+0xc4>
    6178:	ldr	r7, [pc, #960]	; 6540 <rb_des_init+0x4e4>
    617c:	add	r7, pc, r7
    6180:	mov	r0, r7
    6184:	mov	r1, #255	; 0xff
    6188:	mov	r2, #64	; 0x40
    618c:	bl	4f58 <memset@plt>
    6190:	mov	r0, #0
    6194:	ldr	r1, [pc, #936]	; 6544 <rb_des_init+0x4e8>
    6198:	add	r1, pc, r1
    619c:	ldr	r5, [pc, #932]	; 6548 <rb_des_init+0x4ec>
    61a0:	add	r5, pc, r5
    61a4:	ldr	r8, [pc, #928]	; 654c <rb_des_init+0x4f0>
    61a8:	add	r8, pc, r8
    61ac:	ldrb	r2, [r1, r0]
    61b0:	sub	r2, r2, #1
    61b4:	strb	r2, [r5, r0]
    61b8:	uxtb	r2, r2
    61bc:	strb	r0, [r8, r2]
    61c0:	add	r0, r0, #1
    61c4:	cmp	r0, #64	; 0x40
    61c8:	bne	61ac <rb_des_init+0x150>
    61cc:	ldr	r9, [pc, #892]	; 6550 <rb_des_init+0x4f4>
    61d0:	add	r9, pc, r9
    61d4:	mov	r0, r9
    61d8:	mov	r1, #255	; 0xff
    61dc:	mov	r2, #56	; 0x38
    61e0:	bl	4f58 <memset@plt>
    61e4:	mov	r0, #0
    61e8:	ldr	r1, [pc, #868]	; 6554 <rb_des_init+0x4f8>
    61ec:	add	r1, pc, r1
    61f0:	ldrb	r2, [r1, r0]
    61f4:	add	r2, r2, r7
    61f8:	strb	r0, [r2, #-1]
    61fc:	add	r0, r0, #1
    6200:	cmp	r0, #56	; 0x38
    6204:	bne	61f0 <rb_des_init+0x194>
    6208:	mov	r0, #0
    620c:	ldr	r1, [pc, #836]	; 6558 <rb_des_init+0x4fc>
    6210:	add	r1, pc, r1
    6214:	ldrb	r2, [r1, r0]
    6218:	add	r2, r2, r9
    621c:	strb	r0, [r2, #-1]
    6220:	add	r0, r0, #1
    6224:	cmp	r0, #48	; 0x30
    6228:	bne	6214 <rb_des_init+0x1b8>
    622c:	mov	r0, #0
    6230:	str	r0, [sp, #4]
    6234:	ldr	ip, [pc, #800]	; 655c <rb_des_init+0x500>
    6238:	add	ip, pc, ip
    623c:	ldr	lr, [pc, #796]	; 6560 <rb_des_init+0x504>
    6240:	add	lr, pc, lr
    6244:	b	6270 <rb_des_init+0x214>
    6248:	add	r9, r9, #7
    624c:	add	r7, r7, #8
    6250:	add	r8, r8, #8
    6254:	ldr	r5, [sp, #8]
    6258:	add	r5, r5, #8
    625c:	ldr	r0, [sp, #4]
    6260:	add	r0, r0, #1
    6264:	str	r0, [sp, #4]
    6268:	cmp	r0, #8
    626c:	beq	6464 <rb_des_init+0x408>
    6270:	str	r5, [sp, #8]
    6274:	str	r7, [sp]
    6278:	mov	r3, #0
    627c:	b	628c <rb_des_init+0x230>
    6280:	add	r3, r3, #1
    6284:	cmp	r3, #256	; 0x100
    6288:	beq	6340 <rb_des_init+0x2e4>
    628c:	ldr	r0, [sp, #4]
    6290:	ldr	r1, [pc, #716]	; 6564 <rb_des_init+0x508>
    6294:	add	r1, pc, r1
    6298:	add	sl, r1, r0, lsl #10
    629c:	mov	r4, #0
    62a0:	str	r4, [sl, r3, lsl #2]!
    62a4:	ldr	r1, [pc, #700]	; 6568 <rb_des_init+0x50c>
    62a8:	add	r1, pc, r1
    62ac:	add	r7, r1, r0, lsl #10
    62b0:	str	r4, [r7, r3, lsl #2]!
    62b4:	ldr	r1, [pc, #688]	; 656c <rb_des_init+0x510>
    62b8:	add	r1, pc, r1
    62bc:	add	r6, r1, r0, lsl #10
    62c0:	str	r4, [r6, r3, lsl #2]!
    62c4:	ldr	r1, [pc, #676]	; 6570 <rb_des_init+0x514>
    62c8:	add	r1, pc, r1
    62cc:	add	r5, r1, r0, lsl #10
    62d0:	str	r4, [r5, r3, lsl #2]!
    62d4:	b	62e4 <rb_des_init+0x288>
    62d8:	add	r4, r4, #1
    62dc:	cmp	r4, #8
    62e0:	beq	6280 <rb_des_init+0x224>
    62e4:	ldrb	r1, [ip, r4]
    62e8:	tst	r3, r1
    62ec:	beq	62d8 <rb_des_init+0x27c>
    62f0:	ldrb	r1, [r8, r4]
    62f4:	subs	r0, r1, #32
    62f8:	movcc	r0, r1
    62fc:	ldr	r0, [lr, r0, lsl #2]
    6300:	mov	r1, r7
    6304:	movcc	r1, sl
    6308:	ldr	r2, [r1]
    630c:	orr	r0, r2, r0
    6310:	str	r0, [r1]
    6314:	ldr	r0, [sp, #8]
    6318:	ldrb	r0, [r0, r4]
    631c:	subs	r1, r0, #32
    6320:	movcc	r1, r0
    6324:	ldr	r0, [lr, r1, lsl #2]
    6328:	mov	r1, r5
    632c:	movcc	r1, r6
    6330:	ldr	r2, [r1]
    6334:	orr	r0, r2, r0
    6338:	str	r0, [r1]
    633c:	b	62d8 <rb_des_init+0x27c>
    6340:	mov	r2, #0
    6344:	mov	sl, #0
    6348:	ldr	r7, [sp]
    634c:	b	635c <rb_des_init+0x300>
    6350:	add	sl, sl, #1
    6354:	cmp	sl, #128	; 0x80
    6358:	beq	6248 <rb_des_init+0x1ec>
    635c:	ldr	r0, [sp, #4]
    6360:	ldr	r1, [pc, #524]	; 6574 <rb_des_init+0x518>
    6364:	add	r1, pc, r1
    6368:	add	r3, r1, r0, lsl #9
    636c:	str	r2, [r3, sl, lsl #2]!
    6370:	ldr	r1, [pc, #512]	; 6578 <rb_des_init+0x51c>
    6374:	add	r1, pc, r1
    6378:	add	r4, r1, r0, lsl #9
    637c:	str	r2, [r4, sl, lsl #2]!
    6380:	mov	r5, #0
    6384:	b	63a4 <rb_des_init+0x348>
    6388:	ldr	r0, [r0, #-96]	; 0xffffffa0
    638c:	ldr	r1, [r4]
    6390:	orr	r0, r1, r0
    6394:	str	r0, [r4]
    6398:	sub	r5, r5, #1
    639c:	cmn	r5, #7
    63a0:	beq	63e0 <rb_des_init+0x384>
    63a4:	sub	r0, ip, r5
    63a8:	ldrb	r0, [r0, #1]
    63ac:	tst	sl, r0
    63b0:	beq	6398 <rb_des_init+0x33c>
    63b4:	ldrb	r6, [r7, -r5]
    63b8:	cmp	r6, #255	; 0xff
    63bc:	beq	6398 <rb_des_init+0x33c>
    63c0:	add	r0, lr, r6, lsl #2
    63c4:	cmp	r6, #27
    63c8:	bhi	6388 <rb_des_init+0x32c>
    63cc:	ldr	r0, [r0, #16]
    63d0:	ldr	r1, [r3]
    63d4:	orr	r0, r1, r0
    63d8:	str	r0, [r3]
    63dc:	b	6398 <rb_des_init+0x33c>
    63e0:	ldr	r0, [sp, #4]
    63e4:	ldr	r1, [pc, #400]	; 657c <rb_des_init+0x520>
    63e8:	add	r1, pc, r1
    63ec:	add	r3, r1, r0, lsl #9
    63f0:	mov	r4, #0
    63f4:	str	r4, [r3, sl, lsl #2]!
    63f8:	ldr	r1, [pc, #384]	; 6580 <rb_des_init+0x524>
    63fc:	add	r1, pc, r1
    6400:	add	r6, r1, r0, lsl #9
    6404:	str	r4, [r6, sl, lsl #2]!
    6408:	b	6428 <rb_des_init+0x3cc>
    640c:	ldr	r0, [r0, #-64]	; 0xffffffc0
    6410:	ldr	r1, [r6]
    6414:	orr	r0, r1, r0
    6418:	str	r0, [r6]
    641c:	sub	r4, r4, #1
    6420:	cmn	r4, #7
    6424:	beq	6350 <rb_des_init+0x2f4>
    6428:	sub	r0, ip, r4
    642c:	ldrb	r0, [r0, #1]
    6430:	tst	sl, r0
    6434:	beq	641c <rb_des_init+0x3c0>
    6438:	ldrb	r5, [r9, -r4]
    643c:	cmp	r5, #255	; 0xff
    6440:	beq	641c <rb_des_init+0x3c0>
    6444:	add	r0, lr, r5, lsl #2
    6448:	cmp	r5, #23
    644c:	bhi	640c <rb_des_init+0x3b0>
    6450:	ldr	r0, [r0, #32]
    6454:	ldr	r1, [r3]
    6458:	orr	r0, r1, r0
    645c:	str	r0, [r3]
    6460:	b	641c <rb_des_init+0x3c0>
    6464:	mov	r3, #0
    6468:	ldr	r7, [pc, #276]	; 6584 <rb_des_init+0x528>
    646c:	add	r7, pc, r7
    6470:	ldr	r2, [pc, #272]	; 6588 <rb_des_init+0x52c>
    6474:	add	r2, pc, r2
    6478:	ldrb	r0, [r7, r3]
    647c:	add	r0, r0, r2
    6480:	strb	r3, [r0, #-1]
    6484:	add	r3, r3, #1
    6488:	cmp	r3, #32
    648c:	bne	6478 <rb_des_init+0x41c>
    6490:	mov	r3, #0
    6494:	ldr	r7, [pc, #240]	; 658c <rb_des_init+0x530>
    6498:	add	r7, pc, r7
    649c:	b	64b0 <rb_des_init+0x454>
    64a0:	add	r2, r2, #8
    64a4:	add	r3, r3, #1
    64a8:	cmp	r3, #4
    64ac:	beq	6504 <rb_des_init+0x4a8>
    64b0:	mov	r6, #0
    64b4:	b	64c4 <rb_des_init+0x468>
    64b8:	add	r6, r6, #1
    64bc:	cmp	r6, #256	; 0x100
    64c0:	beq	64a0 <rb_des_init+0x444>
    64c4:	add	r5, r7, r3, lsl #10
    64c8:	mov	r4, #0
    64cc:	str	r4, [r5, r6, lsl #2]!
    64d0:	b	64e0 <rb_des_init+0x484>
    64d4:	add	r4, r4, #1
    64d8:	cmp	r4, #8
    64dc:	beq	64b8 <rb_des_init+0x45c>
    64e0:	ldrb	r0, [ip, r4]
    64e4:	tst	r6, r0
    64e8:	beq	64d4 <rb_des_init+0x478>
    64ec:	ldrb	r0, [r2, r4]
    64f0:	ldr	r0, [lr, r0, lsl #2]
    64f4:	ldr	r1, [r5]
    64f8:	orr	r0, r1, r0
    64fc:	str	r0, [r5]
    6500:	b	64d4 <rb_des_init+0x478>
    6504:	mov	r0, #1
    6508:	ldr	r1, [pc, #128]	; 6590 <rb_des_init+0x534>
    650c:	add	r1, pc, r1
    6510:	strb	r0, [r1]
    6514:	sub	sp, fp, #28
    6518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    651c:	.word	0x0002346c
    6520:	.word	0x00023460
    6524:	.word	0x0002344c
    6528:	.word	0x00023448
    652c:	.word	0x00023440
    6530:	.word	0x00023438
    6534:	.word	0x0000ee84
    6538:	.word	0x000233e0
    653c:	.word	0x000235d0
    6540:	.word	0x000275f4
    6544:	.word	0x0000efa8
    6548:	.word	0x0002758c
    654c:	.word	0x00027544
    6550:	.word	0x000275e0
    6554:	.word	0x0000ef94
    6558:	.word	0x0000efa8
    655c:	.word	0x0000f410
    6560:	.word	0x0000ec80
    6564:	.word	0x00027554
    6568:	.word	0x00029540
    656c:	.word	0x0002b530
    6570:	.word	0x0002d520
    6574:	.word	0x0002f484
    6578:	.word	0x00030474
    657c:	.word	0x00031400
    6580:	.word	0x000323ec
    6584:	.word	0x0000f1e4
    6588:	.word	0x00033374
    658c:	.word	0x00033370
    6590:	.word	0x00022fcc

00006594 <rb_des_setkey>:
    6594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6598:	add	fp, sp, #28
    659c:	sub	sp, sp, #12
    65a0:	mov	r5, r0
    65a4:	bl	605c <rb_des_init>
    65a8:	ldr	r0, [r5]
    65ac:	bl	6c44 <__bswap_32>
    65b0:	mov	r4, r0
    65b4:	ldr	r0, [r5, #4]
    65b8:	bl	6c44 <__bswap_32>
    65bc:	orrs	r1, r0, r4
    65c0:	beq	65e0 <rb_des_setkey+0x4c>
    65c4:	ldr	r1, [pc, #608]	; 682c <rb_des_setkey+0x298>
    65c8:	ldr	r1, [pc, r1]
    65cc:	cmp	r4, r1
    65d0:	ldreq	r1, [pc, #600]	; 6830 <rb_des_setkey+0x29c>
    65d4:	ldreq	r1, [pc, r1]
    65d8:	cmpeq	r0, r1
    65dc:	beq	6824 <rb_des_setkey+0x290>
    65e0:	ldr	r1, [pc, #588]	; 6834 <rb_des_setkey+0x2a0>
    65e4:	add	r1, pc, r1
    65e8:	str	r0, [r1]
    65ec:	ldr	r1, [pc, #580]	; 6838 <rb_des_setkey+0x2a4>
    65f0:	add	r1, pc, r1
    65f4:	str	r4, [r1]
    65f8:	lsr	ip, r4, #25
    65fc:	ldr	r2, [pc, #568]	; 683c <rb_des_setkey+0x2a8>
    6600:	add	r2, pc, r2
    6604:	ldr	r3, [r2, ip, lsl #2]
    6608:	ubfx	lr, r4, #17, #7
    660c:	add	r6, r2, lr, lsl #2
    6610:	ldr	r6, [r6, #512]	; 0x200
    6614:	orr	r3, r6, r3
    6618:	ubfx	r8, r4, #9, #7
    661c:	add	r5, r2, r8, lsl #2
    6620:	ldr	r5, [r5, #1024]	; 0x400
    6624:	orr	r3, r3, r5
    6628:	and	r9, r4, #254	; 0xfe
    662c:	add	r4, r2, r9, lsl #1
    6630:	ldr	r4, [r4, #1536]	; 0x600
    6634:	orr	r3, r3, r4
    6638:	lsr	r4, r0, #25
    663c:	add	r1, r2, r4, lsl #2
    6640:	ldr	r1, [r1, #2048]	; 0x800
    6644:	orr	r1, r3, r1
    6648:	ubfx	r3, r0, #17, #7
    664c:	add	r7, r2, r3, lsl #2
    6650:	ldr	r7, [r7, #2560]	; 0xa00
    6654:	orr	r1, r1, r7
    6658:	ubfx	r7, r0, #9, #7
    665c:	add	r6, r2, r7, lsl #2
    6660:	ldr	r6, [r6, #3072]	; 0xc00
    6664:	orr	r1, r1, r6
    6668:	and	r6, r0, #254	; 0xfe
    666c:	add	r0, r2, r6, lsl #1
    6670:	ldr	r0, [r0, #3584]	; 0xe00
    6674:	orr	r0, r1, r0
    6678:	str	r0, [sp, #4]
    667c:	ldr	r1, [pc, #444]	; 6840 <rb_des_setkey+0x2ac>
    6680:	add	r1, pc, r1
    6684:	ldr	r2, [r1, ip, lsl #2]
    6688:	add	r5, r1, lr, lsl #2
    668c:	ldr	r5, [r5, #512]	; 0x200
    6690:	orr	r2, r5, r2
    6694:	add	r5, r1, r8, lsl #2
    6698:	ldr	r5, [r5, #1024]	; 0x400
    669c:	orr	r2, r2, r5
    66a0:	add	r5, r1, r9, lsl #1
    66a4:	ldr	r5, [r5, #1536]	; 0x600
    66a8:	orr	r2, r2, r5
    66ac:	add	r5, r1, r4, lsl #2
    66b0:	ldr	r5, [r5, #2048]	; 0x800
    66b4:	orr	r2, r2, r5
    66b8:	add	r3, r1, r3, lsl #2
    66bc:	ldr	r3, [r3, #2560]	; 0xa00
    66c0:	orr	r2, r2, r3
    66c4:	add	r3, r1, r7, lsl #2
    66c8:	ldr	r3, [r3, #3072]	; 0xc00
    66cc:	orr	r2, r2, r3
    66d0:	add	r1, r1, r6, lsl #1
    66d4:	ldr	r1, [r1, #3584]	; 0xe00
    66d8:	orr	r0, r2, r1
    66dc:	str	r0, [sp]
    66e0:	mov	r2, #0
    66e4:	mov	r6, #0
    66e8:	ldr	ip, [pc, #340]	; 6844 <rb_des_setkey+0x2b0>
    66ec:	add	ip, pc, ip
    66f0:	ldr	r0, [pc, #336]	; 6848 <rb_des_setkey+0x2b4>
    66f4:	add	r0, pc, r0
    66f8:	ldrb	r4, [r0, r6]
    66fc:	add	r2, r2, r4
    6700:	rsb	r0, r2, #28
    6704:	ldr	r1, [sp]
    6708:	lsr	r4, r1, r0
    670c:	orr	r1, r4, r1, lsl r2
    6710:	ubfx	r7, r1, #14, #7
    6714:	str	r7, [sp, #8]
    6718:	add	r4, ip, r7, lsl #2
    671c:	ldr	r4, [r4, #512]	; 0x200
    6720:	ubfx	r9, r1, #21, #7
    6724:	ldr	lr, [ip, r9, lsl #2]
    6728:	orr	r5, r4, lr
    672c:	ubfx	lr, r1, #7, #7
    6730:	add	r3, ip, lr, lsl #2
    6734:	ldr	r3, [r3, #1024]	; 0x400
    6738:	orr	r3, r5, r3
    673c:	and	sl, r1, #127	; 0x7f
    6740:	add	r5, ip, sl, lsl #2
    6744:	ldr	r5, [r5, #1536]	; 0x600
    6748:	orr	r3, r3, r5
    674c:	ldr	r1, [sp, #4]
    6750:	lsr	r0, r1, r0
    6754:	orr	r0, r0, r1, lsl r2
    6758:	ubfx	r5, r0, #21, #7
    675c:	add	r7, ip, r5, lsl #2
    6760:	ldr	r7, [r7, #2048]	; 0x800
    6764:	orr	r3, r3, r7
    6768:	ubfx	r7, r0, #14, #7
    676c:	add	r4, ip, r7, lsl #2
    6770:	ldr	r4, [r4, #2560]	; 0xa00
    6774:	orr	r3, r3, r4
    6778:	ubfx	r4, r0, #7, #7
    677c:	add	r8, ip, r4, lsl #2
    6780:	ldr	r1, [r8, #3072]	; 0xc00
    6784:	orr	r1, r3, r1
    6788:	and	r8, r0, #127	; 0x7f
    678c:	add	r3, ip, r8, lsl #2
    6790:	ldr	r3, [r3, #3584]	; 0xe00
    6794:	orr	r1, r1, r3
    6798:	ldr	r3, [pc, #172]	; 684c <rb_des_setkey+0x2b8>
    679c:	add	r3, pc, r3
    67a0:	str	r1, [r3, r6, lsl #2]
    67a4:	ldr	r1, [pc, #164]	; 6850 <rb_des_setkey+0x2bc>
    67a8:	add	r1, pc, r1
    67ac:	mov	r0, r1
    67b0:	ldr	r1, [r1, r9, lsl #2]
    67b4:	ldr	r3, [sp, #8]
    67b8:	add	r3, r0, r3, lsl #2
    67bc:	ldr	r3, [r3, #512]	; 0x200
    67c0:	orr	r1, r3, r1
    67c4:	add	r3, r0, lr, lsl #2
    67c8:	ldr	r3, [r3, #1024]	; 0x400
    67cc:	orr	r1, r1, r3
    67d0:	add	r3, r0, sl, lsl #2
    67d4:	ldr	r3, [r3, #1536]	; 0x600
    67d8:	orr	r1, r1, r3
    67dc:	add	r3, r0, r5, lsl #2
    67e0:	ldr	r3, [r3, #2048]	; 0x800
    67e4:	orr	r1, r1, r3
    67e8:	add	r3, r0, r7, lsl #2
    67ec:	ldr	r3, [r3, #2560]	; 0xa00
    67f0:	orr	r1, r1, r3
    67f4:	add	r3, r0, r4, lsl #2
    67f8:	ldr	r3, [r3, #3072]	; 0xc00
    67fc:	orr	r1, r1, r3
    6800:	add	r0, r0, r8, lsl #2
    6804:	ldr	r0, [r0, #3584]	; 0xe00
    6808:	orr	r0, r1, r0
    680c:	ldr	r1, [pc, #64]	; 6854 <rb_des_setkey+0x2c0>
    6810:	add	r1, pc, r1
    6814:	str	r0, [r1, r6, lsl #2]
    6818:	add	r6, r6, #1
    681c:	cmp	r6, #16
    6820:	bne	66f0 <rb_des_setkey+0x15c>
    6824:	sub	sp, fp, #28
    6828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    682c:	.word	0x00022f18
    6830:	.word	0x00022f08
    6834:	.word	0x00022ef8
    6838:	.word	0x00022ef0
    683c:	.word	0x000301e8
    6840:	.word	0x0002f168
    6844:	.word	0x000310fc
    6848:	.word	0x0000ef7c
    684c:	.word	0x0003406c
    6850:	.word	0x00032040
    6854:	.word	0x00034038

00006858 <rb_ascii_to_bin>:
    6858:	mov	r1, r0
    685c:	mov	r0, #0
    6860:	cmp	r1, #122	; 0x7a
    6864:	bhi	6898 <rb_ascii_to_bin+0x40>
    6868:	cmp	r1, #97	; 0x61
    686c:	subcs	r0, r1, #59	; 0x3b
    6870:	bxcs	lr
    6874:	cmp	r1, #90	; 0x5a
    6878:	bxhi	lr
    687c:	cmp	r1, #65	; 0x41
    6880:	subcs	r0, r1, #53	; 0x35
    6884:	bxcs	lr
    6888:	sub	r0, r1, #46	; 0x2e
    688c:	uxtb	r1, r0
    6890:	cmp	r1, #12
    6894:	movcs	r0, #0
    6898:	bx	lr

0000689c <rb_setup_salt>:
    689c:	push	{fp, lr}
    68a0:	mov	fp, sp
    68a4:	ldr	r1, [pc, #104]	; 6914 <rb_setup_salt+0x78>
    68a8:	ldr	r1, [pc, r1]
    68ac:	cmp	r1, r0
    68b0:	popeq	{fp, pc}
    68b4:	ldr	ip, [pc, #92]	; 6918 <rb_setup_salt+0x7c>
    68b8:	add	ip, pc, ip
    68bc:	mov	r1, #0
    68c0:	str	r1, [ip]
    68c4:	ldr	r1, [pc, #80]	; 691c <rb_setup_salt+0x80>
    68c8:	add	r1, pc, r1
    68cc:	str	r0, [r1]
    68d0:	mov	r2, #8388608	; 0x800000
    68d4:	mov	r3, #1
    68d8:	mov	lr, #24
    68dc:	tst	r3, r0
    68e0:	bne	68fc <rb_setup_salt+0x60>
    68e4:	subs	lr, lr, #1
    68e8:	lsr	r2, r2, #1
    68ec:	lsl	r3, r3, #1
    68f0:	beq	6910 <rb_setup_salt+0x74>
    68f4:	tst	r3, r0
    68f8:	beq	68e4 <rb_setup_salt+0x48>
    68fc:	ldr	r1, [pc, #28]	; 6920 <rb_setup_salt+0x84>
    6900:	ldr	r1, [pc, r1]
    6904:	orr	r1, r1, r2
    6908:	str	r1, [ip]
    690c:	b	68e4 <rb_setup_salt+0x48>
    6910:	pop	{fp, pc}
    6914:	.word	0x00022c40
    6918:	.word	0x00022c2c
    691c:	.word	0x00022c20
    6920:	.word	0x00022be4

00006924 <rb_do_des>:
    6924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6928:	add	fp, sp, #28
    692c:	sub	sp, sp, #12
    6930:	stm	sp, {r0, r1}
    6934:	mov	r5, #4096	; 0x1000
    6938:	ldr	r0, [pc, #728]	; 6c18 <rb_do_des+0x2f4>
    693c:	add	r0, pc, r0
    6940:	ldr	r1, [r0, r5]
    6944:	ldr	r2, [r0, #1024]	; 0x400
    6948:	ldr	r3, [pc, #716]	; 6c1c <rb_do_des+0x2f8>
    694c:	ldr	r3, [pc, r3]
    6950:	orr	r2, r2, r3
    6954:	ldr	r3, [r0, #2048]	; 0x800
    6958:	orr	r2, r2, r3
    695c:	ldr	r3, [r0, #3072]	; 0xc00
    6960:	orr	r2, r2, r3
    6964:	orr	r1, r2, r1
    6968:	mov	r3, #5120	; 0x1400
    696c:	ldr	r2, [r0, r3]
    6970:	orr	r1, r1, r2
    6974:	mov	r7, #6144	; 0x1800
    6978:	ldr	r2, [r0, r7]
    697c:	orr	r1, r1, r2
    6980:	mov	r6, #7168	; 0x1c00
    6984:	ldr	r0, [r0, r6]
    6988:	orr	r2, r1, r0
    698c:	ldr	r0, [pc, #652]	; 6c20 <rb_do_des+0x2fc>
    6990:	add	r0, pc, r0
    6994:	ldr	r1, [r0, r5]
    6998:	ldr	r5, [r0, #1024]	; 0x400
    699c:	ldr	r4, [pc, #640]	; 6c24 <rb_do_des+0x300>
    69a0:	ldr	r4, [pc, r4]
    69a4:	orr	r5, r5, r4
    69a8:	ldr	r4, [r0, #2048]	; 0x800
    69ac:	orr	r5, r5, r4
    69b0:	ldr	r4, [r0, #3072]	; 0xc00
    69b4:	orr	r5, r5, r4
    69b8:	orr	r1, r5, r1
    69bc:	ldr	r3, [r0, r3]
    69c0:	orr	r1, r1, r3
    69c4:	ldr	r3, [r0, r7]
    69c8:	orr	r1, r1, r3
    69cc:	ldr	r0, [r0, r6]
    69d0:	orr	r1, r1, r0
    69d4:	mov	r8, #24
    69d8:	ldr	r9, [pc, #584]	; 6c28 <rb_do_des+0x304>
    69dc:	ldr	r9, [pc, r9]
    69e0:	mov	r3, #258048	; 0x3f000
    69e4:	mov	r5, #16515072	; 0xfc0000
    69e8:	mov	r6, #4032	; 0xfc0
    69ec:	ldr	r4, [pc, #568]	; 6c2c <rb_do_des+0x308>
    69f0:	add	r4, pc, r4
    69f4:	ldr	sl, [pc, #564]	; 6c30 <rb_do_des+0x30c>
    69f8:	add	sl, pc, sl
    69fc:	ldr	ip, [pc, #560]	; 6c34 <rb_do_des+0x310>
    6a00:	add	ip, pc, ip
    6a04:	ldr	r7, [pc, #556]	; 6c38 <rb_do_des+0x314>
    6a08:	add	r7, pc, r7
    6a0c:	mov	lr, r1
    6a10:	str	r8, [sp, #8]
    6a14:	mov	r0, #0
    6a18:	mov	r1, r2
    6a1c:	mov	r2, r1
    6a20:	and	r1, r3, r1, lsr #11
    6a24:	and	r8, r5, r2, ror #9
    6a28:	orr	r1, r8, r1
    6a2c:	mov	r8, #4096	; 0x1000
    6a30:	and	r5, r6, r2, lsr #13
    6a34:	orr	r1, r1, r5
    6a38:	ubfx	r5, r2, #15, #6
    6a3c:	orr	r1, r1, r5
    6a40:	ldr	r5, [r4, r0, lsl #2]
    6a44:	eor	r5, r5, r1
    6a48:	and	r6, r2, #8064	; 0x1f80
    6a4c:	lsl	r6, r6, #5
    6a50:	orr	r6, r6, r2, lsr #31
    6a54:	and	r3, r2, #129024	; 0x1f800
    6a58:	orr	r3, r6, r3, lsl #7
    6a5c:	and	r6, r2, #504	; 0x1f8
    6a60:	orr	r3, r3, r6, lsl #3
    6a64:	and	r6, r2, #31
    6a68:	orr	r3, r3, r6, lsl #1
    6a6c:	eor	r1, r1, r3
    6a70:	and	r1, r9, r1
    6a74:	eor	r5, r5, r1
    6a78:	ldrb	r6, [sl, r5, lsr #12]
    6a7c:	ldr	r6, [ip, r6, lsl #2]
    6a80:	bfc	r5, #12, #20
    6a84:	add	r5, sl, r5
    6a88:	ldrb	r5, [r5, r8]
    6a8c:	mov	r8, #8192	; 0x2000
    6a90:	add	r5, ip, r5, lsl #2
    6a94:	ldr	r5, [r5, #1024]	; 0x400
    6a98:	orr	r5, r5, r6
    6a9c:	mov	r6, #4032	; 0xfc0
    6aa0:	eor	r1, r1, r3
    6aa4:	ldr	r3, [r7, r0, lsl #2]
    6aa8:	eor	r1, r1, r3
    6aac:	add	r3, sl, r1, lsr #12
    6ab0:	ldrb	r3, [r3, r8]
    6ab4:	mov	r8, #12288	; 0x3000
    6ab8:	add	r3, ip, r3, lsl #2
    6abc:	ldr	r3, [r3, #2048]	; 0x800
    6ac0:	orr	r3, r5, r3
    6ac4:	mov	r5, #16515072	; 0xfc0000
    6ac8:	bfc	r1, #12, #20
    6acc:	add	r1, sl, r1
    6ad0:	ldrb	r1, [r1, r8]
    6ad4:	add	r1, ip, r1, lsl #2
    6ad8:	ldr	r1, [r1, #3072]	; 0xc00
    6adc:	orr	r1, r3, r1
    6ae0:	mov	r3, #258048	; 0x3f000
    6ae4:	eor	r1, r1, lr
    6ae8:	add	r0, r0, #1
    6aec:	cmp	r0, #16
    6af0:	mov	lr, r2
    6af4:	bne	6a1c <rb_do_des+0xf8>
    6af8:	ldr	r0, [sp, #8]
    6afc:	sub	r8, r0, #1
    6b00:	cmp	r0, #0
    6b04:	bne	6a0c <rb_do_des+0xe8>
    6b08:	lsr	lr, r1, #24
    6b0c:	ldr	r5, [pc, #296]	; 6c3c <rb_do_des+0x318>
    6b10:	add	r5, pc, r5
    6b14:	ldr	r7, [r5, lr, lsl #2]
    6b18:	ubfx	r8, r1, #16, #8
    6b1c:	add	r6, r5, r8, lsl #2
    6b20:	ldr	r6, [r6, #1024]	; 0x400
    6b24:	orr	r6, r6, r7
    6b28:	ubfx	sl, r1, #8, #8
    6b2c:	add	r4, r5, sl, lsl #2
    6b30:	ldr	r4, [r4, #2048]	; 0x800
    6b34:	orr	r6, r6, r4
    6b38:	uxtb	r1, r1
    6b3c:	add	r4, r5, r1, lsl #2
    6b40:	ldr	r4, [r4, #3072]	; 0xc00
    6b44:	orr	r4, r6, r4
    6b48:	lsr	r6, r2, #24
    6b4c:	add	r0, r5, r6, lsl #2
    6b50:	mov	r3, #4096	; 0x1000
    6b54:	ldr	r0, [r0, r3]
    6b58:	orr	r0, r4, r0
    6b5c:	ubfx	r4, r2, #16, #8
    6b60:	add	r3, r5, r4, lsl #2
    6b64:	mov	r7, #5120	; 0x1400
    6b68:	ldr	r3, [r3, r7]
    6b6c:	orr	r0, r0, r3
    6b70:	ubfx	r3, r2, #8, #8
    6b74:	add	r7, r5, r3, lsl #2
    6b78:	mov	r9, #6144	; 0x1800
    6b7c:	ldr	r7, [r7, r9]
    6b80:	orr	r0, r0, r7
    6b84:	uxtb	r2, r2
    6b88:	add	r5, r5, r2, lsl #2
    6b8c:	mov	ip, #7168	; 0x1c00
    6b90:	ldr	r5, [r5, ip]
    6b94:	orr	r0, r0, r5
    6b98:	ldr	r5, [sp]
    6b9c:	str	r0, [r5]
    6ba0:	ldr	r0, [pc, #152]	; 6c40 <rb_do_des+0x31c>
    6ba4:	add	r0, pc, r0
    6ba8:	ldr	r5, [r0, lr, lsl #2]
    6bac:	add	r7, r0, r8, lsl #2
    6bb0:	ldr	r7, [r7, #1024]	; 0x400
    6bb4:	orr	r7, r7, r5
    6bb8:	add	r5, r0, sl, lsl #2
    6bbc:	ldr	r5, [r5, #2048]	; 0x800
    6bc0:	orr	r7, r7, r5
    6bc4:	add	r1, r0, r1, lsl #2
    6bc8:	ldr	r1, [r1, #3072]	; 0xc00
    6bcc:	orr	r1, r7, r1
    6bd0:	add	r7, r0, r6, lsl #2
    6bd4:	mov	r6, #4096	; 0x1000
    6bd8:	ldr	r7, [r7, r6]
    6bdc:	orr	r1, r1, r7
    6be0:	add	r7, r0, r4, lsl #2
    6be4:	mov	r6, #5120	; 0x1400
    6be8:	ldr	r7, [r7, r6]
    6bec:	orr	r1, r1, r7
    6bf0:	add	r3, r0, r3, lsl #2
    6bf4:	ldr	r3, [r3, r9]
    6bf8:	orr	r1, r1, r3
    6bfc:	add	r0, r0, r2, lsl #2
    6c00:	ldr	r0, [r0, ip]
    6c04:	orr	r0, r1, r0
    6c08:	ldr	r1, [sp, #4]
    6c0c:	str	r0, [r1]
    6c10:	sub	sp, fp, #28
    6c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c18:	.word	0x00028eac
    6c1c:	.word	0x00028e9c
    6c20:	.word	0x00026e58
    6c24:	.word	0x00026e48
    6c28:	.word	0x00022b08
    6c2c:	.word	0x00033e18
    6c30:	.word	0x00022cf4
    6c34:	.word	0x00032e08
    6c38:	.word	0x00033e40
    6c3c:	.word	0x0002acd8
    6c40:	.word	0x0002cc44

00006c44 <__bswap_32>:
    6c44:	rev	r0, r0
    6c48:	bx	lr

00006c4c <MD5Init>:
    6c4c:	push	{fp, lr}
    6c50:	mov	fp, sp
    6c54:	mov	r1, #0
    6c58:	movw	ip, #21622	; 0x5476
    6c5c:	movt	ip, #4146	; 0x1032
    6c60:	movw	lr, #56574	; 0xdcfe
    6c64:	movt	lr, #39098	; 0x98ba
    6c68:	movw	r2, #43913	; 0xab89
    6c6c:	movt	r2, #61389	; 0xefcd
    6c70:	movw	r3, #8961	; 0x2301
    6c74:	movt	r3, #26437	; 0x6745
    6c78:	str	r3, [r0]
    6c7c:	stmib	r0, {r2, lr}
    6c80:	str	ip, [r0, #12]
    6c84:	str	r1, [r0, #16]
    6c88:	str	r1, [r0, #20]
    6c8c:	pop	{fp, pc}

00006c90 <MD5Update>:
    6c90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    6c94:	add	fp, sp, #24
    6c98:	mov	r4, r2
    6c9c:	mov	r6, r1
    6ca0:	mov	r5, r0
    6ca4:	ldr	r0, [r0, #16]
    6ca8:	add	r1, r0, r2, lsl #3
    6cac:	str	r1, [r5, #16]
    6cb0:	ubfx	r9, r0, #3, #6
    6cb4:	cmp	r1, r0
    6cb8:	bcs	6cc8 <MD5Update+0x38>
    6cbc:	ldr	r0, [r5, #20]
    6cc0:	add	r0, r0, #1
    6cc4:	str	r0, [r5, #20]
    6cc8:	ldr	r0, [r5, #20]
    6ccc:	add	r0, r0, r4, lsr #29
    6cd0:	str	r0, [r5, #20]
    6cd4:	rsb	r7, r9, #64	; 0x40
    6cd8:	cmp	r7, r4
    6cdc:	bls	6ce8 <MD5Update+0x58>
    6ce0:	mov	r7, #0
    6ce4:	b	6d3c <MD5Update+0xac>
    6ce8:	add	r8, r5, #24
    6cec:	add	r0, r8, r9
    6cf0:	mov	r1, r6
    6cf4:	mov	r2, r7
    6cf8:	bl	5120 <memcpy@plt>
    6cfc:	mov	r0, r5
    6d00:	mov	r1, r8
    6d04:	bl	6dec <MD5Transform>
    6d08:	eor	r0, r9, #127	; 0x7f
    6d0c:	mov	r9, #0
    6d10:	cmp	r0, r4
    6d14:	bcs	6d3c <MD5Update+0xac>
    6d18:	add	r1, r6, r7
    6d1c:	mov	r0, r5
    6d20:	bl	6dec <MD5Transform>
    6d24:	add	r0, r7, #64	; 0x40
    6d28:	add	r1, r7, #127	; 0x7f
    6d2c:	cmp	r1, r4
    6d30:	mov	r7, r0
    6d34:	bcc	6d18 <MD5Update+0x88>
    6d38:	mov	r7, r0
    6d3c:	add	r1, r6, r7
    6d40:	sub	r2, r4, r7
    6d44:	add	r0, r5, r9
    6d48:	add	r0, r0, #24
    6d4c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    6d50:	b	5120 <memcpy@plt>

00006d54 <MD5Final>:
    6d54:	push	{r4, r5, fp, lr}
    6d58:	add	fp, sp, #8
    6d5c:	mov	r4, r1
    6d60:	mov	r5, r0
    6d64:	mov	r0, r1
    6d68:	bl	7814 <MD5Pad>
    6d6c:	mov	r0, #80	; 0x50
    6d70:	mov	r1, r4
    6d74:	vld1.8	{d16-d17}, [r1], r0
    6d78:	vmov.i32	q9, #0	; 0x00000000
    6d7c:	vst1.8	{d16-d17}, [r5]
    6d80:	add	r0, r4, #16
    6d84:	vst1.8	{d18-d19}, [r0]
    6d88:	add	r0, r4, #32
    6d8c:	vst1.8	{d18-d19}, [r0]
    6d90:	add	r0, r4, #48	; 0x30
    6d94:	vst1.8	{d18-d19}, [r0]
    6d98:	add	r0, r4, #64	; 0x40
    6d9c:	vst1.8	{d18-d19}, [r0]
    6da0:	mov	r0, #0
    6da4:	str	r0, [r1]
    6da8:	mov	r1, #84	; 0x54
    6dac:	vst1.8	{d18-d19}, [r4], r1
    6db0:	str	r0, [r4]
    6db4:	pop	{r4, r5, fp, pc}

00006db8 <_crypt_to64>:
    6db8:	cmp	r2, #1
    6dbc:	bxlt	lr
    6dc0:	ldr	ip, [pc, #32]	; 6de8 <_crypt_to64+0x30>
    6dc4:	add	ip, pc, ip
    6dc8:	and	r3, r1, #63	; 0x3f
    6dcc:	ldrb	r3, [ip, r3]
    6dd0:	strb	r3, [r0], #1
    6dd4:	lsr	r1, r1, #6
    6dd8:	sub	r2, r2, #1
    6ddc:	cmp	r2, #0
    6de0:	bgt	6dc8 <_crypt_to64+0x10>
    6de4:	bx	lr
    6de8:	.word	0x0000e0ab

00006dec <MD5Transform>:
    6dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6df0:	add	fp, sp, #28
    6df4:	sub	sp, sp, #84	; 0x54
    6df8:	mov	ip, r1
    6dfc:	str	r0, [sp, #16]
    6e00:	ldr	r5, [r0]
    6e04:	str	r5, [sp, #24]
    6e08:	ldr	r4, [r0, #4]
    6e0c:	ldr	r1, [r0, #8]
    6e10:	ldr	r2, [r0, #12]
    6e14:	and	r0, r1, r4
    6e18:	str	r1, [sp, #32]
    6e1c:	bic	r3, r2, r4
    6e20:	str	r2, [sp, #28]
    6e24:	orr	r0, r3, r0
    6e28:	ldr	r3, [ip]
    6e2c:	str	r3, [fp, #-36]	; 0xffffffdc
    6e30:	ldr	r9, [ip, #4]
    6e34:	ldr	lr, [ip, #8]
    6e38:	str	lr, [fp, #-52]	; 0xffffffcc
    6e3c:	ldr	r8, [ip, #12]
    6e40:	str	r8, [fp, #-44]	; 0xffffffd4
    6e44:	add	r3, r5, r3
    6e48:	add	r0, r3, r0
    6e4c:	movw	r3, #42104	; 0xa478
    6e50:	movt	r3, #55146	; 0xd76a
    6e54:	add	r0, r0, r3
    6e58:	add	r0, r4, r0, ror #25
    6e5c:	bic	r3, r1, r0
    6e60:	and	r7, r0, r4
    6e64:	orr	r3, r7, r3
    6e68:	add	r7, r2, r9
    6e6c:	str	r9, [fp, #-48]	; 0xffffffd0
    6e70:	add	r3, r7, r3
    6e74:	movw	r7, #46934	; 0xb756
    6e78:	movt	r7, #59591	; 0xe8c7
    6e7c:	add	r3, r3, r7
    6e80:	add	r3, r0, r3, ror #20
    6e84:	bic	r7, r4, r3
    6e88:	str	r4, [sp, #20]
    6e8c:	and	r6, r3, r0
    6e90:	orr	r7, r6, r7
    6e94:	add	r6, r1, lr
    6e98:	add	r7, r6, r7
    6e9c:	movw	r6, #28891	; 0x70db
    6ea0:	movt	r6, #9248	; 0x2420
    6ea4:	add	r7, r7, r6
    6ea8:	add	r7, r3, r7, ror #15
    6eac:	bic	r6, r0, r7
    6eb0:	and	r5, r7, r3
    6eb4:	orr	r6, r5, r6
    6eb8:	add	r5, r4, r8
    6ebc:	add	r6, r5, r6
    6ec0:	movw	r5, #52974	; 0xceee
    6ec4:	movt	r5, #49597	; 0xc1bd
    6ec8:	add	r6, r6, r5
    6ecc:	add	r4, r7, r6, ror #10
    6ed0:	bic	r6, r3, r4
    6ed4:	and	r5, r4, r7
    6ed8:	orr	r6, r5, r6
    6edc:	ldr	r1, [ip, #16]
    6ee0:	str	r1, [sp, #48]	; 0x30
    6ee4:	add	r0, r1, r0
    6ee8:	add	r0, r0, r6
    6eec:	movw	r6, #4015	; 0xfaf
    6ef0:	movt	r6, #62844	; 0xf57c
    6ef4:	add	r0, r0, r6
    6ef8:	add	r0, r4, r0, ror #25
    6efc:	bic	r6, r7, r0
    6f00:	and	r5, r0, r4
    6f04:	orr	r5, r5, r6
    6f08:	ldr	r1, [ip, #20]
    6f0c:	str	r1, [sp, #36]	; 0x24
    6f10:	add	r3, r1, r3
    6f14:	add	r3, r3, r5
    6f18:	movw	r5, #50730	; 0xc62a
    6f1c:	movt	r5, #18311	; 0x4787
    6f20:	add	r3, r3, r5
    6f24:	add	r3, r0, r3, ror #20
    6f28:	bic	r5, r4, r3
    6f2c:	and	r6, r3, r0
    6f30:	orr	r5, r6, r5
    6f34:	ldr	r8, [ip, #24]
    6f38:	add	r7, r8, r7
    6f3c:	str	r8, [sp, #12]
    6f40:	add	r7, r7, r5
    6f44:	movw	r5, #17939	; 0x4613
    6f48:	movt	r5, #43056	; 0xa830
    6f4c:	add	r7, r7, r5
    6f50:	add	r5, r3, r7, ror #15
    6f54:	bic	r7, r0, r5
    6f58:	and	r6, r5, r3
    6f5c:	orr	r6, r6, r7
    6f60:	ldr	r1, [ip, #28]
    6f64:	str	r1, [sp, #52]	; 0x34
    6f68:	add	r4, r1, r4
    6f6c:	add	r4, r4, r6
    6f70:	movw	r6, #38145	; 0x9501
    6f74:	movt	r6, #64838	; 0xfd46
    6f78:	add	r4, r4, r6
    6f7c:	add	r6, r5, r4, ror #10
    6f80:	bic	r4, r3, r6
    6f84:	and	r7, r6, r5
    6f88:	orr	r4, r7, r4
    6f8c:	ldr	r1, [ip, #32]
    6f90:	str	r1, [sp, #44]	; 0x2c
    6f94:	add	r0, r1, r0
    6f98:	add	r0, r0, r4
    6f9c:	movw	r4, #39128	; 0x98d8
    6fa0:	movt	r4, #27008	; 0x6980
    6fa4:	add	r0, r0, r4
    6fa8:	add	r0, r6, r0, ror #25
    6fac:	bic	r4, r5, r0
    6fb0:	and	r7, r0, r6
    6fb4:	orr	r4, r7, r4
    6fb8:	ldr	r1, [ip, #36]	; 0x24
    6fbc:	str	r1, [fp, #-32]	; 0xffffffe0
    6fc0:	add	r3, r1, r3
    6fc4:	add	r3, r3, r4
    6fc8:	movw	r4, #63407	; 0xf7af
    6fcc:	movt	r4, #35652	; 0x8b44
    6fd0:	add	r3, r3, r4
    6fd4:	add	r3, r0, r3, ror #20
    6fd8:	bic	r4, r6, r3
    6fdc:	and	r7, r3, r0
    6fe0:	orr	r7, r7, r4
    6fe4:	ldr	r1, [ip, #40]	; 0x28
    6fe8:	str	r1, [sp, #56]	; 0x38
    6fec:	add	r5, r1, r5
    6ff0:	add	r5, r5, r7
    6ff4:	movw	r7, #42063	; 0xa44f
    6ff8:	sub	r5, r5, r7
    6ffc:	add	r1, r3, r5, ror #15
    7000:	bic	r5, r0, r1
    7004:	and	r7, r1, r3
    7008:	orr	r5, r7, r5
    700c:	ldr	lr, [ip, #44]	; 0x2c
    7010:	add	r6, lr, r6
    7014:	str	lr, [fp, #-40]	; 0xffffffd8
    7018:	add	r5, r6, r5
    701c:	movw	r6, #55230	; 0xd7be
    7020:	movt	r6, #35164	; 0x895c
    7024:	add	r5, r5, r6
    7028:	add	r2, r1, r5, ror #10
    702c:	bic	r5, r3, r2
    7030:	and	r6, r2, r1
    7034:	orr	r5, r6, r5
    7038:	ldr	r4, [ip, #48]	; 0x30
    703c:	str	r4, [sp, #4]
    7040:	add	r0, r4, r0
    7044:	add	r0, r0, r5
    7048:	movw	r5, #4386	; 0x1122
    704c:	movt	r5, #27536	; 0x6b90
    7050:	add	r0, r0, r5
    7054:	add	r0, r2, r0, ror #25
    7058:	bic	r5, r1, r0
    705c:	and	r7, r0, r2
    7060:	orr	r7, r7, r5
    7064:	ldr	r4, [ip, #52]	; 0x34
    7068:	str	r4, [sp, #40]	; 0x28
    706c:	add	r3, r4, r3
    7070:	add	r3, r3, r7
    7074:	movw	r7, #29075	; 0x7193
    7078:	movt	r7, #64920	; 0xfd98
    707c:	add	r3, r3, r7
    7080:	add	r7, r0, r3, ror #20
    7084:	bic	r3, r2, r7
    7088:	and	sl, r7, r0
    708c:	orr	r3, sl, r3
    7090:	ldr	r4, [ip, #56]	; 0x38
    7094:	add	r1, r4, r1
    7098:	mov	sl, r4
    709c:	add	r1, r1, r3
    70a0:	movw	r3, #17294	; 0x438e
    70a4:	movt	r3, #42617	; 0xa679
    70a8:	add	r1, r1, r3
    70ac:	add	r3, r7, r1, ror #15
    70b0:	bic	r1, r0, r3
    70b4:	and	r5, r3, r7
    70b8:	orr	r5, r5, r1
    70bc:	ldr	r1, [ip, #60]	; 0x3c
    70c0:	add	r2, r1, r2
    70c4:	mov	r6, r1
    70c8:	str	r1, [sp, #8]
    70cc:	add	r2, r2, r5
    70d0:	movw	r5, #2081	; 0x821
    70d4:	movt	r5, #18868	; 0x49b4
    70d8:	add	r2, r2, r5
    70dc:	add	r2, r3, r2, ror #10
    70e0:	and	r5, r2, r7
    70e4:	bic	r4, r3, r7
    70e8:	orr	r5, r5, r4
    70ec:	add	r0, r9, r0
    70f0:	add	r0, r0, r5
    70f4:	movw	r5, #9570	; 0x2562
    70f8:	movt	r5, #63006	; 0xf61e
    70fc:	add	r0, r0, r5
    7100:	add	r0, r2, r0, ror #27
    7104:	and	r5, r0, r3
    7108:	bic	r4, r2, r3
    710c:	orr	r5, r5, r4
    7110:	add	r7, r8, r7
    7114:	add	r7, r7, r5
    7118:	movw	r5, #45888	; 0xb340
    711c:	movt	r5, #49216	; 0xc040
    7120:	add	r7, r7, r5
    7124:	add	r7, r0, r7, ror #23
    7128:	and	r5, r7, r2
    712c:	bic	r4, r0, r2
    7130:	orr	r5, r5, r4
    7134:	add	r3, lr, r3
    7138:	add	r3, r3, r5
    713c:	movw	r5, #23121	; 0x5a51
    7140:	movt	r5, #9822	; 0x265e
    7144:	add	r3, r3, r5
    7148:	add	r3, r7, r3, ror #18
    714c:	and	r5, r3, r0
    7150:	bic	r4, r7, r0
    7154:	orr	r5, r5, r4
    7158:	ldr	r1, [fp, #-36]	; 0xffffffdc
    715c:	add	r2, r1, r2
    7160:	add	r2, r2, r5
    7164:	movw	r5, #51114	; 0xc7aa
    7168:	movt	r5, #59830	; 0xe9b6
    716c:	add	r2, r2, r5
    7170:	add	r2, r3, r2, ror #12
    7174:	and	r5, r2, r7
    7178:	bic	r4, r3, r7
    717c:	orr	r5, r5, r4
    7180:	ldr	r9, [sp, #36]	; 0x24
    7184:	add	r0, r9, r0
    7188:	add	r0, r0, r5
    718c:	movw	r5, #4189	; 0x105d
    7190:	movt	r5, #54831	; 0xd62f
    7194:	add	r0, r0, r5
    7198:	add	r0, r2, r0, ror #27
    719c:	and	r5, r0, r3
    71a0:	bic	r4, r2, r3
    71a4:	orr	r5, r5, r4
    71a8:	ldr	r1, [sp, #56]	; 0x38
    71ac:	add	r7, r1, r7
    71b0:	add	r7, r7, r5
    71b4:	movw	r5, #5203	; 0x1453
    71b8:	movt	r5, #580	; 0x244
    71bc:	add	r7, r7, r5
    71c0:	add	r7, r0, r7, ror #23
    71c4:	and	r5, r7, r2
    71c8:	bic	r4, r0, r2
    71cc:	orr	r5, r5, r4
    71d0:	add	r3, r6, r3
    71d4:	add	r3, r3, r5
    71d8:	movw	r5, #59009	; 0xe681
    71dc:	movt	r5, #55457	; 0xd8a1
    71e0:	add	r3, r3, r5
    71e4:	add	r3, r7, r3, ror #18
    71e8:	and	r5, r3, r0
    71ec:	bic	r4, r7, r0
    71f0:	orr	r5, r5, r4
    71f4:	ldr	ip, [sp, #48]	; 0x30
    71f8:	add	r2, ip, r2
    71fc:	add	r2, r2, r5
    7200:	movw	r5, #64456	; 0xfbc8
    7204:	movt	r5, #59347	; 0xe7d3
    7208:	add	r2, r2, r5
    720c:	add	r2, r3, r2, ror #12
    7210:	and	r5, r2, r7
    7214:	bic	r4, r3, r7
    7218:	orr	r5, r5, r4
    721c:	ldr	r1, [fp, #-32]	; 0xffffffe0
    7220:	add	r0, r1, r0
    7224:	add	r0, r0, r5
    7228:	movw	r5, #52710	; 0xcde6
    722c:	movt	r5, #8673	; 0x21e1
    7230:	add	r0, r0, r5
    7234:	add	r0, r2, r0, ror #27
    7238:	and	r5, r0, r3
    723c:	bic	r4, r2, r3
    7240:	orr	r5, r5, r4
    7244:	add	r7, sl, r7
    7248:	mov	lr, sl
    724c:	str	sl, [sp]
    7250:	add	r7, r7, r5
    7254:	movw	r5, #2006	; 0x7d6
    7258:	movt	r5, #49975	; 0xc337
    725c:	add	r7, r7, r5
    7260:	add	r7, r0, r7, ror #23
    7264:	and	r5, r7, r2
    7268:	bic	r4, r0, r2
    726c:	orr	r5, r5, r4
    7270:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7274:	add	r3, r1, r3
    7278:	add	r3, r3, r5
    727c:	movw	r5, #3463	; 0xd87
    7280:	movt	r5, #62677	; 0xf4d5
    7284:	add	r3, r3, r5
    7288:	add	r3, r7, r3, ror #18
    728c:	and	r5, r3, r0
    7290:	bic	r4, r7, r0
    7294:	orr	r5, r5, r4
    7298:	ldr	r8, [sp, #44]	; 0x2c
    729c:	add	r2, r8, r2
    72a0:	add	r2, r2, r5
    72a4:	movw	r5, #5357	; 0x14ed
    72a8:	movt	r5, #17754	; 0x455a
    72ac:	add	r2, r2, r5
    72b0:	add	r2, r3, r2, ror #12
    72b4:	and	r5, r2, r7
    72b8:	bic	r4, r3, r7
    72bc:	orr	r5, r5, r4
    72c0:	ldr	sl, [sp, #40]	; 0x28
    72c4:	add	r0, sl, r0
    72c8:	add	r0, r0, r5
    72cc:	movw	r5, #59653	; 0xe905
    72d0:	movt	r5, #43491	; 0xa9e3
    72d4:	add	r0, r0, r5
    72d8:	add	r0, r2, r0, ror #27
    72dc:	and	r5, r0, r3
    72e0:	bic	r4, r2, r3
    72e4:	orr	r5, r5, r4
    72e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
    72ec:	add	r7, r1, r7
    72f0:	add	r7, r7, r5
    72f4:	movw	r5, #41976	; 0xa3f8
    72f8:	movt	r5, #64751	; 0xfcef
    72fc:	add	r7, r7, r5
    7300:	add	r7, r0, r7, ror #23
    7304:	and	r5, r7, r2
    7308:	bic	r4, r0, r2
    730c:	orr	r5, r5, r4
    7310:	ldr	r1, [sp, #52]	; 0x34
    7314:	add	r3, r1, r3
    7318:	add	r3, r3, r5
    731c:	movw	r5, #729	; 0x2d9
    7320:	movt	r5, #26479	; 0x676f
    7324:	add	r3, r3, r5
    7328:	add	r3, r7, r3, ror #18
    732c:	and	r5, r3, r0
    7330:	bic	r4, r7, r0
    7334:	orr	r5, r5, r4
    7338:	ldr	r6, [sp, #4]
    733c:	add	r2, r6, r2
    7340:	add	r2, r2, r5
    7344:	movw	r5, #19594	; 0x4c8a
    7348:	movt	r5, #36138	; 0x8d2a
    734c:	add	r2, r2, r5
    7350:	add	r2, r3, r2, ror #12
    7354:	add	r0, r9, r0
    7358:	eor	r5, r2, r3
    735c:	eor	r4, r5, r7
    7360:	add	r0, r0, r4
    7364:	movw	r4, #14658	; 0x3942
    7368:	movt	r4, #65530	; 0xfffa
    736c:	add	r0, r0, r4
    7370:	add	r0, r2, r0, ror #28
    7374:	eor	r5, r5, r0
    7378:	add	r7, r8, r7
    737c:	add	r7, r7, r5
    7380:	movw	r5, #63105	; 0xf681
    7384:	movt	r5, #34673	; 0x8771
    7388:	add	r7, r7, r5
    738c:	add	r7, r0, r7, ror #21
    7390:	eor	r5, r0, r2
    7394:	eor	r5, r5, r7
    7398:	ldr	r4, [fp, #-40]	; 0xffffffd8
    739c:	add	r3, r4, r3
    73a0:	add	r3, r3, r5
    73a4:	movw	r5, #24866	; 0x6122
    73a8:	movt	r5, #28061	; 0x6d9d
    73ac:	add	r3, r3, r5
    73b0:	add	r3, r7, r3, ror #16
    73b4:	eor	r5, r7, r0
    73b8:	eor	r5, r5, r3
    73bc:	add	r2, lr, r2
    73c0:	add	r2, r2, r5
    73c4:	movw	r5, #14348	; 0x380c
    73c8:	movt	r5, #64997	; 0xfde5
    73cc:	add	r2, r2, r5
    73d0:	add	r2, r3, r2, ror #9
    73d4:	eor	r5, r3, r7
    73d8:	eor	r5, r5, r2
    73dc:	ldr	r4, [fp, #-48]	; 0xffffffd0
    73e0:	add	r0, r4, r0
    73e4:	add	r0, r0, r5
    73e8:	movw	r5, #59972	; 0xea44
    73ec:	movt	r5, #42174	; 0xa4be
    73f0:	add	r0, r0, r5
    73f4:	add	r0, r2, r0, ror #28
    73f8:	eor	r5, r2, r3
    73fc:	eor	r5, r5, r0
    7400:	add	r7, ip, r7
    7404:	add	r7, r7, r5
    7408:	movw	r5, #53161	; 0xcfa9
    740c:	movt	r5, #19422	; 0x4bde
    7410:	add	r7, r7, r5
    7414:	add	r7, r0, r7, ror #21
    7418:	eor	r5, r0, r2
    741c:	eor	r5, r5, r7
    7420:	add	r3, r1, r3
    7424:	add	r3, r3, r5
    7428:	movw	r5, #19296	; 0x4b60
    742c:	movt	r5, #63163	; 0xf6bb
    7430:	add	r3, r3, r5
    7434:	add	r3, r7, r3, ror #16
    7438:	eor	r5, r7, r0
    743c:	eor	r5, r5, r3
    7440:	ldr	r8, [sp, #56]	; 0x38
    7444:	add	r2, r8, r2
    7448:	add	r2, r2, r5
    744c:	movw	r5, #48240	; 0xbc70
    7450:	movt	r5, #48831	; 0xbebf
    7454:	add	r2, r2, r5
    7458:	add	r2, r3, r2, ror #9
    745c:	eor	r5, r3, r7
    7460:	eor	r5, r5, r2
    7464:	add	r0, sl, r0
    7468:	add	r0, r0, r5
    746c:	movw	r5, #32454	; 0x7ec6
    7470:	movt	r5, #10395	; 0x289b
    7474:	add	r0, r0, r5
    7478:	add	r0, r2, r0, ror #28
    747c:	eor	r5, r2, r3
    7480:	eor	r5, r5, r0
    7484:	ldr	r4, [fp, #-36]	; 0xffffffdc
    7488:	add	r7, r4, r7
    748c:	add	r7, r7, r5
    7490:	movw	r5, #10234	; 0x27fa
    7494:	movt	r5, #60065	; 0xeaa1
    7498:	add	r7, r7, r5
    749c:	add	r7, r0, r7, ror #21
    74a0:	eor	r5, r0, r2
    74a4:	eor	r5, r5, r7
    74a8:	ldr	ip, [fp, #-44]	; 0xffffffd4
    74ac:	add	r3, ip, r3
    74b0:	add	r3, r3, r5
    74b4:	movw	r5, #12421	; 0x3085
    74b8:	movt	r5, #54511	; 0xd4ef
    74bc:	add	r3, r3, r5
    74c0:	add	r3, r7, r3, ror #16
    74c4:	eor	r5, r7, r0
    74c8:	eor	r5, r5, r3
    74cc:	ldr	r9, [sp, #12]
    74d0:	add	r2, r9, r2
    74d4:	add	r2, r2, r5
    74d8:	movw	r5, #7429	; 0x1d05
    74dc:	movt	r5, #1160	; 0x488
    74e0:	add	r2, r2, r5
    74e4:	add	r2, r3, r2, ror #9
    74e8:	eor	r5, r3, r7
    74ec:	eor	r5, r5, r2
    74f0:	ldr	r1, [fp, #-32]	; 0xffffffe0
    74f4:	add	r0, r1, r0
    74f8:	add	r0, r0, r5
    74fc:	movw	r5, #53305	; 0xd039
    7500:	movt	r5, #55764	; 0xd9d4
    7504:	add	r0, r0, r5
    7508:	add	r0, r2, r0, ror #28
    750c:	eor	r5, r2, r3
    7510:	eor	r5, r5, r0
    7514:	add	r7, r6, r7
    7518:	add	r7, r7, r5
    751c:	movw	r5, #39397	; 0x99e5
    7520:	movt	r5, #59099	; 0xe6db
    7524:	add	r7, r7, r5
    7528:	add	r7, r0, r7, ror #21
    752c:	eor	r5, r0, r2
    7530:	eor	r5, r5, r7
    7534:	ldr	lr, [sp, #8]
    7538:	add	r3, lr, r3
    753c:	add	r3, r3, r5
    7540:	movw	r5, #31992	; 0x7cf8
    7544:	movt	r5, #8098	; 0x1fa2
    7548:	add	r3, r3, r5
    754c:	add	r3, r7, r3, ror #16
    7550:	eor	r5, r7, r0
    7554:	eor	r5, r5, r3
    7558:	ldr	sl, [fp, #-52]	; 0xffffffcc
    755c:	add	r2, sl, r2
    7560:	add	r2, r2, r5
    7564:	movw	r5, #22117	; 0x5665
    7568:	movt	r5, #50348	; 0xc4ac
    756c:	add	r2, r2, r5
    7570:	add	r2, r3, r2, ror #9
    7574:	mvn	r5, r7
    7578:	orr	r5, r2, r5
    757c:	eor	r5, r5, r3
    7580:	add	r0, r4, r0
    7584:	add	r0, r0, r5
    7588:	movw	r5, #8772	; 0x2244
    758c:	movt	r5, #62505	; 0xf429
    7590:	add	r0, r0, r5
    7594:	add	r0, r2, r0, ror #26
    7598:	mvn	r5, r3
    759c:	orr	r5, r0, r5
    75a0:	eor	r5, r5, r2
    75a4:	ldr	r1, [sp, #52]	; 0x34
    75a8:	add	r7, r1, r7
    75ac:	add	r7, r7, r5
    75b0:	movw	r5, #65431	; 0xff97
    75b4:	movt	r5, #17194	; 0x432a
    75b8:	add	r7, r7, r5
    75bc:	add	r7, r0, r7, ror #22
    75c0:	mvn	r5, r2
    75c4:	orr	r5, r7, r5
    75c8:	eor	r5, r5, r0
    75cc:	ldr	r1, [sp]
    75d0:	add	r3, r1, r3
    75d4:	add	r3, r3, r5
    75d8:	movw	r5, #9127	; 0x23a7
    75dc:	movt	r5, #43924	; 0xab94
    75e0:	add	r3, r3, r5
    75e4:	add	r3, r7, r3, ror #17
    75e8:	mvn	r5, r0
    75ec:	orr	r5, r3, r5
    75f0:	eor	r5, r5, r7
    75f4:	ldr	r1, [sp, #36]	; 0x24
    75f8:	add	r2, r1, r2
    75fc:	add	r2, r2, r5
    7600:	movw	r5, #41017	; 0xa039
    7604:	movt	r5, #64659	; 0xfc93
    7608:	add	r2, r2, r5
    760c:	add	r2, r3, r2, ror #11
    7610:	mvn	r5, r7
    7614:	orr	r5, r2, r5
    7618:	eor	r5, r5, r3
    761c:	add	r0, r6, r0
    7620:	add	r0, r0, r5
    7624:	movw	r6, #22979	; 0x59c3
    7628:	movt	r6, #25947	; 0x655b
    762c:	add	r0, r0, r6
    7630:	add	r0, r2, r0, ror #26
    7634:	mvn	r6, r3
    7638:	orr	r6, r0, r6
    763c:	eor	r6, r6, r2
    7640:	add	r7, ip, r7
    7644:	add	r7, r7, r6
    7648:	movw	r6, #52370	; 0xcc92
    764c:	movt	r6, #36620	; 0x8f0c
    7650:	add	r7, r7, r6
    7654:	add	r7, r0, r7, ror #22
    7658:	mvn	r6, r2
    765c:	orr	r6, r7, r6
    7660:	eor	r6, r6, r0
    7664:	add	r3, r8, r3
    7668:	add	r3, r3, r6
    766c:	movw	r6, #62589	; 0xf47d
    7670:	movt	r6, #65519	; 0xffef
    7674:	add	r3, r3, r6
    7678:	add	r3, r7, r3, ror #17
    767c:	mvn	r6, r0
    7680:	orr	r6, r3, r6
    7684:	eor	r6, r6, r7
    7688:	ldr	r1, [fp, #-48]	; 0xffffffd0
    768c:	add	r2, r1, r2
    7690:	add	r2, r2, r6
    7694:	movw	r6, #24017	; 0x5dd1
    7698:	movt	r6, #34180	; 0x8584
    769c:	add	r2, r2, r6
    76a0:	add	r2, r3, r2, ror #11
    76a4:	mvn	r6, r7
    76a8:	orr	r6, r2, r6
    76ac:	eor	r6, r6, r3
    76b0:	ldr	r1, [sp, #44]	; 0x2c
    76b4:	add	r0, r1, r0
    76b8:	add	r0, r0, r6
    76bc:	movw	r6, #32335	; 0x7e4f
    76c0:	movt	r6, #28584	; 0x6fa8
    76c4:	add	r0, r0, r6
    76c8:	add	r6, r2, r0, ror #26
    76cc:	mvn	r0, r3
    76d0:	orr	r0, r6, r0
    76d4:	eor	r0, r0, r2
    76d8:	add	r1, lr, r7
    76dc:	add	r0, r1, r0
    76e0:	movw	r1, #59104	; 0xe6e0
    76e4:	movt	r1, #65068	; 0xfe2c
    76e8:	add	r0, r0, r1
    76ec:	add	r1, r6, r0, ror #22
    76f0:	mvn	r0, r2
    76f4:	orr	r0, r1, r0
    76f8:	eor	r0, r0, r6
    76fc:	add	r3, r9, r3
    7700:	add	r0, r3, r0
    7704:	movw	r3, #17172	; 0x4314
    7708:	movt	r3, #41729	; 0xa301
    770c:	add	r0, r0, r3
    7710:	add	r3, r1, r0, ror #17
    7714:	mvn	r0, r6
    7718:	orr	r0, r3, r0
    771c:	eor	r0, r0, r1
    7720:	ldr	r7, [sp, #40]	; 0x28
    7724:	add	r2, r7, r2
    7728:	add	r0, r2, r0
    772c:	movw	r2, #4513	; 0x11a1
    7730:	movt	r2, #19976	; 0x4e08
    7734:	add	r0, r0, r2
    7738:	add	r0, r3, r0, ror #11
    773c:	mvn	r2, r1
    7740:	orr	r2, r0, r2
    7744:	eor	r2, r2, r3
    7748:	ldr	r7, [sp, #48]	; 0x30
    774c:	add	r7, r7, r6
    7750:	add	r2, r7, r2
    7754:	movw	r7, #32386	; 0x7e82
    7758:	movt	r7, #63315	; 0xf753
    775c:	add	r2, r2, r7
    7760:	add	r2, r0, r2, ror #26
    7764:	ldr	r7, [sp, #24]
    7768:	add	r7, r2, r7
    776c:	ldr	r6, [sp, #16]
    7770:	str	r7, [r6]
    7774:	mvn	r7, r3
    7778:	orr	r7, r2, r7
    777c:	eor	r7, r7, r0
    7780:	ldr	r5, [fp, #-40]	; 0xffffffd8
    7784:	add	r1, r5, r1
    7788:	add	r1, r1, r7
    778c:	movw	r7, #62005	; 0xf235
    7790:	movt	r7, #48442	; 0xbd3a
    7794:	add	r1, r1, r7
    7798:	add	r1, r2, r1, ror #22
    779c:	ldr	r7, [sp, #28]
    77a0:	add	r7, r1, r7
    77a4:	str	r7, [r6, #12]
    77a8:	mvn	r7, r0
    77ac:	orr	r7, r1, r7
    77b0:	eor	r7, r7, r2
    77b4:	add	r3, sl, r3
    77b8:	add	r3, r3, r7
    77bc:	movw	r7, #53947	; 0xd2bb
    77c0:	movt	r7, #10967	; 0x2ad7
    77c4:	add	r3, r3, r7
    77c8:	add	r3, r1, r3, ror #17
    77cc:	ldr	r7, [sp, #32]
    77d0:	add	r7, r3, r7
    77d4:	str	r7, [r6, #8]
    77d8:	ldr	r7, [sp, #20]
    77dc:	add	r7, r3, r7
    77e0:	mvn	r2, r2
    77e4:	orr	r2, r3, r2
    77e8:	eor	r1, r2, r1
    77ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
    77f0:	add	r0, r2, r0
    77f4:	add	r0, r0, r1
    77f8:	movw	r1, #54161	; 0xd391
    77fc:	movt	r1, #60294	; 0xeb86
    7800:	add	r0, r0, r1
    7804:	add	r0, r7, r0, ror #11
    7808:	str	r0, [r6, #4]
    780c:	sub	sp, fp, #28
    7810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007814 <MD5Pad>:
    7814:	push	{r4, sl, fp, lr}
    7818:	add	fp, sp, #8
    781c:	sub	sp, sp, #8
    7820:	mov	r4, r0
    7824:	ldr	r0, [r0, #16]
    7828:	ldr	r1, [r4, #20]
    782c:	stm	sp, {r0, r1}
    7830:	ldr	r0, [r4, #16]
    7834:	ubfx	r0, r0, #3, #6
    7838:	mov	r1, #120	; 0x78
    783c:	cmp	r0, #56	; 0x38
    7840:	movwcc	r1, #56	; 0x38
    7844:	sub	r2, r1, r0
    7848:	ldr	r1, [pc, #32]	; 7870 <MD5Pad+0x5c>
    784c:	add	r1, pc, r1
    7850:	mov	r0, r4
    7854:	bl	6c90 <MD5Update>
    7858:	mov	r1, sp
    785c:	mov	r0, r4
    7860:	mov	r2, #8
    7864:	bl	6c90 <MD5Update>
    7868:	sub	sp, fp, #8
    786c:	pop	{r4, sl, fp, pc}
    7870:	.word	0x00020bc4

00007874 <rb_sha256_crypt_r>:
    7874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7878:	add	fp, sp, #28
    787c:	sub	sp, sp, #468	; 0x1d4
    7880:	mov	r8, r3
    7884:	mov	r9, r2
    7888:	mov	r6, r1
    788c:	mov	r4, r0
    7890:	ldr	r0, [pc, #2628]	; 82dc <rb_sha256_crypt_r+0xa68>
    7894:	add	r0, pc, r0
    7898:	mov	r2, #3
    789c:	bl	5528 <strncmp@plt>
    78a0:	cmp	r0, #0
    78a4:	addeq	r6, r6, #3
    78a8:	ldr	r1, [pc, #2608]	; 82e0 <rb_sha256_crypt_r+0xa6c>
    78ac:	add	r1, pc, r1
    78b0:	mov	r0, r6
    78b4:	mov	r2, #7
    78b8:	bl	5528 <strncmp@plt>
    78bc:	mov	r5, #0
    78c0:	movw	r1, #5000	; 0x1388
    78c4:	str	r1, [fp, #-460]	; 0xfffffe34
    78c8:	cmp	r0, #0
    78cc:	beq	78d8 <rb_sha256_crypt_r+0x64>
    78d0:	mov	r0, #0
    78d4:	b	791c <rb_sha256_crypt_r+0xa8>
    78d8:	add	r0, r6, #7
    78dc:	sub	r1, fp, #272	; 0x110
    78e0:	mov	r2, #10
    78e4:	bl	5114 <strtoul@plt>
    78e8:	ldr	r1, [fp, #-272]	; 0xfffffef0
    78ec:	ldrb	r2, [r1]
    78f0:	cmp	r2, #36	; 0x24
    78f4:	bne	82c8 <rb_sha256_crypt_r+0xa54>
    78f8:	movw	r2, #51711	; 0xc9ff
    78fc:	movt	r2, #15258	; 0x3b9a
    7900:	cmp	r0, r2
    7904:	movcc	r2, r0
    7908:	cmp	r2, #1000	; 0x3e8
    790c:	movls	r2, #1000	; 0x3e8
    7910:	str	r2, [fp, #-460]	; 0xfffffe34
    7914:	add	r6, r1, #1
    7918:	mov	r0, #1
    791c:	str	r0, [fp, #-488]	; 0xfffffe18
    7920:	ldr	r1, [pc, #2492]	; 82e4 <rb_sha256_crypt_r+0xa70>
    7924:	add	r1, pc, r1
    7928:	mov	r0, r6
    792c:	bl	54f8 <strcspn@plt>
    7930:	mov	sl, r0
    7934:	cmp	r0, #16
    7938:	movcs	sl, #16
    793c:	mov	r0, r4
    7940:	bl	50fc <strlen@plt>
    7944:	mov	r7, r0
    7948:	tst	r4, #3
    794c:	beq	7978 <rb_sha256_crypt_r+0x104>
    7950:	add	r0, r7, #11
    7954:	bic	r0, r0, #7
    7958:	sub	r0, sp, r0
    795c:	add	r5, r0, #4
    7960:	mov	sp, r0
    7964:	mov	r0, r5
    7968:	mov	r1, r4
    796c:	mov	r2, r7
    7970:	bl	5120 <memcpy@plt>
    7974:	mov	r4, r5
    7978:	tst	r6, #3
    797c:	str	r5, [fp, #-476]	; 0xfffffe24
    7980:	str	r8, [fp, #-484]	; 0xfffffe1c
    7984:	beq	79b8 <rb_sha256_crypt_r+0x144>
    7988:	add	r0, sl, #11
    798c:	bic	r0, r0, #7
    7990:	sub	r0, sp, r0
    7994:	add	r5, r0, #4
    7998:	mov	sp, r0
    799c:	mov	r0, r5
    79a0:	mov	r1, r6
    79a4:	mov	r2, sl
    79a8:	bl	5120 <memcpy@plt>
    79ac:	str	r5, [fp, #-492]	; 0xfffffe14
    79b0:	mov	r6, r5
    79b4:	b	79c0 <rb_sha256_crypt_r+0x14c>
    79b8:	mov	r0, #0
    79bc:	str	r0, [fp, #-492]	; 0xfffffe14
    79c0:	sub	r5, fp, #272	; 0x110
    79c4:	mov	r0, r5
    79c8:	bl	82f8 <rb_sha256_init_ctx>
    79cc:	mov	r0, r4
    79d0:	mov	r1, r7
    79d4:	mov	r2, r5
    79d8:	bl	8374 <rb_sha256_process_bytes>
    79dc:	mov	r0, r6
    79e0:	mov	r1, sl
    79e4:	mov	r2, r5
    79e8:	bl	8374 <rb_sha256_process_bytes>
    79ec:	sub	r5, fp, #448	; 0x1c0
    79f0:	mov	r0, r5
    79f4:	bl	82f8 <rb_sha256_init_ctx>
    79f8:	mov	r0, r4
    79fc:	mov	r1, r7
    7a00:	mov	r2, r5
    7a04:	bl	8374 <rb_sha256_process_bytes>
    7a08:	str	r6, [fp, #-472]	; 0xfffffe28
    7a0c:	mov	r0, r6
    7a10:	mov	r1, sl
    7a14:	mov	r2, r5
    7a18:	bl	8374 <rb_sha256_process_bytes>
    7a1c:	mov	r0, r4
    7a20:	mov	r1, r7
    7a24:	mov	r2, r5
    7a28:	bl	8374 <rb_sha256_process_bytes>
    7a2c:	sub	r1, fp, #64	; 0x40
    7a30:	mov	r0, r5
    7a34:	bl	8548 <rb_sha256_finish_ctx>
    7a38:	cmp	r7, #33	; 0x21
    7a3c:	mov	r1, r7
    7a40:	str	r7, [fp, #-452]	; 0xfffffe3c
    7a44:	bcc	7a80 <rb_sha256_crypt_r+0x20c>
    7a48:	sub	r0, r7, #33	; 0x21
    7a4c:	bic	r8, r0, #31
    7a50:	sub	r5, fp, #64	; 0x40
    7a54:	sub	r6, fp, #272	; 0x110
    7a58:	mov	r0, r5
    7a5c:	mov	r1, #32
    7a60:	mov	r2, r6
    7a64:	bl	8374 <rb_sha256_process_bytes>
    7a68:	sub	r7, r7, #32
    7a6c:	cmp	r7, #32
    7a70:	bhi	7a58 <rb_sha256_crypt_r+0x1e4>
    7a74:	ldr	r7, [fp, #-452]	; 0xfffffe3c
    7a78:	sub	r0, r7, r8
    7a7c:	sub	r1, r0, #32
    7a80:	sub	r0, fp, #64	; 0x40
    7a84:	sub	r2, fp, #272	; 0x110
    7a88:	bl	8374 <rb_sha256_process_bytes>
    7a8c:	cmp	r7, #0
    7a90:	beq	7ae0 <rb_sha256_crypt_r+0x26c>
    7a94:	sub	r5, fp, #272	; 0x110
    7a98:	mov	r7, #0
    7a9c:	sub	r8, fp, #64	; 0x40
    7aa0:	ldr	r6, [fp, #-452]	; 0xfffffe3c
    7aa4:	tst	r6, #1
    7aa8:	bne	7ad4 <rb_sha256_crypt_r+0x260>
    7aac:	mov	r0, r4
    7ab0:	ldr	r1, [fp, #-452]	; 0xfffffe3c
    7ab4:	mov	r2, r5
    7ab8:	bl	8374 <rb_sha256_process_bytes>
    7abc:	lsr	r0, r6, #1
    7ac0:	cmp	r7, r6, lsr #1
    7ac4:	mov	r6, r0
    7ac8:	beq	7ae0 <rb_sha256_crypt_r+0x26c>
    7acc:	tst	r6, #1
    7ad0:	beq	7aac <rb_sha256_crypt_r+0x238>
    7ad4:	mov	r0, r8
    7ad8:	mov	r1, #32
    7adc:	b	7ab4 <rb_sha256_crypt_r+0x240>
    7ae0:	sub	r0, fp, #272	; 0x110
    7ae4:	sub	r1, fp, #64	; 0x40
    7ae8:	bl	8548 <rb_sha256_finish_ctx>
    7aec:	sub	r0, fp, #448	; 0x1c0
    7af0:	bl	82f8 <rb_sha256_init_ctx>
    7af4:	ldr	r7, [fp, #-452]	; 0xfffffe3c
    7af8:	cmp	r7, #0
    7afc:	beq	7b88 <rb_sha256_crypt_r+0x314>
    7b00:	sub	r5, fp, #448	; 0x1c0
    7b04:	mov	r6, r7
    7b08:	mov	r0, r4
    7b0c:	mov	r1, r7
    7b10:	mov	r2, r5
    7b14:	bl	8374 <rb_sha256_process_bytes>
    7b18:	subs	r6, r6, #1
    7b1c:	bne	7b08 <rb_sha256_crypt_r+0x294>
    7b20:	sub	r0, fp, #448	; 0x1c0
    7b24:	sub	r5, fp, #96	; 0x60
    7b28:	mov	r1, r5
    7b2c:	bl	8548 <rb_sha256_finish_ctx>
    7b30:	add	r0, r7, #7
    7b34:	bic	r0, r0, #7
    7b38:	sub	r2, sp, r0
    7b3c:	mov	sp, r2
    7b40:	cmp	r7, #32
    7b44:	ldr	r6, [fp, #-472]	; 0xfffffe28
    7b48:	str	r2, [fp, #-456]	; 0xfffffe38
    7b4c:	bcc	7bb4 <rb_sha256_crypt_r+0x340>
    7b50:	mov	r0, #0
    7b54:	mov	r1, r5
    7b58:	vld1.64	{d16-d17}, [r1]!
    7b5c:	vld1.64	{d18-d19}, [r1]
    7b60:	sub	r1, r2, r0
    7b64:	vst1.64	{d16-d17}, [r1]!
    7b68:	vst1.64	{d18-d19}, [r1]
    7b6c:	sub	r0, r0, #32
    7b70:	add	r1, r7, r0
    7b74:	cmp	r1, #31
    7b78:	bhi	7b54 <rb_sha256_crypt_r+0x2e0>
    7b7c:	sub	r0, r2, r0
    7b80:	and	r2, r7, #31
    7b84:	b	7bbc <rb_sha256_crypt_r+0x348>
    7b88:	sub	r0, fp, #448	; 0x1c0
    7b8c:	sub	r1, fp, #96	; 0x60
    7b90:	bl	8548 <rb_sha256_finish_ctx>
    7b94:	add	r0, r7, #7
    7b98:	bic	r0, r0, #7
    7b9c:	sub	r0, sp, r0
    7ba0:	mov	sp, r0
    7ba4:	mov	r2, #0
    7ba8:	str	r0, [fp, #-456]	; 0xfffffe38
    7bac:	ldr	r6, [fp, #-472]	; 0xfffffe28
    7bb0:	b	7bbc <rb_sha256_crypt_r+0x348>
    7bb4:	mov	r0, r2
    7bb8:	mov	r2, r7
    7bbc:	str	r9, [fp, #-480]	; 0xfffffe20
    7bc0:	sub	r1, fp, #96	; 0x60
    7bc4:	bl	5120 <memcpy@plt>
    7bc8:	sub	r5, fp, #448	; 0x1c0
    7bcc:	mov	r0, r5
    7bd0:	bl	82f8 <rb_sha256_init_ctx>
    7bd4:	mov	r4, #0
    7bd8:	mov	r0, r6
    7bdc:	mov	r1, sl
    7be0:	mov	r2, r5
    7be4:	bl	8374 <rb_sha256_process_bytes>
    7be8:	add	r4, r4, #1
    7bec:	ldrb	r0, [fp, #-64]	; 0xffffffc0
    7bf0:	add	r0, r0, #16
    7bf4:	cmp	r4, r0
    7bf8:	bcc	7bd8 <rb_sha256_crypt_r+0x364>
    7bfc:	sub	r0, fp, #448	; 0x1c0
    7c00:	sub	r4, fp, #96	; 0x60
    7c04:	mov	r1, r4
    7c08:	bl	8548 <rb_sha256_finish_ctx>
    7c0c:	add	r0, sl, #7
    7c10:	bic	r0, r0, #7
    7c14:	sub	r0, sp, r0
    7c18:	mov	sp, r0
    7c1c:	str	r0, [fp, #-464]	; 0xfffffe30
    7c20:	mov	r1, r4
    7c24:	str	sl, [fp, #-468]	; 0xfffffe2c
    7c28:	mov	r2, sl
    7c2c:	bl	5120 <memcpy@plt>
    7c30:	mov	r5, #0
    7c34:	sub	sl, fp, #272	; 0x110
    7c38:	sub	r8, fp, #64	; 0x40
    7c3c:	b	7c6c <rb_sha256_crypt_r+0x3f8>
    7c40:	ldr	r0, [fp, #-456]	; 0xfffffe38
    7c44:	mov	r1, r6
    7c48:	mov	r2, sl
    7c4c:	bl	8374 <rb_sha256_process_bytes>
    7c50:	mov	r0, sl
    7c54:	mov	r1, r8
    7c58:	bl	8548 <rb_sha256_finish_ctx>
    7c5c:	add	r5, r5, #1
    7c60:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7c64:	cmp	r0, r5
    7c68:	beq	7d14 <rb_sha256_crypt_r+0x4a0>
    7c6c:	mov	r0, sl
    7c70:	bl	82f8 <rb_sha256_init_ctx>
    7c74:	movw	r0, #18725	; 0x4925
    7c78:	movt	r0, #9362	; 0x2492
    7c7c:	umull	r0, r1, r5, r0
    7c80:	sub	r0, r5, r1
    7c84:	add	r7, r1, r0, lsr #1
    7c88:	lsr	r0, r7, #2
    7c8c:	lsl	r6, r0, #3
    7c90:	movw	r0, #43691	; 0xaaab
    7c94:	movt	r0, #43690	; 0xaaaa
    7c98:	umull	r0, r1, r5, r0
    7c9c:	lsr	r0, r1, #1
    7ca0:	add	r9, r0, r0, lsl #1
    7ca4:	ands	r4, r5, #1
    7ca8:	beq	7cb8 <rb_sha256_crypt_r+0x444>
    7cac:	ldr	r0, [fp, #-456]	; 0xfffffe38
    7cb0:	ldr	r1, [fp, #-452]	; 0xfffffe3c
    7cb4:	b	7cc0 <rb_sha256_crypt_r+0x44c>
    7cb8:	mov	r0, r8
    7cbc:	mov	r1, #32
    7cc0:	mov	r2, sl
    7cc4:	bl	8374 <rb_sha256_process_bytes>
    7cc8:	sub	r6, r6, r7, lsr #2
    7ccc:	cmp	r9, r5
    7cd0:	beq	7ce4 <rb_sha256_crypt_r+0x470>
    7cd4:	ldr	r0, [fp, #-464]	; 0xfffffe30
    7cd8:	ldr	r1, [fp, #-468]	; 0xfffffe2c
    7cdc:	mov	r2, sl
    7ce0:	bl	8374 <rb_sha256_process_bytes>
    7ce4:	cmp	r6, r5
    7ce8:	ldr	r6, [fp, #-452]	; 0xfffffe3c
    7cec:	beq	7d00 <rb_sha256_crypt_r+0x48c>
    7cf0:	ldr	r0, [fp, #-456]	; 0xfffffe38
    7cf4:	mov	r1, r6
    7cf8:	mov	r2, sl
    7cfc:	bl	8374 <rb_sha256_process_bytes>
    7d00:	cmp	r4, #0
    7d04:	beq	7c40 <rb_sha256_crypt_r+0x3cc>
    7d08:	mov	r0, r8
    7d0c:	mov	r1, #32
    7d10:	b	7c48 <rb_sha256_crypt_r+0x3d4>
    7d14:	ldr	r4, [fp, #-484]	; 0xfffffe1c
    7d18:	bic	r6, r4, r4, asr #31
    7d1c:	ldr	r9, [fp, #-480]	; 0xfffffe20
    7d20:	mov	r0, r9
    7d24:	mov	r1, #0
    7d28:	mov	r2, r6
    7d2c:	bl	4f58 <memset@plt>
    7d30:	ldr	r1, [pc, #1456]	; 82e8 <rb_sha256_crypt_r+0xa74>
    7d34:	add	r1, pc, r1
    7d38:	mov	r0, r9
    7d3c:	mov	r2, r6
    7d40:	bl	4eb0 <strncpy@plt>
    7d44:	bl	50fc <strlen@plt>
    7d48:	adds	r5, r9, r0
    7d4c:	addeq	r5, r9, r6
    7d50:	sub	r8, r4, #3
    7d54:	ldr	r0, [fp, #-488]	; 0xfffffe18
    7d58:	cmp	r0, #0
    7d5c:	beq	7d94 <rb_sha256_crypt_r+0x520>
    7d60:	sub	sp, sp, #8
    7d64:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7d68:	str	r0, [sp]
    7d6c:	bic	r1, r8, r8, asr #31
    7d70:	ldr	r2, [pc, #1396]	; 82ec <rb_sha256_crypt_r+0xa78>
    7d74:	add	r2, pc, r2
    7d78:	ldr	r3, [pc, #1392]	; 82f0 <rb_sha256_crypt_r+0xa7c>
    7d7c:	add	r3, pc, r3
    7d80:	mov	r0, r5
    7d84:	bl	54c8 <snprintf@plt>
    7d88:	add	sp, sp, #8
    7d8c:	sub	r8, r8, r0
    7d90:	add	r5, r5, r0
    7d94:	ldr	sl, [fp, #-468]	; 0xfffffe2c
    7d98:	mov	r0, r5
    7d9c:	mov	r1, #0
    7da0:	mov	r2, sl
    7da4:	bl	4f58 <memset@plt>
    7da8:	bic	r6, r8, r8, asr #31
    7dac:	cmp	r6, sl
    7db0:	movcs	r6, sl
    7db4:	mov	r0, r5
    7db8:	ldr	r1, [fp, #-472]	; 0xfffffe28
    7dbc:	mov	r2, r6
    7dc0:	bl	4eb0 <strncpy@plt>
    7dc4:	sub	r5, r8, r6
    7dc8:	mov	r0, r9
    7dcc:	bl	50fc <strlen@plt>
    7dd0:	adds	r1, r9, r0
    7dd4:	moveq	r1, sl
    7dd8:	cmp	r5, #1
    7ddc:	movge	r0, #36	; 0x24
    7de0:	strbge	r0, [r1]
    7de4:	subge	r0, r5, #1
    7de8:	cmpge	r0, #1
    7dec:	bge	7ea8 <rb_sha256_crypt_r+0x634>
    7df0:	bl	560c <__errno_location@plt>
    7df4:	mov	r1, #34	; 0x22
    7df8:	str	r1, [r0]
    7dfc:	mov	r9, #0
    7e00:	sub	r5, fp, #272	; 0x110
    7e04:	mov	r0, r5
    7e08:	bl	82f8 <rb_sha256_init_ctx>
    7e0c:	sub	r1, fp, #64	; 0x40
    7e10:	mov	r0, r5
    7e14:	bl	8548 <rb_sha256_finish_ctx>
    7e18:	vmov.i32	q8, #0	; 0x00000000
    7e1c:	sub	r0, fp, #96	; 0x60
    7e20:	vst1.64	{d16-d17}, [r0]!
    7e24:	vst1.64	{d16-d17}, [r0]
    7e28:	ldr	r0, [fp, #-456]	; 0xfffffe38
    7e2c:	mov	r1, #0
    7e30:	ldr	r4, [fp, #-452]	; 0xfffffe3c
    7e34:	mov	r2, r4
    7e38:	bl	4f58 <memset@plt>
    7e3c:	ldr	r0, [fp, #-464]	; 0xfffffe30
    7e40:	mov	r1, #0
    7e44:	mov	r2, sl
    7e48:	bl	4f58 <memset@plt>
    7e4c:	mov	r0, r5
    7e50:	mov	r1, #0
    7e54:	mov	r2, #172	; 0xac
    7e58:	bl	4f58 <memset@plt>
    7e5c:	sub	r0, fp, #448	; 0x1c0
    7e60:	mov	r1, #0
    7e64:	mov	r2, #172	; 0xac
    7e68:	bl	4f58 <memset@plt>
    7e6c:	ldr	r0, [fp, #-476]	; 0xfffffe24
    7e70:	cmp	r0, #0
    7e74:	beq	7e84 <rb_sha256_crypt_r+0x610>
    7e78:	mov	r1, #0
    7e7c:	mov	r2, r4
    7e80:	bl	4f58 <memset@plt>
    7e84:	ldr	r0, [fp, #-492]	; 0xfffffe14
    7e88:	cmp	r0, #0
    7e8c:	beq	7e9c <rb_sha256_crypt_r+0x628>
    7e90:	mov	r1, #0
    7e94:	mov	r2, sl
    7e98:	bl	4f58 <memset@plt>
    7e9c:	mov	r0, r9
    7ea0:	sub	sp, fp, #28
    7ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ea8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
    7eac:	ldrb	r2, [fp, #-54]	; 0xffffffca
    7eb0:	ldrb	r3, [fp, #-44]	; 0xffffffd4
    7eb4:	lsl	r2, r2, #8
    7eb8:	orr	r0, r2, r0, lsl #16
    7ebc:	orr	r7, r0, r3
    7ec0:	add	r2, r1, #1
    7ec4:	mov	r3, #0
    7ec8:	ldr	ip, [pc, #1060]	; 82f4 <rb_sha256_crypt_r+0xa80>
    7ecc:	add	ip, pc, ip
    7ed0:	and	r0, r7, #63	; 0x3f
    7ed4:	ldrb	r0, [ip, r0]
    7ed8:	strb	r0, [r2, -r3]
    7edc:	add	r0, r5, r3
    7ee0:	sub	r6, r0, #2
    7ee4:	sub	r0, r3, #1
    7ee8:	cmp	r6, #1
    7eec:	blt	7f00 <rb_sha256_crypt_r+0x68c>
    7ef0:	lsr	r7, r7, #6
    7ef4:	cmn	r3, #3
    7ef8:	mov	r3, r0
    7efc:	bne	7ed0 <rb_sha256_crypt_r+0x65c>
    7f00:	add	r3, r5, r0
    7f04:	sub	r3, r3, #1
    7f08:	cmp	r3, #1
    7f0c:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    7f10:	ldrb	r3, [fp, #-63]	; 0xffffffc1
    7f14:	ldrb	r7, [fp, #-53]	; 0xffffffcb
    7f18:	ldrb	r6, [fp, #-43]	; 0xffffffd5
    7f1c:	lsl	r3, r3, #8
    7f20:	orr	r3, r3, r6, lsl #16
    7f24:	orr	r7, r3, r7
    7f28:	sub	r6, r5, #2
    7f2c:	mvn	r4, #2
    7f30:	and	r3, r7, #63	; 0x3f
    7f34:	ldrb	r3, [ip, r3]
    7f38:	strb	r3, [r2, -r0]
    7f3c:	add	r3, r6, r0
    7f40:	sub	r0, r0, #1
    7f44:	cmp	r3, #1
    7f48:	blt	7f60 <rb_sha256_crypt_r+0x6ec>
    7f4c:	add	r3, r4, #1
    7f50:	lsr	r7, r7, #6
    7f54:	cmp	r4, #0
    7f58:	mov	r4, r3
    7f5c:	bne	7f30 <rb_sha256_crypt_r+0x6bc>
    7f60:	add	r3, r5, r0
    7f64:	sub	r6, r3, #1
    7f68:	cmp	r6, #1
    7f6c:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    7f70:	sub	r2, r2, r0
    7f74:	sub	r0, r1, r0
    7f78:	add	r1, r0, #1
    7f7c:	ldrb	r0, [fp, #-62]	; 0xffffffc2
    7f80:	ldrb	r3, [fp, #-52]	; 0xffffffcc
    7f84:	ldrb	r7, [fp, #-42]	; 0xffffffd6
    7f88:	lsl	r7, r7, #8
    7f8c:	orr	r3, r7, r3, lsl #16
    7f90:	orr	r3, r3, r0
    7f94:	mvn	r5, #2
    7f98:	and	r0, r3, #63	; 0x3f
    7f9c:	ldrb	r0, [ip, r0]
    7fa0:	strb	r0, [r2], #1
    7fa4:	add	r1, r1, #1
    7fa8:	sub	r6, r6, #1
    7fac:	cmp	r6, #1
    7fb0:	blt	7fc8 <rb_sha256_crypt_r+0x754>
    7fb4:	add	r0, r5, #1
    7fb8:	lsr	r3, r3, #6
    7fbc:	cmp	r5, #0
    7fc0:	mov	r5, r0
    7fc4:	bne	7f98 <rb_sha256_crypt_r+0x724>
    7fc8:	cmp	r6, #1
    7fcc:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    7fd0:	add	r5, r6, #1
    7fd4:	ldrb	r0, [fp, #-61]	; 0xffffffc3
    7fd8:	ldrb	r3, [fp, #-51]	; 0xffffffcd
    7fdc:	ldrb	r7, [fp, #-41]	; 0xffffffd7
    7fe0:	lsl	r3, r3, #8
    7fe4:	orr	r0, r3, r0, lsl #16
    7fe8:	orr	r6, r0, r7
    7fec:	mvn	r4, #2
    7ff0:	and	r0, r6, #63	; 0x3f
    7ff4:	ldrb	r0, [ip, r0]
    7ff8:	strb	r0, [r2], #1
    7ffc:	sub	r3, r5, #1
    8000:	add	r1, r1, #1
    8004:	sub	r0, r5, #2
    8008:	cmp	r0, #1
    800c:	blt	8028 <rb_sha256_crypt_r+0x7b4>
    8010:	add	r0, r4, #1
    8014:	lsr	r6, r6, #6
    8018:	cmp	r4, #0
    801c:	mov	r5, r3
    8020:	mov	r4, r0
    8024:	bne	7ff0 <rb_sha256_crypt_r+0x77c>
    8028:	sub	r0, r3, #1
    802c:	cmp	r0, #1
    8030:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    8034:	ldrb	r0, [fp, #-60]	; 0xffffffc4
    8038:	ldrb	r7, [fp, #-50]	; 0xffffffce
    803c:	ldrb	r6, [fp, #-40]	; 0xffffffd8
    8040:	lsl	r0, r0, #8
    8044:	orr	r0, r0, r6, lsl #16
    8048:	orr	r5, r0, r7
    804c:	mvn	r4, #2
    8050:	and	r0, r5, #63	; 0x3f
    8054:	ldrb	r0, [ip, r0]
    8058:	strb	r0, [r2], #1
    805c:	sub	r6, r3, #1
    8060:	add	r1, r1, #1
    8064:	sub	r0, r3, #2
    8068:	cmp	r0, #1
    806c:	blt	8088 <rb_sha256_crypt_r+0x814>
    8070:	add	r0, r4, #1
    8074:	lsr	r5, r5, #6
    8078:	cmp	r4, #0
    807c:	mov	r3, r6
    8080:	mov	r4, r0
    8084:	bne	8050 <rb_sha256_crypt_r+0x7dc>
    8088:	sub	r0, r6, #1
    808c:	cmp	r0, #1
    8090:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    8094:	rsb	r1, r1, #0
    8098:	ldrb	r0, [fp, #-59]	; 0xffffffc5
    809c:	ldrb	r2, [fp, #-49]	; 0xffffffcf
    80a0:	ldrb	r3, [fp, #-39]	; 0xffffffd9
    80a4:	lsl	r3, r3, #8
    80a8:	orr	r2, r3, r2, lsl #16
    80ac:	orr	r3, r2, r0
    80b0:	mvn	r5, #2
    80b4:	mov	r7, #0
    80b8:	and	r0, r3, #63	; 0x3f
    80bc:	ldrb	r0, [ip, r0]
    80c0:	strb	r0, [r7, -r1]
    80c4:	sub	r1, r1, #1
    80c8:	sub	r2, r6, #1
    80cc:	sub	r0, r6, #2
    80d0:	cmp	r0, #1
    80d4:	blt	80f0 <rb_sha256_crypt_r+0x87c>
    80d8:	add	r0, r5, #1
    80dc:	lsr	r3, r3, #6
    80e0:	cmp	r5, #0
    80e4:	mov	r6, r2
    80e8:	mov	r5, r0
    80ec:	bne	80b8 <rb_sha256_crypt_r+0x844>
    80f0:	sub	r0, r2, #1
    80f4:	cmp	r0, #1
    80f8:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    80fc:	rsb	r1, r1, #0
    8100:	ldrb	r0, [fp, #-58]	; 0xffffffc6
    8104:	ldrb	r3, [fp, #-48]	; 0xffffffd0
    8108:	ldrb	r7, [fp, #-38]	; 0xffffffda
    810c:	lsl	r3, r3, #8
    8110:	orr	r0, r3, r0, lsl #16
    8114:	orr	r6, r0, r7
    8118:	mvn	r7, #2
    811c:	and	r0, r6, #63	; 0x3f
    8120:	ldrb	r0, [ip, r0]
    8124:	strb	r0, [r1], #1
    8128:	sub	r3, r2, #1
    812c:	sub	r0, r2, #2
    8130:	cmp	r0, #1
    8134:	blt	8150 <rb_sha256_crypt_r+0x8dc>
    8138:	add	r0, r7, #1
    813c:	lsr	r6, r6, #6
    8140:	cmp	r7, #0
    8144:	mov	r2, r3
    8148:	mov	r7, r0
    814c:	bne	811c <rb_sha256_crypt_r+0x8a8>
    8150:	sub	r0, r3, #1
    8154:	cmp	r0, #1
    8158:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    815c:	ldrb	r0, [fp, #-57]	; 0xffffffc7
    8160:	ldrb	r2, [fp, #-47]	; 0xffffffd1
    8164:	ldrb	r7, [fp, #-37]	; 0xffffffdb
    8168:	lsl	r0, r0, #8
    816c:	orr	r0, r0, r7, lsl #16
    8170:	orr	r7, r0, r2
    8174:	mvn	r6, #2
    8178:	and	r0, r7, #63	; 0x3f
    817c:	ldrb	r0, [ip, r0]
    8180:	strb	r0, [r1], #1
    8184:	sub	r2, r3, #1
    8188:	sub	r0, r3, #2
    818c:	cmp	r0, #1
    8190:	blt	81ac <rb_sha256_crypt_r+0x938>
    8194:	add	r0, r6, #1
    8198:	lsr	r7, r7, #6
    819c:	cmp	r6, #0
    81a0:	mov	r3, r2
    81a4:	mov	r6, r0
    81a8:	bne	8178 <rb_sha256_crypt_r+0x904>
    81ac:	sub	r0, r2, #1
    81b0:	cmp	r0, #1
    81b4:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    81b8:	ldrb	r0, [fp, #-56]	; 0xffffffc8
    81bc:	ldrb	r3, [fp, #-46]	; 0xffffffd2
    81c0:	ldrb	r7, [fp, #-36]	; 0xffffffdc
    81c4:	lsl	r7, r7, #8
    81c8:	orr	r3, r7, r3, lsl #16
    81cc:	orr	r7, r3, r0
    81d0:	mvn	r6, #2
    81d4:	and	r0, r7, #63	; 0x3f
    81d8:	ldrb	r0, [ip, r0]
    81dc:	strb	r0, [r1], #1
    81e0:	sub	r3, r2, #1
    81e4:	sub	r0, r2, #2
    81e8:	cmp	r0, #1
    81ec:	blt	8208 <rb_sha256_crypt_r+0x994>
    81f0:	add	r0, r6, #1
    81f4:	lsr	r7, r7, #6
    81f8:	cmp	r6, #0
    81fc:	mov	r2, r3
    8200:	mov	r6, r0
    8204:	bne	81d4 <rb_sha256_crypt_r+0x960>
    8208:	sub	r0, r3, #1
    820c:	cmp	r0, #1
    8210:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    8214:	ldrb	r0, [fp, #-55]	; 0xffffffc9
    8218:	ldrb	r2, [fp, #-45]	; 0xffffffd3
    821c:	ldrb	r7, [fp, #-35]	; 0xffffffdd
    8220:	lsl	r2, r2, #8
    8224:	orr	r0, r2, r0, lsl #16
    8228:	orr	r7, r0, r7
    822c:	mvn	r6, #2
    8230:	and	r0, r7, #63	; 0x3f
    8234:	ldrb	r0, [ip, r0]
    8238:	strb	r0, [r1], #1
    823c:	sub	r2, r3, #1
    8240:	sub	r0, r3, #2
    8244:	cmp	r0, #1
    8248:	blt	8264 <rb_sha256_crypt_r+0x9f0>
    824c:	add	r0, r6, #1
    8250:	lsr	r7, r7, #6
    8254:	cmp	r6, #0
    8258:	mov	r3, r2
    825c:	mov	r6, r0
    8260:	bne	8230 <rb_sha256_crypt_r+0x9bc>
    8264:	sub	r0, r2, #1
    8268:	cmp	r0, #1
    826c:	blt	7df0 <rb_sha256_crypt_r+0x57c>
    8270:	ldrb	r0, [fp, #-34]	; 0xffffffde
    8274:	ldrb	r3, [fp, #-33]	; 0xffffffdf
    8278:	orr	r3, r0, r3, lsl #8
    827c:	mvn	r7, #1
    8280:	and	r0, r3, #63	; 0x3f
    8284:	ldrb	r0, [ip, r0]
    8288:	strb	r0, [r1], #1
    828c:	sub	r0, r2, #1
    8290:	sub	r2, r2, #2
    8294:	cmp	r2, #1
    8298:	blt	82b4 <rb_sha256_crypt_r+0xa40>
    829c:	add	r6, r7, #1
    82a0:	lsr	r3, r3, #6
    82a4:	cmp	r7, #0
    82a8:	mov	r2, r0
    82ac:	mov	r7, r6
    82b0:	bne	8280 <rb_sha256_crypt_r+0xa0c>
    82b4:	cmp	r0, #1
    82b8:	ble	7df0 <rb_sha256_crypt_r+0x57c>
    82bc:	mov	r0, #0
    82c0:	strb	r0, [r1]
    82c4:	b	7e00 <rb_sha256_crypt_r+0x58c>
    82c8:	mov	r0, #0
    82cc:	str	r0, [fp, #-488]	; 0xfffffe18
    82d0:	movw	r0, #5000	; 0x1388
    82d4:	str	r0, [fp, #-460]	; 0xfffffe34
    82d8:	b	7920 <rb_sha256_crypt_r+0xac>
    82dc:	.word	0x0000d954
    82e0:	.word	0x0000d940
    82e4:	.word	0x0000d58e
    82e8:	.word	0x0000d4b4
    82ec:	.word	0x0000d140
    82f0:	.word	0x0000d470
    82f4:	.word	0x0000cfa3

000082f8 <rb_sha256_init_ctx>:
    82f8:	push	{r4, r5, r6, r7, fp, lr}
    82fc:	add	fp, sp, #16
    8300:	mov	r1, #0
    8304:	str	r1, [r0, #36]	; 0x24
    8308:	movw	ip, #52505	; 0xcd19
    830c:	movt	ip, #23520	; 0x5be0
    8310:	movw	lr, #55723	; 0xd9ab
    8314:	movt	lr, #8067	; 0x1f83
    8318:	movw	r2, #26764	; 0x688c
    831c:	movt	r2, #39685	; 0x9b05
    8320:	movw	r3, #21119	; 0x527f
    8324:	movt	r3, #20750	; 0x510e
    8328:	movw	r4, #62778	; 0xf53a
    832c:	movt	r4, #42319	; 0xa54f
    8330:	movw	r5, #62322	; 0xf372
    8334:	movt	r5, #15470	; 0x3c6e
    8338:	movw	r6, #44677	; 0xae85
    833c:	movt	r6, #47975	; 0xbb67
    8340:	movw	r7, #58983	; 0xe667
    8344:	movt	r7, #27145	; 0x6a09
    8348:	str	r7, [r0]
    834c:	str	r6, [r0, #4]
    8350:	str	r5, [r0, #8]
    8354:	str	r4, [r0, #12]
    8358:	str	r3, [r0, #16]
    835c:	str	r2, [r0, #20]
    8360:	str	lr, [r0, #24]
    8364:	str	ip, [r0, #28]
    8368:	str	r1, [r0, #40]	; 0x28
    836c:	str	r1, [r0, #32]
    8370:	pop	{r4, r5, r6, r7, fp, pc}

00008374 <rb_sha256_process_bytes>:
    8374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8378:	add	fp, sp, #28
    837c:	sub	sp, sp, #12
    8380:	mov	r4, r2
    8384:	mov	r8, r1
    8388:	mov	r6, r0
    838c:	ldr	r5, [r2, #40]	; 0x28
    8390:	cmp	r5, #0
    8394:	beq	8408 <rb_sha256_process_bytes+0x94>
    8398:	rsb	r7, r5, #128	; 0x80
    839c:	cmp	r7, r8
    83a0:	movhi	r7, r8
    83a4:	add	r0, r4, r5
    83a8:	add	r0, r0, #44	; 0x2c
    83ac:	mov	r1, r6
    83b0:	mov	r2, r7
    83b4:	bl	5120 <memcpy@plt>
    83b8:	ldr	r0, [r4, #40]	; 0x28
    83bc:	add	r0, r0, r7
    83c0:	str	r0, [r4, #40]	; 0x28
    83c4:	cmp	r0, #65	; 0x41
    83c8:	bcc	8400 <rb_sha256_process_bytes+0x8c>
    83cc:	add	r9, r4, #44	; 0x2c
    83d0:	bic	r1, r0, #63	; 0x3f
    83d4:	mov	r0, r9
    83d8:	mov	r2, r4
    83dc:	bl	8628 <rb_sha256_process_block>
    83e0:	ldr	r0, [r4, #40]	; 0x28
    83e4:	and	r2, r0, #63	; 0x3f
    83e8:	str	r2, [r4, #40]	; 0x28
    83ec:	add	r0, r7, r5
    83f0:	bic	r0, r0, #63	; 0x3f
    83f4:	add	r1, r9, r0
    83f8:	mov	r0, r9
    83fc:	bl	5120 <memcpy@plt>
    8400:	sub	r8, r8, r7
    8404:	add	r6, r6, r7
    8408:	cmp	r8, #64	; 0x40
    840c:	bcc	84ac <rb_sha256_process_bytes+0x138>
    8410:	tst	r6, #3
    8414:	beq	84c0 <rb_sha256_process_bytes+0x14c>
    8418:	cmp	r8, #65	; 0x41
    841c:	bcc	84e8 <rb_sha256_process_bytes+0x174>
    8420:	add	r5, r4, #44	; 0x2c
    8424:	sub	r0, r8, #65	; 0x41
    8428:	bic	r0, r0, #63	; 0x3f
    842c:	str	r0, [sp, #4]
    8430:	add	sl, r5, #32
    8434:	add	r9, r5, #16
    8438:	str	r8, [sp, #8]
    843c:	mov	r7, r6
    8440:	mov	r0, #64	; 0x40
    8444:	vld1.8	{d16-d17}, [r7], r0
    8448:	add	r0, r6, #32
    844c:	add	r1, r6, #48	; 0x30
    8450:	vld1.8	{d18-d19}, [r1]
    8454:	vld1.8	{d20-d21}, [r0]
    8458:	mov	r0, r5
    845c:	mov	r1, #48	; 0x30
    8460:	vst1.8	{d16-d17}, [r0], r1
    8464:	add	r1, r6, #16
    8468:	vld1.8	{d16-d17}, [r1]
    846c:	vst1.8	{d18-d19}, [r0]
    8470:	vst1.8	{d20-d21}, [sl]
    8474:	vst1.8	{d16-d17}, [r9]
    8478:	mov	r0, r5
    847c:	mov	r1, #64	; 0x40
    8480:	mov	r2, r4
    8484:	bl	8628 <rb_sha256_process_block>
    8488:	sub	r8, r8, #64	; 0x40
    848c:	cmp	r8, #64	; 0x40
    8490:	mov	r6, r7
    8494:	bhi	8440 <rb_sha256_process_bytes+0xcc>
    8498:	ldr	r0, [sp, #8]
    849c:	ldr	r1, [sp, #4]
    84a0:	sub	r0, r0, r1
    84a4:	sub	r8, r0, #64	; 0x40
    84a8:	b	84f0 <rb_sha256_process_bytes+0x17c>
    84ac:	mov	r7, r6
    84b0:	cmp	r8, #0
    84b4:	bne	84f0 <rb_sha256_process_bytes+0x17c>
    84b8:	sub	sp, fp, #28
    84bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84c0:	bic	r5, r8, #63	; 0x3f
    84c4:	mov	r0, r6
    84c8:	mov	r1, r5
    84cc:	mov	r2, r4
    84d0:	bl	8628 <rb_sha256_process_block>
    84d4:	add	r7, r6, r5
    84d8:	and	r8, r8, #63	; 0x3f
    84dc:	cmp	r8, #0
    84e0:	bne	84f0 <rb_sha256_process_bytes+0x17c>
    84e4:	b	84b8 <rb_sha256_process_bytes+0x144>
    84e8:	mov	r7, r6
    84ec:	mov	r8, #64	; 0x40
    84f0:	ldr	r5, [r4, #40]	; 0x28
    84f4:	add	r0, r4, r5
    84f8:	add	r0, r0, #44	; 0x2c
    84fc:	mov	r1, r7
    8500:	mov	r2, r8
    8504:	bl	5120 <memcpy@plt>
    8508:	add	r5, r5, r8
    850c:	cmp	r5, #64	; 0x40
    8510:	bcc	853c <rb_sha256_process_bytes+0x1c8>
    8514:	add	r6, r4, #44	; 0x2c
    8518:	mov	r0, r6
    851c:	mov	r1, #64	; 0x40
    8520:	mov	r2, r4
    8524:	bl	8628 <rb_sha256_process_block>
    8528:	add	r1, r4, #108	; 0x6c
    852c:	sub	r5, r5, #64	; 0x40
    8530:	mov	r0, r6
    8534:	mov	r2, r5
    8538:	bl	5120 <memcpy@plt>
    853c:	str	r5, [r4, #40]	; 0x28
    8540:	sub	sp, fp, #28
    8544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008548 <rb_sha256_finish_ctx>:
    8548:	push	{r4, r5, r6, r7, fp, lr}
    854c:	add	fp, sp, #16
    8550:	mov	r4, r1
    8554:	mov	r5, r0
    8558:	ldr	r0, [r0, #32]
    855c:	ldr	r1, [r5, #40]	; 0x28
    8560:	adds	r0, r0, r1
    8564:	str	r0, [r5, #32]
    8568:	bcc	8578 <rb_sha256_finish_ctx+0x30>
    856c:	ldr	r0, [r5, #36]	; 0x24
    8570:	add	r0, r0, #1
    8574:	str	r0, [r5, #36]	; 0x24
    8578:	add	r6, r5, #44	; 0x2c
    857c:	add	r0, r6, r1
    8580:	mov	r7, #56	; 0x38
    8584:	cmp	r1, #55	; 0x37
    8588:	movwhi	r7, #120	; 0x78
    858c:	sub	r2, r7, r1
    8590:	ldr	r1, [pc, #140]	; 8624 <rb_sha256_finish_ctx+0xdc>
    8594:	add	r1, pc, r1
    8598:	bl	5120 <memcpy@plt>
    859c:	ldr	r0, [r5, #32]
    85a0:	mov	r1, #65280	; 0xff00
    85a4:	and	r2, r1, r0, lsr #5
    85a8:	lsl	r3, r0, #11
    85ac:	uxtb16	r3, r3
    85b0:	orr	r3, r3, r0, lsl #27
    85b4:	orr	r2, r3, r2
    85b8:	ubfx	r3, r0, #21, #8
    85bc:	orr	r2, r2, r3
    85c0:	orr	r3, r7, #4
    85c4:	str	r2, [r6, r3]
    85c8:	ldr	r2, [r5, #36]	; 0x24
    85cc:	movw	r3, #8160	; 0x1fe0
    85d0:	and	r3, r2, r3
    85d4:	and	r1, r1, r2, lsr #5
    85d8:	orr	r1, r1, r3, lsl #11
    85dc:	ubfx	r3, r2, #21, #8
    85e0:	orr	r1, r1, r3
    85e4:	lsl	r2, r2, #3
    85e8:	orr	r0, r2, r0, lsr #29
    85ec:	orr	r0, r1, r0, lsl #24
    85f0:	str	r0, [r6, r7]
    85f4:	add	r1, r7, #8
    85f8:	mov	r0, r6
    85fc:	mov	r2, r5
    8600:	bl	8628 <rb_sha256_process_block>
    8604:	mov	r0, #0
    8608:	ldr	r1, [r5, r0, lsl #2]
    860c:	rev	r1, r1
    8610:	str	r1, [r4, r0, lsl #2]
    8614:	add	r0, r0, #1
    8618:	cmp	r0, #8
    861c:	bne	8608 <rb_sha256_finish_ctx+0xc0>
    8620:	pop	{r4, r5, r6, r7, fp, pc}
    8624:	.word	0x0000cd64

00008628 <rb_sha256_process_block>:
    8628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    862c:	add	fp, sp, #28
    8630:	sub	sp, sp, #304	; 0x130
    8634:	mov	r4, r0
    8638:	ldr	r0, [r2, #32]
    863c:	adds	r0, r0, r1
    8640:	str	r0, [r2, #32]
    8644:	lsr	r5, r1, #2
    8648:	ldr	r8, [r2]
    864c:	ldr	r0, [r2, #4]
    8650:	str	r0, [sp, #40]	; 0x28
    8654:	ldr	lr, [r2, #8]
    8658:	add	ip, r2, #12
    865c:	ldm	ip, {r0, r9, ip}
    8660:	ldr	r1, [r2, #24]
    8664:	ldr	sl, [r2, #28]
    8668:	bcc	8688 <rb_sha256_process_block+0x60>
    866c:	mov	r3, r0
    8670:	mov	r0, r1
    8674:	ldr	r1, [r2, #36]	; 0x24
    8678:	add	r1, r1, #1
    867c:	str	r1, [r2, #36]	; 0x24
    8680:	mov	r1, r0
    8684:	mov	r0, r3
    8688:	str	r2, [sp]
    868c:	cmp	r5, #0
    8690:	beq	8838 <rb_sha256_process_block+0x210>
    8694:	add	r6, sp, #44	; 0x2c
    8698:	str	r5, [sp, #4]
    869c:	mov	r2, #0
    86a0:	ldr	r3, [r4, -r2]
    86a4:	rev	r3, r3
    86a8:	str	r3, [r6, -r2]
    86ac:	sub	r2, r2, #4
    86b0:	cmn	r2, #64	; 0x40
    86b4:	bne	86a0 <rb_sha256_process_block+0x78>
    86b8:	sub	r4, r4, r2
    86bc:	str	r4, [sp, #8]
    86c0:	mov	r2, #0
    86c4:	add	r3, sp, #44	; 0x2c
    86c8:	mov	r4, r3
    86cc:	ldr	r3, [r3, r2]
    86d0:	add	r7, r4, r2
    86d4:	ldr	r6, [r7, #4]
    86d8:	ldr	r5, [r7, #36]	; 0x24
    86dc:	ldr	r4, [r7, #56]	; 0x38
    86e0:	add	r3, r3, r5
    86e4:	ror	r5, r4, #19
    86e8:	eor	r5, r5, r4, lsr #10
    86ec:	eor	r5, r5, r4, ror #17
    86f0:	add	r3, r3, r5
    86f4:	ror	r5, r6, #18
    86f8:	eor	r5, r5, r6, lsr #3
    86fc:	eor	r6, r5, r6, ror #7
    8700:	add	r3, r3, r6
    8704:	str	r3, [r7, #64]	; 0x40
    8708:	add	r2, r2, #4
    870c:	cmp	r2, #192	; 0xc0
    8710:	bne	86c4 <rb_sha256_process_block+0x9c>
    8714:	mov	r2, #0
    8718:	str	r8, [sp, #12]
    871c:	ldr	r6, [sp, #40]	; 0x28
    8720:	str	lr, [sp, #16]
    8724:	str	r0, [sp, #20]
    8728:	mov	r7, r0
    872c:	str	r9, [sp, #24]
    8730:	str	ip, [sp, #28]
    8734:	str	r1, [sp, #32]
    8738:	mov	r3, r1
    873c:	str	sl, [sp, #36]	; 0x24
    8740:	mov	r4, r3
    8744:	mov	r3, ip
    8748:	mov	ip, r9
    874c:	mov	r5, lr
    8750:	mov	lr, r6
    8754:	mov	r6, r8
    8758:	and	r1, lr, r5
    875c:	eor	r0, lr, r5
    8760:	and	r0, r8, r0
    8764:	eor	r0, r0, r1
    8768:	ror	r1, r8, #2
    876c:	eor	r1, r1, r8, ror #13
    8770:	eor	r1, r1, r8, ror #22
    8774:	add	r8, r1, r0
    8778:	bic	r1, r4, r9
    877c:	and	r0, r9, r3
    8780:	orr	r0, r0, r1
    8784:	add	r0, r0, sl
    8788:	ror	r1, r9, #6
    878c:	eor	r1, r1, r9, ror #11
    8790:	eor	r1, r1, r9, ror #25
    8794:	add	r0, r0, r1
    8798:	ldr	r1, [pc, #196]	; 8864 <rb_sha256_process_block+0x23c>
    879c:	add	r1, pc, r1
    87a0:	ldr	r1, [r1, r2, lsl #2]
    87a4:	add	r0, r0, r1
    87a8:	add	r1, sp, #44	; 0x2c
    87ac:	ldr	r1, [r1, r2, lsl #2]
    87b0:	add	r0, r0, r1
    87b4:	add	r8, r8, r0
    87b8:	add	r9, r0, r7
    87bc:	add	r2, r2, #1
    87c0:	cmp	r2, #64	; 0x40
    87c4:	mov	r7, r5
    87c8:	mov	sl, r4
    87cc:	bne	8740 <rb_sha256_process_block+0x118>
    87d0:	ldr	sl, [sp, #36]	; 0x24
    87d4:	add	sl, r4, sl
    87d8:	ldr	r1, [sp, #32]
    87dc:	add	r1, r3, r1
    87e0:	ldr	r0, [sp, #28]
    87e4:	add	r0, ip, r0
    87e8:	mov	ip, r0
    87ec:	ldr	r0, [sp, #24]
    87f0:	add	r0, r9, r0
    87f4:	mov	r9, r0
    87f8:	ldr	r0, [sp, #20]
    87fc:	add	r0, r5, r0
    8800:	ldr	r2, [sp, #16]
    8804:	add	r2, lr, r2
    8808:	mov	lr, r2
    880c:	ldr	r2, [sp, #40]	; 0x28
    8810:	add	r2, r6, r2
    8814:	str	r2, [sp, #40]	; 0x28
    8818:	ldr	r2, [sp, #12]
    881c:	add	r2, r8, r2
    8820:	mov	r8, r2
    8824:	ldr	r5, [sp, #4]
    8828:	subs	r5, r5, #16
    882c:	ldr	r4, [sp, #8]
    8830:	add	r6, sp, #44	; 0x2c
    8834:	bne	8698 <rb_sha256_process_block+0x70>
    8838:	mov	r2, r0
    883c:	ldr	r0, [sp]
    8840:	str	r8, [r0]
    8844:	ldr	r3, [sp, #40]	; 0x28
    8848:	stmib	r0, {r3, lr}
    884c:	add	r3, r0, #12
    8850:	stm	r3, {r2, r9, ip}
    8854:	str	r1, [r0, #24]
    8858:	str	sl, [r0, #28]
    885c:	sub	sp, fp, #28
    8860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8864:	.word	0x0000ca58

00008868 <rb_sha512_crypt_r>:
    8868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    886c:	add	fp, sp, #28
    8870:	sub	sp, sp, #868	; 0x364
    8874:	str	r3, [fp, #-888]	; 0xfffffc88
    8878:	mov	r6, r2
    887c:	mov	r4, r1
    8880:	mov	sl, r0
    8884:	ldr	r0, [pc, #3712]	; 970c <rb_sha512_crypt_r+0xea4>
    8888:	add	r0, pc, r0
    888c:	mov	r2, #3
    8890:	bl	5528 <strncmp@plt>
    8894:	cmp	r0, #0
    8898:	addeq	r4, r4, #3
    889c:	ldr	r1, [pc, #3692]	; 9710 <rb_sha512_crypt_r+0xea8>
    88a0:	add	r1, pc, r1
    88a4:	mov	r0, r4
    88a8:	mov	r2, #7
    88ac:	bl	5528 <strncmp@plt>
    88b0:	mov	r5, #0
    88b4:	movw	r1, #5000	; 0x1388
    88b8:	str	r1, [fp, #-860]	; 0xfffffca4
    88bc:	cmp	r0, #0
    88c0:	beq	88cc <rb_sha512_crypt_r+0x64>
    88c4:	mov	r0, #0
    88c8:	b	8910 <rb_sha512_crypt_r+0xa8>
    88cc:	add	r0, r4, #7
    88d0:	sub	r1, fp, #504	; 0x1f8
    88d4:	mov	r2, #10
    88d8:	bl	5114 <strtoul@plt>
    88dc:	ldr	r1, [fp, #-504]	; 0xfffffe08
    88e0:	ldrb	r2, [r1]
    88e4:	cmp	r2, #36	; 0x24
    88e8:	bne	96f8 <rb_sha512_crypt_r+0xe90>
    88ec:	movw	r2, #51711	; 0xc9ff
    88f0:	movt	r2, #15258	; 0x3b9a
    88f4:	cmp	r0, r2
    88f8:	movcc	r2, r0
    88fc:	cmp	r2, #1000	; 0x3e8
    8900:	movls	r2, #1000	; 0x3e8
    8904:	str	r2, [fp, #-860]	; 0xfffffca4
    8908:	add	r4, r1, #1
    890c:	mov	r0, #1
    8910:	str	r0, [fp, #-892]	; 0xfffffc84
    8914:	ldr	r1, [pc, #3576]	; 9714 <rb_sha512_crypt_r+0xeac>
    8918:	add	r1, pc, r1
    891c:	mov	r0, r4
    8920:	bl	54f8 <strcspn@plt>
    8924:	mov	r9, r0
    8928:	cmp	r0, #16
    892c:	movcs	r9, #16
    8930:	mov	r0, sl
    8934:	bl	50fc <strlen@plt>
    8938:	mov	r8, r0
    893c:	tst	sl, #7
    8940:	beq	896c <rb_sha512_crypt_r+0x104>
    8944:	add	r0, r8, #15
    8948:	bic	r0, r0, #7
    894c:	sub	r0, sp, r0
    8950:	add	r5, r0, #8
    8954:	mov	sp, r0
    8958:	mov	r0, r5
    895c:	mov	r1, sl
    8960:	mov	r2, r8
    8964:	bl	5120 <memcpy@plt>
    8968:	mov	sl, r5
    896c:	tst	r4, #7
    8970:	str	r6, [fp, #-876]	; 0xfffffc94
    8974:	str	r5, [fp, #-880]	; 0xfffffc90
    8978:	beq	89ac <rb_sha512_crypt_r+0x144>
    897c:	add	r0, r9, #15
    8980:	bic	r0, r0, #7
    8984:	sub	r0, sp, r0
    8988:	add	r5, r0, #8
    898c:	mov	sp, r0
    8990:	mov	r0, r5
    8994:	mov	r1, r4
    8998:	mov	r2, r9
    899c:	bl	5120 <memcpy@plt>
    89a0:	str	r5, [fp, #-884]	; 0xfffffc8c
    89a4:	mov	r4, r5
    89a8:	b	89b4 <rb_sha512_crypt_r+0x14c>
    89ac:	mov	r0, #0
    89b0:	str	r0, [fp, #-884]	; 0xfffffc8c
    89b4:	sub	r5, fp, #504	; 0x1f8
    89b8:	mov	r0, r5
    89bc:	bl	9728 <rb_sha512_init_ctx>
    89c0:	mov	r0, sl
    89c4:	mov	r1, r8
    89c8:	mov	r2, r5
    89cc:	bl	97fc <rb_sha512_process_bytes>
    89d0:	mov	r0, r4
    89d4:	mov	r1, r9
    89d8:	mov	r2, r5
    89dc:	bl	97fc <rb_sha512_process_bytes>
    89e0:	sub	r5, fp, #848	; 0x350
    89e4:	mov	r0, r5
    89e8:	bl	9728 <rb_sha512_init_ctx>
    89ec:	mov	r0, sl
    89f0:	mov	r1, r8
    89f4:	mov	r2, r5
    89f8:	bl	97fc <rb_sha512_process_bytes>
    89fc:	str	r4, [fp, #-872]	; 0xfffffc98
    8a00:	mov	r0, r4
    8a04:	mov	r1, r9
    8a08:	mov	r2, r5
    8a0c:	bl	97fc <rb_sha512_process_bytes>
    8a10:	mov	r0, sl
    8a14:	mov	r1, r8
    8a18:	mov	r2, r5
    8a1c:	bl	97fc <rb_sha512_process_bytes>
    8a20:	sub	r1, fp, #96	; 0x60
    8a24:	mov	r0, r5
    8a28:	bl	9998 <rb_sha512_finish_ctx>
    8a2c:	cmp	r8, #65	; 0x41
    8a30:	mov	r1, r8
    8a34:	bcc	8a70 <rb_sha512_crypt_r+0x208>
    8a38:	sub	r0, r8, #65	; 0x41
    8a3c:	bic	r4, r0, #63	; 0x3f
    8a40:	sub	r5, fp, #96	; 0x60
    8a44:	sub	r6, fp, #504	; 0x1f8
    8a48:	mov	r7, r8
    8a4c:	mov	r0, r5
    8a50:	mov	r1, #64	; 0x40
    8a54:	mov	r2, r6
    8a58:	bl	97fc <rb_sha512_process_bytes>
    8a5c:	sub	r7, r7, #64	; 0x40
    8a60:	cmp	r7, #64	; 0x40
    8a64:	bhi	8a4c <rb_sha512_crypt_r+0x1e4>
    8a68:	sub	r0, r8, r4
    8a6c:	sub	r1, r0, #64	; 0x40
    8a70:	sub	r0, fp, #96	; 0x60
    8a74:	sub	r2, fp, #504	; 0x1f8
    8a78:	bl	97fc <rb_sha512_process_bytes>
    8a7c:	cmp	r8, #0
    8a80:	beq	8ac0 <rb_sha512_crypt_r+0x258>
    8a84:	sub	r5, fp, #504	; 0x1f8
    8a88:	mov	r7, #0
    8a8c:	sub	r4, fp, #96	; 0x60
    8a90:	mov	r6, r8
    8a94:	tst	r6, #1
    8a98:	moveq	r0, sl
    8a9c:	moveq	r1, r8
    8aa0:	movne	r0, r4
    8aa4:	movne	r1, #64	; 0x40
    8aa8:	mov	r2, r5
    8aac:	bl	97fc <rb_sha512_process_bytes>
    8ab0:	lsr	r0, r6, #1
    8ab4:	cmp	r7, r6, lsr #1
    8ab8:	mov	r6, r0
    8abc:	bne	8a94 <rb_sha512_crypt_r+0x22c>
    8ac0:	sub	r0, fp, #504	; 0x1f8
    8ac4:	sub	r1, fp, #96	; 0x60
    8ac8:	bl	9998 <rb_sha512_finish_ctx>
    8acc:	sub	r0, fp, #848	; 0x350
    8ad0:	bl	9728 <rb_sha512_init_ctx>
    8ad4:	cmp	r8, #0
    8ad8:	beq	8b84 <rb_sha512_crypt_r+0x31c>
    8adc:	sub	r5, fp, #848	; 0x350
    8ae0:	mov	r6, r8
    8ae4:	mov	r0, sl
    8ae8:	mov	r1, r8
    8aec:	mov	r2, r5
    8af0:	bl	97fc <rb_sha512_process_bytes>
    8af4:	subs	r6, r6, #1
    8af8:	bne	8ae4 <rb_sha512_crypt_r+0x27c>
    8afc:	sub	r0, fp, #848	; 0x350
    8b00:	sub	sl, fp, #160	; 0xa0
    8b04:	mov	r1, sl
    8b08:	bl	9998 <rb_sha512_finish_ctx>
    8b0c:	add	r0, r8, #7
    8b10:	bic	r0, r0, #7
    8b14:	sub	r4, sp, r0
    8b18:	mov	sp, r4
    8b1c:	cmp	r8, #64	; 0x40
    8b20:	str	r4, [fp, #-856]	; 0xfffffca8
    8b24:	bcc	8bac <rb_sha512_crypt_r+0x344>
    8b28:	mov	r0, #0
    8b2c:	add	r1, sl, #32
    8b30:	mov	r2, #48	; 0x30
    8b34:	add	r3, sl, #16
    8b38:	sub	r7, r4, r0
    8b3c:	mov	r5, sl
    8b40:	vld1.64	{d16-d17}, [r5], r2
    8b44:	vld1.64	{d18-d19}, [r1]
    8b48:	add	r6, r7, #32
    8b4c:	vld1.64	{d20-d21}, [r3]
    8b50:	vld1.64	{d22-d23}, [r5]
    8b54:	vst1.64	{d18-d19}, [r6]
    8b58:	add	r6, r7, #16
    8b5c:	vst1.64	{d20-d21}, [r6]
    8b60:	vst1.64	{d16-d17}, [r7], r2
    8b64:	vst1.64	{d22-d23}, [r7]
    8b68:	sub	r0, r0, #64	; 0x40
    8b6c:	add	r7, r8, r0
    8b70:	cmp	r7, #63	; 0x3f
    8b74:	bhi	8b38 <rb_sha512_crypt_r+0x2d0>
    8b78:	sub	r0, r4, r0
    8b7c:	and	r2, r8, #63	; 0x3f
    8b80:	b	8bb4 <rb_sha512_crypt_r+0x34c>
    8b84:	sub	r0, fp, #848	; 0x350
    8b88:	sub	r1, fp, #160	; 0xa0
    8b8c:	bl	9998 <rb_sha512_finish_ctx>
    8b90:	add	r0, r8, #7
    8b94:	bic	r0, r0, #7
    8b98:	sub	r0, sp, r0
    8b9c:	mov	sp, r0
    8ba0:	mov	r2, #0
    8ba4:	str	r0, [fp, #-856]	; 0xfffffca8
    8ba8:	b	8bb4 <rb_sha512_crypt_r+0x34c>
    8bac:	mov	r0, r4
    8bb0:	mov	r2, r8
    8bb4:	ldr	r6, [fp, #-872]	; 0xfffffc98
    8bb8:	str	r8, [fp, #-852]	; 0xfffffcac
    8bbc:	sub	r1, fp, #160	; 0xa0
    8bc0:	bl	5120 <memcpy@plt>
    8bc4:	sub	r5, fp, #848	; 0x350
    8bc8:	mov	r0, r5
    8bcc:	bl	9728 <rb_sha512_init_ctx>
    8bd0:	mov	r4, #0
    8bd4:	mov	r0, r6
    8bd8:	mov	r1, r9
    8bdc:	mov	r2, r5
    8be0:	bl	97fc <rb_sha512_process_bytes>
    8be4:	add	r4, r4, #1
    8be8:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    8bec:	add	r0, r0, #16
    8bf0:	cmp	r4, r0
    8bf4:	bcc	8bd4 <rb_sha512_crypt_r+0x36c>
    8bf8:	sub	r0, fp, #848	; 0x350
    8bfc:	sub	r4, fp, #160	; 0xa0
    8c00:	mov	r1, r4
    8c04:	bl	9998 <rb_sha512_finish_ctx>
    8c08:	add	r0, r9, #7
    8c0c:	bic	r0, r0, #7
    8c10:	sub	r0, sp, r0
    8c14:	mov	sp, r0
    8c18:	str	r0, [fp, #-868]	; 0xfffffc9c
    8c1c:	mov	r1, r4
    8c20:	str	r9, [fp, #-864]	; 0xfffffca0
    8c24:	mov	r2, r9
    8c28:	bl	5120 <memcpy@plt>
    8c2c:	mov	r5, #0
    8c30:	sub	sl, fp, #504	; 0x1f8
    8c34:	sub	r8, fp, #96	; 0x60
    8c38:	b	8c68 <rb_sha512_crypt_r+0x400>
    8c3c:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8c40:	ldr	r1, [fp, #-852]	; 0xfffffcac
    8c44:	mov	r2, sl
    8c48:	bl	97fc <rb_sha512_process_bytes>
    8c4c:	mov	r0, sl
    8c50:	mov	r1, r8
    8c54:	bl	9998 <rb_sha512_finish_ctx>
    8c58:	add	r5, r5, #1
    8c5c:	ldr	r0, [fp, #-860]	; 0xfffffca4
    8c60:	cmp	r0, r5
    8c64:	beq	8d20 <rb_sha512_crypt_r+0x4b8>
    8c68:	mov	r0, sl
    8c6c:	bl	9728 <rb_sha512_init_ctx>
    8c70:	movw	r0, #18725	; 0x4925
    8c74:	movt	r0, #9362	; 0x2492
    8c78:	umull	r0, r1, r5, r0
    8c7c:	sub	r0, r5, r1
    8c80:	add	r9, r1, r0, lsr #1
    8c84:	lsr	r0, r9, #2
    8c88:	lsl	r6, r0, #3
    8c8c:	movw	r0, #43691	; 0xaaab
    8c90:	movt	r0, #43690	; 0xaaaa
    8c94:	umull	r0, r1, r5, r0
    8c98:	lsr	r0, r1, #1
    8c9c:	add	r4, r0, r0, lsl #1
    8ca0:	ands	r7, r5, #1
    8ca4:	beq	8cb4 <rb_sha512_crypt_r+0x44c>
    8ca8:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8cac:	ldr	r1, [fp, #-852]	; 0xfffffcac
    8cb0:	b	8cbc <rb_sha512_crypt_r+0x454>
    8cb4:	mov	r0, r8
    8cb8:	mov	r1, #64	; 0x40
    8cbc:	mov	r2, sl
    8cc0:	bl	97fc <rb_sha512_process_bytes>
    8cc4:	sub	r6, r6, r9, lsr #2
    8cc8:	cmp	r4, r5
    8ccc:	bne	8ce4 <rb_sha512_crypt_r+0x47c>
    8cd0:	cmp	r6, r5
    8cd4:	bne	8cfc <rb_sha512_crypt_r+0x494>
    8cd8:	cmp	r7, #0
    8cdc:	beq	8c3c <rb_sha512_crypt_r+0x3d4>
    8ce0:	b	8d14 <rb_sha512_crypt_r+0x4ac>
    8ce4:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    8ce8:	ldr	r1, [fp, #-864]	; 0xfffffca0
    8cec:	mov	r2, sl
    8cf0:	bl	97fc <rb_sha512_process_bytes>
    8cf4:	cmp	r6, r5
    8cf8:	beq	8cd8 <rb_sha512_crypt_r+0x470>
    8cfc:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8d00:	ldr	r1, [fp, #-852]	; 0xfffffcac
    8d04:	mov	r2, sl
    8d08:	bl	97fc <rb_sha512_process_bytes>
    8d0c:	cmp	r7, #0
    8d10:	beq	8c3c <rb_sha512_crypt_r+0x3d4>
    8d14:	mov	r0, r8
    8d18:	mov	r1, #64	; 0x40
    8d1c:	b	8c44 <rb_sha512_crypt_r+0x3dc>
    8d20:	ldr	r4, [fp, #-888]	; 0xfffffc88
    8d24:	bic	r6, r4, r4, asr #31
    8d28:	ldr	r7, [fp, #-876]	; 0xfffffc94
    8d2c:	mov	r0, r7
    8d30:	mov	r1, #0
    8d34:	mov	r2, r6
    8d38:	bl	4f58 <memset@plt>
    8d3c:	ldr	r1, [pc, #2516]	; 9718 <rb_sha512_crypt_r+0xeb0>
    8d40:	add	r1, pc, r1
    8d44:	mov	r0, r7
    8d48:	mov	r2, r6
    8d4c:	bl	4eb0 <strncpy@plt>
    8d50:	bl	50fc <strlen@plt>
    8d54:	adds	r5, r7, r0
    8d58:	addeq	r5, r7, r6
    8d5c:	sub	r4, r4, #3
    8d60:	ldr	r0, [fp, #-892]	; 0xfffffc84
    8d64:	cmp	r0, #0
    8d68:	beq	8da0 <rb_sha512_crypt_r+0x538>
    8d6c:	sub	sp, sp, #8
    8d70:	ldr	r0, [fp, #-860]	; 0xfffffca4
    8d74:	str	r0, [sp]
    8d78:	bic	r1, r4, r4, asr #31
    8d7c:	ldr	r2, [pc, #2456]	; 971c <rb_sha512_crypt_r+0xeb4>
    8d80:	add	r2, pc, r2
    8d84:	ldr	r3, [pc, #2452]	; 9720 <rb_sha512_crypt_r+0xeb8>
    8d88:	add	r3, pc, r3
    8d8c:	mov	r0, r5
    8d90:	bl	54c8 <snprintf@plt>
    8d94:	add	sp, sp, #8
    8d98:	sub	r4, r4, r0
    8d9c:	add	r5, r5, r0
    8da0:	ldr	r8, [fp, #-864]	; 0xfffffca0
    8da4:	ldr	r9, [fp, #-852]	; 0xfffffcac
    8da8:	bic	r6, r4, r4, asr #31
    8dac:	cmp	r6, r8
    8db0:	movcs	r6, r8
    8db4:	mov	sl, #0
    8db8:	mov	r0, r5
    8dbc:	mov	r1, #0
    8dc0:	mov	r2, r6
    8dc4:	bl	4f58 <memset@plt>
    8dc8:	mov	r0, r5
    8dcc:	ldr	r1, [fp, #-872]	; 0xfffffc98
    8dd0:	mov	r2, r6
    8dd4:	bl	4eb0 <strncpy@plt>
    8dd8:	mov	r0, r7
    8ddc:	bl	50fc <strlen@plt>
    8de0:	adds	r1, r7, r0
    8de4:	addeq	r1, r7, r8
    8de8:	sub	r2, r4, r6
    8dec:	cmp	r2, #1
    8df0:	movge	r0, #36	; 0x24
    8df4:	strbge	r0, [r1]
    8df8:	subge	r0, r2, #1
    8dfc:	cmpge	r0, #1
    8e00:	bge	8ecc <rb_sha512_crypt_r+0x664>
    8e04:	bl	560c <__errno_location@plt>
    8e08:	mov	r1, #34	; 0x22
    8e0c:	str	r1, [r0]
    8e10:	sub	r5, fp, #504	; 0x1f8
    8e14:	mov	r0, r5
    8e18:	bl	9728 <rb_sha512_init_ctx>
    8e1c:	sub	r1, fp, #96	; 0x60
    8e20:	mov	r0, r5
    8e24:	bl	9998 <rb_sha512_finish_ctx>
    8e28:	vmov.i32	q8, #0	; 0x00000000
    8e2c:	sub	r0, fp, #160	; 0xa0
    8e30:	mov	r1, r0
    8e34:	add	r0, r0, #32
    8e38:	vst1.64	{d16-d17}, [r0]
    8e3c:	add	r0, r1, #16
    8e40:	vst1.64	{d16-d17}, [r0]
    8e44:	mov	r0, #48	; 0x30
    8e48:	vst1.64	{d16-d17}, [r1], r0
    8e4c:	vst1.64	{d16-d17}, [r1]
    8e50:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8e54:	mov	r1, #0
    8e58:	mov	r2, r9
    8e5c:	bl	4f58 <memset@plt>
    8e60:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    8e64:	mov	r1, #0
    8e68:	mov	r2, r8
    8e6c:	bl	4f58 <memset@plt>
    8e70:	mov	r0, r5
    8e74:	mov	r1, #0
    8e78:	mov	r2, #344	; 0x158
    8e7c:	bl	4f58 <memset@plt>
    8e80:	sub	r0, fp, #848	; 0x350
    8e84:	mov	r1, #0
    8e88:	mov	r2, #344	; 0x158
    8e8c:	bl	4f58 <memset@plt>
    8e90:	ldr	r0, [fp, #-880]	; 0xfffffc90
    8e94:	cmp	r0, #0
    8e98:	beq	8ea8 <rb_sha512_crypt_r+0x640>
    8e9c:	mov	r1, #0
    8ea0:	mov	r2, r9
    8ea4:	bl	4f58 <memset@plt>
    8ea8:	ldr	r0, [fp, #-884]	; 0xfffffc8c
    8eac:	cmp	r0, #0
    8eb0:	beq	8ec0 <rb_sha512_crypt_r+0x658>
    8eb4:	mov	r1, #0
    8eb8:	mov	r2, r8
    8ebc:	bl	4f58 <memset@plt>
    8ec0:	mov	r0, sl
    8ec4:	sub	sp, fp, #28
    8ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ecc:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    8ed0:	ldrb	r3, [fp, #-75]	; 0xffffffb5
    8ed4:	ldrb	r7, [fp, #-54]	; 0xffffffca
    8ed8:	lsl	r3, r3, #8
    8edc:	orr	r0, r3, r0, lsl #16
    8ee0:	orr	r7, r0, r7
    8ee4:	add	r3, r1, #1
    8ee8:	mov	r6, #0
    8eec:	ldr	ip, [pc, #2096]	; 9724 <rb_sha512_crypt_r+0xebc>
    8ef0:	add	ip, pc, ip
    8ef4:	and	r0, r7, #63	; 0x3f
    8ef8:	ldrb	r0, [ip, r0]
    8efc:	strb	r0, [r3, -r6]
    8f00:	add	r0, r2, r6
    8f04:	sub	r5, r0, #2
    8f08:	sub	r0, r6, #1
    8f0c:	cmp	r5, #1
    8f10:	blt	8f24 <rb_sha512_crypt_r+0x6bc>
    8f14:	lsr	r7, r7, #6
    8f18:	cmn	r6, #3
    8f1c:	mov	r6, r0
    8f20:	bne	8ef4 <rb_sha512_crypt_r+0x68c>
    8f24:	add	r7, r2, r0
    8f28:	sub	r7, r7, #1
    8f2c:	cmp	r7, #1
    8f30:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    8f34:	ldrb	r7, [fp, #-95]	; 0xffffffa1
    8f38:	ldrb	r6, [fp, #-74]	; 0xffffffb6
    8f3c:	ldrb	r5, [fp, #-53]	; 0xffffffcb
    8f40:	lsl	r5, r5, #8
    8f44:	orr	r6, r5, r6, lsl #16
    8f48:	orr	r7, r6, r7
    8f4c:	sub	r5, r2, #2
    8f50:	mvn	r4, #2
    8f54:	and	r6, r7, #63	; 0x3f
    8f58:	ldrb	r6, [ip, r6]
    8f5c:	strb	r6, [r3, -r0]
    8f60:	add	r6, r5, r0
    8f64:	sub	r0, r0, #1
    8f68:	cmp	r6, #1
    8f6c:	blt	8f84 <rb_sha512_crypt_r+0x71c>
    8f70:	add	r6, r4, #1
    8f74:	lsr	r7, r7, #6
    8f78:	cmp	r4, #0
    8f7c:	mov	r4, r6
    8f80:	bne	8f54 <rb_sha512_crypt_r+0x6ec>
    8f84:	add	r2, r2, r0
    8f88:	sub	r5, r2, #1
    8f8c:	cmp	r5, #1
    8f90:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    8f94:	sub	r2, r3, r0
    8f98:	sub	r0, r1, r0
    8f9c:	add	r1, r0, #1
    8fa0:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    8fa4:	ldrb	r3, [fp, #-73]	; 0xffffffb7
    8fa8:	ldrb	r7, [fp, #-52]	; 0xffffffcc
    8fac:	lsl	r0, r0, #8
    8fb0:	orr	r0, r0, r7, lsl #16
    8fb4:	orr	r3, r0, r3
    8fb8:	mvn	r7, #2
    8fbc:	and	r0, r3, #63	; 0x3f
    8fc0:	ldrb	r0, [ip, r0]
    8fc4:	strb	r0, [r2], #1
    8fc8:	add	r1, r1, #1
    8fcc:	sub	r5, r5, #1
    8fd0:	cmp	r5, #1
    8fd4:	blt	8fec <rb_sha512_crypt_r+0x784>
    8fd8:	add	r0, r7, #1
    8fdc:	lsr	r3, r3, #6
    8fe0:	cmp	r7, #0
    8fe4:	mov	r7, r0
    8fe8:	bne	8fbc <rb_sha512_crypt_r+0x754>
    8fec:	cmp	r5, #1
    8ff0:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    8ff4:	add	r6, r5, #1
    8ff8:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    8ffc:	ldrb	r3, [fp, #-72]	; 0xffffffb8
    9000:	ldrb	r7, [fp, #-51]	; 0xffffffcd
    9004:	lsl	r3, r3, #8
    9008:	orr	r0, r3, r0, lsl #16
    900c:	orr	r7, r0, r7
    9010:	mvn	r5, #2
    9014:	and	r0, r7, #63	; 0x3f
    9018:	ldrb	r0, [ip, r0]
    901c:	strb	r0, [r2], #1
    9020:	sub	r3, r6, #1
    9024:	add	r1, r1, #1
    9028:	sub	r0, r6, #2
    902c:	cmp	r0, #1
    9030:	blt	904c <rb_sha512_crypt_r+0x7e4>
    9034:	add	r0, r5, #1
    9038:	lsr	r7, r7, #6
    903c:	cmp	r5, #0
    9040:	mov	r6, r3
    9044:	mov	r5, r0
    9048:	bne	9014 <rb_sha512_crypt_r+0x7ac>
    904c:	sub	r0, r3, #1
    9050:	cmp	r0, #1
    9054:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9058:	ldrb	r0, [fp, #-92]	; 0xffffffa4
    905c:	ldrb	r7, [fp, #-71]	; 0xffffffb9
    9060:	ldrb	r6, [fp, #-50]	; 0xffffffce
    9064:	lsl	r6, r6, #8
    9068:	orr	r7, r6, r7, lsl #16
    906c:	orr	r7, r7, r0
    9070:	mvn	r5, #2
    9074:	and	r0, r7, #63	; 0x3f
    9078:	ldrb	r0, [ip, r0]
    907c:	strb	r0, [r2], #1
    9080:	sub	r6, r3, #1
    9084:	add	r1, r1, #1
    9088:	sub	r0, r3, #2
    908c:	cmp	r0, #1
    9090:	blt	90ac <rb_sha512_crypt_r+0x844>
    9094:	add	r0, r5, #1
    9098:	lsr	r7, r7, #6
    909c:	cmp	r5, #0
    90a0:	mov	r3, r6
    90a4:	mov	r5, r0
    90a8:	bne	9074 <rb_sha512_crypt_r+0x80c>
    90ac:	sub	r0, r6, #1
    90b0:	cmp	r0, #1
    90b4:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    90b8:	rsb	r1, r1, #0
    90bc:	ldrb	r0, [fp, #-91]	; 0xffffffa5
    90c0:	ldrb	r2, [fp, #-70]	; 0xffffffba
    90c4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
    90c8:	lsl	r0, r0, #8
    90cc:	orr	r0, r0, r3, lsl #16
    90d0:	orr	r3, r0, r2
    90d4:	mvn	r5, #2
    90d8:	mov	r7, #0
    90dc:	and	r0, r3, #63	; 0x3f
    90e0:	ldrb	r0, [ip, r0]
    90e4:	strb	r0, [r7, -r1]
    90e8:	sub	r1, r1, #1
    90ec:	sub	r2, r6, #1
    90f0:	sub	r0, r6, #2
    90f4:	cmp	r0, #1
    90f8:	blt	9114 <rb_sha512_crypt_r+0x8ac>
    90fc:	add	r0, r5, #1
    9100:	lsr	r3, r3, #6
    9104:	cmp	r5, #0
    9108:	mov	r6, r2
    910c:	mov	r5, r0
    9110:	bne	90dc <rb_sha512_crypt_r+0x874>
    9114:	sub	r0, r2, #1
    9118:	cmp	r0, #1
    911c:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9120:	rsb	r1, r1, #0
    9124:	ldrb	r0, [fp, #-90]	; 0xffffffa6
    9128:	ldrb	r3, [fp, #-69]	; 0xffffffbb
    912c:	ldrb	r7, [fp, #-48]	; 0xffffffd0
    9130:	lsl	r3, r3, #8
    9134:	orr	r0, r3, r0, lsl #16
    9138:	orr	r7, r0, r7
    913c:	mvn	r6, #2
    9140:	and	r0, r7, #63	; 0x3f
    9144:	ldrb	r0, [ip, r0]
    9148:	strb	r0, [r1], #1
    914c:	sub	r3, r2, #1
    9150:	sub	r0, r2, #2
    9154:	cmp	r0, #1
    9158:	blt	9174 <rb_sha512_crypt_r+0x90c>
    915c:	add	r0, r6, #1
    9160:	lsr	r7, r7, #6
    9164:	cmp	r6, #0
    9168:	mov	r2, r3
    916c:	mov	r6, r0
    9170:	bne	9140 <rb_sha512_crypt_r+0x8d8>
    9174:	sub	r0, r3, #1
    9178:	cmp	r0, #1
    917c:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9180:	ldrb	r0, [fp, #-89]	; 0xffffffa7
    9184:	ldrb	r2, [fp, #-68]	; 0xffffffbc
    9188:	ldrb	r7, [fp, #-47]	; 0xffffffd1
    918c:	lsl	r7, r7, #8
    9190:	orr	r2, r7, r2, lsl #16
    9194:	orr	r7, r2, r0
    9198:	mvn	r6, #2
    919c:	and	r0, r7, #63	; 0x3f
    91a0:	ldrb	r0, [ip, r0]
    91a4:	strb	r0, [r1], #1
    91a8:	sub	r2, r3, #1
    91ac:	sub	r0, r3, #2
    91b0:	cmp	r0, #1
    91b4:	blt	91d0 <rb_sha512_crypt_r+0x968>
    91b8:	add	r0, r6, #1
    91bc:	lsr	r7, r7, #6
    91c0:	cmp	r6, #0
    91c4:	mov	r3, r2
    91c8:	mov	r6, r0
    91cc:	bne	919c <rb_sha512_crypt_r+0x934>
    91d0:	sub	r0, r2, #1
    91d4:	cmp	r0, #1
    91d8:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    91dc:	ldrb	r0, [fp, #-88]	; 0xffffffa8
    91e0:	ldrb	r3, [fp, #-67]	; 0xffffffbd
    91e4:	ldrb	r7, [fp, #-46]	; 0xffffffd2
    91e8:	lsl	r0, r0, #8
    91ec:	orr	r0, r0, r7, lsl #16
    91f0:	orr	r7, r0, r3
    91f4:	mvn	r6, #2
    91f8:	and	r0, r7, #63	; 0x3f
    91fc:	ldrb	r0, [ip, r0]
    9200:	strb	r0, [r1], #1
    9204:	sub	r3, r2, #1
    9208:	sub	r0, r2, #2
    920c:	cmp	r0, #1
    9210:	blt	922c <rb_sha512_crypt_r+0x9c4>
    9214:	add	r0, r6, #1
    9218:	lsr	r7, r7, #6
    921c:	cmp	r6, #0
    9220:	mov	r2, r3
    9224:	mov	r6, r0
    9228:	bne	91f8 <rb_sha512_crypt_r+0x990>
    922c:	sub	r0, r3, #1
    9230:	cmp	r0, #1
    9234:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9238:	ldrb	r0, [fp, #-87]	; 0xffffffa9
    923c:	ldrb	r2, [fp, #-66]	; 0xffffffbe
    9240:	ldrb	r7, [fp, #-45]	; 0xffffffd3
    9244:	lsl	r2, r2, #8
    9248:	orr	r0, r2, r0, lsl #16
    924c:	orr	r7, r0, r7
    9250:	mvn	r6, #2
    9254:	and	r0, r7, #63	; 0x3f
    9258:	ldrb	r0, [ip, r0]
    925c:	strb	r0, [r1], #1
    9260:	sub	r2, r3, #1
    9264:	sub	r0, r3, #2
    9268:	cmp	r0, #1
    926c:	blt	9288 <rb_sha512_crypt_r+0xa20>
    9270:	add	r0, r6, #1
    9274:	lsr	r7, r7, #6
    9278:	cmp	r6, #0
    927c:	mov	r3, r2
    9280:	mov	r6, r0
    9284:	bne	9254 <rb_sha512_crypt_r+0x9ec>
    9288:	sub	r0, r2, #1
    928c:	cmp	r0, #1
    9290:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9294:	ldrb	r0, [fp, #-86]	; 0xffffffaa
    9298:	ldrb	r3, [fp, #-65]	; 0xffffffbf
    929c:	ldrb	r7, [fp, #-44]	; 0xffffffd4
    92a0:	lsl	r7, r7, #8
    92a4:	orr	r3, r7, r3, lsl #16
    92a8:	orr	r7, r3, r0
    92ac:	mvn	r6, #2
    92b0:	and	r0, r7, #63	; 0x3f
    92b4:	ldrb	r0, [ip, r0]
    92b8:	strb	r0, [r1], #1
    92bc:	sub	r3, r2, #1
    92c0:	sub	r0, r2, #2
    92c4:	cmp	r0, #1
    92c8:	blt	92e4 <rb_sha512_crypt_r+0xa7c>
    92cc:	add	r0, r6, #1
    92d0:	lsr	r7, r7, #6
    92d4:	cmp	r6, #0
    92d8:	mov	r2, r3
    92dc:	mov	r6, r0
    92e0:	bne	92b0 <rb_sha512_crypt_r+0xa48>
    92e4:	sub	r0, r3, #1
    92e8:	cmp	r0, #1
    92ec:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    92f0:	ldrb	r0, [fp, #-85]	; 0xffffffab
    92f4:	ldrb	r2, [fp, #-64]	; 0xffffffc0
    92f8:	ldrb	r7, [fp, #-43]	; 0xffffffd5
    92fc:	lsl	r0, r0, #8
    9300:	orr	r0, r0, r7, lsl #16
    9304:	orr	r7, r0, r2
    9308:	mvn	r6, #2
    930c:	and	r0, r7, #63	; 0x3f
    9310:	ldrb	r0, [ip, r0]
    9314:	strb	r0, [r1], #1
    9318:	sub	r2, r3, #1
    931c:	sub	r0, r3, #2
    9320:	cmp	r0, #1
    9324:	blt	9340 <rb_sha512_crypt_r+0xad8>
    9328:	add	r0, r6, #1
    932c:	lsr	r7, r7, #6
    9330:	cmp	r6, #0
    9334:	mov	r3, r2
    9338:	mov	r6, r0
    933c:	bne	930c <rb_sha512_crypt_r+0xaa4>
    9340:	sub	r0, r2, #1
    9344:	cmp	r0, #1
    9348:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    934c:	ldrb	r0, [fp, #-84]	; 0xffffffac
    9350:	ldrb	r3, [fp, #-63]	; 0xffffffc1
    9354:	ldrb	r7, [fp, #-42]	; 0xffffffd6
    9358:	lsl	r3, r3, #8
    935c:	orr	r0, r3, r0, lsl #16
    9360:	orr	r7, r0, r7
    9364:	mvn	r6, #2
    9368:	and	r0, r7, #63	; 0x3f
    936c:	ldrb	r0, [ip, r0]
    9370:	strb	r0, [r1], #1
    9374:	sub	r3, r2, #1
    9378:	sub	r0, r2, #2
    937c:	cmp	r0, #1
    9380:	blt	939c <rb_sha512_crypt_r+0xb34>
    9384:	add	r0, r6, #1
    9388:	lsr	r7, r7, #6
    938c:	cmp	r6, #0
    9390:	mov	r2, r3
    9394:	mov	r6, r0
    9398:	bne	9368 <rb_sha512_crypt_r+0xb00>
    939c:	sub	r0, r3, #1
    93a0:	cmp	r0, #1
    93a4:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    93a8:	ldrb	r0, [fp, #-83]	; 0xffffffad
    93ac:	ldrb	r2, [fp, #-62]	; 0xffffffc2
    93b0:	ldrb	r7, [fp, #-41]	; 0xffffffd7
    93b4:	lsl	r7, r7, #8
    93b8:	orr	r2, r7, r2, lsl #16
    93bc:	orr	r7, r2, r0
    93c0:	mvn	r6, #2
    93c4:	and	r0, r7, #63	; 0x3f
    93c8:	ldrb	r0, [ip, r0]
    93cc:	strb	r0, [r1], #1
    93d0:	sub	r2, r3, #1
    93d4:	sub	r0, r3, #2
    93d8:	cmp	r0, #1
    93dc:	blt	93f8 <rb_sha512_crypt_r+0xb90>
    93e0:	add	r0, r6, #1
    93e4:	lsr	r7, r7, #6
    93e8:	cmp	r6, #0
    93ec:	mov	r3, r2
    93f0:	mov	r6, r0
    93f4:	bne	93c4 <rb_sha512_crypt_r+0xb5c>
    93f8:	sub	r0, r2, #1
    93fc:	cmp	r0, #1
    9400:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9404:	ldrb	r0, [fp, #-82]	; 0xffffffae
    9408:	ldrb	r3, [fp, #-61]	; 0xffffffc3
    940c:	ldrb	r7, [fp, #-40]	; 0xffffffd8
    9410:	lsl	r0, r0, #8
    9414:	orr	r0, r0, r7, lsl #16
    9418:	orr	r7, r0, r3
    941c:	mvn	r6, #2
    9420:	and	r0, r7, #63	; 0x3f
    9424:	ldrb	r0, [ip, r0]
    9428:	strb	r0, [r1], #1
    942c:	sub	r3, r2, #1
    9430:	sub	r0, r2, #2
    9434:	cmp	r0, #1
    9438:	blt	9454 <rb_sha512_crypt_r+0xbec>
    943c:	add	r0, r6, #1
    9440:	lsr	r7, r7, #6
    9444:	cmp	r6, #0
    9448:	mov	r2, r3
    944c:	mov	r6, r0
    9450:	bne	9420 <rb_sha512_crypt_r+0xbb8>
    9454:	sub	r0, r3, #1
    9458:	cmp	r0, #1
    945c:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9460:	ldrb	r0, [fp, #-81]	; 0xffffffaf
    9464:	ldrb	r2, [fp, #-60]	; 0xffffffc4
    9468:	ldrb	r7, [fp, #-39]	; 0xffffffd9
    946c:	lsl	r2, r2, #8
    9470:	orr	r0, r2, r0, lsl #16
    9474:	orr	r7, r0, r7
    9478:	mvn	r6, #2
    947c:	and	r0, r7, #63	; 0x3f
    9480:	ldrb	r0, [ip, r0]
    9484:	strb	r0, [r1], #1
    9488:	sub	r2, r3, #1
    948c:	sub	r0, r3, #2
    9490:	cmp	r0, #1
    9494:	blt	94b0 <rb_sha512_crypt_r+0xc48>
    9498:	add	r0, r6, #1
    949c:	lsr	r7, r7, #6
    94a0:	cmp	r6, #0
    94a4:	mov	r3, r2
    94a8:	mov	r6, r0
    94ac:	bne	947c <rb_sha512_crypt_r+0xc14>
    94b0:	sub	r0, r2, #1
    94b4:	cmp	r0, #1
    94b8:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    94bc:	ldrb	r0, [fp, #-80]	; 0xffffffb0
    94c0:	ldrb	r3, [fp, #-59]	; 0xffffffc5
    94c4:	ldrb	r7, [fp, #-38]	; 0xffffffda
    94c8:	lsl	r7, r7, #8
    94cc:	orr	r3, r7, r3, lsl #16
    94d0:	orr	r7, r3, r0
    94d4:	mvn	r6, #2
    94d8:	and	r0, r7, #63	; 0x3f
    94dc:	ldrb	r0, [ip, r0]
    94e0:	strb	r0, [r1], #1
    94e4:	sub	r3, r2, #1
    94e8:	sub	r0, r2, #2
    94ec:	cmp	r0, #1
    94f0:	blt	950c <rb_sha512_crypt_r+0xca4>
    94f4:	add	r0, r6, #1
    94f8:	lsr	r7, r7, #6
    94fc:	cmp	r6, #0
    9500:	mov	r2, r3
    9504:	mov	r6, r0
    9508:	bne	94d8 <rb_sha512_crypt_r+0xc70>
    950c:	sub	r0, r3, #1
    9510:	cmp	r0, #1
    9514:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9518:	ldrb	r0, [fp, #-79]	; 0xffffffb1
    951c:	ldrb	r2, [fp, #-58]	; 0xffffffc6
    9520:	ldrb	r7, [fp, #-37]	; 0xffffffdb
    9524:	lsl	r0, r0, #8
    9528:	orr	r0, r0, r7, lsl #16
    952c:	orr	r7, r0, r2
    9530:	mvn	r6, #2
    9534:	and	r0, r7, #63	; 0x3f
    9538:	ldrb	r0, [ip, r0]
    953c:	strb	r0, [r1], #1
    9540:	sub	r2, r3, #1
    9544:	sub	r0, r3, #2
    9548:	cmp	r0, #1
    954c:	blt	9568 <rb_sha512_crypt_r+0xd00>
    9550:	add	r0, r6, #1
    9554:	lsr	r7, r7, #6
    9558:	cmp	r6, #0
    955c:	mov	r3, r2
    9560:	mov	r6, r0
    9564:	bne	9534 <rb_sha512_crypt_r+0xccc>
    9568:	sub	r0, r2, #1
    956c:	cmp	r0, #1
    9570:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9574:	ldrb	r0, [fp, #-78]	; 0xffffffb2
    9578:	ldrb	r3, [fp, #-57]	; 0xffffffc7
    957c:	ldrb	r7, [fp, #-36]	; 0xffffffdc
    9580:	lsl	r3, r3, #8
    9584:	orr	r0, r3, r0, lsl #16
    9588:	orr	r7, r0, r7
    958c:	mvn	r6, #2
    9590:	and	r0, r7, #63	; 0x3f
    9594:	ldrb	r0, [ip, r0]
    9598:	strb	r0, [r1], #1
    959c:	sub	r3, r2, #1
    95a0:	sub	r0, r2, #2
    95a4:	cmp	r0, #1
    95a8:	blt	95c4 <rb_sha512_crypt_r+0xd5c>
    95ac:	add	r0, r6, #1
    95b0:	lsr	r7, r7, #6
    95b4:	cmp	r6, #0
    95b8:	mov	r2, r3
    95bc:	mov	r6, r0
    95c0:	bne	9590 <rb_sha512_crypt_r+0xd28>
    95c4:	sub	r0, r3, #1
    95c8:	cmp	r0, #1
    95cc:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    95d0:	ldrb	r0, [fp, #-77]	; 0xffffffb3
    95d4:	ldrb	r2, [fp, #-56]	; 0xffffffc8
    95d8:	ldrb	r7, [fp, #-35]	; 0xffffffdd
    95dc:	lsl	r7, r7, #8
    95e0:	orr	r2, r7, r2, lsl #16
    95e4:	orr	r7, r2, r0
    95e8:	mvn	r6, #2
    95ec:	and	r0, r7, #63	; 0x3f
    95f0:	ldrb	r0, [ip, r0]
    95f4:	strb	r0, [r1], #1
    95f8:	sub	r2, r3, #1
    95fc:	sub	r0, r3, #2
    9600:	cmp	r0, #1
    9604:	blt	9620 <rb_sha512_crypt_r+0xdb8>
    9608:	add	r0, r6, #1
    960c:	lsr	r7, r7, #6
    9610:	cmp	r6, #0
    9614:	mov	r3, r2
    9618:	mov	r6, r0
    961c:	bne	95ec <rb_sha512_crypt_r+0xd84>
    9620:	sub	r0, r2, #1
    9624:	cmp	r0, #1
    9628:	ldr	r8, [fp, #-864]	; 0xfffffca0
    962c:	ldr	r9, [fp, #-852]	; 0xfffffcac
    9630:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9634:	ldrb	r0, [fp, #-76]	; 0xffffffb4
    9638:	ldrb	r3, [fp, #-55]	; 0xffffffc9
    963c:	ldrb	r7, [fp, #-34]	; 0xffffffde
    9640:	lsl	r0, r0, #8
    9644:	orr	r0, r0, r7, lsl #16
    9648:	orr	r7, r0, r3
    964c:	mvn	r6, #2
    9650:	and	r0, r7, #63	; 0x3f
    9654:	ldrb	r0, [ip, r0]
    9658:	strb	r0, [r1], #1
    965c:	sub	r3, r2, #1
    9660:	sub	r0, r2, #2
    9664:	cmp	r0, #1
    9668:	blt	9684 <rb_sha512_crypt_r+0xe1c>
    966c:	add	r0, r6, #1
    9670:	lsr	r7, r7, #6
    9674:	cmp	r6, #0
    9678:	mov	r2, r3
    967c:	mov	r6, r0
    9680:	bne	9650 <rb_sha512_crypt_r+0xde8>
    9684:	sub	r0, r3, #1
    9688:	cmp	r0, #1
    968c:	ldr	r8, [fp, #-864]	; 0xfffffca0
    9690:	ldr	r9, [fp, #-852]	; 0xfffffcac
    9694:	blt	8e04 <rb_sha512_crypt_r+0x59c>
    9698:	mvn	r7, #0
    969c:	ldrb	r2, [fp, #-33]	; 0xffffffdf
    96a0:	and	r0, r2, #63	; 0x3f
    96a4:	ldrb	r0, [ip, r0]
    96a8:	strb	r0, [r1], #1
    96ac:	sub	r0, r3, #1
    96b0:	sub	r3, r3, #2
    96b4:	cmp	r3, #1
    96b8:	blt	96d4 <rb_sha512_crypt_r+0xe6c>
    96bc:	add	r6, r7, #1
    96c0:	lsr	r2, r2, #6
    96c4:	cmp	r7, #0
    96c8:	mov	r3, r0
    96cc:	mov	r7, r6
    96d0:	bne	96a0 <rb_sha512_crypt_r+0xe38>
    96d4:	cmp	r0, #1
    96d8:	ldr	r2, [fp, #-876]	; 0xfffffc94
    96dc:	ldr	r8, [fp, #-864]	; 0xfffffca0
    96e0:	ldr	r9, [fp, #-852]	; 0xfffffcac
    96e4:	ble	8e04 <rb_sha512_crypt_r+0x59c>
    96e8:	mov	r0, #0
    96ec:	strb	r0, [r1]
    96f0:	mov	sl, r2
    96f4:	b	8e10 <rb_sha512_crypt_r+0x5a8>
    96f8:	mov	r0, #0
    96fc:	str	r0, [fp, #-892]	; 0xfffffc84
    9700:	movw	r0, #5000	; 0x1388
    9704:	str	r0, [fp, #-860]	; 0xfffffca4
    9708:	b	8914 <rb_sha512_crypt_r+0xac>
    970c:	.word	0x0000cab0
    9710:	.word	0x0000ca9c
    9714:	.word	0x0000c59a
    9718:	.word	0x0000c5f8
    971c:	.word	0x0000c134
    9720:	.word	0x0000c5b4
    9724:	.word	0x0000bf7f

00009728 <rb_sha512_init_ctx>:
    9728:	push	{r4, r5, r6, sl, fp, lr}
    972c:	add	fp, sp, #16
    9730:	movw	ip, #52505	; 0xcd19
    9734:	movt	ip, #23520	; 0x5be0
    9738:	vmov.i32	q8, #0	; 0x00000000
    973c:	movw	lr, #8569	; 0x2179
    9740:	movt	lr, #4990	; 0x137e
    9744:	movw	r3, #55723	; 0xd9ab
    9748:	movt	r3, #8067	; 0x1f83
    974c:	movw	r1, #48491	; 0xbd6b
    9750:	movt	r1, #64321	; 0xfb41
    9754:	movw	r2, #26764	; 0x688c
    9758:	movt	r2, #39685	; 0x9b05
    975c:	movw	r4, #27679	; 0x6c1f
    9760:	movt	r4, #11070	; 0x2b3e
    9764:	movw	r5, #21119	; 0x527f
    9768:	movt	r5, #20750	; 0x510e
    976c:	movw	r6, #33489	; 0x82d1
    9770:	movt	r6, #44518	; 0xade6
    9774:	str	r6, [r0, #32]
    9778:	str	r5, [r0, #36]	; 0x24
    977c:	str	r4, [r0, #40]	; 0x28
    9780:	str	r2, [r0, #44]	; 0x2c
    9784:	add	r2, r0, #48	; 0x30
    9788:	stm	r2, {r1, r3, lr}
    978c:	str	ip, [r0, #60]	; 0x3c
    9790:	movw	ip, #62778	; 0xf53a
    9794:	movt	ip, #42319	; 0xa54f
    9798:	movw	lr, #14065	; 0x36f1
    979c:	movt	lr, #24349	; 0x5f1d
    97a0:	movw	r3, #62322	; 0xf372
    97a4:	movt	r3, #15470	; 0x3c6e
    97a8:	movw	r6, #63531	; 0xf82b
    97ac:	movt	r6, #65172	; 0xfe94
    97b0:	movw	r5, #44677	; 0xae85
    97b4:	movt	r5, #47975	; 0xbb67
    97b8:	movw	r4, #42811	; 0xa73b
    97bc:	movt	r4, #33994	; 0x84ca
    97c0:	movw	r1, #58983	; 0xe667
    97c4:	movt	r1, #27145	; 0x6a09
    97c8:	movw	r2, #51464	; 0xc908
    97cc:	movt	r2, #62396	; 0xf3bc
    97d0:	str	r2, [r0]
    97d4:	stmib	r0, {r1, r4, r5, r6}
    97d8:	str	r3, [r0, #20]
    97dc:	str	lr, [r0, #24]
    97e0:	str	ip, [r0, #28]
    97e4:	mov	r1, #0
    97e8:	str	r1, [r0, #80]	; 0x50
    97ec:	str	r1, [r0, #84]	; 0x54
    97f0:	add	r0, r0, #64	; 0x40
    97f4:	vst1.64	{d16-d17}, [r0]
    97f8:	pop	{r4, r5, r6, sl, fp, pc}

000097fc <rb_sha512_process_bytes>:
    97fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9800:	add	fp, sp, #28
    9804:	sub	sp, sp, #4
    9808:	mov	r4, r2
    980c:	mov	sl, r1
    9810:	mov	r6, r0
    9814:	mov	r9, r2
    9818:	ldr	r5, [r9, #80]!	; 0x50
    981c:	ldr	r0, [r9, #4]
    9820:	orrs	r0, r5, r0
    9824:	beq	98a8 <rb_sha512_process_bytes+0xac>
    9828:	rsb	r7, r5, #256	; 0x100
    982c:	cmp	r7, sl
    9830:	movhi	r7, sl
    9834:	add	r0, r4, r5
    9838:	add	r0, r0, #88	; 0x58
    983c:	mov	r1, r6
    9840:	mov	r2, r7
    9844:	bl	5120 <memcpy@plt>
    9848:	ldrd	r0, [r9]
    984c:	adds	r0, r0, r7
    9850:	adc	r1, r1, #0
    9854:	strd	r0, [r9]
    9858:	subs	r2, r0, #129	; 0x81
    985c:	sbcs	r1, r1, #0
    9860:	bcc	98a0 <rb_sha512_process_bytes+0xa4>
    9864:	add	r8, r4, #88	; 0x58
    9868:	bic	r1, r0, #127	; 0x7f
    986c:	mov	r0, r8
    9870:	mov	r2, r4
    9874:	bl	9b10 <rb_sha512_process_block>
    9878:	mov	r0, #0
    987c:	str	r0, [r9, #4]
    9880:	ldr	r0, [r9]
    9884:	and	r2, r0, #127	; 0x7f
    9888:	str	r2, [r9]
    988c:	add	r0, r7, r5
    9890:	bic	r0, r0, #127	; 0x7f
    9894:	add	r1, r8, r0
    9898:	mov	r0, r8
    989c:	bl	5120 <memcpy@plt>
    98a0:	sub	sl, sl, r7
    98a4:	add	r6, r6, r7
    98a8:	cmp	sl, #128	; 0x80
    98ac:	bcc	9928 <rb_sha512_process_bytes+0x12c>
    98b0:	tst	r6, #7
    98b4:	beq	990c <rb_sha512_process_bytes+0x110>
    98b8:	cmp	sl, #129	; 0x81
    98bc:	bcc	9938 <rb_sha512_process_bytes+0x13c>
    98c0:	add	r7, r4, #88	; 0x58
    98c4:	sub	r0, sl, #129	; 0x81
    98c8:	bic	r8, r0, #127	; 0x7f
    98cc:	mov	r5, sl
    98d0:	mov	r0, r7
    98d4:	mov	r1, r6
    98d8:	mov	r2, #128	; 0x80
    98dc:	bl	5120 <memcpy@plt>
    98e0:	mov	r0, r7
    98e4:	mov	r1, #128	; 0x80
    98e8:	mov	r2, r4
    98ec:	bl	9b10 <rb_sha512_process_block>
    98f0:	sub	r5, r5, #128	; 0x80
    98f4:	add	r6, r6, #128	; 0x80
    98f8:	cmp	r5, #128	; 0x80
    98fc:	bhi	98d0 <rb_sha512_process_bytes+0xd4>
    9900:	sub	r0, sl, r8
    9904:	sub	sl, r0, #128	; 0x80
    9908:	b	993c <rb_sha512_process_bytes+0x140>
    990c:	bic	r7, sl, #127	; 0x7f
    9910:	mov	r0, r6
    9914:	mov	r1, r7
    9918:	mov	r2, r4
    991c:	bl	9b10 <rb_sha512_process_block>
    9920:	add	r6, r6, r7
    9924:	and	sl, sl, #127	; 0x7f
    9928:	cmp	sl, #0
    992c:	bne	993c <rb_sha512_process_bytes+0x140>
    9930:	sub	sp, fp, #28
    9934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9938:	mov	sl, #128	; 0x80
    993c:	ldr	r5, [r9]
    9940:	add	r0, r4, r5
    9944:	add	r0, r0, #88	; 0x58
    9948:	mov	r1, r6
    994c:	mov	r2, sl
    9950:	bl	5120 <memcpy@plt>
    9954:	add	r6, sl, r5
    9958:	cmp	r6, #128	; 0x80
    995c:	bcc	9988 <rb_sha512_process_bytes+0x18c>
    9960:	add	r5, r4, #88	; 0x58
    9964:	mov	r0, r5
    9968:	mov	r1, #128	; 0x80
    996c:	mov	r2, r4
    9970:	bl	9b10 <rb_sha512_process_block>
    9974:	add	r1, r4, #216	; 0xd8
    9978:	sub	r6, r6, #128	; 0x80
    997c:	mov	r0, r5
    9980:	mov	r2, r6
    9984:	bl	5120 <memcpy@plt>
    9988:	mov	r7, #0
    998c:	strd	r6, [r9]
    9990:	sub	sp, fp, #28
    9994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009998 <rb_sha512_finish_ctx>:
    9998:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    999c:	add	fp, sp, #24
    99a0:	mov	r4, r1
    99a4:	mov	r5, r0
    99a8:	mov	r6, r0
    99ac:	ldr	r0, [r6, #64]!	; 0x40
    99b0:	ldr	r1, [r6, #4]
    99b4:	ldrd	r2, [r6, #16]
    99b8:	adds	r0, r0, r2
    99bc:	adcs	r1, r1, r3
    99c0:	strd	r0, [r6]
    99c4:	mov	r7, #0
    99c8:	adc	r0, r7, #0
    99cc:	cmp	r0, #1
    99d0:	bne	99e4 <rb_sha512_finish_ctx+0x4c>
    99d4:	ldrd	r0, [r5, #72]	; 0x48
    99d8:	adds	r0, r0, #1
    99dc:	adc	r1, r1, #0
    99e0:	strd	r0, [r5, #72]	; 0x48
    99e4:	add	r8, r5, #88	; 0x58
    99e8:	add	r0, r8, r2
    99ec:	rsbs	r1, r2, #111	; 0x6f
    99f0:	rscs	r1, r3, #0
    99f4:	mov	r1, #0
    99f8:	movwcc	r1, #1
    99fc:	mov	r9, #112	; 0x70
    9a00:	cmp	r1, #0
    9a04:	movwne	r9, #240	; 0xf0
    9a08:	sub	r2, r9, r2
    9a0c:	ldr	r1, [pc, #248]	; 9b0c <rb_sha512_finish_ctx+0x174>
    9a10:	add	r1, pc, r1
    9a14:	bl	5120 <memcpy@plt>
    9a18:	ldrd	r0, [r6]
    9a1c:	lsr	r2, r0, #5
    9a20:	orr	r2, r2, r1, lsl #27
    9a24:	and	r2, r2, #-16777216	; 0xff000000
    9a28:	movw	ip, #8160	; 0x1fe0
    9a2c:	and	r3, r1, ip
    9a30:	orr	r2, r2, r3, lsl #11
    9a34:	mov	lr, #65280	; 0xff00
    9a38:	and	r3, lr, r1, lsr #5
    9a3c:	orr	r2, r2, r3
    9a40:	ubfx	r1, r1, #21, #8
    9a44:	orr	r1, r2, r1
    9a48:	orr	r2, r9, #8
    9a4c:	mov	r3, r8
    9a50:	str	r1, [r3, r2]!
    9a54:	lsl	r1, r0, #11
    9a58:	uxtb16	r1, r1
    9a5c:	and	r2, lr, r0, lsr #5
    9a60:	orr	r1, r1, r0, lsl #27
    9a64:	orr	r1, r1, r2
    9a68:	ubfx	r0, r0, #21, #8
    9a6c:	orr	r0, r1, r0
    9a70:	str	r0, [r3, #4]
    9a74:	ldrd	r0, [r5, #72]	; 0x48
    9a78:	lsr	r2, r0, #5
    9a7c:	orr	r2, r2, r1, lsl #27
    9a80:	and	r2, r2, #-16777216	; 0xff000000
    9a84:	and	r3, r1, ip
    9a88:	orr	r2, r2, r3, lsl #11
    9a8c:	and	r3, lr, r1, lsr #5
    9a90:	orr	r2, r2, r3
    9a94:	ubfx	r1, r1, #21, #8
    9a98:	orr	r1, r2, r1
    9a9c:	ldr	r2, [r6, #4]
    9aa0:	mov	r3, r8
    9aa4:	str	r1, [r3, r9]!
    9aa8:	and	r1, r0, ip
    9aac:	and	r6, lr, r0, lsr #5
    9ab0:	orr	r1, r6, r1, lsl #11
    9ab4:	ubfx	r6, r0, #21, #8
    9ab8:	orr	r1, r1, r6
    9abc:	lsr	r2, r2, #29
    9ac0:	orr	r0, r2, r0, lsl #3
    9ac4:	orr	r0, r1, r0, lsl #24
    9ac8:	str	r0, [r3, #4]
    9acc:	add	r1, r9, #16
    9ad0:	mov	r0, r8
    9ad4:	mov	r2, r5
    9ad8:	bl	9b10 <rb_sha512_process_block>
    9adc:	mov	r0, r5
    9ae0:	ldr	r1, [r0, r7]!
    9ae4:	ldr	r0, [r0, #4]
    9ae8:	rev	r0, r0
    9aec:	mov	r2, r4
    9af0:	str	r0, [r2, r7]!
    9af4:	rev	r0, r1
    9af8:	str	r0, [r2, #4]
    9afc:	add	r7, r7, #8
    9b00:	cmp	r7, #64	; 0x40
    9b04:	bne	9adc <rb_sha512_finish_ctx+0x144>
    9b08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    9b0c:	.word	0x0000bbb8

00009b10 <rb_sha512_process_block>:
    9b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b14:	add	fp, sp, #28
    9b18:	sub	sp, sp, #796	; 0x31c
    9b1c:	ldr	r3, [r2, #64]	; 0x40
    9b20:	adds	r3, r3, r1
    9b24:	str	r3, [r2, #64]	; 0x40
    9b28:	ldr	r3, [r2, #68]	; 0x44
    9b2c:	adcs	r3, r3, #0
    9b30:	str	r3, [r2, #68]	; 0x44
    9b34:	mov	r3, #0
    9b38:	adc	r7, r3, #0
    9b3c:	lsr	r6, r1, #3
    9b40:	ldr	r1, [r2, #60]	; 0x3c
    9b44:	str	r1, [sp, #100]	; 0x64
    9b48:	mov	r1, r2
    9b4c:	ldr	lr, [r1, #56]!	; 0x38
    9b50:	str	r1, [sp, #24]
    9b54:	ldr	r1, [r2, #52]	; 0x34
    9b58:	str	r1, [sp, #96]	; 0x60
    9b5c:	mov	r1, r2
    9b60:	ldr	r3, [r1, #48]!	; 0x30
    9b64:	str	r3, [sp, #92]	; 0x5c
    9b68:	str	r1, [sp, #20]
    9b6c:	ldr	r1, [r2, #44]	; 0x2c
    9b70:	str	r1, [sp, #88]	; 0x58
    9b74:	mov	r1, r2
    9b78:	ldr	r3, [r1, #40]!	; 0x28
    9b7c:	str	r3, [sp, #84]	; 0x54
    9b80:	str	r1, [sp, #16]
    9b84:	ldr	r1, [r2, #36]	; 0x24
    9b88:	str	r1, [sp, #80]	; 0x50
    9b8c:	mov	r1, r2
    9b90:	ldr	r3, [r1, #32]!
    9b94:	str	r3, [sp, #76]	; 0x4c
    9b98:	str	r1, [sp, #12]
    9b9c:	ldr	sl, [r2, #28]
    9ba0:	mov	r1, r2
    9ba4:	ldr	r3, [r1, #24]!
    9ba8:	str	r3, [sp, #72]	; 0x48
    9bac:	str	r1, [sp, #8]
    9bb0:	ldm	r2, {r1, r3}
    9bb4:	str	r3, [sp, #56]	; 0x38
    9bb8:	str	r1, [sp, #60]	; 0x3c
    9bbc:	ldr	r1, [r2, #12]
    9bc0:	str	r1, [sp, #64]	; 0x40
    9bc4:	ldr	r1, [r2, #20]
    9bc8:	str	r1, [sp, #68]	; 0x44
    9bcc:	mov	r1, r2
    9bd0:	ldr	r3, [r1, #16]!
    9bd4:	str	r3, [sp, #52]	; 0x34
    9bd8:	str	r1, [sp, #4]
    9bdc:	mov	r1, r2
    9be0:	ldr	r3, [r1, #8]!
    9be4:	str	r3, [sp, #48]	; 0x30
    9be8:	str	r1, [sp]
    9bec:	cmp	r7, #1
    9bf0:	bne	9c0c <rb_sha512_process_block+0xfc>
    9bf4:	ldr	r4, [r2, #72]	; 0x48
    9bf8:	ldr	r1, [r2, #76]	; 0x4c
    9bfc:	adds	r4, r4, #1
    9c00:	adc	r1, r1, #0
    9c04:	str	r4, [r2, #72]	; 0x48
    9c08:	str	r1, [r2, #76]	; 0x4c
    9c0c:	str	r2, [sp, #28]
    9c10:	cmp	r6, #0
    9c14:	beq	a014 <rb_sha512_process_block+0x504>
    9c18:	add	r7, sp, #152	; 0x98
    9c1c:	mov	r3, #0
    9c20:	mov	r1, r0
    9c24:	ldr	r2, [r1, -r3]!
    9c28:	ldr	r1, [r1, #4]
    9c2c:	rev	r1, r1
    9c30:	str	r1, [r7, -r3]
    9c34:	sub	r1, r7, r3
    9c38:	rev	r2, r2
    9c3c:	str	r2, [r1, #4]
    9c40:	sub	r3, r3, #8
    9c44:	cmn	r3, #128	; 0x80
    9c48:	bne	9c20 <rb_sha512_process_block+0x110>
    9c4c:	str	r6, [sp, #32]
    9c50:	sub	r0, r0, r3
    9c54:	str	r0, [sp, #36]	; 0x24
    9c58:	mov	r0, #0
    9c5c:	add	r1, sp, #152	; 0x98
    9c60:	mov	r4, r1
    9c64:	add	r1, r1, r0
    9c68:	ldrd	r2, [r1, #112]	; 0x70
    9c6c:	lsr	r7, r3, #19
    9c70:	orr	r7, r7, r2, lsl #13
    9c74:	lsl	r6, r3, #3
    9c78:	orr	r6, r6, r2, lsr #29
    9c7c:	eor	r6, r6, r3, lsr #6
    9c80:	eor	r7, r6, r7
    9c84:	lsr	r6, r2, #6
    9c88:	orr	r6, r6, r3, lsl #26
    9c8c:	lsr	r5, r3, #29
    9c90:	orr	r5, r5, r2, lsl #3
    9c94:	eor	r6, r5, r6
    9c98:	lsr	r2, r2, #19
    9c9c:	orr	r2, r2, r3, lsl #13
    9ca0:	eor	r2, r6, r2
    9ca4:	ldr	r3, [r4, r0]
    9ca8:	ldr	r6, [r1, #4]
    9cac:	ldr	r5, [r1, #8]
    9cb0:	ldr	r4, [r1, #12]
    9cb4:	ldrd	r8, [r1, #72]	; 0x48
    9cb8:	adds	r3, r3, r8
    9cbc:	adc	r6, r6, r9
    9cc0:	adds	r2, r3, r2
    9cc4:	adc	ip, r6, r7
    9cc8:	lsr	r7, r5, #7
    9ccc:	orr	r7, r7, r4, lsl #25
    9cd0:	lsr	r6, r5, #8
    9cd4:	orr	r6, r6, r4, lsl #24
    9cd8:	eor	r7, r6, r7
    9cdc:	lsrs	r6, r4, #1
    9ce0:	rrx	r3, r5
    9ce4:	eor	r3, r7, r3
    9ce8:	orr	r7, r6, r5, lsl #31
    9cec:	lsr	r6, r4, #8
    9cf0:	adds	r2, r2, r3
    9cf4:	orr	r3, r6, r5, lsl #24
    9cf8:	eor	r3, r3, r4, lsr #7
    9cfc:	eor	r3, r3, r7
    9d00:	adc	r3, ip, r3
    9d04:	strd	r2, [r1, #128]	; 0x80
    9d08:	add	r0, r0, #8
    9d0c:	cmp	r0, #512	; 0x200
    9d10:	bne	9c5c <rb_sha512_process_block+0x14c>
    9d14:	mov	ip, #0
    9d18:	ldr	r0, [sp, #60]	; 0x3c
    9d1c:	str	r0, [sp, #132]	; 0x84
    9d20:	ldr	r0, [sp, #56]	; 0x38
    9d24:	str	r0, [sp, #128]	; 0x80
    9d28:	ldr	r2, [sp, #48]	; 0x30
    9d2c:	ldr	r3, [sp, #64]	; 0x40
    9d30:	ldr	r4, [sp, #52]	; 0x34
    9d34:	str	r4, [sp, #144]	; 0x90
    9d38:	ldr	r4, [sp, #68]	; 0x44
    9d3c:	str	r4, [sp, #140]	; 0x8c
    9d40:	ldr	r6, [sp, #72]	; 0x48
    9d44:	str	sl, [sp, #40]	; 0x28
    9d48:	str	sl, [sp, #124]	; 0x7c
    9d4c:	ldr	r9, [sp, #76]	; 0x4c
    9d50:	ldr	r8, [sp, #80]	; 0x50
    9d54:	ldr	r5, [sp, #84]	; 0x54
    9d58:	ldr	r7, [sp, #88]	; 0x58
    9d5c:	ldr	r0, [sp, #92]	; 0x5c
    9d60:	str	r0, [sp, #148]	; 0x94
    9d64:	ldr	r4, [sp, #96]	; 0x60
    9d68:	str	r4, [sp, #136]	; 0x88
    9d6c:	str	lr, [sp, #44]	; 0x2c
    9d70:	ldr	r4, [sp, #100]	; 0x64
    9d74:	str	r6, [sp, #112]	; 0x70
    9d78:	ldr	r0, [sp, #136]	; 0x88
    9d7c:	str	r0, [sp, #116]	; 0x74
    9d80:	mov	r1, r9
    9d84:	ldr	r9, [sp, #148]	; 0x94
    9d88:	str	r9, [sp, #108]	; 0x6c
    9d8c:	mov	r6, r7
    9d90:	str	r5, [sp, #148]	; 0x94
    9d94:	mov	r7, r8
    9d98:	mov	r5, r1
    9d9c:	ldr	r1, [sp, #140]	; 0x8c
    9da0:	str	r1, [sp, #104]	; 0x68
    9da4:	ldr	r1, [sp, #144]	; 0x90
    9da8:	str	r1, [sp, #120]	; 0x78
    9dac:	mov	r8, r3
    9db0:	mov	sl, r2
    9db4:	ldr	r3, [sp, #128]	; 0x80
    9db8:	ldr	r2, [sp, #132]	; 0x84
    9dbc:	bic	r0, r0, r7
    9dc0:	str	r6, [sp, #136]	; 0x88
    9dc4:	and	r1, r7, r6
    9dc8:	orr	r0, r1, r0
    9dcc:	bic	r1, r9, r5
    9dd0:	ldr	r6, [sp, #148]	; 0x94
    9dd4:	and	r6, r5, r6
    9dd8:	orr	r1, r6, r1
    9ddc:	adds	r1, r1, lr
    9de0:	adc	lr, r0, r4
    9de4:	lsr	r6, r7, #18
    9de8:	orr	r6, r6, r5, lsl #14
    9dec:	lsr	r4, r7, #14
    9df0:	orr	r4, r4, r5, lsl #18
    9df4:	eor	r6, r4, r6
    9df8:	lsl	r4, r7, #23
    9dfc:	orr	r4, r4, r5, lsr #9
    9e00:	eor	r6, r6, r4
    9e04:	lsr	r4, r5, #18
    9e08:	orr	r4, r4, r7, lsl #14
    9e0c:	lsr	r0, r5, #14
    9e10:	orr	r0, r0, r7, lsl #18
    9e14:	eor	r0, r0, r4
    9e18:	lsr	r4, r7, #9
    9e1c:	orr	r4, r4, r5, lsl #23
    9e20:	eor	r0, r0, r4
    9e24:	adds	r0, r1, r0
    9e28:	adc	r1, lr, r6
    9e2c:	ldr	r6, [pc, #632]	; a0ac <rb_sha512_process_block+0x59c>
    9e30:	add	r6, pc, r6
    9e34:	ldr	r4, [r6, ip]!
    9e38:	ldr	r6, [r6, #4]
    9e3c:	adds	r0, r0, r4
    9e40:	adc	r1, r1, r6
    9e44:	add	r6, sp, #152	; 0x98
    9e48:	mov	r4, r6
    9e4c:	add	r6, r6, ip
    9e50:	ldr	r6, [r6, #4]
    9e54:	ldr	r4, [r4, ip]
    9e58:	adds	r9, r0, r4
    9e5c:	adc	r6, r1, r6
    9e60:	ldr	lr, [sp, #104]	; 0x68
    9e64:	and	r0, r8, lr
    9e68:	str	r8, [sp, #140]	; 0x8c
    9e6c:	eor	r1, r8, lr
    9e70:	and	r1, r3, r1
    9e74:	eor	r0, r1, r0
    9e78:	str	r0, [sp, #132]	; 0x84
    9e7c:	lsl	r1, r3, #30
    9e80:	orr	r1, r1, r2, lsr #2
    9e84:	lsr	r0, r3, #28
    9e88:	orr	r0, r0, r2, lsl #4
    9e8c:	eor	r0, r0, r1
    9e90:	lsl	r1, r3, #25
    9e94:	orr	r1, r1, r2, lsr #7
    9e98:	eor	r8, r0, r1
    9e9c:	ldr	r4, [sp, #120]	; 0x78
    9ea0:	and	r1, sl, r4
    9ea4:	str	sl, [sp, #144]	; 0x90
    9ea8:	eor	r0, sl, r4
    9eac:	mov	sl, r4
    9eb0:	and	r0, r2, r0
    9eb4:	eor	r0, r0, r1
    9eb8:	lsr	r1, r2, #28
    9ebc:	orr	r1, r1, r3, lsl #4
    9ec0:	lsr	r4, r3, #2
    9ec4:	orr	r4, r4, r2, lsl #30
    9ec8:	eor	r1, r1, r4
    9ecc:	lsr	r4, r3, #7
    9ed0:	orr	r4, r4, r2, lsl #25
    9ed4:	eor	r1, r1, r4
    9ed8:	adds	r0, r1, r0
    9edc:	ldr	r1, [sp, #132]	; 0x84
    9ee0:	adc	r1, r8, r1
    9ee4:	adds	r0, r0, r9
    9ee8:	str	r0, [sp, #132]	; 0x84
    9eec:	adc	r0, r1, r6
    9ef0:	str	r0, [sp, #128]	; 0x80
    9ef4:	ldr	r0, [sp, #112]	; 0x70
    9ef8:	adds	r9, r9, r0
    9efc:	ldr	r0, [sp, #124]	; 0x7c
    9f00:	adc	r8, r6, r0
    9f04:	add	ip, ip, #8
    9f08:	cmp	ip, #640	; 0x280
    9f0c:	mov	r6, sl
    9f10:	mov	r0, lr
    9f14:	str	lr, [sp, #124]	; 0x7c
    9f18:	ldr	lr, [sp, #108]	; 0x6c
    9f1c:	ldr	r4, [sp, #116]	; 0x74
    9f20:	bne	9d74 <rb_sha512_process_block+0x264>
    9f24:	mov	sl, lr
    9f28:	mov	r1, r4
    9f2c:	ldr	lr, [sp, #44]	; 0x2c
    9f30:	adds	lr, sl, lr
    9f34:	ldr	r6, [sp, #100]	; 0x64
    9f38:	adc	r6, r4, r6
    9f3c:	str	r6, [sp, #100]	; 0x64
    9f40:	ldr	r6, [sp, #92]	; 0x5c
    9f44:	ldr	r1, [sp, #148]	; 0x94
    9f48:	adds	r6, r1, r6
    9f4c:	str	r6, [sp, #92]	; 0x5c
    9f50:	ldr	r6, [sp, #96]	; 0x60
    9f54:	ldr	r4, [sp, #136]	; 0x88
    9f58:	adc	r6, r4, r6
    9f5c:	str	r6, [sp, #96]	; 0x60
    9f60:	ldr	r6, [sp, #84]	; 0x54
    9f64:	adds	r6, r5, r6
    9f68:	str	r6, [sp, #84]	; 0x54
    9f6c:	ldr	r6, [sp, #88]	; 0x58
    9f70:	adc	r6, r7, r6
    9f74:	str	r6, [sp, #88]	; 0x58
    9f78:	ldr	r7, [sp, #76]	; 0x4c
    9f7c:	adds	r7, r9, r7
    9f80:	str	r7, [sp, #76]	; 0x4c
    9f84:	ldr	r7, [sp, #80]	; 0x50
    9f88:	adc	r7, r8, r7
    9f8c:	str	r7, [sp, #80]	; 0x50
    9f90:	ldr	r7, [sp, #72]	; 0x48
    9f94:	ldr	r1, [sp, #120]	; 0x78
    9f98:	adds	r7, r1, r7
    9f9c:	str	r7, [sp, #72]	; 0x48
    9fa0:	ldr	sl, [sp, #40]	; 0x28
    9fa4:	adc	sl, r0, sl
    9fa8:	ldr	r7, [sp, #52]	; 0x34
    9fac:	ldr	r6, [sp, #144]	; 0x90
    9fb0:	adds	r7, r6, r7
    9fb4:	str	r7, [sp, #52]	; 0x34
    9fb8:	ldr	r7, [sp, #68]	; 0x44
    9fbc:	ldr	r6, [sp, #140]	; 0x8c
    9fc0:	adc	r7, r6, r7
    9fc4:	str	r7, [sp, #68]	; 0x44
    9fc8:	ldr	r7, [sp, #48]	; 0x30
    9fcc:	adds	r7, r2, r7
    9fd0:	str	r7, [sp, #48]	; 0x30
    9fd4:	ldr	r2, [sp, #64]	; 0x40
    9fd8:	adc	r2, r3, r2
    9fdc:	str	r2, [sp, #64]	; 0x40
    9fe0:	ldr	r2, [sp, #60]	; 0x3c
    9fe4:	ldr	r0, [sp, #132]	; 0x84
    9fe8:	adds	r2, r0, r2
    9fec:	str	r2, [sp, #60]	; 0x3c
    9ff0:	ldr	r0, [sp, #56]	; 0x38
    9ff4:	ldr	r1, [sp, #128]	; 0x80
    9ff8:	adc	r0, r1, r0
    9ffc:	str	r0, [sp, #56]	; 0x38
    a000:	ldr	r6, [sp, #32]
    a004:	subs	r6, r6, #16
    a008:	ldr	r0, [sp, #36]	; 0x24
    a00c:	add	r7, sp, #152	; 0x98
    a010:	bne	9c1c <rb_sha512_process_block+0x10c>
    a014:	ldr	r0, [sp, #28]
    a018:	ldr	r1, [sp, #60]	; 0x3c
    a01c:	ldr	r2, [sp, #56]	; 0x38
    a020:	stm	r0, {r1, r2}
    a024:	ldr	r0, [sp, #64]	; 0x40
    a028:	ldr	r1, [sp]
    a02c:	ldr	r2, [sp, #48]	; 0x30
    a030:	str	r2, [r1]
    a034:	str	r0, [r1, #4]
    a038:	ldr	r0, [sp, #68]	; 0x44
    a03c:	ldr	r1, [sp, #4]
    a040:	ldr	r2, [sp, #52]	; 0x34
    a044:	str	r2, [r1]
    a048:	str	r0, [r1, #4]
    a04c:	ldr	r0, [sp, #8]
    a050:	ldr	r1, [sp, #72]	; 0x48
    a054:	stm	r0, {r1, sl}
    a058:	ldr	r0, [sp, #80]	; 0x50
    a05c:	ldr	r1, [sp, #12]
    a060:	ldr	r2, [sp, #76]	; 0x4c
    a064:	str	r2, [r1]
    a068:	str	r0, [r1, #4]
    a06c:	ldr	r0, [sp, #88]	; 0x58
    a070:	ldr	r1, [sp, #16]
    a074:	ldr	r2, [sp, #84]	; 0x54
    a078:	str	r2, [r1]
    a07c:	str	r0, [r1, #4]
    a080:	ldr	r0, [sp, #96]	; 0x60
    a084:	ldr	r1, [sp, #20]
    a088:	ldr	r2, [sp, #92]	; 0x5c
    a08c:	str	r2, [r1]
    a090:	str	r0, [r1, #4]
    a094:	ldr	r0, [sp, #100]	; 0x64
    a098:	ldr	r1, [sp, #24]
    a09c:	str	lr, [r1]
    a0a0:	str	r0, [r1, #4]
    a0a4:	sub	sp, fp, #28
    a0a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0ac:	.word	0x0000b518

0000a0b0 <rb_init_bh>:
    a0b0:	push	{fp, lr}
    a0b4:	mov	fp, sp
    a0b8:	mov	r0, #12
    a0bc:	bl	a0d4 <rb_malloc>
    a0c0:	ldr	r1, [pc, #8]	; a0d0 <rb_init_bh+0x20>
    a0c4:	add	r1, pc, r1
    a0c8:	str	r0, [r1]
    a0cc:	pop	{fp, pc}
    a0d0:	.word	0x00030854

0000a0d4 <rb_malloc>:
    a0d4:	push	{fp, lr}
    a0d8:	mov	fp, sp
    a0dc:	mov	r1, r0
    a0e0:	mov	r0, #1
    a0e4:	bl	4f1c <calloc@plt>
    a0e8:	cmp	r0, #0
    a0ec:	popne	{fp, pc}
    a0f0:	bl	52a0 <rb_outofmemory@plt>

0000a0f4 <rb_bh_create>:
    a0f4:	push	{r4, r5, r6, r7, fp, lr}
    a0f8:	add	fp, sp, #16
    a0fc:	cmp	r0, #0
    a100:	beq	a170 <rb_bh_create+0x7c>
    a104:	mov	r6, r1
    a108:	cmp	r1, #0
    a10c:	ble	a170 <rb_bh_create+0x7c>
    a110:	mov	r7, r0
    a114:	cmp	r0, #11
    a118:	bls	a180 <rb_bh_create+0x8c>
    a11c:	mov	r4, r2
    a120:	mov	r0, #48	; 0x30
    a124:	bl	a0d4 <rb_malloc>
    a128:	mov	r5, r0
    a12c:	str	r7, [r0, #12]
    a130:	str	r6, [r0, #16]
    a134:	cmp	r4, #0
    a138:	beq	a14c <rb_bh_create+0x58>
    a13c:	mov	r0, r4
    a140:	bl	a1e0 <rb_strdup>
    a144:	str	r0, [r5, #44]	; 0x2c
    a148:	b	a154 <rb_bh_create+0x60>
    a14c:	cmp	r5, #0
    a150:	beq	a190 <rb_bh_create+0x9c>
    a154:	ldr	r2, [pc, #68]	; a1a0 <rb_bh_create+0xac>
    a158:	ldr	r2, [pc, r2]
    a15c:	mov	r0, r5
    a160:	mov	r1, r5
    a164:	bl	a210 <rb_dlinkAdd>
    a168:	mov	r0, r5
    a16c:	pop	{r4, r5, r6, r7, fp, pc}
    a170:	ldr	r0, [pc, #44]	; a1a4 <rb_bh_create+0xb0>
    a174:	add	r0, pc, r0
    a178:	mov	r1, #147	; 0x93
    a17c:	bl	a1b0 <_rb_bh_fail>
    a180:	ldr	r0, [pc, #32]	; a1a8 <rb_bh_create+0xb4>
    a184:	add	r0, pc, r0
    a188:	mov	r1, #151	; 0x97
    a18c:	bl	a1b0 <_rb_bh_fail>
    a190:	ldr	r0, [pc, #20]	; a1ac <rb_bh_create+0xb8>
    a194:	add	r0, pc, r0
    a198:	mov	r1, #162	; 0xa2
    a19c:	bl	a1b0 <_rb_bh_fail>
    a1a0:	.word	0x000307c0
    a1a4:	.word	0x0000b50c
    a1a8:	.word	0x0000b52e
    a1ac:	.word	0x0000b559

0000a1b0 <_rb_bh_fail>:
    a1b0:	push	{fp, lr}
    a1b4:	mov	fp, sp
    a1b8:	mov	r3, r1
    a1bc:	mov	r1, r0
    a1c0:	ldr	r0, [pc, #16]	; a1d8 <_rb_bh_fail+0x28>
    a1c4:	add	r0, pc, r0
    a1c8:	ldr	r2, [pc, #12]	; a1dc <_rb_bh_fail+0x2c>
    a1cc:	add	r2, pc, r2
    a1d0:	bl	5240 <rb_lib_log@plt>
    a1d4:	bl	4d0c <abort@plt>
    a1d8:	.word	0x0000b5c2
    a1dc:	.word	0x0000b4dd

0000a1e0 <rb_strdup>:
    a1e0:	push	{r4, sl, fp, lr}
    a1e4:	add	fp, sp, #8
    a1e8:	mov	r4, r0
    a1ec:	bl	50fc <strlen@plt>
    a1f0:	add	r0, r0, #1
    a1f4:	bl	52c4 <malloc@plt>
    a1f8:	cmp	r0, #0
    a1fc:	beq	a20c <rb_strdup+0x2c>
    a200:	mov	r1, r4
    a204:	pop	{r4, sl, fp, lr}
    a208:	b	51b0 <strcpy@plt>
    a20c:	bl	52a0 <rb_outofmemory@plt>

0000a210 <rb_dlinkAdd>:
    a210:	mov	r3, #0
    a214:	stm	r1, {r0, r3}
    a218:	ldr	r0, [r2]
    a21c:	str	r0, [r1, #8]
    a220:	ldr	r0, [r2]
    a224:	cmp	r0, #0
    a228:	beq	a238 <rb_dlinkAdd+0x28>
    a22c:	add	r0, r0, #4
    a230:	str	r1, [r0]
    a234:	b	a248 <rb_dlinkAdd+0x38>
    a238:	mov	r0, r2
    a23c:	ldr	r3, [r0, #4]!
    a240:	cmp	r3, #0
    a244:	streq	r1, [r0]
    a248:	str	r1, [r2]
    a24c:	ldr	r0, [r2, #8]
    a250:	add	r0, r0, #1
    a254:	str	r0, [r2, #8]
    a258:	bx	lr

0000a25c <rb_bh_alloc>:
    a25c:	push	{fp, lr}
    a260:	mov	fp, sp
    a264:	cmp	r0, #0
    a268:	beq	a278 <rb_bh_alloc+0x1c>
    a26c:	ldr	r0, [r0, #12]
    a270:	pop	{fp, lr}
    a274:	b	a0d4 <rb_malloc>
    a278:	ldr	r0, [pc, #8]	; a288 <rb_bh_alloc+0x2c>
    a27c:	add	r0, pc, r0
    a280:	mov	r1, #186	; 0xba
    a284:	bl	a1b0 <_rb_bh_fail>
    a288:	.word	0x0000b491

0000a28c <rb_bh_free>:
    a28c:	push	{fp, lr}
    a290:	mov	fp, sp
    a294:	cmp	r0, #0
    a298:	beq	a2b4 <rb_bh_free+0x28>
    a29c:	cmp	r1, #0
    a2a0:	beq	a2c0 <rb_bh_free+0x34>
    a2a4:	mov	r0, r1
    a2a8:	bl	a2dc <rb_free>
    a2ac:	mov	r0, #0
    a2b0:	pop	{fp, pc}
    a2b4:	ldr	r0, [pc, #24]	; a2d4 <rb_bh_free+0x48>
    a2b8:	add	r0, pc, r0
    a2bc:	b	a2c8 <rb_bh_free+0x3c>
    a2c0:	ldr	r0, [pc, #16]	; a2d8 <rb_bh_free+0x4c>
    a2c4:	add	r0, pc, r0
    a2c8:	bl	5240 <rb_lib_log@plt>
    a2cc:	mov	r0, #1
    a2d0:	pop	{fp, pc}
    a2d4:	.word	0x0000b473
    a2d8:	.word	0x0000b487

0000a2dc <rb_free>:
    a2dc:	cmp	r0, #0
    a2e0:	bxeq	lr
    a2e4:	b	500c <free@plt>

0000a2e8 <rb_bh_destroy>:
    a2e8:	cmp	r0, #0
    a2ec:	moveq	r0, #1
    a2f0:	bxeq	lr
    a2f4:	push	{r4, sl, fp, lr}
    a2f8:	add	fp, sp, #8
    a2fc:	mov	r4, r0
    a300:	ldr	r1, [pc, #28]	; a324 <rb_bh_destroy+0x3c>
    a304:	ldr	r1, [pc, r1]
    a308:	bl	a328 <rb_dlinkDelete>
    a30c:	ldr	r0, [r4, #44]	; 0x2c
    a310:	bl	a2dc <rb_free>
    a314:	mov	r0, r4
    a318:	bl	a2dc <rb_free>
    a31c:	mov	r0, #0
    a320:	pop	{r4, sl, fp, pc}
    a324:	.word	0x00030614

0000a328 <rb_dlinkDelete>:
    a328:	ldr	ip, [r0, #4]
    a32c:	ldr	r3, [r0, #8]
    a330:	add	r2, r3, #4
    a334:	cmp	r3, #0
    a338:	addeq	r2, r1, #4
    a33c:	str	ip, [r2]
    a340:	ldmib	r0, {r2, ip}
    a344:	cmp	r2, #0
    a348:	mov	r3, r1
    a34c:	addne	r3, r2, #8
    a350:	str	ip, [r3]
    a354:	mov	r2, #0
    a358:	str	r2, [r0, #4]
    a35c:	str	r2, [r0, #8]
    a360:	ldr	r0, [r1, #8]
    a364:	sub	r0, r0, #1
    a368:	str	r0, [r1, #8]
    a36c:	bx	lr

0000a370 <rb_bh_usage>:
    a370:	cmp	r1, #0
    a374:	movne	r0, #0
    a378:	strne	r0, [r1]
    a37c:	cmp	r2, #0
    a380:	movne	r0, #0
    a384:	strne	r0, [r2]
    a388:	ldr	r0, [sp]
    a38c:	cmp	r3, #0
    a390:	movne	r1, #0
    a394:	strne	r1, [r3]
    a398:	cmp	r0, #0
    a39c:	ldrne	r1, [pc, #8]	; a3ac <rb_bh_usage+0x3c>
    a3a0:	addne	r1, pc, r1
    a3a4:	strne	r1, [r0]
    a3a8:	bx	lr
    a3ac:	.word	0x0000b3ca

0000a3b0 <rb_bh_usage_all>:
    a3b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a3b4:	add	fp, sp, #24
    a3b8:	sub	sp, sp, #8
    a3bc:	cmp	r0, #0
    a3c0:	beq	a42c <rb_bh_usage_all+0x7c>
    a3c4:	mov	r5, r0
    a3c8:	ldr	r0, [pc, #100]	; a434 <rb_bh_usage_all+0x84>
    a3cc:	ldr	r0, [pc, r0]
    a3d0:	ldr	r6, [r0]
    a3d4:	cmp	r6, #0
    a3d8:	beq	a42c <rb_bh_usage_all+0x7c>
    a3dc:	mov	r8, r1
    a3e0:	ldr	r7, [pc, #80]	; a438 <rb_bh_usage_all+0x88>
    a3e4:	add	r7, pc, r7
    a3e8:	ldr	r0, [r6]
    a3ec:	ldr	r2, [r0, #12]
    a3f0:	ldr	r3, [r0, #16]
    a3f4:	ldr	r4, [r0, #28]
    a3f8:	ldr	r1, [r0, #40]	; 0x28
    a3fc:	ldr	r0, [r0, #44]	; 0x2c
    a400:	cmp	r0, #0
    a404:	movne	r7, r0
    a408:	stm	sp, {r7, r8}
    a40c:	mul	r0, r3, r4
    a410:	mul	r3, r0, r2
    a414:	sub	r0, r0, r1
    a418:	mul	r2, r0, r2
    a41c:	blx	r5
    a420:	ldr	r6, [r6, #8]
    a424:	cmp	r6, #0
    a428:	bne	a3e8 <rb_bh_usage_all+0x38>
    a42c:	sub	sp, fp, #24
    a430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a434:	.word	0x0003054c
    a438:	.word	0x0000b393

0000a43c <rb_bh_total_usage>:
    a43c:	push	{r4, r5, r6, sl, fp, lr}
    a440:	add	fp, sp, #16
    a444:	ldr	r2, [pc, #100]	; a4b0 <rb_bh_total_usage+0x74>
    a448:	ldr	r2, [pc, r2]
    a44c:	ldr	r2, [r2]
    a450:	cmp	r2, #0
    a454:	beq	a494 <rb_bh_total_usage+0x58>
    a458:	mov	lr, #0
    a45c:	mov	ip, #0
    a460:	ldr	r3, [r2]
    a464:	ldr	r2, [r2, #8]
    a468:	ldr	r4, [r3, #12]
    a46c:	ldr	r5, [r3, #16]
    a470:	ldr	r6, [r3, #28]
    a474:	ldr	r3, [r3, #40]	; 0x28
    a478:	mul	r5, r5, r6
    a47c:	mla	lr, r5, r4, lr
    a480:	sub	r3, r5, r3
    a484:	mla	ip, r3, r4, ip
    a488:	cmp	r2, #0
    a48c:	bne	a460 <rb_bh_total_usage+0x24>
    a490:	b	a49c <rb_bh_total_usage+0x60>
    a494:	mov	ip, #0
    a498:	mov	lr, #0
    a49c:	cmp	r0, #0
    a4a0:	strne	lr, [r0]
    a4a4:	cmp	r1, #0
    a4a8:	strne	ip, [r1]
    a4ac:	pop	{r4, r5, r6, sl, fp, pc}
    a4b0:	.word	0x000304d0

0000a4b4 <rb_get_sockerr>:
    a4b4:	push	{r4, r5, r6, r7, fp, lr}
    a4b8:	add	fp, sp, #16
    a4bc:	sub	sp, sp, #16
    a4c0:	mov	r5, r0
    a4c4:	mov	r0, #0
    a4c8:	str	r0, [sp, #12]
    a4cc:	mov	r0, #4
    a4d0:	str	r0, [sp, #8]
    a4d4:	ldrb	r7, [r5, #17]
    a4d8:	bl	560c <__errno_location@plt>
    a4dc:	ldr	r6, [r0]
    a4e0:	tst	r7, #4
    a4e4:	bne	a4f4 <rb_get_sockerr+0x40>
    a4e8:	mov	r0, r6
    a4ec:	sub	sp, fp, #16
    a4f0:	pop	{r4, r5, r6, r7, fp, pc}
    a4f4:	mov	r4, r0
    a4f8:	mov	r0, r5
    a4fc:	bl	4e20 <rb_get_fd@plt>
    a500:	add	r1, sp, #8
    a504:	str	r1, [sp]
    a508:	add	r3, sp, #12
    a50c:	mov	r1, #1
    a510:	mov	r2, #4
    a514:	bl	5594 <getsockopt@plt>
    a518:	mov	r1, r0
    a51c:	ldr	r0, [sp, #12]
    a520:	cmp	r0, #0
    a524:	moveq	r0, r6
    a528:	cmp	r1, #0
    a52c:	movne	r0, r6
    a530:	str	r0, [r4]
    a534:	sub	sp, fp, #16
    a538:	pop	{r4, r5, r6, r7, fp, pc}

0000a53c <rb_get_fd>:
    a53c:	cmp	r0, #0
    a540:	ldrne	r0, [r0, #12]
    a544:	mvneq	r0, #0
    a548:	bx	lr

0000a54c <rb_getmaxconnect>:
    a54c:	ldr	r0, [pc, #8]	; a55c <rb_getmaxconnect+0x10>
    a550:	ldr	r0, [pc, r0]
    a554:	ldr	r0, [r0]
    a558:	bx	lr
    a55c:	.word	0x0001de38

0000a560 <rb_set_buffers>:
    a560:	push	{r4, r5, fp, lr}
    a564:	add	fp, sp, #8
    a568:	sub	sp, sp, #8
    a56c:	str	r1, [sp, #4]
    a570:	cmp	r0, #0
    a574:	beq	a5a0 <rb_set_buffers+0x40>
    a578:	mov	r4, r0
    a57c:	ldr	r0, [r0, #12]
    a580:	mov	r5, #4
    a584:	str	r5, [sp]
    a588:	add	r3, sp, #4
    a58c:	mov	r1, #1
    a590:	mov	r2, #8
    a594:	bl	55b8 <setsockopt@plt>
    a598:	cmp	r0, #0
    a59c:	beq	a5ac <rb_set_buffers+0x4c>
    a5a0:	mov	r0, #0
    a5a4:	sub	sp, fp, #8
    a5a8:	pop	{r4, r5, fp, pc}
    a5ac:	ldr	r0, [r4, #12]
    a5b0:	str	r5, [sp]
    a5b4:	add	r3, sp, #4
    a5b8:	mov	r1, #1
    a5bc:	mov	r2, #7
    a5c0:	bl	55b8 <setsockopt@plt>
    a5c4:	clz	r0, r0
    a5c8:	lsr	r0, r0, #5
    a5cc:	sub	sp, fp, #8
    a5d0:	pop	{r4, r5, fp, pc}

0000a5d4 <rb_set_nb>:
    a5d4:	push	{r4, r5, fp, lr}
    a5d8:	add	fp, sp, #8
    a5dc:	cmp	r0, #0
    a5e0:	beq	a634 <rb_set_nb+0x60>
    a5e4:	ldr	r4, [r0, #12]
    a5e8:	bl	5444 <rb_setup_fd@plt>
    a5ec:	mov	r5, r0
    a5f0:	cmp	r0, #0
    a5f4:	bne	a638 <rb_set_nb+0x64>
    a5f8:	mov	r5, #0
    a5fc:	mov	r0, r4
    a600:	mov	r1, #3
    a604:	mov	r2, #0
    a608:	bl	551c <fcntl@plt>
    a60c:	cmn	r0, #1
    a610:	beq	a638 <rb_set_nb+0x64>
    a614:	orr	r2, r0, #2048	; 0x800
    a618:	mov	r0, r4
    a61c:	mov	r1, #4
    a620:	bl	551c <fcntl@plt>
    a624:	mvn	r1, #0
    a628:	subs	r0, r0, r1
    a62c:	movwne	r0, #1
    a630:	pop	{r4, r5, fp, pc}
    a634:	mov	r5, #0
    a638:	mov	r0, r5
    a63c:	pop	{r4, r5, fp, pc}

0000a640 <rb_setup_fd>:
    a640:	ldr	r1, [pc, #4]	; a64c <rb_setup_fd+0xc>
    a644:	ldr	r1, [pc, r1]
    a648:	bx	r1
    a64c:	.word	0x0003032c

0000a650 <rb_settimeout>:
    a650:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a654:	add	fp, sp, #24
    a658:	cmp	r0, #0
    a65c:	beq	a6f4 <rb_settimeout+0xa4>
    a660:	mov	r7, r2
    a664:	mov	r4, r0
    a668:	ldr	r5, [r0, #44]	; 0x2c
    a66c:	cmp	r2, #0
    a670:	beq	a6f8 <rb_settimeout+0xa8>
    a674:	mov	r8, r3
    a678:	mov	r6, r1
    a67c:	cmp	r5, #0
    a680:	bne	a694 <rb_settimeout+0x44>
    a684:	mov	r0, #28
    a688:	bl	a7c0 <rb_malloc>
    a68c:	mov	r5, r0
    a690:	str	r0, [r4, #44]	; 0x2c
    a694:	str	r4, [r5]
    a698:	bl	5108 <rb_current_time@plt>
    a69c:	add	r0, r0, r6
    a6a0:	add	r1, r5, #16
    a6a4:	stm	r1, {r0, r7, r8}
    a6a8:	add	r1, r5, #4
    a6ac:	ldr	r2, [pc, #164]	; a758 <rb_settimeout+0x108>
    a6b0:	add	r2, pc, r2
    a6b4:	mov	r0, r5
    a6b8:	bl	a7e0 <rb_dlinkAdd>
    a6bc:	ldr	r0, [pc, #152]	; a75c <rb_settimeout+0x10c>
    a6c0:	ldr	r0, [pc, r0]
    a6c4:	cmp	r0, #0
    a6c8:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    a6cc:	ldr	r1, [pc, #140]	; a760 <rb_settimeout+0x110>
    a6d0:	ldr	r1, [pc, r1]
    a6d4:	ldr	r0, [pc, #136]	; a764 <rb_settimeout+0x114>
    a6d8:	add	r0, pc, r0
    a6dc:	mov	r2, #0
    a6e0:	mov	r3, #5
    a6e4:	bl	5420 <rb_event_add@plt>
    a6e8:	ldr	r1, [pc, #120]	; a768 <rb_settimeout+0x118>
    a6ec:	add	r1, pc, r1
    a6f0:	str	r0, [r1]
    a6f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a6f8:	cmp	r5, #0
    a6fc:	beq	a6f4 <rb_settimeout+0xa4>
    a700:	add	r0, r5, #4
    a704:	ldr	r6, [pc, #64]	; a74c <rb_settimeout+0xfc>
    a708:	add	r6, pc, r6
    a70c:	mov	r1, r6
    a710:	bl	a76c <rb_dlinkDelete>
    a714:	mov	r0, r5
    a718:	bl	a7b4 <rb_free>
    a71c:	mov	r5, #0
    a720:	str	r5, [r4, #44]	; 0x2c
    a724:	ldr	r0, [r6, #8]
    a728:	cmp	r0, #0
    a72c:	bne	a6f4 <rb_settimeout+0xa4>
    a730:	ldr	r0, [pc, #24]	; a750 <rb_settimeout+0x100>
    a734:	ldr	r0, [pc, r0]
    a738:	bl	4dd8 <rb_event_delete@plt>
    a73c:	ldr	r0, [pc, #16]	; a754 <rb_settimeout+0x104>
    a740:	add	r0, pc, r0
    a744:	str	r5, [r0]
    a748:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a74c:	.word	0x00030218
    a750:	.word	0x000301f8
    a754:	.word	0x000301ec
    a758:	.word	0x00030270
    a75c:	.word	0x0003026c
    a760:	.word	0x0001dc68
    a764:	.word	0x0000b0d4
    a768:	.word	0x00030240

0000a76c <rb_dlinkDelete>:
    a76c:	ldr	ip, [r0, #4]
    a770:	ldr	r3, [r0, #8]
    a774:	add	r2, r3, #4
    a778:	cmp	r3, #0
    a77c:	addeq	r2, r1, #4
    a780:	str	ip, [r2]
    a784:	ldmib	r0, {r2, ip}
    a788:	cmp	r2, #0
    a78c:	mov	r3, r1
    a790:	addne	r3, r2, #8
    a794:	str	ip, [r3]
    a798:	mov	r2, #0
    a79c:	str	r2, [r0, #4]
    a7a0:	str	r2, [r0, #8]
    a7a4:	ldr	r0, [r1, #8]
    a7a8:	sub	r0, r0, #1
    a7ac:	str	r0, [r1, #8]
    a7b0:	bx	lr

0000a7b4 <rb_free>:
    a7b4:	cmp	r0, #0
    a7b8:	bxeq	lr
    a7bc:	b	500c <free@plt>

0000a7c0 <rb_malloc>:
    a7c0:	push	{fp, lr}
    a7c4:	mov	fp, sp
    a7c8:	mov	r1, r0
    a7cc:	mov	r0, #1
    a7d0:	bl	4f1c <calloc@plt>
    a7d4:	cmp	r0, #0
    a7d8:	popne	{fp, pc}
    a7dc:	bl	52a0 <rb_outofmemory@plt>

0000a7e0 <rb_dlinkAdd>:
    a7e0:	mov	r3, #0
    a7e4:	stm	r1, {r0, r3}
    a7e8:	ldr	r0, [r2]
    a7ec:	str	r0, [r1, #8]
    a7f0:	ldr	r0, [r2]
    a7f4:	cmp	r0, #0
    a7f8:	beq	a808 <rb_dlinkAdd+0x28>
    a7fc:	add	r0, r0, #4
    a800:	str	r1, [r0]
    a804:	b	a818 <rb_dlinkAdd+0x38>
    a808:	mov	r0, r2
    a80c:	ldr	r3, [r0, #4]!
    a810:	cmp	r3, #0
    a814:	streq	r1, [r0]
    a818:	str	r1, [r2]
    a81c:	ldr	r0, [r2, #8]
    a820:	add	r0, r0, #1
    a824:	str	r0, [r2, #8]
    a828:	bx	lr

0000a82c <rb_checktimeouts>:
    a82c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a830:	add	fp, sp, #28
    a834:	sub	sp, sp, #4
    a838:	ldr	r4, [pc, #136]	; a8c8 <rb_checktimeouts+0x9c>
    a83c:	ldr	r4, [pc, r4]
    a840:	cmp	r4, #0
    a844:	beq	a8c0 <rb_checktimeouts+0x94>
    a848:	ldr	r8, [pc, #124]	; a8cc <rb_checktimeouts+0xa0>
    a84c:	add	r8, pc, r8
    a850:	mov	r9, #0
    a854:	b	a860 <rb_checktimeouts+0x34>
    a858:	cmp	r4, #0
    a85c:	beq	a8c0 <rb_checktimeouts+0x94>
    a860:	ldr	r6, [r4]
    a864:	ldr	r4, [r4, #8]
    a868:	ldr	r5, [r6]
    a86c:	cmp	r5, #0
    a870:	beq	a858 <rb_checktimeouts+0x2c>
    a874:	ldrb	r0, [r5, #16]
    a878:	tst	r0, #1
    a87c:	beq	a858 <rb_checktimeouts+0x2c>
    a880:	ldr	r7, [r6, #16]
    a884:	bl	5108 <rb_current_time@plt>
    a888:	cmp	r7, r0
    a88c:	bge	a858 <rb_checktimeouts+0x2c>
    a890:	ldr	sl, [r6, #20]
    a894:	ldr	r7, [r6, #24]
    a898:	add	r0, r6, #4
    a89c:	mov	r1, r8
    a8a0:	bl	a76c <rb_dlinkDelete>
    a8a4:	str	r9, [r5, #44]	; 0x2c
    a8a8:	mov	r0, r6
    a8ac:	bl	a7b4 <rb_free>
    a8b0:	mov	r0, r5
    a8b4:	mov	r1, r7
    a8b8:	blx	sl
    a8bc:	b	a858 <rb_checktimeouts+0x2c>
    a8c0:	sub	sp, fp, #28
    a8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8c8:	.word	0x000300e4
    a8cc:	.word	0x000300d4

0000a8d0 <rb_bind>:
    a8d0:	push	{r4, r5, fp, lr}
    a8d4:	add	fp, sp, #8
    a8d8:	mov	r4, r1
    a8dc:	mov	r5, r0
    a8e0:	bl	a90c <rb_setsockopt_reuseaddr>
    a8e4:	cmp	r0, #0
    a8e8:	popne	{r4, r5, fp, pc}
    a8ec:	ldrh	r0, [r4]
    a8f0:	mov	r2, #28
    a8f4:	cmp	r0, #2
    a8f8:	movweq	r2, #16
    a8fc:	ldr	r0, [r5, #12]
    a900:	mov	r1, r4
    a904:	pop	{r4, r5, fp, lr}
    a908:	b	5234 <bind@plt>

0000a90c <rb_setsockopt_reuseaddr>:
    a90c:	push	{r4, r5, r6, sl, fp, lr}
    a910:	add	fp, sp, #16
    a914:	sub	sp, sp, #8
    a918:	mov	r5, r0
    a91c:	mov	r0, #1
    a920:	str	r0, [sp, #4]
    a924:	ldr	r0, [r5, #12]
    a928:	mov	r1, #4
    a92c:	str	r1, [sp]
    a930:	add	r3, sp, #4
    a934:	mov	r1, #1
    a938:	mov	r2, #2
    a93c:	bl	55b8 <setsockopt@plt>
    a940:	mov	r4, r0
    a944:	cmp	r0, #0
    a948:	beq	a970 <rb_setsockopt_reuseaddr+0x64>
    a94c:	ldr	r6, [r5, #12]
    a950:	mov	r0, r5
    a954:	bl	53a8 <rb_get_sockerr@plt>
    a958:	bl	4ce8 <strerror@plt>
    a95c:	mov	r2, r0
    a960:	ldr	r0, [pc, #20]	; a97c <rb_setsockopt_reuseaddr+0x70>
    a964:	add	r0, pc, r0
    a968:	mov	r1, r6
    a96c:	bl	5240 <rb_lib_log@plt>
    a970:	mov	r0, r4
    a974:	sub	sp, fp, #16
    a978:	pop	{r4, r5, r6, sl, fp, pc}
    a97c:	.word	0x0000b00f

0000a980 <rb_sctp_bindx>:
    a980:	mvn	r0, #0
    a984:	bx	lr

0000a988 <rb_inet_get_proto>:
    a988:	mov	r0, #6
    a98c:	bx	lr

0000a990 <rb_accept_tcp>:
    a990:	cmp	r0, #0
    a994:	bxeq	lr
    a998:	push	{r4, r5, r6, r7, fp, lr}
    a99c:	add	fp, sp, #16
    a9a0:	mov	r4, r3
    a9a4:	mov	r7, r2
    a9a8:	mov	r6, r1
    a9ac:	mov	r5, r0
    a9b0:	mov	r0, #144	; 0x90
    a9b4:	bl	a7c0 <rb_malloc>
    a9b8:	str	r0, [r5, #52]	; 0x34
    a9bc:	str	r7, [r0, #132]	; 0x84
    a9c0:	str	r6, [r0, #136]	; 0x88
    a9c4:	str	r4, [r0, #140]	; 0x8c
    a9c8:	mov	r0, r5
    a9cc:	mov	r1, #0
    a9d0:	pop	{r4, r5, r6, r7, fp, lr}
    a9d4:	b	a9d8 <rb_accept_tryaccept>

0000a9d8 <rb_accept_tryaccept>:
    a9d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9dc:	add	fp, sp, #28
    a9e0:	sub	sp, sp, #4
    a9e4:	vpush	{d8-d9}
    a9e8:	sub	sp, sp, #152	; 0x98
    a9ec:	mov	r4, r0
    a9f0:	add	r5, sp, #24
    a9f4:	vmov.i32	q4, #0	; 0x00000000
    a9f8:	add	r0, r5, #16
    a9fc:	str	r0, [sp, #16]
    aa00:	vst1.64	{d8-d9}, [r0]
    aa04:	add	r0, r5, #32
    aa08:	str	r0, [sp, #12]
    aa0c:	vst1.64	{d8-d9}, [r0]
    aa10:	add	r0, r5, #48	; 0x30
    aa14:	str	r0, [sp, #8]
    aa18:	vst1.64	{d8-d9}, [r0]
    aa1c:	add	r0, r5, #64	; 0x40
    aa20:	str	r0, [sp, #4]
    aa24:	vst1.64	{d8-d9}, [r0]
    aa28:	add	sl, r5, #80	; 0x50
    aa2c:	vst1.64	{d8-d9}, [sl]
    aa30:	add	r8, r5, #96	; 0x60
    aa34:	vst1.64	{d8-d9}, [r8]
    aa38:	mov	r1, #112	; 0x70
    aa3c:	mov	r0, r5
    aa40:	vst1.64	{d8-d9}, [r0], r1
    aa44:	vst1.64	{d8-d9}, [r0]
    aa48:	mov	r0, #128	; 0x80
    aa4c:	str	r0, [sp, #20]
    aa50:	ldr	r0, [r4, #12]
    aa54:	add	r2, sp, #20
    aa58:	mov	r1, r5
    aa5c:	bl	5084 <accept@plt>
    aa60:	cmp	r0, #0
    aa64:	bmi	abb4 <rb_accept_tryaccept+0x1dc>
    aa68:	mov	r9, r0
    aa6c:	b	aae4 <rb_accept_tryaccept+0x10c>
    aa70:	ldr	r0, [pc, #360]	; abe0 <rb_accept_tryaccept+0x208>
    aa74:	add	r0, pc, r0
    aa78:	mov	r1, r9
    aa7c:	bl	5240 <rb_lib_log@plt>
    aa80:	mov	r0, r9
    aa84:	bl	5264 <close@plt>
    aa88:	mov	r0, r5
    aa8c:	mov	r1, #112	; 0x70
    aa90:	vst1.64	{d8-d9}, [r0], r1
    aa94:	vst1.64	{d8-d9}, [r0]
    aa98:	vst1.64	{d8-d9}, [r8]
    aa9c:	vst1.64	{d8-d9}, [sl]
    aaa0:	ldr	r0, [sp, #4]
    aaa4:	vst1.64	{d8-d9}, [r0]
    aaa8:	ldr	r0, [sp, #8]
    aaac:	vst1.64	{d8-d9}, [r0]
    aab0:	ldr	r0, [sp, #12]
    aab4:	vst1.64	{d8-d9}, [r0]
    aab8:	ldr	r0, [sp, #16]
    aabc:	vst1.64	{d8-d9}, [r0]
    aac0:	mov	r0, #128	; 0x80
    aac4:	str	r0, [sp, #20]
    aac8:	ldr	r0, [r4, #12]
    aacc:	mov	r1, r5
    aad0:	add	r2, sp, #20
    aad4:	bl	5084 <accept@plt>
    aad8:	mov	r9, r0
    aadc:	cmp	r0, #0
    aae0:	bmi	abb4 <rb_accept_tryaccept+0x1dc>
    aae4:	ldrb	r0, [r4, #17]
    aae8:	and	r0, r0, #128	; 0x80
    aaec:	orr	r1, r0, #4
    aaf0:	mov	r0, r9
    aaf4:	ldr	r2, [pc, #224]	; abdc <rb_accept_tryaccept+0x204>
    aaf8:	add	r2, pc, r2
    aafc:	bl	539c <rb_open@plt>
    ab00:	cmp	r0, #0
    ab04:	beq	aa70 <rb_accept_tryaccept+0x98>
    ab08:	mov	r6, r0
    ab0c:	bl	4f4c <rb_set_nb@plt>
    ab10:	cmp	r0, #0
    ab14:	beq	ab98 <rb_accept_tryaccept+0x1c0>
    ab18:	mov	r0, r5
    ab1c:	bl	cf74 <mangle_mapped_sockaddr>
    ab20:	ldr	r0, [r4, #52]	; 0x34
    ab24:	ldr	r7, [r0, #136]	; 0x88
    ab28:	cmp	r7, #0
    ab2c:	beq	ab4c <rb_accept_tryaccept+0x174>
    ab30:	ldr	r3, [r0, #140]	; 0x8c
    ab34:	ldr	r2, [sp, #20]
    ab38:	mov	r0, r6
    ab3c:	mov	r1, r5
    ab40:	blx	r7
    ab44:	cmp	r0, #0
    ab48:	beq	aa88 <rb_accept_tryaccept+0xb0>
    ab4c:	ldrb	r0, [r4, #17]
    ab50:	tst	r0, #32
    ab54:	bne	ab80 <rb_accept_tryaccept+0x1a8>
    ab58:	ldr	r0, [r4, #52]	; 0x34
    ab5c:	ldr	r7, [r0, #132]	; 0x84
    ab60:	ldr	r0, [r0, #140]	; 0x8c
    ab64:	ldr	r3, [sp, #20]
    ab68:	str	r0, [sp]
    ab6c:	mov	r0, r6
    ab70:	mov	r1, #0
    ab74:	mov	r2, r5
    ab78:	blx	r7
    ab7c:	b	aa88 <rb_accept_tryaccept+0xb0>
    ab80:	ldr	r3, [sp, #20]
    ab84:	mov	r0, r4
    ab88:	mov	r1, r6
    ab8c:	mov	r2, r5
    ab90:	bl	de70 <rb_ssl_accept_setup>
    ab94:	b	aa88 <rb_accept_tryaccept+0xb0>
    ab98:	ldr	r1, [r6, #12]
    ab9c:	ldr	r0, [pc, #68]	; abe8 <rb_accept_tryaccept+0x210>
    aba0:	add	r0, pc, r0
    aba4:	bl	5240 <rb_lib_log@plt>
    aba8:	mov	r0, r6
    abac:	bl	518c <rb_close@plt>
    abb0:	b	ab18 <rb_accept_tryaccept+0x140>
    abb4:	ldr	r2, [pc, #40]	; abe4 <rb_accept_tryaccept+0x20c>
    abb8:	add	r2, pc, r2
    abbc:	mov	r0, r4
    abc0:	mov	r1, #1
    abc4:	mov	r3, #0
    abc8:	bl	4de4 <rb_setselect@plt>
    abcc:	sub	sp, fp, #48	; 0x30
    abd0:	vpop	{d8-d9}
    abd4:	add	sp, sp, #4
    abd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abdc:	.word	0x0000aeba
    abe0:	.word	0x0000af52
    abe4:	.word	0xfffffe18
    abe8:	.word	0x0000ae6c

0000abec <rb_connect_tcp>:
    abec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    abf0:	add	fp, sp, #24
    abf4:	cmp	r0, #0
    abf8:	beq	acc0 <rb_connect_tcp+0xd4>
    abfc:	mov	r5, r3
    ac00:	mov	r6, r2
    ac04:	mov	r9, r1
    ac08:	mov	r4, r0
    ac0c:	ldr	r8, [fp, #12]
    ac10:	ldr	r7, [fp, #8]
    ac14:	mov	r0, #268	; 0x10c
    ac18:	bl	a7c0 <rb_malloc>
    ac1c:	str	r0, [r4, #48]	; 0x30
    ac20:	str	r5, [r0, #260]	; 0x104
    ac24:	str	r7, [r0, #264]	; 0x108
    ac28:	add	r0, r0, #128	; 0x80
    ac2c:	mov	r1, r9
    ac30:	mov	r2, #128	; 0x80
    ac34:	bl	5120 <memcpy@plt>
    ac38:	cmp	r6, #0
    ac3c:	beq	ac64 <rb_connect_tcp+0x78>
    ac40:	ldrh	r0, [r6]
    ac44:	mov	r2, #28
    ac48:	cmp	r0, #2
    ac4c:	movweq	r2, #16
    ac50:	ldr	r0, [r4, #12]
    ac54:	mov	r1, r6
    ac58:	bl	5234 <bind@plt>
    ac5c:	cmn	r0, #1
    ac60:	ble	acc4 <rb_connect_tcp+0xd8>
    ac64:	ldr	r2, [pc, #160]	; ad0c <rb_connect_tcp+0x120>
    ac68:	add	r2, pc, r2
    ac6c:	mov	r0, r4
    ac70:	mov	r1, r8
    ac74:	mov	r3, #0
    ac78:	bl	4d30 <rb_settimeout@plt>
    ac7c:	ldr	r0, [r4, #12]
    ac80:	ldr	r1, [r4, #48]	; 0x30
    ac84:	ldrh	r3, [r1, #128]!	; 0x80
    ac88:	mov	r2, #28
    ac8c:	cmp	r3, #2
    ac90:	movweq	r2, #16
    ac94:	bl	4d18 <connect@plt>
    ac98:	cmn	r0, #1
    ac9c:	bgt	acb0 <rb_connect_tcp+0xc4>
    aca0:	bl	560c <__errno_location@plt>
    aca4:	ldr	r0, [r0]
    aca8:	cmp	r0, #106	; 0x6a
    acac:	bne	acd4 <rb_connect_tcp+0xe8>
    acb0:	mov	r0, r4
    acb4:	mov	r1, #0
    acb8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    acbc:	b	ad14 <rb_connect_callback>
    acc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    acc4:	mov	r0, r4
    acc8:	mov	r1, #1
    accc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    acd0:	b	ad14 <rb_connect_callback>
    acd4:	bl	4d24 <rb_ignore_errno@plt>
    acd8:	cmp	r0, #0
    acdc:	beq	acfc <rb_connect_tcp+0x110>
    ace0:	ldr	r2, [pc, #40]	; ad10 <rb_connect_tcp+0x124>
    ace4:	add	r2, pc, r2
    ace8:	mov	r0, r4
    acec:	mov	r1, #2
    acf0:	mov	r3, #0
    acf4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    acf8:	b	addc <rb_setselect>
    acfc:	mov	r0, r4
    ad00:	mov	r1, #4
    ad04:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    ad08:	b	ad14 <rb_connect_callback>
    ad0c:	.word	0x00000124
    ad10:	.word	0x00000100

0000ad14 <rb_connect_callback>:
    ad14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    ad18:	add	fp, sp, #24
    ad1c:	mov	r4, r1
    ad20:	mov	r5, r0
    ad24:	bl	560c <__errno_location@plt>
    ad28:	cmp	r5, #0
    ad2c:	beq	ad90 <rb_connect_callback+0x7c>
    ad30:	mov	r6, r0
    ad34:	ldr	r0, [r5, #48]	; 0x30
    ad38:	cmp	r0, #0
    ad3c:	beq	ad90 <rb_connect_callback+0x7c>
    ad40:	ldr	r1, [r0, #260]	; 0x104
    ad44:	cmp	r1, #0
    ad48:	beq	ad90 <rb_connect_callback+0x7c>
    ad4c:	ldr	r8, [r6]
    ad50:	mov	r9, r1
    ad54:	mov	r1, #0
    ad58:	str	r1, [r0, #260]	; 0x104
    ad5c:	ldr	r7, [r0, #264]	; 0x108
    ad60:	mov	r0, r5
    ad64:	mov	r1, #0
    ad68:	mov	r2, #0
    ad6c:	mov	r3, #0
    ad70:	bl	4d30 <rb_settimeout@plt>
    ad74:	str	r8, [r6]
    ad78:	mov	r0, r5
    ad7c:	mov	r1, r4
    ad80:	mov	r2, r7
    ad84:	mov	r3, r9
    ad88:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    ad8c:	bx	r3
    ad90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000ad94 <rb_connect_timeout>:
    ad94:	mov	r1, #3
    ad98:	b	ad14 <rb_connect_callback>

0000ad9c <rb_ignore_errno>:
    ad9c:	mov	r1, r0
    ada0:	sub	r2, r0, #85	; 0x55
    ada4:	mov	r0, #1
    ada8:	cmp	r2, #30
    adac:	bhi	adc4 <rb_ignore_errno+0x28>
    adb0:	mov	ip, #1
    adb4:	movw	r3, #1
    adb8:	movt	r3, #16400	; 0x4010
    adbc:	tst	r3, ip, lsl r2
    adc0:	bxne	lr
    adc4:	cmp	r1, #4
    adc8:	cmpne	r1, #11
    adcc:	bne	add4 <rb_ignore_errno+0x38>
    add0:	bx	lr
    add4:	mov	r0, #0
    add8:	bx	lr

0000addc <rb_setselect>:
    addc:	ldr	ip, [pc, #4]	; ade8 <rb_setselect+0xc>
    ade0:	ldr	ip, [pc, ip]
    ade4:	bx	ip
    ade8:	.word	0x0002fb88

0000adec <rb_connect_outcome>:
    adec:	push	{r4, r5, fp, lr}
    adf0:	add	fp, sp, #8
    adf4:	sub	sp, sp, #16
    adf8:	mov	r4, r0
    adfc:	mov	r0, #0
    ae00:	str	r0, [sp, #12]
    ae04:	mov	r0, #4
    ae08:	str	r0, [sp, #8]
    ae0c:	cmp	r4, #0
    ae10:	beq	ae88 <rb_connect_outcome+0x9c>
    ae14:	ldr	r0, [r4, #48]	; 0x30
    ae18:	cmp	r0, #0
    ae1c:	beq	ae88 <rb_connect_outcome+0x9c>
    ae20:	ldr	r0, [r0, #260]	; 0x104
    ae24:	cmp	r0, #0
    ae28:	beq	ae88 <rb_connect_outcome+0x9c>
    ae2c:	ldr	r0, [r4, #12]
    ae30:	add	r1, sp, #8
    ae34:	str	r1, [sp]
    ae38:	add	r3, sp, #12
    ae3c:	mov	r1, #1
    ae40:	mov	r2, #4
    ae44:	bl	5594 <getsockopt@plt>
    ae48:	cmp	r0, #0
    ae4c:	bmi	ae68 <rb_connect_outcome+0x7c>
    ae50:	ldr	r5, [sp, #12]
    ae54:	cmp	r5, #0
    ae58:	beq	ae68 <rb_connect_outcome+0x7c>
    ae5c:	bl	560c <__errno_location@plt>
    ae60:	str	r5, [r0]
    ae64:	b	ae7c <rb_connect_outcome+0x90>
    ae68:	cmn	r0, #1
    ae6c:	ble	ae7c <rb_connect_outcome+0x90>
    ae70:	mov	r0, r4
    ae74:	mov	r1, #0
    ae78:	b	ae84 <rb_connect_outcome+0x98>
    ae7c:	mov	r0, r4
    ae80:	mov	r1, #4
    ae84:	bl	ad14 <rb_connect_callback>
    ae88:	sub	sp, fp, #8
    ae8c:	pop	{r4, r5, fp, pc}

0000ae90 <rb_connect_sctp>:
    ae90:	mov	r1, #4
    ae94:	b	ad14 <rb_connect_callback>

0000ae98 <rb_connect_sockaddr>:
    ae98:	cmp	r0, #0
    ae9c:	moveq	r0, #0
    aea0:	bxeq	lr
    aea4:	push	{fp, lr}
    aea8:	mov	fp, sp
    aeac:	ldr	r0, [r0, #48]	; 0x30
    aeb0:	add	r3, r0, #128	; 0x80
    aeb4:	mov	r0, r1
    aeb8:	mov	r1, r3
    aebc:	bl	5120 <memcpy@plt>
    aec0:	mov	r0, #1
    aec4:	pop	{fp, pc}

0000aec8 <rb_errstr>:
    aec8:	cmp	r0, #6
    aecc:	bls	aedc <rb_errstr+0x14>
    aed0:	ldr	r0, [pc, #20]	; aeec <rb_errstr+0x24>
    aed4:	add	r0, pc, r0
    aed8:	bx	lr
    aedc:	ldr	r1, [pc, #12]	; aef0 <rb_errstr+0x28>
    aee0:	add	r1, pc, r1
    aee4:	ldr	r0, [r1, r0, lsl #2]
    aee8:	bx	lr
    aeec:	.word	0x0000a8e9
    aef0:	.word	0x0001cb54

0000aef4 <rb_socketpair>:
    aef4:	push	{r4, r5, r6, r7, fp, lr}
    aef8:	add	fp, sp, #16
    aefc:	sub	sp, sp, #8
    af00:	mov	r4, r3
    af04:	ldr	r3, [pc, #256]	; b00c <rb_socketpair+0x118>
    af08:	ldr	r3, [pc, r3]
    af0c:	ldr	r3, [r3]
    af10:	ldr	r7, [pc, #248]	; b010 <rb_socketpair+0x11c>
    af14:	ldr	r7, [pc, r7]
    af18:	cmp	r7, r3
    af1c:	bge	afa4 <rb_socketpair+0xb0>
    af20:	mov	r3, sp
    af24:	bl	4ea4 <socketpair@plt>
    af28:	mvn	r5, #0
    af2c:	cmp	r0, #0
    af30:	bne	afb4 <rb_socketpair+0xc0>
    af34:	ldr	r6, [fp, #12]
    af38:	ldr	r7, [fp, #8]
    af3c:	ldr	r0, [sp]
    af40:	mov	r1, #4
    af44:	mov	r2, r6
    af48:	bl	539c <rb_open@plt>
    af4c:	str	r0, [r4]
    af50:	ldr	r0, [sp, #4]
    af54:	mov	r1, #4
    af58:	mov	r2, r6
    af5c:	bl	539c <rb_open@plt>
    af60:	str	r0, [r7]
    af64:	ldr	r1, [r4]
    af68:	cmp	r1, #0
    af6c:	beq	afc0 <rb_socketpair+0xcc>
    af70:	cmp	r0, #0
    af74:	beq	afcc <rb_socketpair+0xd8>
    af78:	mov	r0, r1
    af7c:	bl	4f4c <rb_set_nb@plt>
    af80:	cmp	r0, #0
    af84:	beq	afd8 <rb_socketpair+0xe4>
    af88:	ldr	r0, [r7]
    af8c:	bl	4f4c <rb_set_nb@plt>
    af90:	mov	r5, #0
    af94:	cmp	r0, #0
    af98:	bne	afb4 <rb_socketpair+0xc0>
    af9c:	ldr	r5, [sp, #4]
    afa0:	b	afdc <rb_socketpair+0xe8>
    afa4:	bl	560c <__errno_location@plt>
    afa8:	mov	r1, #23
    afac:	str	r1, [r0]
    afb0:	mvn	r5, #0
    afb4:	mov	r0, r5
    afb8:	sub	sp, fp, #16
    afbc:	pop	{r4, r5, r6, r7, fp, pc}
    afc0:	cmp	r0, #0
    afc4:	bne	afd0 <rb_socketpair+0xdc>
    afc8:	b	afb4 <rb_socketpair+0xc0>
    afcc:	mov	r0, r1
    afd0:	bl	518c <rb_close@plt>
    afd4:	b	afb0 <rb_socketpair+0xbc>
    afd8:	ldr	r5, [sp]
    afdc:	bl	560c <__errno_location@plt>
    afe0:	ldr	r0, [r0]
    afe4:	bl	4ce8 <strerror@plt>
    afe8:	mov	r2, r0
    afec:	ldr	r0, [pc, #32]	; b014 <rb_socketpair+0x120>
    aff0:	add	r0, pc, r0
    aff4:	mov	r1, r5
    aff8:	bl	5240 <rb_lib_log@plt>
    affc:	ldr	r0, [r4]
    b000:	bl	518c <rb_close@plt>
    b004:	ldr	r0, [r7]
    b008:	b	afd0 <rb_socketpair+0xdc>
    b00c:	.word	0x0001d480
    b010:	.word	0x0002fa1c
    b014:	.word	0x0000a7e3

0000b018 <rb_open>:
    b018:	push	{r4, r5, r6, r7, fp, lr}
    b01c:	add	fp, sp, #16
    b020:	mov	r6, r2
    b024:	mov	r7, r1
    b028:	mov	r5, r0
    b02c:	bl	b50c <add_fd>
    b030:	mov	r4, r0
    b034:	ldrb	r0, [r0, #16]
    b038:	tst	r0, #1
    b03c:	bne	b084 <rb_open+0x6c>
    b040:	strb	r7, [r4, #17]
    b044:	str	r5, [r4, #12]
    b048:	orr	r0, r0, #1
    b04c:	strb	r0, [r4, #16]
    b050:	cmp	r6, #0
    b054:	beq	b064 <rb_open+0x4c>
    b058:	mov	r0, r6
    b05c:	bl	b580 <rb_strndup>
    b060:	str	r0, [r4, #24]
    b064:	ldr	r0, [pc, #88]	; b0c4 <rb_open+0xac>
    b068:	ldr	r0, [pc, r0]
    b06c:	add	r0, r0, #1
    b070:	ldr	r1, [pc, #80]	; b0c8 <rb_open+0xb0>
    b074:	add	r1, pc, r1
    b078:	str	r0, [r1]
    b07c:	mov	r0, r4
    b080:	pop	{r4, r5, r6, r7, fp, pc}
    b084:	cmp	r4, #0
    b088:	beq	b098 <rb_open+0x80>
    b08c:	ldr	r2, [r4, #24]
    b090:	cmp	r2, #0
    b094:	bne	b0a0 <rb_open+0x88>
    b098:	ldr	r2, [pc, #28]	; b0bc <rb_open+0xa4>
    b09c:	add	r2, pc, r2
    b0a0:	ldr	r0, [pc, #24]	; b0c0 <rb_open+0xa8>
    b0a4:	add	r0, pc, r0
    b0a8:	mov	r1, r5
    b0ac:	bl	5240 <rb_lib_log@plt>
    b0b0:	mov	r4, #0
    b0b4:	mov	r0, r4
    b0b8:	pop	{r4, r5, r6, r7, fp, pc}
    b0bc:	.word	0x0000a6aa
    b0c0:	.word	0x0000a7e2
    b0c4:	.word	0x0002f8c8
    b0c8:	.word	0x0002f8bc

0000b0cc <rb_close>:
    b0cc:	push	{r4, r5, r6, r7, fp, lr}
    b0d0:	add	fp, sp, #16
    b0d4:	cmp	r0, #0
    b0d8:	beq	b184 <rb_close+0xb8>
    b0dc:	mov	r5, r0
    b0e0:	ldr	r4, [r0, #12]
    b0e4:	ldrb	r7, [r0, #17]
    b0e8:	ands	r6, r7, #16
    b0ec:	beq	b0fc <rb_close+0x30>
    b0f0:	mov	r0, r4
    b0f4:	mov	r1, #0
    b0f8:	bl	4f10 <listen@plt>
    b0fc:	mov	r0, r5
    b100:	mov	r1, #3
    b104:	mov	r2, #0
    b108:	mov	r3, #0
    b10c:	bl	4de4 <rb_setselect@plt>
    b110:	mov	r0, r5
    b114:	mov	r1, #0
    b118:	mov	r2, #0
    b11c:	mov	r3, #0
    b120:	bl	4d30 <rb_settimeout@plt>
    b124:	ldr	r0, [r5, #52]	; 0x34
    b128:	bl	a7b4 <rb_free>
    b12c:	ldr	r0, [r5, #48]	; 0x30
    b130:	bl	a7b4 <rb_free>
    b134:	ldr	r0, [r5, #24]
    b138:	bl	a7b4 <rb_free>
    b13c:	tst	r7, #32
    b140:	beq	b14c <rb_close+0x80>
    b144:	mov	r0, r5
    b148:	bl	d174 <rb_ssl_shutdown>
    b14c:	ldrb	r0, [r5, #16]
    b150:	tst	r0, #1
    b154:	beq	b16c <rb_close+0xa0>
    b158:	mov	r0, r5
    b15c:	bl	b5b8 <remove_fd>
    b160:	ldrb	r0, [r5, #16]
    b164:	and	r0, r0, #254	; 0xfe
    b168:	strb	r0, [r5, #16]
    b16c:	cmp	r6, #0
    b170:	popeq	{r4, r5, r6, r7, fp, pc}
    b174:	mov	r0, r4
    b178:	mov	r1, #2
    b17c:	pop	{r4, r5, r6, r7, fp, lr}
    b180:	b	5228 <shutdown@plt>
    b184:	pop	{r4, r5, r6, r7, fp, pc}

0000b188 <rb_pipe>:
    b188:	push	{r4, r5, r6, sl, fp, lr}
    b18c:	add	fp, sp, #16
    b190:	sub	sp, sp, #8
    b194:	mov	r4, r1
    b198:	mov	r5, r0
    b19c:	ldr	r0, [pc, #224]	; b284 <rb_pipe+0xfc>
    b1a0:	ldr	r0, [pc, r0]
    b1a4:	ldr	r0, [r0]
    b1a8:	ldr	r1, [pc, #216]	; b288 <rb_pipe+0x100>
    b1ac:	ldr	r1, [pc, r1]
    b1b0:	cmp	r1, r0
    b1b4:	bge	b22c <rb_pipe+0xa4>
    b1b8:	mov	r6, r2
    b1bc:	mov	r0, sp
    b1c0:	bl	55a0 <pipe@plt>
    b1c4:	mov	r1, r0
    b1c8:	mvn	r0, #0
    b1cc:	cmn	r1, #1
    b1d0:	beq	b224 <rb_pipe+0x9c>
    b1d4:	ldr	r0, [sp]
    b1d8:	mov	r1, #8
    b1dc:	mov	r2, r6
    b1e0:	bl	539c <rb_open@plt>
    b1e4:	str	r0, [r5]
    b1e8:	ldr	r0, [sp, #4]
    b1ec:	mov	r1, #8
    b1f0:	mov	r2, r6
    b1f4:	bl	539c <rb_open@plt>
    b1f8:	str	r0, [r4]
    b1fc:	ldr	r0, [r5]
    b200:	bl	4f4c <rb_set_nb@plt>
    b204:	cmp	r0, #0
    b208:	beq	b244 <rb_pipe+0xbc>
    b20c:	ldr	r0, [r4]
    b210:	bl	4f4c <rb_set_nb@plt>
    b214:	mov	r1, r0
    b218:	mov	r0, #0
    b21c:	cmp	r1, #0
    b220:	beq	b24c <rb_pipe+0xc4>
    b224:	sub	sp, fp, #16
    b228:	pop	{r4, r5, r6, sl, fp, pc}
    b22c:	bl	560c <__errno_location@plt>
    b230:	mov	r1, #23
    b234:	str	r1, [r0]
    b238:	mvn	r0, #0
    b23c:	sub	sp, fp, #16
    b240:	pop	{r4, r5, r6, sl, fp, pc}
    b244:	ldr	r6, [sp]
    b248:	b	b250 <rb_pipe+0xc8>
    b24c:	ldr	r6, [sp, #4]
    b250:	bl	560c <__errno_location@plt>
    b254:	ldr	r0, [r0]
    b258:	bl	4ce8 <strerror@plt>
    b25c:	mov	r2, r0
    b260:	ldr	r0, [pc, #36]	; b28c <rb_pipe+0x104>
    b264:	add	r0, pc, r0
    b268:	mov	r1, r6
    b26c:	bl	5240 <rb_lib_log@plt>
    b270:	ldr	r0, [r5]
    b274:	bl	518c <rb_close@plt>
    b278:	ldr	r0, [r4]
    b27c:	bl	518c <rb_close@plt>
    b280:	b	b238 <rb_pipe+0xb0>
    b284:	.word	0x0001d1e8
    b288:	.word	0x0002f784
    b28c:	.word	0x0000a56f

0000b290 <rb_socket>:
    b290:	push	{r4, r5, r6, r7, fp, lr}
    b294:	add	fp, sp, #16
    b298:	sub	sp, sp, #8
    b29c:	mov	r6, r3
    b2a0:	mov	r7, r0
    b2a4:	ldr	r0, [pc, #304]	; b3dc <rb_socket+0x14c>
    b2a8:	ldr	r0, [pc, r0]
    b2ac:	ldr	r0, [r0]
    b2b0:	ldr	r3, [pc, #296]	; b3e0 <rb_socket+0x150>
    b2b4:	ldr	r3, [pc, r3]
    b2b8:	cmp	r3, r0
    b2bc:	bge	b39c <rb_socket+0x10c>
    b2c0:	mov	r0, r7
    b2c4:	bl	50a8 <socket@plt>
    b2c8:	mov	r4, #0
    b2cc:	cmp	r0, #0
    b2d0:	bmi	b390 <rb_socket+0x100>
    b2d4:	mov	r5, r0
    b2d8:	cmp	r7, #10
    b2dc:	bne	b30c <rb_socket+0x7c>
    b2e0:	mov	r0, #1
    b2e4:	str	r0, [sp, #4]
    b2e8:	mov	r0, #4
    b2ec:	str	r0, [sp]
    b2f0:	add	r3, sp, #4
    b2f4:	mov	r0, r5
    b2f8:	mov	r1, #41	; 0x29
    b2fc:	mov	r2, #26
    b300:	bl	55b8 <setsockopt@plt>
    b304:	cmn	r0, #1
    b308:	beq	b360 <rb_socket+0xd0>
    b30c:	mov	r0, r5
    b310:	mov	r1, #4
    b314:	mov	r2, r6
    b318:	bl	539c <rb_open@plt>
    b31c:	cmp	r0, #0
    b320:	beq	b33c <rb_socket+0xac>
    b324:	mov	r6, r0
    b328:	bl	4f4c <rb_set_nb@plt>
    b32c:	cmp	r0, #0
    b330:	beq	b3b0 <rb_socket+0x120>
    b334:	mov	r4, r6
    b338:	b	b390 <rb_socket+0x100>
    b33c:	bl	560c <__errno_location@plt>
    b340:	ldr	r0, [r0]
    b344:	bl	4ce8 <strerror@plt>
    b348:	mov	r2, r0
    b34c:	ldr	r0, [pc, #148]	; b3e8 <rb_socket+0x158>
    b350:	add	r0, pc, r0
    b354:	mov	r1, r5
    b358:	bl	5240 <rb_lib_log@plt>
    b35c:	b	b388 <rb_socket+0xf8>
    b360:	ldr	r6, [sp, #4]
    b364:	bl	560c <__errno_location@plt>
    b368:	ldr	r0, [r0]
    b36c:	bl	4ce8 <strerror@plt>
    b370:	mov	r3, r0
    b374:	ldr	r0, [pc, #104]	; b3e4 <rb_socket+0x154>
    b378:	add	r0, pc, r0
    b37c:	mov	r1, r6
    b380:	mov	r2, r5
    b384:	bl	5240 <rb_lib_log@plt>
    b388:	mov	r0, r5
    b38c:	bl	5264 <close@plt>
    b390:	mov	r0, r4
    b394:	sub	sp, fp, #16
    b398:	pop	{r4, r5, r6, r7, fp, pc}
    b39c:	bl	560c <__errno_location@plt>
    b3a0:	mov	r1, #23
    b3a4:	str	r1, [r0]
    b3a8:	mov	r4, #0
    b3ac:	b	b390 <rb_socket+0x100>
    b3b0:	bl	560c <__errno_location@plt>
    b3b4:	ldr	r0, [r0]
    b3b8:	bl	4ce8 <strerror@plt>
    b3bc:	mov	r2, r0
    b3c0:	ldr	r0, [pc, #36]	; b3ec <rb_socket+0x15c>
    b3c4:	add	r0, pc, r0
    b3c8:	mov	r1, r5
    b3cc:	bl	5240 <rb_lib_log@plt>
    b3d0:	mov	r0, r6
    b3d4:	bl	518c <rb_close@plt>
    b3d8:	b	b390 <rb_socket+0x100>
    b3dc:	.word	0x0001d0e0
    b3e0:	.word	0x0002f67c
    b3e4:	.word	0x0000a488
    b3e8:	.word	0x0000a4ef
    b3ec:	.word	0x0000a40f

0000b3f0 <rb_listen>:
    b3f0:	push	{r4, r5, r6, sl, fp, lr}
    b3f4:	add	fp, sp, #16
    b3f8:	sub	sp, sp, #8
    b3fc:	mov	r6, r2
    b400:	mov	r5, r0
    b404:	str	r1, [sp, #4]
    b408:	ldrb	r0, [r0, #17]
    b40c:	and	r0, r0, #128	; 0x80
    b410:	orr	r0, r0, #20
    b414:	strb	r0, [r5, #17]
    b418:	ldr	r0, [r5, #12]
    b41c:	bl	4f10 <listen@plt>
    b420:	mov	r4, r0
    b424:	cmp	r6, #0
    b428:	beq	b450 <rb_listen+0x60>
    b42c:	cmp	r4, #0
    b430:	bne	b450 <rb_listen+0x60>
    b434:	ldr	r0, [r5, #12]
    b438:	mov	r1, #4
    b43c:	str	r1, [sp]
    b440:	add	r3, sp, #4
    b444:	mov	r1, #6
    b448:	mov	r2, #9
    b44c:	bl	55b8 <setsockopt@plt>
    b450:	mov	r0, r4
    b454:	sub	sp, fp, #16
    b458:	pop	{r4, r5, r6, sl, fp, pc}

0000b45c <rb_fdlist_init>:
    b45c:	push	{r4, r5, fp, lr}
    b460:	add	fp, sp, #8
    b464:	mov	r4, r2
    b468:	ldr	r5, [pc, #76]	; b4bc <rb_fdlist_init+0x60>
    b46c:	add	r5, pc, r5
    b470:	ldrb	r2, [r5]
    b474:	cmp	r2, #0
    b478:	bne	b498 <rb_fdlist_init+0x3c>
    b47c:	ldr	r2, [pc, #60]	; b4c0 <rb_fdlist_init+0x64>
    b480:	ldr	r2, [pc, r2]
    b484:	str	r1, [r2]
    b488:	cmp	r0, #0
    b48c:	blne	b4cc <rb_close_all>
    b490:	mov	r0, #1
    b494:	strb	r0, [r5]
    b498:	ldr	r2, [pc, #36]	; b4c4 <rb_fdlist_init+0x68>
    b49c:	add	r2, pc, r2
    b4a0:	mov	r0, #68	; 0x44
    b4a4:	mov	r1, r4
    b4a8:	bl	53cc <rb_bh_create@plt>
    b4ac:	ldr	r1, [pc, #20]	; b4c8 <rb_fdlist_init+0x6c>
    b4b0:	add	r1, pc, r1
    b4b4:	str	r0, [r1]
    b4b8:	pop	{r4, r5, fp, pc}
    b4bc:	.word	0x0002f4c8
    b4c0:	.word	0x0001cf08
    b4c4:	.word	0x0000a3dc
    b4c8:	.word	0x0002f488

0000b4cc <rb_close_all>:
    b4cc:	push	{r4, r5, fp, lr}
    b4d0:	add	fp, sp, #8
    b4d4:	ldr	r5, [pc, #44]	; b508 <rb_close_all+0x3c>
    b4d8:	ldr	r5, [pc, r5]
    b4dc:	ldr	r0, [r5]
    b4e0:	cmp	r0, #4
    b4e4:	poplt	{r4, r5, fp, pc}
    b4e8:	mov	r4, #3
    b4ec:	mov	r0, r4
    b4f0:	bl	5264 <close@plt>
    b4f4:	add	r4, r4, #1
    b4f8:	ldr	r0, [r5]
    b4fc:	cmp	r4, r0
    b500:	blt	b4ec <rb_close_all+0x20>
    b504:	pop	{r4, r5, fp, pc}
    b508:	.word	0x0001ceb0

0000b50c <add_fd>:
    b50c:	push	{r4, r5, fp, lr}
    b510:	add	fp, sp, #8
    b514:	mov	r5, r0
    b518:	bl	b700 <rb_find_fd>
    b51c:	mov	r4, r0
    b520:	cmp	r0, #0
    b524:	beq	b530 <add_fd+0x24>
    b528:	mov	r0, r4
    b52c:	pop	{r4, r5, fp, pc}
    b530:	ldr	r0, [pc, #64]	; b578 <add_fd+0x6c>
    b534:	ldr	r0, [pc, r0]
    b538:	bl	5270 <rb_bh_alloc@plt>
    b53c:	mov	r4, r0
    b540:	str	r5, [r0, #12]
    b544:	eor	r0, r5, r5, lsr #12
    b548:	eor	r0, r0, r5, asr #24
    b54c:	bfc	r0, #12, #20
    b550:	add	r0, r0, r0, lsl #1
    b554:	ldr	r1, [pc, #32]	; b57c <add_fd+0x70>
    b558:	ldr	r1, [pc, r1]
    b55c:	ldr	r1, [r1]
    b560:	add	r2, r1, r0, lsl #2
    b564:	mov	r0, r4
    b568:	mov	r1, r4
    b56c:	bl	a7e0 <rb_dlinkAdd>
    b570:	mov	r0, r4
    b574:	pop	{r4, r5, fp, pc}
    b578:	.word	0x0002f404
    b57c:	.word	0x0001ce50

0000b580 <rb_strndup>:
    b580:	push	{r4, r5, fp, lr}
    b584:	add	fp, sp, #8
    b588:	mov	r4, r0
    b58c:	mov	r0, #128	; 0x80
    b590:	bl	52c4 <malloc@plt>
    b594:	cmp	r0, #0
    b598:	beq	b5b4 <rb_strndup+0x34>
    b59c:	mov	r5, r0
    b5a0:	mov	r1, r4
    b5a4:	mov	r2, #128	; 0x80
    b5a8:	bl	4fd0 <rb_strlcpy@plt>
    b5ac:	mov	r0, r5
    b5b0:	pop	{r4, r5, fp, pc}
    b5b4:	bl	52a0 <rb_outofmemory@plt>

0000b5b8 <remove_fd>:
    b5b8:	cmp	r0, #0
    b5bc:	bxeq	lr
    b5c0:	ldrb	r1, [r0, #16]
    b5c4:	tst	r1, #1
    b5c8:	bne	b5d0 <remove_fd+0x18>
    b5cc:	bx	lr
    b5d0:	ldr	r1, [r0, #12]
    b5d4:	eor	r2, r1, r1, lsr #12
    b5d8:	eor	r1, r2, r1, asr #24
    b5dc:	bfc	r1, #12, #20
    b5e0:	add	r1, r1, r1, lsl #1
    b5e4:	ldr	r2, [pc, #12]	; b5f8 <remove_fd+0x40>
    b5e8:	ldr	r2, [pc, r2]
    b5ec:	ldr	r2, [r2]
    b5f0:	add	r1, r2, r1, lsl #2
    b5f4:	b	cfe0 <rb_dlinkMoveNode>
    b5f8:	.word	0x0001cdc0

0000b5fc <rb_dump_fd>:
    b5fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b600:	add	fp, sp, #24
    b604:	mov	r4, r1
    b608:	mov	r5, r0
    b60c:	mov	r6, #0
    b610:	ldr	r8, [pc, #132]	; b69c <rb_dump_fd+0xa0>
    b614:	ldr	r8, [pc, r8]
    b618:	ldr	r9, [pc, #128]	; b6a0 <rb_dump_fd+0xa4>
    b61c:	add	r9, pc, r9
    b620:	b	b630 <rb_dump_fd+0x34>
    b624:	add	r6, r6, #1
    b628:	cmp	r6, #4096	; 0x1000
    b62c:	beq	b698 <rb_dump_fd+0x9c>
    b630:	ldr	r0, [r8]
    b634:	add	r1, r6, r6, lsl #1
    b638:	add	r2, r0, r1, lsl #2
    b63c:	ldr	r2, [r2, #8]
    b640:	cmp	r2, #0
    b644:	beq	b624 <rb_dump_fd+0x28>
    b648:	ldr	r7, [r0, r1, lsl #2]
    b64c:	cmp	r7, #0
    b650:	bne	b664 <rb_dump_fd+0x68>
    b654:	b	b624 <rb_dump_fd+0x28>
    b658:	ldr	r7, [r7, #8]
    b65c:	cmp	r7, #0
    b660:	beq	b624 <rb_dump_fd+0x28>
    b664:	ldr	r1, [r7]
    b668:	cmp	r1, #0
    b66c:	beq	b658 <rb_dump_fd+0x5c>
    b670:	ldrb	r0, [r1, #16]
    b674:	tst	r0, #1
    b678:	beq	b658 <rb_dump_fd+0x5c>
    b67c:	ldr	r0, [r1, #12]
    b680:	ldr	r1, [r1, #24]
    b684:	cmp	r1, #0
    b688:	moveq	r1, r9
    b68c:	mov	r2, r4
    b690:	blx	r5
    b694:	b	b658 <rb_dump_fd+0x5c>
    b698:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b69c:	.word	0x0001cd94
    b6a0:	.word	0x0000a356

0000b6a4 <rb_note>:
    b6a4:	cmp	r0, #0
    b6a8:	bxeq	lr
    b6ac:	push	{r4, r5, fp, lr}
    b6b0:	add	fp, sp, #8
    b6b4:	mov	r5, r1
    b6b8:	mov	r4, r0
    b6bc:	ldr	r0, [r0, #24]
    b6c0:	bl	a7b4 <rb_free>
    b6c4:	mov	r0, r5
    b6c8:	bl	b580 <rb_strndup>
    b6cc:	str	r0, [r4, #24]
    b6d0:	pop	{r4, r5, fp, lr}
    b6d4:	bx	lr

0000b6d8 <rb_set_type>:
    b6d8:	strb	r1, [r0, #17]
    b6dc:	bx	lr

0000b6e0 <rb_get_type>:
    b6e0:	ldrb	r0, [r0, #17]
    b6e4:	bx	lr

0000b6e8 <rb_fd_ssl>:
    b6e8:	cmp	r0, #0
    b6ec:	moveq	r0, #0
    b6f0:	ldrbne	r0, [r0, #17]
    b6f4:	ubfxne	r0, r0, #5, #1
    b6f8:	bx	lr

0000b6fc <rb_get_fde>:
    b6fc:	b	b700 <rb_find_fd>

0000b700 <rb_find_fd>:
    b700:	cmp	r0, #0
    b704:	bmi	b74c <rb_find_fd+0x4c>
    b708:	eor	r1, r0, r0, lsr #12
    b70c:	bfc	r1, #12, #20
    b710:	eor	r1, r1, r0, lsr #24
    b714:	add	r1, r1, r1, lsl #1
    b718:	ldr	r2, [pc, #56]	; b758 <rb_find_fd+0x58>
    b71c:	ldr	r2, [pc, r2]
    b720:	ldr	r2, [r2]
    b724:	ldr	r2, [r2, r1, lsl #2]
    b728:	cmp	r2, #0
    b72c:	beq	b74c <rb_find_fd+0x4c>
    b730:	ldr	r1, [r2]
    b734:	ldr	r3, [r1, #12]
    b738:	cmp	r3, r0
    b73c:	beq	b750 <rb_find_fd+0x50>
    b740:	ldr	r2, [r2, #8]
    b744:	cmp	r2, #0
    b748:	bne	b730 <rb_find_fd+0x30>
    b74c:	mov	r1, #0
    b750:	mov	r0, r1
    b754:	bx	lr
    b758:	.word	0x0001cc8c

0000b75c <rb_read>:
    b75c:	cmp	r0, #0
    b760:	moveq	r0, #0
    b764:	bxeq	lr
    b768:	ldrb	r3, [r0, #17]
    b76c:	tst	r3, #32
    b770:	bne	b784 <rb_read+0x28>
    b774:	ldr	r0, [r0, #12]
    b778:	tst	r3, #4
    b77c:	bne	b788 <rb_read+0x2c>
    b780:	b	5024 <read@plt>
    b784:	b	da40 <rb_ssl_read>
    b788:	mov	r3, #0
    b78c:	b	4ec8 <recv@plt>

0000b790 <rb_write>:
    b790:	cmp	r0, #0
    b794:	moveq	r0, #0
    b798:	bxeq	lr
    b79c:	ldrb	r3, [r0, #17]
    b7a0:	tst	r3, #32
    b7a4:	bne	b7b8 <rb_write+0x28>
    b7a8:	ldr	r0, [r0, #12]
    b7ac:	tst	r3, #4
    b7b0:	bne	b7bc <rb_write+0x2c>
    b7b4:	b	503c <write@plt>
    b7b8:	b	db7c <rb_ssl_write>
    b7bc:	mov	r3, #16384	; 0x4000
    b7c0:	b	53b4 <send@plt>

0000b7c4 <rb_writev>:
    b7c4:	push	{fp, lr}
    b7c8:	mov	fp, sp
    b7cc:	sub	sp, sp, #32
    b7d0:	cmp	r0, #0
    b7d4:	beq	b7fc <rb_writev+0x38>
    b7d8:	ldrb	r3, [r0, #17]
    b7dc:	tst	r3, #32
    b7e0:	bne	b814 <rb_writev+0x50>
    b7e4:	tst	r3, #4
    b7e8:	bne	b820 <rb_writev+0x5c>
    b7ec:	ldr	r0, [r0, #12]
    b7f0:	mov	sp, fp
    b7f4:	pop	{fp, lr}
    b7f8:	b	4fb8 <writev@plt>
    b7fc:	bl	560c <__errno_location@plt>
    b800:	mov	r1, #9
    b804:	str	r1, [r0]
    b808:	mvn	r0, #0
    b80c:	mov	sp, fp
    b810:	pop	{fp, pc}
    b814:	mov	sp, fp
    b818:	pop	{fp, lr}
    b81c:	b	b85c <rb_fake_writev>
    b820:	mov	ip, sp
    b824:	vmov.i32	q8, #0	; 0x00000000
    b828:	add	r3, ip, #12
    b82c:	vst1.32	{d16-d17}, [r3]
    b830:	mov	lr, #8
    b834:	mov	r3, ip
    b838:	vst1.64	{d16-d17}, [r3], lr
    b83c:	str	r1, [r3]
    b840:	str	r2, [sp, #12]
    b844:	ldr	r0, [r0, #12]
    b848:	mov	r1, ip
    b84c:	mov	r2, #16384	; 0x4000
    b850:	bl	5018 <sendmsg@plt>
    b854:	mov	sp, fp
    b858:	pop	{fp, pc}

0000b85c <rb_fake_writev>:
    b85c:	push	{r4, r5, r6, r7, fp, lr}
    b860:	add	fp, sp, #16
    b864:	cmp	r2, #0
    b868:	beq	b8a8 <rb_fake_writev+0x4c>
    b86c:	mov	r5, r2
    b870:	mov	r6, r1
    b874:	mov	r7, r0
    b878:	mov	r4, #0
    b87c:	ldm	r6, {r1, r2}
    b880:	mov	r0, r7
    b884:	bl	4f88 <rb_write@plt>
    b888:	cmp	r0, #0
    b88c:	ble	b8b4 <rb_fake_writev+0x58>
    b890:	subs	r5, r5, #1
    b894:	add	r4, r0, r4
    b898:	add	r6, r6, #8
    b89c:	bne	b87c <rb_fake_writev+0x20>
    b8a0:	mov	r0, r4
    b8a4:	pop	{r4, r5, r6, r7, fp, pc}
    b8a8:	mov	r4, #0
    b8ac:	mov	r0, r4
    b8b0:	pop	{r4, r5, r6, r7, fp, pc}
    b8b4:	cmp	r4, #0
    b8b8:	movle	r4, r0
    b8bc:	mov	r0, r4
    b8c0:	pop	{r4, r5, r6, r7, fp, pc}

0000b8c4 <rb_inet_pton_sock>:
    b8c4:	push	{r4, r5, r6, sl, fp, lr}
    b8c8:	add	fp, sp, #16
    b8cc:	mov	r4, r1
    b8d0:	mov	r5, r0
    b8d4:	vmov.i32	q8, #0	; 0x00000000
    b8d8:	add	r0, r1, #112	; 0x70
    b8dc:	vst1.32	{d16-d17}, [r0]
    b8e0:	add	r0, r1, #96	; 0x60
    b8e4:	vst1.32	{d16-d17}, [r0]
    b8e8:	add	r0, r1, #80	; 0x50
    b8ec:	vst1.32	{d16-d17}, [r0]
    b8f0:	add	r0, r1, #64	; 0x40
    b8f4:	vst1.32	{d16-d17}, [r0]
    b8f8:	add	r0, r1, #48	; 0x30
    b8fc:	vst1.32	{d16-d17}, [r0]
    b900:	add	r0, r1, #32
    b904:	vst1.32	{d16-d17}, [r0]
    b908:	add	r0, r1, #16
    b90c:	vst1.32	{d16-d17}, [r0]
    b910:	mov	r0, #4
    b914:	mov	r2, r1
    b918:	vst1.32	{d16-d17}, [r2], r0
    b91c:	mov	r6, #2
    b920:	mov	r0, #2
    b924:	mov	r1, r5
    b928:	bl	4f64 <rb_inet_pton@plt>
    b92c:	cmp	r0, #0
    b930:	bne	b950 <rb_inet_pton_sock+0x8c>
    b934:	add	r2, r4, #8
    b938:	mov	r6, #10
    b93c:	mov	r0, #10
    b940:	mov	r1, r5
    b944:	bl	4f64 <rb_inet_pton@plt>
    b948:	cmp	r0, #0
    b94c:	beq	b964 <rb_inet_pton_sock+0xa0>
    b950:	mov	r0, #0
    b954:	strh	r0, [r4, #2]
    b958:	strh	r6, [r4]
    b95c:	mov	r0, #1
    b960:	pop	{r4, r5, r6, sl, fp, pc}
    b964:	mov	r0, #0
    b968:	pop	{r4, r5, r6, sl, fp, pc}

0000b96c <rb_inet_pton>:
    b96c:	push	{r4, r5, r6, sl, fp, lr}
    b970:	add	fp, sp, #16
    b974:	sub	sp, sp, #56	; 0x38
    b978:	mov	r4, r2
    b97c:	mov	r5, r1
    b980:	cmp	r0, #10
    b984:	beq	b9ac <rb_inet_pton+0x40>
    b988:	mov	r1, r0
    b98c:	mvn	r0, #0
    b990:	cmp	r1, #2
    b994:	bne	b9e4 <rb_inet_pton+0x78>
    b998:	mov	r0, r5
    b99c:	mov	r1, r4
    b9a0:	sub	sp, fp, #16
    b9a4:	pop	{r4, r5, r6, sl, fp, lr}
    b9a8:	b	bd70 <inet_pton4>
    b9ac:	mov	r0, r5
    b9b0:	mov	r1, r4
    b9b4:	bl	bd70 <inet_pton4>
    b9b8:	cmp	r0, #0
    b9bc:	beq	b9ec <rb_inet_pton+0x80>
    b9c0:	add	r6, sp, #3
    b9c4:	ldr	r1, [pc, #52]	; ba00 <rb_inet_pton+0x94>
    b9c8:	add	r1, pc, r1
    b9cc:	mov	r0, r6
    b9d0:	mov	r2, r5
    b9d4:	bl	5624 <sprintf@plt>
    b9d8:	mov	r0, r6
    b9dc:	mov	r1, r4
    b9e0:	bl	be4c <inet_pton6>
    b9e4:	sub	sp, fp, #16
    b9e8:	pop	{r4, r5, r6, sl, fp, pc}
    b9ec:	mov	r0, r5
    b9f0:	mov	r1, r4
    b9f4:	sub	sp, fp, #16
    b9f8:	pop	{r4, r5, r6, sl, fp, lr}
    b9fc:	b	be4c <inet_pton6>
    ba00:	.word	0x00009ef0

0000ba04 <rb_inet_ntop_sock>:
    ba04:	mov	r3, r2
    ba08:	mov	r2, r1
    ba0c:	ldrh	r1, [r0]
    ba10:	cmp	r1, #10
    ba14:	beq	ba30 <rb_inet_ntop_sock+0x2c>
    ba18:	cmp	r1, #2
    ba1c:	movne	r0, #0
    ba20:	bxne	lr
    ba24:	add	r1, r0, #4
    ba28:	mov	r0, #2
    ba2c:	b	ba3c <rb_inet_ntop>
    ba30:	add	r1, r0, #8
    ba34:	mov	r0, #10
    ba38:	b	ba3c <rb_inet_ntop>

0000ba3c <rb_inet_ntop>:
    ba3c:	push	{r4, r5, r6, r7, fp, lr}
    ba40:	add	fp, sp, #16
    ba44:	mov	r4, r3
    ba48:	mov	r5, r2
    ba4c:	mov	r6, r1
    ba50:	cmp	r0, #10
    ba54:	beq	ba74 <rb_inet_ntop+0x38>
    ba58:	cmp	r0, #2
    ba5c:	bne	bad0 <rb_inet_ntop+0x94>
    ba60:	mov	r0, r6
    ba64:	mov	r1, r5
    ba68:	mov	r2, r4
    ba6c:	pop	{r4, r5, r6, r7, fp, lr}
    ba70:	b	baec <inet_ntop4>
    ba74:	ldr	r0, [r6]
    ba78:	cmp	r0, #0
    ba7c:	bne	bad8 <rb_inet_ntop+0x9c>
    ba80:	ldr	r0, [r6, #4]
    ba84:	cmp	r0, #0
    ba88:	bne	baa0 <rb_inet_ntop+0x64>
    ba8c:	ldr	r7, [r6, #8]
    ba90:	movw	r0, #65535	; 0xffff
    ba94:	bl	bb28 <__bswap_32>
    ba98:	cmp	r7, r0
    ba9c:	beq	bac8 <rb_inet_ntop+0x8c>
    baa0:	ldr	r0, [r6, #4]
    baa4:	cmp	r0, #0
    baa8:	bne	bad8 <rb_inet_ntop+0x9c>
    baac:	ldr	r0, [r6, #8]
    bab0:	cmp	r0, #0
    bab4:	bne	bad8 <rb_inet_ntop+0x9c>
    bab8:	ldr	r0, [r6, #12]
    babc:	bl	bb28 <__bswap_32>
    bac0:	cmp	r0, #2
    bac4:	bcc	bad8 <rb_inet_ntop+0x9c>
    bac8:	add	r0, r6, #12
    bacc:	b	ba64 <rb_inet_ntop+0x28>
    bad0:	mov	r0, #0
    bad4:	pop	{r4, r5, r6, r7, fp, pc}
    bad8:	mov	r0, r6
    badc:	mov	r1, r5
    bae0:	mov	r2, r4
    bae4:	pop	{r4, r5, r6, r7, fp, lr}
    bae8:	b	bb30 <inet_ntop6>

0000baec <inet_ntop4>:
    baec:	push	{r4, sl, fp, lr}
    baf0:	add	fp, sp, #8
    baf4:	mov	r4, r1
    baf8:	mov	r1, #0
    bafc:	cmp	r2, #16
    bb00:	bcc	bb1c <inet_ntop4+0x30>
    bb04:	bl	d070 <inetntoa>
    bb08:	ldr	r1, [pc, #20]	; bb24 <inet_ntop4+0x38>
    bb0c:	add	r1, pc, r1
    bb10:	mov	r0, r4
    bb14:	bl	51b0 <strcpy@plt>
    bb18:	mov	r1, r4
    bb1c:	mov	r0, r1
    bb20:	pop	{r4, sl, fp, pc}
    bb24:	.word	0x0002ee74

0000bb28 <__bswap_32>:
    bb28:	rev	r0, r0
    bb2c:	bx	lr

0000bb30 <inet_ntop6>:
    bb30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb34:	add	fp, sp, #28
    bb38:	sub	sp, sp, #92	; 0x5c
    bb3c:	stm	sp, {r1, r2}
    bb40:	mov	r6, r0
    bb44:	vmov.i32	q8, #0	; 0x00000000
    bb48:	add	r5, sp, #8
    bb4c:	mov	r0, r5
    bb50:	vst1.64	{d16-d17}, [r0]!
    bb54:	vst1.64	{d16-d17}, [r0]
    bb58:	mov	r0, #0
    bb5c:	mov	r1, r6
    bb60:	ldrb	r2, [r1, r0]!
    bb64:	ldrb	r1, [r1, #1]
    bb68:	orr	r1, r1, r2, lsl #8
    bb6c:	str	r1, [r5, r0, lsl #1]
    bb70:	add	r0, r0, #2
    bb74:	cmp	r0, #16
    bb78:	bcc	bb5c <inet_ntop6+0x2c>
    bb7c:	mvn	r4, #0
    bb80:	mov	r2, #0
    bb84:	mov	r0, #0
    bb88:	mvn	r1, #0
    bb8c:	mov	r8, #0
    bb90:	b	bba4 <inet_ntop6+0x74>
    bb94:	mvn	r4, #0
    bb98:	add	r2, r2, #1
    bb9c:	cmp	r2, #8
    bba0:	beq	bbf4 <inet_ntop6+0xc4>
    bba4:	ldr	r3, [r5, r2, lsl #2]
    bba8:	cmp	r3, #0
    bbac:	beq	bbe0 <inet_ntop6+0xb0>
    bbb0:	cmn	r4, #1
    bbb4:	beq	bb94 <inet_ntop6+0x64>
    bbb8:	cmp	r0, r8
    bbbc:	mov	r3, #0
    bbc0:	movwgt	r3, #1
    bbc4:	add	r7, r1, #1
    bbc8:	clz	r7, r7
    bbcc:	lsr	r7, r7, #5
    bbd0:	orrs	r3, r7, r3
    bbd4:	movne	r1, r4
    bbd8:	movne	r8, r0
    bbdc:	b	bb94 <inet_ntop6+0x64>
    bbe0:	cmn	r4, #1
    bbe4:	moveq	r4, r2
    bbe8:	add	r0, r0, #1
    bbec:	movweq	r0, #1
    bbf0:	b	bb98 <inet_ntop6+0x68>
    bbf4:	cmn	r4, #1
    bbf8:	beq	bc24 <inet_ntop6+0xf4>
    bbfc:	mov	r2, #0
    bc00:	cmp	r0, r8
    bc04:	movwgt	r2, #1
    bc08:	add	r3, r1, #1
    bc0c:	clz	r3, r3
    bc10:	lsr	r3, r3, #5
    bc14:	orrs	r2, r3, r2
    bc18:	moveq	r4, r1
    bc1c:	movne	r8, r0
    bc20:	b	bc28 <inet_ntop6+0xf8>
    bc24:	mov	r4, r1
    bc28:	cmn	r4, #1
    bc2c:	movne	r4, r4
    bc30:	cmp	r8, #2
    bc34:	mvnlt	r4, #0
    bc38:	add	r9, r4, r8
    bc3c:	mov	sl, #0
    bc40:	add	r7, sp, #40	; 0x28
    bc44:	cmp	sl, r9
    bc48:	blt	bc8c <inet_ntop6+0x15c>
    bc4c:	b	bcbc <inet_ntop6+0x18c>
    bc50:	ldr	r0, [sp, #28]
    bc54:	movw	r1, #65535	; 0xffff
    bc58:	cmp	r0, r1
    bc5c:	beq	bce8 <inet_ntop6+0x1b8>
    bc60:	ldr	r2, [r5, sl, lsl #2]
    bc64:	mov	r0, r7
    bc68:	ldr	r1, [pc, #252]	; bd6c <inet_ntop6+0x23c>
    bc6c:	add	r1, pc, r1
    bc70:	bl	5624 <sprintf@plt>
    bc74:	add	r7, r7, r0
    bc78:	add	sl, sl, #1
    bc7c:	cmp	sl, #8
    bc80:	beq	bd14 <inet_ntop6+0x1e4>
    bc84:	cmp	sl, r9
    bc88:	bge	bcbc <inet_ntop6+0x18c>
    bc8c:	cmn	r4, #1
    bc90:	beq	bcbc <inet_ntop6+0x18c>
    bc94:	cmp	sl, r4
    bc98:	blt	bcbc <inet_ntop6+0x18c>
    bc9c:	cmp	r4, sl
    bca0:	bne	bc78 <inet_ntop6+0x148>
    bca4:	cmp	sl, #0
    bca8:	moveq	r0, #48	; 0x30
    bcac:	strbeq	r0, [r7], #1
    bcb0:	mov	r0, #58	; 0x3a
    bcb4:	strb	r0, [r7], #1
    bcb8:	b	bc78 <inet_ntop6+0x148>
    bcbc:	cmp	sl, #0
    bcc0:	beq	bc60 <inet_ntop6+0x130>
    bcc4:	mov	r0, #58	; 0x3a
    bcc8:	strb	r0, [r7], #1
    bccc:	cmp	r4, #0
    bcd0:	cmpeq	sl, #6
    bcd4:	bne	bc60 <inet_ntop6+0x130>
    bcd8:	cmp	r8, #5
    bcdc:	beq	bc50 <inet_ntop6+0x120>
    bce0:	cmp	r8, #6
    bce4:	bne	bc60 <inet_ntop6+0x130>
    bce8:	add	r0, sp, #40	; 0x28
    bcec:	sub	r0, r0, r7
    bcf0:	add	r2, r0, #46	; 0x2e
    bcf4:	add	r0, r6, #12
    bcf8:	mov	r1, r7
    bcfc:	bl	baec <inet_ntop4>
    bd00:	cmp	r0, #0
    bd04:	beq	bd60 <inet_ntop6+0x230>
    bd08:	mov	r0, r7
    bd0c:	bl	50fc <strlen@plt>
    bd10:	add	r7, r7, r0
    bd14:	cmn	r4, #1
    bd18:	beq	bd28 <inet_ntop6+0x1f8>
    bd1c:	cmp	r9, #8
    bd20:	moveq	r0, #58	; 0x3a
    bd24:	strbeq	r0, [r7], #1
    bd28:	add	r1, sp, #40	; 0x28
    bd2c:	mov	r0, #0
    bd30:	strb	r0, [r7], -r1
    bd34:	add	r2, r7, #1
    bd38:	ldr	r1, [sp, #4]
    bd3c:	cmp	r2, r1
    bd40:	bhi	bd58 <inet_ntop6+0x228>
    bd44:	add	r1, sp, #40	; 0x28
    bd48:	ldr	r4, [sp]
    bd4c:	mov	r0, r4
    bd50:	bl	5120 <memcpy@plt>
    bd54:	mov	r0, r4
    bd58:	sub	sp, fp, #28
    bd5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd60:	mov	r0, #0
    bd64:	sub	sp, fp, #28
    bd68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd6c:	.word	0x0000a0b1

0000bd70 <inet_pton4>:
    bd70:	push	{r4, sl, fp, lr}
    bd74:	add	fp, sp, #8
    bd78:	sub	sp, sp, #4
    bd7c:	mov	r2, r0
    bd80:	mov	r0, #0
    bd84:	strb	r0, [sp]
    bd88:	ldrb	r4, [r2]
    bd8c:	cmp	r4, #0
    bd90:	beq	be44 <inet_pton4+0xd4>
    bd94:	add	r3, r2, #1
    bd98:	mov	ip, #0
    bd9c:	mov	lr, sp
    bda0:	mov	r2, #0
    bda4:	b	bdbc <inet_pton4+0x4c>
    bda8:	mov	r2, #0
    bdac:	strb	r2, [lr, #1]!
    bdb0:	ldrb	r4, [r3], #1
    bdb4:	cmp	r4, #0
    bdb8:	beq	be2c <inet_pton4+0xbc>
    bdbc:	sub	r0, r4, #48	; 0x30
    bdc0:	uxtb	r0, r0
    bdc4:	cmp	r0, #9
    bdc8:	bhi	be0c <inet_pton4+0x9c>
    bdcc:	ldrb	r0, [lr]
    bdd0:	add	r0, r0, r0, lsl #2
    bdd4:	lsl	r0, r0, #1
    bdd8:	uxtab	r0, r0, r4
    bddc:	sub	r4, r0, #48	; 0x30
    bde0:	mov	r0, #0
    bde4:	cmp	r4, #255	; 0xff
    bde8:	bhi	be44 <inet_pton4+0xd4>
    bdec:	strb	r4, [lr]
    bdf0:	cmp	r2, #0
    bdf4:	bne	bdb0 <inet_pton4+0x40>
    bdf8:	cmp	ip, #3
    bdfc:	bgt	be44 <inet_pton4+0xd4>
    be00:	add	ip, ip, #1
    be04:	mov	r2, #1
    be08:	b	bdb0 <inet_pton4+0x40>
    be0c:	mov	r0, #0
    be10:	cmp	ip, #4
    be14:	cmpne	r2, #0
    be18:	beq	be44 <inet_pton4+0xd4>
    be1c:	uxtb	r2, r4
    be20:	cmp	r2, #46	; 0x2e
    be24:	beq	bda8 <inet_pton4+0x38>
    be28:	b	be44 <inet_pton4+0xd4>
    be2c:	mov	r0, #0
    be30:	cmp	ip, #4
    be34:	blt	be44 <inet_pton4+0xd4>
    be38:	ldr	r0, [sp]
    be3c:	str	r0, [r1]
    be40:	mov	r0, #1
    be44:	sub	sp, fp, #8
    be48:	pop	{r4, sl, fp, pc}

0000be4c <inet_pton6>:
    be4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be50:	add	fp, sp, #28
    be54:	sub	sp, sp, #36	; 0x24
    be58:	mov	r8, r0
    be5c:	vmov.i32	q8, #0	; 0x00000000
    be60:	add	r2, sp, #16
    be64:	mov	r0, r2
    be68:	vst1.64	{d16-d17}, [r0]!
    be6c:	str	r0, [sp, #8]
    be70:	ldrb	r0, [r8]
    be74:	cmp	r0, #58	; 0x3a
    be78:	str	r1, [sp]
    be7c:	str	r2, [sp, #12]
    be80:	bne	be94 <inet_pton6+0x48>
    be84:	ldrb	r0, [r8, #1]!
    be88:	mov	r5, #0
    be8c:	cmp	r0, #58	; 0x3a
    be90:	bne	c084 <inet_pton6+0x238>
    be94:	bl	5144 <__ctype_tolower_loc@plt>
    be98:	mov	r7, r0
    be9c:	ldrb	r0, [r8]
    bea0:	ldr	r1, [r7]
    bea4:	ldr	r5, [r1, r0, lsl #2]
    bea8:	cmp	r5, #0
    beac:	beq	c02c <inet_pton6+0x1e0>
    beb0:	add	r6, r8, #1
    beb4:	mov	r0, #0
    beb8:	str	r0, [sp, #4]
    bebc:	ldr	r4, [pc, #460]	; c090 <inet_pton6+0x244>
    bec0:	add	r4, pc, r4
    bec4:	mov	sl, #0
    bec8:	mov	r9, #0
    becc:	b	befc <inet_pton6+0xb0>
    bed0:	sub	r0, r0, r4
    bed4:	orr	sl, r0, sl, lsl #4
    bed8:	mov	r9, #1
    bedc:	mov	r5, #0
    bee0:	cmp	r5, sl, lsr #16
    bee4:	bne	c084 <inet_pton6+0x238>
    bee8:	ldrb	r0, [r6], #1
    beec:	ldr	r1, [r7]
    bef0:	ldr	r5, [r1, r0, lsl #2]
    bef4:	cmp	r5, #0
    bef8:	beq	bfa4 <inet_pton6+0x158>
    befc:	mov	r0, r4
    bf00:	mov	r1, r5
    bf04:	mov	r2, #17
    bf08:	bl	55e8 <memchr@plt>
    bf0c:	cmp	r0, #0
    bf10:	bne	bed0 <inet_pton6+0x84>
    bf14:	cmp	r5, #58	; 0x3a
    bf18:	bne	bf68 <inet_pton6+0x11c>
    bf1c:	cmp	r9, #0
    bf20:	beq	bf80 <inet_pton6+0x134>
    bf24:	ldr	r0, [sp, #12]
    bf28:	add	r0, r0, #2
    bf2c:	mov	r5, #0
    bf30:	ldr	r1, [sp, #8]
    bf34:	cmp	r0, r1
    bf38:	bhi	c084 <inet_pton6+0x238>
    bf3c:	ldrb	r1, [r6]
    bf40:	cmp	r1, #0
    bf44:	beq	c084 <inet_pton6+0x238>
    bf48:	rev16	r1, sl
    bf4c:	ldr	r2, [sp, #12]
    bf50:	strh	r1, [r2]
    bf54:	mov	r9, #0
    bf58:	mov	r8, r6
    bf5c:	mov	sl, #0
    bf60:	str	r0, [sp, #12]
    bf64:	b	bee8 <inet_pton6+0x9c>
    bf68:	cmp	r5, #46	; 0x2e
    bf6c:	bne	bee8 <inet_pton6+0x9c>
    bf70:	ldrb	r0, [r6]
    bf74:	cmp	r0, #0
    bf78:	beq	bee8 <inet_pton6+0x9c>
    bf7c:	b	c05c <inet_pton6+0x210>
    bf80:	mov	r9, #0
    bf84:	ldr	r0, [sp, #4]
    bf88:	cmp	r0, #0
    bf8c:	mov	r8, r6
    bf90:	ldr	r0, [sp, #12]
    bf94:	str	r0, [sp, #4]
    bf98:	mov	r5, #0
    bf9c:	beq	bee8 <inet_pton6+0x9c>
    bfa0:	b	c084 <inet_pton6+0x238>
    bfa4:	cmp	r9, #0
    bfa8:	beq	bfd4 <inet_pton6+0x188>
    bfac:	ldr	r0, [sp, #12]
    bfb0:	add	r4, r0, #2
    bfb4:	mov	r5, #0
    bfb8:	ldr	r0, [sp, #8]
    bfbc:	cmp	r4, r0
    bfc0:	bhi	c084 <inet_pton6+0x238>
    bfc4:	rev16	r0, sl
    bfc8:	ldr	r1, [sp, #12]
    bfcc:	strh	r0, [r1]
    bfd0:	b	bfd8 <inet_pton6+0x18c>
    bfd4:	ldr	r4, [sp, #12]
    bfd8:	ldr	r0, [sp, #4]
    bfdc:	cmp	r0, #0
    bfe0:	beq	c034 <inet_pton6+0x1e8>
    bfe4:	ldr	r0, [sp, #8]
    bfe8:	cmp	r4, r0
    bfec:	beq	c02c <inet_pton6+0x1e0>
    bff0:	ldr	r0, [sp, #4]
    bff4:	sub	r0, r4, r0
    bff8:	cmp	r0, #1
    bffc:	blt	c044 <inet_pton6+0x1f8>
    c000:	ldr	r1, [sp, #4]
    c004:	sub	r1, r1, #1
    c008:	add	r2, sp, #16
    c00c:	add	r2, r2, #15
    c010:	mov	r3, #0
    c014:	ldrb	r7, [r1, r0]
    c018:	strb	r7, [r2], #-1
    c01c:	strb	r3, [r1, r0]
    c020:	subs	r0, r0, #1
    c024:	bne	c014 <inet_pton6+0x1c8>
    c028:	b	c044 <inet_pton6+0x1f8>
    c02c:	mov	r5, #0
    c030:	b	c084 <inet_pton6+0x238>
    c034:	mov	r5, #0
    c038:	ldr	r0, [sp, #8]
    c03c:	cmp	r4, r0
    c040:	bne	c084 <inet_pton6+0x238>
    c044:	add	r0, sp, #16
    c048:	vld1.64	{d16-d17}, [r0]
    c04c:	ldr	r0, [sp]
    c050:	vst1.8	{d16-d17}, [r0]
    c054:	mov	r5, #1
    c058:	b	c084 <inet_pton6+0x238>
    c05c:	ldr	r1, [sp, #12]
    c060:	add	r4, r1, #4
    c064:	mov	r5, #0
    c068:	ldr	r0, [sp, #8]
    c06c:	cmp	r4, r0
    c070:	bhi	c084 <inet_pton6+0x238>
    c074:	mov	r0, r8
    c078:	bl	bd70 <inet_pton4>
    c07c:	cmp	r0, #0
    c080:	bgt	bfd8 <inet_pton6+0x18c>
    c084:	mov	r0, r5
    c088:	sub	sp, fp, #28
    c08c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c090:	.word	0x00009e65

0000c094 <rb_get_iotype>:
    c094:	ldr	r0, [pc, #4]	; c0a0 <rb_get_iotype+0xc>
    c098:	add	r0, pc, r0
    c09c:	bx	lr
    c0a0:	.word	0x0002e8a4

0000c0a4 <rb_io_sched_event>:
    c0a4:	push	{r4, r5, fp, lr}
    c0a8:	add	fp, sp, #8
    c0ac:	cmp	r0, #0
    c0b0:	beq	c0d8 <rb_io_sched_event+0x34>
    c0b4:	mov	r5, r0
    c0b8:	ldr	r0, [pc, #68]	; c104 <rb_io_sched_event+0x60>
    c0bc:	ldr	r0, [pc, r0]
    c0c0:	cmp	r0, #0
    c0c4:	movne	r4, r1
    c0c8:	ldrne	r1, [pc, #56]	; c108 <rb_io_sched_event+0x64>
    c0cc:	ldrne	r1, [pc, r1]
    c0d0:	cmpne	r1, #0
    c0d4:	bne	c0e0 <rb_io_sched_event+0x3c>
    c0d8:	mov	r0, #0
    c0dc:	pop	{r4, r5, fp, pc}
    c0e0:	blx	r0
    c0e4:	cmp	r0, #0
    c0e8:	beq	c0d8 <rb_io_sched_event+0x34>
    c0ec:	ldr	r2, [pc, #24]	; c10c <rb_io_sched_event+0x68>
    c0f0:	ldr	r2, [pc, r2]
    c0f4:	mov	r0, r5
    c0f8:	mov	r1, r4
    c0fc:	pop	{r4, r5, fp, lr}
    c100:	bx	r2
    c104:	.word	0x0002e89c
    c108:	.word	0x0002e890
    c10c:	.word	0x0002e86c

0000c110 <rb_io_unsched_event>:
    c110:	push	{r4, sl, fp, lr}
    c114:	add	fp, sp, #8
    c118:	cmp	r0, #0
    c11c:	beq	c140 <rb_io_unsched_event+0x30>
    c120:	mov	r4, r0
    c124:	ldr	r0, [pc, #56]	; c164 <rb_io_unsched_event+0x54>
    c128:	ldr	r0, [pc, r0]
    c12c:	cmp	r0, #0
    c130:	ldrne	r1, [pc, #48]	; c168 <rb_io_unsched_event+0x58>
    c134:	ldrne	r1, [pc, r1]
    c138:	cmpne	r1, #0
    c13c:	bne	c144 <rb_io_unsched_event+0x34>
    c140:	pop	{r4, sl, fp, pc}
    c144:	blx	r0
    c148:	cmp	r0, #0
    c14c:	popeq	{r4, sl, fp, pc}
    c150:	ldr	r1, [pc, #20]	; c16c <rb_io_unsched_event+0x5c>
    c154:	ldr	r1, [pc, r1]
    c158:	mov	r0, r4
    c15c:	pop	{r4, sl, fp, lr}
    c160:	bx	r1
    c164:	.word	0x0002e830
    c168:	.word	0x0002e82c
    c16c:	.word	0x0002e80c

0000c170 <rb_io_supports_event>:
    c170:	ldr	r0, [pc, #16]	; c188 <rb_io_supports_event+0x18>
    c174:	ldr	r0, [pc, r0]
    c178:	cmp	r0, #0
    c17c:	moveq	r0, #0
    c180:	bxeq	lr
    c184:	bx	r0
    c188:	.word	0x0002e7e4

0000c18c <rb_io_init_event>:
    c18c:	push	{fp, lr}
    c190:	mov	fp, sp
    c194:	ldr	r0, [pc, #12]	; c1a8 <rb_io_init_event+0x1c>
    c198:	ldr	r0, [pc, r0]
    c19c:	blx	r0
    c1a0:	pop	{fp, lr}
    c1a4:	b	e688 <rb_event_io_register_all>
    c1a8:	.word	0x0002e7cc

0000c1ac <rb_init_netio>:
    c1ac:	push	{r4, sl, fp, lr}
    c1b0:	add	fp, sp, #8
    c1b4:	ldr	r0, [pc, #468]	; c390 <rb_init_netio+0x1e4>
    c1b8:	add	r0, pc, r0
    c1bc:	bl	4ed4 <getenv@plt>
    c1c0:	mov	r4, r0
    c1c4:	mov	r0, #49152	; 0xc000
    c1c8:	bl	a7c0 <rb_malloc>
    c1cc:	ldr	r1, [pc, #448]	; c394 <rb_init_netio+0x1e8>
    c1d0:	ldr	r1, [pc, r1]
    c1d4:	str	r0, [r1]
    c1d8:	bl	d210 <rb_init_ssl>
    c1dc:	cmp	r4, #0
    c1e0:	beq	c31c <rb_init_netio+0x170>
    c1e4:	ldr	r0, [pc, #428]	; c398 <rb_init_netio+0x1ec>
    c1e8:	add	r0, pc, r0
    c1ec:	mov	r1, r4
    c1f0:	bl	5600 <strcmp@plt>
    c1f4:	cmp	r0, #0
    c1f8:	beq	c29c <rb_init_netio+0xf0>
    c1fc:	ldr	r0, [pc, #408]	; c39c <rb_init_netio+0x1f0>
    c200:	add	r0, pc, r0
    c204:	mov	r1, r4
    c208:	bl	5600 <strcmp@plt>
    c20c:	cmp	r0, #0
    c210:	beq	c2ac <rb_init_netio+0x100>
    c214:	ldr	r0, [pc, #388]	; c3a0 <rb_init_netio+0x1f4>
    c218:	add	r0, pc, r0
    c21c:	mov	r1, r4
    c220:	bl	5600 <strcmp@plt>
    c224:	cmp	r0, #0
    c228:	beq	c2bc <rb_init_netio+0x110>
    c22c:	ldr	r0, [pc, #368]	; c3a4 <rb_init_netio+0x1f8>
    c230:	add	r0, pc, r0
    c234:	mov	r1, r4
    c238:	bl	5600 <strcmp@plt>
    c23c:	cmp	r0, #0
    c240:	beq	c2cc <rb_init_netio+0x120>
    c244:	ldr	r0, [pc, #348]	; c3a8 <rb_init_netio+0x1fc>
    c248:	add	r0, pc, r0
    c24c:	mov	r1, r4
    c250:	bl	5600 <strcmp@plt>
    c254:	cmp	r0, #0
    c258:	beq	c2dc <rb_init_netio+0x130>
    c25c:	ldr	r0, [pc, #328]	; c3ac <rb_init_netio+0x200>
    c260:	add	r0, pc, r0
    c264:	mov	r1, r4
    c268:	bl	5600 <strcmp@plt>
    c26c:	cmp	r0, #0
    c270:	beq	c2ec <rb_init_netio+0x140>
    c274:	ldr	r0, [pc, #308]	; c3b0 <rb_init_netio+0x204>
    c278:	add	r0, pc, r0
    c27c:	mov	r1, r4
    c280:	bl	5600 <strcmp@plt>
    c284:	cmp	r0, #0
    c288:	bne	c2f8 <rb_init_netio+0x14c>
    c28c:	bl	c9b4 <try_select>
    c290:	cmp	r0, #0
    c294:	bne	c2f8 <rb_init_netio+0x14c>
    c298:	b	c37c <rb_init_netio+0x1d0>
    c29c:	bl	c3bc <try_epoll>
    c2a0:	cmp	r0, #0
    c2a4:	bne	c2f8 <rb_init_netio+0x14c>
    c2a8:	b	c37c <rb_init_netio+0x1d0>
    c2ac:	bl	c4c4 <try_kqueue>
    c2b0:	cmp	r0, #0
    c2b4:	bne	c2f8 <rb_init_netio+0x14c>
    c2b8:	b	c37c <rb_init_netio+0x1d0>
    c2bc:	bl	c5cc <try_ports>
    c2c0:	cmp	r0, #0
    c2c4:	bne	c2f8 <rb_init_netio+0x14c>
    c2c8:	b	c37c <rb_init_netio+0x1d0>
    c2cc:	bl	c6d4 <try_poll>
    c2d0:	cmp	r0, #0
    c2d4:	bne	c2f8 <rb_init_netio+0x14c>
    c2d8:	b	c37c <rb_init_netio+0x1d0>
    c2dc:	bl	c7c0 <try_devpoll>
    c2e0:	cmp	r0, #0
    c2e4:	bne	c2f8 <rb_init_netio+0x14c>
    c2e8:	b	c37c <rb_init_netio+0x1d0>
    c2ec:	bl	c8ac <try_sigio>
    c2f0:	cmp	r0, #0
    c2f4:	beq	c37c <rb_init_netio+0x1d0>
    c2f8:	ldr	r0, [pc, #180]	; c3b4 <rb_init_netio+0x208>
    c2fc:	add	r0, pc, r0
    c300:	mov	r1, r4
    c304:	bl	5600 <strcmp@plt>
    c308:	cmp	r0, #0
    c30c:	bne	c31c <rb_init_netio+0x170>
    c310:	bl	caa0 <try_win32>
    c314:	cmp	r0, #0
    c318:	beq	c37c <rb_init_netio+0x1d0>
    c31c:	bl	c4c4 <try_kqueue>
    c320:	cmp	r0, #0
    c324:	beq	c37c <rb_init_netio+0x1d0>
    c328:	bl	c3bc <try_epoll>
    c32c:	cmp	r0, #0
    c330:	beq	c37c <rb_init_netio+0x1d0>
    c334:	bl	c5cc <try_ports>
    c338:	cmp	r0, #0
    c33c:	beq	c37c <rb_init_netio+0x1d0>
    c340:	bl	c7c0 <try_devpoll>
    c344:	cmp	r0, #0
    c348:	beq	c37c <rb_init_netio+0x1d0>
    c34c:	bl	c8ac <try_sigio>
    c350:	cmp	r0, #0
    c354:	beq	c37c <rb_init_netio+0x1d0>
    c358:	bl	c6d4 <try_poll>
    c35c:	cmp	r0, #0
    c360:	beq	c37c <rb_init_netio+0x1d0>
    c364:	bl	caa0 <try_win32>
    c368:	cmp	r0, #0
    c36c:	popeq	{r4, sl, fp, pc}
    c370:	bl	c9b4 <try_select>
    c374:	cmp	r0, #0
    c378:	bne	c380 <rb_init_netio+0x1d4>
    c37c:	pop	{r4, sl, fp, pc}
    c380:	ldr	r0, [pc, #48]	; c3b8 <rb_init_netio+0x20c>
    c384:	add	r0, pc, r0
    c388:	bl	5240 <rb_lib_log@plt>
    c38c:	bl	4d0c <abort@plt>
    c390:	.word	0x0000970a
    c394:	.word	0x0001c1d8
    c398:	.word	0x000096eb
    c39c:	.word	0x000096d9
    c3a0:	.word	0x000096c8
    c3a4:	.word	0x000096a4
    c3a8:	.word	0x0000969e
    c3ac:	.word	0x0000968e
    c3b0:	.word	0x0000967c
    c3b4:	.word	0x000095ff
    c3b8:	.word	0x0000957d

0000c3bc <try_epoll>:
    c3bc:	push	{fp, lr}
    c3c0:	mov	fp, sp
    c3c4:	bl	1077c <rb_init_netio_epoll>
    c3c8:	mov	r1, r0
    c3cc:	mvn	r0, #0
    c3d0:	cmp	r1, #0
    c3d4:	popne	{fp, pc}
    c3d8:	ldr	r0, [pc, #164]	; c484 <try_epoll+0xc8>
    c3dc:	ldr	r0, [pc, r0]
    c3e0:	ldr	r1, [pc, #160]	; c488 <try_epoll+0xcc>
    c3e4:	add	r1, pc, r1
    c3e8:	str	r0, [r1]
    c3ec:	ldr	r0, [pc, #152]	; c48c <try_epoll+0xd0>
    c3f0:	ldr	r0, [pc, r0]
    c3f4:	ldr	r1, [pc, #148]	; c490 <try_epoll+0xd4>
    c3f8:	add	r1, pc, r1
    c3fc:	str	r0, [r1]
    c400:	ldr	r0, [pc, #140]	; c494 <try_epoll+0xd8>
    c404:	ldr	r0, [pc, r0]
    c408:	ldr	r1, [pc, #136]	; c498 <try_epoll+0xdc>
    c40c:	add	r1, pc, r1
    c410:	str	r0, [r1]
    c414:	ldr	r0, [pc, #128]	; c49c <try_epoll+0xe0>
    c418:	ldr	r0, [pc, r0]
    c41c:	ldr	r1, [pc, #124]	; c4a0 <try_epoll+0xe4>
    c420:	add	r1, pc, r1
    c424:	str	r0, [r1]
    c428:	ldr	r0, [pc, #116]	; c4a4 <try_epoll+0xe8>
    c42c:	ldr	r0, [pc, r0]
    c430:	ldr	r1, [pc, #112]	; c4a8 <try_epoll+0xec>
    c434:	add	r1, pc, r1
    c438:	str	r0, [r1]
    c43c:	ldr	r0, [pc, #104]	; c4ac <try_epoll+0xf0>
    c440:	ldr	r0, [pc, r0]
    c444:	ldr	r1, [pc, #100]	; c4b0 <try_epoll+0xf4>
    c448:	add	r1, pc, r1
    c44c:	str	r0, [r1]
    c450:	ldr	r0, [pc, #92]	; c4b4 <try_epoll+0xf8>
    c454:	ldr	r0, [pc, r0]
    c458:	ldr	r1, [pc, #88]	; c4b8 <try_epoll+0xfc>
    c45c:	add	r1, pc, r1
    c460:	str	r0, [r1]
    c464:	ldr	r0, [pc, #80]	; c4bc <try_epoll+0x100>
    c468:	add	r0, pc, r0
    c46c:	ldr	r1, [pc, #76]	; c4c0 <try_epoll+0x104>
    c470:	add	r1, pc, r1
    c474:	mov	r2, #25
    c478:	bl	4fd0 <rb_strlcpy@plt>
    c47c:	mov	r0, #0
    c480:	pop	{fp, pc}
    c484:	.word	0x0001bfd4
    c488:	.word	0x0002e588
    c48c:	.word	0x0001bf60
    c490:	.word	0x0002e570
    c494:	.word	0x0001bfe8
    c498:	.word	0x0002e564
    c49c:	.word	0x0001bf54
    c4a0:	.word	0x0002e53c
    c4a4:	.word	0x0001bf80
    c4a8:	.word	0x0002e52c
    c4ac:	.word	0x0001bf00
    c4b0:	.word	0x0002e510
    c4b4:	.word	0x0001bfac
    c4b8:	.word	0x0002e508
    c4bc:	.word	0x0002e4d4
    c4c0:	.word	0x00009463

0000c4c4 <try_kqueue>:
    c4c4:	push	{fp, lr}
    c4c8:	mov	fp, sp
    c4cc:	bl	124bc <rb_init_netio_kqueue>
    c4d0:	mov	r1, r0
    c4d4:	mvn	r0, #0
    c4d8:	cmp	r1, #0
    c4dc:	popne	{fp, pc}
    c4e0:	ldr	r0, [pc, #164]	; c58c <try_kqueue+0xc8>
    c4e4:	ldr	r0, [pc, r0]
    c4e8:	ldr	r1, [pc, #160]	; c590 <try_kqueue+0xcc>
    c4ec:	add	r1, pc, r1
    c4f0:	str	r0, [r1]
    c4f4:	ldr	r0, [pc, #152]	; c594 <try_kqueue+0xd0>
    c4f8:	ldr	r0, [pc, r0]
    c4fc:	ldr	r1, [pc, #148]	; c598 <try_kqueue+0xd4>
    c500:	add	r1, pc, r1
    c504:	str	r0, [r1]
    c508:	ldr	r0, [pc, #140]	; c59c <try_kqueue+0xd8>
    c50c:	ldr	r0, [pc, r0]
    c510:	ldr	r1, [pc, #136]	; c5a0 <try_kqueue+0xdc>
    c514:	add	r1, pc, r1
    c518:	str	r0, [r1]
    c51c:	ldr	r0, [pc, #128]	; c5a4 <try_kqueue+0xe0>
    c520:	ldr	r0, [pc, r0]
    c524:	ldr	r1, [pc, #124]	; c5a8 <try_kqueue+0xe4>
    c528:	add	r1, pc, r1
    c52c:	str	r0, [r1]
    c530:	ldr	r0, [pc, #116]	; c5ac <try_kqueue+0xe8>
    c534:	ldr	r0, [pc, r0]
    c538:	ldr	r1, [pc, #112]	; c5b0 <try_kqueue+0xec>
    c53c:	add	r1, pc, r1
    c540:	str	r0, [r1]
    c544:	ldr	r0, [pc, #104]	; c5b4 <try_kqueue+0xf0>
    c548:	ldr	r0, [pc, r0]
    c54c:	ldr	r1, [pc, #100]	; c5b8 <try_kqueue+0xf4>
    c550:	add	r1, pc, r1
    c554:	str	r0, [r1]
    c558:	ldr	r0, [pc, #92]	; c5bc <try_kqueue+0xf8>
    c55c:	ldr	r0, [pc, r0]
    c560:	ldr	r1, [pc, #88]	; c5c0 <try_kqueue+0xfc>
    c564:	add	r1, pc, r1
    c568:	str	r0, [r1]
    c56c:	ldr	r0, [pc, #80]	; c5c4 <try_kqueue+0x100>
    c570:	add	r0, pc, r0
    c574:	ldr	r1, [pc, #76]	; c5c8 <try_kqueue+0x104>
    c578:	add	r1, pc, r1
    c57c:	mov	r2, #25
    c580:	bl	4fd0 <rb_strlcpy@plt>
    c584:	mov	r0, #0
    c588:	pop	{fp, pc}
    c58c:	.word	0x0001be7c
    c590:	.word	0x0002e480
    c594:	.word	0x0001beac
    c598:	.word	0x0002e468
    c59c:	.word	0x0001be74
    c5a0:	.word	0x0002e45c
    c5a4:	.word	0x0001be58
    c5a8:	.word	0x0002e434
    c5ac:	.word	0x0001be88
    c5b0:	.word	0x0002e424
    c5b4:	.word	0x0001be34
    c5b8:	.word	0x0002e414
    c5bc:	.word	0x0001be70
    c5c0:	.word	0x0002e3f4
    c5c4:	.word	0x0002e3cc
    c5c8:	.word	0x00009361

0000c5cc <try_ports>:
    c5cc:	push	{fp, lr}
    c5d0:	mov	fp, sp
    c5d4:	bl	11670 <rb_init_netio_ports>
    c5d8:	mov	r1, r0
    c5dc:	mvn	r0, #0
    c5e0:	cmp	r1, #0
    c5e4:	popne	{fp, pc}
    c5e8:	ldr	r0, [pc, #164]	; c694 <try_ports+0xc8>
    c5ec:	ldr	r0, [pc, r0]
    c5f0:	ldr	r1, [pc, #160]	; c698 <try_ports+0xcc>
    c5f4:	add	r1, pc, r1
    c5f8:	str	r0, [r1]
    c5fc:	ldr	r0, [pc, #152]	; c69c <try_ports+0xd0>
    c600:	ldr	r0, [pc, r0]
    c604:	ldr	r1, [pc, #148]	; c6a0 <try_ports+0xd4>
    c608:	add	r1, pc, r1
    c60c:	str	r0, [r1]
    c610:	ldr	r0, [pc, #140]	; c6a4 <try_ports+0xd8>
    c614:	ldr	r0, [pc, r0]
    c618:	ldr	r1, [pc, #136]	; c6a8 <try_ports+0xdc>
    c61c:	add	r1, pc, r1
    c620:	str	r0, [r1]
    c624:	ldr	r0, [pc, #128]	; c6ac <try_ports+0xe0>
    c628:	ldr	r0, [pc, r0]
    c62c:	ldr	r1, [pc, #124]	; c6b0 <try_ports+0xe4>
    c630:	add	r1, pc, r1
    c634:	str	r0, [r1]
    c638:	ldr	r0, [pc, #116]	; c6b4 <try_ports+0xe8>
    c63c:	ldr	r0, [pc, r0]
    c640:	ldr	r1, [pc, #112]	; c6b8 <try_ports+0xec>
    c644:	add	r1, pc, r1
    c648:	str	r0, [r1]
    c64c:	ldr	r0, [pc, #104]	; c6bc <try_ports+0xf0>
    c650:	ldr	r0, [pc, r0]
    c654:	ldr	r1, [pc, #100]	; c6c0 <try_ports+0xf4>
    c658:	add	r1, pc, r1
    c65c:	str	r0, [r1]
    c660:	ldr	r0, [pc, #92]	; c6c4 <try_ports+0xf8>
    c664:	ldr	r0, [pc, r0]
    c668:	ldr	r1, [pc, #88]	; c6c8 <try_ports+0xfc>
    c66c:	add	r1, pc, r1
    c670:	str	r0, [r1]
    c674:	ldr	r0, [pc, #80]	; c6cc <try_ports+0x100>
    c678:	add	r0, pc, r0
    c67c:	ldr	r1, [pc, #76]	; c6d0 <try_ports+0x104>
    c680:	add	r1, pc, r1
    c684:	mov	r2, #25
    c688:	bl	4fd0 <rb_strlcpy@plt>
    c68c:	mov	r0, #0
    c690:	pop	{fp, pc}
    c694:	.word	0x0001bd84
    c698:	.word	0x0002e378
    c69c:	.word	0x0001bdd0
    c6a0:	.word	0x0002e360
    c6a4:	.word	0x0001bde4
    c6a8:	.word	0x0002e354
    c6ac:	.word	0x0001bd14
    c6b0:	.word	0x0002e32c
    c6b4:	.word	0x0001bdb8
    c6b8:	.word	0x0002e31c
    c6bc:	.word	0x0001bcfc
    c6c0:	.word	0x0002e30c
    c6c4:	.word	0x0001bd64
    c6c8:	.word	0x0002e2ec
    c6cc:	.word	0x0002e2c4
    c6d0:	.word	0x00009260

0000c6d4 <try_poll>:
    c6d4:	push	{r4, sl, fp, lr}
    c6d8:	add	fp, sp, #8
    c6dc:	bl	111cc <rb_init_netio_poll>
    c6e0:	mvn	r4, #0
    c6e4:	cmp	r0, #0
    c6e8:	beq	c6f4 <try_poll+0x20>
    c6ec:	mov	r0, r4
    c6f0:	pop	{r4, sl, fp, pc}
    c6f4:	ldr	r0, [pc, #144]	; c78c <try_poll+0xb8>
    c6f8:	add	r0, pc, r0
    c6fc:	mov	r4, #0
    c700:	str	r4, [r0]
    c704:	ldr	r0, [pc, #132]	; c790 <try_poll+0xbc>
    c708:	add	r0, pc, r0
    c70c:	str	r4, [r0]
    c710:	ldr	r0, [pc, #124]	; c794 <try_poll+0xc0>
    c714:	add	r0, pc, r0
    c718:	str	r4, [r0]
    c71c:	ldr	r0, [pc, #116]	; c798 <try_poll+0xc4>
    c720:	add	r0, pc, r0
    c724:	ldr	r1, [pc, #112]	; c79c <try_poll+0xc8>
    c728:	add	r1, pc, r1
    c72c:	str	r1, [r0]
    c730:	ldr	r0, [pc, #104]	; c7a0 <try_poll+0xcc>
    c734:	ldr	r0, [pc, r0]
    c738:	ldr	r1, [pc, #100]	; c7a4 <try_poll+0xd0>
    c73c:	add	r1, pc, r1
    c740:	str	r0, [r1]
    c744:	ldr	r0, [pc, #92]	; c7a8 <try_poll+0xd4>
    c748:	ldr	r0, [pc, r0]
    c74c:	ldr	r1, [pc, #88]	; c7ac <try_poll+0xd8>
    c750:	add	r1, pc, r1
    c754:	str	r0, [r1]
    c758:	ldr	r0, [pc, #80]	; c7b0 <try_poll+0xdc>
    c75c:	ldr	r0, [pc, r0]
    c760:	ldr	r1, [pc, #76]	; c7b4 <try_poll+0xe0>
    c764:	add	r1, pc, r1
    c768:	str	r0, [r1]
    c76c:	ldr	r0, [pc, #68]	; c7b8 <try_poll+0xe4>
    c770:	add	r0, pc, r0
    c774:	ldr	r1, [pc, #64]	; c7bc <try_poll+0xe8>
    c778:	add	r1, pc, r1
    c77c:	mov	r2, #25
    c780:	bl	4fd0 <rb_strlcpy@plt>
    c784:	mov	r0, r4
    c788:	pop	{r4, sl, fp, pc}
    c78c:	.word	0x0002e264
    c790:	.word	0x0002e258
    c794:	.word	0x0002e250
    c798:	.word	0x0002e238
    c79c:	.word	0x00000a3c
    c7a0:	.word	0x0001bcb0
    c7a4:	.word	0x0002e230
    c7a8:	.word	0x0001bc8c
    c7ac:	.word	0x0002e218
    c7b0:	.word	0x0001bc0c
    c7b4:	.word	0x0002e20c
    c7b8:	.word	0x0002e1cc
    c7bc:	.word	0x0000915c

0000c7c0 <try_devpoll>:
    c7c0:	push	{r4, sl, fp, lr}
    c7c4:	add	fp, sp, #8
    c7c8:	bl	10724 <rb_init_netio_devpoll>
    c7cc:	mvn	r4, #0
    c7d0:	cmp	r0, #0
    c7d4:	beq	c7e0 <try_devpoll+0x20>
    c7d8:	mov	r0, r4
    c7dc:	pop	{r4, sl, fp, pc}
    c7e0:	ldr	r0, [pc, #144]	; c878 <try_devpoll+0xb8>
    c7e4:	add	r0, pc, r0
    c7e8:	mov	r4, #0
    c7ec:	str	r4, [r0]
    c7f0:	ldr	r0, [pc, #132]	; c87c <try_devpoll+0xbc>
    c7f4:	add	r0, pc, r0
    c7f8:	str	r4, [r0]
    c7fc:	ldr	r0, [pc, #124]	; c880 <try_devpoll+0xc0>
    c800:	add	r0, pc, r0
    c804:	str	r4, [r0]
    c808:	ldr	r0, [pc, #116]	; c884 <try_devpoll+0xc4>
    c80c:	add	r0, pc, r0
    c810:	ldr	r1, [pc, #112]	; c888 <try_devpoll+0xc8>
    c814:	add	r1, pc, r1
    c818:	str	r1, [r0]
    c81c:	ldr	r0, [pc, #104]	; c88c <try_devpoll+0xcc>
    c820:	ldr	r0, [pc, r0]
    c824:	ldr	r1, [pc, #100]	; c890 <try_devpoll+0xd0>
    c828:	add	r1, pc, r1
    c82c:	str	r0, [r1]
    c830:	ldr	r0, [pc, #92]	; c894 <try_devpoll+0xd4>
    c834:	ldr	r0, [pc, r0]
    c838:	ldr	r1, [pc, #88]	; c898 <try_devpoll+0xd8>
    c83c:	add	r1, pc, r1
    c840:	str	r0, [r1]
    c844:	ldr	r0, [pc, #80]	; c89c <try_devpoll+0xdc>
    c848:	ldr	r0, [pc, r0]
    c84c:	ldr	r1, [pc, #76]	; c8a0 <try_devpoll+0xe0>
    c850:	add	r1, pc, r1
    c854:	str	r0, [r1]
    c858:	ldr	r0, [pc, #68]	; c8a4 <try_devpoll+0xe4>
    c85c:	add	r0, pc, r0
    c860:	ldr	r1, [pc, #64]	; c8a8 <try_devpoll+0xe8>
    c864:	add	r1, pc, r1
    c868:	mov	r2, #25
    c86c:	bl	4fd0 <rb_strlcpy@plt>
    c870:	mov	r0, r4
    c874:	pop	{r4, sl, fp, pc}
    c878:	.word	0x0002e178
    c87c:	.word	0x0002e16c
    c880:	.word	0x0002e164
    c884:	.word	0x0002e14c
    c888:	.word	0x00000950
    c88c:	.word	0x0001bbb8
    c890:	.word	0x0002e144
    c894:	.word	0x0001bb64
    c898:	.word	0x0002e12c
    c89c:	.word	0x0001bb54
    c8a0:	.word	0x0002e120
    c8a4:	.word	0x0002e0e0
    c8a8:	.word	0x00009082

0000c8ac <try_sigio>:
    c8ac:	push	{fp, lr}
    c8b0:	mov	fp, sp
    c8b4:	bl	116c8 <rb_init_netio_sigio>
    c8b8:	mov	r1, r0
    c8bc:	mvn	r0, #0
    c8c0:	cmp	r1, #0
    c8c4:	popne	{fp, pc}
    c8c8:	ldr	r0, [pc, #164]	; c974 <try_sigio+0xc8>
    c8cc:	ldr	r0, [pc, r0]
    c8d0:	ldr	r1, [pc, #160]	; c978 <try_sigio+0xcc>
    c8d4:	add	r1, pc, r1
    c8d8:	str	r0, [r1]
    c8dc:	ldr	r0, [pc, #152]	; c97c <try_sigio+0xd0>
    c8e0:	ldr	r0, [pc, r0]
    c8e4:	ldr	r1, [pc, #148]	; c980 <try_sigio+0xd4>
    c8e8:	add	r1, pc, r1
    c8ec:	str	r0, [r1]
    c8f0:	ldr	r0, [pc, #140]	; c984 <try_sigio+0xd8>
    c8f4:	ldr	r0, [pc, r0]
    c8f8:	ldr	r1, [pc, #136]	; c988 <try_sigio+0xdc>
    c8fc:	add	r1, pc, r1
    c900:	str	r0, [r1]
    c904:	ldr	r0, [pc, #128]	; c98c <try_sigio+0xe0>
    c908:	ldr	r0, [pc, r0]
    c90c:	ldr	r1, [pc, #124]	; c990 <try_sigio+0xe4>
    c910:	add	r1, pc, r1
    c914:	str	r0, [r1]
    c918:	ldr	r0, [pc, #116]	; c994 <try_sigio+0xe8>
    c91c:	ldr	r0, [pc, r0]
    c920:	ldr	r1, [pc, #112]	; c998 <try_sigio+0xec>
    c924:	add	r1, pc, r1
    c928:	str	r0, [r1]
    c92c:	ldr	r0, [pc, #104]	; c99c <try_sigio+0xf0>
    c930:	ldr	r0, [pc, r0]
    c934:	ldr	r1, [pc, #100]	; c9a0 <try_sigio+0xf4>
    c938:	add	r1, pc, r1
    c93c:	str	r0, [r1]
    c940:	ldr	r0, [pc, #92]	; c9a4 <try_sigio+0xf8>
    c944:	ldr	r0, [pc, r0]
    c948:	ldr	r1, [pc, #88]	; c9a8 <try_sigio+0xfc>
    c94c:	add	r1, pc, r1
    c950:	str	r0, [r1]
    c954:	ldr	r0, [pc, #80]	; c9ac <try_sigio+0x100>
    c958:	add	r0, pc, r0
    c95c:	ldr	r1, [pc, #76]	; c9b0 <try_sigio+0x104>
    c960:	add	r1, pc, r1
    c964:	mov	r2, #25
    c968:	bl	4fd0 <rb_strlcpy@plt>
    c96c:	mov	r0, #0
    c970:	pop	{fp, pc}
    c974:	.word	0x0001ba88
    c978:	.word	0x0002e098
    c97c:	.word	0x0001bad4
    c980:	.word	0x0002e080
    c984:	.word	0x0001bad0
    c988:	.word	0x0002e074
    c98c:	.word	0x0001ba54
    c990:	.word	0x0002e04c
    c994:	.word	0x0001ba28
    c998:	.word	0x0002e03c
    c99c:	.word	0x0001ba90
    c9a0:	.word	0x0002e020
    c9a4:	.word	0x0001ba9c
    c9a8:	.word	0x0002e018
    c9ac:	.word	0x0002dfe4
    c9b0:	.word	0x00008f8e

0000c9b4 <try_select>:
    c9b4:	push	{r4, sl, fp, lr}
    c9b8:	add	fp, sp, #8
    c9bc:	bl	11fe0 <rb_init_netio_select>
    c9c0:	mvn	r4, #0
    c9c4:	cmp	r0, #0
    c9c8:	beq	c9d4 <try_select+0x20>
    c9cc:	mov	r0, r4
    c9d0:	pop	{r4, sl, fp, pc}
    c9d4:	ldr	r0, [pc, #144]	; ca6c <try_select+0xb8>
    c9d8:	add	r0, pc, r0
    c9dc:	mov	r4, #0
    c9e0:	str	r4, [r0]
    c9e4:	ldr	r0, [pc, #132]	; ca70 <try_select+0xbc>
    c9e8:	add	r0, pc, r0
    c9ec:	str	r4, [r0]
    c9f0:	ldr	r0, [pc, #124]	; ca74 <try_select+0xc0>
    c9f4:	add	r0, pc, r0
    c9f8:	str	r4, [r0]
    c9fc:	ldr	r0, [pc, #116]	; ca78 <try_select+0xc4>
    ca00:	add	r0, pc, r0
    ca04:	ldr	r1, [pc, #112]	; ca7c <try_select+0xc8>
    ca08:	add	r1, pc, r1
    ca0c:	str	r1, [r0]
    ca10:	ldr	r0, [pc, #104]	; ca80 <try_select+0xcc>
    ca14:	ldr	r0, [pc, r0]
    ca18:	ldr	r1, [pc, #100]	; ca84 <try_select+0xd0>
    ca1c:	add	r1, pc, r1
    ca20:	str	r0, [r1]
    ca24:	ldr	r0, [pc, #92]	; ca88 <try_select+0xd4>
    ca28:	ldr	r0, [pc, r0]
    ca2c:	ldr	r1, [pc, #88]	; ca8c <try_select+0xd8>
    ca30:	add	r1, pc, r1
    ca34:	str	r0, [r1]
    ca38:	ldr	r0, [pc, #80]	; ca90 <try_select+0xdc>
    ca3c:	ldr	r0, [pc, r0]
    ca40:	ldr	r1, [pc, #76]	; ca94 <try_select+0xe0>
    ca44:	add	r1, pc, r1
    ca48:	str	r0, [r1]
    ca4c:	ldr	r0, [pc, #68]	; ca98 <try_select+0xe4>
    ca50:	add	r0, pc, r0
    ca54:	ldr	r1, [pc, #64]	; ca9c <try_select+0xe8>
    ca58:	add	r1, pc, r1
    ca5c:	mov	r2, #25
    ca60:	bl	4fd0 <rb_strlcpy@plt>
    ca64:	mov	r0, r4
    ca68:	pop	{r4, sl, fp, pc}
    ca6c:	.word	0x0002df84
    ca70:	.word	0x0002df78
    ca74:	.word	0x0002df70
    ca78:	.word	0x0002df58
    ca7c:	.word	0x0000075c
    ca80:	.word	0x0001b98c
    ca84:	.word	0x0002df50
    ca88:	.word	0x0001b9e0
    ca8c:	.word	0x0002df38
    ca90:	.word	0x0001b9ac
    ca94:	.word	0x0002df2c
    ca98:	.word	0x0002deec
    ca9c:	.word	0x00008e9c

0000caa0 <try_win32>:
    caa0:	push	{r4, sl, fp, lr}
    caa4:	add	fp, sp, #8
    caa8:	bl	5878 <rb_init_netio_win32>
    caac:	mvn	r4, #0
    cab0:	cmp	r0, #0
    cab4:	beq	cac0 <try_win32+0x20>
    cab8:	mov	r0, r4
    cabc:	pop	{r4, sl, fp, pc}
    cac0:	ldr	r0, [pc, #144]	; cb58 <try_win32+0xb8>
    cac4:	add	r0, pc, r0
    cac8:	mov	r4, #0
    cacc:	str	r4, [r0]
    cad0:	ldr	r0, [pc, #132]	; cb5c <try_win32+0xbc>
    cad4:	add	r0, pc, r0
    cad8:	str	r4, [r0]
    cadc:	ldr	r0, [pc, #124]	; cb60 <try_win32+0xc0>
    cae0:	add	r0, pc, r0
    cae4:	str	r4, [r0]
    cae8:	ldr	r0, [pc, #116]	; cb64 <try_win32+0xc4>
    caec:	add	r0, pc, r0
    caf0:	ldr	r1, [pc, #112]	; cb68 <try_win32+0xc8>
    caf4:	add	r1, pc, r1
    caf8:	str	r1, [r0]
    cafc:	ldr	r0, [pc, #104]	; cb6c <try_win32+0xcc>
    cb00:	ldr	r0, [pc, r0]
    cb04:	ldr	r1, [pc, #100]	; cb70 <try_win32+0xd0>
    cb08:	add	r1, pc, r1
    cb0c:	str	r0, [r1]
    cb10:	ldr	r0, [pc, #92]	; cb74 <try_win32+0xd4>
    cb14:	ldr	r0, [pc, r0]
    cb18:	ldr	r1, [pc, #88]	; cb78 <try_win32+0xd8>
    cb1c:	add	r1, pc, r1
    cb20:	str	r0, [r1]
    cb24:	ldr	r0, [pc, #80]	; cb7c <try_win32+0xdc>
    cb28:	ldr	r0, [pc, r0]
    cb2c:	ldr	r1, [pc, #76]	; cb80 <try_win32+0xe0>
    cb30:	add	r1, pc, r1
    cb34:	str	r0, [r1]
    cb38:	ldr	r0, [pc, #68]	; cb84 <try_win32+0xe4>
    cb3c:	add	r0, pc, r0
    cb40:	ldr	r1, [pc, #64]	; cb88 <try_win32+0xe8>
    cb44:	add	r1, pc, r1
    cb48:	mov	r2, #25
    cb4c:	bl	4fd0 <rb_strlcpy@plt>
    cb50:	mov	r0, r4
    cb54:	pop	{r4, sl, fp, pc}
    cb58:	.word	0x0002de98
    cb5c:	.word	0x0002de8c
    cb60:	.word	0x0002de84
    cb64:	.word	0x0002de6c
    cb68:	.word	0x00000670
    cb6c:	.word	0x0001b890
    cb70:	.word	0x0002de64
    cb74:	.word	0x0001b870
    cb78:	.word	0x0002de4c
    cb7c:	.word	0x0001b830
    cb80:	.word	0x0002de40
    cb84:	.word	0x0002de00
    cb88:	.word	0x00008db7

0000cb8c <rb_select>:
    cb8c:	push	{r4, sl, fp, lr}
    cb90:	add	fp, sp, #8
    cb94:	ldr	r1, [pc, #20]	; cbb0 <rb_select+0x24>
    cb98:	ldr	r1, [pc, r1]
    cb9c:	blx	r1
    cba0:	mov	r4, r0
    cba4:	bl	cbb4 <free_fds>
    cba8:	mov	r0, r4
    cbac:	pop	{r4, sl, fp, pc}
    cbb0:	.word	0x0002ddd4

0000cbb4 <free_fds>:
    cbb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    cbb8:	add	fp, sp, #24
    cbbc:	ldr	r5, [pc, #100]	; cc28 <free_fds+0x74>
    cbc0:	ldr	r5, [pc, r5]
    cbc4:	cmp	r5, #0
    cbc8:	beq	cc24 <free_fds+0x70>
    cbcc:	ldr	r8, [pc, #88]	; cc2c <free_fds+0x78>
    cbd0:	add	r8, pc, r8
    cbd4:	ldr	r4, [pc, #84]	; cc30 <free_fds+0x7c>
    cbd8:	add	r4, pc, r4
    cbdc:	ldr	r6, [r5]
    cbe0:	ldr	r7, [r5, #8]
    cbe4:	ldr	r0, [pc, #72]	; cc34 <free_fds+0x80>
    cbe8:	ldr	r0, [pc, r0]
    cbec:	sub	r0, r0, #1
    cbf0:	str	r0, [r8]
    cbf4:	ldr	r0, [r6, #12]
    cbf8:	bl	5264 <close@plt>
    cbfc:	mov	r0, r5
    cc00:	mov	r1, r4
    cc04:	bl	a76c <rb_dlinkDelete>
    cc08:	ldr	r0, [pc, #40]	; cc38 <free_fds+0x84>
    cc0c:	ldr	r0, [pc, r0]
    cc10:	mov	r1, r6
    cc14:	bl	51f8 <rb_bh_free@plt>
    cc18:	cmp	r7, #0
    cc1c:	mov	r5, r7
    cc20:	bne	cbdc <free_fds+0x28>
    cc24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    cc28:	.word	0x0002ddb4
    cc2c:	.word	0x0002dd60
    cc30:	.word	0x0002dd9c
    cc34:	.word	0x0002dd48
    cc38:	.word	0x0002dd2c

0000cc3c <rb_recv_fd_buf>:
    cc3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc40:	add	fp, sp, #28
    cc44:	sub	sp, sp, #132	; 0x84
    cc48:	mov	sl, r3
    cc4c:	mov	r3, #0
    cc50:	str	r3, [fp, #-36]	; 0xffffffdc
    cc54:	mov	r7, #1
    cc58:	str	r7, [fp, #-48]	; 0xffffffd0
    cc5c:	sub	r7, fp, #68	; 0x44
    cc60:	str	r7, [fp, #-52]	; 0xffffffcc
    cc64:	str	r3, [fp, #-56]	; 0xffffffc8
    cc68:	sub	ip, fp, #68	; 0x44
    cc6c:	stm	ip, {r1, r2, r3}
    cc70:	ldr	r9, [fp, #8]
    cc74:	mov	r1, #19
    cc78:	add	r1, r1, r9, lsl #2
    cc7c:	bic	r1, r1, #7
    cc80:	sub	r1, sp, r1
    cc84:	mov	r2, #12
    cc88:	add	r2, r2, r9, lsl #2
    cc8c:	mov	sp, r1
    cc90:	str	r2, [fp, #-40]	; 0xffffffd8
    cc94:	str	r1, [fp, #-44]	; 0xffffffd4
    cc98:	bl	4e20 <rb_get_fd@plt>
    cc9c:	sub	r1, fp, #60	; 0x3c
    cca0:	mov	r2, #0
    cca4:	bl	5450 <recvmsg@plt>
    cca8:	mov	r5, r0
    ccac:	cmp	r0, #1
    ccb0:	blt	cda0 <rb_recv_fd_buf+0x164>
    ccb4:	ldr	r1, [fp, #-40]	; 0xffffffd8
    ccb8:	cmp	r1, #0
    ccbc:	beq	cd98 <rb_recv_fd_buf+0x15c>
    ccc0:	ldr	r0, [fp, #-44]	; 0xffffffd4
    ccc4:	cmp	r0, #0
    ccc8:	beq	cd98 <rb_recv_fd_buf+0x15c>
    cccc:	cmp	r1, #11
    ccd0:	movls	r0, #0
    ccd4:	cmp	r1, #12
    ccd8:	bcc	cd98 <rb_recv_fd_buf+0x15c>
    ccdc:	cmp	r9, #1
    cce0:	blt	cda0 <rb_recv_fd_buf+0x164>
    cce4:	ldr	r1, [r0]
    cce8:	sub	r1, r1, #12
    ccec:	lsr	r6, r1, #2
    ccf0:	cmp	r6, #0
    ccf4:	beq	cda0 <rb_recv_fd_buf+0x164>
    ccf8:	add	r4, r0, #12
    ccfc:	mov	r8, #0
    cd00:	ldr	r7, [r4, r8, lsl #2]
    cd04:	mov	r0, r7
    cd08:	sub	r1, fp, #160	; 0xa0
    cd0c:	bl	14e50 <__fstat>
    cd10:	mov	r1, #64	; 0x40
    cd14:	cmp	r0, #0
    cd18:	beq	cd48 <rb_recv_fd_buf+0x10c>
    cd1c:	ldr	r2, [pc, #148]	; cdb8 <rb_recv_fd_buf+0x17c>
    cd20:	add	r2, pc, r2
    cd24:	mov	r0, r7
    cd28:	bl	539c <rb_open@plt>
    cd2c:	str	r0, [sl, r8, lsl #2]
    cd30:	add	r8, r8, #1
    cd34:	cmp	r8, r9
    cd38:	bge	cda0 <rb_recv_fd_buf+0x164>
    cd3c:	cmp	r8, r6
    cd40:	bcc	cd00 <rb_recv_fd_buf+0xc4>
    cd44:	b	cda0 <rb_recv_fd_buf+0x164>
    cd48:	ldr	r0, [fp, #-144]	; 0xffffff70
    cd4c:	and	r0, r0, #61440	; 0xf000
    cd50:	cmp	r0, #49152	; 0xc000
    cd54:	beq	cd78 <rb_recv_fd_buf+0x13c>
    cd58:	cmp	r0, #32768	; 0x8000
    cd5c:	beq	cd88 <rb_recv_fd_buf+0x14c>
    cd60:	cmp	r0, #4096	; 0x1000
    cd64:	bne	cd1c <rb_recv_fd_buf+0xe0>
    cd68:	mov	r1, #8
    cd6c:	ldr	r2, [pc, #60]	; cdb0 <rb_recv_fd_buf+0x174>
    cd70:	add	r2, pc, r2
    cd74:	b	cd24 <rb_recv_fd_buf+0xe8>
    cd78:	mov	r1, #4
    cd7c:	ldr	r2, [pc, #40]	; cdac <rb_recv_fd_buf+0x170>
    cd80:	add	r2, pc, r2
    cd84:	b	cd24 <rb_recv_fd_buf+0xe8>
    cd88:	mov	r1, #2
    cd8c:	ldr	r2, [pc, #32]	; cdb4 <rb_recv_fd_buf+0x178>
    cd90:	add	r2, pc, r2
    cd94:	b	cd24 <rb_recv_fd_buf+0xe8>
    cd98:	mov	r0, #0
    cd9c:	str	r0, [sl]
    cda0:	mov	r0, r5
    cda4:	sub	sp, fp, #28
    cda8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdac:	.word	0x00008bca
    cdb0:	.word	0x00008be8
    cdb4:	.word	0x00008bd4
    cdb8:	.word	0x00008c1b

0000cdbc <rb_send_fd_buf>:
    cdbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    cdc0:	add	fp, sp, #24
    cdc4:	sub	sp, sp, #48	; 0x30
    cdc8:	mov	r6, r1
    cdcc:	mov	r9, r0
    cdd0:	sub	r0, fp, #56	; 0x38
    cdd4:	vmov.i32	q8, #0	; 0x00000000
    cdd8:	add	r1, r0, #12
    cddc:	vst1.32	{d16-d17}, [r1]
    cde0:	mov	r1, #48	; 0x30
    cde4:	strb	r1, [fp, #-65]	; 0xffffffbf
    cde8:	mov	r1, #20
    cdec:	vst1.64	{d16-d17}, [r0], r1
    cdf0:	mov	r7, #0
    cdf4:	str	r7, [r0]
    cdf8:	sub	r0, fp, #64	; 0x40
    cdfc:	str	r0, [fp, #-48]	; 0xffffffd0
    ce00:	str	r7, [fp, #-56]	; 0xffffffc8
    ce04:	str	r7, [fp, #-52]	; 0xffffffcc
    ce08:	str	r7, [fp, #-40]	; 0xffffffd8
    ce0c:	str	r7, [fp, #-32]	; 0xffffffe0
    ce10:	mov	r0, #1
    ce14:	str	r0, [fp, #-44]	; 0xffffffd4
    ce18:	ldr	r1, [fp, #8]
    ce1c:	cmp	r1, #0
    ce20:	movweq	r1, #1
    ce24:	str	r1, [fp, #-60]	; 0xffffffc4
    ce28:	sub	r1, fp, #65	; 0x41
    ce2c:	movne	r1, r3
    ce30:	str	r1, [fp, #-64]	; 0xffffffc0
    ce34:	cmp	r2, #1
    ce38:	blt	cebc <rb_send_fd_buf+0x100>
    ce3c:	mov	r5, r2
    ce40:	mov	r1, #19
    ce44:	add	r1, r1, r2, lsl #2
    ce48:	bic	r1, r1, #7
    ce4c:	mov	r8, sp
    ce50:	sub	r1, sp, r1
    ce54:	mov	r2, #12
    ce58:	add	r2, r2, r5, lsl #2
    ce5c:	mov	sp, r1
    ce60:	str	r2, [fp, #-36]	; 0xffffffdc
    ce64:	str	r1, [fp, #-40]	; 0xffffffd8
    ce68:	cmp	r2, #11
    ce6c:	movhi	r7, r1
    ce70:	str	r2, [r7]
    ce74:	str	r0, [r7, #4]
    ce78:	str	r0, [r7, #8]
    ce7c:	add	r4, r7, #12
    ce80:	ldr	r0, [r6], #4
    ce84:	bl	4e20 <rb_get_fd@plt>
    ce88:	str	r0, [r4], #4
    ce8c:	subs	r5, r5, #1
    ce90:	bne	ce80 <rb_send_fd_buf+0xc4>
    ce94:	ldr	r0, [r7]
    ce98:	str	r0, [fp, #-36]	; 0xffffffdc
    ce9c:	mov	r0, r9
    cea0:	bl	4e20 <rb_get_fd@plt>
    cea4:	sub	r1, fp, #56	; 0x38
    cea8:	mov	r2, #16384	; 0x4000
    ceac:	bl	5018 <sendmsg@plt>
    ceb0:	mov	sp, r8
    ceb4:	sub	sp, fp, #24
    ceb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    cebc:	mov	r0, r9
    cec0:	bl	4e20 <rb_get_fd@plt>
    cec4:	sub	r1, fp, #56	; 0x38
    cec8:	mov	r2, #16384	; 0x4000
    cecc:	bl	5018 <sendmsg@plt>
    ced0:	sub	sp, fp, #24
    ced4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000ced8 <rb_ipv4_from_ipv6>:
    ced8:	push	{r4, r5, r6, sl, fp, lr}
    cedc:	add	fp, sp, #16
    cee0:	mov	r4, r1
    cee4:	mov	r5, r0
    cee8:	add	r6, r0, #8
    ceec:	ldr	r1, [pc, #120]	; cf6c <rb_ipv4_from_ipv6+0x94>
    cef0:	add	r1, pc, r1
    cef4:	mov	r0, r6
    cef8:	mov	r2, #2
    cefc:	bl	5180 <bcmp@plt>
    cf00:	cmp	r0, #0
    cf04:	beq	cf54 <rb_ipv4_from_ipv6+0x7c>
    cf08:	ldr	r1, [pc, #96]	; cf70 <rb_ipv4_from_ipv6+0x98>
    cf0c:	add	r1, pc, r1
    cf10:	mov	r0, r6
    cf14:	mov	r2, #4
    cf18:	bl	5180 <bcmp@plt>
    cf1c:	mov	r1, r0
    cf20:	mov	r0, #0
    cf24:	cmp	r1, #0
    cf28:	popne	{r4, r5, r6, sl, fp, pc}
    cf2c:	add	r0, r5, #20
    cf30:	add	r1, r4, #4
    cf34:	mov	r2, #0
    cf38:	ldrb	r3, [r0, r2]
    cf3c:	mvn	r3, r3
    cf40:	strb	r3, [r1, r2]
    cf44:	add	r2, r2, #1
    cf48:	cmp	r2, #4
    cf4c:	bne	cf38 <rb_ipv4_from_ipv6+0x60>
    cf50:	b	cf5c <rb_ipv4_from_ipv6+0x84>
    cf54:	ldr	r0, [r6, #2]
    cf58:	str	r0, [r4, #4]
    cf5c:	mov	r0, #2
    cf60:	str	r0, [r4]
    cf64:	mov	r0, #1
    cf68:	pop	{r4, r5, r6, sl, fp, pc}
    cf6c:	.word	0x00008a80
    cf70:	.word	0x00008e14

0000cf74 <mangle_mapped_sockaddr>:
    cf74:	push	{r4, r5, r6, sl, fp, lr}
    cf78:	add	fp, sp, #16
    cf7c:	mov	r4, r0
    cf80:	ldrh	r0, [r0]
    cf84:	cmp	r0, #10
    cf88:	bne	cfa8 <mangle_mapped_sockaddr+0x34>
    cf8c:	mov	r5, r4
    cf90:	ldr	r0, [r5, #8]!
    cf94:	cmp	r0, #0
    cf98:	bne	cfa8 <mangle_mapped_sockaddr+0x34>
    cf9c:	ldr	r0, [r4, #12]
    cfa0:	cmp	r0, #0
    cfa4:	beq	cfac <mangle_mapped_sockaddr+0x38>
    cfa8:	pop	{r4, r5, r6, sl, fp, pc}
    cfac:	ldr	r6, [r4, #16]
    cfb0:	movw	r0, #65535	; 0xffff
    cfb4:	bl	bb28 <__bswap_32>
    cfb8:	cmp	r6, r0
    cfbc:	popne	{r4, r5, r6, sl, fp, pc}
    cfc0:	mov	r0, #2
    cfc4:	strh	r0, [r4]
    cfc8:	ldr	r0, [r4, #20]
    cfcc:	str	r0, [r4, #4]
    cfd0:	mov	r0, #0
    cfd4:	str	r0, [r5, #4]
    cfd8:	str	r0, [r5]
    cfdc:	pop	{r4, r5, r6, sl, fp, pc}

0000cfe0 <rb_dlinkMoveNode>:
    cfe0:	ldr	ip, [r0, #4]
    cfe4:	ldr	r3, [r0, #8]
    cfe8:	add	r2, r3, #4
    cfec:	cmp	r3, #0
    cff0:	addeq	r2, r1, #4
    cff4:	str	ip, [r2]
    cff8:	ldmib	r0, {r2, ip}
    cffc:	cmp	r2, #0
    d000:	mov	r3, r1
    d004:	addne	r3, r2, #8
    d008:	str	ip, [r3]
    d00c:	mov	r2, #0
    d010:	ldr	r3, [pc, #80]	; d068 <rb_dlinkMoveNode+0x88>
    d014:	ldr	r3, [pc, r3]
    d018:	stmib	r0, {r2, r3}
    d01c:	cmp	r3, #0
    d020:	ldr	ip, [pc, #68]	; d06c <rb_dlinkMoveNode+0x8c>
    d024:	add	ip, pc, ip
    d028:	beq	d038 <rb_dlinkMoveNode+0x58>
    d02c:	add	r3, r3, #4
    d030:	str	r0, [r3]
    d034:	b	d048 <rb_dlinkMoveNode+0x68>
    d038:	mov	r3, ip
    d03c:	ldr	r2, [r3, #4]!
    d040:	cmp	r2, #0
    d044:	streq	r0, [r3]
    d048:	str	r0, [ip]
    d04c:	ldr	r0, [r1, #8]
    d050:	sub	r0, r0, #1
    d054:	str	r0, [r1, #8]
    d058:	ldr	r0, [ip, #8]
    d05c:	add	r0, r0, #1
    d060:	str	r0, [ip, #8]
    d064:	bx	lr
    d068:	.word	0x0002d960
    d06c:	.word	0x0002d950

0000d070 <inetntoa>:
    d070:	push	{r4, sl, fp, lr}
    d074:	add	fp, sp, #8
    d078:	ldrb	r1, [r0]
    d07c:	ldr	ip, [pc, #220]	; d160 <inetntoa+0xf0>
    d080:	add	ip, pc, ip
    d084:	ldr	r1, [ip, r1, lsl #2]
    d088:	ldrb	r2, [r1]
    d08c:	cmp	r2, #0
    d090:	beq	d0b4 <inetntoa+0x44>
    d094:	add	r3, r1, #1
    d098:	ldr	r1, [pc, #200]	; d168 <inetntoa+0xf8>
    d09c:	add	r1, pc, r1
    d0a0:	strb	r2, [r1], #1
    d0a4:	ldrb	r2, [r3], #1
    d0a8:	cmp	r2, #0
    d0ac:	bne	d0a0 <inetntoa+0x30>
    d0b0:	b	d0bc <inetntoa+0x4c>
    d0b4:	ldr	r1, [pc, #168]	; d164 <inetntoa+0xf4>
    d0b8:	add	r1, pc, r1
    d0bc:	mov	lr, #46	; 0x2e
    d0c0:	mov	r2, r1
    d0c4:	strb	lr, [r2], #1
    d0c8:	ldrb	r3, [r0, #1]
    d0cc:	ldr	r4, [ip, r3, lsl #2]
    d0d0:	ldrb	r3, [r4]
    d0d4:	cmp	r3, #0
    d0d8:	beq	d0f4 <inetntoa+0x84>
    d0dc:	add	r1, r4, #1
    d0e0:	strb	r3, [r2], #1
    d0e4:	ldrb	r3, [r1], #1
    d0e8:	cmp	r3, #0
    d0ec:	bne	d0e0 <inetntoa+0x70>
    d0f0:	sub	r1, r2, #1
    d0f4:	strb	lr, [r2]
    d0f8:	ldrb	r2, [r0, #2]
    d0fc:	ldr	lr, [ip, r2, lsl #2]
    d100:	ldrb	r3, [lr]
    d104:	add	r2, r1, #2
    d108:	cmp	r3, #0
    d10c:	beq	d124 <inetntoa+0xb4>
    d110:	add	r1, lr, #1
    d114:	strb	r3, [r2], #1
    d118:	ldrb	r3, [r1], #1
    d11c:	cmp	r3, #0
    d120:	bne	d114 <inetntoa+0xa4>
    d124:	mov	r1, #46	; 0x2e
    d128:	strb	r1, [r2], #1
    d12c:	ldrb	r0, [r0, #3]
    d130:	ldr	r1, [ip, r0, lsl #2]
    d134:	ldrb	r0, [r1]
    d138:	cmp	r0, #0
    d13c:	beq	d154 <inetntoa+0xe4>
    d140:	add	r1, r1, #1
    d144:	strb	r0, [r2], #1
    d148:	ldrb	r0, [r1], #1
    d14c:	cmp	r0, #0
    d150:	bne	d144 <inetntoa+0xd4>
    d154:	mov	r0, #0
    d158:	strb	r0, [r2]
    d15c:	pop	{r4, sl, fp, pc}
    d160:	.word	0x0001a9d0
    d164:	.word	0x0002d8c8
    d168:	.word	0x0002d8e4

0000d16c <rb_unsupported_event>:
    d16c:	mov	r0, #0
    d170:	bx	lr

0000d174 <rb_ssl_shutdown>:
    d174:	push	{r4, r5, r6, sl, fp, lr}
    d178:	add	fp, sp, #16
    d17c:	cmp	r0, #0
    d180:	beq	d1e8 <rb_ssl_shutdown+0x74>
    d184:	mov	r4, r0
    d188:	ldr	r0, [r0, #56]	; 0x38
    d18c:	cmp	r0, #0
    d190:	beq	d1e8 <rb_ssl_shutdown+0x74>
    d194:	bl	d1ec <rb_ssl_last_err>
    d198:	mov	r6, #1
    d19c:	ldr	r0, [r4, #56]	; 0x38
    d1a0:	bl	53c0 <SSL_shutdown@plt>
    d1a4:	mov	r5, r0
    d1a8:	ldr	r0, [r4, #56]	; 0x38
    d1ac:	mov	r1, r5
    d1b0:	bl	55c4 <SSL_get_error@plt>
    d1b4:	cmn	r5, #1
    d1b8:	bgt	d1d8 <rb_ssl_shutdown+0x64>
    d1bc:	orr	r0, r0, #1
    d1c0:	cmp	r0, #3
    d1c4:	bne	d1d8 <rb_ssl_shutdown+0x64>
    d1c8:	add	r0, r6, #1
    d1cc:	cmp	r6, #4
    d1d0:	mov	r6, r0
    d1d4:	bcc	d19c <rb_ssl_shutdown+0x28>
    d1d8:	ldr	r0, [r4, #56]	; 0x38
    d1dc:	bl	527c <SSL_free@plt>
    d1e0:	mov	r0, #0
    d1e4:	str	r0, [r4, #56]	; 0x38
    d1e8:	pop	{r4, r5, r6, sl, fp, pc}

0000d1ec <rb_ssl_last_err>:
    d1ec:	push	{r4, sl, fp, lr}
    d1f0:	add	fp, sp, #8
    d1f4:	mov	r0, #0
    d1f8:	mov	r4, r0
    d1fc:	bl	4d48 <ERR_get_error@plt>
    d200:	cmp	r0, #0
    d204:	bne	d1f8 <rb_ssl_last_err+0xc>
    d208:	mov	r0, r4
    d20c:	pop	{r4, sl, fp, pc}

0000d210 <rb_init_ssl>:
    d210:	push	{fp, lr}
    d214:	mov	fp, sp
    d218:	ldr	r0, [pc, #20]	; d234 <rb_init_ssl+0x24>
    d21c:	add	r0, pc, r0
    d220:	ldr	r1, [pc, #16]	; d238 <rb_init_ssl+0x28>
    d224:	add	r1, pc, r1
    d228:	bl	5240 <rb_lib_log@plt>
    d22c:	mov	r0, #1
    d230:	pop	{fp, pc}
    d234:	.word	0x00008b1a
    d238:	.word	0x00008b32

0000d23c <rb_setup_ssl_server>:
    d23c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d240:	add	fp, sp, #24
    d244:	sub	sp, sp, #8
    d248:	cmp	r0, #0
    d24c:	beq	d31c <rb_setup_ssl_server+0xe0>
    d250:	mov	r8, r2
    d254:	mov	r7, r1
    d258:	mov	r6, r0
    d25c:	ldr	r5, [pc, #716]	; d530 <rb_setup_ssl_server+0x2f4>
    d260:	add	r5, pc, r5
    d264:	cmp	r3, #0
    d268:	movne	r5, r3
    d26c:	cmp	r1, #0
    d270:	moveq	r7, r0
    d274:	bl	d1ec <rb_ssl_last_err>
    d278:	bl	4cb8 <TLS_method@plt>
    d27c:	bl	5438 <SSL_CTX_new@plt>
    d280:	cmp	r0, #0
    d284:	beq	d334 <rb_setup_ssl_server+0xf8>
    d288:	mov	r4, r0
    d28c:	mov	r1, r6
    d290:	bl	5150 <SSL_CTX_use_certificate_chain_file@plt>
    d294:	cmp	r0, #1
    d298:	bne	d35c <rb_setup_ssl_server+0x120>
    d29c:	mov	r0, r4
    d2a0:	mov	r1, r7
    d2a4:	mov	r2, #1
    d2a8:	bl	524c <SSL_CTX_use_PrivateKey_file@plt>
    d2ac:	cmp	r0, #1
    d2b0:	bne	d384 <rb_setup_ssl_server+0x148>
    d2b4:	cmp	r8, #0
    d2b8:	beq	d3c0 <rb_setup_ssl_server+0x184>
    d2bc:	ldr	r1, [pc, #668]	; d560 <rb_setup_ssl_server+0x324>
    d2c0:	add	r1, pc, r1
    d2c4:	mov	r0, r8
    d2c8:	bl	4f40 <fopen@plt>
    d2cc:	mov	r7, r0
    d2d0:	mov	r0, #0
    d2d4:	str	r0, [sp, #4]
    d2d8:	cmp	r7, #0
    d2dc:	beq	d3d8 <rb_setup_ssl_server+0x19c>
    d2e0:	add	r1, sp, #4
    d2e4:	mov	r0, r7
    d2e8:	mov	r2, #0
    d2ec:	mov	r3, #0
    d2f0:	bl	5300 <PEM_read_DHparams@plt>
    d2f4:	cmp	r0, #0
    d2f8:	beq	d404 <rb_setup_ssl_server+0x1c8>
    d2fc:	ldr	r3, [sp, #4]
    d300:	mov	r0, r4
    d304:	mov	r1, #3
    d308:	mov	r2, #0
    d30c:	bl	4fa0 <SSL_CTX_ctrl@plt>
    d310:	ldr	r0, [sp, #4]
    d314:	bl	5384 <DH_free@plt>
    d318:	b	d42c <rb_setup_ssl_server+0x1f0>
    d31c:	ldr	r0, [pc, #516]	; d528 <rb_setup_ssl_server+0x2ec>
    d320:	add	r0, pc, r0
    d324:	ldr	r1, [pc, #512]	; d52c <rb_setup_ssl_server+0x2f0>
    d328:	add	r1, pc, r1
    d32c:	bl	5240 <rb_lib_log@plt>
    d330:	b	d3b4 <rb_setup_ssl_server+0x178>
    d334:	bl	d1ec <rb_ssl_last_err>
    d338:	bl	d598 <rb_ssl_strerror>
    d33c:	ldr	r0, [pc, #496]	; d534 <rb_setup_ssl_server+0x2f8>
    d340:	add	r0, pc, r0
    d344:	ldr	r1, [pc, #492]	; d538 <rb_setup_ssl_server+0x2fc>
    d348:	add	r1, pc, r1
    d34c:	ldr	r2, [pc, #488]	; d53c <rb_setup_ssl_server+0x300>
    d350:	add	r2, pc, r2
    d354:	bl	5240 <rb_lib_log@plt>
    d358:	b	d3b4 <rb_setup_ssl_server+0x178>
    d35c:	bl	d1ec <rb_ssl_last_err>
    d360:	bl	d598 <rb_ssl_strerror>
    d364:	ldr	r0, [pc, #468]	; d540 <rb_setup_ssl_server+0x304>
    d368:	add	r0, pc, r0
    d36c:	ldr	r1, [pc, #464]	; d544 <rb_setup_ssl_server+0x308>
    d370:	add	r1, pc, r1
    d374:	ldr	r3, [pc, #460]	; d548 <rb_setup_ssl_server+0x30c>
    d378:	add	r3, pc, r3
    d37c:	mov	r2, r6
    d380:	b	d3a8 <rb_setup_ssl_server+0x16c>
    d384:	bl	d1ec <rb_ssl_last_err>
    d388:	bl	d598 <rb_ssl_strerror>
    d38c:	ldr	r0, [pc, #440]	; d54c <rb_setup_ssl_server+0x310>
    d390:	add	r0, pc, r0
    d394:	ldr	r1, [pc, #436]	; d550 <rb_setup_ssl_server+0x314>
    d398:	add	r1, pc, r1
    d39c:	ldr	r3, [pc, #432]	; d554 <rb_setup_ssl_server+0x318>
    d3a0:	add	r3, pc, r3
    d3a4:	mov	r2, r7
    d3a8:	bl	5240 <rb_lib_log@plt>
    d3ac:	mov	r0, r4
    d3b0:	bl	4d9c <SSL_CTX_free@plt>
    d3b4:	mov	r0, #0
    d3b8:	sub	sp, fp, #24
    d3bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d3c0:	ldr	r0, [pc, #400]	; d558 <rb_setup_ssl_server+0x31c>
    d3c4:	add	r0, pc, r0
    d3c8:	ldr	r1, [pc, #396]	; d55c <rb_setup_ssl_server+0x320>
    d3cc:	add	r1, pc, r1
    d3d0:	bl	5240 <rb_lib_log@plt>
    d3d4:	b	d434 <rb_setup_ssl_server+0x1f8>
    d3d8:	bl	560c <__errno_location@plt>
    d3dc:	ldr	r0, [r0]
    d3e0:	bl	4ce8 <strerror@plt>
    d3e4:	mov	r3, r0
    d3e8:	ldr	r0, [pc, #372]	; d564 <rb_setup_ssl_server+0x328>
    d3ec:	add	r0, pc, r0
    d3f0:	ldr	r1, [pc, #368]	; d568 <rb_setup_ssl_server+0x32c>
    d3f4:	add	r1, pc, r1
    d3f8:	mov	r2, r8
    d3fc:	bl	5240 <rb_lib_log@plt>
    d400:	b	d434 <rb_setup_ssl_server+0x1f8>
    d404:	bl	d1ec <rb_ssl_last_err>
    d408:	bl	d598 <rb_ssl_strerror>
    d40c:	ldr	r0, [pc, #344]	; d56c <rb_setup_ssl_server+0x330>
    d410:	add	r0, pc, r0
    d414:	ldr	r1, [pc, #340]	; d570 <rb_setup_ssl_server+0x334>
    d418:	add	r1, pc, r1
    d41c:	ldr	r3, [pc, #336]	; d574 <rb_setup_ssl_server+0x338>
    d420:	add	r3, pc, r3
    d424:	mov	r2, r8
    d428:	bl	5240 <rb_lib_log@plt>
    d42c:	mov	r0, r7
    d430:	bl	4ebc <fclose@plt>
    d434:	mov	r0, r4
    d438:	mov	r1, r5
    d43c:	bl	4d3c <SSL_CTX_set_cipher_list@plt>
    d440:	cmp	r0, #1
    d444:	bne	d510 <rb_setup_ssl_server+0x2d4>
    d448:	mov	r0, r4
    d44c:	mov	r1, #44	; 0x2c
    d450:	mov	r2, #0
    d454:	mov	r3, #0
    d458:	bl	4fa0 <SSL_CTX_ctrl@plt>
    d45c:	ldr	r2, [pc, #284]	; d580 <rb_setup_ssl_server+0x344>
    d460:	add	r2, pc, r2
    d464:	mov	r0, r4
    d468:	mov	r1, #5
    d46c:	bl	563c <SSL_CTX_set_verify@plt>
    d470:	mov	r0, r4
    d474:	mov	r1, #2048	; 0x800
    d478:	bl	4e50 <SSL_CTX_clear_options@plt>
    d47c:	mov	r0, r4
    d480:	mov	r1, #67108864	; 0x4000000
    d484:	bl	5168 <SSL_CTX_set_options@plt>
    d488:	mov	r0, r4
    d48c:	mov	r1, #16384	; 0x4000
    d490:	bl	5168 <SSL_CTX_set_options@plt>
    d494:	mov	r0, r4
    d498:	mov	r1, #4194304	; 0x400000
    d49c:	bl	5168 <SSL_CTX_set_options@plt>
    d4a0:	mov	r0, r4
    d4a4:	mov	r1, #0
    d4a8:	bl	5168 <SSL_CTX_set_options@plt>
    d4ac:	mov	r0, r4
    d4b0:	mov	r1, #0
    d4b4:	bl	5168 <SSL_CTX_set_options@plt>
    d4b8:	ldr	r3, [pc, #196]	; d584 <rb_setup_ssl_server+0x348>
    d4bc:	add	r3, pc, r3
    d4c0:	mov	r0, r4
    d4c4:	mov	r1, #92	; 0x5c
    d4c8:	mov	r2, #0
    d4cc:	bl	4fa0 <SSL_CTX_ctrl@plt>
    d4d0:	ldr	r0, [pc, #176]	; d588 <rb_setup_ssl_server+0x34c>
    d4d4:	ldr	r0, [pc, r0]
    d4d8:	cmp	r0, #0
    d4dc:	beq	d4e4 <rb_setup_ssl_server+0x2a8>
    d4e0:	bl	4d9c <SSL_CTX_free@plt>
    d4e4:	ldr	r0, [pc, #160]	; d58c <rb_setup_ssl_server+0x350>
    d4e8:	add	r0, pc, r0
    d4ec:	str	r4, [r0]
    d4f0:	ldr	r0, [pc, #152]	; d590 <rb_setup_ssl_server+0x354>
    d4f4:	add	r0, pc, r0
    d4f8:	ldr	r1, [pc, #148]	; d594 <rb_setup_ssl_server+0x358>
    d4fc:	add	r1, pc, r1
    d500:	bl	5240 <rb_lib_log@plt>
    d504:	mov	r0, #1
    d508:	sub	sp, fp, #24
    d50c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d510:	ldr	r0, [pc, #96]	; d578 <rb_setup_ssl_server+0x33c>
    d514:	add	r0, pc, r0
    d518:	ldr	r1, [pc, #92]	; d57c <rb_setup_ssl_server+0x340>
    d51c:	add	r1, pc, r1
    d520:	bl	5240 <rb_lib_log@plt>
    d524:	b	d3ac <rb_setup_ssl_server+0x170>
    d528:	.word	0x00008a42
    d52c:	.word	0x00008a5c
    d530:	.word	0x00008d8d
    d534:	.word	0x00008a58
    d538:	.word	0x00008a3c
    d53c:	.word	0x0002d844
    d540:	.word	0x00008a44
    d544:	.word	0x00008a14
    d548:	.word	0x0002d81c
    d54c:	.word	0x00008a4e
    d550:	.word	0x000089ec
    d554:	.word	0x0002d7f4
    d558:	.word	0x00008a45
    d55c:	.word	0x000089b8
    d560:	.word	0x0000908c
    d564:	.word	0x00008a41
    d568:	.word	0x00008990
    d56c:	.word	0x00008a32
    d570:	.word	0x0000896c
    d574:	.word	0x0002d774
    d578:	.word	0x0000894f
    d57c:	.word	0x00008868
    d580:	.word	0x00000144
    d584:	.word	0x0001af94
    d588:	.word	0x0002d4bc
    d58c:	.word	0x0002d4a8
    d590:	.word	0x000089ac
    d594:	.word	0x00008888

0000d598 <rb_ssl_strerror>:
    d598:	ldr	r1, [pc, #8]	; d5a8 <rb_ssl_strerror+0x10>
    d59c:	add	r1, pc, r1
    d5a0:	mov	r2, #512	; 0x200
    d5a4:	b	4ee0 <ERR_error_string_n@plt>
    d5a8:	.word	0x0002d5f8

0000d5ac <verify_accept_all_cb>:
    d5ac:	mov	r0, #1
    d5b0:	bx	lr

0000d5b4 <rb_init_prng>:
    d5b4:	push	{r4, r5, fp, lr}
    d5b8:	add	fp, sp, #8
    d5bc:	mov	r5, r1
    d5c0:	mov	r4, r0
    d5c4:	bl	d1ec <rb_ssl_last_err>
    d5c8:	cmp	r5, #0
    d5cc:	bne	d608 <rb_init_prng+0x54>
    d5d0:	mov	r0, r4
    d5d4:	mvn	r1, #0
    d5d8:	bl	4d78 <RAND_load_file@plt>
    d5dc:	cmn	r0, #1
    d5e0:	bgt	d608 <rb_init_prng+0x54>
    d5e4:	bl	d1ec <rb_ssl_last_err>
    d5e8:	bl	d598 <rb_ssl_strerror>
    d5ec:	ldr	r0, [pc, #104]	; d65c <rb_init_prng+0xa8>
    d5f0:	add	r0, pc, r0
    d5f4:	ldr	r1, [pc, #100]	; d660 <rb_init_prng+0xac>
    d5f8:	add	r1, pc, r1
    d5fc:	ldr	r2, [pc, #96]	; d664 <rb_init_prng+0xb0>
    d600:	add	r2, pc, r2
    d604:	bl	5240 <rb_lib_log@plt>
    d608:	bl	54d4 <RAND_status@plt>
    d60c:	cmp	r0, #1
    d610:	bne	d630 <rb_init_prng+0x7c>
    d614:	ldr	r0, [pc, #88]	; d674 <rb_init_prng+0xc0>
    d618:	add	r0, pc, r0
    d61c:	ldr	r1, [pc, #84]	; d678 <rb_init_prng+0xc4>
    d620:	add	r1, pc, r1
    d624:	bl	5240 <rb_lib_log@plt>
    d628:	mov	r0, #1
    d62c:	pop	{r4, r5, fp, pc}
    d630:	bl	d1ec <rb_ssl_last_err>
    d634:	bl	d598 <rb_ssl_strerror>
    d638:	ldr	r0, [pc, #40]	; d668 <rb_init_prng+0xb4>
    d63c:	add	r0, pc, r0
    d640:	ldr	r1, [pc, #36]	; d66c <rb_init_prng+0xb8>
    d644:	add	r1, pc, r1
    d648:	ldr	r2, [pc, #32]	; d670 <rb_init_prng+0xbc>
    d64c:	add	r2, pc, r2
    d650:	bl	5240 <rb_lib_log@plt>
    d654:	mov	r0, #0
    d658:	pop	{r4, r5, fp, pc}
    d65c:	.word	0x000088d1
    d660:	.word	0x000088e0
    d664:	.word	0x0002d594
    d668:	.word	0x000088a9
    d66c:	.word	0x00008894
    d670:	.word	0x0002d548
    d674:	.word	0x000088e1
    d678:	.word	0x000088b8

0000d67c <rb_get_random>:
    d67c:	push	{r4, r5, fp, lr}
    d680:	add	fp, sp, #8
    d684:	mov	r4, r1
    d688:	mov	r5, r0
    d68c:	bl	d1ec <rb_ssl_last_err>
    d690:	mov	r0, r5
    d694:	mov	r1, r4
    d698:	bl	53fc <RAND_bytes@plt>
    d69c:	mov	r1, r0
    d6a0:	mov	r0, #1
    d6a4:	cmp	r1, #1
    d6a8:	popeq	{r4, r5, fp, pc}
    d6ac:	bl	d1ec <rb_ssl_last_err>
    d6b0:	bl	d598 <rb_ssl_strerror>
    d6b4:	ldr	r0, [pc, #28]	; d6d8 <rb_get_random+0x5c>
    d6b8:	add	r0, pc, r0
    d6bc:	ldr	r1, [pc, #24]	; d6dc <rb_get_random+0x60>
    d6c0:	add	r1, pc, r1
    d6c4:	ldr	r2, [pc, #20]	; d6e0 <rb_get_random+0x64>
    d6c8:	add	r2, pc, r2
    d6cc:	bl	5240 <rb_lib_log@plt>
    d6d0:	mov	r0, #0
    d6d4:	pop	{r4, r5, fp, pc}
    d6d8:	.word	0x00008856
    d6dc:	.word	0x00008861
    d6e0:	.word	0x0002d4cc

0000d6e4 <rb_get_ssl_strerror>:
    d6e4:	push	{fp, lr}
    d6e8:	mov	fp, sp
    d6ec:	ldr	r0, [r0, #64]	; 0x40
    d6f0:	bl	d598 <rb_ssl_strerror>
    d6f4:	ldr	r0, [pc, #4]	; d700 <rb_get_ssl_strerror+0x1c>
    d6f8:	add	r0, pc, r0
    d6fc:	pop	{fp, pc}
    d700:	.word	0x0002d49c

0000d704 <rb_get_ssl_certfp>:
    d704:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d708:	add	fp, sp, #24
    d70c:	mov	r4, #0
    d710:	cmp	r0, #0
    d714:	beq	d784 <rb_get_ssl_certfp+0x80>
    d718:	mov	r5, r0
    d71c:	ldr	r0, [r0, #56]	; 0x38
    d720:	cmp	r0, #0
    d724:	beq	d784 <rb_get_ssl_certfp+0x80>
    d728:	mov	r8, r2
    d72c:	mov	r6, r1
    d730:	bl	533c <SSL_get_peer_certificate@plt>
    d734:	cmp	r0, #0
    d738:	beq	d784 <rb_get_ssl_certfp+0x80>
    d73c:	mov	r7, r0
    d740:	ldr	r0, [r5, #56]	; 0x38
    d744:	bl	5360 <SSL_get_verify_result@plt>
    d748:	mov	r4, #0
    d74c:	cmp	r0, #27
    d750:	bhi	d77c <rb_get_ssl_certfp+0x78>
    d754:	mov	r1, #1
    d758:	movw	r2, #1
    d75c:	movt	r2, #2108	; 0x83c
    d760:	tst	r2, r1, lsl r0
    d764:	beq	d77c <rb_get_ssl_certfp+0x78>
    d768:	mov	r0, r7
    d76c:	mov	r1, r6
    d770:	mov	r2, r8
    d774:	bl	d78c <make_certfp>
    d778:	mov	r4, r0
    d77c:	mov	r0, r7
    d780:	bl	557c <X509_free@plt>
    d784:	mov	r0, r4
    d788:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000d78c <make_certfp>:
    d78c:	push	{r4, r5, r6, r7, fp, lr}
    d790:	add	fp, sp, #16
    d794:	sub	sp, sp, #8
    d798:	mov	r5, r1
    d79c:	mov	r6, r0
    d7a0:	mov	r4, #0
    d7a4:	str	r4, [sp, #4]
    d7a8:	cmp	r2, #1
    d7ac:	ble	d7e0 <make_certfp+0x54>
    d7b0:	cmp	r2, #2
    d7b4:	beq	d800 <make_certfp+0x74>
    d7b8:	movw	r0, #4097	; 0x1001
    d7bc:	cmp	r2, r0
    d7c0:	beq	d810 <make_certfp+0x84>
    d7c4:	movw	r0, #4098	; 0x1002
    d7c8:	cmp	r2, r0
    d7cc:	bne	d89c <make_certfp+0x110>
    d7d0:	mov	r0, #64	; 0x40
    d7d4:	str	r0, [sp, #4]
    d7d8:	bl	54bc <EVP_sha512@plt>
    d7dc:	b	d81c <make_certfp+0x90>
    d7e0:	cmp	r2, #0
    d7e4:	beq	d838 <make_certfp+0xac>
    d7e8:	cmp	r2, #1
    d7ec:	bne	d89c <make_certfp+0x110>
    d7f0:	mov	r0, #32
    d7f4:	str	r0, [sp, #4]
    d7f8:	bl	54ec <EVP_sha256@plt>
    d7fc:	b	d844 <make_certfp+0xb8>
    d800:	mov	r0, #64	; 0x40
    d804:	str	r0, [sp, #4]
    d808:	bl	54bc <EVP_sha512@plt>
    d80c:	b	d844 <make_certfp+0xb8>
    d810:	mov	r0, #32
    d814:	str	r0, [sp, #4]
    d818:	bl	54ec <EVP_sha256@plt>
    d81c:	mov	r7, r0
    d820:	mov	r0, r6
    d824:	bl	4e74 <X509_get_X509_PUBKEY@plt>
    d828:	mov	r6, r0
    d82c:	ldr	r0, [pc, #120]	; d8ac <make_certfp+0x120>
    d830:	ldr	r0, [pc, r0]
    d834:	b	d850 <make_certfp+0xc4>
    d838:	mov	r0, #20
    d83c:	str	r0, [sp, #4]
    d840:	bl	5210 <EVP_sha1@plt>
    d844:	mov	r7, r0
    d848:	ldr	r0, [pc, #88]	; d8a8 <make_certfp+0x11c>
    d84c:	ldr	r0, [pc, r0]
    d850:	add	r1, sp, #4
    d854:	str	r1, [sp]
    d858:	mov	r1, r7
    d85c:	mov	r2, r6
    d860:	mov	r3, r5
    d864:	bl	5324 <ASN1_item_digest@plt>
    d868:	cmp	r0, #1
    d86c:	bne	d878 <make_certfp+0xec>
    d870:	ldr	r4, [sp, #4]
    d874:	b	d89c <make_certfp+0x110>
    d878:	bl	d1ec <rb_ssl_last_err>
    d87c:	bl	d598 <rb_ssl_strerror>
    d880:	ldr	r0, [pc, #40]	; d8b0 <make_certfp+0x124>
    d884:	add	r0, pc, r0
    d888:	ldr	r1, [pc, #36]	; d8b4 <make_certfp+0x128>
    d88c:	add	r1, pc, r1
    d890:	ldr	r2, [pc, #32]	; d8b8 <make_certfp+0x12c>
    d894:	add	r2, pc, r2
    d898:	bl	5240 <rb_lib_log@plt>
    d89c:	mov	r0, r4
    d8a0:	sub	sp, fp, #16
    d8a4:	pop	{r4, r5, r6, r7, fp, pc}
    d8a8:	.word	0x0001aba4
    d8ac:	.word	0x0001abcc
    d8b0:	.word	0x00008725
    d8b4:	.word	0x00008736
    d8b8:	.word	0x0002d300

0000d8bc <rb_get_ssl_certfp_file>:
    d8bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d8c0:	add	fp, sp, #24
    d8c4:	mov	r8, r2
    d8c8:	mov	r7, r1
    d8cc:	ldr	r1, [pc, #100]	; d938 <rb_get_ssl_certfp_file+0x7c>
    d8d0:	add	r1, pc, r1
    d8d4:	bl	4f40 <fopen@plt>
    d8d8:	cmp	r0, #0
    d8dc:	beq	d92c <rb_get_ssl_certfp_file+0x70>
    d8e0:	mov	r4, r0
    d8e4:	mov	r6, #0
    d8e8:	mov	r1, #0
    d8ec:	mov	r2, #0
    d8f0:	mov	r3, #0
    d8f4:	bl	512c <PEM_read_X509@plt>
    d8f8:	cmp	r0, #0
    d8fc:	beq	d91c <rb_get_ssl_certfp_file+0x60>
    d900:	mov	r5, r0
    d904:	mov	r1, r7
    d908:	mov	r2, r8
    d90c:	bl	d78c <make_certfp>
    d910:	mov	r6, r0
    d914:	mov	r0, r5
    d918:	bl	557c <X509_free@plt>
    d91c:	mov	r0, r4
    d920:	bl	4ebc <fclose@plt>
    d924:	mov	r0, r6
    d928:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d92c:	mvn	r6, #0
    d930:	mov	r0, r6
    d934:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    d938:	.word	0x00008a7c

0000d93c <rb_get_ssl_info>:
    d93c:	push	{r4, r5, r6, r7, fp, lr}
    d940:	add	fp, sp, #16
    d944:	sub	sp, sp, #16
    d948:	mov	r5, r1
    d94c:	mov	r6, r0
    d950:	movw	r4, #4175	; 0x104f
    d954:	movt	r4, #4112	; 0x1010
    d958:	bl	4ff4 <OpenSSL_version_num@plt>
    d95c:	cmp	r0, r4
    d960:	bne	d97c <rb_get_ssl_info+0x40>
    d964:	ldr	r0, [pc, #80]	; d9bc <rb_get_ssl_info+0x80>
    d968:	add	r0, pc, r0
    d96c:	str	r0, [sp]
    d970:	ldr	r2, [pc, #72]	; d9c0 <rb_get_ssl_info+0x84>
    d974:	add	r2, pc, r2
    d978:	b	d9a4 <rb_get_ssl_info+0x68>
    d97c:	bl	4ff4 <OpenSSL_version_num@plt>
    d980:	mov	r7, r0
    d984:	mov	r0, #0
    d988:	bl	55ac <OpenSSL_version@plt>
    d98c:	ldr	r1, [pc, #48]	; d9c4 <rb_get_ssl_info+0x88>
    d990:	add	r1, pc, r1
    d994:	stm	sp, {r1, r7}
    d998:	str	r0, [sp, #8]
    d99c:	ldr	r2, [pc, #36]	; d9c8 <rb_get_ssl_info+0x8c>
    d9a0:	add	r2, pc, r2
    d9a4:	mov	r0, r6
    d9a8:	mov	r1, r5
    d9ac:	mov	r3, r4
    d9b0:	bl	54c8 <snprintf@plt>
    d9b4:	sub	sp, fp, #16
    d9b8:	pop	{r4, r5, r6, r7, fp, pc}
    d9bc:	.word	0x000085eb
    d9c0:	.word	0x000085bb
    d9c4:	.word	0x000085c3
    d9c8:	.word	0x000085cf

0000d9cc <rb_ssl_get_cipher>:
    d9cc:	push	{r4, r5, r6, sl, fp, lr}
    d9d0:	add	fp, sp, #16
    d9d4:	sub	sp, sp, #8
    d9d8:	mov	r4, #0
    d9dc:	cmp	r0, #0
    d9e0:	beq	da2c <rb_ssl_get_cipher+0x60>
    d9e4:	mov	r5, r0
    d9e8:	ldr	r0, [r0, #56]	; 0x38
    d9ec:	cmp	r0, #0
    d9f0:	beq	da2c <rb_ssl_get_cipher+0x60>
    d9f4:	bl	55d0 <SSL_get_version@plt>
    d9f8:	mov	r6, r0
    d9fc:	ldr	r0, [r5, #56]	; 0x38
    da00:	bl	4e5c <SSL_get_current_cipher@plt>
    da04:	bl	4fdc <SSL_CIPHER_get_name@plt>
    da08:	str	r0, [sp]
    da0c:	ldr	r4, [pc, #36]	; da38 <rb_ssl_get_cipher+0x6c>
    da10:	add	r4, pc, r4
    da14:	ldr	r2, [pc, #32]	; da3c <rb_ssl_get_cipher+0x70>
    da18:	add	r2, pc, r2
    da1c:	mov	r0, r4
    da20:	mov	r1, #512	; 0x200
    da24:	mov	r3, r6
    da28:	bl	54c8 <snprintf@plt>
    da2c:	mov	r0, r4
    da30:	sub	sp, fp, #16
    da34:	pop	{r4, r5, r6, sl, fp, pc}
    da38:	.word	0x0002cf84
    da3c:	.word	0x0000858a

0000da40 <rb_ssl_read>:
    da40:	push	{fp, lr}
    da44:	mov	fp, sp
    da48:	sub	sp, sp, #8
    da4c:	mov	r3, r1
    da50:	mov	r1, r0
    da54:	str	r2, [sp]
    da58:	mov	r0, #0
    da5c:	mov	r2, r3
    da60:	mov	r3, #0
    da64:	bl	da70 <rb_ssl_read_or_write>
    da68:	mov	sp, fp
    da6c:	pop	{fp, pc}

0000da70 <rb_ssl_read_or_write>:
    da70:	push	{r4, r5, r6, r7, fp, lr}
    da74:	add	fp, sp, #16
    da78:	mov	r5, r3
    da7c:	mov	r6, r2
    da80:	mov	r4, r1
    da84:	mov	r7, r0
    da88:	bl	d1ec <rb_ssl_last_err>
    da8c:	ldr	r0, [r4, #56]	; 0x38
    da90:	ldr	r2, [fp, #8]
    da94:	cmp	r7, #0
    da98:	beq	daa8 <rb_ssl_read_or_write+0x38>
    da9c:	mov	r1, r5
    daa0:	bl	4f28 <SSL_write@plt>
    daa4:	b	dab0 <rb_ssl_read_or_write+0x40>
    daa8:	mov	r1, r6
    daac:	bl	5090 <SSL_read@plt>
    dab0:	mov	r1, r0
    dab4:	cmn	r0, #1
    dab8:	ble	dac4 <rb_ssl_read_or_write+0x54>
    dabc:	mov	r0, r1
    dac0:	pop	{r4, r5, r6, r7, fp, pc}
    dac4:	ldr	r0, [r4, #56]	; 0x38
    dac8:	bl	55c4 <SSL_get_error@plt>
    dacc:	sub	r0, r0, #2
    dad0:	cmp	r0, #4
    dad4:	bhi	db2c <rb_ssl_read_or_write+0xbc>
    dad8:	mov	r1, #0
    dadc:	add	r2, pc, #4
    dae0:	ldr	r0, [r2, r0, lsl #2]
    dae4:	add	pc, r2, r0
    dae8:	.word	0x00000014
    daec:	.word	0x0000002c
    daf0:	.word	0x00000044
    daf4:	.word	0x00000058
    daf8:	.word	0xffffffd4
    dafc:	bl	560c <__errno_location@plt>
    db00:	mov	r1, #11
    db04:	str	r1, [r0]
    db08:	mvn	r1, #2
    db0c:	mov	r0, r1
    db10:	pop	{r4, r5, r6, r7, fp, pc}
    db14:	bl	560c <__errno_location@plt>
    db18:	mov	r1, #11
    db1c:	str	r1, [r0]
    db20:	mvn	r1, #3
    db24:	mov	r0, r1
    db28:	pop	{r4, r5, r6, r7, fp, pc}
    db2c:	bl	d1ec <rb_ssl_last_err>
    db30:	str	r0, [r4, #64]	; 0x40
    db34:	cmp	r0, #0
    db38:	bne	db50 <rb_ssl_read_or_write+0xe0>
    db3c:	b	db70 <rb_ssl_read_or_write+0x100>
    db40:	bl	d1ec <rb_ssl_last_err>
    db44:	cmp	r0, #0
    db48:	beq	db68 <rb_ssl_read_or_write+0xf8>
    db4c:	str	r0, [r4, #64]	; 0x40
    db50:	bl	560c <__errno_location@plt>
    db54:	mov	r1, #5
    db58:	str	r1, [r0]
    db5c:	mvn	r1, #1
    db60:	mov	r0, r1
    db64:	pop	{r4, r5, r6, r7, fp, pc}
    db68:	mov	r0, #0
    db6c:	str	r0, [r4, #64]	; 0x40
    db70:	mvn	r1, #0
    db74:	mov	r0, r1
    db78:	pop	{r4, r5, r6, r7, fp, pc}

0000db7c <rb_ssl_write>:
    db7c:	push	{fp, lr}
    db80:	mov	fp, sp
    db84:	sub	sp, sp, #8
    db88:	mov	r3, r1
    db8c:	mov	r1, r0
    db90:	str	r2, [sp]
    db94:	mov	r0, #1
    db98:	mov	r2, #0
    db9c:	bl	da70 <rb_ssl_read_or_write>
    dba0:	mov	sp, fp
    dba4:	pop	{fp, pc}

0000dba8 <rb_supports_ssl>:
    dba8:	mov	r0, #1
    dbac:	bx	lr

0000dbb0 <rb_ssl_handshake_count>:
    dbb0:	ldr	r0, [r0, #60]	; 0x3c
    dbb4:	bx	lr

0000dbb8 <rb_ssl_clear_handshake_count>:
    dbb8:	mov	r1, #0
    dbbc:	str	r1, [r0, #60]	; 0x3c
    dbc0:	bx	lr

0000dbc4 <rb_ssl_start_accepted>:
    dbc4:	push	{r4, r5, r6, r7, fp, lr}
    dbc8:	add	fp, sp, #16
    dbcc:	mov	r5, r3
    dbd0:	mov	r6, r2
    dbd4:	mov	r7, r1
    dbd8:	mov	r4, r0
    dbdc:	ldrb	r0, [r0, #17]
    dbe0:	orr	r0, r0, #32
    dbe4:	strb	r0, [r4, #17]
    dbe8:	mov	r0, #144	; 0x90
    dbec:	bl	dc40 <rb_malloc>
    dbf0:	str	r0, [r4, #52]	; 0x34
    dbf4:	str	r7, [r0, #132]	; 0x84
    dbf8:	str	r6, [r0, #140]	; 0x8c
    dbfc:	mov	r1, #0
    dc00:	mov	r2, #132	; 0x84
    dc04:	bl	4f58 <memset@plt>
    dc08:	ldr	r2, [pc, #44]	; dc3c <rb_ssl_start_accepted+0x78>
    dc0c:	add	r2, pc, r2
    dc10:	mov	r0, r4
    dc14:	mov	r1, r5
    dc18:	mov	r3, #0
    dc1c:	bl	4d30 <rb_settimeout@plt>
    dc20:	mov	r0, r4
    dc24:	mov	r1, #0
    dc28:	bl	dc94 <rb_ssl_init_fd>
    dc2c:	mov	r0, r4
    dc30:	mov	r1, #0
    dc34:	pop	{r4, r5, r6, r7, fp, lr}
    dc38:	b	dd38 <rb_ssl_accept_common>
    dc3c:	.word	0x0000004c

0000dc40 <rb_malloc>:
    dc40:	push	{fp, lr}
    dc44:	mov	fp, sp
    dc48:	mov	r1, r0
    dc4c:	mov	r0, #1
    dc50:	bl	4f1c <calloc@plt>
    dc54:	cmp	r0, #0
    dc58:	popne	{fp, pc}
    dc5c:	bl	52a0 <rb_outofmemory@plt>

0000dc60 <rb_ssl_timeout_cb>:
    dc60:	push	{fp, lr}
    dc64:	mov	fp, sp
    dc68:	sub	sp, sp, #8
    dc6c:	ldr	r1, [r0, #52]	; 0x34
    dc70:	ldr	ip, [r1, #132]	; 0x84
    dc74:	ldr	r1, [r1, #140]	; 0x8c
    dc78:	str	r1, [sp]
    dc7c:	mov	r1, #3
    dc80:	mov	r2, #0
    dc84:	mov	r3, #0
    dc88:	blx	ip
    dc8c:	mov	sp, fp
    dc90:	pop	{fp, pc}

0000dc94 <rb_ssl_init_fd>:
    dc94:	push	{r4, r5, fp, lr}
    dc98:	add	fp, sp, #8
    dc9c:	mov	r5, r1
    dca0:	mov	r4, r0
    dca4:	bl	d1ec <rb_ssl_last_err>
    dca8:	ldr	r0, [pc, #120]	; dd28 <rb_ssl_init_fd+0x94>
    dcac:	ldr	r0, [pc, r0]
    dcb0:	bl	5048 <SSL_new@plt>
    dcb4:	str	r0, [r4, #56]	; 0x38
    dcb8:	cmp	r0, #0
    dcbc:	beq	dcd8 <rb_ssl_init_fd+0x44>
    dcc0:	cmp	r5, #1
    dcc4:	beq	dd08 <rb_ssl_init_fd+0x74>
    dcc8:	cmp	r5, #0
    dccc:	bne	dd0c <rb_ssl_init_fd+0x78>
    dcd0:	bl	52e8 <SSL_set_accept_state@plt>
    dcd4:	b	dd0c <rb_ssl_init_fd+0x78>
    dcd8:	bl	d1ec <rb_ssl_last_err>
    dcdc:	bl	d598 <rb_ssl_strerror>
    dce0:	ldr	r0, [pc, #68]	; dd2c <rb_ssl_init_fd+0x98>
    dce4:	add	r0, pc, r0
    dce8:	ldr	r1, [pc, #64]	; dd30 <rb_ssl_init_fd+0x9c>
    dcec:	add	r1, pc, r1
    dcf0:	ldr	r2, [pc, #60]	; dd34 <rb_ssl_init_fd+0xa0>
    dcf4:	add	r2, pc, r2
    dcf8:	bl	5240 <rb_lib_log@plt>
    dcfc:	mov	r0, r4
    dd00:	pop	{r4, r5, fp, lr}
    dd04:	b	518c <rb_close@plt>
    dd08:	bl	5480 <SSL_set_connect_state@plt>
    dd0c:	ldr	r5, [r4, #56]	; 0x38
    dd10:	mov	r0, r4
    dd14:	bl	4e20 <rb_get_fd@plt>
    dd18:	mov	r1, r0
    dd1c:	mov	r0, r5
    dd20:	pop	{r4, r5, fp, lr}
    dd24:	b	4f94 <SSL_set_fd@plt>
    dd28:	.word	0x0002cce4
    dd2c:	.word	0x000082ea
    dd30:	.word	0x000082f2
    dd34:	.word	0x0002cea0

0000dd38 <rb_ssl_accept_common>:
    dd38:	push	{r4, r5, r6, sl, fp, lr}
    dd3c:	add	fp, sp, #16
    dd40:	sub	sp, sp, #8
    dd44:	mov	r4, r0
    dd48:	bl	d1ec <rb_ssl_last_err>
    dd4c:	ldr	r0, [r4, #56]	; 0x38
    dd50:	bl	50d8 <SSL_do_handshake@plt>
    dd54:	mov	r6, r0
    dd58:	ldr	r0, [r4, #56]	; 0x38
    dd5c:	mov	r1, r6
    dd60:	bl	55c4 <SSL_get_error@plt>
    dd64:	cmp	r6, #1
    dd68:	bne	dddc <rb_ssl_accept_common+0xa4>
    dd6c:	ldr	r0, [r4, #60]	; 0x3c
    dd70:	add	r0, r0, #1
    dd74:	str	r0, [r4, #60]	; 0x3c
    dd78:	mov	r6, #0
    dd7c:	mov	r0, r4
    dd80:	mov	r1, #0
    dd84:	mov	r2, #0
    dd88:	mov	r3, #0
    dd8c:	bl	4d30 <rb_settimeout@plt>
    dd90:	mov	r0, r4
    dd94:	mov	r1, #3
    dd98:	mov	r2, #0
    dd9c:	mov	r3, #0
    dda0:	bl	4de4 <rb_setselect@plt>
    dda4:	ldr	r5, [r4, #52]	; 0x34
    dda8:	str	r6, [r4, #52]	; 0x34
    ddac:	ldr	r3, [r5, #128]	; 0x80
    ddb0:	ldr	r6, [r5, #132]	; 0x84
    ddb4:	ldr	r0, [r5, #140]	; 0x8c
    ddb8:	str	r0, [sp]
    ddbc:	mov	r0, r4
    ddc0:	mov	r1, #0
    ddc4:	mov	r2, r5
    ddc8:	blx	r6
    ddcc:	mov	r0, r5
    ddd0:	sub	sp, fp, #16
    ddd4:	pop	{r4, r5, r6, sl, fp, lr}
    ddd8:	b	e1b4 <rb_free>
    dddc:	mov	r5, r0
    dde0:	cmn	r6, #1
    dde4:	cmpeq	r5, #2
    dde8:	beq	de34 <rb_ssl_accept_common+0xfc>
    ddec:	cmn	r6, #1
    ddf0:	cmpeq	r5, #3
    ddf4:	beq	de48 <rb_ssl_accept_common+0x110>
    ddf8:	bl	560c <__errno_location@plt>
    ddfc:	mov	r1, #5
    de00:	str	r1, [r0]
    de04:	str	r5, [r4, #64]	; 0x40
    de08:	ldr	r0, [r4, #52]	; 0x34
    de0c:	ldr	r6, [r0, #132]	; 0x84
    de10:	ldr	r0, [r0, #140]	; 0x8c
    de14:	str	r0, [sp]
    de18:	mov	r0, r4
    de1c:	mov	r1, #6
    de20:	mov	r2, #0
    de24:	mov	r3, #0
    de28:	blx	r6
    de2c:	sub	sp, fp, #16
    de30:	pop	{r4, r5, r6, sl, fp, pc}
    de34:	ldr	r2, [pc, #44]	; de68 <rb_ssl_accept_common+0x130>
    de38:	add	r2, pc, r2
    de3c:	mov	r0, r4
    de40:	mov	r1, #1
    de44:	b	de58 <rb_ssl_accept_common+0x120>
    de48:	ldr	r2, [pc, #28]	; de6c <rb_ssl_accept_common+0x134>
    de4c:	add	r2, pc, r2
    de50:	mov	r0, r4
    de54:	mov	r1, #2
    de58:	mov	r3, #0
    de5c:	sub	sp, fp, #16
    de60:	pop	{r4, r5, r6, sl, fp, lr}
    de64:	b	4de4 <rb_setselect@plt>
    de68:	.word	0xfffffef8
    de6c:	.word	0xfffffee4

0000de70 <rb_ssl_accept_setup>:
    de70:	push	{r4, r5, r6, r7, fp, lr}
    de74:	add	fp, sp, #16
    de78:	mov	r5, r3
    de7c:	mov	r6, r2
    de80:	mov	r4, r1
    de84:	mov	r7, r0
    de88:	ldrb	r0, [r1, #17]
    de8c:	orr	r0, r0, #32
    de90:	strb	r0, [r1, #17]
    de94:	mov	r0, #144	; 0x90
    de98:	bl	dc40 <rb_malloc>
    de9c:	str	r0, [r4, #52]	; 0x34
    dea0:	ldr	r1, [r7, #52]	; 0x34
    dea4:	ldr	r2, [r1, #132]	; 0x84
    dea8:	str	r2, [r0, #132]	; 0x84
    deac:	ldr	r1, [r1, #140]	; 0x8c
    deb0:	ldr	r2, [r4, #52]	; 0x34
    deb4:	str	r5, [r2, #128]	; 0x80
    deb8:	str	r1, [r2, #140]	; 0x8c
    debc:	vmov.i32	q8, #0	; 0x00000000
    dec0:	add	r1, r0, #16
    dec4:	vst1.32	{d16-d17}, [r1]
    dec8:	add	r1, r0, #32
    decc:	vst1.32	{d16-d17}, [r1]
    ded0:	add	r1, r0, #48	; 0x30
    ded4:	vst1.32	{d16-d17}, [r1]
    ded8:	add	r1, r0, #64	; 0x40
    dedc:	vst1.32	{d16-d17}, [r1]
    dee0:	add	r1, r0, #80	; 0x50
    dee4:	vst1.32	{d16-d17}, [r1]
    dee8:	add	r1, r0, #96	; 0x60
    deec:	vst1.32	{d16-d17}, [r1]
    def0:	mov	r1, #112	; 0x70
    def4:	vst1.32	{d16-d17}, [r0], r1
    def8:	vst1.32	{d16-d17}, [r0]
    defc:	ldr	r0, [r4, #52]	; 0x34
    df00:	mov	r1, r6
    df04:	mov	r2, r5
    df08:	bl	5120 <memcpy@plt>
    df0c:	ldr	r2, [pc, #44]	; df40 <rb_ssl_accept_setup+0xd0>
    df10:	add	r2, pc, r2
    df14:	mov	r0, r4
    df18:	mov	r1, #10
    df1c:	mov	r3, #0
    df20:	bl	4d30 <rb_settimeout@plt>
    df24:	mov	r0, r4
    df28:	mov	r1, #0
    df2c:	bl	dc94 <rb_ssl_init_fd>
    df30:	mov	r0, r4
    df34:	mov	r1, #0
    df38:	pop	{r4, r5, r6, r7, fp, lr}
    df3c:	b	dd38 <rb_ssl_accept_common>
    df40:	.word	0xfffffd48

0000df44 <rb_ssl_listen>:
    df44:	push	{r4, sl, fp, lr}
    df48:	add	fp, sp, #8
    df4c:	mov	r4, r0
    df50:	bl	5510 <rb_listen@plt>
    df54:	mov	r1, #52	; 0x34
    df58:	strb	r1, [r4, #17]
    df5c:	pop	{r4, sl, fp, pc}

0000df60 <rb_connect_tcp_ssl>:
    df60:	cmp	r0, #0
    df64:	bxeq	lr
    df68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    df6c:	add	fp, sp, #24
    df70:	sub	sp, sp, #8
    df74:	mov	r7, r3
    df78:	mov	r4, r2
    df7c:	mov	r5, r1
    df80:	mov	r6, r0
    df84:	ldr	r8, [fp, #12]
    df88:	ldr	r9, [fp, #8]
    df8c:	mov	r0, #12
    df90:	bl	dc40 <rb_malloc>
    df94:	stm	r0, {r7, r9}
    df98:	str	r8, [r0, #8]
    df9c:	stm	sp, {r0, r8}
    dfa0:	ldr	r3, [pc, #24]	; dfc0 <rb_connect_tcp_ssl+0x60>
    dfa4:	add	r3, pc, r3
    dfa8:	mov	r0, r6
    dfac:	mov	r1, r5
    dfb0:	mov	r2, r4
    dfb4:	bl	4d6c <rb_connect_tcp@plt>
    dfb8:	sub	sp, fp, #24
    dfbc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    dfc0:	.word	0x00000018

0000dfc4 <rb_ssl_tryconn>:
    dfc4:	push	{r4, r5, fp, lr}
    dfc8:	add	fp, sp, #8
    dfcc:	mov	r4, r2
    dfd0:	mov	r5, r0
    dfd4:	cmp	r1, #0
    dfd8:	beq	dfec <rb_ssl_tryconn+0x28>
    dfdc:	mov	r0, r5
    dfe0:	mov	r2, r4
    dfe4:	pop	{r4, r5, fp, lr}
    dfe8:	b	e1c0 <rb_ssl_connect_realcb>
    dfec:	ldrb	r0, [r5, #17]
    dff0:	orr	r0, r0, #32
    dff4:	strb	r0, [r5, #17]
    dff8:	ldr	r1, [r4, #8]
    dffc:	ldr	r2, [pc, #40]	; e02c <rb_ssl_tryconn+0x68>
    e000:	add	r2, pc, r2
    e004:	mov	r0, r5
    e008:	mov	r3, r4
    e00c:	bl	4d30 <rb_settimeout@plt>
    e010:	mov	r0, r5
    e014:	mov	r1, #1
    e018:	bl	dc94 <rb_ssl_init_fd>
    e01c:	mov	r0, r5
    e020:	mov	r1, r4
    e024:	pop	{r4, r5, fp, lr}
    e028:	b	e0c8 <rb_ssl_connect_common>
    e02c:	.word	0x000000b4

0000e030 <rb_ssl_start_connected>:
    e030:	cmp	r0, #0
    e034:	bxeq	lr
    e038:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e03c:	add	fp, sp, #24
    e040:	mov	r8, r3
    e044:	mov	r5, r2
    e048:	mov	r6, r1
    e04c:	mov	r4, r0
    e050:	mov	r0, #12
    e054:	bl	dc40 <rb_malloc>
    e058:	mov	r7, r0
    e05c:	str	r6, [r0]
    e060:	stmib	r0, {r5, r8}
    e064:	mov	r0, #268	; 0x10c
    e068:	bl	dc40 <rb_malloc>
    e06c:	str	r0, [r4, #48]	; 0x30
    e070:	str	r6, [r0, #260]	; 0x104
    e074:	str	r5, [r0, #264]	; 0x108
    e078:	ldrb	r0, [r4, #17]
    e07c:	orr	r0, r0, #32
    e080:	strb	r0, [r4, #17]
    e084:	ldr	r1, [r7, #8]
    e088:	ldr	r2, [pc, #40]	; e0b8 <rb_ssl_start_connected+0x88>
    e08c:	add	r2, pc, r2
    e090:	mov	r0, r4
    e094:	mov	r3, r7
    e098:	bl	4d30 <rb_settimeout@plt>
    e09c:	mov	r0, r4
    e0a0:	mov	r1, #1
    e0a4:	bl	dc94 <rb_ssl_init_fd>
    e0a8:	mov	r0, r4
    e0ac:	mov	r1, r7
    e0b0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    e0b4:	b	e0c8 <rb_ssl_connect_common>
    e0b8:	.word	0x00000028

0000e0bc <rb_ssl_tryconn_timeout_cb>:
    e0bc:	mov	r2, r1
    e0c0:	mov	r1, #3
    e0c4:	b	e1c0 <rb_ssl_connect_realcb>

0000e0c8 <rb_ssl_connect_common>:
    e0c8:	push	{r4, r5, r6, r7, fp, lr}
    e0cc:	add	fp, sp, #16
    e0d0:	mov	r4, r1
    e0d4:	mov	r5, r0
    e0d8:	bl	d1ec <rb_ssl_last_err>
    e0dc:	ldr	r0, [r5, #56]	; 0x38
    e0e0:	bl	50d8 <SSL_do_handshake@plt>
    e0e4:	mov	r7, r0
    e0e8:	ldr	r0, [r5, #56]	; 0x38
    e0ec:	mov	r1, r7
    e0f0:	bl	55c4 <SSL_get_error@plt>
    e0f4:	cmp	r7, #1
    e0f8:	bne	e13c <rb_ssl_connect_common+0x74>
    e0fc:	ldr	r0, [r5, #60]	; 0x3c
    e100:	add	r0, r0, #1
    e104:	str	r0, [r5, #60]	; 0x3c
    e108:	mov	r0, r5
    e10c:	mov	r1, #0
    e110:	mov	r2, #0
    e114:	mov	r3, #0
    e118:	bl	4d30 <rb_settimeout@plt>
    e11c:	mov	r0, r5
    e120:	mov	r1, #3
    e124:	mov	r2, #0
    e128:	mov	r3, #0
    e12c:	bl	4de4 <rb_setselect@plt>
    e130:	mov	r0, r5
    e134:	mov	r1, #0
    e138:	b	e170 <rb_ssl_connect_common+0xa8>
    e13c:	mov	r6, r0
    e140:	cmn	r7, #1
    e144:	cmpeq	r6, #2
    e148:	beq	e17c <rb_ssl_connect_common+0xb4>
    e14c:	cmn	r7, #1
    e150:	cmpeq	r6, #3
    e154:	beq	e190 <rb_ssl_connect_common+0xc8>
    e158:	bl	560c <__errno_location@plt>
    e15c:	mov	r1, #5
    e160:	str	r1, [r0]
    e164:	str	r6, [r5, #64]	; 0x40
    e168:	mov	r0, r5
    e16c:	mov	r1, #6
    e170:	mov	r2, r4
    e174:	pop	{r4, r5, r6, r7, fp, lr}
    e178:	b	e1c0 <rb_ssl_connect_realcb>
    e17c:	ldr	r2, [pc, #40]	; e1ac <rb_ssl_connect_common+0xe4>
    e180:	add	r2, pc, r2
    e184:	mov	r0, r5
    e188:	mov	r1, #1
    e18c:	b	e1a0 <rb_ssl_connect_common+0xd8>
    e190:	ldr	r2, [pc, #24]	; e1b0 <rb_ssl_connect_common+0xe8>
    e194:	add	r2, pc, r2
    e198:	mov	r0, r5
    e19c:	mov	r1, #2
    e1a0:	mov	r3, r4
    e1a4:	pop	{r4, r5, r6, r7, fp, lr}
    e1a8:	b	4de4 <rb_setselect@plt>
    e1ac:	.word	0xffffff40
    e1b0:	.word	0xffffff2c

0000e1b4 <rb_free>:
    e1b4:	cmp	r0, #0
    e1b8:	bxeq	lr
    e1bc:	b	500c <free@plt>

0000e1c0 <rb_ssl_connect_realcb>:
    e1c0:	push	{r4, sl, fp, lr}
    e1c4:	add	fp, sp, #8
    e1c8:	mov	r4, r2
    e1cc:	ldr	r2, [r0, #48]	; 0x30
    e1d0:	ldr	r3, [r4]
    e1d4:	str	r3, [r2, #260]	; 0x104
    e1d8:	ldr	r3, [r4, #4]
    e1dc:	str	r3, [r2, #264]	; 0x108
    e1e0:	bl	ad14 <rb_connect_callback>
    e1e4:	mov	r0, r4
    e1e8:	pop	{r4, sl, fp, lr}
    e1ec:	b	e1b4 <rb_free>

0000e1f0 <rb_event_add>:
    e1f0:	push	{r4, r5, r6, sl, fp, lr}
    e1f4:	add	fp, sp, #16
    e1f8:	sub	sp, sp, #8
    e1fc:	mov	r4, r2
    e200:	mov	r5, r1
    e204:	mov	r6, r0
    e208:	cmp	r3, #0
    e20c:	ble	e22c <rb_event_add+0x3c>
    e210:	str	r3, [sp]
    e214:	mov	r0, r6
    e218:	mov	r1, r5
    e21c:	mov	r2, r4
    e220:	bl	e24c <rb_event_add_common>
    e224:	sub	sp, fp, #16
    e228:	pop	{r4, r5, r6, sl, fp, pc}
    e22c:	ldr	r0, [pc, #20]	; e248 <rb_event_add+0x58>
    e230:	add	r0, pc, r0
    e234:	mov	r1, r6
    e238:	mov	r2, r3
    e23c:	bl	5240 <rb_lib_log@plt>
    e240:	mov	r3, #1
    e244:	b	e210 <rb_event_add+0x20>
    e248:	.word	0x00007f4d

0000e24c <rb_event_add_common>:
    e24c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e250:	add	fp, sp, #24
    e254:	mov	r4, r3
    e258:	mov	r8, r2
    e25c:	mov	r7, r1
    e260:	mov	r6, r0
    e264:	bl	e854 <rb_malloc>
    e268:	mov	r5, r0
    e26c:	str	r7, [r0, #12]
    e270:	mov	r0, r6
    e274:	bl	e874 <rb_strndup>
    e278:	str	r8, [r5, #16]
    e27c:	str	r0, [r5, #20]
    e280:	bl	5108 <rb_current_time@plt>
    e284:	str	r4, [r5, #32]
    e288:	mov	r1, #0
    e28c:	str	r1, [r5, #44]	; 0x2c
    e290:	ldr	r1, [fp, #8]
    e294:	str	r1, [r5, #24]
    e298:	add	r0, r0, r4
    e29c:	str	r0, [r5, #28]
    e2a0:	ldr	r1, [pc, #60]	; e2e4 <rb_event_add_common+0x98>
    e2a4:	ldr	r1, [pc, r1]
    e2a8:	cmp	r0, r1
    e2ac:	blt	e2b8 <rb_event_add_common+0x6c>
    e2b0:	cmn	r1, #1
    e2b4:	bne	e2c4 <rb_event_add_common+0x78>
    e2b8:	ldr	r1, [pc, #40]	; e2e8 <rb_event_add_common+0x9c>
    e2bc:	add	r1, pc, r1
    e2c0:	str	r0, [r1]
    e2c4:	mov	r0, r5
    e2c8:	mov	r1, r5
    e2cc:	bl	e8ac <rb_dlinkAdd>
    e2d0:	mov	r0, r5
    e2d4:	mov	r1, r4
    e2d8:	bl	c0a4 <rb_io_sched_event>
    e2dc:	mov	r0, r5
    e2e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e2e4:	.word	0x0001a1c8
    e2e8:	.word	0x0001a1b0

0000e2ec <rb_event_addonce>:
    e2ec:	push	{r4, r5, r6, sl, fp, lr}
    e2f0:	add	fp, sp, #16
    e2f4:	sub	sp, sp, #8
    e2f8:	mov	r4, r2
    e2fc:	mov	r5, r1
    e300:	mov	r6, r0
    e304:	cmp	r3, #0
    e308:	ble	e32c <rb_event_addonce+0x40>
    e30c:	mov	r0, #0
    e310:	str	r0, [sp]
    e314:	mov	r0, r6
    e318:	mov	r1, r5
    e31c:	mov	r2, r4
    e320:	bl	e24c <rb_event_add_common>
    e324:	sub	sp, fp, #16
    e328:	pop	{r4, r5, r6, sl, fp, pc}
    e32c:	ldr	r0, [pc, #20]	; e348 <rb_event_addonce+0x5c>
    e330:	add	r0, pc, r0
    e334:	mov	r1, r6
    e338:	mov	r2, r3
    e33c:	bl	5240 <rb_lib_log@plt>
    e340:	mov	r3, #1
    e344:	b	e30c <rb_event_addonce+0x20>
    e348:	.word	0x00007e91

0000e34c <rb_event_delete>:
    e34c:	cmp	r0, #0
    e350:	bxeq	lr
    e354:	mov	r1, #1
    e358:	str	r1, [r0, #44]	; 0x2c
    e35c:	b	c110 <rb_io_unsched_event>

0000e360 <rb_event_find_delete>:
    e360:	push	{fp, lr}
    e364:	mov	fp, sp
    e368:	bl	e374 <rb_event_find>
    e36c:	pop	{fp, lr}
    e370:	b	e34c <rb_event_delete>

0000e374 <rb_event_find>:
    e374:	ldr	r3, [pc, #72]	; e3c4 <rb_event_find+0x50>
    e378:	ldr	r3, [pc, r3]
    e37c:	cmp	r3, #0
    e380:	bne	e394 <rb_event_find+0x20>
    e384:	b	e3b8 <rb_event_find+0x44>
    e388:	ldr	r3, [r3, #8]
    e38c:	cmp	r3, #0
    e390:	beq	e3b8 <rb_event_find+0x44>
    e394:	ldr	ip, [r3]
    e398:	ldr	r2, [ip, #12]
    e39c:	cmp	r2, r0
    e3a0:	bne	e388 <rb_event_find+0x14>
    e3a4:	ldr	r2, [ip, #16]
    e3a8:	cmp	r2, r1
    e3ac:	bne	e388 <rb_event_find+0x14>
    e3b0:	mov	r0, ip
    e3b4:	bx	lr
    e3b8:	mov	ip, #0
    e3bc:	mov	r0, ip
    e3c0:	bx	lr
    e3c4:	.word	0x0002ca40

0000e3c8 <rb_event_addish>:
    e3c8:	push	{r4, r5, r6, r7, fp, lr}
    e3cc:	add	fp, sp, #16
    e3d0:	sub	sp, sp, #8
    e3d4:	mov	r6, r3
    e3d8:	mov	r4, r2
    e3dc:	mov	r5, r1
    e3e0:	mov	r7, r0
    e3e4:	cmp	r3, #0
    e3e8:	rsbmi	r6, r6, #0
    e3ec:	cmp	r6, #2
    e3f0:	rsbgt	r6, r6, #0
    e3f4:	mov	r0, r6
    e3f8:	bl	e41c <rb_event_frequency>
    e3fc:	mov	r3, r0
    e400:	str	r6, [sp]
    e404:	mov	r0, r7
    e408:	mov	r1, r5
    e40c:	mov	r2, r4
    e410:	bl	e24c <rb_event_add_common>
    e414:	sub	sp, fp, #16
    e418:	pop	{r4, r5, r6, r7, fp, pc}

0000e41c <rb_event_frequency>:
    e41c:	push	{r4, sl, fp, lr}
    e420:	add	fp, sp, #8
    e424:	mov	r4, r0
    e428:	cmn	r0, #1
    e42c:	ble	e438 <rb_event_frequency+0x1c>
    e430:	mov	r0, r4
    e434:	pop	{r4, sl, fp, pc}
    e438:	bl	545c <rand@plt>
    e43c:	movw	r1, #19923	; 0x4dd3
    e440:	movt	r1, #4194	; 0x1062
    e444:	smmul	r2, r0, r1
    e448:	asr	r3, r2, #6
    e44c:	add	r2, r3, r2, lsr #31
    e450:	mov	r3, #1000	; 0x3e8
    e454:	mls	r0, r2, r3, r0
    e458:	mov	r2, #0
    e45c:	sub	r2, r2, r4, lsl #1
    e460:	movw	r3, #21846	; 0x5556
    e464:	movt	r3, #21845	; 0x5555
    e468:	smmul	r2, r2, r3
    e46c:	add	r2, r2, r2, lsr #31
    e470:	mul	r0, r0, r2
    e474:	smmul	r0, r0, r1
    e478:	asr	r1, r0, #6
    e47c:	add	r0, r1, r0, lsr #31
    e480:	add	r4, r0, r2
    e484:	mov	r0, r4
    e488:	pop	{r4, sl, fp, pc}

0000e48c <rb_run_one_event>:
    e48c:	push	{r4, r5, fp, lr}
    e490:	add	fp, sp, #8
    e494:	mov	r4, r0
    e498:	ldr	r1, [r0, #20]
    e49c:	ldr	r0, [pc, #108]	; e510 <rb_run_one_event+0x84>
    e4a0:	add	r0, pc, r0
    e4a4:	mov	r2, #33	; 0x21
    e4a8:	bl	4fd0 <rb_strlcpy@plt>
    e4ac:	ldr	r1, [r4, #12]
    e4b0:	ldr	r0, [r4, #16]
    e4b4:	blx	r1
    e4b8:	ldr	r0, [r4, #24]
    e4bc:	cmp	r0, #0
    e4c0:	beq	e504 <rb_run_one_event+0x78>
    e4c4:	bl	5108 <rb_current_time@plt>
    e4c8:	mov	r5, r0
    e4cc:	ldr	r0, [r4, #24]
    e4d0:	bl	e41c <rb_event_frequency>
    e4d4:	add	r0, r0, r5
    e4d8:	str	r0, [r4, #28]
    e4dc:	ldr	r1, [pc, #48]	; e514 <rb_run_one_event+0x88>
    e4e0:	ldr	r1, [pc, r1]
    e4e4:	cmp	r0, r1
    e4e8:	blt	e4f4 <rb_run_one_event+0x68>
    e4ec:	cmn	r1, #1
    e4f0:	popne	{r4, r5, fp, pc}
    e4f4:	ldr	r1, [pc, #28]	; e518 <rb_run_one_event+0x8c>
    e4f8:	add	r1, pc, r1
    e4fc:	str	r0, [r1]
    e500:	pop	{r4, r5, fp, pc}
    e504:	mov	r0, r4
    e508:	pop	{r4, r5, fp, lr}
    e50c:	b	e34c <rb_event_delete>
    e510:	.word	0x0002c8f4
    e514:	.word	0x00019f8c
    e518:	.word	0x00019f74

0000e51c <rb_event_run>:
    e51c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e520:	add	fp, sp, #24
    e524:	bl	c170 <rb_io_supports_event>
    e528:	cmp	r0, #0
    e52c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    e530:	ldr	r7, [pc, #228]	; e61c <rb_event_run+0x100>
    e534:	add	r7, pc, r7
    e538:	mvn	r0, #0
    e53c:	str	r0, [r7]
    e540:	ldr	r4, [pc, #216]	; e620 <rb_event_run+0x104>
    e544:	ldr	r4, [pc, r4]
    e548:	cmp	r4, #0
    e54c:	beq	e618 <rb_event_run+0xfc>
    e550:	ldr	r8, [pc, #204]	; e624 <rb_event_run+0x108>
    e554:	add	r8, pc, r8
    e558:	b	e57c <rb_event_run+0x60>
    e55c:	mov	r0, r5
    e560:	bl	e62c <rb_dlinkDelete>
    e564:	ldr	r0, [r5, #20]
    e568:	bl	e67c <rb_free>
    e56c:	mov	r0, r5
    e570:	bl	e67c <rb_free>
    e574:	cmp	r4, #0
    e578:	beq	e618 <rb_event_run+0xfc>
    e57c:	ldr	r5, [r4]
    e580:	ldr	r4, [r4, #8]
    e584:	ldr	r0, [r5, #44]	; 0x2c
    e588:	cmp	r0, #0
    e58c:	bne	e55c <rb_event_run+0x40>
    e590:	ldr	r6, [r5, #28]
    e594:	bl	5108 <rb_current_time@plt>
    e598:	cmp	r6, r0
    e59c:	ble	e5a8 <rb_event_run+0x8c>
    e5a0:	ldr	r0, [r5, #28]
    e5a4:	b	e5e8 <rb_event_run+0xcc>
    e5a8:	ldr	r1, [r5, #20]
    e5ac:	mov	r0, r8
    e5b0:	mov	r2, #33	; 0x21
    e5b4:	bl	4fd0 <rb_strlcpy@plt>
    e5b8:	ldr	r1, [r5, #12]
    e5bc:	ldr	r0, [r5, #16]
    e5c0:	blx	r1
    e5c4:	ldr	r0, [r5, #24]
    e5c8:	cmp	r0, #0
    e5cc:	beq	e55c <rb_event_run+0x40>
    e5d0:	bl	5108 <rb_current_time@plt>
    e5d4:	mov	r6, r0
    e5d8:	ldr	r0, [r5, #24]
    e5dc:	bl	e41c <rb_event_frequency>
    e5e0:	add	r0, r0, r6
    e5e4:	str	r0, [r5, #28]
    e5e8:	ldr	r1, [pc, #56]	; e628 <rb_event_run+0x10c>
    e5ec:	ldr	r1, [pc, r1]
    e5f0:	cmp	r0, r1
    e5f4:	blt	e60c <rb_event_run+0xf0>
    e5f8:	cmn	r1, #1
    e5fc:	streq	r0, [r7]
    e600:	cmp	r4, #0
    e604:	bne	e57c <rb_event_run+0x60>
    e608:	b	e618 <rb_event_run+0xfc>
    e60c:	str	r0, [r7]
    e610:	cmp	r4, #0
    e614:	bne	e57c <rb_event_run+0x60>
    e618:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e61c:	.word	0x00019f38
    e620:	.word	0x0002c874
    e624:	.word	0x0002c840
    e628:	.word	0x00019e80

0000e62c <rb_dlinkDelete>:
    e62c:	ldr	ip, [pc, #68]	; e678 <rb_dlinkDelete+0x4c>
    e630:	add	ip, pc, ip
    e634:	ldmib	r0, {r2, r3}
    e638:	add	r1, r3, #4
    e63c:	cmp	r3, #0
    e640:	addeq	r1, ip, #4
    e644:	str	r2, [r1]
    e648:	ldmib	r0, {r1, r2}
    e64c:	cmp	r1, #0
    e650:	mov	r3, ip
    e654:	addne	r3, r1, #8
    e658:	str	r2, [r3]
    e65c:	mov	r1, #0
    e660:	str	r1, [r0, #4]
    e664:	str	r1, [r0, #8]
    e668:	ldr	r0, [ip, #8]
    e66c:	sub	r0, r0, #1
    e670:	str	r0, [ip, #8]
    e674:	bx	lr
    e678:	.word	0x0002c788

0000e67c <rb_free>:
    e67c:	cmp	r0, #0
    e680:	bxeq	lr
    e684:	b	500c <free@plt>

0000e688 <rb_event_io_register_all>:
    e688:	push	{r4, sl, fp, lr}
    e68c:	add	fp, sp, #8
    e690:	bl	c170 <rb_io_supports_event>
    e694:	cmp	r0, #0
    e698:	popeq	{r4, sl, fp, pc}
    e69c:	ldr	r4, [pc, #36]	; e6c8 <rb_event_io_register_all+0x40>
    e6a0:	ldr	r4, [pc, r4]
    e6a4:	cmp	r4, #0
    e6a8:	beq	e6c4 <rb_event_io_register_all+0x3c>
    e6ac:	ldr	r0, [r4]
    e6b0:	ldr	r1, [r0, #32]
    e6b4:	bl	c0a4 <rb_io_sched_event>
    e6b8:	ldr	r4, [r4, #8]
    e6bc:	cmp	r4, #0
    e6c0:	bne	e6ac <rb_event_io_register_all+0x24>
    e6c4:	pop	{r4, sl, fp, pc}
    e6c8:	.word	0x0002c718

0000e6cc <rb_event_init>:
    e6cc:	ldr	r0, [pc, #16]	; e6e4 <rb_event_init+0x18>
    e6d0:	add	r0, pc, r0
    e6d4:	ldr	r1, [pc, #12]	; e6e8 <rb_event_init+0x1c>
    e6d8:	add	r1, pc, r1
    e6dc:	mov	r2, #33	; 0x21
    e6e0:	b	4fd0 <rb_strlcpy@plt>
    e6e4:	.word	0x0002c6c4
    e6e8:	.word	0x00007b2b

0000e6ec <rb_dump_events>:
    e6ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6f0:	add	fp, sp, #28
    e6f4:	sub	sp, sp, #524	; 0x20c
    e6f8:	mov	r9, r1
    e6fc:	mov	sl, r0
    e700:	add	r6, sp, #8
    e704:	ldr	r2, [pc, #168]	; e7b4 <rb_dump_events+0xc8>
    e708:	add	r2, pc, r2
    e70c:	ldr	r3, [pc, #164]	; e7b8 <rb_dump_events+0xcc>
    e710:	add	r3, pc, r3
    e714:	mov	r0, r6
    e718:	mov	r1, #512	; 0x200
    e71c:	bl	54c8 <snprintf@plt>
    e720:	mov	r0, r6
    e724:	mov	r1, r9
    e728:	blx	sl
    e72c:	ldr	r1, [pc, #136]	; e7bc <rb_dump_events+0xd0>
    e730:	add	r1, pc, r1
    e734:	mov	r0, r6
    e738:	mov	r2, #512	; 0x200
    e73c:	bl	4fd0 <rb_strlcpy@plt>
    e740:	mov	r0, r6
    e744:	mov	r1, r9
    e748:	blx	sl
    e74c:	ldr	r4, [pc, #108]	; e7c0 <rb_dump_events+0xd4>
    e750:	ldr	r4, [pc, r4]
    e754:	cmp	r4, #0
    e758:	beq	e7ac <rb_dump_events+0xc0>
    e75c:	add	r6, sp, #8
    e760:	ldr	r5, [r4]
    e764:	ldr	r7, [r5, #20]
    e768:	ldr	r8, [r5, #28]
    e76c:	bl	5108 <rb_current_time@plt>
    e770:	ldr	r1, [r5, #24]
    e774:	sub	r0, r8, r0
    e778:	stm	sp, {r0, r1}
    e77c:	mov	r0, r6
    e780:	mov	r1, #512	; 0x200
    e784:	ldr	r2, [pc, #56]	; e7c4 <rb_dump_events+0xd8>
    e788:	add	r2, pc, r2
    e78c:	mov	r3, r7
    e790:	bl	54c8 <snprintf@plt>
    e794:	mov	r0, r6
    e798:	mov	r1, r9
    e79c:	blx	sl
    e7a0:	ldr	r4, [r4, #8]
    e7a4:	cmp	r4, #0
    e7a8:	bne	e760 <rb_dump_events+0x74>
    e7ac:	sub	sp, fp, #28
    e7b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7b4:	.word	0x00007b00
    e7b8:	.word	0x0002c684
    e7bc:	.word	0x00007aee
    e7c0:	.word	0x0002c668
    e7c4:	.word	0x00007ac2

0000e7c8 <rb_set_back_events>:
    e7c8:	ldr	r1, [pc, #40]	; e7f8 <rb_set_back_events+0x30>
    e7cc:	ldr	r1, [pc, r1]
    e7d0:	b	e7ec <rb_set_back_events+0x24>
    e7d4:	ldr	r2, [r1]
    e7d8:	ldr	r3, [r2, #28]
    e7dc:	subs	r3, r3, r0
    e7e0:	movle	r3, #0
    e7e4:	str	r3, [r2, #28]
    e7e8:	ldr	r1, [r1, #8]
    e7ec:	cmp	r1, #0
    e7f0:	bxeq	lr
    e7f4:	b	e7d4 <rb_set_back_events+0xc>
    e7f8:	.word	0x0002c5ec

0000e7fc <rb_event_update>:
    e7fc:	push	{r4, r5, fp, lr}
    e800:	add	fp, sp, #8
    e804:	cmp	r0, #0
    e808:	beq	e840 <rb_event_update+0x44>
    e80c:	mov	r4, r0
    e810:	str	r1, [r0, #24]
    e814:	mov	r0, r1
    e818:	bl	e41c <rb_event_frequency>
    e81c:	mov	r5, r0
    e820:	bl	5108 <rb_current_time@plt>
    e824:	add	r0, r0, r5
    e828:	ldr	r1, [r4, #28]
    e82c:	cmp	r0, r1
    e830:	popge	{r4, r5, fp, pc}
    e834:	bl	5108 <rb_current_time@plt>
    e838:	add	r0, r0, r5
    e83c:	str	r0, [r4, #28]
    e840:	pop	{r4, r5, fp, pc}

0000e844 <rb_event_next>:
    e844:	ldr	r0, [pc, #4]	; e850 <rb_event_next+0xc>
    e848:	ldr	r0, [pc, r0]
    e84c:	bx	lr
    e850:	.word	0x00019c24

0000e854 <rb_malloc>:
    e854:	push	{fp, lr}
    e858:	mov	fp, sp
    e85c:	mov	r0, #1
    e860:	mov	r1, #48	; 0x30
    e864:	bl	4f1c <calloc@plt>
    e868:	cmp	r0, #0
    e86c:	popne	{fp, pc}
    e870:	bl	52a0 <rb_outofmemory@plt>

0000e874 <rb_strndup>:
    e874:	push	{r4, r5, fp, lr}
    e878:	add	fp, sp, #8
    e87c:	mov	r4, r0
    e880:	mov	r0, #33	; 0x21
    e884:	bl	52c4 <malloc@plt>
    e888:	cmp	r0, #0
    e88c:	beq	e8a8 <rb_strndup+0x34>
    e890:	mov	r5, r0
    e894:	mov	r1, r4
    e898:	mov	r2, #33	; 0x21
    e89c:	bl	4fd0 <rb_strlcpy@plt>
    e8a0:	mov	r0, r5
    e8a4:	pop	{r4, r5, fp, pc}
    e8a8:	bl	52a0 <rb_outofmemory@plt>

0000e8ac <rb_dlinkAdd>:
    e8ac:	mov	r2, #0
    e8b0:	stm	r1, {r0, r2}
    e8b4:	ldr	r2, [pc, #68]	; e900 <rb_dlinkAdd+0x54>
    e8b8:	ldr	r2, [pc, r2]
    e8bc:	str	r2, [r1, #8]
    e8c0:	cmp	r2, #0
    e8c4:	ldr	r0, [pc, #56]	; e904 <rb_dlinkAdd+0x58>
    e8c8:	add	r0, pc, r0
    e8cc:	beq	e8dc <rb_dlinkAdd+0x30>
    e8d0:	add	r2, r2, #4
    e8d4:	str	r1, [r2]
    e8d8:	b	e8ec <rb_dlinkAdd+0x40>
    e8dc:	mov	r2, r0
    e8e0:	ldr	r3, [r2, #4]!
    e8e4:	cmp	r3, #0
    e8e8:	streq	r1, [r2]
    e8ec:	str	r1, [r0]
    e8f0:	ldr	r1, [r0, #8]
    e8f4:	add	r1, r1, #1
    e8f8:	str	r1, [r0, #8]
    e8fc:	bx	lr
    e900:	.word	0x0002c500
    e904:	.word	0x0002c4f0

0000e908 <rb_ctime>:
    e908:	push	{r4, r5, r6, r7, fp, lr}
    e90c:	add	fp, sp, #16
    e910:	sub	sp, sp, #72	; 0x48
    e914:	mov	r7, r2
    e918:	mov	r6, r1
    e91c:	str	r0, [fp, #-20]	; 0xffffffec
    e920:	sub	r0, fp, #20
    e924:	add	r1, sp, #24
    e928:	bl	530c <gmtime_r@plt>
    e92c:	cmp	r6, #0
    e930:	movweq	r7, #128	; 0x80
    e934:	ldr	r5, [pc, #136]	; e9c4 <rb_ctime+0xbc>
    e938:	add	r5, pc, r5
    e93c:	movne	r5, r6
    e940:	cmp	r0, #0
    e944:	beq	e9ac <rb_ctime+0xa4>
    e948:	ldm	r0, {r1, r2, r3, r6, ip}
    e94c:	ldr	r4, [r0, #20]
    e950:	ldr	r0, [r0, #24]
    e954:	str	r1, [sp, #16]
    e958:	str	r2, [sp, #12]
    e95c:	str	r3, [sp, #8]
    e960:	str	r6, [sp, #4]
    e964:	movw	r1, #1900	; 0x76c
    e968:	add	r1, r4, r1
    e96c:	str	r1, [sp, #20]
    e970:	ldr	r1, [pc, #84]	; e9cc <rb_ctime+0xc4>
    e974:	add	r1, pc, r1
    e978:	ldr	r1, [r1, ip, lsl #2]
    e97c:	str	r1, [sp]
    e980:	ldr	r1, [pc, #72]	; e9d0 <rb_ctime+0xc8>
    e984:	add	r1, pc, r1
    e988:	ldr	r3, [r1, r0, lsl #2]
    e98c:	ldr	r2, [pc, #64]	; e9d4 <rb_ctime+0xcc>
    e990:	add	r2, pc, r2
    e994:	mov	r0, r5
    e998:	mov	r1, r7
    e99c:	bl	54c8 <snprintf@plt>
    e9a0:	mov	r0, r5
    e9a4:	sub	sp, fp, #16
    e9a8:	pop	{r4, r5, r6, r7, fp, pc}
    e9ac:	ldr	r1, [pc, #20]	; e9c8 <rb_ctime+0xc0>
    e9b0:	add	r1, pc, r1
    e9b4:	mov	r0, r5
    e9b8:	mov	r2, r7
    e9bc:	bl	4fd0 <rb_strlcpy@plt>
    e9c0:	b	e9a0 <rb_ctime+0x98>
    e9c4:	.word	0x0002c490
    e9c8:	.word	0x00006fc2
    e9cc:	.word	0x000194f8
    e9d0:	.word	0x000194cc
    e9d4:	.word	0x000078dd

0000e9d8 <rb_date>:
    e9d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e9dc:	add	fp, sp, #24
    e9e0:	sub	sp, sp, #72	; 0x48
    e9e4:	mov	r8, r2
    e9e8:	mov	r4, r1
    e9ec:	str	r0, [fp, #-28]	; 0xffffffe4
    e9f0:	sub	r0, fp, #28
    e9f4:	add	r1, sp, #24
    e9f8:	bl	530c <gmtime_r@plt>
    e9fc:	cmp	r0, #0
    ea00:	beq	ea64 <rb_date+0x8c>
    ea04:	ldm	r0, {r1, r2, r3, r5, r6, r7}
    ea08:	ldr	r0, [r0, #24]
    ea0c:	str	r1, [sp, #20]
    ea10:	str	r2, [sp, #16]
    ea14:	str	r3, [sp, #12]
    ea18:	str	r5, [sp, #4]
    ea1c:	movw	r1, #1900	; 0x76c
    ea20:	add	r1, r7, r1
    ea24:	str	r1, [sp, #8]
    ea28:	ldr	r1, [pc, #80]	; ea80 <rb_date+0xa8>
    ea2c:	add	r1, pc, r1
    ea30:	ldr	r1, [r1, r6, lsl #2]
    ea34:	str	r1, [sp]
    ea38:	ldr	r1, [pc, #68]	; ea84 <rb_date+0xac>
    ea3c:	add	r1, pc, r1
    ea40:	ldr	r3, [r1, r0, lsl #2]
    ea44:	ldr	r2, [pc, #60]	; ea88 <rb_date+0xb0>
    ea48:	add	r2, pc, r2
    ea4c:	mov	r0, r4
    ea50:	mov	r1, r8
    ea54:	bl	54c8 <snprintf@plt>
    ea58:	mov	r0, r4
    ea5c:	sub	sp, fp, #24
    ea60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ea64:	ldr	r1, [pc, #16]	; ea7c <rb_date+0xa4>
    ea68:	add	r1, pc, r1
    ea6c:	mov	r0, r4
    ea70:	mov	r2, r8
    ea74:	bl	4fd0 <rb_strlcpy@plt>
    ea78:	b	ea58 <rb_date+0x80>
    ea7c:	.word	0x00006f0a
    ea80:	.word	0x0001948c
    ea84:	.word	0x00019460
    ea88:	.word	0x00007840

0000ea8c <rb_current_time>:
    ea8c:	ldr	r0, [pc, #4]	; ea98 <rb_current_time+0xc>
    ea90:	ldr	r0, [pc, r0]
    ea94:	bx	lr
    ea98:	.word	0x0002c3b8

0000ea9c <rb_current_time_tv>:
    ea9c:	ldr	r0, [pc, #4]	; eaa8 <rb_current_time_tv+0xc>
    eaa0:	add	r0, pc, r0
    eaa4:	bx	lr
    eaa8:	.word	0x0002c3a8

0000eaac <rb_lib_log>:
    eaac:	sub	sp, sp, #12
    eab0:	push	{r4, sl, fp, lr}
    eab4:	add	fp, sp, #8
    eab8:	sub	sp, sp, #4
    eabc:	mov	ip, r0
    eac0:	add	r0, fp, #8
    eac4:	stm	r0, {r1, r2, r3}
    eac8:	ldr	r0, [pc, #72]	; eb18 <rb_lib_log+0x6c>
    eacc:	ldr	r0, [pc, r0]
    ead0:	cmp	r0, #0
    ead4:	beq	eb08 <rb_lib_log+0x5c>
    ead8:	add	r3, fp, #8
    eadc:	str	r3, [sp]
    eae0:	ldr	r4, [pc, #52]	; eb1c <rb_lib_log+0x70>
    eae4:	add	r4, pc, r4
    eae8:	mov	r0, r4
    eaec:	mov	r1, #512	; 0x200
    eaf0:	mov	r2, ip
    eaf4:	bl	4e98 <vsnprintf@plt>
    eaf8:	ldr	r1, [pc, #32]	; eb20 <rb_lib_log+0x74>
    eafc:	ldr	r1, [pc, r1]
    eb00:	mov	r0, r4
    eb04:	blx	r1
    eb08:	sub	sp, fp, #8
    eb0c:	pop	{r4, sl, fp, lr}
    eb10:	add	sp, sp, #12
    eb14:	bx	lr
    eb18:	.word	0x0002c384
    eb1c:	.word	0x0002c370
    eb20:	.word	0x0002c354

0000eb24 <rb_lib_die>:
    eb24:	sub	sp, sp, #12
    eb28:	push	{r4, sl, fp, lr}
    eb2c:	add	fp, sp, #8
    eb30:	sub	sp, sp, #4
    eb34:	mov	ip, r0
    eb38:	add	r0, fp, #8
    eb3c:	stm	r0, {r1, r2, r3}
    eb40:	ldr	r0, [pc, #76]	; eb94 <rb_lib_die+0x70>
    eb44:	ldr	r0, [pc, r0]
    eb48:	cmp	r0, #0
    eb4c:	beq	eb90 <rb_lib_die+0x6c>
    eb50:	add	r3, fp, #8
    eb54:	str	r3, [sp]
    eb58:	ldr	r4, [pc, #56]	; eb98 <rb_lib_die+0x74>
    eb5c:	add	r4, pc, r4
    eb60:	mov	r0, r4
    eb64:	mov	r1, #512	; 0x200
    eb68:	mov	r2, ip
    eb6c:	bl	4e98 <vsnprintf@plt>
    eb70:	ldr	r1, [pc, #36]	; eb9c <rb_lib_die+0x78>
    eb74:	ldr	r1, [pc, r1]
    eb78:	mov	r0, r4
    eb7c:	blx	r1
    eb80:	sub	sp, fp, #8
    eb84:	pop	{r4, sl, fp, lr}
    eb88:	add	sp, sp, #12
    eb8c:	bx	lr
    eb90:	bl	4d0c <abort@plt>
    eb94:	.word	0x0002c510
    eb98:	.word	0x0002c2f8
    eb9c:	.word	0x0002c4e0

0000eba0 <rb_lib_restart>:
    eba0:	sub	sp, sp, #12
    eba4:	push	{fp, lr}
    eba8:	mov	fp, sp
    ebac:	sub	sp, sp, #4
    ebb0:	mov	ip, r0
    ebb4:	add	r0, fp, #8
    ebb8:	stm	r0, {r1, r2, r3}
    ebbc:	ldr	r0, [pc, #64]	; ec04 <rb_lib_restart+0x64>
    ebc0:	ldr	r0, [pc, r0]
    ebc4:	cmp	r0, #0
    ebc8:	bne	ebd0 <rb_lib_restart+0x30>
    ebcc:	bl	4d0c <abort@plt>
    ebd0:	add	r3, fp, #8
    ebd4:	str	r3, [sp]
    ebd8:	ldr	r4, [pc, #40]	; ec08 <rb_lib_restart+0x68>
    ebdc:	add	r4, pc, r4
    ebe0:	mov	r0, r4
    ebe4:	mov	r1, #512	; 0x200
    ebe8:	mov	r2, ip
    ebec:	bl	4e98 <vsnprintf@plt>
    ebf0:	ldr	r1, [pc, #20]	; ec0c <rb_lib_restart+0x6c>
    ebf4:	ldr	r1, [pc, r1]
    ebf8:	mov	r0, r4
    ebfc:	blx	r1
    ec00:	bl	4d0c <abort@plt>
    ec04:	.word	0x0002c498
    ec08:	.word	0x0002c278
    ec0c:	.word	0x0002c464

0000ec10 <rb_set_time>:
    ec10:	push	{fp, lr}
    ec14:	mov	fp, sp
    ec18:	sub	sp, sp, #8
    ec1c:	mov	r0, sp
    ec20:	mov	r1, #0
    ec24:	bl	4ef8 <rb_gettimeofday@plt>
    ec28:	cmn	r0, #1
    ec2c:	beq	ec64 <rb_set_time+0x54>
    ec30:	ldr	r0, [pc, #84]	; ec8c <rb_set_time+0x7c>
    ec34:	ldr	r0, [pc, r0]
    ec38:	ldr	r1, [sp]
    ec3c:	cmp	r0, r1
    ec40:	ble	ec4c <rb_set_time+0x3c>
    ec44:	sub	r0, r0, r1
    ec48:	bl	e7c8 <rb_set_back_events>
    ec4c:	ldm	sp, {r0, r1}
    ec50:	ldr	r2, [pc, #56]	; ec90 <rb_set_time+0x80>
    ec54:	add	r2, pc, r2
    ec58:	strd	r0, [r2]
    ec5c:	mov	sp, fp
    ec60:	pop	{fp, pc}
    ec64:	bl	560c <__errno_location@plt>
    ec68:	ldr	r0, [r0]
    ec6c:	bl	4ce8 <strerror@plt>
    ec70:	mov	r1, r0
    ec74:	ldr	r0, [pc, #24]	; ec94 <rb_set_time+0x84>
    ec78:	add	r0, pc, r0
    ec7c:	bl	5240 <rb_lib_log@plt>
    ec80:	ldr	r0, [pc, #16]	; ec98 <rb_set_time+0x88>
    ec84:	add	r0, pc, r0
    ec88:	bl	5378 <rb_lib_restart@plt>
    ec8c:	.word	0x0002c214
    ec90:	.word	0x0002c1f4
    ec94:	.word	0x00007635
    ec98:	.word	0x0000763c

0000ec9c <rb_lib_version>:
    ec9c:	push	{r4, sl, fp, lr}
    eca0:	add	fp, sp, #8
    eca4:	sub	sp, sp, #520	; 0x208
    eca8:	add	r4, sp, #8
    ecac:	mov	r0, r4
    ecb0:	mov	r1, #512	; 0x200
    ecb4:	bl	d93c <rb_get_ssl_info>
    ecb8:	ldr	r0, [pc, #48]	; ecf0 <rb_lib_version+0x54>
    ecbc:	ldr	r0, [pc, r0]
    ecc0:	ldr	r3, [r0]
    ecc4:	str	r4, [sp]
    ecc8:	ldr	r4, [pc, #36]	; ecf4 <rb_lib_version+0x58>
    eccc:	add	r4, pc, r4
    ecd0:	ldr	r2, [pc, #32]	; ecf8 <rb_lib_version+0x5c>
    ecd4:	add	r2, pc, r2
    ecd8:	mov	r0, r4
    ecdc:	mov	r1, #640	; 0x280
    ece0:	bl	54c8 <snprintf@plt>
    ece4:	mov	r0, r4
    ece8:	sub	sp, fp, #8
    ecec:	pop	{r4, sl, fp, pc}
    ecf0:	.word	0x000196d8
    ecf4:	.word	0x0002c390
    ecf8:	.word	0x000075fa

0000ecfc <rb_lib_init>:
    ecfc:	push	{r4, r5, r6, r7, fp, lr}
    ed00:	add	fp, sp, #16
    ed04:	mov	r4, r3
    ed08:	mov	r5, r2
    ed0c:	mov	r6, r1
    ed10:	mov	r7, r0
    ed14:	bl	52ac <rb_set_time@plt>
    ed18:	ldr	r0, [pc, #88]	; ed78 <rb_lib_init+0x7c>
    ed1c:	add	r0, pc, r0
    ed20:	str	r6, [r0]
    ed24:	ldr	r0, [pc, #80]	; ed7c <rb_lib_init+0x80>
    ed28:	add	r0, pc, r0
    ed2c:	str	r7, [r0]
    ed30:	ldr	r0, [pc, #72]	; ed80 <rb_lib_init+0x84>
    ed34:	add	r0, pc, r0
    ed38:	str	r5, [r0]
    ed3c:	bl	4f34 <rb_event_init@plt>
    ed40:	bl	52f4 <rb_init_bh@plt>
    ed44:	ldr	r1, [fp, #8]
    ed48:	ldr	r2, [fp, #16]
    ed4c:	mov	r0, r4
    ed50:	bl	5414 <rb_fdlist_init@plt>
    ed54:	bl	4cd0 <rb_init_netio@plt>
    ed58:	ldr	r0, [fp, #12]
    ed5c:	bl	5204 <rb_init_rb_dlink_nodes@plt>
    ed60:	bl	c170 <rb_io_supports_event>
    ed64:	cmp	r0, #0
    ed68:	beq	ed74 <rb_lib_init+0x78>
    ed6c:	pop	{r4, r5, r6, r7, fp, lr}
    ed70:	b	c18c <rb_io_init_event>
    ed74:	pop	{r4, r5, r6, r7, fp, pc}
    ed78:	.word	0x0002c33c
    ed7c:	.word	0x0002c128
    ed80:	.word	0x0002c320

0000ed84 <rb_lib_loop>:
    ed84:	push	{fp, lr}
    ed88:	mov	fp, sp
    ed8c:	mov	r4, r0
    ed90:	bl	52ac <rb_set_time@plt>
    ed94:	bl	c170 <rb_io_supports_event>
    ed98:	cmp	r0, #0
    ed9c:	beq	edac <rb_lib_loop+0x28>
    eda0:	mvn	r0, #0
    eda4:	bl	4e80 <rb_select@plt>
    eda8:	b	eda0 <rb_lib_loop+0x1c>
    edac:	mov	r6, #1000	; 0x3e8
    edb0:	b	edd4 <rb_lib_loop+0x50>
    edb4:	mov	r5, r0
    edb8:	bl	5108 <rb_current_time@plt>
    edbc:	sub	r1, r5, r0
    edc0:	mul	r0, r1, r6
    edc4:	cmp	r1, #1
    edc8:	movwlt	r0, #1000	; 0x3e8
    edcc:	bl	4e80 <rb_select@plt>
    edd0:	bl	52dc <rb_event_run@plt>
    edd4:	cmp	r4, #0
    edd8:	mov	r0, r4
    eddc:	bne	edcc <rb_lib_loop+0x48>
    ede0:	bl	554c <rb_event_next@plt>
    ede4:	cmp	r0, #1
    ede8:	bge	edb4 <rb_lib_loop+0x30>
    edec:	mvn	r0, #0
    edf0:	b	edcc <rb_lib_loop+0x48>

0000edf4 <rb_strtok_r>:
    edf4:	b	536c <strtok_r@plt>

0000edf8 <rb_base64_encode>:
    edf8:	push	{r4, r5, r6, sl, fp, lr}
    edfc:	add	fp, sp, #16
    ee00:	mov	r4, r0
    ee04:	adds	r0, r1, #2
    ee08:	bmi	eed8 <rb_base64_encode+0xe0>
    ee0c:	mov	r6, r1
    ee10:	movw	r1, #43691	; 0xaaab
    ee14:	movt	r1, #43690	; 0xaaaa
    ee18:	umull	r0, r1, r0, r1
    ee1c:	lsr	r0, r1, #1
    ee20:	add	r0, r0, r0, lsl #2
    ee24:	bl	ef0c <rb_malloc>
    ee28:	cmp	r6, #3
    ee2c:	ldr	ip, [pc, #212]	; ef08 <rb_base64_encode+0x110>
    ee30:	add	ip, pc, ip
    ee34:	mov	r1, r0
    ee38:	blt	ee98 <rb_base64_encode+0xa0>
    ee3c:	ldrb	r3, [r4]
    ee40:	ldrb	r2, [ip, r3, lsr #2]
    ee44:	strb	r2, [r1]
    ee48:	and	lr, r3, #3
    ee4c:	ldrb	r3, [r4, #1]
    ee50:	lsr	r2, r3, #4
    ee54:	orr	r2, r2, lr, lsl #4
    ee58:	ldrb	r2, [ip, r2]
    ee5c:	strb	r2, [r1, #1]
    ee60:	ldrb	r2, [r4, #2]
    ee64:	and	r5, r2, #63	; 0x3f
    ee68:	ldrb	r5, [ip, r5]
    ee6c:	strb	r5, [r1, #3]
    ee70:	and	r3, r3, #15
    ee74:	lsr	r2, r2, #6
    ee78:	orr	r2, r2, r3, lsl #2
    ee7c:	ldrb	r2, [ip, r2]
    ee80:	strb	r2, [r1, #2]
    ee84:	add	r1, r1, #4
    ee88:	add	r4, r4, #3
    ee8c:	sub	r6, r6, #3
    ee90:	cmp	r6, #2
    ee94:	bgt	ee3c <rb_base64_encode+0x44>
    ee98:	cmp	r6, #0
    ee9c:	beq	eefc <rb_base64_encode+0x104>
    eea0:	ldrb	r2, [r4]
    eea4:	ldrb	r3, [ip, r2, lsr #2]
    eea8:	strb	r3, [r1]
    eeac:	mov	r3, #48	; 0x30
    eeb0:	and	r3, r3, r2, lsl #4
    eeb4:	cmp	r6, #2
    eeb8:	blt	eee0 <rb_base64_encode+0xe8>
    eebc:	ldrb	r2, [r4, #1]
    eec0:	and	r6, r2, #15
    eec4:	ldrb	r6, [ip, r6, lsl #2]
    eec8:	strb	r6, [r1, #2]
    eecc:	orr	r2, r3, r2, lsr #4
    eed0:	ldrb	r2, [ip, r2]
    eed4:	b	eeec <rb_base64_encode+0xf4>
    eed8:	mov	r0, #0
    eedc:	pop	{r4, r5, r6, sl, fp, pc}
    eee0:	mov	r2, #61	; 0x3d
    eee4:	strb	r2, [r1, #2]
    eee8:	ldrb	r2, [ip, r3]
    eeec:	strb	r2, [r1, #1]
    eef0:	mov	r2, #61	; 0x3d
    eef4:	strb	r2, [r1, #3]
    eef8:	add	r1, r1, #4
    eefc:	mov	r2, #0
    ef00:	strb	r2, [r1]
    ef04:	pop	{r4, r5, r6, sl, fp, pc}
    ef08:	.word	0x000074b5

0000ef0c <rb_malloc>:
    ef0c:	push	{fp, lr}
    ef10:	mov	fp, sp
    ef14:	mov	r1, r0
    ef18:	mov	r0, #1
    ef1c:	bl	4f1c <calloc@plt>
    ef20:	cmp	r0, #0
    ef24:	popne	{fp, pc}
    ef28:	bl	52a0 <rb_outofmemory@plt>

0000ef2c <rb_base64_decode>:
    ef2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    ef30:	add	fp, sp, #24
    ef34:	mov	r8, r2
    ef38:	mov	r5, r1
    ef3c:	mov	r6, r0
    ef40:	add	r0, r1, #1
    ef44:	bl	ef0c <rb_malloc>
    ef48:	mov	ip, #0
    ef4c:	ldr	r3, [pc, #260]	; f058 <rb_base64_decode+0x12c>
    ef50:	add	r3, pc, r3
    ef54:	mov	r1, #0
    ef58:	ldrb	r4, [r6], #1
    ef5c:	cmp	r4, #0
    ef60:	beq	f048 <rb_base64_decode+0x11c>
    ef64:	subs	r5, r5, #1
    ef68:	blt	f008 <rb_base64_decode+0xdc>
    ef6c:	cmp	r4, #61	; 0x3d
    ef70:	beq	f008 <rb_base64_decode+0xdc>
    ef74:	add	r7, r3, r4, lsl #1
    ef78:	ldrsh	r4, [r7]
    ef7c:	cmp	r4, #0
    ef80:	bmi	ef58 <rb_base64_decode+0x2c>
    ef84:	and	r7, ip, #3
    ef88:	add	r2, pc, #4
    ef8c:	ldr	r7, [r2, r7, lsl #2]
    ef90:	add	pc, r2, r7
    ef94:	.word	0x00000010
    ef98:	.word	0x00000020
    ef9c:	.word	0x00000038
    efa0:	.word	0x0000005c
    efa4:	lsl	r2, r4, #2
    efa8:	strb	r2, [r0, r1]
    efac:	add	ip, ip, #1
    efb0:	b	ef58 <rb_base64_decode+0x2c>
    efb4:	add	r2, r1, #1
    efb8:	lsl	r7, r4, #4
    efbc:	strb	r7, [r0, r2]
    efc0:	ldrb	r7, [r0, r1]
    efc4:	orr	r7, r7, r4, lsr #4
    efc8:	b	efe0 <rb_base64_decode+0xb4>
    efcc:	add	r2, r1, #1
    efd0:	lsl	r7, r4, #6
    efd4:	strb	r7, [r0, r2]
    efd8:	ldrb	r7, [r0, r1]
    efdc:	orr	r7, r7, r4, lsr #2
    efe0:	strb	r7, [r0, r1]
    efe4:	add	ip, ip, #1
    efe8:	mov	r1, r2
    efec:	b	ef58 <rb_base64_decode+0x2c>
    eff0:	ldrb	r2, [r0, r1]
    eff4:	orr	r2, r2, r4
    eff8:	strb	r2, [r0, r1]
    effc:	add	r1, r1, #1
    f000:	add	ip, ip, #1
    f004:	b	ef58 <rb_base64_decode+0x2c>
    f008:	cmp	r4, #61	; 0x3d
    f00c:	bne	f048 <rb_base64_decode+0x11c>
    f010:	and	r2, ip, #3
    f014:	cmp	r2, #3
    f018:	mov	r3, r1
    f01c:	beq	f040 <rb_base64_decode+0x114>
    f020:	cmp	r2, #2
    f024:	beq	f03c <rb_base64_decode+0x110>
    f028:	cmp	r2, #1
    f02c:	bne	f048 <rb_base64_decode+0x11c>
    f030:	bl	500c <free@plt>
    f034:	mov	r0, #0
    f038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f03c:	add	r3, r1, #1
    f040:	mov	r2, #0
    f044:	strb	r2, [r0, r3]
    f048:	mov	r2, #0
    f04c:	strb	r2, [r0, r1]
    f050:	str	r1, [r8]
    f054:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f058:	.word	0x000074ae

0000f05c <rb_outofmemory>:
    f05c:	push	{fp, lr}
    f060:	mov	fp, sp
    f064:	ldr	r0, [pc, #48]	; f09c <rb_outofmemory+0x40>
    f068:	add	r0, pc, r0
    f06c:	ldrb	r1, [r0]
    f070:	cmp	r1, #1
    f074:	bne	f07c <rb_outofmemory+0x20>
    f078:	bl	4d0c <abort@plt>
    f07c:	mov	r1, #1
    f080:	strb	r1, [r0]
    f084:	ldr	r0, [pc, #20]	; f0a0 <rb_outofmemory+0x44>
    f088:	add	r0, pc, r0
    f08c:	bl	5240 <rb_lib_log@plt>
    f090:	ldr	r0, [pc, #12]	; f0a4 <rb_outofmemory+0x48>
    f094:	add	r0, pc, r0
    f098:	bl	5378 <rb_lib_restart@plt>
    f09c:	.word	0x0002c274
    f0a0:	.word	0x00007576
    f0a4:	.word	0x0000758e

0000f0a8 <rb_linebuf_init>:
    f0a8:	push	{fp, lr}
    f0ac:	mov	fp, sp
    f0b0:	mov	r1, r0
    f0b4:	ldr	r2, [pc, #24]	; f0d4 <rb_linebuf_init+0x2c>
    f0b8:	add	r2, pc, r2
    f0bc:	movw	r0, #1036	; 0x40c
    f0c0:	bl	53cc <rb_bh_create@plt>
    f0c4:	ldr	r1, [pc, #12]	; f0d8 <rb_linebuf_init+0x30>
    f0c8:	add	r1, pc, r1
    f0cc:	str	r0, [r1]
    f0d0:	pop	{fp, pc}
    f0d4:	.word	0x00007578
    f0d8:	.word	0x0002c218

0000f0dc <rb_linebuf_newbuf>:
    f0dc:	vmov.i32	q8, #0	; 0x00000000
    f0e0:	mov	r1, #12
    f0e4:	vst1.32	{d16-d17}, [r0], r1
    f0e8:	vst1.32	{d16-d17}, [r0]
    f0ec:	bx	lr

0000f0f0 <rb_linebuf_donebuf>:
    f0f0:	push	{r4, sl, fp, lr}
    f0f4:	add	fp, sp, #8
    f0f8:	ldr	r2, [r0]
    f0fc:	cmp	r2, #0
    f100:	popeq	{r4, sl, fp, pc}
    f104:	mov	r4, r0
    f108:	ldr	r1, [r2]
    f10c:	mov	r0, r4
    f110:	bl	f124 <rb_linebuf_done_line>
    f114:	ldr	r2, [r4]
    f118:	cmp	r2, #0
    f11c:	bne	f108 <rb_linebuf_donebuf+0x18>
    f120:	pop	{r4, sl, fp, pc}

0000f124 <rb_linebuf_done_line>:
    f124:	push	{r4, r5, r6, sl, fp, lr}
    f128:	add	fp, sp, #16
    f12c:	mov	r5, r2
    f130:	mov	r4, r1
    f134:	mov	r6, r0
    f138:	mov	r0, r2
    f13c:	mov	r1, r6
    f140:	bl	f9d0 <rb_dlinkDelete>
    f144:	mov	r0, r5
    f148:	bl	515c <rb_free_rb_dlink_node@plt>
    f14c:	ldr	r0, [r6, #12]
    f150:	ldr	r1, [r6, #16]
    f154:	ldr	r2, [r6, #24]
    f158:	sub	r1, r1, #1
    f15c:	str	r1, [r6, #16]
    f160:	ldr	r1, [r4, #1028]	; 0x404
    f164:	sub	r2, r2, #1
    f168:	str	r2, [r6, #24]
    f16c:	sub	r0, r0, r1
    f170:	str	r0, [r6, #12]
    f174:	ldr	r0, [r4, #1032]	; 0x408
    f178:	subs	r0, r0, #1
    f17c:	str	r0, [r4, #1032]	; 0x408
    f180:	popne	{r4, r5, r6, sl, fp, pc}
    f184:	ldr	r0, [pc, #28]	; f1a8 <rb_linebuf_done_line+0x84>
    f188:	ldr	r0, [pc, r0]
    f18c:	sub	r0, r0, #1
    f190:	ldr	r1, [pc, #20]	; f1ac <rb_linebuf_done_line+0x88>
    f194:	add	r1, pc, r1
    f198:	str	r0, [r1]
    f19c:	mov	r0, r4
    f1a0:	pop	{r4, r5, r6, sl, fp, lr}
    f1a4:	b	fa18 <rb_linebuf_free>
    f1a8:	.word	0x0002e160
    f1ac:	.word	0x0002e154

0000f1b0 <rb_linebuf_parse>:
    f1b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    f1b4:	add	fp, sp, #24
    f1b8:	mov	r8, r3
    f1bc:	mov	r5, r2
    f1c0:	mov	r6, r1
    f1c4:	mov	r7, r0
    f1c8:	ldr	r0, [r0, #4]
    f1cc:	cmp	r0, #0
    f1d0:	beq	f1fc <rb_linebuf_parse+0x4c>
    f1d4:	ldr	r1, [r0]
    f1d8:	mov	r0, r7
    f1dc:	mov	r2, r6
    f1e0:	mov	r3, r5
    f1e4:	cmp	r8, #0
    f1e8:	beq	f20c <rb_linebuf_parse+0x5c>
    f1ec:	bl	f41c <rb_linebuf_copy_raw>
    f1f0:	cmn	r0, #1
    f1f4:	bne	f218 <rb_linebuf_parse+0x68>
    f1f8:	b	f290 <rb_linebuf_parse+0xe0>
    f1fc:	mov	r4, #0
    f200:	cmp	r5, #1
    f204:	bge	f238 <rb_linebuf_parse+0x88>
    f208:	b	f288 <rb_linebuf_parse+0xd8>
    f20c:	bl	f29c <rb_linebuf_copy_line>
    f210:	cmn	r0, #1
    f214:	beq	f290 <rb_linebuf_parse+0xe0>
    f218:	mov	r4, #1
    f21c:	cmp	r0, r5
    f220:	beq	f288 <rb_linebuf_parse+0xd8>
    f224:	add	r6, r6, r0
    f228:	sub	r5, r5, r0
    f22c:	mov	r4, #1
    f230:	cmp	r5, #1
    f234:	blt	f288 <rb_linebuf_parse+0xd8>
    f238:	mov	r0, r7
    f23c:	bl	f52c <rb_linebuf_new_line>
    f240:	mov	r1, r0
    f244:	mov	r0, r7
    f248:	mov	r2, r6
    f24c:	mov	r3, r5
    f250:	cmp	r8, #0
    f254:	beq	f268 <rb_linebuf_parse+0xb8>
    f258:	bl	f41c <rb_linebuf_copy_raw>
    f25c:	cmn	r0, #1
    f260:	bne	f274 <rb_linebuf_parse+0xc4>
    f264:	b	f290 <rb_linebuf_parse+0xe0>
    f268:	bl	f29c <rb_linebuf_copy_line>
    f26c:	cmn	r0, #1
    f270:	beq	f290 <rb_linebuf_parse+0xe0>
    f274:	add	r6, r6, r0
    f278:	sub	r5, r5, r0
    f27c:	add	r4, r4, #1
    f280:	cmp	r5, #0
    f284:	bgt	f238 <rb_linebuf_parse+0x88>
    f288:	mov	r0, r4
    f28c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f290:	mvn	r4, #0
    f294:	mov	r0, r4
    f298:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000f29c <rb_linebuf_copy_line>:
    f29c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2a0:	add	fp, sp, #28
    f2a4:	sub	sp, sp, #4
    f2a8:	mov	r8, r0
    f2ac:	mov	r4, #0
    f2b0:	strb	r4, [r1, #1026]	; 0x402
    f2b4:	ldrb	r0, [r1, #1025]	; 0x401
    f2b8:	cmp	r0, #1
    f2bc:	beq	f410 <rb_linebuf_copy_line+0x174>
    f2c0:	mov	r7, r2
    f2c4:	mov	r5, r1
    f2c8:	ldr	sl, [r1, #1028]	; 0x404
    f2cc:	mov	r0, r2
    f2d0:	mov	r1, r3
    f2d4:	bl	fa2c <rb_linebuf_skip_crlf>
    f2d8:	cmn	r0, #1
    f2dc:	beq	f364 <rb_linebuf_copy_line+0xc8>
    f2e0:	mov	r4, r0
    f2e4:	add	r9, r5, sl
    f2e8:	movw	r0, #1022	; 0x3fe
    f2ec:	sub	r6, r0, sl
    f2f0:	cmp	r4, r6
    f2f4:	ble	f36c <rb_linebuf_copy_line+0xd0>
    f2f8:	mov	r0, r9
    f2fc:	mov	r1, r7
    f300:	mov	r2, r6
    f304:	bl	5120 <memcpy@plt>
    f308:	mov	r0, #0
    f30c:	strb	r0, [r5, #1022]	; 0x3fe
    f310:	cmp	r6, #0
    f314:	beq	f344 <rb_linebuf_copy_line+0xa8>
    f318:	movw	r1, #1022	; 0x3fe
    f31c:	sub	r1, sl, r1
    f320:	movw	r2, #1021	; 0x3fd
    f324:	add	r2, r5, r2
    f328:	ldrb	r3, [r2]
    f32c:	cmp	r3, #13
    f330:	cmpne	r3, #10
    f334:	bne	f344 <rb_linebuf_copy_line+0xa8>
    f338:	strb	r0, [r2], #-1
    f33c:	adds	r1, r1, #1
    f340:	bcc	f328 <rb_linebuf_copy_line+0x8c>
    f344:	movw	r0, #1022	; 0x3fe
    f348:	str	r0, [r5, #1028]	; 0x404
    f34c:	mov	r1, #1
    f350:	strb	r1, [r5, #1025]	; 0x401
    f354:	ldr	r1, [r8, #12]
    f358:	add	r0, r1, r0
    f35c:	str	r0, [r8, #12]
    f360:	b	f410 <rb_linebuf_copy_line+0x174>
    f364:	mvn	r4, #0
    f368:	b	f410 <rb_linebuf_copy_line+0x174>
    f36c:	mov	r0, r9
    f370:	mov	r1, r7
    f374:	mov	r2, r4
    f378:	bl	5120 <memcpy@plt>
    f37c:	mov	r0, #0
    f380:	mov	r1, r9
    f384:	strb	r0, [r1, r4]!
    f388:	ldrb	r1, [r1, #-1]
    f38c:	cmp	r1, #10
    f390:	cmpne	r1, #13
    f394:	bne	f3cc <rb_linebuf_copy_line+0x130>
    f398:	cmp	r4, #0
    f39c:	beq	f3f0 <rb_linebuf_copy_line+0x154>
    f3a0:	sub	r2, r9, #1
    f3a4:	mov	r1, r4
    f3a8:	ldrb	r0, [r2, r1]
    f3ac:	cmp	r0, #13
    f3b0:	cmpne	r0, #10
    f3b4:	bne	f3ec <rb_linebuf_copy_line+0x150>
    f3b8:	mov	r0, #0
    f3bc:	strb	r0, [r2, r1]
    f3c0:	subs	r1, r1, #1
    f3c4:	bne	f3a8 <rb_linebuf_copy_line+0x10c>
    f3c8:	b	f3f0 <rb_linebuf_copy_line+0x154>
    f3cc:	ldr	r0, [r8, #12]
    f3d0:	add	r0, r0, r4
    f3d4:	str	r0, [r8, #12]
    f3d8:	mov	r0, #0
    f3dc:	strb	r0, [r5, #1025]	; 0x401
    f3e0:	ldr	r0, [r5, #1028]	; 0x404
    f3e4:	add	r0, r0, r4
    f3e8:	b	f40c <rb_linebuf_copy_line+0x170>
    f3ec:	mov	r0, r1
    f3f0:	mov	r1, #1
    f3f4:	strb	r1, [r5, #1025]	; 0x401
    f3f8:	ldr	r1, [r8, #12]
    f3fc:	add	r1, r1, r0
    f400:	str	r1, [r8, #12]
    f404:	ldr	r1, [r5, #1028]	; 0x404
    f408:	add	r0, r1, r0
    f40c:	str	r0, [r5, #1028]	; 0x404
    f410:	mov	r0, r4
    f414:	sub	sp, fp, #28
    f418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f41c <rb_linebuf_copy_raw>:
    f41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f420:	add	fp, sp, #28
    f424:	sub	sp, sp, #4
    f428:	mov	r8, r0
    f42c:	mov	r0, #1
    f430:	strb	r0, [r1, #1026]	; 0x402
    f434:	ldrb	r0, [r1, #1025]	; 0x401
    f438:	mov	r6, #0
    f43c:	cmp	r0, #1
    f440:	beq	f520 <rb_linebuf_copy_raw+0x104>
    f444:	mov	r7, r2
    f448:	mov	r4, r1
    f44c:	ldr	r5, [r1, #1028]	; 0x404
    f450:	mov	r0, r2
    f454:	mov	r1, r3
    f458:	bl	fa2c <rb_linebuf_skip_crlf>
    f45c:	cmn	r0, #1
    f460:	beq	f4b8 <rb_linebuf_copy_raw+0x9c>
    f464:	mov	r6, r0
    f468:	add	sl, r4, r5
    f46c:	movw	r0, #1022	; 0x3fe
    f470:	sub	r9, r0, r5
    f474:	cmp	r6, r9
    f478:	ble	f4c0 <rb_linebuf_copy_raw+0xa4>
    f47c:	movw	r5, #1022	; 0x3fe
    f480:	mov	r0, sl
    f484:	mov	r1, r7
    f488:	mov	r2, r9
    f48c:	bl	5120 <memcpy@plt>
    f490:	str	r5, [r4, #1028]	; 0x404
    f494:	mov	r0, #1
    f498:	strb	r0, [r4, #1025]	; 0x401
    f49c:	mov	r0, #0
    f4a0:	strb	r0, [r4, #1022]	; 0x3fe
    f4a4:	ldr	r0, [r8, #12]
    f4a8:	add	r0, r0, r5
    f4ac:	str	r0, [r8, #12]
    f4b0:	mov	r6, r9
    f4b4:	b	f520 <rb_linebuf_copy_raw+0x104>
    f4b8:	mvn	r6, #0
    f4bc:	b	f520 <rb_linebuf_copy_raw+0x104>
    f4c0:	mov	r0, sl
    f4c4:	mov	r1, r7
    f4c8:	mov	r2, r6
    f4cc:	bl	5120 <memcpy@plt>
    f4d0:	mov	r0, #0
    f4d4:	strb	r0, [sl, r6]!
    f4d8:	ldrb	r0, [sl, #-1]
    f4dc:	cmp	r0, #10
    f4e0:	cmpne	r0, #13
    f4e4:	bne	f500 <rb_linebuf_copy_raw+0xe4>
    f4e8:	mov	r0, #1
    f4ec:	strb	r0, [r4, #1025]	; 0x401
    f4f0:	ldr	r0, [r8, #12]
    f4f4:	add	r0, r0, r6
    f4f8:	str	r0, [r8, #12]
    f4fc:	b	f514 <rb_linebuf_copy_raw+0xf8>
    f500:	ldr	r0, [r8, #12]
    f504:	add	r0, r0, r6
    f508:	str	r0, [r8, #12]
    f50c:	mov	r0, #0
    f510:	strb	r0, [r4, #1025]	; 0x401
    f514:	ldr	r0, [r4, #1028]	; 0x404
    f518:	add	r0, r0, r6
    f51c:	str	r0, [r4, #1028]	; 0x404
    f520:	mov	r0, r6
    f524:	sub	sp, fp, #28
    f528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f52c <rb_linebuf_new_line>:
    f52c:	push	{r4, r5, fp, lr}
    f530:	add	fp, sp, #8
    f534:	mov	r4, r0
    f538:	bl	faa8 <rb_linebuf_allocate>
    f53c:	mov	r5, r0
    f540:	cmp	r0, #0
    f544:	beq	f598 <rb_linebuf_new_line+0x6c>
    f548:	ldr	r0, [pc, #80]	; f5a0 <rb_linebuf_new_line+0x74>
    f54c:	ldr	r0, [pc, r0]
    f550:	add	r0, r0, #1
    f554:	ldr	r1, [pc, #72]	; f5a4 <rb_linebuf_new_line+0x78>
    f558:	add	r1, pc, r1
    f55c:	str	r0, [r1]
    f560:	bl	5498 <rb_make_rb_dlink_node@plt>
    f564:	mov	r1, r0
    f568:	mov	r0, r5
    f56c:	mov	r2, r4
    f570:	bl	f724 <rb_dlinkAddTail>
    f574:	ldr	r0, [r5, #1032]	; 0x408
    f578:	add	r0, r0, #1
    f57c:	str	r0, [r5, #1032]	; 0x408
    f580:	ldr	r0, [r4, #16]
    f584:	ldr	r1, [r4, #24]
    f588:	add	r0, r0, #1
    f58c:	str	r0, [r4, #16]
    f590:	add	r0, r1, #1
    f594:	str	r0, [r4, #24]
    f598:	mov	r0, r5
    f59c:	pop	{r4, r5, fp, pc}
    f5a0:	.word	0x0002dd9c
    f5a4:	.word	0x0002dd90

0000f5a8 <rb_linebuf_get>:
    f5a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f5ac:	add	fp, sp, #24
    f5b0:	mov	r4, r0
    f5b4:	ldr	r0, [r0]
    f5b8:	mov	r7, #0
    f5bc:	cmp	r0, #0
    f5c0:	beq	f668 <rb_linebuf_get+0xc0>
    f5c4:	mov	r9, r1
    f5c8:	ldr	r6, [r0]
    f5cc:	cmp	r3, #0
    f5d0:	bne	f5e0 <rb_linebuf_get+0x38>
    f5d4:	ldrb	r0, [r6, #1025]	; 0x401
    f5d8:	cmp	r0, #0
    f5dc:	beq	f668 <rb_linebuf_get+0xc0>
    f5e0:	ldr	r8, [fp, #8]
    f5e4:	ldr	r3, [r6, #1028]	; 0x404
    f5e8:	cmp	r3, r2
    f5ec:	subgt	r3, r2, #1
    f5f0:	cmp	r8, #0
    f5f4:	bne	f638 <rb_linebuf_get+0x90>
    f5f8:	ldrb	r0, [r6, #1026]	; 0x402
    f5fc:	cmp	r0, #0
    f600:	beq	f638 <rb_linebuf_get+0x90>
    f604:	mov	r7, #0
    f608:	cmp	r3, #0
    f60c:	beq	f63c <rb_linebuf_get+0x94>
    f610:	rsb	r0, r3, #0
    f614:	mov	r1, r6
    f618:	ldrb	r2, [r1]
    f61c:	cmp	r2, #13
    f620:	cmpne	r2, #10
    f624:	bne	f670 <rb_linebuf_get+0xc8>
    f628:	adds	r0, r0, #1
    f62c:	add	r1, r1, #1
    f630:	bcc	f618 <rb_linebuf_get+0x70>
    f634:	b	f640 <rb_linebuf_get+0x98>
    f638:	mov	r7, r3
    f63c:	mov	r1, r6
    f640:	mov	r0, r9
    f644:	mov	r2, r7
    f648:	bl	5120 <memcpy@plt>
    f64c:	cmp	r8, #0
    f650:	moveq	r0, #0
    f654:	strbeq	r0, [r9, r7]
    f658:	ldr	r2, [r4]
    f65c:	mov	r0, r4
    f660:	mov	r1, r6
    f664:	bl	f124 <rb_linebuf_done_line>
    f668:	mov	r0, r7
    f66c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    f670:	add	r2, r3, r6
    f674:	sub	r2, r2, #1
    f678:	add	r3, r0, #1
    f67c:	mov	r7, #0
    f680:	ldrb	r5, [r2, r7]
    f684:	cmp	r5, #13
    f688:	cmpne	r5, #10
    f68c:	bne	f6a8 <rb_linebuf_get+0x100>
    f690:	sub	r5, r7, #1
    f694:	cmp	r3, r7
    f698:	mov	r7, r5
    f69c:	bne	f680 <rb_linebuf_get+0xd8>
    f6a0:	mov	r7, #0
    f6a4:	b	f640 <rb_linebuf_get+0x98>
    f6a8:	sub	r7, r7, r0
    f6ac:	b	f640 <rb_linebuf_get+0x98>

0000f6b0 <rb_linebuf_attach>:
    f6b0:	push	{r4, r5, r6, sl, fp, lr}
    f6b4:	add	fp, sp, #16
    f6b8:	ldr	r6, [r1]
    f6bc:	cmp	r6, #0
    f6c0:	beq	f720 <rb_linebuf_attach+0x70>
    f6c4:	mov	r4, r0
    f6c8:	ldr	r5, [r6]
    f6cc:	bl	5498 <rb_make_rb_dlink_node@plt>
    f6d0:	mov	r1, r0
    f6d4:	mov	r0, r5
    f6d8:	mov	r2, r4
    f6dc:	bl	f724 <rb_dlinkAddTail>
    f6e0:	ldr	r0, [r4, #12]
    f6e4:	ldr	r1, [r4, #16]
    f6e8:	ldr	r2, [r4, #24]
    f6ec:	add	r1, r1, #1
    f6f0:	str	r1, [r4, #16]
    f6f4:	ldr	r1, [r5, #1028]	; 0x404
    f6f8:	add	r2, r2, #1
    f6fc:	str	r2, [r4, #24]
    f700:	add	r0, r0, r1
    f704:	str	r0, [r4, #12]
    f708:	ldr	r0, [r5, #1032]	; 0x408
    f70c:	add	r0, r0, #1
    f710:	str	r0, [r5, #1032]	; 0x408
    f714:	ldr	r6, [r6, #8]
    f718:	cmp	r6, #0
    f71c:	bne	f6c8 <rb_linebuf_attach+0x18>
    f720:	pop	{r4, r5, r6, sl, fp, pc}

0000f724 <rb_dlinkAddTail>:
    f724:	mov	r3, #0
    f728:	str	r3, [r1, #8]
    f72c:	str	r0, [r1]
    f730:	ldr	r0, [r2, #4]
    f734:	str	r0, [r1, #4]
    f738:	ldr	r0, [r2, #4]
    f73c:	cmp	r0, #0
    f740:	beq	f750 <rb_dlinkAddTail+0x2c>
    f744:	add	r0, r0, #8
    f748:	str	r1, [r0]
    f74c:	b	f75c <rb_dlinkAddTail+0x38>
    f750:	ldr	r0, [r2]
    f754:	cmp	r0, #0
    f758:	beq	f770 <rb_dlinkAddTail+0x4c>
    f75c:	str	r1, [r2, #4]
    f760:	ldr	r0, [r2, #8]
    f764:	add	r0, r0, #1
    f768:	str	r0, [r2, #8]
    f76c:	bx	lr
    f770:	mov	r0, r2
    f774:	b	f748 <rb_dlinkAddTail+0x24>

0000f778 <rb_linebuf_put>:
    f778:	push	{r4, r5, r6, sl, fp, lr}
    f77c:	add	fp, sp, #16
    f780:	mov	r4, r1
    f784:	mov	r5, r0
    f788:	bl	f52c <rb_linebuf_new_line>
    f78c:	mov	r6, r0
    f790:	movw	r1, #1023	; 0x3ff
    f794:	mov	r2, r4
    f798:	bl	4fc4 <rb_fsnprint@plt>
    f79c:	bic	r0, r0, r0, asr #31
    f7a0:	movw	r1, #1022	; 0x3fe
    f7a4:	cmp	r0, r1
    f7a8:	movcc	r1, r0
    f7ac:	add	r0, r1, #2
    f7b0:	mov	r2, #0
    f7b4:	strb	r2, [r6, r0]
    f7b8:	add	r1, r6, r1
    f7bc:	movw	r2, #2573	; 0xa0d
    f7c0:	strh	r2, [r1]
    f7c4:	mov	r1, #1
    f7c8:	strb	r1, [r6, #1025]	; 0x401
    f7cc:	str	r0, [r6, #1028]	; 0x404
    f7d0:	ldr	r1, [r5, #12]
    f7d4:	add	r0, r1, r0
    f7d8:	str	r0, [r5, #12]
    f7dc:	pop	{r4, r5, r6, sl, fp, pc}

0000f7e0 <rb_linebuf_flush>:
    f7e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7e4:	add	fp, sp, #28
    f7e8:	sub	sp, sp, #4
    f7ec:	mov	sl, r1
    f7f0:	mov	r5, r0
    f7f4:	bl	4df0 <rb_fd_ssl@plt>
    f7f8:	cmp	r0, #0
    f7fc:	beq	f874 <rb_linebuf_flush+0x94>
    f800:	ldr	r0, [sl]
    f804:	cmp	r0, #0
    f808:	beq	f968 <rb_linebuf_flush+0x188>
    f80c:	ldr	r6, [r0]
    f810:	ldrb	r0, [r6, #1025]	; 0x401
    f814:	cmp	r0, #0
    f818:	beq	f968 <rb_linebuf_flush+0x188>
    f81c:	ldr	r0, [sl, #20]
    f820:	add	r1, r6, r0
    f824:	ldr	r2, [r6, #1028]	; 0x404
    f828:	sub	r2, r2, r0
    f82c:	mov	r0, r5
    f830:	bl	4f88 <rb_write@plt>
    f834:	mov	r9, r0
    f838:	cmp	r0, #1
    f83c:	blt	f978 <rb_linebuf_flush+0x198>
    f840:	ldr	r0, [sl, #20]
    f844:	add	r0, r0, r9
    f848:	str	r0, [sl, #20]
    f84c:	ldr	r1, [r6, #1028]	; 0x404
    f850:	cmp	r0, r1
    f854:	bne	f978 <rb_linebuf_flush+0x198>
    f858:	mov	r0, #0
    f85c:	str	r0, [sl, #20]
    f860:	ldr	r2, [sl]
    f864:	mov	r0, sl
    f868:	mov	r1, r6
    f86c:	bl	f124 <rb_linebuf_done_line>
    f870:	b	f978 <rb_linebuf_flush+0x198>
    f874:	ldr	r6, [pc, #276]	; f990 <rb_linebuf_flush+0x1b0>
    f878:	add	r6, pc, r6
    f87c:	mov	r0, r6
    f880:	mov	r1, #0
    f884:	mov	r2, #8192	; 0x2000
    f888:	bl	4f58 <memset@plt>
    f88c:	ldr	r0, [sl]
    f890:	cmp	r0, #0
    f894:	beq	f968 <rb_linebuf_flush+0x188>
    f898:	ldr	r1, [r0]
    f89c:	ldrb	r2, [r1, #1025]	; 0x401
    f8a0:	cmp	r2, #0
    f8a4:	beq	f968 <rb_linebuf_flush+0x188>
    f8a8:	ldr	r2, [sl, #20]
    f8ac:	add	r4, r1, r2
    f8b0:	ldr	r1, [r1, #1028]	; 0x404
    f8b4:	sub	r1, r1, r2
    f8b8:	str	r4, [r6]
    f8bc:	str	r1, [r6, #4]
    f8c0:	add	r1, r6, #8
    f8c4:	mov	r6, #1
    f8c8:	ldr	r0, [r0, #8]
    f8cc:	cmp	r0, #0
    f8d0:	ldrne	r2, [r0]
    f8d4:	ldrbne	r3, [r2, #1025]	; 0x401
    f8d8:	cmpne	r3, #0
    f8dc:	beq	f900 <rb_linebuf_flush+0x120>
    f8e0:	str	r2, [r1]
    f8e4:	ldr	r2, [r2, #1028]	; 0x404
    f8e8:	str	r2, [r1, #4]
    f8ec:	add	r1, r1, #8
    f8f0:	add	r6, r6, #1
    f8f4:	cmp	r6, #1024	; 0x400
    f8f8:	bne	f8c8 <rb_linebuf_flush+0xe8>
    f8fc:	mov	r6, #1024	; 0x400
    f900:	ldr	r1, [pc, #140]	; f994 <rb_linebuf_flush+0x1b4>
    f904:	add	r1, pc, r1
    f908:	mov	r0, r5
    f90c:	mov	r2, r6
    f910:	bl	53f0 <rb_writev@plt>
    f914:	mov	r9, r0
    f918:	cmp	r0, #1
    f91c:	blt	f978 <rb_linebuf_flush+0x198>
    f920:	ldr	r7, [sl]
    f924:	mov	r8, #0
    f928:	mov	r5, r9
    f92c:	ldr	r0, [sl, #20]
    f930:	ldr	r1, [r7]
    f934:	ldr	r2, [r1, #1028]	; 0x404
    f938:	sub	r4, r2, r0
    f93c:	cmp	r5, r4
    f940:	blt	f984 <rb_linebuf_flush+0x1a4>
    f944:	ldr	r7, [r7, #8]
    f948:	ldr	r2, [sl]
    f94c:	mov	r0, sl
    f950:	bl	f124 <rb_linebuf_done_line>
    f954:	str	r8, [sl, #20]
    f958:	sub	r5, r5, r4
    f95c:	subs	r6, r6, #1
    f960:	bne	f92c <rb_linebuf_flush+0x14c>
    f964:	b	f978 <rb_linebuf_flush+0x198>
    f968:	bl	560c <__errno_location@plt>
    f96c:	mov	r1, #11
    f970:	str	r1, [r0]
    f974:	mvn	r9, #0
    f978:	mov	r0, r9
    f97c:	sub	sp, fp, #28
    f980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f984:	add	r0, r0, r5
    f988:	str	r0, [sl, #20]
    f98c:	b	f978 <rb_linebuf_flush+0x198>
    f990:	.word	0x0002ba70
    f994:	.word	0x0002b9e4

0000f998 <rb_count_rb_linebuf_memory>:
    f998:	push	{fp, lr}
    f99c:	mov	fp, sp
    f9a0:	sub	sp, sp, #8
    f9a4:	mov	r3, r1
    f9a8:	mov	r1, r0
    f9ac:	ldr	r0, [pc, #24]	; f9cc <rb_count_rb_linebuf_memory+0x34>
    f9b0:	ldr	r0, [pc, r0]
    f9b4:	mov	r2, #0
    f9b8:	str	r2, [sp]
    f9bc:	mov	r2, #0
    f9c0:	bl	5630 <rb_bh_usage@plt>
    f9c4:	mov	sp, fp
    f9c8:	pop	{fp, pc}
    f9cc:	.word	0x0002b930

0000f9d0 <rb_dlinkDelete>:
    f9d0:	ldr	ip, [r0, #4]
    f9d4:	ldr	r3, [r0, #8]
    f9d8:	add	r2, r3, #4
    f9dc:	cmp	r3, #0
    f9e0:	addeq	r2, r1, #4
    f9e4:	str	ip, [r2]
    f9e8:	ldmib	r0, {r2, ip}
    f9ec:	cmp	r2, #0
    f9f0:	mov	r3, r1
    f9f4:	addne	r3, r2, #8
    f9f8:	str	ip, [r3]
    f9fc:	mov	r2, #0
    fa00:	str	r2, [r0, #4]
    fa04:	str	r2, [r0, #8]
    fa08:	ldr	r0, [r1, #8]
    fa0c:	sub	r0, r0, #1
    fa10:	str	r0, [r1, #8]
    fa14:	bx	lr

0000fa18 <rb_linebuf_free>:
    fa18:	mov	r1, r0
    fa1c:	ldr	r0, [pc, #4]	; fa28 <rb_linebuf_free+0x10>
    fa20:	ldr	r0, [pc, r0]
    fa24:	b	51f8 <rb_bh_free@plt>
    fa28:	.word	0x0002b8c0

0000fa2c <rb_linebuf_skip_crlf>:
    fa2c:	push	{fp, lr}
    fa30:	mov	fp, sp
    fa34:	mov	ip, #0
    fa38:	cmp	r1, #0
    fa3c:	beq	fa60 <rb_linebuf_skip_crlf+0x34>
    fa40:	rsb	r2, r1, #0
    fa44:	ldrb	r3, [r0]
    fa48:	cmp	r3, #13
    fa4c:	cmpne	r3, #10
    fa50:	beq	fa68 <rb_linebuf_skip_crlf+0x3c>
    fa54:	adds	r2, r2, #1
    fa58:	add	r0, r0, #1
    fa5c:	bcc	fa44 <rb_linebuf_skip_crlf+0x18>
    fa60:	sub	r0, r1, ip
    fa64:	pop	{fp, pc}
    fa68:	add	ip, r2, #1
    fa6c:	mov	r3, #0
    fa70:	ldrb	lr, [r0, -r3]
    fa74:	cmp	lr, #13
    fa78:	cmpne	lr, #10
    fa7c:	bne	fa9c <rb_linebuf_skip_crlf+0x70>
    fa80:	sub	lr, r3, #1
    fa84:	cmp	ip, r3
    fa88:	mov	r3, lr
    fa8c:	bne	fa70 <rb_linebuf_skip_crlf+0x44>
    fa90:	mov	ip, #0
    fa94:	sub	r0, r1, ip
    fa98:	pop	{fp, pc}
    fa9c:	sub	ip, r3, r2
    faa0:	sub	r0, r1, ip
    faa4:	pop	{fp, pc}

0000faa8 <rb_linebuf_allocate>:
    faa8:	ldr	r0, [pc, #4]	; fab4 <rb_linebuf_allocate+0xc>
    faac:	ldr	r0, [pc, r0]
    fab0:	b	5270 <rb_bh_alloc@plt>
    fab4:	.word	0x0002b834

0000fab8 <rb_init_rb_dlink_nodes>:
    fab8:	push	{fp, lr}
    fabc:	mov	fp, sp
    fac0:	mov	r1, r0
    fac4:	ldr	r2, [pc, #32]	; faec <rb_init_rb_dlink_nodes+0x34>
    fac8:	add	r2, pc, r2
    facc:	mov	r0, #12
    fad0:	bl	53cc <rb_bh_create@plt>
    fad4:	ldr	r1, [pc, #20]	; faf0 <rb_init_rb_dlink_nodes+0x38>
    fad8:	add	r1, pc, r1
    fadc:	str	r0, [r1]
    fae0:	cmp	r0, #0
    fae4:	popne	{fp, pc}
    fae8:	bl	52a0 <rb_outofmemory@plt>
    faec:	.word	0x00006b7b
    faf0:	.word	0x0002d814

0000faf4 <rb_make_rb_dlink_node>:
    faf4:	ldr	r0, [pc, #4]	; fb00 <rb_make_rb_dlink_node+0xc>
    faf8:	ldr	r0, [pc, r0]
    fafc:	b	5270 <rb_bh_alloc@plt>
    fb00:	.word	0x0002d7f4

0000fb04 <rb_free_rb_dlink_node>:
    fb04:	mov	r1, r0
    fb08:	ldr	r0, [pc, #4]	; fb14 <rb_free_rb_dlink_node+0x10>
    fb0c:	ldr	r0, [pc, r0]
    fb10:	b	51f8 <rb_bh_free@plt>
    fb14:	.word	0x0002d7e0

0000fb18 <rb_string_to_array>:
    fb18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fb1c:	add	fp, sp, #24
    fb20:	mov	r4, r1
    fb24:	mov	r1, r0
    fb28:	mov	r0, #0
    fb2c:	cmp	r1, #0
    fb30:	beq	fbe0 <rb_string_to_array+0xc8>
    fb34:	ldrb	r3, [r1]
    fb38:	cmp	r3, #0
    fb3c:	beq	fbe0 <rb_string_to_array+0xc8>
    fb40:	uxtb	r3, r3
    fb44:	cmp	r3, #32
    fb48:	bne	fb54 <rb_string_to_array+0x3c>
    fb4c:	ldrb	r3, [r1, #1]!
    fb50:	b	fb40 <rb_string_to_array+0x28>
    fb54:	cmp	r3, #0
    fb58:	beq	fbe0 <rb_string_to_array+0xc8>
    fb5c:	sub	r6, r2, #1
    fb60:	ldrb	r7, [r1]
    fb64:	mov	r8, #0
    fb68:	mov	r0, #0
    fb6c:	mov	r5, r0
    fb70:	uxtb	r0, r7
    fb74:	cmp	r0, #58	; 0x3a
    fb78:	beq	fbe4 <rb_string_to_array+0xcc>
    fb7c:	str	r1, [r4, r5, lsl #2]
    fb80:	mov	r0, r1
    fb84:	mov	r1, #32
    fb88:	bl	4eec <strchr@plt>
    fb8c:	mov	r2, r0
    fb90:	add	r0, r5, #1
    fb94:	cmp	r2, #0
    fb98:	beq	fbe0 <rb_string_to_array+0xc8>
    fb9c:	mov	r3, r2
    fba0:	strb	r8, [r3], #1
    fba4:	mov	r1, r3
    fba8:	ldrb	r7, [r1]
    fbac:	cmp	r7, #32
    fbb0:	bne	fbbc <rb_string_to_array+0xa4>
    fbb4:	add	r1, r1, #1
    fbb8:	b	fba8 <rb_string_to_array+0x90>
    fbbc:	cmp	r7, #0
    fbc0:	beq	fbe0 <rb_string_to_array+0xc8>
    fbc4:	cmp	r0, r6
    fbc8:	blt	fb6c <rb_string_to_array+0x54>
    fbcc:	ldrb	r1, [r2, #1]
    fbd0:	cmp	r1, #58	; 0x3a
    fbd4:	addeq	r3, r2, #2
    fbd8:	str	r3, [r4, r0, lsl #2]
    fbdc:	add	r0, r5, #2
    fbe0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    fbe4:	add	r0, r1, #1
    fbe8:	str	r0, [r4, r5, lsl #2]
    fbec:	add	r0, r5, #1
    fbf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000fbf4 <rb_strcasecmp>:
    fbf4:	b	4f04 <strcasecmp@plt>

0000fbf8 <rb_strncasecmp>:
    fbf8:	b	5294 <strncasecmp@plt>

0000fbfc <rb_strcasestr>:
    fbfc:	b	4d60 <strcasestr@plt>

0000fc00 <rb_strlcat>:
    fc00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fc04:	add	fp, sp, #24
    fc08:	mov	r4, r2
    fc0c:	mov	r8, r1
    fc10:	mov	r9, r0
    fc14:	bl	50fc <strlen@plt>
    fc18:	mov	r7, r0
    fc1c:	sub	r6, r4, r0
    fc20:	mov	r0, r8
    fc24:	bl	50fc <strlen@plt>
    fc28:	mov	r5, r0
    fc2c:	cmp	r0, r6
    fc30:	mov	r4, r0
    fc34:	subcs	r4, r6, #1
    fc38:	add	r6, r9, r7
    fc3c:	mov	r0, r6
    fc40:	mov	r1, r8
    fc44:	mov	r2, r4
    fc48:	bl	5120 <memcpy@plt>
    fc4c:	mov	r0, #0
    fc50:	strb	r0, [r6, r4]
    fc54:	add	r0, r5, r7
    fc58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000fc5c <rb_strlcpy>:
    fc5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fc60:	add	fp, sp, #24
    fc64:	mov	r7, r2
    fc68:	mov	r6, r1
    fc6c:	mov	r8, r0
    fc70:	mov	r0, r1
    fc74:	bl	50fc <strlen@plt>
    fc78:	mov	r4, r0
    fc7c:	cmp	r7, #0
    fc80:	beq	fca8 <rb_strlcpy+0x4c>
    fc84:	cmp	r4, r7
    fc88:	mov	r5, r4
    fc8c:	subcs	r5, r7, #1
    fc90:	mov	r0, r8
    fc94:	mov	r1, r6
    fc98:	mov	r2, r5
    fc9c:	bl	5120 <memcpy@plt>
    fca0:	mov	r0, #0
    fca4:	strb	r0, [r8, r5]
    fca8:	mov	r0, r4
    fcac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000fcb0 <rb_strnlen>:
    fcb0:	b	5330 <strnlen@plt>

0000fcb4 <rb_snprintf_append>:
    fcb4:	sub	sp, sp, #4
    fcb8:	push	{r4, r5, r6, r7, fp, lr}
    fcbc:	add	fp, sp, #16
    fcc0:	sub	sp, sp, #4
    fcc4:	str	r3, [fp, #8]
    fcc8:	cmp	r1, #0
    fccc:	beq	fcf8 <rb_snprintf_append+0x44>
    fcd0:	mov	r4, r2
    fcd4:	mov	r6, r1
    fcd8:	mov	r5, r0
    fcdc:	bl	50fc <strlen@plt>
    fce0:	cmp	r0, r6
    fce4:	ble	fd00 <rb_snprintf_append+0x4c>
    fce8:	sub	r0, r6, #1
    fcec:	mov	r1, #0
    fcf0:	strb	r1, [r5, r0]
    fcf4:	b	fd24 <rb_snprintf_append+0x70>
    fcf8:	mvn	r0, #0
    fcfc:	b	fd24 <rb_snprintf_append+0x70>
    fd00:	mov	r7, r0
    fd04:	add	r3, fp, #8
    fd08:	str	r3, [sp]
    fd0c:	add	r0, r5, r0
    fd10:	sub	r1, r6, r7
    fd14:	mov	r2, r4
    fd18:	bl	4e98 <vsnprintf@plt>
    fd1c:	cmp	r0, #0
    fd20:	addpl	r0, r0, r7
    fd24:	sub	sp, fp, #16
    fd28:	pop	{r4, r5, r6, r7, fp, lr}
    fd2c:	add	sp, sp, #4
    fd30:	bx	lr

0000fd34 <rb_snprintf_try_append>:
    fd34:	sub	sp, sp, #4
    fd38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fd3c:	add	fp, sp, #24
    fd40:	sub	sp, sp, #4
    fd44:	str	r3, [fp, #8]
    fd48:	mvn	r4, #0
    fd4c:	cmp	r1, #0
    fd50:	beq	fdc0 <rb_snprintf_try_append+0x8c>
    fd54:	mov	r9, r2
    fd58:	mov	r5, r1
    fd5c:	mov	r6, r0
    fd60:	bl	50fc <strlen@plt>
    fd64:	cmp	r0, r5
    fd68:	ble	fd7c <rb_snprintf_try_append+0x48>
    fd6c:	add	r0, r5, r6
    fd70:	mov	r1, #0
    fd74:	strb	r1, [r0, #-1]
    fd78:	b	fdc0 <rb_snprintf_try_append+0x8c>
    fd7c:	mov	r7, r0
    fd80:	add	r3, fp, #8
    fd84:	str	r3, [sp]
    fd88:	add	r8, r6, r0
    fd8c:	sub	r1, r5, r0
    fd90:	mov	r0, r8
    fd94:	mov	r2, r9
    fd98:	bl	4e98 <vsnprintf@plt>
    fd9c:	mov	r4, r0
    fda0:	cmp	r0, #0
    fda4:	bmi	fdc0 <rb_snprintf_try_append+0x8c>
    fda8:	add	r4, r4, r7
    fdac:	sub	r0, r5, #1
    fdb0:	cmp	r4, r0
    fdb4:	movgt	r0, #0
    fdb8:	strbgt	r0, [r8]
    fdbc:	mvngt	r4, #0
    fdc0:	mov	r0, r4
    fdc4:	sub	sp, fp, #24
    fdc8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    fdcc:	add	sp, sp, #4
    fdd0:	bx	lr

0000fdd4 <rb_basename>:
    fdd4:	push	{r4, sl, fp, lr}
    fdd8:	add	fp, sp, #8
    fddc:	mov	r4, r0
    fde0:	mov	r1, #47	; 0x2f
    fde4:	bl	4f7c <strrchr@plt>
    fde8:	cmp	r0, #0
    fdec:	addne	r4, r0, #1
    fdf0:	mov	r0, r4
    fdf4:	pop	{r4, sl, fp, lr}
    fdf8:	b	fdfc <rb_strdup>

0000fdfc <rb_strdup>:
    fdfc:	push	{r4, sl, fp, lr}
    fe00:	add	fp, sp, #8
    fe04:	mov	r4, r0
    fe08:	bl	50fc <strlen@plt>
    fe0c:	add	r0, r0, #1
    fe10:	bl	52c4 <malloc@plt>
    fe14:	cmp	r0, #0
    fe18:	beq	fe28 <rb_strdup+0x2c>
    fe1c:	mov	r1, r4
    fe20:	pop	{r4, sl, fp, lr}
    fe24:	b	51b0 <strcpy@plt>
    fe28:	bl	52a0 <rb_outofmemory@plt>

0000fe2c <rb_dirname>:
    fe2c:	push	{r4, sl, fp, lr}
    fe30:	add	fp, sp, #8
    fe34:	mov	r4, r0
    fe38:	mov	r1, #47	; 0x2f
    fe3c:	bl	4f7c <strrchr@plt>
    fe40:	cmp	r0, #0
    fe44:	beq	fe7c <rb_dirname+0x50>
    fe48:	cmp	r0, r4
    fe4c:	bls	fe68 <rb_dirname+0x3c>
    fe50:	ldrb	r1, [r0]
    fe54:	cmp	r1, #47	; 0x2f
    fe58:	bne	fe68 <rb_dirname+0x3c>
    fe5c:	sub	r0, r0, #1
    fe60:	cmp	r0, r4
    fe64:	bhi	fe50 <rb_dirname+0x24>
    fe68:	sub	r0, r0, r4
    fe6c:	add	r1, r0, #2
    fe70:	mov	r0, r4
    fe74:	pop	{r4, sl, fp, lr}
    fe78:	b	fe90 <rb_strndup>
    fe7c:	ldr	r0, [pc, #8]	; fe8c <rb_dirname+0x60>
    fe80:	add	r0, pc, r0
    fe84:	pop	{r4, sl, fp, lr}
    fe88:	b	fdfc <rb_strdup>
    fe8c:	.word	0x000067a0

0000fe90 <rb_strndup>:
    fe90:	push	{r4, r5, r6, sl, fp, lr}
    fe94:	add	fp, sp, #16
    fe98:	mov	r4, r1
    fe9c:	mov	r5, r0
    fea0:	mov	r0, r1
    fea4:	bl	52c4 <malloc@plt>
    fea8:	cmp	r0, #0
    feac:	beq	fec8 <rb_strndup+0x38>
    feb0:	mov	r6, r0
    feb4:	mov	r1, r5
    feb8:	mov	r2, r4
    febc:	bl	4fd0 <rb_strlcpy@plt>
    fec0:	mov	r0, r6
    fec4:	pop	{r4, r5, r6, sl, fp, pc}
    fec8:	bl	52a0 <rb_outofmemory@plt>

0000fecc <rb_fsnprint>:
    fecc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fed0:	add	fp, sp, #24
    fed4:	cmp	r2, #0
    fed8:	beq	ffbc <rb_fsnprint+0xf0>
    fedc:	mov	r4, r2
    fee0:	mov	r8, r1
    fee4:	mov	r9, r0
    fee8:	sub	r5, r1, #1
    feec:	mov	r6, #0
    fef0:	ldr	r7, [r4]
    fef4:	cmp	r7, #0
    fef8:	beq	ff08 <rb_fsnprint+0x3c>
    fefc:	sub	r1, r8, r6
    ff00:	cmp	r7, r1
    ff04:	bls	ff14 <rb_fsnprint+0x48>
    ff08:	cmp	r1, #0
    ff0c:	mov	r7, r1
    ff10:	beq	ffcc <rb_fsnprint+0x100>
    ff14:	ldr	r2, [r4, #4]
    ff18:	cmp	r2, #0
    ff1c:	beq	ff48 <rb_fsnprint+0x7c>
    ff20:	add	r0, r9, r6
    ff24:	ldr	r1, [r4, #12]
    ff28:	cmp	r1, #0
    ff2c:	beq	ff70 <rb_fsnprint+0xa4>
    ff30:	ldr	r3, [r1]
    ff34:	mov	r1, r7
    ff38:	bl	4e98 <vsnprintf@plt>
    ff3c:	cmp	r0, #0
    ff40:	bpl	ff8c <rb_fsnprint+0xc0>
    ff44:	b	ffb8 <rb_fsnprint+0xec>
    ff48:	ldr	r3, [r4, #8]
    ff4c:	cmp	r3, #0
    ff50:	beq	ff88 <rb_fsnprint+0xbc>
    ff54:	add	r0, r9, r6
    ff58:	ldr	r2, [r4, #12]
    ff5c:	mov	r1, r7
    ff60:	blx	r3
    ff64:	cmp	r0, #0
    ff68:	bpl	ff8c <rb_fsnprint+0xc0>
    ff6c:	b	ffb8 <rb_fsnprint+0xec>
    ff70:	mov	r1, r2
    ff74:	mov	r2, r7
    ff78:	bl	4fd0 <rb_strlcpy@plt>
    ff7c:	cmp	r0, #0
    ff80:	bpl	ff8c <rb_fsnprint+0xc0>
    ff84:	b	ffb8 <rb_fsnprint+0xec>
    ff88:	mov	r0, #0
    ff8c:	sub	r1, r7, #1
    ff90:	cmp	r0, r1
    ff94:	movls	r1, r0
    ff98:	add	r6, r1, r6
    ff9c:	cmp	r6, r5
    ffa0:	bcs	ffc4 <rb_fsnprint+0xf8>
    ffa4:	sub	r1, r7, r0
    ffa8:	ldr	r4, [r4, #16]
    ffac:	cmp	r4, #0
    ffb0:	mov	r0, r6
    ffb4:	bne	fef0 <rb_fsnprint+0x24>
    ffb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    ffbc:	mov	r0, #0
    ffc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    ffc4:	mov	r0, r5
    ffc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    ffcc:	mov	r0, r6
    ffd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000ffd4 <rb_fsnprintf>:
    ffd4:	push	{fp, lr}
    ffd8:	mov	fp, sp
    ffdc:	sub	sp, sp, #24
    ffe0:	add	ip, fp, #8
    ffe4:	str	ip, [fp, #-4]
    ffe8:	str	r2, [sp, #16]
    ffec:	sub	r2, fp, #4
    fff0:	str	r2, [sp, #12]
    fff4:	mov	r2, #0
    fff8:	str	r2, [sp, #8]
    fffc:	stm	sp, {r2, r3}
   10000:	mov	r2, sp
   10004:	bl	4fc4 <rb_fsnprint@plt>
   10008:	mov	sp, fp
   1000c:	pop	{fp, pc}

00010010 <rb_helper_child>:
   10010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10014:	add	fp, sp, #28
   10018:	sub	sp, sp, #28
   1001c:	mov	r9, r3
   10020:	str	r2, [sp, #24]
   10024:	mov	r8, r1
   10028:	mov	r4, r0
   1002c:	ldr	r0, [pc, #468]	; 10208 <rb_helper_child+0x1f8>
   10030:	add	r0, pc, r0
   10034:	bl	4ed4 <getenv@plt>
   10038:	mov	r7, r0
   1003c:	ldr	r0, [pc, #456]	; 1020c <rb_helper_child+0x1fc>
   10040:	add	r0, pc, r0
   10044:	bl	4ed4 <getenv@plt>
   10048:	mov	r5, r0
   1004c:	ldr	r0, [pc, #444]	; 10210 <rb_helper_child+0x200>
   10050:	add	r0, pc, r0
   10054:	bl	4ed4 <getenv@plt>
   10058:	mov	sl, #0
   1005c:	cmp	r7, #0
   10060:	beq	101fc <rb_helper_child+0x1ec>
   10064:	cmp	r5, #0
   10068:	movne	r6, r0
   1006c:	cmpne	r0, #0
   10070:	beq	101fc <rb_helper_child+0x1ec>
   10074:	str	r4, [sp, #16]
   10078:	str	r8, [sp, #20]
   1007c:	bl	10220 <rb_malloc>
   10080:	mov	sl, r0
   10084:	mov	r4, #0
   10088:	mov	r0, r7
   1008c:	mov	r1, #0
   10090:	mov	r2, #10
   10094:	bl	5198 <strtol@plt>
   10098:	mov	r7, r0
   1009c:	mov	r0, r5
   100a0:	mov	r1, #0
   100a4:	mov	r2, #10
   100a8:	bl	5198 <strtol@plt>
   100ac:	mov	r5, r0
   100b0:	mov	r0, r6
   100b4:	mov	r1, #0
   100b8:	mov	r2, #10
   100bc:	bl	5198 <strtol@plt>
   100c0:	mov	r8, r0
   100c4:	cmp	r0, #1
   100c8:	bge	100dc <rb_helper_child+0xcc>
   100cc:	b	100f4 <rb_helper_child+0xe4>
   100d0:	add	r4, r4, #1
   100d4:	cmp	r8, r4
   100d8:	beq	100f4 <rb_helper_child+0xe4>
   100dc:	cmp	r7, r4
   100e0:	cmpne	r5, r4
   100e4:	beq	100d0 <rb_helper_child+0xc0>
   100e8:	mov	r0, r4
   100ec:	bl	5264 <close@plt>
   100f0:	b	100d0 <rb_helper_child+0xc0>
   100f4:	str	r9, [sp, #12]
   100f8:	ldr	r0, [pc, #276]	; 10214 <rb_helper_child+0x204>
   100fc:	add	r0, pc, r0
   10100:	mov	r1, #2
   10104:	bl	4cc4 <open@plt>
   10108:	mov	r9, r0
   1010c:	cmp	r7, #0
   10110:	cmpne	r5, #0
   10114:	beq	10124 <rb_helper_child+0x114>
   10118:	mov	r0, r9
   1011c:	mov	r1, #0
   10120:	bl	53d8 <dup2@plt>
   10124:	cmp	r7, #1
   10128:	cmpne	r5, #1
   1012c:	beq	1013c <rb_helper_child+0x12c>
   10130:	mov	r0, r9
   10134:	mov	r1, #1
   10138:	bl	53d8 <dup2@plt>
   1013c:	cmp	r7, #2
   10140:	cmpne	r5, #2
   10144:	beq	10154 <rb_helper_child+0x144>
   10148:	mov	r0, r9
   1014c:	mov	r1, #2
   10150:	bl	53d8 <dup2@plt>
   10154:	ldr	r4, [fp, #20]
   10158:	ldr	r6, [fp, #16]
   1015c:	ldr	r2, [fp, #8]
   10160:	cmp	r9, #3
   10164:	blt	10178 <rb_helper_child+0x168>
   10168:	mov	r0, r9
   1016c:	mov	r9, r2
   10170:	bl	5264 <close@plt>
   10174:	mov	r2, r9
   10178:	str	r8, [sp]
   1017c:	str	r6, [sp, #4]
   10180:	str	r4, [sp, #8]
   10184:	ldr	r0, [sp, #24]
   10188:	ldr	r1, [sp, #12]
   1018c:	mov	r3, #0
   10190:	bl	5354 <rb_lib_init@plt>
   10194:	ldr	r0, [fp, #12]
   10198:	bl	5468 <rb_linebuf_init@plt>
   1019c:	add	r0, sl, #4
   101a0:	bl	5408 <rb_linebuf_newbuf@plt>
   101a4:	add	r0, sl, #32
   101a8:	bl	5408 <rb_linebuf_newbuf@plt>
   101ac:	ldr	r2, [pc, #100]	; 10218 <rb_helper_child+0x208>
   101b0:	add	r2, pc, r2
   101b4:	mov	r0, r7
   101b8:	mov	r1, #8
   101bc:	bl	539c <rb_open@plt>
   101c0:	str	r0, [sl, #60]	; 0x3c
   101c4:	ldr	r2, [pc, #80]	; 1021c <rb_helper_child+0x20c>
   101c8:	add	r2, pc, r2
   101cc:	mov	r0, r5
   101d0:	mov	r1, #8
   101d4:	bl	539c <rb_open@plt>
   101d8:	str	r0, [sl, #64]	; 0x40
   101dc:	ldr	r0, [sl, #60]	; 0x3c
   101e0:	bl	4f4c <rb_set_nb@plt>
   101e4:	ldr	r0, [sl, #64]	; 0x40
   101e8:	bl	4f4c <rb_set_nb@plt>
   101ec:	ldr	r0, [sp, #16]
   101f0:	str	r0, [sl, #76]	; 0x4c
   101f4:	ldr	r0, [sp, #20]
   101f8:	str	r0, [sl, #80]	; 0x50
   101fc:	mov	r0, sl
   10200:	sub	sp, fp, #28
   10204:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10208:	.word	0x00006624
   1020c:	.word	0x00006618
   10210:	.word	0x0000660c
   10214:	.word	0x00006566
   10218:	.word	0x000064bc
   1021c:	.word	0x000064b8

00010220 <rb_malloc>:
   10220:	push	{fp, lr}
   10224:	mov	fp, sp
   10228:	mov	r0, #1
   1022c:	mov	r1, #84	; 0x54
   10230:	bl	4f1c <calloc@plt>
   10234:	cmp	r0, #0
   10238:	popne	{fp, pc}
   1023c:	bl	52a0 <rb_outofmemory@plt>

00010240 <rb_helper_start>:
   10240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10244:	add	fp, sp, #28
   10248:	sub	sp, sp, #196	; 0xc4
   1024c:	mov	r7, r3
   10250:	mov	r5, r2
   10254:	mov	r9, r1
   10258:	mov	sl, r0
   1025c:	mov	r0, r1
   10260:	mov	r1, #1
   10264:	bl	5054 <access@plt>
   10268:	mov	r4, #0
   1026c:	cmn	r0, #1
   10270:	beq	10444 <rb_helper_start+0x204>
   10274:	bl	10220 <rb_malloc>
   10278:	mov	r8, r0
   1027c:	add	r6, sp, #60	; 0x3c
   10280:	ldr	r2, [pc, #456]	; 10450 <rb_helper_start+0x210>
   10284:	add	r2, pc, r2
   10288:	mov	r0, r6
   1028c:	mov	r1, #128	; 0x80
   10290:	mov	r3, sl
   10294:	bl	54c8 <snprintf@plt>
   10298:	add	r0, sp, #20
   1029c:	add	r1, r0, #4
   102a0:	mov	r2, r6
   102a4:	bl	5288 <rb_pipe@plt>
   102a8:	cmn	r0, #1
   102ac:	ble	1043c <rb_helper_start+0x1fc>
   102b0:	str	r5, [sp, #8]
   102b4:	str	r7, [sp, #4]
   102b8:	add	r5, sp, #60	; 0x3c
   102bc:	ldr	r2, [pc, #400]	; 10454 <rb_helper_start+0x214>
   102c0:	add	r2, pc, r2
   102c4:	mov	r0, r5
   102c8:	mov	r1, #128	; 0x80
   102cc:	mov	r3, sl
   102d0:	bl	54c8 <snprintf@plt>
   102d4:	add	r0, sp, #12
   102d8:	add	r1, r0, #4
   102dc:	mov	r2, r5
   102e0:	bl	5288 <rb_pipe@plt>
   102e4:	cmn	r0, #1
   102e8:	ble	1043c <rb_helper_start+0x1fc>
   102ec:	ldr	r0, [sp, #24]
   102f0:	bl	4e20 <rb_get_fd@plt>
   102f4:	mov	r3, r0
   102f8:	add	r7, sp, #44	; 0x2c
   102fc:	ldr	r6, [pc, #340]	; 10458 <rb_helper_start+0x218>
   10300:	add	r6, pc, r6
   10304:	mov	r0, r7
   10308:	mov	r1, #16
   1030c:	mov	r2, r6
   10310:	bl	54c8 <snprintf@plt>
   10314:	ldr	r0, [sp, #12]
   10318:	bl	4e20 <rb_get_fd@plt>
   1031c:	mov	r3, r0
   10320:	add	r4, sp, #28
   10324:	mov	r0, r4
   10328:	mov	r1, #16
   1032c:	mov	r2, r6
   10330:	bl	54c8 <snprintf@plt>
   10334:	ldr	r0, [sp, #20]
   10338:	bl	4f4c <rb_set_nb@plt>
   1033c:	ldr	r0, [sp, #24]
   10340:	bl	4f4c <rb_set_nb@plt>
   10344:	ldr	r0, [sp, #12]
   10348:	bl	4f4c <rb_set_nb@plt>
   1034c:	ldr	r0, [sp, #16]
   10350:	bl	4f4c <rb_set_nb@plt>
   10354:	ldr	r0, [pc, #256]	; 1045c <rb_helper_start+0x21c>
   10358:	add	r0, pc, r0
   1035c:	mov	r1, r4
   10360:	mov	r2, #1
   10364:	bl	4e08 <rb_setenv@plt>
   10368:	ldr	r0, [pc, #240]	; 10460 <rb_helper_start+0x220>
   1036c:	add	r0, pc, r0
   10370:	mov	r1, r7
   10374:	mov	r2, #1
   10378:	bl	4e08 <rb_setenv@plt>
   1037c:	ldr	r0, [pc, #224]	; 10464 <rb_helper_start+0x224>
   10380:	add	r0, pc, r0
   10384:	ldr	r1, [pc, #220]	; 10468 <rb_helper_start+0x228>
   10388:	add	r1, pc, r1
   1038c:	mov	r2, #1
   10390:	bl	4e08 <rb_setenv@plt>
   10394:	ldr	r2, [pc, #208]	; 1046c <rb_helper_start+0x22c>
   10398:	add	r2, pc, r2
   1039c:	mov	r0, r5
   103a0:	mov	r1, #128	; 0x80
   103a4:	mov	r3, sl
   103a8:	bl	54c8 <snprintf@plt>
   103ac:	mov	r4, #0
   103b0:	str	r4, [fp, #-32]	; 0xffffffe0
   103b4:	str	r5, [fp, #-36]	; 0xffffffdc
   103b8:	sub	r1, fp, #36	; 0x24
   103bc:	mov	r0, r9
   103c0:	bl	54b0 <rb_spawn_process@plt>
   103c4:	cmn	r0, #1
   103c8:	beq	1041c <rb_helper_start+0x1dc>
   103cc:	mov	r5, r0
   103d0:	ldr	r0, [sp, #24]
   103d4:	bl	518c <rb_close@plt>
   103d8:	ldr	r0, [sp, #12]
   103dc:	bl	518c <rb_close@plt>
   103e0:	add	r0, r8, #4
   103e4:	bl	5408 <rb_linebuf_newbuf@plt>
   103e8:	add	r0, r8, #32
   103ec:	bl	5408 <rb_linebuf_newbuf@plt>
   103f0:	ldr	r0, [sp, #20]
   103f4:	ldr	r1, [sp, #16]
   103f8:	add	r2, r8, #60	; 0x3c
   103fc:	stm	r2, {r0, r1, r5}
   10400:	str	r4, [r8, #72]	; 0x48
   10404:	ldr	r0, [sp, #8]
   10408:	str	r0, [r8, #76]	; 0x4c
   1040c:	ldr	r0, [sp, #4]
   10410:	str	r0, [r8, #80]	; 0x50
   10414:	mov	r4, r8
   10418:	b	10444 <rb_helper_start+0x204>
   1041c:	ldr	r0, [sp, #20]
   10420:	bl	518c <rb_close@plt>
   10424:	ldr	r0, [sp, #24]
   10428:	bl	518c <rb_close@plt>
   1042c:	ldr	r0, [sp, #12]
   10430:	bl	518c <rb_close@plt>
   10434:	ldr	r0, [sp, #16]
   10438:	bl	518c <rb_close@plt>
   1043c:	mov	r0, r8
   10440:	bl	10470 <rb_free>
   10444:	mov	r0, r4
   10448:	sub	sp, fp, #28
   1044c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10450:	.word	0x00006410
   10454:	.word	0x000063e5
   10458:	.word	0x00005709
   1045c:	.word	0x000062fc
   10460:	.word	0x000062ec
   10464:	.word	0x000062dc
   10468:	.word	0x0000632f
   1046c:	.word	0x00006323

00010470 <rb_free>:
   10470:	cmp	r0, #0
   10474:	bxeq	lr
   10478:	b	500c <free@plt>

0001047c <rb_helper_restart>:
   1047c:	ldr	r1, [r0, #80]	; 0x50
   10480:	bx	r1

00010484 <rb_helper_write_queue>:
   10484:	sub	sp, sp, #8
   10488:	push	{fp, lr}
   1048c:	mov	fp, sp
   10490:	sub	sp, sp, #24
   10494:	str	r2, [fp, #8]
   10498:	str	r3, [fp, #12]
   1049c:	add	r2, fp, #8
   104a0:	str	r2, [fp, #-4]
   104a4:	mov	r2, #0
   104a8:	str	r2, [sp, #16]
   104ac:	sub	r3, fp, #4
   104b0:	stmib	sp, {r1, r2, r3}
   104b4:	str	r2, [sp]
   104b8:	add	r0, r0, #4
   104bc:	mov	r1, sp
   104c0:	bl	5504 <rb_linebuf_put@plt>
   104c4:	mov	sp, fp
   104c8:	pop	{fp, lr}
   104cc:	add	sp, sp, #8
   104d0:	bx	lr

000104d4 <rb_helper_write_flush>:
   104d4:	mov	r1, r0
   104d8:	ldr	r0, [r0, #64]	; 0x40
   104dc:	b	104e0 <rb_helper_write_sendq>

000104e0 <rb_helper_write_sendq>:
   104e0:	push	{r4, r5, r6, sl, fp, lr}
   104e4:	add	fp, sp, #16
   104e8:	mov	r5, r0
   104ec:	ldr	r0, [r1, #16]
   104f0:	cmp	r0, #1
   104f4:	blt	10554 <rb_helper_write_sendq+0x74>
   104f8:	mov	r4, r1
   104fc:	add	r6, r1, #4
   10500:	mov	r0, r5
   10504:	mov	r1, r6
   10508:	bl	50e4 <rb_linebuf_flush@plt>
   1050c:	cmp	r0, #0
   10510:	bgt	10500 <rb_helper_write_sendq+0x20>
   10514:	beq	10558 <rb_helper_write_sendq+0x78>
   10518:	bl	560c <__errno_location@plt>
   1051c:	ldr	r0, [r0]
   10520:	bl	4d24 <rb_ignore_errno@plt>
   10524:	cmp	r0, #0
   10528:	beq	10558 <rb_helper_write_sendq+0x78>
   1052c:	ldr	r0, [r4, #16]
   10530:	cmp	r0, #1
   10534:	blt	10554 <rb_helper_write_sendq+0x74>
   10538:	ldr	r0, [r4, #64]	; 0x40
   1053c:	ldr	r2, [pc, #32]	; 10564 <rb_helper_write_sendq+0x84>
   10540:	add	r2, pc, r2
   10544:	mov	r1, #2
   10548:	mov	r3, r4
   1054c:	pop	{r4, r5, r6, sl, fp, lr}
   10550:	b	4de4 <rb_setselect@plt>
   10554:	pop	{r4, r5, r6, sl, fp, pc}
   10558:	mov	r0, r4
   1055c:	pop	{r4, r5, r6, sl, fp, lr}
   10560:	b	1047c <rb_helper_restart>
   10564:	.word	0xffffff98

00010568 <rb_helper_write>:
   10568:	sub	sp, sp, #8
   1056c:	push	{r4, sl, fp, lr}
   10570:	add	fp, sp, #8
   10574:	sub	sp, sp, #24
   10578:	mov	r4, r0
   1057c:	str	r2, [fp, #8]
   10580:	str	r3, [fp, #12]
   10584:	add	r0, fp, #8
   10588:	str	r0, [fp, #-12]
   1058c:	mov	r0, #0
   10590:	str	r0, [sp, #16]
   10594:	sub	r2, fp, #12
   10598:	str	r2, [sp, #12]
   1059c:	str	r0, [sp, #8]
   105a0:	stm	sp, {r0, r1}
   105a4:	add	r0, r4, #4
   105a8:	mov	r1, sp
   105ac:	bl	5504 <rb_linebuf_put@plt>
   105b0:	mov	r0, r4
   105b4:	bl	104d4 <rb_helper_write_flush>
   105b8:	sub	sp, fp, #8
   105bc:	pop	{r4, sl, fp, lr}
   105c0:	add	sp, sp, #8
   105c4:	bx	lr

000105c8 <rb_helper_run>:
   105c8:	cmp	r0, #0
   105cc:	bxeq	lr
   105d0:	mov	r1, r0
   105d4:	ldr	r0, [r0, #60]	; 0x3c
   105d8:	b	105dc <rb_helper_read_cb>

000105dc <rb_helper_read_cb>:
   105dc:	push	{r4, r5, r6, sl, fp, lr}
   105e0:	add	fp, sp, #16
   105e4:	cmp	r1, #0
   105e8:	beq	1068c <rb_helper_read_cb+0xb0>
   105ec:	mov	r4, r1
   105f0:	ldr	r0, [r1, #60]	; 0x3c
   105f4:	ldr	r1, [pc, #160]	; 1069c <rb_helper_read_cb+0xc0>
   105f8:	add	r1, pc, r1
   105fc:	mov	r2, #32768	; 0x8000
   10600:	bl	509c <rb_read@plt>
   10604:	mov	r2, r0
   10608:	cmp	r0, #1
   1060c:	blt	10654 <rb_helper_read_cb+0x78>
   10610:	add	r5, r4, #32
   10614:	ldr	r6, [pc, #132]	; 106a0 <rb_helper_read_cb+0xc4>
   10618:	add	r6, pc, r6
   1061c:	mov	r0, r5
   10620:	mov	r1, r6
   10624:	mov	r3, #0
   10628:	bl	4fac <rb_linebuf_parse@plt>
   1062c:	ldr	r1, [r4, #76]	; 0x4c
   10630:	mov	r0, r4
   10634:	blx	r1
   10638:	ldr	r0, [r4, #60]	; 0x3c
   1063c:	mov	r1, r6
   10640:	mov	r2, #32768	; 0x8000
   10644:	bl	509c <rb_read@plt>
   10648:	mov	r2, r0
   1064c:	cmp	r0, #0
   10650:	bgt	1061c <rb_helper_read_cb+0x40>
   10654:	cmp	r2, #0
   10658:	beq	10690 <rb_helper_read_cb+0xb4>
   1065c:	bl	560c <__errno_location@plt>
   10660:	ldr	r0, [r0]
   10664:	bl	4d24 <rb_ignore_errno@plt>
   10668:	cmp	r0, #0
   1066c:	beq	10690 <rb_helper_read_cb+0xb4>
   10670:	ldr	r0, [r4, #60]	; 0x3c
   10674:	ldr	r2, [pc, #40]	; 106a4 <rb_helper_read_cb+0xc8>
   10678:	add	r2, pc, r2
   1067c:	mov	r1, #1
   10680:	mov	r3, r4
   10684:	pop	{r4, r5, r6, sl, fp, lr}
   10688:	b	4de4 <rb_setselect@plt>
   1068c:	pop	{r4, r5, r6, sl, fp, pc}
   10690:	mov	r0, r4
   10694:	pop	{r4, r5, r6, sl, fp, lr}
   10698:	b	1047c <rb_helper_restart>
   1069c:	.word	0x0002ccf8
   106a0:	.word	0x0002ccd8
   106a4:	.word	0xffffff5c

000106a8 <rb_helper_close>:
   106a8:	cmp	r0, #0
   106ac:	bxeq	lr
   106b0:	push	{r4, sl, fp, lr}
   106b4:	add	fp, sp, #8
   106b8:	mov	r4, r0
   106bc:	ldr	r0, [r0, #68]	; 0x44
   106c0:	mov	r1, #9
   106c4:	bl	5000 <rb_kill@plt>
   106c8:	ldr	r0, [r4, #60]	; 0x3c
   106cc:	bl	518c <rb_close@plt>
   106d0:	ldr	r0, [r4, #64]	; 0x40
   106d4:	bl	518c <rb_close@plt>
   106d8:	mov	r0, r4
   106dc:	pop	{r4, sl, fp, lr}
   106e0:	b	10470 <rb_free>

000106e4 <rb_helper_read>:
   106e4:	push	{fp, lr}
   106e8:	mov	fp, sp
   106ec:	sub	sp, sp, #8
   106f0:	mov	r3, #0
   106f4:	str	r3, [sp]
   106f8:	add	r0, r0, #32
   106fc:	mov	r3, #0
   10700:	bl	50b4 <rb_linebuf_get@plt>
   10704:	mov	sp, fp
   10708:	pop	{fp, pc}

0001070c <rb_helper_loop>:
   1070c:	push	{fp, lr}
   10710:	mov	fp, sp
   10714:	mov	r4, r1
   10718:	bl	4cac <rb_helper_run@plt>
   1071c:	mov	r0, r4
   10720:	bl	5060 <rb_lib_loop@plt>

00010724 <rb_init_netio_devpoll>:
   10724:	mov	r0, #38	; 0x26
   10728:	bx	lr

0001072c <rb_setselect_devpoll>:
   1072c:	push	{fp, lr}
   10730:	mov	fp, sp
   10734:	bl	560c <__errno_location@plt>
   10738:	mov	r1, #38	; 0x26
   1073c:	str	r1, [r0]
   10740:	pop	{fp, pc}

00010744 <rb_select_devpoll>:
   10744:	push	{fp, lr}
   10748:	mov	fp, sp
   1074c:	bl	560c <__errno_location@plt>
   10750:	mov	r1, #38	; 0x26
   10754:	str	r1, [r0]
   10758:	mvn	r0, #0
   1075c:	pop	{fp, pc}

00010760 <rb_setup_fd_devpoll>:
   10760:	push	{fp, lr}
   10764:	mov	fp, sp
   10768:	bl	560c <__errno_location@plt>
   1076c:	mov	r1, #38	; 0x26
   10770:	str	r1, [r0]
   10774:	mvn	r0, #0
   10778:	pop	{fp, pc}

0001077c <rb_init_netio_epoll>:
   1077c:	push	{r4, sl, fp, lr}
   10780:	add	fp, sp, #8
   10784:	ldr	r0, [pc, #148]	; 10820 <rb_init_netio_epoll+0xa4>
   10788:	add	r0, pc, r0
   1078c:	mov	r4, #0
   10790:	strb	r4, [r0]
   10794:	ldr	r0, [pc, #136]	; 10824 <rb_init_netio_epoll+0xa8>
   10798:	add	r0, pc, r0
   1079c:	str	r4, [r0]
   107a0:	mov	r0, #12
   107a4:	bl	10840 <rb_malloc>
   107a8:	ldr	r1, [pc, #120]	; 10828 <rb_init_netio_epoll+0xac>
   107ac:	add	r1, pc, r1
   107b0:	str	r0, [r1]
   107b4:	bl	4d00 <getdtablesize@plt>
   107b8:	ldr	r1, [pc, #108]	; 1082c <rb_init_netio_epoll+0xb0>
   107bc:	ldr	r1, [pc, r1]
   107c0:	str	r0, [r1, #8]
   107c4:	bl	4e2c <epoll_create@plt>
   107c8:	ldr	r1, [pc, #96]	; 10830 <rb_init_netio_epoll+0xb4>
   107cc:	ldr	r1, [pc, r1]
   107d0:	str	r0, [r1]
   107d4:	cmp	r0, #0
   107d8:	bmi	10814 <rb_init_netio_epoll+0x98>
   107dc:	ldr	r2, [pc, #80]	; 10834 <rb_init_netio_epoll+0xb8>
   107e0:	add	r2, pc, r2
   107e4:	mov	r1, #64	; 0x40
   107e8:	bl	539c <rb_open@plt>
   107ec:	ldr	r0, [pc, #68]	; 10838 <rb_init_netio_epoll+0xbc>
   107f0:	ldr	r0, [pc, r0]
   107f4:	ldr	r0, [r0, #8]
   107f8:	lsl	r0, r0, #4
   107fc:	bl	10840 <rb_malloc>
   10800:	ldr	r1, [pc, #52]	; 1083c <rb_init_netio_epoll+0xc0>
   10804:	ldr	r1, [pc, r1]
   10808:	str	r0, [r1, #4]
   1080c:	mov	r0, r4
   10810:	pop	{r4, sl, fp, pc}
   10814:	mvn	r4, #0
   10818:	mov	r0, r4
   1081c:	pop	{r4, sl, fp, pc}
   10820:	.word	0x00034b6c
   10824:	.word	0x00034b58
   10828:	.word	0x00034b4c
   1082c:	.word	0x00034b3c
   10830:	.word	0x00034b2c
   10834:	.word	0x00005eeb
   10838:	.word	0x00034b08
   1083c:	.word	0x00034af4

00010840 <rb_malloc>:
   10840:	push	{fp, lr}
   10844:	mov	fp, sp
   10848:	mov	r1, r0
   1084c:	mov	r0, #1
   10850:	bl	4f1c <calloc@plt>
   10854:	cmp	r0, #0
   10858:	popne	{fp, pc}
   1085c:	bl	52a0 <rb_outofmemory@plt>

00010860 <rb_setup_fd_epoll>:
   10860:	mov	r0, #0
   10864:	bx	lr

00010868 <rb_setselect_epoll>:
   10868:	push	{fp, lr}
   1086c:	mov	fp, sp
   10870:	sub	sp, sp, #16
   10874:	ldr	ip, [r0, #20]
   10878:	tst	r1, #1
   1087c:	beq	10898 <rb_setselect_epoll+0x30>
   10880:	str	r2, [r0, #28]
   10884:	str	r3, [r0, #32]
   10888:	orr	lr, ip, #1
   1088c:	cmp	r2, #0
   10890:	biceq	lr, ip, #1
   10894:	str	lr, [r0, #20]
   10898:	tst	r1, #2
   1089c:	bne	108cc <rb_setselect_epoll+0x64>
   108a0:	ldr	r3, [r0, #20]
   108a4:	orrs	r1, r3, ip
   108a8:	beq	10934 <rb_setselect_epoll+0xcc>
   108ac:	cmp	r3, #1
   108b0:	blt	108f4 <rb_setselect_epoll+0x8c>
   108b4:	cmp	ip, #0
   108b8:	beq	10904 <rb_setselect_epoll+0x9c>
   108bc:	mov	r1, #3
   108c0:	cmp	r3, ip
   108c4:	bne	10908 <rb_setselect_epoll+0xa0>
   108c8:	b	10934 <rb_setselect_epoll+0xcc>
   108cc:	str	r2, [r0, #36]	; 0x24
   108d0:	str	r3, [r0, #40]	; 0x28
   108d4:	ldr	r1, [r0, #20]
   108d8:	orr	r3, r1, #4
   108dc:	cmp	r2, #0
   108e0:	biceq	r3, r1, #4
   108e4:	str	r3, [r0, #20]
   108e8:	orrs	r1, r3, ip
   108ec:	bne	108ac <rb_setselect_epoll+0x44>
   108f0:	b	10934 <rb_setselect_epoll+0xcc>
   108f4:	str	r0, [sp, #8]
   108f8:	str	r3, [sp]
   108fc:	mov	r1, #2
   10900:	b	10914 <rb_setselect_epoll+0xac>
   10904:	mov	r1, #1
   10908:	str	r0, [sp, #8]
   1090c:	orr	r2, r3, #-2147483648	; 0x80000000
   10910:	str	r2, [sp]
   10914:	ldr	r2, [r0, #12]
   10918:	ldr	r0, [pc, #60]	; 1095c <rb_setselect_epoll+0xf4>
   1091c:	ldr	r0, [pc, r0]
   10920:	ldr	r0, [r0]
   10924:	mov	r3, sp
   10928:	bl	5570 <epoll_ctl@plt>
   1092c:	cmp	r0, #0
   10930:	bne	1093c <rb_setselect_epoll+0xd4>
   10934:	mov	sp, fp
   10938:	pop	{fp, pc}
   1093c:	bl	560c <__errno_location@plt>
   10940:	ldr	r0, [r0]
   10944:	bl	4ce8 <strerror@plt>
   10948:	mov	r1, r0
   1094c:	ldr	r0, [pc, #12]	; 10960 <rb_setselect_epoll+0xf8>
   10950:	add	r0, pc, r0
   10954:	bl	5240 <rb_lib_log@plt>
   10958:	bl	4d0c <abort@plt>
   1095c:	.word	0x000349dc
   10960:	.word	0x00005d91

00010964 <rb_select_epoll>:
   10964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10968:	add	fp, sp, #28
   1096c:	sub	sp, sp, #20
   10970:	mov	r3, r0
   10974:	ldr	r2, [pc, #388]	; 10b00 <rb_select_epoll+0x19c>
   10978:	ldr	r2, [pc, r2]
   1097c:	ldm	r2, {r0, r1, r2}
   10980:	bl	50cc <epoll_wait@plt>
   10984:	mov	r4, r0
   10988:	bl	560c <__errno_location@plt>
   1098c:	mov	sl, r0
   10990:	ldr	r6, [r0]
   10994:	bl	52ac <rb_set_time@plt>
   10998:	str	r6, [sl]
   1099c:	cmn	r4, #1
   109a0:	ble	10ae0 <rb_select_epoll+0x17c>
   109a4:	cmp	r4, #0
   109a8:	beq	10ad4 <rb_select_epoll+0x170>
   109ac:	mov	r6, #0
   109b0:	mov	r9, sp
   109b4:	mov	r5, #0
   109b8:	b	109c8 <rb_select_epoll+0x64>
   109bc:	add	r5, r5, #1
   109c0:	cmp	r4, r5
   109c4:	beq	10ad4 <rb_select_epoll+0x170>
   109c8:	ldr	r0, [pc, #308]	; 10b04 <rb_select_epoll+0x1a0>
   109cc:	ldr	r0, [pc, r0]
   109d0:	ldr	r0, [r0, #4]
   109d4:	ldrb	r1, [r0, r5, lsl #4]!
   109d8:	ldr	r7, [r0, #8]
   109dc:	ldr	r8, [r7, #20]
   109e0:	tst	r1, #25
   109e4:	beq	10a08 <rb_select_epoll+0xa4>
   109e8:	ldr	r2, [r7, #28]
   109ec:	ldr	r1, [r7, #32]
   109f0:	str	r6, [r7, #28]
   109f4:	str	r6, [r7, #32]
   109f8:	cmp	r2, #0
   109fc:	beq	10a08 <rb_select_epoll+0xa4>
   10a00:	mov	r0, r7
   10a04:	blx	r2
   10a08:	ldrb	r0, [r7, #16]
   10a0c:	tst	r0, #1
   10a10:	beq	109bc <rb_select_epoll+0x58>
   10a14:	ldr	r0, [pc, #236]	; 10b08 <rb_select_epoll+0x1a4>
   10a18:	ldr	r0, [pc, r0]
   10a1c:	ldr	r0, [r0, #4]
   10a20:	ldrb	r0, [r0, r5, lsl #4]
   10a24:	tst	r0, #28
   10a28:	beq	10a4c <rb_select_epoll+0xe8>
   10a2c:	ldr	r2, [r7, #36]	; 0x24
   10a30:	ldr	r1, [r7, #40]	; 0x28
   10a34:	str	r6, [r7, #36]	; 0x24
   10a38:	str	r6, [r7, #40]	; 0x28
   10a3c:	cmp	r2, #0
   10a40:	beq	10a4c <rb_select_epoll+0xe8>
   10a44:	mov	r0, r7
   10a48:	blx	r2
   10a4c:	ldrb	r0, [r7, #16]
   10a50:	tst	r0, #1
   10a54:	beq	109bc <rb_select_epoll+0x58>
   10a58:	ldr	r0, [r7, #28]
   10a5c:	ldr	r1, [r7, #36]	; 0x24
   10a60:	cmp	r0, #0
   10a64:	movwne	r0, #1
   10a68:	cmp	r1, #0
   10a6c:	orrne	r0, r0, #4
   10a70:	cmp	r8, r0
   10a74:	beq	109bc <rb_select_epoll+0x58>
   10a78:	str	r0, [sp]
   10a7c:	str	r0, [r7, #20]
   10a80:	str	r7, [sp, #8]
   10a84:	cmp	r0, #0
   10a88:	mov	r1, #3
   10a8c:	movweq	r1, #2
   10a90:	orrne	r0, r0, #-2147483648	; 0x80000000
   10a94:	strne	r0, [sp]
   10a98:	ldr	r2, [r7, #12]
   10a9c:	ldr	r0, [pc, #104]	; 10b0c <rb_select_epoll+0x1a8>
   10aa0:	ldr	r0, [pc, r0]
   10aa4:	ldr	r0, [r0]
   10aa8:	mov	r3, r9
   10aac:	bl	5570 <epoll_ctl@plt>
   10ab0:	cmp	r0, #0
   10ab4:	beq	109bc <rb_select_epoll+0x58>
   10ab8:	ldr	r0, [sl]
   10abc:	bl	4ce8 <strerror@plt>
   10ac0:	mov	r1, r0
   10ac4:	ldr	r0, [pc, #68]	; 10b10 <rb_select_epoll+0x1ac>
   10ac8:	add	r0, pc, r0
   10acc:	bl	5240 <rb_lib_log@plt>
   10ad0:	b	109bc <rb_select_epoll+0x58>
   10ad4:	mov	r0, #0
   10ad8:	sub	sp, fp, #28
   10adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ae0:	mov	r0, r6
   10ae4:	bl	4d24 <rb_ignore_errno@plt>
   10ae8:	mov	r1, r0
   10aec:	mov	r0, #0
   10af0:	cmp	r1, #0
   10af4:	movweq	r0, #5
   10af8:	sub	sp, fp, #28
   10afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b00:	.word	0x00034980
   10b04:	.word	0x0003492c
   10b08:	.word	0x000348e0
   10b0c:	.word	0x00034858
   10b10:	.word	0x00005c44

00010b14 <rb_epoll_supports_event>:
   10b14:	push	{r4, r5, r6, sl, fp, lr}
   10b18:	add	fp, sp, #16
   10b1c:	sub	sp, sp, #288	; 0x120
   10b20:	ldr	r4, [pc, #260]	; 10c2c <rb_epoll_supports_event+0x118>
   10b24:	ldr	r4, [pc, r4]
   10b28:	cmp	r4, #1
   10b2c:	beq	10bc4 <rb_epoll_supports_event+0xb0>
   10b30:	cmn	r4, #1
   10b34:	beq	10bc0 <rb_epoll_supports_event+0xac>
   10b38:	ldr	r0, [pc, #240]	; 10c30 <rb_epoll_supports_event+0x11c>
   10b3c:	add	r0, pc, r0
   10b40:	add	r1, sp, #128	; 0x80
   10b44:	bl	14e40 <__stat>
   10b48:	cmp	r0, #0
   10b4c:	beq	10bb0 <rb_epoll_supports_event+0x9c>
   10b50:	mov	r4, #0
   10b54:	mov	r0, #0
   10b58:	mov	r1, #0
   10b5c:	bl	54e0 <timerfd_create@plt>
   10b60:	cmp	r0, #0
   10b64:	bmi	10b8c <rb_epoll_supports_event+0x78>
   10b68:	bl	5264 <close@plt>
   10b6c:	ldr	r0, [pc, #196]	; 10c38 <rb_epoll_supports_event+0x124>
   10b70:	add	r0, pc, r0
   10b74:	mov	r4, #1
   10b78:	str	r4, [r0]
   10b7c:	ldr	r0, [pc, #184]	; 10c3c <rb_epoll_supports_event+0x128>
   10b80:	add	r0, pc, r0
   10b84:	strb	r4, [r0]
   10b88:	b	10bc4 <rb_epoll_supports_event+0xb0>
   10b8c:	str	r4, [fp, #-76]	; 0xffffffb4
   10b90:	mov	r0, #26
   10b94:	str	r0, [fp, #-80]	; 0xffffffb0
   10b98:	sub	r1, fp, #84	; 0x54
   10b9c:	sub	r2, fp, #20
   10ba0:	mov	r0, #0
   10ba4:	bl	4e68 <timer_create@plt>
   10ba8:	cmp	r0, #0
   10bac:	beq	10bd0 <rb_epoll_supports_event+0xbc>
   10bb0:	ldr	r0, [pc, #124]	; 10c34 <rb_epoll_supports_event+0x120>
   10bb4:	add	r0, pc, r0
   10bb8:	mvn	r1, #0
   10bbc:	str	r1, [r0]
   10bc0:	mov	r4, #0
   10bc4:	mov	r0, r4
   10bc8:	sub	sp, fp, #16
   10bcc:	pop	{r4, r5, r6, sl, fp, pc}
   10bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   10bd4:	bl	5390 <timer_delete@plt>
   10bd8:	mov	r5, sp
   10bdc:	mov	r0, r5
   10be0:	bl	4cdc <sigemptyset@plt>
   10be4:	mvn	r6, #0
   10be8:	mov	r4, #0
   10bec:	mvn	r0, #0
   10bf0:	mov	r1, r5
   10bf4:	mov	r2, #0
   10bf8:	bl	4d84 <signalfd@plt>
   10bfc:	cmn	r0, #1
   10c00:	ble	10c1c <rb_epoll_supports_event+0x108>
   10c04:	bl	5264 <close@plt>
   10c08:	ldr	r0, [pc, #52]	; 10c44 <rb_epoll_supports_event+0x130>
   10c0c:	add	r0, pc, r0
   10c10:	mov	r4, #1
   10c14:	str	r4, [r0]
   10c18:	b	10bc4 <rb_epoll_supports_event+0xb0>
   10c1c:	ldr	r0, [pc, #28]	; 10c40 <rb_epoll_supports_event+0x12c>
   10c20:	add	r0, pc, r0
   10c24:	str	r6, [r0]
   10c28:	b	10bc4 <rb_epoll_supports_event+0xb0>
   10c2c:	.word	0x000347cc
   10c30:	.word	0x00005bf8
   10c34:	.word	0x0003473c
   10c38:	.word	0x00034780
   10c3c:	.word	0x00034774
   10c40:	.word	0x000346d0
   10c44:	.word	0x000346e4

00010c48 <rb_epoll_init_event>:
   10c48:	push	{r4, r5, fp, lr}
   10c4c:	add	fp, sp, #8
   10c50:	sub	sp, sp, #128	; 0x80
   10c54:	bl	10b14 <rb_epoll_supports_event>
   10c58:	ldr	r0, [pc, #172]	; 10d0c <rb_epoll_init_event+0xc4>
   10c5c:	add	r0, pc, r0
   10c60:	ldrb	r0, [r0]
   10c64:	cmp	r0, #0
   10c68:	bne	10cf0 <rb_epoll_init_event+0xa8>
   10c6c:	mov	r4, sp
   10c70:	mov	r0, r4
   10c74:	bl	4cdc <sigemptyset@plt>
   10c78:	bl	4dc0 <__libc_current_sigrtmin@plt>
   10c7c:	mov	r1, r0
   10c80:	mov	r0, r4
   10c84:	bl	51a4 <sigaddset@plt>
   10c88:	mov	r0, #0
   10c8c:	mov	r1, r4
   10c90:	mov	r2, #0
   10c94:	bl	52d0 <sigprocmask@plt>
   10c98:	mov	r0, r4
   10c9c:	bl	4cdc <sigemptyset@plt>
   10ca0:	bl	4dc0 <__libc_current_sigrtmin@plt>
   10ca4:	mov	r1, r0
   10ca8:	mov	r0, r4
   10cac:	bl	51a4 <sigaddset@plt>
   10cb0:	mvn	r5, #0
   10cb4:	mvn	r0, #0
   10cb8:	mov	r1, r4
   10cbc:	mov	r2, #0
   10cc0:	bl	4d84 <signalfd@plt>
   10cc4:	cmn	r0, #1
   10cc8:	beq	10cf8 <rb_epoll_init_event+0xb0>
   10ccc:	ldr	r2, [pc, #64]	; 10d14 <rb_epoll_init_event+0xcc>
   10cd0:	add	r2, pc, r2
   10cd4:	mov	r1, #64	; 0x40
   10cd8:	bl	539c <rb_open@plt>
   10cdc:	mov	r4, r0
   10ce0:	bl	4f4c <rb_set_nb@plt>
   10ce4:	mov	r0, r4
   10ce8:	mov	r1, #0
   10cec:	bl	10d18 <signalfd_handler>
   10cf0:	sub	sp, fp, #8
   10cf4:	pop	{r4, r5, fp, pc}
   10cf8:	ldr	r0, [pc, #16]	; 10d10 <rb_epoll_init_event+0xc8>
   10cfc:	add	r0, pc, r0
   10d00:	str	r5, [r0]
   10d04:	sub	sp, fp, #8
   10d08:	pop	{r4, r5, fp, pc}
   10d0c:	.word	0x00034698
   10d10:	.word	0x000345f4
   10d14:	.word	0x00005a7c

00010d18 <signalfd_handler>:
   10d18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10d1c:	add	fp, sp, #24
   10d20:	mov	r4, r0
   10d24:	mov	r0, #0
   10d28:	ldr	r1, [pc, #256]	; 10e30 <signalfd_handler+0x118>
   10d2c:	add	r1, pc, r1
   10d30:	ldr	r7, [pc, #252]	; 10e34 <signalfd_handler+0x11c>
   10d34:	add	r7, pc, r7
   10d38:	mov	r3, #128	; 0x80
   10d3c:	mov	r2, r7
   10d40:	str	r1, [r2, r0, lsl #3]!
   10d44:	str	r3, [r2, #4]
   10d48:	add	r1, r1, #128	; 0x80
   10d4c:	add	r0, r0, #1
   10d50:	cmp	r0, #16
   10d54:	bne	10d3c <signalfd_handler+0x24>
   10d58:	mov	r0, r4
   10d5c:	bl	4e20 <rb_get_fd@plt>
   10d60:	ldr	r1, [pc, #208]	; 10e38 <signalfd_handler+0x120>
   10d64:	add	r1, pc, r1
   10d68:	mov	r2, #16
   10d6c:	bl	5588 <readv@plt>
   10d70:	cmp	r0, #0
   10d74:	beq	10e20 <signalfd_handler+0x108>
   10d78:	ldr	r1, [pc, #188]	; 10e3c <signalfd_handler+0x124>
   10d7c:	add	r1, pc, r1
   10d80:	add	r5, r1, #48	; 0x30
   10d84:	ldr	r8, [pc, #180]	; 10e40 <signalfd_handler+0x128>
   10d88:	add	r8, pc, r8
   10d8c:	cmp	r0, #0
   10d90:	bpl	10dbc <signalfd_handler+0xa4>
   10d94:	b	10df0 <signalfd_handler+0xd8>
   10d98:	mov	r0, r4
   10d9c:	bl	4e20 <rb_get_fd@plt>
   10da0:	mov	r1, r8
   10da4:	mov	r2, #16
   10da8:	bl	5588 <readv@plt>
   10dac:	cmp	r0, #0
   10db0:	beq	10e20 <signalfd_handler+0x108>
   10db4:	cmp	r0, #0
   10db8:	bmi	10df0 <signalfd_handler+0xd8>
   10dbc:	cmp	r0, #128	; 0x80
   10dc0:	blt	10d98 <signalfd_handler+0x80>
   10dc4:	lsr	r7, r0, #7
   10dc8:	mov	r6, r5
   10dcc:	b	10ddc <signalfd_handler+0xc4>
   10dd0:	add	r6, r6, #128	; 0x80
   10dd4:	subs	r7, r7, #1
   10dd8:	beq	10d98 <signalfd_handler+0x80>
   10ddc:	ldr	r0, [r6]
   10de0:	cmp	r0, #0
   10de4:	beq	10dd0 <signalfd_handler+0xb8>
   10de8:	bl	51c8 <rb_run_one_event@plt>
   10dec:	b	10dd0 <signalfd_handler+0xb8>
   10df0:	bl	560c <__errno_location@plt>
   10df4:	ldr	r0, [r0]
   10df8:	bl	4d24 <rb_ignore_errno@plt>
   10dfc:	cmp	r0, #0
   10e00:	beq	10e20 <signalfd_handler+0x108>
   10e04:	ldr	r2, [pc, #56]	; 10e44 <signalfd_handler+0x12c>
   10e08:	add	r2, pc, r2
   10e0c:	mov	r0, r4
   10e10:	mov	r1, #1
   10e14:	mov	r3, #0
   10e18:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   10e1c:	b	4de4 <rb_setselect@plt>
   10e20:	mov	r0, r4
   10e24:	bl	518c <rb_close@plt>
   10e28:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   10e2c:	b	10c48 <rb_epoll_init_event>
   10e30:	.word	0x000345d4
   10e34:	.word	0x00034dcc
   10e38:	.word	0x00034d9c
   10e3c:	.word	0x00034584
   10e40:	.word	0x00034d78
   10e44:	.word	0xffffff08

00010e48 <rb_epoll_sched_event>:
   10e48:	ldr	r2, [pc, #20]	; 10e64 <rb_epoll_sched_event+0x1c>
   10e4c:	add	r2, pc, r2
   10e50:	ldrb	r2, [r2]
   10e54:	cmp	r2, #1
   10e58:	bne	10e60 <rb_epoll_sched_event+0x18>
   10e5c:	b	10e68 <rb_epoll_sched_event_timerfd>
   10e60:	b	10fa0 <rb_epoll_sched_event_signalfd>
   10e64:	.word	0x000344a8

00010e68 <rb_epoll_sched_event_timerfd>:
   10e68:	push	{r4, r5, r6, r7, fp, lr}
   10e6c:	add	fp, sp, #16
   10e70:	sub	sp, sp, #16
   10e74:	mov	r7, r1
   10e78:	mov	r5, r0
   10e7c:	mov	r4, #0
   10e80:	mov	r0, #0
   10e84:	mov	r1, #0
   10e88:	bl	54e0 <timerfd_create@plt>
   10e8c:	cmn	r0, #1
   10e90:	ble	10f3c <rb_epoll_sched_event_timerfd+0xd4>
   10e94:	mov	r6, r0
   10e98:	str	r4, [sp]
   10e9c:	str	r4, [sp, #12]
   10ea0:	stmib	sp, {r4, r7}
   10ea4:	ldr	r0, [r5, #24]
   10ea8:	cmp	r0, #0
   10eac:	beq	10ec0 <rb_epoll_sched_event_timerfd+0x58>
   10eb0:	mov	r0, sp
   10eb4:	add	r0, r0, #8
   10eb8:	ldrd	r0, [r0]
   10ebc:	stm	sp, {r0, r1}
   10ec0:	mov	r2, sp
   10ec4:	mov	r4, #0
   10ec8:	mov	r0, r6
   10ecc:	mov	r1, #0
   10ed0:	mov	r3, #0
   10ed4:	bl	5564 <timerfd_settime@plt>
   10ed8:	cmn	r0, #1
   10edc:	ble	10f5c <rb_epoll_sched_event_timerfd+0xf4>
   10ee0:	ldr	r3, [r5, #20]
   10ee4:	ldr	r4, [pc, #168]	; 10f94 <rb_epoll_sched_event_timerfd+0x12c>
   10ee8:	add	r4, pc, r4
   10eec:	ldr	r2, [pc, #164]	; 10f98 <rb_epoll_sched_event_timerfd+0x130>
   10ef0:	add	r2, pc, r2
   10ef4:	mov	r0, r4
   10ef8:	mov	r1, #136	; 0x88
   10efc:	bl	54c8 <snprintf@plt>
   10f00:	mov	r0, r6
   10f04:	mov	r1, #64	; 0x40
   10f08:	mov	r2, r4
   10f0c:	bl	539c <rb_open@plt>
   10f10:	mov	r6, r0
   10f14:	bl	4f4c <rb_set_nb@plt>
   10f18:	str	r6, [r5, #40]	; 0x28
   10f1c:	mov	r4, #1
   10f20:	ldr	r2, [pc, #116]	; 10f9c <rb_epoll_sched_event_timerfd+0x134>
   10f24:	add	r2, pc, r2
   10f28:	mov	r0, r6
   10f2c:	mov	r1, #1
   10f30:	mov	r3, r5
   10f34:	bl	4de4 <rb_setselect@plt>
   10f38:	b	10f80 <rb_epoll_sched_event_timerfd+0x118>
   10f3c:	bl	560c <__errno_location@plt>
   10f40:	ldr	r0, [r0]
   10f44:	bl	4ce8 <strerror@plt>
   10f48:	mov	r1, r0
   10f4c:	ldr	r0, [pc, #56]	; 10f8c <rb_epoll_sched_event_timerfd+0x124>
   10f50:	add	r0, pc, r0
   10f54:	bl	5240 <rb_lib_log@plt>
   10f58:	b	10f80 <rb_epoll_sched_event_timerfd+0x118>
   10f5c:	bl	560c <__errno_location@plt>
   10f60:	ldr	r0, [r0]
   10f64:	bl	4ce8 <strerror@plt>
   10f68:	mov	r1, r0
   10f6c:	ldr	r0, [pc, #28]	; 10f90 <rb_epoll_sched_event_timerfd+0x128>
   10f70:	add	r0, pc, r0
   10f74:	bl	5240 <rb_lib_log@plt>
   10f78:	mov	r0, r6
   10f7c:	bl	5264 <close@plt>
   10f80:	mov	r0, r4
   10f84:	sub	sp, fp, #16
   10f88:	pop	{r4, r5, r6, r7, fp, pc}
   10f8c:	.word	0x00005805
   10f90:	.word	0x000057f9
   10f94:	.word	0x00034c98
   10f98:	.word	0x0000588e
   10f9c:	.word	0x000001d4

00010fa0 <rb_epoll_sched_event_signalfd>:
   10fa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10fa4:	add	fp, sp, #24
   10fa8:	sub	sp, sp, #80	; 0x50
   10fac:	mov	r8, r1
   10fb0:	mov	r4, r0
   10fb4:	add	r7, sp, #16
   10fb8:	vmov.i32	q8, #0	; 0x00000000
   10fbc:	add	r0, r7, #12
   10fc0:	vst1.32	{d16-d17}, [r0]
   10fc4:	add	r0, r7, #28
   10fc8:	vst1.32	{d16-d17}, [r0]
   10fcc:	add	r0, r7, #44	; 0x2c
   10fd0:	vst1.32	{d16-d17}, [r0]
   10fd4:	mov	r5, #0
   10fd8:	str	r5, [sp, #76]	; 0x4c
   10fdc:	mov	r0, #4
   10fe0:	bl	10840 <rb_malloc>
   10fe4:	mov	r6, r0
   10fe8:	str	r0, [r4, #40]	; 0x28
   10fec:	str	r5, [sp, #24]
   10ff0:	bl	4dc0 <__libc_current_sigrtmin@plt>
   10ff4:	str	r0, [sp, #20]
   10ff8:	str	r4, [sp, #16]
   10ffc:	mov	r0, #0
   11000:	mov	r1, r7
   11004:	mov	r2, r6
   11008:	bl	4e68 <timer_create@plt>
   1100c:	cmp	r0, #0
   11010:	bmi	11068 <rb_epoll_sched_event_signalfd+0xc8>
   11014:	str	r5, [sp]
   11018:	str	r5, [sp, #12]
   1101c:	stmib	sp, {r5, r8}
   11020:	ldr	r0, [r4, #24]
   11024:	cmp	r0, #0
   11028:	beq	1103c <rb_epoll_sched_event_signalfd+0x9c>
   1102c:	mov	r0, sp
   11030:	add	r0, r0, #8
   11034:	ldrd	r0, [r0]
   11038:	stm	sp, {r0, r1}
   1103c:	ldr	r0, [r6]
   11040:	mov	r2, sp
   11044:	mov	r1, #0
   11048:	mov	r3, #0
   1104c:	bl	506c <timer_settime@plt>
   11050:	mov	r1, r0
   11054:	mov	r0, #1
   11058:	cmn	r1, #1
   1105c:	ble	11074 <rb_epoll_sched_event_signalfd+0xd4>
   11060:	sub	sp, fp, #24
   11064:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11068:	ldr	r4, [pc, #48]	; 110a0 <rb_epoll_sched_event_signalfd+0x100>
   1106c:	add	r4, pc, r4
   11070:	b	1107c <rb_epoll_sched_event_signalfd+0xdc>
   11074:	ldr	r4, [pc, #40]	; 110a4 <rb_epoll_sched_event_signalfd+0x104>
   11078:	add	r4, pc, r4
   1107c:	bl	560c <__errno_location@plt>
   11080:	ldr	r0, [r0]
   11084:	bl	4ce8 <strerror@plt>
   11088:	mov	r1, r0
   1108c:	mov	r0, r4
   11090:	bl	5240 <rb_lib_log@plt>
   11094:	mov	r0, #0
   11098:	sub	sp, fp, #24
   1109c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   110a0:	.word	0x0000574f
   110a4:	.word	0x00005755

000110a8 <rb_epoll_unsched_event>:
   110a8:	push	{r4, sl, fp, lr}
   110ac:	add	fp, sp, #8
   110b0:	mov	r4, r0
   110b4:	ldr	r0, [r0, #40]	; 0x28
   110b8:	ldr	r1, [pc, #48]	; 110f0 <rb_epoll_unsched_event+0x48>
   110bc:	add	r1, pc, r1
   110c0:	ldrb	r1, [r1]
   110c4:	cmp	r1, #1
   110c8:	bne	110d4 <rb_epoll_unsched_event+0x2c>
   110cc:	bl	518c <rb_close@plt>
   110d0:	b	110e4 <rb_epoll_unsched_event+0x3c>
   110d4:	ldr	r0, [r0]
   110d8:	bl	5390 <timer_delete@plt>
   110dc:	ldr	r0, [r4, #40]	; 0x28
   110e0:	bl	110f4 <rb_free>
   110e4:	mov	r0, #0
   110e8:	str	r0, [r4, #40]	; 0x28
   110ec:	pop	{r4, sl, fp, pc}
   110f0:	.word	0x00034238

000110f4 <rb_free>:
   110f4:	cmp	r0, #0
   110f8:	bxeq	lr
   110fc:	b	500c <free@plt>

00011100 <rb_read_timerfd>:
   11100:	push	{r4, r5, fp, lr}
   11104:	add	fp, sp, #8
   11108:	sub	sp, sp, #8
   1110c:	mov	r5, r0
   11110:	cmp	r1, #0
   11114:	beq	11178 <rb_read_timerfd+0x78>
   11118:	mov	r4, r1
   1111c:	mov	r1, sp
   11120:	mov	r0, r5
   11124:	mov	r2, #8
   11128:	bl	509c <rb_read@plt>
   1112c:	cmp	r0, #0
   11130:	beq	11188 <rb_read_timerfd+0x88>
   11134:	cmn	r0, #1
   11138:	bgt	11150 <rb_read_timerfd+0x50>
   1113c:	bl	560c <__errno_location@plt>
   11140:	ldr	r0, [r0]
   11144:	bl	4d24 <rb_ignore_errno@plt>
   11148:	cmp	r0, #0
   1114c:	beq	11188 <rb_read_timerfd+0x88>
   11150:	ldr	r2, [pc, #104]	; 111c0 <rb_read_timerfd+0xc0>
   11154:	add	r2, pc, r2
   11158:	mov	r0, r5
   1115c:	mov	r1, #1
   11160:	mov	r3, r4
   11164:	bl	4de4 <rb_setselect@plt>
   11168:	mov	r0, r4
   1116c:	bl	51c8 <rb_run_one_event@plt>
   11170:	sub	sp, fp, #8
   11174:	pop	{r4, r5, fp, pc}
   11178:	mov	r0, r5
   1117c:	bl	518c <rb_close@plt>
   11180:	sub	sp, fp, #8
   11184:	pop	{r4, r5, fp, pc}
   11188:	mov	r0, r5
   1118c:	bl	518c <rb_close@plt>
   11190:	ldr	r4, [r4, #20]
   11194:	bl	560c <__errno_location@plt>
   11198:	ldr	r0, [r0]
   1119c:	bl	4ce8 <strerror@plt>
   111a0:	mov	r2, r0
   111a4:	ldr	r0, [pc, #16]	; 111bc <rb_read_timerfd+0xbc>
   111a8:	add	r0, pc, r0
   111ac:	mov	r1, r4
   111b0:	bl	5240 <rb_lib_log@plt>
   111b4:	sub	sp, fp, #8
   111b8:	pop	{r4, r5, fp, pc}
   111bc:	.word	0x000055e2
   111c0:	.word	0xffffffa4

000111c4 <rb_setup_fd_poll>:
   111c4:	mov	r0, #0
   111c8:	bx	lr

000111cc <rb_init_netio_poll>:
   111cc:	push	{r4, r5, fp, lr}
   111d0:	add	fp, sp, #8
   111d4:	bl	4da8 <rb_getmaxconnect@plt>
   111d8:	lsl	r0, r0, #3
   111dc:	bl	11254 <rb_malloc>
   111e0:	ldr	r1, [pc, #92]	; 11244 <rb_init_netio_poll+0x78>
   111e4:	add	r1, pc, r1
   111e8:	str	r0, [r1]
   111ec:	bl	4da8 <rb_getmaxconnect@plt>
   111f0:	ldr	r1, [pc, #80]	; 11248 <rb_init_netio_poll+0x7c>
   111f4:	add	r1, pc, r1
   111f8:	str	r0, [r1]
   111fc:	bl	4da8 <rb_getmaxconnect@plt>
   11200:	cmp	r0, #1
   11204:	blt	1122c <rb_init_netio_poll+0x60>
   11208:	mov	r4, #0
   1120c:	mvn	r5, #0
   11210:	ldr	r0, [pc, #52]	; 1124c <rb_init_netio_poll+0x80>
   11214:	ldr	r0, [pc, r0]
   11218:	str	r5, [r0, r4, lsl #3]
   1121c:	add	r4, r4, #1
   11220:	bl	4da8 <rb_getmaxconnect@plt>
   11224:	cmp	r4, r0
   11228:	blt	11210 <rb_init_netio_poll+0x44>
   1122c:	ldr	r0, [pc, #28]	; 11250 <rb_init_netio_poll+0x84>
   11230:	add	r0, pc, r0
   11234:	mov	r1, #0
   11238:	str	r1, [r0]
   1123c:	mov	r0, #0
   11240:	pop	{r4, r5, fp, pc}
   11244:	.word	0x00034a24
   11248:	.word	0x00034a1c
   1124c:	.word	0x000349f4
   11250:	.word	0x000349dc

00011254 <rb_malloc>:
   11254:	push	{fp, lr}
   11258:	mov	fp, sp
   1125c:	mov	r1, r0
   11260:	mov	r0, #1
   11264:	bl	4f1c <calloc@plt>
   11268:	cmp	r0, #0
   1126c:	popne	{fp, pc}
   11270:	bl	52a0 <rb_outofmemory@plt>

00011274 <rb_setselect_poll>:
   11274:	push	{r4, sl, fp, lr}
   11278:	add	fp, sp, #8
   1127c:	cmp	r0, #0
   11280:	beq	11314 <rb_setselect_poll+0xa0>
   11284:	mov	r4, r0
   11288:	tst	r1, #1
   1128c:	beq	112ac <rb_setselect_poll+0x38>
   11290:	str	r2, [r4, #28]
   11294:	str	r3, [r4, #32]
   11298:	ldr	ip, [r4, #20]
   1129c:	orr	r0, ip, #64	; 0x40
   112a0:	cmp	r2, #0
   112a4:	biceq	r0, ip, #64	; 0x40
   112a8:	str	r0, [r4, #20]
   112ac:	tst	r1, #2
   112b0:	beq	112d0 <rb_setselect_poll+0x5c>
   112b4:	str	r2, [r4, #36]	; 0x24
   112b8:	str	r3, [r4, #40]	; 0x28
   112bc:	ldr	r0, [r4, #20]
   112c0:	orr	r1, r0, #256	; 0x100
   112c4:	cmp	r2, #0
   112c8:	biceq	r1, r0, #256	; 0x100
   112cc:	str	r1, [r4, #20]
   112d0:	ldr	r0, [r4, #12]
   112d4:	bl	11394 <resize_pollarray>
   112d8:	ldr	r1, [r4, #20]
   112dc:	cmp	r1, #0
   112e0:	ble	11318 <rb_setselect_poll+0xa4>
   112e4:	ldr	r0, [r4, #12]
   112e8:	ldr	r2, [pc, #152]	; 11388 <rb_setselect_poll+0x114>
   112ec:	ldr	r2, [pc, r2]
   112f0:	str	r0, [r2, r0, lsl #3]!
   112f4:	strh	r1, [r2, #4]
   112f8:	ldr	r1, [pc, #140]	; 1138c <rb_setselect_poll+0x118>
   112fc:	ldr	r1, [pc, r1]
   11300:	cmp	r0, r1
   11304:	pople	{r4, sl, fp, pc}
   11308:	ldr	r1, [pc, #128]	; 11390 <rb_setselect_poll+0x11c>
   1130c:	add	r1, pc, r1
   11310:	str	r0, [r1]
   11314:	pop	{r4, sl, fp, pc}
   11318:	ldr	r2, [r4, #12]
   1131c:	ldr	r0, [pc, #88]	; 1137c <rb_setselect_poll+0x108>
   11320:	ldr	r0, [pc, r0]
   11324:	mvn	r1, #0
   11328:	mov	r3, r0
   1132c:	str	r1, [r3, r2, lsl #3]!
   11330:	mov	r1, #0
   11334:	strh	r1, [r3, #4]
   11338:	ldr	r1, [pc, #64]	; 11380 <rb_setselect_poll+0x10c>
   1133c:	ldr	r1, [pc, r1]
   11340:	cmp	r2, r1
   11344:	bne	11314 <rb_setselect_poll+0xa0>
   11348:	cmp	r1, #0
   1134c:	bmi	11314 <rb_setselect_poll+0xa0>
   11350:	ldr	r2, [pc, #44]	; 11384 <rb_setselect_poll+0x110>
   11354:	add	r2, pc, r2
   11358:	ldr	r3, [r0, r1, lsl #3]
   1135c:	cmn	r3, #1
   11360:	bne	11314 <rb_setselect_poll+0xa0>
   11364:	sub	r3, r1, #1
   11368:	str	r3, [r2]
   1136c:	cmp	r1, #0
   11370:	mov	r1, r3
   11374:	bgt	11358 <rb_setselect_poll+0xe4>
   11378:	b	11314 <rb_setselect_poll+0xa0>
   1137c:	.word	0x000348e8
   11380:	.word	0x000348d0
   11384:	.word	0x000348b8
   11388:	.word	0x0003491c
   1138c:	.word	0x00034910
   11390:	.word	0x00034900

00011394 <resize_pollarray>:
   11394:	push	{r4, sl, fp, lr}
   11398:	add	fp, sp, #8
   1139c:	ldr	r4, [pc, #132]	; 11428 <resize_pollarray+0x94>
   113a0:	ldr	r4, [pc, r4]
   113a4:	cmp	r4, r0
   113a8:	ble	113b0 <resize_pollarray+0x1c>
   113ac:	pop	{r4, sl, fp, pc}
   113b0:	add	r1, r4, #1024	; 0x400
   113b4:	ldr	r0, [pc, #112]	; 1142c <resize_pollarray+0x98>
   113b8:	add	r0, pc, r0
   113bc:	str	r1, [r0]
   113c0:	ldr	r0, [pc, #104]	; 11430 <resize_pollarray+0x9c>
   113c4:	ldr	r0, [pc, r0]
   113c8:	lsl	r1, r1, #3
   113cc:	bl	11618 <rb_realloc>
   113d0:	ldr	r1, [pc, #92]	; 11434 <resize_pollarray+0xa0>
   113d4:	add	r1, pc, r1
   113d8:	str	r0, [r1]
   113dc:	add	r4, r4, #1
   113e0:	add	r0, r0, r4, lsl #3
   113e4:	mov	r1, #0
   113e8:	mov	r2, #8192	; 0x2000
   113ec:	bl	4f58 <memset@plt>
   113f0:	ldr	r0, [pc, #64]	; 11438 <resize_pollarray+0xa4>
   113f4:	ldr	r0, [pc, r0]
   113f8:	cmp	r4, r0
   113fc:	popge	{r4, sl, fp, pc}
   11400:	ldr	r0, [pc, #52]	; 1143c <resize_pollarray+0xa8>
   11404:	ldr	r0, [pc, r0]
   11408:	ldr	r1, [pc, #48]	; 11440 <resize_pollarray+0xac>
   1140c:	ldr	r1, [pc, r1]
   11410:	mvn	r2, #0
   11414:	str	r2, [r1, r4, lsl #3]
   11418:	add	r4, r4, #1
   1141c:	cmp	r4, r0
   11420:	blt	11414 <resize_pollarray+0x80>
   11424:	b	113ac <resize_pollarray+0x18>
   11428:	.word	0x00034870
   1142c:	.word	0x00034858
   11430:	.word	0x00034844
   11434:	.word	0x00034834
   11438:	.word	0x0003481c
   1143c:	.word	0x0003480c
   11440:	.word	0x000347fc

00011444 <rb_select_poll>:
   11444:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11448:	add	fp, sp, #24
   1144c:	mov	r2, r0
   11450:	ldr	r0, [pc, #336]	; 115a8 <rb_select_poll+0x164>
   11454:	ldr	r0, [pc, r0]
   11458:	ldr	r1, [pc, #332]	; 115ac <rb_select_poll+0x168>
   1145c:	ldr	r1, [pc, r1]
   11460:	add	r1, r1, #1
   11464:	bl	5318 <poll@plt>
   11468:	mov	r4, r0
   1146c:	bl	52ac <rb_set_time@plt>
   11470:	cmn	r4, #1
   11474:	ble	11588 <rb_select_poll+0x144>
   11478:	mov	r0, #0
   1147c:	cmp	r4, #0
   11480:	beq	115a4 <rb_select_poll+0x160>
   11484:	ldr	r1, [pc, #292]	; 115b0 <rb_select_poll+0x16c>
   11488:	ldr	r1, [pc, r1]
   1148c:	cmp	r1, #0
   11490:	bmi	115a4 <rb_select_poll+0x160>
   11494:	mvn	r5, #0
   11498:	mov	r8, #0
   1149c:	mov	r7, #0
   114a0:	b	114bc <rb_select_poll+0x78>
   114a4:	add	r7, r7, #8
   114a8:	add	r5, r5, #1
   114ac:	ldr	r0, [pc, #260]	; 115b8 <rb_select_poll+0x174>
   114b0:	ldr	r0, [pc, r0]
   114b4:	cmp	r5, r0
   114b8:	bge	115a0 <rb_select_poll+0x15c>
   114bc:	ldr	r1, [pc, #240]	; 115b4 <rb_select_poll+0x170>
   114c0:	ldr	r1, [pc, r1]
   114c4:	ldr	r0, [r1, r7]!
   114c8:	ldrsh	r6, [r1, #6]
   114cc:	cmp	r6, #0
   114d0:	cmnne	r0, #1
   114d4:	beq	114a4 <rb_select_poll+0x60>
   114d8:	bl	115bc <rb_find_fd>
   114dc:	cmp	r0, #0
   114e0:	beq	114a4 <rb_select_poll+0x60>
   114e4:	mov	r4, r0
   114e8:	tst	r6, #89	; 0x59
   114ec:	beq	11510 <rb_select_poll+0xcc>
   114f0:	ldr	r2, [r4, #28]
   114f4:	ldr	r1, [r4, #32]
   114f8:	str	r8, [r4, #28]
   114fc:	str	r8, [r4, #32]
   11500:	cmp	r2, #0
   11504:	beq	11510 <rb_select_poll+0xcc>
   11508:	mov	r0, r4
   1150c:	blx	r2
   11510:	tst	r6, #284	; 0x11c
   11514:	ldrbne	r0, [r4, #16]
   11518:	andsne	r0, r0, #1
   1151c:	bne	11564 <rb_select_poll+0x120>
   11520:	ldr	r0, [r4, #28]
   11524:	cmp	r0, #0
   11528:	bne	11540 <rb_select_poll+0xfc>
   1152c:	mov	r0, r4
   11530:	mov	r1, #1
   11534:	mov	r2, #0
   11538:	mov	r3, #0
   1153c:	bl	11274 <rb_setselect_poll>
   11540:	ldr	r0, [r4, #36]	; 0x24
   11544:	cmp	r0, #0
   11548:	bne	114a4 <rb_select_poll+0x60>
   1154c:	mov	r0, r4
   11550:	mov	r1, #2
   11554:	mov	r2, #0
   11558:	mov	r3, #0
   1155c:	bl	11274 <rb_setselect_poll>
   11560:	b	114a4 <rb_select_poll+0x60>
   11564:	ldr	r2, [r4, #36]	; 0x24
   11568:	ldr	r1, [r4, #40]	; 0x28
   1156c:	str	r8, [r4, #36]	; 0x24
   11570:	str	r8, [r4, #40]	; 0x28
   11574:	cmp	r2, #0
   11578:	beq	11520 <rb_select_poll+0xdc>
   1157c:	mov	r0, r4
   11580:	blx	r2
   11584:	b	11520 <rb_select_poll+0xdc>
   11588:	bl	560c <__errno_location@plt>
   1158c:	ldr	r0, [r0]
   11590:	bl	4d24 <rb_ignore_errno@plt>
   11594:	cmp	r0, #0
   11598:	movwne	r0, #5
   1159c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   115a0:	mov	r0, #0
   115a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   115a8:	.word	0x000347b4
   115ac:	.word	0x000347b0
   115b0:	.word	0x00034784
   115b4:	.word	0x00034748
   115b8:	.word	0x0003475c

000115bc <rb_find_fd>:
   115bc:	cmp	r0, #0
   115c0:	bmi	11608 <rb_find_fd+0x4c>
   115c4:	eor	r1, r0, r0, lsr #12
   115c8:	bfc	r1, #12, #20
   115cc:	eor	r1, r1, r0, lsr #24
   115d0:	add	r1, r1, r1, lsl #1
   115d4:	ldr	r2, [pc, #56]	; 11614 <rb_find_fd+0x58>
   115d8:	ldr	r2, [pc, r2]
   115dc:	ldr	r2, [r2]
   115e0:	ldr	r2, [r2, r1, lsl #2]
   115e4:	cmp	r2, #0
   115e8:	beq	11608 <rb_find_fd+0x4c>
   115ec:	ldr	r1, [r2]
   115f0:	ldr	r3, [r1, #12]
   115f4:	cmp	r3, r0
   115f8:	beq	1160c <rb_find_fd+0x50>
   115fc:	ldr	r2, [r2, #8]
   11600:	cmp	r2, #0
   11604:	bne	115ec <rb_find_fd+0x30>
   11608:	mov	r1, #0
   1160c:	mov	r0, r1
   11610:	bx	lr
   11614:	.word	0x00016dd0

00011618 <rb_realloc>:
   11618:	push	{fp, lr}
   1161c:	mov	fp, sp
   11620:	bl	5558 <realloc@plt>
   11624:	cmp	r0, #0
   11628:	popne	{fp, pc}
   1162c:	bl	52a0 <rb_outofmemory@plt>

00011630 <rb_ports_supports_event>:
   11630:	push	{fp, lr}
   11634:	mov	fp, sp
   11638:	bl	560c <__errno_location@plt>
   1163c:	mov	r1, #38	; 0x26
   11640:	str	r1, [r0]
   11644:	mov	r0, #0
   11648:	pop	{fp, pc}

0001164c <rb_ports_init_event>:
   1164c:	bx	lr

00011650 <rb_ports_sched_event>:
   11650:	push	{fp, lr}
   11654:	mov	fp, sp
   11658:	bl	560c <__errno_location@plt>
   1165c:	mov	r1, #38	; 0x26
   11660:	str	r1, [r0]
   11664:	mvn	r0, #0
   11668:	pop	{fp, pc}

0001166c <rb_ports_unsched_event>:
   1166c:	bx	lr

00011670 <rb_init_netio_ports>:
   11670:	mov	r0, #38	; 0x26
   11674:	bx	lr

00011678 <rb_setselect_ports>:
   11678:	push	{fp, lr}
   1167c:	mov	fp, sp
   11680:	bl	560c <__errno_location@plt>
   11684:	mov	r1, #38	; 0x26
   11688:	str	r1, [r0]
   1168c:	pop	{fp, pc}

00011690 <rb_select_ports>:
   11690:	push	{fp, lr}
   11694:	mov	fp, sp
   11698:	bl	560c <__errno_location@plt>
   1169c:	mov	r1, #38	; 0x26
   116a0:	str	r1, [r0]
   116a4:	mvn	r0, #0
   116a8:	pop	{fp, pc}

000116ac <rb_setup_fd_ports>:
   116ac:	push	{fp, lr}
   116b0:	mov	fp, sp
   116b4:	bl	560c <__errno_location@plt>
   116b8:	mov	r1, #38	; 0x26
   116bc:	str	r1, [r0]
   116c0:	mvn	r0, #0
   116c4:	pop	{fp, pc}

000116c8 <rb_init_netio_sigio>:
   116c8:	push	{r4, r5, r6, sl, fp, lr}
   116cc:	add	fp, sp, #16
   116d0:	bl	4da8 <rb_getmaxconnect@plt>
   116d4:	lsl	r0, r0, #3
   116d8:	bl	11794 <rb_malloc>
   116dc:	ldr	r4, [pc, #164]	; 11788 <rb_init_netio_sigio+0xc0>
   116e0:	ldr	r4, [pc, r4]
   116e4:	str	r0, [r4]
   116e8:	bl	4da8 <rb_getmaxconnect@plt>
   116ec:	str	r0, [r4, #8]
   116f0:	bl	4da8 <rb_getmaxconnect@plt>
   116f4:	cmp	r0, #1
   116f8:	blt	1171c <rb_init_netio_sigio+0x54>
   116fc:	mov	r5, #0
   11700:	mvn	r6, #0
   11704:	ldr	r0, [r4]
   11708:	str	r6, [r0, r5, lsl #3]
   1170c:	add	r5, r5, #1
   11710:	bl	4da8 <rb_getmaxconnect@plt>
   11714:	cmp	r5, r0
   11718:	blt	11704 <rb_init_netio_sigio+0x3c>
   1171c:	ldr	r0, [pc, #104]	; 1178c <rb_init_netio_sigio+0xc4>
   11720:	add	r0, pc, r0
   11724:	mov	r1, #1
   11728:	strb	r1, [r0]
   1172c:	mov	r0, #0
   11730:	str	r0, [r4, #4]
   11734:	ldr	r4, [pc, #84]	; 11790 <rb_init_netio_sigio+0xc8>
   11738:	add	r4, pc, r4
   1173c:	mov	r0, r4
   11740:	bl	4cdc <sigemptyset@plt>
   11744:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11748:	mov	r1, r0
   1174c:	mov	r0, r4
   11750:	bl	51a4 <sigaddset@plt>
   11754:	mov	r0, r4
   11758:	mov	r1, #29
   1175c:	bl	51a4 <sigaddset@plt>
   11760:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11764:	add	r1, r0, #1
   11768:	mov	r0, r4
   1176c:	bl	51a4 <sigaddset@plt>
   11770:	mov	r0, #0
   11774:	mov	r1, r4
   11778:	mov	r2, #0
   1177c:	bl	52d0 <sigprocmask@plt>
   11780:	mov	r0, #0
   11784:	pop	{r4, r5, r6, sl, fp, pc}
   11788:	.word	0x00016cd8
   1178c:	.word	0x000344f4
   11790:	.word	0x000344e0

00011794 <rb_malloc>:
   11794:	push	{fp, lr}
   11798:	mov	fp, sp
   1179c:	mov	r1, r0
   117a0:	mov	r0, #1
   117a4:	bl	4f1c <calloc@plt>
   117a8:	cmp	r0, #0
   117ac:	popne	{fp, pc}
   117b0:	bl	52a0 <rb_outofmemory@plt>

000117b4 <rb_setup_fd_sigio>:
   117b4:	push	{r4, r5, r6, sl, fp, lr}
   117b8:	add	fp, sp, #16
   117bc:	ldr	r5, [r0, #12]
   117c0:	mov	r4, #0
   117c4:	mov	r0, r5
   117c8:	mov	r1, #3
   117cc:	mov	r2, #0
   117d0:	bl	551c <fcntl@plt>
   117d4:	cmn	r0, #1
   117d8:	beq	11850 <rb_setup_fd_sigio+0x9c>
   117dc:	mov	r6, r0
   117e0:	tst	r0, #8192	; 0x2000
   117e4:	beq	117fc <rb_setup_fd_sigio+0x48>
   117e8:	bic	r6, r6, #8192	; 0x2000
   117ec:	mov	r0, r5
   117f0:	mov	r1, #4
   117f4:	mov	r2, r6
   117f8:	bl	551c <fcntl@plt>
   117fc:	orr	r2, r6, #10240	; 0x2800
   11800:	mov	r0, r5
   11804:	mov	r1, #4
   11808:	bl	551c <fcntl@plt>
   1180c:	cmn	r0, #1
   11810:	beq	11850 <rb_setup_fd_sigio+0x9c>
   11814:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11818:	mov	r2, r0
   1181c:	mov	r0, r5
   11820:	mov	r1, #10
   11824:	bl	551c <fcntl@plt>
   11828:	cmn	r0, #1
   1182c:	beq	11850 <rb_setup_fd_sigio+0x9c>
   11830:	bl	53e4 <getpid@plt>
   11834:	mov	r2, r0
   11838:	mov	r0, r5
   1183c:	mov	r1, #8
   11840:	bl	551c <fcntl@plt>
   11844:	mvn	r1, #0
   11848:	subs	r4, r0, r1
   1184c:	movwne	r4, #1
   11850:	mov	r0, r4
   11854:	pop	{r4, r5, r6, sl, fp, pc}

00011858 <rb_setselect_sigio>:
   11858:	push	{r4, sl, fp, lr}
   1185c:	add	fp, sp, #8
   11860:	cmp	r0, #0
   11864:	popeq	{r4, sl, fp, pc}
   11868:	mov	r4, r0
   1186c:	tst	r1, #1
   11870:	beq	11890 <rb_setselect_sigio+0x38>
   11874:	str	r2, [r4, #28]
   11878:	str	r3, [r4, #32]
   1187c:	ldr	ip, [r4, #20]
   11880:	orr	r0, ip, #64	; 0x40
   11884:	cmp	r2, #0
   11888:	biceq	r0, ip, #64	; 0x40
   1188c:	str	r0, [r4, #20]
   11890:	tst	r1, #2
   11894:	beq	118b4 <rb_setselect_sigio+0x5c>
   11898:	str	r2, [r4, #36]	; 0x24
   1189c:	str	r3, [r4, #40]	; 0x28
   118a0:	ldr	r0, [r4, #20]
   118a4:	orr	r1, r0, #256	; 0x100
   118a8:	cmp	r2, #0
   118ac:	biceq	r1, r0, #256	; 0x100
   118b0:	str	r1, [r4, #20]
   118b4:	ldr	r0, [r4, #12]
   118b8:	bl	11954 <resize_pollarray>
   118bc:	ldr	r1, [r4, #20]
   118c0:	cmp	r1, #0
   118c4:	ble	118f0 <rb_setselect_sigio+0x98>
   118c8:	ldr	r0, [r4, #12]
   118cc:	ldr	r2, [pc, #124]	; 11950 <rb_setselect_sigio+0xf8>
   118d0:	ldr	r2, [pc, r2]
   118d4:	ldr	r3, [r2]
   118d8:	str	r0, [r3, r0, lsl #3]!
   118dc:	strh	r1, [r3, #4]
   118e0:	ldr	r1, [r2, #4]
   118e4:	cmp	r0, r1
   118e8:	strgt	r0, [r2, #4]
   118ec:	pop	{r4, sl, fp, pc}
   118f0:	ldr	r3, [r4, #12]
   118f4:	ldr	r0, [pc, #80]	; 1194c <rb_setselect_sigio+0xf4>
   118f8:	ldr	r0, [pc, r0]
   118fc:	ldr	r1, [r0]
   11900:	mvn	r2, #0
   11904:	mov	r4, r1
   11908:	str	r2, [r4, r3, lsl #3]!
   1190c:	mov	r2, #0
   11910:	strh	r2, [r4, #4]
   11914:	ldr	r2, [r0, #4]
   11918:	cmp	r3, r2
   1191c:	bne	118ec <rb_setselect_sigio+0x94>
   11920:	cmp	r2, #0
   11924:	bmi	118ec <rb_setselect_sigio+0x94>
   11928:	ldr	r3, [r1, r2, lsl #3]
   1192c:	cmn	r3, #1
   11930:	bne	118ec <rb_setselect_sigio+0x94>
   11934:	sub	r3, r2, #1
   11938:	str	r3, [r0, #4]
   1193c:	cmp	r2, #0
   11940:	mov	r2, r3
   11944:	bgt	11928 <rb_setselect_sigio+0xd0>
   11948:	b	118ec <rb_setselect_sigio+0x94>
   1194c:	.word	0x00016ac0
   11950:	.word	0x00016ae8

00011954 <resize_pollarray>:
   11954:	push	{r4, r5, fp, lr}
   11958:	add	fp, sp, #8
   1195c:	ldr	r4, [pc, #104]	; 119cc <resize_pollarray+0x78>
   11960:	ldr	r4, [pc, r4]
   11964:	ldr	r5, [r4, #8]
   11968:	cmp	r5, r0
   1196c:	ble	11974 <resize_pollarray+0x20>
   11970:	pop	{r4, r5, fp, pc}
   11974:	add	r1, r5, #1024	; 0x400
   11978:	str	r1, [r4, #8]
   1197c:	ldr	r0, [r4]
   11980:	lsl	r1, r1, #3
   11984:	bl	11fc0 <rb_realloc>
   11988:	str	r0, [r4]
   1198c:	add	r5, r5, #1
   11990:	add	r0, r0, r5, lsl #3
   11994:	mov	r1, #0
   11998:	mov	r2, #8192	; 0x2000
   1199c:	bl	4f58 <memset@plt>
   119a0:	ldr	r0, [r4, #8]
   119a4:	cmp	r5, r0
   119a8:	popge	{r4, r5, fp, pc}
   119ac:	ldr	r0, [r4]
   119b0:	ldr	r1, [r4, #8]
   119b4:	mvn	r2, #0
   119b8:	str	r2, [r0, r5, lsl #3]
   119bc:	add	r5, r5, #1
   119c0:	cmp	r5, r1
   119c4:	blt	119b8 <resize_pollarray+0x64>
   119c8:	b	11970 <resize_pollarray+0x1c>
   119cc:	.word	0x00016a58

000119d0 <rb_select_sigio>:
   119d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d4:	add	fp, sp, #28
   119d8:	sub	sp, sp, #140	; 0x8c
   119dc:	mov	sl, r0
   119e0:	bl	11d54 <rb_sigio_supports_event>
   119e4:	cmn	sl, #1
   119e8:	bgt	119f4 <rb_select_sigio+0x24>
   119ec:	cmp	r0, #0
   119f0:	beq	11a24 <rb_select_sigio+0x54>
   119f4:	movw	r0, #19923	; 0x4dd3
   119f8:	movt	r0, #4194	; 0x1062
   119fc:	smmul	r0, sl, r0
   11a00:	asr	r1, r0, #6
   11a04:	add	r0, r1, r0, lsr #31
   11a08:	str	r0, [sp, #4]
   11a0c:	mov	r1, #1000	; 0x3e8
   11a10:	mls	r0, r0, r1, sl
   11a14:	movw	r1, #16960	; 0x4240
   11a18:	movt	r1, #15
   11a1c:	mul	r0, r0, r1
   11a20:	str	r0, [sp, #8]
   11a24:	ldr	r9, [pc, #780]	; 11d38 <rb_select_sigio+0x368>
   11a28:	add	r9, pc, r9
   11a2c:	ldrb	r0, [r9]
   11a30:	cmp	r0, #0
   11a34:	bne	11bbc <rb_select_sigio+0x1ec>
   11a38:	ldr	r4, [pc, #764]	; 11d3c <rb_select_sigio+0x36c>
   11a3c:	add	r4, pc, r4
   11a40:	add	r6, sp, #12
   11a44:	add	r8, sp, #4
   11a48:	str	sl, [sp]
   11a4c:	cmp	sl, #0
   11a50:	bpl	11a6c <rb_select_sigio+0x9c>
   11a54:	b	11a90 <rb_select_sigio+0xc0>
   11a58:	ldrb	r0, [r9]
   11a5c:	cmp	r0, #0
   11a60:	bne	11bbc <rb_select_sigio+0x1ec>
   11a64:	cmp	sl, #0
   11a68:	bmi	11a90 <rb_select_sigio+0xc0>
   11a6c:	ldr	r0, [pc, #716]	; 11d40 <rb_select_sigio+0x370>
   11a70:	ldr	r0, [pc, r0]
   11a74:	cmp	r0, #0
   11a78:	bne	11a90 <rb_select_sigio+0xc0>
   11a7c:	mov	r0, r4
   11a80:	mov	r1, r6
   11a84:	mov	r2, r8
   11a88:	bl	4dfc <sigtimedwait@plt>
   11a8c:	b	11a9c <rb_select_sigio+0xcc>
   11a90:	mov	r0, r4
   11a94:	mov	r1, r6
   11a98:	bl	4db4 <sigwaitinfo@plt>
   11a9c:	mov	r7, r0
   11aa0:	cmp	r0, #1
   11aa4:	blt	11b94 <rb_select_sigio+0x1c4>
   11aa8:	cmp	r7, #29
   11aac:	beq	11ba8 <rb_select_sigio+0x1d8>
   11ab0:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11ab4:	add	r0, r0, #1
   11ab8:	cmp	r7, r0
   11abc:	bne	11ae4 <rb_select_sigio+0x114>
   11ac0:	ldr	r0, [pc, #640]	; 11d48 <rb_select_sigio+0x378>
   11ac4:	ldr	r0, [pc, r0]
   11ac8:	cmp	r0, #0
   11acc:	beq	11ae4 <rb_select_sigio+0x114>
   11ad0:	ldr	r0, [sp, #32]
   11ad4:	cmp	r0, #0
   11ad8:	beq	11a58 <rb_select_sigio+0x88>
   11adc:	bl	51c8 <rb_run_one_event@plt>
   11ae0:	b	11a58 <rb_select_sigio+0x88>
   11ae4:	ldr	r0, [pc, #612]	; 11d50 <rb_select_sigio+0x380>
   11ae8:	ldr	r0, [pc, r0]
   11aec:	ldr	r1, [r0]
   11af0:	ldr	r0, [sp, #28]
   11af4:	add	r1, r1, r0, lsl #3
   11af8:	ldrh	r2, [r1, #6]
   11afc:	ldrh	r3, [sp, #24]
   11b00:	orr	r5, r2, r3
   11b04:	strh	r5, [r1, #6]
   11b08:	bl	11dec <rb_find_fd>
   11b0c:	cmp	r0, #0
   11b10:	beq	11a58 <rb_select_sigio+0x88>
   11b14:	mov	r7, r0
   11b18:	mov	sl, r9
   11b1c:	mov	r9, r6
   11b20:	mov	r6, r8
   11b24:	sxth	r8, r5
   11b28:	tst	r8, #89	; 0x59
   11b2c:	beq	11b54 <rb_select_sigio+0x184>
   11b30:	ldr	r2, [r7, #28]
   11b34:	ldr	r1, [r7, #32]
   11b38:	mov	r0, #0
   11b3c:	str	r0, [r7, #28]
   11b40:	str	r0, [r7, #32]
   11b44:	cmp	r2, #0
   11b48:	beq	11b54 <rb_select_sigio+0x184>
   11b4c:	mov	r0, r7
   11b50:	blx	r2
   11b54:	tst	r8, #284	; 0x11c
   11b58:	mov	r8, r6
   11b5c:	mov	r6, r9
   11b60:	mov	r9, sl
   11b64:	ldr	sl, [sp]
   11b68:	beq	11a58 <rb_select_sigio+0x88>
   11b6c:	ldr	r2, [r7, #36]	; 0x24
   11b70:	ldr	r1, [r7, #40]	; 0x28
   11b74:	mov	r0, #0
   11b78:	str	r0, [r7, #36]	; 0x24
   11b7c:	str	r0, [r7, #40]	; 0x28
   11b80:	cmp	r2, #0
   11b84:	beq	11a58 <rb_select_sigio+0x88>
   11b88:	mov	r0, r7
   11b8c:	blx	r2
   11b90:	b	11a58 <rb_select_sigio+0x88>
   11b94:	ldrb	r0, [r9]
   11b98:	cmp	r0, #0
   11b9c:	bne	11bbc <rb_select_sigio+0x1ec>
   11ba0:	bl	52ac <rb_set_time@plt>
   11ba4:	b	11d0c <rb_select_sigio+0x33c>
   11ba8:	ldr	r0, [pc, #404]	; 11d44 <rb_select_sigio+0x374>
   11bac:	add	r0, pc, r0
   11bb0:	bl	5240 <rb_lib_log@plt>
   11bb4:	mov	r0, #1
   11bb8:	strb	r0, [r9]
   11bbc:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11bc0:	mov	r1, #1
   11bc4:	bl	4e14 <signal@plt>
   11bc8:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11bcc:	mov	r5, #0
   11bd0:	mov	r1, #0
   11bd4:	bl	4e14 <signal@plt>
   11bd8:	strb	r5, [r9]
   11bdc:	ldr	r9, [pc, #360]	; 11d4c <rb_select_sigio+0x37c>
   11be0:	ldr	r9, [pc, r9]
   11be4:	ldm	r9, {r0, r1}
   11be8:	add	r1, r1, #1
   11bec:	mov	r2, sl
   11bf0:	bl	5318 <poll@plt>
   11bf4:	mov	r4, r0
   11bf8:	bl	52ac <rb_set_time@plt>
   11bfc:	cmn	r4, #1
   11c00:	ble	11d14 <rb_select_sigio+0x344>
   11c04:	cmp	r4, #0
   11c08:	beq	11d2c <rb_select_sigio+0x35c>
   11c0c:	ldr	r0, [r9, #4]
   11c10:	cmp	r0, #0
   11c14:	bmi	11d2c <rb_select_sigio+0x35c>
   11c18:	mvn	r5, #0
   11c1c:	mov	r8, #0
   11c20:	mov	r7, #0
   11c24:	b	11c3c <rb_select_sigio+0x26c>
   11c28:	add	r7, r7, #8
   11c2c:	add	r5, r5, #1
   11c30:	ldr	r0, [r9, #4]
   11c34:	cmp	r5, r0
   11c38:	bge	11d0c <rb_select_sigio+0x33c>
   11c3c:	ldr	r0, [r9]
   11c40:	add	r1, r0, r7
   11c44:	ldrsh	r6, [r1, #6]
   11c48:	cmp	r6, #0
   11c4c:	beq	11c28 <rb_select_sigio+0x258>
   11c50:	ldr	r0, [r0, r7]
   11c54:	cmn	r0, #1
   11c58:	beq	11c28 <rb_select_sigio+0x258>
   11c5c:	bl	11dec <rb_find_fd>
   11c60:	cmp	r0, #0
   11c64:	beq	11c28 <rb_select_sigio+0x258>
   11c68:	mov	r4, r0
   11c6c:	tst	r6, #89	; 0x59
   11c70:	beq	11c94 <rb_select_sigio+0x2c4>
   11c74:	ldr	r2, [r4, #28]
   11c78:	ldr	r1, [r4, #32]
   11c7c:	str	r8, [r4, #28]
   11c80:	str	r8, [r4, #32]
   11c84:	cmp	r2, #0
   11c88:	beq	11c94 <rb_select_sigio+0x2c4>
   11c8c:	mov	r0, r4
   11c90:	blx	r2
   11c94:	tst	r6, #284	; 0x11c
   11c98:	ldrbne	r0, [r4, #16]
   11c9c:	andsne	r0, r0, #1
   11ca0:	bne	11ce8 <rb_select_sigio+0x318>
   11ca4:	ldr	r0, [r4, #28]
   11ca8:	cmp	r0, #0
   11cac:	bne	11cc4 <rb_select_sigio+0x2f4>
   11cb0:	mov	r0, r4
   11cb4:	mov	r1, #1
   11cb8:	mov	r2, #0
   11cbc:	mov	r3, #0
   11cc0:	bl	11858 <rb_setselect_sigio>
   11cc4:	ldr	r0, [r4, #36]	; 0x24
   11cc8:	cmp	r0, #0
   11ccc:	bne	11c28 <rb_select_sigio+0x258>
   11cd0:	mov	r0, r4
   11cd4:	mov	r1, #2
   11cd8:	mov	r2, #0
   11cdc:	mov	r3, #0
   11ce0:	bl	11858 <rb_setselect_sigio>
   11ce4:	b	11c28 <rb_select_sigio+0x258>
   11ce8:	ldr	r2, [r4, #36]	; 0x24
   11cec:	ldr	r1, [r4, #40]	; 0x28
   11cf0:	str	r8, [r4, #36]	; 0x24
   11cf4:	str	r8, [r4, #40]	; 0x28
   11cf8:	cmp	r2, #0
   11cfc:	beq	11ca4 <rb_select_sigio+0x2d4>
   11d00:	mov	r0, r4
   11d04:	blx	r2
   11d08:	b	11ca4 <rb_select_sigio+0x2d4>
   11d0c:	mov	r5, #0
   11d10:	b	11d2c <rb_select_sigio+0x35c>
   11d14:	bl	560c <__errno_location@plt>
   11d18:	ldr	r0, [r0]
   11d1c:	bl	4d24 <rb_ignore_errno@plt>
   11d20:	mov	r5, r0
   11d24:	cmp	r0, #0
   11d28:	movwne	r5, #5
   11d2c:	mov	r0, r5
   11d30:	sub	sp, fp, #28
   11d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d38:	.word	0x000341ec
   11d3c:	.word	0x000341dc
   11d40:	.word	0x00034228
   11d44:	.word	0x00004c34
   11d48:	.word	0x000341d4
   11d4c:	.word	0x000167d8
   11d50:	.word	0x000168d0

00011d54 <rb_sigio_supports_event>:
   11d54:	push	{r4, sl, fp, lr}
   11d58:	add	fp, sp, #8
   11d5c:	sub	sp, sp, #72	; 0x48
   11d60:	ldr	r4, [pc, #120]	; 11de0 <rb_sigio_supports_event+0x8c>
   11d64:	ldr	r4, [pc, r4]
   11d68:	cmp	r4, #1
   11d6c:	beq	11dd4 <rb_sigio_supports_event+0x80>
   11d70:	cmn	r4, #1
   11d74:	bne	11d80 <rb_sigio_supports_event+0x2c>
   11d78:	mov	r4, #0
   11d7c:	b	11dd4 <rb_sigio_supports_event+0x80>
   11d80:	mov	r4, #0
   11d84:	str	r4, [sp, #12]
   11d88:	mov	r0, #26
   11d8c:	str	r0, [sp, #8]
   11d90:	add	r1, sp, #4
   11d94:	sub	r2, fp, #12
   11d98:	mov	r0, #0
   11d9c:	bl	4e68 <timer_create@plt>
   11da0:	cmp	r0, #0
   11da4:	beq	11dbc <rb_sigio_supports_event+0x68>
   11da8:	ldr	r0, [pc, #52]	; 11de4 <rb_sigio_supports_event+0x90>
   11dac:	add	r0, pc, r0
   11db0:	mvn	r1, #0
   11db4:	str	r1, [r0]
   11db8:	b	11dd4 <rb_sigio_supports_event+0x80>
   11dbc:	ldr	r0, [fp, #-12]
   11dc0:	bl	5390 <timer_delete@plt>
   11dc4:	ldr	r0, [pc, #28]	; 11de8 <rb_sigio_supports_event+0x94>
   11dc8:	add	r0, pc, r0
   11dcc:	mov	r4, #1
   11dd0:	str	r4, [r0]
   11dd4:	mov	r0, r4
   11dd8:	sub	sp, fp, #8
   11ddc:	pop	{r4, sl, fp, pc}
   11de0:	.word	0x00033f34
   11de4:	.word	0x00033eec
   11de8:	.word	0x00033ed0

00011dec <rb_find_fd>:
   11dec:	cmp	r0, #0
   11df0:	bmi	11e38 <rb_find_fd+0x4c>
   11df4:	eor	r1, r0, r0, lsr #12
   11df8:	bfc	r1, #12, #20
   11dfc:	eor	r1, r1, r0, lsr #24
   11e00:	add	r1, r1, r1, lsl #1
   11e04:	ldr	r2, [pc, #56]	; 11e44 <rb_find_fd+0x58>
   11e08:	ldr	r2, [pc, r2]
   11e0c:	ldr	r2, [r2]
   11e10:	ldr	r2, [r2, r1, lsl #2]
   11e14:	cmp	r2, #0
   11e18:	beq	11e38 <rb_find_fd+0x4c>
   11e1c:	ldr	r1, [r2]
   11e20:	ldr	r3, [r1, #12]
   11e24:	cmp	r3, r0
   11e28:	beq	11e3c <rb_find_fd+0x50>
   11e2c:	ldr	r2, [r2, #8]
   11e30:	cmp	r2, #0
   11e34:	bne	11e1c <rb_find_fd+0x30>
   11e38:	mov	r1, #0
   11e3c:	mov	r0, r1
   11e40:	bx	lr
   11e44:	.word	0x000165a0

00011e48 <rb_sigio_init_event>:
   11e48:	b	11d54 <rb_sigio_supports_event>

00011e4c <rb_sigio_sched_event>:
   11e4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e50:	add	fp, sp, #24
   11e54:	sub	sp, sp, #80	; 0x50
   11e58:	mov	r5, r0
   11e5c:	ldr	r0, [pc, #260]	; 11f68 <rb_sigio_sched_event+0x11c>
   11e60:	ldr	r0, [pc, r0]
   11e64:	cmp	r0, #1
   11e68:	blt	11f38 <rb_sigio_sched_event+0xec>
   11e6c:	mov	r8, r1
   11e70:	add	r6, sp, #16
   11e74:	vmov.i32	q8, #0	; 0x00000000
   11e78:	add	r0, r6, #44	; 0x2c
   11e7c:	vst1.32	{d16-d17}, [r0]
   11e80:	add	r0, r6, #28
   11e84:	vst1.32	{d16-d17}, [r0]
   11e88:	add	r0, r6, #12
   11e8c:	vst1.32	{d16-d17}, [r0]
   11e90:	mov	r4, #0
   11e94:	str	r4, [sp, #76]	; 0x4c
   11e98:	mov	r0, #4
   11e9c:	bl	11794 <rb_malloc>
   11ea0:	mov	r7, r0
   11ea4:	str	r0, [r5, #40]	; 0x28
   11ea8:	str	r4, [sp, #24]
   11eac:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11eb0:	str	r5, [sp, #16]
   11eb4:	add	r0, r0, #1
   11eb8:	str	r0, [sp, #20]
   11ebc:	mov	r0, #0
   11ec0:	mov	r1, r6
   11ec4:	mov	r2, r7
   11ec8:	bl	4e68 <timer_create@plt>
   11ecc:	cmn	r0, #1
   11ed0:	ble	11f40 <rb_sigio_sched_event+0xf4>
   11ed4:	str	r4, [sp]
   11ed8:	str	r4, [sp, #12]
   11edc:	stmib	sp, {r4, r8}
   11ee0:	ldr	r0, [r5, #24]
   11ee4:	cmp	r0, #0
   11ee8:	beq	11efc <rb_sigio_sched_event+0xb0>
   11eec:	mov	r0, sp
   11ef0:	add	r0, r0, #8
   11ef4:	ldrd	r0, [r0]
   11ef8:	stm	sp, {r0, r1}
   11efc:	ldr	r0, [r7]
   11f00:	mov	r2, sp
   11f04:	mov	r1, #0
   11f08:	mov	r3, #0
   11f0c:	bl	506c <timer_settime@plt>
   11f10:	mov	r4, #1
   11f14:	cmn	r0, #1
   11f18:	bgt	11f5c <rb_sigio_sched_event+0x110>
   11f1c:	bl	560c <__errno_location@plt>
   11f20:	ldr	r0, [r0]
   11f24:	bl	4ce8 <strerror@plt>
   11f28:	mov	r1, r0
   11f2c:	ldr	r0, [pc, #60]	; 11f70 <rb_sigio_sched_event+0x124>
   11f30:	add	r0, pc, r0
   11f34:	bl	5240 <rb_lib_log@plt>
   11f38:	mov	r4, #0
   11f3c:	b	11f5c <rb_sigio_sched_event+0x110>
   11f40:	bl	560c <__errno_location@plt>
   11f44:	ldr	r0, [r0]
   11f48:	bl	4ce8 <strerror@plt>
   11f4c:	mov	r1, r0
   11f50:	ldr	r0, [pc, #20]	; 11f6c <rb_sigio_sched_event+0x120>
   11f54:	add	r0, pc, r0
   11f58:	bl	5240 <rb_lib_log@plt>
   11f5c:	mov	r0, r4
   11f60:	sub	sp, fp, #24
   11f64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f68:	.word	0x00033e38
   11f6c:	.word	0x00004867
   11f70:	.word	0x0000489d

00011f74 <rb_sigio_unsched_event>:
   11f74:	push	{r4, sl, fp, lr}
   11f78:	add	fp, sp, #8
   11f7c:	mov	r4, r0
   11f80:	ldr	r0, [pc, #40]	; 11fb0 <rb_sigio_unsched_event+0x3c>
   11f84:	ldr	r0, [pc, r0]
   11f88:	cmp	r0, #1
   11f8c:	poplt	{r4, sl, fp, pc}
   11f90:	ldr	r0, [r4, #40]	; 0x28
   11f94:	ldr	r0, [r0]
   11f98:	bl	5390 <timer_delete@plt>
   11f9c:	ldr	r0, [r4, #40]	; 0x28
   11fa0:	bl	11fb4 <rb_free>
   11fa4:	mov	r0, #0
   11fa8:	str	r0, [r4, #40]	; 0x28
   11fac:	pop	{r4, sl, fp, pc}
   11fb0:	.word	0x00033d14

00011fb4 <rb_free>:
   11fb4:	cmp	r0, #0
   11fb8:	bxeq	lr
   11fbc:	b	500c <free@plt>

00011fc0 <rb_realloc>:
   11fc0:	push	{fp, lr}
   11fc4:	mov	fp, sp
   11fc8:	bl	5558 <realloc@plt>
   11fcc:	cmp	r0, #0
   11fd0:	popne	{fp, pc}
   11fd4:	bl	52a0 <rb_outofmemory@plt>

00011fd8 <rb_setup_fd_select>:
   11fd8:	mov	r0, #0
   11fdc:	bx	lr

00011fe0 <rb_init_netio_select>:
   11fe0:	ldr	r0, [pc, #164]	; 1208c <rb_init_netio_select+0xac>
   11fe4:	ldr	r0, [pc, r0]
   11fe8:	ldr	r1, [r0]
   11fec:	cmp	r1, #1024	; 0x400
   11ff0:	movgt	r1, #1024	; 0x400
   11ff4:	strgt	r1, [r0]
   11ff8:	vmov.i32	q8, #0	; 0x00000000
   11ffc:	mov	r0, #112	; 0x70
   12000:	ldr	r1, [pc, #136]	; 12090 <rb_init_netio_select+0xb0>
   12004:	add	r1, pc, r1
   12008:	mov	r2, r1
   1200c:	vst1.64	{d16-d17}, [r2], r0
   12010:	vst1.64	{d16-d17}, [r2]
   12014:	add	r2, r1, #96	; 0x60
   12018:	vst1.64	{d16-d17}, [r2]
   1201c:	add	r2, r1, #80	; 0x50
   12020:	vst1.64	{d16-d17}, [r2]
   12024:	add	r2, r1, #64	; 0x40
   12028:	vst1.64	{d16-d17}, [r2]
   1202c:	add	r2, r1, #48	; 0x30
   12030:	vst1.64	{d16-d17}, [r2]
   12034:	add	r2, r1, #32
   12038:	vst1.64	{d16-d17}, [r2]
   1203c:	add	r1, r1, #16
   12040:	vst1.64	{d16-d17}, [r1]
   12044:	ldr	r1, [pc, #72]	; 12094 <rb_init_netio_select+0xb4>
   12048:	add	r1, pc, r1
   1204c:	add	r2, r1, #16
   12050:	vst1.64	{d16-d17}, [r2]
   12054:	add	r2, r1, #32
   12058:	vst1.64	{d16-d17}, [r2]
   1205c:	add	r2, r1, #48	; 0x30
   12060:	vst1.64	{d16-d17}, [r2]
   12064:	add	r2, r1, #64	; 0x40
   12068:	vst1.64	{d16-d17}, [r2]
   1206c:	add	r2, r1, #80	; 0x50
   12070:	vst1.64	{d16-d17}, [r2]
   12074:	add	r2, r1, #96	; 0x60
   12078:	vst1.64	{d16-d17}, [r2]
   1207c:	vst1.64	{d16-d17}, [r1], r0
   12080:	vst1.64	{d16-d17}, [r1]
   12084:	mov	r0, #0
   12088:	bx	lr
   1208c:	.word	0x000163a4
   12090:	.word	0x00033c9c
   12094:	.word	0x00033cd8

00012098 <rb_setselect_select>:
   12098:	push	{r4, r5, r6, r7, fp, lr}
   1209c:	add	fp, sp, #16
   120a0:	mov	r5, r3
   120a4:	mov	r4, r2
   120a8:	mov	r7, r1
   120ac:	mov	r6, r0
   120b0:	tst	r1, #1
   120b4:	beq	120d0 <rb_setselect_select+0x38>
   120b8:	str	r4, [r6, #28]
   120bc:	str	r5, [r6, #32]
   120c0:	mov	r0, r6
   120c4:	mov	r1, #1
   120c8:	mov	r2, r4
   120cc:	bl	120f4 <select_update_selectfds>
   120d0:	tst	r7, #2
   120d4:	popeq	{r4, r5, r6, r7, fp, pc}
   120d8:	str	r4, [r6, #36]	; 0x24
   120dc:	str	r5, [r6, #40]	; 0x28
   120e0:	mov	r0, r6
   120e4:	mov	r1, #2
   120e8:	mov	r2, r4
   120ec:	pop	{r4, r5, r6, r7, fp, lr}
   120f0:	b	120f4 <select_update_selectfds>

000120f4 <select_update_selectfds>:
   120f4:	push	{r4, r5, fp, lr}
   120f8:	add	fp, sp, #8
   120fc:	tst	r1, #1
   12100:	beq	12160 <select_update_selectfds+0x6c>
   12104:	ldr	r3, [r0, #12]
   12108:	and	ip, r3, #31
   1210c:	mov	r4, #1
   12110:	lsl	ip, r4, ip
   12114:	asr	r4, r3, #31
   12118:	add	r3, r3, r4, lsr #27
   1211c:	asr	r3, r3, #5
   12120:	ldr	lr, [pc, #324]	; 1226c <select_update_selectfds+0x178>
   12124:	add	lr, pc, lr
   12128:	cmp	r2, #0
   1212c:	beq	12148 <select_update_selectfds+0x54>
   12130:	ldr	r4, [lr, r3, lsl #2]
   12134:	orr	r4, r4, ip
   12138:	str	r4, [lr, r3, lsl #2]
   1213c:	ldr	r3, [r0, #20]
   12140:	orr	r3, r3, #1
   12144:	b	1215c <select_update_selectfds+0x68>
   12148:	ldr	r4, [lr, r3, lsl #2]
   1214c:	bic	r4, r4, ip
   12150:	str	r4, [lr, r3, lsl #2]
   12154:	ldr	r3, [r0, #20]
   12158:	bic	r3, r3, #1
   1215c:	str	r3, [r0, #20]
   12160:	tst	r1, #2
   12164:	beq	121d8 <select_update_selectfds+0xe4>
   12168:	ldr	r3, [r0, #12]
   1216c:	and	r1, r3, #31
   12170:	mov	r4, #1
   12174:	lsl	r1, r4, r1
   12178:	cmp	r2, #0
   1217c:	beq	121ac <select_update_selectfds+0xb8>
   12180:	asr	r2, r3, #31
   12184:	add	r2, r3, r2, lsr #27
   12188:	asr	r2, r2, #5
   1218c:	ldr	r3, [pc, #220]	; 12270 <select_update_selectfds+0x17c>
   12190:	add	r3, pc, r3
   12194:	ldr	r4, [r3, r2, lsl #2]
   12198:	orr	r1, r4, r1
   1219c:	str	r1, [r3, r2, lsl #2]
   121a0:	ldr	r1, [r0, #20]
   121a4:	orr	r1, r1, #2
   121a8:	b	121d4 <select_update_selectfds+0xe0>
   121ac:	asr	r2, r3, #31
   121b0:	add	r2, r3, r2, lsr #27
   121b4:	asr	r2, r2, #5
   121b8:	ldr	r3, [pc, #180]	; 12274 <select_update_selectfds+0x180>
   121bc:	add	r3, pc, r3
   121c0:	ldr	r4, [r3, r2, lsl #2]
   121c4:	bic	r1, r4, r1
   121c8:	str	r1, [r3, r2, lsl #2]
   121cc:	ldr	r1, [r0, #20]
   121d0:	bic	r1, r1, #2
   121d4:	str	r1, [r0, #20]
   121d8:	ldr	r1, [r0, #12]
   121dc:	ldrb	r2, [r0, #20]
   121e0:	ldr	r0, [pc, #144]	; 12278 <select_update_selectfds+0x184>
   121e4:	ldr	r0, [pc, r0]
   121e8:	tst	r2, #3
   121ec:	beq	12208 <select_update_selectfds+0x114>
   121f0:	cmp	r1, r0
   121f4:	pople	{r4, r5, fp, pc}
   121f8:	ldr	r0, [pc, #124]	; 1227c <select_update_selectfds+0x188>
   121fc:	add	r0, pc, r0
   12200:	str	r1, [r0]
   12204:	pop	{r4, r5, fp, pc}
   12208:	cmp	r0, #0
   1220c:	bmi	12268 <select_update_selectfds+0x174>
   12210:	cmp	r1, r0
   12214:	bgt	12268 <select_update_selectfds+0x174>
   12218:	mov	r1, #1
   1221c:	ldr	r2, [pc, #92]	; 12280 <select_update_selectfds+0x18c>
   12220:	add	r2, pc, r2
   12224:	ldr	lr, [pc, #88]	; 12284 <select_update_selectfds+0x190>
   12228:	add	lr, pc, lr
   1222c:	ldr	ip, [pc, #84]	; 12288 <select_update_selectfds+0x194>
   12230:	add	ip, pc, ip
   12234:	and	r4, r0, #31
   12238:	lsr	r3, r0, #5
   1223c:	ldr	r5, [r2, r3, lsl #2]
   12240:	tst	r5, r1, lsl r4
   12244:	lsleq	r4, r1, r4
   12248:	ldreq	r3, [lr, r3, lsl #2]
   1224c:	tsteq	r3, r4
   12250:	bne	12268 <select_update_selectfds+0x174>
   12254:	sub	r3, r0, #1
   12258:	str	r3, [ip]
   1225c:	cmp	r0, #0
   12260:	mov	r0, r3
   12264:	bgt	12234 <select_update_selectfds+0x140>
   12268:	pop	{r4, r5, fp, pc}
   1226c:	.word	0x00033b7c
   12270:	.word	0x00033b90
   12274:	.word	0x00033b64
   12278:	.word	0x0001628c
   1227c:	.word	0x00016274
   12280:	.word	0x00033a80
   12284:	.word	0x00033af8
   12288:	.word	0x00016240

0001228c <rb_select_select>:
   1228c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12290:	add	fp, sp, #28
   12294:	sub	sp, sp, #12
   12298:	mov	r6, r0
   1229c:	ldr	r9, [pc, #416]	; 12444 <rb_select_select+0x1b8>
   122a0:	add	r9, pc, r9
   122a4:	ldr	r1, [pc, #412]	; 12448 <rb_select_select+0x1bc>
   122a8:	add	r1, pc, r1
   122ac:	mov	r0, r9
   122b0:	mov	r2, #128	; 0x80
   122b4:	bl	5120 <memcpy@plt>
   122b8:	ldr	sl, [pc, #396]	; 1244c <rb_select_select+0x1c0>
   122bc:	add	sl, pc, sl
   122c0:	ldr	r1, [pc, #392]	; 12450 <rb_select_select+0x1c4>
   122c4:	add	r1, pc, r1
   122c8:	mov	r0, sl
   122cc:	mov	r2, #128	; 0x80
   122d0:	bl	5120 <memcpy@plt>
   122d4:	mov	r0, #1000	; 0x3e8
   122d8:	mul	r7, r6, r0
   122dc:	mov	r5, #0
   122e0:	add	r4, sp, #4
   122e4:	stmib	sp, {r5, r7}
   122e8:	ldr	r0, [pc, #356]	; 12454 <rb_select_select+0x1c8>
   122ec:	ldr	r0, [pc, r0]
   122f0:	str	r4, [sp]
   122f4:	add	r0, r0, #1
   122f8:	mov	r1, r9
   122fc:	mov	r2, sl
   12300:	mov	r3, #0
   12304:	bl	5258 <select@plt>
   12308:	cmn	r0, #1
   1230c:	bgt	12334 <rb_select_select+0xa8>
   12310:	bl	560c <__errno_location@plt>
   12314:	ldr	r0, [r0]
   12318:	bl	4d24 <rb_ignore_errno@plt>
   1231c:	cmp	r0, #0
   12320:	bne	122e4 <rb_select_select+0x58>
   12324:	bl	52ac <rb_set_time@plt>
   12328:	mvn	r0, #0
   1232c:	sub	sp, fp, #28
   12330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12334:	mov	r6, r0
   12338:	bl	52ac <rb_set_time@plt>
   1233c:	mov	r0, #0
   12340:	cmp	r6, #0
   12344:	beq	1243c <rb_select_select+0x1b0>
   12348:	ldr	r1, [pc, #264]	; 12458 <rb_select_select+0x1cc>
   1234c:	ldr	r1, [pc, r1]
   12350:	cmp	r1, #0
   12354:	bmi	1243c <rb_select_select+0x1b0>
   12358:	mvn	r6, #0
   1235c:	mov	r8, #1
   12360:	b	12374 <rb_select_select+0xe8>
   12364:	ldr	r0, [pc, #240]	; 1245c <rb_select_select+0x1d0>
   12368:	ldr	r0, [pc, r0]
   1236c:	cmp	r6, r0
   12370:	bge	12438 <rb_select_select+0x1ac>
   12374:	add	r6, r6, #1
   12378:	mov	r0, r6
   1237c:	bl	12460 <rb_find_fd>
   12380:	cmp	r0, #0
   12384:	beq	12364 <rb_select_select+0xd8>
   12388:	mov	r7, r0
   1238c:	and	r4, r6, #31
   12390:	lsr	r5, r6, #5
   12394:	ldr	r0, [r9, r5, lsl #2]
   12398:	tst	r0, r8, lsl r4
   1239c:	beq	123c0 <rb_select_select+0x134>
   123a0:	ldr	r2, [r7, #28]
   123a4:	mov	r0, #0
   123a8:	str	r0, [r7, #28]
   123ac:	cmp	r2, #0
   123b0:	beq	123c0 <rb_select_select+0x134>
   123b4:	ldr	r1, [r7, #32]
   123b8:	mov	r0, r7
   123bc:	blx	r2
   123c0:	ldrb	r0, [r7, #16]
   123c4:	tst	r0, #1
   123c8:	beq	12364 <rb_select_select+0xd8>
   123cc:	lsl	r0, r8, r4
   123d0:	ldr	r1, [sl, r5, lsl #2]
   123d4:	tst	r1, r0
   123d8:	beq	123fc <rb_select_select+0x170>
   123dc:	ldr	r2, [r7, #36]	; 0x24
   123e0:	mov	r0, #0
   123e4:	str	r0, [r7, #36]	; 0x24
   123e8:	cmp	r2, #0
   123ec:	beq	123fc <rb_select_select+0x170>
   123f0:	ldr	r1, [r7, #40]	; 0x28
   123f4:	mov	r0, r7
   123f8:	blx	r2
   123fc:	ldr	r0, [r7, #28]
   12400:	cmp	r0, #0
   12404:	bne	12418 <rb_select_select+0x18c>
   12408:	mov	r0, r7
   1240c:	mov	r1, #1
   12410:	mov	r2, #0
   12414:	bl	120f4 <select_update_selectfds>
   12418:	ldr	r0, [r7, #36]	; 0x24
   1241c:	cmp	r0, #0
   12420:	bne	12364 <rb_select_select+0xd8>
   12424:	mov	r0, r7
   12428:	mov	r1, #2
   1242c:	mov	r2, #0
   12430:	bl	120f4 <select_update_selectfds>
   12434:	b	12364 <rb_select_select+0xd8>
   12438:	mov	r0, #0
   1243c:	sub	sp, fp, #28
   12440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12444:	.word	0x00033b00
   12448:	.word	0x000339f8
   1244c:	.word	0x00033b64
   12450:	.word	0x00033a5c
   12454:	.word	0x00016184
   12458:	.word	0x00016124
   1245c:	.word	0x00016108

00012460 <rb_find_fd>:
   12460:	cmp	r0, #0
   12464:	bmi	124ac <rb_find_fd+0x4c>
   12468:	eor	r1, r0, r0, lsr #12
   1246c:	bfc	r1, #12, #20
   12470:	eor	r1, r1, r0, lsr #24
   12474:	add	r1, r1, r1, lsl #1
   12478:	ldr	r2, [pc, #56]	; 124b8 <rb_find_fd+0x58>
   1247c:	ldr	r2, [pc, r2]
   12480:	ldr	r2, [r2]
   12484:	ldr	r2, [r2, r1, lsl #2]
   12488:	cmp	r2, #0
   1248c:	beq	124ac <rb_find_fd+0x4c>
   12490:	ldr	r1, [r2]
   12494:	ldr	r3, [r1, #12]
   12498:	cmp	r3, r0
   1249c:	beq	124b0 <rb_find_fd+0x50>
   124a0:	ldr	r2, [r2, #8]
   124a4:	cmp	r2, #0
   124a8:	bne	12490 <rb_find_fd+0x30>
   124ac:	mov	r1, #0
   124b0:	mov	r0, r1
   124b4:	bx	lr
   124b8:	.word	0x00015f2c

000124bc <rb_init_netio_kqueue>:
   124bc:	push	{fp, lr}
   124c0:	mov	fp, sp
   124c4:	bl	560c <__errno_location@plt>
   124c8:	mov	r1, #38	; 0x26
   124cc:	str	r1, [r0]
   124d0:	mvn	r0, #0
   124d4:	pop	{fp, pc}

000124d8 <rb_setselect_kqueue>:
   124d8:	push	{fp, lr}
   124dc:	mov	fp, sp
   124e0:	bl	560c <__errno_location@plt>
   124e4:	mov	r1, #38	; 0x26
   124e8:	str	r1, [r0]
   124ec:	pop	{fp, pc}

000124f0 <rb_select_kqueue>:
   124f0:	push	{fp, lr}
   124f4:	mov	fp, sp
   124f8:	bl	560c <__errno_location@plt>
   124fc:	mov	r1, #38	; 0x26
   12500:	str	r1, [r0]
   12504:	mvn	r0, #0
   12508:	pop	{fp, pc}

0001250c <rb_setup_fd_kqueue>:
   1250c:	push	{fp, lr}
   12510:	mov	fp, sp
   12514:	bl	560c <__errno_location@plt>
   12518:	mov	r1, #38	; 0x26
   1251c:	str	r1, [r0]
   12520:	mvn	r0, #0
   12524:	pop	{fp, pc}

00012528 <rb_kqueue_init_event>:
   12528:	bx	lr

0001252c <rb_kqueue_sched_event>:
   1252c:	push	{fp, lr}
   12530:	mov	fp, sp
   12534:	bl	560c <__errno_location@plt>
   12538:	mov	r1, #38	; 0x26
   1253c:	str	r1, [r0]
   12540:	mvn	r0, #0
   12544:	pop	{fp, pc}

00012548 <rb_kqueue_unsched_event>:
   12548:	bx	lr

0001254c <rb_kqueue_supports_event>:
   1254c:	push	{fp, lr}
   12550:	mov	fp, sp
   12554:	bl	560c <__errno_location@plt>
   12558:	mov	r1, #38	; 0x26
   1255c:	str	r1, [r0]
   12560:	mov	r0, #0
   12564:	pop	{fp, pc}

00012568 <rb_rawbuf_flush>:
   12568:	push	{r4, r5, r6, sl, fp, lr}
   1256c:	add	fp, sp, #16
   12570:	mov	r4, r0
   12574:	ldr	r0, [r0]
   12578:	cmp	r0, #0
   1257c:	beq	1262c <rb_rawbuf_flush+0xc4>
   12580:	mov	r6, r1
   12584:	mov	r0, r1
   12588:	bl	4df0 <rb_fd_ssl@plt>
   1258c:	cmp	r0, #0
   12590:	beq	12644 <rb_rawbuf_flush+0xdc>
   12594:	ldr	r0, [r4]
   12598:	ldr	r5, [r0]
   1259c:	ldrb	r0, [r5, #1040]	; 0x410
   125a0:	cmp	r0, #0
   125a4:	moveq	r0, #1
   125a8:	strbeq	r0, [r5, #1040]	; 0x410
   125ac:	moveq	r0, #0
   125b0:	streq	r0, [r4, #16]
   125b4:	ldr	r0, [r4, #16]
   125b8:	ldr	r1, [r5, #1036]	; 0x40c
   125bc:	sub	r2, r1, r0
   125c0:	add	r0, r5, r0
   125c4:	add	r1, r0, #12
   125c8:	mov	r0, r6
   125cc:	bl	4f88 <rb_write@plt>
   125d0:	mov	r6, r0
   125d4:	cmp	r0, #1
   125d8:	blt	12624 <rb_rawbuf_flush+0xbc>
   125dc:	ldr	r0, [r4, #16]
   125e0:	add	r0, r0, r6
   125e4:	str	r0, [r4, #16]
   125e8:	ldr	r1, [r5, #1036]	; 0x40c
   125ec:	cmp	r0, r1
   125f0:	bne	12618 <rb_rawbuf_flush+0xb0>
   125f4:	mov	r0, #0
   125f8:	str	r0, [r4, #16]
   125fc:	mov	r0, r5
   12600:	mov	r1, r4
   12604:	bl	127b8 <rb_dlinkDelete>
   12608:	ldr	r0, [pc, #68]	; 12654 <rb_rawbuf_flush+0xec>
   1260c:	ldr	r0, [pc, r0]
   12610:	mov	r1, r5
   12614:	bl	51f8 <rb_bh_free@plt>
   12618:	ldr	r0, [r4, #12]
   1261c:	sub	r0, r0, r6
   12620:	str	r0, [r4, #12]
   12624:	mov	r0, r6
   12628:	pop	{r4, r5, r6, sl, fp, pc}
   1262c:	bl	560c <__errno_location@plt>
   12630:	mov	r1, #11
   12634:	str	r1, [r0]
   12638:	mvn	r6, #0
   1263c:	mov	r0, r6
   12640:	pop	{r4, r5, r6, sl, fp, pc}
   12644:	mov	r0, r4
   12648:	mov	r1, r6
   1264c:	pop	{r4, r5, r6, sl, fp, lr}
   12650:	b	12658 <rb_rawbuf_flush_writev>
   12654:	.word	0x00033894

00012658 <rb_rawbuf_flush_writev>:
   12658:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1265c:	add	fp, sp, #24
   12660:	sub	sp, sp, #8
   12664:	sub	sp, sp, #8192	; 0x2000
   12668:	mov	r8, r1
   1266c:	mov	r4, r0
   12670:	mov	r7, sp
   12674:	mov	r6, #0
   12678:	mov	r0, r7
   1267c:	mov	r1, #0
   12680:	mov	r2, #8192	; 0x2000
   12684:	bl	4f58 <memset@plt>
   12688:	ldr	r0, [r4]
   1268c:	cmp	r0, #0
   12690:	beq	12780 <rb_rawbuf_flush_writev+0x128>
   12694:	movw	r1, #1023	; 0x3ff
   12698:	ldr	r2, [r0]
   1269c:	ldrb	r3, [r2, #1040]	; 0x410
   126a0:	cmp	r3, #0
   126a4:	beq	126c4 <rb_rawbuf_flush_writev+0x6c>
   126a8:	ldr	r3, [r4, #16]
   126ac:	add	r5, r2, r3
   126b0:	add	r5, r5, #12
   126b4:	str	r5, [r7, r6, lsl #3]
   126b8:	ldr	r2, [r2, #1036]	; 0x40c
   126bc:	sub	r2, r2, r3
   126c0:	b	126d0 <rb_rawbuf_flush_writev+0x78>
   126c4:	add	r3, r2, #12
   126c8:	str	r3, [r7, r6, lsl #3]
   126cc:	ldr	r2, [r2, #1036]	; 0x40c
   126d0:	add	r3, r7, r6, lsl #3
   126d4:	str	r2, [r3, #4]
   126d8:	add	r5, r6, #1
   126dc:	ldr	r0, [r0, #8]
   126e0:	cmp	r0, #0
   126e4:	beq	126f4 <rb_rawbuf_flush_writev+0x9c>
   126e8:	cmp	r6, r1
   126ec:	mov	r6, r5
   126f0:	bcc	12698 <rb_rawbuf_flush_writev+0x40>
   126f4:	mov	r1, sp
   126f8:	mov	r0, r8
   126fc:	mov	r2, r5
   12700:	bl	53f0 <rb_writev@plt>
   12704:	mov	r8, r0
   12708:	cmp	r0, #1
   1270c:	blt	12790 <rb_rawbuf_flush_writev+0x138>
   12710:	ldr	r9, [r4]
   12714:	cmp	r9, #0
   12718:	beq	12790 <rb_rawbuf_flush_writev+0x138>
   1271c:	mov	r6, r8
   12720:	b	12754 <rb_rawbuf_flush_writev+0xfc>
   12724:	ldr	r7, [r1, #1036]	; 0x40c
   12728:	cmp	r6, r7
   1272c:	blt	1279c <rb_rawbuf_flush_writev+0x144>
   12730:	ldr	r0, [r4, #12]
   12734:	sub	r0, r0, r7
   12738:	str	r0, [r4, #12]
   1273c:	mov	r0, r4
   12740:	bl	129f0 <rb_rawbuf_done>
   12744:	cmp	r9, #0
   12748:	subne	r6, r6, r7
   1274c:	subsne	r5, r5, #1
   12750:	beq	12790 <rb_rawbuf_flush_writev+0x138>
   12754:	ldr	r1, [r9]
   12758:	ldr	r9, [r9, #8]
   1275c:	ldrb	r0, [r1, #1040]	; 0x410
   12760:	cmp	r0, #0
   12764:	beq	12724 <rb_rawbuf_flush_writev+0xcc>
   12768:	ldr	r0, [r4, #16]
   1276c:	ldr	r2, [r1, #1036]	; 0x40c
   12770:	sub	r7, r2, r0
   12774:	cmp	r6, r7
   12778:	blt	12724 <rb_rawbuf_flush_writev+0xcc>
   1277c:	b	12730 <rb_rawbuf_flush_writev+0xd8>
   12780:	bl	560c <__errno_location@plt>
   12784:	mov	r1, #11
   12788:	str	r1, [r0]
   1278c:	mvn	r8, #0
   12790:	mov	r0, r8
   12794:	sub	sp, fp, #24
   12798:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1279c:	mov	r0, #1
   127a0:	strb	r0, [r1, #1040]	; 0x410
   127a4:	str	r6, [r4, #16]
   127a8:	ldr	r0, [r4, #12]
   127ac:	sub	r0, r0, r6
   127b0:	str	r0, [r4, #12]
   127b4:	b	12790 <rb_rawbuf_flush_writev+0x138>

000127b8 <rb_dlinkDelete>:
   127b8:	ldr	ip, [r0, #4]
   127bc:	ldr	r3, [r0, #8]
   127c0:	add	r2, r3, #4
   127c4:	cmp	r3, #0
   127c8:	addeq	r2, r1, #4
   127cc:	str	ip, [r2]
   127d0:	ldmib	r0, {r2, ip}
   127d4:	cmp	r2, #0
   127d8:	mov	r3, r1
   127dc:	addne	r3, r2, #8
   127e0:	str	ip, [r3]
   127e4:	mov	r2, #0
   127e8:	str	r2, [r0, #4]
   127ec:	str	r2, [r0, #8]
   127f0:	ldr	r0, [r1, #8]
   127f4:	sub	r0, r0, #1
   127f8:	str	r0, [r1, #8]
   127fc:	bx	lr

00012800 <rb_rawbuf_append>:
   12800:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12804:	add	fp, sp, #24
   12808:	mov	r6, r2
   1280c:	mov	r5, r1
   12810:	mov	r8, r0
   12814:	ldr	r0, [r0, #4]
   12818:	cmp	r0, #0
   1281c:	beq	12844 <rb_rawbuf_append+0x44>
   12820:	ldr	r0, [r0]
   12824:	cmp	r0, #0
   12828:	beq	12844 <rb_rawbuf_append+0x44>
   1282c:	ldr	r1, [r0, #1036]	; 0x40c
   12830:	cmp	r1, #1024	; 0x400
   12834:	bge	12844 <rb_rawbuf_append+0x44>
   12838:	ldrb	r0, [r0, #1040]	; 0x410
   1283c:	cmp	r0, #0
   12840:	beq	128a0 <rb_rawbuf_append+0xa0>
   12844:	cmp	r6, #1
   12848:	blt	1289c <rb_rawbuf_append+0x9c>
   1284c:	mov	r0, r8
   12850:	bl	128fc <rb_rawbuf_newbuf>
   12854:	mov	r7, r0
   12858:	cmp	r6, #1024	; 0x400
   1285c:	mov	r4, r6
   12860:	movge	r4, #1024	; 0x400
   12864:	add	r0, r0, #12
   12868:	mov	r1, r5
   1286c:	mov	r2, r4
   12870:	bl	5120 <memcpy@plt>
   12874:	ldr	r0, [r7, #1036]	; 0x40c
   12878:	add	r0, r0, r4
   1287c:	str	r0, [r7, #1036]	; 0x40c
   12880:	ldr	r0, [r8, #12]
   12884:	add	r0, r0, r4
   12888:	str	r0, [r8, #12]
   1288c:	add	r5, r5, r4
   12890:	sub	r6, r6, r4
   12894:	cmp	r6, #0
   12898:	bgt	1284c <rb_rawbuf_append+0x4c>
   1289c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   128a0:	ldr	r0, [r8, #4]
   128a4:	ldr	r4, [r0]
   128a8:	ldr	r0, [r4, #1036]	; 0x40c
   128ac:	rsb	r7, r0, #1024	; 0x400
   128b0:	cmp	r7, r6
   128b4:	movgt	r7, r6
   128b8:	add	r0, r4, r0
   128bc:	add	r0, r0, #12
   128c0:	mov	r1, r5
   128c4:	mov	r2, r7
   128c8:	bl	5120 <memcpy@plt>
   128cc:	ldr	r0, [r4, #1036]	; 0x40c
   128d0:	add	r0, r7, r0
   128d4:	str	r0, [r4, #1036]	; 0x40c
   128d8:	ldr	r0, [r8, #12]
   128dc:	add	r0, r0, r7
   128e0:	str	r0, [r8, #12]
   128e4:	subs	r6, r6, r7
   128e8:	beq	1289c <rb_rawbuf_append+0x9c>
   128ec:	add	r5, r5, r7
   128f0:	cmp	r6, #1
   128f4:	bge	1284c <rb_rawbuf_append+0x4c>
   128f8:	b	1289c <rb_rawbuf_append+0x9c>

000128fc <rb_rawbuf_newbuf>:
   128fc:	push	{r4, r5, fp, lr}
   12900:	add	fp, sp, #8
   12904:	mov	r4, r0
   12908:	bl	12adc <rb_rawbuf_alloc>
   1290c:	mov	r5, r0
   12910:	mov	r1, r0
   12914:	mov	r2, r4
   12918:	bl	12aec <rb_dlinkAddTail>
   1291c:	mov	r0, r5
   12920:	pop	{r4, r5, fp, pc}

00012924 <rb_rawbuf_get>:
   12924:	push	{r4, r5, r6, r7, fp, lr}
   12928:	add	fp, sp, #16
   1292c:	mov	r4, r0
   12930:	ldr	r0, [r0]
   12934:	cmp	r0, #0
   12938:	beq	12960 <rb_rawbuf_get+0x3c>
   1293c:	mov	r5, r2
   12940:	ldr	r7, [r0]
   12944:	ldrb	r0, [r7, #1040]	; 0x410
   12948:	cmp	r0, #0
   1294c:	beq	1296c <rb_rawbuf_get+0x48>
   12950:	ldr	r0, [r4, #16]
   12954:	add	r0, r7, r0
   12958:	add	r2, r0, #12
   1295c:	b	12970 <rb_rawbuf_get+0x4c>
   12960:	mov	r6, #0
   12964:	mov	r0, r6
   12968:	pop	{r4, r5, r6, r7, fp, pc}
   1296c:	add	r2, r7, #12
   12970:	ldr	r6, [r7, #1036]	; 0x40c
   12974:	cmp	r6, r5
   12978:	movge	r6, r5
   1297c:	mov	r0, r1
   12980:	mov	r1, r2
   12984:	mov	r2, r6
   12988:	bl	5120 <memcpy@plt>
   1298c:	ldr	r0, [r7, #1036]	; 0x40c
   12990:	cmp	r0, r6
   12994:	bne	129c0 <rb_rawbuf_get+0x9c>
   12998:	mov	r0, #0
   1299c:	str	r0, [r4, #16]
   129a0:	mov	r0, r4
   129a4:	mov	r1, r7
   129a8:	bl	129f0 <rb_rawbuf_done>
   129ac:	ldr	r0, [r4, #12]
   129b0:	sub	r0, r0, r5
   129b4:	str	r0, [r4, #12]
   129b8:	mov	r0, r6
   129bc:	pop	{r4, r5, r6, r7, fp, pc}
   129c0:	mov	r1, #1
   129c4:	strb	r1, [r7, #1040]	; 0x410
   129c8:	sub	r0, r0, r6
   129cc:	str	r0, [r7, #1036]	; 0x40c
   129d0:	ldr	r0, [r4, #12]
   129d4:	ldr	r1, [r4, #16]
   129d8:	sub	r0, r0, r6
   129dc:	add	r1, r1, r6
   129e0:	str	r0, [r4, #12]
   129e4:	str	r1, [r4, #16]
   129e8:	mov	r0, r6
   129ec:	pop	{r4, r5, r6, r7, fp, pc}

000129f0 <rb_rawbuf_done>:
   129f0:	push	{r4, sl, fp, lr}
   129f4:	add	fp, sp, #8
   129f8:	mov	r4, r1
   129fc:	mov	r1, r0
   12a00:	mov	r0, r4
   12a04:	bl	127b8 <rb_dlinkDelete>
   12a08:	ldr	r0, [pc, #12]	; 12a1c <rb_rawbuf_done+0x2c>
   12a0c:	ldr	r0, [pc, r0]
   12a10:	mov	r1, r4
   12a14:	pop	{r4, sl, fp, lr}
   12a18:	b	51f8 <rb_bh_free@plt>
   12a1c:	.word	0x00033494

00012a20 <rb_rawbuf_length>:
   12a20:	ldr	r0, [r0, #12]
   12a24:	bx	lr

00012a28 <rb_new_rawbuffer>:
   12a28:	b	12a2c <rb_malloc>

00012a2c <rb_malloc>:
   12a2c:	push	{fp, lr}
   12a30:	mov	fp, sp
   12a34:	mov	r0, #1
   12a38:	mov	r1, #20
   12a3c:	bl	4f1c <calloc@plt>
   12a40:	cmp	r0, #0
   12a44:	popne	{fp, pc}
   12a48:	bl	52a0 <rb_outofmemory@plt>

00012a4c <rb_free_rawbuffer>:
   12a4c:	push	{r4, r5, fp, lr}
   12a50:	add	fp, sp, #8
   12a54:	mov	r4, r0
   12a58:	ldr	r5, [r0]
   12a5c:	cmp	r5, #0
   12a60:	beq	12a7c <rb_free_rawbuffer+0x30>
   12a64:	ldr	r1, [r5]
   12a68:	ldr	r5, [r5, #8]
   12a6c:	mov	r0, r4
   12a70:	bl	129f0 <rb_rawbuf_done>
   12a74:	cmp	r5, #0
   12a78:	bne	12a64 <rb_free_rawbuffer+0x18>
   12a7c:	mov	r0, r4
   12a80:	pop	{r4, r5, fp, lr}
   12a84:	b	12a88 <rb_free>

00012a88 <rb_free>:
   12a88:	cmp	r0, #0
   12a8c:	bxeq	lr
   12a90:	b	500c <free@plt>

00012a94 <rb_init_rawbuffers>:
   12a94:	push	{fp, lr}
   12a98:	mov	fp, sp
   12a9c:	mov	r1, r0
   12aa0:	ldr	r0, [pc, #40]	; 12ad0 <rb_init_rawbuffers+0x3c>
   12aa4:	ldr	r0, [pc, r0]
   12aa8:	cmp	r0, #0
   12aac:	popne	{fp, pc}
   12ab0:	ldr	r2, [pc, #28]	; 12ad4 <rb_init_rawbuffers+0x40>
   12ab4:	add	r2, pc, r2
   12ab8:	movw	r0, #1044	; 0x414
   12abc:	bl	53cc <rb_bh_create@plt>
   12ac0:	ldr	r1, [pc, #16]	; 12ad8 <rb_init_rawbuffers+0x44>
   12ac4:	add	r1, pc, r1
   12ac8:	str	r0, [r1]
   12acc:	pop	{fp, pc}
   12ad0:	.word	0x000333fc
   12ad4:	.word	0x00003d9d
   12ad8:	.word	0x000333dc

00012adc <rb_rawbuf_alloc>:
   12adc:	ldr	r0, [pc, #4]	; 12ae8 <rb_rawbuf_alloc+0xc>
   12ae0:	ldr	r0, [pc, r0]
   12ae4:	b	5270 <rb_bh_alloc@plt>
   12ae8:	.word	0x000333c0

00012aec <rb_dlinkAddTail>:
   12aec:	mov	r3, #0
   12af0:	str	r3, [r1, #8]
   12af4:	str	r0, [r1]
   12af8:	ldr	r0, [r2, #4]
   12afc:	str	r0, [r1, #4]
   12b00:	ldr	r0, [r2, #4]
   12b04:	cmp	r0, #0
   12b08:	beq	12b18 <rb_dlinkAddTail+0x2c>
   12b0c:	add	r0, r0, #8
   12b10:	str	r1, [r0]
   12b14:	b	12b24 <rb_dlinkAddTail+0x38>
   12b18:	ldr	r0, [r2]
   12b1c:	cmp	r0, #0
   12b20:	beq	12b38 <rb_dlinkAddTail+0x4c>
   12b24:	str	r1, [r2, #4]
   12b28:	ldr	r0, [r2, #8]
   12b2c:	add	r0, r0, #1
   12b30:	str	r0, [r2, #8]
   12b34:	bx	lr
   12b38:	mov	r0, r2
   12b3c:	b	12b10 <rb_dlinkAddTail+0x24>

00012b40 <rb_init_patricia>:
   12b40:	bx	lr

00012b44 <rb_new_patricia>:
   12b44:	push	{r4, sl, fp, lr}
   12b48:	add	fp, sp, #8
   12b4c:	mov	r4, r0
   12b50:	mov	r0, #12
   12b54:	bl	12b88 <rb_malloc>
   12b58:	mov	r1, #0
   12b5c:	stm	r0, {r1, r4}
   12b60:	str	r1, [r0, #8]
   12b64:	ldr	r1, [pc, #20]	; 12b80 <rb_new_patricia+0x3c>
   12b68:	ldr	r1, [pc, r1]
   12b6c:	add	r1, r1, #1
   12b70:	ldr	r2, [pc, #12]	; 12b84 <rb_new_patricia+0x40>
   12b74:	add	r2, pc, r2
   12b78:	str	r1, [r2]
   12b7c:	pop	{r4, sl, fp, pc}
   12b80:	.word	0x0003333c
   12b84:	.word	0x00033330

00012b88 <rb_malloc>:
   12b88:	push	{fp, lr}
   12b8c:	mov	fp, sp
   12b90:	mov	r1, r0
   12b94:	mov	r0, #1
   12b98:	bl	4f1c <calloc@plt>
   12b9c:	cmp	r0, #0
   12ba0:	popne	{fp, pc}
   12ba4:	bl	52a0 <rb_outofmemory@plt>

00012ba8 <rb_clear_patricia>:
   12ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bac:	add	fp, sp, #28
   12bb0:	sub	sp, sp, #524	; 0x20c
   12bb4:	mov	r4, r0
   12bb8:	ldr	r6, [r0]
   12bbc:	cmp	r6, #0
   12bc0:	beq	12c5c <rb_clear_patricia+0xb4>
   12bc4:	mov	r9, r1
   12bc8:	mov	sl, #0
   12bcc:	add	r8, sp, #4
   12bd0:	b	12bec <rb_clear_patricia+0x44>
   12bd4:	cmp	r7, #0
   12bd8:	strne	r7, [r8, sl, lsl #2]
   12bdc:	addne	sl, sl, #1
   12be0:	mov	r6, r5
   12be4:	cmp	r6, #0
   12be8:	beq	12c5c <rb_clear_patricia+0xb4>
   12bec:	ldmib	r6, {r0, r5, r7}
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c10 <rb_clear_patricia+0x68>
   12bf8:	bl	12c6c <Deref_Prefix>
   12bfc:	cmp	r9, #0
   12c00:	ldrne	r0, [r6, #20]
   12c04:	cmpne	r0, #0
   12c08:	beq	12c10 <rb_clear_patricia+0x68>
   12c0c:	blx	r9
   12c10:	mov	r0, r6
   12c14:	bl	12c8c <rb_free>
   12c18:	ldr	r0, [r4, #8]
   12c1c:	sub	r0, r0, #1
   12c20:	str	r0, [r4, #8]
   12c24:	cmp	r5, #0
   12c28:	bne	12bd4 <rb_clear_patricia+0x2c>
   12c2c:	cmp	r7, #0
   12c30:	beq	12c44 <rb_clear_patricia+0x9c>
   12c34:	mov	r6, r7
   12c38:	cmp	r6, #0
   12c3c:	bne	12bec <rb_clear_patricia+0x44>
   12c40:	b	12c5c <rb_clear_patricia+0xb4>
   12c44:	cmp	sl, #0
   12c48:	beq	12c5c <rb_clear_patricia+0xb4>
   12c4c:	sub	sl, sl, #1
   12c50:	ldr	r6, [r8, sl, lsl #2]
   12c54:	cmp	r6, #0
   12c58:	bne	12bec <rb_clear_patricia+0x44>
   12c5c:	mov	r0, r4
   12c60:	sub	sp, fp, #28
   12c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c68:	b	12c8c <rb_free>

00012c6c <Deref_Prefix>:
   12c6c:	cmp	r0, #0
   12c70:	bxeq	lr
   12c74:	ldr	r1, [r0, #4]
   12c78:	subs	r1, r1, #1
   12c7c:	str	r1, [r0, #4]
   12c80:	bgt	12c88 <Deref_Prefix+0x1c>
   12c84:	b	12c8c <rb_free>
   12c88:	bx	lr

00012c8c <rb_free>:
   12c8c:	cmp	r0, #0
   12c90:	bxeq	lr
   12c94:	b	500c <free@plt>

00012c98 <rb_destroy_patricia>:
   12c98:	push	{fp, lr}
   12c9c:	mov	fp, sp
   12ca0:	bl	4e38 <rb_clear_patricia@plt>
   12ca4:	ldr	r0, [pc, #20]	; 12cc0 <rb_destroy_patricia+0x28>
   12ca8:	ldr	r0, [pc, r0]
   12cac:	sub	r0, r0, #1
   12cb0:	ldr	r1, [pc, #12]	; 12cc4 <rb_destroy_patricia+0x2c>
   12cb4:	add	r1, pc, r1
   12cb8:	str	r0, [r1]
   12cbc:	pop	{fp, pc}
   12cc0:	.word	0x000331fc
   12cc4:	.word	0x000331f0

00012cc8 <rb_patricia_process>:
   12cc8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12ccc:	add	fp, sp, #24
   12cd0:	sub	sp, sp, #520	; 0x208
   12cd4:	ldr	r7, [r0]
   12cd8:	cmp	r7, #0
   12cdc:	beq	12d58 <rb_patricia_process+0x90>
   12ce0:	mov	r4, r1
   12ce4:	mov	r5, #0
   12ce8:	add	r6, sp, #4
   12cec:	b	12d08 <rb_patricia_process+0x40>
   12cf0:	cmp	r0, #0
   12cf4:	strne	r0, [r6, r5, lsl #2]
   12cf8:	addne	r5, r5, #1
   12cfc:	ldr	r7, [r7]
   12d00:	cmp	r7, #0
   12d04:	beq	12d58 <rb_patricia_process+0x90>
   12d08:	ldr	r0, [r7, #4]
   12d0c:	cmp	r0, #0
   12d10:	beq	12d1c <rb_patricia_process+0x54>
   12d14:	ldr	r1, [r7, #20]
   12d18:	blx	r4
   12d1c:	ldr	r1, [r7, #8]!
   12d20:	ldr	r0, [r7, #4]
   12d24:	cmp	r1, #0
   12d28:	bne	12cf0 <rb_patricia_process+0x28>
   12d2c:	cmp	r0, #0
   12d30:	beq	12d44 <rb_patricia_process+0x7c>
   12d34:	mov	r7, r0
   12d38:	cmp	r7, #0
   12d3c:	bne	12d08 <rb_patricia_process+0x40>
   12d40:	b	12d58 <rb_patricia_process+0x90>
   12d44:	cmp	r5, #0
   12d48:	beq	12d58 <rb_patricia_process+0x90>
   12d4c:	sub	r5, r5, #1
   12d50:	add	r7, r6, r5, lsl #2
   12d54:	b	12cfc <rb_patricia_process+0x34>
   12d58:	sub	sp, fp, #24
   12d5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012d60 <rb_patricia_search_exact>:
   12d60:	push	{r4, r5, r6, r7, fp, lr}
   12d64:	add	fp, sp, #16
   12d68:	ldr	r7, [r0]
   12d6c:	mov	r0, #0
   12d70:	cmp	r7, #0
   12d74:	beq	12df8 <rb_patricia_search_exact+0x98>
   12d78:	mov	r4, r1
   12d7c:	add	r1, r1, #8
   12d80:	ldrh	r5, [r4, #2]
   12d84:	mov	r2, #128	; 0x80
   12d88:	ldr	r3, [r7]
   12d8c:	cmp	r3, r5
   12d90:	bcs	12db8 <rb_patricia_search_exact+0x58>
   12d94:	ldrb	r6, [r1, r3, lsr #3]
   12d98:	and	r3, r3, #7
   12d9c:	tst	r6, r2, lsr r3
   12da0:	mov	r3, #12
   12da4:	movweq	r3, #8
   12da8:	ldr	r7, [r7, r3]
   12dac:	cmp	r7, #0
   12db0:	bne	12d88 <rb_patricia_search_exact+0x28>
   12db4:	b	12df8 <rb_patricia_search_exact+0x98>
   12db8:	bhi	12df8 <rb_patricia_search_exact+0x98>
   12dbc:	ldr	r1, [r7, #4]
   12dc0:	cmp	r1, #0
   12dc4:	beq	12df8 <rb_patricia_search_exact+0x98>
   12dc8:	mov	r0, r1
   12dcc:	bl	12e60 <prefix_tochar>
   12dd0:	mov	r6, r0
   12dd4:	mov	r0, r4
   12dd8:	bl	12e60 <prefix_tochar>
   12ddc:	mov	r1, r0
   12de0:	mov	r0, r6
   12de4:	mov	r2, r5
   12de8:	bl	12dfc <comp_with_mask>
   12dec:	cmp	r0, #0
   12df0:	moveq	r7, r0
   12df4:	mov	r0, r7
   12df8:	pop	{r4, r5, r6, r7, fp, pc}

00012dfc <comp_with_mask>:
   12dfc:	push	{r4, r5, r6, r7, fp, lr}
   12e00:	add	fp, sp, #16
   12e04:	mov	r7, r2
   12e08:	mov	r4, r1
   12e0c:	mov	r5, r0
   12e10:	lsr	r6, r2, #3
   12e14:	mov	r2, r6
   12e18:	bl	5180 <bcmp@plt>
   12e1c:	mov	r1, r0
   12e20:	mov	r0, #0
   12e24:	cmp	r1, #0
   12e28:	popne	{r4, r5, r6, r7, fp, pc}
   12e2c:	ands	r0, r7, #7
   12e30:	beq	12e58 <comp_with_mask+0x5c>
   12e34:	ldrb	r1, [r5, r6]
   12e38:	ldrb	r2, [r4, r6]
   12e3c:	eor	r1, r2, r1
   12e40:	rsb	r0, r0, #8
   12e44:	mov	r2, #255	; 0xff
   12e48:	and	r0, r1, r2, lsl r0
   12e4c:	clz	r0, r0
   12e50:	lsr	r0, r0, #5
   12e54:	pop	{r4, r5, r6, r7, fp, pc}
   12e58:	mov	r0, #1
   12e5c:	pop	{r4, r5, r6, r7, fp, pc}

00012e60 <prefix_tochar>:
   12e60:	cmp	r0, #0
   12e64:	addne	r0, r0, #8
   12e68:	bx	lr

00012e6c <rb_patricia_search_best2>:
   12e6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e70:	add	fp, sp, #24
   12e74:	sub	sp, sp, #520	; 0x208
   12e78:	ldr	r3, [r0]
   12e7c:	cmp	r3, #0
   12e80:	beq	12f44 <rb_patricia_search_best2+0xd8>
   12e84:	mov	r8, r1
   12e88:	add	r7, r1, #8
   12e8c:	ldrh	r6, [r1, #2]
   12e90:	mov	r0, #0
   12e94:	mov	r5, #128	; 0x80
   12e98:	mov	ip, sp
   12e9c:	ldr	r4, [r3]
   12ea0:	cmp	r4, r6
   12ea4:	bcs	12edc <rb_patricia_search_best2+0x70>
   12ea8:	ldr	r1, [r3, #4]
   12eac:	cmp	r1, #0
   12eb0:	strne	r3, [ip, r0, lsl #2]
   12eb4:	addne	r0, r0, #1
   12eb8:	ldrb	r1, [r7, r4, lsr #3]
   12ebc:	and	r4, r4, #7
   12ec0:	tst	r1, r5, lsr r4
   12ec4:	mov	r1, #12
   12ec8:	movweq	r1, #8
   12ecc:	ldr	r3, [r3, r1]
   12ed0:	cmp	r3, #0
   12ed4:	bne	12e9c <rb_patricia_search_best2+0x30>
   12ed8:	b	12ef4 <rb_patricia_search_best2+0x88>
   12edc:	cmp	r2, #0
   12ee0:	beq	12ef4 <rb_patricia_search_best2+0x88>
   12ee4:	ldr	r1, [r3, #4]
   12ee8:	cmp	r1, #0
   12eec:	strne	r3, [ip, r0, lsl #2]
   12ef0:	addne	r0, r0, #1
   12ef4:	cmp	r0, #1
   12ef8:	blt	12f44 <rb_patricia_search_best2+0xd8>
   12efc:	sub	r9, ip, #4
   12f00:	subs	r4, r0, #1
   12f04:	blt	12f44 <rb_patricia_search_best2+0xd8>
   12f08:	ldr	r5, [r9, r0, lsl #2]
   12f0c:	ldr	r6, [r5, #4]
   12f10:	mov	r0, r6
   12f14:	bl	12e60 <prefix_tochar>
   12f18:	mov	r7, r0
   12f1c:	mov	r0, r8
   12f20:	bl	12e60 <prefix_tochar>
   12f24:	mov	r1, r0
   12f28:	ldrh	r2, [r6, #2]
   12f2c:	mov	r0, r7
   12f30:	bl	12dfc <comp_with_mask>
   12f34:	cmp	r0, #0
   12f38:	mov	r0, r4
   12f3c:	beq	12f00 <rb_patricia_search_best2+0x94>
   12f40:	b	12f48 <rb_patricia_search_best2+0xdc>
   12f44:	mov	r5, #0
   12f48:	mov	r0, r5
   12f4c:	sub	sp, fp, #24
   12f50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00012f54 <rb_patricia_search_best>:
   12f54:	mov	r2, #1
   12f58:	b	12e6c <rb_patricia_search_best2>

00012f5c <rb_patricia_lookup>:
   12f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f60:	add	fp, sp, #28
   12f64:	sub	sp, sp, #4
   12f68:	mov	r4, r1
   12f6c:	mov	r9, r0
   12f70:	ldr	r3, [r0]
   12f74:	cmp	r3, #0
   12f78:	beq	1306c <rb_patricia_lookup+0x110>
   12f7c:	add	r8, r4, #8
   12f80:	ldrh	r6, [r4, #2]
   12f84:	mov	r2, #128	; 0x80
   12f88:	b	12f98 <rb_patricia_lookup+0x3c>
   12f8c:	ldr	r3, [r0, #8]
   12f90:	cmp	r3, #0
   12f94:	beq	12fdc <rb_patricia_lookup+0x80>
   12f98:	mov	r0, r3
   12f9c:	ldr	r1, [r3]
   12fa0:	cmp	r1, r6
   12fa4:	bcc	12fb4 <rb_patricia_lookup+0x58>
   12fa8:	ldr	r3, [r0, #4]
   12fac:	cmp	r3, #0
   12fb0:	bne	12fdc <rb_patricia_lookup+0x80>
   12fb4:	ldr	r3, [r9, #4]
   12fb8:	cmp	r1, r3
   12fbc:	bcs	12f8c <rb_patricia_lookup+0x30>
   12fc0:	ldrb	r3, [r8, r1, lsr #3]
   12fc4:	and	r7, r1, #7
   12fc8:	tst	r3, r2, lsr r7
   12fcc:	beq	12f8c <rb_patricia_lookup+0x30>
   12fd0:	ldr	r3, [r0, #12]
   12fd4:	cmp	r3, #0
   12fd8:	bne	12f98 <rb_patricia_lookup+0x3c>
   12fdc:	cmp	r1, r6
   12fe0:	movcs	r1, r6
   12fe4:	ldr	r5, [r0, #4]
   12fe8:	add	ip, r5, #8
   12fec:	cmp	r1, #0
   12ff0:	str	r4, [sp]
   12ff4:	beq	130ac <rb_patricia_lookup+0x150>
   12ff8:	ldrb	r2, [r8]
   12ffc:	ldrb	r3, [ip]
   13000:	eor	r7, r3, r2
   13004:	mov	r2, #0
   13008:	tst	r7, #255	; 0xff
   1300c:	mov	r3, #0
   13010:	bne	13044 <rb_patricia_lookup+0xe8>
   13014:	add	r3, r4, #9
   13018:	add	r5, r5, #9
   1301c:	mov	sl, #8
   13020:	cmp	sl, r1
   13024:	bcs	130b0 <rb_patricia_lookup+0x154>
   13028:	ldrb	r7, [r3], #1
   1302c:	ldrb	r4, [r5], #1
   13030:	eor	r7, r4, r7
   13034:	add	sl, sl, #8
   13038:	tst	r7, #255	; 0xff
   1303c:	beq	13020 <rb_patricia_lookup+0xc4>
   13040:	sub	r3, sl, #8
   13044:	uxtb	r7, r7
   13048:	mov	r5, #128	; 0x80
   1304c:	tst	r7, r5, lsr r2
   13050:	bne	13064 <rb_patricia_lookup+0x108>
   13054:	add	r2, r2, #1
   13058:	cmp	r2, #8
   1305c:	bne	1304c <rb_patricia_lookup+0xf0>
   13060:	mov	r2, #8
   13064:	add	sl, r2, r3
   13068:	b	130b0 <rb_patricia_lookup+0x154>
   1306c:	mov	r0, #24
   13070:	bl	12b88 <rb_malloc>
   13074:	mov	r7, r0
   13078:	ldrh	r0, [r4, #2]
   1307c:	str	r0, [r7]
   13080:	mov	r0, r4
   13084:	bl	13270 <Ref_Prefix>
   13088:	vmov.i32	q8, #0	; 0x00000000
   1308c:	add	r1, r7, #8
   13090:	vst1.32	{d16-d17}, [r1]
   13094:	str	r0, [r7, #4]
   13098:	str	r7, [r9]
   1309c:	ldr	r0, [r9, #8]
   130a0:	add	r0, r0, #1
   130a4:	str	r0, [r9, #8]
   130a8:	b	13264 <rb_patricia_lookup+0x308>
   130ac:	mov	sl, #0
   130b0:	cmp	sl, r1
   130b4:	movhi	sl, r1
   130b8:	mov	r5, r0
   130bc:	ldr	r0, [r0, #16]
   130c0:	cmp	r0, #0
   130c4:	beq	130d4 <rb_patricia_lookup+0x178>
   130c8:	ldr	r1, [r0]
   130cc:	cmp	r1, sl
   130d0:	bcs	130b8 <rb_patricia_lookup+0x15c>
   130d4:	cmp	sl, r6
   130d8:	bne	13108 <rb_patricia_lookup+0x1ac>
   130dc:	ldr	r0, [r5]
   130e0:	cmp	r0, r6
   130e4:	bne	13108 <rb_patricia_lookup+0x1ac>
   130e8:	ldr	r0, [r5, #4]
   130ec:	cmp	r0, #0
   130f0:	bne	13100 <rb_patricia_lookup+0x1a4>
   130f4:	ldr	r0, [sp]
   130f8:	bl	13270 <Ref_Prefix>
   130fc:	str	r0, [r5, #4]
   13100:	mov	r7, r5
   13104:	b	13264 <rb_patricia_lookup+0x308>
   13108:	mov	r4, ip
   1310c:	mov	r0, #24
   13110:	bl	12b88 <rb_malloc>
   13114:	mov	r7, r0
   13118:	ldr	r0, [sp]
   1311c:	ldrh	r1, [r0, #2]
   13120:	str	r1, [r7]
   13124:	bl	13270 <Ref_Prefix>
   13128:	vmov.i32	q8, #0	; 0x00000000
   1312c:	add	r1, r7, #8
   13130:	vst1.32	{d16-d17}, [r1]
   13134:	str	r0, [r7, #4]
   13138:	ldr	r0, [r9, #8]
   1313c:	add	r0, r0, #1
   13140:	str	r0, [r9, #8]
   13144:	ldr	r0, [r5]
   13148:	cmp	r0, sl
   1314c:	bne	1317c <rb_patricia_lookup+0x220>
   13150:	str	r5, [r7, #16]
   13154:	ldr	r1, [r9, #4]
   13158:	cmp	r0, r1
   1315c:	bcs	131d8 <rb_patricia_lookup+0x27c>
   13160:	ldrb	r1, [r8, r0, lsr #3]
   13164:	and	r0, r0, #7
   13168:	mov	r2, #128	; 0x80
   1316c:	tst	r1, r2, lsr r0
   13170:	beq	131d8 <rb_patricia_lookup+0x27c>
   13174:	str	r7, [r5, #12]
   13178:	b	13264 <rb_patricia_lookup+0x308>
   1317c:	cmp	sl, r6
   13180:	bne	131e0 <rb_patricia_lookup+0x284>
   13184:	ldr	r0, [r9, #4]
   13188:	cmp	r0, r6
   1318c:	bls	131a4 <rb_patricia_lookup+0x248>
   13190:	ldrb	r0, [r4, r6, lsr #3]
   13194:	and	r2, r6, #7
   13198:	mov	r3, #128	; 0x80
   1319c:	tst	r0, r3, lsr r2
   131a0:	addne	r1, r7, #12
   131a4:	str	r5, [r1]
   131a8:	ldr	r0, [r5, #16]
   131ac:	str	r0, [r7, #16]
   131b0:	ldr	r0, [r5, #16]
   131b4:	cmp	r0, #0
   131b8:	beq	131cc <rb_patricia_lookup+0x270>
   131bc:	mov	r9, r0
   131c0:	ldr	r1, [r9, #12]!
   131c4:	cmp	r1, r5
   131c8:	addne	r9, r0, #8
   131cc:	str	r7, [r9]
   131d0:	str	r7, [r5, #16]
   131d4:	b	13264 <rb_patricia_lookup+0x308>
   131d8:	str	r7, [r5, #8]
   131dc:	b	13264 <rb_patricia_lookup+0x308>
   131e0:	mov	r0, #24
   131e4:	bl	12b88 <rb_malloc>
   131e8:	mov	r1, #0
   131ec:	str	sl, [r0]
   131f0:	str	r1, [r0, #4]
   131f4:	ldr	r2, [r5, #16]
   131f8:	str	r2, [r0, #16]
   131fc:	str	r1, [r0, #20]
   13200:	ldmib	r9, {r1, r2}
   13204:	add	r2, r2, #1
   13208:	str	r2, [r9, #8]
   1320c:	cmp	sl, r1
   13210:	bcs	13234 <rb_patricia_lookup+0x2d8>
   13214:	ldrb	r1, [r8, sl, lsr #3]
   13218:	and	r2, sl, #7
   1321c:	mov	r3, #128	; 0x80
   13220:	tst	r1, r3, lsr r2
   13224:	beq	13234 <rb_patricia_lookup+0x2d8>
   13228:	str	r5, [r0, #8]
   1322c:	str	r7, [r0, #12]
   13230:	b	1323c <rb_patricia_lookup+0x2e0>
   13234:	str	r7, [r0, #8]
   13238:	str	r5, [r0, #12]
   1323c:	str	r0, [r7, #16]
   13240:	ldr	r1, [r5, #16]
   13244:	cmp	r1, #0
   13248:	beq	1325c <rb_patricia_lookup+0x300>
   1324c:	mov	r9, r1
   13250:	ldr	r2, [r9, #12]!
   13254:	cmp	r2, r5
   13258:	addne	r9, r1, #8
   1325c:	str	r0, [r9]
   13260:	str	r0, [r5, #16]
   13264:	mov	r0, r7
   13268:	sub	sp, fp, #28
   1326c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013270 <Ref_Prefix>:
   13270:	cmp	r0, #0
   13274:	moveq	r0, #0
   13278:	bxeq	lr
   1327c:	ldr	r1, [r0, #4]
   13280:	cmp	r1, #0
   13284:	addne	r1, r1, #1
   13288:	strne	r1, [r0, #4]
   1328c:	bxne	lr
   13290:	ldrh	r2, [r0, #2]
   13294:	ldrh	r3, [r0]
   13298:	add	r1, r0, #8
   1329c:	mov	r0, r3
   132a0:	b	13764 <New_Prefix2>

000132a4 <rb_patricia_remove>:
   132a4:	push	{r4, r5, r6, r7, fp, lr}
   132a8:	add	fp, sp, #16
   132ac:	mov	r5, r1
   132b0:	mov	r4, r0
   132b4:	ldr	r0, [r1, #8]
   132b8:	ldr	r6, [r1, #12]
   132bc:	cmp	r6, #0
   132c0:	beq	132e8 <rb_patricia_remove+0x44>
   132c4:	cmp	r0, #0
   132c8:	beq	132f4 <rb_patricia_remove+0x50>
   132cc:	ldr	r0, [r5, #4]
   132d0:	cmp	r0, #0
   132d4:	blne	12c6c <Deref_Prefix>
   132d8:	mov	r0, #0
   132dc:	str	r0, [r5, #20]
   132e0:	str	r0, [r5, #4]
   132e4:	pop	{r4, r5, r6, r7, fp, pc}
   132e8:	cmp	r0, #0
   132ec:	beq	1333c <rb_patricia_remove+0x98>
   132f0:	ldr	r6, [r5, #8]
   132f4:	ldr	r7, [r5, #16]
   132f8:	str	r7, [r6, #16]
   132fc:	ldr	r0, [r5, #4]
   13300:	bl	12c6c <Deref_Prefix>
   13304:	mov	r0, r5
   13308:	bl	12c8c <rb_free>
   1330c:	ldr	r0, [r4, #8]
   13310:	sub	r0, r0, #1
   13314:	str	r0, [r4, #8]
   13318:	cmp	r7, #0
   1331c:	beq	13334 <rb_patricia_remove+0x90>
   13320:	ldr	r0, [r7, #12]
   13324:	cmp	r0, r5
   13328:	beq	13380 <rb_patricia_remove+0xdc>
   1332c:	str	r6, [r7, #8]
   13330:	pop	{r4, r5, r6, r7, fp, pc}
   13334:	str	r6, [r4]
   13338:	pop	{r4, r5, r6, r7, fp, pc}
   1333c:	ldr	r0, [r5, #4]
   13340:	ldr	r6, [r5, #16]
   13344:	bl	12c6c <Deref_Prefix>
   13348:	mov	r0, r5
   1334c:	bl	12c8c <rb_free>
   13350:	ldr	r0, [r4, #8]
   13354:	sub	r0, r0, #1
   13358:	str	r0, [r4, #8]
   1335c:	cmp	r6, #0
   13360:	beq	13388 <rb_patricia_remove+0xe4>
   13364:	mov	r0, r6
   13368:	ldr	r1, [r0, #12]!
   1336c:	cmp	r1, r5
   13370:	beq	13394 <rb_patricia_remove+0xf0>
   13374:	mov	r1, #0
   13378:	str	r1, [r6, #8]
   1337c:	b	133a0 <rb_patricia_remove+0xfc>
   13380:	str	r6, [r7, #12]
   13384:	pop	{r4, r5, r6, r7, fp, pc}
   13388:	mov	r0, #0
   1338c:	str	r0, [r4]
   13390:	pop	{r4, r5, r6, r7, fp, pc}
   13394:	mov	r0, #0
   13398:	str	r0, [r6, #12]
   1339c:	add	r0, r6, #8
   133a0:	ldr	r1, [r6, #4]
   133a4:	cmp	r1, #0
   133a8:	popne	{r4, r5, r6, r7, fp, pc}
   133ac:	ldr	r0, [r0]
   133b0:	ldr	r1, [r6, #16]
   133b4:	cmp	r1, #0
   133b8:	beq	133cc <rb_patricia_remove+0x128>
   133bc:	ldr	r2, [r1, #12]!
   133c0:	cmp	r2, r6
   133c4:	subne	r1, r1, #4
   133c8:	b	133d0 <rb_patricia_remove+0x12c>
   133cc:	mov	r1, r4
   133d0:	str	r0, [r1]
   133d4:	ldr	r1, [r6, #16]
   133d8:	str	r1, [r0, #16]
   133dc:	mov	r0, r6
   133e0:	bl	12c8c <rb_free>
   133e4:	ldr	r0, [r4, #8]
   133e8:	sub	r0, r0, #1
   133ec:	str	r0, [r4, #8]
   133f0:	pop	{r4, r5, r6, r7, fp, pc}

000133f4 <make_and_lookup_ip>:
   133f4:	push	{r4, r5, fp, lr}
   133f8:	add	fp, sp, #8
   133fc:	mov	r4, r0
   13400:	mov	r3, r1
   13404:	ldrh	r0, [r3], #8
   13408:	cmp	r0, #10
   1340c:	addne	r3, r1, #4
   13410:	mov	r1, r3
   13414:	bl	1344c <New_Prefix>
   13418:	cmp	r0, #0
   1341c:	beq	13444 <make_and_lookup_ip+0x50>
   13420:	mov	r5, r0
   13424:	mov	r0, r4
   13428:	mov	r1, r5
   1342c:	bl	521c <rb_patricia_lookup@plt>
   13430:	mov	r4, r0
   13434:	mov	r0, r5
   13438:	bl	12c6c <Deref_Prefix>
   1343c:	mov	r0, r4
   13440:	pop	{r4, r5, fp, pc}
   13444:	mov	r0, #0
   13448:	pop	{r4, r5, fp, pc}

0001344c <New_Prefix>:
   1344c:	b	13764 <New_Prefix2>

00013450 <make_and_lookup>:
   13450:	push	{r4, r5, r6, sl, fp, lr}
   13454:	add	fp, sp, #16
   13458:	mov	r6, r1
   1345c:	mov	r4, r0
   13460:	mov	r0, #2
   13464:	bl	134b4 <ascii2prefix>
   13468:	mov	r5, r0
   1346c:	cmp	r0, #0
   13470:	bne	1348c <make_and_lookup+0x3c>
   13474:	mov	r0, #10
   13478:	mov	r1, r6
   1347c:	bl	134b4 <ascii2prefix>
   13480:	mov	r5, r0
   13484:	cmp	r0, #0
   13488:	beq	134ac <make_and_lookup+0x5c>
   1348c:	mov	r0, r4
   13490:	mov	r1, r5
   13494:	bl	521c <rb_patricia_lookup@plt>
   13498:	mov	r4, r0
   1349c:	mov	r0, r5
   134a0:	bl	12c6c <Deref_Prefix>
   134a4:	mov	r0, r4
   134a8:	pop	{r4, r5, r6, sl, fp, pc}
   134ac:	mov	r0, #0
   134b0:	pop	{r4, r5, r6, sl, fp, pc}

000134b4 <ascii2prefix>:
   134b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134b8:	add	fp, sp, #28
   134bc:	sub	sp, sp, #20
   134c0:	sub	sp, sp, #1024	; 0x400
   134c4:	mov	r8, #0
   134c8:	cmp	r1, #0
   134cc:	beq	135b8 <ascii2prefix+0x104>
   134d0:	mov	r5, r1
   134d4:	mov	sl, r0
   134d8:	sub	r0, r0, #10
   134dc:	clz	r0, r0
   134e0:	lsr	r0, r0, #5
   134e4:	lsl	r6, r0, #7
   134e8:	cmp	sl, #2
   134ec:	movweq	r6, #32
   134f0:	mov	r0, r1
   134f4:	mov	r1, #47	; 0x2f
   134f8:	bl	4eec <strchr@plt>
   134fc:	cmp	r0, #0
   13500:	beq	13574 <ascii2prefix+0xc0>
   13504:	mov	r7, r0
   13508:	add	r0, r0, #1
   1350c:	bl	51ec <atol@plt>
   13510:	mov	r4, r0
   13514:	sub	r7, r7, r5
   13518:	mov	r9, sp
   1351c:	mov	r0, r9
   13520:	mov	r1, r5
   13524:	mov	r2, r7
   13528:	bl	5120 <memcpy@plt>
   1352c:	mov	r0, #0
   13530:	strb	r0, [r9, r7]
   13534:	cmp	r4, r6
   13538:	mov	r5, r4
   1353c:	movgt	r5, r6
   13540:	cmp	r4, #1
   13544:	movlt	r5, r6
   13548:	cmp	sl, #2
   1354c:	bne	13584 <ascii2prefix+0xd0>
   13550:	sub	r2, fp, #48	; 0x30
   13554:	mov	r0, #2
   13558:	mov	r1, r9
   1355c:	bl	4f64 <rb_inet_pton@plt>
   13560:	cmp	r0, #1
   13564:	blt	135b8 <ascii2prefix+0x104>
   13568:	sub	r1, fp, #48	; 0x30
   1356c:	mov	r0, #2
   13570:	b	135ac <ascii2prefix+0xf8>
   13574:	mov	r9, r5
   13578:	mov	r5, r6
   1357c:	cmp	sl, #2
   13580:	beq	13550 <ascii2prefix+0x9c>
   13584:	cmp	sl, #10
   13588:	bne	135b8 <ascii2prefix+0x104>
   1358c:	sub	r2, fp, #48	; 0x30
   13590:	mov	r0, #10
   13594:	mov	r1, r9
   13598:	bl	4f64 <rb_inet_pton@plt>
   1359c:	cmp	r0, #1
   135a0:	blt	135b8 <ascii2prefix+0x104>
   135a4:	sub	r1, fp, #48	; 0x30
   135a8:	mov	r0, #10
   135ac:	mov	r2, r5
   135b0:	bl	1344c <New_Prefix>
   135b4:	mov	r8, r0
   135b8:	mov	r0, r8
   135bc:	sub	sp, fp, #28
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000135c4 <rb_match_ip>:
   135c4:	push	{r4, r5, fp, lr}
   135c8:	add	fp, sp, #8
   135cc:	mov	r4, r0
   135d0:	mov	r3, r1
   135d4:	ldrh	r0, [r3], #8
   135d8:	cmp	r0, #10
   135dc:	addne	r3, r1, #4
   135e0:	mov	r2, #32
   135e4:	movweq	r2, #128	; 0x80
   135e8:	movwne	r0, #2
   135ec:	mov	r1, r3
   135f0:	bl	1344c <New_Prefix>
   135f4:	cmp	r0, #0
   135f8:	beq	13620 <rb_match_ip+0x5c>
   135fc:	mov	r5, r0
   13600:	mov	r0, r4
   13604:	mov	r1, r5
   13608:	bl	4e8c <rb_patricia_search_best@plt>
   1360c:	mov	r4, r0
   13610:	mov	r0, r5
   13614:	bl	12c6c <Deref_Prefix>
   13618:	mov	r0, r4
   1361c:	pop	{r4, r5, fp, pc}
   13620:	mov	r0, #0
   13624:	pop	{r4, r5, fp, pc}

00013628 <rb_match_ip_exact>:
   13628:	push	{r4, r5, fp, lr}
   1362c:	add	fp, sp, #8
   13630:	mov	r4, r0
   13634:	cmp	r2, #128	; 0x80
   13638:	mov	r5, r2
   1363c:	movcs	r5, #128	; 0x80
   13640:	cmp	r2, #32
   13644:	movcs	r2, #32
   13648:	mov	r3, r1
   1364c:	ldrh	r0, [r3], #8
   13650:	cmp	r0, #10
   13654:	moveq	r2, r5
   13658:	addne	r3, r1, #4
   1365c:	movwne	r0, #2
   13660:	mov	r1, r3
   13664:	bl	1344c <New_Prefix>
   13668:	cmp	r0, #0
   1366c:	beq	13694 <rb_match_ip_exact+0x6c>
   13670:	mov	r5, r0
   13674:	mov	r0, r4
   13678:	mov	r1, r5
   1367c:	bl	51d4 <rb_patricia_search_exact@plt>
   13680:	mov	r4, r0
   13684:	mov	r0, r5
   13688:	bl	12c6c <Deref_Prefix>
   1368c:	mov	r0, r4
   13690:	pop	{r4, r5, fp, pc}
   13694:	mov	r0, #0
   13698:	pop	{r4, r5, fp, pc}

0001369c <rb_match_string>:
   1369c:	push	{r4, r5, r6, sl, fp, lr}
   136a0:	add	fp, sp, #16
   136a4:	mov	r6, r1
   136a8:	mov	r4, r0
   136ac:	mov	r0, #2
   136b0:	bl	134b4 <ascii2prefix>
   136b4:	mov	r5, r0
   136b8:	cmp	r0, #0
   136bc:	bne	136d8 <rb_match_string+0x3c>
   136c0:	mov	r0, #10
   136c4:	mov	r1, r6
   136c8:	bl	134b4 <ascii2prefix>
   136cc:	mov	r5, r0
   136d0:	cmp	r0, #0
   136d4:	beq	136f8 <rb_match_string+0x5c>
   136d8:	mov	r0, r4
   136dc:	mov	r1, r5
   136e0:	bl	4e8c <rb_patricia_search_best@plt>
   136e4:	mov	r4, r0
   136e8:	mov	r0, r5
   136ec:	bl	12c6c <Deref_Prefix>
   136f0:	mov	r0, r4
   136f4:	pop	{r4, r5, r6, sl, fp, pc}
   136f8:	mov	r0, #0
   136fc:	pop	{r4, r5, r6, sl, fp, pc}

00013700 <rb_match_exact_string>:
   13700:	push	{r4, r5, r6, sl, fp, lr}
   13704:	add	fp, sp, #16
   13708:	mov	r6, r1
   1370c:	mov	r4, r0
   13710:	mov	r0, #2
   13714:	bl	134b4 <ascii2prefix>
   13718:	mov	r5, r0
   1371c:	cmp	r0, #0
   13720:	bne	1373c <rb_match_exact_string+0x3c>
   13724:	mov	r0, #10
   13728:	mov	r1, r6
   1372c:	bl	134b4 <ascii2prefix>
   13730:	mov	r5, r0
   13734:	cmp	r0, #0
   13738:	beq	1375c <rb_match_exact_string+0x5c>
   1373c:	mov	r0, r4
   13740:	mov	r1, r5
   13744:	bl	51d4 <rb_patricia_search_exact@plt>
   13748:	mov	r4, r0
   1374c:	mov	r0, r5
   13750:	bl	12c6c <Deref_Prefix>
   13754:	mov	r0, r4
   13758:	pop	{r4, r5, r6, sl, fp, pc}
   1375c:	mov	r0, #0
   13760:	pop	{r4, r5, r6, sl, fp, pc}

00013764 <New_Prefix2>:
   13764:	push	{r4, r5, r6, sl, fp, lr}
   13768:	add	fp, sp, #16
   1376c:	mov	r4, r2
   13770:	mov	r6, r1
   13774:	mov	r5, r0
   13778:	cmp	r0, #2
   1377c:	beq	137a4 <New_Prefix2+0x40>
   13780:	mov	r0, #0
   13784:	cmp	r5, #10
   13788:	bne	137cc <New_Prefix2+0x68>
   1378c:	mov	r0, #24
   13790:	bl	12b88 <rb_malloc>
   13794:	vld1.8	{d16-d17}, [r6]
   13798:	add	r1, r0, #8
   1379c:	vst1.8	{d16-d17}, [r1]
   137a0:	b	137b4 <New_Prefix2+0x50>
   137a4:	mov	r0, #24
   137a8:	bl	12b88 <rb_malloc>
   137ac:	ldr	r1, [r6]
   137b0:	str	r1, [r0, #8]
   137b4:	mov	r1, #1
   137b8:	str	r1, [r0, #4]
   137bc:	strh	r5, [r0]
   137c0:	cmn	r4, #1
   137c4:	movle	r4, #128	; 0x80
   137c8:	strh	r4, [r0, #2]
   137cc:	pop	{r4, r5, r6, sl, fp, pc}

000137d0 <rb_dictionary_create>:
   137d0:	push	{r4, r5, r6, sl, fp, lr}
   137d4:	add	fp, sp, #16
   137d8:	mov	r4, r1
   137dc:	mov	r5, r0
   137e0:	mov	r0, #40	; 0x28
   137e4:	bl	13810 <rb_malloc>
   137e8:	mov	r6, r0
   137ec:	str	r4, [r0]
   137f0:	mov	r0, r5
   137f4:	bl	13830 <rb_strdup>
   137f8:	str	r0, [r6, #20]
   137fc:	add	r1, r6, #28
   13800:	mov	r0, r6
   13804:	bl	13860 <rb_dlinkAdd>
   13808:	mov	r0, r6
   1380c:	pop	{r4, r5, r6, sl, fp, pc}

00013810 <rb_malloc>:
   13810:	push	{fp, lr}
   13814:	mov	fp, sp
   13818:	mov	r1, r0
   1381c:	mov	r0, #1
   13820:	bl	4f1c <calloc@plt>
   13824:	cmp	r0, #0
   13828:	popne	{fp, pc}
   1382c:	bl	52a0 <rb_outofmemory@plt>

00013830 <rb_strdup>:
   13830:	push	{r4, sl, fp, lr}
   13834:	add	fp, sp, #8
   13838:	mov	r4, r0
   1383c:	bl	50fc <strlen@plt>
   13840:	add	r0, r0, #1
   13844:	bl	52c4 <malloc@plt>
   13848:	cmp	r0, #0
   1384c:	beq	1385c <rb_strdup+0x2c>
   13850:	mov	r1, r4
   13854:	pop	{r4, sl, fp, lr}
   13858:	b	51b0 <strcpy@plt>
   1385c:	bl	52a0 <rb_outofmemory@plt>

00013860 <rb_dlinkAdd>:
   13860:	mov	r2, #0
   13864:	stm	r1, {r0, r2}
   13868:	ldr	r2, [pc, #68]	; 138b4 <rb_dlinkAdd+0x54>
   1386c:	ldr	r2, [pc, r2]
   13870:	str	r2, [r1, #8]
   13874:	cmp	r2, #0
   13878:	ldr	r0, [pc, #56]	; 138b8 <rb_dlinkAdd+0x58>
   1387c:	add	r0, pc, r0
   13880:	beq	13890 <rb_dlinkAdd+0x30>
   13884:	add	r2, r2, #4
   13888:	str	r1, [r2]
   1388c:	b	138a0 <rb_dlinkAdd+0x40>
   13890:	mov	r2, r0
   13894:	ldr	r3, [r2, #4]!
   13898:	cmp	r3, #0
   1389c:	streq	r1, [r2]
   138a0:	str	r1, [r0]
   138a4:	ldr	r1, [r0, #8]
   138a8:	add	r1, r1, #1
   138ac:	str	r1, [r0, #8]
   138b0:	bx	lr
   138b4:	.word	0x0003263c
   138b8:	.word	0x0003262c

000138bc <rb_dictionary_set_comparator_func>:
   138bc:	str	r1, [r0]
   138c0:	bx	lr

000138c4 <rb_dictionary_get_comparator_func>:
   138c4:	ldr	r0, [r0]
   138c8:	bx	lr

000138cc <rb_dictionary_get_linear_index>:
   138cc:	push	{r4, sl, fp, lr}
   138d0:	add	fp, sp, #8
   138d4:	mov	r4, r0
   138d8:	bl	5348 <rb_dictionary_find@plt>
   138dc:	cmp	r0, #0
   138e0:	beq	13928 <rb_dictionary_get_linear_index+0x5c>
   138e4:	ldrb	r1, [r4, #24]
   138e8:	tst	r1, #1
   138ec:	beq	13920 <rb_dictionary_get_linear_index+0x54>
   138f0:	ldr	r1, [r4, #8]
   138f4:	cmp	r1, #0
   138f8:	beq	13914 <rb_dictionary_get_linear_index+0x48>
   138fc:	mov	r2, #0
   13900:	str	r2, [r1, #24]
   13904:	add	r2, r2, #1
   13908:	ldr	r1, [r1, #12]
   1390c:	cmp	r1, #0
   13910:	bne	13900 <rb_dictionary_get_linear_index+0x34>
   13914:	ldrb	r1, [r4, #24]
   13918:	and	r1, r1, #254	; 0xfe
   1391c:	strb	r1, [r4, #24]
   13920:	ldr	r0, [r0, #24]
   13924:	pop	{r4, sl, fp, pc}
   13928:	mvn	r0, #0
   1392c:	pop	{r4, sl, fp, pc}

00013930 <rb_dictionary_find>:
   13930:	push	{r4, r5, r6, sl, fp, lr}
   13934:	add	fp, sp, #16
   13938:	mov	r6, r1
   1393c:	mov	r4, r0
   13940:	bl	13b4c <rb_dictionary_retune>
   13944:	ldr	r0, [r4, #4]
   13948:	mov	r5, #0
   1394c:	cmp	r0, #0
   13950:	beq	1396c <rb_dictionary_find+0x3c>
   13954:	ldr	r1, [r0, #20]
   13958:	ldr	r2, [r4]
   1395c:	mov	r0, r6
   13960:	blx	r2
   13964:	cmp	r0, #0
   13968:	ldreq	r5, [r4, #4]
   1396c:	mov	r0, r5
   13970:	pop	{r4, r5, r6, sl, fp, pc}

00013974 <rb_dictionary_destroy>:
   13974:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13978:	add	fp, sp, #24
   1397c:	mov	r8, r0
   13980:	ldr	r7, [r0, #8]
   13984:	cmp	r7, #0
   13988:	beq	139c8 <rb_dictionary_destroy+0x54>
   1398c:	mov	r5, r2
   13990:	mov	r6, r1
   13994:	b	139ac <rb_dictionary_destroy+0x38>
   13998:	mov	r0, r7
   1399c:	bl	139e4 <rb_free>
   139a0:	cmp	r4, #0
   139a4:	mov	r7, r4
   139a8:	beq	139c8 <rb_dictionary_destroy+0x54>
   139ac:	ldr	r4, [r7, #12]
   139b0:	cmp	r6, #0
   139b4:	beq	13998 <rb_dictionary_destroy+0x24>
   139b8:	mov	r0, r7
   139bc:	mov	r1, r5
   139c0:	blx	r6
   139c4:	b	13998 <rb_dictionary_destroy+0x24>
   139c8:	add	r0, r8, #28
   139cc:	bl	139f0 <rb_dlinkDelete>
   139d0:	ldr	r0, [r8, #20]
   139d4:	bl	139e4 <rb_free>
   139d8:	mov	r0, r8
   139dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   139e0:	b	139e4 <rb_free>

000139e4 <rb_free>:
   139e4:	cmp	r0, #0
   139e8:	bxeq	lr
   139ec:	b	500c <free@plt>

000139f0 <rb_dlinkDelete>:
   139f0:	ldr	ip, [pc, #68]	; 13a3c <rb_dlinkDelete+0x4c>
   139f4:	add	ip, pc, ip
   139f8:	ldmib	r0, {r2, r3}
   139fc:	add	r1, r3, #4
   13a00:	cmp	r3, #0
   13a04:	addeq	r1, ip, #4
   13a08:	str	r2, [r1]
   13a0c:	ldmib	r0, {r1, r2}
   13a10:	cmp	r1, #0
   13a14:	mov	r3, ip
   13a18:	addne	r3, r1, #8
   13a1c:	str	r2, [r3]
   13a20:	mov	r1, #0
   13a24:	str	r1, [r0, #4]
   13a28:	str	r1, [r0, #8]
   13a2c:	ldr	r0, [ip, #8]
   13a30:	sub	r0, r0, #1
   13a34:	str	r0, [ip, #8]
   13a38:	bx	lr
   13a3c:	.word	0x000324b4

00013a40 <rb_dictionary_foreach>:
   13a40:	push	{r4, r5, r6, sl, fp, lr}
   13a44:	add	fp, sp, #16
   13a48:	ldr	r0, [r0, #8]
   13a4c:	cmp	r0, #0
   13a50:	beq	13a84 <rb_dictionary_foreach+0x44>
   13a54:	mov	r4, r2
   13a58:	mov	r5, r1
   13a5c:	b	13a6c <rb_dictionary_foreach+0x2c>
   13a60:	cmp	r6, #0
   13a64:	mov	r0, r6
   13a68:	beq	13a84 <rb_dictionary_foreach+0x44>
   13a6c:	ldr	r6, [r0, #12]
   13a70:	cmp	r5, #0
   13a74:	beq	13a60 <rb_dictionary_foreach+0x20>
   13a78:	mov	r1, r4
   13a7c:	blx	r5
   13a80:	b	13a60 <rb_dictionary_foreach+0x20>
   13a84:	pop	{r4, r5, r6, sl, fp, pc}

00013a88 <rb_dictionary_search>:
   13a88:	push	{r4, r5, r6, sl, fp, lr}
   13a8c:	add	fp, sp, #16
   13a90:	ldr	r0, [r0, #8]
   13a94:	cmp	r0, #0
   13a98:	beq	13ad4 <rb_dictionary_search+0x4c>
   13a9c:	mov	r4, r2
   13aa0:	mov	r5, r1
   13aa4:	b	13ab4 <rb_dictionary_search+0x2c>
   13aa8:	cmp	r6, #0
   13aac:	mov	r0, r6
   13ab0:	beq	13ad4 <rb_dictionary_search+0x4c>
   13ab4:	ldr	r6, [r0, #12]
   13ab8:	cmp	r5, #0
   13abc:	beq	13aa8 <rb_dictionary_search+0x20>
   13ac0:	mov	r1, r4
   13ac4:	blx	r5
   13ac8:	cmp	r0, #0
   13acc:	beq	13aa8 <rb_dictionary_search+0x20>
   13ad0:	pop	{r4, r5, r6, sl, fp, pc}
   13ad4:	mov	r0, #0
   13ad8:	pop	{r4, r5, r6, sl, fp, pc}

00013adc <rb_dictionary_foreach_start>:
   13adc:	mov	r2, #0
   13ae0:	str	r2, [r1, #4]
   13ae4:	ldr	r2, [r0, #8]
   13ae8:	str	r2, [r1]
   13aec:	cmp	r2, #0
   13af0:	bxeq	lr
   13af4:	str	r2, [r1, #4]
   13af8:	b	13afc <rb_dictionary_foreach_next>

00013afc <rb_dictionary_foreach_next>:
   13afc:	mov	r2, r0
   13b00:	ldr	r0, [r1]
   13b04:	cmp	r0, #0
   13b08:	beq	13b24 <rb_dictionary_foreach_next+0x28>
   13b0c:	ldr	r0, [r1, #4]
   13b10:	str	r0, [r1]
   13b14:	cmp	r0, #0
   13b18:	ldrne	r0, [r0, #12]
   13b1c:	strne	r0, [r1, #4]
   13b20:	bx	lr
   13b24:	ldr	r0, [pc, #8]	; 13b34 <rb_dictionary_foreach_next+0x38>
   13b28:	add	r0, pc, r0
   13b2c:	mov	r1, r2
   13b30:	b	5240 <rb_lib_log@plt>
   13b34:	.word	0x00002d3b

00013b38 <rb_dictionary_foreach_cur>:
   13b38:	ldr	r0, [r1]
   13b3c:	cmp	r0, #0
   13b40:	ldrne	r0, [r0, #16]
   13b44:	moveq	r0, #0
   13b48:	bx	lr

00013b4c <rb_dictionary_retune>:
   13b4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b50:	add	fp, sp, #24
   13b54:	sub	sp, sp, #32
   13b58:	mov	r4, r0
   13b5c:	ldr	r0, [r0, #4]
   13b60:	cmp	r0, #0
   13b64:	beq	13cac <rb_dictionary_retune+0x160>
   13b68:	mov	r5, r1
   13b6c:	mov	r0, #0
   13b70:	str	r0, [sp, #4]
   13b74:	str	r0, [sp, #8]
   13b78:	ldm	r4, {r2, r6}
   13b7c:	ldr	r1, [r6, #20]
   13b80:	mov	r0, r5
   13b84:	blx	r2
   13b88:	cmp	r0, #0
   13b8c:	beq	13c70 <rb_dictionary_retune+0x124>
   13b90:	add	r8, sp, #4
   13b94:	mov	r7, r8
   13b98:	cmn	r0, #1
   13b9c:	bgt	13bd8 <rb_dictionary_retune+0x8c>
   13ba0:	b	13c1c <rb_dictionary_retune+0xd0>
   13ba4:	mov	r1, r6
   13ba8:	str	r1, [r7, #4]
   13bac:	add	r0, r1, #4
   13bb0:	mov	r7, r1
   13bb4:	ldr	r2, [r4]
   13bb8:	ldr	r6, [r0]
   13bbc:	ldr	r1, [r6, #20]
   13bc0:	mov	r0, r5
   13bc4:	blx	r2
   13bc8:	cmp	r0, #0
   13bcc:	beq	13c88 <rb_dictionary_retune+0x13c>
   13bd0:	cmn	r0, #1
   13bd4:	ble	13c1c <rb_dictionary_retune+0xd0>
   13bd8:	ldr	r0, [r6, #4]
   13bdc:	cmp	r0, #0
   13be0:	beq	13c88 <rb_dictionary_retune+0x13c>
   13be4:	ldr	r1, [r0, #20]
   13be8:	ldr	r2, [r4]
   13bec:	mov	r0, r5
   13bf0:	blx	r2
   13bf4:	cmp	r0, #1
   13bf8:	blt	13ba4 <rb_dictionary_retune+0x58>
   13bfc:	ldr	r1, [r6, #4]
   13c00:	ldr	r0, [r1]
   13c04:	str	r0, [r6, #4]
   13c08:	str	r6, [r1]
   13c0c:	ldr	r0, [r1, #4]
   13c10:	cmp	r0, #0
   13c14:	bne	13ba8 <rb_dictionary_retune+0x5c>
   13c18:	b	13c7c <rb_dictionary_retune+0x130>
   13c1c:	ldr	r0, [r6]
   13c20:	cmp	r0, #0
   13c24:	beq	13c88 <rb_dictionary_retune+0x13c>
   13c28:	ldr	r1, [r0, #20]
   13c2c:	ldr	r2, [r4]
   13c30:	mov	r0, r5
   13c34:	blx	r2
   13c38:	cmn	r0, #1
   13c3c:	ble	13c48 <rb_dictionary_retune+0xfc>
   13c40:	mov	r0, r6
   13c44:	b	13c64 <rb_dictionary_retune+0x118>
   13c48:	ldr	r0, [r6]
   13c4c:	ldr	r1, [r0, #4]
   13c50:	str	r1, [r6]
   13c54:	str	r6, [r0, #4]
   13c58:	ldr	r1, [r0]
   13c5c:	cmp	r1, #0
   13c60:	beq	13c84 <rb_dictionary_retune+0x138>
   13c64:	str	r0, [r8]
   13c68:	mov	r8, r0
   13c6c:	b	13bb4 <rb_dictionary_retune+0x68>
   13c70:	add	r7, sp, #4
   13c74:	mov	r8, r7
   13c78:	b	13c88 <rb_dictionary_retune+0x13c>
   13c7c:	mov	r6, r1
   13c80:	b	13c88 <rb_dictionary_retune+0x13c>
   13c84:	mov	r6, r0
   13c88:	ldr	r0, [r6]
   13c8c:	str	r0, [r7, #4]
   13c90:	ldr	r0, [r6, #4]
   13c94:	str	r0, [r8]
   13c98:	ldr	r0, [sp, #8]
   13c9c:	str	r0, [r6]
   13ca0:	ldr	r0, [sp, #4]
   13ca4:	str	r0, [r6, #4]
   13ca8:	str	r6, [r4, #4]
   13cac:	sub	sp, fp, #24
   13cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013cb4 <rb_dictionary_add>:
   13cb4:	push	{r4, r5, r6, sl, fp, lr}
   13cb8:	add	fp, sp, #16
   13cbc:	mov	r4, r2
   13cc0:	mov	r5, r1
   13cc4:	mov	r6, r0
   13cc8:	mov	r0, #28
   13ccc:	bl	13810 <rb_malloc>
   13cd0:	mov	r1, r0
   13cd4:	str	r4, [r0, #16]
   13cd8:	str	r5, [r0, #20]
   13cdc:	mov	r0, r6
   13ce0:	pop	{r4, r5, r6, sl, fp, lr}
   13ce4:	b	13ce8 <rb_dictionary_link>

00013ce8 <rb_dictionary_link>:
   13ce8:	push	{r4, r5, fp, lr}
   13cec:	add	fp, sp, #8
   13cf0:	mov	r4, r1
   13cf4:	mov	r5, r0
   13cf8:	ldrb	r0, [r0, #24]
   13cfc:	orr	r0, r0, #1
   13d00:	strb	r0, [r5, #24]
   13d04:	ldr	r0, [r5, #4]
   13d08:	ldr	r1, [r5, #16]
   13d0c:	add	r1, r1, #1
   13d10:	str	r1, [r5, #16]
   13d14:	cmp	r0, #0
   13d18:	beq	13d90 <rb_dictionary_link+0xa8>
   13d1c:	ldr	r1, [r4, #20]
   13d20:	mov	r0, r5
   13d24:	bl	13b4c <rb_dictionary_retune>
   13d28:	ldr	r0, [r4, #20]
   13d2c:	ldr	r2, [r5]
   13d30:	ldr	r1, [r5, #4]
   13d34:	ldr	r1, [r1, #20]
   13d38:	blx	r2
   13d3c:	cmn	r0, #1
   13d40:	ble	13dac <rb_dictionary_link+0xc4>
   13d44:	cmp	r0, #0
   13d48:	beq	13dfc <rb_dictionary_link+0x114>
   13d4c:	ldr	r0, [r5, #4]
   13d50:	ldr	r1, [r0, #4]
   13d54:	str	r1, [r4, #4]
   13d58:	ldr	r1, [r5, #4]
   13d5c:	str	r1, [r4]
   13d60:	mov	r2, #0
   13d64:	str	r2, [r0, #4]
   13d68:	ldr	r2, [r0, #12]
   13d6c:	add	r3, r2, #8
   13d70:	cmp	r2, #0
   13d74:	addeq	r3, r5, #12
   13d78:	str	r4, [r3]
   13d7c:	ldr	r2, [r0, #12]
   13d80:	str	r1, [r4, #8]
   13d84:	str	r2, [r4, #12]
   13d88:	str	r4, [r0, #12]
   13d8c:	b	13df0 <rb_dictionary_link+0x108>
   13d90:	vmov.i32	q8, #0	; 0x00000000
   13d94:	vst1.32	{d16-d17}, [r4]
   13d98:	str	r4, [r5, #4]
   13d9c:	str	r4, [r5, #8]
   13da0:	str	r4, [r5, #12]
   13da4:	mov	r0, r4
   13da8:	pop	{r4, r5, fp, pc}
   13dac:	ldr	r0, [r5, #4]
   13db0:	ldr	r0, [r0]
   13db4:	str	r0, [r4]
   13db8:	ldr	r0, [r5, #4]
   13dbc:	str	r0, [r4, #4]
   13dc0:	ldr	r1, [r5, #4]
   13dc4:	mov	r2, #0
   13dc8:	str	r2, [r1]
   13dcc:	ldr	r2, [r1, #8]
   13dd0:	add	r3, r2, #12
   13dd4:	cmp	r2, #0
   13dd8:	addeq	r3, r5, #8
   13ddc:	str	r4, [r3]
   13de0:	ldr	r2, [r1, #8]
   13de4:	str	r2, [r4, #8]
   13de8:	str	r0, [r4, #12]
   13dec:	str	r4, [r1, #8]
   13df0:	str	r4, [r5, #4]
   13df4:	mov	r0, r4
   13df8:	pop	{r4, r5, fp, pc}
   13dfc:	ldr	r0, [r5, #4]
   13e00:	ldr	r1, [r4, #20]
   13e04:	str	r1, [r0, #20]
   13e08:	ldr	r1, [r4, #16]
   13e0c:	str	r1, [r0, #16]
   13e10:	ldr	r0, [r5, #16]
   13e14:	sub	r0, r0, #1
   13e18:	str	r0, [r5, #16]
   13e1c:	mov	r0, r4
   13e20:	bl	139e4 <rb_free>
   13e24:	ldr	r4, [r5, #4]
   13e28:	mov	r0, r4
   13e2c:	pop	{r4, r5, fp, pc}

00013e30 <rb_dictionary_delete>:
   13e30:	push	{r4, r5, r6, sl, fp, lr}
   13e34:	add	fp, sp, #16
   13e38:	mov	r5, r0
   13e3c:	bl	5348 <rb_dictionary_find@plt>
   13e40:	cmp	r0, #0
   13e44:	beq	13e68 <rb_dictionary_delete+0x38>
   13e48:	mov	r6, r0
   13e4c:	ldr	r4, [r0, #16]
   13e50:	mov	r0, r5
   13e54:	bl	13e74 <rb_dictionary_unlink_root>
   13e58:	mov	r0, r6
   13e5c:	bl	139e4 <rb_free>
   13e60:	mov	r0, r4
   13e64:	pop	{r4, r5, r6, sl, fp, pc}
   13e68:	mov	r4, #0
   13e6c:	mov	r0, r4
   13e70:	pop	{r4, r5, r6, sl, fp, pc}

00013e74 <rb_dictionary_unlink_root>:
   13e74:	ldrb	r1, [r0, #24]
   13e78:	orr	r1, r1, #1
   13e7c:	strb	r1, [r0, #24]
   13e80:	ldr	ip, [r0, #4]
   13e84:	cmp	ip, #0
   13e88:	bxeq	lr
   13e8c:	ldm	ip, {r1, r3}
   13e90:	cmp	r1, #0
   13e94:	beq	13ee0 <rb_dictionary_unlink_root+0x6c>
   13e98:	cmp	r3, #0
   13e9c:	beq	13ee8 <rb_dictionary_unlink_root+0x74>
   13ea0:	ldr	r2, [ip, #12]
   13ea4:	cmp	r2, r3
   13ea8:	beq	13ef0 <rb_dictionary_unlink_root+0x7c>
   13eac:	mov	r1, r3
   13eb0:	ldr	r3, [r3]
   13eb4:	cmp	r3, #0
   13eb8:	cmpne	r3, r2
   13ebc:	bne	13eac <rb_dictionary_unlink_root+0x38>
   13ec0:	ldr	r3, [r2, #4]
   13ec4:	str	r3, [r1]
   13ec8:	str	r2, [r0, #4]
   13ecc:	ldr	r1, [ip]
   13ed0:	str	r1, [r2]
   13ed4:	ldr	r1, [ip, #4]
   13ed8:	str	r1, [r2, #4]
   13edc:	b	13efc <rb_dictionary_unlink_root+0x88>
   13ee0:	str	r3, [r0, #4]
   13ee4:	b	13efc <rb_dictionary_unlink_root+0x88>
   13ee8:	str	r1, [r0, #4]
   13eec:	b	13efc <rb_dictionary_unlink_root+0x88>
   13ef0:	str	r2, [r0, #4]
   13ef4:	ldr	r1, [ip]
   13ef8:	str	r1, [r2]
   13efc:	ldr	r1, [ip, #8]
   13f00:	cmp	r1, #0
   13f04:	ldrne	r2, [ip, #12]
   13f08:	strne	r2, [r1, #12]
   13f0c:	ldr	r1, [r0, #8]
   13f10:	cmp	r1, ip
   13f14:	bne	13f20 <rb_dictionary_unlink_root+0xac>
   13f18:	ldr	r1, [ip, #12]
   13f1c:	str	r1, [r0, #8]
   13f20:	ldr	r1, [ip, #12]
   13f24:	cmp	r1, #0
   13f28:	ldrne	r2, [ip, #8]
   13f2c:	strne	r2, [r1, #8]
   13f30:	ldr	r1, [r0, #12]
   13f34:	cmp	r1, ip
   13f38:	bne	13f44 <rb_dictionary_unlink_root+0xd0>
   13f3c:	ldr	r1, [ip, #8]
   13f40:	str	r1, [r0, #12]
   13f44:	ldr	r1, [r0, #16]
   13f48:	sub	r1, r1, #1
   13f4c:	str	r1, [r0, #16]
   13f50:	bx	lr

00013f54 <rb_dictionary_retrieve>:
   13f54:	push	{fp, lr}
   13f58:	mov	fp, sp
   13f5c:	bl	5348 <rb_dictionary_find@plt>
   13f60:	cmp	r0, #0
   13f64:	ldrne	r0, [r0, #16]
   13f68:	moveq	r0, #0
   13f6c:	pop	{fp, pc}

00013f70 <rb_dictionary_size>:
   13f70:	ldr	r0, [r0, #16]
   13f74:	bx	lr

00013f78 <rb_dictionary_stats>:
   13f78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f7c:	add	fp, sp, #24
   13f80:	sub	sp, sp, #280	; 0x118
   13f84:	mov	r5, r2
   13f88:	mov	r7, r1
   13f8c:	mov	r6, r0
   13f90:	ldr	r0, [r0, #16]
   13f94:	cmp	r0, #0
   13f98:	beq	13ff0 <rb_dictionary_stats+0x78>
   13f9c:	mov	r0, #0
   13fa0:	str	r0, [sp, #20]
   13fa4:	ldr	r0, [r6, #4]
   13fa8:	add	r2, sp, #20
   13fac:	mov	r1, #0
   13fb0:	bl	14054 <stats_recurse>
   13fb4:	ldr	r1, [r6, #16]
   13fb8:	ldr	r3, [r6, #20]
   13fbc:	ldr	r2, [sp, #20]
   13fc0:	ldr	r6, [pc, #120]	; 14040 <rb_dictionary_stats+0xc8>
   13fc4:	add	r6, pc, r6
   13fc8:	udiv	r4, r0, r1
   13fcc:	str	r6, [sp]
   13fd0:	str	r1, [sp, #4]
   13fd4:	str	r0, [sp, #8]
   13fd8:	str	r4, [sp, #12]
   13fdc:	str	r2, [sp, #16]
   13fe0:	add	r0, sp, #24
   13fe4:	ldr	r2, [pc, #88]	; 14044 <rb_dictionary_stats+0xcc>
   13fe8:	add	r2, pc, r2
   13fec:	b	14024 <rb_dictionary_stats+0xac>
   13ff0:	ldr	r3, [r6, #20]
   13ff4:	ldr	r0, [pc, #76]	; 14048 <rb_dictionary_stats+0xd0>
   13ff8:	add	r0, pc, r0
   13ffc:	ldr	r1, [pc, #72]	; 1404c <rb_dictionary_stats+0xd4>
   14000:	add	r1, pc, r1
   14004:	str	r1, [sp]
   14008:	str	r0, [sp, #4]
   1400c:	str	r0, [sp, #8]
   14010:	str	r0, [sp, #12]
   14014:	str	r0, [sp, #16]
   14018:	add	r0, sp, #24
   1401c:	ldr	r2, [pc, #44]	; 14050 <rb_dictionary_stats+0xd8>
   14020:	add	r2, pc, r2
   14024:	mov	r1, #256	; 0x100
   14028:	bl	54c8 <snprintf@plt>
   1402c:	add	r0, sp, #24
   14030:	mov	r1, r5
   14034:	blx	r7
   14038:	sub	sp, fp, #24
   1403c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14040:	.word	0x00002914
   14044:	.word	0x000028cc
   14048:	.word	0x00001ab7
   1404c:	.word	0x000028d8
   14050:	.word	0x000028bd

00014054 <stats_recurse>:
   14054:	push	{r4, r5, r6, r7, fp, lr}
   14058:	add	fp, sp, #16
   1405c:	mov	r5, r2
   14060:	mov	r4, r1
   14064:	mov	r6, r0
   14068:	ldr	r0, [r2]
   1406c:	cmp	r0, r1
   14070:	strlt	r4, [r5]
   14074:	cmp	r6, #0
   14078:	beq	140c0 <stats_recurse+0x6c>
   1407c:	ldr	r0, [r6]
   14080:	cmp	r0, #0
   14084:	mov	r7, r4
   14088:	beq	1409c <stats_recurse+0x48>
   1408c:	add	r1, r4, #1
   14090:	mov	r2, r5
   14094:	bl	14054 <stats_recurse>
   14098:	add	r7, r0, r4
   1409c:	ldr	r0, [r6, #4]
   140a0:	cmp	r0, #0
   140a4:	beq	140bc <stats_recurse+0x68>
   140a8:	add	r1, r4, #1
   140ac:	mov	r2, r5
   140b0:	bl	14054 <stats_recurse>
   140b4:	add	r0, r0, r7
   140b8:	pop	{r4, r5, r6, r7, fp, pc}
   140bc:	mov	r4, r7
   140c0:	mov	r0, r4
   140c4:	pop	{r4, r5, r6, r7, fp, pc}

000140c8 <rb_dictionary_stats_walk>:
   140c8:	push	{r4, r5, r6, sl, fp, lr}
   140cc:	add	fp, sp, #16
   140d0:	ldr	r6, [pc, #48]	; 14108 <rb_dictionary_stats_walk+0x40>
   140d4:	ldr	r6, [pc, r6]
   140d8:	cmp	r6, #0
   140dc:	beq	14104 <rb_dictionary_stats_walk+0x3c>
   140e0:	mov	r4, r1
   140e4:	mov	r5, r0
   140e8:	ldr	r0, [r6]
   140ec:	mov	r1, r5
   140f0:	mov	r2, r4
   140f4:	bl	52b8 <rb_dictionary_stats@plt>
   140f8:	ldr	r6, [r6, #8]
   140fc:	cmp	r6, #0
   14100:	bne	140e8 <rb_dictionary_stats_walk+0x20>
   14104:	pop	{r4, r5, r6, sl, fp, pc}
   14108:	.word	0x00031dd4

0001410c <rb_radixtree_create>:
   1410c:	push	{r4, r5, r6, sl, fp, lr}
   14110:	add	fp, sp, #16
   14114:	mov	r4, r1
   14118:	mov	r5, r0
   1411c:	mov	r0, #28
   14120:	bl	14154 <rb_malloc>
   14124:	mov	r6, r0
   14128:	str	r4, [r0]
   1412c:	mov	r0, r5
   14130:	bl	14174 <rb_strdup>
   14134:	str	r0, [r6, #12]
   14138:	mov	r0, #0
   1413c:	str	r0, [r6, #4]
   14140:	add	r1, r6, #16
   14144:	mov	r0, r6
   14148:	bl	141a4 <rb_dlinkAdd>
   1414c:	mov	r0, r6
   14150:	pop	{r4, r5, r6, sl, fp, pc}

00014154 <rb_malloc>:
   14154:	push	{fp, lr}
   14158:	mov	fp, sp
   1415c:	mov	r1, r0
   14160:	mov	r0, #1
   14164:	bl	4f1c <calloc@plt>
   14168:	cmp	r0, #0
   1416c:	popne	{fp, pc}
   14170:	bl	52a0 <rb_outofmemory@plt>

00014174 <rb_strdup>:
   14174:	push	{r4, sl, fp, lr}
   14178:	add	fp, sp, #8
   1417c:	mov	r4, r0
   14180:	bl	50fc <strlen@plt>
   14184:	add	r0, r0, #1
   14188:	bl	52c4 <malloc@plt>
   1418c:	cmp	r0, #0
   14190:	beq	141a0 <rb_strdup+0x2c>
   14194:	mov	r1, r4
   14198:	pop	{r4, sl, fp, lr}
   1419c:	b	51b0 <strcpy@plt>
   141a0:	bl	52a0 <rb_outofmemory@plt>

000141a4 <rb_dlinkAdd>:
   141a4:	mov	r2, #0
   141a8:	stm	r1, {r0, r2}
   141ac:	ldr	r0, [pc, #64]	; 141f4 <rb_dlinkAdd+0x50>
   141b0:	ldr	r0, [pc, r0]
   141b4:	ldr	r2, [r0]
   141b8:	str	r2, [r1, #8]
   141bc:	cmp	r2, #0
   141c0:	beq	141d0 <rb_dlinkAdd+0x2c>
   141c4:	add	r2, r2, #4
   141c8:	str	r1, [r2]
   141cc:	b	141e0 <rb_dlinkAdd+0x3c>
   141d0:	mov	r2, r0
   141d4:	ldr	r3, [r2, #4]!
   141d8:	cmp	r3, #0
   141dc:	streq	r1, [r2]
   141e0:	str	r1, [r0]
   141e4:	ldr	r1, [r0, #8]
   141e8:	add	r1, r1, #1
   141ec:	str	r1, [r0, #8]
   141f0:	bx	lr
   141f4:	.word	0x0001422c

000141f8 <rb_radixtree_destroy>:
   141f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   141fc:	add	fp, sp, #24
   14200:	sub	sp, sp, #40	; 0x28
   14204:	mov	r8, r2
   14208:	mov	r6, r1
   1420c:	mov	r4, r0
   14210:	mov	r7, sp
   14214:	mov	r1, r7
   14218:	bl	4d54 <rb_radixtree_foreach_start@plt>
   1421c:	mov	r0, r4
   14220:	mov	r1, r7
   14224:	bl	50c0 <rb_radixtree_foreach_cur@plt>
   14228:	cmp	r0, #0
   1422c:	beq	14284 <rb_radixtree_destroy+0x8c>
   14230:	mov	r7, sp
   14234:	b	14264 <rb_radixtree_destroy+0x6c>
   14238:	ldr	r1, [r5, #8]
   1423c:	mov	r0, r4
   14240:	bl	55dc <rb_radixtree_delete@plt>
   14244:	mov	r0, r4
   14248:	mov	r1, r7
   1424c:	bl	4d90 <rb_radixtree_foreach_next@plt>
   14250:	mov	r0, r4
   14254:	mov	r1, r7
   14258:	bl	50c0 <rb_radixtree_foreach_cur@plt>
   1425c:	cmp	r0, #0
   14260:	beq	14284 <rb_radixtree_destroy+0x8c>
   14264:	ldr	r5, [sp, #8]
   14268:	cmp	r6, #0
   1426c:	beq	14238 <rb_radixtree_destroy+0x40>
   14270:	ldr	r1, [r5, #4]
   14274:	ldr	r0, [r5, #8]
   14278:	mov	r2, r8
   1427c:	blx	r6
   14280:	b	14238 <rb_radixtree_destroy+0x40>
   14284:	add	r0, r4, #16
   14288:	bl	14438 <rb_dlinkDelete>
   1428c:	ldr	r0, [r4, #12]
   14290:	bl	14488 <rb_free>
   14294:	mov	r0, r4
   14298:	sub	sp, fp, #24
   1429c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   142a0:	b	14488 <rb_free>

000142a4 <rb_radixtree_foreach_start>:
   142a4:	push	{r4, r5, fp, lr}
   142a8:	add	fp, sp, #8
   142ac:	cmp	r0, #0
   142b0:	beq	142f0 <rb_radixtree_foreach_start+0x4c>
   142b4:	mov	r4, r1
   142b8:	mov	r5, r0
   142bc:	ldr	r0, [r0, #4]
   142c0:	cmp	r0, #0
   142c4:	moveq	r0, #0
   142c8:	blne	1469c <first_leaf>
   142cc:	str	r0, [r4, #12]
   142d0:	ldr	r0, [r4, #12]
   142d4:	str	r0, [r4, #8]
   142d8:	cmp	r0, #0
   142dc:	popeq	{r4, r5, fp, pc}
   142e0:	mov	r0, r5
   142e4:	mov	r1, r4
   142e8:	pop	{r4, r5, fp, lr}
   142ec:	b	1434c <rb_radixtree_foreach_next>
   142f0:	pop	{r4, r5, fp, pc}

000142f4 <rb_radixtree_foreach_cur>:
   142f4:	mov	r2, r0
   142f8:	mov	r0, #0
   142fc:	cmp	r2, #0
   14300:	bxeq	lr
   14304:	ldr	r1, [r1, #8]
   14308:	cmp	r1, #0
   1430c:	ldrne	r0, [r1, #4]
   14310:	bx	lr

00014314 <rb_radixtree_delete>:
   14314:	push	{r4, r5, fp, lr}
   14318:	add	fp, sp, #8
   1431c:	mov	r5, r0
   14320:	mov	r4, #0
   14324:	mov	r2, #0
   14328:	bl	548c <rb_radixtree_elem_find@plt>
   1432c:	cmp	r0, #0
   14330:	beq	14344 <rb_radixtree_delete+0x30>
   14334:	mov	r1, r0
   14338:	ldr	r4, [r0, #4]
   1433c:	mov	r0, r5
   14340:	bl	4cf4 <rb_radixtree_elem_delete@plt>
   14344:	mov	r0, r4
   14348:	pop	{r4, r5, fp, pc}

0001434c <rb_radixtree_foreach_next>:
   1434c:	push	{r4, r5, fp, lr}
   14350:	add	fp, sp, #8
   14354:	cmp	r0, #0
   14358:	beq	14434 <rb_radixtree_foreach_next+0xe8>
   1435c:	mov	r4, r1
   14360:	ldr	r0, [r1, #8]
   14364:	cmp	r0, #0
   14368:	beq	14434 <rb_radixtree_foreach_next+0xe8>
   1436c:	ldr	r0, [r4, #12]
   14370:	str	r0, [r4, #8]
   14374:	cmp	r0, #0
   14378:	popeq	{r4, r5, fp, pc}
   1437c:	ldr	r1, [r0, #12]
   14380:	cmp	r1, #0
   14384:	beq	1442c <rb_radixtree_foreach_next+0xe0>
   14388:	ldrb	r2, [r0, #16]
   1438c:	b	143a0 <rb_radixtree_foreach_next+0x54>
   14390:	sub	r2, r3, #1
   14394:	sub	r3, r3, #2
   14398:	cmp	r3, #15
   1439c:	bge	143e0 <rb_radixtree_foreach_next+0x94>
   143a0:	add	r2, r2, #1
   143a4:	ldr	r5, [r1, r2, lsl #2]
   143a8:	add	r3, r2, #1
   143ac:	cmp	r5, #0
   143b0:	bne	143c0 <rb_radixtree_foreach_next+0x74>
   143b4:	cmp	r2, #16
   143b8:	mov	r2, r3
   143bc:	blt	143a4 <rb_radixtree_foreach_next+0x58>
   143c0:	cmp	r5, #0
   143c4:	beq	14390 <rb_radixtree_foreach_next+0x44>
   143c8:	ldr	r2, [r5]
   143cc:	cmn	r2, #1
   143d0:	bne	14408 <rb_radixtree_foreach_next+0xbc>
   143d4:	cmp	r5, r0
   143d8:	beq	14390 <rb_radixtree_foreach_next+0x44>
   143dc:	b	14414 <rb_radixtree_foreach_next+0xc8>
   143e0:	ldr	r3, [r1, #68]	; 0x44
   143e4:	cmp	r3, #0
   143e8:	beq	1442c <rb_radixtree_foreach_next+0xe0>
   143ec:	ldrb	r2, [r1, #72]	; 0x48
   143f0:	cmp	r2, #14
   143f4:	mov	r1, r3
   143f8:	bhi	143e0 <rb_radixtree_foreach_next+0x94>
   143fc:	add	r2, r2, #1
   14400:	mov	r1, r3
   14404:	b	143a0 <rb_radixtree_foreach_next+0x54>
   14408:	mov	r2, #0
   1440c:	mov	r1, r5
   14410:	b	143a0 <rb_radixtree_foreach_next+0x54>
   14414:	ldr	r1, [r0, #8]
   14418:	ldr	r0, [r5, #8]
   1441c:	bl	5600 <strcmp@plt>
   14420:	cmn	r0, #1
   14424:	strgt	r5, [r4, #12]
   14428:	popgt	{r4, r5, fp, pc}
   1442c:	mov	r0, #0
   14430:	str	r0, [r4, #12]
   14434:	pop	{r4, r5, fp, pc}

00014438 <rb_dlinkDelete>:
   14438:	ldr	ip, [pc, #68]	; 14484 <rb_dlinkDelete+0x4c>
   1443c:	ldr	ip, [pc, ip]
   14440:	ldmib	r0, {r2, r3}
   14444:	add	r1, r3, #4
   14448:	cmp	r3, #0
   1444c:	addeq	r1, ip, #4
   14450:	str	r2, [r1]
   14454:	ldmib	r0, {r1, r2}
   14458:	cmp	r1, #0
   1445c:	mov	r3, ip
   14460:	addne	r3, r1, #8
   14464:	str	r2, [r3]
   14468:	mov	r1, #0
   1446c:	str	r1, [r0, #4]
   14470:	str	r1, [r0, #8]
   14474:	ldr	r0, [ip, #8]
   14478:	sub	r0, r0, #1
   1447c:	str	r0, [ip, #8]
   14480:	bx	lr
   14484:	.word	0x00013fa0

00014488 <rb_free>:
   14488:	cmp	r0, #0
   1448c:	bxeq	lr
   14490:	b	500c <free@plt>

00014494 <rb_radixtree_foreach>:
   14494:	push	{r4, r5, r6, r7, fp, lr}
   14498:	add	fp, sp, #16
   1449c:	ldr	r0, [r0, #4]
   144a0:	cmp	r0, #0
   144a4:	beq	14580 <rb_radixtree_foreach+0xec>
   144a8:	mov	r4, r2
   144ac:	mov	r3, r1
   144b0:	ldr	r1, [r0]
   144b4:	cmn	r1, #1
   144b8:	beq	14564 <rb_radixtree_foreach+0xd0>
   144bc:	mov	r1, #0
   144c0:	mov	r5, r0
   144c4:	add	r0, r1, #1
   144c8:	ldr	r2, [r5, r0, lsl #2]
   144cc:	add	r1, r0, #1
   144d0:	cmp	r2, #0
   144d4:	bne	144e4 <rb_radixtree_foreach+0x50>
   144d8:	cmp	r0, #16
   144dc:	mov	r0, r1
   144e0:	blt	144c8 <rb_radixtree_foreach+0x34>
   144e4:	sub	r6, r1, #1
   144e8:	cmp	r2, #0
   144ec:	beq	1452c <rb_radixtree_foreach+0x98>
   144f0:	ldr	r0, [r2]
   144f4:	cmn	r0, #1
   144f8:	mov	r0, r5
   144fc:	movne	r0, r2
   14500:	mov	r1, r6
   14504:	movwne	r1, #0
   14508:	bne	14534 <rb_radixtree_foreach+0xa0>
   1450c:	cmp	r3, #0
   14510:	beq	14534 <rb_radixtree_foreach+0xa0>
   14514:	ldr	r1, [r2, #4]
   14518:	ldr	r0, [r2, #8]
   1451c:	mov	r2, r4
   14520:	mov	r7, r3
   14524:	blx	r3
   14528:	mov	r3, r7
   1452c:	mov	r0, r5
   14530:	mov	r1, r6
   14534:	cmp	r1, #16
   14538:	blt	144c0 <rb_radixtree_foreach+0x2c>
   1453c:	mov	r1, r0
   14540:	ldr	r0, [r1, #68]	; 0x44
   14544:	cmp	r0, #0
   14548:	beq	14580 <rb_radixtree_foreach+0xec>
   1454c:	ldrb	r2, [r1, #72]	; 0x48
   14550:	cmp	r2, #14
   14554:	mov	r1, r0
   14558:	bhi	14540 <rb_radixtree_foreach+0xac>
   1455c:	add	r1, r2, #1
   14560:	b	144c0 <rb_radixtree_foreach+0x2c>
   14564:	cmp	r3, #0
   14568:	beq	14580 <rb_radixtree_foreach+0xec>
   1456c:	ldr	r1, [r0, #4]
   14570:	ldr	r0, [r0, #8]
   14574:	mov	r2, r4
   14578:	pop	{r4, r5, r6, r7, fp, lr}
   1457c:	bx	r3
   14580:	pop	{r4, r5, r6, r7, fp, pc}

00014584 <rb_radixtree_search>:
   14584:	push	{r4, r5, r6, r7, fp, lr}
   14588:	add	fp, sp, #16
   1458c:	mov	r4, r2
   14590:	ldr	r2, [r0, #4]
   14594:	mov	r0, #0
   14598:	cmp	r2, #0
   1459c:	beq	14698 <rb_radixtree_search+0x114>
   145a0:	mov	r3, r1
   145a4:	ldr	r1, [r2]
   145a8:	cmn	r1, #1
   145ac:	beq	1467c <rb_radixtree_search+0xf8>
   145b0:	mov	r1, #0
   145b4:	b	145bc <rb_radixtree_search+0x38>
   145b8:	mov	r2, #0
   145bc:	mov	r5, r2
   145c0:	add	r1, r1, #1
   145c4:	ldr	r0, [r5, r1, lsl #2]
   145c8:	add	r2, r1, #1
   145cc:	cmp	r0, #0
   145d0:	bne	145e0 <rb_radixtree_search+0x5c>
   145d4:	cmp	r1, #16
   145d8:	mov	r1, r2
   145dc:	blt	145c4 <rb_radixtree_search+0x40>
   145e0:	sub	r6, r2, #1
   145e4:	cmp	r0, #0
   145e8:	beq	14644 <rb_radixtree_search+0xc0>
   145ec:	ldr	r1, [r0]
   145f0:	cmn	r1, #1
   145f4:	mov	r2, r5
   145f8:	movne	r2, r0
   145fc:	mov	r1, r6
   14600:	movwne	r1, #0
   14604:	bne	14638 <rb_radixtree_search+0xb4>
   14608:	cmp	r3, #0
   1460c:	beq	14638 <rb_radixtree_search+0xb4>
   14610:	ldr	r1, [r0, #4]
   14614:	ldr	r0, [r0, #8]
   14618:	mov	r2, r4
   1461c:	mov	r7, r3
   14620:	blx	r3
   14624:	mov	r3, r7
   14628:	cmp	r0, #0
   1462c:	mov	r2, r5
   14630:	mov	r1, r6
   14634:	bne	14698 <rb_radixtree_search+0x114>
   14638:	cmp	r1, #16
   1463c:	blt	145bc <rb_radixtree_search+0x38>
   14640:	b	14654 <rb_radixtree_search+0xd0>
   14644:	mov	r2, r5
   14648:	mov	r1, r6
   1464c:	cmp	r1, #16
   14650:	blt	145bc <rb_radixtree_search+0x38>
   14654:	ldr	r0, [r2, #68]	; 0x44
   14658:	ldrb	r1, [r2, #72]	; 0x48
   1465c:	cmp	r0, #0
   14660:	beq	145b8 <rb_radixtree_search+0x34>
   14664:	cmp	r1, #14
   14668:	mov	r2, r0
   1466c:	bhi	14654 <rb_radixtree_search+0xd0>
   14670:	add	r1, r1, #1
   14674:	mov	r2, r0
   14678:	b	145bc <rb_radixtree_search+0x38>
   1467c:	cmp	r3, #0
   14680:	beq	14698 <rb_radixtree_search+0x114>
   14684:	ldr	r1, [r2, #4]
   14688:	ldr	r0, [r2, #8]
   1468c:	mov	r2, r4
   14690:	pop	{r4, r5, r6, r7, fp, lr}
   14694:	bx	r3
   14698:	pop	{r4, r5, r6, r7, fp, pc}

0001469c <first_leaf>:
   1469c:	ldr	r1, [r0]
   146a0:	cmn	r1, #1
   146a4:	bxeq	lr
   146a8:	mov	r1, r0
   146ac:	mov	r2, #1
   146b0:	ldr	r0, [r1, r2, lsl #2]
   146b4:	cmp	r0, #0
   146b8:	bne	1469c <first_leaf>
   146bc:	add	r2, r2, #1
   146c0:	cmp	r2, #17
   146c4:	bne	146b0 <first_leaf+0x14>
   146c8:	mov	r0, r1
   146cc:	b	1469c <first_leaf>

000146d0 <rb_radixtree_elem_find>:
   146d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146d4:	add	fp, sp, #28
   146d8:	sub	sp, sp, #260	; 0x104
   146dc:	mov	r8, r2
   146e0:	mov	r4, r1
   146e4:	mov	sl, r0
   146e8:	mov	r0, r1
   146ec:	bl	50fc <strlen@plt>
   146f0:	mov	r5, r0
   146f4:	ldr	r0, [sl]
   146f8:	mov	r6, #0
   146fc:	cmp	r0, #0
   14700:	beq	14728 <rb_radixtree_elem_find+0x58>
   14704:	cmp	r5, #256	; 0x100
   14708:	blt	14730 <rb_radixtree_elem_find+0x60>
   1470c:	mov	r0, r4
   14710:	bl	14174 <rb_strdup>
   14714:	mov	r7, r0
   14718:	ldr	r1, [sl]
   1471c:	blx	r1
   14720:	mov	r9, r7
   14724:	b	14754 <rb_radixtree_elem_find+0x84>
   14728:	mov	r7, r4
   1472c:	b	14750 <rb_radixtree_elem_find+0x80>
   14730:	mov	r7, sp
   14734:	mov	r0, r7
   14738:	mov	r1, r4
   1473c:	mov	r2, #256	; 0x100
   14740:	bl	4fd0 <rb_strlcpy@plt>
   14744:	ldr	r1, [sl]
   14748:	mov	r0, r7
   1474c:	blx	r1
   14750:	mov	r9, #0
   14754:	ldr	r4, [sl, #4]
   14758:	cmp	r4, #0
   1475c:	beq	147d0 <rb_radixtree_elem_find+0x100>
   14760:	mov	ip, #4
   14764:	mov	r1, #15
   14768:	mov	r6, #0
   1476c:	b	14780 <rb_radixtree_elem_find+0xb0>
   14770:	add	r0, r4, r0, lsl #2
   14774:	ldr	r4, [r0, #4]
   14778:	cmp	r4, #0
   1477c:	beq	147d0 <rb_radixtree_elem_find+0x100>
   14780:	ldr	r2, [r4]
   14784:	cmn	r2, #1
   14788:	beq	147b0 <rb_radixtree_elem_find+0xe0>
   1478c:	add	r3, r2, r2, lsr #31
   14790:	cmp	r5, r3, asr #1
   14794:	mov	r0, #0
   14798:	ble	14770 <rb_radixtree_elem_find+0xa0>
   1479c:	asr	r0, r3, #1
   147a0:	ldrb	r0, [r7, r0]
   147a4:	bic	r2, ip, r2, lsl #2
   147a8:	and	r0, r1, r0, lsr r2
   147ac:	b	14770 <rb_radixtree_elem_find+0xa0>
   147b0:	cmp	r8, #0
   147b4:	bne	147cc <rb_radixtree_elem_find+0xfc>
   147b8:	ldr	r0, [r4, #8]
   147bc:	mov	r1, r7
   147c0:	bl	5600 <strcmp@plt>
   147c4:	cmp	r0, #0
   147c8:	movne	r4, #0
   147cc:	mov	r6, r4
   147d0:	cmp	r9, #0
   147d4:	movne	r0, r9
   147d8:	blne	14488 <rb_free>
   147dc:	mov	r0, r6
   147e0:	sub	sp, fp, #28
   147e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000147e8 <rb_radixtree_foreach_start_from>:
   147e8:	push	{r4, r5, fp, lr}
   147ec:	add	fp, sp, #8
   147f0:	mov	r4, r1
   147f4:	mov	r5, r0
   147f8:	cmp	r2, #0
   147fc:	beq	1482c <rb_radixtree_foreach_start_from+0x44>
   14800:	mov	r0, #0
   14804:	str	r0, [r4, #8]
   14808:	mov	r0, r5
   1480c:	mov	r1, r2
   14810:	mov	r2, #1
   14814:	bl	548c <rb_radixtree_elem_find@plt>
   14818:	str	r0, [r4, #12]
   1481c:	mov	r0, r5
   14820:	mov	r1, r4
   14824:	pop	{r4, r5, fp, lr}
   14828:	b	1434c <rb_radixtree_foreach_next>
   1482c:	mov	r0, r5
   14830:	mov	r1, r4
   14834:	pop	{r4, r5, fp, lr}
   14838:	b	142a4 <rb_radixtree_foreach_start>

0001483c <rb_radixtree_elem_add>:
   1483c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14840:	add	fp, sp, #28
   14844:	sub	sp, sp, #20
   14848:	mov	r9, r2
   1484c:	mov	r5, r1
   14850:	mov	r6, r0
   14854:	mov	r0, r1
   14858:	bl	50fc <strlen@plt>
   1485c:	mov	r4, r0
   14860:	mov	r0, r5
   14864:	bl	14174 <rb_strdup>
   14868:	cmp	r0, #0
   1486c:	beq	14964 <rb_radixtree_elem_add+0x128>
   14870:	mov	r1, r0
   14874:	ldr	r2, [r6]
   14878:	cmp	r2, #0
   1487c:	str	r0, [sp, #16]
   14880:	beq	14890 <rb_radixtree_elem_add+0x54>
   14884:	mov	r0, r1
   14888:	blx	r2
   1488c:	ldr	r1, [sp, #16]
   14890:	mov	sl, r6
   14894:	ldr	r7, [sl, #4]!
   14898:	cmp	r7, #0
   1489c:	beq	148f8 <rb_radixtree_elem_add+0xbc>
   148a0:	ldr	r2, [r7]
   148a4:	cmn	r2, #1
   148a8:	beq	14944 <rb_radixtree_elem_add+0x108>
   148ac:	mov	ip, #4
   148b0:	mov	r0, #15
   148b4:	mov	r5, r7
   148b8:	add	r3, r2, r2, lsr #31
   148bc:	mov	r8, #0
   148c0:	cmp	r4, r3, asr #1
   148c4:	ble	148d8 <rb_radixtree_elem_add+0x9c>
   148c8:	asr	r3, r3, #1
   148cc:	ldrb	r3, [r1, r3]
   148d0:	bic	r2, ip, r2, lsl #2
   148d4:	and	r8, r0, r3, lsr r2
   148d8:	add	r2, r5, r8, lsl #2
   148dc:	ldr	r7, [r2, #4]
   148e0:	cmp	r7, #0
   148e4:	beq	14970 <rb_radixtree_elem_add+0x134>
   148e8:	ldr	r2, [r7]
   148ec:	cmn	r2, #1
   148f0:	bne	148b4 <rb_radixtree_elem_add+0x78>
   148f4:	b	1494c <rb_radixtree_elem_add+0x110>
   148f8:	mov	r8, #18
   148fc:	mov	r5, #0
   14900:	mov	r0, #20
   14904:	bl	14154 <rb_malloc>
   14908:	str	r0, [r6, #4]
   1490c:	mvn	r1, #0
   14910:	stm	r0, {r1, r9}
   14914:	ldr	r0, [r6, #4]
   14918:	ldr	r1, [sp, #16]
   1491c:	str	r1, [r0, #8]
   14920:	ldr	r0, [r6, #4]
   14924:	str	r5, [r0, #12]
   14928:	ldr	r0, [r6, #4]
   1492c:	strb	r8, [r0, #16]
   14930:	ldmib	r6, {r0, r1}
   14934:	add	r1, r1, #1
   14938:	str	r1, [r6, #8]
   1493c:	sub	sp, fp, #28
   14940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14944:	mov	r5, #0
   14948:	mov	r8, #18
   1494c:	ldr	r0, [r7, #8]
   14950:	bl	5600 <strcmp@plt>
   14954:	cmp	r0, #0
   14958:	bne	14984 <rb_radixtree_elem_add+0x148>
   1495c:	ldr	r0, [sp, #16]
   14960:	bl	14488 <rb_free>
   14964:	mov	r0, #0
   14968:	sub	sp, fp, #28
   1496c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14970:	mov	r0, r5
   14974:	bl	1469c <first_leaf>
   14978:	mov	r7, r0
   1497c:	cmp	r0, #0
   14980:	beq	14900 <rb_radixtree_elem_add+0xc4>
   14984:	str	sl, [sp]
   14988:	str	r9, [sp, #8]
   1498c:	str	r6, [sp, #12]
   14990:	ldr	r0, [r7, #8]
   14994:	mvn	sl, #0
   14998:	mov	r1, #0
   1499c:	mov	r2, #4
   149a0:	mov	r3, #15
   149a4:	ldr	ip, [sp, #16]
   149a8:	add	sl, sl, #1
   149ac:	ldrb	r4, [ip, sl, lsr #1]
   149b0:	ldrb	r6, [r0, sl, lsr #1]
   149b4:	eor	r6, r6, r4
   149b8:	bic	r4, r2, r1
   149bc:	add	r1, r1, #4
   149c0:	tst	r6, r3, lsl r4
   149c4:	beq	149a8 <rb_radixtree_elem_add+0x16c>
   149c8:	lsr	r6, sl, #1
   149cc:	mov	r1, #1
   149d0:	mov	r9, #0
   149d4:	cmp	r5, #0
   149d8:	beq	14a2c <rb_radixtree_elem_add+0x1f0>
   149dc:	ldr	r0, [r5]
   149e0:	cmp	r0, sl
   149e4:	ble	14a0c <rb_radixtree_elem_add+0x1d0>
   149e8:	ldr	r9, [r5, #68]	; 0x44
   149ec:	ldrb	r8, [r5, #72]	; 0x48
   149f0:	cmp	r9, #0
   149f4:	beq	14a28 <rb_radixtree_elem_add+0x1ec>
   149f8:	ldr	r0, [r9]
   149fc:	cmp	r0, sl
   14a00:	mov	r5, r9
   14a04:	bgt	149e8 <rb_radixtree_elem_add+0x1ac>
   14a08:	b	14a10 <rb_radixtree_elem_add+0x1d4>
   14a0c:	mov	r9, r5
   14a10:	ldr	r0, [r9]
   14a14:	mov	r1, #0
   14a18:	cmp	r0, sl
   14a1c:	mov	r5, r9
   14a20:	blt	14a2c <rb_radixtree_elem_add+0x1f0>
   14a24:	b	14b08 <rb_radixtree_elem_add+0x2cc>
   14a28:	mov	r9, #0
   14a2c:	str	r6, [sp, #4]
   14a30:	mov	r0, #76	; 0x4c
   14a34:	mov	r6, r1
   14a38:	bl	14154 <rb_malloc>
   14a3c:	mov	r5, r0
   14a40:	vmov.i32	q8, #0	; 0x00000000
   14a44:	strb	r8, [r0, #72]	; 0x48
   14a48:	str	r9, [r0, #68]	; 0x44
   14a4c:	str	sl, [r0], #4
   14a50:	vst1.32	{d16-d17}, [r0]
   14a54:	add	r0, r5, #20
   14a58:	vst1.32	{d16-d17}, [r0]
   14a5c:	add	r0, r5, #36	; 0x24
   14a60:	vst1.32	{d16-d17}, [r0]
   14a64:	add	r0, r5, #52	; 0x34
   14a68:	vst1.32	{d16-d17}, [r0]
   14a6c:	cmp	r6, #0
   14a70:	beq	14a98 <rb_radixtree_elem_add+0x25c>
   14a74:	ldr	r0, [r7, #8]
   14a78:	ldr	r6, [sp, #4]
   14a7c:	ldrb	r1, [r0, r6]
   14a80:	mov	r0, #15
   14a84:	and	r1, r0, r1, lsr r4
   14a88:	add	r1, r5, r1, lsl #2
   14a8c:	ldr	r3, [sp]
   14a90:	ldr	r2, [r3]
   14a94:	b	14ab8 <rb_radixtree_elem_add+0x27c>
   14a98:	ldr	r0, [r7, #8]
   14a9c:	ldr	r6, [sp, #4]
   14aa0:	ldrb	r1, [r0, r6]
   14aa4:	mov	r0, #15
   14aa8:	and	r1, r0, r1, lsr r4
   14aac:	add	r1, r5, r1, lsl #2
   14ab0:	add	r3, r9, r8, lsl #2
   14ab4:	ldr	r2, [r3, #4]!
   14ab8:	str	r2, [r1, #4]
   14abc:	ldr	r1, [r3]
   14ac0:	ldr	r2, [r1]
   14ac4:	cmn	r2, #1
   14ac8:	beq	14ae8 <rb_radixtree_elem_add+0x2ac>
   14acc:	str	r5, [r1, #68]	; 0x44
   14ad0:	ldr	r1, [r7, #8]
   14ad4:	ldrb	r1, [r1, r6]
   14ad8:	and	r0, r0, r1, lsr r4
   14adc:	ldr	r1, [r3]
   14ae0:	strb	r0, [r1, #72]	; 0x48
   14ae4:	b	14b00 <rb_radixtree_elem_add+0x2c4>
   14ae8:	str	r5, [r1, #12]
   14aec:	ldr	r1, [r7, #8]
   14af0:	ldrb	r1, [r1, r6]
   14af4:	and	r0, r0, r1, lsr r4
   14af8:	ldr	r1, [r3]
   14afc:	strb	r0, [r1, #16]
   14b00:	ldr	ip, [sp, #16]
   14b04:	str	r5, [r3]
   14b08:	ldrb	r0, [ip, r6]
   14b0c:	mov	r1, #15
   14b10:	and	r4, r1, r0, lsr r4
   14b14:	add	r6, r5, r4, lsl #2
   14b18:	mov	r0, #20
   14b1c:	mov	r7, ip
   14b20:	bl	14154 <rb_malloc>
   14b24:	str	r0, [r6, #4]
   14b28:	mvn	r1, #0
   14b2c:	str	r1, [r0]
   14b30:	ldr	r0, [r6, #4]
   14b34:	ldr	r1, [sp, #8]
   14b38:	str	r1, [r0, #4]
   14b3c:	ldr	r0, [r6, #4]
   14b40:	str	r7, [r0, #8]
   14b44:	ldr	r0, [r6, #4]
   14b48:	str	r5, [r0, #12]
   14b4c:	ldr	r0, [r6, #4]
   14b50:	strb	r4, [r0, #16]
   14b54:	ldr	r1, [sp, #12]
   14b58:	ldr	r0, [r1, #8]
   14b5c:	add	r0, r0, #1
   14b60:	str	r0, [r1, #8]
   14b64:	ldr	r0, [r6, #4]
   14b68:	sub	sp, fp, #28
   14b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014b70 <rb_radixtree_add>:
   14b70:	push	{fp, lr}
   14b74:	mov	fp, sp
   14b78:	bl	5030 <rb_radixtree_elem_add@plt>
   14b7c:	cmp	r0, #0
   14b80:	movwne	r0, #1
   14b84:	pop	{fp, pc}

00014b88 <rb_radixtree_elem_delete>:
   14b88:	push	{r4, r5, r6, r7, fp, lr}
   14b8c:	add	fp, sp, #16
   14b90:	mov	r6, r1
   14b94:	mov	r4, r0
   14b98:	ldrb	r7, [r1, #16]
   14b9c:	ldr	r0, [r1, #8]
   14ba0:	ldr	r5, [r1, #12]
   14ba4:	bl	14488 <rb_free>
   14ba8:	mov	r0, r6
   14bac:	bl	14488 <rb_free>
   14bb0:	cmp	r5, #0
   14bb4:	beq	14c30 <rb_radixtree_elem_delete+0xa8>
   14bb8:	add	r1, r5, #4
   14bbc:	mov	r2, #0
   14bc0:	str	r2, [r1, r7, lsl #2]
   14bc4:	mvn	r0, #0
   14bc8:	cmn	r0, #1
   14bcc:	mov	r3, r2
   14bd0:	mvnne	r3, #1
   14bd4:	ldr	r7, [r1, r2, lsl #2]
   14bd8:	cmp	r7, #0
   14bdc:	movne	r0, r3
   14be0:	add	r2, r2, #1
   14be4:	cmp	r2, #16
   14be8:	bne	14bc8 <rb_radixtree_elem_delete+0x40>
   14bec:	cmp	r0, #0
   14bf0:	bmi	14c50 <rb_radixtree_elem_delete+0xc8>
   14bf4:	ldrb	r1, [r5, #72]	; 0x48
   14bf8:	ldr	r2, [r5, #68]	; 0x44
   14bfc:	add	r3, r2, r1, lsl #2
   14c00:	add	r3, r3, #4
   14c04:	cmp	r2, #0
   14c08:	addeq	r3, r4, #4
   14c0c:	add	r0, r5, r0, lsl #2
   14c10:	ldr	r0, [r0, #4]
   14c14:	str	r0, [r3]
   14c18:	ldr	r3, [r0]
   14c1c:	cmn	r3, #1
   14c20:	beq	14c3c <rb_radixtree_elem_delete+0xb4>
   14c24:	str	r2, [r0, #68]	; 0x44
   14c28:	add	r0, r0, #72	; 0x48
   14c2c:	b	14c44 <rb_radixtree_elem_delete+0xbc>
   14c30:	mov	r0, #0
   14c34:	str	r0, [r4, #4]
   14c38:	b	14c50 <rb_radixtree_elem_delete+0xc8>
   14c3c:	str	r2, [r0, #12]
   14c40:	add	r0, r0, #16
   14c44:	strb	r1, [r0]
   14c48:	mov	r0, r5
   14c4c:	bl	14488 <rb_free>
   14c50:	ldr	r0, [r4, #8]
   14c54:	subs	r0, r0, #1
   14c58:	str	r0, [r4, #8]
   14c5c:	moveq	r0, #0
   14c60:	streq	r0, [r4, #4]
   14c64:	pop	{r4, r5, r6, r7, fp, pc}

00014c68 <rb_radixtree_retrieve>:
   14c68:	push	{r4, sl, fp, lr}
   14c6c:	add	fp, sp, #8
   14c70:	mov	r4, #0
   14c74:	mov	r2, #0
   14c78:	bl	548c <rb_radixtree_elem_find@plt>
   14c7c:	cmp	r0, #0
   14c80:	ldrne	r4, [r0, #4]
   14c84:	mov	r0, r4
   14c88:	pop	{r4, sl, fp, pc}

00014c8c <rb_radixtree_elem_get_key>:
   14c8c:	ldr	r0, [r0, #8]
   14c90:	bx	lr

00014c94 <rb_radixtree_elem_set_data>:
   14c94:	str	r1, [r0, #4]
   14c98:	bx	lr

00014c9c <rb_radixtree_elem_get_data>:
   14c9c:	ldr	r0, [r0, #4]
   14ca0:	bx	lr

00014ca4 <rb_radixtree_size>:
   14ca4:	ldr	r0, [r0, #8]
   14ca8:	bx	lr

00014cac <rb_radixtree_stats>:
   14cac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14cb0:	add	fp, sp, #24
   14cb4:	sub	sp, sp, #280	; 0x118
   14cb8:	mov	r5, r2
   14cbc:	mov	r7, r1
   14cc0:	mov	r6, r0
   14cc4:	mov	r0, #0
   14cc8:	str	r0, [sp, #20]
   14ccc:	ldr	r0, [r6, #8]
   14cd0:	cmp	r0, #0
   14cd4:	beq	14d24 <rb_radixtree_stats+0x78>
   14cd8:	ldr	r0, [r6, #4]
   14cdc:	add	r2, sp, #20
   14ce0:	mov	r1, #0
   14ce4:	bl	14d88 <stats_recurse>
   14ce8:	ldr	r1, [r6, #8]
   14cec:	ldr	r3, [r6, #12]
   14cf0:	ldr	r2, [sp, #20]
   14cf4:	ldr	r6, [pc, #120]	; 14d74 <rb_radixtree_stats+0xc8>
   14cf8:	add	r6, pc, r6
   14cfc:	udiv	r4, r0, r1
   14d00:	str	r6, [sp]
   14d04:	str	r1, [sp, #4]
   14d08:	str	r0, [sp, #8]
   14d0c:	str	r4, [sp, #12]
   14d10:	str	r2, [sp, #16]
   14d14:	add	r0, sp, #24
   14d18:	ldr	r2, [pc, #88]	; 14d78 <rb_radixtree_stats+0xcc>
   14d1c:	add	r2, pc, r2
   14d20:	b	14d58 <rb_radixtree_stats+0xac>
   14d24:	ldr	r3, [r6, #12]
   14d28:	ldr	r0, [pc, #76]	; 14d7c <rb_radixtree_stats+0xd0>
   14d2c:	add	r0, pc, r0
   14d30:	ldr	r1, [pc, #72]	; 14d80 <rb_radixtree_stats+0xd4>
   14d34:	add	r1, pc, r1
   14d38:	str	r1, [sp]
   14d3c:	str	r0, [sp, #4]
   14d40:	str	r0, [sp, #8]
   14d44:	str	r0, [sp, #12]
   14d48:	str	r0, [sp, #16]
   14d4c:	add	r0, sp, #24
   14d50:	ldr	r2, [pc, #44]	; 14d84 <rb_radixtree_stats+0xd8>
   14d54:	add	r2, pc, r2
   14d58:	mov	r1, #256	; 0x100
   14d5c:	bl	54c8 <snprintf@plt>
   14d60:	add	r0, sp, #24
   14d64:	mov	r1, r5
   14d68:	blx	r7
   14d6c:	sub	sp, fp, #24
   14d70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d74:	.word	0x00001c09
   14d78:	.word	0x00001b98
   14d7c:	.word	0x00000d83
   14d80:	.word	0x00001bcd
   14d84:	.word	0x00001b89

00014d88 <stats_recurse>:
   14d88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d8c:	add	fp, sp, #24
   14d90:	mov	r8, r2
   14d94:	mov	r4, r1
   14d98:	ldr	r1, [r2]
   14d9c:	cmp	r1, r4
   14da0:	strlt	r4, [r8]
   14da4:	ldr	r1, [r0]
   14da8:	cmn	r1, #1
   14dac:	beq	14df0 <stats_recurse+0x68>
   14db0:	add	r7, r0, #4
   14db4:	add	r6, r4, #1
   14db8:	mov	r5, #0
   14dbc:	mov	r4, #0
   14dc0:	b	14dd0 <stats_recurse+0x48>
   14dc4:	add	r5, r5, #1
   14dc8:	cmp	r5, #16
   14dcc:	beq	14df0 <stats_recurse+0x68>
   14dd0:	ldr	r0, [r7, r5, lsl #2]
   14dd4:	cmp	r0, #0
   14dd8:	beq	14dc4 <stats_recurse+0x3c>
   14ddc:	mov	r1, r6
   14de0:	mov	r2, r8
   14de4:	bl	14d88 <stats_recurse>
   14de8:	add	r4, r0, r4
   14dec:	b	14dc4 <stats_recurse+0x3c>
   14df0:	mov	r0, r4
   14df4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014df8 <rb_radixtree_stats_walk>:
   14df8:	push	{r4, r5, r6, sl, fp, lr}
   14dfc:	add	fp, sp, #16
   14e00:	mov	r5, r0
   14e04:	ldr	r0, [pc, #48]	; 14e3c <rb_radixtree_stats_walk+0x44>
   14e08:	ldr	r0, [pc, r0]
   14e0c:	ldr	r6, [r0]
   14e10:	cmp	r6, #0
   14e14:	beq	14e38 <rb_radixtree_stats_walk+0x40>
   14e18:	mov	r4, r1
   14e1c:	ldr	r0, [r6]
   14e20:	mov	r1, r5
   14e24:	mov	r2, r4
   14e28:	bl	4f70 <rb_radixtree_stats@plt>
   14e2c:	ldr	r6, [r6, #8]
   14e30:	cmp	r6, #0
   14e34:	bne	14e1c <rb_radixtree_stats_walk+0x24>
   14e38:	pop	{r4, r5, r6, sl, fp, pc}
   14e3c:	.word	0x000135d4

00014e40 <__stat>:
   14e40:	mov	r2, r1
   14e44:	mov	r1, r0
   14e48:	mov	r0, #3
   14e4c:	b	4dcc <__xstat@plt>

00014e50 <__fstat>:
   14e50:	mov	r2, r1
   14e54:	mov	r1, r0
   14e58:	mov	r0, #3
   14e5c:	b	5474 <__fxstat@plt>

Disassembly of section .fini:

00014e60 <_fini>:
   14e60:	push	{r3, lr}
   14e64:	pop	{r3, pc}
