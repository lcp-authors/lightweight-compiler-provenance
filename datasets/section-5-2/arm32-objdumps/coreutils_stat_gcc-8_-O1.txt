
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

000113fc <.init>:
   113fc:	push	{r3, lr}
   11400:	bl	1189c <__assert_fail@plt+0x48>
   11404:	pop	{r3, pc}

Disassembly of section .plt:

00011408 <calloc@plt-0x14>:
   11408:	push	{lr}		; (str lr, [sp, #-4]!)
   1140c:	ldr	lr, [pc, #4]	; 11418 <calloc@plt-0x4>
   11410:	add	lr, pc, lr
   11414:	ldr	pc, [lr, #8]!
   11418:	andeq	lr, r1, r8, ror #23

0001141c <calloc@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #122880	; 0x1e000
   11424:	ldr	pc, [ip, #3048]!	; 0xbe8

00011428 <fputs_unlocked@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #122880	; 0x1e000
   11430:	ldr	pc, [ip, #3040]!	; 0xbe0

00011434 <raise@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #122880	; 0x1e000
   1143c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011440 <gmtime_r@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #122880	; 0x1e000
   11448:	ldr	pc, [ip, #3024]!	; 0xbd0

0001144c <__getdelim@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #122880	; 0x1e000
   11454:	ldr	pc, [ip, #3016]!	; 0xbc8

00011458 <is_selinux_enabled@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #122880	; 0x1e000
   11460:	ldr	pc, [ip, #3008]!	; 0xbc0

00011464 <strcmp@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #122880	; 0x1e000
   1146c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011470 <strtol@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #122880	; 0x1e000
   11478:	ldr	pc, [ip, #2992]!	; 0xbb0

0001147c <getpwuid@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #122880	; 0x1e000
   11484:	ldr	pc, [ip, #2984]!	; 0xba8

00011488 <mktime@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #122880	; 0x1e000
   11490:	ldr	pc, [ip, #2976]!	; 0xba0

00011494 <fflush@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #122880	; 0x1e000
   1149c:	ldr	pc, [ip, #2968]!	; 0xb98

000114a0 <free@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #122880	; 0x1e000
   114a8:	ldr	pc, [ip, #2960]!	; 0xb90

000114ac <_exit@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #122880	; 0x1e000
   114b4:	ldr	pc, [ip, #2952]!	; 0xb88

000114b8 <memcpy@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #122880	; 0x1e000
   114c0:	ldr	pc, [ip, #2944]!	; 0xb80

000114c4 <mbsinit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #122880	; 0x1e000
   114cc:	ldr	pc, [ip, #2936]!	; 0xb78

000114d0 <memcmp@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #122880	; 0x1e000
   114d8:	ldr	pc, [ip, #2928]!	; 0xb70

000114dc <fputc_unlocked@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #122880	; 0x1e000
   114e4:	ldr	pc, [ip, #2920]!	; 0xb68

000114e8 <dcgettext@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #122880	; 0x1e000
   114f0:	ldr	pc, [ip, #2912]!	; 0xb60

000114f4 <realloc@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #122880	; 0x1e000
   114fc:	ldr	pc, [ip, #2904]!	; 0xb58

00011500 <fgetfilecon@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #122880	; 0x1e000
   11508:	ldr	pc, [ip, #2896]!	; 0xb50

0001150c <localtime_r@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #122880	; 0x1e000
   11514:	ldr	pc, [ip, #2888]!	; 0xb48

00011518 <textdomain@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #122880	; 0x1e000
   11520:	ldr	pc, [ip, #2880]!	; 0xb40

00011524 <chdir@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #122880	; 0x1e000
   1152c:	ldr	pc, [ip, #2872]!	; 0xb38

00011530 <iswprint@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #122880	; 0x1e000
   11538:	ldr	pc, [ip, #2864]!	; 0xb30

0001153c <tzset@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #122880	; 0x1e000
   11544:	ldr	pc, [ip, #2856]!	; 0xb28

00011548 <readlink@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #122880	; 0x1e000
   11550:	ldr	pc, [ip, #2848]!	; 0xb20

00011554 <fwrite@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #122880	; 0x1e000
   1155c:	ldr	pc, [ip, #2840]!	; 0xb18

00011560 <lseek64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #122880	; 0x1e000
   11568:	ldr	pc, [ip, #2832]!	; 0xb10

0001156c <__ctype_get_mb_cur_max@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #122880	; 0x1e000
   11574:	ldr	pc, [ip, #2824]!	; 0xb08

00011578 <hasmntopt@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #122880	; 0x1e000
   11580:	ldr	pc, [ip, #2816]!	; 0xb00

00011584 <strcpy@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #122880	; 0x1e000
   1158c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011590 <__fpending@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #122880	; 0x1e000
   11598:	ldr	pc, [ip, #2800]!	; 0xaf0

0001159c <mbrtowc@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #122880	; 0x1e000
   115a4:	ldr	pc, [ip, #2792]!	; 0xae8

000115a8 <error@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #122880	; 0x1e000
   115b0:	ldr	pc, [ip, #2784]!	; 0xae0

000115b4 <getmntent@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #122880	; 0x1e000
   115bc:	ldr	pc, [ip, #2776]!	; 0xad8

000115c0 <open64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #122880	; 0x1e000
   115c8:	ldr	pc, [ip, #2768]!	; 0xad0

000115cc <getenv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #122880	; 0x1e000
   115d4:	ldr	pc, [ip, #2760]!	; 0xac8

000115d8 <lgetfilecon@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #122880	; 0x1e000
   115e0:	ldr	pc, [ip, #2752]!	; 0xac0

000115e4 <malloc@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #122880	; 0x1e000
   115ec:	ldr	pc, [ip, #2744]!	; 0xab8

000115f0 <__libc_start_main@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #122880	; 0x1e000
   115f8:	ldr	pc, [ip, #2736]!	; 0xab0

000115fc <strftime@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #122880	; 0x1e000
   11604:	ldr	pc, [ip, #2728]!	; 0xaa8

00011608 <__freading@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #122880	; 0x1e000
   11610:	ldr	pc, [ip, #2720]!	; 0xaa0

00011614 <__ctype_tolower_loc@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #122880	; 0x1e000
   1161c:	ldr	pc, [ip, #2712]!	; 0xa98

00011620 <__ctype_toupper_loc@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #122880	; 0x1e000
   11628:	ldr	pc, [ip, #2704]!	; 0xa90

0001162c <__gmon_start__@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #122880	; 0x1e000
   11634:	ldr	pc, [ip, #2696]!	; 0xa88

00011638 <getopt_long@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #122880	; 0x1e000
   11640:	ldr	pc, [ip, #2688]!	; 0xa80

00011644 <__ctype_b_loc@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #122880	; 0x1e000
   1164c:	ldr	pc, [ip, #2680]!	; 0xa78

00011650 <getcwd@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #122880	; 0x1e000
   11658:	ldr	pc, [ip, #2672]!	; 0xa70

0001165c <exit@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #122880	; 0x1e000
   11664:	ldr	pc, [ip, #2664]!	; 0xa68

00011668 <getfilecon@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #122880	; 0x1e000
   11670:	ldr	pc, [ip, #2656]!	; 0xa60

00011674 <strlen@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #122880	; 0x1e000
   1167c:	ldr	pc, [ip, #2648]!	; 0xa58

00011680 <strchr@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #122880	; 0x1e000
   11688:	ldr	pc, [ip, #2640]!	; 0xa50

0001168c <setenv@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #122880	; 0x1e000
   11694:	ldr	pc, [ip, #2632]!	; 0xa48

00011698 <openat64@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #122880	; 0x1e000
   116a0:	ldr	pc, [ip, #2624]!	; 0xa40

000116a4 <memrchr@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #122880	; 0x1e000
   116ac:	ldr	pc, [ip, #2616]!	; 0xa38

000116b0 <__errno_location@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #122880	; 0x1e000
   116b8:	ldr	pc, [ip, #2608]!	; 0xa30

000116bc <__sprintf_chk@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #122880	; 0x1e000
   116c4:	ldr	pc, [ip, #2600]!	; 0xa28

000116c8 <__cxa_atexit@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #122880	; 0x1e000
   116d0:	ldr	pc, [ip, #2592]!	; 0xa20

000116d4 <__vasprintf_chk@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #122880	; 0x1e000
   116dc:	ldr	pc, [ip, #2584]!	; 0xa18

000116e0 <memset@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #122880	; 0x1e000
   116e8:	ldr	pc, [ip, #2576]!	; 0xa10

000116ec <__printf_chk@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #122880	; 0x1e000
   116f4:	ldr	pc, [ip, #2568]!	; 0xa08

000116f8 <fileno@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #122880	; 0x1e000
   11700:	ldr	pc, [ip, #2560]!	; 0xa00

00011704 <__fprintf_chk@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #122880	; 0x1e000
   1170c:	ldr	pc, [ip, #2552]!	; 0x9f8

00011710 <memchr@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #122880	; 0x1e000
   11718:	ldr	pc, [ip, #2544]!	; 0x9f0

0001171c <fclose@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #122880	; 0x1e000
   11724:	ldr	pc, [ip, #2536]!	; 0x9e8

00011728 <fseeko64@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #122880	; 0x1e000
   11730:	ldr	pc, [ip, #2528]!	; 0x9e0

00011734 <statx@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #122880	; 0x1e000
   1173c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011740 <endmntent@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #122880	; 0x1e000
   11748:	ldr	pc, [ip, #2512]!	; 0x9d0

0001174c <fcntl64@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #122880	; 0x1e000
   11754:	ldr	pc, [ip, #2504]!	; 0x9c8

00011758 <__overflow@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #122880	; 0x1e000
   11760:	ldr	pc, [ip, #2496]!	; 0x9c0

00011764 <setlocale@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #122880	; 0x1e000
   1176c:	ldr	pc, [ip, #2488]!	; 0x9b8

00011770 <strrchr@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #122880	; 0x1e000
   11778:	ldr	pc, [ip, #2480]!	; 0x9b0

0001177c <statfs64@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #122880	; 0x1e000
   11784:	ldr	pc, [ip, #2472]!	; 0x9a8

00011788 <nl_langinfo@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #122880	; 0x1e000
   11790:	ldr	pc, [ip, #2464]!	; 0x9a0

00011794 <sscanf@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #122880	; 0x1e000
   1179c:	ldr	pc, [ip, #2456]!	; 0x998

000117a0 <localeconv@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #122880	; 0x1e000
   117a8:	ldr	pc, [ip, #2448]!	; 0x990

000117ac <timegm@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #122880	; 0x1e000
   117b4:	ldr	pc, [ip, #2440]!	; 0x988

000117b8 <fchdir@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #122880	; 0x1e000
   117c0:	ldr	pc, [ip, #2432]!	; 0x980

000117c4 <canonicalize_file_name@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #122880	; 0x1e000
   117cc:	ldr	pc, [ip, #2424]!	; 0x978

000117d0 <fopen64@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #122880	; 0x1e000
   117d8:	ldr	pc, [ip, #2416]!	; 0x970

000117dc <freecon@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #122880	; 0x1e000
   117e4:	ldr	pc, [ip, #2408]!	; 0x968

000117e8 <setmntent@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #122880	; 0x1e000
   117f0:	ldr	pc, [ip, #2400]!	; 0x960

000117f4 <bindtextdomain@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #122880	; 0x1e000
   117fc:	ldr	pc, [ip, #2392]!	; 0x958

00011800 <__xstat64@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #122880	; 0x1e000
   11808:	ldr	pc, [ip, #2384]!	; 0x950

0001180c <unsetenv@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #122880	; 0x1e000
   11814:	ldr	pc, [ip, #2376]!	; 0x948

00011818 <strncmp@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #122880	; 0x1e000
   11820:	ldr	pc, [ip, #2368]!	; 0x940

00011824 <abort@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #122880	; 0x1e000
   1182c:	ldr	pc, [ip, #2360]!	; 0x938

00011830 <close@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #122880	; 0x1e000
   11838:	ldr	pc, [ip, #2352]!	; 0x930

0001183c <getgrgid@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #122880	; 0x1e000
   11844:	ldr	pc, [ip, #2344]!	; 0x928

00011848 <strspn@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #122880	; 0x1e000
   11850:	ldr	pc, [ip, #2336]!	; 0x920

00011854 <__assert_fail@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #122880	; 0x1e000
   1185c:	ldr	pc, [ip, #2328]!	; 0x918

Disassembly of section .text:

00011860 <.text>:
   11860:	mov	fp, #0
   11864:	mov	lr, #0
   11868:	pop	{r1}		; (ldr r1, [sp], #4)
   1186c:	mov	r2, sp
   11870:	push	{r2}		; (str r2, [sp, #-4]!)
   11874:	push	{r0}		; (str r0, [sp, #-4]!)
   11878:	ldr	ip, [pc, #16]	; 11890 <__assert_fail@plt+0x3c>
   1187c:	push	{ip}		; (str ip, [sp, #-4]!)
   11880:	ldr	r0, [pc, #12]	; 11894 <__assert_fail@plt+0x40>
   11884:	ldr	r3, [pc, #12]	; 11898 <__assert_fail@plt+0x44>
   11888:	bl	115f0 <__libc_start_main@plt>
   1188c:	bl	11824 <abort@plt>
   11890:	andeq	sp, r1, ip, lsr #12
   11894:	strdeq	r4, [r1], -r8
   11898:	andeq	sp, r1, ip, asr #11
   1189c:	ldr	r3, [pc, #20]	; 118b8 <__assert_fail@plt+0x64>
   118a0:	ldr	r2, [pc, #20]	; 118bc <__assert_fail@plt+0x68>
   118a4:	add	r3, pc, r3
   118a8:	ldr	r2, [r3, r2]
   118ac:	cmp	r2, #0
   118b0:	bxeq	lr
   118b4:	b	1162c <__gmon_start__@plt>
   118b8:	andeq	lr, r1, r4, asr r7
   118bc:	andeq	r0, r0, r8, ror r1
   118c0:	ldr	r0, [pc, #24]	; 118e0 <__assert_fail@plt+0x8c>
   118c4:	ldr	r3, [pc, #24]	; 118e4 <__assert_fail@plt+0x90>
   118c8:	cmp	r3, r0
   118cc:	bxeq	lr
   118d0:	ldr	r3, [pc, #16]	; 118e8 <__assert_fail@plt+0x94>
   118d4:	cmp	r3, #0
   118d8:	bxeq	lr
   118dc:	bx	r3
   118e0:	ldrdeq	r0, [r3], -r4
   118e4:	ldrdeq	r0, [r3], -r4
   118e8:	andeq	r0, r0, r0
   118ec:	ldr	r0, [pc, #36]	; 11918 <__assert_fail@plt+0xc4>
   118f0:	ldr	r1, [pc, #36]	; 1191c <__assert_fail@plt+0xc8>
   118f4:	sub	r1, r1, r0
   118f8:	asr	r1, r1, #2
   118fc:	add	r1, r1, r1, lsr #31
   11900:	asrs	r1, r1, #1
   11904:	bxeq	lr
   11908:	ldr	r3, [pc, #16]	; 11920 <__assert_fail@plt+0xcc>
   1190c:	cmp	r3, #0
   11910:	bxeq	lr
   11914:	bx	r3
   11918:	ldrdeq	r0, [r3], -r4
   1191c:	ldrdeq	r0, [r3], -r4
   11920:	andeq	r0, r0, r0
   11924:	push	{r4, lr}
   11928:	ldr	r4, [pc, #24]	; 11948 <__assert_fail@plt+0xf4>
   1192c:	ldrb	r3, [r4]
   11930:	cmp	r3, #0
   11934:	popne	{r4, pc}
   11938:	bl	118c0 <__assert_fail@plt+0x6c>
   1193c:	mov	r3, #1
   11940:	strb	r3, [r4]
   11944:	pop	{r4, pc}
   11948:	strdeq	r0, [r3], -r4
   1194c:	b	118ec <__assert_fail@plt+0x98>
   11950:	strd	r4, [sp, #-16]!
   11954:	str	r6, [sp, #8]
   11958:	str	lr, [sp, #12]
   1195c:	cmp	r0, #0
   11960:	beq	119b0 <__assert_fail@plt+0x15c>
   11964:	cmp	r1, #0
   11968:	beq	11990 <__assert_fail@plt+0x13c>
   1196c:	movw	r0, #54868	; 0xd654
   11970:	movt	r0, #1
   11974:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   11978:	mov	r4, r0
   1197c:	mov	r0, r4
   11980:	ldrd	r4, [sp]
   11984:	ldr	r6, [sp, #8]
   11988:	add	sp, sp, #12
   1198c:	pop	{pc}		; (ldr pc, [sp], #4)
   11990:	mov	r2, #5
   11994:	movw	r1, #55256	; 0xd7d8
   11998:	movt	r1, #1
   1199c:	mov	r0, #0
   119a0:	bl	114e8 <dcgettext@plt>
   119a4:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   119a8:	mov	r4, r0
   119ac:	b	1197c <__assert_fail@plt+0x128>
   119b0:	mov	r4, r2
   119b4:	cmp	r1, #0
   119b8:	beq	119d8 <__assert_fail@plt+0x184>
   119bc:	bl	11458 <is_selinux_enabled@plt>
   119c0:	cmp	r0, #0
   119c4:	ldrgt	r0, [pc, #284]	; 11ae8 <__assert_fail@plt+0x294>
   119c8:	ldrle	r0, [pc, #284]	; 11aec <__assert_fail@plt+0x298>
   119cc:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   119d0:	mov	r4, r0
   119d4:	b	1197c <__assert_fail@plt+0x128>
   119d8:	mov	r2, #5
   119dc:	movw	r1, #55428	; 0xd884
   119e0:	movt	r1, #1
   119e4:	mov	r0, #0
   119e8:	bl	114e8 <dcgettext@plt>
   119ec:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   119f0:	mov	r5, r0
   119f4:	cmp	r4, #0
   119f8:	mov	r2, #5
   119fc:	movwne	r1, #55488	; 0xd8c0
   11a00:	movtne	r1, #1
   11a04:	movweq	r1, #55560	; 0xd908
   11a08:	movteq	r1, #1
   11a0c:	mov	r0, #0
   11a10:	bl	114e8 <dcgettext@plt>
   11a14:	mov	r2, r0
   11a18:	mov	r1, r5
   11a1c:	movw	r0, #55552	; 0xd900
   11a20:	movt	r0, #1
   11a24:	bl	1bbd0 <__assert_fail@plt+0xa37c>
   11a28:	mov	r4, r0
   11a2c:	mov	r0, r5
   11a30:	bl	15fdc <__assert_fail@plt+0x4788>
   11a34:	mov	r2, #5
   11a38:	movw	r1, #55604	; 0xd934
   11a3c:	movt	r1, #1
   11a40:	mov	r0, #0
   11a44:	bl	114e8 <dcgettext@plt>
   11a48:	mov	r2, r0
   11a4c:	mov	r1, r4
   11a50:	movw	r0, #55552	; 0xd900
   11a54:	movt	r0, #1
   11a58:	bl	1bbd0 <__assert_fail@plt+0xa37c>
   11a5c:	mov	r5, r0
   11a60:	mov	r0, r4
   11a64:	bl	15fdc <__assert_fail@plt+0x4788>
   11a68:	bl	11458 <is_selinux_enabled@plt>
   11a6c:	cmp	r0, #0
   11a70:	bgt	11aac <__assert_fail@plt+0x258>
   11a74:	mov	r2, #5
   11a78:	movw	r1, #55680	; 0xd980
   11a7c:	movt	r1, #1
   11a80:	mov	r0, #0
   11a84:	bl	114e8 <dcgettext@plt>
   11a88:	mov	r2, r0
   11a8c:	mov	r1, r5
   11a90:	movw	r0, #55552	; 0xd900
   11a94:	movt	r0, #1
   11a98:	bl	1bbd0 <__assert_fail@plt+0xa37c>
   11a9c:	mov	r4, r0
   11aa0:	mov	r0, r5
   11aa4:	bl	15fdc <__assert_fail@plt+0x4788>
   11aa8:	b	1197c <__assert_fail@plt+0x128>
   11aac:	mov	r2, #5
   11ab0:	movw	r1, #55664	; 0xd970
   11ab4:	movt	r1, #1
   11ab8:	mov	r0, #0
   11abc:	bl	114e8 <dcgettext@plt>
   11ac0:	mov	r2, r0
   11ac4:	mov	r1, r5
   11ac8:	movw	r0, #55552	; 0xd900
   11acc:	movt	r0, #1
   11ad0:	bl	1bbd0 <__assert_fail@plt+0xa37c>
   11ad4:	mov	r4, r0
   11ad8:	mov	r0, r5
   11adc:	bl	15fdc <__assert_fail@plt+0x4788>
   11ae0:	mov	r5, r4
   11ae4:	b	11a74 <__assert_fail@plt+0x220>
   11ae8:	andeq	sp, r1, r8, ror r6
   11aec:	andeq	sp, r1, ip, lsr #13
   11af0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11af4:	strd	r6, [sp, #8]
   11af8:	strd	r8, [sp, #16]
   11afc:	strd	sl, [sp, #24]
   11b00:	str	lr, [sp, #32]
   11b04:	sub	sp, sp, #12
   11b08:	str	r3, [sp, #4]
   11b0c:	add	r5, r0, #1
   11b10:	add	r9, r0, r1
   11b14:	cmp	r5, r9
   11b18:	movcc	fp, r2
   11b1c:	movcc	r8, r5
   11b20:	ldrcc	sl, [pc, #144]	; 11bb8 <__assert_fail@plt+0x364>
   11b24:	bcs	11b90 <__assert_fail@plt+0x33c>
   11b28:	mov	r6, r8
   11b2c:	mov	r4, r8
   11b30:	ldrb	r7, [r4], #1
   11b34:	mov	r1, r7
   11b38:	mov	r0, sl
   11b3c:	bl	11680 <strchr@plt>
   11b40:	cmp	r0, #0
   11b44:	beq	11b6c <__assert_fail@plt+0x318>
   11b48:	mov	r1, r7
   11b4c:	mov	r0, fp
   11b50:	bl	11680 <strchr@plt>
   11b54:	cmp	r0, #0
   11b58:	strbne	r7, [r5], #1
   11b5c:	mov	r8, r4
   11b60:	cmp	r9, r4
   11b64:	bhi	11b28 <__assert_fail@plt+0x2d4>
   11b68:	b	11b90 <__assert_fail@plt+0x33c>
   11b6c:	cmp	r9, r6
   11b70:	subhi	r3, r5, #1
   11b74:	bls	11b90 <__assert_fail@plt+0x33c>
   11b78:	ldrb	r2, [r6], #1
   11b7c:	strb	r2, [r3, #1]!
   11b80:	cmp	r9, r6
   11b84:	bne	11b78 <__assert_fail@plt+0x324>
   11b88:	sub	r8, r9, r8
   11b8c:	add	r5, r5, r8
   11b90:	ldr	r1, [sp, #4]
   11b94:	mov	r0, r5
   11b98:	bl	11584 <strcpy@plt>
   11b9c:	add	sp, sp, #12
   11ba0:	ldrd	r4, [sp]
   11ba4:	ldrd	r6, [sp, #8]
   11ba8:	ldrd	r8, [sp, #16]
   11bac:	ldrd	sl, [sp, #24]
   11bb0:	add	sp, sp, #32
   11bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb8:	andeq	sp, r1, r0, ror #13
   11bbc:	str	r4, [sp, #-16]!
   11bc0:	strd	r6, [sp, #4]
   11bc4:	str	lr, [sp, #12]
   11bc8:	mov	r4, r0
   11bcc:	mov	r6, r2
   11bd0:	mov	r7, r3
   11bd4:	movw	r3, #55728	; 0xd9b0
   11bd8:	movt	r3, #1
   11bdc:	movw	r2, #55732	; 0xd9b4
   11be0:	movt	r2, #1
   11be4:	bl	11af0 <__assert_fail@plt+0x29c>
   11be8:	mov	r2, r6
   11bec:	mov	r3, r7
   11bf0:	mov	r1, r4
   11bf4:	mov	r0, #1
   11bf8:	bl	116ec <__printf_chk@plt>
   11bfc:	ldr	r4, [sp]
   11c00:	ldrd	r6, [sp, #4]
   11c04:	add	sp, sp, #12
   11c08:	pop	{pc}		; (ldr pc, [sp], #4)
   11c0c:	strd	r4, [sp, #-16]!
   11c10:	str	r6, [sp, #8]
   11c14:	str	lr, [sp, #12]
   11c18:	mov	r4, r0
   11c1c:	mov	r5, r2
   11c20:	movw	r3, #57060	; 0xdee4
   11c24:	movt	r3, #1
   11c28:	movw	r2, #55736	; 0xd9b8
   11c2c:	movt	r2, #1
   11c30:	bl	11af0 <__assert_fail@plt+0x29c>
   11c34:	mov	r2, r5
   11c38:	mov	r1, r4
   11c3c:	mov	r0, #1
   11c40:	bl	116ec <__printf_chk@plt>
   11c44:	ldrd	r4, [sp]
   11c48:	ldr	r6, [sp, #8]
   11c4c:	add	sp, sp, #12
   11c50:	pop	{pc}		; (ldr pc, [sp], #4)
   11c54:	str	r4, [sp, #-16]!
   11c58:	strd	r6, [sp, #4]
   11c5c:	str	lr, [sp, #12]
   11c60:	mov	r4, r0
   11c64:	mov	r6, r2
   11c68:	mov	r7, r3
   11c6c:	movw	r3, #55740	; 0xd9bc
   11c70:	movt	r3, #1
   11c74:	movw	r2, #55744	; 0xd9c0
   11c78:	movt	r2, #1
   11c7c:	bl	11af0 <__assert_fail@plt+0x29c>
   11c80:	mov	r2, r6
   11c84:	mov	r3, r7
   11c88:	mov	r1, r4
   11c8c:	mov	r0, #1
   11c90:	bl	116ec <__printf_chk@plt>
   11c94:	ldr	r4, [sp]
   11c98:	ldrd	r6, [sp, #4]
   11c9c:	add	sp, sp, #12
   11ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ca4:	str	r4, [sp, #-16]!
   11ca8:	strd	r6, [sp, #4]
   11cac:	str	lr, [sp, #12]
   11cb0:	mov	r4, r0
   11cb4:	mov	r6, r2
   11cb8:	mov	r7, r3
   11cbc:	movw	r3, #55748	; 0xd9c4
   11cc0:	movt	r3, #1
   11cc4:	movw	r2, #55752	; 0xd9c8
   11cc8:	movt	r2, #1
   11ccc:	bl	11af0 <__assert_fail@plt+0x29c>
   11cd0:	mov	r2, r6
   11cd4:	mov	r3, r7
   11cd8:	mov	r1, r4
   11cdc:	mov	r0, #1
   11ce0:	bl	116ec <__printf_chk@plt>
   11ce4:	ldr	r4, [sp]
   11ce8:	ldrd	r6, [sp, #4]
   11cec:	add	sp, sp, #12
   11cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   11cf4:	strd	r4, [sp, #-16]!
   11cf8:	str	r6, [sp, #8]
   11cfc:	str	lr, [sp, #12]
   11d00:	sub	sp, sp, #8
   11d04:	mov	r5, r0
   11d08:	mov	r6, r1
   11d0c:	ldr	r1, [sp, #32]
   11d10:	sub	r3, r3, #83	; 0x53
   11d14:	cmp	r3, #33	; 0x21
   11d18:	ldrls	pc, [pc, r3, lsl #2]
   11d1c:	b	12de8 <__assert_fail@plt+0x1594>
   11d20:	andeq	r2, r1, r4, lsr #27
   11d24:	andeq	r1, r1, r8, lsl #28
   11d28:	andeq	r2, r1, r8, ror #27
   11d2c:	andeq	r2, r1, r8, ror #27
   11d30:	andeq	r2, r1, r8, ror #27
   11d34:	andeq	r2, r1, r8, ror #27
   11d38:	andeq	r2, r1, r8, ror #27
   11d3c:	andeq	r2, r1, r8, ror #27
   11d40:	andeq	r2, r1, r8, ror #27
   11d44:	andeq	r2, r1, r8, ror #27
   11d48:	andeq	r2, r1, r8, ror #27
   11d4c:	andeq	r2, r1, r8, ror #27
   11d50:	andeq	r2, r1, r8, ror #27
   11d54:	andeq	r2, r1, r8, ror #27
   11d58:	andeq	r2, r1, r0, lsl #27
   11d5c:	andeq	r2, r1, r0, ror #26
   11d60:	andeq	r2, r1, r8, asr #27
   11d64:	ldrdeq	r2, [r1], -r8
   11d68:	andeq	r2, r1, r8, ror #27
   11d6c:	andeq	r2, r1, r0, ror sp
   11d70:	andeq	r2, r1, r8, ror #27
   11d74:	andeq	r2, r1, r8, ror #27
   11d78:	andeq	r1, r1, ip, asr #27
   11d7c:	andeq	r2, r1, r8, ror #27
   11d80:	andeq	r2, r1, r8, ror #27
   11d84:	andeq	r1, r1, r0, ror #27
   11d88:	andeq	r2, r1, r8, ror #27
   11d8c:	andeq	r1, r1, r8, lsr #27
   11d90:	andeq	r2, r1, r8, ror #27
   11d94:	andeq	r2, r1, r8, ror #27
   11d98:	andeq	r2, r1, r8, ror #27
   11d9c:	andeq	r2, r1, r8, ror #27
   11da0:	muleq	r1, r0, sp
   11da4:	strdeq	r1, [r1], -r4
   11da8:	ldr	r2, [sp, #28]
   11dac:	mov	r1, r6
   11db0:	bl	11c0c <__assert_fail@plt+0x3b8>
   11db4:	mov	r0, #0
   11db8:	add	sp, sp, #8
   11dbc:	ldrd	r4, [sp]
   11dc0:	ldr	r6, [sp, #8]
   11dc4:	add	sp, sp, #12
   11dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   11dcc:	ldr	r2, [r1, #52]	; 0x34
   11dd0:	ldr	r3, [r1, #48]	; 0x30
   11dd4:	mov	r1, r6
   11dd8:	bl	11bbc <__assert_fail@plt+0x368>
   11ddc:	b	11db4 <__assert_fail@plt+0x560>
   11de0:	ldr	r2, [r1, #56]	; 0x38
   11de4:	asr	r3, r2, #31
   11de8:	mov	r1, r6
   11dec:	bl	11c54 <__assert_fail@plt+0x400>
   11df0:	b	11db4 <__assert_fail@plt+0x560>
   11df4:	ldr	r2, [r1]
   11df8:	asr	r3, r2, #31
   11dfc:	mov	r1, r6
   11e00:	bl	11bbc <__assert_fail@plt+0x368>
   11e04:	b	11db4 <__assert_fail@plt+0x560>
   11e08:	ldr	r3, [r1]
   11e0c:	movw	r2, #63415	; 0xf7b7
   11e10:	movt	r2, #303	; 0x12f
   11e14:	cmp	r3, r2
   11e18:	beq	12a60 <__assert_fail@plt+0x120c>
   11e1c:	movw	r2, #63415	; 0xf7b7
   11e20:	movt	r2, #303	; 0x12f
   11e24:	cmp	r3, r2
   11e28:	ble	11f00 <__assert_fail@plt+0x6ac>
   11e2c:	movw	r2, #17227	; 0x434b
   11e30:	movt	r2, #21327	; 0x534f
   11e34:	cmp	r3, r2
   11e38:	beq	12bec <__assert_fail@plt+0x1398>
   11e3c:	movw	r2, #17227	; 0x434b
   11e40:	movt	r2, #21327	; 0x534f
   11e44:	cmp	r3, r2
   11e48:	ble	12490 <__assert_fail@plt+0xc3c>
   11e4c:	movw	r2, #21827	; 0x5543
   11e50:	movt	r2, #25971	; 0x6573
   11e54:	cmp	r3, r2
   11e58:	beq	12cac <__assert_fail@plt+0x1458>
   11e5c:	movw	r2, #21827	; 0x5543
   11e60:	movt	r2, #25971	; 0x6573
   11e64:	cmp	r3, r2
   11e68:	ble	127bc <__assert_fail@plt+0xf68>
   11e6c:	movw	r2, #26227	; 0x6673
   11e70:	movt	r2, #29539	; 0x7363
   11e74:	cmp	r3, r2
   11e78:	beq	12d0c <__assert_fail@plt+0x14b8>
   11e7c:	movw	r2, #26227	; 0x6673
   11e80:	movt	r2, #29539	; 0x7363
   11e84:	cmp	r3, r2
   11e88:	ble	12958 <__assert_fail@plt+0x1104>
   11e8c:	movw	r2, #25455	; 0x636f
   11e90:	movt	r2, #29793	; 0x7461
   11e94:	cmp	r3, r2
   11e98:	beq	12d3c <__assert_fail@plt+0x14e8>
   11e9c:	movw	r2, #25455	; 0x636f
   11ea0:	movt	r2, #29793	; 0x7461
   11ea4:	cmp	r3, r2
   11ea8:	ble	12a00 <__assert_fail@plt+0x11ac>
   11eac:	movw	r2, #16982	; 0x4256
   11eb0:	movt	r2, #30831	; 0x786f
   11eb4:	cmp	r3, r2
   11eb8:	beq	12d54 <__assert_fail@plt+0x1500>
   11ebc:	movw	r2, #16982	; 0x4256
   11ec0:	movt	r2, #30831	; 0x786f
   11ec4:	cmp	r3, r2
   11ec8:	ble	12a44 <__assert_fail@plt+0x11f0>
   11ecc:	movw	r2, #30256	; 0x7630
   11ed0:	movt	r2, #31052	; 0x794c
   11ed4:	cmp	r3, r2
   11ed8:	movweq	r2, #56472	; 0xdc98
   11edc:	movteq	r2, #1
   11ee0:	beq	121e0 <__assert_fail@plt+0x98c>
   11ee4:	movw	r2, #26227	; 0x6673
   11ee8:	movt	r2, #31868	; 0x7c7c
   11eec:	cmp	r3, r2
   11ef0:	movweq	r2, #56504	; 0xdcb8
   11ef4:	movteq	r2, #1
   11ef8:	beq	121e0 <__assert_fail@plt+0x98c>
   11efc:	b	120a8 <__assert_fail@plt+0x854>
   11f00:	movw	r2, #16390	; 0x4006
   11f04:	cmp	r3, r2
   11f08:	beq	12a6c <__assert_fail@plt+0x1218>
   11f0c:	bgt	121f0 <__assert_fail@plt+0x99c>
   11f10:	movw	r2, #59465	; 0xe849
   11f14:	movt	r2, #63893	; 0xf995
   11f18:	cmp	r3, r2
   11f1c:	beq	12a78 <__assert_fail@plt+0x1224>
   11f20:	movw	r2, #59465	; 0xe849
   11f24:	movt	r2, #63893	; 0xf995
   11f28:	cmp	r3, r2
   11f2c:	ble	11f88 <__assert_fail@plt+0x734>
   11f30:	movw	r2, #4989	; 0x137d
   11f34:	cmp	r3, r2
   11f38:	beq	12ae4 <__assert_fail@plt+0x1290>
   11f3c:	ble	12118 <__assert_fail@plt+0x8c4>
   11f40:	movw	r2, #9320	; 0x2468
   11f44:	cmp	r3, r2
   11f48:	beq	12b14 <__assert_fail@plt+0x12c0>
   11f4c:	ble	12194 <__assert_fail@plt+0x940>
   11f50:	movw	r2, #13364	; 0x3434
   11f54:	cmp	r3, r2
   11f58:	beq	12b2c <__assert_fail@plt+0x12d8>
   11f5c:	ble	121cc <__assert_fail@plt+0x978>
   11f60:	cmp	r3, #16384	; 0x4000
   11f64:	movweq	r2, #56264	; 0xdbc8
   11f68:	movteq	r2, #1
   11f6c:	beq	121e0 <__assert_fail@plt+0x98c>
   11f70:	movw	r2, #16388	; 0x4004
   11f74:	cmp	r3, r2
   11f78:	movweq	r2, #56264	; 0xdbc8
   11f7c:	movteq	r2, #1
   11f80:	beq	121e0 <__assert_fail@plt+0x98c>
   11f84:	b	120a8 <__assert_fail@plt+0x854>
   11f88:	movw	r2, #57005	; 0xdead
   11f8c:	movt	r2, #48879	; 0xbeef
   11f90:	cmp	r3, r2
   11f94:	beq	12a84 <__assert_fail@plt+0x1230>
   11f98:	movw	r2, #57005	; 0xdead
   11f9c:	movt	r2, #48879	; 0xbeef
   11fa0:	cmp	r3, r2
   11fa4:	ble	1200c <__assert_fail@plt+0x7b8>
   11fa8:	movw	r2, #33252	; 0x81e4
   11fac:	movt	r2, #56926	; 0xde5e
   11fb0:	cmp	r3, r2
   11fb4:	beq	12ac0 <__assert_fail@plt+0x126c>
   11fb8:	movw	r2, #33252	; 0x81e4
   11fbc:	movt	r2, #56926	; 0xde5e
   11fc0:	cmp	r3, r2
   11fc4:	ble	120d4 <__assert_fail@plt+0x880>
   11fc8:	movw	r2, #8208	; 0x2010
   11fcc:	movt	r2, #62197	; 0xf2f5
   11fd0:	cmp	r3, r2
   11fd4:	beq	12ad8 <__assert_fail@plt+0x1284>
   11fd8:	movw	r2, #65420	; 0xff8c
   11fdc:	movt	r2, #63868	; 0xf97c
   11fe0:	cmp	r3, r2
   11fe4:	movweq	r2, #56628	; 0xdd34
   11fe8:	movteq	r2, #1
   11fec:	beq	121e0 <__assert_fail@plt+0x98c>
   11ff0:	movw	r2, #57826	; 0xe1e2
   11ff4:	movt	r2, #57589	; 0xe0f5
   11ff8:	cmp	r3, r2
   11ffc:	bne	120a8 <__assert_fail@plt+0x854>
   12000:	movw	r2, #56068	; 0xdb04
   12004:	movt	r2, #1
   12008:	b	121e0 <__assert_fail@plt+0x98c>
   1200c:	movw	r2, #64757	; 0xfcf5
   12010:	movt	r2, #42241	; 0xa501
   12014:	cmp	r3, r2
   12018:	beq	12a90 <__assert_fail@plt+0x123c>
   1201c:	movw	r2, #64757	; 0xfcf5
   12020:	movt	r2, #42241	; 0xa501
   12024:	cmp	r3, r2
   12028:	ble	12070 <__assert_fail@plt+0x81c>
   1202c:	movw	r2, #6516	; 0x1974
   12030:	movt	r2, #43962	; 0xabba
   12034:	cmp	r3, r2
   12038:	beq	12ab4 <__assert_fail@plt+0x1260>
   1203c:	movw	r2, #44220	; 0xacbc
   12040:	movt	r2, #47819	; 0xbacb
   12044:	cmp	r3, r2
   12048:	movweq	r2, #56768	; 0xddc0
   1204c:	movteq	r2, #1
   12050:	beq	121e0 <__assert_fail@plt+0x98c>
   12054:	movw	r2, #43754	; 0xaaea
   12058:	movt	r2, #43735	; 0xaad7
   1205c:	cmp	r3, r2
   12060:	bne	120a8 <__assert_fail@plt+0x854>
   12064:	movw	r2, #56484	; 0xdca4
   12068:	movt	r2, #1
   1206c:	b	121e0 <__assert_fail@plt+0x98c>
   12070:	movw	r2, #26686	; 0x683e
   12074:	movt	r2, #37155	; 0x9123
   12078:	cmp	r3, r2
   1207c:	beq	12a9c <__assert_fail@plt+0x1248>
   12080:	movw	r2, #22774	; 0x58f6
   12084:	movt	r2, #38276	; 0x9584
   12088:	cmp	r3, r2
   1208c:	movweq	r2, #56224	; 0xdba0
   12090:	movteq	r2, #1
   12094:	beq	121e0 <__assert_fail@plt+0x98c>
   12098:	movw	r2, #22774	; 0x58f6
   1209c:	movt	r2, #34180	; 0x8584
   120a0:	cmp	r3, r2
   120a4:	beq	12aa8 <__assert_fail@plt+0x1254>
   120a8:	movw	r4, #504	; 0x1f8
   120ac:	movt	r4, #3
   120b0:	str	r3, [sp]
   120b4:	movw	r3, #56860	; 0xde1c
   120b8:	movt	r3, #1
   120bc:	mov	r2, #21
   120c0:	mov	r1, #1
   120c4:	mov	r0, r4
   120c8:	bl	116bc <__sprintf_chk@plt>
   120cc:	mov	r2, r4
   120d0:	b	121e0 <__assert_fail@plt+0x98c>
   120d4:	movw	r2, #33128	; 0x8168
   120d8:	movt	r2, #51582	; 0xc97e
   120dc:	cmp	r3, r2
   120e0:	beq	12acc <__assert_fail@plt+0x1278>
   120e4:	movw	r2, #18961	; 0x4a11
   120e8:	movt	r2, #51966	; 0xcafe
   120ec:	cmp	r3, r2
   120f0:	movweq	r2, #55868	; 0xda3c
   120f4:	movteq	r2, #1
   120f8:	beq	121e0 <__assert_fail@plt+0x98c>
   120fc:	movw	r2, #5520	; 0x1590
   12100:	movt	r2, #51031	; 0xc757
   12104:	cmp	r3, r2
   12108:	bne	120a8 <__assert_fail@plt+0x854>
   1210c:	movw	r2, #56492	; 0xdcac
   12110:	movt	r2, #1
   12114:	b	121e0 <__assert_fail@plt+0x98c>
   12118:	cmp	r3, #51	; 0x33
   1211c:	beq	12af0 <__assert_fail@plt+0x129c>
   12120:	ble	12158 <__assert_fail@plt+0x904>
   12124:	cmp	r3, #1984	; 0x7c0
   12128:	beq	12b08 <__assert_fail@plt+0x12b4>
   1212c:	movw	r2, #4979	; 0x1373
   12130:	cmp	r3, r2
   12134:	movweq	r2, #56008	; 0xdac8
   12138:	movteq	r2, #1
   1213c:	beq	121e0 <__assert_fail@plt+0x98c>
   12140:	movw	r2, #391	; 0x187
   12144:	cmp	r3, r2
   12148:	bne	120a8 <__assert_fail@plt+0x854>
   1214c:	movw	r2, #55812	; 0xda04
   12150:	movt	r2, #1
   12154:	b	121e0 <__assert_fail@plt+0x98c>
   12158:	movw	r2, #19778	; 0x4d42
   1215c:	movt	r2, #65363	; 0xff53
   12160:	cmp	r3, r2
   12164:	beq	12afc <__assert_fail@plt+0x12a8>
   12168:	cmp	r3, #47	; 0x2f
   1216c:	movweq	r2, #56532	; 0xdcd4
   12170:	movteq	r2, #1
   12174:	beq	121e0 <__assert_fail@plt+0x98c>
   12178:	movw	r2, #19778	; 0x4d42
   1217c:	movt	r2, #65107	; 0xfe53
   12180:	cmp	r3, r2
   12184:	bne	120a8 <__assert_fail@plt+0x854>
   12188:	movw	r2, #56648	; 0xdd48
   1218c:	movt	r2, #1
   12190:	b	121e0 <__assert_fail@plt+0x98c>
   12194:	movw	r2, #5007	; 0x138f
   12198:	cmp	r3, r2
   1219c:	beq	12b20 <__assert_fail@plt+0x12cc>
   121a0:	movw	r2, #7377	; 0x1cd1
   121a4:	cmp	r3, r2
   121a8:	movweq	r2, #56024	; 0xdad8
   121ac:	movteq	r2, #1
   121b0:	beq	121e0 <__assert_fail@plt+0x98c>
   121b4:	movw	r2, #4991	; 0x137f
   121b8:	cmp	r3, r2
   121bc:	bne	120a8 <__assert_fail@plt+0x854>
   121c0:	movw	r2, #56324	; 0xdc04
   121c4:	movt	r2, #1
   121c8:	b	121e0 <__assert_fail@plt+0x98c>
   121cc:	movw	r2, #9336	; 0x2478
   121d0:	cmp	r3, r2
   121d4:	movweq	r2, #56364	; 0xdc2c
   121d8:	movteq	r2, #1
   121dc:	bne	120a8 <__assert_fail@plt+0x854>
   121e0:	mov	r1, r6
   121e4:	mov	r0, r5
   121e8:	bl	11c0c <__assert_fail@plt+0x3b8>
   121ec:	b	11db4 <__assert_fail@plt+0x560>
   121f0:	movw	r2, #44533	; 0xadf5
   121f4:	cmp	r3, r2
   121f8:	beq	12b38 <__assert_fail@plt+0x12e4>
   121fc:	ble	12294 <__assert_fail@plt+0xa40>
   12200:	movw	r2, #65518	; 0xffee
   12204:	movt	r2, #192	; 0xc0
   12208:	cmp	r3, r2
   1220c:	beq	12b98 <__assert_fail@plt+0x1344>
   12210:	movw	r2, #65518	; 0xffee
   12214:	movt	r2, #192	; 0xc0
   12218:	cmp	r3, r2
   1221c:	ble	123a4 <__assert_fail@plt+0xb50>
   12220:	movw	r2, #6512	; 0x1970
   12224:	movt	r2, #278	; 0x116
   12228:	cmp	r3, r2
   1222c:	beq	12bc8 <__assert_fail@plt+0x1374>
   12230:	movw	r2, #6512	; 0x1970
   12234:	movt	r2, #278	; 0x116
   12238:	cmp	r3, r2
   1223c:	ble	12430 <__assert_fail@plt+0xbdc>
   12240:	movw	r2, #63412	; 0xf7b4
   12244:	movt	r2, #303	; 0x12f
   12248:	cmp	r3, r2
   1224c:	beq	12be0 <__assert_fail@plt+0x138c>
   12250:	movw	r2, #63412	; 0xf7b4
   12254:	movt	r2, #303	; 0x12f
   12258:	cmp	r3, r2
   1225c:	ble	12474 <__assert_fail@plt+0xc20>
   12260:	movw	r2, #63413	; 0xf7b5
   12264:	movt	r2, #303	; 0x12f
   12268:	cmp	r3, r2
   1226c:	movweq	r2, #56700	; 0xdd7c
   12270:	movteq	r2, #1
   12274:	beq	121e0 <__assert_fail@plt+0x98c>
   12278:	movw	r2, #63414	; 0xf7b6
   1227c:	movt	r2, #303	; 0x12f
   12280:	cmp	r3, r2
   12284:	movweq	r2, #56692	; 0xdd74
   12288:	movteq	r2, #1
   1228c:	beq	121e0 <__assert_fail@plt+0x98c>
   12290:	b	120a8 <__assert_fail@plt+0x854>
   12294:	movw	r2, #24053	; 0x5df5
   12298:	cmp	r3, r2
   1229c:	beq	12b44 <__assert_fail@plt+0x12f0>
   122a0:	ble	122ec <__assert_fail@plt+0xa98>
   122a4:	movw	r2, #38496	; 0x9660
   122a8:	cmp	r3, r2
   122ac:	beq	12b74 <__assert_fail@plt+0x1320>
   122b0:	ble	1236c <__assert_fail@plt+0xb18>
   122b4:	movw	r2, #40865	; 0x9fa1
   122b8:	cmp	r3, r2
   122bc:	beq	12b8c <__assert_fail@plt+0x1338>
   122c0:	movw	r2, #40866	; 0x9fa2
   122c4:	cmp	r3, r2
   122c8:	movweq	r2, #56740	; 0xdda4
   122cc:	movteq	r2, #1
   122d0:	beq	121e0 <__assert_fail@plt+0x98c>
   122d4:	movw	r2, #40864	; 0x9fa0
   122d8:	cmp	r3, r2
   122dc:	bne	120a8 <__assert_fail@plt+0x854>
   122e0:	movw	r2, #56512	; 0xdcc0
   122e4:	movt	r2, #1
   122e8:	b	121e0 <__assert_fail@plt+0x98c>
   122ec:	movw	r2, #19780	; 0x4d44
   122f0:	cmp	r3, r2
   122f4:	beq	12b50 <__assert_fail@plt+0x12fc>
   122f8:	ble	12334 <__assert_fail@plt+0xae0>
   122fc:	movw	r2, #20859	; 0x517b
   12300:	cmp	r3, r2
   12304:	beq	12b68 <__assert_fail@plt+0x1314>
   12308:	movw	r2, #22092	; 0x564c
   1230c:	cmp	r3, r2
   12310:	movweq	r2, #56408	; 0xdc58
   12314:	movteq	r2, #1
   12318:	beq	121e0 <__assert_fail@plt+0x98c>
   1231c:	movw	r2, #19802	; 0x4d5a
   12320:	cmp	r3, r2
   12324:	bne	120a8 <__assert_fail@plt+0x854>
   12328:	movw	r2, #56384	; 0xdc40
   1232c:	movt	r2, #1
   12330:	b	121e0 <__assert_fail@plt+0x98c>
   12334:	movw	r2, #18475	; 0x482b
   12338:	cmp	r3, r2
   1233c:	beq	12b5c <__assert_fail@plt+0x1308>
   12340:	movw	r2, #18520	; 0x4858
   12344:	cmp	r3, r2
   12348:	movweq	r2, #56200	; 0xdb88
   1234c:	movteq	r2, #1
   12350:	beq	121e0 <__assert_fail@plt+0x98c>
   12354:	movw	r2, #16964	; 0x4244
   12358:	cmp	r3, r2
   1235c:	bne	120a8 <__assert_fail@plt+0x854>
   12360:	movw	r2, #56188	; 0xdb7c
   12364:	movt	r2, #1
   12368:	b	121e0 <__assert_fail@plt+0x98c>
   1236c:	movw	r2, #29301	; 0x7275
   12370:	cmp	r3, r2
   12374:	beq	12b80 <__assert_fail@plt+0x132c>
   12378:	movw	r2, #29366	; 0x72b6
   1237c:	cmp	r3, r2
   12380:	movweq	r2, #56280	; 0xdbd8
   12384:	movteq	r2, #1
   12388:	beq	121e0 <__assert_fail@plt+0x98c>
   1238c:	movw	r2, #26985	; 0x6969
   12390:	cmp	r3, r2
   12394:	bne	120a8 <__assert_fail@plt+0x854>
   12398:	movw	r2, #56416	; 0xdc60
   1239c:	movt	r2, #1
   123a0:	b	121e0 <__assert_fail@plt+0x98c>
   123a4:	movw	r2, #61791	; 0xf15f
   123a8:	cmp	r3, r2
   123ac:	beq	12ba4 <__assert_fail@plt+0x1350>
   123b0:	ble	123f8 <__assert_fail@plt+0xba4>
   123b4:	movw	r2, #57579	; 0xe0eb
   123b8:	movt	r2, #39	; 0x27
   123bc:	cmp	r3, r2
   123c0:	beq	12bbc <__assert_fail@plt+0x1368>
   123c4:	movw	r2, #19027	; 0x4a53
   123c8:	movt	r2, #65	; 0x41
   123cc:	cmp	r3, r2
   123d0:	movweq	r2, #56720	; 0xdd90
   123d4:	movteq	r2, #1
   123d8:	beq	121e0 <__assert_fail@plt+0x98c>
   123dc:	movw	r2, #6484	; 0x1954
   123e0:	movt	r2, #1
   123e4:	cmp	r3, r2
   123e8:	bne	120a8 <__assert_fail@plt+0x854>
   123ec:	movw	r2, #56736	; 0xdda0
   123f0:	movt	r2, #1
   123f4:	b	121e0 <__assert_fail@plt+0x98c>
   123f8:	movw	r2, #61265	; 0xef51
   123fc:	cmp	r3, r2
   12400:	beq	12bb0 <__assert_fail@plt+0x135c>
   12404:	movw	r2, #61267	; 0xef53
   12408:	cmp	r3, r2
   1240c:	movweq	r2, #56104	; 0xdb28
   12410:	movteq	r2, #1
   12414:	beq	121e0 <__assert_fail@plt+0x98c>
   12418:	movw	r2, #44543	; 0xadff
   1241c:	cmp	r3, r2
   12420:	bne	120a8 <__assert_fail@plt+0x854>
   12424:	movw	r2, #55776	; 0xd9e0
   12428:	movt	r2, #1
   1242c:	b	121e0 <__assert_fail@plt+0x98c>
   12430:	movw	r2, #6548	; 0x1994
   12434:	movt	r2, #258	; 0x102
   12438:	cmp	r3, r2
   1243c:	beq	12bd4 <__assert_fail@plt+0x1380>
   12440:	movw	r2, #6551	; 0x1997
   12444:	movt	r2, #258	; 0x102
   12448:	cmp	r3, r2
   1244c:	movweq	r2, #56752	; 0xddb0
   12450:	movteq	r2, #1
   12454:	beq	121e0 <__assert_fail@plt+0x98c>
   12458:	mov	r2, #25600	; 0x6400
   1245c:	movt	r2, #195	; 0xc3
   12460:	cmp	r3, r2
   12464:	bne	120a8 <__assert_fail@plt+0x854>
   12468:	movw	r2, #55908	; 0xda64
   1246c:	movt	r2, #1
   12470:	b	121e0 <__assert_fail@plt+0x98c>
   12474:	movw	r2, #53613	; 0xd16d
   12478:	movt	r2, #303	; 0x12f
   1247c:	cmp	r3, r2
   12480:	movweq	r2, #56816	; 0xddf0
   12484:	movteq	r2, #1
   12488:	beq	121e0 <__assert_fail@plt+0x98c>
   1248c:	b	120a8 <__assert_fail@plt+0x854>
   12490:	movw	r2, #12225	; 0x2fc1
   12494:	movt	r2, #12225	; 0x2fc1
   12498:	cmp	r3, r2
   1249c:	beq	12bf8 <__assert_fail@plt+0x13a4>
   124a0:	movw	r2, #12225	; 0x2fc1
   124a4:	movt	r2, #12225	; 0x2fc1
   124a8:	cmp	r3, r2
   124ac:	ble	12544 <__assert_fail@plt+0xcf0>
   124b0:	movw	r2, #18003	; 0x4653
   124b4:	movt	r2, #17752	; 0x4558
   124b8:	cmp	r3, r2
   124bc:	beq	12c58 <__assert_fail@plt+0x1404>
   124c0:	movw	r2, #18003	; 0x4653
   124c4:	movt	r2, #17752	; 0x4558
   124c8:	cmp	r3, r2
   124cc:	ble	126b4 <__assert_fail@plt+0xe60>
   124d0:	movw	r2, #17229	; 0x434d
   124d4:	movt	r2, #21317	; 0x5345
   124d8:	cmp	r3, r2
   124dc:	beq	12c88 <__assert_fail@plt+0x1434>
   124e0:	movw	r2, #17229	; 0x434d
   124e4:	movt	r2, #21317	; 0x5345
   124e8:	cmp	r3, r2
   124ec:	ble	1275c <__assert_fail@plt+0xf08>
   124f0:	movw	r2, #16719	; 0x414f
   124f4:	movt	r2, #21318	; 0x5346
   124f8:	cmp	r3, r2
   124fc:	beq	12ca0 <__assert_fail@plt+0x144c>
   12500:	movw	r2, #16719	; 0x414f
   12504:	movt	r2, #21318	; 0x5346
   12508:	cmp	r3, r2
   1250c:	ble	127a0 <__assert_fail@plt+0xf4c>
   12510:	movw	r2, #18502	; 0x4846
   12514:	movt	r2, #21318	; 0x5346
   12518:	cmp	r3, r2
   1251c:	movweq	r2, #56792	; 0xddd8
   12520:	movteq	r2, #1
   12524:	beq	121e0 <__assert_fail@plt+0x98c>
   12528:	movw	r2, #21582	; 0x544e
   1252c:	movt	r2, #21318	; 0x5346
   12530:	cmp	r3, r2
   12534:	movweq	r2, #56444	; 0xdc7c
   12538:	movteq	r2, #1
   1253c:	beq	121e0 <__assert_fail@plt+0x98c>
   12540:	b	120a8 <__assert_fail@plt+0x854>
   12544:	movw	r2, #13126	; 0x3346
   12548:	movt	r2, #5377	; 0x1501
   1254c:	cmp	r3, r2
   12550:	beq	12c04 <__assert_fail@plt+0x13b0>
   12554:	movw	r2, #13126	; 0x3346
   12558:	movt	r2, #5377	; 0x1501
   1255c:	cmp	r3, r2
   12560:	ble	125c8 <__assert_fail@plt+0xd74>
   12564:	movw	r2, #47792	; 0xbab0
   12568:	movt	r2, #8209	; 0x2011
   1256c:	cmp	r3, r2
   12570:	beq	12c34 <__assert_fail@plt+0x13e0>
   12574:	movw	r2, #47792	; 0xbab0
   12578:	movt	r2, #8209	; 0x2011
   1257c:	cmp	r3, r2
   12580:	ble	12670 <__assert_fail@plt+0xe1c>
   12584:	movw	r2, #15685	; 0x3d45
   12588:	movt	r2, #10445	; 0x28cd
   1258c:	cmp	r3, r2
   12590:	beq	12c4c <__assert_fail@plt+0x13f8>
   12594:	movw	r2, #7658	; 0x1dea
   12598:	movt	r2, #11181	; 0x2bad
   1259c:	cmp	r3, r2
   125a0:	movweq	r2, #56252	; 0xdbbc
   125a4:	movteq	r2, #1
   125a8:	beq	121e0 <__assert_fail@plt+0x98c>
   125ac:	movw	r2, #6405	; 0x1905
   125b0:	movt	r2, #9221	; 0x2405
   125b4:	cmp	r3, r2
   125b8:	bne	120a8 <__assert_fail@plt+0x854>
   125bc:	movw	r2, #56724	; 0xdd94
   125c0:	movt	r2, #1
   125c4:	b	121e0 <__assert_fail@plt+0x98c>
   125c8:	movw	r2, #7658	; 0x1dea
   125cc:	movt	r2, #2989	; 0xbad
   125d0:	cmp	r3, r2
   125d4:	beq	12c10 <__assert_fail@plt+0x13bc>
   125d8:	movw	r2, #7658	; 0x1dea
   125dc:	movt	r2, #2989	; 0xbad
   125e0:	cmp	r3, r2
   125e4:	ble	1262c <__assert_fail@plt+0xdd8>
   125e8:	movw	r2, #30804	; 0x7854
   125ec:	movt	r2, #4400	; 0x1130
   125f0:	cmp	r3, r2
   125f4:	beq	12c28 <__assert_fail@plt+0x13d4>
   125f8:	movw	r2, #4966	; 0x1366
   125fc:	movt	r2, #4966	; 0x1366
   12600:	cmp	r3, r2
   12604:	movweq	r2, #55820	; 0xda0c
   12608:	movteq	r2, #1
   1260c:	beq	121e0 <__assert_fail@plt+0x98c>
   12610:	mov	r2, #3024	; 0xbd0
   12614:	movt	r2, #3024	; 0xbd0
   12618:	cmp	r3, r2
   1261c:	bne	120a8 <__assert_fail@plt+0x854>
   12620:	movw	r2, #56308	; 0xdbf4
   12624:	movt	r2, #1
   12628:	b	121e0 <__assert_fail@plt+0x98c>
   1262c:	movw	r2, #22561	; 0x5821
   12630:	movt	r2, #1893	; 0x765
   12634:	cmp	r3, r2
   12638:	beq	12c1c <__assert_fail@plt+0x13c8>
   1263c:	movw	r2, #6452	; 0x1934
   12640:	movt	r2, #2308	; 0x904
   12644:	cmp	r3, r2
   12648:	movweq	r2, #55788	; 0xd9ec
   1264c:	movteq	r2, #1
   12650:	beq	121e0 <__assert_fail@plt+0x98c>
   12654:	movw	r2, #4520	; 0x11a8
   12658:	movt	r2, #305	; 0x131
   1265c:	cmp	r3, r2
   12660:	bne	120a8 <__assert_fail@plt+0x854>
   12664:	movw	r2, #56244	; 0xdbb4
   12668:	movt	r2, #1
   1266c:	b	121e0 <__assert_fail@plt+0x98c>
   12670:	movw	r2, #806	; 0x326
   12674:	movt	r2, #6531	; 0x1983
   12678:	cmp	r3, r2
   1267c:	beq	12c40 <__assert_fail@plt+0x13ec>
   12680:	movw	r2, #64206	; 0xface
   12684:	movt	r2, #7085	; 0x1bad
   12688:	cmp	r3, r2
   1268c:	movweq	r2, #55852	; 0xda2c
   12690:	movteq	r2, #1
   12694:	beq	121e0 <__assert_fail@plt+0x98c>
   12698:	movw	r2, #514	; 0x202
   1269c:	movt	r2, #6528	; 0x1980
   126a0:	cmp	r3, r2
   126a4:	bne	120a8 <__assert_fail@plt+0x854>
   126a8:	movw	r2, #56392	; 0xdc48
   126ac:	movt	r2, #1
   126b0:	b	121e0 <__assert_fail@plt+0x98c>
   126b4:	movw	r2, #23891	; 0x5d53
   126b8:	movt	r2, #17217	; 0x4341
   126bc:	cmp	r3, r2
   126c0:	beq	12c64 <__assert_fail@plt+0x1410>
   126c4:	movw	r2, #23891	; 0x5d53
   126c8:	movt	r2, #17217	; 0x4341
   126cc:	cmp	r3, r2
   126d0:	ble	12718 <__assert_fail@plt+0xec4>
   126d4:	movw	r2, #52520	; 0xcd28
   126d8:	movt	r2, #17725	; 0x453d
   126dc:	cmp	r3, r2
   126e0:	beq	12c7c <__assert_fail@plt+0x1428>
   126e4:	movw	r2, #17485	; 0x444d
   126e8:	movt	r2, #17741	; 0x454d
   126ec:	cmp	r3, r2
   126f0:	movweq	r2, #56016	; 0xdad0
   126f4:	movteq	r2, #1
   126f8:	beq	121e0 <__assert_fail@plt+0x98c>
   126fc:	movw	r2, #16706	; 0x4142
   12700:	movt	r2, #17485	; 0x444d
   12704:	cmp	r3, r2
   12708:	bne	120a8 <__assert_fail@plt+0x854>
   1270c:	movw	r2, #56032	; 0xdae0
   12710:	movt	r2, #1
   12714:	b	121e0 <__assert_fail@plt+0x98c>
   12718:	movw	r2, #21297	; 0x5331
   1271c:	movt	r2, #16966	; 0x4246
   12720:	cmp	r3, r2
   12724:	beq	12c70 <__assert_fail@plt+0x141c>
   12728:	movw	r2, #20045	; 0x4e4d
   1272c:	movt	r2, #16969	; 0x4249
   12730:	cmp	r3, r2
   12734:	movweq	r2, #55876	; 0xda44
   12738:	movteq	r2, #1
   1273c:	beq	121e0 <__assert_fail@plt+0x98c>
   12740:	movw	r2, #17994	; 0x464a
   12744:	movt	r2, #12627	; 0x3153
   12748:	cmp	r3, r2
   1274c:	bne	120a8 <__assert_fail@plt+0x854>
   12750:	movw	r2, #56288	; 0xdbe0
   12754:	movt	r2, #1
   12758:	b	121e0 <__assert_fail@plt+0x98c>
   1275c:	movw	r2, #20549	; 0x5045
   12760:	movt	r2, #20553	; 0x5049
   12764:	cmp	r3, r2
   12768:	beq	12c94 <__assert_fail@plt+0x1440>
   1276c:	movw	r2, #18803	; 0x4973
   12770:	movt	r2, #21093	; 0x5265
   12774:	cmp	r3, r2
   12778:	movweq	r2, #56560	; 0xdcf0
   1277c:	movteq	r2, #1
   12780:	beq	121e0 <__assert_fail@plt+0x98c>
   12784:	movw	r2, #18003	; 0x4653
   12788:	movt	r2, #18256	; 0x4750
   1278c:	cmp	r3, r2
   12790:	bne	120a8 <__assert_fail@plt+0x854>
   12794:	movw	r2, #56180	; 0xdb74
   12798:	movt	r2, #1
   1279c:	b	121e0 <__assert_fail@plt+0x98c>
   127a0:	movw	r2, #12621	; 0x314d
   127a4:	movt	r2, #21318	; 0x5346
   127a8:	cmp	r3, r2
   127ac:	movweq	r2, #56316	; 0xdbfc
   127b0:	movteq	r2, #1
   127b4:	beq	121e0 <__assert_fail@plt+0x98c>
   127b8:	b	120a8 <__assert_fail@plt+0x854>
   127bc:	movw	r2, #26227	; 0x6673
   127c0:	movt	r2, #24931	; 0x6163
   127c4:	cmp	r3, r2
   127c8:	beq	12cb8 <__assert_fail@plt+0x1464>
   127cc:	movw	r2, #26227	; 0x6673
   127d0:	movt	r2, #24931	; 0x6163
   127d4:	cmp	r3, r2
   127d8:	ble	12850 <__assert_fail@plt+0xffc>
   127dc:	movw	r2, #25968	; 0x6570
   127e0:	movt	r2, #25189	; 0x6265
   127e4:	cmp	r3, r2
   127e8:	beq	12ce8 <__assert_fail@plt+0x1494>
   127ec:	movw	r2, #25968	; 0x6570
   127f0:	movt	r2, #25189	; 0x6265
   127f4:	cmp	r3, r2
   127f8:	ble	128f8 <__assert_fail@plt+0x10a4>
   127fc:	movw	r2, #29296	; 0x7270
   12800:	movt	r2, #25447	; 0x6367
   12804:	cmp	r3, r2
   12808:	beq	12d00 <__assert_fail@plt+0x14ac>
   1280c:	movw	r2, #29296	; 0x7270
   12810:	movt	r2, #25447	; 0x6367
   12814:	cmp	r3, r2
   12818:	ble	1293c <__assert_fail@plt+0x10e8>
   1281c:	movw	r2, #26400	; 0x6720
   12820:	movt	r2, #25698	; 0x6462
   12824:	cmp	r3, r2
   12828:	movweq	r2, #56000	; 0xdac0
   1282c:	movteq	r2, #1
   12830:	beq	121e0 <__assert_fail@plt+0x98c>
   12834:	movw	r2, #24952	; 0x6178
   12838:	movt	r2, #25700	; 0x6464
   1283c:	cmp	r3, r2
   12840:	movweq	r2, #55992	; 0xdab8
   12844:	movteq	r2, #1
   12848:	beq	121e0 <__assert_fail@plt+0x98c>
   1284c:	b	120a8 <__assert_fail@plt+0x854>
   12850:	movw	r2, #21314	; 0x5342
   12854:	movt	r2, #22598	; 0x5846
   12858:	cmp	r3, r2
   1285c:	beq	12cc4 <__assert_fail@plt+0x1470>
   12860:	movw	r2, #21314	; 0x5342
   12864:	movt	r2, #22598	; 0x5846
   12868:	cmp	r3, r2
   1286c:	ble	128b4 <__assert_fail@plt+0x1060>
   12870:	movw	r2, #18003	; 0x4653
   12874:	movt	r2, #23119	; 0x5a4f
   12878:	cmp	r3, r2
   1287c:	beq	12cdc <__assert_fail@plt+0x1488>
   12880:	movw	r2, #11765	; 0x2df5
   12884:	movt	r2, #24010	; 0x5dca
   12888:	cmp	r3, r2
   1288c:	movweq	r2, #56592	; 0xdd10
   12890:	movteq	r2, #1
   12894:	beq	121e0 <__assert_fail@plt+0x98c>
   12898:	movw	r2, #27120	; 0x69f0
   1289c:	movt	r2, #23100	; 0x5a3c
   128a0:	cmp	r3, r2
   128a4:	bne	120a8 <__assert_fail@plt+0x854>
   128a8:	movw	r2, #55760	; 0xd9d0
   128ac:	movt	r2, #1
   128b0:	b	121e0 <__assert_fail@plt+0x98c>
   128b4:	movw	r2, #18003	; 0x4653
   128b8:	movt	r2, #22106	; 0x565a
   128bc:	cmp	r3, r2
   128c0:	beq	12cd0 <__assert_fail@plt+0x147c>
   128c4:	movw	r2, #22569	; 0x5829
   128c8:	movt	r2, #22569	; 0x5829
   128cc:	cmp	r3, r2
   128d0:	movweq	r2, #56840	; 0xde08
   128d4:	movteq	r2, #1
   128d8:	beq	121e0 <__assert_fail@plt+0x98c>
   128dc:	mov	r2, #256	; 0x100
   128e0:	movt	r2, #21529	; 0x5419
   128e4:	cmp	r3, r2
   128e8:	bne	120a8 <__assert_fail@plt+0x854>
   128ec:	movw	r2, #56736	; 0xdda0
   128f0:	movt	r2, #1
   128f4:	b	121e0 <__assert_fail@plt+0x98c>
   128f8:	movw	r2, #26227	; 0x6673
   128fc:	movt	r2, #24949	; 0x6175
   12900:	cmp	r3, r2
   12904:	beq	12cf4 <__assert_fail@plt+0x14a0>
   12908:	movw	r2, #25974	; 0x6576
   1290c:	movt	r2, #25188	; 0x6264
   12910:	cmp	r3, r2
   12914:	movweq	r2, #55844	; 0xda24
   12918:	movteq	r2, #1
   1291c:	beq	121e0 <__assert_fail@plt+0x98c>
   12920:	movw	r2, #26476	; 0x676c
   12924:	movt	r2, #24933	; 0x6165
   12928:	cmp	r3, r2
   1292c:	bne	120a8 <__assert_fail@plt+0x854>
   12930:	movw	r2, #56520	; 0xdcc8
   12934:	movt	r2, #1
   12938:	b	121e0 <__assert_fail@plt+0x98c>
   1293c:	movw	r2, #25970	; 0x6572
   12940:	movt	r2, #25189	; 0x6265
   12944:	cmp	r3, r2
   12948:	movweq	r2, #56684	; 0xdd6c
   1294c:	movteq	r2, #1
   12950:	beq	121e0 <__assert_fail@plt+0x98c>
   12954:	b	120a8 <__assert_fail@plt+0x854>
   12958:	movw	r2, #18003	; 0x4653
   1295c:	movt	r2, #27457	; 0x6b41
   12960:	cmp	r3, r2
   12964:	beq	12d18 <__assert_fail@plt+0x14c4>
   12968:	movw	r2, #18003	; 0x4653
   1296c:	movt	r2, #27457	; 0x6b41
   12970:	cmp	r3, r2
   12974:	ble	129bc <__assert_fail@plt+0x1168>
   12978:	movw	r2, #29540	; 0x7364
   1297c:	movt	r2, #28262	; 0x6e66
   12980:	cmp	r3, r2
   12984:	beq	12d30 <__assert_fail@plt+0x14dc>
   12988:	movw	r2, #26227	; 0x6673
   1298c:	movt	r2, #28275	; 0x6e73
   12990:	cmp	r3, r2
   12994:	movweq	r2, #56436	; 0xdc74
   12998:	movteq	r2, #1
   1299c:	beq	121e0 <__assert_fail@plt+0x98c>
   129a0:	movw	r2, #28528	; 0x6f70
   129a4:	movt	r2, #27759	; 0x6c6f
   129a8:	cmp	r3, r2
   129ac:	bne	120a8 <__assert_fail@plt+0x854>
   129b0:	movw	r2, #55856	; 0xda30
   129b4:	movt	r2, #1
   129b8:	b	121e0 <__assert_fail@plt+0x98c>
   129bc:	movw	r2, #26985	; 0x6969
   129c0:	movt	r2, #26457	; 0x6759
   129c4:	cmp	r3, r2
   129c8:	beq	12d24 <__assert_fail@plt+0x14d0>
   129cc:	movw	r2, #4386	; 0x1122
   129d0:	movt	r2, #26649	; 0x6819
   129d4:	cmp	r3, r2
   129d8:	movweq	r2, #56540	; 0xdcdc
   129dc:	movteq	r2, #1
   129e0:	beq	121e0 <__assert_fail@plt+0x98c>
   129e4:	movw	r2, #21830	; 0x5546
   129e8:	movt	r2, #25971	; 0x6573
   129ec:	cmp	r3, r2
   129f0:	bne	120a8 <__assert_fail@plt+0x854>
   129f4:	movw	r2, #56144	; 0xdb50
   129f8:	movt	r2, #1
   129fc:	b	121e0 <__assert_fail@plt+0x98c>
   12a00:	movw	r2, #29305	; 0x7279
   12a04:	movt	r2, #29554	; 0x7372
   12a08:	cmp	r3, r2
   12a0c:	beq	12d48 <__assert_fail@plt+0x14f4>
   12a10:	movw	r2, #29253	; 0x7245
   12a14:	movt	r2, #29557	; 0x7375
   12a18:	cmp	r3, r2
   12a1c:	movweq	r2, #55948	; 0xda8c
   12a20:	movteq	r2, #1
   12a24:	beq	121e0 <__assert_fail@plt+0x98c>
   12a28:	movw	r2, #29544	; 0x7368
   12a2c:	movt	r2, #29553	; 0x7371
   12a30:	cmp	r3, r2
   12a34:	bne	120a8 <__assert_fail@plt+0x854>
   12a38:	movw	r2, #56672	; 0xdd60
   12a3c:	movt	r2, #1
   12a40:	b	121e0 <__assert_fail@plt+0x98c>
   12a44:	movw	r2, #24931	; 0x6163
   12a48:	movt	r2, #29810	; 0x7472
   12a4c:	cmp	r3, r2
   12a50:	movweq	r2, #56716	; 0xdd8c
   12a54:	movteq	r2, #1
   12a58:	beq	121e0 <__assert_fail@plt+0x98c>
   12a5c:	b	120a8 <__assert_fail@plt+0x854>
   12a60:	movw	r2, #55956	; 0xda94
   12a64:	movt	r2, #1
   12a68:	b	121e0 <__assert_fail@plt+0x98c>
   12a6c:	movw	r2, #56132	; 0xdb44
   12a70:	movt	r2, #1
   12a74:	b	121e0 <__assert_fail@plt+0x98c>
   12a78:	movw	r2, #56216	; 0xdb98
   12a7c:	movt	r2, #1
   12a80:	b	121e0 <__assert_fail@plt+0x98c>
   12a84:	movw	r2, #56656	; 0xdd50
   12a88:	movt	r2, #1
   12a8c:	b	121e0 <__assert_fail@plt+0x98c>
   12a90:	movw	r2, #56776	; 0xddc8
   12a94:	movt	r2, #1
   12a98:	b	121e0 <__assert_fail@plt+0x98c>
   12a9c:	movw	r2, #55888	; 0xda50
   12aa0:	movt	r2, #1
   12aa4:	b	121e0 <__assert_fail@plt+0x98c>
   12aa8:	movw	r2, #56548	; 0xdce4
   12aac:	movt	r2, #1
   12ab0:	b	121e0 <__assert_fail@plt+0x98c>
   12ab4:	movw	r2, #56800	; 0xdde0
   12ab8:	movt	r2, #1
   12abc:	b	121e0 <__assert_fail@plt+0x98c>
   12ac0:	movw	r2, #56056	; 0xdaf8
   12ac4:	movt	r2, #1
   12ac8:	b	121e0 <__assert_fail@plt+0x98c>
   12acc:	movw	r2, #56300	; 0xdbec
   12ad0:	movt	r2, #1
   12ad4:	b	121e0 <__assert_fail@plt+0x98c>
   12ad8:	movw	r2, #56124	; 0xdb3c
   12adc:	movt	r2, #1
   12ae0:	b	121e0 <__assert_fail@plt+0x98c>
   12ae4:	movw	r2, #56100	; 0xdb24
   12ae8:	movt	r2, #1
   12aec:	b	121e0 <__assert_fail@plt+0x98c>
   12af0:	movw	r2, #56820	; 0xddf4
   12af4:	movt	r2, #1
   12af8:	b	121e0 <__assert_fail@plt+0x98c>
   12afc:	movw	r2, #55940	; 0xda84
   12b00:	movt	r2, #1
   12b04:	b	121e0 <__assert_fail@plt+0x98c>
   12b08:	movw	r2, #56272	; 0xdbd0
   12b0c:	movt	r2, #1
   12b10:	b	121e0 <__assert_fail@plt+0x98c>
   12b14:	movw	r2, #56352	; 0xdc20
   12b18:	movt	r2, #1
   12b1c:	b	121e0 <__assert_fail@plt+0x98c>
   12b20:	movw	r2, #56332	; 0xdc0c
   12b24:	movt	r2, #1
   12b28:	b	121e0 <__assert_fail@plt+0x98c>
   12b2c:	movw	r2, #56428	; 0xdc6c
   12b30:	movt	r2, #1
   12b34:	b	121e0 <__assert_fail@plt+0x98c>
   12b38:	movw	r2, #55768	; 0xd9d8
   12b3c:	movt	r2, #1
   12b40:	b	121e0 <__assert_fail@plt+0x98c>
   12b44:	movw	r2, #56092	; 0xdb1c
   12b48:	movt	r2, #1
   12b4c:	b	121e0 <__assert_fail@plt+0x98c>
   12b50:	movw	r2, #56400	; 0xdc50
   12b54:	movt	r2, #1
   12b58:	b	121e0 <__assert_fail@plt+0x98c>
   12b5c:	movw	r2, #56192	; 0xdb80
   12b60:	movt	r2, #1
   12b64:	b	121e0 <__assert_fail@plt+0x98c>
   12b68:	movw	r2, #56644	; 0xdd44
   12b6c:	movt	r2, #1
   12b70:	b	121e0 <__assert_fail@plt+0x98c>
   12b74:	movw	r2, #56264	; 0xdbc8
   12b78:	movt	r2, #1
   12b7c:	b	121e0 <__assert_fail@plt+0x98c>
   12b80:	movw	r2, #56572	; 0xdcfc
   12b84:	movt	r2, #1
   12b88:	b	121e0 <__assert_fail@plt+0x98c>
   12b8c:	movw	r2, #56452	; 0xdc84
   12b90:	movt	r2, #1
   12b94:	b	121e0 <__assert_fail@plt+0x98c>
   12b98:	movw	r2, #56208	; 0xdb90
   12b9c:	movt	r2, #1
   12ba0:	b	121e0 <__assert_fail@plt+0x98c>
   12ba4:	movw	r2, #56044	; 0xdaec
   12ba8:	movt	r2, #1
   12bac:	b	121e0 <__assert_fail@plt+0x98c>
   12bb0:	movw	r2, #56116	; 0xdb34
   12bb4:	movt	r2, #1
   12bb8:	b	121e0 <__assert_fail@plt+0x98c>
   12bbc:	movw	r2, #55916	; 0xda6c
   12bc0:	movt	r2, #1
   12bc4:	b	121e0 <__assert_fail@plt+0x98c>
   12bc8:	movw	r2, #56168	; 0xdb68
   12bcc:	movt	r2, #1
   12bd0:	b	121e0 <__assert_fail@plt+0x98c>
   12bd4:	movw	r2, #56708	; 0xdd84
   12bd8:	movt	r2, #1
   12bdc:	b	121e0 <__assert_fail@plt+0x98c>
   12be0:	movw	r2, #56808	; 0xdde8
   12be4:	movt	r2, #1
   12be8:	b	121e0 <__assert_fail@plt+0x98c>
   12bec:	movw	r2, #56664	; 0xdd58
   12bf0:	movt	r2, #1
   12bf4:	b	121e0 <__assert_fail@plt+0x98c>
   12bf8:	movw	r2, #56828	; 0xddfc
   12bfc:	movt	r2, #1
   12c00:	b	121e0 <__assert_fail@plt+0x98c>
   12c04:	movw	r2, #56732	; 0xdd9c
   12c08:	movt	r2, #1
   12c0c:	b	121e0 <__assert_fail@plt+0x98c>
   12c10:	movw	r2, #56160	; 0xdb60
   12c14:	movt	r2, #1
   12c18:	b	121e0 <__assert_fail@plt+0x98c>
   12c1c:	movw	r2, #56556	; 0xdcec
   12c20:	movt	r2, #1
   12c24:	b	121e0 <__assert_fail@plt+0x98c>
   12c28:	movw	r2, #56236	; 0xdbac
   12c2c:	movt	r2, #1
   12c30:	b	121e0 <__assert_fail@plt+0x98c>
   12c34:	movw	r2, #56076	; 0xdb0c
   12c38:	movt	r2, #1
   12c3c:	b	121e0 <__assert_fail@plt+0x98c>
   12c40:	movw	r2, #56136	; 0xdb48
   12c44:	movt	r2, #1
   12c48:	b	121e0 <__assert_fail@plt+0x98c>
   12c4c:	movw	r2, #55972	; 0xdaa4
   12c50:	movt	r2, #1
   12c54:	b	121e0 <__assert_fail@plt+0x98c>
   12c58:	movw	r2, #56084	; 0xdb14
   12c5c:	movt	r2, #1
   12c60:	b	121e0 <__assert_fail@plt+0x98c>
   12c64:	movw	r2, #56636	; 0xdd3c
   12c68:	movt	r2, #1
   12c6c:	b	121e0 <__assert_fail@plt+0x98c>
   12c70:	movw	r2, #55836	; 0xda1c
   12c74:	movt	r2, #1
   12c78:	b	121e0 <__assert_fail@plt+0x98c>
   12c7c:	movw	r2, #55980	; 0xdaac
   12c80:	movt	r2, #1
   12c84:	b	121e0 <__assert_fail@plt+0x98c>
   12c88:	movw	r2, #56604	; 0xdd1c
   12c8c:	movt	r2, #1
   12c90:	b	121e0 <__assert_fail@plt+0x98c>
   12c94:	movw	r2, #56584	; 0xdd08
   12c98:	movt	r2, #1
   12c9c:	b	121e0 <__assert_fail@plt+0x98c>
   12ca0:	movw	r2, #55784	; 0xd9e8
   12ca4:	movt	r2, #1
   12ca8:	b	121e0 <__assert_fail@plt+0x98c>
   12cac:	movw	r2, #56152	; 0xdb58
   12cb0:	movt	r2, #1
   12cb4:	b	121e0 <__assert_fail@plt+0x98c>
   12cb8:	movw	r2, #56852	; 0xde14
   12cbc:	movt	r2, #1
   12cc0:	b	121e0 <__assert_fail@plt+0x98c>
   12cc4:	movw	r2, #56164	; 0xdb64
   12cc8:	movt	r2, #1
   12ccc:	b	121e0 <__assert_fail@plt+0x98c>
   12cd0:	movw	r2, #56784	; 0xddd0
   12cd4:	movt	r2, #1
   12cd8:	b	121e0 <__assert_fail@plt+0x98c>
   12cdc:	movw	r2, #56832	; 0xde00
   12ce0:	movt	r2, #1
   12ce4:	b	121e0 <__assert_fail@plt+0x98c>
   12ce8:	movw	r2, #55960	; 0xda98
   12cec:	movt	r2, #1
   12cf0:	b	121e0 <__assert_fail@plt+0x98c>
   12cf4:	movw	r2, #55804	; 0xd9fc
   12cf8:	movt	r2, #1
   12cfc:	b	121e0 <__assert_fail@plt+0x98c>
   12d00:	movw	r2, #55928	; 0xda78
   12d04:	movt	r2, #1
   12d08:	b	121e0 <__assert_fail@plt+0x98c>
   12d0c:	movw	r2, #56616	; 0xdd28
   12d10:	movt	r2, #1
   12d14:	b	121e0 <__assert_fail@plt+0x98c>
   12d18:	movw	r2, #56292	; 0xdbe4
   12d1c:	movt	r2, #1
   12d20:	b	121e0 <__assert_fail@plt+0x98c>
   12d24:	movw	r2, #56580	; 0xdd04
   12d28:	movt	r2, #1
   12d2c:	b	121e0 <__assert_fail@plt+0x98c>
   12d30:	movw	r2, #56420	; 0xdc64
   12d34:	movt	r2, #1
   12d38:	b	121e0 <__assert_fail@plt+0x98c>
   12d3c:	movw	r2, #56464	; 0xdc90
   12d40:	movt	r2, #1
   12d44:	b	121e0 <__assert_fail@plt+0x98c>
   12d48:	movw	r2, #55896	; 0xda58
   12d4c:	movt	r2, #1
   12d50:	b	121e0 <__assert_fail@plt+0x98c>
   12d54:	movw	r2, #56760	; 0xddb8
   12d58:	movt	r2, #1
   12d5c:	b	121e0 <__assert_fail@plt+0x98c>
   12d60:	ldrd	r2, [r1, #8]
   12d64:	mov	r1, r6
   12d68:	bl	11ca4 <__assert_fail@plt+0x450>
   12d6c:	b	11db4 <__assert_fail@plt+0x560>
   12d70:	ldrd	r2, [r1, #16]
   12d74:	mov	r1, r6
   12d78:	bl	11ca4 <__assert_fail@plt+0x450>
   12d7c:	b	11db4 <__assert_fail@plt+0x560>
   12d80:	ldrd	r2, [r1, #24]
   12d84:	mov	r1, r6
   12d88:	bl	11ca4 <__assert_fail@plt+0x450>
   12d8c:	b	11db4 <__assert_fail@plt+0x560>
   12d90:	ldr	r2, [r1, #4]
   12d94:	asr	r3, r2, #31
   12d98:	mov	r1, r6
   12d9c:	bl	11c54 <__assert_fail@plt+0x400>
   12da0:	b	11db4 <__assert_fail@plt+0x560>
   12da4:	ldr	r2, [r1, #60]	; 0x3c
   12da8:	asr	r3, r2, #31
   12dac:	orrs	r0, r2, r3
   12db0:	ldreq	r2, [r1, #4]
   12db4:	asreq	r3, r2, #31
   12db8:	mov	r1, r6
   12dbc:	mov	r0, r5
   12dc0:	bl	11c54 <__assert_fail@plt+0x400>
   12dc4:	b	11db4 <__assert_fail@plt+0x560>
   12dc8:	ldrd	r2, [r1, #32]
   12dcc:	mov	r1, r6
   12dd0:	bl	11c54 <__assert_fail@plt+0x400>
   12dd4:	b	11db4 <__assert_fail@plt+0x560>
   12dd8:	ldrd	r2, [r1, #40]	; 0x28
   12ddc:	mov	r1, r6
   12de0:	bl	11ca4 <__assert_fail@plt+0x450>
   12de4:	b	11db4 <__assert_fail@plt+0x560>
   12de8:	movw	r3, #492	; 0x1ec
   12dec:	movt	r3, #3
   12df0:	ldr	r0, [r3]
   12df4:	ldr	r3, [r0, #20]
   12df8:	ldr	r2, [r0, #24]
   12dfc:	cmp	r3, r2
   12e00:	addcc	r2, r3, #1
   12e04:	strcc	r2, [r0, #20]
   12e08:	movcc	r2, #63	; 0x3f
   12e0c:	strbcc	r2, [r3]
   12e10:	bcc	11db4 <__assert_fail@plt+0x560>
   12e14:	mov	r1, #63	; 0x3f
   12e18:	bl	11758 <__overflow@plt>
   12e1c:	b	11db4 <__assert_fail@plt+0x560>
   12e20:	strd	r4, [sp, #-20]!	; 0xffffffec
   12e24:	strd	r6, [sp, #8]
   12e28:	str	lr, [sp, #16]
   12e2c:	sub	sp, sp, #212	; 0xd4
   12e30:	mov	r5, r0
   12e34:	movw	r3, #504	; 0x1f8
   12e38:	movt	r3, #3
   12e3c:	ldrb	r3, [r3, #21]
   12e40:	cmp	r3, #0
   12e44:	beq	12e80 <__assert_fail@plt+0x162c>
   12e48:	add	r2, sp, #104	; 0x68
   12e4c:	mov	r1, r5
   12e50:	mov	r0, #3
   12e54:	bl	11800 <__xstat64@plt>
   12e58:	cmp	r0, #0
   12e5c:	movne	r4, #0
   12e60:	bne	12f68 <__assert_fail@plt+0x1714>
   12e64:	movw	r3, #504	; 0x1f8
   12e68:	movt	r3, #3
   12e6c:	ldr	r4, [r3, #24]
   12e70:	cmp	r4, #0
   12e74:	beq	12f68 <__assert_fail@plt+0x1714>
   12e78:	mov	r6, #3
   12e7c:	b	12ef4 <__assert_fail@plt+0x16a0>
   12e80:	mov	r0, #0
   12e84:	bl	1626c <__assert_fail@plt+0x4a18>
   12e88:	movw	r3, #504	; 0x1f8
   12e8c:	movt	r3, #3
   12e90:	str	r0, [r3, #24]
   12e94:	cmp	r0, #0
   12e98:	beq	12eb0 <__assert_fail@plt+0x165c>
   12e9c:	movw	r3, #504	; 0x1f8
   12ea0:	movt	r3, #3
   12ea4:	mov	r2, #1
   12ea8:	strb	r2, [r3, #21]
   12eac:	b	12e48 <__assert_fail@plt+0x15f4>
   12eb0:	bl	116b0 <__errno_location@plt>
   12eb4:	ldr	r4, [r0]
   12eb8:	mov	r2, #5
   12ebc:	movw	r1, #56876	; 0xde2c
   12ec0:	movt	r1, #1
   12ec4:	mov	r0, #0
   12ec8:	bl	114e8 <dcgettext@plt>
   12ecc:	mov	r3, r0
   12ed0:	movw	r2, #60652	; 0xecec
   12ed4:	movt	r2, #1
   12ed8:	mov	r1, r4
   12edc:	mov	r0, #0
   12ee0:	bl	115a8 <error@plt>
   12ee4:	b	12e9c <__assert_fail@plt+0x1648>
   12ee8:	ldr	r4, [r4, #28]
   12eec:	cmp	r4, #0
   12ef0:	beq	12f68 <__assert_fail@plt+0x1714>
   12ef4:	ldrb	r3, [r4, #24]
   12ef8:	tst	r3, #1
   12efc:	beq	12ee8 <__assert_fail@plt+0x1694>
   12f00:	ldr	r7, [r4]
   12f04:	ldrb	r3, [r7]
   12f08:	cmp	r3, #47	; 0x2f
   12f0c:	bne	12ee8 <__assert_fail@plt+0x1694>
   12f10:	mov	r1, r5
   12f14:	ldr	r0, [r4, #4]
   12f18:	bl	11464 <strcmp@plt>
   12f1c:	cmp	r0, #0
   12f20:	bne	12ee8 <__assert_fail@plt+0x1694>
   12f24:	mov	r2, sp
   12f28:	mov	r1, r7
   12f2c:	mov	r0, r6
   12f30:	bl	11800 <__xstat64@plt>
   12f34:	cmp	r0, #0
   12f38:	bne	12ee8 <__assert_fail@plt+0x1694>
   12f3c:	ldrd	r0, [sp, #200]	; 0xc8
   12f40:	ldrd	r2, [sp, #96]	; 0x60
   12f44:	cmp	r1, r3
   12f48:	cmpeq	r0, r2
   12f4c:	bne	12ee8 <__assert_fail@plt+0x1694>
   12f50:	ldrd	r0, [sp, #104]	; 0x68
   12f54:	ldrd	r2, [sp]
   12f58:	cmp	r1, r3
   12f5c:	cmpeq	r0, r2
   12f60:	bne	12ee8 <__assert_fail@plt+0x1694>
   12f64:	ldr	r4, [r4]
   12f68:	mov	r0, r4
   12f6c:	add	sp, sp, #212	; 0xd4
   12f70:	ldrd	r4, [sp]
   12f74:	ldrd	r6, [sp, #8]
   12f78:	add	sp, sp, #16
   12f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f80:	str	r4, [sp, #-8]!
   12f84:	str	lr, [sp, #4]
   12f88:	sub	sp, sp, #88	; 0x58
   12f8c:	add	r3, sp, #8
   12f90:	stm	r3, {r0, r1}
   12f94:	movw	r3, #504	; 0x1f8
   12f98:	movt	r3, #3
   12f9c:	ldr	r3, [r3, #28]
   12fa0:	cmp	r3, #0
   12fa4:	beq	1300c <__assert_fail@plt+0x17b8>
   12fa8:	ldr	r4, [sp, #12]
   12fac:	movw	r3, #504	; 0x1f8
   12fb0:	movt	r3, #3
   12fb4:	add	r2, sp, #44	; 0x2c
   12fb8:	add	r1, sp, #8
   12fbc:	ldr	r0, [r3, #28]
   12fc0:	bl	1af40 <__assert_fail@plt+0x96ec>
   12fc4:	cmp	r0, #0
   12fc8:	beq	1302c <__assert_fail@plt+0x17d8>
   12fcc:	movw	r0, #504	; 0x1f8
   12fd0:	movt	r0, #3
   12fd4:	str	r4, [sp, #4]
   12fd8:	ldr	r3, [r0, #28]
   12fdc:	str	r3, [sp]
   12fe0:	add	r3, sp, #44	; 0x2c
   12fe4:	movw	r2, #56924	; 0xde5c
   12fe8:	movt	r2, #1
   12fec:	mov	r1, #61	; 0x3d
   12ff0:	add	r0, r0, #32
   12ff4:	bl	18684 <__assert_fail@plt+0x6e30>
   12ff8:	ldr	r0, [pc, #96]	; 13060 <__assert_fail@plt+0x180c>
   12ffc:	add	sp, sp, #88	; 0x58
   13000:	ldr	r4, [sp]
   13004:	add	sp, sp, #4
   13008:	pop	{pc}		; (ldr pc, [sp], #4)
   1300c:	movw	r0, #56920	; 0xde58
   13010:	movt	r0, #1
   13014:	bl	115cc <getenv@plt>
   13018:	bl	1abdc <__assert_fail@plt+0x9388>
   1301c:	movw	r3, #504	; 0x1f8
   13020:	movt	r3, #3
   13024:	str	r0, [r3, #28]
   13028:	b	12fa8 <__assert_fail@plt+0x1754>
   1302c:	add	r2, sp, #20
   13030:	ldr	r0, [sp, #8]
   13034:	asr	r1, r0, #31
   13038:	bl	1603c <__assert_fail@plt+0x47e8>
   1303c:	str	r4, [sp, #4]
   13040:	str	r0, [sp]
   13044:	movw	r3, #56948	; 0xde74
   13048:	movt	r3, #1
   1304c:	mov	r2, #61	; 0x3d
   13050:	mov	r1, #1
   13054:	ldr	r0, [pc, #4]	; 13060 <__assert_fail@plt+0x180c>
   13058:	bl	116bc <__sprintf_chk@plt>
   1305c:	b	12ff8 <__assert_fail@plt+0x17a4>
   13060:	andeq	r0, r3, r8, lsl r2
   13064:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13068:	strd	r6, [sp, #8]
   1306c:	strd	r8, [sp, #16]
   13070:	str	sl, [sp, #24]
   13074:	str	lr, [sp, #28]
   13078:	sub	sp, sp, #24
   1307c:	mov	r6, r0
   13080:	mov	r4, r1
   13084:	add	r1, sp, #24
   13088:	stmdb	r1, {r2, r3}
   1308c:	ldr	r5, [sp, #16]
   13090:	ldr	r7, [sp, #20]
   13094:	mov	r2, r4
   13098:	mov	r1, #46	; 0x2e
   1309c:	bl	11710 <memchr@plt>
   130a0:	subs	r8, r0, #0
   130a4:	beq	1334c <__assert_fail@plt+0x1af8>
   130a8:	sub	r9, r8, r6
   130ac:	mov	r3, #0
   130b0:	strb	r3, [r6, r4]
   130b4:	ldrb	r3, [r8, #1]
   130b8:	sub	r3, r3, #48	; 0x30
   130bc:	cmp	r3, #9
   130c0:	bls	131a8 <__assert_fail@plt+0x1954>
   130c4:	ldrb	r3, [r8, #-1]
   130c8:	sub	r3, r3, #48	; 0x30
   130cc:	cmp	r3, #9
   130d0:	movhi	r4, #9
   130d4:	movhi	r8, #0
   130d8:	movhi	r3, #1
   130dc:	bhi	131f8 <__assert_fail@plt+0x19a4>
   130e0:	mov	r4, #9
   130e4:	mov	r2, r8
   130e8:	mov	r3, #0
   130ec:	strb	r3, [r2], #-1
   130f0:	mov	sl, r2
   130f4:	ldrb	r3, [r2, #-1]!
   130f8:	sub	r3, r3, #48	; 0x30
   130fc:	cmp	r3, #9
   13100:	bls	130f0 <__assert_fail@plt+0x189c>
   13104:	mov	r2, #10
   13108:	mov	r1, #0
   1310c:	mov	r0, sl
   13110:	bl	11470 <strtol@plt>
   13114:	mov	r8, r0
   13118:	cmp	r0, #1
   1311c:	ble	131d4 <__assert_fail@plt+0x1980>
   13120:	ldrb	r3, [sl]
   13124:	cmp	r3, #48	; 0x30
   13128:	addeq	sl, sl, #1
   1312c:	sub	r9, sl, r6
   13130:	movw	r3, #504	; 0x1f8
   13134:	movt	r3, #3
   13138:	ldr	r3, [r3, #96]	; 0x60
   1313c:	cmp	r3, r0
   13140:	bcs	131d4 <__assert_fail@plt+0x1980>
   13144:	sub	r3, r0, r3
   13148:	cmp	r3, #1
   1314c:	ble	131d4 <__assert_fail@plt+0x1980>
   13150:	sub	r1, r3, r4
   13154:	cmp	r1, #1
   13158:	ble	131d4 <__assert_fail@plt+0x1980>
   1315c:	cmp	r6, sl
   13160:	bcs	132b4 <__assert_fail@plt+0x1a60>
   13164:	sub	r3, r6, #1
   13168:	sub	sl, sl, #1
   1316c:	mov	r0, r6
   13170:	mov	ip, #0
   13174:	mov	lr, #1
   13178:	ldrb	r2, [r3, #1]!
   1317c:	cmp	r2, #45	; 0x2d
   13180:	strbne	r2, [r0], #1
   13184:	moveq	ip, lr
   13188:	cmp	r3, sl
   1318c:	bne	13178 <__assert_fail@plt+0x1924>
   13190:	sub	r9, r0, r6
   13194:	cmp	ip, #0
   13198:	movne	r0, #0
   1319c:	beq	132bc <__assert_fail@plt+0x1a68>
   131a0:	add	r9, r0, r9
   131a4:	b	131d4 <__assert_fail@plt+0x1980>
   131a8:	mov	r2, #10
   131ac:	mov	r1, #0
   131b0:	add	r0, r8, #1
   131b4:	bl	11470 <strtol@plt>
   131b8:	subs	r4, r0, #0
   131bc:	beq	13348 <__assert_fail@plt+0x1af4>
   131c0:	ldrb	r3, [r8, #-1]
   131c4:	sub	r3, r3, #48	; 0x30
   131c8:	cmp	r3, #9
   131cc:	movhi	r8, #0
   131d0:	bls	130e4 <__assert_fail@plt+0x1890>
   131d4:	cmp	r4, #8
   131d8:	bgt	132d8 <__assert_fail@plt+0x1a84>
   131dc:	mov	r2, r4
   131e0:	mov	r3, #1
   131e4:	add	r3, r3, r3, lsl #2
   131e8:	lsl	r3, r3, #1
   131ec:	add	r2, r2, #1
   131f0:	cmp	r2, #8
   131f4:	ble	131e4 <__assert_fail@plt+0x1990>
   131f8:	sdiv	sl, r7, r3
   131fc:	adds	r2, r7, #0
   13200:	movne	r2, #1
   13204:	ands	r2, r2, r5, lsr #31
   13208:	bne	132e0 <__assert_fail@plt+0x1a8c>
   1320c:	mov	r2, r5
   13210:	asr	r3, r5, #31
   13214:	mov	r1, r9
   13218:	mov	r0, r6
   1321c:	bl	11ca4 <__assert_fail@plt+0x450>
   13220:	cmp	r4, #0
   13224:	beq	13298 <__assert_fail@plt+0x1a44>
   13228:	cmp	r4, #9
   1322c:	movlt	r3, r4
   13230:	movge	r3, #9
   13234:	sub	r4, r4, r3
   13238:	bic	r0, r0, r0, asr #31
   1323c:	cmp	r0, r8
   13240:	movge	r2, #0
   13244:	bge	13268 <__assert_fail@plt+0x1a14>
   13248:	sub	r0, r8, r0
   1324c:	movw	r2, #504	; 0x1f8
   13250:	movt	r2, #3
   13254:	ldr	r2, [r2, #96]	; 0x60
   13258:	cmp	r0, r2
   1325c:	addhi	r2, r3, r2
   13260:	subhi	r2, r0, r2
   13264:	movls	r2, #0
   13268:	movw	r1, #504	; 0x1f8
   1326c:	movt	r1, #3
   13270:	mov	r0, #0
   13274:	str	r0, [sp, #12]
   13278:	str	r4, [sp, #8]
   1327c:	str	r2, [sp, #4]
   13280:	str	sl, [sp]
   13284:	ldr	r2, [r1, #100]	; 0x64
   13288:	movw	r1, #56964	; 0xde84
   1328c:	movt	r1, #1
   13290:	mov	r0, #1
   13294:	bl	116ec <__printf_chk@plt>
   13298:	add	sp, sp, #24
   1329c:	ldrd	r4, [sp]
   132a0:	ldrd	r6, [sp, #8]
   132a4:	ldrd	r8, [sp, #16]
   132a8:	ldr	sl, [sp, #24]
   132ac:	add	sp, sp, #28
   132b0:	pop	{pc}		; (ldr pc, [sp], #4)
   132b4:	mov	r0, r6
   132b8:	mov	r9, #0
   132bc:	str	r1, [sp]
   132c0:	movw	r3, #56956	; 0xde7c
   132c4:	movt	r3, #1
   132c8:	mvn	r2, #0
   132cc:	mov	r1, #1
   132d0:	bl	116bc <__sprintf_chk@plt>
   132d4:	b	131a0 <__assert_fail@plt+0x194c>
   132d8:	mov	r3, #1
   132dc:	b	131f8 <__assert_fail@plt+0x19a4>
   132e0:	mov	r2, #51712	; 0xca00
   132e4:	movt	r2, #15258	; 0x3b9a
   132e8:	sdiv	r2, r2, r3
   132ec:	sub	sl, r2, sl
   132f0:	sdiv	r2, r7, r3
   132f4:	mls	r3, r3, r2, r7
   132f8:	cmp	r3, #0
   132fc:	subne	sl, sl, #1
   13300:	cmp	sl, #0
   13304:	addne	r5, r5, #1
   13308:	cmp	r5, #0
   1330c:	bne	1320c <__assert_fail@plt+0x19b8>
   13310:	movw	r3, #56960	; 0xde80
   13314:	movt	r3, #1
   13318:	movw	r2, #55752	; 0xd9c8
   1331c:	movt	r2, #1
   13320:	mov	r1, r9
   13324:	mov	r0, r6
   13328:	bl	11af0 <__assert_fail@plt+0x29c>
   1332c:	mov	r2, #0
   13330:	mov	r3, #0
   13334:	movt	r3, #49104	; 0xbfd0
   13338:	mov	r1, r6
   1333c:	mov	r0, #1
   13340:	bl	116ec <__printf_chk@plt>
   13344:	b	13220 <__assert_fail@plt+0x19cc>
   13348:	mov	r4, r9
   1334c:	mov	r9, r4
   13350:	mov	r8, #0
   13354:	mov	r4, r8
   13358:	b	131dc <__assert_fail@plt+0x1988>
   1335c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13360:	strd	r6, [sp, #8]
   13364:	strd	r8, [sp, #16]
   13368:	str	lr, [sp, #24]
   1336c:	sub	sp, sp, #76	; 0x4c
   13370:	mov	r5, r0
   13374:	mov	r8, r1
   13378:	ldr	r1, [sp, #112]	; 0x70
   1337c:	ldr	r9, [r1]
   13380:	ldrd	r6, [r1, #4]
   13384:	strd	r6, [sp, #8]
   13388:	ldr	r0, [r1, #4]
   1338c:	ldr	r1, [r1, #8]
   13390:	sub	r3, r3, #65	; 0x41
   13394:	cmp	r3, #57	; 0x39
   13398:	ldrls	pc, [pc, r3, lsl #2]
   1339c:	b	13c54 <__assert_fail@plt+0x2400>
   133a0:	andeq	r3, r1, r4, lsl #13
   133a4:			; <UNDEFINED> instruction: 0x000139b0
   133a8:	andeq	r3, r1, r4, lsl #23
   133ac:	andeq	r3, r1, r4, lsl r6
   133b0:	andeq	r3, r1, r4, asr ip
   133b4:	ldrdeq	r3, [r1], -r4
   133b8:	andeq	r3, r1, r4, ror r7
   133bc:	andeq	r3, r1, r4, asr ip
   133c0:	andeq	r3, r1, r4, asr ip
   133c4:	andeq	r3, r1, r4, asr ip
   133c8:	andeq	r3, r1, r4, asr ip
   133cc:	andeq	r3, r1, r4, asr ip
   133d0:	andeq	r3, r1, r4, asr ip
   133d4:			; <UNDEFINED> instruction: 0x000134b8
   133d8:	andeq	r3, r1, r4, asr ip
   133dc:	andeq	r3, r1, r4, asr ip
   133e0:	andeq	r3, r1, r4, asr ip
   133e4:	andeq	r3, r1, r4, lsr r9
   133e8:	andeq	r3, r1, r4, asr ip
   133ec:	andeq	r3, r1, ip, ror r9
   133f0:	andeq	r3, r1, ip, lsr #14
   133f4:	andeq	r3, r1, r4, asr ip
   133f8:	andeq	r3, r1, ip, asr sl
   133fc:	andeq	r3, r1, r0, asr #21
   13400:	andeq	r3, r1, r0, lsl fp
   13404:	andeq	r3, r1, r0, ror #22
   13408:	andeq	r3, r1, r4, asr ip
   1340c:	andeq	r3, r1, r4, asr ip
   13410:	andeq	r3, r1, r4, asr ip
   13414:	andeq	r3, r1, r4, asr ip
   13418:	andeq	r3, r1, r4, asr ip
   1341c:	andeq	r3, r1, r4, asr ip
   13420:	andeq	r3, r1, r4, asr #12
   13424:	andeq	r3, r1, ip, asr #19
   13428:	andeq	r3, r1, r4, asr ip
   1342c:	andeq	r3, r1, r8, lsl #11
   13430:	andeq	r3, r1, r4, asr ip
   13434:			; <UNDEFINED> instruction: 0x000136b8
   13438:	andeq	r3, r1, r8, asr r7
   1343c:	strdeq	r3, [r1], -r4
   13440:	andeq	r3, r1, ip, lsr #12
   13444:	andeq	r3, r1, r4, asr ip
   13448:	andeq	r3, r1, r4, asr ip
   1344c:	andeq	r3, r1, r4, asr ip
   13450:	andeq	r3, r1, r0, lsr #15
   13454:	andeq	r3, r1, r8, lsl #9
   13458:	andeq	r3, r1, r4, ror #19
   1345c:	andeq	r3, r1, r4, asr ip
   13460:	andeq	r3, r1, r4, asr ip
   13464:	andeq	r3, r1, r8, lsr #17
   13468:	muleq	r1, r0, r8
   1346c:	andeq	r3, r1, ip, asr #18
   13470:	andeq	r3, r1, r0, lsl r7
   13474:	andeq	r3, r1, r4, asr ip
   13478:	andeq	r3, r1, ip, lsl #20
   1347c:	muleq	r1, r4, sl
   13480:	andeq	r3, r1, r4, ror #21
   13484:	andeq	r3, r1, r4, lsr fp
   13488:	ldr	r2, [sp, #108]	; 0x6c
   1348c:	mov	r1, r8
   13490:	mov	r0, r5
   13494:	bl	11c0c <__assert_fail@plt+0x3b8>
   13498:	mov	r4, #0
   1349c:	mov	r0, r4
   134a0:	add	sp, sp, #76	; 0x4c
   134a4:	ldrd	r4, [sp]
   134a8:	ldrd	r6, [sp, #8]
   134ac:	ldrd	r8, [sp, #16]
   134b0:	add	sp, sp, #24
   134b4:	pop	{pc}		; (ldr pc, [sp], #4)
   134b8:	mov	r0, #0
   134bc:	bl	1a268 <__assert_fail@plt+0x8a14>
   134c0:	ldr	r1, [sp, #108]	; 0x6c
   134c4:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   134c8:	mov	r2, r0
   134cc:	mov	r1, r8
   134d0:	mov	r0, r5
   134d4:	bl	11c0c <__assert_fail@plt+0x3b8>
   134d8:	ldr	r3, [r9, #16]
   134dc:	and	r3, r3, #61440	; 0xf000
   134e0:	cmp	r3, #40960	; 0xa000
   134e4:	movne	r4, #0
   134e8:	bne	1349c <__assert_fail@plt+0x1c48>
   134ec:	ldr	r1, [r9, #48]	; 0x30
   134f0:	ldr	r0, [sp, #108]	; 0x6c
   134f4:	bl	1554c <__assert_fail@plt+0x3cf8>
   134f8:	subs	r4, r0, #0
   134fc:	beq	13540 <__assert_fail@plt+0x1cec>
   13500:	movw	r1, #57024	; 0xdec0
   13504:	movt	r1, #1
   13508:	mov	r0, #1
   1350c:	bl	116ec <__printf_chk@plt>
   13510:	mov	r0, #0
   13514:	bl	1a268 <__assert_fail@plt+0x8a14>
   13518:	mov	r1, r4
   1351c:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   13520:	mov	r2, r0
   13524:	mov	r1, r8
   13528:	mov	r0, r5
   1352c:	bl	11c0c <__assert_fail@plt+0x3b8>
   13530:	mov	r0, r4
   13534:	bl	15fdc <__assert_fail@plt+0x4788>
   13538:	mov	r4, #0
   1353c:	b	1349c <__assert_fail@plt+0x1c48>
   13540:	bl	116b0 <__errno_location@plt>
   13544:	ldr	r4, [r0]
   13548:	mov	r2, #5
   1354c:	movw	r1, #56992	; 0xdea0
   13550:	movt	r1, #1
   13554:	mov	r0, #0
   13558:	bl	114e8 <dcgettext@plt>
   1355c:	mov	r5, r0
   13560:	ldr	r1, [sp, #108]	; 0x6c
   13564:	mov	r0, #4
   13568:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   1356c:	mov	r3, r0
   13570:	mov	r2, r5
   13574:	mov	r1, r4
   13578:	mov	r0, #0
   1357c:	bl	115a8 <error@plt>
   13580:	mov	r4, #1
   13584:	b	1349c <__assert_fail@plt+0x1c48>
   13588:	cmp	r2, #72	; 0x48
   1358c:	beq	135b0 <__assert_fail@plt+0x1d5c>
   13590:	cmp	r2, #76	; 0x4c
   13594:	beq	135e0 <__assert_fail@plt+0x1d8c>
   13598:	ldrd	r2, [r9]
   1359c:	mov	r1, r8
   135a0:	mov	r0, r5
   135a4:	bl	11c54 <__assert_fail@plt+0x400>
   135a8:	mov	r4, #0
   135ac:	b	1349c <__assert_fail@plt+0x1c48>
   135b0:	ldr	r2, [r9]
   135b4:	ldr	r3, [r9, #4]
   135b8:	ubfx	r2, r2, #8, #12
   135bc:	bic	r3, r3, #4080	; 0xff0
   135c0:	bic	r3, r3, #15
   135c4:	mov	r4, #0
   135c8:	orr	r2, r3, r2
   135cc:	mov	r3, r4
   135d0:	mov	r1, r8
   135d4:	mov	r0, r5
   135d8:	bl	11c54 <__assert_fail@plt+0x400>
   135dc:	b	1349c <__assert_fail@plt+0x1c48>
   135e0:	ldr	r3, [r9]
   135e4:	ldr	r1, [r9, #4]
   135e8:	uxtb	r2, r3
   135ec:	lsr	r3, r3, #12
   135f0:	orr	r3, r3, r1, lsl #20
   135f4:	bic	r3, r3, #255	; 0xff
   135f8:	mov	r4, #0
   135fc:	orr	r2, r3, r2
   13600:	mov	r3, r4
   13604:	mov	r1, r8
   13608:	mov	r0, r5
   1360c:	bl	11c54 <__assert_fail@plt+0x400>
   13610:	b	1349c <__assert_fail@plt+0x1c48>
   13614:	ldrd	r2, [r9]
   13618:	mov	r1, r8
   1361c:	mov	r0, r5
   13620:	bl	11bbc <__assert_fail@plt+0x368>
   13624:	mov	r4, #0
   13628:	b	1349c <__assert_fail@plt+0x1c48>
   1362c:	ldrd	r2, [r9, #96]	; 0x60
   13630:	mov	r1, r8
   13634:	mov	r0, r5
   13638:	bl	11c54 <__assert_fail@plt+0x400>
   1363c:	mov	r4, #0
   13640:	b	1349c <__assert_fail@plt+0x1c48>
   13644:	ldr	r6, [r9, #16]
   13648:	ubfx	r6, r6, #0, #12
   1364c:	mov	r4, #0
   13650:	movw	r3, #57032	; 0xdec8
   13654:	movt	r3, #1
   13658:	movw	r2, #55732	; 0xd9b4
   1365c:	movt	r2, #1
   13660:	mov	r1, r8
   13664:	mov	r0, r5
   13668:	bl	11af0 <__assert_fail@plt+0x29c>
   1366c:	mov	r2, r6
   13670:	mov	r3, r4
   13674:	mov	r1, r5
   13678:	mov	r0, #1
   1367c:	bl	116ec <__printf_chk@plt>
   13680:	b	1349c <__assert_fail@plt+0x1c48>
   13684:	movw	r6, #504	; 0x1f8
   13688:	movt	r6, #3
   1368c:	add	r7, r6, #104	; 0x68
   13690:	mov	r1, r7
   13694:	mov	r0, r9
   13698:	bl	15fc0 <__assert_fail@plt+0x476c>
   1369c:	mov	r4, #0
   136a0:	strb	r4, [r6, #114]	; 0x72
   136a4:	mov	r2, r7
   136a8:	mov	r1, r8
   136ac:	mov	r0, r5
   136b0:	bl	11c0c <__assert_fail@plt+0x3b8>
   136b4:	b	1349c <__assert_fail@plt+0x1c48>
   136b8:	mov	r4, #0
   136bc:	ldr	r2, [r9, #16]
   136c0:	mov	r3, r4
   136c4:	mov	r1, r8
   136c8:	mov	r0, r5
   136cc:	bl	11bbc <__assert_fail@plt+0x368>
   136d0:	b	1349c <__assert_fail@plt+0x1c48>
   136d4:	mov	r0, r9
   136d8:	bl	15d3c <__assert_fail@plt+0x44e8>
   136dc:	mov	r2, r0
   136e0:	mov	r1, r8
   136e4:	mov	r0, r5
   136e8:	bl	11c0c <__assert_fail@plt+0x3b8>
   136ec:	mov	r4, #0
   136f0:	b	1349c <__assert_fail@plt+0x1c48>
   136f4:	mov	r4, #0
   136f8:	ldr	r2, [r9, #20]
   136fc:	mov	r3, r4
   13700:	mov	r1, r8
   13704:	mov	r0, r5
   13708:	bl	11c54 <__assert_fail@plt+0x400>
   1370c:	b	1349c <__assert_fail@plt+0x1c48>
   13710:	mov	r4, #0
   13714:	ldr	r2, [r9, #24]
   13718:	mov	r3, r4
   1371c:	mov	r1, r8
   13720:	mov	r0, r5
   13724:	bl	11c54 <__assert_fail@plt+0x400>
   13728:	b	1349c <__assert_fail@plt+0x1c48>
   1372c:	ldr	r0, [r9, #24]
   13730:	bl	1147c <getpwuid@plt>
   13734:	cmp	r0, #0
   13738:	ldrne	r2, [r0]
   1373c:	movweq	r2, #56980	; 0xde94
   13740:	movteq	r2, #1
   13744:	mov	r1, r8
   13748:	mov	r0, r5
   1374c:	bl	11c0c <__assert_fail@plt+0x3b8>
   13750:	mov	r4, #0
   13754:	b	1349c <__assert_fail@plt+0x1c48>
   13758:	mov	r4, #0
   1375c:	ldr	r2, [r9, #28]
   13760:	mov	r3, r4
   13764:	mov	r1, r8
   13768:	mov	r0, r5
   1376c:	bl	11c54 <__assert_fail@plt+0x400>
   13770:	b	1349c <__assert_fail@plt+0x1c48>
   13774:	ldr	r0, [r9, #28]
   13778:	bl	1183c <getgrgid@plt>
   1377c:	cmp	r0, #0
   13780:	ldrne	r2, [r0]
   13784:	movweq	r2, #56980	; 0xde94
   13788:	movteq	r2, #1
   1378c:	mov	r1, r8
   13790:	mov	r0, r5
   13794:	bl	11c0c <__assert_fail@plt+0x3b8>
   13798:	mov	r4, #0
   1379c:	b	1349c <__assert_fail@plt+0x1c48>
   137a0:	movw	r3, #504	; 0x1f8
   137a4:	movt	r3, #3
   137a8:	ldrb	r3, [r3, #116]	; 0x74
   137ac:	cmp	r3, #0
   137b0:	bne	137c4 <__assert_fail@plt+0x1f70>
   137b4:	ldr	r3, [r9, #16]
   137b8:	and	r3, r3, #61440	; 0xf000
   137bc:	cmp	r3, #40960	; 0xa000
   137c0:	beq	137f8 <__assert_fail@plt+0x1fa4>
   137c4:	ldr	r0, [sp, #108]	; 0x6c
   137c8:	bl	117c4 <canonicalize_file_name@plt>
   137cc:	subs	r4, r0, #0
   137d0:	beq	1383c <__assert_fail@plt+0x1fe8>
   137d4:	mov	r0, r4
   137d8:	bl	12e20 <__assert_fail@plt+0x15cc>
   137dc:	mov	r6, r0
   137e0:	mov	r0, r4
   137e4:	bl	15fdc <__assert_fail@plt+0x4788>
   137e8:	cmp	r6, #0
   137ec:	movne	r4, #0
   137f0:	movne	r7, r4
   137f4:	bne	13820 <__assert_fail@plt+0x1fcc>
   137f8:	mov	r1, r9
   137fc:	ldr	r0, [sp, #108]	; 0x6c
   13800:	bl	15204 <__assert_fail@plt+0x39b0>
   13804:	subs	r7, r0, #0
   13808:	beq	1387c <__assert_fail@plt+0x2028>
   1380c:	mov	r0, r7
   13810:	bl	12e20 <__assert_fail@plt+0x15cc>
   13814:	subs	r6, r0, #0
   13818:	mov	r4, #0
   1381c:	moveq	r6, r7
   13820:	mov	r2, r6
   13824:	mov	r1, r8
   13828:	mov	r0, r5
   1382c:	bl	11c0c <__assert_fail@plt+0x3b8>
   13830:	mov	r0, r7
   13834:	bl	15fdc <__assert_fail@plt+0x4788>
   13838:	b	1349c <__assert_fail@plt+0x1c48>
   1383c:	bl	116b0 <__errno_location@plt>
   13840:	ldr	r4, [r0]
   13844:	mov	r2, #5
   13848:	movw	r1, #57036	; 0xdecc
   1384c:	movt	r1, #1
   13850:	mov	r0, #0
   13854:	bl	114e8 <dcgettext@plt>
   13858:	mov	r6, r0
   1385c:	ldr	r1, [sp, #108]	; 0x6c
   13860:	mov	r0, #4
   13864:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   13868:	mov	r3, r0
   1386c:	mov	r2, r6
   13870:	mov	r1, r4
   13874:	mov	r0, #0
   13878:	bl	115a8 <error@plt>
   1387c:	mov	r4, #1
   13880:	mov	r7, #0
   13884:	movw	r6, #56988	; 0xde9c
   13888:	movt	r6, #1
   1388c:	b	13820 <__assert_fail@plt+0x1fcc>
   13890:	ldrd	r2, [r9, #48]	; 0x30
   13894:	mov	r1, r8
   13898:	mov	r0, r5
   1389c:	bl	11ca4 <__assert_fail@plt+0x450>
   138a0:	mov	r4, #0
   138a4:	b	1349c <__assert_fail@plt+0x1c48>
   138a8:	cmp	r2, #72	; 0x48
   138ac:	beq	138d0 <__assert_fail@plt+0x207c>
   138b0:	cmp	r2, #76	; 0x4c
   138b4:	beq	13900 <__assert_fail@plt+0x20ac>
   138b8:	ldrd	r2, [r9, #32]
   138bc:	mov	r1, r8
   138c0:	mov	r0, r5
   138c4:	bl	11c54 <__assert_fail@plt+0x400>
   138c8:	mov	r4, #0
   138cc:	b	1349c <__assert_fail@plt+0x1c48>
   138d0:	ldr	r2, [r9, #32]
   138d4:	ldr	r3, [r9, #36]	; 0x24
   138d8:	ubfx	r2, r2, #8, #12
   138dc:	bic	r3, r3, #4080	; 0xff0
   138e0:	bic	r3, r3, #15
   138e4:	mov	r4, #0
   138e8:	orr	r2, r3, r2
   138ec:	mov	r3, r4
   138f0:	mov	r1, r8
   138f4:	mov	r0, r5
   138f8:	bl	11c54 <__assert_fail@plt+0x400>
   138fc:	b	1349c <__assert_fail@plt+0x1c48>
   13900:	ldr	r3, [r9, #32]
   13904:	ldr	r1, [r9, #36]	; 0x24
   13908:	uxtb	r2, r3
   1390c:	lsr	r3, r3, #12
   13910:	orr	r3, r3, r1, lsl #20
   13914:	bic	r3, r3, #255	; 0xff
   13918:	mov	r4, #0
   1391c:	orr	r2, r3, r2
   13920:	mov	r3, r4
   13924:	mov	r1, r8
   13928:	mov	r0, r5
   1392c:	bl	11c54 <__assert_fail@plt+0x400>
   13930:	b	1349c <__assert_fail@plt+0x1c48>
   13934:	ldrd	r2, [r9, #32]
   13938:	mov	r1, r8
   1393c:	mov	r0, r5
   13940:	bl	11bbc <__assert_fail@plt+0x368>
   13944:	mov	r4, #0
   13948:	b	1349c <__assert_fail@plt+0x1c48>
   1394c:	ldr	r2, [r9, #32]
   13950:	ldr	r3, [r9, #36]	; 0x24
   13954:	ubfx	r2, r2, #8, #12
   13958:	bic	r3, r3, #4080	; 0xff0
   1395c:	bic	r3, r3, #15
   13960:	mov	r4, #0
   13964:	orr	r2, r3, r2
   13968:	mov	r3, r4
   1396c:	mov	r1, r8
   13970:	mov	r0, r5
   13974:	bl	11bbc <__assert_fail@plt+0x368>
   13978:	b	1349c <__assert_fail@plt+0x1c48>
   1397c:	ldr	r3, [r9, #32]
   13980:	ldr	r1, [r9, #36]	; 0x24
   13984:	uxtb	r2, r3
   13988:	lsr	r3, r3, #12
   1398c:	orr	r3, r3, r1, lsl #20
   13990:	bic	r3, r3, #255	; 0xff
   13994:	mov	r4, #0
   13998:	orr	r2, r3, r2
   1399c:	mov	r3, r4
   139a0:	mov	r1, r8
   139a4:	mov	r0, r5
   139a8:	bl	11bbc <__assert_fail@plt+0x368>
   139ac:	b	1349c <__assert_fail@plt+0x1c48>
   139b0:	mov	r2, #512	; 0x200
   139b4:	mov	r3, #0
   139b8:	mov	r1, r8
   139bc:	mov	r0, r5
   139c0:	bl	11c54 <__assert_fail@plt+0x400>
   139c4:	mov	r4, #0
   139c8:	b	1349c <__assert_fail@plt+0x1c48>
   139cc:	ldrd	r2, [r9, #64]	; 0x40
   139d0:	mov	r1, r8
   139d4:	mov	r0, r5
   139d8:	bl	11c54 <__assert_fail@plt+0x400>
   139dc:	mov	r4, #0
   139e0:	b	1349c <__assert_fail@plt+0x1c48>
   139e4:	ldr	r2, [r9, #56]	; 0x38
   139e8:	sub	r3, r2, #1
   139ec:	cmp	r3, #536870912	; 0x20000000
   139f0:	movcs	r2, #512	; 0x200
   139f4:	asr	r3, r2, #31
   139f8:	mov	r1, r8
   139fc:	mov	r0, r5
   13a00:	bl	11c54 <__assert_fail@plt+0x400>
   13a04:	mov	r4, #0
   13a08:	b	1349c <__assert_fail@plt+0x1c48>
   13a0c:	cmp	r1, #0
   13a10:	blt	13a40 <__assert_fail@plt+0x21ec>
   13a14:	str	r1, [sp, #12]
   13a18:	str	r0, [sp, #8]
   13a1c:	add	r3, sp, #8
   13a20:	ldm	r3, {r0, r1}
   13a24:	bl	12f80 <__assert_fail@plt+0x172c>
   13a28:	mov	r2, r0
   13a2c:	mov	r1, r8
   13a30:	mov	r0, r5
   13a34:	bl	11c0c <__assert_fail@plt+0x3b8>
   13a38:	mov	r4, #0
   13a3c:	b	1349c <__assert_fail@plt+0x1c48>
   13a40:	movw	r2, #55736	; 0xd9b8
   13a44:	movt	r2, #1
   13a48:	mov	r1, r8
   13a4c:	mov	r0, r5
   13a50:	bl	11c0c <__assert_fail@plt+0x3b8>
   13a54:	mov	r4, #0
   13a58:	b	1349c <__assert_fail@plt+0x1c48>
   13a5c:	cmp	r1, #0
   13a60:	strge	r0, [sp, #16]
   13a64:	strge	r1, [sp, #20]
   13a68:	bge	13a78 <__assert_fail@plt+0x2224>
   13a6c:	mov	r3, #0
   13a70:	str	r3, [sp, #16]
   13a74:	str	r3, [sp, #20]
   13a78:	add	r3, sp, #16
   13a7c:	ldm	r3, {r2, r3}
   13a80:	mov	r1, r8
   13a84:	mov	r0, r5
   13a88:	bl	13064 <__assert_fail@plt+0x1810>
   13a8c:	mov	r4, #0
   13a90:	b	1349c <__assert_fail@plt+0x1c48>
   13a94:	add	r1, sp, #24
   13a98:	ldrd	r2, [r9, #72]	; 0x48
   13a9c:	strd	r2, [sp, #24]
   13aa0:	ldm	r1, {r0, r1}
   13aa4:	bl	12f80 <__assert_fail@plt+0x172c>
   13aa8:	mov	r2, r0
   13aac:	mov	r1, r8
   13ab0:	mov	r0, r5
   13ab4:	bl	11c0c <__assert_fail@plt+0x3b8>
   13ab8:	mov	r4, #0
   13abc:	b	1349c <__assert_fail@plt+0x1c48>
   13ac0:	add	r1, sp, #32
   13ac4:	ldrd	r2, [r9, #72]	; 0x48
   13ac8:	strd	r2, [sp, #32]
   13acc:	ldm	r1, {r2, r3}
   13ad0:	mov	r1, r8
   13ad4:	mov	r0, r5
   13ad8:	bl	13064 <__assert_fail@plt+0x1810>
   13adc:	mov	r4, #0
   13ae0:	b	1349c <__assert_fail@plt+0x1c48>
   13ae4:	add	r1, sp, #40	; 0x28
   13ae8:	ldrd	r2, [r9, #80]	; 0x50
   13aec:	strd	r2, [sp, #40]	; 0x28
   13af0:	ldm	r1, {r0, r1}
   13af4:	bl	12f80 <__assert_fail@plt+0x172c>
   13af8:	mov	r2, r0
   13afc:	mov	r1, r8
   13b00:	mov	r0, r5
   13b04:	bl	11c0c <__assert_fail@plt+0x3b8>
   13b08:	mov	r4, #0
   13b0c:	b	1349c <__assert_fail@plt+0x1c48>
   13b10:	add	r1, sp, #48	; 0x30
   13b14:	ldrd	r2, [r9, #80]	; 0x50
   13b18:	strd	r2, [sp, #48]	; 0x30
   13b1c:	ldm	r1, {r2, r3}
   13b20:	mov	r1, r8
   13b24:	mov	r0, r5
   13b28:	bl	13064 <__assert_fail@plt+0x1810>
   13b2c:	mov	r4, #0
   13b30:	b	1349c <__assert_fail@plt+0x1c48>
   13b34:	add	r1, sp, #56	; 0x38
   13b38:	ldrd	r2, [r9, #88]	; 0x58
   13b3c:	strd	r2, [sp, #56]	; 0x38
   13b40:	ldm	r1, {r0, r1}
   13b44:	bl	12f80 <__assert_fail@plt+0x172c>
   13b48:	mov	r2, r0
   13b4c:	mov	r1, r8
   13b50:	mov	r0, r5
   13b54:	bl	11c0c <__assert_fail@plt+0x3b8>
   13b58:	mov	r4, #0
   13b5c:	b	1349c <__assert_fail@plt+0x1c48>
   13b60:	ldrd	r2, [r9, #88]	; 0x58
   13b64:	strd	r2, [sp, #64]	; 0x40
   13b68:	add	r3, sp, #72	; 0x48
   13b6c:	ldmdb	r3, {r2, r3}
   13b70:	mov	r1, r8
   13b74:	mov	r0, r5
   13b78:	bl	13064 <__assert_fail@plt+0x1810>
   13b7c:	mov	r4, #0
   13b80:	b	1349c <__assert_fail@plt+0x1c48>
   13b84:	movw	r3, #504	; 0x1f8
   13b88:	movt	r3, #3
   13b8c:	ldrb	r3, [r3, #116]	; 0x74
   13b90:	cmp	r3, #0
   13b94:	beq	13bf4 <__assert_fail@plt+0x23a0>
   13b98:	add	r1, sp, #4
   13b9c:	ldr	r0, [sp, #108]	; 0x6c
   13ba0:	bl	1ab34 <__assert_fail@plt+0x92e0>
   13ba4:	lsr	r4, r0, #31
   13ba8:	cmp	r4, #0
   13bac:	bne	13c08 <__assert_fail@plt+0x23b4>
   13bb0:	movw	r3, #57060	; 0xdee4
   13bb4:	movt	r3, #1
   13bb8:	ldrh	r3, [r3]
   13bbc:	strh	r3, [r5, r8]
   13bc0:	ldr	r2, [sp, #4]
   13bc4:	movw	r3, #56988	; 0xde9c
   13bc8:	movt	r3, #1
   13bcc:	cmp	r2, #0
   13bd0:	moveq	r2, r3
   13bd4:	mov	r1, r5
   13bd8:	mov	r0, #1
   13bdc:	bl	116ec <__printf_chk@plt>
   13be0:	ldr	r0, [sp, #4]
   13be4:	cmp	r0, #0
   13be8:	beq	1349c <__assert_fail@plt+0x1c48>
   13bec:	bl	117dc <freecon@plt>
   13bf0:	b	1349c <__assert_fail@plt+0x1c48>
   13bf4:	add	r1, sp, #4
   13bf8:	ldr	r0, [sp, #108]	; 0x6c
   13bfc:	bl	1ab58 <__assert_fail@plt+0x9304>
   13c00:	lsr	r4, r0, #31
   13c04:	b	13ba8 <__assert_fail@plt+0x2354>
   13c08:	bl	116b0 <__errno_location@plt>
   13c0c:	ldr	r6, [r0]
   13c10:	mov	r2, #5
   13c14:	movw	r1, #57064	; 0xdee8
   13c18:	movt	r1, #1
   13c1c:	mov	r0, #0
   13c20:	bl	114e8 <dcgettext@plt>
   13c24:	mov	r7, r0
   13c28:	ldr	r1, [sp, #108]	; 0x6c
   13c2c:	mov	r0, #4
   13c30:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   13c34:	mov	r3, r0
   13c38:	mov	r2, r7
   13c3c:	mov	r1, r6
   13c40:	mov	r0, #0
   13c44:	bl	115a8 <error@plt>
   13c48:	mov	r3, #0
   13c4c:	str	r3, [sp, #4]
   13c50:	b	13bb0 <__assert_fail@plt+0x235c>
   13c54:	movw	r3, #492	; 0x1ec
   13c58:	movt	r3, #3
   13c5c:	ldr	r0, [r3]
   13c60:	ldr	r3, [r0, #20]
   13c64:	ldr	r2, [r0, #24]
   13c68:	cmp	r3, r2
   13c6c:	bcs	13c88 <__assert_fail@plt+0x2434>
   13c70:	add	r2, r3, #1
   13c74:	str	r2, [r0, #20]
   13c78:	mov	r2, #63	; 0x3f
   13c7c:	strb	r2, [r3]
   13c80:	mov	r4, #0
   13c84:	b	1349c <__assert_fail@plt+0x1c48>
   13c88:	mov	r1, #63	; 0x3f
   13c8c:	bl	11758 <__overflow@plt>
   13c90:	mov	r4, #0
   13c94:	b	1349c <__assert_fail@plt+0x1c48>
   13c98:	strd	r4, [sp, #-16]!
   13c9c:	str	r6, [sp, #8]
   13ca0:	str	lr, [sp, #12]
   13ca4:	mov	r6, r0
   13ca8:	movw	r5, #54868	; 0xd654
   13cac:	movt	r5, #1
   13cb0:	add	r1, r5, #140	; 0x8c
   13cb4:	add	r0, r0, #1
   13cb8:	bl	11848 <strspn@plt>
   13cbc:	add	r0, r0, #1
   13cc0:	add	r4, r6, r0
   13cc4:	add	r1, r5, #148	; 0x94
   13cc8:	mov	r0, r4
   13ccc:	bl	11848 <strspn@plt>
   13cd0:	add	r5, r4, r0
   13cd4:	ldrb	r3, [r4, r0]
   13cd8:	cmp	r3, #46	; 0x2e
   13cdc:	beq	13cf4 <__assert_fail@plt+0x24a0>
   13ce0:	sub	r0, r5, r6
   13ce4:	ldrd	r4, [sp]
   13ce8:	ldr	r6, [sp, #8]
   13cec:	add	sp, sp, #12
   13cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf4:	ldr	r1, [pc, #16]	; 13d0c <__assert_fail@plt+0x24b8>
   13cf8:	add	r0, r5, #1
   13cfc:	bl	11848 <strspn@plt>
   13d00:	add	r0, r0, #1
   13d04:	add	r5, r5, r0
   13d08:	b	13ce0 <__assert_fail@plt+0x248c>
   13d0c:	andeq	sp, r1, r8, ror #13
   13d10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d14:	strd	r6, [sp, #8]
   13d18:	strd	r8, [sp, #16]
   13d1c:	strd	sl, [sp, #24]
   13d20:	str	lr, [sp, #32]
   13d24:	sub	sp, sp, #36	; 0x24
   13d28:	mov	r4, r0
   13d2c:	str	r1, [sp, #20]
   13d30:	str	r2, [sp, #24]
   13d34:	mov	fp, r3
   13d38:	bl	11674 <strlen@plt>
   13d3c:	add	r0, r0, #4
   13d40:	bl	1b6b8 <__assert_fail@plt+0x9e64>
   13d44:	str	r0, [sp, #16]
   13d48:	ldrb	r1, [r4]
   13d4c:	cmp	r1, #0
   13d50:	beq	142fc <__assert_fail@plt+0x2aa8>
   13d54:	mov	r9, #0
   13d58:	movw	r8, #492	; 0x1ec
   13d5c:	movt	r8, #3
   13d60:	movw	r3, #13148	; 0x335c
   13d64:	movt	r3, #1
   13d68:	str	r3, [sp, #28]
   13d6c:	movw	sl, #504	; 0x1f8
   13d70:	movt	sl, #3
   13d74:	b	13e58 <__assert_fail@plt+0x2604>
   13d78:	mov	r0, r4
   13d7c:	bl	13c98 <__assert_fail@plt+0x2444>
   13d80:	mov	r7, r0
   13d84:	add	r5, r4, r0
   13d88:	ldrb	r6, [r4, r0]
   13d8c:	mov	r2, r0
   13d90:	mov	r1, r4
   13d94:	ldr	r0, [sp, #16]
   13d98:	bl	114b8 <memcpy@plt>
   13d9c:	cmp	r6, #37	; 0x25
   13da0:	beq	13db8 <__assert_fail@plt+0x2564>
   13da4:	bhi	13df0 <__assert_fail@plt+0x259c>
   13da8:	cmp	r6, #0
   13dac:	movne	r2, #0
   13db0:	bne	13e18 <__assert_fail@plt+0x25c4>
   13db4:	sub	r5, r5, #1
   13db8:	cmp	r7, #1
   13dbc:	bhi	13e98 <__assert_fail@plt+0x2644>
   13dc0:	ldr	r0, [r8]
   13dc4:	ldr	r3, [r0, #20]
   13dc8:	ldr	r2, [r0, #24]
   13dcc:	cmp	r3, r2
   13dd0:	addcc	r2, r3, #1
   13dd4:	strcc	r2, [r0, #20]
   13dd8:	movcc	r2, #37	; 0x25
   13ddc:	strbcc	r2, [r3]
   13de0:	bcc	13e48 <__assert_fail@plt+0x25f4>
   13de4:	mov	r1, #37	; 0x25
   13de8:	bl	11758 <__overflow@plt>
   13dec:	b	13e48 <__assert_fail@plt+0x25f4>
   13df0:	cmp	r6, #72	; 0x48
   13df4:	beq	13e04 <__assert_fail@plt+0x25b0>
   13df8:	cmp	r6, #76	; 0x4c
   13dfc:	movne	r2, #0
   13e00:	bne	13e18 <__assert_fail@plt+0x25c4>
   13e04:	ldrb	r3, [r5, #1]
   13e08:	ldr	r2, [sp, #28]
   13e0c:	cmp	fp, r2
   13e10:	movne	r2, #0
   13e14:	beq	13ee0 <__assert_fail@plt+0x268c>
   13e18:	ldr	r3, [sp, #72]	; 0x48
   13e1c:	str	r3, [sp, #8]
   13e20:	ldr	r3, [sp, #24]
   13e24:	str	r3, [sp, #4]
   13e28:	ldr	r3, [sp, #20]
   13e2c:	str	r3, [sp]
   13e30:	mov	r3, r6
   13e34:	mov	r1, r7
   13e38:	ldr	r0, [sp, #16]
   13e3c:	blx	fp
   13e40:	orr	r9, r0, r9
   13e44:	uxtb	r9, r9
   13e48:	add	r4, r5, #1
   13e4c:	ldrb	r1, [r5, #1]
   13e50:	cmp	r1, #0
   13e54:	beq	14300 <__assert_fail@plt+0x2aac>
   13e58:	cmp	r1, #37	; 0x25
   13e5c:	beq	13d78 <__assert_fail@plt+0x2524>
   13e60:	cmp	r1, #92	; 0x5c
   13e64:	beq	13f00 <__assert_fail@plt+0x26ac>
   13e68:	ldr	r0, [r8]
   13e6c:	ldr	r3, [r0, #20]
   13e70:	ldr	r2, [r0, #24]
   13e74:	cmp	r3, r2
   13e78:	addcc	r2, r3, #1
   13e7c:	strcc	r2, [r0, #20]
   13e80:	strbcc	r1, [r3]
   13e84:	movcc	r5, r4
   13e88:	bcc	13e48 <__assert_fail@plt+0x25f4>
   13e8c:	bl	11758 <__overflow@plt>
   13e90:	mov	r5, r4
   13e94:	b	13e48 <__assert_fail@plt+0x25f4>
   13e98:	ldr	r8, [sp, #16]
   13e9c:	mov	r3, r8
   13ea0:	strb	r6, [r3, r7]!
   13ea4:	mov	r4, #0
   13ea8:	strb	r4, [r3, #1]
   13eac:	mov	r2, #5
   13eb0:	movw	r1, #57104	; 0xdf10
   13eb4:	movt	r1, #1
   13eb8:	mov	r0, r4
   13ebc:	bl	114e8 <dcgettext@plt>
   13ec0:	mov	r5, r0
   13ec4:	mov	r0, r8
   13ec8:	bl	1a9c4 <__assert_fail@plt+0x9170>
   13ecc:	mov	r3, r0
   13ed0:	mov	r2, r5
   13ed4:	mov	r1, r4
   13ed8:	mov	r0, #1
   13edc:	bl	115a8 <error@plt>
   13ee0:	cmp	r3, #114	; 0x72
   13ee4:	cmpne	r3, #100	; 0x64
   13ee8:	movne	r2, #0
   13eec:	bne	13e18 <__assert_fail@plt+0x25c4>
   13ef0:	add	r5, r5, #1
   13ef4:	mov	r2, r6
   13ef8:	mov	r6, r3
   13efc:	b	13e18 <__assert_fail@plt+0x25c4>
   13f00:	ldrb	r3, [sl, #117]	; 0x75
   13f04:	cmp	r3, #0
   13f08:	bne	13f48 <__assert_fail@plt+0x26f4>
   13f0c:	ldr	r0, [r8]
   13f10:	ldr	r3, [r0, #20]
   13f14:	ldr	r2, [r0, #24]
   13f18:	cmp	r3, r2
   13f1c:	bcs	13f38 <__assert_fail@plt+0x26e4>
   13f20:	add	r2, r3, #1
   13f24:	str	r2, [r0, #20]
   13f28:	mov	r2, #92	; 0x5c
   13f2c:	strb	r2, [r3]
   13f30:	mov	r5, r4
   13f34:	b	13e48 <__assert_fail@plt+0x25f4>
   13f38:	mov	r1, #92	; 0x5c
   13f3c:	bl	11758 <__overflow@plt>
   13f40:	mov	r5, r4
   13f44:	b	13e48 <__assert_fail@plt+0x25f4>
   13f48:	add	r5, r4, #1
   13f4c:	ldrb	r6, [r4, #1]
   13f50:	sub	r3, r6, #48	; 0x30
   13f54:	uxtb	r3, r3
   13f58:	cmp	r3, #7
   13f5c:	bls	13fc0 <__assert_fail@plt+0x276c>
   13f60:	cmp	r6, #120	; 0x78
   13f64:	beq	14038 <__assert_fail@plt+0x27e4>
   13f68:	cmp	r6, #0
   13f6c:	bne	14104 <__assert_fail@plt+0x28b0>
   13f70:	mov	r2, #5
   13f74:	movw	r1, #57128	; 0xdf28
   13f78:	movt	r1, #1
   13f7c:	mov	r0, #0
   13f80:	bl	114e8 <dcgettext@plt>
   13f84:	mov	r2, r0
   13f88:	mov	r1, #0
   13f8c:	mov	r0, r1
   13f90:	bl	115a8 <error@plt>
   13f94:	ldr	r0, [r8]
   13f98:	ldr	r3, [r0, #20]
   13f9c:	ldr	r2, [r0, #24]
   13fa0:	cmp	r3, r2
   13fa4:	bcs	140f4 <__assert_fail@plt+0x28a0>
   13fa8:	add	r2, r3, #1
   13fac:	str	r2, [r0, #20]
   13fb0:	mov	r2, #92	; 0x5c
   13fb4:	strb	r2, [r3]
   13fb8:	mov	r5, r4
   13fbc:	b	13e48 <__assert_fail@plt+0x25f4>
   13fc0:	sub	r6, r6, #48	; 0x30
   13fc4:	ldrb	r3, [r4, #2]
   13fc8:	sub	r2, r3, #48	; 0x30
   13fcc:	uxtb	r2, r2
   13fd0:	cmp	r2, #7
   13fd4:	addhi	r5, r4, #2
   13fd8:	bhi	14004 <__assert_fail@plt+0x27b0>
   13fdc:	sub	r3, r3, #48	; 0x30
   13fe0:	add	r6, r3, r6, lsl #3
   13fe4:	add	r5, r4, #3
   13fe8:	ldrb	r3, [r4, #3]
   13fec:	sub	r2, r3, #48	; 0x30
   13ff0:	uxtb	r2, r2
   13ff4:	cmp	r2, #7
   13ff8:	subls	r3, r3, #48	; 0x30
   13ffc:	addls	r6, r3, r6, lsl #3
   14000:	addls	r5, r4, #4
   14004:	ldr	r0, [r8]
   14008:	ldr	r3, [r0, #20]
   1400c:	ldr	r2, [r0, #24]
   14010:	cmp	r3, r2
   14014:	addcc	r2, r3, #1
   14018:	strcc	r2, [r0, #20]
   1401c:	strbcc	r6, [r3]
   14020:	bcs	1402c <__assert_fail@plt+0x27d8>
   14024:	sub	r5, r5, #1
   14028:	b	13e48 <__assert_fail@plt+0x25f4>
   1402c:	uxtb	r1, r6
   14030:	bl	11758 <__overflow@plt>
   14034:	b	14024 <__assert_fail@plt+0x27d0>
   14038:	bl	11644 <__ctype_b_loc@plt>
   1403c:	ldr	r3, [r0]
   14040:	ldrb	r1, [r4, #2]
   14044:	lsl	r2, r1, #1
   14048:	ldrh	r2, [r3, r2]
   1404c:	tst	r2, #4096	; 0x1000
   14050:	beq	142d0 <__assert_fail@plt+0x2a7c>
   14054:	sub	r2, r1, #97	; 0x61
   14058:	uxtb	r2, r2
   1405c:	cmp	r2, #5
   14060:	subls	r1, r1, #87	; 0x57
   14064:	bls	1407c <__assert_fail@plt+0x2828>
   14068:	sub	r2, r1, #65	; 0x41
   1406c:	uxtb	r2, r2
   14070:	cmp	r2, #5
   14074:	subls	r1, r1, #55	; 0x37
   14078:	subhi	r1, r1, #48	; 0x30
   1407c:	ldrb	r2, [r4, #3]
   14080:	lsl	r0, r2, #1
   14084:	ldrh	r3, [r3, r0]
   14088:	tst	r3, #4096	; 0x1000
   1408c:	addeq	r5, r4, #2
   14090:	beq	140c8 <__assert_fail@plt+0x2874>
   14094:	add	r5, r4, #3
   14098:	lsl	r1, r1, #4
   1409c:	sub	r3, r2, #97	; 0x61
   140a0:	uxtb	r3, r3
   140a4:	cmp	r3, #5
   140a8:	subls	r2, r2, #87	; 0x57
   140ac:	bls	140c4 <__assert_fail@plt+0x2870>
   140b0:	sub	r3, r2, #65	; 0x41
   140b4:	uxtb	r3, r3
   140b8:	cmp	r3, #5
   140bc:	subls	r2, r2, #55	; 0x37
   140c0:	subhi	r2, r2, #48	; 0x30
   140c4:	add	r1, r1, r2
   140c8:	ldr	r0, [r8]
   140cc:	ldr	r3, [r0, #20]
   140d0:	ldr	r2, [r0, #24]
   140d4:	cmp	r3, r2
   140d8:	addcc	r2, r3, #1
   140dc:	strcc	r2, [r0, #20]
   140e0:	strbcc	r1, [r3]
   140e4:	bcc	13e48 <__assert_fail@plt+0x25f4>
   140e8:	uxtb	r1, r1
   140ec:	bl	11758 <__overflow@plt>
   140f0:	b	13e48 <__assert_fail@plt+0x25f4>
   140f4:	mov	r1, #92	; 0x5c
   140f8:	bl	11758 <__overflow@plt>
   140fc:	mov	r5, r4
   14100:	b	13e48 <__assert_fail@plt+0x25f4>
   14104:	sub	r3, r6, #34	; 0x22
   14108:	cmp	r3, #84	; 0x54
   1410c:	ldrls	pc, [pc, r3, lsl #2]
   14110:	b	142d0 <__assert_fail@plt+0x2a7c>
   14114:	andeq	r4, r1, r4, ror r2
   14118:	ldrdeq	r4, [r1], -r0
   1411c:	ldrdeq	r4, [r1], -r0
   14120:	ldrdeq	r4, [r1], -r0
   14124:	ldrdeq	r4, [r1], -r0
   14128:	ldrdeq	r4, [r1], -r0
   1412c:	ldrdeq	r4, [r1], -r0
   14130:	ldrdeq	r4, [r1], -r0
   14134:	ldrdeq	r4, [r1], -r0
   14138:	ldrdeq	r4, [r1], -r0
   1413c:	ldrdeq	r4, [r1], -r0
   14140:	ldrdeq	r4, [r1], -r0
   14144:	ldrdeq	r4, [r1], -r0
   14148:	ldrdeq	r4, [r1], -r0
   1414c:	ldrdeq	r4, [r1], -r0
   14150:	ldrdeq	r4, [r1], -r0
   14154:	ldrdeq	r4, [r1], -r0
   14158:	ldrdeq	r4, [r1], -r0
   1415c:	ldrdeq	r4, [r1], -r0
   14160:	ldrdeq	r4, [r1], -r0
   14164:	ldrdeq	r4, [r1], -r0
   14168:	ldrdeq	r4, [r1], -r0
   1416c:	ldrdeq	r4, [r1], -r0
   14170:	ldrdeq	r4, [r1], -r0
   14174:	ldrdeq	r4, [r1], -r0
   14178:	ldrdeq	r4, [r1], -r0
   1417c:	ldrdeq	r4, [r1], -r0
   14180:	ldrdeq	r4, [r1], -r0
   14184:	ldrdeq	r4, [r1], -r0
   14188:	ldrdeq	r4, [r1], -r0
   1418c:	ldrdeq	r4, [r1], -r0
   14190:	ldrdeq	r4, [r1], -r0
   14194:	ldrdeq	r4, [r1], -r0
   14198:	ldrdeq	r4, [r1], -r0
   1419c:	ldrdeq	r4, [r1], -r0
   141a0:	ldrdeq	r4, [r1], -r0
   141a4:	ldrdeq	r4, [r1], -r0
   141a8:	ldrdeq	r4, [r1], -r0
   141ac:	ldrdeq	r4, [r1], -r0
   141b0:	ldrdeq	r4, [r1], -r0
   141b4:	ldrdeq	r4, [r1], -r0
   141b8:	ldrdeq	r4, [r1], -r0
   141bc:	ldrdeq	r4, [r1], -r0
   141c0:	ldrdeq	r4, [r1], -r0
   141c4:	ldrdeq	r4, [r1], -r0
   141c8:	ldrdeq	r4, [r1], -r0
   141cc:	ldrdeq	r4, [r1], -r0
   141d0:	ldrdeq	r4, [r1], -r0
   141d4:	ldrdeq	r4, [r1], -r0
   141d8:	ldrdeq	r4, [r1], -r0
   141dc:	ldrdeq	r4, [r1], -r0
   141e0:	ldrdeq	r4, [r1], -r0
   141e4:	ldrdeq	r4, [r1], -r0
   141e8:	ldrdeq	r4, [r1], -r0
   141ec:	ldrdeq	r4, [r1], -r0
   141f0:	ldrdeq	r4, [r1], -r0
   141f4:	ldrdeq	r4, [r1], -r0
   141f8:	ldrdeq	r4, [r1], -r0
   141fc:	andeq	r4, r1, r4, ror r2
   14200:	ldrdeq	r4, [r1], -r0
   14204:	ldrdeq	r4, [r1], -r0
   14208:	ldrdeq	r4, [r1], -r0
   1420c:	ldrdeq	r4, [r1], -r0
   14210:	andeq	r4, r1, r8, ror #4
   14214:	andeq	r4, r1, r0, ror r2
   14218:	ldrdeq	r4, [r1], -r0
   1421c:	ldrdeq	r4, [r1], -r0
   14220:	andeq	r4, r1, r0, lsr #5
   14224:	andeq	r4, r1, r8, lsr #5
   14228:	ldrdeq	r4, [r1], -r0
   1422c:	ldrdeq	r4, [r1], -r0
   14230:	ldrdeq	r4, [r1], -r0
   14234:	ldrdeq	r4, [r1], -r0
   14238:	ldrdeq	r4, [r1], -r0
   1423c:	ldrdeq	r4, [r1], -r0
   14240:	ldrdeq	r4, [r1], -r0
   14244:			; <UNDEFINED> instruction: 0x000142b0
   14248:	ldrdeq	r4, [r1], -r0
   1424c:	ldrdeq	r4, [r1], -r0
   14250:	ldrdeq	r4, [r1], -r0
   14254:			; <UNDEFINED> instruction: 0x000142b8
   14258:	ldrdeq	r4, [r1], -r0
   1425c:	andeq	r4, r1, r0, asr #5
   14260:	ldrdeq	r4, [r1], -r0
   14264:	andeq	r4, r1, r8, asr #5
   14268:	mov	r6, #7
   1426c:	b	14274 <__assert_fail@plt+0x2a20>
   14270:	mov	r6, #8
   14274:	ldr	r0, [r8]
   14278:	ldr	r3, [r0, #20]
   1427c:	ldr	r2, [r0, #24]
   14280:	cmp	r3, r2
   14284:	addcc	r2, r3, #1
   14288:	strcc	r2, [r0, #20]
   1428c:	strbcc	r6, [r3]
   14290:	bcc	13e48 <__assert_fail@plt+0x25f4>
   14294:	mov	r1, r6
   14298:	bl	11758 <__overflow@plt>
   1429c:	b	13e48 <__assert_fail@plt+0x25f4>
   142a0:	mov	r6, #27
   142a4:	b	14274 <__assert_fail@plt+0x2a20>
   142a8:	mov	r6, #12
   142ac:	b	14274 <__assert_fail@plt+0x2a20>
   142b0:	mov	r6, #10
   142b4:	b	14274 <__assert_fail@plt+0x2a20>
   142b8:	mov	r6, #13
   142bc:	b	14274 <__assert_fail@plt+0x2a20>
   142c0:	mov	r6, #9
   142c4:	b	14274 <__assert_fail@plt+0x2a20>
   142c8:	mov	r6, #11
   142cc:	b	14274 <__assert_fail@plt+0x2a20>
   142d0:	mov	r2, #5
   142d4:	movw	r1, #57164	; 0xdf4c
   142d8:	movt	r1, #1
   142dc:	mov	r0, #0
   142e0:	bl	114e8 <dcgettext@plt>
   142e4:	mov	r3, r6
   142e8:	mov	r2, r0
   142ec:	mov	r1, #0
   142f0:	mov	r0, r1
   142f4:	bl	115a8 <error@plt>
   142f8:	b	14274 <__assert_fail@plt+0x2a20>
   142fc:	mov	r9, #0
   14300:	ldr	r0, [sp, #16]
   14304:	bl	15fdc <__assert_fail@plt+0x4788>
   14308:	movw	r2, #492	; 0x1ec
   1430c:	movt	r2, #3
   14310:	movw	r3, #388	; 0x184
   14314:	movt	r3, #3
   14318:	ldr	r1, [r2]
   1431c:	ldr	r0, [r3]
   14320:	bl	11428 <fputs_unlocked@plt>
   14324:	mov	r0, r9
   14328:	add	sp, sp, #36	; 0x24
   1432c:	ldrd	r4, [sp]
   14330:	ldrd	r6, [sp, #8]
   14334:	ldrd	r8, [sp, #16]
   14338:	ldrd	sl, [sp, #24]
   1433c:	add	sp, sp, #32
   14340:	pop	{pc}		; (ldr pc, [sp], #4)
   14344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14348:	strd	r6, [sp, #8]
   1434c:	strd	r8, [sp, #16]
   14350:	strd	sl, [sp, #24]
   14354:	str	lr, [sp, #32]
   14358:	sub	sp, sp, #396	; 0x18c
   1435c:	str	r0, [sp, #12]
   14360:	mov	r5, r1
   14364:	mov	sl, r2
   14368:	movw	r1, #55736	; 0xd9b8
   1436c:	movt	r1, #1
   14370:	bl	11464 <strcmp@plt>
   14374:	subs	r9, r0, #0
   14378:	beq	1476c <__assert_fail@plt+0x2f18>
   1437c:	mov	r2, #256	; 0x100
   14380:	mov	r1, #0
   14384:	add	r0, sp, #32
   14388:	bl	116e0 <memset@plt>
   1438c:	add	r3, sp, #288	; 0x120
   14390:	str	r3, [sp, #20]
   14394:	mvn	r3, #0
   14398:	str	r3, [sp, #24]
   1439c:	str	r3, [sp, #28]
   143a0:	movw	r3, #504	; 0x1f8
   143a4:	movt	r3, #3
   143a8:	ldrb	r3, [r3, #116]	; 0x74
   143ac:	ldr	r8, [sp, #12]
   143b0:	mvn	r9, #99	; 0x63
   143b4:	cmp	r3, #0
   143b8:	movne	r7, #0
   143bc:	moveq	r7, #256	; 0x100
   143c0:	b	1479c <__assert_fail@plt+0x2f48>
   143c4:	mov	r3, #256	; 0x100
   143c8:	b	14438 <__assert_fail@plt+0x2be4>
   143cc:	mov	r3, #3
   143d0:	b	14438 <__assert_fail@plt+0x2be4>
   143d4:	mov	r3, #1
   143d8:	b	14438 <__assert_fail@plt+0x2be4>
   143dc:	mov	r3, #4
   143e0:	b	14438 <__assert_fail@plt+0x2be4>
   143e4:	mov	r3, #8
   143e8:	b	14438 <__assert_fail@plt+0x2be4>
   143ec:	mov	r3, #16
   143f0:	b	14438 <__assert_fail@plt+0x2be4>
   143f4:	movw	r3, #258	; 0x102
   143f8:	b	14438 <__assert_fail@plt+0x2be4>
   143fc:	mov	r3, #512	; 0x200
   14400:	b	14438 <__assert_fail@plt+0x2be4>
   14404:	mov	r3, #1024	; 0x400
   14408:	b	14438 <__assert_fail@plt+0x2be4>
   1440c:	mov	r3, #2048	; 0x800
   14410:	b	14438 <__assert_fail@plt+0x2be4>
   14414:	mov	r3, #32
   14418:	b	14438 <__assert_fail@plt+0x2be4>
   1441c:	mov	r3, #64	; 0x40
   14420:	b	14438 <__assert_fail@plt+0x2be4>
   14424:	mov	r3, #128	; 0x80
   14428:	b	14438 <__assert_fail@plt+0x2be4>
   1442c:	mov	r3, #0
   14430:	b	14438 <__assert_fail@plt+0x2be4>
   14434:	mov	r3, fp
   14438:	orr	r6, r6, r3
   1443c:	b	14444 <__assert_fail@plt+0x2bf0>
   14440:	mov	r2, r4
   14444:	add	r4, r2, #1
   14448:	ldrb	r3, [r2, #1]
   1444c:	cmp	r3, #0
   14450:	beq	14570 <__assert_fail@plt+0x2d1c>
   14454:	cmp	r3, #37	; 0x25
   14458:	bne	14440 <__assert_fail@plt+0x2bec>
   1445c:	mov	r0, r4
   14460:	bl	13c98 <__assert_fail@plt+0x2444>
   14464:	add	r2, r4, r0
   14468:	ldrb	r3, [r4, r0]
   1446c:	cmp	r3, #0
   14470:	beq	14570 <__assert_fail@plt+0x2d1c>
   14474:	sub	r3, r3, #65	; 0x41
   14478:	cmp	r3, #57	; 0x39
   1447c:	ldrls	pc, [pc, r3, lsl #2]
   14480:	b	1442c <__assert_fail@plt+0x2bd8>
   14484:	andeq	r4, r1, r4, lsr r4
   14488:	andeq	r4, r1, ip, lsr #8
   1448c:	andeq	r4, r1, ip, lsr #8
   14490:	andeq	r4, r1, r4, lsr r4
   14494:	andeq	r4, r1, ip, lsr #8
   14498:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1449c:	andeq	r4, r1, ip, ror #7
   144a0:	andeq	r4, r1, ip, lsr #8
   144a4:	andeq	r4, r1, ip, lsr #8
   144a8:	andeq	r4, r1, ip, lsr #8
   144ac:	andeq	r4, r1, ip, lsr #8
   144b0:	andeq	r4, r1, ip, lsr #8
   144b4:	andeq	r4, r1, ip, lsr #8
   144b8:	andeq	r4, r1, r4, lsr r4
   144bc:	andeq	r4, r1, ip, lsr #8
   144c0:	andeq	r4, r1, ip, lsr #8
   144c4:	andeq	r4, r1, ip, lsr #8
   144c8:	andeq	r4, r1, ip, lsr #8
   144cc:	andeq	r4, r1, ip, lsr #8
   144d0:	andeq	r4, r1, r4, lsr r4
   144d4:	andeq	r4, r1, r4, ror #7
   144d8:	andeq	r4, r1, ip, lsr #8
   144dc:	andeq	r4, r1, ip, lsl #8
   144e0:	andeq	r4, r1, r4, lsl r4
   144e4:	andeq	r4, r1, ip, lsl r4
   144e8:	andeq	r4, r1, r4, lsr #8
   144ec:	andeq	r4, r1, ip, lsr #8
   144f0:	andeq	r4, r1, ip, lsr #8
   144f4:	andeq	r4, r1, ip, lsr #8
   144f8:	andeq	r4, r1, ip, lsr #8
   144fc:	andeq	r4, r1, ip, lsr #8
   14500:	andeq	r4, r1, ip, lsr #8
   14504:	andeq	r4, r1, r4, lsr r4
   14508:	andeq	r4, r1, r4, lsl #8
   1450c:	andeq	r4, r1, ip, lsr #8
   14510:	andeq	r4, r1, r4, lsr r4
   14514:	andeq	r4, r1, ip, lsr #8
   14518:	andeq	r4, r1, ip, asr #7
   1451c:	andeq	r4, r1, ip, ror #7
   14520:	ldrdeq	r4, [r1], -ip
   14524:	andeq	r4, r1, r4, asr #7
   14528:	andeq	r4, r1, ip, lsr #8
   1452c:	andeq	r4, r1, ip, lsr #8
   14530:	andeq	r4, r1, ip, lsr #8
   14534:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14538:	andeq	r4, r1, ip, lsr #8
   1453c:	andeq	r4, r1, ip, lsr #8
   14540:	andeq	r4, r1, ip, lsr #8
   14544:	andeq	r4, r1, ip, lsr #8
   14548:	andeq	r4, r1, ip, lsr #8
   1454c:	strdeq	r4, [r1], -ip
   14550:	andeq	r4, r1, r4, lsr r4
   14554:	andeq	r4, r1, r4, ror #7
   14558:	andeq	r4, r1, ip, lsr #8
   1455c:	andeq	r4, r1, ip, lsl #8
   14560:	andeq	r4, r1, r4, lsl r4
   14564:	andeq	r4, r1, ip, lsl r4
   14568:	andeq	r4, r1, r4, lsr #8
   1456c:	mov	r6, #0
   14570:	add	r3, sp, #32
   14574:	str	r3, [sp]
   14578:	mov	r3, r6
   1457c:	mov	r2, r7
   14580:	mov	r1, r8
   14584:	mov	r0, r9
   14588:	bl	11734 <statx@plt>
   1458c:	subs	r1, r0, #0
   14590:	blt	146e8 <__assert_fail@plt+0x2e94>
   14594:	ldrh	r4, [sp, #60]	; 0x3c
   14598:	and	r3, r4, #45056	; 0xb000
   1459c:	cmp	r3, #8192	; 0x2000
   145a0:	moveq	r5, sl
   145a4:	ldr	r6, [sp, #172]	; 0xac
   145a8:	ldr	r2, [sp, #168]	; 0xa8
   145ac:	mov	r0, #65280	; 0xff00
   145b0:	movt	r0, #15
   145b4:	and	r7, r0, r2, lsl #8
   145b8:	mov	lr, #61440	; 0xf000
   145bc:	movt	lr, #65535	; 0xffff
   145c0:	and	r2, r2, lr
   145c4:	uxtb	r3, r6
   145c8:	orr	r7, r3, r7
   145cc:	mov	ip, #0
   145d0:	movt	ip, #65520	; 0xfff0
   145d4:	and	r3, ip, r6, lsl #12
   145d8:	orr	r3, r3, r7
   145dc:	orr	r2, r2, r6, lsr #20
   145e0:	str	r3, [sp, #288]	; 0x120
   145e4:	str	r2, [sp, #292]	; 0x124
   145e8:	ldrd	r2, [sp, #64]	; 0x40
   145ec:	add	r6, sp, #384	; 0x180
   145f0:	strd	r2, [r6]
   145f4:	str	r4, [sp, #304]	; 0x130
   145f8:	ldr	r3, [sp, #48]	; 0x30
   145fc:	str	r3, [sp, #308]	; 0x134
   14600:	ldr	r3, [sp, #52]	; 0x34
   14604:	str	r3, [sp, #312]	; 0x138
   14608:	ldr	r3, [sp, #56]	; 0x38
   1460c:	str	r3, [sp, #316]	; 0x13c
   14610:	ldr	r2, [sp, #164]	; 0xa4
   14614:	ldr	r3, [sp, #160]	; 0xa0
   14618:	and	r0, r0, r3, lsl #8
   1461c:	and	r3, r3, lr
   14620:	uxtb	lr, r2
   14624:	orr	r0, lr, r0
   14628:	and	ip, ip, r2, lsl #12
   1462c:	orr	ip, ip, r0
   14630:	orr	r3, r3, r2, lsr #20
   14634:	str	ip, [sp, #320]	; 0x140
   14638:	str	r3, [sp, #324]	; 0x144
   1463c:	ldrd	r2, [sp, #72]	; 0x48
   14640:	add	r0, sp, #336	; 0x150
   14644:	strd	r2, [r0]
   14648:	ldr	r3, [sp, #36]	; 0x24
   1464c:	str	r3, [sp, #344]	; 0x158
   14650:	ldrd	r2, [sp, #80]	; 0x50
   14654:	add	r0, sp, #352	; 0x160
   14658:	strd	r2, [r0]
   1465c:	ldr	r3, [sp, #96]	; 0x60
   14660:	str	r3, [sp, #360]	; 0x168
   14664:	ldr	r3, [sp, #104]	; 0x68
   14668:	str	r3, [sp, #364]	; 0x16c
   1466c:	ldr	r3, [sp, #144]	; 0x90
   14670:	str	r3, [sp, #368]	; 0x170
   14674:	ldr	r3, [sp, #152]	; 0x98
   14678:	str	r3, [sp, #372]	; 0x174
   1467c:	ldr	r3, [sp, #128]	; 0x80
   14680:	str	r3, [sp, #376]	; 0x178
   14684:	ldr	r3, [sp, #136]	; 0x88
   14688:	str	r3, [sp, #380]	; 0x17c
   1468c:	ldr	r3, [sp, #32]
   14690:	tst	r3, #2048	; 0x800
   14694:	beq	146a8 <__assert_fail@plt+0x2e54>
   14698:	ldr	r3, [sp, #112]	; 0x70
   1469c:	str	r3, [sp, #24]
   146a0:	ldr	r3, [sp, #120]	; 0x78
   146a4:	str	r3, [sp, #28]
   146a8:	add	r3, sp, #20
   146ac:	str	r3, [sp]
   146b0:	movw	r3, #13148	; 0x335c
   146b4:	movt	r3, #1
   146b8:	ldr	r2, [sp, #12]
   146bc:	mov	r0, r5
   146c0:	bl	13d10 <__assert_fail@plt+0x24bc>
   146c4:	eor	r0, r0, #1
   146c8:	uxtb	r0, r0
   146cc:	add	sp, sp, #396	; 0x18c
   146d0:	ldrd	r4, [sp]
   146d4:	ldrd	r6, [sp, #8]
   146d8:	ldrd	r8, [sp, #16]
   146dc:	ldrd	sl, [sp, #24]
   146e0:	add	sp, sp, #32
   146e4:	pop	{pc}		; (ldr pc, [sp], #4)
   146e8:	tst	r7, #4096	; 0x1000
   146ec:	beq	14724 <__assert_fail@plt+0x2ed0>
   146f0:	bl	116b0 <__errno_location@plt>
   146f4:	ldr	r4, [r0]
   146f8:	mov	r2, #5
   146fc:	movw	r1, #57200	; 0xdf70
   14700:	movt	r1, #1
   14704:	mov	r0, #0
   14708:	bl	114e8 <dcgettext@plt>
   1470c:	mov	r2, r0
   14710:	mov	r1, r4
   14714:	mov	r0, #0
   14718:	bl	115a8 <error@plt>
   1471c:	mov	r0, #0
   14720:	b	146cc <__assert_fail@plt+0x2e78>
   14724:	bl	116b0 <__errno_location@plt>
   14728:	ldr	r4, [r0]
   1472c:	mov	r2, #5
   14730:	movw	r1, #57228	; 0xdf8c
   14734:	movt	r1, #1
   14738:	mov	r0, #0
   1473c:	bl	114e8 <dcgettext@plt>
   14740:	mov	r5, r0
   14744:	ldr	r1, [sp, #12]
   14748:	mov	r0, #4
   1474c:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   14750:	mov	r3, r0
   14754:	mov	r2, r5
   14758:	mov	r1, r4
   1475c:	mov	r0, #0
   14760:	bl	115a8 <error@plt>
   14764:	mov	r0, #0
   14768:	b	146cc <__assert_fail@plt+0x2e78>
   1476c:	mov	r2, #256	; 0x100
   14770:	mov	r1, #0
   14774:	add	r0, sp, #32
   14778:	bl	116e0 <memset@plt>
   1477c:	add	r3, sp, #288	; 0x120
   14780:	str	r3, [sp, #20]
   14784:	mvn	r3, #0
   14788:	str	r3, [sp, #24]
   1478c:	str	r3, [sp, #28]
   14790:	movw	r8, #55660	; 0xd96c
   14794:	movt	r8, #1
   14798:	mov	r7, #4096	; 0x1000
   1479c:	movw	r3, #504	; 0x1f8
   147a0:	movt	r3, #3
   147a4:	ldrb	r3, [r3, #118]	; 0x76
   147a8:	cmp	r3, #0
   147ac:	orrne	r7, r7, #16384	; 0x4000
   147b0:	bne	147c8 <__assert_fail@plt+0x2f74>
   147b4:	movw	r3, #504	; 0x1f8
   147b8:	movt	r3, #3
   147bc:	ldrb	r3, [r3, #119]	; 0x77
   147c0:	cmp	r3, #0
   147c4:	orrne	r7, r7, #8192	; 0x2000
   147c8:	ldrb	r3, [r5]
   147cc:	cmp	r3, #0
   147d0:	beq	1456c <__assert_fail@plt+0x2d18>
   147d4:	mov	r4, r5
   147d8:	mov	r6, #0
   147dc:	mov	fp, #2
   147e0:	b	14454 <__assert_fail@plt+0x2c00>
   147e4:	push	{lr}		; (str lr, [sp, #-4]!)
   147e8:	sub	sp, sp, #60	; 0x3c
   147ec:	subs	r5, r0, #0
   147f0:	beq	14838 <__assert_fail@plt+0x2fe4>
   147f4:	movw	r3, #488	; 0x1e8
   147f8:	movt	r3, #3
   147fc:	ldr	r4, [r3]
   14800:	mov	r2, #5
   14804:	movw	r1, #57252	; 0xdfa4
   14808:	movt	r1, #1
   1480c:	mov	r0, #0
   14810:	bl	114e8 <dcgettext@plt>
   14814:	movw	r3, #632	; 0x278
   14818:	movt	r3, #3
   1481c:	ldr	r3, [r3]
   14820:	mov	r2, r0
   14824:	mov	r1, #1
   14828:	mov	r0, r4
   1482c:	bl	11704 <__fprintf_chk@plt>
   14830:	mov	r0, r5
   14834:	bl	1165c <exit@plt>
   14838:	mov	r2, #5
   1483c:	movw	r1, #57292	; 0xdfcc
   14840:	movt	r1, #1
   14844:	mov	r0, #0
   14848:	bl	114e8 <dcgettext@plt>
   1484c:	movw	r3, #632	; 0x278
   14850:	movt	r3, #3
   14854:	ldr	r2, [r3]
   14858:	mov	r1, r0
   1485c:	mov	r0, #1
   14860:	bl	116ec <__printf_chk@plt>
   14864:	mov	r2, #5
   14868:	movw	r1, #57324	; 0xdfec
   1486c:	movt	r1, #1
   14870:	mov	r0, #0
   14874:	bl	114e8 <dcgettext@plt>
   14878:	movw	r4, #492	; 0x1ec
   1487c:	movt	r4, #3
   14880:	ldr	r1, [r4]
   14884:	bl	11428 <fputs_unlocked@plt>
   14888:	mov	r2, #5
   1488c:	movw	r1, #57364	; 0xe014
   14890:	movt	r1, #1
   14894:	mov	r0, #0
   14898:	bl	114e8 <dcgettext@plt>
   1489c:	ldr	r1, [r4]
   148a0:	bl	11428 <fputs_unlocked@plt>
   148a4:	mov	r2, #5
   148a8:	movw	r1, #57440	; 0xe060
   148ac:	movt	r1, #1
   148b0:	mov	r0, #0
   148b4:	bl	114e8 <dcgettext@plt>
   148b8:	ldr	r1, [r4]
   148bc:	bl	11428 <fputs_unlocked@plt>
   148c0:	mov	r2, #5
   148c4:	movw	r1, #57552	; 0xe0d0
   148c8:	movt	r1, #1
   148cc:	mov	r0, #0
   148d0:	bl	114e8 <dcgettext@plt>
   148d4:	ldr	r1, [r4]
   148d8:	bl	11428 <fputs_unlocked@plt>
   148dc:	mov	r2, #5
   148e0:	movw	r1, #57688	; 0xe158
   148e4:	movt	r1, #1
   148e8:	mov	r0, #0
   148ec:	bl	114e8 <dcgettext@plt>
   148f0:	ldr	r1, [r4]
   148f4:	bl	11428 <fputs_unlocked@plt>
   148f8:	mov	r2, #5
   148fc:	movw	r1, #58108	; 0xe2fc
   14900:	movt	r1, #1
   14904:	mov	r0, #0
   14908:	bl	114e8 <dcgettext@plt>
   1490c:	ldr	r1, [r4]
   14910:	bl	11428 <fputs_unlocked@plt>
   14914:	mov	r2, #5
   14918:	movw	r1, #58156	; 0xe32c
   1491c:	movt	r1, #1
   14920:	mov	r0, #0
   14924:	bl	114e8 <dcgettext@plt>
   14928:	ldr	r1, [r4]
   1492c:	bl	11428 <fputs_unlocked@plt>
   14930:	mov	r2, #5
   14934:	movw	r1, #58212	; 0xe364
   14938:	movt	r1, #1
   1493c:	mov	r0, #0
   14940:	bl	114e8 <dcgettext@plt>
   14944:	ldr	r1, [r4]
   14948:	bl	11428 <fputs_unlocked@plt>
   1494c:	mov	r2, #5
   14950:	movw	r1, #58460	; 0xe45c
   14954:	movt	r1, #1
   14958:	mov	r0, #0
   1495c:	bl	114e8 <dcgettext@plt>
   14960:	ldr	r1, [r4]
   14964:	bl	11428 <fputs_unlocked@plt>
   14968:	mov	r2, #5
   1496c:	movw	r1, #58788	; 0xe5a4
   14970:	movt	r1, #1
   14974:	mov	r0, #0
   14978:	bl	114e8 <dcgettext@plt>
   1497c:	ldr	r1, [r4]
   14980:	bl	11428 <fputs_unlocked@plt>
   14984:	mov	r2, #5
   14988:	movw	r1, #59036	; 0xe69c
   1498c:	movt	r1, #1
   14990:	mov	r0, #0
   14994:	bl	114e8 <dcgettext@plt>
   14998:	ldr	r1, [r4]
   1499c:	bl	11428 <fputs_unlocked@plt>
   149a0:	mov	r2, #5
   149a4:	movw	r1, #59628	; 0xe8ec
   149a8:	movt	r1, #1
   149ac:	mov	r0, #0
   149b0:	bl	114e8 <dcgettext@plt>
   149b4:	ldr	r1, [r4]
   149b8:	bl	11428 <fputs_unlocked@plt>
   149bc:	mov	r2, #5
   149c0:	movw	r1, #60108	; 0xeacc
   149c4:	movt	r1, #1
   149c8:	mov	r0, #0
   149cc:	bl	114e8 <dcgettext@plt>
   149d0:	ldr	r1, [r4]
   149d4:	bl	11428 <fputs_unlocked@plt>
   149d8:	mov	r2, #5
   149dc:	movw	r1, #60348	; 0xebbc
   149e0:	movt	r1, #1
   149e4:	mov	r0, #0
   149e8:	bl	114e8 <dcgettext@plt>
   149ec:	ldr	r1, [r4]
   149f0:	bl	11428 <fputs_unlocked@plt>
   149f4:	mov	r2, #5
   149f8:	movw	r1, #60600	; 0xecb8
   149fc:	movt	r1, #1
   14a00:	mov	r0, #0
   14a04:	bl	114e8 <dcgettext@plt>
   14a08:	movw	r4, #54868	; 0xd654
   14a0c:	movt	r4, #1
   14a10:	add	r2, r4, #36	; 0x24
   14a14:	mov	r1, r0
   14a18:	mov	r0, #1
   14a1c:	bl	116ec <__printf_chk@plt>
   14a20:	mov	r2, #5
   14a24:	movw	r1, #60656	; 0xecf0
   14a28:	movt	r1, #1
   14a2c:	mov	r0, #0
   14a30:	bl	114e8 <dcgettext@plt>
   14a34:	mov	r2, r4
   14a38:	mov	r1, r0
   14a3c:	mov	r0, #1
   14a40:	bl	116ec <__printf_chk@plt>
   14a44:	mov	r2, #5
   14a48:	movw	r1, #60724	; 0xed34
   14a4c:	movt	r1, #1
   14a50:	mov	r0, #0
   14a54:	bl	114e8 <dcgettext@plt>
   14a58:	movw	r2, #57244	; 0xdf9c
   14a5c:	movt	r2, #1
   14a60:	mov	r1, r0
   14a64:	mov	r0, #1
   14a68:	bl	116ec <__printf_chk@plt>
   14a6c:	ldr	r1, [r4, #160]	; 0xa0
   14a70:	ldr	r3, [r4, #164]	; 0xa4
   14a74:	str	r1, [sp]
   14a78:	str	r3, [sp, #4]
   14a7c:	ldrd	r2, [r4, #168]	; 0xa8
   14a80:	strd	r2, [sp, #8]
   14a84:	ldrd	r2, [r4, #176]	; 0xb0
   14a88:	strd	r2, [sp, #16]
   14a8c:	ldrd	r2, [r4, #184]	; 0xb8
   14a90:	strd	r2, [sp, #24]
   14a94:	ldrd	r2, [r4, #192]	; 0xc0
   14a98:	strd	r2, [sp, #32]
   14a9c:	ldrd	r2, [r4, #200]	; 0xc8
   14aa0:	strd	r2, [sp, #40]	; 0x28
   14aa4:	ldrd	r2, [r4, #208]	; 0xd0
   14aa8:	strd	r2, [sp, #48]	; 0x30
   14aac:	cmp	r1, #0
   14ab0:	moveq	r4, sp
   14ab4:	beq	14ae0 <__assert_fail@plt+0x328c>
   14ab8:	mov	r4, sp
   14abc:	movw	r6, #57244	; 0xdf9c
   14ac0:	movt	r6, #1
   14ac4:	mov	r0, r6
   14ac8:	bl	11464 <strcmp@plt>
   14acc:	cmp	r0, #0
   14ad0:	beq	14ae0 <__assert_fail@plt+0x328c>
   14ad4:	ldr	r1, [r4, #8]!
   14ad8:	cmp	r1, #0
   14adc:	bne	14ac4 <__assert_fail@plt+0x3270>
   14ae0:	ldr	r4, [r4, #4]
   14ae4:	cmp	r4, #0
   14ae8:	beq	14c44 <__assert_fail@plt+0x33f0>
   14aec:	mov	r2, #5
   14af0:	movw	r1, #60916	; 0xedf4
   14af4:	movt	r1, #1
   14af8:	mov	r0, #0
   14afc:	bl	114e8 <dcgettext@plt>
   14b00:	movw	r3, #60940	; 0xee0c
   14b04:	movt	r3, #1
   14b08:	movw	r2, #60980	; 0xee34
   14b0c:	movt	r2, #1
   14b10:	mov	r1, r0
   14b14:	mov	r0, #1
   14b18:	bl	116ec <__printf_chk@plt>
   14b1c:	mov	r1, #0
   14b20:	mov	r0, #5
   14b24:	bl	11764 <setlocale@plt>
   14b28:	cmp	r0, #0
   14b2c:	beq	14b48 <__assert_fail@plt+0x32f4>
   14b30:	mov	r2, #3
   14b34:	movw	r1, #60996	; 0xee44
   14b38:	movt	r1, #1
   14b3c:	bl	11818 <strncmp@plt>
   14b40:	cmp	r0, #0
   14b44:	bne	14bc4 <__assert_fail@plt+0x3370>
   14b48:	mov	r2, #5
   14b4c:	movw	r1, #61072	; 0xee90
   14b50:	movt	r1, #1
   14b54:	mov	r0, #0
   14b58:	bl	114e8 <dcgettext@plt>
   14b5c:	movw	r6, #57244	; 0xdf9c
   14b60:	movt	r6, #1
   14b64:	mov	r3, r6
   14b68:	movw	r2, #60940	; 0xee0c
   14b6c:	movt	r2, #1
   14b70:	mov	r1, r0
   14b74:	mov	r0, #1
   14b78:	bl	116ec <__printf_chk@plt>
   14b7c:	mov	r2, #5
   14b80:	movw	r1, #61100	; 0xeeac
   14b84:	movt	r1, #1
   14b88:	mov	r0, #0
   14b8c:	bl	114e8 <dcgettext@plt>
   14b90:	mov	r1, r0
   14b94:	movw	r2, #61440	; 0xf000
   14b98:	movt	r2, #1
   14b9c:	movw	r3, #55660	; 0xd96c
   14ba0:	movt	r3, #1
   14ba4:	cmp	r4, r6
   14ba8:	moveq	r3, r2
   14bac:	mov	r2, r4
   14bb0:	mov	r0, #1
   14bb4:	bl	116ec <__printf_chk@plt>
   14bb8:	b	14830 <__assert_fail@plt+0x2fdc>
   14bbc:	movw	r4, #57244	; 0xdf9c
   14bc0:	movt	r4, #1
   14bc4:	mov	r2, #5
   14bc8:	movw	r1, #61000	; 0xee48
   14bcc:	movt	r1, #1
   14bd0:	mov	r0, #0
   14bd4:	bl	114e8 <dcgettext@plt>
   14bd8:	movw	r3, #492	; 0x1ec
   14bdc:	movt	r3, #3
   14be0:	ldr	r1, [r3]
   14be4:	bl	11428 <fputs_unlocked@plt>
   14be8:	b	14b48 <__assert_fail@plt+0x32f4>
   14bec:	mov	r2, #5
   14bf0:	movw	r1, #61072	; 0xee90
   14bf4:	movt	r1, #1
   14bf8:	mov	r0, #0
   14bfc:	bl	114e8 <dcgettext@plt>
   14c00:	movw	r4, #57244	; 0xdf9c
   14c04:	movt	r4, #1
   14c08:	mov	r3, r4
   14c0c:	movw	r2, #60940	; 0xee0c
   14c10:	movt	r2, #1
   14c14:	mov	r1, r0
   14c18:	mov	r0, #1
   14c1c:	bl	116ec <__printf_chk@plt>
   14c20:	mov	r2, #5
   14c24:	movw	r1, #61100	; 0xeeac
   14c28:	movt	r1, #1
   14c2c:	mov	r0, #0
   14c30:	bl	114e8 <dcgettext@plt>
   14c34:	mov	r1, r0
   14c38:	movw	r3, #61440	; 0xf000
   14c3c:	movt	r3, #1
   14c40:	b	14bac <__assert_fail@plt+0x3358>
   14c44:	mov	r2, #5
   14c48:	movw	r1, #60916	; 0xedf4
   14c4c:	movt	r1, #1
   14c50:	mov	r0, #0
   14c54:	bl	114e8 <dcgettext@plt>
   14c58:	movw	r3, #60940	; 0xee0c
   14c5c:	movt	r3, #1
   14c60:	movw	r2, #60980	; 0xee34
   14c64:	movt	r2, #1
   14c68:	mov	r1, r0
   14c6c:	mov	r0, #1
   14c70:	bl	116ec <__printf_chk@plt>
   14c74:	mov	r1, #0
   14c78:	mov	r0, #5
   14c7c:	bl	11764 <setlocale@plt>
   14c80:	cmp	r0, #0
   14c84:	beq	14bec <__assert_fail@plt+0x3398>
   14c88:	mov	r2, #3
   14c8c:	movw	r1, #60996	; 0xee44
   14c90:	movt	r1, #1
   14c94:	bl	11818 <strncmp@plt>
   14c98:	cmp	r0, #0
   14c9c:	bne	14bbc <__assert_fail@plt+0x3368>
   14ca0:	mov	r2, #5
   14ca4:	movw	r1, #61072	; 0xee90
   14ca8:	movt	r1, #1
   14cac:	mov	r0, #0
   14cb0:	bl	114e8 <dcgettext@plt>
   14cb4:	movw	r4, #57244	; 0xdf9c
   14cb8:	movt	r4, #1
   14cbc:	mov	r3, r4
   14cc0:	movw	r2, #60940	; 0xee0c
   14cc4:	movt	r2, #1
   14cc8:	mov	r1, r0
   14ccc:	mov	r0, #1
   14cd0:	bl	116ec <__printf_chk@plt>
   14cd4:	mov	r2, #5
   14cd8:	movw	r1, #61100	; 0xeeac
   14cdc:	movt	r1, #1
   14ce0:	mov	r0, #0
   14ce4:	bl	114e8 <dcgettext@plt>
   14ce8:	mov	r1, r0
   14cec:	movw	r3, #61440	; 0xf000
   14cf0:	movt	r3, #1
   14cf4:	b	14bac <__assert_fail@plt+0x3358>
   14cf8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14cfc:	strd	r6, [sp, #8]
   14d00:	strd	r8, [sp, #16]
   14d04:	strd	sl, [sp, #24]
   14d08:	str	lr, [sp, #32]
   14d0c:	sub	sp, sp, #132	; 0x84
   14d10:	mov	r7, r0
   14d14:	mov	r5, r1
   14d18:	ldr	r0, [r1]
   14d1c:	bl	186c8 <__assert_fail@plt+0x6e74>
   14d20:	movw	r1, #55660	; 0xd96c
   14d24:	movt	r1, #1
   14d28:	mov	r0, #6
   14d2c:	bl	11764 <setlocale@plt>
   14d30:	movw	r4, #60984	; 0xee38
   14d34:	movt	r4, #1
   14d38:	movw	r1, #61156	; 0xeee4
   14d3c:	movt	r1, #1
   14d40:	mov	r0, r4
   14d44:	bl	117f4 <bindtextdomain@plt>
   14d48:	mov	r0, r4
   14d4c:	bl	11518 <textdomain@plt>
   14d50:	bl	117a0 <localeconv@plt>
   14d54:	ldr	r0, [r0]
   14d58:	ldrb	r2, [r0]
   14d5c:	movw	r3, #61152	; 0xeee0
   14d60:	movt	r3, #1
   14d64:	cmp	r2, #0
   14d68:	moveq	r0, r3
   14d6c:	movw	r4, #504	; 0x1f8
   14d70:	movt	r4, #3
   14d74:	str	r0, [r4, #100]	; 0x64
   14d78:	bl	11674 <strlen@plt>
   14d7c:	str	r0, [r4, #96]	; 0x60
   14d80:	movw	r0, #23320	; 0x5b18
   14d84:	movt	r0, #1
   14d88:	bl	1d630 <__assert_fail@plt+0xbddc>
   14d8c:	mov	r9, #0
   14d90:	str	r9, [sp, #20]
   14d94:	mov	fp, r9
   14d98:	movw	r6, #54868	; 0xd654
   14d9c:	movt	r6, #1
   14da0:	add	sl, r6, #244	; 0xf4
   14da4:	movw	r4, #61208	; 0xef18
   14da8:	movt	r4, #1
   14dac:	movw	r8, #504	; 0x1f8
   14db0:	movt	r8, #3
   14db4:	b	14f10 <__assert_fail@plt+0x36bc>
   14db8:	cmn	r0, #2
   14dbc:	beq	14eb0 <__assert_fail@plt+0x365c>
   14dc0:	cmp	r0, #0
   14dc4:	beq	14e18 <__assert_fail@plt+0x35c4>
   14dc8:	cmn	r0, #3
   14dcc:	beq	14eb8 <__assert_fail@plt+0x3664>
   14dd0:	mov	r0, #1
   14dd4:	bl	147e4 <__assert_fail@plt+0x2f90>
   14dd8:	cmp	r0, #99	; 0x63
   14ddc:	bne	14dd0 <__assert_fail@plt+0x357c>
   14de0:	movw	r3, #496	; 0x1f0
   14de4:	movt	r3, #3
   14de8:	ldr	r9, [r3]
   14dec:	mov	r3, #0
   14df0:	strb	r3, [r8, #117]	; 0x75
   14df4:	movw	r3, #388	; 0x184
   14df8:	movt	r3, #3
   14dfc:	movw	r2, #60104	; 0xeac8
   14e00:	movt	r2, #1
   14e04:	str	r2, [r3]
   14e08:	b	14f10 <__assert_fail@plt+0x36bc>
   14e0c:	mov	r3, #1
   14e10:	strb	r3, [r8, #116]	; 0x74
   14e14:	b	14f10 <__assert_fail@plt+0x36bc>
   14e18:	movw	r1, #496	; 0x1f0
   14e1c:	movt	r1, #3
   14e20:	mov	r3, #1
   14e24:	str	r3, [sp, #8]
   14e28:	movw	r3, #396	; 0x18c
   14e2c:	movt	r3, #3
   14e30:	ldr	r3, [r3]
   14e34:	str	r3, [sp, #4]
   14e38:	mov	r3, #4
   14e3c:	str	r3, [sp]
   14e40:	add	r3, r6, #216	; 0xd8
   14e44:	add	r2, r6, #228	; 0xe4
   14e48:	ldr	r1, [r1]
   14e4c:	movw	r0, #61180	; 0xeefc
   14e50:	movt	r0, #1
   14e54:	bl	159f0 <__assert_fail@plt+0x419c>
   14e58:	add	r0, r6, r0, lsl #2
   14e5c:	ldr	r3, [r0, #216]	; 0xd8
   14e60:	cmp	r3, #1
   14e64:	beq	14e8c <__assert_fail@plt+0x3638>
   14e68:	cmp	r3, #0
   14e6c:	beq	14ea0 <__assert_fail@plt+0x364c>
   14e70:	cmp	r3, #2
   14e74:	bne	14f10 <__assert_fail@plt+0x36bc>
   14e78:	mov	r3, #0
   14e7c:	strb	r3, [r8, #119]	; 0x77
   14e80:	mov	r3, #1
   14e84:	strb	r3, [r8, #118]	; 0x76
   14e88:	b	14f10 <__assert_fail@plt+0x36bc>
   14e8c:	mov	r3, #1
   14e90:	strb	r3, [r8, #119]	; 0x77
   14e94:	mov	r3, #0
   14e98:	strb	r3, [r8, #118]	; 0x76
   14e9c:	b	14f10 <__assert_fail@plt+0x36bc>
   14ea0:	mov	r3, #0
   14ea4:	strb	r3, [r8, #119]	; 0x77
   14ea8:	strb	r3, [r8, #118]	; 0x76
   14eac:	b	14f10 <__assert_fail@plt+0x36bc>
   14eb0:	mov	r0, #0
   14eb4:	bl	147e4 <__assert_fail@plt+0x2f90>
   14eb8:	movw	r3, #392	; 0x188
   14ebc:	movt	r3, #3
   14ec0:	movw	r0, #492	; 0x1ec
   14ec4:	movt	r0, #3
   14ec8:	mov	r4, #0
   14ecc:	str	r4, [sp, #4]
   14ed0:	movw	r2, #61192	; 0xef08
   14ed4:	movt	r2, #1
   14ed8:	str	r2, [sp]
   14edc:	ldr	r3, [r3]
   14ee0:	movw	r2, #60980	; 0xee34
   14ee4:	movt	r2, #1
   14ee8:	movw	r1, #57244	; 0xdf9c
   14eec:	movt	r1, #1
   14ef0:	ldr	r0, [r0]
   14ef4:	bl	1b5e0 <__assert_fail@plt+0x9d8c>
   14ef8:	mov	r0, r4
   14efc:	bl	1165c <exit@plt>
   14f00:	mov	fp, #1
   14f04:	b	14f10 <__assert_fail@plt+0x36bc>
   14f08:	mov	r3, #1
   14f0c:	str	r3, [sp, #20]
   14f10:	mov	r3, #0
   14f14:	str	r3, [sp]
   14f18:	mov	r3, sl
   14f1c:	mov	r2, r4
   14f20:	mov	r1, r5
   14f24:	mov	r0, r7
   14f28:	bl	11638 <getopt_long@plt>
   14f2c:	cmn	r0, #1
   14f30:	beq	14f88 <__assert_fail@plt+0x3734>
   14f34:	cmp	r0, #76	; 0x4c
   14f38:	beq	14e0c <__assert_fail@plt+0x35b8>
   14f3c:	ble	14db8 <__assert_fail@plt+0x3564>
   14f40:	cmp	r0, #102	; 0x66
   14f44:	beq	14f00 <__assert_fail@plt+0x36ac>
   14f48:	ble	14dd8 <__assert_fail@plt+0x3584>
   14f4c:	cmp	r0, #116	; 0x74
   14f50:	beq	14f08 <__assert_fail@plt+0x36b4>
   14f54:	cmp	r0, #256	; 0x100
   14f58:	bne	14dd0 <__assert_fail@plt+0x357c>
   14f5c:	movw	r3, #496	; 0x1f0
   14f60:	movt	r3, #3
   14f64:	ldr	r9, [r3]
   14f68:	mov	r3, #1
   14f6c:	strb	r3, [r8, #117]	; 0x75
   14f70:	movw	r3, #388	; 0x184
   14f74:	movt	r3, #3
   14f78:	movw	r2, #55660	; 0xd96c
   14f7c:	movt	r2, #1
   14f80:	str	r2, [r3]
   14f84:	b	14f10 <__assert_fail@plt+0x36bc>
   14f88:	movw	r3, #480	; 0x1e0
   14f8c:	movt	r3, #3
   14f90:	ldr	r3, [r3]
   14f94:	cmp	r3, r7
   14f98:	beq	15048 <__assert_fail@plt+0x37f4>
   14f9c:	cmp	r9, #0
   14fa0:	beq	150d0 <__assert_fail@plt+0x387c>
   14fa4:	movw	r1, #61232	; 0xef30
   14fa8:	movt	r1, #1
   14fac:	mov	r0, r9
   14fb0:	bl	1c264 <__assert_fail@plt+0xaa10>
   14fb4:	cmp	r0, #0
   14fb8:	streq	r9, [sp, #24]
   14fbc:	beq	15010 <__assert_fail@plt+0x37bc>
   14fc0:	movw	r0, #61236	; 0xef34
   14fc4:	movt	r0, #1
   14fc8:	bl	115cc <getenv@plt>
   14fcc:	subs	r4, r0, #0
   14fd0:	beq	150bc <__assert_fail@plt+0x3868>
   14fd4:	mov	r3, #4
   14fd8:	movw	r2, #62328	; 0xf378
   14fdc:	movt	r2, #1
   14fe0:	movw	r1, #62368	; 0xf3a0
   14fe4:	movt	r1, #1
   14fe8:	mov	r0, r4
   14fec:	bl	156b4 <__assert_fail@plt+0x3e60>
   14ff0:	cmp	r0, #0
   14ff4:	blt	15074 <__assert_fail@plt+0x3820>
   14ff8:	movw	r3, #62328	; 0xf378
   14ffc:	movt	r3, #1
   15000:	ldr	r1, [r3, r0, lsl #2]
   15004:	mov	r0, #0
   15008:	bl	1a280 <__assert_fail@plt+0x8a2c>
   1500c:	str	r9, [sp, #24]
   15010:	movw	r3, #480	; 0x1e0
   15014:	movt	r3, #3
   15018:	ldr	r4, [r3]
   1501c:	mov	r6, #1
   15020:	movw	r3, #55736	; 0xd9b8
   15024:	movt	r3, #1
   15028:	str	r3, [sp, #20]
   1502c:	movw	sl, #7412	; 0x1cf4
   15030:	movt	sl, #1
   15034:	movw	r3, #61388	; 0xefcc
   15038:	movt	r3, #1
   1503c:	str	r3, [sp, #32]
   15040:	str	sl, [sp, #28]
   15044:	b	15198 <__assert_fail@plt+0x3944>
   15048:	mov	r2, #5
   1504c:	movw	r1, #61216	; 0xef20
   15050:	movt	r1, #1
   15054:	mov	r0, #0
   15058:	bl	114e8 <dcgettext@plt>
   1505c:	mov	r2, r0
   15060:	mov	r1, #0
   15064:	mov	r0, r1
   15068:	bl	115a8 <error@plt>
   1506c:	mov	r0, #1
   15070:	bl	147e4 <__assert_fail@plt+0x2f90>
   15074:	mov	r1, #4
   15078:	mov	r0, #0
   1507c:	bl	1a280 <__assert_fail@plt+0x8a2c>
   15080:	mov	r2, #5
   15084:	movw	r1, #61252	; 0xef44
   15088:	movt	r1, #1
   1508c:	mov	r0, #0
   15090:	bl	114e8 <dcgettext@plt>
   15094:	mov	r6, r0
   15098:	mov	r0, r4
   1509c:	bl	1a9c4 <__assert_fail@plt+0x9170>
   150a0:	mov	r3, r0
   150a4:	mov	r2, r6
   150a8:	mov	r1, #0
   150ac:	mov	r0, r1
   150b0:	bl	115a8 <error@plt>
   150b4:	str	r9, [sp, #24]
   150b8:	b	15010 <__assert_fail@plt+0x37bc>
   150bc:	mov	r1, #4
   150c0:	mov	r0, #0
   150c4:	bl	1a280 <__assert_fail@plt+0x8a2c>
   150c8:	str	r9, [sp, #24]
   150cc:	b	15010 <__assert_fail@plt+0x37bc>
   150d0:	mov	r2, #0
   150d4:	ldr	r4, [sp, #20]
   150d8:	mov	r1, r4
   150dc:	mov	r0, fp
   150e0:	bl	11950 <__assert_fail@plt+0xfc>
   150e4:	mov	r9, r0
   150e8:	mov	r2, #1
   150ec:	mov	r1, r4
   150f0:	mov	r0, fp
   150f4:	bl	11950 <__assert_fail@plt+0xfc>
   150f8:	str	r0, [sp, #24]
   150fc:	b	15010 <__assert_fail@plt+0x37bc>
   15100:	mov	r2, #5
   15104:	movw	r1, #61320	; 0xef88
   15108:	movt	r1, #1
   1510c:	bl	114e8 <dcgettext@plt>
   15110:	mov	sl, r0
   15114:	mov	r1, r8
   15118:	mov	r0, #4
   1511c:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   15120:	mov	r3, r0
   15124:	mov	r2, sl
   15128:	mov	r1, #0
   1512c:	mov	r0, r1
   15130:	bl	115a8 <error@plt>
   15134:	mov	r0, #0
   15138:	b	15190 <__assert_fail@plt+0x393c>
   1513c:	bl	116b0 <__errno_location@plt>
   15140:	ldr	sl, [r0]
   15144:	mov	r2, #5
   15148:	ldr	r1, [sp, #32]
   1514c:	mov	r0, #0
   15150:	bl	114e8 <dcgettext@plt>
   15154:	str	r0, [sp, #36]	; 0x24
   15158:	mov	r1, r8
   1515c:	mov	r0, #4
   15160:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   15164:	mov	r3, r0
   15168:	ldr	r2, [sp, #36]	; 0x24
   1516c:	mov	r1, sl
   15170:	mov	r0, #0
   15174:	bl	115a8 <error@plt>
   15178:	mov	r0, #0
   1517c:	b	15190 <__assert_fail@plt+0x393c>
   15180:	ldr	r2, [sp, #24]
   15184:	mov	r1, r9
   15188:	ldr	r0, [r5, r4, lsl #2]
   1518c:	bl	14344 <__assert_fail@plt+0x2af0>
   15190:	and	r6, r6, r0
   15194:	add	r4, r4, #1
   15198:	cmp	r4, r7
   1519c:	bge	151fc <__assert_fail@plt+0x39a8>
   151a0:	cmp	fp, #0
   151a4:	beq	15180 <__assert_fail@plt+0x392c>
   151a8:	ldr	r8, [r5, r4, lsl #2]
   151ac:	ldr	r1, [sp, #20]
   151b0:	mov	r0, r8
   151b4:	bl	11464 <strcmp@plt>
   151b8:	cmp	r0, #0
   151bc:	beq	15100 <__assert_fail@plt+0x38ac>
   151c0:	add	r1, sp, #40	; 0x28
   151c4:	mov	r0, r8
   151c8:	bl	1177c <statfs64@plt>
   151cc:	cmp	r0, #0
   151d0:	bne	1513c <__assert_fail@plt+0x38e8>
   151d4:	add	r3, sp, #40	; 0x28
   151d8:	str	r3, [sp]
   151dc:	ldr	r3, [sp, #28]
   151e0:	mov	r2, r8
   151e4:	mvn	r1, #0
   151e8:	mov	r0, r9
   151ec:	bl	13d10 <__assert_fail@plt+0x24bc>
   151f0:	eor	r0, r0, #1
   151f4:	uxtb	r0, r0
   151f8:	b	15190 <__assert_fail@plt+0x393c>
   151fc:	eor	r0, r6, #1
   15200:	bl	1165c <exit@plt>
   15204:	strd	r4, [sp, #-20]!	; 0xffffffec
   15208:	str	r6, [sp, #8]
   1520c:	str	fp, [sp, #12]
   15210:	str	lr, [sp, #16]
   15214:	add	fp, sp, #16
   15218:	sub	sp, sp, #220	; 0xdc
   1521c:	mov	r5, r0
   15220:	mov	r4, r1
   15224:	sub	r0, fp, #28
   15228:	bl	1a9e4 <__assert_fail@plt+0x9190>
   1522c:	cmp	r0, #0
   15230:	bne	152b8 <__assert_fail@plt+0x3a64>
   15234:	ldr	r3, [r4, #16]
   15238:	and	r3, r3, #61440	; 0xf000
   1523c:	cmp	r3, #16384	; 0x4000
   15240:	beq	152ec <__assert_fail@plt+0x3a98>
   15244:	mov	r0, r5
   15248:	bl	15c28 <__assert_fail@plt+0x43d4>
   1524c:	mov	r4, r0
   15250:	bl	11674 <strlen@plt>
   15254:	add	r3, r0, #8
   15258:	bic	r3, r3, #7
   1525c:	sub	sp, sp, r3
   15260:	add	r2, r0, #1
   15264:	mov	r1, r4
   15268:	mov	r0, sp
   1526c:	bl	114b8 <memcpy@plt>
   15270:	mov	r5, r0
   15274:	mov	r0, r4
   15278:	bl	15fdc <__assert_fail@plt+0x4788>
   1527c:	mov	r0, r5
   15280:	bl	11524 <chdir@plt>
   15284:	cmp	r0, #0
   15288:	blt	15354 <__assert_fail@plt+0x3b00>
   1528c:	sub	r2, fp, #132	; 0x84
   15290:	movw	r1, #61152	; 0xeee0
   15294:	movt	r1, #1
   15298:	mov	r0, #3
   1529c:	bl	11800 <__xstat64@plt>
   152a0:	cmp	r0, #0
   152a4:	blt	1539c <__assert_fail@plt+0x3b48>
   152a8:	movw	r4, #61740	; 0xf12c
   152ac:	movt	r4, #1
   152b0:	mov	r5, #3
   152b4:	b	15480 <__assert_fail@plt+0x3c2c>
   152b8:	bl	116b0 <__errno_location@plt>
   152bc:	ldr	r4, [r0]
   152c0:	mov	r2, #5
   152c4:	movw	r1, #61636	; 0xf0c4
   152c8:	movt	r1, #1
   152cc:	mov	r0, #0
   152d0:	bl	114e8 <dcgettext@plt>
   152d4:	mov	r2, r0
   152d8:	mov	r1, r4
   152dc:	mov	r0, #0
   152e0:	bl	115a8 <error@plt>
   152e4:	mov	r5, #0
   152e8:	b	15454 <__assert_fail@plt+0x3c00>
   152ec:	mov	r2, #104	; 0x68
   152f0:	mov	r1, r4
   152f4:	sub	r0, fp, #132	; 0x84
   152f8:	bl	114b8 <memcpy@plt>
   152fc:	mov	r0, r5
   15300:	bl	11524 <chdir@plt>
   15304:	cmp	r0, #0
   15308:	bge	152a8 <__assert_fail@plt+0x3a54>
   1530c:	bl	116b0 <__errno_location@plt>
   15310:	ldr	r4, [r0]
   15314:	mov	r2, #5
   15318:	movw	r1, #61668	; 0xf0e4
   1531c:	movt	r1, #1
   15320:	mov	r0, #0
   15324:	bl	114e8 <dcgettext@plt>
   15328:	mov	r6, r0
   1532c:	mov	r1, r5
   15330:	mov	r0, #4
   15334:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   15338:	mov	r3, r0
   1533c:	mov	r2, r6
   15340:	mov	r1, r4
   15344:	mov	r0, #0
   15348:	bl	115a8 <error@plt>
   1534c:	mov	r5, #0
   15350:	b	15454 <__assert_fail@plt+0x3c00>
   15354:	bl	116b0 <__errno_location@plt>
   15358:	ldr	r4, [r0]
   1535c:	mov	r2, #5
   15360:	movw	r1, #61668	; 0xf0e4
   15364:	movt	r1, #1
   15368:	mov	r0, #0
   1536c:	bl	114e8 <dcgettext@plt>
   15370:	mov	r6, r0
   15374:	mov	r1, r5
   15378:	mov	r0, #4
   1537c:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   15380:	mov	r3, r0
   15384:	mov	r2, r6
   15388:	mov	r1, r4
   1538c:	mov	r0, #0
   15390:	bl	115a8 <error@plt>
   15394:	mov	r5, #0
   15398:	b	15454 <__assert_fail@plt+0x3c00>
   1539c:	bl	116b0 <__errno_location@plt>
   153a0:	ldr	r4, [r0]
   153a4:	mov	r2, #5
   153a8:	movw	r1, #61700	; 0xf104
   153ac:	movt	r1, #1
   153b0:	mov	r0, #0
   153b4:	bl	114e8 <dcgettext@plt>
   153b8:	mov	r6, r0
   153bc:	mov	r1, r5
   153c0:	mov	r0, #4
   153c4:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   153c8:	mov	r3, r0
   153cc:	mov	r2, r6
   153d0:	mov	r1, r4
   153d4:	mov	r0, #0
   153d8:	bl	115a8 <error@plt>
   153dc:	mov	r5, #0
   153e0:	b	1542c <__assert_fail@plt+0x3bd8>
   153e4:	bl	116b0 <__errno_location@plt>
   153e8:	ldr	r4, [r0]
   153ec:	mov	r2, #5
   153f0:	movw	r1, #61744	; 0xf130
   153f4:	movt	r1, #1
   153f8:	mov	r0, #0
   153fc:	bl	114e8 <dcgettext@plt>
   15400:	mov	r5, r0
   15404:	movw	r1, #61740	; 0xf12c
   15408:	movt	r1, #1
   1540c:	mov	r0, #4
   15410:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   15414:	mov	r3, r0
   15418:	mov	r2, r5
   1541c:	mov	r1, r4
   15420:	mov	r0, #0
   15424:	bl	115a8 <error@plt>
   15428:	mov	r5, #0
   1542c:	bl	116b0 <__errno_location@plt>
   15430:	mov	r4, r0
   15434:	ldr	r6, [r0]
   15438:	sub	r0, fp, #28
   1543c:	bl	1aa44 <__assert_fail@plt+0x91f0>
   15440:	cmp	r0, #0
   15444:	bne	15524 <__assert_fail@plt+0x3cd0>
   15448:	sub	r0, fp, #28
   1544c:	bl	1aa78 <__assert_fail@plt+0x9224>
   15450:	str	r6, [r4]
   15454:	mov	r0, r5
   15458:	sub	sp, fp, #16
   1545c:	ldrd	r4, [sp]
   15460:	ldr	r6, [sp, #8]
   15464:	ldr	fp, [sp, #12]
   15468:	add	sp, sp, #16
   1546c:	pop	{pc}		; (ldr pc, [sp], #4)
   15470:	mov	r2, #104	; 0x68
   15474:	sub	r1, fp, #236	; 0xec
   15478:	sub	r0, fp, #132	; 0x84
   1547c:	bl	114b8 <memcpy@plt>
   15480:	sub	r2, fp, #236	; 0xec
   15484:	mov	r1, r4
   15488:	mov	r0, r5
   1548c:	bl	11800 <__xstat64@plt>
   15490:	cmp	r0, #0
   15494:	blt	153e4 <__assert_fail@plt+0x3b90>
   15498:	ldrd	r0, [fp, #-236]	; 0xffffff14
   1549c:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   154a0:	cmp	r1, r3
   154a4:	cmpeq	r0, r2
   154a8:	bne	15518 <__assert_fail@plt+0x3cc4>
   154ac:	ldrd	r0, [fp, #-140]	; 0xffffff74
   154b0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   154b4:	cmp	r1, r3
   154b8:	cmpeq	r0, r2
   154bc:	beq	15518 <__assert_fail@plt+0x3cc4>
   154c0:	mov	r0, r4
   154c4:	bl	11524 <chdir@plt>
   154c8:	cmp	r0, #0
   154cc:	bge	15470 <__assert_fail@plt+0x3c1c>
   154d0:	bl	116b0 <__errno_location@plt>
   154d4:	ldr	r4, [r0]
   154d8:	mov	r2, #5
   154dc:	movw	r1, #61668	; 0xf0e4
   154e0:	movt	r1, #1
   154e4:	mov	r0, #0
   154e8:	bl	114e8 <dcgettext@plt>
   154ec:	mov	r5, r0
   154f0:	movw	r1, #61740	; 0xf12c
   154f4:	movt	r1, #1
   154f8:	mov	r0, #4
   154fc:	bl	1a6d4 <__assert_fail@plt+0x8e80>
   15500:	mov	r3, r0
   15504:	mov	r2, r5
   15508:	mov	r1, r4
   1550c:	mov	r0, #0
   15510:	bl	115a8 <error@plt>
   15514:	b	15428 <__assert_fail@plt+0x3bd4>
   15518:	bl	1bb90 <__assert_fail@plt+0xa33c>
   1551c:	mov	r5, r0
   15520:	b	1542c <__assert_fail@plt+0x3bd8>
   15524:	ldr	r4, [r4]
   15528:	mov	r2, #5
   1552c:	movw	r1, #61760	; 0xf140
   15530:	movt	r1, #1
   15534:	mov	r0, #0
   15538:	bl	114e8 <dcgettext@plt>
   1553c:	mov	r2, r0
   15540:	mov	r1, r4
   15544:	mov	r0, #1
   15548:	bl	115a8 <error@plt>
   1554c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15550:	strd	r6, [sp, #8]
   15554:	str	r8, [sp, #16]
   15558:	str	lr, [sp, #20]
   1555c:	sub	sp, sp, #128	; 0x80
   15560:	mov	r8, r0
   15564:	subs	r7, r1, #0
   15568:	moveq	r4, #128	; 0x80
   1556c:	beq	1557c <__assert_fail@plt+0x3d28>
   15570:	cmp	r7, #1024	; 0x400
   15574:	addls	r4, r7, #1
   15578:	movwhi	r4, #1025	; 0x401
   1557c:	cmp	r4, #128	; 0x80
   15580:	cmpeq	r7, #0
   15584:	moveq	r6, #0
   15588:	moveq	r5, sp
   1558c:	bne	155d4 <__assert_fail@plt+0x3d80>
   15590:	mov	r2, r4
   15594:	mov	r1, r5
   15598:	mov	r0, r8
   1559c:	bl	11548 <readlink@plt>
   155a0:	cmp	r0, #0
   155a4:	blt	15600 <__assert_fail@plt+0x3dac>
   155a8:	cmp	r4, r0
   155ac:	bhi	15628 <__assert_fail@plt+0x3dd4>
   155b0:	mov	r0, r6
   155b4:	bl	15fdc <__assert_fail@plt+0x4788>
   155b8:	cmn	r4, #-1073741823	; 0xc0000001
   155bc:	lslls	r4, r4, #1
   155c0:	bls	1557c <__assert_fail@plt+0x3d28>
   155c4:	cmn	r4, #-2147483646	; 0x80000002
   155c8:	bhi	15684 <__assert_fail@plt+0x3e30>
   155cc:	mvn	r4, #-2147483648	; 0x80000000
   155d0:	b	1557c <__assert_fail@plt+0x3d28>
   155d4:	mov	r0, r4
   155d8:	bl	1bc70 <__assert_fail@plt+0xa41c>
   155dc:	subs	r5, r0, #0
   155e0:	beq	155ec <__assert_fail@plt+0x3d98>
   155e4:	mov	r6, r5
   155e8:	b	15590 <__assert_fail@plt+0x3d3c>
   155ec:	bl	116b0 <__errno_location@plt>
   155f0:	mov	r3, #12
   155f4:	str	r3, [r0]
   155f8:	mov	r6, r5
   155fc:	b	1560c <__assert_fail@plt+0x3db8>
   15600:	mov	r0, r6
   15604:	bl	15fdc <__assert_fail@plt+0x4788>
   15608:	mov	r6, #0
   1560c:	mov	r0, r6
   15610:	add	sp, sp, #128	; 0x80
   15614:	ldrd	r4, [sp]
   15618:	ldrd	r6, [sp, #8]
   1561c:	ldr	r8, [sp, #16]
   15620:	add	sp, sp, #20
   15624:	pop	{pc}		; (ldr pc, [sp], #4)
   15628:	mov	r3, #0
   1562c:	strb	r3, [r5, r0]
   15630:	cmp	r6, r3
   15634:	beq	15658 <__assert_fail@plt+0x3e04>
   15638:	add	r1, r0, #1
   1563c:	cmp	r1, r4
   15640:	bcs	1560c <__assert_fail@plt+0x3db8>
   15644:	mov	r0, r6
   15648:	bl	1bcac <__assert_fail@plt+0xa458>
   1564c:	cmp	r0, #0
   15650:	movne	r6, r0
   15654:	b	1560c <__assert_fail@plt+0x3db8>
   15658:	add	r4, r0, #1
   1565c:	mov	r0, r4
   15660:	bl	1bc70 <__assert_fail@plt+0xa41c>
   15664:	subs	r6, r0, #0
   15668:	beq	1560c <__assert_fail@plt+0x3db8>
   1566c:	mov	r2, r4
   15670:	mov	r1, r5
   15674:	mov	r0, r6
   15678:	bl	114b8 <memcpy@plt>
   1567c:	mov	r6, r0
   15680:	b	1560c <__assert_fail@plt+0x3db8>
   15684:	bl	116b0 <__errno_location@plt>
   15688:	mov	r3, #12
   1568c:	str	r3, [r0]
   15690:	mov	r6, #0
   15694:	b	1560c <__assert_fail@plt+0x3db8>
   15698:	str	r4, [sp, #-8]!
   1569c:	str	lr, [sp, #4]
   156a0:	mov	r0, #1
   156a4:	bl	147e4 <__assert_fail@plt+0x2f90>
   156a8:	ldr	r4, [sp]
   156ac:	add	sp, sp, #4
   156b0:	pop	{pc}		; (ldr pc, [sp], #4)
   156b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   156b8:	strd	r6, [sp, #8]
   156bc:	strd	r8, [sp, #16]
   156c0:	strd	sl, [sp, #24]
   156c4:	str	lr, [sp, #32]
   156c8:	sub	sp, sp, #12
   156cc:	str	r0, [sp]
   156d0:	mov	r5, r1
   156d4:	mov	r6, r2
   156d8:	str	r2, [sp, #4]
   156dc:	mov	r9, r3
   156e0:	bl	11674 <strlen@plt>
   156e4:	ldr	r4, [r5]
   156e8:	cmp	r4, #0
   156ec:	beq	157a8 <__assert_fail@plt+0x3f54>
   156f0:	mov	r8, r0
   156f4:	mov	fp, #0
   156f8:	mvn	sl, #0
   156fc:	mov	r7, fp
   15700:	b	15720 <__assert_fail@plt+0x3ecc>
   15704:	mov	sl, r7
   15708:	b	15788 <__assert_fail@plt+0x3f34>
   1570c:	add	r7, r7, #1
   15710:	ldr	r4, [r5, #4]!
   15714:	add	r6, r6, r9
   15718:	cmp	r4, #0
   1571c:	beq	15780 <__assert_fail@plt+0x3f2c>
   15720:	mov	r2, r8
   15724:	ldr	r1, [sp]
   15728:	mov	r0, r4
   1572c:	bl	11818 <strncmp@plt>
   15730:	cmp	r0, #0
   15734:	bne	1570c <__assert_fail@plt+0x3eb8>
   15738:	mov	r0, r4
   1573c:	bl	11674 <strlen@plt>
   15740:	cmp	r0, r8
   15744:	beq	15704 <__assert_fail@plt+0x3eb0>
   15748:	cmn	sl, #1
   1574c:	moveq	sl, r7
   15750:	beq	1570c <__assert_fail@plt+0x3eb8>
   15754:	ldr	r3, [sp, #4]
   15758:	cmp	r3, #0
   1575c:	moveq	fp, #1
   15760:	beq	1570c <__assert_fail@plt+0x3eb8>
   15764:	mov	r2, r9
   15768:	mov	r1, r6
   1576c:	mla	r0, r9, sl, r3
   15770:	bl	114d0 <memcmp@plt>
   15774:	cmp	r0, #0
   15778:	movne	fp, #1
   1577c:	b	1570c <__assert_fail@plt+0x3eb8>
   15780:	cmp	fp, #0
   15784:	mvnne	sl, #1
   15788:	mov	r0, sl
   1578c:	add	sp, sp, #12
   15790:	ldrd	r4, [sp]
   15794:	ldrd	r6, [sp, #8]
   15798:	ldrd	r8, [sp, #16]
   1579c:	ldrd	sl, [sp, #24]
   157a0:	add	sp, sp, #32
   157a4:	pop	{pc}		; (ldr pc, [sp], #4)
   157a8:	mvn	sl, #0
   157ac:	b	15788 <__assert_fail@plt+0x3f34>
   157b0:	strd	r4, [sp, #-16]!
   157b4:	str	r6, [sp, #8]
   157b8:	str	lr, [sp, #12]
   157bc:	mov	r6, r0
   157c0:	ldr	r0, [r1]
   157c4:	cmp	r0, #0
   157c8:	beq	15810 <__assert_fail@plt+0x3fbc>
   157cc:	mov	r4, r1
   157d0:	mov	r5, #0
   157d4:	mov	r1, r6
   157d8:	bl	11464 <strcmp@plt>
   157dc:	cmp	r0, #0
   157e0:	beq	157fc <__assert_fail@plt+0x3fa8>
   157e4:	add	r5, r5, #1
   157e8:	ldr	r0, [r4, #4]!
   157ec:	cmp	r0, #0
   157f0:	bne	157d4 <__assert_fail@plt+0x3f80>
   157f4:	mvn	r0, #0
   157f8:	b	15800 <__assert_fail@plt+0x3fac>
   157fc:	mov	r0, r5
   15800:	ldrd	r4, [sp]
   15804:	ldr	r6, [sp, #8]
   15808:	add	sp, sp, #12
   1580c:	pop	{pc}		; (ldr pc, [sp], #4)
   15810:	mvn	r0, #0
   15814:	b	15800 <__assert_fail@plt+0x3fac>
   15818:	strd	r4, [sp, #-16]!
   1581c:	str	r6, [sp, #8]
   15820:	str	lr, [sp, #12]
   15824:	sub	sp, sp, #8
   15828:	mov	r6, r0
   1582c:	mov	r5, r1
   15830:	cmn	r2, #1
   15834:	mov	r2, #5
   15838:	movweq	r1, #61824	; 0xf180
   1583c:	movteq	r1, #1
   15840:	movwne	r1, #61852	; 0xf19c
   15844:	movtne	r1, #1
   15848:	mov	r0, #0
   1584c:	bl	114e8 <dcgettext@plt>
   15850:	mov	r4, r0
   15854:	mov	r2, r5
   15858:	mov	r1, #8
   1585c:	mov	r0, #0
   15860:	bl	1a648 <__assert_fail@plt+0x8df4>
   15864:	mov	r5, r0
   15868:	mov	r1, r6
   1586c:	mov	r0, #1
   15870:	bl	1a9a8 <__assert_fail@plt+0x9154>
   15874:	str	r0, [sp]
   15878:	mov	r3, r5
   1587c:	mov	r2, r4
   15880:	mov	r1, #0
   15884:	mov	r0, r1
   15888:	bl	115a8 <error@plt>
   1588c:	add	sp, sp, #8
   15890:	ldrd	r4, [sp]
   15894:	ldr	r6, [sp, #8]
   15898:	add	sp, sp, #12
   1589c:	pop	{pc}		; (ldr pc, [sp], #4)
   158a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158a4:	strd	r6, [sp, #8]
   158a8:	strd	r8, [sp, #16]
   158ac:	strd	sl, [sp, #24]
   158b0:	str	lr, [sp, #32]
   158b4:	sub	sp, sp, #12
   158b8:	mov	r7, r0
   158bc:	mov	r4, r1
   158c0:	mov	r8, r2
   158c4:	mov	r2, #5
   158c8:	movw	r1, #61884	; 0xf1bc
   158cc:	movt	r1, #1
   158d0:	mov	r0, #0
   158d4:	bl	114e8 <dcgettext@plt>
   158d8:	movw	r3, #488	; 0x1e8
   158dc:	movt	r3, #3
   158e0:	ldr	r1, [r3]
   158e4:	bl	11428 <fputs_unlocked@plt>
   158e8:	ldr	r5, [r7]
   158ec:	cmp	r5, #0
   158f0:	beq	1599c <__assert_fail@plt+0x4148>
   158f4:	mov	r3, #0
   158f8:	str	r3, [sp]
   158fc:	mov	r6, r3
   15900:	movw	sl, #488	; 0x1e8
   15904:	movt	sl, #3
   15908:	movw	fp, #61908	; 0xf1d4
   1590c:	movt	fp, #1
   15910:	movw	r3, #61916	; 0xf1dc
   15914:	movt	r3, #1
   15918:	str	r3, [sp, #4]
   1591c:	b	15958 <__assert_fail@plt+0x4104>
   15920:	ldr	r9, [sl]
   15924:	mov	r0, r5
   15928:	bl	1a9c4 <__assert_fail@plt+0x9170>
   1592c:	mov	r3, r0
   15930:	mov	r2, fp
   15934:	mov	r1, #1
   15938:	mov	r0, r9
   1593c:	bl	11704 <__fprintf_chk@plt>
   15940:	str	r4, [sp]
   15944:	add	r6, r6, #1
   15948:	ldr	r5, [r7, #4]!
   1594c:	add	r4, r4, r8
   15950:	cmp	r5, #0
   15954:	beq	1599c <__assert_fail@plt+0x4148>
   15958:	cmp	r6, #0
   1595c:	beq	15920 <__assert_fail@plt+0x40cc>
   15960:	mov	r2, r8
   15964:	mov	r1, r4
   15968:	ldr	r0, [sp]
   1596c:	bl	114d0 <memcmp@plt>
   15970:	cmp	r0, #0
   15974:	bne	15920 <__assert_fail@plt+0x40cc>
   15978:	ldr	r9, [sl]
   1597c:	mov	r0, r5
   15980:	bl	1a9c4 <__assert_fail@plt+0x9170>
   15984:	mov	r3, r0
   15988:	ldr	r2, [sp, #4]
   1598c:	mov	r1, #1
   15990:	mov	r0, r9
   15994:	bl	11704 <__fprintf_chk@plt>
   15998:	b	15944 <__assert_fail@plt+0x40f0>
   1599c:	movw	r3, #488	; 0x1e8
   159a0:	movt	r3, #3
   159a4:	ldr	r0, [r3]
   159a8:	ldr	r3, [r0, #20]
   159ac:	ldr	r2, [r0, #24]
   159b0:	cmp	r3, r2
   159b4:	addcc	r2, r3, #1
   159b8:	strcc	r2, [r0, #20]
   159bc:	movcc	r2, #10
   159c0:	strbcc	r2, [r3]
   159c4:	bcs	159e4 <__assert_fail@plt+0x4190>
   159c8:	add	sp, sp, #12
   159cc:	ldrd	r4, [sp]
   159d0:	ldrd	r6, [sp, #8]
   159d4:	ldrd	r8, [sp, #16]
   159d8:	ldrd	sl, [sp, #24]
   159dc:	add	sp, sp, #32
   159e0:	pop	{pc}		; (ldr pc, [sp], #4)
   159e4:	mov	r1, #10
   159e8:	bl	11758 <__overflow@plt>
   159ec:	b	159c8 <__assert_fail@plt+0x4174>
   159f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159f4:	strd	r6, [sp, #8]
   159f8:	str	r8, [sp, #16]
   159fc:	str	lr, [sp, #20]
   15a00:	mov	r7, r0
   15a04:	mov	r5, r1
   15a08:	mov	r4, r2
   15a0c:	mov	r6, r3
   15a10:	ldrb	r3, [sp, #32]
   15a14:	cmp	r3, #0
   15a18:	beq	15a4c <__assert_fail@plt+0x41f8>
   15a1c:	ldr	r3, [sp, #24]
   15a20:	mov	r2, r6
   15a24:	mov	r1, r4
   15a28:	mov	r0, r5
   15a2c:	bl	156b4 <__assert_fail@plt+0x3e60>
   15a30:	cmp	r0, #0
   15a34:	blt	15a5c <__assert_fail@plt+0x4208>
   15a38:	ldrd	r4, [sp]
   15a3c:	ldrd	r6, [sp, #8]
   15a40:	ldr	r8, [sp, #16]
   15a44:	add	sp, sp, #20
   15a48:	pop	{pc}		; (ldr pc, [sp], #4)
   15a4c:	mov	r1, r2
   15a50:	mov	r0, r5
   15a54:	bl	157b0 <__assert_fail@plt+0x3f5c>
   15a58:	b	15a30 <__assert_fail@plt+0x41dc>
   15a5c:	mov	r2, r0
   15a60:	mov	r1, r5
   15a64:	mov	r0, r7
   15a68:	bl	15818 <__assert_fail@plt+0x3fc4>
   15a6c:	ldr	r2, [sp, #24]
   15a70:	mov	r1, r6
   15a74:	mov	r0, r4
   15a78:	bl	158a0 <__assert_fail@plt+0x404c>
   15a7c:	ldr	r3, [sp, #28]
   15a80:	blx	r3
   15a84:	mvn	r0, #0
   15a88:	b	15a38 <__assert_fail@plt+0x41e4>
   15a8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15a90:	strd	r6, [sp, #8]
   15a94:	str	r8, [sp, #16]
   15a98:	str	lr, [sp, #20]
   15a9c:	ldr	r7, [r1]
   15aa0:	cmp	r7, #0
   15aa4:	beq	15ae0 <__assert_fail@plt+0x428c>
   15aa8:	mov	r6, r3
   15aac:	mov	r8, r0
   15ab0:	mov	r4, r2
   15ab4:	mov	r5, r1
   15ab8:	mov	r2, r6
   15abc:	mov	r1, r4
   15ac0:	mov	r0, r8
   15ac4:	bl	114d0 <memcmp@plt>
   15ac8:	cmp	r0, #0
   15acc:	beq	15ae0 <__assert_fail@plt+0x428c>
   15ad0:	ldr	r7, [r5, #4]!
   15ad4:	add	r4, r4, r6
   15ad8:	cmp	r7, #0
   15adc:	bne	15ab8 <__assert_fail@plt+0x4264>
   15ae0:	mov	r0, r7
   15ae4:	ldrd	r4, [sp]
   15ae8:	ldrd	r6, [sp, #8]
   15aec:	ldr	r8, [sp, #16]
   15af0:	add	sp, sp, #20
   15af4:	pop	{pc}		; (ldr pc, [sp], #4)
   15af8:	movw	r3, #624	; 0x270
   15afc:	movt	r3, #3
   15b00:	str	r0, [r3]
   15b04:	bx	lr
   15b08:	movw	r3, #624	; 0x270
   15b0c:	movt	r3, #3
   15b10:	strb	r0, [r3, #4]
   15b14:	bx	lr
   15b18:	strd	r4, [sp, #-16]!
   15b1c:	str	r6, [sp, #8]
   15b20:	str	lr, [sp, #12]
   15b24:	sub	sp, sp, #8
   15b28:	movw	r3, #492	; 0x1ec
   15b2c:	movt	r3, #3
   15b30:	ldr	r0, [r3]
   15b34:	bl	1ca74 <__assert_fail@plt+0xb220>
   15b38:	cmp	r0, #0
   15b3c:	beq	15b64 <__assert_fail@plt+0x4310>
   15b40:	movw	r3, #624	; 0x270
   15b44:	movt	r3, #3
   15b48:	ldrb	r3, [r3, #4]
   15b4c:	cmp	r3, #0
   15b50:	beq	15b90 <__assert_fail@plt+0x433c>
   15b54:	bl	116b0 <__errno_location@plt>
   15b58:	ldr	r3, [r0]
   15b5c:	cmp	r3, #32
   15b60:	bne	15b90 <__assert_fail@plt+0x433c>
   15b64:	movw	r3, #488	; 0x1e8
   15b68:	movt	r3, #3
   15b6c:	ldr	r0, [r3]
   15b70:	bl	1ca74 <__assert_fail@plt+0xb220>
   15b74:	cmp	r0, #0
   15b78:	bne	15c18 <__assert_fail@plt+0x43c4>
   15b7c:	add	sp, sp, #8
   15b80:	ldrd	r4, [sp]
   15b84:	ldr	r6, [sp, #8]
   15b88:	add	sp, sp, #12
   15b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b90:	mov	r2, #5
   15b94:	movw	r1, #61924	; 0xf1e4
   15b98:	movt	r1, #1
   15b9c:	mov	r0, #0
   15ba0:	bl	114e8 <dcgettext@plt>
   15ba4:	mov	r4, r0
   15ba8:	movw	r3, #624	; 0x270
   15bac:	movt	r3, #3
   15bb0:	ldr	r5, [r3]
   15bb4:	cmp	r5, #0
   15bb8:	beq	15bf8 <__assert_fail@plt+0x43a4>
   15bbc:	bl	116b0 <__errno_location@plt>
   15bc0:	ldr	r6, [r0]
   15bc4:	mov	r0, r5
   15bc8:	bl	1a7c0 <__assert_fail@plt+0x8f6c>
   15bcc:	str	r4, [sp]
   15bd0:	mov	r3, r0
   15bd4:	movw	r2, #61936	; 0xf1f0
   15bd8:	movt	r2, #1
   15bdc:	mov	r1, r6
   15be0:	mov	r0, #0
   15be4:	bl	115a8 <error@plt>
   15be8:	movw	r3, #400	; 0x190
   15bec:	movt	r3, #3
   15bf0:	ldr	r0, [r3]
   15bf4:	bl	114ac <_exit@plt>
   15bf8:	bl	116b0 <__errno_location@plt>
   15bfc:	mov	r3, r4
   15c00:	movw	r2, #60652	; 0xecec
   15c04:	movt	r2, #1
   15c08:	ldr	r1, [r0]
   15c0c:	mov	r0, #0
   15c10:	bl	115a8 <error@plt>
   15c14:	b	15be8 <__assert_fail@plt+0x4394>
   15c18:	movw	r3, #400	; 0x190
   15c1c:	movt	r3, #3
   15c20:	ldr	r0, [r3]
   15c24:	bl	114ac <_exit@plt>
   15c28:	str	r4, [sp, #-8]!
   15c2c:	str	lr, [sp, #4]
   15c30:	bl	15cc8 <__assert_fail@plt+0x4474>
   15c34:	cmp	r0, #0
   15c38:	beq	15c48 <__assert_fail@plt+0x43f4>
   15c3c:	ldr	r4, [sp]
   15c40:	add	sp, sp, #4
   15c44:	pop	{pc}		; (ldr pc, [sp], #4)
   15c48:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   15c4c:	strd	r4, [sp, #-16]!
   15c50:	str	r6, [sp, #8]
   15c54:	str	lr, [sp, #12]
   15c58:	mov	r4, r0
   15c5c:	ldrb	ip, [r0]
   15c60:	cmp	ip, #47	; 0x2f
   15c64:	movne	r5, #0
   15c68:	moveq	r5, #1
   15c6c:	bl	1c668 <__assert_fail@plt+0xae14>
   15c70:	sub	r0, r0, r4
   15c74:	cmp	r0, r5
   15c78:	bls	15cb8 <__assert_fail@plt+0x4464>
   15c7c:	add	r3, r4, r0
   15c80:	ldrb	r3, [r3, #-1]
   15c84:	cmp	r3, #47	; 0x2f
   15c88:	bne	15cb8 <__assert_fail@plt+0x4464>
   15c8c:	sub	r0, r0, #2
   15c90:	add	r3, r4, r0
   15c94:	sub	ip, r4, #1
   15c98:	add	ip, ip, r5
   15c9c:	rsb	r2, r4, #1
   15ca0:	add	r0, r2, r3
   15ca4:	cmp	r3, ip
   15ca8:	beq	15cb8 <__assert_fail@plt+0x4464>
   15cac:	ldrb	r1, [r3], #-1
   15cb0:	cmp	r1, #47	; 0x2f
   15cb4:	beq	15ca0 <__assert_fail@plt+0x444c>
   15cb8:	ldrd	r4, [sp]
   15cbc:	ldr	r6, [sp, #8]
   15cc0:	add	sp, sp, #12
   15cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc8:	strd	r4, [sp, #-16]!
   15ccc:	str	r6, [sp, #8]
   15cd0:	str	lr, [sp, #12]
   15cd4:	mov	r6, r0
   15cd8:	bl	15c4c <__assert_fail@plt+0x43f8>
   15cdc:	mov	r4, r0
   15ce0:	add	r3, r0, #1
   15ce4:	cmp	r0, #0
   15ce8:	movne	r0, r3
   15cec:	addeq	r0, r3, #1
   15cf0:	bl	1bc70 <__assert_fail@plt+0xa41c>
   15cf4:	subs	r5, r0, #0
   15cf8:	beq	15d28 <__assert_fail@plt+0x44d4>
   15cfc:	mov	r2, r4
   15d00:	mov	r1, r6
   15d04:	mov	r0, r5
   15d08:	bl	114b8 <memcpy@plt>
   15d0c:	cmp	r4, #0
   15d10:	bne	15d20 <__assert_fail@plt+0x44cc>
   15d14:	mov	r3, #46	; 0x2e
   15d18:	strb	r3, [r5]
   15d1c:	mov	r4, #1
   15d20:	mov	r3, #0
   15d24:	strb	r3, [r5, r4]
   15d28:	mov	r0, r5
   15d2c:	ldrd	r4, [sp]
   15d30:	ldr	r6, [sp, #8]
   15d34:	add	sp, sp, #12
   15d38:	pop	{pc}		; (ldr pc, [sp], #4)
   15d3c:	str	r4, [sp, #-8]!
   15d40:	str	lr, [sp, #4]
   15d44:	ldr	r3, [r0, #16]
   15d48:	and	r3, r3, #61440	; 0xf000
   15d4c:	cmp	r3, #32768	; 0x8000
   15d50:	beq	15da8 <__assert_fail@plt+0x4554>
   15d54:	cmp	r3, #16384	; 0x4000
   15d58:	beq	15dd0 <__assert_fail@plt+0x457c>
   15d5c:	cmp	r3, #40960	; 0xa000
   15d60:	beq	15de8 <__assert_fail@plt+0x4594>
   15d64:	cmp	r3, #24576	; 0x6000
   15d68:	beq	15e00 <__assert_fail@plt+0x45ac>
   15d6c:	cmp	r3, #8192	; 0x2000
   15d70:	beq	15e18 <__assert_fail@plt+0x45c4>
   15d74:	cmp	r3, #4096	; 0x1000
   15d78:	beq	15e30 <__assert_fail@plt+0x45dc>
   15d7c:	cmp	r3, #49152	; 0xc000
   15d80:	mov	r2, #5
   15d84:	movweq	r1, #62048	; 0xf260
   15d88:	movteq	r1, #1
   15d8c:	movwne	r1, #62056	; 0xf268
   15d90:	movtne	r1, #1
   15d94:	mov	r0, #0
   15d98:	bl	114e8 <dcgettext@plt>
   15d9c:	ldr	r4, [sp]
   15da0:	add	sp, sp, #4
   15da4:	pop	{pc}		; (ldr pc, [sp], #4)
   15da8:	ldrd	r2, [r0, #48]	; 0x30
   15dac:	orrs	r3, r2, r3
   15db0:	mov	r2, #5
   15db4:	movweq	r1, #61944	; 0xf1f8
   15db8:	movteq	r1, #1
   15dbc:	movwne	r1, #61964	; 0xf20c
   15dc0:	movtne	r1, #1
   15dc4:	mov	r0, #0
   15dc8:	bl	114e8 <dcgettext@plt>
   15dcc:	b	15d9c <__assert_fail@plt+0x4548>
   15dd0:	mov	r2, #5
   15dd4:	movw	r1, #61796	; 0xf164
   15dd8:	movt	r1, #1
   15ddc:	mov	r0, #0
   15de0:	bl	114e8 <dcgettext@plt>
   15de4:	b	15d9c <__assert_fail@plt+0x4548>
   15de8:	mov	r2, #5
   15dec:	movw	r1, #61980	; 0xf21c
   15df0:	movt	r1, #1
   15df4:	mov	r0, #0
   15df8:	bl	114e8 <dcgettext@plt>
   15dfc:	b	15d9c <__assert_fail@plt+0x4548>
   15e00:	mov	r2, #5
   15e04:	movw	r1, #61996	; 0xf22c
   15e08:	movt	r1, #1
   15e0c:	mov	r0, #0
   15e10:	bl	114e8 <dcgettext@plt>
   15e14:	b	15d9c <__assert_fail@plt+0x4548>
   15e18:	mov	r2, #5
   15e1c:	movw	r1, #62016	; 0xf240
   15e20:	movt	r1, #1
   15e24:	mov	r0, #0
   15e28:	bl	114e8 <dcgettext@plt>
   15e2c:	b	15d9c <__assert_fail@plt+0x4548>
   15e30:	mov	r2, #5
   15e34:	movw	r1, #62040	; 0xf258
   15e38:	movt	r1, #1
   15e3c:	mov	r0, #0
   15e40:	bl	114e8 <dcgettext@plt>
   15e44:	b	15d9c <__assert_fail@plt+0x4548>
   15e48:	and	r3, r0, #61440	; 0xf000
   15e4c:	cmp	r3, #32768	; 0x8000
   15e50:	moveq	r3, #45	; 0x2d
   15e54:	beq	15ea0 <__assert_fail@plt+0x464c>
   15e58:	cmp	r3, #16384	; 0x4000
   15e5c:	moveq	r3, #100	; 0x64
   15e60:	beq	15ea0 <__assert_fail@plt+0x464c>
   15e64:	cmp	r3, #24576	; 0x6000
   15e68:	moveq	r3, #98	; 0x62
   15e6c:	beq	15ea0 <__assert_fail@plt+0x464c>
   15e70:	cmp	r3, #8192	; 0x2000
   15e74:	moveq	r3, #99	; 0x63
   15e78:	beq	15ea0 <__assert_fail@plt+0x464c>
   15e7c:	cmp	r3, #40960	; 0xa000
   15e80:	moveq	r3, #108	; 0x6c
   15e84:	beq	15ea0 <__assert_fail@plt+0x464c>
   15e88:	cmp	r3, #4096	; 0x1000
   15e8c:	moveq	r3, #112	; 0x70
   15e90:	beq	15ea0 <__assert_fail@plt+0x464c>
   15e94:	cmp	r3, #49152	; 0xc000
   15e98:	movne	r3, #63	; 0x3f
   15e9c:	moveq	r3, #115	; 0x73
   15ea0:	strb	r3, [r1]
   15ea4:	and	r3, r0, #256	; 0x100
   15ea8:	cmp	r3, #0
   15eac:	movne	r3, #114	; 0x72
   15eb0:	moveq	r3, #45	; 0x2d
   15eb4:	strb	r3, [r1, #1]
   15eb8:	and	r3, r0, #128	; 0x80
   15ebc:	cmp	r3, #0
   15ec0:	movne	r3, #119	; 0x77
   15ec4:	moveq	r3, #45	; 0x2d
   15ec8:	strb	r3, [r1, #2]
   15ecc:	tst	r0, #2048	; 0x800
   15ed0:	beq	15f84 <__assert_fail@plt+0x4730>
   15ed4:	and	r3, r0, #64	; 0x40
   15ed8:	cmp	r3, #0
   15edc:	movne	r3, #115	; 0x73
   15ee0:	moveq	r3, #83	; 0x53
   15ee4:	strb	r3, [r1, #3]
   15ee8:	and	r3, r0, #32
   15eec:	cmp	r3, #0
   15ef0:	movne	r3, #114	; 0x72
   15ef4:	moveq	r3, #45	; 0x2d
   15ef8:	strb	r3, [r1, #4]
   15efc:	and	r3, r0, #16
   15f00:	cmp	r3, #0
   15f04:	movne	r3, #119	; 0x77
   15f08:	moveq	r3, #45	; 0x2d
   15f0c:	strb	r3, [r1, #5]
   15f10:	tst	r0, #1024	; 0x400
   15f14:	beq	15f98 <__assert_fail@plt+0x4744>
   15f18:	and	r3, r0, #8
   15f1c:	cmp	r3, #0
   15f20:	movne	r3, #115	; 0x73
   15f24:	moveq	r3, #83	; 0x53
   15f28:	strb	r3, [r1, #6]
   15f2c:	and	r3, r0, #4
   15f30:	cmp	r3, #0
   15f34:	movne	r3, #114	; 0x72
   15f38:	moveq	r3, #45	; 0x2d
   15f3c:	strb	r3, [r1, #7]
   15f40:	and	r3, r0, #2
   15f44:	cmp	r3, #0
   15f48:	movne	r3, #119	; 0x77
   15f4c:	moveq	r3, #45	; 0x2d
   15f50:	strb	r3, [r1, #8]
   15f54:	tst	r0, #512	; 0x200
   15f58:	beq	15fac <__assert_fail@plt+0x4758>
   15f5c:	and	r0, r0, #1
   15f60:	cmp	r0, #0
   15f64:	movne	r3, #116	; 0x74
   15f68:	moveq	r3, #84	; 0x54
   15f6c:	strb	r3, [r1, #9]
   15f70:	mov	r3, #32
   15f74:	strb	r3, [r1, #10]
   15f78:	mov	r3, #0
   15f7c:	strb	r3, [r1, #11]
   15f80:	bx	lr
   15f84:	and	r3, r0, #64	; 0x40
   15f88:	cmp	r3, #0
   15f8c:	movne	r3, #120	; 0x78
   15f90:	moveq	r3, #45	; 0x2d
   15f94:	b	15ee4 <__assert_fail@plt+0x4690>
   15f98:	and	r3, r0, #8
   15f9c:	cmp	r3, #0
   15fa0:	movne	r3, #120	; 0x78
   15fa4:	moveq	r3, #45	; 0x2d
   15fa8:	b	15f28 <__assert_fail@plt+0x46d4>
   15fac:	and	r0, r0, #1
   15fb0:	cmp	r0, #0
   15fb4:	movne	r3, #120	; 0x78
   15fb8:	moveq	r3, #45	; 0x2d
   15fbc:	b	15f6c <__assert_fail@plt+0x4718>
   15fc0:	str	r4, [sp, #-8]!
   15fc4:	str	lr, [sp, #4]
   15fc8:	ldr	r0, [r0, #16]
   15fcc:	bl	15e48 <__assert_fail@plt+0x45f4>
   15fd0:	ldr	r4, [sp]
   15fd4:	add	sp, sp, #4
   15fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fdc:	strd	r4, [sp, #-12]!
   15fe0:	str	lr, [sp, #8]
   15fe4:	sub	sp, sp, #12
   15fe8:	mov	r5, r0
   15fec:	bl	116b0 <__errno_location@plt>
   15ff0:	mov	r4, r0
   15ff4:	ldr	r3, [r0]
   15ff8:	str	r3, [sp]
   15ffc:	str	r3, [sp, #4]
   16000:	mov	r3, #0
   16004:	str	r3, [r0]
   16008:	mov	r0, r5
   1600c:	bl	114a0 <free@plt>
   16010:	ldr	r3, [r4]
   16014:	clz	r3, r3
   16018:	lsr	r3, r3, #5
   1601c:	add	r2, sp, #8
   16020:	add	r3, r2, r3, lsl #2
   16024:	ldr	r3, [r3, #-8]
   16028:	str	r3, [r4]
   1602c:	add	sp, sp, #12
   16030:	ldrd	r4, [sp]
   16034:	add	sp, sp, #8
   16038:	pop	{pc}		; (ldr pc, [sp], #4)
   1603c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16040:	strd	r6, [sp, #8]
   16044:	strd	r8, [sp, #16]
   16048:	str	sl, [sp, #24]
   1604c:	str	lr, [sp, #28]
   16050:	mov	r4, r0
   16054:	mov	r5, r1
   16058:	add	r6, r2, #20
   1605c:	mov	r3, #0
   16060:	strb	r3, [r2, #20]
   16064:	cmp	r0, #0
   16068:	sbcs	r3, r1, #0
   1606c:	movge	r8, #10
   16070:	movge	r9, #0
   16074:	movlt	r8, #10
   16078:	movlt	r9, #0
   1607c:	blt	160e0 <__assert_fail@plt+0x488c>
   16080:	mov	r2, r8
   16084:	mov	r3, r9
   16088:	mov	r0, r4
   1608c:	mov	r1, r5
   16090:	bl	1d3c0 <__assert_fail@plt+0xbb6c>
   16094:	add	r2, r2, #48	; 0x30
   16098:	strb	r2, [r6, #-1]!
   1609c:	mov	r2, r8
   160a0:	mov	r3, r9
   160a4:	mov	r0, r4
   160a8:	mov	r1, r5
   160ac:	bl	1d3c0 <__assert_fail@plt+0xbb6c>
   160b0:	mov	r4, r0
   160b4:	mov	r5, r1
   160b8:	orrs	r3, r4, r5
   160bc:	bne	16080 <__assert_fail@plt+0x482c>
   160c0:	mov	r0, r6
   160c4:	ldrd	r4, [sp]
   160c8:	ldrd	r6, [sp, #8]
   160cc:	ldrd	r8, [sp, #16]
   160d0:	ldr	sl, [sp, #24]
   160d4:	add	sp, sp, #28
   160d8:	pop	{pc}		; (ldr pc, [sp], #4)
   160dc:	mov	r6, r7
   160e0:	sub	r7, r6, #1
   160e4:	mov	r2, r8
   160e8:	mov	r3, r9
   160ec:	mov	r0, r4
   160f0:	mov	r1, r5
   160f4:	bl	1d3c0 <__assert_fail@plt+0xbb6c>
   160f8:	rsb	r2, r2, #48	; 0x30
   160fc:	strb	r2, [r6, #-1]
   16100:	mov	r2, r8
   16104:	mov	r3, r9
   16108:	mov	r0, r4
   1610c:	mov	r1, r5
   16110:	bl	1d3c0 <__assert_fail@plt+0xbb6c>
   16114:	mov	r4, r0
   16118:	mov	r5, r1
   1611c:	orrs	r3, r4, r5
   16120:	bne	160dc <__assert_fail@plt+0x4888>
   16124:	sub	r6, r6, #2
   16128:	mov	r3, #45	; 0x2d
   1612c:	strb	r3, [r7, #-1]
   16130:	b	160c0 <__assert_fail@plt+0x486c>
   16134:	str	r4, [sp, #-8]!
   16138:	str	lr, [sp, #4]
   1613c:	mov	r1, #32
   16140:	bl	11680 <strchr@plt>
   16144:	cmp	r0, #0
   16148:	movne	r3, #0
   1614c:	strbne	r3, [r0]
   16150:	ldr	r4, [sp]
   16154:	add	sp, sp, #4
   16158:	pop	{pc}		; (ldr pc, [sp], #4)
   1615c:	strd	r4, [sp, #-16]!
   16160:	str	r6, [sp, #8]
   16164:	str	lr, [sp, #12]
   16168:	mov	r4, r0
   1616c:	bl	11674 <strlen@plt>
   16170:	add	r0, r0, #1
   16174:	mov	r2, r4
   16178:	mov	r3, #0
   1617c:	b	16194 <__assert_fail@plt+0x4940>
   16180:	strb	r1, [r2]
   16184:	add	r3, r3, #1
   16188:	add	r2, r2, #1
   1618c:	cmp	r0, r3
   16190:	bls	1620c <__assert_fail@plt+0x49b8>
   16194:	ldrb	r1, [r4, r3]
   16198:	cmp	r1, #92	; 0x5c
   1619c:	bne	16180 <__assert_fail@plt+0x492c>
   161a0:	add	ip, r3, #4
   161a4:	cmp	ip, r0
   161a8:	bcs	16180 <__assert_fail@plt+0x492c>
   161ac:	add	ip, r4, r3
   161b0:	ldrb	lr, [ip, #1]
   161b4:	sub	ip, lr, #48	; 0x30
   161b8:	uxtb	ip, ip
   161bc:	cmp	ip, #3
   161c0:	bhi	16180 <__assert_fail@plt+0x492c>
   161c4:	add	ip, r4, r3
   161c8:	ldrb	r5, [ip, #2]
   161cc:	sub	ip, r5, #48	; 0x30
   161d0:	uxtb	ip, ip
   161d4:	cmp	ip, #7
   161d8:	bhi	16180 <__assert_fail@plt+0x492c>
   161dc:	add	r6, r3, #3
   161e0:	ldrb	ip, [r4, r6]
   161e4:	sub	ip, ip, #48	; 0x30
   161e8:	uxtb	ip, ip
   161ec:	cmp	ip, #7
   161f0:	bhi	16180 <__assert_fail@plt+0x492c>
   161f4:	add	r3, r5, lr, lsl #3
   161f8:	sub	r3, r3, #432	; 0x1b0
   161fc:	add	r3, ip, r3, lsl #3
   16200:	strb	r3, [r2]
   16204:	mov	r3, r6
   16208:	b	16184 <__assert_fail@plt+0x4930>
   1620c:	ldrd	r4, [sp]
   16210:	ldr	r6, [sp, #8]
   16214:	add	sp, sp, #12
   16218:	pop	{pc}		; (ldr pc, [sp], #4)
   1621c:	str	r4, [sp, #-8]!
   16220:	str	lr, [sp, #4]
   16224:	mov	r4, r0
   16228:	ldr	r0, [r0]
   1622c:	bl	15fdc <__assert_fail@plt+0x4788>
   16230:	ldr	r0, [r4, #4]
   16234:	bl	15fdc <__assert_fail@plt+0x4788>
   16238:	ldr	r0, [r4, #8]
   1623c:	bl	15fdc <__assert_fail@plt+0x4788>
   16240:	ldrb	r3, [r4, #24]
   16244:	tst	r3, #4
   16248:	bne	16260 <__assert_fail@plt+0x4a0c>
   1624c:	mov	r0, r4
   16250:	bl	15fdc <__assert_fail@plt+0x4788>
   16254:	ldr	r4, [sp]
   16258:	add	sp, sp, #4
   1625c:	pop	{pc}		; (ldr pc, [sp], #4)
   16260:	ldr	r0, [r4, #12]
   16264:	bl	15fdc <__assert_fail@plt+0x4788>
   16268:	b	1624c <__assert_fail@plt+0x49f8>
   1626c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16270:	strd	r6, [sp, #8]
   16274:	strd	r8, [sp, #16]
   16278:	strd	sl, [sp, #24]
   1627c:	str	lr, [sp, #32]
   16280:	sub	sp, sp, #44	; 0x2c
   16284:	movw	r1, #62148	; 0xf2c4
   16288:	movt	r1, #1
   1628c:	movw	r0, #62068	; 0xf274
   16290:	movt	r0, #1
   16294:	bl	117d0 <fopen64@plt>
   16298:	subs	r5, r0, #0
   1629c:	beq	16818 <__assert_fail@plt+0x4fc4>
   162a0:	mov	r3, #0
   162a4:	str	r3, [sp, #16]
   162a8:	str	r3, [sp, #20]
   162ac:	add	r9, sp, #36	; 0x24
   162b0:	movw	r7, #62092	; 0xf28c
   162b4:	movt	r7, #1
   162b8:	movw	sl, #62112	; 0xf2a0
   162bc:	movt	sl, #1
   162c0:	mov	fp, #65280	; 0xff00
   162c4:	movt	fp, #15
   162c8:	mov	r3, r5
   162cc:	mov	r2, #10
   162d0:	add	r1, sp, #20
   162d4:	add	r0, sp, #16
   162d8:	bl	1144c <__getdelim@plt>
   162dc:	cmn	r0, #1
   162e0:	beq	1676c <__assert_fail@plt+0x4f18>
   162e4:	add	r3, sp, #32
   162e8:	str	r3, [sp]
   162ec:	add	r3, sp, #28
   162f0:	add	r2, sp, #24
   162f4:	mov	r1, r7
   162f8:	ldr	r0, [sp, #16]
   162fc:	bl	11794 <sscanf@plt>
   16300:	sub	r0, r0, #2
   16304:	cmp	r0, #1
   16308:	bhi	162c8 <__assert_fail@plt+0x4a74>
   1630c:	ldr	r4, [sp, #16]
   16310:	ldr	r3, [sp, #32]
   16314:	add	r4, r4, r3
   16318:	mov	r0, r4
   1631c:	bl	16134 <__assert_fail@plt+0x48e0>
   16320:	cmp	r0, #0
   16324:	beq	162c8 <__assert_fail@plt+0x4a74>
   16328:	add	r6, r0, #1
   1632c:	mov	r0, r6
   16330:	bl	16134 <__assert_fail@plt+0x48e0>
   16334:	cmp	r0, #0
   16338:	beq	162c8 <__assert_fail@plt+0x4a74>
   1633c:	mov	r1, sl
   16340:	add	r0, r0, #1
   16344:	bl	1c264 <__assert_fail@plt+0xaa10>
   16348:	cmp	r0, #0
   1634c:	beq	162c8 <__assert_fail@plt+0x4a74>
   16350:	add	r8, r0, #3
   16354:	mov	r0, r8
   16358:	bl	16134 <__assert_fail@plt+0x48e0>
   1635c:	cmp	r0, #0
   16360:	beq	162c8 <__assert_fail@plt+0x4a74>
   16364:	add	r3, r0, #1
   16368:	str	r3, [sp, #8]
   1636c:	mov	r0, r3
   16370:	bl	16134 <__assert_fail@plt+0x48e0>
   16374:	cmp	r0, #0
   16378:	beq	162c8 <__assert_fail@plt+0x4a74>
   1637c:	ldr	r0, [sp, #8]
   16380:	bl	1615c <__assert_fail@plt+0x4908>
   16384:	mov	r0, r6
   16388:	bl	1615c <__assert_fail@plt+0x4908>
   1638c:	mov	r0, r4
   16390:	bl	1615c <__assert_fail@plt+0x4908>
   16394:	str	r8, [sp, #12]
   16398:	mov	r0, r8
   1639c:	bl	1615c <__assert_fail@plt+0x4908>
   163a0:	mov	r0, #32
   163a4:	bl	1b6b8 <__assert_fail@plt+0x9e64>
   163a8:	mov	r8, r0
   163ac:	ldr	r0, [sp, #8]
   163b0:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   163b4:	str	r0, [r8]
   163b8:	mov	r0, r6
   163bc:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   163c0:	str	r0, [r8, #4]
   163c4:	mov	r0, r4
   163c8:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   163cc:	str	r0, [r8, #8]
   163d0:	ldr	r0, [sp, #12]
   163d4:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   163d8:	mov	r4, r0
   163dc:	str	r0, [r8, #12]
   163e0:	ldrb	r3, [r8, #24]
   163e4:	orr	r3, r3, #4
   163e8:	strb	r3, [r8, #24]
   163ec:	ldr	r1, [sp, #28]
   163f0:	ldr	r3, [sp, #24]
   163f4:	and	ip, fp, r3, lsl #8
   163f8:	bic	r3, r3, #4080	; 0xff0
   163fc:	bic	r3, r3, #15
   16400:	uxtb	r2, r1
   16404:	orr	ip, r2, ip
   16408:	mov	r2, #0
   1640c:	movt	r2, #65520	; 0xfff0
   16410:	and	r2, r2, r1, lsl #12
   16414:	orr	r2, r2, ip
   16418:	orr	r3, r3, r1, lsr #20
   1641c:	str	r2, [r8, #16]
   16420:	str	r3, [r8, #20]
   16424:	movw	r1, #55812	; 0xda04
   16428:	movt	r1, #1
   1642c:	bl	11464 <strcmp@plt>
   16430:	cmp	r0, #0
   16434:	moveq	r0, #1
   16438:	beq	165a4 <__assert_fail@plt+0x4d50>
   1643c:	movw	r1, #56512	; 0xdcc0
   16440:	movt	r1, #1
   16444:	mov	r0, r4
   16448:	bl	11464 <strcmp@plt>
   1644c:	cmp	r0, #0
   16450:	moveq	r0, #1
   16454:	beq	165a4 <__assert_fail@plt+0x4d50>
   16458:	movw	r1, #62116	; 0xf2a4
   1645c:	movt	r1, #1
   16460:	mov	r0, r4
   16464:	bl	11464 <strcmp@plt>
   16468:	cmp	r0, #0
   1646c:	moveq	r0, #1
   16470:	beq	165a4 <__assert_fail@plt+0x4d50>
   16474:	movw	r1, #56000	; 0xdac0
   16478:	movt	r1, #1
   1647c:	mov	r0, r4
   16480:	bl	11464 <strcmp@plt>
   16484:	cmp	r0, #0
   16488:	moveq	r0, #1
   1648c:	beq	165a4 <__assert_fail@plt+0x4d50>
   16490:	movw	r1, #56024	; 0xdad8
   16494:	movt	r1, #1
   16498:	mov	r0, r4
   1649c:	bl	11464 <strcmp@plt>
   164a0:	cmp	r0, #0
   164a4:	moveq	r0, #1
   164a8:	beq	165a4 <__assert_fail@plt+0x4d50>
   164ac:	movw	r1, #56152	; 0xdb58
   164b0:	movt	r1, #1
   164b4:	mov	r0, r4
   164b8:	bl	11464 <strcmp@plt>
   164bc:	cmp	r0, #0
   164c0:	moveq	r0, #1
   164c4:	beq	165a4 <__assert_fail@plt+0x4d50>
   164c8:	movw	r1, #62124	; 0xf2ac
   164cc:	movt	r1, #1
   164d0:	mov	r0, r4
   164d4:	bl	11464 <strcmp@plt>
   164d8:	cmp	r0, #0
   164dc:	moveq	r0, #1
   164e0:	beq	165a4 <__assert_fail@plt+0x4d50>
   164e4:	movw	r1, #56392	; 0xdc48
   164e8:	movt	r1, #1
   164ec:	mov	r0, r4
   164f0:	bl	11464 <strcmp@plt>
   164f4:	cmp	r0, #0
   164f8:	moveq	r0, #1
   164fc:	beq	165a4 <__assert_fail@plt+0x4d50>
   16500:	movw	r1, #56580	; 0xdd04
   16504:	movt	r1, #1
   16508:	mov	r0, r4
   1650c:	bl	11464 <strcmp@plt>
   16510:	cmp	r0, #0
   16514:	moveq	r0, #1
   16518:	beq	165a4 <__assert_fail@plt+0x4d50>
   1651c:	movw	r1, #56684	; 0xdd6c
   16520:	movt	r1, #1
   16524:	mov	r0, r4
   16528:	bl	11464 <strcmp@plt>
   1652c:	cmp	r0, #0
   16530:	moveq	r0, #1
   16534:	beq	165a4 <__assert_fail@plt+0x4d50>
   16538:	movw	r1, #56008	; 0xdac8
   1653c:	movt	r1, #1
   16540:	mov	r0, r4
   16544:	bl	11464 <strcmp@plt>
   16548:	cmp	r0, #0
   1654c:	moveq	r0, #1
   16550:	beq	165a4 <__assert_fail@plt+0x4d50>
   16554:	movw	r1, #62136	; 0xf2b8
   16558:	movt	r1, #1
   1655c:	mov	r0, r4
   16560:	bl	11464 <strcmp@plt>
   16564:	cmp	r0, #0
   16568:	moveq	r0, #1
   1656c:	beq	165a4 <__assert_fail@plt+0x4d50>
   16570:	movw	r1, #62144	; 0xf2c0
   16574:	movt	r1, #1
   16578:	mov	r0, r4
   1657c:	bl	11464 <strcmp@plt>
   16580:	cmp	r0, #0
   16584:	moveq	r0, #1
   16588:	beq	165a4 <__assert_fail@plt+0x4d50>
   1658c:	movw	r1, #62152	; 0xf2c8
   16590:	movt	r1, #1
   16594:	mov	r0, r4
   16598:	bl	11464 <strcmp@plt>
   1659c:	clz	r0, r0
   165a0:	lsr	r0, r0, #5
   165a4:	ldrb	r3, [r8, #24]
   165a8:	bfi	r3, r0, #0, #1
   165ac:	strb	r3, [r8, #24]
   165b0:	ldr	r6, [r8]
   165b4:	mov	r1, #58	; 0x3a
   165b8:	mov	r0, r6
   165bc:	bl	11680 <strchr@plt>
   165c0:	cmp	r0, #0
   165c4:	movne	r0, #1
   165c8:	beq	165e4 <__assert_fail@plt+0x4d90>
   165cc:	ldrb	r3, [r8, #24]
   165d0:	bfi	r3, r0, #1, #1
   165d4:	strb	r3, [r8, #24]
   165d8:	str	r8, [r9]
   165dc:	add	r9, r8, #28
   165e0:	b	162c8 <__assert_fail@plt+0x4a74>
   165e4:	ldrb	r3, [r6]
   165e8:	cmp	r3, #47	; 0x2f
   165ec:	beq	16708 <__assert_fail@plt+0x4eb4>
   165f0:	movw	r1, #56852	; 0xde14
   165f4:	movt	r1, #1
   165f8:	mov	r0, r4
   165fc:	bl	11464 <strcmp@plt>
   16600:	cmp	r0, #0
   16604:	moveq	r0, #1
   16608:	beq	165cc <__assert_fail@plt+0x4d78>
   1660c:	movw	r1, #55784	; 0xd9e8
   16610:	movt	r1, #1
   16614:	mov	r0, r4
   16618:	bl	11464 <strcmp@plt>
   1661c:	cmp	r0, #0
   16620:	moveq	r0, #1
   16624:	beq	165cc <__assert_fail@plt+0x4d78>
   16628:	movw	r1, #55948	; 0xda8c
   1662c:	movt	r1, #1
   16630:	mov	r0, r4
   16634:	bl	11464 <strcmp@plt>
   16638:	cmp	r0, #0
   1663c:	moveq	r0, #1
   16640:	beq	165cc <__assert_fail@plt+0x4d78>
   16644:	movw	r1, #62176	; 0xf2e0
   16648:	movt	r1, #1
   1664c:	mov	r0, r4
   16650:	bl	11464 <strcmp@plt>
   16654:	cmp	r0, #0
   16658:	moveq	r0, #1
   1665c:	beq	165cc <__assert_fail@plt+0x4d78>
   16660:	movw	r1, #56136	; 0xdb48
   16664:	movt	r1, #1
   16668:	mov	r0, r4
   1666c:	bl	11464 <strcmp@plt>
   16670:	cmp	r0, #0
   16674:	moveq	r0, #1
   16678:	beq	165cc <__assert_fail@plt+0x4d78>
   1667c:	movw	r1, #56180	; 0xdb74
   16680:	movt	r1, #1
   16684:	mov	r0, r4
   16688:	bl	11464 <strcmp@plt>
   1668c:	cmp	r0, #0
   16690:	moveq	r0, #1
   16694:	beq	165cc <__assert_fail@plt+0x4d78>
   16698:	movw	r1, #56244	; 0xdbb4
   1669c:	movt	r1, #1
   166a0:	mov	r0, r4
   166a4:	bl	11464 <strcmp@plt>
   166a8:	cmp	r0, #0
   166ac:	moveq	r0, #1
   166b0:	beq	165cc <__assert_fail@plt+0x4d78>
   166b4:	movw	r1, #56464	; 0xdc90
   166b8:	movt	r1, #1
   166bc:	mov	r0, r4
   166c0:	bl	11464 <strcmp@plt>
   166c4:	cmp	r0, #0
   166c8:	moveq	r0, #1
   166cc:	beq	165cc <__assert_fail@plt+0x4d78>
   166d0:	movw	r1, #56776	; 0xddc8
   166d4:	movt	r1, #1
   166d8:	mov	r0, r4
   166dc:	bl	11464 <strcmp@plt>
   166e0:	cmp	r0, #0
   166e4:	moveq	r0, #1
   166e8:	beq	165cc <__assert_fail@plt+0x4d78>
   166ec:	mov	r1, r6
   166f0:	movw	r0, #62188	; 0xf2ec
   166f4:	movt	r0, #1
   166f8:	bl	11464 <strcmp@plt>
   166fc:	clz	r0, r0
   16700:	lsr	r0, r0, #5
   16704:	b	165cc <__assert_fail@plt+0x4d78>
   16708:	ldrb	r3, [r6, #1]
   1670c:	cmp	r3, #47	; 0x2f
   16710:	bne	165f0 <__assert_fail@plt+0x4d9c>
   16714:	movw	r1, #62160	; 0xf2d0
   16718:	movt	r1, #1
   1671c:	mov	r0, r4
   16720:	bl	11464 <strcmp@plt>
   16724:	cmp	r0, #0
   16728:	moveq	r0, #1
   1672c:	beq	165cc <__assert_fail@plt+0x4d78>
   16730:	movw	r1, #62168	; 0xf2d8
   16734:	movt	r1, #1
   16738:	mov	r0, r4
   1673c:	bl	11464 <strcmp@plt>
   16740:	cmp	r0, #0
   16744:	moveq	r0, #1
   16748:	beq	165cc <__assert_fail@plt+0x4d78>
   1674c:	movw	r1, #55940	; 0xda84
   16750:	movt	r1, #1
   16754:	mov	r0, r4
   16758:	bl	11464 <strcmp@plt>
   1675c:	cmp	r0, #0
   16760:	moveq	r0, #1
   16764:	beq	165cc <__assert_fail@plt+0x4d78>
   16768:	b	165f0 <__assert_fail@plt+0x4d9c>
   1676c:	ldr	r0, [sp, #16]
   16770:	bl	15fdc <__assert_fail@plt+0x4788>
   16774:	ldr	r3, [r5]
   16778:	tst	r3, #32
   1677c:	bne	167bc <__assert_fail@plt+0x4f68>
   16780:	mov	r0, r5
   16784:	bl	1cb00 <__assert_fail@plt+0xb2ac>
   16788:	cmn	r0, #1
   1678c:	beq	167d4 <__assert_fail@plt+0x4f80>
   16790:	mov	r3, #0
   16794:	str	r3, [r9]
   16798:	ldr	r6, [sp, #36]	; 0x24
   1679c:	mov	r0, r6
   167a0:	add	sp, sp, #44	; 0x2c
   167a4:	ldrd	r4, [sp]
   167a8:	ldrd	r6, [sp, #8]
   167ac:	ldrd	r8, [sp, #16]
   167b0:	ldrd	sl, [sp, #24]
   167b4:	add	sp, sp, #32
   167b8:	pop	{pc}		; (ldr pc, [sp], #4)
   167bc:	bl	116b0 <__errno_location@plt>
   167c0:	mov	r4, r0
   167c4:	ldr	r6, [r0]
   167c8:	mov	r0, r5
   167cc:	bl	1cb00 <__assert_fail@plt+0xb2ac>
   167d0:	str	r6, [r4]
   167d4:	bl	116b0 <__errno_location@plt>
   167d8:	mov	r5, r0
   167dc:	ldr	r6, [r0]
   167e0:	mov	r3, #0
   167e4:	str	r3, [r9]
   167e8:	ldr	r0, [sp, #36]	; 0x24
   167ec:	cmp	r0, r3
   167f0:	beq	1680c <__assert_fail@plt+0x4fb8>
   167f4:	ldr	r4, [r0, #28]
   167f8:	bl	1621c <__assert_fail@plt+0x49c8>
   167fc:	str	r4, [sp, #36]	; 0x24
   16800:	mov	r0, r4
   16804:	cmp	r4, #0
   16808:	bne	167f4 <__assert_fail@plt+0x4fa0>
   1680c:	str	r6, [r5]
   16810:	mov	r6, #0
   16814:	b	1679c <__assert_fail@plt+0x4f48>
   16818:	movw	r1, #61624	; 0xf0b8
   1681c:	movt	r1, #1
   16820:	movw	r0, #62196	; 0xf2f4
   16824:	movt	r0, #1
   16828:	bl	117e8 <setmntent@plt>
   1682c:	subs	r6, r0, #0
   16830:	beq	1679c <__assert_fail@plt+0x4f48>
   16834:	add	r9, sp, #36	; 0x24
   16838:	movw	r8, #62208	; 0xf300
   1683c:	movt	r8, #1
   16840:	movw	r7, #55812	; 0xda04
   16844:	movt	r7, #1
   16848:	movw	fp, #56512	; 0xdcc0
   1684c:	movt	fp, #1
   16850:	b	1689c <__assert_fail@plt+0x5048>
   16854:	ldrb	r3, [r4, #24]
   16858:	bfi	r3, r2, #0, #1
   1685c:	strb	r3, [r4, #24]
   16860:	ldr	sl, [r4]
   16864:	mov	r1, #58	; 0x3a
   16868:	mov	r0, sl
   1686c:	bl	11680 <strchr@plt>
   16870:	cmp	r0, #0
   16874:	movne	r0, #1
   16878:	beq	16a84 <__assert_fail@plt+0x5230>
   1687c:	ldrb	r3, [r4, #24]
   16880:	bfi	r3, r0, #1, #1
   16884:	strb	r3, [r4, #24]
   16888:	mvn	r2, #0
   1688c:	mvn	r3, #0
   16890:	strd	r2, [r4, #16]
   16894:	str	r4, [r9]
   16898:	add	r9, r4, #28
   1689c:	mov	r0, r6
   168a0:	bl	115b4 <getmntent@plt>
   168a4:	subs	r5, r0, #0
   168a8:	beq	16c0c <__assert_fail@plt+0x53b8>
   168ac:	mov	r1, r8
   168b0:	mov	r0, r5
   168b4:	bl	11578 <hasmntopt@plt>
   168b8:	mov	sl, r0
   168bc:	mov	r0, #32
   168c0:	bl	1b6b8 <__assert_fail@plt+0x9e64>
   168c4:	mov	r4, r0
   168c8:	ldr	r0, [r5]
   168cc:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   168d0:	str	r0, [r4]
   168d4:	ldr	r0, [r5, #4]
   168d8:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   168dc:	str	r0, [r4, #4]
   168e0:	mov	r3, #0
   168e4:	str	r3, [r4, #8]
   168e8:	ldr	r0, [r5, #8]
   168ec:	bl	1bb24 <__assert_fail@plt+0xa2d0>
   168f0:	mov	r5, r0
   168f4:	str	r0, [r4, #12]
   168f8:	ldrb	r3, [r4, #24]
   168fc:	orr	r3, r3, #4
   16900:	strb	r3, [r4, #24]
   16904:	mov	r1, r7
   16908:	bl	11464 <strcmp@plt>
   1690c:	cmp	r0, #0
   16910:	moveq	r2, #1
   16914:	beq	16854 <__assert_fail@plt+0x5000>
   16918:	mov	r1, fp
   1691c:	mov	r0, r5
   16920:	bl	11464 <strcmp@plt>
   16924:	cmp	r0, #0
   16928:	moveq	r2, #1
   1692c:	beq	16854 <__assert_fail@plt+0x5000>
   16930:	movw	r1, #62116	; 0xf2a4
   16934:	movt	r1, #1
   16938:	mov	r0, r5
   1693c:	bl	11464 <strcmp@plt>
   16940:	cmp	r0, #0
   16944:	moveq	r2, #1
   16948:	beq	16854 <__assert_fail@plt+0x5000>
   1694c:	movw	r1, #56000	; 0xdac0
   16950:	movt	r1, #1
   16954:	mov	r0, r5
   16958:	bl	11464 <strcmp@plt>
   1695c:	cmp	r0, #0
   16960:	moveq	r2, #1
   16964:	beq	16854 <__assert_fail@plt+0x5000>
   16968:	movw	r1, #56024	; 0xdad8
   1696c:	movt	r1, #1
   16970:	mov	r0, r5
   16974:	bl	11464 <strcmp@plt>
   16978:	cmp	r0, #0
   1697c:	moveq	r2, #1
   16980:	beq	16854 <__assert_fail@plt+0x5000>
   16984:	movw	r1, #56152	; 0xdb58
   16988:	movt	r1, #1
   1698c:	mov	r0, r5
   16990:	bl	11464 <strcmp@plt>
   16994:	cmp	r0, #0
   16998:	moveq	r2, #1
   1699c:	beq	16854 <__assert_fail@plt+0x5000>
   169a0:	movw	r1, #62124	; 0xf2ac
   169a4:	movt	r1, #1
   169a8:	mov	r0, r5
   169ac:	bl	11464 <strcmp@plt>
   169b0:	cmp	r0, #0
   169b4:	moveq	r2, #1
   169b8:	beq	16854 <__assert_fail@plt+0x5000>
   169bc:	movw	r1, #56392	; 0xdc48
   169c0:	movt	r1, #1
   169c4:	mov	r0, r5
   169c8:	bl	11464 <strcmp@plt>
   169cc:	cmp	r0, #0
   169d0:	moveq	r2, #1
   169d4:	beq	16854 <__assert_fail@plt+0x5000>
   169d8:	movw	r1, #56580	; 0xdd04
   169dc:	movt	r1, #1
   169e0:	mov	r0, r5
   169e4:	bl	11464 <strcmp@plt>
   169e8:	cmp	r0, #0
   169ec:	moveq	r2, #1
   169f0:	beq	16854 <__assert_fail@plt+0x5000>
   169f4:	movw	r1, #56684	; 0xdd6c
   169f8:	movt	r1, #1
   169fc:	mov	r0, r5
   16a00:	bl	11464 <strcmp@plt>
   16a04:	cmp	r0, #0
   16a08:	moveq	r2, #1
   16a0c:	beq	16854 <__assert_fail@plt+0x5000>
   16a10:	movw	r1, #56008	; 0xdac8
   16a14:	movt	r1, #1
   16a18:	mov	r0, r5
   16a1c:	bl	11464 <strcmp@plt>
   16a20:	cmp	r0, #0
   16a24:	moveq	r2, #1
   16a28:	beq	16854 <__assert_fail@plt+0x5000>
   16a2c:	movw	r1, #62136	; 0xf2b8
   16a30:	movt	r1, #1
   16a34:	mov	r0, r5
   16a38:	bl	11464 <strcmp@plt>
   16a3c:	cmp	r0, #0
   16a40:	moveq	r2, #1
   16a44:	beq	16854 <__assert_fail@plt+0x5000>
   16a48:	movw	r1, #62144	; 0xf2c0
   16a4c:	movt	r1, #1
   16a50:	mov	r0, r5
   16a54:	bl	11464 <strcmp@plt>
   16a58:	cmp	r0, #0
   16a5c:	moveq	r2, #1
   16a60:	beq	16854 <__assert_fail@plt+0x5000>
   16a64:	movw	r1, #62152	; 0xf2c8
   16a68:	movt	r1, #1
   16a6c:	mov	r0, r5
   16a70:	bl	11464 <strcmp@plt>
   16a74:	orrs	r3, sl, r0
   16a78:	moveq	r2, #1
   16a7c:	movne	r2, #0
   16a80:	b	16854 <__assert_fail@plt+0x5000>
   16a84:	ldrb	r3, [sl]
   16a88:	cmp	r3, #47	; 0x2f
   16a8c:	beq	16ba8 <__assert_fail@plt+0x5354>
   16a90:	movw	r1, #56852	; 0xde14
   16a94:	movt	r1, #1
   16a98:	mov	r0, r5
   16a9c:	bl	11464 <strcmp@plt>
   16aa0:	cmp	r0, #0
   16aa4:	moveq	r0, #1
   16aa8:	beq	1687c <__assert_fail@plt+0x5028>
   16aac:	movw	r1, #55784	; 0xd9e8
   16ab0:	movt	r1, #1
   16ab4:	mov	r0, r5
   16ab8:	bl	11464 <strcmp@plt>
   16abc:	cmp	r0, #0
   16ac0:	moveq	r0, #1
   16ac4:	beq	1687c <__assert_fail@plt+0x5028>
   16ac8:	movw	r1, #55948	; 0xda8c
   16acc:	movt	r1, #1
   16ad0:	mov	r0, r5
   16ad4:	bl	11464 <strcmp@plt>
   16ad8:	cmp	r0, #0
   16adc:	moveq	r0, #1
   16ae0:	beq	1687c <__assert_fail@plt+0x5028>
   16ae4:	movw	r1, #62176	; 0xf2e0
   16ae8:	movt	r1, #1
   16aec:	mov	r0, r5
   16af0:	bl	11464 <strcmp@plt>
   16af4:	cmp	r0, #0
   16af8:	moveq	r0, #1
   16afc:	beq	1687c <__assert_fail@plt+0x5028>
   16b00:	movw	r1, #56136	; 0xdb48
   16b04:	movt	r1, #1
   16b08:	mov	r0, r5
   16b0c:	bl	11464 <strcmp@plt>
   16b10:	cmp	r0, #0
   16b14:	moveq	r0, #1
   16b18:	beq	1687c <__assert_fail@plt+0x5028>
   16b1c:	movw	r1, #56180	; 0xdb74
   16b20:	movt	r1, #1
   16b24:	mov	r0, r5
   16b28:	bl	11464 <strcmp@plt>
   16b2c:	cmp	r0, #0
   16b30:	moveq	r0, #1
   16b34:	beq	1687c <__assert_fail@plt+0x5028>
   16b38:	movw	r1, #56244	; 0xdbb4
   16b3c:	movt	r1, #1
   16b40:	mov	r0, r5
   16b44:	bl	11464 <strcmp@plt>
   16b48:	cmp	r0, #0
   16b4c:	moveq	r0, #1
   16b50:	beq	1687c <__assert_fail@plt+0x5028>
   16b54:	movw	r1, #56464	; 0xdc90
   16b58:	movt	r1, #1
   16b5c:	mov	r0, r5
   16b60:	bl	11464 <strcmp@plt>
   16b64:	cmp	r0, #0
   16b68:	moveq	r0, #1
   16b6c:	beq	1687c <__assert_fail@plt+0x5028>
   16b70:	movw	r1, #56776	; 0xddc8
   16b74:	movt	r1, #1
   16b78:	mov	r0, r5
   16b7c:	bl	11464 <strcmp@plt>
   16b80:	cmp	r0, #0
   16b84:	moveq	r0, #1
   16b88:	beq	1687c <__assert_fail@plt+0x5028>
   16b8c:	mov	r1, sl
   16b90:	movw	r0, #62188	; 0xf2ec
   16b94:	movt	r0, #1
   16b98:	bl	11464 <strcmp@plt>
   16b9c:	clz	r0, r0
   16ba0:	lsr	r0, r0, #5
   16ba4:	b	1687c <__assert_fail@plt+0x5028>
   16ba8:	ldrb	r3, [sl, #1]
   16bac:	cmp	r3, #47	; 0x2f
   16bb0:	bne	16a90 <__assert_fail@plt+0x523c>
   16bb4:	movw	r1, #62160	; 0xf2d0
   16bb8:	movt	r1, #1
   16bbc:	mov	r0, r5
   16bc0:	bl	11464 <strcmp@plt>
   16bc4:	cmp	r0, #0
   16bc8:	moveq	r0, #1
   16bcc:	beq	1687c <__assert_fail@plt+0x5028>
   16bd0:	movw	r1, #62168	; 0xf2d8
   16bd4:	movt	r1, #1
   16bd8:	mov	r0, r5
   16bdc:	bl	11464 <strcmp@plt>
   16be0:	cmp	r0, #0
   16be4:	moveq	r0, #1
   16be8:	beq	1687c <__assert_fail@plt+0x5028>
   16bec:	movw	r1, #55940	; 0xda84
   16bf0:	movt	r1, #1
   16bf4:	mov	r0, r5
   16bf8:	bl	11464 <strcmp@plt>
   16bfc:	cmp	r0, #0
   16c00:	moveq	r0, #1
   16c04:	beq	1687c <__assert_fail@plt+0x5028>
   16c08:	b	16a90 <__assert_fail@plt+0x523c>
   16c0c:	mov	r0, r6
   16c10:	bl	11740 <endmntent@plt>
   16c14:	cmp	r0, #0
   16c18:	bne	16790 <__assert_fail@plt+0x4f3c>
   16c1c:	b	167d4 <__assert_fail@plt+0x4f80>
   16c20:	strd	r4, [sp, #-16]!
   16c24:	str	r6, [sp, #8]
   16c28:	str	lr, [sp, #12]
   16c2c:	mov	r5, r0
   16c30:	subs	r4, r2, #0
   16c34:	beq	16c64 <__assert_fail@plt+0x5410>
   16c38:	mov	r6, r1
   16c3c:	bl	11614 <__ctype_tolower_loc@plt>
   16c40:	add	r3, r6, r4
   16c44:	add	r2, r5, r4
   16c48:	mov	r1, r6
   16c4c:	ldrb	lr, [r3, #-1]!
   16c50:	ldr	ip, [r0]
   16c54:	ldr	ip, [ip, lr, lsl #2]
   16c58:	strb	ip, [r2, #-1]!
   16c5c:	cmp	r3, r1
   16c60:	bne	16c4c <__assert_fail@plt+0x53f8>
   16c64:	mov	r0, r5
   16c68:	ldrd	r4, [sp]
   16c6c:	ldr	r6, [sp, #8]
   16c70:	add	sp, sp, #12
   16c74:	pop	{pc}		; (ldr pc, [sp], #4)
   16c78:	strd	r4, [sp, #-16]!
   16c7c:	str	r6, [sp, #8]
   16c80:	str	lr, [sp, #12]
   16c84:	mov	r5, r0
   16c88:	subs	r4, r2, #0
   16c8c:	beq	16cbc <__assert_fail@plt+0x5468>
   16c90:	mov	r6, r1
   16c94:	bl	11620 <__ctype_toupper_loc@plt>
   16c98:	add	r3, r6, r4
   16c9c:	add	r2, r5, r4
   16ca0:	mov	r1, r6
   16ca4:	ldrb	lr, [r3, #-1]!
   16ca8:	ldr	ip, [r0]
   16cac:	ldr	ip, [ip, lr, lsl #2]
   16cb0:	strb	ip, [r2, #-1]!
   16cb4:	cmp	r3, r1
   16cb8:	bne	16ca4 <__assert_fail@plt+0x5450>
   16cbc:	mov	r0, r5
   16cc0:	ldrd	r4, [sp]
   16cc4:	ldr	r6, [sp, #8]
   16cc8:	add	sp, sp, #12
   16ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   16cd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16cd4:	strd	r6, [sp, #8]
   16cd8:	strd	r8, [sp, #16]
   16cdc:	strd	sl, [sp, #24]
   16ce0:	str	lr, [sp, #32]
   16ce4:	sub	sp, sp, #1120	; 0x460
   16ce8:	sub	sp, sp, #12
   16cec:	str	r0, [sp, #28]
   16cf0:	str	r1, [sp, #24]
   16cf4:	mov	r7, r2
   16cf8:	mov	r4, r3
   16cfc:	str	r3, [sp, #40]	; 0x28
   16d00:	ldrb	r3, [sp, #1168]	; 0x490
   16d04:	str	r3, [sp, #36]	; 0x24
   16d08:	ldr	r9, [sp, #1176]	; 0x498
   16d0c:	bl	116b0 <__errno_location@plt>
   16d10:	str	r0, [sp, #32]
   16d14:	ldr	r3, [r0]
   16d18:	str	r3, [sp, #44]	; 0x2c
   16d1c:	ldr	r5, [r4, #8]
   16d20:	ldr	r2, [r4, #40]	; 0x28
   16d24:	movw	r3, #55660	; 0xd96c
   16d28:	movt	r3, #1
   16d2c:	cmp	r2, #0
   16d30:	moveq	r2, r3
   16d34:	str	r2, [sp, #48]	; 0x30
   16d38:	cmp	r5, #12
   16d3c:	subgt	r5, r5, #12
   16d40:	bgt	16d4c <__assert_fail@plt+0x54f8>
   16d44:	cmp	r5, #0
   16d48:	moveq	r5, #12
   16d4c:	ldrb	r3, [r7]
   16d50:	cmp	r3, #0
   16d54:	beq	18498 <__assert_fail@plt+0x6c44>
   16d58:	mov	fp, #0
   16d5c:	movw	r2, #46021	; 0xb3c5
   16d60:	movt	r2, #37282	; 0x91a2
   16d64:	str	r2, [sp, #68]	; 0x44
   16d68:	movw	r2, #34953	; 0x8889
   16d6c:	movt	r2, #34952	; 0x8888
   16d70:	str	r2, [sp, #72]	; 0x48
   16d74:	movw	sl, #34079	; 0x851f
   16d78:	movt	sl, #20971	; 0x51eb
   16d7c:	movw	r8, #9363	; 0x2493
   16d80:	movt	r8, #37449	; 0x9249
   16d84:	movw	r6, #26215	; 0x6667
   16d88:	movt	r6, #26214	; 0x6666
   16d8c:	str	r5, [sp, #64]	; 0x40
   16d90:	str	sl, [sp, #56]	; 0x38
   16d94:	str	r8, [sp, #52]	; 0x34
   16d98:	str	r6, [sp, #60]	; 0x3c
   16d9c:	ldr	r6, [sp, #28]
   16da0:	b	16dd8 <__assert_fail@plt+0x5584>
   16da4:	cmp	r6, #0
   16da8:	beq	16dbc <__assert_fail@plt+0x5568>
   16dac:	cmp	r9, #1
   16db0:	bhi	16e34 <__assert_fail@plt+0x55e0>
   16db4:	ldrb	r3, [r7]
   16db8:	strb	r3, [r6], #1
   16dbc:	add	fp, fp, r4
   16dc0:	mov	r4, r7
   16dc4:	add	r7, r4, #1
   16dc8:	ldrb	r3, [r4, #1]
   16dcc:	mvn	r9, #0
   16dd0:	cmp	r3, #0
   16dd4:	beq	1846c <__assert_fail@plt+0x6c18>
   16dd8:	cmp	r3, #37	; 0x25
   16ddc:	beq	16f64 <__assert_fail@plt+0x5710>
   16de0:	bic	r9, r9, r9, asr #31
   16de4:	cmp	r9, #1
   16de8:	movcs	r4, r9
   16dec:	movcc	r4, #1
   16df0:	ldr	r3, [sp, #24]
   16df4:	sub	r3, r3, fp
   16df8:	cmp	r3, r4
   16dfc:	bhi	16da4 <__assert_fail@plt+0x5550>
   16e00:	mov	r3, #34	; 0x22
   16e04:	ldr	r2, [sp, #32]
   16e08:	str	r3, [r2]
   16e0c:	mov	fp, #0
   16e10:	mov	r0, fp
   16e14:	add	sp, sp, #1120	; 0x460
   16e18:	add	sp, sp, #12
   16e1c:	ldrd	r4, [sp]
   16e20:	ldrd	r6, [sp, #8]
   16e24:	ldrd	r8, [sp, #16]
   16e28:	ldrd	sl, [sp, #24]
   16e2c:	add	sp, sp, #32
   16e30:	pop	{pc}		; (ldr pc, [sp], #4)
   16e34:	sub	r9, r9, #1
   16e38:	mov	r2, r9
   16e3c:	mov	r1, #32
   16e40:	mov	r0, r6
   16e44:	bl	116e0 <memset@plt>
   16e48:	add	r6, r6, r9
   16e4c:	b	16db4 <__assert_fail@plt+0x5560>
   16e50:	str	r2, [sp, #28]
   16e54:	b	16e5c <__assert_fail@plt+0x5608>
   16e58:	mov	r5, r1
   16e5c:	ldrb	r2, [r4, #1]!
   16e60:	sub	r3, r2, #35	; 0x23
   16e64:	cmp	r3, #60	; 0x3c
   16e68:	ldrls	pc, [pc, r3, lsl #2]
   16e6c:	b	16f8c <__assert_fail@plt+0x5738>
   16e70:	andeq	r6, r1, r8, asr lr
   16e74:	andeq	r6, r1, ip, lsl #31
   16e78:	andeq	r6, r1, ip, lsl #31
   16e7c:	andeq	r6, r1, ip, lsl #31
   16e80:	andeq	r6, r1, ip, lsl #31
   16e84:	andeq	r6, r1, ip, lsl #31
   16e88:	andeq	r6, r1, ip, lsl #31
   16e8c:	andeq	r6, r1, ip, lsl #31
   16e90:	andeq	r6, r1, r0, asr lr
   16e94:	andeq	r6, r1, ip, lsl #31
   16e98:	andeq	r6, r1, r0, asr lr
   16e9c:	andeq	r6, r1, ip, lsl #31
   16ea0:	andeq	r6, r1, ip, lsl #31
   16ea4:	andeq	r6, r1, r0, asr lr
   16ea8:	andeq	r6, r1, ip, lsl #31
   16eac:	andeq	r6, r1, ip, lsl #31
   16eb0:	andeq	r6, r1, ip, lsl #31
   16eb4:	andeq	r6, r1, ip, lsl #31
   16eb8:	andeq	r6, r1, ip, lsl #31
   16ebc:	andeq	r6, r1, ip, lsl #31
   16ec0:	andeq	r6, r1, ip, lsl #31
   16ec4:	andeq	r6, r1, ip, lsl #31
   16ec8:	andeq	r6, r1, ip, lsl #31
   16ecc:	andeq	r6, r1, ip, lsl #31
   16ed0:	andeq	r6, r1, ip, lsl #31
   16ed4:	andeq	r6, r1, ip, lsl #31
   16ed8:	andeq	r6, r1, ip, lsl #31
   16edc:	andeq	r6, r1, ip, lsl #31
   16ee0:	andeq	r6, r1, ip, lsl #31
   16ee4:	andeq	r6, r1, ip, lsl #31
   16ee8:	andeq	r6, r1, ip, lsl #31
   16eec:	andeq	r6, r1, ip, lsl #31
   16ef0:	andeq	r6, r1, ip, lsl #31
   16ef4:	andeq	r6, r1, ip, lsl #31
   16ef8:	andeq	r6, r1, ip, lsl #31
   16efc:	andeq	r6, r1, ip, lsl #31
   16f00:	andeq	r6, r1, ip, lsl #31
   16f04:	andeq	r6, r1, ip, lsl #31
   16f08:	andeq	r6, r1, ip, lsl #31
   16f0c:	andeq	r6, r1, ip, lsl #31
   16f10:	andeq	r6, r1, ip, lsl #31
   16f14:	andeq	r6, r1, ip, lsl #31
   16f18:	andeq	r6, r1, ip, lsl #31
   16f1c:	andeq	r6, r1, ip, lsl #31
   16f20:	andeq	r6, r1, ip, lsl #31
   16f24:	andeq	r6, r1, ip, lsl #31
   16f28:	andeq	r6, r1, ip, lsl #31
   16f2c:	andeq	r6, r1, ip, lsl #31
   16f30:	andeq	r6, r1, ip, lsl #31
   16f34:	andeq	r6, r1, ip, lsl #31
   16f38:	andeq	r6, r1, ip, lsl #31
   16f3c:	andeq	r6, r1, ip, lsl #31
   16f40:	andeq	r6, r1, ip, lsl #31
   16f44:	andeq	r6, r1, ip, lsl #31
   16f48:	andeq	r6, r1, ip, lsl #31
   16f4c:	andeq	r6, r1, ip, lsl #31
   16f50:	andeq	r6, r1, ip, lsl #31
   16f54:	andeq	r6, r1, ip, lsl #31
   16f58:	andeq	r6, r1, ip, lsl #31
   16f5c:	andeq	r6, r1, r0, lsl #31
   16f60:	andeq	r6, r1, r0, asr lr
   16f64:	ldr	r3, [sp, #36]	; 0x24
   16f68:	str	r3, [sp, #76]	; 0x4c
   16f6c:	mov	r4, r7
   16f70:	mov	r5, #0
   16f74:	str	r5, [sp, #28]
   16f78:	mov	r1, #1
   16f7c:	b	16e5c <__assert_fail@plt+0x5608>
   16f80:	mov	r3, #1
   16f84:	str	r3, [sp, #76]	; 0x4c
   16f88:	b	16e5c <__assert_fail@plt+0x5608>
   16f8c:	sub	r2, r2, #48	; 0x30
   16f90:	cmp	r2, #9
   16f94:	bls	171b0 <__assert_fail@plt+0x595c>
   16f98:	ldrb	sl, [r4]
   16f9c:	cmp	sl, #69	; 0x45
   16fa0:	beq	17208 <__assert_fail@plt+0x59b4>
   16fa4:	cmp	sl, #79	; 0x4f
   16fa8:	movne	sl, #0
   16fac:	beq	17208 <__assert_fail@plt+0x59b4>
   16fb0:	ldrb	r3, [r4]
   16fb4:	mov	r1, r3
   16fb8:	cmp	r3, #122	; 0x7a
   16fbc:	ldrls	pc, [pc, r3, lsl #2]
   16fc0:	b	17254 <__assert_fail@plt+0x5a00>
   16fc4:	andeq	r7, r1, r0, asr r2
   16fc8:	andeq	r7, r1, r4, asr r2
   16fcc:	andeq	r7, r1, r4, asr r2
   16fd0:	andeq	r7, r1, r4, asr r2
   16fd4:	andeq	r7, r1, r4, asr r2
   16fd8:	andeq	r7, r1, r4, asr r2
   16fdc:	andeq	r7, r1, r4, asr r2
   16fe0:	andeq	r7, r1, r4, asr r2
   16fe4:	andeq	r7, r1, r4, asr r2
   16fe8:	andeq	r7, r1, r4, asr r2
   16fec:	andeq	r7, r1, r4, asr r2
   16ff0:	andeq	r7, r1, r4, asr r2
   16ff4:	andeq	r7, r1, r4, asr r2
   16ff8:	andeq	r7, r1, r4, asr r2
   16ffc:	andeq	r7, r1, r4, asr r2
   17000:	andeq	r7, r1, r4, asr r2
   17004:	andeq	r7, r1, r4, asr r2
   17008:	andeq	r7, r1, r4, asr r2
   1700c:	andeq	r7, r1, r4, asr r2
   17010:	andeq	r7, r1, r4, asr r2
   17014:	andeq	r7, r1, r4, asr r2
   17018:	andeq	r7, r1, r4, asr r2
   1701c:	andeq	r7, r1, r4, asr r2
   17020:	andeq	r7, r1, r4, asr r2
   17024:	andeq	r7, r1, r4, asr r2
   17028:	andeq	r7, r1, r4, asr r2
   1702c:	andeq	r7, r1, r4, asr r2
   17030:	andeq	r7, r1, r4, asr r2
   17034:	andeq	r7, r1, r4, asr r2
   17038:	andeq	r7, r1, r4, asr r2
   1703c:	andeq	r7, r1, r4, asr r2
   17040:	andeq	r7, r1, r4, asr r2
   17044:	andeq	r7, r1, r4, asr r2
   17048:	andeq	r7, r1, r4, asr r2
   1704c:	andeq	r7, r1, r4, asr r2
   17050:	andeq	r7, r1, r4, asr r2
   17054:	andeq	r7, r1, r4, asr r2
   17058:	andeq	r7, r1, r4, asr #4
   1705c:	andeq	r7, r1, r4, asr r2
   17060:	andeq	r7, r1, r4, asr r2
   17064:	andeq	r7, r1, r4, asr r2
   17068:	andeq	r7, r1, r4, asr r2
   1706c:	andeq	r7, r1, r4, asr r2
   17070:	andeq	r7, r1, r4, asr r2
   17074:	andeq	r7, r1, r4, asr r2
   17078:	andeq	r7, r1, r4, asr r2
   1707c:	andeq	r7, r1, r4, asr r2
   17080:	andeq	r7, r1, r4, asr r2
   17084:	andeq	r7, r1, r4, asr r2
   17088:	andeq	r7, r1, r4, asr r2
   1708c:	andeq	r7, r1, r4, asr r2
   17090:	andeq	r7, r1, r4, asr r2
   17094:	andeq	r7, r1, r4, asr r2
   17098:	andeq	r7, r1, r4, asr r2
   1709c:	andeq	r7, r1, r4, asr r2
   170a0:	andeq	r7, r1, r4, asr r2
   170a4:	andeq	r7, r1, r4, asr r2
   170a8:	andeq	r7, r1, r4, asr r2
   170ac:	andeq	r7, r1, r0, lsr #4
   170b0:	andeq	r7, r1, r4, asr r2
   170b4:	andeq	r7, r1, r4, asr r2
   170b8:	andeq	r7, r1, r4, asr r2
   170bc:	andeq	r7, r1, r4, asr r2
   170c0:	andeq	r7, r1, r4, asr r2
   170c4:	andeq	r7, r1, r4, asr r2
   170c8:			; <UNDEFINED> instruction: 0x000173bc
   170cc:	strdeq	r7, [r1], -ip
   170d0:	muleq	r1, r8, r5
   170d4:	andeq	r7, r1, r8, lsr r6
   170d8:	andeq	r7, r1, r4, asr r2
   170dc:	strdeq	r7, [r1], -r4
   170e0:	muleq	r1, r8, lr
   170e4:	andeq	r7, r1, r8, lsr #18
   170e8:	andeq	r7, r1, r4, asr #18
   170ec:	andeq	r7, r1, r4, asr r2
   170f0:	andeq	r7, r1, r4, asr r2
   170f4:	andeq	r7, r1, r4, asr r2
   170f8:			; <UNDEFINED> instruction: 0x000179b4
   170fc:	andeq	r7, r1, r4, lsl #20
   17100:	andeq	r7, r1, r4, asr r2
   17104:	andeq	r7, r1, r0, lsr #24
   17108:	andeq	r7, r1, r4, asr r2
   1710c:	andeq	r7, r1, r4, lsr r4
   17110:	andeq	r7, r1, r4, lsr #25
   17114:	andeq	r7, r1, r0, lsl r2
   17118:	andeq	r7, r1, ip, asr lr
   1711c:	muleq	r1, r8, lr
   17120:	andeq	r8, r1, ip, ror #1
   17124:	andeq	r7, r1, r0, lsl #27
   17128:	andeq	r8, r1, r0, ror #2
   1712c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17130:	andeq	r7, r1, r4, asr r2
   17134:	andeq	r7, r1, r4, asr r2
   17138:	andeq	r7, r1, r4, asr r2
   1713c:	andeq	r7, r1, r4, asr r2
   17140:	andeq	r7, r1, r4, asr r2
   17144:	andeq	r7, r1, r4, asr r2
   17148:	andeq	r7, r1, r4, lsl #7
   1714c:	ldrdeq	r7, [r1], -ip
   17150:	andeq	r7, r1, r0, lsr #8
   17154:	andeq	r7, r1, r0, asr r6
   17158:	andeq	r7, r1, ip, ror #12
   1715c:	andeq	r7, r1, r4, asr r2
   17160:	muleq	r1, r8, lr
   17164:	ldrdeq	r7, [r1], -ip
   17168:	andeq	r7, r1, r4, asr r2
   1716c:	andeq	r7, r1, r0, lsl #19
   17170:	andeq	r7, r1, ip, asr r9
   17174:	andeq	r7, r1, r0, ror r9
   17178:	ldrdeq	r7, [r1], -r0
   1717c:	muleq	r1, r0, fp
   17180:	andeq	r7, r1, r4, asr r2
   17184:	andeq	r7, r1, r8, lsr #24
   17188:	andeq	r7, r1, r8, ror #24
   1718c:	andeq	r7, r1, r8, asr r5
   17190:	andeq	r7, r1, r0, asr #25
   17194:	muleq	r1, r4, sp
   17198:	andeq	r7, r1, r4, lsr #28
   1719c:	andeq	r7, r1, r4, asr r2
   171a0:	andeq	r8, r1, r4, asr #2
   171a4:	andeq	r7, r1, r4, lsr #12
   171a8:	andeq	r8, r1, r0, lsr #3
   171ac:	andeq	r8, r1, ip, lsl #6
   171b0:	mov	r9, #0
   171b4:	mov	r1, #10
   171b8:	b	171cc <__assert_fail@plt+0x5978>
   171bc:	ldrb	r3, [r4, #1]!
   171c0:	sub	r3, r3, #48	; 0x30
   171c4:	cmp	r3, #9
   171c8:	bhi	16f98 <__assert_fail@plt+0x5744>
   171cc:	smull	r8, r9, r9, r1
   171d0:	asr	r0, r8, #31
   171d4:	mov	r2, r8
   171d8:	cmp	r0, r9
   171dc:	mvnne	r9, #-2147483648	; 0x80000000
   171e0:	bne	171bc <__assert_fail@plt+0x5968>
   171e4:	ldrb	r9, [r4]
   171e8:	sub	r9, r9, #48	; 0x30
   171ec:	adds	r2, r2, r9
   171f0:	movvs	r3, #1
   171f4:	movvc	r3, #0
   171f8:	cmp	r3, #0
   171fc:	moveq	r9, r2
   17200:	mvnne	r9, #-2147483648	; 0x80000000
   17204:	b	171bc <__assert_fail@plt+0x5968>
   17208:	add	r4, r4, #1
   1720c:	b	16fb0 <__assert_fail@plt+0x575c>
   17210:	mvn	r7, #0
   17214:	movw	sl, #62216	; 0xf308
   17218:	movt	sl, #1
   1721c:	b	17440 <__assert_fail@plt+0x5bec>
   17220:	add	r2, r4, #1
   17224:	ldrb	r3, [r4, #1]
   17228:	cmp	r3, #58	; 0x3a
   1722c:	movne	lr, #1
   17230:	beq	182ec <__assert_fail@plt+0x6a98>
   17234:	cmp	r3, #122	; 0x7a
   17238:	moveq	r4, r2
   1723c:	bne	17254 <__assert_fail@plt+0x5a00>
   17240:	b	18310 <__assert_fail@plt+0x6abc>
   17244:	sub	r3, r4, #1
   17248:	cmp	r7, r3
   1724c:	beq	172f4 <__assert_fail@plt+0x5aa0>
   17250:	sub	r4, r4, #1
   17254:	sub	r5, r4, r7
   17258:	add	r5, r5, #1
   1725c:	ldr	r3, [sp, #28]
   17260:	subs	r3, r3, #45	; 0x2d
   17264:	movne	r3, #1
   17268:	cmp	r9, #0
   1726c:	movlt	r3, #0
   17270:	cmp	r3, #0
   17274:	moveq	r9, #0
   17278:	mov	r8, r9
   1727c:	cmp	r9, r5
   17280:	movcc	r9, r5
   17284:	ldr	r3, [sp, #24]
   17288:	sub	r3, r3, fp
   1728c:	cmp	r3, r9
   17290:	bls	18448 <__assert_fail@plt+0x6bf4>
   17294:	cmp	r6, #0
   17298:	beq	172ec <__assert_fail@plt+0x5a98>
   1729c:	cmp	r8, r5
   172a0:	bls	172cc <__assert_fail@plt+0x5a78>
   172a4:	sub	r8, r8, r5
   172a8:	ldr	r3, [sp, #28]
   172ac:	cmp	r3, #43	; 0x2b
   172b0:	cmpne	r3, #48	; 0x30
   172b4:	mov	r2, r8
   172b8:	moveq	r1, #48	; 0x30
   172bc:	movne	r1, #32
   172c0:	mov	r0, r6
   172c4:	bl	116e0 <memset@plt>
   172c8:	add	r6, r6, r8
   172cc:	ldr	r3, [sp, #76]	; 0x4c
   172d0:	cmp	r3, #0
   172d4:	beq	18458 <__assert_fail@plt+0x6c04>
   172d8:	mov	r2, r5
   172dc:	mov	r1, r7
   172e0:	mov	r0, r6
   172e4:	bl	16c78 <__assert_fail@plt+0x5424>
   172e8:	add	r6, r6, r5
   172ec:	add	fp, fp, r9
   172f0:	b	16dc4 <__assert_fail@plt+0x5570>
   172f4:	ldr	r2, [sp, #28]
   172f8:	mvn	r3, r9
   172fc:	lsr	r3, r3, #31
   17300:	cmp	r2, #45	; 0x2d
   17304:	moveq	r3, #0
   17308:	cmp	r3, #0
   1730c:	moveq	r9, #0
   17310:	mov	r5, r9
   17314:	cmp	r9, #1
   17318:	movcc	r9, #1
   1731c:	ldr	r3, [sp, #24]
   17320:	sub	r3, r3, fp
   17324:	cmp	r3, r9
   17328:	bls	17374 <__assert_fail@plt+0x5b20>
   1732c:	cmp	r6, #0
   17330:	beq	1736c <__assert_fail@plt+0x5b18>
   17334:	cmp	r5, #1
   17338:	bls	17364 <__assert_fail@plt+0x5b10>
   1733c:	sub	r5, r5, #1
   17340:	ldr	r3, [sp, #28]
   17344:	cmp	r3, #43	; 0x2b
   17348:	cmpne	r3, #48	; 0x30
   1734c:	mov	r2, r5
   17350:	moveq	r1, #48	; 0x30
   17354:	movne	r1, #32
   17358:	mov	r0, r6
   1735c:	bl	116e0 <memset@plt>
   17360:	add	r6, r6, r5
   17364:	ldrb	r3, [r4]
   17368:	strb	r3, [r6], #1
   1736c:	add	fp, fp, r9
   17370:	b	16dc4 <__assert_fail@plt+0x5570>
   17374:	mov	r3, #34	; 0x22
   17378:	ldr	r2, [sp, #32]
   1737c:	str	r3, [r2]
   17380:	b	16e0c <__assert_fail@plt+0x55b8>
   17384:	cmp	sl, #0
   17388:	bne	17254 <__assert_fail@plt+0x5a00>
   1738c:	ldr	r3, [sp, #76]	; 0x4c
   17390:	cmp	r5, #0
   17394:	movne	r3, r5
   17398:	str	r3, [sp, #76]	; 0x4c
   1739c:	mov	r1, #97	; 0x61
   173a0:	mov	r3, #32
   173a4:	strb	r3, [sp, #88]	; 0x58
   173a8:	mov	r3, #37	; 0x25
   173ac:	strb	r3, [sp, #89]	; 0x59
   173b0:	mov	r8, #0
   173b4:	add	r3, sp, #90	; 0x5a
   173b8:	b	176d4 <__assert_fail@plt+0x5e80>
   173bc:	cmp	sl, #0
   173c0:	bne	17254 <__assert_fail@plt+0x5a00>
   173c4:	ldr	r3, [sp, #76]	; 0x4c
   173c8:	cmp	r5, #0
   173cc:	movne	r3, r5
   173d0:	str	r3, [sp, #76]	; 0x4c
   173d4:	mov	r1, #65	; 0x41
   173d8:	b	173a0 <__assert_fail@plt+0x5b4c>
   173dc:	ldr	r3, [sp, #76]	; 0x4c
   173e0:	cmp	r5, #0
   173e4:	movne	r3, r5
   173e8:	str	r3, [sp, #76]	; 0x4c
   173ec:	cmp	sl, #69	; 0x45
   173f0:	movne	r8, #0
   173f4:	bne	17c48 <__assert_fail@plt+0x63f4>
   173f8:	b	17254 <__assert_fail@plt+0x5a00>
   173fc:	cmp	sl, #69	; 0x45
   17400:	beq	17254 <__assert_fail@plt+0x5a00>
   17404:	ldr	r3, [sp, #76]	; 0x4c
   17408:	cmp	r5, #0
   1740c:	movne	r3, r5
   17410:	str	r3, [sp, #76]	; 0x4c
   17414:	mov	r1, #66	; 0x42
   17418:	mov	r8, #0
   1741c:	b	17c48 <__assert_fail@plt+0x63f4>
   17420:	cmp	sl, #79	; 0x4f
   17424:	beq	17254 <__assert_fail@plt+0x5a00>
   17428:	mov	r1, #99	; 0x63
   1742c:	mov	r8, #0
   17430:	b	17c48 <__assert_fail@plt+0x63f4>
   17434:	mvn	r7, #0
   17438:	movw	sl, #62240	; 0xf320
   1743c:	movt	sl, #1
   17440:	ldr	r3, [sp, #1188]	; 0x4a4
   17444:	str	r3, [sp, #20]
   17448:	ldr	r3, [sp, #1184]	; 0x4a0
   1744c:	str	r3, [sp, #16]
   17450:	ldr	r3, [sp, #1180]	; 0x49c
   17454:	str	r3, [sp, #12]
   17458:	str	r7, [sp, #8]
   1745c:	ldr	r8, [sp, #28]
   17460:	str	r8, [sp, #4]
   17464:	ldr	r3, [sp, #76]	; 0x4c
   17468:	str	r3, [sp]
   1746c:	ldr	r3, [sp, #40]	; 0x28
   17470:	mov	r2, sl
   17474:	mvn	r1, #0
   17478:	mov	r0, #0
   1747c:	bl	16cd0 <__assert_fail@plt+0x547c>
   17480:	mov	r5, r0
   17484:	mvn	r3, r9
   17488:	lsr	r3, r3, #31
   1748c:	cmp	r8, #45	; 0x2d
   17490:	moveq	r3, #0
   17494:	cmp	r3, #0
   17498:	moveq	r9, #0
   1749c:	mov	r3, r9
   174a0:	cmp	r9, r5
   174a4:	movcc	r9, r5
   174a8:	ldr	r2, [sp, #24]
   174ac:	sub	r8, r2, fp
   174b0:	cmp	r8, r9
   174b4:	bls	17548 <__assert_fail@plt+0x5cf4>
   174b8:	cmp	r6, #0
   174bc:	beq	17540 <__assert_fail@plt+0x5cec>
   174c0:	cmp	r3, r5
   174c4:	bls	174fc <__assert_fail@plt+0x5ca8>
   174c8:	sub	r3, r3, r5
   174cc:	str	r3, [sp, #80]	; 0x50
   174d0:	ldr	r2, [sp, #28]
   174d4:	cmp	r2, #43	; 0x2b
   174d8:	cmpne	r2, #48	; 0x30
   174dc:	moveq	r2, r3
   174e0:	moveq	r1, #48	; 0x30
   174e4:	ldrne	r2, [sp, #80]	; 0x50
   174e8:	movne	r1, #32
   174ec:	mov	r0, r6
   174f0:	bl	116e0 <memset@plt>
   174f4:	ldr	r3, [sp, #80]	; 0x50
   174f8:	add	r6, r6, r3
   174fc:	ldr	r3, [sp, #1188]	; 0x4a4
   17500:	str	r3, [sp, #20]
   17504:	ldr	r3, [sp, #1184]	; 0x4a0
   17508:	str	r3, [sp, #16]
   1750c:	ldr	r3, [sp, #1180]	; 0x49c
   17510:	str	r3, [sp, #12]
   17514:	str	r7, [sp, #8]
   17518:	ldr	r3, [sp, #28]
   1751c:	str	r3, [sp, #4]
   17520:	ldr	r3, [sp, #76]	; 0x4c
   17524:	str	r3, [sp]
   17528:	ldr	r3, [sp, #40]	; 0x28
   1752c:	mov	r2, sl
   17530:	mov	r1, r8
   17534:	mov	r0, r6
   17538:	bl	16cd0 <__assert_fail@plt+0x547c>
   1753c:	add	r6, r6, r5
   17540:	add	fp, fp, r9
   17544:	b	16dc4 <__assert_fail@plt+0x5570>
   17548:	mov	r3, #34	; 0x22
   1754c:	ldr	r2, [sp, #32]
   17550:	str	r3, [r2]
   17554:	b	16e0c <__assert_fail@plt+0x55b8>
   17558:	mov	r8, #0
   1755c:	b	17c48 <__assert_fail@plt+0x63f4>
   17560:	mov	r3, #34	; 0x22
   17564:	ldr	r2, [sp, #32]
   17568:	str	r3, [r2]
   1756c:	b	16e0c <__assert_fail@plt+0x55b8>
   17570:	mov	r2, r5
   17574:	add	r1, sp, #105	; 0x69
   17578:	mov	r0, r6
   1757c:	bl	16c20 <__assert_fail@plt+0x53cc>
   17580:	b	17794 <__assert_fail@plt+0x5f40>
   17584:	mov	r2, r5
   17588:	add	r1, sp, #105	; 0x69
   1758c:	mov	r0, r6
   17590:	bl	114b8 <memcpy@plt>
   17594:	b	17794 <__assert_fail@plt+0x5f40>
   17598:	cmp	sl, #69	; 0x45
   1759c:	beq	184a0 <__assert_fail@plt+0x6c4c>
   175a0:	ldr	r3, [sp, #40]	; 0x28
   175a4:	ldr	r2, [r3, #20]
   175a8:	movw	r8, #63636	; 0xf894
   175ac:	movt	r8, #65535	; 0xffff
   175b0:	cmp	r2, r8
   175b4:	movge	r8, #0
   175b8:	movlt	r8, #1
   175bc:	add	r3, r2, #1888	; 0x760
   175c0:	add	r3, r3, #12
   175c4:	movw	r0, #1899	; 0x76b
   175c8:	cmp	r3, r0
   175cc:	mvnls	r3, #98	; 0x62
   175d0:	movhi	r3, #0
   175d4:	add	r3, r3, r2
   175d8:	ldr	r2, [sp, #56]	; 0x38
   175dc:	smull	r0, r2, r2, r3
   175e0:	asr	r3, r3, #31
   175e4:	rsb	r3, r3, r2, asr #5
   175e8:	add	r3, r3, #19
   175ec:	mov	r2, #2
   175f0:	str	r2, [sp, #80]	; 0x50
   175f4:	ldr	r0, [sp, #28]
   175f8:	mov	r2, r0
   175fc:	ldr	ip, [sp, #1172]	; 0x494
   17600:	cmp	r0, #0
   17604:	moveq	r2, ip
   17608:	str	r2, [sp, #28]
   1760c:	cmp	r2, #43	; 0x2b
   17610:	movne	r2, #0
   17614:	beq	177a0 <__assert_fail@plt+0x5f4c>
   17618:	str	r2, [sp, #84]	; 0x54
   1761c:	mov	r0, #0
   17620:	b	176a0 <__assert_fail@plt+0x5e4c>
   17624:	cmp	sl, #79	; 0x4f
   17628:	beq	17254 <__assert_fail@plt+0x5a00>
   1762c:	mov	r1, #120	; 0x78
   17630:	mov	r8, #0
   17634:	b	17c48 <__assert_fail@plt+0x63f4>
   17638:	cmp	sl, #0
   1763c:	bne	17254 <__assert_fail@plt+0x5a00>
   17640:	mvn	r7, #0
   17644:	movw	sl, #62248	; 0xf328
   17648:	movt	sl, #1
   1764c:	b	17440 <__assert_fail@plt+0x5bec>
   17650:	cmp	sl, #69	; 0x45
   17654:	beq	17254 <__assert_fail@plt+0x5a00>
   17658:	ldr	r3, [sp, #40]	; 0x28
   1765c:	ldr	r3, [r3, #12]
   17660:	mov	r2, #2
   17664:	str	r2, [sp, #80]	; 0x50
   17668:	b	17694 <__assert_fail@plt+0x5e40>
   1766c:	cmp	sl, #69	; 0x45
   17670:	beq	17254 <__assert_fail@plt+0x5a00>
   17674:	ldr	r3, [sp, #40]	; 0x28
   17678:	ldr	r3, [r3, #12]
   1767c:	ldr	r2, [sp, #28]
   17680:	cmp	r2, #0
   17684:	mov	r2, #2
   17688:	str	r2, [sp, #80]	; 0x50
   1768c:	moveq	r2, #95	; 0x5f
   17690:	streq	r2, [sp, #28]
   17694:	lsr	r8, r3, #31
   17698:	mov	r0, #0
   1769c:	str	r0, [sp, #84]	; 0x54
   176a0:	eor	r2, r8, #1
   176a4:	cmp	sl, #79	; 0x4f
   176a8:	movne	r2, #0
   176ac:	andeq	r2, r2, #1
   176b0:	cmp	r2, #0
   176b4:	beq	177cc <__assert_fail@plt+0x5f78>
   176b8:	mov	r3, #32
   176bc:	strb	r3, [sp, #88]	; 0x58
   176c0:	mov	r3, #37	; 0x25
   176c4:	strb	r3, [sp, #89]	; 0x59
   176c8:	mov	r8, #0
   176cc:	strb	sl, [sp, #90]	; 0x5a
   176d0:	add	r3, sp, #91	; 0x5b
   176d4:	strb	r1, [r3]
   176d8:	mov	r2, #0
   176dc:	strb	r2, [r3, #1]
   176e0:	ldr	r3, [sp, #40]	; 0x28
   176e4:	add	r2, sp, #88	; 0x58
   176e8:	mov	r1, #1024	; 0x400
   176ec:	add	r0, sp, #104	; 0x68
   176f0:	bl	115fc <strftime@plt>
   176f4:	cmp	r0, #0
   176f8:	beq	16dc4 <__assert_fail@plt+0x5570>
   176fc:	sub	r5, r0, #1
   17700:	ldr	r3, [sp, #28]
   17704:	subs	r3, r3, #45	; 0x2d
   17708:	movne	r3, #1
   1770c:	cmp	r9, #0
   17710:	movlt	r3, #0
   17714:	cmp	r3, #0
   17718:	moveq	r9, #0
   1771c:	mov	r7, r9
   17720:	cmp	r9, r5
   17724:	movcc	r9, r5
   17728:	ldr	r3, [sp, #24]
   1772c:	sub	r3, r3, fp
   17730:	cmp	r3, r9
   17734:	bls	17560 <__assert_fail@plt+0x5d0c>
   17738:	cmp	r6, #0
   1773c:	beq	17798 <__assert_fail@plt+0x5f44>
   17740:	cmp	r7, r5
   17744:	bls	17770 <__assert_fail@plt+0x5f1c>
   17748:	sub	r7, r7, r5
   1774c:	ldr	r3, [sp, #28]
   17750:	cmp	r3, #43	; 0x2b
   17754:	cmpne	r3, #48	; 0x30
   17758:	mov	r2, r7
   1775c:	moveq	r1, #48	; 0x30
   17760:	movne	r1, #32
   17764:	mov	r0, r6
   17768:	bl	116e0 <memset@plt>
   1776c:	add	r6, r6, r7
   17770:	cmp	r8, #0
   17774:	bne	17570 <__assert_fail@plt+0x5d1c>
   17778:	ldr	r3, [sp, #76]	; 0x4c
   1777c:	cmp	r3, #0
   17780:	beq	17584 <__assert_fail@plt+0x5d30>
   17784:	mov	r2, r5
   17788:	add	r1, sp, #105	; 0x69
   1778c:	mov	r0, r6
   17790:	bl	16c78 <__assert_fail@plt+0x5424>
   17794:	add	r6, r6, r5
   17798:	add	fp, fp, r9
   1779c:	b	16dc4 <__assert_fail@plt+0x5570>
   177a0:	ldr	ip, [sp, #80]	; 0x50
   177a4:	cmp	ip, #2
   177a8:	movw	r2, #9999	; 0x270f
   177ac:	moveq	r0, #99	; 0x63
   177b0:	movne	r0, r2
   177b4:	cmp	ip, r9
   177b8:	movge	r2, #0
   177bc:	movlt	r2, #1
   177c0:	cmp	r3, r0
   177c4:	orrhi	r2, r2, #1
   177c8:	b	17618 <__assert_fail@plt+0x5dc4>
   177cc:	cmp	r8, #0
   177d0:	rsbne	r3, r3, #0
   177d4:	add	r5, sp, #102	; 0x66
   177d8:	mov	r7, #58	; 0x3a
   177dc:	movw	lr, #52429	; 0xcccd
   177e0:	movt	lr, #52428	; 0xcccc
   177e4:	b	177ec <__assert_fail@plt+0x5f98>
   177e8:	mov	r3, r1
   177ec:	tst	r0, #1
   177f0:	subne	ip, r5, #1
   177f4:	strbne	r7, [r5, #-1]
   177f8:	moveq	ip, r5
   177fc:	sub	r5, ip, #1
   17800:	umull	r2, r1, lr, r3
   17804:	lsr	r1, r1, #3
   17808:	add	r2, r1, r1, lsl #2
   1780c:	sub	r2, r3, r2, lsl #1
   17810:	add	r2, r2, #48	; 0x30
   17814:	strb	r2, [ip, #-1]
   17818:	asrs	r0, r0, #1
   1781c:	movne	r2, #1
   17820:	moveq	r2, #0
   17824:	cmp	r3, #9
   17828:	movls	r3, r2
   1782c:	orrhi	r3, r2, #1
   17830:	cmp	r3, #0
   17834:	bne	177e8 <__assert_fail@plt+0x5f94>
   17838:	ldr	r3, [sp, #28]
   1783c:	cmp	r3, #0
   17840:	moveq	r3, #48	; 0x30
   17844:	str	r3, [sp, #28]
   17848:	ldr	r3, [sp, #80]	; 0x50
   1784c:	cmp	r9, #0
   17850:	movlt	r9, r3
   17854:	cmp	r8, #0
   17858:	bne	184b8 <__assert_fail@plt+0x6c64>
   1785c:	ldr	r3, [sp, #84]	; 0x54
   17860:	cmp	r3, #0
   17864:	bne	185b4 <__assert_fail@plt+0x6d60>
   17868:	add	r7, sp, #102	; 0x66
   1786c:	sub	r7, r7, r5
   17870:	ldr	r3, [sp, #28]
   17874:	subs	r3, r3, #45	; 0x2d
   17878:	movne	r3, #1
   1787c:	sub	r8, r9, r7
   17880:	cmp	r8, #0
   17884:	movle	r8, #0
   17888:	andgt	r8, r3, #1
   1788c:	cmp	r8, #0
   17890:	moveq	r8, r3
   17894:	b	18524 <__assert_fail@plt+0x6cd0>
   17898:	cmp	r6, #0
   1789c:	beq	178b4 <__assert_fail@plt+0x6060>
   178a0:	mov	r2, sl
   178a4:	mov	r1, #32
   178a8:	mov	r0, r6
   178ac:	bl	116e0 <memset@plt>
   178b0:	add	r6, r6, sl
   178b4:	add	fp, fp, sl
   178b8:	sub	r9, r9, sl
   178bc:	b	18500 <__assert_fail@plt+0x6cac>
   178c0:	mov	r3, #34	; 0x22
   178c4:	ldr	r2, [sp, #32]
   178c8:	str	r3, [r2]
   178cc:	b	16e0c <__assert_fail@plt+0x55b8>
   178d0:	mov	r3, #34	; 0x22
   178d4:	ldr	r2, [sp, #32]
   178d8:	str	r3, [r2]
   178dc:	b	16e0c <__assert_fail@plt+0x55b8>
   178e0:	mov	r2, r7
   178e4:	mov	r1, r5
   178e8:	mov	r0, r6
   178ec:	bl	114b8 <memcpy@plt>
   178f0:	b	185a8 <__assert_fail@plt+0x6d54>
   178f4:	cmp	sl, #0
   178f8:	bne	17254 <__assert_fail@plt+0x5a00>
   178fc:	ldr	r3, [sp, #28]
   17900:	cmp	r3, #0
   17904:	lsreq	r3, r9, #31
   17908:	movne	r3, #0
   1790c:	cmp	r3, #0
   17910:	bne	185fc <__assert_fail@plt+0x6da8>
   17914:	sub	r7, r9, #6
   17918:	bic	r7, r7, r7, asr #31
   1791c:	movw	sl, #62228	; 0xf314
   17920:	movt	sl, #1
   17924:	b	17440 <__assert_fail@plt+0x5bec>
   17928:	cmp	sl, #69	; 0x45
   1792c:	beq	17254 <__assert_fail@plt+0x5a00>
   17930:	ldr	r3, [sp, #40]	; 0x28
   17934:	ldr	r3, [r3, #8]
   17938:	mov	r2, #2
   1793c:	str	r2, [sp, #80]	; 0x50
   17940:	b	17694 <__assert_fail@plt+0x5e40>
   17944:	cmp	sl, #69	; 0x45
   17948:	beq	17254 <__assert_fail@plt+0x5a00>
   1794c:	ldr	r3, [sp, #64]	; 0x40
   17950:	mov	r2, #2
   17954:	str	r2, [sp, #80]	; 0x50
   17958:	b	17694 <__assert_fail@plt+0x5e40>
   1795c:	cmp	sl, #69	; 0x45
   17960:	beq	17254 <__assert_fail@plt+0x5a00>
   17964:	ldr	r3, [sp, #40]	; 0x28
   17968:	ldr	r3, [r3, #8]
   1796c:	b	1767c <__assert_fail@plt+0x5e28>
   17970:	cmp	sl, #69	; 0x45
   17974:	beq	17254 <__assert_fail@plt+0x5a00>
   17978:	ldr	r3, [sp, #64]	; 0x40
   1797c:	b	1767c <__assert_fail@plt+0x5e28>
   17980:	cmp	sl, #69	; 0x45
   17984:	beq	17254 <__assert_fail@plt+0x5a00>
   17988:	ldr	r3, [sp, #40]	; 0x28
   1798c:	ldr	r3, [r3, #28]
   17990:	cmn	r3, #1
   17994:	movge	r8, #0
   17998:	movlt	r8, #1
   1799c:	add	r3, r3, #1
   179a0:	mov	r0, #0
   179a4:	str	r0, [sp, #84]	; 0x54
   179a8:	mov	r2, #3
   179ac:	str	r2, [sp, #80]	; 0x50
   179b0:	b	176a0 <__assert_fail@plt+0x5e4c>
   179b4:	cmp	sl, #69	; 0x45
   179b8:	beq	17254 <__assert_fail@plt+0x5a00>
   179bc:	ldr	r3, [sp, #40]	; 0x28
   179c0:	ldr	r3, [r3, #4]
   179c4:	mov	r2, #2
   179c8:	str	r2, [sp, #80]	; 0x50
   179cc:	b	17694 <__assert_fail@plt+0x5e40>
   179d0:	cmp	sl, #69	; 0x45
   179d4:	beq	17254 <__assert_fail@plt+0x5a00>
   179d8:	ldr	r3, [sp, #40]	; 0x28
   179dc:	ldr	r3, [r3, #16]
   179e0:	cmn	r3, #1
   179e4:	movge	r8, #0
   179e8:	movlt	r8, #1
   179ec:	add	r3, r3, #1
   179f0:	mov	r0, #0
   179f4:	str	r0, [sp, #84]	; 0x54
   179f8:	mov	r2, #2
   179fc:	str	r2, [sp, #80]	; 0x50
   17a00:	b	176a0 <__assert_fail@plt+0x5e4c>
   17a04:	cmp	sl, #69	; 0x45
   17a08:	beq	17254 <__assert_fail@plt+0x5a00>
   17a0c:	cmp	r9, #0
   17a10:	movle	r9, #9
   17a14:	ldr	r3, [sp, #1188]	; 0x4a4
   17a18:	mov	r5, #9
   17a1c:	ldr	r0, [sp, #60]	; 0x3c
   17a20:	b	17a34 <__assert_fail@plt+0x61e0>
   17a24:	sub	r5, r5, #1
   17a28:	smull	r1, r2, r0, r3
   17a2c:	asr	r3, r3, #31
   17a30:	rsb	r3, r3, r2, asr #2
   17a34:	cmp	r5, r9
   17a38:	bgt	17a24 <__assert_fail@plt+0x61d0>
   17a3c:	cmp	r5, #1
   17a40:	ble	17a60 <__assert_fail@plt+0x620c>
   17a44:	smull	r1, r2, r0, r3
   17a48:	asr	r1, r3, #31
   17a4c:	rsb	r2, r1, r2, asr #2
   17a50:	add	r2, r2, r2, lsl #2
   17a54:	cmp	r3, r2, lsl #1
   17a58:	beq	17a24 <__assert_fail@plt+0x61d0>
   17a5c:	b	17a68 <__assert_fail@plt+0x6214>
   17a60:	cmp	r5, #1
   17a64:	bne	17ab4 <__assert_fail@plt+0x6260>
   17a68:	add	r2, sp, #1120	; 0x460
   17a6c:	add	r2, r2, #8
   17a70:	add	r1, r2, r5
   17a74:	sub	r1, r1, #1040	; 0x410
   17a78:	sub	r1, r1, #1
   17a7c:	rsb	r0, r2, #1040	; 0x410
   17a80:	add	r0, r0, #1
   17a84:	ldr	ip, [sp, #60]	; 0x3c
   17a88:	smull	r2, lr, ip, r3
   17a8c:	asr	r2, r3, #31
   17a90:	rsb	r2, r2, lr, asr #2
   17a94:	add	lr, r2, r2, lsl #2
   17a98:	sub	r3, r3, lr, lsl #1
   17a9c:	add	r3, r3, #48	; 0x30
   17aa0:	strb	r3, [r1], #-1
   17aa4:	mov	r3, r2
   17aa8:	add	r2, r0, r1
   17aac:	cmp	r2, #0
   17ab0:	bgt	17a88 <__assert_fail@plt+0x6234>
   17ab4:	ldr	r3, [sp, #28]
   17ab8:	cmp	r3, #0
   17abc:	moveq	r3, #48	; 0x30
   17ac0:	str	r3, [sp, #28]
   17ac4:	mov	r7, r5
   17ac8:	ldr	r3, [sp, #24]
   17acc:	sub	r3, r3, fp
   17ad0:	cmp	r3, r5
   17ad4:	bls	17b5c <__assert_fail@plt+0x6308>
   17ad8:	cmp	r6, #0
   17adc:	beq	17b00 <__assert_fail@plt+0x62ac>
   17ae0:	ldr	r3, [sp, #76]	; 0x4c
   17ae4:	cmp	r3, #0
   17ae8:	beq	17b6c <__assert_fail@plt+0x6318>
   17aec:	mov	r2, r5
   17af0:	add	r1, sp, #88	; 0x58
   17af4:	mov	r0, r6
   17af8:	bl	16c78 <__assert_fail@plt+0x5424>
   17afc:	add	r6, r6, r7
   17b00:	add	fp, r7, fp
   17b04:	ldr	r3, [sp, #28]
   17b08:	cmp	r3, #45	; 0x2d
   17b0c:	beq	18660 <__assert_fail@plt+0x6e0c>
   17b10:	sub	r5, r9, r5
   17b14:	ldr	r3, [sp, #24]
   17b18:	sub	r3, r3, fp
   17b1c:	cmp	r3, r5
   17b20:	bls	17b80 <__assert_fail@plt+0x632c>
   17b24:	cmp	r6, #0
   17b28:	cmpne	r5, #0
   17b2c:	beq	17b54 <__assert_fail@plt+0x6300>
   17b30:	ldr	r3, [sp, #28]
   17b34:	cmp	r3, #43	; 0x2b
   17b38:	cmpne	r3, #48	; 0x30
   17b3c:	mov	r2, r5
   17b40:	moveq	r1, #48	; 0x30
   17b44:	movne	r1, #32
   17b48:	mov	r0, r6
   17b4c:	bl	116e0 <memset@plt>
   17b50:	add	r6, r6, r5
   17b54:	add	fp, fp, r5
   17b58:	b	16dc4 <__assert_fail@plt+0x5570>
   17b5c:	mov	r3, #34	; 0x22
   17b60:	ldr	r2, [sp, #32]
   17b64:	str	r3, [r2]
   17b68:	b	16e0c <__assert_fail@plt+0x55b8>
   17b6c:	mov	r2, r5
   17b70:	add	r1, sp, #88	; 0x58
   17b74:	mov	r0, r6
   17b78:	bl	114b8 <memcpy@plt>
   17b7c:	b	17afc <__assert_fail@plt+0x62a8>
   17b80:	mov	r3, #34	; 0x22
   17b84:	ldr	r2, [sp, #32]
   17b88:	str	r3, [r2]
   17b8c:	b	16e0c <__assert_fail@plt+0x55b8>
   17b90:	ldr	r2, [sp, #28]
   17b94:	mvn	r3, r9
   17b98:	lsr	r3, r3, #31
   17b9c:	cmp	r2, #45	; 0x2d
   17ba0:	moveq	r3, #0
   17ba4:	cmp	r3, #0
   17ba8:	moveq	r9, #0
   17bac:	mov	r5, r9
   17bb0:	cmp	r9, #1
   17bb4:	movcc	r9, #1
   17bb8:	ldr	r3, [sp, #24]
   17bbc:	sub	r3, r3, fp
   17bc0:	cmp	r3, r9
   17bc4:	bls	17c10 <__assert_fail@plt+0x63bc>
   17bc8:	cmp	r6, #0
   17bcc:	beq	17c08 <__assert_fail@plt+0x63b4>
   17bd0:	cmp	r5, #1
   17bd4:	bls	17c00 <__assert_fail@plt+0x63ac>
   17bd8:	sub	r5, r5, #1
   17bdc:	ldr	r3, [sp, #28]
   17be0:	cmp	r3, #43	; 0x2b
   17be4:	cmpne	r3, #48	; 0x30
   17be8:	mov	r2, r5
   17bec:	moveq	r1, #48	; 0x30
   17bf0:	movne	r1, #32
   17bf4:	mov	r0, r6
   17bf8:	bl	116e0 <memset@plt>
   17bfc:	add	r6, r6, r5
   17c00:	mov	r3, #10
   17c04:	strb	r3, [r6], #1
   17c08:	add	fp, fp, r9
   17c0c:	b	16dc4 <__assert_fail@plt+0x5570>
   17c10:	mov	r3, #34	; 0x22
   17c14:	ldr	r2, [sp, #32]
   17c18:	str	r3, [r2]
   17c1c:	b	16e0c <__assert_fail@plt+0x55b8>
   17c20:	mov	r8, #1
   17c24:	b	17c2c <__assert_fail@plt+0x63d8>
   17c28:	mov	r8, #0
   17c2c:	cmp	r5, #0
   17c30:	movne	r8, r5
   17c34:	mov	r1, #112	; 0x70
   17c38:	cmp	r5, #0
   17c3c:	ldr	r3, [sp, #76]	; 0x4c
   17c40:	movne	r3, #0
   17c44:	str	r3, [sp, #76]	; 0x4c
   17c48:	mov	r3, #32
   17c4c:	strb	r3, [sp, #88]	; 0x58
   17c50:	mov	r3, #37	; 0x25
   17c54:	strb	r3, [sp, #89]	; 0x59
   17c58:	cmp	sl, #0
   17c5c:	addeq	r3, sp, #90	; 0x5a
   17c60:	beq	176d4 <__assert_fail@plt+0x5e80>
   17c64:	b	176cc <__assert_fail@plt+0x5e78>
   17c68:	ldr	r3, [sp, #40]	; 0x28
   17c6c:	ldr	r2, [r3, #16]
   17c70:	cmp	sl, #79	; 0x4f
   17c74:	moveq	r1, #113	; 0x71
   17c78:	beq	176b8 <__assert_fail@plt+0x5e64>
   17c7c:	mov	r3, #11
   17c80:	mul	r3, r3, r2
   17c84:	asr	r3, r3, #5
   17c88:	add	r3, r3, #1
   17c8c:	mov	r0, #0
   17c90:	str	r0, [sp, #84]	; 0x54
   17c94:	mov	r8, r0
   17c98:	mov	r2, #1
   17c9c:	str	r2, [sp, #80]	; 0x50
   17ca0:	b	177d4 <__assert_fail@plt+0x5f80>
   17ca4:	cmp	sl, #69	; 0x45
   17ca8:	beq	17254 <__assert_fail@plt+0x5a00>
   17cac:	ldr	r3, [sp, #40]	; 0x28
   17cb0:	ldr	r3, [r3]
   17cb4:	mov	r2, #2
   17cb8:	str	r2, [sp, #80]	; 0x50
   17cbc:	b	17694 <__assert_fail@plt+0x5e40>
   17cc0:	ldr	r1, [sp, #40]	; 0x28
   17cc4:	ldrd	r2, [r1]
   17cc8:	strd	r2, [sp, #104]	; 0x68
   17ccc:	ldrd	r2, [r1, #8]
   17cd0:	strd	r2, [sp, #112]	; 0x70
   17cd4:	ldrd	r2, [r1, #16]
   17cd8:	strd	r2, [sp, #120]	; 0x78
   17cdc:	ldrd	r2, [r1, #24]
   17ce0:	strd	r2, [sp, #128]	; 0x80
   17ce4:	ldrd	r2, [r1, #32]
   17ce8:	strd	r2, [sp, #136]	; 0x88
   17cec:	ldr	r3, [r1, #40]	; 0x28
   17cf0:	str	r3, [sp, #144]	; 0x90
   17cf4:	mvn	r3, #0
   17cf8:	str	r3, [sp, #132]	; 0x84
   17cfc:	add	r1, sp, #104	; 0x68
   17d00:	ldr	r0, [sp, #1184]	; 0x4a0
   17d04:	bl	1afec <__assert_fail@plt+0x9798>
   17d08:	ldr	r3, [sp, #132]	; 0x84
   17d0c:	cmp	r3, #0
   17d10:	blt	17d70 <__assert_fail@plt+0x651c>
   17d14:	lsr	r8, r0, #31
   17d18:	mov	r2, r0
   17d1c:	add	r5, sp, #102	; 0x66
   17d20:	ldr	r1, [sp, #60]	; 0x3c
   17d24:	smull	r3, ip, r1, r2
   17d28:	asr	ip, ip, #2
   17d2c:	asr	lr, r2, #31
   17d30:	sub	r3, ip, lr
   17d34:	add	r3, r3, r3, lsl #2
   17d38:	sub	r3, r2, r3, lsl #1
   17d3c:	sub	r2, ip, lr
   17d40:	cmp	r0, #0
   17d44:	rsblt	r3, r3, #48	; 0x30
   17d48:	addge	r3, r3, #48	; 0x30
   17d4c:	uxtb	r3, r3
   17d50:	strb	r3, [r5, #-1]!
   17d54:	cmp	r2, #0
   17d58:	bne	17d24 <__assert_fail@plt+0x64d0>
   17d5c:	mov	r3, #0
   17d60:	str	r3, [sp, #84]	; 0x54
   17d64:	mov	r3, #1
   17d68:	str	r3, [sp, #80]	; 0x50
   17d6c:	b	17838 <__assert_fail@plt+0x5fe4>
   17d70:	mov	r3, #75	; 0x4b
   17d74:	ldr	r2, [sp, #32]
   17d78:	str	r3, [r2]
   17d7c:	b	16e0c <__assert_fail@plt+0x55b8>
   17d80:	cmp	sl, #79	; 0x4f
   17d84:	beq	17254 <__assert_fail@plt+0x5a00>
   17d88:	mov	r1, #88	; 0x58
   17d8c:	mov	r8, #0
   17d90:	b	17c48 <__assert_fail@plt+0x63f4>
   17d94:	ldr	r3, [sp, #28]
   17d98:	subs	r3, r3, #45	; 0x2d
   17d9c:	movne	r3, #1
   17da0:	cmp	r9, #0
   17da4:	movlt	r3, #0
   17da8:	cmp	r3, #0
   17dac:	moveq	r9, #0
   17db0:	mov	r5, r9
   17db4:	cmp	r9, #1
   17db8:	movcc	r9, #1
   17dbc:	ldr	r3, [sp, #24]
   17dc0:	sub	r3, r3, fp
   17dc4:	cmp	r3, r9
   17dc8:	bls	17e14 <__assert_fail@plt+0x65c0>
   17dcc:	cmp	r6, #0
   17dd0:	beq	17e0c <__assert_fail@plt+0x65b8>
   17dd4:	cmp	r5, #1
   17dd8:	bls	17e04 <__assert_fail@plt+0x65b0>
   17ddc:	sub	r5, r5, #1
   17de0:	ldr	r3, [sp, #28]
   17de4:	cmp	r3, #43	; 0x2b
   17de8:	cmpne	r3, #48	; 0x30
   17dec:	mov	r2, r5
   17df0:	moveq	r1, #48	; 0x30
   17df4:	movne	r1, #32
   17df8:	mov	r0, r6
   17dfc:	bl	116e0 <memset@plt>
   17e00:	add	r6, r6, r5
   17e04:	mov	r3, #9
   17e08:	strb	r3, [r6], #1
   17e0c:	add	fp, fp, r9
   17e10:	b	16dc4 <__assert_fail@plt+0x5570>
   17e14:	mov	r3, #34	; 0x22
   17e18:	ldr	r2, [sp, #32]
   17e1c:	str	r3, [r2]
   17e20:	b	16e0c <__assert_fail@plt+0x55b8>
   17e24:	ldr	r3, [sp, #40]	; 0x28
   17e28:	ldr	r3, [r3, #24]
   17e2c:	add	r3, r3, #6
   17e30:	ldr	r2, [sp, #52]	; 0x34
   17e34:	smull	r0, r2, r2, r3
   17e38:	add	r0, r2, r3
   17e3c:	asr	r2, r3, #31
   17e40:	rsb	r2, r2, r0, asr #2
   17e44:	rsb	r2, r2, r2, lsl #3
   17e48:	sub	r3, r3, r2
   17e4c:	add	r3, r3, #1
   17e50:	mov	r2, #1
   17e54:	str	r2, [sp, #80]	; 0x50
   17e58:	b	17694 <__assert_fail@plt+0x5e40>
   17e5c:	cmp	sl, #69	; 0x45
   17e60:	beq	17254 <__assert_fail@plt+0x5a00>
   17e64:	ldr	r2, [sp, #40]	; 0x28
   17e68:	ldr	r3, [r2, #28]
   17e6c:	ldr	r2, [r2, #24]
   17e70:	sub	r3, r3, r2
   17e74:	add	r3, r3, #7
   17e78:	ldr	r2, [sp, #52]	; 0x34
   17e7c:	smull	r0, r2, r2, r3
   17e80:	add	r2, r2, r3
   17e84:	asr	r3, r3, #31
   17e88:	rsb	r3, r3, r2, asr #2
   17e8c:	mov	r2, #2
   17e90:	str	r2, [sp, #80]	; 0x50
   17e94:	b	17694 <__assert_fail@plt+0x5e40>
   17e98:	cmp	sl, #69	; 0x45
   17e9c:	beq	17254 <__assert_fail@plt+0x5a00>
   17ea0:	ldr	r2, [sp, #40]	; 0x28
   17ea4:	ldr	r5, [r2, #20]
   17ea8:	cmp	r5, #0
   17eac:	movlt	r0, #300	; 0x12c
   17eb0:	mvnge	r0, #99	; 0x63
   17eb4:	add	r0, r5, r0
   17eb8:	ldr	r7, [r2, #28]
   17ebc:	ldr	r2, [r2, #24]
   17ec0:	str	r2, [sp, #80]	; 0x50
   17ec4:	sub	r2, r7, r2
   17ec8:	add	r2, r2, #380	; 0x17c
   17ecc:	add	r2, r2, #2
   17ed0:	ldr	ip, [sp, #52]	; 0x34
   17ed4:	smull	ip, lr, ip, r2
   17ed8:	add	lr, lr, r2
   17edc:	asr	ip, r2, #31
   17ee0:	rsb	ip, ip, lr, asr #2
   17ee4:	rsb	ip, ip, ip, lsl #3
   17ee8:	sub	ip, r2, ip
   17eec:	sub	r8, r7, ip
   17ef0:	adds	r8, r8, #3
   17ef4:	bmi	17fe0 <__assert_fail@plt+0x678c>
   17ef8:	tst	r0, #3
   17efc:	movne	r2, #0
   17f00:	bne	17f3c <__assert_fail@plt+0x66e8>
   17f04:	ldr	r2, [sp, #56]	; 0x38
   17f08:	smull	ip, r2, r2, r0
   17f0c:	asr	ip, r0, #31
   17f10:	rsb	r2, ip, r2, asr #5
   17f14:	mov	ip, #100	; 0x64
   17f18:	mls	r2, ip, r2, r0
   17f1c:	cmp	r2, #0
   17f20:	movne	r2, #1
   17f24:	bne	17f3c <__assert_fail@plt+0x66e8>
   17f28:	mov	ip, #400	; 0x190
   17f2c:	sdiv	r2, r0, ip
   17f30:	mls	r2, ip, r2, r0
   17f34:	clz	r2, r2
   17f38:	lsr	r2, r2, #5
   17f3c:	add	r2, r2, #364	; 0x16c
   17f40:	add	r2, r2, #1
   17f44:	sub	r2, r7, r2
   17f48:	ldr	r0, [sp, #80]	; 0x50
   17f4c:	sub	r0, r2, r0
   17f50:	add	r0, r0, #380	; 0x17c
   17f54:	add	r0, r0, #2
   17f58:	ldr	ip, [sp, #52]	; 0x34
   17f5c:	smull	ip, lr, ip, r0
   17f60:	add	lr, lr, r0
   17f64:	asr	ip, r0, #31
   17f68:	rsb	ip, ip, lr, asr #2
   17f6c:	rsb	ip, ip, ip, lsl #3
   17f70:	sub	ip, r0, ip
   17f74:	sub	lr, r2, ip
   17f78:	add	lr, lr, #3
   17f7c:	cmp	lr, #0
   17f80:	movge	r8, lr
   17f84:	mvn	lr, lr
   17f88:	lsr	lr, lr, #31
   17f8c:	cmp	r3, #71	; 0x47
   17f90:	beq	18098 <__assert_fail@plt+0x6844>
   17f94:	cmp	r3, #103	; 0x67
   17f98:	bne	180c8 <__assert_fail@plt+0x6874>
   17f9c:	ldr	ip, [sp, #56]	; 0x38
   17fa0:	smull	r2, r3, ip, r5
   17fa4:	asr	r2, r5, #31
   17fa8:	rsb	r2, r2, r3, asr #5
   17fac:	mov	r0, #100	; 0x64
   17fb0:	mls	r2, r0, r2, r5
   17fb4:	add	r2, r2, lr
   17fb8:	smull	r3, ip, ip, r2
   17fbc:	asr	r3, r2, #31
   17fc0:	rsb	r3, r3, ip, asr #5
   17fc4:	mls	r3, r0, r3, r2
   17fc8:	cmp	r3, #0
   17fcc:	blt	18070 <__assert_fail@plt+0x681c>
   17fd0:	mov	r8, #0
   17fd4:	mov	r2, #2
   17fd8:	str	r2, [sp, #80]	; 0x50
   17fdc:	b	175f4 <__assert_fail@plt+0x5da0>
   17fe0:	sub	r0, r0, #1
   17fe4:	tst	r0, #3
   17fe8:	movne	r2, #0
   17fec:	bne	18028 <__assert_fail@plt+0x67d4>
   17ff0:	ldr	r2, [sp, #56]	; 0x38
   17ff4:	smull	ip, r2, r2, r0
   17ff8:	asr	ip, r0, #31
   17ffc:	rsb	r2, ip, r2, asr #5
   18000:	mov	ip, #100	; 0x64
   18004:	mls	r2, ip, r2, r0
   18008:	cmp	r2, #0
   1800c:	movne	r2, #1
   18010:	bne	18028 <__assert_fail@plt+0x67d4>
   18014:	mov	ip, #400	; 0x190
   18018:	sdiv	r2, r0, ip
   1801c:	mls	r2, ip, r2, r0
   18020:	clz	r2, r2
   18024:	lsr	r2, r2, #5
   18028:	add	r2, r2, #364	; 0x16c
   1802c:	add	r2, r2, #1
   18030:	add	r2, r2, r7
   18034:	ldr	r0, [sp, #80]	; 0x50
   18038:	sub	r0, r2, r0
   1803c:	add	r0, r0, #380	; 0x17c
   18040:	add	r0, r0, #2
   18044:	ldr	ip, [sp, #52]	; 0x34
   18048:	smull	ip, lr, ip, r0
   1804c:	add	lr, lr, r0
   18050:	asr	ip, r0, #31
   18054:	rsb	ip, ip, lr, asr #2
   18058:	rsb	ip, ip, ip, lsl #3
   1805c:	sub	r0, r0, ip
   18060:	sub	r0, r2, r0
   18064:	add	r8, r0, #3
   18068:	mvn	lr, #0
   1806c:	b	17f8c <__assert_fail@plt+0x6738>
   18070:	movw	r2, #63636	; 0xf894
   18074:	movt	r2, #65535	; 0xffff
   18078:	sub	r2, r2, lr
   1807c:	cmp	r2, r5
   18080:	rsbgt	r3, r3, #0
   18084:	addle	r3, r3, #100	; 0x64
   18088:	mov	r8, #0
   1808c:	mov	r2, #2
   18090:	str	r2, [sp, #80]	; 0x50
   18094:	b	175f4 <__assert_fail@plt+0x5da0>
   18098:	movw	r3, #63636	; 0xf894
   1809c:	movt	r3, #65535	; 0xffff
   180a0:	sub	r3, r3, lr
   180a4:	cmp	r5, r3
   180a8:	movge	r8, #0
   180ac:	movlt	r8, #1
   180b0:	add	r3, r5, #1888	; 0x760
   180b4:	add	r3, r3, #12
   180b8:	add	r3, r3, lr
   180bc:	mov	r2, #4
   180c0:	str	r2, [sp, #80]	; 0x50
   180c4:	b	175f4 <__assert_fail@plt+0x5da0>
   180c8:	ldr	r3, [sp, #52]	; 0x34
   180cc:	smull	r2, r3, r3, r8
   180d0:	add	r2, r3, r8
   180d4:	asr	r3, r8, #31
   180d8:	rsb	r3, r3, r2, asr #2
   180dc:	add	r3, r3, #1
   180e0:	mov	r2, #2
   180e4:	str	r2, [sp, #80]	; 0x50
   180e8:	b	17694 <__assert_fail@plt+0x5e40>
   180ec:	cmp	sl, #69	; 0x45
   180f0:	beq	17254 <__assert_fail@plt+0x5a00>
   180f4:	ldr	ip, [sp, #40]	; 0x28
   180f8:	ldr	r3, [ip, #24]
   180fc:	add	r3, r3, #6
   18100:	ldr	lr, [sp, #52]	; 0x34
   18104:	smull	r0, r2, lr, r3
   18108:	add	r0, r2, r3
   1810c:	asr	r2, r3, #31
   18110:	rsb	r2, r2, r0, asr #2
   18114:	rsb	r2, r2, r2, lsl #3
   18118:	sub	r2, r3, r2
   1811c:	ldr	r3, [ip, #28]
   18120:	sub	r3, r3, r2
   18124:	add	r3, r3, #7
   18128:	smull	r0, r2, lr, r3
   1812c:	add	r2, r2, r3
   18130:	asr	r3, r3, #31
   18134:	rsb	r3, r3, r2, asr #2
   18138:	mov	r2, #2
   1813c:	str	r2, [sp, #80]	; 0x50
   18140:	b	17694 <__assert_fail@plt+0x5e40>
   18144:	cmp	sl, #69	; 0x45
   18148:	beq	17254 <__assert_fail@plt+0x5a00>
   1814c:	ldr	r3, [sp, #40]	; 0x28
   18150:	ldr	r3, [r3, #24]
   18154:	mov	r2, #1
   18158:	str	r2, [sp, #80]	; 0x50
   1815c:	b	17694 <__assert_fail@plt+0x5e40>
   18160:	cmp	sl, #69	; 0x45
   18164:	beq	184a8 <__assert_fail@plt+0x6c54>
   18168:	cmp	sl, #79	; 0x4f
   1816c:	beq	17254 <__assert_fail@plt+0x5a00>
   18170:	ldr	r3, [sp, #40]	; 0x28
   18174:	ldr	r3, [r3, #20]
   18178:	movw	r8, #63636	; 0xf894
   1817c:	movt	r8, #65535	; 0xffff
   18180:	cmp	r3, r8
   18184:	movge	r8, #0
   18188:	movlt	r8, #1
   1818c:	add	r3, r3, #1888	; 0x760
   18190:	add	r3, r3, #12
   18194:	mov	r2, #4
   18198:	str	r2, [sp, #80]	; 0x50
   1819c:	b	175f4 <__assert_fail@plt+0x5da0>
   181a0:	cmp	sl, #69	; 0x45
   181a4:	beq	184b0 <__assert_fail@plt+0x6c5c>
   181a8:	ldr	r3, [sp, #40]	; 0x28
   181ac:	ldr	r2, [r3, #20]
   181b0:	ldr	r3, [sp, #56]	; 0x38
   181b4:	smull	r3, r0, r3, r2
   181b8:	asr	r3, r2, #31
   181bc:	rsb	r3, r3, r0, asr #5
   181c0:	mov	r0, #100	; 0x64
   181c4:	mls	r3, r0, r3, r2
   181c8:	cmp	r3, #0
   181cc:	blt	181e0 <__assert_fail@plt+0x698c>
   181d0:	mov	r8, #0
   181d4:	mov	r2, #2
   181d8:	str	r2, [sp, #80]	; 0x50
   181dc:	b	175f4 <__assert_fail@plt+0x5da0>
   181e0:	movw	r0, #63636	; 0xf894
   181e4:	movt	r0, #65535	; 0xffff
   181e8:	cmp	r2, r0
   181ec:	rsblt	r3, r3, #0
   181f0:	addge	r3, r3, #100	; 0x64
   181f4:	b	181d0 <__assert_fail@plt+0x697c>
   181f8:	cmp	r5, #0
   181fc:	ldr	r3, [sp, #76]	; 0x4c
   18200:	movne	r3, #0
   18204:	str	r3, [sp, #76]	; 0x4c
   18208:	ldr	r0, [sp, #48]	; 0x30
   1820c:	bl	11674 <strlen@plt>
   18210:	mov	r8, r0
   18214:	ldr	r3, [sp, #28]
   18218:	subs	r3, r3, #45	; 0x2d
   1821c:	movne	r3, #1
   18220:	cmp	r9, #0
   18224:	movlt	r3, #0
   18228:	cmp	r3, #0
   1822c:	moveq	r9, #0
   18230:	mov	r7, r9
   18234:	cmp	r9, r0
   18238:	movcc	r9, r0
   1823c:	ldr	r3, [sp, #24]
   18240:	sub	r3, r3, fp
   18244:	cmp	r3, r9
   18248:	bls	182b4 <__assert_fail@plt+0x6a60>
   1824c:	cmp	r6, #0
   18250:	beq	182ac <__assert_fail@plt+0x6a58>
   18254:	cmp	r7, r0
   18258:	bls	18284 <__assert_fail@plt+0x6a30>
   1825c:	sub	r7, r7, r0
   18260:	ldr	r3, [sp, #28]
   18264:	cmp	r3, #43	; 0x2b
   18268:	cmpne	r3, #48	; 0x30
   1826c:	mov	r2, r7
   18270:	moveq	r1, #48	; 0x30
   18274:	movne	r1, #32
   18278:	mov	r0, r6
   1827c:	bl	116e0 <memset@plt>
   18280:	add	r6, r6, r7
   18284:	cmp	r5, #0
   18288:	bne	182c4 <__assert_fail@plt+0x6a70>
   1828c:	ldr	r3, [sp, #76]	; 0x4c
   18290:	cmp	r3, #0
   18294:	beq	182d8 <__assert_fail@plt+0x6a84>
   18298:	mov	r2, r8
   1829c:	ldr	r1, [sp, #48]	; 0x30
   182a0:	mov	r0, r6
   182a4:	bl	16c78 <__assert_fail@plt+0x5424>
   182a8:	add	r6, r6, r8
   182ac:	add	fp, fp, r9
   182b0:	b	16dc4 <__assert_fail@plt+0x5570>
   182b4:	mov	r3, #34	; 0x22
   182b8:	ldr	r2, [sp, #32]
   182bc:	str	r3, [r2]
   182c0:	b	16e0c <__assert_fail@plt+0x55b8>
   182c4:	mov	r2, r8
   182c8:	ldr	r1, [sp, #48]	; 0x30
   182cc:	mov	r0, r6
   182d0:	bl	16c20 <__assert_fail@plt+0x53cc>
   182d4:	b	182a8 <__assert_fail@plt+0x6a54>
   182d8:	mov	r2, r8
   182dc:	ldr	r1, [sp, #48]	; 0x30
   182e0:	mov	r0, r6
   182e4:	bl	114b8 <memcpy@plt>
   182e8:	b	182a8 <__assert_fail@plt+0x6a54>
   182ec:	add	r0, r4, #2
   182f0:	mov	lr, #1
   182f4:	add	lr, lr, #1
   182f8:	mov	r2, r0
   182fc:	ldrb	r3, [r0], #1
   18300:	cmp	r3, #58	; 0x3a
   18304:	bne	17234 <__assert_fail@plt+0x59e0>
   18308:	b	182f4 <__assert_fail@plt+0x6aa0>
   1830c:	mov	lr, #0
   18310:	ldr	r2, [sp, #40]	; 0x28
   18314:	ldr	r3, [r2, #32]
   18318:	cmp	r3, #0
   1831c:	blt	16dc4 <__assert_fail@plt+0x5570>
   18320:	ldr	r2, [r2, #36]	; 0x24
   18324:	cmp	r2, #0
   18328:	movlt	r8, #1
   1832c:	blt	1834c <__assert_fail@plt+0x6af8>
   18330:	movne	r8, #0
   18334:	bne	1834c <__assert_fail@plt+0x6af8>
   18338:	ldr	r3, [sp, #48]	; 0x30
   1833c:	ldrb	r8, [r3]
   18340:	cmp	r8, #45	; 0x2d
   18344:	movne	r8, #0
   18348:	moveq	r8, #1
   1834c:	ldr	r3, [sp, #68]	; 0x44
   18350:	smull	r0, r3, r3, r2
   18354:	add	r3, r3, r2
   18358:	asr	r0, r2, #31
   1835c:	str	r0, [sp, #80]	; 0x50
   18360:	rsb	r5, r0, r3, asr #11
   18364:	ldr	ip, [sp, #72]	; 0x48
   18368:	smull	r0, r3, ip, r2
   1836c:	add	r3, r3, r2
   18370:	ldr	r0, [sp, #80]	; 0x50
   18374:	rsb	r3, r0, r3, asr #5
   18378:	smull	ip, r0, ip, r3
   1837c:	add	r0, r0, r3
   18380:	asr	ip, r3, #31
   18384:	rsb	r0, ip, r0, asr #5
   18388:	rsb	r0, r0, r0, lsl #4
   1838c:	sub	r0, r3, r0, lsl #2
   18390:	rsb	r3, r3, r3, lsl #4
   18394:	sub	r3, r2, r3, lsl #2
   18398:	cmp	lr, #3
   1839c:	ldrls	pc, [pc, lr, lsl #2]
   183a0:	b	17254 <__assert_fail@plt+0x5a00>
   183a4:			; <UNDEFINED> instruction: 0x000183b4
   183a8:	ldrdeq	r8, [r1], -r4
   183ac:	strdeq	r8, [r1], -r4
   183b0:	andeq	r8, r1, r0, lsr #8
   183b4:	mov	r3, #100	; 0x64
   183b8:	mla	r3, r3, r5, r0
   183bc:	mov	r0, #0
   183c0:	mov	r2, #1
   183c4:	str	r2, [sp, #84]	; 0x54
   183c8:	mov	r2, #5
   183cc:	str	r2, [sp, #80]	; 0x50
   183d0:	b	176a0 <__assert_fail@plt+0x5e4c>
   183d4:	mov	r3, #100	; 0x64
   183d8:	mla	r3, r3, r5, r0
   183dc:	mov	r0, #4
   183e0:	mov	r2, #1
   183e4:	str	r2, [sp, #84]	; 0x54
   183e8:	mov	r2, #6
   183ec:	str	r2, [sp, #80]	; 0x50
   183f0:	b	176a0 <__assert_fail@plt+0x5e4c>
   183f4:	mov	r2, #100	; 0x64
   183f8:	mul	r0, r2, r0
   183fc:	movw	r2, #10000	; 0x2710
   18400:	mla	r5, r2, r5, r0
   18404:	add	r3, r5, r3
   18408:	mov	r0, #20
   1840c:	mov	r2, #1
   18410:	str	r2, [sp, #84]	; 0x54
   18414:	mov	r2, #9
   18418:	str	r2, [sp, #80]	; 0x50
   1841c:	b	176a0 <__assert_fail@plt+0x5e4c>
   18420:	cmp	r3, #0
   18424:	bne	183f4 <__assert_fail@plt+0x6ba0>
   18428:	cmp	r0, #0
   1842c:	bne	183d4 <__assert_fail@plt+0x6b80>
   18430:	mov	r3, r5
   18434:	mov	r2, #1
   18438:	str	r2, [sp, #84]	; 0x54
   1843c:	mov	r2, #3
   18440:	str	r2, [sp, #80]	; 0x50
   18444:	b	176a0 <__assert_fail@plt+0x5e4c>
   18448:	mov	r3, #34	; 0x22
   1844c:	ldr	r2, [sp, #32]
   18450:	str	r3, [r2]
   18454:	b	16e0c <__assert_fail@plt+0x55b8>
   18458:	mov	r2, r5
   1845c:	mov	r1, r7
   18460:	mov	r0, r6
   18464:	bl	114b8 <memcpy@plt>
   18468:	b	172e8 <__assert_fail@plt+0x5a94>
   1846c:	str	r6, [sp, #28]
   18470:	ldr	r2, [sp, #28]
   18474:	ldr	r3, [sp, #24]
   18478:	cmp	r2, #0
   1847c:	cmpne	r3, #0
   18480:	movne	r3, #0
   18484:	strbne	r3, [r2]
   18488:	ldr	r3, [sp, #32]
   1848c:	ldr	r2, [sp, #44]	; 0x2c
   18490:	str	r2, [r3]
   18494:	b	16e10 <__assert_fail@plt+0x55bc>
   18498:	mov	fp, #0
   1849c:	b	18470 <__assert_fail@plt+0x6c1c>
   184a0:	mov	r1, #67	; 0x43
   184a4:	b	176b8 <__assert_fail@plt+0x5e64>
   184a8:	mov	r1, #89	; 0x59
   184ac:	b	176b8 <__assert_fail@plt+0x5e64>
   184b0:	mov	r1, #121	; 0x79
   184b4:	b	176b8 <__assert_fail@plt+0x5e64>
   184b8:	add	r7, sp, #102	; 0x66
   184bc:	sub	r7, r7, r5
   184c0:	sub	sl, r9, #1
   184c4:	sub	sl, sl, r7
   184c8:	ldr	r3, [sp, #28]
   184cc:	subs	r8, r3, #45	; 0x2d
   184d0:	movne	r8, #1
   184d4:	cmp	sl, #0
   184d8:	movle	r3, #0
   184dc:	andgt	r3, r8, #1
   184e0:	cmp	r3, #0
   184e4:	bne	18674 <__assert_fail@plt+0x6e20>
   184e8:	mov	sl, #0
   184ec:	mov	r3, #45	; 0x2d
   184f0:	str	r3, [sp, #80]	; 0x50
   184f4:	ldr	r3, [sp, #28]
   184f8:	cmp	r3, #95	; 0x5f
   184fc:	beq	17898 <__assert_fail@plt+0x6044>
   18500:	ldr	r3, [sp, #24]
   18504:	sub	r3, r3, fp
   18508:	cmp	r3, #1
   1850c:	bls	178c0 <__assert_fail@plt+0x606c>
   18510:	cmp	r6, #0
   18514:	ldrne	r3, [sp, #80]	; 0x50
   18518:	strbne	r3, [r6], #1
   1851c:	add	fp, fp, #1
   18520:	sub	r9, r9, #1
   18524:	cmp	r9, #0
   18528:	movlt	r8, #0
   1852c:	andge	r8, r8, #1
   18530:	cmp	r8, #0
   18534:	moveq	r9, #0
   18538:	mov	r8, r9
   1853c:	cmp	r9, r7
   18540:	movcc	r9, r7
   18544:	ldr	r3, [sp, #24]
   18548:	sub	r3, r3, fp
   1854c:	cmp	r3, r9
   18550:	bls	178d0 <__assert_fail@plt+0x607c>
   18554:	cmp	r6, #0
   18558:	beq	185ac <__assert_fail@plt+0x6d58>
   1855c:	cmp	r8, r7
   18560:	bls	1858c <__assert_fail@plt+0x6d38>
   18564:	sub	r8, r8, r7
   18568:	ldr	r3, [sp, #28]
   1856c:	cmp	r3, #43	; 0x2b
   18570:	cmpne	r3, #48	; 0x30
   18574:	mov	r2, r8
   18578:	moveq	r1, #48	; 0x30
   1857c:	movne	r1, #32
   18580:	mov	r0, r6
   18584:	bl	116e0 <memset@plt>
   18588:	add	r6, r6, r8
   1858c:	ldr	r3, [sp, #76]	; 0x4c
   18590:	cmp	r3, #0
   18594:	beq	178e0 <__assert_fail@plt+0x608c>
   18598:	mov	r2, r7
   1859c:	mov	r1, r5
   185a0:	mov	r0, r6
   185a4:	bl	16c78 <__assert_fail@plt+0x5424>
   185a8:	add	r6, r6, r7
   185ac:	add	fp, fp, r9
   185b0:	b	16dc4 <__assert_fail@plt+0x5570>
   185b4:	add	r7, sp, #102	; 0x66
   185b8:	sub	r7, r7, r5
   185bc:	sub	sl, r9, #1
   185c0:	sub	sl, sl, r7
   185c4:	ldr	r3, [sp, #28]
   185c8:	subs	r3, r3, #45	; 0x2d
   185cc:	movne	r3, #1
   185d0:	cmp	sl, #0
   185d4:	movle	r8, #0
   185d8:	andgt	r8, r3, #1
   185dc:	cmp	r8, #0
   185e0:	movne	r3, #43	; 0x2b
   185e4:	strne	r3, [sp, #80]	; 0x50
   185e8:	bne	184f4 <__assert_fail@plt+0x6ca0>
   185ec:	mov	r2, #43	; 0x2b
   185f0:	str	r2, [sp, #80]	; 0x50
   185f4:	mov	sl, #0
   185f8:	b	1867c <__assert_fail@plt+0x6e28>
   185fc:	movw	r8, #62228	; 0xf314
   18600:	movt	r8, #1
   18604:	ldr	r3, [sp, #1188]	; 0x4a4
   18608:	str	r3, [sp, #20]
   1860c:	ldr	r3, [sp, #1184]	; 0x4a0
   18610:	str	r3, [sp, #16]
   18614:	ldr	r3, [sp, #1180]	; 0x49c
   18618:	str	r3, [sp, #12]
   1861c:	mov	r7, #4
   18620:	str	r7, [sp, #8]
   18624:	mov	r3, #43	; 0x2b
   18628:	str	r3, [sp, #4]
   1862c:	ldr	r3, [sp, #76]	; 0x4c
   18630:	str	r3, [sp]
   18634:	ldr	r3, [sp, #40]	; 0x28
   18638:	mov	r2, r8
   1863c:	mvn	r1, #0
   18640:	mov	r0, #0
   18644:	bl	16cd0 <__assert_fail@plt+0x547c>
   18648:	mov	r5, r0
   1864c:	mov	r9, sl
   18650:	mov	sl, r8
   18654:	mov	r3, #43	; 0x2b
   18658:	str	r3, [sp, #28]
   1865c:	b	1749c <__assert_fail@plt+0x5c48>
   18660:	ldr	r3, [sp, #24]
   18664:	cmp	r3, fp
   18668:	beq	17b80 <__assert_fail@plt+0x632c>
   1866c:	mov	r5, #0
   18670:	b	17b54 <__assert_fail@plt+0x6300>
   18674:	mov	r2, #45	; 0x2d
   18678:	str	r2, [sp, #80]	; 0x50
   1867c:	mov	r8, r3
   18680:	b	184f4 <__assert_fail@plt+0x6ca0>
   18684:	push	{lr}		; (str lr, [sp, #-4]!)
   18688:	sub	sp, sp, #36	; 0x24
   1868c:	mov	ip, #0
   18690:	strb	ip, [sp, #31]
   18694:	ldr	lr, [sp, #44]	; 0x2c
   18698:	str	lr, [sp, #20]
   1869c:	ldr	lr, [sp, #40]	; 0x28
   186a0:	str	lr, [sp, #16]
   186a4:	add	lr, sp, #31
   186a8:	str	lr, [sp, #12]
   186ac:	mvn	lr, #0
   186b0:	str	lr, [sp, #8]
   186b4:	str	ip, [sp, #4]
   186b8:	str	ip, [sp]
   186bc:	bl	16cd0 <__assert_fail@plt+0x547c>
   186c0:	add	sp, sp, #36	; 0x24
   186c4:	pop	{pc}		; (ldr pc, [sp], #4)
   186c8:	strd	r4, [sp, #-16]!
   186cc:	str	r6, [sp, #8]
   186d0:	str	lr, [sp, #12]
   186d4:	subs	r4, r0, #0
   186d8:	beq	18774 <__assert_fail@plt+0x6f20>
   186dc:	mov	r1, #47	; 0x2f
   186e0:	mov	r0, r4
   186e4:	bl	11770 <strrchr@plt>
   186e8:	subs	r5, r0, #0
   186ec:	beq	1874c <__assert_fail@plt+0x6ef8>
   186f0:	add	r6, r5, #1
   186f4:	sub	r3, r6, r4
   186f8:	cmp	r3, #6
   186fc:	ble	1874c <__assert_fail@plt+0x6ef8>
   18700:	mov	r2, #7
   18704:	movw	r1, #62316	; 0xf36c
   18708:	movt	r1, #1
   1870c:	sub	r0, r5, #6
   18710:	bl	11818 <strncmp@plt>
   18714:	cmp	r0, #0
   18718:	bne	1874c <__assert_fail@plt+0x6ef8>
   1871c:	mov	r2, #3
   18720:	movw	r1, #62324	; 0xf374
   18724:	movt	r1, #1
   18728:	mov	r0, r6
   1872c:	bl	11818 <strncmp@plt>
   18730:	cmp	r0, #0
   18734:	movne	r4, r6
   18738:	bne	1874c <__assert_fail@plt+0x6ef8>
   1873c:	add	r4, r5, #4
   18740:	movw	r3, #472	; 0x1d8
   18744:	movt	r3, #3
   18748:	str	r4, [r3]
   1874c:	movw	r3, #632	; 0x278
   18750:	movt	r3, #3
   18754:	str	r4, [r3]
   18758:	movw	r3, #476	; 0x1dc
   1875c:	movt	r3, #3
   18760:	str	r4, [r3]
   18764:	ldrd	r4, [sp]
   18768:	ldr	r6, [sp, #8]
   1876c:	add	sp, sp, #12
   18770:	pop	{pc}		; (ldr pc, [sp], #4)
   18774:	movw	r3, #488	; 0x1e8
   18778:	movt	r3, #3
   1877c:	ldr	r3, [r3]
   18780:	mov	r2, #55	; 0x37
   18784:	mov	r1, #1
   18788:	movw	r0, #62260	; 0xf334
   1878c:	movt	r0, #1
   18790:	bl	11554 <fwrite@plt>
   18794:	bl	11824 <abort@plt>
   18798:	mov	r2, #0
   1879c:	mov	r3, #0
   187a0:	strd	r2, [r0]
   187a4:	strd	r2, [r0, #8]
   187a8:	strd	r2, [r0, #16]
   187ac:	strd	r2, [r0, #24]
   187b0:	strd	r2, [r0, #32]
   187b4:	strd	r2, [r0, #40]	; 0x28
   187b8:	cmp	r1, #10
   187bc:	beq	187c8 <__assert_fail@plt+0x6f74>
   187c0:	str	r1, [r0]
   187c4:	bx	lr
   187c8:	str	r4, [sp, #-8]!
   187cc:	str	lr, [sp, #4]
   187d0:	bl	11824 <abort@plt>
   187d4:	strd	r4, [sp, #-16]!
   187d8:	str	r6, [sp, #8]
   187dc:	str	lr, [sp, #12]
   187e0:	mov	r5, r0
   187e4:	mov	r6, r1
   187e8:	mov	r2, #5
   187ec:	mov	r1, r0
   187f0:	mov	r0, #0
   187f4:	bl	114e8 <dcgettext@plt>
   187f8:	mov	r4, r0
   187fc:	cmp	r5, r0
   18800:	beq	18818 <__assert_fail@plt+0x6fc4>
   18804:	mov	r0, r4
   18808:	ldrd	r4, [sp]
   1880c:	ldr	r6, [sp, #8]
   18810:	add	sp, sp, #12
   18814:	pop	{pc}		; (ldr pc, [sp], #4)
   18818:	bl	1cd28 <__assert_fail@plt+0xb4d4>
   1881c:	ldrb	r3, [r0]
   18820:	bic	r3, r3, #32
   18824:	cmp	r3, #85	; 0x55
   18828:	bne	188ac <__assert_fail@plt+0x7058>
   1882c:	ldrb	r3, [r0, #1]
   18830:	bic	r3, r3, #32
   18834:	cmp	r3, #84	; 0x54
   18838:	bne	18870 <__assert_fail@plt+0x701c>
   1883c:	ldrb	r3, [r0, #2]
   18840:	bic	r3, r3, #32
   18844:	cmp	r3, #70	; 0x46
   18848:	bne	18870 <__assert_fail@plt+0x701c>
   1884c:	ldrb	r3, [r0, #3]
   18850:	cmp	r3, #45	; 0x2d
   18854:	bne	18870 <__assert_fail@plt+0x701c>
   18858:	ldrb	r3, [r0, #4]
   1885c:	cmp	r3, #56	; 0x38
   18860:	bne	18870 <__assert_fail@plt+0x701c>
   18864:	ldrb	r3, [r0, #5]
   18868:	cmp	r3, #0
   1886c:	beq	1888c <__assert_fail@plt+0x7038>
   18870:	movw	r4, #62412	; 0xf3cc
   18874:	movt	r4, #1
   18878:	movw	r3, #62432	; 0xf3e0
   1887c:	movt	r3, #1
   18880:	cmp	r6, #9
   18884:	movne	r4, r3
   18888:	b	18804 <__assert_fail@plt+0x6fb0>
   1888c:	ldrb	r2, [r4]
   18890:	movw	r4, #62428	; 0xf3dc
   18894:	movt	r4, #1
   18898:	movw	r3, #62416	; 0xf3d0
   1889c:	movt	r3, #1
   188a0:	cmp	r2, #96	; 0x60
   188a4:	movne	r4, r3
   188a8:	b	18804 <__assert_fail@plt+0x6fb0>
   188ac:	cmp	r3, #71	; 0x47
   188b0:	bne	18870 <__assert_fail@plt+0x701c>
   188b4:	ldrb	r3, [r0, #1]
   188b8:	bic	r3, r3, #32
   188bc:	cmp	r3, #66	; 0x42
   188c0:	bne	18870 <__assert_fail@plt+0x701c>
   188c4:	ldrb	r3, [r0, #2]
   188c8:	cmp	r3, #49	; 0x31
   188cc:	bne	18870 <__assert_fail@plt+0x701c>
   188d0:	ldrb	r3, [r0, #3]
   188d4:	cmp	r3, #56	; 0x38
   188d8:	bne	18870 <__assert_fail@plt+0x701c>
   188dc:	ldrb	r3, [r0, #4]
   188e0:	cmp	r3, #48	; 0x30
   188e4:	bne	18870 <__assert_fail@plt+0x701c>
   188e8:	ldrb	r3, [r0, #5]
   188ec:	cmp	r3, #51	; 0x33
   188f0:	bne	18870 <__assert_fail@plt+0x701c>
   188f4:	ldrb	r3, [r0, #6]
   188f8:	cmp	r3, #48	; 0x30
   188fc:	bne	18870 <__assert_fail@plt+0x701c>
   18900:	ldrb	r3, [r0, #7]
   18904:	cmp	r3, #0
   18908:	bne	18870 <__assert_fail@plt+0x701c>
   1890c:	ldrb	r2, [r4]
   18910:	movw	r4, #62424	; 0xf3d8
   18914:	movt	r4, #1
   18918:	movw	r3, #62420	; 0xf3d4
   1891c:	movt	r3, #1
   18920:	cmp	r2, #96	; 0x60
   18924:	movne	r4, r3
   18928:	b	18804 <__assert_fail@plt+0x6fb0>
   1892c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18930:	strd	r6, [sp, #8]
   18934:	strd	r8, [sp, #16]
   18938:	strd	sl, [sp, #24]
   1893c:	str	lr, [sp, #32]
   18940:	sub	sp, sp, #116	; 0x74
   18944:	str	r0, [sp, #64]	; 0x40
   18948:	mov	r8, r1
   1894c:	str	r2, [sp, #48]	; 0x30
   18950:	str	r3, [sp, #24]
   18954:	ldr	r7, [sp, #152]	; 0x98
   18958:	bl	1156c <__ctype_get_mb_cur_max@plt>
   1895c:	str	r0, [sp, #76]	; 0x4c
   18960:	ldr	r3, [sp, #156]	; 0x9c
   18964:	ubfx	r3, r3, #1, #1
   18968:	str	r3, [sp, #32]
   1896c:	mov	r3, #1
   18970:	str	r3, [sp, #40]	; 0x28
   18974:	mov	r3, #0
   18978:	str	r3, [sp, #68]	; 0x44
   1897c:	str	r3, [sp, #36]	; 0x24
   18980:	str	r3, [sp, #28]
   18984:	str	r3, [sp, #52]	; 0x34
   18988:	str	r3, [sp, #60]	; 0x3c
   1898c:	str	r3, [sp, #72]	; 0x48
   18990:	movw	r3, #62436	; 0xf3e4
   18994:	movt	r3, #1
   18998:	str	r3, [sp, #80]	; 0x50
   1899c:	mov	r9, r8
   189a0:	mov	sl, r7
   189a4:	cmp	sl, #10
   189a8:	ldrls	pc, [pc, sl, lsl #2]
   189ac:	b	18b70 <__assert_fail@plt+0x731c>
   189b0:	andeq	r8, r1, r0, lsl sl
   189b4:	andeq	r8, r1, r4, ror #19
   189b8:	andeq	r8, r1, r8, asr #22
   189bc:	ldrdeq	r8, [r1], -ip
   189c0:	strdeq	r8, [r1], -ip
   189c4:	andeq	r8, r1, r0, lsr #20
   189c8:	andeq	r9, r1, ip, ror #27
   189cc:	andeq	r8, r1, r4, ror fp
   189d0:	andeq	r8, r1, ip, asr sl
   189d4:	andeq	r8, r1, ip, asr sl
   189d8:	andeq	r8, r1, ip, asr sl
   189dc:	mov	r3, #1
   189e0:	str	r3, [sp, #28]
   189e4:	mov	r3, #1
   189e8:	str	r3, [sp, #32]
   189ec:	str	r3, [sp, #52]	; 0x34
   189f0:	movw	r3, #62432	; 0xf3e0
   189f4:	movt	r3, #1
   189f8:	str	r3, [sp, #60]	; 0x3c
   189fc:	mov	fp, #0
   18a00:	mov	sl, #2
   18a04:	mov	r6, #0
   18a08:	ldr	r8, [sp, #64]	; 0x40
   18a0c:	b	19284 <__assert_fail@plt+0x7a30>
   18a10:	mov	fp, sl
   18a14:	mov	r3, #0
   18a18:	str	r3, [sp, #32]
   18a1c:	b	18a04 <__assert_fail@plt+0x71b0>
   18a20:	ldr	r3, [sp, #32]
   18a24:	cmp	r3, #0
   18a28:	bne	18b88 <__assert_fail@plt+0x7334>
   18a2c:	cmp	r9, #0
   18a30:	beq	18bac <__assert_fail@plt+0x7358>
   18a34:	mov	r3, #34	; 0x22
   18a38:	ldr	r2, [sp, #64]	; 0x40
   18a3c:	strb	r3, [r2]
   18a40:	mov	fp, #1
   18a44:	str	fp, [sp, #28]
   18a48:	str	fp, [sp, #52]	; 0x34
   18a4c:	movw	r3, #62412	; 0xf3cc
   18a50:	movt	r3, #1
   18a54:	str	r3, [sp, #60]	; 0x3c
   18a58:	b	18a04 <__assert_fail@plt+0x71b0>
   18a5c:	cmp	sl, #10
   18a60:	bne	18a94 <__assert_fail@plt+0x7240>
   18a64:	ldr	r3, [sp, #32]
   18a68:	cmp	r3, #0
   18a6c:	movne	fp, #0
   18a70:	beq	18abc <__assert_fail@plt+0x7268>
   18a74:	ldr	r0, [sp, #168]	; 0xa8
   18a78:	bl	11674 <strlen@plt>
   18a7c:	str	r0, [sp, #52]	; 0x34
   18a80:	ldr	r3, [sp, #168]	; 0xa8
   18a84:	str	r3, [sp, #60]	; 0x3c
   18a88:	mov	r3, #1
   18a8c:	str	r3, [sp, #28]
   18a90:	b	18a04 <__assert_fail@plt+0x71b0>
   18a94:	mov	r1, sl
   18a98:	ldr	r0, [sp, #80]	; 0x50
   18a9c:	bl	187d4 <__assert_fail@plt+0x6f80>
   18aa0:	str	r0, [sp, #164]	; 0xa4
   18aa4:	mov	r1, sl
   18aa8:	movw	r0, #62432	; 0xf3e0
   18aac:	movt	r0, #1
   18ab0:	bl	187d4 <__assert_fail@plt+0x6f80>
   18ab4:	str	r0, [sp, #168]	; 0xa8
   18ab8:	b	18a64 <__assert_fail@plt+0x7210>
   18abc:	ldr	r3, [sp, #164]	; 0xa4
   18ac0:	ldrb	r3, [r3]
   18ac4:	cmp	r3, #0
   18ac8:	beq	18af4 <__assert_fail@plt+0x72a0>
   18acc:	ldr	r2, [sp, #164]	; 0xa4
   18ad0:	mov	fp, #0
   18ad4:	ldr	r1, [sp, #64]	; 0x40
   18ad8:	cmp	r9, fp
   18adc:	strbhi	r3, [r1, fp]
   18ae0:	add	fp, fp, #1
   18ae4:	ldrb	r3, [r2, #1]!
   18ae8:	cmp	r3, #0
   18aec:	bne	18ad8 <__assert_fail@plt+0x7284>
   18af0:	b	18a74 <__assert_fail@plt+0x7220>
   18af4:	mov	fp, #0
   18af8:	b	18a74 <__assert_fail@plt+0x7220>
   18afc:	ldr	r3, [sp, #32]
   18b00:	cmp	r3, #0
   18b04:	bne	189e4 <__assert_fail@plt+0x7190>
   18b08:	mov	r3, #1
   18b0c:	str	r3, [sp, #28]
   18b10:	cmp	r9, #0
   18b14:	beq	18bc8 <__assert_fail@plt+0x7374>
   18b18:	mov	r3, #39	; 0x27
   18b1c:	ldr	r2, [sp, #64]	; 0x40
   18b20:	strb	r3, [r2]
   18b24:	mov	r3, #0
   18b28:	str	r3, [sp, #32]
   18b2c:	mov	fp, #1
   18b30:	str	fp, [sp, #52]	; 0x34
   18b34:	movw	r3, #62432	; 0xf3e0
   18b38:	movt	r3, #1
   18b3c:	str	r3, [sp, #60]	; 0x3c
   18b40:	mov	sl, #2
   18b44:	b	18a04 <__assert_fail@plt+0x71b0>
   18b48:	ldr	r3, [sp, #32]
   18b4c:	cmp	r3, #0
   18b50:	beq	18b10 <__assert_fail@plt+0x72bc>
   18b54:	mov	r3, #1
   18b58:	str	r3, [sp, #52]	; 0x34
   18b5c:	movw	r3, #62432	; 0xf3e0
   18b60:	movt	r3, #1
   18b64:	str	r3, [sp, #60]	; 0x3c
   18b68:	mov	fp, #0
   18b6c:	b	18a04 <__assert_fail@plt+0x71b0>
   18b70:	bl	11824 <abort@plt>
   18b74:	mov	fp, #0
   18b78:	str	fp, [sp, #32]
   18b7c:	mov	r3, #1
   18b80:	str	r3, [sp, #28]
   18b84:	b	18a04 <__assert_fail@plt+0x71b0>
   18b88:	ldr	r3, [sp, #32]
   18b8c:	str	r3, [sp, #28]
   18b90:	mov	r3, #1
   18b94:	str	r3, [sp, #52]	; 0x34
   18b98:	movw	r3, #62412	; 0xf3cc
   18b9c:	movt	r3, #1
   18ba0:	str	r3, [sp, #60]	; 0x3c
   18ba4:	mov	fp, #0
   18ba8:	b	18a04 <__assert_fail@plt+0x71b0>
   18bac:	mov	fp, #1
   18bb0:	str	fp, [sp, #28]
   18bb4:	str	fp, [sp, #52]	; 0x34
   18bb8:	movw	r3, #62412	; 0xf3cc
   18bbc:	movt	r3, #1
   18bc0:	str	r3, [sp, #60]	; 0x3c
   18bc4:	b	18a04 <__assert_fail@plt+0x71b0>
   18bc8:	mov	r3, #0
   18bcc:	str	r3, [sp, #32]
   18bd0:	mov	fp, #1
   18bd4:	str	fp, [sp, #52]	; 0x34
   18bd8:	movw	r3, #62432	; 0xf3e0
   18bdc:	movt	r3, #1
   18be0:	str	r3, [sp, #60]	; 0x3c
   18be4:	mov	sl, #2
   18be8:	b	18a04 <__assert_fail@plt+0x71b0>
   18bec:	mov	r3, r2
   18bf0:	add	r4, r6, r2
   18bf4:	ldr	r2, [sp, #24]
   18bf8:	cmp	r3, #1
   18bfc:	movls	r3, #0
   18c00:	movhi	r3, #1
   18c04:	cmn	r2, #1
   18c08:	movne	r3, #0
   18c0c:	cmp	r3, #0
   18c10:	beq	18c20 <__assert_fail@plt+0x73cc>
   18c14:	ldr	r0, [sp, #48]	; 0x30
   18c18:	bl	11674 <strlen@plt>
   18c1c:	str	r0, [sp, #24]
   18c20:	ldr	r3, [sp, #24]
   18c24:	cmp	r4, r3
   18c28:	bhi	19e14 <__assert_fail@plt+0x85c0>
   18c2c:	ldr	r3, [sp, #48]	; 0x30
   18c30:	add	r4, r3, r6
   18c34:	ldr	r2, [sp, #52]	; 0x34
   18c38:	ldr	r1, [sp, #60]	; 0x3c
   18c3c:	mov	r0, r4
   18c40:	bl	114d0 <memcmp@plt>
   18c44:	cmp	r0, #0
   18c48:	bne	19e14 <__assert_fail@plt+0x85c0>
   18c4c:	ldr	r3, [sp, #32]
   18c50:	cmp	r3, #0
   18c54:	bne	18e64 <__assert_fail@plt+0x7610>
   18c58:	ldrb	r4, [r4]
   18c5c:	cmp	r4, #126	; 0x7e
   18c60:	ldrls	pc, [pc, r4, lsl #2]
   18c64:	b	19718 <__assert_fail@plt+0x7ec4>
   18c68:	andeq	r8, r1, r8, lsr #29
   18c6c:	andeq	r9, r1, r8, lsl r7
   18c70:	andeq	r9, r1, r8, lsl r7
   18c74:	andeq	r9, r1, r8, lsl r7
   18c78:	andeq	r9, r1, r8, lsl r7
   18c7c:	andeq	r9, r1, r8, lsl r7
   18c80:	andeq	r9, r1, r8, lsl r7
   18c84:	andeq	r9, r1, r0, asr #11
   18c88:	andeq	r9, r1, r4, asr #2
   18c8c:	andeq	r9, r1, r8, ror #9
   18c90:	muleq	r1, r4, r5
   18c94:	strdeq	r9, [r1], -ip
   18c98:	andeq	r9, r1, r8, asr r1
   18c9c:	andeq	r9, r1, ip, ror #2
   18ca0:	andeq	r9, r1, r8, lsl r7
   18ca4:	andeq	r9, r1, r8, lsl r7
   18ca8:	andeq	r9, r1, r8, lsl r7
   18cac:	andeq	r9, r1, r8, lsl r7
   18cb0:	andeq	r9, r1, r8, lsl r7
   18cb4:	andeq	r9, r1, r8, lsl r7
   18cb8:	andeq	r9, r1, r8, lsl r7
   18cbc:	andeq	r9, r1, r8, lsl r7
   18cc0:	andeq	r9, r1, r8, lsl r7
   18cc4:	andeq	r9, r1, r8, lsl r7
   18cc8:	andeq	r9, r1, r8, lsl r7
   18ccc:	andeq	r9, r1, r8, lsl r7
   18cd0:	andeq	r9, r1, r8, lsl r7
   18cd4:	andeq	r9, r1, r8, lsl r7
   18cd8:	andeq	r9, r1, r8, lsl r7
   18cdc:	andeq	r9, r1, r8, lsl r7
   18ce0:	andeq	r9, r1, r8, lsl r7
   18ce4:	andeq	r9, r1, r8, lsl r7
   18ce8:	andeq	r9, r1, r4, lsr r6
   18cec:	andeq	r9, r1, r8, asr r6
   18cf0:	andeq	r9, r1, r8, asr r6
   18cf4:	strdeq	r9, [r1], -r0
   18cf8:	andeq	r9, r1, r8, asr r6
   18cfc:	andeq	r9, r1, r8, ror fp
   18d00:	andeq	r9, r1, r8, asr r6
   18d04:	andeq	r9, r1, r8, ror r6
   18d08:	andeq	r9, r1, r8, asr r6
   18d0c:	andeq	r9, r1, r8, asr r6
   18d10:	andeq	r9, r1, r8, asr r6
   18d14:	andeq	r9, r1, r8, ror fp
   18d18:	andeq	r9, r1, r8, ror fp
   18d1c:	andeq	r9, r1, r8, ror fp
   18d20:	andeq	r9, r1, r8, ror fp
   18d24:	andeq	r9, r1, r8, ror fp
   18d28:	andeq	r9, r1, r8, ror fp
   18d2c:	andeq	r9, r1, r8, ror fp
   18d30:	andeq	r9, r1, r8, ror fp
   18d34:	andeq	r9, r1, r8, ror fp
   18d38:	andeq	r9, r1, r8, ror fp
   18d3c:	andeq	r9, r1, r8, ror fp
   18d40:	andeq	r9, r1, r8, ror fp
   18d44:	andeq	r9, r1, r8, ror fp
   18d48:	andeq	r9, r1, r8, ror fp
   18d4c:	andeq	r9, r1, r8, ror fp
   18d50:	andeq	r9, r1, r8, ror fp
   18d54:	andeq	r9, r1, r8, asr r6
   18d58:	andeq	r9, r1, r8, asr r6
   18d5c:	andeq	r9, r1, r8, asr r6
   18d60:	andeq	r9, r1, r8, asr r6
   18d64:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d68:	andeq	r9, r1, r8, lsl r7
   18d6c:	andeq	r9, r1, r8, ror fp
   18d70:	andeq	r9, r1, r8, ror fp
   18d74:	andeq	r9, r1, r8, ror fp
   18d78:	andeq	r9, r1, r8, ror fp
   18d7c:	andeq	r9, r1, r8, ror fp
   18d80:	andeq	r9, r1, r8, ror fp
   18d84:	andeq	r9, r1, r8, ror fp
   18d88:	andeq	r9, r1, r8, ror fp
   18d8c:	andeq	r9, r1, r8, ror fp
   18d90:	andeq	r9, r1, r8, ror fp
   18d94:	andeq	r9, r1, r8, ror fp
   18d98:	andeq	r9, r1, r8, ror fp
   18d9c:	andeq	r9, r1, r8, ror fp
   18da0:	andeq	r9, r1, r8, ror fp
   18da4:	andeq	r9, r1, r8, ror fp
   18da8:	andeq	r9, r1, r8, ror fp
   18dac:	andeq	r9, r1, r8, ror fp
   18db0:	andeq	r9, r1, r8, ror fp
   18db4:	andeq	r9, r1, r8, ror fp
   18db8:	andeq	r9, r1, r8, ror fp
   18dbc:	andeq	r9, r1, r8, ror fp
   18dc0:	andeq	r9, r1, r8, ror fp
   18dc4:	andeq	r9, r1, r8, ror fp
   18dc8:	andeq	r9, r1, r8, ror fp
   18dcc:	andeq	r9, r1, r8, ror fp
   18dd0:	andeq	r9, r1, r8, ror fp
   18dd4:	andeq	r9, r1, r8, asr r6
   18dd8:	andeq	r9, r1, r0, lsl r5
   18ddc:	andeq	r9, r1, r8, ror fp
   18de0:	andeq	r9, r1, r8, asr r6
   18de4:	andeq	r9, r1, r8, ror fp
   18de8:	andeq	r9, r1, r8, asr r6
   18dec:	andeq	r9, r1, r8, ror fp
   18df0:	andeq	r9, r1, r8, ror fp
   18df4:	andeq	r9, r1, r8, ror fp
   18df8:	andeq	r9, r1, r8, ror fp
   18dfc:	andeq	r9, r1, r8, ror fp
   18e00:	andeq	r9, r1, r8, ror fp
   18e04:	andeq	r9, r1, r8, ror fp
   18e08:	andeq	r9, r1, r8, ror fp
   18e0c:	andeq	r9, r1, r8, ror fp
   18e10:	andeq	r9, r1, r8, ror fp
   18e14:	andeq	r9, r1, r8, ror fp
   18e18:	andeq	r9, r1, r8, ror fp
   18e1c:	andeq	r9, r1, r8, ror fp
   18e20:	andeq	r9, r1, r8, ror fp
   18e24:	andeq	r9, r1, r8, ror fp
   18e28:	andeq	r9, r1, r8, ror fp
   18e2c:	andeq	r9, r1, r8, ror fp
   18e30:	andeq	r9, r1, r8, ror fp
   18e34:	andeq	r9, r1, r8, ror fp
   18e38:	andeq	r9, r1, r8, ror fp
   18e3c:	andeq	r9, r1, r8, ror fp
   18e40:	andeq	r9, r1, r8, ror fp
   18e44:	andeq	r9, r1, r8, ror fp
   18e48:	andeq	r9, r1, r8, ror fp
   18e4c:	andeq	r9, r1, r8, ror fp
   18e50:	andeq	r9, r1, r8, ror fp
   18e54:	ldrdeq	r9, [r1], -r0
   18e58:	andeq	r9, r1, r8, asr r6
   18e5c:	ldrdeq	r9, [r1], -r0
   18e60:	strdeq	r9, [r1], -r0
   18e64:	mov	r8, r9
   18e68:	mov	r7, sl
   18e6c:	b	19d6c <__assert_fail@plt+0x8518>
   18e70:	ldr	r3, [sp, #28]
   18e74:	cmp	r3, #0
   18e78:	bne	18e98 <__assert_fail@plt+0x7644>
   18e7c:	ldr	r3, [sp, #156]	; 0x9c
   18e80:	tst	r3, #1
   18e84:	bne	19280 <__assert_fail@plt+0x7a2c>
   18e88:	ldr	r3, [sp, #28]
   18e8c:	str	r3, [sp, #44]	; 0x2c
   18e90:	mov	r5, r3
   18e94:	b	191a0 <__assert_fail@plt+0x794c>
   18e98:	ldr	r3, [sp, #32]
   18e9c:	cmp	r3, #0
   18ea0:	bne	19d1c <__assert_fail@plt+0x84c8>
   18ea4:	str	r3, [sp, #44]	; 0x2c
   18ea8:	ldr	r3, [sp, #36]	; 0x24
   18eac:	eor	r3, r3, #1
   18eb0:	cmp	sl, #2
   18eb4:	movne	r3, #0
   18eb8:	andeq	r3, r3, #1
   18ebc:	cmp	r3, #0
   18ec0:	beq	18f18 <__assert_fail@plt+0x76c4>
   18ec4:	cmp	r9, fp
   18ec8:	movhi	r2, #39	; 0x27
   18ecc:	strbhi	r2, [r8, fp]
   18ed0:	add	r2, fp, #1
   18ed4:	cmp	r9, r2
   18ed8:	movhi	r1, #36	; 0x24
   18edc:	strbhi	r1, [r8, r2]
   18ee0:	add	r2, fp, #2
   18ee4:	cmp	r9, r2
   18ee8:	movhi	r1, #39	; 0x27
   18eec:	strbhi	r1, [r8, r2]
   18ef0:	add	r2, fp, #3
   18ef4:	cmp	r9, r2
   18ef8:	bls	19dd8 <__assert_fail@plt+0x8584>
   18efc:	mov	r1, #92	; 0x5c
   18f00:	strb	r1, [r8, r2]
   18f04:	add	fp, fp, #4
   18f08:	str	r3, [sp, #36]	; 0x24
   18f0c:	mov	r5, #0
   18f10:	mov	r4, #48	; 0x30
   18f14:	b	191ec <__assert_fail@plt+0x7998>
   18f18:	cmp	r9, fp
   18f1c:	bhi	18f44 <__assert_fail@plt+0x76f0>
   18f20:	add	r1, fp, #1
   18f24:	ldr	r2, [sp, #56]	; 0x38
   18f28:	cmp	r2, #0
   18f2c:	bne	18f6c <__assert_fail@plt+0x7718>
   18f30:	mov	r3, r5
   18f34:	ldr	r5, [sp, #56]	; 0x38
   18f38:	mov	fp, r1
   18f3c:	mov	r4, #48	; 0x30
   18f40:	b	191a0 <__assert_fail@plt+0x794c>
   18f44:	mov	r2, #92	; 0x5c
   18f48:	strb	r2, [r8, fp]
   18f4c:	add	r1, fp, #1
   18f50:	ldr	r2, [sp, #56]	; 0x38
   18f54:	cmp	r2, #0
   18f58:	moveq	r3, r5
   18f5c:	moveq	r5, r2
   18f60:	moveq	fp, r1
   18f64:	moveq	r4, #48	; 0x30
   18f68:	beq	191ec <__assert_fail@plt+0x7998>
   18f6c:	add	r2, r6, #1
   18f70:	ldr	r0, [sp, #24]
   18f74:	cmp	r2, r0
   18f78:	bcs	18f94 <__assert_fail@plt+0x7740>
   18f7c:	ldr	r0, [sp, #48]	; 0x30
   18f80:	ldrb	r2, [r0, r2]
   18f84:	sub	r2, r2, #48	; 0x30
   18f88:	uxtb	r2, r2
   18f8c:	cmp	r2, #9
   18f90:	bls	18fac <__assert_fail@plt+0x7758>
   18f94:	mov	r2, r3
   18f98:	mov	r3, r5
   18f9c:	mov	r5, r2
   18fa0:	mov	fp, r1
   18fa4:	mov	r4, #48	; 0x30
   18fa8:	b	191c4 <__assert_fail@plt+0x7970>
   18fac:	cmp	r9, r1
   18fb0:	movhi	r2, #48	; 0x30
   18fb4:	strbhi	r2, [r8, r1]
   18fb8:	add	r2, fp, #2
   18fbc:	cmp	r9, r2
   18fc0:	movhi	r1, #48	; 0x30
   18fc4:	strbhi	r1, [r8, r2]
   18fc8:	add	r1, fp, #3
   18fcc:	b	18f94 <__assert_fail@plt+0x7740>
   18fd0:	mov	r3, #0
   18fd4:	str	r3, [sp, #44]	; 0x2c
   18fd8:	cmp	sl, #2
   18fdc:	beq	18ff8 <__assert_fail@plt+0x77a4>
   18fe0:	cmp	sl, #5
   18fe4:	beq	19010 <__assert_fail@plt+0x77bc>
   18fe8:	mov	r5, #0
   18fec:	mov	r3, r5
   18ff0:	mov	r4, #63	; 0x3f
   18ff4:	b	191a0 <__assert_fail@plt+0x794c>
   18ff8:	ldr	r3, [sp, #32]
   18ffc:	cmp	r3, #0
   19000:	bne	19d28 <__assert_fail@plt+0x84d4>
   19004:	mov	r5, r3
   19008:	mov	r4, #63	; 0x3f
   1900c:	b	19708 <__assert_fail@plt+0x7eb4>
   19010:	ldr	r3, [sp, #156]	; 0x9c
   19014:	tst	r3, #4
   19018:	beq	19b40 <__assert_fail@plt+0x82ec>
   1901c:	add	r2, r6, #2
   19020:	ldr	r3, [sp, #24]
   19024:	cmp	r2, r3
   19028:	bcs	19b50 <__assert_fail@plt+0x82fc>
   1902c:	ldr	r3, [sp, #48]	; 0x30
   19030:	add	r3, r3, r6
   19034:	ldrb	r4, [r3, #1]
   19038:	cmp	r4, #63	; 0x3f
   1903c:	movne	r5, #0
   19040:	movne	r3, r5
   19044:	movne	r4, #63	; 0x3f
   19048:	bne	191a0 <__assert_fail@plt+0x794c>
   1904c:	ldr	r3, [sp, #48]	; 0x30
   19050:	ldrb	r1, [r3, r2]
   19054:	sub	r3, r1, #33	; 0x21
   19058:	cmp	r3, #29
   1905c:	ldrls	pc, [pc, r3, lsl #2]
   19060:	b	19b60 <__assert_fail@plt+0x830c>
   19064:	ldrdeq	r9, [r1], -ip
   19068:	andeq	r9, r1, r0, ror #22
   1906c:	andeq	r9, r1, r0, ror #22
   19070:	andeq	r9, r1, r0, ror #22
   19074:	andeq	r9, r1, r0, ror #22
   19078:	andeq	r9, r1, r0, ror #22
   1907c:	ldrdeq	r9, [r1], -ip
   19080:	ldrdeq	r9, [r1], -ip
   19084:	ldrdeq	r9, [r1], -ip
   19088:	andeq	r9, r1, r0, ror #22
   1908c:	andeq	r9, r1, r0, ror #22
   19090:	andeq	r9, r1, r0, ror #22
   19094:	ldrdeq	r9, [r1], -ip
   19098:	andeq	r9, r1, r0, ror #22
   1909c:	ldrdeq	r9, [r1], -ip
   190a0:	andeq	r9, r1, r0, ror #22
   190a4:	andeq	r9, r1, r0, ror #22
   190a8:	andeq	r9, r1, r0, ror #22
   190ac:	andeq	r9, r1, r0, ror #22
   190b0:	andeq	r9, r1, r0, ror #22
   190b4:	andeq	r9, r1, r0, ror #22
   190b8:	andeq	r9, r1, r0, ror #22
   190bc:	andeq	r9, r1, r0, ror #22
   190c0:	andeq	r9, r1, r0, ror #22
   190c4:	andeq	r9, r1, r0, ror #22
   190c8:	andeq	r9, r1, r0, ror #22
   190cc:	andeq	r9, r1, r0, ror #22
   190d0:	ldrdeq	r9, [r1], -ip
   190d4:	ldrdeq	r9, [r1], -ip
   190d8:	ldrdeq	r9, [r1], -ip
   190dc:	ldr	r3, [sp, #32]
   190e0:	cmp	r3, #0
   190e4:	bne	19dcc <__assert_fail@plt+0x8578>
   190e8:	cmp	r9, fp
   190ec:	movhi	r3, #63	; 0x3f
   190f0:	strbhi	r3, [r8, fp]
   190f4:	add	r3, fp, #1
   190f8:	cmp	r9, r3
   190fc:	movhi	r0, #34	; 0x22
   19100:	strbhi	r0, [r8, r3]
   19104:	add	r3, fp, #2
   19108:	cmp	r9, r3
   1910c:	movhi	r0, #34	; 0x22
   19110:	strbhi	r0, [r8, r3]
   19114:	add	r3, fp, #3
   19118:	cmp	r9, r3
   1911c:	movhi	r0, #63	; 0x3f
   19120:	strbhi	r0, [r8, r3]
   19124:	add	fp, fp, #4
   19128:	ldr	r3, [sp, #32]
   1912c:	mov	r5, r3
   19130:	mov	r4, r1
   19134:	mov	r6, r2
   19138:	b	191a0 <__assert_fail@plt+0x794c>
   1913c:	mov	r3, #0
   19140:	str	r3, [sp, #44]	; 0x2c
   19144:	mov	r4, #8
   19148:	mov	r3, #98	; 0x62
   1914c:	b	1918c <__assert_fail@plt+0x7938>
   19150:	mov	r3, #0
   19154:	str	r3, [sp, #44]	; 0x2c
   19158:	mov	r4, #12
   1915c:	mov	r3, #102	; 0x66
   19160:	b	1918c <__assert_fail@plt+0x7938>
   19164:	mov	r3, #0
   19168:	str	r3, [sp, #44]	; 0x2c
   1916c:	mov	r4, #13
   19170:	mov	r3, #114	; 0x72
   19174:	ldr	r2, [sp, #32]
   19178:	cmp	sl, #2
   1917c:	movne	r2, #0
   19180:	andeq	r2, r2, #1
   19184:	cmp	r2, #0
   19188:	bne	195ac <__assert_fail@plt+0x7d58>
   1918c:	ldr	r2, [sp, #28]
   19190:	cmp	r2, #0
   19194:	bne	19b94 <__assert_fail@plt+0x8340>
   19198:	mov	r5, r2
   1919c:	mov	r3, r2
   191a0:	ldr	r2, [sp, #28]
   191a4:	eor	r2, r2, #1
   191a8:	cmp	sl, #2
   191ac:	orreq	r2, r2, #1
   191b0:	eor	r2, r2, #1
   191b4:	ldr	r1, [sp, #32]
   191b8:	orr	r2, r1, r2
   191bc:	tst	r2, #255	; 0xff
   191c0:	beq	191ec <__assert_fail@plt+0x7998>
   191c4:	ldr	r2, [sp, #160]	; 0xa0
   191c8:	cmp	r2, #0
   191cc:	beq	191ec <__assert_fail@plt+0x7998>
   191d0:	ubfx	r1, r4, #5, #8
   191d4:	and	r2, r4, #31
   191d8:	ldr	r0, [sp, #160]	; 0xa0
   191dc:	ldr	r1, [r0, r1, lsl #2]
   191e0:	lsr	r2, r1, r2
   191e4:	tst	r2, #1
   191e8:	bne	191f8 <__assert_fail@plt+0x79a4>
   191ec:	ldr	r2, [sp, #44]	; 0x2c
   191f0:	cmp	r2, #0
   191f4:	beq	1954c <__assert_fail@plt+0x7cf8>
   191f8:	ldr	r3, [sp, #32]
   191fc:	cmp	r3, #0
   19200:	bne	19d4c <__assert_fail@plt+0x84f8>
   19204:	ldr	r3, [sp, #36]	; 0x24
   19208:	eor	r3, r3, #1
   1920c:	cmp	sl, #2
   19210:	movne	r3, #0
   19214:	andeq	r3, r3, #1
   19218:	cmp	r3, #0
   1921c:	beq	19254 <__assert_fail@plt+0x7a00>
   19220:	cmp	r9, fp
   19224:	movhi	r2, #39	; 0x27
   19228:	strbhi	r2, [r8, fp]
   1922c:	add	r2, fp, #1
   19230:	cmp	r9, r2
   19234:	movhi	r1, #36	; 0x24
   19238:	strbhi	r1, [r8, r2]
   1923c:	add	r2, fp, #2
   19240:	cmp	r9, r2
   19244:	movhi	r1, #39	; 0x27
   19248:	strbhi	r1, [r8, r2]
   1924c:	add	fp, fp, #3
   19250:	str	r3, [sp, #36]	; 0x24
   19254:	cmp	r9, fp
   19258:	movhi	r3, #92	; 0x5c
   1925c:	strbhi	r3, [r8, fp]
   19260:	add	fp, fp, #1
   19264:	cmp	fp, r9
   19268:	strbcc	r4, [r8, fp]
   1926c:	add	fp, fp, #1
   19270:	cmp	r5, #0
   19274:	ldr	r3, [sp, #40]	; 0x28
   19278:	moveq	r3, r5
   1927c:	str	r3, [sp, #40]	; 0x28
   19280:	add	r6, r6, #1
   19284:	ldr	r3, [sp, #24]
   19288:	cmn	r3, #1
   1928c:	beq	19bbc <__assert_fail@plt+0x8368>
   19290:	ldr	r3, [sp, #24]
   19294:	subs	r5, r3, r6
   19298:	movne	r5, #1
   1929c:	cmp	r5, #0
   192a0:	beq	19bd0 <__assert_fail@plt+0x837c>
   192a4:	ldr	r3, [sp, #28]
   192a8:	cmp	sl, #2
   192ac:	moveq	r3, #0
   192b0:	andne	r3, r3, #1
   192b4:	str	r3, [sp, #56]	; 0x38
   192b8:	ldr	r2, [sp, #52]	; 0x34
   192bc:	adds	r7, r2, #0
   192c0:	movne	r7, #1
   192c4:	ands	r3, r3, r7
   192c8:	str	r3, [sp, #44]	; 0x2c
   192cc:	bne	18bec <__assert_fail@plt+0x7398>
   192d0:	ldr	r3, [sp, #48]	; 0x30
   192d4:	ldrb	r4, [r3, r6]
   192d8:	cmp	r4, #126	; 0x7e
   192dc:	ldrls	pc, [pc, r4, lsl #2]
   192e0:	b	19718 <__assert_fail@plt+0x7ec4>
   192e4:	andeq	r8, r1, r0, ror lr
   192e8:	andeq	r9, r1, r8, lsl r7
   192ec:	andeq	r9, r1, r8, lsl r7
   192f0:	andeq	r9, r1, r8, lsl r7
   192f4:	andeq	r9, r1, r8, lsl r7
   192f8:	andeq	r9, r1, r8, lsl r7
   192fc:	andeq	r9, r1, r8, lsl r7
   19300:			; <UNDEFINED> instruction: 0x000195b8
   19304:	andeq	r9, r1, r4, asr #2
   19308:	andeq	r9, r1, r8, ror #9
   1930c:	andeq	r9, r1, ip, lsl #11
   19310:	strdeq	r9, [r1], -ip
   19314:	andeq	r9, r1, r8, asr r1
   19318:	andeq	r9, r1, ip, ror #2
   1931c:	andeq	r9, r1, r8, lsl r7
   19320:	andeq	r9, r1, r8, lsl r7
   19324:	andeq	r9, r1, r8, lsl r7
   19328:	andeq	r9, r1, r8, lsl r7
   1932c:	andeq	r9, r1, r8, lsl r7
   19330:	andeq	r9, r1, r8, lsl r7
   19334:	andeq	r9, r1, r8, lsl r7
   19338:	andeq	r9, r1, r8, lsl r7
   1933c:	andeq	r9, r1, r8, lsl r7
   19340:	andeq	r9, r1, r8, lsl r7
   19344:	andeq	r9, r1, r8, lsl r7
   19348:	andeq	r9, r1, r8, lsl r7
   1934c:	andeq	r9, r1, r8, lsl r7
   19350:	andeq	r9, r1, r8, lsl r7
   19354:	andeq	r9, r1, r8, lsl r7
   19358:	andeq	r9, r1, r8, lsl r7
   1935c:	andeq	r9, r1, r8, lsl r7
   19360:	andeq	r9, r1, r8, lsl r7
   19364:	andeq	r9, r1, r4, lsr r6
   19368:	andeq	r9, r1, r0, lsr r6
   1936c:	andeq	r9, r1, r0, lsr r6
   19370:	strdeq	r9, [r1], -r0
   19374:	andeq	r9, r1, r0, lsr r6
   19378:	andeq	r9, r1, r8, lsr fp
   1937c:	andeq	r9, r1, r0, lsr r6
   19380:	andeq	r9, r1, r8, ror r6
   19384:	andeq	r9, r1, r0, lsr r6
   19388:	andeq	r9, r1, r0, lsr r6
   1938c:	andeq	r9, r1, r0, lsr r6
   19390:	andeq	r9, r1, r8, lsr fp
   19394:	andeq	r9, r1, r8, lsr fp
   19398:	andeq	r9, r1, r8, lsr fp
   1939c:	andeq	r9, r1, r8, lsr fp
   193a0:	andeq	r9, r1, r8, lsr fp
   193a4:	andeq	r9, r1, r8, lsr fp
   193a8:	andeq	r9, r1, r8, lsr fp
   193ac:	andeq	r9, r1, r8, lsr fp
   193b0:	andeq	r9, r1, r8, lsr fp
   193b4:	andeq	r9, r1, r8, lsr fp
   193b8:	andeq	r9, r1, r8, lsr fp
   193bc:	andeq	r9, r1, r8, lsr fp
   193c0:	andeq	r9, r1, r8, lsr fp
   193c4:	andeq	r9, r1, r8, lsr fp
   193c8:	andeq	r9, r1, r8, lsr fp
   193cc:	andeq	r9, r1, r8, lsr fp
   193d0:	andeq	r9, r1, r0, lsr r6
   193d4:	andeq	r9, r1, r0, lsr r6
   193d8:	andeq	r9, r1, r0, lsr r6
   193dc:	andeq	r9, r1, r0, lsr r6
   193e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   193e4:	andeq	r9, r1, r8, lsl r7
   193e8:	andeq	r9, r1, r8, lsr fp
   193ec:	andeq	r9, r1, r8, lsr fp
   193f0:	andeq	r9, r1, r8, lsr fp
   193f4:	andeq	r9, r1, r8, lsr fp
   193f8:	andeq	r9, r1, r8, lsr fp
   193fc:	andeq	r9, r1, r8, lsr fp
   19400:	andeq	r9, r1, r8, lsr fp
   19404:	andeq	r9, r1, r8, lsr fp
   19408:	andeq	r9, r1, r8, lsr fp
   1940c:	andeq	r9, r1, r8, lsr fp
   19410:	andeq	r9, r1, r8, lsr fp
   19414:	andeq	r9, r1, r8, lsr fp
   19418:	andeq	r9, r1, r8, lsr fp
   1941c:	andeq	r9, r1, r8, lsr fp
   19420:	andeq	r9, r1, r8, lsr fp
   19424:	andeq	r9, r1, r8, lsr fp
   19428:	andeq	r9, r1, r8, lsr fp
   1942c:	andeq	r9, r1, r8, lsr fp
   19430:	andeq	r9, r1, r8, lsr fp
   19434:	andeq	r9, r1, r8, lsr fp
   19438:	andeq	r9, r1, r8, lsr fp
   1943c:	andeq	r9, r1, r8, lsr fp
   19440:	andeq	r9, r1, r8, lsr fp
   19444:	andeq	r9, r1, r8, lsr fp
   19448:	andeq	r9, r1, r8, lsr fp
   1944c:	andeq	r9, r1, r8, lsr fp
   19450:	andeq	r9, r1, r0, lsr r6
   19454:	andeq	r9, r1, r0, lsl r5
   19458:	andeq	r9, r1, r8, lsr fp
   1945c:	andeq	r9, r1, r0, lsr r6
   19460:	andeq	r9, r1, r8, lsr fp
   19464:	andeq	r9, r1, r0, lsr r6
   19468:	andeq	r9, r1, r8, lsr fp
   1946c:	andeq	r9, r1, r8, lsr fp
   19470:	andeq	r9, r1, r8, lsr fp
   19474:	andeq	r9, r1, r8, lsr fp
   19478:	andeq	r9, r1, r8, lsr fp
   1947c:	andeq	r9, r1, r8, lsr fp
   19480:	andeq	r9, r1, r8, lsr fp
   19484:	andeq	r9, r1, r8, lsr fp
   19488:	andeq	r9, r1, r8, lsr fp
   1948c:	andeq	r9, r1, r8, lsr fp
   19490:	andeq	r9, r1, r8, lsr fp
   19494:	andeq	r9, r1, r8, lsr fp
   19498:	andeq	r9, r1, r8, lsr fp
   1949c:	andeq	r9, r1, r8, lsr fp
   194a0:	andeq	r9, r1, r8, lsr fp
   194a4:	andeq	r9, r1, r8, lsr fp
   194a8:	andeq	r9, r1, r8, lsr fp
   194ac:	andeq	r9, r1, r8, lsr fp
   194b0:	andeq	r9, r1, r8, lsr fp
   194b4:	andeq	r9, r1, r8, lsr fp
   194b8:	andeq	r9, r1, r8, lsr fp
   194bc:	andeq	r9, r1, r8, lsr fp
   194c0:	andeq	r9, r1, r8, lsr fp
   194c4:	andeq	r9, r1, r8, lsr fp
   194c8:	andeq	r9, r1, r8, lsr fp
   194cc:	andeq	r9, r1, r8, lsr fp
   194d0:	ldrdeq	r9, [r1], -r0
   194d4:	andeq	r9, r1, r0, lsr r6
   194d8:	ldrdeq	r9, [r1], -r0
   194dc:	strdeq	r9, [r1], -r0
   194e0:	mov	r3, #0
   194e4:	str	r3, [sp, #44]	; 0x2c
   194e8:	mov	r4, #9
   194ec:	mov	r3, #116	; 0x74
   194f0:	b	19174 <__assert_fail@plt+0x7920>
   194f4:	mov	r3, #0
   194f8:	str	r3, [sp, #44]	; 0x2c
   194fc:	mov	r4, #11
   19500:	mov	r3, #118	; 0x76
   19504:	b	1918c <__assert_fail@plt+0x7938>
   19508:	mov	r3, #0
   1950c:	str	r3, [sp, #44]	; 0x2c
   19510:	cmp	sl, #2
   19514:	beq	19538 <__assert_fail@plt+0x7ce4>
   19518:	ldr	r3, [sp, #28]
   1951c:	ldr	r2, [sp, #32]
   19520:	and	r3, r3, r2
   19524:	tst	r7, r3
   19528:	bne	19bac <__assert_fail@plt+0x8358>
   1952c:	mov	r4, #92	; 0x5c
   19530:	mov	r3, r4
   19534:	b	1918c <__assert_fail@plt+0x7938>
   19538:	ldr	r3, [sp, #32]
   1953c:	cmp	r3, #0
   19540:	bne	19d34 <__assert_fail@plt+0x84e0>
   19544:	mov	r5, r3
   19548:	mov	r4, #92	; 0x5c
   1954c:	eor	r3, r3, #1
   19550:	ldr	r2, [sp, #36]	; 0x24
   19554:	and	r3, r3, r2
   19558:	tst	r3, #255	; 0xff
   1955c:	beq	19264 <__assert_fail@plt+0x7a10>
   19560:	cmp	r9, fp
   19564:	movhi	r3, #39	; 0x27
   19568:	strbhi	r3, [r8, fp]
   1956c:	add	r3, fp, #1
   19570:	cmp	r9, r3
   19574:	movhi	r2, #39	; 0x27
   19578:	strbhi	r2, [r8, r3]
   1957c:	add	fp, fp, #2
   19580:	mov	r3, #0
   19584:	str	r3, [sp, #36]	; 0x24
   19588:	b	19264 <__assert_fail@plt+0x7a10>
   1958c:	mov	r3, #110	; 0x6e
   19590:	b	19174 <__assert_fail@plt+0x7920>
   19594:	mov	r3, #110	; 0x6e
   19598:	b	19174 <__assert_fail@plt+0x7920>
   1959c:	mov	r3, #0
   195a0:	str	r3, [sp, #44]	; 0x2c
   195a4:	mov	r3, #110	; 0x6e
   195a8:	b	19174 <__assert_fail@plt+0x7920>
   195ac:	mov	r8, r9
   195b0:	mov	r7, #2
   195b4:	b	19d54 <__assert_fail@plt+0x8500>
   195b8:	mov	r3, #97	; 0x61
   195bc:	b	1918c <__assert_fail@plt+0x7938>
   195c0:	mov	r3, #97	; 0x61
   195c4:	b	1918c <__assert_fail@plt+0x7938>
   195c8:	mov	r3, #0
   195cc:	str	r3, [sp, #44]	; 0x2c
   195d0:	ldr	r3, [sp, #24]
   195d4:	cmn	r3, #1
   195d8:	beq	19604 <__assert_fail@plt+0x7db0>
   195dc:	ldr	r3, [sp, #24]
   195e0:	subs	r3, r3, #1
   195e4:	movne	r3, #1
   195e8:	cmp	r3, #0
   195ec:	bne	19b6c <__assert_fail@plt+0x8318>
   195f0:	cmp	r6, #0
   195f4:	beq	19634 <__assert_fail@plt+0x7de0>
   195f8:	mov	r5, #0
   195fc:	mov	r3, r5
   19600:	b	191a0 <__assert_fail@plt+0x794c>
   19604:	ldr	r3, [sp, #48]	; 0x30
   19608:	ldrb	r3, [r3, #1]
   1960c:	adds	r3, r3, #0
   19610:	movne	r3, #1
   19614:	b	195e8 <__assert_fail@plt+0x7d94>
   19618:	mov	r3, #0
   1961c:	str	r3, [sp, #44]	; 0x2c
   19620:	b	195f0 <__assert_fail@plt+0x7d9c>
   19624:	mov	r3, #0
   19628:	str	r3, [sp, #44]	; 0x2c
   1962c:	b	19634 <__assert_fail@plt+0x7de0>
   19630:	ldr	r5, [sp, #44]	; 0x2c
   19634:	ldr	r3, [sp, #32]
   19638:	cmp	sl, #2
   1963c:	movne	r3, #0
   19640:	andeq	r3, r3, #1
   19644:	cmp	r3, #0
   19648:	beq	191a0 <__assert_fail@plt+0x794c>
   1964c:	mov	r8, r9
   19650:	mov	r7, #2
   19654:	b	19d54 <__assert_fail@plt+0x8500>
   19658:	ldr	r5, [sp, #32]
   1965c:	b	19634 <__assert_fail@plt+0x7de0>
   19660:	mov	r3, #0
   19664:	str	r3, [sp, #44]	; 0x2c
   19668:	mov	r5, r3
   1966c:	b	19634 <__assert_fail@plt+0x7de0>
   19670:	mov	r3, #0
   19674:	str	r3, [sp, #44]	; 0x2c
   19678:	cmp	sl, #2
   1967c:	strne	r5, [sp, #68]	; 0x44
   19680:	movne	r3, #0
   19684:	movne	r4, #39	; 0x27
   19688:	bne	191a0 <__assert_fail@plt+0x794c>
   1968c:	ldr	r3, [sp, #32]
   19690:	cmp	r3, #0
   19694:	bne	19d40 <__assert_fail@plt+0x84ec>
   19698:	ldr	r3, [sp, #72]	; 0x48
   1969c:	clz	r3, r3
   196a0:	lsr	r3, r3, #5
   196a4:	cmp	r9, #0
   196a8:	moveq	r3, #0
   196ac:	cmp	r3, #0
   196b0:	movne	r3, #0
   196b4:	bne	196dc <__assert_fail@plt+0x7e88>
   196b8:	cmp	r9, fp
   196bc:	movhi	r3, #39	; 0x27
   196c0:	strbhi	r3, [r8, fp]
   196c4:	add	r3, fp, #1
   196c8:	cmp	r9, r3
   196cc:	movhi	r2, #92	; 0x5c
   196d0:	strbhi	r2, [r8, r3]
   196d4:	mov	r3, r9
   196d8:	ldr	r9, [sp, #72]	; 0x48
   196dc:	add	r2, fp, #2
   196e0:	cmp	r2, r3
   196e4:	movcc	r1, #39	; 0x27
   196e8:	strbcc	r1, [r8, r2]
   196ec:	add	fp, fp, #3
   196f0:	str	r5, [sp, #68]	; 0x44
   196f4:	ldr	r2, [sp, #32]
   196f8:	str	r2, [sp, #36]	; 0x24
   196fc:	str	r9, [sp, #72]	; 0x48
   19700:	mov	r9, r3
   19704:	mov	r4, #39	; 0x27
   19708:	mov	r3, #0
   1970c:	b	191ec <__assert_fail@plt+0x7998>
   19710:	mov	r3, #0
   19714:	str	r3, [sp, #44]	; 0x2c
   19718:	ldr	r7, [sp, #76]	; 0x4c
   1971c:	cmp	r7, #1
   19720:	bne	19758 <__assert_fail@plt+0x7f04>
   19724:	bl	11644 <__ctype_b_loc@plt>
   19728:	ldr	r2, [r0]
   1972c:	lsl	r3, r4, #1
   19730:	ldrh	r5, [r2, r3]
   19734:	ubfx	r5, r5, #14, #1
   19738:	mov	ip, r7
   1973c:	eor	r3, r5, #1
   19740:	ldr	r2, [sp, #28]
   19744:	and	r3, r3, r2
   19748:	ands	r3, r3, #255	; 0xff
   1974c:	beq	191a0 <__assert_fail@plt+0x794c>
   19750:	mov	r5, #0
   19754:	b	199b4 <__assert_fail@plt+0x8160>
   19758:	mov	r2, #0
   1975c:	mov	r3, #0
   19760:	strd	r2, [sp, #104]	; 0x68
   19764:	ldr	r3, [sp, #24]
   19768:	cmn	r3, #1
   1976c:	beq	19790 <__assert_fail@plt+0x7f3c>
   19770:	mov	r3, #0
   19774:	str	r4, [sp, #88]	; 0x58
   19778:	str	fp, [sp, #92]	; 0x5c
   1977c:	str	r8, [sp, #56]	; 0x38
   19780:	mov	r8, r3
   19784:	str	r9, [sp, #84]	; 0x54
   19788:	ldr	r9, [sp, #48]	; 0x30
   1978c:	b	198dc <__assert_fail@plt+0x8088>
   19790:	ldr	r0, [sp, #48]	; 0x30
   19794:	bl	11674 <strlen@plt>
   19798:	str	r0, [sp, #24]
   1979c:	b	19770 <__assert_fail@plt+0x7f1c>
   197a0:	mov	r1, fp
   197a4:	ldr	r4, [sp, #88]	; 0x58
   197a8:	mov	r2, r8
   197ac:	mov	ip, r8
   197b0:	ldr	fp, [sp, #92]	; 0x5c
   197b4:	ldr	r8, [sp, #56]	; 0x38
   197b8:	ldr	r9, [sp, #84]	; 0x54
   197bc:	ldr	r0, [sp, #24]
   197c0:	cmp	r7, r0
   197c4:	bcs	1997c <__assert_fail@plt+0x8128>
   197c8:	ldrb	r3, [r1]
   197cc:	cmp	r3, #0
   197d0:	beq	19984 <__assert_fail@plt+0x8130>
   197d4:	mov	r3, r1
   197d8:	add	r2, r2, #1
   197dc:	add	r1, r6, r2
   197e0:	cmp	r0, r1
   197e4:	bls	1998c <__assert_fail@plt+0x8138>
   197e8:	ldrb	r1, [r3, #1]!
   197ec:	cmp	r1, #0
   197f0:	bne	197d8 <__assert_fail@plt+0x7f84>
   197f4:	mov	ip, r2
   197f8:	mov	r5, #0
   197fc:	b	199ac <__assert_fail@plt+0x8158>
   19800:	ldr	r3, [sp, #56]	; 0x38
   19804:	str	r3, [sp, #64]	; 0x40
   19808:	ldr	r8, [sp, #84]	; 0x54
   1980c:	mov	r7, #2
   19810:	b	19d54 <__assert_fail@plt+0x8500>
   19814:	cmp	r2, r7
   19818:	beq	198b8 <__assert_fail@plt+0x8064>
   1981c:	ldrb	r3, [r2], #1
   19820:	sub	r3, r3, #91	; 0x5b
   19824:	cmp	r3, #33	; 0x21
   19828:	ldrls	pc, [pc, r3, lsl #2]
   1982c:	b	19814 <__assert_fail@plt+0x7fc0>
   19830:	andeq	r9, r1, r0, lsl #16
   19834:	andeq	r9, r1, r0, lsl #16
   19838:	andeq	r9, r1, r4, lsl r8
   1983c:	andeq	r9, r1, r0, lsl #16
   19840:	andeq	r9, r1, r4, lsl r8
   19844:	andeq	r9, r1, r0, lsl #16
   19848:	andeq	r9, r1, r4, lsl r8
   1984c:	andeq	r9, r1, r4, lsl r8
   19850:	andeq	r9, r1, r4, lsl r8
   19854:	andeq	r9, r1, r4, lsl r8
   19858:	andeq	r9, r1, r4, lsl r8
   1985c:	andeq	r9, r1, r4, lsl r8
   19860:	andeq	r9, r1, r4, lsl r8
   19864:	andeq	r9, r1, r4, lsl r8
   19868:	andeq	r9, r1, r4, lsl r8
   1986c:	andeq	r9, r1, r4, lsl r8
   19870:	andeq	r9, r1, r4, lsl r8
   19874:	andeq	r9, r1, r4, lsl r8
   19878:	andeq	r9, r1, r4, lsl r8
   1987c:	andeq	r9, r1, r4, lsl r8
   19880:	andeq	r9, r1, r4, lsl r8
   19884:	andeq	r9, r1, r4, lsl r8
   19888:	andeq	r9, r1, r4, lsl r8
   1988c:	andeq	r9, r1, r4, lsl r8
   19890:	andeq	r9, r1, r4, lsl r8
   19894:	andeq	r9, r1, r4, lsl r8
   19898:	andeq	r9, r1, r4, lsl r8
   1989c:	andeq	r9, r1, r4, lsl r8
   198a0:	andeq	r9, r1, r4, lsl r8
   198a4:	andeq	r9, r1, r4, lsl r8
   198a8:	andeq	r9, r1, r4, lsl r8
   198ac:	andeq	r9, r1, r4, lsl r8
   198b0:	andeq	r9, r1, r4, lsl r8
   198b4:	andeq	r9, r1, r0, lsl #16
   198b8:	ldr	r0, [sp, #100]	; 0x64
   198bc:	bl	11530 <iswprint@plt>
   198c0:	cmp	r0, #0
   198c4:	moveq	r5, #0
   198c8:	add	r8, r8, r4
   198cc:	add	r0, sp, #104	; 0x68
   198d0:	bl	114c4 <mbsinit@plt>
   198d4:	cmp	r0, #0
   198d8:	bne	19948 <__assert_fail@plt+0x80f4>
   198dc:	add	r7, r6, r8
   198e0:	add	fp, r9, r7
   198e4:	add	r3, sp, #104	; 0x68
   198e8:	ldr	r2, [sp, #24]
   198ec:	sub	r2, r2, r7
   198f0:	mov	r1, fp
   198f4:	add	r0, sp, #100	; 0x64
   198f8:	bl	1cd6c <__assert_fail@plt+0xb518>
   198fc:	subs	r4, r0, #0
   19900:	beq	19998 <__assert_fail@plt+0x8144>
   19904:	cmn	r4, #1
   19908:	beq	19960 <__assert_fail@plt+0x810c>
   1990c:	cmn	r4, #2
   19910:	beq	197a0 <__assert_fail@plt+0x7f4c>
   19914:	ldr	r3, [sp, #32]
   19918:	cmp	sl, #2
   1991c:	movne	r3, #0
   19920:	andeq	r3, r3, #1
   19924:	cmp	r3, #0
   19928:	beq	198b8 <__assert_fail@plt+0x8064>
   1992c:	cmp	r4, #1
   19930:	bls	198b8 <__assert_fail@plt+0x8064>
   19934:	add	r2, r7, #1
   19938:	add	r2, r9, r2
   1993c:	add	r3, r9, r4
   19940:	add	r7, r3, r7
   19944:	b	1981c <__assert_fail@plt+0x7fc8>
   19948:	ldr	r4, [sp, #88]	; 0x58
   1994c:	mov	ip, r8
   19950:	ldr	fp, [sp, #92]	; 0x5c
   19954:	ldr	r8, [sp, #56]	; 0x38
   19958:	ldr	r9, [sp, #84]	; 0x54
   1995c:	b	199ac <__assert_fail@plt+0x8158>
   19960:	ldr	r4, [sp, #88]	; 0x58
   19964:	mov	ip, r8
   19968:	ldr	fp, [sp, #92]	; 0x5c
   1996c:	ldr	r8, [sp, #56]	; 0x38
   19970:	ldr	r9, [sp, #84]	; 0x54
   19974:	mov	r5, #0
   19978:	b	199ac <__assert_fail@plt+0x8158>
   1997c:	mov	r5, #0
   19980:	b	199ac <__assert_fail@plt+0x8158>
   19984:	mov	r5, #0
   19988:	b	199ac <__assert_fail@plt+0x8158>
   1998c:	mov	ip, r2
   19990:	mov	r5, #0
   19994:	b	199ac <__assert_fail@plt+0x8158>
   19998:	ldr	r4, [sp, #88]	; 0x58
   1999c:	mov	ip, r8
   199a0:	ldr	fp, [sp, #92]	; 0x5c
   199a4:	ldr	r8, [sp, #56]	; 0x38
   199a8:	ldr	r9, [sp, #84]	; 0x54
   199ac:	cmp	ip, #1
   199b0:	bls	1973c <__assert_fail@plt+0x7ee8>
   199b4:	add	lr, r6, ip
   199b8:	ldr	r3, [sp, #48]	; 0x30
   199bc:	add	r1, r3, r6
   199c0:	mov	r3, #0
   199c4:	eor	r0, r5, #1
   199c8:	ldr	r2, [sp, #28]
   199cc:	and	r0, r0, r2
   199d0:	uxtb	r0, r0
   199d4:	str	r0, [sp, #56]	; 0x38
   199d8:	mov	r7, #92	; 0x5c
   199dc:	ldr	ip, [sp, #36]	; 0x24
   199e0:	str	r5, [sp, #84]	; 0x54
   199e4:	ldr	r2, [sp, #44]	; 0x2c
   199e8:	b	19a58 <__assert_fail@plt+0x8204>
   199ec:	cmp	r2, #0
   199f0:	beq	19a00 <__assert_fail@plt+0x81ac>
   199f4:	cmp	r9, fp
   199f8:	strbhi	r7, [r8, fp]
   199fc:	add	fp, fp, #1
   19a00:	add	r5, r6, #1
   19a04:	cmp	r5, lr
   19a08:	bcs	19b14 <__assert_fail@plt+0x82c0>
   19a0c:	eor	r2, r3, #1
   19a10:	and	r2, r2, ip
   19a14:	ands	r2, r2, #255	; 0xff
   19a18:	beq	19b30 <__assert_fail@plt+0x82dc>
   19a1c:	cmp	r9, fp
   19a20:	movhi	r2, #39	; 0x27
   19a24:	strbhi	r2, [r8, fp]
   19a28:	add	r2, fp, #1
   19a2c:	cmp	r9, r2
   19a30:	movhi	ip, #39	; 0x27
   19a34:	strbhi	ip, [r8, r2]
   19a38:	add	fp, fp, #2
   19a3c:	ldr	ip, [sp, #56]	; 0x38
   19a40:	mov	r2, ip
   19a44:	mov	r6, r5
   19a48:	cmp	r9, fp
   19a4c:	strbhi	r4, [r8, fp]
   19a50:	add	fp, fp, #1
   19a54:	ldrb	r4, [r1, #1]!
   19a58:	cmp	r0, #0
   19a5c:	beq	199ec <__assert_fail@plt+0x8198>
   19a60:	ldr	r3, [sp, #32]
   19a64:	cmp	r3, #0
   19a68:	bne	19cfc <__assert_fail@plt+0x84a8>
   19a6c:	eor	r3, ip, #1
   19a70:	cmp	sl, #2
   19a74:	movne	r3, #0
   19a78:	andeq	r3, r3, #1
   19a7c:	cmp	r3, #0
   19a80:	beq	19ab8 <__assert_fail@plt+0x8264>
   19a84:	cmp	r9, fp
   19a88:	movhi	ip, #39	; 0x27
   19a8c:	strbhi	ip, [r8, fp]
   19a90:	add	ip, fp, #1
   19a94:	cmp	r9, ip
   19a98:	movhi	r5, #36	; 0x24
   19a9c:	strbhi	r5, [r8, ip]
   19aa0:	add	ip, fp, #2
   19aa4:	cmp	r9, ip
   19aa8:	movhi	r5, #39	; 0x27
   19aac:	strbhi	r5, [r8, ip]
   19ab0:	add	fp, fp, #3
   19ab4:	mov	ip, r3
   19ab8:	cmp	r9, fp
   19abc:	strbhi	r7, [r8, fp]
   19ac0:	add	r3, fp, #1
   19ac4:	cmp	r9, r3
   19ac8:	bls	19ad8 <__assert_fail@plt+0x8284>
   19acc:	lsr	r5, r4, #6
   19ad0:	add	r5, r5, #48	; 0x30
   19ad4:	strb	r5, [r8, r3]
   19ad8:	add	r3, fp, #2
   19adc:	cmp	r9, r3
   19ae0:	bls	19af0 <__assert_fail@plt+0x829c>
   19ae4:	ubfx	r5, r4, #3, #3
   19ae8:	add	r5, r5, #48	; 0x30
   19aec:	strb	r5, [r8, r3]
   19af0:	add	fp, fp, #3
   19af4:	and	r4, r4, #7
   19af8:	add	r4, r4, #48	; 0x30
   19afc:	add	r5, r6, #1
   19b00:	cmp	r5, lr
   19b04:	bcs	19b20 <__assert_fail@plt+0x82cc>
   19b08:	ldr	r3, [sp, #56]	; 0x38
   19b0c:	mov	r6, r5
   19b10:	b	19a48 <__assert_fail@plt+0x81f4>
   19b14:	str	ip, [sp, #36]	; 0x24
   19b18:	ldr	r5, [sp, #84]	; 0x54
   19b1c:	b	1954c <__assert_fail@plt+0x7cf8>
   19b20:	str	ip, [sp, #36]	; 0x24
   19b24:	ldr	r5, [sp, #84]	; 0x54
   19b28:	mov	r3, r0
   19b2c:	b	1954c <__assert_fail@plt+0x7cf8>
   19b30:	mov	r6, r5
   19b34:	b	19a48 <__assert_fail@plt+0x81f4>
   19b38:	ldr	r3, [sp, #44]	; 0x2c
   19b3c:	b	191a0 <__assert_fail@plt+0x794c>
   19b40:	mov	r5, #0
   19b44:	mov	r3, r5
   19b48:	mov	r4, #63	; 0x3f
   19b4c:	b	191a0 <__assert_fail@plt+0x794c>
   19b50:	mov	r5, #0
   19b54:	mov	r3, r5
   19b58:	mov	r4, #63	; 0x3f
   19b5c:	b	191a0 <__assert_fail@plt+0x794c>
   19b60:	mov	r5, #0
   19b64:	mov	r3, r5
   19b68:	b	191a0 <__assert_fail@plt+0x794c>
   19b6c:	mov	r5, #0
   19b70:	mov	r3, r5
   19b74:	b	191a0 <__assert_fail@plt+0x794c>
   19b78:	ldr	r5, [sp, #44]	; 0x2c
   19b7c:	ldr	r3, [sp, #32]
   19b80:	b	191a0 <__assert_fail@plt+0x794c>
   19b84:	ldr	r5, [sp, #44]	; 0x2c
   19b88:	mov	r3, #0
   19b8c:	str	r3, [sp, #44]	; 0x2c
   19b90:	b	191a0 <__assert_fail@plt+0x794c>
   19b94:	mov	r4, r3
   19b98:	mov	r5, #0
   19b9c:	b	191f8 <__assert_fail@plt+0x79a4>
   19ba0:	mov	r5, #0
   19ba4:	mov	r4, #97	; 0x61
   19ba8:	b	191f8 <__assert_fail@plt+0x79a4>
   19bac:	mov	r5, #0
   19bb0:	mov	r3, r5
   19bb4:	mov	r4, #92	; 0x5c
   19bb8:	b	1954c <__assert_fail@plt+0x7cf8>
   19bbc:	ldr	r3, [sp, #48]	; 0x30
   19bc0:	ldrb	r5, [r3, r6]
   19bc4:	adds	r5, r5, #0
   19bc8:	movne	r5, #1
   19bcc:	b	1929c <__assert_fail@plt+0x7a48>
   19bd0:	cmp	sl, #2
   19bd4:	movne	r3, #0
   19bd8:	moveq	r3, #1
   19bdc:	ldr	r1, [sp, #32]
   19be0:	cmp	fp, #0
   19be4:	andeq	r2, r3, r1
   19be8:	movne	r2, #0
   19bec:	cmp	r2, #0
   19bf0:	bne	19d10 <__assert_fail@plt+0x84bc>
   19bf4:	eor	r2, r1, #1
   19bf8:	uxtb	r2, r2
   19bfc:	and	r3, r3, r2
   19c00:	ldr	r1, [sp, #68]	; 0x44
   19c04:	ands	r3, r1, r3
   19c08:	beq	19c9c <__assert_fail@plt+0x8448>
   19c0c:	ldr	r2, [sp, #40]	; 0x28
   19c10:	cmp	r2, #0
   19c14:	bne	19c4c <__assert_fail@plt+0x83f8>
   19c18:	ldr	r2, [sp, #72]	; 0x48
   19c1c:	adds	r2, r2, #0
   19c20:	movne	r2, #1
   19c24:	cmp	r9, #0
   19c28:	movne	r2, #0
   19c2c:	str	r2, [sp, #68]	; 0x44
   19c30:	mov	sl, #2
   19c34:	ldr	r1, [sp, #40]	; 0x28
   19c38:	str	r1, [sp, #32]
   19c3c:	cmp	r2, #0
   19c40:	beq	19c90 <__assert_fail@plt+0x843c>
   19c44:	ldr	r9, [sp, #72]	; 0x48
   19c48:	b	189a4 <__assert_fail@plt+0x7150>
   19c4c:	ldr	r3, [sp, #168]	; 0xa8
   19c50:	str	r3, [sp, #16]
   19c54:	ldr	r3, [sp, #164]	; 0xa4
   19c58:	str	r3, [sp, #12]
   19c5c:	ldr	r3, [sp, #160]	; 0xa0
   19c60:	str	r3, [sp, #8]
   19c64:	ldr	r3, [sp, #156]	; 0x9c
   19c68:	str	r3, [sp, #4]
   19c6c:	mov	r3, #5
   19c70:	str	r3, [sp]
   19c74:	ldr	r3, [sp, #24]
   19c78:	ldr	r2, [sp, #48]	; 0x30
   19c7c:	ldr	r1, [sp, #72]	; 0x48
   19c80:	ldr	r0, [sp, #64]	; 0x40
   19c84:	bl	1892c <__assert_fail@plt+0x70d8>
   19c88:	mov	fp, r0
   19c8c:	b	19dac <__assert_fail@plt+0x8558>
   19c90:	mov	r8, r9
   19c94:	mov	r2, r3
   19c98:	b	19ca0 <__assert_fail@plt+0x844c>
   19c9c:	mov	r8, r9
   19ca0:	ldr	r3, [sp, #60]	; 0x3c
   19ca4:	cmp	r3, #0
   19ca8:	moveq	r2, #0
   19cac:	andne	r2, r2, #1
   19cb0:	cmp	r2, #0
   19cb4:	beq	19ce4 <__assert_fail@plt+0x8490>
   19cb8:	mov	r2, r3
   19cbc:	ldrb	r3, [r3]
   19cc0:	cmp	r3, #0
   19cc4:	beq	19ce4 <__assert_fail@plt+0x8490>
   19cc8:	ldr	r1, [sp, #64]	; 0x40
   19ccc:	cmp	r8, fp
   19cd0:	strbhi	r3, [r1, fp]
   19cd4:	add	fp, fp, #1
   19cd8:	ldrb	r3, [r2, #1]!
   19cdc:	cmp	r3, #0
   19ce0:	bne	19ccc <__assert_fail@plt+0x8478>
   19ce4:	cmp	r8, fp
   19ce8:	bls	19dac <__assert_fail@plt+0x8558>
   19cec:	mov	r3, #0
   19cf0:	ldr	r2, [sp, #64]	; 0x40
   19cf4:	strb	r3, [r2, fp]
   19cf8:	b	19dac <__assert_fail@plt+0x8558>
   19cfc:	mov	r8, r9
   19d00:	mov	r7, sl
   19d04:	ldr	r3, [sp, #32]
   19d08:	str	r3, [sp, #28]
   19d0c:	b	19d54 <__assert_fail@plt+0x8500>
   19d10:	mov	r8, r9
   19d14:	mov	r7, #2
   19d18:	b	19d54 <__assert_fail@plt+0x8500>
   19d1c:	mov	r8, r9
   19d20:	mov	r7, sl
   19d24:	b	19d54 <__assert_fail@plt+0x8500>
   19d28:	mov	r8, r9
   19d2c:	mov	r7, sl
   19d30:	b	19d54 <__assert_fail@plt+0x8500>
   19d34:	mov	r8, r9
   19d38:	mov	r7, sl
   19d3c:	b	19d54 <__assert_fail@plt+0x8500>
   19d40:	mov	r8, r9
   19d44:	mov	r7, sl
   19d48:	b	19d54 <__assert_fail@plt+0x8500>
   19d4c:	mov	r8, r9
   19d50:	mov	r7, sl
   19d54:	ldr	r3, [sp, #28]
   19d58:	cmp	r7, #2
   19d5c:	movne	r3, #0
   19d60:	andeq	r3, r3, #1
   19d64:	cmp	r3, #0
   19d68:	movne	r7, #4
   19d6c:	ldr	r3, [sp, #168]	; 0xa8
   19d70:	str	r3, [sp, #16]
   19d74:	ldr	r3, [sp, #164]	; 0xa4
   19d78:	str	r3, [sp, #12]
   19d7c:	mov	r3, #0
   19d80:	str	r3, [sp, #8]
   19d84:	ldr	r3, [sp, #156]	; 0x9c
   19d88:	bic	r3, r3, #2
   19d8c:	str	r3, [sp, #4]
   19d90:	str	r7, [sp]
   19d94:	ldr	r3, [sp, #24]
   19d98:	ldr	r2, [sp, #48]	; 0x30
   19d9c:	mov	r1, r8
   19da0:	ldr	r0, [sp, #64]	; 0x40
   19da4:	bl	1892c <__assert_fail@plt+0x70d8>
   19da8:	mov	fp, r0
   19dac:	mov	r0, fp
   19db0:	add	sp, sp, #116	; 0x74
   19db4:	ldrd	r4, [sp]
   19db8:	ldrd	r6, [sp, #8]
   19dbc:	ldrd	r8, [sp, #16]
   19dc0:	ldrd	sl, [sp, #24]
   19dc4:	add	sp, sp, #32
   19dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   19dcc:	mov	r8, r9
   19dd0:	mov	r7, sl
   19dd4:	b	19d6c <__assert_fail@plt+0x8518>
   19dd8:	add	fp, fp, #4
   19ddc:	str	r3, [sp, #36]	; 0x24
   19de0:	mov	r5, #0
   19de4:	mov	r4, #48	; 0x30
   19de8:	b	191a0 <__assert_fail@plt+0x794c>
   19dec:	mov	r3, #1
   19df0:	str	r3, [sp, #32]
   19df4:	str	r3, [sp, #28]
   19df8:	str	r3, [sp, #52]	; 0x34
   19dfc:	movw	r3, #62412	; 0xf3cc
   19e00:	movt	r3, #1
   19e04:	str	r3, [sp, #60]	; 0x3c
   19e08:	mov	fp, #0
   19e0c:	mov	sl, #5
   19e10:	b	18a04 <__assert_fail@plt+0x71b0>
   19e14:	ldr	r3, [sp, #48]	; 0x30
   19e18:	ldrb	r4, [r3, r6]
   19e1c:	cmp	r4, #126	; 0x7e
   19e20:	ldrls	pc, [pc, r4, lsl #2]
   19e24:	b	19710 <__assert_fail@plt+0x7ebc>
   19e28:	muleq	r1, r8, lr
   19e2c:	andeq	r9, r1, r0, lsl r7
   19e30:	andeq	r9, r1, r0, lsl r7
   19e34:	andeq	r9, r1, r0, lsl r7
   19e38:	andeq	r9, r1, r0, lsl r7
   19e3c:	andeq	r9, r1, r0, lsl r7
   19e40:	andeq	r9, r1, r0, lsl r7
   19e44:	andeq	r9, r1, r0, lsr #23
   19e48:	andeq	r9, r1, ip, lsr r1
   19e4c:	andeq	r9, r1, r0, ror #9
   19e50:	muleq	r1, ip, r5
   19e54:	strdeq	r9, [r1], -r4
   19e58:	andeq	r9, r1, r0, asr r1
   19e5c:	andeq	r9, r1, r4, ror #2
   19e60:	andeq	r9, r1, r0, lsl r7
   19e64:	andeq	r9, r1, r0, lsl r7
   19e68:	andeq	r9, r1, r0, lsl r7
   19e6c:	andeq	r9, r1, r0, lsl r7
   19e70:	andeq	r9, r1, r0, lsl r7
   19e74:	andeq	r9, r1, r0, lsl r7
   19e78:	andeq	r9, r1, r0, lsl r7
   19e7c:	andeq	r9, r1, r0, lsl r7
   19e80:	andeq	r9, r1, r0, lsl r7
   19e84:	andeq	r9, r1, r0, lsl r7
   19e88:	andeq	r9, r1, r0, lsl r7
   19e8c:	andeq	r9, r1, r0, lsl r7
   19e90:	andeq	r9, r1, r0, lsl r7
   19e94:	andeq	r9, r1, r0, lsl r7
   19e98:	andeq	r9, r1, r0, lsl r7
   19e9c:	andeq	r9, r1, r0, lsl r7
   19ea0:	andeq	r9, r1, r0, lsl r7
   19ea4:	andeq	r9, r1, r0, lsl r7
   19ea8:	andeq	r9, r1, r4, lsr #12
   19eac:	andeq	r9, r1, r0, ror #12
   19eb0:	andeq	r9, r1, r0, ror #12
   19eb4:	andeq	r9, r1, r8, lsl r6
   19eb8:	andeq	r9, r1, r0, ror #12
   19ebc:	andeq	r9, r1, r4, lsl #23
   19ec0:	andeq	r9, r1, r0, ror #12
   19ec4:	andeq	r9, r1, r0, ror r6
   19ec8:	andeq	r9, r1, r0, ror #12
   19ecc:	andeq	r9, r1, r0, ror #12
   19ed0:	andeq	r9, r1, r0, ror #12
   19ed4:	andeq	r9, r1, r4, lsl #23
   19ed8:	andeq	r9, r1, r4, lsl #23
   19edc:	andeq	r9, r1, r4, lsl #23
   19ee0:	andeq	r9, r1, r4, lsl #23
   19ee4:	andeq	r9, r1, r4, lsl #23
   19ee8:	andeq	r9, r1, r4, lsl #23
   19eec:	andeq	r9, r1, r4, lsl #23
   19ef0:	andeq	r9, r1, r4, lsl #23
   19ef4:	andeq	r9, r1, r4, lsl #23
   19ef8:	andeq	r9, r1, r4, lsl #23
   19efc:	andeq	r9, r1, r4, lsl #23
   19f00:	andeq	r9, r1, r4, lsl #23
   19f04:	andeq	r9, r1, r4, lsl #23
   19f08:	andeq	r9, r1, r4, lsl #23
   19f0c:	andeq	r9, r1, r4, lsl #23
   19f10:	andeq	r9, r1, r4, lsl #23
   19f14:	andeq	r9, r1, r0, ror #12
   19f18:	andeq	r9, r1, r0, ror #12
   19f1c:	andeq	r9, r1, r0, ror #12
   19f20:	andeq	r9, r1, r0, ror #12
   19f24:	ldrdeq	r8, [r1], -r0
   19f28:	andeq	r9, r1, r0, lsl r7
   19f2c:	andeq	r9, r1, r4, lsl #23
   19f30:	andeq	r9, r1, r4, lsl #23
   19f34:	andeq	r9, r1, r4, lsl #23
   19f38:	andeq	r9, r1, r4, lsl #23
   19f3c:	andeq	r9, r1, r4, lsl #23
   19f40:	andeq	r9, r1, r4, lsl #23
   19f44:	andeq	r9, r1, r4, lsl #23
   19f48:	andeq	r9, r1, r4, lsl #23
   19f4c:	andeq	r9, r1, r4, lsl #23
   19f50:	andeq	r9, r1, r4, lsl #23
   19f54:	andeq	r9, r1, r4, lsl #23
   19f58:	andeq	r9, r1, r4, lsl #23
   19f5c:	andeq	r9, r1, r4, lsl #23
   19f60:	andeq	r9, r1, r4, lsl #23
   19f64:	andeq	r9, r1, r4, lsl #23
   19f68:	andeq	r9, r1, r4, lsl #23
   19f6c:	andeq	r9, r1, r4, lsl #23
   19f70:	andeq	r9, r1, r4, lsl #23
   19f74:	andeq	r9, r1, r4, lsl #23
   19f78:	andeq	r9, r1, r4, lsl #23
   19f7c:	andeq	r9, r1, r4, lsl #23
   19f80:	andeq	r9, r1, r4, lsl #23
   19f84:	andeq	r9, r1, r4, lsl #23
   19f88:	andeq	r9, r1, r4, lsl #23
   19f8c:	andeq	r9, r1, r4, lsl #23
   19f90:	andeq	r9, r1, r4, lsl #23
   19f94:	andeq	r9, r1, r0, ror #12
   19f98:	andeq	r9, r1, r8, lsl #10
   19f9c:	andeq	r9, r1, r4, lsl #23
   19fa0:	andeq	r9, r1, r0, ror #12
   19fa4:	andeq	r9, r1, r4, lsl #23
   19fa8:	andeq	r9, r1, r0, ror #12
   19fac:	andeq	r9, r1, r4, lsl #23
   19fb0:	andeq	r9, r1, r4, lsl #23
   19fb4:	andeq	r9, r1, r4, lsl #23
   19fb8:	andeq	r9, r1, r4, lsl #23
   19fbc:	andeq	r9, r1, r4, lsl #23
   19fc0:	andeq	r9, r1, r4, lsl #23
   19fc4:	andeq	r9, r1, r4, lsl #23
   19fc8:	andeq	r9, r1, r4, lsl #23
   19fcc:	andeq	r9, r1, r4, lsl #23
   19fd0:	andeq	r9, r1, r4, lsl #23
   19fd4:	andeq	r9, r1, r4, lsl #23
   19fd8:	andeq	r9, r1, r4, lsl #23
   19fdc:	andeq	r9, r1, r4, lsl #23
   19fe0:	andeq	r9, r1, r4, lsl #23
   19fe4:	andeq	r9, r1, r4, lsl #23
   19fe8:	andeq	r9, r1, r4, lsl #23
   19fec:	andeq	r9, r1, r4, lsl #23
   19ff0:	andeq	r9, r1, r4, lsl #23
   19ff4:	andeq	r9, r1, r4, lsl #23
   19ff8:	andeq	r9, r1, r4, lsl #23
   19ffc:	andeq	r9, r1, r4, lsl #23
   1a000:	andeq	r9, r1, r4, lsl #23
   1a004:	andeq	r9, r1, r4, lsl #23
   1a008:	andeq	r9, r1, r4, lsl #23
   1a00c:	andeq	r9, r1, r4, lsl #23
   1a010:	andeq	r9, r1, r4, lsl #23
   1a014:	andeq	r9, r1, r8, asr #11
   1a018:	andeq	r9, r1, r0, ror #12
   1a01c:	andeq	r9, r1, r8, asr #11
   1a020:	andeq	r9, r1, r8, lsl r6
   1a024:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a028:	strd	r6, [sp, #8]
   1a02c:	strd	r8, [sp, #16]
   1a030:	strd	sl, [sp, #24]
   1a034:	str	lr, [sp, #32]
   1a038:	sub	sp, sp, #52	; 0x34
   1a03c:	mov	r5, r0
   1a040:	str	r1, [sp, #24]
   1a044:	str	r2, [sp, #28]
   1a048:	mov	r4, r3
   1a04c:	bl	116b0 <__errno_location@plt>
   1a050:	str	r0, [sp, #32]
   1a054:	ldr	r3, [r0]
   1a058:	str	r3, [sp, #36]	; 0x24
   1a05c:	movw	r3, #404	; 0x194
   1a060:	movt	r3, #3
   1a064:	ldr	r6, [r3]
   1a068:	cmn	r5, #-2147483647	; 0x80000001
   1a06c:	movne	r3, #0
   1a070:	moveq	r3, #1
   1a074:	orrs	r3, r3, r5, lsr #31
   1a078:	bne	1a1dc <__assert_fail@plt+0x8988>
   1a07c:	movw	r3, #404	; 0x194
   1a080:	movt	r3, #3
   1a084:	ldr	r2, [r3, #4]
   1a088:	cmp	r2, r5
   1a08c:	bgt	1a0fc <__assert_fail@plt+0x88a8>
   1a090:	str	r2, [sp, #44]	; 0x2c
   1a094:	add	r3, r3, #8
   1a098:	cmp	r6, r3
   1a09c:	beq	1a1e0 <__assert_fail@plt+0x898c>
   1a0a0:	sub	r2, r5, r2
   1a0a4:	mov	r3, #8
   1a0a8:	str	r3, [sp]
   1a0ac:	mvn	r3, #-2147483648	; 0x80000000
   1a0b0:	add	r2, r2, #1
   1a0b4:	add	r1, sp, #44	; 0x2c
   1a0b8:	mov	r0, r6
   1a0bc:	bl	1b904 <__assert_fail@plt+0xa0b0>
   1a0c0:	mov	r6, r0
   1a0c4:	movw	r3, #404	; 0x194
   1a0c8:	movt	r3, #3
   1a0cc:	str	r0, [r3]
   1a0d0:	movw	r7, #404	; 0x194
   1a0d4:	movt	r7, #3
   1a0d8:	ldr	r0, [r7, #4]
   1a0dc:	ldr	r2, [sp, #44]	; 0x2c
   1a0e0:	sub	r2, r2, r0
   1a0e4:	lsl	r2, r2, #3
   1a0e8:	mov	r1, #0
   1a0ec:	add	r0, r6, r0, lsl #3
   1a0f0:	bl	116e0 <memset@plt>
   1a0f4:	ldr	r3, [sp, #44]	; 0x2c
   1a0f8:	str	r3, [r7, #4]
   1a0fc:	add	fp, r6, r5, lsl #3
   1a100:	ldr	r8, [r6, r5, lsl #3]
   1a104:	ldr	r7, [fp, #4]
   1a108:	ldr	r3, [r4, #4]
   1a10c:	orr	r9, r3, #1
   1a110:	add	sl, r4, #8
   1a114:	ldr	r3, [r4, #44]	; 0x2c
   1a118:	str	r3, [sp, #16]
   1a11c:	ldr	r3, [r4, #40]	; 0x28
   1a120:	str	r3, [sp, #12]
   1a124:	str	sl, [sp, #8]
   1a128:	str	r9, [sp, #4]
   1a12c:	ldr	r3, [r4]
   1a130:	str	r3, [sp]
   1a134:	ldr	r3, [sp, #28]
   1a138:	ldr	r2, [sp, #24]
   1a13c:	mov	r1, r8
   1a140:	mov	r0, r7
   1a144:	bl	1892c <__assert_fail@plt+0x70d8>
   1a148:	cmp	r8, r0
   1a14c:	bhi	1a1b0 <__assert_fail@plt+0x895c>
   1a150:	add	r8, r0, #1
   1a154:	str	r8, [r6, r5, lsl #3]
   1a158:	movw	r3, #636	; 0x27c
   1a15c:	movt	r3, #3
   1a160:	cmp	r7, r3
   1a164:	beq	1a170 <__assert_fail@plt+0x891c>
   1a168:	mov	r0, r7
   1a16c:	bl	15fdc <__assert_fail@plt+0x4788>
   1a170:	mov	r0, r8
   1a174:	bl	1b700 <__assert_fail@plt+0x9eac>
   1a178:	mov	r7, r0
   1a17c:	str	r0, [fp, #4]
   1a180:	ldr	r3, [r4, #44]	; 0x2c
   1a184:	str	r3, [sp, #16]
   1a188:	ldr	r3, [r4, #40]	; 0x28
   1a18c:	str	r3, [sp, #12]
   1a190:	str	sl, [sp, #8]
   1a194:	str	r9, [sp, #4]
   1a198:	ldr	r3, [r4]
   1a19c:	str	r3, [sp]
   1a1a0:	ldr	r3, [sp, #28]
   1a1a4:	ldr	r2, [sp, #24]
   1a1a8:	mov	r1, r8
   1a1ac:	bl	1892c <__assert_fail@plt+0x70d8>
   1a1b0:	ldr	r3, [sp, #32]
   1a1b4:	ldr	r2, [sp, #36]	; 0x24
   1a1b8:	str	r2, [r3]
   1a1bc:	mov	r0, r7
   1a1c0:	add	sp, sp, #52	; 0x34
   1a1c4:	ldrd	r4, [sp]
   1a1c8:	ldrd	r6, [sp, #8]
   1a1cc:	ldrd	r8, [sp, #16]
   1a1d0:	ldrd	sl, [sp, #24]
   1a1d4:	add	sp, sp, #32
   1a1d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1dc:	bl	11824 <abort@plt>
   1a1e0:	sub	r2, r5, r2
   1a1e4:	mov	r3, #8
   1a1e8:	str	r3, [sp]
   1a1ec:	mvn	r3, #-2147483648	; 0x80000000
   1a1f0:	add	r2, r2, #1
   1a1f4:	add	r1, sp, #44	; 0x2c
   1a1f8:	mov	r0, #0
   1a1fc:	bl	1b904 <__assert_fail@plt+0xa0b0>
   1a200:	mov	r6, r0
   1a204:	movw	r3, #404	; 0x194
   1a208:	movt	r3, #3
   1a20c:	str	r0, [r3]
   1a210:	ldrd	r2, [r3, #8]
   1a214:	strd	r2, [r0]
   1a218:	b	1a0d0 <__assert_fail@plt+0x887c>
   1a21c:	strd	r4, [sp, #-16]!
   1a220:	str	r6, [sp, #8]
   1a224:	str	lr, [sp, #12]
   1a228:	mov	r4, r0
   1a22c:	bl	116b0 <__errno_location@plt>
   1a230:	mov	r5, r0
   1a234:	ldr	r6, [r0]
   1a238:	cmp	r4, #0
   1a23c:	ldr	r3, [pc, #32]	; 1a264 <__assert_fail@plt+0x8a10>
   1a240:	moveq	r4, r3
   1a244:	mov	r1, #48	; 0x30
   1a248:	mov	r0, r4
   1a24c:	bl	1ba74 <__assert_fail@plt+0xa220>
   1a250:	str	r6, [r5]
   1a254:	ldrd	r4, [sp]
   1a258:	ldr	r6, [sp, #8]
   1a25c:	add	sp, sp, #12
   1a260:	pop	{pc}		; (ldr pc, [sp], #4)
   1a264:	andeq	r0, r3, ip, ror r3
   1a268:	subs	r3, r0, #0
   1a26c:	ldr	r2, [pc, #8]	; 1a27c <__assert_fail@plt+0x8a28>
   1a270:	moveq	r3, r2
   1a274:	ldr	r0, [r3]
   1a278:	bx	lr
   1a27c:	andeq	r0, r3, ip, ror r3
   1a280:	subs	r3, r0, #0
   1a284:	ldr	r2, [pc, #8]	; 1a294 <__assert_fail@plt+0x8a40>
   1a288:	moveq	r3, r2
   1a28c:	str	r1, [r3]
   1a290:	bx	lr
   1a294:	andeq	r0, r3, ip, ror r3
   1a298:	push	{lr}		; (str lr, [sp, #-4]!)
   1a29c:	subs	r3, r0, #0
   1a2a0:	ldr	r0, [pc, #44]	; 1a2d4 <__assert_fail@plt+0x8a80>
   1a2a4:	moveq	r3, r0
   1a2a8:	add	r3, r3, #8
   1a2ac:	lsr	lr, r1, #5
   1a2b0:	and	r1, r1, #31
   1a2b4:	ldr	ip, [r3, lr, lsl #2]
   1a2b8:	lsr	r0, ip, r1
   1a2bc:	eor	r2, r2, r0
   1a2c0:	and	r2, r2, #1
   1a2c4:	eor	r1, ip, r2, lsl r1
   1a2c8:	str	r1, [r3, lr, lsl #2]
   1a2cc:	and	r0, r0, #1
   1a2d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2d4:	andeq	r0, r3, ip, ror r3
   1a2d8:	subs	r3, r0, #0
   1a2dc:	ldr	r2, [pc, #12]	; 1a2f0 <__assert_fail@plt+0x8a9c>
   1a2e0:	moveq	r3, r2
   1a2e4:	ldr	r0, [r3, #4]
   1a2e8:	str	r1, [r3, #4]
   1a2ec:	bx	lr
   1a2f0:	andeq	r0, r3, ip, ror r3
   1a2f4:	subs	r3, r0, #0
   1a2f8:	ldr	r0, [pc, #44]	; 1a32c <__assert_fail@plt+0x8ad8>
   1a2fc:	moveq	r3, r0
   1a300:	mov	r0, #10
   1a304:	str	r0, [r3]
   1a308:	cmp	r2, #0
   1a30c:	cmpne	r1, #0
   1a310:	beq	1a320 <__assert_fail@plt+0x8acc>
   1a314:	str	r1, [r3, #40]	; 0x28
   1a318:	str	r2, [r3, #44]	; 0x2c
   1a31c:	bx	lr
   1a320:	str	r4, [sp, #-8]!
   1a324:	str	lr, [sp, #4]
   1a328:	bl	11824 <abort@plt>
   1a32c:	andeq	r0, r3, ip, ror r3
   1a330:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a334:	strd	r6, [sp, #8]
   1a338:	strd	r8, [sp, #16]
   1a33c:	str	sl, [sp, #24]
   1a340:	str	lr, [sp, #28]
   1a344:	sub	sp, sp, #24
   1a348:	mov	r7, r0
   1a34c:	mov	r8, r1
   1a350:	mov	r9, r2
   1a354:	mov	sl, r3
   1a358:	ldr	r4, [sp, #56]	; 0x38
   1a35c:	cmp	r4, #0
   1a360:	ldr	r3, [pc, #104]	; 1a3d0 <__assert_fail@plt+0x8b7c>
   1a364:	moveq	r4, r3
   1a368:	bl	116b0 <__errno_location@plt>
   1a36c:	mov	r5, r0
   1a370:	ldr	r6, [r0]
   1a374:	ldr	r3, [r4, #44]	; 0x2c
   1a378:	str	r3, [sp, #16]
   1a37c:	ldr	r3, [r4, #40]	; 0x28
   1a380:	str	r3, [sp, #12]
   1a384:	add	r3, r4, #8
   1a388:	str	r3, [sp, #8]
   1a38c:	ldr	r3, [r4, #4]
   1a390:	str	r3, [sp, #4]
   1a394:	ldr	r3, [r4]
   1a398:	str	r3, [sp]
   1a39c:	mov	r3, sl
   1a3a0:	mov	r2, r9
   1a3a4:	mov	r1, r8
   1a3a8:	mov	r0, r7
   1a3ac:	bl	1892c <__assert_fail@plt+0x70d8>
   1a3b0:	str	r6, [r5]
   1a3b4:	add	sp, sp, #24
   1a3b8:	ldrd	r4, [sp]
   1a3bc:	ldrd	r6, [sp, #8]
   1a3c0:	ldrd	r8, [sp, #16]
   1a3c4:	ldr	sl, [sp, #24]
   1a3c8:	add	sp, sp, #28
   1a3cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3d0:	andeq	r0, r3, ip, ror r3
   1a3d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a3d8:	strd	r6, [sp, #8]
   1a3dc:	strd	r8, [sp, #16]
   1a3e0:	strd	sl, [sp, #24]
   1a3e4:	str	lr, [sp, #32]
   1a3e8:	sub	sp, sp, #44	; 0x2c
   1a3ec:	mov	r8, r0
   1a3f0:	mov	sl, r1
   1a3f4:	mov	r6, r2
   1a3f8:	subs	r4, r3, #0
   1a3fc:	ldr	r3, [pc, #200]	; 1a4cc <__assert_fail@plt+0x8c78>
   1a400:	moveq	r4, r3
   1a404:	bl	116b0 <__errno_location@plt>
   1a408:	mov	r7, r0
   1a40c:	ldr	fp, [r0]
   1a410:	ldr	r5, [r4, #4]
   1a414:	cmp	r6, #0
   1a418:	orreq	r5, r5, #1
   1a41c:	add	r9, r4, #8
   1a420:	ldr	r3, [r4, #44]	; 0x2c
   1a424:	str	r3, [sp, #16]
   1a428:	ldr	r3, [r4, #40]	; 0x28
   1a42c:	str	r3, [sp, #12]
   1a430:	str	r9, [sp, #8]
   1a434:	str	r5, [sp, #4]
   1a438:	ldr	r3, [r4]
   1a43c:	str	r3, [sp]
   1a440:	str	sl, [sp, #36]	; 0x24
   1a444:	mov	r3, sl
   1a448:	str	r8, [sp, #32]
   1a44c:	mov	r2, r8
   1a450:	mov	r1, #0
   1a454:	mov	r0, r1
   1a458:	bl	1892c <__assert_fail@plt+0x70d8>
   1a45c:	mov	sl, r0
   1a460:	add	r8, r0, #1
   1a464:	mov	r0, r8
   1a468:	bl	1b700 <__assert_fail@plt+0x9eac>
   1a46c:	str	r0, [sp, #28]
   1a470:	ldr	r3, [r4, #44]	; 0x2c
   1a474:	str	r3, [sp, #16]
   1a478:	ldr	r3, [r4, #40]	; 0x28
   1a47c:	str	r3, [sp, #12]
   1a480:	str	r9, [sp, #8]
   1a484:	str	r5, [sp, #4]
   1a488:	ldr	r3, [r4]
   1a48c:	str	r3, [sp]
   1a490:	ldr	r3, [sp, #36]	; 0x24
   1a494:	ldr	r2, [sp, #32]
   1a498:	mov	r1, r8
   1a49c:	bl	1892c <__assert_fail@plt+0x70d8>
   1a4a0:	str	fp, [r7]
   1a4a4:	cmp	r6, #0
   1a4a8:	strne	sl, [r6]
   1a4ac:	ldr	r0, [sp, #28]
   1a4b0:	add	sp, sp, #44	; 0x2c
   1a4b4:	ldrd	r4, [sp]
   1a4b8:	ldrd	r6, [sp, #8]
   1a4bc:	ldrd	r8, [sp, #16]
   1a4c0:	ldrd	sl, [sp, #24]
   1a4c4:	add	sp, sp, #32
   1a4c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4cc:	andeq	r0, r3, ip, ror r3
   1a4d0:	str	r4, [sp, #-8]!
   1a4d4:	str	lr, [sp, #4]
   1a4d8:	mov	r3, r2
   1a4dc:	mov	r2, #0
   1a4e0:	bl	1a3d4 <__assert_fail@plt+0x8b80>
   1a4e4:	ldr	r4, [sp]
   1a4e8:	add	sp, sp, #4
   1a4ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a4f4:	strd	r6, [sp, #8]
   1a4f8:	str	r8, [sp, #16]
   1a4fc:	str	lr, [sp, #20]
   1a500:	movw	r3, #404	; 0x194
   1a504:	movt	r3, #3
   1a508:	ldr	r7, [r3]
   1a50c:	ldr	r3, [r3, #4]
   1a510:	cmp	r3, #1
   1a514:	ble	1a540 <__assert_fail@plt+0x8cec>
   1a518:	mov	r4, #1
   1a51c:	add	r6, r7, #4
   1a520:	movw	r5, #404	; 0x194
   1a524:	movt	r5, #3
   1a528:	ldr	r0, [r6, r4, lsl #3]
   1a52c:	bl	15fdc <__assert_fail@plt+0x4788>
   1a530:	add	r4, r4, #1
   1a534:	ldr	r3, [r5, #4]
   1a538:	cmp	r3, r4
   1a53c:	bgt	1a528 <__assert_fail@plt+0x8cd4>
   1a540:	ldr	r0, [r7, #4]
   1a544:	movw	r3, #636	; 0x27c
   1a548:	movt	r3, #3
   1a54c:	cmp	r0, r3
   1a550:	beq	1a574 <__assert_fail@plt+0x8d20>
   1a554:	bl	15fdc <__assert_fail@plt+0x4788>
   1a558:	movw	r3, #404	; 0x194
   1a55c:	movt	r3, #3
   1a560:	mov	r2, #256	; 0x100
   1a564:	str	r2, [r3, #8]
   1a568:	movw	r2, #636	; 0x27c
   1a56c:	movt	r2, #3
   1a570:	str	r2, [r3, #12]
   1a574:	ldr	r3, [pc, #64]	; 1a5bc <__assert_fail@plt+0x8d68>
   1a578:	cmp	r7, r3
   1a57c:	beq	1a598 <__assert_fail@plt+0x8d44>
   1a580:	mov	r0, r7
   1a584:	bl	15fdc <__assert_fail@plt+0x4788>
   1a588:	movw	r3, #404	; 0x194
   1a58c:	movt	r3, #3
   1a590:	add	r2, r3, #8
   1a594:	str	r2, [r3]
   1a598:	movw	r3, #404	; 0x194
   1a59c:	movt	r3, #3
   1a5a0:	mov	r2, #1
   1a5a4:	str	r2, [r3, #4]
   1a5a8:	ldrd	r4, [sp]
   1a5ac:	ldrd	r6, [sp, #8]
   1a5b0:	ldr	r8, [sp, #16]
   1a5b4:	add	sp, sp, #20
   1a5b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5bc:	muleq	r3, ip, r1
   1a5c0:	str	r4, [sp, #-8]!
   1a5c4:	str	lr, [sp, #4]
   1a5c8:	ldr	r3, [pc, #16]	; 1a5e0 <__assert_fail@plt+0x8d8c>
   1a5cc:	mvn	r2, #0
   1a5d0:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a5d4:	ldr	r4, [sp]
   1a5d8:	add	sp, sp, #4
   1a5dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5e0:	andeq	r0, r3, ip, ror r3
   1a5e4:	str	r4, [sp, #-8]!
   1a5e8:	str	lr, [sp, #4]
   1a5ec:	ldr	r3, [pc, #12]	; 1a600 <__assert_fail@plt+0x8dac>
   1a5f0:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a5f4:	ldr	r4, [sp]
   1a5f8:	add	sp, sp, #4
   1a5fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a600:	andeq	r0, r3, ip, ror r3
   1a604:	str	r4, [sp, #-8]!
   1a608:	str	lr, [sp, #4]
   1a60c:	mov	r1, r0
   1a610:	mov	r0, #0
   1a614:	bl	1a5c0 <__assert_fail@plt+0x8d6c>
   1a618:	ldr	r4, [sp]
   1a61c:	add	sp, sp, #4
   1a620:	pop	{pc}		; (ldr pc, [sp], #4)
   1a624:	str	r4, [sp, #-8]!
   1a628:	str	lr, [sp, #4]
   1a62c:	mov	r2, r1
   1a630:	mov	r1, r0
   1a634:	mov	r0, #0
   1a638:	bl	1a5e4 <__assert_fail@plt+0x8d90>
   1a63c:	ldr	r4, [sp]
   1a640:	add	sp, sp, #4
   1a644:	pop	{pc}		; (ldr pc, [sp], #4)
   1a648:	strd	r4, [sp, #-12]!
   1a64c:	str	lr, [sp, #8]
   1a650:	sub	sp, sp, #52	; 0x34
   1a654:	mov	r4, r0
   1a658:	mov	r5, r2
   1a65c:	mov	r0, sp
   1a660:	bl	18798 <__assert_fail@plt+0x6f44>
   1a664:	mov	r3, sp
   1a668:	mvn	r2, #0
   1a66c:	mov	r1, r5
   1a670:	mov	r0, r4
   1a674:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a678:	add	sp, sp, #52	; 0x34
   1a67c:	ldrd	r4, [sp]
   1a680:	add	sp, sp, #8
   1a684:	pop	{pc}		; (ldr pc, [sp], #4)
   1a688:	strd	r4, [sp, #-16]!
   1a68c:	str	r6, [sp, #8]
   1a690:	str	lr, [sp, #12]
   1a694:	sub	sp, sp, #48	; 0x30
   1a698:	mov	r4, r0
   1a69c:	mov	r5, r2
   1a6a0:	mov	r6, r3
   1a6a4:	mov	r0, sp
   1a6a8:	bl	18798 <__assert_fail@plt+0x6f44>
   1a6ac:	mov	r3, sp
   1a6b0:	mov	r2, r6
   1a6b4:	mov	r1, r5
   1a6b8:	mov	r0, r4
   1a6bc:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a6c0:	add	sp, sp, #48	; 0x30
   1a6c4:	ldrd	r4, [sp]
   1a6c8:	ldr	r6, [sp, #8]
   1a6cc:	add	sp, sp, #12
   1a6d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6d4:	str	r4, [sp, #-8]!
   1a6d8:	str	lr, [sp, #4]
   1a6dc:	mov	r2, r1
   1a6e0:	mov	r1, r0
   1a6e4:	mov	r0, #0
   1a6e8:	bl	1a648 <__assert_fail@plt+0x8df4>
   1a6ec:	ldr	r4, [sp]
   1a6f0:	add	sp, sp, #4
   1a6f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6f8:	str	r4, [sp, #-8]!
   1a6fc:	str	lr, [sp, #4]
   1a700:	mov	r3, r2
   1a704:	mov	r2, r1
   1a708:	mov	r1, r0
   1a70c:	mov	r0, #0
   1a710:	bl	1a688 <__assert_fail@plt+0x8e34>
   1a714:	ldr	r4, [sp]
   1a718:	add	sp, sp, #4
   1a71c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a720:	strd	r4, [sp, #-12]!
   1a724:	str	lr, [sp, #8]
   1a728:	sub	sp, sp, #52	; 0x34
   1a72c:	mov	r4, r0
   1a730:	mov	r5, r1
   1a734:	mov	r1, r2
   1a738:	ldr	r0, [pc, #92]	; 1a79c <__assert_fail@plt+0x8f48>
   1a73c:	ldrd	r2, [r0]
   1a740:	strd	r2, [sp]
   1a744:	ldrd	r2, [r0, #8]
   1a748:	strd	r2, [sp, #8]
   1a74c:	ldrd	r2, [r0, #16]
   1a750:	strd	r2, [sp, #16]
   1a754:	ldrd	r2, [r0, #24]
   1a758:	strd	r2, [sp, #24]
   1a75c:	ldrd	r2, [r0, #32]
   1a760:	strd	r2, [sp, #32]
   1a764:	ldrd	r2, [r0, #40]	; 0x28
   1a768:	strd	r2, [sp, #40]	; 0x28
   1a76c:	mov	r2, #1
   1a770:	mov	r0, sp
   1a774:	bl	1a298 <__assert_fail@plt+0x8a44>
   1a778:	mov	r3, sp
   1a77c:	mov	r2, r5
   1a780:	mov	r1, r4
   1a784:	mov	r0, #0
   1a788:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a78c:	add	sp, sp, #52	; 0x34
   1a790:	ldrd	r4, [sp]
   1a794:	add	sp, sp, #8
   1a798:	pop	{pc}		; (ldr pc, [sp], #4)
   1a79c:	andeq	r0, r3, ip, ror r3
   1a7a0:	str	r4, [sp, #-8]!
   1a7a4:	str	lr, [sp, #4]
   1a7a8:	mov	r2, r1
   1a7ac:	mvn	r1, #0
   1a7b0:	bl	1a720 <__assert_fail@plt+0x8ecc>
   1a7b4:	ldr	r4, [sp]
   1a7b8:	add	sp, sp, #4
   1a7bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7c0:	str	r4, [sp, #-8]!
   1a7c4:	str	lr, [sp, #4]
   1a7c8:	mov	r1, #58	; 0x3a
   1a7cc:	bl	1a7a0 <__assert_fail@plt+0x8f4c>
   1a7d0:	ldr	r4, [sp]
   1a7d4:	add	sp, sp, #4
   1a7d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7dc:	str	r4, [sp, #-8]!
   1a7e0:	str	lr, [sp, #4]
   1a7e4:	mov	r2, #58	; 0x3a
   1a7e8:	bl	1a720 <__assert_fail@plt+0x8ecc>
   1a7ec:	ldr	r4, [sp]
   1a7f0:	add	sp, sp, #4
   1a7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7f8:	strd	r4, [sp, #-12]!
   1a7fc:	str	lr, [sp, #8]
   1a800:	sub	sp, sp, #100	; 0x64
   1a804:	mov	r4, r0
   1a808:	mov	r5, r2
   1a80c:	mov	r0, sp
   1a810:	bl	18798 <__assert_fail@plt+0x6f44>
   1a814:	ldrd	r2, [sp]
   1a818:	strd	r2, [sp, #48]	; 0x30
   1a81c:	ldrd	r2, [sp, #8]
   1a820:	strd	r2, [sp, #56]	; 0x38
   1a824:	ldrd	r2, [sp, #16]
   1a828:	strd	r2, [sp, #64]	; 0x40
   1a82c:	ldrd	r2, [sp, #24]
   1a830:	strd	r2, [sp, #72]	; 0x48
   1a834:	ldrd	r2, [sp, #32]
   1a838:	strd	r2, [sp, #80]	; 0x50
   1a83c:	ldrd	r2, [sp, #40]	; 0x28
   1a840:	strd	r2, [sp, #88]	; 0x58
   1a844:	mov	r2, #1
   1a848:	mov	r1, #58	; 0x3a
   1a84c:	add	r0, sp, #48	; 0x30
   1a850:	bl	1a298 <__assert_fail@plt+0x8a44>
   1a854:	add	r3, sp, #48	; 0x30
   1a858:	mvn	r2, #0
   1a85c:	mov	r1, r5
   1a860:	mov	r0, r4
   1a864:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a868:	add	sp, sp, #100	; 0x64
   1a86c:	ldrd	r4, [sp]
   1a870:	add	sp, sp, #8
   1a874:	pop	{pc}		; (ldr pc, [sp], #4)
   1a878:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a87c:	strd	r6, [sp, #8]
   1a880:	str	lr, [sp, #16]
   1a884:	sub	sp, sp, #52	; 0x34
   1a888:	mov	r4, r0
   1a88c:	mov	r5, r3
   1a890:	ldr	r3, [pc, #92]	; 1a8f4 <__assert_fail@plt+0x90a0>
   1a894:	ldrd	r6, [r3]
   1a898:	strd	r6, [sp]
   1a89c:	ldrd	r6, [r3, #8]
   1a8a0:	strd	r6, [sp, #8]
   1a8a4:	ldrd	r6, [r3, #16]
   1a8a8:	strd	r6, [sp, #16]
   1a8ac:	ldrd	r6, [r3, #24]
   1a8b0:	strd	r6, [sp, #24]
   1a8b4:	ldrd	r6, [r3, #32]
   1a8b8:	strd	r6, [sp, #32]
   1a8bc:	ldrd	r6, [r3, #40]	; 0x28
   1a8c0:	strd	r6, [sp, #40]	; 0x28
   1a8c4:	mov	r0, sp
   1a8c8:	bl	1a2f4 <__assert_fail@plt+0x8aa0>
   1a8cc:	mov	r3, sp
   1a8d0:	ldr	r2, [sp, #72]	; 0x48
   1a8d4:	mov	r1, r5
   1a8d8:	mov	r0, r4
   1a8dc:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a8e0:	add	sp, sp, #52	; 0x34
   1a8e4:	ldrd	r4, [sp]
   1a8e8:	ldrd	r6, [sp, #8]
   1a8ec:	add	sp, sp, #16
   1a8f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8f4:	andeq	r0, r3, ip, ror r3
   1a8f8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a8fc:	sub	sp, sp, #12
   1a900:	mvn	ip, #0
   1a904:	str	ip, [sp]
   1a908:	bl	1a878 <__assert_fail@plt+0x9024>
   1a90c:	add	sp, sp, #12
   1a910:	pop	{pc}		; (ldr pc, [sp], #4)
   1a914:	str	r4, [sp, #-8]!
   1a918:	str	lr, [sp, #4]
   1a91c:	mov	r3, r2
   1a920:	mov	r2, r1
   1a924:	mov	r1, r0
   1a928:	mov	r0, #0
   1a92c:	bl	1a8f8 <__assert_fail@plt+0x90a4>
   1a930:	ldr	r4, [sp]
   1a934:	add	sp, sp, #4
   1a938:	pop	{pc}		; (ldr pc, [sp], #4)
   1a93c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a940:	sub	sp, sp, #12
   1a944:	str	r3, [sp]
   1a948:	mov	r3, r2
   1a94c:	mov	r2, r1
   1a950:	mov	r1, r0
   1a954:	mov	r0, #0
   1a958:	bl	1a878 <__assert_fail@plt+0x9024>
   1a95c:	add	sp, sp, #12
   1a960:	pop	{pc}		; (ldr pc, [sp], #4)
   1a964:	str	r4, [sp, #-8]!
   1a968:	str	lr, [sp, #4]
   1a96c:	ldr	r3, [pc, #12]	; 1a980 <__assert_fail@plt+0x912c>
   1a970:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a974:	ldr	r4, [sp]
   1a978:	add	sp, sp, #4
   1a97c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a980:	andeq	r0, r3, r4, lsr #3
   1a984:	str	r4, [sp, #-8]!
   1a988:	str	lr, [sp, #4]
   1a98c:	mov	r2, r1
   1a990:	mov	r1, r0
   1a994:	mov	r0, #0
   1a998:	bl	1a964 <__assert_fail@plt+0x9110>
   1a99c:	ldr	r4, [sp]
   1a9a0:	add	sp, sp, #4
   1a9a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9a8:	str	r4, [sp, #-8]!
   1a9ac:	str	lr, [sp, #4]
   1a9b0:	mvn	r2, #0
   1a9b4:	bl	1a964 <__assert_fail@plt+0x9110>
   1a9b8:	ldr	r4, [sp]
   1a9bc:	add	sp, sp, #4
   1a9c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9c4:	str	r4, [sp, #-8]!
   1a9c8:	str	lr, [sp, #4]
   1a9cc:	mov	r1, r0
   1a9d0:	mov	r0, #0
   1a9d4:	bl	1a9a8 <__assert_fail@plt+0x9154>
   1a9d8:	ldr	r4, [sp]
   1a9dc:	add	sp, sp, #4
   1a9e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9e4:	str	r4, [sp, #-8]!
   1a9e8:	str	lr, [sp, #4]
   1a9ec:	mov	r4, r0
   1a9f0:	mov	r3, #0
   1a9f4:	str	r3, [r0, #4]
   1a9f8:	mov	r1, #524288	; 0x80000
   1a9fc:	movw	r0, #61152	; 0xeee0
   1aa00:	movt	r0, #1
   1aa04:	bl	1cbbc <__assert_fail@plt+0xb368>
   1aa08:	str	r0, [r4]
   1aa0c:	cmp	r0, #0
   1aa10:	movge	r0, #0
   1aa14:	blt	1aa24 <__assert_fail@plt+0x91d0>
   1aa18:	ldr	r4, [sp]
   1aa1c:	add	sp, sp, #4
   1aa20:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa24:	mov	r1, #0
   1aa28:	mov	r0, r1
   1aa2c:	bl	11650 <getcwd@plt>
   1aa30:	str	r0, [r4, #4]
   1aa34:	clz	r0, r0
   1aa38:	lsr	r0, r0, #5
   1aa3c:	rsb	r0, r0, #0
   1aa40:	b	1aa18 <__assert_fail@plt+0x91c4>
   1aa44:	str	r4, [sp, #-8]!
   1aa48:	str	lr, [sp, #4]
   1aa4c:	ldr	r3, [r0]
   1aa50:	cmp	r3, #0
   1aa54:	blt	1aa6c <__assert_fail@plt+0x9218>
   1aa58:	mov	r0, r3
   1aa5c:	bl	117b8 <fchdir@plt>
   1aa60:	ldr	r4, [sp]
   1aa64:	add	sp, sp, #4
   1aa68:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa6c:	ldr	r0, [r0, #4]
   1aa70:	bl	1c7c4 <__assert_fail@plt+0xaf70>
   1aa74:	b	1aa60 <__assert_fail@plt+0x920c>
   1aa78:	str	r4, [sp, #-8]!
   1aa7c:	str	lr, [sp, #4]
   1aa80:	mov	r4, r0
   1aa84:	ldr	r0, [r0]
   1aa88:	cmp	r0, #0
   1aa8c:	bge	1aaa4 <__assert_fail@plt+0x9250>
   1aa90:	ldr	r0, [r4, #4]
   1aa94:	bl	15fdc <__assert_fail@plt+0x4788>
   1aa98:	ldr	r4, [sp]
   1aa9c:	add	sp, sp, #4
   1aaa0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaa4:	bl	11830 <close@plt>
   1aaa8:	b	1aa90 <__assert_fail@plt+0x923c>
   1aaac:	strd	r4, [sp, #-16]!
   1aab0:	str	r6, [sp, #8]
   1aab4:	str	lr, [sp, #12]
   1aab8:	subs	r4, r0, #0
   1aabc:	beq	1aae0 <__assert_fail@plt+0x928c>
   1aac0:	mov	r5, r1
   1aac4:	cmp	r4, #10
   1aac8:	beq	1aaf4 <__assert_fail@plt+0x92a0>
   1aacc:	mov	r0, r4
   1aad0:	ldrd	r4, [sp]
   1aad4:	ldr	r6, [sp, #8]
   1aad8:	add	sp, sp, #12
   1aadc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aae0:	bl	116b0 <__errno_location@plt>
   1aae4:	mov	r3, #95	; 0x5f
   1aae8:	str	r3, [r0]
   1aaec:	mvn	r4, #0
   1aaf0:	b	1aacc <__assert_fail@plt+0x9278>
   1aaf4:	ldr	r6, [r1]
   1aaf8:	movw	r1, #62544	; 0xf450
   1aafc:	movt	r1, #1
   1ab00:	mov	r0, r6
   1ab04:	bl	11464 <strcmp@plt>
   1ab08:	cmp	r0, #0
   1ab0c:	bne	1aacc <__assert_fail@plt+0x9278>
   1ab10:	mov	r0, r6
   1ab14:	bl	117dc <freecon@plt>
   1ab18:	mov	r3, #0
   1ab1c:	str	r3, [r5]
   1ab20:	bl	116b0 <__errno_location@plt>
   1ab24:	mov	r3, #61	; 0x3d
   1ab28:	str	r3, [r0]
   1ab2c:	mvn	r4, #0
   1ab30:	b	1aacc <__assert_fail@plt+0x9278>
   1ab34:	str	r4, [sp, #-8]!
   1ab38:	str	lr, [sp, #4]
   1ab3c:	mov	r4, r1
   1ab40:	bl	11668 <getfilecon@plt>
   1ab44:	mov	r1, r4
   1ab48:	bl	1aaac <__assert_fail@plt+0x9258>
   1ab4c:	ldr	r4, [sp]
   1ab50:	add	sp, sp, #4
   1ab54:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab58:	str	r4, [sp, #-8]!
   1ab5c:	str	lr, [sp, #4]
   1ab60:	mov	r4, r1
   1ab64:	bl	115d8 <lgetfilecon@plt>
   1ab68:	mov	r1, r4
   1ab6c:	bl	1aaac <__assert_fail@plt+0x9258>
   1ab70:	ldr	r4, [sp]
   1ab74:	add	sp, sp, #4
   1ab78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab7c:	str	r4, [sp, #-8]!
   1ab80:	str	lr, [sp, #4]
   1ab84:	mov	r4, r1
   1ab88:	bl	11500 <fgetfilecon@plt>
   1ab8c:	mov	r1, r4
   1ab90:	bl	1aaac <__assert_fail@plt+0x9258>
   1ab94:	ldr	r4, [sp]
   1ab98:	add	sp, sp, #4
   1ab9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aba0:	str	r4, [sp, #-8]!
   1aba4:	str	lr, [sp, #4]
   1aba8:	subs	r1, r0, #0
   1abac:	beq	1abcc <__assert_fail@plt+0x9378>
   1abb0:	mov	r2, #1
   1abb4:	movw	r0, #56920	; 0xde58
   1abb8:	movt	r0, #1
   1abbc:	bl	1168c <setenv@plt>
   1abc0:	ldr	r4, [sp]
   1abc4:	add	sp, sp, #4
   1abc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abcc:	movw	r0, #56920	; 0xde58
   1abd0:	movt	r0, #1
   1abd4:	bl	1180c <unsetenv@plt>
   1abd8:	b	1abc0 <__assert_fail@plt+0x936c>
   1abdc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1abe0:	strd	r6, [sp, #8]
   1abe4:	str	r8, [sp, #16]
   1abe8:	str	lr, [sp, #20]
   1abec:	subs	r6, r0, #0
   1abf0:	beq	1ac64 <__assert_fail@plt+0x9410>
   1abf4:	mov	r0, r6
   1abf8:	bl	11674 <strlen@plt>
   1abfc:	add	r5, r0, #1
   1ac00:	cmp	r5, #58	; 0x3a
   1ac04:	movcs	r0, r5
   1ac08:	movcc	r0, #58	; 0x3a
   1ac0c:	add	r0, r0, #9
   1ac10:	bic	r0, r0, #3
   1ac14:	bl	1bc70 <__assert_fail@plt+0xa41c>
   1ac18:	subs	r4, r0, #0
   1ac1c:	beq	1ac4c <__assert_fail@plt+0x93f8>
   1ac20:	mov	r8, #0
   1ac24:	str	r8, [r4]
   1ac28:	mov	r3, #1
   1ac2c:	strb	r3, [r4, #4]
   1ac30:	mov	r7, r4
   1ac34:	strb	r8, [r7, #5]!
   1ac38:	mov	r2, r5
   1ac3c:	mov	r1, r6
   1ac40:	mov	r0, r7
   1ac44:	bl	114b8 <memcpy@plt>
   1ac48:	strb	r8, [r7, r5]
   1ac4c:	mov	r0, r4
   1ac50:	ldrd	r4, [sp]
   1ac54:	ldrd	r6, [sp, #8]
   1ac58:	ldr	r8, [sp, #16]
   1ac5c:	add	sp, sp, #20
   1ac60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac64:	mov	r0, #64	; 0x40
   1ac68:	bl	1bc70 <__assert_fail@plt+0xa41c>
   1ac6c:	subs	r4, r0, #0
   1ac70:	beq	1ac4c <__assert_fail@plt+0x93f8>
   1ac74:	mov	r3, #0
   1ac78:	str	r3, [r4]
   1ac7c:	strb	r3, [r4, #4]
   1ac80:	strb	r3, [r4, #5]
   1ac84:	b	1ac4c <__assert_fail@plt+0x93f8>
   1ac88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ac8c:	strd	r6, [sp, #8]
   1ac90:	str	r8, [sp, #16]
   1ac94:	str	lr, [sp, #20]
   1ac98:	ldr	r6, [r1, #40]	; 0x28
   1ac9c:	cmp	r6, #0
   1aca0:	moveq	r0, #1
   1aca4:	beq	1ace8 <__assert_fail@plt+0x9494>
   1aca8:	mov	r5, r0
   1acac:	mov	r7, r1
   1acb0:	cmp	r1, r6
   1acb4:	bhi	1acc8 <__assert_fail@plt+0x9474>
   1acb8:	add	r3, r1, #44	; 0x2c
   1acbc:	cmp	r6, r3
   1acc0:	movcc	r0, #1
   1acc4:	bcc	1ace8 <__assert_fail@plt+0x9494>
   1acc8:	ldrb	r3, [r6]
   1accc:	cmp	r3, #0
   1acd0:	addne	r4, r5, #5
   1acd4:	bne	1ad4c <__assert_fail@plt+0x94f8>
   1acd8:	movw	r4, #55660	; 0xd96c
   1acdc:	movt	r4, #1
   1ace0:	str	r4, [r7, #40]	; 0x28
   1ace4:	mov	r0, #1
   1ace8:	ldrd	r4, [sp]
   1acec:	ldrd	r6, [sp, #8]
   1acf0:	ldr	r8, [sp, #16]
   1acf4:	add	sp, sp, #20
   1acf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1acfc:	mov	r0, r6
   1ad00:	bl	1abdc <__assert_fail@plt+0x9388>
   1ad04:	str	r0, [r5]
   1ad08:	cmp	r0, #0
   1ad0c:	moveq	r0, #0
   1ad10:	beq	1ace8 <__assert_fail@plt+0x9494>
   1ad14:	mov	r3, #0
   1ad18:	strb	r3, [r0, #4]
   1ad1c:	add	r4, r0, #5
   1ad20:	b	1ace0 <__assert_fail@plt+0x948c>
   1ad24:	mov	r0, r4
   1ad28:	bl	11674 <strlen@plt>
   1ad2c:	add	r0, r0, #1
   1ad30:	ldrb	r3, [r4, r0]!
   1ad34:	cmp	r3, #0
   1ad38:	bne	1ad4c <__assert_fail@plt+0x94f8>
   1ad3c:	ldr	r3, [r5]
   1ad40:	cmp	r3, #0
   1ad44:	addne	r4, r3, #5
   1ad48:	movne	r5, r3
   1ad4c:	mov	r1, r6
   1ad50:	mov	r0, r4
   1ad54:	bl	11464 <strcmp@plt>
   1ad58:	cmp	r0, #0
   1ad5c:	beq	1ace0 <__assert_fail@plt+0x948c>
   1ad60:	ldrb	r3, [r4]
   1ad64:	cmp	r3, #0
   1ad68:	bne	1ad24 <__assert_fail@plt+0x94d0>
   1ad6c:	add	r3, r5, #5
   1ad70:	cmp	r4, r3
   1ad74:	bne	1ad84 <__assert_fail@plt+0x9530>
   1ad78:	ldrb	r3, [r5, #4]
   1ad7c:	cmp	r3, #0
   1ad80:	bne	1ad24 <__assert_fail@plt+0x94d0>
   1ad84:	mov	r0, r6
   1ad88:	bl	11674 <strlen@plt>
   1ad8c:	add	r8, r0, #1
   1ad90:	add	r3, r5, #64	; 0x40
   1ad94:	sub	r3, r3, r4
   1ad98:	cmp	r3, r8
   1ad9c:	ble	1acfc <__assert_fail@plt+0x94a8>
   1ada0:	mov	r2, r8
   1ada4:	mov	r1, r6
   1ada8:	mov	r0, r4
   1adac:	bl	114b8 <memcpy@plt>
   1adb0:	mov	r3, #0
   1adb4:	strb	r3, [r4, r8]
   1adb8:	b	1ace0 <__assert_fail@plt+0x948c>
   1adbc:	cmp	r0, #1
   1adc0:	bxeq	lr
   1adc4:	cmp	r0, #0
   1adc8:	bxeq	lr
   1adcc:	str	r4, [sp, #-8]!
   1add0:	str	lr, [sp, #4]
   1add4:	ldr	r4, [r0]
   1add8:	bl	15fdc <__assert_fail@plt+0x4788>
   1addc:	mov	r0, r4
   1ade0:	cmp	r4, #0
   1ade4:	bne	1add4 <__assert_fail@plt+0x9580>
   1ade8:	ldr	r4, [sp]
   1adec:	add	sp, sp, #4
   1adf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1adf4:	strd	r4, [sp, #-16]!
   1adf8:	str	r6, [sp, #8]
   1adfc:	str	lr, [sp, #12]
   1ae00:	mov	r4, r0
   1ae04:	movw	r0, #56920	; 0xde58
   1ae08:	movt	r0, #1
   1ae0c:	bl	115cc <getenv@plt>
   1ae10:	subs	r5, r0, #0
   1ae14:	beq	1ae5c <__assert_fail@plt+0x9608>
   1ae18:	ldrb	r3, [r4, #4]
   1ae1c:	cmp	r3, #0
   1ae20:	moveq	r0, #0
   1ae24:	beq	1ae3c <__assert_fail@plt+0x95e8>
   1ae28:	mov	r1, r5
   1ae2c:	add	r0, r4, #5
   1ae30:	bl	11464 <strcmp@plt>
   1ae34:	clz	r0, r0
   1ae38:	lsr	r0, r0, #5
   1ae3c:	cmp	r0, #0
   1ae40:	movne	r5, #1
   1ae44:	beq	1ae6c <__assert_fail@plt+0x9618>
   1ae48:	mov	r0, r5
   1ae4c:	ldrd	r4, [sp]
   1ae50:	ldr	r6, [sp, #8]
   1ae54:	add	sp, sp, #12
   1ae58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae5c:	ldrb	r0, [r4, #4]
   1ae60:	clz	r0, r0
   1ae64:	lsr	r0, r0, #5
   1ae68:	b	1ae3c <__assert_fail@plt+0x95e8>
   1ae6c:	mov	r0, r5
   1ae70:	bl	1abdc <__assert_fail@plt+0x9388>
   1ae74:	subs	r5, r0, #0
   1ae78:	beq	1ae48 <__assert_fail@plt+0x95f4>
   1ae7c:	ldrb	r3, [r4, #4]
   1ae80:	cmp	r3, #0
   1ae84:	addne	r0, r4, #5
   1ae88:	moveq	r0, #0
   1ae8c:	bl	1aba0 <__assert_fail@plt+0x934c>
   1ae90:	cmp	r0, #0
   1ae94:	beq	1aeb8 <__assert_fail@plt+0x9664>
   1ae98:	bl	116b0 <__errno_location@plt>
   1ae9c:	mov	r4, r0
   1aea0:	ldr	r6, [r0]
   1aea4:	mov	r0, r5
   1aea8:	bl	1adbc <__assert_fail@plt+0x9568>
   1aeac:	str	r6, [r4]
   1aeb0:	mov	r5, #0
   1aeb4:	b	1ae48 <__assert_fail@plt+0x95f4>
   1aeb8:	bl	1153c <tzset@plt>
   1aebc:	b	1ae48 <__assert_fail@plt+0x95f4>
   1aec0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aec4:	strd	r6, [sp, #8]
   1aec8:	str	r8, [sp, #16]
   1aecc:	str	lr, [sp, #20]
   1aed0:	cmp	r0, #1
   1aed4:	moveq	r5, #1
   1aed8:	beq	1af1c <__assert_fail@plt+0x96c8>
   1aedc:	mov	r4, r0
   1aee0:	bl	116b0 <__errno_location@plt>
   1aee4:	mov	r6, r0
   1aee8:	ldr	r7, [r0]
   1aeec:	ldrb	r3, [r4, #4]
   1aef0:	cmp	r3, #0
   1aef4:	addne	r0, r4, #5
   1aef8:	moveq	r0, #0
   1aefc:	bl	1aba0 <__assert_fail@plt+0x934c>
   1af00:	cmp	r0, #0
   1af04:	beq	1af34 <__assert_fail@plt+0x96e0>
   1af08:	ldr	r7, [r6]
   1af0c:	mov	r5, #0
   1af10:	mov	r0, r4
   1af14:	bl	1adbc <__assert_fail@plt+0x9568>
   1af18:	str	r7, [r6]
   1af1c:	mov	r0, r5
   1af20:	ldrd	r4, [sp]
   1af24:	ldrd	r6, [sp, #8]
   1af28:	ldr	r8, [sp, #16]
   1af2c:	add	sp, sp, #20
   1af30:	pop	{pc}		; (ldr pc, [sp], #4)
   1af34:	bl	1153c <tzset@plt>
   1af38:	mov	r5, #1
   1af3c:	b	1af10 <__assert_fail@plt+0x96bc>
   1af40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1af44:	strd	r6, [sp, #8]
   1af48:	str	r8, [sp, #16]
   1af4c:	str	lr, [sp, #20]
   1af50:	mov	r6, r1
   1af54:	mov	r4, r2
   1af58:	subs	r5, r0, #0
   1af5c:	beq	1afc8 <__assert_fail@plt+0x9774>
   1af60:	mov	r0, r5
   1af64:	bl	1adf4 <__assert_fail@plt+0x95a0>
   1af68:	subs	r7, r0, #0
   1af6c:	moveq	r4, r7
   1af70:	beq	1afb0 <__assert_fail@plt+0x975c>
   1af74:	mov	r1, r4
   1af78:	mov	r0, r6
   1af7c:	bl	1150c <localtime_r@plt>
   1af80:	subs	r6, r0, #0
   1af84:	beq	1afdc <__assert_fail@plt+0x9788>
   1af88:	mov	r1, r4
   1af8c:	mov	r0, r5
   1af90:	bl	1ac88 <__assert_fail@plt+0x9434>
   1af94:	mov	r5, r0
   1af98:	mov	r0, r7
   1af9c:	bl	1aec0 <__assert_fail@plt+0x966c>
   1afa0:	and	r0, r0, r5
   1afa4:	uxtb	r0, r0
   1afa8:	cmp	r0, #0
   1afac:	moveq	r4, #0
   1afb0:	mov	r0, r4
   1afb4:	ldrd	r4, [sp]
   1afb8:	ldrd	r6, [sp, #8]
   1afbc:	ldr	r8, [sp, #16]
   1afc0:	add	sp, sp, #20
   1afc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1afc8:	mov	r1, r2
   1afcc:	mov	r0, r6
   1afd0:	bl	11440 <gmtime_r@plt>
   1afd4:	mov	r4, r0
   1afd8:	b	1afb0 <__assert_fail@plt+0x975c>
   1afdc:	mov	r0, r7
   1afe0:	bl	1aec0 <__assert_fail@plt+0x966c>
   1afe4:	mov	r4, r6
   1afe8:	b	1afb0 <__assert_fail@plt+0x975c>
   1afec:	strd	r4, [sp, #-20]!	; 0xffffffec
   1aff0:	strd	r6, [sp, #8]
   1aff4:	str	lr, [sp, #16]
   1aff8:	sub	sp, sp, #52	; 0x34
   1affc:	mov	r4, r1
   1b000:	subs	r5, r0, #0
   1b004:	beq	1b080 <__assert_fail@plt+0x982c>
   1b008:	mov	r0, r5
   1b00c:	bl	1adf4 <__assert_fail@plt+0x95a0>
   1b010:	subs	r7, r0, #0
   1b014:	beq	1b0fc <__assert_fail@plt+0x98a8>
   1b018:	ldr	r3, [r4]
   1b01c:	str	r3, [sp, #4]
   1b020:	ldr	r3, [r4, #4]
   1b024:	str	r3, [sp, #8]
   1b028:	ldr	r3, [r4, #8]
   1b02c:	str	r3, [sp, #12]
   1b030:	ldr	r3, [r4, #12]
   1b034:	str	r3, [sp, #16]
   1b038:	ldr	r3, [r4, #16]
   1b03c:	str	r3, [sp, #20]
   1b040:	ldr	r3, [r4, #20]
   1b044:	str	r3, [sp, #24]
   1b048:	mvn	r3, #0
   1b04c:	str	r3, [sp, #32]
   1b050:	ldr	r3, [r4, #32]
   1b054:	str	r3, [sp, #36]	; 0x24
   1b058:	add	r0, sp, #4
   1b05c:	bl	11488 <mktime@plt>
   1b060:	mov	r6, r0
   1b064:	ldr	r3, [sp, #32]
   1b068:	cmp	r3, #0
   1b06c:	bge	1b090 <__assert_fail@plt+0x983c>
   1b070:	mov	r0, r7
   1b074:	bl	1aec0 <__assert_fail@plt+0x966c>
   1b078:	mvn	r6, #0
   1b07c:	b	1b0e4 <__assert_fail@plt+0x9890>
   1b080:	mov	r0, r1
   1b084:	bl	117ac <timegm@plt>
   1b088:	mov	r6, r0
   1b08c:	b	1b0e4 <__assert_fail@plt+0x9890>
   1b090:	add	r1, sp, #4
   1b094:	mov	r0, r5
   1b098:	bl	1ac88 <__assert_fail@plt+0x9434>
   1b09c:	mov	r5, r0
   1b0a0:	mov	r0, r7
   1b0a4:	bl	1aec0 <__assert_fail@plt+0x966c>
   1b0a8:	and	r0, r0, r5
   1b0ac:	tst	r0, #255	; 0xff
   1b0b0:	beq	1b078 <__assert_fail@plt+0x9824>
   1b0b4:	ldrd	r2, [sp, #4]
   1b0b8:	strd	r2, [r4]
   1b0bc:	ldrd	r2, [sp, #12]
   1b0c0:	strd	r2, [r4, #8]
   1b0c4:	ldrd	r2, [sp, #20]
   1b0c8:	strd	r2, [r4, #16]
   1b0cc:	ldrd	r2, [sp, #28]
   1b0d0:	strd	r2, [r4, #24]
   1b0d4:	ldrd	r2, [sp, #36]	; 0x24
   1b0d8:	strd	r2, [r4, #32]
   1b0dc:	ldr	r3, [sp, #44]	; 0x2c
   1b0e0:	str	r3, [r4, #40]	; 0x28
   1b0e4:	mov	r0, r6
   1b0e8:	add	sp, sp, #52	; 0x34
   1b0ec:	ldrd	r4, [sp]
   1b0f0:	ldrd	r6, [sp, #8]
   1b0f4:	add	sp, sp, #16
   1b0f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0fc:	mvn	r6, #0
   1b100:	b	1b0e4 <__assert_fail@plt+0x9890>
   1b104:	strd	r4, [sp, #-16]!
   1b108:	str	r6, [sp, #8]
   1b10c:	str	lr, [sp, #12]
   1b110:	sub	sp, sp, #32
   1b114:	mov	r4, r0
   1b118:	ldr	r5, [sp, #48]	; 0x30
   1b11c:	ldr	r6, [sp, #52]	; 0x34
   1b120:	cmp	r1, #0
   1b124:	beq	1b1f0 <__assert_fail@plt+0x999c>
   1b128:	str	r3, [sp, #4]
   1b12c:	str	r2, [sp]
   1b130:	mov	r3, r1
   1b134:	movw	r2, #62556	; 0xf45c
   1b138:	movt	r2, #1
   1b13c:	mov	r1, #1
   1b140:	bl	11704 <__fprintf_chk@plt>
   1b144:	mov	r2, #5
   1b148:	movw	r1, #62576	; 0xf470
   1b14c:	movt	r1, #1
   1b150:	mov	r0, #0
   1b154:	bl	114e8 <dcgettext@plt>
   1b158:	movw	r3, #2022	; 0x7e6
   1b15c:	str	r3, [sp]
   1b160:	mov	r3, r0
   1b164:	movw	r2, #63304	; 0xf748
   1b168:	movt	r2, #1
   1b16c:	mov	r1, #1
   1b170:	mov	r0, r4
   1b174:	bl	11704 <__fprintf_chk@plt>
   1b178:	mov	r1, r4
   1b17c:	mov	r0, #10
   1b180:	bl	114dc <fputc_unlocked@plt>
   1b184:	mov	r2, #5
   1b188:	movw	r1, #62580	; 0xf474
   1b18c:	movt	r1, #1
   1b190:	mov	r0, #0
   1b194:	bl	114e8 <dcgettext@plt>
   1b198:	movw	r3, #62752	; 0xf520
   1b19c:	movt	r3, #1
   1b1a0:	mov	r2, r0
   1b1a4:	mov	r1, #1
   1b1a8:	mov	r0, r4
   1b1ac:	bl	11704 <__fprintf_chk@plt>
   1b1b0:	mov	r1, r4
   1b1b4:	mov	r0, #10
   1b1b8:	bl	114dc <fputc_unlocked@plt>
   1b1bc:	cmp	r6, #9
   1b1c0:	ldrls	pc, [pc, r6, lsl #2]
   1b1c4:	b	1b4c8 <__assert_fail@plt+0x9c74>
   1b1c8:	andeq	fp, r1, r4, lsr r2
   1b1cc:	andeq	fp, r1, ip, lsl #4
   1b1d0:	andeq	fp, r1, r8, asr #4
   1b1d4:	andeq	fp, r1, ip, ror r2
   1b1d8:			; <UNDEFINED> instruction: 0x0001b2b8
   1b1dc:	strdeq	fp, [r1], -ip
   1b1e0:	andeq	fp, r1, r8, asr #6
   1b1e4:	muleq	r1, ip, r3
   1b1e8:	strdeq	fp, [r1], -r8
   1b1ec:	andeq	fp, r1, ip, asr r4
   1b1f0:	str	r3, [sp]
   1b1f4:	mov	r3, r2
   1b1f8:	movw	r2, #62568	; 0xf468
   1b1fc:	movt	r2, #1
   1b200:	mov	r1, #1
   1b204:	bl	11704 <__fprintf_chk@plt>
   1b208:	b	1b144 <__assert_fail@plt+0x98f0>
   1b20c:	mov	r2, #5
   1b210:	movw	r1, #62788	; 0xf544
   1b214:	movt	r1, #1
   1b218:	mov	r0, #0
   1b21c:	bl	114e8 <dcgettext@plt>
   1b220:	ldr	r3, [r5]
   1b224:	mov	r2, r0
   1b228:	mov	r1, #1
   1b22c:	mov	r0, r4
   1b230:	bl	11704 <__fprintf_chk@plt>
   1b234:	add	sp, sp, #32
   1b238:	ldrd	r4, [sp]
   1b23c:	ldr	r6, [sp, #8]
   1b240:	add	sp, sp, #12
   1b244:	pop	{pc}		; (ldr pc, [sp], #4)
   1b248:	mov	r2, #5
   1b24c:	movw	r1, #62804	; 0xf554
   1b250:	movt	r1, #1
   1b254:	mov	r0, #0
   1b258:	bl	114e8 <dcgettext@plt>
   1b25c:	ldr	r3, [r5, #4]
   1b260:	str	r3, [sp]
   1b264:	ldr	r3, [r5]
   1b268:	mov	r2, r0
   1b26c:	mov	r1, #1
   1b270:	mov	r0, r4
   1b274:	bl	11704 <__fprintf_chk@plt>
   1b278:	b	1b234 <__assert_fail@plt+0x99e0>
   1b27c:	mov	r2, #5
   1b280:	movw	r1, #62828	; 0xf56c
   1b284:	movt	r1, #1
   1b288:	mov	r0, #0
   1b28c:	bl	114e8 <dcgettext@plt>
   1b290:	ldr	r3, [r5, #8]
   1b294:	str	r3, [sp, #4]
   1b298:	ldr	r3, [r5, #4]
   1b29c:	str	r3, [sp]
   1b2a0:	ldr	r3, [r5]
   1b2a4:	mov	r2, r0
   1b2a8:	mov	r1, #1
   1b2ac:	mov	r0, r4
   1b2b0:	bl	11704 <__fprintf_chk@plt>
   1b2b4:	b	1b234 <__assert_fail@plt+0x99e0>
   1b2b8:	mov	r2, #5
   1b2bc:	movw	r1, #62856	; 0xf588
   1b2c0:	movt	r1, #1
   1b2c4:	mov	r0, #0
   1b2c8:	bl	114e8 <dcgettext@plt>
   1b2cc:	ldr	r3, [r5, #12]
   1b2d0:	str	r3, [sp, #8]
   1b2d4:	ldr	r3, [r5, #8]
   1b2d8:	str	r3, [sp, #4]
   1b2dc:	ldr	r3, [r5, #4]
   1b2e0:	str	r3, [sp]
   1b2e4:	ldr	r3, [r5]
   1b2e8:	mov	r2, r0
   1b2ec:	mov	r1, #1
   1b2f0:	mov	r0, r4
   1b2f4:	bl	11704 <__fprintf_chk@plt>
   1b2f8:	b	1b234 <__assert_fail@plt+0x99e0>
   1b2fc:	mov	r2, #5
   1b300:	movw	r1, #62888	; 0xf5a8
   1b304:	movt	r1, #1
   1b308:	mov	r0, #0
   1b30c:	bl	114e8 <dcgettext@plt>
   1b310:	ldr	r3, [r5, #16]
   1b314:	str	r3, [sp, #12]
   1b318:	ldr	r3, [r5, #12]
   1b31c:	str	r3, [sp, #8]
   1b320:	ldr	r3, [r5, #8]
   1b324:	str	r3, [sp, #4]
   1b328:	ldr	r3, [r5, #4]
   1b32c:	str	r3, [sp]
   1b330:	ldr	r3, [r5]
   1b334:	mov	r2, r0
   1b338:	mov	r1, #1
   1b33c:	mov	r0, r4
   1b340:	bl	11704 <__fprintf_chk@plt>
   1b344:	b	1b234 <__assert_fail@plt+0x99e0>
   1b348:	mov	r2, #5
   1b34c:	movw	r1, #62924	; 0xf5cc
   1b350:	movt	r1, #1
   1b354:	mov	r0, #0
   1b358:	bl	114e8 <dcgettext@plt>
   1b35c:	ldr	r3, [r5, #20]
   1b360:	str	r3, [sp, #16]
   1b364:	ldr	r3, [r5, #16]
   1b368:	str	r3, [sp, #12]
   1b36c:	ldr	r3, [r5, #12]
   1b370:	str	r3, [sp, #8]
   1b374:	ldr	r3, [r5, #8]
   1b378:	str	r3, [sp, #4]
   1b37c:	ldr	r3, [r5, #4]
   1b380:	str	r3, [sp]
   1b384:	ldr	r3, [r5]
   1b388:	mov	r2, r0
   1b38c:	mov	r1, #1
   1b390:	mov	r0, r4
   1b394:	bl	11704 <__fprintf_chk@plt>
   1b398:	b	1b234 <__assert_fail@plt+0x99e0>
   1b39c:	mov	r2, #5
   1b3a0:	movw	r1, #62964	; 0xf5f4
   1b3a4:	movt	r1, #1
   1b3a8:	mov	r0, #0
   1b3ac:	bl	114e8 <dcgettext@plt>
   1b3b0:	ldr	r3, [r5, #24]
   1b3b4:	str	r3, [sp, #20]
   1b3b8:	ldr	r3, [r5, #20]
   1b3bc:	str	r3, [sp, #16]
   1b3c0:	ldr	r3, [r5, #16]
   1b3c4:	str	r3, [sp, #12]
   1b3c8:	ldr	r3, [r5, #12]
   1b3cc:	str	r3, [sp, #8]
   1b3d0:	ldr	r3, [r5, #8]
   1b3d4:	str	r3, [sp, #4]
   1b3d8:	ldr	r3, [r5, #4]
   1b3dc:	str	r3, [sp]
   1b3e0:	ldr	r3, [r5]
   1b3e4:	mov	r2, r0
   1b3e8:	mov	r1, #1
   1b3ec:	mov	r0, r4
   1b3f0:	bl	11704 <__fprintf_chk@plt>
   1b3f4:	b	1b234 <__assert_fail@plt+0x99e0>
   1b3f8:	mov	r2, #5
   1b3fc:	movw	r1, #63008	; 0xf620
   1b400:	movt	r1, #1
   1b404:	mov	r0, #0
   1b408:	bl	114e8 <dcgettext@plt>
   1b40c:	ldr	r3, [r5, #28]
   1b410:	str	r3, [sp, #24]
   1b414:	ldr	r3, [r5, #24]
   1b418:	str	r3, [sp, #20]
   1b41c:	ldr	r3, [r5, #20]
   1b420:	str	r3, [sp, #16]
   1b424:	ldr	r3, [r5, #16]
   1b428:	str	r3, [sp, #12]
   1b42c:	ldr	r3, [r5, #12]
   1b430:	str	r3, [sp, #8]
   1b434:	ldr	r3, [r5, #8]
   1b438:	str	r3, [sp, #4]
   1b43c:	ldr	r3, [r5, #4]
   1b440:	str	r3, [sp]
   1b444:	ldr	r3, [r5]
   1b448:	mov	r2, r0
   1b44c:	mov	r1, #1
   1b450:	mov	r0, r4
   1b454:	bl	11704 <__fprintf_chk@plt>
   1b458:	b	1b234 <__assert_fail@plt+0x99e0>
   1b45c:	mov	r2, #5
   1b460:	movw	r1, #63056	; 0xf650
   1b464:	movt	r1, #1
   1b468:	mov	r0, #0
   1b46c:	bl	114e8 <dcgettext@plt>
   1b470:	ldr	r3, [r5, #32]
   1b474:	str	r3, [sp, #28]
   1b478:	ldr	r3, [r5, #28]
   1b47c:	str	r3, [sp, #24]
   1b480:	ldr	r3, [r5, #24]
   1b484:	str	r3, [sp, #20]
   1b488:	ldr	r3, [r5, #20]
   1b48c:	str	r3, [sp, #16]
   1b490:	ldr	r3, [r5, #16]
   1b494:	str	r3, [sp, #12]
   1b498:	ldr	r3, [r5, #12]
   1b49c:	str	r3, [sp, #8]
   1b4a0:	ldr	r3, [r5, #8]
   1b4a4:	str	r3, [sp, #4]
   1b4a8:	ldr	r3, [r5, #4]
   1b4ac:	str	r3, [sp]
   1b4b0:	ldr	r3, [r5]
   1b4b4:	mov	r2, r0
   1b4b8:	mov	r1, #1
   1b4bc:	mov	r0, r4
   1b4c0:	bl	11704 <__fprintf_chk@plt>
   1b4c4:	b	1b234 <__assert_fail@plt+0x99e0>
   1b4c8:	mov	r2, #5
   1b4cc:	movw	r1, #63108	; 0xf684
   1b4d0:	movt	r1, #1
   1b4d4:	mov	r0, #0
   1b4d8:	bl	114e8 <dcgettext@plt>
   1b4dc:	ldr	r3, [r5, #32]
   1b4e0:	str	r3, [sp, #28]
   1b4e4:	ldr	r3, [r5, #28]
   1b4e8:	str	r3, [sp, #24]
   1b4ec:	ldr	r3, [r5, #24]
   1b4f0:	str	r3, [sp, #20]
   1b4f4:	ldr	r3, [r5, #20]
   1b4f8:	str	r3, [sp, #16]
   1b4fc:	ldr	r3, [r5, #16]
   1b500:	str	r3, [sp, #12]
   1b504:	ldr	r3, [r5, #12]
   1b508:	str	r3, [sp, #8]
   1b50c:	ldr	r3, [r5, #8]
   1b510:	str	r3, [sp, #4]
   1b514:	ldr	r3, [r5, #4]
   1b518:	str	r3, [sp]
   1b51c:	ldr	r3, [r5]
   1b520:	mov	r2, r0
   1b524:	mov	r1, #1
   1b528:	mov	r0, r4
   1b52c:	bl	11704 <__fprintf_chk@plt>
   1b530:	b	1b234 <__assert_fail@plt+0x99e0>
   1b534:	strd	r4, [sp, #-12]!
   1b538:	str	lr, [sp, #8]
   1b53c:	sub	sp, sp, #12
   1b540:	ldr	r5, [sp, #24]
   1b544:	ldr	ip, [r5]
   1b548:	cmp	ip, #0
   1b54c:	beq	1b584 <__assert_fail@plt+0x9d30>
   1b550:	mov	lr, r5
   1b554:	mov	ip, #0
   1b558:	add	ip, ip, #1
   1b55c:	ldr	r4, [lr, #4]!
   1b560:	cmp	r4, #0
   1b564:	bne	1b558 <__assert_fail@plt+0x9d04>
   1b568:	str	ip, [sp, #4]
   1b56c:	str	r5, [sp]
   1b570:	bl	1b104 <__assert_fail@plt+0x98b0>
   1b574:	add	sp, sp, #12
   1b578:	ldrd	r4, [sp]
   1b57c:	add	sp, sp, #8
   1b580:	pop	{pc}		; (ldr pc, [sp], #4)
   1b584:	mov	ip, #0
   1b588:	b	1b568 <__assert_fail@plt+0x9d14>
   1b58c:	strd	r4, [sp, #-12]!
   1b590:	str	lr, [sp, #8]
   1b594:	sub	sp, sp, #52	; 0x34
   1b598:	ldr	r5, [sp, #64]	; 0x40
   1b59c:	add	r4, sp, #8
   1b5a0:	mov	ip, #0
   1b5a4:	ldr	lr, [r5], #4
   1b5a8:	str	lr, [r4], #4
   1b5ac:	cmp	lr, #0
   1b5b0:	beq	1b5c0 <__assert_fail@plt+0x9d6c>
   1b5b4:	add	ip, ip, #1
   1b5b8:	cmp	ip, #10
   1b5bc:	bne	1b5a4 <__assert_fail@plt+0x9d50>
   1b5c0:	str	ip, [sp, #4]
   1b5c4:	add	ip, sp, #8
   1b5c8:	str	ip, [sp]
   1b5cc:	bl	1b104 <__assert_fail@plt+0x98b0>
   1b5d0:	add	sp, sp, #52	; 0x34
   1b5d4:	ldrd	r4, [sp]
   1b5d8:	add	sp, sp, #8
   1b5dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5e0:	push	{r3}		; (str r3, [sp, #-4]!)
   1b5e4:	push	{lr}		; (str lr, [sp, #-4]!)
   1b5e8:	sub	sp, sp, #16
   1b5ec:	add	r3, sp, #24
   1b5f0:	str	r3, [sp, #12]
   1b5f4:	str	r3, [sp]
   1b5f8:	ldr	r3, [sp, #20]
   1b5fc:	bl	1b58c <__assert_fail@plt+0x9d38>
   1b600:	add	sp, sp, #16
   1b604:	pop	{lr}		; (ldr lr, [sp], #4)
   1b608:	add	sp, sp, #4
   1b60c:	bx	lr
   1b610:	str	r4, [sp, #-8]!
   1b614:	str	lr, [sp, #4]
   1b618:	movw	r3, #492	; 0x1ec
   1b61c:	movt	r3, #3
   1b620:	ldr	r1, [r3]
   1b624:	mov	r0, #10
   1b628:	bl	114dc <fputc_unlocked@plt>
   1b62c:	mov	r2, #5
   1b630:	movw	r1, #63168	; 0xf6c0
   1b634:	movt	r1, #1
   1b638:	mov	r0, #0
   1b63c:	bl	114e8 <dcgettext@plt>
   1b640:	movw	r2, #63188	; 0xf6d4
   1b644:	movt	r2, #1
   1b648:	mov	r1, r0
   1b64c:	mov	r0, #1
   1b650:	bl	116ec <__printf_chk@plt>
   1b654:	mov	r2, #5
   1b658:	movw	r1, #63212	; 0xf6ec
   1b65c:	movt	r1, #1
   1b660:	mov	r0, #0
   1b664:	bl	114e8 <dcgettext@plt>
   1b668:	movw	r3, #60940	; 0xee0c
   1b66c:	movt	r3, #1
   1b670:	movw	r2, #60980	; 0xee34
   1b674:	movt	r2, #1
   1b678:	mov	r1, r0
   1b67c:	mov	r0, #1
   1b680:	bl	116ec <__printf_chk@plt>
   1b684:	mov	r2, #5
   1b688:	movw	r1, #63232	; 0xf700
   1b68c:	movt	r1, #1
   1b690:	mov	r0, #0
   1b694:	bl	114e8 <dcgettext@plt>
   1b698:	movw	r2, #63272	; 0xf728
   1b69c:	movt	r2, #1
   1b6a0:	mov	r1, r0
   1b6a4:	mov	r0, #1
   1b6a8:	bl	116ec <__printf_chk@plt>
   1b6ac:	ldr	r4, [sp]
   1b6b0:	add	sp, sp, #4
   1b6b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6b8:	str	r4, [sp, #-8]!
   1b6bc:	str	lr, [sp, #4]
   1b6c0:	bl	1bc70 <__assert_fail@plt+0xa41c>
   1b6c4:	cmp	r0, #0
   1b6c8:	beq	1b6d8 <__assert_fail@plt+0x9e84>
   1b6cc:	ldr	r4, [sp]
   1b6d0:	add	sp, sp, #4
   1b6d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6d8:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1b6dc:	str	r4, [sp, #-8]!
   1b6e0:	str	lr, [sp, #4]
   1b6e4:	bl	1bc70 <__assert_fail@plt+0xa41c>
   1b6e8:	cmp	r0, #0
   1b6ec:	beq	1b6fc <__assert_fail@plt+0x9ea8>
   1b6f0:	ldr	r4, [sp]
   1b6f4:	add	sp, sp, #4
   1b6f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6fc:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1b700:	str	r4, [sp, #-8]!
   1b704:	str	lr, [sp, #4]
   1b708:	bl	1b6b8 <__assert_fail@plt+0x9e64>
   1b70c:	ldr	r4, [sp]
   1b710:	add	sp, sp, #4
   1b714:	pop	{pc}		; (ldr pc, [sp], #4)
   1b718:	strd	r4, [sp, #-16]!
   1b71c:	str	r6, [sp, #8]
   1b720:	str	lr, [sp, #12]
   1b724:	mov	r5, r0
   1b728:	mov	r4, r1
   1b72c:	bl	1bcac <__assert_fail@plt+0xa458>
   1b730:	cmp	r0, #0
   1b734:	beq	1b748 <__assert_fail@plt+0x9ef4>
   1b738:	ldrd	r4, [sp]
   1b73c:	ldr	r6, [sp, #8]
   1b740:	add	sp, sp, #12
   1b744:	pop	{pc}		; (ldr pc, [sp], #4)
   1b748:	adds	r4, r4, #0
   1b74c:	movne	r4, #1
   1b750:	cmp	r5, #0
   1b754:	moveq	r4, #1
   1b758:	cmp	r4, #0
   1b75c:	beq	1b738 <__assert_fail@plt+0x9ee4>
   1b760:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1b764:	str	r4, [sp, #-8]!
   1b768:	str	lr, [sp, #4]
   1b76c:	cmp	r1, #0
   1b770:	orreq	r1, r1, #1
   1b774:	bl	1bcac <__assert_fail@plt+0xa458>
   1b778:	cmp	r0, #0
   1b77c:	beq	1b78c <__assert_fail@plt+0x9f38>
   1b780:	ldr	r4, [sp]
   1b784:	add	sp, sp, #4
   1b788:	pop	{pc}		; (ldr pc, [sp], #4)
   1b78c:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1b790:	strd	r4, [sp, #-16]!
   1b794:	str	r6, [sp, #8]
   1b798:	str	lr, [sp, #12]
   1b79c:	mov	r4, r0
   1b7a0:	mov	r6, r1
   1b7a4:	mov	r5, r2
   1b7a8:	bl	1cddc <__assert_fail@plt+0xb588>
   1b7ac:	cmp	r0, #0
   1b7b0:	beq	1b7c4 <__assert_fail@plt+0x9f70>
   1b7b4:	ldrd	r4, [sp]
   1b7b8:	ldr	r6, [sp, #8]
   1b7bc:	add	sp, sp, #12
   1b7c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7c4:	cmp	r4, #0
   1b7c8:	beq	1b7d8 <__assert_fail@plt+0x9f84>
   1b7cc:	cmp	r6, #0
   1b7d0:	cmpne	r5, #0
   1b7d4:	beq	1b7b4 <__assert_fail@plt+0x9f60>
   1b7d8:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1b7dc:	str	r4, [sp, #-8]!
   1b7e0:	str	lr, [sp, #4]
   1b7e4:	bl	1b790 <__assert_fail@plt+0x9f3c>
   1b7e8:	ldr	r4, [sp]
   1b7ec:	add	sp, sp, #4
   1b7f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7f4:	str	r4, [sp, #-8]!
   1b7f8:	str	lr, [sp, #4]
   1b7fc:	mov	ip, r1
   1b800:	mov	r3, r2
   1b804:	cmp	r2, #0
   1b808:	cmpne	r1, #0
   1b80c:	moveq	r3, #1
   1b810:	moveq	ip, r3
   1b814:	mov	r2, r3
   1b818:	mov	r1, ip
   1b81c:	bl	1cddc <__assert_fail@plt+0xb588>
   1b820:	cmp	r0, #0
   1b824:	beq	1b834 <__assert_fail@plt+0x9fe0>
   1b828:	ldr	r4, [sp]
   1b82c:	add	sp, sp, #4
   1b830:	pop	{pc}		; (ldr pc, [sp], #4)
   1b834:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1b838:	str	r4, [sp, #-8]!
   1b83c:	str	lr, [sp, #4]
   1b840:	mov	r2, r1
   1b844:	mov	r1, r0
   1b848:	mov	r0, #0
   1b84c:	bl	1b790 <__assert_fail@plt+0x9f3c>
   1b850:	ldr	r4, [sp]
   1b854:	add	sp, sp, #4
   1b858:	pop	{pc}		; (ldr pc, [sp], #4)
   1b85c:	str	r4, [sp, #-8]!
   1b860:	str	lr, [sp, #4]
   1b864:	mov	r2, r1
   1b868:	mov	r1, r0
   1b86c:	mov	r0, #0
   1b870:	bl	1b7f4 <__assert_fail@plt+0x9fa0>
   1b874:	ldr	r4, [sp]
   1b878:	add	sp, sp, #4
   1b87c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b880:	strd	r4, [sp, #-16]!
   1b884:	str	r6, [sp, #8]
   1b888:	str	lr, [sp, #12]
   1b88c:	mov	r5, r1
   1b890:	ldr	r4, [r1]
   1b894:	cmp	r0, #0
   1b898:	beq	1b8c8 <__assert_fail@plt+0xa074>
   1b89c:	lsr	r3, r4, #1
   1b8a0:	add	r3, r3, #1
   1b8a4:	adds	r4, r4, r3
   1b8a8:	bcs	1b8e4 <__assert_fail@plt+0xa090>
   1b8ac:	mov	r1, r4
   1b8b0:	bl	1b790 <__assert_fail@plt+0x9f3c>
   1b8b4:	str	r4, [r5]
   1b8b8:	ldrd	r4, [sp]
   1b8bc:	ldr	r6, [sp, #8]
   1b8c0:	add	sp, sp, #12
   1b8c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8c8:	cmp	r4, #0
   1b8cc:	bne	1b8ac <__assert_fail@plt+0xa058>
   1b8d0:	mov	r4, #64	; 0x40
   1b8d4:	udiv	r4, r4, r2
   1b8d8:	cmp	r2, #64	; 0x40
   1b8dc:	addhi	r4, r4, #1
   1b8e0:	b	1b8ac <__assert_fail@plt+0xa058>
   1b8e4:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1b8e8:	str	r4, [sp, #-8]!
   1b8ec:	str	lr, [sp, #4]
   1b8f0:	mov	r2, #1
   1b8f4:	bl	1b880 <__assert_fail@plt+0xa02c>
   1b8f8:	ldr	r4, [sp]
   1b8fc:	add	sp, sp, #4
   1b900:	pop	{pc}		; (ldr pc, [sp], #4)
   1b904:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b908:	strd	r6, [sp, #8]
   1b90c:	str	r8, [sp, #16]
   1b910:	str	lr, [sp, #20]
   1b914:	mov	r5, r1
   1b918:	ldr	lr, [sp, #24]
   1b91c:	ldr	ip, [r1]
   1b920:	asr	r4, ip, #1
   1b924:	adds	r4, ip, r4
   1b928:	movvs	r1, #1
   1b92c:	movvc	r1, #0
   1b930:	cmp	r1, #0
   1b934:	mvnne	r4, #-2147483648	; 0x80000000
   1b938:	mvn	r8, r3
   1b93c:	lsr	r8, r8, #31
   1b940:	cmp	r3, r4
   1b944:	movge	r1, #0
   1b948:	andlt	r1, r8, #1
   1b94c:	cmp	r1, #0
   1b950:	movne	r4, r3
   1b954:	smull	r6, r7, r4, lr
   1b958:	asr	r1, r6, #31
   1b95c:	cmp	r1, r7
   1b960:	bne	1b978 <__assert_fail@plt+0xa124>
   1b964:	mov	r1, r6
   1b968:	cmp	r6, #63	; 0x3f
   1b96c:	movle	r1, #64	; 0x40
   1b970:	ble	1b97c <__assert_fail@plt+0xa128>
   1b974:	b	1b988 <__assert_fail@plt+0xa134>
   1b978:	mvn	r1, #-2147483648	; 0x80000000
   1b97c:	sdiv	r4, r1, lr
   1b980:	mls	r6, lr, r4, r1
   1b984:	sub	r1, r1, r6
   1b988:	cmp	r0, #0
   1b98c:	moveq	r6, #0
   1b990:	streq	r6, [r5]
   1b994:	sub	r6, r4, ip
   1b998:	cmp	r6, r2
   1b99c:	bge	1b9d4 <__assert_fail@plt+0xa180>
   1b9a0:	adds	r2, ip, r2
   1b9a4:	mov	r4, r2
   1b9a8:	bvs	1b9f0 <__assert_fail@plt+0xa19c>
   1b9ac:	cmp	r2, r3
   1b9b0:	movle	r3, #0
   1b9b4:	andgt	r3, r8, #1
   1b9b8:	cmp	r3, #0
   1b9bc:	bne	1b9f0 <__assert_fail@plt+0xa19c>
   1b9c0:	smull	r2, r3, r2, lr
   1b9c4:	asr	ip, r2, #31
   1b9c8:	mov	r1, r2
   1b9cc:	cmp	ip, r3
   1b9d0:	bne	1b9f0 <__assert_fail@plt+0xa19c>
   1b9d4:	bl	1b718 <__assert_fail@plt+0x9ec4>
   1b9d8:	str	r4, [r5]
   1b9dc:	ldrd	r4, [sp]
   1b9e0:	ldrd	r6, [sp, #8]
   1b9e4:	ldr	r8, [sp, #16]
   1b9e8:	add	sp, sp, #20
   1b9ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9f0:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1b9f4:	str	r4, [sp, #-8]!
   1b9f8:	str	lr, [sp, #4]
   1b9fc:	bl	1bbfc <__assert_fail@plt+0xa3a8>
   1ba00:	cmp	r0, #0
   1ba04:	beq	1ba14 <__assert_fail@plt+0xa1c0>
   1ba08:	ldr	r4, [sp]
   1ba0c:	add	sp, sp, #4
   1ba10:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba14:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1ba18:	str	r4, [sp, #-8]!
   1ba1c:	str	lr, [sp, #4]
   1ba20:	mov	r1, #1
   1ba24:	bl	1b9f4 <__assert_fail@plt+0xa1a0>
   1ba28:	ldr	r4, [sp]
   1ba2c:	add	sp, sp, #4
   1ba30:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba34:	str	r4, [sp, #-8]!
   1ba38:	str	lr, [sp, #4]
   1ba3c:	bl	1bbfc <__assert_fail@plt+0xa3a8>
   1ba40:	cmp	r0, #0
   1ba44:	beq	1ba54 <__assert_fail@plt+0xa200>
   1ba48:	ldr	r4, [sp]
   1ba4c:	add	sp, sp, #4
   1ba50:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba54:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1ba58:	str	r4, [sp, #-8]!
   1ba5c:	str	lr, [sp, #4]
   1ba60:	mov	r1, #1
   1ba64:	bl	1ba34 <__assert_fail@plt+0xa1e0>
   1ba68:	ldr	r4, [sp]
   1ba6c:	add	sp, sp, #4
   1ba70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba74:	strd	r4, [sp, #-16]!
   1ba78:	str	r6, [sp, #8]
   1ba7c:	str	lr, [sp, #12]
   1ba80:	mov	r5, r0
   1ba84:	mov	r4, r1
   1ba88:	mov	r0, r1
   1ba8c:	bl	1b6b8 <__assert_fail@plt+0x9e64>
   1ba90:	mov	r2, r4
   1ba94:	mov	r1, r5
   1ba98:	bl	114b8 <memcpy@plt>
   1ba9c:	ldrd	r4, [sp]
   1baa0:	ldr	r6, [sp, #8]
   1baa4:	add	sp, sp, #12
   1baa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1baac:	strd	r4, [sp, #-16]!
   1bab0:	str	r6, [sp, #8]
   1bab4:	str	lr, [sp, #12]
   1bab8:	mov	r5, r0
   1babc:	mov	r4, r1
   1bac0:	mov	r0, r1
   1bac4:	bl	1b6dc <__assert_fail@plt+0x9e88>
   1bac8:	mov	r2, r4
   1bacc:	mov	r1, r5
   1bad0:	bl	114b8 <memcpy@plt>
   1bad4:	ldrd	r4, [sp]
   1bad8:	ldr	r6, [sp, #8]
   1badc:	add	sp, sp, #12
   1bae0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bae4:	strd	r4, [sp, #-16]!
   1bae8:	str	r6, [sp, #8]
   1baec:	str	lr, [sp, #12]
   1baf0:	mov	r5, r0
   1baf4:	mov	r4, r1
   1baf8:	add	r0, r1, #1
   1bafc:	bl	1b6dc <__assert_fail@plt+0x9e88>
   1bb00:	mov	r2, #0
   1bb04:	strb	r2, [r0, r4]
   1bb08:	mov	r2, r4
   1bb0c:	mov	r1, r5
   1bb10:	bl	114b8 <memcpy@plt>
   1bb14:	ldrd	r4, [sp]
   1bb18:	ldr	r6, [sp, #8]
   1bb1c:	add	sp, sp, #12
   1bb20:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb24:	str	r4, [sp, #-8]!
   1bb28:	str	lr, [sp, #4]
   1bb2c:	mov	r4, r0
   1bb30:	bl	11674 <strlen@plt>
   1bb34:	add	r1, r0, #1
   1bb38:	mov	r0, r4
   1bb3c:	bl	1ba74 <__assert_fail@plt+0xa220>
   1bb40:	ldr	r4, [sp]
   1bb44:	add	sp, sp, #4
   1bb48:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb4c:	str	r4, [sp, #-8]!
   1bb50:	str	lr, [sp, #4]
   1bb54:	movw	r3, #400	; 0x190
   1bb58:	movt	r3, #3
   1bb5c:	ldr	r4, [r3]
   1bb60:	mov	r2, #5
   1bb64:	movw	r1, #63352	; 0xf778
   1bb68:	movt	r1, #1
   1bb6c:	mov	r0, #0
   1bb70:	bl	114e8 <dcgettext@plt>
   1bb74:	mov	r3, r0
   1bb78:	movw	r2, #60652	; 0xecec
   1bb7c:	movt	r2, #1
   1bb80:	mov	r1, #0
   1bb84:	mov	r0, r4
   1bb88:	bl	115a8 <error@plt>
   1bb8c:	bl	11824 <abort@plt>
   1bb90:	str	r4, [sp, #-8]!
   1bb94:	str	lr, [sp, #4]
   1bb98:	mov	r1, #0
   1bb9c:	mov	r0, r1
   1bba0:	bl	11650 <getcwd@plt>
   1bba4:	subs	r4, r0, #0
   1bba8:	beq	1bbbc <__assert_fail@plt+0xa368>
   1bbac:	mov	r0, r4
   1bbb0:	ldr	r4, [sp]
   1bbb4:	add	sp, sp, #4
   1bbb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbbc:	bl	116b0 <__errno_location@plt>
   1bbc0:	ldr	r3, [r0]
   1bbc4:	cmp	r3, #12
   1bbc8:	bne	1bbac <__assert_fail@plt+0xa358>
   1bbcc:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1bbd0:	push	{r0, r1, r2, r3}
   1bbd4:	push	{lr}		; (str lr, [sp, #-4]!)
   1bbd8:	sub	sp, sp, #12
   1bbdc:	add	r1, sp, #20
   1bbe0:	str	r1, [sp, #4]
   1bbe4:	ldr	r0, [sp, #16]
   1bbe8:	bl	1cf74 <__assert_fail@plt+0xb720>
   1bbec:	add	sp, sp, #12
   1bbf0:	pop	{lr}		; (ldr lr, [sp], #4)
   1bbf4:	add	sp, sp, #16
   1bbf8:	bx	lr
   1bbfc:	strd	r4, [sp, #-16]!
   1bc00:	str	r6, [sp, #8]
   1bc04:	str	lr, [sp, #12]
   1bc08:	cmp	r1, #0
   1bc0c:	cmpne	r0, #0
   1bc10:	beq	1bc4c <__assert_fail@plt+0xa3f8>
   1bc14:	mov	r2, r0
   1bc18:	mov	r3, r1
   1bc1c:	umull	r4, r5, r0, r1
   1bc20:	adds	r1, r5, #0
   1bc24:	movne	r1, #1
   1bc28:	cmp	r4, #0
   1bc2c:	movlt	r1, #1
   1bc30:	cmp	r1, #0
   1bc34:	beq	1bc54 <__assert_fail@plt+0xa400>
   1bc38:	bl	116b0 <__errno_location@plt>
   1bc3c:	mov	r3, #12
   1bc40:	str	r3, [r0]
   1bc44:	mov	r0, #0
   1bc48:	b	1bc60 <__assert_fail@plt+0xa40c>
   1bc4c:	mov	r3, #1
   1bc50:	mov	r2, r3
   1bc54:	mov	r1, r3
   1bc58:	mov	r0, r2
   1bc5c:	bl	1141c <calloc@plt>
   1bc60:	ldrd	r4, [sp]
   1bc64:	ldr	r6, [sp, #8]
   1bc68:	add	sp, sp, #12
   1bc6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc70:	str	r4, [sp, #-8]!
   1bc74:	str	lr, [sp, #4]
   1bc78:	cmp	r0, #0
   1bc7c:	beq	1bc98 <__assert_fail@plt+0xa444>
   1bc80:	bge	1bc9c <__assert_fail@plt+0xa448>
   1bc84:	bl	116b0 <__errno_location@plt>
   1bc88:	mov	r3, #12
   1bc8c:	str	r3, [r0]
   1bc90:	mov	r0, #0
   1bc94:	b	1bca0 <__assert_fail@plt+0xa44c>
   1bc98:	mov	r0, #1
   1bc9c:	bl	115e4 <malloc@plt>
   1bca0:	ldr	r4, [sp]
   1bca4:	add	sp, sp, #4
   1bca8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcac:	str	r4, [sp, #-8]!
   1bcb0:	str	lr, [sp, #4]
   1bcb4:	cmp	r0, #0
   1bcb8:	beq	1bcdc <__assert_fail@plt+0xa488>
   1bcbc:	cmp	r1, #0
   1bcc0:	beq	1bce8 <__assert_fail@plt+0xa494>
   1bcc4:	cmp	r1, #0
   1bcc8:	blt	1bcf4 <__assert_fail@plt+0xa4a0>
   1bccc:	bl	114f4 <realloc@plt>
   1bcd0:	ldr	r4, [sp]
   1bcd4:	add	sp, sp, #4
   1bcd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcdc:	mov	r0, r1
   1bce0:	bl	1bc70 <__assert_fail@plt+0xa41c>
   1bce4:	b	1bcd0 <__assert_fail@plt+0xa47c>
   1bce8:	bl	15fdc <__assert_fail@plt+0x4788>
   1bcec:	mov	r0, #0
   1bcf0:	b	1bcd0 <__assert_fail@plt+0xa47c>
   1bcf4:	bl	116b0 <__errno_location@plt>
   1bcf8:	mov	r3, #12
   1bcfc:	str	r3, [r0]
   1bd00:	mov	r0, #0
   1bd04:	b	1bcd0 <__assert_fail@plt+0xa47c>
   1bd08:	cmp	r1, #2
   1bd0c:	bls	1bd3c <__assert_fail@plt+0xa4e8>
   1bd10:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1bd14:	strd	r6, [sp, #8]
   1bd18:	strd	r8, [sp, #16]
   1bd1c:	str	lr, [sp, #24]
   1bd20:	mov	r7, #1
   1bd24:	mov	ip, r7
   1bd28:	mov	lr, #0
   1bd2c:	mvn	r4, #0
   1bd30:	mov	r3, r7
   1bd34:	mov	r8, r7
   1bd38:	b	1bd70 <__assert_fail@plt+0xa51c>
   1bd3c:	mov	r3, #1
   1bd40:	str	r3, [r2]
   1bd44:	sub	r0, r1, #1
   1bd48:	bx	lr
   1bd4c:	cmp	r6, r5
   1bd50:	beq	1bd94 <__assert_fail@plt+0xa540>
   1bd54:	mov	r4, lr
   1bd58:	add	lr, lr, #1
   1bd5c:	mov	r7, r8
   1bd60:	mov	ip, r8
   1bd64:	add	r3, ip, lr
   1bd68:	cmp	r3, r1
   1bd6c:	bcs	1bda8 <__assert_fail@plt+0xa554>
   1bd70:	ldrb	r6, [r0, r3]
   1bd74:	add	r5, r0, ip
   1bd78:	ldrb	r5, [r5, r4]
   1bd7c:	cmp	r6, r5
   1bd80:	bcs	1bd4c <__assert_fail@plt+0xa4f8>
   1bd84:	sub	r7, r3, r4
   1bd88:	mov	lr, r3
   1bd8c:	mov	ip, #1
   1bd90:	b	1bd64 <__assert_fail@plt+0xa510>
   1bd94:	cmp	ip, r7
   1bd98:	addne	ip, ip, #1
   1bd9c:	addeq	lr, lr, r7
   1bda0:	moveq	ip, #1
   1bda4:	b	1bd64 <__assert_fail@plt+0xa510>
   1bda8:	str	r7, [r2]
   1bdac:	mov	r8, #1
   1bdb0:	mov	ip, r8
   1bdb4:	mov	lr, #0
   1bdb8:	mvn	r7, #0
   1bdbc:	mov	r3, r8
   1bdc0:	mov	r9, r8
   1bdc4:	b	1bdec <__assert_fail@plt+0xa598>
   1bdc8:	cmp	r6, r5
   1bdcc:	beq	1be10 <__assert_fail@plt+0xa5bc>
   1bdd0:	mov	r7, lr
   1bdd4:	add	lr, lr, #1
   1bdd8:	mov	r8, r9
   1bddc:	mov	ip, r9
   1bde0:	add	r3, ip, lr
   1bde4:	cmp	r3, r1
   1bde8:	bcs	1be24 <__assert_fail@plt+0xa5d0>
   1bdec:	ldrb	r6, [r0, r3]
   1bdf0:	add	r5, r0, ip
   1bdf4:	ldrb	r5, [r5, r7]
   1bdf8:	cmp	r6, r5
   1bdfc:	bls	1bdc8 <__assert_fail@plt+0xa574>
   1be00:	sub	r8, r3, r7
   1be04:	mov	lr, r3
   1be08:	mov	ip, #1
   1be0c:	b	1bde0 <__assert_fail@plt+0xa58c>
   1be10:	cmp	ip, r8
   1be14:	addne	ip, ip, #1
   1be18:	addeq	lr, lr, r8
   1be1c:	moveq	ip, #1
   1be20:	b	1bde0 <__assert_fail@plt+0xa58c>
   1be24:	add	r7, r7, #1
   1be28:	add	r0, r4, #1
   1be2c:	cmp	r7, r0
   1be30:	strcs	r8, [r2]
   1be34:	movcs	r0, r7
   1be38:	ldrd	r4, [sp]
   1be3c:	ldrd	r6, [sp, #8]
   1be40:	ldrd	r8, [sp, #16]
   1be44:	add	sp, sp, #24
   1be48:	pop	{pc}		; (ldr pc, [sp], #4)
   1be4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be50:	strd	r6, [sp, #8]
   1be54:	strd	r8, [sp, #16]
   1be58:	strd	sl, [sp, #24]
   1be5c:	str	lr, [sp, #32]
   1be60:	sub	sp, sp, #1072	; 0x430
   1be64:	sub	sp, sp, #4
   1be68:	mov	r5, r0
   1be6c:	mov	r6, r1
   1be70:	mov	r0, r2
   1be74:	str	r2, [sp]
   1be78:	mov	r4, r3
   1be7c:	add	r2, sp, #1056	; 0x420
   1be80:	add	r2, r2, #12
   1be84:	mov	r1, r3
   1be88:	bl	1bd08 <__assert_fail@plt+0xa4b4>
   1be8c:	mov	r7, r0
   1be90:	add	r3, sp, #40	; 0x28
   1be94:	add	r2, sp, #48	; 0x30
   1be98:	add	r2, r2, #1016	; 0x3f8
   1be9c:	str	r4, [r3, #4]!
   1bea0:	cmp	r3, r2
   1bea4:	bne	1be9c <__assert_fail@plt+0xa648>
   1bea8:	cmp	r4, #0
   1beac:	beq	1c220 <__assert_fail@plt+0xa9cc>
   1beb0:	ldr	r3, [sp]
   1beb4:	sub	r2, r3, #1
   1beb8:	mov	fp, r3
   1bebc:	sub	r1, r4, #1
   1bec0:	str	r1, [sp, #8]
   1bec4:	add	r0, r1, r3
   1bec8:	ldrb	r1, [r2, #1]!
   1becc:	add	r3, sp, #1072	; 0x430
   1bed0:	add	r1, r3, r1, lsl #2
   1bed4:	mvn	r3, r2
   1bed8:	add	r3, r3, r4
   1bedc:	add	r3, r3, fp
   1bee0:	str	r3, [r1, #-1028]	; 0xfffffbfc
   1bee4:	cmp	r2, r0
   1bee8:	bne	1bec8 <__assert_fail@plt+0xa674>
   1beec:	ldr	r3, [sp, #1068]	; 0x42c
   1bef0:	str	r3, [sp, #4]
   1bef4:	mov	r2, r7
   1bef8:	ldr	r0, [sp]
   1befc:	add	r1, r0, r3
   1bf00:	bl	114d0 <memcmp@plt>
   1bf04:	cmp	r0, #0
   1bf08:	beq	1c050 <__assert_fail@plt+0xa7fc>
   1bf0c:	sub	r3, r4, r7
   1bf10:	cmp	r3, r7
   1bf14:	movcc	r3, r7
   1bf18:	add	r3, r3, #1
   1bf1c:	str	r3, [sp, #12]
   1bf20:	mov	r8, #0
   1bf24:	sub	r3, r4, #1
   1bf28:	str	r3, [sp, #4]
   1bf2c:	sub	r1, r7, #1
   1bf30:	str	r1, [sp, #8]
   1bf34:	ldr	r2, [sp]
   1bf38:	add	r1, r2, r1
   1bf3c:	str	r1, [sp, #16]
   1bf40:	mov	fp, r2
   1bf44:	add	r1, r2, r7
   1bf48:	str	r1, [sp]
   1bf4c:	sub	r9, r4, #2
   1bf50:	add	r9, r9, r2
   1bf54:	rsb	sl, r2, #1
   1bf58:	mov	r0, r6
   1bf5c:	mov	r6, r4
   1bf60:	mov	r4, r7
   1bf64:	b	1c130 <__assert_fail@plt+0xa8dc>
   1bf68:	cmp	sl, fp
   1bf6c:	movcs	ip, sl
   1bf70:	movcc	ip, fp
   1bf74:	ldr	r3, [sp, #8]
   1bf78:	cmp	ip, r3
   1bf7c:	bcs	1c0a0 <__assert_fail@plt+0xa84c>
   1bf80:	ldr	r0, [sp]
   1bf84:	add	r3, r0, ip
   1bf88:	add	r1, r8, ip
   1bf8c:	add	r2, r5, r1
   1bf90:	ldrb	r0, [r0, ip]
   1bf94:	ldrb	r1, [r5, r1]
   1bf98:	cmp	r0, r1
   1bf9c:	bne	1bfc4 <__assert_fail@plt+0xa770>
   1bfa0:	ldr	r1, [sp, #12]
   1bfa4:	rsb	lr, r1, #1
   1bfa8:	add	ip, lr, r3
   1bfac:	cmp	r3, r9
   1bfb0:	beq	1c0a0 <__assert_fail@plt+0xa84c>
   1bfb4:	ldrb	r0, [r3, #1]!
   1bfb8:	ldrb	r1, [r2, #1]!
   1bfbc:	cmp	r0, r1
   1bfc0:	beq	1bfa8 <__assert_fail@plt+0xa754>
   1bfc4:	ldr	r3, [sp, #16]
   1bfc8:	add	r8, r3, r8
   1bfcc:	add	r8, ip, r8
   1bfd0:	mov	sl, r6
   1bfd4:	mov	r0, r7
   1bfd8:	add	r7, r8, r4
   1bfdc:	sub	r2, r7, r0
   1bfe0:	mov	r1, #0
   1bfe4:	add	r0, r5, r0
   1bfe8:	bl	11710 <memchr@plt>
   1bfec:	adds	r3, r7, #0
   1bff0:	movne	r3, #1
   1bff4:	cmp	r0, #0
   1bff8:	moveq	r0, r3
   1bffc:	movne	r0, #0
   1c000:	cmp	r0, #0
   1c004:	beq	1c244 <__assert_fail@plt+0xa9f0>
   1c008:	add	r3, r5, r7
   1c00c:	ldrb	r3, [r3, #-1]
   1c010:	add	r2, sp, #1072	; 0x430
   1c014:	add	r3, r2, r3, lsl #2
   1c018:	ldr	r6, [r3, #-1028]	; 0xfffffbfc
   1c01c:	cmp	r6, #0
   1c020:	beq	1bf68 <__assert_fail@plt+0xa714>
   1c024:	ldr	r3, [sp, #4]
   1c028:	cmp	sl, #0
   1c02c:	cmpne	r3, r6
   1c030:	ldrhi	r6, [sp, #20]
   1c034:	add	r8, r8, r6
   1c038:	mov	sl, #0
   1c03c:	b	1bfd4 <__assert_fail@plt+0xa780>
   1c040:	ldr	lr, [sp, #36]	; 0x24
   1c044:	b	1c0fc <__assert_fail@plt+0xa8a8>
   1c048:	add	r0, r5, r8
   1c04c:	b	1c244 <__assert_fail@plt+0xa9f0>
   1c050:	mov	sl, #0
   1c054:	mov	r8, sl
   1c058:	sub	r2, r7, #1
   1c05c:	str	r2, [sp, #24]
   1c060:	str	r7, [sp, #36]	; 0x24
   1c064:	ldr	r1, [sp, #4]
   1c068:	sub	r1, r4, r1
   1c06c:	str	r1, [sp, #20]
   1c070:	ldr	r1, [sp]
   1c074:	add	r2, r1, r2
   1c078:	str	r2, [sp, #28]
   1c07c:	str	r5, [sp, #32]
   1c080:	rsb	r2, r7, #1
   1c084:	str	r2, [sp, #16]
   1c088:	sub	r9, r4, #2
   1c08c:	add	r9, r9, fp
   1c090:	str	fp, [sp, #12]
   1c094:	mov	fp, r7
   1c098:	mov	r0, r6
   1c09c:	b	1bfd8 <__assert_fail@plt+0xa784>
   1c0a0:	cmp	sl, fp
   1c0a4:	ldrcs	lr, [sp, #36]	; 0x24
   1c0a8:	bcs	1c0fc <__assert_fail@plt+0xa8a8>
   1c0ac:	ldr	r3, [sp, #24]
   1c0b0:	add	r2, r8, r3
   1c0b4:	add	r3, r5, r2
   1c0b8:	ldr	r0, [sp, #28]
   1c0bc:	ldrb	r1, [r0]
   1c0c0:	ldrb	r2, [r5, r2]
   1c0c4:	cmp	r1, r2
   1c0c8:	bne	1c040 <__assert_fail@plt+0xa7ec>
   1c0cc:	mov	r2, r0
   1c0d0:	add	ip, r8, sl
   1c0d4:	add	ip, ip, r5
   1c0d8:	ldr	r1, [sp, #32]
   1c0dc:	add	r6, r1, r8
   1c0e0:	sub	lr, r3, r6
   1c0e4:	cmp	r3, ip
   1c0e8:	beq	1c0fc <__assert_fail@plt+0xa8a8>
   1c0ec:	ldrb	r0, [r2, #-1]!
   1c0f0:	ldrb	r1, [r3, #-1]!
   1c0f4:	cmp	r0, r1
   1c0f8:	beq	1c0e0 <__assert_fail@plt+0xa88c>
   1c0fc:	add	sl, sl, #1
   1c100:	cmp	sl, lr
   1c104:	bhi	1c048 <__assert_fail@plt+0xa7f4>
   1c108:	ldr	r3, [sp, #4]
   1c10c:	add	r8, r8, r3
   1c110:	ldr	sl, [sp, #20]
   1c114:	b	1bfd4 <__assert_fail@plt+0xa780>
   1c118:	add	r0, r5, r8
   1c11c:	b	1c244 <__assert_fail@plt+0xa9f0>
   1c120:	rsb	r3, r4, #1
   1c124:	add	r8, r3, r8
   1c128:	add	r8, ip, r8
   1c12c:	mov	r0, r7
   1c130:	add	r7, r8, r6
   1c134:	sub	r2, r7, r0
   1c138:	mov	r1, #0
   1c13c:	add	r0, r5, r0
   1c140:	bl	11710 <memchr@plt>
   1c144:	clz	r0, r0
   1c148:	lsr	r0, r0, #5
   1c14c:	cmp	r7, #0
   1c150:	moveq	r0, #0
   1c154:	cmp	r0, #0
   1c158:	beq	1c244 <__assert_fail@plt+0xa9f0>
   1c15c:	add	r3, r5, r7
   1c160:	ldrb	r3, [r3, #-1]
   1c164:	add	r2, sp, #1072	; 0x430
   1c168:	add	r3, r2, r3, lsl #2
   1c16c:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   1c170:	cmp	r3, #0
   1c174:	addne	r8, r8, r3
   1c178:	bne	1c12c <__assert_fail@plt+0xa8d8>
   1c17c:	ldr	r3, [sp, #4]
   1c180:	cmp	r4, r3
   1c184:	bcs	1c1cc <__assert_fail@plt+0xa978>
   1c188:	add	r3, r8, r4
   1c18c:	add	r2, r5, r3
   1c190:	ldr	r1, [sp]
   1c194:	ldrb	r1, [r1]
   1c198:	ldrb	r3, [r5, r3]
   1c19c:	cmp	r1, r3
   1c1a0:	movne	ip, r4
   1c1a4:	bne	1c120 <__assert_fail@plt+0xa8cc>
   1c1a8:	ldr	r3, [sp]
   1c1ac:	add	ip, sl, r3
   1c1b0:	cmp	r3, r9
   1c1b4:	beq	1c1cc <__assert_fail@plt+0xa978>
   1c1b8:	ldrb	r0, [r3, #1]!
   1c1bc:	ldrb	r1, [r2, #1]!
   1c1c0:	cmp	r0, r1
   1c1c4:	beq	1c1ac <__assert_fail@plt+0xa958>
   1c1c8:	b	1c120 <__assert_fail@plt+0xa8cc>
   1c1cc:	ldr	r3, [sp, #8]
   1c1d0:	cmn	r3, #1
   1c1d4:	beq	1c118 <__assert_fail@plt+0xa8c4>
   1c1d8:	ldr	r3, [sp, #8]
   1c1dc:	add	r3, r8, r3
   1c1e0:	add	r2, r5, r3
   1c1e4:	ldr	r0, [sp, #16]
   1c1e8:	ldrb	r1, [r0]
   1c1ec:	ldrb	r3, [r5, r3]
   1c1f0:	cmp	r1, r3
   1c1f4:	bne	1c214 <__assert_fail@plt+0xa9c0>
   1c1f8:	mov	r3, r0
   1c1fc:	cmp	r3, fp
   1c200:	beq	1c118 <__assert_fail@plt+0xa8c4>
   1c204:	ldrb	r0, [r3, #-1]!
   1c208:	ldrb	r1, [r2, #-1]!
   1c20c:	cmp	r0, r1
   1c210:	beq	1c1fc <__assert_fail@plt+0xa9a8>
   1c214:	ldr	r3, [sp, #12]
   1c218:	add	r8, r8, r3
   1c21c:	b	1c12c <__assert_fail@plt+0xa8d8>
   1c220:	mov	r2, r7
   1c224:	ldr	r1, [sp, #1068]	; 0x42c
   1c228:	ldr	r3, [sp]
   1c22c:	add	r1, r3, r1
   1c230:	mov	r0, r3
   1c234:	bl	114d0 <memcmp@plt>
   1c238:	cmp	r0, #0
   1c23c:	moveq	r0, #0
   1c240:	bne	1bf0c <__assert_fail@plt+0xa6b8>
   1c244:	add	sp, sp, #1072	; 0x430
   1c248:	add	sp, sp, #4
   1c24c:	ldrd	r4, [sp]
   1c250:	ldrd	r6, [sp, #8]
   1c254:	ldrd	r8, [sp, #16]
   1c258:	ldrd	sl, [sp, #24]
   1c25c:	add	sp, sp, #32
   1c260:	pop	{pc}		; (ldr pc, [sp], #4)
   1c264:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c268:	strd	r6, [sp, #8]
   1c26c:	strd	r8, [sp, #16]
   1c270:	strd	sl, [sp, #24]
   1c274:	str	lr, [sp, #32]
   1c278:	sub	sp, sp, #44	; 0x2c
   1c27c:	ldrb	r3, [r0]
   1c280:	cmp	r3, #0
   1c284:	beq	1c34c <__assert_fail@plt+0xaaf8>
   1c288:	ldrb	r2, [r1]
   1c28c:	cmp	r2, #0
   1c290:	beq	1c464 <__assert_fail@plt+0xac10>
   1c294:	mov	r7, r0
   1c298:	add	ip, r1, #1
   1c29c:	mov	lr, #1
   1c2a0:	mov	r6, ip
   1c2a4:	cmp	r3, r2
   1c2a8:	movne	lr, #0
   1c2ac:	andeq	lr, lr, #1
   1c2b0:	ldrb	r3, [r7, #1]!
   1c2b4:	cmp	r3, #0
   1c2b8:	beq	1c354 <__assert_fail@plt+0xab00>
   1c2bc:	ldrb	r2, [ip], #1
   1c2c0:	cmp	r2, #0
   1c2c4:	bne	1c2a0 <__assert_fail@plt+0xaa4c>
   1c2c8:	cmp	lr, #0
   1c2cc:	movne	r5, r0
   1c2d0:	bne	1c32c <__assert_fail@plt+0xaad8>
   1c2d4:	mov	r4, r0
   1c2d8:	sub	r8, r6, r1
   1c2dc:	ldrb	r1, [r1]
   1c2e0:	add	r0, r0, #1
   1c2e4:	bl	11680 <strchr@plt>
   1c2e8:	mov	r5, r0
   1c2ec:	cmp	r8, #1
   1c2f0:	cmpne	r0, #0
   1c2f4:	beq	1c32c <__assert_fail@plt+0xaad8>
   1c2f8:	sub	r3, r6, r8
   1c2fc:	str	r3, [sp, #8]
   1c300:	add	r4, r4, r8
   1c304:	cmp	r4, r0
   1c308:	subcs	r4, r4, r0
   1c30c:	movcc	r4, #1
   1c310:	cmp	r8, #31
   1c314:	bls	1c368 <__assert_fail@plt+0xab14>
   1c318:	mov	r3, r8
   1c31c:	ldr	r2, [sp, #8]
   1c320:	mov	r1, r4
   1c324:	bl	1be4c <__assert_fail@plt+0xa5f8>
   1c328:	mov	r5, r0
   1c32c:	mov	r0, r5
   1c330:	add	sp, sp, #44	; 0x2c
   1c334:	ldrd	r4, [sp]
   1c338:	ldrd	r6, [sp, #8]
   1c33c:	ldrd	r8, [sp, #16]
   1c340:	ldrd	sl, [sp, #24]
   1c344:	add	sp, sp, #32
   1c348:	pop	{pc}		; (ldr pc, [sp], #4)
   1c34c:	mov	r6, r1
   1c350:	mov	lr, #1
   1c354:	ldrb	r3, [r6]
   1c358:	cmp	r3, #0
   1c35c:	movne	r5, #0
   1c360:	beq	1c2c8 <__assert_fail@plt+0xaa74>
   1c364:	b	1c32c <__assert_fail@plt+0xaad8>
   1c368:	add	r2, sp, #36	; 0x24
   1c36c:	mov	r1, r8
   1c370:	ldr	r6, [sp, #8]
   1c374:	mov	r0, r6
   1c378:	bl	1bd08 <__assert_fail@plt+0xa4b4>
   1c37c:	mov	r2, r0
   1c380:	mov	r7, r0
   1c384:	ldr	r1, [sp, #36]	; 0x24
   1c388:	str	r1, [sp, #12]
   1c38c:	add	r1, r6, r1
   1c390:	mov	r0, r6
   1c394:	bl	114d0 <memcmp@plt>
   1c398:	cmp	r0, #0
   1c39c:	beq	1c40c <__assert_fail@plt+0xabb8>
   1c3a0:	sub	r3, r8, r7
   1c3a4:	cmp	r3, r7
   1c3a8:	movcc	r3, r7
   1c3ac:	add	r3, r3, #1
   1c3b0:	str	r3, [sp, #16]
   1c3b4:	mov	r9, #0
   1c3b8:	mov	r3, r7
   1c3bc:	sub	r1, r7, #1
   1c3c0:	str	r1, [sp, #12]
   1c3c4:	ldr	r2, [sp, #8]
   1c3c8:	add	r1, r2, r1
   1c3cc:	str	r1, [sp, #20]
   1c3d0:	mov	fp, r2
   1c3d4:	add	r1, r2, r7
   1c3d8:	str	r1, [sp, #4]
   1c3dc:	rsb	r1, r7, #1
   1c3e0:	str	r1, [sp, #8]
   1c3e4:	sub	r6, r8, #1
   1c3e8:	add	r6, r6, r2
   1c3ec:	rsb	r7, r2, #1
   1c3f0:	mov	r0, r4
   1c3f4:	mov	r4, r3
   1c3f8:	b	1c598 <__assert_fail@plt+0xad44>
   1c3fc:	ldr	lr, [sp, #28]
   1c400:	b	1c4c4 <__assert_fail@plt+0xac70>
   1c404:	add	r5, r5, r9
   1c408:	b	1c32c <__assert_fail@plt+0xaad8>
   1c40c:	mov	fp, #0
   1c410:	mov	r9, fp
   1c414:	mov	sl, r7
   1c418:	sub	r2, r7, #1
   1c41c:	str	r2, [sp, #16]
   1c420:	str	r7, [sp, #28]
   1c424:	ldr	r3, [sp, #12]
   1c428:	sub	r3, r8, r3
   1c42c:	str	r3, [sp, #20]
   1c430:	ldr	r3, [sp, #8]
   1c434:	add	r2, r3, r2
   1c438:	str	r2, [sp, #24]
   1c43c:	sub	r6, r8, #1
   1c440:	add	r6, r6, r3
   1c444:	rsb	r7, r3, #1
   1c448:	mov	r0, r4
   1c44c:	str	r8, [sp, #4]
   1c450:	b	1c4f4 <__assert_fail@plt+0xaca0>
   1c454:	mov	r5, #0
   1c458:	b	1c32c <__assert_fail@plt+0xaad8>
   1c45c:	mov	r5, #0
   1c460:	b	1c32c <__assert_fail@plt+0xaad8>
   1c464:	mov	r5, r0
   1c468:	b	1c32c <__assert_fail@plt+0xaad8>
   1c46c:	cmp	sl, fp
   1c470:	ldrls	lr, [sp, #28]
   1c474:	bls	1c4c4 <__assert_fail@plt+0xac70>
   1c478:	ldr	r3, [sp, #16]
   1c47c:	add	r2, r9, r3
   1c480:	add	r3, r5, r2
   1c484:	ldr	r0, [sp, #24]
   1c488:	ldrb	r1, [r0]
   1c48c:	ldrb	r2, [r5, r2]
   1c490:	cmp	r1, r2
   1c494:	bne	1c3fc <__assert_fail@plt+0xaba8>
   1c498:	mov	r2, r0
   1c49c:	add	ip, fp, r9
   1c4a0:	add	ip, ip, r5
   1c4a4:	add	r4, r5, r9
   1c4a8:	sub	lr, r3, r4
   1c4ac:	cmp	r3, ip
   1c4b0:	beq	1c4c4 <__assert_fail@plt+0xac70>
   1c4b4:	ldrb	r0, [r2, #-1]!
   1c4b8:	ldrb	r1, [r3, #-1]!
   1c4bc:	cmp	r0, r1
   1c4c0:	beq	1c4a8 <__assert_fail@plt+0xac54>
   1c4c4:	add	fp, fp, #1
   1c4c8:	cmp	fp, lr
   1c4cc:	bhi	1c404 <__assert_fail@plt+0xabb0>
   1c4d0:	ldr	r3, [sp, #12]
   1c4d4:	add	r9, r9, r3
   1c4d8:	ldr	fp, [sp, #20]
   1c4dc:	b	1c4f0 <__assert_fail@plt+0xac9c>
   1c4e0:	rsb	r3, sl, #1
   1c4e4:	add	r9, r3, r9
   1c4e8:	add	r9, r9, r0
   1c4ec:	mov	fp, #0
   1c4f0:	mov	r0, r8
   1c4f4:	ldr	r3, [sp, #4]
   1c4f8:	add	r8, r3, r9
   1c4fc:	sub	r2, r8, r0
   1c500:	mov	r1, #0
   1c504:	add	r0, r5, r0
   1c508:	bl	11710 <memchr@plt>
   1c50c:	adds	r3, r8, #0
   1c510:	movne	r3, #1
   1c514:	cmp	r0, #0
   1c518:	moveq	r0, r3
   1c51c:	movne	r0, #0
   1c520:	cmp	r0, #0
   1c524:	beq	1c454 <__assert_fail@plt+0xac00>
   1c528:	cmp	sl, fp
   1c52c:	movcs	r0, sl
   1c530:	movcc	r0, fp
   1c534:	ldr	r3, [sp, #4]
   1c538:	cmp	r3, r0
   1c53c:	bls	1c46c <__assert_fail@plt+0xac18>
   1c540:	ldr	ip, [sp, #8]
   1c544:	add	r3, ip, r0
   1c548:	add	r1, r0, r9
   1c54c:	add	r2, r5, r1
   1c550:	ldrb	ip, [ip, r0]
   1c554:	ldrb	r1, [r5, r1]
   1c558:	cmp	ip, r1
   1c55c:	bne	1c4e0 <__assert_fail@plt+0xac8c>
   1c560:	add	r0, r7, r3
   1c564:	cmp	r3, r6
   1c568:	beq	1c46c <__assert_fail@plt+0xac18>
   1c56c:	ldrb	ip, [r3, #1]!
   1c570:	ldrb	r1, [r2, #1]!
   1c574:	cmp	ip, r1
   1c578:	beq	1c560 <__assert_fail@plt+0xad0c>
   1c57c:	b	1c4e0 <__assert_fail@plt+0xac8c>
   1c580:	add	r5, r5, r9
   1c584:	b	1c32c <__assert_fail@plt+0xaad8>
   1c588:	ldr	r3, [sp, #8]
   1c58c:	add	r9, r3, r9
   1c590:	add	r9, ip, r9
   1c594:	mov	r0, sl
   1c598:	add	sl, r8, r9
   1c59c:	sub	r2, sl, r0
   1c5a0:	mov	r1, #0
   1c5a4:	add	r0, r5, r0
   1c5a8:	bl	11710 <memchr@plt>
   1c5ac:	adds	r3, sl, #0
   1c5b0:	movne	r3, #1
   1c5b4:	cmp	r0, #0
   1c5b8:	moveq	r0, r3
   1c5bc:	movne	r0, #0
   1c5c0:	cmp	r0, #0
   1c5c4:	beq	1c45c <__assert_fail@plt+0xac08>
   1c5c8:	cmp	r8, r4
   1c5cc:	bls	1c614 <__assert_fail@plt+0xadc0>
   1c5d0:	add	r3, r4, r9
   1c5d4:	add	r2, r5, r3
   1c5d8:	ldr	r1, [sp, #4]
   1c5dc:	ldrb	r1, [r1]
   1c5e0:	ldrb	r3, [r5, r3]
   1c5e4:	cmp	r1, r3
   1c5e8:	movne	ip, r4
   1c5ec:	bne	1c588 <__assert_fail@plt+0xad34>
   1c5f0:	ldr	r3, [sp, #4]
   1c5f4:	add	ip, r7, r3
   1c5f8:	cmp	r3, r6
   1c5fc:	beq	1c614 <__assert_fail@plt+0xadc0>
   1c600:	ldrb	r0, [r3, #1]!
   1c604:	ldrb	r1, [r2, #1]!
   1c608:	cmp	r0, r1
   1c60c:	beq	1c5f4 <__assert_fail@plt+0xada0>
   1c610:	b	1c588 <__assert_fail@plt+0xad34>
   1c614:	ldr	r3, [sp, #12]
   1c618:	cmn	r3, #1
   1c61c:	beq	1c580 <__assert_fail@plt+0xad2c>
   1c620:	ldr	r3, [sp, #12]
   1c624:	add	r3, r9, r3
   1c628:	add	r2, r5, r3
   1c62c:	ldr	r0, [sp, #20]
   1c630:	ldrb	r1, [r0]
   1c634:	ldrb	r3, [r5, r3]
   1c638:	cmp	r1, r3
   1c63c:	bne	1c65c <__assert_fail@plt+0xae08>
   1c640:	mov	r3, r0
   1c644:	cmp	r3, fp
   1c648:	beq	1c580 <__assert_fail@plt+0xad2c>
   1c64c:	ldrb	r0, [r3, #-1]!
   1c650:	ldrb	r1, [r2, #-1]!
   1c654:	cmp	r0, r1
   1c658:	beq	1c644 <__assert_fail@plt+0xadf0>
   1c65c:	ldr	r3, [sp, #16]
   1c660:	add	r9, r9, r3
   1c664:	b	1c594 <__assert_fail@plt+0xad40>
   1c668:	ldrb	r3, [r0]
   1c66c:	cmp	r3, #47	; 0x2f
   1c670:	bne	1c680 <__assert_fail@plt+0xae2c>
   1c674:	ldrb	r3, [r0, #1]!
   1c678:	cmp	r3, #47	; 0x2f
   1c67c:	beq	1c674 <__assert_fail@plt+0xae20>
   1c680:	ldrb	r2, [r0]
   1c684:	cmp	r2, #0
   1c688:	bxeq	lr
   1c68c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c690:	mov	r1, r0
   1c694:	mov	r3, #0
   1c698:	mov	lr, #1
   1c69c:	mov	ip, r3
   1c6a0:	b	1c6bc <__assert_fail@plt+0xae68>
   1c6a4:	cmp	r3, #0
   1c6a8:	movne	r0, r1
   1c6ac:	movne	r3, ip
   1c6b0:	ldrb	r2, [r1, #1]!
   1c6b4:	cmp	r2, #0
   1c6b8:	beq	1c6cc <__assert_fail@plt+0xae78>
   1c6bc:	cmp	r2, #47	; 0x2f
   1c6c0:	moveq	r3, lr
   1c6c4:	bne	1c6a4 <__assert_fail@plt+0xae50>
   1c6c8:	b	1c6b0 <__assert_fail@plt+0xae5c>
   1c6cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6d0:	str	r4, [sp, #-8]!
   1c6d4:	str	lr, [sp, #4]
   1c6d8:	mov	r4, r0
   1c6dc:	bl	11674 <strlen@plt>
   1c6e0:	cmp	r0, #1
   1c6e4:	bls	1c704 <__assert_fail@plt+0xaeb0>
   1c6e8:	add	r3, r4, r0
   1c6ec:	ldrb	r3, [r3, #-1]
   1c6f0:	cmp	r3, #47	; 0x2f
   1c6f4:	subeq	r0, r0, #2
   1c6f8:	addeq	r3, r4, r0
   1c6fc:	rsbeq	r1, r4, #1
   1c700:	beq	1c710 <__assert_fail@plt+0xaebc>
   1c704:	ldr	r4, [sp]
   1c708:	add	sp, sp, #4
   1c70c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c710:	add	r0, r1, r3
   1c714:	cmp	r3, r4
   1c718:	beq	1c704 <__assert_fail@plt+0xaeb0>
   1c71c:	ldrb	r2, [r3], #-1
   1c720:	cmp	r2, #47	; 0x2f
   1c724:	bne	1c704 <__assert_fail@plt+0xaeb0>
   1c728:	b	1c710 <__assert_fail@plt+0xaebc>
   1c72c:	ldr	r0, [r0]
   1c730:	cmp	r0, #0
   1c734:	bxlt	lr
   1c738:	str	r4, [sp, #-8]!
   1c73c:	str	lr, [sp, #4]
   1c740:	bl	11830 <close@plt>
   1c744:	cmp	r0, #0
   1c748:	bne	1c758 <__assert_fail@plt+0xaf04>
   1c74c:	ldr	r4, [sp]
   1c750:	add	sp, sp, #4
   1c754:	pop	{pc}		; (ldr pc, [sp], #4)
   1c758:	movw	r3, #63372	; 0xf78c
   1c75c:	movt	r3, #1
   1c760:	mov	r2, #64	; 0x40
   1c764:	movw	r1, #63396	; 0xf7a4
   1c768:	movt	r1, #1
   1c76c:	movw	r0, #63416	; 0xf7b8
   1c770:	movt	r0, #1
   1c774:	bl	11854 <__assert_fail@plt>
   1c778:	strd	r4, [sp, #-16]!
   1c77c:	str	r6, [sp, #8]
   1c780:	str	lr, [sp, #12]
   1c784:	mov	r4, r0
   1c788:	mov	r2, #18688	; 0x4900
   1c78c:	ldr	r0, [r0]
   1c790:	bl	11698 <openat64@plt>
   1c794:	subs	r5, r0, #0
   1c798:	blt	1c7bc <__assert_fail@plt+0xaf68>
   1c79c:	mov	r0, r4
   1c7a0:	bl	1c72c <__assert_fail@plt+0xaed8>
   1c7a4:	str	r5, [r4]
   1c7a8:	mov	r0, #0
   1c7ac:	ldrd	r4, [sp]
   1c7b0:	ldr	r6, [sp, #8]
   1c7b4:	add	sp, sp, #12
   1c7b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7bc:	mvn	r0, #0
   1c7c0:	b	1c7ac <__assert_fail@plt+0xaf58>
   1c7c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c7c8:	strd	r6, [sp, #8]
   1c7cc:	strd	r8, [sp, #16]
   1c7d0:	str	sl, [sp, #24]
   1c7d4:	str	lr, [sp, #28]
   1c7d8:	sub	sp, sp, #8
   1c7dc:	mov	r6, r0
   1c7e0:	bl	11524 <chdir@plt>
   1c7e4:	subs	r4, r0, #0
   1c7e8:	beq	1c800 <__assert_fail@plt+0xafac>
   1c7ec:	bl	116b0 <__errno_location@plt>
   1c7f0:	mov	sl, r0
   1c7f4:	ldr	r3, [r0]
   1c7f8:	cmp	r3, #36	; 0x24
   1c7fc:	beq	1c820 <__assert_fail@plt+0xafcc>
   1c800:	mov	r0, r4
   1c804:	add	sp, sp, #8
   1c808:	ldrd	r4, [sp]
   1c80c:	ldrd	r6, [sp, #8]
   1c810:	ldrd	r8, [sp, #16]
   1c814:	ldr	sl, [sp, #24]
   1c818:	add	sp, sp, #28
   1c81c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c820:	mov	r0, r6
   1c824:	bl	11674 <strlen@plt>
   1c828:	mvn	r3, #99	; 0x63
   1c82c:	str	r3, [sp, #4]
   1c830:	subs	r7, r0, #0
   1c834:	beq	1c944 <__assert_fail@plt+0xb0f0>
   1c838:	cmp	r7, #4096	; 0x1000
   1c83c:	bcc	1c960 <__assert_fail@plt+0xb10c>
   1c840:	movw	r1, #63452	; 0xf7dc
   1c844:	movt	r1, #1
   1c848:	mov	r0, r6
   1c84c:	bl	11848 <strspn@plt>
   1c850:	mov	r5, r0
   1c854:	cmp	r0, #2
   1c858:	beq	1c97c <__assert_fail@plt+0xb128>
   1c85c:	cmp	r0, #0
   1c860:	moveq	r5, r6
   1c864:	bne	1c9e0 <__assert_fail@plt+0xb18c>
   1c868:	ldrb	r3, [r5]
   1c86c:	cmp	r3, #47	; 0x2f
   1c870:	beq	1ca00 <__assert_fail@plt+0xb1ac>
   1c874:	add	r6, r6, r7
   1c878:	cmp	r5, r6
   1c87c:	bhi	1ca1c <__assert_fail@plt+0xb1c8>
   1c880:	sub	r3, r6, r5
   1c884:	cmp	r3, #4096	; 0x1000
   1c888:	blt	1c900 <__assert_fail@plt+0xb0ac>
   1c88c:	mov	r9, #4096	; 0x1000
   1c890:	mov	r7, #47	; 0x2f
   1c894:	movw	r8, #63452	; 0xf7dc
   1c898:	movt	r8, #1
   1c89c:	mov	r2, r9
   1c8a0:	mov	r1, r7
   1c8a4:	mov	r0, r5
   1c8a8:	bl	116a4 <memrchr@plt>
   1c8ac:	subs	r4, r0, #0
   1c8b0:	beq	1ca38 <__assert_fail@plt+0xb1e4>
   1c8b4:	mov	r3, #0
   1c8b8:	strb	r3, [r4]
   1c8bc:	sub	r3, r4, r5
   1c8c0:	cmp	r3, #4096	; 0x1000
   1c8c4:	bge	1ca48 <__assert_fail@plt+0xb1f4>
   1c8c8:	mov	r1, r5
   1c8cc:	add	r0, sp, #4
   1c8d0:	bl	1c778 <__assert_fail@plt+0xaf24>
   1c8d4:	strb	r7, [r4]
   1c8d8:	cmp	r0, #0
   1c8dc:	bne	1c92c <__assert_fail@plt+0xb0d8>
   1c8e0:	add	r4, r4, #1
   1c8e4:	mov	r1, r8
   1c8e8:	mov	r0, r4
   1c8ec:	bl	11848 <strspn@plt>
   1c8f0:	add	r5, r4, r0
   1c8f4:	sub	r3, r6, r5
   1c8f8:	cmp	r3, #4096	; 0x1000
   1c8fc:	bge	1c89c <__assert_fail@plt+0xb048>
   1c900:	cmp	r6, r5
   1c904:	bls	1c91c <__assert_fail@plt+0xb0c8>
   1c908:	mov	r1, r5
   1c90c:	add	r0, sp, #4
   1c910:	bl	1c778 <__assert_fail@plt+0xaf24>
   1c914:	cmp	r0, #0
   1c918:	bne	1c92c <__assert_fail@plt+0xb0d8>
   1c91c:	ldr	r0, [sp, #4]
   1c920:	bl	117b8 <fchdir@plt>
   1c924:	subs	r4, r0, #0
   1c928:	beq	1ca64 <__assert_fail@plt+0xb210>
   1c92c:	ldr	r4, [sl]
   1c930:	add	r0, sp, #4
   1c934:	bl	1c72c <__assert_fail@plt+0xaed8>
   1c938:	str	r4, [sl]
   1c93c:	mvn	r4, #0
   1c940:	b	1c800 <__assert_fail@plt+0xafac>
   1c944:	ldr	r3, [pc, #292]	; 1ca70 <__assert_fail@plt+0xb21c>
   1c948:	mov	r2, #126	; 0x7e
   1c94c:	movw	r1, #63396	; 0xf7a4
   1c950:	movt	r1, #1
   1c954:	movw	r0, #63432	; 0xf7c8
   1c958:	movt	r0, #1
   1c95c:	bl	11854 <__assert_fail@plt>
   1c960:	ldr	r3, [pc, #264]	; 1ca70 <__assert_fail@plt+0xb21c>
   1c964:	mov	r2, #127	; 0x7f
   1c968:	movw	r1, #63396	; 0xf7a4
   1c96c:	movt	r1, #1
   1c970:	movw	r0, #63440	; 0xf7d0
   1c974:	movt	r0, #1
   1c978:	bl	11854 <__assert_fail@plt>
   1c97c:	sub	r2, r7, #3
   1c980:	mov	r1, #47	; 0x2f
   1c984:	add	r0, r6, #3
   1c988:	bl	11710 <memchr@plt>
   1c98c:	subs	r4, r0, #0
   1c990:	moveq	r3, #36	; 0x24
   1c994:	streq	r3, [sl]
   1c998:	mvneq	r4, #0
   1c99c:	beq	1c800 <__assert_fail@plt+0xafac>
   1c9a0:	mov	r3, #0
   1c9a4:	strb	r3, [r4]
   1c9a8:	mov	r1, r6
   1c9ac:	add	r0, sp, #4
   1c9b0:	bl	1c778 <__assert_fail@plt+0xaf24>
   1c9b4:	mov	r3, #47	; 0x2f
   1c9b8:	strb	r3, [r4]
   1c9bc:	cmp	r0, #0
   1c9c0:	bne	1c92c <__assert_fail@plt+0xb0d8>
   1c9c4:	add	r4, r4, #1
   1c9c8:	movw	r1, #63452	; 0xf7dc
   1c9cc:	movt	r1, #1
   1c9d0:	mov	r0, r4
   1c9d4:	bl	11848 <strspn@plt>
   1c9d8:	add	r5, r4, r0
   1c9dc:	b	1c868 <__assert_fail@plt+0xb014>
   1c9e0:	movw	r1, #63452	; 0xf7dc
   1c9e4:	movt	r1, #1
   1c9e8:	add	r0, sp, #4
   1c9ec:	bl	1c778 <__assert_fail@plt+0xaf24>
   1c9f0:	cmp	r0, #0
   1c9f4:	addeq	r5, r6, r5
   1c9f8:	beq	1c868 <__assert_fail@plt+0xb014>
   1c9fc:	b	1c92c <__assert_fail@plt+0xb0d8>
   1ca00:	ldr	r3, [pc, #104]	; 1ca70 <__assert_fail@plt+0xb21c>
   1ca04:	mov	r2, #162	; 0xa2
   1ca08:	movw	r1, #63396	; 0xf7a4
   1ca0c:	movt	r1, #1
   1ca10:	movw	r0, #63456	; 0xf7e0
   1ca14:	movt	r0, #1
   1ca18:	bl	11854 <__assert_fail@plt>
   1ca1c:	ldr	r3, [pc, #76]	; 1ca70 <__assert_fail@plt+0xb21c>
   1ca20:	mov	r2, #163	; 0xa3
   1ca24:	movw	r1, #63396	; 0xf7a4
   1ca28:	movt	r1, #1
   1ca2c:	movw	r0, #63468	; 0xf7ec
   1ca30:	movt	r0, #1
   1ca34:	bl	11854 <__assert_fail@plt>
   1ca38:	mov	r3, #36	; 0x24
   1ca3c:	str	r3, [sl]
   1ca40:	mvn	r4, #0
   1ca44:	b	1c800 <__assert_fail@plt+0xafac>
   1ca48:	ldr	r3, [pc, #32]	; 1ca70 <__assert_fail@plt+0xb21c>
   1ca4c:	mov	r2, #179	; 0xb3
   1ca50:	movw	r1, #63396	; 0xf7a4
   1ca54:	movt	r1, #1
   1ca58:	movw	r0, #63484	; 0xf7fc
   1ca5c:	movt	r0, #1
   1ca60:	bl	11854 <__assert_fail@plt>
   1ca64:	add	r0, sp, #4
   1ca68:	bl	1c72c <__assert_fail@plt+0xaed8>
   1ca6c:	b	1c800 <__assert_fail@plt+0xafac>
   1ca70:	muleq	r1, r8, r7
   1ca74:	strd	r4, [sp, #-16]!
   1ca78:	str	r6, [sp, #8]
   1ca7c:	str	lr, [sp, #12]
   1ca80:	mov	r5, r0
   1ca84:	bl	11590 <__fpending@plt>
   1ca88:	mov	r6, r0
   1ca8c:	ldr	r4, [r5]
   1ca90:	and	r4, r4, #32
   1ca94:	mov	r0, r5
   1ca98:	bl	1cb00 <__assert_fail@plt+0xb2ac>
   1ca9c:	cmp	r4, #0
   1caa0:	bne	1cad4 <__assert_fail@plt+0xb280>
   1caa4:	cmp	r0, #0
   1caa8:	beq	1cac4 <__assert_fail@plt+0xb270>
   1caac:	cmp	r6, #0
   1cab0:	bne	1caf0 <__assert_fail@plt+0xb29c>
   1cab4:	bl	116b0 <__errno_location@plt>
   1cab8:	ldr	r0, [r0]
   1cabc:	subs	r0, r0, #9
   1cac0:	mvnne	r0, #0
   1cac4:	ldrd	r4, [sp]
   1cac8:	ldr	r6, [sp, #8]
   1cacc:	add	sp, sp, #12
   1cad0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cad4:	cmp	r0, #0
   1cad8:	bne	1caf8 <__assert_fail@plt+0xb2a4>
   1cadc:	bl	116b0 <__errno_location@plt>
   1cae0:	mov	r3, #0
   1cae4:	str	r3, [r0]
   1cae8:	mvn	r0, #0
   1caec:	b	1cac4 <__assert_fail@plt+0xb270>
   1caf0:	mvn	r0, #0
   1caf4:	b	1cac4 <__assert_fail@plt+0xb270>
   1caf8:	mvn	r0, #0
   1cafc:	b	1cac4 <__assert_fail@plt+0xb270>
   1cb00:	strd	r4, [sp, #-16]!
   1cb04:	str	r6, [sp, #8]
   1cb08:	str	lr, [sp, #12]
   1cb0c:	sub	sp, sp, #8
   1cb10:	mov	r4, r0
   1cb14:	bl	116f8 <fileno@plt>
   1cb18:	cmp	r0, #0
   1cb1c:	blt	1cb94 <__assert_fail@plt+0xb340>
   1cb20:	mov	r0, r4
   1cb24:	bl	11608 <__freading@plt>
   1cb28:	cmp	r0, #0
   1cb2c:	beq	1cb60 <__assert_fail@plt+0xb30c>
   1cb30:	mov	r0, r4
   1cb34:	bl	116f8 <fileno@plt>
   1cb38:	mov	r3, #1
   1cb3c:	str	r3, [sp]
   1cb40:	mov	r2, #0
   1cb44:	mov	r3, #0
   1cb48:	bl	11560 <lseek64@plt>
   1cb4c:	mvn	r2, #0
   1cb50:	mvn	r3, #0
   1cb54:	cmp	r1, r3
   1cb58:	cmpeq	r0, r2
   1cb5c:	beq	1cba0 <__assert_fail@plt+0xb34c>
   1cb60:	mov	r0, r4
   1cb64:	bl	1cbf8 <__assert_fail@plt+0xb3a4>
   1cb68:	cmp	r0, #0
   1cb6c:	beq	1cba0 <__assert_fail@plt+0xb34c>
   1cb70:	bl	116b0 <__errno_location@plt>
   1cb74:	mov	r5, r0
   1cb78:	ldr	r6, [r0]
   1cb7c:	mov	r0, r4
   1cb80:	bl	1171c <fclose@plt>
   1cb84:	cmp	r6, #0
   1cb88:	strne	r6, [r5]
   1cb8c:	mvnne	r0, #0
   1cb90:	b	1cba8 <__assert_fail@plt+0xb354>
   1cb94:	mov	r0, r4
   1cb98:	bl	1171c <fclose@plt>
   1cb9c:	b	1cba8 <__assert_fail@plt+0xb354>
   1cba0:	mov	r0, r4
   1cba4:	bl	1171c <fclose@plt>
   1cba8:	add	sp, sp, #8
   1cbac:	ldrd	r4, [sp]
   1cbb0:	ldr	r6, [sp, #8]
   1cbb4:	add	sp, sp, #12
   1cbb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbbc:	push	{r1, r2, r3}
   1cbc0:	push	{lr}		; (str lr, [sp, #-4]!)
   1cbc4:	sub	sp, sp, #8
   1cbc8:	ldr	r1, [sp, #12]
   1cbcc:	tst	r1, #64	; 0x40
   1cbd0:	addne	r3, sp, #20
   1cbd4:	strne	r3, [sp, #4]
   1cbd8:	ldrne	r2, [sp, #16]
   1cbdc:	moveq	r2, #0
   1cbe0:	bl	115c0 <open64@plt>
   1cbe4:	bl	1ce18 <__assert_fail@plt+0xb5c4>
   1cbe8:	add	sp, sp, #8
   1cbec:	pop	{lr}		; (ldr lr, [sp], #4)
   1cbf0:	add	sp, sp, #12
   1cbf4:	bx	lr
   1cbf8:	str	r4, [sp, #-8]!
   1cbfc:	str	lr, [sp, #4]
   1cc00:	sub	sp, sp, #8
   1cc04:	subs	r4, r0, #0
   1cc08:	beq	1cc1c <__assert_fail@plt+0xb3c8>
   1cc0c:	mov	r0, r4
   1cc10:	bl	11608 <__freading@plt>
   1cc14:	cmp	r0, #0
   1cc18:	bne	1cc34 <__assert_fail@plt+0xb3e0>
   1cc1c:	mov	r0, r4
   1cc20:	bl	11494 <fflush@plt>
   1cc24:	add	sp, sp, #8
   1cc28:	ldr	r4, [sp]
   1cc2c:	add	sp, sp, #4
   1cc30:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc34:	ldr	r3, [r4]
   1cc38:	tst	r3, #256	; 0x100
   1cc3c:	bne	1cc4c <__assert_fail@plt+0xb3f8>
   1cc40:	mov	r0, r4
   1cc44:	bl	11494 <fflush@plt>
   1cc48:	b	1cc24 <__assert_fail@plt+0xb3d0>
   1cc4c:	mov	r3, #1
   1cc50:	str	r3, [sp]
   1cc54:	mov	r2, #0
   1cc58:	mov	r3, #0
   1cc5c:	mov	r0, r4
   1cc60:	bl	1cc68 <__assert_fail@plt+0xb414>
   1cc64:	b	1cc40 <__assert_fail@plt+0xb3ec>
   1cc68:	str	r4, [sp, #-16]!
   1cc6c:	strd	r6, [sp, #4]
   1cc70:	str	lr, [sp, #12]
   1cc74:	sub	sp, sp, #8
   1cc78:	mov	r4, r0
   1cc7c:	mov	r6, r2
   1cc80:	mov	r7, r3
   1cc84:	ldr	r2, [r0, #8]
   1cc88:	ldr	r3, [r0, #4]
   1cc8c:	cmp	r2, r3
   1cc90:	beq	1ccc0 <__assert_fail@plt+0xb46c>
   1cc94:	ldr	r3, [sp, #24]
   1cc98:	str	r3, [sp]
   1cc9c:	mov	r2, r6
   1cca0:	mov	r3, r7
   1cca4:	mov	r0, r4
   1cca8:	bl	11728 <fseeko64@plt>
   1ccac:	add	sp, sp, #8
   1ccb0:	ldr	r4, [sp]
   1ccb4:	ldrd	r6, [sp, #4]
   1ccb8:	add	sp, sp, #12
   1ccbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccc0:	ldr	r2, [r0, #20]
   1ccc4:	ldr	r3, [r0, #16]
   1ccc8:	cmp	r2, r3
   1cccc:	bne	1cc94 <__assert_fail@plt+0xb440>
   1ccd0:	ldr	r3, [r0, #36]	; 0x24
   1ccd4:	cmp	r3, #0
   1ccd8:	bne	1cc94 <__assert_fail@plt+0xb440>
   1ccdc:	bl	116f8 <fileno@plt>
   1cce0:	ldr	r3, [sp, #24]
   1cce4:	str	r3, [sp]
   1cce8:	mov	r2, r6
   1ccec:	mov	r3, r7
   1ccf0:	bl	11560 <lseek64@plt>
   1ccf4:	mvn	r2, #0
   1ccf8:	mvn	r3, #0
   1ccfc:	cmp	r1, r3
   1cd00:	cmpeq	r0, r2
   1cd04:	beq	1cd20 <__assert_fail@plt+0xb4cc>
   1cd08:	ldr	r3, [r4]
   1cd0c:	bic	r3, r3, #16
   1cd10:	str	r3, [r4]
   1cd14:	strd	r0, [r4, #80]	; 0x50
   1cd18:	mov	r0, #0
   1cd1c:	b	1ccac <__assert_fail@plt+0xb458>
   1cd20:	mvn	r0, #0
   1cd24:	b	1ccac <__assert_fail@plt+0xb458>
   1cd28:	str	r4, [sp, #-8]!
   1cd2c:	str	lr, [sp, #4]
   1cd30:	mov	r0, #14
   1cd34:	bl	11788 <nl_langinfo@plt>
   1cd38:	cmp	r0, #0
   1cd3c:	beq	1cd60 <__assert_fail@plt+0xb50c>
   1cd40:	ldrb	r2, [r0]
   1cd44:	movw	r3, #63504	; 0xf810
   1cd48:	movt	r3, #1
   1cd4c:	cmp	r2, #0
   1cd50:	moveq	r0, r3
   1cd54:	ldr	r4, [sp]
   1cd58:	add	sp, sp, #4
   1cd5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd60:	movw	r0, #63504	; 0xf810
   1cd64:	movt	r0, #1
   1cd68:	b	1cd54 <__assert_fail@plt+0xb500>
   1cd6c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1cd70:	strd	r6, [sp, #8]
   1cd74:	str	lr, [sp, #16]
   1cd78:	sub	sp, sp, #12
   1cd7c:	mov	r7, r1
   1cd80:	mov	r5, r2
   1cd84:	subs	r6, r0, #0
   1cd88:	addeq	r6, sp, #4
   1cd8c:	mov	r0, r6
   1cd90:	bl	1159c <mbrtowc@plt>
   1cd94:	mov	r4, r0
   1cd98:	cmp	r5, #0
   1cd9c:	cmnne	r0, #3
   1cda0:	bhi	1cdbc <__assert_fail@plt+0xb568>
   1cda4:	mov	r0, r4
   1cda8:	add	sp, sp, #12
   1cdac:	ldrd	r4, [sp]
   1cdb0:	ldrd	r6, [sp, #8]
   1cdb4:	add	sp, sp, #16
   1cdb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdbc:	mov	r0, #0
   1cdc0:	bl	1d018 <__assert_fail@plt+0xb7c4>
   1cdc4:	cmp	r0, #0
   1cdc8:	bne	1cda4 <__assert_fail@plt+0xb550>
   1cdcc:	ldrb	r3, [r7]
   1cdd0:	str	r3, [r6]
   1cdd4:	mov	r4, #1
   1cdd8:	b	1cda4 <__assert_fail@plt+0xb550>
   1cddc:	str	r4, [sp, #-8]!
   1cde0:	str	lr, [sp, #4]
   1cde4:	umull	r2, r3, r1, r2
   1cde8:	cmp	r3, #0
   1cdec:	bne	1ce04 <__assert_fail@plt+0xb5b0>
   1cdf0:	mov	r1, r2
   1cdf4:	bl	1bcac <__assert_fail@plt+0xa458>
   1cdf8:	ldr	r4, [sp]
   1cdfc:	add	sp, sp, #4
   1ce00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce04:	bl	116b0 <__errno_location@plt>
   1ce08:	mov	r3, #12
   1ce0c:	str	r3, [r0]
   1ce10:	mov	r0, #0
   1ce14:	b	1cdf8 <__assert_fail@plt+0xb5a4>
   1ce18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ce1c:	strd	r6, [sp, #8]
   1ce20:	str	r8, [sp, #16]
   1ce24:	str	lr, [sp, #20]
   1ce28:	mov	r4, r0
   1ce2c:	cmp	r0, #2
   1ce30:	bls	1ce4c <__assert_fail@plt+0xb5f8>
   1ce34:	mov	r0, r4
   1ce38:	ldrd	r4, [sp]
   1ce3c:	ldrd	r6, [sp, #8]
   1ce40:	ldr	r8, [sp, #16]
   1ce44:	add	sp, sp, #20
   1ce48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce4c:	bl	1d134 <__assert_fail@plt+0xb8e0>
   1ce50:	mov	r6, r0
   1ce54:	bl	116b0 <__errno_location@plt>
   1ce58:	mov	r5, r0
   1ce5c:	ldr	r7, [r0]
   1ce60:	mov	r0, r4
   1ce64:	bl	11830 <close@plt>
   1ce68:	str	r7, [r5]
   1ce6c:	mov	r4, r6
   1ce70:	b	1ce34 <__assert_fail@plt+0xb5e0>
   1ce74:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ce78:	strd	r6, [sp, #8]
   1ce7c:	strd	r8, [sp, #16]
   1ce80:	str	lr, [sp, #24]
   1ce84:	sub	sp, sp, #12
   1ce88:	str	r1, [sp, #4]
   1ce8c:	subs	r6, r0, #0
   1ce90:	beq	1cef8 <__assert_fail@plt+0xb6a4>
   1ce94:	mov	r7, r1
   1ce98:	ldr	r3, [sp, #4]
   1ce9c:	add	r2, r3, #4
   1cea0:	str	r2, [sp, #4]
   1cea4:	ldr	r0, [r3]
   1cea8:	bl	11674 <strlen@plt>
   1ceac:	mov	r5, r0
   1ceb0:	mov	r4, r6
   1ceb4:	subs	r4, r4, #1
   1ceb8:	beq	1cf0c <__assert_fail@plt+0xb6b8>
   1cebc:	ldr	r3, [sp, #4]
   1cec0:	add	r2, r3, #4
   1cec4:	str	r2, [sp, #4]
   1cec8:	ldr	r0, [r3]
   1cecc:	bl	11674 <strlen@plt>
   1ced0:	add	r0, r0, r5
   1ced4:	cmp	r0, r5
   1ced8:	movcs	r5, r0
   1cedc:	mvncc	r5, #0
   1cee0:	b	1ceb4 <__assert_fail@plt+0xb660>
   1cee4:	bl	116b0 <__errno_location@plt>
   1cee8:	mov	r3, #75	; 0x4b
   1ceec:	str	r3, [r0]
   1cef0:	mov	r9, #0
   1cef4:	b	1cf58 <__assert_fail@plt+0xb704>
   1cef8:	mov	r0, #1
   1cefc:	bl	1b6b8 <__assert_fail@plt+0x9e64>
   1cf00:	mov	r4, r0
   1cf04:	mov	r9, r0
   1cf08:	b	1cf50 <__assert_fail@plt+0xb6fc>
   1cf0c:	cmp	r5, #0
   1cf10:	blt	1cee4 <__assert_fail@plt+0xb690>
   1cf14:	add	r0, r5, #1
   1cf18:	bl	1b6b8 <__assert_fail@plt+0x9e64>
   1cf1c:	mov	r9, r0
   1cf20:	mov	r4, r0
   1cf24:	ldr	r8, [r7], #4
   1cf28:	mov	r0, r8
   1cf2c:	bl	11674 <strlen@plt>
   1cf30:	mov	r5, r0
   1cf34:	mov	r2, r0
   1cf38:	mov	r1, r8
   1cf3c:	mov	r0, r4
   1cf40:	bl	114b8 <memcpy@plt>
   1cf44:	add	r4, r4, r5
   1cf48:	subs	r6, r6, #1
   1cf4c:	bne	1cf24 <__assert_fail@plt+0xb6d0>
   1cf50:	mov	r3, #0
   1cf54:	strb	r3, [r4]
   1cf58:	mov	r0, r9
   1cf5c:	add	sp, sp, #12
   1cf60:	ldrd	r4, [sp]
   1cf64:	ldrd	r6, [sp, #8]
   1cf68:	ldrd	r8, [sp, #16]
   1cf6c:	add	sp, sp, #24
   1cf70:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf74:	push	{lr}		; (str lr, [sp, #-4]!)
   1cf78:	sub	sp, sp, #12
   1cf7c:	ldrb	r2, [r0]
   1cf80:	cmp	r2, #0
   1cf84:	beq	1cff0 <__assert_fail@plt+0xb79c>
   1cf88:	cmp	r2, #37	; 0x25
   1cf8c:	bne	1cfc8 <__assert_fail@plt+0xb774>
   1cf90:	ldrb	r3, [r0, #1]
   1cf94:	cmp	r3, #115	; 0x73
   1cf98:	bne	1cfc8 <__assert_fail@plt+0xb774>
   1cf9c:	mov	ip, #0
   1cfa0:	add	r2, r0, #1
   1cfa4:	add	ip, ip, #1
   1cfa8:	ldrb	lr, [r0, ip, lsl #1]
   1cfac:	cmp	lr, #0
   1cfb0:	beq	1cff4 <__assert_fail@plt+0xb7a0>
   1cfb4:	cmp	lr, #37	; 0x25
   1cfb8:	bne	1cfc8 <__assert_fail@plt+0xb774>
   1cfbc:	ldrb	lr, [r2, ip, lsl #1]
   1cfc0:	cmp	lr, #115	; 0x73
   1cfc4:	beq	1cfa4 <__assert_fail@plt+0xb750>
   1cfc8:	mov	r3, r1
   1cfcc:	mov	r2, r0
   1cfd0:	mov	r1, #1
   1cfd4:	add	r0, sp, #4
   1cfd8:	bl	116d4 <__vasprintf_chk@plt>
   1cfdc:	cmp	r0, #0
   1cfe0:	blt	1d000 <__assert_fail@plt+0xb7ac>
   1cfe4:	ldr	r0, [sp, #4]
   1cfe8:	add	sp, sp, #12
   1cfec:	pop	{pc}		; (ldr pc, [sp], #4)
   1cff0:	mov	ip, #0
   1cff4:	mov	r0, ip
   1cff8:	bl	1ce74 <__assert_fail@plt+0xb620>
   1cffc:	b	1cfe8 <__assert_fail@plt+0xb794>
   1d000:	bl	116b0 <__errno_location@plt>
   1d004:	ldr	r3, [r0]
   1d008:	cmp	r3, #12
   1d00c:	movne	r0, #0
   1d010:	bne	1cfe8 <__assert_fail@plt+0xb794>
   1d014:	bl	1bb4c <__assert_fail@plt+0xa2f8>
   1d018:	push	{lr}		; (str lr, [sp, #-4]!)
   1d01c:	sub	sp, sp, #268	; 0x10c
   1d020:	movw	r2, #257	; 0x101
   1d024:	add	r1, sp, #4
   1d028:	bl	1d074 <__assert_fail@plt+0xb820>
   1d02c:	cmp	r0, #0
   1d030:	movne	r0, #0
   1d034:	bne	1d06c <__assert_fail@plt+0xb818>
   1d038:	movw	r1, #63512	; 0xf818
   1d03c:	movt	r1, #1
   1d040:	add	r0, sp, #4
   1d044:	bl	11464 <strcmp@plt>
   1d048:	cmp	r0, #0
   1d04c:	beq	1d068 <__assert_fail@plt+0xb814>
   1d050:	movw	r1, #63516	; 0xf81c
   1d054:	movt	r1, #1
   1d058:	add	r0, sp, #4
   1d05c:	bl	11464 <strcmp@plt>
   1d060:	adds	r0, r0, #0
   1d064:	movne	r0, #1
   1d068:	and	r0, r0, #1
   1d06c:	add	sp, sp, #268	; 0x10c
   1d070:	pop	{pc}		; (ldr pc, [sp], #4)
   1d074:	strd	r4, [sp, #-16]!
   1d078:	str	r6, [sp, #8]
   1d07c:	str	lr, [sp, #12]
   1d080:	mov	r6, r1
   1d084:	mov	r4, r2
   1d088:	mov	r1, #0
   1d08c:	bl	11764 <setlocale@plt>
   1d090:	subs	r5, r0, #0
   1d094:	beq	1d0d8 <__assert_fail@plt+0xb884>
   1d098:	mov	r0, r5
   1d09c:	bl	11674 <strlen@plt>
   1d0a0:	cmp	r4, r0
   1d0a4:	bhi	1d0f4 <__assert_fail@plt+0xb8a0>
   1d0a8:	cmp	r4, #0
   1d0ac:	moveq	r0, #34	; 0x22
   1d0b0:	beq	1d108 <__assert_fail@plt+0xb8b4>
   1d0b4:	sub	r4, r4, #1
   1d0b8:	mov	r2, r4
   1d0bc:	mov	r1, r5
   1d0c0:	mov	r0, r6
   1d0c4:	bl	114b8 <memcpy@plt>
   1d0c8:	mov	r3, #0
   1d0cc:	strb	r3, [r6, r4]
   1d0d0:	mov	r0, #34	; 0x22
   1d0d4:	b	1d108 <__assert_fail@plt+0xb8b4>
   1d0d8:	cmp	r4, #0
   1d0dc:	moveq	r0, #22
   1d0e0:	beq	1d108 <__assert_fail@plt+0xb8b4>
   1d0e4:	mov	r3, #0
   1d0e8:	strb	r3, [r6]
   1d0ec:	mov	r0, #22
   1d0f0:	b	1d108 <__assert_fail@plt+0xb8b4>
   1d0f4:	add	r2, r0, #1
   1d0f8:	mov	r1, r5
   1d0fc:	mov	r0, r6
   1d100:	bl	114b8 <memcpy@plt>
   1d104:	mov	r0, #0
   1d108:	ldrd	r4, [sp]
   1d10c:	ldr	r6, [sp, #8]
   1d110:	add	sp, sp, #12
   1d114:	pop	{pc}		; (ldr pc, [sp], #4)
   1d118:	str	r4, [sp, #-8]!
   1d11c:	str	lr, [sp, #4]
   1d120:	mov	r1, #0
   1d124:	bl	11764 <setlocale@plt>
   1d128:	ldr	r4, [sp]
   1d12c:	add	sp, sp, #4
   1d130:	pop	{pc}		; (ldr pc, [sp], #4)
   1d134:	str	r4, [sp, #-8]!
   1d138:	str	lr, [sp, #4]
   1d13c:	mov	r2, #3
   1d140:	mov	r1, #0
   1d144:	bl	1d154 <__assert_fail@plt+0xb900>
   1d148:	ldr	r4, [sp]
   1d14c:	add	sp, sp, #4
   1d150:	pop	{pc}		; (ldr pc, [sp], #4)
   1d154:	push	{r1, r2, r3}
   1d158:	strd	r4, [sp, #-16]!
   1d15c:	str	r6, [sp, #8]
   1d160:	str	lr, [sp, #12]
   1d164:	sub	sp, sp, #12
   1d168:	mov	r5, r0
   1d16c:	ldr	r1, [sp, #28]
   1d170:	add	r3, sp, #32
   1d174:	str	r3, [sp, #4]
   1d178:	cmp	r1, #0
   1d17c:	beq	1d1c4 <__assert_fail@plt+0xb970>
   1d180:	movw	r3, #1030	; 0x406
   1d184:	cmp	r1, r3
   1d188:	beq	1d200 <__assert_fail@plt+0xb9ac>
   1d18c:	cmp	r1, #11
   1d190:	beq	1d3b0 <__assert_fail@plt+0xbb5c>
   1d194:	bgt	1d33c <__assert_fail@plt+0xbae8>
   1d198:	cmp	r1, #3
   1d19c:	beq	1d3b0 <__assert_fail@plt+0xbb5c>
   1d1a0:	ble	1d2fc <__assert_fail@plt+0xbaa8>
   1d1a4:	cmp	r1, #8
   1d1a8:	beq	1d31c <__assert_fail@plt+0xbac8>
   1d1ac:	ble	1d314 <__assert_fail@plt+0xbac0>
   1d1b0:	cmp	r1, #9
   1d1b4:	beq	1d3b0 <__assert_fail@plt+0xbb5c>
   1d1b8:	cmp	r1, #10
   1d1bc:	bne	1d374 <__assert_fail@plt+0xbb20>
   1d1c0:	b	1d31c <__assert_fail@plt+0xbac8>
   1d1c4:	ldr	r3, [sp, #4]
   1d1c8:	add	r2, r3, #4
   1d1cc:	str	r2, [sp, #4]
   1d1d0:	ldr	r2, [r3]
   1d1d4:	mov	r1, #0
   1d1d8:	bl	1174c <fcntl64@plt>
   1d1dc:	mov	r4, r0
   1d1e0:	mov	r0, r4
   1d1e4:	add	sp, sp, #12
   1d1e8:	ldrd	r4, [sp]
   1d1ec:	ldr	r6, [sp, #8]
   1d1f0:	ldr	lr, [sp, #12]
   1d1f4:	add	sp, sp, #16
   1d1f8:	add	sp, sp, #12
   1d1fc:	bx	lr
   1d200:	ldr	r3, [sp, #4]
   1d204:	add	r2, r3, #4
   1d208:	str	r2, [sp, #4]
   1d20c:	ldr	r6, [r3]
   1d210:	movw	r3, #940	; 0x3ac
   1d214:	movt	r3, #3
   1d218:	ldr	r3, [r3]
   1d21c:	cmp	r3, #0
   1d220:	blt	1d288 <__assert_fail@plt+0xba34>
   1d224:	mov	r2, r6
   1d228:	movw	r1, #1030	; 0x406
   1d22c:	bl	1174c <fcntl64@plt>
   1d230:	subs	r4, r0, #0
   1d234:	blt	1d24c <__assert_fail@plt+0xb9f8>
   1d238:	movw	r3, #940	; 0x3ac
   1d23c:	movt	r3, #3
   1d240:	mov	r2, #1
   1d244:	str	r2, [r3]
   1d248:	b	1d1e0 <__assert_fail@plt+0xb98c>
   1d24c:	bl	116b0 <__errno_location@plt>
   1d250:	ldr	r3, [r0]
   1d254:	cmp	r3, #22
   1d258:	bne	1d238 <__assert_fail@plt+0xb9e4>
   1d25c:	mov	r2, r6
   1d260:	mov	r1, #0
   1d264:	mov	r0, r5
   1d268:	bl	1174c <fcntl64@plt>
   1d26c:	subs	r4, r0, #0
   1d270:	blt	1d1e0 <__assert_fail@plt+0xb98c>
   1d274:	movw	r3, #940	; 0x3ac
   1d278:	movt	r3, #3
   1d27c:	mvn	r2, #0
   1d280:	str	r2, [r3]
   1d284:	b	1d2b0 <__assert_fail@plt+0xba5c>
   1d288:	mov	r2, r6
   1d28c:	mov	r1, #0
   1d290:	bl	1174c <fcntl64@plt>
   1d294:	subs	r4, r0, #0
   1d298:	blt	1d1e0 <__assert_fail@plt+0xb98c>
   1d29c:	movw	r3, #940	; 0x3ac
   1d2a0:	movt	r3, #3
   1d2a4:	ldr	r3, [r3]
   1d2a8:	cmn	r3, #1
   1d2ac:	bne	1d1e0 <__assert_fail@plt+0xb98c>
   1d2b0:	mov	r1, #1
   1d2b4:	mov	r0, r4
   1d2b8:	bl	1174c <fcntl64@plt>
   1d2bc:	subs	r2, r0, #0
   1d2c0:	blt	1d2dc <__assert_fail@plt+0xba88>
   1d2c4:	orr	r2, r2, #1
   1d2c8:	mov	r1, #2
   1d2cc:	mov	r0, r4
   1d2d0:	bl	1174c <fcntl64@plt>
   1d2d4:	cmn	r0, #1
   1d2d8:	bne	1d1e0 <__assert_fail@plt+0xb98c>
   1d2dc:	bl	116b0 <__errno_location@plt>
   1d2e0:	mov	r5, r0
   1d2e4:	ldr	r6, [r0]
   1d2e8:	mov	r0, r4
   1d2ec:	bl	11830 <close@plt>
   1d2f0:	str	r6, [r5]
   1d2f4:	mvn	r4, #0
   1d2f8:	b	1d1e0 <__assert_fail@plt+0xb98c>
   1d2fc:	cmp	r1, #1
   1d300:	beq	1d3b0 <__assert_fail@plt+0xbb5c>
   1d304:	bgt	1d31c <__assert_fail@plt+0xbac8>
   1d308:	cmp	r1, #0
   1d30c:	bne	1d374 <__assert_fail@plt+0xbb20>
   1d310:	b	1d31c <__assert_fail@plt+0xbac8>
   1d314:	cmp	r1, #4
   1d318:	bne	1d374 <__assert_fail@plt+0xbb20>
   1d31c:	ldr	r3, [sp, #4]
   1d320:	add	r2, r3, #4
   1d324:	str	r2, [sp, #4]
   1d328:	ldr	r2, [r3]
   1d32c:	mov	r0, r5
   1d330:	bl	1174c <fcntl64@plt>
   1d334:	mov	r4, r0
   1d338:	b	1d1e0 <__assert_fail@plt+0xb98c>
   1d33c:	movw	r3, #1031	; 0x407
   1d340:	cmp	r1, r3
   1d344:	bgt	1d394 <__assert_fail@plt+0xbb40>
   1d348:	movw	r3, #1030	; 0x406
   1d34c:	cmp	r1, r3
   1d350:	bge	1d31c <__assert_fail@plt+0xbac8>
   1d354:	movw	r3, #1025	; 0x401
   1d358:	cmp	r1, r3
   1d35c:	beq	1d3b0 <__assert_fail@plt+0xbb5c>
   1d360:	movw	r3, #1026	; 0x402
   1d364:	cmp	r1, r3
   1d368:	beq	1d31c <__assert_fail@plt+0xbac8>
   1d36c:	cmp	r1, #1024	; 0x400
   1d370:	beq	1d31c <__assert_fail@plt+0xbac8>
   1d374:	ldr	r3, [sp, #4]
   1d378:	add	r2, r3, #4
   1d37c:	str	r2, [sp, #4]
   1d380:	ldr	r2, [r3]
   1d384:	mov	r0, r5
   1d388:	bl	1174c <fcntl64@plt>
   1d38c:	mov	r4, r0
   1d390:	b	1d1e0 <__assert_fail@plt+0xb98c>
   1d394:	movw	r3, #1033	; 0x409
   1d398:	cmp	r1, r3
   1d39c:	beq	1d31c <__assert_fail@plt+0xbac8>
   1d3a0:	blt	1d3b0 <__assert_fail@plt+0xbb5c>
   1d3a4:	movw	r3, #1034	; 0x40a
   1d3a8:	cmp	r1, r3
   1d3ac:	bne	1d374 <__assert_fail@plt+0xbb20>
   1d3b0:	mov	r0, r5
   1d3b4:	bl	1174c <fcntl64@plt>
   1d3b8:	mov	r4, r0
   1d3bc:	b	1d1e0 <__assert_fail@plt+0xb98c>
   1d3c0:	cmp	r3, #0
   1d3c4:	cmpeq	r2, #0
   1d3c8:	bne	1d3ec <__assert_fail@plt+0xbb98>
   1d3cc:	cmp	r1, #0
   1d3d0:	movlt	r1, #-2147483648	; 0x80000000
   1d3d4:	movlt	r0, #0
   1d3d8:	blt	1d3e8 <__assert_fail@plt+0xbb94>
   1d3dc:	cmpeq	r0, #0
   1d3e0:	mvnne	r1, #-2147483648	; 0x80000000
   1d3e4:	mvnne	r0, #0
   1d3e8:	b	1d494 <__assert_fail@plt+0xbc40>
   1d3ec:	sub	sp, sp, #8
   1d3f0:	push	{sp, lr}
   1d3f4:	cmp	r1, #0
   1d3f8:	blt	1d418 <__assert_fail@plt+0xbbc4>
   1d3fc:	cmp	r3, #0
   1d400:	blt	1d44c <__assert_fail@plt+0xbbf8>
   1d404:	bl	1d4a4 <__assert_fail@plt+0xbc50>
   1d408:	ldr	lr, [sp, #4]
   1d40c:	add	sp, sp, #8
   1d410:	pop	{r2, r3}
   1d414:	bx	lr
   1d418:	rsbs	r0, r0, #0
   1d41c:	sbc	r1, r1, r1, lsl #1
   1d420:	cmp	r3, #0
   1d424:	blt	1d470 <__assert_fail@plt+0xbc1c>
   1d428:	bl	1d4a4 <__assert_fail@plt+0xbc50>
   1d42c:	ldr	lr, [sp, #4]
   1d430:	add	sp, sp, #8
   1d434:	pop	{r2, r3}
   1d438:	rsbs	r0, r0, #0
   1d43c:	sbc	r1, r1, r1, lsl #1
   1d440:	rsbs	r2, r2, #0
   1d444:	sbc	r3, r3, r3, lsl #1
   1d448:	bx	lr
   1d44c:	rsbs	r2, r2, #0
   1d450:	sbc	r3, r3, r3, lsl #1
   1d454:	bl	1d4a4 <__assert_fail@plt+0xbc50>
   1d458:	ldr	lr, [sp, #4]
   1d45c:	add	sp, sp, #8
   1d460:	pop	{r2, r3}
   1d464:	rsbs	r0, r0, #0
   1d468:	sbc	r1, r1, r1, lsl #1
   1d46c:	bx	lr
   1d470:	rsbs	r2, r2, #0
   1d474:	sbc	r3, r3, r3, lsl #1
   1d478:	bl	1d4a4 <__assert_fail@plt+0xbc50>
   1d47c:	ldr	lr, [sp, #4]
   1d480:	add	sp, sp, #8
   1d484:	pop	{r2, r3}
   1d488:	rsbs	r2, r2, #0
   1d48c:	sbc	r3, r3, r3, lsl #1
   1d490:	bx	lr
   1d494:	push	{r1, lr}
   1d498:	mov	r0, #8
   1d49c:	bl	11434 <raise@plt>
   1d4a0:	pop	{r1, pc}
   1d4a4:	cmp	r1, r3
   1d4a8:	cmpeq	r0, r2
   1d4ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4b0:	mov	r4, r0
   1d4b4:	movcc	r0, #0
   1d4b8:	mov	r5, r1
   1d4bc:	ldr	lr, [sp, #36]	; 0x24
   1d4c0:	movcc	r1, r0
   1d4c4:	bcc	1d5c0 <__assert_fail@plt+0xbd6c>
   1d4c8:	cmp	r3, #0
   1d4cc:	clzeq	ip, r2
   1d4d0:	clzne	ip, r3
   1d4d4:	addeq	ip, ip, #32
   1d4d8:	cmp	r5, #0
   1d4dc:	clzeq	r1, r4
   1d4e0:	addeq	r1, r1, #32
   1d4e4:	clzne	r1, r5
   1d4e8:	sub	ip, ip, r1
   1d4ec:	sub	sl, ip, #32
   1d4f0:	lsl	r9, r3, ip
   1d4f4:	rsb	fp, ip, #32
   1d4f8:	orr	r9, r9, r2, lsl sl
   1d4fc:	orr	r9, r9, r2, lsr fp
   1d500:	lsl	r8, r2, ip
   1d504:	cmp	r5, r9
   1d508:	cmpeq	r4, r8
   1d50c:	movcc	r0, #0
   1d510:	movcc	r1, r0
   1d514:	bcc	1d530 <__assert_fail@plt+0xbcdc>
   1d518:	mov	r0, #1
   1d51c:	subs	r4, r4, r8
   1d520:	lsl	r1, r0, sl
   1d524:	orr	r1, r1, r0, lsr fp
   1d528:	lsl	r0, r0, ip
   1d52c:	sbc	r5, r5, r9
   1d530:	cmp	ip, #0
   1d534:	beq	1d5c0 <__assert_fail@plt+0xbd6c>
   1d538:	lsr	r6, r8, #1
   1d53c:	orr	r6, r6, r9, lsl #31
   1d540:	lsr	r7, r9, #1
   1d544:	mov	r2, ip
   1d548:	b	1d56c <__assert_fail@plt+0xbd18>
   1d54c:	subs	r3, r4, r6
   1d550:	sbc	r8, r5, r7
   1d554:	adds	r3, r3, r3
   1d558:	adc	r8, r8, r8
   1d55c:	adds	r4, r3, #1
   1d560:	adc	r5, r8, #0
   1d564:	subs	r2, r2, #1
   1d568:	beq	1d588 <__assert_fail@plt+0xbd34>
   1d56c:	cmp	r5, r7
   1d570:	cmpeq	r4, r6
   1d574:	bcs	1d54c <__assert_fail@plt+0xbcf8>
   1d578:	adds	r4, r4, r4
   1d57c:	adc	r5, r5, r5
   1d580:	subs	r2, r2, #1
   1d584:	bne	1d56c <__assert_fail@plt+0xbd18>
   1d588:	lsr	r3, r4, ip
   1d58c:	orr	r3, r3, r5, lsl fp
   1d590:	lsr	r2, r5, ip
   1d594:	orr	r3, r3, r5, lsr sl
   1d598:	adds	r0, r0, r4
   1d59c:	mov	r4, r3
   1d5a0:	lsl	r3, r2, ip
   1d5a4:	orr	r3, r3, r4, lsl sl
   1d5a8:	lsl	ip, r4, ip
   1d5ac:	orr	r3, r3, r4, lsr fp
   1d5b0:	adc	r1, r1, r5
   1d5b4:	subs	r0, r0, ip
   1d5b8:	mov	r5, r2
   1d5bc:	sbc	r1, r1, r3
   1d5c0:	cmp	lr, #0
   1d5c4:	strdne	r4, [lr]
   1d5c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d5d0:	mov	r7, r0
   1d5d4:	ldr	r6, [pc, #72]	; 1d624 <__assert_fail@plt+0xbdd0>
   1d5d8:	ldr	r5, [pc, #72]	; 1d628 <__assert_fail@plt+0xbdd4>
   1d5dc:	add	r6, pc, r6
   1d5e0:	add	r5, pc, r5
   1d5e4:	sub	r6, r6, r5
   1d5e8:	mov	r8, r1
   1d5ec:	mov	r9, r2
   1d5f0:	bl	113fc <calloc@plt-0x20>
   1d5f4:	asrs	r6, r6, #2
   1d5f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d5fc:	mov	r4, #0
   1d600:	add	r4, r4, #1
   1d604:	ldr	r3, [r5], #4
   1d608:	mov	r2, r9
   1d60c:	mov	r1, r8
   1d610:	mov	r0, r7
   1d614:	blx	r3
   1d618:	cmp	r6, r4
   1d61c:	bne	1d600 <__assert_fail@plt+0xbdac>
   1d620:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d624:	andeq	r2, r1, r8, lsr #18
   1d628:	andeq	r2, r1, r0, lsr #18
   1d62c:	bx	lr
   1d630:	ldr	r3, [pc, #12]	; 1d644 <__assert_fail@plt+0xbdf0>
   1d634:	mov	r1, #0
   1d638:	add	r3, pc, r3
   1d63c:	ldr	r2, [r3]
   1d640:	b	116c8 <__cxa_atexit@plt>
   1d644:	andeq	r2, r1, r0, asr #22

Disassembly of section .fini:

0001d648 <.fini>:
   1d648:	push	{r3, lr}
   1d64c:	pop	{r3, pc}
