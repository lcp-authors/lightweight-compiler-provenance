
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011f04 <.init>:
   11f04:	push	{r3, lr}
   11f08:	bl	12164 <_start@@Base+0x3c>
   11f0c:	pop	{r3, pc}

Disassembly of section .plt:

00011f10 <fdopen@plt-0x14>:
   11f10:	push	{lr}		; (str lr, [sp, #-4]!)
   11f14:	ldr	lr, [pc, #4]	; 11f20 <fdopen@plt-0x4>
   11f18:	add	lr, pc, lr
   11f1c:	ldr	pc, [lr, #8]!
   11f20:	andeq	sl, r1, r0, ror #1

00011f24 <fdopen@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #106496	; 0x1a000
   11f2c:	ldr	pc, [ip, #224]!	; 0xe0

00011f30 <strtol@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #106496	; 0x1a000
   11f38:	ldr	pc, [ip, #216]!	; 0xd8

00011f3c <fopen@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #106496	; 0x1a000
   11f44:	ldr	pc, [ip, #208]!	; 0xd0

00011f48 <fflush@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #106496	; 0x1a000
   11f50:	ldr	pc, [ip, #200]!	; 0xc8

00011f54 <free@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #106496	; 0x1a000
   11f5c:	ldr	pc, [ip, #192]!	; 0xc0

00011f60 <memcpy@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #106496	; 0x1a000
   11f68:	ldr	pc, [ip, #184]!	; 0xb8

00011f6c <mmap64@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #106496	; 0x1a000
   11f74:	ldr	pc, [ip, #176]!	; 0xb0

00011f78 <ftell@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #106496	; 0x1a000
   11f80:	ldr	pc, [ip, #168]!	; 0xa8

00011f84 <uname@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #106496	; 0x1a000
   11f8c:	ldr	pc, [ip, #160]!	; 0xa0

00011f90 <strdup@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #106496	; 0x1a000
   11f98:	ldr	pc, [ip, #152]!	; 0x98

00011f9c <realloc@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #106496	; 0x1a000
   11fa4:	ldr	pc, [ip, #144]!	; 0x90

00011fa8 <fwrite@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #106496	; 0x1a000
   11fb0:	ldr	pc, [ip, #136]!	; 0x88

00011fb4 <open64@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #106496	; 0x1a000
   11fbc:	ldr	pc, [ip, #128]!	; 0x80

00011fc0 <getenv@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #106496	; 0x1a000
   11fc8:	ldr	pc, [ip, #120]!	; 0x78

00011fcc <malloc@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #106496	; 0x1a000
   11fd4:	ldr	pc, [ip, #112]!	; 0x70

00011fd8 <__libc_start_main@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #106496	; 0x1a000
   11fe0:	ldr	pc, [ip, #104]!	; 0x68

00011fe4 <strerror@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #106496	; 0x1a000
   11fec:	ldr	pc, [ip, #96]!	; 0x60

00011ff0 <__gmon_start__@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #106496	; 0x1a000
   11ff8:	ldr	pc, [ip, #88]!	; 0x58

00011ffc <getpid@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #106496	; 0x1a000
   12004:	ldr	pc, [ip, #80]!	; 0x50

00012008 <exit@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #106496	; 0x1a000
   12010:	ldr	pc, [ip, #72]!	; 0x48

00012014 <strlen@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #106496	; 0x1a000
   1201c:	ldr	pc, [ip, #64]!	; 0x40

00012020 <strchr@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #106496	; 0x1a000
   12028:	ldr	pc, [ip, #56]!	; 0x38

0001202c <getopt@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #106496	; 0x1a000
   12034:	ldr	pc, [ip, #48]!	; 0x30

00012038 <fprintf@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #106496	; 0x1a000
   12040:	ldr	pc, [ip, #40]!	; 0x28

00012044 <__errno_location@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #106496	; 0x1a000
   1204c:	ldr	pc, [ip, #32]!

00012050 <__cxa_atexit@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #106496	; 0x1a000
   12058:	ldr	pc, [ip, #24]!

0001205c <mkdir@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #106496	; 0x1a000
   12064:	ldr	pc, [ip, #16]!

00012068 <memset@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #106496	; 0x1a000
   12070:	ldr	pc, [ip, #8]!

00012074 <strncpy@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #106496	; 0x1a000
   1207c:	ldr	pc, [ip, #0]!

00012080 <prctl@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #102400	; 0x19000
   12088:	ldr	pc, [ip, #4088]!	; 0xff8

0001208c <fileno@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #102400	; 0x19000
   12094:	ldr	pc, [ip, #4080]!	; 0xff0

00012098 <fclose@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #102400	; 0x19000
   120a0:	ldr	pc, [ip, #4072]!	; 0xfe8

000120a4 <strnlen@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #102400	; 0x19000
   120ac:	ldr	pc, [ip, #4064]!	; 0xfe0

000120b0 <munmap@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #102400	; 0x19000
   120b8:	ldr	pc, [ip, #4056]!	; 0xfd8

000120bc <fcntl64@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #102400	; 0x19000
   120c4:	ldr	pc, [ip, #4048]!	; 0xfd0

000120c8 <strrchr@plt>:
   120c8:	add	ip, pc, #0, 12
   120cc:	add	ip, ip, #102400	; 0x19000
   120d0:	ldr	pc, [ip, #4040]!	; 0xfc8

000120d4 <fputc@plt>:
   120d4:	add	ip, pc, #0, 12
   120d8:	add	ip, ip, #102400	; 0x19000
   120dc:	ldr	pc, [ip, #4032]!	; 0xfc0

000120e0 <msync@plt>:
   120e0:	add	ip, pc, #0, 12
   120e4:	add	ip, ip, #102400	; 0x19000
   120e8:	ldr	pc, [ip, #4024]!	; 0xfb8

000120ec <atoi@plt>:
   120ec:	add	ip, pc, #0, 12
   120f0:	add	ip, ip, #102400	; 0x19000
   120f4:	ldr	pc, [ip, #4016]!	; 0xfb0

000120f8 <fread_unlocked@plt>:
   120f8:	add	ip, pc, #0, 12
   120fc:	add	ip, ip, #102400	; 0x19000
   12100:	ldr	pc, [ip, #4008]!	; 0xfa8

00012104 <fseek@plt>:
   12104:	add	ip, pc, #0, 12
   12108:	add	ip, ip, #102400	; 0x19000
   1210c:	ldr	pc, [ip, #4000]!	; 0xfa0

00012110 <strncmp@plt>:
   12110:	add	ip, pc, #0, 12
   12114:	add	ip, ip, #102400	; 0x19000
   12118:	ldr	pc, [ip, #3992]!	; 0xf98

0001211c <abort@plt>:
   1211c:	add	ip, pc, #0, 12
   12120:	add	ip, ip, #102400	; 0x19000
   12124:	ldr	pc, [ip, #3984]!	; 0xf90

Disassembly of section .text:

00012128 <_start@@Base>:
   12128:	mov	fp, #0
   1212c:	mov	lr, #0
   12130:	pop	{r1}		; (ldr r1, [sp], #4)
   12134:	mov	r2, sp
   12138:	push	{r2}		; (str r2, [sp, #-4]!)
   1213c:	push	{r0}		; (str r0, [sp, #-4]!)
   12140:	ldr	ip, [pc, #16]	; 12158 <_start@@Base+0x30>
   12144:	push	{ip}		; (str ip, [sp, #-4]!)
   12148:	ldr	r0, [pc, #12]	; 1215c <_start@@Base+0x34>
   1214c:	ldr	r3, [pc, #12]	; 12160 <_start@@Base+0x38>
   12150:	bl	11fd8 <__libc_start_main@plt>
   12154:	bl	1211c <abort@plt>
   12158:	andeq	r9, r1, r4, lsl #19
   1215c:			; <UNDEFINED> instruction: 0x000124bc
   12160:	andeq	r9, r1, r4, lsr #18
   12164:	ldr	r3, [pc, #20]	; 12180 <_start@@Base+0x58>
   12168:	ldr	r2, [pc, #20]	; 12184 <_start@@Base+0x5c>
   1216c:	add	r3, pc, r3
   12170:	ldr	r2, [r3, r2]
   12174:	cmp	r2, #0
   12178:	bxeq	lr
   1217c:	b	11ff0 <__gmon_start__@plt>
   12180:	andeq	r9, r1, ip, lsl #29
   12184:	andeq	r0, r0, r8, asr #1
   12188:	ldr	r0, [pc, #24]	; 121a8 <_start@@Base+0x80>
   1218c:	ldr	r3, [pc, #24]	; 121ac <_start@@Base+0x84>
   12190:	cmp	r3, r0
   12194:	bxeq	lr
   12198:	ldr	r3, [pc, #16]	; 121b0 <_start@@Base+0x88>
   1219c:	cmp	r3, #0
   121a0:	bxeq	lr
   121a4:	bx	r3
   121a8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   121ac:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   121b0:	andeq	r0, r0, r0
   121b4:	ldr	r0, [pc, #36]	; 121e0 <_start@@Base+0xb8>
   121b8:	ldr	r1, [pc, #36]	; 121e4 <_start@@Base+0xbc>
   121bc:	sub	r1, r1, r0
   121c0:	asr	r1, r1, #2
   121c4:	add	r1, r1, r1, lsr #31
   121c8:	asrs	r1, r1, #1
   121cc:	bxeq	lr
   121d0:	ldr	r3, [pc, #16]	; 121e8 <_start@@Base+0xc0>
   121d4:	cmp	r3, #0
   121d8:	bxeq	lr
   121dc:	bx	r3
   121e0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   121e4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   121e8:	andeq	r0, r0, r0
   121ec:	push	{r4, lr}
   121f0:	ldr	r4, [pc, #24]	; 12210 <_start@@Base+0xe8>
   121f4:	ldrb	r3, [r4]
   121f8:	cmp	r3, #0
   121fc:	popne	{r4, pc}
   12200:	bl	12188 <_start@@Base+0x60>
   12204:	mov	r3, #1
   12208:	strb	r3, [r4]
   1220c:	pop	{r4, pc}
   12210:	strdeq	ip, [r2], -r4
   12214:	b	121b4 <_start@@Base+0x8c>

00012218 <load_file@@Base>:
   12218:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1221c:	add	fp, sp, #24
   12220:	mov	r5, r0
   12224:	movw	r7, #49408	; 0xc100
   12228:	movt	r7, #2
   1222c:	ldrd	r0, [r7]
   12230:	adds	r0, r0, #1
   12234:	adc	r1, r1, #0
   12238:	strd	r0, [r7]
   1223c:	movw	r1, #41254	; 0xa126
   12240:	movt	r1, #1
   12244:	mov	r0, r5
   12248:	bl	11f3c <fopen@plt>
   1224c:	cmp	r0, #0
   12250:	beq	1228c <load_file@@Base+0x74>
   12254:	mov	r4, r0
   12258:	ldrd	r0, [r7, #8]
   1225c:	adds	r0, r0, #1
   12260:	adc	r1, r1, #0
   12264:	strd	r0, [r7, #8]
   12268:	mov	r6, #0
   1226c:	mov	r0, r4
   12270:	mov	r1, #0
   12274:	mov	r2, #2
   12278:	bl	12104 <fseek@plt>
   1227c:	cmp	r0, #0
   12280:	beq	12298 <load_file@@Base+0x80>
   12284:	add	r0, r7, #32
   12288:	b	12338 <load_file@@Base+0x120>
   1228c:	add	r0, r7, #16
   12290:	mov	r6, #0
   12294:	b	12354 <load_file@@Base+0x13c>
   12298:	ldrd	r0, [r7, #24]
   1229c:	adds	r0, r0, #1
   122a0:	adc	r1, r1, #0
   122a4:	strd	r0, [r7, #24]
   122a8:	mov	r0, r4
   122ac:	bl	11f78 <ftell@plt>
   122b0:	cmn	r0, #1
   122b4:	beq	1237c <load_file@@Base+0x164>
   122b8:	mov	r8, r0
   122bc:	ldrd	r0, [r7, #48]	; 0x30
   122c0:	adds	r0, r0, #1
   122c4:	adc	r1, r1, #0
   122c8:	strd	r0, [r7, #48]	; 0x30
   122cc:	add	r0, r8, #1
   122d0:	bl	11fcc <malloc@plt>
   122d4:	mov	r6, r0
   122d8:	mov	r0, r4
   122dc:	mov	r1, #0
   122e0:	mov	r2, #0
   122e4:	bl	12104 <fseek@plt>
   122e8:	cmp	r0, #0
   122ec:	bne	123a8 <load_file@@Base+0x190>
   122f0:	ldrd	r0, [r7, #64]	; 0x40
   122f4:	adds	r0, r0, #1
   122f8:	adc	r1, r1, #0
   122fc:	strd	r0, [r7, #64]	; 0x40
   12300:	mov	r0, r6
   12304:	mov	r1, #1
   12308:	mov	r2, r8
   1230c:	mov	r3, r4
   12310:	bl	120f8 <fread_unlocked@plt>
   12314:	cmp	r0, #0
   12318:	beq	123e0 <load_file@@Base+0x1c8>
   1231c:	ldrd	r2, [r7, #80]	; 0x50
   12320:	adds	r2, r2, #1
   12324:	adc	r3, r3, #0
   12328:	strd	r2, [r7, #80]	; 0x50
   1232c:	mov	r1, #0
   12330:	strb	r1, [r6, r0]
   12334:	add	r0, r7, #88	; 0x58
   12338:	ldrd	r2, [r0]
   1233c:	adds	r2, r2, #1
   12340:	adc	r3, r3, #0
   12344:	strd	r2, [r0]
   12348:	mov	r0, r4
   1234c:	bl	12098 <fclose@plt>
   12350:	add	r0, r7, #96	; 0x60
   12354:	ldrd	r2, [r0]
   12358:	adds	r2, r2, #1
   1235c:	adc	r3, r3, #0
   12360:	strd	r2, [r0]
   12364:	ldrd	r0, [r7, #104]	; 0x68
   12368:	adds	r0, r0, #1
   1236c:	adc	r1, r1, #0
   12370:	strd	r0, [r7, #104]	; 0x68
   12374:	mov	r0, r6
   12378:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1237c:	ldrd	r0, [r7, #40]	; 0x28
   12380:	adds	r0, r0, #1
   12384:	adc	r1, r1, #0
   12388:	strd	r0, [r7, #40]	; 0x28
   1238c:	movw	r0, #49384	; 0xc0e8
   12390:	movt	r0, #2
   12394:	ldr	r3, [r0]
   12398:	movw	r0, #39348	; 0x99b4
   1239c:	movt	r0, #1
   123a0:	mov	r1, #51	; 0x33
   123a4:	b	123d0 <load_file@@Base+0x1b8>
   123a8:	ldrd	r0, [r7, #56]	; 0x38
   123ac:	adds	r0, r0, #1
   123b0:	adc	r1, r1, #0
   123b4:	strd	r0, [r7, #56]	; 0x38
   123b8:	movw	r0, #49384	; 0xc0e8
   123bc:	movt	r0, #2
   123c0:	ldr	r3, [r0]
   123c4:	movw	r0, #39400	; 0x99e8
   123c8:	movt	r0, #1
   123cc:	mov	r1, #49	; 0x31
   123d0:	mov	r2, #1
   123d4:	bl	11fa8 <fwrite@plt>
   123d8:	mov	r0, #1
   123dc:	bl	12008 <exit@plt>
   123e0:	ldrd	r0, [r7, #72]	; 0x48
   123e4:	adds	r0, r0, #1
   123e8:	adc	r1, r1, #0
   123ec:	strd	r0, [r7, #72]	; 0x48
   123f0:	movw	r0, #49384	; 0xc0e8
   123f4:	movt	r0, #2
   123f8:	ldr	r0, [r0]
   123fc:	movw	r1, #39450	; 0x9a1a
   12400:	movt	r1, #1
   12404:	mov	r2, r5
   12408:	bl	12038 <fprintf@plt>
   1240c:	mov	r0, #1
   12410:	bl	12008 <exit@plt>

00012414 <my_main@@Base>:
   12414:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12418:	add	fp, sp, #24
   1241c:	sub	sp, sp, #32
   12420:	mov	r8, r1
   12424:	movw	r1, #49520	; 0xc170
   12428:	movt	r1, #2
   1242c:	ldm	r1, {r2, r3, r7}
   12430:	ldr	r6, [r1, #12]
   12434:	adds	r2, r2, #1
   12438:	adc	r3, r3, #0
   1243c:	adds	r7, r7, #1
   12440:	adc	r6, r6, #0
   12444:	stm	r1, {r2, r3, r7}
   12448:	str	r6, [r1, #12]
   1244c:	bl	12218 <load_file@@Base>
   12450:	mov	r4, r0
   12454:	add	r6, sp, #20
   12458:	mov	r0, r6
   1245c:	mov	r1, r4
   12460:	bl	12ee4 <init_lexer@@Base>
   12464:	add	r7, sp, #16
   12468:	mov	r0, r7
   1246c:	mov	r1, r6
   12470:	bl	14f88 <init_grammar@@Base>
   12474:	mov	r5, sp
   12478:	mov	r0, r5
   1247c:	mov	r1, r7
   12480:	mov	r2, r8
   12484:	bl	15e98 <init_generator@@Base>
   12488:	mov	r0, r5
   1248c:	bl	15f30 <generate_code@@Base>
   12490:	mov	r0, r5
   12494:	bl	15efc <destroy_generator@@Base>
   12498:	mov	r0, r7
   1249c:	bl	14fc0 <destroy_grammar@@Base>
   124a0:	mov	r0, r6
   124a4:	bl	12f24 <destroy_lexer@@Base>
   124a8:	mov	r0, r4
   124ac:	bl	11f54 <free@plt>
   124b0:	mov	r0, #0
   124b4:	sub	sp, fp, #24
   124b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000124bc <main@@Base>:
   124bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124c0:	add	fp, sp, #28
   124c4:	sub	sp, sp, #4
   124c8:	mov	r4, r1
   124cc:	mov	r5, r0
   124d0:	movw	r7, #49536	; 0xc180
   124d4:	movt	r7, #2
   124d8:	ldm	r7, {r0, r1, r2, r3}
   124dc:	adds	r0, r0, #1
   124e0:	adc	r1, r1, #0
   124e4:	adds	r2, r2, #1
   124e8:	adc	r3, r3, #0
   124ec:	stm	r7, {r0, r1, r2, r3}
   124f0:	movw	r2, #39474	; 0x9a32
   124f4:	movt	r2, #1
   124f8:	mov	r0, r5
   124fc:	mov	r1, r4
   12500:	bl	1202c <getopt@plt>
   12504:	mov	r8, #0
   12508:	cmn	r0, #1
   1250c:	beq	1259c <main@@Base+0xe0>
   12510:	add	r6, r7, #40	; 0x28
   12514:	add	sl, r7, #48	; 0x30
   12518:	movw	r9, #39474	; 0x9a32
   1251c:	movt	r9, #1
   12520:	b	1255c <main@@Base+0xa0>
   12524:	ldrd	r2, [r0]
   12528:	adds	r2, r2, #1
   1252c:	adc	r3, r3, #0
   12530:	strd	r2, [r0]
   12534:	ldrd	r0, [r7, #56]	; 0x38
   12538:	adds	r0, r0, #1
   1253c:	adc	r1, r1, #0
   12540:	strd	r0, [r7, #56]	; 0x38
   12544:	mov	r0, r5
   12548:	mov	r1, r4
   1254c:	mov	r2, r9
   12550:	bl	1202c <getopt@plt>
   12554:	cmn	r0, #1
   12558:	beq	1259c <main@@Base+0xe0>
   1255c:	ldrd	r2, [r7, #16]
   12560:	adds	r2, r2, #1
   12564:	adc	r3, r3, #0
   12568:	strd	r2, [r7, #16]
   1256c:	cmp	r0, #111	; 0x6f
   12570:	mov	r0, r6
   12574:	bne	12524 <main@@Base+0x68>
   12578:	ldrd	r0, [r7, #32]
   1257c:	adds	r0, r0, #1
   12580:	adc	r1, r1, #0
   12584:	strd	r0, [r7, #32]
   12588:	movw	r0, #49392	; 0xc0f0
   1258c:	movt	r0, #2
   12590:	ldr	r8, [r0]
   12594:	mov	r0, sl
   12598:	b	12524 <main@@Base+0x68>
   1259c:	ldrd	r0, [r7, #24]
   125a0:	adds	r0, r0, #1
   125a4:	adc	r1, r1, #0
   125a8:	strd	r0, [r7, #24]
   125ac:	movw	r0, #49376	; 0xc0e0
   125b0:	movt	r0, #2
   125b4:	ldr	r0, [r0]
   125b8:	cmp	r0, r5
   125bc:	bge	1260c <main@@Base+0x150>
   125c0:	ldrd	r2, [r7, #64]	; 0x40
   125c4:	ldr	r6, [r7, #80]	; 0x50
   125c8:	ldr	r1, [r7, #84]	; 0x54
   125cc:	adds	r2, r2, #1
   125d0:	adc	r3, r3, #0
   125d4:	adds	r6, r6, #1
   125d8:	str	r6, [r7, #80]	; 0x50
   125dc:	strd	r2, [r7, #64]	; 0x40
   125e0:	adc	r1, r1, #0
   125e4:	str	r1, [r7, #84]	; 0x54
   125e8:	ldr	r0, [r4, r0, lsl #2]
   125ec:	movw	r1, #39477	; 0x9a35
   125f0:	movt	r1, #1
   125f4:	cmp	r8, #0
   125f8:	movne	r1, r8
   125fc:	bl	12414 <my_main@@Base>
   12600:	mov	r0, #0
   12604:	sub	sp, fp, #28
   12608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1260c:	ldrd	r0, [r7, #72]	; 0x48
   12610:	adds	r0, r0, #1
   12614:	adc	r1, r1, #0
   12618:	strd	r0, [r7, #72]	; 0x48
   1261c:	movw	r0, #49384	; 0xc0e8
   12620:	movt	r0, #2
   12624:	ldr	r3, [r0]
   12628:	movw	r0, #39481	; 0x9a39
   1262c:	movt	r0, #1
   12630:	mov	r1, #45	; 0x2d
   12634:	mov	r2, #1
   12638:	bl	11fa8 <fwrite@plt>
   1263c:	mov	r0, #1
   12640:	bl	12008 <exit@plt>
   12644:	push	{r4, r5, r6, lr}
   12648:	sub	sp, sp, #8
   1264c:	movw	r0, #39527	; 0x9a67
   12650:	movt	r0, #1
   12654:	movw	r1, #39605	; 0x9ab5
   12658:	movt	r1, #1
   1265c:	movw	r2, #61536	; 0xf060
   12660:	movt	r2, #32426	; 0x7eaa
   12664:	bl	1696c <__generate_code_for_binary_boolean_expression@@Base+0x410>
   12668:	movw	r0, #39696	; 0x9b10
   1266c:	movt	r0, #1
   12670:	add	r4, r0, #4
   12674:	mov	r5, #0
   12678:	movw	r6, #39632	; 0x9ad0
   1267c:	movt	r6, #1
   12680:	mov	r3, r6
   12684:	ldr	r0, [r3, r5]!
   12688:	ldr	r1, [r3, #16]
   1268c:	str	r1, [sp]
   12690:	ldmib	r3, {r1, r2}
   12694:	ldrb	r3, [r3, #12]
   12698:	bl	1708c <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   1269c:	ldrd	r0, [r4, #-4]
   126a0:	bl	17940 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   126a4:	add	r5, r5, #20
   126a8:	add	r4, r4, #8
   126ac:	cmp	r5, #60	; 0x3c
   126b0:	bne	12680 <main@@Base+0x1c4>
   126b4:	bl	180c8 <__generate_code_for_binary_boolean_expression@@Base+0x1b6c>
   126b8:	add	sp, sp, #8
   126bc:	pop	{r4, r5, r6, lr}
   126c0:	b	18e34 <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   126c4:	push	{fp, lr}
   126c8:	bl	12644 <main@@Base+0x188>
   126cc:	movw	r0, #49408	; 0xc100
   126d0:	movt	r0, #2
   126d4:	vmov.i32	q8, #0	; 0x00000000
   126d8:	add	r1, r0, #80	; 0x50
   126dc:	vst1.64	{d16-d17}, [r1 :128]
   126e0:	add	r1, r0, #64	; 0x40
   126e4:	vst1.64	{d16-d17}, [r1 :128]
   126e8:	add	r1, r0, #48	; 0x30
   126ec:	vst1.64	{d16-d17}, [r1 :128]
   126f0:	add	r1, r0, #32
   126f4:	vst1.64	{d16-d17}, [r1 :128]
   126f8:	add	r1, r0, #16
   126fc:	vst1.64	{d16-d17}, [r1 :128]
   12700:	movw	r1, #49520	; 0xc170
   12704:	movt	r1, #2
   12708:	vst1.64	{d16-d17}, [r1]
   1270c:	movw	r1, #49536	; 0xc180
   12710:	movt	r1, #2
   12714:	add	r2, r1, #16
   12718:	vst1.64	{d16-d17}, [r2 :128]
   1271c:	add	r2, r1, #32
   12720:	vst1.64	{d16-d17}, [r2 :128]
   12724:	add	r2, r1, #48	; 0x30
   12728:	vst1.64	{d16-d17}, [r2 :128]
   1272c:	add	r2, r1, #64	; 0x40
   12730:	vst1.64	{d16-d17}, [r2 :128]
   12734:	mov	r2, #0
   12738:	str	r2, [r1, #80]	; 0x50
   1273c:	mov	r3, #96	; 0x60
   12740:	vst1.64	{d16-d17}, [r0 :128], r3
   12744:	vst1.64	{d16-d17}, [r0 :128]
   12748:	mov	r0, #84	; 0x54
   1274c:	vst1.64	{d16-d17}, [r1 :128], r0
   12750:	str	r2, [r1]
   12754:	pop	{fp, pc}
   12758:	movw	r0, #9796	; 0x2644
   1275c:	movt	r0, #1
   12760:	movw	r1, #9924	; 0x26c4
   12764:	movt	r1, #1
   12768:	b	192e8 <__gcov_flush@@Base+0xb8>

0001276c <init_token_int_type@@Base>:
   1276c:	push	{fp, lr}
   12770:	mov	fp, sp
   12774:	movw	r1, #49632	; 0xc1e0
   12778:	movt	r1, #2
   1277c:	ldm	r1, {r2, r3, ip, lr}
   12780:	adds	r2, r2, #1
   12784:	adc	r3, r3, #0
   12788:	adds	ip, ip, #1
   1278c:	adc	lr, lr, #0
   12790:	stm	r1, {r2, r3, ip, lr}
   12794:	mov	r1, #0
   12798:	str	r1, [r0]
   1279c:	pop	{fp, pc}

000127a0 <init_token_int_value@@Base>:
   127a0:	push	{r4, sl, fp, lr}
   127a4:	add	fp, sp, #8
   127a8:	movw	r2, #49648	; 0xc1f0
   127ac:	movt	r2, #2
   127b0:	ldm	r2, {r3, ip, lr}
   127b4:	ldr	r4, [r2, #12]
   127b8:	adds	r3, r3, #1
   127bc:	adc	ip, ip, #0
   127c0:	adds	lr, lr, #1
   127c4:	adc	r4, r4, #0
   127c8:	stm	r2, {r3, ip, lr}
   127cc:	str	r4, [r2, #12]
   127d0:	mov	r2, #1
   127d4:	str	r2, [r0]
   127d8:	str	r1, [r0, #4]
   127dc:	pop	{r4, sl, fp, pc}

000127e0 <init_token_function@@Base>:
   127e0:	push	{r4, sl, fp, lr}
   127e4:	add	fp, sp, #8
   127e8:	movw	r2, #49664	; 0xc200
   127ec:	movt	r2, #2
   127f0:	ldm	r2, {r3, ip, lr}
   127f4:	ldr	r4, [r2, #12]
   127f8:	adds	r3, r3, #1
   127fc:	adc	ip, ip, #0
   12800:	adds	lr, lr, #1
   12804:	adc	r4, r4, #0
   12808:	stm	r2, {r3, ip, lr}
   1280c:	str	r4, [r2, #12]
   12810:	mov	r2, #2
   12814:	str	r2, [r0]
   12818:	str	r1, [r0, #4]
   1281c:	pop	{r4, sl, fp, pc}

00012820 <init_token_opar@@Base>:
   12820:	push	{fp, lr}
   12824:	mov	fp, sp
   12828:	movw	r1, #49680	; 0xc210
   1282c:	movt	r1, #2
   12830:	ldm	r1, {r2, r3, ip, lr}
   12834:	adds	r2, r2, #1
   12838:	adc	r3, r3, #0
   1283c:	adds	ip, ip, #1
   12840:	adc	lr, lr, #0
   12844:	stm	r1, {r2, r3, ip, lr}
   12848:	mov	r1, #3
   1284c:	str	r1, [r0]
   12850:	pop	{fp, pc}

00012854 <init_token_cpar@@Base>:
   12854:	push	{fp, lr}
   12858:	mov	fp, sp
   1285c:	movw	r1, #49696	; 0xc220
   12860:	movt	r1, #2
   12864:	ldm	r1, {r2, r3, ip, lr}
   12868:	adds	r2, r2, #1
   1286c:	adc	r3, r3, #0
   12870:	adds	ip, ip, #1
   12874:	adc	lr, lr, #0
   12878:	stm	r1, {r2, r3, ip, lr}
   1287c:	mov	r1, #4
   12880:	str	r1, [r0]
   12884:	pop	{fp, pc}

00012888 <init_token_obra@@Base>:
   12888:	push	{fp, lr}
   1288c:	mov	fp, sp
   12890:	movw	r1, #49712	; 0xc230
   12894:	movt	r1, #2
   12898:	ldm	r1, {r2, r3, ip, lr}
   1289c:	adds	r2, r2, #1
   128a0:	adc	r3, r3, #0
   128a4:	adds	ip, ip, #1
   128a8:	adc	lr, lr, #0
   128ac:	stm	r1, {r2, r3, ip, lr}
   128b0:	mov	r1, #5
   128b4:	str	r1, [r0]
   128b8:	pop	{fp, pc}

000128bc <init_token_cbra@@Base>:
   128bc:	push	{fp, lr}
   128c0:	mov	fp, sp
   128c4:	movw	r1, #49728	; 0xc240
   128c8:	movt	r1, #2
   128cc:	ldm	r1, {r2, r3, ip, lr}
   128d0:	adds	r2, r2, #1
   128d4:	adc	r3, r3, #0
   128d8:	adds	ip, ip, #1
   128dc:	adc	lr, lr, #0
   128e0:	stm	r1, {r2, r3, ip, lr}
   128e4:	mov	r1, #6
   128e8:	str	r1, [r0]
   128ec:	pop	{fp, pc}

000128f0 <init_token_return@@Base>:
   128f0:	push	{fp, lr}
   128f4:	mov	fp, sp
   128f8:	movw	r1, #49744	; 0xc250
   128fc:	movt	r1, #2
   12900:	ldm	r1, {r2, r3, ip, lr}
   12904:	adds	r2, r2, #1
   12908:	adc	r3, r3, #0
   1290c:	adds	ip, ip, #1
   12910:	adc	lr, lr, #0
   12914:	stm	r1, {r2, r3, ip, lr}
   12918:	mov	r1, #7
   1291c:	str	r1, [r0]
   12920:	pop	{fp, pc}

00012924 <init_token_semicolon@@Base>:
   12924:	push	{fp, lr}
   12928:	mov	fp, sp
   1292c:	movw	r1, #49760	; 0xc260
   12930:	movt	r1, #2
   12934:	ldm	r1, {r2, r3, ip, lr}
   12938:	adds	r2, r2, #1
   1293c:	adc	r3, r3, #0
   12940:	adds	ip, ip, #1
   12944:	adc	lr, lr, #0
   12948:	stm	r1, {r2, r3, ip, lr}
   1294c:	mov	r1, #8
   12950:	str	r1, [r0]
   12954:	pop	{fp, pc}

00012958 <init_token_eof@@Base>:
   12958:	push	{fp, lr}
   1295c:	mov	fp, sp
   12960:	movw	r1, #49776	; 0xc270
   12964:	movt	r1, #2
   12968:	ldm	r1, {r2, r3, ip, lr}
   1296c:	adds	r2, r2, #1
   12970:	adc	r3, r3, #0
   12974:	adds	ip, ip, #1
   12978:	adc	lr, lr, #0
   1297c:	stm	r1, {r2, r3, ip, lr}
   12980:	mov	r1, #9
   12984:	str	r1, [r0]
   12988:	pop	{fp, pc}

0001298c <init_token_if@@Base>:
   1298c:	push	{fp, lr}
   12990:	mov	fp, sp
   12994:	movw	r1, #49792	; 0xc280
   12998:	movt	r1, #2
   1299c:	ldm	r1, {r2, r3, ip, lr}
   129a0:	adds	r2, r2, #1
   129a4:	adc	r3, r3, #0
   129a8:	adds	ip, ip, #1
   129ac:	adc	lr, lr, #0
   129b0:	stm	r1, {r2, r3, ip, lr}
   129b4:	mov	r1, #10
   129b8:	str	r1, [r0]
   129bc:	pop	{fp, pc}

000129c0 <init_token_else@@Base>:
   129c0:	push	{fp, lr}
   129c4:	mov	fp, sp
   129c8:	movw	r1, #49808	; 0xc290
   129cc:	movt	r1, #2
   129d0:	ldm	r1, {r2, r3, ip, lr}
   129d4:	adds	r2, r2, #1
   129d8:	adc	r3, r3, #0
   129dc:	adds	ip, ip, #1
   129e0:	adc	lr, lr, #0
   129e4:	stm	r1, {r2, r3, ip, lr}
   129e8:	mov	r1, #11
   129ec:	str	r1, [r0]
   129f0:	pop	{fp, pc}

000129f4 <init_token_boolean_op@@Base>:
   129f4:	push	{r4, sl, fp, lr}
   129f8:	add	fp, sp, #8
   129fc:	movw	r2, #49824	; 0xc2a0
   12a00:	movt	r2, #2
   12a04:	ldm	r2, {r3, ip, lr}
   12a08:	ldr	r4, [r2, #12]
   12a0c:	adds	r3, r3, #1
   12a10:	adc	ip, ip, #0
   12a14:	adds	lr, lr, #1
   12a18:	adc	r4, r4, #0
   12a1c:	stm	r2, {r3, ip, lr}
   12a20:	str	r4, [r2, #12]
   12a24:	mov	r2, #12
   12a28:	str	r2, [r0]
   12a2c:	str	r1, [r0, #4]
   12a30:	pop	{r4, sl, fp, pc}

00012a34 <free_token_int_type@@Base>:
   12a34:	push	{fp, lr}
   12a38:	mov	fp, sp
   12a3c:	movw	r1, #49840	; 0xc2b0
   12a40:	movt	r1, #2
   12a44:	ldm	r1, {r2, r3, ip, lr}
   12a48:	adds	r2, r2, #1
   12a4c:	adc	r3, r3, #0
   12a50:	adds	ip, ip, #1
   12a54:	adc	lr, lr, #0
   12a58:	stm	r1, {r2, r3, ip, lr}
   12a5c:	pop	{fp, lr}
   12a60:	b	11f54 <free@plt>

00012a64 <free_token_int_value@@Base>:
   12a64:	push	{fp, lr}
   12a68:	mov	fp, sp
   12a6c:	movw	r1, #49856	; 0xc2c0
   12a70:	movt	r1, #2
   12a74:	ldm	r1, {r2, r3, ip, lr}
   12a78:	adds	r2, r2, #1
   12a7c:	adc	r3, r3, #0
   12a80:	adds	ip, ip, #1
   12a84:	adc	lr, lr, #0
   12a88:	stm	r1, {r2, r3, ip, lr}
   12a8c:	pop	{fp, lr}
   12a90:	b	11f54 <free@plt>

00012a94 <free_token_function@@Base>:
   12a94:	push	{fp, lr}
   12a98:	mov	fp, sp
   12a9c:	movw	r1, #49872	; 0xc2d0
   12aa0:	movt	r1, #2
   12aa4:	ldm	r1, {r2, r3, ip, lr}
   12aa8:	adds	r2, r2, #1
   12aac:	adc	r3, r3, #0
   12ab0:	adds	ip, ip, #1
   12ab4:	adc	lr, lr, #0
   12ab8:	stm	r1, {r2, r3, ip, lr}
   12abc:	pop	{fp, lr}
   12ac0:	b	11f54 <free@plt>

00012ac4 <free_token_opar@@Base>:
   12ac4:	push	{fp, lr}
   12ac8:	mov	fp, sp
   12acc:	movw	r1, #49888	; 0xc2e0
   12ad0:	movt	r1, #2
   12ad4:	ldm	r1, {r2, r3, ip, lr}
   12ad8:	adds	r2, r2, #1
   12adc:	adc	r3, r3, #0
   12ae0:	adds	ip, ip, #1
   12ae4:	adc	lr, lr, #0
   12ae8:	stm	r1, {r2, r3, ip, lr}
   12aec:	pop	{fp, lr}
   12af0:	b	11f54 <free@plt>

00012af4 <free_token_cpar@@Base>:
   12af4:	push	{fp, lr}
   12af8:	mov	fp, sp
   12afc:	movw	r1, #49904	; 0xc2f0
   12b00:	movt	r1, #2
   12b04:	ldm	r1, {r2, r3, ip, lr}
   12b08:	adds	r2, r2, #1
   12b0c:	adc	r3, r3, #0
   12b10:	adds	ip, ip, #1
   12b14:	adc	lr, lr, #0
   12b18:	stm	r1, {r2, r3, ip, lr}
   12b1c:	pop	{fp, lr}
   12b20:	b	11f54 <free@plt>

00012b24 <free_token_obra@@Base>:
   12b24:	push	{fp, lr}
   12b28:	mov	fp, sp
   12b2c:	movw	r1, #49920	; 0xc300
   12b30:	movt	r1, #2
   12b34:	ldm	r1, {r2, r3, ip, lr}
   12b38:	adds	r2, r2, #1
   12b3c:	adc	r3, r3, #0
   12b40:	adds	ip, ip, #1
   12b44:	adc	lr, lr, #0
   12b48:	stm	r1, {r2, r3, ip, lr}
   12b4c:	pop	{fp, lr}
   12b50:	b	11f54 <free@plt>

00012b54 <free_token_cbra@@Base>:
   12b54:	push	{fp, lr}
   12b58:	mov	fp, sp
   12b5c:	movw	r1, #49936	; 0xc310
   12b60:	movt	r1, #2
   12b64:	ldm	r1, {r2, r3, ip, lr}
   12b68:	adds	r2, r2, #1
   12b6c:	adc	r3, r3, #0
   12b70:	adds	ip, ip, #1
   12b74:	adc	lr, lr, #0
   12b78:	stm	r1, {r2, r3, ip, lr}
   12b7c:	pop	{fp, lr}
   12b80:	b	11f54 <free@plt>

00012b84 <free_token_return@@Base>:
   12b84:	push	{fp, lr}
   12b88:	mov	fp, sp
   12b8c:	movw	r1, #49952	; 0xc320
   12b90:	movt	r1, #2
   12b94:	ldm	r1, {r2, r3, ip, lr}
   12b98:	adds	r2, r2, #1
   12b9c:	adc	r3, r3, #0
   12ba0:	adds	ip, ip, #1
   12ba4:	adc	lr, lr, #0
   12ba8:	stm	r1, {r2, r3, ip, lr}
   12bac:	pop	{fp, lr}
   12bb0:	b	11f54 <free@plt>

00012bb4 <free_token_semicolon@@Base>:
   12bb4:	push	{fp, lr}
   12bb8:	mov	fp, sp
   12bbc:	movw	r1, #49968	; 0xc330
   12bc0:	movt	r1, #2
   12bc4:	ldm	r1, {r2, r3, ip, lr}
   12bc8:	adds	r2, r2, #1
   12bcc:	adc	r3, r3, #0
   12bd0:	adds	ip, ip, #1
   12bd4:	adc	lr, lr, #0
   12bd8:	stm	r1, {r2, r3, ip, lr}
   12bdc:	pop	{fp, lr}
   12be0:	b	11f54 <free@plt>

00012be4 <free_token_eof@@Base>:
   12be4:	push	{fp, lr}
   12be8:	mov	fp, sp
   12bec:	movw	r1, #49984	; 0xc340
   12bf0:	movt	r1, #2
   12bf4:	ldm	r1, {r2, r3, ip, lr}
   12bf8:	adds	r2, r2, #1
   12bfc:	adc	r3, r3, #0
   12c00:	adds	ip, ip, #1
   12c04:	adc	lr, lr, #0
   12c08:	stm	r1, {r2, r3, ip, lr}
   12c0c:	pop	{fp, lr}
   12c10:	b	11f54 <free@plt>

00012c14 <free_token_if@@Base>:
   12c14:	push	{fp, lr}
   12c18:	mov	fp, sp
   12c1c:	movw	r1, #50000	; 0xc350
   12c20:	movt	r1, #2
   12c24:	ldm	r1, {r2, r3, ip, lr}
   12c28:	adds	r2, r2, #1
   12c2c:	adc	r3, r3, #0
   12c30:	adds	ip, ip, #1
   12c34:	adc	lr, lr, #0
   12c38:	stm	r1, {r2, r3, ip, lr}
   12c3c:	pop	{fp, lr}
   12c40:	b	11f54 <free@plt>

00012c44 <free_token_else@@Base>:
   12c44:	push	{fp, lr}
   12c48:	mov	fp, sp
   12c4c:	movw	r1, #50016	; 0xc360
   12c50:	movt	r1, #2
   12c54:	ldm	r1, {r2, r3, ip, lr}
   12c58:	adds	r2, r2, #1
   12c5c:	adc	r3, r3, #0
   12c60:	adds	ip, ip, #1
   12c64:	adc	lr, lr, #0
   12c68:	stm	r1, {r2, r3, ip, lr}
   12c6c:	pop	{fp, lr}
   12c70:	b	11f54 <free@plt>

00012c74 <free_token_boolean_op@@Base>:
   12c74:	push	{r4, r5, fp, lr}
   12c78:	add	fp, sp, #8
   12c7c:	mov	r4, r0
   12c80:	movw	r5, #50032	; 0xc370
   12c84:	movt	r5, #2
   12c88:	ldrd	r0, [r5]
   12c8c:	adds	r0, r0, #1
   12c90:	adc	r1, r1, #0
   12c94:	strd	r0, [r5]
   12c98:	ldr	r0, [r4, #4]
   12c9c:	cmp	r0, #0
   12ca0:	beq	12cc0 <free_token_boolean_op@@Base+0x4c>
   12ca4:	ldrd	r2, [r5, #8]
   12ca8:	adds	r2, r2, #1
   12cac:	adc	r3, r3, #0
   12cb0:	strd	r2, [r5, #8]
   12cb4:	bl	11f54 <free@plt>
   12cb8:	add	r0, r5, #24
   12cbc:	b	12cc4 <free_token_boolean_op@@Base+0x50>
   12cc0:	add	r0, r5, #16
   12cc4:	ldrd	r2, [r0]
   12cc8:	adds	r2, r2, #1
   12ccc:	adc	r3, r3, #0
   12cd0:	strd	r2, [r0]
   12cd4:	ldrd	r0, [r5, #32]
   12cd8:	adds	r0, r0, #1
   12cdc:	adc	r1, r1, #0
   12ce0:	strd	r0, [r5, #32]
   12ce4:	mov	r0, r4
   12ce8:	pop	{r4, r5, fp, lr}
   12cec:	b	11f54 <free@plt>
   12cf0:	push	{r4, r5, r6, lr}
   12cf4:	sub	sp, sp, #8
   12cf8:	movw	r0, #39720	; 0x9b28
   12cfc:	movt	r0, #1
   12d00:	movw	r1, #39605	; 0x9ab5
   12d04:	movt	r1, #1
   12d08:	movw	r2, #23366	; 0x5b46
   12d0c:	movt	r2, #47030	; 0xb7b6
   12d10:	bl	1696c <__generate_code_for_binary_boolean_expression@@Base+0x410>
   12d14:	movw	r0, #40800	; 0x9f60
   12d18:	movt	r0, #1
   12d1c:	add	r4, r0, #4
   12d20:	mov	r5, #0
   12d24:	movw	r6, #40272	; 0x9d50
   12d28:	movt	r6, #1
   12d2c:	mov	r3, r6
   12d30:	ldr	r0, [r3, r5]!
   12d34:	ldr	r1, [r3, #16]
   12d38:	str	r1, [sp]
   12d3c:	ldmib	r3, {r1, r2}
   12d40:	ldrb	r3, [r3, #12]
   12d44:	bl	1708c <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   12d48:	ldrd	r0, [r4, #-4]
   12d4c:	bl	17940 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   12d50:	add	r5, r5, #20
   12d54:	add	r4, r4, #8
   12d58:	cmp	r5, #520	; 0x208
   12d5c:	bne	12d2c <free_token_boolean_op@@Base+0xb8>
   12d60:	bl	180c8 <__generate_code_for_binary_boolean_expression@@Base+0x1b6c>
   12d64:	add	sp, sp, #8
   12d68:	pop	{r4, r5, r6, lr}
   12d6c:	b	18e34 <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   12d70:	push	{fp, lr}
   12d74:	bl	12cf0 <free_token_boolean_op@@Base+0x7c>
   12d78:	vmov.i32	q8, #0	; 0x00000000
   12d7c:	movw	r0, #49648	; 0xc1f0
   12d80:	movt	r0, #2
   12d84:	vst1.64	{d16-d17}, [r0]
   12d88:	movw	r0, #49632	; 0xc1e0
   12d8c:	movt	r0, #2
   12d90:	vst1.64	{d16-d17}, [r0]
   12d94:	movw	r0, #49664	; 0xc200
   12d98:	movt	r0, #2
   12d9c:	vst1.64	{d16-d17}, [r0]
   12da0:	movw	r0, #49680	; 0xc210
   12da4:	movt	r0, #2
   12da8:	vst1.64	{d16-d17}, [r0]
   12dac:	movw	r0, #49696	; 0xc220
   12db0:	movt	r0, #2
   12db4:	vst1.64	{d16-d17}, [r0]
   12db8:	movw	r0, #49712	; 0xc230
   12dbc:	movt	r0, #2
   12dc0:	vst1.64	{d16-d17}, [r0]
   12dc4:	movw	r0, #49728	; 0xc240
   12dc8:	movt	r0, #2
   12dcc:	vst1.64	{d16-d17}, [r0]
   12dd0:	movw	r0, #49744	; 0xc250
   12dd4:	movt	r0, #2
   12dd8:	vst1.64	{d16-d17}, [r0]
   12ddc:	movw	r0, #49760	; 0xc260
   12de0:	movt	r0, #2
   12de4:	vst1.64	{d16-d17}, [r0]
   12de8:	movw	r0, #49776	; 0xc270
   12dec:	movt	r0, #2
   12df0:	vst1.64	{d16-d17}, [r0]
   12df4:	movw	r0, #49792	; 0xc280
   12df8:	movt	r0, #2
   12dfc:	vst1.64	{d16-d17}, [r0]
   12e00:	movw	r0, #49808	; 0xc290
   12e04:	movt	r0, #2
   12e08:	vst1.64	{d16-d17}, [r0]
   12e0c:	movw	r0, #49824	; 0xc2a0
   12e10:	movt	r0, #2
   12e14:	vst1.64	{d16-d17}, [r0]
   12e18:	movw	r0, #49840	; 0xc2b0
   12e1c:	movt	r0, #2
   12e20:	vst1.64	{d16-d17}, [r0]
   12e24:	movw	r0, #49856	; 0xc2c0
   12e28:	movt	r0, #2
   12e2c:	vst1.64	{d16-d17}, [r0]
   12e30:	movw	r0, #49872	; 0xc2d0
   12e34:	movt	r0, #2
   12e38:	vst1.64	{d16-d17}, [r0]
   12e3c:	movw	r0, #49888	; 0xc2e0
   12e40:	movt	r0, #2
   12e44:	vst1.64	{d16-d17}, [r0]
   12e48:	movw	r0, #49904	; 0xc2f0
   12e4c:	movt	r0, #2
   12e50:	vst1.64	{d16-d17}, [r0]
   12e54:	movw	r0, #49920	; 0xc300
   12e58:	movt	r0, #2
   12e5c:	vst1.64	{d16-d17}, [r0]
   12e60:	movw	r0, #49936	; 0xc310
   12e64:	movt	r0, #2
   12e68:	vst1.64	{d16-d17}, [r0]
   12e6c:	movw	r0, #49952	; 0xc320
   12e70:	movt	r0, #2
   12e74:	vst1.64	{d16-d17}, [r0]
   12e78:	movw	r0, #49968	; 0xc330
   12e7c:	movt	r0, #2
   12e80:	vst1.64	{d16-d17}, [r0]
   12e84:	movw	r0, #49984	; 0xc340
   12e88:	movt	r0, #2
   12e8c:	vst1.64	{d16-d17}, [r0]
   12e90:	movw	r0, #50000	; 0xc350
   12e94:	movt	r0, #2
   12e98:	vst1.64	{d16-d17}, [r0]
   12e9c:	movw	r0, #50016	; 0xc360
   12ea0:	movt	r0, #2
   12ea4:	vst1.64	{d16-d17}, [r0]
   12ea8:	movw	r0, #50032	; 0xc370
   12eac:	movt	r0, #2
   12eb0:	mov	r1, #0
   12eb4:	str	r1, [r0, #32]
   12eb8:	add	r2, r0, #16
   12ebc:	vst1.64	{d16-d17}, [r2 :128]
   12ec0:	mov	r2, #36	; 0x24
   12ec4:	vst1.64	{d16-d17}, [r0 :128], r2
   12ec8:	str	r1, [r0]
   12ecc:	pop	{fp, pc}
   12ed0:	movw	r0, #11504	; 0x2cf0
   12ed4:	movt	r0, #1
   12ed8:	movw	r1, #11632	; 0x2d70
   12edc:	movt	r1, #1
   12ee0:	b	192e8 <__gcov_flush@@Base+0xb8>

00012ee4 <init_lexer@@Base>:
   12ee4:	push	{r4, sl, fp, lr}
   12ee8:	add	fp, sp, #8
   12eec:	movw	r2, #50080	; 0xc3a0
   12ef0:	movt	r2, #2
   12ef4:	ldm	r2, {r3, ip, lr}
   12ef8:	ldr	r4, [r2, #12]
   12efc:	adds	r3, r3, #1
   12f00:	adc	ip, ip, #0
   12f04:	adds	lr, lr, #1
   12f08:	adc	r4, r4, #0
   12f0c:	stm	r2, {r3, ip, lr}
   12f10:	str	r4, [r2, #12]
   12f14:	mov	r2, #0
   12f18:	stm	r0, {r1, r2}
   12f1c:	str	r2, [r0, #8]
   12f20:	pop	{r4, sl, fp, pc}

00012f24 <destroy_lexer@@Base>:
   12f24:	push	{r4, sl, fp, lr}
   12f28:	add	fp, sp, #8
   12f2c:	movw	r4, #50096	; 0xc3b0
   12f30:	movt	r4, #2
   12f34:	ldrd	r2, [r4]
   12f38:	adds	r2, r2, #1
   12f3c:	adc	r3, r3, #0
   12f40:	strd	r2, [r4]
   12f44:	ldr	r0, [r0, #4]
   12f48:	cmp	r0, #0
   12f4c:	beq	12f6c <destroy_lexer@@Base+0x48>
   12f50:	ldrd	r2, [r4, #8]
   12f54:	adds	r2, r2, #1
   12f58:	adc	r3, r3, #0
   12f5c:	strd	r2, [r4, #8]
   12f60:	bl	12f94 <free_stack_base@@Base>
   12f64:	add	r0, r4, #24
   12f68:	b	12f70 <destroy_lexer@@Base+0x4c>
   12f6c:	add	r0, r4, #16
   12f70:	ldrd	r2, [r0]
   12f74:	adds	r2, r2, #1
   12f78:	adc	r3, r3, #0
   12f7c:	strd	r2, [r0]
   12f80:	ldrd	r0, [r4, #32]
   12f84:	adds	r0, r0, #1
   12f88:	adc	r1, r1, #0
   12f8c:	strd	r0, [r4, #32]
   12f90:	pop	{r4, sl, fp, pc}

00012f94 <free_stack_base@@Base>:
   12f94:	push	{fp, lr}
   12f98:	mov	fp, sp
   12f9c:	movw	r1, #50136	; 0xc3d8
   12fa0:	movt	r1, #2
   12fa4:	ldm	r1, {r2, r3, ip, lr}
   12fa8:	adds	r2, r2, #1
   12fac:	adc	r3, r3, #0
   12fb0:	adds	ip, ip, #1
   12fb4:	adc	lr, lr, #0
   12fb8:	stm	r1, {r2, r3, ip, lr}
   12fbc:	pop	{fp, lr}
   12fc0:	b	11f54 <free@plt>

00012fc4 <push_back@@Base>:
   12fc4:	push	{r4, r5, r6, sl, fp, lr}
   12fc8:	add	fp, sp, #16
   12fcc:	mov	r6, r1
   12fd0:	mov	r5, r0
   12fd4:	movw	r0, #50152	; 0xc3e8
   12fd8:	movt	r0, #2
   12fdc:	ldm	r0, {r1, r2, r3, r4}
   12fe0:	adds	r1, r1, #1
   12fe4:	adc	r2, r2, #0
   12fe8:	adds	r3, r3, #1
   12fec:	adc	r4, r4, #0
   12ff0:	stm	r0, {r1, r2, r3, r4}
   12ff4:	mov	r0, #8
   12ff8:	bl	11fcc <malloc@plt>
   12ffc:	ldr	r1, [r5, #4]
   13000:	stm	r0, {r1, r6}
   13004:	str	r0, [r5, #4]
   13008:	pop	{r4, r5, r6, sl, fp, pc}

0001300c <get_char@@Base>:
   1300c:	push	{fp, lr}
   13010:	mov	fp, sp
   13014:	movw	r1, #50168	; 0xc3f8
   13018:	movt	r1, #2
   1301c:	ldm	r1, {r2, r3, ip, lr}
   13020:	adds	r2, r2, #1
   13024:	adc	r3, r3, #0
   13028:	adds	ip, ip, #1
   1302c:	adc	lr, lr, #0
   13030:	stm	r1, {r2, r3, ip, lr}
   13034:	ldr	r1, [r0]
   13038:	ldr	r2, [r0, #8]
   1303c:	add	r3, r2, #1
   13040:	str	r3, [r0, #8]
   13044:	ldrb	r0, [r1, r2]
   13048:	pop	{fp, pc}

0001304c <push_back_chars@@Base>:
   1304c:	push	{r4, r5, r6, r7, fp, lr}
   13050:	add	fp, sp, #16
   13054:	movw	r2, #50192	; 0xc410
   13058:	movt	r2, #2
   1305c:	ldrd	r4, [r2]
   13060:	adds	r4, r4, #1
   13064:	adc	r5, r5, #0
   13068:	strd	r4, [r2]
   1306c:	ldr	r3, [r0, #8]
   13070:	cmp	r3, r1
   13074:	bcc	130a8 <push_back_chars@@Base+0x5c>
   13078:	ldrd	r4, [r2, #8]
   1307c:	ldrd	r6, [r2, #24]
   13080:	adds	r4, r4, #1
   13084:	adc	r5, r5, #0
   13088:	adds	r6, r6, #1
   1308c:	str	r6, [r2, #24]
   13090:	strd	r4, [r2, #8]
   13094:	adc	r7, r7, #0
   13098:	str	r7, [r2, #28]
   1309c:	sub	r1, r3, r1
   130a0:	str	r1, [r0, #8]
   130a4:	pop	{r4, r5, r6, r7, fp, pc}
   130a8:	ldrd	r0, [r2, #16]
   130ac:	adds	r0, r0, #1
   130b0:	adc	r1, r1, #0
   130b4:	strd	r0, [r2, #16]
   130b8:	movw	r0, #49384	; 0xc0e8
   130bc:	movt	r0, #2
   130c0:	ldr	r3, [r0]
   130c4:	movw	r0, #41008	; 0xa030
   130c8:	movt	r0, #1
   130cc:	mov	r1, #32
   130d0:	mov	r2, #1
   130d4:	bl	11fa8 <fwrite@plt>
   130d8:	mov	r0, #1
   130dc:	bl	12008 <exit@plt>

000130e0 <push_back_one_char@@Base>:
   130e0:	push	{fp, lr}
   130e4:	mov	fp, sp
   130e8:	movw	r1, #50224	; 0xc430
   130ec:	movt	r1, #2
   130f0:	ldm	r1, {r2, r3, ip, lr}
   130f4:	adds	r2, r2, #1
   130f8:	adc	r3, r3, #0
   130fc:	adds	ip, ip, #1
   13100:	adc	lr, lr, #0
   13104:	stm	r1, {r2, r3, ip, lr}
   13108:	mov	r1, #1
   1310c:	pop	{fp, lr}
   13110:	b	1304c <push_back_chars@@Base>

00013114 <next@@Base>:
   13114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13118:	add	fp, sp, #28
   1311c:	sub	sp, sp, #524	; 0x20c
   13120:	mov	r4, r0
   13124:	movw	r5, #50240	; 0xc440
   13128:	movt	r5, #2
   1312c:	ldrd	r0, [r5]
   13130:	adds	r0, r0, #1
   13134:	adc	r1, r1, #0
   13138:	strd	r0, [r5]
   1313c:	ldr	r0, [r4, #4]
   13140:	cmp	r0, #0
   13144:	beq	13178 <next@@Base+0x64>
   13148:	ldrd	r2, [r5, #8]
   1314c:	adds	r2, r2, #1
   13150:	adc	r3, r3, #0
   13154:	strd	r2, [r5, #8]
   13158:	ldr	r1, [r0]
   1315c:	str	r1, [r4, #4]
   13160:	ldr	r6, [r0, #4]
   13164:	mov	r1, #0
   13168:	str	r1, [r0, #4]
   1316c:	bl	12f94 <free_stack_base@@Base>
   13170:	add	r0, r5, #24
   13174:	b	13564 <next@@Base+0x450>
   13178:	ldrd	r0, [r5, #16]
   1317c:	adds	r0, r0, #1
   13180:	adc	r1, r1, #0
   13184:	strd	r0, [r5, #16]
   13188:	mov	r0, r4
   1318c:	bl	1300c <get_char@@Base>
   13190:	ldrd	r2, [r5, #32]
   13194:	adds	r2, r2, #1
   13198:	adc	r3, r3, #0
   1319c:	strd	r2, [r5, #32]
   131a0:	cmp	r0, #0
   131a4:	beq	13540 <next@@Base+0x42c>
   131a8:	mov	r8, #0
   131ac:	add	r9, r5, #56	; 0x38
   131b0:	add	r6, r5, #112	; 0x70
   131b4:	add	sl, r5, #160	; 0xa0
   131b8:	mov	r1, #0
   131bc:	str	r1, [sp, #4]
   131c0:	b	131f8 <next@@Base+0xe4>
   131c4:	mov	r7, r9
   131c8:	ldrd	r2, [r7]
   131cc:	adds	r2, r2, #1
   131d0:	adc	r3, r3, #0
   131d4:	strd	r2, [r7]
   131d8:	ldr	r1, [r5, #984]	; 0x3d8
   131dc:	ldr	r2, [r5, #988]	; 0x3dc
   131e0:	adds	r1, r1, #1
   131e4:	adc	r2, r2, #0
   131e8:	str	r1, [r5, #984]	; 0x3d8
   131ec:	str	r2, [r5, #988]	; 0x3dc
   131f0:	tst	r0, #255	; 0xff
   131f4:	beq	13540 <next@@Base+0x42c>
   131f8:	ldrd	r2, [r5, #40]	; 0x28
   131fc:	adds	r2, r2, #1
   13200:	adc	r3, r3, #0
   13204:	strd	r2, [r5, #40]	; 0x28
   13208:	cmp	r8, #5
   1320c:	bhi	131c4 <next@@Base+0xb0>
   13210:	add	r1, pc, #0
   13214:	ldr	pc, [r1, r8, lsl #2]
   13218:	andeq	r3, r1, r0, lsr r2
   1321c:	muleq	r1, r8, r5
   13220:	strdeq	r3, [r1], -ip
   13224:	andeq	r3, r1, r4, lsl r6
   13228:	strdeq	r3, [r1], -r4
   1322c:	andeq	r3, r1, r4, lsl #17
   13230:	ldrd	r2, [r5, #64]	; 0x40
   13234:	adds	r2, r2, #1
   13238:	adc	r3, r3, #0
   1323c:	strd	r2, [r5, #64]	; 0x40
   13240:	uxtb	r2, r0
   13244:	cmp	r2, #9
   13248:	mov	r1, r6
   1324c:	beq	1329c <next@@Base+0x188>
   13250:	ldr	r8, [r5, #120]	; 0x78
   13254:	ldr	r1, [r5, #124]	; 0x7c
   13258:	adds	r8, r8, #1
   1325c:	adc	r1, r1, #0
   13260:	str	r8, [r5, #120]	; 0x78
   13264:	str	r1, [r5, #124]	; 0x7c
   13268:	cmp	r2, #32
   1326c:	bne	13278 <next@@Base+0x164>
   13270:	add	r1, r5, #128	; 0x80
   13274:	b	1329c <next@@Base+0x188>
   13278:	ldr	r8, [r5, #136]	; 0x88
   1327c:	ldr	r1, [r5, #140]	; 0x8c
   13280:	adds	r8, r8, #1
   13284:	adc	r1, r1, #0
   13288:	str	r8, [r5, #136]	; 0x88
   1328c:	str	r1, [r5, #140]	; 0x8c
   13290:	cmp	r2, #10
   13294:	bne	132c0 <next@@Base+0x1ac>
   13298:	add	r1, r5, #144	; 0x90
   1329c:	ldm	r1, {r0, r3}
   132a0:	adds	r0, r0, #1
   132a4:	adc	r3, r3, #0
   132a8:	stm	r1, {r0, r3}
   132ac:	mov	r8, #0
   132b0:	mov	r7, sl
   132b4:	mov	r0, r4
   132b8:	bl	1300c <get_char@@Base>
   132bc:	b	131c8 <next@@Base+0xb4>
   132c0:	ldr	r8, [r5, #152]	; 0x98
   132c4:	ldr	r1, [r5, #156]	; 0x9c
   132c8:	adds	r8, r8, #1
   132cc:	adc	r1, r1, #0
   132d0:	str	r8, [r5, #152]	; 0x98
   132d4:	str	r1, [r5, #156]	; 0x9c
   132d8:	cmp	r2, #48	; 0x30
   132dc:	beq	139d0 <next@@Base+0x8bc>
   132e0:	ldr	r8, [r5, #176]	; 0xb0
   132e4:	ldr	r1, [r5, #180]	; 0xb4
   132e8:	adds	r8, r8, #1
   132ec:	adc	r1, r1, #0
   132f0:	str	r8, [r5, #176]	; 0xb0
   132f4:	str	r1, [r5, #180]	; 0xb4
   132f8:	cmp	r2, #49	; 0x31
   132fc:	bcc	139fc <next@@Base+0x8e8>
   13300:	ldr	r8, [r5, #192]	; 0xc0
   13304:	ldr	r1, [r5, #196]	; 0xc4
   13308:	adds	r8, r8, #1
   1330c:	adc	r1, r1, #0
   13310:	str	r8, [r5, #192]	; 0xc0
   13314:	str	r1, [r5, #196]	; 0xc4
   13318:	cmp	r2, #57	; 0x39
   1331c:	bhi	13350 <next@@Base+0x23c>
   13320:	add	r1, sp, #8
   13324:	ldr	r2, [sp, #4]
   13328:	strb	r0, [r1, r2]
   1332c:	ldrd	r0, [r5, #208]	; 0xd0
   13330:	adds	r0, r0, #1
   13334:	adc	r1, r1, #0
   13338:	strd	r0, [r5, #208]	; 0xd0
   1333c:	add	r7, r5, #224	; 0xe0
   13340:	add	r2, r2, #1
   13344:	str	r2, [sp, #4]
   13348:	mov	r8, #1
   1334c:	b	132b4 <next@@Base+0x1a0>
   13350:	ldr	r8, [r5, #216]	; 0xd8
   13354:	ldr	r1, [r5, #220]	; 0xdc
   13358:	ldr	r3, [r5, #240]	; 0xf0
   1335c:	ldr	r7, [r5, #244]	; 0xf4
   13360:	adds	r3, r3, #1
   13364:	adc	r7, r7, #0
   13368:	adds	r8, r8, #1
   1336c:	str	r3, [r5, #240]	; 0xf0
   13370:	adc	r1, r1, #0
   13374:	ldr	r3, [r5, #264]	; 0x108
   13378:	adds	r3, r3, #1
   1337c:	str	r3, [r5, #264]	; 0x108
   13380:	str	r8, [r5, #216]	; 0xd8
   13384:	str	r1, [r5, #220]	; 0xdc
   13388:	str	r7, [r5, #244]	; 0xf4
   1338c:	ldr	r1, [r5, #268]	; 0x10c
   13390:	adc	r1, r1, #0
   13394:	str	r1, [r5, #268]	; 0x10c
   13398:	cmp	r2, #123	; 0x7b
   1339c:	beq	13a84 <next@@Base+0x970>
   133a0:	ldr	r1, [r5, #288]	; 0x120
   133a4:	ldr	r3, [r5, #292]	; 0x124
   133a8:	adds	r1, r1, #1
   133ac:	adc	r3, r3, #0
   133b0:	str	r1, [r5, #288]	; 0x120
   133b4:	str	r3, [r5, #292]	; 0x124
   133b8:	cmp	r2, #125	; 0x7d
   133bc:	beq	13ab4 <next@@Base+0x9a0>
   133c0:	ldr	r1, [r5, #312]	; 0x138
   133c4:	ldr	r3, [r5, #316]	; 0x13c
   133c8:	adds	r1, r1, #1
   133cc:	adc	r3, r3, #0
   133d0:	str	r1, [r5, #312]	; 0x138
   133d4:	str	r3, [r5, #316]	; 0x13c
   133d8:	cmp	r2, #59	; 0x3b
   133dc:	beq	13ae4 <next@@Base+0x9d0>
   133e0:	ldr	r1, [r5, #336]	; 0x150
   133e4:	ldr	r3, [r5, #340]	; 0x154
   133e8:	adds	r1, r1, #1
   133ec:	adc	r3, r3, #0
   133f0:	str	r1, [r5, #336]	; 0x150
   133f4:	str	r3, [r5, #340]	; 0x154
   133f8:	cmp	r2, #101	; 0x65
   133fc:	bne	13438 <next@@Base+0x324>
   13400:	add	r1, sp, #8
   13404:	ldr	r2, [sp, #4]
   13408:	strb	r0, [r1, r2]
   1340c:	ldr	r0, [r5, #352]	; 0x160
   13410:	ldr	r1, [r5, #356]	; 0x164
   13414:	adds	r0, r0, #1
   13418:	adc	r1, r1, #0
   1341c:	str	r0, [r5, #352]	; 0x160
   13420:	str	r1, [r5, #356]	; 0x164
   13424:	add	r7, r5, #368	; 0x170
   13428:	add	r2, r2, #1
   1342c:	str	r2, [sp, #4]
   13430:	mov	r8, #5
   13434:	b	132b4 <next@@Base+0x1a0>
   13438:	ldr	r1, [r5, #360]	; 0x168
   1343c:	ldr	r3, [r5, #364]	; 0x16c
   13440:	adds	r1, r1, #1
   13444:	adc	r3, r3, #0
   13448:	str	r1, [r5, #360]	; 0x168
   1344c:	str	r3, [r5, #364]	; 0x16c
   13450:	cmp	r2, #105	; 0x69
   13454:	bne	13490 <next@@Base+0x37c>
   13458:	add	r1, sp, #8
   1345c:	ldr	r2, [sp, #4]
   13460:	strb	r0, [r1, r2]
   13464:	ldr	r0, [r5, #376]	; 0x178
   13468:	ldr	r1, [r5, #380]	; 0x17c
   1346c:	adds	r0, r0, #1
   13470:	adc	r1, r1, #0
   13474:	str	r0, [r5, #376]	; 0x178
   13478:	str	r1, [r5, #380]	; 0x17c
   1347c:	add	r7, r5, #392	; 0x188
   13480:	add	r2, r2, #1
   13484:	str	r2, [sp, #4]
   13488:	mov	r8, #2
   1348c:	b	132b4 <next@@Base+0x1a0>
   13490:	ldr	r1, [r5, #384]	; 0x180
   13494:	ldr	r3, [r5, #388]	; 0x184
   13498:	adds	r1, r1, #1
   1349c:	adc	r3, r3, #0
   134a0:	str	r1, [r5, #384]	; 0x180
   134a4:	str	r3, [r5, #388]	; 0x184
   134a8:	cmp	r2, #109	; 0x6d
   134ac:	bne	134e8 <next@@Base+0x3d4>
   134b0:	add	r1, sp, #8
   134b4:	ldr	r2, [sp, #4]
   134b8:	strb	r0, [r1, r2]
   134bc:	ldr	r0, [r5, #400]	; 0x190
   134c0:	ldr	r1, [r5, #404]	; 0x194
   134c4:	adds	r0, r0, #1
   134c8:	adc	r1, r1, #0
   134cc:	str	r0, [r5, #400]	; 0x190
   134d0:	str	r1, [r5, #404]	; 0x194
   134d4:	add	r7, r5, #416	; 0x1a0
   134d8:	add	r2, r2, #1
   134dc:	str	r2, [sp, #4]
   134e0:	mov	r8, #3
   134e4:	b	132b4 <next@@Base+0x1a0>
   134e8:	ldr	r1, [r5, #408]	; 0x198
   134ec:	ldr	r3, [r5, #412]	; 0x19c
   134f0:	adds	r1, r1, #1
   134f4:	adc	r3, r3, #0
   134f8:	str	r1, [r5, #408]	; 0x198
   134fc:	str	r3, [r5, #412]	; 0x19c
   13500:	cmp	r2, #114	; 0x72
   13504:	bne	13dcc <next@@Base+0xcb8>
   13508:	add	r1, sp, #8
   1350c:	ldr	r2, [sp, #4]
   13510:	strb	r0, [r1, r2]
   13514:	ldr	r0, [r5, #424]	; 0x1a8
   13518:	ldr	r1, [r5, #428]	; 0x1ac
   1351c:	adds	r0, r0, #1
   13520:	adc	r1, r1, #0
   13524:	str	r0, [r5, #424]	; 0x1a8
   13528:	str	r1, [r5, #428]	; 0x1ac
   1352c:	add	r7, r5, #440	; 0x1b8
   13530:	add	r2, r2, #1
   13534:	str	r2, [sp, #4]
   13538:	mov	r8, #4
   1353c:	b	132b4 <next@@Base+0x1a0>
   13540:	ldrd	r0, [r5, #48]	; 0x30
   13544:	adds	r0, r0, #1
   13548:	adc	r1, r1, #0
   1354c:	strd	r0, [r5, #48]	; 0x30
   13550:	mov	r0, #4
   13554:	bl	11fcc <malloc@plt>
   13558:	mov	r6, r0
   1355c:	bl	12958 <init_token_eof@@Base>
   13560:	add	r0, r5, #992	; 0x3e0
   13564:	ldrd	r2, [r0]
   13568:	adds	r2, r2, #1
   1356c:	adc	r3, r3, #0
   13570:	strd	r2, [r0]
   13574:	ldr	r0, [r5, #1000]	; 0x3e8
   13578:	ldr	r1, [r5, #1004]	; 0x3ec
   1357c:	adds	r0, r0, #1
   13580:	adc	r1, r1, #0
   13584:	str	r0, [r5, #1000]	; 0x3e8
   13588:	str	r1, [r5, #1004]	; 0x3ec
   1358c:	mov	r0, r6
   13590:	sub	sp, fp, #28
   13594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13598:	ldrd	r2, [r5, #72]	; 0x48
   1359c:	adds	r2, r2, #1
   135a0:	adc	r3, r3, #0
   135a4:	strd	r2, [r5, #72]	; 0x48
   135a8:	sub	r1, r0, #48	; 0x30
   135ac:	uxtb	r1, r1
   135b0:	add	r7, sp, #8
   135b4:	cmp	r1, #9
   135b8:	bhi	13934 <next@@Base+0x820>
   135bc:	ldr	r6, [sp, #4]
   135c0:	strb	r0, [r7, r6]
   135c4:	ldr	r0, [r5, #696]	; 0x2b8
   135c8:	ldr	r1, [r5, #700]	; 0x2bc
   135cc:	adds	r0, r0, #1
   135d0:	adc	r1, r1, #0
   135d4:	str	r0, [r5, #696]	; 0x2b8
   135d8:	str	r1, [r5, #700]	; 0x2bc
   135dc:	mov	r0, r4
   135e0:	bl	1300c <get_char@@Base>
   135e4:	ldr	r1, [r5, #712]	; 0x2c8
   135e8:	ldr	r2, [r5, #716]	; 0x2cc
   135ec:	adds	r1, r1, #1
   135f0:	adc	r2, r2, #0
   135f4:	str	r1, [r5, #712]	; 0x2c8
   135f8:	str	r2, [r5, #716]	; 0x2cc
   135fc:	add	r6, r6, #1
   13600:	sub	r1, r0, #48	; 0x30
   13604:	uxtb	r1, r1
   13608:	cmp	r1, #10
   1360c:	bcc	135c0 <next@@Base+0x4ac>
   13610:	b	13938 <next@@Base+0x824>
   13614:	ldrd	r2, [r5, #88]	; 0x58
   13618:	adds	r2, r2, #1
   1361c:	adc	r3, r3, #0
   13620:	strd	r2, [r5, #88]	; 0x58
   13624:	uxtb	r1, r0
   13628:	cmp	r1, #97	; 0x61
   1362c:	bne	14064 <next@@Base+0xf50>
   13630:	add	r9, sp, #8
   13634:	ldr	r7, [sp, #4]
   13638:	strb	r0, [r9, r7]
   1363c:	ldr	r0, [r5, #792]	; 0x318
   13640:	ldr	r1, [r5, #796]	; 0x31c
   13644:	adds	r0, r0, #1
   13648:	adc	r1, r1, #0
   1364c:	str	r0, [r5, #792]	; 0x318
   13650:	str	r1, [r5, #796]	; 0x31c
   13654:	mov	r0, r4
   13658:	bl	1300c <get_char@@Base>
   1365c:	cmp	r0, #105	; 0x69
   13660:	bne	14084 <next@@Base+0xf70>
   13664:	add	r6, r7, r9
   13668:	strb	r0, [r6, #1]
   1366c:	ldr	r0, [r5, #808]	; 0x328
   13670:	ldr	r1, [r5, #812]	; 0x32c
   13674:	adds	r0, r0, #1
   13678:	adc	r1, r1, #0
   1367c:	str	r0, [r5, #808]	; 0x328
   13680:	str	r1, [r5, #812]	; 0x32c
   13684:	mov	r0, r4
   13688:	bl	1300c <get_char@@Base>
   1368c:	cmp	r0, #110	; 0x6e
   13690:	bne	140a4 <next@@Base+0xf90>
   13694:	add	r4, r7, #3
   13698:	mov	r8, #0
   1369c:	strb	r8, [r9, r4]
   136a0:	strb	r0, [r6, #2]
   136a4:	ldr	r0, [r5, #824]	; 0x338
   136a8:	ldr	r1, [r5, #828]	; 0x33c
   136ac:	adds	r0, r0, #1
   136b0:	adc	r1, r1, #0
   136b4:	str	r0, [r5, #824]	; 0x338
   136b8:	str	r1, [r5, #828]	; 0x33c
   136bc:	add	r0, r7, #4
   136c0:	bl	11fcc <malloc@plt>
   136c4:	mov	r7, r0
   136c8:	mov	r1, r9
   136cc:	mov	r2, r4
   136d0:	bl	12074 <strncpy@plt>
   136d4:	strb	r8, [r0, r4]
   136d8:	mov	r0, #8
   136dc:	bl	11fcc <malloc@plt>
   136e0:	mov	r6, r0
   136e4:	mov	r1, r7
   136e8:	bl	127e0 <init_token_function@@Base>
   136ec:	add	r0, r5, #832	; 0x340
   136f0:	b	13564 <next@@Base+0x450>
   136f4:	ldrd	r2, [r5, #96]	; 0x60
   136f8:	adds	r2, r2, #1
   136fc:	adc	r3, r3, #0
   13700:	strd	r2, [r5, #96]	; 0x60
   13704:	uxtb	r1, r0
   13708:	cmp	r1, #101	; 0x65
   1370c:	bne	140c4 <next@@Base+0xfb0>
   13710:	add	r6, sp, #8
   13714:	ldr	r7, [sp, #4]
   13718:	strb	r0, [r6, r7]
   1371c:	ldr	r0, [r5, #848]	; 0x350
   13720:	ldr	r1, [r5, #852]	; 0x354
   13724:	adds	r0, r0, #1
   13728:	adc	r1, r1, #0
   1372c:	str	r0, [r5, #848]	; 0x350
   13730:	str	r1, [r5, #852]	; 0x354
   13734:	mov	r0, r4
   13738:	bl	1300c <get_char@@Base>
   1373c:	cmp	r0, #116	; 0x74
   13740:	bne	140e4 <next@@Base+0xfd0>
   13744:	add	r6, r7, r6
   13748:	strb	r0, [r6, #1]
   1374c:	ldr	r0, [r5, #864]	; 0x360
   13750:	ldr	r1, [r5, #868]	; 0x364
   13754:	adds	r0, r0, #1
   13758:	adc	r1, r1, #0
   1375c:	str	r0, [r5, #864]	; 0x360
   13760:	str	r1, [r5, #868]	; 0x364
   13764:	mov	r0, r4
   13768:	bl	1300c <get_char@@Base>
   1376c:	cmp	r0, #117	; 0x75
   13770:	bne	14104 <next@@Base+0xff0>
   13774:	strb	r0, [r6, #2]
   13778:	ldr	r0, [r5, #880]	; 0x370
   1377c:	ldr	r1, [r5, #884]	; 0x374
   13780:	adds	r0, r0, #1
   13784:	adc	r1, r1, #0
   13788:	str	r0, [r5, #880]	; 0x370
   1378c:	str	r1, [r5, #884]	; 0x374
   13790:	mov	r0, r4
   13794:	bl	1300c <get_char@@Base>
   13798:	cmp	r0, #114	; 0x72
   1379c:	bne	14124 <next@@Base+0x1010>
   137a0:	strb	r0, [r6, #3]
   137a4:	ldr	r0, [r5, #896]	; 0x380
   137a8:	ldr	r1, [r5, #900]	; 0x384
   137ac:	adds	r0, r0, #1
   137b0:	adc	r1, r1, #0
   137b4:	str	r0, [r5, #896]	; 0x380
   137b8:	str	r1, [r5, #900]	; 0x384
   137bc:	mov	r0, r4
   137c0:	bl	1300c <get_char@@Base>
   137c4:	cmp	r0, #110	; 0x6e
   137c8:	bne	14144 <next@@Base+0x1030>
   137cc:	ldr	r0, [r5, #912]	; 0x390
   137d0:	ldr	r1, [r5, #916]	; 0x394
   137d4:	adds	r0, r0, #1
   137d8:	adc	r1, r1, #0
   137dc:	str	r0, [r5, #912]	; 0x390
   137e0:	str	r1, [r5, #916]	; 0x394
   137e4:	mov	r0, #4
   137e8:	bl	11fcc <malloc@plt>
   137ec:	mov	r6, r0
   137f0:	bl	128f0 <init_token_return@@Base>
   137f4:	add	r0, r5, #920	; 0x398
   137f8:	b	13564 <next@@Base+0x450>
   137fc:	ldrd	r2, [r5, #80]	; 0x50
   13800:	adds	r2, r2, #1
   13804:	adc	r3, r3, #0
   13808:	strd	r2, [r5, #80]	; 0x50
   1380c:	uxtb	r1, r0
   13810:	cmp	r1, #102	; 0x66
   13814:	beq	13988 <next@@Base+0x874>
   13818:	cmp	r1, #110	; 0x6e
   1381c:	add	r1, sp, #8
   13820:	ldr	r2, [sp, #4]
   13824:	bne	14164 <next@@Base+0x1050>
   13828:	strb	r0, [r1, r2]
   1382c:	ldr	r0, [r5, #736]	; 0x2e0
   13830:	ldr	r1, [r5, #740]	; 0x2e4
   13834:	adds	r0, r0, #1
   13838:	adc	r1, r1, #0
   1383c:	str	r0, [r5, #736]	; 0x2e0
   13840:	str	r1, [r5, #740]	; 0x2e4
   13844:	mov	r0, r4
   13848:	bl	1300c <get_char@@Base>
   1384c:	cmp	r0, #116	; 0x74
   13850:	bne	141e4 <next@@Base+0x10d0>
   13854:	ldr	r0, [r5, #760]	; 0x2f8
   13858:	ldr	r1, [r5, #764]	; 0x2fc
   1385c:	adds	r0, r0, #1
   13860:	adc	r1, r1, #0
   13864:	str	r0, [r5, #760]	; 0x2f8
   13868:	str	r1, [r5, #764]	; 0x2fc
   1386c:	mov	r0, #4
   13870:	bl	11fcc <malloc@plt>
   13874:	mov	r6, r0
   13878:	bl	1276c <init_token_int_type@@Base>
   1387c:	add	r0, r5, #768	; 0x300
   13880:	b	13564 <next@@Base+0x450>
   13884:	ldrd	r2, [r5, #104]	; 0x68
   13888:	adds	r2, r2, #1
   1388c:	adc	r3, r3, #0
   13890:	strd	r2, [r5, #104]	; 0x68
   13894:	uxtb	r1, r0
   13898:	cmp	r1, #108	; 0x6c
   1389c:	bne	14184 <next@@Base+0x1070>
   138a0:	add	r6, sp, #8
   138a4:	ldr	r7, [sp, #4]
   138a8:	strb	r0, [r6, r7]
   138ac:	ldr	r0, [r5, #936]	; 0x3a8
   138b0:	ldr	r1, [r5, #940]	; 0x3ac
   138b4:	adds	r0, r0, #1
   138b8:	adc	r1, r1, #0
   138bc:	str	r0, [r5, #936]	; 0x3a8
   138c0:	str	r1, [r5, #940]	; 0x3ac
   138c4:	mov	r0, r4
   138c8:	bl	1300c <get_char@@Base>
   138cc:	cmp	r0, #115	; 0x73
   138d0:	bne	141a4 <next@@Base+0x1090>
   138d4:	add	r1, r7, r6
   138d8:	strb	r0, [r1, #1]
   138dc:	ldr	r0, [r5, #952]	; 0x3b8
   138e0:	ldr	r1, [r5, #956]	; 0x3bc
   138e4:	adds	r0, r0, #1
   138e8:	adc	r1, r1, #0
   138ec:	str	r0, [r5, #952]	; 0x3b8
   138f0:	str	r1, [r5, #956]	; 0x3bc
   138f4:	mov	r0, r4
   138f8:	bl	1300c <get_char@@Base>
   138fc:	cmp	r0, #101	; 0x65
   13900:	bne	141c4 <next@@Base+0x10b0>
   13904:	ldr	r0, [r5, #968]	; 0x3c8
   13908:	ldr	r1, [r5, #972]	; 0x3cc
   1390c:	adds	r0, r0, #1
   13910:	adc	r1, r1, #0
   13914:	str	r0, [r5, #968]	; 0x3c8
   13918:	str	r1, [r5, #972]	; 0x3cc
   1391c:	mov	r0, #4
   13920:	bl	11fcc <malloc@plt>
   13924:	mov	r6, r0
   13928:	bl	129c0 <init_token_else@@Base>
   1392c:	add	r0, r5, #976	; 0x3d0
   13930:	b	13564 <next@@Base+0x450>
   13934:	ldr	r6, [sp, #4]
   13938:	ldr	r0, [r5, #704]	; 0x2c0
   1393c:	ldr	r1, [r5, #708]	; 0x2c4
   13940:	adds	r0, r0, #1
   13944:	adc	r1, r1, #0
   13948:	str	r0, [r5, #704]	; 0x2c0
   1394c:	str	r1, [r5, #708]	; 0x2c4
   13950:	mov	r0, r4
   13954:	bl	130e0 <push_back_one_char@@Base>
   13958:	mov	r0, #0
   1395c:	strb	r0, [r7, r6]
   13960:	mov	r0, #8
   13964:	bl	11fcc <malloc@plt>
   13968:	mov	r6, r0
   1396c:	mov	r0, r7
   13970:	bl	120ec <atoi@plt>
   13974:	mov	r1, r0
   13978:	mov	r0, r6
   1397c:	bl	127a0 <init_token_int_value@@Base>
   13980:	add	r0, r5, #720	; 0x2d0
   13984:	b	13564 <next@@Base+0x450>
   13988:	add	r1, sp, #8
   1398c:	ldr	r2, [sp, #4]
   13990:	strb	r0, [r1, r2]
   13994:	add	r0, r1, r2
   13998:	mov	r1, #0
   1399c:	strb	r1, [r0, #1]
   139a0:	ldr	r0, [r5, #744]	; 0x2e8
   139a4:	ldr	r1, [r5, #748]	; 0x2ec
   139a8:	adds	r0, r0, #1
   139ac:	adc	r1, r1, #0
   139b0:	str	r0, [r5, #744]	; 0x2e8
   139b4:	str	r1, [r5, #748]	; 0x2ec
   139b8:	mov	r0, #4
   139bc:	bl	11fcc <malloc@plt>
   139c0:	mov	r6, r0
   139c4:	bl	1298c <init_token_if@@Base>
   139c8:	add	r0, r5, #776	; 0x308
   139cc:	b	13564 <next@@Base+0x450>
   139d0:	ldrd	r0, [r5, #168]	; 0xa8
   139d4:	adds	r0, r0, #1
   139d8:	adc	r1, r1, #0
   139dc:	strd	r0, [r5, #168]	; 0xa8
   139e0:	mov	r0, #8
   139e4:	bl	11fcc <malloc@plt>
   139e8:	mov	r6, r0
   139ec:	mov	r1, #0
   139f0:	bl	127a0 <init_token_int_value@@Base>
   139f4:	add	r0, r5, #184	; 0xb8
   139f8:	b	13564 <next@@Base+0x450>
   139fc:	ldrd	r6, [r5, #200]	; 0xc8
   13a00:	adds	r6, r6, #1
   13a04:	adc	r7, r7, #0
   13a08:	strd	r6, [r5, #200]	; 0xc8
   13a0c:	cmp	r2, #40	; 0x28
   13a10:	bne	13a3c <next@@Base+0x928>
   13a14:	ldrd	r0, [r5, #232]	; 0xe8
   13a18:	adds	r0, r0, #1
   13a1c:	adc	r1, r1, #0
   13a20:	strd	r0, [r5, #232]	; 0xe8
   13a24:	mov	r0, #4
   13a28:	bl	11fcc <malloc@plt>
   13a2c:	mov	r6, r0
   13a30:	bl	12820 <init_token_opar@@Base>
   13a34:	add	r0, r5, #248	; 0xf8
   13a38:	b	13564 <next@@Base+0x450>
   13a3c:	ldrd	r6, [r5, #240]	; 0xf0
   13a40:	adds	r6, r6, #1
   13a44:	adc	r7, r7, #0
   13a48:	strd	r6, [r5, #240]	; 0xf0
   13a4c:	cmp	r2, #41	; 0x29
   13a50:	bne	13b14 <next@@Base+0xa00>
   13a54:	ldr	r0, [r5, #256]	; 0x100
   13a58:	ldr	r1, [r5, #260]	; 0x104
   13a5c:	adds	r0, r0, #1
   13a60:	adc	r1, r1, #0
   13a64:	str	r0, [r5, #256]	; 0x100
   13a68:	str	r1, [r5, #260]	; 0x104
   13a6c:	mov	r0, #4
   13a70:	bl	11fcc <malloc@plt>
   13a74:	mov	r6, r0
   13a78:	bl	12854 <init_token_cpar@@Base>
   13a7c:	add	r0, r5, #272	; 0x110
   13a80:	b	13564 <next@@Base+0x450>
   13a84:	ldr	r0, [r5, #280]	; 0x118
   13a88:	ldr	r1, [r5, #284]	; 0x11c
   13a8c:	adds	r0, r0, #1
   13a90:	adc	r1, r1, #0
   13a94:	str	r0, [r5, #280]	; 0x118
   13a98:	str	r1, [r5, #284]	; 0x11c
   13a9c:	mov	r0, #4
   13aa0:	bl	11fcc <malloc@plt>
   13aa4:	mov	r6, r0
   13aa8:	bl	12888 <init_token_obra@@Base>
   13aac:	add	r0, r5, #296	; 0x128
   13ab0:	b	13564 <next@@Base+0x450>
   13ab4:	ldr	r0, [r5, #304]	; 0x130
   13ab8:	ldr	r1, [r5, #308]	; 0x134
   13abc:	adds	r0, r0, #1
   13ac0:	adc	r1, r1, #0
   13ac4:	str	r0, [r5, #304]	; 0x130
   13ac8:	str	r1, [r5, #308]	; 0x134
   13acc:	mov	r0, #4
   13ad0:	bl	11fcc <malloc@plt>
   13ad4:	mov	r6, r0
   13ad8:	bl	128bc <init_token_cbra@@Base>
   13adc:	add	r0, r5, #320	; 0x140
   13ae0:	b	13564 <next@@Base+0x450>
   13ae4:	ldr	r0, [r5, #328]	; 0x148
   13ae8:	ldr	r1, [r5, #332]	; 0x14c
   13aec:	adds	r0, r0, #1
   13af0:	adc	r1, r1, #0
   13af4:	str	r0, [r5, #328]	; 0x148
   13af8:	str	r1, [r5, #332]	; 0x14c
   13afc:	mov	r0, #4
   13b00:	bl	11fcc <malloc@plt>
   13b04:	mov	r6, r0
   13b08:	bl	12924 <init_token_semicolon@@Base>
   13b0c:	add	r0, r5, #344	; 0x158
   13b10:	b	13564 <next@@Base+0x450>
   13b14:	ldr	r1, [r5, #408]	; 0x198
   13b18:	ldr	r3, [r5, #412]	; 0x19c
   13b1c:	adds	r7, r1, #1
   13b20:	adc	ip, r3, #0
   13b24:	ldr	r3, [r5, #384]	; 0x180
   13b28:	ldr	r6, [r5, #388]	; 0x184
   13b2c:	adds	r1, r3, #1
   13b30:	adc	lr, r6, #0
   13b34:	ldr	r6, [r5, #360]	; 0x168
   13b38:	adds	r6, r6, #1
   13b3c:	str	r6, [r5, #360]	; 0x168
   13b40:	str	r1, [r5, #384]	; 0x180
   13b44:	str	r7, [r5, #408]	; 0x198
   13b48:	ldr	r1, [r5, #364]	; 0x16c
   13b4c:	adc	r8, r1, #0
   13b50:	ldr	r7, [r5, #264]	; 0x108
   13b54:	ldr	r6, [r5, #268]	; 0x10c
   13b58:	ldr	r3, [r5, #288]	; 0x120
   13b5c:	ldr	r9, [r5, #292]	; 0x124
   13b60:	adds	r7, r7, #1
   13b64:	adc	r6, r6, #0
   13b68:	ldr	r1, [r5, #336]	; 0x150
   13b6c:	adds	r1, r1, #1
   13b70:	str	r1, [r5, #336]	; 0x150
   13b74:	str	r7, [r5, #264]	; 0x108
   13b78:	str	r6, [r5, #268]	; 0x10c
   13b7c:	ldr	r1, [r5, #340]	; 0x154
   13b80:	adc	sl, r1, #0
   13b84:	ldr	r6, [r5, #312]	; 0x138
   13b88:	adds	r6, r6, #1
   13b8c:	str	r6, [r5, #312]	; 0x138
   13b90:	ldr	r6, [r5, #316]	; 0x13c
   13b94:	adc	r6, r6, #0
   13b98:	adds	r3, r3, #1
   13b9c:	adc	r7, r9, #0
   13ba0:	ldr	r1, [r5, #432]	; 0x1b0
   13ba4:	adds	r1, r1, #1
   13ba8:	str	r1, [r5, #432]	; 0x1b0
   13bac:	str	r3, [r5, #288]	; 0x120
   13bb0:	str	r7, [r5, #292]	; 0x124
   13bb4:	str	r6, [r5, #316]	; 0x13c
   13bb8:	str	sl, [r5, #340]	; 0x154
   13bbc:	str	r8, [r5, #364]	; 0x16c
   13bc0:	str	lr, [r5, #388]	; 0x184
   13bc4:	str	ip, [r5, #412]	; 0x19c
   13bc8:	ldr	r1, [r5, #436]	; 0x1b4
   13bcc:	adc	r1, r1, #0
   13bd0:	str	r1, [r5, #436]	; 0x1b4
   13bd4:	cmp	r2, #33	; 0x21
   13bd8:	bne	13c5c <next@@Base+0xb48>
   13bdc:	add	r1, sp, #8
   13be0:	ldr	r2, [sp, #4]
   13be4:	strb	r0, [r1, r2]
   13be8:	ldr	r0, [r5, #448]	; 0x1c0
   13bec:	ldr	r1, [r5, #452]	; 0x1c4
   13bf0:	adds	r0, r0, #1
   13bf4:	adc	r1, r1, #0
   13bf8:	str	r0, [r5, #448]	; 0x1c0
   13bfc:	str	r1, [r5, #452]	; 0x1c4
   13c00:	mov	r0, r4
   13c04:	bl	1300c <get_char@@Base>
   13c08:	mov	r7, r0
   13c0c:	mov	r0, #8
   13c10:	bl	11fcc <malloc@plt>
   13c14:	mov	r6, r0
   13c18:	cmp	r7, #61	; 0x3d
   13c1c:	bne	13d68 <next@@Base+0xc54>
   13c20:	ldr	r0, [r5, #472]	; 0x1d8
   13c24:	ldr	r1, [r5, #476]	; 0x1dc
   13c28:	adds	r0, r0, #1
   13c2c:	adc	r1, r1, #0
   13c30:	str	r0, [r5, #472]	; 0x1d8
   13c34:	str	r1, [r5, #476]	; 0x1dc
   13c38:	mov	r0, #3
   13c3c:	bl	11fcc <malloc@plt>
   13c40:	mov	r1, r0
   13c44:	ldrb	r0, [sp, #8]
   13c48:	strb	r7, [r1, #1]
   13c4c:	strb	r0, [r1]
   13c50:	add	r0, r5, #488	; 0x1e8
   13c54:	add	r2, r1, #2
   13c58:	b	13da4 <next@@Base+0xc90>
   13c5c:	ldr	r1, [r5, #584]	; 0x248
   13c60:	ldr	r3, [r5, #588]	; 0x24c
   13c64:	adds	ip, r1, #1
   13c68:	adc	lr, r3, #0
   13c6c:	ldr	r7, [r5, #528]	; 0x210
   13c70:	ldr	r6, [r5, #532]	; 0x214
   13c74:	adds	r9, r7, #1
   13c78:	adc	r8, r6, #0
   13c7c:	ldr	r1, [r5, #456]	; 0x1c8
   13c80:	ldr	r3, [r5, #460]	; 0x1cc
   13c84:	ldr	r6, [r5, #512]	; 0x200
   13c88:	ldr	r7, [r5, #516]	; 0x204
   13c8c:	adds	r6, r6, #1
   13c90:	str	r6, [r5, #512]	; 0x200
   13c94:	adc	r6, r7, #0
   13c98:	adds	r1, r1, #1
   13c9c:	adc	r3, r3, #0
   13ca0:	ldr	r7, [r5, #624]	; 0x270
   13ca4:	adds	r7, r7, #1
   13ca8:	str	r7, [r5, #624]	; 0x270
   13cac:	str	r1, [r5, #456]	; 0x1c8
   13cb0:	str	r3, [r5, #460]	; 0x1cc
   13cb4:	str	r6, [r5, #516]	; 0x204
   13cb8:	str	r9, [r5, #528]	; 0x210
   13cbc:	str	r8, [r5, #532]	; 0x214
   13cc0:	str	ip, [r5, #584]	; 0x248
   13cc4:	str	lr, [r5, #588]	; 0x24c
   13cc8:	ldr	r1, [r5, #628]	; 0x274
   13ccc:	adc	r1, r1, #0
   13cd0:	str	r1, [r5, #628]	; 0x274
   13cd4:	cmp	r2, #38	; 0x26
   13cd8:	ldr	r3, [sp, #4]
   13cdc:	bne	1425c <next@@Base+0x1148>
   13ce0:	add	r1, sp, #8
   13ce4:	strb	r0, [r1, r3]
   13ce8:	ldr	r0, [r5, #656]	; 0x290
   13cec:	ldr	r1, [r5, #660]	; 0x294
   13cf0:	adds	r0, r0, #1
   13cf4:	adc	r1, r1, #0
   13cf8:	str	r0, [r5, #656]	; 0x290
   13cfc:	str	r1, [r5, #660]	; 0x294
   13d00:	mov	r0, r4
   13d04:	bl	1300c <get_char@@Base>
   13d08:	mov	r4, r0
   13d0c:	mov	r0, #8
   13d10:	bl	11fcc <malloc@plt>
   13d14:	cmp	r4, #38	; 0x26
   13d18:	bne	14204 <next@@Base+0x10f0>
   13d1c:	mov	r6, r0
   13d20:	ldr	r0, [r5, #680]	; 0x2a8
   13d24:	ldr	r1, [r5, #684]	; 0x2ac
   13d28:	adds	r0, r0, #1
   13d2c:	adc	r1, r1, #0
   13d30:	str	r0, [r5, #680]	; 0x2a8
   13d34:	str	r1, [r5, #684]	; 0x2ac
   13d38:	mov	r0, #3
   13d3c:	bl	11fcc <malloc@plt>
   13d40:	mov	r1, r0
   13d44:	ldrb	r0, [sp, #8]
   13d48:	mov	r2, #0
   13d4c:	strb	r2, [r1, #2]
   13d50:	strb	r4, [r1, #1]
   13d54:	strb	r0, [r1]
   13d58:	mov	r0, r6
   13d5c:	bl	129f4 <init_token_boolean_op@@Base>
   13d60:	add	r0, r5, #688	; 0x2b0
   13d64:	b	13564 <next@@Base+0x450>
   13d68:	ldr	r0, [r5, #464]	; 0x1d0
   13d6c:	ldr	r1, [r5, #468]	; 0x1d4
   13d70:	adds	r0, r0, #1
   13d74:	adc	r1, r1, #0
   13d78:	str	r0, [r5, #464]	; 0x1d0
   13d7c:	str	r1, [r5, #468]	; 0x1d4
   13d80:	mov	r0, r4
   13d84:	bl	130e0 <push_back_one_char@@Base>
   13d88:	mov	r0, #2
   13d8c:	bl	11fcc <malloc@plt>
   13d90:	mov	r1, r0
   13d94:	ldrb	r0, [sp, #8]
   13d98:	mov	r2, r1
   13d9c:	strb	r0, [r2], #1
   13da0:	add	r0, r5, #480	; 0x1e0
   13da4:	mov	r3, #0
   13da8:	strb	r3, [r2]
   13dac:	ldrd	r2, [r0]
   13db0:	adds	r2, r2, #1
   13db4:	adc	r3, r3, #0
   13db8:	strd	r2, [r0]
   13dbc:	mov	r0, r6
   13dc0:	bl	129f4 <init_token_boolean_op@@Base>
   13dc4:	add	r0, r5, #496	; 0x1f0
   13dc8:	b	13564 <next@@Base+0x450>
   13dcc:	ldr	r1, [r5, #432]	; 0x1b0
   13dd0:	ldr	r3, [r5, #436]	; 0x1b4
   13dd4:	ldr	r7, [r5, #456]	; 0x1c8
   13dd8:	ldr	r6, [r5, #460]	; 0x1cc
   13ddc:	adds	r1, r1, #1
   13de0:	adc	r3, r3, #0
   13de4:	adds	r7, r7, #1
   13de8:	str	r1, [r5, #432]	; 0x1b0
   13dec:	str	r3, [r5, #436]	; 0x1b4
   13df0:	adc	r1, r6, #0
   13df4:	str	r7, [r5, #456]	; 0x1c8
   13df8:	str	r1, [r5, #460]	; 0x1cc
   13dfc:	cmp	r2, #60	; 0x3c
   13e00:	bne	13e0c <next@@Base+0xcf8>
   13e04:	add	r1, r5, #504	; 0x1f8
   13e08:	b	13e30 <next@@Base+0xd1c>
   13e0c:	ldr	r1, [r5, #512]	; 0x200
   13e10:	ldr	r3, [r5, #516]	; 0x204
   13e14:	adds	r1, r1, #1
   13e18:	adc	r3, r3, #0
   13e1c:	str	r1, [r5, #512]	; 0x200
   13e20:	str	r3, [r5, #516]	; 0x204
   13e24:	cmp	r2, #62	; 0x3e
   13e28:	bne	13f0c <next@@Base+0xdf8>
   13e2c:	add	r1, r5, #520	; 0x208
   13e30:	add	r7, sp, #8
   13e34:	ldr	r6, [sp, #4]
   13e38:	ldrd	r2, [r1]
   13e3c:	adds	r2, r2, #1
   13e40:	adc	r3, r3, #0
   13e44:	strd	r2, [r1]
   13e48:	strb	r0, [r7, r6]
   13e4c:	mov	r0, r4
   13e50:	bl	1300c <get_char@@Base>
   13e54:	mov	r7, r0
   13e58:	mov	r0, #8
   13e5c:	bl	11fcc <malloc@plt>
   13e60:	mov	r6, r0
   13e64:	cmp	r7, #61	; 0x3d
   13e68:	bne	13ea8 <next@@Base+0xd94>
   13e6c:	ldr	r0, [r5, #544]	; 0x220
   13e70:	ldr	r1, [r5, #548]	; 0x224
   13e74:	adds	r0, r0, #1
   13e78:	adc	r1, r1, #0
   13e7c:	str	r0, [r5, #544]	; 0x220
   13e80:	str	r1, [r5, #548]	; 0x224
   13e84:	mov	r0, #3
   13e88:	bl	11fcc <malloc@plt>
   13e8c:	mov	r1, r0
   13e90:	ldrb	r0, [sp, #8]
   13e94:	strb	r7, [r1, #1]
   13e98:	strb	r0, [r1]
   13e9c:	add	r0, r5, #560	; 0x230
   13ea0:	add	r2, r1, #2
   13ea4:	b	13ee4 <next@@Base+0xdd0>
   13ea8:	ldr	r0, [r5, #536]	; 0x218
   13eac:	ldr	r1, [r5, #540]	; 0x21c
   13eb0:	adds	r0, r0, #1
   13eb4:	adc	r1, r1, #0
   13eb8:	str	r0, [r5, #536]	; 0x218
   13ebc:	str	r1, [r5, #540]	; 0x21c
   13ec0:	mov	r0, r4
   13ec4:	bl	130e0 <push_back_one_char@@Base>
   13ec8:	mov	r0, #2
   13ecc:	bl	11fcc <malloc@plt>
   13ed0:	mov	r1, r0
   13ed4:	ldrb	r0, [sp, #8]
   13ed8:	mov	r2, r1
   13edc:	strb	r0, [r2], #1
   13ee0:	add	r0, r5, #552	; 0x228
   13ee4:	mov	r3, #0
   13ee8:	strb	r3, [r2]
   13eec:	ldrd	r2, [r0]
   13ef0:	adds	r2, r2, #1
   13ef4:	adc	r3, r3, #0
   13ef8:	strd	r2, [r0]
   13efc:	mov	r0, r6
   13f00:	bl	129f4 <init_token_boolean_op@@Base>
   13f04:	add	r0, r5, #568	; 0x238
   13f08:	b	13564 <next@@Base+0x450>
   13f0c:	ldr	r1, [r5, #528]	; 0x210
   13f10:	ldr	r3, [r5, #532]	; 0x214
   13f14:	adds	r1, r1, #1
   13f18:	adc	r3, r3, #0
   13f1c:	str	r1, [r5, #528]	; 0x210
   13f20:	str	r3, [r5, #532]	; 0x214
   13f24:	cmp	r2, #61	; 0x3d
   13f28:	bne	13fb8 <next@@Base+0xea4>
   13f2c:	add	r1, sp, #8
   13f30:	ldr	r2, [sp, #4]
   13f34:	strb	r0, [r1, r2]
   13f38:	ldr	r0, [r5, #576]	; 0x240
   13f3c:	ldr	r1, [r5, #580]	; 0x244
   13f40:	adds	r0, r0, #1
   13f44:	adc	r1, r1, #0
   13f48:	str	r0, [r5, #576]	; 0x240
   13f4c:	str	r1, [r5, #580]	; 0x244
   13f50:	mov	r0, r4
   13f54:	bl	1300c <get_char@@Base>
   13f58:	mov	r4, r0
   13f5c:	mov	r0, #8
   13f60:	bl	11fcc <malloc@plt>
   13f64:	cmp	r4, #61	; 0x3d
   13f68:	bne	14224 <next@@Base+0x1110>
   13f6c:	mov	r6, r0
   13f70:	ldr	r0, [r5, #600]	; 0x258
   13f74:	ldr	r1, [r5, #604]	; 0x25c
   13f78:	adds	r0, r0, #1
   13f7c:	adc	r1, r1, #0
   13f80:	str	r0, [r5, #600]	; 0x258
   13f84:	str	r1, [r5, #604]	; 0x25c
   13f88:	mov	r0, #3
   13f8c:	bl	11fcc <malloc@plt>
   13f90:	mov	r1, r0
   13f94:	ldrb	r0, [sp, #8]
   13f98:	mov	r2, #0
   13f9c:	strb	r2, [r1, #2]
   13fa0:	strb	r4, [r1, #1]
   13fa4:	strb	r0, [r1]
   13fa8:	mov	r0, r6
   13fac:	bl	129f4 <init_token_boolean_op@@Base>
   13fb0:	add	r0, r5, #608	; 0x260
   13fb4:	b	13564 <next@@Base+0x450>
   13fb8:	ldr	r1, [r5, #584]	; 0x248
   13fbc:	ldr	r3, [r5, #588]	; 0x24c
   13fc0:	adds	r1, r1, #1
   13fc4:	adc	r3, r3, #0
   13fc8:	str	r1, [r5, #584]	; 0x248
   13fcc:	str	r3, [r5, #588]	; 0x24c
   13fd0:	cmp	r2, #124	; 0x7c
   13fd4:	bne	14244 <next@@Base+0x1130>
   13fd8:	add	r1, sp, #8
   13fdc:	ldr	r2, [sp, #4]
   13fe0:	strb	r0, [r1, r2]
   13fe4:	ldr	r0, [r5, #616]	; 0x268
   13fe8:	ldr	r1, [r5, #620]	; 0x26c
   13fec:	adds	r0, r0, #1
   13ff0:	adc	r1, r1, #0
   13ff4:	str	r0, [r5, #616]	; 0x268
   13ff8:	str	r1, [r5, #620]	; 0x26c
   13ffc:	mov	r0, r4
   14000:	bl	1300c <get_char@@Base>
   14004:	mov	r4, r0
   14008:	mov	r0, #8
   1400c:	bl	11fcc <malloc@plt>
   14010:	cmp	r4, #124	; 0x7c
   14014:	bne	14294 <next@@Base+0x1180>
   14018:	mov	r6, r0
   1401c:	ldr	r0, [r5, #640]	; 0x280
   14020:	ldr	r1, [r5, #644]	; 0x284
   14024:	adds	r0, r0, #1
   14028:	adc	r1, r1, #0
   1402c:	str	r0, [r5, #640]	; 0x280
   14030:	str	r1, [r5, #644]	; 0x284
   14034:	mov	r0, #3
   14038:	bl	11fcc <malloc@plt>
   1403c:	mov	r1, r0
   14040:	ldrb	r0, [sp, #8]
   14044:	mov	r2, #0
   14048:	strb	r2, [r1, #2]
   1404c:	strb	r4, [r1, #1]
   14050:	strb	r0, [r1]
   14054:	mov	r0, r6
   14058:	bl	129f4 <init_token_boolean_op@@Base>
   1405c:	add	r0, r5, #648	; 0x288
   14060:	b	13564 <next@@Base+0x450>
   14064:	ldr	r0, [r5, #784]	; 0x310
   14068:	ldr	r1, [r5, #788]	; 0x314
   1406c:	adds	r0, r0, #1
   14070:	adc	r1, r1, #0
   14074:	str	r0, [r5, #784]	; 0x310
   14078:	str	r1, [r5, #788]	; 0x314
   1407c:	mov	r0, #1
   14080:	bl	12008 <exit@plt>
   14084:	ldr	r0, [r5, #800]	; 0x320
   14088:	ldr	r1, [r5, #804]	; 0x324
   1408c:	adds	r0, r0, #1
   14090:	adc	r1, r1, #0
   14094:	str	r0, [r5, #800]	; 0x320
   14098:	str	r1, [r5, #804]	; 0x324
   1409c:	mov	r0, #1
   140a0:	bl	12008 <exit@plt>
   140a4:	ldr	r0, [r5, #816]	; 0x330
   140a8:	ldr	r1, [r5, #820]	; 0x334
   140ac:	adds	r0, r0, #1
   140b0:	adc	r1, r1, #0
   140b4:	str	r0, [r5, #816]	; 0x330
   140b8:	str	r1, [r5, #820]	; 0x334
   140bc:	mov	r0, #1
   140c0:	bl	12008 <exit@plt>
   140c4:	ldr	r0, [r5, #840]	; 0x348
   140c8:	ldr	r1, [r5, #844]	; 0x34c
   140cc:	adds	r0, r0, #1
   140d0:	adc	r1, r1, #0
   140d4:	str	r0, [r5, #840]	; 0x348
   140d8:	str	r1, [r5, #844]	; 0x34c
   140dc:	mov	r0, #1
   140e0:	bl	12008 <exit@plt>
   140e4:	ldr	r0, [r5, #856]	; 0x358
   140e8:	ldr	r1, [r5, #860]	; 0x35c
   140ec:	adds	r0, r0, #1
   140f0:	adc	r1, r1, #0
   140f4:	str	r0, [r5, #856]	; 0x358
   140f8:	str	r1, [r5, #860]	; 0x35c
   140fc:	mov	r0, #1
   14100:	bl	12008 <exit@plt>
   14104:	ldr	r0, [r5, #872]	; 0x368
   14108:	ldr	r1, [r5, #876]	; 0x36c
   1410c:	adds	r0, r0, #1
   14110:	adc	r1, r1, #0
   14114:	str	r0, [r5, #872]	; 0x368
   14118:	str	r1, [r5, #876]	; 0x36c
   1411c:	mov	r0, #1
   14120:	bl	12008 <exit@plt>
   14124:	ldr	r0, [r5, #888]	; 0x378
   14128:	ldr	r1, [r5, #892]	; 0x37c
   1412c:	adds	r0, r0, #1
   14130:	adc	r1, r1, #0
   14134:	str	r0, [r5, #888]	; 0x378
   14138:	str	r1, [r5, #892]	; 0x37c
   1413c:	mov	r0, #1
   14140:	bl	12008 <exit@plt>
   14144:	ldr	r0, [r5, #904]	; 0x388
   14148:	ldr	r1, [r5, #908]	; 0x38c
   1414c:	adds	r0, r0, #1
   14150:	adc	r1, r1, #0
   14154:	str	r0, [r5, #904]	; 0x388
   14158:	str	r1, [r5, #908]	; 0x38c
   1415c:	mov	r0, #1
   14160:	bl	12008 <exit@plt>
   14164:	ldr	r0, [r5, #728]	; 0x2d8
   14168:	ldr	r1, [r5, #732]	; 0x2dc
   1416c:	adds	r0, r0, #1
   14170:	adc	r1, r1, #0
   14174:	str	r0, [r5, #728]	; 0x2d8
   14178:	str	r1, [r5, #732]	; 0x2dc
   1417c:	mov	r0, #1
   14180:	bl	12008 <exit@plt>
   14184:	ldr	r0, [r5, #928]	; 0x3a0
   14188:	ldr	r1, [r5, #932]	; 0x3a4
   1418c:	adds	r0, r0, #1
   14190:	adc	r1, r1, #0
   14194:	str	r0, [r5, #928]	; 0x3a0
   14198:	str	r1, [r5, #932]	; 0x3a4
   1419c:	mov	r0, #1
   141a0:	bl	12008 <exit@plt>
   141a4:	ldr	r0, [r5, #944]	; 0x3b0
   141a8:	ldr	r1, [r5, #948]	; 0x3b4
   141ac:	adds	r0, r0, #1
   141b0:	adc	r1, r1, #0
   141b4:	str	r0, [r5, #944]	; 0x3b0
   141b8:	str	r1, [r5, #948]	; 0x3b4
   141bc:	mov	r0, #1
   141c0:	bl	12008 <exit@plt>
   141c4:	ldr	r0, [r5, #960]	; 0x3c0
   141c8:	ldr	r1, [r5, #964]	; 0x3c4
   141cc:	adds	r0, r0, #1
   141d0:	adc	r1, r1, #0
   141d4:	str	r0, [r5, #960]	; 0x3c0
   141d8:	str	r1, [r5, #964]	; 0x3c4
   141dc:	mov	r0, #1
   141e0:	bl	12008 <exit@plt>
   141e4:	ldr	r0, [r5, #752]	; 0x2f0
   141e8:	ldr	r1, [r5, #756]	; 0x2f4
   141ec:	adds	r0, r0, #1
   141f0:	adc	r1, r1, #0
   141f4:	str	r0, [r5, #752]	; 0x2f0
   141f8:	str	r1, [r5, #756]	; 0x2f4
   141fc:	mov	r0, #1
   14200:	bl	12008 <exit@plt>
   14204:	ldr	r0, [r5, #672]	; 0x2a0
   14208:	ldr	r1, [r5, #676]	; 0x2a4
   1420c:	adds	r0, r0, #1
   14210:	adc	r1, r1, #0
   14214:	str	r0, [r5, #672]	; 0x2a0
   14218:	str	r1, [r5, #676]	; 0x2a4
   1421c:	mov	r0, #1
   14220:	bl	12008 <exit@plt>
   14224:	ldr	r0, [r5, #592]	; 0x250
   14228:	ldr	r1, [r5, #596]	; 0x254
   1422c:	adds	r0, r0, #1
   14230:	adc	r1, r1, #0
   14234:	str	r0, [r5, #592]	; 0x250
   14238:	str	r1, [r5, #596]	; 0x254
   1423c:	mov	r0, #1
   14240:	bl	12008 <exit@plt>
   14244:	ldr	r0, [r5, #624]	; 0x270
   14248:	ldr	r1, [r5, #628]	; 0x274
   1424c:	adds	r0, r0, #1
   14250:	adc	r1, r1, #0
   14254:	str	r0, [r5, #624]	; 0x270
   14258:	str	r1, [r5, #628]	; 0x274
   1425c:	ldr	r0, [r5, #664]	; 0x298
   14260:	ldr	r1, [r5, #668]	; 0x29c
   14264:	adds	r0, r0, #1
   14268:	adc	r1, r1, #0
   1426c:	str	r0, [r5, #664]	; 0x298
   14270:	str	r1, [r5, #668]	; 0x29c
   14274:	movw	r0, #49384	; 0xc0e8
   14278:	movt	r0, #2
   1427c:	ldr	r0, [r0]
   14280:	movw	r1, #41041	; 0xa051
   14284:	movt	r1, #1
   14288:	bl	12038 <fprintf@plt>
   1428c:	mov	r0, #1
   14290:	bl	12008 <exit@plt>
   14294:	ldr	r0, [r5, #632]	; 0x278
   14298:	ldr	r1, [r5, #636]	; 0x27c
   1429c:	adds	r0, r0, #1
   142a0:	adc	r1, r1, #0
   142a4:	str	r0, [r5, #632]	; 0x278
   142a8:	str	r1, [r5, #636]	; 0x27c
   142ac:	mov	r0, #1
   142b0:	bl	12008 <exit@plt>
   142b4:	push	{r4, r5, r6, lr}
   142b8:	sub	sp, sp, #8
   142bc:	movw	r0, #41081	; 0xa079
   142c0:	movt	r0, #1
   142c4:	movw	r1, #39605	; 0x9ab5
   142c8:	movt	r1, #1
   142cc:	movw	r2, #8093	; 0x1f9d
   142d0:	movt	r2, #48445	; 0xbd3d
   142d4:	bl	1696c <__generate_code_for_binary_boolean_expression@@Base+0x410>
   142d8:	movw	r0, #41472	; 0xa200
   142dc:	movt	r0, #1
   142e0:	add	r4, r0, #4
   142e4:	mov	r5, #0
   142e8:	movw	r6, #41280	; 0xa140
   142ec:	movt	r6, #1
   142f0:	mov	r3, r6
   142f4:	ldr	r0, [r3, r5]!
   142f8:	ldr	r1, [r3, #16]
   142fc:	str	r1, [sp]
   14300:	ldmib	r3, {r1, r2}
   14304:	ldrb	r3, [r3, #12]
   14308:	bl	1708c <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   1430c:	ldrd	r0, [r4, #-4]
   14310:	bl	17940 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   14314:	add	r5, r5, #20
   14318:	add	r4, r4, #8
   1431c:	cmp	r5, #180	; 0xb4
   14320:	bne	142f0 <next@@Base+0x11dc>
   14324:	bl	180c8 <__generate_code_for_binary_boolean_expression@@Base+0x1b6c>
   14328:	add	sp, sp, #8
   1432c:	pop	{r4, r5, r6, lr}
   14330:	b	18e34 <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   14334:	push	{fp, lr}
   14338:	vpush	{d8-d9}
   1433c:	bl	142b4 <next@@Base+0x11a0>
   14340:	vmov.i32	q4, #0	; 0x00000000
   14344:	movw	r0, #50080	; 0xc3a0
   14348:	movt	r0, #2
   1434c:	vst1.64	{d8-d9}, [r0]
   14350:	movw	r0, #50096	; 0xc3b0
   14354:	movt	r0, #2
   14358:	add	r1, r0, #16
   1435c:	vst1.64	{d8-d9}, [r1 :128]
   14360:	mov	r1, #0
   14364:	str	r1, [r0, #32]
   14368:	movw	r2, #50136	; 0xc3d8
   1436c:	movt	r2, #2
   14370:	vst1.64	{d8-d9}, [r2]
   14374:	movw	r2, #50152	; 0xc3e8
   14378:	movt	r2, #2
   1437c:	vst1.64	{d8-d9}, [r2]
   14380:	movw	r2, #50168	; 0xc3f8
   14384:	movt	r2, #2
   14388:	vst1.64	{d8-d9}, [r2]
   1438c:	movw	r2, #50224	; 0xc430
   14390:	movt	r2, #2
   14394:	vst1.64	{d8-d9}, [r2]
   14398:	mov	r2, #36	; 0x24
   1439c:	vst1.64	{d8-d9}, [r0 :128], r2
   143a0:	str	r1, [r0]
   143a4:	movw	r0, #50192	; 0xc410
   143a8:	movt	r0, #2
   143ac:	vst1.64	{d8-d9}, [r0 :128]!
   143b0:	vst1.64	{d8-d9}, [r0 :128]
   143b4:	movw	r0, #50240	; 0xc440
   143b8:	movt	r0, #2
   143bc:	mov	r1, #0
   143c0:	mov	r2, #1008	; 0x3f0
   143c4:	bl	12068 <memset@plt>
   143c8:	movw	r0, #51248	; 0xc830
   143cc:	movt	r0, #2
   143d0:	vst1.64	{d8-d9}, [r0]
   143d4:	vpop	{d8-d9}
   143d8:	pop	{fp, pc}
   143dc:	movw	r0, #17076	; 0x42b4
   143e0:	movt	r0, #1
   143e4:	movw	r1, #17204	; 0x4334
   143e8:	movt	r1, #1
   143ec:	b	192e8 <__gcov_flush@@Base+0xb8>

000143f0 <init_ast_base@@Base>:
   143f0:	push	{r4, r5, fp, lr}
   143f4:	add	fp, sp, #8
   143f8:	movw	r3, #51264	; 0xc840
   143fc:	movt	r3, #2
   14400:	ldm	r3, {ip, lr}
   14404:	ldr	r4, [r3, #8]
   14408:	ldr	r5, [r3, #12]
   1440c:	adds	ip, ip, #1
   14410:	adc	lr, lr, #0
   14414:	adds	r4, r4, #1
   14418:	adc	r5, r5, #0
   1441c:	stm	r3, {ip, lr}
   14420:	str	r4, [r3, #8]
   14424:	str	r5, [r3, #12]
   14428:	stm	r0, {r1, r2}
   1442c:	pop	{r4, r5, fp, pc}

00014430 <init_ast_base_single@@Base>:
   14430:	push	{r4, sl, fp, lr}
   14434:	add	fp, sp, #8
   14438:	movw	r2, #51280	; 0xc850
   1443c:	movt	r2, #2
   14440:	ldm	r2, {r3, ip, lr}
   14444:	ldr	r4, [r2, #12]
   14448:	adds	r3, r3, #1
   1444c:	adc	ip, ip, #0
   14450:	adds	lr, lr, #1
   14454:	adc	r4, r4, #0
   14458:	stm	r2, {r3, ip, lr}
   1445c:	str	r4, [r2, #12]
   14460:	mov	r2, #0
   14464:	pop	{r4, sl, fp, lr}
   14468:	b	143f0 <init_ast_base@@Base>

0001446c <init_node_id@@Base>:
   1446c:	push	{r4, r5, r6, sl, fp, lr}
   14470:	add	fp, sp, #16
   14474:	mov	r6, r1
   14478:	mov	r5, r0
   1447c:	movw	r0, #51296	; 0xc860
   14480:	movt	r0, #2
   14484:	ldm	r0, {r1, r2, r3, r4}
   14488:	adds	r1, r1, #1
   1448c:	adc	r2, r2, #0
   14490:	adds	r3, r3, #1
   14494:	adc	r4, r4, #0
   14498:	stm	r0, {r1, r2, r3, r4}
   1449c:	mov	r0, r5
   144a0:	mov	r1, #0
   144a4:	bl	14430 <init_ast_base_single@@Base>
   144a8:	str	r6, [r5, #8]
   144ac:	pop	{r4, r5, r6, sl, fp, pc}

000144b0 <init_node_int@@Base>:
   144b0:	push	{r4, r5, r6, sl, fp, lr}
   144b4:	add	fp, sp, #16
   144b8:	mov	r6, r1
   144bc:	mov	r5, r0
   144c0:	movw	r0, #51312	; 0xc870
   144c4:	movt	r0, #2
   144c8:	ldm	r0, {r1, r2, r3, r4}
   144cc:	adds	r1, r1, #1
   144d0:	adc	r2, r2, #0
   144d4:	adds	r3, r3, #1
   144d8:	adc	r4, r4, #0
   144dc:	stm	r0, {r1, r2, r3, r4}
   144e0:	mov	r0, r5
   144e4:	mov	r1, #1
   144e8:	bl	14430 <init_ast_base_single@@Base>
   144ec:	str	r6, [r5, #8]
   144f0:	pop	{r4, r5, r6, sl, fp, pc}

000144f4 <init_node_function@@Base>:
   144f4:	push	{r4, r5, r6, r7, fp, lr}
   144f8:	add	fp, sp, #16
   144fc:	mov	r7, r2
   14500:	mov	r5, r1
   14504:	mov	r6, r0
   14508:	movw	r0, #51328	; 0xc880
   1450c:	movt	r0, #2
   14510:	ldm	r0, {r1, r2, r3, r4}
   14514:	adds	r1, r1, #1
   14518:	adc	r2, r2, #0
   1451c:	adds	r3, r3, #1
   14520:	adc	r4, r4, #0
   14524:	stm	r0, {r1, r2, r3, r4}
   14528:	mov	r0, r6
   1452c:	mov	r1, #2
   14530:	bl	14430 <init_ast_base_single@@Base>
   14534:	str	r5, [r6, #8]
   14538:	str	r7, [r6, #12]
   1453c:	pop	{r4, r5, r6, r7, fp, pc}

00014540 <init_node_return@@Base>:
   14540:	push	{r4, r5, r6, sl, fp, lr}
   14544:	add	fp, sp, #16
   14548:	mov	r6, r1
   1454c:	mov	r5, r0
   14550:	movw	r0, #51344	; 0xc890
   14554:	movt	r0, #2
   14558:	ldm	r0, {r1, r2, r3, r4}
   1455c:	adds	r1, r1, #1
   14560:	adc	r2, r2, #0
   14564:	adds	r3, r3, #1
   14568:	adc	r4, r4, #0
   1456c:	stm	r0, {r1, r2, r3, r4}
   14570:	mov	r0, r5
   14574:	mov	r1, #3
   14578:	bl	14430 <init_ast_base_single@@Base>
   1457c:	str	r6, [r5, #8]
   14580:	pop	{r4, r5, r6, sl, fp, pc}

00014584 <init_node_if@@Base>:
   14584:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14588:	add	fp, sp, #24
   1458c:	mov	r8, r3
   14590:	mov	r5, r2
   14594:	mov	r6, r1
   14598:	mov	r7, r0
   1459c:	movw	r0, #51360	; 0xc8a0
   145a0:	movt	r0, #2
   145a4:	ldm	r0, {r1, r2, r3, r4}
   145a8:	adds	r1, r1, #1
   145ac:	adc	r2, r2, #0
   145b0:	adds	r3, r3, #1
   145b4:	adc	r4, r4, #0
   145b8:	stm	r0, {r1, r2, r3, r4}
   145bc:	mov	r0, r7
   145c0:	mov	r1, #4
   145c4:	bl	14430 <init_ast_base_single@@Base>
   145c8:	str	r6, [r7, #8]
   145cc:	str	r5, [r7, #12]
   145d0:	str	r8, [r7, #16]
   145d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000145d8 <init_node_boolean_operator@@Base>:
   145d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145dc:	add	fp, sp, #24
   145e0:	mov	r8, r3
   145e4:	mov	r5, r2
   145e8:	mov	r6, r1
   145ec:	mov	r7, r0
   145f0:	movw	r0, #51376	; 0xc8b0
   145f4:	movt	r0, #2
   145f8:	ldm	r0, {r1, r2, r3, r4}
   145fc:	adds	r1, r1, #1
   14600:	adc	r2, r2, #0
   14604:	adds	r3, r3, #1
   14608:	adc	r4, r4, #0
   1460c:	stm	r0, {r1, r2, r3, r4}
   14610:	mov	r0, r7
   14614:	mov	r1, #0
   14618:	bl	14430 <init_ast_base_single@@Base>
   1461c:	mov	r0, #5
   14620:	str	r0, [r7]
   14624:	str	r5, [r7, #8]
   14628:	str	r8, [r7, #12]
   1462c:	str	r6, [r7, #16]
   14630:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014634 <free_node@@Base>:
   14634:	push	{r4, sl, fp, lr}
   14638:	add	fp, sp, #8
   1463c:	movw	r4, #51392	; 0xc8c0
   14640:	movt	r4, #2
   14644:	ldrd	r2, [r4]
   14648:	adds	r2, r2, #1
   1464c:	adc	r3, r3, #0
   14650:	strd	r2, [r4]
   14654:	ldr	r1, [r0]
   14658:	cmp	r1, #5
   1465c:	bhi	14748 <free_node@@Base+0x114>
   14660:	add	r2, pc, #0
   14664:	ldr	pc, [r2, r1, lsl #2]
   14668:	andeq	r4, r1, r0, lsl #13
   1466c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14670:			; <UNDEFINED> instruction: 0x000146b8
   14674:	strdeq	r4, [r1], -r0
   14678:	muleq	r1, ip, r6
   1467c:	andeq	r4, r1, ip, lsl #14
   14680:	ldrd	r2, [r4, #16]
   14684:	adds	r2, r2, #1
   14688:	adc	r3, r3, #0
   1468c:	strd	r2, [r4, #16]
   14690:	bl	14780 <free_node_id@@Base>
   14694:	add	r0, r4, #64	; 0x40
   14698:	b	14724 <free_node@@Base+0xf0>
   1469c:	ldrd	r2, [r4, #48]	; 0x30
   146a0:	adds	r2, r2, #1
   146a4:	adc	r3, r3, #0
   146a8:	strd	r2, [r4, #48]	; 0x30
   146ac:	bl	14978 <free_node_if@@Base>
   146b0:	add	r0, r4, #96	; 0x60
   146b4:	b	14724 <free_node@@Base+0xf0>
   146b8:	ldrd	r2, [r4, #32]
   146bc:	adds	r2, r2, #1
   146c0:	adc	r3, r3, #0
   146c4:	strd	r2, [r4, #32]
   146c8:	bl	14878 <free_node_function@@Base>
   146cc:	add	r0, r4, #80	; 0x50
   146d0:	b	14724 <free_node@@Base+0xf0>
   146d4:	ldrd	r2, [r4, #24]
   146d8:	adds	r2, r2, #1
   146dc:	adc	r3, r3, #0
   146e0:	strd	r2, [r4, #24]
   146e4:	bl	147fc <free_node_int@@Base>
   146e8:	add	r0, r4, #72	; 0x48
   146ec:	b	14724 <free_node@@Base+0xf0>
   146f0:	ldrd	r2, [r4, #40]	; 0x28
   146f4:	adds	r2, r2, #1
   146f8:	adc	r3, r3, #0
   146fc:	strd	r2, [r4, #40]	; 0x28
   14700:	bl	148fc <free_node_return@@Base>
   14704:	add	r0, r4, #88	; 0x58
   14708:	b	14724 <free_node@@Base+0xf0>
   1470c:	ldrd	r2, [r4, #56]	; 0x38
   14710:	adds	r2, r2, #1
   14714:	adc	r3, r3, #0
   14718:	strd	r2, [r4, #56]	; 0x38
   1471c:	bl	14a0c <free_node_boolean_operator@@Base>
   14720:	add	r0, r4, #104	; 0x68
   14724:	ldrd	r2, [r0]
   14728:	adds	r2, r2, #1
   1472c:	adc	r3, r3, #0
   14730:	strd	r2, [r0]
   14734:	ldrd	r0, [r4, #112]	; 0x70
   14738:	adds	r0, r0, #1
   1473c:	adc	r1, r1, #0
   14740:	strd	r0, [r4, #112]	; 0x70
   14744:	pop	{r4, sl, fp, pc}
   14748:	ldrd	r0, [r4, #8]
   1474c:	adds	r0, r0, #1
   14750:	adc	r1, r1, #0
   14754:	strd	r0, [r4, #8]
   14758:	movw	r0, #49384	; 0xc0e8
   1475c:	movt	r0, #2
   14760:	ldr	r3, [r0]
   14764:	movw	r0, #41544	; 0xa248
   14768:	movt	r0, #1
   1476c:	mov	r1, #31
   14770:	mov	r2, #1
   14774:	bl	11fa8 <fwrite@plt>
   14778:	mov	r0, #1
   1477c:	bl	12008 <exit@plt>

00014780 <free_node_id@@Base>:
   14780:	push	{r4, r5, fp, lr}
   14784:	add	fp, sp, #8
   14788:	mov	r4, r0
   1478c:	movw	r5, #51520	; 0xc940
   14790:	movt	r5, #2
   14794:	ldrd	r0, [r5]
   14798:	adds	r0, r0, #1
   1479c:	adc	r1, r1, #0
   147a0:	strd	r0, [r5]
   147a4:	ldr	r0, [r4, #4]
   147a8:	cmp	r0, #0
   147ac:	beq	147cc <free_node_id@@Base+0x4c>
   147b0:	ldrd	r2, [r5, #8]
   147b4:	adds	r2, r2, #1
   147b8:	adc	r3, r3, #0
   147bc:	strd	r2, [r5, #8]
   147c0:	bl	14634 <free_node@@Base>
   147c4:	add	r0, r5, #24
   147c8:	b	147d0 <free_node_id@@Base+0x50>
   147cc:	add	r0, r5, #16
   147d0:	ldrd	r2, [r0]
   147d4:	adds	r2, r2, #1
   147d8:	adc	r3, r3, #0
   147dc:	strd	r2, [r0]
   147e0:	ldrd	r0, [r5, #32]
   147e4:	adds	r0, r0, #1
   147e8:	adc	r1, r1, #0
   147ec:	strd	r0, [r5, #32]
   147f0:	mov	r0, r4
   147f4:	pop	{r4, r5, fp, lr}
   147f8:	b	11f54 <free@plt>

000147fc <free_node_int@@Base>:
   147fc:	push	{r4, r5, fp, lr}
   14800:	add	fp, sp, #8
   14804:	mov	r4, r0
   14808:	movw	r5, #51568	; 0xc970
   1480c:	movt	r5, #2
   14810:	ldrd	r0, [r5]
   14814:	adds	r0, r0, #1
   14818:	adc	r1, r1, #0
   1481c:	strd	r0, [r5]
   14820:	ldr	r0, [r4, #4]
   14824:	cmp	r0, #0
   14828:	beq	14848 <free_node_int@@Base+0x4c>
   1482c:	ldrd	r2, [r5, #8]
   14830:	adds	r2, r2, #1
   14834:	adc	r3, r3, #0
   14838:	strd	r2, [r5, #8]
   1483c:	bl	14634 <free_node@@Base>
   14840:	add	r0, r5, #24
   14844:	b	1484c <free_node_int@@Base+0x50>
   14848:	add	r0, r5, #16
   1484c:	ldrd	r2, [r0]
   14850:	adds	r2, r2, #1
   14854:	adc	r3, r3, #0
   14858:	strd	r2, [r0]
   1485c:	ldrd	r0, [r5, #32]
   14860:	adds	r0, r0, #1
   14864:	adc	r1, r1, #0
   14868:	strd	r0, [r5, #32]
   1486c:	mov	r0, r4
   14870:	pop	{r4, r5, fp, lr}
   14874:	b	11f54 <free@plt>

00014878 <free_node_function@@Base>:
   14878:	push	{r4, r5, fp, lr}
   1487c:	add	fp, sp, #8
   14880:	mov	r4, r0
   14884:	movw	r5, #51616	; 0xc9a0
   14888:	movt	r5, #2
   1488c:	ldrd	r0, [r5]
   14890:	adds	r0, r0, #1
   14894:	adc	r1, r1, #0
   14898:	strd	r0, [r5]
   1489c:	ldr	r0, [r4, #4]
   148a0:	cmp	r0, #0
   148a4:	beq	148c4 <free_node_function@@Base+0x4c>
   148a8:	ldrd	r2, [r5, #8]
   148ac:	adds	r2, r2, #1
   148b0:	adc	r3, r3, #0
   148b4:	strd	r2, [r5, #8]
   148b8:	bl	14634 <free_node@@Base>
   148bc:	add	r0, r5, #24
   148c0:	b	148c8 <free_node_function@@Base+0x50>
   148c4:	add	r0, r5, #16
   148c8:	ldrd	r2, [r0]
   148cc:	adds	r2, r2, #1
   148d0:	adc	r3, r3, #0
   148d4:	strd	r2, [r0]
   148d8:	ldrd	r0, [r5, #32]
   148dc:	adds	r0, r0, #1
   148e0:	adc	r1, r1, #0
   148e4:	strd	r0, [r5, #32]
   148e8:	ldr	r0, [r4, #8]
   148ec:	bl	11f54 <free@plt>
   148f0:	mov	r0, r4
   148f4:	pop	{r4, r5, fp, lr}
   148f8:	b	11f54 <free@plt>

000148fc <free_node_return@@Base>:
   148fc:	push	{r4, r5, fp, lr}
   14900:	add	fp, sp, #8
   14904:	mov	r4, r0
   14908:	movw	r5, #51664	; 0xc9d0
   1490c:	movt	r5, #2
   14910:	ldrd	r0, [r5]
   14914:	adds	r0, r0, #1
   14918:	adc	r1, r1, #0
   1491c:	strd	r0, [r5]
   14920:	ldr	r0, [r4, #4]
   14924:	cmp	r0, #0
   14928:	beq	14948 <free_node_return@@Base+0x4c>
   1492c:	ldrd	r2, [r5, #8]
   14930:	adds	r2, r2, #1
   14934:	adc	r3, r3, #0
   14938:	strd	r2, [r5, #8]
   1493c:	bl	14634 <free_node@@Base>
   14940:	add	r0, r5, #24
   14944:	b	1494c <free_node_return@@Base+0x50>
   14948:	add	r0, r5, #16
   1494c:	ldrd	r2, [r0]
   14950:	adds	r2, r2, #1
   14954:	adc	r3, r3, #0
   14958:	strd	r2, [r0]
   1495c:	ldrd	r0, [r5, #32]
   14960:	adds	r0, r0, #1
   14964:	adc	r1, r1, #0
   14968:	strd	r0, [r5, #32]
   1496c:	mov	r0, r4
   14970:	pop	{r4, r5, fp, lr}
   14974:	b	11f54 <free@plt>

00014978 <free_node_if@@Base>:
   14978:	push	{r4, r5, fp, lr}
   1497c:	add	fp, sp, #8
   14980:	mov	r4, r0
   14984:	movw	r5, #51712	; 0xca00
   14988:	movt	r5, #2
   1498c:	ldrd	r0, [r5]
   14990:	adds	r0, r0, #1
   14994:	adc	r1, r1, #0
   14998:	strd	r0, [r5]
   1499c:	ldr	r0, [r4, #4]
   149a0:	cmp	r0, #0
   149a4:	beq	149c4 <free_node_if@@Base+0x4c>
   149a8:	ldrd	r2, [r5, #8]
   149ac:	adds	r2, r2, #1
   149b0:	adc	r3, r3, #0
   149b4:	strd	r2, [r5, #8]
   149b8:	bl	14634 <free_node@@Base>
   149bc:	add	r0, r5, #24
   149c0:	b	149c8 <free_node_if@@Base+0x50>
   149c4:	add	r0, r5, #16
   149c8:	ldrd	r2, [r0]
   149cc:	adds	r2, r2, #1
   149d0:	adc	r3, r3, #0
   149d4:	strd	r2, [r0]
   149d8:	ldrd	r0, [r5, #32]
   149dc:	adds	r0, r0, #1
   149e0:	adc	r1, r1, #0
   149e4:	strd	r0, [r5, #32]
   149e8:	ldr	r0, [r4, #8]
   149ec:	bl	14634 <free_node@@Base>
   149f0:	ldr	r0, [r4, #12]
   149f4:	bl	14634 <free_node@@Base>
   149f8:	ldr	r0, [r4, #16]
   149fc:	bl	14634 <free_node@@Base>
   14a00:	mov	r0, r4
   14a04:	pop	{r4, r5, fp, lr}
   14a08:	b	11f54 <free@plt>

00014a0c <free_node_boolean_operator@@Base>:
   14a0c:	push	{r4, r5, fp, lr}
   14a10:	add	fp, sp, #8
   14a14:	mov	r4, r0
   14a18:	movw	r5, #51760	; 0xca30
   14a1c:	movt	r5, #2
   14a20:	ldrd	r0, [r5]
   14a24:	adds	r0, r0, #1
   14a28:	adc	r1, r1, #0
   14a2c:	strd	r0, [r5]
   14a30:	ldr	r0, [r4, #4]
   14a34:	cmp	r0, #0
   14a38:	beq	14a58 <free_node_boolean_operator@@Base+0x4c>
   14a3c:	ldrd	r2, [r5, #8]
   14a40:	adds	r2, r2, #1
   14a44:	adc	r3, r3, #0
   14a48:	strd	r2, [r5, #8]
   14a4c:	bl	14634 <free_node@@Base>
   14a50:	add	r0, r5, #24
   14a54:	b	14a5c <free_node_boolean_operator@@Base+0x50>
   14a58:	add	r0, r5, #16
   14a5c:	ldrd	r2, [r0]
   14a60:	adds	r2, r2, #1
   14a64:	adc	r3, r3, #0
   14a68:	strd	r2, [r0]
   14a6c:	ldrd	r0, [r5, #32]
   14a70:	adds	r0, r0, #1
   14a74:	adc	r1, r1, #0
   14a78:	strd	r0, [r5, #32]
   14a7c:	ldr	r0, [r4, #8]
   14a80:	bl	14634 <free_node@@Base>
   14a84:	ldr	r0, [r4, #12]
   14a88:	bl	14634 <free_node@@Base>
   14a8c:	mov	r0, r4
   14a90:	pop	{r4, r5, fp, lr}
   14a94:	b	11f54 <free@plt>

00014a98 <get_boolean_op_value@@Base>:
   14a98:	push	{r4, r5, r6, sl, fp, lr}
   14a9c:	add	fp, sp, #16
   14aa0:	movw	r6, #51808	; 0xca60
   14aa4:	movt	r6, #2
   14aa8:	ldrd	r2, [r6]
   14aac:	adds	r2, r2, #1
   14ab0:	adc	r3, r3, #0
   14ab4:	strd	r2, [r6]
   14ab8:	ldr	r4, [r0, #4]
   14abc:	mov	r0, r4
   14ac0:	mov	r1, #2
   14ac4:	bl	120a4 <strnlen@plt>
   14ac8:	cmp	r0, #2
   14acc:	bne	14bf8 <get_boolean_op_value@@Base+0x160>
   14ad0:	ldrd	r0, [r6, #8]
   14ad4:	adds	r0, r0, #1
   14ad8:	adc	r1, r1, #0
   14adc:	strd	r0, [r6, #8]
   14ae0:	movw	r1, #41576	; 0xa268
   14ae4:	movt	r1, #1
   14ae8:	mov	r0, r4
   14aec:	mov	r2, #2
   14af0:	bl	12110 <strncmp@plt>
   14af4:	cmp	r0, #0
   14af8:	beq	14c40 <get_boolean_op_value@@Base+0x1a8>
   14afc:	ldrd	r0, [r6, #32]
   14b00:	adds	r0, r0, #1
   14b04:	adc	r1, r1, #0
   14b08:	strd	r0, [r6, #32]
   14b0c:	movw	r1, #41579	; 0xa26b
   14b10:	movt	r1, #1
   14b14:	mov	r0, r4
   14b18:	mov	r2, #2
   14b1c:	bl	12110 <strncmp@plt>
   14b20:	cmp	r0, #0
   14b24:	beq	14c94 <get_boolean_op_value@@Base+0x1fc>
   14b28:	ldrd	r0, [r6, #56]	; 0x38
   14b2c:	adds	r0, r0, #1
   14b30:	adc	r1, r1, #0
   14b34:	strd	r0, [r6, #56]	; 0x38
   14b38:	movw	r1, #41582	; 0xa26e
   14b3c:	movt	r1, #1
   14b40:	mov	r5, #2
   14b44:	mov	r0, r4
   14b48:	mov	r2, #2
   14b4c:	bl	12110 <strncmp@plt>
   14b50:	cmp	r0, #0
   14b54:	beq	14cb0 <get_boolean_op_value@@Base+0x218>
   14b58:	ldrd	r0, [r6, #80]	; 0x50
   14b5c:	adds	r0, r0, #1
   14b60:	adc	r1, r1, #0
   14b64:	strd	r0, [r6, #80]	; 0x50
   14b68:	movw	r1, #41585	; 0xa271
   14b6c:	movt	r1, #1
   14b70:	mov	r0, r4
   14b74:	mov	r2, #2
   14b78:	bl	12110 <strncmp@plt>
   14b7c:	cmp	r0, #0
   14b80:	beq	14cc8 <get_boolean_op_value@@Base+0x230>
   14b84:	ldrd	r0, [r6, #104]	; 0x68
   14b88:	adds	r0, r0, #1
   14b8c:	adc	r1, r1, #0
   14b90:	strd	r0, [r6, #104]	; 0x68
   14b94:	movw	r1, #41588	; 0xa274
   14b98:	movt	r1, #1
   14b9c:	mov	r0, r4
   14ba0:	mov	r2, #2
   14ba4:	bl	12110 <strncmp@plt>
   14ba8:	cmp	r0, #0
   14bac:	beq	14ce4 <get_boolean_op_value@@Base+0x24c>
   14bb0:	ldrd	r0, [r6, #128]	; 0x80
   14bb4:	adds	r0, r0, #1
   14bb8:	adc	r1, r1, #0
   14bbc:	strd	r0, [r6, #128]	; 0x80
   14bc0:	movw	r1, #41591	; 0xa277
   14bc4:	movt	r1, #1
   14bc8:	mov	r0, r4
   14bcc:	mov	r2, #2
   14bd0:	bl	12110 <strncmp@plt>
   14bd4:	cmp	r0, #0
   14bd8:	bne	14d58 <get_boolean_op_value@@Base+0x2c0>
   14bdc:	ldrd	r0, [r6, #144]	; 0x90
   14be0:	adds	r0, r0, #1
   14be4:	adc	r1, r1, #0
   14be8:	strd	r0, [r6, #144]	; 0x90
   14bec:	add	r0, r6, #160	; 0xa0
   14bf0:	mov	r5, #5
   14bf4:	b	14cfc <get_boolean_op_value@@Base+0x264>
   14bf8:	ldrd	r0, [r6, #16]
   14bfc:	adds	r0, r0, #1
   14c00:	adc	r1, r1, #0
   14c04:	strd	r0, [r6, #16]
   14c08:	ldrb	r0, [r4]
   14c0c:	cmp	r0, #62	; 0x3e
   14c10:	beq	14c78 <get_boolean_op_value@@Base+0x1e0>
   14c14:	cmp	r0, #60	; 0x3c
   14c18:	beq	14c5c <get_boolean_op_value@@Base+0x1c4>
   14c1c:	cmp	r0, #33	; 0x21
   14c20:	bne	14d24 <get_boolean_op_value@@Base+0x28c>
   14c24:	ldrd	r0, [r6, #176]	; 0xb0
   14c28:	adds	r0, r0, #1
   14c2c:	adc	r1, r1, #0
   14c30:	strd	r0, [r6, #176]	; 0xb0
   14c34:	add	r0, r6, #200	; 0xc8
   14c38:	mov	r5, #8
   14c3c:	b	14cfc <get_boolean_op_value@@Base+0x264>
   14c40:	ldrd	r0, [r6, #24]
   14c44:	adds	r0, r0, #1
   14c48:	adc	r1, r1, #0
   14c4c:	strd	r0, [r6, #24]
   14c50:	add	r0, r6, #40	; 0x28
   14c54:	mov	r5, #0
   14c58:	b	14cfc <get_boolean_op_value@@Base+0x264>
   14c5c:	ldrd	r0, [r6, #184]	; 0xb8
   14c60:	adds	r0, r0, #1
   14c64:	adc	r1, r1, #0
   14c68:	strd	r0, [r6, #184]	; 0xb8
   14c6c:	add	r0, r6, #208	; 0xd0
   14c70:	mov	r5, #6
   14c74:	b	14cfc <get_boolean_op_value@@Base+0x264>
   14c78:	ldrd	r0, [r6, #192]	; 0xc0
   14c7c:	adds	r0, r0, #1
   14c80:	adc	r1, r1, #0
   14c84:	strd	r0, [r6, #192]	; 0xc0
   14c88:	add	r0, r6, #216	; 0xd8
   14c8c:	mov	r5, #7
   14c90:	b	14cfc <get_boolean_op_value@@Base+0x264>
   14c94:	ldrd	r0, [r6, #48]	; 0x30
   14c98:	adds	r0, r0, #1
   14c9c:	adc	r1, r1, #0
   14ca0:	strd	r0, [r6, #48]	; 0x30
   14ca4:	add	r0, r6, #64	; 0x40
   14ca8:	mov	r5, #1
   14cac:	b	14cfc <get_boolean_op_value@@Base+0x264>
   14cb0:	ldrd	r0, [r6, #72]	; 0x48
   14cb4:	adds	r0, r0, #1
   14cb8:	adc	r1, r1, #0
   14cbc:	strd	r0, [r6, #72]	; 0x48
   14cc0:	add	r0, r6, #88	; 0x58
   14cc4:	b	14cfc <get_boolean_op_value@@Base+0x264>
   14cc8:	ldrd	r0, [r6, #96]	; 0x60
   14ccc:	adds	r0, r0, #1
   14cd0:	adc	r1, r1, #0
   14cd4:	strd	r0, [r6, #96]	; 0x60
   14cd8:	add	r0, r6, #112	; 0x70
   14cdc:	mov	r5, #3
   14ce0:	b	14cfc <get_boolean_op_value@@Base+0x264>
   14ce4:	ldrd	r0, [r6, #120]	; 0x78
   14ce8:	adds	r0, r0, #1
   14cec:	adc	r1, r1, #0
   14cf0:	strd	r0, [r6, #120]	; 0x78
   14cf4:	add	r0, r6, #136	; 0x88
   14cf8:	mov	r5, #4
   14cfc:	ldrd	r2, [r0]
   14d00:	adds	r2, r2, #1
   14d04:	adc	r3, r3, #0
   14d08:	strd	r2, [r0]
   14d0c:	ldrd	r0, [r6, #224]	; 0xe0
   14d10:	adds	r0, r0, #1
   14d14:	adc	r1, r1, #0
   14d18:	strd	r0, [r6, #224]	; 0xe0
   14d1c:	mov	r0, r5
   14d20:	pop	{r4, r5, r6, sl, fp, pc}
   14d24:	ldrd	r0, [r6, #168]	; 0xa8
   14d28:	adds	r0, r0, #1
   14d2c:	adc	r1, r1, #0
   14d30:	strd	r0, [r6, #168]	; 0xa8
   14d34:	movw	r0, #49384	; 0xc0e8
   14d38:	movt	r0, #2
   14d3c:	ldr	r0, [r0]
   14d40:	movw	r1, #41594	; 0xa27a
   14d44:	movt	r1, #1
   14d48:	mov	r2, r4
   14d4c:	bl	12038 <fprintf@plt>
   14d50:	mov	r0, #1
   14d54:	bl	12008 <exit@plt>
   14d58:	ldrd	r0, [r6, #152]	; 0x98
   14d5c:	adds	r0, r0, #1
   14d60:	adc	r1, r1, #0
   14d64:	strd	r0, [r6, #152]	; 0x98
   14d68:	b	14d34 <get_boolean_op_value@@Base+0x29c>
   14d6c:	push	{r4, r5, r6, lr}
   14d70:	sub	sp, sp, #8
   14d74:	movw	r0, #41648	; 0xa2b0
   14d78:	movt	r0, #1
   14d7c:	movw	r1, #39605	; 0x9ab5
   14d80:	movt	r1, #1
   14d84:	movw	r2, #31856	; 0x7c70
   14d88:	movt	r2, #15338	; 0x3bea
   14d8c:	bl	1696c <__generate_code_for_binary_boolean_expression@@Base+0x410>
   14d90:	movw	r0, #42320	; 0xa550
   14d94:	movt	r0, #1
   14d98:	add	r4, r0, #4
   14d9c:	mov	r5, #0
   14da0:	movw	r6, #42000	; 0xa410
   14da4:	movt	r6, #1
   14da8:	mov	r3, r6
   14dac:	ldr	r0, [r3, r5]!
   14db0:	ldr	r1, [r3, #16]
   14db4:	str	r1, [sp]
   14db8:	ldmib	r3, {r1, r2}
   14dbc:	ldrb	r3, [r3, #12]
   14dc0:	bl	1708c <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   14dc4:	ldrd	r0, [r4, #-4]
   14dc8:	bl	17940 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   14dcc:	add	r5, r5, #20
   14dd0:	add	r4, r4, #8
   14dd4:	cmp	r5, #320	; 0x140
   14dd8:	bne	14da8 <get_boolean_op_value@@Base+0x310>
   14ddc:	bl	180c8 <__generate_code_for_binary_boolean_expression@@Base+0x1b6c>
   14de0:	add	sp, sp, #8
   14de4:	pop	{r4, r5, r6, lr}
   14de8:	b	18e34 <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   14dec:	push	{fp, lr}
   14df0:	bl	14d6c <get_boolean_op_value@@Base+0x2d4>
   14df4:	vmov.i32	q8, #0	; 0x00000000
   14df8:	mov	r0, #36	; 0x24
   14dfc:	movw	ip, #51520	; 0xc940
   14e00:	movt	ip, #2
   14e04:	mov	r3, ip
   14e08:	vst1.64	{d16-d17}, [r3 :128], r0
   14e0c:	mov	r1, #0
   14e10:	str	r1, [r3]
   14e14:	movw	r3, #51280	; 0xc850
   14e18:	movt	r3, #2
   14e1c:	vst1.64	{d16-d17}, [r3]
   14e20:	movw	r3, #51264	; 0xc840
   14e24:	movt	r3, #2
   14e28:	vst1.64	{d16-d17}, [r3]
   14e2c:	movw	r3, #51296	; 0xc860
   14e30:	movt	r3, #2
   14e34:	vst1.64	{d16-d17}, [r3]
   14e38:	movw	r3, #51312	; 0xc870
   14e3c:	movt	r3, #2
   14e40:	vst1.64	{d16-d17}, [r3]
   14e44:	movw	r3, #51328	; 0xc880
   14e48:	movt	r3, #2
   14e4c:	vst1.64	{d16-d17}, [r3]
   14e50:	movw	r3, #51344	; 0xc890
   14e54:	movt	r3, #2
   14e58:	vst1.64	{d16-d17}, [r3]
   14e5c:	movw	r3, #51360	; 0xc8a0
   14e60:	movt	r3, #2
   14e64:	vst1.64	{d16-d17}, [r3]
   14e68:	movw	r3, #51376	; 0xc8b0
   14e6c:	movt	r3, #2
   14e70:	vst1.64	{d16-d17}, [r3]
   14e74:	movw	r3, #51392	; 0xc8c0
   14e78:	movt	r3, #2
   14e7c:	add	r2, r3, #16
   14e80:	vst1.64	{d16-d17}, [r2 :128]
   14e84:	add	r2, r3, #32
   14e88:	vst1.64	{d16-d17}, [r2 :128]
   14e8c:	add	r2, r3, #48	; 0x30
   14e90:	vst1.64	{d16-d17}, [r2 :128]
   14e94:	add	r2, r3, #64	; 0x40
   14e98:	vst1.64	{d16-d17}, [r2 :128]
   14e9c:	add	r2, r3, #80	; 0x50
   14ea0:	vst1.64	{d16-d17}, [r2 :128]
   14ea4:	add	r2, r3, #96	; 0x60
   14ea8:	vst1.64	{d16-d17}, [r2 :128]
   14eac:	str	r1, [r3, #112]	; 0x70
   14eb0:	add	r2, ip, #16
   14eb4:	vst1.64	{d16-d17}, [r2 :128]
   14eb8:	str	r1, [ip, #32]
   14ebc:	mov	r2, #116	; 0x74
   14ec0:	vst1.64	{d16-d17}, [r3 :128], r2
   14ec4:	str	r1, [r3]
   14ec8:	movw	r2, #51568	; 0xc970
   14ecc:	movt	r2, #2
   14ed0:	add	r3, r2, #16
   14ed4:	vst1.64	{d16-d17}, [r3 :128]
   14ed8:	str	r1, [r2, #32]
   14edc:	vst1.64	{d16-d17}, [r2 :128], r0
   14ee0:	str	r1, [r2]
   14ee4:	movw	r2, #51616	; 0xc9a0
   14ee8:	movt	r2, #2
   14eec:	mov	r3, r2
   14ef0:	vst1.64	{d16-d17}, [r3 :128], r0
   14ef4:	str	r1, [r3]
   14ef8:	add	r3, r2, #16
   14efc:	vst1.64	{d16-d17}, [r3 :128]
   14f00:	str	r1, [r2, #32]
   14f04:	movw	r2, #51664	; 0xc9d0
   14f08:	movt	r2, #2
   14f0c:	str	r1, [r2, #32]
   14f10:	add	r3, r2, #16
   14f14:	vst1.64	{d16-d17}, [r3 :128]
   14f18:	vst1.64	{d16-d17}, [r2 :128], r0
   14f1c:	str	r1, [r2]
   14f20:	movw	r2, #51712	; 0xca00
   14f24:	movt	r2, #2
   14f28:	mov	r3, r2
   14f2c:	vst1.64	{d16-d17}, [r3 :128], r0
   14f30:	str	r1, [r3]
   14f34:	str	r1, [r2, #32]
   14f38:	add	r2, r2, #16
   14f3c:	vst1.64	{d16-d17}, [r2 :128]
   14f40:	movw	r2, #51760	; 0xca30
   14f44:	movt	r2, #2
   14f48:	str	r1, [r2, #32]
   14f4c:	add	r3, r2, #16
   14f50:	vst1.64	{d16-d17}, [r3 :128]
   14f54:	vst1.64	{d16-d17}, [r2 :128], r0
   14f58:	str	r1, [r2]
   14f5c:	movw	r0, #51808	; 0xca60
   14f60:	movt	r0, #2
   14f64:	mov	r1, #0
   14f68:	mov	r2, #232	; 0xe8
   14f6c:	bl	12068 <memset@plt>
   14f70:	pop	{fp, pc}
   14f74:	movw	r0, #19820	; 0x4d6c
   14f78:	movt	r0, #1
   14f7c:	movw	r1, #19948	; 0x4dec
   14f80:	movt	r1, #1
   14f84:	b	192e8 <__gcov_flush@@Base+0xb8>

00014f88 <init_grammar@@Base>:
   14f88:	push	{r4, sl, fp, lr}
   14f8c:	add	fp, sp, #8
   14f90:	movw	r2, #52048	; 0xcb50
   14f94:	movt	r2, #2
   14f98:	ldm	r2, {r3, ip, lr}
   14f9c:	ldr	r4, [r2, #12]
   14fa0:	adds	r3, r3, #1
   14fa4:	adc	ip, ip, #0
   14fa8:	adds	lr, lr, #1
   14fac:	adc	r4, r4, #0
   14fb0:	stm	r2, {r3, ip, lr}
   14fb4:	str	r4, [r2, #12]
   14fb8:	str	r1, [r0]
   14fbc:	pop	{r4, sl, fp, pc}

00014fc0 <destroy_grammar@@Base>:
   14fc0:	movw	r0, #52064	; 0xcb60
   14fc4:	movt	r0, #2
   14fc8:	ldm	r0, {r1, r2, r3, ip}
   14fcc:	adds	r1, r1, #1
   14fd0:	adc	r2, r2, #0
   14fd4:	adds	r3, r3, #1
   14fd8:	adc	ip, ip, #0
   14fdc:	stm	r0, {r1, r2, r3, ip}
   14fe0:	bx	lr

00014fe4 <build_ast@@Base>:
   14fe4:	push	{fp, lr}
   14fe8:	mov	fp, sp
   14fec:	movw	r1, #52080	; 0xcb70
   14ff0:	movt	r1, #2
   14ff4:	ldm	r1, {r2, r3, ip, lr}
   14ff8:	adds	r2, r2, #1
   14ffc:	adc	r3, r3, #0
   15000:	adds	ip, ip, #1
   15004:	adc	lr, lr, #0
   15008:	stm	r1, {r2, r3, ip, lr}
   1500c:	pop	{fp, lr}
   15010:	b	15014 <read_function_ast_node@@Base>

00015014 <read_function_ast_node@@Base>:
   15014:	push	{r4, r5, r6, r7, fp, lr}
   15018:	add	fp, sp, #16
   1501c:	mov	r4, r0
   15020:	movw	r7, #52096	; 0xcb80
   15024:	movt	r7, #2
   15028:	ldrd	r0, [r7]
   1502c:	adds	r0, r0, #1
   15030:	adc	r1, r1, #0
   15034:	strd	r0, [r7]
   15038:	ldr	r0, [r4]
   1503c:	bl	13114 <next@@Base>
   15040:	ldr	r1, [r0]
   15044:	cmp	r1, #0
   15048:	beq	15064 <read_function_ast_node@@Base+0x50>
   1504c:	ldrd	r0, [r7, #8]
   15050:	adds	r0, r0, #1
   15054:	adc	r1, r1, #0
   15058:	strd	r0, [r7, #8]
   1505c:	add	r0, r7, #24
   15060:	b	15168 <read_function_ast_node@@Base+0x154>
   15064:	ldrd	r2, [r7, #16]
   15068:	adds	r2, r2, #1
   1506c:	adc	r3, r3, #0
   15070:	strd	r2, [r7, #16]
   15074:	bl	12a34 <free_token_int_type@@Base>
   15078:	ldr	r0, [r4]
   1507c:	bl	13114 <next@@Base>
   15080:	mov	r5, r0
   15084:	ldr	r0, [r0]
   15088:	cmp	r0, #2
   1508c:	bne	15124 <read_function_ast_node@@Base+0x110>
   15090:	ldrd	r0, [r7, #40]	; 0x28
   15094:	adds	r0, r0, #1
   15098:	adc	r1, r1, #0
   1509c:	strd	r0, [r7, #40]	; 0x28
   150a0:	ldr	r0, [r4]
   150a4:	bl	13114 <next@@Base>
   150a8:	ldr	r1, [r0]
   150ac:	cmp	r1, #3
   150b0:	bne	1513c <read_function_ast_node@@Base+0x128>
   150b4:	ldrd	r2, [r7, #64]	; 0x40
   150b8:	adds	r2, r2, #1
   150bc:	adc	r3, r3, #0
   150c0:	strd	r2, [r7, #64]	; 0x40
   150c4:	bl	12ac4 <free_token_opar@@Base>
   150c8:	ldr	r0, [r4]
   150cc:	bl	13114 <next@@Base>
   150d0:	ldr	r1, [r0]
   150d4:	cmp	r1, #4
   150d8:	bne	15154 <read_function_ast_node@@Base+0x140>
   150dc:	ldrd	r2, [r7, #88]	; 0x58
   150e0:	adds	r2, r2, #1
   150e4:	adc	r3, r3, #0
   150e8:	strd	r2, [r7, #88]	; 0x58
   150ec:	bl	12af4 <free_token_cpar@@Base>
   150f0:	mov	r0, r4
   150f4:	bl	15194 <read_body@@Base>
   150f8:	mov	r6, r0
   150fc:	mov	r0, #16
   15100:	bl	11fcc <malloc@plt>
   15104:	mov	r4, r0
   15108:	ldr	r1, [r5, #4]
   1510c:	mov	r2, r6
   15110:	bl	144f4 <init_node_function@@Base>
   15114:	mov	r0, r5
   15118:	bl	12a94 <free_token_function@@Base>
   1511c:	add	r0, r7, #104	; 0x68
   15120:	b	1516c <read_function_ast_node@@Base+0x158>
   15124:	ldrd	r0, [r7, #32]
   15128:	adds	r0, r0, #1
   1512c:	adc	r1, r1, #0
   15130:	strd	r0, [r7, #32]
   15134:	add	r0, r7, #48	; 0x30
   15138:	b	15168 <read_function_ast_node@@Base+0x154>
   1513c:	ldrd	r0, [r7, #56]	; 0x38
   15140:	adds	r0, r0, #1
   15144:	adc	r1, r1, #0
   15148:	strd	r0, [r7, #56]	; 0x38
   1514c:	add	r0, r7, #72	; 0x48
   15150:	b	15168 <read_function_ast_node@@Base+0x154>
   15154:	ldrd	r0, [r7, #80]	; 0x50
   15158:	adds	r0, r0, #1
   1515c:	adc	r1, r1, #0
   15160:	strd	r0, [r7, #80]	; 0x50
   15164:	add	r0, r7, #96	; 0x60
   15168:	mov	r4, #0
   1516c:	ldrd	r2, [r0]
   15170:	adds	r2, r2, #1
   15174:	adc	r3, r3, #0
   15178:	strd	r2, [r0]
   1517c:	ldrd	r0, [r7, #112]	; 0x70
   15180:	adds	r0, r0, #1
   15184:	adc	r1, r1, #0
   15188:	strd	r0, [r7, #112]	; 0x70
   1518c:	mov	r0, r4
   15190:	pop	{r4, r5, r6, r7, fp, pc}

00015194 <read_body@@Base>:
   15194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15198:	add	fp, sp, #28
   1519c:	sub	sp, sp, #4
   151a0:	mov	r4, r0
   151a4:	movw	r7, #52224	; 0xcc00
   151a8:	movt	r7, #2
   151ac:	ldrd	r0, [r7]
   151b0:	adds	r0, r0, #1
   151b4:	adc	r1, r1, #0
   151b8:	strd	r0, [r7]
   151bc:	ldr	r0, [r4]
   151c0:	bl	13114 <next@@Base>
   151c4:	ldr	r1, [r0]
   151c8:	cmp	r1, #5
   151cc:	bne	15344 <read_body@@Base+0x1b0>
   151d0:	ldrd	r2, [r7, #16]
   151d4:	adds	r2, r2, #1
   151d8:	adc	r3, r3, #0
   151dc:	strd	r2, [r7, #16]
   151e0:	bl	12b24 <free_token_obra@@Base>
   151e4:	ldr	r0, [r4]
   151e8:	bl	13114 <next@@Base>
   151ec:	mov	r1, r0
   151f0:	ldr	r0, [r7, #32]
   151f4:	ldr	r3, [r7, #36]	; 0x24
   151f8:	adds	r0, r0, #1
   151fc:	adc	r3, r3, #0
   15200:	str	r0, [r7, #32]
   15204:	str	r3, [r7, #36]	; 0x24
   15208:	ldr	r0, [r1]
   1520c:	mov	sl, #0
   15210:	cmp	r0, #6
   15214:	beq	15360 <read_body@@Base+0x1cc>
   15218:	mov	r5, #0
   1521c:	add	r9, r7, #88	; 0x58
   15220:	add	r2, r7, #128	; 0x80
   15224:	str	r2, [sp]
   15228:	mov	sl, #0
   1522c:	b	1528c <read_body@@Base+0xf8>
   15230:	ldrd	r0, [r7, #112]	; 0x70
   15234:	adds	r0, r0, #1
   15238:	adc	r1, r1, #0
   1523c:	strd	r0, [r7, #112]	; 0x70
   15240:	ldr	r0, [sp]
   15244:	mov	sl, r6
   15248:	ldrd	r2, [r0]
   1524c:	adds	r2, r2, #1
   15250:	adc	r3, r3, #0
   15254:	strd	r2, [r0]
   15258:	ldr	r0, [r4]
   1525c:	bl	13114 <next@@Base>
   15260:	mov	r1, r0
   15264:	ldr	r0, [r7, #136]	; 0x88
   15268:	ldr	r3, [r7, #140]	; 0x8c
   1526c:	adds	r0, r0, #1
   15270:	adc	r3, r3, #0
   15274:	str	r0, [r7, #136]	; 0x88
   15278:	str	r3, [r7, #140]	; 0x8c
   1527c:	ldr	r0, [r1]
   15280:	cmp	r0, #6
   15284:	mov	r5, r6
   15288:	beq	15360 <read_body@@Base+0x1cc>
   1528c:	ldrd	r2, [r7, #40]	; 0x28
   15290:	adds	r2, r2, #1
   15294:	adc	r3, r3, #0
   15298:	strd	r2, [r7, #40]	; 0x28
   1529c:	cmp	r0, #10
   152a0:	beq	152e0 <read_body@@Base+0x14c>
   152a4:	cmp	r0, #7
   152a8:	bne	15388 <read_body@@Base+0x1f4>
   152ac:	ldr	r0, [r7, #64]	; 0x40
   152b0:	ldr	r3, [r7, #68]	; 0x44
   152b4:	adds	r0, r0, #1
   152b8:	adc	r3, r3, #0
   152bc:	str	r0, [r7, #64]	; 0x40
   152c0:	str	r3, [r7, #68]	; 0x44
   152c4:	mov	r0, r1
   152c8:	bl	12b84 <free_token_return@@Base>
   152cc:	add	r8, r7, #80	; 0x50
   152d0:	mov	r0, r4
   152d4:	bl	153d8 <read_return_expression@@Base>
   152d8:	mov	r6, r0
   152dc:	b	15310 <read_body@@Base+0x17c>
   152e0:	ldr	r0, [r7, #72]	; 0x48
   152e4:	ldr	r3, [r7, #76]	; 0x4c
   152e8:	adds	r0, r0, #1
   152ec:	adc	r3, r3, #0
   152f0:	str	r0, [r7, #72]	; 0x48
   152f4:	str	r3, [r7, #76]	; 0x4c
   152f8:	mov	r0, r1
   152fc:	bl	12c14 <free_token_if@@Base>
   15300:	mov	r0, r4
   15304:	bl	154dc <read_if_statement@@Base>
   15308:	mov	r6, r0
   1530c:	mov	r8, r9
   15310:	ldrd	r0, [r8]
   15314:	adds	r0, r0, #1
   15318:	adc	r1, r1, #0
   1531c:	strd	r0, [r8]
   15320:	cmp	sl, #0
   15324:	beq	15230 <read_body@@Base+0x9c>
   15328:	ldrd	r0, [r7, #104]	; 0x68
   1532c:	adds	r0, r0, #1
   15330:	adc	r1, r1, #0
   15334:	strd	r0, [r7, #104]	; 0x68
   15338:	str	r6, [r5, #4]
   1533c:	add	r0, r7, #120	; 0x78
   15340:	b	15248 <read_body@@Base+0xb4>
   15344:	ldrd	r0, [r7, #8]
   15348:	adds	r0, r0, #1
   1534c:	adc	r1, r1, #0
   15350:	strd	r0, [r7, #8]
   15354:	add	r0, r7, #24
   15358:	mov	sl, #0
   1535c:	b	153ac <read_body@@Base+0x218>
   15360:	ldr	r0, [r7, #48]	; 0x30
   15364:	ldr	r3, [r7, #52]	; 0x34
   15368:	adds	r0, r0, #1
   1536c:	adc	r3, r3, #0
   15370:	str	r0, [r7, #48]	; 0x30
   15374:	str	r3, [r7, #52]	; 0x34
   15378:	mov	r0, r1
   1537c:	bl	12b54 <free_token_cbra@@Base>
   15380:	add	r0, r7, #144	; 0x90
   15384:	b	153ac <read_body@@Base+0x218>
   15388:	ldr	r0, [r7, #56]	; 0x38
   1538c:	ldr	r3, [r7, #60]	; 0x3c
   15390:	adds	r0, r0, #1
   15394:	adc	r3, r3, #0
   15398:	str	r0, [r7, #56]	; 0x38
   1539c:	str	r3, [r7, #60]	; 0x3c
   153a0:	ldr	r0, [r4]
   153a4:	bl	12fc4 <push_back@@Base>
   153a8:	add	r0, r7, #96	; 0x60
   153ac:	ldrd	r2, [r0]
   153b0:	adds	r2, r2, #1
   153b4:	adc	r3, r3, #0
   153b8:	strd	r2, [r0]
   153bc:	ldrd	r0, [r7, #152]	; 0x98
   153c0:	adds	r0, r0, #1
   153c4:	adc	r1, r1, #0
   153c8:	strd	r0, [r7, #152]	; 0x98
   153cc:	mov	r0, sl
   153d0:	sub	sp, fp, #28
   153d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000153d8 <read_return_expression@@Base>:
   153d8:	push	{r4, r5, r6, r7, fp, lr}
   153dc:	add	fp, sp, #16
   153e0:	mov	r5, r0
   153e4:	movw	r7, #52384	; 0xcca0
   153e8:	movt	r7, #2
   153ec:	ldrd	r0, [r7]
   153f0:	adds	r0, r0, #1
   153f4:	adc	r1, r1, #0
   153f8:	strd	r0, [r7]
   153fc:	ldr	r0, [r5]
   15400:	bl	13114 <next@@Base>
   15404:	mov	r4, r0
   15408:	ldr	r0, [r0]
   1540c:	cmp	r0, #1
   15410:	bne	15484 <read_return_expression@@Base+0xac>
   15414:	ldrd	r0, [r7, #16]
   15418:	adds	r0, r0, #1
   1541c:	adc	r1, r1, #0
   15420:	strd	r0, [r7, #16]
   15424:	mov	r0, #12
   15428:	bl	11fcc <malloc@plt>
   1542c:	mov	r6, r0
   15430:	ldr	r1, [r4, #4]
   15434:	bl	144b0 <init_node_int@@Base>
   15438:	mov	r0, r4
   1543c:	bl	12a64 <free_token_int_value@@Base>
   15440:	mov	r0, #12
   15444:	bl	11fcc <malloc@plt>
   15448:	mov	r4, r0
   1544c:	mov	r1, r6
   15450:	bl	14540 <init_node_return@@Base>
   15454:	ldr	r0, [r5]
   15458:	bl	13114 <next@@Base>
   1545c:	ldr	r1, [r0]
   15460:	cmp	r1, #8
   15464:	bne	1549c <read_return_expression@@Base+0xc4>
   15468:	ldrd	r2, [r7, #40]	; 0x28
   1546c:	adds	r2, r2, #1
   15470:	adc	r3, r3, #0
   15474:	strd	r2, [r7, #40]	; 0x28
   15478:	bl	12bb4 <free_token_semicolon@@Base>
   1547c:	add	r0, r7, #56	; 0x38
   15480:	b	154b4 <read_return_expression@@Base+0xdc>
   15484:	ldrd	r0, [r7, #8]
   15488:	adds	r0, r0, #1
   1548c:	adc	r1, r1, #0
   15490:	strd	r0, [r7, #8]
   15494:	add	r0, r7, #24
   15498:	b	154b0 <read_return_expression@@Base+0xd8>
   1549c:	ldrd	r0, [r7, #32]
   154a0:	adds	r0, r0, #1
   154a4:	adc	r1, r1, #0
   154a8:	strd	r0, [r7, #32]
   154ac:	add	r0, r7, #48	; 0x30
   154b0:	mov	r4, #0
   154b4:	ldrd	r2, [r0]
   154b8:	adds	r2, r2, #1
   154bc:	adc	r3, r3, #0
   154c0:	strd	r2, [r0]
   154c4:	ldrd	r0, [r7, #64]	; 0x40
   154c8:	adds	r0, r0, #1
   154cc:	adc	r1, r1, #0
   154d0:	strd	r0, [r7, #64]	; 0x40
   154d4:	mov	r0, r4
   154d8:	pop	{r4, r5, r6, r7, fp, pc}

000154dc <read_if_statement@@Base>:
   154dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   154e0:	add	fp, sp, #24
   154e4:	mov	r5, r0
   154e8:	movw	r4, #52464	; 0xccf0
   154ec:	movt	r4, #2
   154f0:	ldrd	r0, [r4]
   154f4:	adds	r0, r0, #1
   154f8:	adc	r1, r1, #0
   154fc:	strd	r0, [r4]
   15500:	ldr	r0, [r5]
   15504:	bl	13114 <next@@Base>
   15508:	ldr	r1, [r0]
   1550c:	cmp	r1, #3
   15510:	bne	1558c <read_if_statement@@Base+0xb0>
   15514:	ldrd	r2, [r4, #16]
   15518:	adds	r2, r2, #1
   1551c:	adc	r3, r3, #0
   15520:	strd	r2, [r4, #16]
   15524:	bl	12ac4 <free_token_opar@@Base>
   15528:	mov	r0, r5
   1552c:	bl	15628 <read_boolean_expression@@Base>
   15530:	mov	r8, r0
   15534:	mov	r0, r5
   15538:	bl	15194 <read_body@@Base>
   1553c:	mov	r9, r0
   15540:	ldr	r0, [r5]
   15544:	bl	13114 <next@@Base>
   15548:	mov	r1, r0
   1554c:	ldr	r0, [r0]
   15550:	cmp	r0, #11
   15554:	bne	155a8 <read_if_statement@@Base+0xcc>
   15558:	ldr	r0, [r4, #32]
   1555c:	ldr	r3, [r4, #36]	; 0x24
   15560:	adds	r0, r0, #1
   15564:	adc	r3, r3, #0
   15568:	str	r0, [r4, #32]
   1556c:	str	r3, [r4, #36]	; 0x24
   15570:	mov	r0, r1
   15574:	bl	12c44 <free_token_else@@Base>
   15578:	add	r6, r4, #48	; 0x30
   1557c:	mov	r0, r5
   15580:	bl	15194 <read_body@@Base>
   15584:	mov	r7, r0
   15588:	b	155d0 <read_if_statement@@Base+0xf4>
   1558c:	ldrd	r0, [r4, #8]
   15590:	adds	r0, r0, #1
   15594:	adc	r1, r1, #0
   15598:	strd	r0, [r4, #8]
   1559c:	add	r0, r4, #24
   155a0:	mov	r5, #0
   155a4:	b	15600 <read_if_statement@@Base+0x124>
   155a8:	ldr	r0, [r4, #40]	; 0x28
   155ac:	ldr	r3, [r4, #44]	; 0x2c
   155b0:	adds	r0, r0, #1
   155b4:	adc	r3, r3, #0
   155b8:	str	r0, [r4, #40]	; 0x28
   155bc:	str	r3, [r4, #44]	; 0x2c
   155c0:	ldr	r0, [r5]
   155c4:	bl	12fc4 <push_back@@Base>
   155c8:	add	r6, r4, #56	; 0x38
   155cc:	mov	r7, #0
   155d0:	ldrd	r0, [r6]
   155d4:	adds	r0, r0, #1
   155d8:	adc	r1, r1, #0
   155dc:	strd	r0, [r6]
   155e0:	mov	r0, #20
   155e4:	bl	11fcc <malloc@plt>
   155e8:	mov	r5, r0
   155ec:	mov	r1, r8
   155f0:	mov	r2, r9
   155f4:	mov	r3, r7
   155f8:	bl	14584 <init_node_if@@Base>
   155fc:	add	r0, r4, #64	; 0x40
   15600:	ldrd	r2, [r0]
   15604:	adds	r2, r2, #1
   15608:	adc	r3, r3, #0
   1560c:	strd	r2, [r0]
   15610:	ldrd	r0, [r4, #72]	; 0x48
   15614:	adds	r0, r0, #1
   15618:	adc	r1, r1, #0
   1561c:	strd	r0, [r4, #72]	; 0x48
   15620:	mov	r0, r5
   15624:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00015628 <read_boolean_expression@@Base>:
   15628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1562c:	add	fp, sp, #28
   15630:	sub	sp, sp, #4
   15634:	mov	r5, r0
   15638:	movw	r6, #52544	; 0xcd40
   1563c:	movt	r6, #2
   15640:	ldrd	r0, [r6]
   15644:	adds	r0, r0, #1
   15648:	adc	r1, r1, #0
   1564c:	strd	r0, [r6]
   15650:	mov	r4, #0
   15654:	str	r4, [sp]
   15658:	ldr	r0, [r5]
   1565c:	bl	13114 <next@@Base>
   15660:	mov	r1, r0
   15664:	ldr	r0, [r6, #8]
   15668:	ldr	r3, [r6, #12]
   1566c:	adds	r0, r0, #1
   15670:	adc	r3, r3, #0
   15674:	str	r0, [r6, #8]
   15678:	str	r3, [r6, #12]
   1567c:	ldr	r0, [r1]
   15680:	cmp	r0, #4
   15684:	beq	157a0 <read_boolean_expression@@Base+0x178>
   15688:	mov	r4, #0
   1568c:	mov	r9, #1
   15690:	add	sl, r6, #72	; 0x48
   15694:	mov	r8, sp
   15698:	b	15708 <read_boolean_expression@@Base+0xe0>
   1569c:	ldrd	r0, [r6, #56]	; 0x38
   156a0:	adds	r0, r0, #1
   156a4:	adc	r1, r1, #0
   156a8:	strd	r0, [r6, #56]	; 0x38
   156ac:	mov	r0, r5
   156b0:	mov	r1, r4
   156b4:	mov	r2, r8
   156b8:	mov	r3, r7
   156bc:	bl	1581c <read_single_boolean_expression@@Base>
   156c0:	mov	r4, r0
   156c4:	add	r0, r6, #80	; 0x50
   156c8:	ldrd	r2, [r0]
   156cc:	adds	r2, r2, #1
   156d0:	adc	r3, r3, #0
   156d4:	strd	r2, [r0]
   156d8:	ldr	r0, [r5]
   156dc:	bl	13114 <next@@Base>
   156e0:	mov	r1, r0
   156e4:	ldr	r0, [r6, #88]	; 0x58
   156e8:	ldr	r3, [r6, #92]	; 0x5c
   156ec:	adds	r0, r0, #1
   156f0:	adc	r3, r3, #0
   156f4:	str	r0, [r6, #88]	; 0x58
   156f8:	str	r3, [r6, #92]	; 0x5c
   156fc:	ldr	r0, [r1]
   15700:	cmp	r0, #4
   15704:	beq	157a0 <read_boolean_expression@@Base+0x178>
   15708:	ldrd	r2, [r6, #16]
   1570c:	adds	r2, r2, #1
   15710:	adc	r3, r3, #0
   15714:	strd	r2, [r6, #16]
   15718:	cmp	r0, #12
   1571c:	beq	15770 <read_boolean_expression@@Base+0x148>
   15720:	cmp	r0, #3
   15724:	beq	1569c <read_boolean_expression@@Base+0x74>
   15728:	cmp	r0, #1
   1572c:	bne	157e4 <read_boolean_expression@@Base+0x1bc>
   15730:	ldr	r0, [r6, #40]	; 0x28
   15734:	ldr	r3, [r6, #44]	; 0x2c
   15738:	adds	r0, r0, #1
   1573c:	adc	r3, r3, #0
   15740:	str	r0, [r6, #40]	; 0x28
   15744:	str	r3, [r6, #44]	; 0x2c
   15748:	ldr	r0, [r5]
   1574c:	bl	12fc4 <push_back@@Base>
   15750:	mov	r0, r5
   15754:	mov	r1, r4
   15758:	mov	r2, r8
   1575c:	mov	r3, r7
   15760:	bl	1581c <read_single_boolean_expression@@Base>
   15764:	mov	r4, r0
   15768:	add	r0, r6, #64	; 0x40
   1576c:	b	156c8 <read_boolean_expression@@Base+0xa0>
   15770:	ldr	r0, [r6, #48]	; 0x30
   15774:	ldr	r3, [r6, #52]	; 0x34
   15778:	adds	r0, r0, #1
   1577c:	adc	r3, r3, #0
   15780:	str	r0, [r6, #48]	; 0x30
   15784:	str	r3, [r6, #52]	; 0x34
   15788:	mov	r0, r1
   1578c:	bl	14a98 <get_boolean_op_value@@Base>
   15790:	mov	r7, r0
   15794:	str	r9, [sp]
   15798:	mov	r0, sl
   1579c:	b	156c8 <read_boolean_expression@@Base+0xa0>
   157a0:	ldr	r0, [r6, #24]
   157a4:	ldr	r3, [r6, #28]
   157a8:	ldr	r2, [r6, #96]	; 0x60
   157ac:	ldr	r5, [r6, #100]	; 0x64
   157b0:	adds	r0, r0, #1
   157b4:	adc	r3, r3, #0
   157b8:	adds	r2, r2, #1
   157bc:	str	r2, [r6, #96]	; 0x60
   157c0:	str	r0, [r6, #24]
   157c4:	str	r3, [r6, #28]
   157c8:	adc	r0, r5, #0
   157cc:	str	r0, [r6, #100]	; 0x64
   157d0:	mov	r0, r1
   157d4:	bl	12af4 <free_token_cpar@@Base>
   157d8:	mov	r0, r4
   157dc:	sub	sp, fp, #28
   157e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157e4:	ldrd	r0, [r6, #32]
   157e8:	adds	r0, r0, #1
   157ec:	adc	r1, r1, #0
   157f0:	strd	r0, [r6, #32]
   157f4:	movw	r0, #49384	; 0xc0e8
   157f8:	movt	r0, #2
   157fc:	ldr	r3, [r0]
   15800:	movw	r0, #42448	; 0xa5d0
   15804:	movt	r0, #1
   15808:	mov	r1, #33	; 0x21
   1580c:	mov	r2, #1
   15810:	bl	11fa8 <fwrite@plt>
   15814:	mov	r0, #1
   15818:	bl	12008 <exit@plt>

0001581c <read_single_boolean_expression@@Base>:
   1581c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15820:	add	fp, sp, #24
   15824:	mov	r8, r3
   15828:	mov	r4, r2
   1582c:	movw	r5, #52656	; 0xcdb0
   15830:	movt	r5, #2
   15834:	ldrd	r2, [r5]
   15838:	adds	r2, r2, #1
   1583c:	adc	r3, r3, #0
   15840:	strd	r2, [r5]
   15844:	cmp	r1, #0
   15848:	beq	158ac <read_single_boolean_expression@@Base+0x90>
   1584c:	ldrd	r2, [r5, #16]
   15850:	adds	r2, r2, #1
   15854:	adc	r3, r3, #0
   15858:	strd	r2, [r5, #16]
   1585c:	ldr	r1, [r4]
   15860:	cmp	r1, #0
   15864:	beq	158f0 <read_single_boolean_expression@@Base+0xd4>
   15868:	ldrd	r2, [r5, #32]
   1586c:	adds	r2, r2, #1
   15870:	adc	r3, r3, #0
   15874:	strd	r2, [r5, #32]
   15878:	bl	15928 <read_boolean_binary_expression@@Base>
   1587c:	mov	r7, r0
   15880:	mov	r0, #20
   15884:	bl	11fcc <malloc@plt>
   15888:	mov	r6, r0
   1588c:	mov	r9, #0
   15890:	mov	r1, r8
   15894:	mov	r2, #0
   15898:	mov	r3, r7
   1589c:	bl	145d8 <init_node_boolean_operator@@Base>
   158a0:	str	r9, [r4]
   158a4:	add	r4, r5, #48	; 0x30
   158a8:	b	158c8 <read_single_boolean_expression@@Base+0xac>
   158ac:	ldrd	r2, [r5, #8]
   158b0:	adds	r2, r2, #1
   158b4:	adc	r3, r3, #0
   158b8:	strd	r2, [r5, #8]
   158bc:	add	r4, r5, #24
   158c0:	bl	15928 <read_boolean_binary_expression@@Base>
   158c4:	mov	r6, r0
   158c8:	ldrd	r0, [r4]
   158cc:	adds	r0, r0, #1
   158d0:	adc	r1, r1, #0
   158d4:	strd	r0, [r4]
   158d8:	ldrd	r0, [r5, #56]	; 0x38
   158dc:	adds	r0, r0, #1
   158e0:	adc	r1, r1, #0
   158e4:	strd	r0, [r5, #56]	; 0x38
   158e8:	mov	r0, r6
   158ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   158f0:	ldrd	r0, [r5, #40]	; 0x28
   158f4:	adds	r0, r0, #1
   158f8:	adc	r1, r1, #0
   158fc:	strd	r0, [r5, #40]	; 0x28
   15900:	movw	r0, #49384	; 0xc0e8
   15904:	movt	r0, #2
   15908:	ldr	r0, [r0]
   1590c:	mov	r1, #4
   15910:	ldr	r2, [r1]
   15914:	movw	r1, #42482	; 0xa5f2
   15918:	movt	r1, #1
   1591c:	bl	12038 <fprintf@plt>
   15920:	mov	r0, #1
   15924:	bl	12008 <exit@plt>

00015928 <read_boolean_binary_expression@@Base>:
   15928:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1592c:	add	fp, sp, #24
   15930:	mov	r5, r0
   15934:	movw	r4, #52720	; 0xcdf0
   15938:	movt	r4, #2
   1593c:	ldrd	r0, [r4]
   15940:	adds	r0, r0, #1
   15944:	adc	r1, r1, #0
   15948:	strd	r0, [r4]
   1594c:	ldr	r0, [r5]
   15950:	bl	13114 <next@@Base>
   15954:	mov	r6, r0
   15958:	ldr	r0, [r0]
   1595c:	cmp	r0, #1
   15960:	bne	15a34 <read_boolean_binary_expression@@Base+0x10c>
   15964:	ldrd	r0, [r4, #16]
   15968:	adds	r0, r0, #1
   1596c:	adc	r1, r1, #0
   15970:	strd	r0, [r4, #16]
   15974:	mov	r0, #12
   15978:	bl	11fcc <malloc@plt>
   1597c:	mov	r8, r0
   15980:	ldr	r1, [r6, #4]
   15984:	bl	144b0 <init_node_int@@Base>
   15988:	mov	r0, r6
   1598c:	bl	12a64 <free_token_int_value@@Base>
   15990:	ldr	r0, [r5]
   15994:	bl	13114 <next@@Base>
   15998:	mov	r7, r0
   1599c:	ldr	r0, [r0]
   159a0:	cmp	r0, #12
   159a4:	bne	15a7c <read_boolean_binary_expression@@Base+0x154>
   159a8:	ldrd	r0, [r4, #64]	; 0x40
   159ac:	adds	r0, r0, #1
   159b0:	adc	r1, r1, #0
   159b4:	strd	r0, [r4, #64]	; 0x40
   159b8:	mov	r0, r7
   159bc:	bl	14a98 <get_boolean_op_value@@Base>
   159c0:	mov	r6, r0
   159c4:	mov	r0, r7
   159c8:	bl	12c74 <free_token_boolean_op@@Base>
   159cc:	ldr	r0, [r5]
   159d0:	bl	13114 <next@@Base>
   159d4:	mov	r5, r0
   159d8:	ldr	r0, [r0]
   159dc:	cmp	r0, #1
   159e0:	bne	15ab4 <read_boolean_binary_expression@@Base+0x18c>
   159e4:	ldrd	r0, [r4, #88]	; 0x58
   159e8:	adds	r0, r0, #1
   159ec:	adc	r1, r1, #0
   159f0:	strd	r0, [r4, #88]	; 0x58
   159f4:	mov	r0, #12
   159f8:	bl	11fcc <malloc@plt>
   159fc:	mov	r7, r0
   15a00:	ldr	r1, [r5, #4]
   15a04:	bl	144b0 <init_node_int@@Base>
   15a08:	mov	r0, r5
   15a0c:	bl	12a64 <free_token_int_value@@Base>
   15a10:	mov	r0, #20
   15a14:	bl	11fcc <malloc@plt>
   15a18:	mov	r5, r0
   15a1c:	mov	r1, r6
   15a20:	mov	r2, r8
   15a24:	mov	r3, r7
   15a28:	bl	145d8 <init_node_boolean_operator@@Base>
   15a2c:	add	r6, r4, #104	; 0x68
   15a30:	b	15ad4 <read_boolean_binary_expression@@Base+0x1ac>
   15a34:	ldrd	r2, [r4, #8]
   15a38:	adds	r2, r2, #1
   15a3c:	adc	r3, r3, #0
   15a40:	strd	r2, [r4, #8]
   15a44:	cmp	r0, #12
   15a48:	bne	15a9c <read_boolean_binary_expression@@Base+0x174>
   15a4c:	ldrd	r0, [r4, #24]
   15a50:	adds	r0, r0, #1
   15a54:	adc	r1, r1, #0
   15a58:	strd	r0, [r4, #24]
   15a5c:	ldr	r0, [r5]
   15a60:	mov	r1, r6
   15a64:	bl	12fc4 <push_back@@Base>
   15a68:	add	r6, r4, #40	; 0x28
   15a6c:	mov	r0, r5
   15a70:	bl	15afc <read_boolean_unary_expression@@Base>
   15a74:	mov	r5, r0
   15a78:	b	15ad4 <read_boolean_binary_expression@@Base+0x1ac>
   15a7c:	ldrd	r0, [r4, #56]	; 0x38
   15a80:	adds	r0, r0, #1
   15a84:	adc	r1, r1, #0
   15a88:	strd	r0, [r4, #56]	; 0x38
   15a8c:	mov	r0, r8
   15a90:	bl	14634 <free_node@@Base>
   15a94:	add	r6, r4, #72	; 0x48
   15a98:	b	15ad0 <read_boolean_binary_expression@@Base+0x1a8>
   15a9c:	ldrd	r0, [r4, #32]
   15aa0:	adds	r0, r0, #1
   15aa4:	adc	r1, r1, #0
   15aa8:	strd	r0, [r4, #32]
   15aac:	add	r6, r4, #48	; 0x30
   15ab0:	b	15ad0 <read_boolean_binary_expression@@Base+0x1a8>
   15ab4:	ldrd	r0, [r4, #80]	; 0x50
   15ab8:	adds	r0, r0, #1
   15abc:	adc	r1, r1, #0
   15ac0:	strd	r0, [r4, #80]	; 0x50
   15ac4:	mov	r0, r8
   15ac8:	bl	14634 <free_node@@Base>
   15acc:	add	r6, r4, #96	; 0x60
   15ad0:	mov	r5, #0
   15ad4:	ldrd	r0, [r6]
   15ad8:	adds	r0, r0, #1
   15adc:	adc	r1, r1, #0
   15ae0:	strd	r0, [r6]
   15ae4:	ldrd	r0, [r4, #112]	; 0x70
   15ae8:	adds	r0, r0, #1
   15aec:	adc	r1, r1, #0
   15af0:	strd	r0, [r4, #112]	; 0x70
   15af4:	mov	r0, r5
   15af8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00015afc <read_boolean_unary_expression@@Base>:
   15afc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b00:	add	fp, sp, #24
   15b04:	mov	r6, r0
   15b08:	movw	r5, #52848	; 0xce70
   15b0c:	movt	r5, #2
   15b10:	ldrd	r0, [r5]
   15b14:	adds	r0, r0, #1
   15b18:	adc	r1, r1, #0
   15b1c:	strd	r0, [r5]
   15b20:	mov	r0, #20
   15b24:	bl	11fcc <malloc@plt>
   15b28:	mov	r4, r0
   15b2c:	ldr	r0, [r6]
   15b30:	bl	13114 <next@@Base>
   15b34:	mov	r7, r0
   15b38:	ldr	r0, [r0]
   15b3c:	cmp	r0, #12
   15b40:	bne	15bc8 <read_boolean_unary_expression@@Base+0xcc>
   15b44:	ldrd	r0, [r5, #16]
   15b48:	adds	r0, r0, #1
   15b4c:	adc	r1, r1, #0
   15b50:	strd	r0, [r5, #16]
   15b54:	mov	r0, r7
   15b58:	bl	14a98 <get_boolean_op_value@@Base>
   15b5c:	mov	r8, r0
   15b60:	mov	r0, r7
   15b64:	bl	12c74 <free_token_boolean_op@@Base>
   15b68:	ldr	r0, [r6]
   15b6c:	bl	13114 <next@@Base>
   15b70:	mov	r6, r0
   15b74:	ldr	r0, [r0]
   15b78:	cmp	r0, #1
   15b7c:	bne	15be8 <read_boolean_unary_expression@@Base+0xec>
   15b80:	ldrd	r0, [r5, #40]	; 0x28
   15b84:	adds	r0, r0, #1
   15b88:	adc	r1, r1, #0
   15b8c:	strd	r0, [r5, #40]	; 0x28
   15b90:	mov	r0, #12
   15b94:	bl	11fcc <malloc@plt>
   15b98:	mov	r7, r0
   15b9c:	ldr	r1, [r6, #4]
   15ba0:	bl	144b0 <init_node_int@@Base>
   15ba4:	mov	r0, r6
   15ba8:	bl	12a64 <free_token_int_value@@Base>
   15bac:	mov	r0, r4
   15bb0:	mov	r1, r8
   15bb4:	mov	r2, r7
   15bb8:	mov	r3, #0
   15bbc:	bl	145d8 <init_node_boolean_operator@@Base>
   15bc0:	add	r0, r5, #56	; 0x38
   15bc4:	b	15c08 <read_boolean_unary_expression@@Base+0x10c>
   15bc8:	ldrd	r0, [r5, #8]
   15bcc:	adds	r0, r0, #1
   15bd0:	adc	r1, r1, #0
   15bd4:	strd	r0, [r5, #8]
   15bd8:	mov	r0, r4
   15bdc:	bl	14a0c <free_node_boolean_operator@@Base>
   15be0:	add	r0, r5, #24
   15be4:	b	15c04 <read_boolean_unary_expression@@Base+0x108>
   15be8:	ldrd	r0, [r5, #32]
   15bec:	adds	r0, r0, #1
   15bf0:	adc	r1, r1, #0
   15bf4:	strd	r0, [r5, #32]
   15bf8:	mov	r0, r4
   15bfc:	bl	14a0c <free_node_boolean_operator@@Base>
   15c00:	add	r0, r5, #48	; 0x30
   15c04:	mov	r4, #0
   15c08:	ldrd	r2, [r0]
   15c0c:	adds	r2, r2, #1
   15c10:	adc	r3, r3, #0
   15c14:	strd	r2, [r0]
   15c18:	ldrd	r0, [r5, #64]	; 0x40
   15c1c:	adds	r0, r0, #1
   15c20:	adc	r1, r1, #0
   15c24:	strd	r0, [r5, #64]	; 0x40
   15c28:	mov	r0, r4
   15c2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c30:	push	{r4, r5, r6, lr}
   15c34:	sub	sp, sp, #8
   15c38:	movw	r0, #42538	; 0xa62a
   15c3c:	movt	r0, #1
   15c40:	movw	r1, #39605	; 0x9ab5
   15c44:	movt	r1, #1
   15c48:	movw	r2, #51015	; 0xc747
   15c4c:	movt	r2, #42604	; 0xa66c
   15c50:	bl	1696c <__generate_code_for_binary_boolean_expression@@Base+0x410>
   15c54:	movw	r0, #43088	; 0xa850
   15c58:	movt	r0, #1
   15c5c:	add	r4, r0, #4
   15c60:	mov	r5, #0
   15c64:	movw	r6, #42864	; 0xa770
   15c68:	movt	r6, #1
   15c6c:	mov	r3, r6
   15c70:	ldr	r0, [r3, r5]!
   15c74:	ldr	r1, [r3, #16]
   15c78:	str	r1, [sp]
   15c7c:	ldmib	r3, {r1, r2}
   15c80:	ldrb	r3, [r3, #12]
   15c84:	bl	1708c <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   15c88:	ldrd	r0, [r4, #-4]
   15c8c:	bl	17940 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   15c90:	add	r5, r5, #20
   15c94:	add	r4, r4, #8
   15c98:	cmp	r5, #220	; 0xdc
   15c9c:	bne	15c6c <read_boolean_unary_expression@@Base+0x170>
   15ca0:	bl	180c8 <__generate_code_for_binary_boolean_expression@@Base+0x1b6c>
   15ca4:	add	sp, sp, #8
   15ca8:	pop	{r4, r5, r6, lr}
   15cac:	b	18e34 <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   15cb0:	push	{r4, r5, fp, lr}
   15cb4:	vpush	{d8-d9}
   15cb8:	bl	15c30 <read_boolean_unary_expression@@Base+0x134>
   15cbc:	vmov.i32	q4, #0	; 0x00000000
   15cc0:	movw	r0, #52064	; 0xcb60
   15cc4:	movt	r0, #2
   15cc8:	vst1.64	{d8-d9}, [r0]
   15ccc:	movw	r0, #52048	; 0xcb50
   15cd0:	movt	r0, #2
   15cd4:	vst1.64	{d8-d9}, [r0]
   15cd8:	movw	r0, #52080	; 0xcb70
   15cdc:	movt	r0, #2
   15ce0:	vst1.64	{d8-d9}, [r0]
   15ce4:	movw	r0, #52096	; 0xcb80
   15ce8:	movt	r0, #2
   15cec:	add	r1, r0, #16
   15cf0:	vst1.64	{d8-d9}, [r1 :128]
   15cf4:	add	r1, r0, #32
   15cf8:	vst1.64	{d8-d9}, [r1 :128]
   15cfc:	add	r1, r0, #48	; 0x30
   15d00:	vst1.64	{d8-d9}, [r1 :128]
   15d04:	add	r1, r0, #64	; 0x40
   15d08:	vst1.64	{d8-d9}, [r1 :128]
   15d0c:	add	r1, r0, #80	; 0x50
   15d10:	vst1.64	{d8-d9}, [r1 :128]
   15d14:	add	r1, r0, #96	; 0x60
   15d18:	vst1.64	{d8-d9}, [r1 :128]
   15d1c:	mov	r4, #0
   15d20:	str	r4, [r0, #112]	; 0x70
   15d24:	mov	r5, #116	; 0x74
   15d28:	vst1.64	{d8-d9}, [r0 :128], r5
   15d2c:	str	r4, [r0]
   15d30:	movw	r0, #52224	; 0xcc00
   15d34:	movt	r0, #2
   15d38:	mov	r1, #0
   15d3c:	mov	r2, #160	; 0xa0
   15d40:	bl	12068 <memset@plt>
   15d44:	mov	r0, #100	; 0x64
   15d48:	movw	r1, #52544	; 0xcd40
   15d4c:	movt	r1, #2
   15d50:	mov	r2, r1
   15d54:	vst1.64	{d8-d9}, [r2 :128], r0
   15d58:	str	r4, [r2]
   15d5c:	movw	r2, #52384	; 0xcca0
   15d60:	movt	r2, #2
   15d64:	add	r0, r2, #16
   15d68:	vst1.64	{d8-d9}, [r0 :128]
   15d6c:	add	r0, r2, #32
   15d70:	vst1.64	{d8-d9}, [r0 :128]
   15d74:	add	r0, r2, #48	; 0x30
   15d78:	vst1.64	{d8-d9}, [r0 :128]
   15d7c:	str	r4, [r2, #64]	; 0x40
   15d80:	movw	r3, #52464	; 0xccf0
   15d84:	movt	r3, #2
   15d88:	add	r0, r3, #16
   15d8c:	vst1.64	{d8-d9}, [r0 :128]
   15d90:	add	r0, r3, #32
   15d94:	vst1.64	{d8-d9}, [r0 :128]
   15d98:	add	r0, r3, #48	; 0x30
   15d9c:	vst1.64	{d8-d9}, [r0 :128]
   15da0:	add	r0, r1, #16
   15da4:	vst1.64	{d8-d9}, [r0 :128]
   15da8:	add	r0, r1, #32
   15dac:	vst1.64	{d8-d9}, [r0 :128]
   15db0:	add	r0, r1, #48	; 0x30
   15db4:	vst1.64	{d8-d9}, [r0 :128]
   15db8:	add	r0, r1, #64	; 0x40
   15dbc:	vst1.64	{d8-d9}, [r0 :128]
   15dc0:	add	r0, r1, #80	; 0x50
   15dc4:	vst1.64	{d8-d9}, [r0 :128]
   15dc8:	str	r4, [r1, #96]	; 0x60
   15dcc:	mov	r0, #68	; 0x44
   15dd0:	vst1.64	{d8-d9}, [r2 :128], r0
   15dd4:	str	r4, [r2]
   15dd8:	mov	r1, #64	; 0x40
   15ddc:	vst1.64	{d8-d9}, [r3 :128], r1
   15de0:	vst1.64	{d8-d9}, [r3 :128]
   15de4:	movw	r1, #52656	; 0xcdb0
   15de8:	movt	r1, #2
   15dec:	add	r2, r1, #16
   15df0:	vst1.64	{d8-d9}, [r2 :128]
   15df4:	add	r2, r1, #32
   15df8:	vst1.64	{d8-d9}, [r2 :128]
   15dfc:	mov	r2, #48	; 0x30
   15e00:	vst1.64	{d8-d9}, [r1 :128], r2
   15e04:	vst1.64	{d8-d9}, [r1 :128]
   15e08:	movw	r1, #52720	; 0xcdf0
   15e0c:	movt	r1, #2
   15e10:	mov	r2, r1
   15e14:	vst1.64	{d8-d9}, [r2 :128], r5
   15e18:	str	r4, [r2]
   15e1c:	str	r4, [r1, #112]	; 0x70
   15e20:	add	r2, r1, #96	; 0x60
   15e24:	vst1.64	{d8-d9}, [r2 :128]
   15e28:	add	r2, r1, #80	; 0x50
   15e2c:	vst1.64	{d8-d9}, [r2 :128]
   15e30:	add	r2, r1, #64	; 0x40
   15e34:	vst1.64	{d8-d9}, [r2 :128]
   15e38:	add	r2, r1, #48	; 0x30
   15e3c:	vst1.64	{d8-d9}, [r2 :128]
   15e40:	add	r2, r1, #32
   15e44:	vst1.64	{d8-d9}, [r2 :128]
   15e48:	add	r1, r1, #16
   15e4c:	vst1.64	{d8-d9}, [r1 :128]
   15e50:	movw	r1, #52848	; 0xce70
   15e54:	movt	r1, #2
   15e58:	str	r4, [r1, #64]	; 0x40
   15e5c:	add	r2, r1, #48	; 0x30
   15e60:	vst1.64	{d8-d9}, [r2 :128]
   15e64:	add	r2, r1, #32
   15e68:	vst1.64	{d8-d9}, [r2 :128]
   15e6c:	add	r2, r1, #16
   15e70:	vst1.64	{d8-d9}, [r2 :128]
   15e74:	vst1.64	{d8-d9}, [r1 :128], r0
   15e78:	str	r4, [r1]
   15e7c:	vpop	{d8-d9}
   15e80:	pop	{r4, r5, fp, pc}
   15e84:	movw	r0, #23600	; 0x5c30
   15e88:	movt	r0, #1
   15e8c:	movw	r1, #23728	; 0x5cb0
   15e90:	movt	r1, #1
   15e94:	b	192e8 <__gcov_flush@@Base+0xb8>

00015e98 <init_generator@@Base>:
   15e98:	push	{r4, r5, fp, lr}
   15e9c:	add	fp, sp, #8
   15ea0:	mov	ip, r2
   15ea4:	mov	r4, r0
   15ea8:	movw	r0, #52928	; 0xcec0
   15eac:	movt	r0, #2
   15eb0:	ldr	r3, [r0]
   15eb4:	ldmib	r0, {r2, lr}
   15eb8:	ldr	r5, [r0, #12]
   15ebc:	adds	r3, r3, #1
   15ec0:	adc	r2, r2, #0
   15ec4:	adds	lr, lr, #1
   15ec8:	adc	r5, r5, #0
   15ecc:	str	r3, [r0]
   15ed0:	stmib	r0, {r2, lr}
   15ed4:	str	r5, [r0, #12]
   15ed8:	str	r1, [r4]
   15edc:	movw	r1, #43176	; 0xa8a8
   15ee0:	movt	r1, #1
   15ee4:	mov	r0, ip
   15ee8:	bl	11f3c <fopen@plt>
   15eec:	mov	r1, #0
   15ef0:	stmib	r4, {r0, r1}
   15ef4:	str	r1, [r4, #12]
   15ef8:	pop	{r4, r5, fp, pc}

00015efc <destroy_generator@@Base>:
   15efc:	push	{fp, lr}
   15f00:	mov	fp, sp
   15f04:	movw	r1, #52944	; 0xced0
   15f08:	movt	r1, #2
   15f0c:	ldm	r1, {r2, r3, ip, lr}
   15f10:	adds	r2, r2, #1
   15f14:	adc	r3, r3, #0
   15f18:	adds	ip, ip, #1
   15f1c:	adc	lr, lr, #0
   15f20:	stm	r1, {r2, r3, ip, lr}
   15f24:	ldr	r0, [r0, #4]
   15f28:	pop	{fp, lr}
   15f2c:	b	12098 <fclose@plt>

00015f30 <generate_code@@Base>:
   15f30:	push	{r4, r5, fp, lr}
   15f34:	add	fp, sp, #8
   15f38:	mov	r4, r0
   15f3c:	movw	r0, #52960	; 0xcee0
   15f40:	movt	r0, #2
   15f44:	ldm	r0, {r1, r2, r3, r5}
   15f48:	adds	r1, r1, #1
   15f4c:	adc	r2, r2, #0
   15f50:	adds	r3, r3, #1
   15f54:	adc	r5, r5, #0
   15f58:	stm	r0, {r1, r2, r3, r5}
   15f5c:	ldr	r0, [r4]
   15f60:	bl	14fe4 <build_ast@@Base>
   15f64:	mov	r5, r0
   15f68:	mov	r0, r4
   15f6c:	mov	r1, r5
   15f70:	bl	15f80 <__generate_code@@Base>
   15f74:	mov	r0, r5
   15f78:	pop	{r4, r5, fp, lr}
   15f7c:	b	14634 <free_node@@Base>

00015f80 <__generate_code@@Base>:
   15f80:	push	{r4, r5, r6, sl, fp, lr}
   15f84:	add	fp, sp, #16
   15f88:	mov	r6, r1
   15f8c:	mov	r5, r0
   15f90:	movw	r0, #52976	; 0xcef0
   15f94:	movt	r0, #2
   15f98:	ldm	r0, {r1, r2, r3, r4}
   15f9c:	adds	r1, r1, #1
   15fa0:	adc	r2, r2, #0
   15fa4:	adds	r3, r3, #1
   15fa8:	adc	r4, r4, #0
   15fac:	stm	r0, {r1, r2, r3, r4}
   15fb0:	ldr	r3, [r5, #4]
   15fb4:	movw	r0, #43178	; 0xa8aa
   15fb8:	movt	r0, #1
   15fbc:	mov	r1, #21
   15fc0:	mov	r2, #1
   15fc4:	bl	11fa8 <fwrite@plt>
   15fc8:	mov	r0, r5
   15fcc:	mov	r1, r6
   15fd0:	pop	{r4, r5, r6, sl, fp, lr}
   15fd4:	b	15fd8 <__generate_code_for_main@@Base>

00015fd8 <__generate_code_for_main@@Base>:
   15fd8:	push	{r4, r5, r6, r7, fp, lr}
   15fdc:	add	fp, sp, #16
   15fe0:	movw	r2, #52992	; 0xcf00
   15fe4:	movt	r2, #2
   15fe8:	ldrd	r4, [r2]
   15fec:	adds	r4, r4, #1
   15ff0:	adc	r5, r5, #0
   15ff4:	strd	r4, [r2]
   15ff8:	ldr	r3, [r1]
   15ffc:	cmp	r3, #2
   16000:	bne	16030 <__generate_code_for_main@@Base+0x58>
   16004:	ldrd	r4, [r2, #8]
   16008:	ldrd	r6, [r2, #24]
   1600c:	adds	r4, r4, #1
   16010:	adc	r5, r5, #0
   16014:	adds	r3, r6, #1
   16018:	str	r3, [r2, #24]
   1601c:	strd	r4, [r2, #8]
   16020:	adc	r3, r7, #0
   16024:	str	r3, [r2, #28]
   16028:	pop	{r4, r5, r6, r7, fp, lr}
   1602c:	b	16068 <__generate_code_for_function@@Base>
   16030:	ldrd	r0, [r2, #16]
   16034:	adds	r0, r0, #1
   16038:	adc	r1, r1, #0
   1603c:	strd	r0, [r2, #16]
   16040:	movw	r0, #49384	; 0xc0e8
   16044:	movt	r0, #2
   16048:	ldr	r3, [r0]
   1604c:	movw	r0, #43200	; 0xa8c0
   16050:	movt	r0, #1
   16054:	mov	r1, #46	; 0x2e
   16058:	mov	r2, #1
   1605c:	bl	11fa8 <fwrite@plt>
   16060:	mov	r0, #1
   16064:	bl	12008 <exit@plt>

00016068 <__generate_code_for_function@@Base>:
   16068:	push	{r4, r5, r6, sl, fp, lr}
   1606c:	add	fp, sp, #16
   16070:	mov	r6, r1
   16074:	mov	r5, r0
   16078:	movw	r0, #53024	; 0xcf20
   1607c:	movt	r0, #2
   16080:	ldm	r0, {r1, r2, r3, r4}
   16084:	adds	r1, r1, #1
   16088:	adc	r2, r2, #0
   1608c:	adds	r3, r3, #1
   16090:	adc	r4, r4, #0
   16094:	stm	r0, {r1, r2, r3, r4}
   16098:	ldr	r2, [r6, #8]
   1609c:	ldr	r0, [r5, #4]
   160a0:	movw	r1, #43247	; 0xa8ef
   160a4:	movt	r1, #1
   160a8:	bl	12038 <fprintf@plt>
   160ac:	ldr	r1, [r6, #12]
   160b0:	mov	r0, r5
   160b4:	pop	{r4, r5, r6, sl, fp, lr}
   160b8:	b	160bc <__generate_code_for_body@@Base>

000160bc <__generate_code_for_body@@Base>:
   160bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   160c0:	add	fp, sp, #24
   160c4:	mov	r4, r0
   160c8:	movw	r5, #53040	; 0xcf30
   160cc:	movt	r5, #2
   160d0:	ldm	r5, {r0, r2, r3, r7}
   160d4:	adds	r0, r0, #1
   160d8:	adc	r2, r2, #0
   160dc:	adds	r3, r3, #1
   160e0:	adc	r7, r7, #0
   160e4:	stm	r5, {r0, r2, r3, r7}
   160e8:	cmp	r1, #0
   160ec:	beq	161a0 <__generate_code_for_body@@Base+0xe4>
   160f0:	add	r8, r5, #64	; 0x40
   160f4:	add	r7, r5, #56	; 0x38
   160f8:	b	1614c <__generate_code_for_body@@Base+0x90>
   160fc:	ldr	r0, [r5, #48]	; 0x30
   16100:	ldr	r3, [r5, #52]	; 0x34
   16104:	adds	r0, r0, #1
   16108:	adc	r3, r3, #0
   1610c:	str	r0, [r5, #48]	; 0x30
   16110:	str	r3, [r5, #52]	; 0x34
   16114:	mov	r0, r4
   16118:	bl	16200 <__generate_code_for_if@@Base>
   1611c:	mov	r0, r8
   16120:	ldrd	r2, [r0]
   16124:	adds	r2, r2, #1
   16128:	adc	r3, r3, #0
   1612c:	strd	r2, [r0]
   16130:	ldrd	r0, [r5, #72]	; 0x48
   16134:	adds	r0, r0, #1
   16138:	adc	r1, r1, #0
   1613c:	strd	r0, [r5, #72]	; 0x48
   16140:	cmp	r6, #0
   16144:	mov	r1, r6
   16148:	beq	161a0 <__generate_code_for_body@@Base+0xe4>
   1614c:	ldr	r0, [r5, #16]
   16150:	ldr	r3, [r5, #20]
   16154:	adds	r0, r0, #1
   16158:	adc	r3, r3, #0
   1615c:	str	r0, [r5, #16]
   16160:	str	r3, [r5, #20]
   16164:	ldm	r1, {r0, r6}
   16168:	cmp	r0, #4
   1616c:	beq	160fc <__generate_code_for_body@@Base+0x40>
   16170:	cmp	r0, #3
   16174:	bne	161c8 <__generate_code_for_body@@Base+0x10c>
   16178:	ldr	r0, [r5, #40]	; 0x28
   1617c:	ldr	r3, [r5, #44]	; 0x2c
   16180:	adds	r0, r0, #1
   16184:	adc	r3, r3, #0
   16188:	str	r0, [r5, #40]	; 0x28
   1618c:	str	r3, [r5, #44]	; 0x2c
   16190:	mov	r0, r4
   16194:	bl	16350 <__generate_code_for_return@@Base>
   16198:	mov	r0, r7
   1619c:	b	16120 <__generate_code_for_body@@Base+0x64>
   161a0:	ldrd	r0, [r5, #24]
   161a4:	ldrd	r2, [r5, #80]	; 0x50
   161a8:	adds	r0, r0, #1
   161ac:	adc	r1, r1, #0
   161b0:	adds	r2, r2, #1
   161b4:	str	r2, [r5, #80]	; 0x50
   161b8:	strd	r0, [r5, #24]
   161bc:	adc	r0, r3, #0
   161c0:	str	r0, [r5, #84]	; 0x54
   161c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161c8:	ldrd	r0, [r5, #32]
   161cc:	adds	r0, r0, #1
   161d0:	adc	r1, r1, #0
   161d4:	strd	r0, [r5, #32]
   161d8:	movw	r0, #49384	; 0xc0e8
   161dc:	movt	r0, #2
   161e0:	ldr	r3, [r0]
   161e4:	movw	r0, #43509	; 0xa9f5
   161e8:	movt	r0, #1
   161ec:	mov	r1, #52	; 0x34
   161f0:	mov	r2, #1
   161f4:	bl	11fa8 <fwrite@plt>
   161f8:	mov	r0, #1
   161fc:	bl	12008 <exit@plt>

00016200 <__generate_code_for_if@@Base>:
   16200:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   16204:	add	fp, sp, #24
   16208:	mov	r5, r1
   1620c:	mov	r4, r0
   16210:	movw	r6, #53136	; 0xcf90
   16214:	movt	r6, #2
   16218:	ldrd	r0, [r6]
   1621c:	adds	r0, r0, #1
   16220:	adc	r1, r1, #0
   16224:	strd	r0, [r6]
   16228:	ldrd	r8, [r4, #8]
   1622c:	adds	r0, r8, #1
   16230:	adc	r1, r9, #0
   16234:	strd	r0, [r4, #8]
   16238:	ldr	r1, [r5, #8]
   1623c:	mov	r0, r4
   16240:	mov	r2, r8
   16244:	mov	r3, r9
   16248:	bl	162cc <__generate_code_for_if_expression@@Base>
   1624c:	ldr	r1, [r5, #12]
   16250:	mov	r0, r4
   16254:	bl	160bc <__generate_code_for_body@@Base>
   16258:	ldr	r0, [r4, #4]
   1625c:	movw	r1, #43252	; 0xa8f4
   16260:	movt	r1, #1
   16264:	mov	r2, r8
   16268:	mov	r3, r9
   1626c:	bl	12038 <fprintf@plt>
   16270:	ldr	r1, [r5, #16]
   16274:	cmp	r1, #0
   16278:	beq	162a4 <__generate_code_for_if@@Base+0xa4>
   1627c:	ldr	r0, [r6, #8]
   16280:	ldr	r3, [r6, #12]
   16284:	adds	r0, r0, #1
   16288:	adc	r3, r3, #0
   1628c:	str	r0, [r6, #8]
   16290:	str	r3, [r6, #12]
   16294:	mov	r0, r4
   16298:	bl	160bc <__generate_code_for_body@@Base>
   1629c:	add	r0, r6, #24
   162a0:	b	162a8 <__generate_code_for_if@@Base+0xa8>
   162a4:	add	r0, r6, #16
   162a8:	ldrd	r2, [r0]
   162ac:	adds	r2, r2, #1
   162b0:	adc	r3, r3, #0
   162b4:	strd	r2, [r0]
   162b8:	ldrd	r0, [r6, #32]
   162bc:	adds	r0, r0, #1
   162c0:	adc	r1, r1, #0
   162c4:	strd	r0, [r6, #32]
   162c8:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}

000162cc <__generate_code_for_if_expression@@Base>:
   162cc:	push	{r4, r6, r7, sl, fp, lr}
   162d0:	add	fp, sp, #16
   162d4:	movw	r4, #53184	; 0xcfc0
   162d8:	movt	r4, #2
   162dc:	ldrd	r6, [r4]
   162e0:	adds	r6, r6, #1
   162e4:	adc	r7, r7, #0
   162e8:	strd	r6, [r4]
   162ec:	ldr	r7, [r1, #16]
   162f0:	cmp	r7, #8
   162f4:	bne	16314 <__generate_code_for_if_expression@@Base+0x48>
   162f8:	ldrd	r6, [r4, #8]
   162fc:	adds	r6, r6, #1
   16300:	adc	r7, r7, #0
   16304:	strd	r6, [r4, #8]
   16308:	bl	16468 <__generate_code_for_unary_boolean_expression@@Base>
   1630c:	add	r0, r4, #24
   16310:	b	1632c <__generate_code_for_if_expression@@Base+0x60>
   16314:	ldrd	r6, [r4, #16]
   16318:	adds	r6, r6, #1
   1631c:	adc	r7, r7, #0
   16320:	strd	r6, [r4, #16]
   16324:	bl	1655c <__generate_code_for_binary_boolean_expression@@Base>
   16328:	add	r0, r4, #32
   1632c:	ldrd	r2, [r0]
   16330:	adds	r2, r2, #1
   16334:	adc	r3, r3, #0
   16338:	strd	r2, [r0]
   1633c:	ldrd	r0, [r4, #40]	; 0x28
   16340:	adds	r0, r0, #1
   16344:	adc	r1, r1, #0
   16348:	strd	r0, [r4, #40]	; 0x28
   1634c:	pop	{r4, r6, r7, sl, fp, pc}

00016350 <__generate_code_for_return@@Base>:
   16350:	push	{r4, r5, r6, sl, fp, lr}
   16354:	add	fp, sp, #16
   16358:	mov	r4, r0
   1635c:	movw	r6, #53232	; 0xcff0
   16360:	movt	r6, #2
   16364:	ldm	r6, {r0, r3}
   16368:	adds	r0, r0, #1
   1636c:	adc	r3, r3, #0
   16370:	stm	r6, {r0, r3}
   16374:	ldr	r5, [r1, #8]
   16378:	ldr	r3, [r4, #4]
   1637c:	movw	r0, #43267	; 0xa903
   16380:	movt	r0, #1
   16384:	mov	r1, #9
   16388:	mov	r2, #1
   1638c:	bl	11fa8 <fwrite@plt>
   16390:	ldr	r0, [r5]
   16394:	cmp	r0, #1
   16398:	bne	163e8 <__generate_code_for_return@@Base+0x98>
   1639c:	ldrd	r0, [r6, #8]
   163a0:	ldrd	r2, [r6, #24]
   163a4:	adds	r0, r0, #1
   163a8:	adc	r1, r1, #0
   163ac:	adds	r2, r2, #1
   163b0:	str	r2, [r6, #24]
   163b4:	strd	r0, [r6, #8]
   163b8:	adc	r0, r3, #0
   163bc:	str	r0, [r6, #28]
   163c0:	mov	r0, r4
   163c4:	mov	r1, r5
   163c8:	bl	16420 <__generate_code_for_int@@Base>
   163cc:	ldr	r3, [r4, #4]
   163d0:	movw	r0, #43315	; 0xa933
   163d4:	movt	r0, #1
   163d8:	mov	r1, #8
   163dc:	mov	r2, #1
   163e0:	pop	{r4, r5, r6, sl, fp, lr}
   163e4:	b	11fa8 <fwrite@plt>
   163e8:	ldrd	r0, [r6, #16]
   163ec:	adds	r0, r0, #1
   163f0:	adc	r1, r1, #0
   163f4:	strd	r0, [r6, #16]
   163f8:	movw	r0, #49384	; 0xc0e8
   163fc:	movt	r0, #2
   16400:	ldr	r3, [r0]
   16404:	movw	r0, #43277	; 0xa90d
   16408:	movt	r0, #1
   1640c:	mov	r1, #37	; 0x25
   16410:	mov	r2, #1
   16414:	bl	11fa8 <fwrite@plt>
   16418:	mov	r0, #1
   1641c:	bl	12008 <exit@plt>

00016420 <__generate_code_for_int@@Base>:
   16420:	push	{r4, sl, fp, lr}
   16424:	add	fp, sp, #8
   16428:	movw	r2, #53264	; 0xd010
   1642c:	movt	r2, #2
   16430:	ldm	r2, {r3, ip, lr}
   16434:	ldr	r4, [r2, #12]
   16438:	adds	r3, r3, #1
   1643c:	adc	ip, ip, #0
   16440:	adds	lr, lr, #1
   16444:	adc	r4, r4, #0
   16448:	stm	r2, {r3, ip, lr}
   1644c:	str	r4, [r2, #12]
   16450:	ldr	r2, [r1, #8]
   16454:	ldr	r0, [r0, #4]
   16458:	movw	r1, #43324	; 0xa93c
   1645c:	movt	r1, #1
   16460:	pop	{r4, sl, fp, lr}
   16464:	b	12038 <fprintf@plt>

00016468 <__generate_code_for_unary_boolean_expression@@Base>:
   16468:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1646c:	add	fp, sp, #24
   16470:	mov	r8, r3
   16474:	mov	r9, r2
   16478:	mov	r7, r1
   1647c:	mov	r6, r0
   16480:	movw	r5, #53280	; 0xd020
   16484:	movt	r5, #2
   16488:	ldrd	r0, [r5]
   1648c:	adds	r0, r0, #1
   16490:	adc	r1, r1, #0
   16494:	strd	r0, [r5]
   16498:	ldr	r4, [r7, #8]
   1649c:	ldr	r3, [r6, #4]
   164a0:	movw	r0, #43497	; 0xa9e9
   164a4:	movt	r0, #1
   164a8:	mov	r1, #11
   164ac:	mov	r2, #1
   164b0:	bl	11fa8 <fwrite@plt>
   164b4:	ldr	r3, [r6, #4]
   164b8:	movw	r0, #43328	; 0xa940
   164bc:	movt	r0, #1
   164c0:	mov	r1, #9
   164c4:	mov	r2, #1
   164c8:	bl	11fa8 <fwrite@plt>
   164cc:	mov	r0, r6
   164d0:	mov	r1, r4
   164d4:	bl	16420 <__generate_code_for_int@@Base>
   164d8:	ldr	r0, [r7, #16]
   164dc:	cmp	r0, #8
   164e0:	bne	16524 <__generate_code_for_unary_boolean_expression@@Base+0xbc>
   164e4:	ldrd	r0, [r5, #8]
   164e8:	ldrd	r2, [r5, #24]
   164ec:	adds	r0, r0, #1
   164f0:	adc	r1, r1, #0
   164f4:	adds	r2, r2, #1
   164f8:	str	r2, [r5, #24]
   164fc:	strd	r0, [r5, #8]
   16500:	adc	r0, r3, #0
   16504:	str	r0, [r5, #28]
   16508:	ldr	r0, [r6, #4]
   1650c:	movw	r1, #43370	; 0xa96a
   16510:	movt	r1, #1
   16514:	mov	r2, r9
   16518:	mov	r3, r8
   1651c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   16520:	b	12038 <fprintf@plt>
   16524:	ldrd	r0, [r5, #16]
   16528:	adds	r0, r0, #1
   1652c:	adc	r1, r1, #0
   16530:	strd	r0, [r5, #16]
   16534:	movw	r0, #49384	; 0xc0e8
   16538:	movt	r0, #2
   1653c:	ldr	r3, [r0]
   16540:	movw	r0, #43465	; 0xa9c9
   16544:	movt	r0, #1
   16548:	mov	r1, #31
   1654c:	mov	r2, #1
   16550:	bl	11fa8 <fwrite@plt>
   16554:	mov	r0, #1
   16558:	bl	12008 <exit@plt>

0001655c <__generate_code_for_binary_boolean_expression@@Base>:
   1655c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16560:	add	fp, sp, #28
   16564:	sub	sp, sp, #4
   16568:	mov	r8, r3
   1656c:	mov	r9, r2
   16570:	mov	r7, r1
   16574:	mov	r6, r0
   16578:	movw	sl, #53312	; 0xd040
   1657c:	movt	sl, #2
   16580:	ldrd	r0, [sl]
   16584:	adds	r0, r0, #1
   16588:	adc	r1, r1, #0
   1658c:	strd	r0, [sl]
   16590:	ldr	r5, [r7, #8]
   16594:	ldr	r4, [r7, #12]
   16598:	ldr	r3, [r6, #4]
   1659c:	movw	r0, #43267	; 0xa903
   165a0:	movt	r0, #1
   165a4:	mov	r1, #9
   165a8:	mov	r2, #1
   165ac:	bl	11fa8 <fwrite@plt>
   165b0:	mov	r0, r6
   165b4:	mov	r1, r5
   165b8:	bl	16420 <__generate_code_for_int@@Base>
   165bc:	ldr	r1, [r6, #4]
   165c0:	mov	r0, #10
   165c4:	bl	120d4 <fputc@plt>
   165c8:	ldr	r3, [r6, #4]
   165cc:	movw	r0, #43328	; 0xa940
   165d0:	movt	r0, #1
   165d4:	mov	r1, #9
   165d8:	mov	r2, #1
   165dc:	bl	11fa8 <fwrite@plt>
   165e0:	mov	r0, r6
   165e4:	mov	r1, r4
   165e8:	bl	16420 <__generate_code_for_int@@Base>
   165ec:	ldr	r1, [r6, #4]
   165f0:	mov	r0, #10
   165f4:	bl	120d4 <fputc@plt>
   165f8:	ldr	r3, [r6, #4]
   165fc:	movw	r0, #43338	; 0xa94a
   16600:	movt	r0, #1
   16604:	mov	r1, #12
   16608:	mov	r2, #1
   1660c:	bl	11fa8 <fwrite@plt>
   16610:	ldr	r1, [r7, #16]
   16614:	cmp	r1, #7
   16618:	bhi	1678c <__generate_code_for_binary_boolean_expression@@Base+0x230>
   1661c:	add	r0, sl, #56	; 0x38
   16620:	add	r2, pc, #0
   16624:	ldr	pc, [r2, r1, lsl #2]
   16628:	andeq	r6, r1, r8, asr #12
   1662c:	andeq	r6, r1, r8, lsr #13
   16630:	andeq	r6, r1, r8, ror r6
   16634:	andeq	r6, r1, r8, lsl #14
   16638:	andeq	r6, r1, r4, ror #14
   1663c:	andeq	r6, r1, r4, ror #14
   16640:	andeq	r6, r1, r8, lsr r7
   16644:	ldrdeq	r6, [r1], -r8
   16648:	ldrd	r0, [sl, #16]
   1664c:	adds	r0, r0, #1
   16650:	adc	r1, r1, #0
   16654:	strd	r0, [sl, #16]
   16658:	ldr	r0, [r6, #4]
   1665c:	movw	r1, #43351	; 0xa957
   16660:	movt	r1, #1
   16664:	mov	r2, r9
   16668:	mov	r3, r8
   1666c:	bl	12038 <fprintf@plt>
   16670:	add	r0, sl, #80	; 0x50
   16674:	b	16764 <__generate_code_for_binary_boolean_expression@@Base+0x208>
   16678:	ldrd	r0, [sl, #32]
   1667c:	adds	r0, r0, #1
   16680:	adc	r1, r1, #0
   16684:	strd	r0, [sl, #32]
   16688:	ldr	r0, [r6, #4]
   1668c:	movw	r1, #43389	; 0xa97d
   16690:	movt	r1, #1
   16694:	mov	r2, r9
   16698:	mov	r3, r8
   1669c:	bl	12038 <fprintf@plt>
   166a0:	add	r0, sl, #96	; 0x60
   166a4:	b	16764 <__generate_code_for_binary_boolean_expression@@Base+0x208>
   166a8:	ldrd	r0, [sl, #24]
   166ac:	adds	r0, r0, #1
   166b0:	adc	r1, r1, #0
   166b4:	strd	r0, [sl, #24]
   166b8:	ldr	r0, [r6, #4]
   166bc:	movw	r1, #43370	; 0xa96a
   166c0:	movt	r1, #1
   166c4:	mov	r2, r9
   166c8:	mov	r3, r8
   166cc:	bl	12038 <fprintf@plt>
   166d0:	add	r0, sl, #88	; 0x58
   166d4:	b	16764 <__generate_code_for_binary_boolean_expression@@Base+0x208>
   166d8:	ldrd	r0, [sl, #72]	; 0x48
   166dc:	adds	r0, r0, #1
   166e0:	adc	r1, r1, #0
   166e4:	strd	r0, [sl, #72]	; 0x48
   166e8:	ldr	r0, [r6, #4]
   166ec:	movw	r1, #43446	; 0xa9b6
   166f0:	movt	r1, #1
   166f4:	mov	r2, r9
   166f8:	mov	r3, r8
   166fc:	bl	12038 <fprintf@plt>
   16700:	add	r0, sl, #120	; 0x78
   16704:	b	16764 <__generate_code_for_binary_boolean_expression@@Base+0x208>
   16708:	ldrd	r0, [sl, #40]	; 0x28
   1670c:	adds	r0, r0, #1
   16710:	adc	r1, r1, #0
   16714:	strd	r0, [sl, #40]	; 0x28
   16718:	ldr	r0, [r6, #4]
   1671c:	movw	r1, #43408	; 0xa990
   16720:	movt	r1, #1
   16724:	mov	r2, r9
   16728:	mov	r3, r8
   1672c:	bl	12038 <fprintf@plt>
   16730:	add	r0, sl, #104	; 0x68
   16734:	b	16764 <__generate_code_for_binary_boolean_expression@@Base+0x208>
   16738:	ldrd	r0, [sl, #64]	; 0x40
   1673c:	adds	r0, r0, #1
   16740:	adc	r1, r1, #0
   16744:	strd	r0, [sl, #64]	; 0x40
   16748:	ldr	r0, [r6, #4]
   1674c:	movw	r1, #43427	; 0xa9a3
   16750:	movt	r1, #1
   16754:	mov	r2, r9
   16758:	mov	r3, r8
   1675c:	bl	12038 <fprintf@plt>
   16760:	add	r0, sl, #112	; 0x70
   16764:	ldrd	r2, [r0]
   16768:	adds	r2, r2, #1
   1676c:	adc	r3, r3, #0
   16770:	strd	r2, [r0]
   16774:	ldrd	r0, [sl, #128]	; 0x80
   16778:	adds	r0, r0, #1
   1677c:	adc	r1, r1, #0
   16780:	strd	r0, [sl, #128]	; 0x80
   16784:	sub	sp, fp, #28
   16788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1678c:	ldrd	r0, [sl, #8]
   16790:	adds	r0, r0, #1
   16794:	adc	r1, r1, #0
   16798:	strd	r0, [sl, #8]
   1679c:	movw	r0, #49384	; 0xc0e8
   167a0:	movt	r0, #2
   167a4:	ldr	r3, [r0]
   167a8:	movw	r0, #43465	; 0xa9c9
   167ac:	movt	r0, #1
   167b0:	mov	r1, #31
   167b4:	mov	r2, #1
   167b8:	bl	11fa8 <fwrite@plt>
   167bc:	mov	r0, #1
   167c0:	bl	12008 <exit@plt>
   167c4:	push	{r4, r5, r6, lr}
   167c8:	sub	sp, sp, #8
   167cc:	movw	r0, #43562	; 0xaa2a
   167d0:	movt	r0, #1
   167d4:	movw	r1, #39605	; 0x9ab5
   167d8:	movt	r1, #1
   167dc:	movw	r2, #35541	; 0x8ad5
   167e0:	movt	r2, #2116	; 0x844
   167e4:	bl	1696c <__generate_code_for_binary_boolean_expression@@Base+0x410>
   167e8:	movw	r0, #44256	; 0xace0
   167ec:	movt	r0, #1
   167f0:	add	r4, r0, #4
   167f4:	mov	r5, #0
   167f8:	movw	r6, #43984	; 0xabd0
   167fc:	movt	r6, #1
   16800:	mov	r3, r6
   16804:	ldr	r0, [r3, r5]!
   16808:	ldr	r1, [r3, #16]
   1680c:	str	r1, [sp]
   16810:	ldmib	r3, {r1, r2}
   16814:	ldrb	r3, [r3, #12]
   16818:	bl	1708c <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   1681c:	ldrd	r0, [r4, #-4]
   16820:	bl	17940 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   16824:	add	r5, r5, #20
   16828:	add	r4, r4, #8
   1682c:	cmp	r5, #260	; 0x104
   16830:	bne	16800 <__generate_code_for_binary_boolean_expression@@Base+0x2a4>
   16834:	bl	180c8 <__generate_code_for_binary_boolean_expression@@Base+0x1b6c>
   16838:	add	sp, sp, #8
   1683c:	pop	{r4, r5, r6, lr}
   16840:	b	18e34 <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   16844:	push	{fp, lr}
   16848:	bl	167c4 <__generate_code_for_binary_boolean_expression@@Base+0x268>
   1684c:	vmov.i32	q8, #0	; 0x00000000
   16850:	movw	r0, #52944	; 0xced0
   16854:	movt	r0, #2
   16858:	vst1.64	{d16-d17}, [r0]
   1685c:	movw	r0, #52928	; 0xcec0
   16860:	movt	r0, #2
   16864:	vst1.64	{d16-d17}, [r0]
   16868:	movw	r0, #52960	; 0xcee0
   1686c:	movt	r0, #2
   16870:	vst1.64	{d16-d17}, [r0]
   16874:	movw	r0, #52976	; 0xcef0
   16878:	movt	r0, #2
   1687c:	vst1.64	{d16-d17}, [r0]
   16880:	movw	r0, #53024	; 0xcf20
   16884:	movt	r0, #2
   16888:	vst1.64	{d16-d17}, [r0]
   1688c:	movw	r0, #53040	; 0xcf30
   16890:	movt	r0, #2
   16894:	add	r1, r0, #16
   16898:	vst1.64	{d16-d17}, [r1 :128]
   1689c:	add	r1, r0, #32
   168a0:	vst1.64	{d16-d17}, [r1 :128]
   168a4:	add	r1, r0, #48	; 0x30
   168a8:	vst1.64	{d16-d17}, [r1 :128]
   168ac:	add	r1, r0, #64	; 0x40
   168b0:	vst1.64	{d16-d17}, [r1 :128]
   168b4:	mov	ip, #0
   168b8:	str	ip, [r0, #80]	; 0x50
   168bc:	movw	r2, #53136	; 0xcf90
   168c0:	movt	r2, #2
   168c4:	add	r3, r2, #16
   168c8:	vst1.64	{d16-d17}, [r3 :128]
   168cc:	str	ip, [r2, #32]
   168d0:	movw	r3, #53184	; 0xcfc0
   168d4:	movt	r3, #2
   168d8:	add	r1, r3, #16
   168dc:	vst1.64	{d16-d17}, [r1 :128]
   168e0:	movw	r1, #52992	; 0xcf00
   168e4:	movt	r1, #2
   168e8:	vst1.64	{d16-d17}, [r1 :128]!
   168ec:	vst1.64	{d16-d17}, [r1 :128]
   168f0:	mov	r1, #84	; 0x54
   168f4:	vst1.64	{d16-d17}, [r0 :128], r1
   168f8:	str	ip, [r0]
   168fc:	mov	r0, #36	; 0x24
   16900:	vst1.64	{d16-d17}, [r2 :128], r0
   16904:	str	ip, [r2]
   16908:	mov	r0, #32
   1690c:	vst1.64	{d16-d17}, [r3 :128], r0
   16910:	vst1.64	{d16-d17}, [r3 :128]
   16914:	movw	r0, #53232	; 0xcff0
   16918:	movt	r0, #2
   1691c:	vst1.64	{d16-d17}, [r0 :128]!
   16920:	vst1.64	{d16-d17}, [r0 :128]
   16924:	movw	r0, #53264	; 0xd010
   16928:	movt	r0, #2
   1692c:	vst1.64	{d16-d17}, [r0]
   16930:	movw	r0, #53280	; 0xd020
   16934:	movt	r0, #2
   16938:	vst1.64	{d16-d17}, [r0 :128]!
   1693c:	vst1.64	{d16-d17}, [r0 :128]
   16940:	movw	r0, #53312	; 0xd040
   16944:	movt	r0, #2
   16948:	mov	r1, #0
   1694c:	mov	r2, #136	; 0x88
   16950:	bl	12068 <memset@plt>
   16954:	pop	{fp, pc}
   16958:	movw	r0, #26564	; 0x67c4
   1695c:	movt	r0, #1
   16960:	movw	r1, #26692	; 0x6844
   16964:	movt	r1, #1
   16968:	b	192e8 <__gcov_flush@@Base+0xb8>
   1696c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16970:	add	fp, sp, #28
   16974:	sub	sp, sp, #36	; 0x24
   16978:	mov	r9, r1
   1697c:	mov	r6, r0
   16980:	add	r0, sp, #28
   16984:	add	r1, sp, #32
   16988:	mov	r8, r2
   1698c:	bl	19780 <__gcov_flush@@Base+0x550>
   16990:	cmp	r0, #0
   16994:	beq	169d8 <__generate_code_for_binary_boolean_expression@@Base+0x47c>
   16998:	mov	r4, r0
   1699c:	mov	r0, r6
   169a0:	ldr	r5, [sp, #32]
   169a4:	bl	12014 <strlen@plt>
   169a8:	add	r0, r5, r0
   169ac:	add	r0, r0, #2
   169b0:	bl	11fcc <malloc@plt>
   169b4:	mov	r7, r0
   169b8:	ldr	r0, [sp, #28]
   169bc:	mov	r1, r6
   169c0:	mov	r2, r4
   169c4:	str	r0, [sp]
   169c8:	mov	r0, r7
   169cc:	mov	r3, r5
   169d0:	bl	19814 <__gcov_flush@@Base+0x5e4>
   169d4:	b	169e4 <__generate_code_for_binary_boolean_expression@@Base+0x488>
   169d8:	mov	r0, r6
   169dc:	bl	11f90 <strdup@plt>
   169e0:	mov	r7, r0
   169e4:	ldr	r0, [pc, #1492]	; 16fc0 <__generate_code_for_binary_boolean_expression@@Base+0xa64>
   169e8:	ldr	r6, [pc, #1492]	; 16fc4 <__generate_code_for_binary_boolean_expression@@Base+0xa68>
   169ec:	mov	r1, #2
   169f0:	add	r0, pc, r0
   169f4:	add	r6, pc, r6
   169f8:	str	r7, [r0]
   169fc:	mov	r0, r7
   16a00:	mov	r5, #0
   16a04:	strb	r5, [r6]
   16a08:	bl	11fb4 <open64@plt>
   16a0c:	ldr	r4, [pc, #1460]	; 16fc8 <__generate_code_for_binary_boolean_expression@@Base+0xa6c>
   16a10:	cmn	r0, #1
   16a14:	add	r4, pc, r4
   16a18:	str	r0, [r4]
   16a1c:	beq	16a2c <__generate_code_for_binary_boolean_expression@@Base+0x4d0>
   16a20:	ldr	r6, [pc, #1444]	; 16fcc <__generate_code_for_binary_boolean_expression@@Base+0xa70>
   16a24:	add	r6, pc, r6
   16a28:	b	16a88 <__generate_code_for_binary_boolean_expression@@Base+0x52c>
   16a2c:	mov	r0, #1
   16a30:	strb	r0, [r6]
   16a34:	ldr	r0, [pc, #1488]	; 1700c <__generate_code_for_binary_boolean_expression@@Base+0xab0>
   16a38:	mov	r1, #66	; 0x42
   16a3c:	mov	r2, #420	; 0x1a4
   16a40:	ldr	r0, [pc, r0]
   16a44:	bl	11fb4 <open64@plt>
   16a48:	ldr	r6, [pc, #1472]	; 17010 <__generate_code_for_binary_boolean_expression@@Base+0xab4>
   16a4c:	cmn	r0, #1
   16a50:	str	r0, [r4]
   16a54:	add	r6, pc, r6
   16a58:	bne	16a88 <__generate_code_for_binary_boolean_expression@@Base+0x52c>
   16a5c:	ldr	r0, [pc, #1456]	; 17014 <__generate_code_for_binary_boolean_expression@@Base+0xab8>
   16a60:	ldr	r0, [pc, r0]
   16a64:	bl	193f8 <__gcov_flush@@Base+0x1c8>
   16a68:	ldr	r0, [pc, #1448]	; 17018 <__generate_code_for_binary_boolean_expression@@Base+0xabc>
   16a6c:	mov	r1, #66	; 0x42
   16a70:	mov	r2, #420	; 0x1a4
   16a74:	ldr	r0, [pc, r0]
   16a78:	bl	11fb4 <open64@plt>
   16a7c:	cmn	r0, #1
   16a80:	str	r0, [r4]
   16a84:	beq	16f78 <__generate_code_for_binary_boolean_expression@@Base+0xa1c>
   16a88:	str	r9, [sp, #20]
   16a8c:	str	r8, [sp, #24]
   16a90:	bl	194bc <__gcov_flush@@Base+0x28c>
   16a94:	ldr	r0, [pc, #1332]	; 16fd0 <__generate_code_for_binary_boolean_expression@@Base+0xa74>
   16a98:	mov	r1, r6
   16a9c:	ldr	r0, [pc, r0]
   16aa0:	bl	11f24 <fdopen@plt>
   16aa4:	ldr	r7, [pc, #1320]	; 16fd4 <__generate_code_for_binary_boolean_expression@@Base+0xa78>
   16aa8:	ldr	r9, [pc, #1320]	; 16fd8 <__generate_code_for_binary_boolean_expression@@Base+0xa7c>
   16aac:	ldr	r1, [pc, #1320]	; 16fdc <__generate_code_for_binary_boolean_expression@@Base+0xa80>
   16ab0:	ldr	sl, [pc, #1320]	; 16fe0 <__generate_code_for_binary_boolean_expression@@Base+0xa84>
   16ab4:	add	r7, pc, r7
   16ab8:	add	r9, pc, r9
   16abc:	add	r1, pc, r1
   16ac0:	add	sl, pc, sl
   16ac4:	str	r5, [r7]
   16ac8:	str	r5, [r7, #4]
   16acc:	str	r5, [r9]
   16ad0:	str	r5, [r9, #4]
   16ad4:	str	r0, [r1]
   16ad8:	str	r5, [sl]
   16adc:	ldr	r6, [pc, #1280]	; 16fe4 <__generate_code_for_binary_boolean_expression@@Base+0xa88>
   16ae0:	mov	r4, #131072	; 0x20000
   16ae4:	add	r6, pc, r6
   16ae8:	ldrb	r1, [r6]
   16aec:	cmp	r1, #0
   16af0:	beq	16be4 <__generate_code_for_binary_boolean_expression@@Base+0x688>
   16af4:	mov	r0, r4
   16af8:	bl	11fcc <malloc@plt>
   16afc:	mov	r8, r0
   16b00:	strd	r4, [r7]
   16b04:	str	r0, [sl]
   16b08:	mov	r0, r8
   16b0c:	mov	r1, #0
   16b10:	mov	r2, #131072	; 0x20000
   16b14:	bl	12068 <memset@plt>
   16b18:	ldr	r0, [r9, #4]
   16b1c:	ldr	r1, [pc, #1284]	; 17028 <__generate_code_for_binary_boolean_expression@@Base+0xacc>
   16b20:	mov	r7, #7
   16b24:	orr	r7, r7, #131072	; 0x20000
   16b28:	ldr	r1, [pc, r1]
   16b2c:	ldr	sl, [pc, #1272]	; 1702c <__generate_code_for_binary_boolean_expression@@Base+0xad0>
   16b30:	adds	r2, r1, #4
   16b34:	add	sl, pc, sl
   16b38:	adc	r3, r0, #0
   16b3c:	ldr	r5, [sl, #4]
   16b40:	ldr	r4, [pc, #1256]	; 17030 <__generate_code_for_binary_boolean_expression@@Base+0xad4>
   16b44:	ldr	r4, [pc, r4]
   16b48:	subs	r2, r4, r2
   16b4c:	sbcs	r2, r5, r3
   16b50:	bcs	16c64 <__generate_code_for_binary_boolean_expression@@Base+0x708>
   16b54:	adds	r1, r7, r1
   16b58:	adc	r0, r0, #0
   16b5c:	subs	r1, r1, #4
   16b60:	sbc	r0, r0, #0
   16b64:	mvn	r2, #0
   16b68:	and	r5, r0, r2
   16b6c:	mov	r0, #16646144	; 0xfe0000
   16b70:	orr	r0, r0, #-16777216	; 0xff000000
   16b74:	and	r4, r1, r0
   16b78:	mov	r0, r8
   16b7c:	mov	r1, r4
   16b80:	bl	11f9c <realloc@plt>
   16b84:	ldr	r1, [pc, #1068]	; 16fb8 <__generate_code_for_binary_boolean_expression@@Base+0xa5c>
   16b88:	strd	r4, [sl]
   16b8c:	mov	r3, r0
   16b90:	mov	r7, r1
   16b94:	lsr	r2, r1, #24
   16b98:	ldr	r1, [pc, #1176]	; 17038 <__generate_code_for_binary_boolean_expression@@Base+0xadc>
   16b9c:	ldrb	r6, [r6]
   16ba0:	lsr	r4, r7, #16
   16ba4:	add	r1, pc, r1
   16ba8:	str	r0, [r1]
   16bac:	ldr	r1, [r9, #4]
   16bb0:	ldr	r5, [pc, #1156]	; 1703c <__generate_code_for_binary_boolean_expression@@Base+0xae0>
   16bb4:	ldr	r5, [pc, r5]
   16bb8:	strb	r7, [r3, r5]!
   16bbc:	strb	r2, [r3, #3]
   16bc0:	lsr	r2, r7, #8
   16bc4:	strb	r2, [r3, #1]
   16bc8:	adds	r2, r5, #4
   16bcc:	adc	ip, r1, #0
   16bd0:	cmp	r6, #1
   16bd4:	strb	r4, [r3, #2]
   16bd8:	stm	r9, {r2, ip}
   16bdc:	beq	16ca8 <__generate_code_for_binary_boolean_expression@@Base+0x74c>
   16be0:	b	16e60 <__generate_code_for_binary_boolean_expression@@Base+0x904>
   16be4:	mov	r1, #0
   16be8:	mov	r2, #2
   16bec:	mov	r8, #0
   16bf0:	bl	12104 <fseek@plt>
   16bf4:	ldr	r0, [pc, #1004]	; 16fe8 <__generate_code_for_binary_boolean_expression@@Base+0xa8c>
   16bf8:	ldr	r0, [pc, r0]
   16bfc:	bl	11f78 <ftell@plt>
   16c00:	mov	r2, r0
   16c04:	ldr	r0, [pc, #992]	; 16fec <__generate_code_for_binary_boolean_expression@@Base+0xa90>
   16c08:	asr	r3, r2, #31
   16c0c:	add	r0, pc, r0
   16c10:	cmp	r2, #0
   16c14:	strd	r2, [r0]
   16c18:	beq	16f08 <__generate_code_for_binary_boolean_expression@@Base+0x9ac>
   16c1c:	ldr	r0, [pc, #972]	; 16ff0 <__generate_code_for_binary_boolean_expression@@Base+0xa94>
   16c20:	mov	r1, r2
   16c24:	mov	r2, #3
   16c28:	mov	r3, #1
   16c2c:	ldr	r0, [pc, r0]
   16c30:	str	r8, [sp, #8]
   16c34:	str	r8, [sp, #12]
   16c38:	str	r0, [sp]
   16c3c:	mov	r0, #0
   16c40:	bl	11f6c <mmap64@plt>
   16c44:	cmn	r0, #1
   16c48:	str	r0, [sl]
   16c4c:	beq	16ed0 <__generate_code_for_binary_boolean_expression@@Base+0x974>
   16c50:	ldrb	r1, [r6]
   16c54:	cmp	r1, #0
   16c58:	beq	16e20 <__generate_code_for_binary_boolean_expression@@Base+0x8c4>
   16c5c:	mov	r8, r0
   16c60:	b	16b18 <__generate_code_for_binary_boolean_expression@@Base+0x5bc>
   16c64:	ldr	r1, [r9, #4]
   16c68:	ldr	r5, [pc, #964]	; 17034 <__generate_code_for_binary_boolean_expression@@Base+0xad8>
   16c6c:	ldr	r0, [pc, #836]	; 16fb8 <__generate_code_for_binary_boolean_expression@@Base+0xa5c>
   16c70:	mov	r6, r8
   16c74:	ldr	r5, [pc, r5]
   16c78:	mov	r7, r0
   16c7c:	lsr	r2, r7, #16
   16c80:	strb	r7, [r6, r5]!
   16c84:	lsr	r0, r0, #24
   16c88:	lsr	r3, r7, #8
   16c8c:	strb	r2, [r6, #2]
   16c90:	adds	r2, r5, #4
   16c94:	strb	r0, [r6, #3]
   16c98:	strb	r3, [r6, #1]
   16c9c:	adc	ip, r1, #0
   16ca0:	stm	r9, {r2, ip}
   16ca4:	mov	r0, r8
   16ca8:	ldr	r7, [sl, #4]
   16cac:	ldr	r3, [pc, #908]	; 17040 <__generate_code_for_binary_boolean_expression@@Base+0xae4>
   16cb0:	adds	r6, r5, #8
   16cb4:	adc	r4, r1, #0
   16cb8:	ldr	r3, [pc, r3]
   16cbc:	subs	r3, r3, r6
   16cc0:	sbcs	r3, r7, r4
   16cc4:	bcs	16d68 <__generate_code_for_binary_boolean_expression@@Base+0x80c>
   16cc8:	mov	r2, #7
   16ccc:	orr	r2, r2, #131072	; 0x20000
   16cd0:	adds	r2, r5, r2
   16cd4:	adc	r1, r1, #0
   16cd8:	mvn	r3, #0
   16cdc:	and	r5, r1, r3
   16ce0:	mov	r1, #16646144	; 0xfe0000
   16ce4:	orr	r1, r1, #-16777216	; 0xff000000
   16ce8:	and	r4, r2, r1
   16cec:	mov	r1, r4
   16cf0:	bl	11f9c <realloc@plt>
   16cf4:	strd	r4, [sl]
   16cf8:	ldr	r1, [pc, #840]	; 17048 <__generate_code_for_binary_boolean_expression@@Base+0xaec>
   16cfc:	mov	r4, r0
   16d00:	mov	lr, r9
   16d04:	add	r1, pc, r1
   16d08:	str	r0, [r1]
   16d0c:	ldr	r1, [pc, #824]	; 1704c <__generate_code_for_binary_boolean_expression@@Base+0xaf0>
   16d10:	ldr	r2, [sp, #20]
   16d14:	ldr	ip, [r9, #4]
   16d18:	add	r1, pc, r1
   16d1c:	ldrb	r3, [r1]
   16d20:	ldrb	r1, [r2]
   16d24:	ldrb	r7, [r2, #1]
   16d28:	ldrb	r6, [r2, #2]
   16d2c:	ldrb	r5, [r2, #3]
   16d30:	ldr	r2, [pc, #792]	; 17050 <__generate_code_for_binary_boolean_expression@@Base+0xaf4>
   16d34:	ldr	r2, [pc, r2]
   16d38:	strb	r1, [r4, r2]!
   16d3c:	strb	r5, [r4, #3]
   16d40:	ldr	r5, [sp, #24]
   16d44:	strb	r6, [r4, #2]
   16d48:	adds	r6, r2, #4
   16d4c:	adc	r1, ip, #0
   16d50:	cmp	r3, #1
   16d54:	str	r6, [lr]
   16d58:	strb	r7, [r4, #1]
   16d5c:	str	r1, [lr, #4]
   16d60:	beq	16da8 <__generate_code_for_binary_boolean_expression@@Base+0x84c>
   16d64:	b	16ea0 <__generate_code_for_binary_boolean_expression@@Base+0x944>
   16d68:	ldr	r6, [sp, #20]
   16d6c:	mov	r5, r0
   16d70:	ldrb	r1, [r6]
   16d74:	ldrb	r3, [r6, #1]
   16d78:	ldrb	r7, [r6, #2]
   16d7c:	ldrb	r6, [r6, #3]
   16d80:	strb	r1, [r5, r2]!
   16d84:	strb	r6, [r5, #3]
   16d88:	strb	r3, [r5, #1]
   16d8c:	adds	r6, r2, #4
   16d90:	mov	r3, r9
   16d94:	adc	r1, ip, #0
   16d98:	strb	r7, [r5, #2]
   16d9c:	str	r6, [r3]
   16da0:	str	r1, [r3, #4]
   16da4:	ldr	r5, [sp, #24]
   16da8:	ldr	r7, [sl, #4]
   16dac:	ldr	r4, [pc, #672]	; 17054 <__generate_code_for_binary_boolean_expression@@Base+0xaf8>
   16db0:	adds	r3, r2, #8
   16db4:	adc	lr, ip, #0
   16db8:	ldr	r4, [pc, r4]
   16dbc:	subs	r3, r4, r3
   16dc0:	sbcs	r3, r7, lr
   16dc4:	bcs	16e18 <__generate_code_for_binary_boolean_expression@@Base+0x8bc>
   16dc8:	mov	r1, #7
   16dcc:	orr	r1, r1, #131072	; 0x20000
   16dd0:	adds	r1, r2, r1
   16dd4:	adc	r2, ip, #0
   16dd8:	mvn	r3, #0
   16ddc:	and	r7, r2, r3
   16de0:	mov	r2, #16646144	; 0xfe0000
   16de4:	orr	r2, r2, #-16777216	; 0xff000000
   16de8:	and	r4, r1, r2
   16dec:	mov	r1, r4
   16df0:	bl	11f9c <realloc@plt>
   16df4:	stm	sl, {r4, r7}
   16df8:	ldr	r1, [r9, #4]
   16dfc:	ldr	r2, [pc, #596]	; 17058 <__generate_code_for_binary_boolean_expression@@Base+0xafc>
   16e00:	mov	lr, r9
   16e04:	add	r2, pc, r2
   16e08:	str	r0, [r2]
   16e0c:	ldr	r6, [pc, #584]	; 1705c <__generate_code_for_binary_boolean_expression@@Base+0xb00>
   16e10:	ldr	r6, [pc, r6]
   16e14:	b	16ea0 <__generate_code_for_binary_boolean_expression@@Base+0x944>
   16e18:	mov	lr, r9
   16e1c:	b	16ea0 <__generate_code_for_binary_boolean_expression@@Base+0x944>
   16e20:	ldr	r6, [r9, #4]
   16e24:	ldr	r5, [pc, #536]	; 17044 <__generate_code_for_binary_boolean_expression@@Base+0xae8>
   16e28:	ldr	r1, [pc, #392]	; 16fb8 <__generate_code_for_binary_boolean_expression@@Base+0xa5c>
   16e2c:	mov	r4, r0
   16e30:	ldr	r5, [pc, r5]
   16e34:	mov	r7, r1
   16e38:	lsr	r2, r7, #16
   16e3c:	strb	r7, [r4, r5]!
   16e40:	lsr	r1, r1, #24
   16e44:	strb	r2, [r4, #2]
   16e48:	adds	r2, r5, #4
   16e4c:	lsr	r3, r7, #8
   16e50:	adc	ip, r6, #0
   16e54:	strb	r1, [r4, #3]
   16e58:	strb	r3, [r4, #1]
   16e5c:	stm	r9, {r2, ip}
   16e60:	ldr	r4, [sp, #20]
   16e64:	mov	r5, r0
   16e68:	mov	lr, r9
   16e6c:	ldrb	r1, [r4]
   16e70:	ldrb	r6, [r4, #3]
   16e74:	ldrb	r3, [r4, #1]
   16e78:	ldrb	r7, [r4, #2]
   16e7c:	strb	r1, [r5, r2]!
   16e80:	strb	r6, [r5, #3]
   16e84:	adds	r6, r2, #4
   16e88:	adc	r1, ip, #0
   16e8c:	strb	r7, [r5, #2]
   16e90:	strb	r3, [r5, #1]
   16e94:	str	r6, [lr]
   16e98:	str	r1, [lr, #4]
   16e9c:	ldr	r5, [sp, #24]
   16ea0:	lsr	r2, r5, #24
   16ea4:	strb	r5, [r0, r6]!
   16ea8:	lsr	r3, r5, #16
   16eac:	lsr	r7, r5, #8
   16eb0:	strb	r2, [r0, #3]
   16eb4:	strb	r3, [r0, #2]
   16eb8:	strb	r7, [r0, #1]
   16ebc:	adds	r0, r6, #4
   16ec0:	adc	r1, r1, #0
   16ec4:	strd	r0, [lr]
   16ec8:	sub	sp, fp, #28
   16ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ed0:	bl	12044 <__errno_location@plt>
   16ed4:	ldr	r1, [pc, #280]	; 16ff4 <__generate_code_for_binary_boolean_expression@@Base+0xa98>
   16ed8:	ldr	r1, [pc, r1]
   16edc:	ldr	r0, [r0]
   16ee0:	ldr	r4, [r1]
   16ee4:	ldr	r5, [pc, #268]	; 16ff8 <__generate_code_for_binary_boolean_expression@@Base+0xa9c>
   16ee8:	ldr	r5, [pc, r5]
   16eec:	bl	11fe4 <strerror@plt>
   16ef0:	ldr	r1, [pc, #260]	; 16ffc <__generate_code_for_binary_boolean_expression@@Base+0xaa0>
   16ef4:	mov	r3, r0
   16ef8:	mov	r0, r4
   16efc:	add	r1, pc, r1
   16f00:	mov	r2, r5
   16f04:	bl	12038 <fprintf@plt>
   16f08:	ldr	r0, [pc, #240]	; 17000 <__generate_code_for_binary_boolean_expression@@Base+0xaa4>
   16f0c:	str	r8, [sl]
   16f10:	mov	r2, #16646144	; 0xfe0000
   16f14:	add	r0, pc, r0
   16f18:	orr	r2, r2, #-16777216	; 0xff000000
   16f1c:	str	r8, [r0]
   16f20:	str	r8, [r0, #4]
   16f24:	mov	r0, #1
   16f28:	strb	r0, [r6]
   16f2c:	ldr	r0, [r9, #4]
   16f30:	ldr	r1, [pc, #204]	; 17004 <__generate_code_for_binary_boolean_expression@@Base+0xaa8>
   16f34:	mvn	r3, #0
   16f38:	eor	r3, r0, r3
   16f3c:	ldr	r1, [pc, r1]
   16f40:	eor	r2, r1, r2
   16f44:	orrs	r2, r2, r3
   16f48:	beq	16b08 <__generate_code_for_binary_boolean_expression@@Base+0x5ac>
   16f4c:	ldr	r2, [pc, #104]	; 16fbc <__generate_code_for_binary_boolean_expression@@Base+0xa60>
   16f50:	ldr	r7, [pc, #176]	; 17008 <__generate_code_for_binary_boolean_expression@@Base+0xaac>
   16f54:	adds	r1, r1, r2
   16f58:	mov	r2, #16646144	; 0xfe0000
   16f5c:	orr	r2, r2, #-16777216	; 0xff000000
   16f60:	and	r4, r1, r2
   16f64:	adc	r0, r0, #0
   16f68:	mvn	r1, #0
   16f6c:	and	r5, r0, r1
   16f70:	add	r7, pc, r7
   16f74:	b	16af4 <__generate_code_for_binary_boolean_expression@@Base+0x598>
   16f78:	bl	12044 <__errno_location@plt>
   16f7c:	ldr	r1, [pc, #152]	; 1701c <__generate_code_for_binary_boolean_expression@@Base+0xac0>
   16f80:	ldr	r1, [pc, r1]
   16f84:	ldr	r0, [r0]
   16f88:	ldr	r4, [r1]
   16f8c:	ldr	r5, [pc, #140]	; 17020 <__generate_code_for_binary_boolean_expression@@Base+0xac4>
   16f90:	ldr	r5, [pc, r5]
   16f94:	bl	11fe4 <strerror@plt>
   16f98:	ldr	r1, [pc, #132]	; 17024 <__generate_code_for_binary_boolean_expression@@Base+0xac8>
   16f9c:	mov	r3, r0
   16fa0:	mov	r0, r4
   16fa4:	add	r1, pc, r1
   16fa8:	mov	r2, r5
   16fac:	bl	12038 <fprintf@plt>
   16fb0:	sub	sp, fp, #28
   16fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fb8:	strbvs	r6, [r3, -r1, ror #8]!
   16fbc:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   16fc0:	ldrdeq	r6, [r1], -r0
   16fc4:	ldrdeq	r6, [r1], -r0
   16fc8:			; <UNDEFINED> instruction: 0x000156b8
   16fcc:	andeq	r4, r0, ip, lsl r3
   16fd0:	andeq	r5, r1, r0, lsr r6
   16fd4:	andeq	r6, r1, ip, lsl r6
   16fd8:	andeq	r6, r1, r0, lsr #12
   16fdc:	andeq	r6, r1, ip, lsl #12
   16fe0:	andeq	r6, r1, ip, lsl #12
   16fe4:	andeq	r6, r1, r0, ror #11
   16fe8:	ldrdeq	r6, [r1], -r0
   16fec:	andeq	r6, r1, r4, ror #9
   16ff0:	andeq	r5, r1, r0, lsr #9
   16ff4:	andeq	r5, r1, r4, ror #3
   16ff8:	ldrdeq	r6, [r1], -r8
   16ffc:	andeq	r3, r0, r6, lsr #31
   17000:			; <UNDEFINED> instruction: 0x000161bc
   17004:	muleq	r1, ip, r1
   17008:	andeq	r6, r1, r0, ror #2
   1700c:	andeq	r6, r1, r0, lsl #13
   17010:	strdeq	r4, [r0], -r0
   17014:	andeq	r6, r1, r0, ror #12
   17018:	andeq	r6, r1, ip, asr #12
   1701c:	andeq	r5, r1, ip, lsr r1
   17020:	andeq	r6, r1, r0, lsr r1
   17024:	andeq	r3, r0, r4, lsr #27
   17028:			; <UNDEFINED> instruction: 0x000165b0
   1702c:	muleq	r1, ip, r5
   17030:	andeq	r6, r1, ip, lsl #11
   17034:	andeq	r6, r1, r4, ror #8
   17038:	andeq	r6, r1, r8, lsr #10
   1703c:	andeq	r6, r1, r4, lsr #10
   17040:	andeq	r6, r1, r8, lsl r4
   17044:	andeq	r6, r1, r8, lsr #5
   17048:	andeq	r6, r1, r8, asr #7
   1704c:	andeq	r6, r1, ip, lsr #7
   17050:	andeq	r6, r1, r4, lsr #7
   17054:	andeq	r6, r1, r8, lsl r3
   17058:	andeq	r6, r1, r8, asr #5
   1705c:	andeq	r6, r1, r8, asr #5
   17060:	ldr	r0, [r0]
   17064:	cmn	r0, #1
   17068:	beq	17088 <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   1706c:	ldr	r0, [r1, r0, lsl #2]
   17070:	cmp	r0, #0
   17074:	bxeq	lr
   17078:	ldrd	r2, [r0]
   1707c:	adds	r2, r2, #1
   17080:	adc	r3, r3, #0
   17084:	strd	r2, [r0]
   17088:	bx	lr
   1708c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17090:	add	fp, sp, #28
   17094:	sub	sp, sp, #12
   17098:	ldr	r7, [pc, #2008]	; 17878 <__generate_code_for_binary_boolean_expression@@Base+0x131c>
   1709c:	mov	sl, #2
   170a0:	cmp	r3, #0
   170a4:	movne	sl, #3
   170a8:	ldr	r7, [pc, r7]
   170ac:	cmp	r7, #0
   170b0:	beq	17870 <__generate_code_for_binary_boolean_expression@@Base+0x1314>
   170b4:	stm	sp, {r0, r2, r3}
   170b8:	ldr	r0, [pc, #1980]	; 1787c <__generate_code_for_binary_boolean_expression@@Base+0x1320>
   170bc:	mov	r5, r1
   170c0:	add	r0, pc, r0
   170c4:	ldrb	r0, [r0]
   170c8:	ldr	r8, [pc, #1968]	; 17880 <__generate_code_for_binary_boolean_expression@@Base+0x1324>
   170cc:	cmp	r0, #1
   170d0:	add	r8, pc, r8
   170d4:	bne	17158 <__generate_code_for_binary_boolean_expression@@Base+0xbfc>
   170d8:	ldr	r4, [pc, #1956]	; 17884 <__generate_code_for_binary_boolean_expression@@Base+0x1328>
   170dc:	ldr	r0, [r8, #4]
   170e0:	ldr	r1, [pc, #1952]	; 17888 <__generate_code_for_binary_boolean_expression@@Base+0x132c>
   170e4:	add	r4, pc, r4
   170e8:	ldr	r1, [pc, r1]
   170ec:	ldr	r7, [r4, #4]
   170f0:	ldr	r6, [pc, #1940]	; 1788c <__generate_code_for_binary_boolean_expression@@Base+0x1330>
   170f4:	adds	r2, r1, #4
   170f8:	adc	r3, r0, #0
   170fc:	ldr	r6, [pc, r6]
   17100:	subs	r2, r6, r2
   17104:	sbcs	r2, r7, r3
   17108:	bcs	17158 <__generate_code_for_binary_boolean_expression@@Base+0xbfc>
   1710c:	mov	r2, #7
   17110:	orr	r2, r2, #131072	; 0x20000
   17114:	adds	r1, r2, r1
   17118:	adc	r0, r0, #0
   1711c:	subs	r1, r1, #4
   17120:	sbc	r0, r0, #0
   17124:	mvn	r2, #0
   17128:	and	r7, r0, r2
   1712c:	mov	r0, #16646144	; 0xfe0000
   17130:	orr	r0, r0, #-16777216	; 0xff000000
   17134:	ldr	r9, [pc, #1876]	; 17890 <__generate_code_for_binary_boolean_expression@@Base+0x1334>
   17138:	and	r6, r1, r0
   1713c:	ldr	r0, [pc, #1872]	; 17894 <__generate_code_for_binary_boolean_expression@@Base+0x1338>
   17140:	mov	r1, r6
   17144:	add	r9, pc, r9
   17148:	ldr	r0, [pc, r0]
   1714c:	bl	11f9c <realloc@plt>
   17150:	strd	r6, [r4]
   17154:	str	r0, [r9]
   17158:	ldr	r7, [pc, #1848]	; 17898 <__generate_code_for_binary_boolean_expression@@Base+0x133c>
   1715c:	mov	r0, #0
   17160:	mov	r2, #1
   17164:	ldr	r7, [pc, r7]
   17168:	ldr	ip, [pc, #1836]	; 1789c <__generate_code_for_binary_boolean_expression@@Base+0x1340>
   1716c:	adds	r4, r7, #4
   17170:	ldr	ip, [pc, ip]
   17174:	ldr	r6, [r8, #4]
   17178:	mov	r1, ip
   1717c:	adc	r9, r6, #0
   17180:	strb	r0, [r1, r7]!
   17184:	cmp	r5, #0
   17188:	strb	r2, [r1, #3]
   1718c:	strb	r0, [r1, #2]
   17190:	strb	r0, [r1, #1]
   17194:	stm	r8, {r4, r9}
   17198:	mov	r8, r5
   1719c:	beq	171b8 <__generate_code_for_binary_boolean_expression@@Base+0xc5c>
   171a0:	mov	r0, r8
   171a4:	mov	r5, ip
   171a8:	bl	12014 <strlen@plt>
   171ac:	add	r0, sl, r0, lsr #2
   171b0:	mov	ip, r5
   171b4:	add	sl, r0, #2
   171b8:	ldr	r0, [pc, #1760]	; 178a0 <__generate_code_for_binary_boolean_expression@@Base+0x1344>
   171bc:	add	r0, pc, r0
   171c0:	ldrb	r0, [r0]
   171c4:	cmp	r0, #0
   171c8:	beq	172a4 <__generate_code_for_binary_boolean_expression@@Base+0xd48>
   171cc:	ldr	lr, [pc, #1748]	; 178a8 <__generate_code_for_binary_boolean_expression@@Base+0x134c>
   171d0:	adds	r0, r7, #8
   171d4:	adc	r1, r6, #0
   171d8:	add	lr, pc, lr
   171dc:	ldr	r2, [lr, #4]
   171e0:	ldr	r3, [pc, #1732]	; 178ac <__generate_code_for_binary_boolean_expression@@Base+0x1350>
   171e4:	ldr	r3, [pc, r3]
   171e8:	subs	r0, r3, r0
   171ec:	sbcs	r0, r2, r1
   171f0:	bcs	17310 <__generate_code_for_binary_boolean_expression@@Base+0xdb4>
   171f4:	mov	r0, #7
   171f8:	orr	r0, r0, #131072	; 0x20000
   171fc:	adds	r0, r7, r0
   17200:	adc	r1, r6, #0
   17204:	mvn	r2, #0
   17208:	and	r5, r1, r2
   1720c:	mov	r1, #16646144	; 0xfe0000
   17210:	orr	r1, r1, #-16777216	; 0xff000000
   17214:	and	r6, r0, r1
   17218:	ldr	r4, [pc, #1684]	; 178b4 <__generate_code_for_binary_boolean_expression@@Base+0x1358>
   1721c:	mov	r0, ip
   17220:	mov	r1, r6
   17224:	add	r4, pc, r4
   17228:	mov	r7, lr
   1722c:	bl	11f9c <realloc@plt>
   17230:	mov	lr, r7
   17234:	mov	ip, r0
   17238:	str	r6, [lr]
   1723c:	str	r5, [lr, #4]
   17240:	str	ip, [r4]
   17244:	ldr	r1, [pc, #1644]	; 178b8 <__generate_code_for_binary_boolean_expression@@Base+0x135c>
   17248:	lsr	r0, sl, #24
   1724c:	add	r1, pc, r1
   17250:	lsr	r3, sl, #16
   17254:	ldrb	r2, [r1]
   17258:	ldr	r1, [pc, #1628]	; 178bc <__generate_code_for_binary_boolean_expression@@Base+0x1360>
   1725c:	add	r1, pc, r1
   17260:	mov	r7, r1
   17264:	ldr	r9, [r1, #4]
   17268:	ldr	r4, [pc, #1616]	; 178c0 <__generate_code_for_binary_boolean_expression@@Base+0x1364>
   1726c:	mov	r1, ip
   17270:	ldr	r4, [pc, r4]
   17274:	strb	sl, [r1, r4]!
   17278:	strb	r0, [r1, #3]
   1727c:	lsr	r0, sl, #8
   17280:	strb	r0, [r1, #1]
   17284:	adds	r0, r4, #4
   17288:	strb	r3, [r1, #2]
   1728c:	adc	r1, r9, #0
   17290:	mov	sl, r7
   17294:	cmp	r2, #1
   17298:	strd	r0, [sl]
   1729c:	bne	172d8 <__generate_code_for_binary_boolean_expression@@Base+0xd7c>
   172a0:	b	17344 <__generate_code_for_binary_boolean_expression@@Base+0xde8>
   172a4:	mov	r3, ip
   172a8:	lsr	r0, sl, #24
   172ac:	strb	sl, [r3, r4]!
   172b0:	lsr	r1, sl, #16
   172b4:	lsr	r2, sl, #8
   172b8:	strb	r0, [r3, #3]
   172bc:	strb	r1, [r3, #2]
   172c0:	strb	r2, [r3, #1]
   172c4:	ldr	sl, [pc, #1496]	; 178a4 <__generate_code_for_binary_boolean_expression@@Base+0x1348>
   172c8:	adds	r0, r7, #8
   172cc:	adc	r1, r6, #0
   172d0:	add	sl, pc, sl
   172d4:	strd	r0, [sl]
   172d8:	ldr	r5, [sp]
   172dc:	mov	r6, ip
   172e0:	lsr	r2, r5, #24
   172e4:	strb	r5, [r6, r0]!
   172e8:	lsr	r3, r5, #16
   172ec:	lsr	r7, r5, #8
   172f0:	strb	r2, [r6, #3]
   172f4:	strb	r3, [r6, #2]
   172f8:	strb	r7, [r6, #1]
   172fc:	adds	r2, r0, #4
   17300:	adc	r3, r1, #0
   17304:	ldmib	sp, {r5, r9}
   17308:	strd	r2, [sl]
   1730c:	b	174b8 <__generate_code_for_binary_boolean_expression@@Base+0xf5c>
   17310:	mov	r3, ip
   17314:	lsr	r0, sl, #24
   17318:	strb	sl, [r3, r4]!
   1731c:	lsr	r1, sl, #16
   17320:	lsr	r2, sl, #8
   17324:	strb	r0, [r3, #3]
   17328:	strb	r1, [r3, #2]
   1732c:	strb	r2, [r3, #1]
   17330:	ldr	sl, [pc, #1400]	; 178b0 <__generate_code_for_binary_boolean_expression@@Base+0x1354>
   17334:	adds	r0, r7, #8
   17338:	adc	r1, r6, #0
   1733c:	add	sl, pc, sl
   17340:	strd	r0, [sl]
   17344:	ldr	r7, [lr, #4]
   17348:	ldr	r6, [pc, #1396]	; 178c4 <__generate_code_for_binary_boolean_expression@@Base+0x1368>
   1734c:	adds	r2, r4, #8
   17350:	adc	r3, r9, #0
   17354:	ldr	r6, [pc, r6]
   17358:	subs	r2, r6, r2
   1735c:	sbcs	r2, r7, r3
   17360:	bcs	17408 <__generate_code_for_binary_boolean_expression@@Base+0xeac>
   17364:	mov	r0, #7
   17368:	orr	r0, r0, #131072	; 0x20000
   1736c:	adds	r0, r4, r0
   17370:	adc	r1, r9, #0
   17374:	mvn	r2, #0
   17378:	and	r5, r1, r2
   1737c:	mov	r1, #16646144	; 0xfe0000
   17380:	orr	r1, r1, #-16777216	; 0xff000000
   17384:	and	r4, r0, r1
   17388:	ldr	r7, [pc, #1336]	; 178c8 <__generate_code_for_binary_boolean_expression@@Base+0x136c>
   1738c:	mov	r0, ip
   17390:	mov	r1, r4
   17394:	add	r7, pc, r7
   17398:	mov	r6, lr
   1739c:	bl	11f9c <realloc@plt>
   173a0:	mov	lr, r6
   173a4:	str	r0, [r7]
   173a8:	strd	r4, [lr]
   173ac:	mov	ip, r0
   173b0:	ldr	r6, [sp]
   173b4:	ldr	r0, [pc, #1296]	; 178cc <__generate_code_for_binary_boolean_expression@@Base+0x1370>
   173b8:	ldr	r1, [sl, #4]
   173bc:	mov	r3, ip
   173c0:	add	r0, pc, r0
   173c4:	lsr	r2, r6, #24
   173c8:	ldrb	r7, [r0]
   173cc:	ldr	r0, [pc, #1276]	; 178d0 <__generate_code_for_binary_boolean_expression@@Base+0x1374>
   173d0:	ldr	r0, [pc, r0]
   173d4:	strb	r6, [r3, r0]!
   173d8:	ldmib	sp, {r5, r9}
   173dc:	strb	r2, [r3, #3]
   173e0:	lsr	r2, r6, #8
   173e4:	lsr	r6, r6, #16
   173e8:	strb	r2, [r3, #1]
   173ec:	adds	r2, r0, #4
   173f0:	strb	r6, [r3, #2]
   173f4:	adc	r3, r1, #0
   173f8:	cmp	r7, #1
   173fc:	strd	r2, [sl]
   17400:	beq	1743c <__generate_code_for_binary_boolean_expression@@Base+0xee0>
   17404:	b	174b8 <__generate_code_for_binary_boolean_expression@@Base+0xf5c>
   17408:	ldr	r5, [sp]
   1740c:	mov	r6, ip
   17410:	lsr	r2, r5, #24
   17414:	strb	r5, [r6, r0]!
   17418:	lsr	r3, r5, #16
   1741c:	lsr	r7, r5, #8
   17420:	strb	r2, [r6, #3]
   17424:	strb	r3, [r6, #2]
   17428:	strb	r7, [r6, #1]
   1742c:	adds	r2, r0, #4
   17430:	adc	r3, r1, #0
   17434:	ldmib	sp, {r5, r9}
   17438:	strd	r2, [sl]
   1743c:	str	r8, [sp, #8]
   17440:	mov	r8, lr
   17444:	adds	r7, r0, #8
   17448:	ldr	r6, [r8, #4]
   1744c:	ldr	r4, [pc, #1152]	; 178d4 <__generate_code_for_binary_boolean_expression@@Base+0x1378>
   17450:	adc	lr, r1, #0
   17454:	ldr	r4, [pc, r4]
   17458:	subs	r7, r4, r7
   1745c:	sbcs	r7, r6, lr
   17460:	bcs	174b4 <__generate_code_for_binary_boolean_expression@@Base+0xf58>
   17464:	mov	r2, #7
   17468:	orr	r2, r2, #131072	; 0x20000
   1746c:	adds	r0, r0, r2
   17470:	adc	r1, r1, #0
   17474:	mvn	r2, #0
   17478:	and	r7, r1, r2
   1747c:	mov	r1, #16646144	; 0xfe0000
   17480:	orr	r1, r1, #-16777216	; 0xff000000
   17484:	and	r6, r0, r1
   17488:	ldr	r4, [pc, #1096]	; 178d8 <__generate_code_for_binary_boolean_expression@@Base+0x137c>
   1748c:	mov	r0, ip
   17490:	mov	r1, r6
   17494:	add	r4, pc, r4
   17498:	bl	11f9c <realloc@plt>
   1749c:	strd	r6, [r8]
   174a0:	str	r0, [r4]
   174a4:	ldr	r3, [sl, #4]
   174a8:	ldr	r2, [pc, #1068]	; 178dc <__generate_code_for_binary_boolean_expression@@Base+0x1380>
   174ac:	mov	ip, r0
   174b0:	ldr	r2, [pc, r2]
   174b4:	ldr	r8, [sp, #8]
   174b8:	mov	r6, ip
   174bc:	lsr	r7, r5, #8
   174c0:	strb	r5, [r6, r2]!
   174c4:	adds	r4, r2, #4
   174c8:	lsr	r0, r5, #24
   174cc:	lsr	r1, r5, #16
   174d0:	strb	r7, [r6, #1]
   174d4:	adc	r7, r3, #0
   174d8:	cmp	r9, #0
   174dc:	strb	r0, [r6, #3]
   174e0:	strb	r1, [r6, #2]
   174e4:	stm	sl, {r4, r7}
   174e8:	beq	175bc <__generate_code_for_binary_boolean_expression@@Base+0x1060>
   174ec:	ldr	r0, [pc, #1004]	; 178e0 <__generate_code_for_binary_boolean_expression@@Base+0x1384>
   174f0:	ldr	sl, [fp, #8]
   174f4:	add	r0, pc, r0
   174f8:	ldrb	r0, [r0]
   174fc:	cmp	r0, #1
   17500:	bne	17588 <__generate_code_for_binary_boolean_expression@@Base+0x102c>
   17504:	ldr	r9, [pc, #984]	; 178e4 <__generate_code_for_binary_boolean_expression@@Base+0x1388>
   17508:	adds	r0, r2, #8
   1750c:	adc	r1, r3, #0
   17510:	add	r9, pc, r9
   17514:	ldr	r6, [r9, #4]
   17518:	ldr	r5, [pc, #968]	; 178e8 <__generate_code_for_binary_boolean_expression@@Base+0x138c>
   1751c:	ldr	r5, [pc, r5]
   17520:	subs	r0, r5, r0
   17524:	sbcs	r0, r6, r1
   17528:	bcs	17588 <__generate_code_for_binary_boolean_expression@@Base+0x102c>
   1752c:	mov	r0, #7
   17530:	orr	r0, r0, #131072	; 0x20000
   17534:	adds	r0, r2, r0
   17538:	adc	r1, r3, #0
   1753c:	mvn	r2, #0
   17540:	and	r5, r1, r2
   17544:	mov	r1, #16646144	; 0xfe0000
   17548:	orr	r1, r1, #-16777216	; 0xff000000
   1754c:	and	r6, r0, r1
   17550:	ldr	r4, [pc, #916]	; 178ec <__generate_code_for_binary_boolean_expression@@Base+0x1390>
   17554:	mov	r0, ip
   17558:	mov	r1, r6
   1755c:	add	r4, pc, r4
   17560:	bl	11f9c <realloc@plt>
   17564:	str	r6, [r9]
   17568:	str	r5, [r9, #4]
   1756c:	mov	ip, r0
   17570:	ldr	r0, [pc, #888]	; 178f0 <__generate_code_for_binary_boolean_expression@@Base+0x1394>
   17574:	str	ip, [r4]
   17578:	add	r0, pc, r0
   1757c:	ldr	r7, [r0, #4]
   17580:	ldr	r4, [pc, #876]	; 178f4 <__generate_code_for_binary_boolean_expression@@Base+0x1398>
   17584:	ldr	r4, [pc, r4]
   17588:	mov	r3, ip
   1758c:	lsr	r0, sl, #24
   17590:	strb	sl, [r3, r4]!
   17594:	lsr	r1, sl, #16
   17598:	lsr	r2, sl, #8
   1759c:	strb	r0, [r3, #3]
   175a0:	strb	r1, [r3, #2]
   175a4:	strb	r2, [r3, #1]
   175a8:	ldr	sl, [pc, #840]	; 178f8 <__generate_code_for_binary_boolean_expression@@Base+0x139c>
   175ac:	adds	r4, r4, #4
   175b0:	adc	r7, r7, #0
   175b4:	add	sl, pc, sl
   175b8:	stm	sl, {r4, r7}
   175bc:	cmp	r8, #0
   175c0:	beq	17870 <__generate_code_for_binary_boolean_expression@@Base+0x1314>
   175c4:	mov	r0, r8
   175c8:	mov	r9, ip
   175cc:	bl	12014 <strlen@plt>
   175d0:	mov	r6, #1
   175d4:	add	r5, r6, r0, lsr #2
   175d8:	ldr	r0, [pc, #796]	; 178fc <__generate_code_for_binary_boolean_expression@@Base+0x13a0>
   175dc:	add	r0, pc, r0
   175e0:	ldrb	r0, [r0]
   175e4:	cmp	r0, #1
   175e8:	bne	1768c <__generate_code_for_binary_boolean_expression@@Base+0x1130>
   175ec:	ldr	sl, [pc, #780]	; 17900 <__generate_code_for_binary_boolean_expression@@Base+0x13a4>
   175f0:	adds	r0, r4, #4
   175f4:	adc	r1, r7, #0
   175f8:	add	sl, pc, sl
   175fc:	ldr	r2, [sl, #4]
   17600:	ldr	r3, [pc, #764]	; 17904 <__generate_code_for_binary_boolean_expression@@Base+0x13a8>
   17604:	ldr	r3, [pc, r3]
   17608:	subs	r0, r3, r0
   1760c:	sbcs	r0, r2, r1
   17610:	bcs	176a0 <__generate_code_for_binary_boolean_expression@@Base+0x1144>
   17614:	mov	r0, #0
   17618:	str	r0, [sp, #8]
   1761c:	mov	r0, #7
   17620:	orr	r0, r0, #131072	; 0x20000
   17624:	adds	r0, r0, r4
   17628:	adc	r1, r7, #0
   1762c:	subs	r0, r0, #4
   17630:	sbc	r1, r1, #0
   17634:	mvn	r2, #0
   17638:	and	r7, r1, r2
   1763c:	mov	r1, #16646144	; 0xfe0000
   17640:	orr	r1, r1, #-16777216	; 0xff000000
   17644:	and	r4, r0, r1
   17648:	ldr	r6, [pc, #700]	; 1790c <__generate_code_for_binary_boolean_expression@@Base+0x13b0>
   1764c:	mov	r0, r9
   17650:	mov	r1, r4
   17654:	add	r6, pc, r6
   17658:	bl	11f9c <realloc@plt>
   1765c:	stm	sl, {r4, r7}
   17660:	str	r0, [r6]
   17664:	ldr	sl, [pc, #676]	; 17910 <__generate_code_for_binary_boolean_expression@@Base+0x13b4>
   17668:	mov	r3, r0
   1766c:	add	sl, pc, sl
   17670:	ldr	r7, [sl, #4]
   17674:	ldr	r0, [pc, #664]	; 17914 <__generate_code_for_binary_boolean_expression@@Base+0x13b8>
   17678:	add	r0, pc, r0
   1767c:	ldrb	r6, [r0]
   17680:	ldr	r4, [pc, #656]	; 17918 <__generate_code_for_binary_boolean_expression@@Base+0x13bc>
   17684:	ldr	r4, [pc, r4]
   17688:	b	176b4 <__generate_code_for_binary_boolean_expression@@Base+0x1158>
   1768c:	mov	r0, #0
   17690:	str	r0, [sp, #8]
   17694:	mov	r6, #0
   17698:	mov	r3, r9
   1769c:	b	176b4 <__generate_code_for_binary_boolean_expression@@Base+0x1158>
   176a0:	mov	r0, #0
   176a4:	str	r0, [sp, #8]
   176a8:	ldr	sl, [pc, #600]	; 17908 <__generate_code_for_binary_boolean_expression@@Base+0x13ac>
   176ac:	mov	r3, r9
   176b0:	add	sl, pc, sl
   176b4:	mov	r9, r3
   176b8:	strb	r5, [r3, r4]!
   176bc:	lsr	r0, r5, #24
   176c0:	adds	r4, r4, #4
   176c4:	lsr	r1, r5, #16
   176c8:	lsr	r2, r5, #8
   176cc:	strb	r0, [r3, #3]
   176d0:	mov	r0, r8
   176d4:	adc	r5, r7, #0
   176d8:	strb	r1, [r3, #2]
   176dc:	strb	r2, [r3, #1]
   176e0:	strd	r4, [sl]
   176e4:	bl	12014 <strlen@plt>
   176e8:	mov	r7, r0
   176ec:	cmp	r6, #0
   176f0:	beq	1778c <__generate_code_for_binary_boolean_expression@@Base+0x1230>
   176f4:	ldr	r6, [pc, #544]	; 1791c <__generate_code_for_binary_boolean_expression@@Base+0x13c0>
   176f8:	adds	r0, r4, r7
   176fc:	adc	r1, r5, #0
   17700:	add	r6, pc, r6
   17704:	ldr	r2, [r6, #4]
   17708:	ldr	r3, [pc, #528]	; 17920 <__generate_code_for_binary_boolean_expression@@Base+0x13c4>
   1770c:	ldr	r3, [pc, r3]
   17710:	subs	r3, r3, r0
   17714:	sbcs	r2, r2, r1
   17718:	bcs	17784 <__generate_code_for_binary_boolean_expression@@Base+0x1228>
   1771c:	mov	r2, #7
   17720:	orr	r2, r2, #131072	; 0x20000
   17724:	adds	r0, r2, r0
   17728:	adc	r1, r1, #0
   1772c:	subs	r0, r0, #8
   17730:	sbc	r1, r1, #0
   17734:	mvn	r2, #0
   17738:	and	r5, r1, r2
   1773c:	mov	r1, #16646144	; 0xfe0000
   17740:	orr	r1, r1, #-16777216	; 0xff000000
   17744:	and	r4, r0, r1
   17748:	mov	r0, r9
   1774c:	mov	r1, r4
   17750:	bl	11f9c <realloc@plt>
   17754:	strd	r4, [r6]
   17758:	ldr	r1, [pc, #452]	; 17924 <__generate_code_for_binary_boolean_expression@@Base+0x13c8>
   1775c:	ldr	r5, [sl, #4]
   17760:	add	r1, pc, r1
   17764:	str	r0, [r1]
   17768:	ldr	r1, [pc, #440]	; 17928 <__generate_code_for_binary_boolean_expression@@Base+0x13cc>
   1776c:	add	r1, pc, r1
   17770:	ldrb	r1, [r1]
   17774:	str	r1, [sp, #8]
   17778:	ldr	r4, [pc, #428]	; 1792c <__generate_code_for_binary_boolean_expression@@Base+0x13d0>
   1777c:	ldr	r4, [pc, r4]
   17780:	b	17790 <__generate_code_for_binary_boolean_expression@@Base+0x1234>
   17784:	mov	r0, #1
   17788:	str	r0, [sp, #8]
   1778c:	mov	r0, r9
   17790:	mov	r9, r0
   17794:	add	r0, r0, r4
   17798:	mov	r1, r8
   1779c:	mov	r2, r7
   177a0:	bl	11f60 <memcpy@plt>
   177a4:	adds	r6, r4, r7
   177a8:	mov	r0, r8
   177ac:	adc	r5, r5, #0
   177b0:	str	r6, [sl]
   177b4:	str	r5, [sl, #4]
   177b8:	bl	12014 <strlen@plt>
   177bc:	and	r0, r0, #3
   177c0:	rsb	r4, r0, #4
   177c4:	ldr	r0, [sp, #8]
   177c8:	cmp	r0, #0
   177cc:	beq	17854 <__generate_code_for_binary_boolean_expression@@Base+0x12f8>
   177d0:	ldr	r7, [pc, #344]	; 17930 <__generate_code_for_binary_boolean_expression@@Base+0x13d4>
   177d4:	adds	r0, r6, r4
   177d8:	adc	r1, r5, #0
   177dc:	add	r7, pc, r7
   177e0:	ldr	r2, [r7, #4]
   177e4:	ldr	r3, [pc, #328]	; 17934 <__generate_code_for_binary_boolean_expression@@Base+0x13d8>
   177e8:	ldr	r3, [pc, r3]
   177ec:	subs	r3, r3, r0
   177f0:	sbcs	r2, r2, r1
   177f4:	bcs	17854 <__generate_code_for_binary_boolean_expression@@Base+0x12f8>
   177f8:	mov	r2, #7
   177fc:	orr	r2, r2, #131072	; 0x20000
   17800:	adds	r0, r2, r0
   17804:	adc	r1, r1, #0
   17808:	subs	r0, r0, #8
   1780c:	sbc	r1, r1, #0
   17810:	mvn	r2, #0
   17814:	and	r5, r1, r2
   17818:	mov	r1, #16646144	; 0xfe0000
   1781c:	orr	r1, r1, #-16777216	; 0xff000000
   17820:	and	r6, r0, r1
   17824:	ldr	r8, [pc, #268]	; 17938 <__generate_code_for_binary_boolean_expression@@Base+0x13dc>
   17828:	mov	r0, r9
   1782c:	mov	r1, r6
   17830:	add	r8, pc, r8
   17834:	bl	11f9c <realloc@plt>
   17838:	str	r6, [r7]
   1783c:	str	r5, [r7, #4]
   17840:	str	r0, [r8]
   17844:	ldr	r5, [sl, #4]
   17848:	ldr	r6, [pc, #236]	; 1793c <__generate_code_for_binary_boolean_expression@@Base+0x13e0>
   1784c:	mov	r9, r0
   17850:	ldr	r6, [pc, r6]
   17854:	add	r0, r9, r6
   17858:	mov	r1, #0
   1785c:	mov	r2, r4
   17860:	bl	12068 <memset@plt>
   17864:	adds	r0, r6, r4
   17868:	adc	r1, r5, #0
   1786c:	strd	r0, [sl]
   17870:	sub	sp, fp, #28
   17874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17878:	andeq	r6, r1, r0, lsr #32
   1787c:	andeq	r6, r1, r4
   17880:	andeq	r6, r1, r8
   17884:	andeq	r5, r1, ip, ror #31
   17888:	strdeq	r5, [r1], -r0
   1788c:	ldrdeq	r5, [r1], -r4
   17890:	andeq	r5, r1, r8, lsl #31
   17894:	andeq	r5, r1, r4, lsl #31
   17898:	andeq	r5, r1, r4, ror pc
   1789c:	andeq	r5, r1, ip, asr pc
   178a0:	andeq	r5, r1, r8, lsl #30
   178a4:	andeq	r5, r1, r8, lsl #28
   178a8:	strdeq	r5, [r1], -r8
   178ac:	andeq	r5, r1, ip, ror #29
   178b0:	muleq	r1, ip, sp
   178b4:	andeq	r5, r1, r8, lsr #29
   178b8:	andeq	r5, r1, r8, ror lr
   178bc:	andeq	r5, r1, ip, ror lr
   178c0:	andeq	r5, r1, r8, ror #28
   178c4:	andeq	r5, r1, ip, ror sp
   178c8:	andeq	r5, r1, r8, lsr sp
   178cc:	andeq	r5, r1, r4, lsl #26
   178d0:	andeq	r5, r1, r8, lsl #26
   178d4:	andeq	r5, r1, ip, ror ip
   178d8:	andeq	r5, r1, r8, lsr ip
   178dc:	andeq	r5, r1, r8, lsr #24
   178e0:	ldrdeq	r5, [r1], -r0
   178e4:	andeq	r5, r1, r0, asr #23
   178e8:			; <UNDEFINED> instruction: 0x00015bb4
   178ec:	andeq	r5, r1, r0, ror fp
   178f0:	andeq	r5, r1, r0, ror #22
   178f4:	andeq	r5, r1, r4, asr fp
   178f8:	andeq	r5, r1, r4, lsr #22
   178fc:	andeq	r5, r1, r8, ror #21
   17900:	ldrdeq	r5, [r1], -r8
   17904:	andeq	r5, r1, ip, asr #21
   17908:	andeq	r5, r1, r8, lsr #20
   1790c:	andeq	r5, r1, r8, ror sl
   17910:	andeq	r5, r1, ip, ror #20
   17914:	andeq	r5, r1, ip, asr #20
   17918:	andeq	r5, r1, r4, asr sl
   1791c:	ldrdeq	r5, [r1], -r0
   17920:	andeq	r5, r1, r4, asr #19
   17924:	andeq	r5, r1, ip, ror #18
   17928:	andeq	r5, r1, r8, asr r9
   1792c:	andeq	r5, r1, ip, asr r9
   17930:	strdeq	r5, [r1], -r4
   17934:	andeq	r5, r1, r8, ror #17
   17938:	muleq	r1, ip, r8
   1793c:	andeq	r5, r1, r8, lsl #17
   17940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17944:	add	fp, sp, #28
   17948:	sub	sp, sp, #28
   1794c:	mov	ip, r0
   17950:	ldr	r0, [pc, #1740]	; 18024 <__generate_code_for_binary_boolean_expression@@Base+0x1ac8>
   17954:	ldr	r0, [pc, r0]
   17958:	cmp	r0, #0
   1795c:	beq	17a78 <__generate_code_for_binary_boolean_expression@@Base+0x151c>
   17960:	ldr	r5, [pc, #1728]	; 18028 <__generate_code_for_binary_boolean_expression@@Base+0x1acc>
   17964:	mov	sl, r1
   17968:	add	r5, pc, r5
   1796c:	ldr	r3, [r5, #4]
   17970:	ldr	r4, [pc, #1716]	; 1802c <__generate_code_for_binary_boolean_expression@@Base+0x1ad0>
   17974:	ldr	r4, [pc, r4]
   17978:	ldr	r6, [pc, #1712]	; 18030 <__generate_code_for_binary_boolean_expression@@Base+0x1ad4>
   1797c:	add	r6, pc, r6
   17980:	ldrb	r0, [r6]
   17984:	cmp	r0, #0
   17988:	beq	17a80 <__generate_code_for_binary_boolean_expression@@Base+0x1524>
   1798c:	ldr	r8, [pc, #1732]	; 18058 <__generate_code_for_binary_boolean_expression@@Base+0x1afc>
   17990:	mov	r5, #10551296	; 0xa10000
   17994:	adds	r9, r4, #4
   17998:	add	r8, pc, r8
   1799c:	adc	r2, r3, #0
   179a0:	ldr	r0, [r8, #4]
   179a4:	ldr	r1, [pc, #1712]	; 1805c <__generate_code_for_binary_boolean_expression@@Base+0x1b00>
   179a8:	orr	r5, r5, #16777216	; 0x1000000
   179ac:	ldr	r1, [pc, r1]
   179b0:	subs	r1, r1, r9
   179b4:	sbcs	r0, r0, r2
   179b8:	bcs	17b84 <__generate_code_for_binary_boolean_expression@@Base+0x1628>
   179bc:	mov	r0, #3
   179c0:	orr	r0, r0, #131072	; 0x20000
   179c4:	adds	r0, r4, r0
   179c8:	adc	r1, r3, #0
   179cc:	mvn	r2, #0
   179d0:	and	r9, r1, r2
   179d4:	mov	r1, #16646144	; 0xfe0000
   179d8:	orr	r1, r1, #-16777216	; 0xff000000
   179dc:	and	r4, r0, r1
   179e0:	ldr	r0, [pc, #1664]	; 18068 <__generate_code_for_binary_boolean_expression@@Base+0x1b0c>
   179e4:	mov	r1, r4
   179e8:	mov	r7, ip
   179ec:	ldr	r0, [pc, r0]
   179f0:	bl	11f9c <realloc@plt>
   179f4:	ldr	ip, [pc, #1648]	; 1806c <__generate_code_for_binary_boolean_expression@@Base+0x1b10>
   179f8:	ldr	lr, [pc, #1648]	; 18070 <__generate_code_for_binary_boolean_expression@@Base+0x1b14>
   179fc:	stm	r8, {r4, r9}
   17a00:	ldr	r1, [pc, #1644]	; 18074 <__generate_code_for_binary_boolean_expression@@Base+0x1b18>
   17a04:	add	ip, pc, ip
   17a08:	add	lr, pc, lr
   17a0c:	add	r1, pc, r1
   17a10:	mov	r2, r0
   17a14:	str	r2, [r1]
   17a18:	mov	r6, ip
   17a1c:	ldrb	ip, [ip]
   17a20:	ldr	r3, [lr, #4]
   17a24:	ldr	r4, [pc, #1612]	; 18078 <__generate_code_for_binary_boolean_expression@@Base+0x1b1c>
   17a28:	lsr	r0, r5, #24
   17a2c:	mov	r1, r8
   17a30:	ldr	r4, [pc, r4]
   17a34:	str	r2, [sp, #20]
   17a38:	lsl	r8, r7, #1
   17a3c:	strb	r5, [r2, r4]!
   17a40:	adds	r9, r4, #4
   17a44:	strb	r0, [r2, #3]
   17a48:	lsr	r0, r5, #16
   17a4c:	strb	r0, [r2, #2]
   17a50:	lsr	r0, r5, #8
   17a54:	strb	r0, [r2, #1]
   17a58:	adc	r5, r3, #0
   17a5c:	mov	r0, #0
   17a60:	cmp	ip, #1
   17a64:	str	r3, [sp, #16]
   17a68:	str	r9, [lr]
   17a6c:	str	r5, [lr, #4]
   17a70:	beq	17bd8 <__generate_code_for_binary_boolean_expression@@Base+0x167c>
   17a74:	b	17d3c <__generate_code_for_binary_boolean_expression@@Base+0x17e0>
   17a78:	sub	sp, fp, #28
   17a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a80:	ldr	r0, [pc, #1452]	; 18034 <__generate_code_for_binary_boolean_expression@@Base+0x1ad8>
   17a84:	mov	r7, r3
   17a88:	mov	r9, #0
   17a8c:	ldr	r0, [pc, r0]
   17a90:	str	r0, [sp, #20]
   17a94:	ldrb	r1, [r0, r4]!
   17a98:	str	r7, [sp, #16]
   17a9c:	ldrb	r2, [r0, #1]
   17aa0:	ldrb	r3, [r0, #2]
   17aa4:	ldrb	r0, [r0, #3]
   17aa8:	orr	r1, r1, r2, lsl #8
   17aac:	orr	r1, r1, r3, lsl #16
   17ab0:	adds	r2, r4, #4
   17ab4:	orr	r3, r1, r0, lsl #24
   17ab8:	adc	r7, r7, #0
   17abc:	mov	r1, r5
   17ac0:	stm	r5, {r2, r7}
   17ac4:	mov	r5, #10551296	; 0xa10000
   17ac8:	orr	r5, r5, #16777216	; 0x1000000
   17acc:	cmn	r3, #1
   17ad0:	beq	17c84 <__generate_code_for_binary_boolean_expression@@Base+0x1728>
   17ad4:	cmp	r3, r5
   17ad8:	bne	17c94 <__generate_code_for_binary_boolean_expression@@Base+0x1738>
   17adc:	str	r7, [sp, #8]
   17ae0:	ldr	r0, [sp, #20]
   17ae4:	str	r4, [sp, #4]
   17ae8:	mov	r8, r5
   17aec:	ldr	r3, [r0, r2]
   17af0:	ldr	r0, [sp, #16]
   17af4:	adds	r5, r4, #8
   17af8:	adc	r9, r0, #0
   17afc:	cmn	r3, #1
   17b00:	stm	r1, {r5, r9}
   17b04:	beq	17ca0 <__generate_code_for_binary_boolean_expression@@Base+0x1744>
   17b08:	lsr	r0, r3, #1
   17b0c:	mov	r7, ip
   17b10:	cmp	r0, ip
   17b14:	bne	17ca0 <__generate_code_for_binary_boolean_expression@@Base+0x1744>
   17b18:	lsl	r0, r7, #3
   17b1c:	mov	r4, r2
   17b20:	bl	11fcc <malloc@plt>
   17b24:	cmp	r7, #0
   17b28:	beq	17cc8 <__generate_code_for_binary_boolean_expression@@Base+0x176c>
   17b2c:	str	r0, [sp, #12]
   17b30:	str	r7, [sp, #24]
   17b34:	ldr	r2, [sp, #20]
   17b38:	ldr	r3, [r2, r5]!
   17b3c:	adds	r5, r5, #8
   17b40:	ldr	r2, [r2, #4]
   17b44:	str	r3, [r0]
   17b48:	adc	r9, r9, #0
   17b4c:	str	r2, [r0, #4]
   17b50:	add	r0, r0, #8
   17b54:	subs	r7, r7, #1
   17b58:	bne	17b34 <__generate_code_for_binary_boolean_expression@@Base+0x15d8>
   17b5c:	ldr	lr, [pc, #1260]	; 18050 <__generate_code_for_binary_boolean_expression@@Base+0x1af4>
   17b60:	add	lr, pc, lr
   17b64:	stm	lr, {r5, r9}
   17b68:	ldr	ip, [pc, #1252]	; 18054 <__generate_code_for_binary_boolean_expression@@Base+0x1af8>
   17b6c:	mov	r1, lr
   17b70:	ldr	r0, [sp, #12]
   17b74:	add	ip, pc, ip
   17b78:	mov	r6, ip
   17b7c:	ldr	ip, [sp, #24]
   17b80:	b	17ce4 <__generate_code_for_binary_boolean_expression@@Base+0x1788>
   17b84:	str	r3, [sp, #16]
   17b88:	ldr	r3, [pc, #1232]	; 18060 <__generate_code_for_binary_boolean_expression@@Base+0x1b04>
   17b8c:	mov	lr, r5
   17b90:	mov	r7, ip
   17b94:	lsr	ip, r5, #16
   17b98:	ldr	r3, [pc, r3]
   17b9c:	lsr	r1, r5, #8
   17ba0:	str	r3, [sp, #20]
   17ba4:	strb	lr, [r3, r4]!
   17ba8:	lsr	r0, lr, #24
   17bac:	strb	r1, [r3, #1]
   17bb0:	strb	r0, [r3, #3]
   17bb4:	strb	ip, [r3, #2]
   17bb8:	ldr	lr, [pc, #1188]	; 18064 <__generate_code_for_binary_boolean_expression@@Base+0x1b08>
   17bbc:	lsl	r5, r7, #1
   17bc0:	add	lr, pc, lr
   17bc4:	mov	r1, r8
   17bc8:	mov	r8, r5
   17bcc:	str	r9, [lr]
   17bd0:	str	r2, [lr, #4]
   17bd4:	mov	r5, r2
   17bd8:	str	r8, [sp, #24]
   17bdc:	mov	r8, r1
   17be0:	ldr	r0, [sp, #16]
   17be4:	ldr	r2, [r8, #4]
   17be8:	ldr	r3, [pc, #1164]	; 1807c <__generate_code_for_binary_boolean_expression@@Base+0x1b20>
   17bec:	adds	ip, r4, #8
   17bf0:	adc	r1, r0, #0
   17bf4:	mov	r0, #0
   17bf8:	ldr	r3, [pc, r3]
   17bfc:	subs	r3, r3, ip
   17c00:	sbcs	r1, r2, r1
   17c04:	bcs	17c7c <__generate_code_for_binary_boolean_expression@@Base+0x1720>
   17c08:	ldr	r5, [pc, #1136]	; 18080 <__generate_code_for_binary_boolean_expression@@Base+0x1b24>
   17c0c:	mov	r0, #3
   17c10:	ldr	r1, [sp, #16]
   17c14:	orr	r0, r0, #131072	; 0x20000
   17c18:	adds	r0, r0, r4
   17c1c:	adc	r1, r1, #0
   17c20:	adds	r0, r0, #4
   17c24:	adc	r1, r1, #0
   17c28:	mvn	r2, #0
   17c2c:	and	r9, r1, r2
   17c30:	mov	r1, #16646144	; 0xfe0000
   17c34:	orr	r1, r1, #-16777216	; 0xff000000
   17c38:	and	r4, r0, r1
   17c3c:	ldr	r0, [sp, #20]
   17c40:	mov	r1, r4
   17c44:	add	r5, pc, r5
   17c48:	bl	11f9c <realloc@plt>
   17c4c:	ldr	ip, [pc, #1072]	; 18084 <__generate_code_for_binary_boolean_expression@@Base+0x1b28>
   17c50:	ldr	lr, [pc, #1072]	; 18088 <__generate_code_for_binary_boolean_expression@@Base+0x1b2c>
   17c54:	stm	r8, {r4, r9}
   17c58:	add	lr, pc, lr
   17c5c:	str	r0, [r5]
   17c60:	str	r0, [sp, #20]
   17c64:	ldr	r5, [lr, #4]
   17c68:	ldr	r9, [pc, #1052]	; 1808c <__generate_code_for_binary_boolean_expression@@Base+0x1b30>
   17c6c:	add	ip, pc, ip
   17c70:	mov	r6, ip
   17c74:	mov	r0, #0
   17c78:	ldr	r9, [pc, r9]
   17c7c:	ldr	r8, [sp, #24]
   17c80:	b	17d3c <__generate_code_for_binary_boolean_expression@@Base+0x17e0>
   17c84:	mov	r3, r2
   17c88:	ldr	r2, [sp, #16]
   17c8c:	mov	r0, #0
   17c90:	b	17cfc <__generate_code_for_binary_boolean_expression@@Base+0x17a0>
   17c94:	ldr	r1, [pc, #924]	; 18038 <__generate_code_for_binary_boolean_expression@@Base+0x1adc>
   17c98:	add	r1, pc, r1
   17c9c:	b	17ca8 <__generate_code_for_binary_boolean_expression@@Base+0x174c>
   17ca0:	ldr	r1, [pc, #924]	; 18044 <__generate_code_for_binary_boolean_expression@@Base+0x1ae8>
   17ca4:	add	r1, pc, r1
   17ca8:	ldr	r0, [pc, #908]	; 1803c <__generate_code_for_binary_boolean_expression@@Base+0x1ae0>
   17cac:	ldr	r0, [pc, r0]
   17cb0:	ldr	r0, [r0]
   17cb4:	ldr	r2, [pc, #900]	; 18040 <__generate_code_for_binary_boolean_expression@@Base+0x1ae4>
   17cb8:	ldr	r2, [pc, r2]
   17cbc:	sub	sp, fp, #28
   17cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cc4:	b	12038 <fprintf@plt>
   17cc8:	ldr	lr, [pc, #888]	; 18048 <__generate_code_for_binary_boolean_expression@@Base+0x1aec>
   17ccc:	ldr	ip, [pc, #888]	; 1804c <__generate_code_for_binary_boolean_expression@@Base+0x1af0>
   17cd0:	add	lr, pc, lr
   17cd4:	add	ip, pc, ip
   17cd8:	mov	r6, ip
   17cdc:	mov	r1, lr
   17ce0:	mov	ip, r7
   17ce4:	mov	r3, r4
   17ce8:	ldr	r7, [sp, #8]
   17cec:	ldr	r4, [sp, #4]
   17cf0:	ldr	r2, [sp, #16]
   17cf4:	mov	r9, #0
   17cf8:	mov	r5, r8
   17cfc:	mov	lr, r1
   17d00:	mov	r1, #1
   17d04:	str	r4, [lr]
   17d08:	str	r2, [lr, #4]
   17d0c:	ldr	r2, [sp, #20]
   17d10:	lsl	r8, ip, #1
   17d14:	strb	r5, [r2, r4]!
   17d18:	mov	r5, r7
   17d1c:	strb	r1, [r2, #3]
   17d20:	mov	r1, #161	; 0xa1
   17d24:	strb	r9, [r2, #1]
   17d28:	mov	r9, r3
   17d2c:	strb	r1, [r2, #2]
   17d30:	str	r9, [lr]
   17d34:	str	r7, [lr, #4]
   17d38:	mov	r7, ip
   17d3c:	ldr	r3, [sp, #20]
   17d40:	lsr	r1, r8, #16
   17d44:	mov	ip, r3
   17d48:	strb	r8, [r3, r9]!
   17d4c:	lsr	r4, r8, #24
   17d50:	lsr	r2, r8, #8
   17d54:	adds	r8, r9, #4
   17d58:	strb	r1, [r3, #2]
   17d5c:	adc	r1, r5, #0
   17d60:	cmp	r7, #0
   17d64:	strb	r4, [r3, #3]
   17d68:	strb	r2, [r3, #1]
   17d6c:	str	r8, [lr]
   17d70:	str	r1, [lr, #4]
   17d74:	str	r7, [sp, #24]
   17d78:	beq	18018 <__generate_code_for_binary_boolean_expression@@Base+0x1abc>
   17d7c:	ldr	r7, [pc, #780]	; 18090 <__generate_code_for_binary_boolean_expression@@Base+0x1b34>
   17d80:	mov	r4, lr
   17d84:	mov	r2, r0
   17d88:	add	r7, pc, r7
   17d8c:	str	r0, [sp, #12]
   17d90:	b	17e2c <__generate_code_for_binary_boolean_expression@@Base+0x18d0>
   17d94:	mov	r7, ip
   17d98:	lsr	r2, r4, #24
   17d9c:	strb	r4, [r7, r8]!
   17da0:	mov	lr, r6
   17da4:	lsr	r9, r4, #16
   17da8:	lsr	r6, r4, #8
   17dac:	strb	r2, [r7, #3]
   17db0:	adds	r2, r8, #4
   17db4:	mov	r4, r0
   17db8:	strb	r9, [r7, #2]
   17dbc:	mov	r3, ip
   17dc0:	strb	r6, [r7, #1]
   17dc4:	adc	r9, r1, #0
   17dc8:	stm	r4, {r2, r9}
   17dcc:	mov	ip, r3
   17dd0:	lsr	r1, r5, #16
   17dd4:	strb	r5, [r3, r2]!
   17dd8:	lsr	r0, r5, #24
   17ddc:	lsr	r7, r5, #8
   17de0:	adds	r8, r2, #4
   17de4:	strb	r1, [r3, #2]
   17de8:	adc	r1, r9, #0
   17dec:	strb	r0, [r3, #3]
   17df0:	strb	r7, [r3, #1]
   17df4:	str	r8, [r4]
   17df8:	str	r1, [r4, #4]
   17dfc:	ldr	r0, [sp, #24]
   17e00:	ldr	r2, [sp, #16]
   17e04:	mov	r6, lr
   17e08:	subs	r0, r0, #1
   17e0c:	str	r0, [sp, #24]
   17e10:	ldr	sl, [sp, #20]
   17e14:	ldr	r0, [sp, #12]
   17e18:	ldr	r7, [pc, #676]	; 180c4 <__generate_code_for_binary_boolean_expression@@Base+0x1b68>
   17e1c:	add	r2, r2, #8
   17e20:	add	sl, sl, #8
   17e24:	add	r7, pc, r7
   17e28:	beq	18018 <__generate_code_for_binary_boolean_expression@@Base+0x1abc>
   17e2c:	cmp	r0, #0
   17e30:	mov	r0, r4
   17e34:	str	r2, [sp, #16]
   17e38:	beq	17e44 <__generate_code_for_binary_boolean_expression@@Base+0x18e8>
   17e3c:	ldrd	r2, [r2]
   17e40:	b	17e4c <__generate_code_for_binary_boolean_expression@@Base+0x18f0>
   17e44:	mov	r2, #0
   17e48:	mov	r3, #0
   17e4c:	ldrd	r4, [sl]
   17e50:	adds	r4, r4, r2
   17e54:	adc	r5, r5, r3
   17e58:	strd	r4, [sl]
   17e5c:	ldrb	r2, [r6]
   17e60:	str	sl, [sp, #20]
   17e64:	cmp	r2, #0
   17e68:	beq	17d94 <__generate_code_for_binary_boolean_expression@@Base+0x1838>
   17e6c:	ldr	r3, [r7, #4]
   17e70:	ldr	r6, [pc, #540]	; 18094 <__generate_code_for_binary_boolean_expression@@Base+0x1b38>
   17e74:	adds	r2, r8, #4
   17e78:	adc	r9, r1, #0
   17e7c:	ldr	r6, [pc, r6]
   17e80:	subs	r2, r6, r2
   17e84:	sbcs	r2, r3, r9
   17e88:	bcs	17f34 <__generate_code_for_binary_boolean_expression@@Base+0x19d8>
   17e8c:	mov	r2, #3
   17e90:	orr	r2, r2, #131072	; 0x20000
   17e94:	adds	r0, r8, r2
   17e98:	adc	r1, r1, #0
   17e9c:	mvn	r2, #0
   17ea0:	and	r8, r1, r2
   17ea4:	mov	r1, #16646144	; 0xfe0000
   17ea8:	orr	r1, r1, #-16777216	; 0xff000000
   17eac:	and	r6, r0, r1
   17eb0:	mov	r0, ip
   17eb4:	mov	r1, r6
   17eb8:	bl	11f9c <realloc@plt>
   17ebc:	ldr	ip, [pc, #468]	; 18098 <__generate_code_for_binary_boolean_expression@@Base+0x1b3c>
   17ec0:	ldr	lr, [pc, #468]	; 1809c <__generate_code_for_binary_boolean_expression@@Base+0x1b40>
   17ec4:	stm	r7, {r6, r8}
   17ec8:	mov	r3, r0
   17ecc:	ldr	r0, [pc, #460]	; 180a0 <__generate_code_for_binary_boolean_expression@@Base+0x1b44>
   17ed0:	add	lr, pc, lr
   17ed4:	mov	r9, lr
   17ed8:	add	r0, pc, r0
   17edc:	add	ip, pc, ip
   17ee0:	str	r3, [r0]
   17ee4:	mov	lr, ip
   17ee8:	ldrb	ip, [ip]
   17eec:	ldr	r1, [r9, #4]
   17ef0:	ldr	r8, [pc, #428]	; 180a4 <__generate_code_for_binary_boolean_expression@@Base+0x1b48>
   17ef4:	mov	r7, r3
   17ef8:	lsr	r2, r4, #24
   17efc:	ldr	r8, [pc, r8]
   17f00:	lsr	r6, r4, #16
   17f04:	strb	r4, [r7, r8]!
   17f08:	strb	r2, [r7, #3]
   17f0c:	lsr	r2, r4, #8
   17f10:	strb	r2, [r7, #1]
   17f14:	adds	r2, r8, #4
   17f18:	mov	r4, r9
   17f1c:	adc	r9, r1, #0
   17f20:	cmp	ip, #1
   17f24:	strb	r6, [r7, #2]
   17f28:	stm	r4, {r2, r9}
   17f2c:	bne	17dcc <__generate_code_for_binary_boolean_expression@@Base+0x1870>
   17f30:	b	17f68 <__generate_code_for_binary_boolean_expression@@Base+0x1a0c>
   17f34:	mov	r6, ip
   17f38:	lsr	r2, r4, #24
   17f3c:	strb	r4, [r6, r8]!
   17f40:	lsr	r9, r4, #16
   17f44:	lsr	r7, r4, #8
   17f48:	strb	r2, [r6, #3]
   17f4c:	adds	r2, r8, #4
   17f50:	mov	r4, r0
   17f54:	strb	r9, [r6, #2]
   17f58:	mov	r3, ip
   17f5c:	strb	r7, [r6, #1]
   17f60:	adc	r9, r1, #0
   17f64:	stm	r4, {r2, r9}
   17f68:	ldr	lr, [pc, #312]	; 180a8 <__generate_code_for_binary_boolean_expression@@Base+0x1b4c>
   17f6c:	mov	r0, r4
   17f70:	adds	r7, r8, #8
   17f74:	add	lr, pc, lr
   17f78:	adc	ip, r1, #0
   17f7c:	ldr	r4, [lr, #4]
   17f80:	ldr	r6, [pc, #292]	; 180ac <__generate_code_for_binary_boolean_expression@@Base+0x1b50>
   17f84:	ldr	r6, [pc, r6]
   17f88:	subs	r7, r6, r7
   17f8c:	sbcs	r7, r4, ip
   17f90:	bcs	18008 <__generate_code_for_binary_boolean_expression@@Base+0x1aac>
   17f94:	mov	r2, #3
   17f98:	orr	r2, r2, #131072	; 0x20000
   17f9c:	adds	r0, r2, r8
   17fa0:	adc	r1, r1, #0
   17fa4:	adds	r0, r0, #4
   17fa8:	adc	r1, r1, #0
   17fac:	mvn	r2, #0
   17fb0:	and	r7, r1, r2
   17fb4:	mov	r1, #16646144	; 0xfe0000
   17fb8:	orr	r1, r1, #-16777216	; 0xff000000
   17fbc:	and	r6, r0, r1
   17fc0:	mov	r0, r3
   17fc4:	mov	r1, r6
   17fc8:	mov	r8, lr
   17fcc:	bl	11f9c <realloc@plt>
   17fd0:	ldr	lr, [pc, #220]	; 180b4 <__generate_code_for_binary_boolean_expression@@Base+0x1b58>
   17fd4:	strd	r6, [r8]
   17fd8:	mov	r3, r0
   17fdc:	add	lr, pc, lr
   17fe0:	mov	r4, lr
   17fe4:	ldr	r9, [lr, #4]
   17fe8:	ldr	r0, [pc, #200]	; 180b8 <__generate_code_for_binary_boolean_expression@@Base+0x1b5c>
   17fec:	add	r0, pc, r0
   17ff0:	str	r3, [r0]
   17ff4:	ldr	r2, [pc, #192]	; 180bc <__generate_code_for_binary_boolean_expression@@Base+0x1b60>
   17ff8:	ldr	r2, [pc, r2]
   17ffc:	ldr	lr, [pc, #188]	; 180c0 <__generate_code_for_binary_boolean_expression@@Base+0x1b64>
   18000:	add	lr, pc, lr
   18004:	b	17dcc <__generate_code_for_binary_boolean_expression@@Base+0x1870>
   18008:	ldr	lr, [pc, #160]	; 180b0 <__generate_code_for_binary_boolean_expression@@Base+0x1b54>
   1800c:	mov	r4, r0
   18010:	add	lr, pc, lr
   18014:	b	17dcc <__generate_code_for_binary_boolean_expression@@Base+0x1870>
   18018:	sub	sp, fp, #28
   1801c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18020:	b	11f54 <free@plt>
   18024:	andeq	r5, r1, r4, ror r7
   18028:	andeq	r5, r1, r0, ror r7
   1802c:	andeq	r5, r1, r4, ror #14
   18030:	andeq	r5, r1, r8, asr #14
   18034:	andeq	r5, r1, r0, asr #12
   18038:	ldrdeq	r3, [r0], -r0
   1803c:	andeq	r4, r1, r0, lsl r4
   18040:	andeq	r5, r1, r8, lsl #8
   18044:	andeq	r3, r0, lr, lsl #2
   18048:	andeq	r5, r1, r8, lsl #8
   1804c:	strdeq	r5, [r1], -r0
   18050:	andeq	r5, r1, r8, ror r5
   18054:	andeq	r5, r1, r0, asr r5
   18058:	andeq	r5, r1, r8, lsr r7
   1805c:	andeq	r5, r1, r4, lsr #14
   18060:	andeq	r5, r1, r4, lsr r5
   18064:	andeq	r5, r1, r8, lsl r5
   18068:	andeq	r5, r1, r0, ror #13
   1806c:	andeq	r5, r1, r0, asr #13
   18070:	ldrdeq	r5, [r1], -r0
   18074:	andeq	r5, r1, r0, asr #13
   18078:	andeq	r5, r1, r8, lsr #13
   1807c:	ldrdeq	r5, [r1], -r8
   18080:	andeq	r5, r1, r8, lsl #9
   18084:	andeq	r5, r1, r8, asr r4
   18088:	andeq	r5, r1, r0, lsl #9
   1808c:	andeq	r5, r1, r0, ror #8
   18090:	andeq	r5, r1, r8, asr #6
   18094:	andeq	r5, r1, r4, asr r2
   18098:	andeq	r5, r1, r8, ror #3
   1809c:	andeq	r5, r1, r8, lsl #4
   180a0:	strdeq	r5, [r1], -r4
   180a4:	ldrdeq	r5, [r1], -ip
   180a8:	andeq	r5, r1, ip, asr r1
   180ac:	andeq	r5, r1, ip, asr #2
   180b0:	strheq	r5, [r1], -r4
   180b4:	strdeq	r5, [r1], -ip
   180b8:	andeq	r5, r1, r0, ror #1
   180bc:	andeq	r5, r1, r0, ror #1
   180c0:	andeq	r5, r1, r4, asr #1
   180c4:	andeq	r5, r1, ip, lsr #5
   180c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180cc:	add	fp, sp, #28
   180d0:	sub	sp, sp, #4
   180d4:	ldr	r0, [pc, #3180]	; 18d48 <__generate_code_for_binary_boolean_expression@@Base+0x27ec>
   180d8:	ldr	r0, [pc, r0]
   180dc:	cmp	r0, #0
   180e0:	beq	1873c <__generate_code_for_binary_boolean_expression@@Base+0x21e0>
   180e4:	ldr	sl, [pc, #3168]	; 18d4c <__generate_code_for_binary_boolean_expression@@Base+0x27f0>
   180e8:	add	sl, pc, sl
   180ec:	ldr	r6, [sl, #4]
   180f0:	ldr	r5, [pc, #3160]	; 18d50 <__generate_code_for_binary_boolean_expression@@Base+0x27f4>
   180f4:	ldr	r5, [pc, r5]
   180f8:	ldr	r8, [pc, #3156]	; 18d54 <__generate_code_for_binary_boolean_expression@@Base+0x27f8>
   180fc:	add	r8, pc, r8
   18100:	ldrb	r0, [r8]
   18104:	cmp	r0, #0
   18108:	beq	181cc <__generate_code_for_binary_boolean_expression@@Base+0x1c70>
   1810c:	ldr	r9, [pc, #3164]	; 18d70 <__generate_code_for_binary_boolean_expression@@Base+0x2814>
   18110:	adds	r2, r5, #4
   18114:	adc	ip, r6, #0
   18118:	add	r9, pc, r9
   1811c:	ldr	r0, [r9, #4]
   18120:	ldr	r3, [pc, #3148]	; 18d74 <__generate_code_for_binary_boolean_expression@@Base+0x2818>
   18124:	ldr	r3, [pc, r3]
   18128:	subs	r3, r3, r2
   1812c:	sbcs	r0, r0, ip
   18130:	bcs	18220 <__generate_code_for_binary_boolean_expression@@Base+0x1cc4>
   18134:	mov	r0, #7
   18138:	orr	r0, r0, #131072	; 0x20000
   1813c:	adds	r0, r0, r5
   18140:	adc	r1, r6, #0
   18144:	subs	r0, r0, #4
   18148:	sbc	r1, r1, #0
   1814c:	mvn	r2, #0
   18150:	and	r5, r1, r2
   18154:	mov	r1, #16646144	; 0xfe0000
   18158:	orr	r1, r1, #-16777216	; 0xff000000
   1815c:	ldr	r4, [pc, #3096]	; 18d7c <__generate_code_for_binary_boolean_expression@@Base+0x2820>
   18160:	and	r6, r0, r1
   18164:	ldr	r0, [pc, #3092]	; 18d80 <__generate_code_for_binary_boolean_expression@@Base+0x2824>
   18168:	mov	r1, r6
   1816c:	add	r4, pc, r4
   18170:	ldr	r0, [pc, r0]
   18174:	bl	11f9c <realloc@plt>
   18178:	str	r6, [r9]
   1817c:	str	r5, [r9, #4]
   18180:	str	r0, [r4]
   18184:	ldrb	r3, [r8]
   18188:	ldr	r6, [sl, #4]
   1818c:	ldr	r5, [pc, #3056]	; 18d84 <__generate_code_for_binary_boolean_expression@@Base+0x2828>
   18190:	mov	r2, r0
   18194:	mov	r1, #0
   18198:	mov	r7, #161	; 0xa1
   1819c:	ldr	r5, [pc, r5]
   181a0:	strb	r1, [r2, r5]!
   181a4:	strb	r7, [r2, #3]
   181a8:	strb	r1, [r2, #2]
   181ac:	strb	r1, [r2, #1]
   181b0:	adds	r2, r5, #4
   181b4:	adc	ip, r6, #0
   181b8:	mov	r7, #1
   181bc:	cmp	r3, #1
   181c0:	stm	sl, {r2, ip}
   181c4:	beq	18248 <__generate_code_for_binary_boolean_expression@@Base+0x1cec>
   181c8:	b	18420 <__generate_code_for_binary_boolean_expression@@Base+0x1ec4>
   181cc:	ldr	r0, [pc, #2948]	; 18d58 <__generate_code_for_binary_boolean_expression@@Base+0x27fc>
   181d0:	ldr	r0, [pc, r0]
   181d4:	mov	r1, r0
   181d8:	ldrb	r2, [r1, r5]!
   181dc:	ldrb	r3, [r1, #1]
   181e0:	ldrb	r7, [r1, #2]
   181e4:	ldrb	r1, [r1, #3]
   181e8:	orr	r2, r2, r3, lsl #8
   181ec:	orr	r2, r2, r7, lsl #16
   181f0:	orr	r3, r2, r1, lsl #24
   181f4:	adds	r2, r5, #4
   181f8:	adc	ip, r6, #0
   181fc:	cmp	r3, #-1593835520	; 0xa1000000
   18200:	stm	sl, {r2, ip}
   18204:	beq	183c0 <__generate_code_for_binary_boolean_expression@@Base+0x1e64>
   18208:	mov	r7, #1
   1820c:	cmn	r3, #1
   18210:	beq	18400 <__generate_code_for_binary_boolean_expression@@Base+0x1ea4>
   18214:	ldr	r1, [pc, #2880]	; 18d5c <__generate_code_for_binary_boolean_expression@@Base+0x2800>
   18218:	add	r1, pc, r1
   1821c:	b	18b00 <__generate_code_for_binary_boolean_expression@@Base+0x25a4>
   18220:	ldr	r0, [pc, #2896]	; 18d78 <__generate_code_for_binary_boolean_expression@@Base+0x281c>
   18224:	mov	r3, #0
   18228:	mov	r4, #161	; 0xa1
   1822c:	ldr	r0, [pc, r0]
   18230:	mov	r7, r0
   18234:	strb	r3, [r7, r5]!
   18238:	strb	r4, [r7, #3]
   1823c:	strb	r3, [r7, #2]
   18240:	strb	r3, [r7, #1]
   18244:	stm	sl, {r2, ip}
   18248:	ldr	r4, [r9, #4]
   1824c:	ldr	r1, [pc, #2868]	; 18d88 <__generate_code_for_binary_boolean_expression@@Base+0x282c>
   18250:	adds	r3, r5, #8
   18254:	adc	r7, r6, #0
   18258:	ldr	r1, [pc, r1]
   1825c:	subs	r1, r1, r3
   18260:	sbcs	r1, r4, r7
   18264:	bcs	182f0 <__generate_code_for_binary_boolean_expression@@Base+0x1d94>
   18268:	mov	r1, #7
   1826c:	orr	r1, r1, #131072	; 0x20000
   18270:	adds	r1, r5, r1
   18274:	adc	r2, r6, #0
   18278:	mvn	r3, #0
   1827c:	and	r5, r2, r3
   18280:	mov	r2, #16646144	; 0xfe0000
   18284:	orr	r2, r2, #-16777216	; 0xff000000
   18288:	ldr	r4, [pc, #2812]	; 18d8c <__generate_code_for_binary_boolean_expression@@Base+0x2830>
   1828c:	and	r6, r1, r2
   18290:	mov	r1, r6
   18294:	add	r4, pc, r4
   18298:	bl	11f9c <realloc@plt>
   1829c:	str	r6, [r9]
   182a0:	str	r5, [r9, #4]
   182a4:	str	r0, [r4]
   182a8:	ldrb	r1, [r8]
   182ac:	ldr	ip, [sl, #4]
   182b0:	ldr	r2, [pc, #2776]	; 18d90 <__generate_code_for_binary_boolean_expression@@Base+0x2834>
   182b4:	mov	r7, r0
   182b8:	mov	r3, #9
   182bc:	ldr	r2, [pc, r2]
   182c0:	strb	r3, [r7, r2]!
   182c4:	mov	r3, #0
   182c8:	strb	r3, [r7, #3]
   182cc:	strb	r3, [r7, #2]
   182d0:	strb	r3, [r7, #1]
   182d4:	adds	r3, r2, #4
   182d8:	adc	r5, ip, #0
   182dc:	mov	r7, #1
   182e0:	cmp	r1, #1
   182e4:	stm	sl, {r3, r5}
   182e8:	beq	18318 <__generate_code_for_binary_boolean_expression@@Base+0x1dbc>
   182ec:	b	18448 <__generate_code_for_binary_boolean_expression@@Base+0x1eec>
   182f0:	mov	r3, r0
   182f4:	mov	r1, #9
   182f8:	strb	r1, [r3, r2]!
   182fc:	mov	r1, #0
   18300:	strb	r1, [r3, #3]
   18304:	strb	r1, [r3, #2]
   18308:	strb	r1, [r3, #1]
   1830c:	adds	r3, r2, #4
   18310:	adc	r5, ip, #0
   18314:	stm	sl, {r3, r5}
   18318:	ldr	r6, [r9, #4]
   1831c:	ldr	r4, [pc, #2672]	; 18d94 <__generate_code_for_binary_boolean_expression@@Base+0x2838>
   18320:	adds	r1, r2, #8
   18324:	adc	r7, ip, #0
   18328:	ldr	r4, [pc, r4]
   1832c:	subs	r1, r4, r1
   18330:	sbcs	r1, r6, r7
   18334:	bcs	1880c <__generate_code_for_binary_boolean_expression@@Base+0x22b0>
   18338:	mov	r1, #7
   1833c:	orr	r1, r1, #131072	; 0x20000
   18340:	adds	r1, r2, r1
   18344:	adc	r2, ip, #0
   18348:	mvn	r3, #0
   1834c:	and	r5, r2, r3
   18350:	mov	r2, #16646144	; 0xfe0000
   18354:	orr	r2, r2, #-16777216	; 0xff000000
   18358:	ldr	r4, [pc, #2616]	; 18d98 <__generate_code_for_binary_boolean_expression@@Base+0x283c>
   1835c:	and	r6, r1, r2
   18360:	mov	r1, r6
   18364:	add	r4, pc, r4
   18368:	bl	11f9c <realloc@plt>
   1836c:	str	r6, [r9]
   18370:	str	r5, [r9, #4]
   18374:	str	r0, [r4]
   18378:	ldrb	r2, [r8]
   1837c:	ldr	r5, [sl, #4]
   18380:	ldr	r3, [pc, #2580]	; 18d9c <__generate_code_for_binary_boolean_expression@@Base+0x2840>
   18384:	mov	r7, r0
   18388:	mov	r1, #0
   1838c:	ldr	r3, [pc, r3]
   18390:	adds	r6, r3, #4
   18394:	strb	r1, [r7, r3]!
   18398:	str	r6, [sl]
   1839c:	strb	r1, [r7, #3]
   183a0:	strb	r1, [r7, #2]
   183a4:	strb	r1, [r7, #1]
   183a8:	adc	r1, r5, #0
   183ac:	mov	r7, #1
   183b0:	cmp	r2, #1
   183b4:	str	r1, [sl, #4]
   183b8:	bne	18470 <__generate_code_for_binary_boolean_expression@@Base+0x1f14>
   183bc:	b	18834 <__generate_code_for_binary_boolean_expression@@Base+0x22d8>
   183c0:	ldr	r3, [r0, r2]
   183c4:	adds	r4, r5, #8
   183c8:	adc	r7, r6, #0
   183cc:	cmp	r3, #9
   183d0:	stm	sl, {r4, r7}
   183d4:	bne	18af8 <__generate_code_for_binary_boolean_expression@@Base+0x259c>
   183d8:	ldr	r3, [pc, #2444]	; 18d6c <__generate_code_for_binary_boolean_expression@@Base+0x2810>
   183dc:	adds	r4, r5, #20
   183e0:	adc	r7, r6, #0
   183e4:	add	r3, pc, r3
   183e8:	add	r6, r5, r0
   183ec:	ldrb	r3, [r3]
   183f0:	ldr	r6, [r6, #16]
   183f4:	stm	sl, {r4, r7}
   183f8:	eor	r3, r3, #1
   183fc:	add	r7, r6, r3
   18400:	mov	r6, r0
   18404:	mov	r3, #0
   18408:	strb	r3, [r6, r5]!
   1840c:	mov	r5, #161	; 0xa1
   18410:	strb	r5, [r6, #3]
   18414:	strb	r3, [r6, #2]
   18418:	strb	r3, [r6, #1]
   1841c:	stm	sl, {r2, ip}
   18420:	mov	r3, r0
   18424:	mov	r1, #9
   18428:	strb	r1, [r3, r2]!
   1842c:	mov	r1, #0
   18430:	strb	r1, [r3, #3]
   18434:	strb	r1, [r3, #2]
   18438:	strb	r1, [r3, #1]
   1843c:	adds	r3, r2, #4
   18440:	adc	r5, ip, #0
   18444:	stm	sl, {r3, r5}
   18448:	mov	r2, r0
   1844c:	mov	r1, #0
   18450:	strb	r1, [r2, r3]!
   18454:	adds	r6, r3, #4
   18458:	strb	r1, [r2, #3]
   1845c:	strb	r1, [r2, #2]
   18460:	strb	r1, [r2, #1]
   18464:	adc	r1, r5, #0
   18468:	str	r6, [sl]
   1846c:	str	r1, [sl, #4]
   18470:	mov	r3, r0
   18474:	mov	r2, #0
   18478:	strb	r2, [r3, r6]!
   1847c:	strb	r2, [r3, #3]
   18480:	strb	r2, [r3, #2]
   18484:	strb	r2, [r3, #1]
   18488:	adds	r2, r6, #4
   1848c:	adc	r3, r1, #0
   18490:	strd	r2, [sl]
   18494:	lsr	r1, r7, #24
   18498:	strb	r7, [r0, r2]!
   1849c:	lsr	r6, r7, #16
   184a0:	lsr	r5, r7, #8
   184a4:	strb	r1, [r0, #3]
   184a8:	strb	r6, [r0, #2]
   184ac:	strb	r5, [r0, #1]
   184b0:	ldrb	r0, [r8]
   184b4:	adds	r4, r2, #4
   184b8:	adc	r5, r3, #0
   184bc:	cmp	r0, #0
   184c0:	strd	r4, [sl]
   184c4:	beq	18578 <__generate_code_for_binary_boolean_expression@@Base+0x201c>
   184c8:	ldr	r9, [pc, #2284]	; 18dbc <__generate_code_for_binary_boolean_expression@@Base+0x2860>
   184cc:	adds	r0, r2, #8
   184d0:	adc	r1, r3, #0
   184d4:	add	r9, pc, r9
   184d8:	ldr	r7, [r9, #4]
   184dc:	ldr	r6, [pc, #2268]	; 18dc0 <__generate_code_for_binary_boolean_expression@@Base+0x2864>
   184e0:	ldr	r6, [pc, r6]
   184e4:	subs	r0, r6, r0
   184e8:	sbcs	r0, r7, r1
   184ec:	bcs	18744 <__generate_code_for_binary_boolean_expression@@Base+0x21e8>
   184f0:	mov	r0, #7
   184f4:	orr	r0, r0, #131072	; 0x20000
   184f8:	adds	r0, r2, r0
   184fc:	adc	r1, r3, #0
   18500:	mvn	r2, #0
   18504:	and	r5, r1, r2
   18508:	mov	r1, #16646144	; 0xfe0000
   1850c:	orr	r1, r1, #-16777216	; 0xff000000
   18510:	ldr	r4, [pc, #2268]	; 18df4 <__generate_code_for_binary_boolean_expression@@Base+0x2898>
   18514:	and	r6, r0, r1
   18518:	ldr	r0, [pc, #2264]	; 18df8 <__generate_code_for_binary_boolean_expression@@Base+0x289c>
   1851c:	mov	r1, r6
   18520:	add	r4, pc, r4
   18524:	ldr	r0, [pc, r0]
   18528:	bl	11f9c <realloc@plt>
   1852c:	str	r6, [r9]
   18530:	str	r5, [r9, #4]
   18534:	str	r0, [r4]
   18538:	ldrb	r1, [r8]
   1853c:	ldr	r5, [sl, #4]
   18540:	ldr	r4, [pc, #2228]	; 18dfc <__generate_code_for_binary_boolean_expression@@Base+0x28a0>
   18544:	mov	r3, r0
   18548:	mov	r2, #0
   1854c:	ldr	r4, [pc, r4]
   18550:	strb	r2, [r3, r4]!
   18554:	strb	r2, [r3, #3]
   18558:	strb	r2, [r3, #2]
   1855c:	strb	r2, [r3, #1]
   18560:	adds	r2, r4, #4
   18564:	adc	r3, r5, #0
   18568:	cmp	r1, #0
   1856c:	strd	r2, [sl]
   18570:	beq	185a4 <__generate_code_for_binary_boolean_expression@@Base+0x2048>
   18574:	b	18770 <__generate_code_for_binary_boolean_expression@@Base+0x2214>
   18578:	ldr	r0, [pc, #2104]	; 18db8 <__generate_code_for_binary_boolean_expression@@Base+0x285c>
   1857c:	adds	r2, r2, #8
   18580:	mov	r1, #0
   18584:	adc	r3, r3, #0
   18588:	ldr	r0, [pc, r0]
   1858c:	mov	r7, r0
   18590:	strb	r1, [r7, r4]!
   18594:	strb	r1, [r7, #3]
   18598:	strb	r1, [r7, #2]
   1859c:	strb	r1, [r7, #1]
   185a0:	strd	r2, [sl]
   185a4:	mov	r7, r0
   185a8:	mov	r1, #0
   185ac:	strb	r1, [r7, r2]!
   185b0:	strb	r1, [r7, #3]
   185b4:	strb	r1, [r7, #2]
   185b8:	strb	r1, [r7, #1]
   185bc:	adds	r1, r2, #4
   185c0:	adc	r5, r3, #0
   185c4:	stm	sl, {r1, r5}
   185c8:	mov	r3, r0
   185cc:	mov	r2, #0
   185d0:	strb	r2, [r3, r1]!
   185d4:	strb	r2, [r3, #3]
   185d8:	strb	r2, [r3, #2]
   185dc:	strb	r2, [r3, #1]
   185e0:	adds	r2, r1, #4
   185e4:	adc	r3, r5, #0
   185e8:	strd	r2, [sl]
   185ec:	mov	r7, r0
   185f0:	mov	r1, #0
   185f4:	strb	r1, [r7, r2]!
   185f8:	strb	r1, [r7, #3]
   185fc:	strb	r1, [r7, #2]
   18600:	strb	r1, [r7, #1]
   18604:	adds	r1, r2, #4
   18608:	adc	r5, r3, #0
   1860c:	stm	sl, {r1, r5}
   18610:	mov	r3, r0
   18614:	mov	r2, #0
   18618:	strb	r2, [r3, r1]!
   1861c:	adds	r4, r1, #4
   18620:	strb	r2, [r3, #3]
   18624:	strb	r2, [r3, #2]
   18628:	strb	r2, [r3, #1]
   1862c:	adc	r3, r5, #0
   18630:	str	r4, [sl]
   18634:	str	r3, [sl, #4]
   18638:	mov	r2, r0
   1863c:	mov	r1, #0
   18640:	strb	r1, [r2, r4]!
   18644:	strb	r1, [r2, #3]
   18648:	strb	r1, [r2, #2]
   1864c:	strb	r1, [r2, #1]
   18650:	adds	r2, r4, #4
   18654:	adc	r1, r3, #0
   18658:	str	r2, [sl]
   1865c:	str	r1, [sl, #4]
   18660:	mov	r3, r0
   18664:	mov	r4, #0
   18668:	strb	r4, [r3, r2]!
   1866c:	mov	r7, #163	; 0xa3
   18670:	strb	r7, [r3, #3]
   18674:	strb	r4, [r3, #2]
   18678:	strb	r4, [r3, #1]
   1867c:	ldrb	r7, [r8]
   18680:	adds	r6, r2, #4
   18684:	adc	r3, r1, #0
   18688:	cmp	r7, #1
   1868c:	str	r6, [sl]
   18690:	str	r3, [sl, #4]
   18694:	bne	18708 <__generate_code_for_binary_boolean_expression@@Base+0x21ac>
   18698:	ldr	r8, [pc, #1852]	; 18ddc <__generate_code_for_binary_boolean_expression@@Base+0x2880>
   1869c:	adds	lr, r2, #8
   186a0:	adc	ip, r1, #0
   186a4:	add	r8, pc, r8
   186a8:	ldr	r5, [r8, #4]
   186ac:	ldr	r7, [pc, #1836]	; 18de0 <__generate_code_for_binary_boolean_expression@@Base+0x2884>
   186b0:	ldr	r7, [pc, r7]
   186b4:	subs	r7, r7, lr
   186b8:	sbcs	r7, r5, ip
   186bc:	bcs	18708 <__generate_code_for_binary_boolean_expression@@Base+0x21ac>
   186c0:	mov	r3, #7
   186c4:	orr	r3, r3, #131072	; 0x20000
   186c8:	adds	r2, r2, r3
   186cc:	adc	r1, r1, #0
   186d0:	mvn	r3, #0
   186d4:	and	r7, r1, r3
   186d8:	mov	r1, #16646144	; 0xfe0000
   186dc:	orr	r1, r1, #-16777216	; 0xff000000
   186e0:	ldr	r5, [pc, #1788]	; 18de4 <__generate_code_for_binary_boolean_expression@@Base+0x2888>
   186e4:	and	r6, r2, r1
   186e8:	mov	r1, r6
   186ec:	add	r5, pc, r5
   186f0:	bl	11f9c <realloc@plt>
   186f4:	strd	r6, [r8]
   186f8:	str	r0, [r5]
   186fc:	ldr	r3, [sl, #4]
   18700:	ldr	r6, [pc, #1760]	; 18de8 <__generate_code_for_binary_boolean_expression@@Base+0x288c>
   18704:	ldr	r6, [pc, r6]
   18708:	ldr	r0, [pc, #1756]	; 18dec <__generate_code_for_binary_boolean_expression@@Base+0x2890>
   1870c:	ldr	r1, [pc, #1756]	; 18df0 <__generate_code_for_binary_boolean_expression@@Base+0x2894>
   18710:	adds	r2, r6, #4
   18714:	add	r0, pc, r0
   18718:	adc	r3, r3, #0
   1871c:	ldr	r1, [pc, r1]
   18720:	strb	r4, [r1, r6]!
   18724:	strb	r4, [r1, #3]
   18728:	strb	r4, [r1, #2]
   1872c:	strb	r4, [r1, #1]
   18730:	mov	r1, #1
   18734:	strd	r2, [sl]
   18738:	strb	r1, [r0]
   1873c:	sub	sp, fp, #28
   18740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18744:	ldr	r0, [pc, #1656]	; 18dc4 <__generate_code_for_binary_boolean_expression@@Base+0x2868>
   18748:	adds	r2, r2, #8
   1874c:	mov	r1, #0
   18750:	adc	r3, r3, #0
   18754:	ldr	r0, [pc, r0]
   18758:	mov	r7, r0
   1875c:	strb	r1, [r7, r4]!
   18760:	strb	r1, [r7, #3]
   18764:	strb	r1, [r7, #2]
   18768:	strb	r1, [r7, #1]
   1876c:	strd	r2, [sl]
   18770:	ldr	r6, [r9, #4]
   18774:	ldr	r1, [pc, #1668]	; 18e00 <__generate_code_for_binary_boolean_expression@@Base+0x28a4>
   18778:	adds	ip, r4, #8
   1877c:	adc	r7, r5, #0
   18780:	ldr	r1, [pc, r1]
   18784:	subs	r1, r1, ip
   18788:	sbcs	r1, r6, r7
   1878c:	bcs	188d8 <__generate_code_for_binary_boolean_expression@@Base+0x237c>
   18790:	mov	r1, #7
   18794:	orr	r1, r1, #131072	; 0x20000
   18798:	adds	r1, r4, r1
   1879c:	adc	r2, r5, #0
   187a0:	mvn	r3, #0
   187a4:	and	r5, r2, r3
   187a8:	mov	r2, #16646144	; 0xfe0000
   187ac:	orr	r2, r2, #-16777216	; 0xff000000
   187b0:	ldr	r6, [pc, #1612]	; 18e04 <__generate_code_for_binary_boolean_expression@@Base+0x28a8>
   187b4:	and	r4, r1, r2
   187b8:	mov	r1, r4
   187bc:	add	r6, pc, r6
   187c0:	bl	11f9c <realloc@plt>
   187c4:	str	r0, [r6]
   187c8:	strd	r4, [r9]
   187cc:	ldrb	r7, [r8]
   187d0:	ldr	r3, [sl, #4]
   187d4:	ldr	r2, [pc, #1580]	; 18e08 <__generate_code_for_binary_boolean_expression@@Base+0x28ac>
   187d8:	mov	r6, r0
   187dc:	mov	r1, #0
   187e0:	ldr	r2, [pc, r2]
   187e4:	strb	r1, [r6, r2]!
   187e8:	strb	r1, [r6, #3]
   187ec:	strb	r1, [r6, #2]
   187f0:	strb	r1, [r6, #1]
   187f4:	adds	r1, r2, #4
   187f8:	adc	r5, r3, #0
   187fc:	cmp	r7, #1
   18800:	stm	sl, {r1, r5}
   18804:	bne	185c8 <__generate_code_for_binary_boolean_expression@@Base+0x206c>
   18808:	b	188fc <__generate_code_for_binary_boolean_expression@@Base+0x23a0>
   1880c:	mov	r2, r0
   18810:	mov	r1, #0
   18814:	strb	r1, [r2, r3]!
   18818:	adds	r6, r3, #4
   1881c:	strb	r1, [r2, #3]
   18820:	strb	r1, [r2, #2]
   18824:	strb	r1, [r2, #1]
   18828:	adc	r1, r5, #0
   1882c:	str	r6, [sl]
   18830:	str	r1, [sl, #4]
   18834:	ldr	r4, [r9, #4]
   18838:	ldr	r2, [pc, #1376]	; 18da0 <__generate_code_for_binary_boolean_expression@@Base+0x2844>
   1883c:	adds	ip, r3, #8
   18840:	adc	r7, r5, #0
   18844:	ldr	r2, [pc, r2]
   18848:	subs	r2, r2, ip
   1884c:	sbcs	r2, r4, r7
   18850:	bcs	1899c <__generate_code_for_binary_boolean_expression@@Base+0x2440>
   18854:	mov	r1, #7
   18858:	orr	r1, r1, #131072	; 0x20000
   1885c:	adds	r1, r3, r1
   18860:	adc	r2, r5, #0
   18864:	mvn	r3, #0
   18868:	and	r5, r2, r3
   1886c:	mov	r2, #16646144	; 0xfe0000
   18870:	orr	r2, r2, #-16777216	; 0xff000000
   18874:	ldr	r4, [pc, #1320]	; 18da4 <__generate_code_for_binary_boolean_expression@@Base+0x2848>
   18878:	and	r6, r1, r2
   1887c:	mov	r1, r6
   18880:	add	r4, pc, r4
   18884:	bl	11f9c <realloc@plt>
   18888:	str	r6, [r9]
   1888c:	str	r5, [r9, #4]
   18890:	str	r0, [r4]
   18894:	ldrb	r5, [r8]
   18898:	ldr	r1, [sl, #4]
   1889c:	ldr	r6, [pc, #1284]	; 18da8 <__generate_code_for_binary_boolean_expression@@Base+0x284c>
   188a0:	mov	r3, r0
   188a4:	mov	r2, #0
   188a8:	mov	r7, #1
   188ac:	ldr	r6, [pc, r6]
   188b0:	strb	r2, [r3, r6]!
   188b4:	strb	r2, [r3, #3]
   188b8:	strb	r2, [r3, #2]
   188bc:	strb	r2, [r3, #1]
   188c0:	adds	r2, r6, #4
   188c4:	adc	r3, r1, #0
   188c8:	cmp	r5, #1
   188cc:	strd	r2, [sl]
   188d0:	bne	18494 <__generate_code_for_binary_boolean_expression@@Base+0x1f38>
   188d4:	b	189c0 <__generate_code_for_binary_boolean_expression@@Base+0x2464>
   188d8:	mov	r7, r0
   188dc:	mov	r1, #0
   188e0:	strb	r1, [r7, r2]!
   188e4:	strb	r1, [r7, #3]
   188e8:	strb	r1, [r7, #2]
   188ec:	strb	r1, [r7, #1]
   188f0:	adds	r1, r2, #4
   188f4:	adc	r5, r3, #0
   188f8:	stm	sl, {r1, r5}
   188fc:	ldr	r4, [r9, #4]
   18900:	ldr	r6, [pc, #1284]	; 18e0c <__generate_code_for_binary_boolean_expression@@Base+0x28b0>
   18904:	adds	r7, r2, #8
   18908:	adc	ip, r3, #0
   1890c:	ldr	r6, [pc, r6]
   18910:	subs	r7, r6, r7
   18914:	sbcs	r7, r4, ip
   18918:	bcs	18a34 <__generate_code_for_binary_boolean_expression@@Base+0x24d8>
   1891c:	mov	r1, #7
   18920:	orr	r1, r1, #131072	; 0x20000
   18924:	adds	r1, r2, r1
   18928:	adc	r2, r3, #0
   1892c:	mvn	r3, #0
   18930:	and	r5, r2, r3
   18934:	mov	r2, #16646144	; 0xfe0000
   18938:	orr	r2, r2, #-16777216	; 0xff000000
   1893c:	ldr	r4, [pc, #1228]	; 18e10 <__generate_code_for_binary_boolean_expression@@Base+0x28b4>
   18940:	and	r6, r1, r2
   18944:	mov	r1, r6
   18948:	add	r4, pc, r4
   1894c:	bl	11f9c <realloc@plt>
   18950:	str	r6, [r9]
   18954:	str	r5, [r9, #4]
   18958:	str	r0, [r4]
   1895c:	ldrb	r7, [r8]
   18960:	ldr	r5, [sl, #4]
   18964:	ldr	r1, [pc, #1192]	; 18e14 <__generate_code_for_binary_boolean_expression@@Base+0x28b8>
   18968:	mov	r3, r0
   1896c:	mov	r2, #0
   18970:	ldr	r1, [pc, r1]
   18974:	strb	r2, [r3, r1]!
   18978:	strb	r2, [r3, #3]
   1897c:	strb	r2, [r3, #2]
   18980:	strb	r2, [r3, #1]
   18984:	adds	r2, r1, #4
   18988:	adc	r3, r5, #0
   1898c:	cmp	r7, #1
   18990:	strd	r2, [sl]
   18994:	bne	185ec <__generate_code_for_binary_boolean_expression@@Base+0x2090>
   18998:	b	18a58 <__generate_code_for_binary_boolean_expression@@Base+0x24fc>
   1899c:	mov	r3, r0
   189a0:	mov	r2, #0
   189a4:	strb	r2, [r3, r6]!
   189a8:	strb	r2, [r3, #3]
   189ac:	strb	r2, [r3, #2]
   189b0:	strb	r2, [r3, #1]
   189b4:	adds	r2, r6, #4
   189b8:	adc	r3, r1, #0
   189bc:	strd	r2, [sl]
   189c0:	ldr	r4, [r9, #4]
   189c4:	ldr	r5, [pc, #992]	; 18dac <__generate_code_for_binary_boolean_expression@@Base+0x2850>
   189c8:	adds	lr, r6, #8
   189cc:	adc	ip, r1, #0
   189d0:	mov	r7, #1
   189d4:	ldr	r5, [pc, r5]
   189d8:	subs	r5, r5, lr
   189dc:	sbcs	r5, r4, ip
   189e0:	bcs	18494 <__generate_code_for_binary_boolean_expression@@Base+0x1f38>
   189e4:	mov	r2, #7
   189e8:	orr	r2, r2, #131072	; 0x20000
   189ec:	adds	r2, r6, r2
   189f0:	adc	r1, r1, #0
   189f4:	mvn	r3, #0
   189f8:	and	r5, r1, r3
   189fc:	mov	r1, #16646144	; 0xfe0000
   18a00:	orr	r1, r1, #-16777216	; 0xff000000
   18a04:	ldr	r4, [pc, #932]	; 18db0 <__generate_code_for_binary_boolean_expression@@Base+0x2854>
   18a08:	and	r6, r2, r1
   18a0c:	mov	r1, r6
   18a10:	add	r4, pc, r4
   18a14:	bl	11f9c <realloc@plt>
   18a18:	str	r6, [r9]
   18a1c:	str	r5, [r9, #4]
   18a20:	str	r0, [r4]
   18a24:	ldr	r3, [sl, #4]
   18a28:	ldr	r2, [pc, #900]	; 18db4 <__generate_code_for_binary_boolean_expression@@Base+0x2858>
   18a2c:	ldr	r2, [pc, r2]
   18a30:	b	18494 <__generate_code_for_binary_boolean_expression@@Base+0x1f38>
   18a34:	mov	r3, r0
   18a38:	mov	r2, #0
   18a3c:	strb	r2, [r3, r1]!
   18a40:	strb	r2, [r3, #3]
   18a44:	strb	r2, [r3, #2]
   18a48:	strb	r2, [r3, #1]
   18a4c:	adds	r2, r1, #4
   18a50:	adc	r3, r5, #0
   18a54:	strd	r2, [sl]
   18a58:	ldr	r4, [r9, #4]
   18a5c:	ldr	r6, [pc, #948]	; 18e18 <__generate_code_for_binary_boolean_expression@@Base+0x28bc>
   18a60:	adds	r7, r1, #8
   18a64:	adc	ip, r5, #0
   18a68:	ldr	r6, [pc, r6]
   18a6c:	subs	r7, r6, r7
   18a70:	sbcs	r7, r4, ip
   18a74:	bcs	18b20 <__generate_code_for_binary_boolean_expression@@Base+0x25c4>
   18a78:	mov	r2, #7
   18a7c:	orr	r2, r2, #131072	; 0x20000
   18a80:	adds	r1, r1, r2
   18a84:	adc	r2, r5, #0
   18a88:	mvn	r3, #0
   18a8c:	and	r5, r2, r3
   18a90:	mov	r2, #16646144	; 0xfe0000
   18a94:	orr	r2, r2, #-16777216	; 0xff000000
   18a98:	ldr	r4, [pc, #892]	; 18e1c <__generate_code_for_binary_boolean_expression@@Base+0x28c0>
   18a9c:	and	r6, r1, r2
   18aa0:	mov	r1, r6
   18aa4:	add	r4, pc, r4
   18aa8:	bl	11f9c <realloc@plt>
   18aac:	str	r6, [r9]
   18ab0:	str	r5, [r9, #4]
   18ab4:	str	r0, [r4]
   18ab8:	ldrb	r7, [r8]
   18abc:	ldr	r3, [sl, #4]
   18ac0:	ldr	r2, [pc, #856]	; 18e20 <__generate_code_for_binary_boolean_expression@@Base+0x28c4>
   18ac4:	mov	r6, r0
   18ac8:	mov	r1, #0
   18acc:	ldr	r2, [pc, r2]
   18ad0:	strb	r1, [r6, r2]!
   18ad4:	strb	r1, [r6, #3]
   18ad8:	strb	r1, [r6, #2]
   18adc:	strb	r1, [r6, #1]
   18ae0:	adds	r1, r2, #4
   18ae4:	adc	r5, r3, #0
   18ae8:	cmp	r7, #1
   18aec:	stm	sl, {r1, r5}
   18af0:	bne	18610 <__generate_code_for_binary_boolean_expression@@Base+0x20b4>
   18af4:	b	18b44 <__generate_code_for_binary_boolean_expression@@Base+0x25e8>
   18af8:	ldr	r1, [pc, #616]	; 18d68 <__generate_code_for_binary_boolean_expression@@Base+0x280c>
   18afc:	add	r1, pc, r1
   18b00:	ldr	r0, [pc, #600]	; 18d60 <__generate_code_for_binary_boolean_expression@@Base+0x2804>
   18b04:	ldr	r0, [pc, r0]
   18b08:	ldr	r0, [r0]
   18b0c:	ldr	r2, [pc, #592]	; 18d64 <__generate_code_for_binary_boolean_expression@@Base+0x2808>
   18b10:	ldr	r2, [pc, r2]
   18b14:	sub	sp, fp, #28
   18b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b1c:	b	12038 <fprintf@plt>
   18b20:	mov	r7, r0
   18b24:	mov	r1, #0
   18b28:	strb	r1, [r7, r2]!
   18b2c:	strb	r1, [r7, #3]
   18b30:	strb	r1, [r7, #2]
   18b34:	strb	r1, [r7, #1]
   18b38:	adds	r1, r2, #4
   18b3c:	adc	r5, r3, #0
   18b40:	stm	sl, {r1, r5}
   18b44:	ldr	r4, [r9, #4]
   18b48:	ldr	r6, [pc, #724]	; 18e24 <__generate_code_for_binary_boolean_expression@@Base+0x28c8>
   18b4c:	adds	r7, r2, #8
   18b50:	adc	ip, r3, #0
   18b54:	ldr	r6, [pc, r6]
   18b58:	subs	r7, r6, r7
   18b5c:	sbcs	r7, r4, ip
   18b60:	bcs	18be8 <__generate_code_for_binary_boolean_expression@@Base+0x268c>
   18b64:	mov	r1, #7
   18b68:	orr	r1, r1, #131072	; 0x20000
   18b6c:	adds	r1, r2, r1
   18b70:	adc	r2, r3, #0
   18b74:	mvn	r3, #0
   18b78:	and	r5, r2, r3
   18b7c:	mov	r2, #16646144	; 0xfe0000
   18b80:	orr	r2, r2, #-16777216	; 0xff000000
   18b84:	ldr	r4, [pc, #668]	; 18e28 <__generate_code_for_binary_boolean_expression@@Base+0x28cc>
   18b88:	and	r6, r1, r2
   18b8c:	mov	r1, r6
   18b90:	add	r4, pc, r4
   18b94:	bl	11f9c <realloc@plt>
   18b98:	str	r6, [r9]
   18b9c:	str	r5, [r9, #4]
   18ba0:	str	r0, [r4]
   18ba4:	ldrb	r2, [r8]
   18ba8:	ldr	r5, [sl, #4]
   18bac:	ldr	r1, [pc, #632]	; 18e2c <__generate_code_for_binary_boolean_expression@@Base+0x28d0>
   18bb0:	mov	r7, r0
   18bb4:	mov	r3, #0
   18bb8:	ldr	r1, [pc, r1]
   18bbc:	adds	r4, r1, #4
   18bc0:	strb	r3, [r7, r1]!
   18bc4:	str	r4, [sl]
   18bc8:	strb	r3, [r7, #3]
   18bcc:	strb	r3, [r7, #2]
   18bd0:	strb	r3, [r7, #1]
   18bd4:	adc	r3, r5, #0
   18bd8:	cmp	r2, #1
   18bdc:	str	r3, [sl, #4]
   18be0:	bne	18638 <__generate_code_for_binary_boolean_expression@@Base+0x20dc>
   18be4:	b	18c10 <__generate_code_for_binary_boolean_expression@@Base+0x26b4>
   18be8:	mov	r3, r0
   18bec:	mov	r2, #0
   18bf0:	strb	r2, [r3, r1]!
   18bf4:	adds	r4, r1, #4
   18bf8:	strb	r2, [r3, #3]
   18bfc:	strb	r2, [r3, #2]
   18c00:	strb	r2, [r3, #1]
   18c04:	adc	r3, r5, #0
   18c08:	str	r4, [sl]
   18c0c:	str	r3, [sl, #4]
   18c10:	ldr	r6, [r9, #4]
   18c14:	ldr	r2, [pc, #532]	; 18e30 <__generate_code_for_binary_boolean_expression@@Base+0x28d4>
   18c18:	adds	ip, r1, #8
   18c1c:	adc	r7, r5, #0
   18c20:	ldr	r2, [pc, r2]
   18c24:	subs	r2, r2, ip
   18c28:	sbcs	r2, r6, r7
   18c2c:	bcs	18cb4 <__generate_code_for_binary_boolean_expression@@Base+0x2758>
   18c30:	mov	r2, #7
   18c34:	orr	r2, r2, #131072	; 0x20000
   18c38:	adds	r1, r1, r2
   18c3c:	adc	r2, r5, #0
   18c40:	mvn	r3, #0
   18c44:	and	r5, r2, r3
   18c48:	mov	r2, #16646144	; 0xfe0000
   18c4c:	orr	r2, r2, #-16777216	; 0xff000000
   18c50:	ldr	r4, [pc, #368]	; 18dc8 <__generate_code_for_binary_boolean_expression@@Base+0x286c>
   18c54:	and	r6, r1, r2
   18c58:	mov	r1, r6
   18c5c:	add	r4, pc, r4
   18c60:	bl	11f9c <realloc@plt>
   18c64:	str	r6, [r9]
   18c68:	str	r5, [r9, #4]
   18c6c:	str	r0, [r4]
   18c70:	ldrb	r7, [r8]
   18c74:	ldr	r3, [sl, #4]
   18c78:	ldr	r4, [pc, #332]	; 18dcc <__generate_code_for_binary_boolean_expression@@Base+0x2870>
   18c7c:	mov	r2, r0
   18c80:	mov	r1, #0
   18c84:	ldr	r4, [pc, r4]
   18c88:	strb	r1, [r2, r4]!
   18c8c:	strb	r1, [r2, #3]
   18c90:	strb	r1, [r2, #2]
   18c94:	strb	r1, [r2, #1]
   18c98:	adds	r2, r4, #4
   18c9c:	adc	r1, r3, #0
   18ca0:	cmp	r7, #0
   18ca4:	str	r2, [sl]
   18ca8:	str	r1, [sl, #4]
   18cac:	beq	18660 <__generate_code_for_binary_boolean_expression@@Base+0x2104>
   18cb0:	b	18cdc <__generate_code_for_binary_boolean_expression@@Base+0x2780>
   18cb4:	mov	r2, r0
   18cb8:	mov	r1, #0
   18cbc:	strb	r1, [r2, r4]!
   18cc0:	strb	r1, [r2, #3]
   18cc4:	strb	r1, [r2, #2]
   18cc8:	strb	r1, [r2, #1]
   18ccc:	adds	r2, r4, #4
   18cd0:	adc	r1, r3, #0
   18cd4:	str	r2, [sl]
   18cd8:	str	r1, [sl, #4]
   18cdc:	ldr	r5, [r9, #4]
   18ce0:	ldr	r6, [pc, #232]	; 18dd0 <__generate_code_for_binary_boolean_expression@@Base+0x2874>
   18ce4:	adds	r7, r4, #8
   18ce8:	adc	ip, r3, #0
   18cec:	ldr	r6, [pc, r6]
   18cf0:	subs	r7, r6, r7
   18cf4:	sbcs	r7, r5, ip
   18cf8:	bcs	18660 <__generate_code_for_binary_boolean_expression@@Base+0x2104>
   18cfc:	mov	r1, #7
   18d00:	orr	r1, r1, #131072	; 0x20000
   18d04:	adds	r1, r4, r1
   18d08:	adc	r2, r3, #0
   18d0c:	mvn	r3, #0
   18d10:	and	r7, r2, r3
   18d14:	mov	r2, #16646144	; 0xfe0000
   18d18:	orr	r2, r2, #-16777216	; 0xff000000
   18d1c:	ldr	r5, [pc, #176]	; 18dd4 <__generate_code_for_binary_boolean_expression@@Base+0x2878>
   18d20:	and	r6, r1, r2
   18d24:	mov	r1, r6
   18d28:	add	r5, pc, r5
   18d2c:	bl	11f9c <realloc@plt>
   18d30:	strd	r6, [r9]
   18d34:	str	r0, [r5]
   18d38:	ldr	r1, [sl, #4]
   18d3c:	ldr	r2, [pc, #148]	; 18dd8 <__generate_code_for_binary_boolean_expression@@Base+0x287c>
   18d40:	ldr	r2, [pc, r2]
   18d44:	b	18660 <__generate_code_for_binary_boolean_expression@@Base+0x2104>
   18d48:	strdeq	r4, [r1], -r0
   18d4c:	strdeq	r4, [r1], -r0
   18d50:	andeq	r4, r1, r4, ror #31
   18d54:	andeq	r4, r1, r8, asr #31
   18d58:	strdeq	r4, [r1], -ip
   18d5c:	andeq	r2, r0, lr, ror #23
   18d60:			; <UNDEFINED> instruction: 0x000135b8
   18d64:			; <UNDEFINED> instruction: 0x000145b0
   18d68:	andeq	r2, r0, r7, asr r3
   18d6c:	strdeq	r4, [r1], -ip
   18d70:			; <UNDEFINED> instruction: 0x00014fb8
   18d74:	andeq	r4, r1, ip, lsr #31
   18d78:	andeq	r4, r1, r0, lsr #29
   18d7c:	andeq	r4, r1, r0, ror #30
   18d80:	andeq	r4, r1, ip, asr pc
   18d84:	andeq	r4, r1, ip, lsr pc
   18d88:	andeq	r4, r1, r8, ror lr
   18d8c:	andeq	r4, r1, r8, lsr lr
   18d90:	andeq	r4, r1, ip, lsl lr
   18d94:	andeq	r4, r1, r8, lsr #27
   18d98:	andeq	r4, r1, r8, ror #26
   18d9c:	andeq	r4, r1, ip, asr #26
   18da0:	andeq	r4, r1, ip, lsl #17
   18da4:	andeq	r4, r1, ip, asr #16
   18da8:	andeq	r4, r1, ip, lsr #16
   18dac:	strdeq	r4, [r1], -ip
   18db0:			; <UNDEFINED> instruction: 0x000146bc
   18db4:	andeq	r4, r1, ip, lsr #13
   18db8:	andeq	r4, r1, r4, asr #22
   18dbc:	strdeq	r4, [r1], -ip
   18dc0:	strdeq	r4, [r1], -r0
   18dc4:	andeq	r4, r1, r8, ror r9
   18dc8:	andeq	r4, r1, r0, ror r4
   18dcc:	andeq	r4, r1, r4, asr r4
   18dd0:	andeq	r4, r1, r4, ror #7
   18dd4:	andeq	r4, r1, r4, lsr #7
   18dd8:	muleq	r1, r8, r3
   18ddc:	andeq	r4, r1, ip, lsr #20
   18de0:	andeq	r4, r1, r0, lsr #20
   18de4:	andeq	r4, r1, r0, ror #19
   18de8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   18dec:	andeq	r4, r1, ip, asr #19
   18df0:			; <UNDEFINED> instruction: 0x000149b0
   18df4:	andeq	r4, r1, ip, lsr #23
   18df8:	andeq	r4, r1, r8, lsr #23
   18dfc:	andeq	r4, r1, ip, lsl #23
   18e00:	andeq	r4, r1, r0, asr r9
   18e04:	andeq	r4, r1, r0, lsl r9
   18e08:	strdeq	r4, [r1], -r8
   18e0c:	andeq	r4, r1, r4, asr #15
   18e10:	andeq	r4, r1, r4, lsl #15
   18e14:	andeq	r4, r1, r8, ror #14
   18e18:	andeq	r4, r1, r8, ror #12
   18e1c:	andeq	r4, r1, r8, lsr #12
   18e20:	andeq	r4, r1, ip, lsl #12
   18e24:	andeq	r4, r1, ip, ror r5
   18e28:	andeq	r4, r1, ip, lsr r5
   18e2c:	andeq	r4, r1, r0, lsr #10
   18e30:			; <UNDEFINED> instruction: 0x000144b0
   18e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e38:	add	fp, sp, #28
   18e3c:	sub	sp, sp, #4
   18e40:	ldr	r0, [pc, #496]	; 19038 <__generate_code_for_binary_boolean_expression@@Base+0x2adc>
   18e44:	ldr	r0, [pc, r0]
   18e48:	cmp	r0, #0
   18e4c:	beq	18fe0 <__generate_code_for_binary_boolean_expression@@Base+0x2a84>
   18e50:	ldr	sl, [pc, #484]	; 1903c <__generate_code_for_binary_boolean_expression@@Base+0x2ae0>
   18e54:	mov	r5, #0
   18e58:	mov	r1, #0
   18e5c:	add	sl, pc, sl
   18e60:	ldrb	r0, [sl]
   18e64:	ldr	r8, [pc, #468]	; 19040 <__generate_code_for_binary_boolean_expression@@Base+0x2ae4>
   18e68:	ldr	r4, [pc, #468]	; 19044 <__generate_code_for_binary_boolean_expression@@Base+0x2ae8>
   18e6c:	cmp	r0, #1
   18e70:	add	r8, pc, r8
   18e74:	add	r4, pc, r4
   18e78:	bne	18ef4 <__generate_code_for_binary_boolean_expression@@Base+0x2998>
   18e7c:	ldr	r9, [pc, #452]	; 19048 <__generate_code_for_binary_boolean_expression@@Base+0x2aec>
   18e80:	ldr	r0, [r8, #4]
   18e84:	ldr	r2, [pc, #448]	; 1904c <__generate_code_for_binary_boolean_expression@@Base+0x2af0>
   18e88:	add	r9, pc, r9
   18e8c:	mov	ip, r4
   18e90:	mov	r1, #1
   18e94:	ldr	r2, [pc, r2]
   18e98:	ldr	r7, [r9, #4]
   18e9c:	ldr	r4, [pc, #428]	; 19050 <__generate_code_for_binary_boolean_expression@@Base+0x2af4>
   18ea0:	adds	r3, r2, #8
   18ea4:	adc	r6, r0, #0
   18ea8:	ldr	r4, [pc, r4]
   18eac:	subs	r3, r4, r3
   18eb0:	mov	r4, ip
   18eb4:	sbcs	r3, r7, r6
   18eb8:	bcs	18ef4 <__generate_code_for_binary_boolean_expression@@Base+0x2998>
   18ebc:	mov	r1, #7
   18ec0:	orr	r1, r1, #131072	; 0x20000
   18ec4:	adds	r1, r2, r1
   18ec8:	adc	r7, r0, #0
   18ecc:	mov	r0, #16646144	; 0xfe0000
   18ed0:	orr	r0, r0, #-16777216	; 0xff000000
   18ed4:	and	r6, r1, r0
   18ed8:	ldr	r0, [pc, #372]	; 19054 <__generate_code_for_binary_boolean_expression@@Base+0x2af8>
   18edc:	mov	r1, r6
   18ee0:	ldr	r0, [pc, r0]
   18ee4:	bl	11f9c <realloc@plt>
   18ee8:	ldrb	r1, [sl]
   18eec:	strd	r6, [r9]
   18ef0:	str	r0, [r4]
   18ef4:	ldr	r2, [pc, #348]	; 19058 <__generate_code_for_binary_boolean_expression@@Base+0x2afc>
   18ef8:	ldr	r2, [pc, r2]
   18efc:	ldr	r0, [pc, #344]	; 1905c <__generate_code_for_binary_boolean_expression@@Base+0x2b00>
   18f00:	ldr	r0, [pc, r0]
   18f04:	ldr	r3, [r8, #4]
   18f08:	mov	r7, r0
   18f0c:	strb	r5, [r7, r2]!
   18f10:	adds	r2, r2, #8
   18f14:	adc	r3, r3, #0
   18f18:	strb	r5, [r7, #5]
   18f1c:	strb	r5, [r7, #3]
   18f20:	strb	r5, [r7, #2]
   18f24:	strb	r5, [r7, #1]
   18f28:	strb	r5, [r7, #4]!
   18f2c:	cmp	r1, #0
   18f30:	strb	r5, [r7, #3]
   18f34:	strb	r5, [r7, #2]
   18f38:	strd	r2, [r8]
   18f3c:	beq	18f64 <__generate_code_for_binary_boolean_expression@@Base+0x2a08>
   18f40:	ldr	r3, [pc, #280]	; 19060 <__generate_code_for_binary_boolean_expression@@Base+0x2b04>
   18f44:	mov	r1, r2
   18f48:	mov	r2, #1
   18f4c:	ldr	r3, [pc, r3]
   18f50:	bl	11fa8 <fwrite@plt>
   18f54:	ldr	r0, [pc, #264]	; 19064 <__generate_code_for_binary_boolean_expression@@Base+0x2b08>
   18f58:	ldr	r0, [pc, r0]
   18f5c:	bl	11f54 <free@plt>
   18f60:	b	18fa8 <__generate_code_for_binary_boolean_expression@@Base+0x2a4c>
   18f64:	ldr	r1, [pc, #252]	; 19068 <__generate_code_for_binary_boolean_expression@@Base+0x2b0c>
   18f68:	mov	r2, #4
   18f6c:	ldr	r1, [pc, r1]
   18f70:	bl	120e0 <msync@plt>
   18f74:	cmn	r0, #1
   18f78:	beq	18ff4 <__generate_code_for_binary_boolean_expression@@Base+0x2a98>
   18f7c:	ldr	r1, [pc, #244]	; 19078 <__generate_code_for_binary_boolean_expression@@Base+0x2b1c>
   18f80:	ldr	r1, [pc, r1]
   18f84:	ldr	r0, [pc, #240]	; 1907c <__generate_code_for_binary_boolean_expression@@Base+0x2b20>
   18f88:	ldr	r0, [pc, r0]
   18f8c:	bl	120b0 <munmap@plt>
   18f90:	ldr	r0, [pc, #232]	; 19080 <__generate_code_for_binary_boolean_expression@@Base+0x2b24>
   18f94:	mov	r1, #0
   18f98:	str	r1, [r4]
   18f9c:	add	r0, pc, r0
   18fa0:	str	r1, [r0]
   18fa4:	str	r1, [r0, #4]
   18fa8:	ldr	r0, [pc, #212]	; 19084 <__generate_code_for_binary_boolean_expression@@Base+0x2b28>
   18fac:	ldr	r0, [pc, r0]
   18fb0:	bl	11f48 <fflush@plt>
   18fb4:	ldr	r0, [pc, #204]	; 19088 <__generate_code_for_binary_boolean_expression@@Base+0x2b2c>
   18fb8:	ldr	r0, [pc, r0]
   18fbc:	bl	19534 <__gcov_flush@@Base+0x304>
   18fc0:	ldr	r0, [pc, #196]	; 1908c <__generate_code_for_binary_boolean_expression@@Base+0x2b30>
   18fc4:	ldr	r0, [pc, r0]
   18fc8:	bl	12098 <fclose@plt>
   18fcc:	ldr	r0, [pc, #188]	; 19090 <__generate_code_for_binary_boolean_expression@@Base+0x2b34>
   18fd0:	mov	r1, #0
   18fd4:	str	r1, [r4]
   18fd8:	add	r0, pc, r0
   18fdc:	str	r1, [r0]
   18fe0:	ldr	r0, [pc, #172]	; 19094 <__generate_code_for_binary_boolean_expression@@Base+0x2b38>
   18fe4:	ldr	r0, [pc, r0]
   18fe8:	sub	sp, fp, #28
   18fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ff0:	b	11f54 <free@plt>
   18ff4:	bl	12044 <__errno_location@plt>
   18ff8:	ldr	r1, [pc, #108]	; 1906c <__generate_code_for_binary_boolean_expression@@Base+0x2b10>
   18ffc:	mov	r6, r4
   19000:	ldr	r1, [pc, r1]
   19004:	ldr	r0, [r0]
   19008:	ldr	r4, [r1]
   1900c:	ldr	r5, [pc, #92]	; 19070 <__generate_code_for_binary_boolean_expression@@Base+0x2b14>
   19010:	ldr	r5, [pc, r5]
   19014:	bl	11fe4 <strerror@plt>
   19018:	ldr	r1, [pc, #84]	; 19074 <__generate_code_for_binary_boolean_expression@@Base+0x2b18>
   1901c:	mov	r3, r0
   19020:	mov	r0, r4
   19024:	add	r1, pc, r1
   19028:	mov	r2, r5
   1902c:	mov	r4, r6
   19030:	bl	12038 <fprintf@plt>
   19034:	b	18f7c <__generate_code_for_binary_boolean_expression@@Base+0x2a20>
   19038:	andeq	r4, r1, r4, lsl #5
   1903c:	andeq	r4, r1, r8, ror #4
   19040:	andeq	r4, r1, r8, ror #4
   19044:	andeq	r4, r1, r8, asr r2
   19048:	andeq	r4, r1, r8, asr #4
   1904c:	andeq	r4, r1, r4, asr #4
   19050:	andeq	r4, r1, r8, lsr #4
   19054:	andeq	r4, r1, ip, ror #3
   19058:	andeq	r4, r1, r0, ror #3
   1905c:	andeq	r4, r1, ip, asr #3
   19060:	andeq	r4, r1, ip, ror r1
   19064:	andeq	r4, r1, r4, ror r1
   19068:	andeq	r4, r1, r4, lsl #3
   1906c:	strheq	r3, [r1], -ip
   19070:	strheq	r4, [r1], -r0
   19074:	muleq	r0, sp, lr
   19078:	andeq	r4, r1, r0, ror r1
   1907c:	andeq	r4, r1, r4, asr #2
   19080:	andeq	r4, r1, r4, asr r1
   19084:	andeq	r4, r1, ip, lsl r1
   19088:	andeq	r3, r1, r4, lsl r1
   1908c:	andeq	r4, r1, r4, lsl #2
   19090:	strdeq	r4, [r1], -r0
   19094:	ldrdeq	r4, [r1], -ip
   19098:	push	{r4, sl, fp, lr}
   1909c:	add	fp, sp, #8
   190a0:	mov	r4, r0
   190a4:	mov	r0, #12
   190a8:	bl	11fcc <malloc@plt>
   190ac:	ldr	r1, [pc, #60]	; 190f0 <__generate_code_for_binary_boolean_expression@@Base+0x2b94>
   190b0:	mov	r2, #0
   190b4:	add	r1, pc, r1
   190b8:	stm	r0, {r1, r4}
   190bc:	str	r2, [r0, #8]
   190c0:	ldr	r1, [pc, #44]	; 190f4 <__generate_code_for_binary_boolean_expression@@Base+0x2b98>
   190c4:	ldr	r1, [pc, r1]
   190c8:	mov	r2, r1
   190cc:	ldr	r3, [r2], #4
   190d0:	ldr	r4, [r2]
   190d4:	cmp	r3, #0
   190d8:	mov	r3, r2
   190dc:	addne	r3, r4, #8
   190e0:	moveq	r2, r1
   190e4:	str	r0, [r3]
   190e8:	str	r0, [r2]
   190ec:	pop	{r4, sl, fp, pc}
   190f0:	andeq	r4, r1, r0, lsr r0
   190f4:	strdeq	r2, [r1], -r4
   190f8:	push	{r4, r5, fp, lr}
   190fc:	add	fp, sp, #8
   19100:	ldr	r0, [pc, #64]	; 19148 <__generate_code_for_binary_boolean_expression@@Base+0x2bec>
   19104:	ldr	r0, [pc, r0]
   19108:	ldr	r4, [r0]
   1910c:	cmp	r4, #0
   19110:	beq	19144 <__generate_code_for_binary_boolean_expression@@Base+0x2be8>
   19114:	ldr	r5, [pc, #48]	; 1914c <__generate_code_for_binary_boolean_expression@@Base+0x2bf0>
   19118:	add	r5, pc, r5
   1911c:	b	1912c <__generate_code_for_binary_boolean_expression@@Base+0x2bd0>
   19120:	ldr	r4, [r4, #8]
   19124:	cmp	r4, #0
   19128:	beq	19144 <__generate_code_for_binary_boolean_expression@@Base+0x2be8>
   1912c:	ldr	r0, [r4]
   19130:	cmp	r0, r5
   19134:	bne	19120 <__generate_code_for_binary_boolean_expression@@Base+0x2bc4>
   19138:	ldr	r0, [r4, #4]
   1913c:	blx	r0
   19140:	b	19120 <__generate_code_for_binary_boolean_expression@@Base+0x2bc4>
   19144:	pop	{r4, r5, fp, pc}
   19148:			; <UNDEFINED> instruction: 0x00012fb4
   1914c:	andeq	r3, r1, ip, asr #31
   19150:	push	{r4, r5, r6, r7, fp, lr}
   19154:	add	fp, sp, #16
   19158:	ldr	r4, [pc, #104]	; 191c8 <__generate_code_for_binary_boolean_expression@@Base+0x2c6c>
   1915c:	ldr	r4, [pc, r4]
   19160:	ldr	r0, [r4]
   19164:	cmp	r0, #0
   19168:	beq	191c4 <__generate_code_for_binary_boolean_expression@@Base+0x2c68>
   1916c:	ldr	r5, [pc, #88]	; 191cc <__generate_code_for_binary_boolean_expression@@Base+0x2c70>
   19170:	mov	r6, #0
   19174:	add	r5, pc, r5
   19178:	b	191ac <__generate_code_for_binary_boolean_expression@@Base+0x2c50>
   1917c:	ldr	r1, [r4]
   19180:	cmp	r0, r1
   19184:	streq	r7, [r4]
   19188:	ldr	r1, [r4, #4]
   1918c:	cmp	r0, r1
   19190:	streq	r6, [r4, #4]
   19194:	cmp	r6, #0
   19198:	strne	r7, [r6, #8]
   1919c:	bl	11f54 <free@plt>
   191a0:	mov	r0, r7
   191a4:	cmp	r7, #0
   191a8:	beq	191c4 <__generate_code_for_binary_boolean_expression@@Base+0x2c68>
   191ac:	ldr	r1, [r0]
   191b0:	ldr	r7, [r0, #8]
   191b4:	cmp	r1, r5
   191b8:	beq	1917c <__generate_code_for_binary_boolean_expression@@Base+0x2c20>
   191bc:	mov	r6, r0
   191c0:	b	191a0 <__generate_code_for_binary_boolean_expression@@Base+0x2c44>
   191c4:	pop	{r4, r5, r6, r7, fp, pc}
   191c8:	andeq	r2, r1, ip, asr pc
   191cc:	andeq	r3, r1, r0, ror pc
   191d0:	push	{r4, sl, fp, lr}
   191d4:	add	fp, sp, #8
   191d8:	mov	r4, r0
   191dc:	mov	r0, #12
   191e0:	bl	11fcc <malloc@plt>
   191e4:	ldr	r1, [pc, #60]	; 19228 <__generate_code_for_binary_boolean_expression@@Base+0x2ccc>
   191e8:	mov	r2, #0
   191ec:	add	r1, pc, r1
   191f0:	stm	r0, {r1, r4}
   191f4:	str	r2, [r0, #8]
   191f8:	ldr	r1, [pc, #44]	; 1922c <__generate_code_for_binary_boolean_expression@@Base+0x2cd0>
   191fc:	ldr	r1, [pc, r1]
   19200:	mov	r2, r1
   19204:	ldr	r3, [r2], #4
   19208:	ldr	r4, [r2]
   1920c:	cmp	r3, #0
   19210:	mov	r3, r2
   19214:	addne	r3, r4, #8
   19218:	moveq	r2, r1
   1921c:	str	r0, [r3]
   19220:	str	r0, [r2]
   19224:	pop	{r4, sl, fp, pc}
   19228:	strdeq	r3, [r1], -r8
   1922c:			; <UNDEFINED> instruction: 0x00012eb8

00019230 <__gcov_flush@@Base>:
   19230:	push	{r4, sl, fp, lr}
   19234:	add	fp, sp, #8
   19238:	ldr	r0, [pc, #36]	; 19264 <__gcov_flush@@Base+0x34>
   1923c:	ldr	r0, [pc, r0]
   19240:	ldr	r4, [r0]
   19244:	cmp	r4, #0
   19248:	beq	19260 <__gcov_flush@@Base+0x30>
   1924c:	ldr	r0, [r4, #4]
   19250:	blx	r0
   19254:	ldr	r4, [r4, #8]
   19258:	cmp	r4, #0
   1925c:	bne	1924c <__gcov_flush@@Base+0x1c>
   19260:	pop	{r4, sl, fp, pc}
   19264:	andeq	r2, r1, r8, ror lr
   19268:	push	{r4, r5, r6, r7, fp, lr}
   1926c:	add	fp, sp, #16
   19270:	ldr	r4, [pc, #104]	; 192e0 <__gcov_flush@@Base+0xb0>
   19274:	ldr	r4, [pc, r4]
   19278:	ldr	r0, [r4]
   1927c:	cmp	r0, #0
   19280:	beq	192dc <__gcov_flush@@Base+0xac>
   19284:	ldr	r5, [pc, #88]	; 192e4 <__gcov_flush@@Base+0xb4>
   19288:	mov	r6, #0
   1928c:	add	r5, pc, r5
   19290:	b	192c4 <__gcov_flush@@Base+0x94>
   19294:	ldr	r1, [r4]
   19298:	cmp	r0, r1
   1929c:	streq	r7, [r4]
   192a0:	ldr	r1, [r4, #4]
   192a4:	cmp	r0, r1
   192a8:	streq	r6, [r4, #4]
   192ac:	cmp	r6, #0
   192b0:	strne	r7, [r6, #8]
   192b4:	bl	11f54 <free@plt>
   192b8:	mov	r0, r7
   192bc:	cmp	r7, #0
   192c0:	beq	192dc <__gcov_flush@@Base+0xac>
   192c4:	ldr	r1, [r0]
   192c8:	ldr	r7, [r0, #8]
   192cc:	cmp	r1, r5
   192d0:	beq	19294 <__gcov_flush@@Base+0x64>
   192d4:	mov	r6, r0
   192d8:	b	192b8 <__gcov_flush@@Base+0x88>
   192dc:	pop	{r4, r5, r6, r7, fp, pc}
   192e0:	andeq	r2, r1, r0, asr #28
   192e4:	andeq	r3, r1, r8, asr lr
   192e8:	push	{r4, r5, r6, sl, fp, lr}
   192ec:	add	fp, sp, #16
   192f0:	ldr	r6, [pc, #228]	; 193dc <__gcov_flush@@Base+0x1ac>
   192f4:	mov	r4, r1
   192f8:	cmp	r0, #0
   192fc:	add	r6, pc, r6
   19300:	beq	1934c <__gcov_flush@@Base+0x11c>
   19304:	mov	r5, r0
   19308:	mov	r0, #12
   1930c:	bl	11fcc <malloc@plt>
   19310:	mov	r1, #0
   19314:	str	r6, [r0]
   19318:	str	r5, [r0, #4]
   1931c:	str	r1, [r0, #8]
   19320:	ldr	r1, [pc, #184]	; 193e0 <__gcov_flush@@Base+0x1b0>
   19324:	ldr	r1, [pc, r1]
   19328:	mov	r2, r1
   1932c:	ldr	r3, [r2], #4
   19330:	ldr	r5, [r2]
   19334:	cmp	r3, #0
   19338:	mov	r3, r2
   1933c:	addne	r3, r5, #8
   19340:	moveq	r2, r1
   19344:	str	r0, [r3]
   19348:	str	r0, [r2]
   1934c:	cmp	r4, #0
   19350:	beq	19398 <__gcov_flush@@Base+0x168>
   19354:	mov	r0, #12
   19358:	bl	11fcc <malloc@plt>
   1935c:	mov	r1, #0
   19360:	str	r6, [r0]
   19364:	str	r4, [r0, #4]
   19368:	str	r1, [r0, #8]
   1936c:	ldr	r1, [pc, #112]	; 193e4 <__gcov_flush@@Base+0x1b4>
   19370:	ldr	r1, [pc, r1]
   19374:	mov	r2, r1
   19378:	ldr	r3, [r2], #4
   1937c:	ldr	r6, [r2]
   19380:	cmp	r3, #0
   19384:	mov	r3, r2
   19388:	addne	r3, r6, #8
   1938c:	moveq	r2, r1
   19390:	str	r0, [r3]
   19394:	str	r0, [r2]
   19398:	ldr	r1, [pc, #72]	; 193e8 <__gcov_flush@@Base+0x1b8>
   1939c:	add	r1, pc, r1
   193a0:	ldrb	r0, [r1]
   193a4:	cmp	r0, #0
   193a8:	popne	{r4, r5, r6, sl, fp, pc}
   193ac:	ldr	r0, [pc, #56]	; 193ec <__gcov_flush@@Base+0x1bc>
   193b0:	mov	r2, #1
   193b4:	strb	r2, [r1]
   193b8:	add	r0, pc, r0
   193bc:	bl	19988 <__libc_csu_fini@@Base+0x4>
   193c0:	ldr	r0, [pc, #40]	; 193f0 <__gcov_flush@@Base+0x1c0>
   193c4:	add	r0, pc, r0
   193c8:	bl	19988 <__libc_csu_fini@@Base+0x4>
   193cc:	ldr	r0, [pc, #32]	; 193f4 <__gcov_flush@@Base+0x1c4>
   193d0:	add	r0, pc, r0
   193d4:	pop	{r4, r5, r6, sl, fp, lr}
   193d8:	b	19988 <__libc_csu_fini@@Base+0x4>
   193dc:	andeq	r3, r1, r8, ror #27
   193e0:	muleq	r1, r4, sp
   193e4:	andeq	r2, r1, r4, asr #26
   193e8:	andeq	r3, r1, ip, asr #26
   193ec:			; <UNDEFINED> instruction: 0xfffffea8
   193f0:			; <UNDEFINED> instruction: 0xfffffd84
   193f4:			; <UNDEFINED> instruction: 0xfffffd20
   193f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   193fc:	add	fp, sp, #24
   19400:	ldr	r7, [pc, #68]	; 1944c <__gcov_flush@@Base+0x21c>
   19404:	mov	r4, r0
   19408:	mov	r5, #1
   1940c:	mov	r8, #0
   19410:	ldr	r7, [pc, r7]
   19414:	mov	r6, #47	; 0x2f
   19418:	b	19434 <__gcov_flush@@Base+0x204>
   1941c:	strb	r8, [r4, r5]
   19420:	ldr	r1, [r7]
   19424:	mov	r0, r4
   19428:	bl	1205c <mkdir@plt>
   1942c:	strb	r6, [r4, r5]
   19430:	add	r5, r5, #1
   19434:	ldrb	r0, [r4, r5]
   19438:	cmp	r0, #47	; 0x2f
   1943c:	beq	1941c <__gcov_flush@@Base+0x1ec>
   19440:	cmp	r0, #0
   19444:	bne	19430 <__gcov_flush@@Base+0x200>
   19448:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1944c:	andeq	r2, r1, r0, lsr #25
   19450:	ldr	r0, [pc, #8]	; 19460 <__gcov_flush@@Base+0x230>
   19454:	ldr	r0, [pc, r0]
   19458:	ldr	r0, [r0]
   1945c:	bx	lr
   19460:	andeq	r2, r1, ip, asr ip
   19464:	ldr	r1, [pc, #8]	; 19474 <__gcov_flush@@Base+0x244>
   19468:	ldr	r1, [pc, r1]
   1946c:	str	r0, [r1]
   19470:	bx	lr
   19474:	andeq	r2, r1, r8, asr #24
   19478:	push	{r4, r5, r6, sl, fp, lr}
   1947c:	add	fp, sp, #16
   19480:	sub	sp, sp, #392	; 0x188
   19484:	mov	r6, sp
   19488:	mov	r5, r0
   1948c:	mov	r0, r6
   19490:	mov	r4, r1
   19494:	bl	11f84 <uname@plt>
   19498:	cmp	r0, #0
   1949c:	bmi	194b4 <__gcov_flush@@Base+0x284>
   194a0:	add	r1, r6, #65	; 0x41
   194a4:	mov	r0, r5
   194a8:	mov	r2, r4
   194ac:	bl	12074 <strncpy@plt>
   194b0:	mov	r0, #0
   194b4:	sub	sp, fp, #16
   194b8:	pop	{r4, r5, r6, sl, fp, pc}
   194bc:	push	{r4, r5, r6, sl, fp, lr}
   194c0:	add	fp, sp, #16
   194c4:	sub	sp, sp, #32
   194c8:	mov	r4, #0
   194cc:	str	r4, [sp, #8]
   194d0:	strh	r4, [sp, #2]
   194d4:	mov	r5, r0
   194d8:	str	r4, [sp, #12]
   194dc:	str	r4, [sp, #16]
   194e0:	str	r4, [sp, #20]
   194e4:	bl	11ffc <getpid@plt>
   194e8:	mov	r6, sp
   194ec:	str	r0, [sp, #24]
   194f0:	mov	r0, #1
   194f4:	strh	r0, [sp]
   194f8:	mov	r0, r5
   194fc:	mov	r1, #14
   19500:	mov	r2, r6
   19504:	bl	120bc <fcntl64@plt>
   19508:	cmn	r0, #1
   1950c:	bne	19528 <__gcov_flush@@Base+0x2f8>
   19510:	bl	12044 <__errno_location@plt>
   19514:	ldr	r0, [r0]
   19518:	cmp	r0, #4
   1951c:	beq	194f8 <__gcov_flush@@Base+0x2c8>
   19520:	cmp	r0, #37	; 0x25
   19524:	mvneq	r4, #0
   19528:	mov	r0, r4
   1952c:	sub	sp, fp, #16
   19530:	pop	{r4, r5, r6, sl, fp, pc}
   19534:	push	{r4, r5, r6, sl, fp, lr}
   19538:	add	fp, sp, #16
   1953c:	sub	sp, sp, #32
   19540:	mov	r4, #0
   19544:	str	r4, [sp, #8]
   19548:	strh	r4, [sp, #2]
   1954c:	mov	r5, r0
   19550:	str	r4, [sp, #12]
   19554:	str	r4, [sp, #16]
   19558:	str	r4, [sp, #20]
   1955c:	bl	11ffc <getpid@plt>
   19560:	mov	r6, sp
   19564:	str	r0, [sp, #24]
   19568:	mov	r0, #2
   1956c:	strh	r0, [sp]
   19570:	mov	r0, r5
   19574:	mov	r1, #14
   19578:	mov	r2, r6
   1957c:	bl	120bc <fcntl64@plt>
   19580:	cmn	r0, #1
   19584:	bne	195a0 <__gcov_flush@@Base+0x370>
   19588:	bl	12044 <__errno_location@plt>
   1958c:	ldr	r0, [r0]
   19590:	cmp	r0, #4
   19594:	beq	19570 <__gcov_flush@@Base+0x340>
   19598:	cmp	r0, #37	; 0x25
   1959c:	mvneq	r4, #0
   195a0:	mov	r0, r4
   195a4:	sub	sp, fp, #16
   195a8:	pop	{r4, r5, r6, sl, fp, pc}
   195ac:	push	{r4, r5, r6, sl, fp, lr}
   195b0:	add	fp, sp, #16
   195b4:	sub	sp, sp, #32
   195b8:	bl	1208c <fileno@plt>
   195bc:	mov	r4, #0
   195c0:	str	r4, [sp, #8]
   195c4:	strh	r4, [sp, #2]
   195c8:	mov	r5, r0
   195cc:	str	r4, [sp, #12]
   195d0:	str	r4, [sp, #16]
   195d4:	str	r4, [sp, #20]
   195d8:	bl	11ffc <getpid@plt>
   195dc:	mov	r6, sp
   195e0:	str	r0, [sp, #24]
   195e4:	mov	r0, #1
   195e8:	strh	r0, [sp]
   195ec:	mov	r0, r5
   195f0:	mov	r1, #14
   195f4:	mov	r2, r6
   195f8:	bl	120bc <fcntl64@plt>
   195fc:	cmn	r0, #1
   19600:	bne	1961c <__gcov_flush@@Base+0x3ec>
   19604:	bl	12044 <__errno_location@plt>
   19608:	ldr	r0, [r0]
   1960c:	cmp	r0, #4
   19610:	beq	195ec <__gcov_flush@@Base+0x3bc>
   19614:	cmp	r0, #37	; 0x25
   19618:	mvneq	r4, #0
   1961c:	mov	r0, r4
   19620:	sub	sp, fp, #16
   19624:	pop	{r4, r5, r6, sl, fp, pc}
   19628:	push	{r4, r5, r6, sl, fp, lr}
   1962c:	add	fp, sp, #16
   19630:	sub	sp, sp, #32
   19634:	bl	1208c <fileno@plt>
   19638:	mov	r4, #0
   1963c:	str	r4, [sp, #8]
   19640:	strh	r4, [sp, #2]
   19644:	mov	r5, r0
   19648:	str	r4, [sp, #12]
   1964c:	str	r4, [sp, #16]
   19650:	str	r4, [sp, #20]
   19654:	bl	11ffc <getpid@plt>
   19658:	mov	r6, sp
   1965c:	str	r0, [sp, #24]
   19660:	mov	r0, #2
   19664:	strh	r0, [sp]
   19668:	mov	r0, r5
   1966c:	mov	r1, #14
   19670:	mov	r2, r6
   19674:	bl	120bc <fcntl64@plt>
   19678:	cmn	r0, #1
   1967c:	bne	19698 <__gcov_flush@@Base+0x468>
   19680:	bl	12044 <__errno_location@plt>
   19684:	ldr	r0, [r0]
   19688:	cmp	r0, #4
   1968c:	beq	19668 <__gcov_flush@@Base+0x438>
   19690:	cmp	r0, #37	; 0x25
   19694:	mvneq	r4, #0
   19698:	mov	r0, r4
   1969c:	sub	sp, fp, #16
   196a0:	pop	{r4, r5, r6, sl, fp, pc}
   196a4:	push	{r4, r5, fp, lr}
   196a8:	add	fp, sp, #8
   196ac:	sub	sp, sp, #32
   196b0:	mov	r2, #182	; 0xb6
   196b4:	orr	r2, r2, #256	; 0x100
   196b8:	mov	r1, #66	; 0x42
   196bc:	bl	11fb4 <open64@plt>
   196c0:	cmp	r0, #0
   196c4:	bmi	19740 <__gcov_flush@@Base+0x510>
   196c8:	mov	r4, r0
   196cc:	mov	r0, #0
   196d0:	str	r0, [sp, #8]
   196d4:	strh	r0, [sp, #2]
   196d8:	str	r0, [sp, #12]
   196dc:	str	r0, [sp, #16]
   196e0:	str	r0, [sp, #20]
   196e4:	bl	11ffc <getpid@plt>
   196e8:	mov	r5, sp
   196ec:	str	r0, [sp, #24]
   196f0:	mov	r0, #1
   196f4:	strh	r0, [sp]
   196f8:	mov	r0, r4
   196fc:	mov	r1, #14
   19700:	mov	r2, r5
   19704:	bl	120bc <fcntl64@plt>
   19708:	cmn	r0, #1
   1970c:	bne	19728 <__gcov_flush@@Base+0x4f8>
   19710:	bl	12044 <__errno_location@plt>
   19714:	ldr	r0, [r0]
   19718:	cmp	r0, #4
   1971c:	beq	196f8 <__gcov_flush@@Base+0x4c8>
   19720:	cmp	r0, #37	; 0x25
   19724:	beq	1974c <__gcov_flush@@Base+0x51c>
   19728:	ldr	r1, [pc, #76]	; 1977c <__gcov_flush@@Base+0x54c>
   1972c:	mov	r0, r4
   19730:	add	r1, pc, r1
   19734:	bl	11f24 <fdopen@plt>
   19738:	sub	sp, fp, #8
   1973c:	pop	{r4, r5, fp, pc}
   19740:	mov	r0, #0
   19744:	sub	sp, fp, #8
   19748:	pop	{r4, r5, fp, pc}
   1974c:	ldr	r1, [pc, #28]	; 19770 <__gcov_flush@@Base+0x540>
   19750:	ldr	r2, [pc, #28]	; 19774 <__gcov_flush@@Base+0x544>
   19754:	ldr	r0, [pc, #28]	; 19778 <__gcov_flush@@Base+0x548>
   19758:	add	r1, pc, r1
   1975c:	add	r2, pc, r2
   19760:	ldr	r0, [pc, r0]
   19764:	ldr	r0, [r0]
   19768:	bl	12038 <fprintf@plt>
   1976c:	b	19728 <__gcov_flush@@Base+0x4f8>
   19770:	andeq	r1, r0, sl, lsl #15
   19774:	andeq	r1, r0, pc, asr #15
   19778:	andeq	r2, r1, ip, asr r9
   1977c:	andeq	r1, r0, r0, lsl r6
   19780:	push	{r4, r5, r6, sl, fp, lr}
   19784:	add	fp, sp, #16
   19788:	mov	r6, r0
   1978c:	ldr	r0, [pc, #120]	; 1980c <__gcov_flush@@Base+0x5dc>
   19790:	mov	r4, r1
   19794:	add	r0, pc, r0
   19798:	bl	11fc0 <getenv@plt>
   1979c:	mov	r5, r0
   197a0:	ldr	r0, [pc, #104]	; 19810 <__gcov_flush@@Base+0x5e0>
   197a4:	add	r0, pc, r0
   197a8:	bl	11fc0 <getenv@plt>
   197ac:	mov	r1, #0
   197b0:	str	r1, [r4]
   197b4:	str	r1, [r6]
   197b8:	cmp	r5, #0
   197bc:	ldrbne	r2, [r5]
   197c0:	cmpne	r2, #0
   197c4:	bne	197d0 <__gcov_flush@@Base+0x5a0>
   197c8:	mov	r0, r1
   197cc:	pop	{r4, r5, r6, sl, fp, pc}
   197d0:	cmp	r0, #0
   197d4:	beq	197ec <__gcov_flush@@Base+0x5bc>
   197d8:	mov	r1, #0
   197dc:	mov	r2, #10
   197e0:	bl	11f30 <strtol@plt>
   197e4:	bic	r0, r0, r0, asr #31
   197e8:	b	197f0 <__gcov_flush@@Base+0x5c0>
   197ec:	mov	r0, #0
   197f0:	str	r0, [r6]
   197f4:	mov	r0, r5
   197f8:	bl	12014 <strlen@plt>
   197fc:	mov	r1, r5
   19800:	str	r0, [r4]
   19804:	mov	r0, r1
   19808:	pop	{r4, r5, r6, sl, fp, pc}
   1980c:	andeq	r1, r0, r5, asr #15
   19810:	andeq	r1, r0, r1, asr #15
   19814:	push	{r4, r5, r6, r7, fp, lr}
   19818:	add	fp, sp, #16
   1981c:	mov	r6, r0
   19820:	ldr	r0, [fp, #8]
   19824:	mov	r5, r3
   19828:	mov	r7, r2
   1982c:	mov	r4, r1
   19830:	cmp	r0, #1
   19834:	blt	1986c <__gcov_flush@@Base+0x63c>
   19838:	add	r1, r4, #1
   1983c:	mov	r2, #0
   19840:	b	19858 <__gcov_flush@@Base+0x628>
   19844:	add	r2, r2, #1
   19848:	mov	r4, r1
   1984c:	add	r1, r1, #1
   19850:	cmp	r2, r0
   19854:	bge	1986c <__gcov_flush@@Base+0x63c>
   19858:	ldrb	r3, [r1]
   1985c:	cmp	r3, #47	; 0x2f
   19860:	beq	19844 <__gcov_flush@@Base+0x614>
   19864:	cmp	r3, #0
   19868:	bne	1984c <__gcov_flush@@Base+0x61c>
   1986c:	mov	r0, r6
   19870:	mov	r1, r7
   19874:	mov	r2, r5
   19878:	bl	11f60 <memcpy@plt>
   1987c:	add	r0, r5, r7
   19880:	ldrb	r0, [r0, #-1]
   19884:	cmp	r0, #47	; 0x2f
   19888:	movne	r0, #47	; 0x2f
   1988c:	strbne	r0, [r6, r5]
   19890:	mov	r0, r4
   19894:	addne	r5, r5, #1
   19898:	add	r5, r6, r5
   1989c:	bl	12014 <strlen@plt>
   198a0:	add	r2, r0, #1
   198a4:	mov	r0, r5
   198a8:	mov	r1, r4
   198ac:	pop	{r4, r5, r6, r7, fp, lr}
   198b0:	b	11f60 <memcpy@plt>
   198b4:	mov	r1, #47	; 0x2f
   198b8:	b	12020 <strchr@plt>
   198bc:	mov	r1, #47	; 0x2f
   198c0:	b	120c8 <strrchr@plt>
   198c4:	push	{fp, lr}
   198c8:	mov	fp, sp
   198cc:	sub	sp, sp, #8
   198d0:	mov	r0, #0
   198d4:	str	r0, [sp, #4]
   198d8:	add	r1, sp, #4
   198dc:	mov	r0, #2
   198e0:	bl	12080 <prctl@plt>
   198e4:	ldr	r1, [sp, #4]
   198e8:	cmp	r0, #0
   198ec:	cmpeq	r1, #9
   198f0:	bne	19904 <__gcov_flush@@Base+0x6d4>
   198f4:	mov	r0, #1
   198f8:	mov	r1, #0
   198fc:	bl	12080 <prctl@plt>
   19900:	ldr	r1, [sp, #4]
   19904:	sub	r0, r1, #9
   19908:	clz	r0, r0
   1990c:	lsr	r0, r0, #5
   19910:	mov	sp, fp
   19914:	pop	{fp, pc}
   19918:	mov	r0, #1
   1991c:	mov	r1, #9
   19920:	b	12080 <prctl@plt>

00019924 <__libc_csu_init@@Base>:
   19924:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19928:	mov	r7, r0
   1992c:	ldr	r6, [pc, #72]	; 1997c <__libc_csu_init@@Base+0x58>
   19930:	ldr	r5, [pc, #72]	; 19980 <__libc_csu_init@@Base+0x5c>
   19934:	add	r6, pc, r6
   19938:	add	r5, pc, r5
   1993c:	sub	r6, r6, r5
   19940:	mov	r8, r1
   19944:	mov	r9, r2
   19948:	bl	11f04 <fdopen@plt-0x20>
   1994c:	asrs	r6, r6, #2
   19950:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19954:	mov	r4, #0
   19958:	add	r4, r4, #1
   1995c:	ldr	r3, [r5], #4
   19960:	mov	r2, r9
   19964:	mov	r1, r8
   19968:	mov	r0, r7
   1996c:	blx	r3
   19970:	cmp	r6, r4
   19974:	bne	19958 <__libc_csu_init@@Base+0x34>
   19978:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1997c:	andeq	r2, r1, r8, asr #11
   19980:	andeq	r2, r1, r8, lsr #11

00019984 <__libc_csu_fini@@Base>:
   19984:	bx	lr
   19988:	ldr	r3, [pc, #12]	; 1999c <__libc_csu_fini@@Base+0x18>
   1998c:	mov	r1, #0
   19990:	add	r3, pc, r3
   19994:	ldr	r2, [r3]
   19998:	b	12050 <__cxa_atexit@plt>
   1999c:	andeq	r2, r1, r8, lsr r7

Disassembly of section .fini:

000199a0 <.fini>:
   199a0:	push	{r3, lr}
   199a4:	pop	{r3, pc}
