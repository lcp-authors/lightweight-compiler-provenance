
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010c80 <.init>:
   10c80:	push	{r3, lr}
   10c84:	bl	10f4c <__assert_fail@plt+0x48>
   10c88:	pop	{r3, pc}

Disassembly of section .plt:

00010c8c <calloc@plt-0x14>:
   10c8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c90:	ldr	lr, [pc, #4]	; 10c9c <calloc@plt-0x4>
   10c94:	add	lr, pc, lr
   10c98:	ldr	pc, [lr, #8]!
   10c9c:	andeq	r6, r1, r4, ror #6

00010ca0 <calloc@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #868]!	; 0x364

00010cac <fputs_unlocked@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #860]!	; 0x35c

00010cb8 <strcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #852]!	; 0x354

00010cc4 <posix_fadvise64@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #844]!	; 0x34c

00010cd0 <fflush@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #836]!	; 0x344

00010cdc <memmove@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #828]!	; 0x33c

00010ce8 <free@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #820]!	; 0x334

00010cf4 <_exit@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #812]!	; 0x32c

00010d00 <memcpy@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #804]!	; 0x324

00010d0c <__strtoull_internal@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #796]!	; 0x31c

00010d18 <mbsinit@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #788]!	; 0x314

00010d24 <fwrite_unlocked@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #780]!	; 0x30c

00010d30 <memcmp@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #772]!	; 0x304

00010d3c <fputc_unlocked@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #764]!	; 0x2fc

00010d48 <dcgettext@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #756]!	; 0x2f4

00010d54 <realloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d60 <textdomain@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #740]!	; 0x2e4

00010d6c <iswprint@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #732]!	; 0x2dc

00010d78 <fwrite@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #724]!	; 0x2d4

00010d84 <lseek64@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d90 <__ctype_get_mb_cur_max@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #708]!	; 0x2c4

00010d9c <__fpending@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #700]!	; 0x2bc

00010da8 <mbrtowc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #692]!	; 0x2b4

00010db4 <error@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #684]!	; 0x2ac

00010dc0 <malloc@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dcc <__libc_start_main@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #668]!	; 0x29c

00010dd8 <__freading@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #660]!	; 0x294

00010de4 <__gmon_start__@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #652]!	; 0x28c

00010df0 <getopt_long@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #644]!	; 0x284

00010dfc <__ctype_b_loc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #636]!	; 0x27c

00010e08 <exit@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #628]!	; 0x274

00010e14 <strlen@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #620]!	; 0x26c

00010e20 <strchr@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #612]!	; 0x264

00010e2c <__errno_location@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #604]!	; 0x25c

00010e38 <__cxa_atexit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #596]!	; 0x254

00010e44 <memset@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #588]!	; 0x24c

00010e50 <__printf_chk@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #580]!	; 0x244

00010e5c <fileno@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #572]!	; 0x23c

00010e68 <__fprintf_chk@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #564]!	; 0x234

00010e74 <fclose@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #556]!	; 0x22c

00010e80 <fseeko64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #548]!	; 0x224

00010e8c <__uflow@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #540]!	; 0x21c

00010e98 <__overflow@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #532]!	; 0x214

00010ea4 <setlocale@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #524]!	; 0x20c

00010eb0 <strrchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #516]!	; 0x204

00010ebc <nl_langinfo@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ec8 <clearerr_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ed4 <fopen64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ee0 <bindtextdomain@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #484]!	; 0x1e4

00010eec <strncmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ef8 <abort@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #468]!	; 0x1d4

00010f04 <__assert_fail@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #460]!	; 0x1cc

Disassembly of section .text:

00010f10 <.text>:
   10f10:	mov	fp, #0
   10f14:	mov	lr, #0
   10f18:	pop	{r1}		; (ldr r1, [sp], #4)
   10f1c:	mov	r2, sp
   10f20:	push	{r2}		; (str r2, [sp, #-4]!)
   10f24:	push	{r0}		; (str r0, [sp, #-4]!)
   10f28:	ldr	ip, [pc, #16]	; 10f40 <__assert_fail@plt+0x3c>
   10f2c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f30:	ldr	r0, [pc, #12]	; 10f44 <__assert_fail@plt+0x40>
   10f34:	ldr	r3, [pc, #12]	; 10f48 <__assert_fail@plt+0x44>
   10f38:	bl	10dcc <__libc_start_main@plt>
   10f3c:	bl	10ef8 <abort@plt>
   10f40:	andeq	r5, r1, r0, asr #15
   10f44:	andeq	r1, r1, r0, lsr #15
   10f48:	andeq	r5, r1, r0, ror #14
   10f4c:	ldr	r3, [pc, #20]	; 10f68 <__assert_fail@plt+0x64>
   10f50:	ldr	r2, [pc, #20]	; 10f6c <__assert_fail@plt+0x68>
   10f54:	add	r3, pc, r3
   10f58:	ldr	r2, [r3, r2]
   10f5c:	cmp	r2, #0
   10f60:	bxeq	lr
   10f64:	b	10de4 <__gmon_start__@plt>
   10f68:	andeq	r6, r1, r4, lsr #1
   10f6c:	ldrdeq	r0, [r0], -ip
   10f70:	ldr	r0, [pc, #24]	; 10f90 <__assert_fail@plt+0x8c>
   10f74:	ldr	r3, [pc, #24]	; 10f94 <__assert_fail@plt+0x90>
   10f78:	cmp	r3, r0
   10f7c:	bxeq	lr
   10f80:	ldr	r3, [pc, #16]	; 10f98 <__assert_fail@plt+0x94>
   10f84:	cmp	r3, #0
   10f88:	bxeq	lr
   10f8c:	bx	r3
   10f90:	andeq	r7, r2, r0, lsr r1
   10f94:	andeq	r7, r2, r0, lsr r1
   10f98:	andeq	r0, r0, r0
   10f9c:	ldr	r0, [pc, #36]	; 10fc8 <__assert_fail@plt+0xc4>
   10fa0:	ldr	r1, [pc, #36]	; 10fcc <__assert_fail@plt+0xc8>
   10fa4:	sub	r1, r1, r0
   10fa8:	asr	r1, r1, #2
   10fac:	add	r1, r1, r1, lsr #31
   10fb0:	asrs	r1, r1, #1
   10fb4:	bxeq	lr
   10fb8:	ldr	r3, [pc, #16]	; 10fd0 <__assert_fail@plt+0xcc>
   10fbc:	cmp	r3, #0
   10fc0:	bxeq	lr
   10fc4:	bx	r3
   10fc8:	andeq	r7, r2, r0, lsr r1
   10fcc:	andeq	r7, r2, r0, lsr r1
   10fd0:	andeq	r0, r0, r0
   10fd4:	push	{r4, lr}
   10fd8:	ldr	r4, [pc, #24]	; 10ff8 <__assert_fail@plt+0xf4>
   10fdc:	ldrb	r3, [r4]
   10fe0:	cmp	r3, #0
   10fe4:	popne	{r4, pc}
   10fe8:	bl	10f70 <__assert_fail@plt+0x6c>
   10fec:	mov	r3, #1
   10ff0:	strb	r3, [r4]
   10ff4:	pop	{r4, pc}
   10ff8:	andeq	r7, r2, r4, asr r1
   10ffc:	b	10f9c <__assert_fail@plt+0x98>
   11000:	movw	r3, #29016	; 0x7158
   11004:	movt	r3, #2
   11008:	ldrb	r3, [r3]
   1100c:	cmp	r3, #0
   11010:	bne	11048 <__assert_fail@plt+0x144>
   11014:	cmp	r1, #8
   11018:	beq	11038 <__assert_fail@plt+0x134>
   1101c:	cmp	r1, #13
   11020:	beq	11050 <__assert_fail@plt+0x14c>
   11024:	cmp	r1, #9
   11028:	biceq	r0, r0, #7
   1102c:	addeq	r0, r0, #8
   11030:	addne	r0, r0, #1
   11034:	bx	lr
   11038:	cmp	r0, #0
   1103c:	beq	11054 <__assert_fail@plt+0x150>
   11040:	sub	r0, r0, #1
   11044:	bx	lr
   11048:	add	r0, r0, #1
   1104c:	bx	lr
   11050:	mov	r0, #0
   11054:	bx	lr
   11058:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1105c:	strd	r6, [sp, #8]
   11060:	strd	r8, [sp, #16]
   11064:	strd	sl, [sp, #24]
   11068:	str	lr, [sp, #32]
   1106c:	sub	sp, sp, #12
   11070:	str	r0, [sp, #4]
   11074:	mov	fp, r1
   11078:	movw	r1, #22692	; 0x58a4
   1107c:	movt	r1, #1
   11080:	bl	10cb8 <strcmp@plt>
   11084:	cmp	r0, #0
   11088:	bne	110e0 <__assert_fail@plt+0x1dc>
   1108c:	movw	r3, #29000	; 0x7148
   11090:	movt	r3, #2
   11094:	ldr	r8, [r3]
   11098:	movw	r3, #29016	; 0x7158
   1109c:	movt	r3, #2
   110a0:	mov	r2, #1
   110a4:	strb	r2, [r3, #1]
   110a8:	cmp	r8, #0
   110ac:	beq	110f8 <__assert_fail@plt+0x1f4>
   110b0:	mov	r1, #2
   110b4:	mov	r0, r8
   110b8:	bl	11bac <__assert_fail@plt+0xca8>
   110bc:	mov	r4, #0
   110c0:	mov	r5, r4
   110c4:	movw	r7, #29016	; 0x7158
   110c8:	movt	r7, #2
   110cc:	add	r3, r7, #4
   110d0:	str	r3, [sp]
   110d4:	movw	sl, #29004	; 0x714c
   110d8:	movt	sl, #2
   110dc:	b	111d4 <__assert_fail@plt+0x2d0>
   110e0:	movw	r1, #22696	; 0x58a8
   110e4:	movt	r1, #1
   110e8:	ldr	r0, [sp, #4]
   110ec:	bl	10ed4 <fopen64@plt>
   110f0:	mov	r8, r0
   110f4:	b	110a8 <__assert_fail@plt+0x1a4>
   110f8:	bl	10e2c <__errno_location@plt>
   110fc:	ldr	r4, [r0]
   11100:	ldr	r2, [sp, #4]
   11104:	mov	r1, #3
   11108:	mov	r0, #0
   1110c:	bl	13f08 <__assert_fail@plt+0x3004>
   11110:	mov	r3, r0
   11114:	movw	r2, #23712	; 0x5ca0
   11118:	movt	r2, #1
   1111c:	mov	r1, r4
   11120:	mov	r0, #0
   11124:	bl	10db4 <error@plt>
   11128:	mov	r0, #0
   1112c:	b	112f8 <__assert_fail@plt+0x3f4>
   11130:	ldr	r1, [sp]
   11134:	ldr	r0, [r7, #8]
   11138:	bl	148d8 <__assert_fail@plt+0x39d4>
   1113c:	str	r0, [r7, #8]
   11140:	b	11200 <__assert_fail@plt+0x2fc>
   11144:	ldr	r0, [r7, #8]
   11148:	mov	r3, #10
   1114c:	strb	r3, [r0, r4]
   11150:	ldr	r3, [sl]
   11154:	mov	r2, r9
   11158:	mov	r1, #1
   1115c:	bl	10d24 <fwrite_unlocked@plt>
   11160:	mov	r4, #0
   11164:	mov	r5, r4
   11168:	b	111d4 <__assert_fail@plt+0x2d0>
   1116c:	mov	r0, r4
   11170:	b	11210 <__assert_fail@plt+0x30c>
   11174:	cmp	r4, #0
   11178:	beq	111c4 <__assert_fail@plt+0x2c0>
   1117c:	bl	10dfc <__ctype_b_loc@plt>
   11180:	ldr	ip, [r0]
   11184:	ldr	r0, [r7, #8]
   11188:	add	r1, r0, r4
   1118c:	mov	r5, r4
   11190:	sub	r2, r5, #1
   11194:	ldrb	r3, [r1, #-1]!
   11198:	lsl	r3, r3, #1
   1119c:	ldrh	r3, [ip, r3]
   111a0:	tst	r3, #1
   111a4:	bne	11368 <__assert_fail@plt+0x464>
   111a8:	mov	r5, r2
   111ac:	cmp	r2, #0
   111b0:	bne	11190 <__assert_fail@plt+0x28c>
   111b4:	b	11234 <__assert_fail@plt+0x330>
   111b8:	mov	r1, #10
   111bc:	bl	10e98 <__overflow@plt>
   111c0:	b	1139c <__assert_fail@plt+0x498>
   111c4:	mov	r5, r0
   111c8:	ldr	r3, [r7, #8]
   111cc:	strb	r9, [r3]
   111d0:	mov	r4, #1
   111d4:	ldr	r3, [r8, #4]
   111d8:	ldr	r2, [r8, #8]
   111dc:	cmp	r3, r2
   111e0:	bcs	11270 <__assert_fail@plt+0x36c>
   111e4:	add	r2, r3, #1
   111e8:	str	r2, [r8, #4]
   111ec:	ldrb	r6, [r3]
   111f0:	add	r9, r4, #1
   111f4:	ldr	r3, [r7, #4]
   111f8:	cmp	r9, r3
   111fc:	bcs	11130 <__assert_fail@plt+0x22c>
   11200:	cmp	r6, #10
   11204:	uxtbne	r9, r6
   11208:	movne	r0, r5
   1120c:	beq	11144 <__assert_fail@plt+0x240>
   11210:	mov	r1, r9
   11214:	bl	11000 <__assert_fail@plt+0xfc>
   11218:	cmp	r0, fp
   1121c:	bls	1125c <__assert_fail@plt+0x358>
   11220:	ldrb	r3, [r7, #12]
   11224:	cmp	r3, #0
   11228:	bne	11174 <__assert_fail@plt+0x270>
   1122c:	cmp	r4, #0
   11230:	beq	111c4 <__assert_fail@plt+0x2c0>
   11234:	ldr	r0, [r7, #8]
   11238:	mov	r3, #10
   1123c:	strb	r3, [r0, r4]
   11240:	ldr	r3, [sl]
   11244:	add	r2, r4, #1
   11248:	mov	r1, #1
   1124c:	bl	10d24 <fwrite_unlocked@plt>
   11250:	mov	r4, #0
   11254:	mov	r0, r4
   11258:	b	11210 <__assert_fail@plt+0x30c>
   1125c:	mov	r5, r0
   11260:	ldr	r3, [r7, #8]
   11264:	strb	r9, [r3, r4]
   11268:	add	r4, r4, #1
   1126c:	b	111d4 <__assert_fail@plt+0x2d0>
   11270:	mov	r0, r8
   11274:	bl	10e8c <__uflow@plt>
   11278:	mov	r6, r0
   1127c:	cmn	r0, #1
   11280:	bne	111f0 <__assert_fail@plt+0x2ec>
   11284:	bl	10e2c <__errno_location@plt>
   11288:	mov	r6, r0
   1128c:	ldr	r5, [r0]
   11290:	ldr	r3, [r8]
   11294:	and	r3, r3, #32
   11298:	cmp	r3, #0
   1129c:	moveq	r5, r3
   112a0:	cmp	r4, #0
   112a4:	beq	112cc <__assert_fail@plt+0x3c8>
   112a8:	movw	r3, #29004	; 0x714c
   112ac:	movt	r3, #2
   112b0:	movw	r0, #29016	; 0x7158
   112b4:	movt	r0, #2
   112b8:	ldr	r3, [r3]
   112bc:	mov	r2, r4
   112c0:	mov	r1, #1
   112c4:	ldr	r0, [r0, #8]
   112c8:	bl	10d24 <fwrite_unlocked@plt>
   112cc:	movw	r1, #22692	; 0x58a4
   112d0:	movt	r1, #1
   112d4:	ldr	r0, [sp, #4]
   112d8:	bl	10cb8 <strcmp@plt>
   112dc:	cmp	r0, #0
   112e0:	bne	11314 <__assert_fail@plt+0x410>
   112e4:	mov	r0, r8
   112e8:	bl	10ec8 <clearerr_unlocked@plt>
   112ec:	cmp	r5, #0
   112f0:	moveq	r0, #1
   112f4:	bne	11338 <__assert_fail@plt+0x434>
   112f8:	add	sp, sp, #12
   112fc:	ldrd	r4, [sp]
   11300:	ldrd	r6, [sp, #8]
   11304:	ldrd	r8, [sp, #16]
   11308:	ldrd	sl, [sp, #24]
   1130c:	add	sp, sp, #32
   11310:	pop	{pc}		; (ldr pc, [sp], #4)
   11314:	mov	r0, r8
   11318:	bl	11bec <__assert_fail@plt+0xce8>
   1131c:	adds	r0, r0, #0
   11320:	movne	r0, #1
   11324:	cmp	r5, #0
   11328:	movne	r0, #0
   1132c:	cmp	r0, #0
   11330:	ldrne	r5, [r6]
   11334:	b	112ec <__assert_fail@plt+0x3e8>
   11338:	ldr	r2, [sp, #4]
   1133c:	mov	r1, #3
   11340:	mov	r0, #0
   11344:	bl	13f08 <__assert_fail@plt+0x3004>
   11348:	mov	r3, r0
   1134c:	movw	r2, #23712	; 0x5ca0
   11350:	movt	r2, #1
   11354:	mov	r1, r5
   11358:	mov	r0, #0
   1135c:	bl	10db4 <error@plt>
   11360:	mov	r0, #0
   11364:	b	112f8 <__assert_fail@plt+0x3f4>
   11368:	ldr	r3, [sl]
   1136c:	mov	r2, r5
   11370:	mov	r1, #1
   11374:	bl	10d24 <fwrite_unlocked@plt>
   11378:	ldr	r0, [sl]
   1137c:	ldr	r3, [r0, #20]
   11380:	ldr	r2, [r0, #24]
   11384:	cmp	r3, r2
   11388:	addcc	r2, r3, #1
   1138c:	strcc	r2, [r0, #20]
   11390:	movcc	r2, #10
   11394:	strbcc	r2, [r3]
   11398:	bcs	111b8 <__assert_fail@plt+0x2b4>
   1139c:	ldr	r6, [r7, #8]
   113a0:	sub	r4, r4, r5
   113a4:	mov	r2, r4
   113a8:	add	r1, r6, r5
   113ac:	mov	r0, r6
   113b0:	bl	10cdc <memmove@plt>
   113b4:	cmp	r4, #0
   113b8:	beq	1116c <__assert_fail@plt+0x268>
   113bc:	sub	r6, r6, #1
   113c0:	add	r5, r6, r4
   113c4:	mov	r0, #0
   113c8:	ldrb	r1, [r6, #1]!
   113cc:	bl	11000 <__assert_fail@plt+0xfc>
   113d0:	cmp	r6, r5
   113d4:	bne	113c8 <__assert_fail@plt+0x4c4>
   113d8:	b	11210 <__assert_fail@plt+0x30c>
   113dc:	push	{lr}		; (str lr, [sp, #-4]!)
   113e0:	sub	sp, sp, #60	; 0x3c
   113e4:	subs	r4, r0, #0
   113e8:	beq	11430 <__assert_fail@plt+0x52c>
   113ec:	movw	r3, #28992	; 0x7140
   113f0:	movt	r3, #2
   113f4:	ldr	r5, [r3]
   113f8:	mov	r2, #5
   113fc:	movw	r1, #22708	; 0x58b4
   11400:	movt	r1, #1
   11404:	mov	r0, #0
   11408:	bl	10d48 <dcgettext@plt>
   1140c:	movw	r3, #29040	; 0x7170
   11410:	movt	r3, #2
   11414:	ldr	r3, [r3]
   11418:	mov	r2, r0
   1141c:	mov	r1, #1
   11420:	mov	r0, r5
   11424:	bl	10e68 <__fprintf_chk@plt>
   11428:	mov	r0, r4
   1142c:	bl	10e08 <exit@plt>
   11430:	mov	r2, #5
   11434:	movw	r1, #22748	; 0x58dc
   11438:	movt	r1, #1
   1143c:	mov	r0, #0
   11440:	bl	10d48 <dcgettext@plt>
   11444:	movw	r3, #29040	; 0x7170
   11448:	movt	r3, #2
   1144c:	ldr	r2, [r3]
   11450:	mov	r1, r0
   11454:	mov	r0, #1
   11458:	bl	10e50 <__printf_chk@plt>
   1145c:	mov	r2, #5
   11460:	movw	r1, #22784	; 0x5900
   11464:	movt	r1, #1
   11468:	mov	r0, #0
   1146c:	bl	10d48 <dcgettext@plt>
   11470:	movw	r5, #29004	; 0x714c
   11474:	movt	r5, #2
   11478:	ldr	r1, [r5]
   1147c:	bl	10cac <fputs_unlocked@plt>
   11480:	mov	r2, #5
   11484:	movw	r1, #22844	; 0x593c
   11488:	movt	r1, #1
   1148c:	mov	r0, #0
   11490:	bl	10d48 <dcgettext@plt>
   11494:	ldr	r1, [r5]
   11498:	bl	10cac <fputs_unlocked@plt>
   1149c:	mov	r2, #5
   114a0:	movw	r1, #22900	; 0x5974
   114a4:	movt	r1, #1
   114a8:	mov	r0, #0
   114ac:	bl	10d48 <dcgettext@plt>
   114b0:	ldr	r1, [r5]
   114b4:	bl	10cac <fputs_unlocked@plt>
   114b8:	mov	r2, #5
   114bc:	movw	r1, #22976	; 0x59c0
   114c0:	movt	r1, #1
   114c4:	mov	r0, #0
   114c8:	bl	10d48 <dcgettext@plt>
   114cc:	ldr	r1, [r5]
   114d0:	bl	10cac <fputs_unlocked@plt>
   114d4:	mov	r2, #5
   114d8:	movw	r1, #23124	; 0x5a54
   114dc:	movt	r1, #1
   114e0:	mov	r0, #0
   114e4:	bl	10d48 <dcgettext@plt>
   114e8:	ldr	r1, [r5]
   114ec:	bl	10cac <fputs_unlocked@plt>
   114f0:	mov	r2, #5
   114f4:	movw	r1, #23172	; 0x5a84
   114f8:	movt	r1, #1
   114fc:	mov	r0, #0
   11500:	bl	10d48 <dcgettext@plt>
   11504:	ldr	r1, [r5]
   11508:	bl	10cac <fputs_unlocked@plt>
   1150c:	movw	r0, #22504	; 0x57e8
   11510:	movt	r0, #1
   11514:	ldr	r1, [r0]
   11518:	ldr	r3, [r0, #4]
   1151c:	str	r1, [sp]
   11520:	str	r3, [sp, #4]
   11524:	ldrd	r2, [r0, #8]
   11528:	strd	r2, [sp, #8]
   1152c:	ldrd	r2, [r0, #16]
   11530:	strd	r2, [sp, #16]
   11534:	ldrd	r2, [r0, #24]
   11538:	strd	r2, [sp, #24]
   1153c:	ldrd	r2, [r0, #32]
   11540:	strd	r2, [sp, #32]
   11544:	ldrd	r2, [r0, #40]	; 0x28
   11548:	strd	r2, [sp, #40]	; 0x28
   1154c:	ldrd	r2, [r0, #48]	; 0x30
   11550:	strd	r2, [sp, #48]	; 0x30
   11554:	cmp	r1, #0
   11558:	moveq	r5, sp
   1155c:	beq	11588 <__assert_fail@plt+0x684>
   11560:	mov	r5, sp
   11564:	movw	r6, #22700	; 0x58ac
   11568:	movt	r6, #1
   1156c:	mov	r0, r6
   11570:	bl	10cb8 <strcmp@plt>
   11574:	cmp	r0, #0
   11578:	beq	11588 <__assert_fail@plt+0x684>
   1157c:	ldr	r1, [r5, #8]!
   11580:	cmp	r1, #0
   11584:	bne	1156c <__assert_fail@plt+0x668>
   11588:	ldr	r5, [r5, #4]
   1158c:	cmp	r5, #0
   11590:	beq	116ec <__assert_fail@plt+0x7e8>
   11594:	mov	r2, #5
   11598:	movw	r1, #23228	; 0x5abc
   1159c:	movt	r1, #1
   115a0:	mov	r0, #0
   115a4:	bl	10d48 <dcgettext@plt>
   115a8:	movw	r3, #23252	; 0x5ad4
   115ac:	movt	r3, #1
   115b0:	movw	r2, #23292	; 0x5afc
   115b4:	movt	r2, #1
   115b8:	mov	r1, r0
   115bc:	mov	r0, #1
   115c0:	bl	10e50 <__printf_chk@plt>
   115c4:	mov	r1, #0
   115c8:	mov	r0, #5
   115cc:	bl	10ea4 <setlocale@plt>
   115d0:	cmp	r0, #0
   115d4:	beq	115f0 <__assert_fail@plt+0x6ec>
   115d8:	mov	r2, #3
   115dc:	movw	r1, #23308	; 0x5b0c
   115e0:	movt	r1, #1
   115e4:	bl	10eec <strncmp@plt>
   115e8:	cmp	r0, #0
   115ec:	bne	1166c <__assert_fail@plt+0x768>
   115f0:	mov	r2, #5
   115f4:	movw	r1, #23384	; 0x5b58
   115f8:	movt	r1, #1
   115fc:	mov	r0, #0
   11600:	bl	10d48 <dcgettext@plt>
   11604:	movw	r6, #22700	; 0x58ac
   11608:	movt	r6, #1
   1160c:	mov	r3, r6
   11610:	movw	r2, #23252	; 0x5ad4
   11614:	movt	r2, #1
   11618:	mov	r1, r0
   1161c:	mov	r0, #1
   11620:	bl	10e50 <__printf_chk@plt>
   11624:	mov	r2, #5
   11628:	movw	r1, #23412	; 0x5b74
   1162c:	movt	r1, #1
   11630:	mov	r0, #0
   11634:	bl	10d48 <dcgettext@plt>
   11638:	mov	r1, r0
   1163c:	movw	r2, #23540	; 0x5bf4
   11640:	movt	r2, #1
   11644:	movw	r3, #22780	; 0x58fc
   11648:	movt	r3, #1
   1164c:	cmp	r5, r6
   11650:	moveq	r3, r2
   11654:	mov	r2, r5
   11658:	mov	r0, #1
   1165c:	bl	10e50 <__printf_chk@plt>
   11660:	b	11428 <__assert_fail@plt+0x524>
   11664:	movw	r5, #22700	; 0x58ac
   11668:	movt	r5, #1
   1166c:	mov	r2, #5
   11670:	movw	r1, #23312	; 0x5b10
   11674:	movt	r1, #1
   11678:	mov	r0, #0
   1167c:	bl	10d48 <dcgettext@plt>
   11680:	movw	r3, #29004	; 0x714c
   11684:	movt	r3, #2
   11688:	ldr	r1, [r3]
   1168c:	bl	10cac <fputs_unlocked@plt>
   11690:	b	115f0 <__assert_fail@plt+0x6ec>
   11694:	mov	r2, #5
   11698:	movw	r1, #23384	; 0x5b58
   1169c:	movt	r1, #1
   116a0:	mov	r0, #0
   116a4:	bl	10d48 <dcgettext@plt>
   116a8:	movw	r5, #22700	; 0x58ac
   116ac:	movt	r5, #1
   116b0:	mov	r3, r5
   116b4:	movw	r2, #23252	; 0x5ad4
   116b8:	movt	r2, #1
   116bc:	mov	r1, r0
   116c0:	mov	r0, #1
   116c4:	bl	10e50 <__printf_chk@plt>
   116c8:	mov	r2, #5
   116cc:	movw	r1, #23412	; 0x5b74
   116d0:	movt	r1, #1
   116d4:	mov	r0, #0
   116d8:	bl	10d48 <dcgettext@plt>
   116dc:	mov	r1, r0
   116e0:	movw	r3, #23540	; 0x5bf4
   116e4:	movt	r3, #1
   116e8:	b	11654 <__assert_fail@plt+0x750>
   116ec:	mov	r2, #5
   116f0:	movw	r1, #23228	; 0x5abc
   116f4:	movt	r1, #1
   116f8:	mov	r0, #0
   116fc:	bl	10d48 <dcgettext@plt>
   11700:	movw	r3, #23252	; 0x5ad4
   11704:	movt	r3, #1
   11708:	movw	r2, #23292	; 0x5afc
   1170c:	movt	r2, #1
   11710:	mov	r1, r0
   11714:	mov	r0, #1
   11718:	bl	10e50 <__printf_chk@plt>
   1171c:	mov	r1, #0
   11720:	mov	r0, #5
   11724:	bl	10ea4 <setlocale@plt>
   11728:	cmp	r0, #0
   1172c:	beq	11694 <__assert_fail@plt+0x790>
   11730:	mov	r2, #3
   11734:	movw	r1, #23308	; 0x5b0c
   11738:	movt	r1, #1
   1173c:	bl	10eec <strncmp@plt>
   11740:	cmp	r0, #0
   11744:	bne	11664 <__assert_fail@plt+0x760>
   11748:	mov	r2, #5
   1174c:	movw	r1, #23384	; 0x5b58
   11750:	movt	r1, #1
   11754:	mov	r0, #0
   11758:	bl	10d48 <dcgettext@plt>
   1175c:	movw	r5, #22700	; 0x58ac
   11760:	movt	r5, #1
   11764:	mov	r3, r5
   11768:	movw	r2, #23252	; 0x5ad4
   1176c:	movt	r2, #1
   11770:	mov	r1, r0
   11774:	mov	r0, #1
   11778:	bl	10e50 <__printf_chk@plt>
   1177c:	mov	r2, #5
   11780:	movw	r1, #23412	; 0x5b74
   11784:	movt	r1, #1
   11788:	mov	r0, #0
   1178c:	bl	10d48 <dcgettext@plt>
   11790:	mov	r1, r0
   11794:	movw	r3, #23540	; 0x5bf4
   11798:	movt	r3, #1
   1179c:	b	11654 <__assert_fail@plt+0x750>
   117a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   117a4:	strd	r6, [sp, #8]
   117a8:	strd	r8, [sp, #16]
   117ac:	str	lr, [sp, #24]
   117b0:	sub	sp, sp, #36	; 0x24
   117b4:	mov	r7, r0
   117b8:	mov	r5, r1
   117bc:	ldr	r0, [r1]
   117c0:	bl	11dd8 <__assert_fail@plt+0xed4>
   117c4:	movw	r1, #22780	; 0x58fc
   117c8:	movt	r1, #1
   117cc:	mov	r0, #6
   117d0:	bl	10ea4 <setlocale@plt>
   117d4:	movw	r4, #23296	; 0x5b00
   117d8:	movt	r4, #1
   117dc:	movw	r1, #23464	; 0x5ba8
   117e0:	movt	r1, #1
   117e4:	mov	r0, r4
   117e8:	bl	10ee0 <bindtextdomain@plt>
   117ec:	mov	r0, r4
   117f0:	bl	10d60 <textdomain@plt>
   117f4:	movw	r0, #6764	; 0x1a6c
   117f8:	movt	r0, #1
   117fc:	bl	157c4 <__assert_fail@plt+0x48c0>
   11800:	movw	r3, #29016	; 0x7158
   11804:	movt	r3, #2
   11808:	mov	r2, #0
   1180c:	strb	r2, [r3, #1]
   11810:	strb	r2, [r3]
   11814:	strb	r2, [r3, #12]
   11818:	mov	r8, #80	; 0x50
   1181c:	movw	r4, #22504	; 0x57e8
   11820:	movt	r4, #1
   11824:	add	r9, r4, #56	; 0x38
   11828:	movw	r6, #29008	; 0x7150
   1182c:	movt	r6, #2
   11830:	b	11928 <__assert_fail@plt+0xa24>
   11834:	cmp	r0, #48	; 0x30
   11838:	bge	118c4 <__assert_fail@plt+0x9c0>
   1183c:	cmn	r0, #3
   11840:	bne	1188c <__assert_fail@plt+0x988>
   11844:	movw	r3, #28904	; 0x70e8
   11848:	movt	r3, #2
   1184c:	movw	r0, #29004	; 0x714c
   11850:	movt	r0, #2
   11854:	mov	r4, #0
   11858:	str	r4, [sp, #4]
   1185c:	movw	r2, #23516	; 0x5bdc
   11860:	movt	r2, #1
   11864:	str	r2, [sp]
   11868:	ldr	r3, [r3]
   1186c:	movw	r2, #23292	; 0x5afc
   11870:	movt	r2, #1
   11874:	movw	r1, #22700	; 0x58ac
   11878:	movt	r1, #1
   1187c:	ldr	r0, [r0]
   11880:	bl	145d0 <__assert_fail@plt+0x36cc>
   11884:	mov	r0, r4
   11888:	bl	10e08 <exit@plt>
   1188c:	cmn	r0, #2
   11890:	bne	1196c <__assert_fail@plt+0xa68>
   11894:	mov	r0, #0
   11898:	bl	113dc <__assert_fail@plt+0x4d8>
   1189c:	movw	r3, #29016	; 0x7158
   118a0:	movt	r3, #2
   118a4:	mov	r2, #1
   118a8:	strb	r2, [r3]
   118ac:	b	11928 <__assert_fail@plt+0xa24>
   118b0:	movw	r3, #29016	; 0x7158
   118b4:	movt	r3, #2
   118b8:	mov	r2, #1
   118bc:	strb	r2, [r3, #12]
   118c0:	b	11928 <__assert_fail@plt+0xa24>
   118c4:	ldr	r3, [r6]
   118c8:	cmp	r3, #0
   118cc:	beq	11974 <__assert_fail@plt+0xa70>
   118d0:	sub	r3, r3, #1
   118d4:	str	r3, [r6]
   118d8:	ldr	r8, [r6]
   118dc:	mov	r2, #5
   118e0:	movw	r1, #23488	; 0x5bc0
   118e4:	movt	r1, #1
   118e8:	mov	r0, #0
   118ec:	bl	10d48 <dcgettext@plt>
   118f0:	mov	r3, #0
   118f4:	str	r3, [sp, #16]
   118f8:	str	r0, [sp, #12]
   118fc:	movw	r3, #22780	; 0x58fc
   11900:	movt	r3, #1
   11904:	str	r3, [sp, #8]
   11908:	mvn	r2, #9
   1190c:	mov	r3, #0
   11910:	strd	r2, [sp]
   11914:	mov	r2, #1
   11918:	mov	r3, #0
   1191c:	mov	r0, r8
   11920:	bl	14ca4 <__assert_fail@plt+0x3da0>
   11924:	mov	r8, r0
   11928:	mov	r3, #0
   1192c:	str	r3, [sp]
   11930:	mov	r3, r9
   11934:	add	r2, r4, #152	; 0x98
   11938:	mov	r1, r5
   1193c:	mov	r0, r7
   11940:	bl	10df0 <getopt_long@plt>
   11944:	cmn	r0, #1
   11948:	beq	1198c <__assert_fail@plt+0xa88>
   1194c:	cmp	r0, #57	; 0x39
   11950:	ble	11834 <__assert_fail@plt+0x930>
   11954:	cmp	r0, #115	; 0x73
   11958:	beq	118b0 <__assert_fail@plt+0x9ac>
   1195c:	cmp	r0, #119	; 0x77
   11960:	beq	118d8 <__assert_fail@plt+0x9d4>
   11964:	cmp	r0, #98	; 0x62
   11968:	beq	1189c <__assert_fail@plt+0x998>
   1196c:	mov	r0, #1
   11970:	bl	113dc <__assert_fail@plt+0x4d8>
   11974:	strb	r0, [sp, #28]
   11978:	mov	r3, #0
   1197c:	strb	r3, [sp, #29]
   11980:	add	r3, sp, #28
   11984:	str	r3, [r6]
   11988:	b	118d8 <__assert_fail@plt+0x9d4>
   1198c:	movw	r3, #28984	; 0x7138
   11990:	movt	r3, #2
   11994:	ldr	r6, [r3]
   11998:	cmp	r6, r7
   1199c:	beq	11a04 <__assert_fail@plt+0xb00>
   119a0:	movge	r4, #1
   119a4:	bge	119d0 <__assert_fail@plt+0xacc>
   119a8:	add	r6, r5, r6, lsl #2
   119ac:	add	r5, r5, r7, lsl #2
   119b0:	mov	r4, #1
   119b4:	mov	r1, r8
   119b8:	ldr	r0, [r6], #4
   119bc:	bl	11058 <__assert_fail@plt+0x154>
   119c0:	and	r4, r4, r0
   119c4:	uxtb	r4, r4
   119c8:	cmp	r6, r5
   119cc:	bne	119b4 <__assert_fail@plt+0xab0>
   119d0:	movw	r3, #29016	; 0x7158
   119d4:	movt	r3, #2
   119d8:	ldrb	r3, [r3, #1]
   119dc:	cmp	r3, #0
   119e0:	bne	11a1c <__assert_fail@plt+0xb18>
   119e4:	eor	r0, r4, #1
   119e8:	uxtb	r0, r0
   119ec:	add	sp, sp, #36	; 0x24
   119f0:	ldrd	r4, [sp]
   119f4:	ldrd	r6, [sp, #8]
   119f8:	ldrd	r8, [sp, #16]
   119fc:	add	sp, sp, #24
   11a00:	pop	{pc}		; (ldr pc, [sp], #4)
   11a04:	mov	r1, r8
   11a08:	movw	r0, #22692	; 0x58a4
   11a0c:	movt	r0, #1
   11a10:	bl	11058 <__assert_fail@plt+0x154>
   11a14:	mov	r4, r0
   11a18:	b	119d0 <__assert_fail@plt+0xacc>
   11a1c:	movw	r3, #29000	; 0x7148
   11a20:	movt	r3, #2
   11a24:	ldr	r0, [r3]
   11a28:	bl	11bec <__assert_fail@plt+0xce8>
   11a2c:	cmn	r0, #1
   11a30:	bne	119e4 <__assert_fail@plt+0xae0>
   11a34:	bl	10e2c <__errno_location@plt>
   11a38:	movw	r2, #22692	; 0x58a4
   11a3c:	movt	r2, #1
   11a40:	ldr	r1, [r0]
   11a44:	mov	r0, #1
   11a48:	bl	10db4 <error@plt>
   11a4c:	movw	r3, #29032	; 0x7168
   11a50:	movt	r3, #2
   11a54:	str	r0, [r3]
   11a58:	bx	lr
   11a5c:	movw	r3, #29032	; 0x7168
   11a60:	movt	r3, #2
   11a64:	strb	r0, [r3, #4]
   11a68:	bx	lr
   11a6c:	strd	r4, [sp, #-16]!
   11a70:	str	r6, [sp, #8]
   11a74:	str	lr, [sp, #12]
   11a78:	sub	sp, sp, #8
   11a7c:	movw	r3, #29004	; 0x714c
   11a80:	movt	r3, #2
   11a84:	ldr	r0, [r3]
   11a88:	bl	15468 <__assert_fail@plt+0x4564>
   11a8c:	cmp	r0, #0
   11a90:	beq	11ab8 <__assert_fail@plt+0xbb4>
   11a94:	movw	r3, #29032	; 0x7168
   11a98:	movt	r3, #2
   11a9c:	ldrb	r3, [r3, #4]
   11aa0:	cmp	r3, #0
   11aa4:	beq	11ae4 <__assert_fail@plt+0xbe0>
   11aa8:	bl	10e2c <__errno_location@plt>
   11aac:	ldr	r3, [r0]
   11ab0:	cmp	r3, #32
   11ab4:	bne	11ae4 <__assert_fail@plt+0xbe0>
   11ab8:	movw	r3, #28992	; 0x7140
   11abc:	movt	r3, #2
   11ac0:	ldr	r0, [r3]
   11ac4:	bl	15468 <__assert_fail@plt+0x4564>
   11ac8:	cmp	r0, #0
   11acc:	bne	11b6c <__assert_fail@plt+0xc68>
   11ad0:	add	sp, sp, #8
   11ad4:	ldrd	r4, [sp]
   11ad8:	ldr	r6, [sp, #8]
   11adc:	add	sp, sp, #12
   11ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ae4:	mov	r2, #5
   11ae8:	movw	r1, #23696	; 0x5c90
   11aec:	movt	r1, #1
   11af0:	mov	r0, #0
   11af4:	bl	10d48 <dcgettext@plt>
   11af8:	mov	r4, r0
   11afc:	movw	r3, #29032	; 0x7168
   11b00:	movt	r3, #2
   11b04:	ldr	r5, [r3]
   11b08:	cmp	r5, #0
   11b0c:	beq	11b4c <__assert_fail@plt+0xc48>
   11b10:	bl	10e2c <__errno_location@plt>
   11b14:	ldr	r6, [r0]
   11b18:	mov	r0, r5
   11b1c:	bl	13ed0 <__assert_fail@plt+0x2fcc>
   11b20:	str	r4, [sp]
   11b24:	mov	r3, r0
   11b28:	movw	r2, #23708	; 0x5c9c
   11b2c:	movt	r2, #1
   11b30:	mov	r1, r6
   11b34:	mov	r0, #0
   11b38:	bl	10db4 <error@plt>
   11b3c:	movw	r3, #28908	; 0x70ec
   11b40:	movt	r3, #2
   11b44:	ldr	r0, [r3]
   11b48:	bl	10cf4 <_exit@plt>
   11b4c:	bl	10e2c <__errno_location@plt>
   11b50:	mov	r3, r4
   11b54:	movw	r2, #23712	; 0x5ca0
   11b58:	movt	r2, #1
   11b5c:	ldr	r1, [r0]
   11b60:	mov	r0, #0
   11b64:	bl	10db4 <error@plt>
   11b68:	b	11b3c <__assert_fail@plt+0xc38>
   11b6c:	movw	r3, #28908	; 0x70ec
   11b70:	movt	r3, #2
   11b74:	ldr	r0, [r3]
   11b78:	bl	10cf4 <_exit@plt>
   11b7c:	strd	r4, [sp, #-12]!
   11b80:	str	lr, [sp, #8]
   11b84:	sub	sp, sp, #20
   11b88:	ldr	r1, [sp, #40]	; 0x28
   11b8c:	str	r1, [sp, #8]
   11b90:	ldrd	r4, [sp, #32]
   11b94:	strd	r4, [sp]
   11b98:	bl	10cc4 <posix_fadvise64@plt>
   11b9c:	add	sp, sp, #20
   11ba0:	ldrd	r4, [sp]
   11ba4:	add	sp, sp, #8
   11ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bac:	cmp	r0, #0
   11bb0:	bxeq	lr
   11bb4:	str	r4, [sp, #-8]!
   11bb8:	str	lr, [sp, #4]
   11bbc:	sub	sp, sp, #16
   11bc0:	mov	r4, r1
   11bc4:	bl	10e5c <fileno@plt>
   11bc8:	str	r4, [sp, #8]
   11bcc:	mov	r2, #0
   11bd0:	mov	r3, #0
   11bd4:	strd	r2, [sp]
   11bd8:	bl	10cc4 <posix_fadvise64@plt>
   11bdc:	add	sp, sp, #16
   11be0:	ldr	r4, [sp]
   11be4:	add	sp, sp, #4
   11be8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bec:	strd	r4, [sp, #-16]!
   11bf0:	str	r6, [sp, #8]
   11bf4:	str	lr, [sp, #12]
   11bf8:	sub	sp, sp, #8
   11bfc:	mov	r4, r0
   11c00:	bl	10e5c <fileno@plt>
   11c04:	cmp	r0, #0
   11c08:	blt	11c80 <__assert_fail@plt+0xd7c>
   11c0c:	mov	r0, r4
   11c10:	bl	10dd8 <__freading@plt>
   11c14:	cmp	r0, #0
   11c18:	beq	11c4c <__assert_fail@plt+0xd48>
   11c1c:	mov	r0, r4
   11c20:	bl	10e5c <fileno@plt>
   11c24:	mov	r3, #1
   11c28:	str	r3, [sp]
   11c2c:	mov	r2, #0
   11c30:	mov	r3, #0
   11c34:	bl	10d84 <lseek64@plt>
   11c38:	mvn	r2, #0
   11c3c:	mvn	r3, #0
   11c40:	cmp	r1, r3
   11c44:	cmpeq	r0, r2
   11c48:	beq	11c8c <__assert_fail@plt+0xd88>
   11c4c:	mov	r0, r4
   11c50:	bl	11ca8 <__assert_fail@plt+0xda4>
   11c54:	cmp	r0, #0
   11c58:	beq	11c8c <__assert_fail@plt+0xd88>
   11c5c:	bl	10e2c <__errno_location@plt>
   11c60:	mov	r5, r0
   11c64:	ldr	r6, [r0]
   11c68:	mov	r0, r4
   11c6c:	bl	10e74 <fclose@plt>
   11c70:	cmp	r6, #0
   11c74:	strne	r6, [r5]
   11c78:	mvnne	r0, #0
   11c7c:	b	11c94 <__assert_fail@plt+0xd90>
   11c80:	mov	r0, r4
   11c84:	bl	10e74 <fclose@plt>
   11c88:	b	11c94 <__assert_fail@plt+0xd90>
   11c8c:	mov	r0, r4
   11c90:	bl	10e74 <fclose@plt>
   11c94:	add	sp, sp, #8
   11c98:	ldrd	r4, [sp]
   11c9c:	ldr	r6, [sp, #8]
   11ca0:	add	sp, sp, #12
   11ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ca8:	str	r4, [sp, #-8]!
   11cac:	str	lr, [sp, #4]
   11cb0:	sub	sp, sp, #8
   11cb4:	subs	r4, r0, #0
   11cb8:	beq	11ccc <__assert_fail@plt+0xdc8>
   11cbc:	mov	r0, r4
   11cc0:	bl	10dd8 <__freading@plt>
   11cc4:	cmp	r0, #0
   11cc8:	bne	11ce4 <__assert_fail@plt+0xde0>
   11ccc:	mov	r0, r4
   11cd0:	bl	10cd0 <fflush@plt>
   11cd4:	add	sp, sp, #8
   11cd8:	ldr	r4, [sp]
   11cdc:	add	sp, sp, #4
   11ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ce4:	ldr	r3, [r4]
   11ce8:	tst	r3, #256	; 0x100
   11cec:	bne	11cfc <__assert_fail@plt+0xdf8>
   11cf0:	mov	r0, r4
   11cf4:	bl	10cd0 <fflush@plt>
   11cf8:	b	11cd4 <__assert_fail@plt+0xdd0>
   11cfc:	mov	r3, #1
   11d00:	str	r3, [sp]
   11d04:	mov	r2, #0
   11d08:	mov	r3, #0
   11d0c:	mov	r0, r4
   11d10:	bl	11d18 <__assert_fail@plt+0xe14>
   11d14:	b	11cf0 <__assert_fail@plt+0xdec>
   11d18:	str	r4, [sp, #-16]!
   11d1c:	strd	r6, [sp, #4]
   11d20:	str	lr, [sp, #12]
   11d24:	sub	sp, sp, #8
   11d28:	mov	r4, r0
   11d2c:	mov	r6, r2
   11d30:	mov	r7, r3
   11d34:	ldr	r2, [r0, #8]
   11d38:	ldr	r3, [r0, #4]
   11d3c:	cmp	r2, r3
   11d40:	beq	11d70 <__assert_fail@plt+0xe6c>
   11d44:	ldr	r3, [sp, #24]
   11d48:	str	r3, [sp]
   11d4c:	mov	r2, r6
   11d50:	mov	r3, r7
   11d54:	mov	r0, r4
   11d58:	bl	10e80 <fseeko64@plt>
   11d5c:	add	sp, sp, #8
   11d60:	ldr	r4, [sp]
   11d64:	ldrd	r6, [sp, #4]
   11d68:	add	sp, sp, #12
   11d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d70:	ldr	r2, [r0, #20]
   11d74:	ldr	r3, [r0, #16]
   11d78:	cmp	r2, r3
   11d7c:	bne	11d44 <__assert_fail@plt+0xe40>
   11d80:	ldr	r3, [r0, #36]	; 0x24
   11d84:	cmp	r3, #0
   11d88:	bne	11d44 <__assert_fail@plt+0xe40>
   11d8c:	bl	10e5c <fileno@plt>
   11d90:	ldr	r3, [sp, #24]
   11d94:	str	r3, [sp]
   11d98:	mov	r2, r6
   11d9c:	mov	r3, r7
   11da0:	bl	10d84 <lseek64@plt>
   11da4:	mvn	r2, #0
   11da8:	mvn	r3, #0
   11dac:	cmp	r1, r3
   11db0:	cmpeq	r0, r2
   11db4:	beq	11dd0 <__assert_fail@plt+0xecc>
   11db8:	ldr	r3, [r4]
   11dbc:	bic	r3, r3, #16
   11dc0:	str	r3, [r4]
   11dc4:	strd	r0, [r4, #80]	; 0x50
   11dc8:	mov	r0, #0
   11dcc:	b	11d5c <__assert_fail@plt+0xe58>
   11dd0:	mvn	r0, #0
   11dd4:	b	11d5c <__assert_fail@plt+0xe58>
   11dd8:	strd	r4, [sp, #-16]!
   11ddc:	str	r6, [sp, #8]
   11de0:	str	lr, [sp, #12]
   11de4:	subs	r4, r0, #0
   11de8:	beq	11e84 <__assert_fail@plt+0xf80>
   11dec:	mov	r1, #47	; 0x2f
   11df0:	mov	r0, r4
   11df4:	bl	10eb0 <strrchr@plt>
   11df8:	subs	r5, r0, #0
   11dfc:	beq	11e5c <__assert_fail@plt+0xf58>
   11e00:	add	r6, r5, #1
   11e04:	sub	r3, r6, r4
   11e08:	cmp	r3, #6
   11e0c:	ble	11e5c <__assert_fail@plt+0xf58>
   11e10:	mov	r2, #7
   11e14:	movw	r1, #23772	; 0x5cdc
   11e18:	movt	r1, #1
   11e1c:	sub	r0, r5, #6
   11e20:	bl	10eec <strncmp@plt>
   11e24:	cmp	r0, #0
   11e28:	bne	11e5c <__assert_fail@plt+0xf58>
   11e2c:	mov	r2, #3
   11e30:	movw	r1, #23780	; 0x5ce4
   11e34:	movt	r1, #1
   11e38:	mov	r0, r6
   11e3c:	bl	10eec <strncmp@plt>
   11e40:	cmp	r0, #0
   11e44:	movne	r4, r6
   11e48:	bne	11e5c <__assert_fail@plt+0xf58>
   11e4c:	add	r4, r5, #4
   11e50:	movw	r3, #28976	; 0x7130
   11e54:	movt	r3, #2
   11e58:	str	r4, [r3]
   11e5c:	movw	r3, #29040	; 0x7170
   11e60:	movt	r3, #2
   11e64:	str	r4, [r3]
   11e68:	movw	r3, #28980	; 0x7134
   11e6c:	movt	r3, #2
   11e70:	str	r4, [r3]
   11e74:	ldrd	r4, [sp]
   11e78:	ldr	r6, [sp, #8]
   11e7c:	add	sp, sp, #12
   11e80:	pop	{pc}		; (ldr pc, [sp], #4)
   11e84:	movw	r3, #28992	; 0x7140
   11e88:	movt	r3, #2
   11e8c:	ldr	r3, [r3]
   11e90:	mov	r2, #55	; 0x37
   11e94:	mov	r1, #1
   11e98:	movw	r0, #23716	; 0x5ca4
   11e9c:	movt	r0, #1
   11ea0:	bl	10d78 <fwrite@plt>
   11ea4:	bl	10ef8 <abort@plt>
   11ea8:	mov	r2, #0
   11eac:	mov	r3, #0
   11eb0:	strd	r2, [r0]
   11eb4:	strd	r2, [r0, #8]
   11eb8:	strd	r2, [r0, #16]
   11ebc:	strd	r2, [r0, #24]
   11ec0:	strd	r2, [r0, #32]
   11ec4:	strd	r2, [r0, #40]	; 0x28
   11ec8:	cmp	r1, #10
   11ecc:	beq	11ed8 <__assert_fail@plt+0xfd4>
   11ed0:	str	r1, [r0]
   11ed4:	bx	lr
   11ed8:	str	r4, [sp, #-8]!
   11edc:	str	lr, [sp, #4]
   11ee0:	bl	10ef8 <abort@plt>
   11ee4:	strd	r4, [sp, #-16]!
   11ee8:	str	r6, [sp, #8]
   11eec:	str	lr, [sp, #12]
   11ef0:	mov	r5, r0
   11ef4:	mov	r6, r1
   11ef8:	mov	r2, #5
   11efc:	mov	r1, r0
   11f00:	mov	r0, #0
   11f04:	bl	10d48 <dcgettext@plt>
   11f08:	mov	r4, r0
   11f0c:	cmp	r5, r0
   11f10:	beq	11f28 <__assert_fail@plt+0x1024>
   11f14:	mov	r0, r4
   11f18:	ldrd	r4, [sp]
   11f1c:	ldr	r6, [sp, #8]
   11f20:	add	sp, sp, #12
   11f24:	pop	{pc}		; (ldr pc, [sp], #4)
   11f28:	bl	15554 <__assert_fail@plt+0x4650>
   11f2c:	ldrb	r3, [r0]
   11f30:	bic	r3, r3, #32
   11f34:	cmp	r3, #85	; 0x55
   11f38:	bne	11fbc <__assert_fail@plt+0x10b8>
   11f3c:	ldrb	r3, [r0, #1]
   11f40:	bic	r3, r3, #32
   11f44:	cmp	r3, #84	; 0x54
   11f48:	bne	11f80 <__assert_fail@plt+0x107c>
   11f4c:	ldrb	r3, [r0, #2]
   11f50:	bic	r3, r3, #32
   11f54:	cmp	r3, #70	; 0x46
   11f58:	bne	11f80 <__assert_fail@plt+0x107c>
   11f5c:	ldrb	r3, [r0, #3]
   11f60:	cmp	r3, #45	; 0x2d
   11f64:	bne	11f80 <__assert_fail@plt+0x107c>
   11f68:	ldrb	r3, [r0, #4]
   11f6c:	cmp	r3, #56	; 0x38
   11f70:	bne	11f80 <__assert_fail@plt+0x107c>
   11f74:	ldrb	r3, [r0, #5]
   11f78:	cmp	r3, #0
   11f7c:	beq	11f9c <__assert_fail@plt+0x1098>
   11f80:	movw	r4, #23868	; 0x5d3c
   11f84:	movt	r4, #1
   11f88:	movw	r3, #23888	; 0x5d50
   11f8c:	movt	r3, #1
   11f90:	cmp	r6, #9
   11f94:	movne	r4, r3
   11f98:	b	11f14 <__assert_fail@plt+0x1010>
   11f9c:	ldrb	r2, [r4]
   11fa0:	movw	r4, #23884	; 0x5d4c
   11fa4:	movt	r4, #1
   11fa8:	movw	r3, #23872	; 0x5d40
   11fac:	movt	r3, #1
   11fb0:	cmp	r2, #96	; 0x60
   11fb4:	movne	r4, r3
   11fb8:	b	11f14 <__assert_fail@plt+0x1010>
   11fbc:	cmp	r3, #71	; 0x47
   11fc0:	bne	11f80 <__assert_fail@plt+0x107c>
   11fc4:	ldrb	r3, [r0, #1]
   11fc8:	bic	r3, r3, #32
   11fcc:	cmp	r3, #66	; 0x42
   11fd0:	bne	11f80 <__assert_fail@plt+0x107c>
   11fd4:	ldrb	r3, [r0, #2]
   11fd8:	cmp	r3, #49	; 0x31
   11fdc:	bne	11f80 <__assert_fail@plt+0x107c>
   11fe0:	ldrb	r3, [r0, #3]
   11fe4:	cmp	r3, #56	; 0x38
   11fe8:	bne	11f80 <__assert_fail@plt+0x107c>
   11fec:	ldrb	r3, [r0, #4]
   11ff0:	cmp	r3, #48	; 0x30
   11ff4:	bne	11f80 <__assert_fail@plt+0x107c>
   11ff8:	ldrb	r3, [r0, #5]
   11ffc:	cmp	r3, #51	; 0x33
   12000:	bne	11f80 <__assert_fail@plt+0x107c>
   12004:	ldrb	r3, [r0, #6]
   12008:	cmp	r3, #48	; 0x30
   1200c:	bne	11f80 <__assert_fail@plt+0x107c>
   12010:	ldrb	r3, [r0, #7]
   12014:	cmp	r3, #0
   12018:	bne	11f80 <__assert_fail@plt+0x107c>
   1201c:	ldrb	r2, [r4]
   12020:	movw	r4, #23880	; 0x5d48
   12024:	movt	r4, #1
   12028:	movw	r3, #23876	; 0x5d44
   1202c:	movt	r3, #1
   12030:	cmp	r2, #96	; 0x60
   12034:	movne	r4, r3
   12038:	b	11f14 <__assert_fail@plt+0x1010>
   1203c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12040:	strd	r6, [sp, #8]
   12044:	strd	r8, [sp, #16]
   12048:	strd	sl, [sp, #24]
   1204c:	str	lr, [sp, #32]
   12050:	sub	sp, sp, #116	; 0x74
   12054:	str	r0, [sp, #64]	; 0x40
   12058:	mov	r8, r1
   1205c:	str	r2, [sp, #48]	; 0x30
   12060:	str	r3, [sp, #24]
   12064:	ldr	r7, [sp, #152]	; 0x98
   12068:	bl	10d90 <__ctype_get_mb_cur_max@plt>
   1206c:	str	r0, [sp, #76]	; 0x4c
   12070:	ldr	r3, [sp, #156]	; 0x9c
   12074:	ubfx	r3, r3, #1, #1
   12078:	str	r3, [sp, #32]
   1207c:	mov	r3, #1
   12080:	str	r3, [sp, #40]	; 0x28
   12084:	mov	r3, #0
   12088:	str	r3, [sp, #68]	; 0x44
   1208c:	str	r3, [sp, #36]	; 0x24
   12090:	str	r3, [sp, #28]
   12094:	str	r3, [sp, #52]	; 0x34
   12098:	str	r3, [sp, #60]	; 0x3c
   1209c:	str	r3, [sp, #72]	; 0x48
   120a0:	movw	r3, #23892	; 0x5d54
   120a4:	movt	r3, #1
   120a8:	str	r3, [sp, #80]	; 0x50
   120ac:	mov	r9, r8
   120b0:	mov	sl, r7
   120b4:	cmp	sl, #10
   120b8:	ldrls	pc, [pc, sl, lsl #2]
   120bc:	b	12280 <__assert_fail@plt+0x137c>
   120c0:	andeq	r2, r1, r0, lsr #2
   120c4:	strdeq	r2, [r1], -r4
   120c8:	andeq	r2, r1, r8, asr r2
   120cc:	andeq	r2, r1, ip, ror #1
   120d0:	andeq	r2, r1, ip, lsl #4
   120d4:	andeq	r2, r1, r0, lsr r1
   120d8:	strdeq	r3, [r1], -ip
   120dc:	andeq	r2, r1, r4, lsl #5
   120e0:	andeq	r2, r1, ip, ror #2
   120e4:	andeq	r2, r1, ip, ror #2
   120e8:	andeq	r2, r1, ip, ror #2
   120ec:	mov	r3, #1
   120f0:	str	r3, [sp, #28]
   120f4:	mov	r3, #1
   120f8:	str	r3, [sp, #32]
   120fc:	str	r3, [sp, #52]	; 0x34
   12100:	movw	r3, #23888	; 0x5d50
   12104:	movt	r3, #1
   12108:	str	r3, [sp, #60]	; 0x3c
   1210c:	mov	fp, #0
   12110:	mov	sl, #2
   12114:	mov	r6, #0
   12118:	ldr	r8, [sp, #64]	; 0x40
   1211c:	b	12994 <__assert_fail@plt+0x1a90>
   12120:	mov	fp, sl
   12124:	mov	r3, #0
   12128:	str	r3, [sp, #32]
   1212c:	b	12114 <__assert_fail@plt+0x1210>
   12130:	ldr	r3, [sp, #32]
   12134:	cmp	r3, #0
   12138:	bne	12298 <__assert_fail@plt+0x1394>
   1213c:	cmp	r9, #0
   12140:	beq	122bc <__assert_fail@plt+0x13b8>
   12144:	mov	r3, #34	; 0x22
   12148:	ldr	r2, [sp, #64]	; 0x40
   1214c:	strb	r3, [r2]
   12150:	mov	fp, #1
   12154:	str	fp, [sp, #28]
   12158:	str	fp, [sp, #52]	; 0x34
   1215c:	movw	r3, #23868	; 0x5d3c
   12160:	movt	r3, #1
   12164:	str	r3, [sp, #60]	; 0x3c
   12168:	b	12114 <__assert_fail@plt+0x1210>
   1216c:	cmp	sl, #10
   12170:	bne	121a4 <__assert_fail@plt+0x12a0>
   12174:	ldr	r3, [sp, #32]
   12178:	cmp	r3, #0
   1217c:	movne	fp, #0
   12180:	beq	121cc <__assert_fail@plt+0x12c8>
   12184:	ldr	r0, [sp, #168]	; 0xa8
   12188:	bl	10e14 <strlen@plt>
   1218c:	str	r0, [sp, #52]	; 0x34
   12190:	ldr	r3, [sp, #168]	; 0xa8
   12194:	str	r3, [sp, #60]	; 0x3c
   12198:	mov	r3, #1
   1219c:	str	r3, [sp, #28]
   121a0:	b	12114 <__assert_fail@plt+0x1210>
   121a4:	mov	r1, sl
   121a8:	ldr	r0, [sp, #80]	; 0x50
   121ac:	bl	11ee4 <__assert_fail@plt+0xfe0>
   121b0:	str	r0, [sp, #164]	; 0xa4
   121b4:	mov	r1, sl
   121b8:	movw	r0, #23888	; 0x5d50
   121bc:	movt	r0, #1
   121c0:	bl	11ee4 <__assert_fail@plt+0xfe0>
   121c4:	str	r0, [sp, #168]	; 0xa8
   121c8:	b	12174 <__assert_fail@plt+0x1270>
   121cc:	ldr	r3, [sp, #164]	; 0xa4
   121d0:	ldrb	r3, [r3]
   121d4:	cmp	r3, #0
   121d8:	beq	12204 <__assert_fail@plt+0x1300>
   121dc:	ldr	r2, [sp, #164]	; 0xa4
   121e0:	mov	fp, #0
   121e4:	ldr	r1, [sp, #64]	; 0x40
   121e8:	cmp	r9, fp
   121ec:	strbhi	r3, [r1, fp]
   121f0:	add	fp, fp, #1
   121f4:	ldrb	r3, [r2, #1]!
   121f8:	cmp	r3, #0
   121fc:	bne	121e8 <__assert_fail@plt+0x12e4>
   12200:	b	12184 <__assert_fail@plt+0x1280>
   12204:	mov	fp, #0
   12208:	b	12184 <__assert_fail@plt+0x1280>
   1220c:	ldr	r3, [sp, #32]
   12210:	cmp	r3, #0
   12214:	bne	120f4 <__assert_fail@plt+0x11f0>
   12218:	mov	r3, #1
   1221c:	str	r3, [sp, #28]
   12220:	cmp	r9, #0
   12224:	beq	122d8 <__assert_fail@plt+0x13d4>
   12228:	mov	r3, #39	; 0x27
   1222c:	ldr	r2, [sp, #64]	; 0x40
   12230:	strb	r3, [r2]
   12234:	mov	r3, #0
   12238:	str	r3, [sp, #32]
   1223c:	mov	fp, #1
   12240:	str	fp, [sp, #52]	; 0x34
   12244:	movw	r3, #23888	; 0x5d50
   12248:	movt	r3, #1
   1224c:	str	r3, [sp, #60]	; 0x3c
   12250:	mov	sl, #2
   12254:	b	12114 <__assert_fail@plt+0x1210>
   12258:	ldr	r3, [sp, #32]
   1225c:	cmp	r3, #0
   12260:	beq	12220 <__assert_fail@plt+0x131c>
   12264:	mov	r3, #1
   12268:	str	r3, [sp, #52]	; 0x34
   1226c:	movw	r3, #23888	; 0x5d50
   12270:	movt	r3, #1
   12274:	str	r3, [sp, #60]	; 0x3c
   12278:	mov	fp, #0
   1227c:	b	12114 <__assert_fail@plt+0x1210>
   12280:	bl	10ef8 <abort@plt>
   12284:	mov	fp, #0
   12288:	str	fp, [sp, #32]
   1228c:	mov	r3, #1
   12290:	str	r3, [sp, #28]
   12294:	b	12114 <__assert_fail@plt+0x1210>
   12298:	ldr	r3, [sp, #32]
   1229c:	str	r3, [sp, #28]
   122a0:	mov	r3, #1
   122a4:	str	r3, [sp, #52]	; 0x34
   122a8:	movw	r3, #23868	; 0x5d3c
   122ac:	movt	r3, #1
   122b0:	str	r3, [sp, #60]	; 0x3c
   122b4:	mov	fp, #0
   122b8:	b	12114 <__assert_fail@plt+0x1210>
   122bc:	mov	fp, #1
   122c0:	str	fp, [sp, #28]
   122c4:	str	fp, [sp, #52]	; 0x34
   122c8:	movw	r3, #23868	; 0x5d3c
   122cc:	movt	r3, #1
   122d0:	str	r3, [sp, #60]	; 0x3c
   122d4:	b	12114 <__assert_fail@plt+0x1210>
   122d8:	mov	r3, #0
   122dc:	str	r3, [sp, #32]
   122e0:	mov	fp, #1
   122e4:	str	fp, [sp, #52]	; 0x34
   122e8:	movw	r3, #23888	; 0x5d50
   122ec:	movt	r3, #1
   122f0:	str	r3, [sp, #60]	; 0x3c
   122f4:	mov	sl, #2
   122f8:	b	12114 <__assert_fail@plt+0x1210>
   122fc:	mov	r3, r2
   12300:	add	r4, r6, r2
   12304:	ldr	r2, [sp, #24]
   12308:	cmp	r3, #1
   1230c:	movls	r3, #0
   12310:	movhi	r3, #1
   12314:	cmn	r2, #1
   12318:	movne	r3, #0
   1231c:	cmp	r3, #0
   12320:	beq	12330 <__assert_fail@plt+0x142c>
   12324:	ldr	r0, [sp, #48]	; 0x30
   12328:	bl	10e14 <strlen@plt>
   1232c:	str	r0, [sp, #24]
   12330:	ldr	r3, [sp, #24]
   12334:	cmp	r4, r3
   12338:	bhi	13524 <__assert_fail@plt+0x2620>
   1233c:	ldr	r3, [sp, #48]	; 0x30
   12340:	add	r4, r3, r6
   12344:	ldr	r2, [sp, #52]	; 0x34
   12348:	ldr	r1, [sp, #60]	; 0x3c
   1234c:	mov	r0, r4
   12350:	bl	10d30 <memcmp@plt>
   12354:	cmp	r0, #0
   12358:	bne	13524 <__assert_fail@plt+0x2620>
   1235c:	ldr	r3, [sp, #32]
   12360:	cmp	r3, #0
   12364:	bne	12574 <__assert_fail@plt+0x1670>
   12368:	ldrb	r4, [r4]
   1236c:	cmp	r4, #126	; 0x7e
   12370:	ldrls	pc, [pc, r4, lsl #2]
   12374:	b	12e28 <__assert_fail@plt+0x1f24>
   12378:			; <UNDEFINED> instruction: 0x000125b8
   1237c:	andeq	r2, r1, r8, lsr #28
   12380:	andeq	r2, r1, r8, lsr #28
   12384:	andeq	r2, r1, r8, lsr #28
   12388:	andeq	r2, r1, r8, lsr #28
   1238c:	andeq	r2, r1, r8, lsr #28
   12390:	andeq	r2, r1, r8, lsr #28
   12394:	ldrdeq	r2, [r1], -r0
   12398:	andeq	r2, r1, r4, asr r8
   1239c:	strdeq	r2, [r1], -r8
   123a0:	andeq	r2, r1, r4, lsr #25
   123a4:	andeq	r2, r1, ip, lsl #24
   123a8:	andeq	r2, r1, r8, ror #16
   123ac:	andeq	r2, r1, ip, ror r8
   123b0:	andeq	r2, r1, r8, lsr #28
   123b4:	andeq	r2, r1, r8, lsr #28
   123b8:	andeq	r2, r1, r8, lsr #28
   123bc:	andeq	r2, r1, r8, lsr #28
   123c0:	andeq	r2, r1, r8, lsr #28
   123c4:	andeq	r2, r1, r8, lsr #28
   123c8:	andeq	r2, r1, r8, lsr #28
   123cc:	andeq	r2, r1, r8, lsr #28
   123d0:	andeq	r2, r1, r8, lsr #28
   123d4:	andeq	r2, r1, r8, lsr #28
   123d8:	andeq	r2, r1, r8, lsr #28
   123dc:	andeq	r2, r1, r8, lsr #28
   123e0:	andeq	r2, r1, r8, lsr #28
   123e4:	andeq	r2, r1, r8, lsr #28
   123e8:	andeq	r2, r1, r8, lsr #28
   123ec:	andeq	r2, r1, r8, lsr #28
   123f0:	andeq	r2, r1, r8, lsr #28
   123f4:	andeq	r2, r1, r8, lsr #28
   123f8:	andeq	r2, r1, r4, asr #26
   123fc:	andeq	r2, r1, r8, ror #26
   12400:	andeq	r2, r1, r8, ror #26
   12404:	andeq	r2, r1, r0, lsl #26
   12408:	andeq	r2, r1, r8, ror #26
   1240c:	andeq	r3, r1, r8, lsl #5
   12410:	andeq	r2, r1, r8, ror #26
   12414:	andeq	r2, r1, r8, lsl #27
   12418:	andeq	r2, r1, r8, ror #26
   1241c:	andeq	r2, r1, r8, ror #26
   12420:	andeq	r2, r1, r8, ror #26
   12424:	andeq	r3, r1, r8, lsl #5
   12428:	andeq	r3, r1, r8, lsl #5
   1242c:	andeq	r3, r1, r8, lsl #5
   12430:	andeq	r3, r1, r8, lsl #5
   12434:	andeq	r3, r1, r8, lsl #5
   12438:	andeq	r3, r1, r8, lsl #5
   1243c:	andeq	r3, r1, r8, lsl #5
   12440:	andeq	r3, r1, r8, lsl #5
   12444:	andeq	r3, r1, r8, lsl #5
   12448:	andeq	r3, r1, r8, lsl #5
   1244c:	andeq	r3, r1, r8, lsl #5
   12450:	andeq	r3, r1, r8, lsl #5
   12454:	andeq	r3, r1, r8, lsl #5
   12458:	andeq	r3, r1, r8, lsl #5
   1245c:	andeq	r3, r1, r8, lsl #5
   12460:	andeq	r3, r1, r8, lsl #5
   12464:	andeq	r2, r1, r8, ror #26
   12468:	andeq	r2, r1, r8, ror #26
   1246c:	andeq	r2, r1, r8, ror #26
   12470:	andeq	r2, r1, r8, ror #26
   12474:	andeq	r2, r1, r8, ror #13
   12478:	andeq	r2, r1, r8, lsr #28
   1247c:	andeq	r3, r1, r8, lsl #5
   12480:	andeq	r3, r1, r8, lsl #5
   12484:	andeq	r3, r1, r8, lsl #5
   12488:	andeq	r3, r1, r8, lsl #5
   1248c:	andeq	r3, r1, r8, lsl #5
   12490:	andeq	r3, r1, r8, lsl #5
   12494:	andeq	r3, r1, r8, lsl #5
   12498:	andeq	r3, r1, r8, lsl #5
   1249c:	andeq	r3, r1, r8, lsl #5
   124a0:	andeq	r3, r1, r8, lsl #5
   124a4:	andeq	r3, r1, r8, lsl #5
   124a8:	andeq	r3, r1, r8, lsl #5
   124ac:	andeq	r3, r1, r8, lsl #5
   124b0:	andeq	r3, r1, r8, lsl #5
   124b4:	andeq	r3, r1, r8, lsl #5
   124b8:	andeq	r3, r1, r8, lsl #5
   124bc:	andeq	r3, r1, r8, lsl #5
   124c0:	andeq	r3, r1, r8, lsl #5
   124c4:	andeq	r3, r1, r8, lsl #5
   124c8:	andeq	r3, r1, r8, lsl #5
   124cc:	andeq	r3, r1, r8, lsl #5
   124d0:	andeq	r3, r1, r8, lsl #5
   124d4:	andeq	r3, r1, r8, lsl #5
   124d8:	andeq	r3, r1, r8, lsl #5
   124dc:	andeq	r3, r1, r8, lsl #5
   124e0:	andeq	r3, r1, r8, lsl #5
   124e4:	andeq	r2, r1, r8, ror #26
   124e8:	andeq	r2, r1, r0, lsr #24
   124ec:	andeq	r3, r1, r8, lsl #5
   124f0:	andeq	r2, r1, r8, ror #26
   124f4:	andeq	r3, r1, r8, lsl #5
   124f8:	andeq	r2, r1, r8, ror #26
   124fc:	andeq	r3, r1, r8, lsl #5
   12500:	andeq	r3, r1, r8, lsl #5
   12504:	andeq	r3, r1, r8, lsl #5
   12508:	andeq	r3, r1, r8, lsl #5
   1250c:	andeq	r3, r1, r8, lsl #5
   12510:	andeq	r3, r1, r8, lsl #5
   12514:	andeq	r3, r1, r8, lsl #5
   12518:	andeq	r3, r1, r8, lsl #5
   1251c:	andeq	r3, r1, r8, lsl #5
   12520:	andeq	r3, r1, r8, lsl #5
   12524:	andeq	r3, r1, r8, lsl #5
   12528:	andeq	r3, r1, r8, lsl #5
   1252c:	andeq	r3, r1, r8, lsl #5
   12530:	andeq	r3, r1, r8, lsl #5
   12534:	andeq	r3, r1, r8, lsl #5
   12538:	andeq	r3, r1, r8, lsl #5
   1253c:	andeq	r3, r1, r8, lsl #5
   12540:	andeq	r3, r1, r8, lsl #5
   12544:	andeq	r3, r1, r8, lsl #5
   12548:	andeq	r3, r1, r8, lsl #5
   1254c:	andeq	r3, r1, r8, lsl #5
   12550:	andeq	r3, r1, r8, lsl #5
   12554:	andeq	r3, r1, r8, lsl #5
   12558:	andeq	r3, r1, r8, lsl #5
   1255c:	andeq	r3, r1, r8, lsl #5
   12560:	andeq	r3, r1, r8, lsl #5
   12564:	andeq	r2, r1, r0, ror #25
   12568:	andeq	r2, r1, r8, ror #26
   1256c:	andeq	r2, r1, r0, ror #25
   12570:	andeq	r2, r1, r0, lsl #26
   12574:	mov	r8, r9
   12578:	mov	r7, sl
   1257c:	b	1347c <__assert_fail@plt+0x2578>
   12580:	ldr	r3, [sp, #28]
   12584:	cmp	r3, #0
   12588:	bne	125a8 <__assert_fail@plt+0x16a4>
   1258c:	ldr	r3, [sp, #156]	; 0x9c
   12590:	tst	r3, #1
   12594:	bne	12990 <__assert_fail@plt+0x1a8c>
   12598:	ldr	r3, [sp, #28]
   1259c:	str	r3, [sp, #44]	; 0x2c
   125a0:	mov	r5, r3
   125a4:	b	128b0 <__assert_fail@plt+0x19ac>
   125a8:	ldr	r3, [sp, #32]
   125ac:	cmp	r3, #0
   125b0:	bne	1342c <__assert_fail@plt+0x2528>
   125b4:	str	r3, [sp, #44]	; 0x2c
   125b8:	ldr	r3, [sp, #36]	; 0x24
   125bc:	eor	r3, r3, #1
   125c0:	cmp	sl, #2
   125c4:	movne	r3, #0
   125c8:	andeq	r3, r3, #1
   125cc:	cmp	r3, #0
   125d0:	beq	12628 <__assert_fail@plt+0x1724>
   125d4:	cmp	r9, fp
   125d8:	movhi	r2, #39	; 0x27
   125dc:	strbhi	r2, [r8, fp]
   125e0:	add	r2, fp, #1
   125e4:	cmp	r9, r2
   125e8:	movhi	r1, #36	; 0x24
   125ec:	strbhi	r1, [r8, r2]
   125f0:	add	r2, fp, #2
   125f4:	cmp	r9, r2
   125f8:	movhi	r1, #39	; 0x27
   125fc:	strbhi	r1, [r8, r2]
   12600:	add	r2, fp, #3
   12604:	cmp	r9, r2
   12608:	bls	134e8 <__assert_fail@plt+0x25e4>
   1260c:	mov	r1, #92	; 0x5c
   12610:	strb	r1, [r8, r2]
   12614:	add	fp, fp, #4
   12618:	str	r3, [sp, #36]	; 0x24
   1261c:	mov	r5, #0
   12620:	mov	r4, #48	; 0x30
   12624:	b	128fc <__assert_fail@plt+0x19f8>
   12628:	cmp	r9, fp
   1262c:	bhi	12654 <__assert_fail@plt+0x1750>
   12630:	add	r1, fp, #1
   12634:	ldr	r2, [sp, #56]	; 0x38
   12638:	cmp	r2, #0
   1263c:	bne	1267c <__assert_fail@plt+0x1778>
   12640:	mov	r3, r5
   12644:	ldr	r5, [sp, #56]	; 0x38
   12648:	mov	fp, r1
   1264c:	mov	r4, #48	; 0x30
   12650:	b	128b0 <__assert_fail@plt+0x19ac>
   12654:	mov	r2, #92	; 0x5c
   12658:	strb	r2, [r8, fp]
   1265c:	add	r1, fp, #1
   12660:	ldr	r2, [sp, #56]	; 0x38
   12664:	cmp	r2, #0
   12668:	moveq	r3, r5
   1266c:	moveq	r5, r2
   12670:	moveq	fp, r1
   12674:	moveq	r4, #48	; 0x30
   12678:	beq	128fc <__assert_fail@plt+0x19f8>
   1267c:	add	r2, r6, #1
   12680:	ldr	r0, [sp, #24]
   12684:	cmp	r2, r0
   12688:	bcs	126a4 <__assert_fail@plt+0x17a0>
   1268c:	ldr	r0, [sp, #48]	; 0x30
   12690:	ldrb	r2, [r0, r2]
   12694:	sub	r2, r2, #48	; 0x30
   12698:	uxtb	r2, r2
   1269c:	cmp	r2, #9
   126a0:	bls	126bc <__assert_fail@plt+0x17b8>
   126a4:	mov	r2, r3
   126a8:	mov	r3, r5
   126ac:	mov	r5, r2
   126b0:	mov	fp, r1
   126b4:	mov	r4, #48	; 0x30
   126b8:	b	128d4 <__assert_fail@plt+0x19d0>
   126bc:	cmp	r9, r1
   126c0:	movhi	r2, #48	; 0x30
   126c4:	strbhi	r2, [r8, r1]
   126c8:	add	r2, fp, #2
   126cc:	cmp	r9, r2
   126d0:	movhi	r1, #48	; 0x30
   126d4:	strbhi	r1, [r8, r2]
   126d8:	add	r1, fp, #3
   126dc:	b	126a4 <__assert_fail@plt+0x17a0>
   126e0:	mov	r3, #0
   126e4:	str	r3, [sp, #44]	; 0x2c
   126e8:	cmp	sl, #2
   126ec:	beq	12708 <__assert_fail@plt+0x1804>
   126f0:	cmp	sl, #5
   126f4:	beq	12720 <__assert_fail@plt+0x181c>
   126f8:	mov	r5, #0
   126fc:	mov	r3, r5
   12700:	mov	r4, #63	; 0x3f
   12704:	b	128b0 <__assert_fail@plt+0x19ac>
   12708:	ldr	r3, [sp, #32]
   1270c:	cmp	r3, #0
   12710:	bne	13438 <__assert_fail@plt+0x2534>
   12714:	mov	r5, r3
   12718:	mov	r4, #63	; 0x3f
   1271c:	b	12e18 <__assert_fail@plt+0x1f14>
   12720:	ldr	r3, [sp, #156]	; 0x9c
   12724:	tst	r3, #4
   12728:	beq	13250 <__assert_fail@plt+0x234c>
   1272c:	add	r2, r6, #2
   12730:	ldr	r3, [sp, #24]
   12734:	cmp	r2, r3
   12738:	bcs	13260 <__assert_fail@plt+0x235c>
   1273c:	ldr	r3, [sp, #48]	; 0x30
   12740:	add	r3, r3, r6
   12744:	ldrb	r4, [r3, #1]
   12748:	cmp	r4, #63	; 0x3f
   1274c:	movne	r5, #0
   12750:	movne	r3, r5
   12754:	movne	r4, #63	; 0x3f
   12758:	bne	128b0 <__assert_fail@plt+0x19ac>
   1275c:	ldr	r3, [sp, #48]	; 0x30
   12760:	ldrb	r1, [r3, r2]
   12764:	sub	r3, r1, #33	; 0x21
   12768:	cmp	r3, #29
   1276c:	ldrls	pc, [pc, r3, lsl #2]
   12770:	b	13270 <__assert_fail@plt+0x236c>
   12774:	andeq	r2, r1, ip, ror #15
   12778:	andeq	r3, r1, r0, ror r2
   1277c:	andeq	r3, r1, r0, ror r2
   12780:	andeq	r3, r1, r0, ror r2
   12784:	andeq	r3, r1, r0, ror r2
   12788:	andeq	r3, r1, r0, ror r2
   1278c:	andeq	r2, r1, ip, ror #15
   12790:	andeq	r2, r1, ip, ror #15
   12794:	andeq	r2, r1, ip, ror #15
   12798:	andeq	r3, r1, r0, ror r2
   1279c:	andeq	r3, r1, r0, ror r2
   127a0:	andeq	r3, r1, r0, ror r2
   127a4:	andeq	r2, r1, ip, ror #15
   127a8:	andeq	r3, r1, r0, ror r2
   127ac:	andeq	r2, r1, ip, ror #15
   127b0:	andeq	r3, r1, r0, ror r2
   127b4:	andeq	r3, r1, r0, ror r2
   127b8:	andeq	r3, r1, r0, ror r2
   127bc:	andeq	r3, r1, r0, ror r2
   127c0:	andeq	r3, r1, r0, ror r2
   127c4:	andeq	r3, r1, r0, ror r2
   127c8:	andeq	r3, r1, r0, ror r2
   127cc:	andeq	r3, r1, r0, ror r2
   127d0:	andeq	r3, r1, r0, ror r2
   127d4:	andeq	r3, r1, r0, ror r2
   127d8:	andeq	r3, r1, r0, ror r2
   127dc:	andeq	r3, r1, r0, ror r2
   127e0:	andeq	r2, r1, ip, ror #15
   127e4:	andeq	r2, r1, ip, ror #15
   127e8:	andeq	r2, r1, ip, ror #15
   127ec:	ldr	r3, [sp, #32]
   127f0:	cmp	r3, #0
   127f4:	bne	134dc <__assert_fail@plt+0x25d8>
   127f8:	cmp	r9, fp
   127fc:	movhi	r3, #63	; 0x3f
   12800:	strbhi	r3, [r8, fp]
   12804:	add	r3, fp, #1
   12808:	cmp	r9, r3
   1280c:	movhi	r0, #34	; 0x22
   12810:	strbhi	r0, [r8, r3]
   12814:	add	r3, fp, #2
   12818:	cmp	r9, r3
   1281c:	movhi	r0, #34	; 0x22
   12820:	strbhi	r0, [r8, r3]
   12824:	add	r3, fp, #3
   12828:	cmp	r9, r3
   1282c:	movhi	r0, #63	; 0x3f
   12830:	strbhi	r0, [r8, r3]
   12834:	add	fp, fp, #4
   12838:	ldr	r3, [sp, #32]
   1283c:	mov	r5, r3
   12840:	mov	r4, r1
   12844:	mov	r6, r2
   12848:	b	128b0 <__assert_fail@plt+0x19ac>
   1284c:	mov	r3, #0
   12850:	str	r3, [sp, #44]	; 0x2c
   12854:	mov	r4, #8
   12858:	mov	r3, #98	; 0x62
   1285c:	b	1289c <__assert_fail@plt+0x1998>
   12860:	mov	r3, #0
   12864:	str	r3, [sp, #44]	; 0x2c
   12868:	mov	r4, #12
   1286c:	mov	r3, #102	; 0x66
   12870:	b	1289c <__assert_fail@plt+0x1998>
   12874:	mov	r3, #0
   12878:	str	r3, [sp, #44]	; 0x2c
   1287c:	mov	r4, #13
   12880:	mov	r3, #114	; 0x72
   12884:	ldr	r2, [sp, #32]
   12888:	cmp	sl, #2
   1288c:	movne	r2, #0
   12890:	andeq	r2, r2, #1
   12894:	cmp	r2, #0
   12898:	bne	12cbc <__assert_fail@plt+0x1db8>
   1289c:	ldr	r2, [sp, #28]
   128a0:	cmp	r2, #0
   128a4:	bne	132a4 <__assert_fail@plt+0x23a0>
   128a8:	mov	r5, r2
   128ac:	mov	r3, r2
   128b0:	ldr	r2, [sp, #28]
   128b4:	eor	r2, r2, #1
   128b8:	cmp	sl, #2
   128bc:	orreq	r2, r2, #1
   128c0:	eor	r2, r2, #1
   128c4:	ldr	r1, [sp, #32]
   128c8:	orr	r2, r1, r2
   128cc:	tst	r2, #255	; 0xff
   128d0:	beq	128fc <__assert_fail@plt+0x19f8>
   128d4:	ldr	r2, [sp, #160]	; 0xa0
   128d8:	cmp	r2, #0
   128dc:	beq	128fc <__assert_fail@plt+0x19f8>
   128e0:	ubfx	r1, r4, #5, #8
   128e4:	and	r2, r4, #31
   128e8:	ldr	r0, [sp, #160]	; 0xa0
   128ec:	ldr	r1, [r0, r1, lsl #2]
   128f0:	lsr	r2, r1, r2
   128f4:	tst	r2, #1
   128f8:	bne	12908 <__assert_fail@plt+0x1a04>
   128fc:	ldr	r2, [sp, #44]	; 0x2c
   12900:	cmp	r2, #0
   12904:	beq	12c5c <__assert_fail@plt+0x1d58>
   12908:	ldr	r3, [sp, #32]
   1290c:	cmp	r3, #0
   12910:	bne	1345c <__assert_fail@plt+0x2558>
   12914:	ldr	r3, [sp, #36]	; 0x24
   12918:	eor	r3, r3, #1
   1291c:	cmp	sl, #2
   12920:	movne	r3, #0
   12924:	andeq	r3, r3, #1
   12928:	cmp	r3, #0
   1292c:	beq	12964 <__assert_fail@plt+0x1a60>
   12930:	cmp	r9, fp
   12934:	movhi	r2, #39	; 0x27
   12938:	strbhi	r2, [r8, fp]
   1293c:	add	r2, fp, #1
   12940:	cmp	r9, r2
   12944:	movhi	r1, #36	; 0x24
   12948:	strbhi	r1, [r8, r2]
   1294c:	add	r2, fp, #2
   12950:	cmp	r9, r2
   12954:	movhi	r1, #39	; 0x27
   12958:	strbhi	r1, [r8, r2]
   1295c:	add	fp, fp, #3
   12960:	str	r3, [sp, #36]	; 0x24
   12964:	cmp	r9, fp
   12968:	movhi	r3, #92	; 0x5c
   1296c:	strbhi	r3, [r8, fp]
   12970:	add	fp, fp, #1
   12974:	cmp	fp, r9
   12978:	strbcc	r4, [r8, fp]
   1297c:	add	fp, fp, #1
   12980:	cmp	r5, #0
   12984:	ldr	r3, [sp, #40]	; 0x28
   12988:	moveq	r3, r5
   1298c:	str	r3, [sp, #40]	; 0x28
   12990:	add	r6, r6, #1
   12994:	ldr	r3, [sp, #24]
   12998:	cmn	r3, #1
   1299c:	beq	132cc <__assert_fail@plt+0x23c8>
   129a0:	ldr	r3, [sp, #24]
   129a4:	subs	r5, r3, r6
   129a8:	movne	r5, #1
   129ac:	cmp	r5, #0
   129b0:	beq	132e0 <__assert_fail@plt+0x23dc>
   129b4:	ldr	r3, [sp, #28]
   129b8:	cmp	sl, #2
   129bc:	moveq	r3, #0
   129c0:	andne	r3, r3, #1
   129c4:	str	r3, [sp, #56]	; 0x38
   129c8:	ldr	r2, [sp, #52]	; 0x34
   129cc:	adds	r7, r2, #0
   129d0:	movne	r7, #1
   129d4:	ands	r3, r3, r7
   129d8:	str	r3, [sp, #44]	; 0x2c
   129dc:	bne	122fc <__assert_fail@plt+0x13f8>
   129e0:	ldr	r3, [sp, #48]	; 0x30
   129e4:	ldrb	r4, [r3, r6]
   129e8:	cmp	r4, #126	; 0x7e
   129ec:	ldrls	pc, [pc, r4, lsl #2]
   129f0:	b	12e28 <__assert_fail@plt+0x1f24>
   129f4:	andeq	r2, r1, r0, lsl #11
   129f8:	andeq	r2, r1, r8, lsr #28
   129fc:	andeq	r2, r1, r8, lsr #28
   12a00:	andeq	r2, r1, r8, lsr #28
   12a04:	andeq	r2, r1, r8, lsr #28
   12a08:	andeq	r2, r1, r8, lsr #28
   12a0c:	andeq	r2, r1, r8, lsr #28
   12a10:	andeq	r2, r1, r8, asr #25
   12a14:	andeq	r2, r1, r4, asr r8
   12a18:	strdeq	r2, [r1], -r8
   12a1c:	muleq	r1, ip, ip
   12a20:	andeq	r2, r1, ip, lsl #24
   12a24:	andeq	r2, r1, r8, ror #16
   12a28:	andeq	r2, r1, ip, ror r8
   12a2c:	andeq	r2, r1, r8, lsr #28
   12a30:	andeq	r2, r1, r8, lsr #28
   12a34:	andeq	r2, r1, r8, lsr #28
   12a38:	andeq	r2, r1, r8, lsr #28
   12a3c:	andeq	r2, r1, r8, lsr #28
   12a40:	andeq	r2, r1, r8, lsr #28
   12a44:	andeq	r2, r1, r8, lsr #28
   12a48:	andeq	r2, r1, r8, lsr #28
   12a4c:	andeq	r2, r1, r8, lsr #28
   12a50:	andeq	r2, r1, r8, lsr #28
   12a54:	andeq	r2, r1, r8, lsr #28
   12a58:	andeq	r2, r1, r8, lsr #28
   12a5c:	andeq	r2, r1, r8, lsr #28
   12a60:	andeq	r2, r1, r8, lsr #28
   12a64:	andeq	r2, r1, r8, lsr #28
   12a68:	andeq	r2, r1, r8, lsr #28
   12a6c:	andeq	r2, r1, r8, lsr #28
   12a70:	andeq	r2, r1, r8, lsr #28
   12a74:	andeq	r2, r1, r4, asr #26
   12a78:	andeq	r2, r1, r0, asr #26
   12a7c:	andeq	r2, r1, r0, asr #26
   12a80:	andeq	r2, r1, r0, lsl #26
   12a84:	andeq	r2, r1, r0, asr #26
   12a88:	andeq	r3, r1, r8, asr #4
   12a8c:	andeq	r2, r1, r0, asr #26
   12a90:	andeq	r2, r1, r8, lsl #27
   12a94:	andeq	r2, r1, r0, asr #26
   12a98:	andeq	r2, r1, r0, asr #26
   12a9c:	andeq	r2, r1, r0, asr #26
   12aa0:	andeq	r3, r1, r8, asr #4
   12aa4:	andeq	r3, r1, r8, asr #4
   12aa8:	andeq	r3, r1, r8, asr #4
   12aac:	andeq	r3, r1, r8, asr #4
   12ab0:	andeq	r3, r1, r8, asr #4
   12ab4:	andeq	r3, r1, r8, asr #4
   12ab8:	andeq	r3, r1, r8, asr #4
   12abc:	andeq	r3, r1, r8, asr #4
   12ac0:	andeq	r3, r1, r8, asr #4
   12ac4:	andeq	r3, r1, r8, asr #4
   12ac8:	andeq	r3, r1, r8, asr #4
   12acc:	andeq	r3, r1, r8, asr #4
   12ad0:	andeq	r3, r1, r8, asr #4
   12ad4:	andeq	r3, r1, r8, asr #4
   12ad8:	andeq	r3, r1, r8, asr #4
   12adc:	andeq	r3, r1, r8, asr #4
   12ae0:	andeq	r2, r1, r0, asr #26
   12ae4:	andeq	r2, r1, r0, asr #26
   12ae8:	andeq	r2, r1, r0, asr #26
   12aec:	andeq	r2, r1, r0, asr #26
   12af0:	andeq	r2, r1, r8, ror #13
   12af4:	andeq	r2, r1, r8, lsr #28
   12af8:	andeq	r3, r1, r8, asr #4
   12afc:	andeq	r3, r1, r8, asr #4
   12b00:	andeq	r3, r1, r8, asr #4
   12b04:	andeq	r3, r1, r8, asr #4
   12b08:	andeq	r3, r1, r8, asr #4
   12b0c:	andeq	r3, r1, r8, asr #4
   12b10:	andeq	r3, r1, r8, asr #4
   12b14:	andeq	r3, r1, r8, asr #4
   12b18:	andeq	r3, r1, r8, asr #4
   12b1c:	andeq	r3, r1, r8, asr #4
   12b20:	andeq	r3, r1, r8, asr #4
   12b24:	andeq	r3, r1, r8, asr #4
   12b28:	andeq	r3, r1, r8, asr #4
   12b2c:	andeq	r3, r1, r8, asr #4
   12b30:	andeq	r3, r1, r8, asr #4
   12b34:	andeq	r3, r1, r8, asr #4
   12b38:	andeq	r3, r1, r8, asr #4
   12b3c:	andeq	r3, r1, r8, asr #4
   12b40:	andeq	r3, r1, r8, asr #4
   12b44:	andeq	r3, r1, r8, asr #4
   12b48:	andeq	r3, r1, r8, asr #4
   12b4c:	andeq	r3, r1, r8, asr #4
   12b50:	andeq	r3, r1, r8, asr #4
   12b54:	andeq	r3, r1, r8, asr #4
   12b58:	andeq	r3, r1, r8, asr #4
   12b5c:	andeq	r3, r1, r8, asr #4
   12b60:	andeq	r2, r1, r0, asr #26
   12b64:	andeq	r2, r1, r0, lsr #24
   12b68:	andeq	r3, r1, r8, asr #4
   12b6c:	andeq	r2, r1, r0, asr #26
   12b70:	andeq	r3, r1, r8, asr #4
   12b74:	andeq	r2, r1, r0, asr #26
   12b78:	andeq	r3, r1, r8, asr #4
   12b7c:	andeq	r3, r1, r8, asr #4
   12b80:	andeq	r3, r1, r8, asr #4
   12b84:	andeq	r3, r1, r8, asr #4
   12b88:	andeq	r3, r1, r8, asr #4
   12b8c:	andeq	r3, r1, r8, asr #4
   12b90:	andeq	r3, r1, r8, asr #4
   12b94:	andeq	r3, r1, r8, asr #4
   12b98:	andeq	r3, r1, r8, asr #4
   12b9c:	andeq	r3, r1, r8, asr #4
   12ba0:	andeq	r3, r1, r8, asr #4
   12ba4:	andeq	r3, r1, r8, asr #4
   12ba8:	andeq	r3, r1, r8, asr #4
   12bac:	andeq	r3, r1, r8, asr #4
   12bb0:	andeq	r3, r1, r8, asr #4
   12bb4:	andeq	r3, r1, r8, asr #4
   12bb8:	andeq	r3, r1, r8, asr #4
   12bbc:	andeq	r3, r1, r8, asr #4
   12bc0:	andeq	r3, r1, r8, asr #4
   12bc4:	andeq	r3, r1, r8, asr #4
   12bc8:	andeq	r3, r1, r8, asr #4
   12bcc:	andeq	r3, r1, r8, asr #4
   12bd0:	andeq	r3, r1, r8, asr #4
   12bd4:	andeq	r3, r1, r8, asr #4
   12bd8:	andeq	r3, r1, r8, asr #4
   12bdc:	andeq	r3, r1, r8, asr #4
   12be0:	andeq	r2, r1, r0, ror #25
   12be4:	andeq	r2, r1, r0, asr #26
   12be8:	andeq	r2, r1, r0, ror #25
   12bec:	andeq	r2, r1, r0, lsl #26
   12bf0:	mov	r3, #0
   12bf4:	str	r3, [sp, #44]	; 0x2c
   12bf8:	mov	r4, #9
   12bfc:	mov	r3, #116	; 0x74
   12c00:	b	12884 <__assert_fail@plt+0x1980>
   12c04:	mov	r3, #0
   12c08:	str	r3, [sp, #44]	; 0x2c
   12c0c:	mov	r4, #11
   12c10:	mov	r3, #118	; 0x76
   12c14:	b	1289c <__assert_fail@plt+0x1998>
   12c18:	mov	r3, #0
   12c1c:	str	r3, [sp, #44]	; 0x2c
   12c20:	cmp	sl, #2
   12c24:	beq	12c48 <__assert_fail@plt+0x1d44>
   12c28:	ldr	r3, [sp, #28]
   12c2c:	ldr	r2, [sp, #32]
   12c30:	and	r3, r3, r2
   12c34:	tst	r7, r3
   12c38:	bne	132bc <__assert_fail@plt+0x23b8>
   12c3c:	mov	r4, #92	; 0x5c
   12c40:	mov	r3, r4
   12c44:	b	1289c <__assert_fail@plt+0x1998>
   12c48:	ldr	r3, [sp, #32]
   12c4c:	cmp	r3, #0
   12c50:	bne	13444 <__assert_fail@plt+0x2540>
   12c54:	mov	r5, r3
   12c58:	mov	r4, #92	; 0x5c
   12c5c:	eor	r3, r3, #1
   12c60:	ldr	r2, [sp, #36]	; 0x24
   12c64:	and	r3, r3, r2
   12c68:	tst	r3, #255	; 0xff
   12c6c:	beq	12974 <__assert_fail@plt+0x1a70>
   12c70:	cmp	r9, fp
   12c74:	movhi	r3, #39	; 0x27
   12c78:	strbhi	r3, [r8, fp]
   12c7c:	add	r3, fp, #1
   12c80:	cmp	r9, r3
   12c84:	movhi	r2, #39	; 0x27
   12c88:	strbhi	r2, [r8, r3]
   12c8c:	add	fp, fp, #2
   12c90:	mov	r3, #0
   12c94:	str	r3, [sp, #36]	; 0x24
   12c98:	b	12974 <__assert_fail@plt+0x1a70>
   12c9c:	mov	r3, #110	; 0x6e
   12ca0:	b	12884 <__assert_fail@plt+0x1980>
   12ca4:	mov	r3, #110	; 0x6e
   12ca8:	b	12884 <__assert_fail@plt+0x1980>
   12cac:	mov	r3, #0
   12cb0:	str	r3, [sp, #44]	; 0x2c
   12cb4:	mov	r3, #110	; 0x6e
   12cb8:	b	12884 <__assert_fail@plt+0x1980>
   12cbc:	mov	r8, r9
   12cc0:	mov	r7, #2
   12cc4:	b	13464 <__assert_fail@plt+0x2560>
   12cc8:	mov	r3, #97	; 0x61
   12ccc:	b	1289c <__assert_fail@plt+0x1998>
   12cd0:	mov	r3, #97	; 0x61
   12cd4:	b	1289c <__assert_fail@plt+0x1998>
   12cd8:	mov	r3, #0
   12cdc:	str	r3, [sp, #44]	; 0x2c
   12ce0:	ldr	r3, [sp, #24]
   12ce4:	cmn	r3, #1
   12ce8:	beq	12d14 <__assert_fail@plt+0x1e10>
   12cec:	ldr	r3, [sp, #24]
   12cf0:	subs	r3, r3, #1
   12cf4:	movne	r3, #1
   12cf8:	cmp	r3, #0
   12cfc:	bne	1327c <__assert_fail@plt+0x2378>
   12d00:	cmp	r6, #0
   12d04:	beq	12d44 <__assert_fail@plt+0x1e40>
   12d08:	mov	r5, #0
   12d0c:	mov	r3, r5
   12d10:	b	128b0 <__assert_fail@plt+0x19ac>
   12d14:	ldr	r3, [sp, #48]	; 0x30
   12d18:	ldrb	r3, [r3, #1]
   12d1c:	adds	r3, r3, #0
   12d20:	movne	r3, #1
   12d24:	b	12cf8 <__assert_fail@plt+0x1df4>
   12d28:	mov	r3, #0
   12d2c:	str	r3, [sp, #44]	; 0x2c
   12d30:	b	12d00 <__assert_fail@plt+0x1dfc>
   12d34:	mov	r3, #0
   12d38:	str	r3, [sp, #44]	; 0x2c
   12d3c:	b	12d44 <__assert_fail@plt+0x1e40>
   12d40:	ldr	r5, [sp, #44]	; 0x2c
   12d44:	ldr	r3, [sp, #32]
   12d48:	cmp	sl, #2
   12d4c:	movne	r3, #0
   12d50:	andeq	r3, r3, #1
   12d54:	cmp	r3, #0
   12d58:	beq	128b0 <__assert_fail@plt+0x19ac>
   12d5c:	mov	r8, r9
   12d60:	mov	r7, #2
   12d64:	b	13464 <__assert_fail@plt+0x2560>
   12d68:	ldr	r5, [sp, #32]
   12d6c:	b	12d44 <__assert_fail@plt+0x1e40>
   12d70:	mov	r3, #0
   12d74:	str	r3, [sp, #44]	; 0x2c
   12d78:	mov	r5, r3
   12d7c:	b	12d44 <__assert_fail@plt+0x1e40>
   12d80:	mov	r3, #0
   12d84:	str	r3, [sp, #44]	; 0x2c
   12d88:	cmp	sl, #2
   12d8c:	strne	r5, [sp, #68]	; 0x44
   12d90:	movne	r3, #0
   12d94:	movne	r4, #39	; 0x27
   12d98:	bne	128b0 <__assert_fail@plt+0x19ac>
   12d9c:	ldr	r3, [sp, #32]
   12da0:	cmp	r3, #0
   12da4:	bne	13450 <__assert_fail@plt+0x254c>
   12da8:	ldr	r3, [sp, #72]	; 0x48
   12dac:	clz	r3, r3
   12db0:	lsr	r3, r3, #5
   12db4:	cmp	r9, #0
   12db8:	moveq	r3, #0
   12dbc:	cmp	r3, #0
   12dc0:	movne	r3, #0
   12dc4:	bne	12dec <__assert_fail@plt+0x1ee8>
   12dc8:	cmp	r9, fp
   12dcc:	movhi	r3, #39	; 0x27
   12dd0:	strbhi	r3, [r8, fp]
   12dd4:	add	r3, fp, #1
   12dd8:	cmp	r9, r3
   12ddc:	movhi	r2, #92	; 0x5c
   12de0:	strbhi	r2, [r8, r3]
   12de4:	mov	r3, r9
   12de8:	ldr	r9, [sp, #72]	; 0x48
   12dec:	add	r2, fp, #2
   12df0:	cmp	r2, r3
   12df4:	movcc	r1, #39	; 0x27
   12df8:	strbcc	r1, [r8, r2]
   12dfc:	add	fp, fp, #3
   12e00:	str	r5, [sp, #68]	; 0x44
   12e04:	ldr	r2, [sp, #32]
   12e08:	str	r2, [sp, #36]	; 0x24
   12e0c:	str	r9, [sp, #72]	; 0x48
   12e10:	mov	r9, r3
   12e14:	mov	r4, #39	; 0x27
   12e18:	mov	r3, #0
   12e1c:	b	128fc <__assert_fail@plt+0x19f8>
   12e20:	mov	r3, #0
   12e24:	str	r3, [sp, #44]	; 0x2c
   12e28:	ldr	r7, [sp, #76]	; 0x4c
   12e2c:	cmp	r7, #1
   12e30:	bne	12e68 <__assert_fail@plt+0x1f64>
   12e34:	bl	10dfc <__ctype_b_loc@plt>
   12e38:	ldr	r2, [r0]
   12e3c:	lsl	r3, r4, #1
   12e40:	ldrh	r5, [r2, r3]
   12e44:	ubfx	r5, r5, #14, #1
   12e48:	mov	ip, r7
   12e4c:	eor	r3, r5, #1
   12e50:	ldr	r2, [sp, #28]
   12e54:	and	r3, r3, r2
   12e58:	ands	r3, r3, #255	; 0xff
   12e5c:	beq	128b0 <__assert_fail@plt+0x19ac>
   12e60:	mov	r5, #0
   12e64:	b	130c4 <__assert_fail@plt+0x21c0>
   12e68:	mov	r2, #0
   12e6c:	mov	r3, #0
   12e70:	strd	r2, [sp, #104]	; 0x68
   12e74:	ldr	r3, [sp, #24]
   12e78:	cmn	r3, #1
   12e7c:	beq	12ea0 <__assert_fail@plt+0x1f9c>
   12e80:	mov	r3, #0
   12e84:	str	r4, [sp, #88]	; 0x58
   12e88:	str	fp, [sp, #92]	; 0x5c
   12e8c:	str	r8, [sp, #56]	; 0x38
   12e90:	mov	r8, r3
   12e94:	str	r9, [sp, #84]	; 0x54
   12e98:	ldr	r9, [sp, #48]	; 0x30
   12e9c:	b	12fec <__assert_fail@plt+0x20e8>
   12ea0:	ldr	r0, [sp, #48]	; 0x30
   12ea4:	bl	10e14 <strlen@plt>
   12ea8:	str	r0, [sp, #24]
   12eac:	b	12e80 <__assert_fail@plt+0x1f7c>
   12eb0:	mov	r1, fp
   12eb4:	ldr	r4, [sp, #88]	; 0x58
   12eb8:	mov	r2, r8
   12ebc:	mov	ip, r8
   12ec0:	ldr	fp, [sp, #92]	; 0x5c
   12ec4:	ldr	r8, [sp, #56]	; 0x38
   12ec8:	ldr	r9, [sp, #84]	; 0x54
   12ecc:	ldr	r0, [sp, #24]
   12ed0:	cmp	r7, r0
   12ed4:	bcs	1308c <__assert_fail@plt+0x2188>
   12ed8:	ldrb	r3, [r1]
   12edc:	cmp	r3, #0
   12ee0:	beq	13094 <__assert_fail@plt+0x2190>
   12ee4:	mov	r3, r1
   12ee8:	add	r2, r2, #1
   12eec:	add	r1, r6, r2
   12ef0:	cmp	r0, r1
   12ef4:	bls	1309c <__assert_fail@plt+0x2198>
   12ef8:	ldrb	r1, [r3, #1]!
   12efc:	cmp	r1, #0
   12f00:	bne	12ee8 <__assert_fail@plt+0x1fe4>
   12f04:	mov	ip, r2
   12f08:	mov	r5, #0
   12f0c:	b	130bc <__assert_fail@plt+0x21b8>
   12f10:	ldr	r3, [sp, #56]	; 0x38
   12f14:	str	r3, [sp, #64]	; 0x40
   12f18:	ldr	r8, [sp, #84]	; 0x54
   12f1c:	mov	r7, #2
   12f20:	b	13464 <__assert_fail@plt+0x2560>
   12f24:	cmp	r2, r7
   12f28:	beq	12fc8 <__assert_fail@plt+0x20c4>
   12f2c:	ldrb	r3, [r2], #1
   12f30:	sub	r3, r3, #91	; 0x5b
   12f34:	cmp	r3, #33	; 0x21
   12f38:	ldrls	pc, [pc, r3, lsl #2]
   12f3c:	b	12f24 <__assert_fail@plt+0x2020>
   12f40:	andeq	r2, r1, r0, lsl pc
   12f44:	andeq	r2, r1, r0, lsl pc
   12f48:	andeq	r2, r1, r4, lsr #30
   12f4c:	andeq	r2, r1, r0, lsl pc
   12f50:	andeq	r2, r1, r4, lsr #30
   12f54:	andeq	r2, r1, r0, lsl pc
   12f58:	andeq	r2, r1, r4, lsr #30
   12f5c:	andeq	r2, r1, r4, lsr #30
   12f60:	andeq	r2, r1, r4, lsr #30
   12f64:	andeq	r2, r1, r4, lsr #30
   12f68:	andeq	r2, r1, r4, lsr #30
   12f6c:	andeq	r2, r1, r4, lsr #30
   12f70:	andeq	r2, r1, r4, lsr #30
   12f74:	andeq	r2, r1, r4, lsr #30
   12f78:	andeq	r2, r1, r4, lsr #30
   12f7c:	andeq	r2, r1, r4, lsr #30
   12f80:	andeq	r2, r1, r4, lsr #30
   12f84:	andeq	r2, r1, r4, lsr #30
   12f88:	andeq	r2, r1, r4, lsr #30
   12f8c:	andeq	r2, r1, r4, lsr #30
   12f90:	andeq	r2, r1, r4, lsr #30
   12f94:	andeq	r2, r1, r4, lsr #30
   12f98:	andeq	r2, r1, r4, lsr #30
   12f9c:	andeq	r2, r1, r4, lsr #30
   12fa0:	andeq	r2, r1, r4, lsr #30
   12fa4:	andeq	r2, r1, r4, lsr #30
   12fa8:	andeq	r2, r1, r4, lsr #30
   12fac:	andeq	r2, r1, r4, lsr #30
   12fb0:	andeq	r2, r1, r4, lsr #30
   12fb4:	andeq	r2, r1, r4, lsr #30
   12fb8:	andeq	r2, r1, r4, lsr #30
   12fbc:	andeq	r2, r1, r4, lsr #30
   12fc0:	andeq	r2, r1, r4, lsr #30
   12fc4:	andeq	r2, r1, r0, lsl pc
   12fc8:	ldr	r0, [sp, #100]	; 0x64
   12fcc:	bl	10d6c <iswprint@plt>
   12fd0:	cmp	r0, #0
   12fd4:	moveq	r5, #0
   12fd8:	add	r8, r8, r4
   12fdc:	add	r0, sp, #104	; 0x68
   12fe0:	bl	10d18 <mbsinit@plt>
   12fe4:	cmp	r0, #0
   12fe8:	bne	13058 <__assert_fail@plt+0x2154>
   12fec:	add	r7, r6, r8
   12ff0:	add	fp, r9, r7
   12ff4:	add	r3, sp, #104	; 0x68
   12ff8:	ldr	r2, [sp, #24]
   12ffc:	sub	r2, r2, r7
   13000:	mov	r1, fp
   13004:	add	r0, sp, #100	; 0x64
   13008:	bl	15598 <__assert_fail@plt+0x4694>
   1300c:	subs	r4, r0, #0
   13010:	beq	130a8 <__assert_fail@plt+0x21a4>
   13014:	cmn	r4, #1
   13018:	beq	13070 <__assert_fail@plt+0x216c>
   1301c:	cmn	r4, #2
   13020:	beq	12eb0 <__assert_fail@plt+0x1fac>
   13024:	ldr	r3, [sp, #32]
   13028:	cmp	sl, #2
   1302c:	movne	r3, #0
   13030:	andeq	r3, r3, #1
   13034:	cmp	r3, #0
   13038:	beq	12fc8 <__assert_fail@plt+0x20c4>
   1303c:	cmp	r4, #1
   13040:	bls	12fc8 <__assert_fail@plt+0x20c4>
   13044:	add	r2, r7, #1
   13048:	add	r2, r9, r2
   1304c:	add	r3, r9, r4
   13050:	add	r7, r3, r7
   13054:	b	12f2c <__assert_fail@plt+0x2028>
   13058:	ldr	r4, [sp, #88]	; 0x58
   1305c:	mov	ip, r8
   13060:	ldr	fp, [sp, #92]	; 0x5c
   13064:	ldr	r8, [sp, #56]	; 0x38
   13068:	ldr	r9, [sp, #84]	; 0x54
   1306c:	b	130bc <__assert_fail@plt+0x21b8>
   13070:	ldr	r4, [sp, #88]	; 0x58
   13074:	mov	ip, r8
   13078:	ldr	fp, [sp, #92]	; 0x5c
   1307c:	ldr	r8, [sp, #56]	; 0x38
   13080:	ldr	r9, [sp, #84]	; 0x54
   13084:	mov	r5, #0
   13088:	b	130bc <__assert_fail@plt+0x21b8>
   1308c:	mov	r5, #0
   13090:	b	130bc <__assert_fail@plt+0x21b8>
   13094:	mov	r5, #0
   13098:	b	130bc <__assert_fail@plt+0x21b8>
   1309c:	mov	ip, r2
   130a0:	mov	r5, #0
   130a4:	b	130bc <__assert_fail@plt+0x21b8>
   130a8:	ldr	r4, [sp, #88]	; 0x58
   130ac:	mov	ip, r8
   130b0:	ldr	fp, [sp, #92]	; 0x5c
   130b4:	ldr	r8, [sp, #56]	; 0x38
   130b8:	ldr	r9, [sp, #84]	; 0x54
   130bc:	cmp	ip, #1
   130c0:	bls	12e4c <__assert_fail@plt+0x1f48>
   130c4:	add	lr, r6, ip
   130c8:	ldr	r3, [sp, #48]	; 0x30
   130cc:	add	r1, r3, r6
   130d0:	mov	r3, #0
   130d4:	eor	r0, r5, #1
   130d8:	ldr	r2, [sp, #28]
   130dc:	and	r0, r0, r2
   130e0:	uxtb	r0, r0
   130e4:	str	r0, [sp, #56]	; 0x38
   130e8:	mov	r7, #92	; 0x5c
   130ec:	ldr	ip, [sp, #36]	; 0x24
   130f0:	str	r5, [sp, #84]	; 0x54
   130f4:	ldr	r2, [sp, #44]	; 0x2c
   130f8:	b	13168 <__assert_fail@plt+0x2264>
   130fc:	cmp	r2, #0
   13100:	beq	13110 <__assert_fail@plt+0x220c>
   13104:	cmp	r9, fp
   13108:	strbhi	r7, [r8, fp]
   1310c:	add	fp, fp, #1
   13110:	add	r5, r6, #1
   13114:	cmp	r5, lr
   13118:	bcs	13224 <__assert_fail@plt+0x2320>
   1311c:	eor	r2, r3, #1
   13120:	and	r2, r2, ip
   13124:	ands	r2, r2, #255	; 0xff
   13128:	beq	13240 <__assert_fail@plt+0x233c>
   1312c:	cmp	r9, fp
   13130:	movhi	r2, #39	; 0x27
   13134:	strbhi	r2, [r8, fp]
   13138:	add	r2, fp, #1
   1313c:	cmp	r9, r2
   13140:	movhi	ip, #39	; 0x27
   13144:	strbhi	ip, [r8, r2]
   13148:	add	fp, fp, #2
   1314c:	ldr	ip, [sp, #56]	; 0x38
   13150:	mov	r2, ip
   13154:	mov	r6, r5
   13158:	cmp	r9, fp
   1315c:	strbhi	r4, [r8, fp]
   13160:	add	fp, fp, #1
   13164:	ldrb	r4, [r1, #1]!
   13168:	cmp	r0, #0
   1316c:	beq	130fc <__assert_fail@plt+0x21f8>
   13170:	ldr	r3, [sp, #32]
   13174:	cmp	r3, #0
   13178:	bne	1340c <__assert_fail@plt+0x2508>
   1317c:	eor	r3, ip, #1
   13180:	cmp	sl, #2
   13184:	movne	r3, #0
   13188:	andeq	r3, r3, #1
   1318c:	cmp	r3, #0
   13190:	beq	131c8 <__assert_fail@plt+0x22c4>
   13194:	cmp	r9, fp
   13198:	movhi	ip, #39	; 0x27
   1319c:	strbhi	ip, [r8, fp]
   131a0:	add	ip, fp, #1
   131a4:	cmp	r9, ip
   131a8:	movhi	r5, #36	; 0x24
   131ac:	strbhi	r5, [r8, ip]
   131b0:	add	ip, fp, #2
   131b4:	cmp	r9, ip
   131b8:	movhi	r5, #39	; 0x27
   131bc:	strbhi	r5, [r8, ip]
   131c0:	add	fp, fp, #3
   131c4:	mov	ip, r3
   131c8:	cmp	r9, fp
   131cc:	strbhi	r7, [r8, fp]
   131d0:	add	r3, fp, #1
   131d4:	cmp	r9, r3
   131d8:	bls	131e8 <__assert_fail@plt+0x22e4>
   131dc:	lsr	r5, r4, #6
   131e0:	add	r5, r5, #48	; 0x30
   131e4:	strb	r5, [r8, r3]
   131e8:	add	r3, fp, #2
   131ec:	cmp	r9, r3
   131f0:	bls	13200 <__assert_fail@plt+0x22fc>
   131f4:	ubfx	r5, r4, #3, #3
   131f8:	add	r5, r5, #48	; 0x30
   131fc:	strb	r5, [r8, r3]
   13200:	add	fp, fp, #3
   13204:	and	r4, r4, #7
   13208:	add	r4, r4, #48	; 0x30
   1320c:	add	r5, r6, #1
   13210:	cmp	r5, lr
   13214:	bcs	13230 <__assert_fail@plt+0x232c>
   13218:	ldr	r3, [sp, #56]	; 0x38
   1321c:	mov	r6, r5
   13220:	b	13158 <__assert_fail@plt+0x2254>
   13224:	str	ip, [sp, #36]	; 0x24
   13228:	ldr	r5, [sp, #84]	; 0x54
   1322c:	b	12c5c <__assert_fail@plt+0x1d58>
   13230:	str	ip, [sp, #36]	; 0x24
   13234:	ldr	r5, [sp, #84]	; 0x54
   13238:	mov	r3, r0
   1323c:	b	12c5c <__assert_fail@plt+0x1d58>
   13240:	mov	r6, r5
   13244:	b	13158 <__assert_fail@plt+0x2254>
   13248:	ldr	r3, [sp, #44]	; 0x2c
   1324c:	b	128b0 <__assert_fail@plt+0x19ac>
   13250:	mov	r5, #0
   13254:	mov	r3, r5
   13258:	mov	r4, #63	; 0x3f
   1325c:	b	128b0 <__assert_fail@plt+0x19ac>
   13260:	mov	r5, #0
   13264:	mov	r3, r5
   13268:	mov	r4, #63	; 0x3f
   1326c:	b	128b0 <__assert_fail@plt+0x19ac>
   13270:	mov	r5, #0
   13274:	mov	r3, r5
   13278:	b	128b0 <__assert_fail@plt+0x19ac>
   1327c:	mov	r5, #0
   13280:	mov	r3, r5
   13284:	b	128b0 <__assert_fail@plt+0x19ac>
   13288:	ldr	r5, [sp, #44]	; 0x2c
   1328c:	ldr	r3, [sp, #32]
   13290:	b	128b0 <__assert_fail@plt+0x19ac>
   13294:	ldr	r5, [sp, #44]	; 0x2c
   13298:	mov	r3, #0
   1329c:	str	r3, [sp, #44]	; 0x2c
   132a0:	b	128b0 <__assert_fail@plt+0x19ac>
   132a4:	mov	r4, r3
   132a8:	mov	r5, #0
   132ac:	b	12908 <__assert_fail@plt+0x1a04>
   132b0:	mov	r5, #0
   132b4:	mov	r4, #97	; 0x61
   132b8:	b	12908 <__assert_fail@plt+0x1a04>
   132bc:	mov	r5, #0
   132c0:	mov	r3, r5
   132c4:	mov	r4, #92	; 0x5c
   132c8:	b	12c5c <__assert_fail@plt+0x1d58>
   132cc:	ldr	r3, [sp, #48]	; 0x30
   132d0:	ldrb	r5, [r3, r6]
   132d4:	adds	r5, r5, #0
   132d8:	movne	r5, #1
   132dc:	b	129ac <__assert_fail@plt+0x1aa8>
   132e0:	cmp	sl, #2
   132e4:	movne	r3, #0
   132e8:	moveq	r3, #1
   132ec:	ldr	r1, [sp, #32]
   132f0:	cmp	fp, #0
   132f4:	andeq	r2, r3, r1
   132f8:	movne	r2, #0
   132fc:	cmp	r2, #0
   13300:	bne	13420 <__assert_fail@plt+0x251c>
   13304:	eor	r2, r1, #1
   13308:	uxtb	r2, r2
   1330c:	and	r3, r3, r2
   13310:	ldr	r1, [sp, #68]	; 0x44
   13314:	ands	r3, r1, r3
   13318:	beq	133ac <__assert_fail@plt+0x24a8>
   1331c:	ldr	r2, [sp, #40]	; 0x28
   13320:	cmp	r2, #0
   13324:	bne	1335c <__assert_fail@plt+0x2458>
   13328:	ldr	r2, [sp, #72]	; 0x48
   1332c:	adds	r2, r2, #0
   13330:	movne	r2, #1
   13334:	cmp	r9, #0
   13338:	movne	r2, #0
   1333c:	str	r2, [sp, #68]	; 0x44
   13340:	mov	sl, #2
   13344:	ldr	r1, [sp, #40]	; 0x28
   13348:	str	r1, [sp, #32]
   1334c:	cmp	r2, #0
   13350:	beq	133a0 <__assert_fail@plt+0x249c>
   13354:	ldr	r9, [sp, #72]	; 0x48
   13358:	b	120b4 <__assert_fail@plt+0x11b0>
   1335c:	ldr	r3, [sp, #168]	; 0xa8
   13360:	str	r3, [sp, #16]
   13364:	ldr	r3, [sp, #164]	; 0xa4
   13368:	str	r3, [sp, #12]
   1336c:	ldr	r3, [sp, #160]	; 0xa0
   13370:	str	r3, [sp, #8]
   13374:	ldr	r3, [sp, #156]	; 0x9c
   13378:	str	r3, [sp, #4]
   1337c:	mov	r3, #5
   13380:	str	r3, [sp]
   13384:	ldr	r3, [sp, #24]
   13388:	ldr	r2, [sp, #48]	; 0x30
   1338c:	ldr	r1, [sp, #72]	; 0x48
   13390:	ldr	r0, [sp, #64]	; 0x40
   13394:	bl	1203c <__assert_fail@plt+0x1138>
   13398:	mov	fp, r0
   1339c:	b	134bc <__assert_fail@plt+0x25b8>
   133a0:	mov	r8, r9
   133a4:	mov	r2, r3
   133a8:	b	133b0 <__assert_fail@plt+0x24ac>
   133ac:	mov	r8, r9
   133b0:	ldr	r3, [sp, #60]	; 0x3c
   133b4:	cmp	r3, #0
   133b8:	moveq	r2, #0
   133bc:	andne	r2, r2, #1
   133c0:	cmp	r2, #0
   133c4:	beq	133f4 <__assert_fail@plt+0x24f0>
   133c8:	mov	r2, r3
   133cc:	ldrb	r3, [r3]
   133d0:	cmp	r3, #0
   133d4:	beq	133f4 <__assert_fail@plt+0x24f0>
   133d8:	ldr	r1, [sp, #64]	; 0x40
   133dc:	cmp	r8, fp
   133e0:	strbhi	r3, [r1, fp]
   133e4:	add	fp, fp, #1
   133e8:	ldrb	r3, [r2, #1]!
   133ec:	cmp	r3, #0
   133f0:	bne	133dc <__assert_fail@plt+0x24d8>
   133f4:	cmp	r8, fp
   133f8:	bls	134bc <__assert_fail@plt+0x25b8>
   133fc:	mov	r3, #0
   13400:	ldr	r2, [sp, #64]	; 0x40
   13404:	strb	r3, [r2, fp]
   13408:	b	134bc <__assert_fail@plt+0x25b8>
   1340c:	mov	r8, r9
   13410:	mov	r7, sl
   13414:	ldr	r3, [sp, #32]
   13418:	str	r3, [sp, #28]
   1341c:	b	13464 <__assert_fail@plt+0x2560>
   13420:	mov	r8, r9
   13424:	mov	r7, #2
   13428:	b	13464 <__assert_fail@plt+0x2560>
   1342c:	mov	r8, r9
   13430:	mov	r7, sl
   13434:	b	13464 <__assert_fail@plt+0x2560>
   13438:	mov	r8, r9
   1343c:	mov	r7, sl
   13440:	b	13464 <__assert_fail@plt+0x2560>
   13444:	mov	r8, r9
   13448:	mov	r7, sl
   1344c:	b	13464 <__assert_fail@plt+0x2560>
   13450:	mov	r8, r9
   13454:	mov	r7, sl
   13458:	b	13464 <__assert_fail@plt+0x2560>
   1345c:	mov	r8, r9
   13460:	mov	r7, sl
   13464:	ldr	r3, [sp, #28]
   13468:	cmp	r7, #2
   1346c:	movne	r3, #0
   13470:	andeq	r3, r3, #1
   13474:	cmp	r3, #0
   13478:	movne	r7, #4
   1347c:	ldr	r3, [sp, #168]	; 0xa8
   13480:	str	r3, [sp, #16]
   13484:	ldr	r3, [sp, #164]	; 0xa4
   13488:	str	r3, [sp, #12]
   1348c:	mov	r3, #0
   13490:	str	r3, [sp, #8]
   13494:	ldr	r3, [sp, #156]	; 0x9c
   13498:	bic	r3, r3, #2
   1349c:	str	r3, [sp, #4]
   134a0:	str	r7, [sp]
   134a4:	ldr	r3, [sp, #24]
   134a8:	ldr	r2, [sp, #48]	; 0x30
   134ac:	mov	r1, r8
   134b0:	ldr	r0, [sp, #64]	; 0x40
   134b4:	bl	1203c <__assert_fail@plt+0x1138>
   134b8:	mov	fp, r0
   134bc:	mov	r0, fp
   134c0:	add	sp, sp, #116	; 0x74
   134c4:	ldrd	r4, [sp]
   134c8:	ldrd	r6, [sp, #8]
   134cc:	ldrd	r8, [sp, #16]
   134d0:	ldrd	sl, [sp, #24]
   134d4:	add	sp, sp, #32
   134d8:	pop	{pc}		; (ldr pc, [sp], #4)
   134dc:	mov	r8, r9
   134e0:	mov	r7, sl
   134e4:	b	1347c <__assert_fail@plt+0x2578>
   134e8:	add	fp, fp, #4
   134ec:	str	r3, [sp, #36]	; 0x24
   134f0:	mov	r5, #0
   134f4:	mov	r4, #48	; 0x30
   134f8:	b	128b0 <__assert_fail@plt+0x19ac>
   134fc:	mov	r3, #1
   13500:	str	r3, [sp, #32]
   13504:	str	r3, [sp, #28]
   13508:	str	r3, [sp, #52]	; 0x34
   1350c:	movw	r3, #23868	; 0x5d3c
   13510:	movt	r3, #1
   13514:	str	r3, [sp, #60]	; 0x3c
   13518:	mov	fp, #0
   1351c:	mov	sl, #5
   13520:	b	12114 <__assert_fail@plt+0x1210>
   13524:	ldr	r3, [sp, #48]	; 0x30
   13528:	ldrb	r4, [r3, r6]
   1352c:	cmp	r4, #126	; 0x7e
   13530:	ldrls	pc, [pc, r4, lsl #2]
   13534:	b	12e20 <__assert_fail@plt+0x1f1c>
   13538:	andeq	r2, r1, r8, lsr #11
   1353c:	andeq	r2, r1, r0, lsr #28
   13540:	andeq	r2, r1, r0, lsr #28
   13544:	andeq	r2, r1, r0, lsr #28
   13548:	andeq	r2, r1, r0, lsr #28
   1354c:	andeq	r2, r1, r0, lsr #28
   13550:	andeq	r2, r1, r0, lsr #28
   13554:			; <UNDEFINED> instruction: 0x000132b0
   13558:	andeq	r2, r1, ip, asr #16
   1355c:	strdeq	r2, [r1], -r0
   13560:	andeq	r2, r1, ip, lsr #25
   13564:	andeq	r2, r1, r4, lsl #24
   13568:	andeq	r2, r1, r0, ror #16
   1356c:	andeq	r2, r1, r4, ror r8
   13570:	andeq	r2, r1, r0, lsr #28
   13574:	andeq	r2, r1, r0, lsr #28
   13578:	andeq	r2, r1, r0, lsr #28
   1357c:	andeq	r2, r1, r0, lsr #28
   13580:	andeq	r2, r1, r0, lsr #28
   13584:	andeq	r2, r1, r0, lsr #28
   13588:	andeq	r2, r1, r0, lsr #28
   1358c:	andeq	r2, r1, r0, lsr #28
   13590:	andeq	r2, r1, r0, lsr #28
   13594:	andeq	r2, r1, r0, lsr #28
   13598:	andeq	r2, r1, r0, lsr #28
   1359c:	andeq	r2, r1, r0, lsr #28
   135a0:	andeq	r2, r1, r0, lsr #28
   135a4:	andeq	r2, r1, r0, lsr #28
   135a8:	andeq	r2, r1, r0, lsr #28
   135ac:	andeq	r2, r1, r0, lsr #28
   135b0:	andeq	r2, r1, r0, lsr #28
   135b4:	andeq	r2, r1, r0, lsr #28
   135b8:	andeq	r2, r1, r4, lsr sp
   135bc:	andeq	r2, r1, r0, ror sp
   135c0:	andeq	r2, r1, r0, ror sp
   135c4:	andeq	r2, r1, r8, lsr #26
   135c8:	andeq	r2, r1, r0, ror sp
   135cc:	muleq	r1, r4, r2
   135d0:	andeq	r2, r1, r0, ror sp
   135d4:	andeq	r2, r1, r0, lsl #27
   135d8:	andeq	r2, r1, r0, ror sp
   135dc:	andeq	r2, r1, r0, ror sp
   135e0:	andeq	r2, r1, r0, ror sp
   135e4:	muleq	r1, r4, r2
   135e8:	muleq	r1, r4, r2
   135ec:	muleq	r1, r4, r2
   135f0:	muleq	r1, r4, r2
   135f4:	muleq	r1, r4, r2
   135f8:	muleq	r1, r4, r2
   135fc:	muleq	r1, r4, r2
   13600:	muleq	r1, r4, r2
   13604:	muleq	r1, r4, r2
   13608:	muleq	r1, r4, r2
   1360c:	muleq	r1, r4, r2
   13610:	muleq	r1, r4, r2
   13614:	muleq	r1, r4, r2
   13618:	muleq	r1, r4, r2
   1361c:	muleq	r1, r4, r2
   13620:	muleq	r1, r4, r2
   13624:	andeq	r2, r1, r0, ror sp
   13628:	andeq	r2, r1, r0, ror sp
   1362c:	andeq	r2, r1, r0, ror sp
   13630:	andeq	r2, r1, r0, ror sp
   13634:	andeq	r2, r1, r0, ror #13
   13638:	andeq	r2, r1, r0, lsr #28
   1363c:	muleq	r1, r4, r2
   13640:	muleq	r1, r4, r2
   13644:	muleq	r1, r4, r2
   13648:	muleq	r1, r4, r2
   1364c:	muleq	r1, r4, r2
   13650:	muleq	r1, r4, r2
   13654:	muleq	r1, r4, r2
   13658:	muleq	r1, r4, r2
   1365c:	muleq	r1, r4, r2
   13660:	muleq	r1, r4, r2
   13664:	muleq	r1, r4, r2
   13668:	muleq	r1, r4, r2
   1366c:	muleq	r1, r4, r2
   13670:	muleq	r1, r4, r2
   13674:	muleq	r1, r4, r2
   13678:	muleq	r1, r4, r2
   1367c:	muleq	r1, r4, r2
   13680:	muleq	r1, r4, r2
   13684:	muleq	r1, r4, r2
   13688:	muleq	r1, r4, r2
   1368c:	muleq	r1, r4, r2
   13690:	muleq	r1, r4, r2
   13694:	muleq	r1, r4, r2
   13698:	muleq	r1, r4, r2
   1369c:	muleq	r1, r4, r2
   136a0:	muleq	r1, r4, r2
   136a4:	andeq	r2, r1, r0, ror sp
   136a8:	andeq	r2, r1, r8, lsl ip
   136ac:	muleq	r1, r4, r2
   136b0:	andeq	r2, r1, r0, ror sp
   136b4:	muleq	r1, r4, r2
   136b8:	andeq	r2, r1, r0, ror sp
   136bc:	muleq	r1, r4, r2
   136c0:	muleq	r1, r4, r2
   136c4:	muleq	r1, r4, r2
   136c8:	muleq	r1, r4, r2
   136cc:	muleq	r1, r4, r2
   136d0:	muleq	r1, r4, r2
   136d4:	muleq	r1, r4, r2
   136d8:	muleq	r1, r4, r2
   136dc:	muleq	r1, r4, r2
   136e0:	muleq	r1, r4, r2
   136e4:	muleq	r1, r4, r2
   136e8:	muleq	r1, r4, r2
   136ec:	muleq	r1, r4, r2
   136f0:	muleq	r1, r4, r2
   136f4:	muleq	r1, r4, r2
   136f8:	muleq	r1, r4, r2
   136fc:	muleq	r1, r4, r2
   13700:	muleq	r1, r4, r2
   13704:	muleq	r1, r4, r2
   13708:	muleq	r1, r4, r2
   1370c:	muleq	r1, r4, r2
   13710:	muleq	r1, r4, r2
   13714:	muleq	r1, r4, r2
   13718:	muleq	r1, r4, r2
   1371c:	muleq	r1, r4, r2
   13720:	muleq	r1, r4, r2
   13724:	ldrdeq	r2, [r1], -r8
   13728:	andeq	r2, r1, r0, ror sp
   1372c:	ldrdeq	r2, [r1], -r8
   13730:	andeq	r2, r1, r8, lsr #26
   13734:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13738:	strd	r6, [sp, #8]
   1373c:	strd	r8, [sp, #16]
   13740:	strd	sl, [sp, #24]
   13744:	str	lr, [sp, #32]
   13748:	sub	sp, sp, #52	; 0x34
   1374c:	mov	r5, r0
   13750:	str	r1, [sp, #24]
   13754:	str	r2, [sp, #28]
   13758:	mov	r4, r3
   1375c:	bl	10e2c <__errno_location@plt>
   13760:	str	r0, [sp, #32]
   13764:	ldr	r3, [r0]
   13768:	str	r3, [sp, #36]	; 0x24
   1376c:	movw	r3, #28912	; 0x70f0
   13770:	movt	r3, #2
   13774:	ldr	r6, [r3]
   13778:	cmn	r5, #-2147483647	; 0x80000001
   1377c:	movne	r3, #0
   13780:	moveq	r3, #1
   13784:	orrs	r3, r3, r5, lsr #31
   13788:	bne	138ec <__assert_fail@plt+0x29e8>
   1378c:	movw	r3, #28912	; 0x70f0
   13790:	movt	r3, #2
   13794:	ldr	r2, [r3, #4]
   13798:	cmp	r2, r5
   1379c:	bgt	1380c <__assert_fail@plt+0x2908>
   137a0:	str	r2, [sp, #44]	; 0x2c
   137a4:	add	r3, r3, #8
   137a8:	cmp	r6, r3
   137ac:	beq	138f0 <__assert_fail@plt+0x29ec>
   137b0:	sub	r2, r5, r2
   137b4:	mov	r3, #8
   137b8:	str	r3, [sp]
   137bc:	mvn	r3, #-2147483648	; 0x80000000
   137c0:	add	r2, r2, #1
   137c4:	add	r1, sp, #44	; 0x2c
   137c8:	mov	r0, r6
   137cc:	bl	148f4 <__assert_fail@plt+0x39f0>
   137d0:	mov	r6, r0
   137d4:	movw	r3, #28912	; 0x70f0
   137d8:	movt	r3, #2
   137dc:	str	r0, [r3]
   137e0:	movw	r7, #28912	; 0x70f0
   137e4:	movt	r7, #2
   137e8:	ldr	r0, [r7, #4]
   137ec:	ldr	r2, [sp, #44]	; 0x2c
   137f0:	sub	r2, r2, r0
   137f4:	lsl	r2, r2, #3
   137f8:	mov	r1, #0
   137fc:	add	r0, r6, r0, lsl #3
   13800:	bl	10e44 <memset@plt>
   13804:	ldr	r3, [sp, #44]	; 0x2c
   13808:	str	r3, [r7, #4]
   1380c:	add	fp, r6, r5, lsl #3
   13810:	ldr	r8, [r6, r5, lsl #3]
   13814:	ldr	r7, [fp, #4]
   13818:	ldr	r3, [r4, #4]
   1381c:	orr	r9, r3, #1
   13820:	add	sl, r4, #8
   13824:	ldr	r3, [r4, #44]	; 0x2c
   13828:	str	r3, [sp, #16]
   1382c:	ldr	r3, [r4, #40]	; 0x28
   13830:	str	r3, [sp, #12]
   13834:	str	sl, [sp, #8]
   13838:	str	r9, [sp, #4]
   1383c:	ldr	r3, [r4]
   13840:	str	r3, [sp]
   13844:	ldr	r3, [sp, #28]
   13848:	ldr	r2, [sp, #24]
   1384c:	mov	r1, r8
   13850:	mov	r0, r7
   13854:	bl	1203c <__assert_fail@plt+0x1138>
   13858:	cmp	r8, r0
   1385c:	bhi	138c0 <__assert_fail@plt+0x29bc>
   13860:	add	r8, r0, #1
   13864:	str	r8, [r6, r5, lsl #3]
   13868:	movw	r3, #29044	; 0x7174
   1386c:	movt	r3, #2
   13870:	cmp	r7, r3
   13874:	beq	13880 <__assert_fail@plt+0x297c>
   13878:	mov	r0, r7
   1387c:	bl	154f4 <__assert_fail@plt+0x45f0>
   13880:	mov	r0, r8
   13884:	bl	146f0 <__assert_fail@plt+0x37ec>
   13888:	mov	r7, r0
   1388c:	str	r0, [fp, #4]
   13890:	ldr	r3, [r4, #44]	; 0x2c
   13894:	str	r3, [sp, #16]
   13898:	ldr	r3, [r4, #40]	; 0x28
   1389c:	str	r3, [sp, #12]
   138a0:	str	sl, [sp, #8]
   138a4:	str	r9, [sp, #4]
   138a8:	ldr	r3, [r4]
   138ac:	str	r3, [sp]
   138b0:	ldr	r3, [sp, #28]
   138b4:	ldr	r2, [sp, #24]
   138b8:	mov	r1, r8
   138bc:	bl	1203c <__assert_fail@plt+0x1138>
   138c0:	ldr	r3, [sp, #32]
   138c4:	ldr	r2, [sp, #36]	; 0x24
   138c8:	str	r2, [r3]
   138cc:	mov	r0, r7
   138d0:	add	sp, sp, #52	; 0x34
   138d4:	ldrd	r4, [sp]
   138d8:	ldrd	r6, [sp, #8]
   138dc:	ldrd	r8, [sp, #16]
   138e0:	ldrd	sl, [sp, #24]
   138e4:	add	sp, sp, #32
   138e8:	pop	{pc}		; (ldr pc, [sp], #4)
   138ec:	bl	10ef8 <abort@plt>
   138f0:	sub	r2, r5, r2
   138f4:	mov	r3, #8
   138f8:	str	r3, [sp]
   138fc:	mvn	r3, #-2147483648	; 0x80000000
   13900:	add	r2, r2, #1
   13904:	add	r1, sp, #44	; 0x2c
   13908:	mov	r0, #0
   1390c:	bl	148f4 <__assert_fail@plt+0x39f0>
   13910:	mov	r6, r0
   13914:	movw	r3, #28912	; 0x70f0
   13918:	movt	r3, #2
   1391c:	str	r0, [r3]
   13920:	ldrd	r2, [r3, #8]
   13924:	strd	r2, [r0]
   13928:	b	137e0 <__assert_fail@plt+0x28dc>
   1392c:	strd	r4, [sp, #-16]!
   13930:	str	r6, [sp, #8]
   13934:	str	lr, [sp, #12]
   13938:	mov	r4, r0
   1393c:	bl	10e2c <__errno_location@plt>
   13940:	mov	r5, r0
   13944:	ldr	r6, [r0]
   13948:	cmp	r4, #0
   1394c:	ldr	r3, [pc, #32]	; 13974 <__assert_fail@plt+0x2a70>
   13950:	moveq	r4, r3
   13954:	mov	r1, #48	; 0x30
   13958:	mov	r0, r4
   1395c:	bl	14a64 <__assert_fail@plt+0x3b60>
   13960:	str	r6, [r5]
   13964:	ldrd	r4, [sp]
   13968:	ldr	r6, [sp, #8]
   1396c:	add	sp, sp, #12
   13970:	pop	{pc}		; (ldr pc, [sp], #4)
   13974:	andeq	r7, r2, r4, ror r2
   13978:	subs	r3, r0, #0
   1397c:	ldr	r2, [pc, #8]	; 1398c <__assert_fail@plt+0x2a88>
   13980:	moveq	r3, r2
   13984:	ldr	r0, [r3]
   13988:	bx	lr
   1398c:	andeq	r7, r2, r4, ror r2
   13990:	subs	r3, r0, #0
   13994:	ldr	r2, [pc, #8]	; 139a4 <__assert_fail@plt+0x2aa0>
   13998:	moveq	r3, r2
   1399c:	str	r1, [r3]
   139a0:	bx	lr
   139a4:	andeq	r7, r2, r4, ror r2
   139a8:	push	{lr}		; (str lr, [sp, #-4]!)
   139ac:	subs	r3, r0, #0
   139b0:	ldr	r0, [pc, #44]	; 139e4 <__assert_fail@plt+0x2ae0>
   139b4:	moveq	r3, r0
   139b8:	add	r3, r3, #8
   139bc:	lsr	lr, r1, #5
   139c0:	and	r1, r1, #31
   139c4:	ldr	ip, [r3, lr, lsl #2]
   139c8:	lsr	r0, ip, r1
   139cc:	eor	r2, r2, r0
   139d0:	and	r2, r2, #1
   139d4:	eor	r1, ip, r2, lsl r1
   139d8:	str	r1, [r3, lr, lsl #2]
   139dc:	and	r0, r0, #1
   139e0:	pop	{pc}		; (ldr pc, [sp], #4)
   139e4:	andeq	r7, r2, r4, ror r2
   139e8:	subs	r3, r0, #0
   139ec:	ldr	r2, [pc, #12]	; 13a00 <__assert_fail@plt+0x2afc>
   139f0:	moveq	r3, r2
   139f4:	ldr	r0, [r3, #4]
   139f8:	str	r1, [r3, #4]
   139fc:	bx	lr
   13a00:	andeq	r7, r2, r4, ror r2
   13a04:	subs	r3, r0, #0
   13a08:	ldr	r0, [pc, #44]	; 13a3c <__assert_fail@plt+0x2b38>
   13a0c:	moveq	r3, r0
   13a10:	mov	r0, #10
   13a14:	str	r0, [r3]
   13a18:	cmp	r2, #0
   13a1c:	cmpne	r1, #0
   13a20:	beq	13a30 <__assert_fail@plt+0x2b2c>
   13a24:	str	r1, [r3, #40]	; 0x28
   13a28:	str	r2, [r3, #44]	; 0x2c
   13a2c:	bx	lr
   13a30:	str	r4, [sp, #-8]!
   13a34:	str	lr, [sp, #4]
   13a38:	bl	10ef8 <abort@plt>
   13a3c:	andeq	r7, r2, r4, ror r2
   13a40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13a44:	strd	r6, [sp, #8]
   13a48:	strd	r8, [sp, #16]
   13a4c:	str	sl, [sp, #24]
   13a50:	str	lr, [sp, #28]
   13a54:	sub	sp, sp, #24
   13a58:	mov	r7, r0
   13a5c:	mov	r8, r1
   13a60:	mov	r9, r2
   13a64:	mov	sl, r3
   13a68:	ldr	r4, [sp, #56]	; 0x38
   13a6c:	cmp	r4, #0
   13a70:	ldr	r3, [pc, #104]	; 13ae0 <__assert_fail@plt+0x2bdc>
   13a74:	moveq	r4, r3
   13a78:	bl	10e2c <__errno_location@plt>
   13a7c:	mov	r5, r0
   13a80:	ldr	r6, [r0]
   13a84:	ldr	r3, [r4, #44]	; 0x2c
   13a88:	str	r3, [sp, #16]
   13a8c:	ldr	r3, [r4, #40]	; 0x28
   13a90:	str	r3, [sp, #12]
   13a94:	add	r3, r4, #8
   13a98:	str	r3, [sp, #8]
   13a9c:	ldr	r3, [r4, #4]
   13aa0:	str	r3, [sp, #4]
   13aa4:	ldr	r3, [r4]
   13aa8:	str	r3, [sp]
   13aac:	mov	r3, sl
   13ab0:	mov	r2, r9
   13ab4:	mov	r1, r8
   13ab8:	mov	r0, r7
   13abc:	bl	1203c <__assert_fail@plt+0x1138>
   13ac0:	str	r6, [r5]
   13ac4:	add	sp, sp, #24
   13ac8:	ldrd	r4, [sp]
   13acc:	ldrd	r6, [sp, #8]
   13ad0:	ldrd	r8, [sp, #16]
   13ad4:	ldr	sl, [sp, #24]
   13ad8:	add	sp, sp, #28
   13adc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae0:	andeq	r7, r2, r4, ror r2
   13ae4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ae8:	strd	r6, [sp, #8]
   13aec:	strd	r8, [sp, #16]
   13af0:	strd	sl, [sp, #24]
   13af4:	str	lr, [sp, #32]
   13af8:	sub	sp, sp, #44	; 0x2c
   13afc:	mov	r8, r0
   13b00:	mov	sl, r1
   13b04:	mov	r6, r2
   13b08:	subs	r4, r3, #0
   13b0c:	ldr	r3, [pc, #200]	; 13bdc <__assert_fail@plt+0x2cd8>
   13b10:	moveq	r4, r3
   13b14:	bl	10e2c <__errno_location@plt>
   13b18:	mov	r7, r0
   13b1c:	ldr	fp, [r0]
   13b20:	ldr	r5, [r4, #4]
   13b24:	cmp	r6, #0
   13b28:	orreq	r5, r5, #1
   13b2c:	add	r9, r4, #8
   13b30:	ldr	r3, [r4, #44]	; 0x2c
   13b34:	str	r3, [sp, #16]
   13b38:	ldr	r3, [r4, #40]	; 0x28
   13b3c:	str	r3, [sp, #12]
   13b40:	str	r9, [sp, #8]
   13b44:	str	r5, [sp, #4]
   13b48:	ldr	r3, [r4]
   13b4c:	str	r3, [sp]
   13b50:	str	sl, [sp, #36]	; 0x24
   13b54:	mov	r3, sl
   13b58:	str	r8, [sp, #32]
   13b5c:	mov	r2, r8
   13b60:	mov	r1, #0
   13b64:	mov	r0, r1
   13b68:	bl	1203c <__assert_fail@plt+0x1138>
   13b6c:	mov	sl, r0
   13b70:	add	r8, r0, #1
   13b74:	mov	r0, r8
   13b78:	bl	146f0 <__assert_fail@plt+0x37ec>
   13b7c:	str	r0, [sp, #28]
   13b80:	ldr	r3, [r4, #44]	; 0x2c
   13b84:	str	r3, [sp, #16]
   13b88:	ldr	r3, [r4, #40]	; 0x28
   13b8c:	str	r3, [sp, #12]
   13b90:	str	r9, [sp, #8]
   13b94:	str	r5, [sp, #4]
   13b98:	ldr	r3, [r4]
   13b9c:	str	r3, [sp]
   13ba0:	ldr	r3, [sp, #36]	; 0x24
   13ba4:	ldr	r2, [sp, #32]
   13ba8:	mov	r1, r8
   13bac:	bl	1203c <__assert_fail@plt+0x1138>
   13bb0:	str	fp, [r7]
   13bb4:	cmp	r6, #0
   13bb8:	strne	sl, [r6]
   13bbc:	ldr	r0, [sp, #28]
   13bc0:	add	sp, sp, #44	; 0x2c
   13bc4:	ldrd	r4, [sp]
   13bc8:	ldrd	r6, [sp, #8]
   13bcc:	ldrd	r8, [sp, #16]
   13bd0:	ldrd	sl, [sp, #24]
   13bd4:	add	sp, sp, #32
   13bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bdc:	andeq	r7, r2, r4, ror r2
   13be0:	str	r4, [sp, #-8]!
   13be4:	str	lr, [sp, #4]
   13be8:	mov	r3, r2
   13bec:	mov	r2, #0
   13bf0:	bl	13ae4 <__assert_fail@plt+0x2be0>
   13bf4:	ldr	r4, [sp]
   13bf8:	add	sp, sp, #4
   13bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   13c00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13c04:	strd	r6, [sp, #8]
   13c08:	str	r8, [sp, #16]
   13c0c:	str	lr, [sp, #20]
   13c10:	movw	r3, #28912	; 0x70f0
   13c14:	movt	r3, #2
   13c18:	ldr	r7, [r3]
   13c1c:	ldr	r3, [r3, #4]
   13c20:	cmp	r3, #1
   13c24:	ble	13c50 <__assert_fail@plt+0x2d4c>
   13c28:	mov	r4, #1
   13c2c:	add	r6, r7, #4
   13c30:	movw	r5, #28912	; 0x70f0
   13c34:	movt	r5, #2
   13c38:	ldr	r0, [r6, r4, lsl #3]
   13c3c:	bl	154f4 <__assert_fail@plt+0x45f0>
   13c40:	add	r4, r4, #1
   13c44:	ldr	r3, [r5, #4]
   13c48:	cmp	r3, r4
   13c4c:	bgt	13c38 <__assert_fail@plt+0x2d34>
   13c50:	ldr	r0, [r7, #4]
   13c54:	movw	r3, #29044	; 0x7174
   13c58:	movt	r3, #2
   13c5c:	cmp	r0, r3
   13c60:	beq	13c84 <__assert_fail@plt+0x2d80>
   13c64:	bl	154f4 <__assert_fail@plt+0x45f0>
   13c68:	movw	r3, #28912	; 0x70f0
   13c6c:	movt	r3, #2
   13c70:	mov	r2, #256	; 0x100
   13c74:	str	r2, [r3, #8]
   13c78:	movw	r2, #29044	; 0x7174
   13c7c:	movt	r2, #2
   13c80:	str	r2, [r3, #12]
   13c84:	ldr	r3, [pc, #64]	; 13ccc <__assert_fail@plt+0x2dc8>
   13c88:	cmp	r7, r3
   13c8c:	beq	13ca8 <__assert_fail@plt+0x2da4>
   13c90:	mov	r0, r7
   13c94:	bl	154f4 <__assert_fail@plt+0x45f0>
   13c98:	movw	r3, #28912	; 0x70f0
   13c9c:	movt	r3, #2
   13ca0:	add	r2, r3, #8
   13ca4:	str	r2, [r3]
   13ca8:	movw	r3, #28912	; 0x70f0
   13cac:	movt	r3, #2
   13cb0:	mov	r2, #1
   13cb4:	str	r2, [r3, #4]
   13cb8:	ldrd	r4, [sp]
   13cbc:	ldrd	r6, [sp, #8]
   13cc0:	ldr	r8, [sp, #16]
   13cc4:	add	sp, sp, #20
   13cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ccc:	strdeq	r7, [r2], -r8
   13cd0:	str	r4, [sp, #-8]!
   13cd4:	str	lr, [sp, #4]
   13cd8:	ldr	r3, [pc, #16]	; 13cf0 <__assert_fail@plt+0x2dec>
   13cdc:	mvn	r2, #0
   13ce0:	bl	13734 <__assert_fail@plt+0x2830>
   13ce4:	ldr	r4, [sp]
   13ce8:	add	sp, sp, #4
   13cec:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf0:	andeq	r7, r2, r4, ror r2
   13cf4:	str	r4, [sp, #-8]!
   13cf8:	str	lr, [sp, #4]
   13cfc:	ldr	r3, [pc, #12]	; 13d10 <__assert_fail@plt+0x2e0c>
   13d00:	bl	13734 <__assert_fail@plt+0x2830>
   13d04:	ldr	r4, [sp]
   13d08:	add	sp, sp, #4
   13d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d10:	andeq	r7, r2, r4, ror r2
   13d14:	str	r4, [sp, #-8]!
   13d18:	str	lr, [sp, #4]
   13d1c:	mov	r1, r0
   13d20:	mov	r0, #0
   13d24:	bl	13cd0 <__assert_fail@plt+0x2dcc>
   13d28:	ldr	r4, [sp]
   13d2c:	add	sp, sp, #4
   13d30:	pop	{pc}		; (ldr pc, [sp], #4)
   13d34:	str	r4, [sp, #-8]!
   13d38:	str	lr, [sp, #4]
   13d3c:	mov	r2, r1
   13d40:	mov	r1, r0
   13d44:	mov	r0, #0
   13d48:	bl	13cf4 <__assert_fail@plt+0x2df0>
   13d4c:	ldr	r4, [sp]
   13d50:	add	sp, sp, #4
   13d54:	pop	{pc}		; (ldr pc, [sp], #4)
   13d58:	strd	r4, [sp, #-12]!
   13d5c:	str	lr, [sp, #8]
   13d60:	sub	sp, sp, #52	; 0x34
   13d64:	mov	r4, r0
   13d68:	mov	r5, r2
   13d6c:	mov	r0, sp
   13d70:	bl	11ea8 <__assert_fail@plt+0xfa4>
   13d74:	mov	r3, sp
   13d78:	mvn	r2, #0
   13d7c:	mov	r1, r5
   13d80:	mov	r0, r4
   13d84:	bl	13734 <__assert_fail@plt+0x2830>
   13d88:	add	sp, sp, #52	; 0x34
   13d8c:	ldrd	r4, [sp]
   13d90:	add	sp, sp, #8
   13d94:	pop	{pc}		; (ldr pc, [sp], #4)
   13d98:	strd	r4, [sp, #-16]!
   13d9c:	str	r6, [sp, #8]
   13da0:	str	lr, [sp, #12]
   13da4:	sub	sp, sp, #48	; 0x30
   13da8:	mov	r4, r0
   13dac:	mov	r5, r2
   13db0:	mov	r6, r3
   13db4:	mov	r0, sp
   13db8:	bl	11ea8 <__assert_fail@plt+0xfa4>
   13dbc:	mov	r3, sp
   13dc0:	mov	r2, r6
   13dc4:	mov	r1, r5
   13dc8:	mov	r0, r4
   13dcc:	bl	13734 <__assert_fail@plt+0x2830>
   13dd0:	add	sp, sp, #48	; 0x30
   13dd4:	ldrd	r4, [sp]
   13dd8:	ldr	r6, [sp, #8]
   13ddc:	add	sp, sp, #12
   13de0:	pop	{pc}		; (ldr pc, [sp], #4)
   13de4:	str	r4, [sp, #-8]!
   13de8:	str	lr, [sp, #4]
   13dec:	mov	r2, r1
   13df0:	mov	r1, r0
   13df4:	mov	r0, #0
   13df8:	bl	13d58 <__assert_fail@plt+0x2e54>
   13dfc:	ldr	r4, [sp]
   13e00:	add	sp, sp, #4
   13e04:	pop	{pc}		; (ldr pc, [sp], #4)
   13e08:	str	r4, [sp, #-8]!
   13e0c:	str	lr, [sp, #4]
   13e10:	mov	r3, r2
   13e14:	mov	r2, r1
   13e18:	mov	r1, r0
   13e1c:	mov	r0, #0
   13e20:	bl	13d98 <__assert_fail@plt+0x2e94>
   13e24:	ldr	r4, [sp]
   13e28:	add	sp, sp, #4
   13e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e30:	strd	r4, [sp, #-12]!
   13e34:	str	lr, [sp, #8]
   13e38:	sub	sp, sp, #52	; 0x34
   13e3c:	mov	r4, r0
   13e40:	mov	r5, r1
   13e44:	mov	r1, r2
   13e48:	ldr	r0, [pc, #92]	; 13eac <__assert_fail@plt+0x2fa8>
   13e4c:	ldrd	r2, [r0]
   13e50:	strd	r2, [sp]
   13e54:	ldrd	r2, [r0, #8]
   13e58:	strd	r2, [sp, #8]
   13e5c:	ldrd	r2, [r0, #16]
   13e60:	strd	r2, [sp, #16]
   13e64:	ldrd	r2, [r0, #24]
   13e68:	strd	r2, [sp, #24]
   13e6c:	ldrd	r2, [r0, #32]
   13e70:	strd	r2, [sp, #32]
   13e74:	ldrd	r2, [r0, #40]	; 0x28
   13e78:	strd	r2, [sp, #40]	; 0x28
   13e7c:	mov	r2, #1
   13e80:	mov	r0, sp
   13e84:	bl	139a8 <__assert_fail@plt+0x2aa4>
   13e88:	mov	r3, sp
   13e8c:	mov	r2, r5
   13e90:	mov	r1, r4
   13e94:	mov	r0, #0
   13e98:	bl	13734 <__assert_fail@plt+0x2830>
   13e9c:	add	sp, sp, #52	; 0x34
   13ea0:	ldrd	r4, [sp]
   13ea4:	add	sp, sp, #8
   13ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   13eac:	andeq	r7, r2, r4, ror r2
   13eb0:	str	r4, [sp, #-8]!
   13eb4:	str	lr, [sp, #4]
   13eb8:	mov	r2, r1
   13ebc:	mvn	r1, #0
   13ec0:	bl	13e30 <__assert_fail@plt+0x2f2c>
   13ec4:	ldr	r4, [sp]
   13ec8:	add	sp, sp, #4
   13ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ed0:	str	r4, [sp, #-8]!
   13ed4:	str	lr, [sp, #4]
   13ed8:	mov	r1, #58	; 0x3a
   13edc:	bl	13eb0 <__assert_fail@plt+0x2fac>
   13ee0:	ldr	r4, [sp]
   13ee4:	add	sp, sp, #4
   13ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   13eec:	str	r4, [sp, #-8]!
   13ef0:	str	lr, [sp, #4]
   13ef4:	mov	r2, #58	; 0x3a
   13ef8:	bl	13e30 <__assert_fail@plt+0x2f2c>
   13efc:	ldr	r4, [sp]
   13f00:	add	sp, sp, #4
   13f04:	pop	{pc}		; (ldr pc, [sp], #4)
   13f08:	strd	r4, [sp, #-12]!
   13f0c:	str	lr, [sp, #8]
   13f10:	sub	sp, sp, #100	; 0x64
   13f14:	mov	r4, r0
   13f18:	mov	r5, r2
   13f1c:	mov	r0, sp
   13f20:	bl	11ea8 <__assert_fail@plt+0xfa4>
   13f24:	ldrd	r2, [sp]
   13f28:	strd	r2, [sp, #48]	; 0x30
   13f2c:	ldrd	r2, [sp, #8]
   13f30:	strd	r2, [sp, #56]	; 0x38
   13f34:	ldrd	r2, [sp, #16]
   13f38:	strd	r2, [sp, #64]	; 0x40
   13f3c:	ldrd	r2, [sp, #24]
   13f40:	strd	r2, [sp, #72]	; 0x48
   13f44:	ldrd	r2, [sp, #32]
   13f48:	strd	r2, [sp, #80]	; 0x50
   13f4c:	ldrd	r2, [sp, #40]	; 0x28
   13f50:	strd	r2, [sp, #88]	; 0x58
   13f54:	mov	r2, #1
   13f58:	mov	r1, #58	; 0x3a
   13f5c:	add	r0, sp, #48	; 0x30
   13f60:	bl	139a8 <__assert_fail@plt+0x2aa4>
   13f64:	add	r3, sp, #48	; 0x30
   13f68:	mvn	r2, #0
   13f6c:	mov	r1, r5
   13f70:	mov	r0, r4
   13f74:	bl	13734 <__assert_fail@plt+0x2830>
   13f78:	add	sp, sp, #100	; 0x64
   13f7c:	ldrd	r4, [sp]
   13f80:	add	sp, sp, #8
   13f84:	pop	{pc}		; (ldr pc, [sp], #4)
   13f88:	strd	r4, [sp, #-20]!	; 0xffffffec
   13f8c:	strd	r6, [sp, #8]
   13f90:	str	lr, [sp, #16]
   13f94:	sub	sp, sp, #52	; 0x34
   13f98:	mov	r4, r0
   13f9c:	mov	r5, r3
   13fa0:	ldr	r3, [pc, #92]	; 14004 <__assert_fail@plt+0x3100>
   13fa4:	ldrd	r6, [r3]
   13fa8:	strd	r6, [sp]
   13fac:	ldrd	r6, [r3, #8]
   13fb0:	strd	r6, [sp, #8]
   13fb4:	ldrd	r6, [r3, #16]
   13fb8:	strd	r6, [sp, #16]
   13fbc:	ldrd	r6, [r3, #24]
   13fc0:	strd	r6, [sp, #24]
   13fc4:	ldrd	r6, [r3, #32]
   13fc8:	strd	r6, [sp, #32]
   13fcc:	ldrd	r6, [r3, #40]	; 0x28
   13fd0:	strd	r6, [sp, #40]	; 0x28
   13fd4:	mov	r0, sp
   13fd8:	bl	13a04 <__assert_fail@plt+0x2b00>
   13fdc:	mov	r3, sp
   13fe0:	ldr	r2, [sp, #72]	; 0x48
   13fe4:	mov	r1, r5
   13fe8:	mov	r0, r4
   13fec:	bl	13734 <__assert_fail@plt+0x2830>
   13ff0:	add	sp, sp, #52	; 0x34
   13ff4:	ldrd	r4, [sp]
   13ff8:	ldrd	r6, [sp, #8]
   13ffc:	add	sp, sp, #16
   14000:	pop	{pc}		; (ldr pc, [sp], #4)
   14004:	andeq	r7, r2, r4, ror r2
   14008:	push	{lr}		; (str lr, [sp, #-4]!)
   1400c:	sub	sp, sp, #12
   14010:	mvn	ip, #0
   14014:	str	ip, [sp]
   14018:	bl	13f88 <__assert_fail@plt+0x3084>
   1401c:	add	sp, sp, #12
   14020:	pop	{pc}		; (ldr pc, [sp], #4)
   14024:	str	r4, [sp, #-8]!
   14028:	str	lr, [sp, #4]
   1402c:	mov	r3, r2
   14030:	mov	r2, r1
   14034:	mov	r1, r0
   14038:	mov	r0, #0
   1403c:	bl	14008 <__assert_fail@plt+0x3104>
   14040:	ldr	r4, [sp]
   14044:	add	sp, sp, #4
   14048:	pop	{pc}		; (ldr pc, [sp], #4)
   1404c:	push	{lr}		; (str lr, [sp, #-4]!)
   14050:	sub	sp, sp, #12
   14054:	str	r3, [sp]
   14058:	mov	r3, r2
   1405c:	mov	r2, r1
   14060:	mov	r1, r0
   14064:	mov	r0, #0
   14068:	bl	13f88 <__assert_fail@plt+0x3084>
   1406c:	add	sp, sp, #12
   14070:	pop	{pc}		; (ldr pc, [sp], #4)
   14074:	str	r4, [sp, #-8]!
   14078:	str	lr, [sp, #4]
   1407c:	ldr	r3, [pc, #12]	; 14090 <__assert_fail@plt+0x318c>
   14080:	bl	13734 <__assert_fail@plt+0x2830>
   14084:	ldr	r4, [sp]
   14088:	add	sp, sp, #4
   1408c:	pop	{pc}		; (ldr pc, [sp], #4)
   14090:	andeq	r7, r2, r0, lsl #2
   14094:	str	r4, [sp, #-8]!
   14098:	str	lr, [sp, #4]
   1409c:	mov	r2, r1
   140a0:	mov	r1, r0
   140a4:	mov	r0, #0
   140a8:	bl	14074 <__assert_fail@plt+0x3170>
   140ac:	ldr	r4, [sp]
   140b0:	add	sp, sp, #4
   140b4:	pop	{pc}		; (ldr pc, [sp], #4)
   140b8:	str	r4, [sp, #-8]!
   140bc:	str	lr, [sp, #4]
   140c0:	mvn	r2, #0
   140c4:	bl	14074 <__assert_fail@plt+0x3170>
   140c8:	ldr	r4, [sp]
   140cc:	add	sp, sp, #4
   140d0:	pop	{pc}		; (ldr pc, [sp], #4)
   140d4:	str	r4, [sp, #-8]!
   140d8:	str	lr, [sp, #4]
   140dc:	mov	r1, r0
   140e0:	mov	r0, #0
   140e4:	bl	140b8 <__assert_fail@plt+0x31b4>
   140e8:	ldr	r4, [sp]
   140ec:	add	sp, sp, #4
   140f0:	pop	{pc}		; (ldr pc, [sp], #4)
   140f4:	strd	r4, [sp, #-16]!
   140f8:	str	r6, [sp, #8]
   140fc:	str	lr, [sp, #12]
   14100:	sub	sp, sp, #32
   14104:	mov	r4, r0
   14108:	ldr	r5, [sp, #48]	; 0x30
   1410c:	ldr	r6, [sp, #52]	; 0x34
   14110:	cmp	r1, #0
   14114:	beq	141e0 <__assert_fail@plt+0x32dc>
   14118:	str	r3, [sp, #4]
   1411c:	str	r2, [sp]
   14120:	mov	r3, r1
   14124:	movw	r2, #23996	; 0x5dbc
   14128:	movt	r2, #1
   1412c:	mov	r1, #1
   14130:	bl	10e68 <__fprintf_chk@plt>
   14134:	mov	r2, #5
   14138:	movw	r1, #24016	; 0x5dd0
   1413c:	movt	r1, #1
   14140:	mov	r0, #0
   14144:	bl	10d48 <dcgettext@plt>
   14148:	movw	r3, #2022	; 0x7e6
   1414c:	str	r3, [sp]
   14150:	mov	r3, r0
   14154:	movw	r2, #24744	; 0x60a8
   14158:	movt	r2, #1
   1415c:	mov	r1, #1
   14160:	mov	r0, r4
   14164:	bl	10e68 <__fprintf_chk@plt>
   14168:	mov	r1, r4
   1416c:	mov	r0, #10
   14170:	bl	10d3c <fputc_unlocked@plt>
   14174:	mov	r2, #5
   14178:	movw	r1, #24020	; 0x5dd4
   1417c:	movt	r1, #1
   14180:	mov	r0, #0
   14184:	bl	10d48 <dcgettext@plt>
   14188:	movw	r3, #24192	; 0x5e80
   1418c:	movt	r3, #1
   14190:	mov	r2, r0
   14194:	mov	r1, #1
   14198:	mov	r0, r4
   1419c:	bl	10e68 <__fprintf_chk@plt>
   141a0:	mov	r1, r4
   141a4:	mov	r0, #10
   141a8:	bl	10d3c <fputc_unlocked@plt>
   141ac:	cmp	r6, #9
   141b0:	ldrls	pc, [pc, r6, lsl #2]
   141b4:	b	144b8 <__assert_fail@plt+0x35b4>
   141b8:	andeq	r4, r1, r4, lsr #4
   141bc:	strdeq	r4, [r1], -ip
   141c0:	andeq	r4, r1, r8, lsr r2
   141c4:	andeq	r4, r1, ip, ror #4
   141c8:	andeq	r4, r1, r8, lsr #5
   141cc:	andeq	r4, r1, ip, ror #5
   141d0:	andeq	r4, r1, r8, lsr r3
   141d4:	andeq	r4, r1, ip, lsl #7
   141d8:	andeq	r4, r1, r8, ror #7
   141dc:	andeq	r4, r1, ip, asr #8
   141e0:	str	r3, [sp]
   141e4:	mov	r3, r2
   141e8:	movw	r2, #24008	; 0x5dc8
   141ec:	movt	r2, #1
   141f0:	mov	r1, #1
   141f4:	bl	10e68 <__fprintf_chk@plt>
   141f8:	b	14134 <__assert_fail@plt+0x3230>
   141fc:	mov	r2, #5
   14200:	movw	r1, #24228	; 0x5ea4
   14204:	movt	r1, #1
   14208:	mov	r0, #0
   1420c:	bl	10d48 <dcgettext@plt>
   14210:	ldr	r3, [r5]
   14214:	mov	r2, r0
   14218:	mov	r1, #1
   1421c:	mov	r0, r4
   14220:	bl	10e68 <__fprintf_chk@plt>
   14224:	add	sp, sp, #32
   14228:	ldrd	r4, [sp]
   1422c:	ldr	r6, [sp, #8]
   14230:	add	sp, sp, #12
   14234:	pop	{pc}		; (ldr pc, [sp], #4)
   14238:	mov	r2, #5
   1423c:	movw	r1, #24244	; 0x5eb4
   14240:	movt	r1, #1
   14244:	mov	r0, #0
   14248:	bl	10d48 <dcgettext@plt>
   1424c:	ldr	r3, [r5, #4]
   14250:	str	r3, [sp]
   14254:	ldr	r3, [r5]
   14258:	mov	r2, r0
   1425c:	mov	r1, #1
   14260:	mov	r0, r4
   14264:	bl	10e68 <__fprintf_chk@plt>
   14268:	b	14224 <__assert_fail@plt+0x3320>
   1426c:	mov	r2, #5
   14270:	movw	r1, #24268	; 0x5ecc
   14274:	movt	r1, #1
   14278:	mov	r0, #0
   1427c:	bl	10d48 <dcgettext@plt>
   14280:	ldr	r3, [r5, #8]
   14284:	str	r3, [sp, #4]
   14288:	ldr	r3, [r5, #4]
   1428c:	str	r3, [sp]
   14290:	ldr	r3, [r5]
   14294:	mov	r2, r0
   14298:	mov	r1, #1
   1429c:	mov	r0, r4
   142a0:	bl	10e68 <__fprintf_chk@plt>
   142a4:	b	14224 <__assert_fail@plt+0x3320>
   142a8:	mov	r2, #5
   142ac:	movw	r1, #24296	; 0x5ee8
   142b0:	movt	r1, #1
   142b4:	mov	r0, #0
   142b8:	bl	10d48 <dcgettext@plt>
   142bc:	ldr	r3, [r5, #12]
   142c0:	str	r3, [sp, #8]
   142c4:	ldr	r3, [r5, #8]
   142c8:	str	r3, [sp, #4]
   142cc:	ldr	r3, [r5, #4]
   142d0:	str	r3, [sp]
   142d4:	ldr	r3, [r5]
   142d8:	mov	r2, r0
   142dc:	mov	r1, #1
   142e0:	mov	r0, r4
   142e4:	bl	10e68 <__fprintf_chk@plt>
   142e8:	b	14224 <__assert_fail@plt+0x3320>
   142ec:	mov	r2, #5
   142f0:	movw	r1, #24328	; 0x5f08
   142f4:	movt	r1, #1
   142f8:	mov	r0, #0
   142fc:	bl	10d48 <dcgettext@plt>
   14300:	ldr	r3, [r5, #16]
   14304:	str	r3, [sp, #12]
   14308:	ldr	r3, [r5, #12]
   1430c:	str	r3, [sp, #8]
   14310:	ldr	r3, [r5, #8]
   14314:	str	r3, [sp, #4]
   14318:	ldr	r3, [r5, #4]
   1431c:	str	r3, [sp]
   14320:	ldr	r3, [r5]
   14324:	mov	r2, r0
   14328:	mov	r1, #1
   1432c:	mov	r0, r4
   14330:	bl	10e68 <__fprintf_chk@plt>
   14334:	b	14224 <__assert_fail@plt+0x3320>
   14338:	mov	r2, #5
   1433c:	movw	r1, #24364	; 0x5f2c
   14340:	movt	r1, #1
   14344:	mov	r0, #0
   14348:	bl	10d48 <dcgettext@plt>
   1434c:	ldr	r3, [r5, #20]
   14350:	str	r3, [sp, #16]
   14354:	ldr	r3, [r5, #16]
   14358:	str	r3, [sp, #12]
   1435c:	ldr	r3, [r5, #12]
   14360:	str	r3, [sp, #8]
   14364:	ldr	r3, [r5, #8]
   14368:	str	r3, [sp, #4]
   1436c:	ldr	r3, [r5, #4]
   14370:	str	r3, [sp]
   14374:	ldr	r3, [r5]
   14378:	mov	r2, r0
   1437c:	mov	r1, #1
   14380:	mov	r0, r4
   14384:	bl	10e68 <__fprintf_chk@plt>
   14388:	b	14224 <__assert_fail@plt+0x3320>
   1438c:	mov	r2, #5
   14390:	movw	r1, #24404	; 0x5f54
   14394:	movt	r1, #1
   14398:	mov	r0, #0
   1439c:	bl	10d48 <dcgettext@plt>
   143a0:	ldr	r3, [r5, #24]
   143a4:	str	r3, [sp, #20]
   143a8:	ldr	r3, [r5, #20]
   143ac:	str	r3, [sp, #16]
   143b0:	ldr	r3, [r5, #16]
   143b4:	str	r3, [sp, #12]
   143b8:	ldr	r3, [r5, #12]
   143bc:	str	r3, [sp, #8]
   143c0:	ldr	r3, [r5, #8]
   143c4:	str	r3, [sp, #4]
   143c8:	ldr	r3, [r5, #4]
   143cc:	str	r3, [sp]
   143d0:	ldr	r3, [r5]
   143d4:	mov	r2, r0
   143d8:	mov	r1, #1
   143dc:	mov	r0, r4
   143e0:	bl	10e68 <__fprintf_chk@plt>
   143e4:	b	14224 <__assert_fail@plt+0x3320>
   143e8:	mov	r2, #5
   143ec:	movw	r1, #24448	; 0x5f80
   143f0:	movt	r1, #1
   143f4:	mov	r0, #0
   143f8:	bl	10d48 <dcgettext@plt>
   143fc:	ldr	r3, [r5, #28]
   14400:	str	r3, [sp, #24]
   14404:	ldr	r3, [r5, #24]
   14408:	str	r3, [sp, #20]
   1440c:	ldr	r3, [r5, #20]
   14410:	str	r3, [sp, #16]
   14414:	ldr	r3, [r5, #16]
   14418:	str	r3, [sp, #12]
   1441c:	ldr	r3, [r5, #12]
   14420:	str	r3, [sp, #8]
   14424:	ldr	r3, [r5, #8]
   14428:	str	r3, [sp, #4]
   1442c:	ldr	r3, [r5, #4]
   14430:	str	r3, [sp]
   14434:	ldr	r3, [r5]
   14438:	mov	r2, r0
   1443c:	mov	r1, #1
   14440:	mov	r0, r4
   14444:	bl	10e68 <__fprintf_chk@plt>
   14448:	b	14224 <__assert_fail@plt+0x3320>
   1444c:	mov	r2, #5
   14450:	movw	r1, #24496	; 0x5fb0
   14454:	movt	r1, #1
   14458:	mov	r0, #0
   1445c:	bl	10d48 <dcgettext@plt>
   14460:	ldr	r3, [r5, #32]
   14464:	str	r3, [sp, #28]
   14468:	ldr	r3, [r5, #28]
   1446c:	str	r3, [sp, #24]
   14470:	ldr	r3, [r5, #24]
   14474:	str	r3, [sp, #20]
   14478:	ldr	r3, [r5, #20]
   1447c:	str	r3, [sp, #16]
   14480:	ldr	r3, [r5, #16]
   14484:	str	r3, [sp, #12]
   14488:	ldr	r3, [r5, #12]
   1448c:	str	r3, [sp, #8]
   14490:	ldr	r3, [r5, #8]
   14494:	str	r3, [sp, #4]
   14498:	ldr	r3, [r5, #4]
   1449c:	str	r3, [sp]
   144a0:	ldr	r3, [r5]
   144a4:	mov	r2, r0
   144a8:	mov	r1, #1
   144ac:	mov	r0, r4
   144b0:	bl	10e68 <__fprintf_chk@plt>
   144b4:	b	14224 <__assert_fail@plt+0x3320>
   144b8:	mov	r2, #5
   144bc:	movw	r1, #24548	; 0x5fe4
   144c0:	movt	r1, #1
   144c4:	mov	r0, #0
   144c8:	bl	10d48 <dcgettext@plt>
   144cc:	ldr	r3, [r5, #32]
   144d0:	str	r3, [sp, #28]
   144d4:	ldr	r3, [r5, #28]
   144d8:	str	r3, [sp, #24]
   144dc:	ldr	r3, [r5, #24]
   144e0:	str	r3, [sp, #20]
   144e4:	ldr	r3, [r5, #20]
   144e8:	str	r3, [sp, #16]
   144ec:	ldr	r3, [r5, #16]
   144f0:	str	r3, [sp, #12]
   144f4:	ldr	r3, [r5, #12]
   144f8:	str	r3, [sp, #8]
   144fc:	ldr	r3, [r5, #8]
   14500:	str	r3, [sp, #4]
   14504:	ldr	r3, [r5, #4]
   14508:	str	r3, [sp]
   1450c:	ldr	r3, [r5]
   14510:	mov	r2, r0
   14514:	mov	r1, #1
   14518:	mov	r0, r4
   1451c:	bl	10e68 <__fprintf_chk@plt>
   14520:	b	14224 <__assert_fail@plt+0x3320>
   14524:	strd	r4, [sp, #-12]!
   14528:	str	lr, [sp, #8]
   1452c:	sub	sp, sp, #12
   14530:	ldr	r5, [sp, #24]
   14534:	ldr	ip, [r5]
   14538:	cmp	ip, #0
   1453c:	beq	14574 <__assert_fail@plt+0x3670>
   14540:	mov	lr, r5
   14544:	mov	ip, #0
   14548:	add	ip, ip, #1
   1454c:	ldr	r4, [lr, #4]!
   14550:	cmp	r4, #0
   14554:	bne	14548 <__assert_fail@plt+0x3644>
   14558:	str	ip, [sp, #4]
   1455c:	str	r5, [sp]
   14560:	bl	140f4 <__assert_fail@plt+0x31f0>
   14564:	add	sp, sp, #12
   14568:	ldrd	r4, [sp]
   1456c:	add	sp, sp, #8
   14570:	pop	{pc}		; (ldr pc, [sp], #4)
   14574:	mov	ip, #0
   14578:	b	14558 <__assert_fail@plt+0x3654>
   1457c:	strd	r4, [sp, #-12]!
   14580:	str	lr, [sp, #8]
   14584:	sub	sp, sp, #52	; 0x34
   14588:	ldr	r5, [sp, #64]	; 0x40
   1458c:	add	r4, sp, #8
   14590:	mov	ip, #0
   14594:	ldr	lr, [r5], #4
   14598:	str	lr, [r4], #4
   1459c:	cmp	lr, #0
   145a0:	beq	145b0 <__assert_fail@plt+0x36ac>
   145a4:	add	ip, ip, #1
   145a8:	cmp	ip, #10
   145ac:	bne	14594 <__assert_fail@plt+0x3690>
   145b0:	str	ip, [sp, #4]
   145b4:	add	ip, sp, #8
   145b8:	str	ip, [sp]
   145bc:	bl	140f4 <__assert_fail@plt+0x31f0>
   145c0:	add	sp, sp, #52	; 0x34
   145c4:	ldrd	r4, [sp]
   145c8:	add	sp, sp, #8
   145cc:	pop	{pc}		; (ldr pc, [sp], #4)
   145d0:	push	{r3}		; (str r3, [sp, #-4]!)
   145d4:	push	{lr}		; (str lr, [sp, #-4]!)
   145d8:	sub	sp, sp, #16
   145dc:	add	r3, sp, #24
   145e0:	str	r3, [sp, #12]
   145e4:	str	r3, [sp]
   145e8:	ldr	r3, [sp, #20]
   145ec:	bl	1457c <__assert_fail@plt+0x3678>
   145f0:	add	sp, sp, #16
   145f4:	pop	{lr}		; (ldr lr, [sp], #4)
   145f8:	add	sp, sp, #4
   145fc:	bx	lr
   14600:	str	r4, [sp, #-8]!
   14604:	str	lr, [sp, #4]
   14608:	movw	r3, #29004	; 0x714c
   1460c:	movt	r3, #2
   14610:	ldr	r1, [r3]
   14614:	mov	r0, #10
   14618:	bl	10d3c <fputc_unlocked@plt>
   1461c:	mov	r2, #5
   14620:	movw	r1, #24608	; 0x6020
   14624:	movt	r1, #1
   14628:	mov	r0, #0
   1462c:	bl	10d48 <dcgettext@plt>
   14630:	movw	r2, #24628	; 0x6034
   14634:	movt	r2, #1
   14638:	mov	r1, r0
   1463c:	mov	r0, #1
   14640:	bl	10e50 <__printf_chk@plt>
   14644:	mov	r2, #5
   14648:	movw	r1, #24652	; 0x604c
   1464c:	movt	r1, #1
   14650:	mov	r0, #0
   14654:	bl	10d48 <dcgettext@plt>
   14658:	movw	r3, #23252	; 0x5ad4
   1465c:	movt	r3, #1
   14660:	movw	r2, #23292	; 0x5afc
   14664:	movt	r2, #1
   14668:	mov	r1, r0
   1466c:	mov	r0, #1
   14670:	bl	10e50 <__printf_chk@plt>
   14674:	mov	r2, #5
   14678:	movw	r1, #24672	; 0x6060
   1467c:	movt	r1, #1
   14680:	mov	r0, #0
   14684:	bl	10d48 <dcgettext@plt>
   14688:	movw	r2, #24712	; 0x6088
   1468c:	movt	r2, #1
   14690:	mov	r1, r0
   14694:	mov	r0, #1
   14698:	bl	10e50 <__printf_chk@plt>
   1469c:	ldr	r4, [sp]
   146a0:	add	sp, sp, #4
   146a4:	pop	{pc}		; (ldr pc, [sp], #4)
   146a8:	str	r4, [sp, #-8]!
   146ac:	str	lr, [sp, #4]
   146b0:	bl	153d0 <__assert_fail@plt+0x44cc>
   146b4:	cmp	r0, #0
   146b8:	beq	146c8 <__assert_fail@plt+0x37c4>
   146bc:	ldr	r4, [sp]
   146c0:	add	sp, sp, #4
   146c4:	pop	{pc}		; (ldr pc, [sp], #4)
   146c8:	bl	14b3c <__assert_fail@plt+0x3c38>
   146cc:	str	r4, [sp, #-8]!
   146d0:	str	lr, [sp, #4]
   146d4:	bl	153d0 <__assert_fail@plt+0x44cc>
   146d8:	cmp	r0, #0
   146dc:	beq	146ec <__assert_fail@plt+0x37e8>
   146e0:	ldr	r4, [sp]
   146e4:	add	sp, sp, #4
   146e8:	pop	{pc}		; (ldr pc, [sp], #4)
   146ec:	bl	14b3c <__assert_fail@plt+0x3c38>
   146f0:	str	r4, [sp, #-8]!
   146f4:	str	lr, [sp, #4]
   146f8:	bl	146a8 <__assert_fail@plt+0x37a4>
   146fc:	ldr	r4, [sp]
   14700:	add	sp, sp, #4
   14704:	pop	{pc}		; (ldr pc, [sp], #4)
   14708:	strd	r4, [sp, #-16]!
   1470c:	str	r6, [sp, #8]
   14710:	str	lr, [sp, #12]
   14714:	mov	r5, r0
   14718:	mov	r4, r1
   1471c:	bl	1540c <__assert_fail@plt+0x4508>
   14720:	cmp	r0, #0
   14724:	beq	14738 <__assert_fail@plt+0x3834>
   14728:	ldrd	r4, [sp]
   1472c:	ldr	r6, [sp, #8]
   14730:	add	sp, sp, #12
   14734:	pop	{pc}		; (ldr pc, [sp], #4)
   14738:	adds	r4, r4, #0
   1473c:	movne	r4, #1
   14740:	cmp	r5, #0
   14744:	moveq	r4, #1
   14748:	cmp	r4, #0
   1474c:	beq	14728 <__assert_fail@plt+0x3824>
   14750:	bl	14b3c <__assert_fail@plt+0x3c38>
   14754:	str	r4, [sp, #-8]!
   14758:	str	lr, [sp, #4]
   1475c:	cmp	r1, #0
   14760:	orreq	r1, r1, #1
   14764:	bl	1540c <__assert_fail@plt+0x4508>
   14768:	cmp	r0, #0
   1476c:	beq	1477c <__assert_fail@plt+0x3878>
   14770:	ldr	r4, [sp]
   14774:	add	sp, sp, #4
   14778:	pop	{pc}		; (ldr pc, [sp], #4)
   1477c:	bl	14b3c <__assert_fail@plt+0x3c38>
   14780:	strd	r4, [sp, #-16]!
   14784:	str	r6, [sp, #8]
   14788:	str	lr, [sp, #12]
   1478c:	mov	r4, r0
   14790:	mov	r6, r1
   14794:	mov	r5, r2
   14798:	bl	15608 <__assert_fail@plt+0x4704>
   1479c:	cmp	r0, #0
   147a0:	beq	147b4 <__assert_fail@plt+0x38b0>
   147a4:	ldrd	r4, [sp]
   147a8:	ldr	r6, [sp, #8]
   147ac:	add	sp, sp, #12
   147b0:	pop	{pc}		; (ldr pc, [sp], #4)
   147b4:	cmp	r4, #0
   147b8:	beq	147c8 <__assert_fail@plt+0x38c4>
   147bc:	cmp	r6, #0
   147c0:	cmpne	r5, #0
   147c4:	beq	147a4 <__assert_fail@plt+0x38a0>
   147c8:	bl	14b3c <__assert_fail@plt+0x3c38>
   147cc:	str	r4, [sp, #-8]!
   147d0:	str	lr, [sp, #4]
   147d4:	bl	14780 <__assert_fail@plt+0x387c>
   147d8:	ldr	r4, [sp]
   147dc:	add	sp, sp, #4
   147e0:	pop	{pc}		; (ldr pc, [sp], #4)
   147e4:	str	r4, [sp, #-8]!
   147e8:	str	lr, [sp, #4]
   147ec:	mov	ip, r1
   147f0:	mov	r3, r2
   147f4:	cmp	r2, #0
   147f8:	cmpne	r1, #0
   147fc:	moveq	r3, #1
   14800:	moveq	ip, r3
   14804:	mov	r2, r3
   14808:	mov	r1, ip
   1480c:	bl	15608 <__assert_fail@plt+0x4704>
   14810:	cmp	r0, #0
   14814:	beq	14824 <__assert_fail@plt+0x3920>
   14818:	ldr	r4, [sp]
   1481c:	add	sp, sp, #4
   14820:	pop	{pc}		; (ldr pc, [sp], #4)
   14824:	bl	14b3c <__assert_fail@plt+0x3c38>
   14828:	str	r4, [sp, #-8]!
   1482c:	str	lr, [sp, #4]
   14830:	mov	r2, r1
   14834:	mov	r1, r0
   14838:	mov	r0, #0
   1483c:	bl	14780 <__assert_fail@plt+0x387c>
   14840:	ldr	r4, [sp]
   14844:	add	sp, sp, #4
   14848:	pop	{pc}		; (ldr pc, [sp], #4)
   1484c:	str	r4, [sp, #-8]!
   14850:	str	lr, [sp, #4]
   14854:	mov	r2, r1
   14858:	mov	r1, r0
   1485c:	mov	r0, #0
   14860:	bl	147e4 <__assert_fail@plt+0x38e0>
   14864:	ldr	r4, [sp]
   14868:	add	sp, sp, #4
   1486c:	pop	{pc}		; (ldr pc, [sp], #4)
   14870:	strd	r4, [sp, #-16]!
   14874:	str	r6, [sp, #8]
   14878:	str	lr, [sp, #12]
   1487c:	mov	r5, r1
   14880:	ldr	r4, [r1]
   14884:	cmp	r0, #0
   14888:	beq	148b8 <__assert_fail@plt+0x39b4>
   1488c:	lsr	r3, r4, #1
   14890:	add	r3, r3, #1
   14894:	adds	r4, r4, r3
   14898:	bcs	148d4 <__assert_fail@plt+0x39d0>
   1489c:	mov	r1, r4
   148a0:	bl	14780 <__assert_fail@plt+0x387c>
   148a4:	str	r4, [r5]
   148a8:	ldrd	r4, [sp]
   148ac:	ldr	r6, [sp, #8]
   148b0:	add	sp, sp, #12
   148b4:	pop	{pc}		; (ldr pc, [sp], #4)
   148b8:	cmp	r4, #0
   148bc:	bne	1489c <__assert_fail@plt+0x3998>
   148c0:	mov	r4, #64	; 0x40
   148c4:	udiv	r4, r4, r2
   148c8:	cmp	r2, #64	; 0x40
   148cc:	addhi	r4, r4, #1
   148d0:	b	1489c <__assert_fail@plt+0x3998>
   148d4:	bl	14b3c <__assert_fail@plt+0x3c38>
   148d8:	str	r4, [sp, #-8]!
   148dc:	str	lr, [sp, #4]
   148e0:	mov	r2, #1
   148e4:	bl	14870 <__assert_fail@plt+0x396c>
   148e8:	ldr	r4, [sp]
   148ec:	add	sp, sp, #4
   148f0:	pop	{pc}		; (ldr pc, [sp], #4)
   148f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   148f8:	strd	r6, [sp, #8]
   148fc:	str	r8, [sp, #16]
   14900:	str	lr, [sp, #20]
   14904:	mov	r5, r1
   14908:	ldr	lr, [sp, #24]
   1490c:	ldr	ip, [r1]
   14910:	asr	r4, ip, #1
   14914:	adds	r4, ip, r4
   14918:	movvs	r1, #1
   1491c:	movvc	r1, #0
   14920:	cmp	r1, #0
   14924:	mvnne	r4, #-2147483648	; 0x80000000
   14928:	mvn	r8, r3
   1492c:	lsr	r8, r8, #31
   14930:	cmp	r3, r4
   14934:	movge	r1, #0
   14938:	andlt	r1, r8, #1
   1493c:	cmp	r1, #0
   14940:	movne	r4, r3
   14944:	smull	r6, r7, r4, lr
   14948:	asr	r1, r6, #31
   1494c:	cmp	r1, r7
   14950:	bne	14968 <__assert_fail@plt+0x3a64>
   14954:	mov	r1, r6
   14958:	cmp	r6, #63	; 0x3f
   1495c:	movle	r1, #64	; 0x40
   14960:	ble	1496c <__assert_fail@plt+0x3a68>
   14964:	b	14978 <__assert_fail@plt+0x3a74>
   14968:	mvn	r1, #-2147483648	; 0x80000000
   1496c:	sdiv	r4, r1, lr
   14970:	mls	r6, lr, r4, r1
   14974:	sub	r1, r1, r6
   14978:	cmp	r0, #0
   1497c:	moveq	r6, #0
   14980:	streq	r6, [r5]
   14984:	sub	r6, r4, ip
   14988:	cmp	r6, r2
   1498c:	bge	149c4 <__assert_fail@plt+0x3ac0>
   14990:	adds	r2, ip, r2
   14994:	mov	r4, r2
   14998:	bvs	149e0 <__assert_fail@plt+0x3adc>
   1499c:	cmp	r2, r3
   149a0:	movle	r3, #0
   149a4:	andgt	r3, r8, #1
   149a8:	cmp	r3, #0
   149ac:	bne	149e0 <__assert_fail@plt+0x3adc>
   149b0:	smull	r2, r3, r2, lr
   149b4:	asr	ip, r2, #31
   149b8:	mov	r1, r2
   149bc:	cmp	ip, r3
   149c0:	bne	149e0 <__assert_fail@plt+0x3adc>
   149c4:	bl	14708 <__assert_fail@plt+0x3804>
   149c8:	str	r4, [r5]
   149cc:	ldrd	r4, [sp]
   149d0:	ldrd	r6, [sp, #8]
   149d4:	ldr	r8, [sp, #16]
   149d8:	add	sp, sp, #20
   149dc:	pop	{pc}		; (ldr pc, [sp], #4)
   149e0:	bl	14b3c <__assert_fail@plt+0x3c38>
   149e4:	str	r4, [sp, #-8]!
   149e8:	str	lr, [sp, #4]
   149ec:	bl	1535c <__assert_fail@plt+0x4458>
   149f0:	cmp	r0, #0
   149f4:	beq	14a04 <__assert_fail@plt+0x3b00>
   149f8:	ldr	r4, [sp]
   149fc:	add	sp, sp, #4
   14a00:	pop	{pc}		; (ldr pc, [sp], #4)
   14a04:	bl	14b3c <__assert_fail@plt+0x3c38>
   14a08:	str	r4, [sp, #-8]!
   14a0c:	str	lr, [sp, #4]
   14a10:	mov	r1, #1
   14a14:	bl	149e4 <__assert_fail@plt+0x3ae0>
   14a18:	ldr	r4, [sp]
   14a1c:	add	sp, sp, #4
   14a20:	pop	{pc}		; (ldr pc, [sp], #4)
   14a24:	str	r4, [sp, #-8]!
   14a28:	str	lr, [sp, #4]
   14a2c:	bl	1535c <__assert_fail@plt+0x4458>
   14a30:	cmp	r0, #0
   14a34:	beq	14a44 <__assert_fail@plt+0x3b40>
   14a38:	ldr	r4, [sp]
   14a3c:	add	sp, sp, #4
   14a40:	pop	{pc}		; (ldr pc, [sp], #4)
   14a44:	bl	14b3c <__assert_fail@plt+0x3c38>
   14a48:	str	r4, [sp, #-8]!
   14a4c:	str	lr, [sp, #4]
   14a50:	mov	r1, #1
   14a54:	bl	14a24 <__assert_fail@plt+0x3b20>
   14a58:	ldr	r4, [sp]
   14a5c:	add	sp, sp, #4
   14a60:	pop	{pc}		; (ldr pc, [sp], #4)
   14a64:	strd	r4, [sp, #-16]!
   14a68:	str	r6, [sp, #8]
   14a6c:	str	lr, [sp, #12]
   14a70:	mov	r5, r0
   14a74:	mov	r4, r1
   14a78:	mov	r0, r1
   14a7c:	bl	146a8 <__assert_fail@plt+0x37a4>
   14a80:	mov	r2, r4
   14a84:	mov	r1, r5
   14a88:	bl	10d00 <memcpy@plt>
   14a8c:	ldrd	r4, [sp]
   14a90:	ldr	r6, [sp, #8]
   14a94:	add	sp, sp, #12
   14a98:	pop	{pc}		; (ldr pc, [sp], #4)
   14a9c:	strd	r4, [sp, #-16]!
   14aa0:	str	r6, [sp, #8]
   14aa4:	str	lr, [sp, #12]
   14aa8:	mov	r5, r0
   14aac:	mov	r4, r1
   14ab0:	mov	r0, r1
   14ab4:	bl	146cc <__assert_fail@plt+0x37c8>
   14ab8:	mov	r2, r4
   14abc:	mov	r1, r5
   14ac0:	bl	10d00 <memcpy@plt>
   14ac4:	ldrd	r4, [sp]
   14ac8:	ldr	r6, [sp, #8]
   14acc:	add	sp, sp, #12
   14ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad4:	strd	r4, [sp, #-16]!
   14ad8:	str	r6, [sp, #8]
   14adc:	str	lr, [sp, #12]
   14ae0:	mov	r5, r0
   14ae4:	mov	r4, r1
   14ae8:	add	r0, r1, #1
   14aec:	bl	146cc <__assert_fail@plt+0x37c8>
   14af0:	mov	r2, #0
   14af4:	strb	r2, [r0, r4]
   14af8:	mov	r2, r4
   14afc:	mov	r1, r5
   14b00:	bl	10d00 <memcpy@plt>
   14b04:	ldrd	r4, [sp]
   14b08:	ldr	r6, [sp, #8]
   14b0c:	add	sp, sp, #12
   14b10:	pop	{pc}		; (ldr pc, [sp], #4)
   14b14:	str	r4, [sp, #-8]!
   14b18:	str	lr, [sp, #4]
   14b1c:	mov	r4, r0
   14b20:	bl	10e14 <strlen@plt>
   14b24:	add	r1, r0, #1
   14b28:	mov	r0, r4
   14b2c:	bl	14a64 <__assert_fail@plt+0x3b60>
   14b30:	ldr	r4, [sp]
   14b34:	add	sp, sp, #4
   14b38:	pop	{pc}		; (ldr pc, [sp], #4)
   14b3c:	str	r4, [sp, #-8]!
   14b40:	str	lr, [sp, #4]
   14b44:	movw	r3, #28908	; 0x70ec
   14b48:	movt	r3, #2
   14b4c:	ldr	r4, [r3]
   14b50:	mov	r2, #5
   14b54:	movw	r1, #24792	; 0x60d8
   14b58:	movt	r1, #1
   14b5c:	mov	r0, #0
   14b60:	bl	10d48 <dcgettext@plt>
   14b64:	mov	r3, r0
   14b68:	movw	r2, #23712	; 0x5ca0
   14b6c:	movt	r2, #1
   14b70:	mov	r1, #0
   14b74:	mov	r0, r4
   14b78:	bl	10db4 <error@plt>
   14b7c:	bl	10ef8 <abort@plt>
   14b80:	strd	r4, [sp, #-16]!
   14b84:	str	r6, [sp, #8]
   14b88:	str	lr, [sp, #12]
   14b8c:	sub	sp, sp, #16
   14b90:	mov	r6, r0
   14b94:	mov	r4, r2
   14b98:	mov	r5, r3
   14b9c:	ldr	r3, [sp, #40]	; 0x28
   14ba0:	str	r3, [sp]
   14ba4:	add	r3, sp, #8
   14ba8:	mov	r2, r1
   14bac:	mov	r1, #0
   14bb0:	bl	14e0c <__assert_fail@plt+0x3f08>
   14bb4:	cmp	r0, #0
   14bb8:	bne	14c30 <__assert_fail@plt+0x3d2c>
   14bbc:	ldrd	r0, [sp, #8]
   14bc0:	ldrd	r2, [sp, #32]
   14bc4:	cmp	r1, r3
   14bc8:	cmpeq	r0, r2
   14bcc:	movhi	r3, #1
   14bd0:	movls	r3, #0
   14bd4:	cmp	r1, r5
   14bd8:	cmpeq	r0, r4
   14bdc:	orrcc	r3, r3, #1
   14be0:	cmp	r3, #0
   14be4:	bne	14bfc <__assert_fail@plt+0x3cf8>
   14be8:	add	sp, sp, #16
   14bec:	ldrd	r4, [sp]
   14bf0:	ldr	r6, [sp, #8]
   14bf4:	add	sp, sp, #12
   14bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bfc:	mvn	r2, #-1073741824	; 0xc0000000
   14c00:	mov	r3, #0
   14c04:	cmp	r1, r3
   14c08:	cmpeq	r0, r2
   14c0c:	bls	14c20 <__assert_fail@plt+0x3d1c>
   14c10:	bl	10e2c <__errno_location@plt>
   14c14:	mov	r3, #75	; 0x4b
   14c18:	str	r3, [r0]
   14c1c:	b	14c40 <__assert_fail@plt+0x3d3c>
   14c20:	bl	10e2c <__errno_location@plt>
   14c24:	mov	r3, #34	; 0x22
   14c28:	str	r3, [r0]
   14c2c:	b	14c40 <__assert_fail@plt+0x3d3c>
   14c30:	cmp	r0, #1
   14c34:	beq	14c84 <__assert_fail@plt+0x3d80>
   14c38:	cmp	r0, #3
   14c3c:	beq	14c94 <__assert_fail@plt+0x3d90>
   14c40:	ldr	r3, [sp, #48]	; 0x30
   14c44:	cmp	r3, #0
   14c48:	moveq	r3, #1
   14c4c:	str	r3, [sp, #48]	; 0x30
   14c50:	bl	10e2c <__errno_location@plt>
   14c54:	ldr	r4, [r0]
   14c58:	cmp	r4, #22
   14c5c:	moveq	r4, #0
   14c60:	mov	r0, r6
   14c64:	bl	140d4 <__assert_fail@plt+0x31d0>
   14c68:	str	r0, [sp]
   14c6c:	ldr	r3, [sp, #44]	; 0x2c
   14c70:	movw	r2, #23708	; 0x5c9c
   14c74:	movt	r2, #1
   14c78:	mov	r1, r4
   14c7c:	ldr	r0, [sp, #48]	; 0x30
   14c80:	bl	10db4 <error@plt>
   14c84:	bl	10e2c <__errno_location@plt>
   14c88:	mov	r3, #75	; 0x4b
   14c8c:	str	r3, [r0]
   14c90:	b	14c40 <__assert_fail@plt+0x3d3c>
   14c94:	bl	10e2c <__errno_location@plt>
   14c98:	mov	r3, #0
   14c9c:	str	r3, [r0]
   14ca0:	b	14c40 <__assert_fail@plt+0x3d3c>
   14ca4:	strd	r4, [sp, #-12]!
   14ca8:	str	lr, [sp, #8]
   14cac:	sub	sp, sp, #28
   14cb0:	ldr	r1, [sp, #56]	; 0x38
   14cb4:	str	r1, [sp, #16]
   14cb8:	ldr	r1, [sp, #52]	; 0x34
   14cbc:	str	r1, [sp, #12]
   14cc0:	ldr	r1, [sp, #48]	; 0x30
   14cc4:	str	r1, [sp, #8]
   14cc8:	ldrd	r4, [sp, #40]	; 0x28
   14ccc:	strd	r4, [sp]
   14cd0:	mov	r1, #10
   14cd4:	bl	14b80 <__assert_fail@plt+0x3c7c>
   14cd8:	add	sp, sp, #28
   14cdc:	ldrd	r4, [sp]
   14ce0:	add	sp, sp, #8
   14ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ce8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14cec:	strd	r6, [sp, #8]
   14cf0:	strd	r8, [sp, #16]
   14cf4:	strd	sl, [sp, #24]
   14cf8:	str	lr, [sp, #32]
   14cfc:	sub	sp, sp, #12
   14d00:	str	r0, [sp, #4]
   14d04:	cmp	r2, #0
   14d08:	beq	14e04 <__assert_fail@plt+0x3f00>
   14d0c:	sub	ip, r2, #1
   14d10:	ldrd	r2, [r0]
   14d14:	mov	r0, #0
   14d18:	mov	r8, r1
   14d1c:	asr	r9, r1, #31
   14d20:	str	r1, [sp]
   14d24:	b	14d74 <__assert_fail@plt+0x3e70>
   14d28:	orrs	r4, r2, r3
   14d2c:	movne	lr, #1
   14d30:	b	14d84 <__assert_fail@plt+0x3e80>
   14d34:	mov	sl, r3
   14d38:	ldr	fp, [sp]
   14d3c:	umull	r6, r7, r1, r2
   14d40:	mov	r4, r7
   14d44:	mov	r5, #0
   14d48:	umlal	r4, r5, sl, fp
   14d4c:	cmp	r5, #0
   14d50:	bne	14db8 <__assert_fail@plt+0x3eb4>
   14d54:	cmp	lr, #0
   14d58:	bne	14dd0 <__assert_fail@plt+0x3ecc>
   14d5c:	mov	r2, r6
   14d60:	mov	r3, r4
   14d64:	orr	r0, r0, lr
   14d68:	sub	ip, ip, #1
   14d6c:	cmn	ip, #1
   14d70:	beq	14de0 <__assert_fail@plt+0x3edc>
   14d74:	mov	lr, #0
   14d78:	cmp	r8, #0
   14d7c:	sbcs	r4, r9, #0
   14d80:	blt	14d28 <__assert_fail@plt+0x3e24>
   14d84:	cmp	r9, #0
   14d88:	bne	14da4 <__assert_fail@plt+0x3ea0>
   14d8c:	cmp	r3, #0
   14d90:	bne	14d34 <__assert_fail@plt+0x3e30>
   14d94:	umull	r2, r3, r1, r2
   14d98:	mov	r6, r2
   14d9c:	mov	r4, r3
   14da0:	b	14d54 <__assert_fail@plt+0x3e50>
   14da4:	cmp	r3, #0
   14da8:	bne	14db8 <__assert_fail@plt+0x3eb4>
   14dac:	mov	sl, r9
   14db0:	mov	fp, r2
   14db4:	b	14d3c <__assert_fail@plt+0x3e38>
   14db8:	mul	r4, r1, r3
   14dbc:	mla	r4, r2, r9, r4
   14dc0:	umull	r6, r7, r1, r2
   14dc4:	add	r4, r4, r7
   14dc8:	mov	lr, #1
   14dcc:	b	14d54 <__assert_fail@plt+0x3e50>
   14dd0:	mvn	r2, #0
   14dd4:	mvn	r3, #0
   14dd8:	mov	lr, #1
   14ddc:	b	14d64 <__assert_fail@plt+0x3e60>
   14de0:	ldr	r1, [sp, #4]
   14de4:	strd	r2, [r1]
   14de8:	add	sp, sp, #12
   14dec:	ldrd	r4, [sp]
   14df0:	ldrd	r6, [sp, #8]
   14df4:	ldrd	r8, [sp, #16]
   14df8:	ldrd	sl, [sp, #24]
   14dfc:	add	sp, sp, #32
   14e00:	pop	{pc}		; (ldr pc, [sp], #4)
   14e04:	mov	r0, #0
   14e08:	b	14de8 <__assert_fail@plt+0x3ee4>
   14e0c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14e10:	strd	r6, [sp, #8]
   14e14:	strd	r8, [sp, #16]
   14e18:	str	lr, [sp, #24]
   14e1c:	sub	sp, sp, #20
   14e20:	cmp	r2, #36	; 0x24
   14e24:	bhi	14e78 <__assert_fail@plt+0x3f74>
   14e28:	mov	r5, r0
   14e2c:	mov	r6, r1
   14e30:	mov	r7, r2
   14e34:	mov	r9, r3
   14e38:	cmp	r1, #0
   14e3c:	addeq	r6, sp, #12
   14e40:	bl	10e2c <__errno_location@plt>
   14e44:	mov	r8, r0
   14e48:	mov	r3, #0
   14e4c:	str	r3, [r0]
   14e50:	ldrb	r4, [r5]
   14e54:	bl	10dfc <__ctype_b_loc@plt>
   14e58:	ldr	r1, [r0]
   14e5c:	mov	r2, r5
   14e60:	lsl	r3, r4, #1
   14e64:	ldrh	r3, [r1, r3]
   14e68:	tst	r3, #8192	; 0x2000
   14e6c:	beq	14e98 <__assert_fail@plt+0x3f94>
   14e70:	ldrb	r4, [r2, #1]!
   14e74:	b	14e60 <__assert_fail@plt+0x3f5c>
   14e78:	movw	r3, #24812	; 0x60ec
   14e7c:	movt	r3, #1
   14e80:	mov	r2, #85	; 0x55
   14e84:	movw	r1, #24824	; 0x60f8
   14e88:	movt	r1, #1
   14e8c:	movw	r0, #24840	; 0x6108
   14e90:	movt	r0, #1
   14e94:	bl	10f04 <__assert_fail@plt>
   14e98:	cmp	r4, #45	; 0x2d
   14e9c:	moveq	r4, #4
   14ea0:	beq	15034 <__assert_fail@plt+0x4130>
   14ea4:	mov	r3, #0
   14ea8:	mov	r2, r7
   14eac:	mov	r1, r6
   14eb0:	mov	r0, r5
   14eb4:	bl	10d0c <__strtoull_internal@plt>
   14eb8:	strd	r0, [sp]
   14ebc:	ldr	r7, [r6]
   14ec0:	cmp	r7, r5
   14ec4:	beq	14ee8 <__assert_fail@plt+0x3fe4>
   14ec8:	ldr	r3, [r8]
   14ecc:	cmp	r3, #0
   14ed0:	beq	1500c <__assert_fail@plt+0x4108>
   14ed4:	cmp	r3, #34	; 0x22
   14ed8:	moveq	r4, #1
   14edc:	beq	15010 <__assert_fail@plt+0x410c>
   14ee0:	mov	r4, #4
   14ee4:	b	15034 <__assert_fail@plt+0x4130>
   14ee8:	ldr	r3, [sp, #48]	; 0x30
   14eec:	cmp	r3, #0
   14ef0:	beq	1534c <__assert_fail@plt+0x4448>
   14ef4:	ldrb	r1, [r5]
   14ef8:	cmp	r1, #0
   14efc:	moveq	r4, #4
   14f00:	beq	15034 <__assert_fail@plt+0x4130>
   14f04:	mov	r0, r3
   14f08:	bl	10e20 <strchr@plt>
   14f0c:	cmp	r0, #0
   14f10:	beq	15354 <__assert_fail@plt+0x4450>
   14f14:	mov	r2, #1
   14f18:	mov	r3, #0
   14f1c:	strd	r2, [sp]
   14f20:	ldrb	r5, [r7]
   14f24:	mov	r4, #0
   14f28:	mov	r1, r5
   14f2c:	ldr	r0, [sp, #48]	; 0x30
   14f30:	bl	10e20 <strchr@plt>
   14f34:	cmp	r0, #0
   14f38:	beq	15050 <__assert_fail@plt+0x414c>
   14f3c:	sub	r3, r5, #69	; 0x45
   14f40:	cmp	r3, #47	; 0x2f
   14f44:	ldrls	pc, [pc, r3, lsl #2]
   14f48:	b	1519c <__assert_fail@plt+0x4298>
   14f4c:	andeq	r5, r1, r0, rrx
   14f50:	muleq	r1, ip, r1
   14f54:	andeq	r5, r1, r0, rrx
   14f58:	muleq	r1, ip, r1
   14f5c:	muleq	r1, ip, r1
   14f60:	muleq	r1, ip, r1
   14f64:	andeq	r5, r1, r0, rrx
   14f68:	muleq	r1, ip, r1
   14f6c:	andeq	r5, r1, r0, rrx
   14f70:	muleq	r1, ip, r1
   14f74:	muleq	r1, ip, r1
   14f78:	andeq	r5, r1, r0, rrx
   14f7c:	muleq	r1, ip, r1
   14f80:	muleq	r1, ip, r1
   14f84:	muleq	r1, ip, r1
   14f88:	andeq	r5, r1, r0, rrx
   14f8c:	muleq	r1, ip, r1
   14f90:	muleq	r1, ip, r1
   14f94:	muleq	r1, ip, r1
   14f98:	muleq	r1, ip, r1
   14f9c:	andeq	r5, r1, r0, rrx
   14fa0:	andeq	r5, r1, r0, rrx
   14fa4:	muleq	r1, ip, r1
   14fa8:	muleq	r1, ip, r1
   14fac:	muleq	r1, ip, r1
   14fb0:	muleq	r1, ip, r1
   14fb4:	muleq	r1, ip, r1
   14fb8:	muleq	r1, ip, r1
   14fbc:	muleq	r1, ip, r1
   14fc0:	muleq	r1, ip, r1
   14fc4:	muleq	r1, ip, r1
   14fc8:	muleq	r1, ip, r1
   14fcc:	muleq	r1, ip, r1
   14fd0:	muleq	r1, ip, r1
   14fd4:	andeq	r5, r1, r0, rrx
   14fd8:	muleq	r1, ip, r1
   14fdc:	muleq	r1, ip, r1
   14fe0:	muleq	r1, ip, r1
   14fe4:	andeq	r5, r1, r0, rrx
   14fe8:	muleq	r1, ip, r1
   14fec:	andeq	r5, r1, r0, rrx
   14ff0:	muleq	r1, ip, r1
   14ff4:	muleq	r1, ip, r1
   14ff8:	muleq	r1, ip, r1
   14ffc:	muleq	r1, ip, r1
   15000:	muleq	r1, ip, r1
   15004:	muleq	r1, ip, r1
   15008:	andeq	r5, r1, r0, rrx
   1500c:	mov	r4, #0
   15010:	ldr	r3, [sp, #48]	; 0x30
   15014:	cmp	r3, #0
   15018:	strdeq	r0, [r9]
   1501c:	beq	15034 <__assert_fail@plt+0x4130>
   15020:	ldrb	r5, [r7]
   15024:	cmp	r5, #0
   15028:	bne	14f28 <__assert_fail@plt+0x4024>
   1502c:	ldrd	r2, [sp]
   15030:	strd	r2, [r9]
   15034:	mov	r0, r4
   15038:	add	sp, sp, #20
   1503c:	ldrd	r4, [sp]
   15040:	ldrd	r6, [sp, #8]
   15044:	ldrd	r8, [sp, #16]
   15048:	add	sp, sp, #24
   1504c:	pop	{pc}		; (ldr pc, [sp], #4)
   15050:	ldrd	r2, [sp]
   15054:	strd	r2, [r9]
   15058:	orr	r4, r4, #2
   1505c:	b	15034 <__assert_fail@plt+0x4130>
   15060:	mov	r1, #48	; 0x30
   15064:	ldr	r0, [sp, #48]	; 0x30
   15068:	bl	10e20 <strchr@plt>
   1506c:	cmp	r0, #0
   15070:	beq	151a8 <__assert_fail@plt+0x42a4>
   15074:	ldrb	r3, [r7, #1]
   15078:	cmp	r3, #68	; 0x44
   1507c:	beq	151b4 <__assert_fail@plt+0x42b0>
   15080:	cmp	r3, #105	; 0x69
   15084:	beq	15184 <__assert_fail@plt+0x4280>
   15088:	cmp	r3, #66	; 0x42
   1508c:	moveq	r7, #2
   15090:	movne	r7, #1
   15094:	moveq	r1, #1000	; 0x3e8
   15098:	movne	r1, #1024	; 0x400
   1509c:	sub	r5, r5, #66	; 0x42
   150a0:	cmp	r5, #53	; 0x35
   150a4:	ldrls	pc, [pc, r5, lsl #2]
   150a8:	b	15318 <__assert_fail@plt+0x4414>
   150ac:	andeq	r5, r1, r8, lsl #4
   150b0:	andeq	r5, r1, r8, lsl r3
   150b4:	andeq	r5, r1, r8, lsl r3
   150b8:	andeq	r5, r1, r0, asr r2
   150bc:	andeq	r5, r1, r8, lsl r3
   150c0:	andeq	r5, r1, r0, ror #4
   150c4:	andeq	r5, r1, r8, lsl r3
   150c8:	andeq	r5, r1, r8, lsl r3
   150cc:	andeq	r5, r1, r8, lsl r3
   150d0:	andeq	r5, r1, r0, ror r2
   150d4:	andeq	r5, r1, r8, lsl r3
   150d8:	andeq	r5, r1, r0, lsl #5
   150dc:	andeq	r5, r1, r8, lsl r3
   150e0:	andeq	r5, r1, r8, lsl r3
   150e4:	muleq	r1, r0, r2
   150e8:	andeq	r5, r1, r8, lsl r3
   150ec:	andeq	r5, r1, r8, lsl r3
   150f0:	andeq	r5, r1, r8, lsl r3
   150f4:	andeq	r5, r1, r0, lsr #5
   150f8:	andeq	r5, r1, r8, lsl r3
   150fc:	andeq	r5, r1, r8, lsl r3
   15100:	andeq	r5, r1, r8, lsl r3
   15104:	andeq	r5, r1, r8, lsl r3
   15108:	strdeq	r5, [r1], -r8
   1510c:	andeq	r5, r1, r8, lsl #6
   15110:	andeq	r5, r1, r8, lsl r3
   15114:	andeq	r5, r1, r8, lsl r3
   15118:	andeq	r5, r1, r8, lsl r3
   1511c:	andeq	r5, r1, r8, lsl r3
   15120:	andeq	r5, r1, r8, lsl r3
   15124:	andeq	r5, r1, r8, lsl r3
   15128:	andeq	r5, r1, r8, lsl r3
   1512c:	andeq	r5, r1, r0, asr #3
   15130:	andeq	r5, r1, r8, lsr #6
   15134:	andeq	r5, r1, r8, lsl r3
   15138:	andeq	r5, r1, r8, lsl r3
   1513c:	andeq	r5, r1, r8, lsl r3
   15140:	andeq	r5, r1, r0, ror #4
   15144:	andeq	r5, r1, r8, lsl r3
   15148:	andeq	r5, r1, r8, lsl r3
   1514c:	andeq	r5, r1, r8, lsl r3
   15150:	andeq	r5, r1, r0, ror r2
   15154:	andeq	r5, r1, r8, lsl r3
   15158:	andeq	r5, r1, r0, lsl #5
   1515c:	andeq	r5, r1, r8, lsl r3
   15160:	andeq	r5, r1, r8, lsl r3
   15164:	andeq	r5, r1, r8, lsl r3
   15168:	andeq	r5, r1, r8, lsl r3
   1516c:	andeq	r5, r1, r8, lsl r3
   15170:	andeq	r5, r1, r8, lsl r3
   15174:	andeq	r5, r1, r0, lsr #5
   15178:	andeq	r5, r1, r8, lsl r3
   1517c:	andeq	r5, r1, r8, lsl r3
   15180:			; <UNDEFINED> instruction: 0x000152b0
   15184:	ldrb	r3, [r7, #2]
   15188:	cmp	r3, #66	; 0x42
   1518c:	movne	r7, #1
   15190:	moveq	r7, #3
   15194:	mov	r1, #1024	; 0x400
   15198:	b	1509c <__assert_fail@plt+0x4198>
   1519c:	mov	r7, #1
   151a0:	mov	r1, #1024	; 0x400
   151a4:	b	1509c <__assert_fail@plt+0x4198>
   151a8:	mov	r7, #1
   151ac:	mov	r1, #1024	; 0x400
   151b0:	b	1509c <__assert_fail@plt+0x4198>
   151b4:	mov	r7, #2
   151b8:	mov	r1, #1000	; 0x3e8
   151bc:	b	1509c <__assert_fail@plt+0x4198>
   151c0:	ldr	r3, [sp]
   151c4:	ldr	ip, [sp, #4]
   151c8:	lsl	r2, ip, #9
   151cc:	orr	r2, r2, r3, lsr #23
   151d0:	lsl	r3, r3, #9
   151d4:	mov	r0, #0
   151d8:	mov	r1, r0
   151dc:	lsr	r0, ip, #23
   151e0:	orrs	r1, r0, r1
   151e4:	streq	r3, [sp]
   151e8:	streq	r2, [sp, #4]
   151ec:	moveq	r0, #0
   151f0:	beq	1532c <__assert_fail@plt+0x4428>
   151f4:	mvn	r2, #0
   151f8:	mvn	r3, #0
   151fc:	strd	r2, [sp]
   15200:	mov	r0, #1
   15204:	b	1532c <__assert_fail@plt+0x4428>
   15208:	ldr	r3, [sp]
   1520c:	ldr	ip, [sp, #4]
   15210:	lsl	r2, ip, #10
   15214:	orr	r2, r2, r3, lsr #22
   15218:	lsl	r3, r3, #10
   1521c:	mov	r0, #0
   15220:	mov	r1, r0
   15224:	lsr	r0, ip, #22
   15228:	orrs	r1, r0, r1
   1522c:	streq	r3, [sp]
   15230:	streq	r2, [sp, #4]
   15234:	moveq	r0, #0
   15238:	beq	1532c <__assert_fail@plt+0x4428>
   1523c:	mvn	r2, #0
   15240:	mvn	r3, #0
   15244:	strd	r2, [sp]
   15248:	mov	r0, #1
   1524c:	b	1532c <__assert_fail@plt+0x4428>
   15250:	mov	r2, #6
   15254:	mov	r0, sp
   15258:	bl	14ce8 <__assert_fail@plt+0x3de4>
   1525c:	b	1532c <__assert_fail@plt+0x4428>
   15260:	mov	r2, #3
   15264:	mov	r0, sp
   15268:	bl	14ce8 <__assert_fail@plt+0x3de4>
   1526c:	b	1532c <__assert_fail@plt+0x4428>
   15270:	mov	r2, #1
   15274:	mov	r0, sp
   15278:	bl	14ce8 <__assert_fail@plt+0x3de4>
   1527c:	b	1532c <__assert_fail@plt+0x4428>
   15280:	mov	r2, #2
   15284:	mov	r0, sp
   15288:	bl	14ce8 <__assert_fail@plt+0x3de4>
   1528c:	b	1532c <__assert_fail@plt+0x4428>
   15290:	mov	r2, #5
   15294:	mov	r0, sp
   15298:	bl	14ce8 <__assert_fail@plt+0x3de4>
   1529c:	b	1532c <__assert_fail@plt+0x4428>
   152a0:	mov	r2, #4
   152a4:	mov	r0, sp
   152a8:	bl	14ce8 <__assert_fail@plt+0x3de4>
   152ac:	b	1532c <__assert_fail@plt+0x4428>
   152b0:	ldr	r3, [sp]
   152b4:	ldr	r2, [sp, #4]
   152b8:	adds	r3, r3, r3
   152bc:	adc	r2, r2, r2
   152c0:	mov	r1, #0
   152c4:	mov	r0, r1
   152c8:	ldr	r1, [sp, #4]
   152cc:	lsr	r1, r1, #31
   152d0:	orrs	r1, r1, r0
   152d4:	streq	r3, [sp]
   152d8:	streq	r2, [sp, #4]
   152dc:	moveq	r0, #0
   152e0:	beq	1532c <__assert_fail@plt+0x4428>
   152e4:	mvn	r2, #0
   152e8:	mvn	r3, #0
   152ec:	strd	r2, [sp]
   152f0:	mov	r0, #1
   152f4:	b	1532c <__assert_fail@plt+0x4428>
   152f8:	mov	r2, #8
   152fc:	mov	r0, sp
   15300:	bl	14ce8 <__assert_fail@plt+0x3de4>
   15304:	b	1532c <__assert_fail@plt+0x4428>
   15308:	mov	r2, #7
   1530c:	mov	r0, sp
   15310:	bl	14ce8 <__assert_fail@plt+0x3de4>
   15314:	b	1532c <__assert_fail@plt+0x4428>
   15318:	ldrd	r2, [sp]
   1531c:	strd	r2, [r9]
   15320:	orr	r4, r4, #2
   15324:	b	15034 <__assert_fail@plt+0x4130>
   15328:	mov	r0, #0
   1532c:	orr	r4, r4, r0
   15330:	ldr	r3, [r6]
   15334:	add	r2, r3, r7
   15338:	str	r2, [r6]
   1533c:	ldrb	r3, [r3, r7]
   15340:	cmp	r3, #0
   15344:	orrne	r4, r4, #2
   15348:	b	1502c <__assert_fail@plt+0x4128>
   1534c:	mov	r4, #4
   15350:	b	15034 <__assert_fail@plt+0x4130>
   15354:	mov	r4, #4
   15358:	b	15034 <__assert_fail@plt+0x4130>
   1535c:	strd	r4, [sp, #-16]!
   15360:	str	r6, [sp, #8]
   15364:	str	lr, [sp, #12]
   15368:	cmp	r1, #0
   1536c:	cmpne	r0, #0
   15370:	beq	153ac <__assert_fail@plt+0x44a8>
   15374:	mov	r2, r0
   15378:	mov	r3, r1
   1537c:	umull	r4, r5, r0, r1
   15380:	adds	r1, r5, #0
   15384:	movne	r1, #1
   15388:	cmp	r4, #0
   1538c:	movlt	r1, #1
   15390:	cmp	r1, #0
   15394:	beq	153b4 <__assert_fail@plt+0x44b0>
   15398:	bl	10e2c <__errno_location@plt>
   1539c:	mov	r3, #12
   153a0:	str	r3, [r0]
   153a4:	mov	r0, #0
   153a8:	b	153c0 <__assert_fail@plt+0x44bc>
   153ac:	mov	r3, #1
   153b0:	mov	r2, r3
   153b4:	mov	r1, r3
   153b8:	mov	r0, r2
   153bc:	bl	10ca0 <calloc@plt>
   153c0:	ldrd	r4, [sp]
   153c4:	ldr	r6, [sp, #8]
   153c8:	add	sp, sp, #12
   153cc:	pop	{pc}		; (ldr pc, [sp], #4)
   153d0:	str	r4, [sp, #-8]!
   153d4:	str	lr, [sp, #4]
   153d8:	cmp	r0, #0
   153dc:	beq	153f8 <__assert_fail@plt+0x44f4>
   153e0:	bge	153fc <__assert_fail@plt+0x44f8>
   153e4:	bl	10e2c <__errno_location@plt>
   153e8:	mov	r3, #12
   153ec:	str	r3, [r0]
   153f0:	mov	r0, #0
   153f4:	b	15400 <__assert_fail@plt+0x44fc>
   153f8:	mov	r0, #1
   153fc:	bl	10dc0 <malloc@plt>
   15400:	ldr	r4, [sp]
   15404:	add	sp, sp, #4
   15408:	pop	{pc}		; (ldr pc, [sp], #4)
   1540c:	str	r4, [sp, #-8]!
   15410:	str	lr, [sp, #4]
   15414:	cmp	r0, #0
   15418:	beq	1543c <__assert_fail@plt+0x4538>
   1541c:	cmp	r1, #0
   15420:	beq	15448 <__assert_fail@plt+0x4544>
   15424:	cmp	r1, #0
   15428:	blt	15454 <__assert_fail@plt+0x4550>
   1542c:	bl	10d54 <realloc@plt>
   15430:	ldr	r4, [sp]
   15434:	add	sp, sp, #4
   15438:	pop	{pc}		; (ldr pc, [sp], #4)
   1543c:	mov	r0, r1
   15440:	bl	153d0 <__assert_fail@plt+0x44cc>
   15444:	b	15430 <__assert_fail@plt+0x452c>
   15448:	bl	154f4 <__assert_fail@plt+0x45f0>
   1544c:	mov	r0, #0
   15450:	b	15430 <__assert_fail@plt+0x452c>
   15454:	bl	10e2c <__errno_location@plt>
   15458:	mov	r3, #12
   1545c:	str	r3, [r0]
   15460:	mov	r0, #0
   15464:	b	15430 <__assert_fail@plt+0x452c>
   15468:	strd	r4, [sp, #-16]!
   1546c:	str	r6, [sp, #8]
   15470:	str	lr, [sp, #12]
   15474:	mov	r5, r0
   15478:	bl	10d9c <__fpending@plt>
   1547c:	mov	r6, r0
   15480:	ldr	r4, [r5]
   15484:	and	r4, r4, #32
   15488:	mov	r0, r5
   1548c:	bl	11bec <__assert_fail@plt+0xce8>
   15490:	cmp	r4, #0
   15494:	bne	154c8 <__assert_fail@plt+0x45c4>
   15498:	cmp	r0, #0
   1549c:	beq	154b8 <__assert_fail@plt+0x45b4>
   154a0:	cmp	r6, #0
   154a4:	bne	154e4 <__assert_fail@plt+0x45e0>
   154a8:	bl	10e2c <__errno_location@plt>
   154ac:	ldr	r0, [r0]
   154b0:	subs	r0, r0, #9
   154b4:	mvnne	r0, #0
   154b8:	ldrd	r4, [sp]
   154bc:	ldr	r6, [sp, #8]
   154c0:	add	sp, sp, #12
   154c4:	pop	{pc}		; (ldr pc, [sp], #4)
   154c8:	cmp	r0, #0
   154cc:	bne	154ec <__assert_fail@plt+0x45e8>
   154d0:	bl	10e2c <__errno_location@plt>
   154d4:	mov	r3, #0
   154d8:	str	r3, [r0]
   154dc:	mvn	r0, #0
   154e0:	b	154b8 <__assert_fail@plt+0x45b4>
   154e4:	mvn	r0, #0
   154e8:	b	154b8 <__assert_fail@plt+0x45b4>
   154ec:	mvn	r0, #0
   154f0:	b	154b8 <__assert_fail@plt+0x45b4>
   154f4:	strd	r4, [sp, #-12]!
   154f8:	str	lr, [sp, #8]
   154fc:	sub	sp, sp, #12
   15500:	mov	r5, r0
   15504:	bl	10e2c <__errno_location@plt>
   15508:	mov	r4, r0
   1550c:	ldr	r3, [r0]
   15510:	str	r3, [sp]
   15514:	str	r3, [sp, #4]
   15518:	mov	r3, #0
   1551c:	str	r3, [r0]
   15520:	mov	r0, r5
   15524:	bl	10ce8 <free@plt>
   15528:	ldr	r3, [r4]
   1552c:	clz	r3, r3
   15530:	lsr	r3, r3, #5
   15534:	add	r2, sp, #8
   15538:	add	r3, r2, r3, lsl #2
   1553c:	ldr	r3, [r3, #-8]
   15540:	str	r3, [r4]
   15544:	add	sp, sp, #12
   15548:	ldrd	r4, [sp]
   1554c:	add	sp, sp, #8
   15550:	pop	{pc}		; (ldr pc, [sp], #4)
   15554:	str	r4, [sp, #-8]!
   15558:	str	lr, [sp, #4]
   1555c:	mov	r0, #14
   15560:	bl	10ebc <nl_langinfo@plt>
   15564:	cmp	r0, #0
   15568:	beq	1558c <__assert_fail@plt+0x4688>
   1556c:	ldrb	r2, [r0]
   15570:	movw	r3, #24880	; 0x6130
   15574:	movt	r3, #1
   15578:	cmp	r2, #0
   1557c:	moveq	r0, r3
   15580:	ldr	r4, [sp]
   15584:	add	sp, sp, #4
   15588:	pop	{pc}		; (ldr pc, [sp], #4)
   1558c:	movw	r0, #24880	; 0x6130
   15590:	movt	r0, #1
   15594:	b	15580 <__assert_fail@plt+0x467c>
   15598:	strd	r4, [sp, #-20]!	; 0xffffffec
   1559c:	strd	r6, [sp, #8]
   155a0:	str	lr, [sp, #16]
   155a4:	sub	sp, sp, #12
   155a8:	mov	r7, r1
   155ac:	mov	r5, r2
   155b0:	subs	r6, r0, #0
   155b4:	addeq	r6, sp, #4
   155b8:	mov	r0, r6
   155bc:	bl	10da8 <mbrtowc@plt>
   155c0:	mov	r4, r0
   155c4:	cmp	r5, #0
   155c8:	cmnne	r0, #3
   155cc:	bhi	155e8 <__assert_fail@plt+0x46e4>
   155d0:	mov	r0, r4
   155d4:	add	sp, sp, #12
   155d8:	ldrd	r4, [sp]
   155dc:	ldrd	r6, [sp, #8]
   155e0:	add	sp, sp, #16
   155e4:	pop	{pc}		; (ldr pc, [sp], #4)
   155e8:	mov	r0, #0
   155ec:	bl	15644 <__assert_fail@plt+0x4740>
   155f0:	cmp	r0, #0
   155f4:	bne	155d0 <__assert_fail@plt+0x46cc>
   155f8:	ldrb	r3, [r7]
   155fc:	str	r3, [r6]
   15600:	mov	r4, #1
   15604:	b	155d0 <__assert_fail@plt+0x46cc>
   15608:	str	r4, [sp, #-8]!
   1560c:	str	lr, [sp, #4]
   15610:	umull	r2, r3, r1, r2
   15614:	cmp	r3, #0
   15618:	bne	15630 <__assert_fail@plt+0x472c>
   1561c:	mov	r1, r2
   15620:	bl	1540c <__assert_fail@plt+0x4508>
   15624:	ldr	r4, [sp]
   15628:	add	sp, sp, #4
   1562c:	pop	{pc}		; (ldr pc, [sp], #4)
   15630:	bl	10e2c <__errno_location@plt>
   15634:	mov	r3, #12
   15638:	str	r3, [r0]
   1563c:	mov	r0, #0
   15640:	b	15624 <__assert_fail@plt+0x4720>
   15644:	push	{lr}		; (str lr, [sp, #-4]!)
   15648:	sub	sp, sp, #268	; 0x10c
   1564c:	movw	r2, #257	; 0x101
   15650:	add	r1, sp, #4
   15654:	bl	156a0 <__assert_fail@plt+0x479c>
   15658:	cmp	r0, #0
   1565c:	movne	r0, #0
   15660:	bne	15698 <__assert_fail@plt+0x4794>
   15664:	movw	r1, #24888	; 0x6138
   15668:	movt	r1, #1
   1566c:	add	r0, sp, #4
   15670:	bl	10cb8 <strcmp@plt>
   15674:	cmp	r0, #0
   15678:	beq	15694 <__assert_fail@plt+0x4790>
   1567c:	movw	r1, #24892	; 0x613c
   15680:	movt	r1, #1
   15684:	add	r0, sp, #4
   15688:	bl	10cb8 <strcmp@plt>
   1568c:	adds	r0, r0, #0
   15690:	movne	r0, #1
   15694:	and	r0, r0, #1
   15698:	add	sp, sp, #268	; 0x10c
   1569c:	pop	{pc}		; (ldr pc, [sp], #4)
   156a0:	strd	r4, [sp, #-16]!
   156a4:	str	r6, [sp, #8]
   156a8:	str	lr, [sp, #12]
   156ac:	mov	r6, r1
   156b0:	mov	r4, r2
   156b4:	mov	r1, #0
   156b8:	bl	10ea4 <setlocale@plt>
   156bc:	subs	r5, r0, #0
   156c0:	beq	15704 <__assert_fail@plt+0x4800>
   156c4:	mov	r0, r5
   156c8:	bl	10e14 <strlen@plt>
   156cc:	cmp	r4, r0
   156d0:	bhi	15720 <__assert_fail@plt+0x481c>
   156d4:	cmp	r4, #0
   156d8:	moveq	r0, #34	; 0x22
   156dc:	beq	15734 <__assert_fail@plt+0x4830>
   156e0:	sub	r4, r4, #1
   156e4:	mov	r2, r4
   156e8:	mov	r1, r5
   156ec:	mov	r0, r6
   156f0:	bl	10d00 <memcpy@plt>
   156f4:	mov	r3, #0
   156f8:	strb	r3, [r6, r4]
   156fc:	mov	r0, #34	; 0x22
   15700:	b	15734 <__assert_fail@plt+0x4830>
   15704:	cmp	r4, #0
   15708:	moveq	r0, #22
   1570c:	beq	15734 <__assert_fail@plt+0x4830>
   15710:	mov	r3, #0
   15714:	strb	r3, [r6]
   15718:	mov	r0, #22
   1571c:	b	15734 <__assert_fail@plt+0x4830>
   15720:	add	r2, r0, #1
   15724:	mov	r1, r5
   15728:	mov	r0, r6
   1572c:	bl	10d00 <memcpy@plt>
   15730:	mov	r0, #0
   15734:	ldrd	r4, [sp]
   15738:	ldr	r6, [sp, #8]
   1573c:	add	sp, sp, #12
   15740:	pop	{pc}		; (ldr pc, [sp], #4)
   15744:	str	r4, [sp, #-8]!
   15748:	str	lr, [sp, #4]
   1574c:	mov	r1, #0
   15750:	bl	10ea4 <setlocale@plt>
   15754:	ldr	r4, [sp]
   15758:	add	sp, sp, #4
   1575c:	pop	{pc}		; (ldr pc, [sp], #4)
   15760:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15764:	mov	r7, r0
   15768:	ldr	r6, [pc, #72]	; 157b8 <__assert_fail@plt+0x48b4>
   1576c:	ldr	r5, [pc, #72]	; 157bc <__assert_fail@plt+0x48b8>
   15770:	add	r6, pc, r6
   15774:	add	r5, pc, r5
   15778:	sub	r6, r6, r5
   1577c:	mov	r8, r1
   15780:	mov	r9, r2
   15784:	bl	10c80 <calloc@plt-0x20>
   15788:	asrs	r6, r6, #2
   1578c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15790:	mov	r4, #0
   15794:	add	r4, r4, #1
   15798:	ldr	r3, [r5], #4
   1579c:	mov	r2, r9
   157a0:	mov	r1, r8
   157a4:	mov	r0, r7
   157a8:	blx	r3
   157ac:	cmp	r6, r4
   157b0:	bne	15794 <__assert_fail@plt+0x4890>
   157b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157b8:	muleq	r1, ip, r7
   157bc:	muleq	r1, r4, r7
   157c0:	bx	lr
   157c4:	ldr	r3, [pc, #12]	; 157d8 <__assert_fail@plt+0x48d4>
   157c8:	mov	r1, #0
   157cc:	add	r3, pc, r3
   157d0:	ldr	r2, [r3]
   157d4:	b	10e38 <__cxa_atexit@plt>
   157d8:	andeq	r1, r1, r0, lsl r9

Disassembly of section .fini:

000157dc <.fini>:
   157dc:	push	{r3, lr}
   157e0:	pop	{r3, pc}
