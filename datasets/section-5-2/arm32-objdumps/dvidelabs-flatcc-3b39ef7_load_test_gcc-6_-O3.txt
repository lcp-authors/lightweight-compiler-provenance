
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00011f68 <.init>:
   11f68:	push	{r3, lr}
   11f6c:	bl	1273c <_start@@Base+0x3c>
   11f70:	pop	{r3, pc}

Disassembly of section .plt:

00011f74 <strcmp@plt-0x14>:
   11f74:	push	{lr}		; (str lr, [sp, #-4]!)
   11f78:	ldr	lr, [pc, #4]	; 11f84 <strcmp@plt-0x4>
   11f7c:	add	lr, pc, lr
   11f80:	ldr	pc, [lr, #8]!
   11f84:	andeq	r8, r1, ip, ror r0

00011f88 <strcmp@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #24, 20	; 0x18000
   11f90:	ldr	pc, [ip, #124]!	; 0x7c

00011f94 <printf@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #24, 20	; 0x18000
   11f9c:	ldr	pc, [ip, #116]!	; 0x74

00011fa0 <fopen@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #24, 20	; 0x18000
   11fa8:	ldr	pc, [ip, #108]!	; 0x6c

00011fac <free@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #24, 20	; 0x18000
   11fb4:	ldr	pc, [ip, #100]!	; 0x64

00011fb8 <memcpy@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #24, 20	; 0x18000
   11fc0:	ldr	pc, [ip, #92]!	; 0x5c

00011fc4 <memcmp@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #24, 20	; 0x18000
   11fcc:	ldr	pc, [ip, #84]!	; 0x54

00011fd0 <realloc@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #24, 20	; 0x18000
   11fd8:	ldr	pc, [ip, #76]!	; 0x4c

00011fdc <fwrite@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #24, 20	; 0x18000
   11fe4:	ldr	pc, [ip, #68]!	; 0x44

00011fe8 <gettimeofday@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #24, 20	; 0x18000
   11ff0:	ldr	pc, [ip, #60]!	; 0x3c

00011ff4 <puts@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #24, 20	; 0x18000
   11ffc:	ldr	pc, [ip, #52]!	; 0x34

00012000 <malloc@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #24, 20	; 0x18000
   12008:	ldr	pc, [ip, #44]!	; 0x2c

0001200c <__libc_start_main@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #24, 20	; 0x18000
   12014:	ldr	pc, [ip, #36]!	; 0x24

00012018 <__gmon_start__@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #24, 20	; 0x18000
   12020:	ldr	pc, [ip, #28]!

00012024 <strlen@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #24, 20	; 0x18000
   1202c:	ldr	pc, [ip, #20]!

00012030 <posix_memalign@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #24, 20	; 0x18000
   12038:	ldr	pc, [ip, #12]!

0001203c <memset@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #24, 20	; 0x18000
   12044:	ldr	pc, [ip, #4]!

00012048 <memchr@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #94208	; 0x17000
   12050:	ldr	pc, [ip, #4092]!	; 0xffc

00012054 <fclose@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #94208	; 0x17000
   1205c:	ldr	pc, [ip, #4084]!	; 0xff4

00012060 <abort@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #94208	; 0x17000
   12068:	ldr	pc, [ip, #4076]!	; 0xfec

0001206c <__assert_fail@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #94208	; 0x17000
   12074:	ldr	pc, [ip, #4068]!	; 0xfe4

Disassembly of section .text:

00012078 <main@@Base-0x160>:
   12078:	push	{r4, lr}
   1207c:	ldr	r3, [pc, #12]	; 12090 <__assert_fail@plt+0x24>
   12080:	ldr	r2, [pc, #12]	; 12094 <__assert_fail@plt+0x28>
   12084:	ldr	r1, [pc, #12]	; 12098 <__assert_fail@plt+0x2c>
   12088:	ldr	r0, [pc, #12]	; 1209c <__assert_fail@plt+0x30>
   1208c:	bl	1206c <__assert_fail@plt>
   12090:			; <UNDEFINED> instruction: 0x000189b0
   12094:			; <UNDEFINED> instruction: 0x000002bb
   12098:	andeq	r8, r1, r8, lsr #20
   1209c:	andeq	r8, r1, r8, lsl #21
   120a0:	push	{r4, lr}
   120a4:	mov	r2, #235	; 0xeb
   120a8:	ldr	r3, [pc, #8]	; 120b8 <__assert_fail@plt+0x4c>
   120ac:	ldr	r1, [pc, #8]	; 120bc <__assert_fail@plt+0x50>
   120b0:	ldr	r0, [pc, #8]	; 120c0 <__assert_fail@plt+0x54>
   120b4:	bl	1206c <__assert_fail@plt>
   120b8:	andeq	r8, r1, ip, asr #19
   120bc:			; <UNDEFINED> instruction: 0x00018ab0
   120c0:	andeq	r8, r1, r0, lsl fp
   120c4:	push	{r4, lr}
   120c8:	mov	r2, #308	; 0x134
   120cc:	ldr	r3, [pc, #8]	; 120dc <__assert_fail@plt+0x70>
   120d0:	ldr	r1, [pc, #8]	; 120e0 <__assert_fail@plt+0x74>
   120d4:	ldr	r0, [pc, #8]	; 120e4 <__assert_fail@plt+0x78>
   120d8:	bl	1206c <__assert_fail@plt>
   120dc:	strdeq	r8, [r1], -r4
   120e0:	andeq	r9, r1, r4, asr #10
   120e4:	andeq	r9, r1, r4, lsl #12
   120e8:	push	{r4, lr}
   120ec:	ldr	r3, [pc, #12]	; 12100 <__assert_fail@plt+0x94>
   120f0:	ldr	r2, [pc, #12]	; 12104 <__assert_fail@plt+0x98>
   120f4:	ldr	r1, [pc, #12]	; 12108 <__assert_fail@plt+0x9c>
   120f8:	ldr	r0, [pc, #12]	; 1210c <__assert_fail@plt+0xa0>
   120fc:	bl	1206c <__assert_fail@plt>
   12100:	andeq	r8, r1, r4, lsl #28
   12104:	andeq	r0, r0, r1, lsr #5
   12108:	andeq	r9, r1, r4, asr #10
   1210c:	andeq	r9, r1, r4, lsl #12
   12110:	push	{r4, lr}
   12114:	ldr	r3, [pc, #12]	; 12128 <__assert_fail@plt+0xbc>
   12118:	ldr	r2, [pc, #12]	; 1212c <__assert_fail@plt+0xc0>
   1211c:	ldr	r1, [pc, #12]	; 12130 <__assert_fail@plt+0xc4>
   12120:	ldr	r0, [pc, #12]	; 12134 <__assert_fail@plt+0xc8>
   12124:	bl	1206c <__assert_fail@plt>
   12128:	andeq	r8, r1, r0, lsl lr
   1212c:	andeq	r0, r0, r7, lsl #5
   12130:	andeq	r9, r1, r4, asr #10
   12134:	andeq	r9, r1, r4, lsl #12
   12138:	push	{r4, lr}
   1213c:	mov	r2, #892	; 0x37c
   12140:	ldr	r3, [pc, #8]	; 12150 <__assert_fail@plt+0xe4>
   12144:	ldr	r1, [pc, #8]	; 12154 <__assert_fail@plt+0xe8>
   12148:	ldr	r0, [pc, #8]	; 12158 <__assert_fail@plt+0xec>
   1214c:	bl	1206c <__assert_fail@plt>
   12150:	andeq	r8, r1, ip, lsl lr
   12154:	andeq	r9, r1, r4, asr #10
   12158:	andeq	r9, r1, ip, lsl #11
   1215c:	push	{r4, lr}
   12160:	ldr	r3, [pc, #12]	; 12174 <__assert_fail@plt+0x108>
   12164:	ldr	r2, [pc, #12]	; 12178 <__assert_fail@plt+0x10c>
   12168:	ldr	r1, [pc, #12]	; 1217c <__assert_fail@plt+0x110>
   1216c:	ldr	r0, [pc, #12]	; 12180 <__assert_fail@plt+0x114>
   12170:	bl	1206c <__assert_fail@plt>
   12174:	andeq	r8, r1, r0, lsr lr
   12178:	andeq	r0, r0, lr, lsl r2
   1217c:	andeq	r9, r1, r4, asr #10
   12180:	andeq	r9, r1, r8, lsr #11
   12184:	push	{r4, lr}
   12188:	ldr	r3, [pc, #12]	; 1219c <__assert_fail@plt+0x130>
   1218c:	ldr	r2, [pc, #12]	; 121a0 <__assert_fail@plt+0x134>
   12190:	ldr	r1, [pc, #12]	; 121a4 <__assert_fail@plt+0x138>
   12194:	ldr	r0, [pc, #12]	; 121a8 <__assert_fail@plt+0x13c>
   12198:	bl	1206c <__assert_fail@plt>
   1219c:	andeq	r8, r1, r0, asr lr
   121a0:	andeq	r0, r0, r6, asr #7
   121a4:	andeq	r9, r1, r4, asr #10
   121a8:	andeq	r9, r1, r4, asr #11
   121ac:	push	{r4, lr}
   121b0:	ldr	r3, [pc, #12]	; 121c4 <__assert_fail@plt+0x158>
   121b4:	ldr	r2, [pc, #12]	; 121c8 <__assert_fail@plt+0x15c>
   121b8:	ldr	r1, [pc, #12]	; 121cc <__assert_fail@plt+0x160>
   121bc:	ldr	r0, [pc, #12]	; 121d0 <__assert_fail@plt+0x164>
   121c0:	bl	1206c <__assert_fail@plt>
   121c4:	andeq	r8, r1, r0, ror lr
   121c8:	andeq	r0, r0, r6, lsl #15
   121cc:	andeq	r9, r1, r4, asr #10
   121d0:	strdeq	r9, [r1], -r0
   121d4:	andeq	r0, r0, r0

000121d8 <main@@Base>:
   121d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121dc:	vpush	{d8-d10}
   121e0:	sub	sp, sp, #260	; 0x104
   121e4:	add	r0, sp, #24
   121e8:	bl	12fb0 <flatcc_builder_init@@Base>
   121ec:	add	r0, sp, #24
   121f0:	bl	1289c <_start@@Base+0x19c>
   121f4:	add	r1, sp, #20
   121f8:	add	r0, sp, #24
   121fc:	bl	181cc <flatcc_builder_finalize_buffer@@Base>
   12200:	ldr	r1, [pc, #1144]	; 12680 <main@@Base+0x4a8>
   12204:	str	r0, [sp, #4]
   12208:	mov	r5, r0
   1220c:	ldr	r0, [pc, #1136]	; 12684 <main@@Base+0x4ac>
   12210:	bl	11fa0 <fopen@plt>
   12214:	subs	r4, r0, #0
   12218:	beq	12648 <main@@Base+0x470>
   1221c:	mov	r3, r4
   12220:	ldr	r2, [sp, #20]
   12224:	mov	r1, #1
   12228:	mov	r0, r5
   1222c:	bl	11fdc <fwrite@plt>
   12230:	ldr	r5, [sp, #20]
   12234:	mov	r6, r0
   12238:	mov	r0, r4
   1223c:	bl	12054 <fclose@plt>
   12240:	cmp	r6, r5
   12244:	beq	12274 <main@@Base+0x9c>
   12248:	add	r0, sp, #24
   1224c:	bl	1321c <flatcc_builder_clear@@Base>
   12250:	ldr	r0, [sp, #4]
   12254:	bl	11fac <free@plt>
   12258:	mov	r4, #1
   1225c:	ldr	r0, [pc, #1060]	; 12688 <main@@Base+0x4b0>
   12260:	bl	11ff4 <puts@plt>
   12264:	mov	r0, r4
   12268:	add	sp, sp, #260	; 0x104
   1226c:	vpop	{d8-d10}
   12270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12274:	ldr	r1, [sp, #20]
   12278:	ldr	r0, [pc, #1036]	; 1268c <main@@Base+0x4b4>
   1227c:	bl	11f94 <printf@plt>
   12280:	ldr	r0, [pc, #1032]	; 12690 <main@@Base+0x4b8>
   12284:	bl	11ff4 <puts@plt>
   12288:	bl	12828 <_start@@Base+0x128>
   1228c:	ldr	r6, [pc, #1024]	; 12694 <main@@Base+0x4bc>
   12290:	ldr	r9, [pc, #1024]	; 12698 <main@@Base+0x4c0>
   12294:	mov	r3, #10
   12298:	str	r3, [sp, #12]
   1229c:	vmov.f64	d8, d0
   122a0:	add	r0, sp, #24
   122a4:	bl	1289c <_start@@Base+0x19c>
   122a8:	ldr	r4, [sp, #4]
   122ac:	ldr	r2, [sp, #20]
   122b0:	mov	r1, r4
   122b4:	add	r0, sp, #24
   122b8:	bl	181a0 <flatcc_builder_copy_buffer@@Base>
   122bc:	ldr	r3, [r4, #4]
   122c0:	ldr	r2, [pc, #980]	; 1269c <main@@Base+0x4c4>
   122c4:	cmp	r3, r2
   122c8:	beq	122d0 <main@@Base+0xf8>
   122cc:	bl	12078 <__assert_fail@plt+0xc>
   122d0:	ldr	r2, [sp, #4]
   122d4:	ldr	r3, [r2]
   122d8:	adds	fp, r2, r3
   122dc:	beq	122cc <main@@Base+0xf4>
   122e0:	ldr	r2, [sp, #4]
   122e4:	ldr	r4, [r2, r3]
   122e8:	sub	r4, fp, r4
   122ec:	ldrh	r5, [r4]
   122f0:	cmp	r5, #11
   122f4:	bhi	1230c <main@@Base+0x134>
   122f8:	ldr	r3, [pc, #928]	; 126a0 <main@@Base+0x4c8>
   122fc:	ldr	r2, [pc, #928]	; 126a4 <main@@Base+0x4cc>
   12300:	ldr	r1, [pc, #928]	; 126a8 <main@@Base+0x4d0>
   12304:	ldr	r0, [pc, #928]	; 126ac <main@@Base+0x4d4>
   12308:	bl	1206c <__assert_fail@plt>
   1230c:	ldrh	r3, [r4, #10]
   12310:	cmp	r3, #0
   12314:	beq	122f8 <main@@Base+0x120>
   12318:	ldr	r0, [fp, r3]
   1231c:	add	r3, fp, r3
   12320:	add	r0, r0, #4
   12324:	add	r0, r3, r0
   12328:	ldr	r1, [pc, #896]	; 126b0 <main@@Base+0x4d8>
   1232c:	bl	11f88 <strcmp@plt>
   12330:	cmp	r0, #0
   12334:	bne	12610 <main@@Base+0x438>
   12338:	cmp	r5, #27
   1233c:	bhi	12354 <main@@Base+0x17c>
   12340:	ldr	r3, [pc, #876]	; 126b4 <main@@Base+0x4dc>
   12344:	mov	r2, #143	; 0x8f
   12348:	ldr	r1, [pc, #872]	; 126b8 <main@@Base+0x4e0>
   1234c:	ldr	r0, [pc, #872]	; 126bc <main@@Base+0x4e4>
   12350:	bl	1206c <__assert_fail@plt>
   12354:	ldrh	r3, [r4, #26]
   12358:	cmp	r3, #0
   1235c:	beq	12340 <main@@Base+0x168>
   12360:	ldr	r2, [fp, r3]
   12364:	add	fp, fp, r3
   12368:	add	r3, r2, #4
   1236c:	adds	fp, fp, r3
   12370:	beq	12340 <main@@Base+0x168>
   12374:	ldr	r8, [fp, #-4]
   12378:	cmp	r8, #1000	; 0x3e8
   1237c:	bne	12340 <main@@Base+0x168>
   12380:	mov	r7, #7
   12384:	add	r3, fp, #4000	; 0xfa0
   12388:	str	fp, [sp]
   1238c:	str	r3, [sp, #8]
   12390:	ldr	r3, [sp]
   12394:	mov	r2, r3
   12398:	add	r3, r3, #4
   1239c:	ldr	r1, [r2]
   123a0:	str	r3, [sp]
   123a4:	adds	r3, r2, r1
   123a8:	beq	122cc <main@@Base+0xf4>
   123ac:	ldr	r2, [r2, r1]
   123b0:	sub	r2, r3, r2
   123b4:	ldrh	r0, [r2]
   123b8:	cmp	r0, #11
   123bc:	bls	122f8 <main@@Base+0x120>
   123c0:	ldrh	r1, [r2, #10]
   123c4:	cmp	r1, #0
   123c8:	beq	122f8 <main@@Base+0x120>
   123cc:	ldr	sl, [r3, r1]
   123d0:	cmp	r0, #15
   123d4:	add	sl, sl, #4
   123d8:	add	r1, r3, r1
   123dc:	add	sl, r1, sl
   123e0:	bls	12580 <main@@Base+0x3a8>
   123e4:	ldrh	r2, [r2, #14]
   123e8:	cmp	r2, #0
   123ec:	beq	125a0 <main@@Base+0x3c8>
   123f0:	ldr	r4, [r3, r2]
   123f4:	cmp	sl, #0
   123f8:	add	r3, r3, r2
   123fc:	add	r4, r4, #4
   12400:	add	r4, r3, r4
   12404:	beq	1258c <main@@Base+0x3b4>
   12408:	ldr	r3, [sl, #-4]
   1240c:	cmp	r3, #700	; 0x2bc
   12410:	bne	1258c <main@@Base+0x3b4>
   12414:	cmp	r4, #0
   12418:	beq	125b4 <main@@Base+0x3dc>
   1241c:	ldr	r3, [r4, #-4]
   12420:	ldr	r2, [pc, #664]	; 126c0 <main@@Base+0x4e8>
   12424:	cmp	r3, r2
   12428:	bne	125b4 <main@@Base+0x3dc>
   1242c:	mov	r5, sl
   12430:	mov	fp, #0
   12434:	mov	r2, r7
   12438:	mov	r1, r6
   1243c:	mov	r0, r5
   12440:	bl	11fc4 <memcmp@plt>
   12444:	cmp	r0, #0
   12448:	bne	125c8 <main@@Base+0x3f0>
   1244c:	add	fp, fp, #1
   12450:	cmp	fp, #100	; 0x64
   12454:	add	r5, r5, #7
   12458:	bne	12434 <main@@Base+0x25c>
   1245c:	add	r5, r4, #99328	; 0x18400
   12460:	add	r5, r5, #672	; 0x2a0
   12464:	mov	r2, r8
   12468:	mov	r1, r9
   1246c:	mov	r0, r4
   12470:	bl	11fc4 <memcmp@plt>
   12474:	cmp	r0, #0
   12478:	bne	125fc <main@@Base+0x424>
   1247c:	add	r4, r4, #1000	; 0x3e8
   12480:	cmp	r4, r5
   12484:	bne	12464 <main@@Base+0x28c>
   12488:	ldr	r3, [sp, #8]
   1248c:	ldr	r2, [sp]
   12490:	cmp	r3, r2
   12494:	bne	12390 <main@@Base+0x1b8>
   12498:	ldr	r3, [sp, #12]
   1249c:	subs	r3, r3, #1
   124a0:	str	r3, [sp, #12]
   124a4:	bne	122a0 <main@@Base+0xc8>
   124a8:	mov	r4, r0
   124ac:	bl	12828 <_start@@Base+0x128>
   124b0:	ldr	r1, [pc, #524]	; 126c4 <main@@Base+0x4ec>
   124b4:	ldr	r0, [pc, #524]	; 126c8 <main@@Base+0x4f0>
   124b8:	ldr	r5, [sp, #20]
   124bc:	vldr	d9, [pc, #412]	; 12660 <main@@Base+0x488>
   124c0:	vldr	d10, [pc, #416]	; 12668 <main@@Base+0x490>
   124c4:	vsub.f64	d8, d0, d8
   124c8:	bl	11f94 <printf@plt>
   124cc:	ldr	r0, [pc, #504]	; 126cc <main@@Base+0x4f4>
   124d0:	vmov	r2, r3, d8
   124d4:	bl	11f94 <printf@plt>
   124d8:	mov	r1, #10
   124dc:	ldr	r0, [pc, #492]	; 126d0 <main@@Base+0x4f8>
   124e0:	bl	11f94 <printf@plt>
   124e4:	mov	r1, r5
   124e8:	ldr	r0, [pc, #484]	; 126d4 <main@@Base+0x4fc>
   124ec:	bl	11f94 <printf@plt>
   124f0:	vmov	s15, r5
   124f4:	ldr	r0, [pc, #476]	; 126d8 <main@@Base+0x500>
   124f8:	vcvt.f64.u32	d7, s15
   124fc:	vmul.f64	d7, d7, d9
   12500:	vdiv.f64	d6, d7, d10
   12504:	vdiv.f64	d7, d6, d8
   12508:	vmov	r2, r3, d7
   1250c:	bl	11f94 <printf@plt>
   12510:	vdiv.f64	d7, d9, d8
   12514:	ldr	r0, [pc, #448]	; 126dc <main@@Base+0x504>
   12518:	vmov	r2, r3, d7
   1251c:	bl	11f94 <printf@plt>
   12520:	vldr	d6, [pc, #328]	; 12670 <main@@Base+0x498>
   12524:	vldr	d5, [pc, #332]	; 12678 <main@@Base+0x4a0>
   12528:	vmul.f64	d8, d8, d6
   1252c:	vdiv.f64	d7, d8, d9
   12530:	vcmpe.f64	d7, d5
   12534:	vmrs	APSR_nzcv, fpscr
   12538:	bmi	12638 <main@@Base+0x460>
   1253c:	vcmpe.f64	d7, d10
   12540:	vmrs	APSR_nzcv, fpscr
   12544:	bmi	12624 <main@@Base+0x44c>
   12548:	vcmpe.f64	d7, d6
   1254c:	vmrs	APSR_nzcv, fpscr
   12550:	vdivmi.f64	d6, d7, d10
   12554:	ldrmi	r0, [pc, #388]	; 126e0 <main@@Base+0x508>
   12558:	ldrpl	r0, [pc, #388]	; 126e4 <main@@Base+0x50c>
   1255c:	vdivpl.f64	d5, d7, d6
   12560:	vmovmi	r2, r3, d6
   12564:	vmovpl	r2, r3, d5
   12568:	bl	11f94 <printf@plt>
   1256c:	add	r0, sp, #24
   12570:	bl	1321c <flatcc_builder_clear@@Base>
   12574:	ldr	r0, [sp, #4]
   12578:	bl	11fac <free@plt>
   1257c:	b	12264 <main@@Base+0x8c>
   12580:	cmp	sl, #0
   12584:	mov	r4, #0
   12588:	bne	12408 <main@@Base+0x230>
   1258c:	ldr	r3, [pc, #340]	; 126e8 <main@@Base+0x510>
   12590:	mov	r2, #74	; 0x4a
   12594:	ldr	r1, [pc, #284]	; 126b8 <main@@Base+0x4e0>
   12598:	ldr	r0, [pc, #332]	; 126ec <main@@Base+0x514>
   1259c:	bl	1206c <__assert_fail@plt>
   125a0:	cmp	sl, #0
   125a4:	beq	1258c <main@@Base+0x3b4>
   125a8:	ldr	r3, [sl, #-4]
   125ac:	cmp	r3, #700	; 0x2bc
   125b0:	bne	1258c <main@@Base+0x3b4>
   125b4:	ldr	r3, [pc, #300]	; 126e8 <main@@Base+0x510>
   125b8:	mov	r2, #78	; 0x4e
   125bc:	ldr	r1, [pc, #244]	; 126b8 <main@@Base+0x4e0>
   125c0:	ldr	r0, [pc, #292]	; 126ec <main@@Base+0x514>
   125c4:	bl	1206c <__assert_fail@plt>
   125c8:	mov	r2, sl
   125cc:	mov	r1, fp
   125d0:	ldr	r0, [pc, #280]	; 126f0 <main@@Base+0x518>
   125d4:	bl	11f94 <printf@plt>
   125d8:	ldr	r3, [sp, #4]
   125dc:	ldr	r0, [pc, #272]	; 126f4 <main@@Base+0x51c>
   125e0:	sub	r1, r5, r3
   125e4:	bl	11f94 <printf@plt>
   125e8:	ldr	r3, [pc, #248]	; 126e8 <main@@Base+0x510>
   125ec:	mov	r2, #85	; 0x55
   125f0:	ldr	r1, [pc, #192]	; 126b8 <main@@Base+0x4e0>
   125f4:	ldr	r0, [pc, #240]	; 126ec <main@@Base+0x514>
   125f8:	bl	1206c <__assert_fail@plt>
   125fc:	ldr	r3, [pc, #228]	; 126e8 <main@@Base+0x510>
   12600:	mov	r2, #91	; 0x5b
   12604:	ldr	r1, [pc, #172]	; 126b8 <main@@Base+0x4e0>
   12608:	ldr	r0, [pc, #220]	; 126ec <main@@Base+0x514>
   1260c:	bl	1206c <__assert_fail@plt>
   12610:	ldr	r3, [pc, #156]	; 126b4 <main@@Base+0x4dc>
   12614:	mov	r2, #139	; 0x8b
   12618:	ldr	r1, [pc, #152]	; 126b8 <main@@Base+0x4e0>
   1261c:	ldr	r0, [pc, #152]	; 126bc <main@@Base+0x4e4>
   12620:	bl	1206c <__assert_fail@plt>
   12624:	vdiv.f64	d6, d7, d5
   12628:	ldr	r0, [pc, #200]	; 126f8 <main@@Base+0x520>
   1262c:	vmov	r2, r3, d6
   12630:	bl	11f94 <printf@plt>
   12634:	b	1256c <main@@Base+0x394>
   12638:	vmov	r2, r3, d7
   1263c:	ldr	r0, [pc, #184]	; 126fc <main@@Base+0x524>
   12640:	bl	11f94 <printf@plt>
   12644:	b	1256c <main@@Base+0x394>
   12648:	add	r0, sp, #24
   1264c:	bl	1321c <flatcc_builder_clear@@Base>
   12650:	ldr	r0, [sp, #4]
   12654:	bl	11fac <free@plt>
   12658:	mvn	r4, #0
   1265c:	b	1225c <main@@Base+0x84>
   12660:	andeq	r0, r0, r0
   12664:	eormi	r0, r4, r0
   12668:	andeq	r0, r0, r0
   1266c:	smlawbmi	lr, r0, r4, r8
   12670:	andeq	r0, r0, r0
   12674:	bicmi	ip, sp, r5, ror #26
   12678:	andeq	r0, r0, r0
   1267c:	addmi	r4, pc, r0
   12680:	andeq	r8, r1, r8, lsr #24
   12684:	andeq	r8, r1, ip, lsr #24
   12688:	andeq	r8, r1, r0, ror #27
   1268c:	andeq	r8, r1, r4, asr #24
   12690:	andeq	r8, r1, r8, asr ip
   12694:	andeq	r8, r1, ip, asr #23
   12698:	andeq	sl, r2, r4, ror r0
   1269c:	movtpl	r4, #61261	; 0xef4d
   126a0:			; <UNDEFINED> instruction: 0x000189b0
   126a4:			; <UNDEFINED> instruction: 0x000002bb
   126a8:	andeq	r8, r1, r8, lsr #20
   126ac:	andeq	r8, r1, ip, ror #24
   126b0:			; <UNDEFINED> instruction: 0x00018bbc
   126b4:	andeq	r8, r1, r0, lsl sl
   126b8:	ldrdeq	r8, [r1], -r4
   126bc:	muleq	r1, r0, ip
   126c0:	andeq	r8, r1, r0, lsr #13
   126c4:	andeq	r8, r1, ip, asr #25
   126c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   126cc:	andeq	r8, r1, r8, lsl #26
   126d0:	andeq	r8, r1, r0, lsr #26
   126d4:	andeq	r8, r1, r0, lsr sp
   126d8:	andeq	r8, r1, r4, asr #26
   126dc:	andeq	r8, r1, ip, asr sp
   126e0:			; <UNDEFINED> instruction: 0x00018db0
   126e4:	andeq	r8, r1, r8, asr #27
   126e8:	andeq	r8, r1, r8, lsl sl
   126ec:	andeq	r9, r1, r4, lsl #12
   126f0:	muleq	r1, ip, ip
   126f4:			; <UNDEFINED> instruction: 0x00018cbc
   126f8:	muleq	r1, r8, sp
   126fc:	andeq	r8, r1, r0, lsl #27

00012700 <_start@@Base>:
   12700:	mov	fp, #0
   12704:	mov	lr, #0
   12708:	pop	{r1}		; (ldr r1, [sp], #4)
   1270c:	mov	r2, sp
   12710:	push	{r2}		; (str r2, [sp, #-4]!)
   12714:	push	{r0}		; (str r0, [sp, #-4]!)
   12718:	ldr	ip, [pc, #16]	; 12730 <_start@@Base+0x30>
   1271c:	push	{ip}		; (str ip, [sp, #-4]!)
   12720:	ldr	r0, [pc, #12]	; 12734 <_start@@Base+0x34>
   12724:	ldr	r3, [pc, #12]	; 12738 <_start@@Base+0x38>
   12728:	bl	1200c <__libc_start_main@plt>
   1272c:	bl	12060 <abort@plt>
   12730:	andeq	r8, r1, r0, lsr #19
   12734:	ldrdeq	r2, [r1], -r8
   12738:	andeq	r8, r1, r0, asr #18
   1273c:	ldr	r3, [pc, #20]	; 12758 <_start@@Base+0x58>
   12740:	ldr	r2, [pc, #20]	; 1275c <_start@@Base+0x5c>
   12744:	add	r3, pc, r3
   12748:	ldr	r2, [r3, r2]
   1274c:	cmp	r2, #0
   12750:	bxeq	lr
   12754:	b	12018 <__gmon_start__@plt>
   12758:			; <UNDEFINED> instruction: 0x000178b4
   1275c:	andeq	r0, r0, ip, asr r0
   12760:	ldr	r3, [pc, #28]	; 12784 <_start@@Base+0x84>
   12764:	ldr	r0, [pc, #28]	; 12788 <_start@@Base+0x88>
   12768:	sub	r3, r3, r0
   1276c:	cmp	r3, #6
   12770:	bxls	lr
   12774:	ldr	r3, [pc, #16]	; 1278c <_start@@Base+0x8c>
   12778:	cmp	r3, #0
   1277c:	bxeq	lr
   12780:	bx	r3
   12784:	andeq	sl, r2, fp, rrx
   12788:	andeq	sl, r2, r8, rrx
   1278c:	andeq	r0, r0, r0
   12790:	ldr	r1, [pc, #36]	; 127bc <_start@@Base+0xbc>
   12794:	ldr	r0, [pc, #36]	; 127c0 <_start@@Base+0xc0>
   12798:	sub	r1, r1, r0
   1279c:	asr	r1, r1, #2
   127a0:	add	r1, r1, r1, lsr #31
   127a4:	asrs	r1, r1, #1
   127a8:	bxeq	lr
   127ac:	ldr	r3, [pc, #16]	; 127c4 <_start@@Base+0xc4>
   127b0:	cmp	r3, #0
   127b4:	bxeq	lr
   127b8:	bx	r3
   127bc:	andeq	sl, r2, r8, rrx
   127c0:	andeq	sl, r2, r8, rrx
   127c4:	andeq	r0, r0, r0
   127c8:	push	{r4, lr}
   127cc:	ldr	r4, [pc, #24]	; 127ec <_start@@Base+0xec>
   127d0:	ldrb	r3, [r4]
   127d4:	cmp	r3, #0
   127d8:	popne	{r4, pc}
   127dc:	bl	12760 <_start@@Base+0x60>
   127e0:	mov	r3, #1
   127e4:	strb	r3, [r4]
   127e8:	pop	{r4, pc}
   127ec:	andeq	sl, r2, r8, rrx
   127f0:	ldr	r0, [pc, #40]	; 12820 <_start@@Base+0x120>
   127f4:	ldr	r3, [r0]
   127f8:	cmp	r3, #0
   127fc:	bne	12804 <_start@@Base+0x104>
   12800:	b	12790 <_start@@Base+0x90>
   12804:	ldr	r3, [pc, #24]	; 12824 <_start@@Base+0x124>
   12808:	cmp	r3, #0
   1280c:	beq	12800 <_start@@Base+0x100>
   12810:	push	{r4, lr}
   12814:	blx	r3
   12818:	pop	{r4, lr}
   1281c:	b	12790 <_start@@Base+0x90>
   12820:	andeq	r9, r2, r4, lsl pc
   12824:	andeq	r0, r0, r0
   12828:	push	{r4, lr}
   1282c:	sub	sp, sp, #8
   12830:	mov	r1, #0
   12834:	mov	r0, sp
   12838:	bl	11fe8 <gettimeofday@plt>
   1283c:	ldr	r2, [pc, #84]	; 12898 <_start@@Base+0x198>
   12840:	vldr	d5, [pc, #72]	; 12890 <_start@@Base+0x190>
   12844:	ldr	r3, [r2]
   12848:	cmp	r3, #0
   1284c:	moveq	r4, sp
   12850:	ldr	r3, [sp, #4]
   12854:	ldmeq	r4, {r0, r1}
   12858:	stmeq	r2, {r0, r1}
   1285c:	ldr	r1, [r2, #4]
   12860:	ldr	r2, [r2]
   12864:	sub	r3, r3, r1
   12868:	vmov	s14, r3
   1286c:	ldr	r3, [sp]
   12870:	sub	r3, r3, r2
   12874:	vcvt.f64.s32	d7, s14
   12878:	vmov	s0, r3
   1287c:	vcvt.f64.s32	d0, s0
   12880:	vdiv.f64	d6, d7, d5
   12884:	vadd.f64	d0, d6, d0
   12888:	add	sp, sp, #8
   1288c:	pop	{r4, pc}
   12890:	andeq	r0, r0, r0
   12894:	smlawbmi	lr, r0, r4, r8
   12898:	andeq	sl, r2, ip, rrx
   1289c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a0:	mov	r4, r0
   128a4:	bl	1313c <flatcc_builder_reset@@Base>
   128a8:	mov	r3, #0
   128ac:	mov	r0, r4
   128b0:	mov	r2, r3
   128b4:	ldr	r1, [pc, #448]	; 12a7c <_start@@Base+0x37c>
   128b8:	bl	13aa0 <flatcc_builder_start_buffer@@Base>
   128bc:	cmp	r0, #0
   128c0:	bne	128d0 <_start@@Base+0x1d0>
   128c4:	mov	r1, #36	; 0x24
   128c8:	mov	r0, r4
   128cc:	bl	15680 <flatcc_builder_start_table@@Base>
   128d0:	ldr	r1, [pc, #424]	; 12a80 <_start@@Base+0x380>
   128d4:	mov	r0, r4
   128d8:	bl	17430 <flatcc_builder_create_string_str@@Base>
   128dc:	subs	r5, r0, #0
   128e0:	beq	128f8 <_start@@Base+0x1f8>
   128e4:	mov	r1, #3
   128e8:	mov	r0, r4
   128ec:	bl	17b88 <flatcc_builder_table_add_offset@@Base>
   128f0:	cmp	r0, #0
   128f4:	strne	r5, [r0]
   128f8:	mov	r0, r4
   128fc:	bl	15038 <flatcc_builder_start_offset_vector@@Base>
   12900:	ldr	r8, [pc, #380]	; 12a84 <_start@@Base+0x384>
   12904:	ldr	r7, [pc, #380]	; 12a88 <_start@@Base+0x388>
   12908:	mov	r9, #1000	; 0x3e8
   1290c:	mov	r6, #7
   12910:	mov	sl, #1
   12914:	mov	r1, #36	; 0x24
   12918:	mov	r0, r4
   1291c:	bl	15680 <flatcc_builder_start_table@@Base>
   12920:	mov	r0, r4
   12924:	bl	15434 <flatcc_builder_start_string@@Base>
   12928:	mov	r5, #100	; 0x64
   1292c:	mov	r2, r6
   12930:	mov	r1, r8
   12934:	mov	r0, r4
   12938:	bl	14a58 <flatcc_builder_append_string@@Base>
   1293c:	subs	r5, r5, #1
   12940:	bne	1292c <_start@@Base+0x22c>
   12944:	mov	r0, r4
   12948:	bl	1761c <flatcc_builder_end_string@@Base>
   1294c:	subs	r5, r0, #0
   12950:	beq	12968 <_start@@Base+0x268>
   12954:	mov	r1, #3
   12958:	mov	r0, r4
   1295c:	bl	17b88 <flatcc_builder_table_add_offset@@Base>
   12960:	cmp	r0, #0
   12964:	strne	r5, [r0]
   12968:	mvn	r3, #0
   1296c:	mov	r2, sl
   12970:	mov	r1, #1
   12974:	mov	r0, r4
   12978:	bl	14ee0 <flatcc_builder_start_vector@@Base>
   1297c:	mov	r5, #100	; 0x64
   12980:	mov	fp, #1000	; 0x3e8
   12984:	mov	r2, fp
   12988:	mov	r1, r7
   1298c:	mov	r0, r4
   12990:	bl	14570 <flatcc_builder_append_vector@@Base>
   12994:	subs	r5, r5, #1
   12998:	bne	12984 <_start@@Base+0x284>
   1299c:	mov	r0, r4
   129a0:	bl	163c0 <flatcc_builder_end_vector@@Base>
   129a4:	subs	r5, r0, #0
   129a8:	beq	129c0 <_start@@Base+0x2c0>
   129ac:	mov	r1, #5
   129b0:	mov	r0, r4
   129b4:	bl	17b88 <flatcc_builder_table_add_offset@@Base>
   129b8:	cmp	r0, #0
   129bc:	strne	r5, [r0]
   129c0:	mov	r2, sl
   129c4:	ldr	r1, [pc, #192]	; 12a8c <_start@@Base+0x38c>
   129c8:	mov	r0, r4
   129cc:	bl	16028 <flatcc_builder_check_required@@Base>
   129d0:	cmp	r0, #0
   129d4:	beq	12a64 <_start@@Base+0x364>
   129d8:	mov	r0, r4
   129dc:	bl	160c0 <flatcc_builder_end_table@@Base>
   129e0:	subs	r1, r0, #0
   129e4:	beq	12a50 <_start@@Base+0x350>
   129e8:	mov	r0, r4
   129ec:	bl	14768 <flatcc_builder_offset_vector_push@@Base>
   129f0:	subs	r9, r9, #1
   129f4:	bne	12914 <_start@@Base+0x214>
   129f8:	mov	r0, r4
   129fc:	bl	165e0 <flatcc_builder_end_offset_vector@@Base>
   12a00:	subs	r5, r0, #0
   12a04:	beq	12a68 <_start@@Base+0x368>
   12a08:	mov	r1, #11
   12a0c:	mov	r0, r4
   12a10:	bl	17b88 <flatcc_builder_table_add_offset@@Base>
   12a14:	mov	r2, #1
   12a18:	ldr	r1, [pc, #108]	; 12a8c <_start@@Base+0x38c>
   12a1c:	cmp	r0, #0
   12a20:	strne	r5, [r0]
   12a24:	mov	r0, r4
   12a28:	bl	16028 <flatcc_builder_check_required@@Base>
   12a2c:	cmp	r0, #0
   12a30:	beq	12a64 <_start@@Base+0x364>
   12a34:	mov	r0, r4
   12a38:	bl	160c0 <flatcc_builder_end_table@@Base>
   12a3c:	mov	r1, r0
   12a40:	mov	r0, r4
   12a44:	bl	13c2c <flatcc_builder_end_buffer@@Base>
   12a48:	mov	r0, #0
   12a4c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a50:	ldr	r3, [pc, #56]	; 12a90 <_start@@Base+0x390>
   12a54:	mov	r2, #42	; 0x2a
   12a58:	ldr	r1, [pc, #52]	; 12a94 <_start@@Base+0x394>
   12a5c:	ldr	r0, [pc, #52]	; 12a98 <_start@@Base+0x398>
   12a60:	bl	1206c <__assert_fail@plt>
   12a64:	bl	120a0 <__assert_fail@plt+0x34>
   12a68:	ldr	r3, [pc, #44]	; 12a9c <_start@@Base+0x39c>
   12a6c:	mov	r2, #56	; 0x38
   12a70:	ldr	r1, [pc, #28]	; 12a94 <_start@@Base+0x394>
   12a74:	ldr	r0, [pc, #36]	; 12aa0 <_start@@Base+0x3a0>
   12a78:	bl	1206c <__assert_fail@plt>
   12a7c:			; <UNDEFINED> instruction: 0x00018bb4
   12a80:			; <UNDEFINED> instruction: 0x00018bbc
   12a84:	andeq	r8, r1, ip, asr #23
   12a88:	andeq	sl, r2, r4, ror r0
   12a8c:	andeq	r8, r1, r8, ror #19
   12a90:	andeq	r8, r1, ip, ror #19
   12a94:	ldrdeq	r8, [r1], -r4
   12a98:	andeq	r8, r1, r0, lsr #24
   12a9c:	strdeq	r8, [r1], -ip
   12aa0:	andeq	r8, r1, r4, lsr #24

00012aa4 <flatcc_builder_default_alloc@@Base>:
   12aa4:	push	{r4, r5, r6, r7, r8, lr}
   12aa8:	subs	r5, r2, #0
   12aac:	mov	r6, r1
   12ab0:	bne	12ad4 <flatcc_builder_default_alloc@@Base+0x30>
   12ab4:	ldr	r0, [r1]
   12ab8:	cmp	r0, #0
   12abc:	popeq	{r4, r5, r6, r7, r8, pc}
   12ac0:	bl	11fac <free@plt>
   12ac4:	str	r5, [r6]
   12ac8:	str	r5, [r6, #4]
   12acc:	mov	r0, r5
   12ad0:	pop	{r4, r5, r6, r7, r8, pc}
   12ad4:	mov	r7, r3
   12ad8:	ldr	r3, [sp, #24]
   12adc:	sub	r2, r3, #1
   12ae0:	cmp	r2, #6
   12ae4:	ldrls	pc, [pc, r2, lsl #2]
   12ae8:	b	12b84 <flatcc_builder_default_alloc@@Base+0xe0>
   12aec:	andeq	r2, r1, r8, asr fp
   12af0:	andeq	r2, r1, r4, lsl #23
   12af4:	andeq	r2, r1, r4, lsl #23
   12af8:	andeq	r2, r1, ip, ror fp
   12afc:	andeq	r2, r1, r8, lsl #22
   12b00:	andeq	r2, r1, r4, lsl #23
   12b04:	andeq	r2, r1, r4, ror fp
   12b08:	mov	r4, r5
   12b0c:	ldr	r3, [r6, #4]
   12b10:	cmp	r5, r3
   12b14:	bhi	12b20 <flatcc_builder_default_alloc@@Base+0x7c>
   12b18:	cmp	r4, r3, lsr #1
   12b1c:	bls	12b8c <flatcc_builder_default_alloc@@Base+0xe8>
   12b20:	mov	r1, r4
   12b24:	ldr	r0, [r6]
   12b28:	bl	11fd0 <realloc@plt>
   12b2c:	subs	r5, r0, #0
   12b30:	beq	12ba8 <flatcc_builder_default_alloc@@Base+0x104>
   12b34:	cmp	r7, #0
   12b38:	beq	12b48 <flatcc_builder_default_alloc@@Base+0xa4>
   12b3c:	ldr	r0, [r6, #4]
   12b40:	cmp	r0, r4
   12b44:	bcc	12b94 <flatcc_builder_default_alloc@@Base+0xf0>
   12b48:	str	r5, [r6]
   12b4c:	str	r4, [r6, #4]
   12b50:	mov	r0, #0
   12b54:	pop	{r4, r5, r6, r7, r8, pc}
   12b58:	mov	r4, #256	; 0x100
   12b5c:	cmp	r5, r4
   12b60:	bls	12b0c <flatcc_builder_default_alloc@@Base+0x68>
   12b64:	lsl	r4, r4, #1
   12b68:	cmp	r5, r4
   12b6c:	bhi	12b64 <flatcc_builder_default_alloc@@Base+0xc0>
   12b70:	b	12b0c <flatcc_builder_default_alloc@@Base+0x68>
   12b74:	mov	r4, #64	; 0x40
   12b78:	b	12b5c <flatcc_builder_default_alloc@@Base+0xb8>
   12b7c:	mov	r4, #288	; 0x120
   12b80:	b	12b5c <flatcc_builder_default_alloc@@Base+0xb8>
   12b84:	mov	r4, #32
   12b88:	b	12b5c <flatcc_builder_default_alloc@@Base+0xb8>
   12b8c:	mov	r0, #0
   12b90:	pop	{r4, r5, r6, r7, r8, pc}
   12b94:	sub	r2, r4, r0
   12b98:	mov	r1, #0
   12b9c:	add	r0, r5, r0
   12ba0:	bl	1203c <memset@plt>
   12ba4:	b	12b48 <flatcc_builder_default_alloc@@Base+0xa4>
   12ba8:	mvn	r0, #0
   12bac:	pop	{r4, r5, r6, r7, r8, pc}
   12bb0:	push	{r4, r5, r6, r7, r8, lr}
   12bb4:	mov	r5, r0
   12bb8:	ldrh	r0, [r0, #128]	; 0x80
   12bbc:	sub	sp, sp, #88	; 0x58
   12bc0:	mov	r7, #4
   12bc4:	cmp	r0, #3
   12bc8:	movls	r0, #4
   12bcc:	strhls	r0, [r5, #128]	; 0x80
   12bd0:	ldr	r0, [r5, #136]	; 0x88
   12bd4:	lsls	r4, r2, #2
   12bd8:	mov	r8, #1
   12bdc:	str	r7, [sp, #16]
   12be0:	str	r8, [sp, #20]
   12be4:	and	ip, r0, #3
   12be8:	movne	r8, #2
   12bec:	str	r7, [sp, #28]
   12bf0:	addne	r7, r4, r7
   12bf4:	strne	r4, [sp, #36]	; 0x24
   12bf8:	add	lr, sp, #12
   12bfc:	strne	r1, [sp, #32]
   12c00:	strne	r7, [sp, #16]
   12c04:	strne	r8, [sp, #20]
   12c08:	movne	r4, #3
   12c0c:	moveq	r4, #2
   12c10:	cmp	ip, #0
   12c14:	str	r2, [sp, #12]
   12c18:	str	lr, [sp, #24]
   12c1c:	beq	12c48 <flatcc_builder_default_alloc@@Base+0x1a4>
   12c20:	add	lr, r8, #1
   12c24:	add	r8, sp, #88	; 0x58
   12c28:	add	lr, r8, lr, lsl #3
   12c2c:	ldr	r6, [pc, #320]	; 12d74 <flatcc_builder_default_alloc@@Base+0x2d0>
   12c30:	mov	r8, r4
   12c34:	add	r7, r7, ip
   12c38:	str	ip, [lr, #-68]	; 0xffffffbc
   12c3c:	str	r7, [sp, #16]
   12c40:	str	r4, [sp, #20]
   12c44:	str	r6, [lr, #-72]	; 0xffffffb8
   12c48:	cmp	r2, #0
   12c4c:	sub	r4, r0, r7
   12c50:	beq	12ce4 <flatcc_builder_default_alloc@@Base+0x240>
   12c54:	cmp	r3, #0
   12c58:	addne	r6, r3, r2
   12c5c:	mvnne	r0, #3
   12c60:	bne	12c94 <flatcc_builder_default_alloc@@Base+0x1f0>
   12c64:	b	12d20 <flatcc_builder_default_alloc@@Base+0x27c>
   12c68:	sub	lr, r0, r4
   12c6c:	add	ip, lr, ip
   12c70:	str	ip, [r1]
   12c74:	ldrb	ip, [r3]
   12c78:	cmp	ip, #0
   12c7c:	beq	12d48 <flatcc_builder_default_alloc@@Base+0x2a4>
   12c80:	add	r3, r3, #1
   12c84:	cmp	r3, r6
   12c88:	add	r1, r1, #4
   12c8c:	sub	r0, r0, #4
   12c90:	beq	12cdc <flatcc_builder_default_alloc@@Base+0x238>
   12c94:	ldr	ip, [r1]
   12c98:	cmp	ip, #0
   12c9c:	bne	12c68 <flatcc_builder_default_alloc@@Base+0x1c4>
   12ca0:	ldrb	ip, [r3]
   12ca4:	cmp	ip, #0
   12ca8:	beq	12c80 <flatcc_builder_default_alloc@@Base+0x1dc>
   12cac:	ldr	r3, [pc, #196]	; 12d78 <flatcc_builder_default_alloc@@Base+0x2d4>
   12cb0:	ldr	r2, [pc, #196]	; 12d7c <flatcc_builder_default_alloc@@Base+0x2d8>
   12cb4:	ldr	r1, [pc, #196]	; 12d80 <flatcc_builder_default_alloc@@Base+0x2dc>
   12cb8:	ldr	r0, [pc, #196]	; 12d84 <flatcc_builder_default_alloc@@Base+0x2e0>
   12cbc:	bl	1206c <__assert_fail@plt>
   12cc0:	sub	r1, r0, r4
   12cc4:	add	r3, r3, #1
   12cc8:	add	r1, r1, lr
   12ccc:	cmp	r2, r3
   12cd0:	str	r1, [ip, #4]!
   12cd4:	sub	r0, r0, #4
   12cd8:	bne	12d28 <flatcc_builder_default_alloc@@Base+0x284>
   12cdc:	ldr	r0, [r5, #136]	; 0x88
   12ce0:	sub	r4, r0, r7
   12ce4:	cmp	r4, r0
   12ce8:	bge	12d70 <flatcc_builder_default_alloc@@Base+0x2cc>
   12cec:	ldr	r0, [r5, #36]	; 0x24
   12cf0:	mov	r2, r8
   12cf4:	str	r7, [sp]
   12cf8:	mov	r3, r4
   12cfc:	ldr	r6, [r5, #44]	; 0x2c
   12d00:	add	r1, sp, #24
   12d04:	blx	r6
   12d08:	cmp	r0, #0
   12d0c:	bne	12d5c <flatcc_builder_default_alloc@@Base+0x2b8>
   12d10:	mov	r0, r4
   12d14:	str	r4, [r5, #136]	; 0x88
   12d18:	add	sp, sp, #88	; 0x58
   12d1c:	pop	{r4, r5, r6, r7, r8, pc}
   12d20:	sub	ip, r1, #4
   12d24:	mvn	r0, #3
   12d28:	ldr	lr, [ip, #4]
   12d2c:	cmp	lr, #0
   12d30:	bne	12cc0 <flatcc_builder_default_alloc@@Base+0x21c>
   12d34:	ldr	r3, [pc, #60]	; 12d78 <flatcc_builder_default_alloc@@Base+0x2d4>
   12d38:	ldr	r2, [pc, #72]	; 12d88 <flatcc_builder_default_alloc@@Base+0x2e4>
   12d3c:	ldr	r1, [pc, #60]	; 12d80 <flatcc_builder_default_alloc@@Base+0x2dc>
   12d40:	ldr	r0, [pc, #68]	; 12d8c <flatcc_builder_default_alloc@@Base+0x2e8>
   12d44:	bl	1206c <__assert_fail@plt>
   12d48:	ldr	r3, [pc, #40]	; 12d78 <flatcc_builder_default_alloc@@Base+0x2d4>
   12d4c:	ldr	r2, [pc, #60]	; 12d90 <flatcc_builder_default_alloc@@Base+0x2ec>
   12d50:	ldr	r1, [pc, #40]	; 12d80 <flatcc_builder_default_alloc@@Base+0x2dc>
   12d54:	ldr	r0, [pc, #56]	; 12d94 <flatcc_builder_default_alloc@@Base+0x2f0>
   12d58:	bl	1206c <__assert_fail@plt>
   12d5c:	ldr	r3, [pc, #52]	; 12d98 <flatcc_builder_default_alloc@@Base+0x2f4>
   12d60:	ldr	r2, [pc, #52]	; 12d9c <flatcc_builder_default_alloc@@Base+0x2f8>
   12d64:	ldr	r1, [pc, #20]	; 12d80 <flatcc_builder_default_alloc@@Base+0x2dc>
   12d68:	ldr	r0, [pc, #28]	; 12d8c <flatcc_builder_default_alloc@@Base+0x2e8>
   12d6c:	bl	1206c <__assert_fail@plt>
   12d70:	bl	12110 <__assert_fail@plt+0xa4>
   12d74:	andeq	r8, r1, ip, lsl #29
   12d78:	andeq	r9, r1, ip, lsl #1
   12d7c:			; <UNDEFINED> instruction: 0x000005b5
   12d80:	andeq	r9, r1, r4, asr #10
   12d84:	andeq	r9, r1, r8, lsl #12
   12d88:			; <UNDEFINED> instruction: 0x000005b7
   12d8c:	andeq	r9, r1, r4, lsl #12
   12d90:			; <UNDEFINED> instruction: 0x000005b1
   12d94:	strdeq	r9, [r1], -r8
   12d98:	andeq	r8, r1, r0, lsl lr
   12d9c:	andeq	r0, r0, fp, lsl #5
   12da0:	ldrh	r3, [r0, #128]	; 0x80
   12da4:	push	{r4, r5, r6, r7, lr}
   12da8:	sub	sp, sp, #92	; 0x5c
   12dac:	cmp	r3, #3
   12db0:	movls	r3, #4
   12db4:	ldr	lr, [r0, #136]	; 0x88
   12db8:	mov	ip, #4
   12dbc:	strhls	r3, [r0, #128]	; 0x80
   12dc0:	mov	r4, r0
   12dc4:	lsls	r6, r2, #2
   12dc8:	mov	r0, #1
   12dcc:	add	r5, sp, #12
   12dd0:	str	ip, [sp, #16]
   12dd4:	str	r0, [sp, #20]
   12dd8:	and	r3, lr, #3
   12ddc:	movne	r0, #2
   12de0:	str	ip, [sp, #28]
   12de4:	addne	ip, r6, ip
   12de8:	str	r5, [sp, #24]
   12dec:	strne	r6, [sp, #36]	; 0x24
   12df0:	strne	r1, [sp, #32]
   12df4:	strne	ip, [sp, #16]
   12df8:	strne	r0, [sp, #20]
   12dfc:	movne	r5, r0
   12e00:	movne	r6, #3
   12e04:	moveq	r5, r0
   12e08:	moveq	r6, #2
   12e0c:	cmp	r3, #0
   12e10:	str	r2, [sp, #12]
   12e14:	beq	12e40 <flatcc_builder_default_alloc@@Base+0x39c>
   12e18:	add	r0, r5, #1
   12e1c:	add	r5, sp, #88	; 0x58
   12e20:	add	r0, r5, r0, lsl #3
   12e24:	ldr	r7, [pc, #204]	; 12ef8 <flatcc_builder_default_alloc@@Base+0x454>
   12e28:	mov	r5, r6
   12e2c:	add	ip, ip, r3
   12e30:	str	r3, [r0, #-68]	; 0xffffffbc
   12e34:	str	ip, [sp, #16]
   12e38:	str	r6, [sp, #20]
   12e3c:	str	r7, [r0, #-72]	; 0xffffffb8
   12e40:	cmp	r2, #0
   12e44:	beq	12ea0 <flatcc_builder_default_alloc@@Base+0x3fc>
   12e48:	ldr	r3, [r1]
   12e4c:	cmp	r3, #0
   12e50:	beq	12e88 <flatcc_builder_default_alloc@@Base+0x3e4>
   12e54:	sub	r6, lr, ip
   12e58:	mov	r0, #0
   12e5c:	mvn	lr, #3
   12e60:	sub	r3, r3, r6
   12e64:	add	r0, r0, #1
   12e68:	add	r3, r3, lr
   12e6c:	cmp	r2, r0
   12e70:	str	r3, [r1]
   12e74:	beq	12e9c <flatcc_builder_default_alloc@@Base+0x3f8>
   12e78:	ldr	r3, [r1, #4]!
   12e7c:	sub	lr, lr, #4
   12e80:	cmp	r3, #0
   12e84:	bne	12e60 <flatcc_builder_default_alloc@@Base+0x3bc>
   12e88:	ldr	r3, [pc, #108]	; 12efc <flatcc_builder_default_alloc@@Base+0x458>
   12e8c:	ldr	r2, [pc, #108]	; 12f00 <flatcc_builder_default_alloc@@Base+0x45c>
   12e90:	ldr	r1, [pc, #108]	; 12f04 <flatcc_builder_default_alloc@@Base+0x460>
   12e94:	ldr	r0, [pc, #108]	; 12f08 <flatcc_builder_default_alloc@@Base+0x464>
   12e98:	bl	1206c <__assert_fail@plt>
   12e9c:	ldr	lr, [r4, #136]	; 0x88
   12ea0:	sub	r6, lr, ip
   12ea4:	cmp	r6, lr
   12ea8:	bge	12ef4 <flatcc_builder_default_alloc@@Base+0x450>
   12eac:	ldr	r0, [r4, #36]	; 0x24
   12eb0:	mov	r2, r5
   12eb4:	str	ip, [sp]
   12eb8:	mov	r3, r6
   12ebc:	ldr	r5, [r4, #44]	; 0x2c
   12ec0:	add	r1, sp, #24
   12ec4:	blx	r5
   12ec8:	cmp	r0, #0
   12ecc:	bne	12ee0 <flatcc_builder_default_alloc@@Base+0x43c>
   12ed0:	mov	r0, r6
   12ed4:	str	r6, [r4, #136]	; 0x88
   12ed8:	add	sp, sp, #92	; 0x5c
   12edc:	pop	{r4, r5, r6, r7, pc}
   12ee0:	ldr	r3, [pc, #36]	; 12f0c <flatcc_builder_default_alloc@@Base+0x468>
   12ee4:	ldr	r2, [pc, #36]	; 12f10 <flatcc_builder_default_alloc@@Base+0x46c>
   12ee8:	ldr	r1, [pc, #20]	; 12f04 <flatcc_builder_default_alloc@@Base+0x460>
   12eec:	ldr	r0, [pc, #20]	; 12f08 <flatcc_builder_default_alloc@@Base+0x464>
   12ef0:	bl	1206c <__assert_fail@plt>
   12ef4:	bl	12110 <__assert_fail@plt+0xa4>
   12ef8:	andeq	r8, r1, ip, lsl #29
   12efc:	andeq	r9, r1, ip, lsl #1
   12f00:			; <UNDEFINED> instruction: 0x000005b7
   12f04:	andeq	r9, r1, r4, asr #10
   12f08:	andeq	r9, r1, r4, lsl #12
   12f0c:	andeq	r8, r1, r0, lsl lr
   12f10:	andeq	r0, r0, fp, lsl #5

00012f14 <flatcc_builder_flush_vtable_cache@@Base>:
   12f14:	ldr	r3, [r0, #116]	; 0x74
   12f18:	cmp	r3, #0
   12f1c:	bxeq	lr
   12f20:	ldr	r2, [r0, #96]	; 0x60
   12f24:	push	{r4, lr}
   12f28:	mov	r1, #0
   12f2c:	mov	r4, r0
   12f30:	ldr	r0, [r0, #92]	; 0x5c
   12f34:	bl	1203c <memset@plt>
   12f38:	mov	r2, #16
   12f3c:	mov	r3, #0
   12f40:	str	r2, [r4, #124]	; 0x7c
   12f44:	str	r3, [r4, #120]	; 0x78
   12f48:	pop	{r4, pc}

00012f4c <flatcc_builder_custom_init@@Base>:
   12f4c:	push	{r4, r5, r6, r7, r8, lr}
   12f50:	mov	r6, r1
   12f54:	mov	r7, r2
   12f58:	mov	r1, #0
   12f5c:	mov	r2, #232	; 0xe8
   12f60:	mov	r4, r0
   12f64:	mov	r5, r3
   12f68:	ldr	r8, [sp, #24]
   12f6c:	bl	1203c <memset@plt>
   12f70:	cmp	r6, #0
   12f74:	moveq	r3, #1
   12f78:	ldreq	r6, [pc, #40]	; 12fa8 <flatcc_builder_custom_init@@Base+0x5c>
   12f7c:	addeq	r7, r4, #188	; 0xbc
   12f80:	str	r8, [r4, #40]	; 0x28
   12f84:	str	r7, [r4, #36]	; 0x24
   12f88:	str	r6, [r4, #44]	; 0x2c
   12f8c:	mov	r0, #0
   12f90:	streq	r3, [r4, #184]	; 0xb8
   12f94:	ldr	r3, [pc, #16]	; 12fac <flatcc_builder_custom_init@@Base+0x60>
   12f98:	cmp	r5, #0
   12f9c:	moveq	r5, r3
   12fa0:	str	r5, [r4, #48]	; 0x30
   12fa4:	pop	{r4, r5, r6, r7, r8, pc}
   12fa8:	andeq	r8, r1, r0, lsl #10
   12fac:	andeq	r2, r1, r4, lsr #21

00012fb0 <flatcc_builder_init@@Base>:
   12fb0:	push	{r4, lr}
   12fb4:	mov	r2, #232	; 0xe8
   12fb8:	mov	r1, #0
   12fbc:	mov	r4, r0
   12fc0:	bl	1203c <memset@plt>
   12fc4:	ldr	r1, [pc, #32]	; 12fec <flatcc_builder_init@@Base+0x3c>
   12fc8:	ldr	r3, [pc, #32]	; 12ff0 <flatcc_builder_init@@Base+0x40>
   12fcc:	mov	r0, #1
   12fd0:	add	r2, r4, #188	; 0xbc
   12fd4:	str	r0, [r4, #184]	; 0xb8
   12fd8:	str	r1, [r4, #48]	; 0x30
   12fdc:	str	r2, [r4, #36]	; 0x24
   12fe0:	str	r3, [r4, #44]	; 0x2c
   12fe4:	mov	r0, #0
   12fe8:	pop	{r4, pc}
   12fec:	andeq	r2, r1, r4, lsr #21
   12ff0:	andeq	r8, r1, r0, lsl #10

00012ff4 <flatcc_builder_custom_reset@@Base>:
   12ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ff8:	add	r7, r0, #52	; 0x34
   12ffc:	mov	r4, #0
   13000:	sub	sp, sp, #12
   13004:	mov	r5, r0
   13008:	mov	sl, r1
   1300c:	mov	r8, r2
   13010:	mov	r6, r7
   13014:	mov	r9, r4
   13018:	mov	fp, #1
   1301c:	b	13070 <flatcc_builder_custom_reset@@Base+0x7c>
   13020:	cmp	r4, #5
   13024:	cmpne	r8, #0
   13028:	beq	13054 <flatcc_builder_custom_reset@@Base+0x60>
   1302c:	ldr	r0, [r5, #40]	; 0x28
   13030:	mov	r3, fp
   13034:	str	r4, [sp]
   13038:	mov	r2, #1
   1303c:	mov	r1, r6
   13040:	ldr	ip, [r5, #48]	; 0x30
   13044:	blx	ip
   13048:	cmp	r0, #0
   1304c:	bne	13124 <flatcc_builder_custom_reset@@Base+0x130>
   13050:	ldr	r0, [r7, r4, lsl #3]
   13054:	ldr	r2, [r6, #4]
   13058:	mov	r1, r9
   1305c:	bl	1203c <memset@plt>
   13060:	add	r4, r4, #1
   13064:	cmp	r4, #8
   13068:	add	r6, r6, #8
   1306c:	beq	1309c <flatcc_builder_custom_reset@@Base+0xa8>
   13070:	ldr	r0, [r7, r4, lsl #3]
   13074:	cmp	r0, #0
   13078:	bne	13020 <flatcc_builder_custom_reset@@Base+0x2c>
   1307c:	ldr	r3, [r6, #4]
   13080:	cmp	r3, #0
   13084:	beq	13060 <flatcc_builder_custom_reset@@Base+0x6c>
   13088:	ldr	r3, [pc, #156]	; 1312c <flatcc_builder_custom_reset@@Base+0x138>
   1308c:	ldr	r2, [pc, #156]	; 13130 <flatcc_builder_custom_reset@@Base+0x13c>
   13090:	ldr	r1, [pc, #156]	; 13134 <flatcc_builder_custom_reset@@Base+0x140>
   13094:	ldr	r0, [pc, #156]	; 13138 <flatcc_builder_custom_reset@@Base+0x144>
   13098:	bl	1206c <__assert_fail@plt>
   1309c:	ldr	r2, [r5, #124]	; 0x7c
   130a0:	mov	r3, #0
   130a4:	ldr	r0, [r5, #60]	; 0x3c
   130a8:	cmp	r2, r3
   130ac:	str	r3, [r5, #120]	; 0x78
   130b0:	ldr	r1, [r5, #76]	; 0x4c
   130b4:	movne	r3, #16
   130b8:	ldr	r2, [r5, #52]	; 0x34
   130bc:	str	r0, [r5, #16]
   130c0:	ldr	r0, [r5, #184]	; 0xb8
   130c4:	strne	r3, [r5, #124]	; 0x7c
   130c8:	mov	r3, #0
   130cc:	cmp	sl, #0
   130d0:	strne	r3, [r5, #172]	; 0xac
   130d4:	strne	r3, [r5, #176]	; 0xb0
   130d8:	strne	r3, [r5, #180]	; 0xb4
   130dc:	cmp	r0, #0
   130e0:	stm	r5, {r1, r2}
   130e4:	strh	r3, [r5, #128]	; 0x80
   130e8:	str	r3, [r5, #136]	; 0x88
   130ec:	str	r3, [r5, #140]	; 0x8c
   130f0:	str	r3, [r5, #156]	; 0x9c
   130f4:	str	r3, [r5, #160]	; 0xa0
   130f8:	str	r3, [r5, #20]
   130fc:	str	r3, [r5, #24]
   13100:	str	r3, [r5, #148]	; 0x94
   13104:	str	r3, [r5, #152]	; 0x98
   13108:	str	r3, [r5, #32]
   1310c:	beq	1311c <flatcc_builder_custom_reset@@Base+0x128>
   13110:	add	r0, r5, #188	; 0xbc
   13114:	bl	183d8 <flatcc_emitter_reset@@Base>
   13118:	mov	r0, #0
   1311c:	add	sp, sp, #12
   13120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13124:	mvn	r0, #0
   13128:	b	1311c <flatcc_builder_custom_reset@@Base+0x128>
   1312c:	andeq	r9, r1, ip, lsr #1
   13130:			; <UNDEFINED> instruction: 0x000001b2
   13134:	andeq	r9, r1, r4, asr #10
   13138:	andeq	r9, r1, r8, lsl r6

0001313c <flatcc_builder_reset@@Base>:
   1313c:	push	{r4, r5, r6, r7, r8, lr}
   13140:	mov	r5, r0
   13144:	add	r4, r0, #52	; 0x34
   13148:	add	r6, r0, #116	; 0x74
   1314c:	mov	r7, #0
   13150:	b	1316c <flatcc_builder_reset@@Base+0x30>
   13154:	ldr	r2, [r4, #4]
   13158:	mov	r1, r7
   1315c:	bl	1203c <memset@plt>
   13160:	add	r4, r4, #8
   13164:	cmp	r6, r4
   13168:	beq	13198 <flatcc_builder_reset@@Base+0x5c>
   1316c:	ldr	r0, [r4]
   13170:	cmp	r0, #0
   13174:	bne	13154 <flatcc_builder_reset@@Base+0x18>
   13178:	ldr	r3, [r4, #4]
   1317c:	cmp	r3, #0
   13180:	beq	13160 <flatcc_builder_reset@@Base+0x24>
   13184:	ldr	r3, [pc, #128]	; 1320c <flatcc_builder_reset@@Base+0xd0>
   13188:	ldr	r2, [pc, #128]	; 13210 <flatcc_builder_reset@@Base+0xd4>
   1318c:	ldr	r1, [pc, #128]	; 13214 <flatcc_builder_reset@@Base+0xd8>
   13190:	ldr	r0, [pc, #128]	; 13218 <flatcc_builder_reset@@Base+0xdc>
   13194:	bl	1206c <__assert_fail@plt>
   13198:	ldr	r2, [r5, #124]	; 0x7c
   1319c:	mov	r3, #0
   131a0:	cmp	r2, r3
   131a4:	str	r3, [r5, #120]	; 0x78
   131a8:	movne	r3, #16
   131ac:	strne	r3, [r5, #124]	; 0x7c
   131b0:	ldr	r1, [r5, #76]	; 0x4c
   131b4:	ldr	r3, [r5, #184]	; 0xb8
   131b8:	ldr	r2, [r5, #52]	; 0x34
   131bc:	ldr	r0, [r5, #60]	; 0x3c
   131c0:	cmp	r3, #0
   131c4:	mov	r3, #0
   131c8:	str	r0, [r5, #16]
   131cc:	stm	r5, {r1, r2}
   131d0:	strh	r3, [r5, #128]	; 0x80
   131d4:	str	r3, [r5, #136]	; 0x88
   131d8:	str	r3, [r5, #140]	; 0x8c
   131dc:	str	r3, [r5, #156]	; 0x9c
   131e0:	str	r3, [r5, #160]	; 0xa0
   131e4:	str	r3, [r5, #20]
   131e8:	str	r3, [r5, #24]
   131ec:	str	r3, [r5, #148]	; 0x94
   131f0:	str	r3, [r5, #152]	; 0x98
   131f4:	str	r3, [r5, #32]
   131f8:	beq	13204 <flatcc_builder_reset@@Base+0xc8>
   131fc:	add	r0, r5, #188	; 0xbc
   13200:	bl	183d8 <flatcc_emitter_reset@@Base>
   13204:	mov	r0, #0
   13208:	pop	{r4, r5, r6, r7, r8, pc}
   1320c:	andeq	r9, r1, ip, lsr #1
   13210:			; <UNDEFINED> instruction: 0x000001b2
   13214:	andeq	r9, r1, r4, asr #10
   13218:	andeq	r9, r1, r8, lsl r6

0001321c <flatcc_builder_clear@@Base>:
   1321c:	push	{r4, r5, r6, r7, r8, lr}
   13220:	mov	r4, #0
   13224:	sub	sp, sp, #8
   13228:	mov	r6, r0
   1322c:	add	r5, r0, #52	; 0x34
   13230:	mov	r8, r4
   13234:	ldr	r0, [r6, #40]	; 0x28
   13238:	mov	r1, r5
   1323c:	str	r4, [sp]
   13240:	mov	r3, r8
   13244:	add	r4, r4, #1
   13248:	ldr	r7, [r6, #48]	; 0x30
   1324c:	mov	r2, #0
   13250:	blx	r7
   13254:	cmp	r4, #8
   13258:	add	r5, r5, #8
   1325c:	bne	13234 <flatcc_builder_clear@@Base+0x18>
   13260:	ldr	r3, [r6, #184]	; 0xb8
   13264:	cmp	r3, #0
   13268:	beq	13274 <flatcc_builder_clear@@Base+0x58>
   1326c:	add	r0, r6, #188	; 0xbc
   13270:	bl	18494 <flatcc_emitter_clear@@Base>
   13274:	mov	r0, r6
   13278:	mov	r2, #232	; 0xe8
   1327c:	mov	r1, #0
   13280:	add	sp, sp, #8
   13284:	pop	{r4, r5, r6, r7, r8, lr}
   13288:	b	1203c <memset@plt>

0001328c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1328c:	push	{r4, r5, r6, r7, r8, lr}
   13290:	add	r4, r1, #3
   13294:	bic	r4, r4, #3
   13298:	ldr	r7, [r0, #228]	; 0xe4
   1329c:	add	r4, r4, #4
   132a0:	ldr	r3, [r0, #112]	; 0x70
   132a4:	add	r2, r4, r7
   132a8:	cmp	r2, r3
   132ac:	sub	sp, sp, #8
   132b0:	mov	r6, r0
   132b4:	bhi	132fc <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   132b8:	ldr	r8, [r6, #108]	; 0x6c
   132bc:	adds	r5, r8, r7
   132c0:	beq	13324 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   132c4:	mov	r2, r4
   132c8:	mov	r1, #0
   132cc:	mov	r0, r5
   132d0:	bl	1203c <memset@plt>
   132d4:	ldr	r3, [r6, #224]	; 0xe0
   132d8:	add	r0, r5, #4
   132dc:	str	r3, [r8, r7]
   132e0:	ldr	r3, [r6, #228]	; 0xe4
   132e4:	add	r4, r4, r3
   132e8:	add	r3, r3, #4
   132ec:	str	r4, [r6, #228]	; 0xe4
   132f0:	str	r3, [r6, #224]	; 0xe0
   132f4:	add	sp, sp, #8
   132f8:	pop	{r4, r5, r6, r7, r8, pc}
   132fc:	mov	r3, #7
   13300:	ldr	r0, [r0, #40]	; 0x28
   13304:	add	r1, r6, #108	; 0x6c
   13308:	str	r3, [sp]
   1330c:	mov	r3, #0
   13310:	ldr	r5, [r6, #48]	; 0x30
   13314:	blx	r5
   13318:	cmp	r0, #0
   1331c:	beq	132b8 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   13320:	bl	120c4 <__assert_fail@plt+0x58>
   13324:	mov	r0, r5
   13328:	b	132f4 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

0001332c <flatcc_builder_enter_user_frame@@Base>:
   1332c:	push	{r4, r5, r6, r7, lr}
   13330:	add	r4, r1, #3
   13334:	bic	r4, r4, #3
   13338:	ldr	r6, [r0, #228]	; 0xe4
   1333c:	add	r4, r4, #4
   13340:	ldr	r3, [r0, #112]	; 0x70
   13344:	add	r2, r4, r6
   13348:	cmp	r2, r3
   1334c:	sub	sp, sp, #12
   13350:	mov	r5, r0
   13354:	bhi	13394 <flatcc_builder_enter_user_frame@@Base+0x68>
   13358:	ldr	r7, [r5, #108]	; 0x6c
   1335c:	adds	r0, r7, r6
   13360:	beq	1338c <flatcc_builder_enter_user_frame@@Base+0x60>
   13364:	mov	r2, r4
   13368:	mov	r1, #0
   1336c:	bl	1203c <memset@plt>
   13370:	ldr	r3, [r5, #224]	; 0xe0
   13374:	str	r3, [r7, r6]
   13378:	ldr	r0, [r5, #228]	; 0xe4
   1337c:	add	r4, r4, r0
   13380:	add	r0, r0, #4
   13384:	str	r4, [r5, #228]	; 0xe4
   13388:	str	r0, [r5, #224]	; 0xe0
   1338c:	add	sp, sp, #12
   13390:	pop	{r4, r5, r6, r7, pc}
   13394:	mov	r3, #7
   13398:	ldr	r0, [r0, #40]	; 0x28
   1339c:	add	r1, r5, #108	; 0x6c
   133a0:	str	r3, [sp]
   133a4:	mov	r3, #0
   133a8:	ldr	r7, [r5, #48]	; 0x30
   133ac:	blx	r7
   133b0:	cmp	r0, #0
   133b4:	beq	13358 <flatcc_builder_enter_user_frame@@Base+0x2c>
   133b8:	bl	120c4 <__assert_fail@plt+0x58>

000133bc <flatcc_builder_exit_user_frame@@Base>:
   133bc:	ldr	r3, [r0, #224]	; 0xe0
   133c0:	cmp	r3, #0
   133c4:	beq	133e8 <flatcc_builder_exit_user_frame@@Base+0x2c>
   133c8:	ldr	r2, [r0, #108]	; 0x6c
   133cc:	sub	r1, r3, #4
   133d0:	add	r3, r2, r3
   133d4:	str	r1, [r0, #228]	; 0xe4
   133d8:	ldr	r3, [r3, #-4]
   133dc:	str	r3, [r0, #224]	; 0xe0
   133e0:	mov	r0, r3
   133e4:	bx	lr
   133e8:	push	{r4, lr}
   133ec:	bl	1215c <__assert_fail@plt+0xf0>

000133f0 <flatcc_builder_exit_user_frame_at@@Base>:
   133f0:	ldr	r3, [r0, #224]	; 0xe0
   133f4:	push	{r4, lr}
   133f8:	cmp	r3, r1
   133fc:	bcc	1342c <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13400:	cmp	r1, #0
   13404:	str	r1, [r0, #224]	; 0xe0
   13408:	beq	13440 <flatcc_builder_exit_user_frame_at@@Base+0x50>
   1340c:	ldr	r3, [r0, #108]	; 0x6c
   13410:	sub	r2, r1, #4
   13414:	add	r1, r3, r1
   13418:	str	r2, [r0, #228]	; 0xe4
   1341c:	ldr	r3, [r1, #-4]
   13420:	str	r3, [r0, #224]	; 0xe0
   13424:	mov	r0, r3
   13428:	pop	{r4, pc}
   1342c:	ldr	r3, [pc, #16]	; 13444 <flatcc_builder_exit_user_frame_at@@Base+0x54>
   13430:	ldr	r2, [pc, #16]	; 13448 <flatcc_builder_exit_user_frame_at@@Base+0x58>
   13434:	ldr	r1, [pc, #16]	; 1344c <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13438:	ldr	r0, [pc, #16]	; 13450 <flatcc_builder_exit_user_frame_at@@Base+0x60>
   1343c:	bl	1206c <__assert_fail@plt>
   13440:	bl	1215c <__assert_fail@plt+0xf0>
   13444:	andeq	r9, r1, r8, asr #1
   13448:	andeq	r0, r0, r7, lsr #4
   1344c:	andeq	r9, r1, r4, asr #10
   13450:	andeq	r9, r1, ip, lsr #12

00013454 <flatcc_builder_get_current_user_frame@@Base>:
   13454:	ldr	r0, [r0, #224]	; 0xe0
   13458:	bx	lr

0001345c <flatcc_builder_get_user_frame_ptr@@Base>:
   1345c:	ldr	r0, [r0, #108]	; 0x6c
   13460:	add	r0, r0, r1
   13464:	bx	lr

00013468 <flatcc_builder_embed_buffer@@Base>:
   13468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1346c:	sub	sp, sp, #92	; 0x5c
   13470:	cmp	r1, #0
   13474:	ldr	r6, [sp, #132]	; 0x84
   13478:	mov	r8, r2
   1347c:	mov	r5, r0
   13480:	mov	r7, r3
   13484:	ldr	r2, [r0, #152]	; 0x98
   13488:	and	r6, r6, #2
   1348c:	ldrh	r4, [sp, #128]	; 0x80
   13490:	bne	134a0 <flatcc_builder_embed_buffer@@Base+0x38>
   13494:	ldrh	r1, [r0, #132]	; 0x84
   13498:	cmp	r1, #0
   1349c:	beq	13628 <flatcc_builder_embed_buffer@@Base+0x1c0>
   134a0:	cmp	r4, #4
   134a4:	movcc	r4, #4
   134a8:	cmp	r1, r4
   134ac:	movcs	r4, r1
   134b0:	cmp	r2, #0
   134b4:	bne	1351c <flatcc_builder_embed_buffer@@Base+0xb4>
   134b8:	ldr	r9, [r5, #140]	; 0x8c
   134bc:	sub	r1, r1, #1
   134c0:	ands	r1, r1, r9
   134c4:	beq	1351c <flatcc_builder_embed_buffer@@Base+0xb4>
   134c8:	add	r3, r9, r1
   134cc:	ldr	sl, [pc, #420]	; 13678 <flatcc_builder_embed_buffer@@Base+0x210>
   134d0:	mov	r2, #1
   134d4:	cmp	r9, r3
   134d8:	str	r1, [sp, #16]
   134dc:	str	r1, [sp, #28]
   134e0:	str	sl, [sp, #24]
   134e4:	str	r3, [r5, #140]	; 0x8c
   134e8:	str	r2, [sp, #20]
   134ec:	bgt	1364c <flatcc_builder_embed_buffer@@Base+0x1e4>
   134f0:	ldr	r0, [r5, #36]	; 0x24
   134f4:	mov	r3, r9
   134f8:	str	r1, [sp]
   134fc:	add	r1, sp, #24
   13500:	ldr	fp, [r5, #44]	; 0x2c
   13504:	blx	fp
   13508:	cmp	r0, #0
   1350c:	bne	13650 <flatcc_builder_embed_buffer@@Base+0x1e8>
   13510:	cmn	r9, #1
   13514:	beq	13664 <flatcc_builder_embed_buffer@@Base+0x1fc>
   13518:	ldr	r2, [r5, #152]	; 0x98
   1351c:	ldr	r1, [r5, #136]	; 0x88
   13520:	cmp	r6, #0
   13524:	movne	r6, #4
   13528:	moveq	r6, #0
   1352c:	sub	r3, r1, r7
   13530:	sub	r6, r3, r6
   13534:	sub	r4, r4, #1
   13538:	and	r4, r4, r6
   1353c:	mov	r3, #0
   13540:	add	r0, r7, r4
   13544:	cmp	r2, #0
   13548:	str	r0, [sp, #12]
   1354c:	str	r3, [sp, #16]
   13550:	str	r3, [sp, #20]
   13554:	bne	13600 <flatcc_builder_embed_buffer@@Base+0x198>
   13558:	mov	r3, r2
   1355c:	mov	ip, #2
   13560:	mov	r0, #1
   13564:	cmp	r7, #0
   13568:	beq	13594 <flatcc_builder_embed_buffer@@Base+0x12c>
   1356c:	add	r2, r2, #1
   13570:	add	lr, sp, #88	; 0x58
   13574:	add	r2, lr, r2, lsl #3
   13578:	add	r3, r3, r7
   1357c:	str	r3, [sp, #16]
   13580:	str	r8, [r2, #-72]	; 0xffffffb8
   13584:	str	r7, [r2, #-68]	; 0xffffffbc
   13588:	mov	r2, r0
   1358c:	str	r0, [sp, #20]
   13590:	mov	r0, ip
   13594:	cmp	r4, #0
   13598:	beq	135c4 <flatcc_builder_embed_buffer@@Base+0x15c>
   1359c:	add	r2, r2, #1
   135a0:	add	ip, sp, #88	; 0x58
   135a4:	add	ip, ip, r2, lsl #3
   135a8:	ldr	lr, [pc, #200]	; 13678 <flatcc_builder_embed_buffer@@Base+0x210>
   135ac:	mov	r2, r0
   135b0:	add	r3, r3, r4
   135b4:	str	r3, [sp, #16]
   135b8:	str	r4, [ip, #-68]	; 0xffffffbc
   135bc:	str	lr, [ip, #-72]	; 0xffffffb8
   135c0:	str	r0, [sp, #20]
   135c4:	sub	r4, r1, r3
   135c8:	cmp	r1, r4
   135cc:	ble	13634 <flatcc_builder_embed_buffer@@Base+0x1cc>
   135d0:	ldr	r0, [r5, #36]	; 0x24
   135d4:	add	r1, sp, #24
   135d8:	str	r3, [sp]
   135dc:	mov	r3, r4
   135e0:	ldr	r6, [r5, #44]	; 0x2c
   135e4:	blx	r6
   135e8:	cmp	r0, #0
   135ec:	bne	13638 <flatcc_builder_embed_buffer@@Base+0x1d0>
   135f0:	mov	r0, r4
   135f4:	str	r4, [r5, #136]	; 0x88
   135f8:	add	sp, sp, #92	; 0x5c
   135fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13600:	mov	r3, #4
   13604:	add	r0, sp, #12
   13608:	mov	r2, #1
   1360c:	str	r0, [sp, #24]
   13610:	str	r3, [sp, #16]
   13614:	str	r3, [sp, #28]
   13618:	str	r2, [sp, #20]
   1361c:	mov	ip, #3
   13620:	mov	r0, #2
   13624:	b	13564 <flatcc_builder_embed_buffer@@Base+0xfc>
   13628:	cmp	r4, #4
   1362c:	movcc	r4, #4
   13630:	b	1351c <flatcc_builder_embed_buffer@@Base+0xb4>
   13634:	bl	12110 <__assert_fail@plt+0xa4>
   13638:	ldr	r3, [pc, #60]	; 1367c <flatcc_builder_embed_buffer@@Base+0x214>
   1363c:	ldr	r2, [pc, #60]	; 13680 <flatcc_builder_embed_buffer@@Base+0x218>
   13640:	ldr	r1, [pc, #60]	; 13684 <flatcc_builder_embed_buffer@@Base+0x21c>
   13644:	ldr	r0, [pc, #60]	; 13688 <flatcc_builder_embed_buffer@@Base+0x220>
   13648:	bl	1206c <__assert_fail@plt>
   1364c:	bl	120e8 <__assert_fail@plt+0x7c>
   13650:	ldr	r3, [pc, #52]	; 1368c <flatcc_builder_embed_buffer@@Base+0x224>
   13654:	ldr	r2, [pc, #52]	; 13690 <flatcc_builder_embed_buffer@@Base+0x228>
   13658:	ldr	r1, [pc, #36]	; 13684 <flatcc_builder_embed_buffer@@Base+0x21c>
   1365c:	ldr	r0, [pc, #36]	; 13688 <flatcc_builder_embed_buffer@@Base+0x220>
   13660:	bl	1206c <__assert_fail@plt>
   13664:	add	r3, sl, #608	; 0x260
   13668:	ldr	r2, [pc, #36]	; 13694 <flatcc_builder_embed_buffer@@Base+0x22c>
   1366c:	ldr	r1, [pc, #16]	; 13684 <flatcc_builder_embed_buffer@@Base+0x21c>
   13670:	ldr	r0, [pc, #16]	; 13688 <flatcc_builder_embed_buffer@@Base+0x220>
   13674:	bl	1206c <__assert_fail@plt>
   13678:	andeq	r8, r1, ip, lsl #29
   1367c:	andeq	r8, r1, r0, lsl lr
   13680:	andeq	r0, r0, fp, lsl #5
   13684:	andeq	r9, r1, r4, asr #10
   13688:	andeq	r9, r1, r4, lsl #12
   1368c:	andeq	r8, r1, r4, lsl #28
   13690:	andeq	r0, r0, r5, lsr #5
   13694:			; <UNDEFINED> instruction: 0x000002be

00013698 <flatcc_builder_create_buffer@@Base>:
   13698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1369c:	sub	sp, sp, #100	; 0x64
   136a0:	mov	ip, #0
   136a4:	ldr	r5, [sp, #140]	; 0x8c
   136a8:	cmp	r2, #0
   136ac:	mov	r6, r0
   136b0:	mov	r8, r1
   136b4:	mov	sl, r3
   136b8:	and	r7, r5, #1
   136bc:	str	ip, [sp, #20]
   136c0:	ldrh	r4, [sp, #136]	; 0x88
   136c4:	bne	136d4 <flatcc_builder_create_buffer@@Base+0x3c>
   136c8:	ldrh	r2, [r0, #132]	; 0x84
   136cc:	cmp	r2, ip
   136d0:	beq	138e0 <flatcc_builder_create_buffer@@Base+0x248>
   136d4:	cmp	r4, #4
   136d8:	movcc	r4, #4
   136dc:	cmp	r2, r4
   136e0:	movcs	r4, r2
   136e4:	cmp	r7, #0
   136e8:	bne	1374c <flatcc_builder_create_buffer@@Base+0xb4>
   136ec:	ldr	r9, [r6, #140]	; 0x8c
   136f0:	sub	r2, r2, #1
   136f4:	ands	r3, r2, r9
   136f8:	beq	1374c <flatcc_builder_create_buffer@@Base+0xb4>
   136fc:	add	r1, r9, r3
   13700:	ldr	fp, [pc, #584]	; 13950 <flatcc_builder_create_buffer@@Base+0x2b8>
   13704:	mov	r2, #1
   13708:	cmp	r9, r1
   1370c:	str	r3, [sp, #24]
   13710:	str	r3, [sp, #36]	; 0x24
   13714:	str	fp, [sp, #32]
   13718:	str	r1, [r6, #140]	; 0x8c
   1371c:	str	r2, [sp, #28]
   13720:	bgt	13938 <flatcc_builder_create_buffer@@Base+0x2a0>
   13724:	ldr	r0, [r6, #36]	; 0x24
   13728:	add	r1, sp, #32
   1372c:	str	r3, [sp]
   13730:	mov	r3, r9
   13734:	ldr	ip, [r6, #44]	; 0x2c
   13738:	blx	ip
   1373c:	cmp	r0, #0
   13740:	bne	1393c <flatcc_builder_create_buffer@@Base+0x2a4>
   13744:	cmn	r9, #1
   13748:	beq	138f8 <flatcc_builder_create_buffer@@Base+0x260>
   1374c:	ldrh	r3, [r6, #128]	; 0x80
   13750:	ldr	r0, [r6, #136]	; 0x88
   13754:	uxtb	lr, r7
   13758:	cmp	r3, r4
   1375c:	strhcc	r4, [r6, #128]	; 0x80
   13760:	cmp	r8, #0
   13764:	ldreq	r1, [sp, #20]
   13768:	ldrne	r1, [r8]
   1376c:	ldrne	r3, [r8]
   13770:	strne	r3, [sp, #20]
   13774:	cmp	r1, #0
   13778:	movne	r1, #4
   1377c:	moveq	r1, #0
   13780:	ands	r5, r5, #2
   13784:	bne	138a8 <flatcc_builder_create_buffer@@Base+0x210>
   13788:	sub	r3, r4, #1
   1378c:	sub	r4, r0, #4
   13790:	cmp	lr, #0
   13794:	sub	r4, r4, r1
   13798:	and	r4, r4, r3
   1379c:	moveq	r8, #3
   137a0:	moveq	ip, #2
   137a4:	moveq	r2, #1
   137a8:	moveq	r3, #4
   137ac:	bne	138b8 <flatcc_builder_create_buffer@@Base+0x220>
   137b0:	add	r5, r5, #1
   137b4:	add	r9, sp, #96	; 0x60
   137b8:	add	r5, r9, r5, lsl #3
   137bc:	add	fp, sp, #12
   137c0:	mov	r9, #4
   137c4:	cmp	r1, #0
   137c8:	str	r3, [sp, #24]
   137cc:	str	fp, [r5, #-72]	; 0xffffffb8
   137d0:	str	r9, [r5, #-68]	; 0xffffffbc
   137d4:	str	r2, [sp, #28]
   137d8:	beq	13808 <flatcc_builder_create_buffer@@Base+0x170>
   137dc:	add	r2, r2, #1
   137e0:	add	r5, sp, #96	; 0x60
   137e4:	add	r2, r5, r2, lsl #3
   137e8:	add	r3, r3, r1
   137ec:	add	r5, sp, #20
   137f0:	str	r3, [sp, #24]
   137f4:	str	r1, [r2, #-68]	; 0xffffffbc
   137f8:	str	r5, [r2, #-72]	; 0xffffffb8
   137fc:	mov	r2, ip
   13800:	str	ip, [sp, #28]
   13804:	mov	ip, r8
   13808:	cmp	r4, #0
   1380c:	beq	13838 <flatcc_builder_create_buffer@@Base+0x1a0>
   13810:	add	r2, r2, #1
   13814:	add	r1, sp, #96	; 0x60
   13818:	add	r1, r1, r2, lsl #3
   1381c:	ldr	r5, [pc, #300]	; 13950 <flatcc_builder_create_buffer@@Base+0x2b8>
   13820:	mov	r2, ip
   13824:	add	r3, r3, r4
   13828:	str	r3, [sp, #24]
   1382c:	str	r4, [r1, #-68]	; 0xffffffbc
   13830:	str	r5, [r1, #-72]	; 0xffffffb8
   13834:	str	ip, [sp, #28]
   13838:	sub	r4, r0, r3
   1383c:	cmp	lr, #0
   13840:	mov	r1, r4
   13844:	beq	138ec <flatcc_builder_create_buffer@@Base+0x254>
   13848:	cmp	r7, #0
   1384c:	add	r1, r4, #4
   13850:	beq	138ec <flatcc_builder_create_buffer@@Base+0x254>
   13854:	ldr	ip, [r6, #144]	; 0x90
   13858:	sub	ip, ip, r1
   1385c:	sub	sl, sl, r1
   13860:	cmp	r4, r0
   13864:	str	sl, [sp, #12]
   13868:	str	ip, [sp, #16]
   1386c:	bge	1390c <flatcc_builder_create_buffer@@Base+0x274>
   13870:	ldr	r0, [r6, #36]	; 0x24
   13874:	add	r1, sp, #32
   13878:	str	r3, [sp]
   1387c:	mov	r3, r4
   13880:	ldr	r5, [r6, #44]	; 0x2c
   13884:	blx	r5
   13888:	cmp	r0, #0
   1388c:	bne	13910 <flatcc_builder_create_buffer@@Base+0x278>
   13890:	cmp	r4, #0
   13894:	str	r4, [r6, #136]	; 0x88
   13898:	beq	13924 <flatcc_builder_create_buffer@@Base+0x28c>
   1389c:	mov	r0, r4
   138a0:	add	sp, sp, #100	; 0x64
   138a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a8:	sub	r3, r0, #8
   138ac:	sub	r4, r4, #1
   138b0:	sub	r3, r3, r1
   138b4:	and	r4, r4, r3
   138b8:	add	r3, sp, #16
   138bc:	mov	r8, #4
   138c0:	mov	r5, #1
   138c4:	str	r3, [sp, #32]
   138c8:	str	r8, [sp, #36]	; 0x24
   138cc:	mov	lr, r5
   138d0:	mov	ip, #3
   138d4:	mov	r2, #2
   138d8:	mov	r3, #8
   138dc:	b	137b0 <flatcc_builder_create_buffer@@Base+0x118>
   138e0:	cmp	r4, #4
   138e4:	movcc	r4, #4
   138e8:	b	1374c <flatcc_builder_create_buffer@@Base+0xb4>
   138ec:	ldr	ip, [r6, #140]	; 0x8c
   138f0:	sub	ip, ip, r1
   138f4:	b	1385c <flatcc_builder_create_buffer@@Base+0x1c4>
   138f8:	add	r3, fp, #608	; 0x260
   138fc:	ldr	r2, [pc, #80]	; 13954 <flatcc_builder_create_buffer@@Base+0x2bc>
   13900:	ldr	r1, [pc, #80]	; 13958 <flatcc_builder_create_buffer@@Base+0x2c0>
   13904:	ldr	r0, [pc, #80]	; 1395c <flatcc_builder_create_buffer@@Base+0x2c4>
   13908:	bl	1206c <__assert_fail@plt>
   1390c:	bl	12110 <__assert_fail@plt+0xa4>
   13910:	ldr	r3, [pc, #72]	; 13960 <flatcc_builder_create_buffer@@Base+0x2c8>
   13914:	ldr	r2, [pc, #72]	; 13964 <flatcc_builder_create_buffer@@Base+0x2cc>
   13918:	ldr	r1, [pc, #56]	; 13958 <flatcc_builder_create_buffer@@Base+0x2c0>
   1391c:	ldr	r0, [pc, #56]	; 1395c <flatcc_builder_create_buffer@@Base+0x2c4>
   13920:	bl	1206c <__assert_fail@plt>
   13924:	ldr	r3, [pc, #60]	; 13968 <flatcc_builder_create_buffer@@Base+0x2d0>
   13928:	mov	r2, #772	; 0x304
   1392c:	ldr	r1, [pc, #36]	; 13958 <flatcc_builder_create_buffer@@Base+0x2c0>
   13930:	ldr	r0, [pc, #36]	; 1395c <flatcc_builder_create_buffer@@Base+0x2c4>
   13934:	bl	1206c <__assert_fail@plt>
   13938:	bl	120e8 <__assert_fail@plt+0x7c>
   1393c:	ldr	r3, [pc, #40]	; 1396c <flatcc_builder_create_buffer@@Base+0x2d4>
   13940:	ldr	r2, [pc, #40]	; 13970 <flatcc_builder_create_buffer@@Base+0x2d8>
   13944:	ldr	r1, [pc, #12]	; 13958 <flatcc_builder_create_buffer@@Base+0x2c0>
   13948:	ldr	r0, [pc, #12]	; 1395c <flatcc_builder_create_buffer@@Base+0x2c4>
   1394c:	bl	1206c <__assert_fail@plt>
   13950:	andeq	r8, r1, ip, lsl #29
   13954:			; <UNDEFINED> instruction: 0x000002be
   13958:	andeq	r9, r1, r4, asr #10
   1395c:	andeq	r9, r1, r4, lsl #12
   13960:	andeq	r8, r1, r0, lsl lr
   13964:	andeq	r0, r0, fp, lsl #5
   13968:	strdeq	r9, [r1], -ip
   1396c:	andeq	r8, r1, r4, lsl #28
   13970:	andeq	r0, r0, r5, lsr #5

00013974 <flatcc_builder_create_struct@@Base>:
   13974:	cmp	r3, #0
   13978:	push	{r4, r5, r6, lr}
   1397c:	sub	sp, sp, #80	; 0x50
   13980:	beq	13a6c <flatcc_builder_create_struct@@Base+0xf8>
   13984:	mov	ip, r2
   13988:	ldrh	r2, [r0, #128]	; 0x80
   1398c:	mov	r5, r0
   13990:	cmp	r2, r3
   13994:	strhcc	r3, [r0, #128]	; 0x80
   13998:	ldr	r0, [r0, #136]	; 0x88
   1399c:	mov	r2, #0
   139a0:	sub	r3, r3, #1
   139a4:	sub	r4, r0, ip
   139a8:	cmp	ip, #0
   139ac:	and	r3, r3, r4
   139b0:	str	r2, [sp, #8]
   139b4:	str	r2, [sp, #12]
   139b8:	bne	13a2c <flatcc_builder_create_struct@@Base+0xb8>
   139bc:	cmp	r3, #0
   139c0:	movne	r2, #1
   139c4:	movne	r1, ip
   139c8:	beq	13a54 <flatcc_builder_create_struct@@Base+0xe0>
   139cc:	add	r1, r1, #1
   139d0:	add	r4, sp, #80	; 0x50
   139d4:	add	ip, ip, r3
   139d8:	add	r1, r4, r1, lsl #3
   139dc:	ldr	lr, [pc, #156]	; 13a80 <flatcc_builder_create_struct@@Base+0x10c>
   139e0:	sub	r4, r0, ip
   139e4:	str	r3, [r1, #-68]	; 0xffffffbc
   139e8:	str	ip, [sp, #8]
   139ec:	str	r2, [sp, #12]
   139f0:	str	lr, [r1, #-72]	; 0xffffffb8
   139f4:	cmp	r0, r4
   139f8:	ble	13a54 <flatcc_builder_create_struct@@Base+0xe0>
   139fc:	ldr	r0, [r5, #36]	; 0x24
   13a00:	mov	r3, r4
   13a04:	str	ip, [sp]
   13a08:	add	r1, sp, #16
   13a0c:	ldr	r6, [r5, #44]	; 0x2c
   13a10:	blx	r6
   13a14:	cmp	r0, #0
   13a18:	bne	13a58 <flatcc_builder_create_struct@@Base+0xe4>
   13a1c:	mov	r0, r4
   13a20:	str	r4, [r5, #136]	; 0x88
   13a24:	add	sp, sp, #80	; 0x50
   13a28:	pop	{r4, r5, r6, pc}
   13a2c:	cmp	r3, r2
   13a30:	mov	r2, #1
   13a34:	str	r1, [sp, #16]
   13a38:	str	r2, [sp, #12]
   13a3c:	movne	r1, r2
   13a40:	str	ip, [sp, #8]
   13a44:	str	ip, [sp, #20]
   13a48:	movne	r2, #2
   13a4c:	beq	139f4 <flatcc_builder_create_struct@@Base+0x80>
   13a50:	b	139cc <flatcc_builder_create_struct@@Base+0x58>
   13a54:	bl	12110 <__assert_fail@plt+0xa4>
   13a58:	ldr	r3, [pc, #36]	; 13a84 <flatcc_builder_create_struct@@Base+0x110>
   13a5c:	ldr	r2, [pc, #36]	; 13a88 <flatcc_builder_create_struct@@Base+0x114>
   13a60:	ldr	r1, [pc, #36]	; 13a8c <flatcc_builder_create_struct@@Base+0x118>
   13a64:	ldr	r0, [pc, #36]	; 13a90 <flatcc_builder_create_struct@@Base+0x11c>
   13a68:	bl	1206c <__assert_fail@plt>
   13a6c:	ldr	r3, [pc, #32]	; 13a94 <flatcc_builder_create_struct@@Base+0x120>
   13a70:	ldr	r2, [pc, #32]	; 13a98 <flatcc_builder_create_struct@@Base+0x124>
   13a74:	ldr	r1, [pc, #16]	; 13a8c <flatcc_builder_create_struct@@Base+0x118>
   13a78:	ldr	r0, [pc, #28]	; 13a9c <flatcc_builder_create_struct@@Base+0x128>
   13a7c:	bl	1206c <__assert_fail@plt>
   13a80:	andeq	r8, r1, ip, lsl #29
   13a84:	andeq	r8, r1, r0, lsl lr
   13a88:	andeq	r0, r0, fp, lsl #5
   13a8c:	andeq	r9, r1, r4, asr #10
   13a90:	andeq	r9, r1, r4, lsl #12
   13a94:	andeq	r9, r1, ip, lsl r1
   13a98:	andeq	r0, r0, pc, lsl #6
   13a9c:	andeq	r9, r1, ip, asr #12

00013aa0 <flatcc_builder_start_buffer@@Base>:
   13aa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13aa4:	mov	r4, r0
   13aa8:	ldr	r0, [r0, #156]	; 0x9c
   13aac:	ldr	ip, [r4, #160]	; 0xa0
   13ab0:	mov	r5, r1
   13ab4:	add	r1, r0, #1
   13ab8:	cmp	r1, ip
   13abc:	sub	sp, sp, #8
   13ac0:	mov	r7, r2
   13ac4:	mov	r6, r3
   13ac8:	str	r1, [r4, #156]	; 0x9c
   13acc:	ldrh	r8, [r4, #128]	; 0x80
   13ad0:	ble	13b40 <flatcc_builder_start_buffer@@Base+0xa0>
   13ad4:	ldr	r3, [r4, #176]	; 0xb0
   13ad8:	cmp	r3, #0
   13adc:	cmpgt	r1, r3
   13ae0:	movgt	r3, #1
   13ae4:	movle	r3, #0
   13ae8:	bgt	13c1c <flatcc_builder_start_buffer@@Base+0x17c>
   13aec:	add	r0, r0, r0, lsl #3
   13af0:	ldr	r1, [r4, #88]	; 0x58
   13af4:	lsl	r9, r0, #2
   13af8:	add	r2, r9, #36	; 0x24
   13afc:	cmp	r2, r1
   13b00:	bhi	13bf8 <flatcc_builder_start_buffer@@Base+0x158>
   13b04:	ldr	r3, [r4, #84]	; 0x54
   13b08:	add	r3, r3, r9
   13b0c:	cmp	r3, #0
   13b10:	str	r3, [r4, #32]
   13b14:	beq	13c1c <flatcc_builder_start_buffer@@Base+0x17c>
   13b18:	ldr	r2, [r4, #88]	; 0x58
   13b1c:	ldr	r0, [pc, #256]	; 13c24 <flatcc_builder_start_buffer@@Base+0x184>
   13b20:	ldr	r1, [r4, #176]	; 0xb0
   13b24:	umull	r0, r2, r0, r2
   13b28:	lsr	r2, r2, #3
   13b2c:	cmp	r1, #0
   13b30:	cmpgt	r2, r1
   13b34:	str	r2, [r4, #160]	; 0xa0
   13b38:	strgt	r1, [r4, #160]	; 0xa0
   13b3c:	b	13b4c <flatcc_builder_start_buffer@@Base+0xac>
   13b40:	ldr	r3, [r4, #32]
   13b44:	add	r3, r3, #36	; 0x24
   13b48:	str	r3, [r4, #32]
   13b4c:	ldr	r0, [r4, #20]
   13b50:	ldr	r1, [r4, #28]
   13b54:	ldrh	lr, [r4, #130]	; 0x82
   13b58:	ldrh	ip, [r4, #132]	; 0x84
   13b5c:	add	r2, r0, r1
   13b60:	add	r2, r2, #7
   13b64:	str	r0, [r3, #8]
   13b68:	strh	lr, [r3, #12]
   13b6c:	bic	r2, r2, #7
   13b70:	strh	r8, [r4, #130]	; 0x82
   13b74:	mvn	lr, #3
   13b78:	str	r1, [r3]
   13b7c:	mov	r0, #0
   13b80:	mov	r1, #1
   13b84:	str	lr, [r3, #4]
   13b88:	str	r2, [r4, #28]
   13b8c:	str	r0, [r4, #20]
   13b90:	strh	r1, [r4, #128]	; 0x80
   13b94:	strh	ip, [r3, #34]	; 0x22
   13b98:	ldrh	r2, [r4, #164]	; 0xa4
   13b9c:	strh	r7, [r4, #132]	; 0x84
   13ba0:	ldr	ip, [pc, #128]	; 13c28 <flatcc_builder_start_buffer@@Base+0x188>
   13ba4:	strh	r2, [r3, #32]
   13ba8:	ldr	r2, [r4, #144]	; 0x90
   13bac:	strh	r6, [r4, #164]	; 0xa4
   13bb0:	str	r2, [r3, #20]
   13bb4:	ldr	r2, [r4, #152]	; 0x98
   13bb8:	cmp	r5, r0
   13bbc:	str	r2, [r3, #28]
   13bc0:	ldr	r2, [r4, #148]	; 0x94
   13bc4:	ldr	lr, [r4, #136]	; 0x88
   13bc8:	moveq	r5, ip
   13bcc:	ldr	ip, [r4, #168]	; 0xa8
   13bd0:	add	r6, r2, r1
   13bd4:	str	r2, [r4, #152]	; 0x98
   13bd8:	str	r6, [r4, #148]	; 0x94
   13bdc:	str	lr, [r4, #144]	; 0x90
   13be0:	str	ip, [r3, #16]
   13be4:	ldr	r2, [r5]
   13be8:	str	r2, [r4, #168]	; 0xa8
   13bec:	strh	r1, [r3, #14]
   13bf0:	add	sp, sp, #8
   13bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bf8:	mov	r1, #4
   13bfc:	ldr	r0, [r4, #40]	; 0x28
   13c00:	str	r1, [sp]
   13c04:	add	r1, r4, #84	; 0x54
   13c08:	ldr	sl, [r4, #48]	; 0x30
   13c0c:	blx	sl
   13c10:	cmp	r0, #0
   13c14:	beq	13b04 <flatcc_builder_start_buffer@@Base+0x64>
   13c18:	bl	120c4 <__assert_fail@plt+0x58>
   13c1c:	mvn	r0, #0
   13c20:	b	13bf0 <flatcc_builder_start_buffer@@Base+0x150>
   13c24:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   13c28:	andeq	r8, r1, ip, lsl #29

00013c2c <flatcc_builder_end_buffer@@Base>:
   13c2c:	ldr	r3, [r0, #32]
   13c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c34:	sub	sp, sp, #100	; 0x64
   13c38:	ldrh	r5, [r0, #164]	; 0xa4
   13c3c:	ldrh	r3, [r3, #14]
   13c40:	ldr	r2, [r0, #152]	; 0x98
   13c44:	and	r5, r5, #2
   13c48:	cmp	r2, #0
   13c4c:	orrne	r5, r5, #1
   13c50:	cmp	r3, #1
   13c54:	bne	13f40 <flatcc_builder_end_buffer@@Base+0x314>
   13c58:	ldrh	r3, [r0, #132]	; 0x84
   13c5c:	ldrh	r2, [r0, #128]	; 0x80
   13c60:	mov	r9, r1
   13c64:	mov	r1, #0
   13c68:	cmp	r3, r2
   13c6c:	movhi	r2, r3
   13c70:	strhhi	r3, [r0, #128]	; 0x80
   13c74:	cmp	r3, #0
   13c78:	mov	r4, r0
   13c7c:	str	r1, [sp, #20]
   13c80:	and	r7, r5, #1
   13c84:	beq	13eec <flatcc_builder_end_buffer@@Base+0x2c0>
   13c88:	cmp	r3, #4
   13c8c:	movcc	r6, #4
   13c90:	movcs	r6, r3
   13c94:	cmp	r6, r2
   13c98:	movcc	r6, r2
   13c9c:	cmp	r7, r1
   13ca0:	bne	13d08 <flatcc_builder_end_buffer@@Base+0xdc>
   13ca4:	ldr	r8, [r0, #140]	; 0x8c
   13ca8:	sub	r3, r3, #1
   13cac:	ands	r3, r3, r8
   13cb0:	beq	13d08 <flatcc_builder_end_buffer@@Base+0xdc>
   13cb4:	add	r1, r8, r3
   13cb8:	ldr	sl, [pc, #748]	; 13fac <flatcc_builder_end_buffer@@Base+0x380>
   13cbc:	mov	r2, #1
   13cc0:	cmp	r8, r1
   13cc4:	str	r3, [sp, #24]
   13cc8:	str	r3, [sp, #36]	; 0x24
   13ccc:	str	sl, [sp, #32]
   13cd0:	str	r1, [r0, #140]	; 0x8c
   13cd4:	str	r2, [sp, #28]
   13cd8:	bgt	13f94 <flatcc_builder_end_buffer@@Base+0x368>
   13cdc:	ldr	r0, [r0, #36]	; 0x24
   13ce0:	add	r1, sp, #32
   13ce4:	str	r3, [sp]
   13ce8:	mov	r3, r8
   13cec:	ldr	fp, [r4, #44]	; 0x2c
   13cf0:	blx	fp
   13cf4:	cmp	r0, #0
   13cf8:	bne	13f98 <flatcc_builder_end_buffer@@Base+0x36c>
   13cfc:	cmn	r8, #1
   13d00:	beq	13f80 <flatcc_builder_end_buffer@@Base+0x354>
   13d04:	ldrh	r2, [r4, #128]	; 0x80
   13d08:	ldr	r3, [r4, #168]	; 0xa8
   13d0c:	cmp	r2, r6
   13d10:	strhcc	r6, [r4, #128]	; 0x80
   13d14:	cmp	r3, #0
   13d18:	movne	r1, #4
   13d1c:	moveq	r1, #0
   13d20:	ands	r5, r5, #2
   13d24:	uxtb	ip, r7
   13d28:	str	r3, [sp, #20]
   13d2c:	ldr	r0, [r4, #136]	; 0x88
   13d30:	bne	13efc <flatcc_builder_end_buffer@@Base+0x2d0>
   13d34:	sub	r3, r6, #1
   13d38:	sub	r6, r0, #4
   13d3c:	cmp	ip, #0
   13d40:	sub	r6, r6, r1
   13d44:	and	r6, r6, r3
   13d48:	moveq	r8, #3
   13d4c:	moveq	lr, #2
   13d50:	moveq	r2, #1
   13d54:	moveq	r3, #4
   13d58:	bne	13f0c <flatcc_builder_end_buffer@@Base+0x2e0>
   13d5c:	add	r5, r5, #1
   13d60:	add	sl, sp, #96	; 0x60
   13d64:	add	r5, sl, r5, lsl #3
   13d68:	add	fp, sp, #12
   13d6c:	mov	sl, #4
   13d70:	cmp	r1, #0
   13d74:	str	r3, [sp, #24]
   13d78:	str	fp, [r5, #-72]	; 0xffffffb8
   13d7c:	str	sl, [r5, #-68]	; 0xffffffbc
   13d80:	str	r2, [sp, #28]
   13d84:	beq	13db4 <flatcc_builder_end_buffer@@Base+0x188>
   13d88:	add	r2, r2, #1
   13d8c:	add	r5, sp, #96	; 0x60
   13d90:	add	r2, r5, r2, lsl #3
   13d94:	add	r3, r3, r1
   13d98:	add	r5, sp, #20
   13d9c:	str	r3, [sp, #24]
   13da0:	str	r1, [r2, #-68]	; 0xffffffbc
   13da4:	str	r5, [r2, #-72]	; 0xffffffb8
   13da8:	mov	r2, lr
   13dac:	str	lr, [sp, #28]
   13db0:	mov	lr, r8
   13db4:	cmp	r6, #0
   13db8:	beq	13de4 <flatcc_builder_end_buffer@@Base+0x1b8>
   13dbc:	add	r2, r2, #1
   13dc0:	add	r1, sp, #96	; 0x60
   13dc4:	add	r1, r1, r2, lsl #3
   13dc8:	ldr	r5, [pc, #476]	; 13fac <flatcc_builder_end_buffer@@Base+0x380>
   13dcc:	mov	r2, lr
   13dd0:	add	r3, r3, r6
   13dd4:	str	r3, [sp, #24]
   13dd8:	str	r6, [r1, #-68]	; 0xffffffbc
   13ddc:	str	r5, [r1, #-72]	; 0xffffffb8
   13de0:	str	lr, [sp, #28]
   13de4:	sub	r5, r0, r3
   13de8:	cmp	ip, #0
   13dec:	mov	r1, r5
   13df0:	beq	13f34 <flatcc_builder_end_buffer@@Base+0x308>
   13df4:	cmp	r7, #0
   13df8:	add	r1, r5, #4
   13dfc:	beq	13f34 <flatcc_builder_end_buffer@@Base+0x308>
   13e00:	ldr	ip, [r4, #144]	; 0x90
   13e04:	sub	ip, ip, r1
   13e08:	sub	r9, r9, r1
   13e0c:	cmp	r5, r0
   13e10:	str	r9, [sp, #12]
   13e14:	str	ip, [sp, #16]
   13e18:	bge	13f54 <flatcc_builder_end_buffer@@Base+0x328>
   13e1c:	ldr	r0, [r4, #36]	; 0x24
   13e20:	add	r1, sp, #32
   13e24:	str	r3, [sp]
   13e28:	mov	r3, r5
   13e2c:	ldr	r6, [r4, #44]	; 0x2c
   13e30:	blx	r6
   13e34:	subs	r1, r0, #0
   13e38:	bne	13f58 <flatcc_builder_end_buffer@@Base+0x32c>
   13e3c:	cmp	r5, #0
   13e40:	str	r5, [r4, #136]	; 0x88
   13e44:	beq	13f6c <flatcc_builder_end_buffer@@Base+0x340>
   13e48:	ldr	r3, [r4, #32]
   13e4c:	ldr	r2, [r4, #20]
   13e50:	ldr	r0, [r4, #16]
   13e54:	ldr	ip, [r3, #20]
   13e58:	str	ip, [r4, #144]	; 0x90
   13e5c:	ldr	ip, [r3, #28]
   13e60:	str	ip, [r4, #152]	; 0x98
   13e64:	ldr	ip, [r3, #16]
   13e68:	str	ip, [r4, #168]	; 0xa8
   13e6c:	ldrh	r3, [r3, #32]
   13e70:	strh	r3, [r4, #164]	; 0xa4
   13e74:	bl	1203c <memset@plt>
   13e78:	ldr	r3, [r4, #32]
   13e7c:	ldr	r2, [r4, #64]	; 0x40
   13e80:	ldrh	lr, [r4, #130]	; 0x82
   13e84:	ldr	ip, [r3]
   13e88:	ldr	r1, [r3, #4]
   13e8c:	ldrh	r0, [r4, #128]	; 0x80
   13e90:	sub	r2, r2, ip
   13e94:	cmp	r2, r1
   13e98:	movcs	r2, r1
   13e9c:	cmp	r0, lr
   13ea0:	ldr	r0, [r4, #60]	; 0x3c
   13ea4:	ldr	r6, [r3, #8]
   13ea8:	str	r2, [r4, #24]
   13eac:	add	r2, r0, ip
   13eb0:	str	r2, [r4, #16]
   13eb4:	str	r6, [r4, #20]
   13eb8:	ldr	r2, [r4, #156]	; 0x9c
   13ebc:	str	ip, [r4, #28]
   13ec0:	str	r1, [r3, #4]
   13ec4:	strhcc	lr, [r4, #128]	; 0x80
   13ec8:	ldrh	r1, [r3, #12]
   13ecc:	sub	r2, r2, #1
   13ed0:	sub	r3, r3, #36	; 0x24
   13ed4:	mov	r0, r5
   13ed8:	str	r2, [r4, #156]	; 0x9c
   13edc:	strh	r1, [r4, #130]	; 0x82
   13ee0:	str	r3, [r4, #32]
   13ee4:	add	sp, sp, #100	; 0x64
   13ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eec:	cmp	r2, #4
   13ef0:	movcs	r6, r2
   13ef4:	movcc	r6, #4
   13ef8:	b	13d08 <flatcc_builder_end_buffer@@Base+0xdc>
   13efc:	sub	r3, r0, #8
   13f00:	sub	r6, r6, #1
   13f04:	sub	r3, r3, r1
   13f08:	and	r6, r6, r3
   13f0c:	add	r3, sp, #16
   13f10:	mov	r8, #4
   13f14:	mov	r5, #1
   13f18:	str	r3, [sp, #32]
   13f1c:	str	r8, [sp, #36]	; 0x24
   13f20:	mov	ip, r5
   13f24:	mov	lr, #3
   13f28:	mov	r2, #2
   13f2c:	mov	r3, #8
   13f30:	b	13d5c <flatcc_builder_end_buffer@@Base+0x130>
   13f34:	ldr	ip, [r4, #140]	; 0x8c
   13f38:	sub	ip, ip, r1
   13f3c:	b	13e08 <flatcc_builder_end_buffer@@Base+0x1dc>
   13f40:	ldr	r3, [pc, #104]	; 13fb0 <flatcc_builder_end_buffer@@Base+0x384>
   13f44:	ldr	r2, [pc, #104]	; 13fb4 <flatcc_builder_end_buffer@@Base+0x388>
   13f48:	ldr	r1, [pc, #104]	; 13fb8 <flatcc_builder_end_buffer@@Base+0x38c>
   13f4c:	ldr	r0, [pc, #104]	; 13fbc <flatcc_builder_end_buffer@@Base+0x390>
   13f50:	bl	1206c <__assert_fail@plt>
   13f54:	bl	12110 <__assert_fail@plt+0xa4>
   13f58:	ldr	r3, [pc, #96]	; 13fc0 <flatcc_builder_end_buffer@@Base+0x394>
   13f5c:	ldr	r2, [pc, #96]	; 13fc4 <flatcc_builder_end_buffer@@Base+0x398>
   13f60:	ldr	r1, [pc, #80]	; 13fb8 <flatcc_builder_end_buffer@@Base+0x38c>
   13f64:	ldr	r0, [pc, #92]	; 13fc8 <flatcc_builder_end_buffer@@Base+0x39c>
   13f68:	bl	1206c <__assert_fail@plt>
   13f6c:	ldr	r3, [pc, #88]	; 13fcc <flatcc_builder_end_buffer@@Base+0x3a0>
   13f70:	mov	r2, #772	; 0x304
   13f74:	ldr	r1, [pc, #60]	; 13fb8 <flatcc_builder_end_buffer@@Base+0x38c>
   13f78:	ldr	r0, [pc, #72]	; 13fc8 <flatcc_builder_end_buffer@@Base+0x39c>
   13f7c:	bl	1206c <__assert_fail@plt>
   13f80:	add	r3, sl, #608	; 0x260
   13f84:	ldr	r2, [pc, #68]	; 13fd0 <flatcc_builder_end_buffer@@Base+0x3a4>
   13f88:	ldr	r1, [pc, #40]	; 13fb8 <flatcc_builder_end_buffer@@Base+0x38c>
   13f8c:	ldr	r0, [pc, #52]	; 13fc8 <flatcc_builder_end_buffer@@Base+0x39c>
   13f90:	bl	1206c <__assert_fail@plt>
   13f94:	bl	120e8 <__assert_fail@plt+0x7c>
   13f98:	ldr	r3, [pc, #52]	; 13fd4 <flatcc_builder_end_buffer@@Base+0x3a8>
   13f9c:	ldr	r2, [pc, #52]	; 13fd8 <flatcc_builder_end_buffer@@Base+0x3ac>
   13fa0:	ldr	r1, [pc, #16]	; 13fb8 <flatcc_builder_end_buffer@@Base+0x38c>
   13fa4:	ldr	r0, [pc, #28]	; 13fc8 <flatcc_builder_end_buffer@@Base+0x39c>
   13fa8:	bl	1206c <__assert_fail@plt>
   13fac:	andeq	r8, r1, ip, lsl #29
   13fb0:	andeq	r9, r1, ip, lsr r1
   13fb4:	andeq	r0, r0, r6, asr #6
   13fb8:	andeq	r9, r1, r4, asr #10
   13fbc:	andeq	r9, r1, r8, asr r6
   13fc0:	andeq	r8, r1, r0, lsl lr
   13fc4:	andeq	r0, r0, fp, lsl #5
   13fc8:	andeq	r9, r1, r4, lsl #12
   13fcc:	strdeq	r9, [r1], -ip
   13fd0:			; <UNDEFINED> instruction: 0x000002be
   13fd4:	andeq	r8, r1, r4, lsl #28
   13fd8:	andeq	r0, r0, r5, lsr #5

00013fdc <flatcc_builder_start_struct@@Base>:
   13fdc:	push	{r4, r5, r6, r7, r8, lr}
   13fe0:	mov	r4, r0
   13fe4:	ldr	r0, [r0, #156]	; 0x9c
   13fe8:	ldr	r3, [r4, #160]	; 0xa0
   13fec:	mov	r6, r1
   13ff0:	add	r1, r0, #1
   13ff4:	cmp	r1, r3
   13ff8:	sub	sp, sp, #8
   13ffc:	mov	r5, r2
   14000:	str	r1, [r4, #156]	; 0x9c
   14004:	ble	14074 <flatcc_builder_start_struct@@Base+0x98>
   14008:	ldr	r3, [r4, #176]	; 0xb0
   1400c:	cmp	r3, #0
   14010:	cmpgt	r1, r3
   14014:	movgt	r3, #1
   14018:	movle	r3, #0
   1401c:	bgt	14184 <flatcc_builder_start_struct@@Base+0x1a8>
   14020:	add	r0, r0, r0, lsl #3
   14024:	ldr	r1, [r4, #88]	; 0x58
   14028:	lsl	r7, r0, #2
   1402c:	add	r2, r7, #36	; 0x24
   14030:	cmp	r2, r1
   14034:	bhi	14160 <flatcc_builder_start_struct@@Base+0x184>
   14038:	ldr	r3, [r4, #84]	; 0x54
   1403c:	add	r3, r3, r7
   14040:	cmp	r3, #0
   14044:	str	r3, [r4, #32]
   14048:	beq	14184 <flatcc_builder_start_struct@@Base+0x1a8>
   1404c:	ldr	r2, [r4, #88]	; 0x58
   14050:	ldr	r0, [pc, #308]	; 1418c <flatcc_builder_start_struct@@Base+0x1b0>
   14054:	ldr	r1, [r4, #176]	; 0xb0
   14058:	umull	r0, r2, r0, r2
   1405c:	lsr	r2, r2, #3
   14060:	cmp	r1, #0
   14064:	cmpgt	r2, r1
   14068:	str	r2, [r4, #160]	; 0xa0
   1406c:	strgt	r1, [r4, #160]	; 0xa0
   14070:	b	14080 <flatcc_builder_start_struct@@Base+0xa4>
   14074:	ldr	r3, [r4, #32]
   14078:	add	r3, r3, #36	; 0x24
   1407c:	str	r3, [r4, #32]
   14080:	ldr	lr, [r4, #20]
   14084:	ldr	ip, [r4, #28]
   14088:	ldr	r1, [r4, #64]	; 0x40
   1408c:	add	r2, lr, ip
   14090:	add	r2, r2, #7
   14094:	ldrh	r7, [r4, #130]	; 0x82
   14098:	bic	r2, r2, #7
   1409c:	sub	r1, r1, r2
   140a0:	ldr	r0, [r4, #60]	; 0x3c
   140a4:	cmn	r1, #4
   140a8:	str	lr, [r3, #8]
   140ac:	mvn	lr, #3
   140b0:	strh	r7, [r3, #12]
   140b4:	movhi	r1, lr
   140b8:	strh	r5, [r4, #130]	; 0x82
   140bc:	str	ip, [r3]
   140c0:	mov	r5, #0
   140c4:	mov	ip, #2
   140c8:	str	lr, [r3, #4]
   140cc:	add	r0, r0, r2
   140d0:	str	r5, [r4, #20]
   140d4:	str	r2, [r4, #28]
   140d8:	mvn	r5, #3
   140dc:	strh	ip, [r3, #14]
   140e0:	strls	r1, [r4, #24]
   140e4:	strhi	lr, [r4, #24]
   140e8:	cmp	r6, r1
   140ec:	str	r0, [r4, #16]
   140f0:	str	r5, [r3, #4]
   140f4:	str	r6, [r4, #20]
   140f8:	bcs	14104 <flatcc_builder_start_struct@@Base+0x128>
   140fc:	add	sp, sp, #8
   14100:	pop	{r4, r5, r6, r7, r8, pc}
   14104:	add	r6, r6, #1
   14108:	mov	r3, #1
   1410c:	ldr	r0, [r4, #40]	; 0x28
   14110:	add	r2, r6, r2
   14114:	str	r3, [sp]
   14118:	add	r1, r4, #60	; 0x3c
   1411c:	ldr	r6, [r4, #48]	; 0x30
   14120:	blx	r6
   14124:	cmp	r0, #0
   14128:	bne	14184 <flatcc_builder_start_struct@@Base+0x1a8>
   1412c:	ldr	r2, [r4, #28]
   14130:	ldr	r3, [r4, #64]	; 0x40
   14134:	ldr	r0, [r4, #60]	; 0x3c
   14138:	sub	r3, r3, r2
   1413c:	ldr	r1, [r4, #32]
   14140:	cmp	r3, r5
   14144:	add	r0, r0, r2
   14148:	movhi	r3, r5
   1414c:	str	r3, [r4, #24]
   14150:	str	r0, [r4, #16]
   14154:	str	r5, [r1, #4]
   14158:	add	sp, sp, #8
   1415c:	pop	{r4, r5, r6, r7, r8, pc}
   14160:	mov	r1, #4
   14164:	ldr	r0, [r4, #40]	; 0x28
   14168:	str	r1, [sp]
   1416c:	add	r1, r4, #84	; 0x54
   14170:	ldr	r8, [r4, #48]	; 0x30
   14174:	blx	r8
   14178:	cmp	r0, #0
   1417c:	beq	14038 <flatcc_builder_start_struct@@Base+0x5c>
   14180:	bl	120c4 <__assert_fail@plt+0x58>
   14184:	mov	r0, #0
   14188:	b	140fc <flatcc_builder_start_struct@@Base+0x120>
   1418c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00014190 <flatcc_builder_struct_edit@@Base>:
   14190:	ldr	r0, [r0, #16]
   14194:	bx	lr

00014198 <flatcc_builder_end_struct@@Base>:
   14198:	ldr	r3, [r0, #32]
   1419c:	push	{r4, r5, r6, lr}
   141a0:	sub	sp, sp, #80	; 0x50
   141a4:	ldrh	r3, [r3, #14]
   141a8:	cmp	r3, #2
   141ac:	bne	14338 <flatcc_builder_end_struct@@Base+0x1a0>
   141b0:	ldrh	r3, [r0, #130]	; 0x82
   141b4:	mov	r4, r0
   141b8:	ldr	r0, [r0, #16]
   141bc:	cmp	r3, #0
   141c0:	ldr	r1, [r4, #20]
   141c4:	beq	14324 <flatcc_builder_end_struct@@Base+0x18c>
   141c8:	ldrh	r2, [r4, #128]	; 0x80
   141cc:	ldr	ip, [r4, #136]	; 0x88
   141d0:	cmp	r2, r3
   141d4:	strhcc	r3, [r4, #128]	; 0x80
   141d8:	mov	r2, #0
   141dc:	sub	r3, r3, #1
   141e0:	sub	r5, ip, r1
   141e4:	cmp	r1, #0
   141e8:	and	r3, r3, r5
   141ec:	str	r2, [sp, #8]
   141f0:	str	r2, [sp, #12]
   141f4:	bne	142e4 <flatcc_builder_end_struct@@Base+0x14c>
   141f8:	cmp	r3, #0
   141fc:	movne	r2, #1
   14200:	movne	r0, r1
   14204:	beq	1430c <flatcc_builder_end_struct@@Base+0x174>
   14208:	add	r0, r0, #1
   1420c:	add	r5, sp, #80	; 0x50
   14210:	add	r1, r1, r3
   14214:	add	r0, r5, r0, lsl #3
   14218:	ldr	lr, [pc, #300]	; 1434c <flatcc_builder_end_struct@@Base+0x1b4>
   1421c:	sub	r5, ip, r1
   14220:	str	r3, [r0, #-68]	; 0xffffffbc
   14224:	str	r1, [sp, #8]
   14228:	str	r2, [sp, #12]
   1422c:	str	lr, [r0, #-72]	; 0xffffffb8
   14230:	cmp	ip, r5
   14234:	ble	1430c <flatcc_builder_end_struct@@Base+0x174>
   14238:	ldr	r0, [r4, #36]	; 0x24
   1423c:	mov	r3, r5
   14240:	str	r1, [sp]
   14244:	add	r1, sp, #16
   14248:	ldr	r6, [r4, #44]	; 0x2c
   1424c:	blx	r6
   14250:	subs	r1, r0, #0
   14254:	bne	14310 <flatcc_builder_end_struct@@Base+0x178>
   14258:	cmp	r5, #0
   1425c:	str	r5, [r4, #136]	; 0x88
   14260:	beq	142d8 <flatcc_builder_end_struct@@Base+0x140>
   14264:	ldr	r2, [r4, #20]
   14268:	ldr	r0, [r4, #16]
   1426c:	bl	1203c <memset@plt>
   14270:	ldr	r3, [r4, #32]
   14274:	ldr	r2, [r4, #64]	; 0x40
   14278:	ldrh	lr, [r4, #130]	; 0x82
   1427c:	ldr	ip, [r3]
   14280:	ldr	r1, [r3, #4]
   14284:	ldrh	r0, [r4, #128]	; 0x80
   14288:	sub	r2, r2, ip
   1428c:	cmp	r2, r1
   14290:	movcs	r2, r1
   14294:	cmp	r0, lr
   14298:	ldr	r0, [r4, #60]	; 0x3c
   1429c:	ldr	r6, [r3, #8]
   142a0:	str	r2, [r4, #24]
   142a4:	add	r2, r0, ip
   142a8:	str	r2, [r4, #16]
   142ac:	str	r6, [r4, #20]
   142b0:	ldr	r2, [r4, #156]	; 0x9c
   142b4:	str	ip, [r4, #28]
   142b8:	str	r1, [r3, #4]
   142bc:	strhcc	lr, [r4, #128]	; 0x80
   142c0:	ldrh	r1, [r3, #12]
   142c4:	sub	r2, r2, #1
   142c8:	sub	r3, r3, #36	; 0x24
   142cc:	str	r2, [r4, #156]	; 0x9c
   142d0:	strh	r1, [r4, #130]	; 0x82
   142d4:	str	r3, [r4, #32]
   142d8:	mov	r0, r5
   142dc:	add	sp, sp, #80	; 0x50
   142e0:	pop	{r4, r5, r6, pc}
   142e4:	cmp	r3, r2
   142e8:	mov	r2, #1
   142ec:	str	r0, [sp, #16]
   142f0:	str	r2, [sp, #12]
   142f4:	movne	r0, r2
   142f8:	str	r1, [sp, #8]
   142fc:	str	r1, [sp, #20]
   14300:	movne	r2, #2
   14304:	beq	14230 <flatcc_builder_end_struct@@Base+0x98>
   14308:	b	14208 <flatcc_builder_end_struct@@Base+0x70>
   1430c:	bl	12110 <__assert_fail@plt+0xa4>
   14310:	ldr	r3, [pc, #56]	; 14350 <flatcc_builder_end_struct@@Base+0x1b8>
   14314:	ldr	r2, [pc, #56]	; 14354 <flatcc_builder_end_struct@@Base+0x1bc>
   14318:	ldr	r1, [pc, #56]	; 14358 <flatcc_builder_end_struct@@Base+0x1c0>
   1431c:	ldr	r0, [pc, #56]	; 1435c <flatcc_builder_end_struct@@Base+0x1c4>
   14320:	bl	1206c <__assert_fail@plt>
   14324:	ldr	r3, [pc, #52]	; 14360 <flatcc_builder_end_struct@@Base+0x1c8>
   14328:	ldr	r2, [pc, #52]	; 14364 <flatcc_builder_end_struct@@Base+0x1cc>
   1432c:	ldr	r1, [pc, #36]	; 14358 <flatcc_builder_end_struct@@Base+0x1c0>
   14330:	ldr	r0, [pc, #48]	; 14368 <flatcc_builder_end_struct@@Base+0x1d0>
   14334:	bl	1206c <__assert_fail@plt>
   14338:	ldr	r3, [pc, #44]	; 1436c <flatcc_builder_end_struct@@Base+0x1d4>
   1433c:	mov	r2, #872	; 0x368
   14340:	ldr	r1, [pc, #16]	; 14358 <flatcc_builder_end_struct@@Base+0x1c0>
   14344:	ldr	r0, [pc, #36]	; 14370 <flatcc_builder_end_struct@@Base+0x1d8>
   14348:	bl	1206c <__assert_fail@plt>
   1434c:	andeq	r8, r1, ip, lsl #29
   14350:	andeq	r8, r1, r0, lsl lr
   14354:	andeq	r0, r0, fp, lsl #5
   14358:	andeq	r9, r1, r4, asr #10
   1435c:	andeq	r9, r1, r4, lsl #12
   14360:	andeq	r9, r1, ip, lsl r1
   14364:	andeq	r0, r0, pc, lsl #6
   14368:	andeq	r9, r1, ip, asr #12
   1436c:	andeq	r9, r1, r8, asr r1
   14370:	andeq	r9, r1, r4, lsl #13

00014374 <flatcc_builder_extend_vector@@Base>:
   14374:	ldr	r3, [r0, #32]
   14378:	push	{r4, r5, r6, r7, lr}
   1437c:	mov	r5, r0
   14380:	ldr	r0, [r3, #20]
   14384:	ldr	r4, [r3, #24]
   14388:	add	ip, r1, r0
   1438c:	cmp	r0, ip
   14390:	movls	r0, #0
   14394:	movhi	r0, #1
   14398:	cmp	r4, ip
   1439c:	movcs	r4, r0
   143a0:	orrcc	r4, r0, #1
   143a4:	cmp	r4, #0
   143a8:	sub	sp, sp, #12
   143ac:	bne	14448 <flatcc_builder_extend_vector@@Base+0xd4>
   143b0:	ldr	r2, [r3, #16]
   143b4:	str	ip, [r3, #20]
   143b8:	ldr	r6, [r5, #20]
   143bc:	ldr	r3, [r5, #24]
   143c0:	mla	r1, r2, r1, r6
   143c4:	cmp	r1, r3
   143c8:	str	r1, [r5, #20]
   143cc:	bcs	143e0 <flatcc_builder_extend_vector@@Base+0x6c>
   143d0:	ldr	r0, [r5, #16]
   143d4:	add	r0, r0, r6
   143d8:	add	sp, sp, #12
   143dc:	pop	{r4, r5, r6, r7, pc}
   143e0:	ldr	r2, [r5, #28]
   143e4:	mov	r3, #1
   143e8:	add	r2, r2, #1
   143ec:	ldr	r0, [r5, #40]	; 0x28
   143f0:	add	r2, r2, r1
   143f4:	str	r3, [sp]
   143f8:	add	r1, r5, #60	; 0x3c
   143fc:	ldr	r7, [r5, #48]	; 0x30
   14400:	blx	r7
   14404:	cmp	r0, #0
   14408:	bne	14440 <flatcc_builder_extend_vector@@Base+0xcc>
   1440c:	ldr	r2, [r5, #28]
   14410:	ldr	r3, [r5, #64]	; 0x40
   14414:	ldr	r0, [r5, #60]	; 0x3c
   14418:	sub	r3, r3, r2
   1441c:	cmn	r3, #4
   14420:	mvnhi	r3, #3
   14424:	str	r3, [r5, #24]
   14428:	ldr	r3, [r5, #32]
   1442c:	add	r0, r0, r2
   14430:	mvn	r2, #3
   14434:	str	r0, [r5, #16]
   14438:	str	r2, [r3, #4]
   1443c:	b	143d4 <flatcc_builder_extend_vector@@Base+0x60>
   14440:	mov	r0, r4
   14444:	b	143d8 <flatcc_builder_extend_vector@@Base+0x64>
   14448:	bl	12138 <__assert_fail@plt+0xcc>

0001444c <flatcc_builder_vector_push@@Base>:
   1444c:	ldr	r3, [r0, #32]
   14450:	push	{r4, r5, r6, r7, r8, lr}
   14454:	sub	sp, sp, #8
   14458:	ldrh	r2, [r3, #14]
   1445c:	cmp	r2, #4
   14460:	bne	14548 <flatcc_builder_vector_push@@Base+0xfc>
   14464:	mov	r5, r1
   14468:	ldr	r2, [r3, #20]
   1446c:	ldr	r1, [r3, #24]
   14470:	cmp	r2, r1
   14474:	bhi	14534 <flatcc_builder_vector_push@@Base+0xe8>
   14478:	add	r2, r2, #1
   1447c:	str	r2, [r3, #20]
   14480:	ldr	r7, [r3, #16]
   14484:	ldr	r6, [r0, #20]
   14488:	ldr	r3, [r0, #24]
   1448c:	add	r1, r7, r6
   14490:	cmp	r1, r3
   14494:	mov	r4, r0
   14498:	str	r1, [r0, #20]
   1449c:	bcs	144cc <flatcc_builder_vector_push@@Base+0x80>
   144a0:	ldr	r3, [r0, #16]
   144a4:	adds	r3, r3, r6
   144a8:	beq	144c0 <flatcc_builder_vector_push@@Base+0x74>
   144ac:	mov	r0, r3
   144b0:	mov	r2, r7
   144b4:	mov	r1, r5
   144b8:	bl	11fb8 <memcpy@plt>
   144bc:	mov	r3, r0
   144c0:	mov	r0, r3
   144c4:	add	sp, sp, #8
   144c8:	pop	{r4, r5, r6, r7, r8, pc}
   144cc:	ldr	r2, [r0, #28]
   144d0:	mov	r3, #1
   144d4:	add	r2, r2, #1
   144d8:	ldr	r0, [r0, #40]	; 0x28
   144dc:	add	r2, r2, r1
   144e0:	str	r3, [sp]
   144e4:	add	r1, r4, #60	; 0x3c
   144e8:	ldr	r8, [r4, #48]	; 0x30
   144ec:	blx	r8
   144f0:	cmp	r0, #0
   144f4:	bne	1452c <flatcc_builder_vector_push@@Base+0xe0>
   144f8:	ldr	r1, [r4, #28]
   144fc:	ldr	r2, [r4, #64]	; 0x40
   14500:	ldr	r3, [r4, #60]	; 0x3c
   14504:	sub	r2, r2, r1
   14508:	cmn	r2, #4
   1450c:	mvnhi	r2, #3
   14510:	str	r2, [r4, #24]
   14514:	ldr	r2, [r4, #32]
   14518:	add	r3, r3, r1
   1451c:	mvn	r1, #3
   14520:	str	r3, [r4, #16]
   14524:	str	r1, [r2, #4]
   14528:	b	144a4 <flatcc_builder_vector_push@@Base+0x58>
   1452c:	mov	r3, #0
   14530:	b	144c0 <flatcc_builder_vector_push@@Base+0x74>
   14534:	ldr	r3, [pc, #32]	; 1455c <flatcc_builder_vector_push@@Base+0x110>
   14538:	mov	r2, #908	; 0x38c
   1453c:	ldr	r1, [pc, #28]	; 14560 <flatcc_builder_vector_push@@Base+0x114>
   14540:	ldr	r0, [pc, #28]	; 14564 <flatcc_builder_vector_push@@Base+0x118>
   14544:	bl	1206c <__assert_fail@plt>
   14548:	ldr	r3, [pc, #12]	; 1455c <flatcc_builder_vector_push@@Base+0x110>
   1454c:	ldr	r2, [pc, #20]	; 14568 <flatcc_builder_vector_push@@Base+0x11c>
   14550:	ldr	r1, [pc, #8]	; 14560 <flatcc_builder_vector_push@@Base+0x114>
   14554:	ldr	r0, [pc, #16]	; 1456c <flatcc_builder_vector_push@@Base+0x120>
   14558:	bl	1206c <__assert_fail@plt>
   1455c:	andeq	r9, r1, r4, ror r1
   14560:	andeq	r9, r1, r4, asr #10
   14564:	ldrdeq	r9, [r1], -ip
   14568:	andeq	r0, r0, fp, lsl #7
   1456c:			; <UNDEFINED> instruction: 0x000196b0

00014570 <flatcc_builder_append_vector@@Base>:
   14570:	push	{r4, r5, r6, r7, r8, r9, lr}
   14574:	mov	r5, r1
   14578:	ldr	r1, [r0, #32]
   1457c:	sub	sp, sp, #12
   14580:	ldrh	r3, [r1, #14]
   14584:	cmp	r3, #4
   14588:	bne	14678 <flatcc_builder_append_vector@@Base+0x108>
   1458c:	ldr	r3, [r1, #20]
   14590:	mov	r6, r0
   14594:	add	r0, r2, r3
   14598:	cmp	r3, r0
   1459c:	ldr	r4, [r1, #24]
   145a0:	movls	r3, #0
   145a4:	movhi	r3, #1
   145a8:	cmp	r4, r0
   145ac:	movcs	r4, r3
   145b0:	orrcc	r4, r3, #1
   145b4:	cmp	r4, #0
   145b8:	bne	14674 <flatcc_builder_append_vector@@Base+0x104>
   145bc:	ldr	r7, [r1, #16]
   145c0:	str	r0, [r1, #20]
   145c4:	ldr	r8, [r6, #20]
   145c8:	mul	r7, r7, r2
   145cc:	ldr	r3, [r6, #24]
   145d0:	add	r1, r7, r8
   145d4:	cmp	r1, r3
   145d8:	str	r1, [r6, #20]
   145dc:	bcs	1460c <flatcc_builder_append_vector@@Base+0x9c>
   145e0:	ldr	r3, [r6, #16]
   145e4:	adds	r3, r3, r8
   145e8:	beq	14600 <flatcc_builder_append_vector@@Base+0x90>
   145ec:	mov	r0, r3
   145f0:	mov	r2, r7
   145f4:	mov	r1, r5
   145f8:	bl	11fb8 <memcpy@plt>
   145fc:	mov	r3, r0
   14600:	mov	r0, r3
   14604:	add	sp, sp, #12
   14608:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1460c:	ldr	r2, [r6, #28]
   14610:	mov	r3, #1
   14614:	add	r2, r2, #1
   14618:	ldr	r0, [r6, #40]	; 0x28
   1461c:	add	r2, r2, r1
   14620:	str	r3, [sp]
   14624:	add	r1, r6, #60	; 0x3c
   14628:	ldr	r9, [r6, #48]	; 0x30
   1462c:	blx	r9
   14630:	cmp	r0, #0
   14634:	bne	1466c <flatcc_builder_append_vector@@Base+0xfc>
   14638:	ldr	r1, [r6, #28]
   1463c:	ldr	r2, [r6, #64]	; 0x40
   14640:	ldr	r3, [r6, #60]	; 0x3c
   14644:	sub	r2, r2, r1
   14648:	cmn	r2, #4
   1464c:	mvnhi	r2, #3
   14650:	str	r2, [r6, #24]
   14654:	ldr	r2, [r6, #32]
   14658:	add	r3, r3, r1
   1465c:	mvn	r1, #3
   14660:	str	r3, [r6, #16]
   14664:	str	r1, [r2, #4]
   14668:	b	145e4 <flatcc_builder_append_vector@@Base+0x74>
   1466c:	mov	r3, r4
   14670:	b	14600 <flatcc_builder_append_vector@@Base+0x90>
   14674:	bl	12138 <__assert_fail@plt+0xcc>
   14678:	ldr	r3, [pc, #12]	; 1468c <flatcc_builder_append_vector@@Base+0x11c>
   1467c:	ldr	r2, [pc, #12]	; 14690 <flatcc_builder_append_vector@@Base+0x120>
   14680:	ldr	r1, [pc, #12]	; 14694 <flatcc_builder_append_vector@@Base+0x124>
   14684:	ldr	r0, [pc, #12]	; 14698 <flatcc_builder_append_vector@@Base+0x128>
   14688:	bl	1206c <__assert_fail@plt>
   1468c:	muleq	r1, r0, r1
   14690:	muleq	r0, r3, r3
   14694:	andeq	r9, r1, r4, asr #10
   14698:			; <UNDEFINED> instruction: 0x000196b0

0001469c <flatcc_builder_extend_offset_vector@@Base>:
   1469c:	ldr	ip, [r0, #32]
   146a0:	push	{r4, r5, r6, r7, lr}
   146a4:	mov	r4, r0
   146a8:	ldr	r3, [ip, #20]
   146ac:	sub	sp, sp, #12
   146b0:	adds	r3, r1, r3
   146b4:	movcs	r2, #1
   146b8:	movcc	r2, #0
   146bc:	cmn	r3, #-1073741823	; 0xc0000001
   146c0:	movls	r0, #0
   146c4:	movhi	r0, #1
   146c8:	orrs	r5, r2, r0
   146cc:	bne	14764 <flatcc_builder_extend_offset_vector@@Base+0xc8>
   146d0:	str	r3, [ip, #20]
   146d4:	ldr	r6, [r4, #20]
   146d8:	ldr	r3, [r4, #24]
   146dc:	add	r1, r6, r1, lsl #2
   146e0:	cmp	r1, r3
   146e4:	str	r1, [r4, #20]
   146e8:	bcs	146fc <flatcc_builder_extend_offset_vector@@Base+0x60>
   146ec:	ldr	r0, [r4, #16]
   146f0:	add	r0, r0, r6
   146f4:	add	sp, sp, #12
   146f8:	pop	{r4, r5, r6, r7, pc}
   146fc:	ldr	r2, [r4, #28]
   14700:	mov	r3, #1
   14704:	add	r2, r2, #1
   14708:	ldr	r0, [r4, #40]	; 0x28
   1470c:	add	r2, r2, r1
   14710:	str	r3, [sp]
   14714:	add	r1, r4, #60	; 0x3c
   14718:	ldr	r7, [r4, #48]	; 0x30
   1471c:	blx	r7
   14720:	cmp	r0, #0
   14724:	bne	1475c <flatcc_builder_extend_offset_vector@@Base+0xc0>
   14728:	ldr	r2, [r4, #28]
   1472c:	ldr	r3, [r4, #64]	; 0x40
   14730:	ldr	r0, [r4, #60]	; 0x3c
   14734:	sub	r3, r3, r2
   14738:	cmn	r3, #4
   1473c:	mvnhi	r3, #3
   14740:	str	r3, [r4, #24]
   14744:	ldr	r3, [r4, #32]
   14748:	add	r0, r0, r2
   1474c:	mvn	r2, #3
   14750:	str	r0, [r4, #16]
   14754:	str	r2, [r3, #4]
   14758:	b	146f0 <flatcc_builder_extend_offset_vector@@Base+0x54>
   1475c:	mov	r0, r5
   14760:	b	146f4 <flatcc_builder_extend_offset_vector@@Base+0x58>
   14764:	bl	12138 <__assert_fail@plt+0xcc>

00014768 <flatcc_builder_offset_vector_push@@Base>:
   14768:	ldr	r2, [r0, #32]
   1476c:	push	{r4, r5, r6, r7, lr}
   14770:	sub	sp, sp, #12
   14774:	ldrh	r3, [r2, #14]
   14778:	cmp	r3, #5
   1477c:	bne	14834 <flatcc_builder_offset_vector_push@@Base+0xcc>
   14780:	ldr	r3, [r2, #20]
   14784:	cmn	r3, #-1073741823	; 0xc0000001
   14788:	beq	14828 <flatcc_builder_offset_vector_push@@Base+0xc0>
   1478c:	add	r3, r3, #1
   14790:	str	r3, [r2, #20]
   14794:	ldr	r5, [r0, #20]
   14798:	ldr	r2, [r0, #24]
   1479c:	add	r3, r5, #4
   147a0:	cmp	r3, r2
   147a4:	mov	r4, r0
   147a8:	mov	r6, r1
   147ac:	str	r3, [r0, #20]
   147b0:	bcs	147c8 <flatcc_builder_offset_vector_push@@Base+0x60>
   147b4:	ldr	r3, [r0, #16]
   147b8:	adds	r0, r3, r5
   147bc:	strne	r6, [r3, r5]
   147c0:	add	sp, sp, #12
   147c4:	pop	{r4, r5, r6, r7, pc}
   147c8:	ldr	r2, [r0, #28]
   147cc:	mov	r3, #1
   147d0:	add	r2, r5, r2
   147d4:	ldr	r0, [r0, #40]	; 0x28
   147d8:	add	r2, r2, #5
   147dc:	str	r3, [sp]
   147e0:	add	r1, r4, #60	; 0x3c
   147e4:	ldr	r7, [r4, #48]	; 0x30
   147e8:	blx	r7
   147ec:	cmp	r0, #0
   147f0:	bne	14828 <flatcc_builder_offset_vector_push@@Base+0xc0>
   147f4:	ldr	r1, [r4, #28]
   147f8:	ldr	r2, [r4, #64]	; 0x40
   147fc:	ldr	r3, [r4, #60]	; 0x3c
   14800:	sub	r2, r2, r1
   14804:	cmn	r2, #4
   14808:	mvnhi	r2, #3
   1480c:	str	r2, [r4, #24]
   14810:	ldr	r2, [r4, #32]
   14814:	add	r3, r3, r1
   14818:	mvn	r1, #3
   1481c:	str	r3, [r4, #16]
   14820:	str	r1, [r2, #4]
   14824:	b	147b8 <flatcc_builder_offset_vector_push@@Base+0x50>
   14828:	mov	r0, #0
   1482c:	add	sp, sp, #12
   14830:	pop	{r4, r5, r6, r7, pc}
   14834:	ldr	r3, [pc, #12]	; 14848 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14838:	ldr	r2, [pc, #12]	; 1484c <flatcc_builder_offset_vector_push@@Base+0xe4>
   1483c:	ldr	r1, [pc, #12]	; 14850 <flatcc_builder_offset_vector_push@@Base+0xe8>
   14840:	ldr	r0, [pc, #12]	; 14854 <flatcc_builder_offset_vector_push@@Base+0xec>
   14844:	bl	1206c <__assert_fail@plt>
   14848:			; <UNDEFINED> instruction: 0x000191b0
   1484c:	andeq	r0, r0, r6, lsr #7
   14850:	andeq	r9, r1, r4, asr #10
   14854:	andeq	r9, r1, ip, lsl r7

00014858 <flatcc_builder_append_offset_vector@@Base>:
   14858:	push	{r4, r5, r6, r7, r8, r9, lr}
   1485c:	mov	r5, r0
   14860:	ldr	r0, [r0, #32]
   14864:	sub	sp, sp, #12
   14868:	ldrh	r3, [r0, #14]
   1486c:	cmp	r3, #5
   14870:	bne	14954 <flatcc_builder_append_offset_vector@@Base+0xfc>
   14874:	mov	r7, r1
   14878:	ldr	r1, [r0, #20]
   1487c:	adds	r1, r2, r1
   14880:	movcs	r4, #1
   14884:	movcc	r4, #0
   14888:	cmn	r1, #-1073741823	; 0xc0000001
   1488c:	movls	r3, #0
   14890:	movhi	r3, #1
   14894:	orrs	r4, r4, r3
   14898:	bne	14950 <flatcc_builder_append_offset_vector@@Base+0xf8>
   1489c:	str	r1, [r0, #20]
   148a0:	ldr	r8, [r5, #20]
   148a4:	lsl	r6, r2, #2
   148a8:	ldr	r3, [r5, #24]
   148ac:	add	r1, r6, r8
   148b0:	cmp	r1, r3
   148b4:	str	r1, [r5, #20]
   148b8:	bcs	148e8 <flatcc_builder_append_offset_vector@@Base+0x90>
   148bc:	ldr	r3, [r5, #16]
   148c0:	adds	r3, r3, r8
   148c4:	beq	148dc <flatcc_builder_append_offset_vector@@Base+0x84>
   148c8:	mov	r0, r3
   148cc:	mov	r2, r6
   148d0:	mov	r1, r7
   148d4:	bl	11fb8 <memcpy@plt>
   148d8:	mov	r3, r0
   148dc:	mov	r0, r3
   148e0:	add	sp, sp, #12
   148e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   148e8:	ldr	r2, [r5, #28]
   148ec:	mov	r3, #1
   148f0:	add	r2, r2, #1
   148f4:	ldr	r0, [r5, #40]	; 0x28
   148f8:	add	r2, r2, r1
   148fc:	str	r3, [sp]
   14900:	add	r1, r5, #60	; 0x3c
   14904:	ldr	r9, [r5, #48]	; 0x30
   14908:	blx	r9
   1490c:	cmp	r0, #0
   14910:	bne	14948 <flatcc_builder_append_offset_vector@@Base+0xf0>
   14914:	ldr	r1, [r5, #28]
   14918:	ldr	r2, [r5, #64]	; 0x40
   1491c:	ldr	r3, [r5, #60]	; 0x3c
   14920:	sub	r2, r2, r1
   14924:	cmn	r2, #4
   14928:	mvnhi	r2, #3
   1492c:	str	r2, [r5, #24]
   14930:	ldr	r2, [r5, #32]
   14934:	add	r3, r3, r1
   14938:	mvn	r1, #3
   1493c:	str	r3, [r5, #16]
   14940:	str	r1, [r2, #4]
   14944:	b	148c0 <flatcc_builder_append_offset_vector@@Base+0x68>
   14948:	mov	r3, r4
   1494c:	b	148dc <flatcc_builder_append_offset_vector@@Base+0x84>
   14950:	bl	12138 <__assert_fail@plt+0xcc>
   14954:	ldr	r3, [pc, #12]	; 14968 <flatcc_builder_append_offset_vector@@Base+0x110>
   14958:	mov	r2, #948	; 0x3b4
   1495c:	ldr	r1, [pc, #8]	; 1496c <flatcc_builder_append_offset_vector@@Base+0x114>
   14960:	ldr	r0, [pc, #8]	; 14970 <flatcc_builder_append_offset_vector@@Base+0x118>
   14964:	bl	1206c <__assert_fail@plt>
   14968:	ldrdeq	r9, [r1], -r4
   1496c:	andeq	r9, r1, r4, asr #10
   14970:	andeq	r9, r1, ip, lsl r7

00014974 <flatcc_builder_extend_string@@Base>:
   14974:	ldr	r2, [r0, #32]
   14978:	push	{r4, r5, r6, lr}
   1497c:	sub	sp, sp, #8
   14980:	ldrh	r3, [r2, #14]
   14984:	cmp	r3, #6
   14988:	bne	14a34 <flatcc_builder_extend_string@@Base+0xc0>
   1498c:	ldr	r3, [r2, #20]
   14990:	adds	r3, r1, r3
   14994:	bcs	14a30 <flatcc_builder_extend_string@@Base+0xbc>
   14998:	str	r3, [r2, #20]
   1499c:	ldr	r5, [r0, #20]
   149a0:	ldr	r3, [r0, #24]
   149a4:	add	r1, r1, r5
   149a8:	cmp	r1, r3
   149ac:	mov	r4, r0
   149b0:	str	r1, [r0, #20]
   149b4:	bcs	149c8 <flatcc_builder_extend_string@@Base+0x54>
   149b8:	ldr	r0, [r0, #16]
   149bc:	add	r0, r0, r5
   149c0:	add	sp, sp, #8
   149c4:	pop	{r4, r5, r6, pc}
   149c8:	ldr	r2, [r0, #28]
   149cc:	mov	r3, #1
   149d0:	add	r2, r2, #1
   149d4:	ldr	r0, [r0, #40]	; 0x28
   149d8:	add	r2, r2, r1
   149dc:	str	r3, [sp]
   149e0:	add	r1, r4, #60	; 0x3c
   149e4:	ldr	r6, [r4, #48]	; 0x30
   149e8:	blx	r6
   149ec:	cmp	r0, #0
   149f0:	bne	14a28 <flatcc_builder_extend_string@@Base+0xb4>
   149f4:	ldr	r2, [r4, #28]
   149f8:	ldr	r3, [r4, #64]	; 0x40
   149fc:	ldr	r0, [r4, #60]	; 0x3c
   14a00:	sub	r3, r3, r2
   14a04:	cmn	r3, #4
   14a08:	mvnhi	r3, #3
   14a0c:	str	r3, [r4, #24]
   14a10:	ldr	r3, [r4, #32]
   14a14:	add	r0, r0, r2
   14a18:	mvn	r2, #3
   14a1c:	str	r0, [r4, #16]
   14a20:	str	r2, [r3, #4]
   14a24:	b	149bc <flatcc_builder_extend_string@@Base+0x48>
   14a28:	mov	r0, #0
   14a2c:	b	149c0 <flatcc_builder_extend_string@@Base+0x4c>
   14a30:	bl	12138 <__assert_fail@plt+0xcc>
   14a34:	ldr	r3, [pc, #12]	; 14a48 <flatcc_builder_extend_string@@Base+0xd4>
   14a38:	ldr	r2, [pc, #12]	; 14a4c <flatcc_builder_extend_string@@Base+0xd8>
   14a3c:	ldr	r1, [pc, #12]	; 14a50 <flatcc_builder_extend_string@@Base+0xdc>
   14a40:	ldr	r0, [pc, #12]	; 14a54 <flatcc_builder_extend_string@@Base+0xe0>
   14a44:	bl	1206c <__assert_fail@plt>
   14a48:	strdeq	r9, [r1], -r8
   14a4c:			; <UNDEFINED> instruction: 0x000003bd
   14a50:	andeq	r9, r1, r4, asr #10
   14a54:	andeq	r9, r1, r4, asr #11

00014a58 <flatcc_builder_append_string@@Base>:
   14a58:	push	{r4, r5, r6, r7, r8, lr}
   14a5c:	mov	r6, r1
   14a60:	ldr	r1, [r0, #32]
   14a64:	sub	sp, sp, #8
   14a68:	ldrh	r3, [r1, #14]
   14a6c:	cmp	r3, #6
   14a70:	bne	14b3c <flatcc_builder_append_string@@Base+0xe4>
   14a74:	ldr	r3, [r1, #20]
   14a78:	mov	r5, r2
   14a7c:	adds	r3, r2, r3
   14a80:	bcs	14b38 <flatcc_builder_append_string@@Base+0xe0>
   14a84:	str	r3, [r1, #20]
   14a88:	ldr	r7, [r0, #20]
   14a8c:	ldr	r3, [r0, #24]
   14a90:	add	r1, r2, r7
   14a94:	cmp	r1, r3
   14a98:	mov	r4, r0
   14a9c:	str	r1, [r0, #20]
   14aa0:	bcs	14ad0 <flatcc_builder_append_string@@Base+0x78>
   14aa4:	ldr	r3, [r0, #16]
   14aa8:	adds	r3, r3, r7
   14aac:	beq	14ac4 <flatcc_builder_append_string@@Base+0x6c>
   14ab0:	mov	r0, r3
   14ab4:	mov	r2, r5
   14ab8:	mov	r1, r6
   14abc:	bl	11fb8 <memcpy@plt>
   14ac0:	mov	r3, r0
   14ac4:	mov	r0, r3
   14ac8:	add	sp, sp, #8
   14acc:	pop	{r4, r5, r6, r7, r8, pc}
   14ad0:	ldr	r2, [r0, #28]
   14ad4:	mov	r3, #1
   14ad8:	add	r2, r2, #1
   14adc:	ldr	r0, [r0, #40]	; 0x28
   14ae0:	add	r2, r2, r1
   14ae4:	str	r3, [sp]
   14ae8:	add	r1, r4, #60	; 0x3c
   14aec:	ldr	r8, [r4, #48]	; 0x30
   14af0:	blx	r8
   14af4:	cmp	r0, #0
   14af8:	bne	14b30 <flatcc_builder_append_string@@Base+0xd8>
   14afc:	ldr	r1, [r4, #28]
   14b00:	ldr	r2, [r4, #64]	; 0x40
   14b04:	ldr	r3, [r4, #60]	; 0x3c
   14b08:	sub	r2, r2, r1
   14b0c:	cmn	r2, #4
   14b10:	mvnhi	r2, #3
   14b14:	str	r2, [r4, #24]
   14b18:	ldr	r2, [r4, #32]
   14b1c:	add	r3, r3, r1
   14b20:	mvn	r1, #3
   14b24:	str	r3, [r4, #16]
   14b28:	str	r1, [r2, #4]
   14b2c:	b	14aa8 <flatcc_builder_append_string@@Base+0x50>
   14b30:	mov	r3, #0
   14b34:	b	14ac4 <flatcc_builder_append_string@@Base+0x6c>
   14b38:	bl	12138 <__assert_fail@plt+0xcc>
   14b3c:	bl	12184 <__assert_fail@plt+0x118>

00014b40 <flatcc_builder_append_string_str@@Base>:
   14b40:	push	{r4, r5, r6, r7, r8, lr}
   14b44:	mov	r4, r0
   14b48:	sub	sp, sp, #8
   14b4c:	mov	r0, r1
   14b50:	mov	r6, r1
   14b54:	bl	12024 <strlen@plt>
   14b58:	ldr	r2, [r4, #32]
   14b5c:	ldrh	r3, [r2, #14]
   14b60:	cmp	r3, #6
   14b64:	bne	14c2c <flatcc_builder_append_string_str@@Base+0xec>
   14b68:	ldr	r3, [r2, #20]
   14b6c:	mov	r5, r0
   14b70:	adds	r3, r0, r3
   14b74:	bcs	14c28 <flatcc_builder_append_string_str@@Base+0xe8>
   14b78:	str	r3, [r2, #20]
   14b7c:	ldr	r7, [r4, #20]
   14b80:	ldr	r3, [r4, #24]
   14b84:	add	r1, r0, r7
   14b88:	cmp	r1, r3
   14b8c:	str	r1, [r4, #20]
   14b90:	bcs	14bc0 <flatcc_builder_append_string_str@@Base+0x80>
   14b94:	ldr	r3, [r4, #16]
   14b98:	adds	r3, r3, r7
   14b9c:	beq	14bb4 <flatcc_builder_append_string_str@@Base+0x74>
   14ba0:	mov	r0, r3
   14ba4:	mov	r2, r5
   14ba8:	mov	r1, r6
   14bac:	bl	11fb8 <memcpy@plt>
   14bb0:	mov	r3, r0
   14bb4:	mov	r0, r3
   14bb8:	add	sp, sp, #8
   14bbc:	pop	{r4, r5, r6, r7, r8, pc}
   14bc0:	ldr	r2, [r4, #28]
   14bc4:	mov	r3, #1
   14bc8:	add	r2, r2, #1
   14bcc:	ldr	r0, [r4, #40]	; 0x28
   14bd0:	add	r2, r2, r1
   14bd4:	str	r3, [sp]
   14bd8:	add	r1, r4, #60	; 0x3c
   14bdc:	ldr	r8, [r4, #48]	; 0x30
   14be0:	blx	r8
   14be4:	cmp	r0, #0
   14be8:	bne	14c20 <flatcc_builder_append_string_str@@Base+0xe0>
   14bec:	ldr	r1, [r4, #28]
   14bf0:	ldr	r2, [r4, #64]	; 0x40
   14bf4:	ldr	r3, [r4, #60]	; 0x3c
   14bf8:	sub	r2, r2, r1
   14bfc:	cmn	r2, #4
   14c00:	mvnhi	r2, #3
   14c04:	str	r2, [r4, #24]
   14c08:	ldr	r2, [r4, #32]
   14c0c:	add	r3, r3, r1
   14c10:	mvn	r1, #3
   14c14:	str	r3, [r4, #16]
   14c18:	str	r1, [r2, #4]
   14c1c:	b	14b98 <flatcc_builder_append_string_str@@Base+0x58>
   14c20:	mov	r3, #0
   14c24:	b	14bb4 <flatcc_builder_append_string_str@@Base+0x74>
   14c28:	bl	12138 <__assert_fail@plt+0xcc>
   14c2c:	bl	12184 <__assert_fail@plt+0x118>

00014c30 <flatcc_builder_append_string_strn@@Base>:
   14c30:	push	{r4, r5, r6, r7, r8, lr}
   14c34:	mov	r6, r1
   14c38:	mov	r4, r0
   14c3c:	sub	sp, sp, #8
   14c40:	mov	r1, #0
   14c44:	mov	r0, r6
   14c48:	mov	r5, r2
   14c4c:	bl	12048 <memchr@plt>
   14c50:	ldr	r2, [r4, #32]
   14c54:	ldrh	r3, [r2, #14]
   14c58:	cmp	r0, #0
   14c5c:	subne	r5, r0, r6
   14c60:	cmp	r3, #6
   14c64:	bne	14d28 <flatcc_builder_append_string_strn@@Base+0xf8>
   14c68:	ldr	r3, [r2, #20]
   14c6c:	adds	r3, r5, r3
   14c70:	bcs	14d24 <flatcc_builder_append_string_strn@@Base+0xf4>
   14c74:	str	r3, [r2, #20]
   14c78:	ldr	r7, [r4, #20]
   14c7c:	ldr	r3, [r4, #24]
   14c80:	add	r1, r5, r7
   14c84:	cmp	r1, r3
   14c88:	str	r1, [r4, #20]
   14c8c:	bcs	14cbc <flatcc_builder_append_string_strn@@Base+0x8c>
   14c90:	ldr	r3, [r4, #16]
   14c94:	adds	r3, r3, r7
   14c98:	beq	14cb0 <flatcc_builder_append_string_strn@@Base+0x80>
   14c9c:	mov	r0, r3
   14ca0:	mov	r2, r5
   14ca4:	mov	r1, r6
   14ca8:	bl	11fb8 <memcpy@plt>
   14cac:	mov	r3, r0
   14cb0:	mov	r0, r3
   14cb4:	add	sp, sp, #8
   14cb8:	pop	{r4, r5, r6, r7, r8, pc}
   14cbc:	ldr	r2, [r4, #28]
   14cc0:	mov	r3, #1
   14cc4:	add	r2, r2, #1
   14cc8:	ldr	r0, [r4, #40]	; 0x28
   14ccc:	add	r2, r2, r1
   14cd0:	str	r3, [sp]
   14cd4:	add	r1, r4, #60	; 0x3c
   14cd8:	ldr	r8, [r4, #48]	; 0x30
   14cdc:	blx	r8
   14ce0:	cmp	r0, #0
   14ce4:	bne	14d1c <flatcc_builder_append_string_strn@@Base+0xec>
   14ce8:	ldr	r1, [r4, #28]
   14cec:	ldr	r2, [r4, #64]	; 0x40
   14cf0:	ldr	r3, [r4, #60]	; 0x3c
   14cf4:	sub	r2, r2, r1
   14cf8:	cmn	r2, #4
   14cfc:	mvnhi	r2, #3
   14d00:	str	r2, [r4, #24]
   14d04:	ldr	r2, [r4, #32]
   14d08:	add	r3, r3, r1
   14d0c:	mvn	r1, #3
   14d10:	str	r3, [r4, #16]
   14d14:	str	r1, [r2, #4]
   14d18:	b	14c94 <flatcc_builder_append_string_strn@@Base+0x64>
   14d1c:	mov	r3, #0
   14d20:	b	14cb0 <flatcc_builder_append_string_strn@@Base+0x80>
   14d24:	bl	12138 <__assert_fail@plt+0xcc>
   14d28:	bl	12184 <__assert_fail@plt+0x118>

00014d2c <flatcc_builder_truncate_vector@@Base>:
   14d2c:	ldr	r3, [r0, #32]
   14d30:	push	{r4, lr}
   14d34:	ldrh	r2, [r3, #14]
   14d38:	cmp	r2, #4
   14d3c:	bne	14d80 <flatcc_builder_truncate_vector@@Base+0x54>
   14d40:	ldr	ip, [r3, #20]
   14d44:	cmp	ip, r1
   14d48:	bcc	14d94 <flatcc_builder_truncate_vector@@Base+0x68>
   14d4c:	ldr	r2, [r3, #16]
   14d50:	sub	ip, ip, r1
   14d54:	str	ip, [r3, #20]
   14d58:	mul	r2, r2, r1
   14d5c:	ldr	r3, [r0, #20]
   14d60:	ldr	r1, [r0, #16]
   14d64:	sub	r3, r3, r2
   14d68:	str	r3, [r0, #20]
   14d6c:	add	r0, r1, r3
   14d70:	mov	r1, #0
   14d74:	bl	1203c <memset@plt>
   14d78:	mov	r0, #0
   14d7c:	pop	{r4, pc}
   14d80:	ldr	r3, [pc, #32]	; 14da8 <flatcc_builder_truncate_vector@@Base+0x7c>
   14d84:	ldr	r2, [pc, #32]	; 14dac <flatcc_builder_truncate_vector@@Base+0x80>
   14d88:	ldr	r1, [pc, #32]	; 14db0 <flatcc_builder_truncate_vector@@Base+0x84>
   14d8c:	ldr	r0, [pc, #32]	; 14db4 <flatcc_builder_truncate_vector@@Base+0x88>
   14d90:	bl	1206c <__assert_fail@plt>
   14d94:	ldr	r3, [pc, #12]	; 14da8 <flatcc_builder_truncate_vector@@Base+0x7c>
   14d98:	ldr	r2, [pc, #24]	; 14db8 <flatcc_builder_truncate_vector@@Base+0x8c>
   14d9c:	ldr	r1, [pc, #12]	; 14db0 <flatcc_builder_truncate_vector@@Base+0x84>
   14da0:	ldr	r0, [pc, #20]	; 14dbc <flatcc_builder_truncate_vector@@Base+0x90>
   14da4:	bl	1206c <__assert_fail@plt>
   14da8:	andeq	r9, r1, r8, lsl r2
   14dac:	ldrdeq	r0, [r0], -r9
   14db0:	andeq	r9, r1, r4, asr #10
   14db4:			; <UNDEFINED> instruction: 0x000196b0
   14db8:	ldrdeq	r0, [r0], -sl
   14dbc:	andeq	r9, r1, r0, asr r7

00014dc0 <flatcc_builder_truncate_offset_vector@@Base>:
   14dc0:	ldr	r3, [r0, #32]
   14dc4:	push	{r4, lr}
   14dc8:	ldrh	r2, [r3, #14]
   14dcc:	cmp	r2, #5
   14dd0:	bne	14e14 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   14dd4:	ldr	ip, [r3, #20]
   14dd8:	cmp	ip, r1
   14ddc:	bcc	14e28 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14de0:	ldr	r2, [r3, #16]
   14de4:	sub	ip, ip, r1
   14de8:	str	ip, [r3, #20]
   14dec:	mul	r2, r2, r1
   14df0:	ldr	r3, [r0, #20]
   14df4:	ldr	r1, [r0, #16]
   14df8:	sub	r3, r3, r2
   14dfc:	str	r3, [r0, #20]
   14e00:	add	r0, r1, r3
   14e04:	mov	r1, #0
   14e08:	bl	1203c <memset@plt>
   14e0c:	mov	r0, #0
   14e10:	pop	{r4, pc}
   14e14:	ldr	r3, [pc, #32]	; 14e3c <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14e18:	ldr	r2, [pc, #32]	; 14e40 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14e1c:	ldr	r1, [pc, #32]	; 14e44 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14e20:	ldr	r0, [pc, #32]	; 14e48 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14e24:	bl	1206c <__assert_fail@plt>
   14e28:	ldr	r3, [pc, #12]	; 14e3c <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14e2c:	ldr	r2, [pc, #24]	; 14e4c <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   14e30:	ldr	r1, [pc, #12]	; 14e44 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14e34:	ldr	r0, [pc, #20]	; 14e50 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   14e38:	bl	1206c <__assert_fail@plt>
   14e3c:	andeq	r9, r1, r8, lsr r2
   14e40:	andeq	r0, r0, r2, ror #7
   14e44:	andeq	r9, r1, r4, asr #10
   14e48:	andeq	r9, r1, ip, lsl r7
   14e4c:	andeq	r0, r0, r3, ror #7
   14e50:	andeq	r9, r1, r4, ror r7

00014e54 <flatcc_builder_truncate_string@@Base>:
   14e54:	ldr	r2, [r0, #32]
   14e58:	push	{r4, lr}
   14e5c:	ldrh	r3, [r2, #14]
   14e60:	cmp	r3, #6
   14e64:	bne	14ea4 <flatcc_builder_truncate_string@@Base+0x50>
   14e68:	ldr	r3, [r2, #20]
   14e6c:	cmp	r3, r1
   14e70:	bcc	14eb8 <flatcc_builder_truncate_string@@Base+0x64>
   14e74:	sub	r3, r3, r1
   14e78:	str	r3, [r2, #20]
   14e7c:	ldr	r3, [r0, #20]
   14e80:	ldr	r2, [r0, #16]
   14e84:	sub	r3, r3, r1
   14e88:	str	r3, [r0, #20]
   14e8c:	add	r0, r2, r3
   14e90:	mov	r2, r1
   14e94:	mov	r1, #0
   14e98:	bl	1203c <memset@plt>
   14e9c:	mov	r0, #0
   14ea0:	pop	{r4, pc}
   14ea4:	ldr	r3, [pc, #32]	; 14ecc <flatcc_builder_truncate_string@@Base+0x78>
   14ea8:	ldr	r2, [pc, #32]	; 14ed0 <flatcc_builder_truncate_string@@Base+0x7c>
   14eac:	ldr	r1, [pc, #32]	; 14ed4 <flatcc_builder_truncate_string@@Base+0x80>
   14eb0:	ldr	r0, [pc, #32]	; 14ed8 <flatcc_builder_truncate_string@@Base+0x84>
   14eb4:	bl	1206c <__assert_fail@plt>
   14eb8:	ldr	r3, [pc, #12]	; 14ecc <flatcc_builder_truncate_string@@Base+0x78>
   14ebc:	mov	r2, #1004	; 0x3ec
   14ec0:	ldr	r1, [pc, #12]	; 14ed4 <flatcc_builder_truncate_string@@Base+0x80>
   14ec4:	ldr	r0, [pc, #16]	; 14edc <flatcc_builder_truncate_string@@Base+0x88>
   14ec8:	bl	1206c <__assert_fail@plt>
   14ecc:	andeq	r9, r1, r0, ror #4
   14ed0:	andeq	r0, r0, fp, ror #7
   14ed4:	andeq	r9, r1, r4, asr #10
   14ed8:	andeq	r9, r1, r4, asr #11
   14edc:			; <UNDEFINED> instruction: 0x000197b0

00014ee0 <flatcc_builder_start_vector@@Base>:
   14ee0:	ldr	ip, [r0, #156]	; 0x9c
   14ee4:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ee8:	cmp	r2, #4
   14eec:	ldr	lr, [r0, #160]	; 0xa0
   14ef0:	mov	r4, r0
   14ef4:	add	r0, ip, #1
   14ef8:	movcs	r7, r2
   14efc:	movcc	r7, #4
   14f00:	cmp	r0, lr
   14f04:	sub	sp, sp, #12
   14f08:	mov	r6, r1
   14f0c:	mov	r5, r3
   14f10:	str	r0, [r4, #156]	; 0x9c
   14f14:	ble	14f84 <flatcc_builder_start_vector@@Base+0xa4>
   14f18:	ldr	r3, [r4, #176]	; 0xb0
   14f1c:	cmp	r3, #0
   14f20:	cmpgt	r0, r3
   14f24:	movgt	r3, #1
   14f28:	movle	r3, #0
   14f2c:	bgt	1502c <flatcc_builder_start_vector@@Base+0x14c>
   14f30:	add	ip, ip, ip, lsl #3
   14f34:	ldr	r1, [r4, #88]	; 0x58
   14f38:	lsl	r8, ip, #2
   14f3c:	add	r2, r8, #36	; 0x24
   14f40:	cmp	r2, r1
   14f44:	bhi	15008 <flatcc_builder_start_vector@@Base+0x128>
   14f48:	ldr	r3, [r4, #84]	; 0x54
   14f4c:	add	r3, r3, r8
   14f50:	cmp	r3, #0
   14f54:	str	r3, [r4, #32]
   14f58:	beq	1502c <flatcc_builder_start_vector@@Base+0x14c>
   14f5c:	ldr	r2, [r4, #88]	; 0x58
   14f60:	ldr	r0, [pc, #204]	; 15034 <flatcc_builder_start_vector@@Base+0x154>
   14f64:	ldr	r1, [r4, #176]	; 0xb0
   14f68:	umull	r0, r2, r0, r2
   14f6c:	lsr	r2, r2, #3
   14f70:	cmp	r1, #0
   14f74:	cmpgt	r2, r1
   14f78:	str	r2, [r4, #160]	; 0xa0
   14f7c:	strgt	r1, [r4, #160]	; 0xa0
   14f80:	b	14f90 <flatcc_builder_start_vector@@Base+0xb0>
   14f84:	ldr	r3, [r4, #32]
   14f88:	add	r3, r3, #36	; 0x24
   14f8c:	str	r3, [r4, #32]
   14f90:	ldr	r0, [r4, #20]
   14f94:	ldr	r1, [r4, #28]
   14f98:	ldrh	ip, [r4, #130]	; 0x82
   14f9c:	add	r2, r0, r1
   14fa0:	add	r2, r2, #7
   14fa4:	str	r0, [r3, #8]
   14fa8:	bic	r2, r2, #7
   14fac:	mov	r0, #0
   14fb0:	strh	ip, [r3, #12]
   14fb4:	strh	r7, [r4, #130]	; 0x82
   14fb8:	str	r1, [r3]
   14fbc:	str	r2, [r4, #28]
   14fc0:	str	r0, [r4, #20]
   14fc4:	str	r0, [r3, #20]
   14fc8:	str	r6, [r3, #16]
   14fcc:	str	r5, [r3, #24]
   14fd0:	ldr	r1, [r4, #64]	; 0x40
   14fd4:	ldr	ip, [r4, #60]	; 0x3c
   14fd8:	sub	r1, r1, r2
   14fdc:	mvn	lr, #3
   14fe0:	cmp	r1, lr
   14fe4:	add	r2, ip, r2
   14fe8:	movhi	r1, lr
   14fec:	mov	ip, #4
   14ff0:	strh	ip, [r3, #14]
   14ff4:	str	r2, [r4, #16]
   14ff8:	str	r1, [r4, #24]
   14ffc:	str	lr, [r3, #4]
   15000:	add	sp, sp, #12
   15004:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15008:	mov	r1, #4
   1500c:	ldr	r0, [r4, #40]	; 0x28
   15010:	str	r1, [sp]
   15014:	add	r1, r4, #84	; 0x54
   15018:	ldr	r9, [r4, #48]	; 0x30
   1501c:	blx	r9
   15020:	cmp	r0, #0
   15024:	beq	14f48 <flatcc_builder_start_vector@@Base+0x68>
   15028:	bl	120c4 <__assert_fail@plt+0x58>
   1502c:	mvn	r0, #0
   15030:	b	15000 <flatcc_builder_start_vector@@Base+0x120>
   15034:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00015038 <flatcc_builder_start_offset_vector@@Base>:
   15038:	ldr	r1, [r0, #156]	; 0x9c
   1503c:	ldr	r3, [r0, #160]	; 0xa0
   15040:	add	r2, r1, #1
   15044:	cmp	r2, r3
   15048:	push	{r4, r5, r6, lr}
   1504c:	mov	r4, r0
   15050:	sub	sp, sp, #8
   15054:	str	r2, [r0, #156]	; 0x9c
   15058:	ble	150c8 <flatcc_builder_start_offset_vector@@Base+0x90>
   1505c:	ldr	r3, [r0, #176]	; 0xb0
   15060:	cmp	r3, #0
   15064:	cmpgt	r2, r3
   15068:	movgt	r3, #1
   1506c:	movle	r3, #0
   15070:	bgt	15170 <flatcc_builder_start_offset_vector@@Base+0x138>
   15074:	add	r1, r1, r1, lsl #3
   15078:	ldr	r0, [r0, #88]	; 0x58
   1507c:	lsl	r5, r1, #2
   15080:	add	r2, r5, #36	; 0x24
   15084:	cmp	r2, r0
   15088:	bhi	1514c <flatcc_builder_start_offset_vector@@Base+0x114>
   1508c:	ldr	r3, [r4, #84]	; 0x54
   15090:	add	r3, r3, r5
   15094:	cmp	r3, #0
   15098:	str	r3, [r4, #32]
   1509c:	beq	15170 <flatcc_builder_start_offset_vector@@Base+0x138>
   150a0:	ldr	r2, [r4, #88]	; 0x58
   150a4:	ldr	r0, [pc, #204]	; 15178 <flatcc_builder_start_offset_vector@@Base+0x140>
   150a8:	ldr	r1, [r4, #176]	; 0xb0
   150ac:	umull	r0, r2, r0, r2
   150b0:	lsr	r2, r2, #3
   150b4:	cmp	r1, #0
   150b8:	cmpgt	r2, r1
   150bc:	str	r2, [r4, #160]	; 0xa0
   150c0:	strgt	r1, [r4, #160]	; 0xa0
   150c4:	b	150d4 <flatcc_builder_start_offset_vector@@Base+0x9c>
   150c8:	ldr	r3, [r0, #32]
   150cc:	add	r3, r3, #36	; 0x24
   150d0:	str	r3, [r0, #32]
   150d4:	ldr	lr, [r4, #20]
   150d8:	ldr	ip, [r4, #28]
   150dc:	ldrh	r5, [r4, #130]	; 0x82
   150e0:	add	r2, lr, ip
   150e4:	add	r2, r2, #7
   150e8:	bic	r2, r2, #7
   150ec:	mov	r1, #4
   150f0:	mov	r0, #0
   150f4:	str	lr, [r3, #8]
   150f8:	strh	r5, [r3, #12]
   150fc:	strh	r1, [r4, #130]	; 0x82
   15100:	str	ip, [r3]
   15104:	str	r2, [r4, #28]
   15108:	str	r0, [r4, #20]
   1510c:	str	r1, [r3, #16]
   15110:	str	r0, [r3, #20]
   15114:	ldr	r1, [r4, #64]	; 0x40
   15118:	ldr	ip, [r4, #60]	; 0x3c
   1511c:	sub	r1, r1, r2
   15120:	mvn	lr, #3
   15124:	cmp	r1, lr
   15128:	add	r2, ip, r2
   1512c:	movhi	r1, lr
   15130:	mov	ip, #5
   15134:	strh	ip, [r3, #14]
   15138:	str	r2, [r4, #16]
   1513c:	str	r1, [r4, #24]
   15140:	str	lr, [r3, #4]
   15144:	add	sp, sp, #8
   15148:	pop	{r4, r5, r6, pc}
   1514c:	mov	r1, #4
   15150:	ldr	r0, [r4, #40]	; 0x28
   15154:	str	r1, [sp]
   15158:	add	r1, r4, #84	; 0x54
   1515c:	ldr	r6, [r4, #48]	; 0x30
   15160:	blx	r6
   15164:	cmp	r0, #0
   15168:	beq	1508c <flatcc_builder_start_offset_vector@@Base+0x54>
   1516c:	bl	120c4 <__assert_fail@plt+0x58>
   15170:	mvn	r0, #0
   15174:	b	15144 <flatcc_builder_start_offset_vector@@Base+0x10c>
   15178:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0001517c <flatcc_builder_create_offset_vector@@Base>:
   1517c:	push	{r4, r5, r6, r7, r8, lr}
   15180:	mov	r4, r0
   15184:	ldr	r0, [r0, #156]	; 0x9c
   15188:	ldr	r3, [r4, #160]	; 0xa0
   1518c:	mov	r7, r1
   15190:	add	r1, r0, #1
   15194:	cmp	r1, r3
   15198:	sub	sp, sp, #8
   1519c:	mov	r5, r2
   151a0:	str	r1, [r4, #156]	; 0x9c
   151a4:	ble	15214 <flatcc_builder_create_offset_vector@@Base+0x98>
   151a8:	ldr	r3, [r4, #176]	; 0xb0
   151ac:	cmp	r1, r3
   151b0:	cmpgt	r3, #0
   151b4:	movgt	r3, #1
   151b8:	movle	r3, #0
   151bc:	bgt	152e4 <flatcc_builder_create_offset_vector@@Base+0x168>
   151c0:	add	r0, r0, r0, lsl #3
   151c4:	ldr	r1, [r4, #88]	; 0x58
   151c8:	lsl	r6, r0, #2
   151cc:	add	r2, r6, #36	; 0x24
   151d0:	cmp	r2, r1
   151d4:	bhi	1534c <flatcc_builder_create_offset_vector@@Base+0x1d0>
   151d8:	ldr	r3, [r4, #84]	; 0x54
   151dc:	add	r3, r3, r6
   151e0:	cmp	r3, #0
   151e4:	str	r3, [r4, #32]
   151e8:	beq	152e4 <flatcc_builder_create_offset_vector@@Base+0x168>
   151ec:	ldr	r2, [r4, #88]	; 0x58
   151f0:	ldr	r0, [pc, #552]	; 15420 <flatcc_builder_create_offset_vector@@Base+0x2a4>
   151f4:	ldr	r1, [r4, #176]	; 0xb0
   151f8:	umull	r0, r2, r0, r2
   151fc:	lsr	r2, r2, #3
   15200:	cmp	r1, #0
   15204:	cmpgt	r2, r1
   15208:	str	r2, [r4, #160]	; 0xa0
   1520c:	strgt	r1, [r4, #160]	; 0xa0
   15210:	b	15220 <flatcc_builder_create_offset_vector@@Base+0xa4>
   15214:	ldr	r3, [r4, #32]
   15218:	add	r3, r3, #36	; 0x24
   1521c:	str	r3, [r4, #32]
   15220:	ldr	r2, [r4, #20]
   15224:	ldr	ip, [r4, #28]
   15228:	ldrh	r6, [r4, #130]	; 0x82
   1522c:	add	r1, r2, ip
   15230:	mvn	lr, #3
   15234:	add	r1, r1, #7
   15238:	str	r2, [r3, #8]
   1523c:	bic	r1, r1, #7
   15240:	mov	r0, #4
   15244:	mov	r2, #0
   15248:	strh	r6, [r3, #12]
   1524c:	strh	r0, [r4, #130]	; 0x82
   15250:	stm	r3, {ip, lr}
   15254:	str	r2, [r4, #20]
   15258:	str	r1, [r4, #28]
   1525c:	str	r0, [r3, #16]
   15260:	str	r2, [r3, #20]
   15264:	ldr	r2, [r4, #64]	; 0x40
   15268:	ldr	r0, [r4, #60]	; 0x3c
   1526c:	sub	r2, r2, r1
   15270:	cmp	r2, lr
   15274:	mov	ip, #5
   15278:	strh	ip, [r3, #14]
   1527c:	add	r0, r0, r1
   15280:	strls	r2, [r4, #24]
   15284:	strhi	lr, [r4, #24]
   15288:	movhi	r2, lr
   1528c:	mvn	r6, #3
   15290:	cmn	r5, #-1073741823	; 0xc0000001
   15294:	str	r0, [r4, #16]
   15298:	str	r6, [r3, #4]
   1529c:	bhi	15408 <flatcc_builder_create_offset_vector@@Base+0x28c>
   152a0:	lsl	r8, r5, #2
   152a4:	cmp	r8, r2
   152a8:	str	r5, [r3, #20]
   152ac:	str	r8, [r4, #20]
   152b0:	bcs	152f4 <flatcc_builder_create_offset_vector@@Base+0x178>
   152b4:	cmp	r0, #0
   152b8:	beq	152e4 <flatcc_builder_create_offset_vector@@Base+0x168>
   152bc:	mov	r2, r8
   152c0:	mov	r1, r7
   152c4:	bl	11fb8 <memcpy@plt>
   152c8:	ldr	r3, [r4, #32]
   152cc:	ldrh	r2, [r3, #14]
   152d0:	cmp	r2, #5
   152d4:	bne	1540c <flatcc_builder_create_offset_vector@@Base+0x290>
   152d8:	ldr	r2, [r3, #20]
   152dc:	cmn	r2, #-1073741823	; 0xc0000001
   152e0:	bls	15370 <flatcc_builder_create_offset_vector@@Base+0x1f4>
   152e4:	mov	r5, #0
   152e8:	mov	r0, r5
   152ec:	add	sp, sp, #8
   152f0:	pop	{r4, r5, r6, r7, r8, pc}
   152f4:	mov	r3, #1
   152f8:	add	r2, r8, #1
   152fc:	ldr	r0, [r4, #40]	; 0x28
   15300:	add	r2, r2, r1
   15304:	str	r3, [sp]
   15308:	add	r1, r4, #60	; 0x3c
   1530c:	ldr	r5, [r4, #48]	; 0x30
   15310:	blx	r5
   15314:	cmp	r0, #0
   15318:	bne	152e4 <flatcc_builder_create_offset_vector@@Base+0x168>
   1531c:	ldr	r2, [r4, #28]
   15320:	ldr	r3, [r4, #64]	; 0x40
   15324:	ldr	r0, [r4, #60]	; 0x3c
   15328:	sub	r3, r3, r2
   1532c:	ldr	r1, [r4, #32]
   15330:	cmn	r3, #4
   15334:	movhi	r3, r6
   15338:	add	r0, r0, r2
   1533c:	str	r3, [r4, #24]
   15340:	str	r0, [r4, #16]
   15344:	str	r6, [r1, #4]
   15348:	b	152b4 <flatcc_builder_create_offset_vector@@Base+0x138>
   1534c:	mov	r1, #4
   15350:	ldr	r0, [r4, #40]	; 0x28
   15354:	str	r1, [sp]
   15358:	add	r1, r4, #84	; 0x54
   1535c:	ldr	r8, [r4, #48]	; 0x30
   15360:	blx	r8
   15364:	cmp	r0, #0
   15368:	beq	151d8 <flatcc_builder_create_offset_vector@@Base+0x5c>
   1536c:	bl	120c4 <__assert_fail@plt+0x58>
   15370:	ldr	r1, [r4, #16]
   15374:	mov	r0, r4
   15378:	bl	12da0 <flatcc_builder_default_alloc@@Base+0x2fc>
   1537c:	subs	r5, r0, #0
   15380:	beq	152e4 <flatcc_builder_create_offset_vector@@Base+0x168>
   15384:	ldr	r2, [r4, #20]
   15388:	mov	r1, #0
   1538c:	ldr	r0, [r4, #16]
   15390:	bl	1203c <memset@plt>
   15394:	ldr	r3, [r4, #32]
   15398:	ldr	r2, [r4, #64]	; 0x40
   1539c:	ldrh	lr, [r4, #130]	; 0x82
   153a0:	ldr	ip, [r3]
   153a4:	ldr	r1, [r3, #4]
   153a8:	ldrh	r0, [r4, #128]	; 0x80
   153ac:	sub	r2, r2, ip
   153b0:	cmp	r2, r1
   153b4:	movcs	r2, r1
   153b8:	cmp	r0, lr
   153bc:	ldr	r0, [r4, #60]	; 0x3c
   153c0:	ldr	r6, [r3, #8]
   153c4:	str	r2, [r4, #24]
   153c8:	add	r2, r0, ip
   153cc:	str	r2, [r4, #16]
   153d0:	str	r6, [r4, #20]
   153d4:	ldr	r2, [r4, #156]	; 0x9c
   153d8:	str	ip, [r4, #28]
   153dc:	str	r1, [r3, #4]
   153e0:	strhcc	lr, [r4, #128]	; 0x80
   153e4:	ldrh	r1, [r3, #12]
   153e8:	sub	r2, r2, #1
   153ec:	sub	r3, r3, #36	; 0x24
   153f0:	mov	r0, r5
   153f4:	str	r2, [r4, #156]	; 0x9c
   153f8:	strh	r1, [r4, #130]	; 0x82
   153fc:	str	r3, [r4, #32]
   15400:	add	sp, sp, #8
   15404:	pop	{r4, r5, r6, r7, r8, pc}
   15408:	bl	12138 <__assert_fail@plt+0xcc>
   1540c:	ldr	r3, [pc, #16]	; 15424 <flatcc_builder_create_offset_vector@@Base+0x2a8>
   15410:	ldr	r2, [pc, #16]	; 15428 <flatcc_builder_create_offset_vector@@Base+0x2ac>
   15414:	ldr	r1, [pc, #16]	; 1542c <flatcc_builder_create_offset_vector@@Base+0x2b0>
   15418:	ldr	r0, [pc, #16]	; 15430 <flatcc_builder_create_offset_vector@@Base+0x2b4>
   1541c:	bl	1206c <__assert_fail@plt>
   15420:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15424:	andeq	r9, r1, r0, lsl #5
   15428:	andeq	r0, r0, r8, asr #11
   1542c:	andeq	r9, r1, r4, asr #10
   15430:	andeq	r9, r1, ip, lsl r7

00015434 <flatcc_builder_start_string@@Base>:
   15434:	ldr	r1, [r0, #156]	; 0x9c
   15438:	ldr	r3, [r0, #160]	; 0xa0
   1543c:	add	r2, r1, #1
   15440:	cmp	r2, r3
   15444:	push	{r4, r5, r6, lr}
   15448:	mov	r4, r0
   1544c:	sub	sp, sp, #8
   15450:	str	r2, [r0, #156]	; 0x9c
   15454:	ble	154c4 <flatcc_builder_start_string@@Base+0x90>
   15458:	ldr	r3, [r0, #176]	; 0xb0
   1545c:	cmp	r3, #0
   15460:	cmpgt	r2, r3
   15464:	movgt	r3, #1
   15468:	movle	r3, #0
   1546c:	bgt	1556c <flatcc_builder_start_string@@Base+0x138>
   15470:	add	r1, r1, r1, lsl #3
   15474:	ldr	r0, [r0, #88]	; 0x58
   15478:	lsl	r5, r1, #2
   1547c:	add	r2, r5, #36	; 0x24
   15480:	cmp	r2, r0
   15484:	bhi	15548 <flatcc_builder_start_string@@Base+0x114>
   15488:	ldr	r3, [r4, #84]	; 0x54
   1548c:	add	r3, r3, r5
   15490:	cmp	r3, #0
   15494:	str	r3, [r4, #32]
   15498:	beq	1556c <flatcc_builder_start_string@@Base+0x138>
   1549c:	ldr	r2, [r4, #88]	; 0x58
   154a0:	ldr	r0, [pc, #204]	; 15574 <flatcc_builder_start_string@@Base+0x140>
   154a4:	ldr	r1, [r4, #176]	; 0xb0
   154a8:	umull	r0, r2, r0, r2
   154ac:	lsr	r2, r2, #3
   154b0:	cmp	r1, #0
   154b4:	cmpgt	r2, r1
   154b8:	str	r2, [r4, #160]	; 0xa0
   154bc:	strgt	r1, [r4, #160]	; 0xa0
   154c0:	b	154d0 <flatcc_builder_start_string@@Base+0x9c>
   154c4:	ldr	r3, [r0, #32]
   154c8:	add	r3, r3, #36	; 0x24
   154cc:	str	r3, [r0, #32]
   154d0:	ldr	lr, [r4, #20]
   154d4:	ldr	ip, [r4, #28]
   154d8:	ldrh	r5, [r4, #130]	; 0x82
   154dc:	add	r2, lr, ip
   154e0:	add	r2, r2, #7
   154e4:	bic	r2, r2, #7
   154e8:	mov	r1, #1
   154ec:	mov	r0, #0
   154f0:	str	lr, [r3, #8]
   154f4:	strh	r5, [r3, #12]
   154f8:	strh	r1, [r4, #130]	; 0x82
   154fc:	str	ip, [r3]
   15500:	str	r2, [r4, #28]
   15504:	str	r0, [r4, #20]
   15508:	str	r1, [r3, #16]
   1550c:	str	r0, [r3, #20]
   15510:	ldr	r1, [r4, #64]	; 0x40
   15514:	ldr	ip, [r4, #60]	; 0x3c
   15518:	sub	r1, r1, r2
   1551c:	mvn	lr, #3
   15520:	cmp	r1, lr
   15524:	add	r2, ip, r2
   15528:	movhi	r1, lr
   1552c:	mov	ip, #6
   15530:	strh	ip, [r3, #14]
   15534:	str	r2, [r4, #16]
   15538:	str	r1, [r4, #24]
   1553c:	str	lr, [r3, #4]
   15540:	add	sp, sp, #8
   15544:	pop	{r4, r5, r6, pc}
   15548:	mov	r1, #4
   1554c:	ldr	r0, [r4, #40]	; 0x28
   15550:	str	r1, [sp]
   15554:	add	r1, r4, #84	; 0x54
   15558:	ldr	r6, [r4, #48]	; 0x30
   1555c:	blx	r6
   15560:	cmp	r0, #0
   15564:	beq	15488 <flatcc_builder_start_string@@Base+0x54>
   15568:	bl	120c4 <__assert_fail@plt+0x58>
   1556c:	mvn	r0, #0
   15570:	b	15540 <flatcc_builder_start_string@@Base+0x10c>
   15574:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00015578 <flatcc_builder_reserve_table@@Base>:
   15578:	cmp	r1, #0
   1557c:	push	{r4, r5, r6, r7, lr}
   15580:	sub	sp, sp, #12
   15584:	blt	1565c <flatcc_builder_reserve_table@@Base+0xe4>
   15588:	ldr	r2, [r0, #32]
   1558c:	add	r1, r1, #2
   15590:	mov	r5, r0
   15594:	ldrh	r6, [r2, #28]
   15598:	ldr	r3, [r2, #16]
   1559c:	ldr	r0, [r0, #56]	; 0x38
   155a0:	lsl	r4, r1, #1
   155a4:	add	r6, r3, r6, lsl #1
   155a8:	add	r2, r6, r4
   155ac:	cmp	r2, r0
   155b0:	bhi	1560c <flatcc_builder_reserve_table@@Base+0x94>
   155b4:	ldr	r3, [r5, #52]	; 0x34
   155b8:	adds	r3, r3, r6
   155bc:	streq	r3, [r5, #4]
   155c0:	mvneq	r0, #0
   155c4:	beq	15604 <flatcc_builder_reserve_table@@Base+0x8c>
   155c8:	ldr	r2, [r5, #32]
   155cc:	add	r3, r3, #4
   155d0:	str	r3, [r5, #4]
   155d4:	ldr	r6, [r2, #20]
   155d8:	ldr	r3, [r5, #80]	; 0x50
   155dc:	add	r2, r4, r6
   155e0:	sub	r2, r2, #3
   155e4:	cmp	r2, r3
   155e8:	bhi	15634 <flatcc_builder_reserve_table@@Base+0xbc>
   155ec:	ldr	r3, [r5, #76]	; 0x4c
   155f0:	add	r3, r3, r6
   155f4:	cmp	r3, #0
   155f8:	movne	r0, #0
   155fc:	mvneq	r0, #0
   15600:	str	r3, [r5]
   15604:	add	sp, sp, #12
   15608:	pop	{r4, r5, r6, r7, pc}
   1560c:	mov	r3, #0
   15610:	ldr	r0, [r5, #40]	; 0x28
   15614:	add	r1, r5, #52	; 0x34
   15618:	str	r3, [sp]
   1561c:	mov	r3, #1
   15620:	ldr	r7, [r5, #48]	; 0x30
   15624:	blx	r7
   15628:	cmp	r0, #0
   1562c:	beq	155b4 <flatcc_builder_reserve_table@@Base+0x3c>
   15630:	bl	120c4 <__assert_fail@plt+0x58>
   15634:	mov	r3, #3
   15638:	ldr	r0, [r5, #40]	; 0x28
   1563c:	add	r1, r5, #76	; 0x4c
   15640:	str	r3, [sp]
   15644:	mov	r3, #0
   15648:	ldr	r4, [r5, #48]	; 0x30
   1564c:	blx	r4
   15650:	cmp	r0, #0
   15654:	beq	155ec <flatcc_builder_reserve_table@@Base+0x74>
   15658:	b	15630 <flatcc_builder_reserve_table@@Base+0xb8>
   1565c:	ldr	r3, [pc, #12]	; 15670 <flatcc_builder_reserve_table@@Base+0xf8>
   15660:	ldr	r2, [pc, #12]	; 15674 <flatcc_builder_reserve_table@@Base+0xfc>
   15664:	ldr	r1, [pc, #12]	; 15678 <flatcc_builder_reserve_table@@Base+0x100>
   15668:	ldr	r0, [pc, #12]	; 1567c <flatcc_builder_reserve_table@@Base+0x104>
   1566c:	bl	1206c <__assert_fail@plt>
   15670:	andeq	r9, r1, r4, lsr #5
   15674:	andeq	r0, r0, r9, lsr #8
   15678:	andeq	r9, r1, r4, asr #10
   1567c:	ldrdeq	r9, [r1], -r4

00015680 <flatcc_builder_start_table@@Base>:
   15680:	push	{r4, r5, r6, r7, lr}
   15684:	mov	r5, r1
   15688:	ldr	r1, [r0, #156]	; 0x9c
   1568c:	ldr	r3, [r0, #160]	; 0xa0
   15690:	add	r2, r1, #1
   15694:	cmp	r2, r3
   15698:	sub	sp, sp, #12
   1569c:	mov	r4, r0
   156a0:	str	r2, [r0, #156]	; 0x9c
   156a4:	ble	15714 <flatcc_builder_start_table@@Base+0x94>
   156a8:	ldr	r3, [r0, #176]	; 0xb0
   156ac:	cmp	r3, #0
   156b0:	cmpgt	r2, r3
   156b4:	movgt	r3, #1
   156b8:	movle	r3, #0
   156bc:	bgt	158b4 <flatcc_builder_start_table@@Base+0x234>
   156c0:	add	r1, r1, r1, lsl #3
   156c4:	ldr	r0, [r0, #88]	; 0x58
   156c8:	lsl	r6, r1, #2
   156cc:	add	r2, r6, #36	; 0x24
   156d0:	cmp	r2, r0
   156d4:	bhi	15890 <flatcc_builder_start_table@@Base+0x210>
   156d8:	ldr	r3, [r4, #84]	; 0x54
   156dc:	add	r3, r3, r6
   156e0:	cmp	r3, #0
   156e4:	str	r3, [r4, #32]
   156e8:	beq	158b4 <flatcc_builder_start_table@@Base+0x234>
   156ec:	ldr	r2, [r4, #88]	; 0x58
   156f0:	ldr	r0, [pc, #452]	; 158bc <flatcc_builder_start_table@@Base+0x23c>
   156f4:	ldr	r1, [r4, #176]	; 0xb0
   156f8:	umull	r0, r2, r0, r2
   156fc:	lsr	r2, r2, #3
   15700:	cmp	r2, r1
   15704:	cmpgt	r1, #0
   15708:	str	r2, [r4, #160]	; 0xa0
   1570c:	strgt	r1, [r4, #160]	; 0xa0
   15710:	b	15720 <flatcc_builder_start_table@@Base+0xa0>
   15714:	ldr	r3, [r0, #32]
   15718:	add	r3, r3, #36	; 0x24
   1571c:	str	r3, [r0, #32]
   15720:	ldr	ip, [r4, #20]
   15724:	ldr	lr, [r4, #28]
   15728:	ldrh	r7, [r4, #130]	; 0x82
   1572c:	ldr	r6, [r4, #4]
   15730:	ldr	r0, [r4, #52]	; 0x34
   15734:	add	r2, ip, lr
   15738:	str	ip, [r3, #8]
   1573c:	add	r2, r2, #7
   15740:	mov	ip, #4
   15744:	strh	r7, [r3, #12]
   15748:	sub	r1, r6, r0
   1574c:	strh	ip, [r4, #130]	; 0x82
   15750:	bic	r2, r2, #7
   15754:	mvn	r6, #3
   15758:	mov	ip, #0
   1575c:	str	lr, [r3]
   15760:	str	r6, [r3, #4]
   15764:	str	r2, [r4, #28]
   15768:	str	ip, [r4, #20]
   1576c:	str	r1, [r3, #16]
   15770:	ldr	lr, [r4, #76]	; 0x4c
   15774:	ldr	r2, [r4]
   15778:	add	r5, r5, #2
   1577c:	sub	r2, r2, lr
   15780:	str	r2, [r3, #20]
   15784:	ldr	r2, [r4, #12]
   15788:	lsl	r5, r5, #1
   1578c:	str	r2, [r3, #24]
   15790:	ldrh	r6, [r4, #8]
   15794:	ldr	lr, [pc, #292]	; 158c0 <flatcc_builder_start_table@@Base+0x240>
   15798:	strh	r6, [r3, #28]
   1579c:	add	r6, r1, r6, lsl #1
   157a0:	ldr	r1, [r4, #56]	; 0x38
   157a4:	add	r2, r6, r5
   157a8:	cmp	r2, r1
   157ac:	mov	r1, #3
   157b0:	strh	ip, [r4, #8]
   157b4:	str	lr, [r4, #12]
   157b8:	strh	r1, [r3, #14]
   157bc:	bhi	15840 <flatcc_builder_start_table@@Base+0x1c0>
   157c0:	adds	r6, r6, r0
   157c4:	streq	r6, [r4, #4]
   157c8:	beq	158b4 <flatcc_builder_start_table@@Base+0x234>
   157cc:	ldr	r3, [r4, #32]
   157d0:	add	r6, r6, #4
   157d4:	str	r6, [r4, #4]
   157d8:	ldr	r6, [r3, #20]
   157dc:	sub	r2, r5, #3
   157e0:	ldr	r3, [r4, #80]	; 0x50
   157e4:	add	r2, r2, r6
   157e8:	cmp	r2, r3
   157ec:	bhi	15868 <flatcc_builder_start_table@@Base+0x1e8>
   157f0:	ldr	r3, [r4, #76]	; 0x4c
   157f4:	add	r3, r3, r6
   157f8:	cmp	r3, #0
   157fc:	str	r3, [r4]
   15800:	beq	158b4 <flatcc_builder_start_table@@Base+0x234>
   15804:	ldr	ip, [r4, #28]
   15808:	ldr	r3, [r4, #64]	; 0x40
   1580c:	ldr	r2, [pc, #176]	; 158c4 <flatcc_builder_start_table@@Base+0x244>
   15810:	sub	r3, r3, ip
   15814:	ldr	r1, [r4, #60]	; 0x3c
   15818:	ldr	lr, [r4, #32]
   1581c:	cmp	r3, r2
   15820:	mov	r0, #0
   15824:	add	r1, r1, ip
   15828:	movcs	r3, r2
   1582c:	str	r1, [r4, #16]
   15830:	str	r3, [r4, #24]
   15834:	str	r2, [lr, #4]
   15838:	add	sp, sp, #12
   1583c:	pop	{r4, r5, r6, r7, pc}
   15840:	ldr	r0, [r4, #40]	; 0x28
   15844:	mov	r3, #1
   15848:	str	ip, [sp]
   1584c:	add	r1, r4, #52	; 0x34
   15850:	ldr	r7, [r4, #48]	; 0x30
   15854:	blx	r7
   15858:	cmp	r0, #0
   1585c:	bne	1588c <flatcc_builder_start_table@@Base+0x20c>
   15860:	ldr	r0, [r4, #52]	; 0x34
   15864:	b	157c0 <flatcc_builder_start_table@@Base+0x140>
   15868:	mov	r3, #3
   1586c:	ldr	r0, [r4, #40]	; 0x28
   15870:	add	r1, r4, #76	; 0x4c
   15874:	str	r3, [sp]
   15878:	mov	r3, #0
   1587c:	ldr	r5, [r4, #48]	; 0x30
   15880:	blx	r5
   15884:	cmp	r0, #0
   15888:	beq	157f0 <flatcc_builder_start_table@@Base+0x170>
   1588c:	bl	120c4 <__assert_fail@plt+0x58>
   15890:	mov	r1, #4
   15894:	ldr	r0, [r4, #40]	; 0x28
   15898:	str	r1, [sp]
   1589c:	add	r1, r4, #84	; 0x54
   158a0:	ldr	r7, [r4, #48]	; 0x30
   158a4:	blx	r7
   158a8:	cmp	r0, #0
   158ac:	beq	156d8 <flatcc_builder_start_table@@Base+0x58>
   158b0:	b	1588c <flatcc_builder_start_table@@Base+0x20c>
   158b4:	mvn	r0, #0
   158b8:	b	15838 <flatcc_builder_start_table@@Base+0x1b8>
   158bc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   158c0:	svccs	0x00693b52
   158c4:	strdeq	pc, [r0], -ip

000158c8 <flatcc_builder_create_vtable@@Base>:
   158c8:	push	{r4, r5, r6, lr}
   158cc:	sub	sp, sp, #80	; 0x50
   158d0:	mov	r3, #0
   158d4:	cmp	r2, #0
   158d8:	str	r3, [sp, #8]
   158dc:	str	r3, [sp, #12]
   158e0:	mov	r4, r0
   158e4:	ldr	r3, [r0, #152]	; 0x98
   158e8:	beq	1595c <flatcc_builder_create_vtable@@Base+0x94>
   158ec:	mov	r0, #1
   158f0:	cmp	r3, #0
   158f4:	str	r1, [sp, #16]
   158f8:	str	r2, [sp, #8]
   158fc:	str	r2, [sp, #20]
   15900:	str	r0, [sp, #12]
   15904:	mov	r1, r2
   15908:	beq	15974 <flatcc_builder_create_vtable@@Base+0xac>
   1590c:	ldr	r3, [r4, #136]	; 0x88
   15910:	sub	r5, r3, r2
   15914:	cmp	r3, r5
   15918:	ble	15970 <flatcc_builder_create_vtable@@Base+0xa8>
   1591c:	ldr	r0, [r4, #36]	; 0x24
   15920:	mov	r3, r5
   15924:	str	r2, [sp]
   15928:	add	r1, sp, #16
   1592c:	ldr	r6, [r4, #44]	; 0x2c
   15930:	mov	r2, #1
   15934:	blx	r6
   15938:	cmp	r0, #0
   1593c:	bne	159d8 <flatcc_builder_create_vtable@@Base+0x110>
   15940:	cmp	r5, #0
   15944:	str	r5, [r4, #136]	; 0x88
   15948:	beq	15950 <flatcc_builder_create_vtable@@Base+0x88>
   1594c:	add	r5, r5, #1
   15950:	mov	r0, r5
   15954:	add	sp, sp, #80	; 0x50
   15958:	pop	{r4, r5, r6, pc}
   1595c:	cmp	r3, #0
   15960:	bne	15970 <flatcc_builder_create_vtable@@Base+0xa8>
   15964:	ldr	r2, [r0, #180]	; 0xb4
   15968:	cmp	r2, #0
   1596c:	beq	159cc <flatcc_builder_create_vtable@@Base+0x104>
   15970:	bl	12110 <__assert_fail@plt+0xa4>
   15974:	ldr	r3, [r4, #180]	; 0xb4
   15978:	cmp	r3, #0
   1597c:	bne	1590c <flatcc_builder_create_vtable@@Base+0x44>
   15980:	ldr	r5, [r4, #140]	; 0x8c
   15984:	add	r3, r5, r2
   15988:	cmp	r5, r3
   1598c:	str	r3, [r4, #140]	; 0x8c
   15990:	movle	r2, r0
   15994:	bgt	159ec <flatcc_builder_create_vtable@@Base+0x124>
   15998:	ldr	r0, [r4, #36]	; 0x24
   1599c:	mov	r3, r5
   159a0:	str	r1, [sp]
   159a4:	add	r1, sp, #16
   159a8:	ldr	r4, [r4, #44]	; 0x2c
   159ac:	blx	r4
   159b0:	cmp	r0, #0
   159b4:	beq	1594c <flatcc_builder_create_vtable@@Base+0x84>
   159b8:	ldr	r3, [pc, #48]	; 159f0 <flatcc_builder_create_vtable@@Base+0x128>
   159bc:	ldr	r2, [pc, #48]	; 159f4 <flatcc_builder_create_vtable@@Base+0x12c>
   159c0:	ldr	r1, [pc, #48]	; 159f8 <flatcc_builder_create_vtable@@Base+0x130>
   159c4:	ldr	r0, [pc, #48]	; 159fc <flatcc_builder_create_vtable@@Base+0x134>
   159c8:	bl	1206c <__assert_fail@plt>
   159cc:	ldr	r5, [r4, #140]	; 0x8c
   159d0:	mov	r1, r2
   159d4:	b	15998 <flatcc_builder_create_vtable@@Base+0xd0>
   159d8:	ldr	r3, [pc, #32]	; 15a00 <flatcc_builder_create_vtable@@Base+0x138>
   159dc:	ldr	r2, [pc, #32]	; 15a04 <flatcc_builder_create_vtable@@Base+0x13c>
   159e0:	ldr	r1, [pc, #16]	; 159f8 <flatcc_builder_create_vtable@@Base+0x130>
   159e4:	ldr	r0, [pc, #16]	; 159fc <flatcc_builder_create_vtable@@Base+0x134>
   159e8:	bl	1206c <__assert_fail@plt>
   159ec:	bl	120e8 <__assert_fail@plt+0x7c>
   159f0:	andeq	r8, r1, r4, lsl #28
   159f4:	andeq	r0, r0, r5, lsr #5
   159f8:	andeq	r9, r1, r4, asr #10
   159fc:	andeq	r9, r1, r4, lsl #12
   15a00:	andeq	r8, r1, r0, lsl lr
   15a04:	andeq	r0, r0, fp, lsl #5

00015a08 <flatcc_builder_create_cached_vtable@@Base>:
   15a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a0c:	sub	sp, sp, #28
   15a10:	ldr	r4, [r0, #116]	; 0x74
   15a14:	mov	sl, r3
   15a18:	cmp	r4, #0
   15a1c:	mov	r8, r0
   15a20:	str	r1, [sp, #8]
   15a24:	mov	r7, r2
   15a28:	rsbne	r3, r4, #32
   15a2c:	beq	15b84 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   15a30:	lsr	sl, sl, r3
   15a34:	ldr	r3, [r8, #92]	; 0x5c
   15a38:	adds	r2, r3, sl, lsl #2
   15a3c:	str	r3, [sp, #16]
   15a40:	str	r2, [sp, #20]
   15a44:	beq	15b78 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15a48:	ldr	r5, [r3, sl, lsl #2]
   15a4c:	cmp	r5, #0
   15a50:	beq	15c74 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   15a54:	mov	r3, #0
   15a58:	ldr	fp, [r8, #100]	; 0x64
   15a5c:	ldr	r6, [r8, #68]	; 0x44
   15a60:	mov	r9, r2
   15a64:	str	r3, [sp, #12]
   15a68:	b	15a7c <flatcc_builder_create_cached_vtable@@Base+0x74>
   15a6c:	ldr	r5, [r4, #12]
   15a70:	add	r9, r4, #12
   15a74:	cmp	r5, #0
   15a78:	beq	15acc <flatcc_builder_create_cached_vtable@@Base+0xc4>
   15a7c:	add	r4, fp, r5
   15a80:	ldr	r2, [r4, #8]
   15a84:	add	r1, r6, r2
   15a88:	ldrh	r2, [r6, r2]
   15a8c:	cmp	r2, r7
   15a90:	bne	15a6c <flatcc_builder_create_cached_vtable@@Base+0x64>
   15a94:	mov	r2, r7
   15a98:	ldr	r0, [sp, #8]
   15a9c:	bl	11fc4 <memcmp@plt>
   15aa0:	cmp	r0, #0
   15aa4:	bne	15a6c <flatcc_builder_create_cached_vtable@@Base+0x64>
   15aa8:	ldr	r1, [r4, #4]
   15aac:	ldr	r2, [r8, #152]	; 0x98
   15ab0:	cmp	r1, r2
   15ab4:	beq	15b48 <flatcc_builder_create_cached_vtable@@Base+0x140>
   15ab8:	ldr	r5, [r4, #12]
   15abc:	add	r9, r4, #12
   15ac0:	cmp	r5, #0
   15ac4:	str	r4, [sp, #12]
   15ac8:	bne	15a7c <flatcc_builder_create_cached_vtable@@Base+0x74>
   15acc:	ldr	r4, [r8, #124]	; 0x7c
   15ad0:	ldr	r3, [r8, #104]	; 0x68
   15ad4:	add	r2, r4, #16
   15ad8:	cmp	r2, r3
   15adc:	bhi	15c4c <flatcc_builder_create_cached_vtable@@Base+0x244>
   15ae0:	ldr	r5, [r8, #100]	; 0x64
   15ae4:	adds	r6, r5, r4
   15ae8:	beq	15b78 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15aec:	ldr	r3, [r8, #124]	; 0x7c
   15af0:	ldr	r0, [sp, #16]
   15af4:	ldr	r2, [r8, #152]	; 0x98
   15af8:	add	r1, r3, #16
   15afc:	str	r1, [r8, #124]	; 0x7c
   15b00:	str	r2, [r6, #4]
   15b04:	ldr	r1, [r0, sl, lsl #2]
   15b08:	mov	r2, r7
   15b0c:	str	r1, [r6, #12]
   15b10:	str	r3, [r0, sl, lsl #2]
   15b14:	ldr	r1, [sp, #8]
   15b18:	mov	r0, r8
   15b1c:	bl	158c8 <flatcc_builder_create_vtable@@Base>
   15b20:	cmp	r0, #0
   15b24:	str	r0, [r5, r4]
   15b28:	beq	15b78 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15b2c:	ldr	r3, [sp, #12]
   15b30:	cmp	r3, #0
   15b34:	beq	15c7c <flatcc_builder_create_cached_vtable@@Base+0x274>
   15b38:	ldr	r3, [r3, #8]
   15b3c:	str	r3, [r6, #8]
   15b40:	add	sp, sp, #28
   15b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b48:	ldr	r3, [sp, #20]
   15b4c:	cmp	r3, r9
   15b50:	beq	15b6c <flatcc_builder_create_cached_vtable@@Base+0x164>
   15b54:	ldr	r2, [sp, #16]
   15b58:	ldr	r3, [r4, #12]
   15b5c:	str	r3, [r9]
   15b60:	ldr	r3, [r2, sl, lsl #2]
   15b64:	str	r3, [r4, #12]
   15b68:	str	r5, [r2, sl, lsl #2]
   15b6c:	ldr	r0, [r4]
   15b70:	add	sp, sp, #28
   15b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b78:	mov	r0, #0
   15b7c:	add	sp, sp, #28
   15b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b84:	ldr	r3, [r0, #124]	; 0x7c
   15b88:	add	r5, r0, #92	; 0x5c
   15b8c:	cmp	r3, #0
   15b90:	bne	15d40 <flatcc_builder_create_cached_vtable@@Base+0x338>
   15b94:	ldr	r3, [r0, #104]	; 0x68
   15b98:	cmp	r3, #15
   15b9c:	bls	15c20 <flatcc_builder_create_cached_vtable@@Base+0x218>
   15ba0:	ldr	r3, [r8, #100]	; 0x64
   15ba4:	cmp	r3, #0
   15ba8:	beq	15b78 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15bac:	mov	r2, #16
   15bb0:	mov	r3, #5
   15bb4:	str	r2, [r8, #124]	; 0x7c
   15bb8:	ldr	r0, [r8, #40]	; 0x28
   15bbc:	mov	r1, r5
   15bc0:	str	r3, [sp]
   15bc4:	mov	r2, #256	; 0x100
   15bc8:	ldr	r5, [r8, #48]	; 0x30
   15bcc:	mov	r3, #1
   15bd0:	blx	r5
   15bd4:	cmp	r0, #0
   15bd8:	bne	15b78 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15bdc:	ldr	r1, [r8, #96]	; 0x60
   15be0:	mov	r3, #256	; 0x100
   15be4:	b	15bec <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   15be8:	mov	r3, r2
   15bec:	lsl	r2, r3, #1
   15bf0:	cmp	r2, r1
   15bf4:	bls	15be8 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   15bf8:	lsr	r3, r3, #2
   15bfc:	cmp	r3, #1
   15c00:	bls	15ccc <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15c04:	mov	r2, #1
   15c08:	add	r4, r4, #1
   15c0c:	cmp	r3, r2, lsl r4
   15c10:	bhi	15c08 <flatcc_builder_create_cached_vtable@@Base+0x200>
   15c14:	rsb	r3, r4, #32
   15c18:	str	r4, [r8, #116]	; 0x74
   15c1c:	b	15a30 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15c20:	mov	r3, #6
   15c24:	ldr	r0, [r0, #40]	; 0x28
   15c28:	mov	r2, #16
   15c2c:	str	r3, [sp]
   15c30:	add	r1, r8, #100	; 0x64
   15c34:	ldr	r6, [r8, #48]	; 0x30
   15c38:	mov	r3, r4
   15c3c:	blx	r6
   15c40:	cmp	r0, #0
   15c44:	beq	15ba0 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15c48:	b	15d34 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15c4c:	mov	r3, #6
   15c50:	ldr	r0, [r8, #40]	; 0x28
   15c54:	add	r1, r8, #100	; 0x64
   15c58:	str	r3, [sp]
   15c5c:	mov	r3, #0
   15c60:	ldr	r5, [r8, #48]	; 0x30
   15c64:	blx	r5
   15c68:	cmp	r0, #0
   15c6c:	beq	15ae0 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   15c70:	b	15d34 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15c74:	str	r5, [sp, #12]
   15c78:	b	15acc <flatcc_builder_create_cached_vtable@@Base+0xc4>
   15c7c:	ldr	r3, [r8, #172]	; 0xac
   15c80:	ldr	r9, [r8, #120]	; 0x78
   15c84:	cmp	r3, #0
   15c88:	add	r2, r9, r7
   15c8c:	beq	15cd4 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15c90:	cmp	r3, r2
   15c94:	bcs	15cd4 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15c98:	ldr	r3, [r8, #116]	; 0x74
   15c9c:	cmp	r3, #0
   15ca0:	beq	15b40 <flatcc_builder_create_cached_vtable@@Base+0x138>
   15ca4:	ldr	r6, [sp, #12]
   15ca8:	ldr	r2, [r8, #96]	; 0x60
   15cac:	mov	r1, r6
   15cb0:	ldr	r0, [r8, #92]	; 0x5c
   15cb4:	bl	1203c <memset@plt>
   15cb8:	mov	r3, #16
   15cbc:	ldr	r0, [r5, r4]
   15cc0:	str	r6, [r8, #120]	; 0x78
   15cc4:	str	r3, [r8, #124]	; 0x7c
   15cc8:	b	15b40 <flatcc_builder_create_cached_vtable@@Base+0x138>
   15ccc:	mov	r3, #32
   15cd0:	b	15c18 <flatcc_builder_create_cached_vtable@@Base+0x210>
   15cd4:	ldr	r3, [r8, #72]	; 0x48
   15cd8:	cmp	r3, r2
   15cdc:	bcc	15d10 <flatcc_builder_create_cached_vtable@@Base+0x308>
   15ce0:	ldr	r3, [r8, #68]	; 0x44
   15ce4:	adds	r0, r3, r9
   15ce8:	beq	15d38 <flatcc_builder_create_cached_vtable@@Base+0x330>
   15cec:	ldr	r3, [r8, #120]	; 0x78
   15cf0:	ldr	r1, [sp, #8]
   15cf4:	add	ip, r3, r7
   15cf8:	str	r3, [r6, #8]
   15cfc:	mov	r2, r7
   15d00:	str	ip, [r8, #120]	; 0x78
   15d04:	bl	11fb8 <memcpy@plt>
   15d08:	ldr	r0, [r5, r4]
   15d0c:	b	15b40 <flatcc_builder_create_cached_vtable@@Base+0x138>
   15d10:	mov	r3, #2
   15d14:	ldr	r0, [r8, #40]	; 0x28
   15d18:	add	r1, r8, #68	; 0x44
   15d1c:	str	r3, [sp]
   15d20:	mov	r3, #0
   15d24:	ldr	sl, [r8, #48]	; 0x30
   15d28:	blx	sl
   15d2c:	cmp	r0, #0
   15d30:	beq	15ce0 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   15d34:	bl	120c4 <__assert_fail@plt+0x58>
   15d38:	mvn	r0, #0
   15d3c:	b	15b40 <flatcc_builder_create_cached_vtable@@Base+0x138>
   15d40:	ldr	r3, [pc, #12]	; 15d54 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   15d44:	ldr	r2, [pc, #12]	; 15d58 <flatcc_builder_create_cached_vtable@@Base+0x350>
   15d48:	ldr	r1, [pc, #12]	; 15d5c <flatcc_builder_create_cached_vtable@@Base+0x354>
   15d4c:	ldr	r0, [pc, #12]	; 15d60 <flatcc_builder_create_cached_vtable@@Base+0x358>
   15d50:	bl	1206c <__assert_fail@plt>
   15d54:	andeq	r9, r1, r4, asr #5
   15d58:	andeq	r0, r0, r6, asr r1
   15d5c:	andeq	r9, r1, r4, asr #10
   15d60:	andeq	r9, r1, r0, ror #15

00015d64 <flatcc_builder_create_table@@Base>:
   15d64:	push	{r4, r5, r6, r7, r8, lr}
   15d68:	sub	sp, sp, #88	; 0x58
   15d6c:	ldr	r4, [sp, #116]	; 0x74
   15d70:	ldr	lr, [sp, #120]	; 0x78
   15d74:	cmp	r4, #0
   15d78:	blt	15eb0 <flatcc_builder_create_table@@Base+0x14c>
   15d7c:	mov	r8, r2
   15d80:	ands	r2, lr, #1
   15d84:	beq	15edc <flatcc_builder_create_table@@Base+0x178>
   15d88:	mov	r5, r0
   15d8c:	ldrh	r0, [r0, #128]	; 0x80
   15d90:	cmp	r3, #4
   15d94:	movcc	r3, #4
   15d98:	ldr	ip, [r5, #136]	; 0x88
   15d9c:	cmp	r0, r3
   15da0:	mvn	r0, #3
   15da4:	strhcc	r3, [r5, #128]	; 0x80
   15da8:	sub	r7, ip, r8
   15dac:	sub	r3, r3, #1
   15db0:	sub	r0, r0, r8
   15db4:	and	r7, r7, r3
   15db8:	add	r0, r0, ip
   15dbc:	sub	lr, lr, #1
   15dc0:	sub	r0, r0, r7
   15dc4:	sub	lr, r0, lr
   15dc8:	cmp	r4, #0
   15dcc:	str	lr, [sp, #12]
   15dd0:	beq	15e04 <flatcc_builder_create_table@@Base+0xa0>
   15dd4:	ldr	ip, [sp, #112]	; 0x70
   15dd8:	mvn	r6, #3
   15ddc:	add	r4, ip, r4, lsl #1
   15de0:	sub	r6, r6, r0
   15de4:	ldrh	r3, [ip], #2
   15de8:	sub	lr, r6, r3
   15dec:	ldr	r0, [r1, r3]
   15df0:	cmp	r4, ip
   15df4:	add	r0, r0, lr
   15df8:	str	r0, [r1, r3]
   15dfc:	bne	15de4 <flatcc_builder_create_table@@Base+0x80>
   15e00:	ldr	ip, [r5, #136]	; 0x88
   15e04:	cmp	r8, #0
   15e08:	mov	r3, #4
   15e0c:	mov	r0, #1
   15e10:	str	r3, [sp, #16]
   15e14:	movne	r2, #2
   15e18:	str	r3, [sp, #28]
   15e1c:	addne	r3, r8, r3
   15e20:	str	r0, [sp, #20]
   15e24:	add	lr, sp, #12
   15e28:	strne	r1, [sp, #32]
   15e2c:	strne	r8, [sp, #36]	; 0x24
   15e30:	strne	r3, [sp, #16]
   15e34:	strne	r2, [sp, #20]
   15e38:	movne	r0, #3
   15e3c:	moveq	r0, #2
   15e40:	cmp	r7, #0
   15e44:	str	lr, [sp, #24]
   15e48:	beq	15e74 <flatcc_builder_create_table@@Base+0x110>
   15e4c:	add	r2, r2, #1
   15e50:	add	r1, sp, #88	; 0x58
   15e54:	add	r1, r1, r2, lsl #3
   15e58:	ldr	lr, [pc, #144]	; 15ef0 <flatcc_builder_create_table@@Base+0x18c>
   15e5c:	mov	r2, r0
   15e60:	add	r3, r3, r7
   15e64:	str	r7, [r1, #-68]	; 0xffffffbc
   15e68:	str	r3, [sp, #16]
   15e6c:	str	r0, [sp, #20]
   15e70:	str	lr, [r1, #-72]	; 0xffffffb8
   15e74:	sub	r4, ip, r3
   15e78:	cmp	r4, ip
   15e7c:	bge	15ed8 <flatcc_builder_create_table@@Base+0x174>
   15e80:	ldr	r0, [r5, #36]	; 0x24
   15e84:	add	r1, sp, #24
   15e88:	str	r3, [sp]
   15e8c:	mov	r3, r4
   15e90:	ldr	r6, [r5, #44]	; 0x2c
   15e94:	blx	r6
   15e98:	cmp	r0, #0
   15e9c:	bne	15ec4 <flatcc_builder_create_table@@Base+0x160>
   15ea0:	mov	r0, r4
   15ea4:	str	r4, [r5, #136]	; 0x88
   15ea8:	add	sp, sp, #88	; 0x58
   15eac:	pop	{r4, r5, r6, r7, r8, pc}
   15eb0:	ldr	r3, [pc, #60]	; 15ef4 <flatcc_builder_create_table@@Base+0x190>
   15eb4:	ldr	r2, [pc, #60]	; 15ef8 <flatcc_builder_create_table@@Base+0x194>
   15eb8:	ldr	r1, [pc, #60]	; 15efc <flatcc_builder_create_table@@Base+0x198>
   15ebc:	ldr	r0, [pc, #60]	; 15f00 <flatcc_builder_create_table@@Base+0x19c>
   15ec0:	bl	1206c <__assert_fail@plt>
   15ec4:	ldr	r3, [pc, #56]	; 15f04 <flatcc_builder_create_table@@Base+0x1a0>
   15ec8:	ldr	r2, [pc, #56]	; 15f08 <flatcc_builder_create_table@@Base+0x1a4>
   15ecc:	ldr	r1, [pc, #40]	; 15efc <flatcc_builder_create_table@@Base+0x198>
   15ed0:	ldr	r0, [pc, #52]	; 15f0c <flatcc_builder_create_table@@Base+0x1a8>
   15ed4:	bl	1206c <__assert_fail@plt>
   15ed8:	bl	12110 <__assert_fail@plt+0xa4>
   15edc:	ldr	r3, [pc, #16]	; 15ef4 <flatcc_builder_create_table@@Base+0x190>
   15ee0:	ldr	r2, [pc, #40]	; 15f10 <flatcc_builder_create_table@@Base+0x1ac>
   15ee4:	ldr	r1, [pc, #16]	; 15efc <flatcc_builder_create_table@@Base+0x198>
   15ee8:	ldr	r0, [pc, #36]	; 15f14 <flatcc_builder_create_table@@Base+0x1b0>
   15eec:	bl	1206c <__assert_fail@plt>
   15ef0:	andeq	r8, r1, ip, lsl #29
   15ef4:	ldrdeq	r9, [r1], -r0
   15ef8:	ldrdeq	r0, [r0], -r5
   15efc:	andeq	r9, r1, r4, asr #10
   15f00:	strdeq	r9, [r1], -r0
   15f04:	andeq	r8, r1, r0, lsl lr
   15f08:	andeq	r0, r0, fp, lsl #5
   15f0c:	andeq	r9, r1, r4, lsl #12
   15f10:	ldrdeq	r0, [r0], -fp
   15f14:	andeq	r9, r1, r4, lsl #16

00015f18 <flatcc_builder_check_required_field@@Base>:
   15f18:	ldr	r3, [r0, #32]
   15f1c:	ldrh	r3, [r3, #14]
   15f20:	cmp	r3, #3
   15f24:	bne	15f50 <flatcc_builder_check_required_field@@Base+0x38>
   15f28:	ldrh	r3, [r0, #8]
   15f2c:	cmp	r3, r1
   15f30:	movls	r0, #0
   15f34:	bls	15f4c <flatcc_builder_check_required_field@@Base+0x34>
   15f38:	ldr	r3, [r0, #4]
   15f3c:	lsl	r1, r1, #1
   15f40:	ldrh	r0, [r3, r1]
   15f44:	adds	r0, r0, #0
   15f48:	movne	r0, #1
   15f4c:	bx	lr
   15f50:	push	{r4, lr}
   15f54:	ldr	r3, [pc, #12]	; 15f68 <flatcc_builder_check_required_field@@Base+0x50>
   15f58:	ldr	r2, [pc, #12]	; 15f6c <flatcc_builder_check_required_field@@Base+0x54>
   15f5c:	ldr	r1, [pc, #12]	; 15f70 <flatcc_builder_check_required_field@@Base+0x58>
   15f60:	ldr	r0, [pc, #12]	; 15f74 <flatcc_builder_check_required_field@@Base+0x5c>
   15f64:	bl	1206c <__assert_fail@plt>
   15f68:	andeq	r9, r1, ip, ror #5
   15f6c:	strdeq	r0, [r0], -r8
   15f70:	andeq	r9, r1, r4, asr #10
   15f74:	andeq	r9, r1, r0, lsl r8

00015f78 <flatcc_builder_check_union_field@@Base>:
   15f78:	ldr	r3, [r0, #32]
   15f7c:	ldrh	r3, [r3, #14]
   15f80:	cmp	r3, #3
   15f84:	bne	16000 <flatcc_builder_check_union_field@@Base+0x88>
   15f88:	cmp	r1, #0
   15f8c:	beq	15fd8 <flatcc_builder_check_union_field@@Base+0x60>
   15f90:	ldrh	r3, [r0, #8]
   15f94:	cmp	r3, r1
   15f98:	bls	15fd8 <flatcc_builder_check_union_field@@Base+0x60>
   15f9c:	sub	r1, r1, #-2147483647	; 0x80000001
   15fa0:	ldr	r3, [r0, #4]
   15fa4:	lsl	r1, r1, #1
   15fa8:	ldrh	r2, [r3, r1]
   15fac:	cmp	r2, #0
   15fb0:	beq	15fec <flatcc_builder_check_union_field@@Base+0x74>
   15fb4:	ldr	r0, [r0, #16]
   15fb8:	add	r1, r3, r1
   15fbc:	ldrb	r2, [r0, r2]
   15fc0:	ldrh	r1, [r1, #2]
   15fc4:	cmp	r2, #0
   15fc8:	bne	15fe0 <flatcc_builder_check_union_field@@Base+0x68>
   15fcc:	clz	r0, r1
   15fd0:	lsr	r0, r0, #5
   15fd4:	bx	lr
   15fd8:	mov	r0, #0
   15fdc:	bx	lr
   15fe0:	adds	r0, r1, #0
   15fe4:	movne	r0, #1
   15fe8:	b	15fdc <flatcc_builder_check_union_field@@Base+0x64>
   15fec:	add	r1, r3, r1
   15ff0:	ldrh	r1, [r1, #2]
   15ff4:	clz	r0, r1
   15ff8:	lsr	r0, r0, #5
   15ffc:	bx	lr
   16000:	push	{r4, lr}
   16004:	ldr	r3, [pc, #12]	; 16018 <flatcc_builder_check_union_field@@Base+0xa0>
   16008:	ldr	r2, [pc, #12]	; 1601c <flatcc_builder_check_union_field@@Base+0xa4>
   1600c:	ldr	r1, [pc, #12]	; 16020 <flatcc_builder_check_union_field@@Base+0xa8>
   16010:	ldr	r0, [pc, #12]	; 16024 <flatcc_builder_check_union_field@@Base+0xac>
   16014:	bl	1206c <__assert_fail@plt>
   16018:	andeq	r9, r1, r0, lsl r3
   1601c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16020:	andeq	r9, r1, r4, asr #10
   16024:	andeq	r9, r1, r0, lsl r8

00016028 <flatcc_builder_check_required@@Base>:
   16028:	ldr	r3, [r0, #32]
   1602c:	ldrh	r3, [r3, #14]
   16030:	cmp	r3, #3
   16034:	bne	16098 <flatcc_builder_check_required@@Base+0x70>
   16038:	ldrh	r3, [r0, #8]
   1603c:	cmp	r3, r2
   16040:	movlt	r0, #0
   16044:	blt	16094 <flatcc_builder_check_required@@Base+0x6c>
   16048:	cmp	r2, #0
   1604c:	ble	16090 <flatcc_builder_check_required@@Base+0x68>
   16050:	ldrh	r3, [r1]
   16054:	ldr	ip, [r0, #4]
   16058:	lsl	r3, r3, #1
   1605c:	ldrh	r0, [ip, r3]
   16060:	cmp	r0, #0
   16064:	beq	16094 <flatcc_builder_check_required@@Base+0x6c>
   16068:	add	r2, r1, r2, lsl #1
   1606c:	add	r1, r1, #2
   16070:	b	16088 <flatcc_builder_check_required@@Base+0x60>
   16074:	ldrh	r3, [r1], #2
   16078:	lsl	r3, r3, #1
   1607c:	ldrh	r0, [ip, r3]
   16080:	cmp	r0, #0
   16084:	beq	16094 <flatcc_builder_check_required@@Base+0x6c>
   16088:	cmp	r1, r2
   1608c:	bne	16074 <flatcc_builder_check_required@@Base+0x4c>
   16090:	mov	r0, #1
   16094:	bx	lr
   16098:	push	{r4, lr}
   1609c:	ldr	r3, [pc, #12]	; 160b0 <flatcc_builder_check_required@@Base+0x88>
   160a0:	ldr	r2, [pc, #12]	; 160b4 <flatcc_builder_check_required@@Base+0x8c>
   160a4:	ldr	r1, [pc, #12]	; 160b8 <flatcc_builder_check_required@@Base+0x90>
   160a8:	ldr	r0, [pc, #12]	; 160bc <flatcc_builder_check_required@@Base+0x94>
   160ac:	bl	1206c <__assert_fail@plt>
   160b0:	andeq	r9, r1, r4, lsr r3
   160b4:	andeq	r0, r0, r1, lsl r5
   160b8:	andeq	r9, r1, r4, asr #10
   160bc:	andeq	r9, r1, r0, lsl r8

000160c0 <flatcc_builder_end_table@@Base>:
   160c0:	ldr	r3, [r0, #32]
   160c4:	push	{r4, r5, r6, r7, lr}
   160c8:	sub	sp, sp, #20
   160cc:	ldrh	r3, [r3, #14]
   160d0:	cmp	r3, #3
   160d4:	bne	16258 <flatcc_builder_end_table@@Base+0x198>
   160d8:	ldrh	r5, [r0, #8]
   160dc:	ldr	r3, [r0, #12]
   160e0:	ldr	r1, [pc, #388]	; 1626c <flatcc_builder_end_table@@Base+0x1ac>
   160e4:	add	r5, r5, #2
   160e8:	ldr	r2, [r0, #20]
   160ec:	lsl	r5, r5, #1
   160f0:	add	r2, r2, #4
   160f4:	uxth	r5, r5
   160f8:	eor	r3, r3, r5
   160fc:	uxth	r2, r2
   16100:	mul	r3, r1, r3
   16104:	ldr	ip, [r0, #4]
   16108:	eor	r3, r3, r2
   1610c:	sub	r6, ip, #4
   16110:	mul	r1, r1, r3
   16114:	strh	r2, [ip, #-2]
   16118:	strh	r5, [ip, #-4]
   1611c:	mov	r3, r1
   16120:	str	r1, [r0, #12]
   16124:	mov	r2, r5
   16128:	mov	r1, r6
   1612c:	mov	r4, r0
   16130:	bl	15a08 <flatcc_builder_create_cached_vtable@@Base>
   16134:	subs	r7, r0, #0
   16138:	bne	1614c <flatcc_builder_end_table@@Base+0x8c>
   1613c:	mov	r5, #0
   16140:	mov	r0, r5
   16144:	add	sp, sp, #20
   16148:	pop	{r4, r5, r6, r7, pc}
   1614c:	mov	r2, r5
   16150:	mov	r1, #0
   16154:	mov	r0, r6
   16158:	bl	1203c <memset@plt>
   1615c:	ldr	r3, [r4, #32]
   16160:	ldr	ip, [r4, #76]	; 0x4c
   16164:	ldr	r0, [r4]
   16168:	ldr	r2, [r3, #20]
   1616c:	ldr	r1, [r4, #16]
   16170:	add	ip, ip, r2
   16174:	sub	r0, r0, ip
   16178:	ldrh	r3, [r4, #130]	; 0x82
   1617c:	asr	r0, r0, #1
   16180:	ldr	r2, [r4, #20]
   16184:	str	r0, [sp, #4]
   16188:	str	r7, [sp, #8]
   1618c:	str	ip, [sp]
   16190:	mov	r0, r4
   16194:	bl	15d64 <flatcc_builder_create_table@@Base>
   16198:	subs	r5, r0, #0
   1619c:	beq	1613c <flatcc_builder_end_table@@Base+0x7c>
   161a0:	ldr	r3, [r4, #32]
   161a4:	ldr	r0, [r4, #52]	; 0x34
   161a8:	ldr	ip, [r4, #76]	; 0x4c
   161ac:	ldr	r1, [r3, #24]
   161b0:	ldr	r2, [r4, #20]
   161b4:	str	r1, [r4, #12]
   161b8:	ldrh	lr, [r3, #28]
   161bc:	mov	r1, #0
   161c0:	strh	lr, [r4, #8]
   161c4:	ldr	lr, [r3, #16]
   161c8:	add	r0, r0, lr
   161cc:	str	r0, [r4, #4]
   161d0:	ldr	r3, [r3, #20]
   161d4:	ldr	r0, [r4, #16]
   161d8:	add	r3, ip, r3
   161dc:	str	r3, [r4]
   161e0:	bl	1203c <memset@plt>
   161e4:	ldr	r3, [r4, #32]
   161e8:	ldr	r2, [r4, #64]	; 0x40
   161ec:	ldrh	lr, [r4, #130]	; 0x82
   161f0:	ldr	ip, [r3]
   161f4:	ldr	r1, [r3, #4]
   161f8:	ldrh	r0, [r4, #128]	; 0x80
   161fc:	sub	r2, r2, ip
   16200:	cmp	r2, r1
   16204:	movcs	r2, r1
   16208:	cmp	r0, lr
   1620c:	ldr	r0, [r4, #60]	; 0x3c
   16210:	ldr	r6, [r3, #8]
   16214:	str	r2, [r4, #24]
   16218:	add	r2, r0, ip
   1621c:	str	r2, [r4, #16]
   16220:	str	r6, [r4, #20]
   16224:	ldr	r2, [r4, #156]	; 0x9c
   16228:	str	ip, [r4, #28]
   1622c:	str	r1, [r3, #4]
   16230:	strhcc	lr, [r4, #128]	; 0x80
   16234:	ldrh	r1, [r3, #12]
   16238:	sub	r2, r2, #1
   1623c:	sub	r3, r3, #36	; 0x24
   16240:	mov	r0, r5
   16244:	str	r2, [r4, #156]	; 0x9c
   16248:	strh	r1, [r4, #130]	; 0x82
   1624c:	str	r3, [r4, #32]
   16250:	add	sp, sp, #20
   16254:	pop	{r4, r5, r6, r7, pc}
   16258:	ldr	r3, [pc, #16]	; 16270 <flatcc_builder_end_table@@Base+0x1b0>
   1625c:	ldr	r2, [pc, #16]	; 16274 <flatcc_builder_end_table@@Base+0x1b4>
   16260:	ldr	r1, [pc, #16]	; 16278 <flatcc_builder_end_table@@Base+0x1b8>
   16264:	ldr	r0, [pc, #16]	; 1627c <flatcc_builder_end_table@@Base+0x1bc>
   16268:	bl	1206c <__assert_fail@plt>
   1626c:			; <UNDEFINED> instruction: 0x9e3779b1
   16270:	andeq	r9, r1, r4, asr r3
   16274:	andeq	r0, r0, r5, lsr #10
   16278:	andeq	r9, r1, r4, asr #10
   1627c:	andeq	r9, r1, r0, lsl r8

00016280 <flatcc_builder_create_vector@@Base>:
   16280:	push	{r4, r5, r6, lr}
   16284:	sub	sp, sp, #88	; 0x58
   16288:	mov	r4, r0
   1628c:	ldr	ip, [sp, #108]	; 0x6c
   16290:	ldrh	r0, [sp, #104]	; 0x68
   16294:	cmp	r2, ip
   16298:	bhi	16374 <flatcc_builder_create_vector@@Base+0xf4>
   1629c:	ldrh	ip, [r4, #128]	; 0x80
   162a0:	mul	r3, r3, r2
   162a4:	cmp	r0, #4
   162a8:	movcc	r0, #4
   162ac:	ldr	lr, [r4, #136]	; 0x88
   162b0:	cmp	ip, r0
   162b4:	sub	r6, lr, r3
   162b8:	mov	ip, #4
   162bc:	strhcc	r0, [r4, #128]	; 0x80
   162c0:	str	r2, [sp, #12]
   162c4:	cmp	r3, #0
   162c8:	mov	r2, #1
   162cc:	sub	r0, r0, #1
   162d0:	str	ip, [sp, #16]
   162d4:	str	r2, [sp, #20]
   162d8:	and	r0, r0, r6
   162dc:	movne	r2, #2
   162e0:	str	ip, [sp, #28]
   162e4:	addne	ip, r3, ip
   162e8:	strne	r3, [sp, #36]	; 0x24
   162ec:	add	r5, sp, #12
   162f0:	strne	r1, [sp, #32]
   162f4:	strne	ip, [sp, #16]
   162f8:	strne	r2, [sp, #20]
   162fc:	movne	r3, #3
   16300:	moveq	r3, #2
   16304:	cmp	r0, #0
   16308:	str	r5, [sp, #24]
   1630c:	beq	16338 <flatcc_builder_create_vector@@Base+0xb8>
   16310:	add	r2, r2, #1
   16314:	add	r1, sp, #88	; 0x58
   16318:	add	r1, r1, r2, lsl #3
   1631c:	ldr	r5, [pc, #124]	; 163a0 <flatcc_builder_create_vector@@Base+0x120>
   16320:	mov	r2, r3
   16324:	add	ip, ip, r0
   16328:	str	r0, [r1, #-68]	; 0xffffffbc
   1632c:	str	ip, [sp, #16]
   16330:	str	r3, [sp, #20]
   16334:	str	r5, [r1, #-72]	; 0xffffffb8
   16338:	sub	r5, lr, ip
   1633c:	cmp	lr, r5
   16340:	ble	1639c <flatcc_builder_create_vector@@Base+0x11c>
   16344:	ldr	r0, [r4, #36]	; 0x24
   16348:	mov	r3, r5
   1634c:	str	ip, [sp]
   16350:	add	r1, sp, #24
   16354:	ldr	r6, [r4, #44]	; 0x2c
   16358:	blx	r6
   1635c:	cmp	r0, #0
   16360:	bne	16388 <flatcc_builder_create_vector@@Base+0x108>
   16364:	mov	r0, r5
   16368:	str	r5, [r4, #136]	; 0x88
   1636c:	add	sp, sp, #88	; 0x58
   16370:	pop	{r4, r5, r6, pc}
   16374:	ldr	r3, [pc, #40]	; 163a4 <flatcc_builder_create_vector@@Base+0x124>
   16378:	ldr	r2, [pc, #40]	; 163a8 <flatcc_builder_create_vector@@Base+0x128>
   1637c:	ldr	r1, [pc, #40]	; 163ac <flatcc_builder_create_vector@@Base+0x12c>
   16380:	ldr	r0, [pc, #40]	; 163b0 <flatcc_builder_create_vector@@Base+0x130>
   16384:	bl	1206c <__assert_fail@plt>
   16388:	ldr	r3, [pc, #36]	; 163b4 <flatcc_builder_create_vector@@Base+0x134>
   1638c:	ldr	r2, [pc, #36]	; 163b8 <flatcc_builder_create_vector@@Base+0x138>
   16390:	ldr	r1, [pc, #20]	; 163ac <flatcc_builder_create_vector@@Base+0x12c>
   16394:	ldr	r0, [pc, #32]	; 163bc <flatcc_builder_create_vector@@Base+0x13c>
   16398:	bl	1206c <__assert_fail@plt>
   1639c:	bl	12110 <__assert_fail@plt+0xa4>
   163a0:	andeq	r8, r1, ip, lsl #29
   163a4:	andeq	r9, r1, r0, ror r3
   163a8:	andeq	r0, r0, r5, asr r5
   163ac:	andeq	r9, r1, r4, asr #10
   163b0:	andeq	r9, r1, ip, lsr r8
   163b4:	andeq	r8, r1, r0, lsl lr
   163b8:	andeq	r0, r0, fp, lsl #5
   163bc:	andeq	r9, r1, r4, lsl #12

000163c0 <flatcc_builder_end_vector@@Base>:
   163c0:	ldr	r3, [r0, #32]
   163c4:	push	{r4, r5, r6, lr}
   163c8:	sub	sp, sp, #88	; 0x58
   163cc:	ldrh	r2, [r3, #14]
   163d0:	cmp	r2, #4
   163d4:	bne	16578 <flatcc_builder_end_vector@@Base+0x1b8>
   163d8:	ldr	lr, [r3, #20]
   163dc:	ldr	r2, [r3, #24]
   163e0:	ldr	r1, [r3, #16]
   163e4:	cmp	lr, r2
   163e8:	mov	r4, r0
   163ec:	ldr	r5, [r0, #16]
   163f0:	ldrh	r3, [r0, #130]	; 0x82
   163f4:	bhi	16564 <flatcc_builder_end_vector@@Base+0x1a4>
   163f8:	ldrh	r2, [r0, #128]	; 0x80
   163fc:	mul	r1, r1, lr
   16400:	cmp	r3, #4
   16404:	movcc	r3, #4
   16408:	ldr	ip, [r0, #136]	; 0x88
   1640c:	cmp	r2, r3
   16410:	strhcc	r3, [r0, #128]	; 0x80
   16414:	sub	r2, r3, #1
   16418:	sub	r0, ip, r1
   1641c:	cmp	r1, #0
   16420:	mov	r3, #4
   16424:	and	r0, r0, r2
   16428:	mov	r2, #1
   1642c:	str	r3, [sp, #16]
   16430:	str	r2, [sp, #20]
   16434:	str	r3, [sp, #28]
   16438:	movne	r2, #2
   1643c:	addne	r3, r1, r3
   16440:	strne	r1, [sp, #36]	; 0x24
   16444:	str	lr, [sp, #12]
   16448:	strne	r5, [sp, #32]
   1644c:	add	lr, sp, #12
   16450:	strne	r3, [sp, #16]
   16454:	strne	r2, [sp, #20]
   16458:	movne	r1, #3
   1645c:	moveq	r1, #2
   16460:	cmp	r0, #0
   16464:	str	lr, [sp, #24]
   16468:	beq	16494 <flatcc_builder_end_vector@@Base+0xd4>
   1646c:	add	r2, r2, #1
   16470:	add	lr, sp, #88	; 0x58
   16474:	add	lr, lr, r2, lsl #3
   16478:	ldr	r5, [pc, #268]	; 1658c <flatcc_builder_end_vector@@Base+0x1cc>
   1647c:	mov	r2, r1
   16480:	add	r3, r3, r0
   16484:	str	r0, [lr, #-68]	; 0xffffffbc
   16488:	str	r3, [sp, #16]
   1648c:	str	r1, [sp, #20]
   16490:	str	r5, [lr, #-72]	; 0xffffffb8
   16494:	sub	r5, ip, r3
   16498:	cmp	ip, r5
   1649c:	ble	16560 <flatcc_builder_end_vector@@Base+0x1a0>
   164a0:	ldr	r0, [r4, #36]	; 0x24
   164a4:	add	r1, sp, #24
   164a8:	str	r3, [sp]
   164ac:	mov	r3, r5
   164b0:	ldr	r6, [r4, #44]	; 0x2c
   164b4:	blx	r6
   164b8:	subs	r1, r0, #0
   164bc:	bne	1654c <flatcc_builder_end_vector@@Base+0x18c>
   164c0:	cmp	r5, #0
   164c4:	str	r5, [r4, #136]	; 0x88
   164c8:	beq	16540 <flatcc_builder_end_vector@@Base+0x180>
   164cc:	ldr	r2, [r4, #20]
   164d0:	ldr	r0, [r4, #16]
   164d4:	bl	1203c <memset@plt>
   164d8:	ldr	r3, [r4, #32]
   164dc:	ldr	r2, [r4, #64]	; 0x40
   164e0:	ldrh	lr, [r4, #130]	; 0x82
   164e4:	ldr	ip, [r3]
   164e8:	ldr	r1, [r3, #4]
   164ec:	ldrh	r0, [r4, #128]	; 0x80
   164f0:	sub	r2, r2, ip
   164f4:	cmp	r2, r1
   164f8:	movcs	r2, r1
   164fc:	cmp	r0, lr
   16500:	ldr	r0, [r4, #60]	; 0x3c
   16504:	ldr	r6, [r3, #8]
   16508:	str	r2, [r4, #24]
   1650c:	add	r2, r0, ip
   16510:	str	r2, [r4, #16]
   16514:	str	r6, [r4, #20]
   16518:	ldr	r2, [r4, #156]	; 0x9c
   1651c:	str	ip, [r4, #28]
   16520:	str	r1, [r3, #4]
   16524:	strhcc	lr, [r4, #128]	; 0x80
   16528:	ldrh	r1, [r3, #12]
   1652c:	sub	r2, r2, #1
   16530:	sub	r3, r3, #36	; 0x24
   16534:	str	r2, [r4, #156]	; 0x9c
   16538:	strh	r1, [r4, #130]	; 0x82
   1653c:	str	r3, [r4, #32]
   16540:	mov	r0, r5
   16544:	add	sp, sp, #88	; 0x58
   16548:	pop	{r4, r5, r6, pc}
   1654c:	ldr	r3, [pc, #60]	; 16590 <flatcc_builder_end_vector@@Base+0x1d0>
   16550:	ldr	r2, [pc, #60]	; 16594 <flatcc_builder_end_vector@@Base+0x1d4>
   16554:	ldr	r1, [pc, #60]	; 16598 <flatcc_builder_end_vector@@Base+0x1d8>
   16558:	ldr	r0, [pc, #60]	; 1659c <flatcc_builder_end_vector@@Base+0x1dc>
   1655c:	bl	1206c <__assert_fail@plt>
   16560:	bl	12110 <__assert_fail@plt+0xa4>
   16564:	ldr	r3, [pc, #52]	; 165a0 <flatcc_builder_end_vector@@Base+0x1e0>
   16568:	ldr	r2, [pc, #52]	; 165a4 <flatcc_builder_end_vector@@Base+0x1e4>
   1656c:	ldr	r1, [pc, #36]	; 16598 <flatcc_builder_end_vector@@Base+0x1d8>
   16570:	ldr	r0, [pc, #48]	; 165a8 <flatcc_builder_end_vector@@Base+0x1e8>
   16574:	bl	1206c <__assert_fail@plt>
   16578:	ldr	r3, [pc, #44]	; 165ac <flatcc_builder_end_vector@@Base+0x1ec>
   1657c:	ldr	r2, [pc, #44]	; 165b0 <flatcc_builder_end_vector@@Base+0x1f0>
   16580:	ldr	r1, [pc, #16]	; 16598 <flatcc_builder_end_vector@@Base+0x1d8>
   16584:	ldr	r0, [pc, #40]	; 165b4 <flatcc_builder_end_vector@@Base+0x1f4>
   16588:	bl	1206c <__assert_fail@plt>
   1658c:	andeq	r8, r1, ip, lsl #29
   16590:	andeq	r8, r1, r0, lsl lr
   16594:	andeq	r0, r0, fp, lsl #5
   16598:	andeq	r9, r1, r4, asr #10
   1659c:	andeq	r9, r1, r4, lsl #12
   165a0:	andeq	r9, r1, r0, ror r3
   165a4:	andeq	r0, r0, r5, asr r5
   165a8:	andeq	r9, r1, ip, lsr r8
   165ac:	muleq	r1, r0, r3
   165b0:	andeq	r0, r0, r8, ror r5
   165b4:			; <UNDEFINED> instruction: 0x000196b0

000165b8 <flatcc_builder_vector_count@@Base>:
   165b8:	ldr	r3, [r0, #32]
   165bc:	ldr	r0, [r3, #20]
   165c0:	bx	lr

000165c4 <flatcc_builder_vector_edit@@Base>:
   165c4:	ldr	r0, [r0, #16]
   165c8:	bx	lr

000165cc <flatcc_builder_create_offset_vector_direct@@Base>:
   165cc:	cmn	r2, #-1073741823	; 0xc0000001
   165d0:	bls	165dc <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   165d4:	mov	r0, #0
   165d8:	bx	lr
   165dc:	b	12da0 <flatcc_builder_default_alloc@@Base+0x2fc>

000165e0 <flatcc_builder_end_offset_vector@@Base>:
   165e0:	ldr	r3, [r0, #32]
   165e4:	push	{r4, r5, r6, lr}
   165e8:	ldrh	r2, [r3, #14]
   165ec:	cmp	r2, #5
   165f0:	bne	166a0 <flatcc_builder_end_offset_vector@@Base+0xc0>
   165f4:	ldr	r2, [r3, #20]
   165f8:	cmn	r2, #-1073741823	; 0xc0000001
   165fc:	bls	1660c <flatcc_builder_end_offset_vector@@Base+0x2c>
   16600:	mov	r5, #0
   16604:	mov	r0, r5
   16608:	pop	{r4, r5, r6, pc}
   1660c:	ldr	r1, [r0, #16]
   16610:	mov	r4, r0
   16614:	bl	12da0 <flatcc_builder_default_alloc@@Base+0x2fc>
   16618:	subs	r5, r0, #0
   1661c:	beq	16600 <flatcc_builder_end_offset_vector@@Base+0x20>
   16620:	ldr	r2, [r4, #20]
   16624:	mov	r1, #0
   16628:	ldr	r0, [r4, #16]
   1662c:	bl	1203c <memset@plt>
   16630:	ldr	r3, [r4, #32]
   16634:	ldr	r2, [r4, #64]	; 0x40
   16638:	ldrh	lr, [r4, #130]	; 0x82
   1663c:	ldr	ip, [r3]
   16640:	ldr	r1, [r3, #4]
   16644:	ldrh	r0, [r4, #128]	; 0x80
   16648:	sub	r2, r2, ip
   1664c:	cmp	r2, r1
   16650:	movcs	r2, r1
   16654:	cmp	r0, lr
   16658:	ldr	r0, [r4, #60]	; 0x3c
   1665c:	ldr	r6, [r3, #8]
   16660:	str	r2, [r4, #24]
   16664:	add	r2, r0, ip
   16668:	str	r2, [r4, #16]
   1666c:	str	r6, [r4, #20]
   16670:	ldr	r2, [r4, #156]	; 0x9c
   16674:	str	ip, [r4, #28]
   16678:	str	r1, [r3, #4]
   1667c:	strhcc	lr, [r4, #128]	; 0x80
   16680:	ldrh	r1, [r3, #12]
   16684:	sub	r2, r2, #1
   16688:	sub	r3, r3, #36	; 0x24
   1668c:	str	r2, [r4, #156]	; 0x9c
   16690:	strh	r1, [r4, #130]	; 0x82
   16694:	str	r3, [r4, #32]
   16698:	mov	r0, r5
   1669c:	pop	{r4, r5, r6, pc}
   166a0:	ldr	r3, [pc, #12]	; 166b4 <flatcc_builder_end_offset_vector@@Base+0xd4>
   166a4:	ldr	r2, [pc, #12]	; 166b8 <flatcc_builder_end_offset_vector@@Base+0xd8>
   166a8:	ldr	r1, [pc, #12]	; 166bc <flatcc_builder_end_offset_vector@@Base+0xdc>
   166ac:	ldr	r0, [pc, #12]	; 166c0 <flatcc_builder_end_offset_vector@@Base+0xe0>
   166b0:	bl	1206c <__assert_fail@plt>
   166b4:	andeq	r9, r1, r0, lsl #5
   166b8:	andeq	r0, r0, r8, asr #11
   166bc:	andeq	r9, r1, r4, asr #10
   166c0:	andeq	r9, r1, ip, lsl r7

000166c4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   166c4:	ldr	r2, [r0, #32]
   166c8:	push	{r4, r5, r6, lr}
   166cc:	ldrh	ip, [r2, #14]
   166d0:	cmp	ip, #5
   166d4:	bne	16788 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   166d8:	ldr	r2, [r2, #20]
   166dc:	cmn	r2, #-1073741823	; 0xc0000001
   166e0:	bls	166f0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   166e4:	mov	r5, #0
   166e8:	mov	r0, r5
   166ec:	pop	{r4, r5, r6, pc}
   166f0:	mov	r3, r1
   166f4:	ldr	r1, [r0, #16]
   166f8:	mov	r4, r0
   166fc:	bl	12bb0 <flatcc_builder_default_alloc@@Base+0x10c>
   16700:	subs	r5, r0, #0
   16704:	beq	166e4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   16708:	ldr	r2, [r4, #20]
   1670c:	mov	r1, #0
   16710:	ldr	r0, [r4, #16]
   16714:	bl	1203c <memset@plt>
   16718:	ldr	r3, [r4, #32]
   1671c:	ldr	r2, [r4, #64]	; 0x40
   16720:	ldrh	lr, [r4, #130]	; 0x82
   16724:	ldr	ip, [r3]
   16728:	ldr	r1, [r3, #4]
   1672c:	ldrh	r0, [r4, #128]	; 0x80
   16730:	sub	r2, r2, ip
   16734:	cmp	r2, r1
   16738:	movcs	r2, r1
   1673c:	cmp	r0, lr
   16740:	ldr	r0, [r4, #60]	; 0x3c
   16744:	ldr	r6, [r3, #8]
   16748:	str	r2, [r4, #24]
   1674c:	add	r2, r0, ip
   16750:	str	r2, [r4, #16]
   16754:	str	r6, [r4, #20]
   16758:	ldr	r2, [r4, #156]	; 0x9c
   1675c:	str	ip, [r4, #28]
   16760:	str	r1, [r3, #4]
   16764:	strhcc	lr, [r4, #128]	; 0x80
   16768:	ldrh	r1, [r3, #12]
   1676c:	sub	r2, r2, #1
   16770:	sub	r3, r3, #36	; 0x24
   16774:	str	r2, [r4, #156]	; 0x9c
   16778:	strh	r1, [r4, #130]	; 0x82
   1677c:	str	r3, [r4, #32]
   16780:	mov	r0, r5
   16784:	pop	{r4, r5, r6, pc}
   16788:	ldr	r3, [pc, #12]	; 1679c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   1678c:	ldr	r2, [pc, #12]	; 167a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16790:	ldr	r1, [pc, #12]	; 167a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   16794:	ldr	r0, [pc, #12]	; 167a8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   16798:	bl	1206c <__assert_fail@plt>
   1679c:	andeq	r9, r1, ip, lsr #7
   167a0:	ldrdeq	r0, [r0], -r5
   167a4:	andeq	r9, r1, r4, asr #10
   167a8:	andeq	r9, r1, ip, lsl r7

000167ac <flatcc_builder_offset_vector_edit@@Base>:
   167ac:	ldr	r0, [r0, #16]
   167b0:	bx	lr

000167b4 <flatcc_builder_offset_vector_count@@Base>:
   167b4:	ldr	r3, [r0, #32]
   167b8:	ldr	r0, [r3, #20]
   167bc:	bx	lr

000167c0 <flatcc_builder_create_union_vector@@Base>:
   167c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   167c4:	mov	r6, r0
   167c8:	ldr	r0, [r1, #156]	; 0x9c
   167cc:	ldr	ip, [r1, #160]	; 0xa0
   167d0:	mov	r4, r1
   167d4:	add	r1, r0, #1
   167d8:	cmp	r1, ip
   167dc:	sub	sp, sp, #12
   167e0:	mov	r5, r2
   167e4:	mov	r7, r3
   167e8:	str	r1, [r4, #156]	; 0x9c
   167ec:	ble	16874 <flatcc_builder_create_union_vector@@Base+0xb4>
   167f0:	ldr	r3, [r4, #176]	; 0xb0
   167f4:	cmp	r1, r3
   167f8:	cmpgt	r3, #0
   167fc:	movgt	r3, #1
   16800:	movle	r3, #0
   16804:	bgt	1685c <flatcc_builder_create_union_vector@@Base+0x9c>
   16808:	add	r0, r0, r0, lsl #3
   1680c:	ldr	r1, [r4, #88]	; 0x58
   16810:	lsl	r8, r0, #2
   16814:	add	r2, r8, #36	; 0x24
   16818:	cmp	r2, r1
   1681c:	bhi	16a90 <flatcc_builder_create_union_vector@@Base+0x2d0>
   16820:	ldr	r3, [r4, #84]	; 0x54
   16824:	add	r3, r3, r8
   16828:	cmp	r3, #0
   1682c:	str	r3, [r4, #32]
   16830:	beq	1685c <flatcc_builder_create_union_vector@@Base+0x9c>
   16834:	ldr	r2, [r4, #88]	; 0x58
   16838:	ldr	r0, [pc, #732]	; 16b1c <flatcc_builder_create_union_vector@@Base+0x35c>
   1683c:	ldr	r1, [r4, #176]	; 0xb0
   16840:	umull	r0, r2, r0, r2
   16844:	lsr	r2, r2, #3
   16848:	cmp	r1, #0
   1684c:	cmpgt	r2, r1
   16850:	str	r2, [r4, #160]	; 0xa0
   16854:	strgt	r1, [r4, #160]	; 0xa0
   16858:	b	16880 <flatcc_builder_create_union_vector@@Base+0xc0>
   1685c:	mov	r3, #0
   16860:	mov	r0, r6
   16864:	str	r3, [r6]
   16868:	str	r3, [r6, #4]
   1686c:	add	sp, sp, #12
   16870:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16874:	ldr	r3, [r4, #32]
   16878:	add	r3, r3, #36	; 0x24
   1687c:	str	r3, [r4, #32]
   16880:	ldr	r1, [r4, #20]
   16884:	ldr	ip, [r4, #28]
   16888:	ldrh	r8, [r4, #130]	; 0x82
   1688c:	add	r2, r1, ip
   16890:	mvn	lr, #3
   16894:	add	r2, r2, #7
   16898:	str	r1, [r3, #8]
   1689c:	bic	r2, r2, #7
   168a0:	mov	r0, #4
   168a4:	mov	r1, #0
   168a8:	strh	r8, [r3, #12]
   168ac:	strh	r0, [r4, #130]	; 0x82
   168b0:	stm	r3, {ip, lr}
   168b4:	str	r1, [r4, #20]
   168b8:	str	r2, [r4, #28]
   168bc:	str	r0, [r3, #16]
   168c0:	str	r1, [r3, #20]
   168c4:	ldr	r0, [r4, #64]	; 0x40
   168c8:	ldr	r1, [r4, #60]	; 0x3c
   168cc:	sub	r0, r0, r2
   168d0:	cmp	r0, lr
   168d4:	mov	ip, #5
   168d8:	strh	ip, [r3, #14]
   168dc:	add	r1, r1, r2
   168e0:	strls	r0, [r4, #24]
   168e4:	strhi	lr, [r4, #24]
   168e8:	movhi	r0, lr
   168ec:	mvn	r8, #3
   168f0:	cmn	r7, #-1073741823	; 0xc0000001
   168f4:	str	r1, [r4, #16]
   168f8:	str	r8, [r3, #4]
   168fc:	bhi	16b10 <flatcc_builder_create_union_vector@@Base+0x350>
   16900:	lsl	ip, r7, #2
   16904:	cmp	ip, r0
   16908:	str	r7, [r3, #20]
   1690c:	str	ip, [r4, #20]
   16910:	bcs	16a38 <flatcc_builder_create_union_vector@@Base+0x278>
   16914:	cmp	r1, #0
   16918:	beq	1685c <flatcc_builder_create_union_vector@@Base+0x9c>
   1691c:	ldr	r8, [r4, #20]
   16920:	ldr	r0, [r4, #24]
   16924:	add	r3, r7, r8
   16928:	cmp	r3, r0
   1692c:	str	r3, [r4, #20]
   16930:	bcs	16ab4 <flatcc_builder_create_union_vector@@Base+0x2f4>
   16934:	adds	r8, r1, r8
   16938:	beq	1685c <flatcc_builder_create_union_vector@@Base+0x9c>
   1693c:	cmp	r7, #0
   16940:	movne	r2, r5
   16944:	addne	lr, r2, r7, lsl #3
   16948:	subne	r0, r8, #1
   1694c:	subne	r3, r1, #4
   16950:	beq	16970 <flatcc_builder_create_union_vector@@Base+0x1b0>
   16954:	ldrb	ip, [r2]
   16958:	add	r2, r2, #8
   1695c:	strb	ip, [r0, #1]!
   16960:	ldr	ip, [r2, #-4]
   16964:	cmp	lr, r2
   16968:	str	ip, [r3, #4]!
   1696c:	bne	16954 <flatcc_builder_create_union_vector@@Base+0x194>
   16970:	mov	r3, r8
   16974:	mov	r2, r7
   16978:	mov	r0, r4
   1697c:	bl	12bb0 <flatcc_builder_default_alloc@@Base+0x10c>
   16980:	subs	r5, r0, #0
   16984:	beq	16b14 <flatcc_builder_create_union_vector@@Base+0x354>
   16988:	mvn	r0, #0
   1698c:	mov	r3, #1
   16990:	mov	r2, r7
   16994:	str	r0, [sp, #4]
   16998:	mov	r1, r8
   1699c:	str	r3, [sp]
   169a0:	mov	r0, r4
   169a4:	bl	16280 <flatcc_builder_create_vector@@Base>
   169a8:	mov	r7, r0
   169ac:	ldr	r2, [r4, #20]
   169b0:	mov	r1, #0
   169b4:	ldr	r0, [r4, #16]
   169b8:	bl	1203c <memset@plt>
   169bc:	ldr	r3, [r4, #32]
   169c0:	ldr	r2, [r4, #64]	; 0x40
   169c4:	ldrh	lr, [r4, #130]	; 0x82
   169c8:	ldr	ip, [r3]
   169cc:	ldr	r1, [r3, #4]
   169d0:	ldrh	r0, [r4, #128]	; 0x80
   169d4:	sub	r2, r2, ip
   169d8:	cmp	r2, r1
   169dc:	movcs	r2, r1
   169e0:	cmp	r0, lr
   169e4:	ldr	r0, [r4, #60]	; 0x3c
   169e8:	ldr	r8, [r3, #8]
   169ec:	str	r2, [r4, #24]
   169f0:	add	r2, r0, ip
   169f4:	str	r2, [r4, #16]
   169f8:	str	r8, [r4, #20]
   169fc:	ldr	r2, [r4, #156]	; 0x9c
   16a00:	str	ip, [r4, #28]
   16a04:	str	r1, [r3, #4]
   16a08:	strhcc	lr, [r4, #128]	; 0x80
   16a0c:	ldrh	r1, [r3, #12]
   16a10:	sub	r2, r2, #1
   16a14:	sub	r3, r3, #36	; 0x24
   16a18:	mov	r0, r6
   16a1c:	str	r7, [r6]
   16a20:	str	r5, [r6, #4]
   16a24:	str	r2, [r4, #156]	; 0x9c
   16a28:	strh	r1, [r4, #130]	; 0x82
   16a2c:	str	r3, [r4, #32]
   16a30:	add	sp, sp, #12
   16a34:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16a38:	add	ip, ip, #1
   16a3c:	mov	r3, #1
   16a40:	ldr	r0, [r4, #40]	; 0x28
   16a44:	add	r2, ip, r2
   16a48:	str	r3, [sp]
   16a4c:	add	r1, r4, #60	; 0x3c
   16a50:	ldr	r9, [r4, #48]	; 0x30
   16a54:	blx	r9
   16a58:	cmp	r0, #0
   16a5c:	bne	1685c <flatcc_builder_create_union_vector@@Base+0x9c>
   16a60:	ldr	r2, [r4, #28]
   16a64:	ldr	r3, [r4, #64]	; 0x40
   16a68:	ldr	r1, [r4, #60]	; 0x3c
   16a6c:	sub	r3, r3, r2
   16a70:	ldr	r0, [r4, #32]
   16a74:	cmn	r3, #4
   16a78:	movhi	r3, r8
   16a7c:	add	r1, r1, r2
   16a80:	str	r3, [r4, #24]
   16a84:	str	r1, [r4, #16]
   16a88:	str	r8, [r0, #4]
   16a8c:	b	16914 <flatcc_builder_create_union_vector@@Base+0x154>
   16a90:	mov	r1, #4
   16a94:	ldr	r0, [r4, #40]	; 0x28
   16a98:	str	r1, [sp]
   16a9c:	add	r1, r4, #84	; 0x54
   16aa0:	ldr	r9, [r4, #48]	; 0x30
   16aa4:	blx	r9
   16aa8:	cmp	r0, #0
   16aac:	beq	16820 <flatcc_builder_create_union_vector@@Base+0x60>
   16ab0:	bl	120c4 <__assert_fail@plt+0x58>
   16ab4:	add	r1, r3, #1
   16ab8:	mov	r3, #1
   16abc:	ldr	r0, [r4, #40]	; 0x28
   16ac0:	add	r2, r1, r2
   16ac4:	str	r3, [sp]
   16ac8:	add	r1, r4, #60	; 0x3c
   16acc:	ldr	r9, [r4, #48]	; 0x30
   16ad0:	blx	r9
   16ad4:	cmp	r0, #0
   16ad8:	bne	1685c <flatcc_builder_create_union_vector@@Base+0x9c>
   16adc:	ldr	r2, [r4, #28]
   16ae0:	ldr	r3, [r4, #64]	; 0x40
   16ae4:	ldr	r1, [r4, #60]	; 0x3c
   16ae8:	sub	r3, r3, r2
   16aec:	cmn	r3, #4
   16af0:	mvnhi	r3, #3
   16af4:	str	r3, [r4, #24]
   16af8:	ldr	r3, [r4, #32]
   16afc:	add	r1, r1, r2
   16b00:	mvn	r2, #3
   16b04:	str	r1, [r4, #16]
   16b08:	str	r2, [r3, #4]
   16b0c:	b	16934 <flatcc_builder_create_union_vector@@Base+0x174>
   16b10:	bl	12138 <__assert_fail@plt+0xcc>
   16b14:	mov	r7, r5
   16b18:	b	169ac <flatcc_builder_create_union_vector@@Base+0x1ec>
   16b1c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00016b20 <flatcc_builder_create_union_vector_direct@@Base>:
   16b20:	push	{r4, r5, r6, r7, r8, lr}
   16b24:	sub	sp, sp, #88	; 0x58
   16b28:	mov	r4, r0
   16b2c:	ldr	r5, [sp, #112]	; 0x70
   16b30:	cmn	r5, #-1073741823	; 0xc0000001
   16b34:	bls	16b50 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   16b38:	mov	r3, #0
   16b3c:	mov	r0, r4
   16b40:	str	r3, [r4]
   16b44:	str	r3, [r4, #4]
   16b48:	add	sp, sp, #88	; 0x58
   16b4c:	pop	{r4, r5, r6, r7, r8, pc}
   16b50:	mov	r6, r1
   16b54:	mov	r8, r2
   16b58:	mov	r1, r3
   16b5c:	mov	r0, r6
   16b60:	mov	r3, r2
   16b64:	mov	r2, r5
   16b68:	bl	12bb0 <flatcc_builder_default_alloc@@Base+0x10c>
   16b6c:	subs	r7, r0, #0
   16b70:	beq	16b38 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   16b74:	ldrh	r3, [r6, #128]	; 0x80
   16b78:	ldr	r0, [r6, #136]	; 0x88
   16b7c:	mov	r2, #1
   16b80:	cmp	r3, #3
   16b84:	movls	r3, #4
   16b88:	strhls	r3, [r6, #128]	; 0x80
   16b8c:	sub	r1, r0, r5
   16b90:	cmp	r5, #0
   16b94:	mov	r3, #4
   16b98:	add	ip, sp, #12
   16b9c:	str	r3, [sp, #16]
   16ba0:	str	r2, [sp, #20]
   16ba4:	and	r1, r1, #3
   16ba8:	movne	r2, #2
   16bac:	str	r3, [sp, #28]
   16bb0:	addne	r3, r5, r3
   16bb4:	str	ip, [sp, #24]
   16bb8:	strne	r8, [sp, #32]
   16bbc:	strne	r5, [sp, #36]	; 0x24
   16bc0:	strne	r3, [sp, #16]
   16bc4:	strne	r2, [sp, #20]
   16bc8:	movne	ip, #3
   16bcc:	moveq	ip, #2
   16bd0:	cmp	r1, #0
   16bd4:	str	r5, [sp, #12]
   16bd8:	beq	16c04 <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   16bdc:	add	r2, r2, #1
   16be0:	add	lr, sp, #88	; 0x58
   16be4:	add	lr, lr, r2, lsl #3
   16be8:	ldr	r5, [pc, #108]	; 16c5c <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   16bec:	mov	r2, ip
   16bf0:	add	r3, r3, r1
   16bf4:	str	r1, [lr, #-68]	; 0xffffffbc
   16bf8:	str	r3, [sp, #16]
   16bfc:	str	ip, [sp, #20]
   16c00:	str	r5, [lr, #-72]	; 0xffffffb8
   16c04:	sub	r5, r0, r3
   16c08:	cmp	r0, r5
   16c0c:	ble	16c44 <flatcc_builder_create_union_vector_direct@@Base+0x124>
   16c10:	ldr	r0, [r6, #36]	; 0x24
   16c14:	add	r1, sp, #24
   16c18:	str	r3, [sp]
   16c1c:	mov	r3, r5
   16c20:	ldr	r8, [r6, #44]	; 0x2c
   16c24:	blx	r8
   16c28:	cmp	r0, #0
   16c2c:	bne	16c48 <flatcc_builder_create_union_vector_direct@@Base+0x128>
   16c30:	mov	r0, r4
   16c34:	str	r5, [r6, #136]	; 0x88
   16c38:	stm	r4, {r5, r7}
   16c3c:	add	sp, sp, #88	; 0x58
   16c40:	pop	{r4, r5, r6, r7, r8, pc}
   16c44:	bl	12110 <__assert_fail@plt+0xa4>
   16c48:	ldr	r3, [pc, #16]	; 16c60 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   16c4c:	ldr	r2, [pc, #16]	; 16c64 <flatcc_builder_create_union_vector_direct@@Base+0x144>
   16c50:	ldr	r1, [pc, #16]	; 16c68 <flatcc_builder_create_union_vector_direct@@Base+0x148>
   16c54:	ldr	r0, [pc, #16]	; 16c6c <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   16c58:	bl	1206c <__assert_fail@plt>
   16c5c:	andeq	r8, r1, ip, lsl #29
   16c60:	andeq	r8, r1, r0, lsl lr
   16c64:	andeq	r0, r0, fp, lsl #5
   16c68:	andeq	r9, r1, r4, asr #10
   16c6c:	andeq	r9, r1, r4, lsl #12

00016c70 <flatcc_builder_start_union_vector@@Base>:
   16c70:	ldr	r1, [r0, #156]	; 0x9c
   16c74:	ldr	r3, [r0, #160]	; 0xa0
   16c78:	add	r2, r1, #1
   16c7c:	cmp	r2, r3
   16c80:	push	{r4, r5, r6, lr}
   16c84:	mov	r4, r0
   16c88:	sub	sp, sp, #8
   16c8c:	str	r2, [r0, #156]	; 0x9c
   16c90:	ble	16d00 <flatcc_builder_start_union_vector@@Base+0x90>
   16c94:	ldr	r3, [r0, #176]	; 0xb0
   16c98:	cmp	r3, #0
   16c9c:	cmpgt	r2, r3
   16ca0:	movgt	r3, #1
   16ca4:	movle	r3, #0
   16ca8:	bgt	16dac <flatcc_builder_start_union_vector@@Base+0x13c>
   16cac:	add	r1, r1, r1, lsl #3
   16cb0:	ldr	r0, [r0, #88]	; 0x58
   16cb4:	lsl	r5, r1, #2
   16cb8:	add	r2, r5, #36	; 0x24
   16cbc:	cmp	r2, r0
   16cc0:	bhi	16d88 <flatcc_builder_start_union_vector@@Base+0x118>
   16cc4:	ldr	r3, [r4, #84]	; 0x54
   16cc8:	add	r3, r3, r5
   16ccc:	cmp	r3, #0
   16cd0:	str	r3, [r4, #32]
   16cd4:	beq	16dac <flatcc_builder_start_union_vector@@Base+0x13c>
   16cd8:	ldr	r2, [r4, #88]	; 0x58
   16cdc:	ldr	r0, [pc, #208]	; 16db4 <flatcc_builder_start_union_vector@@Base+0x144>
   16ce0:	ldr	r1, [r4, #176]	; 0xb0
   16ce4:	umull	r0, r2, r0, r2
   16ce8:	lsr	r2, r2, #3
   16cec:	cmp	r1, #0
   16cf0:	cmpgt	r2, r1
   16cf4:	str	r2, [r4, #160]	; 0xa0
   16cf8:	strgt	r1, [r4, #160]	; 0xa0
   16cfc:	b	16d0c <flatcc_builder_start_union_vector@@Base+0x9c>
   16d00:	ldr	r3, [r0, #32]
   16d04:	add	r3, r3, #36	; 0x24
   16d08:	str	r3, [r0, #32]
   16d0c:	ldr	ip, [r4, #20]
   16d10:	ldr	r1, [r4, #28]
   16d14:	ldrh	r5, [r4, #130]	; 0x82
   16d18:	add	r2, ip, r1
   16d1c:	add	r2, r2, #7
   16d20:	str	ip, [r3, #8]
   16d24:	bic	r2, r2, #7
   16d28:	mov	lr, #4
   16d2c:	mov	r0, #0
   16d30:	mov	ip, #8
   16d34:	strh	r5, [r3, #12]
   16d38:	strh	lr, [r4, #130]	; 0x82
   16d3c:	str	r1, [r3]
   16d40:	str	r2, [r4, #28]
   16d44:	str	r0, [r4, #20]
   16d48:	str	r0, [r3, #20]
   16d4c:	str	ip, [r3, #16]
   16d50:	ldr	r1, [r4, #64]	; 0x40
   16d54:	ldr	ip, [r4, #60]	; 0x3c
   16d58:	sub	r1, r1, r2
   16d5c:	mvn	lr, #3
   16d60:	cmp	r1, lr
   16d64:	add	r2, ip, r2
   16d68:	movhi	r1, lr
   16d6c:	mov	ip, #7
   16d70:	strh	ip, [r3, #14]
   16d74:	str	r2, [r4, #16]
   16d78:	str	r1, [r4, #24]
   16d7c:	str	lr, [r3, #4]
   16d80:	add	sp, sp, #8
   16d84:	pop	{r4, r5, r6, pc}
   16d88:	mov	r1, #4
   16d8c:	ldr	r0, [r4, #40]	; 0x28
   16d90:	str	r1, [sp]
   16d94:	add	r1, r4, #84	; 0x54
   16d98:	ldr	r6, [r4, #48]	; 0x30
   16d9c:	blx	r6
   16da0:	cmp	r0, #0
   16da4:	beq	16cc4 <flatcc_builder_start_union_vector@@Base+0x54>
   16da8:	bl	120c4 <__assert_fail@plt+0x58>
   16dac:	mvn	r0, #0
   16db0:	b	16d80 <flatcc_builder_start_union_vector@@Base+0x110>
   16db4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00016db8 <flatcc_builder_end_union_vector@@Base>:
   16db8:	ldr	r3, [r1, #32]
   16dbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   16dc0:	sub	sp, sp, #12
   16dc4:	ldrh	r2, [r3, #14]
   16dc8:	cmp	r2, #7
   16dcc:	bne	16f8c <flatcc_builder_end_union_vector@@Base+0x1d4>
   16dd0:	ldr	r5, [r3, #20]
   16dd4:	ldr	r8, [r1, #20]
   16dd8:	ldr	r3, [r1, #24]
   16ddc:	lsl	r7, r5, #2
   16de0:	add	r2, r7, r5
   16de4:	add	r2, r2, r8
   16de8:	cmp	r2, r3
   16dec:	mov	r4, r1
   16df0:	mov	r6, r0
   16df4:	str	r2, [r1, #20]
   16df8:	bcs	16ed4 <flatcc_builder_end_union_vector@@Base+0x11c>
   16dfc:	ldr	r3, [r1, #16]
   16e00:	adds	r1, r3, r8
   16e04:	beq	16f74 <flatcc_builder_end_union_vector@@Base+0x1bc>
   16e08:	cmp	r5, #0
   16e0c:	add	r7, r1, r7
   16e10:	addne	lr, r3, r5, lsl #3
   16e14:	subne	r0, r7, #1
   16e18:	subne	r2, r1, #4
   16e1c:	beq	16f34 <flatcc_builder_end_union_vector@@Base+0x17c>
   16e20:	ldrb	ip, [r3]
   16e24:	add	r3, r3, #8
   16e28:	strb	ip, [r0, #1]!
   16e2c:	ldr	ip, [r3, #-4]
   16e30:	cmp	lr, r3
   16e34:	str	ip, [r2, #4]!
   16e38:	bne	16e20 <flatcc_builder_end_union_vector@@Base+0x68>
   16e3c:	cmn	r5, #-1073741823	; 0xc0000001
   16e40:	bls	16f34 <flatcc_builder_end_union_vector@@Base+0x17c>
   16e44:	mov	r8, #0
   16e48:	mov	r5, r8
   16e4c:	ldr	r2, [r4, #20]
   16e50:	mov	r1, #0
   16e54:	ldr	r0, [r4, #16]
   16e58:	bl	1203c <memset@plt>
   16e5c:	ldr	r3, [r4, #32]
   16e60:	ldr	r2, [r4, #64]	; 0x40
   16e64:	ldrh	lr, [r4, #130]	; 0x82
   16e68:	ldr	ip, [r3]
   16e6c:	ldr	r1, [r3, #4]
   16e70:	ldrh	r0, [r4, #128]	; 0x80
   16e74:	sub	r2, r2, ip
   16e78:	cmp	r2, r1
   16e7c:	movcs	r2, r1
   16e80:	cmp	r0, lr
   16e84:	ldr	r0, [r4, #60]	; 0x3c
   16e88:	ldr	r7, [r3, #8]
   16e8c:	str	r2, [r4, #24]
   16e90:	add	r2, r0, ip
   16e94:	str	r2, [r4, #16]
   16e98:	str	r7, [r4, #20]
   16e9c:	ldr	r2, [r4, #156]	; 0x9c
   16ea0:	str	ip, [r4, #28]
   16ea4:	str	r1, [r3, #4]
   16ea8:	strhcc	lr, [r4, #128]	; 0x80
   16eac:	ldrh	r1, [r3, #12]
   16eb0:	sub	r2, r2, #1
   16eb4:	sub	r3, r3, #36	; 0x24
   16eb8:	mov	r0, r6
   16ebc:	stm	r6, {r5, r8}
   16ec0:	str	r2, [r4, #156]	; 0x9c
   16ec4:	strh	r1, [r4, #130]	; 0x82
   16ec8:	str	r3, [r4, #32]
   16ecc:	add	sp, sp, #12
   16ed0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ed4:	ldr	r1, [r1, #28]
   16ed8:	mov	r3, #1
   16edc:	add	r1, r1, #1
   16ee0:	ldr	r0, [r4, #40]	; 0x28
   16ee4:	add	r2, r1, r2
   16ee8:	str	r3, [sp]
   16eec:	add	r1, r4, #60	; 0x3c
   16ef0:	ldr	r9, [r4, #48]	; 0x30
   16ef4:	blx	r9
   16ef8:	cmp	r0, #0
   16efc:	bne	16f74 <flatcc_builder_end_union_vector@@Base+0x1bc>
   16f00:	ldr	r1, [r4, #28]
   16f04:	ldr	r2, [r4, #64]	; 0x40
   16f08:	ldr	r3, [r4, #60]	; 0x3c
   16f0c:	sub	r2, r2, r1
   16f10:	cmn	r2, #4
   16f14:	mvnhi	r2, #3
   16f18:	str	r2, [r4, #24]
   16f1c:	ldr	r2, [r4, #32]
   16f20:	add	r3, r3, r1
   16f24:	mvn	r1, #3
   16f28:	str	r3, [r4, #16]
   16f2c:	str	r1, [r2, #4]
   16f30:	b	16e00 <flatcc_builder_end_union_vector@@Base+0x48>
   16f34:	mov	r3, r7
   16f38:	mov	r2, r5
   16f3c:	mov	r0, r4
   16f40:	bl	12bb0 <flatcc_builder_default_alloc@@Base+0x10c>
   16f44:	subs	r8, r0, #0
   16f48:	beq	16e44 <flatcc_builder_end_union_vector@@Base+0x8c>
   16f4c:	mvn	r0, #0
   16f50:	mov	r3, #1
   16f54:	mov	r2, r5
   16f58:	str	r0, [sp, #4]
   16f5c:	mov	r1, r7
   16f60:	str	r3, [sp]
   16f64:	mov	r0, r4
   16f68:	bl	16280 <flatcc_builder_create_vector@@Base>
   16f6c:	mov	r5, r0
   16f70:	b	16e4c <flatcc_builder_end_union_vector@@Base+0x94>
   16f74:	mov	r3, #0
   16f78:	mov	r0, r6
   16f7c:	str	r3, [r6]
   16f80:	str	r3, [r6, #4]
   16f84:	add	sp, sp, #12
   16f88:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16f8c:	ldr	r3, [pc, #12]	; 16fa0 <flatcc_builder_end_union_vector@@Base+0x1e8>
   16f90:	ldr	r2, [pc, #12]	; 16fa4 <flatcc_builder_end_union_vector@@Base+0x1ec>
   16f94:	ldr	r1, [pc, #12]	; 16fa8 <flatcc_builder_end_union_vector@@Base+0x1f0>
   16f98:	ldr	r0, [pc, #12]	; 16fac <flatcc_builder_end_union_vector@@Base+0x1f4>
   16f9c:	bl	1206c <__assert_fail@plt>
   16fa0:	ldrdeq	r9, [r1], -r8
   16fa4:	andeq	r0, r0, r1, asr r6
   16fa8:	andeq	r9, r1, r4, asr #10
   16fac:	andeq	r9, r1, r0, asr r8

00016fb0 <flatcc_builder_union_vector_edit@@Base>:
   16fb0:	ldr	r0, [r0, #16]
   16fb4:	bx	lr

00016fb8 <flatcc_builder_union_vector_count@@Base>:
   16fb8:	ldr	r3, [r0, #32]
   16fbc:	ldr	r0, [r3, #20]
   16fc0:	bx	lr

00016fc4 <flatcc_builder_extend_union_vector@@Base>:
   16fc4:	ldr	ip, [r0, #32]
   16fc8:	push	{r4, r5, r6, r7, lr}
   16fcc:	mov	r4, r0
   16fd0:	ldr	r3, [ip, #20]
   16fd4:	sub	sp, sp, #12
   16fd8:	adds	r3, r1, r3
   16fdc:	movcs	r2, #1
   16fe0:	movcc	r2, #0
   16fe4:	cmn	r3, #-536870911	; 0xe0000001
   16fe8:	movls	r0, #0
   16fec:	movhi	r0, #1
   16ff0:	orrs	r5, r2, r0
   16ff4:	bne	1708c <flatcc_builder_extend_union_vector@@Base+0xc8>
   16ff8:	str	r3, [ip, #20]
   16ffc:	ldr	r6, [r4, #20]
   17000:	ldr	r3, [r4, #24]
   17004:	add	r1, r6, r1, lsl #3
   17008:	cmp	r1, r3
   1700c:	str	r1, [r4, #20]
   17010:	bcs	17024 <flatcc_builder_extend_union_vector@@Base+0x60>
   17014:	ldr	r0, [r4, #16]
   17018:	add	r0, r0, r6
   1701c:	add	sp, sp, #12
   17020:	pop	{r4, r5, r6, r7, pc}
   17024:	ldr	r2, [r4, #28]
   17028:	mov	r3, #1
   1702c:	add	r2, r2, #1
   17030:	ldr	r0, [r4, #40]	; 0x28
   17034:	add	r2, r2, r1
   17038:	str	r3, [sp]
   1703c:	add	r1, r4, #60	; 0x3c
   17040:	ldr	r7, [r4, #48]	; 0x30
   17044:	blx	r7
   17048:	cmp	r0, #0
   1704c:	bne	17084 <flatcc_builder_extend_union_vector@@Base+0xc0>
   17050:	ldr	r2, [r4, #28]
   17054:	ldr	r3, [r4, #64]	; 0x40
   17058:	ldr	r0, [r4, #60]	; 0x3c
   1705c:	sub	r3, r3, r2
   17060:	cmn	r3, #4
   17064:	mvnhi	r3, #3
   17068:	str	r3, [r4, #24]
   1706c:	ldr	r3, [r4, #32]
   17070:	add	r0, r0, r2
   17074:	mvn	r2, #3
   17078:	str	r0, [r4, #16]
   1707c:	str	r2, [r3, #4]
   17080:	b	17018 <flatcc_builder_extend_union_vector@@Base+0x54>
   17084:	mov	r0, r5
   17088:	b	1701c <flatcc_builder_extend_union_vector@@Base+0x58>
   1708c:	bl	12138 <__assert_fail@plt+0xcc>

00017090 <flatcc_builder_truncate_union_vector@@Base>:
   17090:	ldr	r3, [r0, #32]
   17094:	push	{r4, lr}
   17098:	ldrh	r2, [r3, #14]
   1709c:	cmp	r2, #7
   170a0:	bne	170e4 <flatcc_builder_truncate_union_vector@@Base+0x54>
   170a4:	ldr	ip, [r3, #20]
   170a8:	cmp	ip, r1
   170ac:	bcc	170f8 <flatcc_builder_truncate_union_vector@@Base+0x68>
   170b0:	ldr	r2, [r3, #16]
   170b4:	sub	ip, ip, r1
   170b8:	str	ip, [r3, #20]
   170bc:	mul	r2, r2, r1
   170c0:	ldr	r3, [r0, #20]
   170c4:	ldr	r1, [r0, #16]
   170c8:	sub	r3, r3, r2
   170cc:	str	r3, [r0, #20]
   170d0:	add	r0, r1, r3
   170d4:	mov	r1, #0
   170d8:	bl	1203c <memset@plt>
   170dc:	mov	r0, #0
   170e0:	pop	{r4, pc}
   170e4:	ldr	r3, [pc, #32]	; 1710c <flatcc_builder_truncate_union_vector@@Base+0x7c>
   170e8:	ldr	r2, [pc, #32]	; 17110 <flatcc_builder_truncate_union_vector@@Base+0x80>
   170ec:	ldr	r1, [pc, #32]	; 17114 <flatcc_builder_truncate_union_vector@@Base+0x84>
   170f0:	ldr	r0, [pc, #32]	; 17118 <flatcc_builder_truncate_union_vector@@Base+0x88>
   170f4:	bl	1206c <__assert_fail@plt>
   170f8:	ldr	r3, [pc, #12]	; 1710c <flatcc_builder_truncate_union_vector@@Base+0x7c>
   170fc:	ldr	r2, [pc, #24]	; 1711c <flatcc_builder_truncate_union_vector@@Base+0x8c>
   17100:	ldr	r1, [pc, #12]	; 17114 <flatcc_builder_truncate_union_vector@@Base+0x84>
   17104:	ldr	r0, [pc, #20]	; 17120 <flatcc_builder_truncate_union_vector@@Base+0x90>
   17108:	bl	1206c <__assert_fail@plt>
   1710c:	strdeq	r9, [r1], -r8
   17110:	andeq	r0, r0, r1, lsl #13
   17114:	andeq	r9, r1, r4, asr #10
   17118:	andeq	r9, r1, r0, asr r8
   1711c:	andeq	r0, r0, r2, lsl #13
   17120:	andeq	r9, r1, r4, ror r7

00017124 <flatcc_builder_union_vector_push@@Base>:
   17124:	push	{r4, r5, r6, r7, lr}
   17128:	mov	r4, r0
   1712c:	ldr	r0, [r0, #32]
   17130:	sub	sp, sp, #20
   17134:	add	r5, sp, #8
   17138:	ldrh	r3, [r0, #14]
   1713c:	stm	r5, {r1, r2}
   17140:	cmp	r3, #7
   17144:	bne	17208 <flatcc_builder_union_vector_push@@Base+0xe4>
   17148:	ldr	r3, [r0, #20]
   1714c:	cmn	r3, #-536870911	; 0xe0000001
   17150:	beq	171f8 <flatcc_builder_union_vector_push@@Base+0xd4>
   17154:	add	r3, r3, #1
   17158:	str	r3, [r0, #20]
   1715c:	ldr	r6, [r4, #20]
   17160:	ldr	r2, [r4, #24]
   17164:	add	r3, r6, #8
   17168:	cmp	r3, r2
   1716c:	str	r3, [r4, #20]
   17170:	bcs	17198 <flatcc_builder_union_vector_push@@Base+0x74>
   17174:	ldr	r3, [r4, #16]
   17178:	adds	r3, r3, r6
   1717c:	movne	r2, r3
   17180:	ldmne	r5, {r0, r1}
   17184:	moveq	r2, r3
   17188:	stmne	r3, {r0, r1}
   1718c:	mov	r0, r2
   17190:	add	sp, sp, #20
   17194:	pop	{r4, r5, r6, r7, pc}
   17198:	ldr	r2, [r4, #28]
   1719c:	mov	r3, #1
   171a0:	add	r2, r6, r2
   171a4:	ldr	r0, [r4, #40]	; 0x28
   171a8:	add	r2, r2, #9
   171ac:	str	r3, [sp]
   171b0:	add	r1, r4, #60	; 0x3c
   171b4:	ldr	r7, [r4, #48]	; 0x30
   171b8:	blx	r7
   171bc:	cmp	r0, #0
   171c0:	bne	171f8 <flatcc_builder_union_vector_push@@Base+0xd4>
   171c4:	ldr	r1, [r4, #28]
   171c8:	ldr	r2, [r4, #64]	; 0x40
   171cc:	ldr	r3, [r4, #60]	; 0x3c
   171d0:	sub	r2, r2, r1
   171d4:	cmn	r2, #4
   171d8:	mvnhi	r2, #3
   171dc:	str	r2, [r4, #24]
   171e0:	ldr	r2, [r4, #32]
   171e4:	add	r3, r3, r1
   171e8:	mvn	r1, #3
   171ec:	str	r3, [r4, #16]
   171f0:	str	r1, [r2, #4]
   171f4:	b	17178 <flatcc_builder_union_vector_push@@Base+0x54>
   171f8:	mov	r2, #0
   171fc:	mov	r0, r2
   17200:	add	sp, sp, #20
   17204:	pop	{r4, r5, r6, r7, pc}
   17208:	ldr	r3, [pc, #12]	; 1721c <flatcc_builder_union_vector_push@@Base+0xf8>
   1720c:	ldr	r2, [pc, #12]	; 17220 <flatcc_builder_union_vector_push@@Base+0xfc>
   17210:	ldr	r1, [pc, #12]	; 17224 <flatcc_builder_union_vector_push@@Base+0x100>
   17214:	ldr	r0, [pc, #12]	; 17228 <flatcc_builder_union_vector_push@@Base+0x104>
   17218:	bl	1206c <__assert_fail@plt>
   1721c:	andeq	r9, r1, r0, lsr #8
   17220:	andeq	r0, r0, sp, lsl #13
   17224:	andeq	r9, r1, r4, asr #10
   17228:	andeq	r9, r1, r0, asr r8

0001722c <flatcc_builder_append_union_vector@@Base>:
   1722c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17230:	mov	r5, r0
   17234:	ldr	r0, [r0, #32]
   17238:	sub	sp, sp, #12
   1723c:	ldrh	r3, [r0, #14]
   17240:	cmp	r3, #7
   17244:	bne	17328 <flatcc_builder_append_union_vector@@Base+0xfc>
   17248:	mov	r7, r1
   1724c:	ldr	r1, [r0, #20]
   17250:	adds	r1, r2, r1
   17254:	movcs	r4, #1
   17258:	movcc	r4, #0
   1725c:	cmn	r1, #-536870911	; 0xe0000001
   17260:	movls	r3, #0
   17264:	movhi	r3, #1
   17268:	orrs	r4, r4, r3
   1726c:	bne	17324 <flatcc_builder_append_union_vector@@Base+0xf8>
   17270:	str	r1, [r0, #20]
   17274:	ldr	r8, [r5, #20]
   17278:	lsl	r6, r2, #3
   1727c:	ldr	r3, [r5, #24]
   17280:	add	r1, r6, r8
   17284:	cmp	r1, r3
   17288:	str	r1, [r5, #20]
   1728c:	bcs	172bc <flatcc_builder_append_union_vector@@Base+0x90>
   17290:	ldr	r3, [r5, #16]
   17294:	adds	r3, r3, r8
   17298:	beq	172b0 <flatcc_builder_append_union_vector@@Base+0x84>
   1729c:	mov	r0, r3
   172a0:	mov	r2, r6
   172a4:	mov	r1, r7
   172a8:	bl	11fb8 <memcpy@plt>
   172ac:	mov	r3, r0
   172b0:	mov	r0, r3
   172b4:	add	sp, sp, #12
   172b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   172bc:	ldr	r2, [r5, #28]
   172c0:	mov	r3, #1
   172c4:	add	r2, r2, #1
   172c8:	ldr	r0, [r5, #40]	; 0x28
   172cc:	add	r2, r2, r1
   172d0:	str	r3, [sp]
   172d4:	add	r1, r5, #60	; 0x3c
   172d8:	ldr	r9, [r5, #48]	; 0x30
   172dc:	blx	r9
   172e0:	cmp	r0, #0
   172e4:	bne	1731c <flatcc_builder_append_union_vector@@Base+0xf0>
   172e8:	ldr	r1, [r5, #28]
   172ec:	ldr	r2, [r5, #64]	; 0x40
   172f0:	ldr	r3, [r5, #60]	; 0x3c
   172f4:	sub	r2, r2, r1
   172f8:	cmn	r2, #4
   172fc:	mvnhi	r2, #3
   17300:	str	r2, [r5, #24]
   17304:	ldr	r2, [r5, #32]
   17308:	add	r3, r3, r1
   1730c:	mvn	r1, #3
   17310:	str	r3, [r5, #16]
   17314:	str	r1, [r2, #4]
   17318:	b	17294 <flatcc_builder_append_union_vector@@Base+0x68>
   1731c:	mov	r3, r4
   17320:	b	172b0 <flatcc_builder_append_union_vector@@Base+0x84>
   17324:	bl	12138 <__assert_fail@plt+0xcc>
   17328:	ldr	r3, [pc, #12]	; 1733c <flatcc_builder_append_union_vector@@Base+0x110>
   1732c:	ldr	r2, [pc, #12]	; 17340 <flatcc_builder_append_union_vector@@Base+0x114>
   17330:	ldr	r1, [pc, #12]	; 17344 <flatcc_builder_append_union_vector@@Base+0x118>
   17334:	ldr	r0, [pc, #12]	; 17348 <flatcc_builder_append_union_vector@@Base+0x11c>
   17338:	bl	1206c <__assert_fail@plt>
   1733c:	andeq	r9, r1, r4, asr #8
   17340:	muleq	r0, ip, r6
   17344:	andeq	r9, r1, r4, asr #10
   17348:	andeq	r9, r1, r0, asr r8

0001734c <flatcc_builder_create_string@@Base>:
   1734c:	push	{r4, r5, r6, lr}
   17350:	sub	sp, sp, #88	; 0x58
   17354:	ldr	lr, [r0, #136]	; 0x88
   17358:	mov	r4, r0
   1735c:	add	r0, sp, #88	; 0x58
   17360:	cmp	r2, #0
   17364:	sub	r3, lr, r2
   17368:	str	r2, [r0, #-76]!	; 0xffffffb4
   1736c:	sub	r3, r3, #1
   17370:	str	r0, [sp, #24]
   17374:	moveq	r0, #1
   17378:	strne	r1, [sp, #32]
   1737c:	mov	ip, #4
   17380:	moveq	r1, r0
   17384:	movne	r1, #2
   17388:	and	r3, r3, #3
   1738c:	str	ip, [sp, #28]
   17390:	add	r3, r3, #1
   17394:	addne	ip, r2, ip
   17398:	add	r1, r1, #1
   1739c:	add	ip, ip, r3
   173a0:	add	r0, sp, #88	; 0x58
   173a4:	add	r1, r0, r1, lsl #3
   173a8:	sub	r5, lr, ip
   173ac:	ldr	r0, [pc, #104]	; 1741c <flatcc_builder_create_string@@Base+0xd0>
   173b0:	strne	r2, [sp, #36]	; 0x24
   173b4:	moveq	r2, #2
   173b8:	movne	r2, #3
   173bc:	cmp	lr, r5
   173c0:	str	r3, [r1, #-68]	; 0xffffffbc
   173c4:	str	ip, [sp, #16]
   173c8:	str	r2, [sp, #20]
   173cc:	str	r0, [r1, #-72]	; 0xffffffb8
   173d0:	ble	17404 <flatcc_builder_create_string@@Base+0xb8>
   173d4:	ldr	r0, [r4, #36]	; 0x24
   173d8:	mov	r3, r5
   173dc:	str	ip, [sp]
   173e0:	add	r1, sp, #24
   173e4:	ldr	r6, [r4, #44]	; 0x2c
   173e8:	blx	r6
   173ec:	cmp	r0, #0
   173f0:	bne	17408 <flatcc_builder_create_string@@Base+0xbc>
   173f4:	mov	r0, r5
   173f8:	str	r5, [r4, #136]	; 0x88
   173fc:	add	sp, sp, #88	; 0x58
   17400:	pop	{r4, r5, r6, pc}
   17404:	bl	12110 <__assert_fail@plt+0xa4>
   17408:	ldr	r3, [pc, #16]	; 17420 <flatcc_builder_create_string@@Base+0xd4>
   1740c:	ldr	r2, [pc, #16]	; 17424 <flatcc_builder_create_string@@Base+0xd8>
   17410:	ldr	r1, [pc, #16]	; 17428 <flatcc_builder_create_string@@Base+0xdc>
   17414:	ldr	r0, [pc, #16]	; 1742c <flatcc_builder_create_string@@Base+0xe0>
   17418:	bl	1206c <__assert_fail@plt>
   1741c:	andeq	r8, r1, ip, lsl #29
   17420:	andeq	r8, r1, r0, lsl lr
   17424:	andeq	r0, r0, fp, lsl #5
   17428:	andeq	r9, r1, r4, asr #10
   1742c:	andeq	r9, r1, r4, lsl #12

00017430 <flatcc_builder_create_string_str@@Base>:
   17430:	push	{r4, r5, r6, lr}
   17434:	mov	r4, r0
   17438:	sub	sp, sp, #88	; 0x58
   1743c:	mov	r0, r1
   17440:	mov	r5, r1
   17444:	bl	12024 <strlen@plt>
   17448:	ldr	lr, [r4, #136]	; 0x88
   1744c:	add	r2, sp, #88	; 0x58
   17450:	sub	r3, lr, #1
   17454:	mov	ip, #4
   17458:	str	ip, [sp, #28]
   1745c:	cmp	r0, #0
   17460:	str	r0, [r2, #-76]!	; 0xffffffb4
   17464:	sub	r3, r3, r0
   17468:	str	r2, [sp, #24]
   1746c:	moveq	r2, #1
   17470:	moveq	r1, r2
   17474:	movne	r1, #2
   17478:	and	r3, r3, #3
   1747c:	addne	ip, r0, ip
   17480:	add	r3, r3, #1
   17484:	add	r1, r1, #1
   17488:	strne	r0, [sp, #36]	; 0x24
   1748c:	add	ip, ip, r3
   17490:	add	r0, sp, #88	; 0x58
   17494:	strne	r5, [sp, #32]
   17498:	add	r1, r0, r1, lsl #3
   1749c:	sub	r5, lr, ip
   174a0:	ldr	r0, [pc, #100]	; 1750c <flatcc_builder_create_string_str@@Base+0xdc>
   174a4:	movne	r2, #3
   174a8:	moveq	r2, #2
   174ac:	cmp	lr, r5
   174b0:	str	r3, [r1, #-68]	; 0xffffffbc
   174b4:	str	ip, [sp, #16]
   174b8:	str	r2, [sp, #20]
   174bc:	str	r0, [r1, #-72]	; 0xffffffb8
   174c0:	ble	174f4 <flatcc_builder_create_string_str@@Base+0xc4>
   174c4:	ldr	r0, [r4, #36]	; 0x24
   174c8:	mov	r3, r5
   174cc:	str	ip, [sp]
   174d0:	add	r1, sp, #24
   174d4:	ldr	r6, [r4, #44]	; 0x2c
   174d8:	blx	r6
   174dc:	cmp	r0, #0
   174e0:	bne	174f8 <flatcc_builder_create_string_str@@Base+0xc8>
   174e4:	mov	r0, r5
   174e8:	str	r5, [r4, #136]	; 0x88
   174ec:	add	sp, sp, #88	; 0x58
   174f0:	pop	{r4, r5, r6, pc}
   174f4:	bl	12110 <__assert_fail@plt+0xa4>
   174f8:	ldr	r3, [pc, #16]	; 17510 <flatcc_builder_create_string_str@@Base+0xe0>
   174fc:	ldr	r2, [pc, #16]	; 17514 <flatcc_builder_create_string_str@@Base+0xe4>
   17500:	ldr	r1, [pc, #16]	; 17518 <flatcc_builder_create_string_str@@Base+0xe8>
   17504:	ldr	r0, [pc, #16]	; 1751c <flatcc_builder_create_string_str@@Base+0xec>
   17508:	bl	1206c <__assert_fail@plt>
   1750c:	andeq	r8, r1, ip, lsl #29
   17510:	andeq	r8, r1, r0, lsl lr
   17514:	andeq	r0, r0, fp, lsl #5
   17518:	andeq	r9, r1, r4, asr #10
   1751c:	andeq	r9, r1, r4, lsl #12

00017520 <flatcc_builder_create_string_strn@@Base>:
   17520:	push	{r4, r5, r6, lr}
   17524:	mov	r6, r1
   17528:	sub	sp, sp, #88	; 0x58
   1752c:	mov	r4, r0
   17530:	mov	r1, #0
   17534:	mov	r0, r6
   17538:	mov	r5, r2
   1753c:	bl	12048 <memchr@plt>
   17540:	mov	ip, #4
   17544:	mov	r1, #1
   17548:	add	r2, sp, #88	; 0x58
   1754c:	str	ip, [sp, #28]
   17550:	add	lr, sp, #88	; 0x58
   17554:	cmp	r0, #0
   17558:	subne	r5, r0, r6
   1755c:	ldr	r0, [r4, #136]	; 0x88
   17560:	cmp	r5, #0
   17564:	sub	r3, r0, #1
   17568:	sub	r3, r3, r5
   1756c:	movne	r1, #2
   17570:	and	r3, r3, #3
   17574:	addne	ip, r5, ip
   17578:	add	r3, r3, #1
   1757c:	add	r1, r1, #1
   17580:	add	ip, r3, ip
   17584:	str	r5, [r2, #-76]!	; 0xffffffb4
   17588:	strne	r5, [sp, #36]	; 0x24
   1758c:	add	r1, lr, r1, lsl #3
   17590:	sub	r5, r0, ip
   17594:	ldr	lr, [pc, #108]	; 17608 <flatcc_builder_create_string_strn@@Base+0xe8>
   17598:	str	r2, [sp, #24]
   1759c:	strne	r6, [sp, #32]
   175a0:	movne	r2, #3
   175a4:	moveq	r2, #2
   175a8:	cmp	r0, r5
   175ac:	str	r3, [r1, #-68]	; 0xffffffbc
   175b0:	str	ip, [sp, #16]
   175b4:	str	r2, [sp, #20]
   175b8:	str	lr, [r1, #-72]	; 0xffffffb8
   175bc:	ble	175f0 <flatcc_builder_create_string_strn@@Base+0xd0>
   175c0:	ldr	r0, [r4, #36]	; 0x24
   175c4:	mov	r3, r5
   175c8:	str	ip, [sp]
   175cc:	add	r1, sp, #24
   175d0:	ldr	r6, [r4, #44]	; 0x2c
   175d4:	blx	r6
   175d8:	cmp	r0, #0
   175dc:	bne	175f4 <flatcc_builder_create_string_strn@@Base+0xd4>
   175e0:	mov	r0, r5
   175e4:	str	r5, [r4, #136]	; 0x88
   175e8:	add	sp, sp, #88	; 0x58
   175ec:	pop	{r4, r5, r6, pc}
   175f0:	bl	12110 <__assert_fail@plt+0xa4>
   175f4:	ldr	r3, [pc, #16]	; 1760c <flatcc_builder_create_string_strn@@Base+0xec>
   175f8:	ldr	r2, [pc, #16]	; 17610 <flatcc_builder_create_string_strn@@Base+0xf0>
   175fc:	ldr	r1, [pc, #16]	; 17614 <flatcc_builder_create_string_strn@@Base+0xf4>
   17600:	ldr	r0, [pc, #16]	; 17618 <flatcc_builder_create_string_strn@@Base+0xf8>
   17604:	bl	1206c <__assert_fail@plt>
   17608:	andeq	r8, r1, ip, lsl #29
   1760c:	andeq	r8, r1, r0, lsl lr
   17610:	andeq	r0, r0, fp, lsl #5
   17614:	andeq	r9, r1, r4, asr #10
   17618:	andeq	r9, r1, r4, lsl #12

0001761c <flatcc_builder_end_string@@Base>:
   1761c:	ldr	r3, [r0, #32]
   17620:	push	{r4, r5, r6, lr}
   17624:	sub	sp, sp, #88	; 0x58
   17628:	ldrh	r2, [r3, #14]
   1762c:	cmp	r2, #6
   17630:	bne	1779c <flatcc_builder_end_string@@Base+0x180>
   17634:	ldr	r2, [r3, #20]
   17638:	ldr	r3, [r0, #20]
   1763c:	mov	r4, r0
   17640:	cmp	r2, r3
   17644:	bne	17788 <flatcc_builder_end_string@@Base+0x16c>
   17648:	ldr	r0, [r0, #136]	; 0x88
   1764c:	add	r1, sp, #88	; 0x58
   17650:	sub	r3, r0, #1
   17654:	cmp	r2, #0
   17658:	sub	r3, r3, r2
   1765c:	str	r2, [r1, #-76]!	; 0xffffffb4
   17660:	mov	ip, #4
   17664:	str	r1, [sp, #24]
   17668:	ldr	lr, [r4, #16]
   1766c:	mov	r1, #1
   17670:	and	r3, r3, #3
   17674:	movne	r1, #2
   17678:	str	ip, [sp, #28]
   1767c:	add	r3, r3, #1
   17680:	addne	ip, r2, ip
   17684:	add	r1, r1, #1
   17688:	strne	lr, [sp, #32]
   1768c:	add	ip, ip, r3
   17690:	add	lr, sp, #88	; 0x58
   17694:	add	r1, lr, r1, lsl #3
   17698:	sub	r5, r0, ip
   1769c:	ldr	lr, [pc, #268]	; 177b0 <flatcc_builder_end_string@@Base+0x194>
   176a0:	strne	r2, [sp, #36]	; 0x24
   176a4:	moveq	r2, #2
   176a8:	movne	r2, #3
   176ac:	cmp	r0, r5
   176b0:	str	r3, [r1, #-68]	; 0xffffffbc
   176b4:	str	ip, [sp, #16]
   176b8:	str	r2, [sp, #20]
   176bc:	str	lr, [r1, #-72]	; 0xffffffb8
   176c0:	ble	17784 <flatcc_builder_end_string@@Base+0x168>
   176c4:	ldr	r0, [r4, #36]	; 0x24
   176c8:	add	r1, sp, #24
   176cc:	str	ip, [sp]
   176d0:	mov	r3, r5
   176d4:	ldr	r6, [r4, #44]	; 0x2c
   176d8:	blx	r6
   176dc:	subs	r1, r0, #0
   176e0:	bne	17770 <flatcc_builder_end_string@@Base+0x154>
   176e4:	cmp	r5, #0
   176e8:	str	r5, [r4, #136]	; 0x88
   176ec:	beq	17764 <flatcc_builder_end_string@@Base+0x148>
   176f0:	ldr	r2, [r4, #20]
   176f4:	ldr	r0, [r4, #16]
   176f8:	bl	1203c <memset@plt>
   176fc:	ldr	r3, [r4, #32]
   17700:	ldr	r2, [r4, #64]	; 0x40
   17704:	ldrh	lr, [r4, #130]	; 0x82
   17708:	ldr	ip, [r3]
   1770c:	ldr	r1, [r3, #4]
   17710:	ldrh	r0, [r4, #128]	; 0x80
   17714:	sub	r2, r2, ip
   17718:	cmp	r2, r1
   1771c:	movcs	r2, r1
   17720:	cmp	r0, lr
   17724:	ldr	r0, [r4, #60]	; 0x3c
   17728:	ldr	r6, [r3, #8]
   1772c:	str	r2, [r4, #24]
   17730:	add	r2, r0, ip
   17734:	str	r2, [r4, #16]
   17738:	str	r6, [r4, #20]
   1773c:	ldr	r2, [r4, #156]	; 0x9c
   17740:	str	ip, [r4, #28]
   17744:	str	r1, [r3, #4]
   17748:	strhcc	lr, [r4, #128]	; 0x80
   1774c:	ldrh	r1, [r3, #12]
   17750:	sub	r2, r2, #1
   17754:	sub	r3, r3, #36	; 0x24
   17758:	str	r2, [r4, #156]	; 0x9c
   1775c:	strh	r1, [r4, #130]	; 0x82
   17760:	str	r3, [r4, #32]
   17764:	mov	r0, r5
   17768:	add	sp, sp, #88	; 0x58
   1776c:	pop	{r4, r5, r6, pc}
   17770:	ldr	r3, [pc, #60]	; 177b4 <flatcc_builder_end_string@@Base+0x198>
   17774:	ldr	r2, [pc, #60]	; 177b8 <flatcc_builder_end_string@@Base+0x19c>
   17778:	ldr	r1, [pc, #60]	; 177bc <flatcc_builder_end_string@@Base+0x1a0>
   1777c:	ldr	r0, [pc, #60]	; 177c0 <flatcc_builder_end_string@@Base+0x1a4>
   17780:	bl	1206c <__assert_fail@plt>
   17784:	bl	12110 <__assert_fail@plt+0xa4>
   17788:	ldr	r3, [pc, #52]	; 177c4 <flatcc_builder_end_string@@Base+0x1a8>
   1778c:	ldr	r2, [pc, #52]	; 177c8 <flatcc_builder_end_string@@Base+0x1ac>
   17790:	ldr	r1, [pc, #36]	; 177bc <flatcc_builder_end_string@@Base+0x1a0>
   17794:	ldr	r0, [pc, #48]	; 177cc <flatcc_builder_end_string@@Base+0x1b0>
   17798:	bl	1206c <__assert_fail@plt>
   1779c:	ldr	r3, [pc, #32]	; 177c4 <flatcc_builder_end_string@@Base+0x1a8>
   177a0:	ldr	r2, [pc, #40]	; 177d0 <flatcc_builder_end_string@@Base+0x1b4>
   177a4:	ldr	r1, [pc, #16]	; 177bc <flatcc_builder_end_string@@Base+0x1a0>
   177a8:	ldr	r0, [pc, #36]	; 177d4 <flatcc_builder_end_string@@Base+0x1b8>
   177ac:	bl	1206c <__assert_fail@plt>
   177b0:	andeq	r8, r1, ip, lsl #29
   177b4:	andeq	r8, r1, r0, lsl lr
   177b8:	andeq	r0, r0, fp, lsl #5
   177bc:	andeq	r9, r1, r4, asr #10
   177c0:	andeq	r9, r1, r4, lsl #12
   177c4:	andeq	r9, r1, r8, ror #8
   177c8:	andeq	r0, r0, r5, asr #13
   177cc:	andeq	r9, r1, r4, lsl #17
   177d0:	andeq	r0, r0, r4, asr #13
   177d4:	andeq	r9, r1, r4, asr #11

000177d8 <flatcc_builder_string_edit@@Base>:
   177d8:	ldr	r0, [r0, #16]
   177dc:	bx	lr

000177e0 <flatcc_builder_string_len@@Base>:
   177e0:	ldr	r3, [r0, #32]
   177e4:	ldr	r0, [r3, #20]
   177e8:	bx	lr

000177ec <flatcc_builder_table_add@@Base>:
   177ec:	push	{r4, r5, r6, r7, r8, r9, lr}
   177f0:	mov	r4, r0
   177f4:	ldr	r0, [r0, #32]
   177f8:	sub	sp, sp, #12
   177fc:	ldrh	r0, [r0, #14]
   17800:	cmp	r0, #3
   17804:	bne	17940 <flatcc_builder_table_add@@Base+0x154>
   17808:	ldr	r0, [pc, #324]	; 17954 <flatcc_builder_table_add@@Base+0x168>
   1780c:	cmp	r1, r0
   17810:	bhi	1792c <flatcc_builder_table_add@@Base+0x140>
   17814:	ldrh	r0, [r4, #130]	; 0x82
   17818:	lsl	r7, r1, #1
   1781c:	cmp	r0, r3
   17820:	ldr	r0, [r4, #4]
   17824:	strhcc	r3, [r4, #130]	; 0x82
   17828:	add	lr, r0, r7
   1782c:	ldrh	r6, [r0, r7]
   17830:	cmp	r6, #0
   17834:	bne	17918 <flatcc_builder_table_add@@Base+0x12c>
   17838:	ldr	ip, [r4, #12]
   1783c:	ldr	r9, [pc, #276]	; 17958 <flatcc_builder_table_add@@Base+0x16c>
   17840:	eor	ip, ip, r1
   17844:	uxth	r5, r1
   17848:	mul	r1, r9, ip
   1784c:	ldr	r0, [r4, #20]
   17850:	eor	r1, r1, r2
   17854:	sub	r8, r3, #1
   17858:	add	r8, r8, r0
   1785c:	rsb	r3, r3, #0
   17860:	and	r8, r8, r3
   17864:	mul	r1, r9, r1
   17868:	ldr	r3, [r4, #24]
   1786c:	add	r2, r2, r8
   17870:	cmp	r2, r3
   17874:	str	r1, [r4, #12]
   17878:	str	r2, [r4, #20]
   1787c:	bcs	178a8 <flatcc_builder_table_add@@Base+0xbc>
   17880:	ldr	r0, [r4, #16]
   17884:	add	r3, r8, #4
   17888:	strh	r3, [lr]
   1788c:	ldrh	r3, [r4, #8]
   17890:	add	r0, r0, r8
   17894:	cmp	r3, r5
   17898:	addls	r5, r5, #1
   1789c:	strhls	r5, [r4, #8]
   178a0:	add	sp, sp, #12
   178a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   178a8:	ldr	r1, [r4, #28]
   178ac:	mov	r3, #1
   178b0:	add	r1, r1, #1
   178b4:	ldr	r0, [r4, #40]	; 0x28
   178b8:	add	r2, r1, r2
   178bc:	str	r3, [sp]
   178c0:	add	r1, r4, #60	; 0x3c
   178c4:	ldr	r9, [r4, #48]	; 0x30
   178c8:	blx	r9
   178cc:	cmp	r0, #0
   178d0:	bne	17910 <flatcc_builder_table_add@@Base+0x124>
   178d4:	ldr	r6, [r4, #28]
   178d8:	ldr	r3, [r4, #64]	; 0x40
   178dc:	ldr	r2, [pc, #120]	; 1795c <flatcc_builder_table_add@@Base+0x170>
   178e0:	sub	r3, r3, r6
   178e4:	ldr	r0, [r4, #60]	; 0x3c
   178e8:	ldr	r1, [r4, #32]
   178ec:	ldr	lr, [r4, #4]
   178f0:	cmp	r3, r2
   178f4:	add	r0, r0, r6
   178f8:	movcs	r3, r2
   178fc:	str	r0, [r4, #16]
   17900:	str	r3, [r4, #24]
   17904:	add	lr, lr, r7
   17908:	str	r2, [r1, #4]
   1790c:	b	17884 <flatcc_builder_table_add@@Base+0x98>
   17910:	mov	r0, r6
   17914:	b	178a0 <flatcc_builder_table_add@@Base+0xb4>
   17918:	ldr	r3, [pc, #64]	; 17960 <flatcc_builder_table_add@@Base+0x174>
   1791c:	ldr	r2, [pc, #64]	; 17964 <flatcc_builder_table_add@@Base+0x178>
   17920:	ldr	r1, [pc, #64]	; 17968 <flatcc_builder_table_add@@Base+0x17c>
   17924:	ldr	r0, [pc, #64]	; 1796c <flatcc_builder_table_add@@Base+0x180>
   17928:	bl	1206c <__assert_fail@plt>
   1792c:	ldr	r3, [pc, #44]	; 17960 <flatcc_builder_table_add@@Base+0x174>
   17930:	ldr	r2, [pc, #56]	; 17970 <flatcc_builder_table_add@@Base+0x184>
   17934:	ldr	r1, [pc, #44]	; 17968 <flatcc_builder_table_add@@Base+0x17c>
   17938:	ldr	r0, [pc, #52]	; 17974 <flatcc_builder_table_add@@Base+0x188>
   1793c:	bl	1206c <__assert_fail@plt>
   17940:	ldr	r3, [pc, #24]	; 17960 <flatcc_builder_table_add@@Base+0x174>
   17944:	ldr	r2, [pc, #44]	; 17978 <flatcc_builder_table_add@@Base+0x18c>
   17948:	ldr	r1, [pc, #24]	; 17968 <flatcc_builder_table_add@@Base+0x17c>
   1794c:	ldr	r0, [pc, #40]	; 1797c <flatcc_builder_table_add@@Base+0x190>
   17950:	bl	1206c <__assert_fail@plt>
   17954:	strdeq	r7, [r0], -ip
   17958:			; <UNDEFINED> instruction: 0x9e3779b1
   1795c:	strdeq	pc, [r0], -ip
   17960:	andeq	r9, r1, r4, lsl #9
   17964:	strdeq	r0, [r0], -r8
   17968:	andeq	r9, r1, r4, asr #10
   1796c:	andeq	r9, r1, r4, lsl #12
   17970:	andeq	r0, r0, lr, ror #13
   17974:	andeq	r9, r1, r8, lsr #17
   17978:	andeq	r0, r0, sp, ror #13
   1797c:	andeq	r9, r1, r0, lsl r8

00017980 <flatcc_builder_table_edit@@Base>:
   17980:	ldr	r3, [r0, #32]
   17984:	ldrh	r3, [r3, #14]
   17988:	cmp	r3, #3
   1798c:	bne	179a4 <flatcc_builder_table_edit@@Base+0x24>
   17990:	ldr	r3, [r0, #20]
   17994:	ldr	r0, [r0, #16]
   17998:	sub	r1, r3, r1
   1799c:	add	r0, r0, r1
   179a0:	bx	lr
   179a4:	push	{r4, lr}
   179a8:	ldr	r3, [pc, #12]	; 179bc <flatcc_builder_table_edit@@Base+0x3c>
   179ac:	ldr	r2, [pc, #12]	; 179c0 <flatcc_builder_table_edit@@Base+0x40>
   179b0:	ldr	r1, [pc, #12]	; 179c4 <flatcc_builder_table_edit@@Base+0x44>
   179b4:	ldr	r0, [pc, #12]	; 179c8 <flatcc_builder_table_edit@@Base+0x48>
   179b8:	bl	1206c <__assert_fail@plt>
   179bc:	andeq	r9, r1, r0, lsr #9
   179c0:	andeq	r0, r0, r2, lsl #14
   179c4:	andeq	r9, r1, r4, asr #10
   179c8:	andeq	r9, r1, r0, lsl r8

000179cc <flatcc_builder_table_add_copy@@Base>:
   179cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179d0:	mov	r4, r0
   179d4:	ldr	r0, [r0, #32]
   179d8:	mov	r7, r3
   179dc:	sub	sp, sp, #12
   179e0:	ldrh	r3, [r0, #14]
   179e4:	ldrh	ip, [sp, #48]	; 0x30
   179e8:	cmp	r3, #3
   179ec:	bne	17b48 <flatcc_builder_table_add_copy@@Base+0x17c>
   179f0:	ldr	r3, [pc, #356]	; 17b5c <flatcc_builder_table_add_copy@@Base+0x190>
   179f4:	cmp	r1, r3
   179f8:	bhi	17b34 <flatcc_builder_table_add_copy@@Base+0x168>
   179fc:	ldrh	r3, [r4, #130]	; 0x82
   17a00:	lsl	sl, r1, #1
   17a04:	mov	r8, r2
   17a08:	cmp	r3, ip
   17a0c:	ldr	r3, [r4, #4]
   17a10:	strhcc	ip, [r4, #130]	; 0x82
   17a14:	add	r0, r3, sl
   17a18:	ldrh	r5, [r3, sl]
   17a1c:	cmp	r5, #0
   17a20:	bne	17b20 <flatcc_builder_table_add_copy@@Base+0x154>
   17a24:	ldr	r2, [r4, #12]
   17a28:	ldr	lr, [pc, #304]	; 17b60 <flatcc_builder_table_add_copy@@Base+0x194>
   17a2c:	eor	r2, r2, r1
   17a30:	ldr	r6, [r4, #20]
   17a34:	mul	r2, lr, r2
   17a38:	sub	r3, ip, #1
   17a3c:	eor	r2, r2, r7
   17a40:	add	r3, r3, r6
   17a44:	rsb	ip, ip, #0
   17a48:	and	r6, r3, ip
   17a4c:	mul	lr, lr, r2
   17a50:	ldr	r3, [r4, #24]
   17a54:	uxth	r9, r1
   17a58:	add	r1, r7, r6
   17a5c:	cmp	r1, r3
   17a60:	str	lr, [r4, #12]
   17a64:	str	r1, [r4, #20]
   17a68:	bcs	17ab0 <flatcc_builder_table_add_copy@@Base+0xe4>
   17a6c:	ldr	r3, [r4, #16]
   17a70:	add	r2, r6, #4
   17a74:	strh	r2, [r0]
   17a78:	ldrh	r2, [r4, #8]
   17a7c:	cmp	r2, r9
   17a80:	addls	r9, r9, #1
   17a84:	strhls	r9, [r4, #8]
   17a88:	adds	r3, r3, r6
   17a8c:	beq	17aa4 <flatcc_builder_table_add_copy@@Base+0xd8>
   17a90:	mov	r0, r3
   17a94:	mov	r2, r7
   17a98:	mov	r1, r8
   17a9c:	bl	11fb8 <memcpy@plt>
   17aa0:	mov	r3, r0
   17aa4:	mov	r0, r3
   17aa8:	add	sp, sp, #12
   17aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ab0:	ldr	r2, [r4, #28]
   17ab4:	mov	r3, #1
   17ab8:	add	r2, r2, #1
   17abc:	ldr	r0, [r4, #40]	; 0x28
   17ac0:	add	r2, r2, r1
   17ac4:	str	r3, [sp]
   17ac8:	add	r1, r4, #60	; 0x3c
   17acc:	ldr	fp, [r4, #48]	; 0x30
   17ad0:	blx	fp
   17ad4:	cmp	r0, #0
   17ad8:	bne	17b18 <flatcc_builder_table_add_copy@@Base+0x14c>
   17adc:	ldr	r0, [r4, #28]
   17ae0:	ldr	r2, [r4, #64]	; 0x40
   17ae4:	ldr	r1, [pc, #120]	; 17b64 <flatcc_builder_table_add_copy@@Base+0x198>
   17ae8:	ldr	r3, [r4, #60]	; 0x3c
   17aec:	sub	r2, r2, r0
   17af0:	ldr	ip, [r4, #32]
   17af4:	add	r3, r3, r0
   17af8:	cmp	r2, r1
   17afc:	ldr	r0, [r4, #4]
   17b00:	movcs	r2, r1
   17b04:	str	r3, [r4, #16]
   17b08:	str	r2, [r4, #24]
   17b0c:	add	r0, r0, sl
   17b10:	str	r1, [ip, #4]
   17b14:	b	17a70 <flatcc_builder_table_add_copy@@Base+0xa4>
   17b18:	mov	r3, r5
   17b1c:	b	17aa4 <flatcc_builder_table_add_copy@@Base+0xd8>
   17b20:	ldr	r3, [pc, #64]	; 17b68 <flatcc_builder_table_add_copy@@Base+0x19c>
   17b24:	ldr	r2, [pc, #64]	; 17b6c <flatcc_builder_table_add_copy@@Base+0x1a0>
   17b28:	ldr	r1, [pc, #64]	; 17b70 <flatcc_builder_table_add_copy@@Base+0x1a4>
   17b2c:	ldr	r0, [pc, #64]	; 17b74 <flatcc_builder_table_add_copy@@Base+0x1a8>
   17b30:	bl	1206c <__assert_fail@plt>
   17b34:	ldr	r3, [pc, #44]	; 17b68 <flatcc_builder_table_add_copy@@Base+0x19c>
   17b38:	ldr	r2, [pc, #56]	; 17b78 <flatcc_builder_table_add_copy@@Base+0x1ac>
   17b3c:	ldr	r1, [pc, #44]	; 17b70 <flatcc_builder_table_add_copy@@Base+0x1a4>
   17b40:	ldr	r0, [pc, #52]	; 17b7c <flatcc_builder_table_add_copy@@Base+0x1b0>
   17b44:	bl	1206c <__assert_fail@plt>
   17b48:	ldr	r3, [pc, #24]	; 17b68 <flatcc_builder_table_add_copy@@Base+0x19c>
   17b4c:	ldr	r2, [pc, #44]	; 17b80 <flatcc_builder_table_add_copy@@Base+0x1b4>
   17b50:	ldr	r1, [pc, #24]	; 17b70 <flatcc_builder_table_add_copy@@Base+0x1a4>
   17b54:	ldr	r0, [pc, #40]	; 17b84 <flatcc_builder_table_add_copy@@Base+0x1b8>
   17b58:	bl	1206c <__assert_fail@plt>
   17b5c:	strdeq	r7, [r0], -ip
   17b60:			; <UNDEFINED> instruction: 0x9e3779b1
   17b64:	strdeq	pc, [r0], -ip
   17b68:	andeq	r9, r1, r4, lsl #9
   17b6c:	strdeq	r0, [r0], -r8
   17b70:	andeq	r9, r1, r4, asr #10
   17b74:	andeq	r9, r1, r4, lsl #12
   17b78:	andeq	r0, r0, lr, ror #13
   17b7c:	andeq	r9, r1, r8, lsr #17
   17b80:	andeq	r0, r0, sp, ror #13
   17b84:	andeq	r9, r1, r0, lsl r8

00017b88 <flatcc_builder_table_add_offset@@Base>:
   17b88:	ldr	r3, [r0, #32]
   17b8c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17b90:	sub	sp, sp, #12
   17b94:	ldrh	r3, [r3, #14]
   17b98:	cmp	r3, #3
   17b9c:	bne	17cd8 <flatcc_builder_table_add_offset@@Base+0x150>
   17ba0:	ldr	r3, [pc, #324]	; 17cec <flatcc_builder_table_add_offset@@Base+0x164>
   17ba4:	cmp	r1, r3
   17ba8:	bhi	17cc4 <flatcc_builder_table_add_offset@@Base+0x13c>
   17bac:	ldr	r3, [r0, #4]
   17bb0:	lsl	r7, r1, #1
   17bb4:	mov	r4, r0
   17bb8:	ldrh	r6, [r3, r7]
   17bbc:	add	ip, r3, r7
   17bc0:	cmp	r6, #0
   17bc4:	bne	17cb0 <flatcc_builder_table_add_offset@@Base+0x128>
   17bc8:	ldr	r3, [r0, #12]
   17bcc:	ldr	r2, [pc, #284]	; 17cf0 <flatcc_builder_table_add_offset@@Base+0x168>
   17bd0:	eor	r3, r3, r1
   17bd4:	ldr	r5, [r0, #20]
   17bd8:	mul	r3, r2, r3
   17bdc:	add	r5, r5, #3
   17be0:	eor	r3, r3, #4
   17be4:	ldr	r0, [r0, #24]
   17be8:	mul	r3, r2, r3
   17bec:	bic	r5, r5, #3
   17bf0:	add	r2, r5, #4
   17bf4:	cmp	r2, r0
   17bf8:	uxth	r8, r1
   17bfc:	str	r3, [r4, #12]
   17c00:	str	r2, [r4, #20]
   17c04:	bhi	17c44 <flatcc_builder_table_add_offset@@Base+0xbc>
   17c08:	ldr	r0, [r4, #16]
   17c0c:	uxth	r2, r5
   17c10:	add	r3, r2, #4
   17c14:	strh	r3, [ip]
   17c18:	ldrh	r3, [r4, #8]
   17c1c:	add	r0, r0, r5
   17c20:	cmp	r3, r8
   17c24:	ldr	r3, [r4]
   17c28:	addls	r1, r8, #1
   17c2c:	strhls	r1, [r4, #8]
   17c30:	add	r1, r3, #2
   17c34:	str	r1, [r4]
   17c38:	strh	r2, [r3]
   17c3c:	add	sp, sp, #12
   17c40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17c44:	ldr	r1, [r4, #28]
   17c48:	mov	r3, #1
   17c4c:	ldr	r0, [r4, #40]	; 0x28
   17c50:	add	r2, r2, r1
   17c54:	str	r3, [sp]
   17c58:	add	r1, r4, #60	; 0x3c
   17c5c:	ldr	r9, [r4, #48]	; 0x30
   17c60:	blx	r9
   17c64:	cmp	r0, #0
   17c68:	bne	17ca8 <flatcc_builder_table_add_offset@@Base+0x120>
   17c6c:	ldr	r6, [r4, #28]
   17c70:	ldr	r3, [r4, #64]	; 0x40
   17c74:	ldr	r2, [pc, #120]	; 17cf4 <flatcc_builder_table_add_offset@@Base+0x16c>
   17c78:	sub	r3, r3, r6
   17c7c:	ldr	r0, [r4, #60]	; 0x3c
   17c80:	ldr	r1, [r4, #32]
   17c84:	ldr	ip, [r4, #4]
   17c88:	cmp	r3, r2
   17c8c:	add	r0, r0, r6
   17c90:	movcs	r3, r2
   17c94:	str	r0, [r4, #16]
   17c98:	str	r3, [r4, #24]
   17c9c:	add	ip, ip, r7
   17ca0:	str	r2, [r1, #4]
   17ca4:	b	17c0c <flatcc_builder_table_add_offset@@Base+0x84>
   17ca8:	mov	r0, r6
   17cac:	b	17c3c <flatcc_builder_table_add_offset@@Base+0xb4>
   17cb0:	ldr	r3, [pc, #64]	; 17cf8 <flatcc_builder_table_add_offset@@Base+0x170>
   17cb4:	ldr	r2, [pc, #64]	; 17cfc <flatcc_builder_table_add_offset@@Base+0x174>
   17cb8:	ldr	r1, [pc, #64]	; 17d00 <flatcc_builder_table_add_offset@@Base+0x178>
   17cbc:	ldr	r0, [pc, #64]	; 17d04 <flatcc_builder_table_add_offset@@Base+0x17c>
   17cc0:	bl	1206c <__assert_fail@plt>
   17cc4:	ldr	r3, [pc, #44]	; 17cf8 <flatcc_builder_table_add_offset@@Base+0x170>
   17cc8:	ldr	r2, [pc, #56]	; 17d08 <flatcc_builder_table_add_offset@@Base+0x180>
   17ccc:	ldr	r1, [pc, #44]	; 17d00 <flatcc_builder_table_add_offset@@Base+0x178>
   17cd0:	ldr	r0, [pc, #52]	; 17d0c <flatcc_builder_table_add_offset@@Base+0x184>
   17cd4:	bl	1206c <__assert_fail@plt>
   17cd8:	ldr	r3, [pc, #24]	; 17cf8 <flatcc_builder_table_add_offset@@Base+0x170>
   17cdc:	ldr	r2, [pc, #44]	; 17d10 <flatcc_builder_table_add_offset@@Base+0x188>
   17ce0:	ldr	r1, [pc, #24]	; 17d00 <flatcc_builder_table_add_offset@@Base+0x178>
   17ce4:	ldr	r0, [pc, #40]	; 17d14 <flatcc_builder_table_add_offset@@Base+0x18c>
   17ce8:	bl	1206c <__assert_fail@plt>
   17cec:	strdeq	r7, [r0], -ip
   17cf0:			; <UNDEFINED> instruction: 0x9e3779b1
   17cf4:	strdeq	pc, [r0], -ip
   17cf8:			; <UNDEFINED> instruction: 0x000194bc
   17cfc:	andeq	r0, r0, fp, lsl r7
   17d00:	andeq	r9, r1, r4, asr #10
   17d04:	andeq	r9, r1, r4, lsl #12
   17d08:	andeq	r0, r0, r4, lsl r7
   17d0c:	andeq	r9, r1, r8, lsr #17
   17d10:	andeq	r0, r0, r3, lsl r7
   17d14:	andeq	r9, r1, r0, lsl r8

00017d18 <flatcc_builder_table_add_union@@Base>:
   17d18:	push	{r4, r5, r6, r7, r8, r9, lr}
   17d1c:	sub	sp, sp, #20
   17d20:	add	ip, sp, #16
   17d24:	stmdb	ip, {r2, r3}
   17d28:	ldr	r3, [r0, #32]
   17d2c:	ldrb	r6, [sp, #8]
   17d30:	ldr	r5, [sp, #12]
   17d34:	ldrh	r3, [r3, #14]
   17d38:	cmp	r3, #3
   17d3c:	bne	17ec8 <flatcc_builder_table_add_union@@Base+0x1b0>
   17d40:	cmp	r6, #0
   17d44:	mov	r4, r0
   17d48:	mov	r7, r1
   17d4c:	beq	17e1c <flatcc_builder_table_add_union@@Base+0x104>
   17d50:	cmp	r5, #0
   17d54:	beq	17d78 <flatcc_builder_table_add_union@@Base+0x60>
   17d58:	bl	17b88 <flatcc_builder_table_add_offset@@Base>
   17d5c:	cmp	r0, #0
   17d60:	beq	17f04 <flatcc_builder_table_add_union@@Base+0x1ec>
   17d64:	ldr	r3, [r4, #32]
   17d68:	str	r5, [r0]
   17d6c:	ldrh	r3, [r3, #14]
   17d70:	cmp	r3, #3
   17d74:	bne	17edc <flatcc_builder_table_add_union@@Base+0x1c4>
   17d78:	ldr	r3, [pc, #408]	; 17f18 <flatcc_builder_table_add_union@@Base+0x200>
   17d7c:	sub	r1, r7, #1
   17d80:	cmp	r1, r3
   17d84:	bhi	17ef0 <flatcc_builder_table_add_union@@Base+0x1d8>
   17d88:	ldrh	r3, [r4, #130]	; 0x82
   17d8c:	lsl	r5, r1, #1
   17d90:	cmp	r3, #0
   17d94:	moveq	r3, #1
   17d98:	strheq	r3, [r4, #130]	; 0x82
   17d9c:	ldr	r3, [r4, #4]
   17da0:	add	r0, r3, r5
   17da4:	ldrh	r3, [r3, r5]
   17da8:	cmp	r3, #0
   17dac:	bne	17eb4 <flatcc_builder_table_add_union@@Base+0x19c>
   17db0:	ldr	r3, [r4, #12]
   17db4:	ldr	r2, [pc, #352]	; 17f1c <flatcc_builder_table_add_union@@Base+0x204>
   17db8:	eor	r3, r3, r1
   17dbc:	ldr	r7, [r4, #20]
   17dc0:	mul	r3, r2, r3
   17dc4:	uxth	r8, r1
   17dc8:	eor	r3, r3, #1
   17dcc:	ldr	r1, [r4, #24]
   17dd0:	mul	r3, r2, r3
   17dd4:	add	r2, r7, #1
   17dd8:	cmp	r2, r1
   17ddc:	str	r3, [r4, #12]
   17de0:	str	r2, [r4, #20]
   17de4:	bcs	17e38 <flatcc_builder_table_add_union@@Base+0x120>
   17de8:	ldr	r3, [r4, #16]
   17dec:	add	r2, r7, #4
   17df0:	strh	r2, [r0]
   17df4:	ldrh	r2, [r4, #8]
   17df8:	cmp	r2, r8
   17dfc:	addls	r1, r8, #1
   17e00:	strhls	r1, [r4, #8]
   17e04:	cmn	r3, r7
   17e08:	beq	17ea0 <flatcc_builder_table_add_union@@Base+0x188>
   17e0c:	mov	r0, #0
   17e10:	strb	r6, [r3, r7]
   17e14:	add	sp, sp, #20
   17e18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e1c:	cmp	r5, #0
   17e20:	beq	17d78 <flatcc_builder_table_add_union@@Base+0x60>
   17e24:	ldr	r3, [pc, #244]	; 17f20 <flatcc_builder_table_add_union@@Base+0x208>
   17e28:	ldr	r2, [pc, #244]	; 17f24 <flatcc_builder_table_add_union@@Base+0x20c>
   17e2c:	ldr	r1, [pc, #244]	; 17f28 <flatcc_builder_table_add_union@@Base+0x210>
   17e30:	ldr	r0, [pc, #244]	; 17f2c <flatcc_builder_table_add_union@@Base+0x214>
   17e34:	bl	1206c <__assert_fail@plt>
   17e38:	ldr	r2, [r4, #28]
   17e3c:	mov	r3, #1
   17e40:	add	r2, r7, r2
   17e44:	ldr	r0, [r4, #40]	; 0x28
   17e48:	add	r2, r2, #2
   17e4c:	str	r3, [sp]
   17e50:	add	r1, r4, #60	; 0x3c
   17e54:	ldr	r9, [r4, #48]	; 0x30
   17e58:	blx	r9
   17e5c:	cmp	r0, #0
   17e60:	bne	17ea0 <flatcc_builder_table_add_union@@Base+0x188>
   17e64:	ldr	r0, [r4, #28]
   17e68:	ldr	r2, [r4, #64]	; 0x40
   17e6c:	ldr	r1, [pc, #188]	; 17f30 <flatcc_builder_table_add_union@@Base+0x218>
   17e70:	ldr	r3, [r4, #60]	; 0x3c
   17e74:	sub	r2, r2, r0
   17e78:	ldr	ip, [r4, #32]
   17e7c:	add	r3, r3, r0
   17e80:	cmp	r2, r1
   17e84:	ldr	r0, [r4, #4]
   17e88:	movcs	r2, r1
   17e8c:	str	r3, [r4, #16]
   17e90:	str	r2, [r4, #24]
   17e94:	add	r0, r0, r5
   17e98:	str	r1, [ip, #4]
   17e9c:	b	17dec <flatcc_builder_table_add_union@@Base+0xd4>
   17ea0:	ldr	r3, [pc, #120]	; 17f20 <flatcc_builder_table_add_union@@Base+0x208>
   17ea4:	ldr	r2, [pc, #136]	; 17f34 <flatcc_builder_table_add_union@@Base+0x21c>
   17ea8:	ldr	r1, [pc, #120]	; 17f28 <flatcc_builder_table_add_union@@Base+0x210>
   17eac:	ldr	r0, [pc, #132]	; 17f38 <flatcc_builder_table_add_union@@Base+0x220>
   17eb0:	bl	1206c <__assert_fail@plt>
   17eb4:	ldr	r3, [pc, #128]	; 17f3c <flatcc_builder_table_add_union@@Base+0x224>
   17eb8:	ldr	r2, [pc, #128]	; 17f40 <flatcc_builder_table_add_union@@Base+0x228>
   17ebc:	ldr	r1, [pc, #100]	; 17f28 <flatcc_builder_table_add_union@@Base+0x210>
   17ec0:	ldr	r0, [pc, #124]	; 17f44 <flatcc_builder_table_add_union@@Base+0x22c>
   17ec4:	bl	1206c <__assert_fail@plt>
   17ec8:	ldr	r3, [pc, #80]	; 17f20 <flatcc_builder_table_add_union@@Base+0x208>
   17ecc:	ldr	r2, [pc, #116]	; 17f48 <flatcc_builder_table_add_union@@Base+0x230>
   17ed0:	ldr	r1, [pc, #80]	; 17f28 <flatcc_builder_table_add_union@@Base+0x210>
   17ed4:	ldr	r0, [pc, #112]	; 17f4c <flatcc_builder_table_add_union@@Base+0x234>
   17ed8:	bl	1206c <__assert_fail@plt>
   17edc:	ldr	r3, [pc, #88]	; 17f3c <flatcc_builder_table_add_union@@Base+0x224>
   17ee0:	ldr	r2, [pc, #104]	; 17f50 <flatcc_builder_table_add_union@@Base+0x238>
   17ee4:	ldr	r1, [pc, #60]	; 17f28 <flatcc_builder_table_add_union@@Base+0x210>
   17ee8:	ldr	r0, [pc, #92]	; 17f4c <flatcc_builder_table_add_union@@Base+0x234>
   17eec:	bl	1206c <__assert_fail@plt>
   17ef0:	ldr	r3, [pc, #68]	; 17f3c <flatcc_builder_table_add_union@@Base+0x224>
   17ef4:	ldr	r2, [pc, #88]	; 17f54 <flatcc_builder_table_add_union@@Base+0x23c>
   17ef8:	ldr	r1, [pc, #40]	; 17f28 <flatcc_builder_table_add_union@@Base+0x210>
   17efc:	ldr	r0, [pc, #84]	; 17f58 <flatcc_builder_table_add_union@@Base+0x240>
   17f00:	bl	1206c <__assert_fail@plt>
   17f04:	ldr	r3, [pc, #20]	; 17f20 <flatcc_builder_table_add_union@@Base+0x208>
   17f08:	ldr	r2, [pc, #76]	; 17f5c <flatcc_builder_table_add_union@@Base+0x244>
   17f0c:	ldr	r1, [pc, #20]	; 17f28 <flatcc_builder_table_add_union@@Base+0x210>
   17f10:	ldr	r0, [pc, #72]	; 17f60 <flatcc_builder_table_add_union@@Base+0x248>
   17f14:	bl	1206c <__assert_fail@plt>
   17f18:	strdeq	r7, [r0], -ip
   17f1c:			; <UNDEFINED> instruction: 0x9e3779b1
   17f20:	ldrdeq	r9, [r1], -ip
   17f24:	andeq	r0, r0, pc, ror #11
   17f28:	andeq	r9, r1, r4, asr #10
   17f2c:	andeq	r9, r1, ip, ror #17
   17f30:	strdeq	pc, [r0], -ip
   17f34:	strdeq	r0, [r0], -r6
   17f38:	andeq	r9, r1, ip, lsl r9
   17f3c:	andeq	r9, r1, r4, lsl #9
   17f40:	strdeq	r0, [r0], -r8
   17f44:	andeq	r9, r1, r4, lsl #12
   17f48:	andeq	r0, r0, lr, ror #11
   17f4c:	andeq	r9, r1, r0, lsl r8
   17f50:	andeq	r0, r0, sp, ror #13
   17f54:	andeq	r0, r0, lr, ror #13
   17f58:	andeq	r9, r1, r8, lsr #17
   17f5c:	strdeq	r0, [r0], -r2
   17f60:	andeq	r9, r1, r0, lsl r9

00017f64 <flatcc_builder_table_add_union_vector@@Base>:
   17f64:	push	{r4, r5, r6, r7, lr}
   17f68:	sub	sp, sp, #12
   17f6c:	add	ip, sp, #8
   17f70:	stmdb	ip, {r2, r3}
   17f74:	ldr	r3, [r0, #32]
   17f78:	ldr	r4, [sp]
   17f7c:	ldr	r6, [sp, #4]
   17f80:	ldrh	r3, [r3, #14]
   17f84:	cmp	r3, #3
   17f88:	bne	18018 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   17f8c:	clz	r3, r6
   17f90:	clz	r2, r4
   17f94:	lsr	r3, r3, #5
   17f98:	lsr	r2, r2, #5
   17f9c:	cmp	r2, r3
   17fa0:	beq	17fc0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   17fa4:	adds	r4, r4, #0
   17fa8:	movne	r4, #1
   17fac:	cmp	r4, r3
   17fb0:	mvnne	r0, #0
   17fb4:	beq	1802c <flatcc_builder_table_add_union_vector@@Base+0xc8>
   17fb8:	add	sp, sp, #12
   17fbc:	pop	{r4, r5, r6, r7, pc}
   17fc0:	cmp	r4, #0
   17fc4:	moveq	r0, r4
   17fc8:	beq	17fb8 <flatcc_builder_table_add_union_vector@@Base+0x54>
   17fcc:	mov	r7, r1
   17fd0:	sub	r1, r1, #1
   17fd4:	mov	r5, r0
   17fd8:	bl	17b88 <flatcc_builder_table_add_offset@@Base>
   17fdc:	cmp	r0, #0
   17fe0:	beq	18040 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   17fe4:	str	r4, [r0]
   17fe8:	mov	r1, r7
   17fec:	mov	r0, r5
   17ff0:	bl	17b88 <flatcc_builder_table_add_offset@@Base>
   17ff4:	cmp	r0, #0
   17ff8:	strne	r6, [r0]
   17ffc:	movne	r0, #0
   18000:	bne	17fb8 <flatcc_builder_table_add_union_vector@@Base+0x54>
   18004:	ldr	r3, [pc, #72]	; 18054 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   18008:	ldr	r2, [pc, #72]	; 18058 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   1800c:	ldr	r1, [pc, #72]	; 1805c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   18010:	ldr	r0, [pc, #72]	; 18060 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   18014:	bl	1206c <__assert_fail@plt>
   18018:	ldr	r3, [pc, #52]	; 18054 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   1801c:	mov	r2, #1536	; 0x600
   18020:	ldr	r1, [pc, #52]	; 1805c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   18024:	ldr	r0, [pc, #56]	; 18064 <flatcc_builder_table_add_union_vector@@Base+0x100>
   18028:	bl	1206c <__assert_fail@plt>
   1802c:	ldr	r3, [pc, #32]	; 18054 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   18030:	ldr	r2, [pc, #48]	; 18068 <flatcc_builder_table_add_union_vector@@Base+0x104>
   18034:	ldr	r1, [pc, #32]	; 1805c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   18038:	ldr	r0, [pc, #44]	; 1806c <flatcc_builder_table_add_union_vector@@Base+0x108>
   1803c:	bl	1206c <__assert_fail@plt>
   18040:	ldr	r3, [pc, #12]	; 18054 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   18044:	ldr	r2, [pc, #36]	; 18070 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   18048:	ldr	r1, [pc, #12]	; 1805c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   1804c:	ldr	r0, [pc, #12]	; 18060 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   18050:	bl	1206c <__assert_fail@plt>
   18054:	strdeq	r9, [r1], -ip
   18058:	andeq	r0, r0, r8, lsl #12
   1805c:	andeq	r9, r1, r4, asr #10
   18060:	andeq	r9, r1, r0, lsl r9
   18064:	andeq	r9, r1, r0, lsl r8
   18068:	andeq	r0, r0, r1, lsl #12
   1806c:	andeq	r9, r1, r8, lsr #18
   18070:	andeq	r0, r0, r4, lsl #12

00018074 <flatcc_builder_push_buffer_alignment@@Base>:
   18074:	mov	r3, r0
   18078:	mov	r2, #4
   1807c:	ldrh	r0, [r0, #128]	; 0x80
   18080:	strh	r2, [r3, #128]	; 0x80
   18084:	bx	lr

00018088 <flatcc_builder_pop_buffer_alignment@@Base>:
   18088:	ldrh	r3, [r0, #128]	; 0x80
   1808c:	cmp	r3, r1
   18090:	strhcc	r1, [r0, #128]	; 0x80
   18094:	bx	lr

00018098 <flatcc_builder_get_buffer_alignment@@Base>:
   18098:	ldrh	r0, [r0, #128]	; 0x80
   1809c:	bx	lr

000180a0 <flatcc_builder_set_vtable_clustering@@Base>:
   180a0:	clz	r1, r1
   180a4:	lsr	r1, r1, #5
   180a8:	str	r1, [r0, #180]	; 0xb4
   180ac:	bx	lr

000180b0 <flatcc_builder_set_block_align@@Base>:
   180b0:	strh	r1, [r0, #132]	; 0x84
   180b4:	bx	lr

000180b8 <flatcc_builder_get_level@@Base>:
   180b8:	ldr	r0, [r0, #156]	; 0x9c
   180bc:	bx	lr

000180c0 <flatcc_builder_set_max_level@@Base>:
   180c0:	ldr	r3, [r0, #160]	; 0xa0
   180c4:	str	r1, [r0, #176]	; 0xb0
   180c8:	cmp	r1, r3
   180cc:	strgt	r1, [r0, #160]	; 0xa0
   180d0:	bx	lr

000180d4 <flatcc_builder_get_buffer_size@@Base>:
   180d4:	ldr	r2, [r0, #140]	; 0x8c
   180d8:	ldr	r0, [r0, #136]	; 0x88
   180dc:	sub	r0, r2, r0
   180e0:	bx	lr

000180e4 <flatcc_builder_get_buffer_start@@Base>:
   180e4:	ldr	r0, [r0, #136]	; 0x88
   180e8:	bx	lr

000180ec <flatcc_builder_get_buffer_end@@Base>:
   180ec:	ldr	r0, [r0, #140]	; 0x8c
   180f0:	bx	lr

000180f4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   180f4:	str	r1, [r0, #172]	; 0xac
   180f8:	bx	lr

000180fc <flatcc_builder_set_identifier@@Base>:
   180fc:	ldr	r3, [pc, #16]	; 18114 <flatcc_builder_set_identifier@@Base+0x18>
   18100:	cmp	r1, #0
   18104:	moveq	r1, r3
   18108:	ldr	r3, [r1]
   1810c:	str	r3, [r0, #168]	; 0xa8
   18110:	bx	lr
   18114:	andeq	r8, r1, ip, lsl #29

00018118 <flatcc_builder_get_type@@Base>:
   18118:	ldr	r0, [r0, #32]
   1811c:	cmp	r0, #0
   18120:	ldrhne	r0, [r0, #14]
   18124:	bx	lr

00018128 <flatcc_builder_get_type_at@@Base>:
   18128:	cmp	r1, #0
   1812c:	ble	18154 <flatcc_builder_get_type_at@@Base+0x2c>
   18130:	ldr	r3, [r0, #156]	; 0x9c
   18134:	cmp	r1, r3
   18138:	bgt	18154 <flatcc_builder_get_type_at@@Base+0x2c>
   1813c:	sub	r1, r1, r3
   18140:	ldr	r3, [r0, #32]
   18144:	add	r1, r1, r1, lsl #3
   18148:	add	r1, r3, r1, lsl #2
   1814c:	ldrh	r0, [r1, #14]
   18150:	bx	lr
   18154:	mov	r0, #0
   18158:	bx	lr

0001815c <flatcc_builder_get_direct_buffer@@Base>:
   1815c:	ldr	r3, [r0, #184]	; 0xb8
   18160:	cmp	r3, #0
   18164:	beq	18178 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   18168:	ldr	r2, [r0, #188]	; 0xbc
   1816c:	ldr	r3, [r0, #192]	; 0xc0
   18170:	cmp	r2, r3
   18174:	beq	1818c <flatcc_builder_get_direct_buffer@@Base+0x30>
   18178:	cmp	r1, #0
   1817c:	movne	r0, #0
   18180:	strne	r0, [r1]
   18184:	moveq	r0, r1
   18188:	bx	lr
   1818c:	cmp	r1, #0
   18190:	ldrne	r3, [r0, #212]	; 0xd4
   18194:	ldr	r0, [r0, #196]	; 0xc4
   18198:	strne	r3, [r1]
   1819c:	bx	lr

000181a0 <flatcc_builder_copy_buffer@@Base>:
   181a0:	ldr	r3, [r0, #184]	; 0xb8
   181a4:	cmp	r3, #0
   181a8:	beq	181c4 <flatcc_builder_copy_buffer@@Base+0x24>
   181ac:	push	{r4, lr}
   181b0:	add	r0, r0, #188	; 0xbc
   181b4:	bl	18878 <flatcc_emitter_copy_buffer@@Base>
   181b8:	cmp	r0, #0
   181bc:	popne	{r4, pc}
   181c0:	bl	121ac <__assert_fail@plt+0x140>
   181c4:	mov	r0, r3
   181c8:	bx	lr

000181cc <flatcc_builder_finalize_buffer@@Base>:
   181cc:	push	{r4, r5, r6, lr}
   181d0:	cmp	r1, #0
   181d4:	ldr	r4, [r0, #140]	; 0x8c
   181d8:	ldr	r2, [r0, #136]	; 0x88
   181dc:	mov	r5, r0
   181e0:	sub	r4, r4, r2
   181e4:	strne	r4, [r1]
   181e8:	mov	r0, r4
   181ec:	bl	12000 <malloc@plt>
   181f0:	subs	r6, r0, #0
   181f4:	beq	18238 <flatcc_builder_finalize_buffer@@Base+0x6c>
   181f8:	ldr	r3, [r5, #184]	; 0xb8
   181fc:	cmp	r3, #0
   18200:	beq	18224 <flatcc_builder_finalize_buffer@@Base+0x58>
   18204:	mov	r2, r4
   18208:	add	r0, r5, #188	; 0xbc
   1820c:	mov	r1, r6
   18210:	bl	18878 <flatcc_emitter_copy_buffer@@Base>
   18214:	cmp	r0, #0
   18218:	beq	1824c <flatcc_builder_finalize_buffer@@Base+0x80>
   1821c:	mov	r0, r6
   18220:	pop	{r4, r5, r6, pc}
   18224:	ldr	r3, [pc, #36]	; 18250 <flatcc_builder_finalize_buffer@@Base+0x84>
   18228:	ldr	r2, [pc, #36]	; 18254 <flatcc_builder_finalize_buffer@@Base+0x88>
   1822c:	ldr	r1, [pc, #36]	; 18258 <flatcc_builder_finalize_buffer@@Base+0x8c>
   18230:	ldr	r0, [pc, #36]	; 1825c <flatcc_builder_finalize_buffer@@Base+0x90>
   18234:	bl	1206c <__assert_fail@plt>
   18238:	ldr	r3, [pc, #16]	; 18250 <flatcc_builder_finalize_buffer@@Base+0x84>
   1823c:	ldr	r2, [pc, #28]	; 18260 <flatcc_builder_finalize_buffer@@Base+0x94>
   18240:	ldr	r1, [pc, #16]	; 18258 <flatcc_builder_finalize_buffer@@Base+0x8c>
   18244:	ldr	r0, [pc, #16]	; 1825c <flatcc_builder_finalize_buffer@@Base+0x90>
   18248:	bl	1206c <__assert_fail@plt>
   1824c:	bl	121ac <__assert_fail@plt+0x140>
   18250:	andeq	r9, r1, r4, lsr #10
   18254:	muleq	r0, ip, r7
   18258:	andeq	r9, r1, r4, asr #10
   1825c:	andeq	r9, r1, r4, lsl #12
   18260:	muleq	r0, r8, r7

00018264 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18264:	push	{r4, r5, r6, r7, lr}
   18268:	subs	r7, r1, #0
   1826c:	ldrh	r1, [r0, #128]	; 0x80
   18270:	ldr	r4, [r0, #140]	; 0x8c
   18274:	ldr	r3, [r0, #136]	; 0x88
   18278:	sub	sp, sp, #12
   1827c:	sub	r3, r4, r3
   18280:	sub	r4, r1, #1
   18284:	strne	r3, [r7]
   18288:	add	r4, r4, r3
   1828c:	mov	r5, r0
   18290:	rsb	r3, r1, #0
   18294:	add	r0, sp, #8
   18298:	cmp	r1, #4
   1829c:	mov	ip, #0
   182a0:	and	r4, r4, r3
   182a4:	movcc	r1, #4
   182a8:	mov	r2, r4
   182ac:	str	ip, [r0, #-4]!
   182b0:	bl	12030 <posix_memalign@plt>
   182b4:	cmp	r0, #0
   182b8:	beq	182e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   182bc:	ldr	r0, [sp, #4]
   182c0:	cmp	r0, #0
   182c4:	beq	182cc <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   182c8:	bl	11fac <free@plt>
   182cc:	cmp	r7, #0
   182d0:	moveq	r6, r7
   182d4:	movne	r6, #0
   182d8:	strne	r6, [r7]
   182dc:	mov	r0, r6
   182e0:	add	sp, sp, #12
   182e4:	pop	{r4, r5, r6, r7, pc}
   182e8:	ldr	r6, [sp, #4]
   182ec:	cmp	r6, #0
   182f0:	beq	182cc <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   182f4:	ldr	r3, [r5, #184]	; 0xb8
   182f8:	cmp	r3, #0
   182fc:	beq	1831c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   18300:	mov	r2, r4
   18304:	add	r0, r5, #188	; 0xbc
   18308:	mov	r1, r6
   1830c:	bl	18878 <flatcc_emitter_copy_buffer@@Base>
   18310:	cmp	r0, #0
   18314:	bne	182dc <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   18318:	bl	121ac <__assert_fail@plt+0x140>
   1831c:	mov	r0, r6
   18320:	b	182c8 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

00018324 <flatcc_builder_aligned_alloc@@Base>:
   18324:	push	{r4, lr}
   18328:	sub	sp, sp, #8
   1832c:	add	r3, sp, #8
   18330:	cmp	r0, #4
   18334:	mov	r4, #0
   18338:	mov	r2, r1
   1833c:	str	r4, [r3, #-4]!
   18340:	movcs	r1, r0
   18344:	movcc	r1, #4
   18348:	mov	r0, r3
   1834c:	bl	12030 <posix_memalign@plt>
   18350:	cmp	r0, r4
   18354:	ldr	r0, [sp, #4]
   18358:	beq	1836c <flatcc_builder_aligned_alloc@@Base+0x48>
   1835c:	cmp	r0, #0
   18360:	beq	1836c <flatcc_builder_aligned_alloc@@Base+0x48>
   18364:	bl	11fac <free@plt>
   18368:	mov	r0, r4
   1836c:	add	sp, sp, #8
   18370:	pop	{r4, pc}

00018374 <flatcc_builder_aligned_free@@Base>:
   18374:	b	11fac <free@plt>

00018378 <flatcc_builder_get_emit_context@@Base>:
   18378:	ldr	r0, [r0, #36]	; 0x24
   1837c:	bx	lr

00018380 <flatcc_emitter_recycle_page@@Base>:
   18380:	ldr	r3, [r0]
   18384:	cmp	r3, r1
   18388:	beq	183d0 <flatcc_emitter_recycle_page@@Base+0x50>
   1838c:	ldr	r2, [r0, #4]
   18390:	cmp	r1, r2
   18394:	beq	183d0 <flatcc_emitter_recycle_page@@Base+0x50>
   18398:	ldr	ip, [r1, #2944]	; 0xb80
   1839c:	ldr	r2, [r1, #2948]	; 0xb84
   183a0:	push	{lr}		; (str lr, [sp, #-4]!)
   183a4:	mov	r0, #0
   183a8:	str	r2, [ip, #2948]	; 0xb84
   183ac:	ldr	r2, [r3, #2948]	; 0xb84
   183b0:	ldr	lr, [r1, #2948]	; 0xb84
   183b4:	str	ip, [lr, #2944]	; 0xb80
   183b8:	str	r3, [r1, #2944]	; 0xb80
   183bc:	str	r2, [r1, #2948]	; 0xb84
   183c0:	str	r1, [r2, #2944]	; 0xb80
   183c4:	ldr	r3, [r1, #2944]	; 0xb80
   183c8:	str	r1, [r3, #2948]	; 0xb84
   183cc:	pop	{pc}		; (ldr pc, [sp], #4)
   183d0:	mvn	r0, #0
   183d4:	bx	lr

000183d8 <flatcc_emitter_reset@@Base>:
   183d8:	ldr	r2, [r0]
   183dc:	cmp	r2, #0
   183e0:	bxeq	lr
   183e4:	ldr	r3, [r0, #32]
   183e8:	mov	r1, #1472	; 0x5c0
   183ec:	push	{r4, lr}
   183f0:	cmp	r3, #0
   183f4:	str	r1, [r0, #12]
   183f8:	str	r1, [r0, #20]
   183fc:	ldr	r1, [r0, #24]
   18400:	add	ip, r2, #1472	; 0x5c0
   18404:	moveq	r3, r1
   18408:	stmib	r0, {r2, ip}
   1840c:	str	ip, [r0, #16]
   18410:	add	ip, r3, r3, lsl #1
   18414:	lsr	r3, r1, #2
   18418:	add	r3, r3, ip, lsr #2
   1841c:	ldr	ip, [r0, #28]
   18420:	ldr	lr, [pc, #104]	; 18490 <flatcc_emitter_reset@@Base+0xb8>
   18424:	cmp	ip, r3, lsl #1
   18428:	mov	r1, #0
   1842c:	str	lr, [r2, #2952]	; 0xb88
   18430:	str	r3, [r0, #32]
   18434:	str	r1, [r0, #24]
   18438:	popls	{r4, pc}
   1843c:	ldr	r3, [r2, #2944]	; 0xb80
   18440:	mov	r4, r0
   18444:	cmp	r2, r3
   18448:	popeq	{r4, pc}
   1844c:	ldr	r1, [r3, #2944]	; 0xb80
   18450:	mov	r0, r3
   18454:	str	r1, [r2, #2944]	; 0xb80
   18458:	ldr	r3, [r3, #2944]	; 0xb80
   1845c:	str	r2, [r3, #2948]	; 0xb84
   18460:	bl	11fac <free@plt>
   18464:	ldr	r3, [r4, #28]
   18468:	ldr	r2, [r4, #32]
   1846c:	sub	r3, r3, #2944	; 0xb80
   18470:	str	r3, [r4, #28]
   18474:	cmp	r3, r2, lsl #1
   18478:	popls	{r4, pc}
   1847c:	ldm	r4, {r1, r2}
   18480:	ldr	r3, [r2, #2944]	; 0xb80
   18484:	cmp	r3, r1
   18488:	bne	1844c <flatcc_emitter_reset@@Base+0x74>
   1848c:	pop	{r4, pc}
   18490:			; <UNDEFINED> instruction: 0xfffffa40

00018494 <flatcc_emitter_clear@@Base>:
   18494:	ldr	r3, [r0]
   18498:	cmp	r3, #0
   1849c:	bxeq	lr
   184a0:	ldr	r2, [r3, #2948]	; 0xb84
   184a4:	mov	r1, #0
   184a8:	push	{r4, r5, r6, lr}
   184ac:	mov	r5, r0
   184b0:	str	r1, [r2, #2944]	; 0xb80
   184b4:	ldr	r4, [r3, #2944]	; 0xb80
   184b8:	cmp	r4, r1
   184bc:	bne	184c8 <flatcc_emitter_clear@@Base+0x34>
   184c0:	b	184f8 <flatcc_emitter_clear@@Base+0x64>
   184c4:	mov	r4, r3
   184c8:	ldr	r0, [r4, #2948]	; 0xb84
   184cc:	bl	11fac <free@plt>
   184d0:	ldr	r3, [r4, #2944]	; 0xb80
   184d4:	cmp	r3, #0
   184d8:	bne	184c4 <flatcc_emitter_clear@@Base+0x30>
   184dc:	mov	r0, r4
   184e0:	bl	11fac <free@plt>
   184e4:	mov	r0, r5
   184e8:	mov	r2, #36	; 0x24
   184ec:	mov	r1, #0
   184f0:	pop	{r4, r5, r6, lr}
   184f4:	b	1203c <memset@plt>
   184f8:	mov	r4, r3
   184fc:	b	184dc <flatcc_emitter_clear@@Base+0x48>

00018500 <flatcc_emitter@@Base>:
   18500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18504:	sub	sp, sp, #12
   18508:	mov	r5, r0
   1850c:	ldr	ip, [sp, #48]	; 0x30
   18510:	ldr	r0, [r0, #24]
   18514:	cmp	r3, #0
   18518:	add	r0, r0, ip
   1851c:	str	r0, [r5, #24]
   18520:	blt	186e8 <flatcc_emitter@@Base+0x1e8>
   18524:	ldr	r0, [r5, #20]
   18528:	cmp	ip, r0
   1852c:	bls	185bc <flatcc_emitter@@Base+0xbc>
   18530:	cmp	r2, #0
   18534:	addne	r7, r1, #8
   18538:	movne	r8, r2
   1853c:	movne	r9, #2944	; 0xb80
   18540:	beq	185b0 <flatcc_emitter@@Base+0xb0>
   18544:	ldr	r6, [r7, #-4]
   18548:	ldr	sl, [r7, #-8]
   1854c:	cmp	r6, #0
   18550:	movne	r4, r0
   18554:	beq	185a4 <flatcc_emitter@@Base+0xa4>
   18558:	cmp	r6, r4
   1855c:	bls	18604 <flatcc_emitter@@Base+0x104>
   18560:	cmp	r4, #0
   18564:	beq	18610 <flatcc_emitter@@Base+0x110>
   18568:	sub	r6, r6, r4
   1856c:	mov	r2, r4
   18570:	mov	r1, sl
   18574:	ldr	r0, [r5, #16]
   18578:	bl	11fb8 <memcpy@plt>
   1857c:	ldr	r0, [r5, #20]
   18580:	ldr	r3, [r5, #16]
   18584:	add	sl, sl, r4
   18588:	add	r3, r3, r4
   1858c:	cmp	r6, #0
   18590:	sub	r4, r0, r4
   18594:	str	r3, [r5, #16]
   18598:	str	r4, [r5, #20]
   1859c:	mov	r0, r4
   185a0:	bne	18558 <flatcc_emitter@@Base+0x58>
   185a4:	subs	r8, r8, #1
   185a8:	add	r7, r7, #8
   185ac:	bne	18544 <flatcc_emitter@@Base+0x44>
   185b0:	mov	r0, #0
   185b4:	add	sp, sp, #12
   185b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185bc:	ldr	r3, [r5, #16]
   185c0:	sub	r0, r0, ip
   185c4:	add	ip, r3, ip
   185c8:	str	r0, [r5, #20]
   185cc:	str	ip, [r5, #16]
   185d0:	cmp	r2, #0
   185d4:	addne	r4, r1, #8
   185d8:	movne	r7, r2
   185dc:	beq	185b0 <flatcc_emitter@@Base+0xb0>
   185e0:	ldmdb	r4, {r1, r2}
   185e4:	mov	r0, r3
   185e8:	bl	11fb8 <memcpy@plt>
   185ec:	ldr	r2, [r4, #-4]
   185f0:	subs	r7, r7, #1
   185f4:	add	r4, r4, #8
   185f8:	add	r3, r0, r2
   185fc:	bne	185e0 <flatcc_emitter@@Base+0xe0>
   18600:	b	185b0 <flatcc_emitter@@Base+0xb0>
   18604:	mov	r4, r6
   18608:	mov	r6, #0
   1860c:	b	1856c <flatcc_emitter@@Base+0x6c>
   18610:	ldr	r4, [r5, #4]
   18614:	cmp	r4, #0
   18618:	beq	18688 <flatcc_emitter@@Base+0x188>
   1861c:	ldr	fp, [r4, #2944]	; 0xb80
   18620:	ldr	r3, [r5]
   18624:	cmp	fp, r3
   18628:	beq	18650 <flatcc_emitter@@Base+0x150>
   1862c:	str	fp, [r5, #4]
   18630:	ldr	r3, [fp, #2948]	; 0xb84
   18634:	mov	r4, #2944	; 0xb80
   18638:	str	fp, [r5, #16]
   1863c:	ldr	r3, [r3, #2952]	; 0xb88
   18640:	str	r9, [r5, #20]
   18644:	add	r3, r3, r4
   18648:	str	r3, [fp, #2952]	; 0xb88
   1864c:	b	18558 <flatcc_emitter@@Base+0x58>
   18650:	ldr	r0, [pc, #540]	; 18874 <flatcc_emitter@@Base+0x374>
   18654:	bl	12000 <malloc@plt>
   18658:	cmp	r0, #0
   1865c:	beq	18698 <flatcc_emitter@@Base+0x198>
   18660:	ldr	r3, [r5, #28]
   18664:	str	fp, [r0, #2944]	; 0xb80
   18668:	add	r3, r3, #2944	; 0xb80
   1866c:	str	r4, [r0, #2948]	; 0xb84
   18670:	str	r3, [r5, #28]
   18674:	str	r0, [fp, #2948]	; 0xb84
   18678:	str	r0, [r4, #2944]	; 0xb80
   1867c:	mov	fp, r0
   18680:	str	r0, [r5, #4]
   18684:	b	18630 <flatcc_emitter@@Base+0x130>
   18688:	ldr	r0, [pc, #484]	; 18874 <flatcc_emitter@@Base+0x374>
   1868c:	bl	12000 <malloc@plt>
   18690:	cmp	r0, #0
   18694:	bne	186a4 <flatcc_emitter@@Base+0x1a4>
   18698:	mvn	r0, #0
   1869c:	add	sp, sp, #12
   186a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a4:	mov	r2, #1472	; 0x5c0
   186a8:	ldr	r3, [r5, #28]
   186ac:	str	r2, [r5, #12]
   186b0:	str	r2, [r5, #20]
   186b4:	sub	r2, r2, #2944	; 0xb80
   186b8:	str	r2, [r0, #2952]	; 0xb88
   186bc:	str	r0, [r5]
   186c0:	add	r3, r3, #2944	; 0xb80
   186c4:	str	r0, [r5, #4]
   186c8:	str	r0, [r0, #2944]	; 0xb80
   186cc:	str	r0, [r0, #2948]	; 0xb84
   186d0:	add	r0, r0, #1472	; 0x5c0
   186d4:	str	r0, [r5, #8]
   186d8:	str	r0, [r5, #16]
   186dc:	str	r3, [r5, #28]
   186e0:	mov	r4, #1472	; 0x5c0
   186e4:	b	18558 <flatcc_emitter@@Base+0x58>
   186e8:	ldr	r0, [r5, #12]
   186ec:	cmp	ip, r0
   186f0:	bls	18770 <flatcc_emitter@@Base+0x270>
   186f4:	add	r6, r1, r2, lsl #3
   186f8:	mov	r7, r2
   186fc:	mov	r9, #2944	; 0xb80
   18700:	mov	r8, #0
   18704:	cmp	r7, #0
   18708:	beq	185b0 <flatcc_emitter@@Base+0xb0>
   1870c:	ldr	r4, [r6, #-4]
   18710:	ldr	sl, [r6, #-8]
   18714:	cmp	r4, #0
   18718:	add	sl, sl, r4
   1871c:	beq	18764 <flatcc_emitter@@Base+0x264>
   18720:	ldr	r2, [r5, #12]
   18724:	cmp	r2, r4
   18728:	bcs	18788 <flatcc_emitter@@Base+0x288>
   1872c:	cmp	r2, #0
   18730:	beq	18798 <flatcc_emitter@@Base+0x298>
   18734:	sub	r4, r4, r2
   18738:	mov	r1, r8
   1873c:	ldr	r0, [r5, #8]
   18740:	rsb	r3, r2, #0
   18744:	add	r0, r0, r3
   18748:	add	sl, sl, r3
   1874c:	str	r1, [r5, #12]
   18750:	str	r0, [r5, #8]
   18754:	mov	r1, sl
   18758:	bl	11fb8 <memcpy@plt>
   1875c:	cmp	r4, #0
   18760:	bne	18720 <flatcc_emitter@@Base+0x220>
   18764:	sub	r6, r6, #8
   18768:	sub	r7, r7, #1
   1876c:	b	18704 <flatcc_emitter@@Base+0x204>
   18770:	ldr	r3, [r5, #8]
   18774:	sub	r0, r0, ip
   18778:	sub	r3, r3, ip
   1877c:	str	r0, [r5, #12]
   18780:	str	r3, [r5, #8]
   18784:	b	185d0 <flatcc_emitter@@Base+0xd0>
   18788:	sub	r1, r2, r4
   1878c:	mov	r2, r4
   18790:	mov	r4, #0
   18794:	b	1873c <flatcc_emitter@@Base+0x23c>
   18798:	ldr	r3, [r5]
   1879c:	cmp	r3, #0
   187a0:	beq	18824 <flatcc_emitter@@Base+0x324>
   187a4:	ldr	fp, [r3, #2948]	; 0xb84
   187a8:	ldr	r2, [r5, #4]
   187ac:	cmp	fp, r2
   187b0:	beq	187e4 <flatcc_emitter@@Base+0x2e4>
   187b4:	ldr	r3, [r3, #2952]	; 0xb88
   187b8:	sub	r3, r3, #2944	; 0xb80
   187bc:	str	r3, [fp, #2952]	; 0xb88
   187c0:	str	fp, [r5]
   187c4:	ldr	r3, [fp, #2944]	; 0xb80
   187c8:	add	r2, fp, #2944	; 0xb80
   187cc:	str	r9, [r5, #12]
   187d0:	ldr	r3, [r3, #2952]	; 0xb88
   187d4:	str	r2, [r5, #8]
   187d8:	sub	r3, r3, #2944	; 0xb80
   187dc:	str	r3, [fp, #2952]	; 0xb88
   187e0:	b	18720 <flatcc_emitter@@Base+0x220>
   187e4:	ldr	r0, [pc, #136]	; 18874 <flatcc_emitter@@Base+0x374>
   187e8:	str	r3, [sp, #4]
   187ec:	bl	12000 <malloc@plt>
   187f0:	ldr	r3, [sp, #4]
   187f4:	cmp	r0, #0
   187f8:	beq	18698 <flatcc_emitter@@Base+0x198>
   187fc:	ldr	r2, [r5, #28]
   18800:	str	fp, [r0, #2948]	; 0xb84
   18804:	add	r2, r2, #2944	; 0xb80
   18808:	str	r3, [r0, #2944]	; 0xb80
   1880c:	str	r2, [r5, #28]
   18810:	str	r0, [r3, #2948]	; 0xb84
   18814:	str	r0, [fp, #2944]	; 0xb80
   18818:	str	r0, [r5]
   1881c:	mov	fp, r0
   18820:	b	187c4 <flatcc_emitter@@Base+0x2c4>
   18824:	ldr	r0, [pc, #72]	; 18874 <flatcc_emitter@@Base+0x374>
   18828:	bl	12000 <malloc@plt>
   1882c:	cmp	r0, #0
   18830:	beq	18698 <flatcc_emitter@@Base+0x198>
   18834:	mov	r2, #1472	; 0x5c0
   18838:	ldr	r3, [r5, #28]
   1883c:	str	r2, [r5, #12]
   18840:	str	r2, [r5, #20]
   18844:	sub	r2, r2, #2944	; 0xb80
   18848:	str	r2, [r0, #2952]	; 0xb88
   1884c:	str	r0, [r5]
   18850:	add	r3, r3, #2944	; 0xb80
   18854:	str	r0, [r5, #4]
   18858:	str	r0, [r0, #2944]	; 0xb80
   1885c:	str	r0, [r0, #2948]	; 0xb84
   18860:	add	r0, r0, #1472	; 0x5c0
   18864:	str	r0, [r5, #8]
   18868:	str	r0, [r5, #16]
   1886c:	str	r3, [r5, #28]
   18870:	b	18720 <flatcc_emitter@@Base+0x220>
   18874:	andeq	r0, r0, ip, lsl #23

00018878 <flatcc_emitter_copy_buffer@@Base>:
   18878:	ldr	ip, [r0, #24]
   1887c:	cmp	ip, r2
   18880:	bhi	1891c <flatcc_emitter_copy_buffer@@Base+0xa4>
   18884:	ldr	r2, [r0]
   18888:	cmp	r2, #0
   1888c:	beq	1891c <flatcc_emitter_copy_buffer@@Base+0xa4>
   18890:	mov	r3, r1
   18894:	ldr	r1, [r0, #4]
   18898:	push	{r4, r5, r6, lr}
   1889c:	cmp	r2, r1
   188a0:	mov	r5, r0
   188a4:	beq	18928 <flatcc_emitter_copy_buffer@@Base+0xb0>
   188a8:	ldr	r4, [r0, #12]
   188ac:	ldr	r1, [r5, #8]
   188b0:	rsb	r4, r4, #2944	; 0xb80
   188b4:	mov	r2, r4
   188b8:	mov	r0, r3
   188bc:	bl	11fb8 <memcpy@plt>
   188c0:	ldr	r2, [r5]
   188c4:	ldr	r1, [r5, #4]
   188c8:	add	r3, r0, r4
   188cc:	ldr	r4, [r2, #2944]	; 0xb80
   188d0:	cmp	r4, r1
   188d4:	beq	18900 <flatcc_emitter_copy_buffer@@Base+0x88>
   188d8:	mov	r6, #2944	; 0xb80
   188dc:	mov	r1, r4
   188e0:	mov	r0, r3
   188e4:	mov	r2, r6
   188e8:	bl	11fb8 <memcpy@plt>
   188ec:	ldr	r4, [r4, #2944]	; 0xb80
   188f0:	ldr	r1, [r5, #4]
   188f4:	cmp	r1, r4
   188f8:	add	r3, r0, #2944	; 0xb80
   188fc:	bne	188dc <flatcc_emitter_copy_buffer@@Base+0x64>
   18900:	ldr	r2, [r5, #20]
   18904:	mov	r0, r3
   18908:	rsb	r2, r2, #2944	; 0xb80
   1890c:	bl	11fb8 <memcpy@plt>
   18910:	mov	r3, r0
   18914:	mov	r0, r3
   18918:	pop	{r4, r5, r6, pc}
   1891c:	mov	r3, #0
   18920:	mov	r0, r3
   18924:	bx	lr
   18928:	ldr	r1, [r0, #8]
   1892c:	mov	r2, ip
   18930:	mov	r0, r3
   18934:	bl	11fb8 <memcpy@plt>
   18938:	mov	r3, r0
   1893c:	b	18914 <flatcc_emitter_copy_buffer@@Base+0x9c>

00018940 <__libc_csu_init@@Base>:
   18940:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18944:	mov	r7, r0
   18948:	ldr	r6, [pc, #72]	; 18998 <__libc_csu_init@@Base+0x58>
   1894c:	ldr	r5, [pc, #72]	; 1899c <__libc_csu_init@@Base+0x5c>
   18950:	add	r6, pc, r6
   18954:	add	r5, pc, r5
   18958:	sub	r6, r6, r5
   1895c:	mov	r8, r1
   18960:	mov	r9, r2
   18964:	bl	11f68 <strcmp@plt-0x20>
   18968:	asrs	r6, r6, #2
   1896c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18970:	mov	r4, #0
   18974:	add	r4, r4, #1
   18978:	ldr	r3, [r5], #4
   1897c:	mov	r2, r9
   18980:	mov	r1, r8
   18984:	mov	r0, r7
   18988:	blx	r3
   1898c:	cmp	r6, r4
   18990:	bne	18974 <__libc_csu_init@@Base+0x34>
   18994:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18998:			; <UNDEFINED> instruction: 0x000115b8
   1899c:			; <UNDEFINED> instruction: 0x000115b0

000189a0 <__libc_csu_fini@@Base>:
   189a0:	bx	lr

Disassembly of section .fini:

000189a4 <.fini>:
   189a4:	push	{r3, lr}
   189a8:	pop	{r3, pc}
