
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	11104 <__assert_fail@plt+0x48>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <calloc@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <calloc@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	r8, r1, r4, asr #3

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <fputs_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <raise@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <strcmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <posix_fadvise64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <read@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <free@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <_exit@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <memcpy@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <tolower@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <mbsinit@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <fwrite_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <stpcpy@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <dcgettext@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <realloc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <textdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <iswprint@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <fwrite@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <lseek64@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <__ctype_get_mb_cur_max@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <__fpending@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <ferror_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <mbrtowc@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <error@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <malloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <__libc_start_main@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <__freading@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__gmon_start__@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #24, 20	; 0x18000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <getopt_long@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #24, 20	; 0x18000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__ctype_b_loc@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #24, 20	; 0x18000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <exit@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #24, 20	; 0x18000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <bcmp@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #24, 20	; 0x18000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <strlen@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #24, 20	; 0x18000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <strchr@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #24, 20	; 0x18000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <__errno_location@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #24, 20	; 0x18000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__sprintf_chk@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #24, 20	; 0x18000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <__cxa_atexit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #24, 20	; 0x18000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <memset@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #24, 20	; 0x18000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <__printf_chk@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #24, 20	; 0x18000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <fileno@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #24, 20	; 0x18000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <strtoumax@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <__fprintf_chk@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <fclose@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <fseeko64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <setlocale@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <toupper@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <strrchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <nl_langinfo@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <bindtextdomain@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <strncmp@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <abort@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <close@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <__assert_fail@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #28]!

Disassembly of section .text:

000110c8 <.text>:
   110c8:	mov	fp, #0
   110cc:	mov	lr, #0
   110d0:	pop	{r1}		; (ldr r1, [sp], #4)
   110d4:	mov	r2, sp
   110d8:	push	{r2}		; (str r2, [sp, #-4]!)
   110dc:	push	{r0}		; (str r0, [sp, #-4]!)
   110e0:	ldr	ip, [pc, #16]	; 110f8 <__assert_fail@plt+0x3c>
   110e4:	push	{ip}		; (str ip, [sp, #-4]!)
   110e8:	ldr	r0, [pc, #12]	; 110fc <__assert_fail@plt+0x40>
   110ec:	ldr	r3, [pc, #12]	; 11100 <__assert_fail@plt+0x44>
   110f0:	bl	10f78 <__libc_start_main@plt>
   110f4:	bl	110a4 <abort@plt>
   110f8:	andeq	r7, r1, r0, lsr #3
   110fc:	muleq	r1, ip, r4
   11100:	andeq	r7, r1, r0, asr #2
   11104:	ldr	r3, [pc, #20]	; 11120 <__assert_fail@plt+0x64>
   11108:	ldr	r2, [pc, #20]	; 11124 <__assert_fail@plt+0x68>
   1110c:	add	r3, pc, r3
   11110:	ldr	r2, [r3, r2]
   11114:	cmp	r2, #0
   11118:	bxeq	lr
   1111c:	b	10f90 <__gmon_start__@plt>
   11120:	andeq	r7, r1, ip, ror #29
   11124:	andeq	r0, r0, r4, ror #1
   11128:	ldr	r0, [pc, #24]	; 11148 <__assert_fail@plt+0x8c>
   1112c:	ldr	r3, [pc, #24]	; 1114c <__assert_fail@plt+0x90>
   11130:	cmp	r3, r0
   11134:	bxeq	lr
   11138:	ldr	r3, [pc, #16]	; 11150 <__assert_fail@plt+0x94>
   1113c:	cmp	r3, #0
   11140:	bxeq	lr
   11144:	bx	r3
   11148:	andeq	r9, r2, r8, lsr r1
   1114c:	andeq	r9, r2, r8, lsr r1
   11150:	andeq	r0, r0, r0
   11154:	ldr	r0, [pc, #36]	; 11180 <__assert_fail@plt+0xc4>
   11158:	ldr	r1, [pc, #36]	; 11184 <__assert_fail@plt+0xc8>
   1115c:	sub	r1, r1, r0
   11160:	asr	r1, r1, #2
   11164:	add	r1, r1, r1, lsr #31
   11168:	asrs	r1, r1, #1
   1116c:	bxeq	lr
   11170:	ldr	r3, [pc, #16]	; 11188 <__assert_fail@plt+0xcc>
   11174:	cmp	r3, #0
   11178:	bxeq	lr
   1117c:	bx	r3
   11180:	andeq	r9, r2, r8, lsr r1
   11184:	andeq	r9, r2, r8, lsr r1
   11188:	andeq	r0, r0, r0
   1118c:	push	{r4, lr}
   11190:	ldr	r4, [pc, #24]	; 111b0 <__assert_fail@plt+0xf4>
   11194:	ldrb	r3, [r4]
   11198:	cmp	r3, #0
   1119c:	popne	{r4, pc}
   111a0:	bl	11128 <__assert_fail@plt+0x6c>
   111a4:	mov	r3, #1
   111a8:	strb	r3, [r4]
   111ac:	pop	{r4, pc}
   111b0:	andeq	r9, r2, r8, asr r1
   111b4:	b	11154 <__assert_fail@plt+0x98>
   111b8:	push	{fp, lr}
   111bc:	mov	fp, sp
   111c0:	mov	r4, r0
   111c4:	cmp	r0, #0
   111c8:	bne	112d0 <__assert_fail@plt+0x214>
   111cc:	movw	r1, #29171	; 0x71f3
   111d0:	movt	r1, #1
   111d4:	mov	r0, #0
   111d8:	mov	r2, #5
   111dc:	bl	10ee8 <dcgettext@plt>
   111e0:	mov	r1, r0
   111e4:	movw	r0, #46184	; 0xb468
   111e8:	movt	r0, #2
   111ec:	ldr	r2, [r0]
   111f0:	mov	r0, #1
   111f4:	bl	11014 <__printf_chk@plt>
   111f8:	movw	r1, #29206	; 0x7216
   111fc:	movt	r1, #1
   11200:	mov	r0, #0
   11204:	mov	r2, #5
   11208:	bl	10ee8 <dcgettext@plt>
   1120c:	movw	r5, #37204	; 0x9154
   11210:	movt	r5, #2
   11214:	ldr	r1, [r5]
   11218:	bl	10e4c <fputs_unlocked@plt>
   1121c:	movw	r1, #29702	; 0x7406
   11220:	movt	r1, #1
   11224:	mov	r0, #0
   11228:	mov	r2, #5
   1122c:	bl	10ee8 <dcgettext@plt>
   11230:	ldr	r1, [r5]
   11234:	bl	10e4c <fputs_unlocked@plt>
   11238:	movw	r1, #29747	; 0x7433
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10ee8 <dcgettext@plt>
   1124c:	ldr	r1, [r5]
   11250:	bl	10e4c <fputs_unlocked@plt>
   11254:	movw	r1, #29801	; 0x7469
   11258:	movt	r1, #1
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	bl	10ee8 <dcgettext@plt>
   11268:	ldr	r1, [r5]
   1126c:	bl	10e4c <fputs_unlocked@plt>
   11270:	movw	r1, #30174	; 0x75de
   11274:	movt	r1, #1
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	bl	10ee8 <dcgettext@plt>
   11284:	ldr	r1, [r5]
   11288:	bl	10e4c <fputs_unlocked@plt>
   1128c:	movw	r1, #30599	; 0x7787
   11290:	movt	r1, #1
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	bl	10ee8 <dcgettext@plt>
   112a0:	ldr	r1, [r5]
   112a4:	bl	10e4c <fputs_unlocked@plt>
   112a8:	movw	r1, #31010	; 0x7922
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10ee8 <dcgettext@plt>
   112bc:	ldr	r1, [r5]
   112c0:	bl	10e4c <fputs_unlocked@plt>
   112c4:	bl	11314 <__assert_fail@plt+0x258>
   112c8:	mov	r0, r4
   112cc:	bl	10fb4 <exit@plt>
   112d0:	movw	r0, #37192	; 0x9148
   112d4:	movt	r0, #2
   112d8:	ldr	r5, [r0]
   112dc:	movw	r1, #29132	; 0x71cc
   112e0:	movt	r1, #1
   112e4:	mov	r0, #0
   112e8:	mov	r2, #5
   112ec:	bl	10ee8 <dcgettext@plt>
   112f0:	mov	r2, r0
   112f4:	movw	r0, #46184	; 0xb468
   112f8:	movt	r0, #2
   112fc:	ldr	r3, [r0]
   11300:	mov	r0, r5
   11304:	mov	r1, #1
   11308:	bl	11038 <__fprintf_chk@plt>
   1130c:	mov	r0, r4
   11310:	bl	10fb4 <exit@plt>
   11314:	push	{r4, r5, r6, sl, fp, lr}
   11318:	add	fp, sp, #16
   1131c:	sub	sp, sp, #56	; 0x38
   11320:	movw	r0, #34480	; 0x86b0
   11324:	movt	r0, #1
   11328:	add	r1, r0, #32
   1132c:	mov	r2, #48	; 0x30
   11330:	vld1.64	{d16-d17}, [r1]
   11334:	mov	r6, sp
   11338:	add	r1, r6, #32
   1133c:	add	r3, r0, #16
   11340:	vld1.64	{d18-d19}, [r0], r2
   11344:	vld1.64	{d20-d21}, [r3]
   11348:	vldr	d22, [r0]
   1134c:	vst1.64	{d16-d17}, [r1]
   11350:	add	r0, r6, #16
   11354:	vst1.64	{d20-d21}, [r0]
   11358:	mov	r0, r6
   1135c:	vst1.64	{d18-d19}, [r0], r2
   11360:	vstr	d22, [r0]
   11364:	ldr	r1, [sp]
   11368:	cmp	r1, #0
   1136c:	movw	r4, #31482	; 0x7afa
   11370:	movt	r4, #1
   11374:	beq	1139c <__assert_fail@plt+0x2e0>
   11378:	mov	r6, sp
   1137c:	movw	r5, #31482	; 0x7afa
   11380:	movt	r5, #1
   11384:	mov	r0, r5
   11388:	bl	10e64 <strcmp@plt>
   1138c:	cmp	r0, #0
   11390:	ldrne	r1, [r6, #8]!
   11394:	cmpne	r1, #0
   11398:	bne	11384 <__assert_fail@plt+0x2c8>
   1139c:	ldr	r5, [r6, #4]
   113a0:	movw	r1, #31992	; 0x7cf8
   113a4:	movt	r1, #1
   113a8:	mov	r0, #0
   113ac:	mov	r2, #5
   113b0:	bl	10ee8 <dcgettext@plt>
   113b4:	mov	r1, r0
   113b8:	movw	r2, #31519	; 0x7b1f
   113bc:	movt	r2, #1
   113c0:	movw	r3, #32015	; 0x7d0f
   113c4:	movt	r3, #1
   113c8:	mov	r0, #1
   113cc:	bl	11014 <__printf_chk@plt>
   113d0:	cmp	r5, #0
   113d4:	moveq	r5, r4
   113d8:	mov	r0, #5
   113dc:	mov	r1, #0
   113e0:	bl	1105c <setlocale@plt>
   113e4:	cmp	r0, #0
   113e8:	beq	11428 <__assert_fail@plt+0x36c>
   113ec:	movw	r1, #32055	; 0x7d37
   113f0:	movt	r1, #1
   113f4:	mov	r2, #3
   113f8:	bl	11098 <strncmp@plt>
   113fc:	cmp	r0, #0
   11400:	beq	11428 <__assert_fail@plt+0x36c>
   11404:	movw	r1, #32059	; 0x7d3b
   11408:	movt	r1, #1
   1140c:	mov	r0, #0
   11410:	mov	r2, #5
   11414:	bl	10ee8 <dcgettext@plt>
   11418:	movw	r1, #37204	; 0x9154
   1141c:	movt	r1, #2
   11420:	ldr	r1, [r1]
   11424:	bl	10e4c <fputs_unlocked@plt>
   11428:	movw	r1, #32130	; 0x7d82
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	bl	10ee8 <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	movw	r2, #32015	; 0x7d0f
   11444:	movt	r2, #1
   11448:	mov	r0, #1
   1144c:	mov	r3, r4
   11450:	bl	11014 <__printf_chk@plt>
   11454:	movw	r0, #31925	; 0x7cb5
   11458:	movt	r0, #1
   1145c:	movw	r6, #32207	; 0x7dcf
   11460:	movt	r6, #1
   11464:	cmp	r5, r4
   11468:	moveq	r6, r0
   1146c:	movw	r1, #32157	; 0x7d9d
   11470:	movt	r1, #1
   11474:	mov	r0, #0
   11478:	mov	r2, #5
   1147c:	bl	10ee8 <dcgettext@plt>
   11480:	mov	r1, r0
   11484:	mov	r0, #1
   11488:	mov	r2, r5
   1148c:	mov	r3, r6
   11490:	sub	sp, fp, #16
   11494:	pop	{r4, r5, r6, sl, fp, lr}
   11498:	b	11014 <__printf_chk@plt>
   1149c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a0:	add	fp, sp, #28
   114a4:	sub	sp, sp, #100	; 0x64
   114a8:	mov	r5, r1
   114ac:	mov	r4, r0
   114b0:	ldr	r0, [r1]
   114b4:	bl	13cd8 <__assert_fail@plt+0x2c1c>
   114b8:	movw	r1, #32207	; 0x7dcf
   114bc:	movt	r1, #1
   114c0:	mov	r0, #6
   114c4:	bl	1105c <setlocale@plt>
   114c8:	movw	r6, #31523	; 0x7b23
   114cc:	movt	r6, #1
   114d0:	movw	r1, #31485	; 0x7afd
   114d4:	movt	r1, #1
   114d8:	mov	r0, r6
   114dc:	bl	1108c <bindtextdomain@plt>
   114e0:	mov	r0, r6
   114e4:	bl	10f00 <textdomain@plt>
   114e8:	movw	r0, #15240	; 0x3b88
   114ec:	movt	r0, #1
   114f0:	bl	171a4 <__assert_fail@plt+0x60e8>
   114f4:	mov	r9, #0
   114f8:	movw	r6, #31509	; 0x7b15
   114fc:	movt	r6, #1
   11500:	movw	r7, #34368	; 0x8640
   11504:	movt	r7, #1
   11508:	movw	r8, #31517	; 0x7b1d
   1150c:	movt	r8, #1
   11510:	mov	sl, #1
   11514:	str	r9, [sp]
   11518:	mov	r0, r4
   1151c:	mov	r1, r5
   11520:	mov	r2, r6
   11524:	mov	r3, r7
   11528:	bl	10f9c <getopt_long@plt>
   1152c:	cmp	r0, #64	; 0x40
   11530:	ble	11674 <__assert_fail@plt+0x5b8>
   11534:	sub	r0, r0, #65	; 0x41
   11538:	cmp	r0, #51	; 0x33
   1153c:	bhi	11d1c <__assert_fail@plt+0xc60>
   11540:	add	r1, pc, #0
   11544:	ldr	pc, [r1, r0, lsl #2]
   11548:	andeq	r1, r1, r8, lsr r6
   1154c:	andeq	r1, r1, ip, lsl sp
   11550:	andeq	r1, r1, r8, lsl r6
   11554:	andeq	r1, r1, ip, lsl sp
   11558:	andeq	r1, r1, ip, lsl sp
   1155c:	andeq	r1, r1, ip, lsl sp
   11560:	andeq	r1, r1, ip, lsl sp
   11564:	andeq	r1, r1, ip, lsl sp
   11568:	andeq	r1, r1, ip, lsl sp
   1156c:	andeq	r1, r1, ip, lsl sp
   11570:	andeq	r1, r1, ip, lsl sp
   11574:	andeq	r1, r1, ip, lsl sp
   11578:	andeq	r1, r1, ip, lsl sp
   1157c:	andeq	r1, r1, ip, lsl sp
   11580:	andeq	r1, r1, ip, lsl sp
   11584:	andeq	r1, r1, ip, lsl sp
   11588:	andeq	r1, r1, ip, lsl sp
   1158c:	andeq	r1, r1, ip, lsl sp
   11590:	andeq	r1, r1, ip, lsl sp
   11594:	andeq	r1, r1, ip, lsl sp
   11598:	andeq	r1, r1, ip, lsl sp
   1159c:	andeq	r1, r1, ip, lsl sp
   115a0:	andeq	r1, r1, ip, lsl sp
   115a4:	andeq	r1, r1, ip, lsl sp
   115a8:	andeq	r1, r1, ip, lsl sp
   115ac:	andeq	r1, r1, ip, lsl sp
   115b0:	andeq	r1, r1, ip, lsl sp
   115b4:	andeq	r1, r1, ip, lsl sp
   115b8:	andeq	r1, r1, ip, lsl sp
   115bc:	andeq	r1, r1, ip, lsl sp
   115c0:	andeq	r1, r1, ip, lsl sp
   115c4:	andeq	r1, r1, ip, lsl sp
   115c8:	andeq	r1, r1, ip, lsl sp
   115cc:	andeq	r1, r1, ip, lsl sp
   115d0:	andeq	r1, r1, r8, lsl r6
   115d4:	andeq	r1, r1, r4, ror #12
   115d8:	andeq	r1, r1, ip, lsl sp
   115dc:	andeq	r1, r1, ip, lsl sp
   115e0:	andeq	r1, r1, ip, lsl sp
   115e4:	andeq	r1, r1, ip, lsl sp
   115e8:	andeq	r1, r1, ip, lsl sp
   115ec:	andeq	r1, r1, ip, lsl sp
   115f0:	andeq	r1, r1, ip, lsl sp
   115f4:	andeq	r1, r1, ip, lsl sp
   115f8:	andeq	r1, r1, ip, lsl sp
   115fc:	andeq	r1, r1, ip, lsl sp
   11600:	andeq	r1, r1, ip, lsl sp
   11604:	andeq	r1, r1, ip, lsl sp
   11608:	andeq	r1, r1, ip, lsl sp
   1160c:	andeq	r1, r1, ip, lsl sp
   11610:	andeq	r1, r1, r4, asr r6
   11614:	andeq	r1, r1, r8, lsr #12
   11618:	movw	r0, #37209	; 0x9159
   1161c:	movt	r0, #2
   11620:	strb	sl, [r0]
   11624:	b	11514 <__assert_fail@plt+0x458>
   11628:	movw	r0, #37212	; 0x915c
   1162c:	movt	r0, #2
   11630:	strb	sl, [r0]
   11634:	b	11514 <__assert_fail@plt+0x458>
   11638:	mov	r0, #3
   1163c:	mov	r1, r8
   11640:	bl	1105c <setlocale@plt>
   11644:	mov	r0, #0
   11648:	mov	r1, r8
   1164c:	bl	1105c <setlocale@plt>
   11650:	b	11514 <__assert_fail@plt+0x458>
   11654:	movw	r0, #37211	; 0x915b
   11658:	movt	r0, #2
   1165c:	strb	sl, [r0]
   11660:	b	11514 <__assert_fail@plt+0x458>
   11664:	movw	r0, #37210	; 0x915a
   11668:	movt	r0, #2
   1166c:	strb	sl, [r0]
   11670:	b	11514 <__assert_fail@plt+0x458>
   11674:	cmn	r0, #1
   11678:	bne	11ba0 <__assert_fail@plt+0xae4>
   1167c:	movw	r8, #37184	; 0x9140
   11680:	movt	r8, #2
   11684:	ldr	r0, [r8]
   11688:	sub	r7, r4, r0
   1168c:	mov	r0, #0
   11690:	cmp	r7, #2
   11694:	bne	116a8 <__assert_fail@plt+0x5ec>
   11698:	movw	r0, #37210	; 0x915a
   1169c:	movt	r0, #2
   116a0:	ldrb	r0, [r0]
   116a4:	eor	r0, r0, #1
   116a8:	and	r0, r0, #1
   116ac:	movw	r9, #37213	; 0x915d
   116b0:	movt	r9, #2
   116b4:	strb	r0, [r9]
   116b8:	movw	r0, #37211	; 0x915b
   116bc:	movt	r0, #2
   116c0:	ldrb	r0, [r0]
   116c4:	movw	r1, #37210	; 0x915a
   116c8:	movt	r1, #2
   116cc:	ldrb	r1, [r1]
   116d0:	mov	r6, #2
   116d4:	teq	r1, r0
   116d8:	mov	r2, #2
   116dc:	movwne	r2, #1
   116e0:	cmp	r1, #0
   116e4:	movwne	r6, #1
   116e8:	cmp	r0, #0
   116ec:	movwne	r6, #2
   116f0:	cmp	r7, r2
   116f4:	blt	11c00 <__assert_fail@plt+0xb44>
   116f8:	cmp	r6, r7
   116fc:	blt	11c34 <__assert_fail@plt+0xb78>
   11700:	add	r4, sp, #56	; 0x38
   11704:	mov	r0, r4
   11708:	bl	11d58 <__assert_fail@plt+0xc9c>
   1170c:	ldr	r0, [r8]
   11710:	ldr	r0, [r5, r0, lsl #2]
   11714:	mov	r1, r4
   11718:	bl	11d80 <__assert_fail@plt+0xcc4>
   1171c:	mov	r6, #1
   11720:	cmp	r0, #0
   11724:	beq	11b94 <__assert_fail@plt+0xad8>
   11728:	mov	sl, #0
   1172c:	cmp	r7, #2
   11730:	bne	1175c <__assert_fail@plt+0x6a0>
   11734:	add	sl, sp, #16
   11738:	mov	r0, sl
   1173c:	bl	11d58 <__assert_fail@plt+0xc9c>
   11740:	ldr	r0, [r8]
   11744:	add	r0, r5, r0, lsl #2
   11748:	ldr	r0, [r0, #4]
   1174c:	mov	r1, sl
   11750:	bl	11d80 <__assert_fail@plt+0xcc4>
   11754:	cmp	r0, #0
   11758:	beq	11b94 <__assert_fail@plt+0xad8>
   1175c:	add	r0, sp, #56	; 0x38
   11760:	mov	r1, sl
   11764:	bl	11dc0 <__assert_fail@plt+0xd04>
   11768:	mov	r0, #0
   1176c:	mov	r1, #0
   11770:	bl	16214 <__assert_fail@plt+0x5158>
   11774:	mov	r0, #1
   11778:	mov	r1, #0
   1177c:	bl	16214 <__assert_fail@plt+0x5158>
   11780:	movw	r0, #37200	; 0x9150
   11784:	movt	r0, #2
   11788:	ldr	r0, [r0]
   1178c:	mov	r1, #2
   11790:	bl	13c74 <__assert_fail@plt+0x2bb8>
   11794:	movw	r0, #37211	; 0x915b
   11798:	movt	r0, #2
   1179c:	ldrb	r0, [r0]
   117a0:	cmp	r7, #1
   117a4:	bne	117dc <__assert_fail@plt+0x720>
   117a8:	cmp	r0, #0
   117ac:	beq	117dc <__assert_fail@plt+0x720>
   117b0:	movw	r0, #37209	; 0x9159
   117b4:	movt	r0, #2
   117b8:	ldrb	r1, [r0]
   117bc:	add	r0, sp, #56	; 0x38
   117c0:	movw	r2, #37214	; 0x915e
   117c4:	movt	r2, #2
   117c8:	bl	11f44 <__assert_fail@plt+0xe88>
   117cc:	movw	r0, #8600	; 0x2198
   117d0:	movt	r0, #1
   117d4:	bl	11fbc <__assert_fail@plt+0xf00>
   117d8:	b	11b80 <__assert_fail@plt+0xac4>
   117dc:	movw	r1, #37210	; 0x915a
   117e0:	movt	r1, #2
   117e4:	ldrb	r1, [r1]
   117e8:	cmp	r7, #1
   117ec:	bne	11884 <__assert_fail@plt+0x7c8>
   117f0:	cmp	r1, #0
   117f4:	beq	11884 <__assert_fail@plt+0x7c8>
   117f8:	movw	r0, #37209	; 0x9159
   117fc:	movt	r0, #2
   11800:	ldrb	r1, [r0]
   11804:	add	r0, sp, #56	; 0x38
   11808:	movw	r2, #45662	; 0xb25e
   1180c:	movt	r2, #2
   11810:	bl	11f44 <__assert_fail@plt+0xe88>
   11814:	movw	r4, #37470	; 0x925e
   11818:	movt	r4, #2
   1181c:	movw	r6, #37204	; 0x9154
   11820:	movt	r6, #2
   11824:	mov	r0, r4
   11828:	mov	r1, #8192	; 0x2000
   1182c:	bl	121e4 <__assert_fail@plt+0x1128>
   11830:	cmp	r0, #0
   11834:	beq	11b80 <__assert_fail@plt+0xac4>
   11838:	mov	r5, r0
   1183c:	ldr	r3, [r6]
   11840:	mov	r0, r4
   11844:	mov	r1, #1
   11848:	mov	r2, r5
   1184c:	bl	10ed0 <fwrite_unlocked@plt>
   11850:	cmp	r0, r5
   11854:	beq	11824 <__assert_fail@plt+0x768>
   11858:	bl	10fe4 <__errno_location@plt>
   1185c:	ldr	r4, [r0]
   11860:	movw	r1, #31786	; 0x7c2a
   11864:	movt	r1, #1
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	bl	10ee8 <dcgettext@plt>
   11874:	mov	r2, r0
   11878:	mov	r0, #1
   1187c:	mov	r1, r4
   11880:	bl	10f60 <error@plt>
   11884:	sub	r2, r7, #2
   11888:	clz	r2, r2
   1188c:	lsr	r2, r2, #5
   11890:	and	r1, r2, r1
   11894:	and	r0, r0, r1
   11898:	cmp	r0, #1
   1189c:	bne	118dc <__assert_fail@plt+0x820>
   118a0:	movw	r0, #37209	; 0x9159
   118a4:	movt	r0, #2
   118a8:	ldrb	r1, [r0]
   118ac:	add	r0, sp, #56	; 0x38
   118b0:	movw	r2, #45662	; 0xb25e
   118b4:	movt	r2, #2
   118b8:	bl	11f44 <__assert_fail@plt+0xe88>
   118bc:	movw	r2, #37214	; 0x915e
   118c0:	movt	r2, #2
   118c4:	mov	r0, sl
   118c8:	mov	r1, #0
   118cc:	bl	11f44 <__assert_fail@plt+0xe88>
   118d0:	movw	r0, #8676	; 0x21e4
   118d4:	movt	r0, #1
   118d8:	b	117d4 <__assert_fail@plt+0x718>
   118dc:	ldrb	r0, [r9]
   118e0:	cmp	r0, #0
   118e4:	beq	11b80 <__assert_fail@plt+0xac4>
   118e8:	movw	r0, #37209	; 0x9159
   118ec:	movt	r0, #2
   118f0:	ldrb	r0, [r0]
   118f4:	cmp	r0, #1
   118f8:	bne	11978 <__assert_fail@plt+0x8bc>
   118fc:	add	r0, sp, #56	; 0x38
   11900:	mov	r4, #0
   11904:	movw	r5, #45662	; 0xb25e
   11908:	movt	r5, #2
   1190c:	mov	r1, #0
   11910:	mov	r2, r5
   11914:	bl	11f44 <__assert_fail@plt+0xe88>
   11918:	mvn	r1, #0
   1191c:	mvn	r0, #1
   11920:	strd	r0, [sl, #8]
   11924:	movw	r6, #45918	; 0xb35e
   11928:	movt	r6, #2
   1192c:	strb	r4, [r6, r4]
   11930:	add	r4, r4, #1
   11934:	cmp	r4, #256	; 0x100
   11938:	bne	1192c <__assert_fail@plt+0x870>
   1193c:	mov	r7, #0
   11940:	b	11950 <__assert_fail@plt+0x894>
   11944:	add	r7, r7, #1
   11948:	cmp	r7, #256	; 0x100
   1194c:	beq	11b04 <__assert_fail@plt+0xa48>
   11950:	ldrb	r0, [r5, r7]
   11954:	cmp	r0, #0
   11958:	bne	11944 <__assert_fail@plt+0x888>
   1195c:	mov	r0, sl
   11960:	mov	r1, #0
   11964:	bl	1229c <__assert_fail@plt+0x11e0>
   11968:	cmn	r0, #1
   1196c:	beq	11af0 <__assert_fail@plt+0xa34>
   11970:	strb	r0, [r6, r7]
   11974:	b	11944 <__assert_fail@plt+0x888>
   11978:	mov	r0, #0
   1197c:	movw	r5, #45918	; 0xb35e
   11980:	movt	r5, #2
   11984:	strb	r0, [r5, r0]
   11988:	add	r0, r0, #1
   1198c:	cmp	r0, #256	; 0x100
   11990:	bne	11984 <__assert_fail@plt+0x8c8>
   11994:	mvn	r1, #0
   11998:	str	r1, [sp, #68]	; 0x44
   1199c:	mvn	r0, #1
   119a0:	str	r0, [sp, #64]	; 0x40
   119a4:	strd	r0, [sl, #8]
   119a8:	add	r4, sp, #56	; 0x38
   119ac:	b	11a6c <__assert_fail@plt+0x9b0>
   119b0:	strb	r0, [r5, r6]
   119b4:	b	11a50 <__assert_fail@plt+0x994>
   119b8:	mov	r6, #0
   119bc:	bl	10fa8 <__ctype_b_loc@plt>
   119c0:	mov	r7, r0
   119c4:	movw	r9, #65024	; 0xfe00
   119c8:	movt	r9, #65535	; 0xffff
   119cc:	b	119e0 <__assert_fail@plt+0x924>
   119d0:	add	r9, r9, #2
   119d4:	add	r6, r6, #1
   119d8:	cmp	r6, #256	; 0x100
   119dc:	beq	11a50 <__assert_fail@plt+0x994>
   119e0:	ldr	r0, [r7]
   119e4:	add	r0, r0, r9
   119e8:	ldrb	r0, [r0, #513]	; 0x201
   119ec:	tst	r0, #2
   119f0:	beq	119d0 <__assert_fail@plt+0x914>
   119f4:	mov	r0, r6
   119f8:	bl	11068 <toupper@plt>
   119fc:	strb	r0, [r5, r6]
   11a00:	b	119d0 <__assert_fail@plt+0x914>
   11a04:	mov	r6, #0
   11a08:	bl	10fa8 <__ctype_b_loc@plt>
   11a0c:	mov	r7, r0
   11a10:	movw	r4, #65024	; 0xfe00
   11a14:	movt	r4, #65535	; 0xffff
   11a18:	b	11a2c <__assert_fail@plt+0x970>
   11a1c:	add	r4, r4, #2
   11a20:	add	r6, r6, #1
   11a24:	cmp	r6, #256	; 0x100
   11a28:	beq	11a50 <__assert_fail@plt+0x994>
   11a2c:	ldr	r0, [r7]
   11a30:	add	r0, r0, r4
   11a34:	ldrb	r0, [r0, #513]	; 0x201
   11a38:	tst	r0, #1
   11a3c:	beq	11a1c <__assert_fail@plt+0x960>
   11a40:	mov	r0, r6
   11a44:	bl	10eb8 <tolower@plt>
   11a48:	strb	r0, [r5, r6]
   11a4c:	b	11a1c <__assert_fail@plt+0x960>
   11a50:	cmp	r8, #2
   11a54:	add	r4, sp, #56	; 0x38
   11a58:	beq	11a6c <__assert_fail@plt+0x9b0>
   11a5c:	mov	r0, r4
   11a60:	bl	12520 <__assert_fail@plt+0x1464>
   11a64:	mov	r0, sl
   11a68:	bl	12520 <__assert_fail@plt+0x1464>
   11a6c:	mov	r0, r4
   11a70:	add	r1, sp, #12
   11a74:	bl	1229c <__assert_fail@plt+0x11e0>
   11a78:	mov	r6, r0
   11a7c:	mov	r0, sl
   11a80:	add	r1, sp, #8
   11a84:	bl	1229c <__assert_fail@plt+0x11e0>
   11a88:	ldr	r8, [sp, #8]
   11a8c:	ldr	r1, [sp, #12]
   11a90:	cmp	r1, #0
   11a94:	cmpeq	r8, #1
   11a98:	beq	119b8 <__assert_fail@plt+0x8fc>
   11a9c:	cmp	r1, #1
   11aa0:	cmpeq	r8, #0
   11aa4:	beq	11a04 <__assert_fail@plt+0x948>
   11aa8:	cmn	r6, #1
   11aac:	cmnne	r0, #1
   11ab0:	bne	119b0 <__assert_fail@plt+0x8f4>
   11ab4:	cmn	r6, #1
   11ab8:	beq	11b04 <__assert_fail@plt+0xa48>
   11abc:	movw	r0, #37212	; 0x915c
   11ac0:	movt	r0, #2
   11ac4:	ldrb	r0, [r0]
   11ac8:	cmp	r0, #0
   11acc:	bne	11b04 <__assert_fail@plt+0xa48>
   11ad0:	movw	r0, #31856	; 0x7c70
   11ad4:	movt	r0, #1
   11ad8:	movw	r1, #31824	; 0x7c50
   11adc:	movt	r1, #1
   11ae0:	movw	r3, #31833	; 0x7c59
   11ae4:	movt	r3, #1
   11ae8:	movw	r2, #1893	; 0x765
   11aec:	bl	110bc <__assert_fail@plt>
   11af0:	movw	r0, #37212	; 0x915c
   11af4:	movt	r0, #2
   11af8:	ldrb	r0, [r0]
   11afc:	cmp	r0, #0
   11b00:	beq	11d38 <__assert_fail@plt+0xc7c>
   11b04:	movw	r0, #37211	; 0x915b
   11b08:	movt	r0, #2
   11b0c:	ldrb	r0, [r0]
   11b10:	cmp	r0, #0
   11b14:	beq	11b38 <__assert_fail@plt+0xa7c>
   11b18:	movw	r2, #37214	; 0x915e
   11b1c:	movt	r2, #2
   11b20:	mov	r0, sl
   11b24:	mov	r1, #0
   11b28:	bl	11f44 <__assert_fail@plt+0xe88>
   11b2c:	movw	r0, #9528	; 0x2538
   11b30:	movt	r0, #1
   11b34:	b	117d4 <__assert_fail@plt+0x718>
   11b38:	movw	r4, #37470	; 0x925e
   11b3c:	movt	r4, #2
   11b40:	movw	r6, #37204	; 0x9154
   11b44:	movt	r6, #2
   11b48:	mov	r0, r4
   11b4c:	mov	r1, #8192	; 0x2000
   11b50:	bl	12538 <__assert_fail@plt+0x147c>
   11b54:	cmp	r0, #0
   11b58:	beq	11b80 <__assert_fail@plt+0xac4>
   11b5c:	mov	r5, r0
   11b60:	ldr	r3, [r6]
   11b64:	mov	r0, r4
   11b68:	mov	r1, #1
   11b6c:	mov	r2, r5
   11b70:	bl	10ed0 <fwrite_unlocked@plt>
   11b74:	cmp	r0, r5
   11b78:	beq	11b48 <__assert_fail@plt+0xa8c>
   11b7c:	b	11858 <__assert_fail@plt+0x79c>
   11b80:	mov	r6, #0
   11b84:	mov	r0, #0
   11b88:	bl	110b0 <close@plt>
   11b8c:	cmp	r0, #0
   11b90:	bne	11d24 <__assert_fail@plt+0xc68>
   11b94:	mov	r0, r6
   11b98:	sub	sp, fp, #28
   11b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba0:	cmn	r0, #3
   11ba4:	bne	11bf0 <__assert_fail@plt+0xb34>
   11ba8:	movw	r0, #37104	; 0x90f0
   11bac:	movt	r0, #2
   11bb0:	ldr	r3, [r0]
   11bb4:	movw	r0, #37204	; 0x9154
   11bb8:	movt	r0, #2
   11bbc:	ldr	r0, [r0]
   11bc0:	mov	r1, #0
   11bc4:	movw	r2, #31533	; 0x7b2d
   11bc8:	movt	r2, #1
   11bcc:	str	r2, [sp]
   11bd0:	str	r1, [sp, #4]
   11bd4:	movw	r1, #31482	; 0x7afa
   11bd8:	movt	r1, #1
   11bdc:	movw	r2, #31519	; 0x7b1f
   11be0:	movt	r2, #1
   11be4:	bl	15d3c <__assert_fail@plt+0x4c80>
   11be8:	mov	r0, #0
   11bec:	bl	10fb4 <exit@plt>
   11bf0:	cmn	r0, #2
   11bf4:	bne	11d1c <__assert_fail@plt+0xc60>
   11bf8:	mov	r0, #0
   11bfc:	bl	111b8 <__assert_fail@plt+0xfc>
   11c00:	cmp	r7, #0
   11c04:	bne	11c90 <__assert_fail@plt+0xbd4>
   11c08:	movw	r1, #31546	; 0x7b3a
   11c0c:	movt	r1, #1
   11c10:	mov	r0, #0
   11c14:	mov	r2, #5
   11c18:	bl	10ee8 <dcgettext@plt>
   11c1c:	mov	r2, r0
   11c20:	mov	r0, #0
   11c24:	mov	r1, #0
   11c28:	bl	10f60 <error@plt>
   11c2c:	mov	r0, #1
   11c30:	bl	111b8 <__assert_fail@plt+0xfc>
   11c34:	movw	r1, #31699	; 0x7bd3
   11c38:	movt	r1, #1
   11c3c:	mov	r0, #0
   11c40:	mov	r2, #5
   11c44:	bl	10ee8 <dcgettext@plt>
   11c48:	mov	r4, r0
   11c4c:	ldr	r0, [r8]
   11c50:	add	r0, r0, r6
   11c54:	ldr	r0, [r5, r0, lsl #2]
   11c58:	bl	154cc <__assert_fail@plt+0x4410>
   11c5c:	mov	r3, r0
   11c60:	mov	r0, #0
   11c64:	mov	r1, #0
   11c68:	mov	r2, r4
   11c6c:	bl	10f60 <error@plt>
   11c70:	cmp	r7, #2
   11c74:	bne	11d1c <__assert_fail@plt+0xc60>
   11c78:	movw	r0, #37192	; 0x9148
   11c7c:	movt	r0, #2
   11c80:	ldr	r4, [r0]
   11c84:	movw	r1, #31716	; 0x7be4
   11c88:	movt	r1, #1
   11c8c:	b	11cf8 <__assert_fail@plt+0xc3c>
   11c90:	movw	r1, #31562	; 0x7b4a
   11c94:	movt	r1, #1
   11c98:	mov	r0, #0
   11c9c:	mov	r2, #5
   11ca0:	bl	10ee8 <dcgettext@plt>
   11ca4:	mov	r6, r0
   11ca8:	add	r0, r5, r4, lsl #2
   11cac:	ldr	r0, [r0, #-4]
   11cb0:	bl	154cc <__assert_fail@plt+0x4410>
   11cb4:	mov	r3, r0
   11cb8:	mov	r0, #0
   11cbc:	mov	r1, #0
   11cc0:	mov	r2, r6
   11cc4:	bl	10f60 <error@plt>
   11cc8:	movw	r0, #37211	; 0x915b
   11ccc:	movt	r0, #2
   11cd0:	ldrb	r0, [r0]
   11cd4:	movw	r2, #31587	; 0x7b63
   11cd8:	movt	r2, #1
   11cdc:	movw	r1, #31655	; 0x7ba7
   11ce0:	movt	r1, #1
   11ce4:	cmp	r0, #0
   11ce8:	movne	r1, r2
   11cec:	movw	r0, #37192	; 0x9148
   11cf0:	movt	r0, #2
   11cf4:	ldr	r4, [r0]
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	bl	10ee8 <dcgettext@plt>
   11d04:	mov	r3, r0
   11d08:	movw	r2, #34864	; 0x8830
   11d0c:	movt	r2, #1
   11d10:	mov	r0, r4
   11d14:	mov	r1, #1
   11d18:	bl	11038 <__fprintf_chk@plt>
   11d1c:	mov	r0, #1
   11d20:	bl	111b8 <__assert_fail@plt+0xfc>
   11d24:	bl	10fe4 <__errno_location@plt>
   11d28:	ldr	r4, [r0]
   11d2c:	movw	r1, #31882	; 0x7c8a
   11d30:	movt	r1, #1
   11d34:	b	11868 <__assert_fail@plt+0x7ac>
   11d38:	movw	r0, #31798	; 0x7c36
   11d3c:	movt	r0, #1
   11d40:	movw	r1, #31824	; 0x7c50
   11d44:	movt	r1, #1
   11d48:	movw	r3, #31833	; 0x7c59
   11d4c:	movt	r3, #1
   11d50:	mov	r2, #1840	; 0x730
   11d54:	bl	110bc <__assert_fail@plt>
   11d58:	push	{r4, sl, fp, lr}
   11d5c:	add	fp, sp, #8
   11d60:	mov	r4, r0
   11d64:	mov	r0, #24
   11d68:	bl	15e44 <__assert_fail@plt+0x4d88>
   11d6c:	str	r0, [r4]
   11d70:	str	r0, [r4, #4]
   11d74:	mov	r1, #0
   11d78:	str	r1, [r0, #4]
   11d7c:	pop	{r4, sl, fp, pc}
   11d80:	push	{r4, r5, fp, lr}
   11d84:	add	fp, sp, #8
   11d88:	sub	sp, sp, #16
   11d8c:	mov	r4, r1
   11d90:	add	r5, sp, #4
   11d94:	mov	r1, r5
   11d98:	bl	12580 <__assert_fail@plt+0x14c4>
   11d9c:	mov	r0, r5
   11da0:	mov	r1, r4
   11da4:	bl	12900 <__assert_fail@plt+0x1844>
   11da8:	mov	r4, r0
   11dac:	mov	r0, r5
   11db0:	bl	12be8 <__assert_fail@plt+0x1b2c>
   11db4:	mov	r0, r4
   11db8:	sub	sp, fp, #8
   11dbc:	pop	{r4, r5, fp, pc}
   11dc0:	push	{r4, r5, r6, r7, fp, lr}
   11dc4:	add	fp, sp, #16
   11dc8:	mov	r4, r1
   11dcc:	mov	r5, r0
   11dd0:	bl	13398 <__assert_fail@plt+0x22dc>
   11dd4:	ldr	r0, [r5, #24]
   11dd8:	cmp	r0, #0
   11ddc:	bne	11efc <__assert_fail@plt+0xe40>
   11de0:	cmp	r4, #0
   11de4:	beq	11ecc <__assert_fail@plt+0xe10>
   11de8:	mov	r6, r5
   11dec:	ldr	r2, [r6, #16]!
   11df0:	ldr	r3, [r6, #4]
   11df4:	mov	r0, r4
   11df8:	bl	133d0 <__assert_fail@plt+0x2314>
   11dfc:	ldr	r0, [r4, #24]
   11e00:	cmp	r0, #2
   11e04:	bcs	11f08 <__assert_fail@plt+0xe4c>
   11e08:	movw	r1, #37213	; 0x915d
   11e0c:	movt	r1, #2
   11e10:	ldrb	r1, [r1]
   11e14:	cmp	r1, #0
   11e18:	beq	11ed0 <__assert_fail@plt+0xe14>
   11e1c:	ldrb	r0, [r4, #32]
   11e20:	cmp	r0, #0
   11e24:	bne	11f14 <__assert_fail@plt+0xe58>
   11e28:	ldrb	r0, [r4, #34]	; 0x22
   11e2c:	cmp	r0, #0
   11e30:	bne	11f20 <__assert_fail@plt+0xe64>
   11e34:	mov	r0, r5
   11e38:	mov	r1, r4
   11e3c:	bl	13428 <__assert_fail@plt+0x236c>
   11e40:	mov	r7, r4
   11e44:	ldr	r0, [r7, #16]!
   11e48:	ldr	r1, [r7, #4]
   11e4c:	ldrd	r2, [r6]
   11e50:	subs	r2, r0, r2
   11e54:	sbcs	r2, r1, r3
   11e58:	bcs	11e84 <__assert_fail@plt+0xdc8>
   11e5c:	movw	r2, #37212	; 0x915c
   11e60:	movt	r2, #2
   11e64:	ldrb	r2, [r2]
   11e68:	cmp	r2, #0
   11e6c:	bne	11e84 <__assert_fail@plt+0xdc8>
   11e70:	orrs	r0, r0, r1
   11e74:	beq	11f38 <__assert_fail@plt+0xe7c>
   11e78:	mov	r0, r5
   11e7c:	mov	r1, r4
   11e80:	bl	136b4 <__assert_fail@plt+0x25f8>
   11e84:	movw	r0, #37209	; 0x9159
   11e88:	movt	r0, #2
   11e8c:	ldrb	r0, [r0]
   11e90:	cmp	r0, #1
   11e94:	bne	11ecc <__assert_fail@plt+0xe10>
   11e98:	ldrb	r0, [r5, #33]	; 0x21
   11e9c:	cmp	r0, #0
   11ea0:	beq	11ecc <__assert_fail@plt+0xe10>
   11ea4:	ldrd	r0, [r6]
   11ea8:	ldrd	r2, [r7]
   11eac:	eor	r1, r3, r1
   11eb0:	eor	r0, r2, r0
   11eb4:	orrs	r0, r0, r1
   11eb8:	bne	11f2c <__assert_fail@plt+0xe70>
   11ebc:	mov	r0, r4
   11ec0:	bl	137e0 <__assert_fail@plt+0x2724>
   11ec4:	cmp	r0, #0
   11ec8:	beq	11f2c <__assert_fail@plt+0xe70>
   11ecc:	pop	{r4, r5, r6, r7, fp, pc}
   11ed0:	cmp	r0, #0
   11ed4:	popeq	{r4, r5, r6, r7, fp, pc}
   11ed8:	movw	r1, #33683	; 0x8393
   11edc:	movt	r1, #1
   11ee0:	mov	r0, #0
   11ee4:	mov	r2, #5
   11ee8:	bl	10ee8 <dcgettext@plt>
   11eec:	mov	r2, r0
   11ef0:	mov	r0, #1
   11ef4:	mov	r1, #0
   11ef8:	bl	10f60 <error@plt>
   11efc:	movw	r1, #33262	; 0x81ee
   11f00:	movt	r1, #1
   11f04:	b	11ee0 <__assert_fail@plt+0xe24>
   11f08:	movw	r1, #33314	; 0x8222
   11f0c:	movt	r1, #1
   11f10:	b	11ee0 <__assert_fail@plt+0xe24>
   11f14:	movw	r1, #33367	; 0x8257
   11f18:	movt	r1, #1
   11f1c:	b	11ee0 <__assert_fail@plt+0xe24>
   11f20:	movw	r1, #33428	; 0x8294
   11f24:	movt	r1, #1
   11f28:	b	11ee0 <__assert_fail@plt+0xe24>
   11f2c:	movw	r1, #33576	; 0x8328
   11f30:	movt	r1, #1
   11f34:	b	11ee0 <__assert_fail@plt+0xe24>
   11f38:	movw	r1, #33524	; 0x82f4
   11f3c:	movt	r1, #1
   11f40:	b	11ee0 <__assert_fail@plt+0xe24>
   11f44:	push	{r4, r5, r6, r7, fp, lr}
   11f48:	add	fp, sp, #16
   11f4c:	mov	r4, r2
   11f50:	mov	r5, r1
   11f54:	mov	r6, r0
   11f58:	mvn	r1, #0
   11f5c:	mvn	r0, #1
   11f60:	strd	r0, [r6, #8]
   11f64:	mov	r0, r6
   11f68:	mov	r1, #0
   11f6c:	bl	1229c <__assert_fail@plt+0x11e0>
   11f70:	cmn	r0, #1
   11f74:	beq	11f94 <__assert_fail@plt+0xed8>
   11f78:	mov	r7, #1
   11f7c:	strb	r7, [r4, r0]
   11f80:	mov	r0, r6
   11f84:	mov	r1, #0
   11f88:	bl	1229c <__assert_fail@plt+0x11e0>
   11f8c:	cmn	r0, #1
   11f90:	bne	11f7c <__assert_fail@plt+0xec0>
   11f94:	cmp	r5, #0
   11f98:	popeq	{r4, r5, r6, r7, fp, pc}
   11f9c:	mov	r0, #0
   11fa0:	ldrb	r1, [r4, r0]
   11fa4:	eor	r1, r1, #1
   11fa8:	strb	r1, [r4, r0]
   11fac:	add	r0, r0, #1
   11fb0:	cmp	r0, #256	; 0x100
   11fb4:	bne	11fa0 <__assert_fail@plt+0xee4>
   11fb8:	pop	{r4, r5, r6, r7, fp, pc}
   11fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fc0:	add	fp, sp, #28
   11fc4:	push	{r0}		; (str r0, [sp, #-4]!)
   11fc8:	mvn	r7, #-2147483648	; 0x80000000
   11fcc:	mov	r6, #0
   11fd0:	movw	r5, #37470	; 0x925e
   11fd4:	movt	r5, #2
   11fd8:	movw	sl, #37214	; 0x915e
   11fdc:	movt	sl, #2
   11fe0:	mov	r4, #0
   11fe4:	cmp	r4, r6
   11fe8:	bcc	12024 <__assert_fail@plt+0xf68>
   11fec:	b	12004 <__assert_fail@plt+0xf48>
   11ff0:	mov	r4, r9
   11ff4:	cmp	r0, #0
   11ff8:	mvnne	r7, #-2147483648	; 0x80000000
   11ffc:	cmp	r4, r6
   12000:	bcc	12024 <__assert_fail@plt+0xf68>
   12004:	mov	r0, r5
   12008:	mov	r1, #8192	; 0x2000
   1200c:	ldr	r2, [sp]
   12010:	blx	r2
   12014:	cmp	r0, #0
   12018:	beq	12164 <__assert_fail@plt+0x10a8>
   1201c:	mov	r6, r0
   12020:	mov	r4, #0
   12024:	cmn	r7, #-2147483647	; 0x80000001
   12028:	bne	12098 <__assert_fail@plt+0xfdc>
   1202c:	cmp	r6, r4
   12030:	mov	r7, r4
   12034:	bls	1205c <__assert_fail@plt+0xfa0>
   12038:	mov	r7, r4
   1203c:	ldrb	r0, [r5, r7]
   12040:	bl	13328 <__assert_fail@plt+0x226c>
   12044:	ldrb	r0, [sl, r0]
   12048:	cmp	r0, #0
   1204c:	bne	1205c <__assert_fail@plt+0xfa0>
   12050:	add	r7, r7, #2
   12054:	cmp	r7, r6
   12058:	bcc	1203c <__assert_fail@plt+0xf80>
   1205c:	cmp	r7, r6
   12060:	bne	120a4 <__assert_fail@plt+0xfe8>
   12064:	sub	r9, r7, #1
   12068:	ldrb	r0, [r5, r9]
   1206c:	bl	13328 <__assert_fail@plt+0x226c>
   12070:	ldrb	r0, [sl, r0]
   12074:	cmp	r0, #0
   12078:	moveq	r9, r7
   1207c:	cmp	r9, r6
   12080:	bcc	120b0 <__assert_fail@plt+0xff4>
   12084:	sub	r7, r6, r4
   12088:	mvn	r8, #-2147483648	; 0x80000000
   1208c:	cmp	r7, #0
   12090:	bne	120e0 <__assert_fail@plt+0x1024>
   12094:	b	12104 <__assert_fail@plt+0x1048>
   12098:	mov	r8, r7
   1209c:	mov	r9, r4
   120a0:	b	12114 <__assert_fail@plt+0x1058>
   120a4:	mov	r9, r7
   120a8:	cmp	r9, r6
   120ac:	bcs	12084 <__assert_fail@plt+0xfc8>
   120b0:	ldrb	r8, [r5, r9]
   120b4:	sub	r0, r9, r4
   120b8:	add	r7, r0, #1
   120bc:	cmp	r9, #0
   120c0:	beq	120d4 <__assert_fail@plt+0x1018>
   120c4:	add	r1, r9, r5
   120c8:	ldrb	r1, [r1, #-1]
   120cc:	cmp	r1, r8
   120d0:	moveq	r7, r0
   120d4:	add	r9, r9, #1
   120d8:	cmp	r7, #0
   120dc:	beq	12104 <__assert_fail@plt+0x1048>
   120e0:	add	r0, r5, r4
   120e4:	movw	r1, #37204	; 0x9154
   120e8:	movt	r1, #2
   120ec:	ldr	r3, [r1]
   120f0:	mov	r1, #1
   120f4:	mov	r2, r7
   120f8:	bl	10ed0 <fwrite_unlocked@plt>
   120fc:	cmp	r0, r7
   12100:	bne	1216c <__assert_fail@plt+0x10b0>
   12104:	cmn	r8, #-2147483647	; 0x80000001
   12108:	mov	r4, r9
   1210c:	mvn	r7, #-2147483648	; 0x80000000
   12110:	beq	11ffc <__assert_fail@plt+0xf40>
   12114:	mov	r7, r8
   12118:	mov	r0, #0
   1211c:	cmp	r9, r6
   12120:	bcs	11ff0 <__assert_fail@plt+0xf34>
   12124:	ldrb	r1, [r5, r9]
   12128:	mov	r0, #1
   1212c:	cmp	r7, r1
   12130:	bne	11ff0 <__assert_fail@plt+0xf34>
   12134:	add	r1, r9, #1
   12138:	mov	r4, r1
   1213c:	cmp	r1, r6
   12140:	mov	r0, #0
   12144:	movwcc	r0, #1
   12148:	cmp	r6, r1
   1214c:	beq	11ff4 <__assert_fail@plt+0xf38>
   12150:	ldrb	r2, [r5, r4]
   12154:	add	r1, r4, #1
   12158:	cmp	r7, r2
   1215c:	beq	12138 <__assert_fail@plt+0x107c>
   12160:	b	11ff4 <__assert_fail@plt+0xf38>
   12164:	sub	sp, fp, #28
   12168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1216c:	bl	10fe4 <__errno_location@plt>
   12170:	ldr	r4, [r0]
   12174:	movw	r1, #31786	; 0x7c2a
   12178:	movt	r1, #1
   1217c:	mov	r0, #0
   12180:	mov	r2, #5
   12184:	bl	10ee8 <dcgettext@plt>
   12188:	mov	r2, r0
   1218c:	mov	r0, #1
   12190:	mov	r1, r4
   12194:	bl	10f60 <error@plt>
   12198:	push	{r4, sl, fp, lr}
   1219c:	add	fp, sp, #8
   121a0:	mov	r2, r1
   121a4:	mov	r1, r0
   121a8:	mov	r0, #0
   121ac:	bl	158e4 <__assert_fail@plt+0x4828>
   121b0:	cmn	r0, #1
   121b4:	popne	{r4, sl, fp, pc}
   121b8:	bl	10fe4 <__errno_location@plt>
   121bc:	ldr	r4, [r0]
   121c0:	movw	r1, #34237	; 0x85bd
   121c4:	movt	r1, #1
   121c8:	mov	r0, #0
   121cc:	mov	r2, #5
   121d0:	bl	10ee8 <dcgettext@plt>
   121d4:	mov	r2, r0
   121d8:	mov	r0, #1
   121dc:	mov	r1, r4
   121e0:	bl	10f60 <error@plt>
   121e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121e8:	add	fp, sp, #28
   121ec:	sub	sp, sp, #4
   121f0:	mov	r9, r1
   121f4:	mov	r5, r0
   121f8:	add	r8, r0, #1
   121fc:	movw	sl, #45662	; 0xb25e
   12200:	movt	sl, #2
   12204:	b	12210 <__assert_fail@plt+0x1154>
   12208:	cmp	r6, #0
   1220c:	bne	12290 <__assert_fail@plt+0x11d4>
   12210:	mov	r0, r5
   12214:	mov	r1, r9
   12218:	bl	12198 <__assert_fail@plt+0x10dc>
   1221c:	cmp	r0, #0
   12220:	beq	1228c <__assert_fail@plt+0x11d0>
   12224:	mov	r7, r0
   12228:	mov	r6, #0
   1222c:	ldrb	r0, [r5, r6]
   12230:	bl	13328 <__assert_fail@plt+0x226c>
   12234:	ldrb	r0, [sl, r0]
   12238:	cmp	r0, #0
   1223c:	bne	1224c <__assert_fail@plt+0x1190>
   12240:	add	r6, r6, #1
   12244:	cmp	r7, r6
   12248:	bne	1222c <__assert_fail@plt+0x1170>
   1224c:	add	r0, r6, #1
   12250:	cmp	r0, r7
   12254:	bcs	12208 <__assert_fail@plt+0x114c>
   12258:	add	r4, r8, r6
   1225c:	mvn	r0, r6
   12260:	add	r7, r0, r7
   12264:	ldrb	r0, [r4]
   12268:	bl	13328 <__assert_fail@plt+0x226c>
   1226c:	ldrb	r1, [sl, r0]
   12270:	cmp	r1, #0
   12274:	strbeq	r0, [r5, r6]
   12278:	addeq	r6, r6, #1
   1227c:	add	r4, r4, #1
   12280:	subs	r7, r7, #1
   12284:	bne	12264 <__assert_fail@plt+0x11a8>
   12288:	b	12208 <__assert_fail@plt+0x114c>
   1228c:	mov	r6, #0
   12290:	mov	r0, r6
   12294:	sub	sp, fp, #28
   12298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1229c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122a0:	add	fp, sp, #28
   122a4:	sub	sp, sp, #4
   122a8:	mov	sl, r0
   122ac:	add	r6, r0, #8
   122b0:	mvn	r9, #0
   122b4:	mov	r0, #2
   122b8:	cmp	r1, #0
   122bc:	strne	r0, [r1]
   122c0:	subs	r2, r9, #1
   122c4:	sbc	r3, r9, #0
   122c8:	ldrd	r4, [r6]
   122cc:	eor	r3, r5, r3
   122d0:	eor	r2, r4, r2
   122d4:	orrs	r2, r2, r3
   122d8:	bne	122fc <__assert_fail@plt+0x1240>
   122dc:	ldr	r2, [sl]
   122e0:	ldr	r7, [r2, #4]
   122e4:	str	r7, [sl, #4]
   122e8:	str	r9, [r6]
   122ec:	str	r9, [r6, #4]
   122f0:	cmp	r7, #0
   122f4:	bne	12308 <__assert_fail@plt+0x124c>
   122f8:	b	12494 <__assert_fail@plt+0x13d8>
   122fc:	ldr	r7, [sl, #4]
   12300:	cmp	r7, #0
   12304:	beq	12494 <__assert_fail@plt+0x13d8>
   12308:	ldr	r2, [r7]
   1230c:	cmp	r2, #4
   12310:	bhi	124fc <__assert_fail@plt+0x1440>
   12314:	add	r3, pc, #0
   12318:	ldr	pc, [r3, r2, lsl #2]
   1231c:	andeq	r2, r1, r8, asr r3
   12320:	muleq	r1, r4, r3
   12324:	andeq	r2, r1, r0, ror r3
   12328:	andeq	r2, r1, r8, asr r3
   1232c:	andeq	r2, r1, r0, lsr r3
   12330:	mov	r2, r7
   12334:	ldr	r3, [r2, #16]!
   12338:	ldr	r5, [r2, #4]
   1233c:	orrs	r3, r3, r5
   12340:	bne	1249c <__assert_fail@plt+0x13e0>
   12344:	ldr	r2, [r7, #4]
   12348:	str	r2, [sl, #4]
   1234c:	str	r9, [r6]
   12350:	str	r9, [r6, #4]
   12354:	b	122b8 <__assert_fail@plt+0x11fc>
   12358:	ldrb	r8, [r7, #8]
   1235c:	str	r9, [r6]
   12360:	str	r9, [r6, #4]
   12364:	ldr	r0, [r7, #4]
   12368:	str	r0, [sl, #4]
   1236c:	b	124f0 <__assert_fail@plt+0x1434>
   12370:	cmp	r1, #0
   12374:	beq	123e0 <__assert_fail@plt+0x1324>
   12378:	ldr	r0, [r7, #8]
   1237c:	cmp	r0, #10
   12380:	beq	123d8 <__assert_fail@plt+0x131c>
   12384:	cmp	r0, #6
   12388:	bne	123e0 <__assert_fail@plt+0x1324>
   1238c:	mov	r0, #0
   12390:	b	123dc <__assert_fail@plt+0x1320>
   12394:	ldrd	r0, [r6]
   12398:	eor	r2, r1, r9
   1239c:	eor	r3, r0, r9
   123a0:	orrs	r2, r3, r2
   123a4:	beq	123b4 <__assert_fail@plt+0x12f8>
   123a8:	adds	r8, r0, #1
   123ac:	adc	r1, r1, #0
   123b0:	b	123bc <__assert_fail@plt+0x1300>
   123b4:	ldrb	r8, [r7, #8]
   123b8:	mov	r1, #0
   123bc:	str	r8, [r6]
   123c0:	str	r1, [r6, #4]
   123c4:	ldrb	r0, [r7, #9]
   123c8:	eor	r0, r8, r0
   123cc:	orrs	r0, r0, r1
   123d0:	beq	124e0 <__assert_fail@plt+0x1424>
   123d4:	b	124f0 <__assert_fail@plt+0x1434>
   123d8:	mov	r0, #1
   123dc:	str	r0, [r1]
   123e0:	ldrd	r0, [r6]
   123e4:	eor	r1, r1, r9
   123e8:	eor	r0, r0, r9
   123ec:	orrs	r0, r0, r1
   123f0:	bne	12448 <__assert_fail@plt+0x138c>
   123f4:	ldr	r5, [r7, #8]
   123f8:	mov	r8, #0
   123fc:	uxtb	r1, r8
   12400:	mov	r0, r5
   12404:	bl	13a94 <__assert_fail@plt+0x29d8>
   12408:	cmp	r0, #0
   1240c:	bne	1243c <__assert_fail@plt+0x1380>
   12410:	add	r8, r8, #1
   12414:	cmp	r8, #256	; 0x100
   12418:	bne	123fc <__assert_fail@plt+0x1340>
   1241c:	movw	r0, #34248	; 0x85c8
   12420:	movt	r0, #1
   12424:	movw	r1, #31824	; 0x7c50
   12428:	movt	r1, #1
   1242c:	movw	r3, #34260	; 0x85d4
   12430:	movt	r3, #1
   12434:	movw	r2, #1079	; 0x437
   12438:	bl	110bc <__assert_fail@plt>
   1243c:	mov	r1, #0
   12440:	str	r8, [r6]
   12444:	str	r1, [r6, #4]
   12448:	ldr	r5, [r7, #8]
   1244c:	ldr	r8, [r6]
   12450:	uxtb	r1, r8
   12454:	mov	r0, r5
   12458:	bl	13a94 <__assert_fail@plt+0x29d8>
   1245c:	cmp	r0, #0
   12460:	beq	12500 <__assert_fail@plt+0x1444>
   12464:	mov	r4, r8
   12468:	add	r4, r4, #1
   1246c:	cmp	r4, #255	; 0xff
   12470:	bgt	124e0 <__assert_fail@plt+0x1424>
   12474:	uxtb	r1, r4
   12478:	mov	r0, r5
   1247c:	bl	13a94 <__assert_fail@plt+0x29d8>
   12480:	cmp	r0, #0
   12484:	beq	12468 <__assert_fail@plt+0x13ac>
   12488:	asr	r5, r4, #31
   1248c:	strd	r4, [r6]
   12490:	b	124f0 <__assert_fail@plt+0x1434>
   12494:	mvn	r8, #0
   12498:	b	124f0 <__assert_fail@plt+0x1434>
   1249c:	ldrd	r0, [r6]
   124a0:	eor	r1, r1, r9
   124a4:	eor	r0, r0, r9
   124a8:	orrs	r0, r0, r1
   124ac:	moveq	r0, #0
   124b0:	streq	r0, [r6]
   124b4:	streq	r0, [r6, #4]
   124b8:	ldrd	r0, [r6]
   124bc:	adds	r0, r0, #1
   124c0:	adc	r1, r1, #0
   124c4:	strd	r0, [r6]
   124c8:	ldrd	r2, [r2]
   124cc:	eor	r1, r1, r3
   124d0:	eor	r0, r0, r2
   124d4:	orrs	r0, r0, r1
   124d8:	ldrb	r8, [r7, #8]
   124dc:	bne	124f0 <__assert_fail@plt+0x1434>
   124e0:	ldr	r0, [r7, #4]
   124e4:	str	r0, [sl, #4]
   124e8:	str	r9, [r6]
   124ec:	str	r9, [r6, #4]
   124f0:	mov	r0, r8
   124f4:	sub	sp, fp, #28
   124f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124fc:	bl	110a4 <abort@plt>
   12500:	movw	r0, #34319	; 0x860f
   12504:	movt	r0, #1
   12508:	movw	r1, #31824	; 0x7c50
   1250c:	movt	r1, #1
   12510:	movw	r3, #34260	; 0x85d4
   12514:	movt	r3, #1
   12518:	movw	r2, #1082	; 0x43a
   1251c:	bl	110bc <__assert_fail@plt>
   12520:	ldr	r1, [r0, #4]
   12524:	ldr	r1, [r1, #4]
   12528:	mvn	r2, #0
   1252c:	stmib	r0, {r1, r2}
   12530:	str	r2, [r0, #12]
   12534:	bx	lr
   12538:	push	{r4, r5, r6, r7, fp, lr}
   1253c:	add	fp, sp, #16
   12540:	mov	r4, r0
   12544:	bl	12198 <__assert_fail@plt+0x10dc>
   12548:	mov	r5, r0
   1254c:	cmp	r0, #0
   12550:	beq	12578 <__assert_fail@plt+0x14bc>
   12554:	movw	r6, #45918	; 0xb35e
   12558:	movt	r6, #2
   1255c:	mov	r7, r5
   12560:	ldrb	r0, [r4]
   12564:	bl	13328 <__assert_fail@plt+0x226c>
   12568:	ldrb	r0, [r6, r0]
   1256c:	strb	r0, [r4], #1
   12570:	subs	r7, r7, #1
   12574:	bne	12560 <__assert_fail@plt+0x14a4>
   12578:	mov	r0, r5
   1257c:	pop	{r4, r5, r6, r7, fp, pc}
   12580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12584:	add	fp, sp, #28
   12588:	sub	sp, sp, #20
   1258c:	mov	r4, r1
   12590:	mov	r5, r0
   12594:	bl	10fcc <strlen@plt>
   12598:	mov	r6, r0
   1259c:	bl	15e44 <__assert_fail@plt+0x4d88>
   125a0:	str	r0, [r4]
   125a4:	mov	sl, #1
   125a8:	mov	r0, r6
   125ac:	mov	r1, #1
   125b0:	bl	160fc <__assert_fail@plt+0x5040>
   125b4:	str	r0, [r4, #4]
   125b8:	mov	r6, #0
   125bc:	mov	r9, #0
   125c0:	b	12620 <__assert_fail@plt+0x1564>
   125c4:	mov	r0, #0
   125c8:	movw	r1, #32269	; 0x7e0d
   125cc:	movt	r1, #1
   125d0:	mov	r2, #5
   125d4:	bl	10ee8 <dcgettext@plt>
   125d8:	mov	r2, r0
   125dc:	ldrb	r3, [r5, r8]
   125e0:	ldrb	r0, [r5, r7]
   125e4:	ldrb	r1, [r5, r9]
   125e8:	stm	sp, {r0, r1, r3}
   125ec:	str	r0, [sp, #12]
   125f0:	str	r1, [sp, #16]
   125f4:	mov	r0, #0
   125f8:	mov	r1, #0
   125fc:	bl	10f60 <error@plt>
   12600:	mov	r9, r8
   12604:	mov	r0, sl
   12608:	mov	sl, #1
   1260c:	add	r9, r9, #1
   12610:	ldr	r1, [r4]
   12614:	strb	r0, [r1, r6]
   12618:	add	r9, r9, #1
   1261c:	add	r6, r6, #1
   12620:	ldrb	r0, [r5, r9]
   12624:	cmp	r0, #92	; 0x5c
   12628:	beq	12638 <__assert_fail@plt+0x157c>
   1262c:	cmp	r0, #0
   12630:	bne	12610 <__assert_fail@plt+0x1554>
   12634:	b	128f4 <__assert_fail@plt+0x1838>
   12638:	ldr	r0, [r4, #4]
   1263c:	strb	sl, [r0, r6]
   12640:	add	r8, r9, #1
   12644:	ldrb	r0, [r5, r8]
   12648:	cmp	r0, #118	; 0x76
   1264c:	bhi	1260c <__assert_fail@plt+0x1550>
   12650:	add	r1, pc, #0
   12654:	ldr	pc, [r1, r0, lsl #2]
   12658:	andeq	r2, r1, r0, lsl #17
   1265c:	andeq	r2, r1, ip, lsl #12
   12660:	andeq	r2, r1, ip, lsl #12
   12664:	andeq	r2, r1, ip, lsl #12
   12668:	andeq	r2, r1, ip, lsl #12
   1266c:	andeq	r2, r1, ip, lsl #12
   12670:	andeq	r2, r1, ip, lsl #12
   12674:	andeq	r2, r1, ip, lsl #12
   12678:	andeq	r2, r1, ip, lsl #12
   1267c:	andeq	r2, r1, ip, lsl #12
   12680:	andeq	r2, r1, ip, lsl #12
   12684:	andeq	r2, r1, ip, lsl #12
   12688:	andeq	r2, r1, ip, lsl #12
   1268c:	andeq	r2, r1, ip, lsl #12
   12690:	andeq	r2, r1, ip, lsl #12
   12694:	andeq	r2, r1, ip, lsl #12
   12698:	andeq	r2, r1, ip, lsl #12
   1269c:	andeq	r2, r1, ip, lsl #12
   126a0:	andeq	r2, r1, ip, lsl #12
   126a4:	andeq	r2, r1, ip, lsl #12
   126a8:	andeq	r2, r1, ip, lsl #12
   126ac:	andeq	r2, r1, ip, lsl #12
   126b0:	andeq	r2, r1, ip, lsl #12
   126b4:	andeq	r2, r1, ip, lsl #12
   126b8:	andeq	r2, r1, ip, lsl #12
   126bc:	andeq	r2, r1, ip, lsl #12
   126c0:	andeq	r2, r1, ip, lsl #12
   126c4:	andeq	r2, r1, ip, lsl #12
   126c8:	andeq	r2, r1, ip, lsl #12
   126cc:	andeq	r2, r1, ip, lsl #12
   126d0:	andeq	r2, r1, ip, lsl #12
   126d4:	andeq	r2, r1, ip, lsl #12
   126d8:	andeq	r2, r1, ip, lsl #12
   126dc:	andeq	r2, r1, ip, lsl #12
   126e0:	andeq	r2, r1, ip, lsl #12
   126e4:	andeq	r2, r1, ip, lsl #12
   126e8:	andeq	r2, r1, ip, lsl #12
   126ec:	andeq	r2, r1, ip, lsl #12
   126f0:	andeq	r2, r1, ip, lsl #12
   126f4:	andeq	r2, r1, ip, lsl #12
   126f8:	andeq	r2, r1, ip, lsl #12
   126fc:	andeq	r2, r1, ip, lsl #12
   12700:	andeq	r2, r1, ip, lsl #12
   12704:	andeq	r2, r1, ip, lsl #12
   12708:	andeq	r2, r1, ip, lsl #12
   1270c:	andeq	r2, r1, ip, lsl #12
   12710:	andeq	r2, r1, ip, lsl #12
   12714:	andeq	r2, r1, ip, lsl #12
   12718:	andeq	r2, r1, r4, lsr r8
   1271c:	andeq	r2, r1, r4, lsr r8
   12720:	andeq	r2, r1, r4, lsr r8
   12724:	andeq	r2, r1, r4, lsr r8
   12728:	andeq	r2, r1, r4, lsr r8
   1272c:	andeq	r2, r1, r4, lsr r8
   12730:	andeq	r2, r1, r4, lsr r8
   12734:	andeq	r2, r1, r4, lsr r8
   12738:	andeq	r2, r1, ip, lsl #12
   1273c:	andeq	r2, r1, ip, lsl #12
   12740:	andeq	r2, r1, ip, lsl #12
   12744:	andeq	r2, r1, ip, lsl #12
   12748:	andeq	r2, r1, ip, lsl #12
   1274c:	andeq	r2, r1, ip, lsl #12
   12750:	andeq	r2, r1, ip, lsl #12
   12754:	andeq	r2, r1, ip, lsl #12
   12758:	andeq	r2, r1, ip, lsl #12
   1275c:	andeq	r2, r1, ip, lsl #12
   12760:	andeq	r2, r1, ip, lsl #12
   12764:	andeq	r2, r1, ip, lsl #12
   12768:	andeq	r2, r1, ip, lsl #12
   1276c:	andeq	r2, r1, ip, lsl #12
   12770:	andeq	r2, r1, ip, lsl #12
   12774:	andeq	r2, r1, ip, lsl #12
   12778:	andeq	r2, r1, ip, lsl #12
   1277c:	andeq	r2, r1, ip, lsl #12
   12780:	andeq	r2, r1, ip, lsl #12
   12784:	andeq	r2, r1, ip, lsl #12
   12788:	andeq	r2, r1, ip, lsl #12
   1278c:	andeq	r2, r1, ip, lsl #12
   12790:	andeq	r2, r1, ip, lsl #12
   12794:	andeq	r2, r1, ip, lsl #12
   12798:	andeq	r2, r1, ip, lsl #12
   1279c:	andeq	r2, r1, ip, lsl #12
   127a0:	andeq	r2, r1, ip, lsl #12
   127a4:	andeq	r2, r1, ip, lsl #12
   127a8:	andeq	r2, r1, ip, lsl #12
   127ac:	andeq	r2, r1, ip, lsl #12
   127b0:	andeq	r2, r1, ip, lsl #12
   127b4:	andeq	r2, r1, ip, lsl #12
   127b8:	andeq	r2, r1, ip, lsl #12
   127bc:	andeq	r2, r1, ip, lsl #12
   127c0:	andeq	r2, r1, ip, lsl #12
   127c4:	andeq	r2, r1, ip, lsl #12
   127c8:	andeq	r2, r1, ip, lsl #12
   127cc:	andeq	r2, r1, ip, lsl #12
   127d0:	andeq	r2, r1, ip, lsl #12
   127d4:	andeq	r2, r1, ip, lsl #12
   127d8:	andeq	r2, r1, ip, lsl #12
   127dc:			; <UNDEFINED> instruction: 0x000128bc
   127e0:	andeq	r2, r1, r4, asr #17
   127e4:	andeq	r2, r1, ip, lsl #12
   127e8:	andeq	r2, r1, ip, lsl #12
   127ec:	andeq	r2, r1, ip, lsl #12
   127f0:	andeq	r2, r1, ip, asr #17
   127f4:	andeq	r2, r1, ip, lsl #12
   127f8:	andeq	r2, r1, ip, lsl #12
   127fc:	andeq	r2, r1, ip, lsl #12
   12800:	andeq	r2, r1, ip, lsl #12
   12804:	andeq	r2, r1, ip, lsl #12
   12808:	andeq	r2, r1, ip, lsl #12
   1280c:	andeq	r2, r1, ip, lsl #12
   12810:	ldrdeq	r2, [r1], -r4
   12814:	andeq	r2, r1, ip, lsl #12
   12818:	andeq	r2, r1, ip, lsl #12
   1281c:	andeq	r2, r1, ip, lsl #12
   12820:	ldrdeq	r2, [r1], -ip
   12824:	andeq	r2, r1, ip, lsl #12
   12828:	andeq	r2, r1, r4, ror #17
   1282c:	andeq	r2, r1, ip, lsl #12
   12830:	andeq	r2, r1, ip, ror #17
   12834:	add	r7, r9, #2
   12838:	ldrb	r1, [r5, r7]
   1283c:	sub	r1, r1, #48	; 0x30
   12840:	sub	r0, r0, #48	; 0x30
   12844:	cmp	r1, #7
   12848:	bhi	1260c <__assert_fail@plt+0x1550>
   1284c:	uxtb	r0, r0
   12850:	add	sl, r1, r0, lsl #3
   12854:	add	r9, r9, #3
   12858:	ldrb	r0, [r5, r9]
   1285c:	sub	r0, r0, #48	; 0x30
   12860:	cmp	r0, #7
   12864:	bhi	12600 <__assert_fail@plt+0x1544>
   12868:	uxtb	r1, sl
   1286c:	add	r0, r0, r1, lsl #3
   12870:	cmp	r0, #255	; 0xff
   12874:	bgt	125c4 <__assert_fail@plt+0x1508>
   12878:	mov	r9, r7
   1287c:	b	12608 <__assert_fail@plt+0x154c>
   12880:	mov	r0, #0
   12884:	movw	r1, #32369	; 0x7e71
   12888:	movt	r1, #1
   1288c:	mov	r2, #5
   12890:	bl	10ee8 <dcgettext@plt>
   12894:	mov	r2, r0
   12898:	mov	r0, #0
   1289c:	mov	r1, #0
   128a0:	bl	10f60 <error@plt>
   128a4:	ldr	r0, [r4, #4]
   128a8:	mov	r1, #0
   128ac:	strb	r1, [r0, r6]
   128b0:	sub	r9, r9, #1
   128b4:	mov	r0, #92	; 0x5c
   128b8:	b	1260c <__assert_fail@plt+0x1550>
   128bc:	mov	r0, #7
   128c0:	b	1260c <__assert_fail@plt+0x1550>
   128c4:	mov	r0, #8
   128c8:	b	1260c <__assert_fail@plt+0x1550>
   128cc:	mov	r0, #12
   128d0:	b	1260c <__assert_fail@plt+0x1550>
   128d4:	mov	r0, #10
   128d8:	b	1260c <__assert_fail@plt+0x1550>
   128dc:	mov	r0, #13
   128e0:	b	1260c <__assert_fail@plt+0x1550>
   128e4:	mov	r0, #9
   128e8:	b	1260c <__assert_fail@plt+0x1550>
   128ec:	mov	r0, #11
   128f0:	b	1260c <__assert_fail@plt+0x1550>
   128f4:	str	r6, [r4, #8]
   128f8:	sub	sp, fp, #28
   128fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12904:	add	fp, sp, #28
   12908:	sub	sp, sp, #44	; 0x2c
   1290c:	mov	r4, r1
   12910:	mov	r5, r0
   12914:	ldr	sl, [r0]
   12918:	ldr	r0, [r0, #8]
   1291c:	mov	r6, #0
   12920:	cmp	r0, #3
   12924:	bcc	12ad8 <__assert_fail@plt+0x1a1c>
   12928:	add	r0, sl, #2
   1292c:	str	r0, [sp, #16]
   12930:	mov	r6, #0
   12934:	mov	r7, #2
   12938:	add	r9, sp, #20
   1293c:	b	1295c <__assert_fail@plt+0x18a0>
   12940:	mov	r0, r4
   12944:	bl	13260 <__assert_fail@plt+0x21a4>
   12948:	mov	r6, r7
   1294c:	ldr	r0, [r5, #8]
   12950:	add	r7, r6, #2
   12954:	cmp	r7, r0
   12958:	bcs	12ad8 <__assert_fail@plt+0x1a1c>
   1295c:	mov	r0, r5
   12960:	mov	r1, r6
   12964:	mov	r2, #91	; 0x5b
   12968:	bl	12c08 <__assert_fail@plt+0x1b4c>
   1296c:	cmp	r0, #0
   12970:	beq	12a78 <__assert_fail@plt+0x19bc>
   12974:	add	r8, r6, #1
   12978:	mov	r0, r5
   1297c:	mov	r1, r8
   12980:	mov	r2, #58	; 0x3a
   12984:	bl	12c08 <__assert_fail@plt+0x1b4c>
   12988:	cmp	r0, #0
   1298c:	bne	129a8 <__assert_fail@plt+0x18ec>
   12990:	mov	r0, r5
   12994:	mov	r1, r8
   12998:	mov	r2, #61	; 0x3d
   1299c:	bl	12c08 <__assert_fail@plt+0x1b4c>
   129a0:	cmp	r0, #0
   129a4:	beq	12a4c <__assert_fail@plt+0x1990>
   129a8:	ldrb	r2, [sl, r8]
   129ac:	mov	r0, r5
   129b0:	mov	r1, r7
   129b4:	mov	r3, r9
   129b8:	bl	12c34 <__assert_fail@plt+0x1b78>
   129bc:	cmp	r0, #0
   129c0:	beq	12a4c <__assert_fail@plt+0x1990>
   129c4:	ldrb	r0, [sl, r8]
   129c8:	ldr	r9, [sp, #20]
   129cc:	sub	r1, r9, r6
   129d0:	subs	r2, r1, #2
   129d4:	beq	12b10 <__assert_fail@plt+0x1a54>
   129d8:	ldr	r1, [sp, #16]
   129dc:	add	r1, r1, r6
   129e0:	cmp	r0, #58	; 0x3a
   129e4:	str	r2, [sp, #12]
   129e8:	str	r1, [sp, #8]
   129ec:	mov	r0, r4
   129f0:	bne	12a1c <__assert_fail@plt+0x1960>
   129f4:	bl	12cb8 <__assert_fail@plt+0x1bfc>
   129f8:	cmp	r0, #0
   129fc:	bne	12a28 <__assert_fail@plt+0x196c>
   12a00:	mov	r0, r5
   12a04:	mov	r1, r7
   12a08:	bl	12d38 <__assert_fail@plt+0x1c7c>
   12a0c:	cmp	r0, #0
   12a10:	add	r9, sp, #20
   12a14:	bne	12a4c <__assert_fail@plt+0x1990>
   12a18:	b	12b50 <__assert_fail@plt+0x1a94>
   12a1c:	bl	12ef4 <__assert_fail@plt+0x1e38>
   12a20:	cmp	r0, #0
   12a24:	beq	12a34 <__assert_fail@plt+0x1978>
   12a28:	add	r6, r9, #2
   12a2c:	add	r9, sp, #20
   12a30:	b	1294c <__assert_fail@plt+0x1890>
   12a34:	mov	r0, r5
   12a38:	mov	r1, r7
   12a3c:	bl	12d38 <__assert_fail@plt+0x1c7c>
   12a40:	cmp	r0, #0
   12a44:	add	r9, sp, #20
   12a48:	beq	12b98 <__assert_fail@plt+0x1adc>
   12a4c:	sub	r0, fp, #32
   12a50:	str	r0, [sp]
   12a54:	mov	r0, r5
   12a58:	mov	r1, r8
   12a5c:	sub	r2, fp, #33	; 0x21
   12a60:	add	r3, sp, #24
   12a64:	bl	12f6c <__assert_fail@plt+0x1eb0>
   12a68:	cmp	r0, #0
   12a6c:	beq	12ab8 <__assert_fail@plt+0x19fc>
   12a70:	cmn	r0, #1
   12a74:	bne	12b08 <__assert_fail@plt+0x1a4c>
   12a78:	add	r7, r6, #1
   12a7c:	mov	r0, r5
   12a80:	mov	r1, r7
   12a84:	mov	r2, #45	; 0x2d
   12a88:	bl	12c08 <__assert_fail@plt+0x1b4c>
   12a8c:	ldrb	r1, [sl, r6]
   12a90:	cmp	r0, #0
   12a94:	beq	12940 <__assert_fail@plt+0x1884>
   12a98:	add	r0, r6, sl
   12a9c:	ldrb	r2, [r0, #2]
   12aa0:	mov	r0, r4
   12aa4:	bl	13188 <__assert_fail@plt+0x20cc>
   12aa8:	cmp	r0, #0
   12aac:	beq	12b08 <__assert_fail@plt+0x1a4c>
   12ab0:	add	r6, r6, #3
   12ab4:	b	1294c <__assert_fail@plt+0x1890>
   12ab8:	ldr	r2, [sp, #24]
   12abc:	ldr	r3, [sp, #28]
   12ac0:	ldrb	r1, [fp, #-33]	; 0xffffffdf
   12ac4:	mov	r0, r4
   12ac8:	bl	1311c <__assert_fail@plt+0x2060>
   12acc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ad0:	add	r6, r0, #1
   12ad4:	b	1294c <__assert_fail@plt+0x1890>
   12ad8:	ldr	r0, [r5, #8]
   12adc:	mov	r7, #1
   12ae0:	cmp	r6, r0
   12ae4:	bcs	12bdc <__assert_fail@plt+0x1b20>
   12ae8:	ldrb	r1, [sl, r6]
   12aec:	mov	r0, r4
   12af0:	bl	13260 <__assert_fail@plt+0x21a4>
   12af4:	add	r6, r6, #1
   12af8:	ldr	r0, [r5, #8]
   12afc:	cmp	r6, r0
   12b00:	bcc	12ae8 <__assert_fail@plt+0x1a2c>
   12b04:	b	12bdc <__assert_fail@plt+0x1b20>
   12b08:	mov	r7, #0
   12b0c:	b	12bdc <__assert_fail@plt+0x1b20>
   12b10:	mov	r7, #0
   12b14:	cmp	r0, #58	; 0x3a
   12b18:	bne	12b28 <__assert_fail@plt+0x1a6c>
   12b1c:	movw	r1, #32434	; 0x7eb2
   12b20:	movt	r1, #1
   12b24:	b	12b30 <__assert_fail@plt+0x1a74>
   12b28:	movw	r1, #32470	; 0x7ed6
   12b2c:	movt	r1, #1
   12b30:	mov	r0, #0
   12b34:	mov	r2, #5
   12b38:	bl	10ee8 <dcgettext@plt>
   12b3c:	mov	r2, r0
   12b40:	mov	r0, #0
   12b44:	mov	r1, #0
   12b48:	bl	10f60 <error@plt>
   12b4c:	b	12bdc <__assert_fail@plt+0x1b20>
   12b50:	ldr	r0, [sp, #8]
   12b54:	ldr	r1, [sp, #12]
   12b58:	bl	12db4 <__assert_fail@plt+0x1cf8>
   12b5c:	mov	r4, r0
   12b60:	mov	r7, #0
   12b64:	movw	r1, #32513	; 0x7f01
   12b68:	movt	r1, #1
   12b6c:	mov	r0, #0
   12b70:	mov	r2, #5
   12b74:	bl	10ee8 <dcgettext@plt>
   12b78:	mov	r5, r0
   12b7c:	mov	r0, r4
   12b80:	bl	154cc <__assert_fail@plt+0x4410>
   12b84:	mov	r3, r0
   12b88:	mov	r0, #0
   12b8c:	mov	r1, #0
   12b90:	mov	r2, r5
   12b94:	b	12bd0 <__assert_fail@plt+0x1b14>
   12b98:	ldr	r0, [sp, #8]
   12b9c:	ldr	r1, [sp, #12]
   12ba0:	bl	12db4 <__assert_fail@plt+0x1cf8>
   12ba4:	mov	r4, r0
   12ba8:	mov	r7, #0
   12bac:	movw	r1, #32540	; 0x7f1c
   12bb0:	movt	r1, #1
   12bb4:	mov	r0, #0
   12bb8:	mov	r2, #5
   12bbc:	bl	10ee8 <dcgettext@plt>
   12bc0:	mov	r2, r0
   12bc4:	mov	r0, #0
   12bc8:	mov	r1, #0
   12bcc:	mov	r3, r4
   12bd0:	bl	10f60 <error@plt>
   12bd4:	mov	r0, r4
   12bd8:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   12bdc:	mov	r0, r7
   12be0:	sub	sp, fp, #28
   12be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be8:	push	{r4, sl, fp, lr}
   12bec:	add	fp, sp, #8
   12bf0:	mov	r4, r0
   12bf4:	ldr	r0, [r0]
   12bf8:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   12bfc:	ldr	r0, [r4, #4]
   12c00:	pop	{r4, sl, fp, lr}
   12c04:	b	13cb0 <__assert_fail@plt+0x2bf4>
   12c08:	ldr	r3, [r0]
   12c0c:	ldrb	ip, [r3, r1]
   12c10:	mov	r3, #0
   12c14:	cmp	ip, r2
   12c18:	bne	12c2c <__assert_fail@plt+0x1b70>
   12c1c:	ldr	r0, [r0, #4]
   12c20:	ldrb	r0, [r0, r1]
   12c24:	clz	r0, r0
   12c28:	lsr	r3, r0, #5
   12c2c:	mov	r0, r3
   12c30:	bx	lr
   12c34:	push	{r4, r5, fp, lr}
   12c38:	add	fp, sp, #8
   12c3c:	mov	ip, r0
   12c40:	ldr	r0, [r0, #8]
   12c44:	sub	r4, r0, #1
   12c48:	mov	r0, #0
   12c4c:	cmp	r4, r1
   12c50:	popls	{r4, r5, fp, pc}
   12c54:	ldr	lr, [ip]
   12c58:	b	12c70 <__assert_fail@plt+0x1bb4>
   12c5c:	add	r1, r1, #1
   12c60:	ldr	r4, [ip, #8]
   12c64:	sub	r4, r4, #1
   12c68:	cmp	r1, r4
   12c6c:	bcs	12cb4 <__assert_fail@plt+0x1bf8>
   12c70:	ldrb	r4, [lr, r1]
   12c74:	cmp	r4, r2
   12c78:	bne	12c5c <__assert_fail@plt+0x1ba0>
   12c7c:	add	r4, lr, r1
   12c80:	ldrb	r4, [r4, #1]
   12c84:	cmp	r4, #93	; 0x5d
   12c88:	bne	12c5c <__assert_fail@plt+0x1ba0>
   12c8c:	ldr	r4, [ip, #4]
   12c90:	ldrb	r5, [r4, r1]
   12c94:	cmp	r5, #0
   12c98:	bne	12c5c <__assert_fail@plt+0x1ba0>
   12c9c:	add	r4, r4, r1
   12ca0:	ldrb	r4, [r4, #1]
   12ca4:	cmp	r4, #0
   12ca8:	bne	12c5c <__assert_fail@plt+0x1ba0>
   12cac:	str	r1, [r3]
   12cb0:	mov	r0, #1
   12cb4:	pop	{r4, r5, fp, pc}
   12cb8:	push	{r4, r5, fp, lr}
   12cbc:	add	fp, sp, #8
   12cc0:	mov	r4, r0
   12cc4:	mov	r0, r1
   12cc8:	mov	r1, r2
   12ccc:	bl	132bc <__assert_fail@plt+0x2200>
   12cd0:	mov	r5, r0
   12cd4:	mov	r0, #0
   12cd8:	movw	r1, #9999	; 0x270f
   12cdc:	cmp	r5, r1
   12ce0:	popeq	{r4, r5, fp, pc}
   12ce4:	mov	r0, #24
   12ce8:	bl	15e44 <__assert_fail@plt+0x4d88>
   12cec:	mov	r1, #0
   12cf0:	mov	r2, #2
   12cf4:	str	r2, [r0]
   12cf8:	stmib	r0, {r1, r5}
   12cfc:	ldr	r1, [r4, #4]
   12d00:	cmp	r1, #0
   12d04:	beq	12d18 <__assert_fail@plt+0x1c5c>
   12d08:	str	r0, [r1, #4]
   12d0c:	str	r0, [r4, #4]
   12d10:	mov	r0, #1
   12d14:	pop	{r4, r5, fp, pc}
   12d18:	movw	r0, #32597	; 0x7f55
   12d1c:	movt	r0, #1
   12d20:	movw	r1, #31824	; 0x7c50
   12d24:	movt	r1, #1
   12d28:	movw	r3, #32608	; 0x7f60
   12d2c:	movt	r3, #1
   12d30:	movw	r2, #701	; 0x2bd
   12d34:	bl	110bc <__assert_fail@plt>
   12d38:	push	{r4, r5, r6, sl, fp, lr}
   12d3c:	add	fp, sp, #16
   12d40:	mov	r5, r1
   12d44:	mov	r4, r0
   12d48:	mov	r2, #42	; 0x2a
   12d4c:	bl	12c08 <__assert_fail@plt+0x1b4c>
   12d50:	cmp	r0, #0
   12d54:	beq	12dac <__assert_fail@plt+0x1cf0>
   12d58:	add	r0, r5, #1
   12d5c:	ldr	r6, [r4, #8]
   12d60:	cmp	r0, r6
   12d64:	bcs	12dac <__assert_fail@plt+0x1cf0>
   12d68:	mov	r5, r0
   12d6c:	ldr	r0, [r4]
   12d70:	ldrb	r0, [r0, r5]
   12d74:	bl	13328 <__assert_fail@plt+0x226c>
   12d78:	sub	r0, r0, #48	; 0x30
   12d7c:	cmp	r0, #9
   12d80:	bhi	12d98 <__assert_fail@plt+0x1cdc>
   12d84:	ldr	r0, [r4, #4]
   12d88:	ldrb	r1, [r0, r5]
   12d8c:	add	r0, r5, #1
   12d90:	cmp	r1, #0
   12d94:	beq	12d60 <__assert_fail@plt+0x1ca4>
   12d98:	mov	r0, r4
   12d9c:	mov	r1, r5
   12da0:	mov	r2, #93	; 0x5d
   12da4:	pop	{r4, r5, r6, sl, fp, lr}
   12da8:	b	12c08 <__assert_fail@plt+0x1b4c>
   12dac:	mov	r0, #0
   12db0:	pop	{r4, r5, r6, sl, fp, pc}
   12db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db8:	add	fp, sp, #28
   12dbc:	sub	sp, sp, #12
   12dc0:	mov	r4, r1
   12dc4:	mov	r5, r0
   12dc8:	add	r0, r1, #1
   12dcc:	mov	r1, #4
   12dd0:	bl	15ee0 <__assert_fail@plt+0x4e24>
   12dd4:	mov	sl, r0
   12dd8:	cmp	r4, #0
   12ddc:	beq	12ee8 <__assert_fail@plt+0x1e2c>
   12de0:	movw	r7, #32741	; 0x7fe5
   12de4:	movt	r7, #1
   12de8:	add	r9, sp, #7
   12dec:	mov	r6, sl
   12df0:	b	12e14 <__assert_fail@plt+0x1d58>
   12df4:	movw	r1, #32761	; 0x7ff9
   12df8:	movt	r1, #1
   12dfc:	mov	r0, r6
   12e00:	bl	10edc <stpcpy@plt>
   12e04:	mov	r6, r0
   12e08:	add	r5, r5, #1
   12e0c:	subs	r4, r4, #1
   12e10:	beq	12ee8 <__assert_fail@plt+0x1e2c>
   12e14:	ldrb	r8, [r5]
   12e18:	sub	r0, r8, #7
   12e1c:	cmp	r0, #6
   12e20:	bhi	12e54 <__assert_fail@plt+0x1d98>
   12e24:	add	r1, pc, #0
   12e28:	ldr	pc, [r1, r0, lsl #2]
   12e2c:	andeq	r2, r1, r8, asr #28
   12e30:	muleq	r1, r8, lr
   12e34:	andeq	r2, r1, r4, lsr #29
   12e38:			; <UNDEFINED> instruction: 0x00012eb0
   12e3c:	strdeq	r2, [r1], -r4
   12e40:			; <UNDEFINED> instruction: 0x00012ebc
   12e44:	andeq	r2, r1, r8, asr #29
   12e48:	movw	r1, #32743	; 0x7fe7
   12e4c:	movt	r1, #1
   12e50:	b	12dfc <__assert_fail@plt+0x1d40>
   12e54:	cmp	r8, #92	; 0x5c
   12e58:	mov	r1, r7
   12e5c:	beq	12dfc <__assert_fail@plt+0x1d40>
   12e60:	bl	10fa8 <__ctype_b_loc@plt>
   12e64:	ldr	r0, [r0]
   12e68:	add	r0, r0, r8, lsl #1
   12e6c:	ldrb	r0, [r0, #1]
   12e70:	tst	r0, #64	; 0x40
   12e74:	bne	12ed4 <__assert_fail@plt+0x1e18>
   12e78:	str	r8, [sp]
   12e7c:	mov	r0, r9
   12e80:	mov	r1, #1
   12e84:	mov	r2, #5
   12e88:	movw	r3, #32764	; 0x7ffc
   12e8c:	movt	r3, #1
   12e90:	bl	10ff0 <__sprintf_chk@plt>
   12e94:	b	12ee0 <__assert_fail@plt+0x1e24>
   12e98:	movw	r1, #32746	; 0x7fea
   12e9c:	movt	r1, #1
   12ea0:	b	12dfc <__assert_fail@plt+0x1d40>
   12ea4:	movw	r1, #32758	; 0x7ff6
   12ea8:	movt	r1, #1
   12eac:	b	12dfc <__assert_fail@plt+0x1d40>
   12eb0:	movw	r1, #32752	; 0x7ff0
   12eb4:	movt	r1, #1
   12eb8:	b	12dfc <__assert_fail@plt+0x1d40>
   12ebc:	movw	r1, #32749	; 0x7fed
   12ec0:	movt	r1, #1
   12ec4:	b	12dfc <__assert_fail@plt+0x1d40>
   12ec8:	movw	r1, #32755	; 0x7ff3
   12ecc:	movt	r1, #1
   12ed0:	b	12dfc <__assert_fail@plt+0x1d40>
   12ed4:	mov	r0, #0
   12ed8:	strb	r0, [sp, #8]
   12edc:	strb	r8, [sp, #7]
   12ee0:	mov	r1, r9
   12ee4:	b	12dfc <__assert_fail@plt+0x1d40>
   12ee8:	mov	r0, sl
   12eec:	sub	sp, fp, #28
   12ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ef4:	push	{r4, r5, fp, lr}
   12ef8:	add	fp, sp, #8
   12efc:	mov	r4, r0
   12f00:	mov	r0, #0
   12f04:	cmp	r2, #1
   12f08:	popne	{r4, r5, fp, pc}
   12f0c:	mov	r5, r1
   12f10:	mov	r0, #24
   12f14:	bl	15e44 <__assert_fail@plt+0x4d88>
   12f18:	mov	r1, #0
   12f1c:	mov	r2, #3
   12f20:	str	r2, [r0]
   12f24:	str	r1, [r0, #4]
   12f28:	ldrb	r1, [r5]
   12f2c:	strb	r1, [r0, #8]
   12f30:	ldr	r1, [r4, #4]
   12f34:	cmp	r1, #0
   12f38:	beq	12f4c <__assert_fail@plt+0x1e90>
   12f3c:	str	r0, [r1, #4]
   12f40:	str	r0, [r4, #4]
   12f44:	mov	r0, #1
   12f48:	pop	{r4, r5, fp, pc}
   12f4c:	movw	r0, #32597	; 0x7f55
   12f50:	movt	r0, #1
   12f54:	movw	r1, #31824	; 0x7c50
   12f58:	movt	r1, #1
   12f5c:	movw	r3, #32770	; 0x8002
   12f60:	movt	r3, #1
   12f64:	movw	r2, #743	; 0x2e7
   12f68:	bl	110bc <__assert_fail@plt>
   12f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	add	fp, sp, #28
   12f74:	sub	sp, sp, #12
   12f78:	mov	r9, r1
   12f7c:	add	r1, r1, #1
   12f80:	ldr	r7, [r0, #8]
   12f84:	cmp	r1, r7
   12f88:	bcs	130fc <__assert_fail@plt+0x2040>
   12f8c:	mov	r8, r3
   12f90:	mov	sl, r2
   12f94:	mov	r6, r0
   12f98:	mov	r2, #42	; 0x2a
   12f9c:	bl	12c08 <__assert_fail@plt+0x1b4c>
   12fa0:	mov	r1, r0
   12fa4:	mvn	r0, #0
   12fa8:	cmp	r1, #0
   12fac:	beq	13000 <__assert_fail@plt+0x1f44>
   12fb0:	add	r5, r9, #2
   12fb4:	cmp	r5, r7
   12fb8:	bcs	13000 <__assert_fail@plt+0x1f44>
   12fbc:	ldr	ip, [fp, #8]
   12fc0:	ldr	r1, [r6, #4]
   12fc4:	add	r1, r1, r5
   12fc8:	sub	r2, r9, r7
   12fcc:	add	r2, r2, #2
   12fd0:	mov	r7, #0
   12fd4:	ldrb	r3, [r1, -r7]
   12fd8:	cmp	r3, #0
   12fdc:	bne	13000 <__assert_fail@plt+0x1f44>
   12fe0:	ldr	r3, [r6]
   12fe4:	add	r4, r3, r5
   12fe8:	ldrb	r4, [r4, -r7]
   12fec:	cmp	r4, #93	; 0x5d
   12ff0:	beq	13008 <__assert_fail@plt+0x1f4c>
   12ff4:	sub	r7, r7, #1
   12ff8:	cmp	r2, r7
   12ffc:	bne	12fd4 <__assert_fail@plt+0x1f18>
   13000:	sub	sp, fp, #28
   13004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13008:	ldrb	r0, [r3, r9]
   1300c:	strb	r0, [sl]
   13010:	cmp	r7, #0
   13014:	beq	130ac <__assert_fail@plt+0x1ff0>
   13018:	mov	r4, ip
   1301c:	ldr	sl, [r6]
   13020:	mov	r6, sl
   13024:	ldrb	r0, [r6, r5]!
   13028:	mov	r1, #0
   1302c:	str	r1, [sp]
   13030:	mov	r2, #10
   13034:	cmp	r0, #48	; 0x30
   13038:	movweq	r2, #8
   1303c:	add	r1, sp, #8
   13040:	mov	r0, r6
   13044:	mov	r3, r8
   13048:	bl	16218 <__assert_fail@plt+0x515c>
   1304c:	cmp	r0, #0
   13050:	beq	130cc <__assert_fail@plt+0x2010>
   13054:	rsb	r1, r7, #0
   13058:	mov	r0, r6
   1305c:	bl	12db4 <__assert_fail@plt+0x1cf8>
   13060:	mov	r4, r0
   13064:	movw	r1, #32956	; 0x80bc
   13068:	movt	r1, #1
   1306c:	mov	r0, #0
   13070:	mov	r2, #5
   13074:	bl	10ee8 <dcgettext@plt>
   13078:	mov	r5, r0
   1307c:	mov	r0, r4
   13080:	bl	154cc <__assert_fail@plt+0x4410>
   13084:	mov	r3, r0
   13088:	mov	r0, #0
   1308c:	mov	r1, #0
   13090:	mov	r2, r5
   13094:	bl	10f60 <error@plt>
   13098:	mov	r0, r4
   1309c:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   130a0:	mvn	r0, #1
   130a4:	sub	sp, fp, #28
   130a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130ac:	mov	r0, #0
   130b0:	str	r0, [r8]
   130b4:	str	r0, [r8, #4]
   130b8:	sub	r0, r5, r7
   130bc:	str	r0, [ip]
   130c0:	mov	r0, #0
   130c4:	sub	sp, fp, #28
   130c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130cc:	ldrd	r0, [r8]
   130d0:	and	r0, r0, r1
   130d4:	cmn	r0, #1
   130d8:	beq	13054 <__assert_fail@plt+0x1f98>
   130dc:	ldr	r0, [sp, #8]
   130e0:	sub	r0, r0, sl
   130e4:	sub	r0, r0, r9
   130e8:	add	r0, r0, r7
   130ec:	cmp	r0, #2
   130f0:	bne	13054 <__assert_fail@plt+0x1f98>
   130f4:	mov	ip, r4
   130f8:	b	130b8 <__assert_fail@plt+0x1ffc>
   130fc:	movw	r0, #32837	; 0x8045
   13100:	movt	r0, #1
   13104:	movw	r1, #31824	; 0x7c50
   13108:	movt	r1, #1
   1310c:	movw	r3, #32861	; 0x805d
   13110:	movt	r3, #1
   13114:	mov	r2, #784	; 0x310
   13118:	bl	110bc <__assert_fail@plt>
   1311c:	push	{r4, r5, r6, r7, fp, lr}
   13120:	add	fp, sp, #16
   13124:	mov	r7, r3
   13128:	mov	r6, r2
   1312c:	mov	r5, r1
   13130:	mov	r4, r0
   13134:	mov	r0, #24
   13138:	bl	15e44 <__assert_fail@plt+0x4d88>
   1313c:	mov	r1, #0
   13140:	strd	r6, [r0, #16]
   13144:	strb	r5, [r0, #8]
   13148:	mov	r2, #4
   1314c:	str	r2, [r0]
   13150:	str	r1, [r0, #4]
   13154:	ldr	r1, [r4, #4]
   13158:	cmp	r1, #0
   1315c:	strne	r0, [r1, #4]
   13160:	strne	r0, [r4, #4]
   13164:	popne	{r4, r5, r6, r7, fp, pc}
   13168:	movw	r0, #32597	; 0x7f55
   1316c:	movt	r0, #1
   13170:	movw	r1, #31824	; 0x7c50
   13174:	movt	r1, #1
   13178:	movw	r3, #32999	; 0x80e7
   1317c:	movt	r3, #1
   13180:	movw	r2, #721	; 0x2d1
   13184:	bl	110bc <__assert_fail@plt>
   13188:	push	{r4, r5, r6, r7, fp, lr}
   1318c:	add	fp, sp, #16
   13190:	sub	sp, sp, #8
   13194:	mov	r5, r2
   13198:	mov	r6, r1
   1319c:	cmp	r2, r1
   131a0:	bcs	13200 <__assert_fail@plt+0x2144>
   131a4:	mov	r0, r6
   131a8:	bl	1332c <__assert_fail@plt+0x2270>
   131ac:	mov	r4, r0
   131b0:	mov	r0, r5
   131b4:	bl	1332c <__assert_fail@plt+0x2270>
   131b8:	mov	r5, r0
   131bc:	mov	r6, #0
   131c0:	movw	r1, #33067	; 0x812b
   131c4:	movt	r1, #1
   131c8:	mov	r0, #0
   131cc:	mov	r2, #5
   131d0:	bl	10ee8 <dcgettext@plt>
   131d4:	mov	r2, r0
   131d8:	str	r5, [sp]
   131dc:	mov	r0, #0
   131e0:	mov	r1, #0
   131e4:	mov	r3, r4
   131e8:	bl	10f60 <error@plt>
   131ec:	mov	r0, r4
   131f0:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   131f4:	mov	r0, r5
   131f8:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   131fc:	b	13234 <__assert_fail@plt+0x2178>
   13200:	mov	r4, r0
   13204:	mov	r0, #24
   13208:	bl	15e44 <__assert_fail@plt+0x4d88>
   1320c:	mov	r7, #0
   13210:	strb	r5, [r0, #9]
   13214:	strb	r6, [r0, #8]
   13218:	mov	r6, #1
   1321c:	strd	r6, [r0]
   13220:	ldr	r1, [r4, #4]
   13224:	cmp	r1, #0
   13228:	beq	13240 <__assert_fail@plt+0x2184>
   1322c:	str	r0, [r1, #4]
   13230:	str	r0, [r4, #4]
   13234:	mov	r0, r6
   13238:	sub	sp, fp, #16
   1323c:	pop	{r4, r5, r6, r7, fp, pc}
   13240:	movw	r0, #32597	; 0x7f55
   13244:	movt	r0, #1
   13248:	movw	r1, #31824	; 0x7c50
   1324c:	movt	r1, #1
   13250:	movw	r3, #33134	; 0x816e
   13254:	movt	r3, #1
   13258:	movw	r2, #679	; 0x2a7
   1325c:	bl	110bc <__assert_fail@plt>
   13260:	push	{r4, r5, fp, lr}
   13264:	add	fp, sp, #8
   13268:	mov	r5, r1
   1326c:	mov	r4, r0
   13270:	mov	r0, #24
   13274:	bl	15e44 <__assert_fail@plt+0x4d88>
   13278:	mov	r1, #0
   1327c:	strb	r5, [r0, #8]
   13280:	str	r1, [r0]
   13284:	str	r1, [r0, #4]
   13288:	ldr	r1, [r4, #4]
   1328c:	cmp	r1, #0
   13290:	strne	r0, [r1, #4]
   13294:	strne	r0, [r4, #4]
   13298:	popne	{r4, r5, fp, pc}
   1329c:	movw	r0, #32597	; 0x7f55
   132a0:	movt	r0, #1
   132a4:	movw	r1, #31824	; 0x7c50
   132a8:	movt	r1, #1
   132ac:	movw	r3, #33203	; 0x81b3
   132b0:	movt	r3, #1
   132b4:	movw	r2, #649	; 0x289
   132b8:	bl	110bc <__assert_fail@plt>
   132bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   132c0:	add	fp, sp, #24
   132c4:	mov	r5, r1
   132c8:	mov	r6, r0
   132cc:	mov	r4, #0
   132d0:	movw	r8, #34536	; 0x86e8
   132d4:	movt	r8, #1
   132d8:	b	132e8 <__assert_fail@plt+0x222c>
   132dc:	add	r4, r4, #1
   132e0:	cmp	r4, #12
   132e4:	beq	1331c <__assert_fail@plt+0x2260>
   132e8:	ldr	r7, [r8, r4, lsl #2]
   132ec:	mov	r0, r6
   132f0:	mov	r1, r7
   132f4:	mov	r2, r5
   132f8:	bl	11098 <strncmp@plt>
   132fc:	cmp	r0, #0
   13300:	bne	132dc <__assert_fail@plt+0x2220>
   13304:	mov	r0, r7
   13308:	bl	10fcc <strlen@plt>
   1330c:	cmp	r0, r5
   13310:	bne	132dc <__assert_fail@plt+0x2220>
   13314:	mov	r0, r4
   13318:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1331c:	movw	r4, #9999	; 0x270f
   13320:	mov	r0, r4
   13324:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13328:	bx	lr
   1332c:	push	{r4, r5, fp, lr}
   13330:	add	fp, sp, #8
   13334:	sub	sp, sp, #8
   13338:	mov	r5, r0
   1333c:	mov	r0, #5
   13340:	bl	15e44 <__assert_fail@plt+0x4d88>
   13344:	mov	r4, r0
   13348:	bl	10fa8 <__ctype_b_loc@plt>
   1334c:	ldr	r0, [r0]
   13350:	add	r0, r0, r5, lsl #1
   13354:	ldrb	r0, [r0, #1]
   13358:	tst	r0, #64	; 0x40
   1335c:	bne	13380 <__assert_fail@plt+0x22c4>
   13360:	str	r5, [sp]
   13364:	movw	r3, #32764	; 0x7ffc
   13368:	movt	r3, #1
   1336c:	mov	r0, r4
   13370:	mov	r1, #1
   13374:	mov	r2, #5
   13378:	bl	10ff0 <__sprintf_chk@plt>
   1337c:	b	1338c <__assert_fail@plt+0x22d0>
   13380:	mov	r0, #0
   13384:	strb	r0, [r4, #1]
   13388:	strb	r5, [r4]
   1338c:	mov	r0, r4
   13390:	sub	sp, fp, #8
   13394:	pop	{r4, r5, fp, pc}
   13398:	push	{r4, sl, fp, lr}
   1339c:	add	fp, sp, #8
   133a0:	mov	r4, r0
   133a4:	bl	13848 <__assert_fail@plt+0x278c>
   133a8:	movw	r0, #37209	; 0x9159
   133ac:	movt	r0, #2
   133b0:	ldrb	r0, [r0]
   133b4:	cmp	r0, #1
   133b8:	popne	{r4, sl, fp, pc}
   133bc:	mov	r0, r4
   133c0:	bl	13a14 <__assert_fail@plt+0x2958>
   133c4:	asr	r1, r0, #31
   133c8:	strd	r0, [r4, #16]
   133cc:	pop	{r4, sl, fp, pc}
   133d0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   133d4:	add	fp, sp, #24
   133d8:	mov	r5, r3
   133dc:	mov	r6, r2
   133e0:	mov	r4, r0
   133e4:	bl	13848 <__assert_fail@plt+0x278c>
   133e8:	mov	r0, r4
   133ec:	ldr	r1, [r0, #16]!
   133f0:	ldr	r2, [r0, #4]
   133f4:	subs	r3, r6, r1
   133f8:	sbcs	r3, r5, r2
   133fc:	bcc	13424 <__assert_fail@plt+0x2368>
   13400:	ldr	r3, [r4, #24]
   13404:	cmp	r3, #1
   13408:	bne	13424 <__assert_fail@plt+0x2368>
   1340c:	subs	r8, r6, r1
   13410:	sbc	r9, r5, r2
   13414:	ldr	r1, [r4, #28]
   13418:	strd	r8, [r1, #16]
   1341c:	str	r6, [r0]
   13420:	str	r5, [r0, #4]
   13424:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   13428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1342c:	add	fp, sp, #28
   13430:	sub	sp, sp, #52	; 0x34
   13434:	str	r0, [sp, #40]	; 0x28
   13438:	movw	r0, #37209	; 0x9159
   1343c:	movt	r0, #2
   13440:	ldrb	r0, [r0]
   13444:	cmp	r0, #0
   13448:	bne	13668 <__assert_fail@plt+0x25ac>
   1344c:	mov	r7, r1
   13450:	ldrb	r0, [r1, #33]	; 0x21
   13454:	cmp	r0, #0
   13458:	beq	13668 <__assert_fail@plt+0x25ac>
   1345c:	ldr	r2, [sp, #40]	; 0x28
   13460:	ldr	r0, [r2, #16]!
   13464:	str	r0, [sp, #8]
   13468:	sub	r0, r2, #8
   1346c:	str	r0, [sp, #36]	; 0x24
   13470:	mov	r1, r7
   13474:	ldr	r0, [r1, #16]!
   13478:	str	r0, [sp, #12]
   1347c:	sub	r0, r1, #8
   13480:	str	r0, [sp, #32]
   13484:	ldr	r0, [r2, #-12]
   13488:	str	r0, [sp, #20]
   1348c:	str	r2, [sp, #24]
   13490:	ldr	r0, [r2, #4]
   13494:	str	r0, [sp]
   13498:	ldr	r0, [r1, #-12]
   1349c:	str	r0, [sp, #16]
   134a0:	str	r1, [sp, #28]
   134a4:	ldr	r0, [r1, #4]
   134a8:	str	r0, [sp, #4]
   134ac:	bl	10fa8 <__ctype_b_loc@plt>
   134b0:	ldr	r0, [r0]
   134b4:	mov	r1, #0
   134b8:	mov	r9, #0
   134bc:	mov	r8, #0
   134c0:	add	r2, r0, r1
   134c4:	ldrh	r2, [r2]
   134c8:	ubfx	r3, r2, #9, #1
   134cc:	add	r8, r8, r3
   134d0:	ubfx	r2, r2, #8, #1
   134d4:	add	r9, r9, r2
   134d8:	add	r1, r1, #2
   134dc:	cmp	r1, #512	; 0x200
   134e0:	bne	134c0 <__assert_fail@plt+0x2404>
   134e4:	mvn	r1, #0
   134e8:	mvn	r2, #1
   134ec:	ldr	r0, [sp, #36]	; 0x24
   134f0:	str	r2, [r0]
   134f4:	str	r1, [r0, #4]
   134f8:	ldr	r0, [sp, #32]
   134fc:	str	r2, [r0]
   13500:	str	r1, [r0, #4]
   13504:	mov	r4, #1
   13508:	mov	sl, #1
   1350c:	b	135dc <__assert_fail@plt+0x2520>
   13510:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13514:	subs	r0, r0, #2
   13518:	movwne	r0, #1
   1351c:	tst	sl, r0
   13520:	beq	13670 <__assert_fail@plt+0x25b4>
   13524:	ldr	r0, [sp, #40]	; 0x28
   13528:	bl	12520 <__assert_fail@plt+0x1464>
   1352c:	mov	r0, r5
   13530:	bl	12520 <__assert_fail@plt+0x1464>
   13534:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13538:	cmp	r0, #1
   1353c:	mov	r0, r8
   13540:	moveq	r0, r9
   13544:	sub	r0, r0, #1
   13548:	ldr	r4, [sp, #24]
   1354c:	ldrd	r2, [r4]
   13550:	subs	r0, r2, r0
   13554:	sbc	r1, r3, #0
   13558:	strd	r0, [r4]
   1355c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13560:	cmp	r0, #1
   13564:	mov	r0, r8
   13568:	moveq	r0, r9
   1356c:	sub	r0, r0, #1
   13570:	ldr	r4, [sp, #28]
   13574:	ldrd	r2, [r4]
   13578:	subs	r0, r2, r0
   1357c:	sbc	r1, r3, #0
   13580:	strd	r0, [r4]
   13584:	mvn	r0, #1
   13588:	adds	r0, r0, #1
   1358c:	mvn	r1, #0
   13590:	adc	r1, r1, #0
   13594:	cmn	r7, #1
   13598:	mov	r7, r5
   1359c:	ldrne	r2, [sp, #32]
   135a0:	ldrdne	r2, [r2]
   135a4:	eorne	r3, r3, r1
   135a8:	eorne	r2, r2, r0
   135ac:	orrne	r2, r2, r3
   135b0:	clzne	r2, r2
   135b4:	lsrne	r4, r2, #5
   135b8:	ldrne	r2, [sp, #36]	; 0x24
   135bc:	ldrdne	r2, [r2]
   135c0:	eorne	r1, r3, r1
   135c4:	eorne	r0, r2, r0
   135c8:	orrne	r0, r0, r1
   135cc:	clzne	r0, r0
   135d0:	lsrne	sl, r0, #5
   135d4:	cmnne	r6, #1
   135d8:	beq	1361c <__assert_fail@plt+0x2560>
   135dc:	ldr	r0, [sp, #40]	; 0x28
   135e0:	sub	r1, fp, #32
   135e4:	bl	1229c <__assert_fail@plt+0x11e0>
   135e8:	mov	r6, r0
   135ec:	mov	r5, r7
   135f0:	mov	r0, r7
   135f4:	sub	r1, fp, #36	; 0x24
   135f8:	bl	1229c <__assert_fail@plt+0x11e0>
   135fc:	mov	r7, r0
   13600:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13604:	tst	r4, #1
   13608:	cmpne	r0, #2
   1360c:	bne	13510 <__assert_fail@plt+0x2454>
   13610:	cmp	r0, #2
   13614:	bne	13524 <__assert_fail@plt+0x2468>
   13618:	b	13584 <__assert_fail@plt+0x24c8>
   1361c:	ldr	r0, [sp, #24]
   13620:	ldrd	r0, [r0]
   13624:	ldr	r2, [sp, #8]
   13628:	subs	r0, r2, r0
   1362c:	ldr	r0, [sp]
   13630:	sbcs	r0, r0, r1
   13634:	bcc	13694 <__assert_fail@plt+0x25d8>
   13638:	ldr	r0, [sp, #28]
   1363c:	ldrd	r0, [r0]
   13640:	ldr	r2, [sp, #12]
   13644:	subs	r0, r2, r0
   13648:	ldr	r0, [sp, #4]
   1364c:	sbcs	r0, r0, r1
   13650:	bcc	13694 <__assert_fail@plt+0x25d8>
   13654:	ldr	r0, [sp, #40]	; 0x28
   13658:	ldr	r1, [sp, #20]
   1365c:	str	r1, [r0, #4]
   13660:	ldr	r0, [sp, #16]
   13664:	str	r0, [r7, #4]
   13668:	sub	sp, fp, #28
   1366c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13670:	movw	r1, #33859	; 0x8443
   13674:	movt	r1, #1
   13678:	mov	r0, #0
   1367c:	mov	r2, #5
   13680:	bl	10ee8 <dcgettext@plt>
   13684:	mov	r2, r0
   13688:	mov	r0, #1
   1368c:	mov	r1, #0
   13690:	bl	10f60 <error@plt>
   13694:	movw	r0, #33907	; 0x8473
   13698:	movt	r0, #1
   1369c:	movw	r1, #31824	; 0x7c50
   136a0:	movt	r1, #1
   136a4:	movw	r3, #33960	; 0x84a8
   136a8:	movt	r3, #1
   136ac:	movw	r2, #1224	; 0x4c8
   136b0:	bl	110bc <__assert_fail@plt>
   136b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136b8:	add	fp, sp, #24
   136bc:	mov	r4, r0
   136c0:	movw	r0, #37213	; 0x915d
   136c4:	movt	r0, #2
   136c8:	ldrb	r0, [r0]
   136cc:	cmp	r0, #0
   136d0:	beq	1375c <__assert_fail@plt+0x26a0>
   136d4:	mov	ip, r1
   136d8:	mov	r5, r1
   136dc:	ldr	r0, [r5, #16]!
   136e0:	ldr	r1, [r5, #4]
   136e4:	ldr	r8, [r4, #16]!
   136e8:	ldr	r7, [r4, #4]
   136ec:	subs	r2, r0, r8
   136f0:	sbcs	r2, r1, r7
   136f4:	bcs	1377c <__assert_fail@plt+0x26c0>
   136f8:	orrs	r2, r0, r1
   136fc:	beq	1379c <__assert_fail@plt+0x26e0>
   13700:	ldr	r2, [ip, #4]
   13704:	ldr	r3, [r2]
   13708:	cmp	r3, #4
   1370c:	bhi	13758 <__assert_fail@plt+0x269c>
   13710:	add	r6, pc, #0
   13714:	ldr	pc, [r6, r3, lsl #2]
   13718:	andeq	r3, r1, ip, lsr #14
   1371c:	andeq	r3, r1, r4, lsr r7
   13720:			; <UNDEFINED> instruction: 0x000137bc
   13724:	andeq	r3, r1, r8, asr r7
   13728:	andeq	r3, r1, ip, lsr #14
   1372c:	add	lr, r2, #8
   13730:	b	13738 <__assert_fail@plt+0x267c>
   13734:	add	lr, r2, #9
   13738:	subs	r2, r8, r0
   1373c:	sbc	r3, r7, r1
   13740:	ldrb	r1, [lr]
   13744:	mov	r0, ip
   13748:	bl	1311c <__assert_fail@plt+0x2060>
   1374c:	ldrd	r0, [r4]
   13750:	strd	r0, [r5]
   13754:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13758:	bl	110a4 <abort@plt>
   1375c:	movw	r0, #33416	; 0x8288
   13760:	movt	r0, #1
   13764:	movw	r1, #31824	; 0x7c50
   13768:	movt	r1, #1
   1376c:	movw	r3, #34027	; 0x84eb
   13770:	movt	r3, #1
   13774:	movw	r2, #1377	; 0x561
   13778:	bl	110bc <__assert_fail@plt>
   1377c:	movw	r0, #34093	; 0x852d
   13780:	movt	r0, #1
   13784:	movw	r1, #31824	; 0x7c50
   13788:	movt	r1, #1
   1378c:	movw	r3, #34027	; 0x84eb
   13790:	movt	r3, #1
   13794:	movw	r2, #1378	; 0x562
   13798:	bl	110bc <__assert_fail@plt>
   1379c:	movw	r0, #34117	; 0x8545
   137a0:	movt	r0, #1
   137a4:	movw	r1, #31824	; 0x7c50
   137a8:	movt	r1, #1
   137ac:	movw	r3, #34027	; 0x84eb
   137b0:	movt	r3, #1
   137b4:	movw	r2, #1379	; 0x563
   137b8:	bl	110bc <__assert_fail@plt>
   137bc:	movw	r1, #34132	; 0x8554
   137c0:	movt	r1, #1
   137c4:	mov	r0, #0
   137c8:	mov	r2, #5
   137cc:	bl	10ee8 <dcgettext@plt>
   137d0:	mov	r2, r0
   137d4:	mov	r0, #1
   137d8:	mov	r1, #0
   137dc:	bl	10f60 <error@plt>
   137e0:	push	{r4, r5, r6, sl, fp, lr}
   137e4:	add	fp, sp, #16
   137e8:	mov	r4, r0
   137ec:	mvn	r1, #0
   137f0:	mvn	r0, #1
   137f4:	strd	r0, [r4, #8]
   137f8:	mov	r6, #0
   137fc:	mov	r0, r4
   13800:	mov	r1, #0
   13804:	bl	1229c <__assert_fail@plt+0x11e0>
   13808:	cmn	r0, #1
   1380c:	beq	13834 <__assert_fail@plt+0x2778>
   13810:	mov	r5, r0
   13814:	mov	r0, r4
   13818:	mov	r1, #0
   1381c:	bl	1229c <__assert_fail@plt+0x11e0>
   13820:	cmn	r0, #1
   13824:	beq	1383c <__assert_fail@plt+0x2780>
   13828:	cmp	r0, r5
   1382c:	beq	13814 <__assert_fail@plt+0x2758>
   13830:	mov	r6, #0
   13834:	mov	r0, r6
   13838:	pop	{r4, r5, r6, sl, fp, pc}
   1383c:	mov	r6, #1
   13840:	mov	r0, r6
   13844:	pop	{r4, r5, r6, sl, fp, pc}
   13848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	add	fp, sp, #28
   13850:	sub	sp, sp, #4
   13854:	mov	r7, r0
   13858:	mov	r2, #0
   1385c:	strb	r2, [r0, #34]	; 0x22
   13860:	str	r2, [r0, #24]
   13864:	strh	r2, [r0, #32]
   13868:	ldr	r8, [r0]
   1386c:	mov	r9, #0
   13870:	ldr	r8, [r8, #4]
   13874:	cmp	r8, #0
   13878:	beq	139e0 <__assert_fail@plt+0x2924>
   1387c:	ldr	r0, [r8]
   13880:	cmp	r0, #4
   13884:	bhi	139f0 <__assert_fail@plt+0x2934>
   13888:	mov	r5, #0
   1388c:	mov	r4, #1
   13890:	add	r1, pc, #0
   13894:	ldr	pc, [r1, r0, lsl #2]
   13898:	muleq	r1, r4, r9
   1389c:	andeq	r3, r1, ip, lsr #17
   138a0:	strdeq	r3, [r1], -r4
   138a4:	andeq	r3, r1, ip, asr #18
   138a8:	andeq	r3, r1, ip, asr #17
   138ac:	ldrb	r0, [r8, #8]
   138b0:	ldrb	r1, [r8, #9]
   138b4:	cmp	r1, r0
   138b8:	bcc	139f4 <__assert_fail@plt+0x2938>
   138bc:	sub	r0, r1, r0
   138c0:	add	r4, r0, #1
   138c4:	asr	r5, r4, #31
   138c8:	b	13994 <__assert_fail@plt+0x28d8>
   138cc:	ldrd	r4, [r8, #16]
   138d0:	orrs	r0, r4, r5
   138d4:	bne	13994 <__assert_fail@plt+0x28d8>
   138d8:	str	r8, [r7, #28]
   138dc:	ldr	r0, [r7, #24]
   138e0:	add	r0, r0, #1
   138e4:	str	r0, [r7, #24]
   138e8:	mov	r4, #0
   138ec:	mov	r5, #0
   138f0:	b	13994 <__assert_fail@plt+0x28d8>
   138f4:	str	r2, [sp]
   138f8:	mov	r0, #1
   138fc:	strb	r0, [r7, #33]	; 0x21
   13900:	ldr	sl, [r8, #8]
   13904:	mov	r6, #0
   13908:	mov	r4, #0
   1390c:	mov	r5, #0
   13910:	uxtb	r1, r6
   13914:	mov	r0, sl
   13918:	bl	13a94 <__assert_fail@plt+0x29d8>
   1391c:	adds	r4, r4, r0
   13920:	adc	r5, r5, #0
   13924:	add	r6, r6, #1
   13928:	cmp	r6, #256	; 0x100
   1392c:	bne	13910 <__assert_fail@plt+0x2854>
   13930:	cmp	sl, #6
   13934:	beq	13990 <__assert_fail@plt+0x28d4>
   13938:	cmp	sl, #10
   1393c:	ldr	r2, [sp]
   13940:	movne	r0, #1
   13944:	strbne	r0, [r7, #34]	; 0x22
   13948:	b	13994 <__assert_fail@plt+0x28d8>
   1394c:	str	r2, [sp]
   13950:	mov	sl, r7
   13954:	ldrb	r7, [r8, #8]
   13958:	mov	r6, #0
   1395c:	mov	r4, #0
   13960:	mov	r5, #0
   13964:	uxtb	r1, r6
   13968:	mov	r0, r7
   1396c:	bl	13b58 <__assert_fail@plt+0x2a9c>
   13970:	adds	r4, r4, r0
   13974:	adc	r5, r5, #0
   13978:	add	r6, r6, #1
   1397c:	cmp	r6, #256	; 0x100
   13980:	bne	13964 <__assert_fail@plt+0x28a8>
   13984:	mov	r7, sl
   13988:	mov	r0, #1
   1398c:	strb	r0, [sl, #32]
   13990:	ldr	r2, [sp]
   13994:	adds	r0, r4, r2
   13998:	adc	r1, r5, r9
   1399c:	subs	r2, r0, r2
   139a0:	sbcs	r2, r1, r9
   139a4:	bcc	139bc <__assert_fail@plt+0x2900>
   139a8:	and	r2, r0, r1
   139ac:	cmn	r2, #1
   139b0:	mov	r2, r0
   139b4:	mov	r9, r1
   139b8:	bne	13870 <__assert_fail@plt+0x27b4>
   139bc:	movw	r1, #33832	; 0x8428
   139c0:	movt	r1, #1
   139c4:	mov	r0, #0
   139c8:	mov	r2, #5
   139cc:	bl	10ee8 <dcgettext@plt>
   139d0:	mov	r2, r0
   139d4:	mov	r0, #1
   139d8:	mov	r1, #0
   139dc:	bl	10f60 <error@plt>
   139e0:	str	r2, [r7, #16]
   139e4:	str	r9, [r7, #20]
   139e8:	sub	sp, fp, #28
   139ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f0:	bl	110a4 <abort@plt>
   139f4:	movw	r0, #33746	; 0x83d2
   139f8:	movt	r0, #1
   139fc:	movw	r1, #31824	; 0x7c50
   13a00:	movt	r1, #1
   13a04:	movw	r3, #33792	; 0x8400
   13a08:	movt	r3, #1
   13a0c:	movw	r2, #1265	; 0x4f1
   13a10:	bl	110bc <__assert_fail@plt>
   13a14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a18:	add	fp, sp, #24
   13a1c:	sub	sp, sp, #256	; 0x100
   13a20:	mov	r4, r0
   13a24:	mov	r5, sp
   13a28:	mov	r6, #256	; 0x100
   13a2c:	mov	r0, r5
   13a30:	mov	r1, #0
   13a34:	mov	r2, #256	; 0x100
   13a38:	bl	11008 <memset@plt>
   13a3c:	mvn	r1, #0
   13a40:	mvn	r0, #1
   13a44:	strd	r0, [r4, #8]
   13a48:	mov	r0, r4
   13a4c:	mov	r1, #0
   13a50:	bl	1229c <__assert_fail@plt+0x11e0>
   13a54:	cmn	r0, #1
   13a58:	beq	13a88 <__assert_fail@plt+0x29cc>
   13a5c:	mov	r6, #256	; 0x100
   13a60:	mov	r7, #1
   13a64:	ldrb	r1, [r5, r0]
   13a68:	strb	r7, [r5, r0]
   13a6c:	eor	r0, r1, #1
   13a70:	sub	r6, r6, r0
   13a74:	mov	r0, r4
   13a78:	mov	r1, #0
   13a7c:	bl	1229c <__assert_fail@plt+0x11e0>
   13a80:	cmn	r0, #1
   13a84:	bne	13a64 <__assert_fail@plt+0x29a8>
   13a88:	mov	r0, r6
   13a8c:	sub	sp, fp, #24
   13a90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a94:	push	{r4, r5, fp, lr}
   13a98:	add	fp, sp, #8
   13a9c:	cmp	r0, #11
   13aa0:	bhi	13b54 <__assert_fail@plt+0x2a98>
   13aa4:	mov	r4, r1
   13aa8:	mov	r5, #8
   13aac:	add	r1, pc, #0
   13ab0:	ldr	pc, [r1, r0, lsl #2]
   13ab4:	andeq	r3, r1, r8, lsr fp
   13ab8:	andeq	r3, r1, r4, ror #21
   13abc:	strdeq	r3, [r1], -ip
   13ac0:	andeq	r3, r1, ip, lsl #22
   13ac4:	strdeq	r3, [r1], -r4
   13ac8:	andeq	r3, r1, ip, lsl fp
   13acc:	andeq	r3, r1, r4, lsr #22
   13ad0:	andeq	r3, r1, r4, lsl fp
   13ad4:	andeq	r3, r1, ip, lsr #22
   13ad8:	andeq	r3, r1, r4, lsl #22
   13adc:	andeq	r3, r1, r4, lsr fp
   13ae0:	andeq	r3, r1, ip, ror #21
   13ae4:	mov	r5, #1024	; 0x400
   13ae8:	b	13b38 <__assert_fail@plt+0x2a7c>
   13aec:	mov	r5, #4096	; 0x1000
   13af0:	b	13b38 <__assert_fail@plt+0x2a7c>
   13af4:	mov	r5, #2048	; 0x800
   13af8:	b	13b38 <__assert_fail@plt+0x2a7c>
   13afc:	mov	r5, #1
   13b00:	b	13b38 <__assert_fail@plt+0x2a7c>
   13b04:	mov	r5, #8192	; 0x2000
   13b08:	b	13b38 <__assert_fail@plt+0x2a7c>
   13b0c:	mov	r5, #2
   13b10:	b	13b38 <__assert_fail@plt+0x2a7c>
   13b14:	mov	r5, #16384	; 0x4000
   13b18:	b	13b38 <__assert_fail@plt+0x2a7c>
   13b1c:	mov	r5, #32768	; 0x8000
   13b20:	b	13b38 <__assert_fail@plt+0x2a7c>
   13b24:	mov	r5, #512	; 0x200
   13b28:	b	13b38 <__assert_fail@plt+0x2a7c>
   13b2c:	mov	r5, #4
   13b30:	b	13b38 <__assert_fail@plt+0x2a7c>
   13b34:	mov	r5, #256	; 0x100
   13b38:	bl	10fa8 <__ctype_b_loc@plt>
   13b3c:	ldr	r0, [r0]
   13b40:	add	r0, r0, r4, lsl #1
   13b44:	ldrh	r0, [r0]
   13b48:	ands	r0, r0, r5
   13b4c:	movwne	r0, #1
   13b50:	pop	{r4, r5, fp, pc}
   13b54:	bl	110a4 <abort@plt>
   13b58:	sub	r0, r0, r1
   13b5c:	clz	r0, r0
   13b60:	lsr	r0, r0, #5
   13b64:	bx	lr
   13b68:	movw	r1, #46176	; 0xb460
   13b6c:	movt	r1, #2
   13b70:	str	r0, [r1]
   13b74:	bx	lr
   13b78:	movw	r1, #46180	; 0xb464
   13b7c:	movt	r1, #2
   13b80:	strb	r0, [r1]
   13b84:	bx	lr
   13b88:	push	{r4, r5, r6, sl, fp, lr}
   13b8c:	add	fp, sp, #16
   13b90:	sub	sp, sp, #8
   13b94:	movw	r0, #37204	; 0x9154
   13b98:	movt	r0, #2
   13b9c:	ldr	r0, [r0]
   13ba0:	bl	16b60 <__assert_fail@plt+0x5aa4>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13bd0 <__assert_fail@plt+0x2b14>
   13bac:	movw	r0, #46180	; 0xb464
   13bb0:	movt	r0, #2
   13bb4:	ldrb	r0, [r0]
   13bb8:	cmp	r0, #0
   13bbc:	beq	13bf0 <__assert_fail@plt+0x2b34>
   13bc0:	bl	10fe4 <__errno_location@plt>
   13bc4:	ldr	r0, [r0]
   13bc8:	cmp	r0, #32
   13bcc:	bne	13bf0 <__assert_fail@plt+0x2b34>
   13bd0:	movw	r0, #37192	; 0x9148
   13bd4:	movt	r0, #2
   13bd8:	ldr	r0, [r0]
   13bdc:	bl	16b60 <__assert_fail@plt+0x5aa4>
   13be0:	cmp	r0, #0
   13be4:	subeq	sp, fp, #16
   13be8:	popeq	{r4, r5, r6, sl, fp, pc}
   13bec:	b	13c60 <__assert_fail@plt+0x2ba4>
   13bf0:	movw	r1, #31786	; 0x7c2a
   13bf4:	movt	r1, #1
   13bf8:	mov	r0, #0
   13bfc:	mov	r2, #5
   13c00:	bl	10ee8 <dcgettext@plt>
   13c04:	mov	r4, r0
   13c08:	movw	r0, #46176	; 0xb460
   13c0c:	movt	r0, #2
   13c10:	ldr	r6, [r0]
   13c14:	bl	10fe4 <__errno_location@plt>
   13c18:	ldr	r5, [r0]
   13c1c:	cmp	r6, #0
   13c20:	bne	13c3c <__assert_fail@plt+0x2b80>
   13c24:	movw	r2, #34603	; 0x872b
   13c28:	movt	r2, #1
   13c2c:	mov	r0, #0
   13c30:	mov	r1, r5
   13c34:	mov	r3, r4
   13c38:	b	13c5c <__assert_fail@plt+0x2ba0>
   13c3c:	mov	r0, r6
   13c40:	bl	1537c <__assert_fail@plt+0x42c0>
   13c44:	mov	r3, r0
   13c48:	str	r4, [sp]
   13c4c:	movw	r2, #34599	; 0x8727
   13c50:	movt	r2, #1
   13c54:	mov	r0, #0
   13c58:	mov	r1, r5
   13c5c:	bl	10f60 <error@plt>
   13c60:	movw	r0, #37108	; 0x90f4
   13c64:	movt	r0, #2
   13c68:	ldr	r0, [r0]
   13c6c:	bl	10ea0 <_exit@plt>
   13c70:	b	10e70 <posix_fadvise64@plt>
   13c74:	cmp	r0, #0
   13c78:	bxeq	lr
   13c7c:	push	{r4, sl, fp, lr}
   13c80:	add	fp, sp, #8
   13c84:	sub	sp, sp, #16
   13c88:	mov	r4, r1
   13c8c:	bl	11020 <fileno@plt>
   13c90:	mov	r1, #0
   13c94:	str	r1, [sp]
   13c98:	stmib	sp, {r1, r4}
   13c9c:	mov	r2, #0
   13ca0:	mov	r3, #0
   13ca4:	bl	13c70 <__assert_fail@plt+0x2bb4>
   13ca8:	sub	sp, fp, #8
   13cac:	pop	{r4, sl, fp, pc}
   13cb0:	push	{r4, r5, r6, sl, fp, lr}
   13cb4:	add	fp, sp, #16
   13cb8:	mov	r4, r0
   13cbc:	bl	10fe4 <__errno_location@plt>
   13cc0:	mov	r5, r0
   13cc4:	ldr	r6, [r0]
   13cc8:	mov	r0, r4
   13ccc:	bl	10e94 <free@plt>
   13cd0:	str	r6, [r5]
   13cd4:	pop	{r4, r5, r6, sl, fp, pc}
   13cd8:	push	{r4, r5, fp, lr}
   13cdc:	add	fp, sp, #8
   13ce0:	cmp	r0, #0
   13ce4:	beq	13d78 <__assert_fail@plt+0x2cbc>
   13ce8:	mov	r4, r0
   13cec:	mov	r1, #47	; 0x2f
   13cf0:	bl	11074 <strrchr@plt>
   13cf4:	cmp	r0, #0
   13cf8:	mov	r5, r4
   13cfc:	addne	r5, r0, #1
   13d00:	sub	r0, r5, r4
   13d04:	cmp	r0, #7
   13d08:	blt	13d5c <__assert_fail@plt+0x2ca0>
   13d0c:	sub	r0, r5, #7
   13d10:	movw	r1, #34662	; 0x8766
   13d14:	movt	r1, #1
   13d18:	mov	r2, #7
   13d1c:	bl	11098 <strncmp@plt>
   13d20:	cmp	r0, #0
   13d24:	bne	13d5c <__assert_fail@plt+0x2ca0>
   13d28:	movw	r1, #34670	; 0x876e
   13d2c:	movt	r1, #1
   13d30:	mov	r0, r5
   13d34:	mov	r2, #3
   13d38:	bl	11098 <strncmp@plt>
   13d3c:	cmp	r0, #0
   13d40:	beq	13d4c <__assert_fail@plt+0x2c90>
   13d44:	mov	r4, r5
   13d48:	b	13d5c <__assert_fail@plt+0x2ca0>
   13d4c:	add	r4, r5, #3
   13d50:	movw	r0, #37176	; 0x9138
   13d54:	movt	r0, #2
   13d58:	str	r4, [r0]
   13d5c:	movw	r0, #37180	; 0x913c
   13d60:	movt	r0, #2
   13d64:	str	r4, [r0]
   13d68:	movw	r0, #46184	; 0xb468
   13d6c:	movt	r0, #2
   13d70:	str	r4, [r0]
   13d74:	pop	{r4, r5, fp, pc}
   13d78:	movw	r0, #37192	; 0x9148
   13d7c:	movt	r0, #2
   13d80:	ldr	r3, [r0]
   13d84:	movw	r0, #34606	; 0x872e
   13d88:	movt	r0, #1
   13d8c:	mov	r1, #55	; 0x37
   13d90:	mov	r2, #1
   13d94:	bl	10f18 <fwrite@plt>
   13d98:	bl	110a4 <abort@plt>
   13d9c:	push	{r4, r5, r6, sl, fp, lr}
   13da0:	add	fp, sp, #16
   13da4:	mov	r4, r0
   13da8:	movw	r0, #46192	; 0xb470
   13dac:	movt	r0, #2
   13db0:	cmp	r4, #0
   13db4:	moveq	r4, r0
   13db8:	bl	10fe4 <__errno_location@plt>
   13dbc:	mov	r5, r0
   13dc0:	ldr	r6, [r0]
   13dc4:	mov	r0, r4
   13dc8:	mov	r1, #48	; 0x30
   13dcc:	bl	1612c <__assert_fail@plt+0x5070>
   13dd0:	str	r6, [r5]
   13dd4:	pop	{r4, r5, r6, sl, fp, pc}
   13dd8:	movw	r1, #46192	; 0xb470
   13ddc:	movt	r1, #2
   13de0:	cmp	r0, #0
   13de4:	movne	r1, r0
   13de8:	ldr	r0, [r1]
   13dec:	bx	lr
   13df0:	movw	r2, #46192	; 0xb470
   13df4:	movt	r2, #2
   13df8:	cmp	r0, #0
   13dfc:	movne	r2, r0
   13e00:	str	r1, [r2]
   13e04:	bx	lr
   13e08:	movw	r3, #46192	; 0xb470
   13e0c:	movt	r3, #2
   13e10:	cmp	r0, #0
   13e14:	movne	r3, r0
   13e18:	ubfx	r0, r1, #5, #3
   13e1c:	add	ip, r3, r0, lsl #2
   13e20:	ldr	r3, [ip, #8]
   13e24:	and	r1, r1, #31
   13e28:	mov	r0, #1
   13e2c:	and	r0, r0, r3, lsr r1
   13e30:	and	r2, r2, #1
   13e34:	eor	r2, r0, r2
   13e38:	eor	r1, r3, r2, lsl r1
   13e3c:	str	r1, [ip, #8]
   13e40:	bx	lr
   13e44:	movw	r2, #46192	; 0xb470
   13e48:	movt	r2, #2
   13e4c:	cmp	r0, #0
   13e50:	movne	r2, r0
   13e54:	ldr	r0, [r2, #4]
   13e58:	str	r1, [r2, #4]
   13e5c:	bx	lr
   13e60:	push	{fp, lr}
   13e64:	mov	fp, sp
   13e68:	movw	r3, #46192	; 0xb470
   13e6c:	movt	r3, #2
   13e70:	cmp	r0, #0
   13e74:	movne	r3, r0
   13e78:	mov	r0, #10
   13e7c:	str	r0, [r3]
   13e80:	cmp	r1, #0
   13e84:	cmpne	r2, #0
   13e88:	bne	13e90 <__assert_fail@plt+0x2dd4>
   13e8c:	bl	110a4 <abort@plt>
   13e90:	str	r1, [r3, #40]	; 0x28
   13e94:	str	r2, [r3, #44]	; 0x2c
   13e98:	pop	{fp, pc}
   13e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ea0:	add	fp, sp, #28
   13ea4:	sub	sp, sp, #20
   13ea8:	mov	r8, r3
   13eac:	mov	r9, r2
   13eb0:	mov	sl, r1
   13eb4:	mov	r7, r0
   13eb8:	ldr	r0, [fp, #8]
   13ebc:	movw	r5, #46192	; 0xb470
   13ec0:	movt	r5, #2
   13ec4:	cmp	r0, #0
   13ec8:	movne	r5, r0
   13ecc:	bl	10fe4 <__errno_location@plt>
   13ed0:	mov	r4, r0
   13ed4:	ldm	r5, {r0, r1}
   13ed8:	ldr	r2, [r5, #40]	; 0x28
   13edc:	ldr	r3, [r5, #44]	; 0x2c
   13ee0:	ldr	r6, [r4]
   13ee4:	add	r5, r5, #8
   13ee8:	stm	sp, {r0, r1, r5}
   13eec:	str	r2, [sp, #12]
   13ef0:	str	r3, [sp, #16]
   13ef4:	mov	r0, r7
   13ef8:	mov	r1, sl
   13efc:	mov	r2, r9
   13f00:	mov	r3, r8
   13f04:	bl	13f14 <__assert_fail@plt+0x2e58>
   13f08:	str	r6, [r4]
   13f0c:	sub	sp, fp, #28
   13f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f18:	add	fp, sp, #28
   13f1c:	sub	sp, sp, #156	; 0x9c
   13f20:	mov	r9, r3
   13f24:	mov	r7, r1
   13f28:	mov	r6, r0
   13f2c:	str	r2, [fp, #-80]	; 0xffffffb0
   13f30:	add	r0, r2, #1
   13f34:	str	r0, [sp, #76]	; 0x4c
   13f38:	ldr	r0, [fp, #12]
   13f3c:	and	r1, r0, #1
   13f40:	str	r1, [sp, #40]	; 0x28
   13f44:	and	r1, r0, #4
   13f48:	str	r1, [sp, #36]	; 0x24
   13f4c:	ubfx	r4, r0, #1, #1
   13f50:	bl	10f30 <__ctype_get_mb_cur_max@plt>
   13f54:	str	r0, [sp, #44]	; 0x2c
   13f58:	ldr	r0, [fp, #24]
   13f5c:	str	r0, [sp, #88]	; 0x58
   13f60:	ldr	r0, [fp, #20]
   13f64:	str	r0, [sp, #80]	; 0x50
   13f68:	ldr	r1, [fp, #8]
   13f6c:	mov	r0, #0
   13f70:	str	r0, [sp, #84]	; 0x54
   13f74:	mov	r0, #0
   13f78:	str	r0, [fp, #-84]	; 0xffffffac
   13f7c:	mov	r0, #0
   13f80:	str	r0, [fp, #-72]	; 0xffffffb8
   13f84:	mov	r0, #0
   13f88:	mov	r2, #0
   13f8c:	str	r2, [fp, #-56]	; 0xffffffc8
   13f90:	mov	r2, #0
   13f94:	str	r2, [sp, #64]	; 0x40
   13f98:	mov	r2, #1
   13f9c:	str	r2, [fp, #-48]	; 0xffffffd0
   13fa0:	cmp	r1, #10
   13fa4:	bhi	14ed0 <__assert_fail@plt+0x3e14>
   13fa8:	mov	sl, r7
   13fac:	mov	r7, r1
   13fb0:	add	r1, pc, #24
   13fb4:	mov	r8, #0
   13fb8:	mov	r2, #1
   13fbc:	mov	r3, #0
   13fc0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13fc4:	mov	lr, r9
   13fc8:	mov	r5, r6
   13fcc:	ldr	pc, [r1, r7, lsl #2]
   13fd0:	andeq	r4, r1, r4, lsr #1
   13fd4:	andeq	r4, r1, r4, ror #1
   13fd8:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fdc:	muleq	r1, ip, r0
   13fe0:	ldrdeq	r4, [r1], -r8
   13fe4:	andeq	r4, r1, r8, lsr r1
   13fe8:	andeq	r4, r1, r4, asr #1
   13fec:	muleq	r1, r4, r1
   13ff0:	strdeq	r3, [r1], -ip
   13ff4:	strdeq	r3, [r1], -ip
   13ff8:	andeq	r4, r1, r8, lsr #32
   13ffc:	movw	r0, #34752	; 0x87c0
   14000:	movt	r0, #1
   14004:	mov	r1, r7
   14008:	bl	154d8 <__assert_fail@plt+0x441c>
   1400c:	str	r0, [sp, #80]	; 0x50
   14010:	movw	r0, #32468	; 0x7ed4
   14014:	movt	r0, #1
   14018:	mov	r1, r7
   1401c:	bl	154d8 <__assert_fail@plt+0x441c>
   14020:	mov	r5, r6
   14024:	str	r0, [sp, #88]	; 0x58
   14028:	mov	r8, #0
   1402c:	tst	r4, #1
   14030:	str	r7, [fp, #-64]	; 0xffffffc0
   14034:	bne	1406c <__assert_fail@plt+0x2fb0>
   14038:	ldr	r0, [sp, #80]	; 0x50
   1403c:	ldrb	r0, [r0]
   14040:	cmp	r0, #0
   14044:	beq	1406c <__assert_fail@plt+0x2fb0>
   14048:	ldr	r1, [sp, #80]	; 0x50
   1404c:	add	r1, r1, #1
   14050:	mov	r8, #0
   14054:	cmp	r8, sl
   14058:	strbcc	r0, [r5, r8]
   1405c:	ldrb	r0, [r1, r8]
   14060:	add	r8, r8, #1
   14064:	cmp	r0, #0
   14068:	bne	14054 <__assert_fail@plt+0x2f98>
   1406c:	ldr	r7, [sp, #88]	; 0x58
   14070:	mov	r0, r7
   14074:	bl	10fcc <strlen@plt>
   14078:	mov	r5, r6
   1407c:	str	r0, [fp, #-72]	; 0xffffffb8
   14080:	str	r7, [fp, #-84]	; 0xffffffac
   14084:	mov	r2, #1
   14088:	mov	r3, r4
   1408c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14090:	mov	lr, r9
   14094:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14098:	b	14194 <__assert_fail@plt+0x30d8>
   1409c:	mov	r0, #1
   140a0:	b	140e4 <__assert_fail@plt+0x3028>
   140a4:	mov	r7, #0
   140a8:	mov	r8, #0
   140ac:	mov	r2, r0
   140b0:	b	14190 <__assert_fail@plt+0x30d4>
   140b4:	tst	r4, #1
   140b8:	bne	140e4 <__assert_fail@plt+0x3028>
   140bc:	mov	r2, r0
   140c0:	b	1410c <__assert_fail@plt+0x3050>
   140c4:	mov	r0, #1
   140c8:	str	r0, [fp, #-72]	; 0xffffffb8
   140cc:	mov	r8, #0
   140d0:	mov	r7, #5
   140d4:	b	14150 <__assert_fail@plt+0x3094>
   140d8:	mov	r2, #1
   140dc:	tst	r4, #1
   140e0:	beq	1410c <__assert_fail@plt+0x3050>
   140e4:	mov	r1, #1
   140e8:	str	r1, [fp, #-72]	; 0xffffffb8
   140ec:	mov	r8, #0
   140f0:	mov	r7, #2
   140f4:	movw	r1, #32468	; 0x7ed4
   140f8:	movt	r1, #1
   140fc:	str	r1, [fp, #-84]	; 0xffffffac
   14100:	mov	r2, r0
   14104:	mov	r3, #1
   14108:	b	14194 <__assert_fail@plt+0x30d8>
   1410c:	mov	r8, #1
   14110:	mov	r7, #2
   14114:	cmp	sl, #0
   14118:	movne	r0, #39	; 0x27
   1411c:	strbne	r0, [r5]
   14120:	movw	r0, #32468	; 0x7ed4
   14124:	movt	r0, #1
   14128:	str	r0, [fp, #-84]	; 0xffffffac
   1412c:	mov	r0, #1
   14130:	str	r0, [fp, #-72]	; 0xffffffb8
   14134:	b	14190 <__assert_fail@plt+0x30d4>
   14138:	mov	r7, #5
   1413c:	tst	r4, #1
   14140:	beq	14168 <__assert_fail@plt+0x30ac>
   14144:	mov	r0, #1
   14148:	str	r0, [fp, #-72]	; 0xffffffb8
   1414c:	mov	r8, #0
   14150:	movw	r0, #34750	; 0x87be
   14154:	movt	r0, #1
   14158:	str	r0, [fp, #-84]	; 0xffffffac
   1415c:	mov	r2, #1
   14160:	mov	r3, #1
   14164:	b	14194 <__assert_fail@plt+0x30d8>
   14168:	cmp	sl, #0
   1416c:	movne	r0, #34	; 0x22
   14170:	strbne	r0, [r5]
   14174:	mov	r8, #1
   14178:	movw	r0, #34750	; 0x87be
   1417c:	movt	r0, #1
   14180:	str	r0, [fp, #-84]	; 0xffffffac
   14184:	mov	r0, #1
   14188:	str	r0, [fp, #-72]	; 0xffffffb8
   1418c:	mov	r2, #1
   14190:	mov	r3, #0
   14194:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14198:	cmp	r0, #0
   1419c:	movwne	r0, #1
   141a0:	and	r1, r0, r3
   141a4:	and	r1, r2, r1
   141a8:	str	r1, [sp, #56]	; 0x38
   141ac:	sub	r1, r7, #2
   141b0:	clz	r1, r1
   141b4:	lsr	r1, r1, #5
   141b8:	and	r1, r1, r3
   141bc:	str	r1, [sp, #68]	; 0x44
   141c0:	str	r7, [fp, #-64]	; 0xffffffc0
   141c4:	subs	r1, r7, #2
   141c8:	movwne	r1, #1
   141cc:	eor	r4, r3, #1
   141d0:	str	r4, [fp, #-88]	; 0xffffffa8
   141d4:	orr	r4, r1, r4
   141d8:	str	r4, [sp, #72]	; 0x48
   141dc:	and	r1, r1, r2
   141e0:	and	r0, r0, r1
   141e4:	str	r0, [fp, #-60]	; 0xffffffc4
   141e8:	str	r3, [fp, #-76]	; 0xffffffb4
   141ec:	orr	r0, r1, r3
   141f0:	eor	r0, r0, #1
   141f4:	ldr	r1, [fp, #16]
   141f8:	clz	r1, r1
   141fc:	lsr	r1, r1, #5
   14200:	orr	r0, r1, r0
   14204:	str	r0, [fp, #-68]	; 0xffffffbc
   14208:	str	r2, [sp, #92]	; 0x5c
   1420c:	eor	r0, r2, #1
   14210:	str	r0, [sp, #60]	; 0x3c
   14214:	mov	r7, #0
   14218:	cmn	lr, #1
   1421c:	beq	1422c <__assert_fail@plt+0x3170>
   14220:	cmp	r7, lr
   14224:	bne	14238 <__assert_fail@plt+0x317c>
   14228:	b	14d44 <__assert_fail@plt+0x3c88>
   1422c:	ldrb	r0, [ip, r7]
   14230:	cmp	r0, #0
   14234:	beq	14d44 <__assert_fail@plt+0x3c88>
   14238:	mov	r9, #0
   1423c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14240:	cmp	r0, #0
   14244:	beq	14278 <__assert_fail@plt+0x31bc>
   14248:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1424c:	add	r4, r7, r0
   14250:	cmp	r0, #2
   14254:	bcc	14270 <__assert_fail@plt+0x31b4>
   14258:	cmn	lr, #1
   1425c:	bne	14270 <__assert_fail@plt+0x31b4>
   14260:	mov	r0, ip
   14264:	bl	10fcc <strlen@plt>
   14268:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1426c:	mov	lr, r0
   14270:	cmp	r4, lr
   14274:	bls	14284 <__assert_fail@plt+0x31c8>
   14278:	mov	r0, #0
   1427c:	str	r0, [fp, #-52]	; 0xffffffcc
   14280:	b	142c8 <__assert_fail@plt+0x320c>
   14284:	mov	r4, lr
   14288:	add	r0, ip, r7
   1428c:	ldr	r1, [fp, #-84]	; 0xffffffac
   14290:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14294:	bl	10fc0 <bcmp@plt>
   14298:	cmp	r0, #0
   1429c:	mov	r1, r0
   142a0:	movwne	r1, #1
   142a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142a8:	orr	r1, r1, r2
   142ac:	tst	r1, #1
   142b0:	beq	14e18 <__assert_fail@plt+0x3d5c>
   142b4:	clz	r0, r0
   142b8:	lsr	r0, r0, #5
   142bc:	str	r0, [fp, #-52]	; 0xffffffcc
   142c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   142c4:	mov	lr, r4
   142c8:	ldrb	r4, [ip, r7]
   142cc:	cmp	r4, #126	; 0x7e
   142d0:	bhi	14800 <__assert_fail@plt+0x3744>
   142d4:	mov	r6, #1
   142d8:	mov	r2, #110	; 0x6e
   142dc:	mov	r0, #97	; 0x61
   142e0:	add	r3, pc, #4
   142e4:	mov	r1, #0
   142e8:	ldr	pc, [r3, r4, lsl #2]
   142ec:	andeq	r4, r1, r0, ror #12
   142f0:	andeq	r4, r1, r0, lsl #16
   142f4:	andeq	r4, r1, r0, lsl #16
   142f8:	andeq	r4, r1, r0, lsl #16
   142fc:	andeq	r4, r1, r0, lsl #16
   14300:	andeq	r4, r1, r0, lsl #16
   14304:	andeq	r4, r1, r0, lsl #16
   14308:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1430c:	andeq	r4, r1, r0, asr #12
   14310:	andeq	r4, r1, r8, lsr r6
   14314:	andeq	r4, r1, ip, asr #12
   14318:	andeq	r4, r1, r8, ror #14
   1431c:	andeq	r4, r1, r0, lsr r6
   14320:	andeq	r4, r1, r8, asr #12
   14324:	andeq	r4, r1, r0, lsl #16
   14328:	andeq	r4, r1, r0, lsl #16
   1432c:	andeq	r4, r1, r0, lsl #16
   14330:	andeq	r4, r1, r0, lsl #16
   14334:	andeq	r4, r1, r0, lsl #16
   14338:	andeq	r4, r1, r0, lsl #16
   1433c:	andeq	r4, r1, r0, lsl #16
   14340:	andeq	r4, r1, r0, lsl #16
   14344:	andeq	r4, r1, r0, lsl #16
   14348:	andeq	r4, r1, r0, lsl #16
   1434c:	andeq	r4, r1, r0, lsl #16
   14350:	andeq	r4, r1, r0, lsl #16
   14354:	andeq	r4, r1, r0, lsl #16
   14358:	andeq	r4, r1, r0, lsl #16
   1435c:	andeq	r4, r1, r0, lsl #16
   14360:	andeq	r4, r1, r0, lsl #16
   14364:	andeq	r4, r1, r0, lsl #16
   14368:	andeq	r4, r1, r0, lsl #16
   1436c:	andeq	r4, r1, r4, ror #11
   14370:	andeq	r4, r1, r8, ror #11
   14374:	andeq	r4, r1, r8, ror #11
   14378:	ldrdeq	r4, [r1], -r0
   1437c:	andeq	r4, r1, r8, ror #11
   14380:	andeq	r4, r1, r8, ror #9
   14384:	andeq	r4, r1, r8, ror #11
   14388:	andeq	r4, r1, r0, ror r7
   1438c:	andeq	r4, r1, r8, ror #11
   14390:	andeq	r4, r1, r8, ror #11
   14394:	andeq	r4, r1, r8, ror #11
   14398:	andeq	r4, r1, r8, ror #9
   1439c:	andeq	r4, r1, r8, ror #9
   143a0:	andeq	r4, r1, r8, ror #9
   143a4:	andeq	r4, r1, r8, ror #9
   143a8:	andeq	r4, r1, r8, ror #9
   143ac:	andeq	r4, r1, r8, ror #9
   143b0:	andeq	r4, r1, r8, ror #9
   143b4:	andeq	r4, r1, r8, ror #9
   143b8:	andeq	r4, r1, r8, ror #9
   143bc:	andeq	r4, r1, r8, ror #9
   143c0:	andeq	r4, r1, r8, ror #9
   143c4:	andeq	r4, r1, r8, ror #9
   143c8:	andeq	r4, r1, r8, ror #9
   143cc:	andeq	r4, r1, r8, ror #9
   143d0:	andeq	r4, r1, r8, ror #9
   143d4:	andeq	r4, r1, r8, ror #9
   143d8:	andeq	r4, r1, r8, ror #11
   143dc:	andeq	r4, r1, r8, ror #11
   143e0:	andeq	r4, r1, r8, ror #11
   143e4:	andeq	r4, r1, r8, ror #11
   143e8:	andeq	r4, r1, r8, lsr r7
   143ec:	andeq	r4, r1, r0, lsl #16
   143f0:	andeq	r4, r1, r8, ror #9
   143f4:	andeq	r4, r1, r8, ror #9
   143f8:	andeq	r4, r1, r8, ror #9
   143fc:	andeq	r4, r1, r8, ror #9
   14400:	andeq	r4, r1, r8, ror #9
   14404:	andeq	r4, r1, r8, ror #9
   14408:	andeq	r4, r1, r8, ror #9
   1440c:	andeq	r4, r1, r8, ror #9
   14410:	andeq	r4, r1, r8, ror #9
   14414:	andeq	r4, r1, r8, ror #9
   14418:	andeq	r4, r1, r8, ror #9
   1441c:	andeq	r4, r1, r8, ror #9
   14420:	andeq	r4, r1, r8, ror #9
   14424:	andeq	r4, r1, r8, ror #9
   14428:	andeq	r4, r1, r8, ror #9
   1442c:	andeq	r4, r1, r8, ror #9
   14430:	andeq	r4, r1, r8, ror #9
   14434:	andeq	r4, r1, r8, ror #9
   14438:	andeq	r4, r1, r8, ror #9
   1443c:	andeq	r4, r1, r8, ror #9
   14440:	andeq	r4, r1, r8, ror #9
   14444:	andeq	r4, r1, r8, ror #9
   14448:	andeq	r4, r1, r8, ror #9
   1444c:	andeq	r4, r1, r8, ror #9
   14450:	andeq	r4, r1, r8, ror #9
   14454:	andeq	r4, r1, r8, ror #9
   14458:	andeq	r4, r1, r8, ror #11
   1445c:	andeq	r4, r1, r0, lsl r6
   14460:	andeq	r4, r1, r8, ror #9
   14464:	andeq	r4, r1, r8, ror #11
   14468:	andeq	r4, r1, r8, ror #9
   1446c:	andeq	r4, r1, r8, ror #11
   14470:	andeq	r4, r1, r8, ror #9
   14474:	andeq	r4, r1, r8, ror #9
   14478:	andeq	r4, r1, r8, ror #9
   1447c:	andeq	r4, r1, r8, ror #9
   14480:	andeq	r4, r1, r8, ror #9
   14484:	andeq	r4, r1, r8, ror #9
   14488:	andeq	r4, r1, r8, ror #9
   1448c:	andeq	r4, r1, r8, ror #9
   14490:	andeq	r4, r1, r8, ror #9
   14494:	andeq	r4, r1, r8, ror #9
   14498:	andeq	r4, r1, r8, ror #9
   1449c:	andeq	r4, r1, r8, ror #9
   144a0:	andeq	r4, r1, r8, ror #9
   144a4:	andeq	r4, r1, r8, ror #9
   144a8:	andeq	r4, r1, r8, ror #9
   144ac:	andeq	r4, r1, r8, ror #9
   144b0:	andeq	r4, r1, r8, ror #9
   144b4:	andeq	r4, r1, r8, ror #9
   144b8:	andeq	r4, r1, r8, ror #9
   144bc:	andeq	r4, r1, r8, ror #9
   144c0:	andeq	r4, r1, r8, ror #9
   144c4:	andeq	r4, r1, r8, ror #9
   144c8:	andeq	r4, r1, r8, ror #9
   144cc:	andeq	r4, r1, r8, ror #9
   144d0:	andeq	r4, r1, r8, ror #9
   144d4:	andeq	r4, r1, r8, ror #9
   144d8:	andeq	r4, r1, r4, lsr #11
   144dc:	andeq	r4, r1, r8, ror #11
   144e0:	andeq	r4, r1, r4, lsr #11
   144e4:	ldrdeq	r4, [r1], -r0
   144e8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144ec:	tst	r0, #1
   144f0:	bne	1451c <__assert_fail@plt+0x3460>
   144f4:	ubfx	r0, r4, #5, #3
   144f8:	ldr	r1, [fp, #16]
   144fc:	ldr	r0, [r1, r0, lsl #2]
   14500:	and	r1, r4, #31
   14504:	mov	r2, #1
   14508:	tst	r0, r2, lsl r1
   1450c:	beq	1451c <__assert_fail@plt+0x3460>
   14510:	mov	r0, r4
   14514:	mov	r1, r6
   14518:	b	14530 <__assert_fail@plt+0x3474>
   1451c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14520:	cmp	r0, #0
   14524:	mov	r0, r4
   14528:	mov	r1, r6
   1452c:	beq	14868 <__assert_fail@plt+0x37ac>
   14530:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14534:	tst	r2, #1
   14538:	bne	14e2c <__assert_fail@plt+0x3d70>
   1453c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14540:	subs	r2, r2, #2
   14544:	movwne	r2, #1
   14548:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1454c:	orr	r2, r2, r3
   14550:	tst	r2, #1
   14554:	bne	14590 <__assert_fail@plt+0x34d4>
   14558:	cmp	r8, sl
   1455c:	movcc	r2, #39	; 0x27
   14560:	strbcc	r2, [r5, r8]
   14564:	add	r2, r8, #1
   14568:	cmp	r2, sl
   1456c:	movcc	r3, #36	; 0x24
   14570:	strbcc	r3, [r5, r2]
   14574:	add	r2, r8, #2
   14578:	cmp	r2, sl
   1457c:	movcc	r3, #39	; 0x27
   14580:	strbcc	r3, [r5, r2]
   14584:	add	r8, r8, #3
   14588:	mov	r2, #1
   1458c:	str	r2, [fp, #-56]	; 0xffffffc8
   14590:	cmp	r8, sl
   14594:	movcc	r2, #92	; 0x5c
   14598:	strbcc	r2, [r5, r8]
   1459c:	add	r8, r8, #1
   145a0:	b	148ac <__assert_fail@plt+0x37f0>
   145a4:	cmp	lr, #1
   145a8:	beq	145d0 <__assert_fail@plt+0x3514>
   145ac:	mov	r6, #0
   145b0:	cmn	lr, #1
   145b4:	bne	145dc <__assert_fail@plt+0x3520>
   145b8:	ldrb	r0, [ip, #1]
   145bc:	cmp	r0, #0
   145c0:	beq	145d0 <__assert_fail@plt+0x3514>
   145c4:	mvn	lr, #0
   145c8:	mov	r9, #0
   145cc:	b	144e8 <__assert_fail@plt+0x342c>
   145d0:	mov	r6, #0
   145d4:	cmp	r7, #0
   145d8:	beq	145e4 <__assert_fail@plt+0x3528>
   145dc:	mov	r9, #0
   145e0:	b	144e8 <__assert_fail@plt+0x342c>
   145e4:	mov	r1, #1
   145e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   145ec:	cmp	r0, #2
   145f0:	bne	14608 <__assert_fail@plt+0x354c>
   145f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   145f8:	tst	r0, #1
   145fc:	mov	r6, r1
   14600:	beq	144e8 <__assert_fail@plt+0x342c>
   14604:	b	14e2c <__assert_fail@plt+0x3d70>
   14608:	mov	r6, r1
   1460c:	b	144e8 <__assert_fail@plt+0x342c>
   14610:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14614:	cmp	r0, #2
   14618:	bne	1484c <__assert_fail@plt+0x3790>
   1461c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14620:	tst	r0, #1
   14624:	bne	14e2c <__assert_fail@plt+0x3d70>
   14628:	mov	r9, #0
   1462c:	b	14860 <__assert_fail@plt+0x37a4>
   14630:	mov	r0, #102	; 0x66
   14634:	b	148d4 <__assert_fail@plt+0x3818>
   14638:	mov	r2, #116	; 0x74
   1463c:	b	1464c <__assert_fail@plt+0x3590>
   14640:	mov	r0, #98	; 0x62
   14644:	b	148d4 <__assert_fail@plt+0x3818>
   14648:	mov	r2, #114	; 0x72
   1464c:	ldr	r0, [sp, #72]	; 0x48
   14650:	tst	r0, #1
   14654:	mov	r0, r2
   14658:	bne	148d4 <__assert_fail@plt+0x3818>
   1465c:	b	14e2c <__assert_fail@plt+0x3d70>
   14660:	ldr	r0, [sp, #92]	; 0x5c
   14664:	tst	r0, #1
   14668:	beq	148f0 <__assert_fail@plt+0x3834>
   1466c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14670:	tst	r0, #1
   14674:	bne	14e2c <__assert_fail@plt+0x3d70>
   14678:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1467c:	subs	r0, r0, #2
   14680:	movwne	r0, #1
   14684:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14688:	orr	r0, r0, r1
   1468c:	tst	r0, #1
   14690:	bne	146cc <__assert_fail@plt+0x3610>
   14694:	cmp	r8, sl
   14698:	movcc	r0, #39	; 0x27
   1469c:	strbcc	r0, [r5, r8]
   146a0:	add	r0, r8, #1
   146a4:	cmp	r0, sl
   146a8:	movcc	r1, #36	; 0x24
   146ac:	strbcc	r1, [r5, r0]
   146b0:	add	r0, r8, #2
   146b4:	cmp	r0, sl
   146b8:	movcc	r1, #39	; 0x27
   146bc:	strbcc	r1, [r5, r0]
   146c0:	add	r8, r8, #3
   146c4:	mov	r0, #1
   146c8:	str	r0, [fp, #-56]	; 0xffffffc8
   146cc:	cmp	r8, sl
   146d0:	movcc	r0, #92	; 0x5c
   146d4:	strbcc	r0, [r5, r8]
   146d8:	add	r0, r8, #1
   146dc:	mov	r6, #0
   146e0:	mov	r9, #1
   146e4:	mov	r4, #48	; 0x30
   146e8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   146ec:	cmp	r1, #2
   146f0:	beq	14ab4 <__assert_fail@plt+0x39f8>
   146f4:	add	r1, r7, #1
   146f8:	cmp	r1, lr
   146fc:	bcs	14ab4 <__assert_fail@plt+0x39f8>
   14700:	ldrb	r1, [ip, r1]
   14704:	sub	r1, r1, #48	; 0x30
   14708:	uxtb	r1, r1
   1470c:	cmp	r1, #9
   14710:	bhi	14ab4 <__assert_fail@plt+0x39f8>
   14714:	cmp	r0, sl
   14718:	movcc	r1, #48	; 0x30
   1471c:	strbcc	r1, [r5, r0]
   14720:	add	r0, r8, #2
   14724:	cmp	r0, sl
   14728:	movcc	r1, #48	; 0x30
   1472c:	strbcc	r1, [r5, r0]
   14730:	add	r8, r8, #3
   14734:	b	144e8 <__assert_fail@plt+0x342c>
   14738:	mov	r9, #0
   1473c:	mov	r4, #63	; 0x3f
   14740:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14744:	cmp	r0, #5
   14748:	beq	14abc <__assert_fail@plt+0x3a00>
   1474c:	cmp	r0, #2
   14750:	bne	14b64 <__assert_fail@plt+0x3aa8>
   14754:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14758:	tst	r0, #1
   1475c:	mov	r6, #0
   14760:	beq	144e8 <__assert_fail@plt+0x342c>
   14764:	b	14e2c <__assert_fail@plt+0x3d70>
   14768:	mov	r0, #118	; 0x76
   1476c:	b	148d4 <__assert_fail@plt+0x3818>
   14770:	mov	r4, #39	; 0x27
   14774:	mov	r0, #1
   14778:	str	r0, [sp, #64]	; 0x40
   1477c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14780:	cmp	r0, #2
   14784:	bne	1490c <__assert_fail@plt+0x3850>
   14788:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1478c:	tst	r0, #1
   14790:	bne	14e2c <__assert_fail@plt+0x3d70>
   14794:	ldr	r2, [sp, #84]	; 0x54
   14798:	cmp	r2, #0
   1479c:	mov	r0, r2
   147a0:	movwne	r0, #1
   147a4:	clz	r1, sl
   147a8:	lsr	r1, r1, #5
   147ac:	orrs	r0, r0, r1
   147b0:	moveq	r2, sl
   147b4:	str	r2, [sp, #84]	; 0x54
   147b8:	moveq	sl, r0
   147bc:	cmp	r8, sl
   147c0:	movcc	r0, #39	; 0x27
   147c4:	strbcc	r0, [r5, r8]
   147c8:	add	r0, r8, #1
   147cc:	cmp	r0, sl
   147d0:	movcc	r1, #92	; 0x5c
   147d4:	strbcc	r1, [r5, r0]
   147d8:	add	r0, r8, #2
   147dc:	cmp	r0, sl
   147e0:	movcc	r1, #39	; 0x27
   147e4:	strbcc	r1, [r5, r0]
   147e8:	add	r8, r8, #3
   147ec:	mov	r0, #0
   147f0:	str	r0, [fp, #-56]	; 0xffffffc8
   147f4:	mov	r9, #0
   147f8:	mov	r6, #1
   147fc:	b	144e8 <__assert_fail@plt+0x342c>
   14800:	ldr	r0, [sp, #44]	; 0x2c
   14804:	cmp	r0, #1
   14808:	bne	14914 <__assert_fail@plt+0x3858>
   1480c:	str	lr, [sp, #32]
   14810:	bl	10fa8 <__ctype_b_loc@plt>
   14814:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14818:	ldr	r0, [r0]
   1481c:	add	r0, r0, r4, lsl #1
   14820:	ldrb	r0, [r0, #1]
   14824:	ubfx	r6, r0, #6, #1
   14828:	mov	r2, #1
   1482c:	ldr	r0, [sp, #60]	; 0x3c
   14830:	orr	r1, r6, r0
   14834:	cmp	r2, #1
   14838:	bhi	14b6c <__assert_fail@plt+0x3ab0>
   1483c:	tst	r1, #1
   14840:	beq	14b6c <__assert_fail@plt+0x3ab0>
   14844:	ldr	lr, [sp, #32]
   14848:	b	144e8 <__assert_fail@plt+0x342c>
   1484c:	mov	r9, #0
   14850:	mov	r0, #92	; 0x5c
   14854:	ldr	r1, [sp, #56]	; 0x38
   14858:	cmp	r1, #0
   1485c:	beq	148d4 <__assert_fail@plt+0x3818>
   14860:	mov	r4, #92	; 0x5c
   14864:	mov	r6, #0
   14868:	cmp	r9, #0
   1486c:	bne	148a4 <__assert_fail@plt+0x37e8>
   14870:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14874:	tst	r0, #1
   14878:	beq	148a4 <__assert_fail@plt+0x37e8>
   1487c:	cmp	r8, sl
   14880:	movcc	r0, #39	; 0x27
   14884:	strbcc	r0, [r5, r8]
   14888:	add	r0, r8, #1
   1488c:	cmp	r0, sl
   14890:	movcc	r1, #39	; 0x27
   14894:	strbcc	r1, [r5, r0]
   14898:	add	r8, r8, #2
   1489c:	mov	r0, #0
   148a0:	str	r0, [fp, #-56]	; 0xffffffc8
   148a4:	mov	r1, r6
   148a8:	mov	r0, r4
   148ac:	cmp	r8, sl
   148b0:	strbcc	r0, [r5, r8]
   148b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   148b8:	and	r0, r0, r1
   148bc:	str	r0, [fp, #-48]	; 0xffffffd0
   148c0:	add	r8, r8, #1
   148c4:	add	r7, r7, #1
   148c8:	cmn	lr, #1
   148cc:	bne	14220 <__assert_fail@plt+0x3164>
   148d0:	b	1422c <__assert_fail@plt+0x3170>
   148d4:	mov	r9, #0
   148d8:	ldr	r1, [sp, #92]	; 0x5c
   148dc:	tst	r1, #1
   148e0:	mov	r6, #0
   148e4:	mov	r1, #0
   148e8:	beq	144e8 <__assert_fail@plt+0x342c>
   148ec:	b	14530 <__assert_fail@plt+0x3474>
   148f0:	mov	r4, #0
   148f4:	ldr	r0, [sp, #40]	; 0x28
   148f8:	cmp	r0, #0
   148fc:	mov	r9, #0
   14900:	mov	r6, #0
   14904:	beq	144e8 <__assert_fail@plt+0x342c>
   14908:	b	148c4 <__assert_fail@plt+0x3808>
   1490c:	mov	r6, #1
   14910:	b	144e8 <__assert_fail@plt+0x342c>
   14914:	mov	r0, #0
   14918:	str	r0, [fp, #-36]	; 0xffffffdc
   1491c:	str	r0, [fp, #-40]	; 0xffffffd8
   14920:	cmn	lr, #1
   14924:	bne	14938 <__assert_fail@plt+0x387c>
   14928:	mov	r0, ip
   1492c:	bl	10fcc <strlen@plt>
   14930:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14934:	mov	lr, r0
   14938:	ldr	r0, [sp, #76]	; 0x4c
   1493c:	add	r0, r0, r7
   14940:	str	r0, [sp, #24]
   14944:	mov	r6, #1
   14948:	mov	r2, #0
   1494c:	sub	r0, fp, #40	; 0x28
   14950:	mov	r3, r0
   14954:	str	r5, [sp, #28]
   14958:	str	lr, [sp, #32]
   1495c:	b	149a0 <__assert_fail@plt+0x38e4>
   14960:	ldr	r5, [sp, #52]	; 0x34
   14964:	add	r5, r0, r5
   14968:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1496c:	bl	10f0c <iswprint@plt>
   14970:	cmp	r0, #0
   14974:	movwne	r0, #1
   14978:	and	r6, r6, r0
   1497c:	sub	r0, fp, #40	; 0x28
   14980:	bl	10ec4 <mbsinit@plt>
   14984:	sub	r3, fp, #40	; 0x28
   14988:	mov	r2, r5
   1498c:	ldr	lr, [sp, #32]
   14990:	cmp	r0, #0
   14994:	ldr	r5, [sp, #28]
   14998:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1499c:	bne	1482c <__assert_fail@plt+0x3770>
   149a0:	str	r2, [sp, #52]	; 0x34
   149a4:	add	r0, r2, r7
   149a8:	add	r1, ip, r0
   149ac:	str	r0, [sp, #48]	; 0x30
   149b0:	sub	r2, lr, r0
   149b4:	sub	r0, fp, #44	; 0x2c
   149b8:	bl	16e1c <__assert_fail@plt+0x5d60>
   149bc:	cmp	r0, #0
   149c0:	beq	14d38 <__assert_fail@plt+0x3c7c>
   149c4:	cmn	r0, #1
   149c8:	beq	14cf4 <__assert_fail@plt+0x3c38>
   149cc:	cmn	r0, #2
   149d0:	ldr	lr, [sp, #32]
   149d4:	beq	14cfc <__assert_fail@plt+0x3c40>
   149d8:	cmp	r0, #2
   149dc:	mov	r1, #0
   149e0:	movwcc	r1, #1
   149e4:	ldr	r2, [sp, #68]	; 0x44
   149e8:	eor	r2, r2, #1
   149ec:	orrs	r1, r2, r1
   149f0:	bne	14960 <__assert_fail@plt+0x38a4>
   149f4:	ldr	r1, [sp, #52]	; 0x34
   149f8:	ldr	r2, [sp, #24]
   149fc:	add	r1, r2, r1
   14a00:	sub	r2, r0, #1
   14a04:	b	14a14 <__assert_fail@plt+0x3958>
   14a08:	add	r1, r1, #1
   14a0c:	subs	r2, r2, #1
   14a10:	beq	14960 <__assert_fail@plt+0x38a4>
   14a14:	ldrb	r3, [r1]
   14a18:	sub	r3, r3, #91	; 0x5b
   14a1c:	cmp	r3, #33	; 0x21
   14a20:	bhi	14a08 <__assert_fail@plt+0x394c>
   14a24:	add	r5, pc, #0
   14a28:	ldr	pc, [r5, r3, lsl #2]
   14a2c:	andeq	r4, r1, r4, lsr #28
   14a30:	andeq	r4, r1, r4, lsr #28
   14a34:	andeq	r4, r1, r8, lsl #20
   14a38:	andeq	r4, r1, r4, lsr #28
   14a3c:	andeq	r4, r1, r8, lsl #20
   14a40:	andeq	r4, r1, r4, lsr #28
   14a44:	andeq	r4, r1, r8, lsl #20
   14a48:	andeq	r4, r1, r8, lsl #20
   14a4c:	andeq	r4, r1, r8, lsl #20
   14a50:	andeq	r4, r1, r8, lsl #20
   14a54:	andeq	r4, r1, r8, lsl #20
   14a58:	andeq	r4, r1, r8, lsl #20
   14a5c:	andeq	r4, r1, r8, lsl #20
   14a60:	andeq	r4, r1, r8, lsl #20
   14a64:	andeq	r4, r1, r8, lsl #20
   14a68:	andeq	r4, r1, r8, lsl #20
   14a6c:	andeq	r4, r1, r8, lsl #20
   14a70:	andeq	r4, r1, r8, lsl #20
   14a74:	andeq	r4, r1, r8, lsl #20
   14a78:	andeq	r4, r1, r8, lsl #20
   14a7c:	andeq	r4, r1, r8, lsl #20
   14a80:	andeq	r4, r1, r8, lsl #20
   14a84:	andeq	r4, r1, r8, lsl #20
   14a88:	andeq	r4, r1, r8, lsl #20
   14a8c:	andeq	r4, r1, r8, lsl #20
   14a90:	andeq	r4, r1, r8, lsl #20
   14a94:	andeq	r4, r1, r8, lsl #20
   14a98:	andeq	r4, r1, r8, lsl #20
   14a9c:	andeq	r4, r1, r8, lsl #20
   14aa0:	andeq	r4, r1, r8, lsl #20
   14aa4:	andeq	r4, r1, r8, lsl #20
   14aa8:	andeq	r4, r1, r8, lsl #20
   14aac:	andeq	r4, r1, r8, lsl #20
   14ab0:	andeq	r4, r1, r4, lsr #28
   14ab4:	mov	r8, r0
   14ab8:	b	144e8 <__assert_fail@plt+0x342c>
   14abc:	ldr	r0, [sp, #36]	; 0x24
   14ac0:	cmp	r0, #0
   14ac4:	beq	14b64 <__assert_fail@plt+0x3aa8>
   14ac8:	add	r0, r7, #2
   14acc:	cmp	r0, lr
   14ad0:	bcs	14b64 <__assert_fail@plt+0x3aa8>
   14ad4:	add	r1, r7, ip
   14ad8:	ldrb	r1, [r1, #1]
   14adc:	cmp	r1, #63	; 0x3f
   14ae0:	bne	14b64 <__assert_fail@plt+0x3aa8>
   14ae4:	ldrb	r1, [ip, r0]
   14ae8:	sub	r2, r1, #33	; 0x21
   14aec:	cmp	r2, #29
   14af0:	bhi	14b64 <__assert_fail@plt+0x3aa8>
   14af4:	mov	r3, #1
   14af8:	movw	r6, #20929	; 0x51c1
   14afc:	movt	r6, #14336	; 0x3800
   14b00:	tst	r6, r3, lsl r2
   14b04:	beq	14b64 <__assert_fail@plt+0x3aa8>
   14b08:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14b0c:	tst	r2, #1
   14b10:	bne	14e2c <__assert_fail@plt+0x3d70>
   14b14:	cmp	r8, sl
   14b18:	movcc	r2, #63	; 0x3f
   14b1c:	strbcc	r2, [r5, r8]
   14b20:	add	r2, r8, #1
   14b24:	cmp	r2, sl
   14b28:	movcc	r3, #34	; 0x22
   14b2c:	strbcc	r3, [r5, r2]
   14b30:	add	r2, r8, #2
   14b34:	cmp	r2, sl
   14b38:	movcc	r3, #34	; 0x22
   14b3c:	strbcc	r3, [r5, r2]
   14b40:	add	r2, r8, #3
   14b44:	cmp	r2, sl
   14b48:	movcc	r3, #63	; 0x3f
   14b4c:	strbcc	r3, [r5, r2]
   14b50:	add	r8, r8, #4
   14b54:	mov	r7, r0
   14b58:	mov	r4, r1
   14b5c:	mov	r6, #0
   14b60:	b	144e8 <__assert_fail@plt+0x342c>
   14b64:	mov	r6, #0
   14b68:	b	144e8 <__assert_fail@plt+0x342c>
   14b6c:	add	r0, r2, r7
   14b70:	str	r0, [sp, #52]	; 0x34
   14b74:	mov	r2, #0
   14b78:	ldr	lr, [sp, #32]
   14b7c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14b80:	str	r1, [sp, #48]	; 0x30
   14b84:	tst	r1, #1
   14b88:	bne	14c64 <__assert_fail@plt+0x3ba8>
   14b8c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14b90:	tst	r1, #1
   14b94:	bne	14e2c <__assert_fail@plt+0x3d70>
   14b98:	mov	r3, r0
   14b9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14ba0:	subs	r1, r0, #2
   14ba4:	movwne	r1, #1
   14ba8:	orr	r1, r1, r3
   14bac:	tst	r1, #1
   14bb0:	bne	14be8 <__assert_fail@plt+0x3b2c>
   14bb4:	cmp	r8, sl
   14bb8:	movcc	r0, #39	; 0x27
   14bbc:	strbcc	r0, [r5, r8]
   14bc0:	add	r2, r8, #1
   14bc4:	cmp	r2, sl
   14bc8:	movcc	r0, #36	; 0x24
   14bcc:	strbcc	r0, [r5, r2]
   14bd0:	add	r2, r8, #2
   14bd4:	cmp	r2, sl
   14bd8:	movcc	r0, #39	; 0x27
   14bdc:	strbcc	r0, [r5, r2]
   14be0:	add	r8, r8, #3
   14be4:	mov	r3, #1
   14be8:	cmp	r8, sl
   14bec:	movcc	r1, #92	; 0x5c
   14bf0:	strbcc	r1, [r5, r8]
   14bf4:	add	r2, r8, #1
   14bf8:	cmp	r2, sl
   14bfc:	bcs	14c10 <__assert_fail@plt+0x3b54>
   14c00:	uxtb	r1, r4
   14c04:	mov	r0, #48	; 0x30
   14c08:	orr	r1, r0, r1, lsr #6
   14c0c:	strb	r1, [r5, r2]
   14c10:	add	r2, r8, #2
   14c14:	cmp	r2, sl
   14c18:	lsrcc	r1, r4, #3
   14c1c:	movcc	r0, #6
   14c20:	bficc	r1, r0, #3, #29
   14c24:	strbcc	r1, [r5, r2]
   14c28:	mov	r0, #6
   14c2c:	bfi	r4, r0, #3, #29
   14c30:	add	r8, r8, #3
   14c34:	mov	r2, #1
   14c38:	mov	r0, r3
   14c3c:	b	14c88 <__assert_fail@plt+0x3bcc>
   14c40:	cmp	r8, sl
   14c44:	strbcc	r4, [r5, r8]
   14c48:	ldr	r1, [sp, #76]	; 0x4c
   14c4c:	ldrb	r4, [r1, r7]
   14c50:	add	r8, r8, #1
   14c54:	mov	r7, r3
   14c58:	ldr	r1, [sp, #48]	; 0x30
   14c5c:	tst	r1, #1
   14c60:	beq	14b8c <__assert_fail@plt+0x3ad0>
   14c64:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14c68:	tst	r1, #1
   14c6c:	beq	14c80 <__assert_fail@plt+0x3bc4>
   14c70:	cmp	r8, sl
   14c74:	movcc	r1, #92	; 0x5c
   14c78:	strbcc	r1, [r5, r8]
   14c7c:	add	r8, r8, #1
   14c80:	mov	r1, #0
   14c84:	str	r1, [fp, #-52]	; 0xffffffcc
   14c88:	and	r9, r2, #1
   14c8c:	add	r3, r7, #1
   14c90:	ldr	r1, [sp, #52]	; 0x34
   14c94:	cmp	r1, r3
   14c98:	bls	14cdc <__assert_fail@plt+0x3c20>
   14c9c:	cmp	r9, #0
   14ca0:	movwne	r9, #1
   14ca4:	mvn	r1, r0
   14ca8:	orr	r1, r1, r9
   14cac:	tst	r1, #1
   14cb0:	bne	14c40 <__assert_fail@plt+0x3b84>
   14cb4:	cmp	r8, sl
   14cb8:	movcc	r1, #39	; 0x27
   14cbc:	strbcc	r1, [r5, r8]
   14cc0:	add	r1, r8, #1
   14cc4:	cmp	r1, sl
   14cc8:	movcc	r0, #39	; 0x27
   14ccc:	strbcc	r0, [r5, r1]
   14cd0:	add	r8, r8, #2
   14cd4:	mov	r0, #0
   14cd8:	b	14c40 <__assert_fail@plt+0x3b84>
   14cdc:	str	r0, [fp, #-56]	; 0xffffffc8
   14ce0:	cmp	r9, #0
   14ce4:	movwne	r9, #1
   14ce8:	cmp	r9, #0
   14cec:	beq	14870 <__assert_fail@plt+0x37b4>
   14cf0:	b	148a4 <__assert_fail@plt+0x37e8>
   14cf4:	mov	r6, #0
   14cf8:	b	14d38 <__assert_fail@plt+0x3c7c>
   14cfc:	mov	r6, #0
   14d00:	ldr	r0, [sp, #48]	; 0x30
   14d04:	cmp	r0, lr
   14d08:	bcs	14d38 <__assert_fail@plt+0x3c7c>
   14d0c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14d10:	add	r0, ip, r7
   14d14:	ldr	r2, [sp, #52]	; 0x34
   14d18:	ldrb	r1, [r0, r2]
   14d1c:	cmp	r1, #0
   14d20:	beq	1482c <__assert_fail@plt+0x3770>
   14d24:	add	r2, r2, #1
   14d28:	add	r1, r7, r2
   14d2c:	cmp	r1, lr
   14d30:	bcc	14d18 <__assert_fail@plt+0x3c5c>
   14d34:	b	1482c <__assert_fail@plt+0x3770>
   14d38:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14d3c:	ldr	r2, [sp, #52]	; 0x34
   14d40:	b	1482c <__assert_fail@plt+0x3770>
   14d44:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14d48:	eor	r0, r1, #2
   14d4c:	orr	r0, r0, r8
   14d50:	clz	r0, r0
   14d54:	lsr	r0, r0, #5
   14d58:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14d5c:	tst	r3, r0
   14d60:	bne	14e2c <__assert_fail@plt+0x3d70>
   14d64:	mov	r6, r5
   14d68:	subs	r0, r1, #2
   14d6c:	movwne	r0, #1
   14d70:	orr	r0, r3, r0
   14d74:	tst	r0, #1
   14d78:	ldr	r2, [sp, #92]	; 0x5c
   14d7c:	ldreq	r0, [sp, #64]	; 0x40
   14d80:	eoreq	r0, r0, #1
   14d84:	tsteq	r0, #1
   14d88:	bne	14dc8 <__assert_fail@plt+0x3d0c>
   14d8c:	mov	r9, lr
   14d90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14d94:	tst	r0, #1
   14d98:	bne	14e94 <__assert_fail@plt+0x3dd8>
   14d9c:	ldr	r0, [sp, #84]	; 0x54
   14da0:	cmp	r0, #0
   14da4:	beq	14dc8 <__assert_fail@plt+0x3d0c>
   14da8:	mov	r0, #0
   14dac:	str	r0, [fp, #-48]	; 0xffffffd0
   14db0:	mov	r1, #2
   14db4:	cmp	sl, #0
   14db8:	mov	r0, r2
   14dbc:	mov	r4, r3
   14dc0:	ldr	r7, [sp, #84]	; 0x54
   14dc4:	beq	13fa0 <__assert_fail@plt+0x2ee4>
   14dc8:	ldr	r1, [fp, #-84]	; 0xffffffac
   14dcc:	clz	r0, r1
   14dd0:	lsr	r0, r0, #5
   14dd4:	orr	r0, r0, r3
   14dd8:	tst	r0, #1
   14ddc:	bne	14e08 <__assert_fail@plt+0x3d4c>
   14de0:	ldrb	r0, [r1]
   14de4:	cmp	r0, #0
   14de8:	beq	14e08 <__assert_fail@plt+0x3d4c>
   14dec:	add	r1, r1, #1
   14df0:	cmp	r8, sl
   14df4:	strbcc	r0, [r6, r8]
   14df8:	add	r8, r8, #1
   14dfc:	ldrb	r0, [r1], #1
   14e00:	cmp	r0, #0
   14e04:	bne	14df0 <__assert_fail@plt+0x3d34>
   14e08:	cmp	r8, sl
   14e0c:	movcc	r0, #0
   14e10:	strbcc	r0, [r6, r8]
   14e14:	b	14e88 <__assert_fail@plt+0x3dcc>
   14e18:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14e1c:	mov	lr, r4
   14e20:	b	14e2c <__assert_fail@plt+0x3d70>
   14e24:	ldr	r5, [sp, #28]
   14e28:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14e2c:	mov	r0, #0
   14e30:	ldr	r1, [fp, #12]
   14e34:	bic	r1, r1, #2
   14e38:	mov	r2, #2
   14e3c:	ldr	r3, [sp, #92]	; 0x5c
   14e40:	tst	r3, #1
   14e44:	movwne	r2, #4
   14e48:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14e4c:	cmp	r3, #2
   14e50:	movne	r2, r3
   14e54:	str	r2, [sp]
   14e58:	str	r1, [sp, #4]
   14e5c:	str	r0, [sp, #8]
   14e60:	ldr	r0, [sp, #80]	; 0x50
   14e64:	str	r0, [sp, #12]
   14e68:	ldr	r0, [sp, #88]	; 0x58
   14e6c:	str	r0, [sp, #16]
   14e70:	mov	r0, r5
   14e74:	mov	r1, sl
   14e78:	mov	r2, ip
   14e7c:	mov	r3, lr
   14e80:	bl	13f14 <__assert_fail@plt+0x2e58>
   14e84:	mov	r8, r0
   14e88:	mov	r0, r8
   14e8c:	sub	sp, fp, #28
   14e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e94:	mov	r0, #5
   14e98:	str	r0, [sp]
   14e9c:	ldr	r0, [fp, #12]
   14ea0:	str	r0, [sp, #4]
   14ea4:	ldr	r0, [fp, #16]
   14ea8:	str	r0, [sp, #8]
   14eac:	ldr	r0, [sp, #80]	; 0x50
   14eb0:	str	r0, [sp, #12]
   14eb4:	ldr	r0, [sp, #88]	; 0x58
   14eb8:	str	r0, [sp, #16]
   14ebc:	mov	r0, r6
   14ec0:	ldr	r1, [sp, #84]	; 0x54
   14ec4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14ec8:	mov	r3, r9
   14ecc:	b	14e80 <__assert_fail@plt+0x3dc4>
   14ed0:	bl	110a4 <abort@plt>
   14ed4:	mov	r3, r2
   14ed8:	mov	r2, #0
   14edc:	b	14ee0 <__assert_fail@plt+0x3e24>
   14ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ee4:	add	fp, sp, #28
   14ee8:	sub	sp, sp, #36	; 0x24
   14eec:	mov	r4, r2
   14ef0:	str	r2, [sp, #24]
   14ef4:	mov	r5, r1
   14ef8:	mov	r6, r0
   14efc:	str	r0, [sp, #20]
   14f00:	movw	r8, #46192	; 0xb470
   14f04:	movt	r8, #2
   14f08:	cmp	r3, #0
   14f0c:	movne	r8, r3
   14f10:	bl	10fe4 <__errno_location@plt>
   14f14:	str	r0, [sp, #28]
   14f18:	ldm	r8, {r3, r9}
   14f1c:	ldr	r1, [r8, #40]	; 0x28
   14f20:	ldr	r2, [r8, #44]	; 0x2c
   14f24:	ldr	r7, [r0]
   14f28:	str	r7, [sp, #32]
   14f2c:	add	sl, r8, #8
   14f30:	cmp	r4, #0
   14f34:	orreq	r9, r9, #1
   14f38:	stm	sp, {r3, r9, sl}
   14f3c:	str	r1, [sp, #12]
   14f40:	str	r2, [sp, #16]
   14f44:	mov	r0, #0
   14f48:	mov	r1, #0
   14f4c:	mov	r2, r6
   14f50:	mov	r3, r5
   14f54:	mov	r7, r5
   14f58:	bl	13f14 <__assert_fail@plt+0x2e58>
   14f5c:	mov	r5, r0
   14f60:	add	r4, r0, #1
   14f64:	mov	r0, r4
   14f68:	bl	15e80 <__assert_fail@plt+0x4dc4>
   14f6c:	mov	r6, r0
   14f70:	ldr	r0, [r8]
   14f74:	ldr	r1, [r8, #40]	; 0x28
   14f78:	ldr	r2, [r8, #44]	; 0x2c
   14f7c:	stm	sp, {r0, r9, sl}
   14f80:	str	r1, [sp, #12]
   14f84:	str	r2, [sp, #16]
   14f88:	mov	r0, r6
   14f8c:	mov	r1, r4
   14f90:	ldr	r2, [sp, #20]
   14f94:	mov	r3, r7
   14f98:	bl	13f14 <__assert_fail@plt+0x2e58>
   14f9c:	ldr	r0, [sp, #24]
   14fa0:	ldr	r1, [sp, #32]
   14fa4:	ldr	r2, [sp, #28]
   14fa8:	str	r1, [r2]
   14fac:	cmp	r0, #0
   14fb0:	strne	r5, [r0]
   14fb4:	mov	r0, r6
   14fb8:	sub	sp, fp, #28
   14fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14fc4:	add	fp, sp, #24
   14fc8:	movw	r8, #37112	; 0x90f8
   14fcc:	movt	r8, #2
   14fd0:	ldr	r4, [r8]
   14fd4:	movw	r5, #37116	; 0x90fc
   14fd8:	movt	r5, #2
   14fdc:	ldr	r0, [r5]
   14fe0:	cmp	r0, #2
   14fe4:	blt	15010 <__assert_fail@plt+0x3f54>
   14fe8:	add	r7, r4, #12
   14fec:	mov	r6, #0
   14ff0:	ldr	r0, [r7, r6, lsl #3]
   14ff4:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   14ff8:	add	r0, r6, #1
   14ffc:	ldr	r1, [r5]
   15000:	add	r2, r6, #2
   15004:	cmp	r2, r1
   15008:	mov	r6, r0
   1500c:	blt	14ff0 <__assert_fail@plt+0x3f34>
   15010:	ldr	r0, [r4, #4]
   15014:	movw	r9, #46240	; 0xb4a0
   15018:	movt	r9, #2
   1501c:	cmp	r0, r9
   15020:	movw	r7, #37120	; 0x9100
   15024:	movt	r7, #2
   15028:	beq	15038 <__assert_fail@plt+0x3f7c>
   1502c:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   15030:	mov	r0, #256	; 0x100
   15034:	stm	r7, {r0, r9}
   15038:	cmp	r4, r7
   1503c:	beq	1504c <__assert_fail@plt+0x3f90>
   15040:	mov	r0, r4
   15044:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   15048:	str	r7, [r8]
   1504c:	mov	r0, #1
   15050:	str	r0, [r5]
   15054:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15058:	movw	r3, #46192	; 0xb470
   1505c:	movt	r3, #2
   15060:	mvn	r2, #0
   15064:	b	15068 <__assert_fail@plt+0x3fac>
   15068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1506c:	add	fp, sp, #28
   15070:	sub	sp, sp, #44	; 0x2c
   15074:	mov	r7, r3
   15078:	str	r2, [sp, #36]	; 0x24
   1507c:	str	r1, [sp, #32]
   15080:	mov	r5, r0
   15084:	bl	10fe4 <__errno_location@plt>
   15088:	cmp	r5, #0
   1508c:	bmi	151fc <__assert_fail@plt+0x4140>
   15090:	cmn	r5, #-2147483647	; 0x80000001
   15094:	beq	151fc <__assert_fail@plt+0x4140>
   15098:	movw	r4, #37112	; 0x90f8
   1509c:	movt	r4, #2
   150a0:	ldr	r6, [r4]
   150a4:	str	r0, [sp, #28]
   150a8:	ldr	r0, [r0]
   150ac:	str	r0, [sp, #24]
   150b0:	movw	r8, #37116	; 0x90fc
   150b4:	movt	r8, #2
   150b8:	ldr	r1, [r8]
   150bc:	cmp	r1, r5
   150c0:	ble	150cc <__assert_fail@plt+0x4010>
   150c4:	mov	sl, r6
   150c8:	b	15138 <__assert_fail@plt+0x407c>
   150cc:	str	r1, [fp, #-32]	; 0xffffffe0
   150d0:	mov	r0, #8
   150d4:	str	r0, [sp]
   150d8:	movw	r9, #37120	; 0x9100
   150dc:	movt	r9, #2
   150e0:	subs	r0, r6, r9
   150e4:	movne	r0, r6
   150e8:	sub	r1, r5, r1
   150ec:	add	r2, r1, #1
   150f0:	sub	r1, fp, #32
   150f4:	mvn	r3, #-2147483648	; 0x80000000
   150f8:	bl	15f5c <__assert_fail@plt+0x4ea0>
   150fc:	mov	sl, r0
   15100:	str	r0, [r4]
   15104:	cmp	r6, r9
   15108:	bne	15114 <__assert_fail@plt+0x4058>
   1510c:	ldrd	r0, [r9]
   15110:	stm	sl, {r0, r1}
   15114:	ldr	r1, [r8]
   15118:	add	r0, sl, r1, lsl #3
   1511c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15120:	sub	r1, r2, r1
   15124:	lsl	r2, r1, #3
   15128:	mov	r1, #0
   1512c:	bl	11008 <memset@plt>
   15130:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15134:	str	r0, [r8]
   15138:	mov	r9, sl
   1513c:	ldr	r6, [r9, r5, lsl #3]!
   15140:	ldr	r4, [r9, #4]!
   15144:	ldm	r7, {r0, r1}
   15148:	ldr	r2, [r7, #40]	; 0x28
   1514c:	ldr	r3, [r7, #44]	; 0x2c
   15150:	orr	r8, r1, #1
   15154:	add	r1, r7, #8
   15158:	stm	sp, {r0, r8}
   1515c:	str	r1, [sp, #20]
   15160:	add	r0, sp, #8
   15164:	stm	r0, {r1, r2, r3}
   15168:	mov	r0, r4
   1516c:	mov	r1, r6
   15170:	ldr	r2, [sp, #32]
   15174:	ldr	r3, [sp, #36]	; 0x24
   15178:	bl	13f14 <__assert_fail@plt+0x2e58>
   1517c:	cmp	r6, r0
   15180:	bhi	151e4 <__assert_fail@plt+0x4128>
   15184:	add	r6, r0, #1
   15188:	str	r6, [sl, r5, lsl #3]
   1518c:	movw	r0, #46240	; 0xb4a0
   15190:	movt	r0, #2
   15194:	cmp	r4, r0
   15198:	beq	151a4 <__assert_fail@plt+0x40e8>
   1519c:	mov	r0, r4
   151a0:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   151a4:	mov	r0, r6
   151a8:	bl	15e80 <__assert_fail@plt+0x4dc4>
   151ac:	mov	r4, r0
   151b0:	str	r0, [r9]
   151b4:	ldr	r0, [r7]
   151b8:	ldr	r1, [r7, #40]	; 0x28
   151bc:	ldr	r2, [r7, #44]	; 0x2c
   151c0:	stm	sp, {r0, r8}
   151c4:	ldr	r0, [sp, #20]
   151c8:	add	r3, sp, #8
   151cc:	stm	r3, {r0, r1, r2}
   151d0:	mov	r0, r4
   151d4:	mov	r1, r6
   151d8:	ldr	r2, [sp, #32]
   151dc:	ldr	r3, [sp, #36]	; 0x24
   151e0:	bl	13f14 <__assert_fail@plt+0x2e58>
   151e4:	ldr	r0, [sp, #28]
   151e8:	ldr	r1, [sp, #24]
   151ec:	str	r1, [r0]
   151f0:	mov	r0, r4
   151f4:	sub	sp, fp, #28
   151f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151fc:	bl	110a4 <abort@plt>
   15200:	movw	r3, #46192	; 0xb470
   15204:	movt	r3, #2
   15208:	b	15068 <__assert_fail@plt+0x3fac>
   1520c:	mov	r1, r0
   15210:	mov	r0, #0
   15214:	b	15058 <__assert_fail@plt+0x3f9c>
   15218:	mov	r2, r1
   1521c:	mov	r1, r0
   15220:	mov	r0, #0
   15224:	b	15200 <__assert_fail@plt+0x4144>
   15228:	push	{r4, r5, r6, sl, fp, lr}
   1522c:	add	fp, sp, #16
   15230:	sub	sp, sp, #48	; 0x30
   15234:	mov	r4, r2
   15238:	mov	r5, r0
   1523c:	mov	r6, sp
   15240:	mov	r0, r6
   15244:	bl	15264 <__assert_fail@plt+0x41a8>
   15248:	mov	r0, r5
   1524c:	mov	r1, r4
   15250:	mvn	r2, #0
   15254:	mov	r3, r6
   15258:	bl	15068 <__assert_fail@plt+0x3fac>
   1525c:	sub	sp, fp, #16
   15260:	pop	{r4, r5, r6, sl, fp, pc}
   15264:	push	{fp, lr}
   15268:	mov	fp, sp
   1526c:	vmov.i32	q8, #0	; 0x00000000
   15270:	mov	r2, #32
   15274:	mov	r3, r0
   15278:	vst1.32	{d16-d17}, [r3], r2
   1527c:	vst1.32	{d16-d17}, [r3]
   15280:	add	r2, r0, #16
   15284:	vst1.32	{d16-d17}, [r2]
   15288:	cmp	r1, #10
   1528c:	strne	r1, [r0]
   15290:	popne	{fp, pc}
   15294:	bl	110a4 <abort@plt>
   15298:	push	{r4, r5, r6, r7, fp, lr}
   1529c:	add	fp, sp, #16
   152a0:	sub	sp, sp, #48	; 0x30
   152a4:	mov	r4, r3
   152a8:	mov	r5, r2
   152ac:	mov	r6, r0
   152b0:	mov	r7, sp
   152b4:	mov	r0, r7
   152b8:	bl	15264 <__assert_fail@plt+0x41a8>
   152bc:	mov	r0, r6
   152c0:	mov	r1, r5
   152c4:	mov	r2, r4
   152c8:	mov	r3, r7
   152cc:	bl	15068 <__assert_fail@plt+0x3fac>
   152d0:	sub	sp, fp, #16
   152d4:	pop	{r4, r5, r6, r7, fp, pc}
   152d8:	mov	r2, r1
   152dc:	mov	r1, r0
   152e0:	mov	r0, #0
   152e4:	b	15228 <__assert_fail@plt+0x416c>
   152e8:	mov	r3, r2
   152ec:	mov	r2, r1
   152f0:	mov	r1, r0
   152f4:	mov	r0, #0
   152f8:	b	15298 <__assert_fail@plt+0x41dc>
   152fc:	push	{r4, r5, r6, sl, fp, lr}
   15300:	add	fp, sp, #16
   15304:	sub	sp, sp, #48	; 0x30
   15308:	mov	r4, r1
   1530c:	mov	r5, r0
   15310:	movw	r0, #46192	; 0xb470
   15314:	movt	r0, #2
   15318:	add	r1, r0, #16
   1531c:	mov	r3, #32
   15320:	vld1.64	{d16-d17}, [r0], r3
   15324:	vld1.64	{d18-d19}, [r1]
   15328:	mov	r6, sp
   1532c:	add	r1, r6, #16
   15330:	vld1.64	{d20-d21}, [r0]
   15334:	vst1.64	{d18-d19}, [r1]
   15338:	mov	r0, r6
   1533c:	vst1.64	{d16-d17}, [r0], r3
   15340:	vst1.64	{d20-d21}, [r0]
   15344:	mov	r0, r6
   15348:	mov	r1, r2
   1534c:	mov	r2, #1
   15350:	bl	13e08 <__assert_fail@plt+0x2d4c>
   15354:	mov	r0, #0
   15358:	mov	r1, r5
   1535c:	mov	r2, r4
   15360:	mov	r3, r6
   15364:	bl	15068 <__assert_fail@plt+0x3fac>
   15368:	sub	sp, fp, #16
   1536c:	pop	{r4, r5, r6, sl, fp, pc}
   15370:	mov	r2, r1
   15374:	mvn	r1, #0
   15378:	b	152fc <__assert_fail@plt+0x4240>
   1537c:	mov	r1, #58	; 0x3a
   15380:	b	15370 <__assert_fail@plt+0x42b4>
   15384:	mov	r2, #58	; 0x3a
   15388:	b	152fc <__assert_fail@plt+0x4240>
   1538c:	push	{r4, r5, r6, sl, fp, lr}
   15390:	add	fp, sp, #16
   15394:	sub	sp, sp, #48	; 0x30
   15398:	mov	r4, r2
   1539c:	mov	r5, r0
   153a0:	mov	r6, sp
   153a4:	mov	r0, r6
   153a8:	bl	15264 <__assert_fail@plt+0x41a8>
   153ac:	mov	r0, r6
   153b0:	mov	r1, #58	; 0x3a
   153b4:	mov	r2, #1
   153b8:	bl	13e08 <__assert_fail@plt+0x2d4c>
   153bc:	mov	r0, r5
   153c0:	mov	r1, r4
   153c4:	mvn	r2, #0
   153c8:	mov	r3, r6
   153cc:	bl	15068 <__assert_fail@plt+0x3fac>
   153d0:	sub	sp, fp, #16
   153d4:	pop	{r4, r5, r6, sl, fp, pc}
   153d8:	push	{fp, lr}
   153dc:	mov	fp, sp
   153e0:	sub	sp, sp, #8
   153e4:	mvn	ip, #0
   153e8:	str	ip, [sp]
   153ec:	bl	153f8 <__assert_fail@plt+0x433c>
   153f0:	mov	sp, fp
   153f4:	pop	{fp, pc}
   153f8:	push	{r4, r5, r6, r7, fp, lr}
   153fc:	add	fp, sp, #16
   15400:	sub	sp, sp, #48	; 0x30
   15404:	mov	r7, r3
   15408:	mov	r5, r0
   1540c:	movw	r0, #46192	; 0xb470
   15410:	movt	r0, #2
   15414:	add	r3, r0, #16
   15418:	mov	r4, #32
   1541c:	vld1.64	{d16-d17}, [r0], r4
   15420:	vld1.64	{d18-d19}, [r3]
   15424:	mov	r6, sp
   15428:	add	r3, r6, #16
   1542c:	vld1.64	{d20-d21}, [r0]
   15430:	vst1.64	{d18-d19}, [r3]
   15434:	mov	r0, r6
   15438:	vst1.64	{d16-d17}, [r0], r4
   1543c:	vst1.64	{d20-d21}, [r0]
   15440:	mov	r0, r6
   15444:	bl	13e60 <__assert_fail@plt+0x2da4>
   15448:	ldr	r2, [fp, #8]
   1544c:	mov	r0, r5
   15450:	mov	r1, r7
   15454:	mov	r3, r6
   15458:	bl	15068 <__assert_fail@plt+0x3fac>
   1545c:	sub	sp, fp, #16
   15460:	pop	{r4, r5, r6, r7, fp, pc}
   15464:	mov	r3, r2
   15468:	mov	r2, r1
   1546c:	mov	r1, r0
   15470:	mov	r0, #0
   15474:	b	153d8 <__assert_fail@plt+0x431c>
   15478:	push	{fp, lr}
   1547c:	mov	fp, sp
   15480:	sub	sp, sp, #8
   15484:	mov	ip, r2
   15488:	mov	r2, r1
   1548c:	mov	r1, r0
   15490:	str	r3, [sp]
   15494:	mov	r0, #0
   15498:	mov	r3, ip
   1549c:	bl	153f8 <__assert_fail@plt+0x433c>
   154a0:	mov	sp, fp
   154a4:	pop	{fp, pc}
   154a8:	movw	r3, #37128	; 0x9108
   154ac:	movt	r3, #2
   154b0:	b	15068 <__assert_fail@plt+0x3fac>
   154b4:	mov	r2, r1
   154b8:	mov	r1, r0
   154bc:	mov	r0, #0
   154c0:	b	154a8 <__assert_fail@plt+0x43ec>
   154c4:	mvn	r2, #0
   154c8:	b	154a8 <__assert_fail@plt+0x43ec>
   154cc:	mov	r1, r0
   154d0:	mov	r0, #0
   154d4:	b	154c4 <__assert_fail@plt+0x4408>
   154d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154dc:	add	fp, sp, #24
   154e0:	sub	sp, sp, #16
   154e4:	mov	r4, r1
   154e8:	mov	r5, r0
   154ec:	mov	r7, #0
   154f0:	mov	r0, #0
   154f4:	mov	r1, r5
   154f8:	mov	r2, #5
   154fc:	bl	10ee8 <dcgettext@plt>
   15500:	cmp	r0, r5
   15504:	beq	15510 <__assert_fail@plt+0x4454>
   15508:	sub	sp, fp, #24
   1550c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15510:	bl	16de4 <__assert_fail@plt+0x5d28>
   15514:	mov	r6, r0
   15518:	mov	r8, #56	; 0x38
   1551c:	mov	r0, #45	; 0x2d
   15520:	stm	sp, {r0, r8}
   15524:	str	r7, [sp, #8]
   15528:	str	r7, [sp, #12]
   1552c:	mov	r0, r6
   15530:	mov	r1, #85	; 0x55
   15534:	mov	r2, #84	; 0x54
   15538:	mov	r3, #70	; 0x46
   1553c:	bl	155d4 <__assert_fail@plt+0x4518>
   15540:	cmp	r0, #0
   15544:	beq	15560 <__assert_fail@plt+0x44a4>
   15548:	ldrb	r1, [r5]
   1554c:	movw	r2, #34754	; 0x87c2
   15550:	movt	r2, #1
   15554:	movw	r0, #34758	; 0x87c6
   15558:	movt	r0, #1
   1555c:	b	155a4 <__assert_fail@plt+0x44e8>
   15560:	mov	r0, #48	; 0x30
   15564:	mov	r1, #51	; 0x33
   15568:	str	r8, [sp]
   1556c:	stmib	sp, {r0, r1}
   15570:	str	r0, [sp, #12]
   15574:	mov	r0, r6
   15578:	mov	r1, #71	; 0x47
   1557c:	mov	r2, #66	; 0x42
   15580:	mov	r3, #49	; 0x31
   15584:	bl	155d4 <__assert_fail@plt+0x4518>
   15588:	cmp	r0, #0
   1558c:	beq	155b4 <__assert_fail@plt+0x44f8>
   15590:	ldrb	r1, [r5]
   15594:	movw	r2, #34762	; 0x87ca
   15598:	movt	r2, #1
   1559c:	movw	r0, #34766	; 0x87ce
   155a0:	movt	r0, #1
   155a4:	cmp	r1, #96	; 0x60
   155a8:	moveq	r0, r2
   155ac:	sub	sp, fp, #24
   155b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155b4:	movw	r1, #34750	; 0x87be
   155b8:	movt	r1, #1
   155bc:	movw	r0, #32468	; 0x7ed4
   155c0:	movt	r0, #1
   155c4:	cmp	r4, #9
   155c8:	moveq	r0, r1
   155cc:	sub	sp, fp, #24
   155d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155d4:	push	{r4, r5, r6, r7, fp, lr}
   155d8:	add	fp, sp, #16
   155dc:	sub	sp, sp, #16
   155e0:	mov	r4, r3
   155e4:	mov	r5, r2
   155e8:	mov	r7, r1
   155ec:	mov	r6, r0
   155f0:	mov	r0, r1
   155f4:	bl	16af0 <__assert_fail@plt+0x5a34>
   155f8:	ldrb	r1, [r6]
   155fc:	cmp	r0, #0
   15600:	andne	r1, r1, #223	; 0xdf
   15604:	mov	r0, #0
   15608:	cmp	r1, r7
   1560c:	bne	15644 <__assert_fail@plt+0x4588>
   15610:	cmp	r7, #0
   15614:	beq	1564c <__assert_fail@plt+0x4590>
   15618:	ldr	r0, [fp, #20]
   1561c:	ldr	r1, [fp, #16]
   15620:	ldr	r2, [fp, #12]
   15624:	ldr	r3, [fp, #8]
   15628:	str	r2, [sp]
   1562c:	str	r1, [sp, #4]
   15630:	str	r0, [sp, #8]
   15634:	mov	r0, r6
   15638:	mov	r1, r5
   1563c:	mov	r2, r4
   15640:	bl	15658 <__assert_fail@plt+0x459c>
   15644:	sub	sp, fp, #16
   15648:	pop	{r4, r5, r6, r7, fp, pc}
   1564c:	mov	r0, #1
   15650:	sub	sp, fp, #16
   15654:	pop	{r4, r5, r6, r7, fp, pc}
   15658:	push	{r4, r5, r6, r7, fp, lr}
   1565c:	add	fp, sp, #16
   15660:	sub	sp, sp, #8
   15664:	mov	r4, r3
   15668:	mov	r5, r2
   1566c:	mov	r7, r1
   15670:	mov	r6, r0
   15674:	mov	r0, r1
   15678:	bl	16af0 <__assert_fail@plt+0x5a34>
   1567c:	ldrb	r1, [r6, #1]
   15680:	cmp	r0, #0
   15684:	andne	r1, r1, #223	; 0xdf
   15688:	mov	r0, #0
   1568c:	cmp	r1, r7
   15690:	bne	156c0 <__assert_fail@plt+0x4604>
   15694:	cmp	r7, #0
   15698:	beq	156c8 <__assert_fail@plt+0x460c>
   1569c:	ldr	r0, [fp, #16]
   156a0:	ldr	r1, [fp, #12]
   156a4:	ldr	r3, [fp, #8]
   156a8:	str	r1, [sp]
   156ac:	str	r0, [sp, #4]
   156b0:	mov	r0, r6
   156b4:	mov	r1, r5
   156b8:	mov	r2, r4
   156bc:	bl	156d4 <__assert_fail@plt+0x4618>
   156c0:	sub	sp, fp, #16
   156c4:	pop	{r4, r5, r6, r7, fp, pc}
   156c8:	mov	r0, #1
   156cc:	sub	sp, fp, #16
   156d0:	pop	{r4, r5, r6, r7, fp, pc}
   156d4:	push	{r4, r5, r6, r7, fp, lr}
   156d8:	add	fp, sp, #16
   156dc:	sub	sp, sp, #8
   156e0:	mov	r4, r3
   156e4:	mov	r5, r2
   156e8:	mov	r7, r1
   156ec:	mov	r6, r0
   156f0:	mov	r0, r1
   156f4:	bl	16af0 <__assert_fail@plt+0x5a34>
   156f8:	ldrb	r1, [r6, #2]
   156fc:	cmp	r0, #0
   15700:	andne	r1, r1, #223	; 0xdf
   15704:	mov	r0, #0
   15708:	cmp	r1, r7
   1570c:	bne	15734 <__assert_fail@plt+0x4678>
   15710:	cmp	r7, #0
   15714:	beq	1573c <__assert_fail@plt+0x4680>
   15718:	ldr	r0, [fp, #12]
   1571c:	ldr	r3, [fp, #8]
   15720:	str	r0, [sp]
   15724:	mov	r0, r6
   15728:	mov	r1, r5
   1572c:	mov	r2, r4
   15730:	bl	15748 <__assert_fail@plt+0x468c>
   15734:	sub	sp, fp, #16
   15738:	pop	{r4, r5, r6, r7, fp, pc}
   1573c:	mov	r0, #1
   15740:	sub	sp, fp, #16
   15744:	pop	{r4, r5, r6, r7, fp, pc}
   15748:	push	{r4, r5, r6, r7, fp, lr}
   1574c:	add	fp, sp, #16
   15750:	mov	r4, r3
   15754:	mov	r5, r2
   15758:	mov	r7, r1
   1575c:	mov	r6, r0
   15760:	mov	r0, r1
   15764:	bl	16af0 <__assert_fail@plt+0x5a34>
   15768:	ldrb	r1, [r6, #3]
   1576c:	ldr	r3, [fp, #8]
   15770:	cmp	r0, #0
   15774:	andne	r1, r1, #223	; 0xdf
   15778:	mov	r0, #0
   1577c:	cmp	r1, r7
   15780:	bne	157a4 <__assert_fail@plt+0x46e8>
   15784:	cmp	r7, #0
   15788:	beq	157a0 <__assert_fail@plt+0x46e4>
   1578c:	mov	r0, r6
   15790:	mov	r1, r5
   15794:	mov	r2, r4
   15798:	pop	{r4, r5, r6, r7, fp, lr}
   1579c:	b	157a8 <__assert_fail@plt+0x46ec>
   157a0:	mov	r0, #1
   157a4:	pop	{r4, r5, r6, r7, fp, pc}
   157a8:	push	{r4, r5, r6, r7, fp, lr}
   157ac:	add	fp, sp, #16
   157b0:	mov	r4, r3
   157b4:	mov	r5, r2
   157b8:	mov	r7, r1
   157bc:	mov	r6, r0
   157c0:	mov	r0, r1
   157c4:	bl	16af0 <__assert_fail@plt+0x5a34>
   157c8:	ldrb	r1, [r6, #4]
   157cc:	cmp	r0, #0
   157d0:	andne	r1, r1, #223	; 0xdf
   157d4:	mov	r0, #0
   157d8:	cmp	r1, r7
   157dc:	bne	15800 <__assert_fail@plt+0x4744>
   157e0:	cmp	r7, #0
   157e4:	beq	157fc <__assert_fail@plt+0x4740>
   157e8:	mov	r0, r6
   157ec:	mov	r1, r5
   157f0:	mov	r2, r4
   157f4:	pop	{r4, r5, r6, r7, fp, lr}
   157f8:	b	15804 <__assert_fail@plt+0x4748>
   157fc:	mov	r0, #1
   15800:	pop	{r4, r5, r6, r7, fp, pc}
   15804:	push	{r4, r5, r6, sl, fp, lr}
   15808:	add	fp, sp, #16
   1580c:	mov	r4, r2
   15810:	mov	r6, r1
   15814:	mov	r5, r0
   15818:	mov	r0, r1
   1581c:	bl	16af0 <__assert_fail@plt+0x5a34>
   15820:	ldrb	r1, [r5, #5]
   15824:	cmp	r0, #0
   15828:	andne	r1, r1, #223	; 0xdf
   1582c:	mov	r0, #0
   15830:	cmp	r1, r6
   15834:	bne	15854 <__assert_fail@plt+0x4798>
   15838:	cmp	r6, #0
   1583c:	beq	15850 <__assert_fail@plt+0x4794>
   15840:	mov	r0, r5
   15844:	mov	r1, r4
   15848:	pop	{r4, r5, r6, sl, fp, lr}
   1584c:	b	15858 <__assert_fail@plt+0x479c>
   15850:	mov	r0, #1
   15854:	pop	{r4, r5, r6, sl, fp, pc}
   15858:	push	{r4, r5, fp, lr}
   1585c:	add	fp, sp, #8
   15860:	mov	r5, r1
   15864:	mov	r4, r0
   15868:	mov	r0, r1
   1586c:	bl	16af0 <__assert_fail@plt+0x5a34>
   15870:	ldrb	r1, [r4, #6]
   15874:	cmp	r0, #0
   15878:	andne	r1, r1, #223	; 0xdf
   1587c:	mov	r0, #0
   15880:	cmp	r1, r5
   15884:	popne	{r4, r5, fp, pc}
   15888:	cmp	r5, #0
   1588c:	beq	1589c <__assert_fail@plt+0x47e0>
   15890:	mov	r0, r4
   15894:	pop	{r4, r5, fp, lr}
   15898:	b	158a4 <__assert_fail@plt+0x47e8>
   1589c:	mov	r0, #1
   158a0:	pop	{r4, r5, fp, pc}
   158a4:	push	{r4, sl, fp, lr}
   158a8:	add	fp, sp, #8
   158ac:	mov	r4, r0
   158b0:	mov	r0, #0
   158b4:	bl	16af0 <__assert_fail@plt+0x5a34>
   158b8:	ldrb	r1, [r4, #7]
   158bc:	cmp	r0, #0
   158c0:	beq	158d4 <__assert_fail@plt+0x4818>
   158c4:	tst	r1, #223	; 0xdf
   158c8:	bne	158dc <__assert_fail@plt+0x4820>
   158cc:	mov	r0, #1
   158d0:	pop	{r4, sl, fp, pc}
   158d4:	cmp	r1, #0
   158d8:	beq	158cc <__assert_fail@plt+0x4810>
   158dc:	mov	r0, #0
   158e0:	pop	{r4, sl, fp, pc}
   158e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   158e8:	add	fp, sp, #24
   158ec:	mov	r7, r2
   158f0:	mov	r5, r1
   158f4:	mov	r6, r0
   158f8:	movw	r9, #0
   158fc:	movt	r9, #32752	; 0x7ff0
   15900:	mov	r0, r6
   15904:	mov	r1, r5
   15908:	mov	r2, r7
   1590c:	bl	10e7c <read@plt>
   15910:	mov	r4, r0
   15914:	cmn	r0, #1
   15918:	bgt	15974 <__assert_fail@plt+0x48b8>
   1591c:	bl	10fe4 <__errno_location@plt>
   15920:	ldr	r0, [r0]
   15924:	cmp	r0, #4
   15928:	beq	15900 <__assert_fail@plt+0x4844>
   1592c:	cmp	r7, r9
   15930:	mov	r1, #0
   15934:	movwhi	r1, #1
   15938:	sub	r2, r0, #22
   1593c:	clz	r2, r2
   15940:	lsr	r2, r2, #5
   15944:	ands	r1, r1, r2
   15948:	moveq	r8, r4
   1594c:	mov	r1, r7
   15950:	movwne	r1, #0
   15954:	movtne	r1, #32752	; 0x7ff0
   15958:	cmp	r7, r9
   1595c:	bls	1596c <__assert_fail@plt+0x48b0>
   15960:	cmp	r0, #22
   15964:	mov	r7, r1
   15968:	beq	15900 <__assert_fail@plt+0x4844>
   1596c:	mov	r0, r8
   15970:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15974:	mov	r0, r4
   15978:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1597c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15980:	add	fp, sp, #24
   15984:	sub	sp, sp, #32
   15988:	mov	r4, r2
   1598c:	mov	r8, r0
   15990:	ldr	r6, [fp, #12]
   15994:	ldr	r7, [fp, #8]
   15998:	cmp	r1, #0
   1599c:	beq	159c4 <__assert_fail@plt+0x4908>
   159a0:	mov	r5, r1
   159a4:	str	r4, [sp]
   159a8:	str	r3, [sp, #4]
   159ac:	movw	r2, #34856	; 0x8828
   159b0:	movt	r2, #1
   159b4:	mov	r0, r8
   159b8:	mov	r1, #1
   159bc:	mov	r3, r5
   159c0:	b	159dc <__assert_fail@plt+0x4920>
   159c4:	str	r3, [sp]
   159c8:	movw	r2, #34868	; 0x8834
   159cc:	movt	r2, #1
   159d0:	mov	r0, r8
   159d4:	mov	r1, #1
   159d8:	mov	r3, r4
   159dc:	bl	11038 <__fprintf_chk@plt>
   159e0:	movw	r1, #34875	; 0x883b
   159e4:	movt	r1, #1
   159e8:	mov	r0, #0
   159ec:	mov	r2, #5
   159f0:	bl	10ee8 <dcgettext@plt>
   159f4:	mov	r3, r0
   159f8:	movw	r0, #2022	; 0x7e6
   159fc:	str	r0, [sp]
   15a00:	movw	r2, #35593	; 0x8b09
   15a04:	movt	r2, #1
   15a08:	mov	r0, r8
   15a0c:	mov	r1, #1
   15a10:	bl	11038 <__fprintf_chk@plt>
   15a14:	movw	r4, #32206	; 0x7dce
   15a18:	movt	r4, #1
   15a1c:	mov	r0, r4
   15a20:	mov	r1, r8
   15a24:	bl	10e4c <fputs_unlocked@plt>
   15a28:	movw	r1, #34879	; 0x883f
   15a2c:	movt	r1, #1
   15a30:	mov	r0, #0
   15a34:	mov	r2, #5
   15a38:	bl	10ee8 <dcgettext@plt>
   15a3c:	mov	r2, r0
   15a40:	movw	r3, #35050	; 0x88ea
   15a44:	movt	r3, #1
   15a48:	mov	r0, r8
   15a4c:	mov	r1, #1
   15a50:	bl	11038 <__fprintf_chk@plt>
   15a54:	mov	r0, r4
   15a58:	mov	r1, r8
   15a5c:	bl	10e4c <fputs_unlocked@plt>
   15a60:	cmp	r6, #9
   15a64:	bhi	15aa0 <__assert_fail@plt+0x49e4>
   15a68:	add	r0, pc, #0
   15a6c:	ldr	pc, [r0, r6, lsl #2]
   15a70:	muleq	r1, r8, sl
   15a74:	andeq	r5, r1, ip, lsr #21
   15a78:	ldrdeq	r5, [r1], -ip
   15a7c:	andeq	r5, r1, r4, lsl #22
   15a80:	andeq	r5, r1, ip, lsr #22
   15a84:	andeq	r5, r1, r4, asr fp
   15a88:	andeq	r5, r1, ip, ror fp
   15a8c:			; <UNDEFINED> instruction: 0x00015bb4
   15a90:	andeq	r5, r1, r4, asr ip
   15a94:	strdeq	r5, [r1], -ip
   15a98:	sub	sp, fp, #24
   15a9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15aa0:	movw	r1, #35403	; 0x8a4b
   15aa4:	movt	r1, #1
   15aa8:	b	15c04 <__assert_fail@plt+0x4b48>
   15aac:	movw	r1, #35084	; 0x890c
   15ab0:	movt	r1, #1
   15ab4:	mov	r0, #0
   15ab8:	mov	r2, #5
   15abc:	bl	10ee8 <dcgettext@plt>
   15ac0:	mov	r2, r0
   15ac4:	ldr	r3, [r7]
   15ac8:	mov	r0, r8
   15acc:	mov	r1, #1
   15ad0:	sub	sp, fp, #24
   15ad4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ad8:	b	11038 <__fprintf_chk@plt>
   15adc:	movw	r1, #35100	; 0x891c
   15ae0:	movt	r1, #1
   15ae4:	mov	r0, #0
   15ae8:	mov	r2, #5
   15aec:	bl	10ee8 <dcgettext@plt>
   15af0:	mov	r2, r0
   15af4:	ldr	r3, [r7]
   15af8:	ldr	r0, [r7, #4]
   15afc:	str	r0, [sp]
   15b00:	b	15bf0 <__assert_fail@plt+0x4b34>
   15b04:	movw	r1, #35123	; 0x8933
   15b08:	movt	r1, #1
   15b0c:	mov	r0, #0
   15b10:	mov	r2, #5
   15b14:	bl	10ee8 <dcgettext@plt>
   15b18:	mov	r2, r0
   15b1c:	ldr	r3, [r7]
   15b20:	ldmib	r7, {r0, r1}
   15b24:	stm	sp, {r0, r1}
   15b28:	b	15bf0 <__assert_fail@plt+0x4b34>
   15b2c:	movw	r1, #35151	; 0x894f
   15b30:	movt	r1, #1
   15b34:	mov	r0, #0
   15b38:	mov	r2, #5
   15b3c:	bl	10ee8 <dcgettext@plt>
   15b40:	mov	r2, r0
   15b44:	ldr	r3, [r7]
   15b48:	ldmib	r7, {r0, r1, r7}
   15b4c:	stm	sp, {r0, r1, r7}
   15b50:	b	15bf0 <__assert_fail@plt+0x4b34>
   15b54:	movw	r1, #35183	; 0x896f
   15b58:	movt	r1, #1
   15b5c:	mov	r0, #0
   15b60:	mov	r2, #5
   15b64:	bl	10ee8 <dcgettext@plt>
   15b68:	mov	r2, r0
   15b6c:	ldr	r3, [r7]
   15b70:	ldmib	r7, {r0, r1, r6, r7}
   15b74:	stm	sp, {r0, r1, r6, r7}
   15b78:	b	15bf0 <__assert_fail@plt+0x4b34>
   15b7c:	movw	r1, #35219	; 0x8993
   15b80:	movt	r1, #1
   15b84:	mov	r0, #0
   15b88:	mov	r2, #5
   15b8c:	bl	10ee8 <dcgettext@plt>
   15b90:	mov	r2, r0
   15b94:	ldr	r3, [r7]
   15b98:	ldmib	r7, {r0, r1, r6}
   15b9c:	ldr	r5, [r7, #16]
   15ba0:	ldr	r7, [r7, #20]
   15ba4:	stm	sp, {r0, r1, r6}
   15ba8:	str	r5, [sp, #12]
   15bac:	str	r7, [sp, #16]
   15bb0:	b	15bf0 <__assert_fail@plt+0x4b34>
   15bb4:	movw	r1, #35259	; 0x89bb
   15bb8:	movt	r1, #1
   15bbc:	mov	r0, #0
   15bc0:	mov	r2, #5
   15bc4:	bl	10ee8 <dcgettext@plt>
   15bc8:	mov	r2, r0
   15bcc:	ldr	r3, [r7]
   15bd0:	ldmib	r7, {r0, r1, r6}
   15bd4:	ldr	r5, [r7, #16]
   15bd8:	ldr	r4, [r7, #20]
   15bdc:	ldr	r7, [r7, #24]
   15be0:	stm	sp, {r0, r1, r6}
   15be4:	str	r5, [sp, #12]
   15be8:	str	r4, [sp, #16]
   15bec:	str	r7, [sp, #20]
   15bf0:	mov	r0, r8
   15bf4:	mov	r1, #1
   15bf8:	b	15ca4 <__assert_fail@plt+0x4be8>
   15bfc:	movw	r1, #35351	; 0x8a17
   15c00:	movt	r1, #1
   15c04:	mov	r0, #0
   15c08:	mov	r2, #5
   15c0c:	bl	10ee8 <dcgettext@plt>
   15c10:	mov	ip, r0
   15c14:	ldr	r3, [r7]
   15c18:	ldr	r0, [r7, #4]
   15c1c:	ldr	r1, [r7, #8]
   15c20:	ldr	r6, [r7, #12]
   15c24:	ldr	r5, [r7, #16]
   15c28:	ldr	r4, [r7, #20]
   15c2c:	ldr	r2, [r7, #24]
   15c30:	ldr	lr, [r7, #28]
   15c34:	ldr	r7, [r7, #32]
   15c38:	stm	sp, {r0, r1, r6}
   15c3c:	str	r5, [sp, #12]
   15c40:	str	r4, [sp, #16]
   15c44:	str	r2, [sp, #20]
   15c48:	str	lr, [sp, #24]
   15c4c:	str	r7, [sp, #28]
   15c50:	b	15c98 <__assert_fail@plt+0x4bdc>
   15c54:	movw	r1, #35303	; 0x89e7
   15c58:	movt	r1, #1
   15c5c:	mov	r0, #0
   15c60:	mov	r2, #5
   15c64:	bl	10ee8 <dcgettext@plt>
   15c68:	mov	ip, r0
   15c6c:	ldr	r3, [r7]
   15c70:	ldmib	r7, {r0, r1, r6}
   15c74:	ldr	r5, [r7, #16]
   15c78:	ldr	r4, [r7, #20]
   15c7c:	ldr	r2, [r7, #24]
   15c80:	ldr	r7, [r7, #28]
   15c84:	stm	sp, {r0, r1, r6}
   15c88:	str	r5, [sp, #12]
   15c8c:	str	r4, [sp, #16]
   15c90:	str	r2, [sp, #20]
   15c94:	str	r7, [sp, #24]
   15c98:	mov	r0, r8
   15c9c:	mov	r1, #1
   15ca0:	mov	r2, ip
   15ca4:	bl	11038 <__fprintf_chk@plt>
   15ca8:	sub	sp, fp, #24
   15cac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cb0:	push	{r4, sl, fp, lr}
   15cb4:	add	fp, sp, #8
   15cb8:	sub	sp, sp, #8
   15cbc:	mov	lr, #0
   15cc0:	ldr	ip, [fp, #8]
   15cc4:	ldr	r4, [ip, lr, lsl #2]
   15cc8:	add	lr, lr, #1
   15ccc:	cmp	r4, #0
   15cd0:	bne	15cc4 <__assert_fail@plt+0x4c08>
   15cd4:	sub	r4, lr, #1
   15cd8:	str	ip, [sp]
   15cdc:	str	r4, [sp, #4]
   15ce0:	bl	1597c <__assert_fail@plt+0x48c0>
   15ce4:	sub	sp, fp, #8
   15ce8:	pop	{r4, sl, fp, pc}
   15cec:	push	{r4, r5, fp, lr}
   15cf0:	add	fp, sp, #8
   15cf4:	sub	sp, sp, #48	; 0x30
   15cf8:	mov	ip, #0
   15cfc:	ldr	r4, [fp, #8]
   15d00:	add	lr, sp, #8
   15d04:	ldr	r5, [r4]
   15d08:	str	r5, [lr, ip, lsl #2]
   15d0c:	cmp	r5, #0
   15d10:	beq	15d28 <__assert_fail@plt+0x4c6c>
   15d14:	add	ip, ip, #1
   15d18:	add	r4, r4, #4
   15d1c:	cmp	ip, #10
   15d20:	bne	15d04 <__assert_fail@plt+0x4c48>
   15d24:	mov	ip, #10
   15d28:	str	lr, [sp]
   15d2c:	str	ip, [sp, #4]
   15d30:	bl	1597c <__assert_fail@plt+0x48c0>
   15d34:	sub	sp, fp, #8
   15d38:	pop	{r4, r5, fp, pc}
   15d3c:	push	{fp, lr}
   15d40:	mov	fp, sp
   15d44:	sub	sp, sp, #8
   15d48:	add	ip, fp, #8
   15d4c:	str	ip, [sp, #4]
   15d50:	str	ip, [sp]
   15d54:	bl	15cec <__assert_fail@plt+0x4c30>
   15d58:	mov	sp, fp
   15d5c:	pop	{fp, pc}
   15d60:	push	{fp, lr}
   15d64:	mov	fp, sp
   15d68:	movw	r0, #37204	; 0x9154
   15d6c:	movt	r0, #2
   15d70:	ldr	r1, [r0]
   15d74:	movw	r0, #32206	; 0x7dce
   15d78:	movt	r0, #1
   15d7c:	bl	10e4c <fputs_unlocked@plt>
   15d80:	movw	r1, #35463	; 0x8a87
   15d84:	movt	r1, #1
   15d88:	mov	r0, #0
   15d8c:	mov	r2, #5
   15d90:	bl	10ee8 <dcgettext@plt>
   15d94:	mov	r1, r0
   15d98:	movw	r2, #35483	; 0x8a9b
   15d9c:	movt	r2, #1
   15da0:	mov	r0, #1
   15da4:	bl	11014 <__printf_chk@plt>
   15da8:	movw	r1, #35505	; 0x8ab1
   15dac:	movt	r1, #1
   15db0:	mov	r0, #0
   15db4:	mov	r2, #5
   15db8:	bl	10ee8 <dcgettext@plt>
   15dbc:	mov	r1, r0
   15dc0:	movw	r2, #31519	; 0x7b1f
   15dc4:	movt	r2, #1
   15dc8:	movw	r3, #32015	; 0x7d0f
   15dcc:	movt	r3, #1
   15dd0:	mov	r0, #1
   15dd4:	bl	11014 <__printf_chk@plt>
   15dd8:	movw	r1, #35525	; 0x8ac5
   15ddc:	movt	r1, #1
   15de0:	mov	r0, #0
   15de4:	mov	r2, #5
   15de8:	bl	10ee8 <dcgettext@plt>
   15dec:	mov	r1, r0
   15df0:	movw	r2, #35564	; 0x8aec
   15df4:	movt	r2, #1
   15df8:	mov	r0, #1
   15dfc:	pop	{fp, lr}
   15e00:	b	11014 <__printf_chk@plt>
   15e04:	b	15e08 <__assert_fail@plt+0x4d4c>
   15e08:	push	{r4, r5, r6, sl, fp, lr}
   15e0c:	add	fp, sp, #16
   15e10:	mov	r4, r2
   15e14:	mov	r5, r1
   15e18:	mov	r6, r0
   15e1c:	bl	16e80 <__assert_fail@plt+0x5dc4>
   15e20:	cmp	r0, #0
   15e24:	popne	{r4, r5, r6, sl, fp, pc}
   15e28:	cmp	r6, #0
   15e2c:	beq	15e40 <__assert_fail@plt+0x4d84>
   15e30:	cmp	r5, #0
   15e34:	cmpne	r4, #0
   15e38:	bne	15e40 <__assert_fail@plt+0x4d84>
   15e3c:	pop	{r4, r5, r6, sl, fp, pc}
   15e40:	bl	161cc <__assert_fail@plt+0x5110>
   15e44:	push	{fp, lr}
   15e48:	mov	fp, sp
   15e4c:	bl	167a8 <__assert_fail@plt+0x56ec>
   15e50:	pop	{fp, lr}
   15e54:	b	15e58 <__assert_fail@plt+0x4d9c>
   15e58:	cmp	r0, #0
   15e5c:	bxne	lr
   15e60:	push	{fp, lr}
   15e64:	mov	fp, sp
   15e68:	bl	161cc <__assert_fail@plt+0x5110>
   15e6c:	push	{fp, lr}
   15e70:	mov	fp, sp
   15e74:	bl	16db0 <__assert_fail@plt+0x5cf4>
   15e78:	pop	{fp, lr}
   15e7c:	b	15e58 <__assert_fail@plt+0x4d9c>
   15e80:	b	15e44 <__assert_fail@plt+0x4d88>
   15e84:	push	{r4, r5, fp, lr}
   15e88:	add	fp, sp, #8
   15e8c:	mov	r4, r1
   15e90:	mov	r5, r0
   15e94:	bl	167d8 <__assert_fail@plt+0x571c>
   15e98:	cmp	r0, #0
   15e9c:	popne	{r4, r5, fp, pc}
   15ea0:	cmp	r5, #0
   15ea4:	beq	15eb4 <__assert_fail@plt+0x4df8>
   15ea8:	cmp	r4, #0
   15eac:	bne	15eb4 <__assert_fail@plt+0x4df8>
   15eb0:	pop	{r4, r5, fp, pc}
   15eb4:	bl	161cc <__assert_fail@plt+0x5110>
   15eb8:	push	{fp, lr}
   15ebc:	mov	fp, sp
   15ec0:	bl	16db4 <__assert_fail@plt+0x5cf8>
   15ec4:	pop	{fp, lr}
   15ec8:	b	15e58 <__assert_fail@plt+0x4d9c>
   15ecc:	push	{fp, lr}
   15ed0:	mov	fp, sp
   15ed4:	bl	16dc4 <__assert_fail@plt+0x5d08>
   15ed8:	pop	{fp, lr}
   15edc:	b	15e58 <__assert_fail@plt+0x4d9c>
   15ee0:	mov	r2, r1
   15ee4:	mov	r1, r0
   15ee8:	mov	r0, #0
   15eec:	b	15e08 <__assert_fail@plt+0x4d4c>
   15ef0:	mov	r2, r1
   15ef4:	mov	r1, r0
   15ef8:	mov	r0, #0
   15efc:	b	15ecc <__assert_fail@plt+0x4e10>
   15f00:	mov	r2, #1
   15f04:	b	15f08 <__assert_fail@plt+0x4e4c>
   15f08:	push	{r4, r5, fp, lr}
   15f0c:	add	fp, sp, #8
   15f10:	mov	r4, r1
   15f14:	ldr	r5, [r1]
   15f18:	cmp	r0, #0
   15f1c:	beq	15f34 <__assert_fail@plt+0x4e78>
   15f20:	mov	r1, #1
   15f24:	add	r1, r1, r5, lsr #1
   15f28:	adds	r5, r5, r1
   15f2c:	bcc	15f4c <__assert_fail@plt+0x4e90>
   15f30:	bl	161cc <__assert_fail@plt+0x5110>
   15f34:	cmp	r5, #0
   15f38:	bne	15f4c <__assert_fail@plt+0x4e90>
   15f3c:	mov	r1, #64	; 0x40
   15f40:	udiv	r5, r1, r2
   15f44:	cmp	r2, #64	; 0x40
   15f48:	addhi	r5, r5, #1
   15f4c:	mov	r1, r5
   15f50:	bl	15e08 <__assert_fail@plt+0x4d4c>
   15f54:	str	r5, [r4]
   15f58:	pop	{r4, r5, fp, pc}
   15f5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f60:	add	fp, sp, #24
   15f64:	mov	r8, r1
   15f68:	ldr	r6, [r1]
   15f6c:	add	r1, r6, r6, asr #1
   15f70:	cmp	r1, r6
   15f74:	mvnvs	r1, #-2147483648	; 0x80000000
   15f78:	cmp	r1, r3
   15f7c:	mov	r5, r1
   15f80:	movgt	r5, r3
   15f84:	cmn	r3, #1
   15f88:	movle	r5, r1
   15f8c:	ldr	r4, [fp, #8]
   15f90:	cmn	r4, #1
   15f94:	ble	15fbc <__assert_fail@plt+0x4f00>
   15f98:	cmp	r4, #0
   15f9c:	beq	16010 <__assert_fail@plt+0x4f54>
   15fa0:	cmn	r5, #1
   15fa4:	ble	15fe4 <__assert_fail@plt+0x4f28>
   15fa8:	mvn	r7, #-2147483648	; 0x80000000
   15fac:	udiv	r1, r7, r4
   15fb0:	cmp	r1, r5
   15fb4:	bge	16010 <__assert_fail@plt+0x4f54>
   15fb8:	b	16020 <__assert_fail@plt+0x4f64>
   15fbc:	cmn	r5, #1
   15fc0:	ble	16000 <__assert_fail@plt+0x4f44>
   15fc4:	cmn	r4, #1
   15fc8:	beq	16010 <__assert_fail@plt+0x4f54>
   15fcc:	mov	r1, #-2147483648	; 0x80000000
   15fd0:	sdiv	r1, r1, r4
   15fd4:	mvn	r7, #-2147483648	; 0x80000000
   15fd8:	cmp	r1, r5
   15fdc:	bge	16010 <__assert_fail@plt+0x4f54>
   15fe0:	b	16020 <__assert_fail@plt+0x4f64>
   15fe4:	beq	16010 <__assert_fail@plt+0x4f54>
   15fe8:	mov	r1, #-2147483648	; 0x80000000
   15fec:	sdiv	r1, r1, r5
   15ff0:	mvn	r7, #-2147483648	; 0x80000000
   15ff4:	cmp	r1, r4
   15ff8:	bge	16010 <__assert_fail@plt+0x4f54>
   15ffc:	b	16020 <__assert_fail@plt+0x4f64>
   16000:	mvn	r7, #-2147483648	; 0x80000000
   16004:	sdiv	r1, r7, r4
   16008:	cmp	r5, r1
   1600c:	blt	16020 <__assert_fail@plt+0x4f64>
   16010:	mul	r1, r5, r4
   16014:	mov	r7, #64	; 0x40
   16018:	cmp	r1, #63	; 0x3f
   1601c:	bgt	16028 <__assert_fail@plt+0x4f6c>
   16020:	sdiv	r5, r7, r4
   16024:	mul	r1, r5, r4
   16028:	cmp	r0, #0
   1602c:	moveq	r7, #0
   16030:	streq	r7, [r8]
   16034:	sub	r7, r5, r6
   16038:	cmp	r7, r2
   1603c:	bge	160e8 <__assert_fail@plt+0x502c>
   16040:	add	r5, r6, r2
   16044:	mov	r1, #0
   16048:	cmp	r5, r3
   1604c:	mov	r2, #0
   16050:	movwgt	r2, #1
   16054:	cmn	r3, #1
   16058:	movwgt	r1, #1
   1605c:	cmp	r5, r6
   16060:	bvs	160d0 <__assert_fail@plt+0x5014>
   16064:	ands	r1, r1, r2
   16068:	bne	160d0 <__assert_fail@plt+0x5014>
   1606c:	cmn	r4, #1
   16070:	ble	16098 <__assert_fail@plt+0x4fdc>
   16074:	cmp	r4, #0
   16078:	beq	160e4 <__assert_fail@plt+0x5028>
   1607c:	cmn	r5, #1
   16080:	ble	160bc <__assert_fail@plt+0x5000>
   16084:	mvn	r1, #-2147483648	; 0x80000000
   16088:	udiv	r1, r1, r4
   1608c:	cmp	r1, r5
   16090:	bge	160e4 <__assert_fail@plt+0x5028>
   16094:	b	160d0 <__assert_fail@plt+0x5014>
   16098:	cmn	r5, #1
   1609c:	ble	160d4 <__assert_fail@plt+0x5018>
   160a0:	cmn	r4, #1
   160a4:	beq	160e4 <__assert_fail@plt+0x5028>
   160a8:	mov	r1, #-2147483648	; 0x80000000
   160ac:	sdiv	r1, r1, r4
   160b0:	cmp	r1, r5
   160b4:	bge	160e4 <__assert_fail@plt+0x5028>
   160b8:	b	160d0 <__assert_fail@plt+0x5014>
   160bc:	beq	160e4 <__assert_fail@plt+0x5028>
   160c0:	mov	r1, #-2147483648	; 0x80000000
   160c4:	sdiv	r1, r1, r5
   160c8:	cmp	r1, r4
   160cc:	bge	160e4 <__assert_fail@plt+0x5028>
   160d0:	bl	161cc <__assert_fail@plt+0x5110>
   160d4:	mvn	r1, #-2147483648	; 0x80000000
   160d8:	sdiv	r1, r1, r4
   160dc:	cmp	r5, r1
   160e0:	blt	160d0 <__assert_fail@plt+0x5014>
   160e4:	mul	r1, r5, r4
   160e8:	bl	15e84 <__assert_fail@plt+0x4dc8>
   160ec:	str	r5, [r8]
   160f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160f4:	mov	r1, #1
   160f8:	b	160fc <__assert_fail@plt+0x5040>
   160fc:	push	{fp, lr}
   16100:	mov	fp, sp
   16104:	bl	16754 <__assert_fail@plt+0x5698>
   16108:	pop	{fp, lr}
   1610c:	b	15e58 <__assert_fail@plt+0x4d9c>
   16110:	mov	r1, #1
   16114:	b	16118 <__assert_fail@plt+0x505c>
   16118:	push	{fp, lr}
   1611c:	mov	fp, sp
   16120:	bl	16dc0 <__assert_fail@plt+0x5d04>
   16124:	pop	{fp, lr}
   16128:	b	15e58 <__assert_fail@plt+0x4d9c>
   1612c:	push	{r4, r5, fp, lr}
   16130:	add	fp, sp, #8
   16134:	mov	r4, r1
   16138:	mov	r5, r0
   1613c:	mov	r0, r1
   16140:	bl	15e44 <__assert_fail@plt+0x4d88>
   16144:	mov	r1, r5
   16148:	mov	r2, r4
   1614c:	pop	{r4, r5, fp, lr}
   16150:	b	10eac <memcpy@plt>
   16154:	push	{r4, r5, fp, lr}
   16158:	add	fp, sp, #8
   1615c:	mov	r4, r1
   16160:	mov	r5, r0
   16164:	mov	r0, r1
   16168:	bl	15e6c <__assert_fail@plt+0x4db0>
   1616c:	mov	r1, r5
   16170:	mov	r2, r4
   16174:	pop	{r4, r5, fp, lr}
   16178:	b	10eac <memcpy@plt>
   1617c:	push	{r4, r5, fp, lr}
   16180:	add	fp, sp, #8
   16184:	mov	r4, r1
   16188:	mov	r5, r0
   1618c:	add	r0, r1, #1
   16190:	bl	15e6c <__assert_fail@plt+0x4db0>
   16194:	mov	r1, #0
   16198:	strb	r1, [r0, r4]
   1619c:	mov	r1, r5
   161a0:	mov	r2, r4
   161a4:	pop	{r4, r5, fp, lr}
   161a8:	b	10eac <memcpy@plt>
   161ac:	push	{r4, sl, fp, lr}
   161b0:	add	fp, sp, #8
   161b4:	mov	r4, r0
   161b8:	bl	10fcc <strlen@plt>
   161bc:	add	r1, r0, #1
   161c0:	mov	r0, r4
   161c4:	pop	{r4, sl, fp, lr}
   161c8:	b	1612c <__assert_fail@plt+0x5070>
   161cc:	push	{fp, lr}
   161d0:	mov	fp, sp
   161d4:	movw	r0, #37108	; 0x90f4
   161d8:	movt	r0, #2
   161dc:	ldr	r4, [r0]
   161e0:	movw	r1, #35640	; 0x8b38
   161e4:	movt	r1, #1
   161e8:	mov	r0, #0
   161ec:	mov	r2, #5
   161f0:	bl	10ee8 <dcgettext@plt>
   161f4:	mov	r3, r0
   161f8:	movw	r2, #34603	; 0x872b
   161fc:	movt	r2, #1
   16200:	mov	r0, r4
   16204:	mov	r1, #0
   16208:	bl	10f60 <error@plt>
   1620c:	bl	110a4 <abort@plt>
   16210:	bx	lr
   16214:	b	16834 <__assert_fail@plt+0x5778>
   16218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1621c:	add	fp, sp, #28
   16220:	sub	sp, sp, #20
   16224:	cmp	r2, #37	; 0x25
   16228:	bcs	1665c <__assert_fail@plt+0x55a0>
   1622c:	mov	r5, r2
   16230:	mov	r6, r1
   16234:	mov	r4, r0
   16238:	str	r3, [sp, #4]
   1623c:	ldr	sl, [fp, #8]
   16240:	bl	10fe4 <__errno_location@plt>
   16244:	mov	r7, r0
   16248:	mov	r0, #0
   1624c:	str	r0, [r7]
   16250:	bl	10fa8 <__ctype_b_loc@plt>
   16254:	ldr	r1, [r0]
   16258:	mov	r2, r4
   1625c:	ldrb	r0, [r2], #1
   16260:	add	r3, r1, r0, lsl #1
   16264:	ldrb	r3, [r3, #1]
   16268:	tst	r3, #32
   1626c:	bne	1625c <__assert_fail@plt+0x51a0>
   16270:	add	r9, sp, #16
   16274:	cmp	r6, #0
   16278:	movne	r9, r6
   1627c:	mov	r8, #4
   16280:	cmp	r0, #45	; 0x2d
   16284:	beq	16650 <__assert_fail@plt+0x5594>
   16288:	mov	r0, r4
   1628c:	mov	r1, r9
   16290:	mov	r2, r5
   16294:	bl	1102c <strtoumax@plt>
   16298:	str	r1, [sp, #12]
   1629c:	str	r0, [sp, #8]
   162a0:	ldr	r6, [r9]
   162a4:	cmp	r6, r4
   162a8:	beq	162d0 <__assert_fail@plt+0x5214>
   162ac:	ldr	r0, [r7]
   162b0:	cmp	r0, #0
   162b4:	beq	16308 <__assert_fail@plt+0x524c>
   162b8:	cmp	r0, #34	; 0x22
   162bc:	bne	16650 <__assert_fail@plt+0x5594>
   162c0:	mov	r8, #1
   162c4:	cmp	sl, #0
   162c8:	bne	16314 <__assert_fail@plt+0x5258>
   162cc:	b	16640 <__assert_fail@plt+0x5584>
   162d0:	cmp	sl, #0
   162d4:	beq	16650 <__assert_fail@plt+0x5594>
   162d8:	ldrb	r1, [r6]
   162dc:	cmp	r1, #0
   162e0:	beq	16650 <__assert_fail@plt+0x5594>
   162e4:	mov	r0, sl
   162e8:	bl	10fd8 <strchr@plt>
   162ec:	cmp	r0, #0
   162f0:	beq	16650 <__assert_fail@plt+0x5594>
   162f4:	mov	r8, #0
   162f8:	str	r8, [sp, #12]
   162fc:	mov	r0, #1
   16300:	str	r0, [sp, #8]
   16304:	b	16314 <__assert_fail@plt+0x5258>
   16308:	mov	r8, r0
   1630c:	cmp	sl, #0
   16310:	beq	16640 <__assert_fail@plt+0x5584>
   16314:	ldrb	r4, [r6]
   16318:	cmp	r4, #0
   1631c:	beq	16640 <__assert_fail@plt+0x5584>
   16320:	mov	r0, sl
   16324:	mov	r1, r4
   16328:	bl	10fd8 <strchr@plt>
   1632c:	cmp	r0, #0
   16330:	beq	1655c <__assert_fail@plt+0x54a0>
   16334:	sub	r0, r4, #69	; 0x45
   16338:	mov	r7, #1
   1633c:	mov	r5, #1024	; 0x400
   16340:	cmp	r0, #47	; 0x2f
   16344:	bhi	16458 <__assert_fail@plt+0x539c>
   16348:	add	r1, pc, #0
   1634c:	ldr	pc, [r1, r0, lsl #2]
   16350:	andeq	r6, r1, r0, lsl r4
   16354:	andeq	r6, r1, r8, asr r4
   16358:	andeq	r6, r1, r0, lsl r4
   1635c:	andeq	r6, r1, r8, asr r4
   16360:	andeq	r6, r1, r8, asr r4
   16364:	andeq	r6, r1, r8, asr r4
   16368:	andeq	r6, r1, r0, lsl r4
   1636c:	andeq	r6, r1, r8, asr r4
   16370:	andeq	r6, r1, r0, lsl r4
   16374:	andeq	r6, r1, r8, asr r4
   16378:	andeq	r6, r1, r8, asr r4
   1637c:	andeq	r6, r1, r0, lsl r4
   16380:	andeq	r6, r1, r8, asr r4
   16384:	andeq	r6, r1, r8, asr r4
   16388:	andeq	r6, r1, r8, asr r4
   1638c:	andeq	r6, r1, r0, lsl r4
   16390:	andeq	r6, r1, r8, asr r4
   16394:	andeq	r6, r1, r8, asr r4
   16398:	andeq	r6, r1, r8, asr r4
   1639c:	andeq	r6, r1, r8, asr r4
   163a0:	andeq	r6, r1, r0, lsl r4
   163a4:	andeq	r6, r1, r0, lsl r4
   163a8:	andeq	r6, r1, r8, asr r4
   163ac:	andeq	r6, r1, r8, asr r4
   163b0:	andeq	r6, r1, r8, asr r4
   163b4:	andeq	r6, r1, r8, asr r4
   163b8:	andeq	r6, r1, r8, asr r4
   163bc:	andeq	r6, r1, r8, asr r4
   163c0:	andeq	r6, r1, r8, asr r4
   163c4:	andeq	r6, r1, r8, asr r4
   163c8:	andeq	r6, r1, r8, asr r4
   163cc:	andeq	r6, r1, r8, asr r4
   163d0:	andeq	r6, r1, r8, asr r4
   163d4:	andeq	r6, r1, r8, asr r4
   163d8:	andeq	r6, r1, r0, lsl r4
   163dc:	andeq	r6, r1, r8, asr r4
   163e0:	andeq	r6, r1, r8, asr r4
   163e4:	andeq	r6, r1, r8, asr r4
   163e8:	andeq	r6, r1, r0, lsl r4
   163ec:	andeq	r6, r1, r8, asr r4
   163f0:	andeq	r6, r1, r0, lsl r4
   163f4:	andeq	r6, r1, r8, asr r4
   163f8:	andeq	r6, r1, r8, asr r4
   163fc:	andeq	r6, r1, r8, asr r4
   16400:	andeq	r6, r1, r8, asr r4
   16404:	andeq	r6, r1, r8, asr r4
   16408:	andeq	r6, r1, r8, asr r4
   1640c:	andeq	r6, r1, r0, lsl r4
   16410:	mov	r0, sl
   16414:	mov	r1, #48	; 0x30
   16418:	bl	10fd8 <strchr@plt>
   1641c:	cmp	r0, #0
   16420:	beq	16458 <__assert_fail@plt+0x539c>
   16424:	ldrb	r0, [r6, #1]
   16428:	cmp	r0, #66	; 0x42
   1642c:	cmpne	r0, #68	; 0x44
   16430:	bne	16440 <__assert_fail@plt+0x5384>
   16434:	mov	r7, #2
   16438:	mov	r5, #1000	; 0x3e8
   1643c:	b	16458 <__assert_fail@plt+0x539c>
   16440:	cmp	r0, #105	; 0x69
   16444:	bne	16458 <__assert_fail@plt+0x539c>
   16448:	ldrb	r0, [r6, #2]
   1644c:	mov	r7, #1
   16450:	cmp	r0, #66	; 0x42
   16454:	movweq	r7, #3
   16458:	sub	r1, r4, #66	; 0x42
   1645c:	cmp	r1, #53	; 0x35
   16460:	bhi	1655c <__assert_fail@plt+0x54a0>
   16464:	mov	r0, #0
   16468:	add	r2, pc, #0
   1646c:	ldr	pc, [r2, r1, lsl #2]
   16470:	andeq	r6, r1, r4, asr #11
   16474:	andeq	r6, r1, ip, asr r5
   16478:	andeq	r6, r1, ip, asr r5
   1647c:	ldrdeq	r6, [r1], -r0
   16480:	andeq	r6, r1, ip, asr r5
   16484:	andeq	r6, r1, r8, asr #10
   16488:	andeq	r6, r1, ip, asr r5
   1648c:	andeq	r6, r1, ip, asr r5
   16490:	andeq	r6, r1, ip, asr r5
   16494:	andeq	r6, r1, r4, ror r5
   16498:	andeq	r6, r1, ip, asr r5
   1649c:	andeq	r6, r1, r8, lsl #11
   164a0:	andeq	r6, r1, ip, asr r5
   164a4:	andeq	r6, r1, ip, asr r5
   164a8:	andeq	r6, r1, r4, ror #11
   164ac:	andeq	r6, r1, ip, asr r5
   164b0:	andeq	r6, r1, ip, asr r5
   164b4:	andeq	r6, r1, ip, asr r5
   164b8:	muleq	r1, ip, r5
   164bc:	andeq	r6, r1, ip, asr r5
   164c0:	andeq	r6, r1, ip, asr r5
   164c4:	andeq	r6, r1, ip, asr r5
   164c8:	andeq	r6, r1, ip, asr r5
   164cc:	strdeq	r6, [r1], -r8
   164d0:			; <UNDEFINED> instruction: 0x000165b0
   164d4:	andeq	r6, r1, ip, asr r5
   164d8:	andeq	r6, r1, ip, asr r5
   164dc:	andeq	r6, r1, ip, asr r5
   164e0:	andeq	r6, r1, ip, asr r5
   164e4:	andeq	r6, r1, ip, asr r5
   164e8:	andeq	r6, r1, ip, asr r5
   164ec:	andeq	r6, r1, ip, asr r5
   164f0:	andeq	r6, r1, ip, lsl #12
   164f4:	andeq	r6, r1, r4, lsr #12
   164f8:	andeq	r6, r1, ip, asr r5
   164fc:	andeq	r6, r1, ip, asr r5
   16500:	andeq	r6, r1, ip, asr r5
   16504:	andeq	r6, r1, r8, asr #10
   16508:	andeq	r6, r1, ip, asr r5
   1650c:	andeq	r6, r1, ip, asr r5
   16510:	andeq	r6, r1, ip, asr r5
   16514:	andeq	r6, r1, r4, ror r5
   16518:	andeq	r6, r1, ip, asr r5
   1651c:	andeq	r6, r1, r8, lsl #11
   16520:	andeq	r6, r1, ip, asr r5
   16524:	andeq	r6, r1, ip, asr r5
   16528:	andeq	r6, r1, ip, asr r5
   1652c:	andeq	r6, r1, ip, asr r5
   16530:	andeq	r6, r1, ip, asr r5
   16534:	andeq	r6, r1, ip, asr r5
   16538:	muleq	r1, ip, r5
   1653c:	andeq	r6, r1, ip, asr r5
   16540:	andeq	r6, r1, ip, asr r5
   16544:	andeq	r6, r1, r8, lsl r6
   16548:	add	r0, sp, #8
   1654c:	mov	r1, r5
   16550:	mov	r2, #3
   16554:	bl	16708 <__assert_fail@plt+0x564c>
   16558:	b	16624 <__assert_fail@plt+0x5568>
   1655c:	ldr	r0, [sp, #8]
   16560:	ldr	r1, [sp, #12]
   16564:	ldr	r2, [sp, #4]
   16568:	strd	r0, [r2]
   1656c:	orr	r8, r8, #2
   16570:	b	16650 <__assert_fail@plt+0x5594>
   16574:	add	r0, sp, #8
   16578:	mov	r1, r5
   1657c:	mov	r2, #1
   16580:	bl	16708 <__assert_fail@plt+0x564c>
   16584:	b	16624 <__assert_fail@plt+0x5568>
   16588:	add	r0, sp, #8
   1658c:	mov	r1, r5
   16590:	mov	r2, #2
   16594:	bl	16708 <__assert_fail@plt+0x564c>
   16598:	b	16624 <__assert_fail@plt+0x5568>
   1659c:	add	r0, sp, #8
   165a0:	mov	r1, r5
   165a4:	mov	r2, #4
   165a8:	bl	16708 <__assert_fail@plt+0x564c>
   165ac:	b	16624 <__assert_fail@plt+0x5568>
   165b0:	add	r0, sp, #8
   165b4:	mov	r1, r5
   165b8:	mov	r2, #7
   165bc:	bl	16708 <__assert_fail@plt+0x564c>
   165c0:	b	16624 <__assert_fail@plt+0x5568>
   165c4:	add	r0, sp, #8
   165c8:	mov	r1, #1024	; 0x400
   165cc:	b	16620 <__assert_fail@plt+0x5564>
   165d0:	add	r0, sp, #8
   165d4:	mov	r1, r5
   165d8:	mov	r2, #6
   165dc:	bl	16708 <__assert_fail@plt+0x564c>
   165e0:	b	16624 <__assert_fail@plt+0x5568>
   165e4:	add	r0, sp, #8
   165e8:	mov	r1, r5
   165ec:	mov	r2, #5
   165f0:	bl	16708 <__assert_fail@plt+0x564c>
   165f4:	b	16624 <__assert_fail@plt+0x5568>
   165f8:	add	r0, sp, #8
   165fc:	mov	r1, r5
   16600:	mov	r2, #8
   16604:	bl	16708 <__assert_fail@plt+0x564c>
   16608:	b	16624 <__assert_fail@plt+0x5568>
   1660c:	add	r0, sp, #8
   16610:	mov	r1, #512	; 0x200
   16614:	b	16620 <__assert_fail@plt+0x5564>
   16618:	add	r0, sp, #8
   1661c:	mov	r1, #2
   16620:	bl	1667c <__assert_fail@plt+0x55c0>
   16624:	ldr	r1, [r9]
   16628:	add	r2, r1, r7
   1662c:	str	r2, [r9]
   16630:	ldrb	r1, [r1, r7]
   16634:	orr	r8, r0, r8
   16638:	cmp	r1, #0
   1663c:	orrne	r8, r8, #2
   16640:	ldr	r0, [sp, #8]
   16644:	ldr	r1, [sp, #12]
   16648:	ldr	r2, [sp, #4]
   1664c:	strd	r0, [r2]
   16650:	mov	r0, r8
   16654:	sub	sp, fp, #28
   16658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1665c:	movw	r0, #35657	; 0x8b49
   16660:	movt	r0, #1
   16664:	movw	r1, #35695	; 0x8b6f
   16668:	movt	r1, #1
   1666c:	movw	r3, #35711	; 0x8b7f
   16670:	movt	r3, #1
   16674:	mov	r2, #85	; 0x55
   16678:	bl	110bc <__assert_fail@plt>
   1667c:	push	{r4, r5, r6, r7, fp, lr}
   16680:	add	fp, sp, #16
   16684:	mov	r5, r1
   16688:	mov	r4, r0
   1668c:	cmn	r1, #1
   16690:	ble	166c8 <__assert_fail@plt+0x560c>
   16694:	cmp	r5, #0
   16698:	beq	166e8 <__assert_fail@plt+0x562c>
   1669c:	asr	r3, r5, #31
   166a0:	mvn	r6, #0
   166a4:	mvn	r0, #0
   166a8:	mvn	r1, #0
   166ac:	mov	r2, r5
   166b0:	bl	16fcc <__assert_fail@plt+0x5f10>
   166b4:	ldrd	r2, [r4]
   166b8:	subs	r0, r0, r2
   166bc:	sbcs	r0, r1, r3
   166c0:	bcc	166d8 <__assert_fail@plt+0x561c>
   166c4:	b	166e8 <__assert_fail@plt+0x562c>
   166c8:	ldrd	r0, [r4]
   166cc:	orrs	r0, r0, r1
   166d0:	beq	166e8 <__assert_fail@plt+0x562c>
   166d4:	mvn	r6, #0
   166d8:	mov	r0, #1
   166dc:	mvn	r7, #0
   166e0:	strd	r6, [r4]
   166e4:	pop	{r4, r5, r6, r7, fp, pc}
   166e8:	ldrd	r0, [r4]
   166ec:	umull	r6, r2, r0, r5
   166f0:	asr	r3, r5, #31
   166f4:	mla	r0, r0, r3, r2
   166f8:	mla	r7, r1, r5, r0
   166fc:	mov	r0, #0
   16700:	strd	r6, [r4]
   16704:	pop	{r4, r5, r6, r7, fp, pc}
   16708:	push	{r4, r5, r6, r7, fp, lr}
   1670c:	add	fp, sp, #16
   16710:	cmp	r2, #0
   16714:	beq	16748 <__assert_fail@plt+0x568c>
   16718:	mov	r4, r2
   1671c:	mov	r5, r1
   16720:	mov	r7, r0
   16724:	mov	r6, #0
   16728:	mov	r0, r7
   1672c:	mov	r1, r5
   16730:	bl	1667c <__assert_fail@plt+0x55c0>
   16734:	orr	r6, r0, r6
   16738:	subs	r4, r4, #1
   1673c:	bne	16728 <__assert_fail@plt+0x566c>
   16740:	mov	r0, r6
   16744:	pop	{r4, r5, r6, r7, fp, pc}
   16748:	mov	r6, #0
   1674c:	mov	r0, r6
   16750:	pop	{r4, r5, r6, r7, fp, pc}
   16754:	clz	r2, r1
   16758:	lsr	r2, r2, #5
   1675c:	clz	r3, r0
   16760:	lsr	r3, r3, #5
   16764:	orrs	r2, r3, r2
   16768:	movwne	r1, #1
   1676c:	movwne	r0, #1
   16770:	cmp	r1, #0
   16774:	beq	167a4 <__assert_fail@plt+0x56e8>
   16778:	mvn	r2, #-2147483648	; 0x80000000
   1677c:	udiv	r2, r2, r1
   16780:	cmp	r2, r0
   16784:	bcs	167a4 <__assert_fail@plt+0x56e8>
   16788:	push	{fp, lr}
   1678c:	mov	fp, sp
   16790:	bl	10fe4 <__errno_location@plt>
   16794:	mov	r1, #12
   16798:	str	r1, [r0]
   1679c:	mov	r0, #0
   167a0:	pop	{fp, pc}
   167a4:	b	10e40 <calloc@plt>
   167a8:	cmp	r0, #0
   167ac:	movweq	r0, #1
   167b0:	cmn	r0, #1
   167b4:	ble	167bc <__assert_fail@plt+0x5700>
   167b8:	b	10f6c <malloc@plt>
   167bc:	push	{fp, lr}
   167c0:	mov	fp, sp
   167c4:	bl	10fe4 <__errno_location@plt>
   167c8:	mov	r1, #12
   167cc:	str	r1, [r0]
   167d0:	mov	r0, #0
   167d4:	pop	{fp, pc}
   167d8:	push	{fp, lr}
   167dc:	mov	fp, sp
   167e0:	cmp	r0, #0
   167e4:	beq	16800 <__assert_fail@plt+0x5744>
   167e8:	cmp	r1, #0
   167ec:	beq	1680c <__assert_fail@plt+0x5750>
   167f0:	cmn	r1, #1
   167f4:	ble	16818 <__assert_fail@plt+0x575c>
   167f8:	pop	{fp, lr}
   167fc:	b	10ef4 <realloc@plt>
   16800:	mov	r0, r1
   16804:	pop	{fp, lr}
   16808:	b	167a8 <__assert_fail@plt+0x56ec>
   1680c:	bl	13cb0 <__assert_fail@plt+0x2bf4>
   16810:	mov	r0, #0
   16814:	pop	{fp, pc}
   16818:	bl	10fe4 <__errno_location@plt>
   1681c:	mov	r1, #12
   16820:	str	r1, [r0]
   16824:	mov	r0, #0
   16828:	pop	{fp, pc}
   1682c:	mov	r0, #0
   16830:	bx	lr
   16834:	mov	r0, #0
   16838:	bx	lr
   1683c:	mov	r1, r0
   16840:	sub	r2, r0, #65	; 0x41
   16844:	mov	r0, #1
   16848:	cmp	r2, #26
   1684c:	subcs	r2, r1, #97	; 0x61
   16850:	cmpcs	r2, #26
   16854:	bcs	1685c <__assert_fail@plt+0x57a0>
   16858:	bx	lr
   1685c:	sub	r1, r1, #48	; 0x30
   16860:	cmp	r1, #10
   16864:	movcs	r0, #0
   16868:	bx	lr
   1686c:	mov	r1, r0
   16870:	sub	r2, r0, #65	; 0x41
   16874:	mov	r0, #1
   16878:	cmp	r2, #26
   1687c:	subcs	r1, r1, #97	; 0x61
   16880:	cmpcs	r1, #26
   16884:	movcs	r0, #0
   16888:	bx	lr
   1688c:	mov	r1, #0
   16890:	cmp	r0, #128	; 0x80
   16894:	movwcc	r1, #1
   16898:	mov	r0, r1
   1689c:	bx	lr
   168a0:	sub	r1, r0, #9
   168a4:	clz	r1, r1
   168a8:	lsr	r1, r1, #5
   168ac:	sub	r0, r0, #32
   168b0:	clz	r0, r0
   168b4:	lsr	r0, r0, #5
   168b8:	orr	r0, r0, r1
   168bc:	bx	lr
   168c0:	mov	r1, r0
   168c4:	mov	r0, #1
   168c8:	cmp	r1, #32
   168cc:	bxcc	lr
   168d0:	cmp	r1, #127	; 0x7f
   168d4:	movne	r0, #0
   168d8:	bx	lr
   168dc:	sub	r1, r0, #48	; 0x30
   168e0:	mov	r0, #0
   168e4:	cmp	r1, #10
   168e8:	movwcc	r0, #1
   168ec:	bx	lr
   168f0:	sub	r1, r0, #33	; 0x21
   168f4:	mov	r0, #0
   168f8:	cmp	r1, #94	; 0x5e
   168fc:	movwcc	r0, #1
   16900:	bx	lr
   16904:	sub	r1, r0, #97	; 0x61
   16908:	mov	r0, #0
   1690c:	cmp	r1, #26
   16910:	movwcc	r0, #1
   16914:	bx	lr
   16918:	sub	r1, r0, #32
   1691c:	mov	r0, #0
   16920:	cmp	r1, #95	; 0x5f
   16924:	movwcc	r0, #1
   16928:	bx	lr
   1692c:	sub	r1, r0, #33	; 0x21
   16930:	cmp	r1, #93	; 0x5d
   16934:	bhi	16ac0 <__assert_fail@plt+0x5a04>
   16938:	mov	r0, #1
   1693c:	add	r2, pc, #0
   16940:	ldr	pc, [r2, r1, lsl #2]
   16944:			; <UNDEFINED> instruction: 0x00016abc
   16948:			; <UNDEFINED> instruction: 0x00016abc
   1694c:			; <UNDEFINED> instruction: 0x00016abc
   16950:			; <UNDEFINED> instruction: 0x00016abc
   16954:			; <UNDEFINED> instruction: 0x00016abc
   16958:			; <UNDEFINED> instruction: 0x00016abc
   1695c:			; <UNDEFINED> instruction: 0x00016abc
   16960:			; <UNDEFINED> instruction: 0x00016abc
   16964:			; <UNDEFINED> instruction: 0x00016abc
   16968:			; <UNDEFINED> instruction: 0x00016abc
   1696c:			; <UNDEFINED> instruction: 0x00016abc
   16970:			; <UNDEFINED> instruction: 0x00016abc
   16974:			; <UNDEFINED> instruction: 0x00016abc
   16978:			; <UNDEFINED> instruction: 0x00016abc
   1697c:			; <UNDEFINED> instruction: 0x00016abc
   16980:	andeq	r6, r1, r0, asr #21
   16984:	andeq	r6, r1, r0, asr #21
   16988:	andeq	r6, r1, r0, asr #21
   1698c:	andeq	r6, r1, r0, asr #21
   16990:	andeq	r6, r1, r0, asr #21
   16994:	andeq	r6, r1, r0, asr #21
   16998:	andeq	r6, r1, r0, asr #21
   1699c:	andeq	r6, r1, r0, asr #21
   169a0:	andeq	r6, r1, r0, asr #21
   169a4:	andeq	r6, r1, r0, asr #21
   169a8:			; <UNDEFINED> instruction: 0x00016abc
   169ac:			; <UNDEFINED> instruction: 0x00016abc
   169b0:			; <UNDEFINED> instruction: 0x00016abc
   169b4:			; <UNDEFINED> instruction: 0x00016abc
   169b8:			; <UNDEFINED> instruction: 0x00016abc
   169bc:			; <UNDEFINED> instruction: 0x00016abc
   169c0:			; <UNDEFINED> instruction: 0x00016abc
   169c4:	andeq	r6, r1, r0, asr #21
   169c8:	andeq	r6, r1, r0, asr #21
   169cc:	andeq	r6, r1, r0, asr #21
   169d0:	andeq	r6, r1, r0, asr #21
   169d4:	andeq	r6, r1, r0, asr #21
   169d8:	andeq	r6, r1, r0, asr #21
   169dc:	andeq	r6, r1, r0, asr #21
   169e0:	andeq	r6, r1, r0, asr #21
   169e4:	andeq	r6, r1, r0, asr #21
   169e8:	andeq	r6, r1, r0, asr #21
   169ec:	andeq	r6, r1, r0, asr #21
   169f0:	andeq	r6, r1, r0, asr #21
   169f4:	andeq	r6, r1, r0, asr #21
   169f8:	andeq	r6, r1, r0, asr #21
   169fc:	andeq	r6, r1, r0, asr #21
   16a00:	andeq	r6, r1, r0, asr #21
   16a04:	andeq	r6, r1, r0, asr #21
   16a08:	andeq	r6, r1, r0, asr #21
   16a0c:	andeq	r6, r1, r0, asr #21
   16a10:	andeq	r6, r1, r0, asr #21
   16a14:	andeq	r6, r1, r0, asr #21
   16a18:	andeq	r6, r1, r0, asr #21
   16a1c:	andeq	r6, r1, r0, asr #21
   16a20:	andeq	r6, r1, r0, asr #21
   16a24:	andeq	r6, r1, r0, asr #21
   16a28:	andeq	r6, r1, r0, asr #21
   16a2c:			; <UNDEFINED> instruction: 0x00016abc
   16a30:			; <UNDEFINED> instruction: 0x00016abc
   16a34:			; <UNDEFINED> instruction: 0x00016abc
   16a38:			; <UNDEFINED> instruction: 0x00016abc
   16a3c:			; <UNDEFINED> instruction: 0x00016abc
   16a40:			; <UNDEFINED> instruction: 0x00016abc
   16a44:	andeq	r6, r1, r0, asr #21
   16a48:	andeq	r6, r1, r0, asr #21
   16a4c:	andeq	r6, r1, r0, asr #21
   16a50:	andeq	r6, r1, r0, asr #21
   16a54:	andeq	r6, r1, r0, asr #21
   16a58:	andeq	r6, r1, r0, asr #21
   16a5c:	andeq	r6, r1, r0, asr #21
   16a60:	andeq	r6, r1, r0, asr #21
   16a64:	andeq	r6, r1, r0, asr #21
   16a68:	andeq	r6, r1, r0, asr #21
   16a6c:	andeq	r6, r1, r0, asr #21
   16a70:	andeq	r6, r1, r0, asr #21
   16a74:	andeq	r6, r1, r0, asr #21
   16a78:	andeq	r6, r1, r0, asr #21
   16a7c:	andeq	r6, r1, r0, asr #21
   16a80:	andeq	r6, r1, r0, asr #21
   16a84:	andeq	r6, r1, r0, asr #21
   16a88:	andeq	r6, r1, r0, asr #21
   16a8c:	andeq	r6, r1, r0, asr #21
   16a90:	andeq	r6, r1, r0, asr #21
   16a94:	andeq	r6, r1, r0, asr #21
   16a98:	andeq	r6, r1, r0, asr #21
   16a9c:	andeq	r6, r1, r0, asr #21
   16aa0:	andeq	r6, r1, r0, asr #21
   16aa4:	andeq	r6, r1, r0, asr #21
   16aa8:	andeq	r6, r1, r0, asr #21
   16aac:			; <UNDEFINED> instruction: 0x00016abc
   16ab0:			; <UNDEFINED> instruction: 0x00016abc
   16ab4:			; <UNDEFINED> instruction: 0x00016abc
   16ab8:			; <UNDEFINED> instruction: 0x00016abc
   16abc:	bx	lr
   16ac0:	mov	r0, #0
   16ac4:	bx	lr
   16ac8:	sub	r0, r0, #9
   16acc:	cmp	r0, #23
   16ad0:	movhi	r0, #0
   16ad4:	bxhi	lr
   16ad8:	bic	r0, r0, #-16777216	; 0xff000000
   16adc:	movw	r1, #31
   16ae0:	movt	r1, #128	; 0x80
   16ae4:	mov	r2, #1
   16ae8:	and	r0, r2, r1, lsr r0
   16aec:	bx	lr
   16af0:	sub	r1, r0, #65	; 0x41
   16af4:	mov	r0, #0
   16af8:	cmp	r1, #26
   16afc:	movwcc	r0, #1
   16b00:	bx	lr
   16b04:	mov	r1, r0
   16b08:	sub	r2, r0, #48	; 0x30
   16b0c:	mov	r0, #1
   16b10:	cmp	r2, #22
   16b14:	bhi	16b2c <__assert_fail@plt+0x5a70>
   16b18:	mov	ip, #1
   16b1c:	movw	r3, #1023	; 0x3ff
   16b20:	movt	r3, #126	; 0x7e
   16b24:	tst	r3, ip, lsl r2
   16b28:	bxne	lr
   16b2c:	sub	r1, r1, #97	; 0x61
   16b30:	cmp	r1, #6
   16b34:	movcs	r0, #0
   16b38:	bxcs	lr
   16b3c:	bx	lr
   16b40:	sub	r1, r0, #65	; 0x41
   16b44:	cmp	r1, #26
   16b48:	addcc	r0, r0, #32
   16b4c:	bx	lr
   16b50:	sub	r1, r0, #97	; 0x61
   16b54:	cmp	r1, #26
   16b58:	subcc	r0, r0, #32
   16b5c:	bx	lr
   16b60:	push	{r4, r5, r6, sl, fp, lr}
   16b64:	add	fp, sp, #16
   16b68:	mov	r4, r0
   16b6c:	bl	10f3c <__fpending@plt>
   16b70:	mov	r5, r0
   16b74:	mov	r0, r4
   16b78:	bl	10f48 <ferror_unlocked@plt>
   16b7c:	mov	r6, r0
   16b80:	mov	r0, r4
   16b84:	bl	16be4 <__assert_fail@plt+0x5b28>
   16b88:	cmp	r6, #0
   16b8c:	beq	16bb0 <__assert_fail@plt+0x5af4>
   16b90:	mvn	r4, #0
   16b94:	cmp	r0, #0
   16b98:	bne	16bdc <__assert_fail@plt+0x5b20>
   16b9c:	bl	10fe4 <__errno_location@plt>
   16ba0:	mov	r1, #0
   16ba4:	str	r1, [r0]
   16ba8:	mov	r0, r4
   16bac:	pop	{r4, r5, r6, sl, fp, pc}
   16bb0:	cmp	r0, #0
   16bb4:	mov	r4, r0
   16bb8:	mvnne	r4, #0
   16bbc:	cmp	r5, #0
   16bc0:	bne	16bdc <__assert_fail@plt+0x5b20>
   16bc4:	cmp	r0, #0
   16bc8:	beq	16bdc <__assert_fail@plt+0x5b20>
   16bcc:	bl	10fe4 <__errno_location@plt>
   16bd0:	ldr	r0, [r0]
   16bd4:	subs	r4, r0, #9
   16bd8:	mvnne	r4, #0
   16bdc:	mov	r0, r4
   16be0:	pop	{r4, r5, r6, sl, fp, pc}
   16be4:	push	{r4, r5, fp, lr}
   16be8:	add	fp, sp, #8
   16bec:	sub	sp, sp, #8
   16bf0:	mov	r4, r0
   16bf4:	bl	11020 <fileno@plt>
   16bf8:	cmn	r0, #1
   16bfc:	ble	16c74 <__assert_fail@plt+0x5bb8>
   16c00:	mov	r0, r4
   16c04:	bl	10f84 <__freading@plt>
   16c08:	cmp	r0, #0
   16c0c:	beq	16c38 <__assert_fail@plt+0x5b7c>
   16c10:	mov	r0, r4
   16c14:	bl	11020 <fileno@plt>
   16c18:	mov	r1, #1
   16c1c:	str	r1, [sp]
   16c20:	mov	r2, #0
   16c24:	mov	r3, #0
   16c28:	bl	10f24 <lseek64@plt>
   16c2c:	and	r0, r0, r1
   16c30:	cmn	r0, #1
   16c34:	beq	16c74 <__assert_fail@plt+0x5bb8>
   16c38:	mov	r0, r4
   16c3c:	bl	16c84 <__assert_fail@plt+0x5bc8>
   16c40:	cmp	r0, #0
   16c44:	beq	16c74 <__assert_fail@plt+0x5bb8>
   16c48:	bl	10fe4 <__errno_location@plt>
   16c4c:	ldr	r5, [r0]
   16c50:	mov	r0, r4
   16c54:	bl	11044 <fclose@plt>
   16c58:	cmp	r5, #0
   16c5c:	beq	16c6c <__assert_fail@plt+0x5bb0>
   16c60:	bl	10fe4 <__errno_location@plt>
   16c64:	str	r5, [r0]
   16c68:	mvn	r0, #0
   16c6c:	sub	sp, fp, #8
   16c70:	pop	{r4, r5, fp, pc}
   16c74:	mov	r0, r4
   16c78:	sub	sp, fp, #8
   16c7c:	pop	{r4, r5, fp, lr}
   16c80:	b	11044 <fclose@plt>
   16c84:	push	{r4, sl, fp, lr}
   16c88:	add	fp, sp, #8
   16c8c:	mov	r4, r0
   16c90:	cmp	r0, #0
   16c94:	beq	16cac <__assert_fail@plt+0x5bf0>
   16c98:	mov	r0, r4
   16c9c:	bl	10f84 <__freading@plt>
   16ca0:	cmp	r0, #0
   16ca4:	movne	r0, r4
   16ca8:	blne	16cb8 <__assert_fail@plt+0x5bfc>
   16cac:	mov	r0, r4
   16cb0:	pop	{r4, sl, fp, lr}
   16cb4:	b	10e88 <fflush@plt>
   16cb8:	push	{fp, lr}
   16cbc:	mov	fp, sp
   16cc0:	sub	sp, sp, #8
   16cc4:	ldrb	r1, [r0, #1]
   16cc8:	tst	r1, #1
   16ccc:	beq	16ce4 <__assert_fail@plt+0x5c28>
   16cd0:	mov	r1, #1
   16cd4:	str	r1, [sp]
   16cd8:	mov	r2, #0
   16cdc:	mov	r3, #0
   16ce0:	bl	16cec <__assert_fail@plt+0x5c30>
   16ce4:	mov	sp, fp
   16ce8:	pop	{fp, pc}
   16cec:	push	{r4, r5, r6, r7, fp, lr}
   16cf0:	add	fp, sp, #16
   16cf4:	sub	sp, sp, #8
   16cf8:	mov	r5, r3
   16cfc:	mov	r6, r2
   16d00:	mov	r4, r0
   16d04:	ldr	r0, [r0, #4]
   16d08:	ldr	r1, [r4, #8]
   16d0c:	cmp	r1, r0
   16d10:	bne	16d2c <__assert_fail@plt+0x5c70>
   16d14:	ldrd	r0, [r4, #16]
   16d18:	cmp	r1, r0
   16d1c:	bne	16d2c <__assert_fail@plt+0x5c70>
   16d20:	ldr	r0, [r4, #36]	; 0x24
   16d24:	cmp	r0, #0
   16d28:	beq	16d44 <__assert_fail@plt+0x5c88>
   16d2c:	mov	r0, r4
   16d30:	mov	r2, r6
   16d34:	mov	r3, r5
   16d38:	sub	sp, fp, #16
   16d3c:	pop	{r4, r5, r6, r7, fp, lr}
   16d40:	b	11050 <fseeko64@plt>
   16d44:	ldr	r7, [fp, #8]
   16d48:	mov	r0, r4
   16d4c:	bl	11020 <fileno@plt>
   16d50:	str	r7, [sp]
   16d54:	mov	r2, r6
   16d58:	mov	r3, r5
   16d5c:	bl	10f24 <lseek64@plt>
   16d60:	and	r2, r0, r1
   16d64:	cmn	r2, #1
   16d68:	beq	16d88 <__assert_fail@plt+0x5ccc>
   16d6c:	strd	r0, [r4, #80]	; 0x50
   16d70:	ldr	r0, [r4]
   16d74:	bic	r0, r0, #16
   16d78:	str	r0, [r4]
   16d7c:	mov	r0, #0
   16d80:	sub	sp, fp, #16
   16d84:	pop	{r4, r5, r6, r7, fp, pc}
   16d88:	mvn	r0, #0
   16d8c:	sub	sp, fp, #16
   16d90:	pop	{r4, r5, r6, r7, fp, pc}
   16d94:	push	{fp, lr}
   16d98:	mov	fp, sp
   16d9c:	bl	10fe4 <__errno_location@plt>
   16da0:	mov	r1, #12
   16da4:	str	r1, [r0]
   16da8:	mov	r0, #0
   16dac:	pop	{fp, pc}
   16db0:	b	167a8 <__assert_fail@plt+0x56ec>
   16db4:	cmp	r1, #0
   16db8:	orreq	r1, r1, #1
   16dbc:	b	167d8 <__assert_fail@plt+0x571c>
   16dc0:	b	16754 <__assert_fail@plt+0x5698>
   16dc4:	clz	r3, r2
   16dc8:	lsr	ip, r3, #5
   16dcc:	clz	r3, r1
   16dd0:	lsr	r3, r3, #5
   16dd4:	orrs	r3, r3, ip
   16dd8:	movwne	r1, #1
   16ddc:	movwne	r2, #1
   16de0:	b	16e80 <__assert_fail@plt+0x5dc4>
   16de4:	push	{fp, lr}
   16de8:	mov	fp, sp
   16dec:	mov	r0, #14
   16df0:	bl	11080 <nl_langinfo@plt>
   16df4:	movw	r1, #32207	; 0x7dcf
   16df8:	movt	r1, #1
   16dfc:	cmp	r0, #0
   16e00:	movne	r1, r0
   16e04:	ldrb	r2, [r1]
   16e08:	movw	r0, #35790	; 0x8bce
   16e0c:	movt	r0, #1
   16e10:	cmp	r2, #0
   16e14:	movne	r0, r1
   16e18:	pop	{fp, pc}
   16e1c:	push	{r4, r5, r6, r7, fp, lr}
   16e20:	add	fp, sp, #16
   16e24:	sub	sp, sp, #8
   16e28:	mov	r7, r2
   16e2c:	mov	r4, r1
   16e30:	add	r5, sp, #4
   16e34:	cmp	r0, #0
   16e38:	movne	r5, r0
   16e3c:	mov	r0, r5
   16e40:	bl	10f54 <mbrtowc@plt>
   16e44:	mov	r6, r0
   16e48:	cmp	r7, #0
   16e4c:	beq	16e74 <__assert_fail@plt+0x5db8>
   16e50:	cmn	r6, #2
   16e54:	bcc	16e74 <__assert_fail@plt+0x5db8>
   16e58:	mov	r0, #0
   16e5c:	bl	16ebc <__assert_fail@plt+0x5e00>
   16e60:	cmp	r0, #0
   16e64:	bne	16e74 <__assert_fail@plt+0x5db8>
   16e68:	ldrb	r0, [r4]
   16e6c:	str	r0, [r5]
   16e70:	mov	r6, #1
   16e74:	mov	r0, r6
   16e78:	sub	sp, fp, #16
   16e7c:	pop	{r4, r5, r6, r7, fp, pc}
   16e80:	cmp	r2, #0
   16e84:	beq	16eb4 <__assert_fail@plt+0x5df8>
   16e88:	mvn	r3, #0
   16e8c:	udiv	r3, r3, r2
   16e90:	cmp	r3, r1
   16e94:	bcs	16eb4 <__assert_fail@plt+0x5df8>
   16e98:	push	{fp, lr}
   16e9c:	mov	fp, sp
   16ea0:	bl	10fe4 <__errno_location@plt>
   16ea4:	mov	r1, #12
   16ea8:	str	r1, [r0]
   16eac:	mov	r0, #0
   16eb0:	pop	{fp, pc}
   16eb4:	mul	r1, r2, r1
   16eb8:	b	167d8 <__assert_fail@plt+0x571c>
   16ebc:	push	{r4, sl, fp, lr}
   16ec0:	add	fp, sp, #8
   16ec4:	sub	sp, sp, #264	; 0x108
   16ec8:	add	r1, sp, #7
   16ecc:	movw	r2, #257	; 0x101
   16ed0:	bl	16f28 <__assert_fail@plt+0x5e6c>
   16ed4:	mov	r4, #0
   16ed8:	cmp	r0, #0
   16edc:	bne	16f1c <__assert_fail@plt+0x5e60>
   16ee0:	add	r0, sp, #7
   16ee4:	movw	r1, #31517	; 0x7b1d
   16ee8:	movt	r1, #1
   16eec:	mov	r2, #2
   16ef0:	bl	10fc0 <bcmp@plt>
   16ef4:	cmp	r0, #0
   16ef8:	beq	16f1c <__assert_fail@plt+0x5e60>
   16efc:	add	r0, sp, #7
   16f00:	movw	r1, #35796	; 0x8bd4
   16f04:	movt	r1, #1
   16f08:	mov	r2, #6
   16f0c:	bl	10fc0 <bcmp@plt>
   16f10:	mov	r4, r0
   16f14:	cmp	r0, #0
   16f18:	movwne	r4, #1
   16f1c:	mov	r0, r4
   16f20:	sub	sp, fp, #8
   16f24:	pop	{r4, sl, fp, pc}
   16f28:	b	16f2c <__assert_fail@plt+0x5e70>
   16f2c:	push	{r4, r5, r6, r7, fp, lr}
   16f30:	add	fp, sp, #16
   16f34:	mov	r6, r2
   16f38:	mov	r4, r1
   16f3c:	bl	16fc4 <__assert_fail@plt+0x5f08>
   16f40:	cmp	r0, #0
   16f44:	beq	16f74 <__assert_fail@plt+0x5eb8>
   16f48:	mov	r7, r0
   16f4c:	bl	10fcc <strlen@plt>
   16f50:	cmp	r0, r6
   16f54:	bcs	16f90 <__assert_fail@plt+0x5ed4>
   16f58:	add	r2, r0, #1
   16f5c:	mov	r0, r4
   16f60:	mov	r1, r7
   16f64:	bl	10eac <memcpy@plt>
   16f68:	mov	r5, #0
   16f6c:	mov	r0, r5
   16f70:	pop	{r4, r5, r6, r7, fp, pc}
   16f74:	mov	r5, #22
   16f78:	cmp	r6, #0
   16f7c:	beq	16fb8 <__assert_fail@plt+0x5efc>
   16f80:	mov	r0, #0
   16f84:	strb	r0, [r4]
   16f88:	mov	r0, r5
   16f8c:	pop	{r4, r5, r6, r7, fp, pc}
   16f90:	mov	r5, #34	; 0x22
   16f94:	cmp	r6, #0
   16f98:	beq	16fb8 <__assert_fail@plt+0x5efc>
   16f9c:	sub	r6, r6, #1
   16fa0:	mov	r0, r4
   16fa4:	mov	r1, r7
   16fa8:	mov	r2, r6
   16fac:	bl	10eac <memcpy@plt>
   16fb0:	mov	r0, #0
   16fb4:	strb	r0, [r4, r6]
   16fb8:	mov	r0, r5
   16fbc:	pop	{r4, r5, r6, r7, fp, pc}
   16fc0:	b	16fc4 <__assert_fail@plt+0x5f08>
   16fc4:	mov	r1, #0
   16fc8:	b	1105c <setlocale@plt>
   16fcc:	cmp	r3, #0
   16fd0:	cmpeq	r2, #0
   16fd4:	bne	16fec <__assert_fail@plt+0x5f30>
   16fd8:	cmp	r1, #0
   16fdc:	cmpeq	r0, #0
   16fe0:	mvnne	r1, #0
   16fe4:	mvnne	r0, #0
   16fe8:	b	17008 <__assert_fail@plt+0x5f4c>
   16fec:	sub	sp, sp, #8
   16ff0:	push	{sp, lr}
   16ff4:	bl	17018 <__assert_fail@plt+0x5f5c>
   16ff8:	ldr	lr, [sp, #4]
   16ffc:	add	sp, sp, #8
   17000:	pop	{r2, r3}
   17004:	bx	lr
   17008:	push	{r1, lr}
   1700c:	mov	r0, #8
   17010:	bl	10e58 <raise@plt>
   17014:	pop	{r1, pc}
   17018:	cmp	r1, r3
   1701c:	cmpeq	r0, r2
   17020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17024:	mov	r4, r0
   17028:	movcc	r0, #0
   1702c:	mov	r5, r1
   17030:	ldr	lr, [sp, #36]	; 0x24
   17034:	movcc	r1, r0
   17038:	bcc	17134 <__assert_fail@plt+0x6078>
   1703c:	cmp	r3, #0
   17040:	clzeq	ip, r2
   17044:	clzne	ip, r3
   17048:	addeq	ip, ip, #32
   1704c:	cmp	r5, #0
   17050:	clzeq	r1, r4
   17054:	addeq	r1, r1, #32
   17058:	clzne	r1, r5
   1705c:	sub	ip, ip, r1
   17060:	sub	sl, ip, #32
   17064:	lsl	r9, r3, ip
   17068:	rsb	fp, ip, #32
   1706c:	orr	r9, r9, r2, lsl sl
   17070:	orr	r9, r9, r2, lsr fp
   17074:	lsl	r8, r2, ip
   17078:	cmp	r5, r9
   1707c:	cmpeq	r4, r8
   17080:	movcc	r0, #0
   17084:	movcc	r1, r0
   17088:	bcc	170a4 <__assert_fail@plt+0x5fe8>
   1708c:	mov	r0, #1
   17090:	subs	r4, r4, r8
   17094:	lsl	r1, r0, sl
   17098:	orr	r1, r1, r0, lsr fp
   1709c:	lsl	r0, r0, ip
   170a0:	sbc	r5, r5, r9
   170a4:	cmp	ip, #0
   170a8:	beq	17134 <__assert_fail@plt+0x6078>
   170ac:	lsr	r6, r8, #1
   170b0:	orr	r6, r6, r9, lsl #31
   170b4:	lsr	r7, r9, #1
   170b8:	mov	r2, ip
   170bc:	b	170e0 <__assert_fail@plt+0x6024>
   170c0:	subs	r3, r4, r6
   170c4:	sbc	r8, r5, r7
   170c8:	adds	r3, r3, r3
   170cc:	adc	r8, r8, r8
   170d0:	adds	r4, r3, #1
   170d4:	adc	r5, r8, #0
   170d8:	subs	r2, r2, #1
   170dc:	beq	170fc <__assert_fail@plt+0x6040>
   170e0:	cmp	r5, r7
   170e4:	cmpeq	r4, r6
   170e8:	bcs	170c0 <__assert_fail@plt+0x6004>
   170ec:	adds	r4, r4, r4
   170f0:	adc	r5, r5, r5
   170f4:	subs	r2, r2, #1
   170f8:	bne	170e0 <__assert_fail@plt+0x6024>
   170fc:	lsr	r3, r4, ip
   17100:	orr	r3, r3, r5, lsl fp
   17104:	lsr	r2, r5, ip
   17108:	orr	r3, r3, r5, lsr sl
   1710c:	adds	r0, r0, r4
   17110:	mov	r4, r3
   17114:	lsl	r3, r2, ip
   17118:	orr	r3, r3, r4, lsl sl
   1711c:	lsl	ip, r4, ip
   17120:	orr	r3, r3, r4, lsr fp
   17124:	adc	r1, r1, r5
   17128:	subs	r0, r0, ip
   1712c:	mov	r5, r2
   17130:	sbc	r1, r1, r3
   17134:	cmp	lr, #0
   17138:	strdne	r4, [lr]
   1713c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17140:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17144:	mov	r7, r0
   17148:	ldr	r6, [pc, #72]	; 17198 <__assert_fail@plt+0x60dc>
   1714c:	ldr	r5, [pc, #72]	; 1719c <__assert_fail@plt+0x60e0>
   17150:	add	r6, pc, r6
   17154:	add	r5, pc, r5
   17158:	sub	r6, r6, r5
   1715c:	mov	r8, r1
   17160:	mov	r9, r2
   17164:	bl	10e20 <calloc@plt-0x20>
   17168:	asrs	r6, r6, #2
   1716c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17170:	mov	r4, #0
   17174:	add	r4, r4, #1
   17178:	ldr	r3, [r5], #4
   1717c:	mov	r2, r9
   17180:	mov	r1, r8
   17184:	mov	r0, r7
   17188:	blx	r3
   1718c:	cmp	r6, r4
   17190:	bne	17174 <__assert_fail@plt+0x60b8>
   17194:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17198:			; <UNDEFINED> instruction: 0x00011db4
   1719c:	andeq	r1, r1, ip, lsr #27
   171a0:	bx	lr
   171a4:	ldr	r3, [pc, #12]	; 171b8 <__assert_fail@plt+0x60fc>
   171a8:	mov	r1, #0
   171ac:	add	r3, pc, r3
   171b0:	ldr	r2, [r3]
   171b4:	b	10ffc <__cxa_atexit@plt>
   171b8:	andeq	r1, r1, r8, lsr pc

Disassembly of section .fini:

000171bc <.fini>:
   171bc:	push	{r3, lr}
   171c0:	pop	{r3, pc}
