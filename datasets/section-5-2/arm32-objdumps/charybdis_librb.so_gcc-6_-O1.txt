
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004344 <_init>:
    4344:	push	{r3, lr}
    4348:	bl	4d28 <call_weak_fn>
    434c:	pop	{r3, pc}

Disassembly of section .plt:

00004350 <.plt>:
    4350:	push	{lr}		; (str lr, [sp, #-4]!)
    4354:	ldr	lr, [pc, #4]	; 4360 <.plt+0x10>
    4358:	add	lr, pc, lr
    435c:	ldr	pc, [lr, #8]!
    4360:	.word	0x00023ca0

00004364 <rb_helper_run@plt>:
    4364:	add	ip, pc, #0, 12
    4368:	add	ip, ip, #143360	; 0x23000
    436c:	ldr	pc, [ip, #3232]!	; 0xca0

00004370 <TLS_method@plt>:
    4370:	add	ip, pc, #0, 12
    4374:	add	ip, ip, #143360	; 0x23000
    4378:	ldr	pc, [ip, #3224]!	; 0xc98

0000437c <open@plt>:
    437c:	add	ip, pc, #0, 12
    4380:	add	ip, ip, #143360	; 0x23000
    4384:	ldr	pc, [ip, #3216]!	; 0xc90

00004388 <rb_init_netio@plt>:
    4388:	add	ip, pc, #0, 12
    438c:	add	ip, ip, #143360	; 0x23000
    4390:	ldr	pc, [ip, #3208]!	; 0xc88

00004394 <sigemptyset@plt>:
    4394:	add	ip, pc, #0, 12
    4398:	add	ip, ip, #143360	; 0x23000
    439c:	ldr	pc, [ip, #3200]!	; 0xc80

000043a0 <strerror@plt>:
    43a0:	add	ip, pc, #0, 12
    43a4:	add	ip, ip, #143360	; 0x23000
    43a8:	ldr	pc, [ip, #3192]!	; 0xc78

000043ac <rb_radixtree_elem_delete@plt>:
    43ac:	add	ip, pc, #0, 12
    43b0:	add	ip, ip, #143360	; 0x23000
    43b4:	ldr	pc, [ip, #3184]!	; 0xc70

000043b8 <getdtablesize@plt>:
    43b8:	add	ip, pc, #0, 12
    43bc:	add	ip, ip, #143360	; 0x23000
    43c0:	ldr	pc, [ip, #3176]!	; 0xc68

000043c4 <abort@plt>:
    43c4:	add	ip, pc, #0, 12
    43c8:	add	ip, ip, #143360	; 0x23000
    43cc:	ldr	pc, [ip, #3168]!	; 0xc60

000043d0 <connect@plt>:
    43d0:	add	ip, pc, #0, 12
    43d4:	add	ip, ip, #143360	; 0x23000
    43d8:	ldr	pc, [ip, #3160]!	; 0xc58

000043dc <rb_ignore_errno@plt>:
    43dc:	add	ip, pc, #0, 12
    43e0:	add	ip, ip, #143360	; 0x23000
    43e4:	ldr	pc, [ip, #3152]!	; 0xc50

000043e8 <rb_settimeout@plt>:
    43e8:	add	ip, pc, #0, 12
    43ec:	add	ip, ip, #143360	; 0x23000
    43f0:	ldr	pc, [ip, #3144]!	; 0xc48

000043f4 <SSL_CTX_set_cipher_list@plt>:
    43f4:	add	ip, pc, #0, 12
    43f8:	add	ip, ip, #143360	; 0x23000
    43fc:	ldr	pc, [ip, #3136]!	; 0xc40

00004400 <ERR_get_error@plt>:
    4400:	add	ip, pc, #0, 12
    4404:	add	ip, ip, #143360	; 0x23000
    4408:	ldr	pc, [ip, #3128]!	; 0xc38

0000440c <rb_radixtree_foreach_start@plt>:
    440c:	add	ip, pc, #0, 12
    4410:	add	ip, ip, #143360	; 0x23000
    4414:	ldr	pc, [ip, #3120]!	; 0xc30

00004418 <strcasestr@plt>:
    4418:	add	ip, pc, #0, 12
    441c:	add	ip, ip, #143360	; 0x23000
    4420:	ldr	pc, [ip, #3112]!	; 0xc28

00004424 <rb_connect_tcp@plt>:
    4424:	add	ip, pc, #0, 12
    4428:	add	ip, ip, #143360	; 0x23000
    442c:	ldr	pc, [ip, #3104]!	; 0xc20

00004430 <RAND_load_file@plt>:
    4430:	add	ip, pc, #0, 12
    4434:	add	ip, ip, #143360	; 0x23000
    4438:	ldr	pc, [ip, #3096]!	; 0xc18

0000443c <signalfd@plt>:
    443c:	add	ip, pc, #0, 12
    4440:	add	ip, ip, #143360	; 0x23000
    4444:	ldr	pc, [ip, #3088]!	; 0xc10

00004448 <rb_radixtree_foreach_next@plt>:
    4448:	add	ip, pc, #0, 12
    444c:	add	ip, ip, #143360	; 0x23000
    4450:	ldr	pc, [ip, #3080]!	; 0xc08

00004454 <memcmp@plt>:
    4454:	add	ip, pc, #0, 12
    4458:	add	ip, ip, #143360	; 0x23000
    445c:	ldr	pc, [ip, #3072]!	; 0xc00

00004460 <SSL_CTX_free@plt>:
    4460:	add	ip, pc, #0, 12
    4464:	add	ip, ip, #143360	; 0x23000
    4468:	ldr	pc, [ip, #3064]!	; 0xbf8

0000446c <rb_getmaxconnect@plt>:
    446c:	add	ip, pc, #0, 12
    4470:	add	ip, ip, #143360	; 0x23000
    4474:	ldr	pc, [ip, #3056]!	; 0xbf0

00004478 <sigwaitinfo@plt>:
    4478:	add	ip, pc, #0, 12
    447c:	add	ip, ip, #143360	; 0x23000
    4480:	ldr	pc, [ip, #3048]!	; 0xbe8

00004484 <__libc_current_sigrtmin@plt>:
    4484:	add	ip, pc, #0, 12
    4488:	add	ip, ip, #143360	; 0x23000
    448c:	ldr	pc, [ip, #3040]!	; 0xbe0

00004490 <__xstat@plt>:
    4490:	add	ip, pc, #0, 12
    4494:	add	ip, ip, #143360	; 0x23000
    4498:	ldr	pc, [ip, #3032]!	; 0xbd8

0000449c <rb_event_delete@plt>:
    449c:	add	ip, pc, #0, 12
    44a0:	add	ip, ip, #143360	; 0x23000
    44a4:	ldr	pc, [ip, #3024]!	; 0xbd0

000044a8 <rb_setselect@plt>:
    44a8:	add	ip, pc, #0, 12
    44ac:	add	ip, ip, #143360	; 0x23000
    44b0:	ldr	pc, [ip, #3016]!	; 0xbc8

000044b4 <rb_fd_ssl@plt>:
    44b4:	add	ip, pc, #0, 12
    44b8:	add	ip, ip, #143360	; 0x23000
    44bc:	ldr	pc, [ip, #3008]!	; 0xbc0

000044c0 <sigtimedwait@plt>:
    44c0:	add	ip, pc, #0, 12
    44c4:	add	ip, ip, #143360	; 0x23000
    44c8:	ldr	pc, [ip, #3000]!	; 0xbb8

000044cc <rb_setenv@plt>:
    44cc:	add	ip, pc, #0, 12
    44d0:	add	ip, ip, #143360	; 0x23000
    44d4:	ldr	pc, [ip, #2992]!	; 0xbb0

000044d8 <signal@plt>:
    44d8:	add	ip, pc, #0, 12
    44dc:	add	ip, ip, #143360	; 0x23000
    44e0:	ldr	pc, [ip, #2984]!	; 0xba8

000044e4 <rb_get_fd@plt>:
    44e4:	add	ip, pc, #0, 12
    44e8:	add	ip, ip, #143360	; 0x23000
    44ec:	ldr	pc, [ip, #2976]!	; 0xba0

000044f0 <epoll_create@plt>:
    44f0:	add	ip, pc, #0, 12
    44f4:	add	ip, ip, #143360	; 0x23000
    44f8:	ldr	pc, [ip, #2968]!	; 0xb98

000044fc <rb_clear_patricia@plt>:
    44fc:	add	ip, pc, #0, 12
    4500:	add	ip, ip, #143360	; 0x23000
    4504:	ldr	pc, [ip, #2960]!	; 0xb90

00004508 <__gmon_start__@plt>:
    4508:	add	ip, pc, #0, 12
    450c:	add	ip, ip, #143360	; 0x23000
    4510:	ldr	pc, [ip, #2952]!	; 0xb88

00004514 <SSL_CTX_clear_options@plt>:
    4514:	add	ip, pc, #0, 12
    4518:	add	ip, ip, #143360	; 0x23000
    451c:	ldr	pc, [ip, #2944]!	; 0xb80

00004520 <SSL_get_current_cipher@plt>:
    4520:	add	ip, pc, #0, 12
    4524:	add	ip, ip, #143360	; 0x23000
    4528:	ldr	pc, [ip, #2936]!	; 0xb78

0000452c <timer_create@plt>:
    452c:	add	ip, pc, #0, 12
    4530:	add	ip, ip, #143360	; 0x23000
    4534:	ldr	pc, [ip, #2928]!	; 0xb70

00004538 <X509_get_X509_PUBKEY@plt>:
    4538:	add	ip, pc, #0, 12
    453c:	add	ip, ip, #143360	; 0x23000
    4540:	ldr	pc, [ip, #2920]!	; 0xb68

00004544 <rb_select@plt>:
    4544:	add	ip, pc, #0, 12
    4548:	add	ip, ip, #143360	; 0x23000
    454c:	ldr	pc, [ip, #2912]!	; 0xb60

00004550 <rb_patricia_search_best@plt>:
    4550:	add	ip, pc, #0, 12
    4554:	add	ip, ip, #143360	; 0x23000
    4558:	ldr	pc, [ip, #2904]!	; 0xb58

0000455c <vsnprintf@plt>:
    455c:	add	ip, pc, #0, 12
    4560:	add	ip, ip, #143360	; 0x23000
    4564:	ldr	pc, [ip, #2896]!	; 0xb50

00004568 <socketpair@plt>:
    4568:	add	ip, pc, #0, 12
    456c:	add	ip, ip, #143360	; 0x23000
    4570:	ldr	pc, [ip, #2888]!	; 0xb48

00004574 <strncpy@plt>:
    4574:	add	ip, pc, #0, 12
    4578:	add	ip, ip, #143360	; 0x23000
    457c:	ldr	pc, [ip, #2880]!	; 0xb40

00004580 <fclose@plt>:
    4580:	add	ip, pc, #0, 12
    4584:	add	ip, ip, #143360	; 0x23000
    4588:	ldr	pc, [ip, #2872]!	; 0xb38

0000458c <recv@plt>:
    458c:	add	ip, pc, #0, 12
    4590:	add	ip, ip, #143360	; 0x23000
    4594:	ldr	pc, [ip, #2864]!	; 0xb30

00004598 <getenv@plt>:
    4598:	add	ip, pc, #0, 12
    459c:	add	ip, ip, #143360	; 0x23000
    45a0:	ldr	pc, [ip, #2856]!	; 0xb28

000045a4 <ERR_error_string_n@plt>:
    45a4:	add	ip, pc, #0, 12
    45a8:	add	ip, ip, #143360	; 0x23000
    45ac:	ldr	pc, [ip, #2848]!	; 0xb20

000045b0 <strchr@plt>:
    45b0:	add	ip, pc, #0, 12
    45b4:	add	ip, ip, #143360	; 0x23000
    45b8:	ldr	pc, [ip, #2840]!	; 0xb18

000045bc <rb_gettimeofday@plt>:
    45bc:	add	ip, pc, #0, 12
    45c0:	add	ip, ip, #143360	; 0x23000
    45c4:	ldr	pc, [ip, #2832]!	; 0xb10

000045c8 <strcasecmp@plt>:
    45c8:	add	ip, pc, #0, 12
    45cc:	add	ip, ip, #143360	; 0x23000
    45d0:	ldr	pc, [ip, #2824]!	; 0xb08

000045d4 <rb_helper_restart@plt>:
    45d4:	add	ip, pc, #0, 12
    45d8:	add	ip, ip, #143360	; 0x23000
    45dc:	ldr	pc, [ip, #2816]!	; 0xb00

000045e0 <listen@plt>:
    45e0:	add	ip, pc, #0, 12
    45e4:	add	ip, ip, #143360	; 0x23000
    45e8:	ldr	pc, [ip, #2808]!	; 0xaf8

000045ec <calloc@plt>:
    45ec:	add	ip, pc, #0, 12
    45f0:	add	ip, ip, #143360	; 0x23000
    45f4:	ldr	pc, [ip, #2800]!	; 0xaf0

000045f8 <SSL_write@plt>:
    45f8:	add	ip, pc, #0, 12
    45fc:	add	ip, ip, #143360	; 0x23000
    4600:	ldr	pc, [ip, #2792]!	; 0xae8

00004604 <rb_event_init@plt>:
    4604:	add	ip, pc, #0, 12
    4608:	add	ip, ip, #143360	; 0x23000
    460c:	ldr	pc, [ip, #2784]!	; 0xae0

00004610 <fopen@plt>:
    4610:	add	ip, pc, #0, 12
    4614:	add	ip, ip, #143360	; 0x23000
    4618:	ldr	pc, [ip, #2776]!	; 0xad8

0000461c <rb_set_nb@plt>:
    461c:	add	ip, pc, #0, 12
    4620:	add	ip, ip, #143360	; 0x23000
    4624:	ldr	pc, [ip, #2768]!	; 0xad0

00004628 <memset@plt>:
    4628:	add	ip, pc, #0, 12
    462c:	add	ip, ip, #143360	; 0x23000
    4630:	ldr	pc, [ip, #2760]!	; 0xac8

00004634 <rb_inet_pton@plt>:
    4634:	add	ip, pc, #0, 12
    4638:	add	ip, ip, #143360	; 0x23000
    463c:	ldr	pc, [ip, #2752]!	; 0xac0

00004640 <rb_radixtree_stats@plt>:
    4640:	add	ip, pc, #0, 12
    4644:	add	ip, ip, #143360	; 0x23000
    4648:	ldr	pc, [ip, #2744]!	; 0xab8

0000464c <strrchr@plt>:
    464c:	add	ip, pc, #0, 12
    4650:	add	ip, ip, #143360	; 0x23000
    4654:	ldr	pc, [ip, #2736]!	; 0xab0

00004658 <rb_write@plt>:
    4658:	add	ip, pc, #0, 12
    465c:	add	ip, ip, #143360	; 0x23000
    4660:	ldr	pc, [ip, #2728]!	; 0xaa8

00004664 <SSL_set_fd@plt>:
    4664:	add	ip, pc, #0, 12
    4668:	add	ip, ip, #143360	; 0x23000
    466c:	ldr	pc, [ip, #2720]!	; 0xaa0

00004670 <SSL_CTX_ctrl@plt>:
    4670:	add	ip, pc, #0, 12
    4674:	add	ip, ip, #143360	; 0x23000
    4678:	ldr	pc, [ip, #2712]!	; 0xa98

0000467c <rb_linebuf_parse@plt>:
    467c:	add	ip, pc, #0, 12
    4680:	add	ip, ip, #143360	; 0x23000
    4684:	ldr	pc, [ip, #2704]!	; 0xa90

00004688 <writev@plt>:
    4688:	add	ip, pc, #0, 12
    468c:	add	ip, ip, #143360	; 0x23000
    4690:	ldr	pc, [ip, #2696]!	; 0xa88

00004694 <rb_fsnprint@plt>:
    4694:	add	ip, pc, #0, 12
    4698:	add	ip, ip, #143360	; 0x23000
    469c:	ldr	pc, [ip, #2688]!	; 0xa80

000046a0 <rb_strlcpy@plt>:
    46a0:	add	ip, pc, #0, 12
    46a4:	add	ip, ip, #143360	; 0x23000
    46a8:	ldr	pc, [ip, #2680]!	; 0xa78

000046ac <rb_patricia_search_best2@plt>:
    46ac:	add	ip, pc, #0, 12
    46b0:	add	ip, ip, #143360	; 0x23000
    46b4:	ldr	pc, [ip, #2672]!	; 0xa70

000046b8 <SSL_CIPHER_get_name@plt>:
    46b8:	add	ip, pc, #0, 12
    46bc:	add	ip, ip, #143360	; 0x23000
    46c0:	ldr	pc, [ip, #2664]!	; 0xa68

000046c4 <posix_spawnattr_init@plt>:
    46c4:	add	ip, pc, #0, 12
    46c8:	add	ip, ip, #143360	; 0x23000
    46cc:	ldr	pc, [ip, #2656]!	; 0xa60

000046d0 <OpenSSL_version_num@plt>:
    46d0:	add	ip, pc, #0, 12
    46d4:	add	ip, ip, #143360	; 0x23000
    46d8:	ldr	pc, [ip, #2648]!	; 0xa58

000046dc <rb_dictionary_foreach_next@plt>:
    46dc:	add	ip, pc, #0, 12
    46e0:	add	ip, ip, #143360	; 0x23000
    46e4:	ldr	pc, [ip, #2640]!	; 0xa50

000046e8 <rb_kill@plt>:
    46e8:	add	ip, pc, #0, 12
    46ec:	add	ip, ip, #143360	; 0x23000
    46f0:	ldr	pc, [ip, #2632]!	; 0xa48

000046f4 <free@plt>:
    46f4:	add	ip, pc, #0, 12
    46f8:	add	ip, ip, #143360	; 0x23000
    46fc:	ldr	pc, [ip, #2624]!	; 0xa40

00004700 <sendmsg@plt>:
    4700:	add	ip, pc, #0, 12
    4704:	add	ip, ip, #143360	; 0x23000
    4708:	ldr	pc, [ip, #2616]!	; 0xa38

0000470c <read@plt>:
    470c:	add	ip, pc, #0, 12
    4710:	add	ip, ip, #143360	; 0x23000
    4714:	ldr	pc, [ip, #2608]!	; 0xa30

00004718 <rb_radixtree_elem_add@plt>:
    4718:	add	ip, pc, #0, 12
    471c:	add	ip, ip, #143360	; 0x23000
    4720:	ldr	pc, [ip, #2600]!	; 0xa28

00004724 <write@plt>:
    4724:	add	ip, pc, #0, 12
    4728:	add	ip, ip, #143360	; 0x23000
    472c:	ldr	pc, [ip, #2592]!	; 0xa20

00004730 <SSL_new@plt>:
    4730:	add	ip, pc, #0, 12
    4734:	add	ip, ip, #143360	; 0x23000
    4738:	ldr	pc, [ip, #2584]!	; 0xa18

0000473c <access@plt>:
    473c:	add	ip, pc, #0, 12
    4740:	add	ip, ip, #143360	; 0x23000
    4744:	ldr	pc, [ip, #2576]!	; 0xa10

00004748 <rb_lib_loop@plt>:
    4748:	add	ip, pc, #0, 12
    474c:	add	ip, ip, #143360	; 0x23000
    4750:	ldr	pc, [ip, #2568]!	; 0xa08

00004754 <timer_settime@plt>:
    4754:	add	ip, pc, #0, 12
    4758:	add	ip, ip, #143360	; 0x23000
    475c:	ldr	pc, [ip, #2560]!	; 0xa00

00004760 <gettimeofday@plt>:
    4760:	add	ip, pc, #0, 12
    4764:	add	ip, ip, #143360	; 0x23000
    4768:	ldr	pc, [ip, #2552]!	; 0x9f8

0000476c <accept@plt>:
    476c:	add	ip, pc, #0, 12
    4770:	add	ip, ip, #143360	; 0x23000
    4774:	ldr	pc, [ip, #2544]!	; 0x9f0

00004778 <SSL_read@plt>:
    4778:	add	ip, pc, #0, 12
    477c:	add	ip, ip, #143360	; 0x23000
    4780:	ldr	pc, [ip, #2536]!	; 0x9e8

00004784 <rb_read@plt>:
    4784:	add	ip, pc, #0, 12
    4788:	add	ip, ip, #143360	; 0x23000
    478c:	ldr	pc, [ip, #2528]!	; 0x9e0

00004790 <socket@plt>:
    4790:	add	ip, pc, #0, 12
    4794:	add	ip, ip, #143360	; 0x23000
    4798:	ldr	pc, [ip, #2520]!	; 0x9d8

0000479c <rb_linebuf_get@plt>:
    479c:	add	ip, pc, #0, 12
    47a0:	add	ip, ip, #143360	; 0x23000
    47a4:	ldr	pc, [ip, #2512]!	; 0x9d0

000047a8 <rb_radixtree_foreach_cur@plt>:
    47a8:	add	ip, pc, #0, 12
    47ac:	add	ip, ip, #143360	; 0x23000
    47b0:	ldr	pc, [ip, #2504]!	; 0x9c8

000047b4 <epoll_wait@plt>:
    47b4:	add	ip, pc, #0, 12
    47b8:	add	ip, ip, #143360	; 0x23000
    47bc:	ldr	pc, [ip, #2496]!	; 0x9c0

000047c0 <SSL_do_handshake@plt>:
    47c0:	add	ip, pc, #0, 12
    47c4:	add	ip, ip, #143360	; 0x23000
    47c8:	ldr	pc, [ip, #2488]!	; 0x9b8

000047cc <rb_linebuf_flush@plt>:
    47cc:	add	ip, pc, #0, 12
    47d0:	add	ip, ip, #143360	; 0x23000
    47d4:	ldr	pc, [ip, #2480]!	; 0x9b0

000047d8 <posix_spawn@plt>:
    47d8:	add	ip, pc, #0, 12
    47dc:	add	ip, ip, #143360	; 0x23000
    47e0:	ldr	pc, [ip, #2472]!	; 0x9a8

000047e4 <strlen@plt>:
    47e4:	add	ip, pc, #0, 12
    47e8:	add	ip, ip, #143360	; 0x23000
    47ec:	ldr	pc, [ip, #2464]!	; 0x9a0

000047f0 <rb_current_time@plt>:
    47f0:	add	ip, pc, #0, 12
    47f4:	add	ip, ip, #143360	; 0x23000
    47f8:	ldr	pc, [ip, #2456]!	; 0x998

000047fc <strtoul@plt>:
    47fc:	add	ip, pc, #0, 12
    4800:	add	ip, ip, #143360	; 0x23000
    4804:	ldr	pc, [ip, #2448]!	; 0x990

00004808 <memcpy@plt>:
    4808:	add	ip, pc, #0, 12
    480c:	add	ip, ip, #143360	; 0x23000
    4810:	ldr	pc, [ip, #2440]!	; 0x988

00004814 <PEM_read_X509@plt>:
    4814:	add	ip, pc, #0, 12
    4818:	add	ip, ip, #143360	; 0x23000
    481c:	ldr	pc, [ip, #2432]!	; 0x980

00004820 <posix_spawnattr_setflags@plt>:
    4820:	add	ip, pc, #0, 12
    4824:	add	ip, ip, #143360	; 0x23000
    4828:	ldr	pc, [ip, #2424]!	; 0x978

0000482c <__ctype_tolower_loc@plt>:
    482c:	add	ip, pc, #0, 12
    4830:	add	ip, ip, #143360	; 0x23000
    4834:	ldr	pc, [ip, #2416]!	; 0x970

00004838 <SSL_CTX_use_certificate_chain_file@plt>:
    4838:	add	ip, pc, #0, 12
    483c:	add	ip, ip, #143360	; 0x23000
    4840:	ldr	pc, [ip, #2408]!	; 0x968

00004844 <rb_free_rb_dlink_node@plt>:
    4844:	add	ip, pc, #0, 12
    4848:	add	ip, ip, #143360	; 0x23000
    484c:	ldr	pc, [ip, #2400]!	; 0x960

00004850 <SSL_CTX_set_options@plt>:
    4850:	add	ip, pc, #0, 12
    4854:	add	ip, ip, #143360	; 0x23000
    4858:	ldr	pc, [ip, #2392]!	; 0x958

0000485c <posix_spawnattr_destroy@plt>:
    485c:	add	ip, pc, #0, 12
    4860:	add	ip, ip, #143360	; 0x23000
    4864:	ldr	pc, [ip, #2384]!	; 0x950

00004868 <rb_close@plt>:
    4868:	add	ip, pc, #0, 12
    486c:	add	ip, ip, #143360	; 0x23000
    4870:	ldr	pc, [ip, #2376]!	; 0x948

00004874 <strtol@plt>:
    4874:	add	ip, pc, #0, 12
    4878:	add	ip, ip, #143360	; 0x23000
    487c:	ldr	pc, [ip, #2368]!	; 0x940

00004880 <sigaddset@plt>:
    4880:	add	ip, pc, #0, 12
    4884:	add	ip, ip, #143360	; 0x23000
    4888:	ldr	pc, [ip, #2360]!	; 0x938

0000488c <strcpy@plt>:
    488c:	add	ip, pc, #0, 12
    4890:	add	ip, ip, #143360	; 0x23000
    4894:	ldr	pc, [ip, #2352]!	; 0x930

00004898 <waitpid@plt>:
    4898:	add	ip, pc, #0, 12
    489c:	add	ip, ip, #143360	; 0x23000
    48a0:	ldr	pc, [ip, #2344]!	; 0x928

000048a4 <rb_run_one_event@plt>:
    48a4:	add	ip, pc, #0, 12
    48a8:	add	ip, ip, #143360	; 0x23000
    48ac:	ldr	pc, [ip, #2336]!	; 0x920

000048b0 <rb_patricia_search_exact@plt>:
    48b0:	add	ip, pc, #0, 12
    48b4:	add	ip, ip, #143360	; 0x23000
    48b8:	ldr	pc, [ip, #2328]!	; 0x918

000048bc <strncat@plt>:
    48bc:	add	ip, pc, #0, 12
    48c0:	add	ip, ip, #143360	; 0x23000
    48c4:	ldr	pc, [ip, #2320]!	; 0x910

000048c8 <rb_bh_free@plt>:
    48c8:	add	ip, pc, #0, 12
    48cc:	add	ip, ip, #143360	; 0x23000
    48d0:	ldr	pc, [ip, #2312]!	; 0x908

000048d4 <rb_init_rb_dlink_nodes@plt>:
    48d4:	add	ip, pc, #0, 12
    48d8:	add	ip, ip, #143360	; 0x23000
    48dc:	ldr	pc, [ip, #2304]!	; 0x900

000048e0 <raise@plt>:
    48e0:	add	ip, pc, #0, 12
    48e4:	add	ip, ip, #143360	; 0x23000
    48e8:	ldr	pc, [ip, #2296]!	; 0x8f8

000048ec <EVP_sha1@plt>:
    48ec:	add	ip, pc, #0, 12
    48f0:	add	ip, ip, #143360	; 0x23000
    48f4:	ldr	pc, [ip, #2288]!	; 0x8f0

000048f8 <rb_patricia_lookup@plt>:
    48f8:	add	ip, pc, #0, 12
    48fc:	add	ip, ip, #143360	; 0x23000
    4900:	ldr	pc, [ip, #2280]!	; 0x8e8

00004904 <shutdown@plt>:
    4904:	add	ip, pc, #0, 12
    4908:	add	ip, ip, #143360	; 0x23000
    490c:	ldr	pc, [ip, #2272]!	; 0x8e0

00004910 <bind@plt>:
    4910:	add	ip, pc, #0, 12
    4914:	add	ip, ip, #143360	; 0x23000
    4918:	ldr	pc, [ip, #2264]!	; 0x8d8

0000491c <rb_lib_log@plt>:
    491c:	add	ip, pc, #0, 12
    4920:	add	ip, ip, #143360	; 0x23000
    4924:	ldr	pc, [ip, #2256]!	; 0x8d0

00004928 <SSL_CTX_use_PrivateKey_file@plt>:
    4928:	add	ip, pc, #0, 12
    492c:	add	ip, ip, #143360	; 0x23000
    4930:	ldr	pc, [ip, #2248]!	; 0x8c8

00004934 <select@plt>:
    4934:	add	ip, pc, #0, 12
    4938:	add	ip, ip, #143360	; 0x23000
    493c:	ldr	pc, [ip, #2240]!	; 0x8c0

00004940 <close@plt>:
    4940:	add	ip, pc, #0, 12
    4944:	add	ip, ip, #143360	; 0x23000
    4948:	ldr	pc, [ip, #2232]!	; 0x8b8

0000494c <rb_inet_ntop@plt>:
    494c:	add	ip, pc, #0, 12
    4950:	add	ip, ip, #143360	; 0x23000
    4954:	ldr	pc, [ip, #2224]!	; 0x8b0

00004958 <rb_bh_alloc@plt>:
    4958:	add	ip, pc, #0, 12
    495c:	add	ip, ip, #143360	; 0x23000
    4960:	ldr	pc, [ip, #2216]!	; 0x8a8

00004964 <SSL_free@plt>:
    4964:	add	ip, pc, #0, 12
    4968:	add	ip, ip, #143360	; 0x23000
    496c:	ldr	pc, [ip, #2208]!	; 0x8a0

00004970 <rb_pipe@plt>:
    4970:	add	ip, pc, #0, 12
    4974:	add	ip, ip, #143360	; 0x23000
    4978:	ldr	pc, [ip, #2200]!	; 0x898

0000497c <strncasecmp@plt>:
    497c:	add	ip, pc, #0, 12
    4980:	add	ip, ip, #143360	; 0x23000
    4984:	ldr	pc, [ip, #2192]!	; 0x890

00004988 <rb_outofmemory@plt>:
    4988:	add	ip, pc, #0, 12
    498c:	add	ip, ip, #143360	; 0x23000
    4990:	ldr	pc, [ip, #2184]!	; 0x888

00004994 <rb_set_time@plt>:
    4994:	add	ip, pc, #0, 12
    4998:	add	ip, ip, #143360	; 0x23000
    499c:	ldr	pc, [ip, #2176]!	; 0x880

000049a0 <rb_dictionary_stats@plt>:
    49a0:	add	ip, pc, #0, 12
    49a4:	add	ip, ip, #143360	; 0x23000
    49a8:	ldr	pc, [ip, #2168]!	; 0x878

000049ac <malloc@plt>:
    49ac:	add	ip, pc, #0, 12
    49b0:	add	ip, ip, #143360	; 0x23000
    49b4:	ldr	pc, [ip, #2160]!	; 0x870

000049b8 <sigprocmask@plt>:
    49b8:	add	ip, pc, #0, 12
    49bc:	add	ip, ip, #143360	; 0x23000
    49c0:	ldr	pc, [ip, #2152]!	; 0x868

000049c4 <rb_event_run@plt>:
    49c4:	add	ip, pc, #0, 12
    49c8:	add	ip, ip, #143360	; 0x23000
    49cc:	ldr	pc, [ip, #2144]!	; 0x860

000049d0 <SSL_set_accept_state@plt>:
    49d0:	add	ip, pc, #0, 12
    49d4:	add	ip, ip, #143360	; 0x23000
    49d8:	ldr	pc, [ip, #2136]!	; 0x858

000049dc <rb_init_bh@plt>:
    49dc:	add	ip, pc, #0, 12
    49e0:	add	ip, ip, #143360	; 0x23000
    49e4:	ldr	pc, [ip, #2128]!	; 0x850

000049e8 <PEM_read_DHparams@plt>:
    49e8:	add	ip, pc, #0, 12
    49ec:	add	ip, ip, #143360	; 0x23000
    49f0:	ldr	pc, [ip, #2120]!	; 0x848

000049f4 <gmtime_r@plt>:
    49f4:	add	ip, pc, #0, 12
    49f8:	add	ip, ip, #143360	; 0x23000
    49fc:	ldr	pc, [ip, #2112]!	; 0x840

00004a00 <poll@plt>:
    4a00:	add	ip, pc, #0, 12
    4a04:	add	ip, ip, #143360	; 0x23000
    4a08:	ldr	pc, [ip, #2104]!	; 0x838

00004a0c <ASN1_item_digest@plt>:
    4a0c:	add	ip, pc, #0, 12
    4a10:	add	ip, ip, #143360	; 0x23000
    4a14:	ldr	pc, [ip, #2096]!	; 0x830

00004a18 <strnlen@plt>:
    4a18:	add	ip, pc, #0, 12
    4a1c:	add	ip, ip, #143360	; 0x23000
    4a20:	ldr	pc, [ip, #2088]!	; 0x828

00004a24 <SSL_get_peer_certificate@plt>:
    4a24:	add	ip, pc, #0, 12
    4a28:	add	ip, ip, #143360	; 0x23000
    4a2c:	ldr	pc, [ip, #2080]!	; 0x820

00004a30 <rb_dictionary_find@plt>:
    4a30:	add	ip, pc, #0, 12
    4a34:	add	ip, ip, #143360	; 0x23000
    4a38:	ldr	pc, [ip, #2072]!	; 0x818

00004a3c <rb_lib_init@plt>:
    4a3c:	add	ip, pc, #0, 12
    4a40:	add	ip, ip, #143360	; 0x23000
    4a44:	ldr	pc, [ip, #2064]!	; 0x810

00004a48 <SSL_get_verify_result@plt>:
    4a48:	add	ip, pc, #0, 12
    4a4c:	add	ip, ip, #143360	; 0x23000
    4a50:	ldr	pc, [ip, #2056]!	; 0x808

00004a54 <strtok_r@plt>:
    4a54:	add	ip, pc, #0, 12
    4a58:	add	ip, ip, #143360	; 0x23000
    4a5c:	ldr	pc, [ip, #2048]!	; 0x800

00004a60 <rb_lib_restart@plt>:
    4a60:	add	ip, pc, #0, 12
    4a64:	add	ip, ip, #143360	; 0x23000
    4a68:	ldr	pc, [ip, #2040]!	; 0x7f8

00004a6c <DH_free@plt>:
    4a6c:	add	ip, pc, #0, 12
    4a70:	add	ip, ip, #143360	; 0x23000
    4a74:	ldr	pc, [ip, #2032]!	; 0x7f0

00004a78 <timer_delete@plt>:
    4a78:	add	ip, pc, #0, 12
    4a7c:	add	ip, ip, #143360	; 0x23000
    4a80:	ldr	pc, [ip, #2024]!	; 0x7e8

00004a84 <rb_open@plt>:
    4a84:	add	ip, pc, #0, 12
    4a88:	add	ip, ip, #143360	; 0x23000
    4a8c:	ldr	pc, [ip, #2016]!	; 0x7e0

00004a90 <rb_get_sockerr@plt>:
    4a90:	add	ip, pc, #0, 12
    4a94:	add	ip, ip, #143360	; 0x23000
    4a98:	ldr	pc, [ip, #2008]!	; 0x7d8

00004a9c <send@plt>:
    4a9c:	add	ip, pc, #0, 12
    4aa0:	add	ip, ip, #143360	; 0x23000
    4aa4:	ldr	pc, [ip, #2000]!	; 0x7d0

00004aa8 <SSL_shutdown@plt>:
    4aa8:	add	ip, pc, #0, 12
    4aac:	add	ip, ip, #143360	; 0x23000
    4ab0:	ldr	pc, [ip, #1992]!	; 0x7c8

00004ab4 <rb_bh_create@plt>:
    4ab4:	add	ip, pc, #0, 12
    4ab8:	add	ip, ip, #143360	; 0x23000
    4abc:	ldr	pc, [ip, #1984]!	; 0x7c0

00004ac0 <dup2@plt>:
    4ac0:	add	ip, pc, #0, 12
    4ac4:	add	ip, ip, #143360	; 0x23000
    4ac8:	ldr	pc, [ip, #1976]!	; 0x7b8

00004acc <getpid@plt>:
    4acc:	add	ip, pc, #0, 12
    4ad0:	add	ip, ip, #143360	; 0x23000
    4ad4:	ldr	pc, [ip, #1968]!	; 0x7b0

00004ad8 <rb_writev@plt>:
    4ad8:	add	ip, pc, #0, 12
    4adc:	add	ip, ip, #143360	; 0x23000
    4ae0:	ldr	pc, [ip, #1960]!	; 0x7a8

00004ae4 <RAND_bytes@plt>:
    4ae4:	add	ip, pc, #0, 12
    4ae8:	add	ip, ip, #143360	; 0x23000
    4aec:	ldr	pc, [ip, #1952]!	; 0x7a0

00004af0 <rb_linebuf_newbuf@plt>:
    4af0:	add	ip, pc, #0, 12
    4af4:	add	ip, ip, #143360	; 0x23000
    4af8:	ldr	pc, [ip, #1944]!	; 0x798

00004afc <rb_fdlist_init@plt>:
    4afc:	add	ip, pc, #0, 12
    4b00:	add	ip, ip, #143360	; 0x23000
    4b04:	ldr	pc, [ip, #1936]!	; 0x790

00004b08 <rb_event_add@plt>:
    4b08:	add	ip, pc, #0, 12
    4b0c:	add	ip, ip, #143360	; 0x23000
    4b10:	ldr	pc, [ip, #1928]!	; 0x788

00004b14 <readlink@plt>:
    4b14:	add	ip, pc, #0, 12
    4b18:	add	ip, ip, #143360	; 0x23000
    4b1c:	ldr	pc, [ip, #1920]!	; 0x780

00004b20 <SSL_CTX_new@plt>:
    4b20:	add	ip, pc, #0, 12
    4b24:	add	ip, ip, #143360	; 0x23000
    4b28:	ldr	pc, [ip, #1912]!	; 0x778

00004b2c <rb_setup_fd@plt>:
    4b2c:	add	ip, pc, #0, 12
    4b30:	add	ip, ip, #143360	; 0x23000
    4b34:	ldr	pc, [ip, #1904]!	; 0x770

00004b38 <recvmsg@plt>:
    4b38:	add	ip, pc, #0, 12
    4b3c:	add	ip, ip, #143360	; 0x23000
    4b40:	ldr	pc, [ip, #1896]!	; 0x768

00004b44 <rand@plt>:
    4b44:	add	ip, pc, #0, 12
    4b48:	add	ip, ip, #143360	; 0x23000
    4b4c:	ldr	pc, [ip, #1888]!	; 0x760

00004b50 <rb_linebuf_init@plt>:
    4b50:	add	ip, pc, #0, 12
    4b54:	add	ip, ip, #143360	; 0x23000
    4b58:	ldr	pc, [ip, #1880]!	; 0x758

00004b5c <__fxstat@plt>:
    4b5c:	add	ip, pc, #0, 12
    4b60:	add	ip, ip, #143360	; 0x23000
    4b64:	ldr	pc, [ip, #1872]!	; 0x750

00004b68 <SSL_set_connect_state@plt>:
    4b68:	add	ip, pc, #0, 12
    4b6c:	add	ip, ip, #143360	; 0x23000
    4b70:	ldr	pc, [ip, #1864]!	; 0x748

00004b74 <rb_radixtree_elem_find@plt>:
    4b74:	add	ip, pc, #0, 12
    4b78:	add	ip, ip, #143360	; 0x23000
    4b7c:	ldr	pc, [ip, #1856]!	; 0x740

00004b80 <rb_make_rb_dlink_node@plt>:
    4b80:	add	ip, pc, #0, 12
    4b84:	add	ip, ip, #143360	; 0x23000
    4b88:	ldr	pc, [ip, #1848]!	; 0x738

00004b8c <rb_strlcat@plt>:
    4b8c:	add	ip, pc, #0, 12
    4b90:	add	ip, ip, #143360	; 0x23000
    4b94:	ldr	pc, [ip, #1840]!	; 0x730

00004b98 <rb_spawn_process@plt>:
    4b98:	add	ip, pc, #0, 12
    4b9c:	add	ip, ip, #143360	; 0x23000
    4ba0:	ldr	pc, [ip, #1832]!	; 0x728

00004ba4 <EVP_sha512@plt>:
    4ba4:	add	ip, pc, #0, 12
    4ba8:	add	ip, ip, #143360	; 0x23000
    4bac:	ldr	pc, [ip, #1824]!	; 0x720

00004bb0 <snprintf@plt>:
    4bb0:	add	ip, pc, #0, 12
    4bb4:	add	ip, ip, #143360	; 0x23000
    4bb8:	ldr	pc, [ip, #1816]!	; 0x718

00004bbc <RAND_status@plt>:
    4bbc:	add	ip, pc, #0, 12
    4bc0:	add	ip, ip, #143360	; 0x23000
    4bc4:	ldr	pc, [ip, #1808]!	; 0x710

00004bc8 <timerfd_create@plt>:
    4bc8:	add	ip, pc, #0, 12
    4bcc:	add	ip, ip, #143360	; 0x23000
    4bd0:	ldr	pc, [ip, #1800]!	; 0x708

00004bd4 <EVP_sha256@plt>:
    4bd4:	add	ip, pc, #0, 12
    4bd8:	add	ip, ip, #143360	; 0x23000
    4bdc:	ldr	pc, [ip, #1792]!	; 0x700

00004be0 <strcspn@plt>:
    4be0:	add	ip, pc, #0, 12
    4be4:	add	ip, ip, #143360	; 0x23000
    4be8:	ldr	pc, [ip, #1784]!	; 0x6f8

00004bec <rb_linebuf_put@plt>:
    4bec:	add	ip, pc, #0, 12
    4bf0:	add	ip, ip, #143360	; 0x23000
    4bf4:	ldr	pc, [ip, #1776]!	; 0x6f0

00004bf8 <rb_listen@plt>:
    4bf8:	add	ip, pc, #0, 12
    4bfc:	add	ip, ip, #143360	; 0x23000
    4c00:	ldr	pc, [ip, #1768]!	; 0x6e8

00004c04 <fcntl@plt>:
    4c04:	add	ip, pc, #0, 12
    4c08:	add	ip, ip, #143360	; 0x23000
    4c0c:	ldr	pc, [ip, #1760]!	; 0x6e0

00004c10 <strncmp@plt>:
    4c10:	add	ip, pc, #0, 12
    4c14:	add	ip, ip, #143360	; 0x23000
    4c18:	ldr	pc, [ip, #1752]!	; 0x6d8

00004c1c <kill@plt>:
    4c1c:	add	ip, pc, #0, 12
    4c20:	add	ip, ip, #143360	; 0x23000
    4c24:	ldr	pc, [ip, #1744]!	; 0x6d0

00004c28 <nanosleep@plt>:
    4c28:	add	ip, pc, #0, 12
    4c2c:	add	ip, ip, #143360	; 0x23000
    4c30:	ldr	pc, [ip, #1736]!	; 0x6c8

00004c34 <rb_event_next@plt>:
    4c34:	add	ip, pc, #0, 12
    4c38:	add	ip, ip, #143360	; 0x23000
    4c3c:	ldr	pc, [ip, #1728]!	; 0x6c0

00004c40 <realloc@plt>:
    4c40:	add	ip, pc, #0, 12
    4c44:	add	ip, ip, #143360	; 0x23000
    4c48:	ldr	pc, [ip, #1720]!	; 0x6b8

00004c4c <timerfd_settime@plt>:
    4c4c:	add	ip, pc, #0, 12
    4c50:	add	ip, ip, #143360	; 0x23000
    4c54:	ldr	pc, [ip, #1712]!	; 0x6b0

00004c58 <epoll_ctl@plt>:
    4c58:	add	ip, pc, #0, 12
    4c5c:	add	ip, ip, #143360	; 0x23000
    4c60:	ldr	pc, [ip, #1704]!	; 0x6a8

00004c64 <X509_free@plt>:
    4c64:	add	ip, pc, #0, 12
    4c68:	add	ip, ip, #143360	; 0x23000
    4c6c:	ldr	pc, [ip, #1696]!	; 0x6a0

00004c70 <readv@plt>:
    4c70:	add	ip, pc, #0, 12
    4c74:	add	ip, ip, #143360	; 0x23000
    4c78:	ldr	pc, [ip, #1688]!	; 0x698

00004c7c <getsockopt@plt>:
    4c7c:	add	ip, pc, #0, 12
    4c80:	add	ip, ip, #143360	; 0x23000
    4c84:	ldr	pc, [ip, #1680]!	; 0x690

00004c88 <pipe@plt>:
    4c88:	add	ip, pc, #0, 12
    4c8c:	add	ip, ip, #143360	; 0x23000
    4c90:	ldr	pc, [ip, #1672]!	; 0x688

00004c94 <OpenSSL_version@plt>:
    4c94:	add	ip, pc, #0, 12
    4c98:	add	ip, ip, #143360	; 0x23000
    4c9c:	ldr	pc, [ip, #1664]!	; 0x680

00004ca0 <setsockopt@plt>:
    4ca0:	add	ip, pc, #0, 12
    4ca4:	add	ip, ip, #143360	; 0x23000
    4ca8:	ldr	pc, [ip, #1656]!	; 0x678

00004cac <SSL_get_error@plt>:
    4cac:	add	ip, pc, #0, 12
    4cb0:	add	ip, ip, #143360	; 0x23000
    4cb4:	ldr	pc, [ip, #1648]!	; 0x670

00004cb8 <SSL_get_version@plt>:
    4cb8:	add	ip, pc, #0, 12
    4cbc:	add	ip, ip, #143360	; 0x23000
    4cc0:	ldr	pc, [ip, #1640]!	; 0x668

00004cc4 <rb_radixtree_delete@plt>:
    4cc4:	add	ip, pc, #0, 12
    4cc8:	add	ip, ip, #143360	; 0x23000
    4ccc:	ldr	pc, [ip, #1632]!	; 0x660

00004cd0 <setenv@plt>:
    4cd0:	add	ip, pc, #0, 12
    4cd4:	add	ip, ip, #143360	; 0x23000
    4cd8:	ldr	pc, [ip, #1624]!	; 0x658

00004cdc <strcmp@plt>:
    4cdc:	add	ip, pc, #0, 12
    4ce0:	add	ip, ip, #143360	; 0x23000
    4ce4:	ldr	pc, [ip, #1616]!	; 0x650

00004ce8 <__errno_location@plt>:
    4ce8:	add	ip, pc, #0, 12
    4cec:	add	ip, ip, #143360	; 0x23000
    4cf0:	ldr	pc, [ip, #1608]!	; 0x648

00004cf4 <__cxa_finalize@plt>:
    4cf4:	add	ip, pc, #0, 12
    4cf8:	add	ip, ip, #143360	; 0x23000
    4cfc:	ldr	pc, [ip, #1600]!	; 0x640

00004d00 <sprintf@plt>:
    4d00:	add	ip, pc, #0, 12
    4d04:	add	ip, ip, #143360	; 0x23000
    4d08:	ldr	pc, [ip, #1592]!	; 0x638

00004d0c <rb_bh_usage@plt>:
    4d0c:	add	ip, pc, #0, 12
    4d10:	add	ip, ip, #143360	; 0x23000
    4d14:	ldr	pc, [ip, #1584]!	; 0x630

00004d18 <SSL_CTX_set_verify@plt>:
    4d18:	add	ip, pc, #0, 12
    4d1c:	add	ip, ip, #143360	; 0x23000
    4d20:	ldr	pc, [ip, #1576]!	; 0x628

Disassembly of section .text:

00004d28 <call_weak_fn>:
    4d28:	ldr	r3, [pc, #20]	; 4d44 <call_weak_fn+0x1c>
    4d2c:	ldr	r2, [pc, #20]	; 4d48 <call_weak_fn+0x20>
    4d30:	add	r3, pc, r3
    4d34:	ldr	r2, [r3, r2]
    4d38:	cmp	r2, #0
    4d3c:	bxeq	lr
    4d40:	b	4508 <__gmon_start__@plt>
    4d44:	.word	0x000232c8
    4d48:	.word	0x0000035c

00004d4c <deregister_tm_clones>:
    4d4c:	ldr	r3, [pc, #52]	; 4d88 <deregister_tm_clones+0x3c>
    4d50:	ldr	r0, [pc, #52]	; 4d8c <deregister_tm_clones+0x40>
    4d54:	add	r3, pc, r3
    4d58:	add	r0, pc, r0
    4d5c:	add	r3, r3, #3
    4d60:	sub	r3, r3, r0
    4d64:	cmp	r3, #6
    4d68:	ldr	r3, [pc, #32]	; 4d90 <deregister_tm_clones+0x44>
    4d6c:	add	r3, pc, r3
    4d70:	bxls	lr
    4d74:	ldr	r2, [pc, #24]	; 4d94 <deregister_tm_clones+0x48>
    4d78:	ldr	r3, [r3, r2]
    4d7c:	cmp	r3, #0
    4d80:	bxeq	lr
    4d84:	bx	r3
    4d88:	.word	0x00023774
    4d8c:	.word	0x00023770
    4d90:	.word	0x0002328c
    4d94:	.word	0x0000037c

00004d98 <register_tm_clones>:
    4d98:	ldr	r1, [pc, #56]	; 4dd8 <register_tm_clones+0x40>
    4d9c:	ldr	r0, [pc, #56]	; 4ddc <register_tm_clones+0x44>
    4da0:	add	r1, pc, r1
    4da4:	add	r0, pc, r0
    4da8:	sub	r1, r1, r0
    4dac:	ldr	r3, [pc, #44]	; 4de0 <register_tm_clones+0x48>
    4db0:	asr	r1, r1, #2
    4db4:	add	r3, pc, r3
    4db8:	add	r1, r1, r1, lsr #31
    4dbc:	asrs	r1, r1, #1
    4dc0:	bxeq	lr
    4dc4:	ldr	r2, [pc, #24]	; 4de4 <register_tm_clones+0x4c>
    4dc8:	ldr	r3, [r3, r2]
    4dcc:	cmp	r3, #0
    4dd0:	bxeq	lr
    4dd4:	bx	r3
    4dd8:	.word	0x00023728
    4ddc:	.word	0x00023724
    4de0:	.word	0x00023244
    4de4:	.word	0x0000038c

00004de8 <__do_global_dtors_aux>:
    4de8:	ldr	r3, [pc, #76]	; 4e3c <__do_global_dtors_aux+0x54>
    4dec:	ldr	r2, [pc, #76]	; 4e40 <__do_global_dtors_aux+0x58>
    4df0:	add	r3, pc, r3
    4df4:	add	r2, pc, r2
    4df8:	ldrb	r3, [r3]
    4dfc:	cmp	r3, #0
    4e00:	bxne	lr
    4e04:	ldr	r3, [pc, #56]	; 4e44 <__do_global_dtors_aux+0x5c>
    4e08:	push	{r4, lr}
    4e0c:	ldr	r3, [r2, r3]
    4e10:	cmp	r3, #0
    4e14:	beq	4e24 <__do_global_dtors_aux+0x3c>
    4e18:	ldr	r3, [pc, #40]	; 4e48 <__do_global_dtors_aux+0x60>
    4e1c:	ldr	r0, [pc, r3]
    4e20:	bl	4cf4 <__cxa_finalize@plt>
    4e24:	bl	4d4c <deregister_tm_clones>
    4e28:	ldr	r3, [pc, #28]	; 4e4c <__do_global_dtors_aux+0x64>
    4e2c:	mov	r2, #1
    4e30:	add	r3, pc, r3
    4e34:	strb	r2, [r3]
    4e38:	pop	{r4, pc}
    4e3c:	.word	0x000236d8
    4e40:	.word	0x00023204
    4e44:	.word	0x0000041c
    4e48:	.word	0x00023600
    4e4c:	.word	0x00023698

00004e50 <frame_dummy>:
    4e50:	ldr	r0, [pc, #56]	; 4e90 <frame_dummy+0x40>
    4e54:	ldr	r3, [pc, #56]	; 4e94 <frame_dummy+0x44>
    4e58:	add	r0, pc, r0
    4e5c:	ldr	r2, [r0]
    4e60:	add	r3, pc, r3
    4e64:	cmp	r2, #0
    4e68:	bne	4e70 <frame_dummy+0x20>
    4e6c:	b	4d98 <register_tm_clones>
    4e70:	ldr	r2, [pc, #32]	; 4e98 <frame_dummy+0x48>
    4e74:	ldr	r3, [r3, r2]
    4e78:	cmp	r3, #0
    4e7c:	beq	4e6c <frame_dummy+0x1c>
    4e80:	push	{r4, lr}
    4e84:	blx	r3
    4e88:	pop	{r4, lr}
    4e8c:	b	4d98 <register_tm_clones>
    4e90:	.word	0x00022be0
    4e94:	.word	0x00023198
    4e98:	.word	0x00000360

00004e9c <rb_spawn_process>:
    4e9c:	push	{r4, r5, r6, r7, lr}
    4ea0:	sub	sp, sp, #356	; 0x164
    4ea4:	mov	r6, r0
    4ea8:	mov	r7, r1
    4eac:	ldr	r5, [pc, #112]	; 4f24 <rb_spawn_process+0x88>
    4eb0:	add	r5, pc, r5
    4eb4:	add	r4, sp, #12
    4eb8:	mov	r0, r4
    4ebc:	bl	46c4 <posix_spawnattr_init@plt>
    4ec0:	mov	r1, #64	; 0x40
    4ec4:	mov	r0, r4
    4ec8:	bl	4820 <posix_spawnattr_setflags@plt>
    4ecc:	ldr	r3, [pc, #84]	; 4f28 <rb_spawn_process+0x8c>
    4ed0:	ldr	r3, [r5, r3]
    4ed4:	ldr	r3, [r3]
    4ed8:	str	r3, [sp, #4]
    4edc:	str	r7, [sp]
    4ee0:	mov	r3, r4
    4ee4:	mov	r2, #0
    4ee8:	mov	r1, r6
    4eec:	add	r0, sp, #348	; 0x15c
    4ef0:	bl	47d8 <posix_spawn@plt>
    4ef4:	mov	r5, r0
    4ef8:	mov	r0, r4
    4efc:	bl	485c <posix_spawnattr_destroy@plt>
    4f00:	cmp	r5, #0
    4f04:	beq	4f18 <rb_spawn_process+0x7c>
    4f08:	bl	4ce8 <__errno_location@plt>
    4f0c:	str	r5, [r0]
    4f10:	mvn	r3, #0
    4f14:	str	r3, [sp, #348]	; 0x15c
    4f18:	ldr	r0, [sp, #348]	; 0x15c
    4f1c:	add	sp, sp, #356	; 0x164
    4f20:	pop	{r4, r5, r6, r7, pc}
    4f24:	.word	0x00023148
    4f28:	.word	0x000003a4

00004f2c <rb_gettimeofday>:
    4f2c:	push	{r4, lr}
    4f30:	bl	4760 <gettimeofday@plt>
    4f34:	pop	{r4, pc}

00004f38 <rb_sleep>:
    4f38:	push	{lr}		; (str lr, [sp, #-4]!)
    4f3c:	sub	sp, sp, #12
    4f40:	mov	r3, #1000	; 0x3e8
    4f44:	mul	r1, r3, r1
    4f48:	str	r1, [sp, #4]
    4f4c:	add	r3, sp, #8
    4f50:	str	r0, [r3, #-8]!
    4f54:	mov	r1, #0
    4f58:	mov	r0, r3
    4f5c:	bl	4c28 <nanosleep@plt>
    4f60:	add	sp, sp, #12
    4f64:	pop	{pc}		; (ldr pc, [sp], #4)

00004f68 <rb_strerror>:
    4f68:	push	{r4, lr}
    4f6c:	bl	43a0 <strerror@plt>
    4f70:	pop	{r4, pc}

00004f74 <rb_kill>:
    4f74:	push	{r4, lr}
    4f78:	bl	4c1c <kill@plt>
    4f7c:	pop	{r4, pc}

00004f80 <rb_setenv>:
    4f80:	push	{r4, lr}
    4f84:	bl	4cd0 <setenv@plt>
    4f88:	pop	{r4, pc}

00004f8c <rb_waitpid>:
    4f8c:	push	{r4, lr}
    4f90:	bl	4898 <waitpid@plt>
    4f94:	pop	{r4, pc}

00004f98 <rb_getpid>:
    4f98:	push	{r4, lr}
    4f9c:	bl	4acc <getpid@plt>
    4fa0:	pop	{r4, pc}

00004fa4 <rb_path_to_self>:
    4fa4:	push	{r4, lr}
    4fa8:	mov	r2, #4096	; 0x1000
    4fac:	ldr	r1, [pc, #40]	; 4fdc <rb_path_to_self+0x38>
    4fb0:	add	r1, pc, r1
    4fb4:	ldr	r0, [pc, #36]	; 4fe0 <rb_path_to_self+0x3c>
    4fb8:	add	r0, pc, r0
    4fbc:	bl	4b14 <readlink@plt>
    4fc0:	cmn	r0, #1
    4fc4:	beq	4fd4 <rb_path_to_self+0x30>
    4fc8:	ldr	r0, [pc, #20]	; 4fe4 <rb_path_to_self+0x40>
    4fcc:	add	r0, pc, r0
    4fd0:	pop	{r4, pc}
    4fd4:	mov	r0, #0
    4fd8:	pop	{r4, pc}
    4fdc:	.word	0x0002351c
    4fe0:	.word	0x00010670
    4fe4:	.word	0x00023500

00004fe8 <rb_init_netio_win32>:
    4fe8:	push	{r4, lr}
    4fec:	bl	4ce8 <__errno_location@plt>
    4ff0:	mov	r3, #38	; 0x26
    4ff4:	str	r3, [r0]
    4ff8:	mvn	r0, #0
    4ffc:	pop	{r4, pc}

00005000 <rb_setselect_win32>:
    5000:	push	{r4, lr}
    5004:	bl	4ce8 <__errno_location@plt>
    5008:	mov	r3, #38	; 0x26
    500c:	str	r3, [r0]
    5010:	pop	{r4, pc}

00005014 <rb_select_win32>:
    5014:	push	{r4, lr}
    5018:	bl	4ce8 <__errno_location@plt>
    501c:	mov	r3, #38	; 0x26
    5020:	str	r3, [r0]
    5024:	mvn	r0, #0
    5028:	pop	{r4, pc}

0000502c <rb_setup_fd_win32>:
    502c:	push	{r4, lr}
    5030:	bl	4ce8 <__errno_location@plt>
    5034:	mov	r3, #38	; 0x26
    5038:	str	r3, [r0]
    503c:	mvn	r0, #0
    5040:	pop	{r4, pc}
    5044:	andeq	r0, r0, r0

00005048 <rb_ascii_to_bin>:
    5048:	cmp	r0, #122	; 0x7a
    504c:	bhi	5090 <rb_ascii_to_bin+0x48>
    5050:	cmp	r0, #96	; 0x60
    5054:	bhi	5080 <rb_ascii_to_bin+0x38>
    5058:	cmp	r0, #90	; 0x5a
    505c:	bhi	5098 <rb_ascii_to_bin+0x50>
    5060:	cmp	r0, #64	; 0x40
    5064:	bhi	5088 <rb_ascii_to_bin+0x40>
    5068:	sub	r3, r0, #46	; 0x2e
    506c:	uxtb	r3, r3
    5070:	cmp	r3, #11
    5074:	bhi	50a0 <rb_ascii_to_bin+0x58>
    5078:	sub	r0, r0, #46	; 0x2e
    507c:	bx	lr
    5080:	sub	r0, r0, #59	; 0x3b
    5084:	bx	lr
    5088:	sub	r0, r0, #53	; 0x35
    508c:	bx	lr
    5090:	mov	r0, #0
    5094:	bx	lr
    5098:	mov	r0, #0
    509c:	bx	lr
    50a0:	mov	r0, #0
    50a4:	bx	lr

000050a8 <rb_des_init>:
    50a8:	ldr	r3, [pc, #1788]	; 57ac <rb_des_init+0x704>
    50ac:	add	r3, pc, r3
    50b0:	ldr	r3, [r3]
    50b4:	cmp	r3, #1
    50b8:	bxeq	lr
    50bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50c0:	sub	sp, sp, #92	; 0x5c
    50c4:	ldr	r7, [pc, #1764]	; 57b0 <rb_des_init+0x708>
    50c8:	add	r7, pc, r7
    50cc:	mov	r3, #0
    50d0:	str	r3, [r7, #4]
    50d4:	str	r3, [r7, #8]
    50d8:	str	r3, [r7, #12]
    50dc:	str	r3, [r7, #16]
    50e0:	add	r7, r7, #19
    50e4:	mov	r4, r7
    50e8:	mov	lr, r3
    50ec:	ldr	r5, [pc, #1728]	; 57b4 <rb_des_init+0x70c>
    50f0:	add	r5, pc, r5
    50f4:	b	5134 <rb_des_init+0x8c>
    50f8:	lsl	r1, r3, #27
    50fc:	and	r2, r3, #32
    5100:	orr	r2, r2, r1, lsr #28
    5104:	lsl	r1, r3, #4
    5108:	and	r1, r1, #16
    510c:	orr	r2, r2, r1
    5110:	ldrb	r2, [ip, r2]
    5114:	strb	r2, [r0, #1]!
    5118:	add	r3, r3, #1
    511c:	cmp	r3, #64	; 0x40
    5120:	bne	50f8 <rb_des_init+0x50>
    5124:	add	lr, lr, #1
    5128:	add	r4, r4, #64	; 0x40
    512c:	cmp	lr, #8
    5130:	beq	51a8 <rb_des_init+0x100>
    5134:	mov	r0, r4
    5138:	mov	r3, #0
    513c:	add	ip, r5, lr, lsl #6
    5140:	b	50f8 <rb_des_init+0x50>
    5144:	mov	lr, r5
    5148:	ldrb	ip, [r6, #1]!
    514c:	lsl	ip, ip, #4
    5150:	sxtb	ip, ip
    5154:	add	r0, r7, #64	; 0x40
    5158:	mov	r3, #0
    515c:	orr	r2, lr, r3
    5160:	add	r2, r4, r2
    5164:	ldrb	r1, [r0, #1]!
    5168:	orr	r1, ip, r1
    516c:	strb	r1, [r2, #532]	; 0x214
    5170:	add	r3, r3, #1
    5174:	cmp	r3, #64	; 0x40
    5178:	bne	515c <rb_des_init+0xb4>
    517c:	add	r5, r5, #64	; 0x40
    5180:	cmp	r5, #4096	; 0x1000
    5184:	bne	5144 <rb_des_init+0x9c>
    5188:	add	r8, r8, #1
    518c:	add	r7, r7, #128	; 0x80
    5190:	cmp	r8, #4
    5194:	beq	51b8 <rb_des_init+0x110>
    5198:	mov	r6, r7
    519c:	mov	r5, #0
    51a0:	add	r4, r9, r8, lsl #12
    51a4:	b	5144 <rb_des_init+0x9c>
    51a8:	mov	r8, #0
    51ac:	ldr	r9, [pc, #1540]	; 57b8 <rb_des_init+0x710>
    51b0:	add	r9, pc, r9
    51b4:	b	5198 <rb_des_init+0xf0>
    51b8:	ldr	r0, [pc, #1532]	; 57bc <rb_des_init+0x714>
    51bc:	add	r0, pc, r0
    51c0:	add	r0, r0, #512	; 0x200
    51c4:	sub	r0, r0, #1
    51c8:	ldr	r3, [pc, #1520]	; 57c0 <rb_des_init+0x718>
    51cc:	add	r3, pc, r3
    51d0:	add	ip, r3, #548	; 0x224
    51d4:	sub	ip, ip, #1
    51d8:	add	r3, r3, #612	; 0x264
    51dc:	sub	r1, r3, #1
    51e0:	mov	r2, #0
    51e4:	ldr	r4, [pc, #1496]	; 57c4 <rb_des_init+0x71c>
    51e8:	add	r4, pc, r4
    51ec:	mvn	lr, #0
    51f0:	ldrb	r3, [r0, #1]!
    51f4:	sub	r3, r3, #1
    51f8:	uxtb	r3, r3
    51fc:	strb	r3, [ip, #1]!
    5200:	add	r3, r4, r3
    5204:	strb	r2, [r3, #676]	; 0x2a4
    5208:	strb	lr, [r1, #1]!
    520c:	add	r2, r2, #1
    5210:	cmp	r2, #64	; 0x40
    5214:	bne	51f0 <rb_des_init+0x148>
    5218:	ldr	r0, [pc, #1448]	; 57c8 <rb_des_init+0x720>
    521c:	add	r0, pc, r0
    5220:	add	r0, r0, #576	; 0x240
    5224:	sub	r0, r0, #1
    5228:	ldr	r1, [pc, #1436]	; 57cc <rb_des_init+0x724>
    522c:	add	r1, pc, r1
    5230:	add	r1, r1, #740	; 0x2e4
    5234:	sub	r1, r1, #1
    5238:	mov	r3, #0
    523c:	ldr	lr, [pc, #1420]	; 57d0 <rb_des_init+0x728>
    5240:	add	lr, pc, lr
    5244:	mvn	ip, #0
    5248:	ldrb	r2, [r0, #1]!
    524c:	add	r2, lr, r2
    5250:	strb	r3, [r2, #611]	; 0x263
    5254:	strb	ip, [r1, #1]!
    5258:	add	r3, r3, #1
    525c:	cmp	r3, #56	; 0x38
    5260:	bne	5248 <rb_des_init+0x1a0>
    5264:	ldr	r2, [pc, #1384]	; 57d4 <rb_des_init+0x72c>
    5268:	add	r2, pc, r2
    526c:	add	r2, r2, #632	; 0x278
    5270:	sub	r2, r2, #1
    5274:	mov	r3, #0
    5278:	ldr	r0, [pc, #1368]	; 57d8 <rb_des_init+0x730>
    527c:	add	r0, pc, r0
    5280:	ldrb	r1, [r2, #1]!
    5284:	add	r1, r0, r1
    5288:	strb	r3, [r1, #739]	; 0x2e3
    528c:	add	r3, r3, #1
    5290:	cmp	r3, #48	; 0x30
    5294:	bne	5280 <rb_des_init+0x1d8>
    5298:	ldr	r3, [pc, #1340]	; 57dc <rb_des_init+0x734>
    529c:	add	r3, pc, r3
    52a0:	add	r2, r3, #740	; 0x2e4
    52a4:	str	r2, [sp, #28]
    52a8:	add	r3, r3, #796	; 0x31c
    52ac:	str	r3, [sp, #44]	; 0x2c
    52b0:	ldr	r3, [pc, #1320]	; 57e0 <rb_des_init+0x738>
    52b4:	add	r3, pc, r3
    52b8:	add	r3, r3, #804	; 0x324
    52bc:	str	r3, [sp, #48]	; 0x30
    52c0:	ldr	r3, [pc, #1308]	; 57e4 <rb_des_init+0x73c>
    52c4:	add	r3, pc, r3
    52c8:	add	r3, r3, #812	; 0x32c
    52cc:	str	r3, [sp, #52]	; 0x34
    52d0:	ldr	r3, [pc, #1296]	; 57e8 <rb_des_init+0x740>
    52d4:	add	r3, pc, r3
    52d8:	add	r3, r3, #820	; 0x334
    52dc:	str	r3, [sp, #56]	; 0x38
    52e0:	mov	r3, #0
    52e4:	str	r3, [sp, #4]
    52e8:	str	r3, [sp, #60]	; 0x3c
    52ec:	ldr	r3, [pc, #1272]	; 57ec <rb_des_init+0x744>
    52f0:	add	r3, pc, r3
    52f4:	str	r3, [sp, #64]	; 0x40
    52f8:	add	r3, r3, #680	; 0x2a8
    52fc:	str	r3, [sp, #32]
    5300:	ldr	r3, [pc, #1256]	; 57f0 <rb_des_init+0x748>
    5304:	add	r3, pc, r3
    5308:	str	r3, [sp, #68]	; 0x44
    530c:	add	r3, r3, #548	; 0x224
    5310:	str	r3, [sp, #36]	; 0x24
    5314:	ldr	r3, [pc, #1240]	; 57f4 <rb_des_init+0x74c>
    5318:	add	r3, pc, r3
    531c:	add	r3, r3, #828	; 0x33c
    5320:	str	r3, [sp, #72]	; 0x48
    5324:	ldr	r3, [pc, #1228]	; 57f8 <rb_des_init+0x750>
    5328:	add	r3, pc, r3
    532c:	str	r3, [sp, #76]	; 0x4c
    5330:	sub	r3, r3, #3248	; 0xcb0
    5334:	sub	r3, r3, #12
    5338:	str	r3, [sp, #80]	; 0x50
    533c:	ldr	r3, [pc, #1208]	; 57fc <rb_des_init+0x754>
    5340:	add	r3, pc, r3
    5344:	sub	r3, r3, #3248	; 0xcb0
    5348:	sub	r3, r3, #4
    534c:	str	r3, [sp, #84]	; 0x54
    5350:	b	565c <rb_des_init+0x5b4>
    5354:	ldr	r9, [sp, #16]
    5358:	add	r0, r9, r0, lsl #2
    535c:	ldr	r0, [r0, #560]	; 0x230
    5360:	ldr	r9, [r6]
    5364:	orr	r0, r9, r0
    5368:	str	r0, [r6]
    536c:	b	53c8 <rb_des_init+0x320>
    5370:	ldr	r9, [sp, #8]
    5374:	add	r0, r9, r0, lsl #2
    5378:	ldr	r0, [r0, #560]	; 0x230
    537c:	ldr	r9, [r4]
    5380:	orr	r0, r9, r0
    5384:	str	r0, [r4]
    5388:	add	r1, r1, #1
    538c:	add	r2, r2, #1
    5390:	cmp	r3, lr
    5394:	beq	53f0 <rb_des_init+0x348>
    5398:	ldrb	r0, [r3], #1
    539c:	tst	r0, ip
    53a0:	beq	5388 <rb_des_init+0x2e0>
    53a4:	ldrb	r0, [r2]
    53a8:	cmp	r0, #31
    53ac:	bgt	5354 <rb_des_init+0x2ac>
    53b0:	ldr	r9, [sp, #20]
    53b4:	add	r0, r9, r0, lsl #2
    53b8:	ldr	r0, [r0, #688]	; 0x2b0
    53bc:	ldr	r9, [r7]
    53c0:	orr	r0, r9, r0
    53c4:	str	r0, [r7]
    53c8:	ldrb	r0, [r1]
    53cc:	cmp	r0, #31
    53d0:	bgt	5370 <rb_des_init+0x2c8>
    53d4:	ldr	r9, [sp, #12]
    53d8:	add	r0, r9, r0, lsl #2
    53dc:	ldr	r0, [r0, #688]	; 0x2b0
    53e0:	ldr	r9, [r5]
    53e4:	orr	r0, r9, r0
    53e8:	str	r0, [r5]
    53ec:	b	5388 <rb_des_init+0x2e0>
    53f0:	ldr	r9, [sp, #24]
    53f4:	add	ip, ip, #1
    53f8:	ldr	r2, [sp]
    53fc:	add	r2, r2, #4
    5400:	str	r2, [sp]
    5404:	add	r9, r9, #4
    5408:	add	sl, sl, #4
    540c:	add	fp, fp, #4
    5410:	cmp	ip, #256	; 0x100
    5414:	beq	545c <rb_des_init+0x3b4>
    5418:	ldr	r3, [sp]
    541c:	mov	r7, r3
    5420:	str	r8, [r3]
    5424:	mov	r6, r9
    5428:	str	r8, [r9]
    542c:	mov	r5, sl
    5430:	str	r8, [sl]
    5434:	mov	r4, fp
    5438:	str	r8, [fp]
    543c:	ldr	r2, [sp, #36]	; 0x24
    5440:	ldr	r3, [sp, #4]
    5444:	add	r1, r2, r3
    5448:	ldr	r2, [sp, #40]	; 0x28
    544c:	add	r2, r2, r3
    5450:	ldr	r3, [sp, #32]
    5454:	str	r9, [sp, #24]
    5458:	b	5398 <rb_des_init+0x2f0>
    545c:	ldr	r1, [sp, #72]	; 0x48
    5460:	ldr	r2, [sp, #60]	; 0x3c
    5464:	add	r7, r1, r2
    5468:	ldr	r1, [sp, #80]	; 0x50
    546c:	add	r6, r1, r2
    5470:	sub	lr, r2, #4
    5474:	ldr	r2, [sp, #76]	; 0x4c
    5478:	add	r4, r2, #836	; 0x344
    547c:	add	r4, r4, lr
    5480:	ldr	r2, [sp, #84]	; 0x54
    5484:	add	lr, r2, lr
    5488:	mov	ip, #0
    548c:	ldr	r2, [pc, #876]	; 5800 <rb_des_init+0x758>
    5490:	add	r2, pc, r2
    5494:	add	r2, r2, #680	; 0x2a8
    5498:	str	r2, [sp, #16]
    549c:	ldr	r2, [pc, #864]	; 5804 <rb_des_init+0x75c>
    54a0:	add	r2, pc, r2
    54a4:	add	r2, r2, #612	; 0x264
    54a8:	str	r2, [sp, #20]
    54ac:	ldr	fp, [pc, #852]	; 5808 <rb_des_init+0x760>
    54b0:	add	fp, pc, fp
    54b4:	ldr	r2, [pc, #848]	; 580c <rb_des_init+0x764>
    54b8:	add	r2, pc, r2
    54bc:	str	r2, [sp, #12]
    54c0:	ldr	r2, [pc, #840]	; 5810 <rb_des_init+0x768>
    54c4:	add	r2, pc, r2
    54c8:	str	r2, [sp]
    54cc:	ldr	r2, [pc, #832]	; 5814 <rb_des_init+0x76c>
    54d0:	add	r2, pc, r2
    54d4:	str	r2, [sp, #8]
    54d8:	b	55d0 <rb_des_init+0x528>
    54dc:	add	r0, fp, r0, lsl #2
    54e0:	ldr	r0, [r0, #592]	; 0x250
    54e4:	ldr	r5, [r8]
    54e8:	orr	r0, r5, r0
    54ec:	str	r0, [r8]
    54f0:	add	r1, r1, #1
    54f4:	cmp	r9, r3
    54f8:	beq	5538 <rb_des_init+0x490>
    54fc:	ldrb	r0, [r9], #1
    5500:	tst	r0, ip
    5504:	beq	54f0 <rb_des_init+0x448>
    5508:	ldrb	r0, [r1]
    550c:	cmp	r0, #255	; 0xff
    5510:	beq	54f0 <rb_des_init+0x448>
    5514:	cmp	r0, #27
    5518:	bgt	54dc <rb_des_init+0x434>
    551c:	ldr	r5, [sp, #12]
    5520:	add	r0, r5, r0, lsl #2
    5524:	ldr	r0, [r0, #704]	; 0x2c0
    5528:	ldr	r5, [sl]
    552c:	orr	r0, r5, r0
    5530:	str	r0, [sl]
    5534:	b	54f0 <rb_des_init+0x448>
    5538:	add	r4, r4, #4
    553c:	mov	sl, r4
    5540:	mov	r1, #0
    5544:	str	r1, [r4]
    5548:	add	lr, lr, #4
    554c:	mov	r8, lr
    5550:	str	r1, [lr]
    5554:	ldr	r1, [sp, #28]
    5558:	b	5580 <rb_des_init+0x4d8>
    555c:	ldr	r5, [sp]
    5560:	add	r0, r5, r0, lsl #2
    5564:	ldr	r0, [r0, #624]	; 0x270
    5568:	ldr	r5, [r8]
    556c:	orr	r0, r5, r0
    5570:	str	r0, [r8]
    5574:	add	r1, r1, #1
    5578:	cmp	r2, r9
    557c:	beq	55bc <rb_des_init+0x514>
    5580:	ldrb	r0, [r2], #1
    5584:	tst	r0, ip
    5588:	beq	5574 <rb_des_init+0x4cc>
    558c:	ldrb	r0, [r1]
    5590:	cmp	r0, #255	; 0xff
    5594:	beq	5574 <rb_des_init+0x4cc>
    5598:	cmp	r0, #23
    559c:	bgt	555c <rb_des_init+0x4b4>
    55a0:	ldr	r5, [sp, #8]
    55a4:	add	r0, r5, r0, lsl #2
    55a8:	ldr	r0, [r0, #720]	; 0x2d0
    55ac:	ldr	r5, [sl]
    55b0:	orr	r0, r5, r0
    55b4:	str	r0, [sl]
    55b8:	b	5574 <rb_des_init+0x4cc>
    55bc:	add	ip, ip, #1
    55c0:	add	r7, r7, #4
    55c4:	add	r6, r6, #4
    55c8:	cmp	ip, #128	; 0x80
    55cc:	beq	5600 <rb_des_init+0x558>
    55d0:	mov	sl, r7
    55d4:	mov	r2, #0
    55d8:	str	r2, [r7]
    55dc:	mov	r8, r6
    55e0:	str	r2, [r6]
    55e4:	ldr	r2, [sp, #16]
    55e8:	add	r2, r2, #1
    55ec:	ldr	r1, [sp, #20]
    55f0:	ldr	r0, [sp, #4]
    55f4:	add	r1, r1, r0
    55f8:	mov	r9, r2
    55fc:	b	54fc <rb_des_init+0x454>
    5600:	ldr	r3, [sp, #28]
    5604:	add	r3, r3, #7
    5608:	str	r3, [sp, #28]
    560c:	ldr	r3, [sp, #44]	; 0x2c
    5610:	add	r3, r3, #1024	; 0x400
    5614:	str	r3, [sp, #44]	; 0x2c
    5618:	ldr	r3, [sp, #48]	; 0x30
    561c:	add	r3, r3, #1024	; 0x400
    5620:	str	r3, [sp, #48]	; 0x30
    5624:	ldr	r3, [sp, #52]	; 0x34
    5628:	add	r3, r3, #1024	; 0x400
    562c:	str	r3, [sp, #52]	; 0x34
    5630:	ldr	r3, [sp, #56]	; 0x38
    5634:	add	r3, r3, #1024	; 0x400
    5638:	str	r3, [sp, #56]	; 0x38
    563c:	ldr	r3, [sp, #60]	; 0x3c
    5640:	add	r3, r3, #512	; 0x200
    5644:	str	r3, [sp, #60]	; 0x3c
    5648:	ldr	r3, [sp, #4]
    564c:	add	r3, r3, #8
    5650:	str	r3, [sp, #4]
    5654:	cmp	r3, #64	; 0x40
    5658:	beq	56c0 <rb_des_init+0x618>
    565c:	ldr	fp, [sp, #56]	; 0x38
    5660:	ldr	sl, [sp, #52]	; 0x34
    5664:	ldr	r9, [sp, #48]	; 0x30
    5668:	ldr	r3, [sp, #44]	; 0x2c
    566c:	str	r3, [sp]
    5670:	mov	ip, #0
    5674:	mov	r8, ip
    5678:	ldr	r3, [sp, #68]	; 0x44
    567c:	add	r3, r3, #676	; 0x2a4
    5680:	str	r3, [sp, #40]	; 0x28
    5684:	ldr	r3, [sp, #64]	; 0x40
    5688:	add	lr, r3, #688	; 0x2b0
    568c:	ldr	r3, [pc, #388]	; 5818 <rb_des_init+0x770>
    5690:	add	r3, pc, r3
    5694:	str	r3, [sp, #8]
    5698:	ldr	r3, [pc, #380]	; 581c <rb_des_init+0x774>
    569c:	add	r3, pc, r3
    56a0:	str	r3, [sp, #12]
    56a4:	ldr	r3, [pc, #372]	; 5820 <rb_des_init+0x778>
    56a8:	add	r3, pc, r3
    56ac:	str	r3, [sp, #16]
    56b0:	ldr	r3, [pc, #364]	; 5824 <rb_des_init+0x77c>
    56b4:	add	r3, pc, r3
    56b8:	str	r3, [sp, #20]
    56bc:	b	5418 <rb_des_init+0x370>
    56c0:	ldr	r3, [pc, #352]	; 5828 <rb_des_init+0x780>
    56c4:	add	r3, pc, r3
    56c8:	add	r3, r3, #816	; 0x330
    56cc:	sub	r3, r3, #1
    56d0:	mov	r2, #0
    56d4:	ldr	r0, [pc, #336]	; 582c <rb_des_init+0x784>
    56d8:	add	r0, pc, r0
    56dc:	ldrb	r1, [r3, #1]!
    56e0:	add	r1, r0, r1
    56e4:	strb	r2, [r1, #843]	; 0x34b
    56e8:	add	r2, r2, #1
    56ec:	cmp	r2, #32
    56f0:	bne	56dc <rb_des_init+0x634>
    56f4:	mov	r5, #0
    56f8:	ldr	r8, [pc, #304]	; 5830 <rb_des_init+0x788>
    56fc:	add	r8, pc, r8
    5700:	add	r8, r8, #876	; 0x36c
    5704:	mov	r7, r5
    5708:	ldr	r6, [pc, #292]	; 5834 <rb_des_init+0x78c>
    570c:	add	r6, pc, r6
    5710:	add	r6, r6, #844	; 0x34c
    5714:	ldr	lr, [pc, #284]	; 5838 <rb_des_init+0x790>
    5718:	add	lr, pc, lr
    571c:	ldr	sl, [sp, #32]
    5720:	b	5788 <rb_des_init+0x6e0>
    5724:	add	r2, r2, #1
    5728:	cmp	r3, r9
    572c:	beq	5758 <rb_des_init+0x6b0>
    5730:	ldrb	r1, [r3], #1
    5734:	tst	r1, r0
    5738:	beq	5724 <rb_des_init+0x67c>
    573c:	ldrb	fp, [r2]
    5740:	add	fp, lr, fp, lsl #2
    5744:	ldr	r1, [ip]
    5748:	ldr	fp, [fp, #688]	; 0x2b0
    574c:	orr	r1, r1, fp
    5750:	str	r1, [ip]
    5754:	b	5724 <rb_des_init+0x67c>
    5758:	add	r0, r0, #1
    575c:	add	r4, r4, #4
    5760:	cmp	r0, #256	; 0x100
    5764:	beq	577c <rb_des_init+0x6d4>
    5768:	mov	ip, r4
    576c:	str	r7, [r4]
    5770:	add	r2, r6, r5
    5774:	mov	r3, sl
    5778:	b	5730 <rb_des_init+0x688>
    577c:	add	r5, r5, #8
    5780:	cmp	r5, #32
    5784:	beq	5794 <rb_des_init+0x6ec>
    5788:	add	r4, r8, r5, lsl #7
    578c:	mov	r0, #0
    5790:	b	5768 <rb_des_init+0x6c0>
    5794:	mov	r2, #1
    5798:	ldr	r3, [pc, #156]	; 583c <rb_des_init+0x794>
    579c:	add	r3, pc, r3
    57a0:	str	r2, [r3]
    57a4:	add	sp, sp, #92	; 0x5c
    57a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57ac:	.word	0x00024420
    57b0:	.word	0x00024404
    57b4:	.word	0x00010548
    57b8:	.word	0x0002431c
    57bc:	.word	0x0001047c
    57c0:	.word	0x000282f0
    57c4:	.word	0x000282d4
    57c8:	.word	0x0001041c
    57cc:	.word	0x00028290
    57d0:	.word	0x0002827c
    57d4:	.word	0x000103d0
    57d8:	.word	0x00028240
    57dc:	.word	0x00028220
    57e0:	.word	0x0002a200
    57e4:	.word	0x0002c1e8
    57e8:	.word	0x0002e1d0
    57ec:	.word	0x00010348
    57f0:	.word	0x000281b8
    57f4:	.word	0x00030184
    57f8:	.word	0x0003216c
    57fc:	.word	0x0003414c
    5800:	.word	0x000101a8
    5804:	.word	0x0002801c
    5808:	.word	0x00010188
    580c:	.word	0x00010180
    5810:	.word	0x00010174
    5814:	.word	0x00010168
    5818:	.word	0x0000ffa8
    581c:	.word	0x0000ff9c
    5820:	.word	0x0000ff90
    5824:	.word	0x0000ff84
    5828:	.word	0x0000ff74
    582c:	.word	0x00033db4
    5830:	.word	0x00033d90
    5834:	.word	0x00033d80
    5838:	.word	0x0000ff20
    583c:	.word	0x00023d30

00005840 <_crypt_to64>:
    5840:	cmp	r2, #1
    5844:	bxmi	lr
    5848:	add	r2, r0, r2
    584c:	ldr	ip, [pc, #32]	; 5874 <_crypt_to64+0x34>
    5850:	add	ip, pc, ip
    5854:	and	r3, r1, #63	; 0x3f
    5858:	add	r3, ip, r3
    585c:	ldrb	r3, [r3, #848]	; 0x350
    5860:	strb	r3, [r0], #1
    5864:	lsr	r1, r1, #6
    5868:	cmp	r2, r0
    586c:	bne	5854 <_crypt_to64+0x14>
    5870:	bx	lr
    5874:	.word	0x0000fde8

00005878 <rb_sha256_process_block>:
    5878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    587c:	sub	sp, sp, #308	; 0x134
    5880:	mov	r3, r2
    5884:	str	r2, [sp, #44]	; 0x2c
    5888:	lsr	r2, r1, #2
    588c:	str	r2, [sp, #32]
    5890:	ldr	r2, [r3]
    5894:	str	r2, [sp]
    5898:	ldr	r2, [r3, #4]
    589c:	str	r2, [sp, #4]
    58a0:	ldr	r2, [r3, #8]
    58a4:	str	r2, [sp, #8]
    58a8:	ldr	r2, [r3, #12]
    58ac:	str	r2, [sp, #12]
    58b0:	ldr	r2, [r3, #16]
    58b4:	str	r2, [sp, #16]
    58b8:	ldr	r2, [r3, #20]
    58bc:	str	r2, [sp, #20]
    58c0:	ldr	r2, [r3, #24]
    58c4:	str	r2, [sp, #24]
    58c8:	ldr	r2, [r3, #28]
    58cc:	str	r2, [sp, #28]
    58d0:	mov	r2, r3
    58d4:	ldr	r3, [r3, #32]
    58d8:	add	r3, r1, r3
    58dc:	str	r3, [r2, #32]
    58e0:	cmp	r1, r3
    58e4:	movhi	r3, r2
    58e8:	ldrhi	r3, [r3, #36]	; 0x24
    58ec:	addhi	r3, r3, #1
    58f0:	strhi	r3, [r2, #36]	; 0x24
    58f4:	ldr	r3, [sp, #32]
    58f8:	cmp	r3, #0
    58fc:	beq	5ad4 <rb_sha256_process_block+0x25c>
    5900:	sub	r3, r0, #4
    5904:	str	r3, [sp, #36]	; 0x24
    5908:	add	r3, sp, #240	; 0xf0
    590c:	str	r3, [sp, #40]	; 0x28
    5910:	ldr	r9, [pc, #520]	; 5b20 <rb_sha256_process_block+0x2a8>
    5914:	add	r9, pc, r9
    5918:	add	r9, r9, #916	; 0x394
    591c:	add	sl, sp, #48	; 0x30
    5920:	b	5a18 <rb_sha256_process_block+0x1a0>
    5924:	mov	r6, r7
    5928:	mov	r7, r0
    592c:	mov	r0, fp
    5930:	mov	r4, r5
    5934:	mov	r5, ip
    5938:	mov	ip, r3
    593c:	ror	r1, r0, #11
    5940:	eor	r1, r1, r0, ror #6
    5944:	eor	r1, r1, r0, ror #25
    5948:	ldr	r3, [r9, lr, lsl #2]
    594c:	ldr	fp, [sl, lr, lsl #2]
    5950:	add	r3, r3, fp
    5954:	add	r1, r1, r3
    5958:	bic	r3, r6, r0
    595c:	and	fp, r0, r7
    5960:	eor	r3, r3, fp
    5964:	add	r3, r1, r3
    5968:	add	r3, r3, r2
    596c:	ror	r2, ip, #13
    5970:	eor	r2, r2, ip, ror #2
    5974:	eor	r2, r2, ip, ror #22
    5978:	eor	r1, r4, r5
    597c:	and	r1, r1, ip
    5980:	and	fp, r5, r4
    5984:	eor	r1, r1, fp
    5988:	add	r2, r2, r1
    598c:	add	fp, r3, r8
    5990:	add	r3, r3, r2
    5994:	add	lr, lr, #1
    5998:	mov	r8, r4
    599c:	mov	r2, r6
    59a0:	cmp	lr, #64	; 0x40
    59a4:	bne	5924 <rb_sha256_process_block+0xac>
    59a8:	ldr	r2, [sp]
    59ac:	add	r3, r2, r3
    59b0:	str	r3, [sp]
    59b4:	ldr	r3, [sp, #4]
    59b8:	add	r3, r3, ip
    59bc:	str	r3, [sp, #4]
    59c0:	ldr	r3, [sp, #8]
    59c4:	add	r3, r3, r5
    59c8:	str	r3, [sp, #8]
    59cc:	ldr	r3, [sp, #12]
    59d0:	add	r3, r3, r4
    59d4:	str	r3, [sp, #12]
    59d8:	ldr	r3, [sp, #16]
    59dc:	add	r3, r3, fp
    59e0:	str	r3, [sp, #16]
    59e4:	ldr	r3, [sp, #20]
    59e8:	add	r3, r3, r0
    59ec:	str	r3, [sp, #20]
    59f0:	ldr	r3, [sp, #24]
    59f4:	add	r3, r3, r7
    59f8:	str	r3, [sp, #24]
    59fc:	ldr	r3, [sp, #28]
    5a00:	add	r3, r3, r6
    5a04:	str	r3, [sp, #28]
    5a08:	ldr	r3, [sp, #32]
    5a0c:	subs	r3, r3, #16
    5a10:	str	r3, [sp, #32]
    5a14:	beq	5ad4 <rb_sha256_process_block+0x25c>
    5a18:	add	r3, sp, #48	; 0x30
    5a1c:	ldr	r2, [sp, #36]	; 0x24
    5a20:	add	lr, r2, #64	; 0x40
    5a24:	mov	ip, r3
    5a28:	mov	r4, r2
    5a2c:	ldr	r2, [r4, #4]!
    5a30:	lsr	r1, r2, #24
    5a34:	orr	r1, r1, r2, lsl #24
    5a38:	lsl	r0, r2, #8
    5a3c:	and	r0, r0, #16711680	; 0xff0000
    5a40:	orr	r1, r1, r0
    5a44:	lsr	r2, r2, #8
    5a48:	and	r2, r2, #65280	; 0xff00
    5a4c:	orr	r2, r1, r2
    5a50:	str	r2, [ip], #4
    5a54:	cmp	lr, r4
    5a58:	bne	5a2c <rb_sha256_process_block+0x1b4>
    5a5c:	str	r4, [sp, #36]	; 0x24
    5a60:	ldr	ip, [sp, #40]	; 0x28
    5a64:	mov	lr, r3
    5a68:	ldr	r1, [r3, #56]	; 0x38
    5a6c:	ldr	r0, [r3, #4]!
    5a70:	ror	r2, r1, #19
    5a74:	eor	r2, r2, r1, ror #17
    5a78:	eor	r2, r2, r1, lsr #10
    5a7c:	ldr	r1, [lr, #36]	; 0x24
    5a80:	ldr	lr, [lr]
    5a84:	add	r1, r1, lr
    5a88:	add	r2, r2, r1
    5a8c:	ror	r1, r0, #18
    5a90:	eor	r1, r1, r0, ror #7
    5a94:	eor	r1, r1, r0, lsr #3
    5a98:	add	r2, r2, r1
    5a9c:	str	r2, [r3, #60]	; 0x3c
    5aa0:	cmp	r3, ip
    5aa4:	bne	5a64 <rb_sha256_process_block+0x1ec>
    5aa8:	str	ip, [sp, #40]	; 0x28
    5aac:	ldr	r2, [sp, #28]
    5ab0:	ldr	r6, [sp, #24]
    5ab4:	ldr	r7, [sp, #20]
    5ab8:	ldr	r0, [sp, #16]
    5abc:	ldr	r8, [sp, #12]
    5ac0:	ldr	r4, [sp, #8]
    5ac4:	ldr	r5, [sp, #4]
    5ac8:	ldr	ip, [sp]
    5acc:	mov	lr, #0
    5ad0:	b	593c <rb_sha256_process_block+0xc4>
    5ad4:	ldr	r3, [sp, #44]	; 0x2c
    5ad8:	ldr	r2, [sp]
    5adc:	str	r2, [r3]
    5ae0:	ldr	r2, [sp, #4]
    5ae4:	str	r2, [r3, #4]
    5ae8:	ldr	r2, [sp, #8]
    5aec:	str	r2, [r3, #8]
    5af0:	ldr	r2, [sp, #12]
    5af4:	str	r2, [r3, #12]
    5af8:	ldr	r2, [sp, #16]
    5afc:	str	r2, [r3, #16]
    5b00:	ldr	r2, [sp, #20]
    5b04:	str	r2, [r3, #20]
    5b08:	ldr	r2, [sp, #24]
    5b0c:	str	r2, [r3, #24]
    5b10:	ldr	r2, [sp, #28]
    5b14:	str	r2, [r3, #28]
    5b18:	add	sp, sp, #308	; 0x134
    5b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b20:	.word	0x0000fd24

00005b24 <rb_sha256_init_ctx>:
    5b24:	ldr	r3, [pc, #76]	; 5b78 <rb_sha256_init_ctx+0x54>
    5b28:	str	r3, [r0]
    5b2c:	ldr	r3, [pc, #72]	; 5b7c <rb_sha256_init_ctx+0x58>
    5b30:	str	r3, [r0, #4]
    5b34:	ldr	r3, [pc, #68]	; 5b80 <rb_sha256_init_ctx+0x5c>
    5b38:	str	r3, [r0, #8]
    5b3c:	ldr	r3, [pc, #64]	; 5b84 <rb_sha256_init_ctx+0x60>
    5b40:	str	r3, [r0, #12]
    5b44:	ldr	r3, [pc, #60]	; 5b88 <rb_sha256_init_ctx+0x64>
    5b48:	str	r3, [r0, #16]
    5b4c:	ldr	r3, [pc, #56]	; 5b8c <rb_sha256_init_ctx+0x68>
    5b50:	str	r3, [r0, #20]
    5b54:	ldr	r3, [pc, #52]	; 5b90 <rb_sha256_init_ctx+0x6c>
    5b58:	str	r3, [r0, #24]
    5b5c:	ldr	r3, [pc, #48]	; 5b94 <rb_sha256_init_ctx+0x70>
    5b60:	str	r3, [r0, #28]
    5b64:	mov	r3, #0
    5b68:	str	r3, [r0, #36]	; 0x24
    5b6c:	str	r3, [r0, #32]
    5b70:	str	r3, [r0, #40]	; 0x28
    5b74:	bx	lr
    5b78:	.word	0x6a09e667
    5b7c:	.word	0xbb67ae85
    5b80:	.word	0x3c6ef372
    5b84:	.word	0xa54ff53a
    5b88:	.word	0x510e527f
    5b8c:	.word	0x9b05688c
    5b90:	.word	0x1f83d9ab
    5b94:	.word	0x5be0cd19

00005b98 <rb_sha512_process_block>:
    5b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b9c:	sub	sp, sp, #948	; 0x3b4
    5ba0:	mov	ip, r0
    5ba4:	mov	lr, r2
    5ba8:	str	r2, [sp, #300]	; 0x12c
    5bac:	lsr	r3, r1, #3
    5bb0:	str	r3, [sp, #248]	; 0xf8
    5bb4:	ldrd	r2, [r2]
    5bb8:	strd	r2, [sp, #184]	; 0xb8
    5bbc:	ldrd	r2, [lr, #8]
    5bc0:	strd	r2, [sp, #192]	; 0xc0
    5bc4:	ldrd	r2, [lr, #16]
    5bc8:	strd	r2, [sp, #200]	; 0xc8
    5bcc:	ldrd	r2, [lr, #24]
    5bd0:	strd	r2, [sp, #208]	; 0xd0
    5bd4:	ldrd	r2, [lr, #32]
    5bd8:	strd	r2, [sp, #216]	; 0xd8
    5bdc:	ldrd	r2, [lr, #40]	; 0x28
    5be0:	strd	r2, [sp, #224]	; 0xe0
    5be4:	ldrd	r2, [lr, #48]	; 0x30
    5be8:	strd	r2, [sp, #232]	; 0xe8
    5bec:	ldrd	r2, [lr, #56]	; 0x38
    5bf0:	strd	r2, [sp, #240]	; 0xf0
    5bf4:	mov	r0, r1
    5bf8:	mov	r1, #0
    5bfc:	ldrd	r2, [lr, #64]	; 0x40
    5c00:	adds	r2, r2, r0
    5c04:	adc	r3, r3, r1
    5c08:	strd	r2, [lr, #64]	; 0x40
    5c0c:	cmp	r1, r3
    5c10:	cmpeq	r0, r2
    5c14:	bls	5c28 <rb_sha512_process_block+0x90>
    5c18:	ldrd	r2, [lr, #72]	; 0x48
    5c1c:	adds	r2, r2, #1
    5c20:	adc	r3, r3, #0
    5c24:	strd	r2, [lr, #72]	; 0x48
    5c28:	ldr	r3, [sp, #248]	; 0xf8
    5c2c:	cmp	r3, #0
    5c30:	beq	617c <rb_sha512_process_block+0x5e4>
    5c34:	sub	r3, ip, #8
    5c38:	str	r3, [sp, #252]	; 0xfc
    5c3c:	add	r3, sp, #816	; 0x330
    5c40:	str	r3, [sp, #288]	; 0x120
    5c44:	ldr	r3, [pc, #1408]	; 61cc <rb_sha512_process_block+0x634>
    5c48:	add	r3, pc, r3
    5c4c:	add	r3, r3, #1168	; 0x490
    5c50:	add	r3, r3, #8
    5c54:	str	r3, [sp, #292]	; 0x124
    5c58:	add	r3, sp, #304	; 0x130
    5c5c:	str	r3, [sp, #296]	; 0x128
    5c60:	b	5edc <rb_sha512_process_block+0x344>
    5c64:	ldrd	r2, [sp, #72]	; 0x48
    5c68:	strd	r2, [sp, #8]
    5c6c:	strd	r6, [sp, #72]	; 0x48
    5c70:	mov	r6, r0
    5c74:	mov	r7, r1
    5c78:	ldrd	r2, [sp, #64]	; 0x40
    5c7c:	strd	r2, [sp]
    5c80:	strd	r8, [sp, #64]	; 0x40
    5c84:	mov	r8, r4
    5c88:	mov	r9, r5
    5c8c:	lsr	r3, r6, #14
    5c90:	orr	r3, r3, r7, lsl #18
    5c94:	str	r3, [sp, #16]
    5c98:	lsr	r3, r7, #14
    5c9c:	orr	r3, r3, r6, lsl #18
    5ca0:	str	r3, [sp, #20]
    5ca4:	lsr	r3, r6, #18
    5ca8:	orr	r3, r3, r7, lsl #14
    5cac:	str	r3, [sp, #24]
    5cb0:	lsr	r3, r7, #18
    5cb4:	orr	r3, r3, r6, lsl #14
    5cb8:	str	r3, [sp, #28]
    5cbc:	ldrd	r4, [sp, #16]
    5cc0:	ldrd	r2, [sp, #24]
    5cc4:	eor	r4, r4, r2
    5cc8:	eor	r5, r5, r3
    5ccc:	lsl	r3, r7, #23
    5cd0:	orr	r3, r3, r6, lsr #9
    5cd4:	str	r3, [sp, #36]	; 0x24
    5cd8:	lsl	r3, r6, #23
    5cdc:	orr	r3, r3, r7, lsr #9
    5ce0:	str	r3, [sp, #32]
    5ce4:	ldrd	r2, [sp, #32]
    5ce8:	eor	r2, r2, r4
    5cec:	eor	r3, r3, r5
    5cf0:	mov	r4, r2
    5cf4:	mov	r5, r3
    5cf8:	ldrd	r2, [ip, lr]
    5cfc:	ldr	r1, [sp, #132]	; 0x84
    5d00:	ldrd	r0, [r1, ip]
    5d04:	adds	r0, r0, r2
    5d08:	adc	r1, r1, r3
    5d0c:	adds	r0, r0, r4
    5d10:	adc	r1, r1, r5
    5d14:	ldrd	r2, [sp, #72]	; 0x48
    5d18:	and	r2, r2, r6
    5d1c:	and	r3, r3, r7
    5d20:	ldrd	r4, [sp, #8]
    5d24:	bic	r4, r4, r6
    5d28:	bic	r5, r5, r7
    5d2c:	eor	r4, r4, r2
    5d30:	eor	r5, r5, r3
    5d34:	adds	r4, r4, r0
    5d38:	adc	r5, r5, r1
    5d3c:	ldrd	r2, [sp, #112]	; 0x70
    5d40:	adds	r2, r2, r4
    5d44:	adc	r3, r3, r5
    5d48:	strd	r2, [sp, #112]	; 0x70
    5d4c:	lsr	r3, r8, #28
    5d50:	orr	r3, r3, r9, lsl #4
    5d54:	str	r3, [sp, #40]	; 0x28
    5d58:	lsr	r3, r9, #28
    5d5c:	orr	r3, r3, r8, lsl #4
    5d60:	str	r3, [sp, #44]	; 0x2c
    5d64:	lsl	r3, r9, #30
    5d68:	orr	r3, r3, r8, lsr #2
    5d6c:	str	r3, [sp, #52]	; 0x34
    5d70:	lsl	r3, r8, #30
    5d74:	orr	r3, r3, r9, lsr #2
    5d78:	str	r3, [sp, #48]	; 0x30
    5d7c:	ldrd	r0, [sp, #40]	; 0x28
    5d80:	ldrd	sl, [sp, #48]	; 0x30
    5d84:	eor	r0, r0, sl
    5d88:	eor	r1, r1, fp
    5d8c:	lsl	r3, r9, #25
    5d90:	orr	r3, r3, r8, lsr #7
    5d94:	str	r3, [sp, #60]	; 0x3c
    5d98:	lsl	r3, r8, #25
    5d9c:	orr	r3, r3, r9, lsr #7
    5da0:	str	r3, [sp, #56]	; 0x38
    5da4:	ldrd	r4, [sp, #56]	; 0x38
    5da8:	eor	r4, r4, r0
    5dac:	eor	r5, r5, r1
    5db0:	mov	r0, r4
    5db4:	mov	r1, r5
    5db8:	ldrd	r4, [sp]
    5dbc:	mov	r2, r4
    5dc0:	mov	r3, r5
    5dc4:	ldrd	sl, [sp, #64]	; 0x40
    5dc8:	eor	r2, r2, sl
    5dcc:	eor	r3, r3, fp
    5dd0:	and	r2, r2, r8
    5dd4:	and	r3, r3, r9
    5dd8:	and	r4, r4, sl
    5ddc:	and	r5, r5, fp
    5de0:	eor	r4, r4, r2
    5de4:	eor	r5, r5, r3
    5de8:	adds	r4, r4, r0
    5dec:	adc	r5, r5, r1
    5df0:	ldrd	sl, [sp, #120]	; 0x78
    5df4:	ldrd	r2, [sp, #112]	; 0x70
    5df8:	adds	sl, sl, r2
    5dfc:	adc	fp, fp, r3
    5e00:	mov	r0, sl
    5e04:	mov	r1, fp
    5e08:	adds	r2, r2, r4
    5e0c:	adc	r3, r3, r5
    5e10:	mov	r4, r2
    5e14:	mov	r5, r3
    5e18:	add	ip, ip, #8
    5e1c:	ldrd	r2, [sp]
    5e20:	strd	r2, [sp, #120]	; 0x78
    5e24:	ldrd	r2, [sp, #8]
    5e28:	strd	r2, [sp, #112]	; 0x70
    5e2c:	cmp	ip, #640	; 0x280
    5e30:	bne	5c64 <rb_sha512_process_block+0xcc>
    5e34:	add	r3, sp, #256	; 0x100
    5e38:	ldrd	sl, [r3]
    5e3c:	ldrd	r2, [sp, #184]	; 0xb8
    5e40:	adds	r2, r2, r4
    5e44:	adc	r3, r3, r5
    5e48:	strd	r2, [sp, #184]	; 0xb8
    5e4c:	ldrd	r2, [sp, #192]	; 0xc0
    5e50:	adds	r2, r2, r8
    5e54:	adc	r3, r3, r9
    5e58:	strd	r2, [sp, #192]	; 0xc0
    5e5c:	ldrd	r2, [sp, #64]	; 0x40
    5e60:	ldrd	r4, [sp, #200]	; 0xc8
    5e64:	adds	r2, r2, r4
    5e68:	adc	r3, r3, r5
    5e6c:	strd	r2, [sp, #200]	; 0xc8
    5e70:	ldrd	r2, [sp]
    5e74:	ldrd	r4, [sp, #208]	; 0xd0
    5e78:	adds	r2, r2, r4
    5e7c:	adc	r3, r3, r5
    5e80:	strd	r2, [sp, #208]	; 0xd0
    5e84:	ldrd	r2, [sp, #216]	; 0xd8
    5e88:	adds	r2, r2, r0
    5e8c:	adc	r3, r3, r1
    5e90:	strd	r2, [sp, #216]	; 0xd8
    5e94:	ldrd	r2, [sp, #224]	; 0xe0
    5e98:	adds	r2, r2, r6
    5e9c:	adc	r3, r3, r7
    5ea0:	strd	r2, [sp, #224]	; 0xe0
    5ea4:	ldrd	r2, [sp, #72]	; 0x48
    5ea8:	ldrd	r0, [sp, #232]	; 0xe8
    5eac:	adds	r2, r2, r0
    5eb0:	adc	r3, r3, r1
    5eb4:	strd	r2, [sp, #232]	; 0xe8
    5eb8:	ldrd	r2, [sp, #8]
    5ebc:	ldrd	r0, [sp, #240]	; 0xf0
    5ec0:	adds	r2, r2, r0
    5ec4:	adc	r3, r3, r1
    5ec8:	strd	r2, [sp, #240]	; 0xf0
    5ecc:	ldr	r3, [sp, #248]	; 0xf8
    5ed0:	subs	r3, r3, #16
    5ed4:	str	r3, [sp, #248]	; 0xf8
    5ed8:	beq	617c <rb_sha512_process_block+0x5e4>
    5edc:	add	ip, sp, #304	; 0x130
    5ee0:	ldr	r3, [sp, #252]	; 0xfc
    5ee4:	add	r7, r3, #128	; 0x80
    5ee8:	str	r7, [sp, #8]
    5eec:	str	ip, [sp]
    5ef0:	mov	lr, ip
    5ef4:	mov	ip, r3
    5ef8:	strd	sl, [sp, #64]	; 0x40
    5efc:	ldr	r3, [ip, #8]!
    5f00:	ldr	r2, [ip, #4]
    5f04:	lsl	r1, r3, #24
    5f08:	str	r1, [sp, #156]	; 0x9c
    5f0c:	mov	r1, #0
    5f10:	str	r1, [sp, #152]	; 0x98
    5f14:	lsr	r1, r2, #24
    5f18:	str	r1, [sp, #160]	; 0xa0
    5f1c:	ldrd	r4, [sp, #152]	; 0x98
    5f20:	str	r4, [sp, #164]	; 0xa4
    5f24:	ldrd	sl, [sp, #160]	; 0xa0
    5f28:	orr	r0, r4, sl
    5f2c:	orr	r1, r5, fp
    5f30:	lsl	sl, r3, #8
    5f34:	str	sl, [sp, #172]	; 0xac
    5f38:	mov	sl, r4
    5f3c:	str	r4, [sp, #168]	; 0xa8
    5f40:	ldrd	r4, [sp, #168]	; 0xa8
    5f44:	mov	r4, #0
    5f48:	and	r5, r5, #16711680	; 0xff0000
    5f4c:	orr	r4, r4, r0
    5f50:	orr	r5, r5, r1
    5f54:	lsl	r1, r2, #24
    5f58:	orr	r1, r1, r3, lsr #8
    5f5c:	str	r1, [sp, #140]	; 0x8c
    5f60:	lsl	r1, r3, #24
    5f64:	str	r1, [sp, #136]	; 0x88
    5f68:	ldrd	r0, [sp, #136]	; 0x88
    5f6c:	mov	r0, #0
    5f70:	and	r1, r1, #65280	; 0xff00
    5f74:	orr	r4, r4, r0
    5f78:	orr	r5, r5, r1
    5f7c:	lsl	r1, r2, #8
    5f80:	orr	r1, r1, r3, lsr #24
    5f84:	str	r1, [sp, #148]	; 0x94
    5f88:	lsl	r1, r3, #8
    5f8c:	str	r1, [sp, #144]	; 0x90
    5f90:	ldrd	r0, [sp, #144]	; 0x90
    5f94:	mov	r0, #0
    5f98:	and	r1, r1, #255	; 0xff
    5f9c:	orr	r0, r0, r4
    5fa0:	orr	r1, r1, r5
    5fa4:	lsr	r6, r3, #8
    5fa8:	orr	r6, r6, r2, lsl #24
    5fac:	lsr	r7, r2, #8
    5fb0:	and	r4, r6, #-16777216	; 0xff000000
    5fb4:	mov	r5, #0
    5fb8:	orr	r0, r0, r4
    5fbc:	orr	r1, r1, r5
    5fc0:	lsr	r8, r3, #24
    5fc4:	orr	r8, r8, r2, lsl #8
    5fc8:	lsr	r9, r2, #24
    5fcc:	and	r4, r8, #16711680	; 0xff0000
    5fd0:	mov	r5, #0
    5fd4:	orr	r0, r0, r4
    5fd8:	orr	r1, r1, r5
    5fdc:	str	r7, [sp, #176]	; 0xb0
    5fe0:	str	sl, [sp, #180]	; 0xb4
    5fe4:	ldrd	r4, [sp, #176]	; 0xb0
    5fe8:	and	r4, r4, #65280	; 0xff00
    5fec:	mov	r5, #0
    5ff0:	orr	r0, r0, r4
    5ff4:	orr	r1, r1, r5
    5ff8:	ldr	r3, [sp]
    5ffc:	strd	r0, [r3], #8
    6000:	str	r3, [sp]
    6004:	ldr	r3, [sp, #8]
    6008:	cmp	r3, ip
    600c:	bne	5efc <rb_sha512_process_block+0x364>
    6010:	str	ip, [sp, #252]	; 0xfc
    6014:	mov	ip, lr
    6018:	add	r3, sp, #264	; 0x108
    601c:	strd	r6, [r3]
    6020:	ldr	r7, [sp, #288]	; 0x120
    6024:	add	r3, sp, #272	; 0x110
    6028:	strd	r8, [r3]
    602c:	str	ip, [sp]
    6030:	ldr	r0, [ip, #112]	; 0x70
    6034:	ldr	r1, [ip, #116]	; 0x74
    6038:	ldr	r6, [ip, #8]
    603c:	ldr	lr, [ip, #12]
    6040:	add	ip, ip, #8
    6044:	lsr	r3, r0, #19
    6048:	orr	r3, r3, r1, lsl #13
    604c:	str	r3, [sp, #80]	; 0x50
    6050:	lsr	r3, r1, #19
    6054:	orr	r3, r3, r0, lsl #13
    6058:	str	r3, [sp, #84]	; 0x54
    605c:	lsl	r3, r1, #3
    6060:	orr	r3, r3, r0, lsr #29
    6064:	str	r3, [sp, #92]	; 0x5c
    6068:	lsl	r3, r0, #3
    606c:	orr	r3, r3, r1, lsr #29
    6070:	str	r3, [sp, #88]	; 0x58
    6074:	ldrd	r2, [sp, #80]	; 0x50
    6078:	ldrd	r4, [sp, #88]	; 0x58
    607c:	eor	r2, r2, r4
    6080:	eor	r3, r3, r5
    6084:	lsr	sl, r0, #6
    6088:	orr	sl, sl, r1, lsl #26
    608c:	lsr	fp, r1, #6
    6090:	eor	r0, r2, sl
    6094:	eor	r1, r3, fp
    6098:	ldr	r4, [sp]
    609c:	ldrd	r2, [r4, #72]	; 0x48
    60a0:	ldrd	r4, [r4]
    60a4:	adds	r2, r2, r4
    60a8:	adc	r3, r3, r5
    60ac:	adds	r2, r2, r0
    60b0:	adc	r3, r3, r1
    60b4:	lsr	r1, r6, #1
    60b8:	orr	r1, r1, lr, lsl #31
    60bc:	str	r1, [sp, #96]	; 0x60
    60c0:	lsr	r1, lr, #1
    60c4:	orr	r1, r1, r6, lsl #31
    60c8:	str	r1, [sp, #100]	; 0x64
    60cc:	lsr	r1, r6, #8
    60d0:	orr	r1, r1, lr, lsl #24
    60d4:	str	r1, [sp, #104]	; 0x68
    60d8:	lsr	r1, lr, #8
    60dc:	orr	r1, r1, r6, lsl #24
    60e0:	str	r1, [sp, #108]	; 0x6c
    60e4:	ldrd	r0, [sp, #96]	; 0x60
    60e8:	ldrd	r4, [sp, #104]	; 0x68
    60ec:	eor	r0, r0, r4
    60f0:	eor	r1, r1, r5
    60f4:	lsr	r8, r6, #7
    60f8:	orr	r8, r8, lr, lsl #25
    60fc:	lsr	r9, lr, #7
    6100:	eor	r0, r0, r8
    6104:	eor	r1, r1, r9
    6108:	adds	r0, r0, r2
    610c:	adc	r1, r1, r3
    6110:	strd	r0, [ip, #120]	; 0x78
    6114:	cmp	r7, ip
    6118:	bne	602c <rb_sha512_process_block+0x494>
    611c:	str	r7, [sp, #288]	; 0x120
    6120:	add	r3, sp, #280	; 0x118
    6124:	strd	r8, [r3]
    6128:	ldrd	r2, [sp, #240]	; 0xf0
    612c:	strd	r2, [sp, #112]	; 0x70
    6130:	ldrd	r2, [sp, #232]	; 0xe8
    6134:	strd	r2, [sp, #8]
    6138:	ldrd	r2, [sp, #224]	; 0xe0
    613c:	strd	r2, [sp, #72]	; 0x48
    6140:	ldrd	r6, [sp, #216]	; 0xd8
    6144:	ldrd	r2, [sp, #208]	; 0xd0
    6148:	strd	r2, [sp, #120]	; 0x78
    614c:	ldrd	r2, [sp, #200]	; 0xc8
    6150:	strd	r2, [sp]
    6154:	ldrd	r2, [sp, #192]	; 0xc0
    6158:	strd	r2, [sp, #64]	; 0x40
    615c:	ldrd	r8, [sp, #184]	; 0xb8
    6160:	mov	ip, #0
    6164:	add	r3, sp, #256	; 0x100
    6168:	strd	sl, [r3]
    616c:	ldr	lr, [sp, #292]	; 0x124
    6170:	ldr	r3, [sp, #296]	; 0x128
    6174:	str	r3, [sp, #132]	; 0x84
    6178:	b	5c8c <rb_sha512_process_block+0xf4>
    617c:	ldr	r3, [sp, #300]	; 0x12c
    6180:	ldrd	r0, [sp, #184]	; 0xb8
    6184:	strd	r0, [r3]
    6188:	ldrd	r0, [sp, #192]	; 0xc0
    618c:	strd	r0, [r3, #8]
    6190:	ldrd	r0, [sp, #200]	; 0xc8
    6194:	strd	r0, [r3, #16]
    6198:	ldrd	r0, [sp, #208]	; 0xd0
    619c:	strd	r0, [r3, #24]
    61a0:	ldrd	r0, [sp, #216]	; 0xd8
    61a4:	strd	r0, [r3, #32]
    61a8:	ldrd	r0, [sp, #224]	; 0xe0
    61ac:	strd	r0, [r3, #40]	; 0x28
    61b0:	ldrd	r0, [sp, #232]	; 0xe8
    61b4:	strd	r0, [r3, #48]	; 0x30
    61b8:	mov	r1, r3
    61bc:	ldrd	r2, [sp, #240]	; 0xf0
    61c0:	strd	r2, [r1, #56]	; 0x38
    61c4:	add	sp, sp, #948	; 0x3b4
    61c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61cc:	.word	0x0000f9f0

000061d0 <rb_sha512_init_ctx>:
    61d0:	add	r3, pc, #112	; 0x70
    61d4:	ldrd	r2, [r3]
    61d8:	strd	r2, [r0]
    61dc:	add	r3, pc, #108	; 0x6c
    61e0:	ldrd	r2, [r3]
    61e4:	strd	r2, [r0, #8]
    61e8:	add	r3, pc, #104	; 0x68
    61ec:	ldrd	r2, [r3]
    61f0:	strd	r2, [r0, #16]
    61f4:	add	r3, pc, #100	; 0x64
    61f8:	ldrd	r2, [r3]
    61fc:	strd	r2, [r0, #24]
    6200:	add	r3, pc, #96	; 0x60
    6204:	ldrd	r2, [r3]
    6208:	strd	r2, [r0, #32]
    620c:	add	r3, pc, #92	; 0x5c
    6210:	ldrd	r2, [r3]
    6214:	strd	r2, [r0, #40]	; 0x28
    6218:	add	r3, pc, #88	; 0x58
    621c:	ldrd	r2, [r3]
    6220:	strd	r2, [r0, #48]	; 0x30
    6224:	add	r3, pc, #84	; 0x54
    6228:	ldrd	r2, [r3]
    622c:	strd	r2, [r0, #56]	; 0x38
    6230:	mov	r2, #0
    6234:	mov	r3, #0
    6238:	strd	r2, [r0, #72]	; 0x48
    623c:	strd	r2, [r0, #64]	; 0x40
    6240:	strd	r2, [r0, #80]	; 0x50
    6244:	bx	lr
    6248:	.word	0xf3bcc908
    624c:	.word	0x6a09e667
    6250:	.word	0x84caa73b
    6254:	.word	0xbb67ae85
    6258:	.word	0xfe94f82b
    625c:	.word	0x3c6ef372
    6260:	.word	0x5f1d36f1
    6264:	.word	0xa54ff53a
    6268:	.word	0xade682d1
    626c:	.word	0x510e527f
    6270:	.word	0x2b3e6c1f
    6274:	.word	0x9b05688c
    6278:	.word	0xfb41bd6b
    627c:	.word	0x1f83d9ab
    6280:	.word	0x137e2179
    6284:	.word	0x5be0cd19

00006288 <MD5Transform>:
    6288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    628c:	sub	sp, sp, #76	; 0x4c
    6290:	mov	ip, r0
    6294:	ldr	r7, [r0]
    6298:	ldr	lr, [r0, #4]
    629c:	ldr	r5, [r0, #8]
    62a0:	ldr	r6, [r0, #12]
    62a4:	mov	r4, r1
    62a8:	add	sl, sp, #8
    62ac:	add	r9, r1, #64	; 0x40
    62b0:	mov	r8, sl
    62b4:	ldr	r0, [r4]
    62b8:	ldr	r1, [r4, #4]
    62bc:	ldr	r2, [r4, #8]
    62c0:	ldr	r3, [r4, #12]
    62c4:	stmia	r8!, {r0, r1, r2, r3}
    62c8:	add	r4, r4, #16
    62cc:	mov	sl, r8
    62d0:	cmp	r4, r9
    62d4:	bne	62b0 <MD5Transform+0x28>
    62d8:	ldr	r3, [pc, #2240]	; 6ba0 <MD5Transform+0x918>
    62dc:	ldr	r2, [sp, #8]
    62e0:	add	r3, r2, r3
    62e4:	add	r2, r3, r7
    62e8:	eor	r3, r5, r6
    62ec:	and	r3, r3, lr
    62f0:	eor	r3, r3, r6
    62f4:	add	r3, r3, r2
    62f8:	add	r3, lr, r3, ror #25
    62fc:	ldr	r1, [pc, #2208]	; 6ba4 <MD5Transform+0x91c>
    6300:	ldr	r2, [sp, #12]
    6304:	add	r1, r2, r1
    6308:	add	r2, r1, r6
    630c:	eor	r1, lr, r5
    6310:	and	r1, r1, r3
    6314:	eor	r1, r1, r5
    6318:	add	r1, r1, r2
    631c:	add	r1, r3, r1, ror #20
    6320:	ldr	r0, [pc, #2176]	; 6ba8 <MD5Transform+0x920>
    6324:	ldr	r2, [sp, #16]
    6328:	add	r0, r2, r0
    632c:	add	r4, r0, r5
    6330:	eor	r0, lr, r3
    6334:	and	r0, r0, r1
    6338:	eor	r0, r0, lr
    633c:	add	r0, r0, r4
    6340:	add	r0, r1, r0, ror #15
    6344:	ldr	r2, [pc, #2144]	; 6bac <MD5Transform+0x924>
    6348:	ldr	r4, [sp, #20]
    634c:	add	r2, r4, r2
    6350:	add	r4, r2, lr
    6354:	eor	r2, r3, r1
    6358:	and	r2, r2, r0
    635c:	eor	r2, r2, r3
    6360:	add	r2, r2, r4
    6364:	add	r2, r0, r2, ror #10
    6368:	ldr	r4, [pc, #2112]	; 6bb0 <MD5Transform+0x928>
    636c:	ldr	r8, [sp, #24]
    6370:	add	r4, r8, r4
    6374:	add	r4, r4, r3
    6378:	eor	r3, r1, r0
    637c:	and	r3, r3, r2
    6380:	eor	r3, r3, r1
    6384:	add	r3, r3, r4
    6388:	add	r3, r2, r3, ror #25
    638c:	ldr	r4, [pc, #2080]	; 6bb4 <MD5Transform+0x92c>
    6390:	ldr	r8, [sp, #28]
    6394:	add	r4, r8, r4
    6398:	add	r4, r4, r1
    639c:	eor	r1, r0, r2
    63a0:	and	r1, r1, r3
    63a4:	eor	r1, r1, r0
    63a8:	add	r1, r1, r4
    63ac:	add	r1, r3, r1, ror #20
    63b0:	ldr	r4, [pc, #2048]	; 6bb8 <MD5Transform+0x930>
    63b4:	ldr	r8, [sp, #32]
    63b8:	add	r4, r8, r4
    63bc:	add	r0, r4, r0
    63c0:	eor	r4, r2, r3
    63c4:	and	r4, r4, r1
    63c8:	eor	r4, r4, r2
    63cc:	add	r4, r4, r0
    63d0:	add	r4, r1, r4, ror #15
    63d4:	ldr	sl, [sp, #36]	; 0x24
    63d8:	ldr	r0, [pc, #2012]	; 6bbc <MD5Transform+0x934>
    63dc:	add	r0, sl, r0
    63e0:	add	r0, r0, r2
    63e4:	eor	r2, r3, r1
    63e8:	and	r2, r2, r4
    63ec:	eor	r2, r2, r3
    63f0:	add	r2, r2, r0
    63f4:	add	r2, r4, r2, ror #10
    63f8:	ldr	r0, [pc, #1984]	; 6bc0 <MD5Transform+0x938>
    63fc:	ldr	r8, [sp, #40]	; 0x28
    6400:	add	r0, r8, r0
    6404:	add	r0, r0, r3
    6408:	eor	r3, r1, r4
    640c:	and	r3, r3, r2
    6410:	eor	r3, r3, r1
    6414:	add	r3, r3, r0
    6418:	add	r3, r2, r3, ror #25
    641c:	ldr	r0, [pc, #1952]	; 6bc4 <MD5Transform+0x93c>
    6420:	ldr	r8, [sp, #44]	; 0x2c
    6424:	add	r0, r8, r0
    6428:	add	r0, r0, r1
    642c:	eor	r1, r4, r2
    6430:	and	r1, r1, r3
    6434:	eor	r1, r1, r4
    6438:	add	r1, r1, r0
    643c:	add	r1, r3, r1, ror #20
    6440:	ldr	r0, [sp, #48]	; 0x30
    6444:	sub	r0, r0, #41984	; 0xa400
    6448:	sub	r0, r0, #79	; 0x4f
    644c:	add	r4, r0, r4
    6450:	eor	r0, r2, r3
    6454:	and	r0, r0, r1
    6458:	eor	r0, r0, r2
    645c:	add	r0, r0, r4
    6460:	add	r0, r1, r0, ror #15
    6464:	ldr	r4, [pc, #1884]	; 6bc8 <MD5Transform+0x940>
    6468:	ldr	r8, [sp, #52]	; 0x34
    646c:	add	r4, r8, r4
    6470:	add	r4, r4, r2
    6474:	eor	r2, r3, r1
    6478:	and	r2, r2, r0
    647c:	eor	r2, r2, r3
    6480:	add	r2, r2, r4
    6484:	add	r2, r0, r2, ror #10
    6488:	ldr	r8, [sp, #56]	; 0x38
    648c:	ldr	r4, [pc, #1848]	; 6bcc <MD5Transform+0x944>
    6490:	add	r4, r8, r4
    6494:	add	r4, r4, r3
    6498:	eor	r3, r1, r0
    649c:	and	r3, r3, r2
    64a0:	eor	r3, r3, r1
    64a4:	add	r3, r3, r4
    64a8:	add	r3, r2, r3, ror #25
    64ac:	ldr	r4, [pc, #1820]	; 6bd0 <MD5Transform+0x948>
    64b0:	ldr	r9, [sp, #60]	; 0x3c
    64b4:	add	r4, r9, r4
    64b8:	add	r4, r4, r1
    64bc:	eor	r1, r0, r2
    64c0:	and	r1, r1, r3
    64c4:	eor	r1, r1, r0
    64c8:	add	r1, r1, r4
    64cc:	add	r1, r3, r1, ror #20
    64d0:	ldr	r9, [sp, #64]	; 0x40
    64d4:	ldr	r4, [pc, #1784]	; 6bd4 <MD5Transform+0x94c>
    64d8:	add	r4, r9, r4
    64dc:	add	r4, r4, r0
    64e0:	eor	r0, r2, r3
    64e4:	and	r0, r0, r1
    64e8:	eor	r0, r0, r2
    64ec:	add	r0, r0, r4
    64f0:	add	r0, r1, r0, ror #15
    64f4:	ldr	r4, [pc, #1756]	; 6bd8 <MD5Transform+0x950>
    64f8:	ldr	fp, [sp, #68]	; 0x44
    64fc:	add	r4, fp, r4
    6500:	add	r4, r4, r2
    6504:	eor	r2, r3, r1
    6508:	and	r2, r2, r0
    650c:	eor	r2, r2, r3
    6510:	add	r2, r2, r4
    6514:	add	r2, r0, r2, ror #10
    6518:	ldr	r4, [pc, #1724]	; 6bdc <MD5Transform+0x954>
    651c:	ldr	fp, [sp, #12]
    6520:	add	r4, fp, r4
    6524:	add	r4, r4, r3
    6528:	eor	r3, r0, r2
    652c:	and	r3, r3, r1
    6530:	eor	r3, r3, r0
    6534:	add	r3, r3, r4
    6538:	add	r3, r2, r3, ror #27
    653c:	ldr	r4, [pc, #1692]	; 6be0 <MD5Transform+0x958>
    6540:	ldr	fp, [sp, #32]
    6544:	add	r4, fp, r4
    6548:	add	r4, r4, r1
    654c:	eor	r1, r2, r3
    6550:	and	r1, r1, r0
    6554:	eor	r1, r1, r2
    6558:	add	r1, r1, r4
    655c:	add	r1, r3, r1, ror #23
    6560:	ldr	r4, [pc, #1660]	; 6be4 <MD5Transform+0x95c>
    6564:	ldr	fp, [sp, #52]	; 0x34
    6568:	add	r4, fp, r4
    656c:	add	r4, r4, r0
    6570:	eor	r0, r3, r1
    6574:	and	r0, r0, r2
    6578:	eor	r0, r0, r3
    657c:	add	r0, r0, r4
    6580:	add	r0, r1, r0, ror #18
    6584:	ldr	r4, [pc, #1628]	; 6be8 <MD5Transform+0x960>
    6588:	ldr	fp, [sp, #8]
    658c:	add	r4, fp, r4
    6590:	add	r4, r4, r2
    6594:	eor	r2, r1, r0
    6598:	and	r2, r2, r3
    659c:	eor	r2, r2, r1
    65a0:	add	r2, r2, r4
    65a4:	add	r2, r0, r2, ror #12
    65a8:	ldr	r4, [pc, #1596]	; 6bec <MD5Transform+0x964>
    65ac:	ldr	fp, [sp, #28]
    65b0:	add	r4, fp, r4
    65b4:	add	r4, r4, r3
    65b8:	eor	r3, r0, r2
    65bc:	and	r3, r3, r1
    65c0:	eor	r3, r3, r0
    65c4:	add	r3, r3, r4
    65c8:	add	r3, r2, r3, ror #27
    65cc:	ldr	r4, [pc, #1564]	; 6bf0 <MD5Transform+0x968>
    65d0:	ldr	fp, [sp, #48]	; 0x30
    65d4:	add	r4, fp, r4
    65d8:	add	r4, r4, r1
    65dc:	eor	r1, r2, r3
    65e0:	and	r1, r1, r0
    65e4:	eor	r1, r1, r2
    65e8:	add	r1, r1, r4
    65ec:	add	r1, r3, r1, ror #23
    65f0:	ldr	r4, [pc, #1532]	; 6bf4 <MD5Transform+0x96c>
    65f4:	ldr	fp, [sp, #68]	; 0x44
    65f8:	add	r4, fp, r4
    65fc:	add	r4, r4, r0
    6600:	eor	r0, r3, r1
    6604:	and	r0, r0, r2
    6608:	eor	r0, r0, r3
    660c:	add	r0, r0, r4
    6610:	add	r0, r1, r0, ror #18
    6614:	ldr	r4, [pc, #1500]	; 6bf8 <MD5Transform+0x970>
    6618:	ldr	fp, [sp, #24]
    661c:	add	r4, fp, r4
    6620:	add	r4, r4, r2
    6624:	eor	r2, r1, r0
    6628:	and	r2, r2, r3
    662c:	eor	r2, r2, r1
    6630:	add	r2, r2, r4
    6634:	add	r2, r0, r2, ror #12
    6638:	ldr	r4, [pc, #1468]	; 6bfc <MD5Transform+0x974>
    663c:	ldr	fp, [sp, #44]	; 0x2c
    6640:	add	r4, fp, r4
    6644:	add	r4, r4, r3
    6648:	eor	r3, r0, r2
    664c:	and	r3, r3, r1
    6650:	eor	r3, r3, r0
    6654:	add	r3, r3, r4
    6658:	add	r3, r2, r3, ror #27
    665c:	ldr	r4, [pc, #1436]	; 6c00 <MD5Transform+0x978>
    6660:	add	r4, r9, r4
    6664:	add	r4, r4, r1
    6668:	eor	r1, r2, r3
    666c:	and	r1, r1, r0
    6670:	eor	r1, r1, r2
    6674:	add	r1, r1, r4
    6678:	add	r1, r3, r1, ror #23
    667c:	ldr	r4, [pc, #1408]	; 6c04 <MD5Transform+0x97c>
    6680:	ldr	fp, [sp, #20]
    6684:	add	r4, fp, r4
    6688:	add	r0, r4, r0
    668c:	eor	r4, r3, r1
    6690:	and	r4, r4, r2
    6694:	eor	r4, r4, r3
    6698:	add	r0, r4, r0
    669c:	add	r0, r1, r0, ror #18
    66a0:	ldr	r4, [pc, #1376]	; 6c08 <MD5Transform+0x980>
    66a4:	ldr	fp, [sp, #40]	; 0x28
    66a8:	add	r4, fp, r4
    66ac:	add	r2, r4, r2
    66b0:	eor	r4, r1, r0
    66b4:	and	r4, r4, r3
    66b8:	eor	r4, r4, r1
    66bc:	add	r2, r4, r2
    66c0:	add	r2, r0, r2, ror #12
    66c4:	ldr	r4, [pc, #1344]	; 6c0c <MD5Transform+0x984>
    66c8:	ldr	fp, [sp, #60]	; 0x3c
    66cc:	add	r4, fp, r4
    66d0:	add	r3, r4, r3
    66d4:	eor	r4, r0, r2
    66d8:	and	r4, r4, r1
    66dc:	eor	r4, r4, r0
    66e0:	add	r3, r4, r3
    66e4:	add	r3, r2, r3, ror #27
    66e8:	ldr	r4, [pc, #1312]	; 6c10 <MD5Transform+0x988>
    66ec:	ldr	fp, [sp, #16]
    66f0:	add	r4, fp, r4
    66f4:	add	r1, r4, r1
    66f8:	eor	r4, r2, r3
    66fc:	and	r4, r4, r0
    6700:	eor	r4, r4, r2
    6704:	add	r1, r4, r1
    6708:	add	r1, r3, r1, ror #23
    670c:	ldr	r4, [pc, #1280]	; 6c14 <MD5Transform+0x98c>
    6710:	add	r4, sl, r4
    6714:	add	r0, r4, r0
    6718:	eor	r4, r3, r1
    671c:	and	r4, r4, r2
    6720:	eor	r4, r4, r3
    6724:	add	r4, r4, r0
    6728:	add	r4, r1, r4, ror #18
    672c:	eor	r0, r1, r4
    6730:	ldr	fp, [pc, #1248]	; 6c18 <MD5Transform+0x990>
    6734:	add	fp, r8, fp
    6738:	add	fp, fp, r2
    673c:	str	r0, [sp, #4]
    6740:	and	r2, r3, r0
    6744:	eor	r2, r2, r1
    6748:	add	r2, r2, fp
    674c:	add	r2, r4, r2, ror #12
    6750:	ldr	fp, [pc, #1220]	; 6c1c <MD5Transform+0x994>
    6754:	ldr	r0, [sp, #28]
    6758:	add	fp, r0, fp
    675c:	add	r3, fp, r3
    6760:	ldr	r0, [sp, #4]
    6764:	eor	r0, r0, r2
    6768:	add	r3, r0, r3
    676c:	add	r3, r2, r3, ror #28
    6770:	ldr	r0, [pc, #1192]	; 6c20 <MD5Transform+0x998>
    6774:	ldr	fp, [sp, #40]	; 0x28
    6778:	add	r0, fp, r0
    677c:	add	r0, r0, r1
    6780:	eor	r1, r4, r2
    6784:	eor	r1, r1, r3
    6788:	add	r1, r1, r0
    678c:	add	r1, r3, r1, ror #21
    6790:	ldr	r0, [pc, #1164]	; 6c24 <MD5Transform+0x99c>
    6794:	ldr	fp, [sp, #52]	; 0x34
    6798:	add	r0, fp, r0
    679c:	add	r4, r0, r4
    67a0:	eor	r0, r2, r3
    67a4:	eor	r0, r0, r1
    67a8:	add	r4, r0, r4
    67ac:	add	r4, r1, r4, ror #16
    67b0:	ldr	r0, [pc, #1136]	; 6c28 <MD5Transform+0x9a0>
    67b4:	add	r0, r9, r0
    67b8:	add	r0, r0, r2
    67bc:	eor	r2, r3, r1
    67c0:	eor	r2, r2, r4
    67c4:	add	r2, r2, r0
    67c8:	add	r2, r4, r2, ror #9
    67cc:	ldr	r0, [pc, #1112]	; 6c2c <MD5Transform+0x9a4>
    67d0:	ldr	fp, [sp, #12]
    67d4:	add	r0, fp, r0
    67d8:	add	r0, r0, r3
    67dc:	eor	r3, r1, r4
    67e0:	eor	r3, r3, r2
    67e4:	add	r3, r3, r0
    67e8:	add	r3, r2, r3, ror #28
    67ec:	ldr	r0, [pc, #1084]	; 6c30 <MD5Transform+0x9a8>
    67f0:	ldr	fp, [sp, #24]
    67f4:	add	r0, fp, r0
    67f8:	add	r0, r0, r1
    67fc:	eor	r1, r4, r2
    6800:	eor	r1, r1, r3
    6804:	add	r1, r1, r0
    6808:	add	r1, r3, r1, ror #21
    680c:	ldr	r0, [pc, #1056]	; 6c34 <MD5Transform+0x9ac>
    6810:	add	r0, sl, r0
    6814:	add	r4, r0, r4
    6818:	eor	r0, r2, r3
    681c:	eor	r0, r0, r1
    6820:	add	r0, r0, r4
    6824:	add	r0, r1, r0, ror #16
    6828:	ldr	r4, [pc, #1032]	; 6c38 <MD5Transform+0x9b0>
    682c:	ldr	fp, [sp, #48]	; 0x30
    6830:	add	r4, fp, r4
    6834:	add	r4, r4, r2
    6838:	eor	r2, r3, r1
    683c:	eor	r2, r2, r0
    6840:	add	r2, r2, r4
    6844:	add	r2, r0, r2, ror #9
    6848:	ldr	r4, [pc, #1004]	; 6c3c <MD5Transform+0x9b4>
    684c:	ldr	fp, [sp, #60]	; 0x3c
    6850:	add	r4, fp, r4
    6854:	add	r4, r4, r3
    6858:	eor	r3, r1, r0
    685c:	eor	r3, r3, r2
    6860:	add	r3, r3, r4
    6864:	add	r3, r2, r3, ror #28
    6868:	ldr	r4, [pc, #976]	; 6c40 <MD5Transform+0x9b8>
    686c:	ldr	fp, [sp, #8]
    6870:	add	r4, fp, r4
    6874:	add	r1, r4, r1
    6878:	eor	r4, r0, r2
    687c:	eor	r4, r4, r3
    6880:	add	r1, r4, r1
    6884:	add	r1, r3, r1, ror #21
    6888:	ldr	r4, [pc, #948]	; 6c44 <MD5Transform+0x9bc>
    688c:	ldr	fp, [sp, #20]
    6890:	add	r4, fp, r4
    6894:	add	r4, r4, r0
    6898:	eor	r0, r2, r3
    689c:	eor	r0, r0, r1
    68a0:	add	r0, r0, r4
    68a4:	add	r0, r1, r0, ror #16
    68a8:	ldr	r4, [pc, #920]	; 6c48 <MD5Transform+0x9c0>
    68ac:	ldr	fp, [sp, #32]
    68b0:	add	r4, fp, r4
    68b4:	add	r2, r4, r2
    68b8:	eor	r4, r3, r1
    68bc:	eor	r4, r4, r0
    68c0:	add	r4, r4, r2
    68c4:	add	r4, r0, r4, ror #9
    68c8:	ldr	r2, [pc, #892]	; 6c4c <MD5Transform+0x9c4>
    68cc:	ldr	fp, [sp, #44]	; 0x2c
    68d0:	add	r2, fp, r2
    68d4:	add	r3, r2, r3
    68d8:	eor	r2, r1, r0
    68dc:	eor	r2, r2, r4
    68e0:	add	r2, r2, r3
    68e4:	add	r2, r4, r2, ror #28
    68e8:	ldr	r3, [pc, #864]	; 6c50 <MD5Transform+0x9c8>
    68ec:	add	r3, r8, r3
    68f0:	add	r3, r3, r1
    68f4:	eor	r1, r0, r4
    68f8:	eor	r1, r1, r2
    68fc:	add	r1, r1, r3
    6900:	add	r1, r2, r1, ror #21
    6904:	ldr	r3, [pc, #840]	; 6c54 <MD5Transform+0x9cc>
    6908:	ldr	fp, [sp, #68]	; 0x44
    690c:	add	r3, fp, r3
    6910:	add	r0, r3, r0
    6914:	eor	r3, r4, r2
    6918:	eor	r3, r3, r1
    691c:	add	r0, r3, r0
    6920:	add	r0, r1, r0, ror #16
    6924:	ldr	r3, [pc, #812]	; 6c58 <MD5Transform+0x9d0>
    6928:	ldr	fp, [sp, #16]
    692c:	add	r3, fp, r3
    6930:	add	r4, r3, r4
    6934:	eor	r3, r2, r1
    6938:	eor	r3, r3, r0
    693c:	add	r3, r3, r4
    6940:	add	r3, r0, r3, ror #9
    6944:	ldr	r4, [pc, #784]	; 6c5c <MD5Transform+0x9d4>
    6948:	ldr	fp, [sp, #8]
    694c:	add	r4, fp, r4
    6950:	add	r2, r4, r2
    6954:	mvn	fp, r1
    6958:	orr	fp, fp, r3
    695c:	eor	fp, fp, r0
    6960:	add	r2, fp, r2
    6964:	add	r2, r3, r2, ror #26
    6968:	ldr	r4, [pc, #752]	; 6c60 <MD5Transform+0x9d8>
    696c:	add	r4, sl, r4
    6970:	add	r1, r4, r1
    6974:	mvn	sl, r0
    6978:	orr	sl, sl, r2
    697c:	eor	sl, sl, r3
    6980:	add	r1, sl, r1
    6984:	add	r1, r2, r1, ror #22
    6988:	ldr	r4, [pc, #724]	; 6c64 <MD5Transform+0x9dc>
    698c:	add	r4, r9, r4
    6990:	add	r0, r4, r0
    6994:	mvn	r9, r3
    6998:	orr	r9, r9, r1
    699c:	eor	r9, r9, r2
    69a0:	add	r0, r9, r0
    69a4:	add	r0, r1, r0, ror #17
    69a8:	ldr	r4, [pc, #696]	; 6c68 <MD5Transform+0x9e0>
    69ac:	ldr	r9, [sp, #28]
    69b0:	add	r4, r9, r4
    69b4:	add	r3, r4, r3
    69b8:	mvn	r9, r2
    69bc:	orr	r9, r9, r0
    69c0:	eor	r9, r9, r1
    69c4:	add	r3, r9, r3
    69c8:	add	r3, r0, r3, ror #11
    69cc:	ldr	r4, [pc, #664]	; 6c6c <MD5Transform+0x9e4>
    69d0:	add	r4, r8, r4
    69d4:	add	r2, r4, r2
    69d8:	mvn	r8, r1
    69dc:	orr	r8, r8, r3
    69e0:	eor	r8, r8, r0
    69e4:	add	r2, r8, r2
    69e8:	add	r2, r3, r2, ror #26
    69ec:	ldr	r4, [pc, #636]	; 6c70 <MD5Transform+0x9e8>
    69f0:	ldr	r8, [sp, #20]
    69f4:	add	r4, r8, r4
    69f8:	add	r1, r4, r1
    69fc:	mvn	r8, r0
    6a00:	orr	r8, r8, r2
    6a04:	eor	r8, r8, r3
    6a08:	add	r1, r8, r1
    6a0c:	add	r1, r2, r1, ror #22
    6a10:	ldr	r4, [pc, #604]	; 6c74 <MD5Transform+0x9ec>
    6a14:	ldr	r8, [sp, #48]	; 0x30
    6a18:	add	r4, r8, r4
    6a1c:	add	r0, r4, r0
    6a20:	mvn	r8, r3
    6a24:	orr	r8, r8, r1
    6a28:	eor	r8, r8, r2
    6a2c:	add	r0, r8, r0
    6a30:	add	r0, r1, r0, ror #17
    6a34:	ldr	r4, [pc, #572]	; 6c78 <MD5Transform+0x9f0>
    6a38:	ldr	r8, [sp, #12]
    6a3c:	add	r4, r8, r4
    6a40:	add	r4, r4, r3
    6a44:	mvn	r3, r2
    6a48:	orr	r3, r3, r0
    6a4c:	eor	r3, r3, r1
    6a50:	add	r3, r3, r4
    6a54:	add	r3, r0, r3, ror #11
    6a58:	ldr	r4, [pc, #540]	; 6c7c <MD5Transform+0x9f4>
    6a5c:	ldr	r8, [sp, #40]	; 0x28
    6a60:	add	r4, r8, r4
    6a64:	add	r2, r4, r2
    6a68:	mvn	r8, r1
    6a6c:	orr	r8, r8, r3
    6a70:	eor	r8, r8, r0
    6a74:	add	r2, r8, r2
    6a78:	add	r2, r3, r2, ror #26
    6a7c:	ldr	r4, [pc, #508]	; 6c80 <MD5Transform+0x9f8>
    6a80:	ldr	r8, [sp, #68]	; 0x44
    6a84:	add	r4, r8, r4
    6a88:	add	r1, r4, r1
    6a8c:	mvn	r8, r0
    6a90:	orr	r8, r8, r2
    6a94:	eor	r8, r8, r3
    6a98:	add	r1, r8, r1
    6a9c:	add	r1, r2, r1, ror #22
    6aa0:	ldr	r4, [pc, #476]	; 6c84 <MD5Transform+0x9fc>
    6aa4:	ldr	r8, [sp, #32]
    6aa8:	add	r4, r8, r4
    6aac:	add	r0, r4, r0
    6ab0:	mvn	r8, r3
    6ab4:	orr	r8, r8, r1
    6ab8:	eor	r8, r8, r2
    6abc:	add	r0, r8, r0
    6ac0:	add	r0, r1, r0, ror #17
    6ac4:	ldr	r4, [pc, #444]	; 6c88 <MD5Transform+0xa00>
    6ac8:	ldr	r8, [sp, #60]	; 0x3c
    6acc:	add	r4, r8, r4
    6ad0:	add	r4, r4, r3
    6ad4:	mvn	r3, r2
    6ad8:	orr	r3, r3, r0
    6adc:	eor	r3, r3, r1
    6ae0:	add	r3, r3, r4
    6ae4:	add	r3, r0, r3, ror #11
    6ae8:	ldr	r4, [pc, #412]	; 6c8c <MD5Transform+0xa04>
    6aec:	ldr	r8, [sp, #24]
    6af0:	add	r4, r8, r4
    6af4:	add	r4, r4, r2
    6af8:	mvn	r2, r1
    6afc:	orr	r2, r2, r3
    6b00:	eor	r2, r2, r0
    6b04:	add	r2, r2, r4
    6b08:	add	r2, r3, r2, ror #26
    6b0c:	ldr	r4, [pc, #380]	; 6c90 <MD5Transform+0xa08>
    6b10:	ldr	r8, [sp, #52]	; 0x34
    6b14:	add	r4, r8, r4
    6b18:	add	r4, r4, r1
    6b1c:	mvn	r1, r0
    6b20:	orr	r1, r1, r2
    6b24:	eor	r1, r1, r3
    6b28:	add	r1, r1, r4
    6b2c:	add	r1, r2, r1, ror #22
    6b30:	ldr	r4, [pc, #348]	; 6c94 <MD5Transform+0xa0c>
    6b34:	ldr	r8, [sp, #16]
    6b38:	add	r4, r8, r4
    6b3c:	add	r4, r4, r0
    6b40:	mvn	r0, r3
    6b44:	orr	r0, r0, r1
    6b48:	eor	r0, r0, r2
    6b4c:	add	r0, r0, r4
    6b50:	add	r0, r1, r0, ror #17
    6b54:	ldr	r4, [pc, #316]	; 6c98 <MD5Transform+0xa10>
    6b58:	ldr	r8, [sp, #44]	; 0x2c
    6b5c:	add	r4, r8, r4
    6b60:	add	r4, r4, r3
    6b64:	mvn	r3, r2
    6b68:	orr	r3, r3, r0
    6b6c:	eor	r3, r3, r1
    6b70:	add	r3, r3, r4
    6b74:	add	r7, r7, r2
    6b78:	str	r7, [ip]
    6b7c:	add	lr, lr, r0
    6b80:	add	lr, lr, r3, ror #11
    6b84:	str	lr, [ip, #4]
    6b88:	add	r5, r5, r0
    6b8c:	str	r5, [ip, #8]
    6b90:	add	r6, r6, r1
    6b94:	str	r6, [ip, #12]
    6b98:	add	sp, sp, #76	; 0x4c
    6b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ba0:	.word	0xd76aa478
    6ba4:	.word	0xe8c7b756
    6ba8:	.word	0x242070db
    6bac:	.word	0xc1bdceee
    6bb0:	.word	0xf57c0faf
    6bb4:	.word	0x4787c62a
    6bb8:	.word	0xa8304613
    6bbc:	.word	0xfd469501
    6bc0:	.word	0x698098d8
    6bc4:	.word	0x8b44f7af
    6bc8:	.word	0x895cd7be
    6bcc:	.word	0x6b901122
    6bd0:	.word	0xfd987193
    6bd4:	.word	0xa679438e
    6bd8:	.word	0x49b40821
    6bdc:	.word	0xf61e2562
    6be0:	.word	0xc040b340
    6be4:	.word	0x265e5a51
    6be8:	.word	0xe9b6c7aa
    6bec:	.word	0xd62f105d
    6bf0:	.word	0x02441453
    6bf4:	.word	0xd8a1e681
    6bf8:	.word	0xe7d3fbc8
    6bfc:	.word	0x21e1cde6
    6c00:	.word	0xc33707d6
    6c04:	.word	0xf4d50d87
    6c08:	.word	0x455a14ed
    6c0c:	.word	0xa9e3e905
    6c10:	.word	0xfcefa3f8
    6c14:	.word	0x676f02d9
    6c18:	.word	0x8d2a4c8a
    6c1c:	.word	0xfffa3942
    6c20:	.word	0x8771f681
    6c24:	.word	0x6d9d6122
    6c28:	.word	0xfde5380c
    6c2c:	.word	0xa4beea44
    6c30:	.word	0x4bdecfa9
    6c34:	.word	0xf6bb4b60
    6c38:	.word	0xbebfbc70
    6c3c:	.word	0x289b7ec6
    6c40:	.word	0xeaa127fa
    6c44:	.word	0xd4ef3085
    6c48:	.word	0x04881d05
    6c4c:	.word	0xd9d4d039
    6c50:	.word	0xe6db99e5
    6c54:	.word	0x1fa27cf8
    6c58:	.word	0xc4ac5665
    6c5c:	.word	0xf4292244
    6c60:	.word	0x432aff97
    6c64:	.word	0xab9423a7
    6c68:	.word	0xfc93a039
    6c6c:	.word	0x655b59c3
    6c70:	.word	0x8f0ccc92
    6c74:	.word	0xffeff47d
    6c78:	.word	0x85845dd1
    6c7c:	.word	0x6fa87e4f
    6c80:	.word	0xfe2ce6e0
    6c84:	.word	0xa3014314
    6c88:	.word	0x4e0811a1
    6c8c:	.word	0xf7537e82
    6c90:	.word	0xbd3af235
    6c94:	.word	0x2ad7d2bb
    6c98:	.word	0xeb86d391

00006c9c <MD5Update>:
    6c9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    6ca0:	mov	r7, r0
    6ca4:	mov	r8, r1
    6ca8:	mov	r5, r2
    6cac:	ldr	r3, [r0, #16]
    6cb0:	lsr	r6, r3, #3
    6cb4:	and	r6, r6, #63	; 0x3f
    6cb8:	lsl	r2, r2, #3
    6cbc:	add	r3, r3, r2
    6cc0:	str	r3, [r0, #16]
    6cc4:	cmp	r2, r3
    6cc8:	ldrhi	r3, [r0, #20]
    6ccc:	addhi	r3, r3, #1
    6cd0:	strhi	r3, [r0, #20]
    6cd4:	ldr	r3, [r0, #20]
    6cd8:	add	r3, r3, r5, lsr #29
    6cdc:	str	r3, [r0, #20]
    6ce0:	rsb	r4, r6, #64	; 0x40
    6ce4:	cmp	r5, r4
    6ce8:	movcc	r1, #0
    6cec:	bcs	6d08 <MD5Update+0x6c>
    6cf0:	add	r0, r6, #24
    6cf4:	sub	r2, r5, r1
    6cf8:	add	r1, r8, r1
    6cfc:	add	r0, r7, r0
    6d00:	bl	4808 <memcpy@plt>
    6d04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    6d08:	add	r0, r6, #24
    6d0c:	mov	r2, r4
    6d10:	mov	r1, r8
    6d14:	add	r0, r7, r0
    6d18:	bl	4808 <memcpy@plt>
    6d1c:	mov	r9, r7
    6d20:	add	r1, r7, #24
    6d24:	mov	r0, r7
    6d28:	bl	6288 <MD5Transform>
    6d2c:	rsb	r6, r6, #127	; 0x7f
    6d30:	cmp	r5, r6
    6d34:	bls	6d60 <MD5Update+0xc4>
    6d38:	add	r1, r8, r4
    6d3c:	mov	r0, r9
    6d40:	bl	6288 <MD5Transform>
    6d44:	add	r1, r4, #64	; 0x40
    6d48:	add	r3, r4, #127	; 0x7f
    6d4c:	mov	r4, r1
    6d50:	cmp	r5, r3
    6d54:	bhi	6d38 <MD5Update+0x9c>
    6d58:	mov	r6, #0
    6d5c:	b	6cf0 <MD5Update+0x54>
    6d60:	mov	r1, r4
    6d64:	mov	r6, #0
    6d68:	b	6cf0 <MD5Update+0x54>

00006d6c <MD5Final>:
    6d6c:	push	{r4, r5, lr}
    6d70:	sub	sp, sp, #12
    6d74:	mov	r5, r0
    6d78:	mov	r4, r1
    6d7c:	mov	r2, r1
    6d80:	mov	r3, sp
    6d84:	ldr	r0, [r2, #16]!
    6d88:	ldr	r1, [r2, #4]
    6d8c:	stmia	r3!, {r0, r1}
    6d90:	ldr	r2, [r4, #16]
    6d94:	lsr	r2, r2, #3
    6d98:	and	r2, r2, #63	; 0x3f
    6d9c:	cmp	r2, #55	; 0x37
    6da0:	rsbls	r2, r2, #56	; 0x38
    6da4:	rsbhi	r2, r2, #120	; 0x78
    6da8:	ldr	r1, [pc, #80]	; 6e00 <MD5Final+0x94>
    6dac:	add	r1, pc, r1
    6db0:	mov	r0, r4
    6db4:	bl	6c9c <MD5Update>
    6db8:	mov	r2, #8
    6dbc:	mov	r1, sp
    6dc0:	mov	r0, r4
    6dc4:	bl	6c9c <MD5Update>
    6dc8:	ldr	r0, [r4]
    6dcc:	ldr	r1, [r4, #4]
    6dd0:	ldr	r2, [r4, #8]
    6dd4:	ldr	r3, [r4, #12]
    6dd8:	str	r0, [r5]
    6ddc:	str	r1, [r5, #4]
    6de0:	str	r2, [r5, #8]
    6de4:	str	r3, [r5, #12]
    6de8:	mov	r2, #88	; 0x58
    6dec:	mov	r1, #0
    6df0:	mov	r0, r4
    6df4:	bl	4628 <memset@plt>
    6df8:	add	sp, sp, #12
    6dfc:	pop	{r4, r5, pc}
    6e00:	.word	0x00021674

00006e04 <rb_sha256_process_bytes>:
    6e04:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e08:	mov	r8, r0
    6e0c:	mov	r5, r1
    6e10:	mov	r6, r2
    6e14:	ldr	r4, [r2, #40]	; 0x28
    6e18:	cmp	r4, #0
    6e1c:	bne	6ef4 <rb_sha256_process_bytes+0xf0>
    6e20:	cmp	r5, #63	; 0x3f
    6e24:	bls	6ec0 <rb_sha256_process_bytes+0xbc>
    6e28:	tst	r8, #3
    6e2c:	beq	6f70 <rb_sha256_process_bytes+0x16c>
    6e30:	cmp	r5, #64	; 0x40
    6e34:	bls	6ec0 <rb_sha256_process_bytes+0xbc>
    6e38:	mov	r9, r5
    6e3c:	mov	r4, r8
    6e40:	add	r7, r6, #44	; 0x2c
    6e44:	mov	sl, #64	; 0x40
    6e48:	mov	r3, r4
    6e4c:	mov	r2, r7
    6e50:	add	r1, r4, #64	; 0x40
    6e54:	ldr	fp, [r3]
    6e58:	ldr	lr, [r3, #4]
    6e5c:	ldr	ip, [r3, #8]
    6e60:	ldr	r0, [r3, #12]
    6e64:	str	fp, [r2]
    6e68:	str	lr, [r2, #4]
    6e6c:	str	ip, [r2, #8]
    6e70:	str	r0, [r2, #12]
    6e74:	add	r3, r3, #16
    6e78:	add	r2, r2, #16
    6e7c:	cmp	r3, r1
    6e80:	bne	6e54 <rb_sha256_process_bytes+0x50>
    6e84:	mov	r2, r6
    6e88:	mov	r1, sl
    6e8c:	mov	r0, r7
    6e90:	bl	5878 <rb_sha256_process_block>
    6e94:	add	r4, r4, #64	; 0x40
    6e98:	sub	r9, r9, #64	; 0x40
    6e9c:	cmp	r9, #64	; 0x40
    6ea0:	bhi	6e48 <rb_sha256_process_bytes+0x44>
    6ea4:	sub	r3, r5, #65	; 0x41
    6ea8:	bic	r2, r3, #63	; 0x3f
    6eac:	add	r2, r2, #64	; 0x40
    6eb0:	add	r8, r8, r2
    6eb4:	sub	r5, r5, #64	; 0x40
    6eb8:	bic	r3, r3, #63	; 0x3f
    6ebc:	sub	r5, r5, r3
    6ec0:	cmp	r5, #0
    6ec4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ec8:	ldr	r4, [r6, #40]	; 0x28
    6ecc:	add	r0, r4, #44	; 0x2c
    6ed0:	mov	r2, r5
    6ed4:	mov	r1, r8
    6ed8:	add	r0, r6, r0
    6edc:	bl	4808 <memcpy@plt>
    6ee0:	add	r5, r5, r4
    6ee4:	cmp	r5, #63	; 0x3f
    6ee8:	bhi	6f90 <rb_sha256_process_bytes+0x18c>
    6eec:	str	r5, [r6, #40]	; 0x28
    6ef0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ef4:	rsb	r7, r4, #128	; 0x80
    6ef8:	cmp	r7, r1
    6efc:	movcs	r7, r1
    6f00:	add	r0, r4, #44	; 0x2c
    6f04:	mov	r2, r7
    6f08:	mov	r1, r8
    6f0c:	add	r0, r6, r0
    6f10:	bl	4808 <memcpy@plt>
    6f14:	ldr	r1, [r6, #40]	; 0x28
    6f18:	add	r1, r7, r1
    6f1c:	str	r1, [r6, #40]	; 0x28
    6f20:	cmp	r1, #64	; 0x40
    6f24:	bhi	6f34 <rb_sha256_process_bytes+0x130>
    6f28:	add	r8, r8, r7
    6f2c:	sub	r5, r5, r7
    6f30:	b	6e20 <rb_sha256_process_bytes+0x1c>
    6f34:	add	r9, r6, #44	; 0x2c
    6f38:	mov	r2, r6
    6f3c:	bic	r1, r1, #63	; 0x3f
    6f40:	mov	r0, r9
    6f44:	bl	5878 <rb_sha256_process_block>
    6f48:	ldr	r2, [r6, #40]	; 0x28
    6f4c:	and	r2, r2, #63	; 0x3f
    6f50:	str	r2, [r6, #40]	; 0x28
    6f54:	add	r1, r4, r7
    6f58:	bic	r1, r1, #63	; 0x3f
    6f5c:	add	r1, r1, #44	; 0x2c
    6f60:	add	r1, r6, r1
    6f64:	mov	r0, r9
    6f68:	bl	4808 <memcpy@plt>
    6f6c:	b	6f28 <rb_sha256_process_bytes+0x124>
    6f70:	bic	r4, r5, #63	; 0x3f
    6f74:	mov	r2, r6
    6f78:	mov	r1, r4
    6f7c:	mov	r0, r8
    6f80:	bl	5878 <rb_sha256_process_block>
    6f84:	add	r8, r8, r4
    6f88:	and	r5, r5, #63	; 0x3f
    6f8c:	b	6ec0 <rb_sha256_process_bytes+0xbc>
    6f90:	add	r4, r6, #44	; 0x2c
    6f94:	mov	r2, r6
    6f98:	mov	r1, #64	; 0x40
    6f9c:	mov	r0, r4
    6fa0:	bl	5878 <rb_sha256_process_block>
    6fa4:	sub	r5, r5, #64	; 0x40
    6fa8:	mov	r2, r5
    6fac:	add	r1, r6, #108	; 0x6c
    6fb0:	mov	r0, r4
    6fb4:	bl	4808 <memcpy@plt>
    6fb8:	b	6eec <rb_sha256_process_bytes+0xe8>

00006fbc <rb_sha256_finish_ctx>:
    6fbc:	push	{r4, r5, r6, r7, r8, lr}
    6fc0:	mov	r5, r0
    6fc4:	mov	r4, r1
    6fc8:	ldr	r6, [r0, #40]	; 0x28
    6fcc:	ldr	r3, [r0, #32]
    6fd0:	add	r3, r6, r3
    6fd4:	str	r3, [r0, #32]
    6fd8:	cmp	r6, r3
    6fdc:	ldrhi	r3, [r0, #36]	; 0x24
    6fe0:	addhi	r3, r3, #1
    6fe4:	strhi	r3, [r0, #36]	; 0x24
    6fe8:	cmp	r6, #55	; 0x37
    6fec:	rsbhi	r7, r6, #120	; 0x78
    6ff0:	rsbls	r7, r6, #56	; 0x38
    6ff4:	add	r0, r6, #44	; 0x2c
    6ff8:	mov	r2, r7
    6ffc:	ldr	r1, [pc, #196]	; 70c8 <rb_sha256_finish_ctx+0x10c>
    7000:	add	r1, pc, r1
    7004:	add	r1, r1, #1808	; 0x710
    7008:	add	r1, r1, #8
    700c:	add	r0, r5, r0
    7010:	bl	4808 <memcpy@plt>
    7014:	add	r1, r7, r6
    7018:	ldr	r3, [r5, #32]
    701c:	lsl	ip, r3, #3
    7020:	add	r2, r5, r1
    7024:	lsl	r0, r3, #11
    7028:	and	r0, r0, #16711680	; 0xff0000
    702c:	orr	r0, r0, ip, lsr #24
    7030:	orr	r0, r0, r3, lsl #27
    7034:	lsr	ip, ip, #8
    7038:	and	ip, ip, #65280	; 0xff00
    703c:	orr	r0, r0, ip
    7040:	str	r0, [r2, #48]	; 0x30
    7044:	ldr	r0, [r5, #36]	; 0x24
    7048:	lsr	r3, r3, #29
    704c:	orr	r3, r3, r0, lsl #3
    7050:	lsr	r0, r3, #24
    7054:	orr	r0, r0, r3, lsl #24
    7058:	lsl	ip, r3, #8
    705c:	and	ip, ip, #16711680	; 0xff0000
    7060:	orr	r0, r0, ip
    7064:	lsr	r3, r3, #8
    7068:	and	r3, r3, #65280	; 0xff00
    706c:	orr	r3, r0, r3
    7070:	str	r3, [r2, #44]	; 0x2c
    7074:	mov	r2, r5
    7078:	add	r1, r1, #8
    707c:	add	r0, r5, #44	; 0x2c
    7080:	bl	5878 <rb_sha256_process_block>
    7084:	sub	ip, r5, #4
    7088:	sub	r0, r4, #4
    708c:	add	r5, r5, #28
    7090:	ldr	r3, [ip, #4]!
    7094:	lsr	r2, r3, #24
    7098:	orr	r2, r2, r3, lsl #24
    709c:	lsl	r1, r3, #8
    70a0:	and	r1, r1, #16711680	; 0xff0000
    70a4:	orr	r2, r2, r1
    70a8:	lsr	r3, r3, #8
    70ac:	and	r3, r3, #65280	; 0xff00
    70b0:	orr	r3, r2, r3
    70b4:	str	r3, [r0, #4]!
    70b8:	cmp	ip, r5
    70bc:	bne	7090 <rb_sha256_finish_ctx+0xd4>
    70c0:	mov	r0, r4
    70c4:	pop	{r4, r5, r6, r7, r8, pc}
    70c8:	.word	0x0000e638

000070cc <rb_sha512_process_bytes>:
    70cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    70d0:	mov	r9, r0
    70d4:	mov	r7, r1
    70d8:	mov	r6, r2
    70dc:	ldrd	r4, [r2, #80]	; 0x50
    70e0:	orrs	r3, r4, r5
    70e4:	bne	7194 <rb_sha512_process_bytes+0xc8>
    70e8:	cmp	r7, #127	; 0x7f
    70ec:	bls	7158 <rb_sha512_process_bytes+0x8c>
    70f0:	tst	r9, #7
    70f4:	beq	721c <rb_sha512_process_bytes+0x150>
    70f8:	cmp	r7, #128	; 0x80
    70fc:	bls	7158 <rb_sha512_process_bytes+0x8c>
    7100:	mov	r5, r7
    7104:	mov	r4, r9
    7108:	add	sl, r6, #88	; 0x58
    710c:	mov	r8, #128	; 0x80
    7110:	mov	r2, r8
    7114:	mov	r1, r4
    7118:	mov	r0, sl
    711c:	bl	4808 <memcpy@plt>
    7120:	mov	r2, r6
    7124:	mov	r1, r8
    7128:	bl	5b98 <rb_sha512_process_block>
    712c:	add	r4, r4, #128	; 0x80
    7130:	sub	r5, r5, #128	; 0x80
    7134:	cmp	r5, #128	; 0x80
    7138:	bhi	7110 <rb_sha512_process_bytes+0x44>
    713c:	sub	r3, r7, #129	; 0x81
    7140:	bic	r2, r3, #127	; 0x7f
    7144:	add	r2, r2, #128	; 0x80
    7148:	add	r9, r9, r2
    714c:	sub	r7, r7, #128	; 0x80
    7150:	bic	r3, r3, #127	; 0x7f
    7154:	sub	r7, r7, r3
    7158:	cmp	r7, #0
    715c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    7160:	ldr	r4, [r6, #80]	; 0x50
    7164:	add	r0, r4, #88	; 0x58
    7168:	mov	r2, r7
    716c:	mov	r1, r9
    7170:	add	r0, r6, r0
    7174:	bl	4808 <memcpy@plt>
    7178:	add	r7, r7, r4
    717c:	cmp	r7, #127	; 0x7f
    7180:	bhi	723c <rb_sha512_process_bytes+0x170>
    7184:	str	r7, [r6, #80]	; 0x50
    7188:	mov	r3, #0
    718c:	str	r3, [r6, #84]	; 0x54
    7190:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    7194:	rsb	r8, r4, #256	; 0x100
    7198:	cmp	r8, r1
    719c:	movcs	r8, r1
    71a0:	add	r0, r4, #88	; 0x58
    71a4:	mov	r2, r8
    71a8:	mov	r1, r9
    71ac:	add	r0, r6, r0
    71b0:	bl	4808 <memcpy@plt>
    71b4:	ldrd	r0, [r6, #80]	; 0x50
    71b8:	adds	r0, r0, r8
    71bc:	adc	r1, r1, #0
    71c0:	strd	r0, [r6, #80]	; 0x50
    71c4:	cmp	r1, #0
    71c8:	cmpeq	r0, #128	; 0x80
    71cc:	bhi	71dc <rb_sha512_process_bytes+0x110>
    71d0:	add	r9, r9, r8
    71d4:	sub	r7, r7, r8
    71d8:	b	70e8 <rb_sha512_process_bytes+0x1c>
    71dc:	add	r5, r6, #88	; 0x58
    71e0:	mov	r2, r6
    71e4:	bic	r1, r0, #127	; 0x7f
    71e8:	mov	r0, r5
    71ec:	bl	5b98 <rb_sha512_process_block>
    71f0:	ldrd	r2, [r6, #80]	; 0x50
    71f4:	and	r2, r2, #127	; 0x7f
    71f8:	mov	r3, #0
    71fc:	strd	r2, [r6, #80]	; 0x50
    7200:	add	r1, r8, r4
    7204:	bic	r1, r1, #127	; 0x7f
    7208:	add	r1, r1, #88	; 0x58
    720c:	add	r1, r6, r1
    7210:	mov	r0, r5
    7214:	bl	4808 <memcpy@plt>
    7218:	b	71d0 <rb_sha512_process_bytes+0x104>
    721c:	bic	r4, r7, #127	; 0x7f
    7220:	mov	r2, r6
    7224:	mov	r1, r4
    7228:	mov	r0, r9
    722c:	bl	5b98 <rb_sha512_process_block>
    7230:	add	r9, r9, r4
    7234:	and	r7, r7, #127	; 0x7f
    7238:	b	7158 <rb_sha512_process_bytes+0x8c>
    723c:	add	r4, r6, #88	; 0x58
    7240:	mov	r2, r6
    7244:	mov	r1, #128	; 0x80
    7248:	mov	r0, r4
    724c:	bl	5b98 <rb_sha512_process_block>
    7250:	sub	r7, r7, #128	; 0x80
    7254:	mov	r2, r7
    7258:	add	r1, r6, #216	; 0xd8
    725c:	mov	r0, r4
    7260:	bl	4808 <memcpy@plt>
    7264:	b	7184 <rb_sha512_process_bytes+0xb8>

00007268 <rb_sha512_finish_ctx>:
    7268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    726c:	sub	sp, sp, #92	; 0x5c
    7270:	mov	ip, r0
    7274:	str	r1, [sp, #68]	; 0x44
    7278:	ldrd	r2, [r0, #80]	; 0x50
    727c:	mov	r4, r2
    7280:	mov	r5, r3
    7284:	strd	r4, [sp, #56]	; 0x38
    7288:	ldrd	r2, [r0, #64]	; 0x40
    728c:	adds	r0, r4, r2
    7290:	adc	r1, r5, r3
    7294:	mov	r2, r0
    7298:	mov	r3, r1
    729c:	strd	r2, [ip, #64]	; 0x40
    72a0:	cmp	r5, r1
    72a4:	cmpeq	r4, r0
    72a8:	bls	72bc <rb_sha512_finish_ctx+0x54>
    72ac:	ldrd	r2, [ip, #72]	; 0x48
    72b0:	adds	r2, r2, #1
    72b4:	adc	r3, r3, #0
    72b8:	strd	r2, [ip, #72]	; 0x48
    72bc:	ldrd	r2, [sp, #56]	; 0x38
    72c0:	cmp	r3, #0
    72c4:	cmpeq	r2, #111	; 0x6f
    72c8:	movhi	r3, r2
    72cc:	rsbhi	r3, r3, #240	; 0xf0
    72d0:	ldrls	r3, [sp, #56]	; 0x38
    72d4:	rsbls	r3, r3, #112	; 0x70
    72d8:	str	r3, [sp, #64]	; 0x40
    72dc:	ldrd	r4, [sp, #56]	; 0x38
    72e0:	add	r0, r4, #88	; 0x58
    72e4:	ldr	r6, [sp, #64]	; 0x40
    72e8:	mov	r2, r6
    72ec:	ldr	r1, [pc, #812]	; 7620 <rb_sha512_finish_ctx+0x3b8>
    72f0:	add	r1, pc, r1
    72f4:	add	r1, r1, #1872	; 0x750
    72f8:	add	r1, r1, #8
    72fc:	mov	r8, ip
    7300:	add	r0, ip, r0
    7304:	bl	4808 <memcpy@plt>
    7308:	strd	r4, [sp, #56]	; 0x38
    730c:	str	r6, [sp, #64]	; 0x40
    7310:	adds	r2, r4, r6
    7314:	adc	r3, r5, #0
    7318:	mov	r4, r2
    731c:	mov	r5, r3
    7320:	ldr	r2, [r8, #64]	; 0x40
    7324:	ldr	ip, [r8, #68]	; 0x44
    7328:	lsl	r3, ip, #3
    732c:	orr	r3, r3, r2, lsr #29
    7330:	lsl	lr, r2, #3
    7334:	strd	r4, [sp, #72]	; 0x48
    7338:	add	r5, r8, r4
    733c:	mov	r9, r5
    7340:	lsl	r5, r2, #11
    7344:	str	r5, [sp, #52]	; 0x34
    7348:	mov	r5, #0
    734c:	str	r5, [sp, #48]	; 0x30
    7350:	ldrd	r4, [sp, #48]	; 0x30
    7354:	mov	r4, #0
    7358:	and	r5, r5, #16711680	; 0xff0000
    735c:	lsl	r1, ip, #27
    7360:	orr	r1, r1, r2, lsr #5
    7364:	lsl	r0, r2, #27
    7368:	mov	r6, #0
    736c:	and	r7, r1, #65280	; 0xff00
    7370:	orr	r6, r6, r4
    7374:	orr	r7, r7, r5
    7378:	mov	r4, #0
    737c:	orr	r6, r6, r4
    7380:	orr	r7, r7, r0
    7384:	lsl	r1, ip, #11
    7388:	orr	r1, r1, r2, lsr #21
    738c:	mov	r0, #0
    7390:	and	r1, r1, #255	; 0xff
    7394:	orr	r4, r6, r0
    7398:	orr	r5, r7, r1
    739c:	lsr	r0, r3, #24
    73a0:	ldrd	r6, [sp, #48]	; 0x30
    73a4:	orr	r4, r4, r0
    73a8:	orr	r5, r5, r6
    73ac:	lsr	r1, lr, #8
    73b0:	orr	r1, r1, r3, lsl #24
    73b4:	str	r1, [sp, #48]	; 0x30
    73b8:	lsr	r1, r3, #8
    73bc:	str	r1, [sp, #52]	; 0x34
    73c0:	ldrd	r0, [sp, #48]	; 0x30
    73c4:	and	r0, r0, #-16777216	; 0xff000000
    73c8:	mov	r1, #0
    73cc:	orr	r4, r4, r0
    73d0:	orr	r5, r5, r1
    73d4:	lsr	r0, lr, #24
    73d8:	orr	r0, r0, r3, lsl #8
    73dc:	and	r0, r0, #16711680	; 0xff0000
    73e0:	mov	r1, #0
    73e4:	orr	r4, r4, r0
    73e8:	orr	r5, r5, r1
    73ec:	ldr	r2, [sp, #52]	; 0x34
    73f0:	and	r2, r2, #65280	; 0xff00
    73f4:	mov	r3, #0
    73f8:	orr	r4, r4, r2
    73fc:	orr	r5, r5, r3
    7400:	strd	r4, [r9, #96]	; 0x60
    7404:	ldr	r1, [r8, #72]	; 0x48
    7408:	mov	lr, r8
    740c:	ldr	r0, [r8, #76]	; 0x4c
    7410:	lsl	r3, r0, #3
    7414:	orr	r3, r3, r1, lsr #29
    7418:	lsl	r2, r1, #3
    741c:	lsr	r0, ip, #29
    7420:	orr	r2, r2, r0
    7424:	orr	r3, r3, r6
    7428:	ldr	ip, [sp, #72]	; 0x48
    742c:	add	ip, r8, ip
    7430:	lsl	r5, r2, #24
    7434:	lsr	r0, r3, #24
    7438:	orr	r0, r0, r6
    743c:	orr	r1, r6, r5
    7440:	lsl	r5, r2, #8
    7444:	mov	r4, #0
    7448:	and	r5, r5, #16711680	; 0xff0000
    744c:	orr	r0, r0, r4
    7450:	orr	r1, r1, r5
    7454:	lsl	r5, r3, #24
    7458:	orr	r5, r5, r2, lsr #8
    745c:	mov	r4, #0
    7460:	and	r5, r5, #65280	; 0xff00
    7464:	orr	r0, r0, r4
    7468:	orr	r1, r1, r5
    746c:	lsl	r5, r3, #8
    7470:	orr	r5, r5, r2, lsr #24
    7474:	mov	r4, #0
    7478:	and	r5, r5, #255	; 0xff
    747c:	orr	r0, r0, r4
    7480:	orr	r1, r1, r5
    7484:	lsr	r4, r2, #8
    7488:	orr	r4, r4, r3, lsl #24
    748c:	lsr	r5, r3, #8
    7490:	and	r6, r4, #-16777216	; 0xff000000
    7494:	mov	r7, #0
    7498:	orr	r6, r6, r0
    749c:	orr	r7, r7, r1
    74a0:	lsr	r0, r2, #24
    74a4:	orr	r0, r0, r3, lsl #8
    74a8:	and	r0, r0, #16711680	; 0xff0000
    74ac:	mov	r1, #0
    74b0:	orr	r6, r6, r0
    74b4:	orr	r7, r7, r1
    74b8:	and	r2, r5, #65280	; 0xff00
    74bc:	mov	r3, #0
    74c0:	orr	r2, r2, r6
    74c4:	orr	r3, r3, r7
    74c8:	strd	r2, [ip, #88]	; 0x58
    74cc:	ldr	r3, [sp, #56]	; 0x38
    74d0:	add	r1, r3, #16
    74d4:	mov	r2, lr
    74d8:	ldr	r0, [sp, #64]	; 0x40
    74dc:	add	r1, r1, r0
    74e0:	mov	r4, lr
    74e4:	add	r0, lr, #88	; 0x58
    74e8:	bl	5b98 <rb_sha512_process_block>
    74ec:	mov	r3, r4
    74f0:	sub	r4, r4, #8
    74f4:	ldr	r2, [sp, #68]	; 0x44
    74f8:	sub	r5, r2, #8
    74fc:	add	r3, r3, #56	; 0x38
    7500:	str	r3, [sp, #48]	; 0x30
    7504:	mov	ip, r4
    7508:	mov	lr, r5
    750c:	ldr	r3, [ip, #8]!
    7510:	ldr	r2, [ip, #4]
    7514:	lsl	r1, r3, #24
    7518:	str	r1, [sp, #20]
    751c:	mov	r1, #0
    7520:	str	r1, [sp, #16]
    7524:	lsr	r1, r2, #24
    7528:	str	r1, [sp, #24]
    752c:	ldrd	r0, [sp, #16]
    7530:	str	r0, [sp, #28]
    7534:	ldrd	r8, [sp, #24]
    7538:	orr	r4, r0, r8
    753c:	orr	r5, r1, r9
    7540:	lsl	r8, r3, #8
    7544:	str	r8, [sp, #36]	; 0x24
    7548:	mov	r8, r0
    754c:	str	r0, [sp, #32]
    7550:	ldrd	r0, [sp, #32]
    7554:	mov	r0, #0
    7558:	and	r1, r1, #16711680	; 0xff0000
    755c:	orr	r0, r0, r4
    7560:	orr	r1, r1, r5
    7564:	lsl	r5, r2, #24
    7568:	orr	r5, r5, r3, lsr #8
    756c:	str	r5, [sp, #4]
    7570:	lsl	r5, r3, #24
    7574:	str	r5, [sp]
    7578:	ldrd	r4, [sp]
    757c:	mov	r4, #0
    7580:	and	r5, r5, #65280	; 0xff00
    7584:	orr	r4, r4, r0
    7588:	orr	r5, r5, r1
    758c:	lsl	r1, r2, #8
    7590:	orr	r1, r1, r3, lsr #24
    7594:	str	r1, [sp, #12]
    7598:	lsl	r1, r3, #8
    759c:	str	r1, [sp, #8]
    75a0:	ldrd	r0, [sp, #8]
    75a4:	mov	r0, #0
    75a8:	and	r1, r1, #255	; 0xff
    75ac:	orr	r4, r4, r0
    75b0:	orr	r5, r5, r1
    75b4:	lsr	r6, r3, #8
    75b8:	orr	r6, r6, r2, lsl #24
    75bc:	lsr	r7, r2, #8
    75c0:	and	r0, r6, #-16777216	; 0xff000000
    75c4:	mov	r1, #0
    75c8:	orr	r0, r0, r4
    75cc:	orr	r1, r1, r5
    75d0:	lsr	sl, r3, #24
    75d4:	orr	sl, sl, r2, lsl #8
    75d8:	and	r4, sl, #16711680	; 0xff0000
    75dc:	mov	r5, #0
    75e0:	orr	r0, r0, r4
    75e4:	orr	r1, r1, r5
    75e8:	str	r7, [sp, #40]	; 0x28
    75ec:	str	r8, [sp, #44]	; 0x2c
    75f0:	ldrd	r4, [sp, #40]	; 0x28
    75f4:	and	r4, r4, #65280	; 0xff00
    75f8:	mov	r5, #0
    75fc:	orr	r0, r0, r4
    7600:	orr	r1, r1, r5
    7604:	strd	r0, [lr, #8]!
    7608:	ldr	r3, [sp, #48]	; 0x30
    760c:	cmp	ip, r3
    7610:	bne	750c <rb_sha512_finish_ctx+0x2a4>
    7614:	ldr	r0, [sp, #68]	; 0x44
    7618:	add	sp, sp, #92	; 0x5c
    761c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7620:	.word	0x0000e348

00007624 <rb_sha256_crypt_r>:
    7624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7628:	add	fp, sp, #32
    762c:	sub	sp, sp, #468	; 0x1d4
    7630:	mov	r7, r0
    7634:	mov	r4, r1
    7638:	str	r1, [fp, #-460]	; 0xfffffe34
    763c:	str	r2, [fp, #-476]	; 0xfffffe24
    7640:	str	r3, [fp, #-480]	; 0xfffffe20
    7644:	mov	r2, #3
    7648:	ldr	r0, [pc, #2668]	; 80bc <rb_sha256_crypt_r+0xa98>
    764c:	add	r0, pc, r0
    7650:	add	r0, r0, #2000	; 0x7d0
    7654:	add	r0, r0, #8
    7658:	bl	4c10 <strncmp@plt>
    765c:	cmp	r0, #0
    7660:	moveq	r3, r4
    7664:	addeq	r3, r3, #3
    7668:	streq	r3, [fp, #-460]	; 0xfffffe34
    766c:	mov	r2, #7
    7670:	ldr	r1, [pc, #2632]	; 80c0 <rb_sha256_crypt_r+0xa9c>
    7674:	add	r1, pc, r1
    7678:	add	r1, r1, #2000	; 0x7d0
    767c:	add	r1, r1, #12
    7680:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7684:	bl	4c10 <strncmp@plt>
    7688:	subs	r3, r0, #0
    768c:	str	r3, [fp, #-484]	; 0xfffffe1c
    7690:	beq	7970 <rb_sha256_crypt_r+0x34c>
    7694:	mov	r3, #0
    7698:	str	r3, [fp, #-484]	; 0xfffffe1c
    769c:	ldr	sl, [pc, #2592]	; 80c4 <rb_sha256_crypt_r+0xaa0>
    76a0:	ldr	r1, [pc, #2592]	; 80c8 <rb_sha256_crypt_r+0xaa4>
    76a4:	add	r1, pc, r1
    76a8:	ldr	r0, [fp, #-460]	; 0xfffffe34
    76ac:	bl	4be0 <strcspn@plt>
    76b0:	mov	r6, r0
    76b4:	cmp	r0, #16
    76b8:	movcc	r6, r0
    76bc:	movcs	r6, #16
    76c0:	mov	r0, r7
    76c4:	bl	47e4 <strlen@plt>
    76c8:	mov	r4, r0
    76cc:	tst	r7, #3
    76d0:	moveq	r3, #0
    76d4:	streq	r3, [fp, #-488]	; 0xfffffe18
    76d8:	bne	79c4 <rb_sha256_crypt_r+0x3a0>
    76dc:	ldr	r3, [fp, #-460]	; 0xfffffe34
    76e0:	tst	r3, #3
    76e4:	moveq	r3, #0
    76e8:	streq	r3, [fp, #-492]	; 0xfffffe14
    76ec:	bne	79ec <rb_sha256_crypt_r+0x3c8>
    76f0:	sub	r5, fp, #272	; 0x110
    76f4:	mov	r0, r5
    76f8:	bl	5b24 <rb_sha256_init_ctx>
    76fc:	mov	r2, r5
    7700:	mov	r1, r4
    7704:	mov	r0, r7
    7708:	bl	6e04 <rb_sha256_process_bytes>
    770c:	mov	r2, r5
    7710:	mov	r1, r6
    7714:	ldr	r8, [fp, #-460]	; 0xfffffe34
    7718:	mov	r0, r8
    771c:	bl	6e04 <rb_sha256_process_bytes>
    7720:	sub	r5, fp, #444	; 0x1bc
    7724:	mov	r0, r5
    7728:	bl	5b24 <rb_sha256_init_ctx>
    772c:	mov	r2, r5
    7730:	mov	r1, r4
    7734:	mov	r0, r7
    7738:	bl	6e04 <rb_sha256_process_bytes>
    773c:	mov	r2, r5
    7740:	mov	r1, r6
    7744:	mov	r0, r8
    7748:	bl	6e04 <rb_sha256_process_bytes>
    774c:	mov	r2, r5
    7750:	mov	r1, r4
    7754:	mov	r0, r7
    7758:	bl	6e04 <rb_sha256_process_bytes>
    775c:	sub	r1, fp, #68	; 0x44
    7760:	mov	r0, r5
    7764:	bl	6fbc <rb_sha256_finish_ctx>
    7768:	cmp	r4, #32
    776c:	bls	7a14 <rb_sha256_crypt_r+0x3f0>
    7770:	mov	r5, r4
    7774:	sub	r8, fp, #272	; 0x110
    7778:	sub	r9, fp, #68	; 0x44
    777c:	mov	r2, r8
    7780:	mov	r1, #32
    7784:	mov	r0, r9
    7788:	bl	6e04 <rb_sha256_process_bytes>
    778c:	sub	r5, r5, #32
    7790:	cmp	r5, #32
    7794:	bhi	777c <rb_sha256_crypt_r+0x158>
    7798:	sub	r1, r4, #33	; 0x21
    779c:	bic	r3, r1, #31
    77a0:	sub	r1, r4, #32
    77a4:	sub	r1, r1, r3
    77a8:	sub	r2, fp, #272	; 0x110
    77ac:	sub	r0, fp, #68	; 0x44
    77b0:	bl	6e04 <rb_sha256_process_bytes>
    77b4:	cmp	r4, #0
    77b8:	beq	807c <rb_sha256_crypt_r+0xa58>
    77bc:	mov	r5, r4
    77c0:	sub	r8, fp, #272	; 0x110
    77c4:	sub	r9, fp, #68	; 0x44
    77c8:	tst	r5, #1
    77cc:	mov	r2, r8
    77d0:	movne	r1, #32
    77d4:	movne	r0, r9
    77d8:	moveq	r1, r4
    77dc:	moveq	r0, r7
    77e0:	bl	6e04 <rb_sha256_process_bytes>
    77e4:	lsrs	r5, r5, #1
    77e8:	bne	77c8 <rb_sha256_crypt_r+0x1a4>
    77ec:	sub	r1, fp, #68	; 0x44
    77f0:	sub	r0, fp, #272	; 0x110
    77f4:	bl	6fbc <rb_sha256_finish_ctx>
    77f8:	sub	r0, fp, #444	; 0x1bc
    77fc:	bl	5b24 <rb_sha256_init_ctx>
    7800:	sub	r8, fp, #444	; 0x1bc
    7804:	mov	r2, r8
    7808:	mov	r1, r4
    780c:	mov	r0, r7
    7810:	bl	6e04 <rb_sha256_process_bytes>
    7814:	add	r5, r5, #1
    7818:	cmp	r4, r5
    781c:	bne	7804 <rb_sha256_crypt_r+0x1e0>
    7820:	sub	r1, fp, #100	; 0x64
    7824:	sub	r0, fp, #444	; 0x1bc
    7828:	bl	6fbc <rb_sha256_finish_ctx>
    782c:	add	r3, r4, #14
    7830:	bic	r3, r3, #7
    7834:	sub	sp, sp, r3
    7838:	add	r3, sp, #8
    783c:	str	r3, [fp, #-464]	; 0xfffffe30
    7840:	cmp	r4, #31
    7844:	bls	7a1c <rb_sha256_crypt_r+0x3f8>
    7848:	add	r7, sp, #40	; 0x28
    784c:	mov	r5, r4
    7850:	sub	ip, r7, #32
    7854:	sub	lr, fp, #100	; 0x64
    7858:	ldm	lr!, {r0, r1, r2, r3}
    785c:	stmia	ip!, {r0, r1, r2, r3}
    7860:	ldm	lr, {r0, r1, r2, r3}
    7864:	stm	ip, {r0, r1, r2, r3}
    7868:	sub	r5, r5, #32
    786c:	add	r7, r7, #32
    7870:	cmp	r5, #31
    7874:	bhi	7850 <rb_sha256_crypt_r+0x22c>
    7878:	sub	r0, r4, #32
    787c:	bic	r0, r0, #31
    7880:	add	r0, r0, #32
    7884:	ldr	r3, [fp, #-464]	; 0xfffffe30
    7888:	add	r0, r3, r0
    788c:	and	r2, r4, #31
    7890:	sub	r1, fp, #100	; 0x64
    7894:	bl	4808 <memcpy@plt>
    7898:	sub	r0, fp, #444	; 0x1bc
    789c:	bl	5b24 <rb_sha256_init_ctx>
    78a0:	mov	r5, #0
    78a4:	sub	r7, fp, #444	; 0x1bc
    78a8:	mov	r2, r7
    78ac:	mov	r1, r6
    78b0:	ldr	r0, [fp, #-460]	; 0xfffffe34
    78b4:	bl	6e04 <rb_sha256_process_bytes>
    78b8:	add	r5, r5, #1
    78bc:	ldrb	r3, [fp, #-68]	; 0xffffffbc
    78c0:	add	r3, r3, #16
    78c4:	cmp	r3, r5
    78c8:	bhi	78a8 <rb_sha256_crypt_r+0x284>
    78cc:	sub	r1, fp, #100	; 0x64
    78d0:	sub	r0, fp, #444	; 0x1bc
    78d4:	bl	6fbc <rb_sha256_finish_ctx>
    78d8:	add	r3, r6, #14
    78dc:	bic	r3, r3, #7
    78e0:	sub	sp, sp, r3
    78e4:	add	r3, sp, #8
    78e8:	str	r3, [fp, #-468]	; 0xfffffe2c
    78ec:	cmp	r6, #31
    78f0:	bls	7a28 <rb_sha256_crypt_r+0x404>
    78f4:	add	r7, sp, #40	; 0x28
    78f8:	mov	r5, r6
    78fc:	sub	ip, r7, #32
    7900:	sub	lr, fp, #100	; 0x64
    7904:	ldm	lr!, {r0, r1, r2, r3}
    7908:	stmia	ip!, {r0, r1, r2, r3}
    790c:	ldm	lr, {r0, r1, r2, r3}
    7910:	stm	ip, {r0, r1, r2, r3}
    7914:	sub	r5, r5, #32
    7918:	add	r7, r7, #32
    791c:	cmp	r5, #31
    7920:	bhi	78fc <rb_sha256_crypt_r+0x2d8>
    7924:	sub	r0, r6, #32
    7928:	bic	r0, r0, #31
    792c:	add	r0, r0, #32
    7930:	ldr	r3, [fp, #-468]	; 0xfffffe2c
    7934:	add	r0, r3, r0
    7938:	and	r2, r6, #31
    793c:	sub	r1, fp, #100	; 0x64
    7940:	bl	4808 <memcpy@plt>
    7944:	cmp	sl, #0
    7948:	beq	7ae8 <rb_sha256_crypt_r+0x4c4>
    794c:	mov	r5, #0
    7950:	sub	r3, fp, #272	; 0x110
    7954:	sub	r2, fp, #68	; 0x44
    7958:	str	r2, [fp, #-456]	; 0xfffffe38
    795c:	ldr	r9, [pc, #1896]	; 80cc <rb_sha256_crypt_r+0xaa8>
    7960:	ldr	r8, [pc, #1896]	; 80d0 <rb_sha256_crypt_r+0xaac>
    7964:	str	r6, [fp, #-472]	; 0xfffffe28
    7968:	mov	r6, r3
    796c:	b	7a7c <rb_sha256_crypt_r+0x458>
    7970:	mov	r2, #10
    7974:	sub	r1, fp, #448	; 0x1c0
    7978:	ldr	r3, [fp, #-460]	; 0xfffffe34
    797c:	add	r0, r3, #7
    7980:	bl	47fc <strtoul@plt>
    7984:	ldr	r3, [fp, #-448]	; 0xfffffe40
    7988:	ldrb	r2, [r3]
    798c:	cmp	r2, #36	; 0x24
    7990:	ldrne	sl, [pc, #1836]	; 80c4 <rb_sha256_crypt_r+0xaa0>
    7994:	bne	76a0 <rb_sha256_crypt_r+0x7c>
    7998:	add	r3, r3, #1
    799c:	str	r3, [fp, #-460]	; 0xfffffe34
    79a0:	ldr	r3, [pc, #1836]	; 80d4 <rb_sha256_crypt_r+0xab0>
    79a4:	cmp	r0, r3
    79a8:	movcc	sl, r0
    79ac:	movcs	sl, r3
    79b0:	cmp	sl, #1000	; 0x3e8
    79b4:	movcc	sl, #1000	; 0x3e8
    79b8:	mov	r3, #1
    79bc:	str	r3, [fp, #-484]	; 0xfffffe1c
    79c0:	b	76a0 <rb_sha256_crypt_r+0x7c>
    79c4:	add	r3, r0, #18
    79c8:	bic	r3, r3, #7
    79cc:	sub	sp, sp, r3
    79d0:	mov	r2, r0
    79d4:	mov	r1, r7
    79d8:	add	r0, sp, #12
    79dc:	bl	4808 <memcpy@plt>
    79e0:	str	r0, [fp, #-488]	; 0xfffffe18
    79e4:	mov	r7, r0
    79e8:	b	76dc <rb_sha256_crypt_r+0xb8>
    79ec:	add	r3, r6, #18
    79f0:	bic	r3, r3, #7
    79f4:	sub	sp, sp, r3
    79f8:	mov	r2, r6
    79fc:	ldr	r1, [fp, #-460]	; 0xfffffe34
    7a00:	add	r0, sp, #12
    7a04:	bl	4808 <memcpy@plt>
    7a08:	str	r0, [fp, #-492]	; 0xfffffe14
    7a0c:	str	r0, [fp, #-460]	; 0xfffffe34
    7a10:	b	76f0 <rb_sha256_crypt_r+0xcc>
    7a14:	mov	r1, r4
    7a18:	b	77a8 <rb_sha256_crypt_r+0x184>
    7a1c:	ldr	r0, [fp, #-464]	; 0xfffffe30
    7a20:	mov	r2, r4
    7a24:	b	7890 <rb_sha256_crypt_r+0x26c>
    7a28:	ldr	r0, [fp, #-468]	; 0xfffffe2c
    7a2c:	mov	r2, r6
    7a30:	b	793c <rb_sha256_crypt_r+0x318>
    7a34:	mov	r2, r6
    7a38:	ldr	r1, [fp, #-472]	; 0xfffffe28
    7a3c:	ldr	r0, [fp, #-468]	; 0xfffffe2c
    7a40:	bl	6e04 <rb_sha256_process_bytes>
    7a44:	b	7ab4 <rb_sha256_crypt_r+0x490>
    7a48:	cmp	r7, #0
    7a4c:	mov	r2, r6
    7a50:	movne	r1, #32
    7a54:	ldrne	r0, [fp, #-456]	; 0xfffffe38
    7a58:	moveq	r1, r4
    7a5c:	ldreq	r0, [fp, #-464]	; 0xfffffe30
    7a60:	bl	6e04 <rb_sha256_process_bytes>
    7a64:	ldr	r1, [fp, #-456]	; 0xfffffe38
    7a68:	mov	r0, r6
    7a6c:	bl	6fbc <rb_sha256_finish_ctx>
    7a70:	add	r5, r5, #1
    7a74:	cmp	sl, r5
    7a78:	beq	7ae4 <rb_sha256_crypt_r+0x4c0>
    7a7c:	mov	r0, r6
    7a80:	bl	5b24 <rb_sha256_init_ctx>
    7a84:	ands	r7, r5, #1
    7a88:	mov	r2, r6
    7a8c:	movne	r1, r4
    7a90:	ldrne	r0, [fp, #-464]	; 0xfffffe30
    7a94:	moveq	r1, #32
    7a98:	ldreq	r0, [fp, #-456]	; 0xfffffe38
    7a9c:	bl	6e04 <rb_sha256_process_bytes>
    7aa0:	umull	r2, r3, r9, r5
    7aa4:	lsr	r3, r3, #1
    7aa8:	add	r3, r3, r3, lsl #1
    7aac:	cmp	r5, r3
    7ab0:	bne	7a34 <rb_sha256_crypt_r+0x410>
    7ab4:	umull	r2, r3, r8, r5
    7ab8:	sub	r2, r5, r3
    7abc:	add	r3, r3, r2, lsr #1
    7ac0:	lsr	r3, r3, #2
    7ac4:	rsb	r3, r3, r3, lsl #3
    7ac8:	cmp	r5, r3
    7acc:	beq	7a48 <rb_sha256_crypt_r+0x424>
    7ad0:	mov	r2, r6
    7ad4:	mov	r1, r4
    7ad8:	ldr	r0, [fp, #-464]	; 0xfffffe30
    7adc:	bl	6e04 <rb_sha256_process_bytes>
    7ae0:	b	7a48 <rb_sha256_crypt_r+0x424>
    7ae4:	ldr	r6, [fp, #-472]	; 0xfffffe28
    7ae8:	ldr	r3, [fp, #-480]	; 0xfffffe20
    7aec:	bic	r7, r3, r3, asr #31
    7af0:	mov	r2, r7
    7af4:	mov	r1, #0
    7af8:	ldr	r5, [fp, #-476]	; 0xfffffe24
    7afc:	mov	r0, r5
    7b00:	bl	4628 <memset@plt>
    7b04:	mov	r2, r7
    7b08:	ldr	r1, [pc, #1480]	; 80d8 <rb_sha256_crypt_r+0xab4>
    7b0c:	add	r1, pc, r1
    7b10:	add	r1, r1, #2000	; 0x7d0
    7b14:	add	r1, r1, #8
    7b18:	mov	r0, r5
    7b1c:	bl	4574 <strncpy@plt>
    7b20:	mov	r1, #0
    7b24:	mov	r0, r5
    7b28:	bl	45b0 <strchr@plt>
    7b2c:	subs	r5, r0, #0
    7b30:	ldreq	r3, [fp, #-476]	; 0xfffffe24
    7b34:	addeq	r5, r3, r7
    7b38:	ldr	r3, [fp, #-480]	; 0xfffffe20
    7b3c:	sub	r7, r3, #3
    7b40:	ldr	r3, [fp, #-484]	; 0xfffffe1c
    7b44:	cmp	r3, #0
    7b48:	bne	802c <rb_sha256_crypt_r+0xa08>
    7b4c:	mov	r2, r6
    7b50:	mov	r1, #0
    7b54:	mov	r0, r5
    7b58:	bl	4628 <memset@plt>
    7b5c:	bic	r8, r7, r7, asr #31
    7b60:	cmp	r8, r6
    7b64:	movcs	r8, r6
    7b68:	mov	r2, r8
    7b6c:	ldr	r1, [fp, #-460]	; 0xfffffe34
    7b70:	mov	r0, r5
    7b74:	bl	4574 <strncpy@plt>
    7b78:	mov	r1, #0
    7b7c:	ldr	r0, [fp, #-476]	; 0xfffffe24
    7b80:	bl	45b0 <strchr@plt>
    7b84:	cmp	r0, #0
    7b88:	moveq	r0, r6
    7b8c:	sub	r7, r7, r8
    7b90:	cmp	r7, #0
    7b94:	ble	7c04 <rb_sha256_crypt_r+0x5e0>
    7b98:	add	ip, r0, #1
    7b9c:	mov	r3, #36	; 0x24
    7ba0:	strb	r3, [r0]
    7ba4:	sub	r3, r7, #1
    7ba8:	ldrb	r1, [fp, #-68]	; 0xffffffbc
    7bac:	ldrb	r2, [fp, #-58]	; 0xffffffc6
    7bb0:	lsl	r2, r2, #8
    7bb4:	orr	r2, r2, r1, lsl #16
    7bb8:	ldrb	r1, [fp, #-48]	; 0xffffffd0
    7bbc:	orr	r2, r2, r1
    7bc0:	cmp	r3, #0
    7bc4:	ble	8060 <rb_sha256_crypt_r+0xa3c>
    7bc8:	mov	r7, r3
    7bcc:	ldr	r0, [pc, #1288]	; 80dc <rb_sha256_crypt_r+0xab8>
    7bd0:	add	r0, pc, r0
    7bd4:	and	r1, r2, #63	; 0x3f
    7bd8:	add	r1, r0, r1
    7bdc:	ldrb	r1, [r1, #848]	; 0x350
    7be0:	strb	r1, [ip], #1
    7be4:	sub	r7, r7, #1
    7be8:	lsr	r2, r2, #6
    7bec:	add	r1, r7, #4
    7bf0:	sub	r1, r1, r3
    7bf4:	cmp	r1, #0
    7bf8:	cmpgt	r7, #0
    7bfc:	bgt	7bd4 <rb_sha256_crypt_r+0x5b0>
    7c00:	mov	r0, ip
    7c04:	ldrb	r3, [fp, #-47]	; 0xffffffd1
    7c08:	ldrb	r2, [fp, #-67]	; 0xffffffbd
    7c0c:	lsl	r2, r2, #8
    7c10:	orr	r2, r2, r3, lsl #16
    7c14:	ldrb	r3, [fp, #-57]	; 0xffffffc7
    7c18:	orr	r2, r2, r3
    7c1c:	cmp	r7, #0
    7c20:	ble	7cb4 <rb_sha256_crypt_r+0x690>
    7c24:	mov	r3, r7
    7c28:	ldr	ip, [pc, #1200]	; 80e0 <rb_sha256_crypt_r+0xabc>
    7c2c:	add	ip, pc, ip
    7c30:	and	r1, r2, #63	; 0x3f
    7c34:	add	r1, ip, r1
    7c38:	ldrb	r1, [r1, #848]	; 0x350
    7c3c:	strb	r1, [r0], #1
    7c40:	sub	r3, r3, #1
    7c44:	lsr	r2, r2, #6
    7c48:	add	r1, r3, #4
    7c4c:	sub	r1, r1, r7
    7c50:	cmp	r1, #0
    7c54:	cmpgt	r3, #0
    7c58:	bgt	7c30 <rb_sha256_crypt_r+0x60c>
    7c5c:	ldrb	r1, [fp, #-56]	; 0xffffffc8
    7c60:	ldrb	r2, [fp, #-46]	; 0xffffffd2
    7c64:	lsl	r2, r2, #8
    7c68:	orr	r2, r2, r1, lsl #16
    7c6c:	ldrb	r1, [fp, #-66]	; 0xffffffbe
    7c70:	orr	r2, r2, r1
    7c74:	cmp	r3, #0
    7c78:	ble	7d0c <rb_sha256_crypt_r+0x6e8>
    7c7c:	mov	r7, r3
    7c80:	ldr	ip, [pc, #1116]	; 80e4 <rb_sha256_crypt_r+0xac0>
    7c84:	add	ip, pc, ip
    7c88:	and	r1, r2, #63	; 0x3f
    7c8c:	add	r1, ip, r1
    7c90:	ldrb	r1, [r1, #848]	; 0x350
    7c94:	strb	r1, [r0], #1
    7c98:	sub	r7, r7, #1
    7c9c:	lsr	r2, r2, #6
    7ca0:	add	r1, r7, #4
    7ca4:	sub	r1, r1, r3
    7ca8:	cmp	r1, #0
    7cac:	cmpgt	r7, #0
    7cb0:	bgt	7c88 <rb_sha256_crypt_r+0x664>
    7cb4:	ldrb	r3, [fp, #-65]	; 0xffffffbf
    7cb8:	ldrb	r2, [fp, #-55]	; 0xffffffc9
    7cbc:	lsl	r2, r2, #8
    7cc0:	orr	r2, r2, r3, lsl #16
    7cc4:	ldrb	r3, [fp, #-45]	; 0xffffffd3
    7cc8:	orr	r2, r2, r3
    7ccc:	cmp	r7, #0
    7cd0:	ble	7d64 <rb_sha256_crypt_r+0x740>
    7cd4:	mov	r3, r7
    7cd8:	ldr	ip, [pc, #1032]	; 80e8 <rb_sha256_crypt_r+0xac4>
    7cdc:	add	ip, pc, ip
    7ce0:	and	r1, r2, #63	; 0x3f
    7ce4:	add	r1, ip, r1
    7ce8:	ldrb	r1, [r1, #848]	; 0x350
    7cec:	strb	r1, [r0], #1
    7cf0:	sub	r3, r3, #1
    7cf4:	lsr	r2, r2, #6
    7cf8:	add	r1, r3, #4
    7cfc:	sub	r1, r1, r7
    7d00:	cmp	r1, #0
    7d04:	cmpgt	r3, #0
    7d08:	bgt	7ce0 <rb_sha256_crypt_r+0x6bc>
    7d0c:	ldrb	r1, [fp, #-44]	; 0xffffffd4
    7d10:	ldrb	r2, [fp, #-64]	; 0xffffffc0
    7d14:	lsl	r2, r2, #8
    7d18:	orr	r2, r2, r1, lsl #16
    7d1c:	ldrb	r1, [fp, #-54]	; 0xffffffca
    7d20:	orr	r2, r2, r1
    7d24:	cmp	r3, #0
    7d28:	ble	7dbc <rb_sha256_crypt_r+0x798>
    7d2c:	mov	r7, r3
    7d30:	ldr	ip, [pc, #948]	; 80ec <rb_sha256_crypt_r+0xac8>
    7d34:	add	ip, pc, ip
    7d38:	and	r1, r2, #63	; 0x3f
    7d3c:	add	r1, ip, r1
    7d40:	ldrb	r1, [r1, #848]	; 0x350
    7d44:	strb	r1, [r0], #1
    7d48:	sub	r7, r7, #1
    7d4c:	lsr	r2, r2, #6
    7d50:	add	r1, r7, #4
    7d54:	sub	r1, r1, r3
    7d58:	cmp	r1, #0
    7d5c:	cmpgt	r7, #0
    7d60:	bgt	7d38 <rb_sha256_crypt_r+0x714>
    7d64:	ldrb	r3, [fp, #-53]	; 0xffffffcb
    7d68:	ldrb	r2, [fp, #-43]	; 0xffffffd5
    7d6c:	lsl	r2, r2, #8
    7d70:	orr	r2, r2, r3, lsl #16
    7d74:	ldrb	r3, [fp, #-63]	; 0xffffffc1
    7d78:	orr	r2, r2, r3
    7d7c:	cmp	r7, #0
    7d80:	ble	7e14 <rb_sha256_crypt_r+0x7f0>
    7d84:	mov	r3, r7
    7d88:	ldr	ip, [pc, #864]	; 80f0 <rb_sha256_crypt_r+0xacc>
    7d8c:	add	ip, pc, ip
    7d90:	and	r1, r2, #63	; 0x3f
    7d94:	add	r1, ip, r1
    7d98:	ldrb	r1, [r1, #848]	; 0x350
    7d9c:	strb	r1, [r0], #1
    7da0:	sub	r3, r3, #1
    7da4:	lsr	r2, r2, #6
    7da8:	add	r1, r3, #4
    7dac:	sub	r1, r1, r7
    7db0:	cmp	r1, #0
    7db4:	cmpgt	r3, #0
    7db8:	bgt	7d90 <rb_sha256_crypt_r+0x76c>
    7dbc:	ldrb	r1, [fp, #-62]	; 0xffffffc2
    7dc0:	ldrb	r2, [fp, #-52]	; 0xffffffcc
    7dc4:	lsl	r2, r2, #8
    7dc8:	orr	r2, r2, r1, lsl #16
    7dcc:	ldrb	r1, [fp, #-42]	; 0xffffffd6
    7dd0:	orr	r2, r2, r1
    7dd4:	cmp	r3, #0
    7dd8:	ble	7e6c <rb_sha256_crypt_r+0x848>
    7ddc:	mov	r7, r3
    7de0:	ldr	ip, [pc, #780]	; 80f4 <rb_sha256_crypt_r+0xad0>
    7de4:	add	ip, pc, ip
    7de8:	and	r1, r2, #63	; 0x3f
    7dec:	add	r1, ip, r1
    7df0:	ldrb	r1, [r1, #848]	; 0x350
    7df4:	strb	r1, [r0], #1
    7df8:	sub	r7, r7, #1
    7dfc:	lsr	r2, r2, #6
    7e00:	add	r1, r7, #4
    7e04:	sub	r1, r1, r3
    7e08:	cmp	r1, #0
    7e0c:	cmpgt	r7, #0
    7e10:	bgt	7de8 <rb_sha256_crypt_r+0x7c4>
    7e14:	ldrb	r3, [fp, #-41]	; 0xffffffd7
    7e18:	ldrb	r2, [fp, #-61]	; 0xffffffc3
    7e1c:	lsl	r2, r2, #8
    7e20:	orr	r2, r2, r3, lsl #16
    7e24:	ldrb	r3, [fp, #-51]	; 0xffffffcd
    7e28:	orr	r2, r2, r3
    7e2c:	cmp	r7, #0
    7e30:	ble	7ec4 <rb_sha256_crypt_r+0x8a0>
    7e34:	mov	r3, r7
    7e38:	ldr	ip, [pc, #696]	; 80f8 <rb_sha256_crypt_r+0xad4>
    7e3c:	add	ip, pc, ip
    7e40:	and	r1, r2, #63	; 0x3f
    7e44:	add	r1, ip, r1
    7e48:	ldrb	r1, [r1, #848]	; 0x350
    7e4c:	strb	r1, [r0], #1
    7e50:	sub	r3, r3, #1
    7e54:	lsr	r2, r2, #6
    7e58:	add	r1, r3, #4
    7e5c:	sub	r1, r1, r7
    7e60:	cmp	r1, #0
    7e64:	cmpgt	r3, #0
    7e68:	bgt	7e40 <rb_sha256_crypt_r+0x81c>
    7e6c:	ldrb	r1, [fp, #-50]	; 0xffffffce
    7e70:	ldrb	r2, [fp, #-40]	; 0xffffffd8
    7e74:	lsl	r2, r2, #8
    7e78:	orr	r2, r2, r1, lsl #16
    7e7c:	ldrb	r1, [fp, #-60]	; 0xffffffc4
    7e80:	orr	r2, r2, r1
    7e84:	cmp	r3, #0
    7e88:	ble	7f68 <rb_sha256_crypt_r+0x944>
    7e8c:	mov	r7, r3
    7e90:	ldr	ip, [pc, #612]	; 80fc <rb_sha256_crypt_r+0xad8>
    7e94:	add	ip, pc, ip
    7e98:	and	r1, r2, #63	; 0x3f
    7e9c:	add	r1, ip, r1
    7ea0:	ldrb	r1, [r1, #848]	; 0x350
    7ea4:	strb	r1, [r0], #1
    7ea8:	sub	r7, r7, #1
    7eac:	lsr	r2, r2, #6
    7eb0:	add	r1, r7, #4
    7eb4:	sub	r1, r1, r3
    7eb8:	cmp	r1, #0
    7ebc:	cmpgt	r7, #0
    7ec0:	bgt	7e98 <rb_sha256_crypt_r+0x874>
    7ec4:	ldrb	r3, [fp, #-59]	; 0xffffffc5
    7ec8:	ldrb	r2, [fp, #-49]	; 0xffffffcf
    7ecc:	lsl	r2, r2, #8
    7ed0:	orr	r2, r2, r3, lsl #16
    7ed4:	ldrb	r3, [fp, #-39]	; 0xffffffd9
    7ed8:	orr	r2, r2, r3
    7edc:	cmp	r7, #0
    7ee0:	ble	8068 <rb_sha256_crypt_r+0xa44>
    7ee4:	mov	r3, r7
    7ee8:	ldr	lr, [pc, #528]	; 8100 <rb_sha256_crypt_r+0xadc>
    7eec:	add	lr, pc, lr
    7ef0:	and	r1, r2, #63	; 0x3f
    7ef4:	add	r1, lr, r1
    7ef8:	ldrb	r1, [r1, #848]	; 0x350
    7efc:	strb	r1, [r0], #1
    7f00:	sub	r3, r3, #1
    7f04:	lsr	r2, r2, #6
    7f08:	mov	ip, r3
    7f0c:	add	r1, r3, #4
    7f10:	sub	r1, r1, r7
    7f14:	cmp	r1, #0
    7f18:	cmpgt	r3, #0
    7f1c:	bgt	7ef0 <rb_sha256_crypt_r+0x8cc>
    7f20:	ldrb	r1, [fp, #-37]	; 0xffffffdb
    7f24:	ldrb	r2, [fp, #-38]	; 0xffffffda
    7f28:	orr	r2, r2, r1, lsl #8
    7f2c:	cmp	r3, #0
    7f30:	ble	7f68 <rb_sha256_crypt_r+0x944>
    7f34:	ldr	lr, [pc, #456]	; 8104 <rb_sha256_crypt_r+0xae0>
    7f38:	add	lr, pc, lr
    7f3c:	and	r1, r2, #63	; 0x3f
    7f40:	add	r1, lr, r1
    7f44:	ldrb	r1, [r1, #848]	; 0x350
    7f48:	strb	r1, [r0], #1
    7f4c:	sub	r3, r3, #1
    7f50:	lsr	r2, r2, #6
    7f54:	add	r1, r3, #3
    7f58:	sub	r1, r1, ip
    7f5c:	cmp	r1, #0
    7f60:	cmpgt	r3, #0
    7f64:	bgt	7f3c <rb_sha256_crypt_r+0x918>
    7f68:	cmp	r3, #0
    7f6c:	ble	8068 <rb_sha256_crypt_r+0xa44>
    7f70:	mov	r3, #0
    7f74:	strb	r3, [r0]
    7f78:	ldr	r5, [fp, #-476]	; 0xfffffe24
    7f7c:	sub	r7, fp, #272	; 0x110
    7f80:	mov	r0, r7
    7f84:	bl	5b24 <rb_sha256_init_ctx>
    7f88:	sub	r1, fp, #68	; 0x44
    7f8c:	mov	r0, r7
    7f90:	bl	6fbc <rb_sha256_finish_ctx>
    7f94:	mov	r2, #32
    7f98:	mov	r1, #0
    7f9c:	sub	r0, fp, #100	; 0x64
    7fa0:	bl	4628 <memset@plt>
    7fa4:	mov	r2, r4
    7fa8:	mov	r1, #0
    7fac:	ldr	r0, [fp, #-464]	; 0xfffffe30
    7fb0:	bl	4628 <memset@plt>
    7fb4:	mov	r2, r6
    7fb8:	mov	r1, #0
    7fbc:	ldr	r0, [fp, #-468]	; 0xfffffe2c
    7fc0:	bl	4628 <memset@plt>
    7fc4:	mov	r8, #172	; 0xac
    7fc8:	mov	r2, r8
    7fcc:	mov	r1, #0
    7fd0:	mov	r0, r7
    7fd4:	bl	4628 <memset@plt>
    7fd8:	mov	r2, r8
    7fdc:	mov	r1, #0
    7fe0:	sub	r0, fp, #444	; 0x1bc
    7fe4:	bl	4628 <memset@plt>
    7fe8:	ldr	r3, [fp, #-488]	; 0xfffffe18
    7fec:	cmp	r3, #0
    7ff0:	beq	8004 <rb_sha256_crypt_r+0x9e0>
    7ff4:	mov	r2, r4
    7ff8:	mov	r1, #0
    7ffc:	mov	r0, r3
    8000:	bl	4628 <memset@plt>
    8004:	ldr	r3, [fp, #-492]	; 0xfffffe14
    8008:	cmp	r3, #0
    800c:	beq	8020 <rb_sha256_crypt_r+0x9fc>
    8010:	mov	r2, r6
    8014:	mov	r1, #0
    8018:	mov	r0, r3
    801c:	bl	4628 <memset@plt>
    8020:	mov	r0, r5
    8024:	sub	sp, fp, #32
    8028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    802c:	str	sl, [sp]
    8030:	ldr	r3, [pc, #208]	; 8108 <rb_sha256_crypt_r+0xae4>
    8034:	add	r3, pc, r3
    8038:	add	r3, r3, #2000	; 0x7d0
    803c:	add	r3, r3, #12
    8040:	ldr	r2, [pc, #196]	; 810c <rb_sha256_crypt_r+0xae8>
    8044:	add	r2, pc, r2
    8048:	bic	r1, r7, r7, asr #31
    804c:	mov	r0, r5
    8050:	bl	4bb0 <snprintf@plt>
    8054:	add	r5, r5, r0
    8058:	sub	r7, r7, r0
    805c:	b	7b4c <rb_sha256_crypt_r+0x528>
    8060:	mov	r0, ip
    8064:	b	7c5c <rb_sha256_crypt_r+0x638>
    8068:	bl	4ce8 <__errno_location@plt>
    806c:	mov	r3, #34	; 0x22
    8070:	str	r3, [r0]
    8074:	mov	r5, #0
    8078:	b	7f7c <rb_sha256_crypt_r+0x958>
    807c:	sub	r1, fp, #68	; 0x44
    8080:	sub	r0, fp, #272	; 0x110
    8084:	bl	6fbc <rb_sha256_finish_ctx>
    8088:	sub	r5, fp, #444	; 0x1bc
    808c:	mov	r0, r5
    8090:	bl	5b24 <rb_sha256_init_ctx>
    8094:	sub	r1, fp, #100	; 0x64
    8098:	mov	r0, r5
    809c:	bl	6fbc <rb_sha256_finish_ctx>
    80a0:	add	r3, r4, #14
    80a4:	bic	r3, r3, #7
    80a8:	sub	sp, sp, r3
    80ac:	add	r0, sp, #8
    80b0:	str	r0, [fp, #-464]	; 0xfffffe30
    80b4:	mov	r2, r4
    80b8:	b	7890 <rb_sha256_crypt_r+0x26c>
    80bc:	.word	0x0000dfec
    80c0:	.word	0x0000dfc4
    80c4:	.word	0x00001388
    80c8:	.word	0x0000e794
    80cc:	.word	0xaaaaaaab
    80d0:	.word	0x24924925
    80d4:	.word	0x3b9ac9ff
    80d8:	.word	0x0000db2c
    80dc:	.word	0x0000da68
    80e0:	.word	0x0000da0c
    80e4:	.word	0x0000d9b4
    80e8:	.word	0x0000d95c
    80ec:	.word	0x0000d904
    80f0:	.word	0x0000d8ac
    80f4:	.word	0x0000d854
    80f8:	.word	0x0000d7fc
    80fc:	.word	0x0000d7a4
    8100:	.word	0x0000d74c
    8104:	.word	0x0000d700
    8108:	.word	0x0000d604
    810c:	.word	0x0000ddf8

00008110 <rb_sha512_crypt_r>:
    8110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8114:	add	fp, sp, #32
    8118:	sub	sp, sp, #876	; 0x36c
    811c:	mov	r6, r0
    8120:	mov	r4, r1
    8124:	str	r1, [fp, #-868]	; 0xfffffc9c
    8128:	str	r2, [fp, #-884]	; 0xfffffc8c
    812c:	str	r3, [fp, #-888]	; 0xfffffc88
    8130:	mov	r2, #3
    8134:	ldr	r0, [pc, #3660]	; 8f88 <rb_sha512_crypt_r+0xe78>
    8138:	add	r0, pc, r0
    813c:	add	r0, r0, #2016	; 0x7e0
    8140:	add	r0, r0, #4
    8144:	bl	4c10 <strncmp@plt>
    8148:	cmp	r0, #0
    814c:	moveq	r3, r4
    8150:	addeq	r3, r3, #3
    8154:	streq	r3, [fp, #-868]	; 0xfffffc9c
    8158:	mov	r2, #7
    815c:	ldr	r1, [pc, #3624]	; 8f8c <rb_sha512_crypt_r+0xe7c>
    8160:	add	r1, pc, r1
    8164:	add	r1, r1, #2016	; 0x7e0
    8168:	add	r1, r1, #8
    816c:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    8170:	bl	4c10 <strncmp@plt>
    8174:	subs	r3, r0, #0
    8178:	str	r3, [fp, #-892]	; 0xfffffc84
    817c:	beq	847c <rb_sha512_crypt_r+0x36c>
    8180:	mov	r3, #0
    8184:	str	r3, [fp, #-892]	; 0xfffffc84
    8188:	ldr	r7, [pc, #3584]	; 8f90 <rb_sha512_crypt_r+0xe80>
    818c:	ldr	r1, [pc, #3584]	; 8f94 <rb_sha512_crypt_r+0xe84>
    8190:	add	r1, pc, r1
    8194:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    8198:	bl	4be0 <strcspn@plt>
    819c:	mov	sl, r0
    81a0:	cmp	r0, #16
    81a4:	movcc	sl, r0
    81a8:	movcs	sl, #16
    81ac:	mov	r0, r6
    81b0:	bl	47e4 <strlen@plt>
    81b4:	mov	r5, r0
    81b8:	tst	r6, #7
    81bc:	moveq	r3, #0
    81c0:	streq	r3, [fp, #-896]	; 0xfffffc80
    81c4:	bne	84cc <rb_sha512_crypt_r+0x3bc>
    81c8:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    81cc:	tst	r3, #7
    81d0:	moveq	r3, #0
    81d4:	streq	r3, [fp, #-900]	; 0xfffffc7c
    81d8:	bne	84f4 <rb_sha512_crypt_r+0x3e4>
    81dc:	sub	r4, fp, #508	; 0x1fc
    81e0:	mov	r0, r4
    81e4:	bl	61d0 <rb_sha512_init_ctx>
    81e8:	mov	r2, r4
    81ec:	mov	r1, r5
    81f0:	mov	r0, r6
    81f4:	bl	70cc <rb_sha512_process_bytes>
    81f8:	mov	r2, r4
    81fc:	mov	r1, sl
    8200:	ldr	r8, [fp, #-868]	; 0xfffffc9c
    8204:	mov	r0, r8
    8208:	bl	70cc <rb_sha512_process_bytes>
    820c:	sub	r4, fp, #852	; 0x354
    8210:	mov	r0, r4
    8214:	bl	61d0 <rb_sha512_init_ctx>
    8218:	mov	r2, r4
    821c:	mov	r1, r5
    8220:	mov	r0, r6
    8224:	bl	70cc <rb_sha512_process_bytes>
    8228:	mov	r2, r4
    822c:	mov	r1, sl
    8230:	mov	r0, r8
    8234:	bl	70cc <rb_sha512_process_bytes>
    8238:	mov	r2, r4
    823c:	mov	r1, r5
    8240:	mov	r0, r6
    8244:	bl	70cc <rb_sha512_process_bytes>
    8248:	sub	r1, fp, #100	; 0x64
    824c:	mov	r0, r4
    8250:	bl	7268 <rb_sha512_finish_ctx>
    8254:	cmp	r5, #64	; 0x40
    8258:	bls	851c <rb_sha512_crypt_r+0x40c>
    825c:	mov	r4, r5
    8260:	sub	r8, fp, #508	; 0x1fc
    8264:	sub	r9, fp, #100	; 0x64
    8268:	mov	r2, r8
    826c:	mov	r1, #64	; 0x40
    8270:	mov	r0, r9
    8274:	bl	70cc <rb_sha512_process_bytes>
    8278:	sub	r4, r4, #64	; 0x40
    827c:	cmp	r4, #64	; 0x40
    8280:	bhi	8268 <rb_sha512_crypt_r+0x158>
    8284:	sub	r1, r5, #65	; 0x41
    8288:	bic	r3, r1, #63	; 0x3f
    828c:	sub	r1, r5, #64	; 0x40
    8290:	sub	r1, r1, r3
    8294:	sub	r2, fp, #508	; 0x1fc
    8298:	sub	r0, fp, #100	; 0x64
    829c:	bl	70cc <rb_sha512_process_bytes>
    82a0:	cmp	r5, #0
    82a4:	beq	8f48 <rb_sha512_crypt_r+0xe38>
    82a8:	mov	r4, r5
    82ac:	sub	r8, fp, #508	; 0x1fc
    82b0:	sub	r9, fp, #100	; 0x64
    82b4:	tst	r4, #1
    82b8:	mov	r2, r8
    82bc:	movne	r1, #64	; 0x40
    82c0:	movne	r0, r9
    82c4:	moveq	r1, r5
    82c8:	moveq	r0, r6
    82cc:	bl	70cc <rb_sha512_process_bytes>
    82d0:	lsrs	r4, r4, #1
    82d4:	bne	82b4 <rb_sha512_crypt_r+0x1a4>
    82d8:	sub	r1, fp, #100	; 0x64
    82dc:	sub	r0, fp, #508	; 0x1fc
    82e0:	bl	7268 <rb_sha512_finish_ctx>
    82e4:	sub	r0, fp, #852	; 0x354
    82e8:	bl	61d0 <rb_sha512_init_ctx>
    82ec:	sub	r8, fp, #852	; 0x354
    82f0:	mov	r2, r8
    82f4:	mov	r1, r5
    82f8:	mov	r0, r6
    82fc:	bl	70cc <rb_sha512_process_bytes>
    8300:	add	r4, r4, #1
    8304:	cmp	r5, r4
    8308:	bne	82f0 <rb_sha512_crypt_r+0x1e0>
    830c:	sub	r1, fp, #164	; 0xa4
    8310:	sub	r0, fp, #852	; 0x354
    8314:	bl	7268 <rb_sha512_finish_ctx>
    8318:	add	r3, r5, #14
    831c:	bic	r3, r3, #7
    8320:	sub	sp, sp, r3
    8324:	add	r3, sp, #8
    8328:	str	r3, [fp, #-872]	; 0xfffffc98
    832c:	cmp	r5, #63	; 0x3f
    8330:	bls	8524 <rb_sha512_crypt_r+0x414>
    8334:	add	r6, sp, #72	; 0x48
    8338:	mov	r4, r5
    833c:	sub	ip, r6, #64	; 0x40
    8340:	sub	lr, fp, #164	; 0xa4
    8344:	ldm	lr!, {r0, r1, r2, r3}
    8348:	stmia	ip!, {r0, r1, r2, r3}
    834c:	ldm	lr!, {r0, r1, r2, r3}
    8350:	stmia	ip!, {r0, r1, r2, r3}
    8354:	ldm	lr!, {r0, r1, r2, r3}
    8358:	stmia	ip!, {r0, r1, r2, r3}
    835c:	ldm	lr, {r0, r1, r2, r3}
    8360:	stm	ip, {r0, r1, r2, r3}
    8364:	sub	r4, r4, #64	; 0x40
    8368:	add	r6, r6, #64	; 0x40
    836c:	cmp	r4, #63	; 0x3f
    8370:	bhi	833c <rb_sha512_crypt_r+0x22c>
    8374:	sub	r0, r5, #64	; 0x40
    8378:	bic	r0, r0, #63	; 0x3f
    837c:	add	r0, r0, #64	; 0x40
    8380:	ldr	r3, [fp, #-872]	; 0xfffffc98
    8384:	add	r0, r3, r0
    8388:	and	r2, r5, #63	; 0x3f
    838c:	sub	r1, fp, #164	; 0xa4
    8390:	bl	4808 <memcpy@plt>
    8394:	sub	r0, fp, #852	; 0x354
    8398:	bl	61d0 <rb_sha512_init_ctx>
    839c:	mov	r4, #0
    83a0:	sub	r6, fp, #852	; 0x354
    83a4:	mov	r2, r6
    83a8:	mov	r1, sl
    83ac:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    83b0:	bl	70cc <rb_sha512_process_bytes>
    83b4:	add	r4, r4, #1
    83b8:	ldrb	r3, [fp, #-100]	; 0xffffff9c
    83bc:	add	r3, r3, #16
    83c0:	cmp	r3, r4
    83c4:	bhi	83a4 <rb_sha512_crypt_r+0x294>
    83c8:	sub	r1, fp, #164	; 0xa4
    83cc:	sub	r0, fp, #852	; 0x354
    83d0:	bl	7268 <rb_sha512_finish_ctx>
    83d4:	add	r3, sl, #14
    83d8:	bic	r3, r3, #7
    83dc:	sub	sp, sp, r3
    83e0:	add	r3, sp, #8
    83e4:	str	r3, [fp, #-876]	; 0xfffffc94
    83e8:	cmp	sl, #63	; 0x3f
    83ec:	bls	8530 <rb_sha512_crypt_r+0x420>
    83f0:	add	r6, sp, #72	; 0x48
    83f4:	mov	r4, sl
    83f8:	sub	ip, r6, #64	; 0x40
    83fc:	sub	lr, fp, #164	; 0xa4
    8400:	ldm	lr!, {r0, r1, r2, r3}
    8404:	stmia	ip!, {r0, r1, r2, r3}
    8408:	ldm	lr!, {r0, r1, r2, r3}
    840c:	stmia	ip!, {r0, r1, r2, r3}
    8410:	ldm	lr!, {r0, r1, r2, r3}
    8414:	stmia	ip!, {r0, r1, r2, r3}
    8418:	ldm	lr, {r0, r1, r2, r3}
    841c:	stm	ip, {r0, r1, r2, r3}
    8420:	sub	r4, r4, #64	; 0x40
    8424:	add	r6, r6, #64	; 0x40
    8428:	cmp	r4, #63	; 0x3f
    842c:	bhi	83f8 <rb_sha512_crypt_r+0x2e8>
    8430:	sub	r0, sl, #64	; 0x40
    8434:	bic	r0, r0, #63	; 0x3f
    8438:	add	r0, r0, #64	; 0x40
    843c:	ldr	r3, [fp, #-876]	; 0xfffffc94
    8440:	add	r0, r3, r0
    8444:	and	r2, sl, #63	; 0x3f
    8448:	sub	r1, fp, #164	; 0xa4
    844c:	bl	4808 <memcpy@plt>
    8450:	cmp	r7, #0
    8454:	beq	85f0 <rb_sha512_crypt_r+0x4e0>
    8458:	mov	r4, #0
    845c:	sub	r3, fp, #508	; 0x1fc
    8460:	sub	r2, fp, #100	; 0x64
    8464:	str	r2, [fp, #-864]	; 0xfffffca0
    8468:	ldr	r9, [pc, #2856]	; 8f98 <rb_sha512_crypt_r+0xe88>
    846c:	ldr	r8, [pc, #2856]	; 8f9c <rb_sha512_crypt_r+0xe8c>
    8470:	str	sl, [fp, #-880]	; 0xfffffc90
    8474:	mov	sl, r3
    8478:	b	8584 <rb_sha512_crypt_r+0x474>
    847c:	mov	r2, #10
    8480:	sub	r1, fp, #856	; 0x358
    8484:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    8488:	add	r0, r3, #7
    848c:	bl	47fc <strtoul@plt>
    8490:	ldr	r3, [fp, #-856]	; 0xfffffca8
    8494:	ldrb	r2, [r3]
    8498:	cmp	r2, #36	; 0x24
    849c:	ldrne	r7, [pc, #2796]	; 8f90 <rb_sha512_crypt_r+0xe80>
    84a0:	bne	818c <rb_sha512_crypt_r+0x7c>
    84a4:	add	r3, r3, #1
    84a8:	str	r3, [fp, #-868]	; 0xfffffc9c
    84ac:	ldr	r7, [pc, #2796]	; 8fa0 <rb_sha512_crypt_r+0xe90>
    84b0:	cmp	r0, r7
    84b4:	movcc	r7, r0
    84b8:	cmp	r7, #1000	; 0x3e8
    84bc:	movcc	r7, #1000	; 0x3e8
    84c0:	mov	r3, #1
    84c4:	str	r3, [fp, #-892]	; 0xfffffc84
    84c8:	b	818c <rb_sha512_crypt_r+0x7c>
    84cc:	add	r3, r0, #22
    84d0:	bic	r3, r3, #7
    84d4:	sub	sp, sp, r3
    84d8:	mov	r2, r0
    84dc:	mov	r1, r6
    84e0:	add	r0, sp, #16
    84e4:	bl	4808 <memcpy@plt>
    84e8:	str	r0, [fp, #-896]	; 0xfffffc80
    84ec:	mov	r6, r0
    84f0:	b	81c8 <rb_sha512_crypt_r+0xb8>
    84f4:	add	r3, sl, #22
    84f8:	bic	r3, r3, #7
    84fc:	sub	sp, sp, r3
    8500:	mov	r2, sl
    8504:	ldr	r1, [fp, #-868]	; 0xfffffc9c
    8508:	add	r0, sp, #16
    850c:	bl	4808 <memcpy@plt>
    8510:	str	r0, [fp, #-900]	; 0xfffffc7c
    8514:	str	r0, [fp, #-868]	; 0xfffffc9c
    8518:	b	81dc <rb_sha512_crypt_r+0xcc>
    851c:	mov	r1, r5
    8520:	b	8294 <rb_sha512_crypt_r+0x184>
    8524:	ldr	r0, [fp, #-872]	; 0xfffffc98
    8528:	mov	r2, r5
    852c:	b	838c <rb_sha512_crypt_r+0x27c>
    8530:	ldr	r0, [fp, #-876]	; 0xfffffc94
    8534:	mov	r2, sl
    8538:	b	8448 <rb_sha512_crypt_r+0x338>
    853c:	mov	r2, sl
    8540:	ldr	r1, [fp, #-880]	; 0xfffffc90
    8544:	ldr	r0, [fp, #-876]	; 0xfffffc94
    8548:	bl	70cc <rb_sha512_process_bytes>
    854c:	b	85bc <rb_sha512_crypt_r+0x4ac>
    8550:	cmp	r6, #0
    8554:	mov	r2, sl
    8558:	movne	r1, #64	; 0x40
    855c:	ldrne	r0, [fp, #-864]	; 0xfffffca0
    8560:	moveq	r1, r5
    8564:	ldreq	r0, [fp, #-872]	; 0xfffffc98
    8568:	bl	70cc <rb_sha512_process_bytes>
    856c:	ldr	r1, [fp, #-864]	; 0xfffffca0
    8570:	mov	r0, sl
    8574:	bl	7268 <rb_sha512_finish_ctx>
    8578:	add	r4, r4, #1
    857c:	cmp	r7, r4
    8580:	beq	85ec <rb_sha512_crypt_r+0x4dc>
    8584:	mov	r0, sl
    8588:	bl	61d0 <rb_sha512_init_ctx>
    858c:	ands	r6, r4, #1
    8590:	mov	r2, sl
    8594:	movne	r1, r5
    8598:	ldrne	r0, [fp, #-872]	; 0xfffffc98
    859c:	moveq	r1, #64	; 0x40
    85a0:	ldreq	r0, [fp, #-864]	; 0xfffffca0
    85a4:	bl	70cc <rb_sha512_process_bytes>
    85a8:	umull	r2, r3, r9, r4
    85ac:	lsr	r3, r3, #1
    85b0:	add	r3, r3, r3, lsl #1
    85b4:	cmp	r4, r3
    85b8:	bne	853c <rb_sha512_crypt_r+0x42c>
    85bc:	umull	r2, r3, r8, r4
    85c0:	sub	r2, r4, r3
    85c4:	add	r3, r3, r2, lsr #1
    85c8:	lsr	r3, r3, #2
    85cc:	rsb	r3, r3, r3, lsl #3
    85d0:	cmp	r4, r3
    85d4:	beq	8550 <rb_sha512_crypt_r+0x440>
    85d8:	mov	r2, sl
    85dc:	mov	r1, r5
    85e0:	ldr	r0, [fp, #-872]	; 0xfffffc98
    85e4:	bl	70cc <rb_sha512_process_bytes>
    85e8:	b	8550 <rb_sha512_crypt_r+0x440>
    85ec:	ldr	sl, [fp, #-880]	; 0xfffffc90
    85f0:	ldr	r3, [fp, #-888]	; 0xfffffc88
    85f4:	bic	r6, r3, r3, asr #31
    85f8:	mov	r2, r6
    85fc:	mov	r1, #0
    8600:	ldr	r4, [fp, #-884]	; 0xfffffc8c
    8604:	mov	r0, r4
    8608:	bl	4628 <memset@plt>
    860c:	mov	r2, r6
    8610:	ldr	r1, [pc, #2444]	; 8fa4 <rb_sha512_crypt_r+0xe94>
    8614:	add	r1, pc, r1
    8618:	add	r1, r1, #2016	; 0x7e0
    861c:	add	r1, r1, #4
    8620:	mov	r0, r4
    8624:	bl	4574 <strncpy@plt>
    8628:	mov	r1, #0
    862c:	mov	r0, r4
    8630:	bl	45b0 <strchr@plt>
    8634:	subs	r4, r0, #0
    8638:	ldreq	r3, [fp, #-884]	; 0xfffffc8c
    863c:	addeq	r4, r3, r6
    8640:	ldr	r3, [fp, #-888]	; 0xfffffc88
    8644:	sub	r6, r3, #3
    8648:	ldr	r3, [fp, #-892]	; 0xfffffc84
    864c:	cmp	r3, #0
    8650:	bne	8ef8 <rb_sha512_crypt_r+0xde8>
    8654:	bic	r7, r6, r6, asr #31
    8658:	cmp	r7, sl
    865c:	movcs	r7, sl
    8660:	mov	r2, r7
    8664:	mov	r1, #0
    8668:	mov	r0, r4
    866c:	bl	4628 <memset@plt>
    8670:	mov	r2, r7
    8674:	ldr	r1, [fp, #-868]	; 0xfffffc9c
    8678:	mov	r0, r4
    867c:	bl	4574 <strncpy@plt>
    8680:	mov	r1, #0
    8684:	ldr	r0, [fp, #-884]	; 0xfffffc8c
    8688:	bl	45b0 <strchr@plt>
    868c:	cmp	r0, #0
    8690:	ldreq	r3, [fp, #-884]	; 0xfffffc8c
    8694:	addeq	r0, r3, sl
    8698:	sub	r6, r6, r7
    869c:	cmp	r6, #0
    86a0:	ble	8710 <rb_sha512_crypt_r+0x600>
    86a4:	add	ip, r0, #1
    86a8:	mov	r3, #36	; 0x24
    86ac:	strb	r3, [r0]
    86b0:	sub	r3, r6, #1
    86b4:	ldrb	r1, [fp, #-100]	; 0xffffff9c
    86b8:	ldrb	r2, [fp, #-79]	; 0xffffffb1
    86bc:	lsl	r2, r2, #8
    86c0:	orr	r2, r2, r1, lsl #16
    86c4:	ldrb	r1, [fp, #-58]	; 0xffffffc6
    86c8:	orr	r2, r2, r1
    86cc:	cmp	r3, #0
    86d0:	ble	8f2c <rb_sha512_crypt_r+0xe1c>
    86d4:	mov	r6, r3
    86d8:	ldr	r0, [pc, #2248]	; 8fa8 <rb_sha512_crypt_r+0xe98>
    86dc:	add	r0, pc, r0
    86e0:	and	r1, r2, #63	; 0x3f
    86e4:	add	r1, r0, r1
    86e8:	ldrb	r1, [r1, #848]	; 0x350
    86ec:	strb	r1, [ip], #1
    86f0:	sub	r6, r6, #1
    86f4:	lsr	r2, r2, #6
    86f8:	add	r1, r6, #4
    86fc:	sub	r1, r1, r3
    8700:	cmp	r1, #0
    8704:	cmpgt	r6, #0
    8708:	bgt	86e0 <rb_sha512_crypt_r+0x5d0>
    870c:	mov	r0, ip
    8710:	ldrb	r3, [fp, #-78]	; 0xffffffb2
    8714:	ldrb	r2, [fp, #-57]	; 0xffffffc7
    8718:	lsl	r2, r2, #8
    871c:	orr	r2, r2, r3, lsl #16
    8720:	ldrb	r3, [fp, #-99]	; 0xffffff9d
    8724:	orr	r2, r2, r3
    8728:	cmp	r6, #0
    872c:	ble	87c0 <rb_sha512_crypt_r+0x6b0>
    8730:	mov	r3, r6
    8734:	ldr	ip, [pc, #2160]	; 8fac <rb_sha512_crypt_r+0xe9c>
    8738:	add	ip, pc, ip
    873c:	and	r1, r2, #63	; 0x3f
    8740:	add	r1, ip, r1
    8744:	ldrb	r1, [r1, #848]	; 0x350
    8748:	strb	r1, [r0], #1
    874c:	sub	r3, r3, #1
    8750:	lsr	r2, r2, #6
    8754:	add	r1, r3, #4
    8758:	sub	r1, r1, r6
    875c:	cmp	r1, #0
    8760:	cmpgt	r3, #0
    8764:	bgt	873c <rb_sha512_crypt_r+0x62c>
    8768:	ldrb	r1, [fp, #-56]	; 0xffffffc8
    876c:	ldrb	r2, [fp, #-98]	; 0xffffff9e
    8770:	lsl	r2, r2, #8
    8774:	orr	r2, r2, r1, lsl #16
    8778:	ldrb	r1, [fp, #-77]	; 0xffffffb3
    877c:	orr	r2, r2, r1
    8780:	cmp	r3, #0
    8784:	ble	8818 <rb_sha512_crypt_r+0x708>
    8788:	mov	r6, r3
    878c:	ldr	ip, [pc, #2076]	; 8fb0 <rb_sha512_crypt_r+0xea0>
    8790:	add	ip, pc, ip
    8794:	and	r1, r2, #63	; 0x3f
    8798:	add	r1, ip, r1
    879c:	ldrb	r1, [r1, #848]	; 0x350
    87a0:	strb	r1, [r0], #1
    87a4:	sub	r6, r6, #1
    87a8:	lsr	r2, r2, #6
    87ac:	add	r1, r6, #4
    87b0:	sub	r1, r1, r3
    87b4:	cmp	r1, #0
    87b8:	cmpgt	r6, #0
    87bc:	bgt	8794 <rb_sha512_crypt_r+0x684>
    87c0:	ldrb	r3, [fp, #-97]	; 0xffffff9f
    87c4:	ldrb	r2, [fp, #-76]	; 0xffffffb4
    87c8:	lsl	r2, r2, #8
    87cc:	orr	r2, r2, r3, lsl #16
    87d0:	ldrb	r3, [fp, #-55]	; 0xffffffc9
    87d4:	orr	r2, r2, r3
    87d8:	cmp	r6, #0
    87dc:	ble	8870 <rb_sha512_crypt_r+0x760>
    87e0:	mov	r3, r6
    87e4:	ldr	ip, [pc, #1992]	; 8fb4 <rb_sha512_crypt_r+0xea4>
    87e8:	add	ip, pc, ip
    87ec:	and	r1, r2, #63	; 0x3f
    87f0:	add	r1, ip, r1
    87f4:	ldrb	r1, [r1, #848]	; 0x350
    87f8:	strb	r1, [r0], #1
    87fc:	sub	r3, r3, #1
    8800:	lsr	r2, r2, #6
    8804:	add	r1, r3, #4
    8808:	sub	r1, r1, r6
    880c:	cmp	r1, #0
    8810:	cmpgt	r3, #0
    8814:	bgt	87ec <rb_sha512_crypt_r+0x6dc>
    8818:	ldrb	r1, [fp, #-75]	; 0xffffffb5
    881c:	ldrb	r2, [fp, #-54]	; 0xffffffca
    8820:	lsl	r2, r2, #8
    8824:	orr	r2, r2, r1, lsl #16
    8828:	ldrb	r1, [fp, #-96]	; 0xffffffa0
    882c:	orr	r2, r2, r1
    8830:	cmp	r3, #0
    8834:	ble	88c8 <rb_sha512_crypt_r+0x7b8>
    8838:	mov	r6, r3
    883c:	ldr	ip, [pc, #1908]	; 8fb8 <rb_sha512_crypt_r+0xea8>
    8840:	add	ip, pc, ip
    8844:	and	r1, r2, #63	; 0x3f
    8848:	add	r1, ip, r1
    884c:	ldrb	r1, [r1, #848]	; 0x350
    8850:	strb	r1, [r0], #1
    8854:	sub	r6, r6, #1
    8858:	lsr	r2, r2, #6
    885c:	add	r1, r6, #4
    8860:	sub	r1, r1, r3
    8864:	cmp	r1, #0
    8868:	cmpgt	r6, #0
    886c:	bgt	8844 <rb_sha512_crypt_r+0x734>
    8870:	ldrb	r3, [fp, #-53]	; 0xffffffcb
    8874:	ldrb	r2, [fp, #-95]	; 0xffffffa1
    8878:	lsl	r2, r2, #8
    887c:	orr	r2, r2, r3, lsl #16
    8880:	ldrb	r3, [fp, #-74]	; 0xffffffb6
    8884:	orr	r2, r2, r3
    8888:	cmp	r6, #0
    888c:	ble	8920 <rb_sha512_crypt_r+0x810>
    8890:	mov	r3, r6
    8894:	ldr	ip, [pc, #1824]	; 8fbc <rb_sha512_crypt_r+0xeac>
    8898:	add	ip, pc, ip
    889c:	and	r1, r2, #63	; 0x3f
    88a0:	add	r1, ip, r1
    88a4:	ldrb	r1, [r1, #848]	; 0x350
    88a8:	strb	r1, [r0], #1
    88ac:	sub	r3, r3, #1
    88b0:	lsr	r2, r2, #6
    88b4:	add	r1, r3, #4
    88b8:	sub	r1, r1, r6
    88bc:	cmp	r1, #0
    88c0:	cmpgt	r3, #0
    88c4:	bgt	889c <rb_sha512_crypt_r+0x78c>
    88c8:	ldrb	r1, [fp, #-94]	; 0xffffffa2
    88cc:	ldrb	r2, [fp, #-73]	; 0xffffffb7
    88d0:	lsl	r2, r2, #8
    88d4:	orr	r2, r2, r1, lsl #16
    88d8:	ldrb	r1, [fp, #-52]	; 0xffffffcc
    88dc:	orr	r2, r2, r1
    88e0:	cmp	r3, #0
    88e4:	ble	8978 <rb_sha512_crypt_r+0x868>
    88e8:	mov	r6, r3
    88ec:	ldr	ip, [pc, #1740]	; 8fc0 <rb_sha512_crypt_r+0xeb0>
    88f0:	add	ip, pc, ip
    88f4:	and	r1, r2, #63	; 0x3f
    88f8:	add	r1, ip, r1
    88fc:	ldrb	r1, [r1, #848]	; 0x350
    8900:	strb	r1, [r0], #1
    8904:	sub	r6, r6, #1
    8908:	lsr	r2, r2, #6
    890c:	add	r1, r6, #4
    8910:	sub	r1, r1, r3
    8914:	cmp	r1, #0
    8918:	cmpgt	r6, #0
    891c:	bgt	88f4 <rb_sha512_crypt_r+0x7e4>
    8920:	ldrb	r3, [fp, #-72]	; 0xffffffb8
    8924:	ldrb	r2, [fp, #-51]	; 0xffffffcd
    8928:	lsl	r2, r2, #8
    892c:	orr	r2, r2, r3, lsl #16
    8930:	ldrb	r3, [fp, #-93]	; 0xffffffa3
    8934:	orr	r2, r2, r3
    8938:	cmp	r6, #0
    893c:	ble	89d0 <rb_sha512_crypt_r+0x8c0>
    8940:	mov	r3, r6
    8944:	ldr	ip, [pc, #1656]	; 8fc4 <rb_sha512_crypt_r+0xeb4>
    8948:	add	ip, pc, ip
    894c:	and	r1, r2, #63	; 0x3f
    8950:	add	r1, ip, r1
    8954:	ldrb	r1, [r1, #848]	; 0x350
    8958:	strb	r1, [r0], #1
    895c:	sub	r3, r3, #1
    8960:	lsr	r2, r2, #6
    8964:	add	r1, r3, #4
    8968:	sub	r1, r1, r6
    896c:	cmp	r1, #0
    8970:	cmpgt	r3, #0
    8974:	bgt	894c <rb_sha512_crypt_r+0x83c>
    8978:	ldrb	r1, [fp, #-50]	; 0xffffffce
    897c:	ldrb	r2, [fp, #-92]	; 0xffffffa4
    8980:	lsl	r2, r2, #8
    8984:	orr	r2, r2, r1, lsl #16
    8988:	ldrb	r1, [fp, #-71]	; 0xffffffb9
    898c:	orr	r2, r2, r1
    8990:	cmp	r3, #0
    8994:	ble	8a28 <rb_sha512_crypt_r+0x918>
    8998:	mov	r6, r3
    899c:	ldr	ip, [pc, #1572]	; 8fc8 <rb_sha512_crypt_r+0xeb8>
    89a0:	add	ip, pc, ip
    89a4:	and	r1, r2, #63	; 0x3f
    89a8:	add	r1, ip, r1
    89ac:	ldrb	r1, [r1, #848]	; 0x350
    89b0:	strb	r1, [r0], #1
    89b4:	sub	r6, r6, #1
    89b8:	lsr	r2, r2, #6
    89bc:	add	r1, r6, #4
    89c0:	sub	r1, r1, r3
    89c4:	cmp	r1, #0
    89c8:	cmpgt	r6, #0
    89cc:	bgt	89a4 <rb_sha512_crypt_r+0x894>
    89d0:	ldrb	r3, [fp, #-91]	; 0xffffffa5
    89d4:	ldrb	r2, [fp, #-70]	; 0xffffffba
    89d8:	lsl	r2, r2, #8
    89dc:	orr	r2, r2, r3, lsl #16
    89e0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
    89e4:	orr	r2, r2, r3
    89e8:	cmp	r6, #0
    89ec:	ble	8a80 <rb_sha512_crypt_r+0x970>
    89f0:	mov	r3, r6
    89f4:	ldr	ip, [pc, #1488]	; 8fcc <rb_sha512_crypt_r+0xebc>
    89f8:	add	ip, pc, ip
    89fc:	and	r1, r2, #63	; 0x3f
    8a00:	add	r1, ip, r1
    8a04:	ldrb	r1, [r1, #848]	; 0x350
    8a08:	strb	r1, [r0], #1
    8a0c:	sub	r3, r3, #1
    8a10:	lsr	r2, r2, #6
    8a14:	add	r1, r3, #4
    8a18:	sub	r1, r1, r6
    8a1c:	cmp	r1, #0
    8a20:	cmpgt	r3, #0
    8a24:	bgt	89fc <rb_sha512_crypt_r+0x8ec>
    8a28:	ldrb	r1, [fp, #-69]	; 0xffffffbb
    8a2c:	ldrb	r2, [fp, #-48]	; 0xffffffd0
    8a30:	lsl	r2, r2, #8
    8a34:	orr	r2, r2, r1, lsl #16
    8a38:	ldrb	r1, [fp, #-90]	; 0xffffffa6
    8a3c:	orr	r2, r2, r1
    8a40:	cmp	r3, #0
    8a44:	ble	8ad8 <rb_sha512_crypt_r+0x9c8>
    8a48:	mov	r6, r3
    8a4c:	ldr	ip, [pc, #1404]	; 8fd0 <rb_sha512_crypt_r+0xec0>
    8a50:	add	ip, pc, ip
    8a54:	and	r1, r2, #63	; 0x3f
    8a58:	add	r1, ip, r1
    8a5c:	ldrb	r1, [r1, #848]	; 0x350
    8a60:	strb	r1, [r0], #1
    8a64:	sub	r6, r6, #1
    8a68:	lsr	r2, r2, #6
    8a6c:	add	r1, r6, #4
    8a70:	sub	r1, r1, r3
    8a74:	cmp	r1, #0
    8a78:	cmpgt	r6, #0
    8a7c:	bgt	8a54 <rb_sha512_crypt_r+0x944>
    8a80:	ldrb	r3, [fp, #-47]	; 0xffffffd1
    8a84:	ldrb	r2, [fp, #-89]	; 0xffffffa7
    8a88:	lsl	r2, r2, #8
    8a8c:	orr	r2, r2, r3, lsl #16
    8a90:	ldrb	r3, [fp, #-68]	; 0xffffffbc
    8a94:	orr	r2, r2, r3
    8a98:	cmp	r6, #0
    8a9c:	ble	8b30 <rb_sha512_crypt_r+0xa20>
    8aa0:	mov	r3, r6
    8aa4:	ldr	ip, [pc, #1320]	; 8fd4 <rb_sha512_crypt_r+0xec4>
    8aa8:	add	ip, pc, ip
    8aac:	and	r1, r2, #63	; 0x3f
    8ab0:	add	r1, ip, r1
    8ab4:	ldrb	r1, [r1, #848]	; 0x350
    8ab8:	strb	r1, [r0], #1
    8abc:	sub	r3, r3, #1
    8ac0:	lsr	r2, r2, #6
    8ac4:	add	r1, r3, #4
    8ac8:	sub	r1, r1, r6
    8acc:	cmp	r1, #0
    8ad0:	cmpgt	r3, #0
    8ad4:	bgt	8aac <rb_sha512_crypt_r+0x99c>
    8ad8:	ldrb	r1, [fp, #-88]	; 0xffffffa8
    8adc:	ldrb	r2, [fp, #-67]	; 0xffffffbd
    8ae0:	lsl	r2, r2, #8
    8ae4:	orr	r2, r2, r1, lsl #16
    8ae8:	ldrb	r1, [fp, #-46]	; 0xffffffd2
    8aec:	orr	r2, r2, r1
    8af0:	cmp	r3, #0
    8af4:	ble	8b88 <rb_sha512_crypt_r+0xa78>
    8af8:	mov	r6, r3
    8afc:	ldr	ip, [pc, #1236]	; 8fd8 <rb_sha512_crypt_r+0xec8>
    8b00:	add	ip, pc, ip
    8b04:	and	r1, r2, #63	; 0x3f
    8b08:	add	r1, ip, r1
    8b0c:	ldrb	r1, [r1, #848]	; 0x350
    8b10:	strb	r1, [r0], #1
    8b14:	sub	r6, r6, #1
    8b18:	lsr	r2, r2, #6
    8b1c:	add	r1, r6, #4
    8b20:	sub	r1, r1, r3
    8b24:	cmp	r1, #0
    8b28:	cmpgt	r6, #0
    8b2c:	bgt	8b04 <rb_sha512_crypt_r+0x9f4>
    8b30:	ldrb	r3, [fp, #-66]	; 0xffffffbe
    8b34:	ldrb	r2, [fp, #-45]	; 0xffffffd3
    8b38:	lsl	r2, r2, #8
    8b3c:	orr	r2, r2, r3, lsl #16
    8b40:	ldrb	r3, [fp, #-87]	; 0xffffffa9
    8b44:	orr	r2, r2, r3
    8b48:	cmp	r6, #0
    8b4c:	ble	8be0 <rb_sha512_crypt_r+0xad0>
    8b50:	mov	r3, r6
    8b54:	ldr	ip, [pc, #1152]	; 8fdc <rb_sha512_crypt_r+0xecc>
    8b58:	add	ip, pc, ip
    8b5c:	and	r1, r2, #63	; 0x3f
    8b60:	add	r1, ip, r1
    8b64:	ldrb	r1, [r1, #848]	; 0x350
    8b68:	strb	r1, [r0], #1
    8b6c:	sub	r3, r3, #1
    8b70:	lsr	r2, r2, #6
    8b74:	add	r1, r3, #4
    8b78:	sub	r1, r1, r6
    8b7c:	cmp	r1, #0
    8b80:	cmpgt	r3, #0
    8b84:	bgt	8b5c <rb_sha512_crypt_r+0xa4c>
    8b88:	ldrb	r1, [fp, #-44]	; 0xffffffd4
    8b8c:	ldrb	r2, [fp, #-86]	; 0xffffffaa
    8b90:	lsl	r2, r2, #8
    8b94:	orr	r2, r2, r1, lsl #16
    8b98:	ldrb	r1, [fp, #-65]	; 0xffffffbf
    8b9c:	orr	r2, r2, r1
    8ba0:	cmp	r3, #0
    8ba4:	ble	8c38 <rb_sha512_crypt_r+0xb28>
    8ba8:	mov	r6, r3
    8bac:	ldr	ip, [pc, #1068]	; 8fe0 <rb_sha512_crypt_r+0xed0>
    8bb0:	add	ip, pc, ip
    8bb4:	and	r1, r2, #63	; 0x3f
    8bb8:	add	r1, ip, r1
    8bbc:	ldrb	r1, [r1, #848]	; 0x350
    8bc0:	strb	r1, [r0], #1
    8bc4:	sub	r6, r6, #1
    8bc8:	lsr	r2, r2, #6
    8bcc:	add	r1, r6, #4
    8bd0:	sub	r1, r1, r3
    8bd4:	cmp	r1, #0
    8bd8:	cmpgt	r6, #0
    8bdc:	bgt	8bb4 <rb_sha512_crypt_r+0xaa4>
    8be0:	ldrb	r3, [fp, #-85]	; 0xffffffab
    8be4:	ldrb	r2, [fp, #-64]	; 0xffffffc0
    8be8:	lsl	r2, r2, #8
    8bec:	orr	r2, r2, r3, lsl #16
    8bf0:	ldrb	r3, [fp, #-43]	; 0xffffffd5
    8bf4:	orr	r2, r2, r3
    8bf8:	cmp	r6, #0
    8bfc:	ble	8c90 <rb_sha512_crypt_r+0xb80>
    8c00:	mov	r3, r6
    8c04:	ldr	ip, [pc, #984]	; 8fe4 <rb_sha512_crypt_r+0xed4>
    8c08:	add	ip, pc, ip
    8c0c:	and	r1, r2, #63	; 0x3f
    8c10:	add	r1, ip, r1
    8c14:	ldrb	r1, [r1, #848]	; 0x350
    8c18:	strb	r1, [r0], #1
    8c1c:	sub	r3, r3, #1
    8c20:	lsr	r2, r2, #6
    8c24:	add	r1, r3, #4
    8c28:	sub	r1, r1, r6
    8c2c:	cmp	r1, #0
    8c30:	cmpgt	r3, #0
    8c34:	bgt	8c0c <rb_sha512_crypt_r+0xafc>
    8c38:	ldrb	r1, [fp, #-63]	; 0xffffffc1
    8c3c:	ldrb	r2, [fp, #-42]	; 0xffffffd6
    8c40:	lsl	r2, r2, #8
    8c44:	orr	r2, r2, r1, lsl #16
    8c48:	ldrb	r1, [fp, #-84]	; 0xffffffac
    8c4c:	orr	r2, r2, r1
    8c50:	cmp	r3, #0
    8c54:	ble	8ce8 <rb_sha512_crypt_r+0xbd8>
    8c58:	mov	r6, r3
    8c5c:	ldr	ip, [pc, #900]	; 8fe8 <rb_sha512_crypt_r+0xed8>
    8c60:	add	ip, pc, ip
    8c64:	and	r1, r2, #63	; 0x3f
    8c68:	add	r1, ip, r1
    8c6c:	ldrb	r1, [r1, #848]	; 0x350
    8c70:	strb	r1, [r0], #1
    8c74:	sub	r6, r6, #1
    8c78:	lsr	r2, r2, #6
    8c7c:	add	r1, r6, #4
    8c80:	sub	r1, r1, r3
    8c84:	cmp	r1, #0
    8c88:	cmpgt	r6, #0
    8c8c:	bgt	8c64 <rb_sha512_crypt_r+0xb54>
    8c90:	ldrb	r3, [fp, #-41]	; 0xffffffd7
    8c94:	ldrb	r2, [fp, #-83]	; 0xffffffad
    8c98:	lsl	r2, r2, #8
    8c9c:	orr	r2, r2, r3, lsl #16
    8ca0:	ldrb	r3, [fp, #-62]	; 0xffffffc2
    8ca4:	orr	r2, r2, r3
    8ca8:	cmp	r6, #0
    8cac:	ble	8d40 <rb_sha512_crypt_r+0xc30>
    8cb0:	mov	r3, r6
    8cb4:	ldr	ip, [pc, #816]	; 8fec <rb_sha512_crypt_r+0xedc>
    8cb8:	add	ip, pc, ip
    8cbc:	and	r1, r2, #63	; 0x3f
    8cc0:	add	r1, ip, r1
    8cc4:	ldrb	r1, [r1, #848]	; 0x350
    8cc8:	strb	r1, [r0], #1
    8ccc:	sub	r3, r3, #1
    8cd0:	lsr	r2, r2, #6
    8cd4:	add	r1, r3, #4
    8cd8:	sub	r1, r1, r6
    8cdc:	cmp	r1, #0
    8ce0:	cmpgt	r3, #0
    8ce4:	bgt	8cbc <rb_sha512_crypt_r+0xbac>
    8ce8:	ldrb	r1, [fp, #-82]	; 0xffffffae
    8cec:	ldrb	r2, [fp, #-61]	; 0xffffffc3
    8cf0:	lsl	r2, r2, #8
    8cf4:	orr	r2, r2, r1, lsl #16
    8cf8:	ldrb	r1, [fp, #-40]	; 0xffffffd8
    8cfc:	orr	r2, r2, r1
    8d00:	cmp	r3, #0
    8d04:	ble	8d98 <rb_sha512_crypt_r+0xc88>
    8d08:	mov	r6, r3
    8d0c:	ldr	ip, [pc, #732]	; 8ff0 <rb_sha512_crypt_r+0xee0>
    8d10:	add	ip, pc, ip
    8d14:	and	r1, r2, #63	; 0x3f
    8d18:	add	r1, ip, r1
    8d1c:	ldrb	r1, [r1, #848]	; 0x350
    8d20:	strb	r1, [r0], #1
    8d24:	sub	r6, r6, #1
    8d28:	lsr	r2, r2, #6
    8d2c:	add	r1, r6, #4
    8d30:	sub	r1, r1, r3
    8d34:	cmp	r1, #0
    8d38:	cmpgt	r6, #0
    8d3c:	bgt	8d14 <rb_sha512_crypt_r+0xc04>
    8d40:	ldrb	r3, [fp, #-60]	; 0xffffffc4
    8d44:	ldrb	r2, [fp, #-39]	; 0xffffffd9
    8d48:	lsl	r2, r2, #8
    8d4c:	orr	r2, r2, r3, lsl #16
    8d50:	ldrb	r3, [fp, #-81]	; 0xffffffaf
    8d54:	orr	r2, r2, r3
    8d58:	cmp	r6, #0
    8d5c:	ble	8e34 <rb_sha512_crypt_r+0xd24>
    8d60:	mov	r3, r6
    8d64:	ldr	ip, [pc, #648]	; 8ff4 <rb_sha512_crypt_r+0xee4>
    8d68:	add	ip, pc, ip
    8d6c:	and	r1, r2, #63	; 0x3f
    8d70:	add	r1, ip, r1
    8d74:	ldrb	r1, [r1, #848]	; 0x350
    8d78:	strb	r1, [r0], #1
    8d7c:	sub	r3, r3, #1
    8d80:	lsr	r2, r2, #6
    8d84:	add	r1, r3, #4
    8d88:	sub	r1, r1, r6
    8d8c:	cmp	r1, #0
    8d90:	cmpgt	r3, #0
    8d94:	bgt	8d6c <rb_sha512_crypt_r+0xc5c>
    8d98:	ldrb	r1, [fp, #-38]	; 0xffffffda
    8d9c:	ldrb	r2, [fp, #-80]	; 0xffffffb0
    8da0:	lsl	r2, r2, #8
    8da4:	orr	r2, r2, r1, lsl #16
    8da8:	ldrb	r1, [fp, #-59]	; 0xffffffc5
    8dac:	orr	r2, r2, r1
    8db0:	cmp	r3, #0
    8db4:	ble	8f34 <rb_sha512_crypt_r+0xe24>
    8db8:	mov	r6, r3
    8dbc:	ldr	lr, [pc, #564]	; 8ff8 <rb_sha512_crypt_r+0xee8>
    8dc0:	add	lr, pc, lr
    8dc4:	and	r1, r2, #63	; 0x3f
    8dc8:	add	r1, lr, r1
    8dcc:	ldrb	r1, [r1, #848]	; 0x350
    8dd0:	strb	r1, [r0], #1
    8dd4:	sub	r6, r6, #1
    8dd8:	lsr	r2, r2, #6
    8ddc:	mov	ip, r6
    8de0:	add	r1, r6, #4
    8de4:	sub	r1, r1, r3
    8de8:	cmp	r1, #0
    8dec:	cmpgt	r6, #0
    8df0:	bgt	8dc4 <rb_sha512_crypt_r+0xcb4>
    8df4:	ldrb	r2, [fp, #-37]	; 0xffffffdb
    8df8:	cmp	r6, #0
    8dfc:	ble	8e34 <rb_sha512_crypt_r+0xd24>
    8e00:	ldr	r1, [pc, #500]	; 8ffc <rb_sha512_crypt_r+0xeec>
    8e04:	add	r1, pc, r1
    8e08:	and	r3, r2, #63	; 0x3f
    8e0c:	add	r3, r1, r3
    8e10:	ldrb	r3, [r3, #848]	; 0x350
    8e14:	strb	r3, [r0], #1
    8e18:	sub	r6, r6, #1
    8e1c:	lsr	r2, r2, #6
    8e20:	add	r3, r6, #2
    8e24:	sub	r3, r3, ip
    8e28:	cmp	r3, #0
    8e2c:	cmpgt	r6, #0
    8e30:	bgt	8e08 <rb_sha512_crypt_r+0xcf8>
    8e34:	cmp	r6, #0
    8e38:	ble	8f34 <rb_sha512_crypt_r+0xe24>
    8e3c:	mov	r3, #0
    8e40:	strb	r3, [r0]
    8e44:	ldr	r4, [fp, #-884]	; 0xfffffc8c
    8e48:	sub	r6, fp, #508	; 0x1fc
    8e4c:	mov	r0, r6
    8e50:	bl	61d0 <rb_sha512_init_ctx>
    8e54:	sub	r1, fp, #100	; 0x64
    8e58:	mov	r0, r6
    8e5c:	bl	7268 <rb_sha512_finish_ctx>
    8e60:	mov	r2, #64	; 0x40
    8e64:	mov	r1, #0
    8e68:	sub	r0, fp, #164	; 0xa4
    8e6c:	bl	4628 <memset@plt>
    8e70:	mov	r2, r5
    8e74:	mov	r1, #0
    8e78:	ldr	r0, [fp, #-872]	; 0xfffffc98
    8e7c:	bl	4628 <memset@plt>
    8e80:	mov	r2, sl
    8e84:	mov	r1, #0
    8e88:	ldr	r0, [fp, #-876]	; 0xfffffc94
    8e8c:	bl	4628 <memset@plt>
    8e90:	mov	r7, #344	; 0x158
    8e94:	mov	r2, r7
    8e98:	mov	r1, #0
    8e9c:	mov	r0, r6
    8ea0:	bl	4628 <memset@plt>
    8ea4:	mov	r2, r7
    8ea8:	mov	r1, #0
    8eac:	sub	r0, fp, #852	; 0x354
    8eb0:	bl	4628 <memset@plt>
    8eb4:	ldr	r3, [fp, #-896]	; 0xfffffc80
    8eb8:	cmp	r3, #0
    8ebc:	beq	8ed0 <rb_sha512_crypt_r+0xdc0>
    8ec0:	mov	r2, r5
    8ec4:	mov	r1, #0
    8ec8:	mov	r0, r3
    8ecc:	bl	4628 <memset@plt>
    8ed0:	ldr	r3, [fp, #-900]	; 0xfffffc7c
    8ed4:	cmp	r3, #0
    8ed8:	beq	8eec <rb_sha512_crypt_r+0xddc>
    8edc:	mov	r2, sl
    8ee0:	mov	r1, #0
    8ee4:	mov	r0, r3
    8ee8:	bl	4628 <memset@plt>
    8eec:	mov	r0, r4
    8ef0:	sub	sp, fp, #32
    8ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ef8:	str	r7, [sp]
    8efc:	ldr	r3, [pc, #252]	; 9000 <rb_sha512_crypt_r+0xef0>
    8f00:	add	r3, pc, r3
    8f04:	add	r3, r3, #2016	; 0x7e0
    8f08:	add	r3, r3, #8
    8f0c:	ldr	r2, [pc, #240]	; 9004 <rb_sha512_crypt_r+0xef4>
    8f10:	add	r2, pc, r2
    8f14:	bic	r1, r6, r6, asr #31
    8f18:	mov	r0, r4
    8f1c:	bl	4bb0 <snprintf@plt>
    8f20:	add	r4, r4, r0
    8f24:	sub	r6, r6, r0
    8f28:	b	8654 <rb_sha512_crypt_r+0x544>
    8f2c:	mov	r0, ip
    8f30:	b	8768 <rb_sha512_crypt_r+0x658>
    8f34:	bl	4ce8 <__errno_location@plt>
    8f38:	mov	r3, #34	; 0x22
    8f3c:	str	r3, [r0]
    8f40:	mov	r4, #0
    8f44:	b	8e48 <rb_sha512_crypt_r+0xd38>
    8f48:	sub	r1, fp, #100	; 0x64
    8f4c:	sub	r0, fp, #508	; 0x1fc
    8f50:	bl	7268 <rb_sha512_finish_ctx>
    8f54:	sub	r4, fp, #852	; 0x354
    8f58:	mov	r0, r4
    8f5c:	bl	61d0 <rb_sha512_init_ctx>
    8f60:	sub	r1, fp, #164	; 0xa4
    8f64:	mov	r0, r4
    8f68:	bl	7268 <rb_sha512_finish_ctx>
    8f6c:	add	r3, r5, #14
    8f70:	bic	r3, r3, #7
    8f74:	sub	sp, sp, r3
    8f78:	add	r0, sp, #8
    8f7c:	str	r0, [fp, #-872]	; 0xfffffc98
    8f80:	mov	r2, r5
    8f84:	b	838c <rb_sha512_crypt_r+0x27c>
    8f88:	.word	0x0000d500
    8f8c:	.word	0x0000d4d8
    8f90:	.word	0x00001388
    8f94:	.word	0x0000dca8
    8f98:	.word	0xaaaaaaab
    8f9c:	.word	0x24924925
    8fa0:	.word	0x3b9ac9ff
    8fa4:	.word	0x0000d024
    8fa8:	.word	0x0000cf5c
    8fac:	.word	0x0000cf00
    8fb0:	.word	0x0000cea8
    8fb4:	.word	0x0000ce50
    8fb8:	.word	0x0000cdf8
    8fbc:	.word	0x0000cda0
    8fc0:	.word	0x0000cd48
    8fc4:	.word	0x0000ccf0
    8fc8:	.word	0x0000cc98
    8fcc:	.word	0x0000cc40
    8fd0:	.word	0x0000cbe8
    8fd4:	.word	0x0000cb90
    8fd8:	.word	0x0000cb38
    8fdc:	.word	0x0000cae0
    8fe0:	.word	0x0000ca88
    8fe4:	.word	0x0000ca30
    8fe8:	.word	0x0000c9d8
    8fec:	.word	0x0000c980
    8ff0:	.word	0x0000c928
    8ff4:	.word	0x0000c8d0
    8ff8:	.word	0x0000c878
    8ffc:	.word	0x0000c834
    9000:	.word	0x0000c738
    9004:	.word	0x0000cf2c

00009008 <rb_crypt>:
    9008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    900c:	sub	sp, sp, #228	; 0xe4
    9010:	mov	r5, r0
    9014:	str	r1, [sp, #28]
    9018:	ldrb	r3, [r1]
    901c:	cmp	r3, #36	; 0x24
    9020:	beq	9034 <rb_crypt+0x2c>
    9024:	bl	50a8 <rb_des_init>
    9028:	add	r2, sp, #136	; 0x88
    902c:	add	r1, sp, #144	; 0x90
    9030:	b	93d8 <rb_crypt+0x3d0>
    9034:	ldrb	r3, [r1, #2]
    9038:	cmp	r3, #36	; 0x24
    903c:	beq	904c <rb_crypt+0x44>
    9040:	ldrb	r3, [r1, #3]
    9044:	cmp	r3, #36	; 0x24
    9048:	bne	9024 <rb_crypt+0x1c>
    904c:	ldr	r3, [sp, #28]
    9050:	ldrb	r3, [r3, #1]
    9054:	cmp	r3, #53	; 0x35
    9058:	beq	931c <rb_crypt+0x314>
    905c:	cmp	r3, #54	; 0x36
    9060:	beq	9354 <rb_crypt+0x34c>
    9064:	cmp	r3, #49	; 0x31
    9068:	movne	r0, #0
    906c:	bne	9c14 <rb_crypt+0xc0c>
    9070:	ldr	r3, [pc, #3484]	; 9e14 <rb_crypt+0xe0c>
    9074:	add	r3, pc, r3
    9078:	ldr	r4, [sp, #28]
    907c:	str	r4, [r3, #-2940]	; 0xfffff484
    9080:	mov	r2, #3
    9084:	ldr	r1, [pc, #3468]	; 9e18 <rb_crypt+0xe10>
    9088:	add	r1, pc, r1
    908c:	mov	r0, r4
    9090:	bl	4c10 <strncmp@plt>
    9094:	cmp	r0, #0
    9098:	bne	9c1c <rb_crypt+0xc14>
    909c:	mov	r2, r4
    90a0:	add	r4, r4, #3
    90a4:	ldr	r3, [pc, #3440]	; 9e1c <rb_crypt+0xe14>
    90a8:	add	r3, pc, r3
    90ac:	str	r4, [r3, #-2940]	; 0xfffff484
    90b0:	str	r4, [r3, #-2936]	; 0xfffff488
    90b4:	ldrb	r3, [r2, #3]
    90b8:	cmp	r3, #0
    90bc:	cmpne	r3, #36	; 0x24
    90c0:	streq	r4, [sp, #28]
    90c4:	beq	9c30 <rb_crypt+0xc28>
    90c8:	add	r3, r2, #11
    90cc:	cmp	r4, r3
    90d0:	strcs	r4, [sp, #28]
    90d4:	bcs	9c30 <rb_crypt+0xc28>
    90d8:	mov	r2, r4
    90dc:	ldrb	r1, [r2, #1]!
    90e0:	cmp	r1, #0
    90e4:	cmpne	r1, #36	; 0x24
    90e8:	beq	9108 <rb_crypt+0x100>
    90ec:	cmp	r2, r3
    90f0:	bne	90dc <rb_crypt+0xd4>
    90f4:	str	r2, [sp, #28]
    90f8:	ldr	r2, [pc, #3360]	; 9e20 <rb_crypt+0xe18>
    90fc:	add	r2, pc, r2
    9100:	str	r3, [r2, #-2936]	; 0xfffff488
    9104:	b	9c30 <rb_crypt+0xc28>
    9108:	str	r2, [sp, #28]
    910c:	ldr	r3, [pc, #3344]	; 9e24 <rb_crypt+0xe1c>
    9110:	add	r3, pc, r3
    9114:	str	r2, [r3, #-2936]	; 0xfffff488
    9118:	b	9c30 <rb_crypt+0xc28>
    911c:	mov	r2, #16
    9120:	add	r1, sp, #32
    9124:	add	r0, sp, #136	; 0x88
    9128:	bl	6c9c <MD5Update>
    912c:	b	91d4 <rb_crypt+0x1cc>
    9130:	ldr	r2, [sp]
    9134:	ldr	r3, [pc, #3308]	; 9e28 <rb_crypt+0xe20>
    9138:	add	r3, pc, r3
    913c:	ldr	r1, [r3, #-2940]	; 0xfffff484
    9140:	add	r0, sp, #136	; 0x88
    9144:	bl	6c9c <MD5Update>
    9148:	b	91e8 <rb_crypt+0x1e0>
    914c:	mov	r0, r5
    9150:	bl	47e4 <strlen@plt>
    9154:	mov	r2, r0
    9158:	mov	r1, r5
    915c:	add	r0, sp, #136	; 0x88
    9160:	bl	6c9c <MD5Update>
    9164:	b	9208 <rb_crypt+0x200>
    9168:	mov	r0, r5
    916c:	bl	47e4 <strlen@plt>
    9170:	mov	r2, r0
    9174:	mov	r1, r5
    9178:	add	r0, sp, #136	; 0x88
    917c:	bl	6c9c <MD5Update>
    9180:	add	r1, sp, #136	; 0x88
    9184:	add	r0, sp, #32
    9188:	bl	6d6c <MD5Final>
    918c:	add	r4, r4, #1
    9190:	cmp	r4, #1000	; 0x3e8
    9194:	beq	9224 <rb_crypt+0x21c>
    9198:	mov	r3, #0
    919c:	str	r3, [sp, #156]	; 0x9c
    91a0:	str	r3, [sp, #152]	; 0x98
    91a4:	str	fp, [sp, #136]	; 0x88
    91a8:	str	sl, [sp, #140]	; 0x8c
    91ac:	str	r9, [sp, #144]	; 0x90
    91b0:	str	r8, [sp, #148]	; 0x94
    91b4:	ands	r6, r4, #1
    91b8:	beq	911c <rb_crypt+0x114>
    91bc:	mov	r0, r5
    91c0:	bl	47e4 <strlen@plt>
    91c4:	mov	r2, r0
    91c8:	mov	r1, r5
    91cc:	add	r0, sp, #136	; 0x88
    91d0:	bl	6c9c <MD5Update>
    91d4:	umull	r2, r3, r7, r4
    91d8:	lsr	r3, r3, #1
    91dc:	add	r3, r3, r3, lsl #1
    91e0:	cmp	r4, r3
    91e4:	bne	9130 <rb_crypt+0x128>
    91e8:	ldr	r3, [pc, #3132]	; 9e2c <rb_crypt+0xe24>
    91ec:	umull	r2, r3, r3, r4
    91f0:	sub	r2, r4, r3
    91f4:	add	r3, r3, r2, lsr #1
    91f8:	lsr	r3, r3, #2
    91fc:	rsb	r3, r3, r3, lsl #3
    9200:	cmp	r4, r3
    9204:	bne	914c <rb_crypt+0x144>
    9208:	cmp	r6, #0
    920c:	beq	9168 <rb_crypt+0x160>
    9210:	mov	r2, #16
    9214:	add	r1, sp, #32
    9218:	add	r0, sp, #136	; 0x88
    921c:	bl	6c9c <MD5Update>
    9220:	b	9180 <rb_crypt+0x178>
    9224:	ldr	r6, [pc, #3076]	; 9e30 <rb_crypt+0xe28>
    9228:	add	r6, pc, r6
    922c:	sub	r0, r6, #3072	; 0xc00
    9230:	sub	r4, r0, #12
    9234:	mov	r0, r4
    9238:	bl	47e4 <strlen@plt>
    923c:	add	r5, r4, r0
    9240:	ldrb	r2, [sp, #32]
    9244:	ldrb	r3, [sp, #38]	; 0x26
    9248:	lsl	r3, r3, #8
    924c:	orr	r3, r3, r2, lsl #16
    9250:	ldrb	r1, [sp, #44]	; 0x2c
    9254:	mov	r2, #4
    9258:	orr	r1, r3, r1
    925c:	mov	r0, r5
    9260:	bl	5840 <_crypt_to64>
    9264:	ldrb	r2, [sp, #33]	; 0x21
    9268:	ldrb	r3, [sp, #39]	; 0x27
    926c:	lsl	r3, r3, #8
    9270:	orr	r3, r3, r2, lsl #16
    9274:	ldrb	r1, [sp, #45]	; 0x2d
    9278:	mov	r2, #4
    927c:	orr	r1, r3, r1
    9280:	add	r0, r5, r2
    9284:	bl	5840 <_crypt_to64>
    9288:	ldrb	r2, [sp, #34]	; 0x22
    928c:	ldrb	r3, [sp, #40]	; 0x28
    9290:	lsl	r3, r3, #8
    9294:	orr	r3, r3, r2, lsl #16
    9298:	ldrb	r1, [sp, #46]	; 0x2e
    929c:	mov	r2, #4
    92a0:	orr	r1, r3, r1
    92a4:	add	r0, r5, #8
    92a8:	bl	5840 <_crypt_to64>
    92ac:	ldrb	r2, [sp, #35]	; 0x23
    92b0:	ldrb	r3, [sp, #41]	; 0x29
    92b4:	lsl	r3, r3, #8
    92b8:	orr	r3, r3, r2, lsl #16
    92bc:	ldrb	r1, [sp, #47]	; 0x2f
    92c0:	mov	r2, #4
    92c4:	orr	r1, r3, r1
    92c8:	add	r0, r5, #12
    92cc:	bl	5840 <_crypt_to64>
    92d0:	ldrb	r2, [sp, #36]	; 0x24
    92d4:	ldrb	r3, [sp, #42]	; 0x2a
    92d8:	lsl	r3, r3, #8
    92dc:	orr	r3, r3, r2, lsl #16
    92e0:	ldrb	r1, [sp, #37]	; 0x25
    92e4:	mov	r2, #4
    92e8:	orr	r1, r3, r1
    92ec:	add	r0, r5, #16
    92f0:	bl	5840 <_crypt_to64>
    92f4:	mov	r2, #2
    92f8:	ldrb	r1, [sp, #43]	; 0x2b
    92fc:	add	r0, r5, #20
    9300:	bl	5840 <_crypt_to64>
    9304:	add	r3, r5, #22
    9308:	str	r3, [r6, #-2932]	; 0xfffff48c
    930c:	mov	r3, #0
    9310:	strb	r3, [r5, #22]
    9314:	mov	r0, r4
    9318:	b	9c14 <rb_crypt+0xc0c>
    931c:	ldr	r6, [sp, #28]
    9320:	mov	r0, r6
    9324:	bl	47e4 <strlen@plt>
    9328:	add	r4, r0, #66	; 0x42
    932c:	mov	r0, r4
    9330:	bl	49ac <malloc@plt>
    9334:	cmp	r0, #0
    9338:	beq	9c14 <rb_crypt+0xc0c>
    933c:	mov	r3, r4
    9340:	mov	r2, r0
    9344:	mov	r1, r6
    9348:	mov	r0, r5
    934c:	bl	7624 <rb_sha256_crypt_r>
    9350:	b	9c14 <rb_crypt+0xc0c>
    9354:	ldr	r0, [sp, #28]
    9358:	bl	47e4 <strlen@plt>
    935c:	add	r4, r0, #109	; 0x6d
    9360:	ldr	r3, [pc, #2764]	; 9e34 <rb_crypt+0xe2c>
    9364:	add	r3, pc, r3
    9368:	ldr	r3, [r3, #-2928]	; 0xfffff490
    936c:	cmp	r4, r3
    9370:	ble	93a0 <rb_crypt+0x398>
    9374:	mov	r1, r4
    9378:	ldr	r3, [pc, #2744]	; 9e38 <rb_crypt+0xe30>
    937c:	add	r3, pc, r3
    9380:	ldr	r0, [r3, #-2924]	; 0xfffff494
    9384:	bl	4c40 <realloc@plt>
    9388:	cmp	r0, #0
    938c:	beq	9c14 <rb_crypt+0xc0c>
    9390:	ldr	r3, [pc, #2724]	; 9e3c <rb_crypt+0xe34>
    9394:	add	r3, pc, r3
    9398:	str	r0, [r3, #-2924]	; 0xfffff494
    939c:	str	r4, [r3, #-2928]	; 0xfffff490
    93a0:	ldr	r2, [pc, #2712]	; 9e40 <rb_crypt+0xe38>
    93a4:	add	r2, pc, r2
    93a8:	ldr	r3, [r2, #-2928]	; 0xfffff490
    93ac:	ldr	r2, [r2, #-2924]	; 0xfffff494
    93b0:	ldr	r1, [sp, #28]
    93b4:	mov	r0, r5
    93b8:	bl	8110 <rb_sha512_crypt_r>
    93bc:	b	9c14 <rb_crypt+0xc0c>
    93c0:	ldrb	r3, [r5]
    93c4:	lsl	r3, r3, #1
    93c8:	uxtb	r3, r3
    93cc:	strb	r3, [r2], #1
    93d0:	cmp	r3, #0
    93d4:	addne	r5, r5, #1
    93d8:	cmp	r2, r1
    93dc:	bne	93c0 <rb_crypt+0x3b8>
    93e0:	bl	50a8 <rb_des_init>
    93e4:	ldr	r3, [sp, #136]	; 0x88
    93e8:	rev	r3, r3
    93ec:	ldr	r2, [sp, #140]	; 0x8c
    93f0:	rev	r2, r2
    93f4:	orrs	r1, r3, r2
    93f8:	beq	9410 <rb_crypt+0x408>
    93fc:	ldr	r1, [pc, #2624]	; 9e44 <rb_crypt+0xe3c>
    9400:	add	r1, pc, r1
    9404:	ldr	r1, [r1, #8]
    9408:	cmp	r3, r1
    940c:	beq	98cc <rb_crypt+0x8c4>
    9410:	ldr	r1, [pc, #2608]	; 9e48 <rb_crypt+0xe40>
    9414:	add	r1, pc, r1
    9418:	str	r3, [r1, #8]
    941c:	str	r2, [r1, #4]
    9420:	lsr	r7, r3, #25
    9424:	lsr	r5, r3, #17
    9428:	and	r5, r5, #127	; 0x7f
    942c:	lsr	r4, r3, #9
    9430:	and	r4, r4, #127	; 0x7f
    9434:	lsr	r3, r3, #1
    9438:	and	r3, r3, #127	; 0x7f
    943c:	lsr	r6, r2, #25
    9440:	lsr	lr, r2, #17
    9444:	and	lr, lr, #127	; 0x7f
    9448:	lsr	ip, r2, #9
    944c:	and	ip, ip, #127	; 0x7f
    9450:	lsr	r2, r2, #1
    9454:	and	r1, r2, #127	; 0x7f
    9458:	ldr	r0, [pc, #2540]	; 9e4c <rb_crypt+0xe44>
    945c:	add	r0, pc, r0
    9460:	lsl	r7, r7, #2
    9464:	add	r8, r0, r7
    9468:	add	r6, r6, #512	; 0x200
    946c:	lsl	r6, r6, #2
    9470:	add	r2, r0, r6
    9474:	ldr	r8, [r8, #828]	; 0x33c
    9478:	ldr	r2, [r2, #828]	; 0x33c
    947c:	orr	r8, r8, r2
    9480:	add	r5, r5, #128	; 0x80
    9484:	lsl	r5, r5, #2
    9488:	add	r2, r0, r5
    948c:	ldr	r2, [r2, #828]	; 0x33c
    9490:	orr	r8, r8, r2
    9494:	add	r4, r4, #256	; 0x100
    9498:	lsl	r4, r4, #2
    949c:	add	r2, r0, r4
    94a0:	ldr	r2, [r2, #828]	; 0x33c
    94a4:	orr	r8, r8, r2
    94a8:	add	r3, r3, #384	; 0x180
    94ac:	lsl	r2, r3, #2
    94b0:	add	r3, r0, r2
    94b4:	ldr	r3, [r3, #828]	; 0x33c
    94b8:	orr	r3, r8, r3
    94bc:	add	lr, lr, #640	; 0x280
    94c0:	lsl	lr, lr, #2
    94c4:	add	r8, r0, lr
    94c8:	ldr	r8, [r8, #828]	; 0x33c
    94cc:	orr	r3, r3, r8
    94d0:	add	ip, ip, #768	; 0x300
    94d4:	lsl	ip, ip, #2
    94d8:	add	r8, r0, ip
    94dc:	ldr	r8, [r8, #828]	; 0x33c
    94e0:	orr	r3, r3, r8
    94e4:	add	r1, r1, #896	; 0x380
    94e8:	lsl	r1, r1, #2
    94ec:	add	r0, r0, r1
    94f0:	ldr	r0, [r0, #828]	; 0x33c
    94f4:	orr	r3, r3, r0
    94f8:	str	r3, [sp, #16]
    94fc:	ldr	r0, [pc, #2380]	; 9e50 <rb_crypt+0xe48>
    9500:	add	r0, pc, r0
    9504:	add	r7, r0, r7
    9508:	add	r6, r0, r6
    950c:	ldr	r3, [r7, #-3260]	; 0xfffff344
    9510:	ldr	r6, [r6, #-3260]	; 0xfffff344
    9514:	orr	r3, r3, r6
    9518:	add	r5, r0, r5
    951c:	ldr	r5, [r5, #-3260]	; 0xfffff344
    9520:	orr	r3, r3, r5
    9524:	add	r4, r0, r4
    9528:	ldr	r4, [r4, #-3260]	; 0xfffff344
    952c:	orr	r3, r3, r4
    9530:	add	r2, r0, r2
    9534:	ldr	r2, [r2, #-3260]	; 0xfffff344
    9538:	orr	r3, r3, r2
    953c:	add	lr, r0, lr
    9540:	ldr	r2, [lr, #-3260]	; 0xfffff344
    9544:	orr	r3, r3, r2
    9548:	add	ip, r0, ip
    954c:	ldr	r2, [ip, #-3260]	; 0xfffff344
    9550:	orr	r3, r3, r2
    9554:	add	r1, r0, r1
    9558:	ldr	r2, [r1, #-3260]	; 0xfffff344
    955c:	orr	r3, r3, r2
    9560:	str	r3, [sp, #20]
    9564:	ldr	r3, [pc, #2280]	; 9e54 <rb_crypt+0xe4c>
    9568:	add	r3, pc, r3
    956c:	add	r3, r3, #2032	; 0x7f0
    9570:	str	r3, [sp, #4]
    9574:	ldr	r3, [pc, #2268]	; 9e58 <rb_crypt+0xe50>
    9578:	add	r3, pc, r3
    957c:	sub	r2, r3, #3136	; 0xc40
    9580:	sub	r2, r2, #12
    9584:	str	r2, [sp, #8]
    9588:	sub	r2, r3, #2912	; 0xb60
    958c:	add	r9, r2, #56	; 0x38
    9590:	sub	r1, r3, #3200	; 0xc80
    9594:	sub	r1, r1, #12
    9598:	str	r1, [sp]
    959c:	sub	r3, r3, #2848	; 0xb20
    95a0:	add	r3, r3, #56	; 0x38
    95a4:	str	r3, [sp, #12]
    95a8:	sub	r3, r2, #8
    95ac:	str	r3, [sp, #24]
    95b0:	mov	r8, #0
    95b4:	ldr	r6, [pc, #2208]	; 9e5c <rb_crypt+0xe54>
    95b8:	add	r6, pc, r6
    95bc:	ldr	r5, [pc, #2204]	; 9e60 <rb_crypt+0xe58>
    95c0:	add	r5, pc, r5
    95c4:	ldr	r2, [sp, #4]
    95c8:	ldrb	r3, [r2], #1
    95cc:	str	r2, [sp, #4]
    95d0:	add	r8, r8, r3
    95d4:	rsb	r3, r8, #28
    95d8:	ldr	r2, [sp, #16]
    95dc:	lsr	r1, r2, r3
    95e0:	orr	r1, r1, r2, lsl r8
    95e4:	ldr	r2, [sp, #20]
    95e8:	lsr	r3, r2, r3
    95ec:	orr	r3, r3, r2, lsl r8
    95f0:	lsr	r7, r1, #19
    95f4:	lsr	r4, r1, #14
    95f8:	and	r4, r4, #127	; 0x7f
    95fc:	lsr	lr, r1, #7
    9600:	and	lr, lr, #127	; 0x7f
    9604:	and	r1, r1, #127	; 0x7f
    9608:	lsr	ip, r3, #21
    960c:	and	ip, ip, #127	; 0x7f
    9610:	lsr	sl, r3, #14
    9614:	and	sl, sl, #127	; 0x7f
    9618:	lsr	r0, r3, #7
    961c:	and	r0, r0, #127	; 0x7f
    9620:	and	r3, r3, #127	; 0x7f
    9624:	add	r1, r1, #384	; 0x180
    9628:	lsl	r1, r1, #2
    962c:	add	fp, r6, r1
    9630:	add	r3, r3, #896	; 0x380
    9634:	lsl	r3, r3, #2
    9638:	add	r2, r6, r3
    963c:	ldr	fp, [fp, #836]	; 0x344
    9640:	ldr	r2, [r2, #836]	; 0x344
    9644:	orr	r2, fp, r2
    9648:	and	r7, r7, #508	; 0x1fc
    964c:	add	fp, r6, r7
    9650:	ldr	fp, [fp, #836]	; 0x344
    9654:	orr	r2, r2, fp
    9658:	add	r4, r4, #128	; 0x80
    965c:	lsl	r4, r4, #2
    9660:	add	fp, r6, r4
    9664:	ldr	fp, [fp, #836]	; 0x344
    9668:	orr	r2, r2, fp
    966c:	add	lr, lr, #256	; 0x100
    9670:	lsl	lr, lr, #2
    9674:	add	fp, r6, lr
    9678:	ldr	fp, [fp, #836]	; 0x344
    967c:	orr	r2, r2, fp
    9680:	add	ip, ip, #512	; 0x200
    9684:	lsl	ip, ip, #2
    9688:	add	fp, r6, ip
    968c:	ldr	fp, [fp, #836]	; 0x344
    9690:	orr	r2, r2, fp
    9694:	add	sl, sl, #640	; 0x280
    9698:	lsl	sl, sl, #2
    969c:	add	fp, r6, sl
    96a0:	ldr	fp, [fp, #836]	; 0x344
    96a4:	orr	r2, r2, fp
    96a8:	add	r0, r0, #768	; 0x300
    96ac:	lsl	r0, r0, #2
    96b0:	add	fp, r6, r0
    96b4:	ldr	fp, [fp, #836]	; 0x344
    96b8:	orr	r2, r2, fp
    96bc:	ldr	fp, [sp, #8]
    96c0:	str	r2, [fp], #4
    96c4:	str	fp, [sp, #8]
    96c8:	str	r2, [r9, #-4]!
    96cc:	add	r1, r5, r1
    96d0:	add	r3, r5, r3
    96d4:	ldr	r2, [r1, #-3252]	; 0xfffff34c
    96d8:	ldr	r3, [r3, #-3252]	; 0xfffff34c
    96dc:	orr	r2, r2, r3
    96e0:	add	r7, r5, r7
    96e4:	ldr	r3, [r7, #-3252]	; 0xfffff34c
    96e8:	orr	r2, r2, r3
    96ec:	add	r4, r5, r4
    96f0:	ldr	r3, [r4, #-3252]	; 0xfffff34c
    96f4:	orr	r2, r2, r3
    96f8:	add	lr, r5, lr
    96fc:	ldr	r3, [lr, #-3252]	; 0xfffff34c
    9700:	orr	r2, r2, r3
    9704:	add	ip, r5, ip
    9708:	ldr	r3, [ip, #-3252]	; 0xfffff34c
    970c:	orr	r2, r2, r3
    9710:	add	sl, r5, sl
    9714:	ldr	r3, [sl, #-3252]	; 0xfffff34c
    9718:	orr	r3, r2, r3
    971c:	add	r0, r5, r0
    9720:	ldr	r2, [r0, #-3252]	; 0xfffff34c
    9724:	orr	r3, r3, r2
    9728:	ldr	r2, [sp]
    972c:	str	r3, [r2], #4
    9730:	str	r2, [sp]
    9734:	ldr	r2, [sp, #12]
    9738:	str	r3, [r2, #-4]!
    973c:	str	r2, [sp, #12]
    9740:	ldr	r3, [sp, #24]
    9744:	cmp	r9, r3
    9748:	bne	95c4 <rb_crypt+0x5bc>
    974c:	ldr	r6, [sp, #28]
    9750:	ldrb	r4, [r6, #1]
    9754:	mov	r0, r4
    9758:	bl	5048 <rb_ascii_to_bin>
    975c:	mov	r5, r0
    9760:	ldrb	r6, [r6]
    9764:	mov	r0, r6
    9768:	bl	5048 <rb_ascii_to_bin>
    976c:	orr	r0, r0, r5, lsl #6
    9770:	ldr	r3, [pc, #1772]	; 9e64 <rb_crypt+0xe5c>
    9774:	add	r3, pc, r3
    9778:	strb	r6, [r3, #-2964]	; 0xfffff46c
    977c:	cmp	r4, #0
    9780:	moveq	r4, r6
    9784:	ldr	r3, [pc, #1756]	; 9e68 <rb_crypt+0xe60>
    9788:	add	r3, pc, r3
    978c:	strb	r4, [r3, #-2963]	; 0xfffff46d
    9790:	ldr	r3, [pc, #1748]	; 9e6c <rb_crypt+0xe64>
    9794:	add	r3, pc, r3
    9798:	ldr	r3, [r3, #16]
    979c:	cmp	r0, r3
    97a0:	beq	97f4 <rb_crypt+0x7ec>
    97a4:	mov	ip, r0
    97a8:	ldr	r3, [pc, #1728]	; 9e70 <rb_crypt+0xe68>
    97ac:	add	r3, pc, r3
    97b0:	str	r0, [r3, #16]
    97b4:	mov	r0, #0
    97b8:	str	r0, [r3, #12]
    97bc:	mov	r2, #24
    97c0:	mov	lr, r0
    97c4:	mov	r1, #8388608	; 0x800000
    97c8:	mov	r3, #1
    97cc:	mov	r4, r3
    97d0:	tst	ip, r3
    97d4:	orrne	r0, r0, r1
    97d8:	movne	lr, r4
    97dc:	lsl	r3, r3, #1
    97e0:	lsr	r1, r1, #1
    97e4:	subs	r2, r2, #1
    97e8:	bne	97d0 <rb_crypt+0x7c8>
    97ec:	cmp	lr, #0
    97f0:	bne	98e4 <rb_crypt+0x8dc>
    97f4:	ldr	r3, [pc, #1656]	; 9e74 <rb_crypt+0xe6c>
    97f8:	add	r3, pc, r3
    97fc:	ldr	r5, [r3, #796]	; 0x31c
    9800:	ldr	r2, [r3, #1820]	; 0x71c
    9804:	orr	r5, r5, r2
    9808:	ldr	r2, [r3, #2844]	; 0xb1c
    980c:	orr	r5, r5, r2
    9810:	ldr	r2, [r3, #3868]	; 0xf1c
    9814:	orr	r5, r5, r2
    9818:	add	r3, r3, #4096	; 0x1000
    981c:	ldr	r2, [r3, #796]	; 0x31c
    9820:	orr	r5, r5, r2
    9824:	ldr	r2, [r3, #1820]	; 0x71c
    9828:	orr	r5, r5, r2
    982c:	ldr	r2, [r3, #2844]	; 0xb1c
    9830:	orr	r5, r5, r2
    9834:	ldr	r3, [r3, #3868]	; 0xf1c
    9838:	orr	r5, r5, r3
    983c:	ldr	r3, [pc, #1588]	; 9e78 <rb_crypt+0xe70>
    9840:	add	r3, pc, r3
    9844:	ldr	r0, [r3, #804]	; 0x324
    9848:	ldr	r2, [r3, #1828]	; 0x724
    984c:	orr	r0, r0, r2
    9850:	ldr	r2, [r3, #2852]	; 0xb24
    9854:	orr	r0, r0, r2
    9858:	ldr	r2, [r3, #3876]	; 0xf24
    985c:	orr	r0, r0, r2
    9860:	add	r3, r3, #4096	; 0x1000
    9864:	ldr	r2, [r3, #804]	; 0x324
    9868:	orr	r0, r0, r2
    986c:	ldr	r2, [r3, #1828]	; 0x724
    9870:	orr	r0, r0, r2
    9874:	ldr	r2, [r3, #2852]	; 0xb24
    9878:	orr	r0, r0, r2
    987c:	ldr	r3, [r3, #3876]	; 0xf24
    9880:	orr	r0, r0, r3
    9884:	ldr	r3, [pc, #1520]	; 9e7c <rb_crypt+0xe74>
    9888:	add	r3, pc, r3
    988c:	ldr	r8, [r3, #12]
    9890:	mov	r9, #25
    9894:	ldr	r3, [pc, #1508]	; 9e80 <rb_crypt+0xe78>
    9898:	add	r3, pc, r3
    989c:	sub	sl, r3, #3200	; 0xc80
    98a0:	sub	r3, r3, #3136	; 0xc40
    98a4:	str	r3, [sp]
    98a8:	ldr	lr, [pc, #1492]	; 9e84 <rb_crypt+0xe7c>
    98ac:	add	lr, pc, lr
    98b0:	ldr	ip, [pc, #1488]	; 9e88 <rb_crypt+0xe80>
    98b4:	add	ip, pc, ip
    98b8:	ldr	r7, [pc, #1484]	; 9e8c <rb_crypt+0xe84>
    98bc:	add	r7, pc, r7
    98c0:	sub	r7, r7, #3136	; 0xc40
    98c4:	add	r7, r7, #52	; 0x34
    98c8:	b	99f8 <rb_crypt+0x9f0>
    98cc:	ldr	r1, [pc, #1468]	; 9e90 <rb_crypt+0xe88>
    98d0:	add	r1, pc, r1
    98d4:	ldr	r1, [r1, #4]
    98d8:	cmp	r2, r1
    98dc:	bne	9410 <rb_crypt+0x408>
    98e0:	b	974c <rb_crypt+0x744>
    98e4:	ldr	r3, [pc, #1448]	; 9e94 <rb_crypt+0xe8c>
    98e8:	add	r3, pc, r3
    98ec:	str	r0, [r3, #12]
    98f0:	b	97f4 <rb_crypt+0x7ec>
    98f4:	mov	r0, r3
    98f8:	lsl	r3, r0, #23
    98fc:	and	r3, r3, #8388608	; 0x800000
    9900:	lsr	r2, r0, #9
    9904:	and	r2, r2, #8126464	; 0x7c0000
    9908:	orr	r3, r3, r2
    990c:	lsr	r2, r0, #11
    9910:	and	r2, r2, #258048	; 0x3f000
    9914:	orr	r3, r3, r2
    9918:	lsr	r2, r0, #13
    991c:	and	r2, r2, #4032	; 0xfc0
    9920:	orr	r3, r3, r2
    9924:	lsl	r2, r0, #11
    9928:	orr	r3, r3, r2, lsr #26
    992c:	lsl	r2, r0, #7
    9930:	and	r2, r2, #16515072	; 0xfc0000
    9934:	lsl	r1, r0, #5
    9938:	and	r1, r1, #258048	; 0x3f000
    993c:	orr	r2, r2, r1
    9940:	orr	r2, r2, r0, lsr #31
    9944:	lsl	r1, r0, #3
    9948:	and	r1, r1, #4032	; 0xfc0
    994c:	orr	r2, r2, r1
    9950:	lsl	r1, r0, #1
    9954:	and	r1, r1, #62	; 0x3e
    9958:	orr	r2, r2, r1
    995c:	eor	r1, r3, r2
    9960:	and	r1, r1, r8
    9964:	ldr	fp, [r4], #4
    9968:	eor	r3, r3, fp
    996c:	eor	r3, r3, r1
    9970:	ldr	fp, [r6], #4
    9974:	eor	r2, r2, fp
    9978:	eor	r2, r2, r1
    997c:	add	r1, ip, r3, lsr #12
    9980:	ldrb	r1, [r1, #532]	; 0x214
    9984:	add	r1, lr, r1, lsl #2
    9988:	lsl	r3, r3, #20
    998c:	add	r3, ip, r3, lsr #20
    9990:	add	r3, r3, #4608	; 0x1200
    9994:	ldrb	fp, [r3, #20]
    9998:	add	fp, lr, fp, lsl #2
    999c:	ldr	r1, [r1, #876]	; 0x36c
    99a0:	ldr	r3, [fp, #1900]	; 0x76c
    99a4:	orr	r3, r1, r3
    99a8:	add	r1, ip, r2, lsr #12
    99ac:	add	r1, r1, #8704	; 0x2200
    99b0:	ldrb	r1, [r1, #20]
    99b4:	add	r1, lr, r1, lsl #2
    99b8:	ldr	r1, [r1, #2924]	; 0xb6c
    99bc:	orr	r3, r3, r1
    99c0:	lsl	r2, r2, #20
    99c4:	add	r2, ip, r2, lsr #20
    99c8:	add	r2, r2, #12800	; 0x3200
    99cc:	ldrb	r2, [r2, #20]
    99d0:	add	r2, lr, r2, lsl #2
    99d4:	ldr	r2, [r2, #3948]	; 0xf6c
    99d8:	orr	r3, r3, r2
    99dc:	eor	r3, r3, r5
    99e0:	mov	r5, r0
    99e4:	cmp	r4, r7
    99e8:	bne	98f4 <rb_crypt+0x8ec>
    99ec:	mov	r5, r3
    99f0:	subs	r9, r9, #1
    99f4:	beq	9a08 <rb_crypt+0xa00>
    99f8:	sub	r6, sl, #12
    99fc:	ldr	r3, [sp]
    9a00:	sub	r4, r3, #12
    9a04:	b	98f8 <rb_crypt+0x8f0>
    9a08:	lsr	r7, r3, #24
    9a0c:	lsr	r4, r3, #16
    9a10:	uxtb	r4, r4
    9a14:	lsr	ip, r3, #8
    9a18:	uxtb	ip, ip
    9a1c:	uxtb	r3, r3
    9a20:	lsr	r6, r0, #24
    9a24:	lsr	r8, r0, #16
    9a28:	uxtb	r8, r8
    9a2c:	lsr	lr, r0, #8
    9a30:	uxtb	lr, lr
    9a34:	uxtb	r5, r0
    9a38:	ldr	r1, [pc, #1112]	; 9e98 <rb_crypt+0xe90>
    9a3c:	add	r1, pc, r1
    9a40:	lsl	r7, r7, #2
    9a44:	add	r2, r1, r7
    9a48:	add	r3, r3, #768	; 0x300
    9a4c:	lsl	r3, r3, #2
    9a50:	add	r0, r1, r3
    9a54:	ldr	r2, [r2, #812]	; 0x32c
    9a58:	ldr	r0, [r0, #812]	; 0x32c
    9a5c:	orr	r2, r2, r0
    9a60:	add	r6, r6, #1024	; 0x400
    9a64:	lsl	r6, r6, #2
    9a68:	add	r0, r1, r6
    9a6c:	ldr	r0, [r0, #812]	; 0x32c
    9a70:	orr	r2, r2, r0
    9a74:	add	r5, r5, #1792	; 0x700
    9a78:	lsl	r5, r5, #2
    9a7c:	add	r0, r1, r5
    9a80:	ldr	r0, [r0, #812]	; 0x32c
    9a84:	orr	r2, r2, r0
    9a88:	add	r4, r4, #256	; 0x100
    9a8c:	lsl	r4, r4, #2
    9a90:	add	r0, r1, r4
    9a94:	ldr	r0, [r0, #812]	; 0x32c
    9a98:	orr	r2, r2, r0
    9a9c:	add	ip, ip, #512	; 0x200
    9aa0:	lsl	ip, ip, #2
    9aa4:	add	r0, r1, ip
    9aa8:	ldr	r0, [r0, #812]	; 0x32c
    9aac:	orr	r2, r2, r0
    9ab0:	add	r0, r8, #1280	; 0x500
    9ab4:	lsl	r0, r0, #2
    9ab8:	add	r8, r1, r0
    9abc:	ldr	r8, [r8, #812]	; 0x32c
    9ac0:	orr	r2, r2, r8
    9ac4:	add	lr, lr, #1536	; 0x600
    9ac8:	lsl	lr, lr, #2
    9acc:	add	r1, r1, lr
    9ad0:	ldr	r1, [r1, #812]	; 0x32c
    9ad4:	orr	r2, r2, r1
    9ad8:	ldr	r1, [pc, #956]	; 9e9c <rb_crypt+0xe94>
    9adc:	add	r1, pc, r1
    9ae0:	add	r7, r1, r7
    9ae4:	add	r8, r1, r3
    9ae8:	ldr	r3, [r7, #820]	; 0x334
    9aec:	ldr	r7, [r8, #820]	; 0x334
    9af0:	orr	r3, r3, r7
    9af4:	add	r6, r1, r6
    9af8:	ldr	r6, [r6, #820]	; 0x334
    9afc:	orr	r3, r3, r6
    9b00:	add	r5, r1, r5
    9b04:	ldr	r5, [r5, #820]	; 0x334
    9b08:	orr	r3, r3, r5
    9b0c:	add	r4, r1, r4
    9b10:	ldr	r4, [r4, #820]	; 0x334
    9b14:	orr	r3, r3, r4
    9b18:	add	ip, r1, ip
    9b1c:	ldr	ip, [ip, #820]	; 0x334
    9b20:	orr	r3, r3, ip
    9b24:	add	r0, r1, r0
    9b28:	ldr	r0, [r0, #820]	; 0x334
    9b2c:	orr	r3, r3, r0
    9b30:	add	r1, r1, lr
    9b34:	ldr	r1, [r1, #820]	; 0x334
    9b38:	orr	r3, r3, r1
    9b3c:	ldr	r0, [pc, #860]	; 9ea0 <rb_crypt+0xe98>
    9b40:	add	r0, pc, r0
    9b44:	ldr	ip, [pc, #856]	; 9ea4 <rb_crypt+0xe9c>
    9b48:	add	ip, pc, ip
    9b4c:	add	r1, ip, r2, lsr #26
    9b50:	ldrb	r1, [r1, #848]	; 0x350
    9b54:	strb	r1, [r0, #-2962]	; 0xfffff46e
    9b58:	lsl	r1, r2, #6
    9b5c:	add	r1, ip, r1, lsr #26
    9b60:	ldrb	r1, [r1, #848]	; 0x350
    9b64:	strb	r1, [r0, #-2961]	; 0xfffff46f
    9b68:	lsl	r1, r2, #12
    9b6c:	add	r1, ip, r1, lsr #26
    9b70:	ldrb	r1, [r1, #848]	; 0x350
    9b74:	strb	r1, [r0, #-2960]	; 0xfffff470
    9b78:	lsl	r1, r2, #18
    9b7c:	add	r1, ip, r1, lsr #26
    9b80:	ldrb	r1, [r1, #848]	; 0x350
    9b84:	strb	r1, [r0, #-2959]	; 0xfffff471
    9b88:	lsr	r1, r3, #16
    9b8c:	orr	r2, r1, r2, lsl #16
    9b90:	lsl	r1, r2, #8
    9b94:	add	r1, ip, r1, lsr #26
    9b98:	ldrb	r1, [r1, #848]	; 0x350
    9b9c:	strb	r1, [r0, #-2958]	; 0xfffff472
    9ba0:	lsl	r1, r2, #14
    9ba4:	add	r1, ip, r1, lsr #26
    9ba8:	ldrb	r1, [r1, #848]	; 0x350
    9bac:	strb	r1, [r0, #-2957]	; 0xfffff473
    9bb0:	lsl	r1, r2, #20
    9bb4:	add	r1, ip, r1, lsr #26
    9bb8:	ldrb	r1, [r1, #848]	; 0x350
    9bbc:	strb	r1, [r0, #-2956]	; 0xfffff474
    9bc0:	and	r2, r2, #63	; 0x3f
    9bc4:	add	r2, ip, r2
    9bc8:	ldrb	r2, [r2, #848]	; 0x350
    9bcc:	strb	r2, [r0, #-2955]	; 0xfffff475
    9bd0:	lsl	r2, r3, #2
    9bd4:	lsl	r3, r2, #14
    9bd8:	add	r3, ip, r3, lsr #26
    9bdc:	ldrb	r3, [r3, #848]	; 0x350
    9be0:	strb	r3, [r0, #-2954]	; 0xfffff476
    9be4:	lsl	r3, r2, #20
    9be8:	add	r3, ip, r3, lsr #26
    9bec:	ldrb	r3, [r3, #848]	; 0x350
    9bf0:	strb	r3, [r0, #-2953]	; 0xfffff477
    9bf4:	and	r2, r2, #63	; 0x3f
    9bf8:	add	r3, ip, r2
    9bfc:	ldrb	r3, [r3, #848]	; 0x350
    9c00:	strb	r3, [r0, #-2952]	; 0xfffff478
    9c04:	mov	r3, #0
    9c08:	strb	r3, [r0, #-2951]	; 0xfffff479
    9c0c:	sub	r0, r0, #2960	; 0xb90
    9c10:	sub	r0, r0, #4
    9c14:	add	sp, sp, #228	; 0xe4
    9c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c1c:	ldr	r3, [pc, #644]	; 9ea8 <rb_crypt+0xea0>
    9c20:	add	r3, pc, r3
    9c24:	ldr	r2, [sp, #28]
    9c28:	str	r2, [r3, #-2936]	; 0xfffff488
    9c2c:	mov	r4, r2
    9c30:	ldr	r3, [sp, #28]
    9c34:	sub	r6, r3, r4
    9c38:	mov	r7, #0
    9c3c:	str	r7, [sp, #68]	; 0x44
    9c40:	str	r7, [sp, #64]	; 0x40
    9c44:	ldr	fp, [pc, #608]	; 9eac <rb_crypt+0xea4>
    9c48:	str	fp, [sp, #48]	; 0x30
    9c4c:	ldr	sl, [pc, #604]	; 9eb0 <rb_crypt+0xea8>
    9c50:	str	sl, [sp, #52]	; 0x34
    9c54:	ldr	r9, [pc, #600]	; 9eb4 <rb_crypt+0xeac>
    9c58:	str	r9, [sp, #56]	; 0x38
    9c5c:	ldr	r8, [pc, #596]	; 9eb8 <rb_crypt+0xeb0>
    9c60:	str	r8, [sp, #60]	; 0x3c
    9c64:	mov	r0, r5
    9c68:	bl	47e4 <strlen@plt>
    9c6c:	mov	r2, r0
    9c70:	mov	r1, r5
    9c74:	add	r3, sp, #48	; 0x30
    9c78:	str	r3, [sp, #4]
    9c7c:	mov	r0, r3
    9c80:	bl	6c9c <MD5Update>
    9c84:	mov	r2, #3
    9c88:	ldr	r1, [pc, #556]	; 9ebc <rb_crypt+0xeb4>
    9c8c:	add	r1, pc, r1
    9c90:	ldr	r0, [sp, #4]
    9c94:	bl	6c9c <MD5Update>
    9c98:	str	r6, [sp]
    9c9c:	mov	r2, r6
    9ca0:	mov	r1, r4
    9ca4:	ldr	r0, [sp, #4]
    9ca8:	bl	6c9c <MD5Update>
    9cac:	str	r7, [sp, #156]	; 0x9c
    9cb0:	str	r7, [sp, #152]	; 0x98
    9cb4:	str	fp, [sp, #136]	; 0x88
    9cb8:	str	sl, [sp, #140]	; 0x8c
    9cbc:	str	r9, [sp, #144]	; 0x90
    9cc0:	str	r8, [sp, #148]	; 0x94
    9cc4:	mov	r0, r5
    9cc8:	bl	47e4 <strlen@plt>
    9ccc:	mov	r2, r0
    9cd0:	mov	r1, r5
    9cd4:	add	r7, sp, #136	; 0x88
    9cd8:	mov	r0, r7
    9cdc:	bl	6c9c <MD5Update>
    9ce0:	mov	r2, r6
    9ce4:	mov	r1, r4
    9ce8:	mov	r0, r7
    9cec:	bl	6c9c <MD5Update>
    9cf0:	mov	r0, r5
    9cf4:	bl	47e4 <strlen@plt>
    9cf8:	mov	r2, r0
    9cfc:	mov	r1, r5
    9d00:	mov	r0, r7
    9d04:	bl	6c9c <MD5Update>
    9d08:	mov	r1, r7
    9d0c:	add	r0, sp, #32
    9d10:	bl	6d6c <MD5Final>
    9d14:	mov	r0, r5
    9d18:	bl	47e4 <strlen@plt>
    9d1c:	mov	r4, r0
    9d20:	cmp	r0, #0
    9d24:	ble	9d54 <rb_crypt+0xd4c>
    9d28:	add	r8, sp, #32
    9d2c:	add	r7, sp, #48	; 0x30
    9d30:	cmp	r4, #16
    9d34:	movlt	r2, r4
    9d38:	movge	r2, #16
    9d3c:	mov	r1, r8
    9d40:	mov	r0, r7
    9d44:	bl	6c9c <MD5Update>
    9d48:	sub	r4, r4, #16
    9d4c:	cmp	r4, #0
    9d50:	bgt	9d30 <rb_crypt+0xd28>
    9d54:	mov	r2, #0
    9d58:	str	r2, [sp, #32]
    9d5c:	str	r2, [sp, #36]	; 0x24
    9d60:	str	r2, [sp, #40]	; 0x28
    9d64:	str	r2, [sp, #44]	; 0x2c
    9d68:	mov	r0, r5
    9d6c:	bl	47e4 <strlen@plt>
    9d70:	subs	r4, r0, #0
    9d74:	beq	9da4 <rb_crypt+0xd9c>
    9d78:	add	r9, sp, #32
    9d7c:	add	r8, sp, #48	; 0x30
    9d80:	mov	r7, #1
    9d84:	tst	r4, #1
    9d88:	mov	r2, r7
    9d8c:	movne	r1, r9
    9d90:	moveq	r1, r5
    9d94:	mov	r0, r8
    9d98:	bl	6c9c <MD5Update>
    9d9c:	lsrs	r4, r4, #1
    9da0:	bne	9d84 <rb_crypt+0xd7c>
    9da4:	ldr	r7, [pc, #276]	; 9ec0 <rb_crypt+0xeb8>
    9da8:	add	r7, pc, r7
    9dac:	sub	r4, r7, #3072	; 0xc00
    9db0:	sub	r4, r4, #12
    9db4:	mov	r2, #120	; 0x78
    9db8:	ldr	r1, [pc, #260]	; 9ec4 <rb_crypt+0xebc>
    9dbc:	add	r1, pc, r1
    9dc0:	mov	r0, r4
    9dc4:	bl	46a0 <rb_strlcpy@plt>
    9dc8:	mov	r2, r6
    9dcc:	ldr	r1, [r7, #-2940]	; 0xfffff484
    9dd0:	mov	r0, r4
    9dd4:	bl	48bc <strncat@plt>
    9dd8:	mov	r2, #120	; 0x78
    9ddc:	ldr	r1, [pc, #228]	; 9ec8 <rb_crypt+0xec0>
    9de0:	add	r1, pc, r1
    9de4:	mov	r0, r4
    9de8:	bl	4b8c <rb_strlcat@plt>
    9dec:	add	r1, sp, #48	; 0x30
    9df0:	add	r0, sp, #32
    9df4:	bl	6d6c <MD5Final>
    9df8:	mov	r4, #0
    9dfc:	ldr	fp, [pc, #168]	; 9eac <rb_crypt+0xea4>
    9e00:	ldr	sl, [pc, #168]	; 9eb0 <rb_crypt+0xea8>
    9e04:	ldr	r9, [pc, #168]	; 9eb4 <rb_crypt+0xeac>
    9e08:	ldr	r8, [pc, #168]	; 9eb8 <rb_crypt+0xeb0>
    9e0c:	ldr	r7, [pc, #184]	; 9ecc <rb_crypt+0xec4>
    9e10:	b	9198 <rb_crypt+0x190>
    9e14:	.word	0x00032410
    9e18:	.word	0x0000cdbc
    9e1c:	.word	0x000323dc
    9e20:	.word	0x00032388
    9e24:	.word	0x00032374
    9e28:	.word	0x0003234c
    9e2c:	.word	0x24924925
    9e30:	.word	0x0003225c
    9e34:	.word	0x00032120
    9e38:	.word	0x00032108
    9e3c:	.word	0x000320f0
    9e40:	.word	0x000320e0
    9e44:	.word	0x000200cc
    9e48:	.word	0x000200b8
    9e4c:	.word	0x0002c040
    9e50:	.word	0x0002df94
    9e54:	.word	0x0000c0d0
    9e58:	.word	0x00031f0c
    9e5c:	.word	0x0002dedc
    9e60:	.word	0x0002fecc
    9e64:	.word	0x00031d10
    9e68:	.word	0x00031cfc
    9e6c:	.word	0x0001fd38
    9e70:	.word	0x0001fd20
    9e74:	.word	0x00023cc4
    9e78:	.word	0x00025c74
    9e7c:	.word	0x0001fc44
    9e80:	.word	0x00031bec
    9e84:	.word	0x0002fbe0
    9e88:	.word	0x0001fc18
    9e8c:	.word	0x00031bc8
    9e90:	.word	0x0001fbfc
    9e94:	.word	0x0001fbe4
    9e98:	.word	0x00027a70
    9e9c:	.word	0x000299c8
    9ea0:	.word	0x00031944
    9ea4:	.word	0x0000baf0
    9ea8:	.word	0x00031864
    9eac:	.word	0x67452301
    9eb0:	.word	0xefcdab89
    9eb4:	.word	0x98badcfe
    9eb8:	.word	0x10325476
    9ebc:	.word	0x0000c1b8
    9ec0:	.word	0x000316dc
    9ec4:	.word	0x0000c088
    9ec8:	.word	0x0000c058
    9ecc:	.word	0xaaaaaaab

00009ed0 <rb_init_bh>:
    9ed0:	push	{r4, lr}
    9ed4:	mov	r1, #12
    9ed8:	mov	r0, #1
    9edc:	bl	45ec <calloc@plt>
    9ee0:	cmp	r0, #0
    9ee4:	beq	9ef8 <rb_init_bh+0x28>
    9ee8:	ldr	r3, [pc, #12]	; 9efc <rb_init_bh+0x2c>
    9eec:	add	r3, pc, r3
    9ef0:	str	r0, [r3]
    9ef4:	pop	{r4, pc}
    9ef8:	bl	4988 <rb_outofmemory@plt>
    9efc:	.word	0x00030ab0

00009f00 <rb_bh_create>:
    9f00:	push	{r4, r5, r6, r7, r8, lr}
    9f04:	cmp	r0, #0
    9f08:	cmpne	r1, #0
    9f0c:	ble	9fb8 <rb_bh_create+0xb8>
    9f10:	mov	r5, r2
    9f14:	mov	r6, r0
    9f18:	mov	r7, r1
    9f1c:	cmp	r0, #11
    9f20:	bls	9fdc <rb_bh_create+0xdc>
    9f24:	mov	r1, #48	; 0x30
    9f28:	mov	r0, #1
    9f2c:	bl	45ec <calloc@plt>
    9f30:	subs	r4, r0, #0
    9f34:	beq	a000 <rb_bh_create+0x100>
    9f38:	str	r6, [r4, #12]
    9f3c:	str	r7, [r4, #16]
    9f40:	cmp	r5, #0
    9f44:	beq	9f70 <rb_bh_create+0x70>
    9f48:	mov	r0, r5
    9f4c:	bl	47e4 <strlen@plt>
    9f50:	add	r0, r0, #1
    9f54:	bl	49ac <malloc@plt>
    9f58:	subs	r6, r0, #0
    9f5c:	beq	a004 <rb_bh_create+0x104>
    9f60:	mov	r1, r5
    9f64:	mov	r0, r6
    9f68:	bl	488c <strcpy@plt>
    9f6c:	str	r6, [r4, #44]	; 0x2c
    9f70:	ldr	r3, [pc, #160]	; a018 <rb_bh_create+0x118>
    9f74:	add	r3, pc, r3
    9f78:	ldr	r3, [r3]
    9f7c:	str	r4, [r4]
    9f80:	mov	r2, #0
    9f84:	str	r2, [r4, #4]
    9f88:	ldr	r2, [r3]
    9f8c:	str	r2, [r4, #8]
    9f90:	ldr	r2, [r3]
    9f94:	cmp	r2, #0
    9f98:	strne	r4, [r2, #4]
    9f9c:	beq	a008 <rb_bh_create+0x108>
    9fa0:	str	r4, [r3]
    9fa4:	ldr	r2, [r3, #8]
    9fa8:	add	r2, r2, #1
    9fac:	str	r2, [r3, #8]
    9fb0:	mov	r0, r4
    9fb4:	pop	{r4, r5, r6, r7, r8, pc}
    9fb8:	mov	r3, #147	; 0x93
    9fbc:	ldr	r2, [pc, #88]	; a01c <rb_bh_create+0x11c>
    9fc0:	add	r2, pc, r2
    9fc4:	ldr	r1, [pc, #84]	; a020 <rb_bh_create+0x120>
    9fc8:	add	r1, pc, r1
    9fcc:	ldr	r0, [pc, #80]	; a024 <rb_bh_create+0x124>
    9fd0:	add	r0, pc, r0
    9fd4:	bl	491c <rb_lib_log@plt>
    9fd8:	bl	43c4 <abort@plt>
    9fdc:	mov	r3, #151	; 0x97
    9fe0:	ldr	r2, [pc, #64]	; a028 <rb_bh_create+0x128>
    9fe4:	add	r2, pc, r2
    9fe8:	ldr	r1, [pc, #60]	; a02c <rb_bh_create+0x12c>
    9fec:	add	r1, pc, r1
    9ff0:	ldr	r0, [pc, #56]	; a030 <rb_bh_create+0x130>
    9ff4:	add	r0, pc, r0
    9ff8:	bl	491c <rb_lib_log@plt>
    9ffc:	bl	43c4 <abort@plt>
    a000:	bl	4988 <rb_outofmemory@plt>
    a004:	bl	4988 <rb_outofmemory@plt>
    a008:	ldr	r2, [r3, #4]
    a00c:	cmp	r2, #0
    a010:	streq	r4, [r3, #4]
    a014:	b	9fa0 <rb_bh_create+0xa0>
    a018:	.word	0x00030a28
    a01c:	.word	0x0000be88
    a020:	.word	0x0000be8c
    a024:	.word	0x0000beb0
    a028:	.word	0x0000be64
    a02c:	.word	0x0000bebc
    a030:	.word	0x0000be8c

0000a034 <rb_bh_alloc>:
    a034:	push	{r4, lr}
    a038:	cmp	r0, #0
    a03c:	beq	a058 <rb_bh_alloc+0x24>
    a040:	ldr	r1, [r0, #12]
    a044:	mov	r0, #1
    a048:	bl	45ec <calloc@plt>
    a04c:	cmp	r0, #0
    a050:	popne	{r4, pc}
    a054:	bl	4988 <rb_outofmemory@plt>
    a058:	mov	r3, #186	; 0xba
    a05c:	ldr	r2, [pc, #24]	; a07c <rb_bh_alloc+0x48>
    a060:	add	r2, pc, r2
    a064:	ldr	r1, [pc, #20]	; a080 <rb_bh_alloc+0x4c>
    a068:	add	r1, pc, r1
    a06c:	ldr	r0, [pc, #16]	; a084 <rb_bh_alloc+0x50>
    a070:	add	r0, pc, r0
    a074:	bl	491c <rb_lib_log@plt>
    a078:	bl	43c4 <abort@plt>
    a07c:	.word	0x0000bde8
    a080:	.word	0x0000be7c
    a084:	.word	0x0000be10

0000a088 <rb_bh_free>:
    a088:	push	{r4, lr}
    a08c:	cmp	r0, #0
    a090:	beq	a0ac <rb_bh_free+0x24>
    a094:	cmp	r1, #0
    a098:	beq	a0c0 <rb_bh_free+0x38>
    a09c:	mov	r0, r1
    a0a0:	bl	46f4 <free@plt>
    a0a4:	mov	r0, #0
    a0a8:	pop	{r4, pc}
    a0ac:	ldr	r0, [pc, #32]	; a0d4 <rb_bh_free+0x4c>
    a0b0:	add	r0, pc, r0
    a0b4:	bl	491c <rb_lib_log@plt>
    a0b8:	mov	r0, #1
    a0bc:	pop	{r4, pc}
    a0c0:	ldr	r0, [pc, #16]	; a0d8 <rb_bh_free+0x50>
    a0c4:	add	r0, pc, r0
    a0c8:	bl	491c <rb_lib_log@plt>
    a0cc:	mov	r0, #1
    a0d0:	pop	{r4, pc}
    a0d4:	.word	0x0000be54
    a0d8:	.word	0x0000be60

0000a0dc <rb_bh_destroy>:
    a0dc:	push	{r4, lr}
    a0e0:	subs	r4, r0, #0
    a0e4:	beq	a15c <rb_bh_destroy+0x80>
    a0e8:	ldr	r3, [pc, #116]	; a164 <rb_bh_destroy+0x88>
    a0ec:	add	r3, pc, r3
    a0f0:	ldr	r2, [r3]
    a0f4:	ldr	r3, [r4, #8]
    a0f8:	cmp	r3, #0
    a0fc:	ldrne	r1, [r4, #4]
    a100:	strne	r1, [r3, #4]
    a104:	ldreq	r3, [r4, #4]
    a108:	streq	r3, [r2, #4]
    a10c:	ldr	r3, [r4, #4]
    a110:	cmp	r3, #0
    a114:	ldrne	r1, [r4, #8]
    a118:	strne	r1, [r3, #8]
    a11c:	ldreq	r3, [r4, #8]
    a120:	streq	r3, [r2]
    a124:	mov	r3, #0
    a128:	str	r3, [r4, #4]
    a12c:	str	r3, [r4, #8]
    a130:	ldr	r3, [r2, #8]
    a134:	sub	r3, r3, #1
    a138:	str	r3, [r2, #8]
    a13c:	ldr	r0, [r4, #44]	; 0x2c
    a140:	cmp	r0, #0
    a144:	beq	a14c <rb_bh_destroy+0x70>
    a148:	bl	46f4 <free@plt>
    a14c:	mov	r0, r4
    a150:	bl	46f4 <free@plt>
    a154:	mov	r0, #0
    a158:	pop	{r4, pc}
    a15c:	mov	r0, #1
    a160:	pop	{r4, pc}
    a164:	.word	0x000308b0

0000a168 <rb_bh_usage>:
    a168:	ldr	r0, [sp]
    a16c:	cmp	r1, #0
    a170:	movne	ip, #0
    a174:	strne	ip, [r1]
    a178:	cmp	r2, #0
    a17c:	movne	r1, #0
    a180:	strne	r1, [r2]
    a184:	cmp	r3, #0
    a188:	movne	r2, #0
    a18c:	strne	r2, [r3]
    a190:	cmp	r0, #0
    a194:	ldrne	r3, [pc, #8]	; a1a4 <rb_bh_usage+0x3c>
    a198:	addne	r3, pc, r3
    a19c:	strne	r3, [r0]
    a1a0:	bx	lr
    a1a4:	.word	0x0000bdac

0000a1a8 <rb_bh_usage_all>:
    a1a8:	push	{r4, r5, r6, r7, lr}
    a1ac:	sub	sp, sp, #12
    a1b0:	subs	r7, r0, #0
    a1b4:	beq	a224 <rb_bh_usage_all+0x7c>
    a1b8:	ldr	r3, [pc, #108]	; a22c <rb_bh_usage_all+0x84>
    a1bc:	add	r3, pc, r3
    a1c0:	ldr	r3, [r3]
    a1c4:	ldr	r4, [r3]
    a1c8:	cmp	r4, #0
    a1cc:	beq	a224 <rb_bh_usage_all+0x7c>
    a1d0:	mov	r6, r1
    a1d4:	ldr	r5, [pc, #84]	; a230 <rb_bh_usage_all+0x88>
    a1d8:	add	r5, pc, r5
    a1dc:	ldr	ip, [r4]
    a1e0:	ldr	r1, [ip, #40]	; 0x28
    a1e4:	ldr	r2, [ip, #28]
    a1e8:	ldr	r3, [ip, #16]
    a1ec:	mul	r3, r3, r2
    a1f0:	sub	r0, r3, r1
    a1f4:	ldr	r2, [ip, #12]
    a1f8:	ldr	ip, [ip, #44]	; 0x2c
    a1fc:	cmp	ip, #0
    a200:	movne	r5, ip
    a204:	str	r6, [sp, #4]
    a208:	str	r5, [sp]
    a20c:	mul	r3, r2, r3
    a210:	mul	r2, r2, r0
    a214:	blx	r7
    a218:	ldr	r4, [r4, #8]
    a21c:	cmp	r4, #0
    a220:	bne	a1dc <rb_bh_usage_all+0x34>
    a224:	add	sp, sp, #12
    a228:	pop	{r4, r5, r6, r7, pc}
    a22c:	.word	0x000307e0
    a230:	.word	0x0000bd7c

0000a234 <rb_bh_total_usage>:
    a234:	push	{r4, r5, lr}
    a238:	ldr	r3, [pc, #104]	; a2a8 <rb_bh_total_usage+0x74>
    a23c:	add	r3, pc, r3
    a240:	ldr	r3, [r3]
    a244:	ldr	ip, [r3]
    a248:	cmp	ip, #0
    a24c:	beq	a29c <rb_bh_total_usage+0x68>
    a250:	mov	r4, #0
    a254:	mov	r5, r4
    a258:	ldr	r2, [ip]
    a25c:	ldr	lr, [r2, #28]
    a260:	ldr	r3, [r2, #16]
    a264:	mul	r3, r3, lr
    a268:	ldr	lr, [r2, #12]
    a26c:	ldr	r2, [r2, #40]	; 0x28
    a270:	sub	r2, r3, r2
    a274:	mla	r4, lr, r2, r4
    a278:	mla	r5, lr, r3, r5
    a27c:	ldr	ip, [ip, #8]
    a280:	cmp	ip, #0
    a284:	bne	a258 <rb_bh_total_usage+0x24>
    a288:	cmp	r0, #0
    a28c:	strne	r5, [r0]
    a290:	cmp	r1, #0
    a294:	strne	r4, [r1]
    a298:	pop	{r4, r5, pc}
    a29c:	mov	r4, #0
    a2a0:	mov	r5, r4
    a2a4:	b	a288 <rb_bh_total_usage+0x54>
    a2a8:	.word	0x00030760

0000a2ac <inetntoa>:
    a2ac:	ldrb	r2, [r0]
    a2b0:	ldr	r3, [pc, #240]	; a3a8 <inetntoa+0xfc>
    a2b4:	add	r3, pc, r3
    a2b8:	ldr	r2, [r3, r2, lsl #2]
    a2bc:	ldrb	r3, [r2]
    a2c0:	cmp	r3, #0
    a2c4:	beq	a39c <inetntoa+0xf0>
    a2c8:	ldr	r1, [pc, #220]	; a3ac <inetntoa+0x100>
    a2cc:	add	r1, pc, r1
    a2d0:	strb	r3, [r1], #1
    a2d4:	ldrb	r3, [r2, #1]!
    a2d8:	cmp	r3, #0
    a2dc:	bne	a2d0 <inetntoa+0x24>
    a2e0:	add	ip, r1, #1
    a2e4:	mov	r3, #46	; 0x2e
    a2e8:	strb	r3, [r1]
    a2ec:	ldrb	r2, [r0, #1]
    a2f0:	ldr	r3, [pc, #184]	; a3b0 <inetntoa+0x104>
    a2f4:	add	r3, pc, r3
    a2f8:	ldr	r2, [r3, r2, lsl #2]
    a2fc:	ldrb	r3, [r2]
    a300:	cmp	r3, #0
    a304:	beq	a318 <inetntoa+0x6c>
    a308:	strb	r3, [ip], #1
    a30c:	ldrb	r3, [r2, #1]!
    a310:	cmp	r3, #0
    a314:	bne	a308 <inetntoa+0x5c>
    a318:	add	r1, ip, #1
    a31c:	mov	r3, #46	; 0x2e
    a320:	strb	r3, [ip]
    a324:	ldrb	r2, [r0, #2]
    a328:	ldr	r3, [pc, #132]	; a3b4 <inetntoa+0x108>
    a32c:	add	r3, pc, r3
    a330:	ldr	r2, [r3, r2, lsl #2]
    a334:	ldrb	r3, [r2]
    a338:	cmp	r3, #0
    a33c:	beq	a350 <inetntoa+0xa4>
    a340:	strb	r3, [r1], #1
    a344:	ldrb	r3, [r2, #1]!
    a348:	cmp	r3, #0
    a34c:	bne	a340 <inetntoa+0x94>
    a350:	add	ip, r1, #1
    a354:	mov	r3, #46	; 0x2e
    a358:	strb	r3, [r1]
    a35c:	ldrb	r2, [r0, #3]
    a360:	ldr	r3, [pc, #80]	; a3b8 <inetntoa+0x10c>
    a364:	add	r3, pc, r3
    a368:	ldr	r2, [r3, r2, lsl #2]
    a36c:	ldrb	r3, [r2]
    a370:	cmp	r3, #0
    a374:	beq	a388 <inetntoa+0xdc>
    a378:	strb	r3, [ip], #1
    a37c:	ldrb	r3, [r2, #1]!
    a380:	cmp	r3, #0
    a384:	bne	a378 <inetntoa+0xcc>
    a388:	mov	r3, #0
    a38c:	strb	r3, [ip]
    a390:	ldr	r0, [pc, #36]	; a3bc <inetntoa+0x110>
    a394:	add	r0, pc, r0
    a398:	bx	lr
    a39c:	ldr	r1, [pc, #28]	; a3c0 <inetntoa+0x114>
    a3a0:	add	r1, pc, r1
    a3a4:	b	a2e0 <inetntoa+0x34>
    a3a8:	.word	0x0001d788
    a3ac:	.word	0x000306d4
    a3b0:	.word	0x0001d748
    a3b4:	.word	0x0001d710
    a3b8:	.word	0x0001d6d8
    a3bc:	.word	0x0003060c
    a3c0:	.word	0x00030600

0000a3c4 <inet_pton4>:
    a3c4:	push	{r4, r5, r6, lr}
    a3c8:	sub	sp, sp, #8
    a3cc:	mov	r2, #0
    a3d0:	add	ip, sp, #8
    a3d4:	strb	r2, [ip, #-4]!
    a3d8:	mov	r4, r2
    a3dc:	mov	r5, r2
    a3e0:	mov	r6, #1
    a3e4:	b	a414 <inet_pton4+0x50>
    a3e8:	cmp	r3, #46	; 0x2e
    a3ec:	movne	r3, #0
    a3f0:	andeq	r3, r2, #1
    a3f4:	eor	r3, r3, #1
    a3f8:	cmp	r4, #4
    a3fc:	orreq	r3, r3, #1
    a400:	cmp	r3, #0
    a404:	bne	a494 <inet_pton4+0xd0>
    a408:	strb	r5, [ip, #1]
    a40c:	add	ip, ip, #1
    a410:	mov	r2, r5
    a414:	ldrb	r3, [r0], #1
    a418:	mov	lr, r3
    a41c:	cmp	r3, #0
    a420:	beq	a468 <inet_pton4+0xa4>
    a424:	sub	lr, r3, #48	; 0x30
    a428:	cmp	lr, #9
    a42c:	bhi	a3e8 <inet_pton4+0x24>
    a430:	ldrb	lr, [ip]
    a434:	add	lr, lr, lr, lsl #2
    a438:	sub	r3, r3, #48	; 0x30
    a43c:	add	r3, r3, lr, lsl #1
    a440:	cmp	r3, #255	; 0xff
    a444:	bhi	a484 <inet_pton4+0xc0>
    a448:	strb	r3, [ip]
    a44c:	cmp	r2, #0
    a450:	bne	a414 <inet_pton4+0x50>
    a454:	add	r4, r4, #1
    a458:	cmp	r4, #4
    a45c:	bgt	a48c <inet_pton4+0xc8>
    a460:	mov	r2, r6
    a464:	b	a414 <inet_pton4+0x50>
    a468:	cmp	r4, #3
    a46c:	ldrgt	r3, [sp, #4]
    a470:	strgt	r3, [r1]
    a474:	movgt	lr, #1
    a478:	mov	r0, lr
    a47c:	add	sp, sp, #8
    a480:	pop	{r4, r5, r6, pc}
    a484:	mov	lr, #0
    a488:	b	a478 <inet_pton4+0xb4>
    a48c:	mov	lr, r2
    a490:	b	a478 <inet_pton4+0xb4>
    a494:	mov	lr, #0
    a498:	b	a478 <inet_pton4+0xb4>

0000a49c <rb_unsupported_event>:
    a49c:	mov	r0, #0
    a4a0:	bx	lr

0000a4a4 <rb_checktimeouts>:
    a4a4:	ldr	r3, [pc, #244]	; a5a0 <rb_checktimeouts+0xfc>
    a4a8:	add	r3, pc, r3
    a4ac:	ldr	r3, [r3, #16]
    a4b0:	cmp	r3, #0
    a4b4:	bxeq	lr
    a4b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4bc:	sub	sp, sp, #12
    a4c0:	ldr	r4, [r3, #8]
    a4c4:	mov	r7, #0
    a4c8:	ldr	r8, [pc, #212]	; a5a4 <rb_checktimeouts+0x100>
    a4cc:	add	r8, pc, r8
    a4d0:	ldr	fp, [pc, #208]	; a5a8 <rb_checktimeouts+0x104>
    a4d4:	add	fp, pc, fp
    a4d8:	ldr	r2, [pc, #204]	; a5ac <rb_checktimeouts+0x108>
    a4dc:	add	r2, pc, r2
    a4e0:	str	r2, [sp, #4]
    a4e4:	b	a504 <rb_checktimeouts+0x60>
    a4e8:	mov	r1, sl
    a4ec:	mov	r0, r6
    a4f0:	blx	r9
    a4f4:	cmp	r4, #0
    a4f8:	beq	a598 <rb_checktimeouts+0xf4>
    a4fc:	mov	r3, r4
    a500:	ldr	r4, [r4, #8]
    a504:	ldr	r5, [r3]
    a508:	ldr	r6, [r5]
    a50c:	cmp	r6, #0
    a510:	beq	a4f4 <rb_checktimeouts+0x50>
    a514:	ldrb	r3, [r6, #16]
    a518:	tst	r3, #1
    a51c:	beq	a4f4 <rb_checktimeouts+0x50>
    a520:	ldr	r9, [r5, #16]
    a524:	bl	47f0 <rb_current_time@plt>
    a528:	cmp	r9, r0
    a52c:	bge	a4f4 <rb_checktimeouts+0x50>
    a530:	ldr	r9, [r5, #20]
    a534:	ldr	sl, [r5, #24]
    a538:	ldr	r3, [r5, #12]
    a53c:	cmp	r3, #0
    a540:	ldrne	r2, [r5, #8]
    a544:	strne	r2, [r3, #4]
    a548:	ldreq	r3, [r5, #8]
    a54c:	ldreq	r2, [sp, #4]
    a550:	streq	r3, [r2, #20]
    a554:	ldr	r3, [r5, #8]
    a558:	cmp	r3, #0
    a55c:	ldrne	r2, [r5, #12]
    a560:	strne	r2, [r3, #8]
    a564:	ldreq	r3, [r5, #12]
    a568:	streq	r3, [fp, #16]
    a56c:	str	r7, [r5, #8]
    a570:	str	r7, [r5, #12]
    a574:	ldr	r3, [r8, #24]
    a578:	sub	r3, r3, #1
    a57c:	str	r3, [r8, #24]
    a580:	str	r7, [r6, #44]	; 0x2c
    a584:	cmp	r5, #0
    a588:	beq	a4e8 <rb_checktimeouts+0x44>
    a58c:	mov	r0, r5
    a590:	bl	46f4 <free@plt>
    a594:	b	a4e8 <rb_checktimeouts+0x44>
    a598:	add	sp, sp, #12
    a59c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5a0:	.word	0x000304f8
    a5a4:	.word	0x000304d4
    a5a8:	.word	0x000304cc
    a5ac:	.word	0x000304c4

0000a5b0 <inet_pton6>:
    a5b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5b4:	sub	sp, sp, #44	; 0x2c
    a5b8:	mov	r5, r0
    a5bc:	str	r1, [sp, #12]
    a5c0:	mov	r2, #0
    a5c4:	str	r2, [sp, #24]
    a5c8:	add	r3, sp, #24
    a5cc:	str	r2, [sp, #28]
    a5d0:	str	r2, [sp, #32]
    a5d4:	str	r2, [sp, #36]	; 0x24
    a5d8:	str	r3, [sp, #4]
    a5dc:	add	r3, sp, #40	; 0x28
    a5e0:	str	r3, [sp, #8]
    a5e4:	ldrb	r3, [r0]
    a5e8:	cmp	r3, #58	; 0x3a
    a5ec:	beq	a658 <inet_pton6+0xa8>
    a5f0:	bl	482c <__ctype_tolower_loc@plt>
    a5f4:	ldr	r8, [r0]
    a5f8:	str	r5, [sp, #20]
    a5fc:	mov	r4, #0
    a600:	mov	r7, r4
    a604:	str	r4, [sp, #16]
    a608:	ldr	r9, [pc, #520]	; a818 <inet_pton6+0x268>
    a60c:	add	r9, pc, r9
    a610:	ldr	fp, [pc, #516]	; a81c <inet_pton6+0x26c>
    a614:	add	fp, pc, fp
    a618:	ldr	sl, [pc, #512]	; a820 <inet_pton6+0x270>
    a61c:	ldrb	r3, [r5], #1
    a620:	ldr	r6, [r8, r3, lsl #2]
    a624:	cmp	r6, #0
    a628:	beq	a734 <inet_pton6+0x184>
    a62c:	mov	r1, r6
    a630:	mov	r0, r9
    a634:	bl	45b0 <strchr@plt>
    a638:	cmp	r0, #0
    a63c:	beq	a670 <inet_pton6+0xc0>
    a640:	sub	r0, r0, fp
    a644:	orr	r4, r0, r4, lsl #4
    a648:	cmp	r4, sl
    a64c:	bhi	a7f0 <inet_pton6+0x240>
    a650:	mov	r7, #1
    a654:	b	a61c <inet_pton6+0x6c>
    a658:	ldrb	r3, [r0, #1]
    a65c:	cmp	r3, #58	; 0x3a
    a660:	movne	r7, #0
    a664:	bne	a7f4 <inet_pton6+0x244>
    a668:	add	r5, r0, #1
    a66c:	b	a5f0 <inet_pton6+0x40>
    a670:	cmp	r6, #58	; 0x3a
    a674:	beq	a6cc <inet_pton6+0x11c>
    a678:	ldrb	r3, [r5]
    a67c:	adds	r3, r3, #0
    a680:	movne	r3, #1
    a684:	cmp	r6, #46	; 0x2e
    a688:	movne	r3, #0
    a68c:	cmp	r3, #0
    a690:	beq	a61c <inet_pton6+0x6c>
    a694:	ldr	r3, [sp, #4]
    a698:	add	r4, r3, #4
    a69c:	ldr	r3, [sp, #8]
    a6a0:	cmp	r3, r4
    a6a4:	movcc	r7, #0
    a6a8:	bcc	a7f4 <inet_pton6+0x244>
    a6ac:	ldr	r1, [sp, #4]
    a6b0:	ldr	r0, [sp, #20]
    a6b4:	bl	a3c4 <inet_pton4>
    a6b8:	cmp	r0, #0
    a6bc:	movle	r7, #0
    a6c0:	ble	a7f4 <inet_pton6+0x244>
    a6c4:	str	r4, [sp, #4]
    a6c8:	b	a768 <inet_pton6+0x1b8>
    a6cc:	cmp	r7, #0
    a6d0:	bne	a6f0 <inet_pton6+0x140>
    a6d4:	ldr	r3, [sp, #16]
    a6d8:	cmp	r3, #0
    a6dc:	bne	a7f4 <inet_pton6+0x244>
    a6e0:	str	r5, [sp, #20]
    a6e4:	ldr	r3, [sp, #4]
    a6e8:	str	r3, [sp, #16]
    a6ec:	b	a61c <inet_pton6+0x6c>
    a6f0:	ldrb	r3, [r5]
    a6f4:	cmp	r3, #0
    a6f8:	beq	a800 <inet_pton6+0x250>
    a6fc:	ldr	r1, [sp, #4]
    a700:	add	r3, r1, #2
    a704:	ldr	r2, [sp, #8]
    a708:	cmp	r2, r3
    a70c:	bcc	a808 <inet_pton6+0x258>
    a710:	lsr	r2, r4, #8
    a714:	mov	r3, r1
    a718:	strb	r2, [r3], #2
    a71c:	strb	r4, [r1, #1]
    a720:	str	r5, [sp, #20]
    a724:	str	r3, [sp, #4]
    a728:	mov	r4, #0
    a72c:	mov	r7, r4
    a730:	b	a61c <inet_pton6+0x6c>
    a734:	cmp	r7, #0
    a738:	beq	a768 <inet_pton6+0x1b8>
    a73c:	ldr	r1, [sp, #4]
    a740:	add	r3, r1, #2
    a744:	ldr	r2, [sp, #8]
    a748:	cmp	r2, r3
    a74c:	movcc	r7, r6
    a750:	bcc	a7f4 <inet_pton6+0x244>
    a754:	lsr	r2, r4, #8
    a758:	mov	r3, r1
    a75c:	strb	r2, [r3], #2
    a760:	strb	r4, [r1, #1]
    a764:	str	r3, [sp, #4]
    a768:	ldr	r1, [sp, #16]
    a76c:	cmp	r1, #0
    a770:	beq	a7d8 <inet_pton6+0x228>
    a774:	ldr	r2, [sp, #4]
    a778:	sub	r3, r2, r1
    a77c:	ldr	r0, [sp, #8]
    a780:	cmp	r2, r0
    a784:	beq	a810 <inet_pton6+0x260>
    a788:	cmp	r3, #0
    a78c:	ble	a7b4 <inet_pton6+0x204>
    a790:	mov	r1, r2
    a794:	mov	r2, #1
    a798:	mov	lr, #0
    a79c:	ldrb	ip, [r1, #-1]
    a7a0:	strb	ip, [r0, #-1]!
    a7a4:	strb	lr, [r1, #-1]!
    a7a8:	add	r2, r2, #1
    a7ac:	cmp	r3, r2
    a7b0:	bge	a79c <inet_pton6+0x1ec>
    a7b4:	add	ip, sp, #24
    a7b8:	ldm	ip!, {r0, r1, r2, r3}
    a7bc:	ldr	ip, [sp, #12]
    a7c0:	str	r0, [ip]
    a7c4:	str	r1, [ip, #4]
    a7c8:	str	r2, [ip, #8]
    a7cc:	str	r3, [ip, #12]
    a7d0:	mov	r7, #1
    a7d4:	b	a7f4 <inet_pton6+0x244>
    a7d8:	ldr	r3, [sp, #4]
    a7dc:	ldr	r2, [sp, #8]
    a7e0:	cmp	r3, r2
    a7e4:	movne	r7, #0
    a7e8:	bne	a7f4 <inet_pton6+0x244>
    a7ec:	b	a7b4 <inet_pton6+0x204>
    a7f0:	mov	r7, #0
    a7f4:	mov	r0, r7
    a7f8:	add	sp, sp, #44	; 0x2c
    a7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a800:	mov	r7, #0
    a804:	b	a7f4 <inet_pton6+0x244>
    a808:	mov	r7, #0
    a80c:	b	a7f4 <inet_pton6+0x244>
    a810:	mov	r7, #0
    a814:	b	a7f4 <inet_pton6+0x244>
    a818:	.word	0x0000b958
    a81c:	.word	0x0000b950
    a820:	.word	0x0000ffff

0000a824 <try_kqueue>:
    a824:	push	{r4, r5, r6, lr}
    a828:	ldr	r4, [pc, #140]	; a8bc <try_kqueue+0x98>
    a82c:	add	r4, pc, r4
    a830:	bl	1292c <rb_init_netio_kqueue>
    a834:	subs	r5, r0, #0
    a838:	bne	a8b4 <try_kqueue+0x90>
    a83c:	ldr	r0, [pc, #124]	; a8c0 <try_kqueue+0x9c>
    a840:	add	r0, pc, r0
    a844:	ldr	r3, [pc, #120]	; a8c4 <try_kqueue+0xa0>
    a848:	ldr	r3, [r4, r3]
    a84c:	str	r3, [r0, #28]
    a850:	ldr	r3, [pc, #112]	; a8c8 <try_kqueue+0xa4>
    a854:	ldr	r3, [r4, r3]
    a858:	str	r3, [r0, #32]
    a85c:	ldr	r3, [pc, #104]	; a8cc <try_kqueue+0xa8>
    a860:	ldr	r3, [r4, r3]
    a864:	str	r3, [r0, #36]	; 0x24
    a868:	ldr	r3, [pc, #96]	; a8d0 <try_kqueue+0xac>
    a86c:	ldr	r3, [r4, r3]
    a870:	str	r3, [r0, #40]	; 0x28
    a874:	ldr	r3, [pc, #88]	; a8d4 <try_kqueue+0xb0>
    a878:	ldr	r3, [r4, r3]
    a87c:	str	r3, [r0, #44]	; 0x2c
    a880:	ldr	r3, [pc, #80]	; a8d8 <try_kqueue+0xb4>
    a884:	ldr	r3, [r4, r3]
    a888:	str	r3, [r0, #48]	; 0x30
    a88c:	ldr	r3, [pc, #72]	; a8dc <try_kqueue+0xb8>
    a890:	ldr	r3, [r4, r3]
    a894:	str	r3, [r0, #52]	; 0x34
    a898:	mov	r2, #25
    a89c:	ldr	r1, [pc, #60]	; a8e0 <try_kqueue+0xbc>
    a8a0:	add	r1, pc, r1
    a8a4:	add	r0, r0, #56	; 0x38
    a8a8:	bl	46a0 <rb_strlcpy@plt>
    a8ac:	mov	r0, r5
    a8b0:	pop	{r4, r5, r6, pc}
    a8b4:	mvn	r5, #0
    a8b8:	b	a8ac <try_kqueue+0x88>
    a8bc:	.word	0x0001d7cc
    a8c0:	.word	0x00030160
    a8c4:	.word	0x000003bc
    a8c8:	.word	0x00000378
    a8cc:	.word	0x00000398
    a8d0:	.word	0x00000390
    a8d4:	.word	0x000003d4
    a8d8:	.word	0x00000394
    a8dc:	.word	0x000003e4
    a8e0:	.word	0x0000b6e0

0000a8e4 <try_epoll>:
    a8e4:	push	{r4, r5, r6, lr}
    a8e8:	ldr	r4, [pc, #140]	; a97c <try_epoll+0x98>
    a8ec:	add	r4, pc, r4
    a8f0:	bl	109cc <rb_init_netio_epoll>
    a8f4:	subs	r5, r0, #0
    a8f8:	bne	a974 <try_epoll+0x90>
    a8fc:	ldr	r0, [pc, #124]	; a980 <try_epoll+0x9c>
    a900:	add	r0, pc, r0
    a904:	ldr	r3, [pc, #120]	; a984 <try_epoll+0xa0>
    a908:	ldr	r3, [r4, r3]
    a90c:	str	r3, [r0, #28]
    a910:	ldr	r3, [pc, #112]	; a988 <try_epoll+0xa4>
    a914:	ldr	r3, [r4, r3]
    a918:	str	r3, [r0, #32]
    a91c:	ldr	r3, [pc, #104]	; a98c <try_epoll+0xa8>
    a920:	ldr	r3, [r4, r3]
    a924:	str	r3, [r0, #36]	; 0x24
    a928:	ldr	r3, [pc, #96]	; a990 <try_epoll+0xac>
    a92c:	ldr	r3, [r4, r3]
    a930:	str	r3, [r0, #40]	; 0x28
    a934:	ldr	r3, [pc, #88]	; a994 <try_epoll+0xb0>
    a938:	ldr	r3, [r4, r3]
    a93c:	str	r3, [r0, #44]	; 0x2c
    a940:	ldr	r3, [pc, #80]	; a998 <try_epoll+0xb4>
    a944:	ldr	r3, [r4, r3]
    a948:	str	r3, [r0, #52]	; 0x34
    a94c:	ldr	r3, [pc, #72]	; a99c <try_epoll+0xb8>
    a950:	ldr	r3, [r4, r3]
    a954:	str	r3, [r0, #48]	; 0x30
    a958:	mov	r2, #25
    a95c:	ldr	r1, [pc, #60]	; a9a0 <try_epoll+0xbc>
    a960:	add	r1, pc, r1
    a964:	add	r0, r0, #56	; 0x38
    a968:	bl	46a0 <rb_strlcpy@plt>
    a96c:	mov	r0, r5
    a970:	pop	{r4, r5, r6, pc}
    a974:	mvn	r5, #0
    a978:	b	a96c <try_epoll+0x88>
    a97c:	.word	0x0001d70c
    a980:	.word	0x000300a0
    a984:	.word	0x00000368
    a988:	.word	0x000003c8
    a98c:	.word	0x00000404
    a990:	.word	0x00000384
    a994:	.word	0x000003c4
    a998:	.word	0x00000354
    a99c:	.word	0x00000418
    a9a0:	.word	0x0000b628

0000a9a4 <try_ports>:
    a9a4:	push	{r4, r5, r6, lr}
    a9a8:	ldr	r4, [pc, #140]	; aa3c <try_ports+0x98>
    a9ac:	add	r4, pc, r4
    a9b0:	bl	11820 <rb_init_netio_ports>
    a9b4:	subs	r5, r0, #0
    a9b8:	bne	aa34 <try_ports+0x90>
    a9bc:	ldr	r0, [pc, #124]	; aa40 <try_ports+0x9c>
    a9c0:	add	r0, pc, r0
    a9c4:	ldr	r3, [pc, #120]	; aa44 <try_ports+0xa0>
    a9c8:	ldr	r3, [r4, r3]
    a9cc:	str	r3, [r0, #28]
    a9d0:	ldr	r3, [pc, #112]	; aa48 <try_ports+0xa4>
    a9d4:	ldr	r3, [r4, r3]
    a9d8:	str	r3, [r0, #32]
    a9dc:	ldr	r3, [pc, #104]	; aa4c <try_ports+0xa8>
    a9e0:	ldr	r3, [r4, r3]
    a9e4:	str	r3, [r0, #36]	; 0x24
    a9e8:	ldr	r3, [pc, #96]	; aa50 <try_ports+0xac>
    a9ec:	ldr	r3, [r4, r3]
    a9f0:	str	r3, [r0, #40]	; 0x28
    a9f4:	ldr	r3, [pc, #88]	; aa54 <try_ports+0xb0>
    a9f8:	ldr	r3, [r4, r3]
    a9fc:	str	r3, [r0, #44]	; 0x2c
    aa00:	ldr	r3, [pc, #80]	; aa58 <try_ports+0xb4>
    aa04:	ldr	r3, [r4, r3]
    aa08:	str	r3, [r0, #48]	; 0x30
    aa0c:	ldr	r3, [pc, #72]	; aa5c <try_ports+0xb8>
    aa10:	ldr	r3, [r4, r3]
    aa14:	str	r3, [r0, #52]	; 0x34
    aa18:	mov	r2, #25
    aa1c:	ldr	r1, [pc, #60]	; aa60 <try_ports+0xbc>
    aa20:	add	r1, pc, r1
    aa24:	add	r0, r0, #56	; 0x38
    aa28:	bl	46a0 <rb_strlcpy@plt>
    aa2c:	mov	r0, r5
    aa30:	pop	{r4, r5, r6, pc}
    aa34:	mvn	r5, #0
    aa38:	b	aa2c <try_ports+0x88>
    aa3c:	.word	0x0001d64c
    aa40:	.word	0x0002ffe0
    aa44:	.word	0x000003e8
    aa48:	.word	0x00000388
    aa4c:	.word	0x00000410
    aa50:	.word	0x00000350
    aa54:	.word	0x0000040c
    aa58:	.word	0x00000364
    aa5c:	.word	0x000003e0
    aa60:	.word	0x0000b570

0000aa64 <try_devpoll>:
    aa64:	push	{r4, r5, r6, lr}
    aa68:	ldr	r4, [pc, #120]	; aae8 <try_devpoll+0x84>
    aa6c:	add	r4, pc, r4
    aa70:	bl	108d8 <rb_init_netio_devpoll>
    aa74:	subs	r5, r0, #0
    aa78:	bne	aae0 <try_devpoll+0x7c>
    aa7c:	ldr	r0, [pc, #104]	; aaec <try_devpoll+0x88>
    aa80:	add	r0, pc, r0
    aa84:	ldr	r3, [pc, #100]	; aaf0 <try_devpoll+0x8c>
    aa88:	ldr	r3, [r4, r3]
    aa8c:	str	r3, [r0, #28]
    aa90:	ldr	r3, [pc, #92]	; aaf4 <try_devpoll+0x90>
    aa94:	ldr	r3, [r4, r3]
    aa98:	str	r3, [r0, #32]
    aa9c:	ldr	r3, [pc, #84]	; aaf8 <try_devpoll+0x94>
    aaa0:	ldr	r3, [r4, r3]
    aaa4:	str	r3, [r0, #36]	; 0x24
    aaa8:	mov	r3, #0
    aaac:	str	r3, [r0, #40]	; 0x28
    aab0:	str	r3, [r0, #44]	; 0x2c
    aab4:	str	r3, [r0, #48]	; 0x30
    aab8:	ldr	r3, [pc, #60]	; aafc <try_devpoll+0x98>
    aabc:	add	r3, pc, r3
    aac0:	str	r3, [r0, #52]	; 0x34
    aac4:	mov	r2, #25
    aac8:	ldr	r1, [pc, #48]	; ab00 <try_devpoll+0x9c>
    aacc:	add	r1, pc, r1
    aad0:	add	r0, r0, #56	; 0x38
    aad4:	bl	46a0 <rb_strlcpy@plt>
    aad8:	mov	r0, r5
    aadc:	pop	{r4, r5, r6, pc}
    aae0:	mvn	r5, #0
    aae4:	b	aad8 <try_devpoll+0x74>
    aae8:	.word	0x0001d58c
    aaec:	.word	0x0002ff20
    aaf0:	.word	0x000003b0
    aaf4:	.word	0x000003f0
    aaf8:	.word	0x000003b4
    aafc:	.word	0xfffff9d8
    ab00:	.word	0x0000b4cc

0000ab04 <try_sigio>:
    ab04:	push	{r4, r5, r6, lr}
    ab08:	ldr	r4, [pc, #140]	; ab9c <try_sigio+0x98>
    ab0c:	add	r4, pc, r4
    ab10:	bl	1186c <rb_init_netio_sigio>
    ab14:	subs	r5, r0, #0
    ab18:	bne	ab94 <try_sigio+0x90>
    ab1c:	ldr	r0, [pc, #124]	; aba0 <try_sigio+0x9c>
    ab20:	add	r0, pc, r0
    ab24:	ldr	r3, [pc, #120]	; aba4 <try_sigio+0xa0>
    ab28:	ldr	r3, [r4, r3]
    ab2c:	str	r3, [r0, #28]
    ab30:	ldr	r3, [pc, #112]	; aba8 <try_sigio+0xa4>
    ab34:	ldr	r3, [r4, r3]
    ab38:	str	r3, [r0, #32]
    ab3c:	ldr	r3, [pc, #104]	; abac <try_sigio+0xa8>
    ab40:	ldr	r3, [r4, r3]
    ab44:	str	r3, [r0, #36]	; 0x24
    ab48:	ldr	r3, [pc, #96]	; abb0 <try_sigio+0xac>
    ab4c:	ldr	r3, [r4, r3]
    ab50:	str	r3, [r0, #40]	; 0x28
    ab54:	ldr	r3, [pc, #88]	; abb4 <try_sigio+0xb0>
    ab58:	ldr	r3, [r4, r3]
    ab5c:	str	r3, [r0, #44]	; 0x2c
    ab60:	ldr	r3, [pc, #80]	; abb8 <try_sigio+0xb4>
    ab64:	ldr	r3, [r4, r3]
    ab68:	str	r3, [r0, #52]	; 0x34
    ab6c:	ldr	r3, [pc, #72]	; abbc <try_sigio+0xb8>
    ab70:	ldr	r3, [r4, r3]
    ab74:	str	r3, [r0, #48]	; 0x30
    ab78:	mov	r2, #25
    ab7c:	ldr	r1, [pc, #60]	; abc0 <try_sigio+0xbc>
    ab80:	add	r1, pc, r1
    ab84:	add	r0, r0, #56	; 0x38
    ab88:	bl	46a0 <rb_strlcpy@plt>
    ab8c:	mov	r0, r5
    ab90:	pop	{r4, r5, r6, pc}
    ab94:	mvn	r5, #0
    ab98:	b	ab8c <try_sigio+0x88>
    ab9c:	.word	0x0001d4ec
    aba0:	.word	0x0002fe80
    aba4:	.word	0x000003cc
    aba8:	.word	0x0000036c
    abac:	.word	0x000003dc
    abb0:	.word	0x00000374
    abb4:	.word	0x00000358
    abb8:	.word	0x000003d8
    abbc:	.word	0x000003f8
    abc0:	.word	0x0000b420

0000abc4 <try_poll>:
    abc4:	push	{r4, r5, r6, lr}
    abc8:	ldr	r4, [pc, #120]	; ac48 <try_poll+0x84>
    abcc:	add	r4, pc, r4
    abd0:	bl	1132c <rb_init_netio_poll>
    abd4:	subs	r5, r0, #0
    abd8:	bne	ac40 <try_poll+0x7c>
    abdc:	ldr	r0, [pc, #104]	; ac4c <try_poll+0x88>
    abe0:	add	r0, pc, r0
    abe4:	ldr	r3, [pc, #100]	; ac50 <try_poll+0x8c>
    abe8:	ldr	r3, [r4, r3]
    abec:	str	r3, [r0, #28]
    abf0:	ldr	r3, [pc, #92]	; ac54 <try_poll+0x90>
    abf4:	ldr	r3, [r4, r3]
    abf8:	str	r3, [r0, #32]
    abfc:	ldr	r3, [pc, #84]	; ac58 <try_poll+0x94>
    ac00:	ldr	r3, [r4, r3]
    ac04:	str	r3, [r0, #36]	; 0x24
    ac08:	mov	r3, #0
    ac0c:	str	r3, [r0, #40]	; 0x28
    ac10:	str	r3, [r0, #44]	; 0x2c
    ac14:	str	r3, [r0, #48]	; 0x30
    ac18:	ldr	r3, [pc, #60]	; ac5c <try_poll+0x98>
    ac1c:	add	r3, pc, r3
    ac20:	str	r3, [r0, #52]	; 0x34
    ac24:	mov	r2, #25
    ac28:	ldr	r1, [pc, #48]	; ac60 <try_poll+0x9c>
    ac2c:	add	r1, pc, r1
    ac30:	add	r0, r0, #56	; 0x38
    ac34:	bl	46a0 <rb_strlcpy@plt>
    ac38:	mov	r0, r5
    ac3c:	pop	{r4, r5, r6, pc}
    ac40:	mvn	r5, #0
    ac44:	b	ac38 <try_poll+0x74>
    ac48:	.word	0x0001d42c
    ac4c:	.word	0x0002fdc0
    ac50:	.word	0x000003ec
    ac54:	.word	0x000003fc
    ac58:	.word	0x00000380
    ac5c:	.word	0xfffff878
    ac60:	.word	0x0000b37c

0000ac64 <try_win32>:
    ac64:	push	{r4, r5, r6, lr}
    ac68:	ldr	r4, [pc, #120]	; ace8 <try_win32+0x84>
    ac6c:	add	r4, pc, r4
    ac70:	bl	4fe8 <rb_init_netio_win32>
    ac74:	subs	r5, r0, #0
    ac78:	bne	ace0 <try_win32+0x7c>
    ac7c:	ldr	r0, [pc, #104]	; acec <try_win32+0x88>
    ac80:	add	r0, pc, r0
    ac84:	ldr	r3, [pc, #100]	; acf0 <try_win32+0x8c>
    ac88:	ldr	r3, [r4, r3]
    ac8c:	str	r3, [r0, #28]
    ac90:	ldr	r3, [pc, #92]	; acf4 <try_win32+0x90>
    ac94:	ldr	r3, [r4, r3]
    ac98:	str	r3, [r0, #32]
    ac9c:	ldr	r3, [pc, #84]	; acf8 <try_win32+0x94>
    aca0:	ldr	r3, [r4, r3]
    aca4:	str	r3, [r0, #36]	; 0x24
    aca8:	mov	r3, #0
    acac:	str	r3, [r0, #40]	; 0x28
    acb0:	str	r3, [r0, #44]	; 0x2c
    acb4:	str	r3, [r0, #48]	; 0x30
    acb8:	ldr	r3, [pc, #60]	; acfc <try_win32+0x98>
    acbc:	add	r3, pc, r3
    acc0:	str	r3, [r0, #52]	; 0x34
    acc4:	mov	r2, #25
    acc8:	ldr	r1, [pc, #48]	; ad00 <try_win32+0x9c>
    accc:	add	r1, pc, r1
    acd0:	add	r0, r0, #56	; 0x38
    acd4:	bl	46a0 <rb_strlcpy@plt>
    acd8:	mov	r0, r5
    acdc:	pop	{r4, r5, r6, pc}
    ace0:	mvn	r5, #0
    ace4:	b	acd8 <try_win32+0x74>
    ace8:	.word	0x0001d38c
    acec:	.word	0x0002fd20
    acf0:	.word	0x0000039c
    acf4:	.word	0x000003a8
    acf8:	.word	0x00000370
    acfc:	.word	0xfffff7d8
    ad00:	.word	0x0000b2e4

0000ad04 <try_select>:
    ad04:	push	{r4, r5, r6, lr}
    ad08:	ldr	r4, [pc, #120]	; ad88 <try_select+0x84>
    ad0c:	add	r4, pc, r4
    ad10:	bl	125b0 <rb_init_netio_select>
    ad14:	subs	r5, r0, #0
    ad18:	bne	ad80 <try_select+0x7c>
    ad1c:	ldr	r0, [pc, #104]	; ad8c <try_select+0x88>
    ad20:	add	r0, pc, r0
    ad24:	ldr	r3, [pc, #100]	; ad90 <try_select+0x8c>
    ad28:	ldr	r3, [r4, r3]
    ad2c:	str	r3, [r0, #28]
    ad30:	ldr	r3, [pc, #92]	; ad94 <try_select+0x90>
    ad34:	ldr	r3, [r4, r3]
    ad38:	str	r3, [r0, #32]
    ad3c:	ldr	r3, [pc, #84]	; ad98 <try_select+0x94>
    ad40:	ldr	r3, [r4, r3]
    ad44:	str	r3, [r0, #36]	; 0x24
    ad48:	mov	r3, #0
    ad4c:	str	r3, [r0, #40]	; 0x28
    ad50:	str	r3, [r0, #44]	; 0x2c
    ad54:	str	r3, [r0, #48]	; 0x30
    ad58:	ldr	r3, [pc, #60]	; ad9c <try_select+0x98>
    ad5c:	add	r3, pc, r3
    ad60:	str	r3, [r0, #52]	; 0x34
    ad64:	mov	r2, #25
    ad68:	ldr	r1, [pc, #48]	; ada0 <try_select+0x9c>
    ad6c:	add	r1, pc, r1
    ad70:	add	r0, r0, #56	; 0x38
    ad74:	bl	46a0 <rb_strlcpy@plt>
    ad78:	mov	r0, r5
    ad7c:	pop	{r4, r5, r6, pc}
    ad80:	mvn	r5, #0
    ad84:	b	ad78 <try_select+0x74>
    ad88:	.word	0x0001d2ec
    ad8c:	.word	0x0002fc80
    ad90:	.word	0x00000420
    ad94:	.word	0x000003b8
    ad98:	.word	0x00000400
    ad9c:	.word	0xfffff738
    ada0:	.word	0x0000b24c

0000ada4 <rb_getmaxconnect>:
    ada4:	ldr	r3, [pc, #16]	; adbc <rb_getmaxconnect+0x18>
    ada8:	add	r3, pc, r3
    adac:	ldr	r2, [pc, #12]	; adc0 <rb_getmaxconnect+0x1c>
    adb0:	ldr	r3, [r3, r2]
    adb4:	ldr	r0, [r3]
    adb8:	bx	lr
    adbc:	.word	0x0001d250
    adc0:	.word	0x000003a0

0000adc4 <rb_set_buffers>:
    adc4:	push	{r4, lr}
    adc8:	sub	sp, sp, #16
    adcc:	str	r1, [sp, #12]
    add0:	subs	r4, r0, #0
    add4:	moveq	r0, #0
    add8:	beq	ae04 <rb_set_buffers+0x40>
    addc:	ldr	r0, [r4, #12]
    ade0:	mov	r3, #4
    ade4:	str	r3, [sp]
    ade8:	add	r3, sp, #12
    adec:	mov	r2, #8
    adf0:	mov	r1, #1
    adf4:	bl	4ca0 <setsockopt@plt>
    adf8:	cmp	r0, #0
    adfc:	movne	r0, #0
    ae00:	beq	ae0c <rb_set_buffers+0x48>
    ae04:	add	sp, sp, #16
    ae08:	pop	{r4, pc}
    ae0c:	ldr	r0, [r4, #12]
    ae10:	mov	r3, #4
    ae14:	str	r3, [sp]
    ae18:	add	r3, sp, #12
    ae1c:	mov	r2, #7
    ae20:	mov	r1, #1
    ae24:	bl	4ca0 <setsockopt@plt>
    ae28:	clz	r0, r0
    ae2c:	lsr	r0, r0, #5
    ae30:	b	ae04 <rb_set_buffers+0x40>

0000ae34 <rb_settimeout>:
    ae34:	push	{r4, r5, r6, r7, r8, r9, lr}
    ae38:	sub	sp, sp, #12
    ae3c:	ldr	r8, [pc, #424]	; afec <rb_settimeout+0x1b8>
    ae40:	add	r8, pc, r8
    ae44:	subs	r6, r0, #0
    ae48:	beq	aed4 <rb_settimeout+0xa0>
    ae4c:	mov	r9, r3
    ae50:	mov	r7, r2
    ae54:	mov	r5, r1
    ae58:	ldr	r4, [r6, #44]	; 0x2c
    ae5c:	cmp	r2, #0
    ae60:	beq	aedc <rb_settimeout+0xa8>
    ae64:	cmp	r4, #0
    ae68:	beq	af7c <rb_settimeout+0x148>
    ae6c:	str	r6, [r4]
    ae70:	bl	47f0 <rb_current_time@plt>
    ae74:	add	r0, r0, r5
    ae78:	str	r0, [r4, #16]
    ae7c:	str	r7, [r4, #20]
    ae80:	str	r9, [r4, #24]
    ae84:	add	r2, r4, #4
    ae88:	str	r4, [r4, #4]
    ae8c:	mov	r3, #0
    ae90:	str	r3, [r4, #8]
    ae94:	ldr	r3, [pc, #340]	; aff0 <rb_settimeout+0x1bc>
    ae98:	add	r3, pc, r3
    ae9c:	ldr	r3, [r3, #16]
    aea0:	str	r3, [r4, #12]
    aea4:	cmp	r3, #0
    aea8:	strne	r2, [r3, #4]
    aeac:	beq	af98 <rb_settimeout+0x164>
    aeb0:	ldr	r3, [pc, #316]	; aff4 <rb_settimeout+0x1c0>
    aeb4:	add	r3, pc, r3
    aeb8:	str	r2, [r3, #16]
    aebc:	ldr	r2, [r3, #24]
    aec0:	add	r2, r2, #1
    aec4:	str	r2, [r3, #24]
    aec8:	ldr	r3, [r3, #84]	; 0x54
    aecc:	cmp	r3, #0
    aed0:	beq	afb8 <rb_settimeout+0x184>
    aed4:	add	sp, sp, #12
    aed8:	pop	{r4, r5, r6, r7, r8, r9, pc}
    aedc:	cmp	r4, #0
    aee0:	beq	aed4 <rb_settimeout+0xa0>
    aee4:	ldr	r3, [r4, #12]
    aee8:	cmp	r3, #0
    aeec:	beq	af54 <rb_settimeout+0x120>
    aef0:	ldr	r2, [r4, #8]
    aef4:	str	r2, [r3, #4]
    aef8:	ldr	r3, [r4, #8]
    aefc:	cmp	r3, #0
    af00:	beq	af68 <rb_settimeout+0x134>
    af04:	ldr	r2, [r4, #12]
    af08:	str	r2, [r3, #8]
    af0c:	ldr	r3, [pc, #228]	; aff8 <rb_settimeout+0x1c4>
    af10:	add	r3, pc, r3
    af14:	ldr	r5, [r3, #24]
    af18:	sub	r5, r5, #1
    af1c:	str	r5, [r3, #24]
    af20:	mov	r0, r4
    af24:	bl	46f4 <free@plt>
    af28:	mov	r3, #0
    af2c:	str	r3, [r6, #44]	; 0x2c
    af30:	cmp	r5, r3
    af34:	bne	aed4 <rb_settimeout+0xa0>
    af38:	ldr	r4, [pc, #188]	; affc <rb_settimeout+0x1c8>
    af3c:	add	r4, pc, r4
    af40:	ldr	r0, [r4, #84]	; 0x54
    af44:	bl	449c <rb_event_delete@plt>
    af48:	mov	r3, #0
    af4c:	str	r3, [r4, #84]	; 0x54
    af50:	b	aed4 <rb_settimeout+0xa0>
    af54:	ldr	r2, [r4, #8]
    af58:	ldr	r3, [pc, #160]	; b000 <rb_settimeout+0x1cc>
    af5c:	add	r3, pc, r3
    af60:	str	r2, [r3, #20]
    af64:	b	aef8 <rb_settimeout+0xc4>
    af68:	ldr	r2, [r4, #12]
    af6c:	ldr	r3, [pc, #144]	; b004 <rb_settimeout+0x1d0>
    af70:	add	r3, pc, r3
    af74:	str	r2, [r3, #16]
    af78:	b	af0c <rb_settimeout+0xd8>
    af7c:	mov	r1, #28
    af80:	mov	r0, #1
    af84:	bl	45ec <calloc@plt>
    af88:	subs	r4, r0, #0
    af8c:	strne	r4, [r6, #44]	; 0x2c
    af90:	bne	ae6c <rb_settimeout+0x38>
    af94:	bl	4988 <rb_outofmemory@plt>
    af98:	ldr	r3, [pc, #104]	; b008 <rb_settimeout+0x1d4>
    af9c:	add	r3, pc, r3
    afa0:	ldr	r3, [r3, #20]
    afa4:	cmp	r3, #0
    afa8:	ldreq	r3, [pc, #92]	; b00c <rb_settimeout+0x1d8>
    afac:	addeq	r3, pc, r3
    afb0:	streq	r2, [r3, #20]
    afb4:	b	aeb0 <rb_settimeout+0x7c>
    afb8:	ldr	r3, [pc, #80]	; b010 <rb_settimeout+0x1dc>
    afbc:	ldr	r3, [r8, r3]
    afc0:	str	r3, [sp, #4]
    afc4:	mov	r3, #5
    afc8:	mov	r2, #0
    afcc:	ldr	r1, [sp, #4]
    afd0:	ldr	r0, [pc, #60]	; b014 <rb_settimeout+0x1e0>
    afd4:	add	r0, pc, r0
    afd8:	bl	4b08 <rb_event_add@plt>
    afdc:	ldr	r3, [pc, #52]	; b018 <rb_settimeout+0x1e4>
    afe0:	add	r3, pc, r3
    afe4:	str	r0, [r3, #84]	; 0x54
    afe8:	b	aed4 <rb_settimeout+0xa0>
    afec:	.word	0x0001d1b8
    aff0:	.word	0x0002fb08
    aff4:	.word	0x0002faec
    aff8:	.word	0x0002fa90
    affc:	.word	0x0002fa64
    b000:	.word	0x0002fa44
    b004:	.word	0x0002fa30
    b008:	.word	0x0002fa04
    b00c:	.word	0x0002f9f4
    b010:	.word	0x0000034c
    b014:	.word	0x0000afec
    b018:	.word	0x0002f9c0

0000b01c <rb_sctp_bindx>:
    b01c:	mvn	r0, #0
    b020:	bx	lr

0000b024 <rb_inet_get_proto>:
    b024:	mov	r0, #6
    b028:	bx	lr

0000b02c <rb_connect_callback>:
    b02c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b030:	mov	r4, r0
    b034:	mov	r7, r1
    b038:	bl	4ce8 <__errno_location@plt>
    b03c:	cmp	r4, #0
    b040:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b044:	mov	r5, r0
    b048:	ldr	r3, [r4, #48]	; 0x30
    b04c:	cmp	r3, #0
    b050:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b054:	ldr	r6, [r3, #260]	; 0x104
    b058:	cmp	r6, #0
    b05c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    b060:	ldr	r9, [r0]
    b064:	ldr	r8, [r3, #264]	; 0x108
    b068:	mov	r1, #0
    b06c:	str	r1, [r3, #260]	; 0x104
    b070:	mov	r3, r1
    b074:	mov	r2, r1
    b078:	mov	r0, r4
    b07c:	bl	43e8 <rb_settimeout@plt>
    b080:	str	r9, [r5]
    b084:	mov	r2, r8
    b088:	mov	r1, r7
    b08c:	mov	r0, r4
    b090:	blx	r6
    b094:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000b098 <rb_connect_outcome>:
    b098:	push	{r4, r5, lr}
    b09c:	sub	sp, sp, #20
    b0a0:	mov	r3, #0
    b0a4:	str	r3, [sp, #12]
    b0a8:	mov	r3, #4
    b0ac:	str	r3, [sp, #8]
    b0b0:	subs	r4, r0, #0
    b0b4:	beq	b114 <rb_connect_outcome+0x7c>
    b0b8:	ldr	r3, [r4, #48]	; 0x30
    b0bc:	cmp	r3, #0
    b0c0:	beq	b114 <rb_connect_outcome+0x7c>
    b0c4:	ldr	r3, [r3, #260]	; 0x104
    b0c8:	cmp	r3, #0
    b0cc:	beq	b114 <rb_connect_outcome+0x7c>
    b0d0:	ldr	r0, [r4, #12]
    b0d4:	add	r3, sp, #8
    b0d8:	str	r3, [sp]
    b0dc:	add	r3, sp, #12
    b0e0:	mov	r2, #4
    b0e4:	mov	r1, #1
    b0e8:	bl	4c7c <getsockopt@plt>
    b0ec:	cmp	r0, #0
    b0f0:	blt	b108 <rb_connect_outcome+0x70>
    b0f4:	ldr	r5, [sp, #12]
    b0f8:	cmp	r5, #0
    b0fc:	beq	b11c <rb_connect_outcome+0x84>
    b100:	bl	4ce8 <__errno_location@plt>
    b104:	str	r5, [r0]
    b108:	mov	r1, #4
    b10c:	mov	r0, r4
    b110:	bl	b02c <rb_connect_callback>
    b114:	add	sp, sp, #20
    b118:	pop	{r4, r5, pc}
    b11c:	mov	r1, #0
    b120:	mov	r0, r4
    b124:	bl	b02c <rb_connect_callback>
    b128:	b	b114 <rb_connect_outcome+0x7c>

0000b12c <rb_connect_timeout>:
    b12c:	push	{r4, lr}
    b130:	mov	r1, #3
    b134:	bl	b02c <rb_connect_callback>
    b138:	pop	{r4, pc}

0000b13c <rb_connect_sctp>:
    b13c:	push	{r4, lr}
    b140:	mov	r1, #4
    b144:	bl	b02c <rb_connect_callback>
    b148:	pop	{r4, pc}

0000b14c <rb_connect_sockaddr>:
    b14c:	subs	r3, r0, #0
    b150:	beq	b170 <rb_connect_sockaddr+0x24>
    b154:	push	{r4, lr}
    b158:	mov	r0, r1
    b15c:	ldr	r1, [r3, #48]	; 0x30
    b160:	add	r1, r1, #128	; 0x80
    b164:	bl	4808 <memcpy@plt>
    b168:	mov	r0, #1
    b16c:	pop	{r4, pc}
    b170:	mov	r0, #0
    b174:	bx	lr

0000b178 <rb_errstr>:
    b178:	cmp	r0, #6
    b17c:	bhi	b194 <rb_errstr+0x1c>
    b180:	ldr	r3, [pc, #24]	; b1a0 <rb_errstr+0x28>
    b184:	add	r3, pc, r3
    b188:	add	r0, r3, r0, lsl #2
    b18c:	ldr	r0, [r0, #1024]	; 0x400
    b190:	bx	lr
    b194:	ldr	r0, [pc, #8]	; b1a4 <rb_errstr+0x2c>
    b198:	add	r0, pc, r0
    b19c:	bx	lr
    b1a0:	.word	0x0001c8b8
    b1a4:	.word	0x0000ae3c

0000b1a8 <rb_listen>:
    b1a8:	push	{r4, r5, r6, lr}
    b1ac:	sub	sp, sp, #16
    b1b0:	mov	r4, r0
    b1b4:	str	r1, [sp, #12]
    b1b8:	mov	r5, r2
    b1bc:	ldrb	r3, [r0, #17]
    b1c0:	bic	r3, r3, #127	; 0x7f
    b1c4:	orr	r3, r3, #20
    b1c8:	strb	r3, [r0, #17]
    b1cc:	ldr	r0, [r0, #12]
    b1d0:	bl	45e0 <listen@plt>
    b1d4:	mov	r6, r0
    b1d8:	adds	r3, r5, #0
    b1dc:	movne	r3, #1
    b1e0:	cmp	r0, #0
    b1e4:	movne	r3, #0
    b1e8:	cmp	r3, #0
    b1ec:	bne	b1fc <rb_listen+0x54>
    b1f0:	mov	r0, r6
    b1f4:	add	sp, sp, #16
    b1f8:	pop	{r4, r5, r6, pc}
    b1fc:	ldr	r0, [r4, #12]
    b200:	mov	r3, #4
    b204:	str	r3, [sp]
    b208:	add	r3, sp, #12
    b20c:	mov	r2, #9
    b210:	mov	r1, #6
    b214:	bl	4ca0 <setsockopt@plt>
    b218:	b	b1f0 <rb_listen+0x48>

0000b21c <rb_fdlist_init>:
    b21c:	push	{r4, r5, r6, lr}
    b220:	mov	r6, r2
    b224:	ldr	r5, [pc, #140]	; b2b8 <rb_fdlist_init+0x9c>
    b228:	add	r5, pc, r5
    b22c:	ldr	r3, [pc, #136]	; b2bc <rb_fdlist_init+0xa0>
    b230:	add	r3, pc, r3
    b234:	ldr	r3, [r3, #88]	; 0x58
    b238:	cmp	r3, #0
    b23c:	bne	b264 <rb_fdlist_init+0x48>
    b240:	ldr	r3, [pc, #120]	; b2c0 <rb_fdlist_init+0xa4>
    b244:	ldr	r3, [r5, r3]
    b248:	str	r1, [r3]
    b24c:	cmp	r0, #0
    b250:	bne	b288 <rb_fdlist_init+0x6c>
    b254:	mov	r2, #1
    b258:	ldr	r3, [pc, #100]	; b2c4 <rb_fdlist_init+0xa8>
    b25c:	add	r3, pc, r3
    b260:	str	r2, [r3, #88]	; 0x58
    b264:	ldr	r2, [pc, #92]	; b2c8 <rb_fdlist_init+0xac>
    b268:	add	r2, pc, r2
    b26c:	mov	r1, r6
    b270:	mov	r0, #68	; 0x44
    b274:	bl	4ab4 <rb_bh_create@plt>
    b278:	ldr	r3, [pc, #76]	; b2cc <rb_fdlist_init+0xb0>
    b27c:	add	r3, pc, r3
    b280:	str	r0, [r3, #92]	; 0x5c
    b284:	pop	{r4, r5, r6, pc}
    b288:	cmp	r1, #3
    b28c:	ble	b254 <rb_fdlist_init+0x38>
    b290:	mov	r4, #3
    b294:	mov	r0, r4
    b298:	bl	4940 <close@plt>
    b29c:	add	r4, r4, #1
    b2a0:	ldr	r3, [pc, #24]	; b2c0 <rb_fdlist_init+0xa4>
    b2a4:	ldr	r3, [r5, r3]
    b2a8:	ldr	r3, [r3]
    b2ac:	cmp	r4, r3
    b2b0:	blt	b294 <rb_fdlist_init+0x78>
    b2b4:	b	b254 <rb_fdlist_init+0x38>
    b2b8:	.word	0x0001cdd0
    b2bc:	.word	0x0002f770
    b2c0:	.word	0x000003a0
    b2c4:	.word	0x0002f744
    b2c8:	.word	0x0000ad84
    b2cc:	.word	0x0002f724

0000b2d0 <rb_open>:
    b2d0:	push	{r4, r5, r6, r7, r8, lr}
    b2d4:	mov	r8, r1
    b2d8:	mov	r7, r2
    b2dc:	ldr	r6, [pc, #432]	; b494 <rb_open+0x1c4>
    b2e0:	add	r6, pc, r6
    b2e4:	subs	r5, r0, #0
    b2e8:	blt	b380 <rb_open+0xb0>
    b2ec:	asr	r3, r5, #24
    b2f0:	eor	r3, r3, r5, asr #12
    b2f4:	eor	r3, r3, r5
    b2f8:	lsl	r3, r3, #20
    b2fc:	lsr	r3, r3, #20
    b300:	ldr	r2, [pc, #400]	; b498 <rb_open+0x1c8>
    b304:	ldr	r2, [r6, r2]
    b308:	ldr	r2, [r2]
    b30c:	add	r3, r3, r3, lsl #1
    b310:	ldr	r3, [r2, r3, lsl #2]
    b314:	cmp	r3, #0
    b318:	beq	b380 <rb_open+0xb0>
    b31c:	ldr	r4, [r3]
    b320:	ldr	r2, [r4, #12]
    b324:	cmp	r5, r2
    b328:	beq	b348 <rb_open+0x78>
    b32c:	ldr	r3, [r3, #8]
    b330:	cmp	r3, #0
    b334:	beq	b380 <rb_open+0xb0>
    b338:	ldr	r4, [r3]
    b33c:	ldr	r2, [r4, #12]
    b340:	cmp	r5, r2
    b344:	bne	b32c <rb_open+0x5c>
    b348:	cmp	r4, #0
    b34c:	beq	b380 <rb_open+0xb0>
    b350:	ldrb	r3, [r4, #16]
    b354:	tst	r3, #1
    b358:	beq	b408 <rb_open+0x138>
    b35c:	ldr	r2, [r4, #24]
    b360:	cmp	r2, #0
    b364:	beq	b484 <rb_open+0x1b4>
    b368:	mov	r1, r5
    b36c:	ldr	r0, [pc, #296]	; b49c <rb_open+0x1cc>
    b370:	add	r0, pc, r0
    b374:	bl	491c <rb_lib_log@plt>
    b378:	mov	r4, #0
    b37c:	b	b458 <rb_open+0x188>
    b380:	ldr	r3, [pc, #280]	; b4a0 <rb_open+0x1d0>
    b384:	add	r3, pc, r3
    b388:	ldr	r0, [r3, #92]	; 0x5c
    b38c:	bl	4958 <rb_bh_alloc@plt>
    b390:	mov	r4, r0
    b394:	str	r5, [r0, #12]
    b398:	mov	r1, r0
    b39c:	ldr	r3, [pc, #244]	; b498 <rb_open+0x1c8>
    b3a0:	ldr	r2, [r6, r3]
    b3a4:	asr	r3, r5, #24
    b3a8:	eor	r3, r3, r5, asr #12
    b3ac:	eor	r3, r3, r5
    b3b0:	lsl	r3, r3, #20
    b3b4:	lsr	r3, r3, #20
    b3b8:	add	r3, r3, r3, lsl #1
    b3bc:	lsl	r3, r3, #2
    b3c0:	ldr	r0, [r2]
    b3c4:	add	r2, r0, r3
    b3c8:	str	r4, [r4]
    b3cc:	mov	ip, #0
    b3d0:	str	ip, [r4, #4]
    b3d4:	ldr	ip, [r0, r3]
    b3d8:	str	ip, [r4, #8]
    b3dc:	ldr	ip, [r0, r3]
    b3e0:	cmp	ip, #0
    b3e4:	strne	r4, [ip, #4]
    b3e8:	beq	b460 <rb_open+0x190>
    b3ec:	str	r1, [r0, r3]
    b3f0:	ldr	r3, [r2, #8]
    b3f4:	add	r3, r3, #1
    b3f8:	str	r3, [r2, #8]
    b3fc:	ldrb	r3, [r4, #16]
    b400:	tst	r3, #1
    b404:	bne	b470 <rb_open+0x1a0>
    b408:	str	r5, [r4, #12]
    b40c:	strb	r8, [r4, #17]
    b410:	orr	r3, r3, #1
    b414:	strb	r3, [r4, #16]
    b418:	cmp	r7, #0
    b41c:	beq	b444 <rb_open+0x174>
    b420:	mov	r0, #128	; 0x80
    b424:	bl	49ac <malloc@plt>
    b428:	subs	r5, r0, #0
    b42c:	beq	b490 <rb_open+0x1c0>
    b430:	mov	r2, #128	; 0x80
    b434:	mov	r1, r7
    b438:	mov	r0, r5
    b43c:	bl	46a0 <rb_strlcpy@plt>
    b440:	str	r5, [r4, #24]
    b444:	ldr	r2, [pc, #88]	; b4a4 <rb_open+0x1d4>
    b448:	add	r2, pc, r2
    b44c:	ldr	r3, [r2, #96]	; 0x60
    b450:	add	r3, r3, #1
    b454:	str	r3, [r2, #96]	; 0x60
    b458:	mov	r0, r4
    b45c:	pop	{r4, r5, r6, r7, r8, pc}
    b460:	ldr	ip, [r2, #4]
    b464:	cmp	ip, #0
    b468:	streq	r4, [r2, #4]
    b46c:	b	b3ec <rb_open+0x11c>
    b470:	cmp	r4, #0
    b474:	bne	b35c <rb_open+0x8c>
    b478:	ldr	r2, [pc, #40]	; b4a8 <rb_open+0x1d8>
    b47c:	add	r2, pc, r2
    b480:	b	b368 <rb_open+0x98>
    b484:	ldr	r2, [pc, #32]	; b4ac <rb_open+0x1dc>
    b488:	add	r2, pc, r2
    b48c:	b	b368 <rb_open+0x98>
    b490:	bl	4988 <rb_outofmemory@plt>
    b494:	.word	0x0001cd18
    b498:	.word	0x000003c0
    b49c:	.word	0x0000ac94
    b4a0:	.word	0x0002f61c
    b4a4:	.word	0x0002f558
    b4a8:	.word	0x0000ab80
    b4ac:	.word	0x0000ab74

0000b4b0 <rb_dump_fd>:
    b4b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b4b4:	mov	r8, r0
    b4b8:	mov	r7, r1
    b4bc:	ldr	r3, [pc, #140]	; b550 <rb_dump_fd+0xa0>
    b4c0:	add	r3, pc, r3
    b4c4:	mov	r5, #0
    b4c8:	ldr	r2, [pc, #132]	; b554 <rb_dump_fd+0xa4>
    b4cc:	ldr	r9, [r3, r2]
    b4d0:	ldr	r6, [pc, #128]	; b558 <rb_dump_fd+0xa8>
    b4d4:	add	r6, pc, r6
    b4d8:	b	b528 <rb_dump_fd+0x78>
    b4dc:	ldr	r4, [r4, #8]
    b4e0:	cmp	r4, #0
    b4e4:	beq	b51c <rb_dump_fd+0x6c>
    b4e8:	ldr	r3, [r4]
    b4ec:	cmp	r3, #0
    b4f0:	beq	b4dc <rb_dump_fd+0x2c>
    b4f4:	ldrb	r2, [r3, #16]
    b4f8:	tst	r2, #1
    b4fc:	beq	b4dc <rb_dump_fd+0x2c>
    b500:	ldr	r0, [r3, #12]
    b504:	ldr	r1, [r3, #24]
    b508:	cmp	r1, #0
    b50c:	moveq	r1, r6
    b510:	mov	r2, r7
    b514:	blx	r8
    b518:	b	b4dc <rb_dump_fd+0x2c>
    b51c:	add	r5, r5, #12
    b520:	cmp	r5, #49152	; 0xc000
    b524:	beq	b54c <rb_dump_fd+0x9c>
    b528:	ldr	r3, [r9]
    b52c:	add	r2, r3, r5
    b530:	ldr	r2, [r2, #8]
    b534:	cmp	r2, #0
    b538:	beq	b51c <rb_dump_fd+0x6c>
    b53c:	ldr	r4, [r3, r5]
    b540:	cmp	r4, #0
    b544:	bne	b4e8 <rb_dump_fd+0x38>
    b548:	b	b51c <rb_dump_fd+0x6c>
    b54c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b550:	.word	0x0001cb38
    b554:	.word	0x000003c0
    b558:	.word	0x0000bccc

0000b55c <rb_note>:
    b55c:	push	{r4, r5, r6, lr}
    b560:	subs	r4, r0, #0
    b564:	popeq	{r4, r5, r6, pc}
    b568:	mov	r5, r1
    b56c:	ldr	r0, [r4, #24]
    b570:	cmp	r0, #0
    b574:	beq	b57c <rb_note+0x20>
    b578:	bl	46f4 <free@plt>
    b57c:	mov	r0, #128	; 0x80
    b580:	bl	49ac <malloc@plt>
    b584:	subs	r6, r0, #0
    b588:	beq	b5a4 <rb_note+0x48>
    b58c:	mov	r2, #128	; 0x80
    b590:	mov	r1, r5
    b594:	mov	r0, r6
    b598:	bl	46a0 <rb_strlcpy@plt>
    b59c:	str	r6, [r4, #24]
    b5a0:	pop	{r4, r5, r6, pc}
    b5a4:	bl	4988 <rb_outofmemory@plt>

0000b5a8 <rb_set_type>:
    b5a8:	strb	r1, [r0, #17]
    b5ac:	bx	lr

0000b5b0 <rb_get_type>:
    b5b0:	ldrb	r0, [r0, #17]
    b5b4:	bx	lr

0000b5b8 <rb_fd_ssl>:
    b5b8:	cmp	r0, #0
    b5bc:	ldrbne	r0, [r0, #17]
    b5c0:	lsrne	r0, r0, #5
    b5c4:	andne	r0, r0, #1
    b5c8:	moveq	r0, #0
    b5cc:	bx	lr

0000b5d0 <rb_get_fd>:
    b5d0:	cmp	r0, #0
    b5d4:	ldrne	r0, [r0, #12]
    b5d8:	mvneq	r0, #0
    b5dc:	bx	lr

0000b5e0 <rb_get_sockerr>:
    b5e0:	push	{r4, r5, r6, lr}
    b5e4:	sub	sp, sp, #16
    b5e8:	mov	r3, #0
    b5ec:	str	r3, [sp, #12]
    b5f0:	mov	r3, #4
    b5f4:	str	r3, [sp, #8]
    b5f8:	ldrb	r3, [r0, #17]
    b5fc:	tst	r3, #4
    b600:	beq	b660 <rb_get_sockerr+0x80>
    b604:	mov	r5, r0
    b608:	bl	4ce8 <__errno_location@plt>
    b60c:	mov	r6, r0
    b610:	ldr	r4, [r0]
    b614:	cmp	r5, #0
    b618:	beq	b650 <rb_get_sockerr+0x70>
    b61c:	mov	r0, r5
    b620:	bl	44e4 <rb_get_fd@plt>
    b624:	add	r3, sp, #8
    b628:	str	r3, [sp]
    b62c:	add	r3, sp, #12
    b630:	mov	r2, #4
    b634:	mov	r1, #1
    b638:	bl	4c7c <getsockopt@plt>
    b63c:	cmp	r0, #0
    b640:	bne	b650 <rb_get_sockerr+0x70>
    b644:	ldr	r3, [sp, #12]
    b648:	cmp	r3, #0
    b64c:	movne	r4, r3
    b650:	str	r4, [r6]
    b654:	mov	r0, r4
    b658:	add	sp, sp, #16
    b65c:	pop	{r4, r5, r6, pc}
    b660:	bl	4ce8 <__errno_location@plt>
    b664:	ldr	r4, [r0]
    b668:	b	b654 <rb_get_sockerr+0x74>

0000b66c <rb_bind>:
    b66c:	push	{r4, r5, r6, lr}
    b670:	sub	sp, sp, #16
    b674:	mov	r4, r0
    b678:	mov	r6, r1
    b67c:	mov	r1, #1
    b680:	add	r3, sp, #16
    b684:	str	r1, [r3, #-4]!
    b688:	mov	r2, #4
    b68c:	str	r2, [sp]
    b690:	mov	r2, #2
    b694:	ldr	r0, [r0, #12]
    b698:	bl	4ca0 <setsockopt@plt>
    b69c:	subs	r5, r0, #0
    b6a0:	bne	b6d0 <rb_bind+0x64>
    b6a4:	ldrh	r2, [r6]
    b6a8:	cmp	r2, #2
    b6ac:	moveq	r2, #16
    b6b0:	movne	r2, #28
    b6b4:	mov	r1, r6
    b6b8:	ldr	r0, [r4, #12]
    b6bc:	bl	4910 <bind@plt>
    b6c0:	mov	r5, r0
    b6c4:	mov	r0, r5
    b6c8:	add	sp, sp, #16
    b6cc:	pop	{r4, r5, r6, pc}
    b6d0:	ldr	r6, [r4, #12]
    b6d4:	mov	r0, r4
    b6d8:	bl	4a90 <rb_get_sockerr@plt>
    b6dc:	bl	43a0 <strerror@plt>
    b6e0:	mov	r2, r0
    b6e4:	mov	r1, r6
    b6e8:	ldr	r0, [pc, #8]	; b6f8 <rb_bind+0x8c>
    b6ec:	add	r0, pc, r0
    b6f0:	bl	491c <rb_lib_log@plt>
    b6f4:	b	b6c4 <rb_bind+0x58>
    b6f8:	.word	0x0000a94c

0000b6fc <rb_get_fde>:
    b6fc:	ldr	r2, [pc, #132]	; b788 <rb_get_fde+0x8c>
    b700:	add	r2, pc, r2
    b704:	subs	r1, r0, #0
    b708:	blt	b778 <rb_get_fde+0x7c>
    b70c:	asr	r3, r1, #24
    b710:	eor	r3, r3, r1, asr #12
    b714:	eor	r3, r3, r1
    b718:	lsl	r3, r3, #20
    b71c:	lsr	r3, r3, #20
    b720:	ldr	r0, [pc, #100]	; b78c <rb_get_fde+0x90>
    b724:	ldr	r2, [r2, r0]
    b728:	ldr	r2, [r2]
    b72c:	add	r3, r3, r3, lsl #1
    b730:	ldr	r3, [r2, r3, lsl #2]
    b734:	cmp	r3, #0
    b738:	beq	b780 <rb_get_fde+0x84>
    b73c:	ldr	r0, [r3]
    b740:	ldr	r2, [r0, #12]
    b744:	cmp	r1, r2
    b748:	beq	b76c <rb_get_fde+0x70>
    b74c:	ldr	r3, [r3, #8]
    b750:	cmp	r3, #0
    b754:	beq	b770 <rb_get_fde+0x74>
    b758:	ldr	r0, [r3]
    b75c:	ldr	r2, [r0, #12]
    b760:	cmp	r1, r2
    b764:	bne	b74c <rb_get_fde+0x50>
    b768:	bx	lr
    b76c:	bx	lr
    b770:	mov	r0, #0
    b774:	bx	lr
    b778:	mov	r0, #0
    b77c:	bx	lr
    b780:	mov	r0, #0
    b784:	bx	lr
    b788:	.word	0x0001c8f8
    b78c:	.word	0x000003c0

0000b790 <rb_read>:
    b790:	cmp	r0, #0
    b794:	beq	b7d4 <rb_read+0x44>
    b798:	push	{r4, lr}
    b79c:	ldrb	r3, [r0, #17]
    b7a0:	tst	r3, #32
    b7a4:	bne	b7bc <rb_read+0x2c>
    b7a8:	tst	r3, #4
    b7ac:	bne	b7c4 <rb_read+0x34>
    b7b0:	ldr	r0, [r0, #12]
    b7b4:	bl	470c <read@plt>
    b7b8:	pop	{r4, pc}
    b7bc:	bl	ddc0 <rb_ssl_read>
    b7c0:	pop	{r4, pc}
    b7c4:	mov	r3, #0
    b7c8:	ldr	r0, [r0, #12]
    b7cc:	bl	458c <recv@plt>
    b7d0:	pop	{r4, pc}
    b7d4:	mov	r0, #0
    b7d8:	bx	lr

0000b7dc <rb_write>:
    b7dc:	cmp	r0, #0
    b7e0:	beq	b820 <rb_write+0x44>
    b7e4:	push	{r4, lr}
    b7e8:	ldrb	r3, [r0, #17]
    b7ec:	tst	r3, #32
    b7f0:	bne	b808 <rb_write+0x2c>
    b7f4:	tst	r3, #4
    b7f8:	bne	b810 <rb_write+0x34>
    b7fc:	ldr	r0, [r0, #12]
    b800:	bl	4724 <write@plt>
    b804:	pop	{r4, pc}
    b808:	bl	dde8 <rb_ssl_write>
    b80c:	pop	{r4, pc}
    b810:	mov	r3, #16384	; 0x4000
    b814:	ldr	r0, [r0, #12]
    b818:	bl	4a9c <send@plt>
    b81c:	pop	{r4, pc}
    b820:	mov	r0, #0
    b824:	bx	lr

0000b828 <rb_writev>:
    b828:	push	{r4, r5, r6, r7, lr}
    b82c:	sub	sp, sp, #36	; 0x24
    b830:	subs	r7, r0, #0
    b834:	beq	b864 <rb_writev+0x3c>
    b838:	ldrb	r3, [r7, #17]
    b83c:	tst	r3, #32
    b840:	bne	b878 <rb_writev+0x50>
    b844:	tst	r3, #4
    b848:	bne	b8c4 <rb_writev+0x9c>
    b84c:	ldr	r0, [r7, #12]
    b850:	bl	4688 <writev@plt>
    b854:	mov	r6, r0
    b858:	mov	r0, r6
    b85c:	add	sp, sp, #36	; 0x24
    b860:	pop	{r4, r5, r6, r7, pc}
    b864:	bl	4ce8 <__errno_location@plt>
    b868:	mov	r3, #9
    b86c:	str	r3, [r0]
    b870:	mvn	r6, #0
    b874:	b	b858 <rb_writev+0x30>
    b878:	mov	r5, r2
    b87c:	cmp	r2, #0
    b880:	beq	b900 <rb_writev+0xd8>
    b884:	add	r4, r1, #8
    b888:	mov	r6, #0
    b88c:	ldr	r2, [r4, #-4]
    b890:	ldr	r1, [r4, #-8]
    b894:	mov	r0, r7
    b898:	bl	4658 <rb_write@plt>
    b89c:	cmp	r0, #0
    b8a0:	ble	b8b8 <rb_writev+0x90>
    b8a4:	add	r6, r6, r0
    b8a8:	add	r4, r4, #8
    b8ac:	subs	r5, r5, #1
    b8b0:	bne	b88c <rb_writev+0x64>
    b8b4:	b	b858 <rb_writev+0x30>
    b8b8:	cmp	r6, #0
    b8bc:	movle	r6, r0
    b8c0:	b	b858 <rb_writev+0x30>
    b8c4:	mov	r0, #0
    b8c8:	str	r0, [sp, #4]
    b8cc:	add	r3, sp, #4
    b8d0:	str	r0, [sp, #8]
    b8d4:	str	r0, [sp, #20]
    b8d8:	str	r0, [sp, #24]
    b8dc:	str	r0, [sp, #28]
    b8e0:	str	r1, [sp, #12]
    b8e4:	str	r2, [sp, #16]
    b8e8:	mov	r2, #16384	; 0x4000
    b8ec:	mov	r1, r3
    b8f0:	ldr	r0, [r7, #12]
    b8f4:	bl	4700 <sendmsg@plt>
    b8f8:	mov	r6, r0
    b8fc:	b	b858 <rb_writev+0x30>
    b900:	mov	r6, #0
    b904:	b	b858 <rb_writev+0x30>

0000b908 <rb_inet_ntop>:
    b908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b90c:	sub	sp, sp, #100	; 0x64
    b910:	mov	r5, r1
    b914:	str	r2, [sp, #4]
    b918:	mov	r8, r3
    b91c:	cmp	r0, #2
    b920:	beq	b938 <rb_inet_ntop+0x30>
    b924:	cmp	r0, #10
    b928:	beq	b95c <rb_inet_ntop+0x54>
    b92c:	mov	r0, #0
    b930:	add	sp, sp, #100	; 0x64
    b934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b938:	cmp	r3, #15
    b93c:	movls	r0, #0
    b940:	bls	b930 <rb_inet_ntop+0x28>
    b944:	mov	r0, r1
    b948:	bl	a2ac <inetntoa>
    b94c:	mov	r1, r0
    b950:	ldr	r0, [sp, #4]
    b954:	bl	488c <strcpy@plt>
    b958:	b	b930 <rb_inet_ntop+0x28>
    b95c:	ldr	r3, [r1]
    b960:	cmp	r3, #0
    b964:	bne	bbc8 <rb_inet_ntop+0x2c0>
    b968:	ldr	r3, [r1, #4]
    b96c:	cmp	r3, #0
    b970:	bne	bbc8 <rb_inet_ntop+0x2c0>
    b974:	ldr	r3, [r1, #8]
    b978:	cmn	r3, #65536	; 0x10000
    b97c:	bne	bbbc <rb_inet_ntop+0x2b4>
    b980:	add	r0, r5, #12
    b984:	cmp	r8, #15
    b988:	movls	r0, #0
    b98c:	bls	b930 <rb_inet_ntop+0x28>
    b990:	bl	a2ac <inetntoa>
    b994:	mov	r1, r0
    b998:	ldr	r0, [sp, #4]
    b99c:	bl	488c <strcpy@plt>
    b9a0:	b	b930 <rb_inet_ntop+0x28>
    b9a4:	ldr	r3, [r5, #12]
    b9a8:	rev	r3, r3
    b9ac:	cmp	r3, #1
    b9b0:	bhi	b980 <rb_inet_ntop+0x78>
    b9b4:	b	bbc8 <rb_inet_ntop+0x2c0>
    b9b8:	cmn	r0, #1
    b9bc:	beq	b9e8 <rb_inet_ntop+0xe0>
    b9c0:	cmn	r6, #1
    b9c4:	movne	r1, #0
    b9c8:	moveq	r1, #1
    b9cc:	cmp	ip, r9
    b9d0:	orrgt	r1, r1, #1
    b9d4:	cmp	r1, #0
    b9d8:	moveq	r0, lr
    b9dc:	movne	r9, ip
    b9e0:	movne	r6, r0
    b9e4:	movne	r0, lr
    b9e8:	add	r3, r3, #1
    b9ec:	cmp	r3, #8
    b9f0:	beq	ba14 <rb_inet_ntop+0x10c>
    b9f4:	ldr	r1, [r2], #4
    b9f8:	cmp	r1, #0
    b9fc:	bne	b9b8 <rb_inet_ntop+0xb0>
    ba00:	cmn	r0, #1
    ba04:	addne	ip, ip, #1
    ba08:	moveq	r0, r3
    ba0c:	moveq	ip, #1
    ba10:	b	b9e8 <rb_inet_ntop+0xe0>
    ba14:	cmn	r0, #1
    ba18:	beq	ba40 <rb_inet_ntop+0x138>
    ba1c:	cmn	r6, #1
    ba20:	movne	r3, #0
    ba24:	moveq	r3, #1
    ba28:	cmp	r9, ip
    ba2c:	orrlt	r3, r3, #1
    ba30:	cmp	r3, #0
    ba34:	movne	r9, ip
    ba38:	cmp	r3, #0
    ba3c:	movne	r6, r0
    ba40:	cmp	r9, #1
    ba44:	movgt	r3, #0
    ba48:	movle	r3, #1
    ba4c:	cmn	r6, #1
    ba50:	moveq	r3, #0
    ba54:	cmp	r3, #0
    ba58:	mvnne	r6, #0
    ba5c:	add	r0, sp, #48	; 0x30
    ba60:	mov	r4, #0
    ba64:	add	fp, sp, #16
    ba68:	ldr	r3, [pc, #444]	; bc2c <rb_inet_ntop+0x324>
    ba6c:	add	r3, pc, r3
    ba70:	str	r3, [sp, #8]
    ba74:	mov	sl, #58	; 0x3a
    ba78:	add	r3, r9, r6
    ba7c:	str	r5, [sp, #12]
    ba80:	mov	r5, r3
    ba84:	b	bb74 <rb_inet_ntop+0x26c>
    ba88:	cmp	r4, #0
    ba8c:	beq	bb50 <rb_inet_ntop+0x248>
    ba90:	add	r7, r0, #1
    ba94:	strb	sl, [r0]
    ba98:	cmp	r6, #0
    ba9c:	cmpeq	r4, #6
    baa0:	bne	bb54 <rb_inet_ntop+0x24c>
    baa4:	cmp	r9, #6
    baa8:	beq	bac4 <rb_inet_ntop+0x1bc>
    baac:	cmp	r9, #5
    bab0:	bne	bb54 <rb_inet_ntop+0x24c>
    bab4:	ldr	r3, [sp, #36]	; 0x24
    bab8:	ldr	r2, [pc, #368]	; bc30 <rb_inet_ntop+0x328>
    babc:	cmp	r3, r2
    bac0:	bne	bb54 <rb_inet_ntop+0x24c>
    bac4:	ldr	r5, [sp, #12]
    bac8:	add	r0, r5, #12
    bacc:	add	r3, sp, #96	; 0x60
    bad0:	sub	r3, r3, r7
    bad4:	sub	r3, r3, #2
    bad8:	cmp	r3, #15
    badc:	movls	r0, #0
    bae0:	bls	b930 <rb_inet_ntop+0x28>
    bae4:	bl	a2ac <inetntoa>
    bae8:	mov	r1, r0
    baec:	mov	r0, r7
    baf0:	bl	488c <strcpy@plt>
    baf4:	cmp	r0, #0
    baf8:	beq	b930 <rb_inet_ntop+0x28>
    bafc:	mov	r0, r7
    bb00:	bl	47e4 <strlen@plt>
    bb04:	add	r0, r7, r0
    bb08:	cmn	r6, #1
    bb0c:	beq	bb24 <rb_inet_ntop+0x21c>
    bb10:	add	r6, r9, r6
    bb14:	cmp	r6, #8
    bb18:	moveq	r3, #58	; 0x3a
    bb1c:	strbeq	r3, [r0]
    bb20:	addeq	r0, r0, #1
    bb24:	mov	r3, #0
    bb28:	strb	r3, [r0], #1
    bb2c:	add	r2, sp, #48	; 0x30
    bb30:	sub	r2, r0, r2
    bb34:	cmp	r8, r2
    bb38:	movcc	r0, #0
    bb3c:	bcc	b930 <rb_inet_ntop+0x28>
    bb40:	add	r1, sp, #48	; 0x30
    bb44:	ldr	r0, [sp, #4]
    bb48:	bl	4808 <memcpy@plt>
    bb4c:	b	b930 <rb_inet_ntop+0x28>
    bb50:	mov	r7, r0
    bb54:	ldr	r2, [fp, r4, lsl #2]
    bb58:	ldr	r1, [sp, #8]
    bb5c:	mov	r0, r7
    bb60:	bl	4d00 <sprintf@plt>
    bb64:	add	r0, r7, r0
    bb68:	add	r4, r4, #1
    bb6c:	cmp	r4, #8
    bb70:	beq	bb08 <rb_inet_ntop+0x200>
    bb74:	cmp	r6, r4
    bb78:	movgt	r3, #0
    bb7c:	movle	r3, #1
    bb80:	cmn	r6, #1
    bb84:	moveq	r3, #0
    bb88:	cmp	r3, #0
    bb8c:	beq	ba88 <rb_inet_ntop+0x180>
    bb90:	cmp	r5, r4
    bb94:	ble	ba88 <rb_inet_ntop+0x180>
    bb98:	cmp	r6, r4
    bb9c:	bne	bb68 <rb_inet_ntop+0x260>
    bba0:	cmp	r4, #0
    bba4:	moveq	r3, #48	; 0x30
    bba8:	strbeq	r3, [r0]
    bbac:	addeq	r0, r0, #1
    bbb0:	strb	sl, [r0]
    bbb4:	add	r0, r0, #1
    bbb8:	b	bb68 <rb_inet_ntop+0x260>
    bbbc:	ldr	r3, [r1, #8]
    bbc0:	cmp	r3, #0
    bbc4:	beq	b9a4 <rb_inet_ntop+0x9c>
    bbc8:	mov	r2, #32
    bbcc:	mov	r1, #0
    bbd0:	add	r0, sp, #16
    bbd4:	bl	4628 <memset@plt>
    bbd8:	mov	r0, #0
    bbdc:	add	r3, r0, r0, lsr #31
    bbe0:	asr	r3, r3, #1
    bbe4:	add	r2, sp, #96	; 0x60
    bbe8:	add	r3, r2, r3, lsl #2
    bbec:	mov	r1, r5
    bbf0:	ldrb	ip, [r1, r0]!
    bbf4:	ldrb	r2, [r1, #1]
    bbf8:	orr	r2, r2, ip, lsl #8
    bbfc:	str	r2, [r3, #-80]	; 0xffffffb0
    bc00:	add	r0, r0, #2
    bc04:	cmp	r0, #16
    bc08:	bne	bbdc <rb_inet_ntop+0x2d4>
    bc0c:	add	r2, sp, #16
    bc10:	mov	r9, #0
    bc14:	mvn	r6, #0
    bc18:	mov	ip, r9
    bc1c:	mov	r0, r6
    bc20:	mov	r3, r9
    bc24:	mov	lr, r6
    bc28:	b	b9f4 <rb_inet_ntop+0xec>
    bc2c:	.word	0x0000a60c
    bc30:	.word	0x0000ffff

0000bc34 <rb_inet_ntop_sock>:
    bc34:	push	{r4, lr}
    bc38:	ldrh	ip, [r0]
    bc3c:	cmp	ip, #2
    bc40:	beq	bc54 <rb_inet_ntop_sock+0x20>
    bc44:	cmp	ip, #10
    bc48:	beq	bc6c <rb_inet_ntop_sock+0x38>
    bc4c:	mov	r0, #0
    bc50:	pop	{r4, pc}
    bc54:	mov	r3, r2
    bc58:	mov	r2, r1
    bc5c:	add	r1, r0, #4
    bc60:	mov	r0, #2
    bc64:	bl	494c <rb_inet_ntop@plt>
    bc68:	pop	{r4, pc}
    bc6c:	mov	r3, r2
    bc70:	mov	r2, r1
    bc74:	add	r1, r0, #8
    bc78:	mov	r0, #10
    bc7c:	bl	494c <rb_inet_ntop@plt>
    bc80:	pop	{r4, pc}

0000bc84 <rb_inet_pton>:
    bc84:	push	{r4, r5, lr}
    bc88:	sub	sp, sp, #60	; 0x3c
    bc8c:	mov	r4, r1
    bc90:	mov	r5, r2
    bc94:	cmp	r0, #2
    bc98:	beq	bcac <rb_inet_pton+0x28>
    bc9c:	cmp	r0, #10
    bca0:	beq	bcc0 <rb_inet_pton+0x3c>
    bca4:	mvn	r0, #0
    bca8:	b	bcb8 <rb_inet_pton+0x34>
    bcac:	mov	r1, r2
    bcb0:	mov	r0, r4
    bcb4:	bl	a3c4 <inet_pton4>
    bcb8:	add	sp, sp, #60	; 0x3c
    bcbc:	pop	{r4, r5, pc}
    bcc0:	mov	r1, r2
    bcc4:	mov	r0, r4
    bcc8:	bl	a3c4 <inet_pton4>
    bccc:	cmp	r0, #0
    bcd0:	bne	bce4 <rb_inet_pton+0x60>
    bcd4:	mov	r1, r5
    bcd8:	mov	r0, r4
    bcdc:	bl	a5b0 <inet_pton6>
    bce0:	b	bcb8 <rb_inet_pton+0x34>
    bce4:	mov	r2, r4
    bce8:	ldr	r1, [pc, #24]	; bd08 <rb_inet_pton+0x84>
    bcec:	add	r1, pc, r1
    bcf0:	mov	r0, sp
    bcf4:	bl	4d00 <sprintf@plt>
    bcf8:	mov	r1, r5
    bcfc:	mov	r0, sp
    bd00:	bl	a5b0 <inet_pton6>
    bd04:	b	bcb8 <rb_inet_pton+0x34>
    bd08:	.word	0x0000a390

0000bd0c <rb_inet_pton_sock>:
    bd0c:	push	{r4, r5, r6, lr}
    bd10:	mov	r5, r0
    bd14:	mov	r4, r1
    bd18:	mov	r2, #128	; 0x80
    bd1c:	mov	r1, #0
    bd20:	mov	r0, r4
    bd24:	bl	4628 <memset@plt>
    bd28:	add	r2, r4, #4
    bd2c:	mov	r1, r5
    bd30:	mov	r0, #2
    bd34:	bl	4634 <rb_inet_pton@plt>
    bd38:	cmp	r0, #0
    bd3c:	beq	bd58 <rb_inet_pton_sock+0x4c>
    bd40:	mov	r3, #2
    bd44:	strh	r3, [r4]
    bd48:	mov	r3, #0
    bd4c:	strh	r3, [r4, #2]
    bd50:	mov	r0, #1
    bd54:	pop	{r4, r5, r6, pc}
    bd58:	add	r2, r4, #8
    bd5c:	mov	r1, r5
    bd60:	mov	r0, #10
    bd64:	bl	4634 <rb_inet_pton@plt>
    bd68:	cmp	r0, #0
    bd6c:	movne	r3, #10
    bd70:	strhne	r3, [r4]
    bd74:	movne	r3, #0
    bd78:	strhne	r3, [r4, #2]
    bd7c:	movne	r0, #1
    bd80:	pop	{r4, r5, r6, pc}

0000bd84 <rb_get_iotype>:
    bd84:	ldr	r0, [pc, #8]	; bd94 <rb_get_iotype+0x10>
    bd88:	add	r0, pc, r0
    bd8c:	add	r0, r0, #56	; 0x38
    bd90:	bx	lr
    bd94:	.word	0x0002ec18

0000bd98 <rb_io_sched_event>:
    bd98:	push	{r4, r5, r6, lr}
    bd9c:	subs	r4, r0, #0
    bda0:	beq	bdf8 <rb_io_sched_event+0x60>
    bda4:	ldr	r3, [pc, #100]	; be10 <rb_io_sched_event+0x78>
    bda8:	add	r3, pc, r3
    bdac:	ldr	r3, [r3, #52]	; 0x34
    bdb0:	cmp	r3, #0
    bdb4:	beq	be00 <rb_io_sched_event+0x68>
    bdb8:	ldr	r2, [pc, #84]	; be14 <rb_io_sched_event+0x7c>
    bdbc:	add	r2, pc, r2
    bdc0:	ldr	r2, [r2, #40]	; 0x28
    bdc4:	cmp	r2, #0
    bdc8:	beq	be08 <rb_io_sched_event+0x70>
    bdcc:	mov	r5, r1
    bdd0:	blx	r3
    bdd4:	cmp	r0, #0
    bdd8:	popeq	{r4, r5, r6, pc}
    bddc:	ldr	r3, [pc, #52]	; be18 <rb_io_sched_event+0x80>
    bde0:	add	r3, pc, r3
    bde4:	ldr	r3, [r3, #40]	; 0x28
    bde8:	mov	r1, r5
    bdec:	mov	r0, r4
    bdf0:	blx	r3
    bdf4:	pop	{r4, r5, r6, pc}
    bdf8:	mov	r0, #0
    bdfc:	pop	{r4, r5, r6, pc}
    be00:	mov	r0, #0
    be04:	pop	{r4, r5, r6, pc}
    be08:	mov	r0, #0
    be0c:	pop	{r4, r5, r6, pc}
    be10:	.word	0x0002ebf8
    be14:	.word	0x0002ebe4
    be18:	.word	0x0002ebc0

0000be1c <rb_io_unsched_event>:
    be1c:	push	{r4, lr}
    be20:	subs	r4, r0, #0
    be24:	popeq	{r4, pc}
    be28:	ldr	r3, [pc, #68]	; be74 <rb_io_unsched_event+0x58>
    be2c:	add	r3, pc, r3
    be30:	ldr	r3, [r3, #52]	; 0x34
    be34:	cmp	r3, #0
    be38:	popeq	{r4, pc}
    be3c:	ldr	r2, [pc, #52]	; be78 <rb_io_unsched_event+0x5c>
    be40:	add	r2, pc, r2
    be44:	ldr	r2, [r2, #44]	; 0x2c
    be48:	cmp	r2, #0
    be4c:	popeq	{r4, pc}
    be50:	blx	r3
    be54:	cmp	r0, #0
    be58:	popeq	{r4, pc}
    be5c:	ldr	r3, [pc, #24]	; be7c <rb_io_unsched_event+0x60>
    be60:	add	r3, pc, r3
    be64:	ldr	r3, [r3, #44]	; 0x2c
    be68:	mov	r0, r4
    be6c:	blx	r3
    be70:	pop	{r4, pc}
    be74:	.word	0x0002eb74
    be78:	.word	0x0002eb60
    be7c:	.word	0x0002eb40

0000be80 <rb_io_supports_event>:
    be80:	ldr	r3, [pc, #32]	; bea8 <rb_io_supports_event+0x28>
    be84:	add	r3, pc, r3
    be88:	ldr	r3, [r3, #52]	; 0x34
    be8c:	cmp	r3, #0
    be90:	beq	bea0 <rb_io_supports_event+0x20>
    be94:	push	{r4, lr}
    be98:	blx	r3
    be9c:	pop	{r4, pc}
    bea0:	mov	r0, #0
    bea4:	bx	lr
    bea8:	.word	0x0002eb1c

0000beac <rb_io_init_event>:
    beac:	push	{r4, lr}
    beb0:	ldr	r3, [pc, #16]	; bec8 <rb_io_init_event+0x1c>
    beb4:	add	r3, pc, r3
    beb8:	ldr	r3, [r3, #48]	; 0x30
    bebc:	blx	r3
    bec0:	bl	e6e0 <rb_event_io_register_all>
    bec4:	pop	{r4, pc}
    bec8:	.word	0x0002eaec

0000becc <rb_init_netio>:
    becc:	push	{r4, r5, r6, lr}
    bed0:	ldr	r5, [pc, #496]	; c0c8 <rb_init_netio+0x1fc>
    bed4:	add	r5, pc, r5
    bed8:	ldr	r0, [pc, #492]	; c0cc <rb_init_netio+0x200>
    bedc:	add	r0, pc, r0
    bee0:	bl	4598 <getenv@plt>
    bee4:	mov	r4, r0
    bee8:	mov	r1, #49152	; 0xc000
    beec:	mov	r0, #1
    bef0:	bl	45ec <calloc@plt>
    bef4:	cmp	r0, #0
    bef8:	beq	bfcc <rb_init_netio+0x100>
    befc:	ldr	r3, [pc, #460]	; c0d0 <rb_init_netio+0x204>
    bf00:	ldr	r3, [r5, r3]
    bf04:	str	r0, [r3]
    bf08:	bl	d648 <rb_init_ssl>
    bf0c:	cmp	r4, #0
    bf10:	beq	bff4 <rb_init_netio+0x128>
    bf14:	mov	r1, r4
    bf18:	ldr	r0, [pc, #436]	; c0d4 <rb_init_netio+0x208>
    bf1c:	add	r0, pc, r0
    bf20:	bl	4cdc <strcmp@plt>
    bf24:	cmp	r0, #0
    bf28:	beq	bfd0 <rb_init_netio+0x104>
    bf2c:	mov	r1, r4
    bf30:	ldr	r0, [pc, #416]	; c0d8 <rb_init_netio+0x20c>
    bf34:	add	r0, pc, r0
    bf38:	bl	4cdc <strcmp@plt>
    bf3c:	cmp	r0, #0
    bf40:	beq	c068 <rb_init_netio+0x19c>
    bf44:	mov	r1, r4
    bf48:	ldr	r0, [pc, #396]	; c0dc <rb_init_netio+0x210>
    bf4c:	add	r0, pc, r0
    bf50:	bl	4cdc <strcmp@plt>
    bf54:	cmp	r0, #0
    bf58:	beq	c078 <rb_init_netio+0x1ac>
    bf5c:	mov	r1, r4
    bf60:	ldr	r0, [pc, #376]	; c0e0 <rb_init_netio+0x214>
    bf64:	add	r0, pc, r0
    bf68:	bl	4cdc <strcmp@plt>
    bf6c:	cmp	r0, #0
    bf70:	beq	c088 <rb_init_netio+0x1bc>
    bf74:	mov	r1, r4
    bf78:	ldr	r0, [pc, #356]	; c0e4 <rb_init_netio+0x218>
    bf7c:	add	r0, pc, r0
    bf80:	bl	4cdc <strcmp@plt>
    bf84:	cmp	r0, #0
    bf88:	beq	c098 <rb_init_netio+0x1cc>
    bf8c:	mov	r1, r4
    bf90:	ldr	r0, [pc, #336]	; c0e8 <rb_init_netio+0x21c>
    bf94:	add	r0, pc, r0
    bf98:	bl	4cdc <strcmp@plt>
    bf9c:	cmp	r0, #0
    bfa0:	beq	c0a8 <rb_init_netio+0x1dc>
    bfa4:	mov	r1, r4
    bfa8:	ldr	r0, [pc, #316]	; c0ec <rb_init_netio+0x220>
    bfac:	add	r0, pc, r0
    bfb0:	bl	4cdc <strcmp@plt>
    bfb4:	cmp	r0, #0
    bfb8:	bne	bfdc <rb_init_netio+0x110>
    bfbc:	bl	ad04 <try_select>
    bfc0:	cmp	r0, #0
    bfc4:	bne	bfdc <rb_init_netio+0x110>
    bfc8:	pop	{r4, r5, r6, pc}
    bfcc:	bl	4988 <rb_outofmemory@plt>
    bfd0:	bl	a8e4 <try_epoll>
    bfd4:	cmp	r0, #0
    bfd8:	beq	c064 <rb_init_netio+0x198>
    bfdc:	mov	r1, r4
    bfe0:	ldr	r0, [pc, #264]	; c0f0 <rb_init_netio+0x224>
    bfe4:	add	r0, pc, r0
    bfe8:	bl	4cdc <strcmp@plt>
    bfec:	cmp	r0, #0
    bff0:	beq	c0b8 <rb_init_netio+0x1ec>
    bff4:	bl	a824 <try_kqueue>
    bff8:	cmp	r0, #0
    bffc:	popeq	{r4, r5, r6, pc}
    c000:	bl	a8e4 <try_epoll>
    c004:	cmp	r0, #0
    c008:	popeq	{r4, r5, r6, pc}
    c00c:	bl	a9a4 <try_ports>
    c010:	cmp	r0, #0
    c014:	popeq	{r4, r5, r6, pc}
    c018:	bl	aa64 <try_devpoll>
    c01c:	cmp	r0, #0
    c020:	popeq	{r4, r5, r6, pc}
    c024:	bl	ab04 <try_sigio>
    c028:	cmp	r0, #0
    c02c:	popeq	{r4, r5, r6, pc}
    c030:	bl	abc4 <try_poll>
    c034:	cmp	r0, #0
    c038:	popeq	{r4, r5, r6, pc}
    c03c:	bl	ac64 <try_win32>
    c040:	cmp	r0, #0
    c044:	popeq	{r4, r5, r6, pc}
    c048:	bl	ad04 <try_select>
    c04c:	cmp	r0, #0
    c050:	popeq	{r4, r5, r6, pc}
    c054:	ldr	r0, [pc, #152]	; c0f4 <rb_init_netio+0x228>
    c058:	add	r0, pc, r0
    c05c:	bl	491c <rb_lib_log@plt>
    c060:	bl	43c4 <abort@plt>
    c064:	pop	{r4, r5, r6, pc}
    c068:	bl	a824 <try_kqueue>
    c06c:	cmp	r0, #0
    c070:	bne	bfdc <rb_init_netio+0x110>
    c074:	pop	{r4, r5, r6, pc}
    c078:	bl	a9a4 <try_ports>
    c07c:	cmp	r0, #0
    c080:	bne	bfdc <rb_init_netio+0x110>
    c084:	pop	{r4, r5, r6, pc}
    c088:	bl	abc4 <try_poll>
    c08c:	cmp	r0, #0
    c090:	bne	bfdc <rb_init_netio+0x110>
    c094:	pop	{r4, r5, r6, pc}
    c098:	bl	aa64 <try_devpoll>
    c09c:	cmp	r0, #0
    c0a0:	bne	bfdc <rb_init_netio+0x110>
    c0a4:	pop	{r4, r5, r6, pc}
    c0a8:	bl	ab04 <try_sigio>
    c0ac:	cmp	r0, #0
    c0b0:	bne	bfdc <rb_init_netio+0x110>
    c0b4:	pop	{r4, r5, r6, pc}
    c0b8:	bl	ac64 <try_win32>
    c0bc:	cmp	r0, #0
    c0c0:	bne	bff4 <rb_init_netio+0x128>
    c0c4:	pop	{r4, r5, r6, pc}
    c0c8:	.word	0x0001c124
    c0cc:	.word	0x0000a1ac
    c0d0:	.word	0x000003c0
    c0d4:	.word	0x0000a06c
    c0d8:	.word	0x0000a04c
    c0dc:	.word	0x0000a044
    c0e0:	.word	0x0000a044
    c0e4:	.word	0x0000a01c
    c0e8:	.word	0x0000a00c
    c0ec:	.word	0x0000a00c
    c0f0:	.word	0x00009fcc
    c0f4:	.word	0x0000a044

0000c0f8 <rb_setselect>:
    c0f8:	push	{r4, lr}
    c0fc:	ldr	ip, [pc, #12]	; c110 <rb_setselect+0x18>
    c100:	add	ip, pc, ip
    c104:	ldr	r4, [ip, #28]
    c108:	blx	r4
    c10c:	pop	{r4, pc}
    c110:	.word	0x0002e8a0

0000c114 <rb_close>:
    c114:	push	{r4, r5, r6, r7, r8, lr}
    c118:	ldr	r6, [pc, #400]	; c2b0 <rb_close+0x19c>
    c11c:	add	r6, pc, r6
    c120:	subs	r4, r0, #0
    c124:	popeq	{r4, r5, r6, r7, r8, pc}
    c128:	ldr	r8, [r4, #12]
    c12c:	ldrb	r5, [r4, #17]
    c130:	ands	r7, r5, #16
    c134:	bne	c1bc <rb_close+0xa8>
    c138:	mov	r3, #0
    c13c:	mov	r2, r3
    c140:	mov	r1, #3
    c144:	mov	r0, r4
    c148:	bl	44a8 <rb_setselect@plt>
    c14c:	mov	r3, #0
    c150:	mov	r2, r3
    c154:	mov	r1, r3
    c158:	mov	r0, r4
    c15c:	bl	43e8 <rb_settimeout@plt>
    c160:	ldr	r0, [r4, #52]	; 0x34
    c164:	cmp	r0, #0
    c168:	beq	c170 <rb_close+0x5c>
    c16c:	bl	46f4 <free@plt>
    c170:	ldr	r0, [r4, #48]	; 0x30
    c174:	cmp	r0, #0
    c178:	beq	c180 <rb_close+0x6c>
    c17c:	bl	46f4 <free@plt>
    c180:	ldr	r0, [r4, #24]
    c184:	cmp	r0, #0
    c188:	beq	c190 <rb_close+0x7c>
    c18c:	bl	46f4 <free@plt>
    c190:	tst	r5, #32
    c194:	bne	c1cc <rb_close+0xb8>
    c198:	ldrb	r3, [r4, #16]
    c19c:	tst	r3, #1
    c1a0:	bne	c1d8 <rb_close+0xc4>
    c1a4:	cmp	r7, #0
    c1a8:	popeq	{r4, r5, r6, r7, r8, pc}
    c1ac:	mov	r1, #2
    c1b0:	mov	r0, r8
    c1b4:	bl	4904 <shutdown@plt>
    c1b8:	pop	{r4, r5, r6, r7, r8, pc}
    c1bc:	mov	r1, #0
    c1c0:	mov	r0, r8
    c1c4:	bl	45e0 <listen@plt>
    c1c8:	b	c138 <rb_close+0x24>
    c1cc:	mov	r0, r4
    c1d0:	bl	d5e0 <rb_ssl_shutdown>
    c1d4:	b	c198 <rb_close+0x84>
    c1d8:	ldr	r2, [r4, #12]
    c1dc:	ldr	r3, [pc, #208]	; c2b4 <rb_close+0x1a0>
    c1e0:	ldr	r1, [r6, r3]
    c1e4:	asr	r3, r2, #24
    c1e8:	eor	r3, r3, r2, asr #12
    c1ec:	eor	r3, r3, r2
    c1f0:	lsl	r3, r3, #20
    c1f4:	lsr	r3, r3, #20
    c1f8:	add	r3, r3, r3, lsl #1
    c1fc:	lsl	r3, r3, #2
    c200:	ldr	r0, [r1]
    c204:	add	r1, r0, r3
    c208:	ldr	r2, [r4, #8]
    c20c:	cmp	r2, #0
    c210:	ldrne	ip, [r4, #4]
    c214:	strne	ip, [r2, #4]
    c218:	ldreq	r2, [r4, #4]
    c21c:	streq	r2, [r1, #4]
    c220:	ldr	r2, [r4, #4]
    c224:	cmp	r2, #0
    c228:	ldrne	r3, [r4, #8]
    c22c:	strne	r3, [r2, #8]
    c230:	ldreq	r2, [r4, #8]
    c234:	streq	r2, [r0, r3]
    c238:	mov	r3, #0
    c23c:	str	r3, [r4, #4]
    c240:	ldr	r3, [pc, #112]	; c2b8 <rb_close+0x1a4>
    c244:	add	r3, pc, r3
    c248:	ldr	r3, [r3, #100]	; 0x64
    c24c:	str	r3, [r4, #8]
    c250:	cmp	r3, #0
    c254:	strne	r4, [r3, #4]
    c258:	beq	c290 <rb_close+0x17c>
    c25c:	ldr	r3, [pc, #88]	; c2bc <rb_close+0x1a8>
    c260:	add	r3, pc, r3
    c264:	str	r4, [r3, #100]	; 0x64
    c268:	ldr	r2, [r1, #8]
    c26c:	sub	r2, r2, #1
    c270:	str	r2, [r1, #8]
    c274:	ldr	r2, [r3, #108]	; 0x6c
    c278:	add	r2, r2, #1
    c27c:	str	r2, [r3, #108]	; 0x6c
    c280:	ldrb	r3, [r4, #16]
    c284:	bic	r3, r3, #1
    c288:	strb	r3, [r4, #16]
    c28c:	b	c1a4 <rb_close+0x90>
    c290:	ldr	r3, [pc, #40]	; c2c0 <rb_close+0x1ac>
    c294:	add	r3, pc, r3
    c298:	ldr	r3, [r3, #104]	; 0x68
    c29c:	cmp	r3, #0
    c2a0:	ldreq	r3, [pc, #28]	; c2c4 <rb_close+0x1b0>
    c2a4:	addeq	r3, pc, r3
    c2a8:	streq	r4, [r3, #104]	; 0x68
    c2ac:	b	c25c <rb_close+0x148>
    c2b0:	.word	0x0001bedc
    c2b4:	.word	0x000003c0
    c2b8:	.word	0x0002e75c
    c2bc:	.word	0x0002e740
    c2c0:	.word	0x0002e70c
    c2c4:	.word	0x0002e6fc

0000c2c8 <rb_select>:
    c2c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2cc:	sub	sp, sp, #12
    c2d0:	ldr	r4, [pc, #196]	; c39c <rb_select+0xd4>
    c2d4:	add	r4, pc, r4
    c2d8:	ldr	r3, [r4, #32]
    c2dc:	blx	r3
    c2e0:	str	r0, [sp, #4]
    c2e4:	ldr	r4, [r4, #100]	; 0x64
    c2e8:	cmp	r4, #0
    c2ec:	beq	c390 <rb_select+0xc8>
    c2f0:	ldr	r5, [r4, #8]
    c2f4:	ldr	r9, [pc, #164]	; c3a0 <rb_select+0xd8>
    c2f8:	add	r9, pc, r9
    c2fc:	ldr	fp, [pc, #160]	; c3a4 <rb_select+0xdc>
    c300:	add	fp, pc, fp
    c304:	ldr	sl, [pc, #156]	; c3a8 <rb_select+0xe0>
    c308:	add	sl, pc, sl
    c30c:	mov	r8, #0
    c310:	ldr	r6, [pc, #148]	; c3ac <rb_select+0xe4>
    c314:	add	r6, pc, r6
    c318:	ldr	r7, [r4]
    c31c:	ldr	r3, [r9, #96]	; 0x60
    c320:	sub	r3, r3, #1
    c324:	str	r3, [r9, #96]	; 0x60
    c328:	ldr	r0, [r7, #12]
    c32c:	bl	4940 <close@plt>
    c330:	ldr	r3, [r4, #8]
    c334:	cmp	r3, #0
    c338:	ldrne	r2, [r4, #4]
    c33c:	strne	r2, [r3, #4]
    c340:	ldreq	r3, [r4, #4]
    c344:	streq	r3, [fp, #104]	; 0x68
    c348:	ldr	r3, [r4, #4]
    c34c:	cmp	r3, #0
    c350:	ldrne	r2, [r4, #8]
    c354:	strne	r2, [r3, #8]
    c358:	ldreq	r3, [r4, #8]
    c35c:	streq	r3, [sl, #100]	; 0x64
    c360:	str	r8, [r4, #4]
    c364:	str	r8, [r4, #8]
    c368:	ldr	r3, [r6, #108]	; 0x6c
    c36c:	sub	r3, r3, #1
    c370:	str	r3, [r6, #108]	; 0x6c
    c374:	mov	r1, r7
    c378:	ldr	r0, [r6, #92]	; 0x5c
    c37c:	bl	48c8 <rb_bh_free@plt>
    c380:	cmp	r5, #0
    c384:	movne	r4, r5
    c388:	ldrne	r5, [r5, #8]
    c38c:	bne	c318 <rb_select+0x50>
    c390:	ldr	r0, [sp, #4]
    c394:	add	sp, sp, #12
    c398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c39c:	.word	0x0002e6cc
    c3a0:	.word	0x0002e6a8
    c3a4:	.word	0x0002e6a0
    c3a8:	.word	0x0002e698
    c3ac:	.word	0x0002e68c

0000c3b0 <rb_setup_fd>:
    c3b0:	push	{r4, lr}
    c3b4:	ldr	r3, [pc, #12]	; c3c8 <rb_setup_fd+0x18>
    c3b8:	add	r3, pc, r3
    c3bc:	ldr	r3, [r3, #36]	; 0x24
    c3c0:	blx	r3
    c3c4:	pop	{r4, pc}
    c3c8:	.word	0x0002e5e8

0000c3cc <rb_set_nb>:
    c3cc:	push	{r4, r5, r6, lr}
    c3d0:	cmp	r0, #0
    c3d4:	moveq	r4, #0
    c3d8:	beq	c3ec <rb_set_nb+0x20>
    c3dc:	ldr	r5, [r0, #12]
    c3e0:	bl	4b2c <rb_setup_fd@plt>
    c3e4:	subs	r4, r0, #0
    c3e8:	beq	c3f4 <rb_set_nb+0x28>
    c3ec:	mov	r0, r4
    c3f0:	pop	{r4, r5, r6, pc}
    c3f4:	mov	r2, #0
    c3f8:	mov	r1, #3
    c3fc:	mov	r0, r5
    c400:	bl	4c04 <fcntl@plt>
    c404:	cmn	r0, #1
    c408:	beq	c3ec <rb_set_nb+0x20>
    c40c:	orr	r2, r0, #2048	; 0x800
    c410:	mov	r1, #4
    c414:	mov	r0, r5
    c418:	bl	4c04 <fcntl@plt>
    c41c:	adds	r4, r0, #1
    c420:	movne	r4, #1
    c424:	b	c3ec <rb_set_nb+0x20>

0000c428 <rb_accept_tryaccept>:
    c428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c42c:	sub	sp, sp, #172	; 0xac
    c430:	mov	r4, r0
    c434:	add	r5, sp, #40	; 0x28
    c438:	mov	r8, #128	; 0x80
    c43c:	mov	r9, #0
    c440:	ldr	sl, [pc, #408]	; c5e0 <rb_accept_tryaccept+0x1b8>
    c444:	add	sl, pc, sl
    c448:	ldr	r3, [pc, #404]	; c5e4 <rb_accept_tryaccept+0x1bc>
    c44c:	add	r3, pc, r3
    c450:	str	r3, [sp, #12]
    c454:	ldr	fp, [pc, #396]	; c5e8 <rb_accept_tryaccept+0x1c0>
    c458:	add	fp, pc, fp
    c45c:	b	c528 <rb_accept_tryaccept+0x100>
    c460:	mov	r3, #0
    c464:	ldr	r2, [pc, #384]	; c5ec <rb_accept_tryaccept+0x1c4>
    c468:	add	r2, pc, r2
    c46c:	mov	r1, #1
    c470:	mov	r0, r4
    c474:	bl	44a8 <rb_setselect@plt>
    c478:	add	sp, sp, #172	; 0xac
    c47c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c480:	mov	r1, r6
    c484:	mov	r0, fp
    c488:	bl	491c <rb_lib_log@plt>
    c48c:	mov	r0, r6
    c490:	bl	4940 <close@plt>
    c494:	b	c528 <rb_accept_tryaccept+0x100>
    c498:	ldr	r1, [r7, #12]
    c49c:	ldr	r0, [sp, #12]
    c4a0:	bl	491c <rb_lib_log@plt>
    c4a4:	mov	r0, r7
    c4a8:	bl	4868 <rb_close@plt>
    c4ac:	b	c584 <rb_accept_tryaccept+0x15c>
    c4b0:	ldr	r3, [sp, #48]	; 0x30
    c4b4:	cmp	r3, #0
    c4b8:	bne	c590 <rb_accept_tryaccept+0x168>
    c4bc:	ldr	r3, [sp, #52]	; 0x34
    c4c0:	cmp	r3, #0
    c4c4:	bne	c590 <rb_accept_tryaccept+0x168>
    c4c8:	ldr	r3, [sp, #56]	; 0x38
    c4cc:	cmn	r3, #65536	; 0x10000
    c4d0:	bne	c590 <rb_accept_tryaccept+0x168>
    c4d4:	add	r3, sp, #20
    c4d8:	str	r9, [sp, #28]
    c4dc:	str	r9, [sp, #32]
    c4e0:	mov	r2, #2
    c4e4:	strh	r2, [sp, #20]
    c4e8:	ldrh	r2, [sp, #42]	; 0x2a
    c4ec:	strh	r2, [sp, #22]
    c4f0:	ldr	r2, [sp, #60]	; 0x3c
    c4f4:	str	r2, [sp, #24]
    c4f8:	ldm	r3, {r0, r1, r2, r3}
    c4fc:	stm	r5, {r0, r1, r2, r3}
    c500:	b	c590 <rb_accept_tryaccept+0x168>
    c504:	ldr	r3, [r4, #52]	; 0x34
    c508:	ldr	r2, [r3, #140]	; 0x8c
    c50c:	str	r2, [sp]
    c510:	ldr	r6, [r3, #132]	; 0x84
    c514:	ldr	r3, [sp, #36]	; 0x24
    c518:	mov	r2, r5
    c51c:	mov	r1, r9
    c520:	mov	r0, r7
    c524:	blx	r6
    c528:	mov	r2, r8
    c52c:	mov	r1, r9
    c530:	mov	r0, r5
    c534:	bl	4628 <memset@plt>
    c538:	add	r2, sp, #168	; 0xa8
    c53c:	str	r8, [r2, #-132]!	; 0xffffff7c
    c540:	mov	r1, r5
    c544:	ldr	r0, [r4, #12]
    c548:	bl	476c <accept@plt>
    c54c:	subs	r6, r0, #0
    c550:	blt	c460 <rb_accept_tryaccept+0x38>
    c554:	ldrb	r1, [r4, #17]
    c558:	bic	r1, r1, #127	; 0x7f
    c55c:	mov	r2, sl
    c560:	orr	r1, r1, #4
    c564:	mov	r0, r6
    c568:	bl	4a84 <rb_open@plt>
    c56c:	subs	r7, r0, #0
    c570:	beq	c480 <rb_accept_tryaccept+0x58>
    c574:	mov	r0, r7
    c578:	bl	461c <rb_set_nb@plt>
    c57c:	cmp	r0, #0
    c580:	beq	c498 <rb_accept_tryaccept+0x70>
    c584:	ldrh	r3, [sp, #40]	; 0x28
    c588:	cmp	r3, #10
    c58c:	beq	c4b0 <rb_accept_tryaccept+0x88>
    c590:	ldr	r3, [r4, #52]	; 0x34
    c594:	ldr	r6, [r3, #136]	; 0x88
    c598:	cmp	r6, #0
    c59c:	beq	c5bc <rb_accept_tryaccept+0x194>
    c5a0:	ldr	r3, [r3, #140]	; 0x8c
    c5a4:	ldr	r2, [sp, #36]	; 0x24
    c5a8:	mov	r1, r5
    c5ac:	mov	r0, r7
    c5b0:	blx	r6
    c5b4:	cmp	r0, #0
    c5b8:	beq	c528 <rb_accept_tryaccept+0x100>
    c5bc:	ldrb	r3, [r4, #17]
    c5c0:	tst	r3, #32
    c5c4:	beq	c504 <rb_accept_tryaccept+0xdc>
    c5c8:	ldr	r3, [sp, #36]	; 0x24
    c5cc:	mov	r2, r5
    c5d0:	mov	r1, r7
    c5d4:	mov	r0, r4
    c5d8:	bl	debc <rb_ssl_accept_setup>
    c5dc:	b	c528 <rb_accept_tryaccept+0x100>
    c5e0:	.word	0x00009c94
    c5e4:	.word	0x00009ce8
    c5e8:	.word	0x00009c94
    c5ec:	.word	0xffffffb8

0000c5f0 <rb_accept_tcp>:
    c5f0:	push	{r4, r5, r6, r7, r8, lr}
    c5f4:	subs	r4, r0, #0
    c5f8:	popeq	{r4, r5, r6, r7, r8, pc}
    c5fc:	mov	r6, r3
    c600:	mov	r7, r2
    c604:	mov	r5, r1
    c608:	mov	r1, #144	; 0x90
    c60c:	mov	r0, #1
    c610:	bl	45ec <calloc@plt>
    c614:	cmp	r0, #0
    c618:	beq	c63c <rb_accept_tcp+0x4c>
    c61c:	str	r0, [r4, #52]	; 0x34
    c620:	str	r7, [r0, #132]	; 0x84
    c624:	str	r6, [r0, #140]	; 0x8c
    c628:	str	r5, [r0, #136]	; 0x88
    c62c:	mov	r1, #0
    c630:	mov	r0, r4
    c634:	bl	c428 <rb_accept_tryaccept>
    c638:	pop	{r4, r5, r6, r7, r8, pc}
    c63c:	bl	4988 <rb_outofmemory@plt>

0000c640 <rb_socketpair>:
    c640:	push	{r4, r5, r6, lr}
    c644:	sub	sp, sp, #8
    c648:	mov	r4, r3
    c64c:	ldr	r5, [sp, #24]
    c650:	ldr	r3, [pc, #340]	; c7ac <rb_socketpair+0x16c>
    c654:	add	r3, pc, r3
    c658:	ldr	ip, [pc, #336]	; c7b0 <rb_socketpair+0x170>
    c65c:	ldr	r3, [r3, ip]
    c660:	ldr	ip, [pc, #332]	; c7b4 <rb_socketpair+0x174>
    c664:	add	ip, pc, ip
    c668:	ldr	ip, [ip, #96]	; 0x60
    c66c:	ldr	r3, [r3]
    c670:	cmp	ip, r3
    c674:	bge	c6f0 <rb_socketpair+0xb0>
    c678:	mov	r3, sp
    c67c:	bl	4568 <socketpair@plt>
    c680:	subs	r6, r0, #0
    c684:	bne	c7a4 <rb_socketpair+0x164>
    c688:	ldr	r2, [sp, #28]
    c68c:	mov	r1, #4
    c690:	ldr	r0, [sp]
    c694:	bl	4a84 <rb_open@plt>
    c698:	str	r0, [r4]
    c69c:	ldr	r2, [sp, #28]
    c6a0:	mov	r1, #4
    c6a4:	ldr	r0, [sp, #4]
    c6a8:	bl	4a84 <rb_open@plt>
    c6ac:	str	r0, [r5]
    c6b0:	ldr	r3, [r4]
    c6b4:	cmp	r3, #0
    c6b8:	beq	c704 <rb_socketpair+0xc4>
    c6bc:	cmp	r0, #0
    c6c0:	beq	c71c <rb_socketpair+0xdc>
    c6c4:	mov	r0, r3
    c6c8:	bl	461c <rb_set_nb@plt>
    c6cc:	cmp	r0, #0
    c6d0:	beq	c72c <rb_socketpair+0xec>
    c6d4:	ldr	r0, [r5]
    c6d8:	bl	461c <rb_set_nb@plt>
    c6dc:	cmp	r0, #0
    c6e0:	beq	c768 <rb_socketpair+0x128>
    c6e4:	mov	r0, r6
    c6e8:	add	sp, sp, #8
    c6ec:	pop	{r4, r5, r6, pc}
    c6f0:	bl	4ce8 <__errno_location@plt>
    c6f4:	mov	r3, #23
    c6f8:	str	r3, [r0]
    c6fc:	mvn	r6, #0
    c700:	b	c6e4 <rb_socketpair+0xa4>
    c704:	cmp	r0, #0
    c708:	mvneq	r6, #0
    c70c:	beq	c6e4 <rb_socketpair+0xa4>
    c710:	bl	4868 <rb_close@plt>
    c714:	mvn	r6, #0
    c718:	b	c6e4 <rb_socketpair+0xa4>
    c71c:	mov	r0, r3
    c720:	bl	4868 <rb_close@plt>
    c724:	mvn	r6, #0
    c728:	b	c6e4 <rb_socketpair+0xa4>
    c72c:	ldr	r6, [sp]
    c730:	bl	4ce8 <__errno_location@plt>
    c734:	ldr	r0, [r0]
    c738:	bl	43a0 <strerror@plt>
    c73c:	mov	r2, r0
    c740:	mov	r1, r6
    c744:	ldr	r0, [pc, #108]	; c7b8 <rb_socketpair+0x178>
    c748:	add	r0, pc, r0
    c74c:	bl	491c <rb_lib_log@plt>
    c750:	ldr	r0, [r4]
    c754:	bl	4868 <rb_close@plt>
    c758:	ldr	r0, [r5]
    c75c:	bl	4868 <rb_close@plt>
    c760:	mvn	r6, #0
    c764:	b	c6e4 <rb_socketpair+0xa4>
    c768:	ldr	r6, [sp, #4]
    c76c:	bl	4ce8 <__errno_location@plt>
    c770:	ldr	r0, [r0]
    c774:	bl	43a0 <strerror@plt>
    c778:	mov	r2, r0
    c77c:	mov	r1, r6
    c780:	ldr	r0, [pc, #52]	; c7bc <rb_socketpair+0x17c>
    c784:	add	r0, pc, r0
    c788:	bl	491c <rb_lib_log@plt>
    c78c:	ldr	r0, [r4]
    c790:	bl	4868 <rb_close@plt>
    c794:	ldr	r0, [r5]
    c798:	bl	4868 <rb_close@plt>
    c79c:	mvn	r6, #0
    c7a0:	b	c6e4 <rb_socketpair+0xa4>
    c7a4:	mvn	r6, #0
    c7a8:	b	c6e4 <rb_socketpair+0xa4>
    c7ac:	.word	0x0001b9a4
    c7b0:	.word	0x000003a0
    c7b4:	.word	0x0002e33c
    c7b8:	.word	0x00009a18
    c7bc:	.word	0x000099dc

0000c7c0 <rb_pipe>:
    c7c0:	push	{r4, r5, r6, lr}
    c7c4:	sub	sp, sp, #8
    c7c8:	mov	r6, r2
    c7cc:	ldr	r3, [pc, #280]	; c8ec <rb_pipe+0x12c>
    c7d0:	add	r3, pc, r3
    c7d4:	ldr	r2, [pc, #276]	; c8f0 <rb_pipe+0x130>
    c7d8:	ldr	r3, [r3, r2]
    c7dc:	ldr	r2, [pc, #272]	; c8f4 <rb_pipe+0x134>
    c7e0:	add	r2, pc, r2
    c7e4:	ldr	r2, [r2, #96]	; 0x60
    c7e8:	ldr	r3, [r3]
    c7ec:	cmp	r2, r3
    c7f0:	bge	c860 <rb_pipe+0xa0>
    c7f4:	mov	r4, r0
    c7f8:	mov	r5, r1
    c7fc:	mov	r0, sp
    c800:	bl	4c88 <pipe@plt>
    c804:	cmn	r0, #1
    c808:	beq	c858 <rb_pipe+0x98>
    c80c:	mov	r2, r6
    c810:	mov	r1, #8
    c814:	ldr	r0, [sp]
    c818:	bl	4a84 <rb_open@plt>
    c81c:	str	r0, [r4]
    c820:	mov	r2, r6
    c824:	mov	r1, #8
    c828:	ldr	r0, [sp, #4]
    c82c:	bl	4a84 <rb_open@plt>
    c830:	str	r0, [r5]
    c834:	ldr	r0, [r4]
    c838:	bl	461c <rb_set_nb@plt>
    c83c:	cmp	r0, #0
    c840:	beq	c874 <rb_pipe+0xb4>
    c844:	ldr	r0, [r5]
    c848:	bl	461c <rb_set_nb@plt>
    c84c:	cmp	r0, #0
    c850:	movne	r0, #0
    c854:	beq	c8b0 <rb_pipe+0xf0>
    c858:	add	sp, sp, #8
    c85c:	pop	{r4, r5, r6, pc}
    c860:	bl	4ce8 <__errno_location@plt>
    c864:	mov	r3, #23
    c868:	str	r3, [r0]
    c86c:	mvn	r0, #0
    c870:	b	c858 <rb_pipe+0x98>
    c874:	ldr	r6, [sp]
    c878:	bl	4ce8 <__errno_location@plt>
    c87c:	ldr	r0, [r0]
    c880:	bl	43a0 <strerror@plt>
    c884:	mov	r2, r0
    c888:	mov	r1, r6
    c88c:	ldr	r0, [pc, #100]	; c8f8 <rb_pipe+0x138>
    c890:	add	r0, pc, r0
    c894:	bl	491c <rb_lib_log@plt>
    c898:	ldr	r0, [r4]
    c89c:	bl	4868 <rb_close@plt>
    c8a0:	ldr	r0, [r5]
    c8a4:	bl	4868 <rb_close@plt>
    c8a8:	mvn	r0, #0
    c8ac:	b	c858 <rb_pipe+0x98>
    c8b0:	ldr	r6, [sp, #4]
    c8b4:	bl	4ce8 <__errno_location@plt>
    c8b8:	ldr	r0, [r0]
    c8bc:	bl	43a0 <strerror@plt>
    c8c0:	mov	r2, r0
    c8c4:	mov	r1, r6
    c8c8:	ldr	r0, [pc, #44]	; c8fc <rb_pipe+0x13c>
    c8cc:	add	r0, pc, r0
    c8d0:	bl	491c <rb_lib_log@plt>
    c8d4:	ldr	r0, [r4]
    c8d8:	bl	4868 <rb_close@plt>
    c8dc:	ldr	r0, [r5]
    c8e0:	bl	4868 <rb_close@plt>
    c8e4:	mvn	r0, #0
    c8e8:	b	c858 <rb_pipe+0x98>
    c8ec:	.word	0x0001b828
    c8f0:	.word	0x000003a0
    c8f4:	.word	0x0002e1c0
    c8f8:	.word	0x000098d0
    c8fc:	.word	0x00009894

0000c900 <rb_socket>:
    c900:	push	{r4, r5, r6, lr}
    c904:	sub	sp, sp, #16
    c908:	mov	r4, r0
    c90c:	mov	r6, r3
    c910:	ldr	r3, [pc, #328]	; ca60 <rb_socket+0x160>
    c914:	add	r3, pc, r3
    c918:	ldr	r0, [pc, #324]	; ca64 <rb_socket+0x164>
    c91c:	ldr	r3, [r3, r0]
    c920:	ldr	r0, [pc, #320]	; ca68 <rb_socket+0x168>
    c924:	add	r0, pc, r0
    c928:	ldr	r0, [r0, #96]	; 0x60
    c92c:	ldr	r3, [r3]
    c930:	cmp	r0, r3
    c934:	bge	c984 <rb_socket+0x84>
    c938:	mov	r0, r4
    c93c:	bl	4790 <socket@plt>
    c940:	subs	r5, r0, #0
    c944:	blt	ca58 <rb_socket+0x158>
    c948:	cmp	r4, #10
    c94c:	beq	c998 <rb_socket+0x98>
    c950:	mov	r2, r6
    c954:	mov	r1, #4
    c958:	mov	r0, r5
    c95c:	bl	4a84 <rb_open@plt>
    c960:	subs	r4, r0, #0
    c964:	beq	c9fc <rb_socket+0xfc>
    c968:	mov	r0, r4
    c96c:	bl	461c <rb_set_nb@plt>
    c970:	cmp	r0, #0
    c974:	beq	ca28 <rb_socket+0x128>
    c978:	mov	r0, r4
    c97c:	add	sp, sp, #16
    c980:	pop	{r4, r5, r6, pc}
    c984:	bl	4ce8 <__errno_location@plt>
    c988:	mov	r3, #23
    c98c:	str	r3, [r0]
    c990:	mov	r4, #0
    c994:	b	c978 <rb_socket+0x78>
    c998:	add	r3, sp, #16
    c99c:	mov	r2, #1
    c9a0:	str	r2, [r3, #-4]!
    c9a4:	mov	r2, #4
    c9a8:	str	r2, [sp]
    c9ac:	mov	r2, #26
    c9b0:	mov	r1, #41	; 0x29
    c9b4:	mov	r0, r5
    c9b8:	bl	4ca0 <setsockopt@plt>
    c9bc:	cmn	r0, #1
    c9c0:	bne	c950 <rb_socket+0x50>
    c9c4:	ldr	r4, [sp, #12]
    c9c8:	bl	4ce8 <__errno_location@plt>
    c9cc:	ldr	r0, [r0]
    c9d0:	bl	43a0 <strerror@plt>
    c9d4:	mov	r3, r0
    c9d8:	mov	r2, r5
    c9dc:	mov	r1, r4
    c9e0:	ldr	r0, [pc, #132]	; ca6c <rb_socket+0x16c>
    c9e4:	add	r0, pc, r0
    c9e8:	bl	491c <rb_lib_log@plt>
    c9ec:	mov	r0, r5
    c9f0:	bl	4940 <close@plt>
    c9f4:	mov	r4, #0
    c9f8:	b	c978 <rb_socket+0x78>
    c9fc:	bl	4ce8 <__errno_location@plt>
    ca00:	ldr	r0, [r0]
    ca04:	bl	43a0 <strerror@plt>
    ca08:	mov	r2, r0
    ca0c:	mov	r1, r5
    ca10:	ldr	r0, [pc, #88]	; ca70 <rb_socket+0x170>
    ca14:	add	r0, pc, r0
    ca18:	bl	491c <rb_lib_log@plt>
    ca1c:	mov	r0, r5
    ca20:	bl	4940 <close@plt>
    ca24:	b	c978 <rb_socket+0x78>
    ca28:	bl	4ce8 <__errno_location@plt>
    ca2c:	ldr	r0, [r0]
    ca30:	bl	43a0 <strerror@plt>
    ca34:	mov	r2, r0
    ca38:	mov	r1, r5
    ca3c:	ldr	r0, [pc, #48]	; ca74 <rb_socket+0x174>
    ca40:	add	r0, pc, r0
    ca44:	bl	491c <rb_lib_log@plt>
    ca48:	mov	r0, r4
    ca4c:	bl	4868 <rb_close@plt>
    ca50:	mov	r4, #0
    ca54:	b	c978 <rb_socket+0x78>
    ca58:	mov	r4, #0
    ca5c:	b	c978 <rb_socket+0x78>
    ca60:	.word	0x0001b6e4
    ca64:	.word	0x000003a0
    ca68:	.word	0x0002e07c
    ca6c:	.word	0x000097ac
    ca70:	.word	0x000097bc
    ca74:	.word	0x00009720

0000ca78 <rb_ignore_errno>:
    ca78:	cmp	r0, #85	; 0x55
    ca7c:	beq	caac <rb_ignore_errno+0x34>
    ca80:	bgt	ca9c <rb_ignore_errno+0x24>
    ca84:	cmp	r0, #4
    ca88:	beq	caac <rb_ignore_errno+0x34>
    ca8c:	cmp	r0, #11
    ca90:	beq	caac <rb_ignore_errno+0x34>
    ca94:	mov	r0, #0
    ca98:	bx	lr
    ca9c:	cmp	r0, #105	; 0x69
    caa0:	beq	caac <rb_ignore_errno+0x34>
    caa4:	cmp	r0, #115	; 0x73
    caa8:	bne	ca94 <rb_ignore_errno+0x1c>
    caac:	mov	r0, #1
    cab0:	bx	lr

0000cab4 <rb_connect_tcp>:
    cab4:	push	{r4, r5, r6, r7, r8, lr}
    cab8:	subs	r4, r0, #0
    cabc:	popeq	{r4, r5, r6, r7, r8, pc}
    cac0:	mov	r7, r3
    cac4:	mov	r5, r2
    cac8:	mov	r6, r1
    cacc:	mov	r1, #268	; 0x10c
    cad0:	mov	r0, #1
    cad4:	bl	45ec <calloc@plt>
    cad8:	cmp	r0, #0
    cadc:	beq	cb7c <rb_connect_tcp+0xc8>
    cae0:	str	r0, [r4, #48]	; 0x30
    cae4:	str	r7, [r0, #260]	; 0x104
    cae8:	ldr	r3, [sp, #24]
    caec:	str	r3, [r0, #264]	; 0x108
    caf0:	mov	r2, #128	; 0x80
    caf4:	mov	r1, r6
    caf8:	add	r0, r0, r2
    cafc:	bl	4808 <memcpy@plt>
    cb00:	cmp	r5, #0
    cb04:	beq	cb2c <rb_connect_tcp+0x78>
    cb08:	ldrh	r2, [r5]
    cb0c:	cmp	r2, #2
    cb10:	moveq	r2, #16
    cb14:	movne	r2, #28
    cb18:	mov	r1, r5
    cb1c:	ldr	r0, [r4, #12]
    cb20:	bl	4910 <bind@plt>
    cb24:	cmp	r0, #0
    cb28:	blt	cb80 <rb_connect_tcp+0xcc>
    cb2c:	mov	r3, #0
    cb30:	ldr	r2, [pc, #176]	; cbe8 <rb_connect_tcp+0x134>
    cb34:	add	r2, pc, r2
    cb38:	ldr	r1, [sp, #28]
    cb3c:	mov	r0, r4
    cb40:	bl	43e8 <rb_settimeout@plt>
    cb44:	ldr	r1, [r4, #48]	; 0x30
    cb48:	ldrh	r2, [r1, #128]	; 0x80
    cb4c:	cmp	r2, #2
    cb50:	moveq	r2, #16
    cb54:	movne	r2, #28
    cb58:	add	r1, r1, #128	; 0x80
    cb5c:	ldr	r0, [r4, #12]
    cb60:	bl	43d0 <connect@plt>
    cb64:	cmp	r0, #0
    cb68:	blt	cb90 <rb_connect_tcp+0xdc>
    cb6c:	mov	r1, #0
    cb70:	mov	r0, r4
    cb74:	bl	b02c <rb_connect_callback>
    cb78:	pop	{r4, r5, r6, r7, r8, pc}
    cb7c:	bl	4988 <rb_outofmemory@plt>
    cb80:	mov	r1, #1
    cb84:	mov	r0, r4
    cb88:	bl	b02c <rb_connect_callback>
    cb8c:	pop	{r4, r5, r6, r7, r8, pc}
    cb90:	bl	4ce8 <__errno_location@plt>
    cb94:	ldr	r0, [r0]
    cb98:	cmp	r0, #106	; 0x6a
    cb9c:	beq	cbc8 <rb_connect_tcp+0x114>
    cba0:	bl	43dc <rb_ignore_errno@plt>
    cba4:	cmp	r0, #0
    cba8:	beq	cbd8 <rb_connect_tcp+0x124>
    cbac:	mov	r3, #0
    cbb0:	ldr	r2, [pc, #52]	; cbec <rb_connect_tcp+0x138>
    cbb4:	add	r2, pc, r2
    cbb8:	mov	r1, #2
    cbbc:	mov	r0, r4
    cbc0:	bl	44a8 <rb_setselect@plt>
    cbc4:	pop	{r4, r5, r6, r7, r8, pc}
    cbc8:	mov	r1, #0
    cbcc:	mov	r0, r4
    cbd0:	bl	b02c <rb_connect_callback>
    cbd4:	pop	{r4, r5, r6, r7, r8, pc}
    cbd8:	mov	r1, #4
    cbdc:	mov	r0, r4
    cbe0:	bl	b02c <rb_connect_callback>
    cbe4:	pop	{r4, r5, r6, r7, r8, pc}
    cbe8:	.word	0xffffe5f0
    cbec:	.word	0xffffe4dc

0000cbf0 <rb_recv_fd_buf>:
    cbf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbf4:	add	fp, sp, #32
    cbf8:	sub	sp, sp, #156	; 0x9c
    cbfc:	mov	r6, r3
    cc00:	ldr	r5, [fp, #4]
    cc04:	lsl	r3, r5, #2
    cc08:	add	ip, r3, #12
    cc0c:	str	r1, [fp, #-72]	; 0xffffffb8
    cc10:	str	r2, [fp, #-68]	; 0xffffffbc
    cc14:	mov	r4, #0
    cc18:	str	r4, [fp, #-64]	; 0xffffffc0
    cc1c:	str	r4, [fp, #-60]	; 0xffffffc4
    cc20:	sub	r2, fp, #72	; 0x48
    cc24:	str	r2, [fp, #-56]	; 0xffffffc8
    cc28:	mov	r2, #1
    cc2c:	str	r2, [fp, #-52]	; 0xffffffcc
    cc30:	str	r4, [fp, #-40]	; 0xffffffd8
    cc34:	add	r3, r3, #26
    cc38:	bic	r3, r3, #7
    cc3c:	sub	sp, sp, r3
    cc40:	str	sp, [fp, #-48]	; 0xffffffd0
    cc44:	str	ip, [fp, #-44]	; 0xffffffd4
    cc48:	bl	44e4 <rb_get_fd@plt>
    cc4c:	mov	r2, r4
    cc50:	sub	r1, fp, #64	; 0x40
    cc54:	bl	4b38 <recvmsg@plt>
    cc58:	subs	sl, r0, #0
    cc5c:	ble	cc88 <rb_recv_fd_buf+0x98>
    cc60:	ldr	r3, [fp, #-44]	; 0xffffffd4
    cc64:	cmp	r3, r4
    cc68:	beq	cc80 <rb_recv_fd_buf+0x90>
    cc6c:	ldr	r7, [fp, #-48]	; 0xffffffd0
    cc70:	cmp	r7, r4
    cc74:	beq	cc80 <rb_recv_fd_buf+0x90>
    cc78:	cmp	r3, #11
    cc7c:	bhi	cd20 <rb_recv_fd_buf+0x130>
    cc80:	mov	r3, #0
    cc84:	str	r3, [r6]
    cc88:	mov	r0, sl
    cc8c:	sub	sp, fp, #32
    cc90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc94:	ldr	r2, [fp, #-184]	; 0xffffff48
    cc98:	mov	r1, #2
    cc9c:	b	cca8 <rb_recv_fd_buf+0xb8>
    cca0:	ldr	r2, [fp, #-168]	; 0xffffff58
    cca4:	mov	r1, #64	; 0x40
    cca8:	mov	r0, r5
    ccac:	bl	4a84 <rb_open@plt>
    ccb0:	str	r0, [r6, #4]!
    ccb4:	add	r4, r4, #1
    ccb8:	cmp	r4, r8
    ccbc:	beq	cc88 <rb_recv_fd_buf+0x98>
    ccc0:	ldr	r5, [r7, #4]!
    ccc4:	mov	r2, r9
    ccc8:	mov	r1, r5
    cccc:	mov	r0, #3
    ccd0:	bl	4b5c <__fxstat@plt>
    ccd4:	cmp	r0, #0
    ccd8:	bne	cca0 <rb_recv_fd_buf+0xb0>
    ccdc:	ldr	r3, [fp, #-148]	; 0xffffff6c
    cce0:	and	r3, r3, #61440	; 0xf000
    cce4:	cmp	r3, #49152	; 0xc000
    cce8:	beq	cd08 <rb_recv_fd_buf+0x118>
    ccec:	cmp	r3, #4096	; 0x1000
    ccf0:	beq	cd14 <rb_recv_fd_buf+0x124>
    ccf4:	cmp	r3, #32768	; 0x8000
    ccf8:	beq	cc94 <rb_recv_fd_buf+0xa4>
    ccfc:	ldr	r2, [fp, #-172]	; 0xffffff54
    cd00:	mov	r1, #64	; 0x40
    cd04:	b	cca8 <rb_recv_fd_buf+0xb8>
    cd08:	ldr	r2, [fp, #-176]	; 0xffffff50
    cd0c:	mov	r1, #4
    cd10:	b	cca8 <rb_recv_fd_buf+0xb8>
    cd14:	ldr	r2, [fp, #-180]	; 0xffffff4c
    cd18:	mov	r1, #8
    cd1c:	b	cca8 <rb_recv_fd_buf+0xb8>
    cd20:	ldr	r8, [r7]
    cd24:	sub	r8, r8, #12
    cd28:	lsr	r8, r8, #2
    cd2c:	cmp	r8, r5
    cd30:	movge	r8, r5
    cd34:	cmp	r8, #0
    cd38:	ble	cc88 <rb_recv_fd_buf+0x98>
    cd3c:	add	r7, r7, #8
    cd40:	sub	r6, r6, #4
    cd44:	mov	r4, #0
    cd48:	sub	r9, fp, #164	; 0xa4
    cd4c:	ldr	r3, [pc, #56]	; cd8c <rb_recv_fd_buf+0x19c>
    cd50:	add	r3, pc, r3
    cd54:	str	r3, [fp, #-168]	; 0xffffff58
    cd58:	ldr	r3, [pc, #48]	; cd90 <rb_recv_fd_buf+0x1a0>
    cd5c:	add	r3, pc, r3
    cd60:	str	r3, [fp, #-176]	; 0xffffff50
    cd64:	ldr	r3, [pc, #40]	; cd94 <rb_recv_fd_buf+0x1a4>
    cd68:	add	r3, pc, r3
    cd6c:	str	r3, [fp, #-180]	; 0xffffff4c
    cd70:	ldr	r3, [pc, #32]	; cd98 <rb_recv_fd_buf+0x1a8>
    cd74:	add	r3, pc, r3
    cd78:	str	r3, [fp, #-172]	; 0xffffff54
    cd7c:	ldr	r3, [pc, #24]	; cd9c <rb_recv_fd_buf+0x1ac>
    cd80:	add	r3, pc, r3
    cd84:	str	r3, [fp, #-184]	; 0xffffff48
    cd88:	b	ccc0 <rb_recv_fd_buf+0xd0>
    cd8c:	.word	0x000094bc
    cd90:	.word	0x000094c0
    cd94:	.word	0x000094c4
    cd98:	.word	0x00009498
    cd9c:	.word	0x000094b8

0000cda0 <rb_send_fd_buf>:
    cda0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cda4:	add	fp, sp, #32
    cda8:	sub	sp, sp, #44	; 0x2c
    cdac:	mov	r8, r0
    cdb0:	ldr	r0, [fp, #4]
    cdb4:	mov	ip, #48	; 0x30
    cdb8:	strb	ip, [fp, #-73]	; 0xffffffb7
    cdbc:	cmp	r0, #0
    cdc0:	subeq	r3, fp, #73	; 0x49
    cdc4:	streq	r3, [fp, #-72]	; 0xffffffb8
    cdc8:	moveq	r3, #1
    cdcc:	streq	r3, [fp, #-68]	; 0xffffffbc
    cdd0:	strne	r3, [fp, #-72]	; 0xffffffb8
    cdd4:	strne	r0, [fp, #-68]	; 0xffffffbc
    cdd8:	sub	r3, fp, #72	; 0x48
    cddc:	str	r3, [fp, #-56]	; 0xffffffc8
    cde0:	mov	r3, #1
    cde4:	str	r3, [fp, #-52]	; 0xffffffcc
    cde8:	mov	r3, #0
    cdec:	str	r3, [fp, #-64]	; 0xffffffc0
    cdf0:	str	r3, [fp, #-60]	; 0xffffffc4
    cdf4:	str	r3, [fp, #-40]	; 0xffffffd8
    cdf8:	str	r3, [fp, #-48]	; 0xffffffd0
    cdfc:	str	r3, [fp, #-44]	; 0xffffffd4
    ce00:	cmp	r2, r3
    ce04:	ble	cea8 <rb_send_fd_buf+0x108>
    ce08:	mov	r9, sp
    ce0c:	mov	r6, r2
    ce10:	add	r3, r2, #1
    ce14:	lsl	r3, r3, #2
    ce18:	add	r7, r3, #8
    ce1c:	add	r0, r3, #15
    ce20:	bic	r0, r0, #7
    ce24:	sub	sp, sp, r0
    ce28:	str	sp, [fp, #-48]	; 0xffffffd0
    ce2c:	str	r7, [fp, #-44]	; 0xffffffd4
    ce30:	mov	r0, sp
    ce34:	cmp	r7, #11
    ce38:	movls	r0, #0
    ce3c:	mov	r7, r0
    ce40:	mov	r0, #1
    ce44:	str	r0, [r7, #4]
    ce48:	str	r0, [r7, #8]
    ce4c:	add	r3, r3, #8
    ce50:	str	r3, [r7]
    ce54:	cmp	r2, #0
    ce58:	beq	ce80 <rb_send_fd_buf+0xe0>
    ce5c:	sub	r5, r1, #4
    ce60:	add	sl, r7, #8
    ce64:	mov	r4, #0
    ce68:	ldr	r0, [r5, #4]!
    ce6c:	bl	44e4 <rb_get_fd@plt>
    ce70:	str	r0, [sl, #4]!
    ce74:	add	r4, r4, #1
    ce78:	cmp	r6, r4
    ce7c:	bne	ce68 <rb_send_fd_buf+0xc8>
    ce80:	ldr	r3, [r7]
    ce84:	str	r3, [fp, #-44]	; 0xffffffd4
    ce88:	mov	r0, r8
    ce8c:	bl	44e4 <rb_get_fd@plt>
    ce90:	mov	r2, #16384	; 0x4000
    ce94:	sub	r1, fp, #64	; 0x40
    ce98:	bl	4700 <sendmsg@plt>
    ce9c:	mov	sp, r9
    cea0:	sub	sp, fp, #32
    cea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cea8:	mov	r0, r8
    ceac:	bl	44e4 <rb_get_fd@plt>
    ceb0:	mov	r2, #16384	; 0x4000
    ceb4:	sub	r1, fp, #64	; 0x40
    ceb8:	bl	4700 <sendmsg@plt>
    cebc:	b	cea0 <rb_send_fd_buf+0x100>

0000cec0 <rb_ipv4_from_ipv6>:
    cec0:	push	{r4, r5, r6, lr}
    cec4:	mov	r4, r0
    cec8:	mov	r5, r1
    cecc:	add	r6, r0, #8
    ced0:	mov	r2, #2
    ced4:	ldr	r1, [pc, #120]	; cf54 <rb_ipv4_from_ipv6+0x94>
    ced8:	add	r1, pc, r1
    cedc:	mov	r0, r6
    cee0:	bl	4454 <memcmp@plt>
    cee4:	cmp	r0, #0
    cee8:	ldreq	r3, [r4, #10]
    ceec:	streq	r3, [r5, #4]
    cef0:	beq	cf34 <rb_ipv4_from_ipv6+0x74>
    cef4:	mov	r2, #4
    cef8:	ldr	r1, [pc, #88]	; cf58 <rb_ipv4_from_ipv6+0x98>
    cefc:	add	r1, pc, r1
    cf00:	add	r1, r1, #20
    cf04:	mov	r0, r6
    cf08:	bl	4454 <memcmp@plt>
    cf0c:	cmp	r0, #0
    cf10:	bne	cf4c <rb_ipv4_from_ipv6+0x8c>
    cf14:	add	r4, r4, #20
    cf18:	add	r2, r5, #3
    cf1c:	add	r1, r5, #7
    cf20:	ldrb	r3, [r4], #1
    cf24:	mvn	r3, r3
    cf28:	strb	r3, [r2, #1]!
    cf2c:	cmp	r2, r1
    cf30:	bne	cf20 <rb_ipv4_from_ipv6+0x60>
    cf34:	mov	r3, #2
    cf38:	strh	r3, [r5]
    cf3c:	mov	r3, #0
    cf40:	strh	r3, [r5, #2]
    cf44:	mov	r0, #1
    cf48:	pop	{r4, r5, r6, pc}
    cf4c:	mov	r0, #0
    cf50:	pop	{r4, r5, r6, pc}
    cf54:	.word	0x0000936c
    cf58:	.word	0x00009068

0000cf5c <verify_accept_all_cb>:
    cf5c:	mov	r0, #1
    cf60:	bx	lr

0000cf64 <rb_ssl_timeout_cb>:
    cf64:	push	{r4, lr}
    cf68:	sub	sp, sp, #8
    cf6c:	ldr	r3, [r0, #52]	; 0x34
    cf70:	ldr	r2, [r3, #140]	; 0x8c
    cf74:	str	r2, [sp]
    cf78:	ldr	r4, [r3, #132]	; 0x84
    cf7c:	mov	r3, #0
    cf80:	mov	r2, r3
    cf84:	mov	r1, #3
    cf88:	blx	r4
    cf8c:	add	sp, sp, #8
    cf90:	pop	{r4, pc}

0000cf94 <rb_ssl_last_err>:
    cf94:	push	{r4, lr}
    cf98:	mov	r4, #0
    cf9c:	b	cfa4 <rb_ssl_last_err+0x10>
    cfa0:	mov	r4, r0
    cfa4:	bl	4400 <ERR_get_error@plt>
    cfa8:	cmp	r0, #0
    cfac:	bne	cfa0 <rb_ssl_last_err+0xc>
    cfb0:	mov	r0, r4
    cfb4:	pop	{r4, pc}

0000cfb8 <rb_ssl_strerror>:
    cfb8:	push	{r4, lr}
    cfbc:	ldr	r4, [pc, #20]	; cfd8 <rb_ssl_strerror+0x20>
    cfc0:	add	r4, pc, r4
    cfc4:	mov	r2, #512	; 0x200
    cfc8:	mov	r1, r4
    cfcc:	bl	45a4 <ERR_error_string_n@plt>
    cfd0:	mov	r0, r4
    cfd4:	pop	{r4, pc}
    cfd8:	.word	0x0002da54

0000cfdc <make_certfp>:
    cfdc:	push	{r4, r5, r6, r7, lr}
    cfe0:	sub	sp, sp, #20
    cfe4:	mov	r4, r0
    cfe8:	mov	r6, r1
    cfec:	ldr	r5, [pc, #312]	; d12c <make_certfp+0x150>
    cff0:	add	r5, pc, r5
    cff4:	cmp	r2, #2
    cff8:	beq	d0b4 <make_certfp+0xd8>
    cffc:	bgt	d030 <make_certfp+0x54>
    d000:	cmp	r2, #0
    d004:	beq	d070 <make_certfp+0x94>
    d008:	cmp	r2, #1
    d00c:	bne	d124 <make_certfp+0x148>
    d010:	mov	r3, #32
    d014:	str	r3, [sp, #12]
    d018:	bl	4bd4 <EVP_sha256@plt>
    d01c:	mov	r7, r0
    d020:	mov	r2, r4
    d024:	ldr	r3, [pc, #260]	; d130 <make_certfp+0x154>
    d028:	ldr	r0, [r5, r3]
    d02c:	b	d08c <make_certfp+0xb0>
    d030:	ldr	r3, [pc, #252]	; d134 <make_certfp+0x158>
    d034:	cmp	r2, r3
    d038:	beq	d0d4 <make_certfp+0xf8>
    d03c:	add	r3, r3, #1
    d040:	cmp	r2, r3
    d044:	bne	d124 <make_certfp+0x148>
    d048:	mov	r3, #64	; 0x40
    d04c:	str	r3, [sp, #12]
    d050:	bl	4ba4 <EVP_sha512@plt>
    d054:	mov	r7, r0
    d058:	mov	r0, r4
    d05c:	bl	4538 <X509_get_X509_PUBKEY@plt>
    d060:	mov	r2, r0
    d064:	ldr	r3, [pc, #204]	; d138 <make_certfp+0x15c>
    d068:	ldr	r0, [r5, r3]
    d06c:	b	d08c <make_certfp+0xb0>
    d070:	mov	r3, #20
    d074:	str	r3, [sp, #12]
    d078:	bl	48ec <EVP_sha1@plt>
    d07c:	mov	r7, r0
    d080:	mov	r2, r4
    d084:	ldr	r3, [pc, #164]	; d130 <make_certfp+0x154>
    d088:	ldr	r0, [r5, r3]
    d08c:	add	r3, sp, #12
    d090:	str	r3, [sp]
    d094:	mov	r3, r6
    d098:	mov	r1, r7
    d09c:	bl	4a0c <ASN1_item_digest@plt>
    d0a0:	cmp	r0, #1
    d0a4:	bne	d0fc <make_certfp+0x120>
    d0a8:	ldr	r0, [sp, #12]
    d0ac:	add	sp, sp, #20
    d0b0:	pop	{r4, r5, r6, r7, pc}
    d0b4:	mov	r3, #64	; 0x40
    d0b8:	str	r3, [sp, #12]
    d0bc:	bl	4ba4 <EVP_sha512@plt>
    d0c0:	mov	r7, r0
    d0c4:	mov	r2, r4
    d0c8:	ldr	r3, [pc, #96]	; d130 <make_certfp+0x154>
    d0cc:	ldr	r0, [r5, r3]
    d0d0:	b	d08c <make_certfp+0xb0>
    d0d4:	mov	r3, #32
    d0d8:	str	r3, [sp, #12]
    d0dc:	bl	4bd4 <EVP_sha256@plt>
    d0e0:	mov	r7, r0
    d0e4:	mov	r0, r4
    d0e8:	bl	4538 <X509_get_X509_PUBKEY@plt>
    d0ec:	mov	r2, r0
    d0f0:	ldr	r3, [pc, #64]	; d138 <make_certfp+0x15c>
    d0f4:	ldr	r0, [r5, r3]
    d0f8:	b	d08c <make_certfp+0xb0>
    d0fc:	bl	cf94 <rb_ssl_last_err>
    d100:	bl	cfb8 <rb_ssl_strerror>
    d104:	mov	r2, r0
    d108:	ldr	r1, [pc, #44]	; d13c <make_certfp+0x160>
    d10c:	add	r1, pc, r1
    d110:	ldr	r0, [pc, #40]	; d140 <make_certfp+0x164>
    d114:	add	r0, pc, r0
    d118:	bl	491c <rb_lib_log@plt>
    d11c:	mov	r0, #0
    d120:	b	d0ac <make_certfp+0xd0>
    d124:	mov	r0, #0
    d128:	b	d0ac <make_certfp+0xd0>
    d12c:	.word	0x0001b008
    d130:	.word	0x00000408
    d134:	.word	0x00001001
    d138:	.word	0x00000414
    d13c:	.word	0x000095b0
    d140:	.word	0x00009794

0000d144 <rb_ssl_read_or_write>:
    d144:	push	{r4, r5, r6, r7, r8, lr}
    d148:	mov	r5, r0
    d14c:	mov	r4, r1
    d150:	mov	r7, r2
    d154:	mov	r6, r3
    d158:	bl	cf94 <rb_ssl_last_err>
    d15c:	cmp	r5, #0
    d160:	bne	d1ac <rb_ssl_read_or_write+0x68>
    d164:	ldr	r2, [sp, #24]
    d168:	mov	r1, r7
    d16c:	ldr	r0, [r4, #56]	; 0x38
    d170:	bl	4778 <SSL_read@plt>
    d174:	cmp	r0, #0
    d178:	popge	{r4, r5, r6, r7, r8, pc}
    d17c:	mov	r1, r0
    d180:	ldr	r0, [r4, #56]	; 0x38
    d184:	bl	4cac <SSL_get_error@plt>
    d188:	sub	r0, r0, #2
    d18c:	cmp	r0, #4
    d190:	addls	pc, pc, r0, lsl #2
    d194:	b	d21c <rb_ssl_read_or_write+0xd8>
    d198:	b	d1c0 <rb_ssl_read_or_write+0x7c>
    d19c:	b	d1d4 <rb_ssl_read_or_write+0x90>
    d1a0:	b	d21c <rb_ssl_read_or_write+0xd8>
    d1a4:	b	d1e8 <rb_ssl_read_or_write+0xa4>
    d1a8:	b	d234 <rb_ssl_read_or_write+0xf0>
    d1ac:	ldr	r2, [sp, #24]
    d1b0:	mov	r1, r6
    d1b4:	ldr	r0, [r4, #56]	; 0x38
    d1b8:	bl	45f8 <SSL_write@plt>
    d1bc:	b	d174 <rb_ssl_read_or_write+0x30>
    d1c0:	bl	4ce8 <__errno_location@plt>
    d1c4:	mov	r3, #11
    d1c8:	str	r3, [r0]
    d1cc:	mvn	r0, #2
    d1d0:	pop	{r4, r5, r6, r7, r8, pc}
    d1d4:	bl	4ce8 <__errno_location@plt>
    d1d8:	mov	r3, #11
    d1dc:	str	r3, [r0]
    d1e0:	mvn	r0, #3
    d1e4:	pop	{r4, r5, r6, r7, r8, pc}
    d1e8:	bl	cf94 <rb_ssl_last_err>
    d1ec:	cmp	r0, #0
    d1f0:	strne	r0, [r4, #64]	; 0x40
    d1f4:	beq	d20c <rb_ssl_read_or_write+0xc8>
    d1f8:	bl	4ce8 <__errno_location@plt>
    d1fc:	mov	r3, #5
    d200:	str	r3, [r0]
    d204:	mvn	r0, #1
    d208:	pop	{r4, r5, r6, r7, r8, pc}
    d20c:	mov	r3, #0
    d210:	str	r3, [r4, #64]	; 0x40
    d214:	mvn	r0, #0
    d218:	pop	{r4, r5, r6, r7, r8, pc}
    d21c:	bl	cf94 <rb_ssl_last_err>
    d220:	str	r0, [r4, #64]	; 0x40
    d224:	cmp	r0, #0
    d228:	bne	d1f8 <rb_ssl_read_or_write+0xb4>
    d22c:	mvn	r0, #0
    d230:	pop	{r4, r5, r6, r7, r8, pc}
    d234:	mov	r0, #0
    d238:	pop	{r4, r5, r6, r7, r8, pc}

0000d23c <rb_ssl_init_fd>:
    d23c:	push	{r4, r5, r6, lr}
    d240:	mov	r4, r0
    d244:	mov	r5, r1
    d248:	bl	cf94 <rb_ssl_last_err>
    d24c:	ldr	r3, [pc, #128]	; d2d4 <rb_ssl_init_fd+0x98>
    d250:	add	r3, pc, r3
    d254:	ldr	r0, [r3, #512]	; 0x200
    d258:	bl	4730 <SSL_new@plt>
    d25c:	str	r0, [r4, #56]	; 0x38
    d260:	cmp	r0, #0
    d264:	beq	d294 <rb_ssl_init_fd+0x58>
    d268:	cmp	r5, #0
    d26c:	beq	d2c4 <rb_ssl_init_fd+0x88>
    d270:	cmp	r5, #1
    d274:	beq	d2cc <rb_ssl_init_fd+0x90>
    d278:	ldr	r5, [r4, #56]	; 0x38
    d27c:	mov	r0, r4
    d280:	bl	44e4 <rb_get_fd@plt>
    d284:	mov	r1, r0
    d288:	mov	r0, r5
    d28c:	bl	4664 <SSL_set_fd@plt>
    d290:	pop	{r4, r5, r6, pc}
    d294:	bl	cf94 <rb_ssl_last_err>
    d298:	bl	cfb8 <rb_ssl_strerror>
    d29c:	mov	r2, r0
    d2a0:	ldr	r1, [pc, #48]	; d2d8 <rb_ssl_init_fd+0x9c>
    d2a4:	add	r1, pc, r1
    d2a8:	add	r1, r1, #12
    d2ac:	ldr	r0, [pc, #40]	; d2dc <rb_ssl_init_fd+0xa0>
    d2b0:	add	r0, pc, r0
    d2b4:	bl	491c <rb_lib_log@plt>
    d2b8:	mov	r0, r4
    d2bc:	bl	4868 <rb_close@plt>
    d2c0:	pop	{r4, r5, r6, pc}
    d2c4:	bl	49d0 <SSL_set_accept_state@plt>
    d2c8:	b	d278 <rb_ssl_init_fd+0x3c>
    d2cc:	bl	4b68 <SSL_set_connect_state@plt>
    d2d0:	b	d278 <rb_ssl_init_fd+0x3c>
    d2d4:	.word	0x0002d7c4
    d2d8:	.word	0x00009418
    d2dc:	.word	0x00009614

0000d2e0 <rb_ssl_accept_common>:
    d2e0:	push	{r4, r5, r6, lr}
    d2e4:	sub	sp, sp, #8
    d2e8:	mov	r4, r0
    d2ec:	bl	cf94 <rb_ssl_last_err>
    d2f0:	ldr	r0, [r4, #56]	; 0x38
    d2f4:	bl	47c0 <SSL_do_handshake@plt>
    d2f8:	mov	r5, r0
    d2fc:	mov	r1, r0
    d300:	ldr	r0, [r4, #56]	; 0x38
    d304:	bl	4cac <SSL_get_error@plt>
    d308:	cmp	r5, #1
    d30c:	beq	d37c <rb_ssl_accept_common+0x9c>
    d310:	mov	r6, r0
    d314:	cmn	r5, #1
    d318:	movne	r3, #0
    d31c:	moveq	r3, #1
    d320:	cmp	r0, #2
    d324:	cmneq	r5, #1
    d328:	beq	d3ec <rb_ssl_accept_common+0x10c>
    d32c:	cmp	r0, #3
    d330:	movne	r3, #0
    d334:	andeq	r3, r3, #1
    d338:	cmp	r3, #0
    d33c:	bne	d408 <rb_ssl_accept_common+0x128>
    d340:	bl	4ce8 <__errno_location@plt>
    d344:	mov	r3, #5
    d348:	str	r3, [r0]
    d34c:	str	r6, [r4, #64]	; 0x40
    d350:	ldr	r3, [r4, #52]	; 0x34
    d354:	ldr	r2, [r3, #140]	; 0x8c
    d358:	str	r2, [sp]
    d35c:	ldr	r5, [r3, #132]	; 0x84
    d360:	mov	r3, #0
    d364:	mov	r2, r3
    d368:	mov	r1, #6
    d36c:	mov	r0, r4
    d370:	blx	r5
    d374:	add	sp, sp, #8
    d378:	pop	{r4, r5, r6, pc}
    d37c:	ldr	r3, [r4, #60]	; 0x3c
    d380:	add	r3, r3, #1
    d384:	str	r3, [r4, #60]	; 0x3c
    d388:	mov	r3, #0
    d38c:	mov	r2, r3
    d390:	mov	r1, r3
    d394:	mov	r0, r4
    d398:	bl	43e8 <rb_settimeout@plt>
    d39c:	mov	r3, #0
    d3a0:	mov	r2, r3
    d3a4:	mov	r1, #3
    d3a8:	mov	r0, r4
    d3ac:	bl	44a8 <rb_setselect@plt>
    d3b0:	ldr	r5, [r4, #52]	; 0x34
    d3b4:	mov	r1, #0
    d3b8:	str	r1, [r4, #52]	; 0x34
    d3bc:	ldr	r3, [r5, #128]	; 0x80
    d3c0:	ldr	r2, [r5, #140]	; 0x8c
    d3c4:	str	r2, [sp]
    d3c8:	ldr	r6, [r5, #132]	; 0x84
    d3cc:	mov	r2, r5
    d3d0:	mov	r0, r4
    d3d4:	blx	r6
    d3d8:	cmp	r5, #0
    d3dc:	beq	d374 <rb_ssl_accept_common+0x94>
    d3e0:	mov	r0, r5
    d3e4:	bl	46f4 <free@plt>
    d3e8:	b	d374 <rb_ssl_accept_common+0x94>
    d3ec:	mov	r3, #0
    d3f0:	ldr	r2, [pc, #44]	; d424 <rb_ssl_accept_common+0x144>
    d3f4:	add	r2, pc, r2
    d3f8:	mov	r1, #1
    d3fc:	mov	r0, r4
    d400:	bl	44a8 <rb_setselect@plt>
    d404:	b	d374 <rb_ssl_accept_common+0x94>
    d408:	mov	r3, #0
    d40c:	ldr	r2, [pc, #20]	; d428 <rb_ssl_accept_common+0x148>
    d410:	add	r2, pc, r2
    d414:	mov	r1, #2
    d418:	mov	r0, r4
    d41c:	bl	44a8 <rb_setselect@plt>
    d420:	b	d374 <rb_ssl_accept_common+0x94>
    d424:	.word	0xfffffee4
    d428:	.word	0xfffffec8

0000d42c <rb_ssl_connect_realcb>:
    d42c:	push	{r4, lr}
    d430:	mov	r4, r2
    d434:	ldr	r2, [r0, #48]	; 0x30
    d438:	ldr	ip, [r4]
    d43c:	str	ip, [r2, #260]	; 0x104
    d440:	ldr	r3, [r0, #48]	; 0x30
    d444:	ldr	r2, [r4, #4]
    d448:	str	r2, [r3, #264]	; 0x108
    d44c:	bl	b02c <rb_connect_callback>
    d450:	cmp	r4, #0
    d454:	popeq	{r4, pc}
    d458:	mov	r0, r4
    d45c:	bl	46f4 <free@plt>
    d460:	pop	{r4, pc}

0000d464 <rb_ssl_tryconn_timeout_cb>:
    d464:	push	{r4, lr}
    d468:	mov	r2, r1
    d46c:	mov	r1, #3
    d470:	bl	d42c <rb_ssl_connect_realcb>
    d474:	pop	{r4, pc}

0000d478 <rb_ssl_connect_common>:
    d478:	push	{r4, r5, r6, r7, r8, lr}
    d47c:	mov	r5, r0
    d480:	mov	r7, r1
    d484:	bl	cf94 <rb_ssl_last_err>
    d488:	ldr	r0, [r5, #56]	; 0x38
    d48c:	bl	47c0 <SSL_do_handshake@plt>
    d490:	mov	r4, r0
    d494:	mov	r1, r0
    d498:	ldr	r0, [r5, #56]	; 0x38
    d49c:	bl	4cac <SSL_get_error@plt>
    d4a0:	cmp	r4, #1
    d4a4:	beq	d4fc <rb_ssl_connect_common+0x84>
    d4a8:	mov	r6, r0
    d4ac:	cmn	r4, #1
    d4b0:	movne	r3, #0
    d4b4:	moveq	r3, #1
    d4b8:	cmp	r0, #2
    d4bc:	cmneq	r4, #1
    d4c0:	beq	d544 <rb_ssl_connect_common+0xcc>
    d4c4:	cmp	r0, #3
    d4c8:	movne	r3, #0
    d4cc:	andeq	r3, r3, #1
    d4d0:	cmp	r3, #0
    d4d4:	bne	d560 <rb_ssl_connect_common+0xe8>
    d4d8:	bl	4ce8 <__errno_location@plt>
    d4dc:	mov	r3, #5
    d4e0:	str	r3, [r0]
    d4e4:	str	r6, [r5, #64]	; 0x40
    d4e8:	mov	r2, r7
    d4ec:	mov	r1, #6
    d4f0:	mov	r0, r5
    d4f4:	bl	d42c <rb_ssl_connect_realcb>
    d4f8:	pop	{r4, r5, r6, r7, r8, pc}
    d4fc:	ldr	r3, [r5, #60]	; 0x3c
    d500:	add	r3, r3, #1
    d504:	str	r3, [r5, #60]	; 0x3c
    d508:	mov	r3, #0
    d50c:	mov	r2, r3
    d510:	mov	r1, r3
    d514:	mov	r0, r5
    d518:	bl	43e8 <rb_settimeout@plt>
    d51c:	mov	r3, #0
    d520:	mov	r2, r3
    d524:	mov	r1, #3
    d528:	mov	r0, r5
    d52c:	bl	44a8 <rb_setselect@plt>
    d530:	mov	r2, r7
    d534:	mov	r1, #0
    d538:	mov	r0, r5
    d53c:	bl	d42c <rb_ssl_connect_realcb>
    d540:	pop	{r4, r5, r6, r7, r8, pc}
    d544:	mov	r3, r7
    d548:	ldr	r2, [pc, #44]	; d57c <rb_ssl_connect_common+0x104>
    d54c:	add	r2, pc, r2
    d550:	mov	r1, #1
    d554:	mov	r0, r5
    d558:	bl	44a8 <rb_setselect@plt>
    d55c:	pop	{r4, r5, r6, r7, r8, pc}
    d560:	mov	r3, r7
    d564:	ldr	r2, [pc, #20]	; d580 <rb_ssl_connect_common+0x108>
    d568:	add	r2, pc, r2
    d56c:	mov	r1, #2
    d570:	mov	r0, r5
    d574:	bl	44a8 <rb_setselect@plt>
    d578:	pop	{r4, r5, r6, r7, r8, pc}
    d57c:	.word	0xffffff24
    d580:	.word	0xffffff08

0000d584 <rb_ssl_tryconn>:
    d584:	push	{r4, r5, r6, lr}
    d588:	mov	r4, r0
    d58c:	mov	r5, r2
    d590:	cmp	r1, #0
    d594:	bne	d5d4 <rb_ssl_tryconn+0x50>
    d598:	ldrb	r3, [r0, #17]
    d59c:	orr	r3, r3, #32
    d5a0:	strb	r3, [r0, #17]
    d5a4:	mov	r3, r2
    d5a8:	ldr	r2, [pc, #44]	; d5dc <rb_ssl_tryconn+0x58>
    d5ac:	add	r2, pc, r2
    d5b0:	ldr	r1, [r5, #8]
    d5b4:	bl	43e8 <rb_settimeout@plt>
    d5b8:	mov	r1, #1
    d5bc:	mov	r0, r4
    d5c0:	bl	d23c <rb_ssl_init_fd>
    d5c4:	mov	r1, r5
    d5c8:	mov	r0, r4
    d5cc:	bl	d478 <rb_ssl_connect_common>
    d5d0:	pop	{r4, r5, r6, pc}
    d5d4:	bl	d42c <rb_ssl_connect_realcb>
    d5d8:	pop	{r4, r5, r6, pc}
    d5dc:	.word	0xfffffeb0

0000d5e0 <rb_ssl_shutdown>:
    d5e0:	push	{r4, r5, r6, lr}
    d5e4:	subs	r4, r0, #0
    d5e8:	popeq	{r4, r5, r6, pc}
    d5ec:	ldr	r3, [r4, #56]	; 0x38
    d5f0:	cmp	r3, #0
    d5f4:	popeq	{r4, r5, r6, pc}
    d5f8:	bl	cf94 <rb_ssl_last_err>
    d5fc:	mov	r5, #4
    d600:	ldr	r0, [r4, #56]	; 0x38
    d604:	bl	4aa8 <SSL_shutdown@plt>
    d608:	mov	r6, r0
    d60c:	mov	r1, r0
    d610:	ldr	r0, [r4, #56]	; 0x38
    d614:	bl	4cac <SSL_get_error@plt>
    d618:	cmp	r6, #0
    d61c:	bge	d634 <rb_ssl_shutdown+0x54>
    d620:	sub	r0, r0, #2
    d624:	cmp	r0, #1
    d628:	bhi	d634 <rb_ssl_shutdown+0x54>
    d62c:	subs	r5, r5, #1
    d630:	bne	d600 <rb_ssl_shutdown+0x20>
    d634:	ldr	r0, [r4, #56]	; 0x38
    d638:	bl	4964 <SSL_free@plt>
    d63c:	mov	r3, #0
    d640:	str	r3, [r4, #56]	; 0x38
    d644:	pop	{r4, r5, r6, pc}

0000d648 <rb_init_ssl>:
    d648:	push	{r4, lr}
    d64c:	ldr	r1, [pc, #24]	; d66c <rb_init_ssl+0x24>
    d650:	add	r1, pc, r1
    d654:	add	r1, r1, #28
    d658:	ldr	r0, [pc, #16]	; d670 <rb_init_ssl+0x28>
    d65c:	add	r0, pc, r0
    d660:	bl	491c <rb_lib_log@plt>
    d664:	mov	r0, #1
    d668:	pop	{r4, pc}
    d66c:	.word	0x0000906c
    d670:	.word	0x00009278

0000d674 <rb_setup_ssl_server>:
    d674:	push	{r4, r5, r6, r7, r8, lr}
    d678:	sub	sp, sp, #8
    d67c:	subs	r6, r0, #0
    d680:	beq	d708 <rb_setup_ssl_server+0x94>
    d684:	mov	r4, r1
    d688:	mov	r8, r2
    d68c:	mov	r7, r3
    d690:	cmp	r1, #0
    d694:	moveq	r4, r6
    d698:	cmp	r3, #0
    d69c:	beq	d728 <rb_setup_ssl_server+0xb4>
    d6a0:	bl	cf94 <rb_ssl_last_err>
    d6a4:	bl	4370 <TLS_method@plt>
    d6a8:	bl	4b20 <SSL_CTX_new@plt>
    d6ac:	subs	r5, r0, #0
    d6b0:	beq	d738 <rb_setup_ssl_server+0xc4>
    d6b4:	mov	r1, r6
    d6b8:	mov	r0, r5
    d6bc:	bl	4838 <SSL_CTX_use_certificate_chain_file@plt>
    d6c0:	cmp	r0, #1
    d6c4:	beq	d764 <rb_setup_ssl_server+0xf0>
    d6c8:	bl	cf94 <rb_ssl_last_err>
    d6cc:	bl	cfb8 <rb_ssl_strerror>
    d6d0:	mov	r3, r0
    d6d4:	mov	r2, r6
    d6d8:	ldr	r1, [pc, #708]	; d9a4 <rb_setup_ssl_server+0x330>
    d6dc:	add	r1, pc, r1
    d6e0:	add	r1, r1, #440	; 0x1b8
    d6e4:	ldr	r0, [pc, #700]	; d9a8 <rb_setup_ssl_server+0x334>
    d6e8:	add	r0, pc, r0
    d6ec:	bl	491c <rb_lib_log@plt>
    d6f0:	mov	r0, r5
    d6f4:	bl	4460 <SSL_CTX_free@plt>
    d6f8:	mov	r4, #0
    d6fc:	mov	r0, r4
    d700:	add	sp, sp, #8
    d704:	pop	{r4, r5, r6, r7, r8, pc}
    d708:	ldr	r1, [pc, #668]	; d9ac <rb_setup_ssl_server+0x338>
    d70c:	add	r1, pc, r1
    d710:	add	r1, r1, #440	; 0x1b8
    d714:	ldr	r0, [pc, #660]	; d9b0 <rb_setup_ssl_server+0x33c>
    d718:	add	r0, pc, r0
    d71c:	bl	491c <rb_lib_log@plt>
    d720:	mov	r4, #0
    d724:	b	d6fc <rb_setup_ssl_server+0x88>
    d728:	ldr	r7, [pc, #644]	; d9b4 <rb_setup_ssl_server+0x340>
    d72c:	add	r7, pc, r7
    d730:	add	r7, r7, #40	; 0x28
    d734:	b	d6a0 <rb_setup_ssl_server+0x2c>
    d738:	bl	cf94 <rb_ssl_last_err>
    d73c:	bl	cfb8 <rb_ssl_strerror>
    d740:	mov	r2, r0
    d744:	ldr	r1, [pc, #620]	; d9b8 <rb_setup_ssl_server+0x344>
    d748:	add	r1, pc, r1
    d74c:	add	r1, r1, #440	; 0x1b8
    d750:	ldr	r0, [pc, #612]	; d9bc <rb_setup_ssl_server+0x348>
    d754:	add	r0, pc, r0
    d758:	bl	491c <rb_lib_log@plt>
    d75c:	mov	r4, #0
    d760:	b	d6fc <rb_setup_ssl_server+0x88>
    d764:	mov	r2, #1
    d768:	mov	r1, r4
    d76c:	mov	r0, r5
    d770:	bl	4928 <SSL_CTX_use_PrivateKey_file@plt>
    d774:	cmp	r0, #1
    d778:	bne	d824 <rb_setup_ssl_server+0x1b0>
    d77c:	cmp	r8, #0
    d780:	beq	d85c <rb_setup_ssl_server+0x1e8>
    d784:	ldr	r1, [pc, #564]	; d9c0 <rb_setup_ssl_server+0x34c>
    d788:	add	r1, pc, r1
    d78c:	mov	r0, r8
    d790:	bl	4610 <fopen@plt>
    d794:	mov	r3, #0
    d798:	str	r3, [sp, #4]
    d79c:	subs	r4, r0, #0
    d7a0:	beq	d878 <rb_setup_ssl_server+0x204>
    d7a4:	mov	r3, #0
    d7a8:	mov	r2, r3
    d7ac:	add	r1, sp, #4
    d7b0:	mov	r0, r4
    d7b4:	bl	49e8 <PEM_read_DHparams@plt>
    d7b8:	cmp	r0, #0
    d7bc:	beq	d8a8 <rb_setup_ssl_server+0x234>
    d7c0:	ldr	r3, [sp, #4]
    d7c4:	mov	r2, #0
    d7c8:	mov	r1, #3
    d7cc:	mov	r0, r5
    d7d0:	bl	4670 <SSL_CTX_ctrl@plt>
    d7d4:	ldr	r0, [sp, #4]
    d7d8:	bl	4a6c <DH_free@plt>
    d7dc:	mov	r0, r4
    d7e0:	bl	4580 <fclose@plt>
    d7e4:	mov	r1, r7
    d7e8:	mov	r0, r5
    d7ec:	bl	43f4 <SSL_CTX_set_cipher_list@plt>
    d7f0:	mov	r4, r0
    d7f4:	cmp	r0, #1
    d7f8:	beq	d8dc <rb_setup_ssl_server+0x268>
    d7fc:	ldr	r1, [pc, #448]	; d9c4 <rb_setup_ssl_server+0x350>
    d800:	add	r1, pc, r1
    d804:	add	r1, r1, #440	; 0x1b8
    d808:	ldr	r0, [pc, #440]	; d9c8 <rb_setup_ssl_server+0x354>
    d80c:	add	r0, pc, r0
    d810:	bl	491c <rb_lib_log@plt>
    d814:	mov	r0, r5
    d818:	bl	4460 <SSL_CTX_free@plt>
    d81c:	mov	r4, #0
    d820:	b	d6fc <rb_setup_ssl_server+0x88>
    d824:	bl	cf94 <rb_ssl_last_err>
    d828:	bl	cfb8 <rb_ssl_strerror>
    d82c:	mov	r3, r0
    d830:	mov	r2, r4
    d834:	ldr	r1, [pc, #400]	; d9cc <rb_setup_ssl_server+0x358>
    d838:	add	r1, pc, r1
    d83c:	add	r1, r1, #440	; 0x1b8
    d840:	ldr	r0, [pc, #392]	; d9d0 <rb_setup_ssl_server+0x35c>
    d844:	add	r0, pc, r0
    d848:	bl	491c <rb_lib_log@plt>
    d84c:	mov	r0, r5
    d850:	bl	4460 <SSL_CTX_free@plt>
    d854:	mov	r4, #0
    d858:	b	d6fc <rb_setup_ssl_server+0x88>
    d85c:	ldr	r1, [pc, #368]	; d9d4 <rb_setup_ssl_server+0x360>
    d860:	add	r1, pc, r1
    d864:	add	r1, r1, #440	; 0x1b8
    d868:	ldr	r0, [pc, #360]	; d9d8 <rb_setup_ssl_server+0x364>
    d86c:	add	r0, pc, r0
    d870:	bl	491c <rb_lib_log@plt>
    d874:	b	d7e4 <rb_setup_ssl_server+0x170>
    d878:	bl	4ce8 <__errno_location@plt>
    d87c:	ldr	r0, [r0]
    d880:	bl	43a0 <strerror@plt>
    d884:	mov	r3, r0
    d888:	mov	r2, r8
    d88c:	ldr	r1, [pc, #328]	; d9dc <rb_setup_ssl_server+0x368>
    d890:	add	r1, pc, r1
    d894:	add	r1, r1, #440	; 0x1b8
    d898:	ldr	r0, [pc, #320]	; d9e0 <rb_setup_ssl_server+0x36c>
    d89c:	add	r0, pc, r0
    d8a0:	bl	491c <rb_lib_log@plt>
    d8a4:	b	d7e4 <rb_setup_ssl_server+0x170>
    d8a8:	bl	cf94 <rb_ssl_last_err>
    d8ac:	bl	cfb8 <rb_ssl_strerror>
    d8b0:	mov	r3, r0
    d8b4:	mov	r2, r8
    d8b8:	ldr	r1, [pc, #292]	; d9e4 <rb_setup_ssl_server+0x370>
    d8bc:	add	r1, pc, r1
    d8c0:	add	r1, r1, #440	; 0x1b8
    d8c4:	ldr	r0, [pc, #284]	; d9e8 <rb_setup_ssl_server+0x374>
    d8c8:	add	r0, pc, r0
    d8cc:	bl	491c <rb_lib_log@plt>
    d8d0:	mov	r0, r4
    d8d4:	bl	4580 <fclose@plt>
    d8d8:	b	d7e4 <rb_setup_ssl_server+0x170>
    d8dc:	mov	r3, #0
    d8e0:	mov	r2, r3
    d8e4:	mov	r1, #44	; 0x2c
    d8e8:	mov	r0, r5
    d8ec:	bl	4670 <SSL_CTX_ctrl@plt>
    d8f0:	ldr	r2, [pc, #244]	; d9ec <rb_setup_ssl_server+0x378>
    d8f4:	add	r2, pc, r2
    d8f8:	mov	r1, #5
    d8fc:	mov	r0, r5
    d900:	bl	4d18 <SSL_CTX_set_verify@plt>
    d904:	mov	r1, #2048	; 0x800
    d908:	mov	r0, r5
    d90c:	bl	4514 <SSL_CTX_clear_options@plt>
    d910:	mov	r1, #67108864	; 0x4000000
    d914:	mov	r0, r5
    d918:	bl	4850 <SSL_CTX_set_options@plt>
    d91c:	mov	r1, #16384	; 0x4000
    d920:	mov	r0, r5
    d924:	bl	4850 <SSL_CTX_set_options@plt>
    d928:	mov	r1, #4194304	; 0x400000
    d92c:	mov	r0, r5
    d930:	bl	4850 <SSL_CTX_set_options@plt>
    d934:	mov	r1, #0
    d938:	mov	r0, r5
    d93c:	bl	4850 <SSL_CTX_set_options@plt>
    d940:	mov	r1, #0
    d944:	mov	r0, r5
    d948:	bl	4850 <SSL_CTX_set_options@plt>
    d94c:	ldr	r3, [pc, #156]	; d9f0 <rb_setup_ssl_server+0x37c>
    d950:	add	r3, pc, r3
    d954:	mov	r2, #0
    d958:	mov	r1, #92	; 0x5c
    d95c:	mov	r0, r5
    d960:	bl	4670 <SSL_CTX_ctrl@plt>
    d964:	ldr	r3, [pc, #136]	; d9f4 <rb_setup_ssl_server+0x380>
    d968:	add	r3, pc, r3
    d96c:	ldr	r0, [r3, #512]	; 0x200
    d970:	cmp	r0, #0
    d974:	beq	d97c <rb_setup_ssl_server+0x308>
    d978:	bl	4460 <SSL_CTX_free@plt>
    d97c:	ldr	r3, [pc, #116]	; d9f8 <rb_setup_ssl_server+0x384>
    d980:	add	r3, pc, r3
    d984:	str	r5, [r3, #512]	; 0x200
    d988:	ldr	r1, [pc, #108]	; d9fc <rb_setup_ssl_server+0x388>
    d98c:	add	r1, pc, r1
    d990:	add	r1, r1, #440	; 0x1b8
    d994:	ldr	r0, [pc, #100]	; da00 <rb_setup_ssl_server+0x38c>
    d998:	add	r0, pc, r0
    d99c:	bl	491c <rb_lib_log@plt>
    d9a0:	b	d6fc <rb_setup_ssl_server+0x88>
    d9a4:	.word	0x00008fe0
    d9a8:	.word	0x00009244
    d9ac:	.word	0x00008fb0
    d9b0:	.word	0x000091dc
    d9b4:	.word	0x00008f90
    d9b8:	.word	0x00008f74
    d9bc:	.word	0x000091c4
    d9c0:	.word	0x0000982c
    d9c4:	.word	0x00008ebc
    d9c8:	.word	0x000091e0
    d9cc:	.word	0x00008e84
    d9d0:	.word	0x0000911c
    d9d4:	.word	0x00008e5c
    d9d8:	.word	0x00009120
    d9dc:	.word	0x00008e2c
    d9e0:	.word	0x00009114
    d9e4:	.word	0x00008e00
    d9e8:	.word	0x00009100
    d9ec:	.word	0xfffff660
    d9f0:	.word	0x0001ab10
    d9f4:	.word	0x0002d0ac
    d9f8:	.word	0x0002d094
    d9fc:	.word	0x00008d30
    da00:	.word	0x00009094

0000da04 <rb_init_prng>:
    da04:	push	{r4, r5, r6, lr}
    da08:	mov	r5, r0
    da0c:	mov	r4, r1
    da10:	bl	cf94 <rb_ssl_last_err>
    da14:	cmp	r4, #0
    da18:	beq	da5c <rb_init_prng+0x58>
    da1c:	bl	4bbc <RAND_status@plt>
    da20:	mov	r4, r0
    da24:	cmp	r0, #1
    da28:	beq	da98 <rb_init_prng+0x94>
    da2c:	bl	cf94 <rb_ssl_last_err>
    da30:	bl	cfb8 <rb_ssl_strerror>
    da34:	mov	r2, r0
    da38:	ldr	r1, [pc, #116]	; dab4 <rb_init_prng+0xb0>
    da3c:	add	r1, pc, r1
    da40:	add	r1, r1, #460	; 0x1cc
    da44:	ldr	r0, [pc, #108]	; dab8 <rb_init_prng+0xb4>
    da48:	add	r0, pc, r0
    da4c:	bl	491c <rb_lib_log@plt>
    da50:	mov	r4, #0
    da54:	mov	r0, r4
    da58:	pop	{r4, r5, r6, pc}
    da5c:	mvn	r1, #0
    da60:	mov	r0, r5
    da64:	bl	4430 <RAND_load_file@plt>
    da68:	cmp	r0, #0
    da6c:	bge	da1c <rb_init_prng+0x18>
    da70:	bl	cf94 <rb_ssl_last_err>
    da74:	bl	cfb8 <rb_ssl_strerror>
    da78:	mov	r2, r0
    da7c:	ldr	r1, [pc, #56]	; dabc <rb_init_prng+0xb8>
    da80:	add	r1, pc, r1
    da84:	add	r1, r1, #460	; 0x1cc
    da88:	ldr	r0, [pc, #48]	; dac0 <rb_init_prng+0xbc>
    da8c:	add	r0, pc, r0
    da90:	bl	491c <rb_lib_log@plt>
    da94:	b	da1c <rb_init_prng+0x18>
    da98:	ldr	r1, [pc, #36]	; dac4 <rb_init_prng+0xc0>
    da9c:	add	r1, pc, r1
    daa0:	add	r1, r1, #460	; 0x1cc
    daa4:	ldr	r0, [pc, #28]	; dac8 <rb_init_prng+0xc4>
    daa8:	add	r0, pc, r0
    daac:	bl	491c <rb_lib_log@plt>
    dab0:	b	da54 <rb_init_prng+0x50>
    dab4:	.word	0x00008c80
    dab8:	.word	0x00009020
    dabc:	.word	0x00008c3c
    dac0:	.word	0x00008fc4
    dac4:	.word	0x00008c20
    dac8:	.word	0x00008fd4

0000dacc <rb_get_random>:
    dacc:	push	{r4, r5, r6, lr}
    dad0:	mov	r4, r0
    dad4:	mov	r5, r1
    dad8:	bl	cf94 <rb_ssl_last_err>
    dadc:	mov	r1, r5
    dae0:	mov	r0, r4
    dae4:	bl	4ae4 <RAND_bytes@plt>
    dae8:	cmp	r0, #1
    daec:	popeq	{r4, r5, r6, pc}
    daf0:	bl	cf94 <rb_ssl_last_err>
    daf4:	bl	cfb8 <rb_ssl_strerror>
    daf8:	mov	r2, r0
    dafc:	ldr	r1, [pc, #24]	; db1c <rb_get_random+0x50>
    db00:	add	r1, pc, r1
    db04:	add	r1, r1, #476	; 0x1dc
    db08:	ldr	r0, [pc, #16]	; db20 <rb_get_random+0x54>
    db0c:	add	r0, pc, r0
    db10:	bl	491c <rb_lib_log@plt>
    db14:	mov	r0, #0
    db18:	pop	{r4, r5, r6, pc}
    db1c:	.word	0x00008bbc
    db20:	.word	0x00008f88

0000db24 <rb_get_ssl_strerror>:
    db24:	push	{r4, lr}
    db28:	ldr	r0, [r0, #64]	; 0x40
    db2c:	bl	cfb8 <rb_ssl_strerror>
    db30:	pop	{r4, pc}

0000db34 <rb_get_ssl_certfp>:
    db34:	push	{r4, r5, r6, r7, r8, lr}
    db38:	subs	r4, r0, #0
    db3c:	beq	dc18 <rb_get_ssl_certfp+0xe4>
    db40:	ldr	r0, [r4, #56]	; 0x38
    db44:	cmp	r0, #0
    db48:	moveq	r4, #0
    db4c:	beq	dc10 <rb_get_ssl_certfp+0xdc>
    db50:	mov	r6, r2
    db54:	mov	r5, r1
    db58:	bl	4a24 <SSL_get_peer_certificate@plt>
    db5c:	subs	r7, r0, #0
    db60:	moveq	r4, #0
    db64:	beq	dc10 <rb_get_ssl_certfp+0xdc>
    db68:	ldr	r0, [r4, #56]	; 0x38
    db6c:	bl	4a48 <SSL_get_verify_result@plt>
    db70:	cmp	r0, #27
    db74:	addls	pc, pc, r0, lsl #2
    db78:	b	dc04 <rb_get_ssl_certfp+0xd0>
    db7c:	b	dbec <rb_get_ssl_certfp+0xb8>
    db80:	b	dc04 <rb_get_ssl_certfp+0xd0>
    db84:	b	dc04 <rb_get_ssl_certfp+0xd0>
    db88:	b	dc04 <rb_get_ssl_certfp+0xd0>
    db8c:	b	dc04 <rb_get_ssl_certfp+0xd0>
    db90:	b	dc04 <rb_get_ssl_certfp+0xd0>
    db94:	b	dc04 <rb_get_ssl_certfp+0xd0>
    db98:	b	dc04 <rb_get_ssl_certfp+0xd0>
    db9c:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dba0:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dba4:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dba8:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbac:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbb0:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbb4:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbb8:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbbc:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbc0:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbc4:	b	dbec <rb_get_ssl_certfp+0xb8>
    dbc8:	b	dbec <rb_get_ssl_certfp+0xb8>
    dbcc:	b	dbec <rb_get_ssl_certfp+0xb8>
    dbd0:	b	dbec <rb_get_ssl_certfp+0xb8>
    dbd4:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbd8:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbdc:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbe0:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbe4:	b	dc04 <rb_get_ssl_certfp+0xd0>
    dbe8:	b	dbec <rb_get_ssl_certfp+0xb8>
    dbec:	mov	r2, r6
    dbf0:	mov	r1, r5
    dbf4:	mov	r0, r7
    dbf8:	bl	cfdc <make_certfp>
    dbfc:	mov	r4, r0
    dc00:	b	dc08 <rb_get_ssl_certfp+0xd4>
    dc04:	mov	r4, #0
    dc08:	mov	r0, r7
    dc0c:	bl	4c64 <X509_free@plt>
    dc10:	mov	r0, r4
    dc14:	pop	{r4, r5, r6, r7, r8, pc}
    dc18:	mov	r4, #0
    dc1c:	b	dc10 <rb_get_ssl_certfp+0xdc>

0000dc20 <rb_get_ssl_certfp_file>:
    dc20:	push	{r4, r5, r6, r7, r8, lr}
    dc24:	mov	r6, r1
    dc28:	mov	r7, r2
    dc2c:	ldr	r1, [pc, #108]	; dca0 <rb_get_ssl_certfp_file+0x80>
    dc30:	add	r1, pc, r1
    dc34:	bl	4610 <fopen@plt>
    dc38:	subs	r4, r0, #0
    dc3c:	beq	dc98 <rb_get_ssl_certfp_file+0x78>
    dc40:	mov	r3, #0
    dc44:	mov	r2, r3
    dc48:	mov	r1, r3
    dc4c:	mov	r0, r4
    dc50:	bl	4814 <PEM_read_X509@plt>
    dc54:	subs	r5, r0, #0
    dc58:	beq	dc88 <rb_get_ssl_certfp_file+0x68>
    dc5c:	mov	r2, r7
    dc60:	mov	r1, r6
    dc64:	mov	r0, r5
    dc68:	bl	cfdc <make_certfp>
    dc6c:	mov	r6, r0
    dc70:	mov	r0, r5
    dc74:	bl	4c64 <X509_free@plt>
    dc78:	mov	r0, r4
    dc7c:	bl	4580 <fclose@plt>
    dc80:	mov	r0, r6
    dc84:	pop	{r4, r5, r6, r7, r8, pc}
    dc88:	mov	r0, r4
    dc8c:	bl	4580 <fclose@plt>
    dc90:	mov	r6, #0
    dc94:	b	dc80 <rb_get_ssl_certfp_file+0x60>
    dc98:	mvn	r6, #0
    dc9c:	b	dc80 <rb_get_ssl_certfp_file+0x60>
    dca0:	.word	0x00009384

0000dca4 <rb_get_ssl_info>:
    dca4:	push	{r4, r5, r6, lr}
    dca8:	sub	sp, sp, #16
    dcac:	mov	r4, r0
    dcb0:	mov	r5, r1
    dcb4:	bl	46d0 <OpenSSL_version_num@plt>
    dcb8:	ldr	r3, [pc, #112]	; dd30 <rb_get_ssl_info+0x8c>
    dcbc:	cmp	r0, r3
    dcc0:	beq	dd08 <rb_get_ssl_info+0x64>
    dcc4:	bl	46d0 <OpenSSL_version_num@plt>
    dcc8:	mov	r6, r0
    dccc:	mov	r0, #0
    dcd0:	bl	4c94 <OpenSSL_version@plt>
    dcd4:	str	r0, [sp, #8]
    dcd8:	str	r6, [sp, #4]
    dcdc:	ldr	r3, [pc, #80]	; dd34 <rb_get_ssl_info+0x90>
    dce0:	add	r3, pc, r3
    dce4:	str	r3, [sp]
    dce8:	ldr	r3, [pc, #64]	; dd30 <rb_get_ssl_info+0x8c>
    dcec:	ldr	r2, [pc, #68]	; dd38 <rb_get_ssl_info+0x94>
    dcf0:	add	r2, pc, r2
    dcf4:	mov	r1, r5
    dcf8:	mov	r0, r4
    dcfc:	bl	4bb0 <snprintf@plt>
    dd00:	add	sp, sp, #16
    dd04:	pop	{r4, r5, r6, pc}
    dd08:	ldr	r3, [pc, #44]	; dd3c <rb_get_ssl_info+0x98>
    dd0c:	add	r3, pc, r3
    dd10:	str	r3, [sp]
    dd14:	ldr	r3, [pc, #20]	; dd30 <rb_get_ssl_info+0x8c>
    dd18:	ldr	r2, [pc, #32]	; dd40 <rb_get_ssl_info+0x9c>
    dd1c:	add	r2, pc, r2
    dd20:	mov	r1, r5
    dd24:	mov	r0, r4
    dd28:	bl	4bb0 <snprintf@plt>
    dd2c:	b	dd00 <rb_get_ssl_info+0x5c>
    dd30:	.word	0x1010104f
    dd34:	.word	0x00008dec
    dd38:	.word	0x00008df8
    dd3c:	.word	0x00008dc0
    dd40:	.word	0x00008d8c

0000dd44 <rb_ssl_get_cipher>:
    dd44:	push	{r4, r5, lr}
    dd48:	sub	sp, sp, #12
    dd4c:	subs	r4, r0, #0
    dd50:	beq	dda8 <rb_ssl_get_cipher+0x64>
    dd54:	ldr	r0, [r4, #56]	; 0x38
    dd58:	cmp	r0, #0
    dd5c:	beq	ddb0 <rb_ssl_get_cipher+0x6c>
    dd60:	bl	4cb8 <SSL_get_version@plt>
    dd64:	mov	r5, r0
    dd68:	ldr	r0, [r4, #56]	; 0x38
    dd6c:	bl	4520 <SSL_get_current_cipher@plt>
    dd70:	bl	46b8 <SSL_CIPHER_get_name@plt>
    dd74:	ldr	r4, [pc, #60]	; ddb8 <rb_ssl_get_cipher+0x74>
    dd78:	add	r4, pc, r4
    dd7c:	add	r4, r4, #516	; 0x204
    dd80:	str	r0, [sp]
    dd84:	mov	r3, r5
    dd88:	ldr	r2, [pc, #44]	; ddbc <rb_ssl_get_cipher+0x78>
    dd8c:	add	r2, pc, r2
    dd90:	mov	r1, #512	; 0x200
    dd94:	mov	r0, r4
    dd98:	bl	4bb0 <snprintf@plt>
    dd9c:	mov	r0, r4
    dda0:	add	sp, sp, #12
    dda4:	pop	{r4, r5, pc}
    dda8:	mov	r0, #0
    ddac:	b	dda0 <rb_ssl_get_cipher+0x5c>
    ddb0:	mov	r0, #0
    ddb4:	b	dda0 <rb_ssl_get_cipher+0x5c>
    ddb8:	.word	0x0002cc9c
    ddbc:	.word	0x00008d90

0000ddc0 <rb_ssl_read>:
    ddc0:	push	{lr}		; (str lr, [sp, #-4]!)
    ddc4:	sub	sp, sp, #12
    ddc8:	str	r2, [sp]
    ddcc:	mov	r3, #0
    ddd0:	mov	r2, r1
    ddd4:	mov	r1, r0
    ddd8:	mov	r0, r3
    dddc:	bl	d144 <rb_ssl_read_or_write>
    dde0:	add	sp, sp, #12
    dde4:	pop	{pc}		; (ldr pc, [sp], #4)

0000dde8 <rb_ssl_write>:
    dde8:	push	{lr}		; (str lr, [sp, #-4]!)
    ddec:	sub	sp, sp, #12
    ddf0:	str	r2, [sp]
    ddf4:	mov	r3, r1
    ddf8:	mov	r2, #0
    ddfc:	mov	r1, r0
    de00:	mov	r0, #1
    de04:	bl	d144 <rb_ssl_read_or_write>
    de08:	add	sp, sp, #12
    de0c:	pop	{pc}		; (ldr pc, [sp], #4)

0000de10 <rb_supports_ssl>:
    de10:	mov	r0, #1
    de14:	bx	lr

0000de18 <rb_ssl_handshake_count>:
    de18:	ldr	r0, [r0, #60]	; 0x3c
    de1c:	bx	lr

0000de20 <rb_ssl_clear_handshake_count>:
    de20:	mov	r3, #0
    de24:	str	r3, [r0, #60]	; 0x3c
    de28:	bx	lr

0000de2c <rb_ssl_start_accepted>:
    de2c:	push	{r4, r5, r6, r7, r8, lr}
    de30:	mov	r4, r0
    de34:	mov	r7, r1
    de38:	mov	r5, r2
    de3c:	mov	r6, r3
    de40:	ldrb	r3, [r0, #17]
    de44:	orr	r3, r3, #32
    de48:	strb	r3, [r0, #17]
    de4c:	mov	r1, #144	; 0x90
    de50:	mov	r0, #1
    de54:	bl	45ec <calloc@plt>
    de58:	cmp	r0, #0
    de5c:	beq	deb4 <rb_ssl_start_accepted+0x88>
    de60:	str	r0, [r4, #52]	; 0x34
    de64:	str	r7, [r0, #132]	; 0x84
    de68:	str	r5, [r0, #140]	; 0x8c
    de6c:	mov	r5, #0
    de70:	str	r5, [r0, #128]	; 0x80
    de74:	mov	r2, #128	; 0x80
    de78:	mov	r1, r5
    de7c:	bl	4628 <memset@plt>
    de80:	mov	r3, r5
    de84:	ldr	r2, [pc, #44]	; deb8 <rb_ssl_start_accepted+0x8c>
    de88:	add	r2, pc, r2
    de8c:	mov	r1, r6
    de90:	mov	r0, r4
    de94:	bl	43e8 <rb_settimeout@plt>
    de98:	mov	r1, r5
    de9c:	mov	r0, r4
    dea0:	bl	d23c <rb_ssl_init_fd>
    dea4:	mov	r1, r5
    dea8:	mov	r0, r4
    deac:	bl	d2e0 <rb_ssl_accept_common>
    deb0:	pop	{r4, r5, r6, r7, r8, pc}
    deb4:	bl	4988 <rb_outofmemory@plt>
    deb8:	.word	0xfffff0d4

0000debc <rb_ssl_accept_setup>:
    debc:	push	{r4, r5, r6, r7, r8, lr}
    dec0:	mov	r8, r0
    dec4:	mov	r4, r1
    dec8:	mov	r7, r2
    decc:	mov	r6, r3
    ded0:	ldrb	r3, [r1, #17]
    ded4:	orr	r3, r3, #32
    ded8:	strb	r3, [r1, #17]
    dedc:	mov	r1, #144	; 0x90
    dee0:	mov	r0, #1
    dee4:	bl	45ec <calloc@plt>
    dee8:	subs	r5, r0, #0
    deec:	beq	df60 <rb_ssl_accept_setup+0xa4>
    def0:	str	r5, [r4, #52]	; 0x34
    def4:	ldr	r3, [r8, #52]	; 0x34
    def8:	ldr	r2, [r3, #132]	; 0x84
    defc:	str	r2, [r5, #132]	; 0x84
    df00:	ldr	r3, [r3, #140]	; 0x8c
    df04:	str	r3, [r5, #140]	; 0x8c
    df08:	str	r6, [r5, #128]	; 0x80
    df0c:	mov	r2, #128	; 0x80
    df10:	mov	r1, #0
    df14:	mov	r0, r5
    df18:	bl	4628 <memset@plt>
    df1c:	mov	r2, r6
    df20:	mov	r1, r7
    df24:	mov	r0, r5
    df28:	bl	4808 <memcpy@plt>
    df2c:	mov	r3, #0
    df30:	ldr	r2, [pc, #44]	; df64 <rb_ssl_accept_setup+0xa8>
    df34:	add	r2, pc, r2
    df38:	mov	r1, #10
    df3c:	mov	r0, r4
    df40:	bl	43e8 <rb_settimeout@plt>
    df44:	mov	r1, #0
    df48:	mov	r0, r4
    df4c:	bl	d23c <rb_ssl_init_fd>
    df50:	mov	r1, #0
    df54:	mov	r0, r4
    df58:	bl	d2e0 <rb_ssl_accept_common>
    df5c:	pop	{r4, r5, r6, r7, r8, pc}
    df60:	bl	4988 <rb_outofmemory@plt>
    df64:	.word	0xfffff028

0000df68 <rb_ssl_listen>:
    df68:	push	{r4, lr}
    df6c:	mov	r4, r0
    df70:	bl	4bf8 <rb_listen@plt>
    df74:	mov	r3, #52	; 0x34
    df78:	strb	r3, [r4, #17]
    df7c:	pop	{r4, pc}

0000df80 <rb_connect_tcp_ssl>:
    df80:	push	{r4, r5, r6, r7, r8, lr}
    df84:	sub	sp, sp, #8
    df88:	ldr	r7, [sp, #36]	; 0x24
    df8c:	subs	r4, r0, #0
    df90:	beq	dfe4 <rb_connect_tcp_ssl+0x64>
    df94:	mov	r8, r3
    df98:	mov	r6, r2
    df9c:	mov	r5, r1
    dfa0:	mov	r1, #12
    dfa4:	mov	r0, #1
    dfa8:	bl	45ec <calloc@plt>
    dfac:	cmp	r0, #0
    dfb0:	beq	dfec <rb_connect_tcp_ssl+0x6c>
    dfb4:	ldr	r3, [sp, #32]
    dfb8:	str	r3, [r0, #4]
    dfbc:	str	r8, [r0]
    dfc0:	str	r7, [r0, #8]
    dfc4:	str	r7, [sp, #4]
    dfc8:	str	r0, [sp]
    dfcc:	ldr	r3, [pc, #28]	; dff0 <rb_connect_tcp_ssl+0x70>
    dfd0:	add	r3, pc, r3
    dfd4:	mov	r2, r6
    dfd8:	mov	r1, r5
    dfdc:	mov	r0, r4
    dfe0:	bl	4424 <rb_connect_tcp@plt>
    dfe4:	add	sp, sp, #8
    dfe8:	pop	{r4, r5, r6, r7, r8, pc}
    dfec:	bl	4988 <rb_outofmemory@plt>
    dff0:	.word	0xfffff5ac

0000dff4 <rb_ssl_start_connected>:
    dff4:	push	{r4, r5, r6, r7, r8, lr}
    dff8:	subs	r4, r0, #0
    dffc:	popeq	{r4, r5, r6, r7, r8, pc}
    e000:	mov	r6, r3
    e004:	mov	r7, r2
    e008:	mov	r8, r1
    e00c:	mov	r1, #12
    e010:	mov	r0, #1
    e014:	bl	45ec <calloc@plt>
    e018:	subs	r5, r0, #0
    e01c:	beq	e08c <rb_ssl_start_connected+0x98>
    e020:	str	r7, [r5, #4]
    e024:	str	r8, [r5]
    e028:	str	r6, [r5, #8]
    e02c:	mov	r1, #268	; 0x10c
    e030:	mov	r0, #1
    e034:	bl	45ec <calloc@plt>
    e038:	cmp	r0, #0
    e03c:	beq	e090 <rb_ssl_start_connected+0x9c>
    e040:	str	r0, [r4, #48]	; 0x30
    e044:	str	r8, [r0, #260]	; 0x104
    e048:	str	r7, [r0, #264]	; 0x108
    e04c:	ldrb	r3, [r4, #17]
    e050:	orr	r3, r3, #32
    e054:	strb	r3, [r4, #17]
    e058:	mov	r3, r5
    e05c:	ldr	r2, [pc, #48]	; e094 <rb_ssl_start_connected+0xa0>
    e060:	add	r2, pc, r2
    e064:	mov	r1, r6
    e068:	mov	r0, r4
    e06c:	bl	43e8 <rb_settimeout@plt>
    e070:	mov	r1, #1
    e074:	mov	r0, r4
    e078:	bl	d23c <rb_ssl_init_fd>
    e07c:	mov	r1, r5
    e080:	mov	r0, r4
    e084:	bl	d478 <rb_ssl_connect_common>
    e088:	pop	{r4, r5, r6, r7, r8, pc}
    e08c:	bl	4988 <rb_outofmemory@plt>
    e090:	bl	4988 <rb_outofmemory@plt>
    e094:	.word	0xfffff3fc

0000e098 <rb_event_add_common>:
    e098:	push	{r4, r5, r6, r7, r8, lr}
    e09c:	mov	r8, r0
    e0a0:	mov	r6, r1
    e0a4:	mov	r7, r2
    e0a8:	mov	r5, r3
    e0ac:	mov	r1, #48	; 0x30
    e0b0:	mov	r0, #1
    e0b4:	bl	45ec <calloc@plt>
    e0b8:	subs	r4, r0, #0
    e0bc:	beq	e188 <rb_event_add_common+0xf0>
    e0c0:	str	r6, [r4, #12]
    e0c4:	mov	r0, #33	; 0x21
    e0c8:	bl	49ac <malloc@plt>
    e0cc:	subs	r6, r0, #0
    e0d0:	beq	e18c <rb_event_add_common+0xf4>
    e0d4:	mov	r2, #33	; 0x21
    e0d8:	mov	r1, r8
    e0dc:	mov	r0, r6
    e0e0:	bl	46a0 <rb_strlcpy@plt>
    e0e4:	str	r6, [r4, #20]
    e0e8:	str	r7, [r4, #16]
    e0ec:	bl	47f0 <rb_current_time@plt>
    e0f0:	add	r0, r0, r5
    e0f4:	str	r0, [r4, #28]
    e0f8:	str	r5, [r4, #32]
    e0fc:	ldr	r3, [sp, #24]
    e100:	str	r3, [r4, #24]
    e104:	mov	r3, #0
    e108:	str	r3, [r4, #44]	; 0x2c
    e10c:	ldr	r3, [pc, #172]	; e1c0 <rb_event_add_common+0x128>
    e110:	add	r3, pc, r3
    e114:	ldr	r2, [r3]
    e118:	cmn	r2, #1
    e11c:	movne	r3, #0
    e120:	moveq	r3, #1
    e124:	cmp	r0, r2
    e128:	orrlt	r3, r3, #1
    e12c:	cmp	r3, #0
    e130:	bne	e190 <rb_event_add_common+0xf8>
    e134:	str	r4, [r4]
    e138:	mov	r3, #0
    e13c:	str	r3, [r4, #4]
    e140:	ldr	r3, [pc, #124]	; e1c4 <rb_event_add_common+0x12c>
    e144:	add	r3, pc, r3
    e148:	ldr	r3, [r3]
    e14c:	str	r3, [r4, #8]
    e150:	cmp	r3, #0
    e154:	strne	r4, [r3, #4]
    e158:	beq	e1a0 <rb_event_add_common+0x108>
    e15c:	ldr	r3, [pc, #100]	; e1c8 <rb_event_add_common+0x130>
    e160:	add	r3, pc, r3
    e164:	str	r4, [r3]
    e168:	ldr	r2, [r3, #8]
    e16c:	add	r2, r2, #1
    e170:	str	r2, [r3, #8]
    e174:	mov	r1, r5
    e178:	mov	r0, r4
    e17c:	bl	bd98 <rb_io_sched_event>
    e180:	mov	r0, r4
    e184:	pop	{r4, r5, r6, r7, r8, pc}
    e188:	bl	4988 <rb_outofmemory@plt>
    e18c:	bl	4988 <rb_outofmemory@plt>
    e190:	ldr	r3, [pc, #52]	; e1cc <rb_event_add_common+0x134>
    e194:	add	r3, pc, r3
    e198:	str	r0, [r3]
    e19c:	b	e134 <rb_event_add_common+0x9c>
    e1a0:	ldr	r3, [pc, #40]	; e1d0 <rb_event_add_common+0x138>
    e1a4:	add	r3, pc, r3
    e1a8:	ldr	r3, [r3, #4]
    e1ac:	cmp	r3, #0
    e1b0:	ldreq	r3, [pc, #28]	; e1d4 <rb_event_add_common+0x13c>
    e1b4:	addeq	r3, pc, r3
    e1b8:	streq	r4, [r3, #4]
    e1bc:	b	e15c <rb_event_add_common+0xc4>
    e1c0:	.word	0x0001a36c
    e1c4:	.word	0x0002ccd4
    e1c8:	.word	0x0002ccb8
    e1cc:	.word	0x0001a2e8
    e1d0:	.word	0x0002cc74
    e1d4:	.word	0x0002cc64

0000e1d8 <rb_event_frequency>:
    e1d8:	cmp	r0, #0
    e1dc:	bxge	lr
    e1e0:	push	{r4, lr}
    e1e4:	cmp	r0, #0
    e1e8:	rsblt	r0, r0, #0
    e1ec:	lsl	r0, r0, #1
    e1f0:	ldr	r4, [pc, #60]	; e234 <rb_event_frequency+0x5c>
    e1f4:	smull	r3, r4, r4, r0
    e1f8:	sub	r4, r4, r0, asr #31
    e1fc:	bl	4b44 <rand@plt>
    e200:	ldr	r3, [pc, #48]	; e238 <rb_event_frequency+0x60>
    e204:	smull	r2, r1, r3, r0
    e208:	asr	r2, r0, #31
    e20c:	rsb	r1, r2, r1, asr #6
    e210:	mov	r2, #1000	; 0x3e8
    e214:	mul	r2, r2, r1
    e218:	sub	r0, r0, r2
    e21c:	mul	r0, r4, r0
    e220:	smull	r2, r3, r3, r0
    e224:	asr	r0, r0, #31
    e228:	rsb	r0, r0, r3, asr #6
    e22c:	add	r0, r0, r4
    e230:	pop	{r4, pc}
    e234:	.word	0x55555556
    e238:	.word	0x10624dd3

0000e23c <rb_event_add>:
    e23c:	push	{r4, r5, r6, lr}
    e240:	sub	sp, sp, #8
    e244:	mov	r4, r0
    e248:	mov	r5, r1
    e24c:	mov	r6, r2
    e250:	cmp	r3, #0
    e254:	ble	e274 <rb_event_add+0x38>
    e258:	str	r3, [sp]
    e25c:	mov	r2, r6
    e260:	mov	r1, r5
    e264:	mov	r0, r4
    e268:	bl	e098 <rb_event_add_common>
    e26c:	add	sp, sp, #8
    e270:	pop	{r4, r5, r6, pc}
    e274:	mov	r2, r3
    e278:	mov	r1, r0
    e27c:	ldr	r0, [pc, #12]	; e290 <rb_event_add+0x54>
    e280:	add	r0, pc, r0
    e284:	bl	491c <rb_lib_log@plt>
    e288:	mov	r3, #1
    e28c:	b	e258 <rb_event_add+0x1c>
    e290:	.word	0x000088a4

0000e294 <rb_event_addonce>:
    e294:	push	{r4, r5, r6, lr}
    e298:	sub	sp, sp, #8
    e29c:	mov	r4, r0
    e2a0:	mov	r5, r1
    e2a4:	mov	r6, r2
    e2a8:	cmp	r3, #0
    e2ac:	ble	e2d0 <rb_event_addonce+0x3c>
    e2b0:	mov	r2, #0
    e2b4:	str	r2, [sp]
    e2b8:	mov	r2, r6
    e2bc:	mov	r1, r5
    e2c0:	mov	r0, r4
    e2c4:	bl	e098 <rb_event_add_common>
    e2c8:	add	sp, sp, #8
    e2cc:	pop	{r4, r5, r6, pc}
    e2d0:	mov	r2, r3
    e2d4:	mov	r1, r0
    e2d8:	ldr	r0, [pc, #12]	; e2ec <rb_event_addonce+0x58>
    e2dc:	add	r0, pc, r0
    e2e0:	bl	491c <rb_lib_log@plt>
    e2e4:	mov	r3, #1
    e2e8:	b	e2b0 <rb_event_addonce+0x1c>
    e2ec:	.word	0x0000888c

0000e2f0 <rb_event_delete>:
    e2f0:	cmp	r0, #0
    e2f4:	bxeq	lr
    e2f8:	push	{r4, lr}
    e2fc:	mov	r3, #1
    e300:	str	r3, [r0, #44]	; 0x2c
    e304:	bl	be1c <rb_io_unsched_event>
    e308:	pop	{r4, pc}

0000e30c <rb_event_find_delete>:
    e30c:	push	{r4, lr}
    e310:	ldr	r3, [pc, #80]	; e368 <rb_event_find_delete+0x5c>
    e314:	add	r3, pc, r3
    e318:	ldr	r3, [r3]
    e31c:	cmp	r3, #0
    e320:	bne	e338 <rb_event_find_delete+0x2c>
    e324:	mov	r2, #0
    e328:	b	e35c <rb_event_find_delete+0x50>
    e32c:	ldr	r3, [r3, #8]
    e330:	cmp	r3, #0
    e334:	beq	e358 <rb_event_find_delete+0x4c>
    e338:	ldr	r2, [r3]
    e33c:	ldr	ip, [r2, #12]
    e340:	cmp	r0, ip
    e344:	bne	e32c <rb_event_find_delete+0x20>
    e348:	ldr	ip, [r2, #16]
    e34c:	cmp	r1, ip
    e350:	bne	e32c <rb_event_find_delete+0x20>
    e354:	b	e35c <rb_event_find_delete+0x50>
    e358:	mov	r2, #0
    e35c:	mov	r0, r2
    e360:	bl	449c <rb_event_delete@plt>
    e364:	pop	{r4, pc}
    e368:	.word	0x0002cb04

0000e36c <rb_event_addish>:
    e36c:	push	{r4, r5, r6, r7, lr}
    e370:	sub	sp, sp, #12
    e374:	mov	r5, r0
    e378:	mov	r6, r1
    e37c:	mov	r7, r2
    e380:	eor	r4, r3, r3, asr #31
    e384:	sub	r4, r4, r3, asr #31
    e388:	vmov	s15, r4
    e38c:	vcvt.f64.s32	d6, s15
    e390:	vldr	d7, [pc, #48]	; e3c8 <rb_event_addish+0x5c>
    e394:	vcmpe.f64	d6, d7
    e398:	vmrs	APSR_nzcv, fpscr
    e39c:	rsbge	r4, r4, #0
    e3a0:	mov	r0, r4
    e3a4:	bl	e1d8 <rb_event_frequency>
    e3a8:	str	r4, [sp]
    e3ac:	mov	r3, r0
    e3b0:	mov	r2, r7
    e3b4:	mov	r1, r6
    e3b8:	mov	r0, r5
    e3bc:	bl	e098 <rb_event_add_common>
    e3c0:	add	sp, sp, #12
    e3c4:	pop	{r4, r5, r6, r7, pc}
    e3c8:	.word	0x00000000
    e3cc:	.word	0x40080000

0000e3d0 <rb_run_one_event>:
    e3d0:	push	{r4, r5, r6, lr}
    e3d4:	mov	r4, r0
    e3d8:	mov	r2, #33	; 0x21
    e3dc:	ldr	r1, [r0, #20]
    e3e0:	ldr	r0, [pc, #120]	; e460 <rb_run_one_event+0x90>
    e3e4:	add	r0, pc, r0
    e3e8:	add	r0, r0, #12
    e3ec:	bl	46a0 <rb_strlcpy@plt>
    e3f0:	ldr	r3, [r4, #12]
    e3f4:	ldr	r0, [r4, #16]
    e3f8:	blx	r3
    e3fc:	ldr	r3, [r4, #24]
    e400:	cmp	r3, #0
    e404:	beq	e454 <rb_run_one_event+0x84>
    e408:	bl	47f0 <rb_current_time@plt>
    e40c:	mov	r5, r0
    e410:	ldr	r0, [r4, #24]
    e414:	bl	e1d8 <rb_event_frequency>
    e418:	add	r0, r5, r0
    e41c:	str	r0, [r4, #28]
    e420:	ldr	r3, [pc, #60]	; e464 <rb_run_one_event+0x94>
    e424:	add	r3, pc, r3
    e428:	ldr	r2, [r3]
    e42c:	cmn	r2, #1
    e430:	movne	r3, #0
    e434:	moveq	r3, #1
    e438:	cmp	r0, r2
    e43c:	orrlt	r3, r3, #1
    e440:	cmp	r3, #0
    e444:	ldrne	r3, [pc, #28]	; e468 <rb_run_one_event+0x98>
    e448:	addne	r3, pc, r3
    e44c:	strne	r0, [r3]
    e450:	pop	{r4, r5, r6, pc}
    e454:	mov	r0, r4
    e458:	bl	449c <rb_event_delete@plt>
    e45c:	pop	{r4, r5, r6, pc}
    e460:	.word	0x0002ca34
    e464:	.word	0x0001a058
    e468:	.word	0x0001a034

0000e46c <rb_event_run>:
    e46c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e470:	bl	be80 <rb_io_supports_event>
    e474:	cmp	r0, #0
    e478:	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e47c:	mvn	r2, #0
    e480:	ldr	r3, [pc, #548]	; e6ac <rb_event_run+0x240>
    e484:	add	r3, pc, r3
    e488:	str	r2, [r3]
    e48c:	ldr	r3, [pc, #540]	; e6b0 <rb_event_run+0x244>
    e490:	add	r3, pc, r3
    e494:	ldr	r3, [r3]
    e498:	cmp	r3, #0
    e49c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4a0:	ldr	r5, [r3, #8]
    e4a4:	ldr	r7, [pc, #520]	; e6b4 <rb_event_run+0x248>
    e4a8:	add	r7, pc, r7
    e4ac:	ldr	r8, [pc, #516]	; e6b8 <rb_event_run+0x24c>
    e4b0:	add	r8, pc, r8
    e4b4:	ldr	r6, [pc, #512]	; e6bc <rb_event_run+0x250>
    e4b8:	add	r6, pc, r6
    e4bc:	add	r6, r6, #12
    e4c0:	ldr	r9, [pc, #504]	; e6c0 <rb_event_run+0x254>
    e4c4:	add	r9, pc, r9
    e4c8:	ldr	sl, [pc, #500]	; e6c4 <rb_event_run+0x258>
    e4cc:	add	sl, pc, sl
    e4d0:	b	e548 <rb_event_run+0xdc>
    e4d4:	ldr	r2, [r4, #4]
    e4d8:	ldr	r3, [pc, #488]	; e6c8 <rb_event_run+0x25c>
    e4dc:	add	r3, pc, r3
    e4e0:	str	r2, [r3, #4]
    e4e4:	b	e56c <rb_event_run+0x100>
    e4e8:	ldr	r2, [r4, #8]
    e4ec:	ldr	r3, [pc, #472]	; e6cc <rb_event_run+0x260>
    e4f0:	add	r3, pc, r3
    e4f4:	str	r2, [r3]
    e4f8:	mov	r3, #0
    e4fc:	str	r3, [r4, #4]
    e500:	str	r3, [r4, #8]
    e504:	ldr	r2, [pc, #452]	; e6d0 <rb_event_run+0x264>
    e508:	add	r2, pc, r2
    e50c:	ldr	r3, [r2, #8]
    e510:	sub	r3, r3, #1
    e514:	str	r3, [r2, #8]
    e518:	ldr	r0, [r4, #20]
    e51c:	cmp	r0, #0
    e520:	beq	e528 <rb_event_run+0xbc>
    e524:	bl	46f4 <free@plt>
    e528:	cmp	r4, #0
    e52c:	beq	e538 <rb_event_run+0xcc>
    e530:	mov	r0, r4
    e534:	bl	46f4 <free@plt>
    e538:	cmp	r5, #0
    e53c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e540:	mov	r3, r5
    e544:	ldr	r5, [r5, #8]
    e548:	ldr	r4, [r3]
    e54c:	ldr	r3, [r4, #44]	; 0x2c
    e550:	cmp	r3, #0
    e554:	beq	e584 <rb_event_run+0x118>
    e558:	ldr	r3, [r4, #8]
    e55c:	cmp	r3, #0
    e560:	beq	e4d4 <rb_event_run+0x68>
    e564:	ldr	r2, [r4, #4]
    e568:	str	r2, [r3, #4]
    e56c:	ldr	r3, [r4, #4]
    e570:	cmp	r3, #0
    e574:	beq	e4e8 <rb_event_run+0x7c>
    e578:	ldr	r2, [r4, #8]
    e57c:	str	r2, [r3, #8]
    e580:	b	e4f8 <rb_event_run+0x8c>
    e584:	ldr	fp, [r4, #28]
    e588:	bl	47f0 <rb_current_time@plt>
    e58c:	cmp	fp, r0
    e590:	ble	e5bc <rb_event_run+0x150>
    e594:	ldr	r1, [r4, #28]
    e598:	ldr	r2, [r7]
    e59c:	cmn	r2, #1
    e5a0:	movne	r3, #0
    e5a4:	moveq	r3, #1
    e5a8:	cmp	r1, r2
    e5ac:	orrlt	r3, r3, #1
    e5b0:	cmp	r3, #0
    e5b4:	strne	r1, [r8]
    e5b8:	b	e538 <rb_event_run+0xcc>
    e5bc:	mov	r2, #33	; 0x21
    e5c0:	ldr	r1, [r4, #20]
    e5c4:	mov	r0, r6
    e5c8:	bl	46a0 <rb_strlcpy@plt>
    e5cc:	ldr	r3, [r4, #12]
    e5d0:	ldr	r0, [r4, #16]
    e5d4:	blx	r3
    e5d8:	ldr	r3, [r4, #24]
    e5dc:	cmp	r3, #0
    e5e0:	bne	e64c <rb_event_run+0x1e0>
    e5e4:	ldr	r3, [r4, #8]
    e5e8:	cmp	r3, #0
    e5ec:	beq	e698 <rb_event_run+0x22c>
    e5f0:	ldr	r2, [r4, #4]
    e5f4:	str	r2, [r3, #4]
    e5f8:	ldr	r3, [r4, #4]
    e5fc:	cmp	r3, #0
    e600:	ldrne	r2, [r4, #8]
    e604:	strne	r2, [r3, #8]
    e608:	ldreq	r3, [r4, #8]
    e60c:	streq	r3, [sl]
    e610:	mov	r3, #0
    e614:	str	r3, [r4, #4]
    e618:	str	r3, [r4, #8]
    e61c:	ldr	r3, [r9, #8]
    e620:	sub	r3, r3, #1
    e624:	str	r3, [r9, #8]
    e628:	ldr	r0, [r4, #20]
    e62c:	cmp	r0, #0
    e630:	beq	e638 <rb_event_run+0x1cc>
    e634:	bl	46f4 <free@plt>
    e638:	cmp	r4, #0
    e63c:	beq	e538 <rb_event_run+0xcc>
    e640:	mov	r0, r4
    e644:	bl	46f4 <free@plt>
    e648:	b	e538 <rb_event_run+0xcc>
    e64c:	bl	47f0 <rb_current_time@plt>
    e650:	mov	fp, r0
    e654:	ldr	r0, [r4, #24]
    e658:	bl	e1d8 <rb_event_frequency>
    e65c:	add	r0, fp, r0
    e660:	str	r0, [r4, #28]
    e664:	ldr	r3, [pc, #104]	; e6d4 <rb_event_run+0x268>
    e668:	add	r3, pc, r3
    e66c:	ldr	r2, [r3]
    e670:	cmn	r2, #1
    e674:	movne	r3, #0
    e678:	moveq	r3, #1
    e67c:	cmp	r0, r2
    e680:	orrlt	r3, r3, #1
    e684:	cmp	r3, #0
    e688:	ldrne	r3, [pc, #72]	; e6d8 <rb_event_run+0x26c>
    e68c:	addne	r3, pc, r3
    e690:	strne	r0, [r3]
    e694:	b	e538 <rb_event_run+0xcc>
    e698:	ldr	r2, [r4, #4]
    e69c:	ldr	r3, [pc, #56]	; e6dc <rb_event_run+0x270>
    e6a0:	add	r3, pc, r3
    e6a4:	str	r2, [r3, #4]
    e6a8:	b	e5f8 <rb_event_run+0x18c>
    e6ac:	.word	0x00019ff8
    e6b0:	.word	0x0002c988
    e6b4:	.word	0x00019fd4
    e6b8:	.word	0x00019fcc
    e6bc:	.word	0x0002c960
    e6c0:	.word	0x0002c954
    e6c4:	.word	0x0002c94c
    e6c8:	.word	0x0002c93c
    e6cc:	.word	0x0002c928
    e6d0:	.word	0x0002c910
    e6d4:	.word	0x00019e14
    e6d8:	.word	0x00019df0
    e6dc:	.word	0x0002c778

0000e6e0 <rb_event_io_register_all>:
    e6e0:	push	{r4, lr}
    e6e4:	bl	be80 <rb_io_supports_event>
    e6e8:	cmp	r0, #0
    e6ec:	popeq	{r4, pc}
    e6f0:	ldr	r3, [pc, #40]	; e720 <rb_event_io_register_all+0x40>
    e6f4:	add	r3, pc, r3
    e6f8:	ldr	r4, [r3]
    e6fc:	cmp	r4, #0
    e700:	popeq	{r4, pc}
    e704:	ldr	r0, [r4]
    e708:	ldr	r1, [r0, #32]
    e70c:	bl	bd98 <rb_io_sched_event>
    e710:	ldr	r4, [r4, #8]
    e714:	cmp	r4, #0
    e718:	bne	e704 <rb_event_io_register_all+0x24>
    e71c:	pop	{r4, pc}
    e720:	.word	0x0002c724

0000e724 <rb_event_init>:
    e724:	push	{r4, lr}
    e728:	mov	r2, #33	; 0x21
    e72c:	ldr	r1, [pc, #20]	; e748 <rb_event_init+0x24>
    e730:	add	r1, pc, r1
    e734:	ldr	r0, [pc, #16]	; e74c <rb_event_init+0x28>
    e738:	add	r0, pc, r0
    e73c:	add	r0, r0, #12
    e740:	bl	46a0 <rb_strlcpy@plt>
    e744:	pop	{r4, pc}
    e748:	.word	0x0000847c
    e74c:	.word	0x0002c6e0

0000e750 <rb_dump_events>:
    e750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e754:	sub	sp, sp, #532	; 0x214
    e758:	mov	r9, r0
    e75c:	str	r1, [sp, #12]
    e760:	ldr	r5, [pc, #184]	; e820 <rb_dump_events+0xd0>
    e764:	add	r5, pc, r5
    e768:	add	r3, r5, #12
    e76c:	ldr	r2, [pc, #176]	; e824 <rb_dump_events+0xd4>
    e770:	add	r2, pc, r2
    e774:	mov	r1, #512	; 0x200
    e778:	add	r4, sp, #16
    e77c:	mov	r0, r4
    e780:	bl	4bb0 <snprintf@plt>
    e784:	ldr	r1, [sp, #12]
    e788:	mov	r0, r4
    e78c:	blx	r9
    e790:	mov	r2, #512	; 0x200
    e794:	ldr	r1, [pc, #140]	; e828 <rb_dump_events+0xd8>
    e798:	add	r1, pc, r1
    e79c:	mov	r0, r4
    e7a0:	bl	46a0 <rb_strlcpy@plt>
    e7a4:	ldr	r1, [sp, #12]
    e7a8:	mov	r0, r4
    e7ac:	blx	r9
    e7b0:	ldr	r4, [r5]
    e7b4:	cmp	r4, #0
    e7b8:	beq	e818 <rb_dump_events+0xc8>
    e7bc:	ldr	fp, [pc, #104]	; e82c <rb_dump_events+0xdc>
    e7c0:	add	fp, pc, fp
    e7c4:	add	r7, sp, #16
    e7c8:	mov	sl, #512	; 0x200
    e7cc:	ldr	r6, [r4]
    e7d0:	ldr	r8, [r6, #20]
    e7d4:	ldr	r5, [r6, #28]
    e7d8:	bl	47f0 <rb_current_time@plt>
    e7dc:	ldr	r3, [r6, #24]
    e7e0:	str	r3, [sp, #4]
    e7e4:	sub	r0, r5, r0
    e7e8:	str	r0, [sp]
    e7ec:	mov	r3, r8
    e7f0:	mov	r2, fp
    e7f4:	mov	r1, sl
    e7f8:	mov	r0, r7
    e7fc:	bl	4bb0 <snprintf@plt>
    e800:	ldr	r1, [sp, #12]
    e804:	mov	r0, r7
    e808:	blx	r9
    e80c:	ldr	r4, [r4, #8]
    e810:	cmp	r4, #0
    e814:	bne	e7cc <rb_dump_events+0x7c>
    e818:	add	sp, sp, #532	; 0x214
    e81c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e820:	.word	0x0002c6b4
    e824:	.word	0x00008444
    e828:	.word	0x00008434
    e82c:	.word	0x00008438

0000e830 <rb_set_back_events>:
    e830:	ldr	r3, [pc, #56]	; e870 <rb_set_back_events+0x40>
    e834:	add	r3, pc, r3
    e838:	ldr	r3, [r3]
    e83c:	cmp	r3, #0
    e840:	bxeq	lr
    e844:	mov	ip, #0
    e848:	ldr	r1, [r3]
    e84c:	ldr	r2, [r1, #28]
    e850:	cmp	r2, r0
    e854:	subgt	r2, r2, r0
    e858:	strgt	r2, [r1, #28]
    e85c:	strle	ip, [r1, #28]
    e860:	ldr	r3, [r3, #8]
    e864:	cmp	r3, #0
    e868:	bne	e848 <rb_set_back_events+0x18>
    e86c:	bx	lr
    e870:	.word	0x0002c5e4

0000e874 <rb_event_update>:
    e874:	push	{r4, r5, r6, lr}
    e878:	subs	r4, r0, #0
    e87c:	popeq	{r4, r5, r6, pc}
    e880:	mov	r0, r1
    e884:	str	r1, [r4, #24]
    e888:	bl	e1d8 <rb_event_frequency>
    e88c:	mov	r5, r0
    e890:	bl	47f0 <rb_current_time@plt>
    e894:	add	r0, r5, r0
    e898:	ldr	r3, [r4, #28]
    e89c:	cmp	r0, r3
    e8a0:	popge	{r4, r5, r6, pc}
    e8a4:	bl	47f0 <rb_current_time@plt>
    e8a8:	add	r0, r5, r0
    e8ac:	str	r0, [r4, #28]
    e8b0:	pop	{r4, r5, r6, pc}

0000e8b4 <rb_event_next>:
    e8b4:	ldr	r3, [pc, #8]	; e8c4 <rb_event_next+0x10>
    e8b8:	add	r3, pc, r3
    e8bc:	ldr	r0, [r3]
    e8c0:	bx	lr
    e8c4:	.word	0x00019bc4

0000e8c8 <rb_ctime>:
    e8c8:	push	{r4, r5, lr}
    e8cc:	sub	sp, sp, #84	; 0x54
    e8d0:	str	r0, [sp, #28]
    e8d4:	mov	r4, r1
    e8d8:	mov	r5, r2
    e8dc:	add	r1, sp, #36	; 0x24
    e8e0:	add	r0, sp, #28
    e8e4:	bl	49f4 <gmtime_r@plt>
    e8e8:	cmp	r4, #0
    e8ec:	beq	e968 <rb_ctime+0xa0>
    e8f0:	cmp	r0, #0
    e8f4:	beq	e978 <rb_ctime+0xb0>
    e8f8:	ldr	r2, [pc, #144]	; e990 <rb_ctime+0xc8>
    e8fc:	add	r2, pc, r2
    e900:	ldr	r3, [r0, #24]
    e904:	ldr	r3, [r2, r3, lsl #2]
    e908:	ldr	r1, [r0, #20]
    e90c:	add	r1, r1, #1888	; 0x760
    e910:	add	r1, r1, #12
    e914:	str	r1, [sp, #20]
    e918:	ldr	r1, [r0]
    e91c:	str	r1, [sp, #16]
    e920:	ldr	r1, [r0, #4]
    e924:	str	r1, [sp, #12]
    e928:	ldr	r1, [r0, #8]
    e92c:	str	r1, [sp, #8]
    e930:	ldr	r1, [r0, #12]
    e934:	str	r1, [sp, #4]
    e938:	ldr	r1, [r0, #16]
    e93c:	add	r2, r2, r1, lsl #2
    e940:	ldr	r2, [r2, #28]
    e944:	str	r2, [sp]
    e948:	ldr	r2, [pc, #68]	; e994 <rb_ctime+0xcc>
    e94c:	add	r2, pc, r2
    e950:	mov	r1, r5
    e954:	mov	r0, r4
    e958:	bl	4bb0 <snprintf@plt>
    e95c:	mov	r0, r4
    e960:	add	sp, sp, #84	; 0x54
    e964:	pop	{r4, r5, pc}
    e968:	mov	r5, #128	; 0x80
    e96c:	ldr	r4, [pc, #36]	; e998 <rb_ctime+0xd0>
    e970:	add	r4, pc, r4
    e974:	b	e8f0 <rb_ctime+0x28>
    e978:	mov	r2, r5
    e97c:	ldr	r1, [pc, #24]	; e99c <rb_ctime+0xd4>
    e980:	add	r1, pc, r1
    e984:	mov	r0, r4
    e988:	bl	46a0 <rb_strlcpy@plt>
    e98c:	b	e95c <rb_ctime+0x94>
    e990:	.word	0x0001955c
    e994:	.word	0x00008514
    e998:	.word	0x0002c4d8
    e99c:	.word	0x00008820

0000e9a0 <rb_date>:
    e9a0:	push	{r4, r5, lr}
    e9a4:	sub	sp, sp, #84	; 0x54
    e9a8:	str	r0, [sp, #28]
    e9ac:	mov	r4, r1
    e9b0:	mov	r5, r2
    e9b4:	add	r1, sp, #36	; 0x24
    e9b8:	add	r0, sp, #28
    e9bc:	bl	49f4 <gmtime_r@plt>
    e9c0:	cmp	r0, #0
    e9c4:	beq	ea3c <rb_date+0x9c>
    e9c8:	ldr	r2, [pc, #132]	; ea54 <rb_date+0xb4>
    e9cc:	add	r2, pc, r2
    e9d0:	ldr	r3, [r0, #24]
    e9d4:	add	r3, r2, r3, lsl #2
    e9d8:	ldr	r3, [r3, #76]	; 0x4c
    e9dc:	ldr	r1, [r0]
    e9e0:	str	r1, [sp, #20]
    e9e4:	ldr	r1, [r0, #4]
    e9e8:	str	r1, [sp, #16]
    e9ec:	ldr	r1, [r0, #8]
    e9f0:	str	r1, [sp, #12]
    e9f4:	ldr	r1, [r0, #20]
    e9f8:	add	r1, r1, #1888	; 0x760
    e9fc:	add	r1, r1, #12
    ea00:	str	r1, [sp, #8]
    ea04:	ldr	r1, [r0, #12]
    ea08:	str	r1, [sp, #4]
    ea0c:	ldr	r1, [r0, #16]
    ea10:	add	r2, r2, r1, lsl #2
    ea14:	ldr	r2, [r2, #104]	; 0x68
    ea18:	str	r2, [sp]
    ea1c:	ldr	r2, [pc, #52]	; ea58 <rb_date+0xb8>
    ea20:	add	r2, pc, r2
    ea24:	mov	r1, r5
    ea28:	mov	r0, r4
    ea2c:	bl	4bb0 <snprintf@plt>
    ea30:	mov	r0, r4
    ea34:	add	sp, sp, #84	; 0x54
    ea38:	pop	{r4, r5, pc}
    ea3c:	mov	r2, r5
    ea40:	ldr	r1, [pc, #20]	; ea5c <rb_date+0xbc>
    ea44:	add	r1, pc, r1
    ea48:	mov	r0, r4
    ea4c:	bl	46a0 <rb_strlcpy@plt>
    ea50:	b	ea30 <rb_date+0x90>
    ea54:	.word	0x0001948c
    ea58:	.word	0x0000845c
    ea5c:	.word	0x0000875c

0000ea60 <rb_current_time>:
    ea60:	ldr	r3, [pc, #8]	; ea70 <rb_current_time+0x10>
    ea64:	add	r3, pc, r3
    ea68:	ldr	r0, [r3, #128]	; 0x80
    ea6c:	bx	lr
    ea70:	.word	0x0002c3e4

0000ea74 <rb_current_time_tv>:
    ea74:	ldr	r0, [pc, #8]	; ea84 <rb_current_time_tv+0x10>
    ea78:	add	r0, pc, r0
    ea7c:	add	r0, r0, #128	; 0x80
    ea80:	bx	lr
    ea84:	.word	0x0002c3d0

0000ea88 <rb_lib_log>:
    ea88:	push	{r0, r1, r2, r3}
    ea8c:	push	{r4, r5, lr}
    ea90:	sub	sp, sp, #12
    ea94:	ldr	r3, [pc, #76]	; eae8 <rb_lib_log+0x60>
    ea98:	add	r3, pc, r3
    ea9c:	ldr	r3, [r3, #136]	; 0x88
    eaa0:	cmp	r3, #0
    eaa4:	beq	ead8 <rb_lib_log+0x50>
    eaa8:	add	r3, sp, #28
    eaac:	str	r3, [sp, #4]
    eab0:	ldr	r5, [pc, #52]	; eaec <rb_lib_log+0x64>
    eab4:	add	r5, pc, r5
    eab8:	add	r4, r5, #140	; 0x8c
    eabc:	ldr	r2, [sp, #24]
    eac0:	mov	r1, #512	; 0x200
    eac4:	mov	r0, r4
    eac8:	bl	455c <vsnprintf@plt>
    eacc:	ldr	r3, [r5, #136]	; 0x88
    ead0:	mov	r0, r4
    ead4:	blx	r3
    ead8:	add	sp, sp, #12
    eadc:	pop	{r4, r5, lr}
    eae0:	add	sp, sp, #16
    eae4:	bx	lr
    eae8:	.word	0x0002c3b0
    eaec:	.word	0x0002c394

0000eaf0 <rb_lib_die>:
    eaf0:	push	{r0, r1, r2, r3}
    eaf4:	push	{r4, r5, lr}
    eaf8:	sub	sp, sp, #12
    eafc:	ldr	r3, [pc, #80]	; eb54 <rb_lib_die+0x64>
    eb00:	add	r3, pc, r3
    eb04:	ldr	r3, [r3, #652]	; 0x28c
    eb08:	cmp	r3, #0
    eb0c:	beq	eb50 <rb_lib_die+0x60>
    eb10:	add	r3, sp, #28
    eb14:	str	r3, [sp, #4]
    eb18:	ldr	r5, [pc, #56]	; eb58 <rb_lib_die+0x68>
    eb1c:	add	r5, pc, r5
    eb20:	add	r4, r5, #140	; 0x8c
    eb24:	ldr	r2, [sp, #24]
    eb28:	mov	r1, #512	; 0x200
    eb2c:	mov	r0, r4
    eb30:	bl	455c <vsnprintf@plt>
    eb34:	ldr	r3, [r5, #652]	; 0x28c
    eb38:	mov	r0, r4
    eb3c:	blx	r3
    eb40:	add	sp, sp, #12
    eb44:	pop	{r4, r5, lr}
    eb48:	add	sp, sp, #16
    eb4c:	bx	lr
    eb50:	bl	43c4 <abort@plt>
    eb54:	.word	0x0002c348
    eb58:	.word	0x0002c32c

0000eb5c <rb_lib_restart>:
    eb5c:	push	{r0, r1, r2, r3}
    eb60:	push	{lr}		; (str lr, [sp, #-4]!)
    eb64:	sub	sp, sp, #12
    eb68:	ldr	r3, [pc, #68]	; ebb4 <rb_lib_restart+0x58>
    eb6c:	add	r3, pc, r3
    eb70:	ldr	r3, [r3, #656]	; 0x290
    eb74:	cmp	r3, #0
    eb78:	beq	ebb0 <rb_lib_restart+0x54>
    eb7c:	add	r3, sp, #20
    eb80:	str	r3, [sp, #4]
    eb84:	ldr	r5, [pc, #44]	; ebb8 <rb_lib_restart+0x5c>
    eb88:	add	r5, pc, r5
    eb8c:	add	r4, r5, #140	; 0x8c
    eb90:	ldr	r2, [sp, #16]
    eb94:	mov	r1, #512	; 0x200
    eb98:	mov	r0, r4
    eb9c:	bl	455c <vsnprintf@plt>
    eba0:	ldr	r3, [r5, #656]	; 0x290
    eba4:	mov	r0, r4
    eba8:	blx	r3
    ebac:	bl	43c4 <abort@plt>
    ebb0:	bl	43c4 <abort@plt>
    ebb4:	.word	0x0002c2dc
    ebb8:	.word	0x0002c2c0

0000ebbc <rb_set_time>:
    ebbc:	push	{lr}		; (str lr, [sp, #-4]!)
    ebc0:	sub	sp, sp, #12
    ebc4:	mov	r1, #0
    ebc8:	mov	r0, sp
    ebcc:	bl	45bc <rb_gettimeofday@plt>
    ebd0:	cmn	r0, #1
    ebd4:	beq	ec10 <rb_set_time+0x54>
    ebd8:	ldr	r3, [sp]
    ebdc:	ldr	r2, [pc, #96]	; ec44 <rb_set_time+0x88>
    ebe0:	add	r2, pc, r2
    ebe4:	ldr	r0, [r2, #128]	; 0x80
    ebe8:	cmp	r3, r0
    ebec:	blt	ec38 <rb_set_time+0x7c>
    ebf0:	ldr	r3, [pc, #80]	; ec48 <rb_set_time+0x8c>
    ebf4:	add	r3, pc, r3
    ebf8:	add	r3, r3, #128	; 0x80
    ebfc:	add	r2, sp, #8
    ec00:	ldmdb	r2, {r0, r1}
    ec04:	stm	r3, {r0, r1}
    ec08:	add	sp, sp, #12
    ec0c:	pop	{pc}		; (ldr pc, [sp], #4)
    ec10:	bl	4ce8 <__errno_location@plt>
    ec14:	ldr	r0, [r0]
    ec18:	bl	43a0 <strerror@plt>
    ec1c:	mov	r1, r0
    ec20:	ldr	r0, [pc, #36]	; ec4c <rb_set_time+0x90>
    ec24:	add	r0, pc, r0
    ec28:	bl	491c <rb_lib_log@plt>
    ec2c:	ldr	r0, [pc, #28]	; ec50 <rb_set_time+0x94>
    ec30:	add	r0, pc, r0
    ec34:	bl	4a60 <rb_lib_restart@plt>
    ec38:	sub	r0, r0, r3
    ec3c:	bl	e830 <rb_set_back_events>
    ec40:	b	ebf0 <rb_set_time+0x34>
    ec44:	.word	0x0002c268
    ec48:	.word	0x0002c254
    ec4c:	.word	0x00008280
    ec50:	.word	0x00008288

0000ec54 <rb_lib_version>:
    ec54:	push	{r4, r5, lr}
    ec58:	sub	sp, sp, #524	; 0x20c
    ec5c:	ldr	r4, [pc, #76]	; ecb0 <rb_lib_version+0x5c>
    ec60:	add	r4, pc, r4
    ec64:	mov	r1, #512	; 0x200
    ec68:	add	r5, sp, #8
    ec6c:	mov	r0, r5
    ec70:	bl	dca4 <rb_get_ssl_info>
    ec74:	ldr	r3, [pc, #56]	; ecb4 <rb_lib_version+0x60>
    ec78:	ldr	r3, [r4, r3]
    ec7c:	ldr	r3, [r3]
    ec80:	ldr	r4, [pc, #48]	; ecb8 <rb_lib_version+0x64>
    ec84:	add	r4, pc, r4
    ec88:	add	r4, r4, #660	; 0x294
    ec8c:	str	r5, [sp]
    ec90:	ldr	r2, [pc, #36]	; ecbc <rb_lib_version+0x68>
    ec94:	add	r2, pc, r2
    ec98:	mov	r1, #640	; 0x280
    ec9c:	mov	r0, r4
    eca0:	bl	4bb0 <snprintf@plt>
    eca4:	mov	r0, r4
    eca8:	add	sp, sp, #524	; 0x20c
    ecac:	pop	{r4, r5, pc}
    ecb0:	.word	0x00019398
    ecb4:	.word	0x000003ac
    ecb8:	.word	0x0002c1c4
    ecbc:	.word	0x00008234

0000ecc0 <rb_lib_init>:
    ecc0:	push	{r4, r5, r6, r7, r8, lr}
    ecc4:	mov	r7, r0
    ecc8:	mov	r6, r1
    eccc:	mov	r5, r2
    ecd0:	mov	r4, r3
    ecd4:	bl	4994 <rb_set_time@plt>
    ecd8:	ldr	r3, [pc, #68]	; ed24 <rb_lib_init+0x64>
    ecdc:	add	r3, pc, r3
    ece0:	str	r7, [r3, #136]	; 0x88
    ece4:	str	r6, [r3, #656]	; 0x290
    ece8:	str	r5, [r3, #652]	; 0x28c
    ecec:	bl	4604 <rb_event_init@plt>
    ecf0:	bl	49dc <rb_init_bh@plt>
    ecf4:	ldr	r2, [sp, #32]
    ecf8:	ldr	r1, [sp, #24]
    ecfc:	mov	r0, r4
    ed00:	bl	4afc <rb_fdlist_init@plt>
    ed04:	bl	4388 <rb_init_netio@plt>
    ed08:	ldr	r0, [sp, #28]
    ed0c:	bl	48d4 <rb_init_rb_dlink_nodes@plt>
    ed10:	bl	be80 <rb_io_supports_event>
    ed14:	cmp	r0, #0
    ed18:	popeq	{r4, r5, r6, r7, r8, pc}
    ed1c:	bl	beac <rb_io_init_event>
    ed20:	pop	{r4, r5, r6, r7, r8, pc}
    ed24:	.word	0x0002c16c

0000ed28 <rb_lib_loop>:
    ed28:	push	{r7, lr}
    ed2c:	mov	r5, r0
    ed30:	bl	4994 <rb_set_time@plt>
    ed34:	bl	be80 <rb_io_supports_event>
    ed38:	cmp	r0, #0
    ed3c:	beq	ed50 <rb_lib_loop+0x28>
    ed40:	mvn	r4, #0
    ed44:	mov	r0, r4
    ed48:	bl	4544 <rb_select@plt>
    ed4c:	b	ed44 <rb_lib_loop+0x1c>
    ed50:	mvn	r7, #0
    ed54:	mov	r6, #1000	; 0x3e8
    ed58:	b	ed64 <rb_lib_loop+0x3c>
    ed5c:	bl	4544 <rb_select@plt>
    ed60:	bl	49c4 <rb_event_run@plt>
    ed64:	cmp	r5, #0
    ed68:	bne	ed94 <rb_lib_loop+0x6c>
    ed6c:	bl	4c34 <rb_event_next@plt>
    ed70:	subs	r4, r0, #0
    ed74:	movle	r0, r7
    ed78:	ble	ed5c <rb_lib_loop+0x34>
    ed7c:	bl	47f0 <rb_current_time@plt>
    ed80:	sub	r0, r4, r0
    ed84:	cmp	r0, #0
    ed88:	mulgt	r0, r6, r0
    ed8c:	movle	r0, r6
    ed90:	b	ed5c <rb_lib_loop+0x34>
    ed94:	mov	r0, r5
    ed98:	bl	4544 <rb_select@plt>
    ed9c:	b	ed60 <rb_lib_loop+0x38>

0000eda0 <rb_strtok_r>:
    eda0:	push	{r4, lr}
    eda4:	bl	4a54 <strtok_r@plt>
    eda8:	pop	{r4, pc}

0000edac <rb_base64_encode>:
    edac:	adds	r3, r1, #2
    edb0:	bmi	eefc <rb_base64_encode+0x150>
    edb4:	push	{r4, r5, r6, lr}
    edb8:	mov	r6, r0
    edbc:	mov	r4, r1
    edc0:	ldr	r1, [pc, #316]	; ef04 <rb_base64_encode+0x158>
    edc4:	smull	r2, r1, r1, r3
    edc8:	sub	r1, r1, r3, asr #31
    edcc:	add	r1, r1, r1, lsl #2
    edd0:	mov	r0, #1
    edd4:	bl	45ec <calloc@plt>
    edd8:	cmp	r0, #0
    eddc:	beq	eecc <rb_base64_encode+0x120>
    ede0:	cmp	r4, #2
    ede4:	movle	r5, r0
    ede8:	ble	ee60 <rb_base64_encode+0xb4>
    edec:	add	r1, r0, #4
    edf0:	add	ip, r6, #3
    edf4:	ldr	lr, [pc, #268]	; ef08 <rb_base64_encode+0x15c>
    edf8:	add	lr, pc, lr
    edfc:	mov	r6, ip
    ee00:	ldrb	r2, [ip, #-3]
    ee04:	mov	r5, r1
    ee08:	ldrb	r3, [lr, r2, lsr #2]
    ee0c:	strb	r3, [r1, #-4]
    ee10:	ldrb	r3, [ip, #-2]
    ee14:	lsl	r2, r2, #4
    ee18:	and	r2, r2, #48	; 0x30
    ee1c:	add	r2, lr, r2
    ee20:	ldrb	r2, [r2, r3, lsr #4]
    ee24:	strb	r2, [r1, #-3]
    ee28:	ldrb	r2, [ip, #-1]
    ee2c:	lsl	r3, r3, #2
    ee30:	and	r3, r3, #60	; 0x3c
    ee34:	add	r3, lr, r3
    ee38:	ldrb	r3, [r3, r2, lsr #6]
    ee3c:	strb	r3, [r1, #-2]
    ee40:	and	r2, r2, #63	; 0x3f
    ee44:	ldrb	r3, [lr, r2]
    ee48:	strb	r3, [r1, #-1]
    ee4c:	sub	r4, r4, #3
    ee50:	add	r1, r1, #4
    ee54:	add	ip, ip, #3
    ee58:	cmp	r4, #2
    ee5c:	bgt	edfc <rb_base64_encode+0x50>
    ee60:	cmp	r4, #0
    ee64:	beq	eec0 <rb_base64_encode+0x114>
    ee68:	ldrb	r3, [r6]
    ee6c:	ldr	r2, [pc, #152]	; ef0c <rb_base64_encode+0x160>
    ee70:	add	r2, pc, r2
    ee74:	ldrb	r2, [r2, r3, lsr #2]
    ee78:	strb	r2, [r5]
    ee7c:	cmp	r4, #1
    ee80:	ble	eed0 <rb_base64_encode+0x124>
    ee84:	ldrb	r2, [r6, #1]
    ee88:	ldr	r1, [pc, #128]	; ef10 <rb_base64_encode+0x164>
    ee8c:	add	r1, pc, r1
    ee90:	lsl	r3, r3, #4
    ee94:	and	r3, r3, #48	; 0x30
    ee98:	add	r3, r1, r3
    ee9c:	ldrb	r3, [r3, r2, lsr #4]
    eea0:	strb	r3, [r5, #1]
    eea4:	lsl	r2, r2, #2
    eea8:	and	r2, r2, #60	; 0x3c
    eeac:	ldrb	r3, [r1, r2]
    eeb0:	strb	r3, [r5, #2]
    eeb4:	mov	r3, #61	; 0x3d
    eeb8:	strb	r3, [r5, #3]
    eebc:	add	r5, r5, #4
    eec0:	mov	r3, #0
    eec4:	strb	r3, [r5]
    eec8:	pop	{r4, r5, r6, pc}
    eecc:	bl	4988 <rb_outofmemory@plt>
    eed0:	lsl	r3, r3, #4
    eed4:	and	r3, r3, #48	; 0x30
    eed8:	ldr	r2, [pc, #52]	; ef14 <rb_base64_encode+0x168>
    eedc:	add	r2, pc, r2
    eee0:	ldrb	r3, [r2, r3]
    eee4:	strb	r3, [r5, #1]
    eee8:	mov	r3, #61	; 0x3d
    eeec:	strb	r3, [r5, #2]
    eef0:	strb	r3, [r5, #3]
    eef4:	add	r5, r5, #4
    eef8:	b	eec0 <rb_base64_encode+0x114>
    eefc:	mov	r0, #0
    ef00:	bx	lr
    ef04:	.word	0x55555556
    ef08:	.word	0x00007e24
    ef0c:	.word	0x00007dac
    ef10:	.word	0x00007d90
    ef14:	.word	0x00007d40

0000ef18 <rb_base64_decode>:
    ef18:	push	{r4, r5, r6, r7, r8, lr}
    ef1c:	mov	r4, r0
    ef20:	mov	r6, r1
    ef24:	mov	r5, r2
    ef28:	add	r1, r1, #1
    ef2c:	mov	r0, #1
    ef30:	bl	45ec <calloc@plt>
    ef34:	cmp	r0, #0
    ef38:	beq	ef54 <rb_base64_decode+0x3c>
    ef3c:	mov	r1, r6
    ef40:	mov	r6, #0
    ef44:	mov	lr, r6
    ef48:	ldr	r7, [pc, #300]	; f07c <rb_base64_decode+0x164>
    ef4c:	add	r7, pc, r7
    ef50:	b	ef68 <rb_base64_decode+0x50>
    ef54:	bl	4988 <rb_outofmemory@plt>
    ef58:	lsl	r2, r2, #2
    ef5c:	strb	r2, [r0, r6]
    ef60:	add	lr, lr, #1
    ef64:	sub	r1, r1, #1
    ef68:	ldrb	r3, [r4], #1
    ef6c:	cmp	r3, #0
    ef70:	beq	f01c <rb_base64_decode+0x104>
    ef74:	cmp	r3, #61	; 0x3d
    ef78:	cmpne	r1, #0
    ef7c:	ble	f014 <rb_base64_decode+0xfc>
    ef80:	add	r3, r7, r3, lsl #1
    ef84:	ldrsh	r2, [r3, #68]	; 0x44
    ef88:	cmp	r2, #0
    ef8c:	blt	ef64 <rb_base64_decode+0x4c>
    ef90:	asr	r3, lr, #31
    ef94:	lsr	ip, r3, #30
    ef98:	add	r3, lr, ip
    ef9c:	and	r3, r3, #3
    efa0:	sub	r3, r3, ip
    efa4:	cmp	r3, #3
    efa8:	addls	pc, pc, r3, lsl #2
    efac:	b	ef60 <rb_base64_decode+0x48>
    efb0:	b	ef58 <rb_base64_decode+0x40>
    efb4:	b	efc0 <rb_base64_decode+0xa8>
    efb8:	b	efe0 <rb_base64_decode+0xc8>
    efbc:	b	f000 <rb_base64_decode+0xe8>
    efc0:	add	ip, r6, #1
    efc4:	ldrb	r3, [r0, r6]
    efc8:	orr	r3, r3, r2, asr #4
    efcc:	strb	r3, [r0, r6]
    efd0:	lsl	r2, r2, #4
    efd4:	strb	r2, [r0, ip]
    efd8:	mov	r6, ip
    efdc:	b	ef60 <rb_base64_decode+0x48>
    efe0:	add	ip, r6, #1
    efe4:	ldrb	r3, [r0, r6]
    efe8:	orr	r3, r3, r2, asr #2
    efec:	strb	r3, [r0, r6]
    eff0:	lsl	r2, r2, #6
    eff4:	strb	r2, [r0, ip]
    eff8:	mov	r6, ip
    effc:	b	ef60 <rb_base64_decode+0x48>
    f000:	ldrb	r3, [r0, r6]
    f004:	orr	r2, r3, r2
    f008:	strb	r2, [r0, r6]
    f00c:	add	r6, r6, #1
    f010:	b	ef60 <rb_base64_decode+0x48>
    f014:	cmp	r3, #61	; 0x3d
    f018:	beq	f02c <rb_base64_decode+0x114>
    f01c:	mov	r3, #0
    f020:	strb	r3, [r0, r6]
    f024:	str	r6, [r5]
    f028:	pop	{r4, r5, r6, r7, r8, pc}
    f02c:	asr	r3, lr, #31
    f030:	lsr	r2, r3, #30
    f034:	add	r3, lr, r2
    f038:	and	r3, r3, #3
    f03c:	sub	r3, r3, r2
    f040:	cmp	r3, #2
    f044:	beq	f064 <rb_base64_decode+0x14c>
    f048:	cmp	r3, #3
    f04c:	beq	f074 <rb_base64_decode+0x15c>
    f050:	cmp	r3, #1
    f054:	bne	f01c <rb_base64_decode+0x104>
    f058:	bl	46f4 <free@plt>
    f05c:	mov	r0, #0
    f060:	pop	{r4, r5, r6, r7, r8, pc}
    f064:	add	r3, r6, #1
    f068:	mov	r2, #0
    f06c:	strb	r2, [r0, r3]
    f070:	b	f01c <rb_base64_decode+0x104>
    f074:	mov	r3, r6
    f078:	b	f068 <rb_base64_decode+0x150>
    f07c:	.word	0x00007cd0

0000f080 <rb_outofmemory>:
    f080:	push	{r4, lr}
    f084:	ldr	r3, [pc, #56]	; f0c4 <rb_outofmemory+0x44>
    f088:	add	r3, pc, r3
    f08c:	ldr	r3, [r3]
    f090:	cmp	r3, #0
    f094:	beq	f09c <rb_outofmemory+0x1c>
    f098:	bl	43c4 <abort@plt>
    f09c:	mov	r2, #1
    f0a0:	ldr	r3, [pc, #32]	; f0c8 <rb_outofmemory+0x48>
    f0a4:	add	r3, pc, r3
    f0a8:	str	r2, [r3]
    f0ac:	ldr	r0, [pc, #24]	; f0cc <rb_outofmemory+0x4c>
    f0b0:	add	r0, pc, r0
    f0b4:	bl	491c <rb_lib_log@plt>
    f0b8:	ldr	r0, [pc, #16]	; f0d0 <rb_outofmemory+0x50>
    f0bc:	add	r0, pc, r0
    f0c0:	bl	4a60 <rb_lib_restart@plt>
    f0c4:	.word	0x0002c2d4
    f0c8:	.word	0x0002c2b8
    f0cc:	.word	0x00007f28
    f0d0:	.word	0x00007f40

0000f0d4 <rb_linebuf_done_line>:
    f0d4:	push	{r4, r5, r6, lr}
    f0d8:	mov	r4, r0
    f0dc:	mov	r5, r1
    f0e0:	ldr	r3, [r2, #8]
    f0e4:	cmp	r3, #0
    f0e8:	ldrne	r1, [r2, #4]
    f0ec:	strne	r1, [r3, #4]
    f0f0:	ldreq	r3, [r2, #4]
    f0f4:	streq	r3, [r0, #4]
    f0f8:	ldr	r3, [r2, #4]
    f0fc:	cmp	r3, #0
    f100:	ldrne	r1, [r2, #8]
    f104:	strne	r1, [r3, #8]
    f108:	ldreq	r3, [r2, #8]
    f10c:	streq	r3, [r0]
    f110:	mov	r3, #0
    f114:	str	r3, [r2, #4]
    f118:	str	r3, [r2, #8]
    f11c:	ldr	r3, [r0, #8]
    f120:	sub	r3, r3, #1
    f124:	str	r3, [r0, #8]
    f128:	mov	r0, r2
    f12c:	bl	4844 <rb_free_rb_dlink_node@plt>
    f130:	ldr	r3, [r4, #16]
    f134:	sub	r3, r3, #1
    f138:	str	r3, [r4, #16]
    f13c:	ldr	r3, [r4, #12]
    f140:	ldr	r2, [r5, #1028]	; 0x404
    f144:	sub	r3, r3, r2
    f148:	str	r3, [r4, #12]
    f14c:	ldr	r3, [r4, #24]
    f150:	sub	r3, r3, #1
    f154:	str	r3, [r4, #24]
    f158:	ldr	r3, [r5, #1032]	; 0x408
    f15c:	sub	r3, r3, #1
    f160:	str	r3, [r5, #1032]	; 0x408
    f164:	cmp	r3, #0
    f168:	popne	{r4, r5, r6, pc}
    f16c:	ldr	r3, [pc, #28]	; f190 <rb_linebuf_done_line+0xbc>
    f170:	add	r3, pc, r3
    f174:	ldr	r2, [r3]
    f178:	sub	r2, r2, #1
    f17c:	str	r2, [r3]
    f180:	mov	r1, r5
    f184:	ldr	r0, [r3, #4]
    f188:	bl	48c8 <rb_bh_free@plt>
    f18c:	pop	{r4, r5, r6, pc}
    f190:	.word	0x0002c1f0

0000f194 <rb_linebuf_new_line>:
    f194:	push	{r4, r5, r6, lr}
    f198:	mov	r4, r0
    f19c:	ldr	r3, [pc, #152]	; f23c <rb_linebuf_new_line+0xa8>
    f1a0:	add	r3, pc, r3
    f1a4:	ldr	r0, [r3, #4]
    f1a8:	bl	4958 <rb_bh_alloc@plt>
    f1ac:	subs	r5, r0, #0
    f1b0:	beq	f224 <rb_linebuf_new_line+0x90>
    f1b4:	ldr	r2, [pc, #132]	; f240 <rb_linebuf_new_line+0xac>
    f1b8:	add	r2, pc, r2
    f1bc:	ldr	r3, [r2]
    f1c0:	add	r3, r3, #1
    f1c4:	str	r3, [r2]
    f1c8:	bl	4b80 <rb_make_rb_dlink_node@plt>
    f1cc:	str	r5, [r0]
    f1d0:	mov	r3, #0
    f1d4:	str	r3, [r0, #8]
    f1d8:	ldr	r3, [r4, #4]
    f1dc:	str	r3, [r0, #4]
    f1e0:	ldr	r3, [r4, #4]
    f1e4:	cmp	r3, #0
    f1e8:	strne	r0, [r3, #8]
    f1ec:	beq	f22c <rb_linebuf_new_line+0x98>
    f1f0:	str	r0, [r4, #4]
    f1f4:	ldr	r3, [r4, #8]
    f1f8:	add	r3, r3, #1
    f1fc:	str	r3, [r4, #8]
    f200:	ldr	r3, [r5, #1032]	; 0x408
    f204:	add	r3, r3, #1
    f208:	str	r3, [r5, #1032]	; 0x408
    f20c:	ldr	r3, [r4, #16]
    f210:	add	r3, r3, #1
    f214:	str	r3, [r4, #16]
    f218:	ldr	r3, [r4, #24]
    f21c:	add	r3, r3, #1
    f220:	str	r3, [r4, #24]
    f224:	mov	r0, r5
    f228:	pop	{r4, r5, r6, pc}
    f22c:	ldr	r3, [r4]
    f230:	cmp	r3, #0
    f234:	streq	r0, [r4]
    f238:	b	f1f0 <rb_linebuf_new_line+0x5c>
    f23c:	.word	0x0002c1c0
    f240:	.word	0x0002c1a8

0000f244 <rb_linebuf_copy_line>:
    f244:	push	{r4, r5, r6, r7, r8, lr}
    f248:	ldr	r8, [r1, #1028]	; 0x404
    f24c:	add	r6, r1, r8
    f250:	mov	ip, #0
    f254:	strb	ip, [r1, #1026]	; 0x402
    f258:	ldrb	ip, [r1, #1025]	; 0x401
    f25c:	cmp	ip, #1
    f260:	moveq	r5, #0
    f264:	beq	f378 <rb_linebuf_copy_line+0x134>
    f268:	cmp	r3, #0
    f26c:	beq	f380 <rb_linebuf_copy_line+0x13c>
    f270:	ldrb	ip, [r2]
    f274:	cmp	ip, #13
    f278:	cmpne	ip, #10
    f27c:	beq	f44c <rb_linebuf_copy_line+0x208>
    f280:	add	r4, r2, #1
    f284:	mov	ip, r3
    f288:	mov	lr, r4
    f28c:	subs	ip, ip, #1
    f290:	beq	f2cc <rb_linebuf_copy_line+0x88>
    f294:	ldrb	r5, [r4], #1
    f298:	cmp	r5, #13
    f29c:	cmpne	r5, #10
    f2a0:	bne	f288 <rb_linebuf_copy_line+0x44>
    f2a4:	ldrb	r4, [lr]
    f2a8:	cmp	r4, #13
    f2ac:	cmpne	r4, #10
    f2b0:	bne	f2cc <rb_linebuf_copy_line+0x88>
    f2b4:	subs	ip, ip, #1
    f2b8:	beq	f2cc <rb_linebuf_copy_line+0x88>
    f2bc:	ldrb	r4, [lr, #1]!
    f2c0:	cmp	r4, #13
    f2c4:	cmpne	r4, #10
    f2c8:	beq	f2b4 <rb_linebuf_copy_line+0x70>
    f2cc:	sub	r5, r3, ip
    f2d0:	cmn	r5, #1
    f2d4:	beq	f378 <rb_linebuf_copy_line+0x134>
    f2d8:	mov	ip, r2
    f2dc:	mov	r4, r1
    f2e0:	mov	r7, r0
    f2e4:	rsb	r8, r8, #1020	; 0x3fc
    f2e8:	add	r8, r8, #2
    f2ec:	cmp	r8, r5
    f2f0:	bge	f390 <rb_linebuf_copy_line+0x14c>
    f2f4:	mov	r2, r8
    f2f8:	mov	r1, ip
    f2fc:	mov	r0, r6
    f300:	bl	4808 <memcpy@plt>
    f304:	mov	r3, #0
    f308:	strb	r3, [r4, #1022]	; 0x3fe
    f30c:	add	r3, r4, #1020	; 0x3fc
    f310:	add	r3, r3, #1
    f314:	cmp	r8, #0
    f318:	beq	f358 <rb_linebuf_copy_line+0x114>
    f31c:	ldrb	r2, [r4, #1021]	; 0x3fd
    f320:	cmp	r2, #10
    f324:	cmpne	r2, #13
    f328:	bne	f358 <rb_linebuf_copy_line+0x114>
    f32c:	mov	r2, r3
    f330:	rsb	r8, r8, #1
    f334:	add	r3, r3, r8
    f338:	mov	r1, #0
    f33c:	strb	r1, [r2]
    f340:	cmp	r3, r2
    f344:	beq	f358 <rb_linebuf_copy_line+0x114>
    f348:	ldrb	ip, [r2, #-1]!
    f34c:	cmp	ip, #10
    f350:	cmpne	ip, #13
    f354:	beq	f33c <rb_linebuf_copy_line+0xf8>
    f358:	mov	r3, #1
    f35c:	strb	r3, [r4, #1025]	; 0x401
    f360:	ldr	r3, [pc, #256]	; f468 <rb_linebuf_copy_line+0x224>
    f364:	str	r3, [r4, #1028]	; 0x404
    f368:	ldr	r3, [r7, #12]
    f36c:	add	r3, r3, #1020	; 0x3fc
    f370:	add	r3, r3, #2
    f374:	str	r3, [r7, #12]
    f378:	mov	r0, r5
    f37c:	pop	{r4, r5, r6, r7, r8, pc}
    f380:	mov	r5, r3
    f384:	b	f2d8 <rb_linebuf_copy_line+0x94>
    f388:	mov	r5, #0
    f38c:	b	f2d8 <rb_linebuf_copy_line+0x94>
    f390:	mov	r2, r5
    f394:	mov	r1, ip
    f398:	mov	r0, r6
    f39c:	bl	4808 <memcpy@plt>
    f3a0:	add	r3, r6, r5
    f3a4:	mov	r2, #0
    f3a8:	strb	r2, [r6, r5]
    f3ac:	ldrb	r2, [r3, #-1]
    f3b0:	cmp	r2, #13
    f3b4:	cmpne	r2, #10
    f3b8:	bne	f420 <rb_linebuf_copy_line+0x1dc>
    f3bc:	cmp	r5, #0
    f3c0:	beq	f444 <rb_linebuf_copy_line+0x200>
    f3c4:	cmp	r2, #10
    f3c8:	cmpne	r2, #13
    f3cc:	movne	r2, r5
    f3d0:	bne	f3fc <rb_linebuf_copy_line+0x1b8>
    f3d4:	sub	r3, r3, #1
    f3d8:	mov	r2, r5
    f3dc:	mov	r0, #0
    f3e0:	strb	r0, [r3]
    f3e4:	subs	r2, r2, #1
    f3e8:	beq	f3fc <rb_linebuf_copy_line+0x1b8>
    f3ec:	ldrb	r1, [r3, #-1]!
    f3f0:	cmp	r1, #10
    f3f4:	cmpne	r1, #13
    f3f8:	beq	f3e0 <rb_linebuf_copy_line+0x19c>
    f3fc:	mov	r3, #1
    f400:	strb	r3, [r4, #1025]	; 0x401
    f404:	ldr	r3, [r7, #12]
    f408:	add	r3, r3, r2
    f40c:	str	r3, [r7, #12]
    f410:	ldr	r3, [r4, #1028]	; 0x404
    f414:	add	r2, r3, r2
    f418:	str	r2, [r4, #1028]	; 0x404
    f41c:	b	f378 <rb_linebuf_copy_line+0x134>
    f420:	ldr	r3, [r7, #12]
    f424:	add	r3, r3, r5
    f428:	str	r3, [r7, #12]
    f42c:	ldr	r3, [r4, #1028]	; 0x404
    f430:	add	r3, r3, r5
    f434:	str	r3, [r4, #1028]	; 0x404
    f438:	mov	r3, #0
    f43c:	strb	r3, [r4, #1025]	; 0x401
    f440:	b	f378 <rb_linebuf_copy_line+0x134>
    f444:	mov	r2, r5
    f448:	b	f3fc <rb_linebuf_copy_line+0x1b8>
    f44c:	ldrb	ip, [r2]
    f450:	cmp	ip, #10
    f454:	cmpne	ip, #13
    f458:	bne	f388 <rb_linebuf_copy_line+0x144>
    f45c:	mov	lr, r2
    f460:	mov	ip, r3
    f464:	b	f2b4 <rb_linebuf_copy_line+0x70>
    f468:	.word	0x000003fe

0000f46c <rb_linebuf_copy_raw>:
    f46c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f470:	ldr	r7, [r1, #1028]	; 0x404
    f474:	add	r6, r1, r7
    f478:	mov	ip, #1
    f47c:	strb	ip, [r1, #1026]	; 0x402
    f480:	ldrb	ip, [r1, #1025]	; 0x401
    f484:	cmp	ip, #1
    f488:	moveq	r4, #0
    f48c:	beq	f5b8 <rb_linebuf_copy_raw+0x14c>
    f490:	cmp	r3, #0
    f494:	beq	f56c <rb_linebuf_copy_raw+0x100>
    f498:	ldrb	ip, [r2]
    f49c:	cmp	ip, #13
    f4a0:	cmpne	ip, #10
    f4a4:	beq	f5e0 <rb_linebuf_copy_raw+0x174>
    f4a8:	add	r4, r2, #1
    f4ac:	mov	ip, r3
    f4b0:	mov	lr, r4
    f4b4:	subs	ip, ip, #1
    f4b8:	beq	f4f4 <rb_linebuf_copy_raw+0x88>
    f4bc:	ldrb	r5, [r4], #1
    f4c0:	cmp	r5, #10
    f4c4:	cmpne	r5, #13
    f4c8:	bne	f4b0 <rb_linebuf_copy_raw+0x44>
    f4cc:	ldrb	r4, [lr]
    f4d0:	cmp	r4, #13
    f4d4:	cmpne	r4, #10
    f4d8:	bne	f4f4 <rb_linebuf_copy_raw+0x88>
    f4dc:	subs	ip, ip, #1
    f4e0:	beq	f4f4 <rb_linebuf_copy_raw+0x88>
    f4e4:	ldrb	r4, [lr, #1]!
    f4e8:	cmp	r4, #13
    f4ec:	cmpne	r4, #10
    f4f0:	beq	f4dc <rb_linebuf_copy_raw+0x70>
    f4f4:	sub	r4, r3, ip
    f4f8:	cmn	r4, #1
    f4fc:	beq	f5b8 <rb_linebuf_copy_raw+0x14c>
    f500:	mov	r3, r2
    f504:	mov	r8, r1
    f508:	mov	r9, r0
    f50c:	rsb	r5, r7, #1020	; 0x3fc
    f510:	add	r5, r5, #2
    f514:	cmp	r5, r4
    f518:	blt	f57c <rb_linebuf_copy_raw+0x110>
    f51c:	mov	r2, r4
    f520:	mov	r1, r3
    f524:	mov	r0, r6
    f528:	bl	4808 <memcpy@plt>
    f52c:	add	r3, r6, r4
    f530:	mov	r2, #0
    f534:	strb	r2, [r6, r4]
    f538:	ldrb	r3, [r3, #-1]
    f53c:	cmp	r3, #13
    f540:	cmpne	r3, #10
    f544:	bne	f5c0 <rb_linebuf_copy_raw+0x154>
    f548:	mov	r3, #1
    f54c:	strb	r3, [r8, #1025]	; 0x401
    f550:	ldr	r3, [r9, #12]
    f554:	add	r3, r3, r4
    f558:	str	r3, [r9, #12]
    f55c:	ldr	r3, [r8, #1028]	; 0x404
    f560:	add	r3, r3, r4
    f564:	str	r3, [r8, #1028]	; 0x404
    f568:	b	f5b8 <rb_linebuf_copy_raw+0x14c>
    f56c:	mov	r4, r3
    f570:	b	f500 <rb_linebuf_copy_raw+0x94>
    f574:	mov	r4, #0
    f578:	b	f500 <rb_linebuf_copy_raw+0x94>
    f57c:	mov	r2, r5
    f580:	mov	r1, r3
    f584:	mov	r0, r6
    f588:	bl	4808 <memcpy@plt>
    f58c:	mov	r3, #0
    f590:	strb	r3, [r8, #1022]	; 0x3fe
    f594:	mov	r3, #1
    f598:	strb	r3, [r8, #1025]	; 0x401
    f59c:	ldr	r3, [pc, #88]	; f5fc <rb_linebuf_copy_raw+0x190>
    f5a0:	str	r3, [r8, #1028]	; 0x404
    f5a4:	ldr	r3, [r9, #12]
    f5a8:	add	r3, r3, #1020	; 0x3fc
    f5ac:	add	r3, r3, #2
    f5b0:	str	r3, [r9, #12]
    f5b4:	mov	r4, r5
    f5b8:	mov	r0, r4
    f5bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f5c0:	ldr	r3, [r9, #12]
    f5c4:	add	r3, r3, r4
    f5c8:	str	r3, [r9, #12]
    f5cc:	ldr	r3, [r8, #1028]	; 0x404
    f5d0:	add	r3, r3, r4
    f5d4:	str	r3, [r8, #1028]	; 0x404
    f5d8:	strb	r2, [r8, #1025]	; 0x401
    f5dc:	b	f5b8 <rb_linebuf_copy_raw+0x14c>
    f5e0:	ldrb	ip, [r2]
    f5e4:	cmp	ip, #13
    f5e8:	cmpne	ip, #10
    f5ec:	bne	f574 <rb_linebuf_copy_raw+0x108>
    f5f0:	mov	lr, r2
    f5f4:	mov	ip, r3
    f5f8:	b	f4dc <rb_linebuf_copy_raw+0x70>
    f5fc:	.word	0x000003fe

0000f600 <rb_linebuf_init>:
    f600:	push	{r4, lr}
    f604:	ldr	r2, [pc, #28]	; f628 <rb_linebuf_init+0x28>
    f608:	add	r2, pc, r2
    f60c:	mov	r1, r0
    f610:	ldr	r0, [pc, #20]	; f62c <rb_linebuf_init+0x2c>
    f614:	bl	4ab4 <rb_bh_create@plt>
    f618:	ldr	r3, [pc, #16]	; f630 <rb_linebuf_init+0x30>
    f61c:	add	r3, pc, r3
    f620:	str	r0, [r3, #4]
    f624:	pop	{r4, pc}
    f628:	.word	0x00007a04
    f62c:	.word	0x0000040c
    f630:	.word	0x0002bd44

0000f634 <rb_linebuf_newbuf>:
    f634:	mov	r3, #0
    f638:	str	r3, [r0]
    f63c:	str	r3, [r0, #4]
    f640:	str	r3, [r0, #8]
    f644:	str	r3, [r0, #12]
    f648:	str	r3, [r0, #16]
    f64c:	str	r3, [r0, #20]
    f650:	str	r3, [r0, #24]
    f654:	bx	lr

0000f658 <rb_linebuf_donebuf>:
    f658:	push	{r4, lr}
    f65c:	mov	r4, r0
    f660:	ldr	r3, [r0]
    f664:	cmp	r3, #0
    f668:	popeq	{r4, pc}
    f66c:	mov	r2, r3
    f670:	ldr	r1, [r3]
    f674:	mov	r0, r4
    f678:	bl	f0d4 <rb_linebuf_done_line>
    f67c:	ldr	r3, [r4]
    f680:	cmp	r3, #0
    f684:	bne	f66c <rb_linebuf_donebuf+0x14>
    f688:	pop	{r4, pc}

0000f68c <rb_linebuf_parse>:
    f68c:	push	{r4, r5, r6, r7, r8, lr}
    f690:	mov	r6, r0
    f694:	mov	r5, r1
    f698:	mov	r4, r2
    f69c:	mov	r8, r3
    f6a0:	ldr	r3, [r0, #4]
    f6a4:	cmp	r3, #0
    f6a8:	beq	f700 <rb_linebuf_parse+0x74>
    f6ac:	ldr	r1, [r3]
    f6b0:	cmp	r8, #0
    f6b4:	bne	f6f0 <rb_linebuf_parse+0x64>
    f6b8:	mov	r3, r2
    f6bc:	mov	r2, r5
    f6c0:	bl	f244 <rb_linebuf_copy_line>
    f6c4:	cmn	r0, #1
    f6c8:	popeq	{r4, r5, r6, r7, r8, pc}
    f6cc:	cmp	r0, r4
    f6d0:	beq	f768 <rb_linebuf_parse+0xdc>
    f6d4:	sub	r4, r4, r0
    f6d8:	add	r5, r5, r0
    f6dc:	mov	r7, #1
    f6e0:	cmp	r4, #0
    f6e4:	bgt	f738 <rb_linebuf_parse+0xac>
    f6e8:	mov	r0, r7
    f6ec:	pop	{r4, r5, r6, r7, r8, pc}
    f6f0:	mov	r3, r2
    f6f4:	mov	r2, r5
    f6f8:	bl	f46c <rb_linebuf_copy_raw>
    f6fc:	b	f6c4 <rb_linebuf_parse+0x38>
    f700:	mov	r7, #0
    f704:	b	f6e0 <rb_linebuf_parse+0x54>
    f708:	mov	r3, r4
    f70c:	mov	r2, r5
    f710:	mov	r1, r0
    f714:	mov	r0, r6
    f718:	bl	f46c <rb_linebuf_copy_raw>
    f71c:	cmn	r0, #1
    f720:	popeq	{r4, r5, r6, r7, r8, pc}
    f724:	sub	r4, r4, r0
    f728:	add	r5, r5, r0
    f72c:	add	r7, r7, #1
    f730:	cmp	r4, #0
    f734:	ble	f760 <rb_linebuf_parse+0xd4>
    f738:	mov	r0, r6
    f73c:	bl	f194 <rb_linebuf_new_line>
    f740:	cmp	r8, #0
    f744:	bne	f708 <rb_linebuf_parse+0x7c>
    f748:	mov	r3, r4
    f74c:	mov	r2, r5
    f750:	mov	r1, r0
    f754:	mov	r0, r6
    f758:	bl	f244 <rb_linebuf_copy_line>
    f75c:	b	f71c <rb_linebuf_parse+0x90>
    f760:	mov	r0, r7
    f764:	pop	{r4, r5, r6, r7, r8, pc}
    f768:	mov	r0, #1
    f76c:	pop	{r4, r5, r6, r7, r8, pc}

0000f770 <rb_linebuf_get>:
    f770:	push	{r4, r5, r6, r7, r8, lr}
    f774:	ldr	r6, [sp, #24]
    f778:	ldr	ip, [r0]
    f77c:	cmp	ip, #0
    f780:	beq	f838 <rb_linebuf_get+0xc8>
    f784:	ldr	r5, [ip]
    f788:	cmp	r3, #0
    f78c:	bne	f7a0 <rb_linebuf_get+0x30>
    f790:	ldrb	ip, [r5, #1025]	; 0x401
    f794:	cmp	ip, #0
    f798:	moveq	r4, r3
    f79c:	beq	f878 <rb_linebuf_get+0x108>
    f7a0:	ldr	r4, [r5, #1028]	; 0x404
    f7a4:	cmp	r4, r2
    f7a8:	subgt	r4, r2, #1
    f7ac:	mov	ip, r5
    f7b0:	ldrb	r3, [r5, #1026]	; 0x402
    f7b4:	adds	r3, r3, #0
    f7b8:	movne	r3, #1
    f7bc:	cmp	r6, #0
    f7c0:	movne	r3, #0
    f7c4:	cmp	r3, #0
    f7c8:	beq	f844 <rb_linebuf_get+0xd4>
    f7cc:	cmp	r4, #0
    f7d0:	beq	f840 <rb_linebuf_get+0xd0>
    f7d4:	ldrb	r3, [r5]
    f7d8:	cmp	r3, #10
    f7dc:	cmpne	r3, #13
    f7e0:	bne	f804 <rb_linebuf_get+0x94>
    f7e4:	add	r3, r5, #1
    f7e8:	mov	ip, r3
    f7ec:	subs	r4, r4, #1
    f7f0:	beq	f840 <rb_linebuf_get+0xd0>
    f7f4:	ldrb	r2, [r3], #1
    f7f8:	cmp	r2, #10
    f7fc:	cmpne	r2, #13
    f800:	beq	f7e8 <rb_linebuf_get+0x78>
    f804:	sub	r3, r4, #1
    f808:	add	r2, ip, r3
    f80c:	ldrb	r3, [ip, r3]
    f810:	cmp	r3, #10
    f814:	cmpne	r3, #13
    f818:	bne	f844 <rb_linebuf_get+0xd4>
    f81c:	subs	r4, r4, #1
    f820:	beq	f844 <rb_linebuf_get+0xd4>
    f824:	ldrb	r3, [r2, #-1]!
    f828:	cmp	r3, #10
    f82c:	cmpne	r3, #13
    f830:	beq	f81c <rb_linebuf_get+0xac>
    f834:	b	f844 <rb_linebuf_get+0xd4>
    f838:	mov	r4, #0
    f83c:	b	f878 <rb_linebuf_get+0x108>
    f840:	mov	r4, #0
    f844:	mov	r8, r1
    f848:	mov	r7, r0
    f84c:	mov	r2, r4
    f850:	mov	r1, ip
    f854:	mov	r0, r8
    f858:	bl	4808 <memcpy@plt>
    f85c:	cmp	r6, #0
    f860:	moveq	r3, #0
    f864:	strbeq	r3, [r8, r4]
    f868:	ldr	r2, [r7]
    f86c:	mov	r1, r5
    f870:	mov	r0, r7
    f874:	bl	f0d4 <rb_linebuf_done_line>
    f878:	mov	r0, r4
    f87c:	pop	{r4, r5, r6, r7, r8, pc}

0000f880 <rb_linebuf_attach>:
    f880:	push	{r4, r5, r6, r7, r8, lr}
    f884:	ldr	r6, [r1]
    f888:	cmp	r6, #0
    f88c:	popeq	{r4, r5, r6, r7, r8, pc}
    f890:	mov	r4, r0
    f894:	mov	r7, #0
    f898:	b	f8ec <rb_linebuf_attach+0x6c>
    f89c:	str	r0, [r4, #4]
    f8a0:	ldr	r3, [r4, #8]
    f8a4:	add	r3, r3, #1
    f8a8:	str	r3, [r4, #8]
    f8ac:	ldr	r3, [r4, #16]
    f8b0:	add	r3, r3, #1
    f8b4:	str	r3, [r4, #16]
    f8b8:	ldr	r3, [r4, #12]
    f8bc:	ldr	r2, [r5, #1028]	; 0x404
    f8c0:	add	r3, r3, r2
    f8c4:	str	r3, [r4, #12]
    f8c8:	ldr	r3, [r4, #24]
    f8cc:	add	r3, r3, #1
    f8d0:	str	r3, [r4, #24]
    f8d4:	ldr	r3, [r5, #1032]	; 0x408
    f8d8:	add	r3, r3, #1
    f8dc:	str	r3, [r5, #1032]	; 0x408
    f8e0:	ldr	r6, [r6, #8]
    f8e4:	cmp	r6, #0
    f8e8:	beq	f924 <rb_linebuf_attach+0xa4>
    f8ec:	ldr	r5, [r6]
    f8f0:	bl	4b80 <rb_make_rb_dlink_node@plt>
    f8f4:	str	r5, [r0]
    f8f8:	str	r7, [r0, #8]
    f8fc:	ldr	r3, [r4, #4]
    f900:	str	r3, [r0, #4]
    f904:	ldr	r3, [r4, #4]
    f908:	cmp	r3, #0
    f90c:	strne	r0, [r3, #8]
    f910:	bne	f89c <rb_linebuf_attach+0x1c>
    f914:	ldr	r3, [r4]
    f918:	cmp	r3, #0
    f91c:	streq	r0, [r4]
    f920:	b	f89c <rb_linebuf_attach+0x1c>
    f924:	pop	{r4, r5, r6, r7, r8, pc}

0000f928 <rb_linebuf_put>:
    f928:	push	{r4, r5, r6, lr}
    f92c:	mov	r5, r0
    f930:	mov	r6, r1
    f934:	bl	f194 <rb_linebuf_new_line>
    f938:	mov	r4, r0
    f93c:	mov	r2, r6
    f940:	ldr	r1, [pc, #76]	; f994 <rb_linebuf_put+0x6c>
    f944:	bl	4694 <rb_fsnprint@plt>
    f948:	bic	r0, r0, r0, asr #31
    f94c:	ldr	r3, [pc, #68]	; f998 <rb_linebuf_put+0x70>
    f950:	cmp	r0, r3
    f954:	movcs	r0, r3
    f958:	mov	r3, r4
    f95c:	mov	r2, #13
    f960:	strb	r2, [r3, r0]!
    f964:	add	r0, r0, #2
    f968:	mov	r2, #10
    f96c:	strb	r2, [r3, #1]
    f970:	mov	r3, #0
    f974:	strb	r3, [r4, r0]
    f978:	mov	r3, #1
    f97c:	strb	r3, [r4, #1025]	; 0x401
    f980:	str	r0, [r4, #1028]	; 0x404
    f984:	ldr	r3, [r5, #12]
    f988:	add	r0, r3, r0
    f98c:	str	r0, [r5, #12]
    f990:	pop	{r4, r5, r6, pc}
    f994:	.word	0x000003ff
    f998:	.word	0x000003fe

0000f99c <rb_linebuf_flush>:
    f99c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f9a0:	mov	r6, r0
    f9a4:	mov	r5, r1
    f9a8:	bl	44b4 <rb_fd_ssl@plt>
    f9ac:	subs	r7, r0, #0
    f9b0:	beq	fa10 <rb_linebuf_flush+0x74>
    f9b4:	ldr	r3, [r5]
    f9b8:	cmp	r3, #0
    f9bc:	beq	fbb8 <rb_linebuf_flush+0x21c>
    f9c0:	ldr	r4, [r3]
    f9c4:	ldrb	r3, [r4, #1025]	; 0x401
    f9c8:	cmp	r3, #0
    f9cc:	beq	fbcc <rb_linebuf_flush+0x230>
    f9d0:	ldr	r1, [r5, #20]
    f9d4:	ldr	r2, [r4, #1028]	; 0x404
    f9d8:	sub	r2, r2, r1
    f9dc:	add	r1, r4, r1
    f9e0:	mov	r0, r6
    f9e4:	bl	4658 <rb_write@plt>
    f9e8:	subs	sl, r0, #0
    f9ec:	ble	fa08 <rb_linebuf_flush+0x6c>
    f9f0:	ldr	r3, [r5, #20]
    f9f4:	add	r3, sl, r3
    f9f8:	str	r3, [r5, #20]
    f9fc:	ldr	r2, [r4, #1028]	; 0x404
    fa00:	cmp	r3, r2
    fa04:	beq	fbe0 <rb_linebuf_flush+0x244>
    fa08:	mov	r0, sl
    fa0c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa10:	mov	r2, #8192	; 0x2000
    fa14:	mov	r1, #0
    fa18:	ldr	r0, [pc, #520]	; fc28 <rb_linebuf_flush+0x28c>
    fa1c:	add	r0, pc, r0
    fa20:	add	r0, r0, #8
    fa24:	bl	4628 <memset@plt>
    fa28:	ldr	r3, [r5]
    fa2c:	cmp	r3, #0
    fa30:	beq	fadc <rb_linebuf_flush+0x140>
    fa34:	ldr	r2, [r3]
    fa38:	ldrb	r1, [r2, #1025]	; 0x401
    fa3c:	cmp	r1, #0
    fa40:	beq	faf0 <rb_linebuf_flush+0x154>
    fa44:	ldr	r0, [r5, #20]
    fa48:	ldr	r1, [pc, #476]	; fc2c <rb_linebuf_flush+0x290>
    fa4c:	add	r1, pc, r1
    fa50:	add	ip, r2, r0
    fa54:	str	ip, [r1, #8]
    fa58:	ldr	r2, [r2, #1028]	; 0x404
    fa5c:	sub	r2, r2, r0
    fa60:	str	r2, [r1, #12]
    fa64:	ldr	r2, [r3, #8]
    fa68:	cmp	r2, #0
    fa6c:	beq	fbfc <rb_linebuf_flush+0x260>
    fa70:	ldr	r1, [r2]
    fa74:	ldrb	r3, [r1, #1025]	; 0x401
    fa78:	cmp	r3, #0
    fa7c:	beq	fbfc <rb_linebuf_flush+0x260>
    fa80:	ldr	r3, [pc, #424]	; fc30 <rb_linebuf_flush+0x294>
    fa84:	add	r3, pc, r3
    fa88:	str	r1, [r3, #16]
    fa8c:	ldr	r1, [r1, #1028]	; 0x404
    fa90:	str	r1, [r3, #20]
    fa94:	ldr	r2, [r2, #8]
    fa98:	add	r3, r3, #8
    fa9c:	mov	r4, #2
    faa0:	cmp	r2, #0
    faa4:	beq	fb04 <rb_linebuf_flush+0x168>
    faa8:	ldr	r1, [r2]
    faac:	ldrb	r0, [r1, #1025]	; 0x401
    fab0:	cmp	r0, #0
    fab4:	beq	fb04 <rb_linebuf_flush+0x168>
    fab8:	str	r1, [r3, #16]
    fabc:	ldr	r1, [r1, #1028]	; 0x404
    fac0:	str	r1, [r3, #20]
    fac4:	ldr	r2, [r2, #8]
    fac8:	add	r4, r4, #1
    facc:	add	r3, r3, #8
    fad0:	cmp	r4, #1024	; 0x400
    fad4:	bne	faa0 <rb_linebuf_flush+0x104>
    fad8:	b	fb0c <rb_linebuf_flush+0x170>
    fadc:	bl	4ce8 <__errno_location@plt>
    fae0:	mov	r3, #11
    fae4:	str	r3, [r0]
    fae8:	mvn	sl, #0
    faec:	b	fa08 <rb_linebuf_flush+0x6c>
    faf0:	bl	4ce8 <__errno_location@plt>
    faf4:	mov	r3, #11
    faf8:	str	r3, [r0]
    fafc:	mvn	sl, #0
    fb00:	b	fa08 <rb_linebuf_flush+0x6c>
    fb04:	cmp	r4, #0
    fb08:	beq	fba4 <rb_linebuf_flush+0x208>
    fb0c:	mov	r2, r4
    fb10:	ldr	r1, [pc, #284]	; fc34 <rb_linebuf_flush+0x298>
    fb14:	add	r1, pc, r1
    fb18:	add	r1, r1, #8
    fb1c:	mov	r0, r6
    fb20:	bl	4ad8 <rb_writev@plt>
    fb24:	subs	sl, r0, #0
    fb28:	ble	fa08 <rb_linebuf_flush+0x6c>
    fb2c:	ldr	r8, [r5]
    fb30:	cmp	r4, #0
    fb34:	ble	fa08 <rb_linebuf_flush+0x6c>
    fb38:	ldr	r1, [r8]
    fb3c:	ldr	r2, [r5, #20]
    fb40:	ldr	r3, [r1, #1028]	; 0x404
    fb44:	sub	r3, r3, r2
    fb48:	cmp	r3, sl
    fb4c:	movgt	r7, r2
    fb50:	movgt	r6, sl
    fb54:	bgt	fb98 <rb_linebuf_flush+0x1fc>
    fb58:	mov	r6, sl
    fb5c:	mov	r9, r7
    fb60:	mov	fp, #0
    fb64:	sub	r6, r6, r3
    fb68:	ldr	r8, [r8, #8]
    fb6c:	ldr	r2, [r5]
    fb70:	mov	r0, r5
    fb74:	bl	f0d4 <rb_linebuf_done_line>
    fb78:	str	fp, [r5, #20]
    fb7c:	add	r9, r9, #1
    fb80:	cmp	r9, r4
    fb84:	beq	fa08 <rb_linebuf_flush+0x6c>
    fb88:	ldr	r1, [r8]
    fb8c:	ldr	r3, [r1, #1028]	; 0x404
    fb90:	cmp	r3, r6
    fb94:	ble	fb64 <rb_linebuf_flush+0x1c8>
    fb98:	add	r7, r6, r7
    fb9c:	str	r7, [r5, #20]
    fba0:	b	fa08 <rb_linebuf_flush+0x6c>
    fba4:	bl	4ce8 <__errno_location@plt>
    fba8:	mov	r3, #11
    fbac:	str	r3, [r0]
    fbb0:	mvn	sl, #0
    fbb4:	b	fa08 <rb_linebuf_flush+0x6c>
    fbb8:	bl	4ce8 <__errno_location@plt>
    fbbc:	mov	r3, #11
    fbc0:	str	r3, [r0]
    fbc4:	mvn	sl, #0
    fbc8:	b	fa08 <rb_linebuf_flush+0x6c>
    fbcc:	bl	4ce8 <__errno_location@plt>
    fbd0:	mov	r3, #11
    fbd4:	str	r3, [r0]
    fbd8:	mvn	sl, #0
    fbdc:	b	fa08 <rb_linebuf_flush+0x6c>
    fbe0:	mov	r3, #0
    fbe4:	str	r3, [r5, #20]
    fbe8:	ldr	r2, [r5]
    fbec:	mov	r1, r4
    fbf0:	mov	r0, r5
    fbf4:	bl	f0d4 <rb_linebuf_done_line>
    fbf8:	b	fa08 <rb_linebuf_flush+0x6c>
    fbfc:	mov	r2, #1
    fc00:	ldr	r1, [pc, #48]	; fc38 <rb_linebuf_flush+0x29c>
    fc04:	add	r1, pc, r1
    fc08:	add	r1, r1, #8
    fc0c:	mov	r0, r6
    fc10:	bl	4ad8 <rb_writev@plt>
    fc14:	subs	sl, r0, #0
    fc18:	ble	fa08 <rb_linebuf_flush+0x6c>
    fc1c:	ldr	r8, [r5]
    fc20:	mov	r4, #1
    fc24:	b	fb38 <rb_linebuf_flush+0x19c>
    fc28:	.word	0x0002b944
    fc2c:	.word	0x0002b914
    fc30:	.word	0x0002b8dc
    fc34:	.word	0x0002b84c
    fc38:	.word	0x0002b75c

0000fc3c <rb_count_rb_linebuf_memory>:
    fc3c:	push	{lr}		; (str lr, [sp, #-4]!)
    fc40:	sub	sp, sp, #12
    fc44:	ldr	r3, [pc, #36]	; fc70 <rb_count_rb_linebuf_memory+0x34>
    fc48:	add	r3, pc, r3
    fc4c:	ldr	ip, [r3, #4]
    fc50:	mov	r2, #0
    fc54:	str	r2, [sp]
    fc58:	mov	r3, r1
    fc5c:	mov	r1, r0
    fc60:	mov	r0, ip
    fc64:	bl	4d0c <rb_bh_usage@plt>
    fc68:	add	sp, sp, #12
    fc6c:	pop	{pc}		; (ldr pc, [sp], #4)
    fc70:	.word	0x0002b718

0000fc74 <rb_init_rb_dlink_nodes>:
    fc74:	push	{r4, lr}
    fc78:	ldr	r2, [pc, #36]	; fca4 <rb_init_rb_dlink_nodes+0x30>
    fc7c:	add	r2, pc, r2
    fc80:	mov	r1, r0
    fc84:	mov	r0, #12
    fc88:	bl	4ab4 <rb_bh_create@plt>
    fc8c:	ldr	r3, [pc, #20]	; fca8 <rb_init_rb_dlink_nodes+0x34>
    fc90:	add	r3, pc, r3
    fc94:	str	r0, [r3]
    fc98:	cmp	r0, #0
    fc9c:	popne	{r4, pc}
    fca0:	bl	4988 <rb_outofmemory@plt>
    fca4:	.word	0x000073a4
    fca8:	.word	0x0002d6d8

0000fcac <rb_make_rb_dlink_node>:
    fcac:	push	{r4, lr}
    fcb0:	ldr	r3, [pc, #12]	; fcc4 <rb_make_rb_dlink_node+0x18>
    fcb4:	add	r3, pc, r3
    fcb8:	ldr	r0, [r3]
    fcbc:	bl	4958 <rb_bh_alloc@plt>
    fcc0:	pop	{r4, pc}
    fcc4:	.word	0x0002d6b4

0000fcc8 <rb_free_rb_dlink_node>:
    fcc8:	push	{r4, lr}
    fccc:	mov	r1, r0
    fcd0:	ldr	r3, [pc, #12]	; fce4 <rb_free_rb_dlink_node+0x1c>
    fcd4:	add	r3, pc, r3
    fcd8:	ldr	r0, [r3]
    fcdc:	bl	48c8 <rb_bh_free@plt>
    fce0:	pop	{r4, pc}
    fce4:	.word	0x0002d694

0000fce8 <rb_string_to_array>:
    fce8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fcec:	cmp	r0, #0
    fcf0:	beq	fdcc <rb_string_to_array+0xe4>
    fcf4:	mov	r9, r1
    fcf8:	ldrb	r3, [r0]
    fcfc:	cmp	r3, #0
    fd00:	moveq	r4, #0
    fd04:	beq	fdd0 <rb_string_to_array+0xe8>
    fd08:	cmp	r3, #32
    fd0c:	bne	fd28 <rb_string_to_array+0x40>
    fd10:	ldrb	r3, [r0, #1]!
    fd14:	cmp	r3, #32
    fd18:	beq	fd10 <rb_string_to_array+0x28>
    fd1c:	cmp	r3, #0
    fd20:	moveq	r4, #0
    fd24:	beq	fdd0 <rb_string_to_array+0xe8>
    fd28:	sub	r6, r9, #4
    fd2c:	mov	r5, #0
    fd30:	mov	r8, #32
    fd34:	mov	sl, r5
    fd38:	sub	r7, r2, #1
    fd3c:	b	fd6c <rb_string_to_array+0x84>
    fd40:	add	r4, r5, #1
    fd44:	add	r0, r0, #1
    fd48:	str	r0, [r9, r5, lsl #2]
    fd4c:	b	fdd0 <rb_string_to_array+0xe8>
    fd50:	mov	r3, r1
    fd54:	mov	r0, ip
    fd58:	cmp	r3, #0
    fd5c:	beq	fdd0 <rb_string_to_array+0xe8>
    fd60:	cmp	r4, r7
    fd64:	bge	fdb8 <rb_string_to_array+0xd0>
    fd68:	mov	r5, r4
    fd6c:	ldrb	r3, [r0]
    fd70:	cmp	r3, #58	; 0x3a
    fd74:	beq	fd40 <rb_string_to_array+0x58>
    fd78:	add	r4, r5, #1
    fd7c:	str	r0, [r6, #4]!
    fd80:	mov	r1, r8
    fd84:	bl	45b0 <strchr@plt>
    fd88:	subs	r2, r0, #0
    fd8c:	beq	fdd0 <rb_string_to_array+0xe8>
    fd90:	add	ip, r2, #1
    fd94:	strb	sl, [r2]
    fd98:	ldrb	r1, [r2, #1]
    fd9c:	cmp	r1, #32
    fda0:	bne	fd50 <rb_string_to_array+0x68>
    fda4:	mov	r0, ip
    fda8:	ldrb	r3, [r0, #1]!
    fdac:	cmp	r3, #32
    fdb0:	beq	fda8 <rb_string_to_array+0xc0>
    fdb4:	b	fd58 <rb_string_to_array+0x70>
    fdb8:	cmp	r1, #58	; 0x3a
    fdbc:	addeq	ip, r2, #2
    fdc0:	str	ip, [r9, r4, lsl #2]
    fdc4:	add	r4, r5, #2
    fdc8:	b	fdd0 <rb_string_to_array+0xe8>
    fdcc:	mov	r4, #0
    fdd0:	mov	r0, r4
    fdd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000fdd8 <rb_strcasecmp>:
    fdd8:	push	{r4, lr}
    fddc:	bl	45c8 <strcasecmp@plt>
    fde0:	pop	{r4, pc}

0000fde4 <rb_strncasecmp>:
    fde4:	push	{r4, lr}
    fde8:	bl	497c <strncasecmp@plt>
    fdec:	pop	{r4, pc}

0000fdf0 <rb_strcasestr>:
    fdf0:	push	{r4, lr}
    fdf4:	bl	4418 <strcasestr@plt>
    fdf8:	pop	{r4, pc}

0000fdfc <rb_strlcat>:
    fdfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fe00:	mov	r5, r0
    fe04:	mov	r8, r1
    fe08:	mov	r6, r2
    fe0c:	bl	47e4 <strlen@plt>
    fe10:	mov	r7, r0
    fe14:	mov	r0, r8
    fe18:	bl	47e4 <strlen@plt>
    fe1c:	mov	r4, r0
    fe20:	add	r9, r7, r0
    fe24:	add	r5, r5, r7
    fe28:	sub	r2, r6, r7
    fe2c:	cmp	r0, r2
    fe30:	subcs	r4, r2, #1
    fe34:	mov	r2, r4
    fe38:	mov	r1, r8
    fe3c:	mov	r0, r5
    fe40:	bl	4808 <memcpy@plt>
    fe44:	mov	r3, #0
    fe48:	strb	r3, [r5, r4]
    fe4c:	mov	r0, r9
    fe50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000fe54 <rb_strlcpy>:
    fe54:	push	{r4, r5, r6, r7, r8, lr}
    fe58:	mov	r7, r0
    fe5c:	mov	r6, r1
    fe60:	mov	r4, r2
    fe64:	mov	r0, r1
    fe68:	bl	47e4 <strlen@plt>
    fe6c:	mov	r5, r0
    fe70:	cmp	r4, #0
    fe74:	beq	fe9c <rb_strlcpy+0x48>
    fe78:	cmp	r0, r4
    fe7c:	subcs	r4, r4, #1
    fe80:	movcc	r4, r0
    fe84:	mov	r2, r4
    fe88:	mov	r1, r6
    fe8c:	mov	r0, r7
    fe90:	bl	4808 <memcpy@plt>
    fe94:	mov	r3, #0
    fe98:	strb	r3, [r7, r4]
    fe9c:	mov	r0, r5
    fea0:	pop	{r4, r5, r6, r7, r8, pc}

0000fea4 <rb_strnlen>:
    fea4:	push	{r4, lr}
    fea8:	bl	4a18 <strnlen@plt>
    feac:	pop	{r4, pc}

0000feb0 <rb_snprintf_append>:
    feb0:	push	{r2, r3}
    feb4:	push	{r4, r5, r6, lr}
    feb8:	sub	sp, sp, #8
    febc:	subs	r4, r1, #0
    fec0:	beq	ff18 <rb_snprintf_append+0x68>
    fec4:	mov	r5, r0
    fec8:	bl	47e4 <strlen@plt>
    fecc:	mov	r6, r0
    fed0:	cmp	r0, r4
    fed4:	ble	fef4 <rb_snprintf_append+0x44>
    fed8:	sub	r0, r4, #1
    fedc:	mov	r3, #0
    fee0:	strb	r3, [r5, r0]
    fee4:	add	sp, sp, #8
    fee8:	pop	{r4, r5, r6, lr}
    feec:	add	sp, sp, #8
    fef0:	bx	lr
    fef4:	add	r3, sp, #28
    fef8:	str	r3, [sp, #4]
    fefc:	ldr	r2, [sp, #24]
    ff00:	sub	r1, r4, r0
    ff04:	add	r0, r5, r0
    ff08:	bl	455c <vsnprintf@plt>
    ff0c:	cmp	r0, #0
    ff10:	addge	r0, r0, r6
    ff14:	b	fee4 <rb_snprintf_append+0x34>
    ff18:	mvn	r0, #0
    ff1c:	b	fee4 <rb_snprintf_append+0x34>

0000ff20 <rb_snprintf_try_append>:
    ff20:	push	{r2, r3}
    ff24:	push	{r4, r5, r6, lr}
    ff28:	sub	sp, sp, #8
    ff2c:	subs	r4, r1, #0
    ff30:	beq	ffa0 <rb_snprintf_try_append+0x80>
    ff34:	mov	r5, r0
    ff38:	bl	47e4 <strlen@plt>
    ff3c:	mov	r6, r0
    ff40:	cmp	r0, r4
    ff44:	addgt	r4, r5, r4
    ff48:	movgt	r3, #0
    ff4c:	strbgt	r3, [r4, #-1]
    ff50:	mvngt	r0, #0
    ff54:	bgt	ff90 <rb_snprintf_try_append+0x70>
    ff58:	add	r3, sp, #28
    ff5c:	str	r3, [sp, #4]
    ff60:	ldr	r2, [sp, #24]
    ff64:	sub	r1, r4, r6
    ff68:	add	r0, r5, r6
    ff6c:	bl	455c <vsnprintf@plt>
    ff70:	cmp	r0, #0
    ff74:	blt	ff90 <rb_snprintf_try_append+0x70>
    ff78:	add	r0, r0, r6
    ff7c:	sub	r4, r4, #1
    ff80:	cmp	r0, r4
    ff84:	movgt	r3, #0
    ff88:	strbgt	r3, [r5, r6]
    ff8c:	mvngt	r0, #0
    ff90:	add	sp, sp, #8
    ff94:	pop	{r4, r5, r6, lr}
    ff98:	add	sp, sp, #8
    ff9c:	bx	lr
    ffa0:	mvn	r0, #0
    ffa4:	b	ff90 <rb_snprintf_try_append+0x70>

0000ffa8 <rb_basename>:
    ffa8:	push	{r4, r5, r6, lr}
    ffac:	mov	r4, r0
    ffb0:	mov	r1, #47	; 0x2f
    ffb4:	bl	464c <strrchr@plt>
    ffb8:	cmp	r0, #0
    ffbc:	addne	r4, r0, #1
    ffc0:	mov	r0, r4
    ffc4:	bl	47e4 <strlen@plt>
    ffc8:	add	r0, r0, #1
    ffcc:	bl	49ac <malloc@plt>
    ffd0:	subs	r5, r0, #0
    ffd4:	beq	ffec <rb_basename+0x44>
    ffd8:	mov	r1, r4
    ffdc:	mov	r0, r5
    ffe0:	bl	488c <strcpy@plt>
    ffe4:	mov	r0, r5
    ffe8:	pop	{r4, r5, r6, pc}
    ffec:	bl	4988 <rb_outofmemory@plt>

0000fff0 <rb_dirname>:
    fff0:	push	{r4, r5, r6, lr}
    fff4:	mov	r5, r0
    fff8:	mov	r1, #47	; 0x2f
    fffc:	bl	464c <strrchr@plt>
   10000:	cmp	r0, #0
   10004:	beq	10070 <rb_dirname+0x80>
   10008:	cmp	r5, r0
   1000c:	bcs	10040 <rb_dirname+0x50>
   10010:	ldrb	r3, [r0]
   10014:	cmp	r3, #47	; 0x2f
   10018:	subeq	r3, r0, #1
   1001c:	moveq	r1, r5
   10020:	bne	10040 <rb_dirname+0x50>
   10024:	mov	r0, r3
   10028:	cmp	r3, r1
   1002c:	beq	10040 <rb_dirname+0x50>
   10030:	sub	r3, r3, #1
   10034:	ldrb	r2, [r0]
   10038:	cmp	r2, #47	; 0x2f
   1003c:	beq	10024 <rb_dirname+0x34>
   10040:	rsb	r4, r5, #2
   10044:	add	r4, r0, r4
   10048:	mov	r0, r4
   1004c:	bl	49ac <malloc@plt>
   10050:	subs	r6, r0, #0
   10054:	beq	1008c <rb_dirname+0x9c>
   10058:	mov	r2, r4
   1005c:	mov	r1, r5
   10060:	mov	r0, r6
   10064:	bl	46a0 <rb_strlcpy@plt>
   10068:	mov	r0, r6
   1006c:	pop	{r4, r5, r6, pc}
   10070:	mov	r0, #2
   10074:	bl	49ac <malloc@plt>
   10078:	subs	r6, r0, #0
   1007c:	movne	r3, #46	; 0x2e
   10080:	strhne	r3, [r6]
   10084:	bne	10068 <rb_dirname+0x78>
   10088:	bl	4988 <rb_outofmemory@plt>
   1008c:	bl	4988 <rb_outofmemory@plt>

00010090 <rb_fsnprint>:
   10090:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10094:	subs	r5, r2, #0
   10098:	beq	10178 <rb_fsnprint+0xe8>
   1009c:	mov	r8, r0
   100a0:	mov	r9, r1
   100a4:	mov	r4, r1
   100a8:	mov	r6, #0
   100ac:	mov	sl, r6
   100b0:	sub	r7, r1, #1
   100b4:	b	10108 <rb_fsnprint+0x78>
   100b8:	mov	r2, r4
   100bc:	add	r0, r8, r6
   100c0:	bl	46a0 <rb_strlcpy@plt>
   100c4:	b	10154 <rb_fsnprint+0xc4>
   100c8:	ldr	r3, [r5, #8]
   100cc:	cmp	r3, #0
   100d0:	beq	100e8 <rb_fsnprint+0x58>
   100d4:	ldr	r2, [r5, #12]
   100d8:	mov	r1, r4
   100dc:	add	r0, r8, r6
   100e0:	blx	r3
   100e4:	b	10154 <rb_fsnprint+0xc4>
   100e8:	mov	r3, sl
   100ec:	add	r6, r6, r3
   100f0:	cmp	r6, r7
   100f4:	bcs	10180 <rb_fsnprint+0xf0>
   100f8:	sub	r4, r4, r3
   100fc:	ldr	r5, [r5, #16]
   10100:	cmp	r5, #0
   10104:	beq	10184 <rb_fsnprint+0xf4>
   10108:	ldr	r3, [r5]
   1010c:	cmp	r3, #0
   10110:	beq	10120 <rb_fsnprint+0x90>
   10114:	sub	r4, r9, r6
   10118:	cmp	r4, r3
   1011c:	movcs	r4, r3
   10120:	cmp	r4, #0
   10124:	beq	10184 <rb_fsnprint+0xf4>
   10128:	ldr	r1, [r5, #4]
   1012c:	cmp	r1, #0
   10130:	beq	100c8 <rb_fsnprint+0x38>
   10134:	ldr	r3, [r5, #12]
   10138:	cmp	r3, #0
   1013c:	beq	100b8 <rb_fsnprint+0x28>
   10140:	ldr	r3, [r3]
   10144:	mov	r2, r1
   10148:	mov	r1, r4
   1014c:	add	r0, r8, r6
   10150:	bl	455c <vsnprintf@plt>
   10154:	cmp	r0, #0
   10158:	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
   1015c:	mov	r3, r0
   10160:	sub	r2, r4, #1
   10164:	cmp	r2, r0
   10168:	subcc	r6, r6, #1
   1016c:	addcc	r6, r4, r6
   10170:	bcc	100f0 <rb_fsnprint+0x60>
   10174:	b	100ec <rb_fsnprint+0x5c>
   10178:	mov	r6, #0
   1017c:	b	10184 <rb_fsnprint+0xf4>
   10180:	mov	r6, r7
   10184:	mov	r0, r6
   10188:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001018c <rb_fsnprintf>:
   1018c:	push	{r3}		; (str r3, [sp, #-4]!)
   10190:	push	{lr}		; (str lr, [sp, #-4]!)
   10194:	sub	sp, sp, #24
   10198:	mov	ip, #0
   1019c:	str	ip, [sp]
   101a0:	str	ip, [sp, #8]
   101a4:	ldr	ip, [sp, #28]
   101a8:	str	ip, [sp, #4]
   101ac:	add	ip, sp, #20
   101b0:	str	ip, [sp, #12]
   101b4:	str	r2, [sp, #16]
   101b8:	add	r2, sp, #32
   101bc:	str	r2, [sp, #20]
   101c0:	mov	r2, sp
   101c4:	bl	4694 <rb_fsnprint@plt>
   101c8:	add	sp, sp, #24
   101cc:	pop	{lr}		; (ldr lr, [sp], #4)
   101d0:	add	sp, sp, #4
   101d4:	bx	lr

000101d8 <rb_helper_child>:
   101d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101dc:	sub	sp, sp, #28
   101e0:	mov	sl, r0
   101e4:	mov	r9, r1
   101e8:	str	r2, [sp, #20]
   101ec:	mov	fp, r3
   101f0:	ldr	r0, [pc, #484]	; 103dc <rb_helper_child+0x204>
   101f4:	add	r0, pc, r0
   101f8:	bl	4598 <getenv@plt>
   101fc:	mov	r6, r0
   10200:	ldr	r0, [pc, #472]	; 103e0 <rb_helper_child+0x208>
   10204:	add	r0, pc, r0
   10208:	bl	4598 <getenv@plt>
   1020c:	mov	r5, r0
   10210:	ldr	r0, [pc, #460]	; 103e4 <rb_helper_child+0x20c>
   10214:	add	r0, pc, r0
   10218:	bl	4598 <getenv@plt>
   1021c:	cmp	r5, #0
   10220:	cmpne	r6, #0
   10224:	moveq	r3, #1
   10228:	movne	r3, #0
   1022c:	mov	r4, r0
   10230:	cmp	r0, #0
   10234:	movne	r0, r3
   10238:	orreq	r0, r3, #1
   1023c:	cmp	r0, #0
   10240:	bne	103d4 <rb_helper_child+0x1fc>
   10244:	mov	r1, #84	; 0x54
   10248:	mov	r0, #1
   1024c:	bl	45ec <calloc@plt>
   10250:	subs	r7, r0, #0
   10254:	beq	102a0 <rb_helper_child+0xc8>
   10258:	mov	r2, #10
   1025c:	mov	r1, #0
   10260:	mov	r0, r6
   10264:	bl	4874 <strtol@plt>
   10268:	mov	r6, r0
   1026c:	mov	r2, #10
   10270:	mov	r1, #0
   10274:	mov	r0, r5
   10278:	bl	4874 <strtol@plt>
   1027c:	mov	r5, r0
   10280:	mov	r2, #10
   10284:	mov	r1, #0
   10288:	mov	r0, r4
   1028c:	bl	4874 <strtol@plt>
   10290:	subs	r8, r0, #0
   10294:	ble	102c8 <rb_helper_child+0xf0>
   10298:	mov	r4, #0
   1029c:	b	102b0 <rb_helper_child+0xd8>
   102a0:	bl	4988 <rb_outofmemory@plt>
   102a4:	add	r4, r4, #1
   102a8:	cmp	r8, r4
   102ac:	beq	102c8 <rb_helper_child+0xf0>
   102b0:	cmp	r6, r4
   102b4:	cmpne	r5, r4
   102b8:	beq	102a4 <rb_helper_child+0xcc>
   102bc:	mov	r0, r4
   102c0:	bl	4940 <close@plt>
   102c4:	b	102a4 <rb_helper_child+0xcc>
   102c8:	mov	r1, #2
   102cc:	ldr	r0, [pc, #276]	; 103e8 <rb_helper_child+0x210>
   102d0:	add	r0, pc, r0
   102d4:	bl	437c <open@plt>
   102d8:	mov	r4, r0
   102dc:	cmp	r6, #0
   102e0:	cmpne	r5, #0
   102e4:	bne	1039c <rb_helper_child+0x1c4>
   102e8:	cmp	r6, #1
   102ec:	cmpne	r5, #1
   102f0:	bne	103a8 <rb_helper_child+0x1d0>
   102f4:	cmp	r6, #2
   102f8:	cmpne	r5, #2
   102fc:	bne	103b8 <rb_helper_child+0x1e0>
   10300:	cmp	r4, #2
   10304:	bgt	103c8 <rb_helper_child+0x1f0>
   10308:	ldr	r3, [sp, #76]	; 0x4c
   1030c:	str	r3, [sp, #8]
   10310:	ldr	r3, [sp, #72]	; 0x48
   10314:	str	r3, [sp, #4]
   10318:	str	r8, [sp]
   1031c:	mov	r3, #0
   10320:	ldr	r2, [sp, #64]	; 0x40
   10324:	mov	r1, fp
   10328:	ldr	r0, [sp, #20]
   1032c:	bl	4a3c <rb_lib_init@plt>
   10330:	ldr	r0, [sp, #68]	; 0x44
   10334:	bl	4b50 <rb_linebuf_init@plt>
   10338:	add	r0, r7, #4
   1033c:	bl	4af0 <rb_linebuf_newbuf@plt>
   10340:	add	r0, r7, #32
   10344:	bl	4af0 <rb_linebuf_newbuf@plt>
   10348:	ldr	r2, [pc, #156]	; 103ec <rb_helper_child+0x214>
   1034c:	add	r2, pc, r2
   10350:	mov	r1, #8
   10354:	mov	r0, r6
   10358:	bl	4a84 <rb_open@plt>
   1035c:	str	r0, [r7, #60]	; 0x3c
   10360:	ldr	r2, [pc, #136]	; 103f0 <rb_helper_child+0x218>
   10364:	add	r2, pc, r2
   10368:	mov	r1, #8
   1036c:	mov	r0, r5
   10370:	bl	4a84 <rb_open@plt>
   10374:	str	r0, [r7, #64]	; 0x40
   10378:	ldr	r0, [r7, #60]	; 0x3c
   1037c:	bl	461c <rb_set_nb@plt>
   10380:	ldr	r0, [r7, #64]	; 0x40
   10384:	bl	461c <rb_set_nb@plt>
   10388:	str	sl, [r7, #76]	; 0x4c
   1038c:	str	r9, [r7, #80]	; 0x50
   10390:	mov	r0, r7
   10394:	add	sp, sp, #28
   10398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1039c:	mov	r1, #0
   103a0:	bl	4ac0 <dup2@plt>
   103a4:	b	102e8 <rb_helper_child+0x110>
   103a8:	mov	r1, #1
   103ac:	mov	r0, r4
   103b0:	bl	4ac0 <dup2@plt>
   103b4:	b	102f4 <rb_helper_child+0x11c>
   103b8:	mov	r1, #2
   103bc:	mov	r0, r4
   103c0:	bl	4ac0 <dup2@plt>
   103c4:	b	10300 <rb_helper_child+0x128>
   103c8:	mov	r0, r4
   103cc:	bl	4940 <close@plt>
   103d0:	b	10308 <rb_helper_child+0x130>
   103d4:	mov	r0, #0
   103d8:	b	10394 <rb_helper_child+0x1bc>
   103dc:	.word	0x00006e40
   103e0:	.word	0x00006e34
   103e4:	.word	0x00006e28
   103e8:	.word	0x00006d74
   103ec:	.word	0x00006d04
   103f0:	.word	0x00006d00

000103f4 <rb_helper_start>:
   103f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   103f8:	sub	sp, sp, #184	; 0xb8
   103fc:	mov	r6, r0
   10400:	mov	r7, r1
   10404:	mov	r9, r2
   10408:	mov	r8, r3
   1040c:	mov	r1, #1
   10410:	mov	r0, r7
   10414:	bl	473c <access@plt>
   10418:	cmn	r0, #1
   1041c:	beq	10628 <rb_helper_start+0x234>
   10420:	mov	r1, #84	; 0x54
   10424:	mov	r0, #1
   10428:	bl	45ec <calloc@plt>
   1042c:	subs	r4, r0, #0
   10430:	beq	105d0 <rb_helper_start+0x1dc>
   10434:	mov	r3, r6
   10438:	ldr	r2, [pc, #496]	; 10630 <rb_helper_start+0x23c>
   1043c:	add	r2, pc, r2
   10440:	mov	r1, #128	; 0x80
   10444:	add	r5, sp, #48	; 0x30
   10448:	mov	r0, r5
   1044c:	bl	4bb0 <snprintf@plt>
   10450:	mov	r2, r5
   10454:	add	r1, sp, #12
   10458:	add	r0, sp, #8
   1045c:	bl	4970 <rb_pipe@plt>
   10460:	cmp	r0, #0
   10464:	blt	105d4 <rb_helper_start+0x1e0>
   10468:	mov	r3, r6
   1046c:	ldr	r2, [pc, #448]	; 10634 <rb_helper_start+0x240>
   10470:	add	r2, pc, r2
   10474:	mov	r1, #128	; 0x80
   10478:	add	r5, sp, #48	; 0x30
   1047c:	mov	r0, r5
   10480:	bl	4bb0 <snprintf@plt>
   10484:	mov	r2, r5
   10488:	add	r1, sp, #4
   1048c:	mov	r0, sp
   10490:	bl	4970 <rb_pipe@plt>
   10494:	cmp	r0, #0
   10498:	blt	105e8 <rb_helper_start+0x1f4>
   1049c:	ldr	r0, [sp, #12]
   104a0:	bl	44e4 <rb_get_fd@plt>
   104a4:	ldr	sl, [pc, #396]	; 10638 <rb_helper_start+0x244>
   104a8:	add	sl, pc, sl
   104ac:	mov	r3, r0
   104b0:	mov	r2, sl
   104b4:	mov	r1, #16
   104b8:	add	r5, sp, #32
   104bc:	mov	r0, r5
   104c0:	bl	4bb0 <snprintf@plt>
   104c4:	ldr	r0, [sp]
   104c8:	bl	44e4 <rb_get_fd@plt>
   104cc:	mov	r3, r0
   104d0:	mov	r2, sl
   104d4:	mov	r1, #16
   104d8:	add	sl, sp, r1
   104dc:	mov	r0, sl
   104e0:	bl	4bb0 <snprintf@plt>
   104e4:	ldr	r0, [sp, #8]
   104e8:	bl	461c <rb_set_nb@plt>
   104ec:	ldr	r0, [sp, #12]
   104f0:	bl	461c <rb_set_nb@plt>
   104f4:	ldr	r0, [sp]
   104f8:	bl	461c <rb_set_nb@plt>
   104fc:	ldr	r0, [sp, #4]
   10500:	bl	461c <rb_set_nb@plt>
   10504:	mov	r2, #1
   10508:	mov	r1, sl
   1050c:	ldr	r0, [pc, #296]	; 1063c <rb_helper_start+0x248>
   10510:	add	r0, pc, r0
   10514:	bl	44cc <rb_setenv@plt>
   10518:	mov	r2, #1
   1051c:	mov	r1, r5
   10520:	ldr	r0, [pc, #280]	; 10640 <rb_helper_start+0x24c>
   10524:	add	r0, pc, r0
   10528:	bl	44cc <rb_setenv@plt>
   1052c:	mov	r2, #1
   10530:	ldr	r1, [pc, #268]	; 10644 <rb_helper_start+0x250>
   10534:	add	r1, pc, r1
   10538:	ldr	r0, [pc, #264]	; 10648 <rb_helper_start+0x254>
   1053c:	add	r0, pc, r0
   10540:	bl	44cc <rb_setenv@plt>
   10544:	mov	r3, r6
   10548:	ldr	r2, [pc, #252]	; 1064c <rb_helper_start+0x258>
   1054c:	add	r2, pc, r2
   10550:	mov	r1, #128	; 0x80
   10554:	add	r5, sp, #48	; 0x30
   10558:	mov	r0, r5
   1055c:	bl	4bb0 <snprintf@plt>
   10560:	str	r5, [sp, #176]	; 0xb0
   10564:	mov	r3, #0
   10568:	str	r3, [sp, #180]	; 0xb4
   1056c:	add	r1, sp, #176	; 0xb0
   10570:	mov	r0, r7
   10574:	bl	4b98 <rb_spawn_process@plt>
   10578:	mov	r5, r0
   1057c:	cmn	r0, #1
   10580:	beq	105f8 <rb_helper_start+0x204>
   10584:	ldr	r0, [sp, #12]
   10588:	bl	4868 <rb_close@plt>
   1058c:	ldr	r0, [sp]
   10590:	bl	4868 <rb_close@plt>
   10594:	add	r0, r4, #4
   10598:	bl	4af0 <rb_linebuf_newbuf@plt>
   1059c:	add	r0, r4, #32
   105a0:	bl	4af0 <rb_linebuf_newbuf@plt>
   105a4:	ldr	r3, [sp, #8]
   105a8:	str	r3, [r4, #60]	; 0x3c
   105ac:	ldr	r3, [sp, #4]
   105b0:	str	r3, [r4, #64]	; 0x40
   105b4:	str	r9, [r4, #76]	; 0x4c
   105b8:	str	r8, [r4, #80]	; 0x50
   105bc:	mov	r3, #0
   105c0:	str	r3, [r4, #72]	; 0x48
   105c4:	str	r5, [r4, #68]	; 0x44
   105c8:	mov	r0, r4
   105cc:	b	105e0 <rb_helper_start+0x1ec>
   105d0:	bl	4988 <rb_outofmemory@plt>
   105d4:	mov	r0, r4
   105d8:	bl	46f4 <free@plt>
   105dc:	mov	r0, #0
   105e0:	add	sp, sp, #184	; 0xb8
   105e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   105e8:	mov	r0, r4
   105ec:	bl	46f4 <free@plt>
   105f0:	mov	r0, #0
   105f4:	b	105e0 <rb_helper_start+0x1ec>
   105f8:	ldr	r0, [sp, #8]
   105fc:	bl	4868 <rb_close@plt>
   10600:	ldr	r0, [sp, #12]
   10604:	bl	4868 <rb_close@plt>
   10608:	ldr	r0, [sp]
   1060c:	bl	4868 <rb_close@plt>
   10610:	ldr	r0, [sp, #4]
   10614:	bl	4868 <rb_close@plt>
   10618:	mov	r0, r4
   1061c:	bl	46f4 <free@plt>
   10620:	mov	r0, #0
   10624:	b	105e0 <rb_helper_start+0x1ec>
   10628:	mov	r0, #0
   1062c:	b	105e0 <rb_helper_start+0x1ec>
   10630:	.word	0x00006c3c
   10634:	.word	0x00006c1c
   10638:	.word	0x000069d0
   1063c:	.word	0x00006b24
   10640:	.word	0x00006b14
   10644:	.word	0x00006b6c
   10648:	.word	0x00006b00
   1064c:	.word	0x00006b58

00010650 <rb_helper_restart>:
   10650:	push	{r4, lr}
   10654:	ldr	r3, [r0, #80]	; 0x50
   10658:	blx	r3
   1065c:	pop	{r4, pc}

00010660 <rb_helper_write_sendq>:
   10660:	ldr	r3, [r1, #16]
   10664:	cmp	r3, #0
   10668:	bxle	lr
   1066c:	push	{r4, r5, r6, lr}
   10670:	mov	r6, r1
   10674:	mov	r4, r0
   10678:	add	r5, r1, #4
   1067c:	mov	r1, r5
   10680:	mov	r0, r4
   10684:	bl	47cc <rb_linebuf_flush@plt>
   10688:	cmp	r0, #0
   1068c:	bgt	1067c <rb_helper_write_sendq+0x1c>
   10690:	beq	106d4 <rb_helper_write_sendq+0x74>
   10694:	blt	106c0 <rb_helper_write_sendq+0x60>
   10698:	ldr	r3, [r6, #16]
   1069c:	cmp	r3, #0
   106a0:	pople	{r4, r5, r6, pc}
   106a4:	mov	r3, r6
   106a8:	ldr	r2, [pc, #48]	; 106e0 <rb_helper_write_sendq+0x80>
   106ac:	add	r2, pc, r2
   106b0:	mov	r1, #2
   106b4:	ldr	r0, [r6, #64]	; 0x40
   106b8:	bl	44a8 <rb_setselect@plt>
   106bc:	pop	{r4, r5, r6, pc}
   106c0:	bl	4ce8 <__errno_location@plt>
   106c4:	ldr	r0, [r0]
   106c8:	bl	43dc <rb_ignore_errno@plt>
   106cc:	cmp	r0, #0
   106d0:	bne	10698 <rb_helper_write_sendq+0x38>
   106d4:	mov	r0, r6
   106d8:	bl	45d4 <rb_helper_restart@plt>
   106dc:	pop	{r4, r5, r6, pc}
   106e0:	.word	0xffffffac

000106e4 <rb_helper_read_cb>:
   106e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   106e8:	subs	r4, r1, #0
   106ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   106f0:	ldr	r6, [pc, #144]	; 10788 <rb_helper_read_cb+0xa4>
   106f4:	add	r6, pc, r6
   106f8:	mov	r5, #32768	; 0x8000
   106fc:	ldr	r9, [pc, #136]	; 1078c <rb_helper_read_cb+0xa8>
   10700:	add	r9, pc, r9
   10704:	add	r8, r4, #32
   10708:	mov	r7, #0
   1070c:	b	1072c <rb_helper_read_cb+0x48>
   10710:	mov	r3, r7
   10714:	mov	r1, r9
   10718:	mov	r0, r8
   1071c:	bl	467c <rb_linebuf_parse@plt>
   10720:	ldr	r3, [r4, #76]	; 0x4c
   10724:	mov	r0, r4
   10728:	blx	r3
   1072c:	mov	r2, r5
   10730:	mov	r1, r6
   10734:	ldr	r0, [r4, #60]	; 0x3c
   10738:	bl	4784 <rb_read@plt>
   1073c:	subs	r2, r0, #0
   10740:	bgt	10710 <rb_helper_read_cb+0x2c>
   10744:	beq	1077c <rb_helper_read_cb+0x98>
   10748:	blt	10768 <rb_helper_read_cb+0x84>
   1074c:	mov	r3, r4
   10750:	ldr	r2, [pc, #56]	; 10790 <rb_helper_read_cb+0xac>
   10754:	add	r2, pc, r2
   10758:	mov	r1, #1
   1075c:	ldr	r0, [r4, #60]	; 0x3c
   10760:	bl	44a8 <rb_setselect@plt>
   10764:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10768:	bl	4ce8 <__errno_location@plt>
   1076c:	ldr	r0, [r0]
   10770:	bl	43dc <rb_ignore_errno@plt>
   10774:	cmp	r0, #0
   10778:	bne	1074c <rb_helper_read_cb+0x68>
   1077c:	mov	r0, r4
   10780:	bl	45d4 <rb_helper_restart@plt>
   10784:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10788:	.word	0x0002cc78
   1078c:	.word	0x0002cc6c
   10790:	.word	0xffffff88

00010794 <rb_helper_write_queue>:
   10794:	push	{r1, r2, r3}
   10798:	push	{lr}		; (str lr, [sp, #-4]!)
   1079c:	sub	sp, sp, #24
   107a0:	mov	r3, #0
   107a4:	str	r3, [sp]
   107a8:	mov	r1, sp
   107ac:	str	r3, [sp, #8]
   107b0:	str	r3, [sp, #16]
   107b4:	ldr	r3, [sp, #28]
   107b8:	str	r3, [sp, #4]
   107bc:	add	r3, sp, #20
   107c0:	str	r3, [sp, #12]
   107c4:	add	r3, sp, #32
   107c8:	str	r3, [sp, #20]
   107cc:	add	r0, r0, #4
   107d0:	bl	4bec <rb_linebuf_put@plt>
   107d4:	add	sp, sp, #24
   107d8:	pop	{lr}		; (ldr lr, [sp], #4)
   107dc:	add	sp, sp, #12
   107e0:	bx	lr

000107e4 <rb_helper_write_flush>:
   107e4:	push	{r4, lr}
   107e8:	mov	r1, r0
   107ec:	ldr	r0, [r0, #64]	; 0x40
   107f0:	bl	10660 <rb_helper_write_sendq>
   107f4:	pop	{r4, pc}

000107f8 <rb_helper_write>:
   107f8:	push	{r1, r2, r3}
   107fc:	push	{r4, lr}
   10800:	sub	sp, sp, #28
   10804:	mov	r4, r0
   10808:	mov	r3, #0
   1080c:	str	r3, [sp]
   10810:	mov	r1, sp
   10814:	str	r3, [sp, #8]
   10818:	str	r3, [sp, #16]
   1081c:	ldr	r3, [sp, #36]	; 0x24
   10820:	str	r3, [sp, #4]
   10824:	add	r3, sp, #20
   10828:	str	r3, [sp, #12]
   1082c:	add	r3, sp, #40	; 0x28
   10830:	str	r3, [sp, #20]
   10834:	add	r0, r0, #4
   10838:	bl	4bec <rb_linebuf_put@plt>
   1083c:	mov	r0, r4
   10840:	bl	107e4 <rb_helper_write_flush>
   10844:	add	sp, sp, #28
   10848:	pop	{r4, lr}
   1084c:	add	sp, sp, #12
   10850:	bx	lr

00010854 <rb_helper_run>:
   10854:	cmp	r0, #0
   10858:	bxeq	lr
   1085c:	push	{r4, lr}
   10860:	mov	r1, r0
   10864:	ldr	r0, [r0, #60]	; 0x3c
   10868:	bl	106e4 <rb_helper_read_cb>
   1086c:	pop	{r4, pc}

00010870 <rb_helper_close>:
   10870:	push	{r4, lr}
   10874:	subs	r4, r0, #0
   10878:	popeq	{r4, pc}
   1087c:	mov	r1, #9
   10880:	ldr	r0, [r4, #68]	; 0x44
   10884:	bl	46e8 <rb_kill@plt>
   10888:	ldr	r0, [r4, #60]	; 0x3c
   1088c:	bl	4868 <rb_close@plt>
   10890:	ldr	r0, [r4, #64]	; 0x40
   10894:	bl	4868 <rb_close@plt>
   10898:	mov	r0, r4
   1089c:	bl	46f4 <free@plt>
   108a0:	pop	{r4, pc}

000108a4 <rb_helper_read>:
   108a4:	push	{lr}		; (str lr, [sp, #-4]!)
   108a8:	sub	sp, sp, #12
   108ac:	mov	r3, #0
   108b0:	str	r3, [sp]
   108b4:	add	r0, r0, #32
   108b8:	bl	479c <rb_linebuf_get@plt>
   108bc:	add	sp, sp, #12
   108c0:	pop	{pc}		; (ldr pc, [sp], #4)

000108c4 <rb_helper_loop>:
   108c4:	push	{r4, lr}
   108c8:	mov	r4, r1
   108cc:	bl	4364 <rb_helper_run@plt>
   108d0:	mov	r0, r4
   108d4:	bl	4748 <rb_lib_loop@plt>

000108d8 <rb_init_netio_devpoll>:
   108d8:	mov	r0, #38	; 0x26
   108dc:	bx	lr

000108e0 <rb_setselect_devpoll>:
   108e0:	push	{r4, lr}
   108e4:	bl	4ce8 <__errno_location@plt>
   108e8:	mov	r3, #38	; 0x26
   108ec:	str	r3, [r0]
   108f0:	pop	{r4, pc}

000108f4 <rb_select_devpoll>:
   108f4:	push	{r4, lr}
   108f8:	bl	4ce8 <__errno_location@plt>
   108fc:	mov	r3, #38	; 0x26
   10900:	str	r3, [r0]
   10904:	mvn	r0, #0
   10908:	pop	{r4, pc}

0001090c <rb_setup_fd_devpoll>:
   1090c:	push	{r4, lr}
   10910:	bl	4ce8 <__errno_location@plt>
   10914:	mov	r3, #38	; 0x26
   10918:	str	r3, [r0]
   1091c:	mvn	r0, #0
   10920:	pop	{r4, pc}

00010924 <rb_read_timerfd>:
   10924:	push	{r4, r5, lr}
   10928:	sub	sp, sp, #12
   1092c:	mov	r4, r0
   10930:	subs	r5, r1, #0
   10934:	beq	10978 <rb_read_timerfd+0x54>
   10938:	mov	r2, #8
   1093c:	mov	r1, sp
   10940:	bl	4784 <rb_read@plt>
   10944:	cmp	r0, #0
   10948:	beq	10994 <rb_read_timerfd+0x70>
   1094c:	blt	10980 <rb_read_timerfd+0x5c>
   10950:	mov	r3, r5
   10954:	ldr	r2, [pc, #104]	; 109c4 <rb_read_timerfd+0xa0>
   10958:	add	r2, pc, r2
   1095c:	mov	r1, #1
   10960:	mov	r0, r4
   10964:	bl	44a8 <rb_setselect@plt>
   10968:	mov	r0, r5
   1096c:	bl	48a4 <rb_run_one_event@plt>
   10970:	add	sp, sp, #12
   10974:	pop	{r4, r5, pc}
   10978:	bl	4868 <rb_close@plt>
   1097c:	b	10970 <rb_read_timerfd+0x4c>
   10980:	bl	4ce8 <__errno_location@plt>
   10984:	ldr	r0, [r0]
   10988:	bl	43dc <rb_ignore_errno@plt>
   1098c:	cmp	r0, #0
   10990:	bne	10950 <rb_read_timerfd+0x2c>
   10994:	mov	r0, r4
   10998:	bl	4868 <rb_close@plt>
   1099c:	ldr	r4, [r5, #20]
   109a0:	bl	4ce8 <__errno_location@plt>
   109a4:	ldr	r0, [r0]
   109a8:	bl	43a0 <strerror@plt>
   109ac:	mov	r2, r0
   109b0:	mov	r1, r4
   109b4:	ldr	r0, [pc, #12]	; 109c8 <rb_read_timerfd+0xa4>
   109b8:	add	r0, pc, r0
   109bc:	bl	491c <rb_lib_log@plt>
   109c0:	b	10970 <rb_read_timerfd+0x4c>
   109c4:	.word	0xffffffc4
   109c8:	.word	0x000066fc

000109cc <rb_init_netio_epoll>:
   109cc:	push	{r4, lr}
   109d0:	ldr	r3, [pc, #148]	; 10a6c <rb_init_netio_epoll+0xa0>
   109d4:	add	r3, pc, r3
   109d8:	mov	r2, #0
   109dc:	str	r2, [r3]
   109e0:	str	r2, [r3, #4]
   109e4:	mov	r1, #12
   109e8:	mov	r0, #1
   109ec:	bl	45ec <calloc@plt>
   109f0:	subs	r4, r0, #0
   109f4:	beq	10a5c <rb_init_netio_epoll+0x90>
   109f8:	ldr	r3, [pc, #112]	; 10a70 <rb_init_netio_epoll+0xa4>
   109fc:	add	r3, pc, r3
   10a00:	str	r4, [r3, #8]
   10a04:	bl	43b8 <getdtablesize@plt>
   10a08:	str	r0, [r4, #8]
   10a0c:	bl	44f0 <epoll_create@plt>
   10a10:	str	r0, [r4]
   10a14:	cmp	r0, #0
   10a18:	blt	10a64 <rb_init_netio_epoll+0x98>
   10a1c:	ldr	r2, [pc, #80]	; 10a74 <rb_init_netio_epoll+0xa8>
   10a20:	add	r2, pc, r2
   10a24:	mov	r1, #64	; 0x40
   10a28:	bl	4a84 <rb_open@plt>
   10a2c:	ldr	r3, [pc, #68]	; 10a78 <rb_init_netio_epoll+0xac>
   10a30:	add	r3, pc, r3
   10a34:	ldr	r4, [r3, #8]
   10a38:	ldr	r1, [r4, #8]
   10a3c:	lsl	r1, r1, #4
   10a40:	mov	r0, #1
   10a44:	bl	45ec <calloc@plt>
   10a48:	cmp	r0, #0
   10a4c:	beq	10a60 <rb_init_netio_epoll+0x94>
   10a50:	str	r0, [r4, #4]
   10a54:	mov	r0, #0
   10a58:	pop	{r4, pc}
   10a5c:	bl	4988 <rb_outofmemory@plt>
   10a60:	bl	4988 <rb_outofmemory@plt>
   10a64:	mvn	r0, #0
   10a68:	pop	{r4, pc}
   10a6c:	.word	0x0003499c
   10a70:	.word	0x00034974
   10a74:	.word	0x000066c8
   10a78:	.word	0x00034940

00010a7c <rb_setup_fd_epoll>:
   10a7c:	mov	r0, #0
   10a80:	bx	lr

00010a84 <rb_setselect_epoll>:
   10a84:	push	{lr}		; (str lr, [sp, #-4]!)
   10a88:	sub	sp, sp, #20
   10a8c:	ldr	ip, [r0, #20]
   10a90:	tst	r1, #1
   10a94:	beq	10ab0 <rb_setselect_epoll+0x2c>
   10a98:	cmp	r2, #0
   10a9c:	orrne	lr, ip, #1
   10aa0:	biceq	lr, ip, #1
   10aa4:	str	lr, [r0, #20]
   10aa8:	str	r2, [r0, #28]
   10aac:	str	r3, [r0, #32]
   10ab0:	tst	r1, #2
   10ab4:	beq	10ad4 <rb_setselect_epoll+0x50>
   10ab8:	cmp	r2, #0
   10abc:	ldr	r1, [r0, #20]
   10ac0:	orrne	r1, r1, #4
   10ac4:	biceq	r1, r1, #4
   10ac8:	str	r1, [r0, #20]
   10acc:	str	r2, [r0, #36]	; 0x24
   10ad0:	str	r3, [r0, #40]	; 0x28
   10ad4:	cmp	ip, #0
   10ad8:	bne	10b48 <rb_setselect_epoll+0xc4>
   10adc:	ldr	r3, [r0, #20]
   10ae0:	cmp	r3, #0
   10ae4:	beq	10b20 <rb_setselect_epoll+0x9c>
   10ae8:	strgt	r0, [sp, #8]
   10aec:	movgt	r1, #1
   10af0:	ble	10b78 <rb_setselect_epoll+0xf4>
   10af4:	orr	r3, r3, #-2147483648	; 0x80000000
   10af8:	str	r3, [sp]
   10afc:	ldr	r3, [pc, #132]	; 10b88 <rb_setselect_epoll+0x104>
   10b00:	add	r3, pc, r3
   10b04:	ldr	ip, [r3, #8]
   10b08:	mov	r3, sp
   10b0c:	ldr	r2, [r0, #12]
   10b10:	ldr	r0, [ip]
   10b14:	bl	4c58 <epoll_ctl@plt>
   10b18:	cmp	r0, #0
   10b1c:	bne	10b28 <rb_setselect_epoll+0xa4>
   10b20:	add	sp, sp, #20
   10b24:	pop	{pc}		; (ldr pc, [sp], #4)
   10b28:	bl	4ce8 <__errno_location@plt>
   10b2c:	ldr	r0, [r0]
   10b30:	bl	43a0 <strerror@plt>
   10b34:	mov	r1, r0
   10b38:	ldr	r0, [pc, #76]	; 10b8c <rb_setselect_epoll+0x108>
   10b3c:	add	r0, pc, r0
   10b40:	bl	491c <rb_lib_log@plt>
   10b44:	bl	43c4 <abort@plt>
   10b48:	ldr	r3, [r0, #20]
   10b4c:	cmp	r3, #0
   10b50:	ble	10b68 <rb_setselect_epoll+0xe4>
   10b54:	cmp	ip, r3
   10b58:	strne	r0, [sp, #8]
   10b5c:	movne	r1, #3
   10b60:	bne	10af4 <rb_setselect_epoll+0x70>
   10b64:	b	10b20 <rb_setselect_epoll+0x9c>
   10b68:	str	r3, [sp]
   10b6c:	str	r0, [sp, #8]
   10b70:	mov	r1, #2
   10b74:	b	10afc <rb_setselect_epoll+0x78>
   10b78:	str	r3, [sp]
   10b7c:	str	r0, [sp, #8]
   10b80:	mov	r1, #2
   10b84:	b	10afc <rb_setselect_epoll+0x78>
   10b88:	.word	0x00034870
   10b8c:	.word	0x000065c4

00010b90 <rb_select_epoll>:
   10b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b94:	sub	sp, sp, #36	; 0x24
   10b98:	ldr	r3, [pc, #472]	; 10d78 <rb_select_epoll+0x1e8>
   10b9c:	add	r3, pc, r3
   10ba0:	ldr	ip, [r3, #8]
   10ba4:	mov	r3, r0
   10ba8:	ldr	r2, [ip, #8]
   10bac:	ldr	r1, [ip, #4]
   10bb0:	ldr	r0, [ip]
   10bb4:	bl	47b4 <epoll_wait@plt>
   10bb8:	mov	r8, r0
   10bbc:	bl	4ce8 <__errno_location@plt>
   10bc0:	mov	r5, r0
   10bc4:	str	r0, [sp, #8]
   10bc8:	ldr	r4, [r0]
   10bcc:	bl	4994 <rb_set_time@plt>
   10bd0:	str	r4, [r5]
   10bd4:	cmp	r8, #0
   10bd8:	blt	10c1c <rb_select_epoll+0x8c>
   10bdc:	cmp	r8, #0
   10be0:	movle	r0, #0
   10be4:	ble	10c54 <rb_select_epoll+0xc4>
   10be8:	mov	r5, #0
   10bec:	ldr	sl, [pc, #392]	; 10d7c <rb_select_epoll+0x1ec>
   10bf0:	add	sl, pc, sl
   10bf4:	mov	r7, r5
   10bf8:	ldr	fp, [pc, #384]	; 10d80 <rb_select_epoll+0x1f0>
   10bfc:	add	fp, pc, fp
   10c00:	ldr	r3, [pc, #380]	; 10d84 <rb_select_epoll+0x1f4>
   10c04:	add	r3, pc, r3
   10c08:	str	r3, [sp, #4]
   10c0c:	ldr	r3, [pc, #372]	; 10d88 <rb_select_epoll+0x1f8>
   10c10:	add	r3, pc, r3
   10c14:	str	r3, [sp, #12]
   10c18:	b	10c98 <rb_select_epoll+0x108>
   10c1c:	mov	r0, r4
   10c20:	bl	43dc <rb_ignore_errno@plt>
   10c24:	cmp	r0, #0
   10c28:	moveq	r0, #5
   10c2c:	movne	r0, #0
   10c30:	b	10c54 <rb_select_epoll+0xc4>
   10c34:	ldr	r3, [sp, #8]
   10c38:	ldr	r0, [r3]
   10c3c:	bl	43a0 <strerror@plt>
   10c40:	mov	r1, r0
   10c44:	ldr	r0, [sp, #12]
   10c48:	bl	491c <rb_lib_log@plt>
   10c4c:	b	10c8c <rb_select_epoll+0xfc>
   10c50:	mov	r0, #0
   10c54:	add	sp, sp, #36	; 0x24
   10c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c5c:	str	r7, [sp, #16]
   10c60:	str	r7, [r4, #20]
   10c64:	str	r4, [sp, #24]
   10c68:	mov	r1, #2
   10c6c:	add	r3, sp, #16
   10c70:	ldr	r2, [r4, #12]
   10c74:	ldr	r0, [sp, #4]
   10c78:	ldr	r0, [r0, #8]
   10c7c:	ldr	r0, [r0]
   10c80:	bl	4c58 <epoll_ctl@plt>
   10c84:	cmp	r0, #0
   10c88:	bne	10c34 <rb_select_epoll+0xa4>
   10c8c:	add	r5, r5, #1
   10c90:	cmp	r8, r5
   10c94:	beq	10c50 <rb_select_epoll+0xc0>
   10c98:	lsl	r6, r5, #4
   10c9c:	ldr	r3, [sl, #8]
   10ca0:	ldr	r3, [r3, #4]
   10ca4:	add	r2, r3, r6
   10ca8:	ldr	r4, [r2, #8]
   10cac:	ldr	r9, [r4, #20]
   10cb0:	ldr	r3, [r3, r5, lsl #4]
   10cb4:	tst	r3, #25
   10cb8:	beq	10cdc <rb_select_epoll+0x14c>
   10cbc:	ldr	r3, [r4, #28]
   10cc0:	ldr	r1, [r4, #32]
   10cc4:	str	r7, [r4, #28]
   10cc8:	str	r7, [r4, #32]
   10ccc:	cmp	r3, #0
   10cd0:	beq	10cdc <rb_select_epoll+0x14c>
   10cd4:	mov	r0, r4
   10cd8:	blx	r3
   10cdc:	ldrb	r3, [r4, #16]
   10ce0:	tst	r3, #1
   10ce4:	beq	10c8c <rb_select_epoll+0xfc>
   10ce8:	ldr	r3, [fp, #8]
   10cec:	ldr	r3, [r3, #4]
   10cf0:	ldr	r3, [r3, r6]
   10cf4:	tst	r3, #28
   10cf8:	beq	10d28 <rb_select_epoll+0x198>
   10cfc:	ldr	r3, [r4, #36]	; 0x24
   10d00:	ldr	r1, [r4, #40]	; 0x28
   10d04:	str	r7, [r4, #36]	; 0x24
   10d08:	str	r7, [r4, #40]	; 0x28
   10d0c:	cmp	r3, #0
   10d10:	beq	10d68 <rb_select_epoll+0x1d8>
   10d14:	mov	r0, r4
   10d18:	blx	r3
   10d1c:	ldrb	r3, [r4, #16]
   10d20:	tst	r3, #1
   10d24:	beq	10c8c <rb_select_epoll+0xfc>
   10d28:	ldr	r3, [r4, #28]
   10d2c:	adds	r3, r3, #0
   10d30:	movne	r3, #1
   10d34:	ldr	r2, [r4, #36]	; 0x24
   10d38:	cmp	r2, #0
   10d3c:	orrne	r3, r3, #4
   10d40:	cmp	r3, r9
   10d44:	beq	10c8c <rb_select_epoll+0xfc>
   10d48:	cmp	r3, #0
   10d4c:	beq	10c5c <rb_select_epoll+0xcc>
   10d50:	str	r3, [r4, #20]
   10d54:	str	r4, [sp, #24]
   10d58:	orr	r3, r3, #-2147483648	; 0x80000000
   10d5c:	str	r3, [sp, #16]
   10d60:	mov	r1, #3
   10d64:	b	10c6c <rb_select_epoll+0xdc>
   10d68:	ldr	r3, [r4, #28]
   10d6c:	adds	r3, r3, #0
   10d70:	movne	r3, #1
   10d74:	b	10d40 <rb_select_epoll+0x1b0>
   10d78:	.word	0x000347d4
   10d7c:	.word	0x00034780
   10d80:	.word	0x00034774
   10d84:	.word	0x0003476c
   10d88:	.word	0x0000651c

00010d8c <rb_epoll_supports_event>:
   10d8c:	push	{r4, r5, lr}
   10d90:	sub	sp, sp, #292	; 0x124
   10d94:	ldr	r3, [pc, #272]	; 10eac <rb_epoll_supports_event+0x120>
   10d98:	add	r3, pc, r3
   10d9c:	ldr	r4, [r3]
   10da0:	cmp	r4, #1
   10da4:	beq	10de0 <rb_epoll_supports_event+0x54>
   10da8:	cmn	r4, #1
   10dac:	moveq	r4, #0
   10db0:	beq	10de0 <rb_epoll_supports_event+0x54>
   10db4:	add	r2, sp, #128	; 0x80
   10db8:	ldr	r1, [pc, #240]	; 10eb0 <rb_epoll_supports_event+0x124>
   10dbc:	add	r1, pc, r1
   10dc0:	mov	r0, #3
   10dc4:	bl	4490 <__xstat@plt>
   10dc8:	subs	r4, r0, #0
   10dcc:	bne	10dec <rb_epoll_supports_event+0x60>
   10dd0:	mvn	r2, #0
   10dd4:	ldr	r3, [pc, #216]	; 10eb4 <rb_epoll_supports_event+0x128>
   10dd8:	add	r3, pc, r3
   10ddc:	str	r2, [r3]
   10de0:	mov	r0, r4
   10de4:	add	sp, sp, #292	; 0x124
   10de8:	pop	{r4, r5, pc}
   10dec:	mov	r1, #0
   10df0:	mov	r0, r1
   10df4:	bl	4bc8 <timerfd_create@plt>
   10df8:	cmp	r0, #0
   10dfc:	blt	10e1c <rb_epoll_supports_event+0x90>
   10e00:	bl	4940 <close@plt>
   10e04:	ldr	r3, [pc, #172]	; 10eb8 <rb_epoll_supports_event+0x12c>
   10e08:	add	r3, pc, r3
   10e0c:	mov	r4, #1
   10e10:	str	r4, [r3]
   10e14:	str	r4, [r3, #4]
   10e18:	b	10de0 <rb_epoll_supports_event+0x54>
   10e1c:	mov	r3, #26
   10e20:	str	r3, [sp, #224]	; 0xe0
   10e24:	mov	r0, #0
   10e28:	str	r0, [sp, #228]	; 0xe4
   10e2c:	add	r2, sp, #284	; 0x11c
   10e30:	add	r1, sp, #220	; 0xdc
   10e34:	bl	452c <timer_create@plt>
   10e38:	subs	r4, r0, #0
   10e3c:	beq	10e58 <rb_epoll_supports_event+0xcc>
   10e40:	mvn	r2, #0
   10e44:	ldr	r3, [pc, #112]	; 10ebc <rb_epoll_supports_event+0x130>
   10e48:	add	r3, pc, r3
   10e4c:	str	r2, [r3]
   10e50:	mov	r4, #0
   10e54:	b	10de0 <rb_epoll_supports_event+0x54>
   10e58:	ldr	r0, [sp, #284]	; 0x11c
   10e5c:	bl	4a78 <timer_delete@plt>
   10e60:	mov	r0, sp
   10e64:	bl	4394 <sigemptyset@plt>
   10e68:	mov	r2, #0
   10e6c:	mov	r1, sp
   10e70:	mvn	r0, #0
   10e74:	bl	443c <signalfd@plt>
   10e78:	cmp	r0, #0
   10e7c:	blt	10e98 <rb_epoll_supports_event+0x10c>
   10e80:	bl	4940 <close@plt>
   10e84:	mov	r4, #1
   10e88:	ldr	r3, [pc, #48]	; 10ec0 <rb_epoll_supports_event+0x134>
   10e8c:	add	r3, pc, r3
   10e90:	str	r4, [r3]
   10e94:	b	10de0 <rb_epoll_supports_event+0x54>
   10e98:	mvn	r2, #0
   10e9c:	ldr	r3, [pc, #32]	; 10ec4 <rb_epoll_supports_event+0x138>
   10ea0:	add	r3, pc, r3
   10ea4:	str	r2, [r3]
   10ea8:	b	10de0 <rb_epoll_supports_event+0x54>
   10eac:	.word	0x000345d8
   10eb0:	.word	0x00006398
   10eb4:	.word	0x00034598
   10eb8:	.word	0x00034568
   10ebc:	.word	0x00034528
   10ec0:	.word	0x000344e4
   10ec4:	.word	0x000344d0

00010ec8 <rb_epoll_init_event>:
   10ec8:	push	{r4, lr}
   10ecc:	sub	sp, sp, #128	; 0x80
   10ed0:	bl	10d8c <rb_epoll_supports_event>
   10ed4:	ldr	r3, [pc, #168]	; 10f84 <rb_epoll_init_event+0xbc>
   10ed8:	add	r3, pc, r3
   10edc:	ldr	r3, [r3, #4]
   10ee0:	cmp	r3, #0
   10ee4:	beq	10ef0 <rb_epoll_init_event+0x28>
   10ee8:	add	sp, sp, #128	; 0x80
   10eec:	pop	{r4, pc}
   10ef0:	mov	r0, sp
   10ef4:	bl	4394 <sigemptyset@plt>
   10ef8:	bl	4484 <__libc_current_sigrtmin@plt>
   10efc:	mov	r1, r0
   10f00:	mov	r0, sp
   10f04:	bl	4880 <sigaddset@plt>
   10f08:	mov	r2, #0
   10f0c:	mov	r1, sp
   10f10:	mov	r0, r2
   10f14:	bl	49b8 <sigprocmask@plt>
   10f18:	mov	r0, sp
   10f1c:	bl	4394 <sigemptyset@plt>
   10f20:	bl	4484 <__libc_current_sigrtmin@plt>
   10f24:	mov	r1, r0
   10f28:	mov	r0, sp
   10f2c:	bl	4880 <sigaddset@plt>
   10f30:	mov	r2, #0
   10f34:	mov	r1, sp
   10f38:	mvn	r0, #0
   10f3c:	bl	443c <signalfd@plt>
   10f40:	cmn	r0, #1
   10f44:	beq	10f70 <rb_epoll_init_event+0xa8>
   10f48:	ldr	r2, [pc, #56]	; 10f88 <rb_epoll_init_event+0xc0>
   10f4c:	add	r2, pc, r2
   10f50:	mov	r1, #64	; 0x40
   10f54:	bl	4a84 <rb_open@plt>
   10f58:	mov	r4, r0
   10f5c:	bl	461c <rb_set_nb@plt>
   10f60:	mov	r1, #0
   10f64:	mov	r0, r4
   10f68:	bl	10f90 <signalfd_handler>
   10f6c:	b	10ee8 <rb_epoll_init_event+0x20>
   10f70:	mvn	r2, #0
   10f74:	ldr	r3, [pc, #16]	; 10f8c <rb_epoll_init_event+0xc4>
   10f78:	add	r3, pc, r3
   10f7c:	str	r2, [r3]
   10f80:	b	10ee8 <rb_epoll_init_event+0x20>
   10f84:	.word	0x00034498
   10f88:	.word	0x00006220
   10f8c:	.word	0x000343f8

00010f90 <signalfd_handler>:
   10f90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f94:	mov	r7, r0
   10f98:	ldr	r1, [pc, #228]	; 11084 <signalfd_handler+0xf4>
   10f9c:	add	r1, pc, r1
   10fa0:	add	sl, r1, #16
   10fa4:	add	r2, r1, #2064	; 0x810
   10fa8:	mov	r1, r2
   10fac:	mov	r3, sl
   10fb0:	mov	r0, #128	; 0x80
   10fb4:	str	r3, [r2]
   10fb8:	str	r0, [r2, #4]
   10fbc:	add	r3, r3, #128	; 0x80
   10fc0:	add	r2, r2, #8
   10fc4:	cmp	r3, r1
   10fc8:	bne	10fb4 <signalfd_handler+0x24>
   10fcc:	ldr	r8, [pc, #180]	; 11088 <signalfd_handler+0xf8>
   10fd0:	add	r8, pc, r8
   10fd4:	add	r8, r8, #2064	; 0x810
   10fd8:	mov	r9, #16
   10fdc:	mov	r0, r7
   10fe0:	bl	44e4 <rb_get_fd@plt>
   10fe4:	mov	r2, r9
   10fe8:	mov	r1, r8
   10fec:	bl	4c70 <readv@plt>
   10ff0:	cmp	r0, #0
   10ff4:	beq	11050 <signalfd_handler+0xc0>
   10ff8:	blt	11020 <signalfd_handler+0x90>
   10ffc:	add	r6, r0, #127	; 0x7f
   11000:	cmp	r0, #0
   11004:	movlt	r0, r6
   11008:	asr	r6, r0, #7
   1100c:	cmp	r6, #0
   11010:	movgt	r5, sl
   11014:	movgt	r4, #0
   11018:	bgt	11070 <signalfd_handler+0xe0>
   1101c:	b	10fdc <signalfd_handler+0x4c>
   11020:	bl	4ce8 <__errno_location@plt>
   11024:	ldr	r0, [r0]
   11028:	bl	43dc <rb_ignore_errno@plt>
   1102c:	cmp	r0, #0
   11030:	beq	11050 <signalfd_handler+0xc0>
   11034:	mov	r3, #0
   11038:	ldr	r2, [pc, #76]	; 1108c <signalfd_handler+0xfc>
   1103c:	add	r2, pc, r2
   11040:	mov	r1, #1
   11044:	mov	r0, r7
   11048:	bl	44a8 <rb_setselect@plt>
   1104c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11050:	mov	r0, r7
   11054:	bl	4868 <rb_close@plt>
   11058:	bl	10ec8 <rb_epoll_init_event>
   1105c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11060:	add	r4, r4, #1
   11064:	add	r5, r5, #128	; 0x80
   11068:	cmp	r4, r6
   1106c:	beq	10fdc <signalfd_handler+0x4c>
   11070:	ldr	r0, [r5, #48]	; 0x30
   11074:	cmp	r0, #0
   11078:	beq	11060 <signalfd_handler+0xd0>
   1107c:	bl	48a4 <rb_run_one_event@plt>
   11080:	b	11060 <signalfd_handler+0xd0>
   11084:	.word	0x000343d4
   11088:	.word	0x000343a0
   1108c:	.word	0xffffff4c

00011090 <rb_epoll_sched_event>:
   11090:	push	{r4, r5, r6, r7, lr}
   11094:	sub	sp, sp, #84	; 0x54
   11098:	mov	r5, r0
   1109c:	mov	r7, r1
   110a0:	ldr	r3, [pc, #512]	; 112a8 <rb_epoll_sched_event+0x218>
   110a4:	add	r3, pc, r3
   110a8:	ldr	r4, [r3, #4]
   110ac:	cmp	r4, #0
   110b0:	bne	11158 <rb_epoll_sched_event+0xc8>
   110b4:	mov	r2, #64	; 0x40
   110b8:	mov	r1, #0
   110bc:	add	r0, sp, #16
   110c0:	bl	4628 <memset@plt>
   110c4:	mov	r1, #4
   110c8:	mov	r0, #1
   110cc:	bl	45ec <calloc@plt>
   110d0:	subs	r6, r0, #0
   110d4:	beq	11264 <rb_epoll_sched_event+0x1d4>
   110d8:	str	r6, [r5, #40]	; 0x28
   110dc:	bl	4484 <__libc_current_sigrtmin@plt>
   110e0:	str	r0, [sp, #20]
   110e4:	add	r1, sp, #80	; 0x50
   110e8:	str	r5, [r1, #-64]!	; 0xffffffc0
   110ec:	mov	r2, r6
   110f0:	mov	r0, #0
   110f4:	bl	452c <timer_create@plt>
   110f8:	cmp	r0, #0
   110fc:	blt	11268 <rb_epoll_sched_event+0x1d8>
   11100:	mov	r2, #0
   11104:	str	r2, [sp]
   11108:	str	r2, [sp, #4]
   1110c:	str	r2, [sp, #12]
   11110:	str	r7, [sp, #8]
   11114:	ldr	r3, [r5, #24]
   11118:	cmp	r3, r2
   1111c:	addne	r3, sp, #8
   11120:	ldmne	r3, {r0, r1}
   11124:	movne	r3, sp
   11128:	stmne	r3, {r0, r1}
   1112c:	mov	r3, #0
   11130:	mov	r2, sp
   11134:	mov	r1, r3
   11138:	ldr	r0, [r6]
   1113c:	bl	4754 <timer_settime@plt>
   11140:	cmp	r0, #0
   11144:	movge	r4, #1
   11148:	blt	11288 <rb_epoll_sched_event+0x1f8>
   1114c:	mov	r0, r4
   11150:	add	sp, sp, #84	; 0x54
   11154:	pop	{r4, r5, r6, r7, pc}
   11158:	mov	r1, #0
   1115c:	mov	r0, r1
   11160:	bl	4bc8 <timerfd_create@plt>
   11164:	subs	r6, r0, #0
   11168:	blt	11214 <rb_epoll_sched_event+0x184>
   1116c:	mov	r2, #0
   11170:	str	r2, [sp, #16]
   11174:	str	r2, [sp, #20]
   11178:	str	r2, [sp, #28]
   1117c:	str	r7, [sp, #24]
   11180:	ldr	r3, [r5, #24]
   11184:	cmp	r3, r2
   11188:	addne	r3, sp, #24
   1118c:	ldmne	r3, {r0, r1}
   11190:	addne	r3, sp, #16
   11194:	stmne	r3, {r0, r1}
   11198:	mov	r3, #0
   1119c:	add	r2, sp, #16
   111a0:	mov	r1, r3
   111a4:	mov	r0, r6
   111a8:	bl	4c4c <timerfd_settime@plt>
   111ac:	cmp	r0, #0
   111b0:	blt	11238 <rb_epoll_sched_event+0x1a8>
   111b4:	ldr	r4, [pc, #240]	; 112ac <rb_epoll_sched_event+0x21c>
   111b8:	add	r4, pc, r4
   111bc:	add	r4, r4, #2192	; 0x890
   111c0:	ldr	r3, [r5, #20]
   111c4:	ldr	r2, [pc, #228]	; 112b0 <rb_epoll_sched_event+0x220>
   111c8:	add	r2, pc, r2
   111cc:	mov	r1, #136	; 0x88
   111d0:	mov	r0, r4
   111d4:	bl	4bb0 <snprintf@plt>
   111d8:	mov	r2, r4
   111dc:	mov	r1, #64	; 0x40
   111e0:	mov	r0, r6
   111e4:	bl	4a84 <rb_open@plt>
   111e8:	mov	r4, r0
   111ec:	bl	461c <rb_set_nb@plt>
   111f0:	str	r4, [r5, #40]	; 0x28
   111f4:	mov	r3, r5
   111f8:	ldr	r2, [pc, #180]	; 112b4 <rb_epoll_sched_event+0x224>
   111fc:	add	r2, pc, r2
   11200:	mov	r1, #1
   11204:	mov	r0, r4
   11208:	bl	44a8 <rb_setselect@plt>
   1120c:	mov	r4, #1
   11210:	b	1114c <rb_epoll_sched_event+0xbc>
   11214:	bl	4ce8 <__errno_location@plt>
   11218:	ldr	r0, [r0]
   1121c:	bl	43a0 <strerror@plt>
   11220:	mov	r1, r0
   11224:	ldr	r0, [pc, #140]	; 112b8 <rb_epoll_sched_event+0x228>
   11228:	add	r0, pc, r0
   1122c:	bl	491c <rb_lib_log@plt>
   11230:	mov	r4, #0
   11234:	b	1114c <rb_epoll_sched_event+0xbc>
   11238:	bl	4ce8 <__errno_location@plt>
   1123c:	ldr	r0, [r0]
   11240:	bl	43a0 <strerror@plt>
   11244:	mov	r1, r0
   11248:	ldr	r0, [pc, #108]	; 112bc <rb_epoll_sched_event+0x22c>
   1124c:	add	r0, pc, r0
   11250:	bl	491c <rb_lib_log@plt>
   11254:	mov	r0, r6
   11258:	bl	4940 <close@plt>
   1125c:	mov	r4, #0
   11260:	b	1114c <rb_epoll_sched_event+0xbc>
   11264:	bl	4988 <rb_outofmemory@plt>
   11268:	bl	4ce8 <__errno_location@plt>
   1126c:	ldr	r0, [r0]
   11270:	bl	43a0 <strerror@plt>
   11274:	mov	r1, r0
   11278:	ldr	r0, [pc, #64]	; 112c0 <rb_epoll_sched_event+0x230>
   1127c:	add	r0, pc, r0
   11280:	bl	491c <rb_lib_log@plt>
   11284:	b	1114c <rb_epoll_sched_event+0xbc>
   11288:	bl	4ce8 <__errno_location@plt>
   1128c:	ldr	r0, [r0]
   11290:	bl	43a0 <strerror@plt>
   11294:	mov	r1, r0
   11298:	ldr	r0, [pc, #36]	; 112c4 <rb_epoll_sched_event+0x234>
   1129c:	add	r0, pc, r0
   112a0:	bl	491c <rb_lib_log@plt>
   112a4:	b	1114c <rb_epoll_sched_event+0xbc>
   112a8:	.word	0x000342cc
   112ac:	.word	0x000341b8
   112b0:	.word	0x00005fdc
   112b4:	.word	0xfffff720
   112b8:	.word	0x00005f50
   112bc:	.word	0x00005f40
   112c0:	.word	0x00005f34
   112c4:	.word	0x00005f28

000112c8 <rb_epoll_unsched_event>:
   112c8:	push	{r4, lr}
   112cc:	mov	r4, r0
   112d0:	ldr	r3, [pc, #72]	; 11320 <rb_epoll_unsched_event+0x58>
   112d4:	add	r3, pc, r3
   112d8:	ldr	r3, [r3, #4]
   112dc:	cmp	r3, #0
   112e0:	bne	1130c <rb_epoll_unsched_event+0x44>
   112e4:	ldr	r3, [r0, #40]	; 0x28
   112e8:	ldr	r0, [r3]
   112ec:	bl	4a78 <timer_delete@plt>
   112f0:	ldr	r0, [r4, #40]	; 0x28
   112f4:	cmp	r0, #0
   112f8:	beq	11300 <rb_epoll_unsched_event+0x38>
   112fc:	bl	46f4 <free@plt>
   11300:	mov	r3, #0
   11304:	str	r3, [r4, #40]	; 0x28
   11308:	pop	{r4, pc}
   1130c:	ldr	r0, [r0, #40]	; 0x28
   11310:	bl	4868 <rb_close@plt>
   11314:	mov	r3, #0
   11318:	str	r3, [r4, #40]	; 0x28
   1131c:	pop	{r4, pc}
   11320:	.word	0x0003409c

00011324 <rb_setup_fd_poll>:
   11324:	mov	r0, #0
   11328:	bx	lr

0001132c <rb_init_netio_poll>:
   1132c:	push	{r4, r5, r6, lr}
   11330:	bl	446c <rb_getmaxconnect@plt>
   11334:	lsl	r1, r0, #3
   11338:	mov	r0, #1
   1133c:	bl	45ec <calloc@plt>
   11340:	cmp	r0, #0
   11344:	beq	11370 <rb_init_netio_poll+0x44>
   11348:	ldr	r4, [pc, #80]	; 113a0 <rb_init_netio_poll+0x74>
   1134c:	add	r4, pc, r4
   11350:	str	r0, [r4]
   11354:	bl	446c <rb_getmaxconnect@plt>
   11358:	str	r0, [r4, #8]
   1135c:	mov	r4, #0
   11360:	ldr	r6, [pc, #60]	; 113a4 <rb_init_netio_poll+0x78>
   11364:	add	r6, pc, r6
   11368:	mvn	r5, #0
   1136c:	b	11380 <rb_init_netio_poll+0x54>
   11370:	bl	4988 <rb_outofmemory@plt>
   11374:	ldr	r3, [r6]
   11378:	str	r5, [r3, r4, lsl #3]
   1137c:	add	r4, r4, #1
   11380:	bl	446c <rb_getmaxconnect@plt>
   11384:	cmp	r4, r0
   11388:	blt	11374 <rb_init_netio_poll+0x48>
   1138c:	mov	r0, #0
   11390:	ldr	r3, [pc, #16]	; 113a8 <rb_init_netio_poll+0x7c>
   11394:	add	r3, pc, r3
   11398:	str	r0, [r3, #4]
   1139c:	pop	{r4, r5, r6, pc}
   113a0:	.word	0x0003493c
   113a4:	.word	0x00034924
   113a8:	.word	0x000348f4

000113ac <rb_setselect_poll>:
   113ac:	push	{r4, r5, r6, r7, r8, lr}
   113b0:	subs	r5, r0, #0
   113b4:	popeq	{r4, r5, r6, r7, r8, pc}
   113b8:	tst	r1, #1
   113bc:	beq	11420 <rb_setselect_poll+0x74>
   113c0:	str	r2, [r5, #28]
   113c4:	str	r3, [r5, #32]
   113c8:	cmp	r2, #0
   113cc:	beq	113f0 <rb_setselect_poll+0x44>
   113d0:	ldr	ip, [r5, #20]
   113d4:	orr	ip, ip, #64	; 0x40
   113d8:	str	ip, [r5, #20]
   113dc:	tst	r1, #2
   113e0:	beq	11444 <rb_setselect_poll+0x98>
   113e4:	str	r2, [r5, #36]	; 0x24
   113e8:	str	r3, [r5, #40]	; 0x28
   113ec:	b	11438 <rb_setselect_poll+0x8c>
   113f0:	ldr	r2, [r5, #20]
   113f4:	bic	r2, r2, #64	; 0x40
   113f8:	str	r2, [r5, #20]
   113fc:	tst	r1, #2
   11400:	beq	11444 <rb_setselect_poll+0x98>
   11404:	mov	r2, #0
   11408:	str	r2, [r5, #36]	; 0x24
   1140c:	str	r3, [r5, #40]	; 0x28
   11410:	ldr	r3, [r5, #20]
   11414:	bic	r3, r3, #256	; 0x100
   11418:	str	r3, [r5, #20]
   1141c:	b	11444 <rb_setselect_poll+0x98>
   11420:	tst	r1, #2
   11424:	beq	11444 <rb_setselect_poll+0x98>
   11428:	str	r2, [r5, #36]	; 0x24
   1142c:	str	r3, [r5, #40]	; 0x28
   11430:	cmp	r2, #0
   11434:	beq	11410 <rb_setselect_poll+0x64>
   11438:	ldr	r3, [r5, #20]
   1143c:	orr	r3, r3, #256	; 0x100
   11440:	str	r3, [r5, #20]
   11444:	ldr	r3, [pc, #348]	; 115a8 <rb_setselect_poll+0x1fc>
   11448:	add	r3, pc, r3
   1144c:	ldr	r4, [r3, #8]
   11450:	ldr	r3, [r5, #12]
   11454:	cmp	r3, r4
   11458:	bge	114a4 <rb_setselect_poll+0xf8>
   1145c:	ldr	r2, [r5, #20]
   11460:	cmp	r2, #0
   11464:	ble	11518 <rb_setselect_poll+0x16c>
   11468:	ldr	r1, [pc, #316]	; 115ac <rb_setselect_poll+0x200>
   1146c:	add	r1, pc, r1
   11470:	ldr	r0, [r1]
   11474:	ldr	r3, [r5, #12]
   11478:	add	r3, r0, r3, lsl #3
   1147c:	strh	r2, [r3, #4]
   11480:	ldr	r3, [r5, #12]
   11484:	str	r3, [r0, r3, lsl #3]
   11488:	ldr	r3, [r5, #12]
   1148c:	ldr	r2, [r1, #4]
   11490:	cmp	r3, r2
   11494:	ldrgt	r2, [pc, #276]	; 115b0 <rb_setselect_poll+0x204>
   11498:	addgt	r2, pc, r2
   1149c:	strgt	r3, [r2, #4]
   114a0:	pop	{r4, r5, r6, r7, r8, pc}
   114a4:	add	r6, r4, #1024	; 0x400
   114a8:	ldr	r3, [pc, #260]	; 115b4 <rb_setselect_poll+0x208>
   114ac:	add	r3, pc, r3
   114b0:	str	r6, [r3, #8]
   114b4:	lsl	r8, r6, #3
   114b8:	mov	r1, r8
   114bc:	ldr	r0, [r3]
   114c0:	bl	4c40 <realloc@plt>
   114c4:	subs	r7, r0, #0
   114c8:	beq	11514 <rb_setselect_poll+0x168>
   114cc:	ldr	r3, [pc, #228]	; 115b8 <rb_setselect_poll+0x20c>
   114d0:	add	r3, pc, r3
   114d4:	str	r7, [r3]
   114d8:	sub	r0, r8, #8128	; 0x1fc0
   114dc:	sub	r0, r0, #56	; 0x38
   114e0:	mov	r2, #8192	; 0x2000
   114e4:	mov	r1, #0
   114e8:	add	r0, r7, r0
   114ec:	bl	4628 <memset@plt>
   114f0:	add	r3, r4, #1
   114f4:	cmp	r6, r3
   114f8:	ble	1145c <rb_setselect_poll+0xb0>
   114fc:	mvn	r2, #0
   11500:	str	r2, [r7, r3, lsl #3]
   11504:	add	r3, r3, #1
   11508:	cmp	r6, r3
   1150c:	bgt	11500 <rb_setselect_poll+0x154>
   11510:	b	1145c <rb_setselect_poll+0xb0>
   11514:	bl	4988 <rb_outofmemory@plt>
   11518:	ldr	r2, [pc, #156]	; 115bc <rb_setselect_poll+0x210>
   1151c:	add	r2, pc, r2
   11520:	ldr	r1, [r2]
   11524:	ldr	r3, [r5, #12]
   11528:	add	r3, r1, r3, lsl #3
   1152c:	mov	r0, #0
   11530:	strh	r0, [r3, #4]
   11534:	ldr	r3, [r5, #12]
   11538:	mvn	r0, #0
   1153c:	str	r0, [r1, r3, lsl #3]
   11540:	ldr	r0, [r5, #12]
   11544:	ldr	r3, [r2, #4]
   11548:	cmp	r0, r3
   1154c:	popne	{r4, r5, r6, r7, r8, pc}
   11550:	cmp	r0, #0
   11554:	poplt	{r4, r5, r6, r7, r8, pc}
   11558:	ldr	r2, [r1, r0, lsl #3]
   1155c:	cmn	r2, #1
   11560:	popne	{r4, r5, r6, r7, r8, pc}
   11564:	sub	r3, r3, #1
   11568:	mov	r0, r3
   1156c:	cmp	r3, #0
   11570:	blt	11598 <rb_setselect_poll+0x1ec>
   11574:	sub	r3, r3, #1
   11578:	add	r2, r1, r3, lsl #3
   1157c:	ldr	r2, [r2, #8]
   11580:	cmn	r2, #1
   11584:	beq	11568 <rb_setselect_poll+0x1bc>
   11588:	ldr	r3, [pc, #48]	; 115c0 <rb_setselect_poll+0x214>
   1158c:	add	r3, pc, r3
   11590:	str	r0, [r3, #4]
   11594:	pop	{r4, r5, r6, r7, r8, pc}
   11598:	ldr	r3, [pc, #36]	; 115c4 <rb_setselect_poll+0x218>
   1159c:	add	r3, pc, r3
   115a0:	str	r0, [r3, #4]
   115a4:	pop	{r4, r5, r6, r7, r8, pc}
   115a8:	.word	0x00034840
   115ac:	.word	0x0003481c
   115b0:	.word	0x000347f0
   115b4:	.word	0x000347dc
   115b8:	.word	0x000347b8
   115bc:	.word	0x0003476c
   115c0:	.word	0x000346fc
   115c4:	.word	0x000346ec

000115c8 <rb_select_poll>:
   115c8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115cc:	ldr	r9, [pc, #508]	; 117d0 <rb_select_poll+0x208>
   115d0:	add	r9, pc, r9
   115d4:	ldr	r3, [pc, #504]	; 117d4 <rb_select_poll+0x20c>
   115d8:	add	r3, pc, r3
   115dc:	ldr	r1, [r3, #4]
   115e0:	mov	r2, r0
   115e4:	add	r1, r1, #1
   115e8:	ldr	r0, [r3]
   115ec:	bl	4a00 <poll@plt>
   115f0:	mov	r4, r0
   115f4:	bl	4994 <rb_set_time@plt>
   115f8:	cmp	r4, #0
   115fc:	blt	11640 <rb_select_poll+0x78>
   11600:	cmp	r4, #0
   11604:	beq	11770 <rb_select_poll+0x1a8>
   11608:	ldr	r3, [pc, #456]	; 117d8 <rb_select_poll+0x210>
   1160c:	add	r3, pc, r3
   11610:	ldr	r3, [r3, #4]
   11614:	add	r3, r3, #1
   11618:	cmp	r3, #0
   1161c:	ble	11778 <rb_select_poll+0x1b0>
   11620:	mov	r5, #0
   11624:	ldr	r8, [pc, #432]	; 117dc <rb_select_poll+0x214>
   11628:	add	r8, pc, r8
   1162c:	mov	sl, r5
   11630:	mov	fp, #2
   11634:	ldr	r7, [pc, #420]	; 117e0 <rb_select_poll+0x218>
   11638:	add	r7, pc, r7
   1163c:	b	11690 <rb_select_poll+0xc8>
   11640:	bl	4ce8 <__errno_location@plt>
   11644:	ldr	r0, [r0]
   11648:	bl	43dc <rb_ignore_errno@plt>
   1164c:	subs	r4, r0, #0
   11650:	movne	r4, #5
   11654:	b	11770 <rb_select_poll+0x1a8>
   11658:	ldrb	r3, [r4, #16]
   1165c:	tst	r3, #1
   11660:	bne	11740 <rb_select_poll+0x178>
   11664:	ldr	r3, [r4, #28]
   11668:	cmp	r3, #0
   1166c:	beq	11794 <rb_select_poll+0x1cc>
   11670:	ldr	r3, [r4, #36]	; 0x24
   11674:	cmp	r3, #0
   11678:	beq	117b8 <rb_select_poll+0x1f0>
   1167c:	add	r5, r5, #1
   11680:	ldr	r3, [r7, #4]
   11684:	add	r3, r3, #1
   11688:	cmp	r3, r5
   1168c:	ble	1176c <rb_select_poll+0x1a4>
   11690:	ldr	r3, [r8]
   11694:	add	r2, r3, r5, lsl #3
   11698:	ldrsh	r6, [r2, #6]
   1169c:	ldr	r2, [r3, r5, lsl #3]
   116a0:	clz	r3, r6
   116a4:	lsr	r3, r3, #5
   116a8:	orrs	r3, r3, r2, lsr #31
   116ac:	bne	1167c <rb_select_poll+0xb4>
   116b0:	asr	r3, r2, #24
   116b4:	eor	r3, r3, r2, asr #12
   116b8:	eor	r3, r3, r2
   116bc:	lsl	r3, r3, #20
   116c0:	lsr	r3, r3, #20
   116c4:	ldr	r1, [pc, #280]	; 117e4 <rb_select_poll+0x21c>
   116c8:	ldr	r1, [r9, r1]
   116cc:	ldr	r1, [r1]
   116d0:	add	r3, r3, r3, lsl #1
   116d4:	ldr	r3, [r1, r3, lsl #2]
   116d8:	cmp	r3, #0
   116dc:	beq	1167c <rb_select_poll+0xb4>
   116e0:	ldr	r4, [r3]
   116e4:	ldr	r1, [r4, #12]
   116e8:	cmp	r2, r1
   116ec:	beq	1170c <rb_select_poll+0x144>
   116f0:	ldr	r3, [r3, #8]
   116f4:	cmp	r3, #0
   116f8:	beq	1167c <rb_select_poll+0xb4>
   116fc:	ldr	r4, [r3]
   11700:	ldr	r1, [r4, #12]
   11704:	cmp	r2, r1
   11708:	bne	116f0 <rb_select_poll+0x128>
   1170c:	cmp	r4, #0
   11710:	beq	1167c <rb_select_poll+0xb4>
   11714:	tst	r6, #89	; 0x59
   11718:	beq	11658 <rb_select_poll+0x90>
   1171c:	ldr	r3, [r4, #28]
   11720:	ldr	r1, [r4, #32]
   11724:	str	sl, [r4, #28]
   11728:	str	sl, [r4, #32]
   1172c:	cmp	r3, #0
   11730:	beq	11780 <rb_select_poll+0x1b8>
   11734:	mov	r0, r4
   11738:	blx	r3
   1173c:	b	11658 <rb_select_poll+0x90>
   11740:	tst	r6, #284	; 0x11c
   11744:	beq	11664 <rb_select_poll+0x9c>
   11748:	ldr	r3, [r4, #36]	; 0x24
   1174c:	ldr	r1, [r4, #40]	; 0x28
   11750:	str	sl, [r4, #36]	; 0x24
   11754:	str	sl, [r4, #40]	; 0x28
   11758:	cmp	r3, #0
   1175c:	beq	117ac <rb_select_poll+0x1e4>
   11760:	mov	r0, r4
   11764:	blx	r3
   11768:	b	11664 <rb_select_poll+0x9c>
   1176c:	mov	r4, #0
   11770:	mov	r0, r4
   11774:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11778:	mov	r4, #0
   1177c:	b	11770 <rb_select_poll+0x1a8>
   11780:	ldrb	r3, [r4, #16]
   11784:	tst	r3, #1
   11788:	beq	11794 <rb_select_poll+0x1cc>
   1178c:	tst	r6, #284	; 0x11c
   11790:	bne	11748 <rb_select_poll+0x180>
   11794:	mov	r3, sl
   11798:	mov	r2, sl
   1179c:	mov	r1, #1
   117a0:	mov	r0, r4
   117a4:	bl	113ac <rb_setselect_poll>
   117a8:	b	11670 <rb_select_poll+0xa8>
   117ac:	ldr	r3, [r4, #28]
   117b0:	cmp	r3, #0
   117b4:	beq	11794 <rb_select_poll+0x1cc>
   117b8:	mov	r3, sl
   117bc:	mov	r2, sl
   117c0:	mov	r1, fp
   117c4:	mov	r0, r4
   117c8:	bl	113ac <rb_setselect_poll>
   117cc:	b	1167c <rb_select_poll+0xb4>
   117d0:	.word	0x00016a28
   117d4:	.word	0x000346b0
   117d8:	.word	0x0003467c
   117dc:	.word	0x00034660
   117e0:	.word	0x00034650
   117e4:	.word	0x000003c0

000117e8 <rb_ports_supports_event>:
   117e8:	push	{r4, lr}
   117ec:	bl	4ce8 <__errno_location@plt>
   117f0:	mov	r3, #38	; 0x26
   117f4:	str	r3, [r0]
   117f8:	mov	r0, #0
   117fc:	pop	{r4, pc}

00011800 <rb_ports_init_event>:
   11800:	bx	lr

00011804 <rb_ports_sched_event>:
   11804:	push	{r4, lr}
   11808:	bl	4ce8 <__errno_location@plt>
   1180c:	mov	r3, #38	; 0x26
   11810:	str	r3, [r0]
   11814:	mvn	r0, #0
   11818:	pop	{r4, pc}

0001181c <rb_ports_unsched_event>:
   1181c:	bx	lr

00011820 <rb_init_netio_ports>:
   11820:	mov	r0, #38	; 0x26
   11824:	bx	lr

00011828 <rb_setselect_ports>:
   11828:	push	{r4, lr}
   1182c:	bl	4ce8 <__errno_location@plt>
   11830:	mov	r3, #38	; 0x26
   11834:	str	r3, [r0]
   11838:	pop	{r4, pc}

0001183c <rb_select_ports>:
   1183c:	push	{r4, lr}
   11840:	bl	4ce8 <__errno_location@plt>
   11844:	mov	r3, #38	; 0x26
   11848:	str	r3, [r0]
   1184c:	mvn	r0, #0
   11850:	pop	{r4, pc}

00011854 <rb_setup_fd_ports>:
   11854:	push	{r4, lr}
   11858:	bl	4ce8 <__errno_location@plt>
   1185c:	mov	r3, #38	; 0x26
   11860:	str	r3, [r0]
   11864:	mvn	r0, #0
   11868:	pop	{r4, pc}

0001186c <rb_init_netio_sigio>:
   1186c:	push	{r4, r5, r6, lr}
   11870:	ldr	r5, [pc, #200]	; 11940 <rb_init_netio_sigio+0xd4>
   11874:	add	r5, pc, r5
   11878:	bl	446c <rb_getmaxconnect@plt>
   1187c:	lsl	r1, r0, #3
   11880:	mov	r0, #1
   11884:	bl	45ec <calloc@plt>
   11888:	cmp	r0, #0
   1188c:	beq	118b0 <rb_init_netio_sigio+0x44>
   11890:	ldr	r3, [pc, #172]	; 11944 <rb_init_netio_sigio+0xd8>
   11894:	ldr	r4, [r5, r3]
   11898:	str	r0, [r4]
   1189c:	bl	446c <rb_getmaxconnect@plt>
   118a0:	str	r0, [r4, #8]
   118a4:	mov	r4, #0
   118a8:	mvn	r6, #0
   118ac:	b	118c8 <rb_init_netio_sigio+0x5c>
   118b0:	bl	4988 <rb_outofmemory@plt>
   118b4:	ldr	r3, [pc, #136]	; 11944 <rb_init_netio_sigio+0xd8>
   118b8:	ldr	r3, [r5, r3]
   118bc:	ldr	r3, [r3]
   118c0:	str	r6, [r3, r4, lsl #3]
   118c4:	add	r4, r4, #1
   118c8:	bl	446c <rb_getmaxconnect@plt>
   118cc:	cmp	r4, r0
   118d0:	blt	118b4 <rb_init_netio_sigio+0x48>
   118d4:	ldr	r3, [pc, #104]	; 11944 <rb_init_netio_sigio+0xd8>
   118d8:	ldr	r3, [r5, r3]
   118dc:	mov	r5, #0
   118e0:	str	r5, [r3, #4]
   118e4:	ldr	r4, [pc, #92]	; 11948 <rb_init_netio_sigio+0xdc>
   118e8:	add	r4, pc, r4
   118ec:	mov	r3, #1
   118f0:	str	r3, [r4], #4
   118f4:	mov	r0, r4
   118f8:	bl	4394 <sigemptyset@plt>
   118fc:	bl	4484 <__libc_current_sigrtmin@plt>
   11900:	mov	r1, r0
   11904:	mov	r0, r4
   11908:	bl	4880 <sigaddset@plt>
   1190c:	mov	r1, #29
   11910:	mov	r0, r4
   11914:	bl	4880 <sigaddset@plt>
   11918:	bl	4484 <__libc_current_sigrtmin@plt>
   1191c:	add	r1, r0, #1
   11920:	mov	r0, r4
   11924:	bl	4880 <sigaddset@plt>
   11928:	mov	r2, r5
   1192c:	mov	r1, r4
   11930:	mov	r0, r5
   11934:	bl	49b8 <sigprocmask@plt>
   11938:	mov	r0, r5
   1193c:	pop	{r4, r5, r6, pc}
   11940:	.word	0x00016784
   11944:	.word	0x000003d0
   11948:	.word	0x000343ac

0001194c <rb_setup_fd_sigio>:
   1194c:	push	{r4, r5, r6, lr}
   11950:	ldr	r5, [r0, #12]
   11954:	mov	r2, #0
   11958:	mov	r1, #3
   1195c:	mov	r0, r5
   11960:	bl	4c04 <fcntl@plt>
   11964:	cmn	r0, #1
   11968:	beq	119e4 <rb_setup_fd_sigio+0x98>
   1196c:	mov	r4, r0
   11970:	tst	r0, #8192	; 0x2000
   11974:	bne	119cc <rb_setup_fd_sigio+0x80>
   11978:	orr	r2, r4, #10240	; 0x2800
   1197c:	mov	r1, #4
   11980:	mov	r0, r5
   11984:	bl	4c04 <fcntl@plt>
   11988:	cmn	r0, #1
   1198c:	beq	119ec <rb_setup_fd_sigio+0xa0>
   11990:	bl	4484 <__libc_current_sigrtmin@plt>
   11994:	mov	r2, r0
   11998:	mov	r1, #10
   1199c:	mov	r0, r5
   119a0:	bl	4c04 <fcntl@plt>
   119a4:	cmn	r0, #1
   119a8:	beq	119f4 <rb_setup_fd_sigio+0xa8>
   119ac:	bl	4acc <getpid@plt>
   119b0:	mov	r2, r0
   119b4:	mov	r1, #8
   119b8:	mov	r0, r5
   119bc:	bl	4c04 <fcntl@plt>
   119c0:	adds	r0, r0, #1
   119c4:	movne	r0, #1
   119c8:	pop	{r4, r5, r6, pc}
   119cc:	bic	r4, r0, #8192	; 0x2000
   119d0:	mov	r2, r4
   119d4:	mov	r1, #4
   119d8:	mov	r0, r5
   119dc:	bl	4c04 <fcntl@plt>
   119e0:	b	11978 <rb_setup_fd_sigio+0x2c>
   119e4:	mov	r0, #0
   119e8:	pop	{r4, r5, r6, pc}
   119ec:	mov	r0, #0
   119f0:	pop	{r4, r5, r6, pc}
   119f4:	mov	r0, #0
   119f8:	pop	{r4, r5, r6, pc}

000119fc <rb_setselect_sigio>:
   119fc:	push	{r4, r5, r6, r7, r8, lr}
   11a00:	ldr	r5, [pc, #524]	; 11c14 <rb_setselect_sigio+0x218>
   11a04:	add	r5, pc, r5
   11a08:	subs	r4, r0, #0
   11a0c:	popeq	{r4, r5, r6, r7, r8, pc}
   11a10:	tst	r1, #1
   11a14:	beq	11ad4 <rb_setselect_sigio+0xd8>
   11a18:	str	r2, [r4, #28]
   11a1c:	str	r3, [r4, #32]
   11a20:	cmp	r2, #0
   11a24:	beq	11ab0 <rb_setselect_sigio+0xb4>
   11a28:	ldr	ip, [r4, #20]
   11a2c:	orr	ip, ip, #64	; 0x40
   11a30:	str	ip, [r4, #20]
   11a34:	tst	r1, #2
   11a38:	beq	11a50 <rb_setselect_sigio+0x54>
   11a3c:	str	r2, [r4, #36]	; 0x24
   11a40:	str	r3, [r4, #40]	; 0x28
   11a44:	ldr	r3, [r4, #20]
   11a48:	orr	r3, r3, #256	; 0x100
   11a4c:	str	r3, [r4, #20]
   11a50:	ldr	r3, [pc, #448]	; 11c18 <rb_setselect_sigio+0x21c>
   11a54:	ldr	r3, [r5, r3]
   11a58:	ldr	r6, [r3, #8]
   11a5c:	ldr	r3, [r4, #12]
   11a60:	cmp	r3, r6
   11a64:	bge	11afc <rb_setselect_sigio+0x100>
   11a68:	ldr	r2, [r4, #20]
   11a6c:	cmp	r2, #0
   11a70:	ble	11b8c <rb_setselect_sigio+0x190>
   11a74:	ldr	r3, [pc, #412]	; 11c18 <rb_setselect_sigio+0x21c>
   11a78:	ldr	r1, [r5, r3]
   11a7c:	ldr	r0, [r1]
   11a80:	ldr	r3, [r4, #12]
   11a84:	add	r3, r0, r3, lsl #3
   11a88:	strh	r2, [r3, #4]
   11a8c:	ldr	r3, [r4, #12]
   11a90:	str	r3, [r0, r3, lsl #3]
   11a94:	ldr	r3, [r4, #12]
   11a98:	ldr	r2, [r1, #4]
   11a9c:	cmp	r3, r2
   11aa0:	ldrgt	r2, [pc, #368]	; 11c18 <rb_setselect_sigio+0x21c>
   11aa4:	ldrgt	r2, [r5, r2]
   11aa8:	strgt	r3, [r2, #4]
   11aac:	pop	{r4, r5, r6, r7, r8, pc}
   11ab0:	ldr	r2, [r4, #20]
   11ab4:	bic	r2, r2, #64	; 0x40
   11ab8:	str	r2, [r4, #20]
   11abc:	tst	r1, #2
   11ac0:	beq	11a50 <rb_setselect_sigio+0x54>
   11ac4:	mov	r2, #0
   11ac8:	str	r2, [r4, #36]	; 0x24
   11acc:	str	r3, [r4, #40]	; 0x28
   11ad0:	b	11aec <rb_setselect_sigio+0xf0>
   11ad4:	tst	r1, #2
   11ad8:	beq	11a50 <rb_setselect_sigio+0x54>
   11adc:	str	r2, [r4, #36]	; 0x24
   11ae0:	str	r3, [r4, #40]	; 0x28
   11ae4:	cmp	r2, #0
   11ae8:	bne	11a44 <rb_setselect_sigio+0x48>
   11aec:	ldr	r3, [r4, #20]
   11af0:	bic	r3, r3, #256	; 0x100
   11af4:	str	r3, [r4, #20]
   11af8:	b	11a50 <rb_setselect_sigio+0x54>
   11afc:	add	r1, r6, #1024	; 0x400
   11b00:	ldr	r3, [pc, #272]	; 11c18 <rb_setselect_sigio+0x21c>
   11b04:	ldr	r3, [r5, r3]
   11b08:	str	r1, [r3, #8]
   11b0c:	lsl	r7, r1, #3
   11b10:	mov	r1, r7
   11b14:	ldr	r0, [r3]
   11b18:	bl	4c40 <realloc@plt>
   11b1c:	cmp	r0, #0
   11b20:	beq	11b88 <rb_setselect_sigio+0x18c>
   11b24:	ldr	r3, [pc, #236]	; 11c18 <rb_setselect_sigio+0x21c>
   11b28:	ldr	r8, [r5, r3]
   11b2c:	str	r0, [r8]
   11b30:	sub	r7, r7, #8128	; 0x1fc0
   11b34:	sub	r7, r7, #56	; 0x38
   11b38:	mov	r2, #8192	; 0x2000
   11b3c:	mov	r1, #0
   11b40:	add	r0, r0, r7
   11b44:	bl	4628 <memset@plt>
   11b48:	add	r3, r6, #1
   11b4c:	ldr	r2, [r8, #8]
   11b50:	cmp	r3, r2
   11b54:	bge	11a68 <rb_setselect_sigio+0x6c>
   11b58:	mov	r2, r7
   11b5c:	ldr	r1, [pc, #180]	; 11c18 <rb_setselect_sigio+0x21c>
   11b60:	ldr	r1, [r5, r1]
   11b64:	mvn	ip, #0
   11b68:	ldr	r0, [r1]
   11b6c:	str	ip, [r0, r2]
   11b70:	add	r3, r3, #1
   11b74:	add	r2, r2, #8
   11b78:	ldr	r0, [r1, #8]
   11b7c:	cmp	r3, r0
   11b80:	blt	11b68 <rb_setselect_sigio+0x16c>
   11b84:	b	11a68 <rb_setselect_sigio+0x6c>
   11b88:	bl	4988 <rb_outofmemory@plt>
   11b8c:	ldr	r3, [pc, #132]	; 11c18 <rb_setselect_sigio+0x21c>
   11b90:	ldr	r2, [r5, r3]
   11b94:	ldr	r1, [r2]
   11b98:	ldr	r3, [r4, #12]
   11b9c:	add	r3, r1, r3, lsl #3
   11ba0:	mov	r0, #0
   11ba4:	strh	r0, [r3, #4]
   11ba8:	ldr	r3, [r4, #12]
   11bac:	mvn	r0, #0
   11bb0:	str	r0, [r1, r3, lsl #3]
   11bb4:	ldr	r0, [r4, #12]
   11bb8:	ldr	r3, [r2, #4]
   11bbc:	cmp	r0, r3
   11bc0:	popne	{r4, r5, r6, r7, r8, pc}
   11bc4:	cmp	r0, #0
   11bc8:	poplt	{r4, r5, r6, r7, r8, pc}
   11bcc:	ldr	r2, [pc, #68]	; 11c18 <rb_setselect_sigio+0x21c>
   11bd0:	ldr	r2, [r5, r2]
   11bd4:	ldr	r1, [r2]
   11bd8:	ldr	r2, [r1, r0, lsl #3]
   11bdc:	cmn	r2, #1
   11be0:	popne	{r4, r5, r6, r7, r8, pc}
   11be4:	sub	r3, r3, #1
   11be8:	ldr	r2, [pc, #40]	; 11c18 <rb_setselect_sigio+0x21c>
   11bec:	ldr	r0, [r5, r2]
   11bf0:	str	r3, [r0, #4]
   11bf4:	cmp	r3, #0
   11bf8:	poplt	{r4, r5, r6, r7, r8, pc}
   11bfc:	sub	r3, r3, #1
   11c00:	add	r2, r1, r3, lsl #3
   11c04:	ldr	r2, [r2, #8]
   11c08:	cmn	r2, #1
   11c0c:	beq	11bf0 <rb_setselect_sigio+0x1f4>
   11c10:	pop	{r4, r5, r6, r7, r8, pc}
   11c14:	.word	0x000165f4
   11c18:	.word	0x000003d0

00011c1c <rb_sigio_supports_event>:
   11c1c:	ldr	r3, [pc, #128]	; 11ca4 <rb_sigio_supports_event+0x88>
   11c20:	add	r3, pc, r3
   11c24:	ldr	r0, [r3, #132]	; 0x84
   11c28:	cmp	r0, #1
   11c2c:	bxeq	lr
   11c30:	cmn	r0, #1
   11c34:	beq	11c9c <rb_sigio_supports_event+0x80>
   11c38:	push	{lr}		; (str lr, [sp, #-4]!)
   11c3c:	sub	sp, sp, #76	; 0x4c
   11c40:	mov	r3, #26
   11c44:	str	r3, [sp, #8]
   11c48:	mov	r0, #0
   11c4c:	str	r0, [sp, #12]
   11c50:	add	r2, sp, #68	; 0x44
   11c54:	add	r1, sp, #4
   11c58:	bl	452c <timer_create@plt>
   11c5c:	cmp	r0, #0
   11c60:	beq	11c80 <rb_sigio_supports_event+0x64>
   11c64:	mvn	r2, #0
   11c68:	ldr	r3, [pc, #56]	; 11ca8 <rb_sigio_supports_event+0x8c>
   11c6c:	add	r3, pc, r3
   11c70:	str	r2, [r3, #132]	; 0x84
   11c74:	mov	r0, #0
   11c78:	add	sp, sp, #76	; 0x4c
   11c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c80:	ldr	r0, [sp, #68]	; 0x44
   11c84:	bl	4a78 <timer_delete@plt>
   11c88:	mov	r0, #1
   11c8c:	ldr	r3, [pc, #24]	; 11cac <rb_sigio_supports_event+0x90>
   11c90:	add	r3, pc, r3
   11c94:	str	r0, [r3, #132]	; 0x84
   11c98:	b	11c78 <rb_sigio_supports_event+0x5c>
   11c9c:	mov	r0, #0
   11ca0:	bx	lr
   11ca4:	.word	0x00034074
   11ca8:	.word	0x00034028
   11cac:	.word	0x00034004

00011cb0 <rb_select_sigio>:
   11cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cb4:	sub	sp, sp, #140	; 0x8c
   11cb8:	mov	r7, r0
   11cbc:	ldr	r6, [pc, #1092]	; 12108 <rb_select_sigio+0x458>
   11cc0:	add	r6, pc, r6
   11cc4:	bl	11c1c <rb_sigio_supports_event>
   11cc8:	adds	r3, r0, #0
   11ccc:	movne	r3, #1
   11cd0:	cmp	r7, #0
   11cd4:	orrge	r3, r3, #1
   11cd8:	cmp	r3, #0
   11cdc:	beq	11d0c <rb_select_sigio+0x5c>
   11ce0:	ldr	r2, [pc, #1060]	; 1210c <rb_select_sigio+0x45c>
   11ce4:	smull	r3, r2, r2, r7
   11ce8:	asr	r3, r7, #31
   11cec:	rsb	r2, r3, r2, asr #6
   11cf0:	str	r2, [sp]
   11cf4:	mov	r3, #1000	; 0x3e8
   11cf8:	mul	r3, r3, r2
   11cfc:	sub	r3, r7, r3
   11d00:	ldr	r2, [pc, #1032]	; 12110 <rb_select_sigio+0x460>
   11d04:	mul	r3, r2, r3
   11d08:	str	r3, [sp, #4]
   11d0c:	ldr	r8, [pc, #1024]	; 12114 <rb_select_sigio+0x464>
   11d10:	add	r8, pc, r8
   11d14:	ldr	r9, [pc, #1020]	; 12118 <rb_select_sigio+0x468>
   11d18:	add	r9, pc, r9
   11d1c:	ldr	fp, [pc, #1016]	; 1211c <rb_select_sigio+0x46c>
   11d20:	add	fp, pc, fp
   11d24:	add	fp, fp, #4
   11d28:	ldr	sl, [pc, #1008]	; 12120 <rb_select_sigio+0x470>
   11d2c:	add	sl, pc, sl
   11d30:	add	sl, sl, #4
   11d34:	b	11e54 <rb_select_sigio+0x1a4>
   11d38:	add	r1, sp, #8
   11d3c:	mov	r0, sl
   11d40:	bl	4478 <sigwaitinfo@plt>
   11d44:	mov	r4, r0
   11d48:	cmp	r4, #0
   11d4c:	ble	11f50 <rb_select_sigio+0x2a0>
   11d50:	cmp	r4, #29
   11d54:	beq	11e8c <rb_select_sigio+0x1dc>
   11d58:	bl	4484 <__libc_current_sigrtmin@plt>
   11d5c:	add	r0, r0, #1
   11d60:	cmp	r4, r0
   11d64:	beq	11f28 <rb_select_sigio+0x278>
   11d68:	ldr	r1, [sp, #24]
   11d6c:	ldr	r3, [pc, #944]	; 12124 <rb_select_sigio+0x474>
   11d70:	ldr	r3, [r6, r3]
   11d74:	ldr	r3, [r3]
   11d78:	add	r3, r3, r1, lsl #3
   11d7c:	ldrh	r5, [r3, #6]
   11d80:	ldr	r2, [sp, #20]
   11d84:	orr	r5, r5, r2
   11d88:	sxth	r5, r5
   11d8c:	strh	r5, [r3, #6]
   11d90:	cmp	r1, #0
   11d94:	blt	11e54 <rb_select_sigio+0x1a4>
   11d98:	asr	r3, r1, #24
   11d9c:	eor	r3, r3, r1, asr #12
   11da0:	eor	r3, r3, r1
   11da4:	lsl	r3, r3, #20
   11da8:	lsr	r3, r3, #20
   11dac:	ldr	r2, [pc, #884]	; 12128 <rb_select_sigio+0x478>
   11db0:	ldr	r2, [r6, r2]
   11db4:	ldr	r2, [r2]
   11db8:	add	r3, r3, r3, lsl #1
   11dbc:	ldr	r3, [r2, r3, lsl #2]
   11dc0:	cmp	r3, #0
   11dc4:	beq	11e54 <rb_select_sigio+0x1a4>
   11dc8:	ldr	r4, [r3]
   11dcc:	ldr	r2, [r4, #12]
   11dd0:	cmp	r1, r2
   11dd4:	beq	11df4 <rb_select_sigio+0x144>
   11dd8:	ldr	r3, [r3, #8]
   11ddc:	cmp	r3, #0
   11de0:	beq	11e54 <rb_select_sigio+0x1a4>
   11de4:	ldr	r4, [r3]
   11de8:	ldr	r2, [r4, #12]
   11dec:	cmp	r1, r2
   11df0:	bne	11dd8 <rb_select_sigio+0x128>
   11df4:	cmp	r4, #0
   11df8:	beq	11e54 <rb_select_sigio+0x1a4>
   11dfc:	tst	r5, #89	; 0x59
   11e00:	beq	11e28 <rb_select_sigio+0x178>
   11e04:	ldr	r2, [r4, #28]
   11e08:	ldr	r1, [r4, #32]
   11e0c:	mov	r3, #0
   11e10:	str	r3, [r4, #28]
   11e14:	str	r3, [r4, #32]
   11e18:	cmp	r2, r3
   11e1c:	beq	11e28 <rb_select_sigio+0x178>
   11e20:	mov	r0, r4
   11e24:	blx	r2
   11e28:	tst	r5, #284	; 0x11c
   11e2c:	beq	11e54 <rb_select_sigio+0x1a4>
   11e30:	ldr	r2, [r4, #36]	; 0x24
   11e34:	ldr	r1, [r4, #40]	; 0x28
   11e38:	mov	r3, #0
   11e3c:	str	r3, [r4, #36]	; 0x24
   11e40:	str	r3, [r4, #40]	; 0x28
   11e44:	cmp	r2, r3
   11e48:	beq	11e54 <rb_select_sigio+0x1a4>
   11e4c:	mov	r0, r4
   11e50:	blx	r2
   11e54:	ldr	r3, [r8]
   11e58:	cmp	r3, #0
   11e5c:	bne	11e98 <rb_select_sigio+0x1e8>
   11e60:	ldr	r3, [r9, #132]	; 0x84
   11e64:	adds	r3, r3, #0
   11e68:	movne	r3, #1
   11e6c:	orrs	r3, r3, r7, lsr #31
   11e70:	bne	11d38 <rb_select_sigio+0x88>
   11e74:	mov	r2, sp
   11e78:	add	r1, sp, #8
   11e7c:	mov	r0, fp
   11e80:	bl	44c0 <sigtimedwait@plt>
   11e84:	mov	r4, r0
   11e88:	b	11d48 <rb_select_sigio+0x98>
   11e8c:	ldr	r0, [pc, #664]	; 1212c <rb_select_sigio+0x47c>
   11e90:	add	r0, pc, r0
   11e94:	bl	491c <rb_lib_log@plt>
   11e98:	bl	4484 <__libc_current_sigrtmin@plt>
   11e9c:	mov	r1, #1
   11ea0:	bl	44d8 <signal@plt>
   11ea4:	bl	4484 <__libc_current_sigrtmin@plt>
   11ea8:	mov	r1, #0
   11eac:	bl	44d8 <signal@plt>
   11eb0:	mov	r2, #0
   11eb4:	ldr	r3, [pc, #628]	; 12130 <rb_select_sigio+0x480>
   11eb8:	add	r3, pc, r3
   11ebc:	str	r2, [r3]
   11ec0:	ldr	r3, [pc, #604]	; 12124 <rb_select_sigio+0x474>
   11ec4:	ldr	r3, [r6, r3]
   11ec8:	ldr	r1, [r3, #4]
   11ecc:	mov	r2, r7
   11ed0:	add	r1, r1, #1
   11ed4:	ldr	r0, [r3]
   11ed8:	bl	4a00 <poll@plt>
   11edc:	mov	r4, r0
   11ee0:	bl	4994 <rb_set_time@plt>
   11ee4:	cmp	r4, #0
   11ee8:	blt	11f74 <rb_select_sigio+0x2c4>
   11eec:	cmp	r4, #0
   11ef0:	beq	11f68 <rb_select_sigio+0x2b8>
   11ef4:	ldr	r3, [pc, #552]	; 12124 <rb_select_sigio+0x474>
   11ef8:	ldr	r3, [r6, r3]
   11efc:	ldr	r3, [r3, #4]
   11f00:	add	r3, r3, #1
   11f04:	cmp	r3, #0
   11f08:	ble	120b0 <rb_select_sigio+0x400>
   11f0c:	mov	r5, #0
   11f10:	ldr	r3, [pc, #524]	; 12124 <rb_select_sigio+0x474>
   11f14:	ldr	r8, [r6, r3]
   11f18:	mov	r9, r5
   11f1c:	mov	fp, #2
   11f20:	mov	sl, #1
   11f24:	b	11fcc <rb_select_sigio+0x31c>
   11f28:	ldr	r3, [pc, #516]	; 12134 <rb_select_sigio+0x484>
   11f2c:	add	r3, pc, r3
   11f30:	ldr	r3, [r3, #132]	; 0x84
   11f34:	cmp	r3, #0
   11f38:	beq	11d68 <rb_select_sigio+0xb8>
   11f3c:	ldr	r0, [sp, #28]
   11f40:	cmp	r0, #0
   11f44:	beq	11e54 <rb_select_sigio+0x1a4>
   11f48:	bl	48a4 <rb_run_one_event@plt>
   11f4c:	b	11e54 <rb_select_sigio+0x1a4>
   11f50:	ldr	r3, [pc, #480]	; 12138 <rb_select_sigio+0x488>
   11f54:	add	r3, pc, r3
   11f58:	ldr	r4, [r3]
   11f5c:	cmp	r4, #0
   11f60:	bne	11e98 <rb_select_sigio+0x1e8>
   11f64:	bl	4994 <rb_set_time@plt>
   11f68:	mov	r0, r4
   11f6c:	add	sp, sp, #140	; 0x8c
   11f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f74:	bl	4ce8 <__errno_location@plt>
   11f78:	ldr	r0, [r0]
   11f7c:	bl	43dc <rb_ignore_errno@plt>
   11f80:	subs	r4, r0, #0
   11f84:	movne	r4, #5
   11f88:	b	11f68 <rb_select_sigio+0x2b8>
   11f8c:	ldrb	r3, [r4, #16]
   11f90:	tst	r3, #1
   11f94:	bne	1207c <rb_select_sigio+0x3cc>
   11f98:	ldr	r3, [r4, #28]
   11f9c:	cmp	r3, #0
   11fa0:	beq	120cc <rb_select_sigio+0x41c>
   11fa4:	ldr	r3, [r4, #36]	; 0x24
   11fa8:	cmp	r3, #0
   11fac:	beq	120f0 <rb_select_sigio+0x440>
   11fb0:	add	r5, r5, #1
   11fb4:	ldr	r3, [pc, #360]	; 12124 <rb_select_sigio+0x474>
   11fb8:	ldr	r3, [r6, r3]
   11fbc:	ldr	r3, [r3, #4]
   11fc0:	add	r3, r3, #1
   11fc4:	cmp	r3, r5
   11fc8:	ble	120a8 <rb_select_sigio+0x3f8>
   11fcc:	ldr	r3, [r8]
   11fd0:	add	r2, r3, r5, lsl #3
   11fd4:	ldrsh	r7, [r2, #6]
   11fd8:	cmp	r7, #0
   11fdc:	beq	11fb0 <rb_select_sigio+0x300>
   11fe0:	ldr	r1, [r3, r5, lsl #3]
   11fe4:	cmp	r1, #0
   11fe8:	blt	11fb0 <rb_select_sigio+0x300>
   11fec:	asr	r3, r1, #24
   11ff0:	eor	r3, r3, r1, asr #12
   11ff4:	eor	r3, r3, r1
   11ff8:	lsl	r3, r3, #20
   11ffc:	lsr	r3, r3, #20
   12000:	ldr	r2, [pc, #288]	; 12128 <rb_select_sigio+0x478>
   12004:	ldr	r2, [r6, r2]
   12008:	ldr	r2, [r2]
   1200c:	add	r3, r3, r3, lsl #1
   12010:	ldr	r3, [r2, r3, lsl #2]
   12014:	cmp	r3, #0
   12018:	beq	11fb0 <rb_select_sigio+0x300>
   1201c:	ldr	r4, [r3]
   12020:	ldr	r2, [r4, #12]
   12024:	cmp	r1, r2
   12028:	beq	12048 <rb_select_sigio+0x398>
   1202c:	ldr	r3, [r3, #8]
   12030:	cmp	r3, #0
   12034:	beq	11fb0 <rb_select_sigio+0x300>
   12038:	ldr	r4, [r3]
   1203c:	ldr	r2, [r4, #12]
   12040:	cmp	r1, r2
   12044:	bne	1202c <rb_select_sigio+0x37c>
   12048:	cmp	r4, #0
   1204c:	beq	11fb0 <rb_select_sigio+0x300>
   12050:	tst	r7, #89	; 0x59
   12054:	beq	11f8c <rb_select_sigio+0x2dc>
   12058:	ldr	r3, [r4, #28]
   1205c:	ldr	r1, [r4, #32]
   12060:	str	r9, [r4, #28]
   12064:	str	r9, [r4, #32]
   12068:	cmp	r3, #0
   1206c:	beq	120b8 <rb_select_sigio+0x408>
   12070:	mov	r0, r4
   12074:	blx	r3
   12078:	b	11f8c <rb_select_sigio+0x2dc>
   1207c:	tst	r7, #284	; 0x11c
   12080:	beq	11f98 <rb_select_sigio+0x2e8>
   12084:	ldr	r3, [r4, #36]	; 0x24
   12088:	ldr	r1, [r4, #40]	; 0x28
   1208c:	str	r9, [r4, #36]	; 0x24
   12090:	str	r9, [r4, #40]	; 0x28
   12094:	cmp	r3, #0
   12098:	beq	120e4 <rb_select_sigio+0x434>
   1209c:	mov	r0, r4
   120a0:	blx	r3
   120a4:	b	11f98 <rb_select_sigio+0x2e8>
   120a8:	mov	r4, #0
   120ac:	b	11f68 <rb_select_sigio+0x2b8>
   120b0:	mov	r4, #0
   120b4:	b	11f68 <rb_select_sigio+0x2b8>
   120b8:	ldrb	r3, [r4, #16]
   120bc:	tst	r3, #1
   120c0:	beq	120cc <rb_select_sigio+0x41c>
   120c4:	tst	r7, #284	; 0x11c
   120c8:	bne	12084 <rb_select_sigio+0x3d4>
   120cc:	mov	r3, r9
   120d0:	mov	r2, r9
   120d4:	mov	r1, sl
   120d8:	mov	r0, r4
   120dc:	bl	119fc <rb_setselect_sigio>
   120e0:	b	11fa4 <rb_select_sigio+0x2f4>
   120e4:	ldr	r3, [r4, #28]
   120e8:	cmp	r3, #0
   120ec:	beq	120cc <rb_select_sigio+0x41c>
   120f0:	mov	r3, r9
   120f4:	mov	r2, r9
   120f8:	mov	r1, fp
   120fc:	mov	r0, r4
   12100:	bl	119fc <rb_setselect_sigio>
   12104:	b	11fb0 <rb_select_sigio+0x300>
   12108:	.word	0x00016338
   1210c:	.word	0x10624dd3
   12110:	.word	0x000f4240
   12114:	.word	0x00033f84
   12118:	.word	0x00033f7c
   1211c:	.word	0x00033f74
   12120:	.word	0x00033f68
   12124:	.word	0x000003d0
   12128:	.word	0x000003c0
   1212c:	.word	0x00005348
   12130:	.word	0x00033ddc
   12134:	.word	0x00033d68
   12138:	.word	0x00033d40

0001213c <rb_sigio_init_event>:
   1213c:	push	{r4, lr}
   12140:	bl	11c1c <rb_sigio_supports_event>
   12144:	pop	{r4, pc}

00012148 <rb_sigio_sched_event>:
   12148:	ldr	r3, [pc, #276]	; 12264 <rb_sigio_sched_event+0x11c>
   1214c:	add	r3, pc, r3
   12150:	ldr	r3, [r3, #132]	; 0x84
   12154:	cmp	r3, #0
   12158:	ble	1225c <rb_sigio_sched_event+0x114>
   1215c:	push	{r4, r5, r6, lr}
   12160:	sub	sp, sp, #80	; 0x50
   12164:	mov	r5, r1
   12168:	mov	r4, r0
   1216c:	mov	r2, #64	; 0x40
   12170:	mov	r1, #0
   12174:	add	r0, sp, #16
   12178:	bl	4628 <memset@plt>
   1217c:	mov	r1, #4
   12180:	mov	r0, #1
   12184:	bl	45ec <calloc@plt>
   12188:	subs	r6, r0, #0
   1218c:	beq	12210 <rb_sigio_sched_event+0xc8>
   12190:	str	r6, [r4, #40]	; 0x28
   12194:	bl	4484 <__libc_current_sigrtmin@plt>
   12198:	add	r0, r0, #1
   1219c:	str	r0, [sp, #20]
   121a0:	add	r1, sp, #80	; 0x50
   121a4:	str	r4, [r1, #-64]!	; 0xffffffc0
   121a8:	mov	r2, r6
   121ac:	mov	r0, #0
   121b0:	bl	452c <timer_create@plt>
   121b4:	cmp	r0, #0
   121b8:	blt	12214 <rb_sigio_sched_event+0xcc>
   121bc:	mov	r2, #0
   121c0:	str	r2, [sp]
   121c4:	str	r2, [sp, #4]
   121c8:	str	r2, [sp, #12]
   121cc:	str	r5, [sp, #8]
   121d0:	ldr	r3, [r4, #24]
   121d4:	cmp	r3, r2
   121d8:	addne	r3, sp, #8
   121dc:	ldmne	r3, {r0, r1}
   121e0:	movne	r3, sp
   121e4:	stmne	r3, {r0, r1}
   121e8:	mov	r3, #0
   121ec:	mov	r2, sp
   121f0:	mov	r1, r3
   121f4:	ldr	r0, [r6]
   121f8:	bl	4754 <timer_settime@plt>
   121fc:	cmp	r0, #0
   12200:	movge	r0, #1
   12204:	blt	12238 <rb_sigio_sched_event+0xf0>
   12208:	add	sp, sp, #80	; 0x50
   1220c:	pop	{r4, r5, r6, pc}
   12210:	bl	4988 <rb_outofmemory@plt>
   12214:	bl	4ce8 <__errno_location@plt>
   12218:	ldr	r0, [r0]
   1221c:	bl	43a0 <strerror@plt>
   12220:	mov	r1, r0
   12224:	ldr	r0, [pc, #60]	; 12268 <rb_sigio_sched_event+0x120>
   12228:	add	r0, pc, r0
   1222c:	bl	491c <rb_lib_log@plt>
   12230:	mov	r0, #0
   12234:	b	12208 <rb_sigio_sched_event+0xc0>
   12238:	bl	4ce8 <__errno_location@plt>
   1223c:	ldr	r0, [r0]
   12240:	bl	43a0 <strerror@plt>
   12244:	mov	r1, r0
   12248:	ldr	r0, [pc, #28]	; 1226c <rb_sigio_sched_event+0x124>
   1224c:	add	r0, pc, r0
   12250:	bl	491c <rb_lib_log@plt>
   12254:	mov	r0, #0
   12258:	b	12208 <rb_sigio_sched_event+0xc0>
   1225c:	mov	r0, #0
   12260:	bx	lr
   12264:	.word	0x00033b48
   12268:	.word	0x00004f88
   1226c:	.word	0x00004f78

00012270 <rb_sigio_unsched_event>:
   12270:	ldr	r3, [pc, #60]	; 122b4 <rb_sigio_unsched_event+0x44>
   12274:	add	r3, pc, r3
   12278:	ldr	r3, [r3, #132]	; 0x84
   1227c:	cmp	r3, #0
   12280:	bxle	lr
   12284:	push	{r4, lr}
   12288:	mov	r4, r0
   1228c:	ldr	r3, [r0, #40]	; 0x28
   12290:	ldr	r0, [r3]
   12294:	bl	4a78 <timer_delete@plt>
   12298:	ldr	r0, [r4, #40]	; 0x28
   1229c:	cmp	r0, #0
   122a0:	beq	122a8 <rb_sigio_unsched_event+0x38>
   122a4:	bl	46f4 <free@plt>
   122a8:	mov	r3, #0
   122ac:	str	r3, [r4, #40]	; 0x28
   122b0:	pop	{r4, pc}
   122b4:	.word	0x00033a20

000122b8 <select_update_selectfds>:
   122b8:	push	{r4, lr}
   122bc:	uxth	r1, r1
   122c0:	tst	r1, #1
   122c4:	beq	1244c <select_update_selectfds+0x194>
   122c8:	cmp	r2, #0
   122cc:	beq	123a4 <select_update_selectfds+0xec>
   122d0:	ldr	r3, [r0, #12]
   122d4:	add	r2, r3, #31
   122d8:	cmp	r3, #0
   122dc:	movge	r2, r3
   122e0:	asr	r2, r2, #5
   122e4:	ldr	lr, [pc, #644]	; 12570 <select_update_selectfds+0x2b8>
   122e8:	add	lr, pc, lr
   122ec:	asr	ip, r3, #31
   122f0:	lsr	ip, ip, #27
   122f4:	add	r3, r3, ip
   122f8:	and	r3, r3, #31
   122fc:	sub	r3, r3, ip
   12300:	ldr	ip, [lr, r2, lsl #2]
   12304:	mov	r4, #1
   12308:	orr	r3, ip, r4, lsl r3
   1230c:	str	r3, [lr, r2, lsl #2]
   12310:	ldr	r3, [r0, #20]
   12314:	orr	r3, r3, r4
   12318:	str	r3, [r0, #20]
   1231c:	tst	r1, #2
   12320:	beq	12374 <select_update_selectfds+0xbc>
   12324:	ldr	r3, [r0, #12]
   12328:	add	r2, r3, #31
   1232c:	cmp	r3, #0
   12330:	movge	r2, r3
   12334:	asr	r2, r2, #5
   12338:	ldr	r1, [pc, #564]	; 12574 <select_update_selectfds+0x2bc>
   1233c:	add	r1, pc, r1
   12340:	add	r2, r1, r2, lsl #2
   12344:	asr	r1, r3, #31
   12348:	lsr	r1, r1, #27
   1234c:	add	r3, r3, r1
   12350:	and	r3, r3, #31
   12354:	sub	r3, r3, r1
   12358:	ldr	r1, [r2, #128]	; 0x80
   1235c:	mov	ip, #1
   12360:	orr	r3, r1, ip, lsl r3
   12364:	str	r3, [r2, #128]	; 0x80
   12368:	ldr	r3, [r0, #20]
   1236c:	orr	r3, r3, #2
   12370:	str	r3, [r0, #20]
   12374:	ldr	r3, [r0, #20]
   12378:	tst	r3, #3
   1237c:	beq	12460 <select_update_selectfds+0x1a8>
   12380:	ldr	r3, [r0, #12]
   12384:	ldr	r2, [pc, #492]	; 12578 <select_update_selectfds+0x2c0>
   12388:	add	r2, pc, r2
   1238c:	ldr	r2, [r2]
   12390:	cmp	r3, r2
   12394:	ldrgt	r2, [pc, #480]	; 1257c <select_update_selectfds+0x2c4>
   12398:	addgt	r2, pc, r2
   1239c:	strgt	r3, [r2]
   123a0:	pop	{r4, pc}
   123a4:	ldr	r3, [r0, #12]
   123a8:	add	r2, r3, #31
   123ac:	cmp	r3, #0
   123b0:	movge	r2, r3
   123b4:	asr	r2, r2, #5
   123b8:	ldr	lr, [pc, #448]	; 12580 <select_update_selectfds+0x2c8>
   123bc:	add	lr, pc, lr
   123c0:	asr	ip, r3, #31
   123c4:	lsr	ip, ip, #27
   123c8:	add	r3, r3, ip
   123cc:	and	r3, r3, #31
   123d0:	sub	r3, r3, ip
   123d4:	ldr	ip, [lr, r2, lsl #2]
   123d8:	mov	r4, #1
   123dc:	bic	r3, ip, r4, lsl r3
   123e0:	str	r3, [lr, r2, lsl #2]
   123e4:	ldr	r3, [r0, #20]
   123e8:	bic	r3, r3, #1
   123ec:	str	r3, [r0, #20]
   123f0:	tst	r1, #2
   123f4:	beq	12374 <select_update_selectfds+0xbc>
   123f8:	ldr	r3, [r0, #12]
   123fc:	add	r2, r3, #31
   12400:	cmp	r3, #0
   12404:	movge	r2, r3
   12408:	asr	r2, r2, #5
   1240c:	ldr	r1, [pc, #368]	; 12584 <select_update_selectfds+0x2cc>
   12410:	add	r1, pc, r1
   12414:	add	r2, r1, r2, lsl #2
   12418:	asr	r1, r3, #31
   1241c:	lsr	r1, r1, #27
   12420:	add	r3, r3, r1
   12424:	and	r3, r3, #31
   12428:	sub	r3, r3, r1
   1242c:	ldr	r1, [r2, #128]	; 0x80
   12430:	mov	ip, #1
   12434:	bic	r3, r1, ip, lsl r3
   12438:	str	r3, [r2, #128]	; 0x80
   1243c:	ldr	r3, [r0, #20]
   12440:	bic	r3, r3, #2
   12444:	str	r3, [r0, #20]
   12448:	b	12374 <select_update_selectfds+0xbc>
   1244c:	tst	r1, #2
   12450:	beq	12374 <select_update_selectfds+0xbc>
   12454:	cmp	r2, #0
   12458:	bne	12324 <select_update_selectfds+0x6c>
   1245c:	b	123f8 <select_update_selectfds+0x140>
   12460:	ldr	r3, [pc, #288]	; 12588 <select_update_selectfds+0x2d0>
   12464:	add	r3, pc, r3
   12468:	ldr	r3, [r3]
   1246c:	ldr	r2, [r0, #12]
   12470:	cmp	r2, r3
   12474:	popgt	{r4, pc}
   12478:	cmp	r3, #0
   1247c:	poplt	{r4, pc}
   12480:	add	r2, r3, #31
   12484:	cmp	r3, #0
   12488:	movge	r2, r3
   1248c:	asr	r2, r2, #5
   12490:	asr	r1, r3, #31
   12494:	lsr	r0, r1, #27
   12498:	add	r1, r3, r0
   1249c:	and	r1, r1, #31
   124a0:	sub	r1, r1, r0
   124a4:	mov	r0, #1
   124a8:	lsl	r1, r0, r1
   124ac:	ldr	r0, [pc, #216]	; 1258c <select_update_selectfds+0x2d4>
   124b0:	add	r0, pc, r0
   124b4:	ldr	r0, [r0, r2, lsl #2]
   124b8:	tst	r1, r0
   124bc:	popne	{r4, pc}
   124c0:	ldr	r0, [pc, #200]	; 12590 <select_update_selectfds+0x2d8>
   124c4:	add	r0, pc, r0
   124c8:	add	r2, r0, r2, lsl #2
   124cc:	ldr	r2, [r2, #128]	; 0x80
   124d0:	tst	r1, r2
   124d4:	popne	{r4, pc}
   124d8:	mov	lr, #1
   124dc:	ldr	ip, [pc, #176]	; 12594 <select_update_selectfds+0x2dc>
   124e0:	add	ip, pc, ip
   124e4:	ldr	r4, [pc, #172]	; 12598 <select_update_selectfds+0x2e0>
   124e8:	add	r4, pc, r4
   124ec:	sub	r3, r3, #1
   124f0:	cmn	r3, #1
   124f4:	beq	1254c <select_update_selectfds+0x294>
   124f8:	add	r1, r3, #31
   124fc:	cmp	r3, #0
   12500:	movge	r1, r3
   12504:	asr	r1, r1, #5
   12508:	asr	r2, r3, #31
   1250c:	lsr	r0, r2, #27
   12510:	add	r2, r3, r0
   12514:	and	r2, r2, #31
   12518:	sub	r2, r2, r0
   1251c:	lsl	r2, lr, r2
   12520:	ldr	r0, [ip, r1, lsl #2]
   12524:	tst	r2, r0
   12528:	bne	12560 <select_update_selectfds+0x2a8>
   1252c:	add	r1, r4, r1, lsl #2
   12530:	ldr	r1, [r1, #128]	; 0x80
   12534:	tst	r2, r1
   12538:	beq	124ec <select_update_selectfds+0x234>
   1253c:	ldr	r2, [pc, #88]	; 1259c <select_update_selectfds+0x2e4>
   12540:	add	r2, pc, r2
   12544:	str	r3, [r2]
   12548:	pop	{r4, pc}
   1254c:	mvn	r2, #0
   12550:	ldr	r3, [pc, #72]	; 125a0 <select_update_selectfds+0x2e8>
   12554:	add	r3, pc, r3
   12558:	str	r2, [r3]
   1255c:	pop	{r4, pc}
   12560:	ldr	r2, [pc, #60]	; 125a4 <select_update_selectfds+0x2ec>
   12564:	add	r2, pc, r2
   12568:	str	r3, [r2]
   1256c:	pop	{r4, pc}
   12570:	.word	0x00033a34
   12574:	.word	0x000339e0
   12578:	.word	0x000160f8
   1257c:	.word	0x000160e8
   12580:	.word	0x00033960
   12584:	.word	0x0003390c
   12588:	.word	0x0001601c
   1258c:	.word	0x0003386c
   12590:	.word	0x00033858
   12594:	.word	0x0003383c
   12598:	.word	0x00033834
   1259c:	.word	0x00015f40
   125a0:	.word	0x00015f2c
   125a4:	.word	0x00015f1c

000125a8 <rb_setup_fd_select>:
   125a8:	mov	r0, #0
   125ac:	bx	lr

000125b0 <rb_init_netio_select>:
   125b0:	ldr	r3, [pc, #104]	; 12620 <rb_init_netio_select+0x70>
   125b4:	add	r3, pc, r3
   125b8:	ldr	r2, [pc, #100]	; 12624 <rb_init_netio_select+0x74>
   125bc:	ldr	r2, [r3, r2]
   125c0:	ldr	r2, [r2]
   125c4:	cmp	r2, #1024	; 0x400
   125c8:	ldrgt	r2, [pc, #84]	; 12624 <rb_init_netio_select+0x74>
   125cc:	ldrgt	r3, [r3, r2]
   125d0:	movgt	r2, #1024	; 0x400
   125d4:	strgt	r2, [r3]
   125d8:	ldr	r2, [pc, #72]	; 12628 <rb_init_netio_select+0x78>
   125dc:	add	r2, pc, r2
   125e0:	sub	r3, r2, #4
   125e4:	add	r2, r2, #124	; 0x7c
   125e8:	mov	r1, #0
   125ec:	str	r1, [r3, #4]!
   125f0:	cmp	r3, r2
   125f4:	bne	125ec <rb_init_netio_select+0x3c>
   125f8:	ldr	r2, [pc, #44]	; 1262c <rb_init_netio_select+0x7c>
   125fc:	add	r2, pc, r2
   12600:	add	r3, r2, #124	; 0x7c
   12604:	add	r2, r2, #252	; 0xfc
   12608:	mov	r1, #0
   1260c:	str	r1, [r3, #4]!
   12610:	cmp	r2, r3
   12614:	bne	1260c <rb_init_netio_select+0x5c>
   12618:	mov	r0, #0
   1261c:	bx	lr
   12620:	.word	0x00015a44
   12624:	.word	0x000003a0
   12628:	.word	0x00033740
   1262c:	.word	0x00033720

00012630 <rb_setselect_select>:
   12630:	push	{r4, r5, r6, r7, r8, lr}
   12634:	mov	r4, r0
   12638:	mov	r5, r1
   1263c:	mov	r6, r2
   12640:	mov	r7, r3
   12644:	tst	r1, #1
   12648:	bne	12670 <rb_setselect_select+0x40>
   1264c:	tst	r5, #2
   12650:	popeq	{r4, r5, r6, r7, r8, pc}
   12654:	str	r6, [r4, #36]	; 0x24
   12658:	str	r7, [r4, #40]	; 0x28
   1265c:	mov	r2, r6
   12660:	mov	r1, #2
   12664:	mov	r0, r4
   12668:	bl	122b8 <select_update_selectfds>
   1266c:	pop	{r4, r5, r6, r7, r8, pc}
   12670:	str	r2, [r4, #28]
   12674:	str	r3, [r4, #32]
   12678:	mov	r1, #1
   1267c:	bl	122b8 <select_update_selectfds>
   12680:	b	1264c <rb_setselect_select+0x1c>

00012684 <rb_select_select>:
   12684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12688:	sub	sp, sp, #28
   1268c:	mov	r6, r0
   12690:	ldr	r8, [pc, #624]	; 12908 <rb_select_select+0x284>
   12694:	add	r8, pc, r8
   12698:	ldr	r4, [pc, #620]	; 1290c <rb_select_select+0x288>
   1269c:	add	r4, pc, r4
   126a0:	mov	r5, #128	; 0x80
   126a4:	mov	r2, r5
   126a8:	mov	r1, r4
   126ac:	add	r0, r4, #256	; 0x100
   126b0:	bl	4808 <memcpy@plt>
   126b4:	mov	r2, r5
   126b8:	add	r1, r4, r5
   126bc:	add	r0, r4, #384	; 0x180
   126c0:	bl	4808 <memcpy@plt>
   126c4:	mov	r3, #1000	; 0x3e8
   126c8:	mul	r6, r3, r6
   126cc:	mov	r4, #0
   126d0:	ldr	r5, [pc, #568]	; 12910 <rb_select_select+0x28c>
   126d4:	add	r5, pc, r5
   126d8:	add	sl, r5, #384	; 0x180
   126dc:	add	r5, r5, #256	; 0x100
   126e0:	ldr	r9, [pc, #556]	; 12914 <rb_select_select+0x290>
   126e4:	add	r9, pc, r9
   126e8:	add	r7, sp, #16
   126ec:	str	r4, [sp, #16]
   126f0:	str	r6, [sp, #20]
   126f4:	ldr	r0, [r9]
   126f8:	str	r7, [sp]
   126fc:	mov	r3, r4
   12700:	mov	r2, sl
   12704:	mov	r1, r5
   12708:	add	r0, r0, #1
   1270c:	bl	4934 <select@plt>
   12710:	cmp	r0, #0
   12714:	bge	12738 <rb_select_select+0xb4>
   12718:	bl	4ce8 <__errno_location@plt>
   1271c:	ldr	r0, [r0]
   12720:	bl	43dc <rb_ignore_errno@plt>
   12724:	cmp	r0, #0
   12728:	bne	126ec <rb_select_select+0x68>
   1272c:	bl	4994 <rb_set_time@plt>
   12730:	mvn	fp, #0
   12734:	b	128d4 <rb_select_select+0x250>
   12738:	mov	fp, r0
   1273c:	bl	4994 <rb_set_time@plt>
   12740:	cmp	fp, #0
   12744:	beq	128d4 <rb_select_select+0x250>
   12748:	ldr	r3, [pc, #456]	; 12918 <rb_select_select+0x294>
   1274c:	add	r3, pc, r3
   12750:	ldr	r3, [r3]
   12754:	add	r3, r3, #1
   12758:	cmp	r3, #0
   1275c:	ble	128e0 <rb_select_select+0x25c>
   12760:	mov	r5, #0
   12764:	mov	sl, #1
   12768:	ldr	fp, [pc, #428]	; 1291c <rb_select_select+0x298>
   1276c:	add	fp, pc, fp
   12770:	ldr	r3, [pc, #424]	; 12920 <rb_select_select+0x29c>
   12774:	add	r3, pc, r3
   12778:	str	r3, [sp, #12]
   1277c:	ldr	r9, [pc, #416]	; 12924 <rb_select_select+0x2a0>
   12780:	add	r9, pc, r9
   12784:	b	127b4 <rb_select_select+0x130>
   12788:	ldr	r3, [r4, #28]
   1278c:	cmp	r3, #0
   12790:	beq	128f4 <rb_select_select+0x270>
   12794:	ldr	r3, [r4, #36]	; 0x24
   12798:	cmp	r3, #0
   1279c:	beq	128bc <rb_select_select+0x238>
   127a0:	add	r5, r5, #1
   127a4:	ldr	r3, [r9]
   127a8:	add	r3, r3, #1
   127ac:	cmp	r3, r5
   127b0:	ble	128d0 <rb_select_select+0x24c>
   127b4:	cmp	r5, #0
   127b8:	blt	127a0 <rb_select_select+0x11c>
   127bc:	asr	r3, r5, #24
   127c0:	eor	r3, r3, r5, asr #12
   127c4:	eor	r3, r3, r5
   127c8:	lsl	r3, r3, #20
   127cc:	lsr	r3, r3, #20
   127d0:	ldr	r2, [pc, #336]	; 12928 <rb_select_select+0x2a4>
   127d4:	ldr	r2, [r8, r2]
   127d8:	ldr	r2, [r2]
   127dc:	add	r3, r3, r3, lsl #1
   127e0:	ldr	r3, [r2, r3, lsl #2]
   127e4:	cmp	r3, #0
   127e8:	beq	127a0 <rb_select_select+0x11c>
   127ec:	ldr	r4, [r3]
   127f0:	ldr	r2, [r4, #12]
   127f4:	cmp	r2, r5
   127f8:	beq	12818 <rb_select_select+0x194>
   127fc:	ldr	r3, [r3, #8]
   12800:	cmp	r3, #0
   12804:	beq	127a0 <rb_select_select+0x11c>
   12808:	ldr	r4, [r3]
   1280c:	ldr	r2, [r4, #12]
   12810:	cmp	r2, r5
   12814:	bne	127fc <rb_select_select+0x178>
   12818:	cmp	r4, #0
   1281c:	beq	127a0 <rb_select_select+0x11c>
   12820:	add	r7, r5, #31
   12824:	cmp	r5, #0
   12828:	movge	r7, r5
   1282c:	asr	r7, r7, #5
   12830:	asr	r6, r5, #31
   12834:	lsr	r3, r6, #27
   12838:	add	r6, r5, r3
   1283c:	and	r6, r6, #31
   12840:	sub	r6, r6, r3
   12844:	lsl	r6, sl, r6
   12848:	add	r3, fp, r7, lsl #2
   1284c:	ldr	r3, [r3, #256]	; 0x100
   12850:	tst	r6, r3
   12854:	beq	12878 <rb_select_select+0x1f4>
   12858:	ldr	r3, [r4, #28]
   1285c:	mov	r2, #0
   12860:	str	r2, [r4, #28]
   12864:	cmp	r3, r2
   12868:	beq	12878 <rb_select_select+0x1f4>
   1286c:	ldr	r1, [r4, #32]
   12870:	mov	r0, r4
   12874:	blx	r3
   12878:	ldrb	r3, [r4, #16]
   1287c:	tst	r3, #1
   12880:	beq	127a0 <rb_select_select+0x11c>
   12884:	ldr	r3, [sp, #12]
   12888:	add	r7, r3, r7, lsl #2
   1288c:	ldr	r3, [r7, #384]	; 0x180
   12890:	tst	r6, r3
   12894:	beq	12788 <rb_select_select+0x104>
   12898:	ldr	r3, [r4, #36]	; 0x24
   1289c:	mov	r2, #0
   128a0:	str	r2, [r4, #36]	; 0x24
   128a4:	cmp	r3, r2
   128a8:	beq	128e8 <rb_select_select+0x264>
   128ac:	ldr	r1, [r4, #40]	; 0x28
   128b0:	mov	r0, r4
   128b4:	blx	r3
   128b8:	b	12788 <rb_select_select+0x104>
   128bc:	mov	r2, #0
   128c0:	mov	r1, #2
   128c4:	mov	r0, r4
   128c8:	bl	122b8 <select_update_selectfds>
   128cc:	b	127a0 <rb_select_select+0x11c>
   128d0:	mov	fp, #0
   128d4:	mov	r0, fp
   128d8:	add	sp, sp, #28
   128dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128e0:	mov	fp, #0
   128e4:	b	128d4 <rb_select_select+0x250>
   128e8:	ldr	r3, [r4, #28]
   128ec:	cmp	r3, #0
   128f0:	bne	128bc <rb_select_select+0x238>
   128f4:	mov	r2, #0
   128f8:	mov	r1, sl
   128fc:	mov	r0, r4
   12900:	bl	122b8 <select_update_selectfds>
   12904:	b	12794 <rb_select_select+0x110>
   12908:	.word	0x00015964
   1290c:	.word	0x00033680
   12910:	.word	0x00033648
   12914:	.word	0x00015d9c
   12918:	.word	0x00015d34
   1291c:	.word	0x000335b0
   12920:	.word	0x000335a8
   12924:	.word	0x00015d00
   12928:	.word	0x000003c0

0001292c <rb_init_netio_kqueue>:
   1292c:	push	{r4, lr}
   12930:	bl	4ce8 <__errno_location@plt>
   12934:	mov	r3, #38	; 0x26
   12938:	str	r3, [r0]
   1293c:	mvn	r0, #0
   12940:	pop	{r4, pc}

00012944 <rb_setselect_kqueue>:
   12944:	push	{r4, lr}
   12948:	bl	4ce8 <__errno_location@plt>
   1294c:	mov	r3, #38	; 0x26
   12950:	str	r3, [r0]
   12954:	pop	{r4, pc}

00012958 <rb_select_kqueue>:
   12958:	push	{r4, lr}
   1295c:	bl	4ce8 <__errno_location@plt>
   12960:	mov	r3, #38	; 0x26
   12964:	str	r3, [r0]
   12968:	mvn	r0, #0
   1296c:	pop	{r4, pc}

00012970 <rb_setup_fd_kqueue>:
   12970:	push	{r4, lr}
   12974:	bl	4ce8 <__errno_location@plt>
   12978:	mov	r3, #38	; 0x26
   1297c:	str	r3, [r0]
   12980:	mvn	r0, #0
   12984:	pop	{r4, pc}

00012988 <rb_kqueue_init_event>:
   12988:	bx	lr

0001298c <rb_kqueue_sched_event>:
   1298c:	push	{r4, lr}
   12990:	bl	4ce8 <__errno_location@plt>
   12994:	mov	r3, #38	; 0x26
   12998:	str	r3, [r0]
   1299c:	mvn	r0, #0
   129a0:	pop	{r4, pc}

000129a4 <rb_kqueue_unsched_event>:
   129a4:	bx	lr

000129a8 <rb_kqueue_supports_event>:
   129a8:	push	{r4, lr}
   129ac:	bl	4ce8 <__errno_location@plt>
   129b0:	mov	r3, #38	; 0x26
   129b4:	str	r3, [r0]
   129b8:	mov	r0, #0
   129bc:	pop	{r4, pc}

000129c0 <rb_rawbuf_done>:
   129c0:	push	{r4, lr}
   129c4:	ldr	r3, [r1, #8]
   129c8:	cmp	r3, #0
   129cc:	ldrne	r2, [r1, #4]
   129d0:	strne	r2, [r3, #4]
   129d4:	ldreq	r3, [r1, #4]
   129d8:	streq	r3, [r0, #4]
   129dc:	ldr	r3, [r1, #4]
   129e0:	cmp	r3, #0
   129e4:	ldrne	r2, [r1, #8]
   129e8:	strne	r2, [r3, #8]
   129ec:	ldreq	r3, [r1, #8]
   129f0:	streq	r3, [r0]
   129f4:	mov	r3, #0
   129f8:	str	r3, [r1, #4]
   129fc:	str	r3, [r1, #8]
   12a00:	ldr	r3, [r0, #8]
   12a04:	sub	r3, r3, #1
   12a08:	str	r3, [r0, #8]
   12a0c:	ldr	r3, [pc, #12]	; 12a20 <rb_rawbuf_done+0x60>
   12a10:	add	r3, pc, r3
   12a14:	ldr	r0, [r3]
   12a18:	bl	48c8 <rb_bh_free@plt>
   12a1c:	pop	{r4, pc}
   12a20:	.word	0x0003350c

00012a24 <rb_rawbuf_flush_writev>:
   12a24:	push	{r4, r5, r6, r7, r8, r9, lr}
   12a28:	sub	sp, sp, #8192	; 0x2000
   12a2c:	sub	sp, sp, #4
   12a30:	mov	r5, r0
   12a34:	mov	r6, r1
   12a38:	mov	r2, #8192	; 0x2000
   12a3c:	mov	r1, #0
   12a40:	mov	r0, sp
   12a44:	bl	4628 <memset@plt>
   12a48:	ldr	r2, [r5]
   12a4c:	cmp	r2, #0
   12a50:	movne	r1, sp
   12a54:	movne	r0, #1
   12a58:	ldrne	lr, [pc, #388]	; 12be4 <rb_rawbuf_flush_writev+0x1c0>
   12a5c:	bne	12aac <rb_rawbuf_flush_writev+0x88>
   12a60:	bl	4ce8 <__errno_location@plt>
   12a64:	mov	r3, #11
   12a68:	str	r3, [r0]
   12a6c:	mvn	r9, #0
   12a70:	b	12bd4 <rb_rawbuf_flush_writev+0x1b0>
   12a74:	add	ip, r3, #12
   12a78:	str	ip, [r1]
   12a7c:	mov	r4, r0
   12a80:	ldr	r3, [r3, #1036]	; 0x40c
   12a84:	str	r3, [r1, #4]
   12a88:	ldr	r2, [r2, #8]
   12a8c:	add	r0, r0, #1
   12a90:	add	r1, r1, #8
   12a94:	clz	r3, r2
   12a98:	lsr	r3, r3, #5
   12a9c:	cmp	r4, lr
   12aa0:	orrgt	r3, r3, #1
   12aa4:	cmp	r3, #0
   12aa8:	bne	12ae0 <rb_rawbuf_flush_writev+0xbc>
   12aac:	ldr	r3, [r2]
   12ab0:	ldrb	ip, [r3, #1040]	; 0x410
   12ab4:	cmp	ip, #0
   12ab8:	beq	12a74 <rb_rawbuf_flush_writev+0x50>
   12abc:	ldr	r7, [r5, #16]
   12ac0:	add	ip, r3, #12
   12ac4:	add	ip, ip, r7
   12ac8:	str	ip, [r1]
   12acc:	mov	r4, r0
   12ad0:	ldr	r3, [r3, #1036]	; 0x40c
   12ad4:	sub	r3, r3, r7
   12ad8:	str	r3, [r1, #4]
   12adc:	b	12a88 <rb_rawbuf_flush_writev+0x64>
   12ae0:	cmp	r4, #0
   12ae4:	beq	12b2c <rb_rawbuf_flush_writev+0x108>
   12ae8:	mov	r2, r4
   12aec:	mov	r1, sp
   12af0:	mov	r0, r6
   12af4:	bl	4ad8 <rb_writev@plt>
   12af8:	subs	r9, r0, #0
   12afc:	ble	12bd4 <rb_rawbuf_flush_writev+0x1b0>
   12b00:	ldr	r3, [r5]
   12b04:	cmp	r3, #0
   12b08:	beq	12bd4 <rb_rawbuf_flush_writev+0x1b0>
   12b0c:	ldr	r6, [r3, #8]
   12b10:	ldr	r1, [r3]
   12b14:	cmp	r4, #0
   12b18:	ble	12bd4 <rb_rawbuf_flush_writev+0x1b0>
   12b1c:	add	r4, r4, #1
   12b20:	mov	r7, r9
   12b24:	mov	r8, #1
   12b28:	b	12b80 <rb_rawbuf_flush_writev+0x15c>
   12b2c:	bl	4ce8 <__errno_location@plt>
   12b30:	mov	r3, #11
   12b34:	str	r3, [r0]
   12b38:	mvn	r9, #0
   12b3c:	b	12bd4 <rb_rawbuf_flush_writev+0x1b0>
   12b40:	ldr	r3, [r1, #1036]	; 0x40c
   12b44:	cmp	r3, r7
   12b48:	bgt	12bbc <rb_rawbuf_flush_writev+0x198>
   12b4c:	sub	r7, r7, r3
   12b50:	ldr	r2, [r5, #12]
   12b54:	sub	r3, r2, r3
   12b58:	str	r3, [r5, #12]
   12b5c:	mov	r0, r5
   12b60:	bl	129c0 <rb_rawbuf_done>
   12b64:	cmp	r6, #0
   12b68:	beq	12bd4 <rb_rawbuf_flush_writev+0x1b0>
   12b6c:	ldr	r1, [r6]
   12b70:	add	r8, r8, #1
   12b74:	ldr	r6, [r6, #8]
   12b78:	cmp	r8, r4
   12b7c:	beq	12bd4 <rb_rawbuf_flush_writev+0x1b0>
   12b80:	ldrb	r3, [r1, #1040]	; 0x410
   12b84:	cmp	r3, #0
   12b88:	beq	12b40 <rb_rawbuf_flush_writev+0x11c>
   12b8c:	ldr	r3, [r1, #1036]	; 0x40c
   12b90:	ldr	r2, [r5, #16]
   12b94:	sub	r3, r3, r2
   12b98:	cmp	r3, r7
   12b9c:	bgt	12b40 <rb_rawbuf_flush_writev+0x11c>
   12ba0:	sub	r7, r7, r3
   12ba4:	ldr	r2, [r5, #12]
   12ba8:	sub	r3, r2, r3
   12bac:	str	r3, [r5, #12]
   12bb0:	mov	r0, r5
   12bb4:	bl	129c0 <rb_rawbuf_done>
   12bb8:	b	12b64 <rb_rawbuf_flush_writev+0x140>
   12bbc:	mov	r3, #1
   12bc0:	strb	r3, [r1, #1040]	; 0x410
   12bc4:	str	r7, [r5, #16]
   12bc8:	ldr	r3, [r5, #12]
   12bcc:	sub	r7, r3, r7
   12bd0:	str	r7, [r5, #12]
   12bd4:	mov	r0, r9
   12bd8:	add	sp, sp, #8192	; 0x2000
   12bdc:	add	sp, sp, #4
   12be0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12be4:	.word	0x000003ff

00012be8 <rb_rawbuf_flush>:
   12be8:	push	{r4, r5, r6, lr}
   12bec:	ldr	r3, [r0]
   12bf0:	cmp	r3, #0
   12bf4:	beq	12c80 <rb_rawbuf_flush+0x98>
   12bf8:	mov	r4, r0
   12bfc:	mov	r6, r1
   12c00:	mov	r0, r1
   12c04:	bl	44b4 <rb_fd_ssl@plt>
   12c08:	cmp	r0, #0
   12c0c:	beq	12c94 <rb_rawbuf_flush+0xac>
   12c10:	ldr	r3, [r4]
   12c14:	ldr	r5, [r3]
   12c18:	ldrb	r3, [r5, #1040]	; 0x410
   12c1c:	cmp	r3, #0
   12c20:	moveq	r3, #1
   12c24:	strbeq	r3, [r5, #1040]	; 0x410
   12c28:	moveq	r3, #0
   12c2c:	streq	r3, [r4, #16]
   12c30:	ldr	r3, [r4, #16]
   12c34:	ldr	r2, [r5, #1036]	; 0x40c
   12c38:	add	r1, r5, #12
   12c3c:	sub	r2, r2, r3
   12c40:	add	r1, r1, r3
   12c44:	mov	r0, r6
   12c48:	bl	4658 <rb_write@plt>
   12c4c:	subs	r6, r0, #0
   12c50:	ble	12c78 <rb_rawbuf_flush+0x90>
   12c54:	ldr	r3, [r4, #16]
   12c58:	add	r3, r6, r3
   12c5c:	str	r3, [r4, #16]
   12c60:	ldr	r2, [r5, #1036]	; 0x40c
   12c64:	cmp	r3, r2
   12c68:	beq	12ca8 <rb_rawbuf_flush+0xc0>
   12c6c:	ldr	r3, [r4, #12]
   12c70:	sub	r3, r3, r6
   12c74:	str	r3, [r4, #12]
   12c78:	mov	r0, r6
   12c7c:	pop	{r4, r5, r6, pc}
   12c80:	bl	4ce8 <__errno_location@plt>
   12c84:	mov	r3, #11
   12c88:	str	r3, [r0]
   12c8c:	mvn	r6, #0
   12c90:	b	12c78 <rb_rawbuf_flush+0x90>
   12c94:	mov	r1, r6
   12c98:	mov	r0, r4
   12c9c:	bl	12a24 <rb_rawbuf_flush_writev>
   12ca0:	mov	r6, r0
   12ca4:	b	12c78 <rb_rawbuf_flush+0x90>
   12ca8:	mov	r3, #0
   12cac:	str	r3, [r4, #16]
   12cb0:	ldr	r3, [r5, #8]
   12cb4:	cmp	r3, #0
   12cb8:	ldrne	r2, [r5, #4]
   12cbc:	strne	r2, [r3, #4]
   12cc0:	ldreq	r3, [r5, #4]
   12cc4:	streq	r3, [r4, #4]
   12cc8:	ldr	r3, [r5, #4]
   12ccc:	cmp	r3, #0
   12cd0:	ldrne	r2, [r5, #8]
   12cd4:	strne	r2, [r3, #8]
   12cd8:	ldreq	r3, [r5, #8]
   12cdc:	streq	r3, [r4]
   12ce0:	mov	r3, #0
   12ce4:	str	r3, [r5, #4]
   12ce8:	str	r3, [r5, #8]
   12cec:	ldr	r3, [r4, #8]
   12cf0:	sub	r3, r3, #1
   12cf4:	str	r3, [r4, #8]
   12cf8:	mov	r1, r5
   12cfc:	ldr	r3, [pc, #12]	; 12d10 <rb_rawbuf_flush+0x128>
   12d00:	add	r3, pc, r3
   12d04:	ldr	r0, [r3]
   12d08:	bl	48c8 <rb_bh_free@plt>
   12d0c:	b	12c6c <rb_rawbuf_flush+0x84>
   12d10:	.word	0x0003321c

00012d14 <rb_rawbuf_append>:
   12d14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d18:	mov	r5, r0
   12d1c:	mov	r8, r1
   12d20:	mov	r7, r2
   12d24:	ldr	r3, [r0, #4]
   12d28:	cmp	r3, #0
   12d2c:	beq	12d94 <rb_rawbuf_append+0x80>
   12d30:	ldr	r4, [r3]
   12d34:	cmp	r4, #0
   12d38:	beq	12d94 <rb_rawbuf_append+0x80>
   12d3c:	ldr	r3, [r4, #1036]	; 0x40c
   12d40:	cmp	r3, #1024	; 0x400
   12d44:	bge	12d94 <rb_rawbuf_append+0x80>
   12d48:	ldrb	r2, [r4, #1040]	; 0x410
   12d4c:	cmp	r2, #0
   12d50:	bne	12d94 <rb_rawbuf_append+0x80>
   12d54:	rsb	r6, r3, #1024	; 0x400
   12d58:	cmp	r7, r6
   12d5c:	movlt	r6, r7
   12d60:	add	r0, r4, #12
   12d64:	mov	r2, r6
   12d68:	add	r0, r0, r3
   12d6c:	bl	4808 <memcpy@plt>
   12d70:	ldr	r3, [r4, #1036]	; 0x40c
   12d74:	add	r3, r3, r6
   12d78:	str	r3, [r4, #1036]	; 0x40c
   12d7c:	ldr	r3, [r5, #12]
   12d80:	add	r3, r3, r6
   12d84:	str	r3, [r5, #12]
   12d88:	subs	r7, r7, r6
   12d8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d90:	add	r8, r8, r6
   12d94:	cmp	r7, #0
   12d98:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d9c:	ldr	sl, [pc, #156]	; 12e40 <rb_rawbuf_append+0x12c>
   12da0:	add	sl, pc, sl
   12da4:	mov	r9, #0
   12da8:	b	12e00 <rb_rawbuf_append+0xec>
   12dac:	str	r4, [r5, #4]
   12db0:	ldr	r3, [r5, #8]
   12db4:	add	r3, r3, #1
   12db8:	str	r3, [r5, #8]
   12dbc:	cmp	r7, #1024	; 0x400
   12dc0:	movlt	r6, r7
   12dc4:	movge	r6, #1024	; 0x400
   12dc8:	mov	r2, r6
   12dcc:	mov	r1, r8
   12dd0:	add	r0, r4, #12
   12dd4:	bl	4808 <memcpy@plt>
   12dd8:	ldr	r3, [r4, #1036]	; 0x40c
   12ddc:	add	r3, r3, r6
   12de0:	str	r3, [r4, #1036]	; 0x40c
   12de4:	sub	r7, r7, r6
   12de8:	add	r8, r8, r6
   12dec:	ldr	r3, [r5, #12]
   12df0:	add	r6, r3, r6
   12df4:	str	r6, [r5, #12]
   12df8:	cmp	r7, #0
   12dfc:	ble	12e3c <rb_rawbuf_append+0x128>
   12e00:	ldr	r0, [sl]
   12e04:	bl	4958 <rb_bh_alloc@plt>
   12e08:	mov	r4, r0
   12e0c:	str	r0, [r4]
   12e10:	str	r9, [r0, #8]
   12e14:	ldr	r3, [r5, #4]
   12e18:	str	r3, [r0, #4]
   12e1c:	ldr	r3, [r5, #4]
   12e20:	cmp	r3, #0
   12e24:	strne	r0, [r3, #8]
   12e28:	bne	12dac <rb_rawbuf_append+0x98>
   12e2c:	ldr	r3, [r5]
   12e30:	cmp	r3, #0
   12e34:	streq	r0, [r5]
   12e38:	b	12dac <rb_rawbuf_append+0x98>
   12e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e40:	.word	0x0003317c

00012e44 <rb_rawbuf_get>:
   12e44:	push	{r4, r5, r6, r7, r8, lr}
   12e48:	ldr	r3, [r0]
   12e4c:	cmp	r3, #0
   12e50:	beq	12ef4 <rb_rawbuf_get+0xb0>
   12e54:	ldr	r6, [r3]
   12e58:	ldrb	r3, [r6, #1040]	; 0x410
   12e5c:	cmp	r3, #0
   12e60:	add	ip, r6, #12
   12e64:	ldrne	r3, [r0, #16]
   12e68:	addne	ip, ip, r3
   12e6c:	mov	r7, r2
   12e70:	mov	r3, r1
   12e74:	mov	r5, r0
   12e78:	ldr	r4, [r6, #1036]	; 0x40c
   12e7c:	cmp	r2, r4
   12e80:	movlt	r4, r2
   12e84:	mov	r2, r4
   12e88:	mov	r1, ip
   12e8c:	mov	r0, r3
   12e90:	bl	4808 <memcpy@plt>
   12e94:	ldr	r3, [r6, #1036]	; 0x40c
   12e98:	cmp	r3, r4
   12e9c:	beq	12ed0 <rb_rawbuf_get+0x8c>
   12ea0:	mov	r2, #1
   12ea4:	strb	r2, [r6, #1040]	; 0x410
   12ea8:	sub	r3, r3, r4
   12eac:	str	r3, [r6, #1036]	; 0x40c
   12eb0:	ldr	r3, [r5, #12]
   12eb4:	sub	r3, r3, r4
   12eb8:	str	r3, [r5, #12]
   12ebc:	ldr	r3, [r5, #16]
   12ec0:	add	r3, r3, r4
   12ec4:	str	r3, [r5, #16]
   12ec8:	mov	r0, r4
   12ecc:	pop	{r4, r5, r6, r7, r8, pc}
   12ed0:	mov	r3, #0
   12ed4:	str	r3, [r5, #16]
   12ed8:	mov	r1, r6
   12edc:	mov	r0, r5
   12ee0:	bl	129c0 <rb_rawbuf_done>
   12ee4:	ldr	r2, [r5, #12]
   12ee8:	sub	r7, r2, r7
   12eec:	str	r7, [r5, #12]
   12ef0:	b	12ec8 <rb_rawbuf_get+0x84>
   12ef4:	mov	r4, #0
   12ef8:	b	12ec8 <rb_rawbuf_get+0x84>

00012efc <rb_rawbuf_length>:
   12efc:	ldr	r0, [r0, #12]
   12f00:	bx	lr

00012f04 <rb_new_rawbuffer>:
   12f04:	push	{r4, lr}
   12f08:	mov	r1, #20
   12f0c:	mov	r0, #1
   12f10:	bl	45ec <calloc@plt>
   12f14:	cmp	r0, #0
   12f18:	popne	{r4, pc}
   12f1c:	bl	4988 <rb_outofmemory@plt>

00012f20 <rb_free_rawbuffer>:
   12f20:	push	{r4, r5, r6, lr}
   12f24:	mov	r5, r0
   12f28:	ldr	r3, [r0]
   12f2c:	cmp	r3, #0
   12f30:	beq	12f54 <rb_free_rawbuffer+0x34>
   12f34:	ldr	r4, [r3, #8]
   12f38:	ldr	r1, [r3]
   12f3c:	mov	r0, r5
   12f40:	bl	129c0 <rb_rawbuf_done>
   12f44:	cmp	r4, #0
   12f48:	movne	r3, r4
   12f4c:	ldrne	r4, [r4, #8]
   12f50:	bne	12f38 <rb_free_rawbuffer+0x18>
   12f54:	cmp	r5, #0
   12f58:	popeq	{r4, r5, r6, pc}
   12f5c:	mov	r0, r5
   12f60:	bl	46f4 <free@plt>
   12f64:	pop	{r4, r5, r6, pc}

00012f68 <rb_init_rawbuffers>:
   12f68:	ldr	r3, [pc, #52]	; 12fa4 <rb_init_rawbuffers+0x3c>
   12f6c:	add	r3, pc, r3
   12f70:	ldr	r3, [r3]
   12f74:	cmp	r3, #0
   12f78:	bxne	lr
   12f7c:	push	{r4, lr}
   12f80:	mov	r1, r0
   12f84:	ldr	r2, [pc, #28]	; 12fa8 <rb_init_rawbuffers+0x40>
   12f88:	add	r2, pc, r2
   12f8c:	ldr	r0, [pc, #24]	; 12fac <rb_init_rawbuffers+0x44>
   12f90:	bl	4ab4 <rb_bh_create@plt>
   12f94:	ldr	r3, [pc, #20]	; 12fb0 <rb_init_rawbuffers+0x48>
   12f98:	add	r3, pc, r3
   12f9c:	str	r0, [r3]
   12fa0:	pop	{r4, pc}
   12fa4:	.word	0x00032fb0
   12fa8:	.word	0x000042c4
   12fac:	.word	0x00000414
   12fb0:	.word	0x00032f84

00012fb4 <Deref_Prefix>:
   12fb4:	cmp	r0, #0
   12fb8:	bxeq	lr
   12fbc:	ldr	r3, [r0, #4]
   12fc0:	sub	r3, r3, #1
   12fc4:	cmp	r3, #0
   12fc8:	ble	12fd4 <Deref_Prefix+0x20>
   12fcc:	str	r3, [r0, #4]
   12fd0:	bx	lr
   12fd4:	push	{r4, lr}
   12fd8:	bl	46f4 <free@plt>
   12fdc:	pop	{r4, pc}

00012fe0 <comp_with_mask>:
   12fe0:	push	{r4, r5, r6, lr}
   12fe4:	mov	r6, r0
   12fe8:	mov	r5, r1
   12fec:	mov	r4, r2
   12ff0:	lsr	r2, r2, #3
   12ff4:	bl	4454 <memcmp@plt>
   12ff8:	cmp	r0, #0
   12ffc:	bne	1302c <comp_with_mask+0x4c>
   13000:	ands	r3, r4, #7
   13004:	beq	13034 <comp_with_mask+0x54>
   13008:	ldrb	r2, [r6, r4, lsr #3]
   1300c:	ldrb	r1, [r5, r4, lsr #3]
   13010:	eor	r2, r2, r1
   13014:	rsb	r3, r3, #8
   13018:	mov	r1, #255	; 0xff
   1301c:	ands	r3, r2, r1, lsl r3
   13020:	moveq	r0, #1
   13024:	movne	r0, #0
   13028:	pop	{r4, r5, r6, pc}
   1302c:	mov	r0, #0
   13030:	pop	{r4, r5, r6, pc}
   13034:	mov	r0, #1
   13038:	pop	{r4, r5, r6, pc}

0001303c <New_Prefix2>:
   1303c:	push	{r4, r5, r6, r7, r8, lr}
   13040:	mov	r5, r0
   13044:	mov	r6, r1
   13048:	mov	r4, r2
   1304c:	cmp	r0, #10
   13050:	beq	13098 <New_Prefix2+0x5c>
   13054:	cmp	r0, #2
   13058:	bne	13104 <New_Prefix2+0xc8>
   1305c:	cmp	r3, #0
   13060:	movne	r2, #0
   13064:	beq	130e8 <New_Prefix2+0xac>
   13068:	ldr	r1, [r6]
   1306c:	str	r1, [r3, #8]
   13070:	mov	r0, r3
   13074:	cmp	r4, #0
   13078:	movlt	r4, #128	; 0x80
   1307c:	strh	r4, [r0, #2]
   13080:	strh	r5, [r0]
   13084:	cmp	r2, #0
   13088:	moveq	r3, #0
   1308c:	movne	r3, #1
   13090:	str	r3, [r0, #4]
   13094:	pop	{r4, r5, r6, r7, r8, pc}
   13098:	cmp	r3, #0
   1309c:	movne	r2, #0
   130a0:	beq	130cc <New_Prefix2+0x90>
   130a4:	ldr	r7, [r6]
   130a8:	ldr	lr, [r6, #4]
   130ac:	ldr	ip, [r6, #8]
   130b0:	ldr	r0, [r6, #12]
   130b4:	str	r7, [r3, #8]
   130b8:	str	lr, [r3, #12]
   130bc:	str	ip, [r3, #16]
   130c0:	str	r0, [r3, #20]
   130c4:	mov	r0, r3
   130c8:	b	13074 <New_Prefix2+0x38>
   130cc:	mov	r1, #24
   130d0:	mov	r0, #1
   130d4:	bl	45ec <calloc@plt>
   130d8:	subs	r3, r0, #0
   130dc:	movne	r2, #1
   130e0:	bne	130a4 <New_Prefix2+0x68>
   130e4:	bl	4988 <rb_outofmemory@plt>
   130e8:	mov	r1, #24
   130ec:	mov	r0, #1
   130f0:	bl	45ec <calloc@plt>
   130f4:	subs	r3, r0, #0
   130f8:	movne	r2, #1
   130fc:	bne	13068 <New_Prefix2+0x2c>
   13100:	bl	4988 <rb_outofmemory@plt>
   13104:	mov	r0, #0
   13108:	pop	{r4, r5, r6, r7, r8, pc}

0001310c <Ref_Prefix>:
   1310c:	cmp	r0, #0
   13110:	bxeq	lr
   13114:	ldr	r3, [r0, #4]
   13118:	cmp	r3, #0
   1311c:	beq	1312c <Ref_Prefix+0x20>
   13120:	add	r3, r3, #1
   13124:	str	r3, [r0, #4]
   13128:	bx	lr
   1312c:	push	{r4, lr}
   13130:	ldrh	r2, [r0, #2]
   13134:	add	r1, r0, #8
   13138:	ldrh	r0, [r0]
   1313c:	bl	1303c <New_Prefix2>
   13140:	pop	{r4, pc}

00013144 <ascii2prefix>:
   13144:	push	{r4, r5, r6, r7, r8, lr}
   13148:	sub	sp, sp, #1040	; 0x410
   1314c:	sub	sp, sp, #8
   13150:	subs	r4, r1, #0
   13154:	beq	13290 <ascii2prefix+0x14c>
   13158:	mov	r6, r0
   1315c:	cmp	r0, #0
   13160:	bne	1323c <ascii2prefix+0xf8>
   13164:	mov	r1, #58	; 0x3a
   13168:	mov	r0, r4
   1316c:	bl	45b0 <strchr@plt>
   13170:	cmp	r0, #0
   13174:	movne	r6, #10
   13178:	moveq	r6, #2
   1317c:	cmp	r0, #0
   13180:	movne	r7, #128	; 0x80
   13184:	moveq	r7, #32
   13188:	mov	r1, #47	; 0x2f
   1318c:	mov	r0, r4
   13190:	bl	45b0 <strchr@plt>
   13194:	subs	r5, r0, #0
   13198:	beq	131e8 <ascii2prefix+0xa4>
   1319c:	mov	r2, #10
   131a0:	mov	r1, #0
   131a4:	add	r0, r5, #1
   131a8:	bl	4874 <strtol@plt>
   131ac:	mov	r8, r0
   131b0:	sub	r5, r5, r4
   131b4:	mov	r2, r5
   131b8:	mov	r1, r4
   131bc:	add	r0, sp, #4
   131c0:	bl	4808 <memcpy@plt>
   131c4:	add	r3, sp, #1040	; 0x410
   131c8:	add	r3, r3, #8
   131cc:	add	r5, r3, r5
   131d0:	mov	r3, #0
   131d4:	strb	r3, [r5, #-1044]	; 0xfffffbec
   131d8:	cmp	r7, r8
   131dc:	cmpge	r8, r3
   131e0:	movgt	r7, r8
   131e4:	add	r4, sp, #4
   131e8:	cmp	r6, #2
   131ec:	beq	13258 <ascii2prefix+0x114>
   131f0:	cmp	r6, #10
   131f4:	movne	r0, #0
   131f8:	bne	13230 <ascii2prefix+0xec>
   131fc:	add	r2, sp, #1024	; 0x400
   13200:	add	r2, r2, #4
   13204:	mov	r1, r4
   13208:	mov	r0, #10
   1320c:	bl	4634 <rb_inet_pton@plt>
   13210:	cmp	r0, #0
   13214:	ble	132a0 <ascii2prefix+0x15c>
   13218:	mov	r3, #0
   1321c:	mov	r2, r7
   13220:	add	r1, sp, #1024	; 0x400
   13224:	add	r1, r1, #4
   13228:	mov	r0, #10
   1322c:	bl	1303c <New_Prefix2>
   13230:	add	sp, sp, #1040	; 0x410
   13234:	add	sp, sp, #8
   13238:	pop	{r4, r5, r6, r7, r8, pc}
   1323c:	cmp	r0, #2
   13240:	moveq	r7, #32
   13244:	beq	13188 <ascii2prefix+0x44>
   13248:	cmp	r0, #10
   1324c:	moveq	r7, #128	; 0x80
   13250:	movne	r7, #0
   13254:	b	13188 <ascii2prefix+0x44>
   13258:	add	r2, sp, #1040	; 0x410
   1325c:	add	r2, r2, #4
   13260:	mov	r1, r4
   13264:	mov	r0, #2
   13268:	bl	4634 <rb_inet_pton@plt>
   1326c:	cmp	r0, #0
   13270:	ble	13298 <ascii2prefix+0x154>
   13274:	mov	r3, #0
   13278:	mov	r2, r7
   1327c:	add	r1, sp, #1040	; 0x410
   13280:	add	r1, r1, #4
   13284:	mov	r0, #2
   13288:	bl	1303c <New_Prefix2>
   1328c:	b	13230 <ascii2prefix+0xec>
   13290:	mov	r0, #0
   13294:	b	13230 <ascii2prefix+0xec>
   13298:	mov	r0, #0
   1329c:	b	13230 <ascii2prefix+0xec>
   132a0:	mov	r0, #0
   132a4:	b	13230 <ascii2prefix+0xec>

000132a8 <rb_init_patricia>:
   132a8:	bx	lr

000132ac <rb_new_patricia>:
   132ac:	push	{r4, lr}
   132b0:	mov	r4, r0
   132b4:	mov	r1, #12
   132b8:	mov	r0, #1
   132bc:	bl	45ec <calloc@plt>
   132c0:	cmp	r0, #0
   132c4:	beq	132f0 <rb_new_patricia+0x44>
   132c8:	str	r4, [r0, #4]
   132cc:	mov	r3, #0
   132d0:	str	r3, [r0]
   132d4:	str	r3, [r0, #8]
   132d8:	ldr	r2, [pc, #20]	; 132f4 <rb_new_patricia+0x48>
   132dc:	add	r2, pc, r2
   132e0:	ldr	r3, [r2]
   132e4:	add	r3, r3, #1
   132e8:	str	r3, [r2]
   132ec:	pop	{r4, pc}
   132f0:	bl	4988 <rb_outofmemory@plt>
   132f4:	.word	0x00032c44

000132f8 <rb_clear_patricia>:
   132f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132fc:	sub	sp, sp, #520	; 0x208
   13300:	mov	r7, r0
   13304:	ldr	r4, [r0]
   13308:	cmp	r4, #0
   1330c:	beq	133a0 <rb_clear_patricia+0xa8>
   13310:	mov	r9, r1
   13314:	add	r8, sp, #4
   13318:	mov	sl, r8
   1331c:	b	13350 <rb_clear_patricia+0x58>
   13320:	mov	r0, r4
   13324:	bl	46f4 <free@plt>
   13328:	ldr	r3, [r7, #8]
   1332c:	sub	r3, r3, #1
   13330:	str	r3, [r7, #8]
   13334:	cmp	r5, #0
   13338:	beq	13380 <rb_clear_patricia+0x88>
   1333c:	cmp	r6, #0
   13340:	moveq	r4, r5
   13344:	strne	r6, [r8]
   13348:	movne	r4, r5
   1334c:	addne	r8, r8, #4
   13350:	ldr	r5, [r4, #8]
   13354:	ldr	r6, [r4, #12]
   13358:	ldr	r0, [r4, #4]
   1335c:	cmp	r0, #0
   13360:	beq	13320 <rb_clear_patricia+0x28>
   13364:	bl	12fb4 <Deref_Prefix>
   13368:	ldr	r0, [r4, #20]
   1336c:	cmp	r0, #0
   13370:	cmpne	r9, #0
   13374:	beq	13320 <rb_clear_patricia+0x28>
   13378:	blx	r9
   1337c:	b	13320 <rb_clear_patricia+0x28>
   13380:	cmp	r6, #0
   13384:	movne	r4, r6
   13388:	bne	13350 <rb_clear_patricia+0x58>
   1338c:	cmp	r8, sl
   13390:	beq	133a0 <rb_clear_patricia+0xa8>
   13394:	ldr	r4, [r8, #-4]
   13398:	cmp	r4, #0
   1339c:	bne	133b8 <rb_clear_patricia+0xc0>
   133a0:	cmp	r7, #0
   133a4:	beq	133b0 <rb_clear_patricia+0xb8>
   133a8:	mov	r0, r7
   133ac:	bl	46f4 <free@plt>
   133b0:	add	sp, sp, #520	; 0x208
   133b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133b8:	sub	r8, r8, #4
   133bc:	b	13350 <rb_clear_patricia+0x58>

000133c0 <rb_destroy_patricia>:
   133c0:	push	{r4, lr}
   133c4:	bl	44fc <rb_clear_patricia@plt>
   133c8:	ldr	r2, [pc, #16]	; 133e0 <rb_destroy_patricia+0x20>
   133cc:	add	r2, pc, r2
   133d0:	ldr	r3, [r2]
   133d4:	sub	r3, r3, #1
   133d8:	str	r3, [r2]
   133dc:	pop	{r4, pc}
   133e0:	.word	0x00032b54

000133e4 <rb_patricia_process>:
   133e4:	push	{r4, r5, r6, r7, lr}
   133e8:	sub	sp, sp, #524	; 0x20c
   133ec:	ldr	r4, [r0]
   133f0:	cmp	r4, #0
   133f4:	beq	13464 <rb_patricia_process+0x80>
   133f8:	mov	r6, r1
   133fc:	add	r5, sp, #4
   13400:	mov	r7, r5
   13404:	b	1342c <rb_patricia_process+0x48>
   13408:	ldr	r3, [r4, #8]
   1340c:	cmp	r3, #0
   13410:	beq	13444 <rb_patricia_process+0x60>
   13414:	ldr	r2, [r4, #12]
   13418:	cmp	r2, #0
   1341c:	moveq	r4, r3
   13420:	strne	r2, [r5]
   13424:	movne	r4, r3
   13428:	addne	r5, r5, #4
   1342c:	ldr	r0, [r4, #4]
   13430:	cmp	r0, #0
   13434:	beq	13408 <rb_patricia_process+0x24>
   13438:	ldr	r1, [r4, #20]
   1343c:	blx	r6
   13440:	b	13408 <rb_patricia_process+0x24>
   13444:	ldr	r4, [r4, #12]
   13448:	cmp	r4, #0
   1344c:	bne	1342c <rb_patricia_process+0x48>
   13450:	cmp	r5, r7
   13454:	beq	13464 <rb_patricia_process+0x80>
   13458:	ldr	r4, [r5, #-4]
   1345c:	cmp	r4, #0
   13460:	bne	1346c <rb_patricia_process+0x88>
   13464:	add	sp, sp, #524	; 0x20c
   13468:	pop	{r4, r5, r6, r7, pc}
   1346c:	sub	r5, r5, #4
   13470:	b	1342c <rb_patricia_process+0x48>

00013474 <rb_patricia_search_exact>:
   13474:	push	{r4, lr}
   13478:	ldr	r4, [r0]
   1347c:	cmp	r4, #0
   13480:	beq	134b8 <rb_patricia_search_exact+0x44>
   13484:	add	ip, r1, #8
   13488:	ldrh	r2, [r1, #2]
   1348c:	mov	lr, #128	; 0x80
   13490:	ldr	r3, [r4]
   13494:	cmp	r2, r3
   13498:	bls	134c0 <rb_patricia_search_exact+0x4c>
   1349c:	ldrb	r0, [ip, r3, lsr #3]
   134a0:	and	r3, r3, #7
   134a4:	ands	r3, r0, lr, asr r3
   134a8:	ldrne	r4, [r4, #12]
   134ac:	ldreq	r4, [r4, #8]
   134b0:	cmp	r4, #0
   134b4:	bne	13490 <rb_patricia_search_exact+0x1c>
   134b8:	mov	r0, r4
   134bc:	pop	{r4, pc}
   134c0:	bcc	134f0 <rb_patricia_search_exact+0x7c>
   134c4:	ldr	r0, [r4, #4]
   134c8:	cmp	r0, #0
   134cc:	beq	134f8 <rb_patricia_search_exact+0x84>
   134d0:	cmp	r1, #0
   134d4:	movne	r1, ip
   134d8:	moveq	r1, #0
   134dc:	add	r0, r0, #8
   134e0:	bl	12fe0 <comp_with_mask>
   134e4:	cmp	r0, #0
   134e8:	moveq	r4, #0
   134ec:	b	134b8 <rb_patricia_search_exact+0x44>
   134f0:	mov	r4, #0
   134f4:	b	134b8 <rb_patricia_search_exact+0x44>
   134f8:	mov	r4, #0
   134fc:	b	134b8 <rb_patricia_search_exact+0x44>

00013500 <rb_patricia_search_best2>:
   13500:	push	{r4, r5, r6, r7, r8, lr}
   13504:	sub	sp, sp, #520	; 0x208
   13508:	ldr	r4, [r0]
   1350c:	cmp	r4, #0
   13510:	beq	135e8 <rb_patricia_search_best2+0xe8>
   13514:	add	r0, r1, #8
   13518:	ldrh	lr, [r1, #2]
   1351c:	mov	r5, #0
   13520:	mov	r7, #128	; 0x80
   13524:	ldr	r3, [r4]
   13528:	cmp	lr, r3
   1352c:	bls	13568 <rb_patricia_search_best2+0x68>
   13530:	ldr	ip, [r4, #4]
   13534:	cmp	ip, #0
   13538:	addne	ip, sp, #520	; 0x208
   1353c:	addne	ip, ip, r5, lsl #2
   13540:	strne	r4, [ip, #-516]	; 0xfffffdfc
   13544:	addne	r5, r5, #1
   13548:	ldrb	ip, [r0, r3, lsr #3]
   1354c:	and	r3, r3, #7
   13550:	ands	r3, ip, r7, asr r3
   13554:	ldrne	r4, [r4, #12]
   13558:	ldreq	r4, [r4, #8]
   1355c:	cmp	r4, #0
   13560:	bne	13524 <rb_patricia_search_best2+0x24>
   13564:	b	1358c <rb_patricia_search_best2+0x8c>
   13568:	cmp	r2, #0
   1356c:	cmpne	r4, #0
   13570:	beq	1358c <rb_patricia_search_best2+0x8c>
   13574:	ldr	r3, [r4, #4]
   13578:	cmp	r3, #0
   1357c:	addne	r3, sp, #520	; 0x208
   13580:	addne	r3, r3, r5, lsl #2
   13584:	strne	r4, [r3, #-516]	; 0xfffffdfc
   13588:	addne	r5, r5, #1
   1358c:	cmp	r5, #0
   13590:	ble	135f4 <rb_patricia_search_best2+0xf4>
   13594:	cmp	r1, #0
   13598:	movne	r6, r0
   1359c:	moveq	r6, #0
   135a0:	add	r7, sp, #4
   135a4:	add	r7, r7, r5, lsl #2
   135a8:	mov	r8, #0
   135ac:	sub	r5, r5, #1
   135b0:	cmn	r5, #1
   135b4:	beq	135e4 <rb_patricia_search_best2+0xe4>
   135b8:	ldr	r4, [r7, #-4]!
   135bc:	ldr	r3, [r4, #4]
   135c0:	cmp	r3, #0
   135c4:	addne	r0, r3, #8
   135c8:	moveq	r0, r8
   135cc:	ldrh	r2, [r3, #2]
   135d0:	mov	r1, r6
   135d4:	bl	12fe0 <comp_with_mask>
   135d8:	cmp	r0, #0
   135dc:	beq	135ac <rb_patricia_search_best2+0xac>
   135e0:	b	135e8 <rb_patricia_search_best2+0xe8>
   135e4:	mov	r4, #0
   135e8:	mov	r0, r4
   135ec:	add	sp, sp, #520	; 0x208
   135f0:	pop	{r4, r5, r6, r7, r8, pc}
   135f4:	mov	r4, #0
   135f8:	b	135e8 <rb_patricia_search_best2+0xe8>

000135fc <rb_patricia_search_best>:
   135fc:	push	{r4, lr}
   13600:	mov	r2, #1
   13604:	bl	46ac <rb_patricia_search_best2@plt>
   13608:	pop	{r4, pc}

0001360c <rb_patricia_lookup>:
   1360c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13610:	mov	r5, r0
   13614:	mov	r8, r1
   13618:	ldr	r2, [r0]
   1361c:	cmp	r2, #0
   13620:	beq	13638 <rb_patricia_lookup+0x2c>
   13624:	add	r6, r1, #8
   13628:	ldrh	r7, [r1, #2]
   1362c:	mov	r0, r7
   13630:	mov	lr, #128	; 0x80
   13634:	b	1369c <rb_patricia_lookup+0x90>
   13638:	mov	r1, #24
   1363c:	mov	r0, #1
   13640:	bl	45ec <calloc@plt>
   13644:	subs	sl, r0, #0
   13648:	beq	13688 <rb_patricia_lookup+0x7c>
   1364c:	ldrh	r3, [r8, #2]
   13650:	str	r3, [sl]
   13654:	mov	r0, r8
   13658:	bl	1310c <Ref_Prefix>
   1365c:	str	r0, [sl, #4]
   13660:	mov	r3, #0
   13664:	str	r3, [sl, #16]
   13668:	str	r3, [sl, #12]
   1366c:	str	r3, [sl, #8]
   13670:	str	r3, [sl, #20]
   13674:	str	sl, [r5]
   13678:	ldr	r3, [r5, #8]
   1367c:	add	r3, r3, #1
   13680:	str	r3, [r5, #8]
   13684:	b	1396c <rb_patricia_lookup+0x360>
   13688:	bl	4988 <rb_outofmemory@plt>
   1368c:	ldr	r1, [r2, #8]
   13690:	cmp	r1, #0
   13694:	beq	136dc <rb_patricia_lookup+0xd0>
   13698:	mov	r2, r1
   1369c:	ldr	r3, [r2]
   136a0:	cmp	r0, r3
   136a4:	bhi	136b4 <rb_patricia_lookup+0xa8>
   136a8:	ldr	r1, [r2, #4]
   136ac:	cmp	r1, #0
   136b0:	bne	136dc <rb_patricia_lookup+0xd0>
   136b4:	ldr	r1, [r5, #4]
   136b8:	cmp	r3, r1
   136bc:	bcs	1368c <rb_patricia_lookup+0x80>
   136c0:	ldrb	r1, [r6, r3, lsr #3]
   136c4:	and	ip, r3, #7
   136c8:	ands	r1, r1, lr, asr ip
   136cc:	beq	1368c <rb_patricia_lookup+0x80>
   136d0:	ldr	r1, [r2, #12]
   136d4:	cmp	r1, #0
   136d8:	bne	13698 <rb_patricia_lookup+0x8c>
   136dc:	ldr	r0, [r2, #4]
   136e0:	add	r9, r0, #8
   136e4:	cmp	r7, r3
   136e8:	movcc	r4, r7
   136ec:	movcs	r4, r3
   136f0:	cmp	r4, #0
   136f4:	beq	13978 <rb_patricia_lookup+0x36c>
   136f8:	ldrb	r1, [r8, #8]
   136fc:	ldrb	r3, [r0, #8]
   13700:	eors	r1, r1, r3
   13704:	bne	13738 <rb_patricia_lookup+0x12c>
   13708:	mov	lr, r6
   1370c:	mov	ip, r9
   13710:	mov	r0, #8
   13714:	cmp	r4, r0
   13718:	bls	13764 <rb_patricia_lookup+0x158>
   1371c:	ldrb	r1, [lr, #1]!
   13720:	ldrb	r3, [ip, #1]!
   13724:	add	sl, r0, #8
   13728:	eors	r1, r1, r3
   1372c:	bne	1373c <rb_patricia_lookup+0x130>
   13730:	mov	r0, sl
   13734:	b	13714 <rb_patricia_lookup+0x108>
   13738:	mov	r0, #0
   1373c:	tst	r1, #128	; 0x80
   13740:	bne	1378c <rb_patricia_lookup+0x180>
   13744:	mov	r3, #1
   13748:	mov	ip, #128	; 0x80
   1374c:	ands	lr, r1, ip, asr r3
   13750:	bne	13760 <rb_patricia_lookup+0x154>
   13754:	add	r3, r3, #1
   13758:	cmp	r3, #8
   1375c:	bne	1374c <rb_patricia_lookup+0x140>
   13760:	add	r0, r0, r3
   13764:	cmp	r4, r0
   13768:	movcs	r4, r0
   1376c:	ldr	sl, [r2, #16]
   13770:	cmp	sl, #0
   13774:	beq	138a4 <rb_patricia_lookup+0x298>
   13778:	ldr	r3, [sl]
   1377c:	cmp	r4, r3
   13780:	bls	13798 <rb_patricia_lookup+0x18c>
   13784:	mov	sl, r2
   13788:	b	137b0 <rb_patricia_lookup+0x1a4>
   1378c:	mov	r3, #0
   13790:	b	13760 <rb_patricia_lookup+0x154>
   13794:	mov	sl, r3
   13798:	ldr	r3, [sl, #16]
   1379c:	cmp	r3, #0
   137a0:	beq	137b0 <rb_patricia_lookup+0x1a4>
   137a4:	ldr	r2, [r3]
   137a8:	cmp	r2, r4
   137ac:	bcs	13794 <rb_patricia_lookup+0x188>
   137b0:	cmp	r7, r4
   137b4:	beq	138ac <rb_patricia_lookup+0x2a0>
   137b8:	mov	r1, #24
   137bc:	mov	r0, #1
   137c0:	bl	45ec <calloc@plt>
   137c4:	subs	fp, r0, #0
   137c8:	beq	138d4 <rb_patricia_lookup+0x2c8>
   137cc:	str	r7, [fp]
   137d0:	mov	r0, r8
   137d4:	bl	1310c <Ref_Prefix>
   137d8:	str	r0, [fp, #4]
   137dc:	mov	r3, #0
   137e0:	str	r3, [fp, #16]
   137e4:	str	r3, [fp, #12]
   137e8:	str	r3, [fp, #8]
   137ec:	str	r3, [fp, #20]
   137f0:	ldr	r8, [r5, #8]
   137f4:	add	r3, r8, #1
   137f8:	str	r3, [r5, #8]
   137fc:	ldr	r3, [sl]
   13800:	cmp	r3, r4
   13804:	beq	138d8 <rb_patricia_lookup+0x2cc>
   13808:	cmp	r7, r4
   1380c:	beq	13914 <rb_patricia_lookup+0x308>
   13810:	mov	r1, #24
   13814:	mov	r0, #1
   13818:	bl	45ec <calloc@plt>
   1381c:	cmp	r0, #0
   13820:	beq	13974 <rb_patricia_lookup+0x368>
   13824:	str	r4, [r0]
   13828:	mov	r3, #0
   1382c:	str	r3, [r0, #4]
   13830:	ldr	r2, [sl, #16]
   13834:	str	r2, [r0, #16]
   13838:	str	r3, [r0, #20]
   1383c:	add	r8, r8, #2
   13840:	str	r8, [r5, #8]
   13844:	ldr	r3, [r5, #4]
   13848:	cmp	r3, r4
   1384c:	bls	1386c <rb_patricia_lookup+0x260>
   13850:	ldrb	r2, [r6, r4, lsr #3]
   13854:	and	r3, r4, #7
   13858:	mov	r1, #128	; 0x80
   1385c:	ands	r3, r2, r1, asr r3
   13860:	strne	fp, [r0, #12]
   13864:	strne	sl, [r0, #8]
   13868:	bne	13874 <rb_patricia_lookup+0x268>
   1386c:	str	sl, [r0, #12]
   13870:	str	fp, [r0, #8]
   13874:	str	r0, [fp, #16]
   13878:	ldr	r3, [sl, #16]
   1387c:	cmp	r3, #0
   13880:	streq	r0, [r5]
   13884:	beq	13898 <rb_patricia_lookup+0x28c>
   13888:	ldr	r2, [r3, #12]
   1388c:	cmp	r2, sl
   13890:	streq	r0, [r3, #12]
   13894:	strne	r0, [r3, #8]
   13898:	str	r0, [sl, #16]
   1389c:	mov	sl, fp
   138a0:	b	1396c <rb_patricia_lookup+0x360>
   138a4:	mov	sl, r2
   138a8:	b	137b0 <rb_patricia_lookup+0x1a4>
   138ac:	ldr	r3, [sl]
   138b0:	cmp	r7, r3
   138b4:	bne	137b8 <rb_patricia_lookup+0x1ac>
   138b8:	ldr	r3, [sl, #4]
   138bc:	cmp	r3, #0
   138c0:	bne	1396c <rb_patricia_lookup+0x360>
   138c4:	mov	r0, r8
   138c8:	bl	1310c <Ref_Prefix>
   138cc:	str	r0, [sl, #4]
   138d0:	b	1396c <rb_patricia_lookup+0x360>
   138d4:	bl	4988 <rb_outofmemory@plt>
   138d8:	str	sl, [fp, #16]
   138dc:	ldr	r3, [sl]
   138e0:	ldr	r2, [r5, #4]
   138e4:	cmp	r3, r2
   138e8:	bcs	13908 <rb_patricia_lookup+0x2fc>
   138ec:	ldrb	r2, [r6, r3, lsr #3]
   138f0:	and	r3, r3, #7
   138f4:	mov	r1, #128	; 0x80
   138f8:	ands	r3, r2, r1, asr r3
   138fc:	strne	fp, [sl, #12]
   13900:	movne	sl, fp
   13904:	bne	1396c <rb_patricia_lookup+0x360>
   13908:	str	fp, [sl, #8]
   1390c:	mov	sl, fp
   13910:	b	1396c <rb_patricia_lookup+0x360>
   13914:	ldr	r3, [r5, #4]
   13918:	cmp	r7, r3
   1391c:	bcs	13938 <rb_patricia_lookup+0x32c>
   13920:	ldrb	r3, [r9, r7, lsr #3]
   13924:	and	r7, r7, #7
   13928:	mov	r2, #128	; 0x80
   1392c:	ands	r3, r3, r2, asr r7
   13930:	strne	sl, [fp, #12]
   13934:	bne	1393c <rb_patricia_lookup+0x330>
   13938:	str	sl, [fp, #8]
   1393c:	ldr	r3, [sl, #16]
   13940:	str	r3, [fp, #16]
   13944:	ldr	r3, [sl, #16]
   13948:	cmp	r3, #0
   1394c:	streq	fp, [r5]
   13950:	beq	13964 <rb_patricia_lookup+0x358>
   13954:	ldr	r2, [r3, #12]
   13958:	cmp	r2, sl
   1395c:	streq	fp, [r3, #12]
   13960:	strne	fp, [r3, #8]
   13964:	str	fp, [sl, #16]
   13968:	mov	sl, fp
   1396c:	mov	r0, sl
   13970:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13974:	bl	4988 <rb_outofmemory@plt>
   13978:	ldr	sl, [r2, #16]
   1397c:	cmp	sl, #0
   13980:	moveq	sl, r2
   13984:	bne	13798 <rb_patricia_lookup+0x18c>
   13988:	b	137b0 <rb_patricia_lookup+0x1a4>

0001398c <rb_patricia_remove>:
   1398c:	push	{r4, r5, r6, r7, r8, lr}
   13990:	mov	r6, r0
   13994:	mov	r4, r1
   13998:	ldr	r5, [r1, #12]
   1399c:	cmp	r5, #0
   139a0:	beq	139d0 <rb_patricia_remove+0x44>
   139a4:	ldr	r3, [r1, #8]
   139a8:	cmp	r3, #0
   139ac:	beq	139dc <rb_patricia_remove+0x50>
   139b0:	ldr	r0, [r1, #4]
   139b4:	cmp	r0, #0
   139b8:	beq	139c0 <rb_patricia_remove+0x34>
   139bc:	bl	12fb4 <Deref_Prefix>
   139c0:	mov	r3, #0
   139c4:	str	r3, [r4, #4]
   139c8:	str	r3, [r4, #20]
   139cc:	pop	{r4, r5, r6, r7, r8, pc}
   139d0:	ldr	r5, [r1, #8]
   139d4:	cmp	r5, #0
   139d8:	beq	13a24 <rb_patricia_remove+0x98>
   139dc:	ldr	r7, [r4, #16]
   139e0:	str	r7, [r5, #16]
   139e4:	ldr	r0, [r4, #4]
   139e8:	bl	12fb4 <Deref_Prefix>
   139ec:	cmp	r4, #0
   139f0:	beq	139fc <rb_patricia_remove+0x70>
   139f4:	mov	r0, r4
   139f8:	bl	46f4 <free@plt>
   139fc:	ldr	r3, [r6, #8]
   13a00:	sub	r3, r3, #1
   13a04:	str	r3, [r6, #8]
   13a08:	cmp	r7, #0
   13a0c:	beq	13ac8 <rb_patricia_remove+0x13c>
   13a10:	ldr	r3, [r7, #12]
   13a14:	cmp	r4, r3
   13a18:	streq	r5, [r7, #12]
   13a1c:	strne	r5, [r7, #8]
   13a20:	pop	{r4, r5, r6, r7, r8, pc}
   13a24:	ldr	r5, [r1, #16]
   13a28:	ldr	r0, [r1, #4]
   13a2c:	bl	12fb4 <Deref_Prefix>
   13a30:	cmp	r4, #0
   13a34:	beq	13a40 <rb_patricia_remove+0xb4>
   13a38:	mov	r0, r4
   13a3c:	bl	46f4 <free@plt>
   13a40:	ldr	r3, [r6, #8]
   13a44:	sub	r3, r3, #1
   13a48:	str	r3, [r6, #8]
   13a4c:	cmp	r5, #0
   13a50:	beq	13abc <rb_patricia_remove+0x130>
   13a54:	ldr	r3, [r5, #12]
   13a58:	cmp	r4, r3
   13a5c:	moveq	r3, #0
   13a60:	streq	r3, [r5, #12]
   13a64:	ldreq	r3, [r5, #8]
   13a68:	movne	r2, #0
   13a6c:	strne	r2, [r5, #8]
   13a70:	ldr	r2, [r5, #4]
   13a74:	cmp	r2, #0
   13a78:	popne	{r4, r5, r6, r7, r8, pc}
   13a7c:	ldr	r2, [r5, #16]
   13a80:	cmp	r2, #0
   13a84:	streq	r3, [r6]
   13a88:	beq	13a9c <rb_patricia_remove+0x110>
   13a8c:	ldr	r1, [r2, #12]
   13a90:	cmp	r5, r1
   13a94:	streq	r3, [r2, #12]
   13a98:	strne	r3, [r2, #8]
   13a9c:	ldr	r2, [r5, #16]
   13aa0:	str	r2, [r3, #16]
   13aa4:	mov	r0, r5
   13aa8:	bl	46f4 <free@plt>
   13aac:	ldr	r3, [r6, #8]
   13ab0:	sub	r3, r3, #1
   13ab4:	str	r3, [r6, #8]
   13ab8:	pop	{r4, r5, r6, r7, r8, pc}
   13abc:	mov	r3, #0
   13ac0:	str	r3, [r6]
   13ac4:	pop	{r4, r5, r6, r7, r8, pc}
   13ac8:	str	r5, [r6]
   13acc:	pop	{r4, r5, r6, r7, r8, pc}

00013ad0 <make_and_lookup_ip>:
   13ad0:	push	{r4, r5, r6, lr}
   13ad4:	mov	r5, r0
   13ad8:	ldrh	r0, [r1]
   13adc:	cmp	r0, #10
   13ae0:	addeq	r1, r1, #8
   13ae4:	addne	r1, r1, #4
   13ae8:	mov	r3, #0
   13aec:	bl	1303c <New_Prefix2>
   13af0:	subs	r4, r0, #0
   13af4:	beq	13b18 <make_and_lookup_ip+0x48>
   13af8:	mov	r1, r4
   13afc:	mov	r0, r5
   13b00:	bl	48f8 <rb_patricia_lookup@plt>
   13b04:	mov	r5, r0
   13b08:	mov	r0, r4
   13b0c:	bl	12fb4 <Deref_Prefix>
   13b10:	mov	r0, r5
   13b14:	pop	{r4, r5, r6, pc}
   13b18:	mov	r5, #0
   13b1c:	b	13b10 <make_and_lookup_ip+0x40>

00013b20 <make_and_lookup>:
   13b20:	push	{r4, r5, r6, lr}
   13b24:	mov	r5, r0
   13b28:	mov	r6, r1
   13b2c:	mov	r0, #2
   13b30:	bl	13144 <ascii2prefix>
   13b34:	subs	r4, r0, #0
   13b38:	beq	13b5c <make_and_lookup+0x3c>
   13b3c:	mov	r1, r4
   13b40:	mov	r0, r5
   13b44:	bl	48f8 <rb_patricia_lookup@plt>
   13b48:	mov	r5, r0
   13b4c:	mov	r0, r4
   13b50:	bl	12fb4 <Deref_Prefix>
   13b54:	mov	r0, r5
   13b58:	pop	{r4, r5, r6, pc}
   13b5c:	mov	r1, r6
   13b60:	mov	r0, #10
   13b64:	bl	13144 <ascii2prefix>
   13b68:	subs	r4, r0, #0
   13b6c:	beq	13b84 <make_and_lookup+0x64>
   13b70:	mov	r1, r4
   13b74:	mov	r0, r5
   13b78:	bl	48f8 <rb_patricia_lookup@plt>
   13b7c:	mov	r5, r0
   13b80:	b	13b4c <make_and_lookup+0x2c>
   13b84:	mov	r5, #0
   13b88:	b	13b54 <make_and_lookup+0x34>

00013b8c <rb_match_ip>:
   13b8c:	push	{r4, r5, r6, lr}
   13b90:	mov	r5, r0
   13b94:	ldrh	r3, [r1]
   13b98:	cmp	r3, #10
   13b9c:	addeq	r1, r1, #8
   13ba0:	moveq	r0, #10
   13ba4:	moveq	r2, #128	; 0x80
   13ba8:	addne	r1, r1, #4
   13bac:	movne	r0, #2
   13bb0:	movne	r2, #32
   13bb4:	mov	r3, #0
   13bb8:	bl	1303c <New_Prefix2>
   13bbc:	subs	r4, r0, #0
   13bc0:	beq	13be4 <rb_match_ip+0x58>
   13bc4:	mov	r1, r4
   13bc8:	mov	r0, r5
   13bcc:	bl	4550 <rb_patricia_search_best@plt>
   13bd0:	mov	r5, r0
   13bd4:	mov	r0, r4
   13bd8:	bl	12fb4 <Deref_Prefix>
   13bdc:	mov	r0, r5
   13be0:	pop	{r4, r5, r6, pc}
   13be4:	mov	r5, #0
   13be8:	b	13bdc <rb_match_ip+0x50>

00013bec <rb_match_ip_exact>:
   13bec:	push	{r4, r5, r6, lr}
   13bf0:	mov	r5, r0
   13bf4:	ldrh	r3, [r1]
   13bf8:	cmp	r3, #10
   13bfc:	beq	13c40 <rb_match_ip_exact+0x54>
   13c00:	cmp	r2, #32
   13c04:	movcs	r2, #32
   13c08:	add	r1, r1, #4
   13c0c:	mov	r0, #2
   13c10:	mov	r3, #0
   13c14:	bl	1303c <New_Prefix2>
   13c18:	subs	r4, r0, #0
   13c1c:	beq	13c54 <rb_match_ip_exact+0x68>
   13c20:	mov	r1, r4
   13c24:	mov	r0, r5
   13c28:	bl	48b0 <rb_patricia_search_exact@plt>
   13c2c:	mov	r5, r0
   13c30:	mov	r0, r4
   13c34:	bl	12fb4 <Deref_Prefix>
   13c38:	mov	r0, r5
   13c3c:	pop	{r4, r5, r6, pc}
   13c40:	cmp	r2, #128	; 0x80
   13c44:	movcs	r2, #128	; 0x80
   13c48:	add	r1, r1, #8
   13c4c:	mov	r0, #10
   13c50:	b	13c10 <rb_match_ip_exact+0x24>
   13c54:	mov	r5, #0
   13c58:	b	13c38 <rb_match_ip_exact+0x4c>

00013c5c <rb_match_string>:
   13c5c:	push	{r4, r5, r6, lr}
   13c60:	mov	r5, r0
   13c64:	mov	r6, r1
   13c68:	mov	r0, #2
   13c6c:	bl	13144 <ascii2prefix>
   13c70:	subs	r4, r0, #0
   13c74:	beq	13c98 <rb_match_string+0x3c>
   13c78:	mov	r1, r4
   13c7c:	mov	r0, r5
   13c80:	bl	4550 <rb_patricia_search_best@plt>
   13c84:	mov	r5, r0
   13c88:	mov	r0, r4
   13c8c:	bl	12fb4 <Deref_Prefix>
   13c90:	mov	r0, r5
   13c94:	pop	{r4, r5, r6, pc}
   13c98:	mov	r1, r6
   13c9c:	mov	r0, #10
   13ca0:	bl	13144 <ascii2prefix>
   13ca4:	subs	r4, r0, #0
   13ca8:	beq	13cc8 <rb_match_string+0x6c>
   13cac:	mov	r1, r4
   13cb0:	mov	r0, r5
   13cb4:	bl	4550 <rb_patricia_search_best@plt>
   13cb8:	mov	r5, r0
   13cbc:	mov	r0, r4
   13cc0:	bl	12fb4 <Deref_Prefix>
   13cc4:	b	13c90 <rb_match_string+0x34>
   13cc8:	mov	r5, #0
   13ccc:	b	13c90 <rb_match_string+0x34>

00013cd0 <rb_match_exact_string>:
   13cd0:	push	{r4, r5, r6, lr}
   13cd4:	mov	r5, r0
   13cd8:	mov	r6, r1
   13cdc:	mov	r0, #2
   13ce0:	bl	13144 <ascii2prefix>
   13ce4:	subs	r4, r0, #0
   13ce8:	beq	13d0c <rb_match_exact_string+0x3c>
   13cec:	mov	r1, r4
   13cf0:	mov	r0, r5
   13cf4:	bl	48b0 <rb_patricia_search_exact@plt>
   13cf8:	mov	r5, r0
   13cfc:	mov	r0, r4
   13d00:	bl	12fb4 <Deref_Prefix>
   13d04:	mov	r0, r5
   13d08:	pop	{r4, r5, r6, pc}
   13d0c:	mov	r1, r6
   13d10:	mov	r0, #10
   13d14:	bl	13144 <ascii2prefix>
   13d18:	subs	r4, r0, #0
   13d1c:	beq	13d3c <rb_match_exact_string+0x6c>
   13d20:	mov	r1, r4
   13d24:	mov	r0, r5
   13d28:	bl	48b0 <rb_patricia_search_exact@plt>
   13d2c:	mov	r5, r0
   13d30:	mov	r0, r4
   13d34:	bl	12fb4 <Deref_Prefix>
   13d38:	b	13d04 <rb_match_exact_string+0x34>
   13d3c:	mov	r5, #0
   13d40:	b	13d04 <rb_match_exact_string+0x34>

00013d44 <rb_dictionary_retune>:
   13d44:	push	{r4, r5, r6, r7, r8, lr}
   13d48:	sub	sp, sp, #32
   13d4c:	ldr	r4, [r0, #4]
   13d50:	cmp	r4, #0
   13d54:	beq	13e64 <rb_dictionary_retune+0x120>
   13d58:	mov	r6, r1
   13d5c:	mov	r5, r0
   13d60:	mov	r3, #0
   13d64:	str	r3, [sp, #8]
   13d68:	add	r8, sp, #32
   13d6c:	str	r3, [r8, #-28]!	; 0xffffffe4
   13d70:	mov	r7, r8
   13d74:	b	13de0 <rb_dictionary_retune+0x9c>
   13d78:	ldr	r3, [r4]
   13d7c:	cmp	r3, #0
   13d80:	beq	13e40 <rb_dictionary_retune+0xfc>
   13d84:	ldr	r2, [r5]
   13d88:	ldr	r1, [r3, #20]
   13d8c:	mov	r0, r6
   13d90:	blx	r2
   13d94:	cmp	r0, #0
   13d98:	blt	13dac <rb_dictionary_retune+0x68>
   13d9c:	str	r4, [r8]
   13da0:	mov	r8, r4
   13da4:	ldr	r4, [r4]
   13da8:	b	13de0 <rb_dictionary_retune+0x9c>
   13dac:	ldr	r3, [r4]
   13db0:	ldr	r2, [r3, #4]
   13db4:	str	r2, [r4]
   13db8:	str	r4, [r3, #4]
   13dbc:	ldr	r2, [r3]
   13dc0:	cmp	r2, #0
   13dc4:	beq	13e6c <rb_dictionary_retune+0x128>
   13dc8:	mov	r4, r3
   13dcc:	b	13d9c <rb_dictionary_retune+0x58>
   13dd0:	mov	r3, r4
   13dd4:	str	r3, [r7, #4]
   13dd8:	ldr	r4, [r3, #4]
   13ddc:	mov	r7, r3
   13de0:	ldr	r3, [r5]
   13de4:	ldr	r1, [r4, #20]
   13de8:	mov	r0, r6
   13dec:	blx	r3
   13df0:	cmp	r0, #0
   13df4:	beq	13e40 <rb_dictionary_retune+0xfc>
   13df8:	blt	13d78 <rb_dictionary_retune+0x34>
   13dfc:	ldr	r3, [r4, #4]
   13e00:	cmp	r3, #0
   13e04:	beq	13e40 <rb_dictionary_retune+0xfc>
   13e08:	ldr	r2, [r5]
   13e0c:	ldr	r1, [r3, #20]
   13e10:	mov	r0, r6
   13e14:	blx	r2
   13e18:	cmp	r0, #0
   13e1c:	ble	13dd0 <rb_dictionary_retune+0x8c>
   13e20:	ldr	r3, [r4, #4]
   13e24:	ldr	r2, [r3]
   13e28:	str	r2, [r4, #4]
   13e2c:	str	r4, [r3]
   13e30:	ldr	r2, [r3, #4]
   13e34:	cmp	r2, #0
   13e38:	bne	13dd4 <rb_dictionary_retune+0x90>
   13e3c:	mov	r4, r3
   13e40:	ldr	r3, [r4]
   13e44:	str	r3, [r7, #4]
   13e48:	ldr	r3, [r4, #4]
   13e4c:	str	r3, [r8]
   13e50:	ldr	r3, [sp, #8]
   13e54:	str	r3, [r4]
   13e58:	ldr	r3, [sp, #4]
   13e5c:	str	r3, [r4, #4]
   13e60:	str	r4, [r5, #4]
   13e64:	add	sp, sp, #32
   13e68:	pop	{r4, r5, r6, r7, r8, pc}
   13e6c:	mov	r4, r3
   13e70:	b	13e40 <rb_dictionary_retune+0xfc>

00013e74 <stats_recurse>:
   13e74:	push	{r4, r5, r6, r7, r8, lr}
   13e78:	ldr	r3, [r2]
   13e7c:	cmp	r3, r1
   13e80:	strlt	r1, [r2]
   13e84:	cmp	r0, #0
   13e88:	moveq	r7, r1
   13e8c:	beq	13ed4 <stats_recurse+0x60>
   13e90:	mov	r5, r2
   13e94:	mov	r4, r1
   13e98:	mov	r6, r0
   13e9c:	ldr	r0, [r0]
   13ea0:	cmp	r0, #0
   13ea4:	moveq	r7, r1
   13ea8:	beq	13eb8 <stats_recurse+0x44>
   13eac:	add	r1, r1, #1
   13eb0:	bl	13e74 <stats_recurse>
   13eb4:	add	r7, r4, r0
   13eb8:	ldr	r0, [r6, #4]
   13ebc:	cmp	r0, #0
   13ec0:	beq	13ed4 <stats_recurse+0x60>
   13ec4:	mov	r2, r5
   13ec8:	add	r1, r4, #1
   13ecc:	bl	13e74 <stats_recurse>
   13ed0:	add	r7, r7, r0
   13ed4:	mov	r0, r7
   13ed8:	pop	{r4, r5, r6, r7, r8, pc}

00013edc <rb_dictionary_create>:
   13edc:	push	{r4, r5, r6, lr}
   13ee0:	mov	r5, r0
   13ee4:	mov	r6, r1
   13ee8:	mov	r1, #40	; 0x28
   13eec:	mov	r0, #1
   13ef0:	bl	45ec <calloc@plt>
   13ef4:	subs	r4, r0, #0
   13ef8:	beq	13f74 <rb_dictionary_create+0x98>
   13efc:	str	r6, [r4]
   13f00:	mov	r0, r5
   13f04:	bl	47e4 <strlen@plt>
   13f08:	add	r0, r0, #1
   13f0c:	bl	49ac <malloc@plt>
   13f10:	subs	r6, r0, #0
   13f14:	beq	13f78 <rb_dictionary_create+0x9c>
   13f18:	mov	r1, r5
   13f1c:	mov	r0, r6
   13f20:	bl	488c <strcpy@plt>
   13f24:	str	r6, [r4, #20]
   13f28:	add	r2, r4, #28
   13f2c:	str	r4, [r4, #28]
   13f30:	mov	r3, #0
   13f34:	str	r3, [r4, #32]
   13f38:	ldr	r3, [pc, #92]	; 13f9c <rb_dictionary_create+0xc0>
   13f3c:	add	r3, pc, r3
   13f40:	ldr	r3, [r3]
   13f44:	str	r3, [r4, #36]	; 0x24
   13f48:	cmp	r3, #0
   13f4c:	strne	r2, [r3, #4]
   13f50:	beq	13f7c <rb_dictionary_create+0xa0>
   13f54:	ldr	r3, [pc, #68]	; 13fa0 <rb_dictionary_create+0xc4>
   13f58:	add	r3, pc, r3
   13f5c:	str	r2, [r3]
   13f60:	ldr	r2, [r3, #8]
   13f64:	add	r2, r2, #1
   13f68:	str	r2, [r3, #8]
   13f6c:	mov	r0, r4
   13f70:	pop	{r4, r5, r6, pc}
   13f74:	bl	4988 <rb_outofmemory@plt>
   13f78:	bl	4988 <rb_outofmemory@plt>
   13f7c:	ldr	r3, [pc, #32]	; 13fa4 <rb_dictionary_create+0xc8>
   13f80:	add	r3, pc, r3
   13f84:	ldr	r3, [r3, #4]
   13f88:	cmp	r3, #0
   13f8c:	ldreq	r3, [pc, #20]	; 13fa8 <rb_dictionary_create+0xcc>
   13f90:	addeq	r3, pc, r3
   13f94:	streq	r2, [r3, #4]
   13f98:	b	13f54 <rb_dictionary_create+0x78>
   13f9c:	.word	0x00031fe8
   13fa0:	.word	0x00031fcc
   13fa4:	.word	0x00031fa4
   13fa8:	.word	0x00031f94

00013fac <rb_dictionary_set_comparator_func>:
   13fac:	str	r1, [r0]
   13fb0:	bx	lr

00013fb4 <rb_dictionary_get_comparator_func>:
   13fb4:	ldr	r0, [r0]
   13fb8:	bx	lr

00013fbc <rb_dictionary_destroy>:
   13fbc:	push	{r4, r5, r6, r7, r8, lr}
   13fc0:	mov	r7, r0
   13fc4:	ldr	r5, [r0, #8]
   13fc8:	cmp	r5, #0
   13fcc:	beq	14010 <rb_dictionary_destroy+0x54>
   13fd0:	mov	r6, r1
   13fd4:	mov	r8, r2
   13fd8:	ldr	r4, [r5, #12]
   13fdc:	b	13ff8 <rb_dictionary_destroy+0x3c>
   13fe0:	mov	r0, r5
   13fe4:	bl	46f4 <free@plt>
   13fe8:	cmp	r4, #0
   13fec:	beq	14010 <rb_dictionary_destroy+0x54>
   13ff0:	mov	r5, r4
   13ff4:	ldr	r4, [r4, #12]
   13ff8:	cmp	r6, #0
   13ffc:	beq	13fe0 <rb_dictionary_destroy+0x24>
   14000:	mov	r1, r8
   14004:	mov	r0, r5
   14008:	blx	r6
   1400c:	b	13fe0 <rb_dictionary_destroy+0x24>
   14010:	ldr	r3, [r7, #36]	; 0x24
   14014:	cmp	r3, #0
   14018:	beq	1407c <rb_dictionary_destroy+0xc0>
   1401c:	ldr	r2, [r7, #32]
   14020:	str	r2, [r3, #4]
   14024:	ldr	r3, [r7, #32]
   14028:	cmp	r3, #0
   1402c:	beq	14090 <rb_dictionary_destroy+0xd4>
   14030:	ldr	r2, [r7, #36]	; 0x24
   14034:	str	r2, [r3, #8]
   14038:	mov	r3, #0
   1403c:	str	r3, [r7, #32]
   14040:	str	r3, [r7, #36]	; 0x24
   14044:	ldr	r2, [pc, #88]	; 140a4 <rb_dictionary_destroy+0xe8>
   14048:	add	r2, pc, r2
   1404c:	ldr	r3, [r2, #8]
   14050:	sub	r3, r3, #1
   14054:	str	r3, [r2, #8]
   14058:	ldr	r0, [r7, #20]
   1405c:	cmp	r0, #0
   14060:	beq	14068 <rb_dictionary_destroy+0xac>
   14064:	bl	46f4 <free@plt>
   14068:	cmp	r7, #0
   1406c:	popeq	{r4, r5, r6, r7, r8, pc}
   14070:	mov	r0, r7
   14074:	bl	46f4 <free@plt>
   14078:	pop	{r4, r5, r6, r7, r8, pc}
   1407c:	ldr	r2, [r7, #32]
   14080:	ldr	r3, [pc, #32]	; 140a8 <rb_dictionary_destroy+0xec>
   14084:	add	r3, pc, r3
   14088:	str	r2, [r3, #4]
   1408c:	b	14024 <rb_dictionary_destroy+0x68>
   14090:	ldr	r2, [r7, #36]	; 0x24
   14094:	ldr	r3, [pc, #16]	; 140ac <rb_dictionary_destroy+0xf0>
   14098:	add	r3, pc, r3
   1409c:	str	r2, [r3]
   140a0:	b	14038 <rb_dictionary_destroy+0x7c>
   140a4:	.word	0x00031edc
   140a8:	.word	0x00031ea0
   140ac:	.word	0x00031e8c

000140b0 <rb_dictionary_foreach>:
   140b0:	ldr	r0, [r0, #8]
   140b4:	cmp	r0, #0
   140b8:	bxeq	lr
   140bc:	push	{r4, r5, r6, lr}
   140c0:	mov	r6, r2
   140c4:	mov	r5, r1
   140c8:	ldr	r4, [r0, #12]
   140cc:	b	140e0 <rb_dictionary_foreach+0x30>
   140d0:	cmp	r4, #0
   140d4:	popeq	{r4, r5, r6, pc}
   140d8:	mov	r0, r4
   140dc:	ldr	r4, [r4, #12]
   140e0:	cmp	r5, #0
   140e4:	beq	140d0 <rb_dictionary_foreach+0x20>
   140e8:	mov	r1, r6
   140ec:	blx	r5
   140f0:	b	140d0 <rb_dictionary_foreach+0x20>

000140f4 <rb_dictionary_search>:
   140f4:	ldr	r0, [r0, #8]
   140f8:	cmp	r0, #0
   140fc:	beq	14140 <rb_dictionary_search+0x4c>
   14100:	push	{r4, r5, r6, lr}
   14104:	mov	r6, r2
   14108:	mov	r5, r1
   1410c:	ldr	r4, [r0, #12]
   14110:	b	14124 <rb_dictionary_search+0x30>
   14114:	cmp	r4, #0
   14118:	beq	14148 <rb_dictionary_search+0x54>
   1411c:	mov	r0, r4
   14120:	ldr	r4, [r4, #12]
   14124:	cmp	r5, #0
   14128:	beq	14114 <rb_dictionary_search+0x20>
   1412c:	mov	r1, r6
   14130:	blx	r5
   14134:	cmp	r0, #0
   14138:	beq	14114 <rb_dictionary_search+0x20>
   1413c:	pop	{r4, r5, r6, pc}
   14140:	mov	r0, #0
   14144:	bx	lr
   14148:	mov	r0, #0
   1414c:	pop	{r4, r5, r6, pc}

00014150 <rb_dictionary_foreach_cur>:
   14150:	ldr	r3, [r1]
   14154:	cmp	r3, #0
   14158:	ldrne	r0, [r3, #16]
   1415c:	moveq	r0, #0
   14160:	bx	lr

00014164 <rb_dictionary_foreach_next>:
   14164:	ldr	r3, [r1]
   14168:	cmp	r3, #0
   1416c:	beq	14188 <rb_dictionary_foreach_next+0x24>
   14170:	ldr	r3, [r1, #4]
   14174:	str	r3, [r1]
   14178:	cmp	r3, #0
   1417c:	ldrne	r3, [r3, #12]
   14180:	strne	r3, [r1, #4]
   14184:	bx	lr
   14188:	push	{r4, lr}
   1418c:	mov	r1, r0
   14190:	ldr	r0, [pc, #8]	; 141a0 <rb_dictionary_foreach_next+0x3c>
   14194:	add	r0, pc, r0
   14198:	bl	491c <rb_lib_log@plt>
   1419c:	pop	{r4, pc}
   141a0:	.word	0x000030cc

000141a4 <rb_dictionary_foreach_start>:
   141a4:	mov	r3, #0
   141a8:	str	r3, [r1]
   141ac:	str	r3, [r1, #4]
   141b0:	ldr	r3, [r0, #8]
   141b4:	str	r3, [r1]
   141b8:	cmp	r3, #0
   141bc:	bxeq	lr
   141c0:	push	{r4, lr}
   141c4:	str	r3, [r1, #4]
   141c8:	bl	46dc <rb_dictionary_foreach_next@plt>
   141cc:	pop	{r4, pc}

000141d0 <rb_dictionary_find>:
   141d0:	push	{r4, r5, r6, lr}
   141d4:	mov	r4, r0
   141d8:	mov	r5, r1
   141dc:	bl	13d44 <rb_dictionary_retune>
   141e0:	ldr	r0, [r4, #4]
   141e4:	cmp	r0, #0
   141e8:	popeq	{r4, r5, r6, pc}
   141ec:	ldr	r3, [r4]
   141f0:	ldr	r1, [r0, #20]
   141f4:	mov	r0, r5
   141f8:	blx	r3
   141fc:	cmp	r0, #0
   14200:	ldreq	r0, [r4, #4]
   14204:	movne	r0, #0
   14208:	pop	{r4, r5, r6, pc}

0001420c <rb_dictionary_get_linear_index>:
   1420c:	push	{r4, lr}
   14210:	mov	r4, r0
   14214:	bl	4a30 <rb_dictionary_find@plt>
   14218:	cmp	r0, #0
   1421c:	beq	1426c <rb_dictionary_get_linear_index+0x60>
   14220:	ldrb	r3, [r4, #24]
   14224:	tst	r3, #1
   14228:	beq	14264 <rb_dictionary_get_linear_index+0x58>
   1422c:	ldr	r3, [r4, #8]
   14230:	cmp	r3, #0
   14234:	beq	14250 <rb_dictionary_get_linear_index+0x44>
   14238:	mov	r2, #0
   1423c:	str	r2, [r3, #24]
   14240:	ldr	r3, [r3, #12]
   14244:	add	r2, r2, #1
   14248:	cmp	r3, #0
   1424c:	bne	1423c <rb_dictionary_get_linear_index+0x30>
   14250:	ldrb	r3, [r4, #24]
   14254:	bic	r3, r3, #1
   14258:	strb	r3, [r4, #24]
   1425c:	ldr	r0, [r0, #24]
   14260:	pop	{r4, pc}
   14264:	ldr	r0, [r0, #24]
   14268:	pop	{r4, pc}
   1426c:	mvn	r0, #0
   14270:	pop	{r4, pc}

00014274 <rb_dictionary_add>:
   14274:	push	{r4, r5, r6, r7, r8, lr}
   14278:	mov	r5, r0
   1427c:	mov	r6, r1
   14280:	mov	r7, r2
   14284:	mov	r1, #28
   14288:	mov	r0, #1
   1428c:	bl	45ec <calloc@plt>
   14290:	subs	r4, r0, #0
   14294:	beq	14340 <rb_dictionary_add+0xcc>
   14298:	str	r6, [r4, #20]
   1429c:	str	r7, [r4, #16]
   142a0:	ldrb	r3, [r5, #24]
   142a4:	orr	r3, r3, #1
   142a8:	strb	r3, [r5, #24]
   142ac:	ldr	r3, [r5, #16]
   142b0:	add	r3, r3, #1
   142b4:	str	r3, [r5, #16]
   142b8:	ldr	r3, [r5, #4]
   142bc:	cmp	r3, #0
   142c0:	beq	14344 <rb_dictionary_add+0xd0>
   142c4:	mov	r1, r6
   142c8:	mov	r0, r5
   142cc:	bl	13d44 <rb_dictionary_retune>
   142d0:	ldr	r2, [r5, #4]
   142d4:	ldr	r3, [r5]
   142d8:	ldr	r1, [r2, #20]
   142dc:	ldr	r0, [r4, #20]
   142e0:	blx	r3
   142e4:	cmp	r0, #0
   142e8:	blt	14368 <rb_dictionary_add+0xf4>
   142ec:	cmp	r0, #0
   142f0:	ble	143b4 <rb_dictionary_add+0x140>
   142f4:	ldr	r3, [r5, #4]
   142f8:	ldr	r2, [r3, #4]
   142fc:	str	r2, [r4, #4]
   14300:	str	r3, [r4]
   14304:	mov	r2, #0
   14308:	str	r2, [r3, #4]
   1430c:	ldr	r3, [r5, #4]
   14310:	ldr	r3, [r3, #12]
   14314:	cmp	r3, r2
   14318:	strne	r4, [r3, #8]
   1431c:	streq	r4, [r5, #12]
   14320:	ldr	r3, [r5, #4]
   14324:	ldr	r2, [r3, #12]
   14328:	str	r2, [r4, #12]
   1432c:	str	r3, [r4, #8]
   14330:	str	r4, [r3, #12]
   14334:	str	r4, [r5, #4]
   14338:	mov	r0, r4
   1433c:	pop	{r4, r5, r6, r7, r8, pc}
   14340:	bl	4988 <rb_outofmemory@plt>
   14344:	str	r3, [r4, #4]
   14348:	str	r3, [r4]
   1434c:	str	r3, [r4, #8]
   14350:	str	r3, [r4, #12]
   14354:	str	r4, [r5, #4]
   14358:	str	r4, [r5, #12]
   1435c:	str	r4, [r5, #8]
   14360:	mov	r0, r4
   14364:	pop	{r4, r5, r6, r7, r8, pc}
   14368:	ldr	r3, [r5, #4]
   1436c:	ldr	r2, [r3]
   14370:	str	r2, [r4]
   14374:	str	r3, [r4, #4]
   14378:	mov	r2, #0
   1437c:	str	r2, [r3]
   14380:	ldr	r3, [r5, #4]
   14384:	ldr	r3, [r3, #8]
   14388:	cmp	r3, r2
   1438c:	strne	r4, [r3, #12]
   14390:	streq	r4, [r5, #8]
   14394:	ldr	r3, [r5, #4]
   14398:	ldr	r2, [r3, #8]
   1439c:	str	r2, [r4, #8]
   143a0:	str	r3, [r4, #12]
   143a4:	str	r4, [r3, #8]
   143a8:	str	r4, [r5, #4]
   143ac:	mov	r0, r4
   143b0:	pop	{r4, r5, r6, r7, r8, pc}
   143b4:	ldr	r3, [r5, #4]
   143b8:	ldr	r2, [r4, #20]
   143bc:	str	r2, [r3, #20]
   143c0:	ldr	r3, [r5, #4]
   143c4:	ldr	r2, [r4, #16]
   143c8:	str	r2, [r3, #16]
   143cc:	ldr	r3, [r5, #16]
   143d0:	sub	r3, r3, #1
   143d4:	str	r3, [r5, #16]
   143d8:	mov	r0, r4
   143dc:	bl	46f4 <free@plt>
   143e0:	ldr	r0, [r5, #4]
   143e4:	pop	{r4, r5, r6, r7, r8, pc}

000143e8 <rb_dictionary_delete>:
   143e8:	push	{r4, r5, r6, lr}
   143ec:	mov	r4, r0
   143f0:	bl	4a30 <rb_dictionary_find@plt>
   143f4:	cmp	r0, #0
   143f8:	beq	144e8 <rb_dictionary_delete+0x100>
   143fc:	ldr	r5, [r0, #16]
   14400:	ldrb	r3, [r4, #24]
   14404:	orr	r3, r3, #1
   14408:	strb	r3, [r4, #24]
   1440c:	ldr	r1, [r4, #4]
   14410:	cmp	r1, #0
   14414:	beq	144dc <rb_dictionary_delete+0xf4>
   14418:	ldr	r3, [r1]
   1441c:	cmp	r3, #0
   14420:	beq	14450 <rb_dictionary_delete+0x68>
   14424:	ldr	r2, [r1, #4]
   14428:	cmp	r2, #0
   1442c:	streq	r3, [r4, #4]
   14430:	beq	14490 <rb_dictionary_delete+0xa8>
   14434:	ldr	ip, [r1, #12]
   14438:	cmp	r2, ip
   1443c:	bne	14460 <rb_dictionary_delete+0x78>
   14440:	str	ip, [r4, #4]
   14444:	ldr	r3, [r1]
   14448:	str	r3, [ip]
   1444c:	b	14490 <rb_dictionary_delete+0xa8>
   14450:	ldr	r3, [r1, #4]
   14454:	str	r3, [r4, #4]
   14458:	b	14490 <rb_dictionary_delete+0xa8>
   1445c:	mov	r2, r3
   14460:	ldr	r3, [r2]
   14464:	cmp	r3, #0
   14468:	cmpne	ip, r3
   1446c:	bne	1445c <rb_dictionary_delete+0x74>
   14470:	ldr	r3, [ip, #4]
   14474:	str	r3, [r2]
   14478:	str	ip, [r4, #4]
   1447c:	ldr	r3, [r1]
   14480:	str	r3, [ip]
   14484:	ldr	r3, [r4, #4]
   14488:	ldr	r2, [r1, #4]
   1448c:	str	r2, [r3, #4]
   14490:	ldr	r3, [r1, #8]
   14494:	cmp	r3, #0
   14498:	ldrne	r2, [r1, #12]
   1449c:	strne	r2, [r3, #12]
   144a0:	ldr	r3, [r4, #8]
   144a4:	cmp	r1, r3
   144a8:	ldreq	r3, [r1, #12]
   144ac:	streq	r3, [r4, #8]
   144b0:	ldr	r3, [r1, #12]
   144b4:	cmp	r3, #0
   144b8:	ldrne	r2, [r1, #8]
   144bc:	strne	r2, [r3, #8]
   144c0:	ldr	r3, [r4, #12]
   144c4:	cmp	r1, r3
   144c8:	ldreq	r3, [r1, #8]
   144cc:	streq	r3, [r4, #12]
   144d0:	ldr	r3, [r4, #16]
   144d4:	sub	r3, r3, #1
   144d8:	str	r3, [r4, #16]
   144dc:	bl	46f4 <free@plt>
   144e0:	mov	r0, r5
   144e4:	pop	{r4, r5, r6, pc}
   144e8:	mov	r5, #0
   144ec:	b	144e0 <rb_dictionary_delete+0xf8>

000144f0 <rb_dictionary_retrieve>:
   144f0:	push	{r4, lr}
   144f4:	bl	4a30 <rb_dictionary_find@plt>
   144f8:	cmp	r0, #0
   144fc:	ldrne	r0, [r0, #16]
   14500:	moveq	r0, #0
   14504:	pop	{r4, pc}

00014508 <rb_dictionary_size>:
   14508:	ldr	r0, [r0, #16]
   1450c:	bx	lr

00014510 <rb_dictionary_stats>:
   14510:	push	{r4, r5, r6, r7, r8, lr}
   14514:	sub	sp, sp, #288	; 0x120
   14518:	mov	r4, r0
   1451c:	mov	r5, r1
   14520:	mov	r6, r2
   14524:	ldr	r3, [r0, #16]
   14528:	cmp	r3, #0
   1452c:	bne	14580 <rb_dictionary_stats+0x70>
   14530:	ldr	r3, [r0, #20]
   14534:	ldr	r2, [pc, #168]	; 145e4 <rb_dictionary_stats+0xd4>
   14538:	add	r2, pc, r2
   1453c:	str	r2, [sp, #16]
   14540:	str	r2, [sp, #12]
   14544:	str	r2, [sp, #8]
   14548:	str	r2, [sp, #4]
   1454c:	ldr	r2, [pc, #148]	; 145e8 <rb_dictionary_stats+0xd8>
   14550:	add	r2, pc, r2
   14554:	str	r2, [sp]
   14558:	ldr	r2, [pc, #140]	; 145ec <rb_dictionary_stats+0xdc>
   1455c:	add	r2, pc, r2
   14560:	mov	r1, #256	; 0x100
   14564:	add	r0, sp, #32
   14568:	bl	4bb0 <snprintf@plt>
   1456c:	mov	r1, r6
   14570:	add	r0, sp, #32
   14574:	blx	r5
   14578:	add	sp, sp, #288	; 0x120
   1457c:	pop	{r4, r5, r6, r7, r8, pc}
   14580:	mov	r1, #0
   14584:	add	r2, sp, #288	; 0x120
   14588:	str	r1, [r2, #-260]!	; 0xfffffefc
   1458c:	ldr	r0, [r0, #4]
   14590:	bl	13e74 <stats_recurse>
   14594:	mov	r8, r0
   14598:	ldr	r7, [r4, #16]
   1459c:	ldr	r4, [r4, #20]
   145a0:	ldr	r3, [sp, #28]
   145a4:	str	r3, [sp, #16]
   145a8:	mov	r1, r7
   145ac:	bl	1540c <__udivsi3>
   145b0:	str	r0, [sp, #12]
   145b4:	str	r8, [sp, #8]
   145b8:	str	r7, [sp, #4]
   145bc:	ldr	r3, [pc, #44]	; 145f0 <rb_dictionary_stats+0xe0>
   145c0:	add	r3, pc, r3
   145c4:	str	r3, [sp]
   145c8:	mov	r3, r4
   145cc:	ldr	r2, [pc, #32]	; 145f4 <rb_dictionary_stats+0xe4>
   145d0:	add	r2, pc, r2
   145d4:	mov	r1, #256	; 0x100
   145d8:	add	r0, sp, #32
   145dc:	bl	4bb0 <snprintf@plt>
   145e0:	b	1456c <rb_dictionary_stats+0x5c>
   145e4:	.word	0x00001d10
   145e8:	.word	0x00002d88
   145ec:	.word	0x00002d84
   145f0:	.word	0x00002d18
   145f4:	.word	0x00002ce4

000145f8 <rb_dictionary_stats_walk>:
   145f8:	push	{r4, r5, r6, lr}
   145fc:	mov	r6, r0
   14600:	mov	r5, r1
   14604:	ldr	r3, [pc, #44]	; 14638 <rb_dictionary_stats_walk+0x40>
   14608:	add	r3, pc, r3
   1460c:	ldr	r4, [r3]
   14610:	cmp	r4, #0
   14614:	popeq	{r4, r5, r6, pc}
   14618:	mov	r2, r5
   1461c:	mov	r1, r6
   14620:	ldr	r0, [r4]
   14624:	bl	49a0 <rb_dictionary_stats@plt>
   14628:	ldr	r4, [r4, #8]
   1462c:	cmp	r4, #0
   14630:	bne	14618 <rb_dictionary_stats_walk+0x20>
   14634:	pop	{r4, r5, r6, pc}
   14638:	.word	0x0003191c

0001463c <stats_recurse>:
   1463c:	push	{r4, r5, r6, r7, r8, lr}
   14640:	ldr	r3, [r2]
   14644:	cmp	r3, r1
   14648:	strlt	r1, [r2]
   1464c:	ldr	r3, [r0]
   14650:	cmn	r3, #1
   14654:	moveq	r5, r1
   14658:	beq	1469c <stats_recurse+0x60>
   1465c:	mov	r8, r2
   14660:	mov	r4, r0
   14664:	add	r6, r0, #64	; 0x40
   14668:	mov	r5, #0
   1466c:	add	r7, r1, #1
   14670:	b	1467c <stats_recurse+0x40>
   14674:	cmp	r4, r6
   14678:	beq	1469c <stats_recurse+0x60>
   1467c:	ldr	r0, [r4, #4]!
   14680:	cmp	r0, #0
   14684:	beq	14674 <stats_recurse+0x38>
   14688:	mov	r2, r8
   1468c:	mov	r1, r7
   14690:	bl	1463c <stats_recurse>
   14694:	add	r5, r5, r0
   14698:	b	14674 <stats_recurse+0x38>
   1469c:	mov	r0, r5
   146a0:	pop	{r4, r5, r6, r7, r8, pc}

000146a4 <rb_radixtree_create>:
   146a4:	push	{r4, r5, r6, r7, r8, lr}
   146a8:	mov	r6, r0
   146ac:	mov	r7, r1
   146b0:	ldr	r5, [pc, #184]	; 14770 <rb_radixtree_create+0xcc>
   146b4:	add	r5, pc, r5
   146b8:	mov	r1, #28
   146bc:	mov	r0, #1
   146c0:	bl	45ec <calloc@plt>
   146c4:	subs	r4, r0, #0
   146c8:	beq	14748 <rb_radixtree_create+0xa4>
   146cc:	str	r7, [r4]
   146d0:	mov	r0, r6
   146d4:	bl	47e4 <strlen@plt>
   146d8:	add	r0, r0, #1
   146dc:	bl	49ac <malloc@plt>
   146e0:	subs	r7, r0, #0
   146e4:	beq	1474c <rb_radixtree_create+0xa8>
   146e8:	mov	r1, r6
   146ec:	mov	r0, r7
   146f0:	bl	488c <strcpy@plt>
   146f4:	str	r7, [r4, #12]
   146f8:	mov	r3, #0
   146fc:	str	r3, [r4, #4]
   14700:	add	r2, r4, #16
   14704:	str	r4, [r4, #16]
   14708:	str	r3, [r4, #20]
   1470c:	ldr	r3, [pc, #96]	; 14774 <rb_radixtree_create+0xd0>
   14710:	ldr	r3, [r5, r3]
   14714:	ldr	r3, [r3]
   14718:	str	r3, [r4, #24]
   1471c:	cmp	r3, #0
   14720:	strne	r2, [r3, #4]
   14724:	beq	14750 <rb_radixtree_create+0xac>
   14728:	ldr	r3, [pc, #68]	; 14774 <rb_radixtree_create+0xd0>
   1472c:	ldr	r3, [r5, r3]
   14730:	str	r2, [r3]
   14734:	ldr	r2, [r3, #8]
   14738:	add	r2, r2, #1
   1473c:	str	r2, [r3, #8]
   14740:	mov	r0, r4
   14744:	pop	{r4, r5, r6, r7, r8, pc}
   14748:	bl	4988 <rb_outofmemory@plt>
   1474c:	bl	4988 <rb_outofmemory@plt>
   14750:	ldr	r3, [pc, #28]	; 14774 <rb_radixtree_create+0xd0>
   14754:	ldr	r3, [r5, r3]
   14758:	ldr	r3, [r3, #4]
   1475c:	cmp	r3, #0
   14760:	ldreq	r3, [pc, #12]	; 14774 <rb_radixtree_create+0xd0>
   14764:	ldreq	r3, [r5, r3]
   14768:	streq	r2, [r3, #4]
   1476c:	b	14728 <rb_radixtree_create+0x84>
   14770:	.word	0x00013944
   14774:	.word	0x000003f4

00014778 <rb_radixtree_foreach>:
   14778:	push	{r4, r5, r6, r7, r8, lr}
   1477c:	ldr	r5, [r0, #4]
   14780:	cmp	r5, #0
   14784:	popeq	{r4, r5, r6, r7, r8, pc}
   14788:	mov	r8, r2
   1478c:	mov	r7, r1
   14790:	ldr	r3, [r5]
   14794:	cmn	r3, #1
   14798:	movne	r3, #0
   1479c:	movne	r6, r3
   147a0:	beq	1482c <rb_radixtree_foreach+0xb4>
   147a4:	add	r2, r5, r3, lsl #2
   147a8:	mov	r4, r3
   147ac:	add	r4, r4, #1
   147b0:	ldr	r0, [r2, #4]!
   147b4:	cmp	r4, #15
   147b8:	cmple	r0, #0
   147bc:	beq	147ac <rb_radixtree_foreach+0x34>
   147c0:	cmp	r0, #0
   147c4:	beq	147f4 <rb_radixtree_foreach+0x7c>
   147c8:	ldr	r2, [r0]
   147cc:	mov	r3, r6
   147d0:	cmn	r2, #1
   147d4:	movne	r5, r0
   147d8:	bne	147a4 <rb_radixtree_foreach+0x2c>
   147dc:	cmp	r7, #0
   147e0:	beq	147f4 <rb_radixtree_foreach+0x7c>
   147e4:	mov	r2, r8
   147e8:	ldr	r1, [r0, #4]
   147ec:	ldr	r0, [r0, #8]
   147f0:	blx	r7
   147f4:	cmp	r4, #15
   147f8:	ble	14848 <rb_radixtree_foreach+0xd0>
   147fc:	ldrb	r3, [r5, #72]	; 0x48
   14800:	ldr	r5, [r5, #68]	; 0x44
   14804:	cmp	r5, #0
   14808:	beq	14844 <rb_radixtree_foreach+0xcc>
   1480c:	add	r3, r3, #1
   14810:	cmp	r3, #15
   14814:	ble	1484c <rb_radixtree_foreach+0xd4>
   14818:	ldrb	r3, [r5, #72]	; 0x48
   1481c:	ldr	r5, [r5, #68]	; 0x44
   14820:	cmp	r5, #0
   14824:	bne	1480c <rb_radixtree_foreach+0x94>
   14828:	pop	{r4, r5, r6, r7, r8, pc}
   1482c:	cmp	r1, #0
   14830:	popeq	{r4, r5, r6, r7, r8, pc}
   14834:	ldr	r1, [r5, #4]
   14838:	ldr	r0, [r5, #8]
   1483c:	blx	r7
   14840:	pop	{r4, r5, r6, r7, r8, pc}
   14844:	pop	{r4, r5, r6, r7, r8, pc}
   14848:	mov	r3, r4
   1484c:	cmp	r5, #0
   14850:	bne	147a4 <rb_radixtree_foreach+0x2c>
   14854:	pop	{r4, r5, r6, r7, r8, pc}

00014858 <rb_radixtree_search>:
   14858:	push	{r4, r5, r6, r7, r8, lr}
   1485c:	ldr	r5, [r0, #4]
   14860:	cmp	r5, #0
   14864:	beq	14928 <rb_radixtree_search+0xd0>
   14868:	mov	r7, r2
   1486c:	mov	r6, r1
   14870:	ldr	r3, [r5]
   14874:	cmn	r3, #1
   14878:	movne	r4, #0
   1487c:	bne	148d4 <rb_radixtree_search+0x7c>
   14880:	cmp	r1, #0
   14884:	beq	14930 <rb_radixtree_search+0xd8>
   14888:	ldr	r1, [r5, #4]
   1488c:	ldr	r0, [r5, #8]
   14890:	blx	r6
   14894:	pop	{r4, r5, r6, r7, r8, pc}
   14898:	cmp	r4, #15
   1489c:	movle	r3, r5
   148a0:	ble	148d0 <rb_radixtree_search+0x78>
   148a4:	ldrb	r4, [r5, #72]	; 0x48
   148a8:	ldr	r3, [r5, #68]	; 0x44
   148ac:	cmp	r3, #0
   148b0:	beq	148d0 <rb_radixtree_search+0x78>
   148b4:	add	r4, r4, #1
   148b8:	cmp	r4, #15
   148bc:	ble	148d0 <rb_radixtree_search+0x78>
   148c0:	ldrb	r4, [r3, #72]	; 0x48
   148c4:	ldr	r3, [r3, #68]	; 0x44
   148c8:	cmp	r3, #0
   148cc:	bne	148b4 <rb_radixtree_search+0x5c>
   148d0:	mov	r5, r3
   148d4:	add	r2, r5, r4, lsl #2
   148d8:	add	r4, r4, #1
   148dc:	ldr	r3, [r2, #4]!
   148e0:	cmp	r4, #15
   148e4:	cmple	r3, #0
   148e8:	beq	148d8 <rb_radixtree_search+0x80>
   148ec:	cmp	r3, #0
   148f0:	beq	14898 <rb_radixtree_search+0x40>
   148f4:	ldr	r2, [r3]
   148f8:	cmn	r2, #1
   148fc:	movne	r4, #0
   14900:	bne	148d0 <rb_radixtree_search+0x78>
   14904:	cmp	r6, #0
   14908:	beq	14898 <rb_radixtree_search+0x40>
   1490c:	mov	r2, r7
   14910:	ldr	r1, [r3, #4]
   14914:	ldr	r0, [r3, #8]
   14918:	blx	r6
   1491c:	cmp	r0, #0
   14920:	beq	14898 <rb_radixtree_search+0x40>
   14924:	pop	{r4, r5, r6, r7, r8, pc}
   14928:	mov	r0, #0
   1492c:	pop	{r4, r5, r6, r7, r8, pc}
   14930:	mov	r0, #0
   14934:	pop	{r4, r5, r6, r7, r8, pc}

00014938 <rb_radixtree_foreach_cur>:
   14938:	cmp	r0, #0
   1493c:	beq	14950 <rb_radixtree_foreach_cur+0x18>
   14940:	ldr	r0, [r1, #8]
   14944:	cmp	r0, #0
   14948:	ldrne	r0, [r0, #4]
   1494c:	bx	lr
   14950:	mov	r0, #0
   14954:	bx	lr

00014958 <rb_radixtree_foreach_next>:
   14958:	cmp	r0, #0
   1495c:	bxeq	lr
   14960:	ldr	r3, [r1, #8]
   14964:	cmp	r3, #0
   14968:	bxeq	lr
   1496c:	push	{r4, r5, r6, lr}
   14970:	ldr	lr, [r1, #12]
   14974:	str	lr, [r1, #8]
   14978:	cmp	lr, #0
   1497c:	popeq	{r4, r5, r6, pc}
   14980:	ldr	r2, [lr, #12]
   14984:	ldrb	r0, [lr, #16]
   14988:	b	149c4 <rb_radixtree_foreach_next+0x6c>
   1498c:	cmp	r3, #15
   14990:	ble	14a30 <rb_radixtree_foreach_next+0xd8>
   14994:	ldrb	r0, [r2, #72]	; 0x48
   14998:	ldr	r2, [r2, #68]	; 0x44
   1499c:	cmp	r2, #0
   149a0:	beq	149c0 <rb_radixtree_foreach_next+0x68>
   149a4:	add	r0, r0, #1
   149a8:	cmp	r0, #15
   149ac:	ble	14a34 <rb_radixtree_foreach_next+0xdc>
   149b0:	ldrb	r0, [r2, #72]	; 0x48
   149b4:	ldr	r2, [r2, #68]	; 0x44
   149b8:	cmp	r2, #0
   149bc:	bne	149a4 <rb_radixtree_foreach_next+0x4c>
   149c0:	mov	r2, #0
   149c4:	cmp	r2, #0
   149c8:	beq	14a3c <rb_radixtree_foreach_next+0xe4>
   149cc:	add	ip, r2, r0, lsl #2
   149d0:	mov	r3, r0
   149d4:	add	r3, r3, #1
   149d8:	ldr	r4, [ip, #4]!
   149dc:	cmp	r3, #15
   149e0:	cmple	r4, #0
   149e4:	beq	149d4 <rb_radixtree_foreach_next+0x7c>
   149e8:	cmp	r4, #0
   149ec:	beq	1498c <rb_radixtree_foreach_next+0x34>
   149f0:	ldr	ip, [r4]
   149f4:	mov	r0, #0
   149f8:	cmn	ip, #1
   149fc:	movne	r2, r4
   14a00:	bne	149cc <rb_radixtree_foreach_next+0x74>
   14a04:	cmp	lr, r4
   14a08:	beq	1498c <rb_radixtree_foreach_next+0x34>
   14a0c:	mov	r5, r1
   14a10:	ldr	r1, [lr, #8]
   14a14:	ldr	r0, [r4, #8]
   14a18:	bl	4cdc <strcmp@plt>
   14a1c:	cmp	r0, #0
   14a20:	movlt	r3, #0
   14a24:	strlt	r3, [r5, #12]
   14a28:	strge	r4, [r5, #12]
   14a2c:	pop	{r4, r5, r6, pc}
   14a30:	mov	r0, r3
   14a34:	cmp	r2, #0
   14a38:	bne	149cc <rb_radixtree_foreach_next+0x74>
   14a3c:	mov	r3, #0
   14a40:	str	r3, [r1, #12]
   14a44:	pop	{r4, r5, r6, pc}

00014a48 <rb_radixtree_foreach_start>:
   14a48:	cmp	r0, #0
   14a4c:	bxeq	lr
   14a50:	push	{r4, lr}
   14a54:	ldr	lr, [r0, #4]
   14a58:	cmp	lr, #0
   14a5c:	bne	14a74 <rb_radixtree_foreach_start+0x2c>
   14a60:	mov	r3, #0
   14a64:	str	r3, [r1, #12]
   14a68:	str	r3, [r1, #8]
   14a6c:	pop	{r4, pc}
   14a70:	mov	lr, r2
   14a74:	mov	ip, lr
   14a78:	ldr	r4, [ip], #64	; 0x40
   14a7c:	cmn	r4, #1
   14a80:	beq	14aac <rb_radixtree_foreach_start+0x64>
   14a84:	ldr	r2, [lr, #4]
   14a88:	cmp	r2, #0
   14a8c:	bne	14a70 <rb_radixtree_foreach_start+0x28>
   14a90:	add	r3, lr, #4
   14a94:	ldr	r2, [r3, #4]!
   14a98:	cmp	r2, #0
   14a9c:	bne	14a70 <rb_radixtree_foreach_start+0x28>
   14aa0:	cmp	r3, ip
   14aa4:	bne	14a94 <rb_radixtree_foreach_start+0x4c>
   14aa8:	b	14a7c <rb_radixtree_foreach_start+0x34>
   14aac:	str	lr, [r1, #12]
   14ab0:	str	lr, [r1, #8]
   14ab4:	cmp	lr, #0
   14ab8:	beq	14ac4 <rb_radixtree_foreach_start+0x7c>
   14abc:	bl	4448 <rb_radixtree_foreach_next@plt>
   14ac0:	pop	{r4, pc}
   14ac4:	pop	{r4, pc}

00014ac8 <rb_radixtree_elem_find>:
   14ac8:	push	{r4, r5, r6, r7, r8, r9, lr}
   14acc:	sub	sp, sp, #260	; 0x104
   14ad0:	mov	r8, r0
   14ad4:	mov	r5, r1
   14ad8:	mov	r7, r2
   14adc:	mov	r0, r1
   14ae0:	bl	47e4 <strlen@plt>
   14ae4:	mov	r4, r0
   14ae8:	ldr	r9, [r8]
   14aec:	cmp	r9, #0
   14af0:	beq	14b58 <rb_radixtree_elem_find+0x90>
   14af4:	cmp	r0, #255	; 0xff
   14af8:	ble	14b38 <rb_radixtree_elem_find+0x70>
   14afc:	add	r0, r0, #1
   14b00:	bl	49ac <malloc@plt>
   14b04:	subs	r6, r0, #0
   14b08:	beq	14b34 <rb_radixtree_elem_find+0x6c>
   14b0c:	mov	r1, r5
   14b10:	mov	r0, r6
   14b14:	bl	488c <strcpy@plt>
   14b18:	mov	r0, r6
   14b1c:	blx	r9
   14b20:	ldr	r8, [r8, #4]
   14b24:	cmp	r8, #0
   14b28:	movne	r5, r6
   14b2c:	bne	14b68 <rb_radixtree_elem_find+0xa0>
   14b30:	b	14bfc <rb_radixtree_elem_find+0x134>
   14b34:	bl	4988 <rb_outofmemory@plt>
   14b38:	mov	r2, #256	; 0x100
   14b3c:	mov	r1, r5
   14b40:	mov	r5, sp
   14b44:	mov	r0, sp
   14b48:	bl	46a0 <rb_strlcpy@plt>
   14b4c:	ldr	r3, [r8]
   14b50:	mov	r0, sp
   14b54:	blx	r3
   14b58:	ldr	r8, [r8, #4]
   14b5c:	cmp	r8, #0
   14b60:	movne	r6, #0
   14b64:	beq	14c04 <rb_radixtree_elem_find+0x13c>
   14b68:	ldr	r3, [r8]
   14b6c:	cmn	r3, #1
   14b70:	beq	14bc8 <rb_radixtree_elem_find+0x100>
   14b74:	mov	r1, #0
   14b78:	b	14b98 <rb_radixtree_elem_find+0xd0>
   14b7c:	add	r3, r8, r3, lsl #2
   14b80:	ldr	r8, [r3, #4]
   14b84:	cmp	r8, #0
   14b88:	beq	14bf4 <rb_radixtree_elem_find+0x12c>
   14b8c:	ldr	r3, [r8]
   14b90:	cmn	r3, #1
   14b94:	beq	14bc8 <rb_radixtree_elem_find+0x100>
   14b98:	add	r2, r3, r3, lsr #31
   14b9c:	cmp	r4, r2, asr #1
   14ba0:	movle	r3, r1
   14ba4:	ble	14b7c <rb_radixtree_elem_find+0xb4>
   14ba8:	ldrb	r2, [r5, r2, asr #1]
   14bac:	and	r3, r3, #1
   14bb0:	cmp	r3, #0
   14bb4:	moveq	r3, #4
   14bb8:	movne	r3, #0
   14bbc:	asr	r3, r2, r3
   14bc0:	and	r3, r3, #15
   14bc4:	b	14b7c <rb_radixtree_elem_find+0xb4>
   14bc8:	adds	r3, r8, #0
   14bcc:	movne	r3, #1
   14bd0:	cmp	r7, #0
   14bd4:	movne	r3, #0
   14bd8:	cmp	r3, #0
   14bdc:	beq	14bf4 <rb_radixtree_elem_find+0x12c>
   14be0:	mov	r1, r5
   14be4:	ldr	r0, [r8, #8]
   14be8:	bl	4cdc <strcmp@plt>
   14bec:	cmp	r0, #0
   14bf0:	movne	r8, #0
   14bf4:	cmp	r6, #0
   14bf8:	beq	14c04 <rb_radixtree_elem_find+0x13c>
   14bfc:	mov	r0, r6
   14c00:	bl	46f4 <free@plt>
   14c04:	mov	r0, r8
   14c08:	add	sp, sp, #260	; 0x104
   14c0c:	pop	{r4, r5, r6, r7, r8, r9, pc}

00014c10 <rb_radixtree_foreach_start_from>:
   14c10:	push	{r4, r5, r6, lr}
   14c14:	mov	r5, r0
   14c18:	mov	r4, r1
   14c1c:	subs	r1, r2, #0
   14c20:	beq	14c48 <rb_radixtree_foreach_start_from+0x38>
   14c24:	mov	r3, #0
   14c28:	str	r3, [r4, #8]
   14c2c:	mov	r2, #1
   14c30:	bl	4b74 <rb_radixtree_elem_find@plt>
   14c34:	str	r0, [r4, #12]
   14c38:	mov	r1, r4
   14c3c:	mov	r0, r5
   14c40:	bl	4448 <rb_radixtree_foreach_next@plt>
   14c44:	pop	{r4, r5, r6, pc}
   14c48:	mov	r1, r4
   14c4c:	bl	440c <rb_radixtree_foreach_start@plt>
   14c50:	pop	{r4, r5, r6, pc}

00014c54 <rb_radixtree_elem_add>:
   14c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c58:	sub	sp, sp, #20
   14c5c:	str	r0, [sp, #4]
   14c60:	mov	r4, r1
   14c64:	str	r2, [sp, #8]
   14c68:	mov	r0, r1
   14c6c:	bl	47e4 <strlen@plt>
   14c70:	mov	r7, r0
   14c74:	add	r0, r0, #1
   14c78:	bl	49ac <malloc@plt>
   14c7c:	subs	r9, r0, #0
   14c80:	beq	14cd4 <rb_radixtree_elem_add+0x80>
   14c84:	mov	r1, r4
   14c88:	mov	r0, r9
   14c8c:	bl	488c <strcpy@plt>
   14c90:	ldr	r3, [sp, #4]
   14c94:	ldr	r3, [r3]
   14c98:	cmp	r3, #0
   14c9c:	beq	14ca8 <rb_radixtree_elem_add+0x54>
   14ca0:	mov	r0, r9
   14ca4:	blx	r3
   14ca8:	ldr	r3, [sp, #4]
   14cac:	ldr	r3, [r3, #4]
   14cb0:	str	r3, [sp, #12]
   14cb4:	mov	r5, r3
   14cb8:	cmp	r3, #0
   14cbc:	beq	14ffc <rb_radixtree_elem_add+0x3a8>
   14cc0:	ldr	r3, [r3]
   14cc4:	cmn	r3, #1
   14cc8:	beq	14fac <rb_radixtree_elem_add+0x358>
   14ccc:	mov	r2, #0
   14cd0:	b	14cf8 <rb_radixtree_elem_add+0xa4>
   14cd4:	bl	4988 <rb_outofmemory@plt>
   14cd8:	add	r3, r5, r4, lsl #2
   14cdc:	ldr	r6, [r3, #4]
   14ce0:	cmp	r6, #0
   14ce4:	beq	14fe8 <rb_radixtree_elem_add+0x394>
   14ce8:	ldr	r3, [r6]
   14cec:	cmn	r3, #1
   14cf0:	beq	14fb8 <rb_radixtree_elem_add+0x364>
   14cf4:	mov	r5, r6
   14cf8:	add	r1, r3, r3, lsr #31
   14cfc:	cmp	r7, r1, asr #1
   14d00:	movle	r4, r2
   14d04:	ble	14cd8 <rb_radixtree_elem_add+0x84>
   14d08:	ldrb	r4, [r9, r1, asr #1]
   14d0c:	and	r3, r3, #1
   14d10:	cmp	r3, #0
   14d14:	moveq	r3, #4
   14d18:	movne	r3, #0
   14d1c:	asr	r3, r4, r3
   14d20:	and	r4, r3, #15
   14d24:	b	14cd8 <rb_radixtree_elem_add+0x84>
   14d28:	mov	r0, r9
   14d2c:	bl	46f4 <free@plt>
   14d30:	mov	r0, #0
   14d34:	b	14ef0 <rb_radixtree_elem_add+0x29c>
   14d38:	mov	r6, r2
   14d3c:	mov	r1, r6
   14d40:	ldr	r0, [r1], #64	; 0x40
   14d44:	cmn	r0, #1
   14d48:	beq	14d74 <rb_radixtree_elem_add+0x120>
   14d4c:	ldr	r2, [r6, #4]
   14d50:	cmp	r2, #0
   14d54:	bne	14d38 <rb_radixtree_elem_add+0xe4>
   14d58:	add	r3, r6, #4
   14d5c:	ldr	r2, [r3, #4]!
   14d60:	cmp	r2, #0
   14d64:	bne	14d38 <rb_radixtree_elem_add+0xe4>
   14d68:	cmp	r3, r1
   14d6c:	bne	14d5c <rb_radixtree_elem_add+0x108>
   14d70:	b	14d44 <rb_radixtree_elem_add+0xf0>
   14d74:	mov	r0, #1
   14d78:	b	14fd4 <rb_radixtree_elem_add+0x380>
   14d7c:	bl	4988 <rb_outofmemory@plt>
   14d80:	add	r7, r7, #1
   14d84:	add	r2, r7, r7, lsr #31
   14d88:	asr	sl, r2, #1
   14d8c:	add	fp, r9, sl
   14d90:	ldrb	r3, [r9, r2, asr #1]
   14d94:	and	r8, r7, #1
   14d98:	cmp	r8, #0
   14d9c:	moveq	r8, #4
   14da0:	movne	r8, #0
   14da4:	ldrb	r2, [r1, r2, asr #1]
   14da8:	asr	r3, r3, r8
   14dac:	eor	r3, r3, r2, asr r8
   14db0:	tst	r3, #15
   14db4:	beq	14d80 <rb_radixtree_elem_add+0x12c>
   14db8:	cmp	r0, #0
   14dbc:	beq	14ef8 <rb_radixtree_elem_add+0x2a4>
   14dc0:	ldr	r3, [r5]
   14dc4:	cmp	r7, r3
   14dc8:	bge	14ef8 <rb_radixtree_elem_add+0x2a4>
   14dcc:	ldrb	r4, [r5, #72]	; 0x48
   14dd0:	ldr	r5, [r5, #68]	; 0x44
   14dd4:	cmp	r5, #0
   14dd8:	beq	14df4 <rb_radixtree_elem_add+0x1a0>
   14ddc:	ldr	r3, [r5]
   14de0:	cmp	r7, r3
   14de4:	blt	14dcc <rb_radixtree_elem_add+0x178>
   14de8:	ldr	r3, [r5]
   14dec:	cmp	r7, r3
   14df0:	ble	14e88 <rb_radixtree_elem_add+0x234>
   14df4:	mov	r1, #76	; 0x4c
   14df8:	mov	r0, #1
   14dfc:	bl	45ec <calloc@plt>
   14e00:	cmp	r0, #0
   14e04:	beq	14f04 <rb_radixtree_elem_add+0x2b0>
   14e08:	str	r7, [r0]
   14e0c:	str	r5, [r0, #68]	; 0x44
   14e10:	strb	r4, [r0, #72]	; 0x48
   14e14:	mov	r3, r0
   14e18:	add	r1, r0, #64	; 0x40
   14e1c:	mov	r2, #0
   14e20:	str	r2, [r3, #4]!
   14e24:	cmp	r3, r1
   14e28:	bne	14e20 <rb_radixtree_elem_add+0x1cc>
   14e2c:	cmp	r5, #0
   14e30:	beq	14f08 <rb_radixtree_elem_add+0x2b4>
   14e34:	add	r4, r5, r4, lsl #2
   14e38:	ldr	r2, [r4, #4]
   14e3c:	ldr	r3, [r6, #8]
   14e40:	ldrb	r3, [r3, sl]
   14e44:	asr	r3, r3, r8
   14e48:	and	r3, r3, #15
   14e4c:	add	r3, r0, r3, lsl #2
   14e50:	str	r2, [r3, #4]
   14e54:	ldr	r3, [r4, #4]
   14e58:	ldr	r2, [r3]
   14e5c:	cmn	r2, #1
   14e60:	beq	14f88 <rb_radixtree_elem_add+0x334>
   14e64:	str	r0, [r3, #68]	; 0x44
   14e68:	ldr	r2, [r4, #4]
   14e6c:	ldr	r3, [r6, #8]
   14e70:	ldrb	r3, [r3, sl]
   14e74:	asr	r3, r3, r8
   14e78:	and	r3, r3, #15
   14e7c:	strb	r3, [r2, #72]	; 0x48
   14e80:	str	r0, [r4, #4]
   14e84:	mov	r5, r0
   14e88:	ldrb	r4, [fp]
   14e8c:	asr	r4, r4, r8
   14e90:	and	r4, r4, #15
   14e94:	mov	r1, #20
   14e98:	mov	r0, #1
   14e9c:	bl	45ec <calloc@plt>
   14ea0:	cmp	r0, #0
   14ea4:	beq	14fa8 <rb_radixtree_elem_add+0x354>
   14ea8:	add	r3, r5, r4, lsl #2
   14eac:	str	r0, [r3, #4]
   14eb0:	mvn	r2, #0
   14eb4:	str	r2, [r0]
   14eb8:	ldr	r2, [r3, #4]
   14ebc:	ldr	r1, [sp, #8]
   14ec0:	str	r1, [r2, #4]
   14ec4:	ldr	r2, [r3, #4]
   14ec8:	str	r9, [r2, #8]
   14ecc:	ldr	r2, [r3, #4]
   14ed0:	str	r5, [r2, #12]
   14ed4:	ldr	r2, [r3, #4]
   14ed8:	strb	r4, [r2, #16]
   14edc:	ldr	r1, [sp, #4]
   14ee0:	ldr	r2, [r1, #8]
   14ee4:	add	r2, r2, #1
   14ee8:	str	r2, [r1, #8]
   14eec:	ldr	r0, [r3, #4]
   14ef0:	add	sp, sp, #20
   14ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ef8:	cmp	r5, #0
   14efc:	bne	14de8 <rb_radixtree_elem_add+0x194>
   14f00:	b	14df4 <rb_radixtree_elem_add+0x1a0>
   14f04:	bl	4988 <rb_outofmemory@plt>
   14f08:	ldr	r3, [r6, #8]
   14f0c:	ldrb	r3, [r3, sl]
   14f10:	asr	r3, r3, r8
   14f14:	and	r3, r3, #15
   14f18:	add	r3, r0, r3, lsl #2
   14f1c:	ldr	r2, [sp, #12]
   14f20:	str	r2, [r3, #4]
   14f24:	ldr	r3, [r2]
   14f28:	cmn	r3, #1
   14f2c:	beq	14f64 <rb_radixtree_elem_add+0x310>
   14f30:	ldr	r3, [sp, #12]
   14f34:	str	r0, [r3, #68]	; 0x44
   14f38:	ldr	r3, [sp, #4]
   14f3c:	ldr	r2, [r3, #4]
   14f40:	ldr	r3, [r6, #8]
   14f44:	ldrb	r3, [r3, sl]
   14f48:	asr	r3, r3, r8
   14f4c:	and	r3, r3, #15
   14f50:	strb	r3, [r2, #72]	; 0x48
   14f54:	ldr	r3, [sp, #4]
   14f58:	str	r0, [r3, #4]
   14f5c:	mov	r5, r0
   14f60:	b	14e88 <rb_radixtree_elem_add+0x234>
   14f64:	str	r0, [r2, #12]
   14f68:	ldr	r3, [sp, #4]
   14f6c:	ldr	r2, [r3, #4]
   14f70:	ldr	r3, [r6, #8]
   14f74:	ldrb	r3, [r3, sl]
   14f78:	asr	r3, r3, r8
   14f7c:	and	r3, r3, #15
   14f80:	strb	r3, [r2, #16]
   14f84:	b	14f54 <rb_radixtree_elem_add+0x300>
   14f88:	str	r0, [r3, #12]
   14f8c:	ldr	r2, [r4, #4]
   14f90:	ldr	r3, [r6, #8]
   14f94:	ldrb	r3, [r3, sl]
   14f98:	asr	r3, r3, r8
   14f9c:	and	r3, r3, #15
   14fa0:	strb	r3, [r2, #16]
   14fa4:	b	14e80 <rb_radixtree_elem_add+0x22c>
   14fa8:	bl	4988 <rb_outofmemory@plt>
   14fac:	ldr	r6, [sp, #12]
   14fb0:	mov	r4, #18
   14fb4:	mov	r5, #0
   14fb8:	mov	r1, r9
   14fbc:	ldr	r0, [r6, #8]
   14fc0:	bl	4cdc <strcmp@plt>
   14fc4:	cmp	r0, #0
   14fc8:	beq	14d28 <rb_radixtree_elem_add+0xd4>
   14fcc:	adds	r0, r5, #0
   14fd0:	movne	r0, #1
   14fd4:	cmp	r6, #0
   14fd8:	beq	15004 <rb_radixtree_elem_add+0x3b0>
   14fdc:	ldr	r1, [r6, #8]
   14fe0:	mov	r7, #0
   14fe4:	b	14d84 <rb_radixtree_elem_add+0x130>
   14fe8:	cmp	r5, #0
   14fec:	streq	r5, [sp, #12]
   14ff0:	beq	15000 <rb_radixtree_elem_add+0x3ac>
   14ff4:	mov	r6, r5
   14ff8:	b	14d3c <rb_radixtree_elem_add+0xe8>
   14ffc:	mov	r4, #18
   15000:	ldr	r5, [sp, #12]
   15004:	mov	r1, #20
   15008:	mov	r0, #1
   1500c:	bl	45ec <calloc@plt>
   15010:	cmp	r0, #0
   15014:	beq	14d7c <rb_radixtree_elem_add+0x128>
   15018:	ldr	r2, [sp, #4]
   1501c:	str	r0, [r2, #4]
   15020:	mvn	r3, #0
   15024:	str	r3, [r0]
   15028:	ldr	r3, [sp, #8]
   1502c:	str	r3, [r0, #4]
   15030:	str	r9, [r0, #8]
   15034:	str	r5, [r0, #12]
   15038:	strb	r4, [r0, #16]
   1503c:	ldr	r3, [r2, #8]
   15040:	add	r3, r3, #1
   15044:	str	r3, [r2, #8]
   15048:	b	14ef0 <rb_radixtree_elem_add+0x29c>

0001504c <rb_radixtree_add>:
   1504c:	push	{r4, lr}
   15050:	bl	4718 <rb_radixtree_elem_add@plt>
   15054:	adds	r0, r0, #0
   15058:	movne	r0, #1
   1505c:	pop	{r4, pc}

00015060 <rb_radixtree_elem_delete>:
   15060:	push	{r4, r5, r6, r7, r8, lr}
   15064:	mov	r5, r0
   15068:	mov	r6, r1
   1506c:	ldrb	r7, [r1, #16]
   15070:	ldr	r4, [r1, #12]
   15074:	ldr	r0, [r1, #8]
   15078:	cmp	r0, #0
   1507c:	beq	15084 <rb_radixtree_elem_delete+0x24>
   15080:	bl	46f4 <free@plt>
   15084:	cmp	r6, #0
   15088:	beq	15094 <rb_radixtree_elem_delete+0x34>
   1508c:	mov	r0, r6
   15090:	bl	46f4 <free@plt>
   15094:	cmp	r4, #0
   15098:	beq	1513c <rb_radixtree_elem_delete+0xdc>
   1509c:	add	r7, r4, r7, lsl #2
   150a0:	mov	r3, #0
   150a4:	str	r3, [r7, #4]
   150a8:	mov	r2, r4
   150ac:	mvn	r0, #0
   150b0:	b	150c0 <rb_radixtree_elem_delete+0x60>
   150b4:	add	r3, r3, #1
   150b8:	cmp	r3, #16
   150bc:	beq	150dc <rb_radixtree_elem_delete+0x7c>
   150c0:	ldr	r1, [r2, #4]!
   150c4:	cmp	r1, #0
   150c8:	beq	150b4 <rb_radixtree_elem_delete+0x54>
   150cc:	cmn	r0, #1
   150d0:	moveq	r0, r3
   150d4:	mvnne	r0, #1
   150d8:	b	150b4 <rb_radixtree_elem_delete+0x54>
   150dc:	cmp	r0, #0
   150e0:	blt	15124 <rb_radixtree_elem_delete+0xc4>
   150e4:	add	r0, r4, r0, lsl #2
   150e8:	ldr	r3, [r0, #4]
   150ec:	ldrb	r1, [r4, #72]	; 0x48
   150f0:	ldr	r2, [r4, #68]	; 0x44
   150f4:	cmp	r2, #0
   150f8:	addne	r0, r2, r1, lsl #2
   150fc:	strne	r3, [r0, #4]
   15100:	streq	r3, [r5, #4]
   15104:	ldr	r0, [r3]
   15108:	cmn	r0, #1
   1510c:	streq	r2, [r3, #12]
   15110:	strbeq	r1, [r3, #16]
   15114:	strne	r2, [r3, #68]	; 0x44
   15118:	strbne	r1, [r3, #72]	; 0x48
   1511c:	mov	r0, r4
   15120:	bl	46f4 <free@plt>
   15124:	ldr	r3, [r5, #8]
   15128:	sub	r3, r3, #1
   1512c:	str	r3, [r5, #8]
   15130:	cmp	r3, #0
   15134:	streq	r3, [r5, #4]
   15138:	pop	{r4, r5, r6, r7, r8, pc}
   1513c:	mov	r3, #0
   15140:	str	r3, [r5, #4]
   15144:	b	15124 <rb_radixtree_elem_delete+0xc4>

00015148 <rb_radixtree_delete>:
   15148:	push	{r4, r5, r6, lr}
   1514c:	mov	r5, r0
   15150:	mov	r2, #0
   15154:	bl	4b74 <rb_radixtree_elem_find@plt>
   15158:	subs	r1, r0, #0
   1515c:	beq	15174 <rb_radixtree_delete+0x2c>
   15160:	ldr	r4, [r1, #4]
   15164:	mov	r0, r5
   15168:	bl	43ac <rb_radixtree_elem_delete@plt>
   1516c:	mov	r0, r4
   15170:	pop	{r4, r5, r6, pc}
   15174:	mov	r4, #0
   15178:	b	1516c <rb_radixtree_delete+0x24>

0001517c <rb_radixtree_destroy>:
   1517c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15180:	sub	sp, sp, #44	; 0x2c
   15184:	mov	r4, r0
   15188:	mov	r7, r1
   1518c:	mov	r8, r2
   15190:	ldr	r9, [pc, #244]	; 1528c <rb_radixtree_destroy+0x110>
   15194:	add	r9, pc, r9
   15198:	mov	r1, sp
   1519c:	bl	440c <rb_radixtree_foreach_start@plt>
   151a0:	mov	r6, sp
   151a4:	b	151c0 <rb_radixtree_destroy+0x44>
   151a8:	ldr	r1, [r5, #8]
   151ac:	mov	r0, r4
   151b0:	bl	4cc4 <rb_radixtree_delete@plt>
   151b4:	mov	r1, r6
   151b8:	mov	r0, r4
   151bc:	bl	4448 <rb_radixtree_foreach_next@plt>
   151c0:	mov	r1, r6
   151c4:	mov	r0, r4
   151c8:	bl	47a8 <rb_radixtree_foreach_cur@plt>
   151cc:	cmp	r0, #0
   151d0:	beq	151f4 <rb_radixtree_destroy+0x78>
   151d4:	ldr	r5, [sp, #8]
   151d8:	cmp	r7, #0
   151dc:	beq	151a8 <rb_radixtree_destroy+0x2c>
   151e0:	mov	r2, r8
   151e4:	ldr	r1, [r5, #4]
   151e8:	ldr	r0, [r5, #8]
   151ec:	blx	r7
   151f0:	b	151a8 <rb_radixtree_destroy+0x2c>
   151f4:	ldr	r3, [r4, #24]
   151f8:	cmp	r3, #0
   151fc:	beq	15264 <rb_radixtree_destroy+0xe8>
   15200:	ldr	r2, [r4, #20]
   15204:	str	r2, [r3, #4]
   15208:	ldr	r3, [r4, #20]
   1520c:	cmp	r3, #0
   15210:	beq	15278 <rb_radixtree_destroy+0xfc>
   15214:	ldr	r2, [r4, #24]
   15218:	str	r2, [r3, #8]
   1521c:	mov	r3, #0
   15220:	str	r3, [r4, #20]
   15224:	str	r3, [r4, #24]
   15228:	ldr	r3, [pc, #96]	; 15290 <rb_radixtree_destroy+0x114>
   1522c:	ldr	r2, [r9, r3]
   15230:	ldr	r3, [r2, #8]
   15234:	sub	r3, r3, #1
   15238:	str	r3, [r2, #8]
   1523c:	ldr	r0, [r4, #12]
   15240:	cmp	r0, #0
   15244:	beq	1524c <rb_radixtree_destroy+0xd0>
   15248:	bl	46f4 <free@plt>
   1524c:	cmp	r4, #0
   15250:	beq	1525c <rb_radixtree_destroy+0xe0>
   15254:	mov	r0, r4
   15258:	bl	46f4 <free@plt>
   1525c:	add	sp, sp, #44	; 0x2c
   15260:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15264:	ldr	r3, [pc, #36]	; 15290 <rb_radixtree_destroy+0x114>
   15268:	ldr	r3, [r9, r3]
   1526c:	ldr	r2, [r4, #20]
   15270:	str	r2, [r3, #4]
   15274:	b	15208 <rb_radixtree_destroy+0x8c>
   15278:	ldr	r3, [pc, #16]	; 15290 <rb_radixtree_destroy+0x114>
   1527c:	ldr	r3, [r9, r3]
   15280:	ldr	r2, [r4, #24]
   15284:	str	r2, [r3]
   15288:	b	1521c <rb_radixtree_destroy+0xa0>
   1528c:	.word	0x00012e64
   15290:	.word	0x000003f4

00015294 <rb_radixtree_retrieve>:
   15294:	push	{r4, lr}
   15298:	mov	r2, #0
   1529c:	bl	4b74 <rb_radixtree_elem_find@plt>
   152a0:	cmp	r0, #0
   152a4:	ldrne	r0, [r0, #4]
   152a8:	moveq	r0, #0
   152ac:	pop	{r4, pc}

000152b0 <rb_radixtree_elem_get_key>:
   152b0:	ldr	r0, [r0, #8]
   152b4:	bx	lr

000152b8 <rb_radixtree_elem_set_data>:
   152b8:	str	r1, [r0, #4]
   152bc:	bx	lr

000152c0 <rb_radixtree_elem_get_data>:
   152c0:	ldr	r0, [r0, #4]
   152c4:	bx	lr

000152c8 <rb_radixtree_size>:
   152c8:	ldr	r0, [r0, #8]
   152cc:	bx	lr

000152d0 <rb_radixtree_stats>:
   152d0:	push	{r4, r5, r6, r7, r8, lr}
   152d4:	sub	sp, sp, #288	; 0x120
   152d8:	mov	r4, r0
   152dc:	mov	r5, r1
   152e0:	mov	r6, r2
   152e4:	mov	r3, #0
   152e8:	str	r3, [sp, #28]
   152ec:	ldr	r3, [r0, #8]
   152f0:	cmp	r3, #0
   152f4:	bne	15348 <rb_radixtree_stats+0x78>
   152f8:	ldr	r3, [r0, #12]
   152fc:	ldr	r2, [pc, #164]	; 153a8 <rb_radixtree_stats+0xd8>
   15300:	add	r2, pc, r2
   15304:	str	r2, [sp, #16]
   15308:	str	r2, [sp, #12]
   1530c:	str	r2, [sp, #8]
   15310:	str	r2, [sp, #4]
   15314:	ldr	r2, [pc, #144]	; 153ac <rb_radixtree_stats+0xdc>
   15318:	add	r2, pc, r2
   1531c:	str	r2, [sp]
   15320:	ldr	r2, [pc, #136]	; 153b0 <rb_radixtree_stats+0xe0>
   15324:	add	r2, pc, r2
   15328:	mov	r1, #256	; 0x100
   1532c:	add	r0, sp, #32
   15330:	bl	4bb0 <snprintf@plt>
   15334:	mov	r1, r6
   15338:	add	r0, sp, #32
   1533c:	blx	r5
   15340:	add	sp, sp, #288	; 0x120
   15344:	pop	{r4, r5, r6, r7, r8, pc}
   15348:	add	r2, sp, #28
   1534c:	mov	r1, #0
   15350:	ldr	r0, [r0, #4]
   15354:	bl	1463c <stats_recurse>
   15358:	mov	r8, r0
   1535c:	ldr	r7, [r4, #8]
   15360:	ldr	r4, [r4, #12]
   15364:	ldr	r3, [sp, #28]
   15368:	str	r3, [sp, #16]
   1536c:	mov	r1, r7
   15370:	bl	1540c <__udivsi3>
   15374:	str	r0, [sp, #12]
   15378:	str	r8, [sp, #8]
   1537c:	str	r7, [sp, #4]
   15380:	ldr	r3, [pc, #44]	; 153b4 <rb_radixtree_stats+0xe4>
   15384:	add	r3, pc, r3
   15388:	str	r3, [sp]
   1538c:	mov	r3, r4
   15390:	ldr	r2, [pc, #32]	; 153b8 <rb_radixtree_stats+0xe8>
   15394:	add	r2, pc, r2
   15398:	mov	r1, #256	; 0x100
   1539c:	add	r0, sp, #32
   153a0:	bl	4bb0 <snprintf@plt>
   153a4:	b	15334 <rb_radixtree_stats+0x64>
   153a8:	.word	0x00000f48
   153ac:	.word	0x00001fec
   153b0:	.word	0x00001fbc
   153b4:	.word	0x00001f80
   153b8:	.word	0x00001f20

000153bc <rb_radixtree_stats_walk>:
   153bc:	push	{r4, r5, r6, lr}
   153c0:	mov	r6, r0
   153c4:	mov	r5, r1
   153c8:	ldr	r3, [pc, #52]	; 15404 <rb_radixtree_stats_walk+0x48>
   153cc:	add	r3, pc, r3
   153d0:	ldr	r2, [pc, #48]	; 15408 <rb_radixtree_stats_walk+0x4c>
   153d4:	ldr	r3, [r3, r2]
   153d8:	ldr	r4, [r3]
   153dc:	cmp	r4, #0
   153e0:	popeq	{r4, r5, r6, pc}
   153e4:	mov	r2, r5
   153e8:	mov	r1, r6
   153ec:	ldr	r0, [r4]
   153f0:	bl	4640 <rb_radixtree_stats@plt>
   153f4:	ldr	r4, [r4, #8]
   153f8:	cmp	r4, #0
   153fc:	bne	153e4 <rb_radixtree_stats_walk+0x28>
   15400:	pop	{r4, r5, r6, pc}
   15404:	.word	0x00012c2c
   15408:	.word	0x000003f4

0001540c <__udivsi3>:
   1540c:	subs	r2, r1, #1
   15410:	bxeq	lr
   15414:	bcc	155ec <__udivsi3+0x1e0>
   15418:	cmp	r0, r1
   1541c:	bls	155d0 <__udivsi3+0x1c4>
   15420:	tst	r1, r2
   15424:	beq	155dc <__udivsi3+0x1d0>
   15428:	clz	r3, r0
   1542c:	clz	r2, r1
   15430:	sub	r3, r2, r3
   15434:	rsbs	r3, r3, #31
   15438:	addne	r3, r3, r3, lsl #1
   1543c:	mov	r2, #0
   15440:	addne	pc, pc, r3, lsl #2
   15444:	nop			; (mov r0, r0)
   15448:	cmp	r0, r1, lsl #31
   1544c:	adc	r2, r2, r2
   15450:	subcs	r0, r0, r1, lsl #31
   15454:	cmp	r0, r1, lsl #30
   15458:	adc	r2, r2, r2
   1545c:	subcs	r0, r0, r1, lsl #30
   15460:	cmp	r0, r1, lsl #29
   15464:	adc	r2, r2, r2
   15468:	subcs	r0, r0, r1, lsl #29
   1546c:	cmp	r0, r1, lsl #28
   15470:	adc	r2, r2, r2
   15474:	subcs	r0, r0, r1, lsl #28
   15478:	cmp	r0, r1, lsl #27
   1547c:	adc	r2, r2, r2
   15480:	subcs	r0, r0, r1, lsl #27
   15484:	cmp	r0, r1, lsl #26
   15488:	adc	r2, r2, r2
   1548c:	subcs	r0, r0, r1, lsl #26
   15490:	cmp	r0, r1, lsl #25
   15494:	adc	r2, r2, r2
   15498:	subcs	r0, r0, r1, lsl #25
   1549c:	cmp	r0, r1, lsl #24
   154a0:	adc	r2, r2, r2
   154a4:	subcs	r0, r0, r1, lsl #24
   154a8:	cmp	r0, r1, lsl #23
   154ac:	adc	r2, r2, r2
   154b0:	subcs	r0, r0, r1, lsl #23
   154b4:	cmp	r0, r1, lsl #22
   154b8:	adc	r2, r2, r2
   154bc:	subcs	r0, r0, r1, lsl #22
   154c0:	cmp	r0, r1, lsl #21
   154c4:	adc	r2, r2, r2
   154c8:	subcs	r0, r0, r1, lsl #21
   154cc:	cmp	r0, r1, lsl #20
   154d0:	adc	r2, r2, r2
   154d4:	subcs	r0, r0, r1, lsl #20
   154d8:	cmp	r0, r1, lsl #19
   154dc:	adc	r2, r2, r2
   154e0:	subcs	r0, r0, r1, lsl #19
   154e4:	cmp	r0, r1, lsl #18
   154e8:	adc	r2, r2, r2
   154ec:	subcs	r0, r0, r1, lsl #18
   154f0:	cmp	r0, r1, lsl #17
   154f4:	adc	r2, r2, r2
   154f8:	subcs	r0, r0, r1, lsl #17
   154fc:	cmp	r0, r1, lsl #16
   15500:	adc	r2, r2, r2
   15504:	subcs	r0, r0, r1, lsl #16
   15508:	cmp	r0, r1, lsl #15
   1550c:	adc	r2, r2, r2
   15510:	subcs	r0, r0, r1, lsl #15
   15514:	cmp	r0, r1, lsl #14
   15518:	adc	r2, r2, r2
   1551c:	subcs	r0, r0, r1, lsl #14
   15520:	cmp	r0, r1, lsl #13
   15524:	adc	r2, r2, r2
   15528:	subcs	r0, r0, r1, lsl #13
   1552c:	cmp	r0, r1, lsl #12
   15530:	adc	r2, r2, r2
   15534:	subcs	r0, r0, r1, lsl #12
   15538:	cmp	r0, r1, lsl #11
   1553c:	adc	r2, r2, r2
   15540:	subcs	r0, r0, r1, lsl #11
   15544:	cmp	r0, r1, lsl #10
   15548:	adc	r2, r2, r2
   1554c:	subcs	r0, r0, r1, lsl #10
   15550:	cmp	r0, r1, lsl #9
   15554:	adc	r2, r2, r2
   15558:	subcs	r0, r0, r1, lsl #9
   1555c:	cmp	r0, r1, lsl #8
   15560:	adc	r2, r2, r2
   15564:	subcs	r0, r0, r1, lsl #8
   15568:	cmp	r0, r1, lsl #7
   1556c:	adc	r2, r2, r2
   15570:	subcs	r0, r0, r1, lsl #7
   15574:	cmp	r0, r1, lsl #6
   15578:	adc	r2, r2, r2
   1557c:	subcs	r0, r0, r1, lsl #6
   15580:	cmp	r0, r1, lsl #5
   15584:	adc	r2, r2, r2
   15588:	subcs	r0, r0, r1, lsl #5
   1558c:	cmp	r0, r1, lsl #4
   15590:	adc	r2, r2, r2
   15594:	subcs	r0, r0, r1, lsl #4
   15598:	cmp	r0, r1, lsl #3
   1559c:	adc	r2, r2, r2
   155a0:	subcs	r0, r0, r1, lsl #3
   155a4:	cmp	r0, r1, lsl #2
   155a8:	adc	r2, r2, r2
   155ac:	subcs	r0, r0, r1, lsl #2
   155b0:	cmp	r0, r1, lsl #1
   155b4:	adc	r2, r2, r2
   155b8:	subcs	r0, r0, r1, lsl #1
   155bc:	cmp	r0, r1
   155c0:	adc	r2, r2, r2
   155c4:	subcs	r0, r0, r1
   155c8:	mov	r0, r2
   155cc:	bx	lr
   155d0:	moveq	r0, #1
   155d4:	movne	r0, #0
   155d8:	bx	lr
   155dc:	clz	r2, r1
   155e0:	rsb	r2, r2, #31
   155e4:	lsr	r0, r0, r2
   155e8:	bx	lr
   155ec:	cmp	r0, #0
   155f0:	mvnne	r0, #0
   155f4:	b	15618 <__aeabi_idiv0>

000155f8 <__aeabi_uidivmod>:
   155f8:	cmp	r1, #0
   155fc:	beq	155ec <__udivsi3+0x1e0>
   15600:	push	{r0, r1, lr}
   15604:	bl	1540c <__udivsi3>
   15608:	pop	{r1, r2, lr}
   1560c:	mul	r3, r2, r0
   15610:	sub	r1, r1, r3
   15614:	bx	lr

00015618 <__aeabi_idiv0>:
   15618:	push	{r1, lr}
   1561c:	mov	r0, #8
   15620:	bl	48e0 <raise@plt>
   15624:	pop	{r1, pc}

Disassembly of section .fini:

00015628 <_fini>:
   15628:	push	{r3, lr}
   1562c:	pop	{r3, pc}
